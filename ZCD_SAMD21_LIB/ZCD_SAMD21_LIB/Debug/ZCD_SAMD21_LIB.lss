
ZCD_SAMD21_LIB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00010294  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00010294  00010294  00020294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000a30  20000000  0001029c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000073c  20000a30  00010ccc  00030a30  2**2
                  ALLOC
  4 .stack        00002004  2000116c  00011408  00030a30  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00030a30  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00030a58  2**0
                  CONTENTS, READONLY
  7 .debug_info   0002e395  00000000  00000000  00030ab1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000415d  00000000  00000000  0005ee46  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000a0d7  00000000  00000000  00062fa3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001a50  00000000  00000000  0006d07a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001888  00000000  00000000  0006eaca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000207ac  00000000  00000000  00070352  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00018939  00000000  00000000  00090afe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0009079d  00000000  00000000  000a9437  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000072c8  00000000  00000000  00139bd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .stab         0000009c  00000000  00000000  00140e9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000014d  00000000  00000000  00140f38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	70 31 00 20 19 01 00 00 15 01 00 00 15 01 00 00     p1. ............
	...
      2c:	15 01 00 00 00 00 00 00 00 00 00 00 15 01 00 00     ................
      3c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      4c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      5c:	51 73 00 00 15 01 00 00 15 01 00 00 15 01 00 00     Qs..............
      6c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      7c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      8c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      9c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      ac:	15 01 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000a30 	.word	0x20000a30
      d4:	00000000 	.word	0x00000000
      d8:	0001029c 	.word	0x0001029c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000a34 	.word	0x20000a34
     108:	0001029c 	.word	0x0001029c
     10c:	0001029c 	.word	0x0001029c
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
{
     118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     11a:	4a23      	ldr	r2, [pc, #140]	; (1a8 <Reset_Handler+0x90>)
     11c:	4b23      	ldr	r3, [pc, #140]	; (1ac <Reset_Handler+0x94>)
     11e:	429a      	cmp	r2, r3
     120:	d009      	beq.n	136 <Reset_Handler+0x1e>
     122:	4b22      	ldr	r3, [pc, #136]	; (1ac <Reset_Handler+0x94>)
     124:	4a20      	ldr	r2, [pc, #128]	; (1a8 <Reset_Handler+0x90>)
     126:	e003      	b.n	130 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     128:	6811      	ldr	r1, [r2, #0]
     12a:	6019      	str	r1, [r3, #0]
     12c:	3304      	adds	r3, #4
     12e:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     130:	491f      	ldr	r1, [pc, #124]	; (1b0 <Reset_Handler+0x98>)
     132:	428b      	cmp	r3, r1
     134:	d3f8      	bcc.n	128 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     136:	4b1f      	ldr	r3, [pc, #124]	; (1b4 <Reset_Handler+0x9c>)
     138:	e002      	b.n	140 <Reset_Handler+0x28>
                *pDest++ = 0;
     13a:	2200      	movs	r2, #0
     13c:	601a      	str	r2, [r3, #0]
     13e:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     140:	4a1d      	ldr	r2, [pc, #116]	; (1b8 <Reset_Handler+0xa0>)
     142:	4293      	cmp	r3, r2
     144:	d3f9      	bcc.n	13a <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     146:	4a1d      	ldr	r2, [pc, #116]	; (1bc <Reset_Handler+0xa4>)
     148:	21ff      	movs	r1, #255	; 0xff
     14a:	4b1d      	ldr	r3, [pc, #116]	; (1c0 <Reset_Handler+0xa8>)
     14c:	438b      	bics	r3, r1
     14e:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     150:	39fd      	subs	r1, #253	; 0xfd
     152:	2390      	movs	r3, #144	; 0x90
     154:	005b      	lsls	r3, r3, #1
     156:	4a1b      	ldr	r2, [pc, #108]	; (1c4 <Reset_Handler+0xac>)
     158:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15a:	4a1b      	ldr	r2, [pc, #108]	; (1c8 <Reset_Handler+0xb0>)
     15c:	78d3      	ldrb	r3, [r2, #3]
     15e:	2503      	movs	r5, #3
     160:	43ab      	bics	r3, r5
     162:	2402      	movs	r4, #2
     164:	4323      	orrs	r3, r4
     166:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     168:	78d3      	ldrb	r3, [r2, #3]
     16a:	270c      	movs	r7, #12
     16c:	43bb      	bics	r3, r7
     16e:	2608      	movs	r6, #8
     170:	4333      	orrs	r3, r6
     172:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     174:	4b15      	ldr	r3, [pc, #84]	; (1cc <Reset_Handler+0xb4>)
     176:	7b98      	ldrb	r0, [r3, #14]
     178:	2230      	movs	r2, #48	; 0x30
     17a:	4390      	bics	r0, r2
     17c:	2220      	movs	r2, #32
     17e:	4310      	orrs	r0, r2
     180:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     182:	7b99      	ldrb	r1, [r3, #14]
     184:	43b9      	bics	r1, r7
     186:	4331      	orrs	r1, r6
     188:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     18a:	7b9a      	ldrb	r2, [r3, #14]
     18c:	43aa      	bics	r2, r5
     18e:	4322      	orrs	r2, r4
     190:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     192:	4a0f      	ldr	r2, [pc, #60]	; (1d0 <Reset_Handler+0xb8>)
     194:	6851      	ldr	r1, [r2, #4]
     196:	2380      	movs	r3, #128	; 0x80
     198:	430b      	orrs	r3, r1
     19a:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     19c:	4b0d      	ldr	r3, [pc, #52]	; (1d4 <Reset_Handler+0xbc>)
     19e:	4798      	blx	r3
        main();
     1a0:	4b0d      	ldr	r3, [pc, #52]	; (1d8 <Reset_Handler+0xc0>)
     1a2:	4798      	blx	r3
     1a4:	e7fe      	b.n	1a4 <Reset_Handler+0x8c>
     1a6:	46c0      	nop			; (mov r8, r8)
     1a8:	0001029c 	.word	0x0001029c
     1ac:	20000000 	.word	0x20000000
     1b0:	20000a30 	.word	0x20000a30
     1b4:	20000a30 	.word	0x20000a30
     1b8:	2000116c 	.word	0x2000116c
     1bc:	e000ed00 	.word	0xe000ed00
     1c0:	00000000 	.word	0x00000000
     1c4:	41007000 	.word	0x41007000
     1c8:	41005000 	.word	0x41005000
     1cc:	41004800 	.word	0x41004800
     1d0:	41004000 	.word	0x41004000
     1d4:	0000a539 	.word	0x0000a539
     1d8:	000001dd 	.word	0x000001dd

000001dc <main>:
static ZCD_Handler zcd;


static  uint16_t  dac_value=0;
int main(void)
{
     1dc:	b590      	push	{r4, r7, lr}
     1de:	b083      	sub	sp, #12
     1e0:	af00      	add	r7, sp, #0
	uint32_t local_tone;
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
     1e2:	4b15      	ldr	r3, [pc, #84]	; (238 <main+0x5c>)
     1e4:	4798      	blx	r3
	dac_sync_enable_channel(&DAC_0, 0);
     1e6:	4b15      	ldr	r3, [pc, #84]	; (23c <main+0x60>)
     1e8:	2100      	movs	r1, #0
     1ea:	0018      	movs	r0, r3
     1ec:	4b14      	ldr	r3, [pc, #80]	; (240 <main+0x64>)
     1ee:	4798      	blx	r3
	zcd.Init();
     1f0:	4b14      	ldr	r3, [pc, #80]	; (244 <main+0x68>)
     1f2:	0018      	movs	r0, r3
     1f4:	4b14      	ldr	r3, [pc, #80]	; (248 <main+0x6c>)
     1f6:	4798      	blx	r3
	bool dir=true;
     1f8:	1dfb      	adds	r3, r7, #7
     1fa:	2201      	movs	r2, #1
     1fc:	701a      	strb	r2, [r3, #0]
	//
	// 	timer_start(&TIMER_0);
	/* Replace with your application code */
	while (1) {

			dac_value=dir?0:0x3ff;
     1fe:	1dfb      	adds	r3, r7, #7
     200:	781b      	ldrb	r3, [r3, #0]
     202:	2b00      	cmp	r3, #0
     204:	d001      	beq.n	20a <main+0x2e>
     206:	2200      	movs	r2, #0
     208:	e000      	b.n	20c <main+0x30>
     20a:	4a10      	ldr	r2, [pc, #64]	; (24c <main+0x70>)
     20c:	4b10      	ldr	r3, [pc, #64]	; (250 <main+0x74>)
     20e:	801a      	strh	r2, [r3, #0]
			dac_sync_write(&DAC_0, 0, &dac_value, 1);
     210:	4a0f      	ldr	r2, [pc, #60]	; (250 <main+0x74>)
     212:	480a      	ldr	r0, [pc, #40]	; (23c <main+0x60>)
     214:	2301      	movs	r3, #1
     216:	2100      	movs	r1, #0
     218:	4c0e      	ldr	r4, [pc, #56]	; (254 <main+0x78>)
     21a:	47a0      	blx	r4
			//	delay_ms(100);
			dir=!dir;
     21c:	1dfb      	adds	r3, r7, #7
     21e:	1dfa      	adds	r2, r7, #7
     220:	7812      	ldrb	r2, [r2, #0]
     222:	2101      	movs	r1, #1
     224:	404a      	eors	r2, r1
     226:	701a      	strb	r2, [r3, #0]
			local_tone=zcd.Get_Tone();
     228:	4b06      	ldr	r3, [pc, #24]	; (244 <main+0x68>)
     22a:	0018      	movs	r0, r3
     22c:	4b0a      	ldr	r3, [pc, #40]	; (258 <main+0x7c>)
     22e:	4798      	blx	r3
     230:	0003      	movs	r3, r0
     232:	603b      	str	r3, [r7, #0]
			dac_value=dir?0:0x3ff;
     234:	e7e3      	b.n	1fe <main+0x22>
     236:	46c0      	nop			; (mov r8, r8)
     238:	00000729 	.word	0x00000729
     23c:	20001108 	.word	0x20001108
     240:	000016c5 	.word	0x000016c5
     244:	20000a4c 	.word	0x20000a4c
     248:	0000059d 	.word	0x0000059d
     24c:	000003ff 	.word	0x000003ff
     250:	20000a60 	.word	0x20000a60
     254:	0000171d 	.word	0x0000171d
     258:	000005bd 	.word	0x000005bd

0000025c <_Z41__static_initialization_and_destruction_0ii>:
	
		
		
		
	}
     25c:	b580      	push	{r7, lr}
     25e:	b082      	sub	sp, #8
     260:	af00      	add	r7, sp, #0
     262:	6078      	str	r0, [r7, #4]
     264:	6039      	str	r1, [r7, #0]
     266:	687b      	ldr	r3, [r7, #4]
     268:	2b01      	cmp	r3, #1
     26a:	d10d      	bne.n	288 <_Z41__static_initialization_and_destruction_0ii+0x2c>
     26c:	683b      	ldr	r3, [r7, #0]
     26e:	4a08      	ldr	r2, [pc, #32]	; (290 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     270:	4293      	cmp	r3, r2
     272:	d109      	bne.n	288 <_Z41__static_initialization_and_destruction_0ii+0x2c>
static ZCD_Handler zcd;
     274:	4b07      	ldr	r3, [pc, #28]	; (294 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     276:	0018      	movs	r0, r3
     278:	4b07      	ldr	r3, [pc, #28]	; (298 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     27a:	4798      	blx	r3
     27c:	4a07      	ldr	r2, [pc, #28]	; (29c <_Z41__static_initialization_and_destruction_0ii+0x40>)
     27e:	4908      	ldr	r1, [pc, #32]	; (2a0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
     280:	4b04      	ldr	r3, [pc, #16]	; (294 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     282:	0018      	movs	r0, r3
     284:	4b07      	ldr	r3, [pc, #28]	; (2a4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
     286:	4798      	blx	r3
     288:	46c0      	nop			; (mov r8, r8)
     28a:	46bd      	mov	sp, r7
     28c:	b002      	add	sp, #8
     28e:	bd80      	pop	{r7, pc}
     290:	0000ffff 	.word	0x0000ffff
     294:	20000a4c 	.word	0x20000a4c
     298:	00000565 	.word	0x00000565
     29c:	20000000 	.word	0x20000000
     2a0:	00000589 	.word	0x00000589
     2a4:	00008c81 	.word	0x00008c81

000002a8 <_GLOBAL__sub_I_main>:
     2a8:	b580      	push	{r7, lr}
     2aa:	af00      	add	r7, sp, #0
     2ac:	4b03      	ldr	r3, [pc, #12]	; (2bc <_GLOBAL__sub_I_main+0x14>)
     2ae:	0019      	movs	r1, r3
     2b0:	2001      	movs	r0, #1
     2b2:	4b03      	ldr	r3, [pc, #12]	; (2c0 <_GLOBAL__sub_I_main+0x18>)
     2b4:	4798      	blx	r3
     2b6:	46bd      	mov	sp, r7
     2b8:	bd80      	pop	{r7, pc}
     2ba:	46c0      	nop			; (mov r8, r8)
     2bc:	0000ffff 	.word	0x0000ffff
     2c0:	0000025d 	.word	0x0000025d

000002c4 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     2c4:	b580      	push	{r7, lr}
     2c6:	b084      	sub	sp, #16
     2c8:	af00      	add	r7, sp, #0
     2ca:	60f8      	str	r0, [r7, #12]
     2cc:	607a      	str	r2, [r7, #4]
     2ce:	230b      	movs	r3, #11
     2d0:	18fb      	adds	r3, r7, r3
     2d2:	1c0a      	adds	r2, r1, #0
     2d4:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     2d6:	230b      	movs	r3, #11
     2d8:	18fb      	adds	r3, r7, r3
     2da:	781b      	ldrb	r3, [r3, #0]
     2dc:	68fa      	ldr	r2, [r7, #12]
     2de:	01db      	lsls	r3, r3, #7
     2e0:	18d3      	adds	r3, r2, r3
     2e2:	3318      	adds	r3, #24
     2e4:	687a      	ldr	r2, [r7, #4]
     2e6:	601a      	str	r2, [r3, #0]
}
     2e8:	46c0      	nop			; (mov r8, r8)
     2ea:	46bd      	mov	sp, r7
     2ec:	b004      	add	sp, #16
     2ee:	bd80      	pop	{r7, pc}

000002f0 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     2f0:	b580      	push	{r7, lr}
     2f2:	b084      	sub	sp, #16
     2f4:	af00      	add	r7, sp, #0
     2f6:	60f8      	str	r0, [r7, #12]
     2f8:	607a      	str	r2, [r7, #4]
     2fa:	230b      	movs	r3, #11
     2fc:	18fb      	adds	r3, r7, r3
     2fe:	1c0a      	adds	r2, r1, #0
     300:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     302:	230b      	movs	r3, #11
     304:	18fb      	adds	r3, r7, r3
     306:	781b      	ldrb	r3, [r3, #0]
     308:	68fa      	ldr	r2, [r7, #12]
     30a:	01db      	lsls	r3, r3, #7
     30c:	18d3      	adds	r3, r2, r3
     30e:	3314      	adds	r3, #20
     310:	687a      	ldr	r2, [r7, #4]
     312:	601a      	str	r2, [r3, #0]
}
     314:	46c0      	nop			; (mov r8, r8)
     316:	46bd      	mov	sp, r7
     318:	b004      	add	sp, #16
     31a:	bd80      	pop	{r7, pc}

0000031c <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
     31c:	b580      	push	{r7, lr}
     31e:	b082      	sub	sp, #8
     320:	af00      	add	r7, sp, #0
     322:	6039      	str	r1, [r7, #0]
     324:	0011      	movs	r1, r2
     326:	1dfb      	adds	r3, r7, #7
     328:	1c02      	adds	r2, r0, #0
     32a:	701a      	strb	r2, [r3, #0]
     32c:	1dbb      	adds	r3, r7, #6
     32e:	1c0a      	adds	r2, r1, #0
     330:	701a      	strb	r2, [r3, #0]
	if (level) {
     332:	1dbb      	adds	r3, r7, #6
     334:	781b      	ldrb	r3, [r3, #0]
     336:	2b00      	cmp	r3, #0
     338:	d008      	beq.n	34c <_gpio_set_level+0x30>
		hri_port_set_OUT_reg(PORT_IOBUS, port, mask);
     33a:	683a      	ldr	r2, [r7, #0]
     33c:	1dfb      	adds	r3, r7, #7
     33e:	7819      	ldrb	r1, [r3, #0]
     340:	23c0      	movs	r3, #192	; 0xc0
     342:	05db      	lsls	r3, r3, #23
     344:	0018      	movs	r0, r3
     346:	4b07      	ldr	r3, [pc, #28]	; (364 <_gpio_set_level+0x48>)
     348:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
	}
}
     34a:	e007      	b.n	35c <_gpio_set_level+0x40>
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
     34c:	683a      	ldr	r2, [r7, #0]
     34e:	1dfb      	adds	r3, r7, #7
     350:	7819      	ldrb	r1, [r3, #0]
     352:	23c0      	movs	r3, #192	; 0xc0
     354:	05db      	lsls	r3, r3, #23
     356:	0018      	movs	r0, r3
     358:	4b03      	ldr	r3, [pc, #12]	; (368 <_gpio_set_level+0x4c>)
     35a:	4798      	blx	r3
}
     35c:	46c0      	nop			; (mov r8, r8)
     35e:	46bd      	mov	sp, r7
     360:	b002      	add	sp, #8
     362:	bd80      	pop	{r7, pc}
     364:	000002c5 	.word	0x000002c5
     368:	000002f1 	.word	0x000002f1

0000036c <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
     36c:	b580      	push	{r7, lr}
     36e:	b082      	sub	sp, #8
     370:	af00      	add	r7, sp, #0
     372:	0002      	movs	r2, r0
     374:	1dfb      	adds	r3, r7, #7
     376:	701a      	strb	r2, [r3, #0]
     378:	1dbb      	adds	r3, r7, #6
     37a:	1c0a      	adds	r2, r1, #0
     37c:	701a      	strb	r2, [r3, #0]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     37e:	1dfb      	adds	r3, r7, #7
     380:	781b      	ldrb	r3, [r3, #0]
     382:	115b      	asrs	r3, r3, #5
     384:	b2d8      	uxtb	r0, r3
     386:	1dfb      	adds	r3, r7, #7
     388:	781b      	ldrb	r3, [r3, #0]
     38a:	001a      	movs	r2, r3
     38c:	231f      	movs	r3, #31
     38e:	4013      	ands	r3, r2
     390:	2201      	movs	r2, #1
     392:	409a      	lsls	r2, r3
     394:	0011      	movs	r1, r2
     396:	1dbb      	adds	r3, r7, #6
     398:	781b      	ldrb	r3, [r3, #0]
     39a:	001a      	movs	r2, r3
     39c:	4b02      	ldr	r3, [pc, #8]	; (3a8 <gpio_set_pin_level+0x3c>)
     39e:	4798      	blx	r3
}
     3a0:	46c0      	nop			; (mov r8, r8)
     3a2:	46bd      	mov	sp, r7
     3a4:	b002      	add	sp, #8
     3a6:	bd80      	pop	{r7, pc}
     3a8:	0000031d 	.word	0x0000031d

000003ac <_ZN17SPI_Syn_ZCD_ClassC1Ev>:
SPI_Syn_ZCD_Class	*ptrSPISync;



// default constructor
SPI_Syn_ZCD_Class::SPI_Syn_ZCD_Class()
     3ac:	b580      	push	{r7, lr}
     3ae:	b082      	sub	sp, #8
     3b0:	af00      	add	r7, sp, #0
     3b2:	6078      	str	r0, [r7, #4]
{
		ptrSPISync=this;
     3b4:	4b03      	ldr	r3, [pc, #12]	; (3c4 <_ZN17SPI_Syn_ZCD_ClassC1Ev+0x18>)
     3b6:	687a      	ldr	r2, [r7, #4]
     3b8:	601a      	str	r2, [r3, #0]
//	SPI=SPI_1;
} //SPI_Syn_Class
     3ba:	687b      	ldr	r3, [r7, #4]
     3bc:	0018      	movs	r0, r3
     3be:	46bd      	mov	sp, r7
     3c0:	b002      	add	sp, #8
     3c2:	bd80      	pop	{r7, pc}
     3c4:	20000a64 	.word	0x20000a64

000003c8 <_ZN17SPI_Syn_ZCD_ClassD1Ev>:



// default destructor
SPI_Syn_ZCD_Class::~SPI_Syn_ZCD_Class()
     3c8:	b580      	push	{r7, lr}
     3ca:	b082      	sub	sp, #8
     3cc:	af00      	add	r7, sp, #0
     3ce:	6078      	str	r0, [r7, #4]
{
} //~SPI_Syn_Class
     3d0:	687b      	ldr	r3, [r7, #4]
     3d2:	0018      	movs	r0, r3
     3d4:	46bd      	mov	sp, r7
     3d6:	b002      	add	sp, #8
     3d8:	bd80      	pop	{r7, pc}
	...

000003dc <_ZN17SPI_Syn_ZCD_Class4InitEv>:

void SPI_Syn_ZCD_Class::Init(){
     3dc:	b580      	push	{r7, lr}
     3de:	b082      	sub	sp, #8
     3e0:	af00      	add	r7, sp, #0
     3e2:	6078      	str	r0, [r7, #4]

		spi_m_sync_get_io_descriptor(&SPI_ZCD, &io);
     3e4:	687b      	ldr	r3, [r7, #4]
     3e6:	330c      	adds	r3, #12
     3e8:	001a      	movs	r2, r3
     3ea:	4b08      	ldr	r3, [pc, #32]	; (40c <_ZN17SPI_Syn_ZCD_Class4InitEv+0x30>)
     3ec:	0011      	movs	r1, r2
     3ee:	0018      	movs	r0, r3
     3f0:	4b07      	ldr	r3, [pc, #28]	; (410 <_ZN17SPI_Syn_ZCD_Class4InitEv+0x34>)
     3f2:	4798      	blx	r3

	Enable();
     3f4:	687b      	ldr	r3, [r7, #4]
     3f6:	0018      	movs	r0, r3
     3f8:	4b06      	ldr	r3, [pc, #24]	; (414 <_ZN17SPI_Syn_ZCD_Class4InitEv+0x38>)
     3fa:	4798      	blx	r3
	ready=true;
     3fc:	687b      	ldr	r3, [r7, #4]
     3fe:	2201      	movs	r2, #1
     400:	701a      	strb	r2, [r3, #0]
	
}
     402:	46c0      	nop			; (mov r8, r8)
     404:	46bd      	mov	sp, r7
     406:	b002      	add	sp, #8
     408:	bd80      	pop	{r7, pc}
     40a:	46c0      	nop			; (mov r8, r8)
     40c:	2000112c 	.word	0x2000112c
     410:	00001b39 	.word	0x00001b39
     414:	00000419 	.word	0x00000419

00000418 <_ZN17SPI_Syn_ZCD_Class6EnableEv>:



uint8_t SPI_Syn_ZCD_Class::Enable(){
     418:	b580      	push	{r7, lr}
     41a:	b082      	sub	sp, #8
     41c:	af00      	add	r7, sp, #0
     41e:	6078      	str	r0, [r7, #4]
	
	spi_m_sync_enable(&SPI_ZCD);
     420:	4b04      	ldr	r3, [pc, #16]	; (434 <_ZN17SPI_Syn_ZCD_Class6EnableEv+0x1c>)
     422:	0018      	movs	r0, r3
     424:	4b04      	ldr	r3, [pc, #16]	; (438 <_ZN17SPI_Syn_ZCD_Class6EnableEv+0x20>)
     426:	4798      	blx	r3
	return 0;
     428:	2300      	movs	r3, #0
}
     42a:	0018      	movs	r0, r3
     42c:	46bd      	mov	sp, r7
     42e:	b002      	add	sp, #8
     430:	bd80      	pop	{r7, pc}
     432:	46c0      	nop			; (mov r8, r8)
     434:	2000112c 	.word	0x2000112c
     438:	000019c5 	.word	0x000019c5

0000043c <_ZN17SPI_Syn_ZCD_Class5WriteEPKhh>:

uint8_t  SPI_Syn_ZCD_Class::Write(const uint8_t * p, uint8_t n){
     43c:	b580      	push	{r7, lr}
     43e:	b084      	sub	sp, #16
     440:	af00      	add	r7, sp, #0
     442:	60f8      	str	r0, [r7, #12]
     444:	60b9      	str	r1, [r7, #8]
     446:	1dfb      	adds	r3, r7, #7
     448:	701a      	strb	r2, [r3, #0]
	ready=false;
     44a:	68fb      	ldr	r3, [r7, #12]
     44c:	2200      	movs	r2, #0
     44e:	701a      	strb	r2, [r3, #0]
	io_write(io, p, (uint16_t)n);
     450:	68fb      	ldr	r3, [r7, #12]
     452:	68d8      	ldr	r0, [r3, #12]
     454:	1dfb      	adds	r3, r7, #7
     456:	781b      	ldrb	r3, [r3, #0]
     458:	b29a      	uxth	r2, r3
     45a:	68bb      	ldr	r3, [r7, #8]
     45c:	0019      	movs	r1, r3
     45e:	4b04      	ldr	r3, [pc, #16]	; (470 <_ZN17SPI_Syn_ZCD_Class5WriteEPKhh+0x34>)
     460:	4798      	blx	r3

	return n;
     462:	1dfb      	adds	r3, r7, #7
     464:	781b      	ldrb	r3, [r3, #0]
}
     466:	0018      	movs	r0, r3
     468:	46bd      	mov	sp, r7
     46a:	b004      	add	sp, #16
     46c:	bd80      	pop	{r7, pc}
     46e:	46c0      	nop			; (mov r8, r8)
     470:	00001895 	.word	0x00001895

00000474 <_ZN17SPI_Syn_ZCD_Class4ReadEPhh>:
uint8_t  SPI_Syn_ZCD_Class::Read(uint8_t * p, uint8_t n){
     474:	b580      	push	{r7, lr}
     476:	b084      	sub	sp, #16
     478:	af00      	add	r7, sp, #0
     47a:	60f8      	str	r0, [r7, #12]
     47c:	60b9      	str	r1, [r7, #8]
     47e:	1dfb      	adds	r3, r7, #7
     480:	701a      	strb	r2, [r3, #0]
	ready=false;
     482:	68fb      	ldr	r3, [r7, #12]
     484:	2200      	movs	r2, #0
     486:	701a      	strb	r2, [r3, #0]
		io_read(io, p, (uint16_t)n);
     488:	68fb      	ldr	r3, [r7, #12]
     48a:	68d8      	ldr	r0, [r3, #12]
     48c:	1dfb      	adds	r3, r7, #7
     48e:	781b      	ldrb	r3, [r3, #0]
     490:	b29a      	uxth	r2, r3
     492:	68bb      	ldr	r3, [r7, #8]
     494:	0019      	movs	r1, r3
     496:	4b04      	ldr	r3, [pc, #16]	; (4a8 <_ZN17SPI_Syn_ZCD_Class4ReadEPhh+0x34>)
     498:	4798      	blx	r3

	
	return n;
     49a:	1dfb      	adds	r3, r7, #7
     49c:	781b      	ldrb	r3, [r3, #0]
}
     49e:	0018      	movs	r0, r3
     4a0:	46bd      	mov	sp, r7
     4a2:	b004      	add	sp, #16
     4a4:	bd80      	pop	{r7, pc}
     4a6:	46c0      	nop			; (mov r8, r8)
     4a8:	000018e9 	.word	0x000018e9

000004ac <_ZN17SPI_Syn_ZCD_Class5SetCSEb>:
void SPI_Syn_ZCD_Class::Disable(void){
	//SPI_LMX_disable();
	spi_m_sync_disable(&SPI_ZCD);
	
}
void SPI_Syn_ZCD_Class::SetCS(bool st){
     4ac:	b580      	push	{r7, lr}
     4ae:	b082      	sub	sp, #8
     4b0:	af00      	add	r7, sp, #0
     4b2:	6078      	str	r0, [r7, #4]
     4b4:	000a      	movs	r2, r1
     4b6:	1cfb      	adds	r3, r7, #3
     4b8:	701a      	strb	r2, [r3, #0]
	gpio_set_pin_level(CS_ZCD,st);
     4ba:	1cfb      	adds	r3, r7, #3
     4bc:	781b      	ldrb	r3, [r3, #0]
     4be:	0019      	movs	r1, r3
     4c0:	2003      	movs	r0, #3
     4c2:	4b03      	ldr	r3, [pc, #12]	; (4d0 <_ZN17SPI_Syn_ZCD_Class5SetCSEb+0x24>)
     4c4:	4798      	blx	r3
}
     4c6:	46c0      	nop			; (mov r8, r8)
     4c8:	46bd      	mov	sp, r7
     4ca:	b002      	add	sp, #8
     4cc:	bd80      	pop	{r7, pc}
     4ce:	46c0      	nop			; (mov r8, r8)
     4d0:	0000036d 	.word	0x0000036d

000004d4 <hri_port_toggle_OUT_reg>:

static inline void hri_port_toggle_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     4d4:	b580      	push	{r7, lr}
     4d6:	b084      	sub	sp, #16
     4d8:	af00      	add	r7, sp, #0
     4da:	60f8      	str	r0, [r7, #12]
     4dc:	607a      	str	r2, [r7, #4]
     4de:	230b      	movs	r3, #11
     4e0:	18fb      	adds	r3, r7, r3
     4e2:	1c0a      	adds	r2, r1, #0
     4e4:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
     4e6:	230b      	movs	r3, #11
     4e8:	18fb      	adds	r3, r7, r3
     4ea:	781b      	ldrb	r3, [r3, #0]
     4ec:	68fa      	ldr	r2, [r7, #12]
     4ee:	01db      	lsls	r3, r3, #7
     4f0:	18d3      	adds	r3, r2, r3
     4f2:	331c      	adds	r3, #28
     4f4:	687a      	ldr	r2, [r7, #4]
     4f6:	601a      	str	r2, [r3, #0]
}
     4f8:	46c0      	nop			; (mov r8, r8)
     4fa:	46bd      	mov	sp, r7
     4fc:	b004      	add	sp, #16
     4fe:	bd80      	pop	{r7, pc}

00000500 <_gpio_toggle_level>:

/**
 * \brief Change output level to the opposite with mask
 */
static inline void _gpio_toggle_level(const enum gpio_port port, const uint32_t mask)
{
     500:	b580      	push	{r7, lr}
     502:	b082      	sub	sp, #8
     504:	af00      	add	r7, sp, #0
     506:	0002      	movs	r2, r0
     508:	6039      	str	r1, [r7, #0]
     50a:	1dfb      	adds	r3, r7, #7
     50c:	701a      	strb	r2, [r3, #0]
	hri_port_toggle_OUT_reg(PORT_IOBUS, port, mask);
     50e:	683a      	ldr	r2, [r7, #0]
     510:	1dfb      	adds	r3, r7, #7
     512:	7819      	ldrb	r1, [r3, #0]
     514:	23c0      	movs	r3, #192	; 0xc0
     516:	05db      	lsls	r3, r3, #23
     518:	0018      	movs	r0, r3
     51a:	4b03      	ldr	r3, [pc, #12]	; (528 <_gpio_toggle_level+0x28>)
     51c:	4798      	blx	r3
}
     51e:	46c0      	nop			; (mov r8, r8)
     520:	46bd      	mov	sp, r7
     522:	b002      	add	sp, #8
     524:	bd80      	pop	{r7, pc}
     526:	46c0      	nop			; (mov r8, r8)
     528:	000004d5 	.word	0x000004d5

0000052c <gpio_toggle_pin_level>:
 * Toggle the pin levels on pins defined by bit mask
 *
 * \param[in] pin       The pin number for device
 */
static inline void gpio_toggle_pin_level(const uint8_t pin)
{
     52c:	b580      	push	{r7, lr}
     52e:	b082      	sub	sp, #8
     530:	af00      	add	r7, sp, #0
     532:	0002      	movs	r2, r0
     534:	1dfb      	adds	r3, r7, #7
     536:	701a      	strb	r2, [r3, #0]
	_gpio_toggle_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin));
     538:	1dfb      	adds	r3, r7, #7
     53a:	781b      	ldrb	r3, [r3, #0]
     53c:	115b      	asrs	r3, r3, #5
     53e:	b2d8      	uxtb	r0, r3
     540:	1dfb      	adds	r3, r7, #7
     542:	781b      	ldrb	r3, [r3, #0]
     544:	001a      	movs	r2, r3
     546:	231f      	movs	r3, #31
     548:	4013      	ands	r3, r2
     54a:	2201      	movs	r2, #1
     54c:	409a      	lsls	r2, r3
     54e:	0013      	movs	r3, r2
     550:	0019      	movs	r1, r3
     552:	4b03      	ldr	r3, [pc, #12]	; (560 <gpio_toggle_pin_level+0x34>)
     554:	4798      	blx	r3
}
     556:	46c0      	nop			; (mov r8, r8)
     558:	46bd      	mov	sp, r7
     55a:	b002      	add	sp, #8
     55c:	bd80      	pop	{r7, pc}
     55e:	46c0      	nop			; (mov r8, r8)
     560:	00000501 	.word	0x00000501

00000564 <_ZN11ZCD_HandlerC1Ev>:
#include "stdio_start.h"

static SPI_Syn_ZCD_Class local_spi;

// default constructor
ZCD_Handler::ZCD_Handler()
     564:	b580      	push	{r7, lr}
     566:	b082      	sub	sp, #8
     568:	af00      	add	r7, sp, #0
     56a:	6078      	str	r0, [r7, #4]
{
	spi=&local_spi;
     56c:	687b      	ldr	r3, [r7, #4]
     56e:	4a05      	ldr	r2, [pc, #20]	; (584 <_ZN11ZCD_HandlerC1Ev+0x20>)
     570:	605a      	str	r2, [r3, #4]
	tone=0;
     572:	687b      	ldr	r3, [r7, #4]
     574:	2200      	movs	r2, #0
     576:	601a      	str	r2, [r3, #0]
} //ZCD_Handler
     578:	687b      	ldr	r3, [r7, #4]
     57a:	0018      	movs	r0, r3
     57c:	46bd      	mov	sp, r7
     57e:	b002      	add	sp, #8
     580:	bd80      	pop	{r7, pc}
     582:	46c0      	nop			; (mov r8, r8)
     584:	20000a68 	.word	0x20000a68

00000588 <_ZN11ZCD_HandlerD1Ev>:

// default destructor
ZCD_Handler::~ZCD_Handler()
     588:	b580      	push	{r7, lr}
     58a:	b082      	sub	sp, #8
     58c:	af00      	add	r7, sp, #0
     58e:	6078      	str	r0, [r7, #4]
{
} //~ZCD_Handler
     590:	687b      	ldr	r3, [r7, #4]
     592:	0018      	movs	r0, r3
     594:	46bd      	mov	sp, r7
     596:	b002      	add	sp, #8
     598:	bd80      	pop	{r7, pc}
	...

0000059c <_ZN11ZCD_Handler4InitEv>:

bool ZCD_Handler::Init(){
     59c:	b580      	push	{r7, lr}
     59e:	b082      	sub	sp, #8
     5a0:	af00      	add	r7, sp, #0
     5a2:	6078      	str	r0, [r7, #4]
	spi->Init();
     5a4:	687b      	ldr	r3, [r7, #4]
     5a6:	685b      	ldr	r3, [r3, #4]
     5a8:	0018      	movs	r0, r3
     5aa:	4b03      	ldr	r3, [pc, #12]	; (5b8 <_ZN11ZCD_Handler4InitEv+0x1c>)
     5ac:	4798      	blx	r3
	return true;
     5ae:	2301      	movs	r3, #1
}
     5b0:	0018      	movs	r0, r3
     5b2:	46bd      	mov	sp, r7
     5b4:	b002      	add	sp, #8
     5b6:	bd80      	pop	{r7, pc}
     5b8:	000003dd 	.word	0x000003dd

000005bc <_ZN11ZCD_Handler8Get_ToneEv>:

uint32_t ZCD_Handler::Get_Tone(){
     5bc:	b580      	push	{r7, lr}
     5be:	b084      	sub	sp, #16
     5c0:	af00      	add	r7, sp, #0
     5c2:	6078      	str	r0, [r7, #4]
	command=0x01;
     5c4:	687b      	ldr	r3, [r7, #4]
     5c6:	2201      	movs	r2, #1
     5c8:	721a      	strb	r2, [r3, #8]
	spi->SetCS(false);
     5ca:	687b      	ldr	r3, [r7, #4]
     5cc:	685b      	ldr	r3, [r3, #4]
     5ce:	2100      	movs	r1, #0
     5d0:	0018      	movs	r0, r3
     5d2:	4b33      	ldr	r3, [pc, #204]	; (6a0 <_ZN11ZCD_Handler8Get_ToneEv+0xe4>)
     5d4:	4798      	blx	r3
	spi->Write(&command,1);
     5d6:	687b      	ldr	r3, [r7, #4]
     5d8:	6858      	ldr	r0, [r3, #4]
     5da:	687b      	ldr	r3, [r7, #4]
     5dc:	3308      	adds	r3, #8
     5de:	2201      	movs	r2, #1
     5e0:	0019      	movs	r1, r3
     5e2:	4b30      	ldr	r3, [pc, #192]	; (6a4 <_ZN11ZCD_Handler8Get_ToneEv+0xe8>)
     5e4:	4798      	blx	r3
	spi->SetCS(true);
     5e6:	687b      	ldr	r3, [r7, #4]
     5e8:	685b      	ldr	r3, [r3, #4]
     5ea:	2101      	movs	r1, #1
     5ec:	0018      	movs	r0, r3
     5ee:	4b2c      	ldr	r3, [pc, #176]	; (6a0 <_ZN11ZCD_Handler8Get_ToneEv+0xe4>)
     5f0:	4798      	blx	r3
	delay_ms(100);
     5f2:	2064      	movs	r0, #100	; 0x64
     5f4:	4b2c      	ldr	r3, [pc, #176]	; (6a8 <_ZN11ZCD_Handler8Get_ToneEv+0xec>)
     5f6:	4798      	blx	r3
	spi->SetCS(false);
     5f8:	687b      	ldr	r3, [r7, #4]
     5fa:	685b      	ldr	r3, [r3, #4]
     5fc:	2100      	movs	r1, #0
     5fe:	0018      	movs	r0, r3
     600:	4b27      	ldr	r3, [pc, #156]	; (6a0 <_ZN11ZCD_Handler8Get_ToneEv+0xe4>)
     602:	4798      	blx	r3
	spi->Read(read_buffer,4);
     604:	687b      	ldr	r3, [r7, #4]
     606:	6858      	ldr	r0, [r3, #4]
     608:	687b      	ldr	r3, [r7, #4]
     60a:	3309      	adds	r3, #9
     60c:	2204      	movs	r2, #4
     60e:	0019      	movs	r1, r3
     610:	4b26      	ldr	r3, [pc, #152]	; (6ac <_ZN11ZCD_Handler8Get_ToneEv+0xf0>)
     612:	4798      	blx	r3
	spi->SetCS(true);
     614:	687b      	ldr	r3, [r7, #4]
     616:	685b      	ldr	r3, [r3, #4]
     618:	2101      	movs	r1, #1
     61a:	0018      	movs	r0, r3
     61c:	4b20      	ldr	r3, [pc, #128]	; (6a0 <_ZN11ZCD_Handler8Get_ToneEv+0xe4>)
     61e:	4798      	blx	r3
	last_tone=tone;
     620:	687b      	ldr	r3, [r7, #4]
     622:	681a      	ldr	r2, [r3, #0]
     624:	687b      	ldr	r3, [r7, #4]
     626:	611a      	str	r2, [r3, #16]
	tone=0;
     628:	687b      	ldr	r3, [r7, #4]
     62a:	2200      	movs	r2, #0
     62c:	601a      	str	r2, [r3, #0]
	for ( int i = 0; i < 4; i++)
     62e:	2300      	movs	r3, #0
     630:	60fb      	str	r3, [r7, #12]
     632:	68fb      	ldr	r3, [r7, #12]
     634:	2b03      	cmp	r3, #3
     636:	dc14      	bgt.n	662 <_ZN11ZCD_Handler8Get_ToneEv+0xa6>
	{
		tone|=(uint32_t)(read_buffer[i]<<(8*(3-i)));
     638:	687b      	ldr	r3, [r7, #4]
     63a:	681b      	ldr	r3, [r3, #0]
     63c:	6879      	ldr	r1, [r7, #4]
     63e:	68fa      	ldr	r2, [r7, #12]
     640:	188a      	adds	r2, r1, r2
     642:	3209      	adds	r2, #9
     644:	7812      	ldrb	r2, [r2, #0]
     646:	0010      	movs	r0, r2
     648:	68fa      	ldr	r2, [r7, #12]
     64a:	2103      	movs	r1, #3
     64c:	1a8a      	subs	r2, r1, r2
     64e:	00d2      	lsls	r2, r2, #3
     650:	4090      	lsls	r0, r2
     652:	0002      	movs	r2, r0
     654:	431a      	orrs	r2, r3
     656:	687b      	ldr	r3, [r7, #4]
     658:	601a      	str	r2, [r3, #0]
	for ( int i = 0; i < 4; i++)
     65a:	68fb      	ldr	r3, [r7, #12]
     65c:	3301      	adds	r3, #1
     65e:	60fb      	str	r3, [r7, #12]
     660:	e7e7      	b.n	632 <_ZN11ZCD_Handler8Get_ToneEv+0x76>
	}
	if (tone>0)
     662:	687b      	ldr	r3, [r7, #4]
     664:	681b      	ldr	r3, [r3, #0]
     666:	2b00      	cmp	r3, #0
     668:	d00f      	beq.n	68a <_ZN11ZCD_Handler8Get_ToneEv+0xce>
	{
	
		if (tone<0xffffff)
     66a:	687b      	ldr	r3, [r7, #4]
     66c:	681b      	ldr	r3, [r3, #0]
     66e:	4a10      	ldr	r2, [pc, #64]	; (6b0 <_ZN11ZCD_Handler8Get_ToneEv+0xf4>)
     670:	4293      	cmp	r3, r2
     672:	d80e      	bhi.n	692 <_ZN11ZCD_Handler8Get_ToneEv+0xd6>
		{
			gpio_toggle_pin_level(LED0);
     674:	203e      	movs	r0, #62	; 0x3e
     676:	4b0f      	ldr	r3, [pc, #60]	; (6b4 <_ZN11ZCD_Handler8Get_ToneEv+0xf8>)
     678:	4798      	blx	r3
			printf("tone: %lu \r\n",tone);
     67a:	687b      	ldr	r3, [r7, #4]
     67c:	681a      	ldr	r2, [r3, #0]
     67e:	4b0e      	ldr	r3, [pc, #56]	; (6b8 <_ZN11ZCD_Handler8Get_ToneEv+0xfc>)
     680:	0011      	movs	r1, r2
     682:	0018      	movs	r0, r3
     684:	4b0d      	ldr	r3, [pc, #52]	; (6bc <_ZN11ZCD_Handler8Get_ToneEv+0x100>)
     686:	4798      	blx	r3
     688:	e003      	b.n	692 <_ZN11ZCD_Handler8Get_ToneEv+0xd6>
		}
		
	} 
	else
	{
		tone=last_tone;
     68a:	687b      	ldr	r3, [r7, #4]
     68c:	691a      	ldr	r2, [r3, #16]
     68e:	687b      	ldr	r3, [r7, #4]
     690:	601a      	str	r2, [r3, #0]
	}
	return tone;
     692:	687b      	ldr	r3, [r7, #4]
     694:	681b      	ldr	r3, [r3, #0]
     696:	0018      	movs	r0, r3
     698:	46bd      	mov	sp, r7
     69a:	b004      	add	sp, #16
     69c:	bd80      	pop	{r7, pc}
     69e:	46c0      	nop			; (mov r8, r8)
     6a0:	000004ad 	.word	0x000004ad
     6a4:	0000043d 	.word	0x0000043d
     6a8:	0000185d 	.word	0x0000185d
     6ac:	00000475 	.word	0x00000475
     6b0:	00fffffe 	.word	0x00fffffe
     6b4:	0000052d 	.word	0x0000052d
     6b8:	0000fbc8 	.word	0x0000fbc8
     6bc:	0000a699 	.word	0x0000a699

000006c0 <_Z41__static_initialization_and_destruction_0ii>:
     6c0:	b580      	push	{r7, lr}
     6c2:	b082      	sub	sp, #8
     6c4:	af00      	add	r7, sp, #0
     6c6:	6078      	str	r0, [r7, #4]
     6c8:	6039      	str	r1, [r7, #0]
     6ca:	687b      	ldr	r3, [r7, #4]
     6cc:	2b01      	cmp	r3, #1
     6ce:	d10d      	bne.n	6ec <_Z41__static_initialization_and_destruction_0ii+0x2c>
     6d0:	683b      	ldr	r3, [r7, #0]
     6d2:	4a08      	ldr	r2, [pc, #32]	; (6f4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     6d4:	4293      	cmp	r3, r2
     6d6:	d109      	bne.n	6ec <_Z41__static_initialization_and_destruction_0ii+0x2c>
static SPI_Syn_ZCD_Class local_spi;
     6d8:	4b07      	ldr	r3, [pc, #28]	; (6f8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     6da:	0018      	movs	r0, r3
     6dc:	4b07      	ldr	r3, [pc, #28]	; (6fc <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     6de:	4798      	blx	r3
     6e0:	4a07      	ldr	r2, [pc, #28]	; (700 <_Z41__static_initialization_and_destruction_0ii+0x40>)
     6e2:	4908      	ldr	r1, [pc, #32]	; (704 <_Z41__static_initialization_and_destruction_0ii+0x44>)
     6e4:	4b04      	ldr	r3, [pc, #16]	; (6f8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     6e6:	0018      	movs	r0, r3
     6e8:	4b07      	ldr	r3, [pc, #28]	; (708 <_Z41__static_initialization_and_destruction_0ii+0x48>)
     6ea:	4798      	blx	r3
     6ec:	46c0      	nop			; (mov r8, r8)
     6ee:	46bd      	mov	sp, r7
     6f0:	b002      	add	sp, #8
     6f2:	bd80      	pop	{r7, pc}
     6f4:	0000ffff 	.word	0x0000ffff
     6f8:	20000a68 	.word	0x20000a68
     6fc:	000003ad 	.word	0x000003ad
     700:	20000000 	.word	0x20000000
     704:	000003c9 	.word	0x000003c9
     708:	00008c81 	.word	0x00008c81

0000070c <_GLOBAL__sub_I__ZN11ZCD_HandlerC2Ev>:
     70c:	b580      	push	{r7, lr}
     70e:	af00      	add	r7, sp, #0
     710:	4b03      	ldr	r3, [pc, #12]	; (720 <_GLOBAL__sub_I__ZN11ZCD_HandlerC2Ev+0x14>)
     712:	0019      	movs	r1, r3
     714:	2001      	movs	r0, #1
     716:	4b03      	ldr	r3, [pc, #12]	; (724 <_GLOBAL__sub_I__ZN11ZCD_HandlerC2Ev+0x18>)
     718:	4798      	blx	r3
     71a:	46bd      	mov	sp, r7
     71c:	bd80      	pop	{r7, pc}
     71e:	46c0      	nop			; (mov r8, r8)
     720:	0000ffff 	.word	0x0000ffff
     724:	000006c1 	.word	0x000006c1

00000728 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     728:	b580      	push	{r7, lr}
     72a:	af00      	add	r7, sp, #0
	system_init();
     72c:	4b04      	ldr	r3, [pc, #16]	; (740 <atmel_start_init+0x18>)
     72e:	4798      	blx	r3
	usb_init();
     730:	4b04      	ldr	r3, [pc, #16]	; (744 <atmel_start_init+0x1c>)
     732:	4798      	blx	r3
	stdio_redirect_init();
     734:	4b04      	ldr	r3, [pc, #16]	; (748 <atmel_start_init+0x20>)
     736:	4798      	blx	r3
}
     738:	46c0      	nop			; (mov r8, r8)
     73a:	46bd      	mov	sp, r7
     73c:	bd80      	pop	{r7, pc}
     73e:	46c0      	nop			; (mov r8, r8)
     740:	00001505 	.word	0x00001505
     744:	000073c9 	.word	0x000073c9
     748:	00007365 	.word	0x00007365

0000074c <hri_gclk_write_CLKCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
     74c:	b580      	push	{r7, lr}
     74e:	b082      	sub	sp, #8
     750:	af00      	add	r7, sp, #0
     752:	6078      	str	r0, [r7, #4]
     754:	000a      	movs	r2, r1
     756:	1cbb      	adds	r3, r7, #2
     758:	801a      	strh	r2, [r3, #0]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     75a:	687b      	ldr	r3, [r7, #4]
     75c:	1cba      	adds	r2, r7, #2
     75e:	8812      	ldrh	r2, [r2, #0]
     760:	805a      	strh	r2, [r3, #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     762:	46c0      	nop			; (mov r8, r8)
     764:	46bd      	mov	sp, r7
     766:	b002      	add	sp, #8
     768:	bd80      	pop	{r7, pc}

0000076a <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     76a:	b580      	push	{r7, lr}
     76c:	b084      	sub	sp, #16
     76e:	af00      	add	r7, sp, #0
     770:	60f8      	str	r0, [r7, #12]
     772:	607a      	str	r2, [r7, #4]
     774:	230b      	movs	r3, #11
     776:	18fb      	adds	r3, r7, r3
     778:	1c0a      	adds	r2, r1, #0
     77a:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     77c:	230b      	movs	r3, #11
     77e:	18fb      	adds	r3, r7, r3
     780:	781b      	ldrb	r3, [r3, #0]
     782:	68fa      	ldr	r2, [r7, #12]
     784:	01db      	lsls	r3, r3, #7
     786:	18d3      	adds	r3, r2, r3
     788:	3308      	adds	r3, #8
     78a:	687a      	ldr	r2, [r7, #4]
     78c:	601a      	str	r2, [r3, #0]
}
     78e:	46c0      	nop			; (mov r8, r8)
     790:	46bd      	mov	sp, r7
     792:	b004      	add	sp, #16
     794:	bd80      	pop	{r7, pc}

00000796 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     796:	b580      	push	{r7, lr}
     798:	b084      	sub	sp, #16
     79a:	af00      	add	r7, sp, #0
     79c:	60f8      	str	r0, [r7, #12]
     79e:	607a      	str	r2, [r7, #4]
     7a0:	230b      	movs	r3, #11
     7a2:	18fb      	adds	r3, r7, r3
     7a4:	1c0a      	adds	r2, r1, #0
     7a6:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     7a8:	230b      	movs	r3, #11
     7aa:	18fb      	adds	r3, r7, r3
     7ac:	781b      	ldrb	r3, [r3, #0]
     7ae:	68fa      	ldr	r2, [r7, #12]
     7b0:	01db      	lsls	r3, r3, #7
     7b2:	18d3      	adds	r3, r2, r3
     7b4:	3304      	adds	r3, #4
     7b6:	687a      	ldr	r2, [r7, #4]
     7b8:	601a      	str	r2, [r3, #0]
}
     7ba:	46c0      	nop			; (mov r8, r8)
     7bc:	46bd      	mov	sp, r7
     7be:	b004      	add	sp, #16
     7c0:	bd80      	pop	{r7, pc}

000007c2 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     7c2:	b580      	push	{r7, lr}
     7c4:	b084      	sub	sp, #16
     7c6:	af00      	add	r7, sp, #0
     7c8:	60f8      	str	r0, [r7, #12]
     7ca:	607a      	str	r2, [r7, #4]
     7cc:	230b      	movs	r3, #11
     7ce:	18fb      	adds	r3, r7, r3
     7d0:	1c0a      	adds	r2, r1, #0
     7d2:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     7d4:	230b      	movs	r3, #11
     7d6:	18fb      	adds	r3, r7, r3
     7d8:	781b      	ldrb	r3, [r3, #0]
     7da:	68fa      	ldr	r2, [r7, #12]
     7dc:	01db      	lsls	r3, r3, #7
     7de:	18d3      	adds	r3, r2, r3
     7e0:	3318      	adds	r3, #24
     7e2:	687a      	ldr	r2, [r7, #4]
     7e4:	601a      	str	r2, [r3, #0]
}
     7e6:	46c0      	nop			; (mov r8, r8)
     7e8:	46bd      	mov	sp, r7
     7ea:	b004      	add	sp, #16
     7ec:	bd80      	pop	{r7, pc}

000007ee <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     7ee:	b580      	push	{r7, lr}
     7f0:	b084      	sub	sp, #16
     7f2:	af00      	add	r7, sp, #0
     7f4:	60f8      	str	r0, [r7, #12]
     7f6:	607a      	str	r2, [r7, #4]
     7f8:	230b      	movs	r3, #11
     7fa:	18fb      	adds	r3, r7, r3
     7fc:	1c0a      	adds	r2, r1, #0
     7fe:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     800:	230b      	movs	r3, #11
     802:	18fb      	adds	r3, r7, r3
     804:	781b      	ldrb	r3, [r3, #0]
     806:	68fa      	ldr	r2, [r7, #12]
     808:	01db      	lsls	r3, r3, #7
     80a:	18d3      	adds	r3, r2, r3
     80c:	3314      	adds	r3, #20
     80e:	687a      	ldr	r2, [r7, #4]
     810:	601a      	str	r2, [r3, #0]
}
     812:	46c0      	nop			; (mov r8, r8)
     814:	46bd      	mov	sp, r7
     816:	b004      	add	sp, #16
     818:	bd80      	pop	{r7, pc}

0000081a <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     81a:	b590      	push	{r4, r7, lr}
     81c:	b085      	sub	sp, #20
     81e:	af00      	add	r7, sp, #0
     820:	6078      	str	r0, [r7, #4]
     822:	000c      	movs	r4, r1
     824:	0010      	movs	r0, r2
     826:	0019      	movs	r1, r3
     828:	1cfb      	adds	r3, r7, #3
     82a:	1c22      	adds	r2, r4, #0
     82c:	701a      	strb	r2, [r3, #0]
     82e:	1cbb      	adds	r3, r7, #2
     830:	1c02      	adds	r2, r0, #0
     832:	701a      	strb	r2, [r3, #0]
     834:	1c7b      	adds	r3, r7, #1
     836:	1c0a      	adds	r2, r1, #0
     838:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     83a:	1cfb      	adds	r3, r7, #3
     83c:	7819      	ldrb	r1, [r3, #0]
     83e:	1cbb      	adds	r3, r7, #2
     840:	781a      	ldrb	r2, [r3, #0]
     842:	230f      	movs	r3, #15
     844:	18fb      	adds	r3, r7, r3
     846:	6878      	ldr	r0, [r7, #4]
     848:	2430      	movs	r4, #48	; 0x30
     84a:	01c9      	lsls	r1, r1, #7
     84c:	1841      	adds	r1, r0, r1
     84e:	188a      	adds	r2, r1, r2
     850:	1912      	adds	r2, r2, r4
     852:	7812      	ldrb	r2, [r2, #0]
     854:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     856:	230f      	movs	r3, #15
     858:	18fb      	adds	r3, r7, r3
     85a:	220f      	movs	r2, #15
     85c:	18ba      	adds	r2, r7, r2
     85e:	7812      	ldrb	r2, [r2, #0]
     860:	210f      	movs	r1, #15
     862:	438a      	bics	r2, r1
     864:	701a      	strb	r2, [r3, #0]
	tmp |= PORT_PMUX_PMUXE(data);
     866:	1c7b      	adds	r3, r7, #1
     868:	781b      	ldrb	r3, [r3, #0]
     86a:	220f      	movs	r2, #15
     86c:	4013      	ands	r3, r2
     86e:	b2d9      	uxtb	r1, r3
     870:	230f      	movs	r3, #15
     872:	18fb      	adds	r3, r7, r3
     874:	220f      	movs	r2, #15
     876:	18ba      	adds	r2, r7, r2
     878:	7812      	ldrb	r2, [r2, #0]
     87a:	430a      	orrs	r2, r1
     87c:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     87e:	1cfb      	adds	r3, r7, #3
     880:	781a      	ldrb	r2, [r3, #0]
     882:	1cbb      	adds	r3, r7, #2
     884:	781b      	ldrb	r3, [r3, #0]
     886:	6879      	ldr	r1, [r7, #4]
     888:	2030      	movs	r0, #48	; 0x30
     88a:	01d2      	lsls	r2, r2, #7
     88c:	188a      	adds	r2, r1, r2
     88e:	18d3      	adds	r3, r2, r3
     890:	181b      	adds	r3, r3, r0
     892:	220f      	movs	r2, #15
     894:	18ba      	adds	r2, r7, r2
     896:	7812      	ldrb	r2, [r2, #0]
     898:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     89a:	46c0      	nop			; (mov r8, r8)
     89c:	46bd      	mov	sp, r7
     89e:	b005      	add	sp, #20
     8a0:	bd90      	pop	{r4, r7, pc}

000008a2 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     8a2:	b590      	push	{r4, r7, lr}
     8a4:	b085      	sub	sp, #20
     8a6:	af00      	add	r7, sp, #0
     8a8:	6078      	str	r0, [r7, #4]
     8aa:	000c      	movs	r4, r1
     8ac:	0010      	movs	r0, r2
     8ae:	0019      	movs	r1, r3
     8b0:	1cfb      	adds	r3, r7, #3
     8b2:	1c22      	adds	r2, r4, #0
     8b4:	701a      	strb	r2, [r3, #0]
     8b6:	1cbb      	adds	r3, r7, #2
     8b8:	1c02      	adds	r2, r0, #0
     8ba:	701a      	strb	r2, [r3, #0]
     8bc:	1c7b      	adds	r3, r7, #1
     8be:	1c0a      	adds	r2, r1, #0
     8c0:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     8c2:	1cfb      	adds	r3, r7, #3
     8c4:	7819      	ldrb	r1, [r3, #0]
     8c6:	1cbb      	adds	r3, r7, #2
     8c8:	781a      	ldrb	r2, [r3, #0]
     8ca:	230f      	movs	r3, #15
     8cc:	18fb      	adds	r3, r7, r3
     8ce:	6878      	ldr	r0, [r7, #4]
     8d0:	2430      	movs	r4, #48	; 0x30
     8d2:	01c9      	lsls	r1, r1, #7
     8d4:	1841      	adds	r1, r0, r1
     8d6:	188a      	adds	r2, r1, r2
     8d8:	1912      	adds	r2, r2, r4
     8da:	7812      	ldrb	r2, [r2, #0]
     8dc:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     8de:	230f      	movs	r3, #15
     8e0:	18fb      	adds	r3, r7, r3
     8e2:	220f      	movs	r2, #15
     8e4:	18ba      	adds	r2, r7, r2
     8e6:	7812      	ldrb	r2, [r2, #0]
     8e8:	210f      	movs	r1, #15
     8ea:	400a      	ands	r2, r1
     8ec:	701a      	strb	r2, [r3, #0]
	tmp |= PORT_PMUX_PMUXO(data);
     8ee:	1c7b      	adds	r3, r7, #1
     8f0:	781b      	ldrb	r3, [r3, #0]
     8f2:	011b      	lsls	r3, r3, #4
     8f4:	b2d9      	uxtb	r1, r3
     8f6:	230f      	movs	r3, #15
     8f8:	18fb      	adds	r3, r7, r3
     8fa:	220f      	movs	r2, #15
     8fc:	18ba      	adds	r2, r7, r2
     8fe:	7812      	ldrb	r2, [r2, #0]
     900:	430a      	orrs	r2, r1
     902:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     904:	1cfb      	adds	r3, r7, #3
     906:	781a      	ldrb	r2, [r3, #0]
     908:	1cbb      	adds	r3, r7, #2
     90a:	781b      	ldrb	r3, [r3, #0]
     90c:	6879      	ldr	r1, [r7, #4]
     90e:	2030      	movs	r0, #48	; 0x30
     910:	01d2      	lsls	r2, r2, #7
     912:	188a      	adds	r2, r1, r2
     914:	18d3      	adds	r3, r2, r3
     916:	181b      	adds	r3, r3, r0
     918:	220f      	movs	r2, #15
     91a:	18ba      	adds	r2, r7, r2
     91c:	7812      	ldrb	r2, [r2, #0]
     91e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     920:	46c0      	nop			; (mov r8, r8)
     922:	46bd      	mov	sp, r7
     924:	b005      	add	sp, #20
     926:	bd90      	pop	{r4, r7, pc}

00000928 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
     928:	b590      	push	{r4, r7, lr}
     92a:	b085      	sub	sp, #20
     92c:	af00      	add	r7, sp, #0
     92e:	6078      	str	r0, [r7, #4]
     930:	000c      	movs	r4, r1
     932:	0010      	movs	r0, r2
     934:	0019      	movs	r1, r3
     936:	1cfb      	adds	r3, r7, #3
     938:	1c22      	adds	r2, r4, #0
     93a:	701a      	strb	r2, [r3, #0]
     93c:	1cbb      	adds	r3, r7, #2
     93e:	1c02      	adds	r2, r0, #0
     940:	701a      	strb	r2, [r3, #0]
     942:	1c7b      	adds	r3, r7, #1
     944:	1c0a      	adds	r2, r1, #0
     946:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     948:	1cfb      	adds	r3, r7, #3
     94a:	7819      	ldrb	r1, [r3, #0]
     94c:	1cbb      	adds	r3, r7, #2
     94e:	781a      	ldrb	r2, [r3, #0]
     950:	230f      	movs	r3, #15
     952:	18fb      	adds	r3, r7, r3
     954:	6878      	ldr	r0, [r7, #4]
     956:	2440      	movs	r4, #64	; 0x40
     958:	01c9      	lsls	r1, r1, #7
     95a:	1841      	adds	r1, r0, r1
     95c:	188a      	adds	r2, r1, r2
     95e:	1912      	adds	r2, r2, r4
     960:	7812      	ldrb	r2, [r2, #0]
     962:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     964:	230f      	movs	r3, #15
     966:	18fb      	adds	r3, r7, r3
     968:	220f      	movs	r2, #15
     96a:	18ba      	adds	r2, r7, r2
     96c:	7812      	ldrb	r2, [r2, #0]
     96e:	2101      	movs	r1, #1
     970:	438a      	bics	r2, r1
     972:	701a      	strb	r2, [r3, #0]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     974:	1c7b      	adds	r3, r7, #1
     976:	7819      	ldrb	r1, [r3, #0]
     978:	230f      	movs	r3, #15
     97a:	18fb      	adds	r3, r7, r3
     97c:	220f      	movs	r2, #15
     97e:	18ba      	adds	r2, r7, r2
     980:	7812      	ldrb	r2, [r2, #0]
     982:	430a      	orrs	r2, r1
     984:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     986:	1cfb      	adds	r3, r7, #3
     988:	781a      	ldrb	r2, [r3, #0]
     98a:	1cbb      	adds	r3, r7, #2
     98c:	781b      	ldrb	r3, [r3, #0]
     98e:	6879      	ldr	r1, [r7, #4]
     990:	2040      	movs	r0, #64	; 0x40
     992:	01d2      	lsls	r2, r2, #7
     994:	188a      	adds	r2, r1, r2
     996:	18d3      	adds	r3, r2, r3
     998:	181b      	adds	r3, r3, r0
     99a:	220f      	movs	r2, #15
     99c:	18ba      	adds	r2, r7, r2
     99e:	7812      	ldrb	r2, [r2, #0]
     9a0:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     9a2:	46c0      	nop			; (mov r8, r8)
     9a4:	46bd      	mov	sp, r7
     9a6:	b005      	add	sp, #20
     9a8:	bd90      	pop	{r4, r7, pc}

000009aa <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     9aa:	b5b0      	push	{r4, r5, r7, lr}
     9ac:	b082      	sub	sp, #8
     9ae:	af00      	add	r7, sp, #0
     9b0:	6078      	str	r0, [r7, #4]
     9b2:	0008      	movs	r0, r1
     9b4:	0011      	movs	r1, r2
     9b6:	1cfb      	adds	r3, r7, #3
     9b8:	1c02      	adds	r2, r0, #0
     9ba:	701a      	strb	r2, [r3, #0]
     9bc:	1cbb      	adds	r3, r7, #2
     9be:	1c0a      	adds	r2, r1, #0
     9c0:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     9c2:	1cfb      	adds	r3, r7, #3
     9c4:	781a      	ldrb	r2, [r3, #0]
     9c6:	1cbb      	adds	r3, r7, #2
     9c8:	781b      	ldrb	r3, [r3, #0]
     9ca:	1cf9      	adds	r1, r7, #3
     9cc:	7808      	ldrb	r0, [r1, #0]
     9ce:	1cb9      	adds	r1, r7, #2
     9d0:	7809      	ldrb	r1, [r1, #0]
     9d2:	687c      	ldr	r4, [r7, #4]
     9d4:	2540      	movs	r5, #64	; 0x40
     9d6:	01c0      	lsls	r0, r0, #7
     9d8:	1820      	adds	r0, r4, r0
     9da:	1841      	adds	r1, r0, r1
     9dc:	1949      	adds	r1, r1, r5
     9de:	7809      	ldrb	r1, [r1, #0]
     9e0:	b2c9      	uxtb	r1, r1
     9e2:	2004      	movs	r0, #4
     9e4:	4301      	orrs	r1, r0
     9e6:	b2cc      	uxtb	r4, r1
     9e8:	6879      	ldr	r1, [r7, #4]
     9ea:	2040      	movs	r0, #64	; 0x40
     9ec:	01d2      	lsls	r2, r2, #7
     9ee:	188a      	adds	r2, r1, r2
     9f0:	18d3      	adds	r3, r2, r3
     9f2:	181b      	adds	r3, r3, r0
     9f4:	1c22      	adds	r2, r4, #0
     9f6:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     9f8:	46c0      	nop			; (mov r8, r8)
     9fa:	46bd      	mov	sp, r7
     9fc:	b002      	add	sp, #8
     9fe:	bdb0      	pop	{r4, r5, r7, pc}

00000a00 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     a00:	b5b0      	push	{r4, r5, r7, lr}
     a02:	b082      	sub	sp, #8
     a04:	af00      	add	r7, sp, #0
     a06:	6078      	str	r0, [r7, #4]
     a08:	0008      	movs	r0, r1
     a0a:	0011      	movs	r1, r2
     a0c:	1cfb      	adds	r3, r7, #3
     a0e:	1c02      	adds	r2, r0, #0
     a10:	701a      	strb	r2, [r3, #0]
     a12:	1cbb      	adds	r3, r7, #2
     a14:	1c0a      	adds	r2, r1, #0
     a16:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     a18:	1cfb      	adds	r3, r7, #3
     a1a:	781a      	ldrb	r2, [r3, #0]
     a1c:	1cbb      	adds	r3, r7, #2
     a1e:	781b      	ldrb	r3, [r3, #0]
     a20:	1cf9      	adds	r1, r7, #3
     a22:	7808      	ldrb	r0, [r1, #0]
     a24:	1cb9      	adds	r1, r7, #2
     a26:	7809      	ldrb	r1, [r1, #0]
     a28:	687c      	ldr	r4, [r7, #4]
     a2a:	2540      	movs	r5, #64	; 0x40
     a2c:	01c0      	lsls	r0, r0, #7
     a2e:	1820      	adds	r0, r4, r0
     a30:	1841      	adds	r1, r0, r1
     a32:	1949      	adds	r1, r1, r5
     a34:	7809      	ldrb	r1, [r1, #0]
     a36:	b2c9      	uxtb	r1, r1
     a38:	2004      	movs	r0, #4
     a3a:	4381      	bics	r1, r0
     a3c:	b2cc      	uxtb	r4, r1
     a3e:	6879      	ldr	r1, [r7, #4]
     a40:	2040      	movs	r0, #64	; 0x40
     a42:	01d2      	lsls	r2, r2, #7
     a44:	188a      	adds	r2, r1, r2
     a46:	18d3      	adds	r3, r2, r3
     a48:	181b      	adds	r3, r3, r0
     a4a:	1c22      	adds	r2, r4, #0
     a4c:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     a4e:	46c0      	nop			; (mov r8, r8)
     a50:	46bd      	mov	sp, r7
     a52:	b002      	add	sp, #8
     a54:	bdb0      	pop	{r4, r5, r7, pc}

00000a56 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
     a56:	b580      	push	{r7, lr}
     a58:	b084      	sub	sp, #16
     a5a:	af00      	add	r7, sp, #0
     a5c:	60f8      	str	r0, [r7, #12]
     a5e:	607a      	str	r2, [r7, #4]
     a60:	230b      	movs	r3, #11
     a62:	18fb      	adds	r3, r7, r3
     a64:	1c0a      	adds	r2, r1, #0
     a66:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a68:	230b      	movs	r3, #11
     a6a:	18fb      	adds	r3, r7, r3
     a6c:	781b      	ldrb	r3, [r3, #0]
     a6e:	68fa      	ldr	r2, [r7, #12]
     a70:	01db      	lsls	r3, r3, #7
     a72:	18d3      	adds	r3, r2, r3
     a74:	3328      	adds	r3, #40	; 0x28
     a76:	687a      	ldr	r2, [r7, #4]
     a78:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     a7a:	46c0      	nop			; (mov r8, r8)
     a7c:	46bd      	mov	sp, r7
     a7e:	b004      	add	sp, #16
     a80:	bd80      	pop	{r7, pc}
	...

00000a84 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
     a84:	b580      	push	{r7, lr}
     a86:	b082      	sub	sp, #8
     a88:	af00      	add	r7, sp, #0
     a8a:	6039      	str	r1, [r7, #0]
     a8c:	0011      	movs	r1, r2
     a8e:	1dfb      	adds	r3, r7, #7
     a90:	1c02      	adds	r2, r0, #0
     a92:	701a      	strb	r2, [r3, #0]
     a94:	1dbb      	adds	r3, r7, #6
     a96:	1c0a      	adds	r2, r1, #0
     a98:	701a      	strb	r2, [r3, #0]
	switch (direction) {
     a9a:	1dbb      	adds	r3, r7, #6
     a9c:	781b      	ldrb	r3, [r3, #0]
     a9e:	2b01      	cmp	r3, #1
     aa0:	d023      	beq.n	aea <_gpio_set_direction+0x66>
     aa2:	2b02      	cmp	r3, #2
     aa4:	d03f      	beq.n	b26 <_gpio_set_direction+0xa2>
     aa6:	2b00      	cmp	r3, #0
     aa8:	d15d      	bne.n	b66 <_gpio_set_direction+0xe2>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, mask);
     aaa:	683a      	ldr	r2, [r7, #0]
     aac:	1dfb      	adds	r3, r7, #7
     aae:	7819      	ldrb	r1, [r3, #0]
     ab0:	23c0      	movs	r3, #192	; 0xc0
     ab2:	05db      	lsls	r3, r3, #23
     ab4:	0018      	movs	r0, r3
     ab6:	4b31      	ldr	r3, [pc, #196]	; (b7c <_gpio_set_direction+0xf8>)
     ab8:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     aba:	683b      	ldr	r3, [r7, #0]
     abc:	041b      	lsls	r3, r3, #16
     abe:	0c1b      	lsrs	r3, r3, #16
     ac0:	2280      	movs	r2, #128	; 0x80
     ac2:	05d2      	lsls	r2, r2, #23
     ac4:	431a      	orrs	r2, r3
     ac6:	1dfb      	adds	r3, r7, #7
     ac8:	781b      	ldrb	r3, [r3, #0]
     aca:	482d      	ldr	r0, [pc, #180]	; (b80 <_gpio_set_direction+0xfc>)
     acc:	0019      	movs	r1, r3
     ace:	4b2d      	ldr	r3, [pc, #180]	; (b84 <_gpio_set_direction+0x100>)
     ad0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     ad2:	683b      	ldr	r3, [r7, #0]
     ad4:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     ad6:	22c0      	movs	r2, #192	; 0xc0
     ad8:	0612      	lsls	r2, r2, #24
     ada:	431a      	orrs	r2, r3
     adc:	1dfb      	adds	r3, r7, #7
     ade:	781b      	ldrb	r3, [r3, #0]
     ae0:	4827      	ldr	r0, [pc, #156]	; (b80 <_gpio_set_direction+0xfc>)
     ae2:	0019      	movs	r1, r3
     ae4:	4b27      	ldr	r3, [pc, #156]	; (b84 <_gpio_set_direction+0x100>)
     ae6:	4798      	blx	r3
		break;
     ae8:	e043      	b.n	b72 <_gpio_set_direction+0xee>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, mask);
     aea:	683a      	ldr	r2, [r7, #0]
     aec:	1dfb      	adds	r3, r7, #7
     aee:	7819      	ldrb	r1, [r3, #0]
     af0:	23c0      	movs	r3, #192	; 0xc0
     af2:	05db      	lsls	r3, r3, #23
     af4:	0018      	movs	r0, r3
     af6:	4b21      	ldr	r3, [pc, #132]	; (b7c <_gpio_set_direction+0xf8>)
     af8:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
     afa:	683b      	ldr	r3, [r7, #0]
     afc:	041b      	lsls	r3, r3, #16
     afe:	0c1b      	lsrs	r3, r3, #16
     b00:	4a21      	ldr	r2, [pc, #132]	; (b88 <_gpio_set_direction+0x104>)
     b02:	431a      	orrs	r2, r3
     b04:	1dfb      	adds	r3, r7, #7
     b06:	781b      	ldrb	r3, [r3, #0]
     b08:	481d      	ldr	r0, [pc, #116]	; (b80 <_gpio_set_direction+0xfc>)
     b0a:	0019      	movs	r1, r3
     b0c:	4b1d      	ldr	r3, [pc, #116]	; (b84 <_gpio_set_direction+0x100>)
     b0e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
     b10:	683b      	ldr	r3, [r7, #0]
     b12:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
     b14:	4a1d      	ldr	r2, [pc, #116]	; (b8c <_gpio_set_direction+0x108>)
     b16:	431a      	orrs	r2, r3
     b18:	1dfb      	adds	r3, r7, #7
     b1a:	781b      	ldrb	r3, [r3, #0]
     b1c:	4818      	ldr	r0, [pc, #96]	; (b80 <_gpio_set_direction+0xfc>)
     b1e:	0019      	movs	r1, r3
     b20:	4b18      	ldr	r3, [pc, #96]	; (b84 <_gpio_set_direction+0x100>)
     b22:	4798      	blx	r3
		break;
     b24:	e025      	b.n	b72 <_gpio_set_direction+0xee>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT_IOBUS, port, mask);
     b26:	683a      	ldr	r2, [r7, #0]
     b28:	1dfb      	adds	r3, r7, #7
     b2a:	7819      	ldrb	r1, [r3, #0]
     b2c:	23c0      	movs	r3, #192	; 0xc0
     b2e:	05db      	lsls	r3, r3, #23
     b30:	0018      	movs	r0, r3
     b32:	4b17      	ldr	r3, [pc, #92]	; (b90 <_gpio_set_direction+0x10c>)
     b34:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     b36:	683b      	ldr	r3, [r7, #0]
     b38:	041b      	lsls	r3, r3, #16
     b3a:	0c1b      	lsrs	r3, r3, #16
     b3c:	2280      	movs	r2, #128	; 0x80
     b3e:	05d2      	lsls	r2, r2, #23
     b40:	431a      	orrs	r2, r3
     b42:	1dfb      	adds	r3, r7, #7
     b44:	781b      	ldrb	r3, [r3, #0]
     b46:	480e      	ldr	r0, [pc, #56]	; (b80 <_gpio_set_direction+0xfc>)
     b48:	0019      	movs	r1, r3
     b4a:	4b0e      	ldr	r3, [pc, #56]	; (b84 <_gpio_set_direction+0x100>)
     b4c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     b4e:	683b      	ldr	r3, [r7, #0]
     b50:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     b52:	22c0      	movs	r2, #192	; 0xc0
     b54:	0612      	lsls	r2, r2, #24
     b56:	431a      	orrs	r2, r3
     b58:	1dfb      	adds	r3, r7, #7
     b5a:	781b      	ldrb	r3, [r3, #0]
     b5c:	4808      	ldr	r0, [pc, #32]	; (b80 <_gpio_set_direction+0xfc>)
     b5e:	0019      	movs	r1, r3
     b60:	4b08      	ldr	r3, [pc, #32]	; (b84 <_gpio_set_direction+0x100>)
     b62:	4798      	blx	r3
		break;
     b64:	e005      	b.n	b72 <_gpio_set_direction+0xee>

	default:
		ASSERT(false);
     b66:	4b0b      	ldr	r3, [pc, #44]	; (b94 <_gpio_set_direction+0x110>)
     b68:	2245      	movs	r2, #69	; 0x45
     b6a:	0019      	movs	r1, r3
     b6c:	2000      	movs	r0, #0
     b6e:	4b0a      	ldr	r3, [pc, #40]	; (b98 <_gpio_set_direction+0x114>)
     b70:	4798      	blx	r3
	}
}
     b72:	46c0      	nop			; (mov r8, r8)
     b74:	46bd      	mov	sp, r7
     b76:	b002      	add	sp, #8
     b78:	bd80      	pop	{r7, pc}
     b7a:	46c0      	nop			; (mov r8, r8)
     b7c:	00000797 	.word	0x00000797
     b80:	41004400 	.word	0x41004400
     b84:	00000a57 	.word	0x00000a57
     b88:	40020000 	.word	0x40020000
     b8c:	c0020000 	.word	0xc0020000
     b90:	0000076b 	.word	0x0000076b
     b94:	0000fbd8 	.word	0x0000fbd8
     b98:	00002841 	.word	0x00002841

00000b9c <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
     b9c:	b580      	push	{r7, lr}
     b9e:	b082      	sub	sp, #8
     ba0:	af00      	add	r7, sp, #0
     ba2:	6039      	str	r1, [r7, #0]
     ba4:	0011      	movs	r1, r2
     ba6:	1dfb      	adds	r3, r7, #7
     ba8:	1c02      	adds	r2, r0, #0
     baa:	701a      	strb	r2, [r3, #0]
     bac:	1dbb      	adds	r3, r7, #6
     bae:	1c0a      	adds	r2, r1, #0
     bb0:	701a      	strb	r2, [r3, #0]
	if (level) {
     bb2:	1dbb      	adds	r3, r7, #6
     bb4:	781b      	ldrb	r3, [r3, #0]
     bb6:	2b00      	cmp	r3, #0
     bb8:	d008      	beq.n	bcc <_gpio_set_level+0x30>
		hri_port_set_OUT_reg(PORT_IOBUS, port, mask);
     bba:	683a      	ldr	r2, [r7, #0]
     bbc:	1dfb      	adds	r3, r7, #7
     bbe:	7819      	ldrb	r1, [r3, #0]
     bc0:	23c0      	movs	r3, #192	; 0xc0
     bc2:	05db      	lsls	r3, r3, #23
     bc4:	0018      	movs	r0, r3
     bc6:	4b07      	ldr	r3, [pc, #28]	; (be4 <_gpio_set_level+0x48>)
     bc8:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
	}
}
     bca:	e007      	b.n	bdc <_gpio_set_level+0x40>
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
     bcc:	683a      	ldr	r2, [r7, #0]
     bce:	1dfb      	adds	r3, r7, #7
     bd0:	7819      	ldrb	r1, [r3, #0]
     bd2:	23c0      	movs	r3, #192	; 0xc0
     bd4:	05db      	lsls	r3, r3, #23
     bd6:	0018      	movs	r0, r3
     bd8:	4b03      	ldr	r3, [pc, #12]	; (be8 <_gpio_set_level+0x4c>)
     bda:	4798      	blx	r3
}
     bdc:	46c0      	nop			; (mov r8, r8)
     bde:	46bd      	mov	sp, r7
     be0:	b002      	add	sp, #8
     be2:	bd80      	pop	{r7, pc}
     be4:	000007c3 	.word	0x000007c3
     be8:	000007ef 	.word	0x000007ef

00000bec <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
     bec:	b590      	push	{r4, r7, lr}
     bee:	b083      	sub	sp, #12
     bf0:	af00      	add	r7, sp, #0
     bf2:	0004      	movs	r4, r0
     bf4:	0008      	movs	r0, r1
     bf6:	0011      	movs	r1, r2
     bf8:	1dfb      	adds	r3, r7, #7
     bfa:	1c22      	adds	r2, r4, #0
     bfc:	701a      	strb	r2, [r3, #0]
     bfe:	1dbb      	adds	r3, r7, #6
     c00:	1c02      	adds	r2, r0, #0
     c02:	701a      	strb	r2, [r3, #0]
     c04:	1d7b      	adds	r3, r7, #5
     c06:	1c0a      	adds	r2, r1, #0
     c08:	701a      	strb	r2, [r3, #0]
	switch (pull_mode) {
     c0a:	1d7b      	adds	r3, r7, #5
     c0c:	781b      	ldrb	r3, [r3, #0]
     c0e:	2b01      	cmp	r3, #1
     c10:	d00c      	beq.n	c2c <_gpio_set_pin_pull_mode+0x40>
     c12:	2b02      	cmp	r3, #2
     c14:	d029      	beq.n	c6a <_gpio_set_pin_pull_mode+0x7e>
     c16:	2b00      	cmp	r3, #0
     c18:	d146      	bne.n	ca8 <_gpio_set_pin_pull_mode+0xbc>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
     c1a:	1dbb      	adds	r3, r7, #6
     c1c:	781a      	ldrb	r2, [r3, #0]
     c1e:	1dfb      	adds	r3, r7, #7
     c20:	781b      	ldrb	r3, [r3, #0]
     c22:	4827      	ldr	r0, [pc, #156]	; (cc0 <_gpio_set_pin_pull_mode+0xd4>)
     c24:	0019      	movs	r1, r3
     c26:	4b27      	ldr	r3, [pc, #156]	; (cc4 <_gpio_set_pin_pull_mode+0xd8>)
     c28:	4798      	blx	r3
		break;
     c2a:	e044      	b.n	cb6 <_gpio_set_pin_pull_mode+0xca>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, 1U << pin);
     c2c:	1dbb      	adds	r3, r7, #6
     c2e:	781b      	ldrb	r3, [r3, #0]
     c30:	2201      	movs	r2, #1
     c32:	409a      	lsls	r2, r3
     c34:	1dfb      	adds	r3, r7, #7
     c36:	7819      	ldrb	r1, [r3, #0]
     c38:	23c0      	movs	r3, #192	; 0xc0
     c3a:	05db      	lsls	r3, r3, #23
     c3c:	0018      	movs	r0, r3
     c3e:	4b22      	ldr	r3, [pc, #136]	; (cc8 <_gpio_set_pin_pull_mode+0xdc>)
     c40:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     c42:	1dbb      	adds	r3, r7, #6
     c44:	781a      	ldrb	r2, [r3, #0]
     c46:	1dfb      	adds	r3, r7, #7
     c48:	781b      	ldrb	r3, [r3, #0]
     c4a:	481d      	ldr	r0, [pc, #116]	; (cc0 <_gpio_set_pin_pull_mode+0xd4>)
     c4c:	0019      	movs	r1, r3
     c4e:	4b1f      	ldr	r3, [pc, #124]	; (ccc <_gpio_set_pin_pull_mode+0xe0>)
     c50:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT_IOBUS, port, 1U << pin);
     c52:	1dbb      	adds	r3, r7, #6
     c54:	781b      	ldrb	r3, [r3, #0]
     c56:	2201      	movs	r2, #1
     c58:	409a      	lsls	r2, r3
     c5a:	1dfb      	adds	r3, r7, #7
     c5c:	7819      	ldrb	r1, [r3, #0]
     c5e:	23c0      	movs	r3, #192	; 0xc0
     c60:	05db      	lsls	r3, r3, #23
     c62:	0018      	movs	r0, r3
     c64:	4b1a      	ldr	r3, [pc, #104]	; (cd0 <_gpio_set_pin_pull_mode+0xe4>)
     c66:	4798      	blx	r3
		break;
     c68:	e025      	b.n	cb6 <_gpio_set_pin_pull_mode+0xca>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, 1U << pin);
     c6a:	1dbb      	adds	r3, r7, #6
     c6c:	781b      	ldrb	r3, [r3, #0]
     c6e:	2201      	movs	r2, #1
     c70:	409a      	lsls	r2, r3
     c72:	1dfb      	adds	r3, r7, #7
     c74:	7819      	ldrb	r1, [r3, #0]
     c76:	23c0      	movs	r3, #192	; 0xc0
     c78:	05db      	lsls	r3, r3, #23
     c7a:	0018      	movs	r0, r3
     c7c:	4b12      	ldr	r3, [pc, #72]	; (cc8 <_gpio_set_pin_pull_mode+0xdc>)
     c7e:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     c80:	1dbb      	adds	r3, r7, #6
     c82:	781a      	ldrb	r2, [r3, #0]
     c84:	1dfb      	adds	r3, r7, #7
     c86:	781b      	ldrb	r3, [r3, #0]
     c88:	480d      	ldr	r0, [pc, #52]	; (cc0 <_gpio_set_pin_pull_mode+0xd4>)
     c8a:	0019      	movs	r1, r3
     c8c:	4b0f      	ldr	r3, [pc, #60]	; (ccc <_gpio_set_pin_pull_mode+0xe0>)
     c8e:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT_IOBUS, port, 1U << pin);
     c90:	1dbb      	adds	r3, r7, #6
     c92:	781b      	ldrb	r3, [r3, #0]
     c94:	2201      	movs	r2, #1
     c96:	409a      	lsls	r2, r3
     c98:	1dfb      	adds	r3, r7, #7
     c9a:	7819      	ldrb	r1, [r3, #0]
     c9c:	23c0      	movs	r3, #192	; 0xc0
     c9e:	05db      	lsls	r3, r3, #23
     ca0:	0018      	movs	r0, r3
     ca2:	4b0c      	ldr	r3, [pc, #48]	; (cd4 <_gpio_set_pin_pull_mode+0xe8>)
     ca4:	4798      	blx	r3
		break;
     ca6:	e006      	b.n	cb6 <_gpio_set_pin_pull_mode+0xca>

	default:
		ASSERT(false);
     ca8:	4b0b      	ldr	r3, [pc, #44]	; (cd8 <_gpio_set_pin_pull_mode+0xec>)
     caa:	2288      	movs	r2, #136	; 0x88
     cac:	0019      	movs	r1, r3
     cae:	2000      	movs	r0, #0
     cb0:	4b0a      	ldr	r3, [pc, #40]	; (cdc <_gpio_set_pin_pull_mode+0xf0>)
     cb2:	4798      	blx	r3
		break;
     cb4:	46c0      	nop			; (mov r8, r8)
	}
}
     cb6:	46c0      	nop			; (mov r8, r8)
     cb8:	46bd      	mov	sp, r7
     cba:	b003      	add	sp, #12
     cbc:	bd90      	pop	{r4, r7, pc}
     cbe:	46c0      	nop			; (mov r8, r8)
     cc0:	41004400 	.word	0x41004400
     cc4:	00000a01 	.word	0x00000a01
     cc8:	00000797 	.word	0x00000797
     ccc:	000009ab 	.word	0x000009ab
     cd0:	000007c3 	.word	0x000007c3
     cd4:	000007ef 	.word	0x000007ef
     cd8:	0000fbd8 	.word	0x0000fbd8
     cdc:	00002841 	.word	0x00002841

00000ce0 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
     ce0:	b590      	push	{r4, r7, lr}
     ce2:	b085      	sub	sp, #20
     ce4:	af00      	add	r7, sp, #0
     ce6:	6078      	str	r0, [r7, #4]
     ce8:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
     cea:	687b      	ldr	r3, [r7, #4]
     cec:	095a      	lsrs	r2, r3, #5
     cee:	230f      	movs	r3, #15
     cf0:	18fb      	adds	r3, r7, r3
     cf2:	701a      	strb	r2, [r3, #0]
	uint8_t pin  = GPIO_PIN(gpio);
     cf4:	687b      	ldr	r3, [r7, #4]
     cf6:	b2da      	uxtb	r2, r3
     cf8:	230e      	movs	r3, #14
     cfa:	18fb      	adds	r3, r7, r3
     cfc:	211f      	movs	r1, #31
     cfe:	400a      	ands	r2, r1
     d00:	701a      	strb	r2, [r3, #0]

	if (function == GPIO_PIN_FUNCTION_OFF) {
     d02:	683b      	ldr	r3, [r7, #0]
     d04:	3301      	adds	r3, #1
     d06:	d10a      	bne.n	d1e <_gpio_set_pin_function+0x3e>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
     d08:	230e      	movs	r3, #14
     d0a:	18fb      	adds	r3, r7, r3
     d0c:	781a      	ldrb	r2, [r3, #0]
     d0e:	230f      	movs	r3, #15
     d10:	18fb      	adds	r3, r7, r3
     d12:	7819      	ldrb	r1, [r3, #0]
     d14:	481b      	ldr	r0, [pc, #108]	; (d84 <_gpio_set_pin_function+0xa4>)
     d16:	2300      	movs	r3, #0
     d18:	4c1b      	ldr	r4, [pc, #108]	; (d88 <_gpio_set_pin_function+0xa8>)
     d1a:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
     d1c:	e02e      	b.n	d7c <_gpio_set_pin_function+0x9c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
     d1e:	230e      	movs	r3, #14
     d20:	18fb      	adds	r3, r7, r3
     d22:	781a      	ldrb	r2, [r3, #0]
     d24:	230f      	movs	r3, #15
     d26:	18fb      	adds	r3, r7, r3
     d28:	7819      	ldrb	r1, [r3, #0]
     d2a:	4816      	ldr	r0, [pc, #88]	; (d84 <_gpio_set_pin_function+0xa4>)
     d2c:	2301      	movs	r3, #1
     d2e:	4c16      	ldr	r4, [pc, #88]	; (d88 <_gpio_set_pin_function+0xa8>)
     d30:	47a0      	blx	r4
		if (pin & 1) {
     d32:	230e      	movs	r3, #14
     d34:	18fb      	adds	r3, r7, r3
     d36:	781b      	ldrb	r3, [r3, #0]
     d38:	2201      	movs	r2, #1
     d3a:	4013      	ands	r3, r2
     d3c:	d00f      	beq.n	d5e <_gpio_set_pin_function+0x7e>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
     d3e:	230e      	movs	r3, #14
     d40:	18fb      	adds	r3, r7, r3
     d42:	781b      	ldrb	r3, [r3, #0]
     d44:	085b      	lsrs	r3, r3, #1
     d46:	b2da      	uxtb	r2, r3
     d48:	683b      	ldr	r3, [r7, #0]
     d4a:	b2d8      	uxtb	r0, r3
     d4c:	230f      	movs	r3, #15
     d4e:	18fb      	adds	r3, r7, r3
     d50:	7819      	ldrb	r1, [r3, #0]
     d52:	4c0c      	ldr	r4, [pc, #48]	; (d84 <_gpio_set_pin_function+0xa4>)
     d54:	0003      	movs	r3, r0
     d56:	0020      	movs	r0, r4
     d58:	4c0c      	ldr	r4, [pc, #48]	; (d8c <_gpio_set_pin_function+0xac>)
     d5a:	47a0      	blx	r4
}
     d5c:	e00e      	b.n	d7c <_gpio_set_pin_function+0x9c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
     d5e:	230e      	movs	r3, #14
     d60:	18fb      	adds	r3, r7, r3
     d62:	781b      	ldrb	r3, [r3, #0]
     d64:	085b      	lsrs	r3, r3, #1
     d66:	b2da      	uxtb	r2, r3
     d68:	683b      	ldr	r3, [r7, #0]
     d6a:	b2d8      	uxtb	r0, r3
     d6c:	230f      	movs	r3, #15
     d6e:	18fb      	adds	r3, r7, r3
     d70:	7819      	ldrb	r1, [r3, #0]
     d72:	4c04      	ldr	r4, [pc, #16]	; (d84 <_gpio_set_pin_function+0xa4>)
     d74:	0003      	movs	r3, r0
     d76:	0020      	movs	r0, r4
     d78:	4c05      	ldr	r4, [pc, #20]	; (d90 <_gpio_set_pin_function+0xb0>)
     d7a:	47a0      	blx	r4
}
     d7c:	46c0      	nop			; (mov r8, r8)
     d7e:	46bd      	mov	sp, r7
     d80:	b005      	add	sp, #20
     d82:	bd90      	pop	{r4, r7, pc}
     d84:	41004400 	.word	0x41004400
     d88:	00000929 	.word	0x00000929
     d8c:	000008a3 	.word	0x000008a3
     d90:	0000081b 	.word	0x0000081b

00000d94 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
     d94:	b580      	push	{r7, lr}
     d96:	b082      	sub	sp, #8
     d98:	af00      	add	r7, sp, #0
     d9a:	0002      	movs	r2, r0
     d9c:	1dfb      	adds	r3, r7, #7
     d9e:	701a      	strb	r2, [r3, #0]
     da0:	1dbb      	adds	r3, r7, #6
     da2:	1c0a      	adds	r2, r1, #0
     da4:	701a      	strb	r2, [r3, #0]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
     da6:	1dfb      	adds	r3, r7, #7
     da8:	781b      	ldrb	r3, [r3, #0]
     daa:	095b      	lsrs	r3, r3, #5
     dac:	b2d8      	uxtb	r0, r3
     dae:	1dfb      	adds	r3, r7, #7
     db0:	781b      	ldrb	r3, [r3, #0]
     db2:	221f      	movs	r2, #31
     db4:	4013      	ands	r3, r2
     db6:	b2d9      	uxtb	r1, r3
     db8:	1dbb      	adds	r3, r7, #6
     dba:	781b      	ldrb	r3, [r3, #0]
     dbc:	001a      	movs	r2, r3
     dbe:	4b03      	ldr	r3, [pc, #12]	; (dcc <gpio_set_pin_pull_mode+0x38>)
     dc0:	4798      	blx	r3
}
     dc2:	46c0      	nop			; (mov r8, r8)
     dc4:	46bd      	mov	sp, r7
     dc6:	b002      	add	sp, #8
     dc8:	bd80      	pop	{r7, pc}
     dca:	46c0      	nop			; (mov r8, r8)
     dcc:	00000bed 	.word	0x00000bed

00000dd0 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
     dd0:	b580      	push	{r7, lr}
     dd2:	b082      	sub	sp, #8
     dd4:	af00      	add	r7, sp, #0
     dd6:	6078      	str	r0, [r7, #4]
     dd8:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
     dda:	683a      	ldr	r2, [r7, #0]
     ddc:	687b      	ldr	r3, [r7, #4]
     dde:	0011      	movs	r1, r2
     de0:	0018      	movs	r0, r3
     de2:	4b03      	ldr	r3, [pc, #12]	; (df0 <gpio_set_pin_function+0x20>)
     de4:	4798      	blx	r3
}
     de6:	46c0      	nop			; (mov r8, r8)
     de8:	46bd      	mov	sp, r7
     dea:	b002      	add	sp, #8
     dec:	bd80      	pop	{r7, pc}
     dee:	46c0      	nop			; (mov r8, r8)
     df0:	00000ce1 	.word	0x00000ce1

00000df4 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
     df4:	b580      	push	{r7, lr}
     df6:	b082      	sub	sp, #8
     df8:	af00      	add	r7, sp, #0
     dfa:	0002      	movs	r2, r0
     dfc:	1dfb      	adds	r3, r7, #7
     dfe:	701a      	strb	r2, [r3, #0]
     e00:	1dbb      	adds	r3, r7, #6
     e02:	1c0a      	adds	r2, r1, #0
     e04:	701a      	strb	r2, [r3, #0]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
     e06:	1dfb      	adds	r3, r7, #7
     e08:	781b      	ldrb	r3, [r3, #0]
     e0a:	095b      	lsrs	r3, r3, #5
     e0c:	b2d8      	uxtb	r0, r3
     e0e:	1dfb      	adds	r3, r7, #7
     e10:	781b      	ldrb	r3, [r3, #0]
     e12:	221f      	movs	r2, #31
     e14:	4013      	ands	r3, r2
     e16:	2201      	movs	r2, #1
     e18:	409a      	lsls	r2, r3
     e1a:	0011      	movs	r1, r2
     e1c:	1dbb      	adds	r3, r7, #6
     e1e:	781b      	ldrb	r3, [r3, #0]
     e20:	001a      	movs	r2, r3
     e22:	4b03      	ldr	r3, [pc, #12]	; (e30 <gpio_set_pin_direction+0x3c>)
     e24:	4798      	blx	r3
}
     e26:	46c0      	nop			; (mov r8, r8)
     e28:	46bd      	mov	sp, r7
     e2a:	b002      	add	sp, #8
     e2c:	bd80      	pop	{r7, pc}
     e2e:	46c0      	nop			; (mov r8, r8)
     e30:	00000a85 	.word	0x00000a85

00000e34 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
     e34:	b580      	push	{r7, lr}
     e36:	b082      	sub	sp, #8
     e38:	af00      	add	r7, sp, #0
     e3a:	0002      	movs	r2, r0
     e3c:	1dfb      	adds	r3, r7, #7
     e3e:	701a      	strb	r2, [r3, #0]
     e40:	1dbb      	adds	r3, r7, #6
     e42:	1c0a      	adds	r2, r1, #0
     e44:	701a      	strb	r2, [r3, #0]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     e46:	1dfb      	adds	r3, r7, #7
     e48:	781b      	ldrb	r3, [r3, #0]
     e4a:	095b      	lsrs	r3, r3, #5
     e4c:	b2d8      	uxtb	r0, r3
     e4e:	1dfb      	adds	r3, r7, #7
     e50:	781b      	ldrb	r3, [r3, #0]
     e52:	221f      	movs	r2, #31
     e54:	4013      	ands	r3, r2
     e56:	2201      	movs	r2, #1
     e58:	409a      	lsls	r2, r3
     e5a:	0011      	movs	r1, r2
     e5c:	1dbb      	adds	r3, r7, #6
     e5e:	781b      	ldrb	r3, [r3, #0]
     e60:	001a      	movs	r2, r3
     e62:	4b03      	ldr	r3, [pc, #12]	; (e70 <gpio_set_pin_level+0x3c>)
     e64:	4798      	blx	r3
}
     e66:	46c0      	nop			; (mov r8, r8)
     e68:	46bd      	mov	sp, r7
     e6a:	b002      	add	sp, #8
     e6c:	bd80      	pop	{r7, pc}
     e6e:	46c0      	nop			; (mov r8, r8)
     e70:	00000b9d 	.word	0x00000b9d

00000e74 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
     e74:	b580      	push	{r7, lr}
     e76:	af00      	add	r7, sp, #0
	_init_chip();
     e78:	4b02      	ldr	r3, [pc, #8]	; (e84 <init_mcu+0x10>)
     e7a:	4798      	blx	r3
}
     e7c:	46c0      	nop			; (mov r8, r8)
     e7e:	46bd      	mov	sp, r7
     e80:	bd80      	pop	{r7, pc}
     e82:	46c0      	nop			; (mov r8, r8)
     e84:	00002aad 	.word	0x00002aad

00000e88 <_gclk_enable_channel>:
 *
 * \param[in] channel The channel to enable clock for
 * \param[in] source The clock source for the given channel
 */
static inline void _gclk_enable_channel(const uint8_t channel, const uint8_t source)
{
     e88:	b580      	push	{r7, lr}
     e8a:	b082      	sub	sp, #8
     e8c:	af00      	add	r7, sp, #0
     e8e:	0002      	movs	r2, r0
     e90:	1dfb      	adds	r3, r7, #7
     e92:	701a      	strb	r2, [r3, #0]
     e94:	1dbb      	adds	r3, r7, #6
     e96:	1c0a      	adds	r2, r1, #0
     e98:	701a      	strb	r2, [r3, #0]

	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(channel) | GCLK_CLKCTRL_GEN(source) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
     e9a:	1dfb      	adds	r3, r7, #7
     e9c:	781b      	ldrb	r3, [r3, #0]
     e9e:	b29b      	uxth	r3, r3
     ea0:	223f      	movs	r2, #63	; 0x3f
     ea2:	4013      	ands	r3, r2
     ea4:	b29a      	uxth	r2, r3
     ea6:	1dbb      	adds	r3, r7, #6
     ea8:	781b      	ldrb	r3, [r3, #0]
     eaa:	b29b      	uxth	r3, r3
     eac:	021b      	lsls	r3, r3, #8
     eae:	b299      	uxth	r1, r3
     eb0:	23f0      	movs	r3, #240	; 0xf0
     eb2:	011b      	lsls	r3, r3, #4
     eb4:	400b      	ands	r3, r1
     eb6:	b29b      	uxth	r3, r3
     eb8:	4313      	orrs	r3, r2
     eba:	b29b      	uxth	r3, r3
	hri_gclk_write_CLKCTRL_reg(GCLK,
     ebc:	2280      	movs	r2, #128	; 0x80
     ebe:	01d2      	lsls	r2, r2, #7
     ec0:	4313      	orrs	r3, r2
     ec2:	b29b      	uxth	r3, r3
     ec4:	4a04      	ldr	r2, [pc, #16]	; (ed8 <_gclk_enable_channel+0x50>)
     ec6:	0019      	movs	r1, r3
     ec8:	0010      	movs	r0, r2
     eca:	4b04      	ldr	r3, [pc, #16]	; (edc <_gclk_enable_channel+0x54>)
     ecc:	4798      	blx	r3
}
     ece:	46c0      	nop			; (mov r8, r8)
     ed0:	46bd      	mov	sp, r7
     ed2:	b002      	add	sp, #8
     ed4:	bd80      	pop	{r7, pc}
     ed6:	46c0      	nop			; (mov r8, r8)
     ed8:	40000c00 	.word	0x40000c00
     edc:	0000074d 	.word	0x0000074d

00000ee0 <_pm_get_ahb_index>:
 * \param[in] module Module to get index for
 *
 * \return index of the given module if succeeds, ERR_INVALID_ARG otherwise
 */
static inline int32_t _pm_get_ahb_index(const void *const module)
{
     ee0:	b580      	push	{r7, lr}
     ee2:	b082      	sub	sp, #8
     ee4:	af00      	add	r7, sp, #0
     ee6:	6078      	str	r0, [r7, #4]
	if ((uint32_t)module == (uint32_t)PM_BUS_APBA) {
     ee8:	687b      	ldr	r3, [r7, #4]
     eea:	2b01      	cmp	r3, #1
     eec:	d101      	bne.n	ef2 <_pm_get_ahb_index+0x12>
		return 0;
     eee:	2300      	movs	r3, #0
     ef0:	e023      	b.n	f3a <_pm_get_ahb_index+0x5a>
	} else if ((uint32_t)module == (uint32_t)PM_BUS_APBB) {
     ef2:	687b      	ldr	r3, [r7, #4]
     ef4:	2b02      	cmp	r3, #2
     ef6:	d101      	bne.n	efc <_pm_get_ahb_index+0x1c>
		return 1;
     ef8:	2301      	movs	r3, #1
     efa:	e01e      	b.n	f3a <_pm_get_ahb_index+0x5a>
	} else if ((uint32_t)module == (uint32_t)PM_BUS_APBC) {
     efc:	687b      	ldr	r3, [r7, #4]
     efe:	2b03      	cmp	r3, #3
     f00:	d101      	bne.n	f06 <_pm_get_ahb_index+0x26>
		return 2;
     f02:	2302      	movs	r3, #2
     f04:	e019      	b.n	f3a <_pm_get_ahb_index+0x5a>
	}
	if ((uint32_t)module == (uint32_t)DSU) {
     f06:	687b      	ldr	r3, [r7, #4]
     f08:	4a0e      	ldr	r2, [pc, #56]	; (f44 <_pm_get_ahb_index+0x64>)
     f0a:	4293      	cmp	r3, r2
     f0c:	d101      	bne.n	f12 <_pm_get_ahb_index+0x32>
		return 3;
     f0e:	2303      	movs	r3, #3
     f10:	e013      	b.n	f3a <_pm_get_ahb_index+0x5a>
	} else if ((uint32_t)module == (uint32_t)NVMCTRL) {
     f12:	687b      	ldr	r3, [r7, #4]
     f14:	4a0c      	ldr	r2, [pc, #48]	; (f48 <_pm_get_ahb_index+0x68>)
     f16:	4293      	cmp	r3, r2
     f18:	d101      	bne.n	f1e <_pm_get_ahb_index+0x3e>
		return 4;
     f1a:	2304      	movs	r3, #4
     f1c:	e00d      	b.n	f3a <_pm_get_ahb_index+0x5a>
	} else if ((uint32_t)module == (uint32_t)DMAC) {
     f1e:	687b      	ldr	r3, [r7, #4]
     f20:	4a0a      	ldr	r2, [pc, #40]	; (f4c <_pm_get_ahb_index+0x6c>)
     f22:	4293      	cmp	r3, r2
     f24:	d101      	bne.n	f2a <_pm_get_ahb_index+0x4a>
		return 5;
     f26:	2305      	movs	r3, #5
     f28:	e007      	b.n	f3a <_pm_get_ahb_index+0x5a>
	}
#ifdef USB
	else if ((uint32_t)module == (uint32_t)USB) {
     f2a:	687b      	ldr	r3, [r7, #4]
     f2c:	4a08      	ldr	r2, [pc, #32]	; (f50 <_pm_get_ahb_index+0x70>)
     f2e:	4293      	cmp	r3, r2
     f30:	d101      	bne.n	f36 <_pm_get_ahb_index+0x56>
		return 6;
     f32:	2306      	movs	r3, #6
     f34:	e001      	b.n	f3a <_pm_get_ahb_index+0x5a>
	}
#endif

	return ERR_INVALID_ARG;
     f36:	230d      	movs	r3, #13
     f38:	425b      	negs	r3, r3
}
     f3a:	0018      	movs	r0, r3
     f3c:	46bd      	mov	sp, r7
     f3e:	b002      	add	sp, #8
     f40:	bd80      	pop	{r7, pc}
     f42:	46c0      	nop			; (mov r8, r8)
     f44:	41002000 	.word	0x41002000
     f48:	41004000 	.word	0x41004000
     f4c:	41004800 	.word	0x41004800
     f50:	41005000 	.word	0x41005000

00000f54 <_pm_get_apbb_index>:
 * \param[in] module Module to get index for
 *
 * \return index of the given module if succeeds, ERR_INVALID_ARG otherwise
 */
static inline int32_t _pm_get_apbb_index(const void *const module)
{
     f54:	b580      	push	{r7, lr}
     f56:	b082      	sub	sp, #8
     f58:	af00      	add	r7, sp, #0
     f5a:	6078      	str	r0, [r7, #4]
	if ((uint32_t)module == (uint32_t)PAC1) {
     f5c:	687a      	ldr	r2, [r7, #4]
     f5e:	2382      	movs	r3, #130	; 0x82
     f60:	05db      	lsls	r3, r3, #23
     f62:	429a      	cmp	r2, r3
     f64:	d101      	bne.n	f6a <_pm_get_apbb_index+0x16>
		return 0;
     f66:	2300      	movs	r3, #0
     f68:	e01f      	b.n	faa <_pm_get_apbb_index+0x56>
	} else if ((uint32_t)module == (uint32_t)DSU) {
     f6a:	687b      	ldr	r3, [r7, #4]
     f6c:	4a11      	ldr	r2, [pc, #68]	; (fb4 <_pm_get_apbb_index+0x60>)
     f6e:	4293      	cmp	r3, r2
     f70:	d101      	bne.n	f76 <_pm_get_apbb_index+0x22>
		return 1;
     f72:	2301      	movs	r3, #1
     f74:	e019      	b.n	faa <_pm_get_apbb_index+0x56>
	} else if ((uint32_t)module == (uint32_t)NVMCTRL) {
     f76:	687b      	ldr	r3, [r7, #4]
     f78:	4a0f      	ldr	r2, [pc, #60]	; (fb8 <_pm_get_apbb_index+0x64>)
     f7a:	4293      	cmp	r3, r2
     f7c:	d101      	bne.n	f82 <_pm_get_apbb_index+0x2e>
		return 2;
     f7e:	2302      	movs	r3, #2
     f80:	e013      	b.n	faa <_pm_get_apbb_index+0x56>
	}
	if ((uint32_t)module == (uint32_t)PORT) {
     f82:	687b      	ldr	r3, [r7, #4]
     f84:	4a0d      	ldr	r2, [pc, #52]	; (fbc <_pm_get_apbb_index+0x68>)
     f86:	4293      	cmp	r3, r2
     f88:	d101      	bne.n	f8e <_pm_get_apbb_index+0x3a>
		return 3;
     f8a:	2303      	movs	r3, #3
     f8c:	e00d      	b.n	faa <_pm_get_apbb_index+0x56>
	} else if ((uint32_t)module == (uint32_t)DMAC) {
     f8e:	687b      	ldr	r3, [r7, #4]
     f90:	4a0b      	ldr	r2, [pc, #44]	; (fc0 <_pm_get_apbb_index+0x6c>)
     f92:	4293      	cmp	r3, r2
     f94:	d101      	bne.n	f9a <_pm_get_apbb_index+0x46>
		return 4;
     f96:	2304      	movs	r3, #4
     f98:	e007      	b.n	faa <_pm_get_apbb_index+0x56>
	}
#ifdef USB
	else if ((uint32_t)module == (uint32_t)USB) {
     f9a:	687b      	ldr	r3, [r7, #4]
     f9c:	4a09      	ldr	r2, [pc, #36]	; (fc4 <_pm_get_apbb_index+0x70>)
     f9e:	4293      	cmp	r3, r2
     fa0:	d101      	bne.n	fa6 <_pm_get_apbb_index+0x52>
		return 5;
     fa2:	2305      	movs	r3, #5
     fa4:	e001      	b.n	faa <_pm_get_apbb_index+0x56>
	}
#endif

	return ERR_INVALID_ARG;
     fa6:	230d      	movs	r3, #13
     fa8:	425b      	negs	r3, r3
}
     faa:	0018      	movs	r0, r3
     fac:	46bd      	mov	sp, r7
     fae:	b002      	add	sp, #8
     fb0:	bd80      	pop	{r7, pc}
     fb2:	46c0      	nop			; (mov r8, r8)
     fb4:	41002000 	.word	0x41002000
     fb8:	41004000 	.word	0x41004000
     fbc:	41004400 	.word	0x41004400
     fc0:	41004800 	.word	0x41004800
     fc4:	41005000 	.word	0x41005000

00000fc8 <_pm_enable_bus_clock>:
 *
 * \param[in] bus A bus to enable clock on
 * \param[in] module A hardware module to enable clock for
 */
static inline void _pm_enable_bus_clock(const enum _pm_bus bus, const void *const module)
{
     fc8:	b580      	push	{r7, lr}
     fca:	b084      	sub	sp, #16
     fcc:	af00      	add	r7, sp, #0
     fce:	0002      	movs	r2, r0
     fd0:	6039      	str	r1, [r7, #0]
     fd2:	1dfb      	adds	r3, r7, #7
     fd4:	701a      	strb	r2, [r3, #0]
	uint32_t peripheral = ((uint32_t)module & 0x0000ff00) >> 10;
     fd6:	683b      	ldr	r3, [r7, #0]
     fd8:	0a9b      	lsrs	r3, r3, #10
     fda:	223f      	movs	r2, #63	; 0x3f
     fdc:	4013      	ands	r3, r2
     fde:	60fb      	str	r3, [r7, #12]

	switch (bus) {
     fe0:	1dfb      	adds	r3, r7, #7
     fe2:	781b      	ldrb	r3, [r3, #0]
     fe4:	2b01      	cmp	r3, #1
     fe6:	d01e      	beq.n	1026 <_pm_enable_bus_clock+0x5e>
     fe8:	dc02      	bgt.n	ff0 <_pm_enable_bus_clock+0x28>
     fea:	2b00      	cmp	r3, #0
     fec:	d005      	beq.n	ffa <_pm_enable_bus_clock+0x32>
     fee:	e044      	b.n	107a <_pm_enable_bus_clock+0xb2>
     ff0:	2b02      	cmp	r3, #2
     ff2:	d022      	beq.n	103a <_pm_enable_bus_clock+0x72>
     ff4:	2b03      	cmp	r3, #3
     ff6:	d036      	beq.n	1066 <_pm_enable_bus_clock+0x9e>
     ff8:	e03f      	b.n	107a <_pm_enable_bus_clock+0xb2>
	case PM_BUS_AHB:
		if (_pm_get_ahb_index(module) >= 0) {
     ffa:	683b      	ldr	r3, [r7, #0]
     ffc:	0018      	movs	r0, r3
     ffe:	4b26      	ldr	r3, [pc, #152]	; (1098 <_pm_enable_bus_clock+0xd0>)
    1000:	4798      	blx	r3
    1002:	1e03      	subs	r3, r0, #0
    1004:	db40      	blt.n	1088 <_pm_enable_bus_clock+0xc0>
			peripheral = (uint32_t)_pm_get_ahb_index(module);
    1006:	683b      	ldr	r3, [r7, #0]
    1008:	0018      	movs	r0, r3
    100a:	4b23      	ldr	r3, [pc, #140]	; (1098 <_pm_enable_bus_clock+0xd0>)
    100c:	4798      	blx	r3
    100e:	0003      	movs	r3, r0
    1010:	60fb      	str	r3, [r7, #12]
			PM->AHBMASK.reg |= 1 << peripheral;
    1012:	4b22      	ldr	r3, [pc, #136]	; (109c <_pm_enable_bus_clock+0xd4>)
    1014:	4a21      	ldr	r2, [pc, #132]	; (109c <_pm_enable_bus_clock+0xd4>)
    1016:	6952      	ldr	r2, [r2, #20]
    1018:	2001      	movs	r0, #1
    101a:	68f9      	ldr	r1, [r7, #12]
    101c:	4088      	lsls	r0, r1
    101e:	0001      	movs	r1, r0
    1020:	430a      	orrs	r2, r1
    1022:	615a      	str	r2, [r3, #20]
		}
		break;
    1024:	e030      	b.n	1088 <_pm_enable_bus_clock+0xc0>
	case PM_BUS_APBA:
		PM->APBAMASK.reg |= 1 << peripheral;
    1026:	4b1d      	ldr	r3, [pc, #116]	; (109c <_pm_enable_bus_clock+0xd4>)
    1028:	4a1c      	ldr	r2, [pc, #112]	; (109c <_pm_enable_bus_clock+0xd4>)
    102a:	6992      	ldr	r2, [r2, #24]
    102c:	2001      	movs	r0, #1
    102e:	68f9      	ldr	r1, [r7, #12]
    1030:	4088      	lsls	r0, r1
    1032:	0001      	movs	r1, r0
    1034:	430a      	orrs	r2, r1
    1036:	619a      	str	r2, [r3, #24]
		break;
    1038:	e029      	b.n	108e <_pm_enable_bus_clock+0xc6>
	case PM_BUS_APBB:
		if (_pm_get_apbb_index(module) >= 0) {
    103a:	683b      	ldr	r3, [r7, #0]
    103c:	0018      	movs	r0, r3
    103e:	4b18      	ldr	r3, [pc, #96]	; (10a0 <_pm_enable_bus_clock+0xd8>)
    1040:	4798      	blx	r3
    1042:	1e03      	subs	r3, r0, #0
    1044:	db22      	blt.n	108c <_pm_enable_bus_clock+0xc4>
			peripheral = (uint32_t)_pm_get_apbb_index(module);
    1046:	683b      	ldr	r3, [r7, #0]
    1048:	0018      	movs	r0, r3
    104a:	4b15      	ldr	r3, [pc, #84]	; (10a0 <_pm_enable_bus_clock+0xd8>)
    104c:	4798      	blx	r3
    104e:	0003      	movs	r3, r0
    1050:	60fb      	str	r3, [r7, #12]
			PM->APBBMASK.reg |= 1 << peripheral;
    1052:	4b12      	ldr	r3, [pc, #72]	; (109c <_pm_enable_bus_clock+0xd4>)
    1054:	4a11      	ldr	r2, [pc, #68]	; (109c <_pm_enable_bus_clock+0xd4>)
    1056:	69d2      	ldr	r2, [r2, #28]
    1058:	2001      	movs	r0, #1
    105a:	68f9      	ldr	r1, [r7, #12]
    105c:	4088      	lsls	r0, r1
    105e:	0001      	movs	r1, r0
    1060:	430a      	orrs	r2, r1
    1062:	61da      	str	r2, [r3, #28]
		}
		break;
    1064:	e012      	b.n	108c <_pm_enable_bus_clock+0xc4>
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
    1066:	4b0d      	ldr	r3, [pc, #52]	; (109c <_pm_enable_bus_clock+0xd4>)
    1068:	4a0c      	ldr	r2, [pc, #48]	; (109c <_pm_enable_bus_clock+0xd4>)
    106a:	6a12      	ldr	r2, [r2, #32]
    106c:	2001      	movs	r0, #1
    106e:	68f9      	ldr	r1, [r7, #12]
    1070:	4088      	lsls	r0, r1
    1072:	0001      	movs	r1, r0
    1074:	430a      	orrs	r2, r1
    1076:	621a      	str	r2, [r3, #32]
		break;
    1078:	e009      	b.n	108e <_pm_enable_bus_clock+0xc6>
	default:
		ASSERT(false);
    107a:	4b0a      	ldr	r3, [pc, #40]	; (10a4 <_pm_enable_bus_clock+0xdc>)
    107c:	229b      	movs	r2, #155	; 0x9b
    107e:	0019      	movs	r1, r3
    1080:	2000      	movs	r0, #0
    1082:	4b09      	ldr	r3, [pc, #36]	; (10a8 <_pm_enable_bus_clock+0xe0>)
    1084:	4798      	blx	r3
		break;
    1086:	e002      	b.n	108e <_pm_enable_bus_clock+0xc6>
		break;
    1088:	46c0      	nop			; (mov r8, r8)
    108a:	e000      	b.n	108e <_pm_enable_bus_clock+0xc6>
		break;
    108c:	46c0      	nop			; (mov r8, r8)
	}
}
    108e:	46c0      	nop			; (mov r8, r8)
    1090:	46bd      	mov	sp, r7
    1092:	b004      	add	sp, #16
    1094:	bd80      	pop	{r7, pc}
    1096:	46c0      	nop			; (mov r8, r8)
    1098:	00000ee1 	.word	0x00000ee1
    109c:	40000400 	.word	0x40000400
    10a0:	00000f55 	.word	0x00000f55
    10a4:	0000fbf4 	.word	0x0000fbf4
    10a8:	00002841 	.word	0x00002841

000010ac <SPI_ADF_PORT_init>:
struct usart_sync_descriptor TARGET_IO;

struct dac_sync_descriptor DAC_0;

void SPI_ADF_PORT_init(void)
{
    10ac:	b580      	push	{r7, lr}
    10ae:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PA04,
    10b0:	2100      	movs	r1, #0
    10b2:	2004      	movs	r0, #4
    10b4:	4b13      	ldr	r3, [pc, #76]	; (1104 <SPI_ADF_PORT_init+0x58>)
    10b6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PA04, GPIO_DIRECTION_OUT);
    10b8:	2102      	movs	r1, #2
    10ba:	2004      	movs	r0, #4
    10bc:	4b12      	ldr	r3, [pc, #72]	; (1108 <SPI_ADF_PORT_init+0x5c>)
    10be:	4798      	blx	r3

	gpio_set_pin_function(PA04, PINMUX_PA04D_SERCOM0_PAD0);
    10c0:	4b12      	ldr	r3, [pc, #72]	; (110c <SPI_ADF_PORT_init+0x60>)
    10c2:	0019      	movs	r1, r3
    10c4:	2004      	movs	r0, #4
    10c6:	4b12      	ldr	r3, [pc, #72]	; (1110 <SPI_ADF_PORT_init+0x64>)
    10c8:	4798      	blx	r3

	gpio_set_pin_level(PA05,
    10ca:	2100      	movs	r1, #0
    10cc:	2005      	movs	r0, #5
    10ce:	4b0d      	ldr	r3, [pc, #52]	; (1104 <SPI_ADF_PORT_init+0x58>)
    10d0:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PA05, GPIO_DIRECTION_OUT);
    10d2:	2102      	movs	r1, #2
    10d4:	2005      	movs	r0, #5
    10d6:	4b0c      	ldr	r3, [pc, #48]	; (1108 <SPI_ADF_PORT_init+0x5c>)
    10d8:	4798      	blx	r3

	gpio_set_pin_function(PA05, PINMUX_PA05D_SERCOM0_PAD1);
    10da:	4b0e      	ldr	r3, [pc, #56]	; (1114 <SPI_ADF_PORT_init+0x68>)
    10dc:	0019      	movs	r1, r3
    10de:	2005      	movs	r0, #5
    10e0:	4b0b      	ldr	r3, [pc, #44]	; (1110 <SPI_ADF_PORT_init+0x64>)
    10e2:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA06, GPIO_DIRECTION_IN);
    10e4:	2101      	movs	r1, #1
    10e6:	2006      	movs	r0, #6
    10e8:	4b07      	ldr	r3, [pc, #28]	; (1108 <SPI_ADF_PORT_init+0x5c>)
    10ea:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA06,
    10ec:	2100      	movs	r1, #0
    10ee:	2006      	movs	r0, #6
    10f0:	4b09      	ldr	r3, [pc, #36]	; (1118 <SPI_ADF_PORT_init+0x6c>)
    10f2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA06, PINMUX_PA06D_SERCOM0_PAD2);
    10f4:	4b09      	ldr	r3, [pc, #36]	; (111c <SPI_ADF_PORT_init+0x70>)
    10f6:	0019      	movs	r1, r3
    10f8:	2006      	movs	r0, #6
    10fa:	4b05      	ldr	r3, [pc, #20]	; (1110 <SPI_ADF_PORT_init+0x64>)
    10fc:	4798      	blx	r3
}
    10fe:	46c0      	nop			; (mov r8, r8)
    1100:	46bd      	mov	sp, r7
    1102:	bd80      	pop	{r7, pc}
    1104:	00000e35 	.word	0x00000e35
    1108:	00000df5 	.word	0x00000df5
    110c:	00040003 	.word	0x00040003
    1110:	00000dd1 	.word	0x00000dd1
    1114:	00050003 	.word	0x00050003
    1118:	00000d95 	.word	0x00000d95
    111c:	00060003 	.word	0x00060003

00001120 <SPI_ADF_CLOCK_init>:

void SPI_ADF_CLOCK_init(void)
{
    1120:	b580      	push	{r7, lr}
    1122:	af00      	add	r7, sp, #0
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM0);
    1124:	4b05      	ldr	r3, [pc, #20]	; (113c <SPI_ADF_CLOCK_init+0x1c>)
    1126:	0019      	movs	r1, r3
    1128:	2003      	movs	r0, #3
    112a:	4b05      	ldr	r3, [pc, #20]	; (1140 <SPI_ADF_CLOCK_init+0x20>)
    112c:	4798      	blx	r3
	_gclk_enable_channel(SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC);
    112e:	2100      	movs	r1, #0
    1130:	2014      	movs	r0, #20
    1132:	4b04      	ldr	r3, [pc, #16]	; (1144 <SPI_ADF_CLOCK_init+0x24>)
    1134:	4798      	blx	r3
}
    1136:	46c0      	nop			; (mov r8, r8)
    1138:	46bd      	mov	sp, r7
    113a:	bd80      	pop	{r7, pc}
    113c:	42000800 	.word	0x42000800
    1140:	00000fc9 	.word	0x00000fc9
    1144:	00000e89 	.word	0x00000e89

00001148 <SPI_ADF_init>:

void SPI_ADF_init(void)
{
    1148:	b580      	push	{r7, lr}
    114a:	af00      	add	r7, sp, #0
	SPI_ADF_CLOCK_init();
    114c:	4b06      	ldr	r3, [pc, #24]	; (1168 <SPI_ADF_init+0x20>)
    114e:	4798      	blx	r3
	spi_m_sync_init(&SPI_ADF, SERCOM0);
    1150:	4a06      	ldr	r2, [pc, #24]	; (116c <SPI_ADF_init+0x24>)
    1152:	4b07      	ldr	r3, [pc, #28]	; (1170 <SPI_ADF_init+0x28>)
    1154:	0011      	movs	r1, r2
    1156:	0018      	movs	r0, r3
    1158:	4b06      	ldr	r3, [pc, #24]	; (1174 <SPI_ADF_init+0x2c>)
    115a:	4798      	blx	r3
	SPI_ADF_PORT_init();
    115c:	4b06      	ldr	r3, [pc, #24]	; (1178 <SPI_ADF_init+0x30>)
    115e:	4798      	blx	r3
}
    1160:	46c0      	nop			; (mov r8, r8)
    1162:	46bd      	mov	sp, r7
    1164:	bd80      	pop	{r7, pc}
    1166:	46c0      	nop			; (mov r8, r8)
    1168:	00001121 	.word	0x00001121
    116c:	42000800 	.word	0x42000800
    1170:	20001114 	.word	0x20001114
    1174:	0000193d 	.word	0x0000193d
    1178:	000010ad 	.word	0x000010ad

0000117c <SPI_LMX_PORT_init>:

void SPI_LMX_PORT_init(void)
{
    117c:	b580      	push	{r7, lr}
    117e:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PA16,
    1180:	2100      	movs	r1, #0
    1182:	2010      	movs	r0, #16
    1184:	4b13      	ldr	r3, [pc, #76]	; (11d4 <SPI_LMX_PORT_init+0x58>)
    1186:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PA16, GPIO_DIRECTION_OUT);
    1188:	2102      	movs	r1, #2
    118a:	2010      	movs	r0, #16
    118c:	4b12      	ldr	r3, [pc, #72]	; (11d8 <SPI_LMX_PORT_init+0x5c>)
    118e:	4798      	blx	r3

	gpio_set_pin_function(PA16, PINMUX_PA16C_SERCOM1_PAD0);
    1190:	4b12      	ldr	r3, [pc, #72]	; (11dc <SPI_LMX_PORT_init+0x60>)
    1192:	0019      	movs	r1, r3
    1194:	2010      	movs	r0, #16
    1196:	4b12      	ldr	r3, [pc, #72]	; (11e0 <SPI_LMX_PORT_init+0x64>)
    1198:	4798      	blx	r3

	gpio_set_pin_level(PA17,
    119a:	2100      	movs	r1, #0
    119c:	2011      	movs	r0, #17
    119e:	4b0d      	ldr	r3, [pc, #52]	; (11d4 <SPI_LMX_PORT_init+0x58>)
    11a0:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PA17, GPIO_DIRECTION_OUT);
    11a2:	2102      	movs	r1, #2
    11a4:	2011      	movs	r0, #17
    11a6:	4b0c      	ldr	r3, [pc, #48]	; (11d8 <SPI_LMX_PORT_init+0x5c>)
    11a8:	4798      	blx	r3

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
    11aa:	4b0e      	ldr	r3, [pc, #56]	; (11e4 <SPI_LMX_PORT_init+0x68>)
    11ac:	0019      	movs	r1, r3
    11ae:	2011      	movs	r0, #17
    11b0:	4b0b      	ldr	r3, [pc, #44]	; (11e0 <SPI_LMX_PORT_init+0x64>)
    11b2:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA18, GPIO_DIRECTION_IN);
    11b4:	2101      	movs	r1, #1
    11b6:	2012      	movs	r0, #18
    11b8:	4b07      	ldr	r3, [pc, #28]	; (11d8 <SPI_LMX_PORT_init+0x5c>)
    11ba:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA18,
    11bc:	2100      	movs	r1, #0
    11be:	2012      	movs	r0, #18
    11c0:	4b09      	ldr	r3, [pc, #36]	; (11e8 <SPI_LMX_PORT_init+0x6c>)
    11c2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA18, PINMUX_PA18C_SERCOM1_PAD2);
    11c4:	4b09      	ldr	r3, [pc, #36]	; (11ec <SPI_LMX_PORT_init+0x70>)
    11c6:	0019      	movs	r1, r3
    11c8:	2012      	movs	r0, #18
    11ca:	4b05      	ldr	r3, [pc, #20]	; (11e0 <SPI_LMX_PORT_init+0x64>)
    11cc:	4798      	blx	r3
}
    11ce:	46c0      	nop			; (mov r8, r8)
    11d0:	46bd      	mov	sp, r7
    11d2:	bd80      	pop	{r7, pc}
    11d4:	00000e35 	.word	0x00000e35
    11d8:	00000df5 	.word	0x00000df5
    11dc:	00100002 	.word	0x00100002
    11e0:	00000dd1 	.word	0x00000dd1
    11e4:	00110002 	.word	0x00110002
    11e8:	00000d95 	.word	0x00000d95
    11ec:	00120002 	.word	0x00120002

000011f0 <SPI_LMX_CLOCK_init>:

void SPI_LMX_CLOCK_init(void)
{
    11f0:	b580      	push	{r7, lr}
    11f2:	af00      	add	r7, sp, #0
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM1);
    11f4:	4b05      	ldr	r3, [pc, #20]	; (120c <SPI_LMX_CLOCK_init+0x1c>)
    11f6:	0019      	movs	r1, r3
    11f8:	2003      	movs	r0, #3
    11fa:	4b05      	ldr	r3, [pc, #20]	; (1210 <SPI_LMX_CLOCK_init+0x20>)
    11fc:	4798      	blx	r3
	_gclk_enable_channel(SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC);
    11fe:	2100      	movs	r1, #0
    1200:	2015      	movs	r0, #21
    1202:	4b04      	ldr	r3, [pc, #16]	; (1214 <SPI_LMX_CLOCK_init+0x24>)
    1204:	4798      	blx	r3
}
    1206:	46c0      	nop			; (mov r8, r8)
    1208:	46bd      	mov	sp, r7
    120a:	bd80      	pop	{r7, pc}
    120c:	42000c00 	.word	0x42000c00
    1210:	00000fc9 	.word	0x00000fc9
    1214:	00000e89 	.word	0x00000e89

00001218 <SPI_LMX_init>:

void SPI_LMX_init(void)
{
    1218:	b580      	push	{r7, lr}
    121a:	af00      	add	r7, sp, #0
	SPI_LMX_CLOCK_init();
    121c:	4b06      	ldr	r3, [pc, #24]	; (1238 <SPI_LMX_init+0x20>)
    121e:	4798      	blx	r3
	spi_m_sync_init(&SPI_LMX, SERCOM1);
    1220:	4a06      	ldr	r2, [pc, #24]	; (123c <SPI_LMX_init+0x24>)
    1222:	4b07      	ldr	r3, [pc, #28]	; (1240 <SPI_LMX_init+0x28>)
    1224:	0011      	movs	r1, r2
    1226:	0018      	movs	r0, r3
    1228:	4b06      	ldr	r3, [pc, #24]	; (1244 <SPI_LMX_init+0x2c>)
    122a:	4798      	blx	r3
	SPI_LMX_PORT_init();
    122c:	4b06      	ldr	r3, [pc, #24]	; (1248 <SPI_LMX_init+0x30>)
    122e:	4798      	blx	r3
}
    1230:	46c0      	nop			; (mov r8, r8)
    1232:	46bd      	mov	sp, r7
    1234:	bd80      	pop	{r7, pc}
    1236:	46c0      	nop			; (mov r8, r8)
    1238:	000011f1 	.word	0x000011f1
    123c:	42000c00 	.word	0x42000c00
    1240:	200010e4 	.word	0x200010e4
    1244:	0000193d 	.word	0x0000193d
    1248:	0000117d 	.word	0x0000117d

0000124c <SPI_ZCD_PORT_init>:

void SPI_ZCD_PORT_init(void)
{
    124c:	b580      	push	{r7, lr}
    124e:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PA12,
    1250:	2100      	movs	r1, #0
    1252:	200c      	movs	r0, #12
    1254:	4b13      	ldr	r3, [pc, #76]	; (12a4 <SPI_ZCD_PORT_init+0x58>)
    1256:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PA12, GPIO_DIRECTION_OUT);
    1258:	2102      	movs	r1, #2
    125a:	200c      	movs	r0, #12
    125c:	4b12      	ldr	r3, [pc, #72]	; (12a8 <SPI_ZCD_PORT_init+0x5c>)
    125e:	4798      	blx	r3

	gpio_set_pin_function(PA12, PINMUX_PA12C_SERCOM2_PAD0);
    1260:	4b12      	ldr	r3, [pc, #72]	; (12ac <SPI_ZCD_PORT_init+0x60>)
    1262:	0019      	movs	r1, r3
    1264:	200c      	movs	r0, #12
    1266:	4b12      	ldr	r3, [pc, #72]	; (12b0 <SPI_ZCD_PORT_init+0x64>)
    1268:	4798      	blx	r3

	gpio_set_pin_level(PA09,
    126a:	2100      	movs	r1, #0
    126c:	2009      	movs	r0, #9
    126e:	4b0d      	ldr	r3, [pc, #52]	; (12a4 <SPI_ZCD_PORT_init+0x58>)
    1270:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PA09, GPIO_DIRECTION_OUT);
    1272:	2102      	movs	r1, #2
    1274:	2009      	movs	r0, #9
    1276:	4b0c      	ldr	r3, [pc, #48]	; (12a8 <SPI_ZCD_PORT_init+0x5c>)
    1278:	4798      	blx	r3

	gpio_set_pin_function(PA09, PINMUX_PA09D_SERCOM2_PAD1);
    127a:	4b0e      	ldr	r3, [pc, #56]	; (12b4 <SPI_ZCD_PORT_init+0x68>)
    127c:	0019      	movs	r1, r3
    127e:	2009      	movs	r0, #9
    1280:	4b0b      	ldr	r3, [pc, #44]	; (12b0 <SPI_ZCD_PORT_init+0x64>)
    1282:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA15, GPIO_DIRECTION_IN);
    1284:	2101      	movs	r1, #1
    1286:	200f      	movs	r0, #15
    1288:	4b07      	ldr	r3, [pc, #28]	; (12a8 <SPI_ZCD_PORT_init+0x5c>)
    128a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA15,
    128c:	2100      	movs	r1, #0
    128e:	200f      	movs	r0, #15
    1290:	4b09      	ldr	r3, [pc, #36]	; (12b8 <SPI_ZCD_PORT_init+0x6c>)
    1292:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA15, PINMUX_PA15C_SERCOM2_PAD3);
    1294:	4b09      	ldr	r3, [pc, #36]	; (12bc <SPI_ZCD_PORT_init+0x70>)
    1296:	0019      	movs	r1, r3
    1298:	200f      	movs	r0, #15
    129a:	4b05      	ldr	r3, [pc, #20]	; (12b0 <SPI_ZCD_PORT_init+0x64>)
    129c:	4798      	blx	r3
}
    129e:	46c0      	nop			; (mov r8, r8)
    12a0:	46bd      	mov	sp, r7
    12a2:	bd80      	pop	{r7, pc}
    12a4:	00000e35 	.word	0x00000e35
    12a8:	00000df5 	.word	0x00000df5
    12ac:	000c0002 	.word	0x000c0002
    12b0:	00000dd1 	.word	0x00000dd1
    12b4:	00090003 	.word	0x00090003
    12b8:	00000d95 	.word	0x00000d95
    12bc:	000f0002 	.word	0x000f0002

000012c0 <SPI_ZCD_CLOCK_init>:

void SPI_ZCD_CLOCK_init(void)
{
    12c0:	b580      	push	{r7, lr}
    12c2:	af00      	add	r7, sp, #0
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM2);
    12c4:	4b05      	ldr	r3, [pc, #20]	; (12dc <SPI_ZCD_CLOCK_init+0x1c>)
    12c6:	0019      	movs	r1, r3
    12c8:	2003      	movs	r0, #3
    12ca:	4b05      	ldr	r3, [pc, #20]	; (12e0 <SPI_ZCD_CLOCK_init+0x20>)
    12cc:	4798      	blx	r3
	_gclk_enable_channel(SERCOM2_GCLK_ID_CORE, CONF_GCLK_SERCOM2_CORE_SRC);
    12ce:	2100      	movs	r1, #0
    12d0:	2016      	movs	r0, #22
    12d2:	4b04      	ldr	r3, [pc, #16]	; (12e4 <SPI_ZCD_CLOCK_init+0x24>)
    12d4:	4798      	blx	r3
}
    12d6:	46c0      	nop			; (mov r8, r8)
    12d8:	46bd      	mov	sp, r7
    12da:	bd80      	pop	{r7, pc}
    12dc:	42001000 	.word	0x42001000
    12e0:	00000fc9 	.word	0x00000fc9
    12e4:	00000e89 	.word	0x00000e89

000012e8 <SPI_ZCD_init>:

void SPI_ZCD_init(void)
{
    12e8:	b580      	push	{r7, lr}
    12ea:	af00      	add	r7, sp, #0
	SPI_ZCD_CLOCK_init();
    12ec:	4b06      	ldr	r3, [pc, #24]	; (1308 <SPI_ZCD_init+0x20>)
    12ee:	4798      	blx	r3
	spi_m_sync_init(&SPI_ZCD, SERCOM2);
    12f0:	4a06      	ldr	r2, [pc, #24]	; (130c <SPI_ZCD_init+0x24>)
    12f2:	4b07      	ldr	r3, [pc, #28]	; (1310 <SPI_ZCD_init+0x28>)
    12f4:	0011      	movs	r1, r2
    12f6:	0018      	movs	r0, r3
    12f8:	4b06      	ldr	r3, [pc, #24]	; (1314 <SPI_ZCD_init+0x2c>)
    12fa:	4798      	blx	r3
	SPI_ZCD_PORT_init();
    12fc:	4b06      	ldr	r3, [pc, #24]	; (1318 <SPI_ZCD_init+0x30>)
    12fe:	4798      	blx	r3
}
    1300:	46c0      	nop			; (mov r8, r8)
    1302:	46bd      	mov	sp, r7
    1304:	bd80      	pop	{r7, pc}
    1306:	46c0      	nop			; (mov r8, r8)
    1308:	000012c1 	.word	0x000012c1
    130c:	42001000 	.word	0x42001000
    1310:	2000112c 	.word	0x2000112c
    1314:	0000193d 	.word	0x0000193d
    1318:	0000124d 	.word	0x0000124d

0000131c <TARGET_IO_PORT_init>:

void TARGET_IO_PORT_init(void)
{
    131c:	b580      	push	{r7, lr}
    131e:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PA22, PINMUX_PA22C_SERCOM3_PAD0);
    1320:	4b06      	ldr	r3, [pc, #24]	; (133c <TARGET_IO_PORT_init+0x20>)
    1322:	0019      	movs	r1, r3
    1324:	2016      	movs	r0, #22
    1326:	4b06      	ldr	r3, [pc, #24]	; (1340 <TARGET_IO_PORT_init+0x24>)
    1328:	4798      	blx	r3

	gpio_set_pin_function(PA23, PINMUX_PA23C_SERCOM3_PAD1);
    132a:	4b06      	ldr	r3, [pc, #24]	; (1344 <TARGET_IO_PORT_init+0x28>)
    132c:	0019      	movs	r1, r3
    132e:	2017      	movs	r0, #23
    1330:	4b03      	ldr	r3, [pc, #12]	; (1340 <TARGET_IO_PORT_init+0x24>)
    1332:	4798      	blx	r3
}
    1334:	46c0      	nop			; (mov r8, r8)
    1336:	46bd      	mov	sp, r7
    1338:	bd80      	pop	{r7, pc}
    133a:	46c0      	nop			; (mov r8, r8)
    133c:	00160002 	.word	0x00160002
    1340:	00000dd1 	.word	0x00000dd1
    1344:	00170002 	.word	0x00170002

00001348 <TARGET_IO_CLOCK_init>:

void TARGET_IO_CLOCK_init(void)
{
    1348:	b580      	push	{r7, lr}
    134a:	af00      	add	r7, sp, #0
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM3);
    134c:	4b05      	ldr	r3, [pc, #20]	; (1364 <TARGET_IO_CLOCK_init+0x1c>)
    134e:	0019      	movs	r1, r3
    1350:	2003      	movs	r0, #3
    1352:	4b05      	ldr	r3, [pc, #20]	; (1368 <TARGET_IO_CLOCK_init+0x20>)
    1354:	4798      	blx	r3
	_gclk_enable_channel(SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC);
    1356:	2100      	movs	r1, #0
    1358:	2017      	movs	r0, #23
    135a:	4b04      	ldr	r3, [pc, #16]	; (136c <TARGET_IO_CLOCK_init+0x24>)
    135c:	4798      	blx	r3
}
    135e:	46c0      	nop			; (mov r8, r8)
    1360:	46bd      	mov	sp, r7
    1362:	bd80      	pop	{r7, pc}
    1364:	42001400 	.word	0x42001400
    1368:	00000fc9 	.word	0x00000fc9
    136c:	00000e89 	.word	0x00000e89

00001370 <TARGET_IO_init>:

void TARGET_IO_init(void)
{
    1370:	b580      	push	{r7, lr}
    1372:	af00      	add	r7, sp, #0
	TARGET_IO_CLOCK_init();
    1374:	4b06      	ldr	r3, [pc, #24]	; (1390 <TARGET_IO_init+0x20>)
    1376:	4798      	blx	r3
	usart_sync_init(&TARGET_IO, SERCOM3, (void *)NULL);
    1378:	4906      	ldr	r1, [pc, #24]	; (1394 <TARGET_IO_init+0x24>)
    137a:	4b07      	ldr	r3, [pc, #28]	; (1398 <TARGET_IO_init+0x28>)
    137c:	2200      	movs	r2, #0
    137e:	0018      	movs	r0, r3
    1380:	4b06      	ldr	r3, [pc, #24]	; (139c <TARGET_IO_init+0x2c>)
    1382:	4798      	blx	r3
	TARGET_IO_PORT_init();
    1384:	4b06      	ldr	r3, [pc, #24]	; (13a0 <TARGET_IO_init+0x30>)
    1386:	4798      	blx	r3
}
    1388:	46c0      	nop			; (mov r8, r8)
    138a:	46bd      	mov	sp, r7
    138c:	bd80      	pop	{r7, pc}
    138e:	46c0      	nop			; (mov r8, r8)
    1390:	00001349 	.word	0x00001349
    1394:	42001400 	.word	0x42001400
    1398:	200010fc 	.word	0x200010fc
    139c:	00001b85 	.word	0x00001b85
    13a0:	0000131d 	.word	0x0000131d

000013a4 <delay_driver_init>:

void delay_driver_init(void)
{
    13a4:	b580      	push	{r7, lr}
    13a6:	af00      	add	r7, sp, #0
	delay_init(SysTick);
    13a8:	4b03      	ldr	r3, [pc, #12]	; (13b8 <delay_driver_init+0x14>)
    13aa:	0018      	movs	r0, r3
    13ac:	4b03      	ldr	r3, [pc, #12]	; (13bc <delay_driver_init+0x18>)
    13ae:	4798      	blx	r3
}
    13b0:	46c0      	nop			; (mov r8, r8)
    13b2:	46bd      	mov	sp, r7
    13b4:	bd80      	pop	{r7, pc}
    13b6:	46c0      	nop			; (mov r8, r8)
    13b8:	e000e010 	.word	0xe000e010
    13bc:	00001835 	.word	0x00001835

000013c0 <DAC_0_PORT_init>:

void DAC_0_PORT_init(void)
{
    13c0:	b580      	push	{r7, lr}
    13c2:	af00      	add	r7, sp, #0

	// Disable digital pin circuitry
	gpio_set_pin_direction(PA02, GPIO_DIRECTION_OFF);
    13c4:	2100      	movs	r1, #0
    13c6:	2002      	movs	r0, #2
    13c8:	4b04      	ldr	r3, [pc, #16]	; (13dc <DAC_0_PORT_init+0x1c>)
    13ca:	4798      	blx	r3

	gpio_set_pin_function(PA02, PINMUX_PA02B_DAC_VOUT);
    13cc:	4b04      	ldr	r3, [pc, #16]	; (13e0 <DAC_0_PORT_init+0x20>)
    13ce:	0019      	movs	r1, r3
    13d0:	2002      	movs	r0, #2
    13d2:	4b04      	ldr	r3, [pc, #16]	; (13e4 <DAC_0_PORT_init+0x24>)
    13d4:	4798      	blx	r3
}
    13d6:	46c0      	nop			; (mov r8, r8)
    13d8:	46bd      	mov	sp, r7
    13da:	bd80      	pop	{r7, pc}
    13dc:	00000df5 	.word	0x00000df5
    13e0:	00020001 	.word	0x00020001
    13e4:	00000dd1 	.word	0x00000dd1

000013e8 <DAC_0_CLOCK_init>:

void DAC_0_CLOCK_init(void)
{
    13e8:	b580      	push	{r7, lr}
    13ea:	af00      	add	r7, sp, #0

	_pm_enable_bus_clock(PM_BUS_APBC, DAC);
    13ec:	4b05      	ldr	r3, [pc, #20]	; (1404 <DAC_0_CLOCK_init+0x1c>)
    13ee:	0019      	movs	r1, r3
    13f0:	2003      	movs	r0, #3
    13f2:	4b05      	ldr	r3, [pc, #20]	; (1408 <DAC_0_CLOCK_init+0x20>)
    13f4:	4798      	blx	r3
	_gclk_enable_channel(DAC_GCLK_ID, CONF_GCLK_DAC_SRC);
    13f6:	2100      	movs	r1, #0
    13f8:	2021      	movs	r0, #33	; 0x21
    13fa:	4b04      	ldr	r3, [pc, #16]	; (140c <DAC_0_CLOCK_init+0x24>)
    13fc:	4798      	blx	r3
}
    13fe:	46c0      	nop			; (mov r8, r8)
    1400:	46bd      	mov	sp, r7
    1402:	bd80      	pop	{r7, pc}
    1404:	42004800 	.word	0x42004800
    1408:	00000fc9 	.word	0x00000fc9
    140c:	00000e89 	.word	0x00000e89

00001410 <DAC_0_init>:

void DAC_0_init(void)
{
    1410:	b580      	push	{r7, lr}
    1412:	af00      	add	r7, sp, #0
	DAC_0_CLOCK_init();
    1414:	4b06      	ldr	r3, [pc, #24]	; (1430 <DAC_0_init+0x20>)
    1416:	4798      	blx	r3
	dac_sync_init(&DAC_0, DAC);
    1418:	4a06      	ldr	r2, [pc, #24]	; (1434 <DAC_0_init+0x24>)
    141a:	4b07      	ldr	r3, [pc, #28]	; (1438 <DAC_0_init+0x28>)
    141c:	0011      	movs	r1, r2
    141e:	0018      	movs	r0, r3
    1420:	4b06      	ldr	r3, [pc, #24]	; (143c <DAC_0_init+0x2c>)
    1422:	4798      	blx	r3
	DAC_0_PORT_init();
    1424:	4b06      	ldr	r3, [pc, #24]	; (1440 <DAC_0_init+0x30>)
    1426:	4798      	blx	r3
}
    1428:	46c0      	nop			; (mov r8, r8)
    142a:	46bd      	mov	sp, r7
    142c:	bd80      	pop	{r7, pc}
    142e:	46c0      	nop			; (mov r8, r8)
    1430:	000013e9 	.word	0x000013e9
    1434:	42004800 	.word	0x42004800
    1438:	20001108 	.word	0x20001108
    143c:	00001621 	.word	0x00001621
    1440:	000013c1 	.word	0x000013c1

00001444 <USB_DEVICE_INSTANCE_PORT_init>:

void USB_DEVICE_INSTANCE_PORT_init(void)
{
    1444:	b580      	push	{r7, lr}
    1446:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    1448:	2102      	movs	r1, #2
    144a:	2018      	movs	r0, #24
    144c:	4b11      	ldr	r3, [pc, #68]	; (1494 <USB_DEVICE_INSTANCE_PORT_init+0x50>)
    144e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    1450:	2100      	movs	r1, #0
    1452:	2018      	movs	r0, #24
    1454:	4b10      	ldr	r3, [pc, #64]	; (1498 <USB_DEVICE_INSTANCE_PORT_init+0x54>)
    1456:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    1458:	2100      	movs	r1, #0
    145a:	2018      	movs	r0, #24
    145c:	4b0f      	ldr	r3, [pc, #60]	; (149c <USB_DEVICE_INSTANCE_PORT_init+0x58>)
    145e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    1460:	4b0f      	ldr	r3, [pc, #60]	; (14a0 <USB_DEVICE_INSTANCE_PORT_init+0x5c>)
    1462:	0019      	movs	r1, r3
    1464:	2018      	movs	r0, #24
    1466:	4b0f      	ldr	r3, [pc, #60]	; (14a4 <USB_DEVICE_INSTANCE_PORT_init+0x60>)
    1468:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_F"> F
	                      // <GPIO_PIN_FUNCTION_G"> G
	                      // <GPIO_PIN_FUNCTION_H"> H
	                      PINMUX_PA24G_USB_DM);

	gpio_set_pin_direction(PA25,
    146a:	2102      	movs	r1, #2
    146c:	2019      	movs	r0, #25
    146e:	4b09      	ldr	r3, [pc, #36]	; (1494 <USB_DEVICE_INSTANCE_PORT_init+0x50>)
    1470:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    1472:	2100      	movs	r1, #0
    1474:	2019      	movs	r0, #25
    1476:	4b08      	ldr	r3, [pc, #32]	; (1498 <USB_DEVICE_INSTANCE_PORT_init+0x54>)
    1478:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    147a:	2100      	movs	r1, #0
    147c:	2019      	movs	r0, #25
    147e:	4b07      	ldr	r3, [pc, #28]	; (149c <USB_DEVICE_INSTANCE_PORT_init+0x58>)
    1480:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    1482:	4b09      	ldr	r3, [pc, #36]	; (14a8 <USB_DEVICE_INSTANCE_PORT_init+0x64>)
    1484:	0019      	movs	r1, r3
    1486:	2019      	movs	r0, #25
    1488:	4b06      	ldr	r3, [pc, #24]	; (14a4 <USB_DEVICE_INSTANCE_PORT_init+0x60>)
    148a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_E"> E
	                      // <GPIO_PIN_FUNCTION_F"> F
	                      // <GPIO_PIN_FUNCTION_G"> G
	                      // <GPIO_PIN_FUNCTION_H"> H
	                      PINMUX_PA25G_USB_DP);
}
    148c:	46c0      	nop			; (mov r8, r8)
    148e:	46bd      	mov	sp, r7
    1490:	bd80      	pop	{r7, pc}
    1492:	46c0      	nop			; (mov r8, r8)
    1494:	00000df5 	.word	0x00000df5
    1498:	00000e35 	.word	0x00000e35
    149c:	00000d95 	.word	0x00000d95
    14a0:	00180006 	.word	0x00180006
    14a4:	00000dd1 	.word	0x00000dd1
    14a8:	00190006 	.word	0x00190006

000014ac <USB_DEVICE_INSTANCE_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void USB_DEVICE_INSTANCE_CLOCK_init(void)
{
    14ac:	b580      	push	{r7, lr}
    14ae:	af00      	add	r7, sp, #0

	_pm_enable_bus_clock(PM_BUS_APBB, USB);
    14b0:	4b08      	ldr	r3, [pc, #32]	; (14d4 <USB_DEVICE_INSTANCE_CLOCK_init+0x28>)
    14b2:	0019      	movs	r1, r3
    14b4:	2002      	movs	r0, #2
    14b6:	4b08      	ldr	r3, [pc, #32]	; (14d8 <USB_DEVICE_INSTANCE_CLOCK_init+0x2c>)
    14b8:	4798      	blx	r3
	_pm_enable_bus_clock(PM_BUS_AHB, USB);
    14ba:	4b06      	ldr	r3, [pc, #24]	; (14d4 <USB_DEVICE_INSTANCE_CLOCK_init+0x28>)
    14bc:	0019      	movs	r1, r3
    14be:	2000      	movs	r0, #0
    14c0:	4b05      	ldr	r3, [pc, #20]	; (14d8 <USB_DEVICE_INSTANCE_CLOCK_init+0x2c>)
    14c2:	4798      	blx	r3
	_gclk_enable_channel(USB_GCLK_ID, CONF_GCLK_USB_SRC);
    14c4:	2104      	movs	r1, #4
    14c6:	2006      	movs	r0, #6
    14c8:	4b04      	ldr	r3, [pc, #16]	; (14dc <USB_DEVICE_INSTANCE_CLOCK_init+0x30>)
    14ca:	4798      	blx	r3
}
    14cc:	46c0      	nop			; (mov r8, r8)
    14ce:	46bd      	mov	sp, r7
    14d0:	bd80      	pop	{r7, pc}
    14d2:	46c0      	nop			; (mov r8, r8)
    14d4:	41005000 	.word	0x41005000
    14d8:	00000fc9 	.word	0x00000fc9
    14dc:	00000e89 	.word	0x00000e89

000014e0 <USB_DEVICE_INSTANCE_init>:

void USB_DEVICE_INSTANCE_init(void)
{
    14e0:	b580      	push	{r7, lr}
    14e2:	af00      	add	r7, sp, #0
	USB_DEVICE_INSTANCE_CLOCK_init();
    14e4:	4b04      	ldr	r3, [pc, #16]	; (14f8 <USB_DEVICE_INSTANCE_init+0x18>)
    14e6:	4798      	blx	r3
	usb_d_init();
    14e8:	4b04      	ldr	r3, [pc, #16]	; (14fc <USB_DEVICE_INSTANCE_init+0x1c>)
    14ea:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
    14ec:	4b04      	ldr	r3, [pc, #16]	; (1500 <USB_DEVICE_INSTANCE_init+0x20>)
    14ee:	4798      	blx	r3
}
    14f0:	46c0      	nop			; (mov r8, r8)
    14f2:	46bd      	mov	sp, r7
    14f4:	bd80      	pop	{r7, pc}
    14f6:	46c0      	nop			; (mov r8, r8)
    14f8:	000014ad 	.word	0x000014ad
    14fc:	00002209 	.word	0x00002209
    1500:	00001445 	.word	0x00001445

00001504 <system_init>:

void system_init(void)
{
    1504:	b580      	push	{r7, lr}
    1506:	af00      	add	r7, sp, #0
	init_mcu();
    1508:	4b3a      	ldr	r3, [pc, #232]	; (15f4 <system_init+0xf0>)
    150a:	4798      	blx	r3

	// GPIO on PA03

	gpio_set_pin_level(CS_ZCD,
    150c:	2101      	movs	r1, #1
    150e:	2003      	movs	r0, #3
    1510:	4b39      	ldr	r3, [pc, #228]	; (15f8 <system_init+0xf4>)
    1512:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_ZCD, GPIO_DIRECTION_OUT);
    1514:	2102      	movs	r1, #2
    1516:	2003      	movs	r0, #3
    1518:	4b38      	ldr	r3, [pc, #224]	; (15fc <system_init+0xf8>)
    151a:	4798      	blx	r3

	gpio_set_pin_function(CS_ZCD, GPIO_PIN_FUNCTION_OFF);
    151c:	2301      	movs	r3, #1
    151e:	425b      	negs	r3, r3
    1520:	0019      	movs	r1, r3
    1522:	2003      	movs	r0, #3
    1524:	4b36      	ldr	r3, [pc, #216]	; (1600 <system_init+0xfc>)
    1526:	4798      	blx	r3

	// GPIO on PA07

	gpio_set_pin_level(CS_ADF,
    1528:	2100      	movs	r1, #0
    152a:	2007      	movs	r0, #7
    152c:	4b32      	ldr	r3, [pc, #200]	; (15f8 <system_init+0xf4>)
    152e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CS_ADF, GPIO_DIRECTION_OUT);
    1530:	2102      	movs	r1, #2
    1532:	2007      	movs	r0, #7
    1534:	4b31      	ldr	r3, [pc, #196]	; (15fc <system_init+0xf8>)
    1536:	4798      	blx	r3

	gpio_set_pin_function(CS_ADF, GPIO_PIN_FUNCTION_OFF);
    1538:	2301      	movs	r3, #1
    153a:	425b      	negs	r3, r3
    153c:	0019      	movs	r1, r3
    153e:	2007      	movs	r0, #7
    1540:	4b2f      	ldr	r3, [pc, #188]	; (1600 <system_init+0xfc>)
    1542:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_LMX,
    1544:	2101      	movs	r1, #1
    1546:	2013      	movs	r0, #19
    1548:	4b2b      	ldr	r3, [pc, #172]	; (15f8 <system_init+0xf4>)
    154a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_LMX, GPIO_DIRECTION_OUT);
    154c:	2102      	movs	r1, #2
    154e:	2013      	movs	r0, #19
    1550:	4b2a      	ldr	r3, [pc, #168]	; (15fc <system_init+0xf8>)
    1552:	4798      	blx	r3

	gpio_set_pin_function(CS_LMX, GPIO_PIN_FUNCTION_OFF);
    1554:	2301      	movs	r3, #1
    1556:	425b      	negs	r3, r3
    1558:	0019      	movs	r1, r3
    155a:	2013      	movs	r0, #19
    155c:	4b28      	ldr	r3, [pc, #160]	; (1600 <system_init+0xfc>)
    155e:	4798      	blx	r3

	// GPIO on PA30

	gpio_set_pin_level(PA30,
    1560:	2101      	movs	r1, #1
    1562:	201e      	movs	r0, #30
    1564:	4b24      	ldr	r3, [pc, #144]	; (15f8 <system_init+0xf4>)
    1566:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(PA30, GPIO_DIRECTION_OUT);
    1568:	2102      	movs	r1, #2
    156a:	201e      	movs	r0, #30
    156c:	4b23      	ldr	r3, [pc, #140]	; (15fc <system_init+0xf8>)
    156e:	4798      	blx	r3

	gpio_set_pin_function(PA30, GPIO_PIN_FUNCTION_OFF);
    1570:	2301      	movs	r3, #1
    1572:	425b      	negs	r3, r3
    1574:	0019      	movs	r1, r3
    1576:	201e      	movs	r0, #30
    1578:	4b21      	ldr	r3, [pc, #132]	; (1600 <system_init+0xfc>)
    157a:	4798      	blx	r3

	// GPIO on PB00

	gpio_set_pin_level(dummy_gpio,
    157c:	2100      	movs	r1, #0
    157e:	2020      	movs	r0, #32
    1580:	4b1d      	ldr	r3, [pc, #116]	; (15f8 <system_init+0xf4>)
    1582:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(dummy_gpio, GPIO_DIRECTION_OUT);
    1584:	2102      	movs	r1, #2
    1586:	2020      	movs	r0, #32
    1588:	4b1c      	ldr	r3, [pc, #112]	; (15fc <system_init+0xf8>)
    158a:	4798      	blx	r3

	gpio_set_pin_function(dummy_gpio, GPIO_PIN_FUNCTION_OFF);
    158c:	2301      	movs	r3, #1
    158e:	425b      	negs	r3, r3
    1590:	0019      	movs	r1, r3
    1592:	2020      	movs	r0, #32
    1594:	4b1a      	ldr	r3, [pc, #104]	; (1600 <system_init+0xfc>)
    1596:	4798      	blx	r3

	// GPIO on PB01

	gpio_set_pin_level(Dummy_Pin,
    1598:	2101      	movs	r1, #1
    159a:	2021      	movs	r0, #33	; 0x21
    159c:	4b16      	ldr	r3, [pc, #88]	; (15f8 <system_init+0xf4>)
    159e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(Dummy_Pin, GPIO_DIRECTION_OUT);
    15a0:	2102      	movs	r1, #2
    15a2:	2021      	movs	r0, #33	; 0x21
    15a4:	4b15      	ldr	r3, [pc, #84]	; (15fc <system_init+0xf8>)
    15a6:	4798      	blx	r3

	gpio_set_pin_function(Dummy_Pin, GPIO_PIN_FUNCTION_OFF);
    15a8:	2301      	movs	r3, #1
    15aa:	425b      	negs	r3, r3
    15ac:	0019      	movs	r1, r3
    15ae:	2021      	movs	r0, #33	; 0x21
    15b0:	4b13      	ldr	r3, [pc, #76]	; (1600 <system_init+0xfc>)
    15b2:	4798      	blx	r3

	// GPIO on PB30

	gpio_set_pin_level(LED0,
    15b4:	2101      	movs	r1, #1
    15b6:	203e      	movs	r0, #62	; 0x3e
    15b8:	4b0f      	ldr	r3, [pc, #60]	; (15f8 <system_init+0xf4>)
    15ba:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    15bc:	2102      	movs	r1, #2
    15be:	203e      	movs	r0, #62	; 0x3e
    15c0:	4b0e      	ldr	r3, [pc, #56]	; (15fc <system_init+0xf8>)
    15c2:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    15c4:	2301      	movs	r3, #1
    15c6:	425b      	negs	r3, r3
    15c8:	0019      	movs	r1, r3
    15ca:	203e      	movs	r0, #62	; 0x3e
    15cc:	4b0c      	ldr	r3, [pc, #48]	; (1600 <system_init+0xfc>)
    15ce:	4798      	blx	r3

	SPI_ADF_init();
    15d0:	4b0c      	ldr	r3, [pc, #48]	; (1604 <system_init+0x100>)
    15d2:	4798      	blx	r3

	SPI_LMX_init();
    15d4:	4b0c      	ldr	r3, [pc, #48]	; (1608 <system_init+0x104>)
    15d6:	4798      	blx	r3

	SPI_ZCD_init();
    15d8:	4b0c      	ldr	r3, [pc, #48]	; (160c <system_init+0x108>)
    15da:	4798      	blx	r3

	TARGET_IO_init();
    15dc:	4b0c      	ldr	r3, [pc, #48]	; (1610 <system_init+0x10c>)
    15de:	4798      	blx	r3

	delay_driver_init();
    15e0:	4b0c      	ldr	r3, [pc, #48]	; (1614 <system_init+0x110>)
    15e2:	4798      	blx	r3

	DAC_0_init();
    15e4:	4b0c      	ldr	r3, [pc, #48]	; (1618 <system_init+0x114>)
    15e6:	4798      	blx	r3

	USB_DEVICE_INSTANCE_init();
    15e8:	4b0c      	ldr	r3, [pc, #48]	; (161c <system_init+0x118>)
    15ea:	4798      	blx	r3
}
    15ec:	46c0      	nop			; (mov r8, r8)
    15ee:	46bd      	mov	sp, r7
    15f0:	bd80      	pop	{r7, pc}
    15f2:	46c0      	nop			; (mov r8, r8)
    15f4:	00000e75 	.word	0x00000e75
    15f8:	00000e35 	.word	0x00000e35
    15fc:	00000df5 	.word	0x00000df5
    1600:	00000dd1 	.word	0x00000dd1
    1604:	00001149 	.word	0x00001149
    1608:	00001219 	.word	0x00001219
    160c:	000012e9 	.word	0x000012e9
    1610:	00001371 	.word	0x00001371
    1614:	000013a5 	.word	0x000013a5
    1618:	00001411 	.word	0x00001411
    161c:	000014e1 	.word	0x000014e1

00001620 <dac_sync_init>:

/**
 * \brief Initialize the DAC HAL instance and hardware.
 */
int32_t dac_sync_init(struct dac_sync_descriptor *const descr, void *const hw)
{
    1620:	b580      	push	{r7, lr}
    1622:	b084      	sub	sp, #16
    1624:	af00      	add	r7, sp, #0
    1626:	6078      	str	r0, [r7, #4]
    1628:	6039      	str	r1, [r7, #0]
	uint8_t i;
	int32_t rc;

	ASSERT(descr && hw);
    162a:	687b      	ldr	r3, [r7, #4]
    162c:	2b00      	cmp	r3, #0
    162e:	d004      	beq.n	163a <dac_sync_init+0x1a>
    1630:	683b      	ldr	r3, [r7, #0]
    1632:	2b00      	cmp	r3, #0
    1634:	d001      	beq.n	163a <dac_sync_init+0x1a>
    1636:	2301      	movs	r3, #1
    1638:	e000      	b.n	163c <dac_sync_init+0x1c>
    163a:	2300      	movs	r3, #0
    163c:	1c1a      	adds	r2, r3, #0
    163e:	2301      	movs	r3, #1
    1640:	4013      	ands	r3, r2
    1642:	b2db      	uxtb	r3, r3
    1644:	491c      	ldr	r1, [pc, #112]	; (16b8 <dac_sync_init+0x98>)
    1646:	2232      	movs	r2, #50	; 0x32
    1648:	0018      	movs	r0, r3
    164a:	4b1c      	ldr	r3, [pc, #112]	; (16bc <dac_sync_init+0x9c>)
    164c:	4798      	blx	r3

	rc = _dac_sync_init(&descr->device, hw);
    164e:	687b      	ldr	r3, [r7, #4]
    1650:	683a      	ldr	r2, [r7, #0]
    1652:	0011      	movs	r1, r2
    1654:	0018      	movs	r0, r3
    1656:	4b1a      	ldr	r3, [pc, #104]	; (16c0 <dac_sync_init+0xa0>)
    1658:	4798      	blx	r3
    165a:	0003      	movs	r3, r0
    165c:	60bb      	str	r3, [r7, #8]
	if (rc) {
    165e:	68bb      	ldr	r3, [r7, #8]
    1660:	2b00      	cmp	r3, #0
    1662:	d001      	beq.n	1668 <dac_sync_init+0x48>
		return rc;
    1664:	68bb      	ldr	r3, [r7, #8]
    1666:	e023      	b.n	16b0 <dac_sync_init+0x90>
	}

	for (i = 0; i < CHANNEL_NUM; i++) {
    1668:	230f      	movs	r3, #15
    166a:	18fb      	adds	r3, r7, r3
    166c:	2200      	movs	r2, #0
    166e:	701a      	strb	r2, [r3, #0]
    1670:	e018      	b.n	16a4 <dac_sync_init+0x84>
		descr->sel_ch[i].buffer = NULL;
    1672:	230f      	movs	r3, #15
    1674:	18fb      	adds	r3, r7, r3
    1676:	781b      	ldrb	r3, [r3, #0]
    1678:	687a      	ldr	r2, [r7, #4]
    167a:	00db      	lsls	r3, r3, #3
    167c:	18d3      	adds	r3, r2, r3
    167e:	3304      	adds	r3, #4
    1680:	2200      	movs	r2, #0
    1682:	601a      	str	r2, [r3, #0]
		descr->sel_ch[i].length = 0;
    1684:	230f      	movs	r3, #15
    1686:	18fb      	adds	r3, r7, r3
    1688:	781b      	ldrb	r3, [r3, #0]
    168a:	687a      	ldr	r2, [r7, #4]
    168c:	00db      	lsls	r3, r3, #3
    168e:	18d3      	adds	r3, r2, r3
    1690:	3308      	adds	r3, #8
    1692:	2200      	movs	r2, #0
    1694:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CHANNEL_NUM; i++) {
    1696:	230f      	movs	r3, #15
    1698:	18fb      	adds	r3, r7, r3
    169a:	781a      	ldrb	r2, [r3, #0]
    169c:	230f      	movs	r3, #15
    169e:	18fb      	adds	r3, r7, r3
    16a0:	3201      	adds	r2, #1
    16a2:	701a      	strb	r2, [r3, #0]
    16a4:	230f      	movs	r3, #15
    16a6:	18fb      	adds	r3, r7, r3
    16a8:	781b      	ldrb	r3, [r3, #0]
    16aa:	2b00      	cmp	r3, #0
    16ac:	d0e1      	beq.n	1672 <dac_sync_init+0x52>
	}

	return ERR_NONE;
    16ae:	2300      	movs	r3, #0
}
    16b0:	0018      	movs	r0, r3
    16b2:	46bd      	mov	sp, r7
    16b4:	b004      	add	sp, #16
    16b6:	bd80      	pop	{r7, pc}
    16b8:	0000fc0c 	.word	0x0000fc0c
    16bc:	00002841 	.word	0x00002841
    16c0:	00002c59 	.word	0x00002c59

000016c4 <dac_sync_enable_channel>:

/**
 * \brief Enable DAC channel
 */
int32_t dac_sync_enable_channel(struct dac_sync_descriptor *const descr, const uint8_t ch)
{
    16c4:	b580      	push	{r7, lr}
    16c6:	b082      	sub	sp, #8
    16c8:	af00      	add	r7, sp, #0
    16ca:	6078      	str	r0, [r7, #4]
    16cc:	000a      	movs	r2, r1
    16ce:	1cfb      	adds	r3, r7, #3
    16d0:	701a      	strb	r2, [r3, #0]
	ASSERT(descr && (ch < CHANNEL_NUM));
    16d2:	687b      	ldr	r3, [r7, #4]
    16d4:	2b00      	cmp	r3, #0
    16d6:	d005      	beq.n	16e4 <dac_sync_enable_channel+0x20>
    16d8:	1cfb      	adds	r3, r7, #3
    16da:	781b      	ldrb	r3, [r3, #0]
    16dc:	2b00      	cmp	r3, #0
    16de:	d101      	bne.n	16e4 <dac_sync_enable_channel+0x20>
    16e0:	2301      	movs	r3, #1
    16e2:	e000      	b.n	16e6 <dac_sync_enable_channel+0x22>
    16e4:	2300      	movs	r3, #0
    16e6:	1c1a      	adds	r2, r3, #0
    16e8:	2301      	movs	r3, #1
    16ea:	4013      	ands	r3, r2
    16ec:	b2db      	uxtb	r3, r3
    16ee:	4908      	ldr	r1, [pc, #32]	; (1710 <dac_sync_enable_channel+0x4c>)
    16f0:	2252      	movs	r2, #82	; 0x52
    16f2:	0018      	movs	r0, r3
    16f4:	4b07      	ldr	r3, [pc, #28]	; (1714 <dac_sync_enable_channel+0x50>)
    16f6:	4798      	blx	r3

	_dac_sync_enable_channel(&descr->device, ch);
    16f8:	687a      	ldr	r2, [r7, #4]
    16fa:	1cfb      	adds	r3, r7, #3
    16fc:	781b      	ldrb	r3, [r3, #0]
    16fe:	0019      	movs	r1, r3
    1700:	0010      	movs	r0, r2
    1702:	4b05      	ldr	r3, [pc, #20]	; (1718 <dac_sync_enable_channel+0x54>)
    1704:	4798      	blx	r3

	return ERR_NONE;
    1706:	2300      	movs	r3, #0
}
    1708:	0018      	movs	r0, r3
    170a:	46bd      	mov	sp, r7
    170c:	b002      	add	sp, #8
    170e:	bd80      	pop	{r7, pc}
    1710:	0000fc0c 	.word	0x0000fc0c
    1714:	00002841 	.word	0x00002841
    1718:	00002d2d 	.word	0x00002d2d

0000171c <dac_sync_write>:

/**
 * \brief DAC convert digital data to analog output
 */
int32_t dac_sync_write(struct dac_sync_descriptor *descr, const uint8_t ch, uint16_t *buffer, uint32_t length)
{
    171c:	b580      	push	{r7, lr}
    171e:	b084      	sub	sp, #16
    1720:	af00      	add	r7, sp, #0
    1722:	60f8      	str	r0, [r7, #12]
    1724:	607a      	str	r2, [r7, #4]
    1726:	603b      	str	r3, [r7, #0]
    1728:	230b      	movs	r3, #11
    172a:	18fb      	adds	r3, r7, r3
    172c:	1c0a      	adds	r2, r1, #0
    172e:	701a      	strb	r2, [r3, #0]
	ASSERT(descr && (ch < CHANNEL_NUM) && buffer && length);
    1730:	68fb      	ldr	r3, [r7, #12]
    1732:	2b00      	cmp	r3, #0
    1734:	d00c      	beq.n	1750 <dac_sync_write+0x34>
    1736:	230b      	movs	r3, #11
    1738:	18fb      	adds	r3, r7, r3
    173a:	781b      	ldrb	r3, [r3, #0]
    173c:	2b00      	cmp	r3, #0
    173e:	d107      	bne.n	1750 <dac_sync_write+0x34>
    1740:	687b      	ldr	r3, [r7, #4]
    1742:	2b00      	cmp	r3, #0
    1744:	d004      	beq.n	1750 <dac_sync_write+0x34>
    1746:	683b      	ldr	r3, [r7, #0]
    1748:	2b00      	cmp	r3, #0
    174a:	d001      	beq.n	1750 <dac_sync_write+0x34>
    174c:	2301      	movs	r3, #1
    174e:	e000      	b.n	1752 <dac_sync_write+0x36>
    1750:	2300      	movs	r3, #0
    1752:	1c1a      	adds	r2, r3, #0
    1754:	2301      	movs	r3, #1
    1756:	4013      	ands	r3, r2
    1758:	b2db      	uxtb	r3, r3
    175a:	4932      	ldr	r1, [pc, #200]	; (1824 <dac_sync_write+0x108>)
    175c:	226a      	movs	r2, #106	; 0x6a
    175e:	0018      	movs	r0, r3
    1760:	4b31      	ldr	r3, [pc, #196]	; (1828 <dac_sync_write+0x10c>)
    1762:	4798      	blx	r3

	/* check whether channel is enable */
	if (!_dac_sync_is_channel_enable(&descr->device, ch)) {
    1764:	68fa      	ldr	r2, [r7, #12]
    1766:	230b      	movs	r3, #11
    1768:	18fb      	adds	r3, r7, r3
    176a:	781b      	ldrb	r3, [r3, #0]
    176c:	0019      	movs	r1, r3
    176e:	0010      	movs	r0, r2
    1770:	4b2e      	ldr	r3, [pc, #184]	; (182c <dac_sync_write+0x110>)
    1772:	4798      	blx	r3
    1774:	0003      	movs	r3, r0
    1776:	001a      	movs	r2, r3
    1778:	2301      	movs	r3, #1
    177a:	4053      	eors	r3, r2
    177c:	b2db      	uxtb	r3, r3
    177e:	2b00      	cmp	r3, #0
    1780:	d002      	beq.n	1788 <dac_sync_write+0x6c>
		return ERR_NOT_READY;
    1782:	231d      	movs	r3, #29
    1784:	425b      	negs	r3, r3
    1786:	e049      	b.n	181c <dac_sync_write+0x100>
	}

	descr->sel_ch[ch].buffer = buffer;
    1788:	230b      	movs	r3, #11
    178a:	18fb      	adds	r3, r7, r3
    178c:	781b      	ldrb	r3, [r3, #0]
    178e:	68fa      	ldr	r2, [r7, #12]
    1790:	00db      	lsls	r3, r3, #3
    1792:	18d3      	adds	r3, r2, r3
    1794:	3304      	adds	r3, #4
    1796:	687a      	ldr	r2, [r7, #4]
    1798:	601a      	str	r2, [r3, #0]
	descr->sel_ch[ch].length = length;
    179a:	230b      	movs	r3, #11
    179c:	18fb      	adds	r3, r7, r3
    179e:	781b      	ldrb	r3, [r3, #0]
    17a0:	68fa      	ldr	r2, [r7, #12]
    17a2:	00db      	lsls	r3, r3, #3
    17a4:	18d3      	adds	r3, r2, r3
    17a6:	3308      	adds	r3, #8
    17a8:	683a      	ldr	r2, [r7, #0]
    17aa:	601a      	str	r2, [r3, #0]

	while (descr->sel_ch[ch].length) {
    17ac:	e02b      	b.n	1806 <dac_sync_write+0xea>
		_dac_sync_write_data(&descr->device, *(descr->sel_ch[ch].buffer), ch);
    17ae:	68f8      	ldr	r0, [r7, #12]
    17b0:	230b      	movs	r3, #11
    17b2:	18fb      	adds	r3, r7, r3
    17b4:	781b      	ldrb	r3, [r3, #0]
    17b6:	68fa      	ldr	r2, [r7, #12]
    17b8:	00db      	lsls	r3, r3, #3
    17ba:	18d3      	adds	r3, r2, r3
    17bc:	3304      	adds	r3, #4
    17be:	681b      	ldr	r3, [r3, #0]
    17c0:	8819      	ldrh	r1, [r3, #0]
    17c2:	230b      	movs	r3, #11
    17c4:	18fb      	adds	r3, r7, r3
    17c6:	781b      	ldrb	r3, [r3, #0]
    17c8:	001a      	movs	r2, r3
    17ca:	4b19      	ldr	r3, [pc, #100]	; (1830 <dac_sync_write+0x114>)
    17cc:	4798      	blx	r3
		descr->sel_ch[ch].buffer++;
    17ce:	230b      	movs	r3, #11
    17d0:	18fb      	adds	r3, r7, r3
    17d2:	781b      	ldrb	r3, [r3, #0]
    17d4:	68f9      	ldr	r1, [r7, #12]
    17d6:	00da      	lsls	r2, r3, #3
    17d8:	188a      	adds	r2, r1, r2
    17da:	3204      	adds	r2, #4
    17dc:	6812      	ldr	r2, [r2, #0]
    17de:	3202      	adds	r2, #2
    17e0:	68f9      	ldr	r1, [r7, #12]
    17e2:	00db      	lsls	r3, r3, #3
    17e4:	18cb      	adds	r3, r1, r3
    17e6:	3304      	adds	r3, #4
    17e8:	601a      	str	r2, [r3, #0]
		descr->sel_ch[ch].length--;
    17ea:	230b      	movs	r3, #11
    17ec:	18fb      	adds	r3, r7, r3
    17ee:	781b      	ldrb	r3, [r3, #0]
    17f0:	68f9      	ldr	r1, [r7, #12]
    17f2:	00da      	lsls	r2, r3, #3
    17f4:	188a      	adds	r2, r1, r2
    17f6:	3208      	adds	r2, #8
    17f8:	6812      	ldr	r2, [r2, #0]
    17fa:	3a01      	subs	r2, #1
    17fc:	68f9      	ldr	r1, [r7, #12]
    17fe:	00db      	lsls	r3, r3, #3
    1800:	18cb      	adds	r3, r1, r3
    1802:	3308      	adds	r3, #8
    1804:	601a      	str	r2, [r3, #0]
	while (descr->sel_ch[ch].length) {
    1806:	230b      	movs	r3, #11
    1808:	18fb      	adds	r3, r7, r3
    180a:	781b      	ldrb	r3, [r3, #0]
    180c:	68fa      	ldr	r2, [r7, #12]
    180e:	00db      	lsls	r3, r3, #3
    1810:	18d3      	adds	r3, r2, r3
    1812:	3308      	adds	r3, #8
    1814:	681b      	ldr	r3, [r3, #0]
    1816:	2b00      	cmp	r3, #0
    1818:	d1c9      	bne.n	17ae <dac_sync_write+0x92>
	}

	return ERR_NONE;
    181a:	2300      	movs	r3, #0
}
    181c:	0018      	movs	r0, r3
    181e:	46bd      	mov	sp, r7
    1820:	b004      	add	sp, #16
    1822:	bd80      	pop	{r7, pc}
    1824:	0000fc0c 	.word	0x0000fc0c
    1828:	00002841 	.word	0x00002841
    182c:	00002d51 	.word	0x00002d51
    1830:	00002d79 	.word	0x00002d79

00001834 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    1834:	b580      	push	{r7, lr}
    1836:	b082      	sub	sp, #8
    1838:	af00      	add	r7, sp, #0
    183a:	6078      	str	r0, [r7, #4]
	_delay_init(hardware = hw);
    183c:	4b05      	ldr	r3, [pc, #20]	; (1854 <delay_init+0x20>)
    183e:	687a      	ldr	r2, [r7, #4]
    1840:	601a      	str	r2, [r3, #0]
    1842:	4b04      	ldr	r3, [pc, #16]	; (1854 <delay_init+0x20>)
    1844:	681b      	ldr	r3, [r3, #0]
    1846:	0018      	movs	r0, r3
    1848:	4b03      	ldr	r3, [pc, #12]	; (1858 <delay_init+0x24>)
    184a:	4798      	blx	r3
}
    184c:	46c0      	nop			; (mov r8, r8)
    184e:	46bd      	mov	sp, r7
    1850:	b002      	add	sp, #8
    1852:	bd80      	pop	{r7, pc}
    1854:	20000a78 	.word	0x20000a78
    1858:	00004509 	.word	0x00004509

0000185c <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    185c:	b590      	push	{r4, r7, lr}
    185e:	b083      	sub	sp, #12
    1860:	af00      	add	r7, sp, #0
    1862:	0002      	movs	r2, r0
    1864:	1dbb      	adds	r3, r7, #6
    1866:	801a      	strh	r2, [r3, #0]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    1868:	4b07      	ldr	r3, [pc, #28]	; (1888 <delay_ms+0x2c>)
    186a:	681c      	ldr	r4, [r3, #0]
    186c:	1dbb      	adds	r3, r7, #6
    186e:	881b      	ldrh	r3, [r3, #0]
    1870:	0018      	movs	r0, r3
    1872:	4b06      	ldr	r3, [pc, #24]	; (188c <delay_ms+0x30>)
    1874:	4798      	blx	r3
    1876:	0003      	movs	r3, r0
    1878:	0019      	movs	r1, r3
    187a:	0020      	movs	r0, r4
    187c:	4b04      	ldr	r3, [pc, #16]	; (1890 <delay_ms+0x34>)
    187e:	4798      	blx	r3
}
    1880:	46c0      	nop			; (mov r8, r8)
    1882:	46bd      	mov	sp, r7
    1884:	b003      	add	sp, #12
    1886:	bd90      	pop	{r4, r7, pc}
    1888:	20000a78 	.word	0x20000a78
    188c:	00002a5d 	.word	0x00002a5d
    1890:	00004525 	.word	0x00004525

00001894 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    1894:	b580      	push	{r7, lr}
    1896:	b084      	sub	sp, #16
    1898:	af00      	add	r7, sp, #0
    189a:	60f8      	str	r0, [r7, #12]
    189c:	60b9      	str	r1, [r7, #8]
    189e:	1dbb      	adds	r3, r7, #6
    18a0:	801a      	strh	r2, [r3, #0]
	ASSERT(io_descr && buf);
    18a2:	68fb      	ldr	r3, [r7, #12]
    18a4:	2b00      	cmp	r3, #0
    18a6:	d004      	beq.n	18b2 <io_write+0x1e>
    18a8:	68bb      	ldr	r3, [r7, #8]
    18aa:	2b00      	cmp	r3, #0
    18ac:	d001      	beq.n	18b2 <io_write+0x1e>
    18ae:	2301      	movs	r3, #1
    18b0:	e000      	b.n	18b4 <io_write+0x20>
    18b2:	2300      	movs	r3, #0
    18b4:	1c1a      	adds	r2, r3, #0
    18b6:	2301      	movs	r3, #1
    18b8:	4013      	ands	r3, r2
    18ba:	b2db      	uxtb	r3, r3
    18bc:	4908      	ldr	r1, [pc, #32]	; (18e0 <io_write+0x4c>)
    18be:	2234      	movs	r2, #52	; 0x34
    18c0:	0018      	movs	r0, r3
    18c2:	4b08      	ldr	r3, [pc, #32]	; (18e4 <io_write+0x50>)
    18c4:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    18c6:	68fb      	ldr	r3, [r7, #12]
    18c8:	681b      	ldr	r3, [r3, #0]
    18ca:	1dba      	adds	r2, r7, #6
    18cc:	8812      	ldrh	r2, [r2, #0]
    18ce:	68b9      	ldr	r1, [r7, #8]
    18d0:	68f8      	ldr	r0, [r7, #12]
    18d2:	4798      	blx	r3
    18d4:	0003      	movs	r3, r0
}
    18d6:	0018      	movs	r0, r3
    18d8:	46bd      	mov	sp, r7
    18da:	b004      	add	sp, #16
    18dc:	bd80      	pop	{r7, pc}
    18de:	46c0      	nop			; (mov r8, r8)
    18e0:	0000fc28 	.word	0x0000fc28
    18e4:	00002841 	.word	0x00002841

000018e8 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    18e8:	b580      	push	{r7, lr}
    18ea:	b084      	sub	sp, #16
    18ec:	af00      	add	r7, sp, #0
    18ee:	60f8      	str	r0, [r7, #12]
    18f0:	60b9      	str	r1, [r7, #8]
    18f2:	1dbb      	adds	r3, r7, #6
    18f4:	801a      	strh	r2, [r3, #0]
	ASSERT(io_descr && buf);
    18f6:	68fb      	ldr	r3, [r7, #12]
    18f8:	2b00      	cmp	r3, #0
    18fa:	d004      	beq.n	1906 <io_read+0x1e>
    18fc:	68bb      	ldr	r3, [r7, #8]
    18fe:	2b00      	cmp	r3, #0
    1900:	d001      	beq.n	1906 <io_read+0x1e>
    1902:	2301      	movs	r3, #1
    1904:	e000      	b.n	1908 <io_read+0x20>
    1906:	2300      	movs	r3, #0
    1908:	1c1a      	adds	r2, r3, #0
    190a:	2301      	movs	r3, #1
    190c:	4013      	ands	r3, r2
    190e:	b2db      	uxtb	r3, r3
    1910:	4908      	ldr	r1, [pc, #32]	; (1934 <io_read+0x4c>)
    1912:	223d      	movs	r2, #61	; 0x3d
    1914:	0018      	movs	r0, r3
    1916:	4b08      	ldr	r3, [pc, #32]	; (1938 <io_read+0x50>)
    1918:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    191a:	68fb      	ldr	r3, [r7, #12]
    191c:	685b      	ldr	r3, [r3, #4]
    191e:	1dba      	adds	r2, r7, #6
    1920:	8812      	ldrh	r2, [r2, #0]
    1922:	68b9      	ldr	r1, [r7, #8]
    1924:	68f8      	ldr	r0, [r7, #12]
    1926:	4798      	blx	r3
    1928:	0003      	movs	r3, r0
}
    192a:	0018      	movs	r0, r3
    192c:	46bd      	mov	sp, r7
    192e:	b004      	add	sp, #16
    1930:	bd80      	pop	{r7, pc}
    1932:	46c0      	nop			; (mov r8, r8)
    1934:	0000fc28 	.word	0x0000fc28
    1938:	00002841 	.word	0x00002841

0000193c <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    193c:	b580      	push	{r7, lr}
    193e:	b084      	sub	sp, #16
    1940:	af00      	add	r7, sp, #0
    1942:	6078      	str	r0, [r7, #4]
    1944:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    1946:	2300      	movs	r3, #0
    1948:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    194a:	687b      	ldr	r3, [r7, #4]
    194c:	2b00      	cmp	r3, #0
    194e:	d004      	beq.n	195a <spi_m_sync_init+0x1e>
    1950:	683b      	ldr	r3, [r7, #0]
    1952:	2b00      	cmp	r3, #0
    1954:	d001      	beq.n	195a <spi_m_sync_init+0x1e>
    1956:	2301      	movs	r3, #1
    1958:	e000      	b.n	195c <spi_m_sync_init+0x20>
    195a:	2300      	movs	r3, #0
    195c:	1c1a      	adds	r2, r3, #0
    195e:	2301      	movs	r3, #1
    1960:	4013      	ands	r3, r2
    1962:	b2db      	uxtb	r3, r3
    1964:	4911      	ldr	r1, [pc, #68]	; (19ac <spi_m_sync_init+0x70>)
    1966:	2240      	movs	r2, #64	; 0x40
    1968:	0018      	movs	r0, r3
    196a:	4b11      	ldr	r3, [pc, #68]	; (19b0 <spi_m_sync_init+0x74>)
    196c:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    196e:	687b      	ldr	r3, [r7, #4]
    1970:	683a      	ldr	r2, [r7, #0]
    1972:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    1974:	687b      	ldr	r3, [r7, #4]
    1976:	3304      	adds	r3, #4
    1978:	683a      	ldr	r2, [r7, #0]
    197a:	0011      	movs	r1, r2
    197c:	0018      	movs	r0, r3
    197e:	4b0d      	ldr	r3, [pc, #52]	; (19b4 <spi_m_sync_init+0x78>)
    1980:	4798      	blx	r3
    1982:	0003      	movs	r3, r0
    1984:	60fb      	str	r3, [r7, #12]

	if (rc < 0) {
    1986:	68fb      	ldr	r3, [r7, #12]
    1988:	2b00      	cmp	r3, #0
    198a:	da01      	bge.n	1990 <spi_m_sync_init+0x54>
		return rc;
    198c:	68fb      	ldr	r3, [r7, #12]
    198e:	e009      	b.n	19a4 <spi_m_sync_init+0x68>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    1990:	687b      	ldr	r3, [r7, #4]
    1992:	4a09      	ldr	r2, [pc, #36]	; (19b8 <spi_m_sync_init+0x7c>)
    1994:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    1996:	687b      	ldr	r3, [r7, #4]
    1998:	4a08      	ldr	r2, [pc, #32]	; (19bc <spi_m_sync_init+0x80>)
    199a:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    199c:	687b      	ldr	r3, [r7, #4]
    199e:	4a08      	ldr	r2, [pc, #32]	; (19c0 <spi_m_sync_init+0x84>)
    19a0:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    19a2:	2300      	movs	r3, #0
}
    19a4:	0018      	movs	r0, r3
    19a6:	46bd      	mov	sp, r7
    19a8:	b004      	add	sp, #16
    19aa:	bd80      	pop	{r7, pc}
    19ac:	0000fc3c 	.word	0x0000fc3c
    19b0:	00002841 	.word	0x00002841
    19b4:	00003ac9 	.word	0x00003ac9
    19b8:	ffff8000 	.word	0xffff8000
    19bc:	000019fd 	.word	0x000019fd
    19c0:	00001a61 	.word	0x00001a61

000019c4 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
    19c4:	b580      	push	{r7, lr}
    19c6:	b082      	sub	sp, #8
    19c8:	af00      	add	r7, sp, #0
    19ca:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    19cc:	687b      	ldr	r3, [r7, #4]
    19ce:	1e5a      	subs	r2, r3, #1
    19d0:	4193      	sbcs	r3, r2
    19d2:	b2db      	uxtb	r3, r3
    19d4:	4906      	ldr	r1, [pc, #24]	; (19f0 <spi_m_sync_enable+0x2c>)
    19d6:	2257      	movs	r2, #87	; 0x57
    19d8:	0018      	movs	r0, r3
    19da:	4b06      	ldr	r3, [pc, #24]	; (19f4 <spi_m_sync_enable+0x30>)
    19dc:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
    19de:	687b      	ldr	r3, [r7, #4]
    19e0:	3304      	adds	r3, #4
    19e2:	0018      	movs	r0, r3
    19e4:	4b04      	ldr	r3, [pc, #16]	; (19f8 <spi_m_sync_enable+0x34>)
    19e6:	4798      	blx	r3
}
    19e8:	46c0      	nop			; (mov r8, r8)
    19ea:	46bd      	mov	sp, r7
    19ec:	b002      	add	sp, #8
    19ee:	bd80      	pop	{r7, pc}
    19f0:	0000fc3c 	.word	0x0000fc3c
    19f4:	00002841 	.word	0x00002841
    19f8:	00003c2d 	.word	0x00003c2d

000019fc <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    19fc:	b580      	push	{r7, lr}
    19fe:	b088      	sub	sp, #32
    1a00:	af00      	add	r7, sp, #0
    1a02:	60f8      	str	r0, [r7, #12]
    1a04:	60b9      	str	r1, [r7, #8]
    1a06:	1dbb      	adds	r3, r7, #6
    1a08:	801a      	strh	r2, [r3, #0]
	ASSERT(io);
    1a0a:	68fb      	ldr	r3, [r7, #12]
    1a0c:	1e5a      	subs	r2, r3, #1
    1a0e:	4193      	sbcs	r3, r2
    1a10:	b2db      	uxtb	r3, r3
    1a12:	4910      	ldr	r1, [pc, #64]	; (1a54 <_spi_m_sync_io_read+0x58>)
    1a14:	2287      	movs	r2, #135	; 0x87
    1a16:	0018      	movs	r0, r3
    1a18:	4b0f      	ldr	r3, [pc, #60]	; (1a58 <_spi_m_sync_io_read+0x5c>)
    1a1a:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    1a1c:	68fb      	ldr	r3, [r7, #12]
    1a1e:	3b0c      	subs	r3, #12
    1a20:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    1a22:	2310      	movs	r3, #16
    1a24:	18fb      	adds	r3, r7, r3
    1a26:	68ba      	ldr	r2, [r7, #8]
    1a28:	605a      	str	r2, [r3, #4]
	xfer.txbuf = 0;
    1a2a:	2310      	movs	r3, #16
    1a2c:	18fb      	adds	r3, r7, r3
    1a2e:	2200      	movs	r2, #0
    1a30:	601a      	str	r2, [r3, #0]
	xfer.size  = length;
    1a32:	1dbb      	adds	r3, r7, #6
    1a34:	881a      	ldrh	r2, [r3, #0]
    1a36:	2310      	movs	r3, #16
    1a38:	18fb      	adds	r3, r7, r3
    1a3a:	609a      	str	r2, [r3, #8]

	return spi_m_sync_transfer(spi, &xfer);
    1a3c:	2310      	movs	r3, #16
    1a3e:	18fa      	adds	r2, r7, r3
    1a40:	69fb      	ldr	r3, [r7, #28]
    1a42:	0011      	movs	r1, r2
    1a44:	0018      	movs	r0, r3
    1a46:	4b05      	ldr	r3, [pc, #20]	; (1a5c <_spi_m_sync_io_read+0x60>)
    1a48:	4798      	blx	r3
    1a4a:	0003      	movs	r3, r0
}
    1a4c:	0018      	movs	r0, r3
    1a4e:	46bd      	mov	sp, r7
    1a50:	b008      	add	sp, #32
    1a52:	bd80      	pop	{r7, pc}
    1a54:	0000fc3c 	.word	0x0000fc3c
    1a58:	00002841 	.word	0x00002841
    1a5c:	00001ac5 	.word	0x00001ac5

00001a60 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    1a60:	b580      	push	{r7, lr}
    1a62:	b088      	sub	sp, #32
    1a64:	af00      	add	r7, sp, #0
    1a66:	60f8      	str	r0, [r7, #12]
    1a68:	60b9      	str	r1, [r7, #8]
    1a6a:	1dbb      	adds	r3, r7, #6
    1a6c:	801a      	strh	r2, [r3, #0]
	ASSERT(io);
    1a6e:	68fb      	ldr	r3, [r7, #12]
    1a70:	1e5a      	subs	r2, r3, #1
    1a72:	4193      	sbcs	r3, r2
    1a74:	b2db      	uxtb	r3, r3
    1a76:	4910      	ldr	r1, [pc, #64]	; (1ab8 <_spi_m_sync_io_write+0x58>)
    1a78:	22a3      	movs	r2, #163	; 0xa3
    1a7a:	0018      	movs	r0, r3
    1a7c:	4b0f      	ldr	r3, [pc, #60]	; (1abc <_spi_m_sync_io_write+0x5c>)
    1a7e:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    1a80:	68fb      	ldr	r3, [r7, #12]
    1a82:	3b0c      	subs	r3, #12
    1a84:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    1a86:	2310      	movs	r3, #16
    1a88:	18fb      	adds	r3, r7, r3
    1a8a:	2200      	movs	r2, #0
    1a8c:	605a      	str	r2, [r3, #4]
	xfer.txbuf = (uint8_t *)buf;
    1a8e:	2310      	movs	r3, #16
    1a90:	18fb      	adds	r3, r7, r3
    1a92:	68ba      	ldr	r2, [r7, #8]
    1a94:	601a      	str	r2, [r3, #0]
	xfer.size  = length;
    1a96:	1dbb      	adds	r3, r7, #6
    1a98:	881a      	ldrh	r2, [r3, #0]
    1a9a:	2310      	movs	r3, #16
    1a9c:	18fb      	adds	r3, r7, r3
    1a9e:	609a      	str	r2, [r3, #8]

	return spi_m_sync_transfer(spi, &xfer);
    1aa0:	2310      	movs	r3, #16
    1aa2:	18fa      	adds	r2, r7, r3
    1aa4:	69fb      	ldr	r3, [r7, #28]
    1aa6:	0011      	movs	r1, r2
    1aa8:	0018      	movs	r0, r3
    1aaa:	4b05      	ldr	r3, [pc, #20]	; (1ac0 <_spi_m_sync_io_write+0x60>)
    1aac:	4798      	blx	r3
    1aae:	0003      	movs	r3, r0
}
    1ab0:	0018      	movs	r0, r3
    1ab2:	46bd      	mov	sp, r7
    1ab4:	b008      	add	sp, #32
    1ab6:	bd80      	pop	{r7, pc}
    1ab8:	0000fc3c 	.word	0x0000fc3c
    1abc:	00002841 	.word	0x00002841
    1ac0:	00001ac5 	.word	0x00001ac5

00001ac4 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    1ac4:	b580      	push	{r7, lr}
    1ac6:	b086      	sub	sp, #24
    1ac8:	af00      	add	r7, sp, #0
    1aca:	6078      	str	r0, [r7, #4]
    1acc:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    1ace:	687b      	ldr	r3, [r7, #4]
    1ad0:	2b00      	cmp	r3, #0
    1ad2:	d004      	beq.n	1ade <spi_m_sync_transfer+0x1a>
    1ad4:	683b      	ldr	r3, [r7, #0]
    1ad6:	2b00      	cmp	r3, #0
    1ad8:	d001      	beq.n	1ade <spi_m_sync_transfer+0x1a>
    1ada:	2301      	movs	r3, #1
    1adc:	e000      	b.n	1ae0 <spi_m_sync_transfer+0x1c>
    1ade:	2300      	movs	r3, #0
    1ae0:	1c1a      	adds	r2, r3, #0
    1ae2:	2301      	movs	r3, #1
    1ae4:	4013      	ands	r3, r2
    1ae6:	b2db      	uxtb	r3, r3
    1ae8:	4910      	ldr	r1, [pc, #64]	; (1b2c <spi_m_sync_transfer+0x68>)
    1aea:	22b3      	movs	r2, #179	; 0xb3
    1aec:	0018      	movs	r0, r3
    1aee:	4b10      	ldr	r3, [pc, #64]	; (1b30 <spi_m_sync_transfer+0x6c>)
    1af0:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    1af2:	683b      	ldr	r3, [r7, #0]
    1af4:	681a      	ldr	r2, [r3, #0]
    1af6:	230c      	movs	r3, #12
    1af8:	18fb      	adds	r3, r7, r3
    1afa:	601a      	str	r2, [r3, #0]
	msg.rxbuf = p_xfer->rxbuf;
    1afc:	683b      	ldr	r3, [r7, #0]
    1afe:	685a      	ldr	r2, [r3, #4]
    1b00:	230c      	movs	r3, #12
    1b02:	18fb      	adds	r3, r7, r3
    1b04:	605a      	str	r2, [r3, #4]
	msg.size  = p_xfer->size;
    1b06:	683b      	ldr	r3, [r7, #0]
    1b08:	689a      	ldr	r2, [r3, #8]
    1b0a:	230c      	movs	r3, #12
    1b0c:	18fb      	adds	r3, r7, r3
    1b0e:	609a      	str	r2, [r3, #8]
	return _spi_m_sync_trans(&spi->dev, &msg);
    1b10:	687b      	ldr	r3, [r7, #4]
    1b12:	3304      	adds	r3, #4
    1b14:	220c      	movs	r2, #12
    1b16:	18ba      	adds	r2, r7, r2
    1b18:	0011      	movs	r1, r2
    1b1a:	0018      	movs	r0, r3
    1b1c:	4b05      	ldr	r3, [pc, #20]	; (1b34 <spi_m_sync_transfer+0x70>)
    1b1e:	4798      	blx	r3
    1b20:	0003      	movs	r3, r0
}
    1b22:	0018      	movs	r0, r3
    1b24:	46bd      	mov	sp, r7
    1b26:	b006      	add	sp, #24
    1b28:	bd80      	pop	{r7, pc}
    1b2a:	46c0      	nop			; (mov r8, r8)
    1b2c:	0000fc3c 	.word	0x0000fc3c
    1b30:	00002841 	.word	0x00002841
    1b34:	00003de5 	.word	0x00003de5

00001b38 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
    1b38:	b580      	push	{r7, lr}
    1b3a:	b082      	sub	sp, #8
    1b3c:	af00      	add	r7, sp, #0
    1b3e:	6078      	str	r0, [r7, #4]
    1b40:	6039      	str	r1, [r7, #0]
	ASSERT(spi && io);
    1b42:	687b      	ldr	r3, [r7, #4]
    1b44:	2b00      	cmp	r3, #0
    1b46:	d004      	beq.n	1b52 <spi_m_sync_get_io_descriptor+0x1a>
    1b48:	683b      	ldr	r3, [r7, #0]
    1b4a:	2b00      	cmp	r3, #0
    1b4c:	d001      	beq.n	1b52 <spi_m_sync_get_io_descriptor+0x1a>
    1b4e:	2301      	movs	r3, #1
    1b50:	e000      	b.n	1b54 <spi_m_sync_get_io_descriptor+0x1c>
    1b52:	2300      	movs	r3, #0
    1b54:	1c1a      	adds	r2, r3, #0
    1b56:	2301      	movs	r3, #1
    1b58:	4013      	ands	r3, r2
    1b5a:	b2db      	uxtb	r3, r3
    1b5c:	4907      	ldr	r1, [pc, #28]	; (1b7c <spi_m_sync_get_io_descriptor+0x44>)
    1b5e:	22bd      	movs	r2, #189	; 0xbd
    1b60:	0018      	movs	r0, r3
    1b62:	4b07      	ldr	r3, [pc, #28]	; (1b80 <spi_m_sync_get_io_descriptor+0x48>)
    1b64:	4798      	blx	r3
	*io = &spi->io;
    1b66:	687b      	ldr	r3, [r7, #4]
    1b68:	330c      	adds	r3, #12
    1b6a:	001a      	movs	r2, r3
    1b6c:	683b      	ldr	r3, [r7, #0]
    1b6e:	601a      	str	r2, [r3, #0]
	return 0;
    1b70:	2300      	movs	r3, #0
}
    1b72:	0018      	movs	r0, r3
    1b74:	46bd      	mov	sp, r7
    1b76:	b002      	add	sp, #8
    1b78:	bd80      	pop	{r7, pc}
    1b7a:	46c0      	nop			; (mov r8, r8)
    1b7c:	0000fc3c 	.word	0x0000fc3c
    1b80:	00002841 	.word	0x00002841

00001b84 <usart_sync_init>:

/**
 * \brief Initialize usart interface
 */
int32_t usart_sync_init(struct usart_sync_descriptor *const descr, void *const hw, void *const func)
{
    1b84:	b580      	push	{r7, lr}
    1b86:	b086      	sub	sp, #24
    1b88:	af00      	add	r7, sp, #0
    1b8a:	60f8      	str	r0, [r7, #12]
    1b8c:	60b9      	str	r1, [r7, #8]
    1b8e:	607a      	str	r2, [r7, #4]
	int32_t init_status;
	ASSERT(descr && hw);
    1b90:	68fb      	ldr	r3, [r7, #12]
    1b92:	2b00      	cmp	r3, #0
    1b94:	d004      	beq.n	1ba0 <usart_sync_init+0x1c>
    1b96:	68bb      	ldr	r3, [r7, #8]
    1b98:	2b00      	cmp	r3, #0
    1b9a:	d001      	beq.n	1ba0 <usart_sync_init+0x1c>
    1b9c:	2301      	movs	r3, #1
    1b9e:	e000      	b.n	1ba2 <usart_sync_init+0x1e>
    1ba0:	2300      	movs	r3, #0
    1ba2:	1c1a      	adds	r2, r3, #0
    1ba4:	2301      	movs	r3, #1
    1ba6:	4013      	ands	r3, r2
    1ba8:	b2db      	uxtb	r3, r3
    1baa:	490f      	ldr	r1, [pc, #60]	; (1be8 <usart_sync_init+0x64>)
    1bac:	2234      	movs	r2, #52	; 0x34
    1bae:	0018      	movs	r0, r3
    1bb0:	4b0e      	ldr	r3, [pc, #56]	; (1bec <usart_sync_init+0x68>)
    1bb2:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
    1bb4:	68fb      	ldr	r3, [r7, #12]
    1bb6:	3308      	adds	r3, #8
    1bb8:	68ba      	ldr	r2, [r7, #8]
    1bba:	0011      	movs	r1, r2
    1bbc:	0018      	movs	r0, r3
    1bbe:	4b0c      	ldr	r3, [pc, #48]	; (1bf0 <usart_sync_init+0x6c>)
    1bc0:	4798      	blx	r3
    1bc2:	0003      	movs	r3, r0
    1bc4:	617b      	str	r3, [r7, #20]
	if (init_status) {
    1bc6:	697b      	ldr	r3, [r7, #20]
    1bc8:	2b00      	cmp	r3, #0
    1bca:	d001      	beq.n	1bd0 <usart_sync_init+0x4c>
		return init_status;
    1bcc:	697b      	ldr	r3, [r7, #20]
    1bce:	e006      	b.n	1bde <usart_sync_init+0x5a>
	}

	descr->io.read  = usart_sync_read;
    1bd0:	68fb      	ldr	r3, [r7, #12]
    1bd2:	4a08      	ldr	r2, [pc, #32]	; (1bf4 <usart_sync_init+0x70>)
    1bd4:	605a      	str	r2, [r3, #4]
	descr->io.write = usart_sync_write;
    1bd6:	68fb      	ldr	r3, [r7, #12]
    1bd8:	4a07      	ldr	r2, [pc, #28]	; (1bf8 <usart_sync_init+0x74>)
    1bda:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    1bdc:	2300      	movs	r3, #0
}
    1bde:	0018      	movs	r0, r3
    1be0:	46bd      	mov	sp, r7
    1be2:	b006      	add	sp, #24
    1be4:	bd80      	pop	{r7, pc}
    1be6:	46c0      	nop			; (mov r8, r8)
    1be8:	0000fc58 	.word	0x0000fc58
    1bec:	00002841 	.word	0x00002841
    1bf0:	000034a1 	.word	0x000034a1
    1bf4:	00001d0d 	.word	0x00001d0d
    1bf8:	00001c39 	.word	0x00001c39

00001bfc <usart_sync_enable>:

/**
 * \brief Enable usart interface
 */
int32_t usart_sync_enable(struct usart_sync_descriptor *const descr)
{
    1bfc:	b580      	push	{r7, lr}
    1bfe:	b082      	sub	sp, #8
    1c00:	af00      	add	r7, sp, #0
    1c02:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    1c04:	687b      	ldr	r3, [r7, #4]
    1c06:	1e5a      	subs	r2, r3, #1
    1c08:	4193      	sbcs	r3, r2
    1c0a:	b2db      	uxtb	r3, r3
    1c0c:	4907      	ldr	r1, [pc, #28]	; (1c2c <usart_sync_enable+0x30>)
    1c0e:	2253      	movs	r2, #83	; 0x53
    1c10:	0018      	movs	r0, r3
    1c12:	4b07      	ldr	r3, [pc, #28]	; (1c30 <usart_sync_enable+0x34>)
    1c14:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
    1c16:	687b      	ldr	r3, [r7, #4]
    1c18:	3308      	adds	r3, #8
    1c1a:	0018      	movs	r0, r3
    1c1c:	4b05      	ldr	r3, [pc, #20]	; (1c34 <usart_sync_enable+0x38>)
    1c1e:	4798      	blx	r3

	return ERR_NONE;
    1c20:	2300      	movs	r3, #0
}
    1c22:	0018      	movs	r0, r3
    1c24:	46bd      	mov	sp, r7
    1c26:	b002      	add	sp, #8
    1c28:	bd80      	pop	{r7, pc}
    1c2a:	46c0      	nop			; (mov r8, r8)
    1c2c:	0000fc58 	.word	0x0000fc58
    1c30:	00002841 	.word	0x00002841
    1c34:	000034e1 	.word	0x000034e1

00001c38 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    1c38:	b580      	push	{r7, lr}
    1c3a:	b086      	sub	sp, #24
    1c3c:	af00      	add	r7, sp, #0
    1c3e:	60f8      	str	r0, [r7, #12]
    1c40:	60b9      	str	r1, [r7, #8]
    1c42:	1dbb      	adds	r3, r7, #6
    1c44:	801a      	strh	r2, [r3, #0]
	uint32_t                      offset = 0;
    1c46:	2300      	movs	r3, #0
    1c48:	617b      	str	r3, [r7, #20]
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);
    1c4a:	68fb      	ldr	r3, [r7, #12]
    1c4c:	613b      	str	r3, [r7, #16]

	ASSERT(io_descr && buf && length);
    1c4e:	68fb      	ldr	r3, [r7, #12]
    1c50:	2b00      	cmp	r3, #0
    1c52:	d008      	beq.n	1c66 <usart_sync_write+0x2e>
    1c54:	68bb      	ldr	r3, [r7, #8]
    1c56:	2b00      	cmp	r3, #0
    1c58:	d005      	beq.n	1c66 <usart_sync_write+0x2e>
    1c5a:	1dbb      	adds	r3, r7, #6
    1c5c:	881b      	ldrh	r3, [r3, #0]
    1c5e:	2b00      	cmp	r3, #0
    1c60:	d001      	beq.n	1c66 <usart_sync_write+0x2e>
    1c62:	2301      	movs	r3, #1
    1c64:	e000      	b.n	1c68 <usart_sync_write+0x30>
    1c66:	2300      	movs	r3, #0
    1c68:	1c1a      	adds	r2, r3, #0
    1c6a:	2301      	movs	r3, #1
    1c6c:	4013      	ands	r3, r2
    1c6e:	b2db      	uxtb	r3, r3
    1c70:	4921      	ldr	r1, [pc, #132]	; (1cf8 <usart_sync_write+0xc0>)
    1c72:	22f1      	movs	r2, #241	; 0xf1
    1c74:	0018      	movs	r0, r3
    1c76:	4b21      	ldr	r3, [pc, #132]	; (1cfc <usart_sync_write+0xc4>)
    1c78:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
    1c7a:	46c0      	nop			; (mov r8, r8)
    1c7c:	693b      	ldr	r3, [r7, #16]
    1c7e:	3308      	adds	r3, #8
    1c80:	0018      	movs	r0, r3
    1c82:	4b1f      	ldr	r3, [pc, #124]	; (1d00 <usart_sync_write+0xc8>)
    1c84:	4798      	blx	r3
    1c86:	0003      	movs	r3, r0
    1c88:	001a      	movs	r2, r3
    1c8a:	2301      	movs	r3, #1
    1c8c:	4053      	eors	r3, r2
    1c8e:	b2db      	uxtb	r3, r3
    1c90:	2b00      	cmp	r3, #0
    1c92:	d1f3      	bne.n	1c7c <usart_sync_write+0x44>
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
    1c94:	693b      	ldr	r3, [r7, #16]
    1c96:	3308      	adds	r3, #8
    1c98:	0018      	movs	r0, r3
    1c9a:	68ba      	ldr	r2, [r7, #8]
    1c9c:	697b      	ldr	r3, [r7, #20]
    1c9e:	18d3      	adds	r3, r2, r3
    1ca0:	781b      	ldrb	r3, [r3, #0]
    1ca2:	0019      	movs	r1, r3
    1ca4:	4b17      	ldr	r3, [pc, #92]	; (1d04 <usart_sync_write+0xcc>)
    1ca6:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
    1ca8:	46c0      	nop			; (mov r8, r8)
    1caa:	693b      	ldr	r3, [r7, #16]
    1cac:	3308      	adds	r3, #8
    1cae:	0018      	movs	r0, r3
    1cb0:	4b13      	ldr	r3, [pc, #76]	; (1d00 <usart_sync_write+0xc8>)
    1cb2:	4798      	blx	r3
    1cb4:	0003      	movs	r3, r0
    1cb6:	001a      	movs	r2, r3
    1cb8:	2301      	movs	r3, #1
    1cba:	4053      	eors	r3, r2
    1cbc:	b2db      	uxtb	r3, r3
    1cbe:	2b00      	cmp	r3, #0
    1cc0:	d1f3      	bne.n	1caa <usart_sync_write+0x72>
			;
	} while (++offset < length);
    1cc2:	697b      	ldr	r3, [r7, #20]
    1cc4:	3301      	adds	r3, #1
    1cc6:	617b      	str	r3, [r7, #20]
    1cc8:	1dbb      	adds	r3, r7, #6
    1cca:	881b      	ldrh	r3, [r3, #0]
    1ccc:	697a      	ldr	r2, [r7, #20]
    1cce:	429a      	cmp	r2, r3
    1cd0:	d3e0      	bcc.n	1c94 <usart_sync_write+0x5c>
	while (!_usart_sync_is_transmit_done(&descr->device))
    1cd2:	46c0      	nop			; (mov r8, r8)
    1cd4:	693b      	ldr	r3, [r7, #16]
    1cd6:	3308      	adds	r3, #8
    1cd8:	0018      	movs	r0, r3
    1cda:	4b0b      	ldr	r3, [pc, #44]	; (1d08 <usart_sync_write+0xd0>)
    1cdc:	4798      	blx	r3
    1cde:	0003      	movs	r3, r0
    1ce0:	001a      	movs	r2, r3
    1ce2:	2301      	movs	r3, #1
    1ce4:	4053      	eors	r3, r2
    1ce6:	b2db      	uxtb	r3, r3
    1ce8:	2b00      	cmp	r3, #0
    1cea:	d1f3      	bne.n	1cd4 <usart_sync_write+0x9c>
		;
	return (int32_t)offset;
    1cec:	697b      	ldr	r3, [r7, #20]
}
    1cee:	0018      	movs	r0, r3
    1cf0:	46bd      	mov	sp, r7
    1cf2:	b006      	add	sp, #24
    1cf4:	bd80      	pop	{r7, pc}
    1cf6:	46c0      	nop			; (mov r8, r8)
    1cf8:	0000fc58 	.word	0x0000fc58
    1cfc:	00002841 	.word	0x00002841
    1d00:	00003551 	.word	0x00003551
    1d04:	00003501 	.word	0x00003501
    1d08:	00003571 	.word	0x00003571

00001d0c <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    1d0c:	b590      	push	{r4, r7, lr}
    1d0e:	b087      	sub	sp, #28
    1d10:	af00      	add	r7, sp, #0
    1d12:	60f8      	str	r0, [r7, #12]
    1d14:	60b9      	str	r1, [r7, #8]
    1d16:	1dbb      	adds	r3, r7, #6
    1d18:	801a      	strh	r2, [r3, #0]
	uint32_t                      offset = 0;
    1d1a:	2300      	movs	r3, #0
    1d1c:	617b      	str	r3, [r7, #20]
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);
    1d1e:	68fb      	ldr	r3, [r7, #12]
    1d20:	613b      	str	r3, [r7, #16]

	ASSERT(io_descr && buf && length);
    1d22:	68fb      	ldr	r3, [r7, #12]
    1d24:	2b00      	cmp	r3, #0
    1d26:	d008      	beq.n	1d3a <usart_sync_read+0x2e>
    1d28:	68bb      	ldr	r3, [r7, #8]
    1d2a:	2b00      	cmp	r3, #0
    1d2c:	d005      	beq.n	1d3a <usart_sync_read+0x2e>
    1d2e:	1dbb      	adds	r3, r7, #6
    1d30:	881b      	ldrh	r3, [r3, #0]
    1d32:	2b00      	cmp	r3, #0
    1d34:	d001      	beq.n	1d3a <usart_sync_read+0x2e>
    1d36:	2301      	movs	r3, #1
    1d38:	e000      	b.n	1d3c <usart_sync_read+0x30>
    1d3a:	2300      	movs	r3, #0
    1d3c:	1c1a      	adds	r2, r3, #0
    1d3e:	2301      	movs	r3, #1
    1d40:	4013      	ands	r3, r2
    1d42:	b2d8      	uxtb	r0, r3
    1d44:	2386      	movs	r3, #134	; 0x86
    1d46:	005a      	lsls	r2, r3, #1
    1d48:	4b13      	ldr	r3, [pc, #76]	; (1d98 <usart_sync_read+0x8c>)
    1d4a:	0019      	movs	r1, r3
    1d4c:	4b13      	ldr	r3, [pc, #76]	; (1d9c <usart_sync_read+0x90>)
    1d4e:	4798      	blx	r3
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
    1d50:	46c0      	nop			; (mov r8, r8)
    1d52:	693b      	ldr	r3, [r7, #16]
    1d54:	3308      	adds	r3, #8
    1d56:	0018      	movs	r0, r3
    1d58:	4b11      	ldr	r3, [pc, #68]	; (1da0 <usart_sync_read+0x94>)
    1d5a:	4798      	blx	r3
    1d5c:	0003      	movs	r3, r0
    1d5e:	001a      	movs	r2, r3
    1d60:	2301      	movs	r3, #1
    1d62:	4053      	eors	r3, r2
    1d64:	b2db      	uxtb	r3, r3
    1d66:	2b00      	cmp	r3, #0
    1d68:	d1f3      	bne.n	1d52 <usart_sync_read+0x46>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
    1d6a:	68ba      	ldr	r2, [r7, #8]
    1d6c:	697b      	ldr	r3, [r7, #20]
    1d6e:	18d4      	adds	r4, r2, r3
    1d70:	693b      	ldr	r3, [r7, #16]
    1d72:	3308      	adds	r3, #8
    1d74:	0018      	movs	r0, r3
    1d76:	4b0b      	ldr	r3, [pc, #44]	; (1da4 <usart_sync_read+0x98>)
    1d78:	4798      	blx	r3
    1d7a:	0003      	movs	r3, r0
    1d7c:	7023      	strb	r3, [r4, #0]
	} while (++offset < length);
    1d7e:	697b      	ldr	r3, [r7, #20]
    1d80:	3301      	adds	r3, #1
    1d82:	617b      	str	r3, [r7, #20]
    1d84:	1dbb      	adds	r3, r7, #6
    1d86:	881b      	ldrh	r3, [r3, #0]
    1d88:	697a      	ldr	r2, [r7, #20]
    1d8a:	429a      	cmp	r2, r3
    1d8c:	d3e0      	bcc.n	1d50 <usart_sync_read+0x44>

	return (int32_t)offset;
    1d8e:	697b      	ldr	r3, [r7, #20]
}
    1d90:	0018      	movs	r0, r3
    1d92:	46bd      	mov	sp, r7
    1d94:	b007      	add	sp, #28
    1d96:	bd90      	pop	{r4, r7, pc}
    1d98:	0000fc58 	.word	0x0000fc58
    1d9c:	00002841 	.word	0x00002841
    1da0:	00003591 	.word	0x00003591
    1da4:	0000352d 	.word	0x0000352d

00001da8 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    1da8:	b580      	push	{r7, lr}
    1daa:	b084      	sub	sp, #16
    1dac:	af00      	add	r7, sp, #0
    1dae:	0002      	movs	r2, r0
    1db0:	1dfb      	adds	r3, r7, #7
    1db2:	701a      	strb	r2, [r3, #0]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    1db4:	230f      	movs	r3, #15
    1db6:	18fb      	adds	r3, r7, r3
    1db8:	2200      	movs	r2, #0
    1dba:	701a      	strb	r2, [r3, #0]
    1dbc:	e038      	b.n	1e30 <_usb_d_find_ep+0x88>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    1dbe:	230f      	movs	r3, #15
    1dc0:	18fb      	adds	r3, r7, r3
    1dc2:	781b      	ldrb	r3, [r3, #0]
    1dc4:	b25b      	sxtb	r3, r3
    1dc6:	4a20      	ldr	r2, [pc, #128]	; (1e48 <_usb_d_find_ep+0xa0>)
    1dc8:	015b      	lsls	r3, r3, #5
    1dca:	18d3      	adds	r3, r2, r3
    1dcc:	3301      	adds	r3, #1
    1dce:	781b      	ldrb	r3, [r3, #0]
    1dd0:	1dfa      	adds	r2, r7, #7
    1dd2:	7812      	ldrb	r2, [r2, #0]
    1dd4:	429a      	cmp	r2, r3
    1dd6:	d104      	bne.n	1de2 <_usb_d_find_ep+0x3a>
			return i;
    1dd8:	230f      	movs	r3, #15
    1dda:	18fb      	adds	r3, r7, r3
    1ddc:	781b      	ldrb	r3, [r3, #0]
    1dde:	b25b      	sxtb	r3, r3
    1de0:	e02e      	b.n	1e40 <_usb_d_find_ep+0x98>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    1de2:	230f      	movs	r3, #15
    1de4:	18fb      	adds	r3, r7, r3
    1de6:	2200      	movs	r2, #0
    1de8:	569a      	ldrsb	r2, [r3, r2]
    1dea:	4b17      	ldr	r3, [pc, #92]	; (1e48 <_usb_d_find_ep+0xa0>)
    1dec:	0152      	lsls	r2, r2, #5
    1dee:	5cd3      	ldrb	r3, [r2, r3]
    1df0:	2b00      	cmp	r3, #0
    1df2:	d113      	bne.n	1e1c <_usb_d_find_ep+0x74>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    1df4:	1dfb      	adds	r3, r7, #7
    1df6:	781b      	ldrb	r3, [r3, #0]
    1df8:	220f      	movs	r2, #15
    1dfa:	4013      	ands	r3, r2
    1dfc:	220f      	movs	r2, #15
    1dfe:	18ba      	adds	r2, r7, r2
    1e00:	7812      	ldrb	r2, [r2, #0]
    1e02:	b252      	sxtb	r2, r2
    1e04:	4910      	ldr	r1, [pc, #64]	; (1e48 <_usb_d_find_ep+0xa0>)
    1e06:	0152      	lsls	r2, r2, #5
    1e08:	188a      	adds	r2, r1, r2
    1e0a:	3201      	adds	r2, #1
    1e0c:	7812      	ldrb	r2, [r2, #0]
    1e0e:	4293      	cmp	r3, r2
    1e10:	d104      	bne.n	1e1c <_usb_d_find_ep+0x74>
			return i;
    1e12:	230f      	movs	r3, #15
    1e14:	18fb      	adds	r3, r7, r3
    1e16:	781b      	ldrb	r3, [r3, #0]
    1e18:	b25b      	sxtb	r3, r3
    1e1a:	e011      	b.n	1e40 <_usb_d_find_ep+0x98>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    1e1c:	230f      	movs	r3, #15
    1e1e:	18fb      	adds	r3, r7, r3
    1e20:	781b      	ldrb	r3, [r3, #0]
    1e22:	b25b      	sxtb	r3, r3
    1e24:	b2db      	uxtb	r3, r3
    1e26:	3301      	adds	r3, #1
    1e28:	b2da      	uxtb	r2, r3
    1e2a:	230f      	movs	r3, #15
    1e2c:	18fb      	adds	r3, r7, r3
    1e2e:	701a      	strb	r2, [r3, #0]
    1e30:	230f      	movs	r3, #15
    1e32:	18fb      	adds	r3, r7, r3
    1e34:	781b      	ldrb	r3, [r3, #0]
    1e36:	b25b      	sxtb	r3, r3
    1e38:	2b07      	cmp	r3, #7
    1e3a:	ddc0      	ble.n	1dbe <_usb_d_find_ep+0x16>
		}
	}
	return -1;
    1e3c:	2301      	movs	r3, #1
    1e3e:	425b      	negs	r3, r3
}
    1e40:	0018      	movs	r0, r3
    1e42:	46bd      	mov	sp, r7
    1e44:	b004      	add	sp, #16
    1e46:	bd80      	pop	{r7, pc}
    1e48:	20000a7c 	.word	0x20000a7c

00001e4c <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    1e4c:	b580      	push	{r7, lr}
    1e4e:	b088      	sub	sp, #32
    1e50:	af00      	add	r7, sp, #0
    1e52:	60ba      	str	r2, [r7, #8]
    1e54:	607b      	str	r3, [r7, #4]
    1e56:	230f      	movs	r3, #15
    1e58:	18fb      	adds	r3, r7, r3
    1e5a:	1c02      	adds	r2, r0, #0
    1e5c:	701a      	strb	r2, [r3, #0]
    1e5e:	230e      	movs	r3, #14
    1e60:	18fb      	adds	r3, r7, r3
    1e62:	1c0a      	adds	r2, r1, #0
    1e64:	701a      	strb	r2, [r3, #0]
	struct usb_d_transfer trans
    1e66:	2314      	movs	r3, #20
    1e68:	18fb      	adds	r3, r7, r3
    1e6a:	68ba      	ldr	r2, [r7, #8]
    1e6c:	601a      	str	r2, [r3, #0]
    1e6e:	2314      	movs	r3, #20
    1e70:	18fb      	adds	r3, r7, r3
    1e72:	687a      	ldr	r2, [r7, #4]
    1e74:	605a      	str	r2, [r3, #4]
    1e76:	230e      	movs	r3, #14
    1e78:	18fb      	adds	r3, r7, r3
    1e7a:	781b      	ldrb	r3, [r3, #0]
    1e7c:	2b00      	cmp	r3, #0
    1e7e:	d007      	beq.n	1e90 <_usb_d_trans+0x44>
    1e80:	230f      	movs	r3, #15
    1e82:	18fb      	adds	r3, r7, r3
    1e84:	781b      	ldrb	r3, [r3, #0]
    1e86:	2280      	movs	r2, #128	; 0x80
    1e88:	4252      	negs	r2, r2
    1e8a:	4313      	orrs	r3, r2
    1e8c:	b2db      	uxtb	r3, r3
    1e8e:	e005      	b.n	1e9c <_usb_d_trans+0x50>
    1e90:	230f      	movs	r3, #15
    1e92:	18fb      	adds	r3, r7, r3
    1e94:	781b      	ldrb	r3, [r3, #0]
    1e96:	220f      	movs	r2, #15
    1e98:	4013      	ands	r3, r2
    1e9a:	b2db      	uxtb	r3, r3
    1e9c:	2214      	movs	r2, #20
    1e9e:	18ba      	adds	r2, r7, r2
    1ea0:	7213      	strb	r3, [r2, #8]
    1ea2:	2314      	movs	r3, #20
    1ea4:	18fb      	adds	r3, r7, r3
    1ea6:	2228      	movs	r2, #40	; 0x28
    1ea8:	18ba      	adds	r2, r7, r2
    1eaa:	7812      	ldrb	r2, [r2, #0]
    1eac:	725a      	strb	r2, [r3, #9]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    1eae:	2314      	movs	r3, #20
    1eb0:	18fb      	adds	r3, r7, r3
    1eb2:	0018      	movs	r0, r3
    1eb4:	4b03      	ldr	r3, [pc, #12]	; (1ec4 <_usb_d_trans+0x78>)
    1eb6:	4798      	blx	r3
    1eb8:	0003      	movs	r3, r0
}
    1eba:	0018      	movs	r0, r3
    1ebc:	46bd      	mov	sp, r7
    1ebe:	b008      	add	sp, #32
    1ec0:	bd80      	pop	{r7, pc}
    1ec2:	46c0      	nop			; (mov r8, r8)
    1ec4:	00007079 	.word	0x00007079

00001ec8 <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    1ec8:	b580      	push	{r7, lr}
    1eca:	b084      	sub	sp, #16
    1ecc:	af00      	add	r7, sp, #0
    1ece:	60f8      	str	r0, [r7, #12]
    1ed0:	60b9      	str	r1, [r7, #8]
    1ed2:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    1ed4:	2300      	movs	r3, #0
}
    1ed6:	0018      	movs	r0, r3
    1ed8:	46bd      	mov	sp, r7
    1eda:	b004      	add	sp, #16
    1edc:	bd80      	pop	{r7, pc}
	...

00001ee0 <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    1ee0:	b590      	push	{r4, r7, lr}
    1ee2:	b087      	sub	sp, #28
    1ee4:	af00      	add	r7, sp, #0
    1ee6:	0002      	movs	r2, r0
    1ee8:	1dfb      	adds	r3, r7, #7
    1eea:	701a      	strb	r2, [r3, #0]
	int8_t           ep_index = _usb_d_find_ep(ep);
    1eec:	2317      	movs	r3, #23
    1eee:	18fc      	adds	r4, r7, r3
    1ef0:	1dfb      	adds	r3, r7, #7
    1ef2:	781b      	ldrb	r3, [r3, #0]
    1ef4:	0018      	movs	r0, r3
    1ef6:	4b33      	ldr	r3, [pc, #204]	; (1fc4 <usb_d_cb_trans_setup+0xe4>)
    1ef8:	4798      	blx	r3
    1efa:	0003      	movs	r3, r0
    1efc:	7023      	strb	r3, [r4, #0]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    1efe:	2317      	movs	r3, #23
    1f00:	18fb      	adds	r3, r7, r3
    1f02:	781b      	ldrb	r3, [r3, #0]
    1f04:	b25b      	sxtb	r3, r3
    1f06:	015a      	lsls	r2, r3, #5
    1f08:	4b2f      	ldr	r3, [pc, #188]	; (1fc8 <usb_d_cb_trans_setup+0xe8>)
    1f0a:	18d3      	adds	r3, r2, r3
    1f0c:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    1f0e:	693b      	ldr	r3, [r7, #16]
    1f10:	330c      	adds	r3, #12
    1f12:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    1f14:	68fa      	ldr	r2, [r7, #12]
    1f16:	1dfb      	adds	r3, r7, #7
    1f18:	781b      	ldrb	r3, [r3, #0]
    1f1a:	0011      	movs	r1, r2
    1f1c:	0018      	movs	r0, r3
    1f1e:	4b2b      	ldr	r3, [pc, #172]	; (1fcc <usb_d_cb_trans_setup+0xec>)
    1f20:	4798      	blx	r3
    1f22:	0002      	movs	r2, r0
    1f24:	230b      	movs	r3, #11
    1f26:	18fb      	adds	r3, r7, r3
    1f28:	701a      	strb	r2, [r3, #0]
	if (n != 8) {
    1f2a:	230b      	movs	r3, #11
    1f2c:	18fb      	adds	r3, r7, r3
    1f2e:	781b      	ldrb	r3, [r3, #0]
    1f30:	2b08      	cmp	r3, #8
    1f32:	d010      	beq.n	1f56 <usb_d_cb_trans_setup+0x76>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1f34:	1dfb      	adds	r3, r7, #7
    1f36:	781b      	ldrb	r3, [r3, #0]
    1f38:	2101      	movs	r1, #1
    1f3a:	0018      	movs	r0, r3
    1f3c:	4b24      	ldr	r3, [pc, #144]	; (1fd0 <usb_d_cb_trans_setup+0xf0>)
    1f3e:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    1f40:	1dfb      	adds	r3, r7, #7
    1f42:	781b      	ldrb	r3, [r3, #0]
    1f44:	2280      	movs	r2, #128	; 0x80
    1f46:	4252      	negs	r2, r2
    1f48:	4313      	orrs	r3, r2
    1f4a:	b2db      	uxtb	r3, r3
    1f4c:	2101      	movs	r1, #1
    1f4e:	0018      	movs	r0, r3
    1f50:	4b1f      	ldr	r3, [pc, #124]	; (1fd0 <usb_d_cb_trans_setup+0xf0>)
    1f52:	4798      	blx	r3
		return;
    1f54:	e033      	b.n	1fbe <usb_d_cb_trans_setup+0xde>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1f56:	1dfb      	adds	r3, r7, #7
    1f58:	781b      	ldrb	r3, [r3, #0]
    1f5a:	2100      	movs	r1, #0
    1f5c:	0018      	movs	r0, r3
    1f5e:	4b1c      	ldr	r3, [pc, #112]	; (1fd0 <usb_d_cb_trans_setup+0xf0>)
    1f60:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    1f62:	1dfb      	adds	r3, r7, #7
    1f64:	781b      	ldrb	r3, [r3, #0]
    1f66:	2280      	movs	r2, #128	; 0x80
    1f68:	4252      	negs	r2, r2
    1f6a:	4313      	orrs	r3, r2
    1f6c:	b2db      	uxtb	r3, r3
    1f6e:	2100      	movs	r1, #0
    1f70:	0018      	movs	r0, r3
    1f72:	4b17      	ldr	r3, [pc, #92]	; (1fd0 <usb_d_cb_trans_setup+0xf0>)
    1f74:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    1f76:	693b      	ldr	r3, [r7, #16]
    1f78:	2201      	movs	r2, #1
    1f7a:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    1f7c:	693b      	ldr	r3, [r7, #16]
    1f7e:	695b      	ldr	r3, [r3, #20]
    1f80:	68f9      	ldr	r1, [r7, #12]
    1f82:	1dfa      	adds	r2, r7, #7
    1f84:	7812      	ldrb	r2, [r2, #0]
    1f86:	0010      	movs	r0, r2
    1f88:	4798      	blx	r3
    1f8a:	0003      	movs	r3, r0
    1f8c:	001a      	movs	r2, r3
    1f8e:	2301      	movs	r3, #1
    1f90:	4053      	eors	r3, r2
    1f92:	b2db      	uxtb	r3, r3
    1f94:	2b00      	cmp	r3, #0
    1f96:	d012      	beq.n	1fbe <usb_d_cb_trans_setup+0xde>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    1f98:	693b      	ldr	r3, [r7, #16]
    1f9a:	2205      	movs	r2, #5
    1f9c:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1f9e:	1dfb      	adds	r3, r7, #7
    1fa0:	781b      	ldrb	r3, [r3, #0]
    1fa2:	2101      	movs	r1, #1
    1fa4:	0018      	movs	r0, r3
    1fa6:	4b0a      	ldr	r3, [pc, #40]	; (1fd0 <usb_d_cb_trans_setup+0xf0>)
    1fa8:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    1faa:	1dfb      	adds	r3, r7, #7
    1fac:	781b      	ldrb	r3, [r3, #0]
    1fae:	2280      	movs	r2, #128	; 0x80
    1fb0:	4252      	negs	r2, r2
    1fb2:	4313      	orrs	r3, r2
    1fb4:	b2db      	uxtb	r3, r3
    1fb6:	2101      	movs	r1, #1
    1fb8:	0018      	movs	r0, r3
    1fba:	4b05      	ldr	r3, [pc, #20]	; (1fd0 <usb_d_cb_trans_setup+0xf0>)
    1fbc:	4798      	blx	r3
	}
}
    1fbe:	46bd      	mov	sp, r7
    1fc0:	b007      	add	sp, #28
    1fc2:	bd90      	pop	{r4, r7, pc}
    1fc4:	00001da9 	.word	0x00001da9
    1fc8:	20000a7c 	.word	0x20000a7c
    1fcc:	00006fa9 	.word	0x00006fa9
    1fd0:	00006dc5 	.word	0x00006dc5

00001fd4 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    1fd4:	b590      	push	{r4, r7, lr}
    1fd6:	b085      	sub	sp, #20
    1fd8:	af00      	add	r7, sp, #0
    1fda:	0002      	movs	r2, r0
    1fdc:	6039      	str	r1, [r7, #0]
    1fde:	1dfb      	adds	r3, r7, #7
    1fe0:	701a      	strb	r2, [r3, #0]
	int8_t           ep_index = _usb_d_find_ep(ep);
    1fe2:	230f      	movs	r3, #15
    1fe4:	18fc      	adds	r4, r7, r3
    1fe6:	1dfb      	adds	r3, r7, #7
    1fe8:	781b      	ldrb	r3, [r3, #0]
    1fea:	0018      	movs	r0, r3
    1fec:	4b0e      	ldr	r3, [pc, #56]	; (2028 <STACK_SIZE+0x28>)
    1fee:	4798      	blx	r3
    1ff0:	0003      	movs	r3, r0
    1ff2:	7023      	strb	r3, [r4, #0]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    1ff4:	230f      	movs	r3, #15
    1ff6:	18fb      	adds	r3, r7, r3
    1ff8:	781b      	ldrb	r3, [r3, #0]
    1ffa:	b25b      	sxtb	r3, r3
    1ffc:	015a      	lsls	r2, r3, #5
    1ffe:	4b0b      	ldr	r3, [pc, #44]	; (202c <STACK_SIZE+0x2c>)
    2000:	18d3      	adds	r3, r2, r3
    2002:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    2004:	68bb      	ldr	r3, [r7, #8]
    2006:	789b      	ldrb	r3, [r3, #2]
    2008:	2b03      	cmp	r3, #3
    200a:	d108      	bne.n	201e <STACK_SIZE+0x1e>
		return ept->callbacks.more(ep, transfered);
    200c:	68bb      	ldr	r3, [r7, #8]
    200e:	699b      	ldr	r3, [r3, #24]
    2010:	6839      	ldr	r1, [r7, #0]
    2012:	1dfa      	adds	r2, r7, #7
    2014:	7812      	ldrb	r2, [r2, #0]
    2016:	0010      	movs	r0, r2
    2018:	4798      	blx	r3
    201a:	0003      	movs	r3, r0
    201c:	e000      	b.n	2020 <STACK_SIZE+0x20>
	}
	return false;
    201e:	2300      	movs	r3, #0
}
    2020:	0018      	movs	r0, r3
    2022:	46bd      	mov	sp, r7
    2024:	b005      	add	sp, #20
    2026:	bd90      	pop	{r4, r7, pc}
    2028:	00001da9 	.word	0x00001da9
    202c:	20000a7c 	.word	0x20000a7c

00002030 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    2030:	b590      	push	{r4, r7, lr}
    2032:	b087      	sub	sp, #28
    2034:	af02      	add	r7, sp, #8
    2036:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    2038:	230f      	movs	r3, #15
    203a:	18fb      	adds	r3, r7, r3
    203c:	687a      	ldr	r2, [r7, #4]
    203e:	7892      	ldrb	r2, [r2, #2]
    2040:	701a      	strb	r2, [r3, #0]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    2042:	687b      	ldr	r3, [r7, #4]
    2044:	7b1b      	ldrb	r3, [r3, #12]
    2046:	001a      	movs	r2, r3
    2048:	2380      	movs	r3, #128	; 0x80
    204a:	401a      	ands	r2, r3
    204c:	230e      	movs	r3, #14
    204e:	18fb      	adds	r3, r7, r3
    2050:	1e51      	subs	r1, r2, #1
    2052:	418a      	sbcs	r2, r1
    2054:	701a      	strb	r2, [r3, #0]

	if (state == USB_EP_S_X_DATA) {
    2056:	230f      	movs	r3, #15
    2058:	18fb      	adds	r3, r7, r3
    205a:	781b      	ldrb	r3, [r3, #0]
    205c:	2b03      	cmp	r3, #3
    205e:	d142      	bne.n	20e6 <usb_d_ctrl_trans_done+0xb6>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    2060:	687b      	ldr	r3, [r7, #4]
    2062:	69db      	ldr	r3, [r3, #28]
    2064:	687a      	ldr	r2, [r7, #4]
    2066:	7850      	ldrb	r0, [r2, #1]
    2068:	687a      	ldr	r2, [r7, #4]
    206a:	320c      	adds	r2, #12
    206c:	210d      	movs	r1, #13
    206e:	187c      	adds	r4, r7, r1
    2070:	2101      	movs	r1, #1
    2072:	4798      	blx	r3
    2074:	0003      	movs	r3, r0
    2076:	7023      	strb	r3, [r4, #0]
		if (err) {
    2078:	230d      	movs	r3, #13
    207a:	18fb      	adds	r3, r7, r3
    207c:	781b      	ldrb	r3, [r3, #0]
    207e:	2b00      	cmp	r3, #0
    2080:	d018      	beq.n	20b4 <usb_d_ctrl_trans_done+0x84>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    2082:	687b      	ldr	r3, [r7, #4]
    2084:	2205      	movs	r2, #5
    2086:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    2088:	687b      	ldr	r3, [r7, #4]
    208a:	2202      	movs	r2, #2
    208c:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    208e:	230e      	movs	r3, #14
    2090:	18fb      	adds	r3, r7, r3
    2092:	781b      	ldrb	r3, [r3, #0]
    2094:	2b00      	cmp	r3, #0
    2096:	d002      	beq.n	209e <usb_d_ctrl_trans_done+0x6e>
    2098:	687b      	ldr	r3, [r7, #4]
    209a:	785b      	ldrb	r3, [r3, #1]
    209c:	e005      	b.n	20aa <usb_d_ctrl_trans_done+0x7a>
    209e:	687b      	ldr	r3, [r7, #4]
    20a0:	785b      	ldrb	r3, [r3, #1]
    20a2:	2280      	movs	r2, #128	; 0x80
    20a4:	4252      	negs	r2, r2
    20a6:	4313      	orrs	r3, r2
    20a8:	b2db      	uxtb	r3, r3
    20aa:	2101      	movs	r1, #1
    20ac:	0018      	movs	r0, r3
    20ae:	4b15      	ldr	r3, [pc, #84]	; (2104 <usb_d_ctrl_trans_done+0xd4>)
    20b0:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    20b2:	e023      	b.n	20fc <usb_d_ctrl_trans_done+0xcc>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    20b4:	687b      	ldr	r3, [r7, #4]
    20b6:	2204      	movs	r2, #4
    20b8:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    20ba:	687b      	ldr	r3, [r7, #4]
    20bc:	7858      	ldrb	r0, [r3, #1]
    20be:	230e      	movs	r3, #14
    20c0:	18fb      	adds	r3, r7, r3
    20c2:	781b      	ldrb	r3, [r3, #0]
    20c4:	1e5a      	subs	r2, r3, #1
    20c6:	4193      	sbcs	r3, r2
    20c8:	b2db      	uxtb	r3, r3
    20ca:	2201      	movs	r2, #1
    20cc:	4053      	eors	r3, r2
    20ce:	b2db      	uxtb	r3, r3
    20d0:	1c1a      	adds	r2, r3, #0
    20d2:	2301      	movs	r3, #1
    20d4:	4013      	ands	r3, r2
    20d6:	b2d9      	uxtb	r1, r3
    20d8:	2301      	movs	r3, #1
    20da:	9300      	str	r3, [sp, #0]
    20dc:	2300      	movs	r3, #0
    20de:	2200      	movs	r2, #0
    20e0:	4c09      	ldr	r4, [pc, #36]	; (2108 <usb_d_ctrl_trans_done+0xd8>)
    20e2:	47a0      	blx	r4
}
    20e4:	e00a      	b.n	20fc <usb_d_ctrl_trans_done+0xcc>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    20e6:	687b      	ldr	r3, [r7, #4]
    20e8:	69db      	ldr	r3, [r3, #28]
    20ea:	687a      	ldr	r2, [r7, #4]
    20ec:	7850      	ldrb	r0, [r2, #1]
    20ee:	687a      	ldr	r2, [r7, #4]
    20f0:	320c      	adds	r2, #12
    20f2:	2100      	movs	r1, #0
    20f4:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    20f6:	687b      	ldr	r3, [r7, #4]
    20f8:	2202      	movs	r2, #2
    20fa:	709a      	strb	r2, [r3, #2]
}
    20fc:	46c0      	nop			; (mov r8, r8)
    20fe:	46bd      	mov	sp, r7
    2100:	b005      	add	sp, #20
    2102:	bd90      	pop	{r4, r7, pc}
    2104:	00006dc5 	.word	0x00006dc5
    2108:	00001e4d 	.word	0x00001e4d

0000210c <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    210c:	b590      	push	{r4, r7, lr}
    210e:	b087      	sub	sp, #28
    2110:	af00      	add	r7, sp, #0
    2112:	60b9      	str	r1, [r7, #8]
    2114:	607a      	str	r2, [r7, #4]
    2116:	230f      	movs	r3, #15
    2118:	18fb      	adds	r3, r7, r3
    211a:	1c02      	adds	r2, r0, #0
    211c:	701a      	strb	r2, [r3, #0]
	int8_t           ep_index = _usb_d_find_ep(ep);
    211e:	2317      	movs	r3, #23
    2120:	18fc      	adds	r4, r7, r3
    2122:	230f      	movs	r3, #15
    2124:	18fb      	adds	r3, r7, r3
    2126:	781b      	ldrb	r3, [r3, #0]
    2128:	0018      	movs	r0, r3
    212a:	4b33      	ldr	r3, [pc, #204]	; (21f8 <_usb_d_cb_trans_done+0xec>)
    212c:	4798      	blx	r3
    212e:	0003      	movs	r3, r0
    2130:	7023      	strb	r3, [r4, #0]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2132:	2317      	movs	r3, #23
    2134:	18fb      	adds	r3, r7, r3
    2136:	781b      	ldrb	r3, [r3, #0]
    2138:	b25b      	sxtb	r3, r3
    213a:	015a      	lsls	r2, r3, #5
    213c:	4b2f      	ldr	r3, [pc, #188]	; (21fc <_usb_d_cb_trans_done+0xf0>)
    213e:	18d3      	adds	r3, r2, r3
    2140:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    2142:	68bb      	ldr	r3, [r7, #8]
    2144:	2b00      	cmp	r3, #0
    2146:	d10f      	bne.n	2168 <_usb_d_cb_trans_done+0x5c>
		ept->xfer.hdr.status = USB_XFER_DONE;
    2148:	693b      	ldr	r3, [r7, #16]
    214a:	2200      	movs	r2, #0
    214c:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    214e:	693b      	ldr	r3, [r7, #16]
    2150:	781b      	ldrb	r3, [r3, #0]
    2152:	2b00      	cmp	r3, #0
    2154:	d104      	bne.n	2160 <_usb_d_cb_trans_done+0x54>
			usb_d_ctrl_trans_done(ept);
    2156:	693b      	ldr	r3, [r7, #16]
    2158:	0018      	movs	r0, r3
    215a:	4b29      	ldr	r3, [pc, #164]	; (2200 <_usb_d_cb_trans_done+0xf4>)
    215c:	4798      	blx	r3
			return;
    215e:	e048      	b.n	21f2 <_usb_d_cb_trans_done+0xe6>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    2160:	693b      	ldr	r3, [r7, #16]
    2162:	2201      	movs	r2, #1
    2164:	709a      	strb	r2, [r3, #2]
    2166:	e03a      	b.n	21de <_usb_d_cb_trans_done+0xd2>
	} else if (code == USB_TRANS_STALL) {
    2168:	68bb      	ldr	r3, [r7, #8]
    216a:	2b01      	cmp	r3, #1
    216c:	d115      	bne.n	219a <_usb_d_cb_trans_done+0x8e>
		ept->xfer.hdr.status = USB_XFER_HALT;
    216e:	693b      	ldr	r3, [r7, #16]
    2170:	2202      	movs	r2, #2
    2172:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2174:	693b      	ldr	r3, [r7, #16]
    2176:	781b      	ldrb	r3, [r3, #0]
    2178:	2b00      	cmp	r3, #0
    217a:	d10a      	bne.n	2192 <_usb_d_cb_trans_done+0x86>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    217c:	693b      	ldr	r3, [r7, #16]
    217e:	2202      	movs	r2, #2
    2180:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2182:	230f      	movs	r3, #15
    2184:	18fb      	adds	r3, r7, r3
    2186:	781b      	ldrb	r3, [r3, #0]
    2188:	2100      	movs	r1, #0
    218a:	0018      	movs	r0, r3
    218c:	4b1d      	ldr	r3, [pc, #116]	; (2204 <_usb_d_cb_trans_done+0xf8>)
    218e:	4798      	blx	r3
    2190:	e025      	b.n	21de <_usb_d_cb_trans_done+0xd2>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    2192:	693b      	ldr	r3, [r7, #16]
    2194:	2205      	movs	r2, #5
    2196:	709a      	strb	r2, [r3, #2]
    2198:	e021      	b.n	21de <_usb_d_cb_trans_done+0xd2>
		}
	} else if (code == USB_TRANS_ABORT) {
    219a:	68bb      	ldr	r3, [r7, #8]
    219c:	2b02      	cmp	r3, #2
    219e:	d10e      	bne.n	21be <_usb_d_cb_trans_done+0xb2>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    21a0:	693b      	ldr	r3, [r7, #16]
    21a2:	2204      	movs	r2, #4
    21a4:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    21a6:	693b      	ldr	r3, [r7, #16]
    21a8:	781b      	ldrb	r3, [r3, #0]
    21aa:	2b00      	cmp	r3, #0
    21ac:	d103      	bne.n	21b6 <_usb_d_cb_trans_done+0xaa>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    21ae:	693b      	ldr	r3, [r7, #16]
    21b0:	2202      	movs	r2, #2
    21b2:	709a      	strb	r2, [r3, #2]
			return;
    21b4:	e01d      	b.n	21f2 <_usb_d_cb_trans_done+0xe6>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    21b6:	693b      	ldr	r3, [r7, #16]
    21b8:	2201      	movs	r2, #1
    21ba:	709a      	strb	r2, [r3, #2]
    21bc:	e00f      	b.n	21de <_usb_d_cb_trans_done+0xd2>
	} else if (code == USB_TRANS_RESET) {
    21be:	68bb      	ldr	r3, [r7, #8]
    21c0:	2b03      	cmp	r3, #3
    21c2:	d106      	bne.n	21d2 <_usb_d_cb_trans_done+0xc6>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    21c4:	693b      	ldr	r3, [r7, #16]
    21c6:	2200      	movs	r2, #0
    21c8:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    21ca:	693b      	ldr	r3, [r7, #16]
    21cc:	2205      	movs	r2, #5
    21ce:	70da      	strb	r2, [r3, #3]
    21d0:	e005      	b.n	21de <_usb_d_cb_trans_done+0xd2>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    21d2:	693b      	ldr	r3, [r7, #16]
    21d4:	2206      	movs	r2, #6
    21d6:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    21d8:	693b      	ldr	r3, [r7, #16]
    21da:	2206      	movs	r2, #6
    21dc:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    21de:	693b      	ldr	r3, [r7, #16]
    21e0:	69db      	ldr	r3, [r3, #28]
    21e2:	693a      	ldr	r2, [r7, #16]
    21e4:	78d1      	ldrb	r1, [r2, #3]
    21e6:	687c      	ldr	r4, [r7, #4]
    21e8:	220f      	movs	r2, #15
    21ea:	18ba      	adds	r2, r7, r2
    21ec:	7810      	ldrb	r0, [r2, #0]
    21ee:	0022      	movs	r2, r4
    21f0:	4798      	blx	r3
}
    21f2:	46bd      	mov	sp, r7
    21f4:	b007      	add	sp, #28
    21f6:	bd90      	pop	{r4, r7, pc}
    21f8:	00001da9 	.word	0x00001da9
    21fc:	20000a7c 	.word	0x20000a7c
    2200:	00002031 	.word	0x00002031
    2204:	00006dc5 	.word	0x00006dc5

00002208 <usb_d_init>:

int32_t usb_d_init(void)
{
    2208:	b580      	push	{r7, lr}
    220a:	b082      	sub	sp, #8
    220c:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    220e:	4b28      	ldr	r3, [pc, #160]	; (22b0 <usb_d_init+0xa8>)
    2210:	4798      	blx	r3
    2212:	0003      	movs	r3, r0
    2214:	603b      	str	r3, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    2216:	683b      	ldr	r3, [r7, #0]
    2218:	2b00      	cmp	r3, #0
    221a:	da01      	bge.n	2220 <usb_d_init+0x18>
		return rc;
    221c:	683b      	ldr	r3, [r7, #0]
    221e:	e043      	b.n	22a8 <usb_d_init+0xa0>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    2220:	2380      	movs	r3, #128	; 0x80
    2222:	005a      	lsls	r2, r3, #1
    2224:	4b23      	ldr	r3, [pc, #140]	; (22b4 <usb_d_init+0xac>)
    2226:	2100      	movs	r1, #0
    2228:	0018      	movs	r0, r3
    222a:	4b23      	ldr	r3, [pc, #140]	; (22b8 <usb_d_init+0xb0>)
    222c:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    222e:	1dfb      	adds	r3, r7, #7
    2230:	2200      	movs	r2, #0
    2232:	701a      	strb	r2, [r3, #0]
    2234:	e024      	b.n	2280 <usb_d_init+0x78>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    2236:	1dfb      	adds	r3, r7, #7
    2238:	781b      	ldrb	r3, [r3, #0]
    223a:	4a1e      	ldr	r2, [pc, #120]	; (22b4 <usb_d_init+0xac>)
    223c:	015b      	lsls	r3, r3, #5
    223e:	18d3      	adds	r3, r2, r3
    2240:	3301      	adds	r3, #1
    2242:	22ff      	movs	r2, #255	; 0xff
    2244:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    2246:	1dfb      	adds	r3, r7, #7
    2248:	781b      	ldrb	r3, [r3, #0]
    224a:	4a1a      	ldr	r2, [pc, #104]	; (22b4 <usb_d_init+0xac>)
    224c:	015b      	lsls	r3, r3, #5
    224e:	18d3      	adds	r3, r2, r3
    2250:	3314      	adds	r3, #20
    2252:	4a1a      	ldr	r2, [pc, #104]	; (22bc <usb_d_init+0xb4>)
    2254:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    2256:	1dfb      	adds	r3, r7, #7
    2258:	781b      	ldrb	r3, [r3, #0]
    225a:	4a16      	ldr	r2, [pc, #88]	; (22b4 <usb_d_init+0xac>)
    225c:	015b      	lsls	r3, r3, #5
    225e:	18d3      	adds	r3, r2, r3
    2260:	3318      	adds	r3, #24
    2262:	4a16      	ldr	r2, [pc, #88]	; (22bc <usb_d_init+0xb4>)
    2264:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    2266:	1dfb      	adds	r3, r7, #7
    2268:	781b      	ldrb	r3, [r3, #0]
    226a:	4a12      	ldr	r2, [pc, #72]	; (22b4 <usb_d_init+0xac>)
    226c:	015b      	lsls	r3, r3, #5
    226e:	18d3      	adds	r3, r2, r3
    2270:	331c      	adds	r3, #28
    2272:	4a12      	ldr	r2, [pc, #72]	; (22bc <usb_d_init+0xb4>)
    2274:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2276:	1dfb      	adds	r3, r7, #7
    2278:	781a      	ldrb	r2, [r3, #0]
    227a:	1dfb      	adds	r3, r7, #7
    227c:	3201      	adds	r2, #1
    227e:	701a      	strb	r2, [r3, #0]
    2280:	1dfb      	adds	r3, r7, #7
    2282:	781b      	ldrb	r3, [r3, #0]
    2284:	2b07      	cmp	r3, #7
    2286:	d9d6      	bls.n	2236 <usb_d_init+0x2e>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    2288:	4b0d      	ldr	r3, [pc, #52]	; (22c0 <usb_d_init+0xb8>)
    228a:	0019      	movs	r1, r3
    228c:	2000      	movs	r0, #0
    228e:	4b0d      	ldr	r3, [pc, #52]	; (22c4 <usb_d_init+0xbc>)
    2290:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    2292:	4b0d      	ldr	r3, [pc, #52]	; (22c8 <usb_d_init+0xc0>)
    2294:	0019      	movs	r1, r3
    2296:	2001      	movs	r0, #1
    2298:	4b0a      	ldr	r3, [pc, #40]	; (22c4 <usb_d_init+0xbc>)
    229a:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    229c:	4b0b      	ldr	r3, [pc, #44]	; (22cc <usb_d_init+0xc4>)
    229e:	0019      	movs	r1, r3
    22a0:	2002      	movs	r0, #2
    22a2:	4b08      	ldr	r3, [pc, #32]	; (22c4 <usb_d_init+0xbc>)
    22a4:	4798      	blx	r3
	return ERR_NONE;
    22a6:	2300      	movs	r3, #0
}
    22a8:	0018      	movs	r0, r3
    22aa:	46bd      	mov	sp, r7
    22ac:	b002      	add	sp, #8
    22ae:	bd80      	pop	{r7, pc}
    22b0:	00006479 	.word	0x00006479
    22b4:	20000a7c 	.word	0x20000a7c
    22b8:	0000a605 	.word	0x0000a605
    22bc:	00001ec9 	.word	0x00001ec9
    22c0:	00001ee1 	.word	0x00001ee1
    22c4:	000072f5 	.word	0x000072f5
    22c8:	00001fd5 	.word	0x00001fd5
    22cc:	0000210d 	.word	0x0000210d

000022d0 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    22d0:	b580      	push	{r7, lr}
    22d2:	b082      	sub	sp, #8
    22d4:	af00      	add	r7, sp, #0
    22d6:	0002      	movs	r2, r0
    22d8:	6039      	str	r1, [r7, #0]
    22da:	1dfb      	adds	r3, r7, #7
    22dc:	701a      	strb	r2, [r3, #0]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    22de:	683a      	ldr	r2, [r7, #0]
    22e0:	1dfb      	adds	r3, r7, #7
    22e2:	781b      	ldrb	r3, [r3, #0]
    22e4:	0011      	movs	r1, r2
    22e6:	0018      	movs	r0, r3
    22e8:	4b02      	ldr	r3, [pc, #8]	; (22f4 <usb_d_register_callback+0x24>)
    22ea:	4798      	blx	r3
}
    22ec:	46c0      	nop			; (mov r8, r8)
    22ee:	46bd      	mov	sp, r7
    22f0:	b002      	add	sp, #8
    22f2:	bd80      	pop	{r7, pc}
    22f4:	000072a9 	.word	0x000072a9

000022f8 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    22f8:	b580      	push	{r7, lr}
    22fa:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    22fc:	4b02      	ldr	r3, [pc, #8]	; (2308 <usb_d_enable+0x10>)
    22fe:	4798      	blx	r3
    2300:	0003      	movs	r3, r0
}
    2302:	0018      	movs	r0, r3
    2304:	46bd      	mov	sp, r7
    2306:	bd80      	pop	{r7, pc}
    2308:	00006585 	.word	0x00006585

0000230c <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    230c:	b580      	push	{r7, lr}
    230e:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    2310:	4b02      	ldr	r3, [pc, #8]	; (231c <usb_d_attach+0x10>)
    2312:	4798      	blx	r3
}
    2314:	46c0      	nop			; (mov r8, r8)
    2316:	46bd      	mov	sp, r7
    2318:	bd80      	pop	{r7, pc}
    231a:	46c0      	nop			; (mov r8, r8)
    231c:	00006609 	.word	0x00006609

00002320 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    2320:	b580      	push	{r7, lr}
    2322:	b082      	sub	sp, #8
    2324:	af00      	add	r7, sp, #0
    2326:	0002      	movs	r2, r0
    2328:	1dfb      	adds	r3, r7, #7
    232a:	701a      	strb	r2, [r3, #0]
	_usb_d_dev_set_address(addr);
    232c:	1dfb      	adds	r3, r7, #7
    232e:	781b      	ldrb	r3, [r3, #0]
    2330:	0018      	movs	r0, r3
    2332:	4b03      	ldr	r3, [pc, #12]	; (2340 <usb_d_set_address+0x20>)
    2334:	4798      	blx	r3
}
    2336:	46c0      	nop			; (mov r8, r8)
    2338:	46bd      	mov	sp, r7
    233a:	b002      	add	sp, #8
    233c:	bd80      	pop	{r7, pc}
    233e:	46c0      	nop			; (mov r8, r8)
    2340:	00006625 	.word	0x00006625

00002344 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    2344:	b580      	push	{r7, lr}
    2346:	b082      	sub	sp, #8
    2348:	af00      	add	r7, sp, #0
    234a:	0002      	movs	r2, r0
    234c:	1dfb      	adds	r3, r7, #7
    234e:	701a      	strb	r2, [r3, #0]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    2350:	1dfb      	adds	r3, r7, #7
    2352:	781b      	ldrb	r3, [r3, #0]
    2354:	b29b      	uxth	r3, r3
    2356:	001a      	movs	r2, r3
    2358:	2100      	movs	r1, #0
    235a:	2000      	movs	r0, #0
    235c:	4b03      	ldr	r3, [pc, #12]	; (236c <usb_d_ep0_init+0x28>)
    235e:	4798      	blx	r3
    2360:	0003      	movs	r3, r0
}
    2362:	0018      	movs	r0, r3
    2364:	46bd      	mov	sp, r7
    2366:	b002      	add	sp, #8
    2368:	bd80      	pop	{r7, pc}
    236a:	46c0      	nop			; (mov r8, r8)
    236c:	00002371 	.word	0x00002371

00002370 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    2370:	b590      	push	{r4, r7, lr}
    2372:	b087      	sub	sp, #28
    2374:	af00      	add	r7, sp, #0
    2376:	0004      	movs	r4, r0
    2378:	0008      	movs	r0, r1
    237a:	0011      	movs	r1, r2
    237c:	1dfb      	adds	r3, r7, #7
    237e:	1c22      	adds	r2, r4, #0
    2380:	701a      	strb	r2, [r3, #0]
    2382:	1dbb      	adds	r3, r7, #6
    2384:	1c02      	adds	r2, r0, #0
    2386:	701a      	strb	r2, [r3, #0]
    2388:	1d3b      	adds	r3, r7, #4
    238a:	1c0a      	adds	r2, r1, #0
    238c:	801a      	strh	r2, [r3, #0]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    238e:	2317      	movs	r3, #23
    2390:	18fc      	adds	r4, r7, r3
    2392:	1dfb      	adds	r3, r7, #7
    2394:	781b      	ldrb	r3, [r3, #0]
    2396:	0018      	movs	r0, r3
    2398:	4b25      	ldr	r3, [pc, #148]	; (2430 <usb_d_ep_init+0xc0>)
    239a:	4798      	blx	r3
    239c:	0003      	movs	r3, r0
    239e:	7023      	strb	r3, [r4, #0]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    23a0:	2317      	movs	r3, #23
    23a2:	18fb      	adds	r3, r7, r3
    23a4:	781b      	ldrb	r3, [r3, #0]
    23a6:	b25b      	sxtb	r3, r3
    23a8:	015a      	lsls	r2, r3, #5
    23aa:	4b22      	ldr	r3, [pc, #136]	; (2434 <usb_d_ep_init+0xc4>)
    23ac:	18d3      	adds	r3, r2, r3
    23ae:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    23b0:	2317      	movs	r3, #23
    23b2:	18fb      	adds	r3, r7, r3
    23b4:	781b      	ldrb	r3, [r3, #0]
    23b6:	2b7f      	cmp	r3, #127	; 0x7f
    23b8:	d802      	bhi.n	23c0 <usb_d_ep_init+0x50>
		return -USB_ERR_REDO;
    23ba:	2314      	movs	r3, #20
    23bc:	425b      	negs	r3, r3
    23be:	e032      	b.n	2426 <usb_d_ep_init+0xb6>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    23c0:	2317      	movs	r3, #23
    23c2:	18fc      	adds	r4, r7, r3
    23c4:	20ff      	movs	r0, #255	; 0xff
    23c6:	4b1a      	ldr	r3, [pc, #104]	; (2430 <usb_d_ep_init+0xc0>)
    23c8:	4798      	blx	r3
    23ca:	0003      	movs	r3, r0
    23cc:	7023      	strb	r3, [r4, #0]
		if (ep_index < 0) {
    23ce:	2317      	movs	r3, #23
    23d0:	18fb      	adds	r3, r7, r3
    23d2:	781b      	ldrb	r3, [r3, #0]
    23d4:	2b7f      	cmp	r3, #127	; 0x7f
    23d6:	d902      	bls.n	23de <usb_d_ep_init+0x6e>
			return -USB_ERR_ALLOC_FAIL;
    23d8:	2315      	movs	r3, #21
    23da:	425b      	negs	r3, r3
    23dc:	e023      	b.n	2426 <usb_d_ep_init+0xb6>
		}
		ept = &usb_d_inst.ep[ep_index];
    23de:	2317      	movs	r3, #23
    23e0:	18fb      	adds	r3, r7, r3
    23e2:	781b      	ldrb	r3, [r3, #0]
    23e4:	b25b      	sxtb	r3, r3
    23e6:	015a      	lsls	r2, r3, #5
    23e8:	4b12      	ldr	r3, [pc, #72]	; (2434 <usb_d_ep_init+0xc4>)
    23ea:	18d3      	adds	r3, r2, r3
    23ec:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    23ee:	1d3b      	adds	r3, r7, #4
    23f0:	881a      	ldrh	r2, [r3, #0]
    23f2:	1dbb      	adds	r3, r7, #6
    23f4:	7819      	ldrb	r1, [r3, #0]
    23f6:	1dfb      	adds	r3, r7, #7
    23f8:	781b      	ldrb	r3, [r3, #0]
    23fa:	0018      	movs	r0, r3
    23fc:	4b0e      	ldr	r3, [pc, #56]	; (2438 <usb_d_ep_init+0xc8>)
    23fe:	4798      	blx	r3
    2400:	0003      	movs	r3, r0
    2402:	60fb      	str	r3, [r7, #12]
	if (rc < 0) {
    2404:	68fb      	ldr	r3, [r7, #12]
    2406:	2b00      	cmp	r3, #0
    2408:	da01      	bge.n	240e <usb_d_ep_init+0x9e>
		return rc;
    240a:	68fb      	ldr	r3, [r7, #12]
    240c:	e00b      	b.n	2426 <usb_d_ep_init+0xb6>
	}
	ept->xfer.hdr.ep   = ep;
    240e:	693b      	ldr	r3, [r7, #16]
    2410:	1dfa      	adds	r2, r7, #7
    2412:	7812      	ldrb	r2, [r2, #0]
    2414:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    2416:	1dbb      	adds	r3, r7, #6
    2418:	781b      	ldrb	r3, [r3, #0]
    241a:	2203      	movs	r2, #3
    241c:	4013      	ands	r3, r2
    241e:	b2da      	uxtb	r2, r3
    2420:	693b      	ldr	r3, [r7, #16]
    2422:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    2424:	2300      	movs	r3, #0
}
    2426:	0018      	movs	r0, r3
    2428:	46bd      	mov	sp, r7
    242a:	b007      	add	sp, #28
    242c:	bd90      	pop	{r4, r7, pc}
    242e:	46c0      	nop			; (mov r8, r8)
    2430:	00001da9 	.word	0x00001da9
    2434:	20000a7c 	.word	0x20000a7c
    2438:	000066ed 	.word	0x000066ed

0000243c <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    243c:	b590      	push	{r4, r7, lr}
    243e:	b085      	sub	sp, #20
    2440:	af00      	add	r7, sp, #0
    2442:	0002      	movs	r2, r0
    2444:	1dfb      	adds	r3, r7, #7
    2446:	701a      	strb	r2, [r3, #0]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2448:	230f      	movs	r3, #15
    244a:	18fc      	adds	r4, r7, r3
    244c:	1dfb      	adds	r3, r7, #7
    244e:	781b      	ldrb	r3, [r3, #0]
    2450:	0018      	movs	r0, r3
    2452:	4b0f      	ldr	r3, [pc, #60]	; (2490 <usb_d_ep_deinit+0x54>)
    2454:	4798      	blx	r3
    2456:	0003      	movs	r3, r0
    2458:	7023      	strb	r3, [r4, #0]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    245a:	230f      	movs	r3, #15
    245c:	18fb      	adds	r3, r7, r3
    245e:	781b      	ldrb	r3, [r3, #0]
    2460:	b25b      	sxtb	r3, r3
    2462:	015a      	lsls	r2, r3, #5
    2464:	4b0b      	ldr	r3, [pc, #44]	; (2494 <usb_d_ep_deinit+0x58>)
    2466:	18d3      	adds	r3, r2, r3
    2468:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    246a:	230f      	movs	r3, #15
    246c:	18fb      	adds	r3, r7, r3
    246e:	781b      	ldrb	r3, [r3, #0]
    2470:	2b7f      	cmp	r3, #127	; 0x7f
    2472:	d808      	bhi.n	2486 <usb_d_ep_deinit+0x4a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    2474:	1dfb      	adds	r3, r7, #7
    2476:	781b      	ldrb	r3, [r3, #0]
    2478:	0018      	movs	r0, r3
    247a:	4b07      	ldr	r3, [pc, #28]	; (2498 <usb_d_ep_deinit+0x5c>)
    247c:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    247e:	68bb      	ldr	r3, [r7, #8]
    2480:	22ff      	movs	r2, #255	; 0xff
    2482:	705a      	strb	r2, [r3, #1]
    2484:	e000      	b.n	2488 <usb_d_ep_deinit+0x4c>
		return;
    2486:	46c0      	nop			; (mov r8, r8)
}
    2488:	46bd      	mov	sp, r7
    248a:	b005      	add	sp, #20
    248c:	bd90      	pop	{r4, r7, pc}
    248e:	46c0      	nop			; (mov r8, r8)
    2490:	00001da9 	.word	0x00001da9
    2494:	20000a7c 	.word	0x20000a7c
    2498:	00006869 	.word	0x00006869

0000249c <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    249c:	b590      	push	{r4, r7, lr}
    249e:	b087      	sub	sp, #28
    24a0:	af00      	add	r7, sp, #0
    24a2:	0002      	movs	r2, r0
    24a4:	1dfb      	adds	r3, r7, #7
    24a6:	701a      	strb	r2, [r3, #0]
	int8_t           ep_index = _usb_d_find_ep(ep);
    24a8:	2317      	movs	r3, #23
    24aa:	18fc      	adds	r4, r7, r3
    24ac:	1dfb      	adds	r3, r7, #7
    24ae:	781b      	ldrb	r3, [r3, #0]
    24b0:	0018      	movs	r0, r3
    24b2:	4b17      	ldr	r3, [pc, #92]	; (2510 <usb_d_ep_enable+0x74>)
    24b4:	4798      	blx	r3
    24b6:	0003      	movs	r3, r0
    24b8:	7023      	strb	r3, [r4, #0]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    24ba:	2317      	movs	r3, #23
    24bc:	18fb      	adds	r3, r7, r3
    24be:	781b      	ldrb	r3, [r3, #0]
    24c0:	b25b      	sxtb	r3, r3
    24c2:	015a      	lsls	r2, r3, #5
    24c4:	4b13      	ldr	r3, [pc, #76]	; (2514 <usb_d_ep_enable+0x78>)
    24c6:	18d3      	adds	r3, r2, r3
    24c8:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    24ca:	2317      	movs	r3, #23
    24cc:	18fb      	adds	r3, r7, r3
    24ce:	781b      	ldrb	r3, [r3, #0]
    24d0:	2b7f      	cmp	r3, #127	; 0x7f
    24d2:	d902      	bls.n	24da <usb_d_ep_enable+0x3e>
		return -USB_ERR_PARAM;
    24d4:	2312      	movs	r3, #18
    24d6:	425b      	negs	r3, r3
    24d8:	e016      	b.n	2508 <usb_d_ep_enable+0x6c>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    24da:	693b      	ldr	r3, [r7, #16]
    24dc:	781b      	ldrb	r3, [r3, #0]
    24de:	2b00      	cmp	r3, #0
    24e0:	d101      	bne.n	24e6 <usb_d_ep_enable+0x4a>
    24e2:	2202      	movs	r2, #2
    24e4:	e000      	b.n	24e8 <usb_d_ep_enable+0x4c>
    24e6:	2201      	movs	r2, #1
    24e8:	693b      	ldr	r3, [r7, #16]
    24ea:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    24ec:	1dfb      	adds	r3, r7, #7
    24ee:	781b      	ldrb	r3, [r3, #0]
    24f0:	0018      	movs	r0, r3
    24f2:	4b09      	ldr	r3, [pc, #36]	; (2518 <usb_d_ep_enable+0x7c>)
    24f4:	4798      	blx	r3
    24f6:	0003      	movs	r3, r0
    24f8:	60fb      	str	r3, [r7, #12]
	if (rc < 0) {
    24fa:	68fb      	ldr	r3, [r7, #12]
    24fc:	2b00      	cmp	r3, #0
    24fe:	da02      	bge.n	2506 <usb_d_ep_enable+0x6a>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    2500:	693b      	ldr	r3, [r7, #16]
    2502:	2200      	movs	r2, #0
    2504:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    2506:	68fb      	ldr	r3, [r7, #12]
}
    2508:	0018      	movs	r0, r3
    250a:	46bd      	mov	sp, r7
    250c:	b007      	add	sp, #28
    250e:	bd90      	pop	{r4, r7, pc}
    2510:	00001da9 	.word	0x00001da9
    2514:	20000a7c 	.word	0x20000a7c
    2518:	00006969 	.word	0x00006969

0000251c <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    251c:	b5b0      	push	{r4, r5, r7, lr}
    251e:	b08c      	sub	sp, #48	; 0x30
    2520:	af02      	add	r7, sp, #8
    2522:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    2524:	687b      	ldr	r3, [r7, #4]
    2526:	7a1b      	ldrb	r3, [r3, #8]
    2528:	221f      	movs	r2, #31
    252a:	18bc      	adds	r4, r7, r2
    252c:	0018      	movs	r0, r3
    252e:	4b5e      	ldr	r3, [pc, #376]	; (26a8 <usb_d_ep_transfer+0x18c>)
    2530:	4798      	blx	r3
    2532:	0003      	movs	r3, r0
    2534:	7023      	strb	r3, [r4, #0]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    2536:	231f      	movs	r3, #31
    2538:	18fb      	adds	r3, r7, r3
    253a:	781b      	ldrb	r3, [r3, #0]
    253c:	b25b      	sxtb	r3, r3
    253e:	015a      	lsls	r2, r3, #5
    2540:	4b5a      	ldr	r3, [pc, #360]	; (26ac <usb_d_ep_transfer+0x190>)
    2542:	18d3      	adds	r3, r2, r3
    2544:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    2546:	687b      	ldr	r3, [r7, #4]
    2548:	7a1b      	ldrb	r3, [r3, #8]
    254a:	001a      	movs	r2, r3
    254c:	2380      	movs	r3, #128	; 0x80
    254e:	401a      	ands	r2, r3
    2550:	2327      	movs	r3, #39	; 0x27
    2552:	18fb      	adds	r3, r7, r3
    2554:	1e51      	subs	r1, r2, #1
    2556:	418a      	sbcs	r2, r1
    2558:	701a      	strb	r2, [r3, #0]
    255a:	687b      	ldr	r3, [r7, #4]
    255c:	7a5a      	ldrb	r2, [r3, #9]
    255e:	2326      	movs	r3, #38	; 0x26
    2560:	18fb      	adds	r3, r7, r3
    2562:	1e51      	subs	r1, r2, #1
    2564:	418a      	sbcs	r2, r1
    2566:	701a      	strb	r2, [r3, #0]
	uint32_t              len = xfer->size;
    2568:	687b      	ldr	r3, [r7, #4]
    256a:	685b      	ldr	r3, [r3, #4]
    256c:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    256e:	231f      	movs	r3, #31
    2570:	18fb      	adds	r3, r7, r3
    2572:	781b      	ldrb	r3, [r3, #0]
    2574:	2b7f      	cmp	r3, #127	; 0x7f
    2576:	d902      	bls.n	257e <usb_d_ep_transfer+0x62>
		return -USB_ERR_PARAM;
    2578:	2312      	movs	r3, #18
    257a:	425b      	negs	r3, r3
    257c:	e090      	b.n	26a0 <usb_d_ep_transfer+0x184>
	}

	atomic_enter_critical(&flags);
    257e:	2308      	movs	r3, #8
    2580:	18fb      	adds	r3, r7, r3
    2582:	0018      	movs	r0, r3
    2584:	4b4a      	ldr	r3, [pc, #296]	; (26b0 <usb_d_ep_transfer+0x194>)
    2586:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    2588:	69bb      	ldr	r3, [r7, #24]
    258a:	789a      	ldrb	r2, [r3, #2]
    258c:	230f      	movs	r3, #15
    258e:	18fb      	adds	r3, r7, r3
    2590:	701a      	strb	r2, [r3, #0]
	if (state == USB_EP_S_IDLE) {
    2592:	230f      	movs	r3, #15
    2594:	18fb      	adds	r3, r7, r3
    2596:	781b      	ldrb	r3, [r3, #0]
    2598:	b2db      	uxtb	r3, r3
    259a:	2b01      	cmp	r3, #1
    259c:	d10c      	bne.n	25b8 <usb_d_ep_transfer+0x9c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    259e:	69bb      	ldr	r3, [r7, #24]
    25a0:	2203      	movs	r2, #3
    25a2:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    25a4:	2308      	movs	r3, #8
    25a6:	18fb      	adds	r3, r7, r3
    25a8:	0018      	movs	r0, r3
    25aa:	4b42      	ldr	r3, [pc, #264]	; (26b4 <usb_d_ep_transfer+0x198>)
    25ac:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    25ae:	69bb      	ldr	r3, [r7, #24]
    25b0:	781b      	ldrb	r3, [r3, #0]
    25b2:	2b00      	cmp	r3, #0
    25b4:	d161      	bne.n	267a <usb_d_ep_transfer+0x15e>
    25b6:	e019      	b.n	25ec <usb_d_ep_transfer+0xd0>
		atomic_leave_critical(&flags);
    25b8:	2308      	movs	r3, #8
    25ba:	18fb      	adds	r3, r7, r3
    25bc:	0018      	movs	r0, r3
    25be:	4b3d      	ldr	r3, [pc, #244]	; (26b4 <usb_d_ep_transfer+0x198>)
    25c0:	4798      	blx	r3
		switch (state) {
    25c2:	230f      	movs	r3, #15
    25c4:	18fb      	adds	r3, r7, r3
    25c6:	781b      	ldrb	r3, [r3, #0]
    25c8:	b2db      	uxtb	r3, r3
    25ca:	2b05      	cmp	r3, #5
    25cc:	d004      	beq.n	25d8 <usb_d_ep_transfer+0xbc>
    25ce:	2b06      	cmp	r3, #6
    25d0:	d004      	beq.n	25dc <usb_d_ep_transfer+0xc0>
    25d2:	2b00      	cmp	r3, #0
    25d4:	d005      	beq.n	25e2 <usb_d_ep_transfer+0xc6>
    25d6:	e007      	b.n	25e8 <usb_d_ep_transfer+0xcc>
			return USB_HALTED;
    25d8:	2302      	movs	r3, #2
    25da:	e061      	b.n	26a0 <usb_d_ep_transfer+0x184>
			return -USB_ERROR;
    25dc:	2310      	movs	r3, #16
    25de:	425b      	negs	r3, r3
    25e0:	e05e      	b.n	26a0 <usb_d_ep_transfer+0x184>
			return -USB_ERR_FUNC;
    25e2:	2313      	movs	r3, #19
    25e4:	425b      	negs	r3, r3
    25e6:	e05b      	b.n	26a0 <usb_d_ep_transfer+0x184>
			return USB_BUSY;
    25e8:	2301      	movs	r3, #1
    25ea:	e059      	b.n	26a0 <usb_d_ep_transfer+0x184>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    25ec:	69bb      	ldr	r3, [r7, #24]
    25ee:	7c9b      	ldrb	r3, [r3, #18]
    25f0:	b299      	uxth	r1, r3
    25f2:	69bb      	ldr	r3, [r7, #24]
    25f4:	7cdb      	ldrb	r3, [r3, #19]
    25f6:	b29b      	uxth	r3, r3
    25f8:	021b      	lsls	r3, r3, #8
    25fa:	b29a      	uxth	r2, r3
    25fc:	2316      	movs	r3, #22
    25fe:	18fb      	adds	r3, r7, r3
    2600:	188a      	adds	r2, r1, r2
    2602:	801a      	strh	r2, [r3, #0]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    2604:	2316      	movs	r3, #22
    2606:	18fb      	adds	r3, r7, r3
    2608:	881b      	ldrh	r3, [r3, #0]
    260a:	2b00      	cmp	r3, #0
    260c:	d10d      	bne.n	262a <usb_d_ep_transfer+0x10e>
			dir                 = true;
    260e:	2327      	movs	r3, #39	; 0x27
    2610:	18fb      	adds	r3, r7, r3
    2612:	2201      	movs	r2, #1
    2614:	701a      	strb	r2, [r3, #0]
			len                 = 0;
    2616:	2300      	movs	r3, #0
    2618:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    261a:	2326      	movs	r3, #38	; 0x26
    261c:	18fb      	adds	r3, r7, r3
    261e:	2201      	movs	r2, #1
    2620:	701a      	strb	r2, [r3, #0]
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    2622:	69bb      	ldr	r3, [r7, #24]
    2624:	2204      	movs	r2, #4
    2626:	709a      	strb	r2, [r3, #2]
    2628:	e027      	b.n	267a <usb_d_ep_transfer+0x15e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    262a:	69bb      	ldr	r3, [r7, #24]
    262c:	7b1b      	ldrb	r3, [r3, #12]
    262e:	001a      	movs	r2, r3
    2630:	2380      	movs	r3, #128	; 0x80
    2632:	401a      	ands	r2, r3
    2634:	2327      	movs	r3, #39	; 0x27
    2636:	18fb      	adds	r3, r7, r3
    2638:	1e51      	subs	r1, r2, #1
    263a:	418a      	sbcs	r2, r1
    263c:	701a      	strb	r2, [r3, #0]
			/* Data length not exceed requested. */
			if (len > req_len) {
    263e:	2316      	movs	r3, #22
    2640:	18fb      	adds	r3, r7, r3
    2642:	881a      	ldrh	r2, [r3, #0]
    2644:	6a3b      	ldr	r3, [r7, #32]
    2646:	429a      	cmp	r2, r3
    2648:	d203      	bcs.n	2652 <usb_d_ep_transfer+0x136>
				len = req_len;
    264a:	2316      	movs	r3, #22
    264c:	18fb      	adds	r3, r7, r3
    264e:	881b      	ldrh	r3, [r3, #0]
    2650:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    2652:	2327      	movs	r3, #39	; 0x27
    2654:	18fb      	adds	r3, r7, r3
    2656:	781b      	ldrb	r3, [r3, #0]
    2658:	2b00      	cmp	r3, #0
    265a:	d00a      	beq.n	2672 <usb_d_ep_transfer+0x156>
				/* Setup -> In */
				zlp = (req_len > len);
    265c:	2316      	movs	r3, #22
    265e:	18fb      	adds	r3, r7, r3
    2660:	881a      	ldrh	r2, [r3, #0]
    2662:	2326      	movs	r3, #38	; 0x26
    2664:	18fb      	adds	r3, r7, r3
    2666:	6a39      	ldr	r1, [r7, #32]
    2668:	4291      	cmp	r1, r2
    266a:	4192      	sbcs	r2, r2
    266c:	4252      	negs	r2, r2
    266e:	701a      	strb	r2, [r3, #0]
    2670:	e003      	b.n	267a <usb_d_ep_transfer+0x15e>
			} else {
				zlp = false;
    2672:	2326      	movs	r3, #38	; 0x26
    2674:	18fb      	adds	r3, r7, r3
    2676:	2200      	movs	r2, #0
    2678:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    267a:	687b      	ldr	r3, [r7, #4]
    267c:	7a18      	ldrb	r0, [r3, #8]
    267e:	687b      	ldr	r3, [r7, #4]
    2680:	681c      	ldr	r4, [r3, #0]
    2682:	2326      	movs	r3, #38	; 0x26
    2684:	18fb      	adds	r3, r7, r3
    2686:	781b      	ldrb	r3, [r3, #0]
    2688:	6a3d      	ldr	r5, [r7, #32]
    268a:	2227      	movs	r2, #39	; 0x27
    268c:	18ba      	adds	r2, r7, r2
    268e:	7811      	ldrb	r1, [r2, #0]
    2690:	9300      	str	r3, [sp, #0]
    2692:	002b      	movs	r3, r5
    2694:	0022      	movs	r2, r4
    2696:	4c08      	ldr	r4, [pc, #32]	; (26b8 <usb_d_ep_transfer+0x19c>)
    2698:	47a0      	blx	r4
    269a:	0003      	movs	r3, r0
    269c:	613b      	str	r3, [r7, #16]
	return rc;
    269e:	693b      	ldr	r3, [r7, #16]
}
    26a0:	0018      	movs	r0, r3
    26a2:	46bd      	mov	sp, r7
    26a4:	b00a      	add	sp, #40	; 0x28
    26a6:	bdb0      	pop	{r4, r5, r7, pc}
    26a8:	00001da9 	.word	0x00001da9
    26ac:	20000a7c 	.word	0x20000a7c
    26b0:	000073dd 	.word	0x000073dd
    26b4:	000073ff 	.word	0x000073ff
    26b8:	00001e4d 	.word	0x00001e4d

000026bc <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    26bc:	b590      	push	{r4, r7, lr}
    26be:	b087      	sub	sp, #28
    26c0:	af00      	add	r7, sp, #0
    26c2:	0002      	movs	r2, r0
    26c4:	1dfb      	adds	r3, r7, #7
    26c6:	701a      	strb	r2, [r3, #0]
	int8_t           ep_index = _usb_d_find_ep(ep);
    26c8:	2317      	movs	r3, #23
    26ca:	18fc      	adds	r4, r7, r3
    26cc:	1dfb      	adds	r3, r7, #7
    26ce:	781b      	ldrb	r3, [r3, #0]
    26d0:	0018      	movs	r0, r3
    26d2:	4b1d      	ldr	r3, [pc, #116]	; (2748 <_usb_d_ep_halt_clr+0x8c>)
    26d4:	4798      	blx	r3
    26d6:	0003      	movs	r3, r0
    26d8:	7023      	strb	r3, [r4, #0]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    26da:	2317      	movs	r3, #23
    26dc:	18fb      	adds	r3, r7, r3
    26de:	781b      	ldrb	r3, [r3, #0]
    26e0:	b25b      	sxtb	r3, r3
    26e2:	015a      	lsls	r2, r3, #5
    26e4:	4b19      	ldr	r3, [pc, #100]	; (274c <_usb_d_ep_halt_clr+0x90>)
    26e6:	18d3      	adds	r3, r2, r3
    26e8:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    26ea:	2317      	movs	r3, #23
    26ec:	18fb      	adds	r3, r7, r3
    26ee:	781b      	ldrb	r3, [r3, #0]
    26f0:	2b7f      	cmp	r3, #127	; 0x7f
    26f2:	d902      	bls.n	26fa <_usb_d_ep_halt_clr+0x3e>
		return -USB_ERR_PARAM;
    26f4:	2312      	movs	r3, #18
    26f6:	425b      	negs	r3, r3
    26f8:	e022      	b.n	2740 <_usb_d_ep_halt_clr+0x84>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    26fa:	1dfb      	adds	r3, r7, #7
    26fc:	781b      	ldrb	r3, [r3, #0]
    26fe:	2102      	movs	r1, #2
    2700:	0018      	movs	r0, r3
    2702:	4b13      	ldr	r3, [pc, #76]	; (2750 <_usb_d_ep_halt_clr+0x94>)
    2704:	4798      	blx	r3
    2706:	1e03      	subs	r3, r0, #0
    2708:	d019      	beq.n	273e <_usb_d_ep_halt_clr+0x82>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    270a:	1dfb      	adds	r3, r7, #7
    270c:	781b      	ldrb	r3, [r3, #0]
    270e:	2100      	movs	r1, #0
    2710:	0018      	movs	r0, r3
    2712:	4b0f      	ldr	r3, [pc, #60]	; (2750 <_usb_d_ep_halt_clr+0x94>)
    2714:	4798      	blx	r3
    2716:	0003      	movs	r3, r0
    2718:	60fb      	str	r3, [r7, #12]
		if (rc < 0) {
    271a:	68fb      	ldr	r3, [r7, #12]
    271c:	2b00      	cmp	r3, #0
    271e:	da01      	bge.n	2724 <_usb_d_ep_halt_clr+0x68>
			return rc;
    2720:	68fb      	ldr	r3, [r7, #12]
    2722:	e00d      	b.n	2740 <_usb_d_ep_halt_clr+0x84>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    2724:	693b      	ldr	r3, [r7, #16]
    2726:	2201      	movs	r2, #1
    2728:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    272a:	693b      	ldr	r3, [r7, #16]
    272c:	2203      	movs	r2, #3
    272e:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    2730:	693b      	ldr	r3, [r7, #16]
    2732:	69db      	ldr	r3, [r3, #28]
    2734:	1dfa      	adds	r2, r7, #7
    2736:	7810      	ldrb	r0, [r2, #0]
    2738:	2200      	movs	r2, #0
    273a:	2103      	movs	r1, #3
    273c:	4798      	blx	r3
	}
	return ERR_NONE;
    273e:	2300      	movs	r3, #0
}
    2740:	0018      	movs	r0, r3
    2742:	46bd      	mov	sp, r7
    2744:	b007      	add	sp, #28
    2746:	bd90      	pop	{r4, r7, pc}
    2748:	00001da9 	.word	0x00001da9
    274c:	20000a7c 	.word	0x20000a7c
    2750:	00006dc5 	.word	0x00006dc5

00002754 <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    2754:	b580      	push	{r7, lr}
    2756:	b082      	sub	sp, #8
    2758:	af00      	add	r7, sp, #0
    275a:	0002      	movs	r2, r0
    275c:	1dfb      	adds	r3, r7, #7
    275e:	701a      	strb	r2, [r3, #0]
    2760:	1dbb      	adds	r3, r7, #6
    2762:	1c0a      	adds	r2, r1, #0
    2764:	701a      	strb	r2, [r3, #0]
	if (ctrl == USB_EP_HALT_CLR) {
    2766:	1dbb      	adds	r3, r7, #6
    2768:	781b      	ldrb	r3, [r3, #0]
    276a:	2b00      	cmp	r3, #0
    276c:	d106      	bne.n	277c <usb_d_ep_halt+0x28>
		return _usb_d_ep_halt_clr(ep);
    276e:	1dfb      	adds	r3, r7, #7
    2770:	781b      	ldrb	r3, [r3, #0]
    2772:	0018      	movs	r0, r3
    2774:	4b0d      	ldr	r3, [pc, #52]	; (27ac <usb_d_ep_halt+0x58>)
    2776:	4798      	blx	r3
    2778:	0003      	movs	r3, r0
    277a:	e012      	b.n	27a2 <usb_d_ep_halt+0x4e>
	} else if (ctrl == USB_EP_HALT_SET) {
    277c:	1dbb      	adds	r3, r7, #6
    277e:	781b      	ldrb	r3, [r3, #0]
    2780:	2b01      	cmp	r3, #1
    2782:	d107      	bne.n	2794 <usb_d_ep_halt+0x40>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2784:	1dfb      	adds	r3, r7, #7
    2786:	781b      	ldrb	r3, [r3, #0]
    2788:	2101      	movs	r1, #1
    278a:	0018      	movs	r0, r3
    278c:	4b08      	ldr	r3, [pc, #32]	; (27b0 <usb_d_ep_halt+0x5c>)
    278e:	4798      	blx	r3
    2790:	0003      	movs	r3, r0
    2792:	e006      	b.n	27a2 <usb_d_ep_halt+0x4e>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    2794:	1dfb      	adds	r3, r7, #7
    2796:	781b      	ldrb	r3, [r3, #0]
    2798:	2102      	movs	r1, #2
    279a:	0018      	movs	r0, r3
    279c:	4b04      	ldr	r3, [pc, #16]	; (27b0 <usb_d_ep_halt+0x5c>)
    279e:	4798      	blx	r3
    27a0:	0003      	movs	r3, r0
	}
}
    27a2:	0018      	movs	r0, r3
    27a4:	46bd      	mov	sp, r7
    27a6:	b002      	add	sp, #8
    27a8:	bd80      	pop	{r7, pc}
    27aa:	46c0      	nop			; (mov r8, r8)
    27ac:	000026bd 	.word	0x000026bd
    27b0:	00006dc5 	.word	0x00006dc5

000027b4 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    27b4:	b590      	push	{r4, r7, lr}
    27b6:	b087      	sub	sp, #28
    27b8:	af00      	add	r7, sp, #0
    27ba:	603a      	str	r2, [r7, #0]
    27bc:	1dfb      	adds	r3, r7, #7
    27be:	1c02      	adds	r2, r0, #0
    27c0:	701a      	strb	r2, [r3, #0]
    27c2:	1dbb      	adds	r3, r7, #6
    27c4:	1c0a      	adds	r2, r1, #0
    27c6:	701a      	strb	r2, [r3, #0]
	int8_t           ep_index = _usb_d_find_ep(ep);
    27c8:	2317      	movs	r3, #23
    27ca:	18fc      	adds	r4, r7, r3
    27cc:	1dfb      	adds	r3, r7, #7
    27ce:	781b      	ldrb	r3, [r3, #0]
    27d0:	0018      	movs	r0, r3
    27d2:	4b18      	ldr	r3, [pc, #96]	; (2834 <usb_d_ep_register_callback+0x80>)
    27d4:	4798      	blx	r3
    27d6:	0003      	movs	r3, r0
    27d8:	7023      	strb	r3, [r4, #0]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    27da:	2317      	movs	r3, #23
    27dc:	18fb      	adds	r3, r7, r3
    27de:	781b      	ldrb	r3, [r3, #0]
    27e0:	b25b      	sxtb	r3, r3
    27e2:	015a      	lsls	r2, r3, #5
    27e4:	4b14      	ldr	r3, [pc, #80]	; (2838 <usb_d_ep_register_callback+0x84>)
    27e6:	18d3      	adds	r3, r2, r3
    27e8:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    27ea:	683b      	ldr	r3, [r7, #0]
    27ec:	2b00      	cmp	r3, #0
    27ee:	d001      	beq.n	27f4 <usb_d_ep_register_callback+0x40>
    27f0:	683b      	ldr	r3, [r7, #0]
    27f2:	e000      	b.n	27f6 <usb_d_ep_register_callback+0x42>
    27f4:	4b11      	ldr	r3, [pc, #68]	; (283c <usb_d_ep_register_callback+0x88>)
    27f6:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    27f8:	2317      	movs	r3, #23
    27fa:	18fb      	adds	r3, r7, r3
    27fc:	781b      	ldrb	r3, [r3, #0]
    27fe:	2b7f      	cmp	r3, #127	; 0x7f
    2800:	d814      	bhi.n	282c <usb_d_ep_register_callback+0x78>
		return;
	}
	switch (type) {
    2802:	1dbb      	adds	r3, r7, #6
    2804:	781b      	ldrb	r3, [r3, #0]
    2806:	2b01      	cmp	r3, #1
    2808:	d008      	beq.n	281c <usb_d_ep_register_callback+0x68>
    280a:	2b02      	cmp	r3, #2
    280c:	d00a      	beq.n	2824 <usb_d_ep_register_callback+0x70>
    280e:	2b00      	cmp	r3, #0
    2810:	d000      	beq.n	2814 <usb_d_ep_register_callback+0x60>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    2812:	e00c      	b.n	282e <usb_d_ep_register_callback+0x7a>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    2814:	693b      	ldr	r3, [r7, #16]
    2816:	68fa      	ldr	r2, [r7, #12]
    2818:	615a      	str	r2, [r3, #20]
		break;
    281a:	e008      	b.n	282e <usb_d_ep_register_callback+0x7a>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    281c:	693b      	ldr	r3, [r7, #16]
    281e:	68fa      	ldr	r2, [r7, #12]
    2820:	619a      	str	r2, [r3, #24]
		break;
    2822:	e004      	b.n	282e <usb_d_ep_register_callback+0x7a>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    2824:	693b      	ldr	r3, [r7, #16]
    2826:	68fa      	ldr	r2, [r7, #12]
    2828:	61da      	str	r2, [r3, #28]
		break;
    282a:	e000      	b.n	282e <usb_d_ep_register_callback+0x7a>
		return;
    282c:	46c0      	nop			; (mov r8, r8)
	}
}
    282e:	46bd      	mov	sp, r7
    2830:	b007      	add	sp, #28
    2832:	bd90      	pop	{r4, r7, pc}
    2834:	00001da9 	.word	0x00001da9
    2838:	20000a7c 	.word	0x20000a7c
    283c:	00001ec9 	.word	0x00001ec9

00002840 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    2840:	b580      	push	{r7, lr}
    2842:	b084      	sub	sp, #16
    2844:	af00      	add	r7, sp, #0
    2846:	60b9      	str	r1, [r7, #8]
    2848:	607a      	str	r2, [r7, #4]
    284a:	230f      	movs	r3, #15
    284c:	18fb      	adds	r3, r7, r3
    284e:	1c02      	adds	r2, r0, #0
    2850:	701a      	strb	r2, [r3, #0]
	if (!(condition)) {
    2852:	230f      	movs	r3, #15
    2854:	18fb      	adds	r3, r7, r3
    2856:	781b      	ldrb	r3, [r3, #0]
    2858:	2201      	movs	r2, #1
    285a:	4053      	eors	r3, r2
    285c:	b2db      	uxtb	r3, r3
    285e:	2b00      	cmp	r3, #0
    2860:	d000      	beq.n	2864 <assert+0x24>
		__asm("BKPT #0");
    2862:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    2864:	46c0      	nop			; (mov r8, r8)
    2866:	46bd      	mov	sp, r7
    2868:	b004      	add	sp, #16
    286a:	bd80      	pop	{r7, pc}

0000286c <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    286c:	b590      	push	{r4, r7, lr}
    286e:	b083      	sub	sp, #12
    2870:	af00      	add	r7, sp, #0
    2872:	6039      	str	r1, [r7, #0]
    2874:	0011      	movs	r1, r2
    2876:	1dbb      	adds	r3, r7, #6
    2878:	1c02      	adds	r2, r0, #0
    287a:	801a      	strh	r2, [r3, #0]
    287c:	1d7b      	adds	r3, r7, #5
    287e:	1c0a      	adds	r2, r1, #0
    2880:	701a      	strb	r2, [r3, #0]
	switch (power) {
    2882:	1d7b      	adds	r3, r7, #5
    2884:	781b      	ldrb	r3, [r3, #0]
    2886:	3b04      	subs	r3, #4
    2888:	2b04      	cmp	r3, #4
    288a:	d859      	bhi.n	2940 <_get_cycles_for_us_internal+0xd4>
    288c:	009a      	lsls	r2, r3, #2
    288e:	4b34      	ldr	r3, [pc, #208]	; (2960 <_get_cycles_for_us_internal+0xf4>)
    2890:	18d3      	adds	r3, r2, r3
    2892:	681b      	ldr	r3, [r3, #0]
    2894:	469f      	mov	pc, r3
	case 8:
		return (us * (freq / 100000) - 1) / 10 + 1;
    2896:	1dbb      	adds	r3, r7, #6
    2898:	881c      	ldrh	r4, [r3, #0]
    289a:	683a      	ldr	r2, [r7, #0]
    289c:	4b31      	ldr	r3, [pc, #196]	; (2964 <_get_cycles_for_us_internal+0xf8>)
    289e:	4932      	ldr	r1, [pc, #200]	; (2968 <_get_cycles_for_us_internal+0xfc>)
    28a0:	0010      	movs	r0, r2
    28a2:	4798      	blx	r3
    28a4:	0003      	movs	r3, r0
    28a6:	4363      	muls	r3, r4
    28a8:	1e5a      	subs	r2, r3, #1
    28aa:	4b2e      	ldr	r3, [pc, #184]	; (2964 <_get_cycles_for_us_internal+0xf8>)
    28ac:	210a      	movs	r1, #10
    28ae:	0010      	movs	r0, r2
    28b0:	4798      	blx	r3
    28b2:	0003      	movs	r3, r0
    28b4:	3301      	adds	r3, #1
    28b6:	e04e      	b.n	2956 <_get_cycles_for_us_internal+0xea>
	case 7:
		return (us * (freq / 10000) - 1) / 100 + 1;
    28b8:	1dbb      	adds	r3, r7, #6
    28ba:	881c      	ldrh	r4, [r3, #0]
    28bc:	683a      	ldr	r2, [r7, #0]
    28be:	4b29      	ldr	r3, [pc, #164]	; (2964 <_get_cycles_for_us_internal+0xf8>)
    28c0:	492a      	ldr	r1, [pc, #168]	; (296c <_get_cycles_for_us_internal+0x100>)
    28c2:	0010      	movs	r0, r2
    28c4:	4798      	blx	r3
    28c6:	0003      	movs	r3, r0
    28c8:	4363      	muls	r3, r4
    28ca:	1e5a      	subs	r2, r3, #1
    28cc:	4b25      	ldr	r3, [pc, #148]	; (2964 <_get_cycles_for_us_internal+0xf8>)
    28ce:	2164      	movs	r1, #100	; 0x64
    28d0:	0010      	movs	r0, r2
    28d2:	4798      	blx	r3
    28d4:	0003      	movs	r3, r0
    28d6:	3301      	adds	r3, #1
    28d8:	e03d      	b.n	2956 <_get_cycles_for_us_internal+0xea>
	case 6:
		return (us * (freq / 1000) - 1) / 1000 + 1;
    28da:	1dbb      	adds	r3, r7, #6
    28dc:	881c      	ldrh	r4, [r3, #0]
    28de:	6838      	ldr	r0, [r7, #0]
    28e0:	4b20      	ldr	r3, [pc, #128]	; (2964 <_get_cycles_for_us_internal+0xf8>)
    28e2:	22fa      	movs	r2, #250	; 0xfa
    28e4:	0091      	lsls	r1, r2, #2
    28e6:	4798      	blx	r3
    28e8:	0003      	movs	r3, r0
    28ea:	4363      	muls	r3, r4
    28ec:	1e58      	subs	r0, r3, #1
    28ee:	4b1d      	ldr	r3, [pc, #116]	; (2964 <_get_cycles_for_us_internal+0xf8>)
    28f0:	22fa      	movs	r2, #250	; 0xfa
    28f2:	0091      	lsls	r1, r2, #2
    28f4:	4798      	blx	r3
    28f6:	0003      	movs	r3, r0
    28f8:	3301      	adds	r3, #1
    28fa:	e02c      	b.n	2956 <_get_cycles_for_us_internal+0xea>
	case 5:
		return (us * (freq / 100) - 1) / 10000 + 1;
    28fc:	1dbb      	adds	r3, r7, #6
    28fe:	881c      	ldrh	r4, [r3, #0]
    2900:	683a      	ldr	r2, [r7, #0]
    2902:	4b18      	ldr	r3, [pc, #96]	; (2964 <_get_cycles_for_us_internal+0xf8>)
    2904:	2164      	movs	r1, #100	; 0x64
    2906:	0010      	movs	r0, r2
    2908:	4798      	blx	r3
    290a:	0003      	movs	r3, r0
    290c:	4363      	muls	r3, r4
    290e:	1e5a      	subs	r2, r3, #1
    2910:	4b14      	ldr	r3, [pc, #80]	; (2964 <_get_cycles_for_us_internal+0xf8>)
    2912:	4916      	ldr	r1, [pc, #88]	; (296c <_get_cycles_for_us_internal+0x100>)
    2914:	0010      	movs	r0, r2
    2916:	4798      	blx	r3
    2918:	0003      	movs	r3, r0
    291a:	3301      	adds	r3, #1
    291c:	e01b      	b.n	2956 <_get_cycles_for_us_internal+0xea>
	case 4:
		return (us * (freq / 10) - 1) / 100000 + 1;
    291e:	1dbb      	adds	r3, r7, #6
    2920:	881c      	ldrh	r4, [r3, #0]
    2922:	683a      	ldr	r2, [r7, #0]
    2924:	4b0f      	ldr	r3, [pc, #60]	; (2964 <_get_cycles_for_us_internal+0xf8>)
    2926:	210a      	movs	r1, #10
    2928:	0010      	movs	r0, r2
    292a:	4798      	blx	r3
    292c:	0003      	movs	r3, r0
    292e:	4363      	muls	r3, r4
    2930:	1e5a      	subs	r2, r3, #1
    2932:	4b0c      	ldr	r3, [pc, #48]	; (2964 <_get_cycles_for_us_internal+0xf8>)
    2934:	490c      	ldr	r1, [pc, #48]	; (2968 <_get_cycles_for_us_internal+0xfc>)
    2936:	0010      	movs	r0, r2
    2938:	4798      	blx	r3
    293a:	0003      	movs	r3, r0
    293c:	3301      	adds	r3, #1
    293e:	e00a      	b.n	2956 <_get_cycles_for_us_internal+0xea>
	default:
		return (us * freq - 1) / 1000000 + 1;
    2940:	1dbb      	adds	r3, r7, #6
    2942:	881b      	ldrh	r3, [r3, #0]
    2944:	683a      	ldr	r2, [r7, #0]
    2946:	4353      	muls	r3, r2
    2948:	1e5a      	subs	r2, r3, #1
    294a:	4b06      	ldr	r3, [pc, #24]	; (2964 <_get_cycles_for_us_internal+0xf8>)
    294c:	4908      	ldr	r1, [pc, #32]	; (2970 <_get_cycles_for_us_internal+0x104>)
    294e:	0010      	movs	r0, r2
    2950:	4798      	blx	r3
    2952:	0003      	movs	r3, r0
    2954:	3301      	adds	r3, #1
	}
}
    2956:	0018      	movs	r0, r3
    2958:	46bd      	mov	sp, r7
    295a:	b003      	add	sp, #12
    295c:	bd90      	pop	{r4, r7, pc}
    295e:	46c0      	nop			; (mov r8, r8)
    2960:	0000fc98 	.word	0x0000fc98
    2964:	00008c91 	.word	0x00008c91
    2968:	000186a0 	.word	0x000186a0
    296c:	00002710 	.word	0x00002710
    2970:	000f4240 	.word	0x000f4240

00002974 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    2974:	b590      	push	{r4, r7, lr}
    2976:	b083      	sub	sp, #12
    2978:	af00      	add	r7, sp, #0
    297a:	6039      	str	r1, [r7, #0]
    297c:	0011      	movs	r1, r2
    297e:	1dbb      	adds	r3, r7, #6
    2980:	1c02      	adds	r2, r0, #0
    2982:	801a      	strh	r2, [r3, #0]
    2984:	1d7b      	adds	r3, r7, #5
    2986:	1c0a      	adds	r2, r1, #0
    2988:	701a      	strb	r2, [r3, #0]
	switch (power) {
    298a:	1d7b      	adds	r3, r7, #5
    298c:	781b      	ldrb	r3, [r3, #0]
    298e:	3b04      	subs	r3, #4
    2990:	2b04      	cmp	r3, #4
    2992:	d84b      	bhi.n	2a2c <_get_cycles_for_ms_internal+0xb8>
    2994:	009a      	lsls	r2, r3, #2
    2996:	4b2d      	ldr	r3, [pc, #180]	; (2a4c <_get_cycles_for_ms_internal+0xd8>)
    2998:	18d3      	adds	r3, r2, r3
    299a:	681b      	ldr	r3, [r3, #0]
    299c:	469f      	mov	pc, r3
	case 8:
		return (ms * (freq / 100000)) * 100;
    299e:	1dbb      	adds	r3, r7, #6
    29a0:	881c      	ldrh	r4, [r3, #0]
    29a2:	683a      	ldr	r2, [r7, #0]
    29a4:	4b2a      	ldr	r3, [pc, #168]	; (2a50 <_get_cycles_for_ms_internal+0xdc>)
    29a6:	492b      	ldr	r1, [pc, #172]	; (2a54 <_get_cycles_for_ms_internal+0xe0>)
    29a8:	0010      	movs	r0, r2
    29aa:	4798      	blx	r3
    29ac:	0003      	movs	r3, r0
    29ae:	4363      	muls	r3, r4
    29b0:	2264      	movs	r2, #100	; 0x64
    29b2:	4353      	muls	r3, r2
    29b4:	e045      	b.n	2a42 <_get_cycles_for_ms_internal+0xce>
	case 7:
		return (ms * (freq / 10000)) * 10;
    29b6:	1dbb      	adds	r3, r7, #6
    29b8:	881c      	ldrh	r4, [r3, #0]
    29ba:	683a      	ldr	r2, [r7, #0]
    29bc:	4b24      	ldr	r3, [pc, #144]	; (2a50 <_get_cycles_for_ms_internal+0xdc>)
    29be:	4926      	ldr	r1, [pc, #152]	; (2a58 <_get_cycles_for_ms_internal+0xe4>)
    29c0:	0010      	movs	r0, r2
    29c2:	4798      	blx	r3
    29c4:	0003      	movs	r3, r0
    29c6:	4363      	muls	r3, r4
    29c8:	001a      	movs	r2, r3
    29ca:	0013      	movs	r3, r2
    29cc:	009b      	lsls	r3, r3, #2
    29ce:	189b      	adds	r3, r3, r2
    29d0:	005b      	lsls	r3, r3, #1
    29d2:	e036      	b.n	2a42 <_get_cycles_for_ms_internal+0xce>
	case 6:
		return (ms * (freq / 1000));
    29d4:	1dbb      	adds	r3, r7, #6
    29d6:	881c      	ldrh	r4, [r3, #0]
    29d8:	6838      	ldr	r0, [r7, #0]
    29da:	4b1d      	ldr	r3, [pc, #116]	; (2a50 <_get_cycles_for_ms_internal+0xdc>)
    29dc:	22fa      	movs	r2, #250	; 0xfa
    29de:	0091      	lsls	r1, r2, #2
    29e0:	4798      	blx	r3
    29e2:	0003      	movs	r3, r0
    29e4:	4363      	muls	r3, r4
    29e6:	e02c      	b.n	2a42 <_get_cycles_for_ms_internal+0xce>
	case 5:
		return (ms * (freq / 100) - 1) / 10 + 1;
    29e8:	1dbb      	adds	r3, r7, #6
    29ea:	881c      	ldrh	r4, [r3, #0]
    29ec:	683a      	ldr	r2, [r7, #0]
    29ee:	4b18      	ldr	r3, [pc, #96]	; (2a50 <_get_cycles_for_ms_internal+0xdc>)
    29f0:	2164      	movs	r1, #100	; 0x64
    29f2:	0010      	movs	r0, r2
    29f4:	4798      	blx	r3
    29f6:	0003      	movs	r3, r0
    29f8:	4363      	muls	r3, r4
    29fa:	1e5a      	subs	r2, r3, #1
    29fc:	4b14      	ldr	r3, [pc, #80]	; (2a50 <_get_cycles_for_ms_internal+0xdc>)
    29fe:	210a      	movs	r1, #10
    2a00:	0010      	movs	r0, r2
    2a02:	4798      	blx	r3
    2a04:	0003      	movs	r3, r0
    2a06:	3301      	adds	r3, #1
    2a08:	e01b      	b.n	2a42 <_get_cycles_for_ms_internal+0xce>
	case 4:
		return (ms * (freq / 10) - 1) / 100 + 1;
    2a0a:	1dbb      	adds	r3, r7, #6
    2a0c:	881c      	ldrh	r4, [r3, #0]
    2a0e:	683a      	ldr	r2, [r7, #0]
    2a10:	4b0f      	ldr	r3, [pc, #60]	; (2a50 <_get_cycles_for_ms_internal+0xdc>)
    2a12:	210a      	movs	r1, #10
    2a14:	0010      	movs	r0, r2
    2a16:	4798      	blx	r3
    2a18:	0003      	movs	r3, r0
    2a1a:	4363      	muls	r3, r4
    2a1c:	1e5a      	subs	r2, r3, #1
    2a1e:	4b0c      	ldr	r3, [pc, #48]	; (2a50 <_get_cycles_for_ms_internal+0xdc>)
    2a20:	2164      	movs	r1, #100	; 0x64
    2a22:	0010      	movs	r0, r2
    2a24:	4798      	blx	r3
    2a26:	0003      	movs	r3, r0
    2a28:	3301      	adds	r3, #1
    2a2a:	e00a      	b.n	2a42 <_get_cycles_for_ms_internal+0xce>
	default:
		return (ms * freq - 1) / 1000 + 1;
    2a2c:	1dbb      	adds	r3, r7, #6
    2a2e:	881b      	ldrh	r3, [r3, #0]
    2a30:	683a      	ldr	r2, [r7, #0]
    2a32:	4353      	muls	r3, r2
    2a34:	1e58      	subs	r0, r3, #1
    2a36:	4b06      	ldr	r3, [pc, #24]	; (2a50 <_get_cycles_for_ms_internal+0xdc>)
    2a38:	22fa      	movs	r2, #250	; 0xfa
    2a3a:	0091      	lsls	r1, r2, #2
    2a3c:	4798      	blx	r3
    2a3e:	0003      	movs	r3, r0
    2a40:	3301      	adds	r3, #1
	}
}
    2a42:	0018      	movs	r0, r3
    2a44:	46bd      	mov	sp, r7
    2a46:	b003      	add	sp, #12
    2a48:	bd90      	pop	{r4, r7, pc}
    2a4a:	46c0      	nop			; (mov r8, r8)
    2a4c:	0000fcac 	.word	0x0000fcac
    2a50:	00008c91 	.word	0x00008c91
    2a54:	000186a0 	.word	0x000186a0
    2a58:	00002710 	.word	0x00002710

00002a5c <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    2a5c:	b580      	push	{r7, lr}
    2a5e:	b082      	sub	sp, #8
    2a60:	af00      	add	r7, sp, #0
    2a62:	0002      	movs	r2, r0
    2a64:	1dbb      	adds	r3, r7, #6
    2a66:	801a      	strh	r2, [r3, #0]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    2a68:	4905      	ldr	r1, [pc, #20]	; (2a80 <_get_cycles_for_ms+0x24>)
    2a6a:	1dbb      	adds	r3, r7, #6
    2a6c:	881b      	ldrh	r3, [r3, #0]
    2a6e:	2208      	movs	r2, #8
    2a70:	0018      	movs	r0, r3
    2a72:	4b04      	ldr	r3, [pc, #16]	; (2a84 <_get_cycles_for_ms+0x28>)
    2a74:	4798      	blx	r3
    2a76:	0003      	movs	r3, r0
}
    2a78:	0018      	movs	r0, r3
    2a7a:	46bd      	mov	sp, r7
    2a7c:	b002      	add	sp, #8
    2a7e:	bd80      	pop	{r7, pc}
    2a80:	02dc7000 	.word	0x02dc7000
    2a84:	00002975 	.word	0x00002975

00002a88 <hri_nvmctrl_set_CTRLB_RWS_bf>:
	((Nvmctrl *)hw)->CTRLB.reg ^= NVMCTRL_CTRLB_CACHEDIS;
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
    2a88:	b580      	push	{r7, lr}
    2a8a:	b082      	sub	sp, #8
    2a8c:	af00      	add	r7, sp, #0
    2a8e:	6078      	str	r0, [r7, #4]
    2a90:	6039      	str	r1, [r7, #0]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    2a92:	687b      	ldr	r3, [r7, #4]
    2a94:	685a      	ldr	r2, [r3, #4]
    2a96:	683b      	ldr	r3, [r7, #0]
    2a98:	005b      	lsls	r3, r3, #1
    2a9a:	211e      	movs	r1, #30
    2a9c:	400b      	ands	r3, r1
    2a9e:	431a      	orrs	r2, r3
    2aa0:	687b      	ldr	r3, [r7, #4]
    2aa2:	605a      	str	r2, [r3, #4]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    2aa4:	46c0      	nop			; (mov r8, r8)
    2aa6:	46bd      	mov	sp, r7
    2aa8:	b002      	add	sp, #8
    2aaa:	bd80      	pop	{r7, pc}

00002aac <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    2aac:	b580      	push	{r7, lr}
    2aae:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    2ab0:	4b08      	ldr	r3, [pc, #32]	; (2ad4 <_init_chip+0x28>)
    2ab2:	2100      	movs	r1, #0
    2ab4:	0018      	movs	r0, r3
    2ab6:	4b08      	ldr	r3, [pc, #32]	; (2ad8 <_init_chip+0x2c>)
    2ab8:	4798      	blx	r3

	_pm_init();
    2aba:	4b08      	ldr	r3, [pc, #32]	; (2adc <_init_chip+0x30>)
    2abc:	4798      	blx	r3
	_sysctrl_init_sources();
    2abe:	4b08      	ldr	r3, [pc, #32]	; (2ae0 <_init_chip+0x34>)
    2ac0:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
    2ac2:	4b08      	ldr	r3, [pc, #32]	; (2ae4 <_init_chip+0x38>)
    2ac4:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    2ac6:	20ff      	movs	r0, #255	; 0xff
    2ac8:	4b07      	ldr	r3, [pc, #28]	; (2ae8 <_init_chip+0x3c>)
    2aca:	4798      	blx	r3
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
    2acc:	46c0      	nop			; (mov r8, r8)
    2ace:	46bd      	mov	sp, r7
    2ad0:	bd80      	pop	{r7, pc}
    2ad2:	46c0      	nop			; (mov r8, r8)
    2ad4:	41004000 	.word	0x41004000
    2ad8:	00002a89 	.word	0x00002a89
    2adc:	00002ff1 	.word	0x00002ff1
    2ae0:	00004245 	.word	0x00004245
    2ae4:	00004365 	.word	0x00004365
    2ae8:	00002e09 	.word	0x00002e09

00002aec <hri_dac_wait_for_sync>:
typedef uint8_t  hri_dac_intenset_reg_t;
typedef uint8_t  hri_dac_intflag_reg_t;
typedef uint8_t  hri_dac_status_reg_t;

static inline void hri_dac_wait_for_sync(const void *const hw)
{
    2aec:	b580      	push	{r7, lr}
    2aee:	b082      	sub	sp, #8
    2af0:	af00      	add	r7, sp, #0
    2af2:	6078      	str	r0, [r7, #4]
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    2af4:	46c0      	nop			; (mov r8, r8)
    2af6:	687b      	ldr	r3, [r7, #4]
    2af8:	79db      	ldrb	r3, [r3, #7]
    2afa:	061b      	lsls	r3, r3, #24
    2afc:	0fdb      	lsrs	r3, r3, #31
    2afe:	b2db      	uxtb	r3, r3
    2b00:	2b00      	cmp	r3, #0
    2b02:	d1f8      	bne.n	2af6 <hri_dac_wait_for_sync+0xa>
		;
}
    2b04:	46c0      	nop			; (mov r8, r8)
    2b06:	46bd      	mov	sp, r7
    2b08:	b002      	add	sp, #8
    2b0a:	bd80      	pop	{r7, pc}

00002b0c <hri_dac_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & DAC_CTRLA_SWRST) >> DAC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_dac_set_CTRLA_ENABLE_bit(const void *const hw)
{
    2b0c:	b580      	push	{r7, lr}
    2b0e:	b082      	sub	sp, #8
    2b10:	af00      	add	r7, sp, #0
    2b12:	6078      	str	r0, [r7, #4]
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->CTRLA.reg |= DAC_CTRLA_ENABLE;
    2b14:	687b      	ldr	r3, [r7, #4]
    2b16:	781b      	ldrb	r3, [r3, #0]
    2b18:	b2db      	uxtb	r3, r3
    2b1a:	2202      	movs	r2, #2
    2b1c:	4313      	orrs	r3, r2
    2b1e:	b2da      	uxtb	r2, r3
    2b20:	687b      	ldr	r3, [r7, #4]
    2b22:	701a      	strb	r2, [r3, #0]
	hri_dac_wait_for_sync(hw);
    2b24:	687b      	ldr	r3, [r7, #4]
    2b26:	0018      	movs	r0, r3
    2b28:	4b02      	ldr	r3, [pc, #8]	; (2b34 <hri_dac_set_CTRLA_ENABLE_bit+0x28>)
    2b2a:	4798      	blx	r3
	DAC_CRITICAL_SECTION_LEAVE();
}
    2b2c:	46c0      	nop			; (mov r8, r8)
    2b2e:	46bd      	mov	sp, r7
    2b30:	b002      	add	sp, #8
    2b32:	bd80      	pop	{r7, pc}
    2b34:	00002aed 	.word	0x00002aed

00002b38 <hri_dac_get_CTRLA_ENABLE_bit>:

static inline bool hri_dac_get_CTRLA_ENABLE_bit(const void *const hw)
{
    2b38:	b580      	push	{r7, lr}
    2b3a:	b084      	sub	sp, #16
    2b3c:	af00      	add	r7, sp, #0
    2b3e:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_dac_wait_for_sync(hw);
    2b40:	687b      	ldr	r3, [r7, #4]
    2b42:	0018      	movs	r0, r3
    2b44:	4b0d      	ldr	r3, [pc, #52]	; (2b7c <hri_dac_get_CTRLA_ENABLE_bit+0x44>)
    2b46:	4798      	blx	r3
	tmp = ((Dac *)hw)->CTRLA.reg;
    2b48:	230f      	movs	r3, #15
    2b4a:	18fb      	adds	r3, r7, r3
    2b4c:	687a      	ldr	r2, [r7, #4]
    2b4e:	7812      	ldrb	r2, [r2, #0]
    2b50:	701a      	strb	r2, [r3, #0]
	tmp = (tmp & DAC_CTRLA_ENABLE) >> DAC_CTRLA_ENABLE_Pos;
    2b52:	230f      	movs	r3, #15
    2b54:	18fb      	adds	r3, r7, r3
    2b56:	781b      	ldrb	r3, [r3, #0]
    2b58:	085b      	lsrs	r3, r3, #1
    2b5a:	b2da      	uxtb	r2, r3
    2b5c:	230f      	movs	r3, #15
    2b5e:	18fb      	adds	r3, r7, r3
    2b60:	2101      	movs	r1, #1
    2b62:	400a      	ands	r2, r1
    2b64:	701a      	strb	r2, [r3, #0]
	return (bool)tmp;
    2b66:	230f      	movs	r3, #15
    2b68:	18fb      	adds	r3, r7, r3
    2b6a:	781b      	ldrb	r3, [r3, #0]
    2b6c:	1e5a      	subs	r2, r3, #1
    2b6e:	4193      	sbcs	r3, r2
    2b70:	b2db      	uxtb	r3, r3
}
    2b72:	0018      	movs	r0, r3
    2b74:	46bd      	mov	sp, r7
    2b76:	b004      	add	sp, #16
    2b78:	bd80      	pop	{r7, pc}
    2b7a:	46c0      	nop			; (mov r8, r8)
    2b7c:	00002aed 	.word	0x00002aed

00002b80 <hri_dac_get_CTRLA_reg>:
	hri_dac_wait_for_sync(hw);
	DAC_CRITICAL_SECTION_LEAVE();
}

static inline hri_dac_ctrla_reg_t hri_dac_get_CTRLA_reg(const void *const hw, hri_dac_ctrla_reg_t mask)
{
    2b80:	b580      	push	{r7, lr}
    2b82:	b084      	sub	sp, #16
    2b84:	af00      	add	r7, sp, #0
    2b86:	6078      	str	r0, [r7, #4]
    2b88:	000a      	movs	r2, r1
    2b8a:	1cfb      	adds	r3, r7, #3
    2b8c:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	hri_dac_wait_for_sync(hw);
    2b8e:	687b      	ldr	r3, [r7, #4]
    2b90:	0018      	movs	r0, r3
    2b92:	4b0b      	ldr	r3, [pc, #44]	; (2bc0 <hri_dac_get_CTRLA_reg+0x40>)
    2b94:	4798      	blx	r3
	tmp = ((Dac *)hw)->CTRLA.reg;
    2b96:	230f      	movs	r3, #15
    2b98:	18fb      	adds	r3, r7, r3
    2b9a:	687a      	ldr	r2, [r7, #4]
    2b9c:	7812      	ldrb	r2, [r2, #0]
    2b9e:	701a      	strb	r2, [r3, #0]
	tmp &= mask;
    2ba0:	230f      	movs	r3, #15
    2ba2:	18fb      	adds	r3, r7, r3
    2ba4:	220f      	movs	r2, #15
    2ba6:	18ba      	adds	r2, r7, r2
    2ba8:	1cf9      	adds	r1, r7, #3
    2baa:	7812      	ldrb	r2, [r2, #0]
    2bac:	7809      	ldrb	r1, [r1, #0]
    2bae:	400a      	ands	r2, r1
    2bb0:	701a      	strb	r2, [r3, #0]
	return tmp;
    2bb2:	230f      	movs	r3, #15
    2bb4:	18fb      	adds	r3, r7, r3
    2bb6:	781b      	ldrb	r3, [r3, #0]
}
    2bb8:	0018      	movs	r0, r3
    2bba:	46bd      	mov	sp, r7
    2bbc:	b004      	add	sp, #16
    2bbe:	bd80      	pop	{r7, pc}
    2bc0:	00002aed 	.word	0x00002aed

00002bc4 <hri_dac_write_CTRLA_reg>:

static inline void hri_dac_write_CTRLA_reg(const void *const hw, hri_dac_ctrla_reg_t data)
{
    2bc4:	b580      	push	{r7, lr}
    2bc6:	b082      	sub	sp, #8
    2bc8:	af00      	add	r7, sp, #0
    2bca:	6078      	str	r0, [r7, #4]
    2bcc:	000a      	movs	r2, r1
    2bce:	1cfb      	adds	r3, r7, #3
    2bd0:	701a      	strb	r2, [r3, #0]
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->CTRLA.reg = data;
    2bd2:	687b      	ldr	r3, [r7, #4]
    2bd4:	1cfa      	adds	r2, r7, #3
    2bd6:	7812      	ldrb	r2, [r2, #0]
    2bd8:	701a      	strb	r2, [r3, #0]
	hri_dac_wait_for_sync(hw);
    2bda:	687b      	ldr	r3, [r7, #4]
    2bdc:	0018      	movs	r0, r3
    2bde:	4b03      	ldr	r3, [pc, #12]	; (2bec <hri_dac_write_CTRLA_reg+0x28>)
    2be0:	4798      	blx	r3
	DAC_CRITICAL_SECTION_LEAVE();
}
    2be2:	46c0      	nop			; (mov r8, r8)
    2be4:	46bd      	mov	sp, r7
    2be6:	b002      	add	sp, #8
    2be8:	bd80      	pop	{r7, pc}
    2bea:	46c0      	nop			; (mov r8, r8)
    2bec:	00002aed 	.word	0x00002aed

00002bf0 <hri_dac_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_dac_write_CTRLB_reg(const void *const hw, hri_dac_ctrlb_reg_t data)
{
    2bf0:	b580      	push	{r7, lr}
    2bf2:	b082      	sub	sp, #8
    2bf4:	af00      	add	r7, sp, #0
    2bf6:	6078      	str	r0, [r7, #4]
    2bf8:	000a      	movs	r2, r1
    2bfa:	1cfb      	adds	r3, r7, #3
    2bfc:	701a      	strb	r2, [r3, #0]
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->CTRLB.reg = data;
    2bfe:	687b      	ldr	r3, [r7, #4]
    2c00:	1cfa      	adds	r2, r7, #3
    2c02:	7812      	ldrb	r2, [r2, #0]
    2c04:	705a      	strb	r2, [r3, #1]
	DAC_CRITICAL_SECTION_LEAVE();
}
    2c06:	46c0      	nop			; (mov r8, r8)
    2c08:	46bd      	mov	sp, r7
    2c0a:	b002      	add	sp, #8
    2c0c:	bd80      	pop	{r7, pc}

00002c0e <hri_dac_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_dac_write_EVCTRL_reg(const void *const hw, hri_dac_evctrl_reg_t data)
{
    2c0e:	b580      	push	{r7, lr}
    2c10:	b082      	sub	sp, #8
    2c12:	af00      	add	r7, sp, #0
    2c14:	6078      	str	r0, [r7, #4]
    2c16:	000a      	movs	r2, r1
    2c18:	1cfb      	adds	r3, r7, #3
    2c1a:	701a      	strb	r2, [r3, #0]
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->EVCTRL.reg = data;
    2c1c:	687b      	ldr	r3, [r7, #4]
    2c1e:	1cfa      	adds	r2, r7, #3
    2c20:	7812      	ldrb	r2, [r2, #0]
    2c22:	709a      	strb	r2, [r3, #2]
	DAC_CRITICAL_SECTION_LEAVE();
}
    2c24:	46c0      	nop			; (mov r8, r8)
    2c26:	46bd      	mov	sp, r7
    2c28:	b002      	add	sp, #8
    2c2a:	bd80      	pop	{r7, pc}

00002c2c <hri_dac_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_dac_write_DATA_reg(const void *const hw, hri_dac_data_reg_t data)
{
    2c2c:	b580      	push	{r7, lr}
    2c2e:	b082      	sub	sp, #8
    2c30:	af00      	add	r7, sp, #0
    2c32:	6078      	str	r0, [r7, #4]
    2c34:	000a      	movs	r2, r1
    2c36:	1cbb      	adds	r3, r7, #2
    2c38:	801a      	strh	r2, [r3, #0]
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->DATA.reg = data;
    2c3a:	687b      	ldr	r3, [r7, #4]
    2c3c:	1cba      	adds	r2, r7, #2
    2c3e:	8812      	ldrh	r2, [r2, #0]
    2c40:	811a      	strh	r2, [r3, #8]
	hri_dac_wait_for_sync(hw);
    2c42:	687b      	ldr	r3, [r7, #4]
    2c44:	0018      	movs	r0, r3
    2c46:	4b03      	ldr	r3, [pc, #12]	; (2c54 <hri_dac_write_DATA_reg+0x28>)
    2c48:	4798      	blx	r3
	DAC_CRITICAL_SECTION_LEAVE();
}
    2c4a:	46c0      	nop			; (mov r8, r8)
    2c4c:	46bd      	mov	sp, r7
    2c4e:	b002      	add	sp, #8
    2c50:	bd80      	pop	{r7, pc}
    2c52:	46c0      	nop			; (mov r8, r8)
    2c54:	00002aed 	.word	0x00002aed

00002c58 <_dac_sync_init>:

/**
 * \brief Initialize synchronous DAC
 */
int32_t _dac_sync_init(struct _dac_sync_device *const device, void *const hw)
{
    2c58:	b580      	push	{r7, lr}
    2c5a:	b082      	sub	sp, #8
    2c5c:	af00      	add	r7, sp, #0
    2c5e:	6078      	str	r0, [r7, #4]
    2c60:	6039      	str	r1, [r7, #0]
	ASSERT(device);
    2c62:	687b      	ldr	r3, [r7, #4]
    2c64:	1e5a      	subs	r2, r3, #1
    2c66:	4193      	sbcs	r3, r2
    2c68:	b2db      	uxtb	r3, r3
    2c6a:	4909      	ldr	r1, [pc, #36]	; (2c90 <_dac_sync_init+0x38>)
    2c6c:	2249      	movs	r2, #73	; 0x49
    2c6e:	0018      	movs	r0, r3
    2c70:	4b08      	ldr	r3, [pc, #32]	; (2c94 <_dac_sync_init+0x3c>)
    2c72:	4798      	blx	r3

	device->hw = hw;
    2c74:	687b      	ldr	r3, [r7, #4]
    2c76:	683a      	ldr	r2, [r7, #0]
    2c78:	601a      	str	r2, [r3, #0]

	return _dac_init(device->hw);
    2c7a:	687b      	ldr	r3, [r7, #4]
    2c7c:	681b      	ldr	r3, [r3, #0]
    2c7e:	0018      	movs	r0, r3
    2c80:	4b05      	ldr	r3, [pc, #20]	; (2c98 <_dac_sync_init+0x40>)
    2c82:	4798      	blx	r3
    2c84:	0003      	movs	r3, r0
}
    2c86:	0018      	movs	r0, r3
    2c88:	46bd      	mov	sp, r7
    2c8a:	b002      	add	sp, #8
    2c8c:	bd80      	pop	{r7, pc}
    2c8e:	46c0      	nop			; (mov r8, r8)
    2c90:	0000fcc0 	.word	0x0000fcc0
    2c94:	00002841 	.word	0x00002841
    2c98:	00002c9d 	.word	0x00002c9d

00002c9c <_dac_init>:
 * \brief Initialize DAC
 *
 * param[in] hw The pointer to DAC hardware instance
 */
static int32_t _dac_init(void *const hw)
{
    2c9c:	b580      	push	{r7, lr}
    2c9e:	b082      	sub	sp, #8
    2ca0:	af00      	add	r7, sp, #0
    2ca2:	6078      	str	r0, [r7, #4]
	hri_dac_wait_for_sync(hw);
    2ca4:	687b      	ldr	r3, [r7, #4]
    2ca6:	0018      	movs	r0, r3
    2ca8:	4b1a      	ldr	r3, [pc, #104]	; (2d14 <_dac_init+0x78>)
    2caa:	4798      	blx	r3
	if (hri_dac_get_CTRLA_reg(hw, DAC_CTRLA_ENABLE)) {
    2cac:	687b      	ldr	r3, [r7, #4]
    2cae:	2102      	movs	r1, #2
    2cb0:	0018      	movs	r0, r3
    2cb2:	4b19      	ldr	r3, [pc, #100]	; (2d18 <_dac_init+0x7c>)
    2cb4:	4798      	blx	r3
    2cb6:	1e03      	subs	r3, r0, #0
    2cb8:	d008      	beq.n	2ccc <_dac_init+0x30>
		hri_dac_write_CTRLA_reg(hw, 0);
    2cba:	687b      	ldr	r3, [r7, #4]
    2cbc:	2100      	movs	r1, #0
    2cbe:	0018      	movs	r0, r3
    2cc0:	4b16      	ldr	r3, [pc, #88]	; (2d1c <_dac_init+0x80>)
    2cc2:	4798      	blx	r3
		hri_dac_wait_for_sync(hw);
    2cc4:	687b      	ldr	r3, [r7, #4]
    2cc6:	0018      	movs	r0, r3
    2cc8:	4b12      	ldr	r3, [pc, #72]	; (2d14 <_dac_init+0x78>)
    2cca:	4798      	blx	r3
	}
	hri_dac_write_CTRLA_reg(hw, DAC_CTRLA_SWRST);
    2ccc:	687b      	ldr	r3, [r7, #4]
    2cce:	2101      	movs	r1, #1
    2cd0:	0018      	movs	r0, r3
    2cd2:	4b12      	ldr	r3, [pc, #72]	; (2d1c <_dac_init+0x80>)
    2cd4:	4798      	blx	r3
	hri_dac_wait_for_sync(hw);
    2cd6:	687b      	ldr	r3, [r7, #4]
    2cd8:	0018      	movs	r0, r3
    2cda:	4b0e      	ldr	r3, [pc, #56]	; (2d14 <_dac_init+0x78>)
    2cdc:	4798      	blx	r3

	hri_dac_write_EVCTRL_reg(hw, _dac.ev_ctrl);
    2cde:	4b10      	ldr	r3, [pc, #64]	; (2d20 <_dac_init+0x84>)
    2ce0:	789a      	ldrb	r2, [r3, #2]
    2ce2:	687b      	ldr	r3, [r7, #4]
    2ce4:	0011      	movs	r1, r2
    2ce6:	0018      	movs	r0, r3
    2ce8:	4b0e      	ldr	r3, [pc, #56]	; (2d24 <_dac_init+0x88>)
    2cea:	4798      	blx	r3
	hri_dac_write_CTRLB_reg(hw, _dac.ctrlb);
    2cec:	4b0c      	ldr	r3, [pc, #48]	; (2d20 <_dac_init+0x84>)
    2cee:	785a      	ldrb	r2, [r3, #1]
    2cf0:	687b      	ldr	r3, [r7, #4]
    2cf2:	0011      	movs	r1, r2
    2cf4:	0018      	movs	r0, r3
    2cf6:	4b0c      	ldr	r3, [pc, #48]	; (2d28 <_dac_init+0x8c>)
    2cf8:	4798      	blx	r3
	hri_dac_write_CTRLA_reg(hw, _dac.ctrla);
    2cfa:	4b09      	ldr	r3, [pc, #36]	; (2d20 <_dac_init+0x84>)
    2cfc:	781a      	ldrb	r2, [r3, #0]
    2cfe:	687b      	ldr	r3, [r7, #4]
    2d00:	0011      	movs	r1, r2
    2d02:	0018      	movs	r0, r3
    2d04:	4b05      	ldr	r3, [pc, #20]	; (2d1c <_dac_init+0x80>)
    2d06:	4798      	blx	r3
	return ERR_NONE;
    2d08:	2300      	movs	r3, #0
}
    2d0a:	0018      	movs	r0, r3
    2d0c:	46bd      	mov	sp, r7
    2d0e:	b002      	add	sp, #8
    2d10:	bd80      	pop	{r7, pc}
    2d12:	46c0      	nop			; (mov r8, r8)
    2d14:	00002aed 	.word	0x00002aed
    2d18:	00002b81 	.word	0x00002b81
    2d1c:	00002bc5 	.word	0x00002bc5
    2d20:	20000004 	.word	0x20000004
    2d24:	00002c0f 	.word	0x00002c0f
    2d28:	00002bf1 	.word	0x00002bf1

00002d2c <_dac_sync_enable_channel>:

/**
 * \brief Enable DAC Channel
 */
void _dac_sync_enable_channel(struct _dac_sync_device *const device, const uint8_t ch)
{
    2d2c:	b580      	push	{r7, lr}
    2d2e:	b082      	sub	sp, #8
    2d30:	af00      	add	r7, sp, #0
    2d32:	6078      	str	r0, [r7, #4]
    2d34:	000a      	movs	r2, r1
    2d36:	1cfb      	adds	r3, r7, #3
    2d38:	701a      	strb	r2, [r3, #0]
	(void)ch;
	hri_dac_set_CTRLA_ENABLE_bit(device->hw);
    2d3a:	687b      	ldr	r3, [r7, #4]
    2d3c:	681b      	ldr	r3, [r3, #0]
    2d3e:	0018      	movs	r0, r3
    2d40:	4b02      	ldr	r3, [pc, #8]	; (2d4c <_dac_sync_enable_channel+0x20>)
    2d42:	4798      	blx	r3
}
    2d44:	46c0      	nop			; (mov r8, r8)
    2d46:	46bd      	mov	sp, r7
    2d48:	b002      	add	sp, #8
    2d4a:	bd80      	pop	{r7, pc}
    2d4c:	00002b0d 	.word	0x00002b0d

00002d50 <_dac_sync_is_channel_enable>:
	(void)ch;
	hri_dac_clear_CTRLA_ENABLE_bit(device->hw);
}

bool _dac_sync_is_channel_enable(struct _dac_sync_device *const device, const uint8_t ch)
{
    2d50:	b580      	push	{r7, lr}
    2d52:	b082      	sub	sp, #8
    2d54:	af00      	add	r7, sp, #0
    2d56:	6078      	str	r0, [r7, #4]
    2d58:	000a      	movs	r2, r1
    2d5a:	1cfb      	adds	r3, r7, #3
    2d5c:	701a      	strb	r2, [r3, #0]
	(void)ch;
	return hri_dac_get_CTRLA_ENABLE_bit(device->hw);
    2d5e:	687b      	ldr	r3, [r7, #4]
    2d60:	681b      	ldr	r3, [r3, #0]
    2d62:	0018      	movs	r0, r3
    2d64:	4b03      	ldr	r3, [pc, #12]	; (2d74 <_dac_sync_is_channel_enable+0x24>)
    2d66:	4798      	blx	r3
    2d68:	0003      	movs	r3, r0
}
    2d6a:	0018      	movs	r0, r3
    2d6c:	46bd      	mov	sp, r7
    2d6e:	b002      	add	sp, #8
    2d70:	bd80      	pop	{r7, pc}
    2d72:	46c0      	nop			; (mov r8, r8)
    2d74:	00002b39 	.word	0x00002b39

00002d78 <_dac_sync_write_data>:

/**
 * \brief write synchronous DAC data for output
 */
void _dac_sync_write_data(struct _dac_sync_device *const device, const uint16_t data, const uint8_t ch)
{
    2d78:	b580      	push	{r7, lr}
    2d7a:	b082      	sub	sp, #8
    2d7c:	af00      	add	r7, sp, #0
    2d7e:	6078      	str	r0, [r7, #4]
    2d80:	0008      	movs	r0, r1
    2d82:	0011      	movs	r1, r2
    2d84:	1cbb      	adds	r3, r7, #2
    2d86:	1c02      	adds	r2, r0, #0
    2d88:	801a      	strh	r2, [r3, #0]
    2d8a:	1c7b      	adds	r3, r7, #1
    2d8c:	1c0a      	adds	r2, r1, #0
    2d8e:	701a      	strb	r2, [r3, #0]
	(void)ch;
	hri_dac_write_DATA_reg(device->hw, data);
    2d90:	687b      	ldr	r3, [r7, #4]
    2d92:	681a      	ldr	r2, [r3, #0]
    2d94:	1cbb      	adds	r3, r7, #2
    2d96:	881b      	ldrh	r3, [r3, #0]
    2d98:	0019      	movs	r1, r3
    2d9a:	0010      	movs	r0, r2
    2d9c:	4b02      	ldr	r3, [pc, #8]	; (2da8 <_dac_sync_write_data+0x30>)
    2d9e:	4798      	blx	r3
}
    2da0:	46c0      	nop			; (mov r8, r8)
    2da2:	46bd      	mov	sp, r7
    2da4:	b002      	add	sp, #8
    2da6:	bd80      	pop	{r7, pc}
    2da8:	00002c2d 	.word	0x00002c2d

00002dac <hri_gclk_wait_for_sync>:
{
    2dac:	b580      	push	{r7, lr}
    2dae:	b082      	sub	sp, #8
    2db0:	af00      	add	r7, sp, #0
    2db2:	6078      	str	r0, [r7, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    2db4:	46c0      	nop			; (mov r8, r8)
    2db6:	687b      	ldr	r3, [r7, #4]
    2db8:	785b      	ldrb	r3, [r3, #1]
    2dba:	061b      	lsls	r3, r3, #24
    2dbc:	0fdb      	lsrs	r3, r3, #31
    2dbe:	b2db      	uxtb	r3, r3
    2dc0:	2b00      	cmp	r3, #0
    2dc2:	d1f8      	bne.n	2db6 <hri_gclk_wait_for_sync+0xa>
}
    2dc4:	46c0      	nop			; (mov r8, r8)
    2dc6:	46bd      	mov	sp, r7
    2dc8:	b002      	add	sp, #8
    2dca:	bd80      	pop	{r7, pc}

00002dcc <hri_gclk_write_GENCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_GENCTRL_reg(const void *const hw, hri_gclk_genctrl_reg_t data)
{
    2dcc:	b580      	push	{r7, lr}
    2dce:	b082      	sub	sp, #8
    2dd0:	af00      	add	r7, sp, #0
    2dd2:	6078      	str	r0, [r7, #4]
    2dd4:	6039      	str	r1, [r7, #0]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENCTRL.reg = data;
    2dd6:	687b      	ldr	r3, [r7, #4]
    2dd8:	683a      	ldr	r2, [r7, #0]
    2dda:	605a      	str	r2, [r3, #4]
	hri_gclk_wait_for_sync(hw);
    2ddc:	687b      	ldr	r3, [r7, #4]
    2dde:	0018      	movs	r0, r3
    2de0:	4b02      	ldr	r3, [pc, #8]	; (2dec <hri_gclk_write_GENCTRL_reg+0x20>)
    2de2:	4798      	blx	r3
	GCLK_CRITICAL_SECTION_LEAVE();
}
    2de4:	46c0      	nop			; (mov r8, r8)
    2de6:	46bd      	mov	sp, r7
    2de8:	b002      	add	sp, #8
    2dea:	bd80      	pop	{r7, pc}
    2dec:	00002dad 	.word	0x00002dad

00002df0 <hri_gclk_write_GENDIV_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
    2df0:	b580      	push	{r7, lr}
    2df2:	b082      	sub	sp, #8
    2df4:	af00      	add	r7, sp, #0
    2df6:	6078      	str	r0, [r7, #4]
    2df8:	6039      	str	r1, [r7, #0]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
    2dfa:	687b      	ldr	r3, [r7, #4]
    2dfc:	683a      	ldr	r2, [r7, #0]
    2dfe:	609a      	str	r2, [r3, #8]
	GCLK_CRITICAL_SECTION_LEAVE();
}
    2e00:	46c0      	nop			; (mov r8, r8)
    2e02:	46bd      	mov	sp, r7
    2e04:	b002      	add	sp, #8
    2e06:	bd80      	pop	{r7, pc}

00002e08 <_gclk_init_generators_by_fref>:
	        | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    2e08:	b580      	push	{r7, lr}
    2e0a:	b082      	sub	sp, #8
    2e0c:	af00      	add	r7, sp, #0
    2e0e:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    2e10:	687b      	ldr	r3, [r7, #4]
    2e12:	2201      	movs	r2, #1
    2e14:	4013      	ands	r3, r2
    2e16:	d00c      	beq.n	2e32 <_gclk_init_generators_by_fref+0x2a>
		hri_gclk_write_GENDIV_reg(GCLK, GCLK_GENDIV_DIV(CONF_GCLK_GEN_0_DIV) | GCLK_GENDIV_ID(0));
    2e18:	2380      	movs	r3, #128	; 0x80
    2e1a:	005b      	lsls	r3, r3, #1
    2e1c:	4a38      	ldr	r2, [pc, #224]	; (2f00 <_gclk_init_generators_by_fref+0xf8>)
    2e1e:	0019      	movs	r1, r3
    2e20:	0010      	movs	r0, r2
    2e22:	4b38      	ldr	r3, [pc, #224]	; (2f04 <_gclk_init_generators_by_fref+0xfc>)
    2e24:	4798      	blx	r3
		hri_gclk_write_GENCTRL_reg(
    2e26:	4a38      	ldr	r2, [pc, #224]	; (2f08 <_gclk_init_generators_by_fref+0x100>)
    2e28:	4b35      	ldr	r3, [pc, #212]	; (2f00 <_gclk_init_generators_by_fref+0xf8>)
    2e2a:	0011      	movs	r1, r2
    2e2c:	0018      	movs	r0, r3
    2e2e:	4b37      	ldr	r3, [pc, #220]	; (2f0c <_gclk_init_generators_by_fref+0x104>)
    2e30:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SRC | GCLK_GENCTRL_ID(0));
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    2e32:	687b      	ldr	r3, [r7, #4]
    2e34:	2202      	movs	r2, #2
    2e36:	4013      	ands	r3, r2
    2e38:	d00b      	beq.n	2e52 <_gclk_init_generators_by_fref+0x4a>
		hri_gclk_write_GENDIV_reg(GCLK, GCLK_GENDIV_DIV(CONF_GCLK_GEN_1_DIV) | GCLK_GENDIV_ID(1));
    2e3a:	4a35      	ldr	r2, [pc, #212]	; (2f10 <_gclk_init_generators_by_fref+0x108>)
    2e3c:	4b30      	ldr	r3, [pc, #192]	; (2f00 <_gclk_init_generators_by_fref+0xf8>)
    2e3e:	0011      	movs	r1, r2
    2e40:	0018      	movs	r0, r3
    2e42:	4b30      	ldr	r3, [pc, #192]	; (2f04 <_gclk_init_generators_by_fref+0xfc>)
    2e44:	4798      	blx	r3
		hri_gclk_write_GENCTRL_reg(
    2e46:	4a33      	ldr	r2, [pc, #204]	; (2f14 <_gclk_init_generators_by_fref+0x10c>)
    2e48:	4b2d      	ldr	r3, [pc, #180]	; (2f00 <_gclk_init_generators_by_fref+0xf8>)
    2e4a:	0011      	movs	r1, r2
    2e4c:	0018      	movs	r0, r3
    2e4e:	4b2f      	ldr	r3, [pc, #188]	; (2f0c <_gclk_init_generators_by_fref+0x104>)
    2e50:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SRC | GCLK_GENCTRL_ID(1));
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    2e52:	687b      	ldr	r3, [r7, #4]
    2e54:	2204      	movs	r2, #4
    2e56:	4013      	ands	r3, r2
    2e58:	d00b      	beq.n	2e72 <_gclk_init_generators_by_fref+0x6a>
		hri_gclk_write_GENDIV_reg(GCLK, GCLK_GENDIV_DIV(CONF_GCLK_GEN_2_DIV) | GCLK_GENDIV_ID(2));
    2e5a:	4a2f      	ldr	r2, [pc, #188]	; (2f18 <_gclk_init_generators_by_fref+0x110>)
    2e5c:	4b28      	ldr	r3, [pc, #160]	; (2f00 <_gclk_init_generators_by_fref+0xf8>)
    2e5e:	0011      	movs	r1, r2
    2e60:	0018      	movs	r0, r3
    2e62:	4b28      	ldr	r3, [pc, #160]	; (2f04 <_gclk_init_generators_by_fref+0xfc>)
    2e64:	4798      	blx	r3
		hri_gclk_write_GENCTRL_reg(
    2e66:	4a2d      	ldr	r2, [pc, #180]	; (2f1c <_gclk_init_generators_by_fref+0x114>)
    2e68:	4b25      	ldr	r3, [pc, #148]	; (2f00 <_gclk_init_generators_by_fref+0xf8>)
    2e6a:	0011      	movs	r1, r2
    2e6c:	0018      	movs	r0, r3
    2e6e:	4b27      	ldr	r3, [pc, #156]	; (2f0c <_gclk_init_generators_by_fref+0x104>)
    2e70:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    2e72:	687b      	ldr	r3, [r7, #4]
    2e74:	2208      	movs	r2, #8
    2e76:	4013      	ands	r3, r2
    2e78:	d00b      	beq.n	2e92 <_gclk_init_generators_by_fref+0x8a>
		hri_gclk_write_GENDIV_reg(GCLK, GCLK_GENDIV_DIV(CONF_GCLK_GEN_3_DIV) | GCLK_GENDIV_ID(3));
    2e7a:	4a29      	ldr	r2, [pc, #164]	; (2f20 <_gclk_init_generators_by_fref+0x118>)
    2e7c:	4b20      	ldr	r3, [pc, #128]	; (2f00 <_gclk_init_generators_by_fref+0xf8>)
    2e7e:	0011      	movs	r1, r2
    2e80:	0018      	movs	r0, r3
    2e82:	4b20      	ldr	r3, [pc, #128]	; (2f04 <_gclk_init_generators_by_fref+0xfc>)
    2e84:	4798      	blx	r3
		hri_gclk_write_GENCTRL_reg(
    2e86:	4a27      	ldr	r2, [pc, #156]	; (2f24 <_gclk_init_generators_by_fref+0x11c>)
    2e88:	4b1d      	ldr	r3, [pc, #116]	; (2f00 <_gclk_init_generators_by_fref+0xf8>)
    2e8a:	0011      	movs	r1, r2
    2e8c:	0018      	movs	r0, r3
    2e8e:	4b1f      	ldr	r3, [pc, #124]	; (2f0c <_gclk_init_generators_by_fref+0x104>)
    2e90:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SRC | GCLK_GENCTRL_ID(3));
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    2e92:	687b      	ldr	r3, [r7, #4]
    2e94:	2210      	movs	r2, #16
    2e96:	4013      	ands	r3, r2
    2e98:	d00c      	beq.n	2eb4 <_gclk_init_generators_by_fref+0xac>
		hri_gclk_write_GENDIV_reg(GCLK, GCLK_GENDIV_DIV(CONF_GCLK_GEN_4_DIV) | GCLK_GENDIV_ID(4));
    2e9a:	2382      	movs	r3, #130	; 0x82
    2e9c:	005b      	lsls	r3, r3, #1
    2e9e:	4a18      	ldr	r2, [pc, #96]	; (2f00 <_gclk_init_generators_by_fref+0xf8>)
    2ea0:	0019      	movs	r1, r3
    2ea2:	0010      	movs	r0, r2
    2ea4:	4b17      	ldr	r3, [pc, #92]	; (2f04 <_gclk_init_generators_by_fref+0xfc>)
    2ea6:	4798      	blx	r3
		hri_gclk_write_GENCTRL_reg(
    2ea8:	4a1f      	ldr	r2, [pc, #124]	; (2f28 <_gclk_init_generators_by_fref+0x120>)
    2eaa:	4b15      	ldr	r3, [pc, #84]	; (2f00 <_gclk_init_generators_by_fref+0xf8>)
    2eac:	0011      	movs	r1, r2
    2eae:	0018      	movs	r0, r3
    2eb0:	4b16      	ldr	r3, [pc, #88]	; (2f0c <_gclk_init_generators_by_fref+0x104>)
    2eb2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SRC | GCLK_GENCTRL_ID(4));
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    2eb4:	687b      	ldr	r3, [r7, #4]
    2eb6:	2220      	movs	r2, #32
    2eb8:	4013      	ands	r3, r2
    2eba:	d00b      	beq.n	2ed4 <_gclk_init_generators_by_fref+0xcc>
		hri_gclk_write_GENDIV_reg(GCLK, GCLK_GENDIV_DIV(CONF_GCLK_GEN_5_DIV) | GCLK_GENDIV_ID(5));
    2ebc:	4a1b      	ldr	r2, [pc, #108]	; (2f2c <_gclk_init_generators_by_fref+0x124>)
    2ebe:	4b10      	ldr	r3, [pc, #64]	; (2f00 <_gclk_init_generators_by_fref+0xf8>)
    2ec0:	0011      	movs	r1, r2
    2ec2:	0018      	movs	r0, r3
    2ec4:	4b0f      	ldr	r3, [pc, #60]	; (2f04 <_gclk_init_generators_by_fref+0xfc>)
    2ec6:	4798      	blx	r3
		hri_gclk_write_GENCTRL_reg(
    2ec8:	4a19      	ldr	r2, [pc, #100]	; (2f30 <_gclk_init_generators_by_fref+0x128>)
    2eca:	4b0d      	ldr	r3, [pc, #52]	; (2f00 <_gclk_init_generators_by_fref+0xf8>)
    2ecc:	0011      	movs	r1, r2
    2ece:	0018      	movs	r0, r3
    2ed0:	4b0e      	ldr	r3, [pc, #56]	; (2f0c <_gclk_init_generators_by_fref+0x104>)
    2ed2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SRC | GCLK_GENCTRL_ID(5));
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    2ed4:	687b      	ldr	r3, [r7, #4]
    2ed6:	2240      	movs	r2, #64	; 0x40
    2ed8:	4013      	ands	r3, r2
    2eda:	d00c      	beq.n	2ef6 <_gclk_init_generators_by_fref+0xee>
		hri_gclk_write_GENDIV_reg(GCLK, GCLK_GENDIV_DIV(CONF_GCLK_GEN_6_DIV) | GCLK_GENDIV_ID(6));
    2edc:	2383      	movs	r3, #131	; 0x83
    2ede:	005b      	lsls	r3, r3, #1
    2ee0:	4a07      	ldr	r2, [pc, #28]	; (2f00 <_gclk_init_generators_by_fref+0xf8>)
    2ee2:	0019      	movs	r1, r3
    2ee4:	0010      	movs	r0, r2
    2ee6:	4b07      	ldr	r3, [pc, #28]	; (2f04 <_gclk_init_generators_by_fref+0xfc>)
    2ee8:	4798      	blx	r3
		hri_gclk_write_GENCTRL_reg(
    2eea:	4a12      	ldr	r2, [pc, #72]	; (2f34 <_gclk_init_generators_by_fref+0x12c>)
    2eec:	4b04      	ldr	r3, [pc, #16]	; (2f00 <_gclk_init_generators_by_fref+0xf8>)
    2eee:	0011      	movs	r1, r2
    2ef0:	0018      	movs	r0, r3
    2ef2:	4b06      	ldr	r3, [pc, #24]	; (2f0c <_gclk_init_generators_by_fref+0x104>)
    2ef4:	4798      	blx	r3
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
    2ef6:	46c0      	nop			; (mov r8, r8)
    2ef8:	46bd      	mov	sp, r7
    2efa:	b002      	add	sp, #8
    2efc:	bd80      	pop	{r7, pc}
    2efe:	46c0      	nop			; (mov r8, r8)
    2f00:	40000c00 	.word	0x40000c00
    2f04:	00002df1 	.word	0x00002df1
    2f08:	00290800 	.word	0x00290800
    2f0c:	00002dcd 	.word	0x00002dcd
    2f10:	00000601 	.word	0x00000601
    2f14:	00010801 	.word	0x00010801
    2f18:	00000402 	.word	0x00000402
    2f1c:	00210602 	.word	0x00210602
    2f20:	00000803 	.word	0x00000803
    2f24:	00290603 	.word	0x00290603
    2f28:	00090704 	.word	0x00090704
    2f2c:	00000305 	.word	0x00000305
    2f30:	00010805 	.word	0x00010805
    2f34:	00210406 	.word	0x00210406

00002f38 <hri_pm_set_CPUSEL_CPUDIV_bf>:
{
	return ((Pm *)hw)->SLEEP.reg;
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
    2f38:	b580      	push	{r7, lr}
    2f3a:	b082      	sub	sp, #8
    2f3c:	af00      	add	r7, sp, #0
    2f3e:	6078      	str	r0, [r7, #4]
    2f40:	000a      	movs	r2, r1
    2f42:	1cfb      	adds	r3, r7, #3
    2f44:	701a      	strb	r2, [r3, #0]
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
    2f46:	687b      	ldr	r3, [r7, #4]
    2f48:	7a1b      	ldrb	r3, [r3, #8]
    2f4a:	b2da      	uxtb	r2, r3
    2f4c:	1cfb      	adds	r3, r7, #3
    2f4e:	781b      	ldrb	r3, [r3, #0]
    2f50:	2107      	movs	r1, #7
    2f52:	400b      	ands	r3, r1
    2f54:	b2db      	uxtb	r3, r3
    2f56:	4313      	orrs	r3, r2
    2f58:	b2da      	uxtb	r2, r3
    2f5a:	687b      	ldr	r3, [r7, #4]
    2f5c:	721a      	strb	r2, [r3, #8]
	PM_CRITICAL_SECTION_LEAVE();
}
    2f5e:	46c0      	nop			; (mov r8, r8)
    2f60:	46bd      	mov	sp, r7
    2f62:	b002      	add	sp, #8
    2f64:	bd80      	pop	{r7, pc}

00002f66 <hri_pm_set_APBASEL_APBADIV_bf>:
{
	return ((Pm *)hw)->CPUSEL.reg;
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
    2f66:	b580      	push	{r7, lr}
    2f68:	b082      	sub	sp, #8
    2f6a:	af00      	add	r7, sp, #0
    2f6c:	6078      	str	r0, [r7, #4]
    2f6e:	000a      	movs	r2, r1
    2f70:	1cfb      	adds	r3, r7, #3
    2f72:	701a      	strb	r2, [r3, #0]
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
    2f74:	687b      	ldr	r3, [r7, #4]
    2f76:	7a5b      	ldrb	r3, [r3, #9]
    2f78:	b2da      	uxtb	r2, r3
    2f7a:	1cfb      	adds	r3, r7, #3
    2f7c:	781b      	ldrb	r3, [r3, #0]
    2f7e:	2107      	movs	r1, #7
    2f80:	400b      	ands	r3, r1
    2f82:	b2db      	uxtb	r3, r3
    2f84:	4313      	orrs	r3, r2
    2f86:	b2da      	uxtb	r2, r3
    2f88:	687b      	ldr	r3, [r7, #4]
    2f8a:	725a      	strb	r2, [r3, #9]
	PM_CRITICAL_SECTION_LEAVE();
}
    2f8c:	46c0      	nop			; (mov r8, r8)
    2f8e:	46bd      	mov	sp, r7
    2f90:	b002      	add	sp, #8
    2f92:	bd80      	pop	{r7, pc}

00002f94 <hri_pm_set_APBBSEL_APBBDIV_bf>:
{
	return ((Pm *)hw)->APBASEL.reg;
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
    2f94:	b580      	push	{r7, lr}
    2f96:	b082      	sub	sp, #8
    2f98:	af00      	add	r7, sp, #0
    2f9a:	6078      	str	r0, [r7, #4]
    2f9c:	000a      	movs	r2, r1
    2f9e:	1cfb      	adds	r3, r7, #3
    2fa0:	701a      	strb	r2, [r3, #0]
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
    2fa2:	687b      	ldr	r3, [r7, #4]
    2fa4:	7a9b      	ldrb	r3, [r3, #10]
    2fa6:	b2da      	uxtb	r2, r3
    2fa8:	1cfb      	adds	r3, r7, #3
    2faa:	781b      	ldrb	r3, [r3, #0]
    2fac:	2107      	movs	r1, #7
    2fae:	400b      	ands	r3, r1
    2fb0:	b2db      	uxtb	r3, r3
    2fb2:	4313      	orrs	r3, r2
    2fb4:	b2da      	uxtb	r2, r3
    2fb6:	687b      	ldr	r3, [r7, #4]
    2fb8:	729a      	strb	r2, [r3, #10]
	PM_CRITICAL_SECTION_LEAVE();
}
    2fba:	46c0      	nop			; (mov r8, r8)
    2fbc:	46bd      	mov	sp, r7
    2fbe:	b002      	add	sp, #8
    2fc0:	bd80      	pop	{r7, pc}

00002fc2 <hri_pm_set_APBCSEL_APBCDIV_bf>:
{
	return ((Pm *)hw)->APBBSEL.reg;
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
    2fc2:	b580      	push	{r7, lr}
    2fc4:	b082      	sub	sp, #8
    2fc6:	af00      	add	r7, sp, #0
    2fc8:	6078      	str	r0, [r7, #4]
    2fca:	000a      	movs	r2, r1
    2fcc:	1cfb      	adds	r3, r7, #3
    2fce:	701a      	strb	r2, [r3, #0]
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
    2fd0:	687b      	ldr	r3, [r7, #4]
    2fd2:	7adb      	ldrb	r3, [r3, #11]
    2fd4:	b2da      	uxtb	r2, r3
    2fd6:	1cfb      	adds	r3, r7, #3
    2fd8:	781b      	ldrb	r3, [r3, #0]
    2fda:	2107      	movs	r1, #7
    2fdc:	400b      	ands	r3, r1
    2fde:	b2db      	uxtb	r3, r3
    2fe0:	4313      	orrs	r3, r2
    2fe2:	b2da      	uxtb	r2, r3
    2fe4:	687b      	ldr	r3, [r7, #4]
    2fe6:	72da      	strb	r2, [r3, #11]
	PM_CRITICAL_SECTION_LEAVE();
}
    2fe8:	46c0      	nop			; (mov r8, r8)
    2fea:	46bd      	mov	sp, r7
    2fec:	b002      	add	sp, #8
    2fee:	bd80      	pop	{r7, pc}

00002ff0 <_pm_init>:

/**
 * \brief Power Manager Init
 */
void _pm_init(void)
{
    2ff0:	b580      	push	{r7, lr}
    2ff2:	af00      	add	r7, sp, #0
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
    2ff4:	4b0b      	ldr	r3, [pc, #44]	; (3024 <_pm_init+0x34>)
    2ff6:	2100      	movs	r1, #0
    2ff8:	0018      	movs	r0, r3
    2ffa:	4b0b      	ldr	r3, [pc, #44]	; (3028 <_pm_init+0x38>)
    2ffc:	4798      	blx	r3
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
    2ffe:	4b09      	ldr	r3, [pc, #36]	; (3024 <_pm_init+0x34>)
    3000:	2100      	movs	r1, #0
    3002:	0018      	movs	r0, r3
    3004:	4b09      	ldr	r3, [pc, #36]	; (302c <_pm_init+0x3c>)
    3006:	4798      	blx	r3
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
    3008:	4b06      	ldr	r3, [pc, #24]	; (3024 <_pm_init+0x34>)
    300a:	2100      	movs	r1, #0
    300c:	0018      	movs	r0, r3
    300e:	4b08      	ldr	r3, [pc, #32]	; (3030 <_pm_init+0x40>)
    3010:	4798      	blx	r3
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
    3012:	4b04      	ldr	r3, [pc, #16]	; (3024 <_pm_init+0x34>)
    3014:	2100      	movs	r1, #0
    3016:	0018      	movs	r0, r3
    3018:	4b06      	ldr	r3, [pc, #24]	; (3034 <_pm_init+0x44>)
    301a:	4798      	blx	r3
}
    301c:	46c0      	nop			; (mov r8, r8)
    301e:	46bd      	mov	sp, r7
    3020:	bd80      	pop	{r7, pc}
    3022:	46c0      	nop			; (mov r8, r8)
    3024:	40000400 	.word	0x40000400
    3028:	00002f39 	.word	0x00002f39
    302c:	00002f67 	.word	0x00002f67
    3030:	00002f95 	.word	0x00002f95
    3034:	00002fc3 	.word	0x00002fc3

00003038 <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    3038:	b580      	push	{r7, lr}
    303a:	b082      	sub	sp, #8
    303c:	af00      	add	r7, sp, #0
    303e:	6078      	str	r0, [r7, #4]
    3040:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3042:	46c0      	nop			; (mov r8, r8)
    3044:	687b      	ldr	r3, [r7, #4]
    3046:	69db      	ldr	r3, [r3, #28]
    3048:	683a      	ldr	r2, [r7, #0]
    304a:	4013      	ands	r3, r2
    304c:	d1fa      	bne.n	3044 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    304e:	46c0      	nop			; (mov r8, r8)
    3050:	46bd      	mov	sp, r7
    3052:	b002      	add	sp, #8
    3054:	bd80      	pop	{r7, pc}

00003056 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    3056:	b580      	push	{r7, lr}
    3058:	b082      	sub	sp, #8
    305a:	af00      	add	r7, sp, #0
    305c:	6078      	str	r0, [r7, #4]
    305e:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    3060:	687b      	ldr	r3, [r7, #4]
    3062:	69db      	ldr	r3, [r3, #28]
    3064:	683a      	ldr	r2, [r7, #0]
    3066:	4013      	ands	r3, r2
    3068:	1e5a      	subs	r2, r3, #1
    306a:	4193      	sbcs	r3, r2
    306c:	b2db      	uxtb	r3, r3
}
    306e:	0018      	movs	r0, r3
    3070:	46bd      	mov	sp, r7
    3072:	b002      	add	sp, #8
    3074:	bd80      	pop	{r7, pc}

00003076 <hri_sercomusart_wait_for_sync>:

static inline void hri_sercomusart_wait_for_sync(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
    3076:	b580      	push	{r7, lr}
    3078:	b082      	sub	sp, #8
    307a:	af00      	add	r7, sp, #0
    307c:	6078      	str	r0, [r7, #4]
    307e:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    3080:	46c0      	nop			; (mov r8, r8)
    3082:	687b      	ldr	r3, [r7, #4]
    3084:	69db      	ldr	r3, [r3, #28]
    3086:	683a      	ldr	r2, [r7, #0]
    3088:	4013      	ands	r3, r2
    308a:	d1fa      	bne.n	3082 <hri_sercomusart_wait_for_sync+0xc>
	};
}
    308c:	46c0      	nop			; (mov r8, r8)
    308e:	46bd      	mov	sp, r7
    3090:	b002      	add	sp, #8
    3092:	bd80      	pop	{r7, pc}

00003094 <hri_sercomusart_is_syncing>:

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
    3094:	b580      	push	{r7, lr}
    3096:	b082      	sub	sp, #8
    3098:	af00      	add	r7, sp, #0
    309a:	6078      	str	r0, [r7, #4]
    309c:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    309e:	687b      	ldr	r3, [r7, #4]
    30a0:	69db      	ldr	r3, [r3, #28]
    30a2:	683a      	ldr	r2, [r7, #0]
    30a4:	4013      	ands	r3, r2
    30a6:	1e5a      	subs	r2, r3, #1
    30a8:	4193      	sbcs	r3, r2
    30aa:	b2db      	uxtb	r3, r3
}
    30ac:	0018      	movs	r0, r3
    30ae:	46bd      	mov	sp, r7
    30b0:	b002      	add	sp, #8
    30b2:	bd80      	pop	{r7, pc}

000030b4 <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    30b4:	b580      	push	{r7, lr}
    30b6:	b084      	sub	sp, #16
    30b8:	af00      	add	r7, sp, #0
    30ba:	6078      	str	r0, [r7, #4]
    30bc:	000a      	movs	r2, r1
    30be:	1cfb      	adds	r3, r7, #3
    30c0:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    30c2:	230f      	movs	r3, #15
    30c4:	18fb      	adds	r3, r7, r3
    30c6:	687a      	ldr	r2, [r7, #4]
    30c8:	7e12      	ldrb	r2, [r2, #24]
    30ca:	701a      	strb	r2, [r3, #0]
	tmp &= mask;
    30cc:	230f      	movs	r3, #15
    30ce:	18fb      	adds	r3, r7, r3
    30d0:	220f      	movs	r2, #15
    30d2:	18ba      	adds	r2, r7, r2
    30d4:	1cf9      	adds	r1, r7, #3
    30d6:	7812      	ldrb	r2, [r2, #0]
    30d8:	7809      	ldrb	r1, [r1, #0]
    30da:	400a      	ands	r2, r1
    30dc:	701a      	strb	r2, [r3, #0]
	return tmp;
    30de:	230f      	movs	r3, #15
    30e0:	18fb      	adds	r3, r7, r3
    30e2:	781b      	ldrb	r3, [r3, #0]
}
    30e4:	0018      	movs	r0, r3
    30e6:	46bd      	mov	sp, r7
    30e8:	b004      	add	sp, #16
    30ea:	bd80      	pop	{r7, pc}

000030ec <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    30ec:	b580      	push	{r7, lr}
    30ee:	b082      	sub	sp, #8
    30f0:	af00      	add	r7, sp, #0
    30f2:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    30f4:	687b      	ldr	r3, [r7, #4]
    30f6:	7e1b      	ldrb	r3, [r3, #24]
    30f8:	b2db      	uxtb	r3, r3
}
    30fa:	0018      	movs	r0, r3
    30fc:	46bd      	mov	sp, r7
    30fe:	b002      	add	sp, #8
    3100:	bd80      	pop	{r7, pc}

00003102 <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    3102:	b580      	push	{r7, lr}
    3104:	b082      	sub	sp, #8
    3106:	af00      	add	r7, sp, #0
    3108:	6078      	str	r0, [r7, #4]
    310a:	000a      	movs	r2, r1
    310c:	1cfb      	adds	r3, r7, #3
    310e:	701a      	strb	r2, [r3, #0]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    3110:	687b      	ldr	r3, [r7, #4]
    3112:	1cfa      	adds	r2, r7, #3
    3114:	7812      	ldrb	r2, [r2, #0]
    3116:	761a      	strb	r2, [r3, #24]
}
    3118:	46c0      	nop			; (mov r8, r8)
    311a:	46bd      	mov	sp, r7
    311c:	b002      	add	sp, #8
    311e:	bd80      	pop	{r7, pc}

00003120 <hri_sercomusart_get_interrupt_DRE_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
    3120:	b580      	push	{r7, lr}
    3122:	b082      	sub	sp, #8
    3124:	af00      	add	r7, sp, #0
    3126:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    3128:	687b      	ldr	r3, [r7, #4]
    312a:	7e1b      	ldrb	r3, [r3, #24]
    312c:	b2db      	uxtb	r3, r3
    312e:	001a      	movs	r2, r3
    3130:	2301      	movs	r3, #1
    3132:	4013      	ands	r3, r2
    3134:	1e5a      	subs	r2, r3, #1
    3136:	4193      	sbcs	r3, r2
    3138:	b2db      	uxtb	r3, r3
}
    313a:	0018      	movs	r0, r3
    313c:	46bd      	mov	sp, r7
    313e:	b002      	add	sp, #8
    3140:	bd80      	pop	{r7, pc}

00003142 <hri_sercomusart_get_interrupt_TXC_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
}

static inline bool hri_sercomusart_get_interrupt_TXC_bit(const void *const hw)
{
    3142:	b580      	push	{r7, lr}
    3144:	b082      	sub	sp, #8
    3146:	af00      	add	r7, sp, #0
    3148:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    314a:	687b      	ldr	r3, [r7, #4]
    314c:	7e1b      	ldrb	r3, [r3, #24]
    314e:	b2db      	uxtb	r3, r3
    3150:	085b      	lsrs	r3, r3, #1
    3152:	2201      	movs	r2, #1
    3154:	4013      	ands	r3, r2
    3156:	1e5a      	subs	r2, r3, #1
    3158:	4193      	sbcs	r3, r2
    315a:	b2db      	uxtb	r3, r3
}
    315c:	0018      	movs	r0, r3
    315e:	46bd      	mov	sp, r7
    3160:	b002      	add	sp, #8
    3162:	bd80      	pop	{r7, pc}

00003164 <hri_sercomusart_get_interrupt_RXC_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
}

static inline bool hri_sercomusart_get_interrupt_RXC_bit(const void *const hw)
{
    3164:	b580      	push	{r7, lr}
    3166:	b082      	sub	sp, #8
    3168:	af00      	add	r7, sp, #0
    316a:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    316c:	687b      	ldr	r3, [r7, #4]
    316e:	7e1b      	ldrb	r3, [r3, #24]
    3170:	b2db      	uxtb	r3, r3
    3172:	089b      	lsrs	r3, r3, #2
    3174:	2201      	movs	r2, #1
    3176:	4013      	ands	r3, r2
    3178:	1e5a      	subs	r2, r3, #1
    317a:	4193      	sbcs	r3, r2
    317c:	b2db      	uxtb	r3, r3
}
    317e:	0018      	movs	r0, r3
    3180:	46bd      	mov	sp, r7
    3182:	b002      	add	sp, #8
    3184:	bd80      	pop	{r7, pc}
	...

00003188 <hri_sercomspi_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_SPI_CTRLA_SWRST) >> SERCOM_SPI_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
    3188:	b580      	push	{r7, lr}
    318a:	b082      	sub	sp, #8
    318c:	af00      	add	r7, sp, #0
    318e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    3190:	687b      	ldr	r3, [r7, #4]
    3192:	681b      	ldr	r3, [r3, #0]
    3194:	2202      	movs	r2, #2
    3196:	431a      	orrs	r2, r3
    3198:	687b      	ldr	r3, [r7, #4]
    319a:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    319c:	687b      	ldr	r3, [r7, #4]
    319e:	2103      	movs	r1, #3
    31a0:	0018      	movs	r0, r3
    31a2:	4b03      	ldr	r3, [pc, #12]	; (31b0 <hri_sercomspi_set_CTRLA_ENABLE_bit+0x28>)
    31a4:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    31a6:	46c0      	nop			; (mov r8, r8)
    31a8:	46bd      	mov	sp, r7
    31aa:	b002      	add	sp, #8
    31ac:	bd80      	pop	{r7, pc}
    31ae:	46c0      	nop			; (mov r8, r8)
    31b0:	00003039 	.word	0x00003039

000031b4 <hri_sercomspi_get_CTRLA_ENABLE_bit>:

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    31b4:	b580      	push	{r7, lr}
    31b6:	b084      	sub	sp, #16
    31b8:	af00      	add	r7, sp, #0
    31ba:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    31bc:	687b      	ldr	r3, [r7, #4]
    31be:	2103      	movs	r1, #3
    31c0:	0018      	movs	r0, r3
    31c2:	4b09      	ldr	r3, [pc, #36]	; (31e8 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    31c4:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    31c6:	687b      	ldr	r3, [r7, #4]
    31c8:	681b      	ldr	r3, [r3, #0]
    31ca:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    31cc:	68fb      	ldr	r3, [r7, #12]
    31ce:	085b      	lsrs	r3, r3, #1
    31d0:	2201      	movs	r2, #1
    31d2:	4013      	ands	r3, r2
    31d4:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    31d6:	68fb      	ldr	r3, [r7, #12]
    31d8:	1e5a      	subs	r2, r3, #1
    31da:	4193      	sbcs	r3, r2
    31dc:	b2db      	uxtb	r3, r3
}
    31de:	0018      	movs	r0, r3
    31e0:	46bd      	mov	sp, r7
    31e2:	b004      	add	sp, #16
    31e4:	bd80      	pop	{r7, pc}
    31e6:	46c0      	nop			; (mov r8, r8)
    31e8:	00003039 	.word	0x00003039

000031ec <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    31ec:	b580      	push	{r7, lr}
    31ee:	b082      	sub	sp, #8
    31f0:	af00      	add	r7, sp, #0
    31f2:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    31f4:	687b      	ldr	r3, [r7, #4]
    31f6:	681b      	ldr	r3, [r3, #0]
    31f8:	2202      	movs	r2, #2
    31fa:	4393      	bics	r3, r2
    31fc:	001a      	movs	r2, r3
    31fe:	687b      	ldr	r3, [r7, #4]
    3200:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    3202:	687b      	ldr	r3, [r7, #4]
    3204:	2103      	movs	r1, #3
    3206:	0018      	movs	r0, r3
    3208:	4b02      	ldr	r3, [pc, #8]	; (3214 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x28>)
    320a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    320c:	46c0      	nop			; (mov r8, r8)
    320e:	46bd      	mov	sp, r7
    3210:	b002      	add	sp, #8
    3212:	bd80      	pop	{r7, pc}
    3214:	00003039 	.word	0x00003039

00003218 <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    3218:	b580      	push	{r7, lr}
    321a:	b084      	sub	sp, #16
    321c:	af00      	add	r7, sp, #0
    321e:	6078      	str	r0, [r7, #4]
    3220:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    3222:	687b      	ldr	r3, [r7, #4]
    3224:	2103      	movs	r1, #3
    3226:	0018      	movs	r0, r3
    3228:	4b06      	ldr	r3, [pc, #24]	; (3244 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    322a:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    322c:	687b      	ldr	r3, [r7, #4]
    322e:	681b      	ldr	r3, [r3, #0]
    3230:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    3232:	68fb      	ldr	r3, [r7, #12]
    3234:	683a      	ldr	r2, [r7, #0]
    3236:	4013      	ands	r3, r2
    3238:	60fb      	str	r3, [r7, #12]
	return tmp;
    323a:	68fb      	ldr	r3, [r7, #12]
}
    323c:	0018      	movs	r0, r3
    323e:	46bd      	mov	sp, r7
    3240:	b004      	add	sp, #16
    3242:	bd80      	pop	{r7, pc}
    3244:	00003039 	.word	0x00003039

00003248 <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    3248:	b580      	push	{r7, lr}
    324a:	b082      	sub	sp, #8
    324c:	af00      	add	r7, sp, #0
    324e:	6078      	str	r0, [r7, #4]
    3250:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    3252:	687b      	ldr	r3, [r7, #4]
    3254:	683a      	ldr	r2, [r7, #0]
    3256:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    3258:	687b      	ldr	r3, [r7, #4]
    325a:	2103      	movs	r1, #3
    325c:	0018      	movs	r0, r3
    325e:	4b03      	ldr	r3, [pc, #12]	; (326c <hri_sercomspi_write_CTRLA_reg+0x24>)
    3260:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3262:	46c0      	nop			; (mov r8, r8)
    3264:	46bd      	mov	sp, r7
    3266:	b002      	add	sp, #8
    3268:	bd80      	pop	{r7, pc}
    326a:	46c0      	nop			; (mov r8, r8)
    326c:	00003039 	.word	0x00003039

00003270 <hri_sercomusart_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_USART_CTRLA_SWRST) >> SERCOM_USART_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomusart_set_CTRLA_ENABLE_bit(const void *const hw)
{
    3270:	b580      	push	{r7, lr}
    3272:	b082      	sub	sp, #8
    3274:	af00      	add	r7, sp, #0
    3276:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    3278:	687b      	ldr	r3, [r7, #4]
    327a:	681b      	ldr	r3, [r3, #0]
    327c:	2202      	movs	r2, #2
    327e:	431a      	orrs	r2, r3
    3280:	687b      	ldr	r3, [r7, #4]
    3282:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    3284:	687b      	ldr	r3, [r7, #4]
    3286:	2103      	movs	r1, #3
    3288:	0018      	movs	r0, r3
    328a:	4b03      	ldr	r3, [pc, #12]	; (3298 <hri_sercomusart_set_CTRLA_ENABLE_bit+0x28>)
    328c:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    328e:	46c0      	nop			; (mov r8, r8)
    3290:	46bd      	mov	sp, r7
    3292:	b002      	add	sp, #8
    3294:	bd80      	pop	{r7, pc}
    3296:	46c0      	nop			; (mov r8, r8)
    3298:	00003077 	.word	0x00003077

0000329c <hri_sercomusart_clear_CTRLA_ENABLE_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomusart_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    329c:	b580      	push	{r7, lr}
    329e:	b082      	sub	sp, #8
    32a0:	af00      	add	r7, sp, #0
    32a2:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    32a4:	687b      	ldr	r3, [r7, #4]
    32a6:	681b      	ldr	r3, [r3, #0]
    32a8:	2202      	movs	r2, #2
    32aa:	4393      	bics	r3, r2
    32ac:	001a      	movs	r2, r3
    32ae:	687b      	ldr	r3, [r7, #4]
    32b0:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    32b2:	687b      	ldr	r3, [r7, #4]
    32b4:	2103      	movs	r1, #3
    32b6:	0018      	movs	r0, r3
    32b8:	4b02      	ldr	r3, [pc, #8]	; (32c4 <hri_sercomusart_clear_CTRLA_ENABLE_bit+0x28>)
    32ba:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    32bc:	46c0      	nop			; (mov r8, r8)
    32be:	46bd      	mov	sp, r7
    32c0:	b002      	add	sp, #8
    32c2:	bd80      	pop	{r7, pc}
    32c4:	00003077 	.word	0x00003077

000032c8 <hri_sercomusart_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
    32c8:	b580      	push	{r7, lr}
    32ca:	b084      	sub	sp, #16
    32cc:	af00      	add	r7, sp, #0
    32ce:	6078      	str	r0, [r7, #4]
    32d0:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    32d2:	687b      	ldr	r3, [r7, #4]
    32d4:	2103      	movs	r1, #3
    32d6:	0018      	movs	r0, r3
    32d8:	4b06      	ldr	r3, [pc, #24]	; (32f4 <hri_sercomusart_get_CTRLA_reg+0x2c>)
    32da:	4798      	blx	r3
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    32dc:	687b      	ldr	r3, [r7, #4]
    32de:	681b      	ldr	r3, [r3, #0]
    32e0:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    32e2:	68fb      	ldr	r3, [r7, #12]
    32e4:	683a      	ldr	r2, [r7, #0]
    32e6:	4013      	ands	r3, r2
    32e8:	60fb      	str	r3, [r7, #12]
	return tmp;
    32ea:	68fb      	ldr	r3, [r7, #12]
}
    32ec:	0018      	movs	r0, r3
    32ee:	46bd      	mov	sp, r7
    32f0:	b004      	add	sp, #16
    32f2:	bd80      	pop	{r7, pc}
    32f4:	00003077 	.word	0x00003077

000032f8 <hri_sercomusart_write_CTRLA_reg>:

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
    32f8:	b580      	push	{r7, lr}
    32fa:	b082      	sub	sp, #8
    32fc:	af00      	add	r7, sp, #0
    32fe:	6078      	str	r0, [r7, #4]
    3300:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    3302:	687b      	ldr	r3, [r7, #4]
    3304:	683a      	ldr	r2, [r7, #0]
    3306:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    3308:	687b      	ldr	r3, [r7, #4]
    330a:	2103      	movs	r1, #3
    330c:	0018      	movs	r0, r3
    330e:	4b03      	ldr	r3, [pc, #12]	; (331c <hri_sercomusart_write_CTRLA_reg+0x24>)
    3310:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3312:	46c0      	nop			; (mov r8, r8)
    3314:	46bd      	mov	sp, r7
    3316:	b002      	add	sp, #8
    3318:	bd80      	pop	{r7, pc}
    331a:	46c0      	nop			; (mov r8, r8)
    331c:	00003077 	.word	0x00003077

00003320 <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    3320:	b580      	push	{r7, lr}
    3322:	b082      	sub	sp, #8
    3324:	af00      	add	r7, sp, #0
    3326:	6078      	str	r0, [r7, #4]
    3328:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    332a:	687b      	ldr	r3, [r7, #4]
    332c:	683a      	ldr	r2, [r7, #0]
    332e:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    3330:	687b      	ldr	r3, [r7, #4]
    3332:	2107      	movs	r1, #7
    3334:	0018      	movs	r0, r3
    3336:	4b03      	ldr	r3, [pc, #12]	; (3344 <hri_sercomspi_write_CTRLB_reg+0x24>)
    3338:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    333a:	46c0      	nop			; (mov r8, r8)
    333c:	46bd      	mov	sp, r7
    333e:	b002      	add	sp, #8
    3340:	bd80      	pop	{r7, pc}
    3342:	46c0      	nop			; (mov r8, r8)
    3344:	00003039 	.word	0x00003039

00003348 <hri_sercomusart_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
    3348:	b580      	push	{r7, lr}
    334a:	b082      	sub	sp, #8
    334c:	af00      	add	r7, sp, #0
    334e:	6078      	str	r0, [r7, #4]
    3350:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    3352:	687b      	ldr	r3, [r7, #4]
    3354:	683a      	ldr	r2, [r7, #0]
    3356:	605a      	str	r2, [r3, #4]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_MASK);
    3358:	687b      	ldr	r3, [r7, #4]
    335a:	2107      	movs	r1, #7
    335c:	0018      	movs	r0, r3
    335e:	4b03      	ldr	r3, [pc, #12]	; (336c <hri_sercomusart_write_CTRLB_reg+0x24>)
    3360:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3362:	46c0      	nop			; (mov r8, r8)
    3364:	46bd      	mov	sp, r7
    3366:	b002      	add	sp, #8
    3368:	bd80      	pop	{r7, pc}
    336a:	46c0      	nop			; (mov r8, r8)
    336c:	00003077 	.word	0x00003077

00003370 <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    3370:	b580      	push	{r7, lr}
    3372:	b082      	sub	sp, #8
    3374:	af00      	add	r7, sp, #0
    3376:	6078      	str	r0, [r7, #4]
    3378:	000a      	movs	r2, r1
    337a:	1cfb      	adds	r3, r7, #3
    337c:	701a      	strb	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    337e:	687b      	ldr	r3, [r7, #4]
    3380:	1cfa      	adds	r2, r7, #3
    3382:	7812      	ldrb	r2, [r2, #0]
    3384:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3386:	46c0      	nop			; (mov r8, r8)
    3388:	46bd      	mov	sp, r7
    338a:	b002      	add	sp, #8
    338c:	bd80      	pop	{r7, pc}

0000338e <hri_sercomusart_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
    338e:	b580      	push	{r7, lr}
    3390:	b082      	sub	sp, #8
    3392:	af00      	add	r7, sp, #0
    3394:	6078      	str	r0, [r7, #4]
    3396:	000a      	movs	r2, r1
    3398:	1cbb      	adds	r3, r7, #2
    339a:	801a      	strh	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    339c:	687b      	ldr	r3, [r7, #4]
    339e:	1cba      	adds	r2, r7, #2
    33a0:	8812      	ldrh	r2, [r2, #0]
    33a2:	819a      	strh	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    33a4:	46c0      	nop			; (mov r8, r8)
    33a6:	46bd      	mov	sp, r7
    33a8:	b002      	add	sp, #8
    33aa:	bd80      	pop	{r7, pc}

000033ac <hri_sercomusart_write_RXPL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
    33ac:	b580      	push	{r7, lr}
    33ae:	b082      	sub	sp, #8
    33b0:	af00      	add	r7, sp, #0
    33b2:	6078      	str	r0, [r7, #4]
    33b4:	000a      	movs	r2, r1
    33b6:	1cfb      	adds	r3, r7, #3
    33b8:	701a      	strb	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    33ba:	687b      	ldr	r3, [r7, #4]
    33bc:	1cfa      	adds	r2, r7, #3
    33be:	7812      	ldrb	r2, [r2, #0]
    33c0:	739a      	strb	r2, [r3, #14]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    33c2:	46c0      	nop			; (mov r8, r8)
    33c4:	46bd      	mov	sp, r7
    33c6:	b002      	add	sp, #8
    33c8:	bd80      	pop	{r7, pc}

000033ca <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    33ca:	b580      	push	{r7, lr}
    33cc:	b082      	sub	sp, #8
    33ce:	af00      	add	r7, sp, #0
    33d0:	6078      	str	r0, [r7, #4]
    33d2:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    33d4:	687b      	ldr	r3, [r7, #4]
    33d6:	683a      	ldr	r2, [r7, #0]
    33d8:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    33da:	46c0      	nop			; (mov r8, r8)
    33dc:	46bd      	mov	sp, r7
    33de:	b002      	add	sp, #8
    33e0:	bd80      	pop	{r7, pc}

000033e2 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    33e2:	b580      	push	{r7, lr}
    33e4:	b082      	sub	sp, #8
    33e6:	af00      	add	r7, sp, #0
    33e8:	6078      	str	r0, [r7, #4]
    33ea:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    33ec:	687b      	ldr	r3, [r7, #4]
    33ee:	683a      	ldr	r2, [r7, #0]
    33f0:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    33f2:	46c0      	nop			; (mov r8, r8)
    33f4:	46bd      	mov	sp, r7
    33f6:	b002      	add	sp, #8
    33f8:	bd80      	pop	{r7, pc}

000033fa <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    33fa:	b580      	push	{r7, lr}
    33fc:	b082      	sub	sp, #8
    33fe:	af00      	add	r7, sp, #0
    3400:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    3402:	687b      	ldr	r3, [r7, #4]
    3404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    3406:	0018      	movs	r0, r3
    3408:	46bd      	mov	sp, r7
    340a:	b002      	add	sp, #8
    340c:	bd80      	pop	{r7, pc}

0000340e <hri_sercomusart_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_DATA_reg(const void *const hw, hri_sercomusart_data_reg_t data)
{
    340e:	b580      	push	{r7, lr}
    3410:	b082      	sub	sp, #8
    3412:	af00      	add	r7, sp, #0
    3414:	6078      	str	r0, [r7, #4]
    3416:	000a      	movs	r2, r1
    3418:	1cbb      	adds	r3, r7, #2
    341a:	801a      	strh	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DATA.reg = data;
    341c:	687b      	ldr	r3, [r7, #4]
    341e:	1cba      	adds	r2, r7, #2
    3420:	8812      	ldrh	r2, [r2, #0]
    3422:	851a      	strh	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3424:	46c0      	nop			; (mov r8, r8)
    3426:	46bd      	mov	sp, r7
    3428:	b002      	add	sp, #8
    342a:	bd80      	pop	{r7, pc}

0000342c <hri_sercomusart_read_DATA_reg>:
	((Sercom *)hw)->USART.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_data_reg_t hri_sercomusart_read_DATA_reg(const void *const hw)
{
    342c:	b580      	push	{r7, lr}
    342e:	b082      	sub	sp, #8
    3430:	af00      	add	r7, sp, #0
    3432:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->USART.DATA.reg;
    3434:	687b      	ldr	r3, [r7, #4]
    3436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    3438:	b29b      	uxth	r3, r3
}
    343a:	0018      	movs	r0, r3
    343c:	46bd      	mov	sp, r7
    343e:	b002      	add	sp, #8
    3440:	bd80      	pop	{r7, pc}

00003442 <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    3442:	b580      	push	{r7, lr}
    3444:	b082      	sub	sp, #8
    3446:	af00      	add	r7, sp, #0
    3448:	6078      	str	r0, [r7, #4]
    344a:	000a      	movs	r2, r1
    344c:	1cfb      	adds	r3, r7, #3
    344e:	701a      	strb	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    3450:	687b      	ldr	r3, [r7, #4]
    3452:	1cfa      	adds	r2, r7, #3
    3454:	2130      	movs	r1, #48	; 0x30
    3456:	7812      	ldrb	r2, [r2, #0]
    3458:	545a      	strb	r2, [r3, r1]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    345a:	46c0      	nop			; (mov r8, r8)
    345c:	46bd      	mov	sp, r7
    345e:	b002      	add	sp, #8
    3460:	bd80      	pop	{r7, pc}

00003462 <hri_sercomusart_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
    3462:	b580      	push	{r7, lr}
    3464:	b082      	sub	sp, #8
    3466:	af00      	add	r7, sp, #0
    3468:	6078      	str	r0, [r7, #4]
    346a:	000a      	movs	r2, r1
    346c:	1cfb      	adds	r3, r7, #3
    346e:	701a      	strb	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    3470:	687b      	ldr	r3, [r7, #4]
    3472:	1cfa      	adds	r2, r7, #3
    3474:	2130      	movs	r1, #48	; 0x30
    3476:	7812      	ldrb	r2, [r2, #0]
    3478:	545a      	strb	r2, [r3, r1]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    347a:	46c0      	nop			; (mov r8, r8)
    347c:	46bd      	mov	sp, r7
    347e:	b002      	add	sp, #8
    3480:	bd80      	pop	{r7, pc}

00003482 <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    3482:	b580      	push	{r7, lr}
    3484:	b082      	sub	sp, #8
    3486:	af00      	add	r7, sp, #0
    3488:	6078      	str	r0, [r7, #4]
    348a:	000a      	movs	r2, r1
    348c:	1cbb      	adds	r3, r7, #2
    348e:	801a      	strh	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    3490:	687b      	ldr	r3, [r7, #4]
    3492:	1cba      	adds	r2, r7, #2
    3494:	8812      	ldrh	r2, [r2, #0]
    3496:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3498:	46c0      	nop			; (mov r8, r8)
    349a:	46bd      	mov	sp, r7
    349c:	b002      	add	sp, #8
    349e:	bd80      	pop	{r7, pc}

000034a0 <_usart_sync_init>:

/**
 * \brief Initialize synchronous SERCOM USART
 */
int32_t _usart_sync_init(struct _usart_sync_device *const device, void *const hw)
{
    34a0:	b580      	push	{r7, lr}
    34a2:	b082      	sub	sp, #8
    34a4:	af00      	add	r7, sp, #0
    34a6:	6078      	str	r0, [r7, #4]
    34a8:	6039      	str	r1, [r7, #0]
	ASSERT(device);
    34aa:	687b      	ldr	r3, [r7, #4]
    34ac:	1e5a      	subs	r2, r3, #1
    34ae:	4193      	sbcs	r3, r2
    34b0:	b2db      	uxtb	r3, r3
    34b2:	4908      	ldr	r1, [pc, #32]	; (34d4 <_usart_sync_init+0x34>)
    34b4:	22b4      	movs	r2, #180	; 0xb4
    34b6:	0018      	movs	r0, r3
    34b8:	4b07      	ldr	r3, [pc, #28]	; (34d8 <_usart_sync_init+0x38>)
    34ba:	4798      	blx	r3

	device->hw = hw;
    34bc:	687b      	ldr	r3, [r7, #4]
    34be:	683a      	ldr	r2, [r7, #0]
    34c0:	601a      	str	r2, [r3, #0]

	return _usart_init(hw);
    34c2:	683b      	ldr	r3, [r7, #0]
    34c4:	0018      	movs	r0, r3
    34c6:	4b05      	ldr	r3, [pc, #20]	; (34dc <_usart_sync_init+0x3c>)
    34c8:	4798      	blx	r3
    34ca:	0003      	movs	r3, r0
}
    34cc:	0018      	movs	r0, r3
    34ce:	46bd      	mov	sp, r7
    34d0:	b002      	add	sp, #8
    34d2:	bd80      	pop	{r7, pc}
    34d4:	0000fcd8 	.word	0x0000fcd8
    34d8:	00002841 	.word	0x00002841
    34dc:	00003659 	.word	0x00003659

000034e0 <_usart_sync_enable>:

/**
 * \brief Enable SERCOM module
 */
void _usart_sync_enable(struct _usart_sync_device *const device)
{
    34e0:	b580      	push	{r7, lr}
    34e2:	b082      	sub	sp, #8
    34e4:	af00      	add	r7, sp, #0
    34e6:	6078      	str	r0, [r7, #4]
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    34e8:	687b      	ldr	r3, [r7, #4]
    34ea:	681b      	ldr	r3, [r3, #0]
    34ec:	0018      	movs	r0, r3
    34ee:	4b03      	ldr	r3, [pc, #12]	; (34fc <_usart_sync_enable+0x1c>)
    34f0:	4798      	blx	r3
}
    34f2:	46c0      	nop			; (mov r8, r8)
    34f4:	46bd      	mov	sp, r7
    34f6:	b002      	add	sp, #8
    34f8:	bd80      	pop	{r7, pc}
    34fa:	46c0      	nop			; (mov r8, r8)
    34fc:	00003271 	.word	0x00003271

00003500 <_usart_sync_write_byte>:

/**
 * \brief Write a byte to the given SERCOM USART instance
 */
void _usart_sync_write_byte(struct _usart_sync_device *const device, uint8_t data)
{
    3500:	b580      	push	{r7, lr}
    3502:	b082      	sub	sp, #8
    3504:	af00      	add	r7, sp, #0
    3506:	6078      	str	r0, [r7, #4]
    3508:	000a      	movs	r2, r1
    350a:	1cfb      	adds	r3, r7, #3
    350c:	701a      	strb	r2, [r3, #0]
	hri_sercomusart_write_DATA_reg(device->hw, data);
    350e:	687b      	ldr	r3, [r7, #4]
    3510:	681a      	ldr	r2, [r3, #0]
    3512:	1cfb      	adds	r3, r7, #3
    3514:	781b      	ldrb	r3, [r3, #0]
    3516:	b29b      	uxth	r3, r3
    3518:	0019      	movs	r1, r3
    351a:	0010      	movs	r0, r2
    351c:	4b02      	ldr	r3, [pc, #8]	; (3528 <_usart_sync_write_byte+0x28>)
    351e:	4798      	blx	r3
}
    3520:	46c0      	nop			; (mov r8, r8)
    3522:	46bd      	mov	sp, r7
    3524:	b002      	add	sp, #8
    3526:	bd80      	pop	{r7, pc}
    3528:	0000340f 	.word	0x0000340f

0000352c <_usart_sync_read_byte>:

/**
 * \brief Read a byte from the given SERCOM USART instance
 */
uint8_t _usart_sync_read_byte(const struct _usart_sync_device *const device)
{
    352c:	b580      	push	{r7, lr}
    352e:	b082      	sub	sp, #8
    3530:	af00      	add	r7, sp, #0
    3532:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_read_DATA_reg(device->hw);
    3534:	687b      	ldr	r3, [r7, #4]
    3536:	681b      	ldr	r3, [r3, #0]
    3538:	0018      	movs	r0, r3
    353a:	4b04      	ldr	r3, [pc, #16]	; (354c <_usart_sync_read_byte+0x20>)
    353c:	4798      	blx	r3
    353e:	0003      	movs	r3, r0
    3540:	b2db      	uxtb	r3, r3
}
    3542:	0018      	movs	r0, r3
    3544:	46bd      	mov	sp, r7
    3546:	b002      	add	sp, #8
    3548:	bd80      	pop	{r7, pc}
    354a:	46c0      	nop			; (mov r8, r8)
    354c:	0000342d 	.word	0x0000342d

00003550 <_usart_sync_is_ready_to_send>:

/**
 * \brief Check if USART is ready to send next byte
 */
bool _usart_sync_is_ready_to_send(const struct _usart_sync_device *const device)
{
    3550:	b580      	push	{r7, lr}
    3552:	b082      	sub	sp, #8
    3554:	af00      	add	r7, sp, #0
    3556:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    3558:	687b      	ldr	r3, [r7, #4]
    355a:	681b      	ldr	r3, [r3, #0]
    355c:	0018      	movs	r0, r3
    355e:	4b03      	ldr	r3, [pc, #12]	; (356c <_usart_sync_is_ready_to_send+0x1c>)
    3560:	4798      	blx	r3
    3562:	0003      	movs	r3, r0
}
    3564:	0018      	movs	r0, r3
    3566:	46bd      	mov	sp, r7
    3568:	b002      	add	sp, #8
    356a:	bd80      	pop	{r7, pc}
    356c:	00003121 	.word	0x00003121

00003570 <_usart_sync_is_transmit_done>:

/**
 * \brief Check if USART transmission complete
 */
bool _usart_sync_is_transmit_done(const struct _usart_sync_device *const device)
{
    3570:	b580      	push	{r7, lr}
    3572:	b082      	sub	sp, #8
    3574:	af00      	add	r7, sp, #0
    3576:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    3578:	687b      	ldr	r3, [r7, #4]
    357a:	681b      	ldr	r3, [r3, #0]
    357c:	0018      	movs	r0, r3
    357e:	4b03      	ldr	r3, [pc, #12]	; (358c <_usart_sync_is_transmit_done+0x1c>)
    3580:	4798      	blx	r3
    3582:	0003      	movs	r3, r0
}
    3584:	0018      	movs	r0, r3
    3586:	46bd      	mov	sp, r7
    3588:	b002      	add	sp, #8
    358a:	bd80      	pop	{r7, pc}
    358c:	00003143 	.word	0x00003143

00003590 <_usart_sync_is_byte_received>:

/**
 * \brief Check if there is data received by USART
 */
bool _usart_sync_is_byte_received(const struct _usart_sync_device *const device)
{
    3590:	b580      	push	{r7, lr}
    3592:	b082      	sub	sp, #8
    3594:	af00      	add	r7, sp, #0
    3596:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    3598:	687b      	ldr	r3, [r7, #4]
    359a:	681b      	ldr	r3, [r3, #0]
    359c:	0018      	movs	r0, r3
    359e:	4b03      	ldr	r3, [pc, #12]	; (35ac <_usart_sync_is_byte_received+0x1c>)
    35a0:	4798      	blx	r3
    35a2:	0003      	movs	r3, r0
}
    35a4:	0018      	movs	r0, r3
    35a6:	46bd      	mov	sp, r7
    35a8:	b002      	add	sp, #8
    35aa:	bd80      	pop	{r7, pc}
    35ac:	00003165 	.word	0x00003165

000035b0 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    35b0:	b580      	push	{r7, lr}
    35b2:	b082      	sub	sp, #8
    35b4:	af00      	add	r7, sp, #0
    35b6:	6078      	str	r0, [r7, #4]
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    35b8:	687b      	ldr	r3, [r7, #4]
    35ba:	4a04      	ldr	r2, [pc, #16]	; (35cc <_sercom_get_hardware_index+0x1c>)
    35bc:	4694      	mov	ip, r2
    35be:	4463      	add	r3, ip
    35c0:	0a9b      	lsrs	r3, r3, #10
    35c2:	b2db      	uxtb	r3, r3
}
    35c4:	0018      	movs	r0, r3
    35c6:	46bd      	mov	sp, r7
    35c8:	b002      	add	sp, #8
    35ca:	bd80      	pop	{r7, pc}
    35cc:	bdfff800 	.word	0xbdfff800

000035d0 <_get_sercom_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static uint8_t _get_sercom_index(const void *const hw)
{
    35d0:	b590      	push	{r4, r7, lr}
    35d2:	b085      	sub	sp, #20
    35d4:	af00      	add	r7, sp, #0
    35d6:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    35d8:	230e      	movs	r3, #14
    35da:	18fc      	adds	r4, r7, r3
    35dc:	687b      	ldr	r3, [r7, #4]
    35de:	0018      	movs	r0, r3
    35e0:	4b18      	ldr	r3, [pc, #96]	; (3644 <_get_sercom_index+0x74>)
    35e2:	4798      	blx	r3
    35e4:	0003      	movs	r3, r0
    35e6:	7023      	strb	r3, [r4, #0]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    35e8:	230f      	movs	r3, #15
    35ea:	18fb      	adds	r3, r7, r3
    35ec:	2200      	movs	r2, #0
    35ee:	701a      	strb	r2, [r3, #0]
    35f0:	e018      	b.n	3624 <_get_sercom_index+0x54>
		if (_usarts[i].number == sercom_offset) {
    35f2:	230f      	movs	r3, #15
    35f4:	18fb      	adds	r3, r7, r3
    35f6:	781a      	ldrb	r2, [r3, #0]
    35f8:	4913      	ldr	r1, [pc, #76]	; (3648 <_get_sercom_index+0x78>)
    35fa:	0013      	movs	r3, r2
    35fc:	009b      	lsls	r3, r3, #2
    35fe:	189b      	adds	r3, r3, r2
    3600:	009b      	lsls	r3, r3, #2
    3602:	5c5b      	ldrb	r3, [r3, r1]
    3604:	220e      	movs	r2, #14
    3606:	18ba      	adds	r2, r7, r2
    3608:	7812      	ldrb	r2, [r2, #0]
    360a:	429a      	cmp	r2, r3
    360c:	d103      	bne.n	3616 <_get_sercom_index+0x46>
			return i;
    360e:	230f      	movs	r3, #15
    3610:	18fb      	adds	r3, r7, r3
    3612:	781b      	ldrb	r3, [r3, #0]
    3614:	e012      	b.n	363c <_get_sercom_index+0x6c>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    3616:	230f      	movs	r3, #15
    3618:	18fb      	adds	r3, r7, r3
    361a:	781a      	ldrb	r2, [r3, #0]
    361c:	230f      	movs	r3, #15
    361e:	18fb      	adds	r3, r7, r3
    3620:	3201      	adds	r2, #1
    3622:	701a      	strb	r2, [r3, #0]
    3624:	230f      	movs	r3, #15
    3626:	18fb      	adds	r3, r7, r3
    3628:	781b      	ldrb	r3, [r3, #0]
    362a:	2b00      	cmp	r3, #0
    362c:	d0e1      	beq.n	35f2 <_get_sercom_index+0x22>
		}
	}

	ASSERT(false);
    362e:	4a07      	ldr	r2, [pc, #28]	; (364c <_get_sercom_index+0x7c>)
    3630:	4b07      	ldr	r3, [pc, #28]	; (3650 <_get_sercom_index+0x80>)
    3632:	0019      	movs	r1, r3
    3634:	2000      	movs	r0, #0
    3636:	4b07      	ldr	r3, [pc, #28]	; (3654 <_get_sercom_index+0x84>)
    3638:	4798      	blx	r3
	return 0;
    363a:	2300      	movs	r3, #0
}
    363c:	0018      	movs	r0, r3
    363e:	46bd      	mov	sp, r7
    3640:	b005      	add	sp, #20
    3642:	bd90      	pop	{r4, r7, pc}
    3644:	000035b1 	.word	0x000035b1
    3648:	20000008 	.word	0x20000008
    364c:	0000023a 	.word	0x0000023a
    3650:	0000fcd8 	.word	0x0000fcd8
    3654:	00002841 	.word	0x00002841

00003658 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    3658:	b590      	push	{r4, r7, lr}
    365a:	b085      	sub	sp, #20
    365c:	af00      	add	r7, sp, #0
    365e:	6078      	str	r0, [r7, #4]
	uint8_t i = _get_sercom_index(hw);
    3660:	230f      	movs	r3, #15
    3662:	18fc      	adds	r4, r7, r3
    3664:	687b      	ldr	r3, [r7, #4]
    3666:	0018      	movs	r0, r3
    3668:	4b6f      	ldr	r3, [pc, #444]	; (3828 <_usart_init+0x1d0>)
    366a:	4798      	blx	r3
    366c:	0003      	movs	r3, r0
    366e:	7023      	strb	r3, [r4, #0]

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    3670:	687b      	ldr	r3, [r7, #4]
    3672:	2101      	movs	r1, #1
    3674:	0018      	movs	r0, r3
    3676:	4b6d      	ldr	r3, [pc, #436]	; (382c <_usart_init+0x1d4>)
    3678:	4798      	blx	r3
    367a:	0003      	movs	r3, r0
    367c:	001a      	movs	r2, r3
    367e:	2301      	movs	r3, #1
    3680:	4053      	eors	r3, r2
    3682:	b2db      	uxtb	r3, r3
    3684:	2b00      	cmp	r3, #0
    3686:	d025      	beq.n	36d4 <_usart_init+0x7c>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    3688:	230f      	movs	r3, #15
    368a:	18fb      	adds	r3, r7, r3
    368c:	781a      	ldrb	r2, [r3, #0]
    368e:	4968      	ldr	r1, [pc, #416]	; (3830 <_usart_init+0x1d8>)
    3690:	0013      	movs	r3, r2
    3692:	009b      	lsls	r3, r3, #2
    3694:	189b      	adds	r3, r3, r2
    3696:	009b      	lsls	r3, r3, #2
    3698:	18cb      	adds	r3, r1, r3
    369a:	3304      	adds	r3, #4
    369c:	681b      	ldr	r3, [r3, #0]
    369e:	221c      	movs	r2, #28
    36a0:	4013      	ands	r3, r2
    36a2:	60bb      	str	r3, [r7, #8]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    36a4:	687b      	ldr	r3, [r7, #4]
    36a6:	2102      	movs	r1, #2
    36a8:	0018      	movs	r0, r3
    36aa:	4b62      	ldr	r3, [pc, #392]	; (3834 <_usart_init+0x1dc>)
    36ac:	4798      	blx	r3
    36ae:	1e03      	subs	r3, r0, #0
    36b0:	d008      	beq.n	36c4 <_usart_init+0x6c>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
    36b2:	687b      	ldr	r3, [r7, #4]
    36b4:	0018      	movs	r0, r3
    36b6:	4b60      	ldr	r3, [pc, #384]	; (3838 <_usart_init+0x1e0>)
    36b8:	4798      	blx	r3
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
    36ba:	687b      	ldr	r3, [r7, #4]
    36bc:	2102      	movs	r1, #2
    36be:	0018      	movs	r0, r3
    36c0:	4b5e      	ldr	r3, [pc, #376]	; (383c <_usart_init+0x1e4>)
    36c2:	4798      	blx	r3
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    36c4:	68bb      	ldr	r3, [r7, #8]
    36c6:	2201      	movs	r2, #1
    36c8:	431a      	orrs	r2, r3
    36ca:	687b      	ldr	r3, [r7, #4]
    36cc:	0011      	movs	r1, r2
    36ce:	0018      	movs	r0, r3
    36d0:	4b5b      	ldr	r3, [pc, #364]	; (3840 <_usart_init+0x1e8>)
    36d2:	4798      	blx	r3
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);
    36d4:	687b      	ldr	r3, [r7, #4]
    36d6:	2101      	movs	r1, #1
    36d8:	0018      	movs	r0, r3
    36da:	4b58      	ldr	r3, [pc, #352]	; (383c <_usart_init+0x1e4>)
    36dc:	4798      	blx	r3

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    36de:	230f      	movs	r3, #15
    36e0:	18fb      	adds	r3, r7, r3
    36e2:	781a      	ldrb	r2, [r3, #0]
    36e4:	4952      	ldr	r1, [pc, #328]	; (3830 <_usart_init+0x1d8>)
    36e6:	0013      	movs	r3, r2
    36e8:	009b      	lsls	r3, r3, #2
    36ea:	189b      	adds	r3, r3, r2
    36ec:	009b      	lsls	r3, r3, #2
    36ee:	18cb      	adds	r3, r1, r3
    36f0:	3304      	adds	r3, #4
    36f2:	681a      	ldr	r2, [r3, #0]
    36f4:	687b      	ldr	r3, [r7, #4]
    36f6:	0011      	movs	r1, r2
    36f8:	0018      	movs	r0, r3
    36fa:	4b51      	ldr	r3, [pc, #324]	; (3840 <_usart_init+0x1e8>)
    36fc:	4798      	blx	r3
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    36fe:	230f      	movs	r3, #15
    3700:	18fb      	adds	r3, r7, r3
    3702:	781a      	ldrb	r2, [r3, #0]
    3704:	494a      	ldr	r1, [pc, #296]	; (3830 <_usart_init+0x1d8>)
    3706:	0013      	movs	r3, r2
    3708:	009b      	lsls	r3, r3, #2
    370a:	189b      	adds	r3, r3, r2
    370c:	009b      	lsls	r3, r3, #2
    370e:	18cb      	adds	r3, r1, r3
    3710:	3308      	adds	r3, #8
    3712:	681a      	ldr	r2, [r3, #0]
    3714:	687b      	ldr	r3, [r7, #4]
    3716:	0011      	movs	r1, r2
    3718:	0018      	movs	r0, r3
    371a:	4b4a      	ldr	r3, [pc, #296]	; (3844 <_usart_init+0x1ec>)
    371c:	4798      	blx	r3
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    371e:	230f      	movs	r3, #15
    3720:	18fb      	adds	r3, r7, r3
    3722:	781a      	ldrb	r2, [r3, #0]
    3724:	4942      	ldr	r1, [pc, #264]	; (3830 <_usart_init+0x1d8>)
    3726:	0013      	movs	r3, r2
    3728:	009b      	lsls	r3, r3, #2
    372a:	189b      	adds	r3, r3, r2
    372c:	009b      	lsls	r3, r3, #2
    372e:	18cb      	adds	r3, r1, r3
    3730:	3304      	adds	r3, #4
    3732:	681a      	ldr	r2, [r3, #0]
    3734:	2380      	movs	r3, #128	; 0x80
    3736:	019b      	lsls	r3, r3, #6
    3738:	4013      	ands	r3, r2
    373a:	d10e      	bne.n	375a <_usart_init+0x102>
    373c:	230f      	movs	r3, #15
    373e:	18fb      	adds	r3, r7, r3
    3740:	781a      	ldrb	r2, [r3, #0]
    3742:	493b      	ldr	r1, [pc, #236]	; (3830 <_usart_init+0x1d8>)
    3744:	0013      	movs	r3, r2
    3746:	009b      	lsls	r3, r3, #2
    3748:	189b      	adds	r3, r3, r2
    374a:	009b      	lsls	r3, r3, #2
    374c:	18cb      	adds	r3, r1, r3
    374e:	3304      	adds	r3, #4
    3750:	681a      	ldr	r2, [r3, #0]
    3752:	23c0      	movs	r3, #192	; 0xc0
    3754:	01db      	lsls	r3, r3, #7
    3756:	4013      	ands	r3, r2
    3758:	d030      	beq.n	37bc <_usart_init+0x164>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    375a:	230f      	movs	r3, #15
    375c:	18fb      	adds	r3, r7, r3
    375e:	781a      	ldrb	r2, [r3, #0]
    3760:	4933      	ldr	r1, [pc, #204]	; (3830 <_usart_init+0x1d8>)
    3762:	0013      	movs	r3, r2
    3764:	009b      	lsls	r3, r3, #2
    3766:	189b      	adds	r3, r3, r2
    3768:	009b      	lsls	r3, r3, #2
    376a:	18cb      	adds	r3, r1, r3
    376c:	330c      	adds	r3, #12
    376e:	881b      	ldrh	r3, [r3, #0]
    3770:	04db      	lsls	r3, r3, #19
    3772:	0cdb      	lsrs	r3, r3, #19
    3774:	b299      	uxth	r1, r3
    3776:	687a      	ldr	r2, [r7, #4]
    3778:	8993      	ldrh	r3, [r2, #12]
    377a:	04c9      	lsls	r1, r1, #19
    377c:	0cc8      	lsrs	r0, r1, #19
    377e:	0b5b      	lsrs	r3, r3, #13
    3780:	035b      	lsls	r3, r3, #13
    3782:	1c19      	adds	r1, r3, #0
    3784:	1c03      	adds	r3, r0, #0
    3786:	430b      	orrs	r3, r1
    3788:	8193      	strh	r3, [r2, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    378a:	230f      	movs	r3, #15
    378c:	18fb      	adds	r3, r7, r3
    378e:	781a      	ldrb	r2, [r3, #0]
    3790:	4927      	ldr	r1, [pc, #156]	; (3830 <_usart_init+0x1d8>)
    3792:	0013      	movs	r3, r2
    3794:	009b      	lsls	r3, r3, #2
    3796:	189b      	adds	r3, r3, r2
    3798:	009b      	lsls	r3, r3, #2
    379a:	18cb      	adds	r3, r1, r3
    379c:	330e      	adds	r3, #14
    379e:	781b      	ldrb	r3, [r3, #0]
    37a0:	1c1a      	adds	r2, r3, #0
    37a2:	2307      	movs	r3, #7
    37a4:	4013      	ands	r3, r2
    37a6:	b2d9      	uxtb	r1, r3
    37a8:	687a      	ldr	r2, [r7, #4]
    37aa:	8993      	ldrh	r3, [r2, #12]
    37ac:	0348      	lsls	r0, r1, #13
    37ae:	04db      	lsls	r3, r3, #19
    37b0:	0cdb      	lsrs	r3, r3, #19
    37b2:	1c19      	adds	r1, r3, #0
    37b4:	1c03      	adds	r3, r0, #0
    37b6:	430b      	orrs	r3, r1
    37b8:	8193      	strh	r3, [r2, #12]
    37ba:	e00f      	b.n	37dc <_usart_init+0x184>
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    37bc:	230f      	movs	r3, #15
    37be:	18fb      	adds	r3, r7, r3
    37c0:	781a      	ldrb	r2, [r3, #0]
    37c2:	491b      	ldr	r1, [pc, #108]	; (3830 <_usart_init+0x1d8>)
    37c4:	0013      	movs	r3, r2
    37c6:	009b      	lsls	r3, r3, #2
    37c8:	189b      	adds	r3, r3, r2
    37ca:	009b      	lsls	r3, r3, #2
    37cc:	18cb      	adds	r3, r1, r3
    37ce:	330c      	adds	r3, #12
    37d0:	881a      	ldrh	r2, [r3, #0]
    37d2:	687b      	ldr	r3, [r7, #4]
    37d4:	0011      	movs	r1, r2
    37d6:	0018      	movs	r0, r3
    37d8:	4b1b      	ldr	r3, [pc, #108]	; (3848 <_usart_init+0x1f0>)
    37da:	4798      	blx	r3
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    37dc:	230f      	movs	r3, #15
    37de:	18fb      	adds	r3, r7, r3
    37e0:	781a      	ldrb	r2, [r3, #0]
    37e2:	4913      	ldr	r1, [pc, #76]	; (3830 <_usart_init+0x1d8>)
    37e4:	0013      	movs	r3, r2
    37e6:	009b      	lsls	r3, r3, #2
    37e8:	189b      	adds	r3, r3, r2
    37ea:	009b      	lsls	r3, r3, #2
    37ec:	18cb      	adds	r3, r1, r3
    37ee:	330f      	adds	r3, #15
    37f0:	781a      	ldrb	r2, [r3, #0]
    37f2:	687b      	ldr	r3, [r7, #4]
    37f4:	0011      	movs	r1, r2
    37f6:	0018      	movs	r0, r3
    37f8:	4b14      	ldr	r3, [pc, #80]	; (384c <_usart_init+0x1f4>)
    37fa:	4798      	blx	r3
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    37fc:	230f      	movs	r3, #15
    37fe:	18fb      	adds	r3, r7, r3
    3800:	781a      	ldrb	r2, [r3, #0]
    3802:	490b      	ldr	r1, [pc, #44]	; (3830 <_usart_init+0x1d8>)
    3804:	0013      	movs	r3, r2
    3806:	009b      	lsls	r3, r3, #2
    3808:	189b      	adds	r3, r3, r2
    380a:	009b      	lsls	r3, r3, #2
    380c:	18cb      	adds	r3, r1, r3
    380e:	3310      	adds	r3, #16
    3810:	781a      	ldrb	r2, [r3, #0]
    3812:	687b      	ldr	r3, [r7, #4]
    3814:	0011      	movs	r1, r2
    3816:	0018      	movs	r0, r3
    3818:	4b0d      	ldr	r3, [pc, #52]	; (3850 <_usart_init+0x1f8>)
    381a:	4798      	blx	r3

	return ERR_NONE;
    381c:	2300      	movs	r3, #0
}
    381e:	0018      	movs	r0, r3
    3820:	46bd      	mov	sp, r7
    3822:	b005      	add	sp, #20
    3824:	bd90      	pop	{r4, r7, pc}
    3826:	46c0      	nop			; (mov r8, r8)
    3828:	000035d1 	.word	0x000035d1
    382c:	00003095 	.word	0x00003095
    3830:	20000008 	.word	0x20000008
    3834:	000032c9 	.word	0x000032c9
    3838:	0000329d 	.word	0x0000329d
    383c:	00003077 	.word	0x00003077
    3840:	000032f9 	.word	0x000032f9
    3844:	00003349 	.word	0x00003349
    3848:	0000338f 	.word	0x0000338f
    384c:	000033ad 	.word	0x000033ad
    3850:	00003463 	.word	0x00003463

00003854 <_spi_sync_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
    3854:	b580      	push	{r7, lr}
    3856:	b082      	sub	sp, #8
    3858:	af00      	add	r7, sp, #0
    385a:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    385c:	687b      	ldr	r3, [r7, #4]
    385e:	2101      	movs	r1, #1
    3860:	0018      	movs	r0, r3
    3862:	4b08      	ldr	r3, [pc, #32]	; (3884 <_spi_sync_enable+0x30>)
    3864:	4798      	blx	r3
    3866:	1e03      	subs	r3, r0, #0
    3868:	d002      	beq.n	3870 <_spi_sync_enable+0x1c>
		return ERR_BUSY;
    386a:	2304      	movs	r3, #4
    386c:	425b      	negs	r3, r3
    386e:	e004      	b.n	387a <_spi_sync_enable+0x26>
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);
    3870:	687b      	ldr	r3, [r7, #4]
    3872:	0018      	movs	r0, r3
    3874:	4b04      	ldr	r3, [pc, #16]	; (3888 <_spi_sync_enable+0x34>)
    3876:	4798      	blx	r3

	return ERR_NONE;
    3878:	2300      	movs	r3, #0
}
    387a:	0018      	movs	r0, r3
    387c:	46bd      	mov	sp, r7
    387e:	b002      	add	sp, #8
    3880:	bd80      	pop	{r7, pc}
    3882:	46c0      	nop			; (mov r8, r8)
    3884:	00003057 	.word	0x00003057
    3888:	00003189 	.word	0x00003189

0000388c <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    388c:	b580      	push	{r7, lr}
    388e:	b082      	sub	sp, #8
    3890:	af00      	add	r7, sp, #0
    3892:	6078      	str	r0, [r7, #4]
    3894:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    3896:	687b      	ldr	r3, [r7, #4]
    3898:	2b00      	cmp	r3, #0
    389a:	d004      	beq.n	38a6 <_spi_load_regs_master+0x1a>
    389c:	683b      	ldr	r3, [r7, #0]
    389e:	2b00      	cmp	r3, #0
    38a0:	d001      	beq.n	38a6 <_spi_load_regs_master+0x1a>
    38a2:	2301      	movs	r3, #1
    38a4:	e000      	b.n	38a8 <_spi_load_regs_master+0x1c>
    38a6:	2300      	movs	r3, #0
    38a8:	1c1a      	adds	r2, r3, #0
    38aa:	2301      	movs	r3, #1
    38ac:	4013      	ands	r3, r2
    38ae:	b2db      	uxtb	r3, r3
    38b0:	4a1f      	ldr	r2, [pc, #124]	; (3930 <_spi_load_regs_master+0xa4>)
    38b2:	4920      	ldr	r1, [pc, #128]	; (3934 <_spi_load_regs_master+0xa8>)
    38b4:	0018      	movs	r0, r3
    38b6:	4b20      	ldr	r3, [pc, #128]	; (3938 <_spi_load_regs_master+0xac>)
    38b8:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    38ba:	683b      	ldr	r3, [r7, #0]
    38bc:	781a      	ldrb	r2, [r3, #0]
    38be:	7859      	ldrb	r1, [r3, #1]
    38c0:	0209      	lsls	r1, r1, #8
    38c2:	430a      	orrs	r2, r1
    38c4:	7899      	ldrb	r1, [r3, #2]
    38c6:	0409      	lsls	r1, r1, #16
    38c8:	430a      	orrs	r2, r1
    38ca:	78db      	ldrb	r3, [r3, #3]
    38cc:	061b      	lsls	r3, r3, #24
    38ce:	4313      	orrs	r3, r2
    38d0:	001a      	movs	r2, r3
	hri_sercomspi_write_CTRLA_reg(
    38d2:	4b1a      	ldr	r3, [pc, #104]	; (393c <_spi_load_regs_master+0xb0>)
    38d4:	401a      	ands	r2, r3
    38d6:	687b      	ldr	r3, [r7, #4]
    38d8:	0011      	movs	r1, r2
    38da:	0018      	movs	r0, r3
    38dc:	4b18      	ldr	r3, [pc, #96]	; (3940 <_spi_load_regs_master+0xb4>)
    38de:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    38e0:	683b      	ldr	r3, [r7, #0]
    38e2:	791a      	ldrb	r2, [r3, #4]
    38e4:	7959      	ldrb	r1, [r3, #5]
    38e6:	0209      	lsls	r1, r1, #8
    38e8:	430a      	orrs	r2, r1
    38ea:	7999      	ldrb	r1, [r3, #6]
    38ec:	0409      	lsls	r1, r1, #16
    38ee:	430a      	orrs	r2, r1
    38f0:	79db      	ldrb	r3, [r3, #7]
    38f2:	061b      	lsls	r3, r3, #24
    38f4:	4313      	orrs	r3, r2
    38f6:	001a      	movs	r2, r3
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    38f8:	4b12      	ldr	r3, [pc, #72]	; (3944 <_spi_load_regs_master+0xb8>)
    38fa:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(
    38fc:	2280      	movs	r2, #128	; 0x80
    38fe:	0292      	lsls	r2, r2, #10
    3900:	431a      	orrs	r2, r3
    3902:	687b      	ldr	r3, [r7, #4]
    3904:	0011      	movs	r1, r2
    3906:	0018      	movs	r0, r3
    3908:	4b0f      	ldr	r3, [pc, #60]	; (3948 <_spi_load_regs_master+0xbc>)
    390a:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    390c:	683b      	ldr	r3, [r7, #0]
    390e:	7b1a      	ldrb	r2, [r3, #12]
    3910:	687b      	ldr	r3, [r7, #4]
    3912:	0011      	movs	r1, r2
    3914:	0018      	movs	r0, r3
    3916:	4b0d      	ldr	r3, [pc, #52]	; (394c <_spi_load_regs_master+0xc0>)
    3918:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    391a:	683b      	ldr	r3, [r7, #0]
    391c:	7b5a      	ldrb	r2, [r3, #13]
    391e:	687b      	ldr	r3, [r7, #4]
    3920:	0011      	movs	r1, r2
    3922:	0018      	movs	r0, r3
    3924:	4b0a      	ldr	r3, [pc, #40]	; (3950 <_spi_load_regs_master+0xc4>)
    3926:	4798      	blx	r3
}
    3928:	46c0      	nop			; (mov r8, r8)
    392a:	46bd      	mov	sp, r7
    392c:	b002      	add	sp, #8
    392e:	bd80      	pop	{r7, pc}
    3930:	000008ef 	.word	0x000008ef
    3934:	0000fcd8 	.word	0x0000fcd8
    3938:	00002841 	.word	0x00002841
    393c:	fffffefc 	.word	0xfffffefc
    3940:	00003249 	.word	0x00003249
    3944:	fffd1dbf 	.word	0xfffd1dbf
    3948:	00003321 	.word	0x00003321
    394c:	00003371 	.word	0x00003371
    3950:	00003443 	.word	0x00003443

00003954 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    3954:	b580      	push	{r7, lr}
    3956:	b082      	sub	sp, #8
    3958:	af00      	add	r7, sp, #0
    395a:	6078      	str	r0, [r7, #4]
    395c:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    395e:	687b      	ldr	r3, [r7, #4]
    3960:	2b00      	cmp	r3, #0
    3962:	d004      	beq.n	396e <_spi_load_regs_slave+0x1a>
    3964:	683b      	ldr	r3, [r7, #0]
    3966:	2b00      	cmp	r3, #0
    3968:	d001      	beq.n	396e <_spi_load_regs_slave+0x1a>
    396a:	2301      	movs	r3, #1
    396c:	e000      	b.n	3970 <_spi_load_regs_slave+0x1c>
    396e:	2300      	movs	r3, #0
    3970:	1c1a      	adds	r2, r3, #0
    3972:	2301      	movs	r3, #1
    3974:	4013      	ands	r3, r2
    3976:	b2db      	uxtb	r3, r3
    3978:	4a29      	ldr	r2, [pc, #164]	; (3a20 <_spi_load_regs_slave+0xcc>)
    397a:	492a      	ldr	r1, [pc, #168]	; (3a24 <_spi_load_regs_slave+0xd0>)
    397c:	0018      	movs	r0, r3
    397e:	4b2a      	ldr	r3, [pc, #168]	; (3a28 <_spi_load_regs_slave+0xd4>)
    3980:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    3982:	683b      	ldr	r3, [r7, #0]
    3984:	781a      	ldrb	r2, [r3, #0]
    3986:	7859      	ldrb	r1, [r3, #1]
    3988:	0209      	lsls	r1, r1, #8
    398a:	430a      	orrs	r2, r1
    398c:	7899      	ldrb	r1, [r3, #2]
    398e:	0409      	lsls	r1, r1, #16
    3990:	430a      	orrs	r2, r1
    3992:	78db      	ldrb	r3, [r3, #3]
    3994:	061b      	lsls	r3, r3, #24
    3996:	4313      	orrs	r3, r2
    3998:	001a      	movs	r2, r3
	hri_sercomspi_write_CTRLA_reg(
    399a:	4b24      	ldr	r3, [pc, #144]	; (3a2c <_spi_load_regs_slave+0xd8>)
    399c:	401a      	ands	r2, r3
    399e:	687b      	ldr	r3, [r7, #4]
    39a0:	0011      	movs	r1, r2
    39a2:	0018      	movs	r0, r3
    39a4:	4b22      	ldr	r3, [pc, #136]	; (3a30 <_spi_load_regs_slave+0xdc>)
    39a6:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    39a8:	683b      	ldr	r3, [r7, #0]
    39aa:	791a      	ldrb	r2, [r3, #4]
    39ac:	7959      	ldrb	r1, [r3, #5]
    39ae:	0209      	lsls	r1, r1, #8
    39b0:	430a      	orrs	r2, r1
    39b2:	7999      	ldrb	r1, [r3, #6]
    39b4:	0409      	lsls	r1, r1, #16
    39b6:	430a      	orrs	r2, r1
    39b8:	79db      	ldrb	r3, [r3, #7]
    39ba:	061b      	lsls	r3, r3, #24
    39bc:	4313      	orrs	r3, r2
    39be:	001a      	movs	r2, r3
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    39c0:	4b1c      	ldr	r3, [pc, #112]	; (3a34 <_spi_load_regs_slave+0xe0>)
    39c2:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(hw,
    39c4:	4a1c      	ldr	r2, [pc, #112]	; (3a38 <_spi_load_regs_slave+0xe4>)
    39c6:	431a      	orrs	r2, r3
    39c8:	687b      	ldr	r3, [r7, #4]
    39ca:	0011      	movs	r1, r2
    39cc:	0018      	movs	r0, r3
    39ce:	4b1b      	ldr	r3, [pc, #108]	; (3a3c <_spi_load_regs_slave+0xe8>)
    39d0:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    39d2:	683b      	ldr	r3, [r7, #0]
    39d4:	7a1a      	ldrb	r2, [r3, #8]
    39d6:	7a59      	ldrb	r1, [r3, #9]
    39d8:	0209      	lsls	r1, r1, #8
    39da:	430a      	orrs	r2, r1
    39dc:	7a99      	ldrb	r1, [r3, #10]
    39de:	0409      	lsls	r1, r1, #16
    39e0:	430a      	orrs	r2, r1
    39e2:	7adb      	ldrb	r3, [r3, #11]
    39e4:	061b      	lsls	r3, r3, #24
    39e6:	4313      	orrs	r3, r2
    39e8:	001a      	movs	r2, r3
    39ea:	687b      	ldr	r3, [r7, #4]
    39ec:	0011      	movs	r1, r2
    39ee:	0018      	movs	r0, r3
    39f0:	4b13      	ldr	r3, [pc, #76]	; (3a40 <_spi_load_regs_slave+0xec>)
    39f2:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    39f4:	683b      	ldr	r3, [r7, #0]
    39f6:	7b5a      	ldrb	r2, [r3, #13]
    39f8:	687b      	ldr	r3, [r7, #4]
    39fa:	0011      	movs	r1, r2
    39fc:	0018      	movs	r0, r3
    39fe:	4b11      	ldr	r3, [pc, #68]	; (3a44 <_spi_load_regs_slave+0xf0>)
    3a00:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    3a02:	46c0      	nop			; (mov r8, r8)
    3a04:	2301      	movs	r3, #1
    3a06:	425a      	negs	r2, r3
    3a08:	687b      	ldr	r3, [r7, #4]
    3a0a:	0011      	movs	r1, r2
    3a0c:	0018      	movs	r0, r3
    3a0e:	4b0e      	ldr	r3, [pc, #56]	; (3a48 <_spi_load_regs_slave+0xf4>)
    3a10:	4798      	blx	r3
    3a12:	1e03      	subs	r3, r0, #0
    3a14:	d1f6      	bne.n	3a04 <_spi_load_regs_slave+0xb0>
		;
}
    3a16:	46c0      	nop			; (mov r8, r8)
    3a18:	46bd      	mov	sp, r7
    3a1a:	b002      	add	sp, #8
    3a1c:	bd80      	pop	{r7, pc}
    3a1e:	46c0      	nop			; (mov r8, r8)
    3a20:	00000903 	.word	0x00000903
    3a24:	0000fcd8 	.word	0x0000fcd8
    3a28:	00002841 	.word	0x00002841
    3a2c:	fffffefc 	.word	0xfffffefc
    3a30:	00003249 	.word	0x00003249
    3a34:	fffdddbf 	.word	0xfffdddbf
    3a38:	00020240 	.word	0x00020240
    3a3c:	00003321 	.word	0x00003321
    3a40:	000033cb 	.word	0x000033cb
    3a44:	00003443 	.word	0x00003443
    3a48:	00003057 	.word	0x00003057

00003a4c <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    3a4c:	b590      	push	{r4, r7, lr}
    3a4e:	b085      	sub	sp, #20
    3a50:	af00      	add	r7, sp, #0
    3a52:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    3a54:	687b      	ldr	r3, [r7, #4]
    3a56:	220e      	movs	r2, #14
    3a58:	18bc      	adds	r4, r7, r2
    3a5a:	0018      	movs	r0, r3
    3a5c:	4b18      	ldr	r3, [pc, #96]	; (3ac0 <_spi_get_regs+0x74>)
    3a5e:	4798      	blx	r3
    3a60:	0003      	movs	r3, r0
    3a62:	7023      	strb	r3, [r4, #0]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    3a64:	230f      	movs	r3, #15
    3a66:	18fb      	adds	r3, r7, r3
    3a68:	2200      	movs	r2, #0
    3a6a:	701a      	strb	r2, [r3, #0]
    3a6c:	e01e      	b.n	3aac <_spi_get_regs+0x60>
		if (sercomspi_regs[i].n == n) {
    3a6e:	230f      	movs	r3, #15
    3a70:	18fb      	adds	r3, r7, r3
    3a72:	781a      	ldrb	r2, [r3, #0]
    3a74:	4913      	ldr	r1, [pc, #76]	; (3ac4 <_spi_get_regs+0x78>)
    3a76:	0013      	movs	r3, r2
    3a78:	011b      	lsls	r3, r3, #4
    3a7a:	189b      	adds	r3, r3, r2
    3a7c:	18cb      	adds	r3, r1, r3
    3a7e:	3310      	adds	r3, #16
    3a80:	781b      	ldrb	r3, [r3, #0]
    3a82:	220e      	movs	r2, #14
    3a84:	18ba      	adds	r2, r7, r2
    3a86:	7812      	ldrb	r2, [r2, #0]
    3a88:	429a      	cmp	r2, r3
    3a8a:	d108      	bne.n	3a9e <_spi_get_regs+0x52>
			return &sercomspi_regs[i];
    3a8c:	230f      	movs	r3, #15
    3a8e:	18fb      	adds	r3, r7, r3
    3a90:	781a      	ldrb	r2, [r3, #0]
    3a92:	0013      	movs	r3, r2
    3a94:	011b      	lsls	r3, r3, #4
    3a96:	189b      	adds	r3, r3, r2
    3a98:	4a0a      	ldr	r2, [pc, #40]	; (3ac4 <_spi_get_regs+0x78>)
    3a9a:	189b      	adds	r3, r3, r2
    3a9c:	e00c      	b.n	3ab8 <_spi_get_regs+0x6c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    3a9e:	230f      	movs	r3, #15
    3aa0:	18fb      	adds	r3, r7, r3
    3aa2:	781a      	ldrb	r2, [r3, #0]
    3aa4:	230f      	movs	r3, #15
    3aa6:	18fb      	adds	r3, r7, r3
    3aa8:	3201      	adds	r2, #1
    3aaa:	701a      	strb	r2, [r3, #0]
    3aac:	230f      	movs	r3, #15
    3aae:	18fb      	adds	r3, r7, r3
    3ab0:	781b      	ldrb	r3, [r3, #0]
    3ab2:	2b02      	cmp	r3, #2
    3ab4:	d9db      	bls.n	3a6e <_spi_get_regs+0x22>
		}
	}

	return NULL;
    3ab6:	2300      	movs	r3, #0
}
    3ab8:	0018      	movs	r0, r3
    3aba:	46bd      	mov	sp, r7
    3abc:	b005      	add	sp, #20
    3abe:	bd90      	pop	{r4, r7, pc}
    3ac0:	000035b1 	.word	0x000035b1
    3ac4:	0000fcf4 	.word	0x0000fcf4

00003ac8 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    3ac8:	b580      	push	{r7, lr}
    3aca:	b084      	sub	sp, #16
    3acc:	af00      	add	r7, sp, #0
    3ace:	6078      	str	r0, [r7, #4]
    3ad0:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    3ad2:	683b      	ldr	r3, [r7, #0]
    3ad4:	0018      	movs	r0, r3
    3ad6:	4b4a      	ldr	r3, [pc, #296]	; (3c00 <_spi_m_sync_init+0x138>)
    3ad8:	4798      	blx	r3
    3ada:	0003      	movs	r3, r0
    3adc:	60fb      	str	r3, [r7, #12]

	ASSERT(dev && hw);
    3ade:	687b      	ldr	r3, [r7, #4]
    3ae0:	2b00      	cmp	r3, #0
    3ae2:	d004      	beq.n	3aee <_spi_m_sync_init+0x26>
    3ae4:	683b      	ldr	r3, [r7, #0]
    3ae6:	2b00      	cmp	r3, #0
    3ae8:	d001      	beq.n	3aee <_spi_m_sync_init+0x26>
    3aea:	2301      	movs	r3, #1
    3aec:	e000      	b.n	3af0 <_spi_m_sync_init+0x28>
    3aee:	2300      	movs	r3, #0
    3af0:	1c1a      	adds	r2, r3, #0
    3af2:	2301      	movs	r3, #1
    3af4:	4013      	ands	r3, r2
    3af6:	b2db      	uxtb	r3, r3
    3af8:	4a42      	ldr	r2, [pc, #264]	; (3c04 <_spi_m_sync_init+0x13c>)
    3afa:	4943      	ldr	r1, [pc, #268]	; (3c08 <_spi_m_sync_init+0x140>)
    3afc:	0018      	movs	r0, r3
    3afe:	4b43      	ldr	r3, [pc, #268]	; (3c0c <_spi_m_sync_init+0x144>)
    3b00:	4798      	blx	r3

	if (regs == NULL) {
    3b02:	68fb      	ldr	r3, [r7, #12]
    3b04:	2b00      	cmp	r3, #0
    3b06:	d102      	bne.n	3b0e <_spi_m_sync_init+0x46>
		return ERR_INVALID_ARG;
    3b08:	230d      	movs	r3, #13
    3b0a:	425b      	negs	r3, r3
    3b0c:	e074      	b.n	3bf8 <_spi_m_sync_init+0x130>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    3b0e:	683b      	ldr	r3, [r7, #0]
    3b10:	2101      	movs	r1, #1
    3b12:	0018      	movs	r0, r3
    3b14:	4b3e      	ldr	r3, [pc, #248]	; (3c10 <_spi_m_sync_init+0x148>)
    3b16:	4798      	blx	r3
    3b18:	0003      	movs	r3, r0
    3b1a:	001a      	movs	r2, r3
    3b1c:	2301      	movs	r3, #1
    3b1e:	4053      	eors	r3, r2
    3b20:	b2db      	uxtb	r3, r3
    3b22:	2b00      	cmp	r3, #0
    3b24:	d026      	beq.n	3b74 <_spi_m_sync_init+0xac>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    3b26:	68fb      	ldr	r3, [r7, #12]
    3b28:	781a      	ldrb	r2, [r3, #0]
    3b2a:	7859      	ldrb	r1, [r3, #1]
    3b2c:	0209      	lsls	r1, r1, #8
    3b2e:	430a      	orrs	r2, r1
    3b30:	7899      	ldrb	r1, [r3, #2]
    3b32:	0409      	lsls	r1, r1, #16
    3b34:	430a      	orrs	r2, r1
    3b36:	78db      	ldrb	r3, [r3, #3]
    3b38:	061b      	lsls	r3, r3, #24
    3b3a:	4313      	orrs	r3, r2
    3b3c:	001a      	movs	r2, r3
    3b3e:	231c      	movs	r3, #28
    3b40:	4013      	ands	r3, r2
    3b42:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    3b44:	683b      	ldr	r3, [r7, #0]
    3b46:	2102      	movs	r1, #2
    3b48:	0018      	movs	r0, r3
    3b4a:	4b32      	ldr	r3, [pc, #200]	; (3c14 <_spi_m_sync_init+0x14c>)
    3b4c:	4798      	blx	r3
    3b4e:	1e03      	subs	r3, r0, #0
    3b50:	d008      	beq.n	3b64 <_spi_m_sync_init+0x9c>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    3b52:	683b      	ldr	r3, [r7, #0]
    3b54:	0018      	movs	r0, r3
    3b56:	4b30      	ldr	r3, [pc, #192]	; (3c18 <_spi_m_sync_init+0x150>)
    3b58:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    3b5a:	683b      	ldr	r3, [r7, #0]
    3b5c:	2102      	movs	r1, #2
    3b5e:	0018      	movs	r0, r3
    3b60:	4b2e      	ldr	r3, [pc, #184]	; (3c1c <_spi_m_sync_init+0x154>)
    3b62:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    3b64:	68bb      	ldr	r3, [r7, #8]
    3b66:	2201      	movs	r2, #1
    3b68:	431a      	orrs	r2, r3
    3b6a:	683b      	ldr	r3, [r7, #0]
    3b6c:	0011      	movs	r1, r2
    3b6e:	0018      	movs	r0, r3
    3b70:	4b2b      	ldr	r3, [pc, #172]	; (3c20 <_spi_m_sync_init+0x158>)
    3b72:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    3b74:	683b      	ldr	r3, [r7, #0]
    3b76:	2101      	movs	r1, #1
    3b78:	0018      	movs	r0, r3
    3b7a:	4b28      	ldr	r3, [pc, #160]	; (3c1c <_spi_m_sync_init+0x154>)
    3b7c:	4798      	blx	r3

	dev->prvt = hw;
    3b7e:	687b      	ldr	r3, [r7, #4]
    3b80:	683a      	ldr	r2, [r7, #0]
    3b82:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    3b84:	68fb      	ldr	r3, [r7, #12]
    3b86:	781a      	ldrb	r2, [r3, #0]
    3b88:	7859      	ldrb	r1, [r3, #1]
    3b8a:	0209      	lsls	r1, r1, #8
    3b8c:	430a      	orrs	r2, r1
    3b8e:	7899      	ldrb	r1, [r3, #2]
    3b90:	0409      	lsls	r1, r1, #16
    3b92:	430a      	orrs	r2, r1
    3b94:	78db      	ldrb	r3, [r3, #3]
    3b96:	061b      	lsls	r3, r3, #24
    3b98:	4313      	orrs	r3, r2
    3b9a:	001a      	movs	r2, r3
    3b9c:	231c      	movs	r3, #28
    3b9e:	4013      	ands	r3, r2
    3ba0:	2b08      	cmp	r3, #8
    3ba2:	d106      	bne.n	3bb2 <_spi_m_sync_init+0xea>
		_spi_load_regs_slave(hw, regs);
    3ba4:	68fa      	ldr	r2, [r7, #12]
    3ba6:	683b      	ldr	r3, [r7, #0]
    3ba8:	0011      	movs	r1, r2
    3baa:	0018      	movs	r0, r3
    3bac:	4b1d      	ldr	r3, [pc, #116]	; (3c24 <_spi_m_sync_init+0x15c>)
    3bae:	4798      	blx	r3
    3bb0:	e005      	b.n	3bbe <_spi_m_sync_init+0xf6>
	} else {
		_spi_load_regs_master(hw, regs);
    3bb2:	68fa      	ldr	r2, [r7, #12]
    3bb4:	683b      	ldr	r3, [r7, #0]
    3bb6:	0011      	movs	r1, r2
    3bb8:	0018      	movs	r0, r3
    3bba:	4b1b      	ldr	r3, [pc, #108]	; (3c28 <_spi_m_sync_init+0x160>)
    3bbc:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    3bbe:	68fb      	ldr	r3, [r7, #12]
    3bc0:	791a      	ldrb	r2, [r3, #4]
    3bc2:	7959      	ldrb	r1, [r3, #5]
    3bc4:	0209      	lsls	r1, r1, #8
    3bc6:	430a      	orrs	r2, r1
    3bc8:	7999      	ldrb	r1, [r3, #6]
    3bca:	0409      	lsls	r1, r1, #16
    3bcc:	430a      	orrs	r2, r1
    3bce:	79db      	ldrb	r3, [r3, #7]
    3bd0:	061b      	lsls	r3, r3, #24
    3bd2:	4313      	orrs	r3, r2
    3bd4:	001a      	movs	r2, r3
    3bd6:	2307      	movs	r3, #7
    3bd8:	4013      	ands	r3, r2
    3bda:	d101      	bne.n	3be0 <_spi_m_sync_init+0x118>
    3bdc:	2201      	movs	r2, #1
    3bde:	e000      	b.n	3be2 <_spi_m_sync_init+0x11a>
    3be0:	2202      	movs	r2, #2
    3be2:	687b      	ldr	r3, [r7, #4]
    3be4:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    3be6:	68fb      	ldr	r3, [r7, #12]
    3be8:	7b9a      	ldrb	r2, [r3, #14]
    3bea:	7bdb      	ldrb	r3, [r3, #15]
    3bec:	021b      	lsls	r3, r3, #8
    3bee:	4313      	orrs	r3, r2
    3bf0:	b29a      	uxth	r2, r3
    3bf2:	687b      	ldr	r3, [r7, #4]
    3bf4:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    3bf6:	2300      	movs	r3, #0
}
    3bf8:	0018      	movs	r0, r3
    3bfa:	46bd      	mov	sp, r7
    3bfc:	b004      	add	sp, #16
    3bfe:	bd80      	pop	{r7, pc}
    3c00:	00003a4d 	.word	0x00003a4d
    3c04:	00000925 	.word	0x00000925
    3c08:	0000fcd8 	.word	0x0000fcd8
    3c0c:	00002841 	.word	0x00002841
    3c10:	00003057 	.word	0x00003057
    3c14:	00003219 	.word	0x00003219
    3c18:	000031ed 	.word	0x000031ed
    3c1c:	00003039 	.word	0x00003039
    3c20:	00003249 	.word	0x00003249
    3c24:	00003955 	.word	0x00003955
    3c28:	0000388d 	.word	0x0000388d

00003c2c <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    3c2c:	b580      	push	{r7, lr}
    3c2e:	b082      	sub	sp, #8
    3c30:	af00      	add	r7, sp, #0
    3c32:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    3c34:	687b      	ldr	r3, [r7, #4]
    3c36:	2b00      	cmp	r3, #0
    3c38:	d005      	beq.n	3c46 <_spi_m_sync_enable+0x1a>
    3c3a:	687b      	ldr	r3, [r7, #4]
    3c3c:	681b      	ldr	r3, [r3, #0]
    3c3e:	2b00      	cmp	r3, #0
    3c40:	d001      	beq.n	3c46 <_spi_m_sync_enable+0x1a>
    3c42:	2301      	movs	r3, #1
    3c44:	e000      	b.n	3c48 <_spi_m_sync_enable+0x1c>
    3c46:	2300      	movs	r3, #0
    3c48:	1c1a      	adds	r2, r3, #0
    3c4a:	2301      	movs	r3, #1
    3c4c:	4013      	ands	r3, r2
    3c4e:	b2d8      	uxtb	r0, r3
    3c50:	2398      	movs	r3, #152	; 0x98
    3c52:	011a      	lsls	r2, r3, #4
    3c54:	4b06      	ldr	r3, [pc, #24]	; (3c70 <_spi_m_sync_enable+0x44>)
    3c56:	0019      	movs	r1, r3
    3c58:	4b06      	ldr	r3, [pc, #24]	; (3c74 <_spi_m_sync_enable+0x48>)
    3c5a:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    3c5c:	687b      	ldr	r3, [r7, #4]
    3c5e:	681b      	ldr	r3, [r3, #0]
    3c60:	0018      	movs	r0, r3
    3c62:	4b05      	ldr	r3, [pc, #20]	; (3c78 <_spi_m_sync_enable+0x4c>)
    3c64:	4798      	blx	r3
    3c66:	0003      	movs	r3, r0
}
    3c68:	0018      	movs	r0, r3
    3c6a:	46bd      	mov	sp, r7
    3c6c:	b002      	add	sp, #8
    3c6e:	bd80      	pop	{r7, pc}
    3c70:	0000fcd8 	.word	0x0000fcd8
    3c74:	00002841 	.word	0x00002841
    3c78:	00003855 	.word	0x00003855

00003c7c <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    3c7c:	b580      	push	{r7, lr}
    3c7e:	b082      	sub	sp, #8
    3c80:	af00      	add	r7, sp, #0
    3c82:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    3c84:	46c0      	nop			; (mov r8, r8)
    3c86:	687b      	ldr	r3, [r7, #4]
    3c88:	2103      	movs	r1, #3
    3c8a:	0018      	movs	r0, r3
    3c8c:	4b06      	ldr	r3, [pc, #24]	; (3ca8 <_spi_wait_bus_idle+0x2c>)
    3c8e:	4798      	blx	r3
    3c90:	1e03      	subs	r3, r0, #0
    3c92:	d0f8      	beq.n	3c86 <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    3c94:	687b      	ldr	r3, [r7, #4]
    3c96:	2103      	movs	r1, #3
    3c98:	0018      	movs	r0, r3
    3c9a:	4b04      	ldr	r3, [pc, #16]	; (3cac <_spi_wait_bus_idle+0x30>)
    3c9c:	4798      	blx	r3
}
    3c9e:	46c0      	nop			; (mov r8, r8)
    3ca0:	46bd      	mov	sp, r7
    3ca2:	b002      	add	sp, #8
    3ca4:	bd80      	pop	{r7, pc}
    3ca6:	46c0      	nop			; (mov r8, r8)
    3ca8:	000030b5 	.word	0x000030b5
    3cac:	00003103 	.word	0x00003103

00003cb0 <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    3cb0:	b580      	push	{r7, lr}
    3cb2:	b086      	sub	sp, #24
    3cb4:	af00      	add	r7, sp, #0
    3cb6:	60f8      	str	r0, [r7, #12]
    3cb8:	60b9      	str	r1, [r7, #8]
    3cba:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    3cbc:	68bb      	ldr	r3, [r7, #8]
    3cbe:	2204      	movs	r2, #4
    3cc0:	4013      	ands	r3, r2
    3cc2:	d101      	bne.n	3cc8 <_spi_rx_check_and_receive+0x18>
		return false;
    3cc4:	2300      	movs	r3, #0
    3cc6:	e024      	b.n	3d12 <_spi_rx_check_and_receive+0x62>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    3cc8:	68fb      	ldr	r3, [r7, #12]
    3cca:	0018      	movs	r0, r3
    3ccc:	4b13      	ldr	r3, [pc, #76]	; (3d1c <_spi_rx_check_and_receive+0x6c>)
    3cce:	4798      	blx	r3
    3cd0:	0003      	movs	r3, r0
    3cd2:	617b      	str	r3, [r7, #20]

	if (ctrl->rxbuf) {
    3cd4:	687b      	ldr	r3, [r7, #4]
    3cd6:	685b      	ldr	r3, [r3, #4]
    3cd8:	2b00      	cmp	r3, #0
    3cda:	d014      	beq.n	3d06 <_spi_rx_check_and_receive+0x56>
		*ctrl->rxbuf++ = (uint8_t)data;
    3cdc:	687b      	ldr	r3, [r7, #4]
    3cde:	685b      	ldr	r3, [r3, #4]
    3ce0:	1c59      	adds	r1, r3, #1
    3ce2:	687a      	ldr	r2, [r7, #4]
    3ce4:	6051      	str	r1, [r2, #4]
    3ce6:	697a      	ldr	r2, [r7, #20]
    3ce8:	b2d2      	uxtb	r2, r2
    3cea:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    3cec:	687b      	ldr	r3, [r7, #4]
    3cee:	7c1b      	ldrb	r3, [r3, #16]
    3cf0:	2b01      	cmp	r3, #1
    3cf2:	d908      	bls.n	3d06 <_spi_rx_check_and_receive+0x56>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    3cf4:	687b      	ldr	r3, [r7, #4]
    3cf6:	685b      	ldr	r3, [r3, #4]
    3cf8:	1c59      	adds	r1, r3, #1
    3cfa:	687a      	ldr	r2, [r7, #4]
    3cfc:	6051      	str	r1, [r2, #4]
    3cfe:	697a      	ldr	r2, [r7, #20]
    3d00:	0a12      	lsrs	r2, r2, #8
    3d02:	b2d2      	uxtb	r2, r2
    3d04:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    3d06:	687b      	ldr	r3, [r7, #4]
    3d08:	68db      	ldr	r3, [r3, #12]
    3d0a:	1c5a      	adds	r2, r3, #1
    3d0c:	687b      	ldr	r3, [r7, #4]
    3d0e:	60da      	str	r2, [r3, #12]

	return true;
    3d10:	2301      	movs	r3, #1
}
    3d12:	0018      	movs	r0, r3
    3d14:	46bd      	mov	sp, r7
    3d16:	b006      	add	sp, #24
    3d18:	bd80      	pop	{r7, pc}
    3d1a:	46c0      	nop			; (mov r8, r8)
    3d1c:	000033fb 	.word	0x000033fb

00003d20 <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    3d20:	b580      	push	{r7, lr}
    3d22:	b086      	sub	sp, #24
    3d24:	af00      	add	r7, sp, #0
    3d26:	60f8      	str	r0, [r7, #12]
    3d28:	60b9      	str	r1, [r7, #8]
    3d2a:	607a      	str	r2, [r7, #4]
    3d2c:	001a      	movs	r2, r3
    3d2e:	1cbb      	adds	r3, r7, #2
    3d30:	801a      	strh	r2, [r3, #0]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    3d32:	68bb      	ldr	r3, [r7, #8]
    3d34:	2201      	movs	r2, #1
    3d36:	4013      	ands	r3, r2
    3d38:	d02b      	beq.n	3d92 <_spi_tx_check_and_send+0x72>
		return;
	}

	if (ctrl->txbuf) {
    3d3a:	687b      	ldr	r3, [r7, #4]
    3d3c:	681b      	ldr	r3, [r3, #0]
    3d3e:	2b00      	cmp	r3, #0
    3d40:	d018      	beq.n	3d74 <_spi_tx_check_and_send+0x54>
		data = *ctrl->txbuf++;
    3d42:	687b      	ldr	r3, [r7, #4]
    3d44:	681b      	ldr	r3, [r3, #0]
    3d46:	1c59      	adds	r1, r3, #1
    3d48:	687a      	ldr	r2, [r7, #4]
    3d4a:	6011      	str	r1, [r2, #0]
    3d4c:	781b      	ldrb	r3, [r3, #0]
    3d4e:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    3d50:	687b      	ldr	r3, [r7, #4]
    3d52:	7c1b      	ldrb	r3, [r3, #16]
    3d54:	2b01      	cmp	r3, #1
    3d56:	d910      	bls.n	3d7a <_spi_tx_check_and_send+0x5a>
			data |= (*ctrl->txbuf) << 8;
    3d58:	687b      	ldr	r3, [r7, #4]
    3d5a:	681b      	ldr	r3, [r3, #0]
    3d5c:	781b      	ldrb	r3, [r3, #0]
    3d5e:	021b      	lsls	r3, r3, #8
    3d60:	001a      	movs	r2, r3
    3d62:	697b      	ldr	r3, [r7, #20]
    3d64:	4313      	orrs	r3, r2
    3d66:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    3d68:	687b      	ldr	r3, [r7, #4]
    3d6a:	681b      	ldr	r3, [r3, #0]
    3d6c:	1c5a      	adds	r2, r3, #1
    3d6e:	687b      	ldr	r3, [r7, #4]
    3d70:	601a      	str	r2, [r3, #0]
    3d72:	e002      	b.n	3d7a <_spi_tx_check_and_send+0x5a>
		}
	} else {
		data = dummy;
    3d74:	1cbb      	adds	r3, r7, #2
    3d76:	881b      	ldrh	r3, [r3, #0]
    3d78:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    3d7a:	687b      	ldr	r3, [r7, #4]
    3d7c:	689b      	ldr	r3, [r3, #8]
    3d7e:	1c5a      	adds	r2, r3, #1
    3d80:	687b      	ldr	r3, [r7, #4]
    3d82:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    3d84:	697a      	ldr	r2, [r7, #20]
    3d86:	68fb      	ldr	r3, [r7, #12]
    3d88:	0011      	movs	r1, r2
    3d8a:	0018      	movs	r0, r3
    3d8c:	4b03      	ldr	r3, [pc, #12]	; (3d9c <_spi_tx_check_and_send+0x7c>)
    3d8e:	4798      	blx	r3
    3d90:	e000      	b.n	3d94 <_spi_tx_check_and_send+0x74>
		return;
    3d92:	46c0      	nop			; (mov r8, r8)
}
    3d94:	46bd      	mov	sp, r7
    3d96:	b006      	add	sp, #24
    3d98:	bd80      	pop	{r7, pc}
    3d9a:	46c0      	nop			; (mov r8, r8)
    3d9c:	000033e3 	.word	0x000033e3

00003da0 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    3da0:	b580      	push	{r7, lr}
    3da2:	b082      	sub	sp, #8
    3da4:	af00      	add	r7, sp, #0
    3da6:	6078      	str	r0, [r7, #4]
    3da8:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    3daa:	687b      	ldr	r3, [r7, #4]
    3dac:	2280      	movs	r2, #128	; 0x80
    3dae:	4013      	ands	r3, r2
    3db0:	d00d      	beq.n	3dce <_spi_err_check+0x2e>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    3db2:	4a09      	ldr	r2, [pc, #36]	; (3dd8 <_spi_err_check+0x38>)
    3db4:	683b      	ldr	r3, [r7, #0]
    3db6:	0011      	movs	r1, r2
    3db8:	0018      	movs	r0, r3
    3dba:	4b08      	ldr	r3, [pc, #32]	; (3ddc <_spi_err_check+0x3c>)
    3dbc:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    3dbe:	683b      	ldr	r3, [r7, #0]
    3dc0:	2180      	movs	r1, #128	; 0x80
    3dc2:	0018      	movs	r0, r3
    3dc4:	4b06      	ldr	r3, [pc, #24]	; (3de0 <_spi_err_check+0x40>)
    3dc6:	4798      	blx	r3
		return ERR_OVERFLOW;
    3dc8:	2313      	movs	r3, #19
    3dca:	425b      	negs	r3, r3
    3dcc:	e000      	b.n	3dd0 <_spi_err_check+0x30>
	}

	return ERR_NONE;
    3dce:	2300      	movs	r3, #0
}
    3dd0:	0018      	movs	r0, r3
    3dd2:	46bd      	mov	sp, r7
    3dd4:	b002      	add	sp, #8
    3dd6:	bd80      	pop	{r7, pc}
    3dd8:	0000ffff 	.word	0x0000ffff
    3ddc:	00003483 	.word	0x00003483
    3de0:	00003103 	.word	0x00003103

00003de4 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    3de4:	b590      	push	{r4, r7, lr}
    3de6:	b08b      	sub	sp, #44	; 0x2c
    3de8:	af00      	add	r7, sp, #0
    3dea:	6078      	str	r0, [r7, #4]
    3dec:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    3dee:	687b      	ldr	r3, [r7, #4]
    3df0:	681b      	ldr	r3, [r3, #0]
    3df2:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    3df4:	2300      	movs	r3, #0
    3df6:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    3df8:	683b      	ldr	r3, [r7, #0]
    3dfa:	681a      	ldr	r2, [r3, #0]
    3dfc:	2308      	movs	r3, #8
    3dfe:	18fb      	adds	r3, r7, r3
    3e00:	601a      	str	r2, [r3, #0]
    3e02:	683b      	ldr	r3, [r7, #0]
    3e04:	685a      	ldr	r2, [r3, #4]
    3e06:	2308      	movs	r3, #8
    3e08:	18fb      	adds	r3, r7, r3
    3e0a:	605a      	str	r2, [r3, #4]
    3e0c:	2308      	movs	r3, #8
    3e0e:	18fb      	adds	r3, r7, r3
    3e10:	2200      	movs	r2, #0
    3e12:	609a      	str	r2, [r3, #8]
    3e14:	2308      	movs	r3, #8
    3e16:	18fb      	adds	r3, r7, r3
    3e18:	2200      	movs	r2, #0
    3e1a:	60da      	str	r2, [r3, #12]
    3e1c:	687b      	ldr	r3, [r7, #4]
    3e1e:	791a      	ldrb	r2, [r3, #4]
    3e20:	2308      	movs	r3, #8
    3e22:	18fb      	adds	r3, r7, r3
    3e24:	741a      	strb	r2, [r3, #16]

	ASSERT(dev && hw);
    3e26:	687b      	ldr	r3, [r7, #4]
    3e28:	2b00      	cmp	r3, #0
    3e2a:	d004      	beq.n	3e36 <_spi_m_sync_trans+0x52>
    3e2c:	6a3b      	ldr	r3, [r7, #32]
    3e2e:	2b00      	cmp	r3, #0
    3e30:	d001      	beq.n	3e36 <_spi_m_sync_trans+0x52>
    3e32:	2301      	movs	r3, #1
    3e34:	e000      	b.n	3e38 <_spi_m_sync_trans+0x54>
    3e36:	2300      	movs	r3, #0
    3e38:	1c1a      	adds	r2, r3, #0
    3e3a:	2301      	movs	r3, #1
    3e3c:	4013      	ands	r3, r2
    3e3e:	b2db      	uxtb	r3, r3
    3e40:	4a34      	ldr	r2, [pc, #208]	; (3f14 <_spi_m_sync_trans+0x130>)
    3e42:	4935      	ldr	r1, [pc, #212]	; (3f18 <_spi_m_sync_trans+0x134>)
    3e44:	0018      	movs	r0, r3
    3e46:	4b35      	ldr	r3, [pc, #212]	; (3f1c <_spi_m_sync_trans+0x138>)
    3e48:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    3e4a:	6a3b      	ldr	r3, [r7, #32]
    3e4c:	2107      	movs	r1, #7
    3e4e:	0018      	movs	r0, r3
    3e50:	4b33      	ldr	r3, [pc, #204]	; (3f20 <_spi_m_sync_trans+0x13c>)
    3e52:	4798      	blx	r3
    3e54:	1e03      	subs	r3, r0, #0
    3e56:	d002      	beq.n	3e5e <_spi_m_sync_trans+0x7a>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    3e58:	2304      	movs	r3, #4
    3e5a:	425b      	negs	r3, r3
    3e5c:	e055      	b.n	3f0a <_spi_m_sync_trans+0x126>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    3e5e:	6a3b      	ldr	r3, [r7, #32]
    3e60:	0018      	movs	r0, r3
    3e62:	4b30      	ldr	r3, [pc, #192]	; (3f24 <_spi_m_sync_trans+0x140>)
    3e64:	4798      	blx	r3
    3e66:	0003      	movs	r3, r0
    3e68:	001a      	movs	r2, r3
    3e6a:	2301      	movs	r3, #1
    3e6c:	4053      	eors	r3, r2
    3e6e:	b2db      	uxtb	r3, r3
    3e70:	2b00      	cmp	r3, #0
    3e72:	d002      	beq.n	3e7a <_spi_m_sync_trans+0x96>
		return ERR_NOT_INITIALIZED;
    3e74:	2314      	movs	r3, #20
    3e76:	425b      	negs	r3, r3
    3e78:	e047      	b.n	3f0a <_spi_m_sync_trans+0x126>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    3e7a:	6a3b      	ldr	r3, [r7, #32]
    3e7c:	0018      	movs	r0, r3
    3e7e:	4b2a      	ldr	r3, [pc, #168]	; (3f28 <_spi_m_sync_trans+0x144>)
    3e80:	4798      	blx	r3
    3e82:	0003      	movs	r3, r0
    3e84:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    3e86:	2308      	movs	r3, #8
    3e88:	18fa      	adds	r2, r7, r3
    3e8a:	69f9      	ldr	r1, [r7, #28]
    3e8c:	6a3b      	ldr	r3, [r7, #32]
    3e8e:	0018      	movs	r0, r3
    3e90:	4b26      	ldr	r3, [pc, #152]	; (3f2c <_spi_m_sync_trans+0x148>)
    3e92:	4798      	blx	r3
    3e94:	0003      	movs	r3, r0
    3e96:	001a      	movs	r2, r3
    3e98:	2301      	movs	r3, #1
    3e9a:	4053      	eors	r3, r2
    3e9c:	b2db      	uxtb	r3, r3
    3e9e:	2b00      	cmp	r3, #0
    3ea0:	d00f      	beq.n	3ec2 <_spi_m_sync_trans+0xde>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    3ea2:	2308      	movs	r3, #8
    3ea4:	18fb      	adds	r3, r7, r3
    3ea6:	68da      	ldr	r2, [r3, #12]
    3ea8:	2308      	movs	r3, #8
    3eaa:	18fb      	adds	r3, r7, r3
    3eac:	689b      	ldr	r3, [r3, #8]
    3eae:	429a      	cmp	r2, r3
    3eb0:	d307      	bcc.n	3ec2 <_spi_m_sync_trans+0xde>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    3eb2:	687b      	ldr	r3, [r7, #4]
    3eb4:	88db      	ldrh	r3, [r3, #6]
    3eb6:	2208      	movs	r2, #8
    3eb8:	18ba      	adds	r2, r7, r2
    3eba:	69f9      	ldr	r1, [r7, #28]
    3ebc:	6a38      	ldr	r0, [r7, #32]
    3ebe:	4c1c      	ldr	r4, [pc, #112]	; (3f30 <_spi_m_sync_trans+0x14c>)
    3ec0:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    3ec2:	6a3a      	ldr	r2, [r7, #32]
    3ec4:	69fb      	ldr	r3, [r7, #28]
    3ec6:	0011      	movs	r1, r2
    3ec8:	0018      	movs	r0, r3
    3eca:	4b1a      	ldr	r3, [pc, #104]	; (3f34 <_spi_m_sync_trans+0x150>)
    3ecc:	4798      	blx	r3
    3ece:	0003      	movs	r3, r0
    3ed0:	627b      	str	r3, [r7, #36]	; 0x24

		if (rc < 0) {
    3ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3ed4:	2b00      	cmp	r3, #0
    3ed6:	db12      	blt.n	3efe <_spi_m_sync_trans+0x11a>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    3ed8:	2308      	movs	r3, #8
    3eda:	18fb      	adds	r3, r7, r3
    3edc:	689a      	ldr	r2, [r3, #8]
    3ede:	683b      	ldr	r3, [r7, #0]
    3ee0:	689b      	ldr	r3, [r3, #8]
    3ee2:	429a      	cmp	r2, r3
    3ee4:	d3c9      	bcc.n	3e7a <_spi_m_sync_trans+0x96>
    3ee6:	2308      	movs	r3, #8
    3ee8:	18fb      	adds	r3, r7, r3
    3eea:	68da      	ldr	r2, [r3, #12]
    3eec:	683b      	ldr	r3, [r7, #0]
    3eee:	689b      	ldr	r3, [r3, #8]
    3ef0:	429a      	cmp	r2, r3
    3ef2:	d3c2      	bcc.n	3e7a <_spi_m_sync_trans+0x96>
			rc = ctrl.txcnt;
    3ef4:	2308      	movs	r3, #8
    3ef6:	18fb      	adds	r3, r7, r3
    3ef8:	689b      	ldr	r3, [r3, #8]
    3efa:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    3efc:	e000      	b.n	3f00 <_spi_m_sync_trans+0x11c>
			break;
    3efe:	46c0      	nop			; (mov r8, r8)
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    3f00:	6a3b      	ldr	r3, [r7, #32]
    3f02:	0018      	movs	r0, r3
    3f04:	4b0c      	ldr	r3, [pc, #48]	; (3f38 <_spi_m_sync_trans+0x154>)
    3f06:	4798      	blx	r3

	return rc;
    3f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    3f0a:	0018      	movs	r0, r3
    3f0c:	46bd      	mov	sp, r7
    3f0e:	b00b      	add	sp, #44	; 0x2c
    3f10:	bd90      	pop	{r4, r7, pc}
    3f12:	46c0      	nop			; (mov r8, r8)
    3f14:	00000a85 	.word	0x00000a85
    3f18:	0000fcd8 	.word	0x0000fcd8
    3f1c:	00002841 	.word	0x00002841
    3f20:	00003057 	.word	0x00003057
    3f24:	000031b5 	.word	0x000031b5
    3f28:	000030ed 	.word	0x000030ed
    3f2c:	00003cb1 	.word	0x00003cb1
    3f30:	00003d21 	.word	0x00003d21
    3f34:	00003da1 	.word	0x00003da1
    3f38:	00003c7d 	.word	0x00003c7d

00003f3c <hri_gclk_get_STATUS_SYNCBUSY_bit>:
{
    3f3c:	b580      	push	{r7, lr}
    3f3e:	b082      	sub	sp, #8
    3f40:	af00      	add	r7, sp, #0
    3f42:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
    3f44:	687b      	ldr	r3, [r7, #4]
    3f46:	785b      	ldrb	r3, [r3, #1]
    3f48:	b2db      	uxtb	r3, r3
    3f4a:	09db      	lsrs	r3, r3, #7
    3f4c:	2201      	movs	r2, #1
    3f4e:	4013      	ands	r3, r2
    3f50:	1e5a      	subs	r2, r3, #1
    3f52:	4193      	sbcs	r3, r2
    3f54:	b2db      	uxtb	r3, r3
}
    3f56:	0018      	movs	r0, r3
    3f58:	46bd      	mov	sp, r7
    3f5a:	b002      	add	sp, #8
    3f5c:	bd80      	pop	{r7, pc}

00003f5e <hri_sysctrl_get_PCLKSR_XOSC32KRDY_bit>:
{
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_XOSCRDY) >> SYSCTRL_PCLKSR_XOSCRDY_Pos;
}

static inline bool hri_sysctrl_get_PCLKSR_XOSC32KRDY_bit(const void *const hw)
{
    3f5e:	b580      	push	{r7, lr}
    3f60:	b082      	sub	sp, #8
    3f62:	af00      	add	r7, sp, #0
    3f64:	6078      	str	r0, [r7, #4]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) >> SYSCTRL_PCLKSR_XOSC32KRDY_Pos;
    3f66:	687b      	ldr	r3, [r7, #4]
    3f68:	68db      	ldr	r3, [r3, #12]
    3f6a:	085b      	lsrs	r3, r3, #1
    3f6c:	2201      	movs	r2, #1
    3f6e:	4013      	ands	r3, r2
    3f70:	1e5a      	subs	r2, r3, #1
    3f72:	4193      	sbcs	r3, r2
    3f74:	b2db      	uxtb	r3, r3
}
    3f76:	0018      	movs	r0, r3
    3f78:	46bd      	mov	sp, r7
    3f7a:	b002      	add	sp, #8
    3f7c:	bd80      	pop	{r7, pc}

00003f7e <hri_sysctrl_get_PCLKSR_OSC32KRDY_bit>:

static inline bool hri_sysctrl_get_PCLKSR_OSC32KRDY_bit(const void *const hw)
{
    3f7e:	b580      	push	{r7, lr}
    3f80:	b082      	sub	sp, #8
    3f82:	af00      	add	r7, sp, #0
    3f84:	6078      	str	r0, [r7, #4]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) >> SYSCTRL_PCLKSR_OSC32KRDY_Pos;
    3f86:	687b      	ldr	r3, [r7, #4]
    3f88:	68db      	ldr	r3, [r3, #12]
    3f8a:	089b      	lsrs	r3, r3, #2
    3f8c:	2201      	movs	r2, #1
    3f8e:	4013      	ands	r3, r2
    3f90:	1e5a      	subs	r2, r3, #1
    3f92:	4193      	sbcs	r3, r2
    3f94:	b2db      	uxtb	r3, r3
}
    3f96:	0018      	movs	r0, r3
    3f98:	46bd      	mov	sp, r7
    3f9a:	b002      	add	sp, #8
    3f9c:	bd80      	pop	{r7, pc}

00003f9e <hri_sysctrl_get_PCLKSR_OSC8MRDY_bit>:

static inline bool hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(const void *const hw)
{
    3f9e:	b580      	push	{r7, lr}
    3fa0:	b082      	sub	sp, #8
    3fa2:	af00      	add	r7, sp, #0
    3fa4:	6078      	str	r0, [r7, #4]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    3fa6:	687b      	ldr	r3, [r7, #4]
    3fa8:	68db      	ldr	r3, [r3, #12]
    3faa:	08db      	lsrs	r3, r3, #3
    3fac:	2201      	movs	r2, #1
    3fae:	4013      	ands	r3, r2
    3fb0:	1e5a      	subs	r2, r3, #1
    3fb2:	4193      	sbcs	r3, r2
    3fb4:	b2db      	uxtb	r3, r3
}
    3fb6:	0018      	movs	r0, r3
    3fb8:	46bd      	mov	sp, r7
    3fba:	b002      	add	sp, #8
    3fbc:	bd80      	pop	{r7, pc}

00003fbe <hri_sysctrl_get_PCLKSR_DFLLRDY_bit>:

static inline bool hri_sysctrl_get_PCLKSR_DFLLRDY_bit(const void *const hw)
{
    3fbe:	b580      	push	{r7, lr}
    3fc0:	b082      	sub	sp, #8
    3fc2:	af00      	add	r7, sp, #0
    3fc4:	6078      	str	r0, [r7, #4]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    3fc6:	687b      	ldr	r3, [r7, #4]
    3fc8:	68db      	ldr	r3, [r3, #12]
    3fca:	091b      	lsrs	r3, r3, #4
    3fcc:	2201      	movs	r2, #1
    3fce:	4013      	ands	r3, r2
    3fd0:	1e5a      	subs	r2, r3, #1
    3fd2:	4193      	sbcs	r3, r2
    3fd4:	b2db      	uxtb	r3, r3
}
    3fd6:	0018      	movs	r0, r3
    3fd8:	46bd      	mov	sp, r7
    3fda:	b002      	add	sp, #8
    3fdc:	bd80      	pop	{r7, pc}

00003fde <hri_sysctrl_get_PCLKSR_reg>:
{
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DPLLLTO) >> SYSCTRL_PCLKSR_DPLLLTO_Pos;
}

static inline hri_sysctrl_pclksr_reg_t hri_sysctrl_get_PCLKSR_reg(const void *const hw, hri_sysctrl_pclksr_reg_t mask)
{
    3fde:	b580      	push	{r7, lr}
    3fe0:	b084      	sub	sp, #16
    3fe2:	af00      	add	r7, sp, #0
    3fe4:	6078      	str	r0, [r7, #4]
    3fe6:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    3fe8:	687b      	ldr	r3, [r7, #4]
    3fea:	68db      	ldr	r3, [r3, #12]
    3fec:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    3fee:	68fb      	ldr	r3, [r7, #12]
    3ff0:	683a      	ldr	r2, [r7, #0]
    3ff2:	4013      	ands	r3, r2
    3ff4:	60fb      	str	r3, [r7, #12]
	return tmp;
    3ff6:	68fb      	ldr	r3, [r7, #12]
}
    3ff8:	0018      	movs	r0, r3
    3ffa:	46bd      	mov	sp, r7
    3ffc:	b004      	add	sp, #16
    3ffe:	bd80      	pop	{r7, pc}

00004000 <hri_sysctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Sysctrl *)hw)->PCLKSR.reg;
}

static inline bool hri_sysctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw)
{
    4000:	b580      	push	{r7, lr}
    4002:	b082      	sub	sp, #8
    4004:	af00      	add	r7, sp, #0
    4006:	6078      	str	r0, [r7, #4]
	return (((Sysctrl *)hw)->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_LOCK) >> SYSCTRL_DPLLSTATUS_LOCK_Pos;
    4008:	687b      	ldr	r3, [r7, #4]
    400a:	2250      	movs	r2, #80	; 0x50
    400c:	5c9b      	ldrb	r3, [r3, r2]
    400e:	b2db      	uxtb	r3, r3
    4010:	001a      	movs	r2, r3
    4012:	2301      	movs	r3, #1
    4014:	4013      	ands	r3, r2
    4016:	1e5a      	subs	r2, r3, #1
    4018:	4193      	sbcs	r3, r2
    401a:	b2db      	uxtb	r3, r3
}
    401c:	0018      	movs	r0, r3
    401e:	46bd      	mov	sp, r7
    4020:	b002      	add	sp, #8
    4022:	bd80      	pop	{r7, pc}

00004024 <hri_sysctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_sysctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw)
{
    4024:	b580      	push	{r7, lr}
    4026:	b082      	sub	sp, #8
    4028:	af00      	add	r7, sp, #0
    402a:	6078      	str	r0, [r7, #4]
	return (((Sysctrl *)hw)->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_CLKRDY) >> SYSCTRL_DPLLSTATUS_CLKRDY_Pos;
    402c:	687b      	ldr	r3, [r7, #4]
    402e:	2250      	movs	r2, #80	; 0x50
    4030:	5c9b      	ldrb	r3, [r3, r2]
    4032:	b2db      	uxtb	r3, r3
    4034:	085b      	lsrs	r3, r3, #1
    4036:	2201      	movs	r2, #1
    4038:	4013      	ands	r3, r2
    403a:	1e5a      	subs	r2, r3, #1
    403c:	4193      	sbcs	r3, r2
    403e:	b2db      	uxtb	r3, r3
}
    4040:	0018      	movs	r0, r3
    4042:	46bd      	mov	sp, r7
    4044:	b002      	add	sp, #8
    4046:	bd80      	pop	{r7, pc}

00004048 <hri_sysctrl_get_DPLLSTATUS_ENABLE_bit>:

static inline bool hri_sysctrl_get_DPLLSTATUS_ENABLE_bit(const void *const hw)
{
    4048:	b580      	push	{r7, lr}
    404a:	b082      	sub	sp, #8
    404c:	af00      	add	r7, sp, #0
    404e:	6078      	str	r0, [r7, #4]
	return (((Sysctrl *)hw)->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE) >> SYSCTRL_DPLLSTATUS_ENABLE_Pos;
    4050:	687b      	ldr	r3, [r7, #4]
    4052:	2250      	movs	r2, #80	; 0x50
    4054:	5c9b      	ldrb	r3, [r3, r2]
    4056:	b2db      	uxtb	r3, r3
    4058:	089b      	lsrs	r3, r3, #2
    405a:	2201      	movs	r2, #1
    405c:	4013      	ands	r3, r2
    405e:	1e5a      	subs	r2, r3, #1
    4060:	4193      	sbcs	r3, r2
    4062:	b2db      	uxtb	r3, r3
}
    4064:	0018      	movs	r0, r3
    4066:	46bd      	mov	sp, r7
    4068:	b002      	add	sp, #8
    406a:	bd80      	pop	{r7, pc}

0000406c <hri_sysctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sysctrl_write_XOSC32K_reg(const void *const hw, hri_sysctrl_xosc32k_reg_t data)
{
    406c:	b580      	push	{r7, lr}
    406e:	b082      	sub	sp, #8
    4070:	af00      	add	r7, sp, #0
    4072:	6078      	str	r0, [r7, #4]
    4074:	000a      	movs	r2, r1
    4076:	1cbb      	adds	r3, r7, #2
    4078:	801a      	strh	r2, [r3, #0]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->XOSC32K.reg = data;
    407a:	687b      	ldr	r3, [r7, #4]
    407c:	1cba      	adds	r2, r7, #2
    407e:	8812      	ldrh	r2, [r2, #0]
    4080:	829a      	strh	r2, [r3, #20]
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    4082:	46c0      	nop			; (mov r8, r8)
    4084:	46bd      	mov	sp, r7
    4086:	b002      	add	sp, #8
    4088:	bd80      	pop	{r7, pc}

0000408a <hri_sysctrl_read_OSC32K_CALIB_bf>:
	((Sysctrl *)hw)->OSC32K.reg ^= SYSCTRL_OSC32K_CALIB(mask);
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_sysctrl_osc32k_reg_t hri_sysctrl_read_OSC32K_CALIB_bf(const void *const hw)
{
    408a:	b580      	push	{r7, lr}
    408c:	b084      	sub	sp, #16
    408e:	af00      	add	r7, sp, #0
    4090:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC32K.reg;
    4092:	687b      	ldr	r3, [r7, #4]
    4094:	699b      	ldr	r3, [r3, #24]
    4096:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SYSCTRL_OSC32K_CALIB_Msk) >> SYSCTRL_OSC32K_CALIB_Pos;
    4098:	68fb      	ldr	r3, [r7, #12]
    409a:	0c1b      	lsrs	r3, r3, #16
    409c:	227f      	movs	r2, #127	; 0x7f
    409e:	4013      	ands	r3, r2
    40a0:	60fb      	str	r3, [r7, #12]
	return tmp;
    40a2:	68fb      	ldr	r3, [r7, #12]
}
    40a4:	0018      	movs	r0, r3
    40a6:	46bd      	mov	sp, r7
    40a8:	b004      	add	sp, #16
    40aa:	bd80      	pop	{r7, pc}

000040ac <hri_sysctrl_write_OSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sysctrl_write_OSC32K_reg(const void *const hw, hri_sysctrl_osc32k_reg_t data)
{
    40ac:	b580      	push	{r7, lr}
    40ae:	b082      	sub	sp, #8
    40b0:	af00      	add	r7, sp, #0
    40b2:	6078      	str	r0, [r7, #4]
    40b4:	6039      	str	r1, [r7, #0]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC32K.reg = data;
    40b6:	687b      	ldr	r3, [r7, #4]
    40b8:	683a      	ldr	r2, [r7, #0]
    40ba:	619a      	str	r2, [r3, #24]
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    40bc:	46c0      	nop			; (mov r8, r8)
    40be:	46bd      	mov	sp, r7
    40c0:	b002      	add	sp, #8
    40c2:	bd80      	pop	{r7, pc}

000040c4 <hri_sysctrl_read_OSCULP32K_CALIB_bf>:
	((Sysctrl *)hw)->OSCULP32K.reg ^= SYSCTRL_OSCULP32K_CALIB(mask);
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_sysctrl_osculp32k_reg_t hri_sysctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    40c4:	b580      	push	{r7, lr}
    40c6:	b084      	sub	sp, #16
    40c8:	af00      	add	r7, sp, #0
    40ca:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    40cc:	230f      	movs	r3, #15
    40ce:	18fb      	adds	r3, r7, r3
    40d0:	687a      	ldr	r2, [r7, #4]
    40d2:	7f12      	ldrb	r2, [r2, #28]
    40d4:	701a      	strb	r2, [r3, #0]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    40d6:	230f      	movs	r3, #15
    40d8:	18fb      	adds	r3, r7, r3
    40da:	220f      	movs	r2, #15
    40dc:	18ba      	adds	r2, r7, r2
    40de:	7812      	ldrb	r2, [r2, #0]
    40e0:	211f      	movs	r1, #31
    40e2:	400a      	ands	r2, r1
    40e4:	701a      	strb	r2, [r3, #0]
	return tmp;
    40e6:	230f      	movs	r3, #15
    40e8:	18fb      	adds	r3, r7, r3
    40ea:	781b      	ldrb	r3, [r3, #0]
}
    40ec:	0018      	movs	r0, r3
    40ee:	46bd      	mov	sp, r7
    40f0:	b004      	add	sp, #16
    40f2:	bd80      	pop	{r7, pc}

000040f4 <hri_sysctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sysctrl_write_OSCULP32K_reg(const void *const hw, hri_sysctrl_osculp32k_reg_t data)
{
    40f4:	b580      	push	{r7, lr}
    40f6:	b082      	sub	sp, #8
    40f8:	af00      	add	r7, sp, #0
    40fa:	6078      	str	r0, [r7, #4]
    40fc:	000a      	movs	r2, r1
    40fe:	1cfb      	adds	r3, r7, #3
    4100:	701a      	strb	r2, [r3, #0]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    4102:	687b      	ldr	r3, [r7, #4]
    4104:	1cfa      	adds	r2, r7, #3
    4106:	7812      	ldrb	r2, [r2, #0]
    4108:	771a      	strb	r2, [r3, #28]
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    410a:	46c0      	nop			; (mov r8, r8)
    410c:	46bd      	mov	sp, r7
    410e:	b002      	add	sp, #8
    4110:	bd80      	pop	{r7, pc}

00004112 <hri_sysctrl_read_OSC8M_CALIB_bf>:
	((Sysctrl *)hw)->OSC8M.reg ^= SYSCTRL_OSC8M_CALIB(mask);
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
    4112:	b580      	push	{r7, lr}
    4114:	b084      	sub	sp, #16
    4116:	af00      	add	r7, sp, #0
    4118:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    411a:	687b      	ldr	r3, [r7, #4]
    411c:	6a1b      	ldr	r3, [r3, #32]
    411e:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SYSCTRL_OSC8M_CALIB_Msk) >> SYSCTRL_OSC8M_CALIB_Pos;
    4120:	68fb      	ldr	r3, [r7, #12]
    4122:	0c1b      	lsrs	r3, r3, #16
    4124:	051b      	lsls	r3, r3, #20
    4126:	0d1b      	lsrs	r3, r3, #20
    4128:	60fb      	str	r3, [r7, #12]
	return tmp;
    412a:	68fb      	ldr	r3, [r7, #12]
}
    412c:	0018      	movs	r0, r3
    412e:	46bd      	mov	sp, r7
    4130:	b004      	add	sp, #16
    4132:	bd80      	pop	{r7, pc}

00004134 <hri_sysctrl_read_OSC8M_FRANGE_bf>:
	((Sysctrl *)hw)->OSC8M.reg ^= SYSCTRL_OSC8M_FRANGE(mask);
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
    4134:	b580      	push	{r7, lr}
    4136:	b084      	sub	sp, #16
    4138:	af00      	add	r7, sp, #0
    413a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    413c:	687b      	ldr	r3, [r7, #4]
    413e:	6a1b      	ldr	r3, [r3, #32]
    4140:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SYSCTRL_OSC8M_FRANGE_Msk) >> SYSCTRL_OSC8M_FRANGE_Pos;
    4142:	68fb      	ldr	r3, [r7, #12]
    4144:	0f9b      	lsrs	r3, r3, #30
    4146:	60fb      	str	r3, [r7, #12]
	return tmp;
    4148:	68fb      	ldr	r3, [r7, #12]
}
    414a:	0018      	movs	r0, r3
    414c:	46bd      	mov	sp, r7
    414e:	b004      	add	sp, #16
    4150:	bd80      	pop	{r7, pc}

00004152 <hri_sysctrl_write_OSC8M_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
    4152:	b580      	push	{r7, lr}
    4154:	b082      	sub	sp, #8
    4156:	af00      	add	r7, sp, #0
    4158:	6078      	str	r0, [r7, #4]
    415a:	6039      	str	r1, [r7, #0]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    415c:	687b      	ldr	r3, [r7, #4]
    415e:	683a      	ldr	r2, [r7, #0]
    4160:	621a      	str	r2, [r3, #32]
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    4162:	46c0      	nop			; (mov r8, r8)
    4164:	46bd      	mov	sp, r7
    4166:	b002      	add	sp, #8
    4168:	bd80      	pop	{r7, pc}

0000416a <hri_sysctrl_get_DFLLCTRL_MODE_bit>:
	((Sysctrl *)hw)->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_MODE;
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sysctrl_get_DFLLCTRL_MODE_bit(const void *const hw)
{
    416a:	b580      	push	{r7, lr}
    416c:	b084      	sub	sp, #16
    416e:	af00      	add	r7, sp, #0
    4170:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
    4172:	230e      	movs	r3, #14
    4174:	18fb      	adds	r3, r7, r3
    4176:	687a      	ldr	r2, [r7, #4]
    4178:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    417a:	801a      	strh	r2, [r3, #0]
	tmp = (tmp & SYSCTRL_DFLLCTRL_MODE) >> SYSCTRL_DFLLCTRL_MODE_Pos;
    417c:	230e      	movs	r3, #14
    417e:	18fb      	adds	r3, r7, r3
    4180:	881b      	ldrh	r3, [r3, #0]
    4182:	089b      	lsrs	r3, r3, #2
    4184:	b29a      	uxth	r2, r3
    4186:	230e      	movs	r3, #14
    4188:	18fb      	adds	r3, r7, r3
    418a:	2101      	movs	r1, #1
    418c:	400a      	ands	r2, r1
    418e:	801a      	strh	r2, [r3, #0]
	return (bool)tmp;
    4190:	230e      	movs	r3, #14
    4192:	18fb      	adds	r3, r7, r3
    4194:	881b      	ldrh	r3, [r3, #0]
    4196:	1e5a      	subs	r2, r3, #1
    4198:	4193      	sbcs	r3, r2
    419a:	b2db      	uxtb	r3, r3
}
    419c:	0018      	movs	r0, r3
    419e:	46bd      	mov	sp, r7
    41a0:	b004      	add	sp, #16
    41a2:	bd80      	pop	{r7, pc}

000041a4 <hri_sysctrl_write_DFLLCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
    41a4:	b580      	push	{r7, lr}
    41a6:	b082      	sub	sp, #8
    41a8:	af00      	add	r7, sp, #0
    41aa:	6078      	str	r0, [r7, #4]
    41ac:	000a      	movs	r2, r1
    41ae:	1cbb      	adds	r3, r7, #2
    41b0:	801a      	strh	r2, [r3, #0]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    41b2:	687b      	ldr	r3, [r7, #4]
    41b4:	1cba      	adds	r2, r7, #2
    41b6:	8812      	ldrh	r2, [r2, #0]
    41b8:	849a      	strh	r2, [r3, #36]	; 0x24
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    41ba:	46c0      	nop			; (mov r8, r8)
    41bc:	46bd      	mov	sp, r7
    41be:	b002      	add	sp, #8
    41c0:	bd80      	pop	{r7, pc}

000041c2 <hri_sysctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sysctrl_write_DFLLVAL_reg(const void *const hw, hri_sysctrl_dfllval_reg_t data)
{
    41c2:	b580      	push	{r7, lr}
    41c4:	b082      	sub	sp, #8
    41c6:	af00      	add	r7, sp, #0
    41c8:	6078      	str	r0, [r7, #4]
    41ca:	6039      	str	r1, [r7, #0]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLVAL.reg = data;
    41cc:	687b      	ldr	r3, [r7, #4]
    41ce:	683a      	ldr	r2, [r7, #0]
    41d0:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    41d2:	46c0      	nop			; (mov r8, r8)
    41d4:	46bd      	mov	sp, r7
    41d6:	b002      	add	sp, #8
    41d8:	bd80      	pop	{r7, pc}

000041da <hri_sysctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
    41da:	b580      	push	{r7, lr}
    41dc:	b082      	sub	sp, #8
    41de:	af00      	add	r7, sp, #0
    41e0:	6078      	str	r0, [r7, #4]
    41e2:	6039      	str	r1, [r7, #0]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
    41e4:	687b      	ldr	r3, [r7, #4]
    41e6:	683a      	ldr	r2, [r7, #0]
    41e8:	62da      	str	r2, [r3, #44]	; 0x2c
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    41ea:	46c0      	nop			; (mov r8, r8)
    41ec:	46bd      	mov	sp, r7
    41ee:	b002      	add	sp, #8
    41f0:	bd80      	pop	{r7, pc}

000041f2 <hri_sysctrl_write_DPLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sysctrl_write_DPLLCTRLA_reg(const void *const hw, hri_sysctrl_dpllctrla_reg_t data)
{
    41f2:	b580      	push	{r7, lr}
    41f4:	b082      	sub	sp, #8
    41f6:	af00      	add	r7, sp, #0
    41f8:	6078      	str	r0, [r7, #4]
    41fa:	000a      	movs	r2, r1
    41fc:	1cfb      	adds	r3, r7, #3
    41fe:	701a      	strb	r2, [r3, #0]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DPLLCTRLA.reg = data;
    4200:	687b      	ldr	r3, [r7, #4]
    4202:	1cfa      	adds	r2, r7, #3
    4204:	2144      	movs	r1, #68	; 0x44
    4206:	7812      	ldrb	r2, [r2, #0]
    4208:	545a      	strb	r2, [r3, r1]
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    420a:	46c0      	nop			; (mov r8, r8)
    420c:	46bd      	mov	sp, r7
    420e:	b002      	add	sp, #8
    4210:	bd80      	pop	{r7, pc}

00004212 <hri_sysctrl_write_DPLLRATIO_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sysctrl_write_DPLLRATIO_reg(const void *const hw, hri_sysctrl_dpllratio_reg_t data)
{
    4212:	b580      	push	{r7, lr}
    4214:	b082      	sub	sp, #8
    4216:	af00      	add	r7, sp, #0
    4218:	6078      	str	r0, [r7, #4]
    421a:	6039      	str	r1, [r7, #0]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DPLLRATIO.reg = data;
    421c:	687b      	ldr	r3, [r7, #4]
    421e:	683a      	ldr	r2, [r7, #0]
    4220:	649a      	str	r2, [r3, #72]	; 0x48
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    4222:	46c0      	nop			; (mov r8, r8)
    4224:	46bd      	mov	sp, r7
    4226:	b002      	add	sp, #8
    4228:	bd80      	pop	{r7, pc}

0000422a <hri_sysctrl_write_DPLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sysctrl_write_DPLLCTRLB_reg(const void *const hw, hri_sysctrl_dpllctrlb_reg_t data)
{
    422a:	b580      	push	{r7, lr}
    422c:	b082      	sub	sp, #8
    422e:	af00      	add	r7, sp, #0
    4230:	6078      	str	r0, [r7, #4]
    4232:	6039      	str	r1, [r7, #0]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DPLLCTRLB.reg = data;
    4234:	687b      	ldr	r3, [r7, #4]
    4236:	683a      	ldr	r2, [r7, #0]
    4238:	64da      	str	r2, [r3, #76]	; 0x4c
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    423a:	46c0      	nop			; (mov r8, r8)
    423c:	46bd      	mov	sp, r7
    423e:	b002      	add	sp, #8
    4240:	bd80      	pop	{r7, pc}
	...

00004244 <_sysctrl_init_sources>:
 * \brief Initializes clock generators
 *
 * All GCLK generators are running when this function returns.
 */
void _sysctrl_init_sources(void)
{
    4244:	b580      	push	{r7, lr}
    4246:	b082      	sub	sp, #8
    4248:	af00      	add	r7, sp, #0
	void *   hw = (void *)SYSCTRL;
    424a:	4b39      	ldr	r3, [pc, #228]	; (4330 <_sysctrl_init_sources+0xec>)
    424c:	607b      	str	r3, [r7, #4]
	uint16_t calib;

#if CONF_XOSC32K_CONFIG == 1
	hri_sysctrl_write_XOSC32K_reg(
    424e:	687b      	ldr	r3, [r7, #4]
    4250:	2166      	movs	r1, #102	; 0x66
    4252:	0018      	movs	r0, r3
    4254:	4b37      	ldr	r3, [pc, #220]	; (4334 <_sysctrl_init_sources+0xf0>)
    4256:	4798      	blx	r3
	        | (CONF_XOSC_RUNSTDBY << SYSCTRL_XOSC_RUNSTDBY_Pos) | (CONF_XOSC_XTALEN << SYSCTRL_XOSC_XTALEN_Pos)
	        | (CONF_XOSC_ENABLE << SYSCTRL_XOSC_ENABLE_Pos));
#endif

#if CONF_OSC8M_CONFIG == 1
	calib = hri_sysctrl_read_OSC8M_CALIB_bf(hw);
    4258:	687b      	ldr	r3, [r7, #4]
    425a:	0018      	movs	r0, r3
    425c:	4b36      	ldr	r3, [pc, #216]	; (4338 <_sysctrl_init_sources+0xf4>)
    425e:	4798      	blx	r3
    4260:	0002      	movs	r2, r0
    4262:	1cbb      	adds	r3, r7, #2
    4264:	801a      	strh	r2, [r3, #0]

	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    4266:	687b      	ldr	r3, [r7, #4]
    4268:	0018      	movs	r0, r3
    426a:	4b34      	ldr	r3, [pc, #208]	; (433c <_sysctrl_init_sources+0xf8>)
    426c:	4798      	blx	r3
    426e:	0003      	movs	r3, r0
    4270:	079a      	lsls	r2, r3, #30
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    4272:	1cbb      	adds	r3, r7, #2
    4274:	881b      	ldrh	r3, [r3, #0]
    4276:	041b      	lsls	r3, r3, #16
    4278:	0019      	movs	r1, r3
    427a:	4b31      	ldr	r3, [pc, #196]	; (4340 <_sysctrl_init_sources+0xfc>)
    427c:	400b      	ands	r3, r1
#endif
	                                SYSCTRL_OSC8M_PRESC(CONF_OSC8M_PRESC)
	                                | (CONF_OSC8M_RUNSTDBY << SYSCTRL_OSC8M_RUNSTDBY_Pos)
    427e:	4313      	orrs	r3, r2
	hri_sysctrl_write_OSC8M_reg(hw,
    4280:	2202      	movs	r2, #2
    4282:	431a      	orrs	r2, r3
    4284:	687b      	ldr	r3, [r7, #4]
    4286:	0011      	movs	r1, r2
    4288:	0018      	movs	r0, r3
    428a:	4b2e      	ldr	r3, [pc, #184]	; (4344 <_sysctrl_init_sources+0x100>)
    428c:	4798      	blx	r3
	                                | (CONF_OSC8M_ENABLE << SYSCTRL_OSC8M_ENABLE_Pos));
#endif

#if CONF_OSC32K_CONFIG == 1
	calib = hri_sysctrl_read_OSC32K_CALIB_bf(hw);
    428e:	687b      	ldr	r3, [r7, #4]
    4290:	0018      	movs	r0, r3
    4292:	4b2d      	ldr	r3, [pc, #180]	; (4348 <_sysctrl_init_sources+0x104>)
    4294:	4798      	blx	r3
    4296:	0002      	movs	r2, r0
    4298:	1cbb      	adds	r3, r7, #2
    429a:	801a      	strh	r2, [r3, #0]
	hri_sysctrl_write_OSC32K_reg(
	    hw,
#if CONF_OSC32K_OVERWRITE_CALIBRATION == 1
	    SYSCTRL_OSC32K_CALIB(CONF_OSC32K_CALIB) |
#else
	    SYSCTRL_OSC32K_CALIB(calib) |
    429c:	1cbb      	adds	r3, r7, #2
    429e:	881b      	ldrh	r3, [r3, #0]
    42a0:	041b      	lsls	r3, r3, #16
    42a2:	001a      	movs	r2, r3
#endif
	        (CONF_OSC32K_WRTLOCK << SYSCTRL_OSC32K_WRTLOCK_Pos) | SYSCTRL_OSC32K_STARTUP(CONF_OSC32K_STARTUP)
    42a4:	23fe      	movs	r3, #254	; 0xfe
    42a6:	03db      	lsls	r3, r3, #15
    42a8:	4013      	ands	r3, r2
	        | (CONF_OSC32K_RUNSTDBY << SYSCTRL_OSC32K_RUNSTDBY_Pos) | (CONF_OSC32K_EN1K << SYSCTRL_OSC32K_EN1K_Pos)
	        | (CONF_OSC32K_EN32K << SYSCTRL_OSC32K_EN32K_Pos) | (1 << SYSCTRL_OSC32K_ENABLE_Pos));
    42aa:	2246      	movs	r2, #70	; 0x46
    42ac:	431a      	orrs	r2, r3
	hri_sysctrl_write_OSC32K_reg(
    42ae:	687b      	ldr	r3, [r7, #4]
    42b0:	0011      	movs	r1, r2
    42b2:	0018      	movs	r0, r3
    42b4:	4b25      	ldr	r3, [pc, #148]	; (434c <_sysctrl_init_sources+0x108>)
    42b6:	4798      	blx	r3
	/* Enable OSC32K anyway since GCLK configuration may need it to sync */
	hri_sysctrl_set_OSC32K_ENABLE_bit(hw);
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_sysctrl_read_OSCULP32K_CALIB_bf(hw);
    42b8:	687b      	ldr	r3, [r7, #4]
    42ba:	0018      	movs	r0, r3
    42bc:	4b24      	ldr	r3, [pc, #144]	; (4350 <_sysctrl_init_sources+0x10c>)
    42be:	4798      	blx	r3
    42c0:	0003      	movs	r3, r0
    42c2:	001a      	movs	r2, r3
    42c4:	1cbb      	adds	r3, r7, #2
    42c6:	801a      	strh	r2, [r3, #0]

	hri_sysctrl_write_OSCULP32K_reg(hw,
    42c8:	1cbb      	adds	r3, r7, #2
    42ca:	881b      	ldrh	r3, [r3, #0]
    42cc:	b2db      	uxtb	r3, r3
    42ce:	221f      	movs	r2, #31
    42d0:	4013      	ands	r3, r2
    42d2:	b2da      	uxtb	r2, r3
    42d4:	687b      	ldr	r3, [r7, #4]
    42d6:	0011      	movs	r1, r2
    42d8:	0018      	movs	r0, r3
    42da:	4b1e      	ldr	r3, [pc, #120]	; (4354 <_sysctrl_init_sources+0x110>)
    42dc:	4798      	blx	r3
	                                    (CONF_OSC32K_WRTLOCK << SYSCTRL_OSCULP32K_WRTLOCK_Pos));
#endif

#if CONF_XOSC32K_CONFIG == 1
#if CONF_XOSC32K_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_XOSC32KRDY_bit(hw))
    42de:	46c0      	nop			; (mov r8, r8)
    42e0:	687b      	ldr	r3, [r7, #4]
    42e2:	0018      	movs	r0, r3
    42e4:	4b1c      	ldr	r3, [pc, #112]	; (4358 <_sysctrl_init_sources+0x114>)
    42e6:	4798      	blx	r3
    42e8:	0003      	movs	r3, r0
    42ea:	001a      	movs	r2, r3
    42ec:	2301      	movs	r3, #1
    42ee:	4053      	eors	r3, r2
    42f0:	b2db      	uxtb	r3, r3
    42f2:	2b00      	cmp	r3, #0
    42f4:	d1f4      	bne.n	42e0 <_sysctrl_init_sources+0x9c>
#endif
#endif

#if CONF_OSC32K_CONFIG == 1
#if CONF_OSC32K_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC32KRDY_bit(hw))
    42f6:	46c0      	nop			; (mov r8, r8)
    42f8:	687b      	ldr	r3, [r7, #4]
    42fa:	0018      	movs	r0, r3
    42fc:	4b17      	ldr	r3, [pc, #92]	; (435c <_sysctrl_init_sources+0x118>)
    42fe:	4798      	blx	r3
    4300:	0003      	movs	r3, r0
    4302:	001a      	movs	r2, r3
    4304:	2301      	movs	r3, #1
    4306:	4053      	eors	r3, r2
    4308:	b2db      	uxtb	r3, r3
    430a:	2b00      	cmp	r3, #0
    430c:	d1f4      	bne.n	42f8 <_sysctrl_init_sources+0xb4>
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    430e:	46c0      	nop			; (mov r8, r8)
    4310:	687b      	ldr	r3, [r7, #4]
    4312:	0018      	movs	r0, r3
    4314:	4b12      	ldr	r3, [pc, #72]	; (4360 <_sysctrl_init_sources+0x11c>)
    4316:	4798      	blx	r3
    4318:	0003      	movs	r3, r0
    431a:	001a      	movs	r2, r3
    431c:	2301      	movs	r3, #1
    431e:	4053      	eors	r3, r2
    4320:	b2db      	uxtb	r3, r3
    4322:	2b00      	cmp	r3, #0
    4324:	d1f4      	bne.n	4310 <_sysctrl_init_sources+0xcc>
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    4326:	46c0      	nop			; (mov r8, r8)
    4328:	46bd      	mov	sp, r7
    432a:	b002      	add	sp, #8
    432c:	bd80      	pop	{r7, pc}
    432e:	46c0      	nop			; (mov r8, r8)
    4330:	40000800 	.word	0x40000800
    4334:	0000406d 	.word	0x0000406d
    4338:	00004113 	.word	0x00004113
    433c:	00004135 	.word	0x00004135
    4340:	0fff0000 	.word	0x0fff0000
    4344:	00004153 	.word	0x00004153
    4348:	0000408b 	.word	0x0000408b
    434c:	000040ad 	.word	0x000040ad
    4350:	000040c5 	.word	0x000040c5
    4354:	000040f5 	.word	0x000040f5
    4358:	00003f5f 	.word	0x00003f5f
    435c:	00003f7f 	.word	0x00003f7f
    4360:	00003f9f 	.word	0x00003f9f

00004364 <_sysctrl_init_referenced_generators>:

void _sysctrl_init_referenced_generators(void)
{
    4364:	b580      	push	{r7, lr}
    4366:	b084      	sub	sp, #16
    4368:	af00      	add	r7, sp, #0
	void *hw = (void *)SYSCTRL;
    436a:	4b4c      	ldr	r3, [pc, #304]	; (449c <_sysctrl_init_referenced_generators+0x138>)
    436c:	60fb      	str	r3, [r7, #12]
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != CONF_DFLL_OPEN_LOOP_MODE
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
    436e:	68fb      	ldr	r3, [r7, #12]
    4370:	2102      	movs	r1, #2
    4372:	0018      	movs	r0, r3
    4374:	4b4a      	ldr	r3, [pc, #296]	; (44a0 <_sysctrl_init_referenced_generators+0x13c>)
    4376:	4798      	blx	r3
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    4378:	46c0      	nop			; (mov r8, r8)
    437a:	68fb      	ldr	r3, [r7, #12]
    437c:	0018      	movs	r0, r3
    437e:	4b49      	ldr	r3, [pc, #292]	; (44a4 <_sysctrl_init_referenced_generators+0x140>)
    4380:	4798      	blx	r3
    4382:	0003      	movs	r3, r0
    4384:	001a      	movs	r2, r3
    4386:	2301      	movs	r3, #1
    4388:	4053      	eors	r3, r2
    438a:	b2db      	uxtb	r3, r3
    438c:	2b00      	cmp	r3, #0
    438e:	d1f4      	bne.n	437a <_sysctrl_init_referenced_generators+0x16>
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
    4390:	4a45      	ldr	r2, [pc, #276]	; (44a8 <_sysctrl_init_referenced_generators+0x144>)
    4392:	68fb      	ldr	r3, [r7, #12]
    4394:	0011      	movs	r1, r2
    4396:	0018      	movs	r0, r3
    4398:	4b44      	ldr	r3, [pc, #272]	; (44ac <_sysctrl_init_referenced_generators+0x148>)
    439a:	4798      	blx	r3
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    439c:	4b44      	ldr	r3, [pc, #272]	; (44b0 <_sysctrl_init_referenced_generators+0x14c>)
    439e:	681b      	ldr	r3, [r3, #0]
    43a0:	0e9b      	lsrs	r3, r3, #26
    43a2:	2b3f      	cmp	r3, #63	; 0x3f
    43a4:	d009      	beq.n	43ba <_sysctrl_init_referenced_generators+0x56>
    43a6:	4b42      	ldr	r3, [pc, #264]	; (44b0 <_sysctrl_init_referenced_generators+0x14c>)
    43a8:	681b      	ldr	r3, [r3, #0]
    43aa:	0e9b      	lsrs	r3, r3, #26
    43ac:	029b      	lsls	r3, r3, #10
    43ae:	041b      	lsls	r3, r3, #16
    43b0:	0c1b      	lsrs	r3, r3, #16
    43b2:	2280      	movs	r2, #128	; 0x80
    43b4:	0092      	lsls	r2, r2, #2
    43b6:	4313      	orrs	r3, r2
    43b8:	e001      	b.n	43be <_sysctrl_init_referenced_generators+0x5a>
    43ba:	23fc      	movs	r3, #252	; 0xfc
    43bc:	01db      	lsls	r3, r3, #7
    43be:	68fa      	ldr	r2, [r7, #12]
    43c0:	0019      	movs	r1, r3
    43c2:	0010      	movs	r0, r2
    43c4:	4b3b      	ldr	r3, [pc, #236]	; (44b4 <_sysctrl_init_referenced_generators+0x150>)
    43c6:	4798      	blx	r3

	hri_sysctrl_dfllctrl_reg_t tmp =
    43c8:	230a      	movs	r3, #10
    43ca:	18fb      	adds	r3, r7, r3
    43cc:	2293      	movs	r2, #147	; 0x93
    43ce:	0052      	lsls	r2, r2, #1
    43d0:	801a      	strh	r2, [r3, #0]
	    | (CONF_DFLL_QLDIS << SYSCTRL_DFLLCTRL_QLDIS_Pos) | (CONF_DFLL_CCDIS << SYSCTRL_DFLLCTRL_CCDIS_Pos)
	    | (CONF_DFLL_RUNSTDBY << SYSCTRL_DFLLCTRL_RUNSTDBY_Pos) | (CONF_DFLL_USBCRM << SYSCTRL_DFLLCTRL_USBCRM_Pos)
	    | (CONF_DFLL_LLAW << SYSCTRL_DFLLCTRL_LLAW_Pos) | (CONF_DFLL_STABLE << SYSCTRL_DFLLCTRL_STABLE_Pos)
	    | (CONF_DFLL_MODE << SYSCTRL_DFLLCTRL_MODE_Pos) | (CONF_DFLL_ENABLE << SYSCTRL_DFLLCTRL_ENABLE_Pos);

	hri_sysctrl_write_DFLLCTRL_reg(hw, tmp);
    43d2:	230a      	movs	r3, #10
    43d4:	18fb      	adds	r3, r7, r3
    43d6:	881a      	ldrh	r2, [r3, #0]
    43d8:	68fb      	ldr	r3, [r7, #12]
    43da:	0011      	movs	r1, r2
    43dc:	0018      	movs	r0, r3
    43de:	4b30      	ldr	r3, [pc, #192]	; (44a0 <_sysctrl_init_referenced_generators+0x13c>)
    43e0:	4798      	blx	r3
#if CONF_DPLL_REFCLK == SYSCTRL_DPLLCTRLB_REFCLK_GCLK_Val
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(1) | GCLK_CLKCTRL_GEN(CONF_DPLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DPLLCTRLA_reg(hw,
    43e2:	68fb      	ldr	r3, [r7, #12]
    43e4:	2142      	movs	r1, #66	; 0x42
    43e6:	0018      	movs	r0, r3
    43e8:	4b33      	ldr	r3, [pc, #204]	; (44b8 <_sysctrl_init_referenced_generators+0x154>)
    43ea:	4798      	blx	r3
	                                (CONF_DPLL_RUNSTDBY << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_DPLL_ENABLE << SYSCTRL_DPLLCTRLA_ENABLE_Pos));
	hri_sysctrl_write_DPLLRATIO_reg(
    43ec:	4a33      	ldr	r2, [pc, #204]	; (44bc <_sysctrl_init_referenced_generators+0x158>)
    43ee:	68fb      	ldr	r3, [r7, #12]
    43f0:	0011      	movs	r1, r2
    43f2:	0018      	movs	r0, r3
    43f4:	4b32      	ldr	r3, [pc, #200]	; (44c0 <_sysctrl_init_referenced_generators+0x15c>)
    43f6:	4798      	blx	r3
	    hw, SYSCTRL_DPLLRATIO_LDRFRAC(CONF_DPLL_LDRFRAC) | SYSCTRL_DPLLRATIO_LDR(CONF_DPLL_LDR));
	hri_sysctrl_write_DPLLCTRLB_reg(
    43f8:	68fb      	ldr	r3, [r7, #12]
    43fa:	2100      	movs	r1, #0
    43fc:	0018      	movs	r0, r3
    43fe:	4b31      	ldr	r3, [pc, #196]	; (44c4 <_sysctrl_init_referenced_generators+0x160>)
    4400:	4798      	blx	r3
	        | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
    4402:	68fb      	ldr	r3, [r7, #12]
    4404:	0018      	movs	r0, r3
    4406:	4b30      	ldr	r3, [pc, #192]	; (44c8 <_sysctrl_init_referenced_generators+0x164>)
    4408:	4798      	blx	r3
    440a:	1e03      	subs	r3, r0, #0
    440c:	d00d      	beq.n	442a <_sysctrl_init_referenced_generators+0xc6>

#if CONF_DFLL_USBCRM == 0
		hri_sysctrl_pclksr_reg_t status_mask
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;
#else
		hri_sysctrl_pclksr_reg_t status_mask = SYSCTRL_PCLKSR_DFLLRDY;
    440e:	2310      	movs	r3, #16
    4410:	607b      	str	r3, [r7, #4]
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
    4412:	46c0      	nop			; (mov r8, r8)
    4414:	687a      	ldr	r2, [r7, #4]
    4416:	68fb      	ldr	r3, [r7, #12]
    4418:	0011      	movs	r1, r2
    441a:	0018      	movs	r0, r3
    441c:	4b2b      	ldr	r3, [pc, #172]	; (44cc <_sysctrl_init_referenced_generators+0x168>)
    441e:	4798      	blx	r3
    4420:	0002      	movs	r2, r0
    4422:	687b      	ldr	r3, [r7, #4]
    4424:	429a      	cmp	r2, r3
    4426:	d1f5      	bne.n	4414 <_sysctrl_init_referenced_generators+0xb0>
    4428:	e00b      	b.n	4442 <_sysctrl_init_referenced_generators+0xde>
			;
	} else {
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    442a:	46c0      	nop			; (mov r8, r8)
    442c:	68fb      	ldr	r3, [r7, #12]
    442e:	0018      	movs	r0, r3
    4430:	4b1c      	ldr	r3, [pc, #112]	; (44a4 <_sysctrl_init_referenced_generators+0x140>)
    4432:	4798      	blx	r3
    4434:	0003      	movs	r3, r0
    4436:	001a      	movs	r2, r3
    4438:	2301      	movs	r3, #1
    443a:	4053      	eors	r3, r2
    443c:	b2db      	uxtb	r3, r3
    443e:	2b00      	cmp	r3, #0
    4440:	d1f4      	bne.n	442c <_sysctrl_init_referenced_generators+0xc8>
#endif
#endif

#if CONF_DPLL_CONFIG == 1
#if CONF_DPLL_ENABLE == 1
	while (!(hri_sysctrl_get_DPLLSTATUS_ENABLE_bit(hw) || hri_sysctrl_get_DPLLSTATUS_LOCK_bit(hw)
    4442:	46c0      	nop			; (mov r8, r8)
    4444:	68fb      	ldr	r3, [r7, #12]
    4446:	0018      	movs	r0, r3
    4448:	4b21      	ldr	r3, [pc, #132]	; (44d0 <_sysctrl_init_referenced_generators+0x16c>)
    444a:	4798      	blx	r3
    444c:	0003      	movs	r3, r0
    444e:	001a      	movs	r2, r3
    4450:	2301      	movs	r3, #1
    4452:	4053      	eors	r3, r2
    4454:	b2db      	uxtb	r3, r3
    4456:	2b00      	cmp	r3, #0
    4458:	d015      	beq.n	4486 <_sysctrl_init_referenced_generators+0x122>
    445a:	68fb      	ldr	r3, [r7, #12]
    445c:	0018      	movs	r0, r3
    445e:	4b1d      	ldr	r3, [pc, #116]	; (44d4 <_sysctrl_init_referenced_generators+0x170>)
    4460:	4798      	blx	r3
    4462:	0003      	movs	r3, r0
    4464:	001a      	movs	r2, r3
    4466:	2301      	movs	r3, #1
    4468:	4053      	eors	r3, r2
    446a:	b2db      	uxtb	r3, r3
    446c:	2b00      	cmp	r3, #0
    446e:	d00a      	beq.n	4486 <_sysctrl_init_referenced_generators+0x122>
	         || hri_sysctrl_get_DPLLSTATUS_CLKRDY_bit(hw)))
    4470:	68fb      	ldr	r3, [r7, #12]
    4472:	0018      	movs	r0, r3
    4474:	4b18      	ldr	r3, [pc, #96]	; (44d8 <_sysctrl_init_referenced_generators+0x174>)
    4476:	4798      	blx	r3
    4478:	0003      	movs	r3, r0
    447a:	001a      	movs	r2, r3
    447c:	2301      	movs	r3, #1
    447e:	4053      	eors	r3, r2
    4480:	b2db      	uxtb	r3, r3
	while (!(hri_sysctrl_get_DPLLSTATUS_ENABLE_bit(hw) || hri_sysctrl_get_DPLLSTATUS_LOCK_bit(hw)
    4482:	2b00      	cmp	r3, #0
    4484:	d1de      	bne.n	4444 <_sysctrl_init_referenced_generators+0xe0>
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
    4486:	46c0      	nop			; (mov r8, r8)
    4488:	4b14      	ldr	r3, [pc, #80]	; (44dc <_sysctrl_init_referenced_generators+0x178>)
    448a:	0018      	movs	r0, r3
    448c:	4b14      	ldr	r3, [pc, #80]	; (44e0 <_sysctrl_init_referenced_generators+0x17c>)
    448e:	4798      	blx	r3
    4490:	1e03      	subs	r3, r0, #0
    4492:	d1f9      	bne.n	4488 <_sysctrl_init_referenced_generators+0x124>
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    4494:	46c0      	nop			; (mov r8, r8)
    4496:	46bd      	mov	sp, r7
    4498:	b004      	add	sp, #16
    449a:	bd80      	pop	{r7, pc}
    449c:	40000800 	.word	0x40000800
    44a0:	000041a5 	.word	0x000041a5
    44a4:	00003fbf 	.word	0x00003fbf
    44a8:	0401bb80 	.word	0x0401bb80
    44ac:	000041db 	.word	0x000041db
    44b0:	00806024 	.word	0x00806024
    44b4:	000041c3 	.word	0x000041c3
    44b8:	000041f3 	.word	0x000041f3
    44bc:	000e05b7 	.word	0x000e05b7
    44c0:	00004213 	.word	0x00004213
    44c4:	0000422b 	.word	0x0000422b
    44c8:	0000416b 	.word	0x0000416b
    44cc:	00003fdf 	.word	0x00003fdf
    44d0:	00004049 	.word	0x00004049
    44d4:	00004001 	.word	0x00004001
    44d8:	00004025 	.word	0x00004025
    44dc:	40000c00 	.word	0x40000c00
    44e0:	00003f3d 	.word	0x00003f3d

000044e4 <_system_time_init>:

/**
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
    44e4:	b580      	push	{r7, lr}
    44e6:	b082      	sub	sp, #8
    44e8:	af00      	add	r7, sp, #0
    44ea:	6078      	str	r0, [r7, #4]
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    44ec:	4b04      	ldr	r3, [pc, #16]	; (4500 <_system_time_init+0x1c>)
    44ee:	4a05      	ldr	r2, [pc, #20]	; (4504 <_system_time_init+0x20>)
    44f0:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    44f2:	4b03      	ldr	r3, [pc, #12]	; (4500 <_system_time_init+0x1c>)
    44f4:	2205      	movs	r2, #5
    44f6:	601a      	str	r2, [r3, #0]
	                | (1 << SysTick_CTRL_CLKSOURCE_Pos);
}
    44f8:	46c0      	nop			; (mov r8, r8)
    44fa:	46bd      	mov	sp, r7
    44fc:	b002      	add	sp, #8
    44fe:	bd80      	pop	{r7, pc}
    4500:	e000e010 	.word	0xe000e010
    4504:	00ffffff 	.word	0x00ffffff

00004508 <_delay_init>:
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
    4508:	b580      	push	{r7, lr}
    450a:	b082      	sub	sp, #8
    450c:	af00      	add	r7, sp, #0
    450e:	6078      	str	r0, [r7, #4]
	_system_time_init(hw);
    4510:	687b      	ldr	r3, [r7, #4]
    4512:	0018      	movs	r0, r3
    4514:	4b02      	ldr	r3, [pc, #8]	; (4520 <_delay_init+0x18>)
    4516:	4798      	blx	r3
}
    4518:	46c0      	nop			; (mov r8, r8)
    451a:	46bd      	mov	sp, r7
    451c:	b002      	add	sp, #8
    451e:	bd80      	pop	{r7, pc}
    4520:	000044e5 	.word	0x000044e5

00004524 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    4524:	b580      	push	{r7, lr}
    4526:	b084      	sub	sp, #16
    4528:	af00      	add	r7, sp, #0
    452a:	6078      	str	r0, [r7, #4]
    452c:	6039      	str	r1, [r7, #0]
	(void)hw;
	uint8_t  n   = cycles >> 24;
    452e:	683b      	ldr	r3, [r7, #0]
    4530:	0e1a      	lsrs	r2, r3, #24
    4532:	230f      	movs	r3, #15
    4534:	18fb      	adds	r3, r7, r3
    4536:	701a      	strb	r2, [r3, #0]
	uint32_t buf = cycles;
    4538:	683b      	ldr	r3, [r7, #0]
    453a:	60bb      	str	r3, [r7, #8]

	while (n--) {
    453c:	e011      	b.n	4562 <_delay_cycles+0x3e>
		SysTick->LOAD = 0xFFFFFF;
    453e:	4b16      	ldr	r3, [pc, #88]	; (4598 <_delay_cycles+0x74>)
    4540:	4a16      	ldr	r2, [pc, #88]	; (459c <_delay_cycles+0x78>)
    4542:	605a      	str	r2, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
    4544:	4b14      	ldr	r3, [pc, #80]	; (4598 <_delay_cycles+0x74>)
    4546:	4a15      	ldr	r2, [pc, #84]	; (459c <_delay_cycles+0x78>)
    4548:	609a      	str	r2, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    454a:	46c0      	nop			; (mov r8, r8)
    454c:	4b12      	ldr	r3, [pc, #72]	; (4598 <_delay_cycles+0x74>)
    454e:	681a      	ldr	r2, [r3, #0]
    4550:	2380      	movs	r3, #128	; 0x80
    4552:	025b      	lsls	r3, r3, #9
    4554:	4013      	ands	r3, r2
    4556:	d0f9      	beq.n	454c <_delay_cycles+0x28>
			;
		buf -= 0xFFFFFF;
    4558:	68bb      	ldr	r3, [r7, #8]
    455a:	4a11      	ldr	r2, [pc, #68]	; (45a0 <_delay_cycles+0x7c>)
    455c:	4694      	mov	ip, r2
    455e:	4463      	add	r3, ip
    4560:	60bb      	str	r3, [r7, #8]
	while (n--) {
    4562:	230f      	movs	r3, #15
    4564:	18fb      	adds	r3, r7, r3
    4566:	781b      	ldrb	r3, [r3, #0]
    4568:	220f      	movs	r2, #15
    456a:	18ba      	adds	r2, r7, r2
    456c:	1e59      	subs	r1, r3, #1
    456e:	7011      	strb	r1, [r2, #0]
    4570:	2b00      	cmp	r3, #0
    4572:	d1e4      	bne.n	453e <_delay_cycles+0x1a>
	}

	SysTick->LOAD = buf;
    4574:	4b08      	ldr	r3, [pc, #32]	; (4598 <_delay_cycles+0x74>)
    4576:	68ba      	ldr	r2, [r7, #8]
    4578:	605a      	str	r2, [r3, #4]
	SysTick->VAL  = buf;
    457a:	4b07      	ldr	r3, [pc, #28]	; (4598 <_delay_cycles+0x74>)
    457c:	68ba      	ldr	r2, [r7, #8]
    457e:	609a      	str	r2, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    4580:	46c0      	nop			; (mov r8, r8)
    4582:	4b05      	ldr	r3, [pc, #20]	; (4598 <_delay_cycles+0x74>)
    4584:	681a      	ldr	r2, [r3, #0]
    4586:	2380      	movs	r3, #128	; 0x80
    4588:	025b      	lsls	r3, r3, #9
    458a:	4013      	ands	r3, r2
    458c:	d0f9      	beq.n	4582 <_delay_cycles+0x5e>
		;
}
    458e:	46c0      	nop			; (mov r8, r8)
    4590:	46bd      	mov	sp, r7
    4592:	b004      	add	sp, #16
    4594:	bd80      	pop	{r7, pc}
    4596:	46c0      	nop			; (mov r8, r8)
    4598:	e000e010 	.word	0xe000e010
    459c:	00ffffff 	.word	0x00ffffff
    45a0:	ff000001 	.word	0xff000001

000045a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    45a4:	b580      	push	{r7, lr}
    45a6:	b082      	sub	sp, #8
    45a8:	af00      	add	r7, sp, #0
    45aa:	0002      	movs	r2, r0
    45ac:	1dfb      	adds	r3, r7, #7
    45ae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    45b0:	1dfb      	adds	r3, r7, #7
    45b2:	781b      	ldrb	r3, [r3, #0]
    45b4:	2b7f      	cmp	r3, #127	; 0x7f
    45b6:	d809      	bhi.n	45cc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    45b8:	4b06      	ldr	r3, [pc, #24]	; (45d4 <__NVIC_EnableIRQ+0x30>)
    45ba:	1dfa      	adds	r2, r7, #7
    45bc:	7812      	ldrb	r2, [r2, #0]
    45be:	0011      	movs	r1, r2
    45c0:	221f      	movs	r2, #31
    45c2:	400a      	ands	r2, r1
    45c4:	2101      	movs	r1, #1
    45c6:	4091      	lsls	r1, r2
    45c8:	000a      	movs	r2, r1
    45ca:	601a      	str	r2, [r3, #0]
  }
}
    45cc:	46c0      	nop			; (mov r8, r8)
    45ce:	46bd      	mov	sp, r7
    45d0:	b002      	add	sp, #8
    45d2:	bd80      	pop	{r7, pc}
    45d4:	e000e100 	.word	0xe000e100

000045d8 <hri_sysctrl_get_PCLKSR_reg>:
{
    45d8:	b580      	push	{r7, lr}
    45da:	b084      	sub	sp, #16
    45dc:	af00      	add	r7, sp, #0
    45de:	6078      	str	r0, [r7, #4]
    45e0:	6039      	str	r1, [r7, #0]
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    45e2:	687b      	ldr	r3, [r7, #4]
    45e4:	68db      	ldr	r3, [r3, #12]
    45e6:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    45e8:	68fb      	ldr	r3, [r7, #12]
    45ea:	683a      	ldr	r2, [r7, #0]
    45ec:	4013      	ands	r3, r2
    45ee:	60fb      	str	r3, [r7, #12]
	return tmp;
    45f0:	68fb      	ldr	r3, [r7, #12]
}
    45f2:	0018      	movs	r0, r3
    45f4:	46bd      	mov	sp, r7
    45f6:	b004      	add	sp, #16
    45f8:	bd80      	pop	{r7, pc}

000045fa <hri_sysctrl_get_DPLLSTATUS_reg>:
{
    45fa:	b580      	push	{r7, lr}
    45fc:	b084      	sub	sp, #16
    45fe:	af00      	add	r7, sp, #0
    4600:	6078      	str	r0, [r7, #4]
    4602:	000a      	movs	r2, r1
    4604:	1cfb      	adds	r3, r7, #3
    4606:	701a      	strb	r2, [r3, #0]
	tmp = ((Sysctrl *)hw)->DPLLSTATUS.reg;
    4608:	230f      	movs	r3, #15
    460a:	18fb      	adds	r3, r7, r3
    460c:	687a      	ldr	r2, [r7, #4]
    460e:	2150      	movs	r1, #80	; 0x50
    4610:	5c52      	ldrb	r2, [r2, r1]
    4612:	701a      	strb	r2, [r3, #0]
	tmp &= mask;
    4614:	230f      	movs	r3, #15
    4616:	18fb      	adds	r3, r7, r3
    4618:	220f      	movs	r2, #15
    461a:	18ba      	adds	r2, r7, r2
    461c:	1cf9      	adds	r1, r7, #3
    461e:	7812      	ldrb	r2, [r2, #0]
    4620:	7809      	ldrb	r1, [r1, #0]
    4622:	400a      	ands	r2, r1
    4624:	701a      	strb	r2, [r3, #0]
	return tmp;
    4626:	230f      	movs	r3, #15
    4628:	18fb      	adds	r3, r7, r3
    462a:	781b      	ldrb	r3, [r3, #0]
}
    462c:	0018      	movs	r0, r3
    462e:	46bd      	mov	sp, r7
    4630:	b004      	add	sp, #16
    4632:	bd80      	pop	{r7, pc}

00004634 <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    4634:	b580      	push	{r7, lr}
    4636:	b082      	sub	sp, #8
    4638:	af00      	add	r7, sp, #0
    463a:	6078      	str	r0, [r7, #4]
    463c:	000a      	movs	r2, r1
    463e:	1cfb      	adds	r3, r7, #3
    4640:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    4642:	46c0      	nop			; (mov r8, r8)
    4644:	687b      	ldr	r3, [r7, #4]
    4646:	789b      	ldrb	r3, [r3, #2]
    4648:	b2db      	uxtb	r3, r3
    464a:	1cfa      	adds	r2, r7, #3
    464c:	7812      	ldrb	r2, [r2, #0]
    464e:	4013      	ands	r3, r2
    4650:	b2db      	uxtb	r3, r3
    4652:	2b00      	cmp	r3, #0
    4654:	d1f6      	bne.n	4644 <hri_usb_wait_for_sync+0x10>
	};
}
    4656:	46c0      	nop			; (mov r8, r8)
    4658:	46bd      	mov	sp, r7
    465a:	b002      	add	sp, #8
    465c:	bd80      	pop	{r7, pc}

0000465e <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    465e:	b580      	push	{r7, lr}
    4660:	b082      	sub	sp, #8
    4662:	af00      	add	r7, sp, #0
    4664:	6078      	str	r0, [r7, #4]
    4666:	000a      	movs	r2, r1
    4668:	1cfb      	adds	r3, r7, #3
    466a:	701a      	strb	r2, [r3, #0]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    466c:	687b      	ldr	r3, [r7, #4]
    466e:	789b      	ldrb	r3, [r3, #2]
    4670:	b2db      	uxtb	r3, r3
    4672:	1cfa      	adds	r2, r7, #3
    4674:	7812      	ldrb	r2, [r2, #0]
    4676:	4013      	ands	r3, r2
    4678:	b2db      	uxtb	r3, r3
    467a:	1e5a      	subs	r2, r3, #1
    467c:	4193      	sbcs	r3, r2
    467e:	b2db      	uxtb	r3, r3
}
    4680:	0018      	movs	r0, r3
    4682:	46bd      	mov	sp, r7
    4684:	b002      	add	sp, #8
    4686:	bd80      	pop	{r7, pc}

00004688 <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    4688:	b580      	push	{r7, lr}
    468a:	b084      	sub	sp, #16
    468c:	af00      	add	r7, sp, #0
    468e:	6078      	str	r0, [r7, #4]
    4690:	0008      	movs	r0, r1
    4692:	0011      	movs	r1, r2
    4694:	1cfb      	adds	r3, r7, #3
    4696:	1c02      	adds	r2, r0, #0
    4698:	701a      	strb	r2, [r3, #0]
    469a:	1cbb      	adds	r3, r7, #2
    469c:	1c0a      	adds	r2, r1, #0
    469e:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    46a0:	1cfb      	adds	r3, r7, #3
    46a2:	781a      	ldrb	r2, [r3, #0]
    46a4:	230f      	movs	r3, #15
    46a6:	18fb      	adds	r3, r7, r3
    46a8:	6879      	ldr	r1, [r7, #4]
    46aa:	3208      	adds	r2, #8
    46ac:	0152      	lsls	r2, r2, #5
    46ae:	188a      	adds	r2, r1, r2
    46b0:	3207      	adds	r2, #7
    46b2:	7812      	ldrb	r2, [r2, #0]
    46b4:	701a      	strb	r2, [r3, #0]
	tmp &= mask;
    46b6:	230f      	movs	r3, #15
    46b8:	18fb      	adds	r3, r7, r3
    46ba:	220f      	movs	r2, #15
    46bc:	18ba      	adds	r2, r7, r2
    46be:	1cb9      	adds	r1, r7, #2
    46c0:	7812      	ldrb	r2, [r2, #0]
    46c2:	7809      	ldrb	r1, [r1, #0]
    46c4:	400a      	ands	r2, r1
    46c6:	701a      	strb	r2, [r3, #0]
	return tmp;
    46c8:	230f      	movs	r3, #15
    46ca:	18fb      	adds	r3, r7, r3
    46cc:	781b      	ldrb	r3, [r3, #0]
}
    46ce:	0018      	movs	r0, r3
    46d0:	46bd      	mov	sp, r7
    46d2:	b004      	add	sp, #16
    46d4:	bd80      	pop	{r7, pc}

000046d6 <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    46d6:	b580      	push	{r7, lr}
    46d8:	b082      	sub	sp, #8
    46da:	af00      	add	r7, sp, #0
    46dc:	6078      	str	r0, [r7, #4]
    46de:	000a      	movs	r2, r1
    46e0:	1cfb      	adds	r3, r7, #3
    46e2:	701a      	strb	r2, [r3, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    46e4:	1cfb      	adds	r3, r7, #3
    46e6:	781b      	ldrb	r3, [r3, #0]
    46e8:	687a      	ldr	r2, [r7, #4]
    46ea:	3308      	adds	r3, #8
    46ec:	015b      	lsls	r3, r3, #5
    46ee:	18d3      	adds	r3, r2, r3
    46f0:	3307      	adds	r3, #7
    46f2:	781b      	ldrb	r3, [r3, #0]
    46f4:	b2db      	uxtb	r3, r3
}
    46f6:	0018      	movs	r0, r3
    46f8:	46bd      	mov	sp, r7
    46fa:	b002      	add	sp, #8
    46fc:	bd80      	pop	{r7, pc}

000046fe <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    46fe:	b580      	push	{r7, lr}
    4700:	b082      	sub	sp, #8
    4702:	af00      	add	r7, sp, #0
    4704:	6078      	str	r0, [r7, #4]
    4706:	0008      	movs	r0, r1
    4708:	0011      	movs	r1, r2
    470a:	1cfb      	adds	r3, r7, #3
    470c:	1c02      	adds	r2, r0, #0
    470e:	701a      	strb	r2, [r3, #0]
    4710:	1cbb      	adds	r3, r7, #2
    4712:	1c0a      	adds	r2, r1, #0
    4714:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    4716:	1cfb      	adds	r3, r7, #3
    4718:	781b      	ldrb	r3, [r3, #0]
    471a:	687a      	ldr	r2, [r7, #4]
    471c:	3308      	adds	r3, #8
    471e:	015b      	lsls	r3, r3, #5
    4720:	18d3      	adds	r3, r2, r3
    4722:	3307      	adds	r3, #7
    4724:	1cba      	adds	r2, r7, #2
    4726:	7812      	ldrb	r2, [r2, #0]
    4728:	701a      	strb	r2, [r3, #0]
}
    472a:	46c0      	nop			; (mov r8, r8)
    472c:	46bd      	mov	sp, r7
    472e:	b002      	add	sp, #8
    4730:	bd80      	pop	{r7, pc}

00004732 <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    4732:	b580      	push	{r7, lr}
    4734:	b082      	sub	sp, #8
    4736:	af00      	add	r7, sp, #0
    4738:	6078      	str	r0, [r7, #4]
    473a:	0008      	movs	r0, r1
    473c:	0011      	movs	r1, r2
    473e:	1cfb      	adds	r3, r7, #3
    4740:	1c02      	adds	r2, r0, #0
    4742:	701a      	strb	r2, [r3, #0]
    4744:	1cbb      	adds	r3, r7, #2
    4746:	1c0a      	adds	r2, r1, #0
    4748:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    474a:	1cfb      	adds	r3, r7, #3
    474c:	781b      	ldrb	r3, [r3, #0]
    474e:	687a      	ldr	r2, [r7, #4]
    4750:	3308      	adds	r3, #8
    4752:	015b      	lsls	r3, r3, #5
    4754:	18d3      	adds	r3, r2, r3
    4756:	3305      	adds	r3, #5
    4758:	1cba      	adds	r2, r7, #2
    475a:	7812      	ldrb	r2, [r2, #0]
    475c:	701a      	strb	r2, [r3, #0]
}
    475e:	46c0      	nop			; (mov r8, r8)
    4760:	46bd      	mov	sp, r7
    4762:	b002      	add	sp, #8
    4764:	bd80      	pop	{r7, pc}

00004766 <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    4766:	b580      	push	{r7, lr}
    4768:	b082      	sub	sp, #8
    476a:	af00      	add	r7, sp, #0
    476c:	6078      	str	r0, [r7, #4]
    476e:	000a      	movs	r2, r1
    4770:	1cfb      	adds	r3, r7, #3
    4772:	701a      	strb	r2, [r3, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    4774:	1cfb      	adds	r3, r7, #3
    4776:	781b      	ldrb	r3, [r3, #0]
    4778:	687a      	ldr	r2, [r7, #4]
    477a:	3308      	adds	r3, #8
    477c:	015b      	lsls	r3, r3, #5
    477e:	18d3      	adds	r3, r2, r3
    4780:	3306      	adds	r3, #6
    4782:	781b      	ldrb	r3, [r3, #0]
    4784:	b2db      	uxtb	r3, r3
}
    4786:	0018      	movs	r0, r3
    4788:	46bd      	mov	sp, r7
    478a:	b002      	add	sp, #8
    478c:	bd80      	pop	{r7, pc}

0000478e <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    478e:	b580      	push	{r7, lr}
    4790:	b082      	sub	sp, #8
    4792:	af00      	add	r7, sp, #0
    4794:	6078      	str	r0, [r7, #4]
    4796:	0008      	movs	r0, r1
    4798:	0011      	movs	r1, r2
    479a:	1cfb      	adds	r3, r7, #3
    479c:	1c02      	adds	r2, r0, #0
    479e:	701a      	strb	r2, [r3, #0]
    47a0:	1cbb      	adds	r3, r7, #2
    47a2:	1c0a      	adds	r2, r1, #0
    47a4:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    47a6:	1cfb      	adds	r3, r7, #3
    47a8:	781b      	ldrb	r3, [r3, #0]
    47aa:	687a      	ldr	r2, [r7, #4]
    47ac:	3308      	adds	r3, #8
    47ae:	015b      	lsls	r3, r3, #5
    47b0:	18d3      	adds	r3, r2, r3
    47b2:	3304      	adds	r3, #4
    47b4:	1cba      	adds	r2, r7, #2
    47b6:	7812      	ldrb	r2, [r2, #0]
    47b8:	701a      	strb	r2, [r3, #0]
}
    47ba:	46c0      	nop			; (mov r8, r8)
    47bc:	46bd      	mov	sp, r7
    47be:	b002      	add	sp, #8
    47c0:	bd80      	pop	{r7, pc}

000047c2 <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    47c2:	b580      	push	{r7, lr}
    47c4:	b082      	sub	sp, #8
    47c6:	af00      	add	r7, sp, #0
    47c8:	6078      	str	r0, [r7, #4]
    47ca:	000a      	movs	r2, r1
    47cc:	1cfb      	adds	r3, r7, #3
    47ce:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    47d0:	1cfb      	adds	r3, r7, #3
    47d2:	781a      	ldrb	r2, [r3, #0]
    47d4:	6879      	ldr	r1, [r7, #4]
    47d6:	2384      	movs	r3, #132	; 0x84
    47d8:	005b      	lsls	r3, r3, #1
    47da:	0152      	lsls	r2, r2, #5
    47dc:	188a      	adds	r2, r1, r2
    47de:	18d3      	adds	r3, r2, r3
    47e0:	2210      	movs	r2, #16
    47e2:	701a      	strb	r2, [r3, #0]
}
    47e4:	46c0      	nop			; (mov r8, r8)
    47e6:	46bd      	mov	sp, r7
    47e8:	b002      	add	sp, #8
    47ea:	bd80      	pop	{r7, pc}

000047ec <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    47ec:	b580      	push	{r7, lr}
    47ee:	b082      	sub	sp, #8
    47f0:	af00      	add	r7, sp, #0
    47f2:	6078      	str	r0, [r7, #4]
    47f4:	0008      	movs	r0, r1
    47f6:	0011      	movs	r1, r2
    47f8:	1cfb      	adds	r3, r7, #3
    47fa:	1c02      	adds	r2, r0, #0
    47fc:	701a      	strb	r2, [r3, #0]
    47fe:	1cbb      	adds	r3, r7, #2
    4800:	1c0a      	adds	r2, r1, #0
    4802:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    4804:	1cfb      	adds	r3, r7, #3
    4806:	781a      	ldrb	r2, [r3, #0]
    4808:	6879      	ldr	r1, [r7, #4]
    480a:	230a      	movs	r3, #10
    480c:	33ff      	adds	r3, #255	; 0xff
    480e:	0152      	lsls	r2, r2, #5
    4810:	188a      	adds	r2, r1, r2
    4812:	18d3      	adds	r3, r2, r3
    4814:	1cba      	adds	r2, r7, #2
    4816:	7812      	ldrb	r2, [r2, #0]
    4818:	701a      	strb	r2, [r3, #0]
}
    481a:	46c0      	nop			; (mov r8, r8)
    481c:	46bd      	mov	sp, r7
    481e:	b002      	add	sp, #8
    4820:	bd80      	pop	{r7, pc}

00004822 <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    4822:	b580      	push	{r7, lr}
    4824:	b082      	sub	sp, #8
    4826:	af00      	add	r7, sp, #0
    4828:	6078      	str	r0, [r7, #4]
    482a:	0008      	movs	r0, r1
    482c:	0011      	movs	r1, r2
    482e:	1cfb      	adds	r3, r7, #3
    4830:	1c02      	adds	r2, r0, #0
    4832:	701a      	strb	r2, [r3, #0]
    4834:	1cbb      	adds	r3, r7, #2
    4836:	1c0a      	adds	r2, r1, #0
    4838:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    483a:	1cfb      	adds	r3, r7, #3
    483c:	781a      	ldrb	r2, [r3, #0]
    483e:	6879      	ldr	r1, [r7, #4]
    4840:	2384      	movs	r3, #132	; 0x84
    4842:	005b      	lsls	r3, r3, #1
    4844:	0152      	lsls	r2, r2, #5
    4846:	188a      	adds	r2, r1, r2
    4848:	18d3      	adds	r3, r2, r3
    484a:	1cba      	adds	r2, r7, #2
    484c:	7812      	ldrb	r2, [r2, #0]
    484e:	701a      	strb	r2, [r3, #0]
}
    4850:	46c0      	nop			; (mov r8, r8)
    4852:	46bd      	mov	sp, r7
    4854:	b002      	add	sp, #8
    4856:	bd80      	pop	{r7, pc}

00004858 <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    4858:	b580      	push	{r7, lr}
    485a:	b084      	sub	sp, #16
    485c:	af00      	add	r7, sp, #0
    485e:	6078      	str	r0, [r7, #4]
    4860:	000a      	movs	r2, r1
    4862:	1cfb      	adds	r3, r7, #3
    4864:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    4866:	1cfb      	adds	r3, r7, #3
    4868:	7819      	ldrb	r1, [r3, #0]
    486a:	230f      	movs	r3, #15
    486c:	18fb      	adds	r3, r7, r3
    486e:	687a      	ldr	r2, [r7, #4]
    4870:	3108      	adds	r1, #8
    4872:	0149      	lsls	r1, r1, #5
    4874:	5c8a      	ldrb	r2, [r1, r2]
    4876:	701a      	strb	r2, [r3, #0]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    4878:	230f      	movs	r3, #15
    487a:	18fb      	adds	r3, r7, r3
    487c:	220f      	movs	r2, #15
    487e:	18ba      	adds	r2, r7, r2
    4880:	7812      	ldrb	r2, [r2, #0]
    4882:	2107      	movs	r1, #7
    4884:	400a      	ands	r2, r1
    4886:	701a      	strb	r2, [r3, #0]
	return tmp;
    4888:	230f      	movs	r3, #15
    488a:	18fb      	adds	r3, r7, r3
    488c:	781b      	ldrb	r3, [r3, #0]
}
    488e:	0018      	movs	r0, r3
    4890:	46bd      	mov	sp, r7
    4892:	b004      	add	sp, #16
    4894:	bd80      	pop	{r7, pc}

00004896 <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    4896:	b580      	push	{r7, lr}
    4898:	b084      	sub	sp, #16
    489a:	af00      	add	r7, sp, #0
    489c:	6078      	str	r0, [r7, #4]
    489e:	000a      	movs	r2, r1
    48a0:	1cfb      	adds	r3, r7, #3
    48a2:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    48a4:	1cfb      	adds	r3, r7, #3
    48a6:	7819      	ldrb	r1, [r3, #0]
    48a8:	230f      	movs	r3, #15
    48aa:	18fb      	adds	r3, r7, r3
    48ac:	687a      	ldr	r2, [r7, #4]
    48ae:	3108      	adds	r1, #8
    48b0:	0149      	lsls	r1, r1, #5
    48b2:	5c8a      	ldrb	r2, [r1, r2]
    48b4:	701a      	strb	r2, [r3, #0]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    48b6:	230f      	movs	r3, #15
    48b8:	18fb      	adds	r3, r7, r3
    48ba:	781b      	ldrb	r3, [r3, #0]
    48bc:	091b      	lsrs	r3, r3, #4
    48be:	b2da      	uxtb	r2, r3
    48c0:	230f      	movs	r3, #15
    48c2:	18fb      	adds	r3, r7, r3
    48c4:	2107      	movs	r1, #7
    48c6:	400a      	ands	r2, r1
    48c8:	701a      	strb	r2, [r3, #0]
	return tmp;
    48ca:	230f      	movs	r3, #15
    48cc:	18fb      	adds	r3, r7, r3
    48ce:	781b      	ldrb	r3, [r3, #0]
}
    48d0:	0018      	movs	r0, r3
    48d2:	46bd      	mov	sp, r7
    48d4:	b004      	add	sp, #16
    48d6:	bd80      	pop	{r7, pc}

000048d8 <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    48d8:	b580      	push	{r7, lr}
    48da:	b082      	sub	sp, #8
    48dc:	af00      	add	r7, sp, #0
    48de:	6078      	str	r0, [r7, #4]
    48e0:	0008      	movs	r0, r1
    48e2:	0011      	movs	r1, r2
    48e4:	1cfb      	adds	r3, r7, #3
    48e6:	1c02      	adds	r2, r0, #0
    48e8:	701a      	strb	r2, [r3, #0]
    48ea:	1cbb      	adds	r3, r7, #2
    48ec:	1c0a      	adds	r2, r1, #0
    48ee:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    48f0:	1cfb      	adds	r3, r7, #3
    48f2:	781a      	ldrb	r2, [r3, #0]
    48f4:	687b      	ldr	r3, [r7, #4]
    48f6:	3208      	adds	r2, #8
    48f8:	0152      	lsls	r2, r2, #5
    48fa:	1cb9      	adds	r1, r7, #2
    48fc:	7809      	ldrb	r1, [r1, #0]
    48fe:	54d1      	strb	r1, [r2, r3]
	USB_CRITICAL_SECTION_LEAVE();
}
    4900:	46c0      	nop			; (mov r8, r8)
    4902:	46bd      	mov	sp, r7
    4904:	b002      	add	sp, #8
    4906:	bd80      	pop	{r7, pc}

00004908 <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    4908:	b580      	push	{r7, lr}
    490a:	b082      	sub	sp, #8
    490c:	af00      	add	r7, sp, #0
    490e:	6078      	str	r0, [r7, #4]
    4910:	000a      	movs	r2, r1
    4912:	1cfb      	adds	r3, r7, #3
    4914:	701a      	strb	r2, [r3, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    4916:	1cfb      	adds	r3, r7, #3
    4918:	781a      	ldrb	r2, [r3, #0]
    491a:	687b      	ldr	r3, [r7, #4]
    491c:	3208      	adds	r2, #8
    491e:	0152      	lsls	r2, r2, #5
    4920:	5cd3      	ldrb	r3, [r2, r3]
    4922:	b2db      	uxtb	r3, r3
}
    4924:	0018      	movs	r0, r3
    4926:	46bd      	mov	sp, r7
    4928:	b002      	add	sp, #8
    492a:	bd80      	pop	{r7, pc}

0000492c <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    492c:	b580      	push	{r7, lr}
    492e:	b082      	sub	sp, #8
    4930:	af00      	add	r7, sp, #0
    4932:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    4934:	687b      	ldr	r3, [r7, #4]
    4936:	8b9b      	ldrh	r3, [r3, #28]
    4938:	b29b      	uxth	r3, r3
}
    493a:	0018      	movs	r0, r3
    493c:	46bd      	mov	sp, r7
    493e:	b002      	add	sp, #8
    4940:	bd80      	pop	{r7, pc}

00004942 <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    4942:	b580      	push	{r7, lr}
    4944:	b082      	sub	sp, #8
    4946:	af00      	add	r7, sp, #0
    4948:	6078      	str	r0, [r7, #4]
    494a:	000a      	movs	r2, r1
    494c:	1cbb      	adds	r3, r7, #2
    494e:	801a      	strh	r2, [r3, #0]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    4950:	687b      	ldr	r3, [r7, #4]
    4952:	1cba      	adds	r2, r7, #2
    4954:	8812      	ldrh	r2, [r2, #0]
    4956:	839a      	strh	r2, [r3, #28]
}
    4958:	46c0      	nop			; (mov r8, r8)
    495a:	46bd      	mov	sp, r7
    495c:	b002      	add	sp, #8
    495e:	bd80      	pop	{r7, pc}

00004960 <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    4960:	b580      	push	{r7, lr}
    4962:	b082      	sub	sp, #8
    4964:	af00      	add	r7, sp, #0
    4966:	6078      	str	r0, [r7, #4]
    4968:	000a      	movs	r2, r1
    496a:	1cbb      	adds	r3, r7, #2
    496c:	801a      	strh	r2, [r3, #0]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    496e:	687b      	ldr	r3, [r7, #4]
    4970:	1cba      	adds	r2, r7, #2
    4972:	8812      	ldrh	r2, [r2, #0]
    4974:	831a      	strh	r2, [r3, #24]
}
    4976:	46c0      	nop			; (mov r8, r8)
    4978:	46bd      	mov	sp, r7
    497a:	b002      	add	sp, #8
    497c:	bd80      	pop	{r7, pc}

0000497e <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    497e:	b580      	push	{r7, lr}
    4980:	b082      	sub	sp, #8
    4982:	af00      	add	r7, sp, #0
    4984:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    4986:	687b      	ldr	r3, [r7, #4]
    4988:	8b1b      	ldrh	r3, [r3, #24]
    498a:	b29b      	uxth	r3, r3
}
    498c:	0018      	movs	r0, r3
    498e:	46bd      	mov	sp, r7
    4990:	b002      	add	sp, #8
    4992:	bd80      	pop	{r7, pc}

00004994 <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    4994:	b580      	push	{r7, lr}
    4996:	b082      	sub	sp, #8
    4998:	af00      	add	r7, sp, #0
    499a:	6078      	str	r0, [r7, #4]
    499c:	000a      	movs	r2, r1
    499e:	1cbb      	adds	r3, r7, #2
    49a0:	801a      	strh	r2, [r3, #0]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    49a2:	687b      	ldr	r3, [r7, #4]
    49a4:	1cba      	adds	r2, r7, #2
    49a6:	8812      	ldrh	r2, [r2, #0]
    49a8:	829a      	strh	r2, [r3, #20]
}
    49aa:	46c0      	nop			; (mov r8, r8)
    49ac:	46bd      	mov	sp, r7
    49ae:	b002      	add	sp, #8
    49b0:	bd80      	pop	{r7, pc}

000049b2 <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    49b2:	b580      	push	{r7, lr}
    49b4:	b084      	sub	sp, #16
    49b6:	af00      	add	r7, sp, #0
    49b8:	6078      	str	r0, [r7, #4]
    49ba:	000a      	movs	r2, r1
    49bc:	1cfb      	adds	r3, r7, #3
    49be:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    49c0:	230f      	movs	r3, #15
    49c2:	18fb      	adds	r3, r7, r3
    49c4:	687a      	ldr	r2, [r7, #4]
    49c6:	7892      	ldrb	r2, [r2, #2]
    49c8:	701a      	strb	r2, [r3, #0]
	tmp &= mask;
    49ca:	230f      	movs	r3, #15
    49cc:	18fb      	adds	r3, r7, r3
    49ce:	220f      	movs	r2, #15
    49d0:	18ba      	adds	r2, r7, r2
    49d2:	1cf9      	adds	r1, r7, #3
    49d4:	7812      	ldrb	r2, [r2, #0]
    49d6:	7809      	ldrb	r1, [r1, #0]
    49d8:	400a      	ands	r2, r1
    49da:	701a      	strb	r2, [r3, #0]
	return tmp;
    49dc:	230f      	movs	r3, #15
    49de:	18fb      	adds	r3, r7, r3
    49e0:	781b      	ldrb	r3, [r3, #0]
}
    49e2:	0018      	movs	r0, r3
    49e4:	46bd      	mov	sp, r7
    49e6:	b004      	add	sp, #16
    49e8:	bd80      	pop	{r7, pc}
	...

000049ec <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    49ec:	b580      	push	{r7, lr}
    49ee:	b082      	sub	sp, #8
    49f0:	af00      	add	r7, sp, #0
    49f2:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    49f4:	687b      	ldr	r3, [r7, #4]
    49f6:	781b      	ldrb	r3, [r3, #0]
    49f8:	b2db      	uxtb	r3, r3
    49fa:	2202      	movs	r2, #2
    49fc:	4393      	bics	r3, r2
    49fe:	b2da      	uxtb	r2, r3
    4a00:	687b      	ldr	r3, [r7, #4]
    4a02:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    4a04:	687b      	ldr	r3, [r7, #4]
    4a06:	2103      	movs	r1, #3
    4a08:	0018      	movs	r0, r3
    4a0a:	4b03      	ldr	r3, [pc, #12]	; (4a18 <hri_usb_clear_CTRLA_ENABLE_bit+0x2c>)
    4a0c:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    4a0e:	46c0      	nop			; (mov r8, r8)
    4a10:	46bd      	mov	sp, r7
    4a12:	b002      	add	sp, #8
    4a14:	bd80      	pop	{r7, pc}
    4a16:	46c0      	nop			; (mov r8, r8)
    4a18:	00004635 	.word	0x00004635

00004a1c <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    4a1c:	b580      	push	{r7, lr}
    4a1e:	b084      	sub	sp, #16
    4a20:	af00      	add	r7, sp, #0
    4a22:	6078      	str	r0, [r7, #4]
    4a24:	000a      	movs	r2, r1
    4a26:	1cfb      	adds	r3, r7, #3
    4a28:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    4a2a:	687b      	ldr	r3, [r7, #4]
    4a2c:	2103      	movs	r1, #3
    4a2e:	0018      	movs	r0, r3
    4a30:	4b0b      	ldr	r3, [pc, #44]	; (4a60 <hri_usb_get_CTRLA_reg+0x44>)
    4a32:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    4a34:	230f      	movs	r3, #15
    4a36:	18fb      	adds	r3, r7, r3
    4a38:	687a      	ldr	r2, [r7, #4]
    4a3a:	7812      	ldrb	r2, [r2, #0]
    4a3c:	701a      	strb	r2, [r3, #0]
	tmp &= mask;
    4a3e:	230f      	movs	r3, #15
    4a40:	18fb      	adds	r3, r7, r3
    4a42:	220f      	movs	r2, #15
    4a44:	18ba      	adds	r2, r7, r2
    4a46:	1cf9      	adds	r1, r7, #3
    4a48:	7812      	ldrb	r2, [r2, #0]
    4a4a:	7809      	ldrb	r1, [r1, #0]
    4a4c:	400a      	ands	r2, r1
    4a4e:	701a      	strb	r2, [r3, #0]
	return tmp;
    4a50:	230f      	movs	r3, #15
    4a52:	18fb      	adds	r3, r7, r3
    4a54:	781b      	ldrb	r3, [r3, #0]
}
    4a56:	0018      	movs	r0, r3
    4a58:	46bd      	mov	sp, r7
    4a5a:	b004      	add	sp, #16
    4a5c:	bd80      	pop	{r7, pc}
    4a5e:	46c0      	nop			; (mov r8, r8)
    4a60:	00004635 	.word	0x00004635

00004a64 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    4a64:	b580      	push	{r7, lr}
    4a66:	b082      	sub	sp, #8
    4a68:	af00      	add	r7, sp, #0
    4a6a:	6078      	str	r0, [r7, #4]
    4a6c:	000a      	movs	r2, r1
    4a6e:	1cfb      	adds	r3, r7, #3
    4a70:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    4a72:	687b      	ldr	r3, [r7, #4]
    4a74:	1cfa      	adds	r2, r7, #3
    4a76:	7812      	ldrb	r2, [r2, #0]
    4a78:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    4a7a:	687b      	ldr	r3, [r7, #4]
    4a7c:	2103      	movs	r1, #3
    4a7e:	0018      	movs	r0, r3
    4a80:	4b02      	ldr	r3, [pc, #8]	; (4a8c <hri_usb_write_CTRLA_reg+0x28>)
    4a82:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    4a84:	46c0      	nop			; (mov r8, r8)
    4a86:	46bd      	mov	sp, r7
    4a88:	b002      	add	sp, #8
    4a8a:	bd80      	pop	{r7, pc}
    4a8c:	00004635 	.word	0x00004635

00004a90 <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    4a90:	b580      	push	{r7, lr}
    4a92:	b082      	sub	sp, #8
    4a94:	af00      	add	r7, sp, #0
    4a96:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    4a98:	687b      	ldr	r3, [r7, #4]
    4a9a:	2103      	movs	r1, #3
    4a9c:	0018      	movs	r0, r3
    4a9e:	4b04      	ldr	r3, [pc, #16]	; (4ab0 <hri_usb_read_CTRLA_reg+0x20>)
    4aa0:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    4aa2:	687b      	ldr	r3, [r7, #4]
    4aa4:	781b      	ldrb	r3, [r3, #0]
    4aa6:	b2db      	uxtb	r3, r3
}
    4aa8:	0018      	movs	r0, r3
    4aaa:	46bd      	mov	sp, r7
    4aac:	b002      	add	sp, #8
    4aae:	bd80      	pop	{r7, pc}
    4ab0:	00004635 	.word	0x00004635

00004ab4 <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    4ab4:	b580      	push	{r7, lr}
    4ab6:	b082      	sub	sp, #8
    4ab8:	af00      	add	r7, sp, #0
    4aba:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    4abc:	687b      	ldr	r3, [r7, #4]
    4abe:	891b      	ldrh	r3, [r3, #8]
    4ac0:	b29b      	uxth	r3, r3
    4ac2:	2201      	movs	r2, #1
    4ac4:	4393      	bics	r3, r2
    4ac6:	b29a      	uxth	r2, r3
    4ac8:	687b      	ldr	r3, [r7, #4]
    4aca:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    4acc:	46c0      	nop			; (mov r8, r8)
    4ace:	46bd      	mov	sp, r7
    4ad0:	b002      	add	sp, #8
    4ad2:	bd80      	pop	{r7, pc}

00004ad4 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    4ad4:	b580      	push	{r7, lr}
    4ad6:	b082      	sub	sp, #8
    4ad8:	af00      	add	r7, sp, #0
    4ada:	6078      	str	r0, [r7, #4]
    4adc:	000a      	movs	r2, r1
    4ade:	1cbb      	adds	r3, r7, #2
    4ae0:	801a      	strh	r2, [r3, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    4ae2:	687b      	ldr	r3, [r7, #4]
    4ae4:	1cba      	adds	r2, r7, #2
    4ae6:	8812      	ldrh	r2, [r2, #0]
    4ae8:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    4aea:	46c0      	nop			; (mov r8, r8)
    4aec:	46bd      	mov	sp, r7
    4aee:	b002      	add	sp, #8
    4af0:	bd80      	pop	{r7, pc}

00004af2 <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    4af2:	b580      	push	{r7, lr}
    4af4:	b082      	sub	sp, #8
    4af6:	af00      	add	r7, sp, #0
    4af8:	6078      	str	r0, [r7, #4]
    4afa:	000a      	movs	r2, r1
    4afc:	1cfb      	adds	r3, r7, #3
    4afe:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    4b00:	687b      	ldr	r3, [r7, #4]
    4b02:	1cfa      	adds	r2, r7, #3
    4b04:	7812      	ldrb	r2, [r2, #0]
    4b06:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    4b08:	46c0      	nop			; (mov r8, r8)
    4b0a:	46bd      	mov	sp, r7
    4b0c:	b002      	add	sp, #8
    4b0e:	bd80      	pop	{r7, pc}

00004b10 <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    4b10:	b580      	push	{r7, lr}
    4b12:	b082      	sub	sp, #8
    4b14:	af00      	add	r7, sp, #0
    4b16:	6078      	str	r0, [r7, #4]
    4b18:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    4b1a:	687b      	ldr	r3, [r7, #4]
    4b1c:	683a      	ldr	r2, [r7, #0]
    4b1e:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    4b20:	46c0      	nop			; (mov r8, r8)
    4b22:	46bd      	mov	sp, r7
    4b24:	b002      	add	sp, #8
    4b26:	bd80      	pop	{r7, pc}

00004b28 <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    4b28:	b580      	push	{r7, lr}
    4b2a:	b082      	sub	sp, #8
    4b2c:	af00      	add	r7, sp, #0
    4b2e:	6078      	str	r0, [r7, #4]
    4b30:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    4b32:	2300      	movs	r3, #0
}
    4b34:	0018      	movs	r0, r3
    4b36:	46bd      	mov	sp, r7
    4b38:	b002      	add	sp, #8
    4b3a:	bd80      	pop	{r7, pc}

00004b3c <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    4b3c:	b580      	push	{r7, lr}
    4b3e:	b084      	sub	sp, #16
    4b40:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 50
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 55
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    4b42:	4b26      	ldr	r3, [pc, #152]	; (4bdc <_usb_load_calib+0xa0>)
    4b44:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    4b46:	4b26      	ldr	r3, [pc, #152]	; (4be0 <_usb_load_calib+0xa4>)
    4b48:	681b      	ldr	r3, [r3, #0]
    4b4a:	0b5b      	lsrs	r3, r3, #13
	uint32_t pad_transn
    4b4c:	221f      	movs	r2, #31
    4b4e:	4013      	ands	r3, r2
    4b50:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    4b52:	4b23      	ldr	r3, [pc, #140]	; (4be0 <_usb_load_calib+0xa4>)
    4b54:	681b      	ldr	r3, [r3, #0]
    4b56:	0c9b      	lsrs	r3, r3, #18
	uint32_t pad_transp
    4b58:	221f      	movs	r2, #31
    4b5a:	4013      	ands	r3, r2
    4b5c:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    4b5e:	4b20      	ldr	r3, [pc, #128]	; (4be0 <_usb_load_calib+0xa4>)
    4b60:	681b      	ldr	r3, [r3, #0]
    4b62:	0ddb      	lsrs	r3, r3, #23
    4b64:	2207      	movs	r2, #7
    4b66:	4013      	ands	r3, r2
    4b68:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0x1F) {
    4b6a:	68fb      	ldr	r3, [r7, #12]
    4b6c:	2b1f      	cmp	r3, #31
    4b6e:	d101      	bne.n	4b74 <_usb_load_calib+0x38>
		pad_transn = 5;
    4b70:	2305      	movs	r3, #5
    4b72:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0x1F) {
    4b74:	68bb      	ldr	r3, [r7, #8]
    4b76:	2b1f      	cmp	r3, #31
    4b78:	d101      	bne.n	4b7e <_usb_load_calib+0x42>
		pad_transp = 29;
    4b7a:	231d      	movs	r3, #29
    4b7c:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0x7) {
    4b7e:	687b      	ldr	r3, [r7, #4]
    4b80:	2b07      	cmp	r3, #7
    4b82:	d101      	bne.n	4b88 <_usb_load_calib+0x4c>
		pad_trim = 5;
    4b84:	2305      	movs	r3, #5
    4b86:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    4b88:	68fb      	ldr	r3, [r7, #12]
    4b8a:	b29b      	uxth	r3, r3
    4b8c:	019b      	lsls	r3, r3, #6
    4b8e:	b29a      	uxth	r2, r3
    4b90:	23f8      	movs	r3, #248	; 0xf8
    4b92:	00db      	lsls	r3, r3, #3
    4b94:	4013      	ands	r3, r2
    4b96:	b29a      	uxth	r2, r3
    4b98:	68bb      	ldr	r3, [r7, #8]
    4b9a:	b29b      	uxth	r3, r3
    4b9c:	211f      	movs	r1, #31
    4b9e:	400b      	ands	r3, r1
    4ba0:	b29b      	uxth	r3, r3
    4ba2:	4313      	orrs	r3, r2
    4ba4:	b29a      	uxth	r2, r3
    4ba6:	687b      	ldr	r3, [r7, #4]
    4ba8:	b29b      	uxth	r3, r3
    4baa:	031b      	lsls	r3, r3, #12
    4bac:	b299      	uxth	r1, r3
    4bae:	23e0      	movs	r3, #224	; 0xe0
    4bb0:	01db      	lsls	r3, r3, #7
    4bb2:	400b      	ands	r3, r1
    4bb4:	b29b      	uxth	r3, r3
    4bb6:	4313      	orrs	r3, r2
    4bb8:	b29a      	uxth	r2, r3
    4bba:	683b      	ldr	r3, [r7, #0]
    4bbc:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    4bbe:	683a      	ldr	r2, [r7, #0]
    4bc0:	78d3      	ldrb	r3, [r2, #3]
    4bc2:	2103      	movs	r1, #3
    4bc4:	430b      	orrs	r3, r1
    4bc6:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    4bc8:	683a      	ldr	r2, [r7, #0]
    4bca:	78d3      	ldrb	r3, [r2, #3]
    4bcc:	210c      	movs	r1, #12
    4bce:	430b      	orrs	r3, r1
    4bd0:	70d3      	strb	r3, [r2, #3]
}
    4bd2:	46c0      	nop			; (mov r8, r8)
    4bd4:	46bd      	mov	sp, r7
    4bd6:	b004      	add	sp, #16
    4bd8:	bd80      	pop	{r7, pc}
    4bda:	46c0      	nop			; (mov r8, r8)
    4bdc:	41005000 	.word	0x41005000
    4be0:	00806024 	.word	0x00806024

00004be4 <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    4be4:	b580      	push	{r7, lr}
    4be6:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (SYSCTRL_DPLLSTATUS_ENABLE | SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)
	while (hri_sysctrl_get_DPLLSTATUS_reg(SYSCTRL, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    4be8:	46c0      	nop			; (mov r8, r8)
    4bea:	4b05      	ldr	r3, [pc, #20]	; (4c00 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    4bec:	2107      	movs	r1, #7
    4bee:	0018      	movs	r0, r3
    4bf0:	4b04      	ldr	r3, [pc, #16]	; (4c04 <_usb_d_dev_wait_dpll_rdy+0x20>)
    4bf2:	4798      	blx	r3
    4bf4:	0003      	movs	r3, r0
    4bf6:	2b07      	cmp	r3, #7
    4bf8:	d1f7      	bne.n	4bea <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    4bfa:	46c0      	nop			; (mov r8, r8)
    4bfc:	46bd      	mov	sp, r7
    4bfe:	bd80      	pop	{r7, pc}
    4c00:	40000800 	.word	0x40000800
    4c04:	000045fb 	.word	0x000045fb

00004c08 <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    4c08:	b580      	push	{r7, lr}
    4c0a:	af00      	add	r7, sp, #0
#define DFLL_READY_FLAG (SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC)
	/* In USB recovery mode the status is not checked */
	if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    4c0c:	4b0e      	ldr	r3, [pc, #56]	; (4c48 <_usb_d_dev_wait_dfll_rdy+0x40>)
    4c0e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    4c10:	b29b      	uxth	r3, r3
    4c12:	001a      	movs	r2, r3
    4c14:	2320      	movs	r3, #32
    4c16:	4013      	ands	r3, r2
    4c18:	d109      	bne.n	4c2e <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, DFLL_READY_FLAG) != DFLL_READY_FLAG)
    4c1a:	46c0      	nop			; (mov r8, r8)
    4c1c:	4b0a      	ldr	r3, [pc, #40]	; (4c48 <_usb_d_dev_wait_dfll_rdy+0x40>)
    4c1e:	21d0      	movs	r1, #208	; 0xd0
    4c20:	0018      	movs	r0, r3
    4c22:	4b0a      	ldr	r3, [pc, #40]	; (4c4c <_usb_d_dev_wait_dfll_rdy+0x44>)
    4c24:	4798      	blx	r3
    4c26:	0003      	movs	r3, r0
    4c28:	2bd0      	cmp	r3, #208	; 0xd0
    4c2a:	d1f7      	bne.n	4c1c <_usb_d_dev_wait_dfll_rdy+0x14>
			;
	} else {
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY)
			;
	}
}
    4c2c:	e008      	b.n	4c40 <_usb_d_dev_wait_dfll_rdy+0x38>
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY)
    4c2e:	46c0      	nop			; (mov r8, r8)
    4c30:	4b05      	ldr	r3, [pc, #20]	; (4c48 <_usb_d_dev_wait_dfll_rdy+0x40>)
    4c32:	2110      	movs	r1, #16
    4c34:	0018      	movs	r0, r3
    4c36:	4b05      	ldr	r3, [pc, #20]	; (4c4c <_usb_d_dev_wait_dfll_rdy+0x44>)
    4c38:	4798      	blx	r3
    4c3a:	0003      	movs	r3, r0
    4c3c:	2b10      	cmp	r3, #16
    4c3e:	d1f7      	bne.n	4c30 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    4c40:	46c0      	nop			; (mov r8, r8)
    4c42:	46bd      	mov	sp, r7
    4c44:	bd80      	pop	{r7, pc}
    4c46:	46c0      	nop			; (mov r8, r8)
    4c48:	40000800 	.word	0x40000800
    4c4c:	000045d9 	.word	0x000045d9

00004c50 <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    4c50:	b580      	push	{r7, lr}
    4c52:	b082      	sub	sp, #8
    4c54:	af00      	add	r7, sp, #0
    4c56:	0002      	movs	r2, r0
    4c58:	1dfb      	adds	r3, r7, #7
    4c5a:	701a      	strb	r2, [r3, #0]
	if (clk_src == USB_CLK_SRC_DFLL) {
    4c5c:	1dfb      	adds	r3, r7, #7
    4c5e:	781b      	ldrb	r3, [r3, #0]
    4c60:	2b00      	cmp	r3, #0
    4c62:	d102      	bne.n	4c6a <_usb_d_dev_wait_clk_rdy+0x1a>
		_usb_d_dev_wait_dfll_rdy();
    4c64:	4b06      	ldr	r3, [pc, #24]	; (4c80 <_usb_d_dev_wait_clk_rdy+0x30>)
    4c66:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    4c68:	e005      	b.n	4c76 <_usb_d_dev_wait_clk_rdy+0x26>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    4c6a:	1dfb      	adds	r3, r7, #7
    4c6c:	781b      	ldrb	r3, [r3, #0]
    4c6e:	2b01      	cmp	r3, #1
    4c70:	d101      	bne.n	4c76 <_usb_d_dev_wait_clk_rdy+0x26>
		_usb_d_dev_wait_dpll_rdy();
    4c72:	4b04      	ldr	r3, [pc, #16]	; (4c84 <_usb_d_dev_wait_clk_rdy+0x34>)
    4c74:	4798      	blx	r3
}
    4c76:	46c0      	nop			; (mov r8, r8)
    4c78:	46bd      	mov	sp, r7
    4c7a:	b002      	add	sp, #8
    4c7c:	bd80      	pop	{r7, pc}
    4c7e:	46c0      	nop			; (mov r8, r8)
    4c80:	00004c09 	.word	0x00004c09
    4c84:	00004be5 	.word	0x00004be5

00004c88 <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    4c88:	b580      	push	{r7, lr}
    4c8a:	b082      	sub	sp, #8
    4c8c:	af00      	add	r7, sp, #0
    4c8e:	0002      	movs	r2, r0
    4c90:	6039      	str	r1, [r7, #0]
    4c92:	1dfb      	adds	r3, r7, #7
    4c94:	701a      	strb	r2, [r3, #0]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    4c96:	683b      	ldr	r3, [r7, #0]
    4c98:	b2da      	uxtb	r2, r3
    4c9a:	1dfb      	adds	r3, r7, #7
    4c9c:	781b      	ldrb	r3, [r3, #0]
    4c9e:	4804      	ldr	r0, [pc, #16]	; (4cb0 <_usbd_ep_int_ack+0x28>)
    4ca0:	0019      	movs	r1, r3
    4ca2:	4b04      	ldr	r3, [pc, #16]	; (4cb4 <_usbd_ep_int_ack+0x2c>)
    4ca4:	4798      	blx	r3
}
    4ca6:	46c0      	nop			; (mov r8, r8)
    4ca8:	46bd      	mov	sp, r7
    4caa:	b002      	add	sp, #8
    4cac:	bd80      	pop	{r7, pc}
    4cae:	46c0      	nop			; (mov r8, r8)
    4cb0:	41005000 	.word	0x41005000
    4cb4:	000046ff 	.word	0x000046ff

00004cb8 <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    4cb8:	b580      	push	{r7, lr}
    4cba:	b082      	sub	sp, #8
    4cbc:	af00      	add	r7, sp, #0
    4cbe:	0002      	movs	r2, r0
    4cc0:	6039      	str	r1, [r7, #0]
    4cc2:	1dfb      	adds	r3, r7, #7
    4cc4:	701a      	strb	r2, [r3, #0]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    4cc6:	683b      	ldr	r3, [r7, #0]
    4cc8:	b2da      	uxtb	r2, r3
    4cca:	1dfb      	adds	r3, r7, #7
    4ccc:	781b      	ldrb	r3, [r3, #0]
    4cce:	4804      	ldr	r0, [pc, #16]	; (4ce0 <_usbd_ep_int_en+0x28>)
    4cd0:	0019      	movs	r1, r3
    4cd2:	4b04      	ldr	r3, [pc, #16]	; (4ce4 <_usbd_ep_int_en+0x2c>)
    4cd4:	4798      	blx	r3
}
    4cd6:	46c0      	nop			; (mov r8, r8)
    4cd8:	46bd      	mov	sp, r7
    4cda:	b002      	add	sp, #8
    4cdc:	bd80      	pop	{r7, pc}
    4cde:	46c0      	nop			; (mov r8, r8)
    4ce0:	41005000 	.word	0x41005000
    4ce4:	000047ed 	.word	0x000047ed

00004ce8 <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    4ce8:	b580      	push	{r7, lr}
    4cea:	b082      	sub	sp, #8
    4cec:	af00      	add	r7, sp, #0
    4cee:	0002      	movs	r2, r0
    4cf0:	6039      	str	r1, [r7, #0]
    4cf2:	1dfb      	adds	r3, r7, #7
    4cf4:	701a      	strb	r2, [r3, #0]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    4cf6:	683b      	ldr	r3, [r7, #0]
    4cf8:	b2da      	uxtb	r2, r3
    4cfa:	1dfb      	adds	r3, r7, #7
    4cfc:	781b      	ldrb	r3, [r3, #0]
    4cfe:	4804      	ldr	r0, [pc, #16]	; (4d10 <_usbd_ep_int_dis+0x28>)
    4d00:	0019      	movs	r1, r3
    4d02:	4b04      	ldr	r3, [pc, #16]	; (4d14 <_usbd_ep_int_dis+0x2c>)
    4d04:	4798      	blx	r3
}
    4d06:	46c0      	nop			; (mov r8, r8)
    4d08:	46bd      	mov	sp, r7
    4d0a:	b002      	add	sp, #8
    4d0c:	bd80      	pop	{r7, pc}
    4d0e:	46c0      	nop			; (mov r8, r8)
    4d10:	41005000 	.word	0x41005000
    4d14:	00004823 	.word	0x00004823

00004d18 <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    4d18:	b580      	push	{r7, lr}
    4d1a:	b082      	sub	sp, #8
    4d1c:	af00      	add	r7, sp, #0
    4d1e:	0002      	movs	r2, r0
    4d20:	1dfb      	adds	r3, r7, #7
    4d22:	701a      	strb	r2, [r3, #0]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    4d24:	1dfb      	adds	r3, r7, #7
    4d26:	781b      	ldrb	r3, [r3, #0]
    4d28:	4a06      	ldr	r2, [pc, #24]	; (4d44 <_usbd_ep_is_ctrl+0x2c>)
    4d2a:	0019      	movs	r1, r3
    4d2c:	0010      	movs	r0, r2
    4d2e:	4b06      	ldr	r3, [pc, #24]	; (4d48 <_usbd_ep_is_ctrl+0x30>)
    4d30:	4798      	blx	r3
    4d32:	0003      	movs	r3, r0
    4d34:	3b11      	subs	r3, #17
    4d36:	425a      	negs	r2, r3
    4d38:	4153      	adcs	r3, r2
    4d3a:	b2db      	uxtb	r3, r3
}
    4d3c:	0018      	movs	r0, r3
    4d3e:	46bd      	mov	sp, r7
    4d40:	b002      	add	sp, #8
    4d42:	bd80      	pop	{r7, pc}
    4d44:	41005000 	.word	0x41005000
    4d48:	00004909 	.word	0x00004909

00004d4c <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    4d4c:	b590      	push	{r4, r7, lr}
    4d4e:	b083      	sub	sp, #12
    4d50:	af00      	add	r7, sp, #0
    4d52:	0004      	movs	r4, r0
    4d54:	0008      	movs	r0, r1
    4d56:	0011      	movs	r1, r2
    4d58:	1dfb      	adds	r3, r7, #7
    4d5a:	1c22      	adds	r2, r4, #0
    4d5c:	701a      	strb	r2, [r3, #0]
    4d5e:	1dbb      	adds	r3, r7, #6
    4d60:	1c02      	adds	r2, r0, #0
    4d62:	701a      	strb	r2, [r3, #0]
    4d64:	1d7b      	adds	r3, r7, #5
    4d66:	1c0a      	adds	r2, r1, #0
    4d68:	701a      	strb	r2, [r3, #0]
	if (st) {
    4d6a:	1d7b      	adds	r3, r7, #5
    4d6c:	781b      	ldrb	r3, [r3, #0]
    4d6e:	2b00      	cmp	r3, #0
    4d70:	d00c      	beq.n	4d8c <_usbd_ep_set_stall+0x40>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    4d72:	1dbb      	adds	r3, r7, #6
    4d74:	781b      	ldrb	r3, [r3, #0]
    4d76:	2210      	movs	r2, #16
    4d78:	409a      	lsls	r2, r3
    4d7a:	0013      	movs	r3, r2
    4d7c:	b2da      	uxtb	r2, r3
    4d7e:	1dfb      	adds	r3, r7, #7
    4d80:	781b      	ldrb	r3, [r3, #0]
    4d82:	480a      	ldr	r0, [pc, #40]	; (4dac <_usbd_ep_set_stall+0x60>)
    4d84:	0019      	movs	r1, r3
    4d86:	4b0a      	ldr	r3, [pc, #40]	; (4db0 <_usbd_ep_set_stall+0x64>)
    4d88:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    4d8a:	e00b      	b.n	4da4 <_usbd_ep_set_stall+0x58>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    4d8c:	1dbb      	adds	r3, r7, #6
    4d8e:	781b      	ldrb	r3, [r3, #0]
    4d90:	2210      	movs	r2, #16
    4d92:	409a      	lsls	r2, r3
    4d94:	0013      	movs	r3, r2
    4d96:	b2da      	uxtb	r2, r3
    4d98:	1dfb      	adds	r3, r7, #7
    4d9a:	781b      	ldrb	r3, [r3, #0]
    4d9c:	4803      	ldr	r0, [pc, #12]	; (4dac <_usbd_ep_set_stall+0x60>)
    4d9e:	0019      	movs	r1, r3
    4da0:	4b04      	ldr	r3, [pc, #16]	; (4db4 <_usbd_ep_set_stall+0x68>)
    4da2:	4798      	blx	r3
}
    4da4:	46c0      	nop			; (mov r8, r8)
    4da6:	46bd      	mov	sp, r7
    4da8:	b003      	add	sp, #12
    4daa:	bd90      	pop	{r4, r7, pc}
    4dac:	41005000 	.word	0x41005000
    4db0:	00004733 	.word	0x00004733
    4db4:	0000478f 	.word	0x0000478f

00004db8 <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    4db8:	b580      	push	{r7, lr}
    4dba:	b084      	sub	sp, #16
    4dbc:	af00      	add	r7, sp, #0
    4dbe:	0002      	movs	r2, r0
    4dc0:	1dfb      	adds	r3, r7, #7
    4dc2:	701a      	strb	r2, [r3, #0]
    4dc4:	1dbb      	adds	r3, r7, #6
    4dc6:	1c0a      	adds	r2, r1, #0
    4dc8:	701a      	strb	r2, [r3, #0]
	Usb *hw = USB;
    4dca:	4b0c      	ldr	r3, [pc, #48]	; (4dfc <_usbd_ep_is_stalled+0x44>)
    4dcc:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    4dce:	1dfb      	adds	r3, r7, #7
    4dd0:	781a      	ldrb	r2, [r3, #0]
    4dd2:	68fb      	ldr	r3, [r7, #12]
    4dd4:	0011      	movs	r1, r2
    4dd6:	0018      	movs	r0, r3
    4dd8:	4b09      	ldr	r3, [pc, #36]	; (4e00 <_usbd_ep_is_stalled+0x48>)
    4dda:	4798      	blx	r3
    4ddc:	0003      	movs	r3, r0
    4dde:	0019      	movs	r1, r3
    4de0:	1dbb      	adds	r3, r7, #6
    4de2:	781b      	ldrb	r3, [r3, #0]
    4de4:	2210      	movs	r2, #16
    4de6:	409a      	lsls	r2, r3
    4de8:	0013      	movs	r3, r2
    4dea:	400b      	ands	r3, r1
    4dec:	1e5a      	subs	r2, r3, #1
    4dee:	4193      	sbcs	r3, r2
    4df0:	b2db      	uxtb	r3, r3
}
    4df2:	0018      	movs	r0, r3
    4df4:	46bd      	mov	sp, r7
    4df6:	b004      	add	sp, #16
    4df8:	bd80      	pop	{r7, pc}
    4dfa:	46c0      	nop			; (mov r8, r8)
    4dfc:	41005000 	.word	0x41005000
    4e00:	00004767 	.word	0x00004767

00004e04 <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    4e04:	b580      	push	{r7, lr}
    4e06:	b084      	sub	sp, #16
    4e08:	af00      	add	r7, sp, #0
    4e0a:	0002      	movs	r2, r0
    4e0c:	1dfb      	adds	r3, r7, #7
    4e0e:	701a      	strb	r2, [r3, #0]
    4e10:	1dbb      	adds	r3, r7, #6
    4e12:	1c0a      	adds	r2, r1, #0
    4e14:	701a      	strb	r2, [r3, #0]
	Usb *hw = USB;
    4e16:	4b0c      	ldr	r3, [pc, #48]	; (4e48 <_usbd_ep_is_stall_sent+0x44>)
    4e18:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    4e1a:	1dfb      	adds	r3, r7, #7
    4e1c:	781a      	ldrb	r2, [r3, #0]
    4e1e:	68fb      	ldr	r3, [r7, #12]
    4e20:	0011      	movs	r1, r2
    4e22:	0018      	movs	r0, r3
    4e24:	4b09      	ldr	r3, [pc, #36]	; (4e4c <_usbd_ep_is_stall_sent+0x48>)
    4e26:	4798      	blx	r3
    4e28:	0003      	movs	r3, r0
    4e2a:	0019      	movs	r1, r3
    4e2c:	1dbb      	adds	r3, r7, #6
    4e2e:	781b      	ldrb	r3, [r3, #0]
    4e30:	2220      	movs	r2, #32
    4e32:	409a      	lsls	r2, r3
    4e34:	0013      	movs	r3, r2
    4e36:	400b      	ands	r3, r1
    4e38:	1e5a      	subs	r2, r3, #1
    4e3a:	4193      	sbcs	r3, r2
    4e3c:	b2db      	uxtb	r3, r3
}
    4e3e:	0018      	movs	r0, r3
    4e40:	46bd      	mov	sp, r7
    4e42:	b004      	add	sp, #16
    4e44:	bd80      	pop	{r7, pc}
    4e46:	46c0      	nop			; (mov r8, r8)
    4e48:	41005000 	.word	0x41005000
    4e4c:	000046d7 	.word	0x000046d7

00004e50 <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    4e50:	b580      	push	{r7, lr}
    4e52:	b082      	sub	sp, #8
    4e54:	af00      	add	r7, sp, #0
    4e56:	0002      	movs	r2, r0
    4e58:	1dfb      	adds	r3, r7, #7
    4e5a:	701a      	strb	r2, [r3, #0]
    4e5c:	1dbb      	adds	r3, r7, #6
    4e5e:	1c0a      	adds	r2, r1, #0
    4e60:	701a      	strb	r2, [r3, #0]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    4e62:	1dbb      	adds	r3, r7, #6
    4e64:	781b      	ldrb	r3, [r3, #0]
    4e66:	2220      	movs	r2, #32
    4e68:	409a      	lsls	r2, r3
    4e6a:	1dfb      	adds	r3, r7, #7
    4e6c:	781b      	ldrb	r3, [r3, #0]
    4e6e:	0011      	movs	r1, r2
    4e70:	0018      	movs	r0, r3
    4e72:	4b03      	ldr	r3, [pc, #12]	; (4e80 <_usbd_ep_ack_stall+0x30>)
    4e74:	4798      	blx	r3
}
    4e76:	46c0      	nop			; (mov r8, r8)
    4e78:	46bd      	mov	sp, r7
    4e7a:	b002      	add	sp, #8
    4e7c:	bd80      	pop	{r7, pc}
    4e7e:	46c0      	nop			; (mov r8, r8)
    4e80:	00004c89 	.word	0x00004c89

00004e84 <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    4e84:	b590      	push	{r4, r7, lr}
    4e86:	b083      	sub	sp, #12
    4e88:	af00      	add	r7, sp, #0
    4e8a:	0004      	movs	r4, r0
    4e8c:	0008      	movs	r0, r1
    4e8e:	0011      	movs	r1, r2
    4e90:	1dfb      	adds	r3, r7, #7
    4e92:	1c22      	adds	r2, r4, #0
    4e94:	701a      	strb	r2, [r3, #0]
    4e96:	1dbb      	adds	r3, r7, #6
    4e98:	1c02      	adds	r2, r0, #0
    4e9a:	701a      	strb	r2, [r3, #0]
    4e9c:	1d7b      	adds	r3, r7, #5
    4e9e:	1c0a      	adds	r2, r1, #0
    4ea0:	701a      	strb	r2, [r3, #0]
	if (en) {
    4ea2:	1d7b      	adds	r3, r7, #5
    4ea4:	781b      	ldrb	r3, [r3, #0]
    4ea6:	2b00      	cmp	r3, #0
    4ea8:	d00a      	beq.n	4ec0 <_usbd_ep_int_stall_en+0x3c>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    4eaa:	1dbb      	adds	r3, r7, #6
    4eac:	781b      	ldrb	r3, [r3, #0]
    4eae:	2220      	movs	r2, #32
    4eb0:	409a      	lsls	r2, r3
    4eb2:	1dfb      	adds	r3, r7, #7
    4eb4:	781b      	ldrb	r3, [r3, #0]
    4eb6:	0011      	movs	r1, r2
    4eb8:	0018      	movs	r0, r3
    4eba:	4b08      	ldr	r3, [pc, #32]	; (4edc <_usbd_ep_int_stall_en+0x58>)
    4ebc:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    4ebe:	e009      	b.n	4ed4 <_usbd_ep_int_stall_en+0x50>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    4ec0:	1dbb      	adds	r3, r7, #6
    4ec2:	781b      	ldrb	r3, [r3, #0]
    4ec4:	2220      	movs	r2, #32
    4ec6:	409a      	lsls	r2, r3
    4ec8:	1dfb      	adds	r3, r7, #7
    4eca:	781b      	ldrb	r3, [r3, #0]
    4ecc:	0011      	movs	r1, r2
    4ece:	0018      	movs	r0, r3
    4ed0:	4b03      	ldr	r3, [pc, #12]	; (4ee0 <_usbd_ep_int_stall_en+0x5c>)
    4ed2:	4798      	blx	r3
}
    4ed4:	46c0      	nop			; (mov r8, r8)
    4ed6:	46bd      	mov	sp, r7
    4ed8:	b003      	add	sp, #12
    4eda:	bd90      	pop	{r4, r7, pc}
    4edc:	00004cb9 	.word	0x00004cb9
    4ee0:	00004ce9 	.word	0x00004ce9

00004ee4 <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    4ee4:	b580      	push	{r7, lr}
    4ee6:	b082      	sub	sp, #8
    4ee8:	af00      	add	r7, sp, #0
    4eea:	0002      	movs	r2, r0
    4eec:	1dfb      	adds	r3, r7, #7
    4eee:	701a      	strb	r2, [r3, #0]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    4ef0:	1dfb      	adds	r3, r7, #7
    4ef2:	781b      	ldrb	r3, [r3, #0]
    4ef4:	4a04      	ldr	r2, [pc, #16]	; (4f08 <_usbd_ep_stop_setup+0x24>)
    4ef6:	0019      	movs	r1, r3
    4ef8:	0010      	movs	r0, r2
    4efa:	4b04      	ldr	r3, [pc, #16]	; (4f0c <_usbd_ep_stop_setup+0x28>)
    4efc:	4798      	blx	r3
}
    4efe:	46c0      	nop			; (mov r8, r8)
    4f00:	46bd      	mov	sp, r7
    4f02:	b002      	add	sp, #8
    4f04:	bd80      	pop	{r7, pc}
    4f06:	46c0      	nop			; (mov r8, r8)
    4f08:	41005000 	.word	0x41005000
    4f0c:	000047c3 	.word	0x000047c3

00004f10 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    4f10:	b580      	push	{r7, lr}
    4f12:	b082      	sub	sp, #8
    4f14:	af00      	add	r7, sp, #0
    4f16:	0002      	movs	r2, r0
    4f18:	1dfb      	adds	r3, r7, #7
    4f1a:	701a      	strb	r2, [r3, #0]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    4f1c:	1dfb      	adds	r3, r7, #7
    4f1e:	781b      	ldrb	r3, [r3, #0]
    4f20:	4806      	ldr	r0, [pc, #24]	; (4f3c <_usbd_ep_is_setup+0x2c>)
    4f22:	2210      	movs	r2, #16
    4f24:	0019      	movs	r1, r3
    4f26:	4b06      	ldr	r3, [pc, #24]	; (4f40 <_usbd_ep_is_setup+0x30>)
    4f28:	4798      	blx	r3
    4f2a:	0003      	movs	r3, r0
    4f2c:	1e5a      	subs	r2, r3, #1
    4f2e:	4193      	sbcs	r3, r2
    4f30:	b2db      	uxtb	r3, r3
}
    4f32:	0018      	movs	r0, r3
    4f34:	46bd      	mov	sp, r7
    4f36:	b002      	add	sp, #8
    4f38:	bd80      	pop	{r7, pc}
    4f3a:	46c0      	nop			; (mov r8, r8)
    4f3c:	41005000 	.word	0x41005000
    4f40:	00004689 	.word	0x00004689

00004f44 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    4f44:	b580      	push	{r7, lr}
    4f46:	b082      	sub	sp, #8
    4f48:	af00      	add	r7, sp, #0
    4f4a:	0002      	movs	r2, r0
    4f4c:	1dfb      	adds	r3, r7, #7
    4f4e:	701a      	strb	r2, [r3, #0]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    4f50:	1dfb      	adds	r3, r7, #7
    4f52:	781b      	ldrb	r3, [r3, #0]
    4f54:	2110      	movs	r1, #16
    4f56:	0018      	movs	r0, r3
    4f58:	4b02      	ldr	r3, [pc, #8]	; (4f64 <_usbd_ep_ack_setup+0x20>)
    4f5a:	4798      	blx	r3
}
    4f5c:	46c0      	nop			; (mov r8, r8)
    4f5e:	46bd      	mov	sp, r7
    4f60:	b002      	add	sp, #8
    4f62:	bd80      	pop	{r7, pc}
    4f64:	00004c89 	.word	0x00004c89

00004f68 <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    4f68:	b590      	push	{r4, r7, lr}
    4f6a:	b083      	sub	sp, #12
    4f6c:	af00      	add	r7, sp, #0
    4f6e:	0004      	movs	r4, r0
    4f70:	0008      	movs	r0, r1
    4f72:	0011      	movs	r1, r2
    4f74:	1dfb      	adds	r3, r7, #7
    4f76:	1c22      	adds	r2, r4, #0
    4f78:	701a      	strb	r2, [r3, #0]
    4f7a:	1dbb      	adds	r3, r7, #6
    4f7c:	1c02      	adds	r2, r0, #0
    4f7e:	701a      	strb	r2, [r3, #0]
    4f80:	1d7b      	adds	r3, r7, #5
    4f82:	1c0a      	adds	r2, r1, #0
    4f84:	701a      	strb	r2, [r3, #0]
	if (tgl) {
    4f86:	1d7b      	adds	r3, r7, #5
    4f88:	781b      	ldrb	r3, [r3, #0]
    4f8a:	2b00      	cmp	r3, #0
    4f8c:	d00c      	beq.n	4fa8 <_usbd_ep_set_toggle+0x40>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    4f8e:	1dbb      	adds	r3, r7, #6
    4f90:	781b      	ldrb	r3, [r3, #0]
    4f92:	2201      	movs	r2, #1
    4f94:	409a      	lsls	r2, r3
    4f96:	0013      	movs	r3, r2
    4f98:	b2da      	uxtb	r2, r3
    4f9a:	1dfb      	adds	r3, r7, #7
    4f9c:	781b      	ldrb	r3, [r3, #0]
    4f9e:	480a      	ldr	r0, [pc, #40]	; (4fc8 <_usbd_ep_set_toggle+0x60>)
    4fa0:	0019      	movs	r1, r3
    4fa2:	4b0a      	ldr	r3, [pc, #40]	; (4fcc <_usbd_ep_set_toggle+0x64>)
    4fa4:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    4fa6:	e00b      	b.n	4fc0 <_usbd_ep_set_toggle+0x58>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    4fa8:	1dbb      	adds	r3, r7, #6
    4faa:	781b      	ldrb	r3, [r3, #0]
    4fac:	2201      	movs	r2, #1
    4fae:	409a      	lsls	r2, r3
    4fb0:	0013      	movs	r3, r2
    4fb2:	b2da      	uxtb	r2, r3
    4fb4:	1dfb      	adds	r3, r7, #7
    4fb6:	781b      	ldrb	r3, [r3, #0]
    4fb8:	4803      	ldr	r0, [pc, #12]	; (4fc8 <_usbd_ep_set_toggle+0x60>)
    4fba:	0019      	movs	r1, r3
    4fbc:	4b04      	ldr	r3, [pc, #16]	; (4fd0 <_usbd_ep_set_toggle+0x68>)
    4fbe:	4798      	blx	r3
}
    4fc0:	46c0      	nop			; (mov r8, r8)
    4fc2:	46bd      	mov	sp, r7
    4fc4:	b003      	add	sp, #12
    4fc6:	bd90      	pop	{r4, r7, pc}
    4fc8:	41005000 	.word	0x41005000
    4fcc:	00004733 	.word	0x00004733
    4fd0:	0000478f 	.word	0x0000478f

00004fd4 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    4fd4:	b580      	push	{r7, lr}
    4fd6:	b082      	sub	sp, #8
    4fd8:	af00      	add	r7, sp, #0
    4fda:	0002      	movs	r2, r0
    4fdc:	1dfb      	adds	r3, r7, #7
    4fde:	701a      	strb	r2, [r3, #0]
    4fe0:	1dbb      	adds	r3, r7, #6
    4fe2:	1c0a      	adds	r2, r1, #0
    4fe4:	701a      	strb	r2, [r3, #0]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    4fe6:	1dbb      	adds	r3, r7, #6
    4fe8:	781b      	ldrb	r3, [r3, #0]
    4fea:	2201      	movs	r2, #1
    4fec:	409a      	lsls	r2, r3
    4fee:	1dfb      	adds	r3, r7, #7
    4ff0:	781b      	ldrb	r3, [r3, #0]
    4ff2:	0011      	movs	r1, r2
    4ff4:	0018      	movs	r0, r3
    4ff6:	4b03      	ldr	r3, [pc, #12]	; (5004 <_usbd_ep_ack_io_cpt+0x30>)
    4ff8:	4798      	blx	r3
}
    4ffa:	46c0      	nop			; (mov r8, r8)
    4ffc:	46bd      	mov	sp, r7
    4ffe:	b002      	add	sp, #8
    5000:	bd80      	pop	{r7, pc}
    5002:	46c0      	nop			; (mov r8, r8)
    5004:	00004c89 	.word	0x00004c89

00005008 <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    5008:	b580      	push	{r7, lr}
    500a:	b084      	sub	sp, #16
    500c:	af00      	add	r7, sp, #0
    500e:	603a      	str	r2, [r7, #0]
    5010:	1dfb      	adds	r3, r7, #7
    5012:	1c02      	adds	r2, r0, #0
    5014:	701a      	strb	r2, [r3, #0]
    5016:	1dbb      	adds	r3, r7, #6
    5018:	1c0a      	adds	r2, r1, #0
    501a:	701a      	strb	r2, [r3, #0]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    501c:	1dfb      	adds	r3, r7, #7
    501e:	781a      	ldrb	r2, [r3, #0]
    5020:	1dbb      	adds	r3, r7, #6
    5022:	781b      	ldrb	r3, [r3, #0]
    5024:	0052      	lsls	r2, r2, #1
    5026:	18d3      	adds	r3, r2, r3
    5028:	011a      	lsls	r2, r3, #4
    502a:	4b05      	ldr	r3, [pc, #20]	; (5040 <_usbd_ep_set_buf+0x38>)
    502c:	18d3      	adds	r3, r2, r3
    502e:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    5030:	68fb      	ldr	r3, [r7, #12]
    5032:	683a      	ldr	r2, [r7, #0]
    5034:	601a      	str	r2, [r3, #0]
}
    5036:	46c0      	nop			; (mov r8, r8)
    5038:	46bd      	mov	sp, r7
    503a:	b004      	add	sp, #16
    503c:	bd80      	pop	{r7, pc}
    503e:	46c0      	nop			; (mov r8, r8)
    5040:	20000ee4 	.word	0x20000ee4

00005044 <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    5044:	b590      	push	{r4, r7, lr}
    5046:	b085      	sub	sp, #20
    5048:	af00      	add	r7, sp, #0
    504a:	0004      	movs	r4, r0
    504c:	0008      	movs	r0, r1
    504e:	0011      	movs	r1, r2
    5050:	1dfb      	adds	r3, r7, #7
    5052:	1c22      	adds	r2, r4, #0
    5054:	701a      	strb	r2, [r3, #0]
    5056:	1dbb      	adds	r3, r7, #6
    5058:	1c02      	adds	r2, r0, #0
    505a:	701a      	strb	r2, [r3, #0]
    505c:	1d3b      	adds	r3, r7, #4
    505e:	1c0a      	adds	r2, r1, #0
    5060:	801a      	strh	r2, [r3, #0]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    5062:	1dfb      	adds	r3, r7, #7
    5064:	781a      	ldrb	r2, [r3, #0]
    5066:	1dbb      	adds	r3, r7, #6
    5068:	781b      	ldrb	r3, [r3, #0]
    506a:	0052      	lsls	r2, r2, #1
    506c:	18d3      	adds	r3, r2, r3
    506e:	011a      	lsls	r2, r3, #4
    5070:	4b0a      	ldr	r3, [pc, #40]	; (509c <_usbd_ep_set_in_count+0x58>)
    5072:	18d3      	adds	r3, r2, r3
    5074:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    5076:	1d3b      	adds	r3, r7, #4
    5078:	881b      	ldrh	r3, [r3, #0]
    507a:	049b      	lsls	r3, r3, #18
    507c:	0c9b      	lsrs	r3, r3, #18
    507e:	b299      	uxth	r1, r3
    5080:	68fb      	ldr	r3, [r7, #12]
    5082:	685a      	ldr	r2, [r3, #4]
    5084:	0489      	lsls	r1, r1, #18
    5086:	0c89      	lsrs	r1, r1, #18
    5088:	0389      	lsls	r1, r1, #14
    508a:	4805      	ldr	r0, [pc, #20]	; (50a0 <_usbd_ep_set_in_count+0x5c>)
    508c:	4002      	ands	r2, r0
    508e:	430a      	orrs	r2, r1
    5090:	605a      	str	r2, [r3, #4]
}
    5092:	46c0      	nop			; (mov r8, r8)
    5094:	46bd      	mov	sp, r7
    5096:	b005      	add	sp, #20
    5098:	bd90      	pop	{r4, r7, pc}
    509a:	46c0      	nop			; (mov r8, r8)
    509c:	20000ee4 	.word	0x20000ee4
    50a0:	f0003fff 	.word	0xf0003fff

000050a4 <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    50a4:	b590      	push	{r4, r7, lr}
    50a6:	b085      	sub	sp, #20
    50a8:	af00      	add	r7, sp, #0
    50aa:	0004      	movs	r4, r0
    50ac:	0008      	movs	r0, r1
    50ae:	0011      	movs	r1, r2
    50b0:	1dfb      	adds	r3, r7, #7
    50b2:	1c22      	adds	r2, r4, #0
    50b4:	701a      	strb	r2, [r3, #0]
    50b6:	1dbb      	adds	r3, r7, #6
    50b8:	1c02      	adds	r2, r0, #0
    50ba:	701a      	strb	r2, [r3, #0]
    50bc:	1d3b      	adds	r3, r7, #4
    50be:	1c0a      	adds	r2, r1, #0
    50c0:	801a      	strh	r2, [r3, #0]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    50c2:	1dfb      	adds	r3, r7, #7
    50c4:	781a      	ldrb	r2, [r3, #0]
    50c6:	1dbb      	adds	r3, r7, #6
    50c8:	781b      	ldrb	r3, [r3, #0]
    50ca:	0052      	lsls	r2, r2, #1
    50cc:	18d3      	adds	r3, r2, r3
    50ce:	011a      	lsls	r2, r3, #4
    50d0:	4b09      	ldr	r3, [pc, #36]	; (50f8 <_usbd_ep_set_in_size+0x54>)
    50d2:	18d3      	adds	r3, r2, r3
    50d4:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    50d6:	1d3b      	adds	r3, r7, #4
    50d8:	881b      	ldrh	r3, [r3, #0]
    50da:	049b      	lsls	r3, r3, #18
    50dc:	0c9b      	lsrs	r3, r3, #18
    50de:	b299      	uxth	r1, r3
    50e0:	68fb      	ldr	r3, [r7, #12]
    50e2:	685a      	ldr	r2, [r3, #4]
    50e4:	0489      	lsls	r1, r1, #18
    50e6:	0c89      	lsrs	r1, r1, #18
    50e8:	0b92      	lsrs	r2, r2, #14
    50ea:	0392      	lsls	r2, r2, #14
    50ec:	430a      	orrs	r2, r1
    50ee:	605a      	str	r2, [r3, #4]
}
    50f0:	46c0      	nop			; (mov r8, r8)
    50f2:	46bd      	mov	sp, r7
    50f4:	b005      	add	sp, #20
    50f6:	bd90      	pop	{r4, r7, pc}
    50f8:	20000ee4 	.word	0x20000ee4

000050fc <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    50fc:	b590      	push	{r4, r7, lr}
    50fe:	b085      	sub	sp, #20
    5100:	af00      	add	r7, sp, #0
    5102:	0004      	movs	r4, r0
    5104:	0008      	movs	r0, r1
    5106:	0011      	movs	r1, r2
    5108:	1dfb      	adds	r3, r7, #7
    510a:	1c22      	adds	r2, r4, #0
    510c:	701a      	strb	r2, [r3, #0]
    510e:	1dbb      	adds	r3, r7, #6
    5110:	1c02      	adds	r2, r0, #0
    5112:	701a      	strb	r2, [r3, #0]
    5114:	1d3b      	adds	r3, r7, #4
    5116:	1c0a      	adds	r2, r1, #0
    5118:	801a      	strh	r2, [r3, #0]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    511a:	1dfb      	adds	r3, r7, #7
    511c:	781a      	ldrb	r2, [r3, #0]
    511e:	1dbb      	adds	r3, r7, #6
    5120:	781b      	ldrb	r3, [r3, #0]
    5122:	0052      	lsls	r2, r2, #1
    5124:	18d3      	adds	r3, r2, r3
    5126:	011a      	lsls	r2, r3, #4
    5128:	4b09      	ldr	r3, [pc, #36]	; (5150 <_usbd_ep_set_out_count+0x54>)
    512a:	18d3      	adds	r3, r2, r3
    512c:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    512e:	1d3b      	adds	r3, r7, #4
    5130:	881b      	ldrh	r3, [r3, #0]
    5132:	049b      	lsls	r3, r3, #18
    5134:	0c9b      	lsrs	r3, r3, #18
    5136:	b299      	uxth	r1, r3
    5138:	68fb      	ldr	r3, [r7, #12]
    513a:	685a      	ldr	r2, [r3, #4]
    513c:	0489      	lsls	r1, r1, #18
    513e:	0c89      	lsrs	r1, r1, #18
    5140:	0b92      	lsrs	r2, r2, #14
    5142:	0392      	lsls	r2, r2, #14
    5144:	430a      	orrs	r2, r1
    5146:	605a      	str	r2, [r3, #4]
}
    5148:	46c0      	nop			; (mov r8, r8)
    514a:	46bd      	mov	sp, r7
    514c:	b005      	add	sp, #20
    514e:	bd90      	pop	{r4, r7, pc}
    5150:	20000ee4 	.word	0x20000ee4

00005154 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    5154:	b590      	push	{r4, r7, lr}
    5156:	b085      	sub	sp, #20
    5158:	af00      	add	r7, sp, #0
    515a:	0004      	movs	r4, r0
    515c:	0008      	movs	r0, r1
    515e:	0011      	movs	r1, r2
    5160:	1dfb      	adds	r3, r7, #7
    5162:	1c22      	adds	r2, r4, #0
    5164:	701a      	strb	r2, [r3, #0]
    5166:	1dbb      	adds	r3, r7, #6
    5168:	1c02      	adds	r2, r0, #0
    516a:	701a      	strb	r2, [r3, #0]
    516c:	1d3b      	adds	r3, r7, #4
    516e:	1c0a      	adds	r2, r1, #0
    5170:	801a      	strh	r2, [r3, #0]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    5172:	1dfb      	adds	r3, r7, #7
    5174:	781a      	ldrb	r2, [r3, #0]
    5176:	1dbb      	adds	r3, r7, #6
    5178:	781b      	ldrb	r3, [r3, #0]
    517a:	0052      	lsls	r2, r2, #1
    517c:	18d3      	adds	r3, r2, r3
    517e:	011a      	lsls	r2, r3, #4
    5180:	4b0a      	ldr	r3, [pc, #40]	; (51ac <_usbd_ep_set_out_size+0x58>)
    5182:	18d3      	adds	r3, r2, r3
    5184:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    5186:	1d3b      	adds	r3, r7, #4
    5188:	881b      	ldrh	r3, [r3, #0]
    518a:	049b      	lsls	r3, r3, #18
    518c:	0c9b      	lsrs	r3, r3, #18
    518e:	b299      	uxth	r1, r3
    5190:	68fb      	ldr	r3, [r7, #12]
    5192:	685a      	ldr	r2, [r3, #4]
    5194:	0489      	lsls	r1, r1, #18
    5196:	0c89      	lsrs	r1, r1, #18
    5198:	0389      	lsls	r1, r1, #14
    519a:	4805      	ldr	r0, [pc, #20]	; (51b0 <_usbd_ep_set_out_size+0x5c>)
    519c:	4002      	ands	r2, r0
    519e:	430a      	orrs	r2, r1
    51a0:	605a      	str	r2, [r3, #4]
}
    51a2:	46c0      	nop			; (mov r8, r8)
    51a4:	46bd      	mov	sp, r7
    51a6:	b005      	add	sp, #20
    51a8:	bd90      	pop	{r4, r7, pc}
    51aa:	46c0      	nop			; (mov r8, r8)
    51ac:	20000ee4 	.word	0x20000ee4
    51b0:	f0003fff 	.word	0xf0003fff

000051b4 <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    51b4:	b580      	push	{r7, lr}
    51b6:	b084      	sub	sp, #16
    51b8:	af00      	add	r7, sp, #0
    51ba:	60ba      	str	r2, [r7, #8]
    51bc:	607b      	str	r3, [r7, #4]
    51be:	230f      	movs	r3, #15
    51c0:	18fb      	adds	r3, r7, r3
    51c2:	1c02      	adds	r2, r0, #0
    51c4:	701a      	strb	r2, [r3, #0]
    51c6:	230e      	movs	r3, #14
    51c8:	18fb      	adds	r3, r7, r3
    51ca:	1c0a      	adds	r2, r1, #0
    51cc:	701a      	strb	r2, [r3, #0]
	_usbd_ep_set_in_size(epn, bank_n, size);
    51ce:	68bb      	ldr	r3, [r7, #8]
    51d0:	b29a      	uxth	r2, r3
    51d2:	230e      	movs	r3, #14
    51d4:	18fb      	adds	r3, r7, r3
    51d6:	7819      	ldrb	r1, [r3, #0]
    51d8:	230f      	movs	r3, #15
    51da:	18fb      	adds	r3, r7, r3
    51dc:	781b      	ldrb	r3, [r3, #0]
    51de:	0018      	movs	r0, r3
    51e0:	4b08      	ldr	r3, [pc, #32]	; (5204 <_usbd_ep_set_in_trans+0x50>)
    51e2:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    51e4:	687b      	ldr	r3, [r7, #4]
    51e6:	b29a      	uxth	r2, r3
    51e8:	230e      	movs	r3, #14
    51ea:	18fb      	adds	r3, r7, r3
    51ec:	7819      	ldrb	r1, [r3, #0]
    51ee:	230f      	movs	r3, #15
    51f0:	18fb      	adds	r3, r7, r3
    51f2:	781b      	ldrb	r3, [r3, #0]
    51f4:	0018      	movs	r0, r3
    51f6:	4b04      	ldr	r3, [pc, #16]	; (5208 <_usbd_ep_set_in_trans+0x54>)
    51f8:	4798      	blx	r3
}
    51fa:	46c0      	nop			; (mov r8, r8)
    51fc:	46bd      	mov	sp, r7
    51fe:	b004      	add	sp, #16
    5200:	bd80      	pop	{r7, pc}
    5202:	46c0      	nop			; (mov r8, r8)
    5204:	000050a5 	.word	0x000050a5
    5208:	00005045 	.word	0x00005045

0000520c <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    520c:	b580      	push	{r7, lr}
    520e:	b084      	sub	sp, #16
    5210:	af00      	add	r7, sp, #0
    5212:	60ba      	str	r2, [r7, #8]
    5214:	607b      	str	r3, [r7, #4]
    5216:	230f      	movs	r3, #15
    5218:	18fb      	adds	r3, r7, r3
    521a:	1c02      	adds	r2, r0, #0
    521c:	701a      	strb	r2, [r3, #0]
    521e:	230e      	movs	r3, #14
    5220:	18fb      	adds	r3, r7, r3
    5222:	1c0a      	adds	r2, r1, #0
    5224:	701a      	strb	r2, [r3, #0]
	_usbd_ep_set_out_size(epn, bank_n, size);
    5226:	68bb      	ldr	r3, [r7, #8]
    5228:	b29a      	uxth	r2, r3
    522a:	230e      	movs	r3, #14
    522c:	18fb      	adds	r3, r7, r3
    522e:	7819      	ldrb	r1, [r3, #0]
    5230:	230f      	movs	r3, #15
    5232:	18fb      	adds	r3, r7, r3
    5234:	781b      	ldrb	r3, [r3, #0]
    5236:	0018      	movs	r0, r3
    5238:	4b08      	ldr	r3, [pc, #32]	; (525c <_usbd_ep_set_out_trans+0x50>)
    523a:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    523c:	687b      	ldr	r3, [r7, #4]
    523e:	b29a      	uxth	r2, r3
    5240:	230e      	movs	r3, #14
    5242:	18fb      	adds	r3, r7, r3
    5244:	7819      	ldrb	r1, [r3, #0]
    5246:	230f      	movs	r3, #15
    5248:	18fb      	adds	r3, r7, r3
    524a:	781b      	ldrb	r3, [r3, #0]
    524c:	0018      	movs	r0, r3
    524e:	4b04      	ldr	r3, [pc, #16]	; (5260 <_usbd_ep_set_out_trans+0x54>)
    5250:	4798      	blx	r3
}
    5252:	46c0      	nop			; (mov r8, r8)
    5254:	46bd      	mov	sp, r7
    5256:	b004      	add	sp, #16
    5258:	bd80      	pop	{r7, pc}
    525a:	46c0      	nop			; (mov r8, r8)
    525c:	00005155 	.word	0x00005155
    5260:	000050fd 	.word	0x000050fd

00005264 <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    5264:	b580      	push	{r7, lr}
    5266:	b084      	sub	sp, #16
    5268:	af00      	add	r7, sp, #0
    526a:	0002      	movs	r2, r0
    526c:	1dfb      	adds	r3, r7, #7
    526e:	701a      	strb	r2, [r3, #0]
    5270:	1dbb      	adds	r3, r7, #6
    5272:	1c0a      	adds	r2, r1, #0
    5274:	701a      	strb	r2, [r3, #0]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    5276:	1dfb      	adds	r3, r7, #7
    5278:	781a      	ldrb	r2, [r3, #0]
    527a:	1dbb      	adds	r3, r7, #6
    527c:	781b      	ldrb	r3, [r3, #0]
    527e:	0052      	lsls	r2, r2, #1
    5280:	18d3      	adds	r3, r2, r3
    5282:	011a      	lsls	r2, r3, #4
    5284:	4b04      	ldr	r3, [pc, #16]	; (5298 <_usbd_ep_clear_bank_status+0x34>)
    5286:	18d3      	adds	r3, r2, r3
    5288:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    528a:	68fb      	ldr	r3, [r7, #12]
    528c:	2200      	movs	r2, #0
    528e:	729a      	strb	r2, [r3, #10]
}
    5290:	46c0      	nop			; (mov r8, r8)
    5292:	46bd      	mov	sp, r7
    5294:	b004      	add	sp, #16
    5296:	bd80      	pop	{r7, pc}
    5298:	20000ee4 	.word	0x20000ee4

0000529c <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    529c:	b590      	push	{r4, r7, lr}
    529e:	b083      	sub	sp, #12
    52a0:	af00      	add	r7, sp, #0
    52a2:	0004      	movs	r4, r0
    52a4:	0008      	movs	r0, r1
    52a6:	0011      	movs	r1, r2
    52a8:	1dfb      	adds	r3, r7, #7
    52aa:	1c22      	adds	r2, r4, #0
    52ac:	701a      	strb	r2, [r3, #0]
    52ae:	1dbb      	adds	r3, r7, #6
    52b0:	1c02      	adds	r2, r0, #0
    52b2:	701a      	strb	r2, [r3, #0]
    52b4:	1d7b      	adds	r3, r7, #5
    52b6:	1c0a      	adds	r2, r1, #0
    52b8:	701a      	strb	r2, [r3, #0]
	if (rdy) {
    52ba:	1d7b      	adds	r3, r7, #5
    52bc:	781b      	ldrb	r3, [r3, #0]
    52be:	2b00      	cmp	r3, #0
    52c0:	d00c      	beq.n	52dc <_usbd_ep_set_in_rdy+0x40>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    52c2:	1dbb      	adds	r3, r7, #6
    52c4:	781b      	ldrb	r3, [r3, #0]
    52c6:	2240      	movs	r2, #64	; 0x40
    52c8:	409a      	lsls	r2, r3
    52ca:	0013      	movs	r3, r2
    52cc:	b2da      	uxtb	r2, r3
    52ce:	1dfb      	adds	r3, r7, #7
    52d0:	781b      	ldrb	r3, [r3, #0]
    52d2:	480a      	ldr	r0, [pc, #40]	; (52fc <_usbd_ep_set_in_rdy+0x60>)
    52d4:	0019      	movs	r1, r3
    52d6:	4b0a      	ldr	r3, [pc, #40]	; (5300 <_usbd_ep_set_in_rdy+0x64>)
    52d8:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    52da:	e00b      	b.n	52f4 <_usbd_ep_set_in_rdy+0x58>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    52dc:	1dbb      	adds	r3, r7, #6
    52de:	781b      	ldrb	r3, [r3, #0]
    52e0:	2240      	movs	r2, #64	; 0x40
    52e2:	409a      	lsls	r2, r3
    52e4:	0013      	movs	r3, r2
    52e6:	b2da      	uxtb	r2, r3
    52e8:	1dfb      	adds	r3, r7, #7
    52ea:	781b      	ldrb	r3, [r3, #0]
    52ec:	4803      	ldr	r0, [pc, #12]	; (52fc <_usbd_ep_set_in_rdy+0x60>)
    52ee:	0019      	movs	r1, r3
    52f0:	4b04      	ldr	r3, [pc, #16]	; (5304 <_usbd_ep_set_in_rdy+0x68>)
    52f2:	4798      	blx	r3
}
    52f4:	46c0      	nop			; (mov r8, r8)
    52f6:	46bd      	mov	sp, r7
    52f8:	b003      	add	sp, #12
    52fa:	bd90      	pop	{r4, r7, pc}
    52fc:	41005000 	.word	0x41005000
    5300:	00004733 	.word	0x00004733
    5304:	0000478f 	.word	0x0000478f

00005308 <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    5308:	b590      	push	{r4, r7, lr}
    530a:	b083      	sub	sp, #12
    530c:	af00      	add	r7, sp, #0
    530e:	0004      	movs	r4, r0
    5310:	0008      	movs	r0, r1
    5312:	0011      	movs	r1, r2
    5314:	1dfb      	adds	r3, r7, #7
    5316:	1c22      	adds	r2, r4, #0
    5318:	701a      	strb	r2, [r3, #0]
    531a:	1dbb      	adds	r3, r7, #6
    531c:	1c02      	adds	r2, r0, #0
    531e:	701a      	strb	r2, [r3, #0]
    5320:	1d7b      	adds	r3, r7, #5
    5322:	1c0a      	adds	r2, r1, #0
    5324:	701a      	strb	r2, [r3, #0]
	if (rdy) {
    5326:	1d7b      	adds	r3, r7, #5
    5328:	781b      	ldrb	r3, [r3, #0]
    532a:	2b00      	cmp	r3, #0
    532c:	d00c      	beq.n	5348 <_usbd_ep_set_out_rdy+0x40>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    532e:	1dbb      	adds	r3, r7, #6
    5330:	781b      	ldrb	r3, [r3, #0]
    5332:	2240      	movs	r2, #64	; 0x40
    5334:	409a      	lsls	r2, r3
    5336:	0013      	movs	r3, r2
    5338:	b2da      	uxtb	r2, r3
    533a:	1dfb      	adds	r3, r7, #7
    533c:	781b      	ldrb	r3, [r3, #0]
    533e:	480a      	ldr	r0, [pc, #40]	; (5368 <_usbd_ep_set_out_rdy+0x60>)
    5340:	0019      	movs	r1, r3
    5342:	4b0a      	ldr	r3, [pc, #40]	; (536c <_usbd_ep_set_out_rdy+0x64>)
    5344:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    5346:	e00b      	b.n	5360 <_usbd_ep_set_out_rdy+0x58>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    5348:	1dbb      	adds	r3, r7, #6
    534a:	781b      	ldrb	r3, [r3, #0]
    534c:	2240      	movs	r2, #64	; 0x40
    534e:	409a      	lsls	r2, r3
    5350:	0013      	movs	r3, r2
    5352:	b2da      	uxtb	r2, r3
    5354:	1dfb      	adds	r3, r7, #7
    5356:	781b      	ldrb	r3, [r3, #0]
    5358:	4803      	ldr	r0, [pc, #12]	; (5368 <_usbd_ep_set_out_rdy+0x60>)
    535a:	0019      	movs	r1, r3
    535c:	4b04      	ldr	r3, [pc, #16]	; (5370 <_usbd_ep_set_out_rdy+0x68>)
    535e:	4798      	blx	r3
}
    5360:	46c0      	nop			; (mov r8, r8)
    5362:	46bd      	mov	sp, r7
    5364:	b003      	add	sp, #12
    5366:	bd90      	pop	{r4, r7, pc}
    5368:	41005000 	.word	0x41005000
    536c:	0000478f 	.word	0x0000478f
    5370:	00004733 	.word	0x00004733

00005374 <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    5374:	b580      	push	{r7, lr}
    5376:	b082      	sub	sp, #8
    5378:	af00      	add	r7, sp, #0
    537a:	0002      	movs	r2, r0
    537c:	1dbb      	adds	r3, r7, #6
    537e:	801a      	strh	r2, [r3, #0]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    5380:	1dbb      	adds	r3, r7, #6
    5382:	881a      	ldrh	r2, [r3, #0]
    5384:	2380      	movs	r3, #128	; 0x80
    5386:	009b      	lsls	r3, r3, #2
    5388:	429a      	cmp	r2, r3
    538a:	d827      	bhi.n	53dc <_usbd_ep_pcksize_size+0x68>
    538c:	1dbb      	adds	r3, r7, #6
    538e:	881a      	ldrh	r2, [r3, #0]
    5390:	2380      	movs	r3, #128	; 0x80
    5392:	005b      	lsls	r3, r3, #1
    5394:	429a      	cmp	r2, r3
    5396:	d81f      	bhi.n	53d8 <_usbd_ep_pcksize_size+0x64>
    5398:	1dbb      	adds	r3, r7, #6
    539a:	881b      	ldrh	r3, [r3, #0]
    539c:	2b80      	cmp	r3, #128	; 0x80
    539e:	d819      	bhi.n	53d4 <_usbd_ep_pcksize_size+0x60>
    53a0:	1dbb      	adds	r3, r7, #6
    53a2:	881b      	ldrh	r3, [r3, #0]
    53a4:	2b40      	cmp	r3, #64	; 0x40
    53a6:	d813      	bhi.n	53d0 <_usbd_ep_pcksize_size+0x5c>
    53a8:	1dbb      	adds	r3, r7, #6
    53aa:	881b      	ldrh	r3, [r3, #0]
    53ac:	2b20      	cmp	r3, #32
    53ae:	d80d      	bhi.n	53cc <_usbd_ep_pcksize_size+0x58>
    53b0:	1dbb      	adds	r3, r7, #6
    53b2:	881b      	ldrh	r3, [r3, #0]
    53b4:	2b10      	cmp	r3, #16
    53b6:	d807      	bhi.n	53c8 <_usbd_ep_pcksize_size+0x54>
    53b8:	1dbb      	adds	r3, r7, #6
    53ba:	881b      	ldrh	r3, [r3, #0]
    53bc:	2208      	movs	r2, #8
    53be:	429a      	cmp	r2, r3
    53c0:	419b      	sbcs	r3, r3
    53c2:	425b      	negs	r3, r3
    53c4:	b2db      	uxtb	r3, r3
    53c6:	e00a      	b.n	53de <_usbd_ep_pcksize_size+0x6a>
    53c8:	2302      	movs	r3, #2
    53ca:	e008      	b.n	53de <_usbd_ep_pcksize_size+0x6a>
    53cc:	2303      	movs	r3, #3
    53ce:	e006      	b.n	53de <_usbd_ep_pcksize_size+0x6a>
    53d0:	2304      	movs	r3, #4
    53d2:	e004      	b.n	53de <_usbd_ep_pcksize_size+0x6a>
    53d4:	2305      	movs	r3, #5
    53d6:	e002      	b.n	53de <_usbd_ep_pcksize_size+0x6a>
    53d8:	2306      	movs	r3, #6
    53da:	e000      	b.n	53de <_usbd_ep_pcksize_size+0x6a>
    53dc:	2307      	movs	r3, #7
}
    53de:	0018      	movs	r0, r3
    53e0:	46bd      	mov	sp, r7
    53e2:	b002      	add	sp, #8
    53e4:	bd80      	pop	{r7, pc}
	...

000053e8 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    53e8:	b580      	push	{r7, lr}
    53ea:	b084      	sub	sp, #16
    53ec:	af00      	add	r7, sp, #0
    53ee:	0002      	movs	r2, r0
    53f0:	1dfb      	adds	r3, r7, #7
    53f2:	701a      	strb	r2, [r3, #0]
    53f4:	1dbb      	adds	r3, r7, #6
    53f6:	1c0a      	adds	r2, r1, #0
    53f8:	701a      	strb	r2, [r3, #0]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    53fa:	1dfb      	adds	r3, r7, #7
    53fc:	781b      	ldrb	r3, [r3, #0]
    53fe:	2b00      	cmp	r3, #0
    5400:	d00b      	beq.n	541a <_usb_d_dev_ept+0x32>
    5402:	1dbb      	adds	r3, r7, #6
    5404:	781b      	ldrb	r3, [r3, #0]
    5406:	2b00      	cmp	r3, #0
    5408:	d004      	beq.n	5414 <_usb_d_dev_ept+0x2c>
    540a:	1dfb      	adds	r3, r7, #7
    540c:	781b      	ldrb	r3, [r3, #0]
    540e:	3307      	adds	r3, #7
    5410:	b2db      	uxtb	r3, r3
    5412:	e003      	b.n	541c <_usb_d_dev_ept+0x34>
    5414:	1dfb      	adds	r3, r7, #7
    5416:	781b      	ldrb	r3, [r3, #0]
    5418:	e000      	b.n	541c <_usb_d_dev_ept+0x34>
    541a:	2300      	movs	r3, #0
    541c:	220f      	movs	r2, #15
    541e:	18ba      	adds	r2, r7, r2
    5420:	7013      	strb	r3, [r2, #0]
	return &dev_inst.ep[ep_index];
    5422:	230f      	movs	r3, #15
    5424:	18fb      	adds	r3, r7, r3
    5426:	781a      	ldrb	r2, [r3, #0]
    5428:	0013      	movs	r3, r2
    542a:	009b      	lsls	r3, r3, #2
    542c:	189b      	adds	r3, r3, r2
    542e:	009b      	lsls	r3, r3, #2
    5430:	3310      	adds	r3, #16
    5432:	001a      	movs	r2, r3
    5434:	4b03      	ldr	r3, [pc, #12]	; (5444 <_usb_d_dev_ept+0x5c>)
    5436:	18d3      	adds	r3, r2, r3
    5438:	3304      	adds	r3, #4
}
    543a:	0018      	movs	r0, r3
    543c:	46bd      	mov	sp, r7
    543e:	b004      	add	sp, #16
    5440:	bd80      	pop	{r7, pc}
    5442:	46c0      	nop			; (mov r8, r8)
    5444:	20000d7c 	.word	0x20000d7c

00005448 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    5448:	b580      	push	{r7, lr}
    544a:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    544c:	4b05      	ldr	r3, [pc, #20]	; (5464 <_usb_d_dev_sof+0x1c>)
    544e:	2104      	movs	r1, #4
    5450:	0018      	movs	r0, r3
    5452:	4b05      	ldr	r3, [pc, #20]	; (5468 <_usb_d_dev_sof+0x20>)
    5454:	4798      	blx	r3
	dev_inst.callbacks.sof();
    5456:	4b05      	ldr	r3, [pc, #20]	; (546c <_usb_d_dev_sof+0x24>)
    5458:	681b      	ldr	r3, [r3, #0]
    545a:	4798      	blx	r3
}
    545c:	46c0      	nop			; (mov r8, r8)
    545e:	46bd      	mov	sp, r7
    5460:	bd80      	pop	{r7, pc}
    5462:	46c0      	nop			; (mov r8, r8)
    5464:	41005000 	.word	0x41005000
    5468:	00004943 	.word	0x00004943
    546c:	20000d7c 	.word	0x20000d7c

00005470 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    5470:	b580      	push	{r7, lr}
    5472:	b084      	sub	sp, #16
    5474:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    5476:	2300      	movs	r3, #0
    5478:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    547a:	4a22      	ldr	r2, [pc, #136]	; (5504 <_usb_d_dev_lpmsusp+0x94>)
    547c:	4b22      	ldr	r3, [pc, #136]	; (5508 <_usb_d_dev_lpmsusp+0x98>)
    547e:	0011      	movs	r1, r2
    5480:	0018      	movs	r0, r3
    5482:	4b22      	ldr	r3, [pc, #136]	; (550c <_usb_d_dev_lpmsusp+0x9c>)
    5484:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    5486:	4a1f      	ldr	r2, [pc, #124]	; (5504 <_usb_d_dev_lpmsusp+0x94>)
    5488:	4b1f      	ldr	r3, [pc, #124]	; (5508 <_usb_d_dev_lpmsusp+0x98>)
    548a:	0011      	movs	r1, r2
    548c:	0018      	movs	r0, r3
    548e:	4b20      	ldr	r3, [pc, #128]	; (5510 <_usb_d_dev_lpmsusp+0xa0>)
    5490:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    5492:	4b1d      	ldr	r3, [pc, #116]	; (5508 <_usb_d_dev_lpmsusp+0x98>)
    5494:	2170      	movs	r1, #112	; 0x70
    5496:	0018      	movs	r0, r3
    5498:	4b1e      	ldr	r3, [pc, #120]	; (5514 <_usb_d_dev_lpmsusp+0xa4>)
    549a:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    549c:	230f      	movs	r3, #15
    549e:	18fb      	adds	r3, r7, r3
    54a0:	2200      	movs	r2, #0
    54a2:	701a      	strb	r2, [r3, #0]
    54a4:	e01e      	b.n	54e4 <_usb_d_dev_lpmsusp+0x74>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    54a6:	230f      	movs	r3, #15
    54a8:	18fb      	adds	r3, r7, r3
    54aa:	781b      	ldrb	r3, [r3, #0]
    54ac:	015a      	lsls	r2, r3, #5
    54ae:	4b1a      	ldr	r3, [pc, #104]	; (5518 <_usb_d_dev_lpmsusp+0xa8>)
    54b0:	18d3      	adds	r3, r2, r3
    54b2:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    54b4:	687b      	ldr	r3, [r7, #4]
    54b6:	891b      	ldrh	r3, [r3, #8]
    54b8:	071b      	lsls	r3, r3, #28
    54ba:	0f1b      	lsrs	r3, r3, #28
    54bc:	b2db      	uxtb	r3, r3
    54be:	2b03      	cmp	r3, #3
    54c0:	d109      	bne.n	54d6 <_usb_d_dev_lpmsusp+0x66>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    54c2:	687b      	ldr	r3, [r7, #4]
    54c4:	891b      	ldrh	r3, [r3, #8]
    54c6:	045b      	lsls	r3, r3, #17
    54c8:	0d5b      	lsrs	r3, r3, #21
    54ca:	b29b      	uxth	r3, r3
    54cc:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    54ce:	687b      	ldr	r3, [r7, #4]
    54d0:	2200      	movs	r2, #0
    54d2:	811a      	strh	r2, [r3, #8]
			break;
    54d4:	e00b      	b.n	54ee <_usb_d_dev_lpmsusp+0x7e>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    54d6:	230f      	movs	r3, #15
    54d8:	18fb      	adds	r3, r7, r3
    54da:	781a      	ldrb	r2, [r3, #0]
    54dc:	230f      	movs	r3, #15
    54de:	18fb      	adds	r3, r7, r3
    54e0:	3201      	adds	r2, #1
    54e2:	701a      	strb	r2, [r3, #0]
    54e4:	230f      	movs	r3, #15
    54e6:	18fb      	adds	r3, r7, r3
    54e8:	781b      	ldrb	r3, [r3, #0]
    54ea:	2b06      	cmp	r3, #6
    54ec:	d9db      	bls.n	54a6 <_usb_d_dev_lpmsusp+0x36>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    54ee:	4b0b      	ldr	r3, [pc, #44]	; (551c <_usb_d_dev_lpmsusp+0xac>)
    54f0:	685b      	ldr	r3, [r3, #4]
    54f2:	68ba      	ldr	r2, [r7, #8]
    54f4:	0011      	movs	r1, r2
    54f6:	2003      	movs	r0, #3
    54f8:	4798      	blx	r3
}
    54fa:	46c0      	nop			; (mov r8, r8)
    54fc:	46bd      	mov	sp, r7
    54fe:	b004      	add	sp, #16
    5500:	bd80      	pop	{r7, pc}
    5502:	46c0      	nop			; (mov r8, r8)
    5504:	00000201 	.word	0x00000201
    5508:	41005000 	.word	0x41005000
    550c:	00004943 	.word	0x00004943
    5510:	00004995 	.word	0x00004995
    5514:	00004961 	.word	0x00004961
    5518:	20000ee4 	.word	0x20000ee4
    551c:	20000d7c 	.word	0x20000d7c

00005520 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    5520:	b580      	push	{r7, lr}
    5522:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    5524:	4b06      	ldr	r3, [pc, #24]	; (5540 <_usb_d_dev_ramerr+0x20>)
    5526:	2180      	movs	r1, #128	; 0x80
    5528:	0018      	movs	r0, r3
    552a:	4b06      	ldr	r3, [pc, #24]	; (5544 <_usb_d_dev_ramerr+0x24>)
    552c:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    552e:	4b06      	ldr	r3, [pc, #24]	; (5548 <_usb_d_dev_ramerr+0x28>)
    5530:	685b      	ldr	r3, [r3, #4]
    5532:	2100      	movs	r1, #0
    5534:	2005      	movs	r0, #5
    5536:	4798      	blx	r3
}
    5538:	46c0      	nop			; (mov r8, r8)
    553a:	46bd      	mov	sp, r7
    553c:	bd80      	pop	{r7, pc}
    553e:	46c0      	nop			; (mov r8, r8)
    5540:	41005000 	.word	0x41005000
    5544:	00004943 	.word	0x00004943
    5548:	20000d7c 	.word	0x20000d7c

0000554c <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    554c:	b580      	push	{r7, lr}
    554e:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    5550:	4b0d      	ldr	r3, [pc, #52]	; (5588 <_usb_d_dev_wakeup+0x3c>)
    5552:	2170      	movs	r1, #112	; 0x70
    5554:	0018      	movs	r0, r3
    5556:	4b0d      	ldr	r3, [pc, #52]	; (558c <_usb_d_dev_wakeup+0x40>)
    5558:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    555a:	4b0b      	ldr	r3, [pc, #44]	; (5588 <_usb_d_dev_wakeup+0x3c>)
    555c:	2170      	movs	r1, #112	; 0x70
    555e:	0018      	movs	r0, r3
    5560:	4b0b      	ldr	r3, [pc, #44]	; (5590 <_usb_d_dev_wakeup+0x44>)
    5562:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    5564:	4a0b      	ldr	r2, [pc, #44]	; (5594 <_usb_d_dev_wakeup+0x48>)
    5566:	4b08      	ldr	r3, [pc, #32]	; (5588 <_usb_d_dev_wakeup+0x3c>)
    5568:	0011      	movs	r1, r2
    556a:	0018      	movs	r0, r3
    556c:	4b0a      	ldr	r3, [pc, #40]	; (5598 <_usb_d_dev_wakeup+0x4c>)
    556e:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    5570:	2000      	movs	r0, #0
    5572:	4b0a      	ldr	r3, [pc, #40]	; (559c <_usb_d_dev_wakeup+0x50>)
    5574:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    5576:	4b0a      	ldr	r3, [pc, #40]	; (55a0 <_usb_d_dev_wakeup+0x54>)
    5578:	685b      	ldr	r3, [r3, #4]
    557a:	2100      	movs	r1, #0
    557c:	2002      	movs	r0, #2
    557e:	4798      	blx	r3
}
    5580:	46c0      	nop			; (mov r8, r8)
    5582:	46bd      	mov	sp, r7
    5584:	bd80      	pop	{r7, pc}
    5586:	46c0      	nop			; (mov r8, r8)
    5588:	41005000 	.word	0x41005000
    558c:	00004943 	.word	0x00004943
    5590:	00004995 	.word	0x00004995
    5594:	00000201 	.word	0x00000201
    5598:	00004961 	.word	0x00004961
    559c:	00004c51 	.word	0x00004c51
    55a0:	20000d7c 	.word	0x20000d7c

000055a4 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    55a4:	b580      	push	{r7, lr}
    55a6:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    55a8:	4b0f      	ldr	r3, [pc, #60]	; (55e8 <_usb_d_dev_reset+0x44>)
    55aa:	2200      	movs	r2, #0
    55ac:	2100      	movs	r1, #0
    55ae:	0018      	movs	r0, r3
    55b0:	4b0e      	ldr	r3, [pc, #56]	; (55ec <_usb_d_dev_reset+0x48>)
    55b2:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    55b4:	4b0c      	ldr	r3, [pc, #48]	; (55e8 <_usb_d_dev_reset+0x44>)
    55b6:	2108      	movs	r1, #8
    55b8:	0018      	movs	r0, r3
    55ba:	4b0d      	ldr	r3, [pc, #52]	; (55f0 <_usb_d_dev_reset+0x4c>)
    55bc:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    55be:	4b0a      	ldr	r3, [pc, #40]	; (55e8 <_usb_d_dev_reset+0x44>)
    55c0:	2170      	movs	r1, #112	; 0x70
    55c2:	0018      	movs	r0, r3
    55c4:	4b0b      	ldr	r3, [pc, #44]	; (55f4 <_usb_d_dev_reset+0x50>)
    55c6:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    55c8:	4a0b      	ldr	r2, [pc, #44]	; (55f8 <_usb_d_dev_reset+0x54>)
    55ca:	4b07      	ldr	r3, [pc, #28]	; (55e8 <_usb_d_dev_reset+0x44>)
    55cc:	0011      	movs	r1, r2
    55ce:	0018      	movs	r0, r3
    55d0:	4b0a      	ldr	r3, [pc, #40]	; (55fc <_usb_d_dev_reset+0x58>)
    55d2:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    55d4:	4b0a      	ldr	r3, [pc, #40]	; (5600 <_usb_d_dev_reset+0x5c>)
    55d6:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    55d8:	4b0a      	ldr	r3, [pc, #40]	; (5604 <_usb_d_dev_reset+0x60>)
    55da:	685b      	ldr	r3, [r3, #4]
    55dc:	2100      	movs	r1, #0
    55de:	2001      	movs	r0, #1
    55e0:	4798      	blx	r3
}
    55e2:	46c0      	nop			; (mov r8, r8)
    55e4:	46bd      	mov	sp, r7
    55e6:	bd80      	pop	{r7, pc}
    55e8:	41005000 	.word	0x41005000
    55ec:	000048d9 	.word	0x000048d9
    55f0:	00004943 	.word	0x00004943
    55f4:	00004995 	.word	0x00004995
    55f8:	00000201 	.word	0x00000201
    55fc:	00004961 	.word	0x00004961
    5600:	000063e5 	.word	0x000063e5
    5604:	20000d7c 	.word	0x20000d7c

00005608 <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    5608:	b580      	push	{r7, lr}
    560a:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    560c:	4a0c      	ldr	r2, [pc, #48]	; (5640 <_usb_d_dev_suspend+0x38>)
    560e:	4b0d      	ldr	r3, [pc, #52]	; (5644 <_usb_d_dev_suspend+0x3c>)
    5610:	0011      	movs	r1, r2
    5612:	0018      	movs	r0, r3
    5614:	4b0c      	ldr	r3, [pc, #48]	; (5648 <_usb_d_dev_suspend+0x40>)
    5616:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    5618:	4a09      	ldr	r2, [pc, #36]	; (5640 <_usb_d_dev_suspend+0x38>)
    561a:	4b0a      	ldr	r3, [pc, #40]	; (5644 <_usb_d_dev_suspend+0x3c>)
    561c:	0011      	movs	r1, r2
    561e:	0018      	movs	r0, r3
    5620:	4b0a      	ldr	r3, [pc, #40]	; (564c <_usb_d_dev_suspend+0x44>)
    5622:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    5624:	4b07      	ldr	r3, [pc, #28]	; (5644 <_usb_d_dev_suspend+0x3c>)
    5626:	2170      	movs	r1, #112	; 0x70
    5628:	0018      	movs	r0, r3
    562a:	4b09      	ldr	r3, [pc, #36]	; (5650 <_usb_d_dev_suspend+0x48>)
    562c:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    562e:	4b09      	ldr	r3, [pc, #36]	; (5654 <_usb_d_dev_suspend+0x4c>)
    5630:	685b      	ldr	r3, [r3, #4]
    5632:	2100      	movs	r1, #0
    5634:	2004      	movs	r0, #4
    5636:	4798      	blx	r3
}
    5638:	46c0      	nop			; (mov r8, r8)
    563a:	46bd      	mov	sp, r7
    563c:	bd80      	pop	{r7, pc}
    563e:	46c0      	nop			; (mov r8, r8)
    5640:	00000201 	.word	0x00000201
    5644:	41005000 	.word	0x41005000
    5648:	00004943 	.word	0x00004943
    564c:	00004995 	.word	0x00004995
    5650:	00004961 	.word	0x00004961
    5654:	20000d7c 	.word	0x20000d7c

00005658 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    5658:	b590      	push	{r4, r7, lr}
    565a:	b083      	sub	sp, #12
    565c:	af00      	add	r7, sp, #0
	bool     rc    = true;
    565e:	1dfb      	adds	r3, r7, #7
    5660:	2201      	movs	r2, #1
    5662:	701a      	strb	r2, [r3, #0]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    5664:	1d3c      	adds	r4, r7, #4
    5666:	4b26      	ldr	r3, [pc, #152]	; (5700 <_usb_d_dev_handle_nep+0xa8>)
    5668:	0018      	movs	r0, r3
    566a:	4b26      	ldr	r3, [pc, #152]	; (5704 <_usb_d_dev_handle_nep+0xac>)
    566c:	4798      	blx	r3
    566e:	0003      	movs	r3, r0
    5670:	8023      	strh	r3, [r4, #0]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    5672:	4b23      	ldr	r3, [pc, #140]	; (5700 <_usb_d_dev_handle_nep+0xa8>)
    5674:	0018      	movs	r0, r3
    5676:	4b24      	ldr	r3, [pc, #144]	; (5708 <_usb_d_dev_handle_nep+0xb0>)
    5678:	4798      	blx	r3
    567a:	0003      	movs	r3, r0
    567c:	0019      	movs	r1, r3
    567e:	1d3b      	adds	r3, r7, #4
    5680:	1d3a      	adds	r2, r7, #4
    5682:	8812      	ldrh	r2, [r2, #0]
    5684:	400a      	ands	r2, r1
    5686:	801a      	strh	r2, [r3, #0]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    5688:	1d3b      	adds	r3, r7, #4
    568a:	881b      	ldrh	r3, [r3, #0]
    568c:	2204      	movs	r2, #4
    568e:	4013      	ands	r3, r2
    5690:	d003      	beq.n	569a <_usb_d_dev_handle_nep+0x42>
		_usb_d_dev_sof();
    5692:	4b1e      	ldr	r3, [pc, #120]	; (570c <_usb_d_dev_handle_nep+0xb4>)
    5694:	4798      	blx	r3
		return true;
    5696:	2301      	movs	r3, #1
    5698:	e02d      	b.n	56f6 <_usb_d_dev_handle_nep+0x9e>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    569a:	1d3b      	adds	r3, r7, #4
    569c:	881a      	ldrh	r2, [r3, #0]
    569e:	2380      	movs	r3, #128	; 0x80
    56a0:	009b      	lsls	r3, r3, #2
    56a2:	4013      	ands	r3, r2
    56a4:	d002      	beq.n	56ac <_usb_d_dev_handle_nep+0x54>
		_usb_d_dev_lpmsusp();
    56a6:	4b1a      	ldr	r3, [pc, #104]	; (5710 <_usb_d_dev_handle_nep+0xb8>)
    56a8:	4798      	blx	r3
    56aa:	e022      	b.n	56f2 <_usb_d_dev_handle_nep+0x9a>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    56ac:	1d3b      	adds	r3, r7, #4
    56ae:	881b      	ldrh	r3, [r3, #0]
    56b0:	2280      	movs	r2, #128	; 0x80
    56b2:	4013      	ands	r3, r2
    56b4:	d002      	beq.n	56bc <_usb_d_dev_handle_nep+0x64>
		_usb_d_dev_ramerr();
    56b6:	4b17      	ldr	r3, [pc, #92]	; (5714 <_usb_d_dev_handle_nep+0xbc>)
    56b8:	4798      	blx	r3
    56ba:	e01a      	b.n	56f2 <_usb_d_dev_handle_nep+0x9a>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    56bc:	1d3b      	adds	r3, r7, #4
    56be:	881b      	ldrh	r3, [r3, #0]
    56c0:	2270      	movs	r2, #112	; 0x70
    56c2:	4013      	ands	r3, r2
    56c4:	d002      	beq.n	56cc <_usb_d_dev_handle_nep+0x74>
		_usb_d_dev_wakeup();
    56c6:	4b14      	ldr	r3, [pc, #80]	; (5718 <_usb_d_dev_handle_nep+0xc0>)
    56c8:	4798      	blx	r3
    56ca:	e012      	b.n	56f2 <_usb_d_dev_handle_nep+0x9a>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    56cc:	1d3b      	adds	r3, r7, #4
    56ce:	881b      	ldrh	r3, [r3, #0]
    56d0:	2208      	movs	r2, #8
    56d2:	4013      	ands	r3, r2
    56d4:	d002      	beq.n	56dc <_usb_d_dev_handle_nep+0x84>
		_usb_d_dev_reset();
    56d6:	4b11      	ldr	r3, [pc, #68]	; (571c <_usb_d_dev_handle_nep+0xc4>)
    56d8:	4798      	blx	r3
    56da:	e00a      	b.n	56f2 <_usb_d_dev_handle_nep+0x9a>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    56dc:	1d3b      	adds	r3, r7, #4
    56de:	881b      	ldrh	r3, [r3, #0]
    56e0:	2201      	movs	r2, #1
    56e2:	4013      	ands	r3, r2
    56e4:	d002      	beq.n	56ec <_usb_d_dev_handle_nep+0x94>
		_usb_d_dev_suspend();
    56e6:	4b0e      	ldr	r3, [pc, #56]	; (5720 <_usb_d_dev_handle_nep+0xc8>)
    56e8:	4798      	blx	r3
    56ea:	e002      	b.n	56f2 <_usb_d_dev_handle_nep+0x9a>
	} else {
		rc = false;
    56ec:	1dfb      	adds	r3, r7, #7
    56ee:	2200      	movs	r2, #0
    56f0:	701a      	strb	r2, [r3, #0]
	}
	return rc;
    56f2:	1dfb      	adds	r3, r7, #7
    56f4:	781b      	ldrb	r3, [r3, #0]
}
    56f6:	0018      	movs	r0, r3
    56f8:	46bd      	mov	sp, r7
    56fa:	b003      	add	sp, #12
    56fc:	bd90      	pop	{r4, r7, pc}
    56fe:	46c0      	nop			; (mov r8, r8)
    5700:	41005000 	.word	0x41005000
    5704:	0000492d 	.word	0x0000492d
    5708:	0000497f 	.word	0x0000497f
    570c:	00005449 	.word	0x00005449
    5710:	00005471 	.word	0x00005471
    5714:	00005521 	.word	0x00005521
    5718:	0000554d 	.word	0x0000554d
    571c:	000055a5 	.word	0x000055a5
    5720:	00005609 	.word	0x00005609

00005724 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    5724:	b590      	push	{r4, r7, lr}
    5726:	b089      	sub	sp, #36	; 0x24
    5728:	af00      	add	r7, sp, #0
    572a:	6078      	str	r0, [r7, #4]
    572c:	000a      	movs	r2, r1
    572e:	1cfb      	adds	r3, r7, #3
    5730:	701a      	strb	r2, [r3, #0]
	Usb *              hw          = USB;
    5732:	4b98      	ldr	r3, [pc, #608]	; (5994 <_usb_d_dev_in_next+0x270>)
    5734:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    5736:	687b      	ldr	r3, [r7, #4]
    5738:	7c9a      	ldrb	r2, [r3, #18]
    573a:	2317      	movs	r3, #23
    573c:	18fb      	adds	r3, r7, r3
    573e:	210f      	movs	r1, #15
    5740:	400a      	ands	r2, r1
    5742:	701a      	strb	r2, [r3, #0]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    5744:	2317      	movs	r3, #23
    5746:	18fb      	adds	r3, r7, r3
    5748:	781b      	ldrb	r3, [r3, #0]
    574a:	015a      	lsls	r2, r3, #5
    574c:	4b92      	ldr	r3, [pc, #584]	; (5998 <_usb_d_dev_in_next+0x274>)
    574e:	18d3      	adds	r3, r2, r3
    5750:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    5752:	1cfb      	adds	r3, r7, #3
    5754:	781b      	ldrb	r3, [r3, #0]
    5756:	2b00      	cmp	r3, #0
    5758:	d007      	beq.n	576a <_usb_d_dev_in_next+0x46>
    575a:	693b      	ldr	r3, [r7, #16]
    575c:	3310      	adds	r3, #16
    575e:	685b      	ldr	r3, [r3, #4]
    5760:	049b      	lsls	r3, r3, #18
    5762:	0c9b      	lsrs	r3, r3, #18
    5764:	b29b      	uxth	r3, r3
    5766:	001a      	movs	r2, r3
    5768:	e000      	b.n	576c <_usb_d_dev_in_next+0x48>
    576a:	2200      	movs	r2, #0
    576c:	230e      	movs	r3, #14
    576e:	18fb      	adds	r3, r7, r3
    5770:	801a      	strh	r2, [r3, #0]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    5772:	687b      	ldr	r3, [r7, #4]
    5774:	8a1b      	ldrh	r3, [r3, #16]
    5776:	4a89      	ldr	r2, [pc, #548]	; (599c <_usb_d_dev_in_next+0x278>)
    5778:	4293      	cmp	r3, r2
    577a:	d103      	bne.n	5784 <_usb_d_dev_in_next+0x60>
    577c:	687b      	ldr	r3, [r7, #4]
    577e:	8a1b      	ldrh	r3, [r3, #16]
    5780:	b21b      	sxth	r3, r3
    5782:	e004      	b.n	578e <_usb_d_dev_in_next+0x6a>
    5784:	687b      	ldr	r3, [r7, #4]
    5786:	8a1b      	ldrh	r3, [r3, #16]
    5788:	3b01      	subs	r3, #1
    578a:	b29b      	uxth	r3, r3
    578c:	b21b      	sxth	r3, r3
    578e:	220e      	movs	r2, #14
    5790:	18ba      	adds	r2, r7, r2
    5792:	2100      	movs	r1, #0
    5794:	5e52      	ldrsh	r2, [r2, r1]
    5796:	4013      	ands	r3, r2
    5798:	b21a      	sxth	r2, r3
    579a:	230c      	movs	r3, #12
    579c:	18fb      	adds	r3, r7, r3
    579e:	801a      	strh	r2, [r3, #0]
	uint8_t            inten    = 0;
    57a0:	231d      	movs	r3, #29
    57a2:	18fb      	adds	r3, r7, r3
    57a4:	2200      	movs	r2, #0
    57a6:	701a      	strb	r2, [r3, #0]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    57a8:	687b      	ldr	r3, [r7, #4]
    57aa:	7cdb      	ldrb	r3, [r3, #19]
    57ac:	2207      	movs	r2, #7
    57ae:	4013      	ands	r3, r2
    57b0:	b2da      	uxtb	r2, r3
    57b2:	230b      	movs	r3, #11
    57b4:	18fb      	adds	r3, r7, r3
    57b6:	3a01      	subs	r2, #1
    57b8:	4251      	negs	r1, r2
    57ba:	414a      	adcs	r2, r1
    57bc:	701a      	strb	r2, [r3, #0]

	if (isr) {
    57be:	1cfb      	adds	r3, r7, #3
    57c0:	781b      	ldrb	r3, [r3, #0]
    57c2:	2b00      	cmp	r3, #0
    57c4:	d006      	beq.n	57d4 <_usb_d_dev_in_next+0xb0>
		_usbd_ep_ack_io_cpt(epn, 1);
    57c6:	2317      	movs	r3, #23
    57c8:	18fb      	adds	r3, r7, r3
    57ca:	781b      	ldrb	r3, [r3, #0]
    57cc:	2101      	movs	r1, #1
    57ce:	0018      	movs	r0, r3
    57d0:	4b73      	ldr	r3, [pc, #460]	; (59a0 <_usb_d_dev_in_next+0x27c>)
    57d2:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    57d4:	687b      	ldr	r3, [r7, #4]
    57d6:	689a      	ldr	r2, [r3, #8]
    57d8:	230e      	movs	r3, #14
    57da:	18fb      	adds	r3, r7, r3
    57dc:	881b      	ldrh	r3, [r3, #0]
    57de:	18d2      	adds	r2, r2, r3
    57e0:	687b      	ldr	r3, [r7, #4]
    57e2:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    57e4:	687b      	ldr	r3, [r7, #4]
    57e6:	689a      	ldr	r2, [r3, #8]
    57e8:	687b      	ldr	r3, [r7, #4]
    57ea:	685b      	ldr	r3, [r3, #4]
    57ec:	429a      	cmp	r2, r3
    57ee:	d258      	bcs.n	58a2 <_usb_d_dev_in_next+0x17e>
		trans_next = ept->trans_size - ept->trans_count;
    57f0:	687b      	ldr	r3, [r7, #4]
    57f2:	685b      	ldr	r3, [r3, #4]
    57f4:	b299      	uxth	r1, r3
    57f6:	687b      	ldr	r3, [r7, #4]
    57f8:	689b      	ldr	r3, [r3, #8]
    57fa:	b29a      	uxth	r2, r3
    57fc:	231e      	movs	r3, #30
    57fe:	18fb      	adds	r3, r7, r3
    5800:	1a8a      	subs	r2, r1, r2
    5802:	801a      	strh	r2, [r3, #0]
		if (ept->flags.bits.use_cache) {
    5804:	687b      	ldr	r3, [r7, #4]
    5806:	7cdb      	ldrb	r3, [r3, #19]
    5808:	2220      	movs	r2, #32
    580a:	4013      	ands	r3, r2
    580c:	b2db      	uxtb	r3, r3
    580e:	2b00      	cmp	r3, #0
    5810:	d023      	beq.n	585a <_usb_d_dev_in_next+0x136>
			if (trans_next > ept->size) {
    5812:	687b      	ldr	r3, [r7, #4]
    5814:	8a1b      	ldrh	r3, [r3, #16]
    5816:	221e      	movs	r2, #30
    5818:	18ba      	adds	r2, r7, r2
    581a:	8812      	ldrh	r2, [r2, #0]
    581c:	429a      	cmp	r2, r3
    581e:	d904      	bls.n	582a <_usb_d_dev_in_next+0x106>
				trans_next = ept->size;
    5820:	231e      	movs	r3, #30
    5822:	18fb      	adds	r3, r7, r3
    5824:	687a      	ldr	r2, [r7, #4]
    5826:	8a12      	ldrh	r2, [r2, #16]
    5828:	801a      	strh	r2, [r3, #0]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    582a:	687b      	ldr	r3, [r7, #4]
    582c:	68d8      	ldr	r0, [r3, #12]
    582e:	687b      	ldr	r3, [r7, #4]
    5830:	681a      	ldr	r2, [r3, #0]
    5832:	687b      	ldr	r3, [r7, #4]
    5834:	689b      	ldr	r3, [r3, #8]
    5836:	18d1      	adds	r1, r2, r3
    5838:	231e      	movs	r3, #30
    583a:	18fb      	adds	r3, r7, r3
    583c:	881b      	ldrh	r3, [r3, #0]
    583e:	001a      	movs	r2, r3
    5840:	4b58      	ldr	r3, [pc, #352]	; (59a4 <_usb_d_dev_in_next+0x280>)
    5842:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    5844:	687b      	ldr	r3, [r7, #4]
    5846:	68db      	ldr	r3, [r3, #12]
    5848:	001a      	movs	r2, r3
    584a:	2317      	movs	r3, #23
    584c:	18fb      	adds	r3, r7, r3
    584e:	781b      	ldrb	r3, [r3, #0]
    5850:	2101      	movs	r1, #1
    5852:	0018      	movs	r0, r3
    5854:	4b54      	ldr	r3, [pc, #336]	; (59a8 <_usb_d_dev_in_next+0x284>)
    5856:	4798      	blx	r3
    5858:	e018      	b.n	588c <_usb_d_dev_in_next+0x168>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    585a:	231e      	movs	r3, #30
    585c:	18fb      	adds	r3, r7, r3
    585e:	881a      	ldrh	r2, [r3, #0]
    5860:	2380      	movs	r3, #128	; 0x80
    5862:	019b      	lsls	r3, r3, #6
    5864:	429a      	cmp	r2, r3
    5866:	d904      	bls.n	5872 <_usb_d_dev_in_next+0x14e>
				trans_next = USB_D_DEV_TRANS_MAX;
    5868:	231e      	movs	r3, #30
    586a:	18fb      	adds	r3, r7, r3
    586c:	2280      	movs	r2, #128	; 0x80
    586e:	0192      	lsls	r2, r2, #6
    5870:	801a      	strh	r2, [r3, #0]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    5872:	687b      	ldr	r3, [r7, #4]
    5874:	681a      	ldr	r2, [r3, #0]
    5876:	687b      	ldr	r3, [r7, #4]
    5878:	689b      	ldr	r3, [r3, #8]
    587a:	18d3      	adds	r3, r2, r3
    587c:	001a      	movs	r2, r3
    587e:	2317      	movs	r3, #23
    5880:	18fb      	adds	r3, r7, r3
    5882:	781b      	ldrb	r3, [r3, #0]
    5884:	2101      	movs	r1, #1
    5886:	0018      	movs	r0, r3
    5888:	4b47      	ldr	r3, [pc, #284]	; (59a8 <_usb_d_dev_in_next+0x284>)
    588a:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    588c:	231e      	movs	r3, #30
    588e:	18fb      	adds	r3, r7, r3
    5890:	881a      	ldrh	r2, [r3, #0]
    5892:	2317      	movs	r3, #23
    5894:	18fb      	adds	r3, r7, r3
    5896:	7818      	ldrb	r0, [r3, #0]
    5898:	2300      	movs	r3, #0
    589a:	2101      	movs	r1, #1
    589c:	4c43      	ldr	r4, [pc, #268]	; (59ac <_usb_d_dev_in_next+0x288>)
    589e:	47a0      	blx	r4
		goto _in_tx_exec;
    58a0:	e04b      	b.n	593a <_usb_d_dev_in_next+0x216>
	} else if (ept->flags.bits.need_zlp) {
    58a2:	687b      	ldr	r3, [r7, #4]
    58a4:	7cdb      	ldrb	r3, [r3, #19]
    58a6:	2210      	movs	r2, #16
    58a8:	4013      	ands	r3, r2
    58aa:	b2db      	uxtb	r3, r3
    58ac:	2b00      	cmp	r3, #0
    58ae:	d00d      	beq.n	58cc <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.need_zlp = 0;
    58b0:	687b      	ldr	r3, [r7, #4]
    58b2:	7cda      	ldrb	r2, [r3, #19]
    58b4:	2110      	movs	r1, #16
    58b6:	438a      	bics	r2, r1
    58b8:	74da      	strb	r2, [r3, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    58ba:	2317      	movs	r3, #23
    58bc:	18fb      	adds	r3, r7, r3
    58be:	7818      	ldrb	r0, [r3, #0]
    58c0:	2300      	movs	r3, #0
    58c2:	2200      	movs	r2, #0
    58c4:	2101      	movs	r1, #1
    58c6:	4c39      	ldr	r4, [pc, #228]	; (59ac <_usb_d_dev_in_next+0x288>)
    58c8:	47a0      	blx	r4
		goto _in_tx_exec;
    58ca:	e036      	b.n	593a <_usb_d_dev_in_next+0x216>
	}
	/* Complete. */
	if (is_ctrl) {
    58cc:	230b      	movs	r3, #11
    58ce:	18fb      	adds	r3, r7, r3
    58d0:	781b      	ldrb	r3, [r3, #0]
    58d2:	2b00      	cmp	r3, #0
    58d4:	d008      	beq.n	58e8 <_usb_d_dev_in_next+0x1c4>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    58d6:	2317      	movs	r3, #23
    58d8:	18fb      	adds	r3, r7, r3
    58da:	7819      	ldrb	r1, [r3, #0]
    58dc:	69bb      	ldr	r3, [r7, #24]
    58de:	224b      	movs	r2, #75	; 0x4b
    58e0:	0018      	movs	r0, r3
    58e2:	4b33      	ldr	r3, [pc, #204]	; (59b0 <_usb_d_dev_in_next+0x28c>)
    58e4:	4798      	blx	r3
    58e6:	e007      	b.n	58f8 <_usb_d_dev_in_next+0x1d4>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    58e8:	2317      	movs	r3, #23
    58ea:	18fb      	adds	r3, r7, r3
    58ec:	7819      	ldrb	r1, [r3, #0]
    58ee:	69bb      	ldr	r3, [r7, #24]
    58f0:	224a      	movs	r2, #74	; 0x4a
    58f2:	0018      	movs	r0, r3
    58f4:	4b2e      	ldr	r3, [pc, #184]	; (59b0 <_usb_d_dev_in_next+0x28c>)
    58f6:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    58f8:	687b      	ldr	r3, [r7, #4]
    58fa:	8a1b      	ldrh	r3, [r3, #16]
    58fc:	220c      	movs	r2, #12
    58fe:	18ba      	adds	r2, r7, r2
    5900:	8812      	ldrh	r2, [r2, #0]
    5902:	429a      	cmp	r2, r3
    5904:	d113      	bne.n	592e <_usb_d_dev_in_next+0x20a>
		ept->flags.bits.is_busy = 0;
    5906:	687b      	ldr	r3, [r7, #4]
    5908:	7cda      	ldrb	r2, [r3, #19]
    590a:	2140      	movs	r1, #64	; 0x40
    590c:	438a      	bics	r2, r1
    590e:	74da      	strb	r2, [r3, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    5910:	4b28      	ldr	r3, [pc, #160]	; (59b4 <_usb_d_dev_in_next+0x290>)
    5912:	68da      	ldr	r2, [r3, #12]
    5914:	687b      	ldr	r3, [r7, #4]
    5916:	7c98      	ldrb	r0, [r3, #18]
    5918:	687b      	ldr	r3, [r7, #4]
    591a:	689b      	ldr	r3, [r3, #8]
    591c:	0019      	movs	r1, r3
    591e:	4790      	blx	r2
    5920:	1e03      	subs	r3, r0, #0
    5922:	d132      	bne.n	598a <_usb_d_dev_in_next+0x266>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    5924:	687b      	ldr	r3, [r7, #4]
    5926:	7cda      	ldrb	r2, [r3, #19]
    5928:	2140      	movs	r1, #64	; 0x40
    592a:	430a      	orrs	r2, r1
    592c:	74da      	strb	r2, [r3, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    592e:	687b      	ldr	r3, [r7, #4]
    5930:	2100      	movs	r1, #0
    5932:	0018      	movs	r0, r3
    5934:	4b20      	ldr	r3, [pc, #128]	; (59b8 <_usb_d_dev_in_next+0x294>)
    5936:	4798      	blx	r3
	return;
    5938:	e028      	b.n	598c <_usb_d_dev_in_next+0x268>

_in_tx_exec:
	if (!isr) {
    593a:	1cfb      	adds	r3, r7, #3
    593c:	781b      	ldrb	r3, [r3, #0]
    593e:	2201      	movs	r2, #1
    5940:	4053      	eors	r3, r2
    5942:	b2db      	uxtb	r3, r3
    5944:	2b00      	cmp	r3, #0
    5946:	d017      	beq.n	5978 <_usb_d_dev_in_next+0x254>
		if (is_ctrl) {
    5948:	230b      	movs	r3, #11
    594a:	18fb      	adds	r3, r7, r3
    594c:	781b      	ldrb	r3, [r3, #0]
    594e:	2b00      	cmp	r3, #0
    5950:	d004      	beq.n	595c <_usb_d_dev_in_next+0x238>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    5952:	231d      	movs	r3, #29
    5954:	18fb      	adds	r3, r7, r3
    5956:	224e      	movs	r2, #78	; 0x4e
    5958:	701a      	strb	r2, [r3, #0]
    595a:	e003      	b.n	5964 <_usb_d_dev_in_next+0x240>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    595c:	231d      	movs	r3, #29
    595e:	18fb      	adds	r3, r7, r3
    5960:	224a      	movs	r2, #74	; 0x4a
    5962:	701a      	strb	r2, [r3, #0]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    5964:	231d      	movs	r3, #29
    5966:	18fb      	adds	r3, r7, r3
    5968:	781a      	ldrb	r2, [r3, #0]
    596a:	2317      	movs	r3, #23
    596c:	18fb      	adds	r3, r7, r3
    596e:	7819      	ldrb	r1, [r3, #0]
    5970:	69bb      	ldr	r3, [r7, #24]
    5972:	0018      	movs	r0, r3
    5974:	4b11      	ldr	r3, [pc, #68]	; (59bc <_usb_d_dev_in_next+0x298>)
    5976:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    5978:	2317      	movs	r3, #23
    597a:	18fb      	adds	r3, r7, r3
    597c:	781b      	ldrb	r3, [r3, #0]
    597e:	2201      	movs	r2, #1
    5980:	2101      	movs	r1, #1
    5982:	0018      	movs	r0, r3
    5984:	4b0e      	ldr	r3, [pc, #56]	; (59c0 <_usb_d_dev_in_next+0x29c>)
    5986:	4798      	blx	r3
    5988:	e000      	b.n	598c <_usb_d_dev_in_next+0x268>
			return;
    598a:	46c0      	nop			; (mov r8, r8)
}
    598c:	46bd      	mov	sp, r7
    598e:	b009      	add	sp, #36	; 0x24
    5990:	bd90      	pop	{r4, r7, pc}
    5992:	46c0      	nop			; (mov r8, r8)
    5994:	41005000 	.word	0x41005000
    5998:	20000ee4 	.word	0x20000ee4
    599c:	000003ff 	.word	0x000003ff
    59a0:	00004fd5 	.word	0x00004fd5
    59a4:	0000a581 	.word	0x0000a581
    59a8:	00005009 	.word	0x00005009
    59ac:	000051b5 	.word	0x000051b5
    59b0:	00004823 	.word	0x00004823
    59b4:	20000d7c 	.word	0x20000d7c
    59b8:	00006e89 	.word	0x00006e89
    59bc:	000047ed 	.word	0x000047ed
    59c0:	0000529d 	.word	0x0000529d

000059c4 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    59c4:	b590      	push	{r4, r7, lr}
    59c6:	b08b      	sub	sp, #44	; 0x2c
    59c8:	af00      	add	r7, sp, #0
    59ca:	6078      	str	r0, [r7, #4]
    59cc:	000a      	movs	r2, r1
    59ce:	1cfb      	adds	r3, r7, #3
    59d0:	701a      	strb	r2, [r3, #0]
	Usb *              hw         = USB;
    59d2:	4bc7      	ldr	r3, [pc, #796]	; (5cf0 <_usb_d_dev_out_next+0x32c>)
    59d4:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    59d6:	687b      	ldr	r3, [r7, #4]
    59d8:	7c9a      	ldrb	r2, [r3, #18]
    59da:	231f      	movs	r3, #31
    59dc:	18fb      	adds	r3, r7, r3
    59de:	210f      	movs	r1, #15
    59e0:	400a      	ands	r2, r1
    59e2:	701a      	strb	r2, [r3, #0]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    59e4:	231f      	movs	r3, #31
    59e6:	18fb      	adds	r3, r7, r3
    59e8:	781b      	ldrb	r3, [r3, #0]
    59ea:	015a      	lsls	r2, r3, #5
    59ec:	4bc1      	ldr	r3, [pc, #772]	; (5cf4 <_usb_d_dev_out_next+0x330>)
    59ee:	18d3      	adds	r3, r2, r3
    59f0:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    59f2:	1cfb      	adds	r3, r7, #3
    59f4:	781b      	ldrb	r3, [r3, #0]
    59f6:	2b00      	cmp	r3, #0
    59f8:	d006      	beq.n	5a08 <_usb_d_dev_out_next+0x44>
    59fa:	69bb      	ldr	r3, [r7, #24]
    59fc:	685b      	ldr	r3, [r3, #4]
    59fe:	011b      	lsls	r3, r3, #4
    5a00:	0c9b      	lsrs	r3, r3, #18
    5a02:	b29b      	uxth	r3, r3
    5a04:	001a      	movs	r2, r3
    5a06:	e000      	b.n	5a0a <_usb_d_dev_out_next+0x46>
    5a08:	2200      	movs	r2, #0
    5a0a:	2316      	movs	r3, #22
    5a0c:	18fb      	adds	r3, r7, r3
    5a0e:	801a      	strh	r2, [r3, #0]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    5a10:	1cfb      	adds	r3, r7, #3
    5a12:	781b      	ldrb	r3, [r3, #0]
    5a14:	2b00      	cmp	r3, #0
    5a16:	d006      	beq.n	5a26 <_usb_d_dev_out_next+0x62>
    5a18:	69bb      	ldr	r3, [r7, #24]
    5a1a:	685b      	ldr	r3, [r3, #4]
    5a1c:	049b      	lsls	r3, r3, #18
    5a1e:	0c9b      	lsrs	r3, r3, #18
    5a20:	b29b      	uxth	r3, r3
    5a22:	001a      	movs	r2, r3
    5a24:	e000      	b.n	5a28 <_usb_d_dev_out_next+0x64>
    5a26:	2200      	movs	r2, #0
    5a28:	2314      	movs	r3, #20
    5a2a:	18fb      	adds	r3, r7, r3
    5a2c:	801a      	strh	r2, [r3, #0]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    5a2e:	687b      	ldr	r3, [r7, #4]
    5a30:	8a1b      	ldrh	r3, [r3, #16]
    5a32:	4ab1      	ldr	r2, [pc, #708]	; (5cf8 <_usb_d_dev_out_next+0x334>)
    5a34:	4293      	cmp	r3, r2
    5a36:	d004      	beq.n	5a42 <_usb_d_dev_out_next+0x7e>
    5a38:	687b      	ldr	r3, [r7, #4]
    5a3a:	8a1b      	ldrh	r3, [r3, #16]
    5a3c:	3b01      	subs	r3, #1
    5a3e:	b29a      	uxth	r2, r3
    5a40:	e000      	b.n	5a44 <_usb_d_dev_out_next+0x80>
    5a42:	4aad      	ldr	r2, [pc, #692]	; (5cf8 <_usb_d_dev_out_next+0x334>)
    5a44:	2312      	movs	r3, #18
    5a46:	18fb      	adds	r3, r7, r3
    5a48:	801a      	strh	r2, [r3, #0]
	uint16_t           last_pkt   = last_trans & size_mask;
    5a4a:	2310      	movs	r3, #16
    5a4c:	18fb      	adds	r3, r7, r3
    5a4e:	2214      	movs	r2, #20
    5a50:	18ba      	adds	r2, r7, r2
    5a52:	2112      	movs	r1, #18
    5a54:	1879      	adds	r1, r7, r1
    5a56:	8812      	ldrh	r2, [r2, #0]
    5a58:	8809      	ldrh	r1, [r1, #0]
    5a5a:	400a      	ands	r2, r1
    5a5c:	801a      	strh	r2, [r3, #0]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    5a5e:	687b      	ldr	r3, [r7, #4]
    5a60:	7cdb      	ldrb	r3, [r3, #19]
    5a62:	2207      	movs	r2, #7
    5a64:	4013      	ands	r3, r2
    5a66:	b2da      	uxtb	r2, r3
    5a68:	230f      	movs	r3, #15
    5a6a:	18fb      	adds	r3, r7, r3
    5a6c:	3a01      	subs	r2, #1
    5a6e:	4251      	negs	r1, r2
    5a70:	414a      	adcs	r2, r1
    5a72:	701a      	strb	r2, [r3, #0]

	if (isr) {
    5a74:	1cfb      	adds	r3, r7, #3
    5a76:	781b      	ldrb	r3, [r3, #0]
    5a78:	2b00      	cmp	r3, #0
    5a7a:	d006      	beq.n	5a8a <_usb_d_dev_out_next+0xc6>
		_usbd_ep_ack_io_cpt(epn, 0);
    5a7c:	231f      	movs	r3, #31
    5a7e:	18fb      	adds	r3, r7, r3
    5a80:	781b      	ldrb	r3, [r3, #0]
    5a82:	2100      	movs	r1, #0
    5a84:	0018      	movs	r0, r3
    5a86:	4b9d      	ldr	r3, [pc, #628]	; (5cfc <_usb_d_dev_out_next+0x338>)
    5a88:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    5a8a:	687b      	ldr	r3, [r7, #4]
    5a8c:	7cdb      	ldrb	r3, [r3, #19]
    5a8e:	2220      	movs	r2, #32
    5a90:	4013      	ands	r3, r2
    5a92:	b2db      	uxtb	r3, r3
    5a94:	2b00      	cmp	r3, #0
    5a96:	d026      	beq.n	5ae6 <_usb_d_dev_out_next+0x122>
    5a98:	687b      	ldr	r3, [r7, #4]
    5a9a:	685b      	ldr	r3, [r3, #4]
    5a9c:	2b00      	cmp	r3, #0
    5a9e:	d022      	beq.n	5ae6 <_usb_d_dev_out_next+0x122>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    5aa0:	687b      	ldr	r3, [r7, #4]
    5aa2:	685b      	ldr	r3, [r3, #4]
    5aa4:	b299      	uxth	r1, r3
    5aa6:	687b      	ldr	r3, [r7, #4]
    5aa8:	689b      	ldr	r3, [r3, #8]
    5aaa:	b29a      	uxth	r2, r3
    5aac:	230c      	movs	r3, #12
    5aae:	18fb      	adds	r3, r7, r3
    5ab0:	1a8a      	subs	r2, r1, r2
    5ab2:	801a      	strh	r2, [r3, #0]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    5ab4:	687b      	ldr	r3, [r7, #4]
    5ab6:	681a      	ldr	r2, [r3, #0]
    5ab8:	687b      	ldr	r3, [r7, #4]
    5aba:	689b      	ldr	r3, [r3, #8]
    5abc:	18d0      	adds	r0, r2, r3
    5abe:	687b      	ldr	r3, [r7, #4]
    5ac0:	68d9      	ldr	r1, [r3, #12]
    5ac2:	230c      	movs	r3, #12
    5ac4:	18fa      	adds	r2, r7, r3
    5ac6:	2310      	movs	r3, #16
    5ac8:	18fb      	adds	r3, r7, r3
    5aca:	8812      	ldrh	r2, [r2, #0]
    5acc:	881b      	ldrh	r3, [r3, #0]
    5ace:	429a      	cmp	r2, r3
    5ad0:	d903      	bls.n	5ada <_usb_d_dev_out_next+0x116>
    5ad2:	2310      	movs	r3, #16
    5ad4:	18fb      	adds	r3, r7, r3
    5ad6:	881b      	ldrh	r3, [r3, #0]
    5ad8:	e002      	b.n	5ae0 <_usb_d_dev_out_next+0x11c>
    5ada:	230c      	movs	r3, #12
    5adc:	18fb      	adds	r3, r7, r3
    5ade:	881b      	ldrh	r3, [r3, #0]
    5ae0:	001a      	movs	r2, r3
    5ae2:	4b87      	ldr	r3, [pc, #540]	; (5d00 <_usb_d_dev_out_next+0x33c>)
    5ae4:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    5ae6:	687b      	ldr	r3, [r7, #4]
    5ae8:	685b      	ldr	r3, [r3, #4]
    5aea:	2b00      	cmp	r3, #0
    5aec:	d125      	bne.n	5b3a <_usb_d_dev_out_next+0x176>
    5aee:	687b      	ldr	r3, [r7, #4]
    5af0:	7cdb      	ldrb	r3, [r3, #19]
    5af2:	2210      	movs	r2, #16
    5af4:	4013      	ands	r3, r2
    5af6:	b2db      	uxtb	r3, r3
    5af8:	2b00      	cmp	r3, #0
    5afa:	d01e      	beq.n	5b3a <_usb_d_dev_out_next+0x176>
		ept->flags.bits.need_zlp  = 0;
    5afc:	687b      	ldr	r3, [r7, #4]
    5afe:	7cda      	ldrb	r2, [r3, #19]
    5b00:	2110      	movs	r1, #16
    5b02:	438a      	bics	r2, r1
    5b04:	74da      	strb	r2, [r3, #19]
		ept->flags.bits.use_cache = 1;
    5b06:	687b      	ldr	r3, [r7, #4]
    5b08:	7cda      	ldrb	r2, [r3, #19]
    5b0a:	2120      	movs	r1, #32
    5b0c:	430a      	orrs	r2, r1
    5b0e:	74da      	strb	r2, [r3, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    5b10:	687b      	ldr	r3, [r7, #4]
    5b12:	68db      	ldr	r3, [r3, #12]
    5b14:	001a      	movs	r2, r3
    5b16:	231f      	movs	r3, #31
    5b18:	18fb      	adds	r3, r7, r3
    5b1a:	781b      	ldrb	r3, [r3, #0]
    5b1c:	2100      	movs	r1, #0
    5b1e:	0018      	movs	r0, r3
    5b20:	4b78      	ldr	r3, [pc, #480]	; (5d04 <_usb_d_dev_out_next+0x340>)
    5b22:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    5b24:	687b      	ldr	r3, [r7, #4]
    5b26:	8a1b      	ldrh	r3, [r3, #16]
    5b28:	001a      	movs	r2, r3
    5b2a:	231f      	movs	r3, #31
    5b2c:	18fb      	adds	r3, r7, r3
    5b2e:	7818      	ldrb	r0, [r3, #0]
    5b30:	2300      	movs	r3, #0
    5b32:	2100      	movs	r1, #0
    5b34:	4c74      	ldr	r4, [pc, #464]	; (5d08 <_usb_d_dev_out_next+0x344>)
    5b36:	47a0      	blx	r4
		goto _out_rx_exec;
    5b38:	e0c2      	b.n	5cc0 <_usb_d_dev_out_next+0x2fc>
	} else if (isr && last_pkt < ept->size) {
    5b3a:	1cfb      	adds	r3, r7, #3
    5b3c:	781b      	ldrb	r3, [r3, #0]
    5b3e:	2b00      	cmp	r3, #0
    5b40:	d014      	beq.n	5b6c <_usb_d_dev_out_next+0x1a8>
    5b42:	687b      	ldr	r3, [r7, #4]
    5b44:	8a1b      	ldrh	r3, [r3, #16]
    5b46:	2210      	movs	r2, #16
    5b48:	18ba      	adds	r2, r7, r2
    5b4a:	8812      	ldrh	r2, [r2, #0]
    5b4c:	429a      	cmp	r2, r3
    5b4e:	d20d      	bcs.n	5b6c <_usb_d_dev_out_next+0x1a8>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    5b50:	687b      	ldr	r3, [r7, #4]
    5b52:	7cda      	ldrb	r2, [r3, #19]
    5b54:	2110      	movs	r1, #16
    5b56:	438a      	bics	r2, r1
    5b58:	74da      	strb	r2, [r3, #19]
		ept->trans_count += last_trans;
    5b5a:	687b      	ldr	r3, [r7, #4]
    5b5c:	689a      	ldr	r2, [r3, #8]
    5b5e:	2314      	movs	r3, #20
    5b60:	18fb      	adds	r3, r7, r3
    5b62:	881b      	ldrh	r3, [r3, #0]
    5b64:	18d2      	adds	r2, r2, r3
    5b66:	687b      	ldr	r3, [r7, #4]
    5b68:	609a      	str	r2, [r3, #8]
    5b6a:	e07e      	b.n	5c6a <_usb_d_dev_out_next+0x2a6>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    5b6c:	687b      	ldr	r3, [r7, #4]
    5b6e:	689a      	ldr	r2, [r3, #8]
    5b70:	2316      	movs	r3, #22
    5b72:	18fb      	adds	r3, r7, r3
    5b74:	881b      	ldrh	r3, [r3, #0]
    5b76:	18d2      	adds	r2, r2, r3
    5b78:	687b      	ldr	r3, [r7, #4]
    5b7a:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    5b7c:	687b      	ldr	r3, [r7, #4]
    5b7e:	689a      	ldr	r2, [r3, #8]
    5b80:	687b      	ldr	r3, [r7, #4]
    5b82:	685b      	ldr	r3, [r3, #4]
    5b84:	429a      	cmp	r2, r3
    5b86:	d300      	bcc.n	5b8a <_usb_d_dev_out_next+0x1c6>
    5b88:	e06f      	b.n	5c6a <_usb_d_dev_out_next+0x2a6>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    5b8a:	687b      	ldr	r3, [r7, #4]
    5b8c:	685b      	ldr	r3, [r3, #4]
    5b8e:	b299      	uxth	r1, r3
    5b90:	687b      	ldr	r3, [r7, #4]
    5b92:	689b      	ldr	r3, [r3, #8]
    5b94:	b29a      	uxth	r2, r3
    5b96:	2326      	movs	r3, #38	; 0x26
    5b98:	18fb      	adds	r3, r7, r3
    5b9a:	1a8a      	subs	r2, r1, r2
    5b9c:	801a      	strh	r2, [r3, #0]
			if (ept->flags.bits.use_cache) {
    5b9e:	687b      	ldr	r3, [r7, #4]
    5ba0:	7cdb      	ldrb	r3, [r3, #19]
    5ba2:	2220      	movs	r2, #32
    5ba4:	4013      	ands	r3, r2
    5ba6:	b2db      	uxtb	r3, r3
    5ba8:	2b00      	cmp	r3, #0
    5baa:	d016      	beq.n	5bda <_usb_d_dev_out_next+0x216>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    5bac:	687b      	ldr	r3, [r7, #4]
    5bae:	8a1b      	ldrh	r3, [r3, #16]
    5bb0:	2226      	movs	r2, #38	; 0x26
    5bb2:	18ba      	adds	r2, r7, r2
    5bb4:	8812      	ldrh	r2, [r2, #0]
    5bb6:	429a      	cmp	r2, r3
    5bb8:	d904      	bls.n	5bc4 <_usb_d_dev_out_next+0x200>
					trans_next = ept->size;
    5bba:	2326      	movs	r3, #38	; 0x26
    5bbc:	18fb      	adds	r3, r7, r3
    5bbe:	687a      	ldr	r2, [r7, #4]
    5bc0:	8a12      	ldrh	r2, [r2, #16]
    5bc2:	801a      	strh	r2, [r3, #0]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    5bc4:	687b      	ldr	r3, [r7, #4]
    5bc6:	68db      	ldr	r3, [r3, #12]
    5bc8:	001a      	movs	r2, r3
    5bca:	231f      	movs	r3, #31
    5bcc:	18fb      	adds	r3, r7, r3
    5bce:	781b      	ldrb	r3, [r3, #0]
    5bd0:	2100      	movs	r1, #0
    5bd2:	0018      	movs	r0, r3
    5bd4:	4b4b      	ldr	r3, [pc, #300]	; (5d04 <_usb_d_dev_out_next+0x340>)
    5bd6:	4798      	blx	r3
    5bd8:	e03c      	b.n	5c54 <_usb_d_dev_out_next+0x290>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    5bda:	687b      	ldr	r3, [r7, #4]
    5bdc:	8a1b      	ldrh	r3, [r3, #16]
    5bde:	2226      	movs	r2, #38	; 0x26
    5be0:	18ba      	adds	r2, r7, r2
    5be2:	8812      	ldrh	r2, [r2, #0]
    5be4:	429a      	cmp	r2, r3
    5be6:	d91c      	bls.n	5c22 <_usb_d_dev_out_next+0x25e>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    5be8:	2326      	movs	r3, #38	; 0x26
    5bea:	18fb      	adds	r3, r7, r3
    5bec:	881a      	ldrh	r2, [r3, #0]
    5bee:	2380      	movs	r3, #128	; 0x80
    5bf0:	019b      	lsls	r3, r3, #6
    5bf2:	429a      	cmp	r2, r3
    5bf4:	d905      	bls.n	5c02 <_usb_d_dev_out_next+0x23e>
						trans_next = USB_D_DEV_TRANS_MAX;
    5bf6:	2326      	movs	r3, #38	; 0x26
    5bf8:	18fb      	adds	r3, r7, r3
    5bfa:	2280      	movs	r2, #128	; 0x80
    5bfc:	0192      	lsls	r2, r2, #6
    5bfe:	801a      	strh	r2, [r3, #0]
    5c00:	e01b      	b.n	5c3a <_usb_d_dev_out_next+0x276>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    5c02:	2326      	movs	r3, #38	; 0x26
    5c04:	18fb      	adds	r3, r7, r3
    5c06:	2212      	movs	r2, #18
    5c08:	18ba      	adds	r2, r7, r2
    5c0a:	881b      	ldrh	r3, [r3, #0]
    5c0c:	8812      	ldrh	r2, [r2, #0]
    5c0e:	4013      	ands	r3, r2
    5c10:	b29a      	uxth	r2, r3
    5c12:	2326      	movs	r3, #38	; 0x26
    5c14:	18fb      	adds	r3, r7, r3
    5c16:	2126      	movs	r1, #38	; 0x26
    5c18:	1879      	adds	r1, r7, r1
    5c1a:	8809      	ldrh	r1, [r1, #0]
    5c1c:	1a8a      	subs	r2, r1, r2
    5c1e:	801a      	strh	r2, [r3, #0]
    5c20:	e00b      	b.n	5c3a <_usb_d_dev_out_next+0x276>
					}
				} else if (trans_next < ept->size) {
    5c22:	687b      	ldr	r3, [r7, #4]
    5c24:	8a1b      	ldrh	r3, [r3, #16]
    5c26:	2226      	movs	r2, #38	; 0x26
    5c28:	18ba      	adds	r2, r7, r2
    5c2a:	8812      	ldrh	r2, [r2, #0]
    5c2c:	429a      	cmp	r2, r3
    5c2e:	d204      	bcs.n	5c3a <_usb_d_dev_out_next+0x276>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    5c30:	687b      	ldr	r3, [r7, #4]
    5c32:	7cda      	ldrb	r2, [r3, #19]
    5c34:	2120      	movs	r1, #32
    5c36:	430a      	orrs	r2, r1
    5c38:	74da      	strb	r2, [r3, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    5c3a:	687b      	ldr	r3, [r7, #4]
    5c3c:	681a      	ldr	r2, [r3, #0]
    5c3e:	687b      	ldr	r3, [r7, #4]
    5c40:	689b      	ldr	r3, [r3, #8]
    5c42:	18d3      	adds	r3, r2, r3
    5c44:	001a      	movs	r2, r3
    5c46:	231f      	movs	r3, #31
    5c48:	18fb      	adds	r3, r7, r3
    5c4a:	781b      	ldrb	r3, [r3, #0]
    5c4c:	2100      	movs	r1, #0
    5c4e:	0018      	movs	r0, r3
    5c50:	4b2c      	ldr	r3, [pc, #176]	; (5d04 <_usb_d_dev_out_next+0x340>)
    5c52:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    5c54:	2326      	movs	r3, #38	; 0x26
    5c56:	18fb      	adds	r3, r7, r3
    5c58:	881a      	ldrh	r2, [r3, #0]
    5c5a:	231f      	movs	r3, #31
    5c5c:	18fb      	adds	r3, r7, r3
    5c5e:	7818      	ldrb	r0, [r3, #0]
    5c60:	2300      	movs	r3, #0
    5c62:	2100      	movs	r1, #0
    5c64:	4c28      	ldr	r4, [pc, #160]	; (5d08 <_usb_d_dev_out_next+0x344>)
    5c66:	47a0      	blx	r4
			goto _out_rx_exec;
    5c68:	e02a      	b.n	5cc0 <_usb_d_dev_out_next+0x2fc>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    5c6a:	230f      	movs	r3, #15
    5c6c:	18fb      	adds	r3, r7, r3
    5c6e:	781b      	ldrb	r3, [r3, #0]
    5c70:	2b00      	cmp	r3, #0
    5c72:	d008      	beq.n	5c86 <_usb_d_dev_out_next+0x2c2>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    5c74:	231f      	movs	r3, #31
    5c76:	18fb      	adds	r3, r7, r3
    5c78:	7819      	ldrb	r1, [r3, #0]
    5c7a:	6a3b      	ldr	r3, [r7, #32]
    5c7c:	222d      	movs	r2, #45	; 0x2d
    5c7e:	0018      	movs	r0, r3
    5c80:	4b22      	ldr	r3, [pc, #136]	; (5d0c <_usb_d_dev_out_next+0x348>)
    5c82:	4798      	blx	r3
    5c84:	e007      	b.n	5c96 <_usb_d_dev_out_next+0x2d2>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    5c86:	231f      	movs	r3, #31
    5c88:	18fb      	adds	r3, r7, r3
    5c8a:	7819      	ldrb	r1, [r3, #0]
    5c8c:	6a3b      	ldr	r3, [r7, #32]
    5c8e:	2225      	movs	r2, #37	; 0x25
    5c90:	0018      	movs	r0, r3
    5c92:	4b1e      	ldr	r3, [pc, #120]	; (5d0c <_usb_d_dev_out_next+0x348>)
    5c94:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    5c96:	231f      	movs	r3, #31
    5c98:	18fb      	adds	r3, r7, r3
    5c9a:	781b      	ldrb	r3, [r3, #0]
    5c9c:	2b00      	cmp	r3, #0
    5c9e:	d109      	bne.n	5cb4 <_usb_d_dev_out_next+0x2f0>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    5ca0:	687b      	ldr	r3, [r7, #4]
    5ca2:	68db      	ldr	r3, [r3, #12]
    5ca4:	001a      	movs	r2, r3
    5ca6:	231f      	movs	r3, #31
    5ca8:	18fb      	adds	r3, r7, r3
    5caa:	781b      	ldrb	r3, [r3, #0]
    5cac:	2100      	movs	r1, #0
    5cae:	0018      	movs	r0, r3
    5cb0:	4b14      	ldr	r3, [pc, #80]	; (5d04 <_usb_d_dev_out_next+0x340>)
    5cb2:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    5cb4:	687b      	ldr	r3, [r7, #4]
    5cb6:	2100      	movs	r1, #0
    5cb8:	0018      	movs	r0, r3
    5cba:	4b15      	ldr	r3, [pc, #84]	; (5d10 <_usb_d_dev_out_next+0x34c>)
    5cbc:	4798      	blx	r3
	return;
    5cbe:	e041      	b.n	5d44 <_usb_d_dev_out_next+0x380>

_out_rx_exec:
	if (!isr) {
    5cc0:	1cfb      	adds	r3, r7, #3
    5cc2:	781b      	ldrb	r3, [r3, #0]
    5cc4:	2201      	movs	r2, #1
    5cc6:	4053      	eors	r3, r2
    5cc8:	b2db      	uxtb	r3, r3
    5cca:	2b00      	cmp	r3, #0
    5ccc:	d032      	beq.n	5d34 <_usb_d_dev_out_next+0x370>
		if (is_ctrl) {
    5cce:	230f      	movs	r3, #15
    5cd0:	18fb      	adds	r3, r7, r3
    5cd2:	781b      	ldrb	r3, [r3, #0]
    5cd4:	2b00      	cmp	r3, #0
    5cd6:	d01f      	beq.n	5d18 <_usb_d_dev_out_next+0x354>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    5cd8:	231f      	movs	r3, #31
    5cda:	18fb      	adds	r3, r7, r3
    5cdc:	781b      	ldrb	r3, [r3, #0]
    5cde:	2101      	movs	r1, #1
    5ce0:	0018      	movs	r0, r3
    5ce2:	4b0c      	ldr	r3, [pc, #48]	; (5d14 <_usb_d_dev_out_next+0x350>)
    5ce4:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    5ce6:	2325      	movs	r3, #37	; 0x25
    5ce8:	18fb      	adds	r3, r7, r3
    5cea:	222d      	movs	r2, #45	; 0x2d
    5cec:	701a      	strb	r2, [r3, #0]
    5cee:	e017      	b.n	5d20 <_usb_d_dev_out_next+0x35c>
    5cf0:	41005000 	.word	0x41005000
    5cf4:	20000ee4 	.word	0x20000ee4
    5cf8:	000003ff 	.word	0x000003ff
    5cfc:	00004fd5 	.word	0x00004fd5
    5d00:	0000a581 	.word	0x0000a581
    5d04:	00005009 	.word	0x00005009
    5d08:	0000520d 	.word	0x0000520d
    5d0c:	00004823 	.word	0x00004823
    5d10:	00006e89 	.word	0x00006e89
    5d14:	00005265 	.word	0x00005265
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    5d18:	2325      	movs	r3, #37	; 0x25
    5d1a:	18fb      	adds	r3, r7, r3
    5d1c:	2225      	movs	r2, #37	; 0x25
    5d1e:	701a      	strb	r2, [r3, #0]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    5d20:	2325      	movs	r3, #37	; 0x25
    5d22:	18fb      	adds	r3, r7, r3
    5d24:	781a      	ldrb	r2, [r3, #0]
    5d26:	231f      	movs	r3, #31
    5d28:	18fb      	adds	r3, r7, r3
    5d2a:	7819      	ldrb	r1, [r3, #0]
    5d2c:	6a3b      	ldr	r3, [r7, #32]
    5d2e:	0018      	movs	r0, r3
    5d30:	4b06      	ldr	r3, [pc, #24]	; (5d4c <_usb_d_dev_out_next+0x388>)
    5d32:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    5d34:	231f      	movs	r3, #31
    5d36:	18fb      	adds	r3, r7, r3
    5d38:	781b      	ldrb	r3, [r3, #0]
    5d3a:	2201      	movs	r2, #1
    5d3c:	2100      	movs	r1, #0
    5d3e:	0018      	movs	r0, r3
    5d40:	4b03      	ldr	r3, [pc, #12]	; (5d50 <_usb_d_dev_out_next+0x38c>)
    5d42:	4798      	blx	r3
}
    5d44:	46bd      	mov	sp, r7
    5d46:	b00b      	add	sp, #44	; 0x2c
    5d48:	bd90      	pop	{r4, r7, pc}
    5d4a:	46c0      	nop			; (mov r8, r8)
    5d4c:	000047ed 	.word	0x000047ed
    5d50:	00005309 	.word	0x00005309

00005d54 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    5d54:	b580      	push	{r7, lr}
    5d56:	b084      	sub	sp, #16
    5d58:	af00      	add	r7, sp, #0
    5d5a:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    5d5c:	687b      	ldr	r3, [r7, #4]
    5d5e:	7c9a      	ldrb	r2, [r3, #18]
    5d60:	230f      	movs	r3, #15
    5d62:	18fb      	adds	r3, r7, r3
    5d64:	210f      	movs	r1, #15
    5d66:	400a      	ands	r2, r1
    5d68:	701a      	strb	r2, [r3, #0]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    5d6a:	687b      	ldr	r3, [r7, #4]
    5d6c:	7cdb      	ldrb	r3, [r3, #19]
    5d6e:	2207      	movs	r2, #7
    5d70:	4013      	ands	r3, r2
    5d72:	b2da      	uxtb	r2, r3
    5d74:	230e      	movs	r3, #14
    5d76:	18fb      	adds	r3, r7, r3
    5d78:	3a01      	subs	r2, #1
    5d7a:	4251      	negs	r1, r2
    5d7c:	414a      	adcs	r2, r1
    5d7e:	701a      	strb	r2, [r3, #0]

	if (!is_ctrl) {
    5d80:	230e      	movs	r3, #14
    5d82:	18fb      	adds	r3, r7, r3
    5d84:	781b      	ldrb	r3, [r3, #0]
    5d86:	2201      	movs	r2, #1
    5d88:	4053      	eors	r3, r2
    5d8a:	b2db      	uxtb	r3, r3
    5d8c:	2b00      	cmp	r3, #0
    5d8e:	d00c      	beq.n	5daa <_usb_d_dev_handle_setup+0x56>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    5d90:	230f      	movs	r3, #15
    5d92:	18fb      	adds	r3, r7, r3
    5d94:	781b      	ldrb	r3, [r3, #0]
    5d96:	0018      	movs	r0, r3
    5d98:	4b27      	ldr	r3, [pc, #156]	; (5e38 <_usb_d_dev_handle_setup+0xe4>)
    5d9a:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    5d9c:	230f      	movs	r3, #15
    5d9e:	18fb      	adds	r3, r7, r3
    5da0:	781b      	ldrb	r3, [r3, #0]
    5da2:	0018      	movs	r0, r3
    5da4:	4b25      	ldr	r3, [pc, #148]	; (5e3c <_usb_d_dev_handle_setup+0xe8>)
    5da6:	4798      	blx	r3
		return;
    5da8:	e042      	b.n	5e30 <_usb_d_dev_handle_setup+0xdc>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    5daa:	687b      	ldr	r3, [r7, #4]
    5dac:	7cdb      	ldrb	r3, [r3, #19]
    5dae:	2240      	movs	r2, #64	; 0x40
    5db0:	4013      	ands	r3, r2
    5db2:	b2db      	uxtb	r3, r3
    5db4:	2b00      	cmp	r3, #0
    5db6:	d014      	beq.n	5de2 <_usb_d_dev_handle_setup+0x8e>
		ept->flags.bits.is_busy = 0;
    5db8:	687b      	ldr	r3, [r7, #4]
    5dba:	7cda      	ldrb	r2, [r3, #19]
    5dbc:	2140      	movs	r1, #64	; 0x40
    5dbe:	438a      	bics	r2, r1
    5dc0:	74da      	strb	r2, [r3, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    5dc2:	230f      	movs	r3, #15
    5dc4:	18fb      	adds	r3, r7, r3
    5dc6:	781b      	ldrb	r3, [r3, #0]
    5dc8:	2200      	movs	r2, #0
    5dca:	2101      	movs	r1, #1
    5dcc:	0018      	movs	r0, r3
    5dce:	4b1c      	ldr	r3, [pc, #112]	; (5e40 <_usb_d_dev_handle_setup+0xec>)
    5dd0:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    5dd2:	230f      	movs	r3, #15
    5dd4:	18fb      	adds	r3, r7, r3
    5dd6:	781b      	ldrb	r3, [r3, #0]
    5dd8:	2200      	movs	r2, #0
    5dda:	2100      	movs	r1, #0
    5ddc:	0018      	movs	r0, r3
    5dde:	4b19      	ldr	r3, [pc, #100]	; (5e44 <_usb_d_dev_handle_setup+0xf0>)
    5de0:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    5de2:	687b      	ldr	r3, [r7, #4]
    5de4:	7cda      	ldrb	r2, [r3, #19]
    5de6:	2108      	movs	r1, #8
    5de8:	438a      	bics	r2, r1
    5dea:	74da      	strb	r2, [r3, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    5dec:	230f      	movs	r3, #15
    5dee:	18fb      	adds	r3, r7, r3
    5df0:	781b      	ldrb	r3, [r3, #0]
    5df2:	2100      	movs	r1, #0
    5df4:	0018      	movs	r0, r3
    5df6:	4b14      	ldr	r3, [pc, #80]	; (5e48 <_usb_d_dev_handle_setup+0xf4>)
    5df8:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    5dfa:	230f      	movs	r3, #15
    5dfc:	18fb      	adds	r3, r7, r3
    5dfe:	781b      	ldrb	r3, [r3, #0]
    5e00:	2101      	movs	r1, #1
    5e02:	0018      	movs	r0, r3
    5e04:	4b10      	ldr	r3, [pc, #64]	; (5e48 <_usb_d_dev_handle_setup+0xf4>)
    5e06:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    5e08:	230f      	movs	r3, #15
    5e0a:	18fb      	adds	r3, r7, r3
    5e0c:	781b      	ldrb	r3, [r3, #0]
    5e0e:	216f      	movs	r1, #111	; 0x6f
    5e10:	0018      	movs	r0, r3
    5e12:	4b0e      	ldr	r3, [pc, #56]	; (5e4c <_usb_d_dev_handle_setup+0xf8>)
    5e14:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    5e16:	230f      	movs	r3, #15
    5e18:	18fb      	adds	r3, r7, r3
    5e1a:	781b      	ldrb	r3, [r3, #0]
    5e1c:	216f      	movs	r1, #111	; 0x6f
    5e1e:	0018      	movs	r0, r3
    5e20:	4b0b      	ldr	r3, [pc, #44]	; (5e50 <_usb_d_dev_handle_setup+0xfc>)
    5e22:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    5e24:	4b0b      	ldr	r3, [pc, #44]	; (5e54 <_usb_d_dev_handle_setup+0x100>)
    5e26:	689b      	ldr	r3, [r3, #8]
    5e28:	687a      	ldr	r2, [r7, #4]
    5e2a:	7c92      	ldrb	r2, [r2, #18]
    5e2c:	0010      	movs	r0, r2
    5e2e:	4798      	blx	r3
}
    5e30:	46bd      	mov	sp, r7
    5e32:	b004      	add	sp, #16
    5e34:	bd80      	pop	{r7, pc}
    5e36:	46c0      	nop			; (mov r8, r8)
    5e38:	00004f45 	.word	0x00004f45
    5e3c:	00004ee5 	.word	0x00004ee5
    5e40:	0000529d 	.word	0x0000529d
    5e44:	00005309 	.word	0x00005309
    5e48:	00005265 	.word	0x00005265
    5e4c:	00004c89 	.word	0x00004c89
    5e50:	00004ce9 	.word	0x00004ce9
    5e54:	20000d7c 	.word	0x20000d7c

00005e58 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    5e58:	b590      	push	{r4, r7, lr}
    5e5a:	b085      	sub	sp, #20
    5e5c:	af00      	add	r7, sp, #0
    5e5e:	6078      	str	r0, [r7, #4]
    5e60:	000a      	movs	r2, r1
    5e62:	1cfb      	adds	r3, r7, #3
    5e64:	701a      	strb	r2, [r3, #0]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    5e66:	687b      	ldr	r3, [r7, #4]
    5e68:	7c9a      	ldrb	r2, [r3, #18]
    5e6a:	230f      	movs	r3, #15
    5e6c:	18fb      	adds	r3, r7, r3
    5e6e:	210f      	movs	r1, #15
    5e70:	400a      	ands	r2, r1
    5e72:	701a      	strb	r2, [r3, #0]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    5e74:	1cfb      	adds	r3, r7, #3
    5e76:	7819      	ldrb	r1, [r3, #0]
    5e78:	230f      	movs	r3, #15
    5e7a:	18fb      	adds	r3, r7, r3
    5e7c:	781b      	ldrb	r3, [r3, #0]
    5e7e:	2200      	movs	r2, #0
    5e80:	0018      	movs	r0, r3
    5e82:	4b07      	ldr	r3, [pc, #28]	; (5ea0 <_usb_d_dev_handle_stall+0x48>)
    5e84:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    5e86:	4b07      	ldr	r3, [pc, #28]	; (5ea4 <_usb_d_dev_handle_stall+0x4c>)
    5e88:	691c      	ldr	r4, [r3, #16]
    5e8a:	687b      	ldr	r3, [r7, #4]
    5e8c:	7c98      	ldrb	r0, [r3, #18]
    5e8e:	687b      	ldr	r3, [r7, #4]
    5e90:	689b      	ldr	r3, [r3, #8]
    5e92:	001a      	movs	r2, r3
    5e94:	2101      	movs	r1, #1
    5e96:	47a0      	blx	r4
}
    5e98:	46c0      	nop			; (mov r8, r8)
    5e9a:	46bd      	mov	sp, r7
    5e9c:	b005      	add	sp, #20
    5e9e:	bd90      	pop	{r4, r7, pc}
    5ea0:	00004e85 	.word	0x00004e85
    5ea4:	20000d7c 	.word	0x20000d7c

00005ea8 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    5ea8:	b580      	push	{r7, lr}
    5eaa:	b088      	sub	sp, #32
    5eac:	af00      	add	r7, sp, #0
    5eae:	6078      	str	r0, [r7, #4]
    5eb0:	000a      	movs	r2, r1
    5eb2:	1cfb      	adds	r3, r7, #3
    5eb4:	701a      	strb	r2, [r3, #0]
	Usb *              hw      = USB;
    5eb6:	4b78      	ldr	r3, [pc, #480]	; (6098 <_usb_d_dev_handle_trfail+0x1f0>)
    5eb8:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    5eba:	687b      	ldr	r3, [r7, #4]
    5ebc:	7c9a      	ldrb	r2, [r3, #18]
    5ebe:	231b      	movs	r3, #27
    5ec0:	18fb      	adds	r3, r7, r3
    5ec2:	210f      	movs	r1, #15
    5ec4:	400a      	ands	r2, r1
    5ec6:	701a      	strb	r2, [r3, #0]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    5ec8:	2310      	movs	r3, #16
    5eca:	18fb      	adds	r3, r7, r3
    5ecc:	4a73      	ldr	r2, [pc, #460]	; (609c <_usb_d_dev_handle_trfail+0x1f4>)
    5ece:	8812      	ldrh	r2, [r2, #0]
    5ed0:	801a      	strh	r2, [r3, #0]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    5ed2:	231b      	movs	r3, #27
    5ed4:	18fb      	adds	r3, r7, r3
    5ed6:	781b      	ldrb	r3, [r3, #0]
    5ed8:	015a      	lsls	r2, r3, #5
    5eda:	4b71      	ldr	r3, [pc, #452]	; (60a0 <_usb_d_dev_handle_trfail+0x1f8>)
    5edc:	18d3      	adds	r3, r2, r3
    5ede:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    5ee0:	1cfb      	adds	r3, r7, #3
    5ee2:	781b      	ldrb	r3, [r3, #0]
    5ee4:	2b00      	cmp	r3, #0
    5ee6:	d00a      	beq.n	5efe <_usb_d_dev_handle_trfail+0x56>
    5ee8:	231b      	movs	r3, #27
    5eea:	18fb      	adds	r3, r7, r3
    5eec:	781a      	ldrb	r2, [r3, #0]
    5eee:	69fb      	ldr	r3, [r7, #28]
    5ef0:	0011      	movs	r1, r2
    5ef2:	0018      	movs	r0, r3
    5ef4:	4b6b      	ldr	r3, [pc, #428]	; (60a4 <_usb_d_dev_handle_trfail+0x1fc>)
    5ef6:	4798      	blx	r3
    5ef8:	0003      	movs	r3, r0
    5efa:	001a      	movs	r2, r3
    5efc:	e009      	b.n	5f12 <_usb_d_dev_handle_trfail+0x6a>
    5efe:	231b      	movs	r3, #27
    5f00:	18fb      	adds	r3, r7, r3
    5f02:	781a      	ldrb	r2, [r3, #0]
    5f04:	69fb      	ldr	r3, [r7, #28]
    5f06:	0011      	movs	r1, r2
    5f08:	0018      	movs	r0, r3
    5f0a:	4b67      	ldr	r3, [pc, #412]	; (60a8 <_usb_d_dev_handle_trfail+0x200>)
    5f0c:	4798      	blx	r3
    5f0e:	0003      	movs	r3, r0
    5f10:	001a      	movs	r2, r3
    5f12:	2313      	movs	r3, #19
    5f14:	18fb      	adds	r3, r7, r3
    5f16:	701a      	strb	r2, [r3, #0]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    5f18:	687b      	ldr	r3, [r7, #4]
    5f1a:	7cdb      	ldrb	r3, [r3, #19]
    5f1c:	2207      	movs	r2, #7
    5f1e:	4013      	ands	r3, r2
    5f20:	b2da      	uxtb	r2, r3
    5f22:	2312      	movs	r3, #18
    5f24:	18fb      	adds	r3, r7, r3
    5f26:	3a01      	subs	r2, #1
    5f28:	4251      	negs	r1, r2
    5f2a:	414a      	adcs	r2, r1
    5f2c:	701a      	strb	r2, [r3, #0]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    5f2e:	1cfb      	adds	r3, r7, #3
    5f30:	781b      	ldrb	r3, [r3, #0]
    5f32:	011b      	lsls	r3, r3, #4
    5f34:	697a      	ldr	r2, [r7, #20]
    5f36:	18d3      	adds	r3, r2, r3
    5f38:	7a9b      	ldrb	r3, [r3, #10]
    5f3a:	b2da      	uxtb	r2, r3
    5f3c:	230c      	movs	r3, #12
    5f3e:	18fb      	adds	r3, r7, r3
    5f40:	701a      	strb	r2, [r3, #0]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    5f42:	2313      	movs	r3, #19
    5f44:	18fb      	adds	r3, r7, r3
    5f46:	781b      	ldrb	r3, [r3, #0]
    5f48:	2b02      	cmp	r3, #2
    5f4a:	d133      	bne.n	5fb4 <_usb_d_dev_handle_trfail+0x10c>
    5f4c:	230c      	movs	r3, #12
    5f4e:	18fb      	adds	r3, r7, r3
    5f50:	781b      	ldrb	r3, [r3, #0]
    5f52:	2201      	movs	r2, #1
    5f54:	4013      	ands	r3, r2
    5f56:	b2db      	uxtb	r3, r3
    5f58:	2b00      	cmp	r3, #0
    5f5a:	d02b      	beq.n	5fb4 <_usb_d_dev_handle_trfail+0x10c>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    5f5c:	1cfb      	adds	r3, r7, #3
    5f5e:	781b      	ldrb	r3, [r3, #0]
    5f60:	011b      	lsls	r3, r3, #4
    5f62:	697a      	ldr	r2, [r7, #20]
    5f64:	18d2      	adds	r2, r2, r3
    5f66:	7a93      	ldrb	r3, [r2, #10]
    5f68:	2101      	movs	r1, #1
    5f6a:	438b      	bics	r3, r1
    5f6c:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    5f6e:	1cfb      	adds	r3, r7, #3
    5f70:	781b      	ldrb	r3, [r3, #0]
    5f72:	2210      	movs	r2, #16
    5f74:	18ba      	adds	r2, r7, r2
    5f76:	5cd2      	ldrb	r2, [r2, r3]
    5f78:	231b      	movs	r3, #27
    5f7a:	18fb      	adds	r3, r7, r3
    5f7c:	7819      	ldrb	r1, [r3, #0]
    5f7e:	69fb      	ldr	r3, [r7, #28]
    5f80:	0018      	movs	r0, r3
    5f82:	4b4a      	ldr	r3, [pc, #296]	; (60ac <_usb_d_dev_handle_trfail+0x204>)
    5f84:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    5f86:	1cfb      	adds	r3, r7, #3
    5f88:	781b      	ldrb	r3, [r3, #0]
    5f8a:	2210      	movs	r2, #16
    5f8c:	18ba      	adds	r2, r7, r2
    5f8e:	5cd2      	ldrb	r2, [r2, r3]
    5f90:	231b      	movs	r3, #27
    5f92:	18fb      	adds	r3, r7, r3
    5f94:	7819      	ldrb	r1, [r3, #0]
    5f96:	69fb      	ldr	r3, [r7, #28]
    5f98:	0018      	movs	r0, r3
    5f9a:	4b45      	ldr	r3, [pc, #276]	; (60b0 <_usb_d_dev_handle_trfail+0x208>)
    5f9c:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    5f9e:	1cfb      	adds	r3, r7, #3
    5fa0:	781b      	ldrb	r3, [r3, #0]
    5fa2:	1e5a      	subs	r2, r3, #1
    5fa4:	4193      	sbcs	r3, r2
    5fa6:	b2d9      	uxtb	r1, r3
    5fa8:	687b      	ldr	r3, [r7, #4]
    5faa:	2204      	movs	r2, #4
    5fac:	0018      	movs	r0, r3
    5fae:	4b41      	ldr	r3, [pc, #260]	; (60b4 <_usb_d_dev_handle_trfail+0x20c>)
    5fb0:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    5fb2:	e06d      	b.n	6090 <_usb_d_dev_handle_trfail+0x1e8>
	} else if (st.bit.ERRORFLOW) {
    5fb4:	230c      	movs	r3, #12
    5fb6:	18fb      	adds	r3, r7, r3
    5fb8:	781b      	ldrb	r3, [r3, #0]
    5fba:	2202      	movs	r2, #2
    5fbc:	4013      	ands	r3, r2
    5fbe:	b2db      	uxtb	r3, r3
    5fc0:	2b00      	cmp	r3, #0
    5fc2:	d044      	beq.n	604e <_usb_d_dev_handle_trfail+0x1a6>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    5fc4:	1cfb      	adds	r3, r7, #3
    5fc6:	781b      	ldrb	r3, [r3, #0]
    5fc8:	011b      	lsls	r3, r3, #4
    5fca:	697a      	ldr	r2, [r7, #20]
    5fcc:	18d2      	adds	r2, r2, r3
    5fce:	7a93      	ldrb	r3, [r2, #10]
    5fd0:	2102      	movs	r1, #2
    5fd2:	438b      	bics	r3, r1
    5fd4:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    5fd6:	1cfb      	adds	r3, r7, #3
    5fd8:	781b      	ldrb	r3, [r3, #0]
    5fda:	2210      	movs	r2, #16
    5fdc:	18ba      	adds	r2, r7, r2
    5fde:	5cd2      	ldrb	r2, [r2, r3]
    5fe0:	231b      	movs	r3, #27
    5fe2:	18fb      	adds	r3, r7, r3
    5fe4:	7819      	ldrb	r1, [r3, #0]
    5fe6:	69fb      	ldr	r3, [r7, #28]
    5fe8:	0018      	movs	r0, r3
    5fea:	4b30      	ldr	r3, [pc, #192]	; (60ac <_usb_d_dev_handle_trfail+0x204>)
    5fec:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    5fee:	1cfb      	adds	r3, r7, #3
    5ff0:	781b      	ldrb	r3, [r3, #0]
    5ff2:	2210      	movs	r2, #16
    5ff4:	18ba      	adds	r2, r7, r2
    5ff6:	5cd2      	ldrb	r2, [r2, r3]
    5ff8:	231b      	movs	r3, #27
    5ffa:	18fb      	adds	r3, r7, r3
    5ffc:	7819      	ldrb	r1, [r3, #0]
    5ffe:	69fb      	ldr	r3, [r7, #28]
    6000:	0018      	movs	r0, r3
    6002:	4b2b      	ldr	r3, [pc, #172]	; (60b0 <_usb_d_dev_handle_trfail+0x208>)
    6004:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    6006:	2312      	movs	r3, #18
    6008:	18fb      	adds	r3, r7, r3
    600a:	781b      	ldrb	r3, [r3, #0]
    600c:	2b00      	cmp	r3, #0
    600e:	d03f      	beq.n	6090 <_usb_d_dev_handle_trfail+0x1e8>
    6010:	687b      	ldr	r3, [r7, #4]
    6012:	7cdb      	ldrb	r3, [r3, #19]
    6014:	2240      	movs	r2, #64	; 0x40
    6016:	4013      	ands	r3, r2
    6018:	b2db      	uxtb	r3, r3
    601a:	2b00      	cmp	r3, #0
    601c:	d038      	beq.n	6090 <_usb_d_dev_handle_trfail+0x1e8>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    601e:	687b      	ldr	r3, [r7, #4]
    6020:	7cdb      	ldrb	r3, [r3, #19]
    6022:	061b      	lsls	r3, r3, #24
    6024:	0fdb      	lsrs	r3, r3, #31
    6026:	b2db      	uxtb	r3, r3
    6028:	001a      	movs	r2, r3
    602a:	1cfb      	adds	r3, r7, #3
    602c:	781b      	ldrb	r3, [r3, #0]
    602e:	4293      	cmp	r3, r2
    6030:	d02e      	beq.n	6090 <_usb_d_dev_handle_trfail+0x1e8>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    6032:	687b      	ldr	r3, [r7, #4]
    6034:	7cdb      	ldrb	r3, [r3, #19]
    6036:	061b      	lsls	r3, r3, #24
    6038:	0fdb      	lsrs	r3, r3, #31
    603a:	b2db      	uxtb	r3, r3
    603c:	1e5a      	subs	r2, r3, #1
    603e:	4193      	sbcs	r3, r2
    6040:	b2d9      	uxtb	r1, r3
    6042:	687b      	ldr	r3, [r7, #4]
    6044:	2200      	movs	r2, #0
    6046:	0018      	movs	r0, r3
    6048:	4b1a      	ldr	r3, [pc, #104]	; (60b4 <_usb_d_dev_handle_trfail+0x20c>)
    604a:	4798      	blx	r3
}
    604c:	e020      	b.n	6090 <_usb_d_dev_handle_trfail+0x1e8>
		_usbd_ep_clear_bank_status(epn, bank_n);
    604e:	1cfb      	adds	r3, r7, #3
    6050:	781a      	ldrb	r2, [r3, #0]
    6052:	231b      	movs	r3, #27
    6054:	18fb      	adds	r3, r7, r3
    6056:	781b      	ldrb	r3, [r3, #0]
    6058:	0011      	movs	r1, r2
    605a:	0018      	movs	r0, r3
    605c:	4b16      	ldr	r3, [pc, #88]	; (60b8 <_usb_d_dev_handle_trfail+0x210>)
    605e:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    6060:	1cfb      	adds	r3, r7, #3
    6062:	781b      	ldrb	r3, [r3, #0]
    6064:	2210      	movs	r2, #16
    6066:	18ba      	adds	r2, r7, r2
    6068:	5cd2      	ldrb	r2, [r2, r3]
    606a:	231b      	movs	r3, #27
    606c:	18fb      	adds	r3, r7, r3
    606e:	7819      	ldrb	r1, [r3, #0]
    6070:	69fb      	ldr	r3, [r7, #28]
    6072:	0018      	movs	r0, r3
    6074:	4b0d      	ldr	r3, [pc, #52]	; (60ac <_usb_d_dev_handle_trfail+0x204>)
    6076:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    6078:	1cfb      	adds	r3, r7, #3
    607a:	781b      	ldrb	r3, [r3, #0]
    607c:	2210      	movs	r2, #16
    607e:	18ba      	adds	r2, r7, r2
    6080:	5cd2      	ldrb	r2, [r2, r3]
    6082:	231b      	movs	r3, #27
    6084:	18fb      	adds	r3, r7, r3
    6086:	7819      	ldrb	r1, [r3, #0]
    6088:	69fb      	ldr	r3, [r7, #28]
    608a:	0018      	movs	r0, r3
    608c:	4b08      	ldr	r3, [pc, #32]	; (60b0 <_usb_d_dev_handle_trfail+0x208>)
    608e:	4798      	blx	r3
}
    6090:	46c0      	nop			; (mov r8, r8)
    6092:	46bd      	mov	sp, r7
    6094:	b008      	add	sp, #32
    6096:	bd80      	pop	{r7, pc}
    6098:	41005000 	.word	0x41005000
    609c:	0000fd88 	.word	0x0000fd88
    60a0:	20000ee4 	.word	0x20000ee4
    60a4:	00004897 	.word	0x00004897
    60a8:	00004859 	.word	0x00004859
    60ac:	000046ff 	.word	0x000046ff
    60b0:	00004823 	.word	0x00004823
    60b4:	00006ed5 	.word	0x00006ed5
    60b8:	00005265 	.word	0x00005265

000060bc <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    60bc:	b580      	push	{r7, lr}
    60be:	b082      	sub	sp, #8
    60c0:	af00      	add	r7, sp, #0
    60c2:	6078      	str	r0, [r7, #4]
    60c4:	000a      	movs	r2, r1
    60c6:	1cfb      	adds	r3, r7, #3
    60c8:	701a      	strb	r2, [r3, #0]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    60ca:	1cfb      	adds	r3, r7, #3
    60cc:	781b      	ldrb	r3, [r3, #0]
    60ce:	2210      	movs	r2, #16
    60d0:	4013      	ands	r3, r2
    60d2:	d004      	beq.n	60de <_usb_d_dev_trans_setup_isr+0x22>
		_usb_d_dev_handle_setup(ept);
    60d4:	687b      	ldr	r3, [r7, #4]
    60d6:	0018      	movs	r0, r3
    60d8:	4b0d      	ldr	r3, [pc, #52]	; (6110 <_usb_d_dev_trans_setup_isr+0x54>)
    60da:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    60dc:	e014      	b.n	6108 <_usb_d_dev_trans_setup_isr+0x4c>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    60de:	1cfb      	adds	r3, r7, #3
    60e0:	781b      	ldrb	r3, [r3, #0]
    60e2:	2240      	movs	r2, #64	; 0x40
    60e4:	4013      	ands	r3, r2
    60e6:	d005      	beq.n	60f4 <_usb_d_dev_trans_setup_isr+0x38>
		_usb_d_dev_handle_stall(ept, 1);
    60e8:	687b      	ldr	r3, [r7, #4]
    60ea:	2101      	movs	r1, #1
    60ec:	0018      	movs	r0, r3
    60ee:	4b09      	ldr	r3, [pc, #36]	; (6114 <_usb_d_dev_trans_setup_isr+0x58>)
    60f0:	4798      	blx	r3
}
    60f2:	e009      	b.n	6108 <_usb_d_dev_trans_setup_isr+0x4c>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    60f4:	1cfb      	adds	r3, r7, #3
    60f6:	781b      	ldrb	r3, [r3, #0]
    60f8:	2220      	movs	r2, #32
    60fa:	4013      	ands	r3, r2
    60fc:	d004      	beq.n	6108 <_usb_d_dev_trans_setup_isr+0x4c>
		_usb_d_dev_handle_stall(ept, 0);
    60fe:	687b      	ldr	r3, [r7, #4]
    6100:	2100      	movs	r1, #0
    6102:	0018      	movs	r0, r3
    6104:	4b03      	ldr	r3, [pc, #12]	; (6114 <_usb_d_dev_trans_setup_isr+0x58>)
    6106:	4798      	blx	r3
}
    6108:	46c0      	nop			; (mov r8, r8)
    610a:	46bd      	mov	sp, r7
    610c:	b002      	add	sp, #8
    610e:	bd80      	pop	{r7, pc}
    6110:	00005d55 	.word	0x00005d55
    6114:	00005e59 	.word	0x00005e59

00006118 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    6118:	b580      	push	{r7, lr}
    611a:	b082      	sub	sp, #8
    611c:	af00      	add	r7, sp, #0
    611e:	6078      	str	r0, [r7, #4]
    6120:	000a      	movs	r2, r1
    6122:	1cfb      	adds	r3, r7, #3
    6124:	701a      	strb	r2, [r3, #0]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    6126:	1cfb      	adds	r3, r7, #3
    6128:	781b      	ldrb	r3, [r3, #0]
    612a:	2240      	movs	r2, #64	; 0x40
    612c:	4013      	ands	r3, r2
    612e:	d005      	beq.n	613c <_usb_d_dev_trans_in_isr+0x24>
		_usb_d_dev_handle_stall(ept, 1);
    6130:	687b      	ldr	r3, [r7, #4]
    6132:	2101      	movs	r1, #1
    6134:	0018      	movs	r0, r3
    6136:	4b1c      	ldr	r3, [pc, #112]	; (61a8 <_usb_d_dev_trans_in_isr+0x90>)
    6138:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    613a:	e030      	b.n	619e <_usb_d_dev_trans_in_isr+0x86>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    613c:	1cfb      	adds	r3, r7, #3
    613e:	781b      	ldrb	r3, [r3, #0]
    6140:	2208      	movs	r2, #8
    6142:	4013      	ands	r3, r2
    6144:	d005      	beq.n	6152 <_usb_d_dev_trans_in_isr+0x3a>
		_usb_d_dev_handle_trfail(ept, 1);
    6146:	687b      	ldr	r3, [r7, #4]
    6148:	2101      	movs	r1, #1
    614a:	0018      	movs	r0, r3
    614c:	4b17      	ldr	r3, [pc, #92]	; (61ac <_usb_d_dev_trans_in_isr+0x94>)
    614e:	4798      	blx	r3
}
    6150:	e025      	b.n	619e <_usb_d_dev_trans_in_isr+0x86>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    6152:	1cfb      	adds	r3, r7, #3
    6154:	781b      	ldrb	r3, [r3, #0]
    6156:	2202      	movs	r2, #2
    6158:	4013      	ands	r3, r2
    615a:	d005      	beq.n	6168 <_usb_d_dev_trans_in_isr+0x50>
		_usb_d_dev_in_next(ept, true);
    615c:	687b      	ldr	r3, [r7, #4]
    615e:	2101      	movs	r1, #1
    6160:	0018      	movs	r0, r3
    6162:	4b13      	ldr	r3, [pc, #76]	; (61b0 <_usb_d_dev_trans_in_isr+0x98>)
    6164:	4798      	blx	r3
}
    6166:	e01a      	b.n	619e <_usb_d_dev_trans_in_isr+0x86>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    6168:	687b      	ldr	r3, [r7, #4]
    616a:	7cdb      	ldrb	r3, [r3, #19]
    616c:	2207      	movs	r2, #7
    616e:	4013      	ands	r3, r2
    6170:	b2db      	uxtb	r3, r3
    6172:	2b01      	cmp	r3, #1
    6174:	d113      	bne.n	619e <_usb_d_dev_trans_in_isr+0x86>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    6176:	1cfb      	adds	r3, r7, #3
    6178:	781b      	ldrb	r3, [r3, #0]
    617a:	2204      	movs	r2, #4
    617c:	4013      	ands	r3, r2
    617e:	d005      	beq.n	618c <_usb_d_dev_trans_in_isr+0x74>
			_usb_d_dev_handle_trfail(ept, 0);
    6180:	687b      	ldr	r3, [r7, #4]
    6182:	2100      	movs	r1, #0
    6184:	0018      	movs	r0, r3
    6186:	4b09      	ldr	r3, [pc, #36]	; (61ac <_usb_d_dev_trans_in_isr+0x94>)
    6188:	4798      	blx	r3
}
    618a:	e008      	b.n	619e <_usb_d_dev_trans_in_isr+0x86>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    618c:	1cfb      	adds	r3, r7, #3
    618e:	781b      	ldrb	r3, [r3, #0]
    6190:	2210      	movs	r2, #16
    6192:	4013      	ands	r3, r2
    6194:	d003      	beq.n	619e <_usb_d_dev_trans_in_isr+0x86>
			_usb_d_dev_handle_setup(ept);
    6196:	687b      	ldr	r3, [r7, #4]
    6198:	0018      	movs	r0, r3
    619a:	4b06      	ldr	r3, [pc, #24]	; (61b4 <_usb_d_dev_trans_in_isr+0x9c>)
    619c:	4798      	blx	r3
}
    619e:	46c0      	nop			; (mov r8, r8)
    61a0:	46bd      	mov	sp, r7
    61a2:	b002      	add	sp, #8
    61a4:	bd80      	pop	{r7, pc}
    61a6:	46c0      	nop			; (mov r8, r8)
    61a8:	00005e59 	.word	0x00005e59
    61ac:	00005ea9 	.word	0x00005ea9
    61b0:	00005725 	.word	0x00005725
    61b4:	00005d55 	.word	0x00005d55

000061b8 <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    61b8:	b580      	push	{r7, lr}
    61ba:	b082      	sub	sp, #8
    61bc:	af00      	add	r7, sp, #0
    61be:	6078      	str	r0, [r7, #4]
    61c0:	000a      	movs	r2, r1
    61c2:	1cfb      	adds	r3, r7, #3
    61c4:	701a      	strb	r2, [r3, #0]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    61c6:	1cfb      	adds	r3, r7, #3
    61c8:	781b      	ldrb	r3, [r3, #0]
    61ca:	2220      	movs	r2, #32
    61cc:	4013      	ands	r3, r2
    61ce:	d005      	beq.n	61dc <_usb_d_dev_trans_out_isr+0x24>
		_usb_d_dev_handle_stall(ept, 0);
    61d0:	687b      	ldr	r3, [r7, #4]
    61d2:	2100      	movs	r1, #0
    61d4:	0018      	movs	r0, r3
    61d6:	4b1c      	ldr	r3, [pc, #112]	; (6248 <_usb_d_dev_trans_out_isr+0x90>)
    61d8:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    61da:	e030      	b.n	623e <_usb_d_dev_trans_out_isr+0x86>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    61dc:	1cfb      	adds	r3, r7, #3
    61de:	781b      	ldrb	r3, [r3, #0]
    61e0:	2204      	movs	r2, #4
    61e2:	4013      	ands	r3, r2
    61e4:	d005      	beq.n	61f2 <_usb_d_dev_trans_out_isr+0x3a>
		_usb_d_dev_handle_trfail(ept, 0);
    61e6:	687b      	ldr	r3, [r7, #4]
    61e8:	2100      	movs	r1, #0
    61ea:	0018      	movs	r0, r3
    61ec:	4b17      	ldr	r3, [pc, #92]	; (624c <_usb_d_dev_trans_out_isr+0x94>)
    61ee:	4798      	blx	r3
}
    61f0:	e025      	b.n	623e <_usb_d_dev_trans_out_isr+0x86>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    61f2:	1cfb      	adds	r3, r7, #3
    61f4:	781b      	ldrb	r3, [r3, #0]
    61f6:	2201      	movs	r2, #1
    61f8:	4013      	ands	r3, r2
    61fa:	d005      	beq.n	6208 <_usb_d_dev_trans_out_isr+0x50>
		_usb_d_dev_out_next(ept, true);
    61fc:	687b      	ldr	r3, [r7, #4]
    61fe:	2101      	movs	r1, #1
    6200:	0018      	movs	r0, r3
    6202:	4b13      	ldr	r3, [pc, #76]	; (6250 <_usb_d_dev_trans_out_isr+0x98>)
    6204:	4798      	blx	r3
}
    6206:	e01a      	b.n	623e <_usb_d_dev_trans_out_isr+0x86>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    6208:	687b      	ldr	r3, [r7, #4]
    620a:	7cdb      	ldrb	r3, [r3, #19]
    620c:	2207      	movs	r2, #7
    620e:	4013      	ands	r3, r2
    6210:	b2db      	uxtb	r3, r3
    6212:	2b01      	cmp	r3, #1
    6214:	d113      	bne.n	623e <_usb_d_dev_trans_out_isr+0x86>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    6216:	1cfb      	adds	r3, r7, #3
    6218:	781b      	ldrb	r3, [r3, #0]
    621a:	2208      	movs	r2, #8
    621c:	4013      	ands	r3, r2
    621e:	d005      	beq.n	622c <_usb_d_dev_trans_out_isr+0x74>
			_usb_d_dev_handle_trfail(ept, 1);
    6220:	687b      	ldr	r3, [r7, #4]
    6222:	2101      	movs	r1, #1
    6224:	0018      	movs	r0, r3
    6226:	4b09      	ldr	r3, [pc, #36]	; (624c <_usb_d_dev_trans_out_isr+0x94>)
    6228:	4798      	blx	r3
}
    622a:	e008      	b.n	623e <_usb_d_dev_trans_out_isr+0x86>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    622c:	1cfb      	adds	r3, r7, #3
    622e:	781b      	ldrb	r3, [r3, #0]
    6230:	2210      	movs	r2, #16
    6232:	4013      	ands	r3, r2
    6234:	d003      	beq.n	623e <_usb_d_dev_trans_out_isr+0x86>
			_usb_d_dev_handle_setup(ept);
    6236:	687b      	ldr	r3, [r7, #4]
    6238:	0018      	movs	r0, r3
    623a:	4b06      	ldr	r3, [pc, #24]	; (6254 <_usb_d_dev_trans_out_isr+0x9c>)
    623c:	4798      	blx	r3
}
    623e:	46c0      	nop			; (mov r8, r8)
    6240:	46bd      	mov	sp, r7
    6242:	b002      	add	sp, #8
    6244:	bd80      	pop	{r7, pc}
    6246:	46c0      	nop			; (mov r8, r8)
    6248:	00005e59 	.word	0x00005e59
    624c:	00005ea9 	.word	0x00005ea9
    6250:	000059c5 	.word	0x000059c5
    6254:	00005d55 	.word	0x00005d55

00006258 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    6258:	b580      	push	{r7, lr}
    625a:	b084      	sub	sp, #16
    625c:	af00      	add	r7, sp, #0
    625e:	6078      	str	r0, [r7, #4]
    6260:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    6262:	4b37      	ldr	r3, [pc, #220]	; (6340 <_usb_d_dev_handle_eps+0xe8>)
    6264:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    6266:	683b      	ldr	r3, [r7, #0]
    6268:	7c9a      	ldrb	r2, [r3, #18]
    626a:	230b      	movs	r3, #11
    626c:	18fb      	adds	r3, r7, r3
    626e:	210f      	movs	r1, #15
    6270:	400a      	ands	r2, r1
    6272:	701a      	strb	r2, [r3, #0]

	if (!(epint & (1u << epn))) {
    6274:	230b      	movs	r3, #11
    6276:	18fb      	adds	r3, r7, r3
    6278:	781b      	ldrb	r3, [r3, #0]
    627a:	2201      	movs	r2, #1
    627c:	409a      	lsls	r2, r3
    627e:	0013      	movs	r3, r2
    6280:	687a      	ldr	r2, [r7, #4]
    6282:	4013      	ands	r3, r2
    6284:	d057      	beq.n	6336 <_usb_d_dev_handle_eps+0xde>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    6286:	230b      	movs	r3, #11
    6288:	18fb      	adds	r3, r7, r3
    628a:	781a      	ldrb	r2, [r3, #0]
    628c:	230a      	movs	r3, #10
    628e:	18fb      	adds	r3, r7, r3
    6290:	68f9      	ldr	r1, [r7, #12]
    6292:	3208      	adds	r2, #8
    6294:	0152      	lsls	r2, r2, #5
    6296:	188a      	adds	r2, r1, r2
    6298:	3207      	adds	r2, #7
    629a:	7812      	ldrb	r2, [r2, #0]
    629c:	701a      	strb	r2, [r3, #0]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    629e:	230b      	movs	r3, #11
    62a0:	18fb      	adds	r3, r7, r3
    62a2:	7819      	ldrb	r1, [r3, #0]
    62a4:	2309      	movs	r3, #9
    62a6:	18fb      	adds	r3, r7, r3
    62a8:	68f8      	ldr	r0, [r7, #12]
    62aa:	220a      	movs	r2, #10
    62ac:	32ff      	adds	r2, #255	; 0xff
    62ae:	0149      	lsls	r1, r1, #5
    62b0:	1841      	adds	r1, r0, r1
    62b2:	188a      	adds	r2, r1, r2
    62b4:	7812      	ldrb	r2, [r2, #0]
    62b6:	701a      	strb	r2, [r3, #0]
	flags &= mask;
    62b8:	230a      	movs	r3, #10
    62ba:	18fb      	adds	r3, r7, r3
    62bc:	220a      	movs	r2, #10
    62be:	18ba      	adds	r2, r7, r2
    62c0:	2109      	movs	r1, #9
    62c2:	1879      	adds	r1, r7, r1
    62c4:	7812      	ldrb	r2, [r2, #0]
    62c6:	7809      	ldrb	r1, [r1, #0]
    62c8:	400a      	ands	r2, r1
    62ca:	701a      	strb	r2, [r3, #0]
	if (flags) {
    62cc:	230a      	movs	r3, #10
    62ce:	18fb      	adds	r3, r7, r3
    62d0:	781b      	ldrb	r3, [r3, #0]
    62d2:	2b00      	cmp	r3, #0
    62d4:	d030      	beq.n	6338 <_usb_d_dev_handle_eps+0xe0>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    62d6:	683b      	ldr	r3, [r7, #0]
    62d8:	7cdb      	ldrb	r3, [r3, #19]
    62da:	2207      	movs	r2, #7
    62dc:	4013      	ands	r3, r2
    62de:	b2db      	uxtb	r3, r3
    62e0:	2b01      	cmp	r3, #1
    62e2:	d10f      	bne.n	6304 <_usb_d_dev_handle_eps+0xac>
    62e4:	683b      	ldr	r3, [r7, #0]
    62e6:	7cdb      	ldrb	r3, [r3, #19]
    62e8:	2240      	movs	r2, #64	; 0x40
    62ea:	4013      	ands	r3, r2
    62ec:	b2db      	uxtb	r3, r3
    62ee:	2b00      	cmp	r3, #0
    62f0:	d108      	bne.n	6304 <_usb_d_dev_handle_eps+0xac>
			_usb_d_dev_trans_setup_isr(ept, flags);
    62f2:	230a      	movs	r3, #10
    62f4:	18fb      	adds	r3, r7, r3
    62f6:	781a      	ldrb	r2, [r3, #0]
    62f8:	683b      	ldr	r3, [r7, #0]
    62fa:	0011      	movs	r1, r2
    62fc:	0018      	movs	r0, r3
    62fe:	4b11      	ldr	r3, [pc, #68]	; (6344 <_usb_d_dev_handle_eps+0xec>)
    6300:	4798      	blx	r3
    6302:	e019      	b.n	6338 <_usb_d_dev_handle_eps+0xe0>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    6304:	683b      	ldr	r3, [r7, #0]
    6306:	7cdb      	ldrb	r3, [r3, #19]
    6308:	227f      	movs	r2, #127	; 0x7f
    630a:	4393      	bics	r3, r2
    630c:	b2db      	uxtb	r3, r3
    630e:	2b00      	cmp	r3, #0
    6310:	d008      	beq.n	6324 <_usb_d_dev_handle_eps+0xcc>
			_usb_d_dev_trans_in_isr(ept, flags);
    6312:	230a      	movs	r3, #10
    6314:	18fb      	adds	r3, r7, r3
    6316:	781a      	ldrb	r2, [r3, #0]
    6318:	683b      	ldr	r3, [r7, #0]
    631a:	0011      	movs	r1, r2
    631c:	0018      	movs	r0, r3
    631e:	4b0a      	ldr	r3, [pc, #40]	; (6348 <_usb_d_dev_handle_eps+0xf0>)
    6320:	4798      	blx	r3
    6322:	e009      	b.n	6338 <_usb_d_dev_handle_eps+0xe0>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    6324:	230a      	movs	r3, #10
    6326:	18fb      	adds	r3, r7, r3
    6328:	781a      	ldrb	r2, [r3, #0]
    632a:	683b      	ldr	r3, [r7, #0]
    632c:	0011      	movs	r1, r2
    632e:	0018      	movs	r0, r3
    6330:	4b06      	ldr	r3, [pc, #24]	; (634c <_usb_d_dev_handle_eps+0xf4>)
    6332:	4798      	blx	r3
    6334:	e000      	b.n	6338 <_usb_d_dev_handle_eps+0xe0>
		return;
    6336:	46c0      	nop			; (mov r8, r8)
		}
	}
}
    6338:	46bd      	mov	sp, r7
    633a:	b004      	add	sp, #16
    633c:	bd80      	pop	{r7, pc}
    633e:	46c0      	nop			; (mov r8, r8)
    6340:	41005000 	.word	0x41005000
    6344:	000060bd 	.word	0x000060bd
    6348:	00006119 	.word	0x00006119
    634c:	000061b9 	.word	0x000061b9

00006350 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    6350:	b580      	push	{r7, lr}
    6352:	b084      	sub	sp, #16
    6354:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    6356:	4b1f      	ldr	r3, [pc, #124]	; (63d4 <_usb_d_dev_handler+0x84>)
    6358:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    635a:	1dbb      	adds	r3, r7, #6
    635c:	68ba      	ldr	r2, [r7, #8]
    635e:	8c12      	ldrh	r2, [r2, #32]
    6360:	801a      	strh	r2, [r3, #0]
	if (0 == epint) {
    6362:	1dbb      	adds	r3, r7, #6
    6364:	881b      	ldrh	r3, [r3, #0]
    6366:	2b00      	cmp	r3, #0
    6368:	d103      	bne.n	6372 <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    636a:	4b1b      	ldr	r3, [pc, #108]	; (63d8 <_usb_d_dev_handler+0x88>)
    636c:	4798      	blx	r3
    636e:	1e03      	subs	r3, r0, #0
    6370:	d12b      	bne.n	63ca <_usb_d_dev_handler+0x7a>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    6372:	230f      	movs	r3, #15
    6374:	18fb      	adds	r3, r7, r3
    6376:	2200      	movs	r2, #0
    6378:	701a      	strb	r2, [r3, #0]
    637a:	e020      	b.n	63be <_usb_d_dev_handler+0x6e>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    637c:	230f      	movs	r3, #15
    637e:	18fb      	adds	r3, r7, r3
    6380:	781a      	ldrb	r2, [r3, #0]
    6382:	0013      	movs	r3, r2
    6384:	009b      	lsls	r3, r3, #2
    6386:	189b      	adds	r3, r3, r2
    6388:	009b      	lsls	r3, r3, #2
    638a:	3310      	adds	r3, #16
    638c:	001a      	movs	r2, r3
    638e:	4b13      	ldr	r3, [pc, #76]	; (63dc <_usb_d_dev_handler+0x8c>)
    6390:	18d3      	adds	r3, r2, r3
    6392:	3304      	adds	r3, #4
    6394:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    6396:	683b      	ldr	r3, [r7, #0]
    6398:	7c9b      	ldrb	r3, [r3, #18]
    639a:	2bff      	cmp	r3, #255	; 0xff
    639c:	d007      	beq.n	63ae <_usb_d_dev_handler+0x5e>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    639e:	1dbb      	adds	r3, r7, #6
    63a0:	881b      	ldrh	r3, [r3, #0]
    63a2:	683a      	ldr	r2, [r7, #0]
    63a4:	0011      	movs	r1, r2
    63a6:	0018      	movs	r0, r3
    63a8:	4b0d      	ldr	r3, [pc, #52]	; (63e0 <_usb_d_dev_handler+0x90>)
    63aa:	4798      	blx	r3
    63ac:	e000      	b.n	63b0 <_usb_d_dev_handler+0x60>
			continue;
    63ae:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < USB_D_N_EP; i++) {
    63b0:	230f      	movs	r3, #15
    63b2:	18fb      	adds	r3, r7, r3
    63b4:	781a      	ldrb	r2, [r3, #0]
    63b6:	230f      	movs	r3, #15
    63b8:	18fb      	adds	r3, r7, r3
    63ba:	3201      	adds	r2, #1
    63bc:	701a      	strb	r2, [r3, #0]
    63be:	230f      	movs	r3, #15
    63c0:	18fb      	adds	r3, r7, r3
    63c2:	781b      	ldrb	r3, [r3, #0]
    63c4:	2b10      	cmp	r3, #16
    63c6:	d9d9      	bls.n	637c <_usb_d_dev_handler+0x2c>
    63c8:	e000      	b.n	63cc <_usb_d_dev_handler+0x7c>
			return;
    63ca:	46c0      	nop			; (mov r8, r8)
	}
}
    63cc:	46bd      	mov	sp, r7
    63ce:	b004      	add	sp, #16
    63d0:	bd80      	pop	{r7, pc}
    63d2:	46c0      	nop			; (mov r8, r8)
    63d4:	41005000 	.word	0x41005000
    63d8:	00005659 	.word	0x00005659
    63dc:	20000d7c 	.word	0x20000d7c
    63e0:	00006259 	.word	0x00006259

000063e4 <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    63e4:	b580      	push	{r7, lr}
    63e6:	b082      	sub	sp, #8
    63e8:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    63ea:	1dfb      	adds	r3, r7, #7
    63ec:	2200      	movs	r2, #0
    63ee:	701a      	strb	r2, [r3, #0]
    63f0:	e02b      	b.n	644a <_usb_d_dev_reset_epts+0x66>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    63f2:	1dfb      	adds	r3, r7, #7
    63f4:	781a      	ldrb	r2, [r3, #0]
    63f6:	0013      	movs	r3, r2
    63f8:	009b      	lsls	r3, r3, #2
    63fa:	189b      	adds	r3, r3, r2
    63fc:	009b      	lsls	r3, r3, #2
    63fe:	3310      	adds	r3, #16
    6400:	001a      	movs	r2, r3
    6402:	4b19      	ldr	r3, [pc, #100]	; (6468 <_usb_d_dev_reset_epts+0x84>)
    6404:	18d3      	adds	r3, r2, r3
    6406:	3304      	adds	r3, #4
    6408:	2103      	movs	r1, #3
    640a:	0018      	movs	r0, r3
    640c:	4b17      	ldr	r3, [pc, #92]	; (646c <_usb_d_dev_reset_epts+0x88>)
    640e:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    6410:	1dfb      	adds	r3, r7, #7
    6412:	781a      	ldrb	r2, [r3, #0]
    6414:	4914      	ldr	r1, [pc, #80]	; (6468 <_usb_d_dev_reset_epts+0x84>)
    6416:	2026      	movs	r0, #38	; 0x26
    6418:	0013      	movs	r3, r2
    641a:	009b      	lsls	r3, r3, #2
    641c:	189b      	adds	r3, r3, r2
    641e:	009b      	lsls	r3, r3, #2
    6420:	18cb      	adds	r3, r1, r3
    6422:	181b      	adds	r3, r3, r0
    6424:	22ff      	movs	r2, #255	; 0xff
    6426:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    6428:	1dfb      	adds	r3, r7, #7
    642a:	781a      	ldrb	r2, [r3, #0]
    642c:	490e      	ldr	r1, [pc, #56]	; (6468 <_usb_d_dev_reset_epts+0x84>)
    642e:	2027      	movs	r0, #39	; 0x27
    6430:	0013      	movs	r3, r2
    6432:	009b      	lsls	r3, r3, #2
    6434:	189b      	adds	r3, r3, r2
    6436:	009b      	lsls	r3, r3, #2
    6438:	18cb      	adds	r3, r1, r3
    643a:	181b      	adds	r3, r3, r0
    643c:	2200      	movs	r2, #0
    643e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    6440:	1dfb      	adds	r3, r7, #7
    6442:	781a      	ldrb	r2, [r3, #0]
    6444:	1dfb      	adds	r3, r7, #7
    6446:	3201      	adds	r2, #1
    6448:	701a      	strb	r2, [r3, #0]
    644a:	1dfb      	adds	r3, r7, #7
    644c:	781b      	ldrb	r3, [r3, #0]
    644e:	2b10      	cmp	r3, #16
    6450:	d9cf      	bls.n	63f2 <_usb_d_dev_reset_epts+0xe>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    6452:	2380      	movs	r3, #128	; 0x80
    6454:	005a      	lsls	r2, r3, #1
    6456:	4b06      	ldr	r3, [pc, #24]	; (6470 <_usb_d_dev_reset_epts+0x8c>)
    6458:	2100      	movs	r1, #0
    645a:	0018      	movs	r0, r3
    645c:	4b05      	ldr	r3, [pc, #20]	; (6474 <_usb_d_dev_reset_epts+0x90>)
    645e:	4798      	blx	r3
}
    6460:	46c0      	nop			; (mov r8, r8)
    6462:	46bd      	mov	sp, r7
    6464:	b002      	add	sp, #8
    6466:	bd80      	pop	{r7, pc}
    6468:	20000d7c 	.word	0x20000d7c
    646c:	00006e89 	.word	0x00006e89
    6470:	20000ee4 	.word	0x20000ee4
    6474:	0000a605 	.word	0x0000a605

00006478 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    6478:	b580      	push	{r7, lr}
    647a:	b084      	sub	sp, #16
    647c:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    647e:	4b34      	ldr	r3, [pc, #208]	; (6550 <_usb_d_dev_init+0xd8>)
    6480:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    6482:	230b      	movs	r3, #11
    6484:	18fb      	adds	r3, r7, r3
    6486:	2201      	movs	r2, #1
    6488:	701a      	strb	r2, [r3, #0]
	const uint8_t spdconf[4] = {
    648a:	1d3b      	adds	r3, r7, #4
    648c:	2204      	movs	r2, #4
    648e:	701a      	strb	r2, [r3, #0]
    6490:	1d3b      	adds	r3, r7, #4
    6492:	2200      	movs	r2, #0
    6494:	705a      	strb	r2, [r3, #1]
    6496:	1d3b      	adds	r3, r7, #4
    6498:	2200      	movs	r2, #0
    649a:	709a      	strb	r2, [r3, #2]
    649c:	1d3b      	adds	r3, r7, #4
    649e:	2200      	movs	r2, #0
    64a0:	70da      	strb	r2, [r3, #3]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    64a2:	68fb      	ldr	r3, [r7, #12]
    64a4:	2101      	movs	r1, #1
    64a6:	0018      	movs	r0, r3
    64a8:	4b2a      	ldr	r3, [pc, #168]	; (6554 <_usb_d_dev_init+0xdc>)
    64aa:	4798      	blx	r3
    64ac:	0003      	movs	r3, r0
    64ae:	001a      	movs	r2, r3
    64b0:	2301      	movs	r3, #1
    64b2:	4053      	eors	r3, r2
    64b4:	b2db      	uxtb	r3, r3
    64b6:	2b00      	cmp	r3, #0
    64b8:	d014      	beq.n	64e4 <_usb_d_dev_init+0x6c>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    64ba:	68fb      	ldr	r3, [r7, #12]
    64bc:	2102      	movs	r1, #2
    64be:	0018      	movs	r0, r3
    64c0:	4b25      	ldr	r3, [pc, #148]	; (6558 <_usb_d_dev_init+0xe0>)
    64c2:	4798      	blx	r3
    64c4:	1e03      	subs	r3, r0, #0
    64c6:	d008      	beq.n	64da <_usb_d_dev_init+0x62>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    64c8:	68fb      	ldr	r3, [r7, #12]
    64ca:	0018      	movs	r0, r3
    64cc:	4b23      	ldr	r3, [pc, #140]	; (655c <_usb_d_dev_init+0xe4>)
    64ce:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    64d0:	68fb      	ldr	r3, [r7, #12]
    64d2:	2102      	movs	r1, #2
    64d4:	0018      	movs	r0, r3
    64d6:	4b22      	ldr	r3, [pc, #136]	; (6560 <_usb_d_dev_init+0xe8>)
    64d8:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    64da:	68fb      	ldr	r3, [r7, #12]
    64dc:	2101      	movs	r1, #1
    64de:	0018      	movs	r0, r3
    64e0:	4b20      	ldr	r3, [pc, #128]	; (6564 <_usb_d_dev_init+0xec>)
    64e2:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    64e4:	68fb      	ldr	r3, [r7, #12]
    64e6:	2101      	movs	r1, #1
    64e8:	0018      	movs	r0, r3
    64ea:	4b1d      	ldr	r3, [pc, #116]	; (6560 <_usb_d_dev_init+0xe8>)
    64ec:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    64ee:	4b1e      	ldr	r3, [pc, #120]	; (6568 <_usb_d_dev_init+0xf0>)
    64f0:	4a1e      	ldr	r2, [pc, #120]	; (656c <_usb_d_dev_init+0xf4>)
    64f2:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    64f4:	4b1c      	ldr	r3, [pc, #112]	; (6568 <_usb_d_dev_init+0xf0>)
    64f6:	4a1d      	ldr	r2, [pc, #116]	; (656c <_usb_d_dev_init+0xf4>)
    64f8:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    64fa:	4b1b      	ldr	r3, [pc, #108]	; (6568 <_usb_d_dev_init+0xf0>)
    64fc:	4a1b      	ldr	r2, [pc, #108]	; (656c <_usb_d_dev_init+0xf4>)
    64fe:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    6500:	4b19      	ldr	r3, [pc, #100]	; (6568 <_usb_d_dev_init+0xf0>)
    6502:	4a1a      	ldr	r2, [pc, #104]	; (656c <_usb_d_dev_init+0xf4>)
    6504:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    6506:	4b18      	ldr	r3, [pc, #96]	; (6568 <_usb_d_dev_init+0xf0>)
    6508:	4a18      	ldr	r2, [pc, #96]	; (656c <_usb_d_dev_init+0xf4>)
    650a:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    650c:	4b18      	ldr	r3, [pc, #96]	; (6570 <_usb_d_dev_init+0xf8>)
    650e:	4798      	blx	r3

	_usb_load_calib();
    6510:	4b18      	ldr	r3, [pc, #96]	; (6574 <_usb_d_dev_init+0xfc>)
    6512:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    6514:	68fb      	ldr	r3, [r7, #12]
    6516:	2104      	movs	r1, #4
    6518:	0018      	movs	r0, r3
    651a:	4b12      	ldr	r3, [pc, #72]	; (6564 <_usb_d_dev_init+0xec>)
    651c:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    651e:	4a16      	ldr	r2, [pc, #88]	; (6578 <_usb_d_dev_init+0x100>)
    6520:	68fb      	ldr	r3, [r7, #12]
    6522:	0011      	movs	r1, r2
    6524:	0018      	movs	r0, r3
    6526:	4b15      	ldr	r3, [pc, #84]	; (657c <_usb_d_dev_init+0x104>)
    6528:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    652a:	230b      	movs	r3, #11
    652c:	18fb      	adds	r3, r7, r3
    652e:	781b      	ldrb	r3, [r3, #0]
    6530:	1d3a      	adds	r2, r7, #4
    6532:	5cd3      	ldrb	r3, [r2, r3]
    6534:	2201      	movs	r2, #1
    6536:	4313      	orrs	r3, r2
    6538:	b2db      	uxtb	r3, r3
    653a:	b29a      	uxth	r2, r3
    653c:	68fb      	ldr	r3, [r7, #12]
    653e:	0011      	movs	r1, r2
    6540:	0018      	movs	r0, r3
    6542:	4b0f      	ldr	r3, [pc, #60]	; (6580 <_usb_d_dev_init+0x108>)
    6544:	4798      	blx	r3

	return ERR_NONE;
    6546:	2300      	movs	r3, #0
}
    6548:	0018      	movs	r0, r3
    654a:	46bd      	mov	sp, r7
    654c:	b004      	add	sp, #16
    654e:	bd80      	pop	{r7, pc}
    6550:	41005000 	.word	0x41005000
    6554:	0000465f 	.word	0x0000465f
    6558:	00004a1d 	.word	0x00004a1d
    655c:	000049ed 	.word	0x000049ed
    6560:	00004635 	.word	0x00004635
    6564:	00004a65 	.word	0x00004a65
    6568:	20000d7c 	.word	0x20000d7c
    656c:	00004b29 	.word	0x00004b29
    6570:	000063e5 	.word	0x000063e5
    6574:	00004b3d 	.word	0x00004b3d
    6578:	20000ee4 	.word	0x20000ee4
    657c:	00004b11 	.word	0x00004b11
    6580:	00004ad5 	.word	0x00004ad5

00006584 <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_IRQn);
	NVIC_ClearPendingIRQ(USB_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    6584:	b590      	push	{r4, r7, lr}
    6586:	b083      	sub	sp, #12
    6588:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    658a:	4b18      	ldr	r3, [pc, #96]	; (65ec <_usb_d_dev_enable+0x68>)
    658c:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    658e:	687b      	ldr	r3, [r7, #4]
    6590:	2103      	movs	r1, #3
    6592:	0018      	movs	r0, r3
    6594:	4b16      	ldr	r3, [pc, #88]	; (65f0 <_usb_d_dev_enable+0x6c>)
    6596:	4798      	blx	r3
    6598:	1e03      	subs	r3, r0, #0
    659a:	d002      	beq.n	65a2 <_usb_d_dev_enable+0x1e>
		return -USB_ERR_DENIED;
    659c:	2311      	movs	r3, #17
    659e:	425b      	negs	r3, r3
    65a0:	e01f      	b.n	65e2 <_usb_d_dev_enable+0x5e>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    65a2:	1cfc      	adds	r4, r7, #3
    65a4:	687b      	ldr	r3, [r7, #4]
    65a6:	0018      	movs	r0, r3
    65a8:	4b12      	ldr	r3, [pc, #72]	; (65f4 <_usb_d_dev_enable+0x70>)
    65aa:	4798      	blx	r3
    65ac:	0003      	movs	r3, r0
    65ae:	7023      	strb	r3, [r4, #0]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    65b0:	1cfb      	adds	r3, r7, #3
    65b2:	781b      	ldrb	r3, [r3, #0]
    65b4:	2202      	movs	r2, #2
    65b6:	4013      	ands	r3, r2
    65b8:	d109      	bne.n	65ce <_usb_d_dev_enable+0x4a>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    65ba:	1cfb      	adds	r3, r7, #3
    65bc:	781b      	ldrb	r3, [r3, #0]
    65be:	2202      	movs	r2, #2
    65c0:	4313      	orrs	r3, r2
    65c2:	b2da      	uxtb	r2, r3
    65c4:	687b      	ldr	r3, [r7, #4]
    65c6:	0011      	movs	r1, r2
    65c8:	0018      	movs	r0, r3
    65ca:	4b0b      	ldr	r3, [pc, #44]	; (65f8 <_usb_d_dev_enable+0x74>)
    65cc:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_IRQn);
    65ce:	2007      	movs	r0, #7
    65d0:	4b0a      	ldr	r3, [pc, #40]	; (65fc <_usb_d_dev_enable+0x78>)
    65d2:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    65d4:	4a0a      	ldr	r2, [pc, #40]	; (6600 <_usb_d_dev_enable+0x7c>)
    65d6:	687b      	ldr	r3, [r7, #4]
    65d8:	0011      	movs	r1, r2
    65da:	0018      	movs	r0, r3
    65dc:	4b09      	ldr	r3, [pc, #36]	; (6604 <_usb_d_dev_enable+0x80>)
    65de:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    65e0:	2300      	movs	r3, #0
}
    65e2:	0018      	movs	r0, r3
    65e4:	46bd      	mov	sp, r7
    65e6:	b003      	add	sp, #12
    65e8:	bd90      	pop	{r4, r7, pc}
    65ea:	46c0      	nop			; (mov r8, r8)
    65ec:	41005000 	.word	0x41005000
    65f0:	000049b3 	.word	0x000049b3
    65f4:	00004a91 	.word	0x00004a91
    65f8:	00004a65 	.word	0x00004a65
    65fc:	000045a5 	.word	0x000045a5
    6600:	0000028d 	.word	0x0000028d
    6604:	00004961 	.word	0x00004961

00006608 <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    6608:	b580      	push	{r7, lr}
    660a:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    660c:	4b03      	ldr	r3, [pc, #12]	; (661c <_usb_d_dev_attach+0x14>)
    660e:	0018      	movs	r0, r3
    6610:	4b03      	ldr	r3, [pc, #12]	; (6620 <_usb_d_dev_attach+0x18>)
    6612:	4798      	blx	r3
}
    6614:	46c0      	nop			; (mov r8, r8)
    6616:	46bd      	mov	sp, r7
    6618:	bd80      	pop	{r7, pc}
    661a:	46c0      	nop			; (mov r8, r8)
    661c:	41005000 	.word	0x41005000
    6620:	00004ab5 	.word	0x00004ab5

00006624 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    6624:	b580      	push	{r7, lr}
    6626:	b082      	sub	sp, #8
    6628:	af00      	add	r7, sp, #0
    662a:	0002      	movs	r2, r0
    662c:	1dfb      	adds	r3, r7, #7
    662e:	701a      	strb	r2, [r3, #0]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    6630:	1dfb      	adds	r3, r7, #7
    6632:	781b      	ldrb	r3, [r3, #0]
    6634:	2280      	movs	r2, #128	; 0x80
    6636:	4252      	negs	r2, r2
    6638:	4313      	orrs	r3, r2
    663a:	b2db      	uxtb	r3, r3
    663c:	4a04      	ldr	r2, [pc, #16]	; (6650 <_usb_d_dev_set_address+0x2c>)
    663e:	0019      	movs	r1, r3
    6640:	0010      	movs	r0, r2
    6642:	4b04      	ldr	r3, [pc, #16]	; (6654 <_usb_d_dev_set_address+0x30>)
    6644:	4798      	blx	r3
}
    6646:	46c0      	nop			; (mov r8, r8)
    6648:	46bd      	mov	sp, r7
    664a:	b002      	add	sp, #8
    664c:	bd80      	pop	{r7, pc}
    664e:	46c0      	nop			; (mov r8, r8)
    6650:	41005000 	.word	0x41005000
    6654:	00004af3 	.word	0x00004af3

00006658 <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    6658:	b590      	push	{r4, r7, lr}
    665a:	b085      	sub	sp, #20
    665c:	af00      	add	r7, sp, #0
    665e:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    6660:	4b1c      	ldr	r3, [pc, #112]	; (66d4 <_usb_d_dev_trans_setup+0x7c>)
    6662:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    6664:	687b      	ldr	r3, [r7, #4]
    6666:	7c9a      	ldrb	r2, [r3, #18]
    6668:	230b      	movs	r3, #11
    666a:	18fb      	adds	r3, r7, r3
    666c:	210f      	movs	r1, #15
    666e:	400a      	ands	r2, r1
    6670:	701a      	strb	r2, [r3, #0]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    6672:	687b      	ldr	r3, [r7, #4]
    6674:	68db      	ldr	r3, [r3, #12]
    6676:	001a      	movs	r2, r3
    6678:	230b      	movs	r3, #11
    667a:	18fb      	adds	r3, r7, r3
    667c:	781b      	ldrb	r3, [r3, #0]
    667e:	2100      	movs	r1, #0
    6680:	0018      	movs	r0, r3
    6682:	4b15      	ldr	r3, [pc, #84]	; (66d8 <_usb_d_dev_trans_setup+0x80>)
    6684:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    6686:	687b      	ldr	r3, [r7, #4]
    6688:	8a1b      	ldrh	r3, [r3, #16]
    668a:	001a      	movs	r2, r3
    668c:	230b      	movs	r3, #11
    668e:	18fb      	adds	r3, r7, r3
    6690:	7818      	ldrb	r0, [r3, #0]
    6692:	2300      	movs	r3, #0
    6694:	2100      	movs	r1, #0
    6696:	4c11      	ldr	r4, [pc, #68]	; (66dc <_usb_d_dev_trans_setup+0x84>)
    6698:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    669a:	230b      	movs	r3, #11
    669c:	18fb      	adds	r3, r7, r3
    669e:	7819      	ldrb	r1, [r3, #0]
    66a0:	68fb      	ldr	r3, [r7, #12]
    66a2:	22b0      	movs	r2, #176	; 0xb0
    66a4:	0018      	movs	r0, r3
    66a6:	4b0e      	ldr	r3, [pc, #56]	; (66e0 <_usb_d_dev_trans_setup+0x88>)
    66a8:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    66aa:	230b      	movs	r3, #11
    66ac:	18fb      	adds	r3, r7, r3
    66ae:	781b      	ldrb	r3, [r3, #0]
    66b0:	2200      	movs	r2, #0
    66b2:	2100      	movs	r1, #0
    66b4:	0018      	movs	r0, r3
    66b6:	4b0b      	ldr	r3, [pc, #44]	; (66e4 <_usb_d_dev_trans_setup+0x8c>)
    66b8:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    66ba:	230b      	movs	r3, #11
    66bc:	18fb      	adds	r3, r7, r3
    66be:	7819      	ldrb	r1, [r3, #0]
    66c0:	68fb      	ldr	r3, [r7, #12]
    66c2:	2210      	movs	r2, #16
    66c4:	0018      	movs	r0, r3
    66c6:	4b08      	ldr	r3, [pc, #32]	; (66e8 <_usb_d_dev_trans_setup+0x90>)
    66c8:	4798      	blx	r3
}
    66ca:	46c0      	nop			; (mov r8, r8)
    66cc:	46bd      	mov	sp, r7
    66ce:	b005      	add	sp, #20
    66d0:	bd90      	pop	{r4, r7, pc}
    66d2:	46c0      	nop			; (mov r8, r8)
    66d4:	41005000 	.word	0x41005000
    66d8:	00005009 	.word	0x00005009
    66dc:	0000520d 	.word	0x0000520d
    66e0:	0000478f 	.word	0x0000478f
    66e4:	00005309 	.word	0x00005309
    66e8:	000047ed 	.word	0x000047ed

000066ec <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    66ec:	b590      	push	{r4, r7, lr}
    66ee:	b089      	sub	sp, #36	; 0x24
    66f0:	af00      	add	r7, sp, #0
    66f2:	0004      	movs	r4, r0
    66f4:	0008      	movs	r0, r1
    66f6:	0011      	movs	r1, r2
    66f8:	1dfb      	adds	r3, r7, #7
    66fa:	1c22      	adds	r2, r4, #0
    66fc:	701a      	strb	r2, [r3, #0]
    66fe:	1dbb      	adds	r3, r7, #6
    6700:	1c02      	adds	r2, r0, #0
    6702:	701a      	strb	r2, [r3, #0]
    6704:	1d3b      	adds	r3, r7, #4
    6706:	1c0a      	adds	r2, r1, #0
    6708:	801a      	strh	r2, [r3, #0]
	uint8_t               epn = USB_EP_GET_N(ep);
    670a:	231f      	movs	r3, #31
    670c:	18fb      	adds	r3, r7, r3
    670e:	1dfa      	adds	r2, r7, #7
    6710:	7812      	ldrb	r2, [r2, #0]
    6712:	210f      	movs	r1, #15
    6714:	400a      	ands	r2, r1
    6716:	701a      	strb	r2, [r3, #0]
	bool                  dir = USB_EP_GET_DIR(ep);
    6718:	1dfb      	adds	r3, r7, #7
    671a:	781b      	ldrb	r3, [r3, #0]
    671c:	2280      	movs	r2, #128	; 0x80
    671e:	401a      	ands	r2, r3
    6720:	231e      	movs	r3, #30
    6722:	18fb      	adds	r3, r7, r3
    6724:	1e51      	subs	r1, r2, #1
    6726:	418a      	sbcs	r2, r1
    6728:	701a      	strb	r2, [r3, #0]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    672a:	231e      	movs	r3, #30
    672c:	18fb      	adds	r3, r7, r3
    672e:	781a      	ldrb	r2, [r3, #0]
    6730:	231f      	movs	r3, #31
    6732:	18fb      	adds	r3, r7, r3
    6734:	781b      	ldrb	r3, [r3, #0]
    6736:	0011      	movs	r1, r2
    6738:	0018      	movs	r0, r3
    673a:	4b49      	ldr	r3, [pc, #292]	; (6860 <_usb_d_dev_ep_init+0x174>)
    673c:	4798      	blx	r3
    673e:	0003      	movs	r3, r0
    6740:	61bb      	str	r3, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    6742:	2317      	movs	r3, #23
    6744:	18fb      	adds	r3, r7, r3
    6746:	1dba      	adds	r2, r7, #6
    6748:	7812      	ldrb	r2, [r2, #0]
    674a:	2103      	movs	r1, #3
    674c:	400a      	ands	r2, r1
    674e:	701a      	strb	r2, [r3, #0]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    6750:	231f      	movs	r3, #31
    6752:	18fb      	adds	r3, r7, r3
    6754:	781a      	ldrb	r2, [r3, #0]
    6756:	0013      	movs	r3, r2
    6758:	005b      	lsls	r3, r3, #1
    675a:	189b      	adds	r3, r3, r2
    675c:	009b      	lsls	r3, r3, #2
    675e:	4a41      	ldr	r2, [pc, #260]	; (6864 <_usb_d_dev_ep_init+0x178>)
    6760:	189b      	adds	r3, r3, r2
    6762:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    6764:	231f      	movs	r3, #31
    6766:	18fb      	adds	r3, r7, r3
    6768:	781b      	ldrb	r3, [r3, #0]
    676a:	2b07      	cmp	r3, #7
    676c:	d902      	bls.n	6774 <_usb_d_dev_ep_init+0x88>
		return -USB_ERR_PARAM;
    676e:	2312      	movs	r3, #18
    6770:	425b      	negs	r3, r3
    6772:	e070      	b.n	6856 <_usb_d_dev_ep_init+0x16a>
	}
	if (ept->ep != 0xFF) {
    6774:	69bb      	ldr	r3, [r7, #24]
    6776:	7c9b      	ldrb	r3, [r3, #18]
    6778:	2bff      	cmp	r3, #255	; 0xff
    677a:	d002      	beq.n	6782 <_usb_d_dev_ep_init+0x96>
		return -USB_ERR_REDO;
    677c:	2314      	movs	r3, #20
    677e:	425b      	negs	r3, r3
    6780:	e069      	b.n	6856 <_usb_d_dev_ep_init+0x16a>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    6782:	2317      	movs	r3, #23
    6784:	18fb      	adds	r3, r7, r3
    6786:	781b      	ldrb	r3, [r3, #0]
    6788:	2b00      	cmp	r3, #0
    678a:	d123      	bne.n	67d4 <_usb_d_dev_ep_init+0xe8>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    678c:	231e      	movs	r3, #30
    678e:	18fb      	adds	r3, r7, r3
    6790:	781b      	ldrb	r3, [r3, #0]
    6792:	1e5a      	subs	r2, r3, #1
    6794:	4193      	sbcs	r3, r2
    6796:	b2db      	uxtb	r3, r3
    6798:	2201      	movs	r2, #1
    679a:	4053      	eors	r3, r2
    679c:	b2db      	uxtb	r3, r3
    679e:	1c1a      	adds	r2, r3, #0
    67a0:	2301      	movs	r3, #1
    67a2:	4013      	ands	r3, r2
    67a4:	b2da      	uxtb	r2, r3
    67a6:	231f      	movs	r3, #31
    67a8:	18fb      	adds	r3, r7, r3
    67aa:	781b      	ldrb	r3, [r3, #0]
    67ac:	0011      	movs	r1, r2
    67ae:	0018      	movs	r0, r3
    67b0:	4b2b      	ldr	r3, [pc, #172]	; (6860 <_usb_d_dev_ep_init+0x174>)
    67b2:	4798      	blx	r3
    67b4:	0003      	movs	r3, r0
    67b6:	60fb      	str	r3, [r7, #12]
		if (ept_in->ep != 0xFF) {
    67b8:	68fb      	ldr	r3, [r7, #12]
    67ba:	7c9b      	ldrb	r3, [r3, #18]
    67bc:	2bff      	cmp	r3, #255	; 0xff
    67be:	d002      	beq.n	67c6 <_usb_d_dev_ep_init+0xda>
			return -USB_ERR_REDO;
    67c0:	2314      	movs	r3, #20
    67c2:	425b      	negs	r3, r3
    67c4:	e047      	b.n	6856 <_usb_d_dev_ep_init+0x16a>
		}
		if (pcfg->cache == NULL) {
    67c6:	693b      	ldr	r3, [r7, #16]
    67c8:	681b      	ldr	r3, [r3, #0]
    67ca:	2b00      	cmp	r3, #0
    67cc:	d102      	bne.n	67d4 <_usb_d_dev_ep_init+0xe8>
			return -USB_ERR_FUNC;
    67ce:	2313      	movs	r3, #19
    67d0:	425b      	negs	r3, r3
    67d2:	e040      	b.n	6856 <_usb_d_dev_ep_init+0x16a>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    67d4:	231e      	movs	r3, #30
    67d6:	18fb      	adds	r3, r7, r3
    67d8:	781b      	ldrb	r3, [r3, #0]
    67da:	2b00      	cmp	r3, #0
    67dc:	d005      	beq.n	67ea <_usb_d_dev_ep_init+0xfe>
    67de:	693b      	ldr	r3, [r7, #16]
    67e0:	685b      	ldr	r3, [r3, #4]
    67e2:	1e5a      	subs	r2, r3, #1
    67e4:	4193      	sbcs	r3, r2
    67e6:	b2db      	uxtb	r3, r3
    67e8:	e004      	b.n	67f4 <_usb_d_dev_ep_init+0x108>
    67ea:	693b      	ldr	r3, [r7, #16]
    67ec:	681b      	ldr	r3, [r3, #0]
    67ee:	1e5a      	subs	r2, r3, #1
    67f0:	4193      	sbcs	r3, r2
    67f2:	b2db      	uxtb	r3, r3
    67f4:	2b00      	cmp	r3, #0
    67f6:	d012      	beq.n	681e <_usb_d_dev_ep_init+0x132>
    67f8:	231e      	movs	r3, #30
    67fa:	18fb      	adds	r3, r7, r3
    67fc:	781b      	ldrb	r3, [r3, #0]
    67fe:	2b00      	cmp	r3, #0
    6800:	d003      	beq.n	680a <_usb_d_dev_ep_init+0x11e>
    6802:	693b      	ldr	r3, [r7, #16]
    6804:	895b      	ldrh	r3, [r3, #10]
    6806:	001a      	movs	r2, r3
    6808:	e002      	b.n	6810 <_usb_d_dev_ep_init+0x124>
    680a:	693b      	ldr	r3, [r7, #16]
    680c:	891b      	ldrh	r3, [r3, #8]
    680e:	001a      	movs	r2, r3
    6810:	1d3b      	adds	r3, r7, #4
    6812:	881b      	ldrh	r3, [r3, #0]
    6814:	429a      	cmp	r2, r3
    6816:	da02      	bge.n	681e <_usb_d_dev_ep_init+0x132>
		return -USB_ERR_FUNC;
    6818:	2313      	movs	r3, #19
    681a:	425b      	negs	r3, r3
    681c:	e01b      	b.n	6856 <_usb_d_dev_ep_init+0x16a>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    681e:	231e      	movs	r3, #30
    6820:	18fb      	adds	r3, r7, r3
    6822:	781b      	ldrb	r3, [r3, #0]
    6824:	2b00      	cmp	r3, #0
    6826:	d002      	beq.n	682e <_usb_d_dev_ep_init+0x142>
    6828:	693b      	ldr	r3, [r7, #16]
    682a:	685a      	ldr	r2, [r3, #4]
    682c:	e001      	b.n	6832 <_usb_d_dev_ep_init+0x146>
    682e:	693b      	ldr	r3, [r7, #16]
    6830:	681a      	ldr	r2, [r3, #0]
    6832:	69bb      	ldr	r3, [r7, #24]
    6834:	60da      	str	r2, [r3, #12]
	ept->size     = max_pkt_siz;
    6836:	69bb      	ldr	r3, [r7, #24]
    6838:	1d3a      	adds	r2, r7, #4
    683a:	8812      	ldrh	r2, [r2, #0]
    683c:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    683e:	2317      	movs	r3, #23
    6840:	18fb      	adds	r3, r7, r3
    6842:	781b      	ldrb	r3, [r3, #0]
    6844:	3301      	adds	r3, #1
    6846:	b2da      	uxtb	r2, r3
    6848:	69bb      	ldr	r3, [r7, #24]
    684a:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    684c:	69bb      	ldr	r3, [r7, #24]
    684e:	1dfa      	adds	r2, r7, #7
    6850:	7812      	ldrb	r2, [r2, #0]
    6852:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    6854:	2300      	movs	r3, #0
}
    6856:	0018      	movs	r0, r3
    6858:	46bd      	mov	sp, r7
    685a:	b009      	add	sp, #36	; 0x24
    685c:	bd90      	pop	{r4, r7, pc}
    685e:	46c0      	nop			; (mov r8, r8)
    6860:	000053e9 	.word	0x000053e9
    6864:	0000fd28 	.word	0x0000fd28

00006868 <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    6868:	b580      	push	{r7, lr}
    686a:	b086      	sub	sp, #24
    686c:	af00      	add	r7, sp, #0
    686e:	0002      	movs	r2, r0
    6870:	1dfb      	adds	r3, r7, #7
    6872:	701a      	strb	r2, [r3, #0]
	Usb *                 hw  = USB;
    6874:	4b39      	ldr	r3, [pc, #228]	; (695c <_usb_d_dev_ep_deinit+0xf4>)
    6876:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    6878:	2313      	movs	r3, #19
    687a:	18fb      	adds	r3, r7, r3
    687c:	1dfa      	adds	r2, r7, #7
    687e:	7812      	ldrb	r2, [r2, #0]
    6880:	210f      	movs	r1, #15
    6882:	400a      	ands	r2, r1
    6884:	701a      	strb	r2, [r3, #0]
	bool                  dir = USB_EP_GET_DIR(ep);
    6886:	1dfb      	adds	r3, r7, #7
    6888:	781b      	ldrb	r3, [r3, #0]
    688a:	2280      	movs	r2, #128	; 0x80
    688c:	401a      	ands	r2, r3
    688e:	2312      	movs	r3, #18
    6890:	18fb      	adds	r3, r7, r3
    6892:	1e51      	subs	r1, r2, #1
    6894:	418a      	sbcs	r2, r1
    6896:	701a      	strb	r2, [r3, #0]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    6898:	2312      	movs	r3, #18
    689a:	18fb      	adds	r3, r7, r3
    689c:	781a      	ldrb	r2, [r3, #0]
    689e:	2313      	movs	r3, #19
    68a0:	18fb      	adds	r3, r7, r3
    68a2:	781b      	ldrb	r3, [r3, #0]
    68a4:	0011      	movs	r1, r2
    68a6:	0018      	movs	r0, r3
    68a8:	4b2d      	ldr	r3, [pc, #180]	; (6960 <_usb_d_dev_ep_deinit+0xf8>)
    68aa:	4798      	blx	r3
    68ac:	0003      	movs	r3, r0
    68ae:	60fb      	str	r3, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    68b0:	2313      	movs	r3, #19
    68b2:	18fb      	adds	r3, r7, r3
    68b4:	781b      	ldrb	r3, [r3, #0]
    68b6:	2b07      	cmp	r3, #7
    68b8:	d84b      	bhi.n	6952 <_usb_d_dev_ep_deinit+0xea>
    68ba:	68fb      	ldr	r3, [r7, #12]
    68bc:	7c9b      	ldrb	r3, [r3, #18]
    68be:	2bff      	cmp	r3, #255	; 0xff
    68c0:	d047      	beq.n	6952 <_usb_d_dev_ep_deinit+0xea>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    68c2:	2312      	movs	r3, #18
    68c4:	18fb      	adds	r3, r7, r3
    68c6:	7819      	ldrb	r1, [r3, #0]
    68c8:	68fb      	ldr	r3, [r7, #12]
    68ca:	2203      	movs	r2, #3
    68cc:	0018      	movs	r0, r3
    68ce:	4b25      	ldr	r3, [pc, #148]	; (6964 <_usb_d_dev_ep_deinit+0xfc>)
    68d0:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    68d2:	68fb      	ldr	r3, [r7, #12]
    68d4:	7cdb      	ldrb	r3, [r3, #19]
    68d6:	2207      	movs	r2, #7
    68d8:	4013      	ands	r3, r2
    68da:	b2db      	uxtb	r3, r3
    68dc:	2b01      	cmp	r3, #1
    68de:	d107      	bne.n	68f0 <_usb_d_dev_ep_deinit+0x88>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    68e0:	1dfb      	adds	r3, r7, #7
    68e2:	781a      	ldrb	r2, [r3, #0]
    68e4:	697b      	ldr	r3, [r7, #20]
    68e6:	3208      	adds	r2, #8
    68e8:	0152      	lsls	r2, r2, #5
    68ea:	2100      	movs	r1, #0
    68ec:	54d1      	strb	r1, [r2, r3]
    68ee:	e029      	b.n	6944 <_usb_d_dev_ep_deinit+0xdc>
	} else if (USB_EP_GET_DIR(ep)) {
    68f0:	1dfb      	adds	r3, r7, #7
    68f2:	781b      	ldrb	r3, [r3, #0]
    68f4:	b25b      	sxtb	r3, r3
    68f6:	2b00      	cmp	r3, #0
    68f8:	da14      	bge.n	6924 <_usb_d_dev_ep_deinit+0xbc>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    68fa:	1dfb      	adds	r3, r7, #7
    68fc:	781b      	ldrb	r3, [r3, #0]
    68fe:	220f      	movs	r2, #15
    6900:	401a      	ands	r2, r3
    6902:	1dfb      	adds	r3, r7, #7
    6904:	781b      	ldrb	r3, [r3, #0]
    6906:	210f      	movs	r1, #15
    6908:	4019      	ands	r1, r3
    690a:	697b      	ldr	r3, [r7, #20]
    690c:	3108      	adds	r1, #8
    690e:	0149      	lsls	r1, r1, #5
    6910:	5ccb      	ldrb	r3, [r1, r3]
    6912:	b2db      	uxtb	r3, r3
    6914:	2170      	movs	r1, #112	; 0x70
    6916:	438b      	bics	r3, r1
    6918:	b2d9      	uxtb	r1, r3
    691a:	697b      	ldr	r3, [r7, #20]
    691c:	3208      	adds	r2, #8
    691e:	0152      	lsls	r2, r2, #5
    6920:	54d1      	strb	r1, [r2, r3]
    6922:	e00f      	b.n	6944 <_usb_d_dev_ep_deinit+0xdc>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    6924:	1dfb      	adds	r3, r7, #7
    6926:	781a      	ldrb	r2, [r3, #0]
    6928:	1dfb      	adds	r3, r7, #7
    692a:	7819      	ldrb	r1, [r3, #0]
    692c:	697b      	ldr	r3, [r7, #20]
    692e:	3108      	adds	r1, #8
    6930:	0149      	lsls	r1, r1, #5
    6932:	5ccb      	ldrb	r3, [r1, r3]
    6934:	b2db      	uxtb	r3, r3
    6936:	2107      	movs	r1, #7
    6938:	438b      	bics	r3, r1
    693a:	b2d9      	uxtb	r1, r3
    693c:	697b      	ldr	r3, [r7, #20]
    693e:	3208      	adds	r2, #8
    6940:	0152      	lsls	r2, r2, #5
    6942:	54d1      	strb	r1, [r2, r3]
	}
	ept->flags.u8 = 0;
    6944:	68fb      	ldr	r3, [r7, #12]
    6946:	2200      	movs	r2, #0
    6948:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    694a:	68fb      	ldr	r3, [r7, #12]
    694c:	22ff      	movs	r2, #255	; 0xff
    694e:	749a      	strb	r2, [r3, #18]
    6950:	e000      	b.n	6954 <_usb_d_dev_ep_deinit+0xec>
		return;
    6952:	46c0      	nop			; (mov r8, r8)
}
    6954:	46bd      	mov	sp, r7
    6956:	b006      	add	sp, #24
    6958:	bd80      	pop	{r7, pc}
    695a:	46c0      	nop			; (mov r8, r8)
    695c:	41005000 	.word	0x41005000
    6960:	000053e9 	.word	0x000053e9
    6964:	00006ed5 	.word	0x00006ed5

00006968 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    6968:	b5b0      	push	{r4, r5, r7, lr}
    696a:	b088      	sub	sp, #32
    696c:	af00      	add	r7, sp, #0
    696e:	0002      	movs	r2, r0
    6970:	1dfb      	adds	r3, r7, #7
    6972:	701a      	strb	r2, [r3, #0]
	Usb *                 hw    = USB;
    6974:	4b9c      	ldr	r3, [pc, #624]	; (6be8 <_usb_d_dev_ep_enable+0x280>)
    6976:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    6978:	231b      	movs	r3, #27
    697a:	18fb      	adds	r3, r7, r3
    697c:	1dfa      	adds	r2, r7, #7
    697e:	7812      	ldrb	r2, [r2, #0]
    6980:	210f      	movs	r1, #15
    6982:	400a      	ands	r2, r1
    6984:	701a      	strb	r2, [r3, #0]
	bool                  dir   = USB_EP_GET_DIR(ep);
    6986:	1dfb      	adds	r3, r7, #7
    6988:	781b      	ldrb	r3, [r3, #0]
    698a:	2280      	movs	r2, #128	; 0x80
    698c:	401a      	ands	r2, r3
    698e:	231a      	movs	r3, #26
    6990:	18fb      	adds	r3, r7, r3
    6992:	1e51      	subs	r1, r2, #1
    6994:	418a      	sbcs	r2, r1
    6996:	701a      	strb	r2, [r3, #0]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    6998:	231a      	movs	r3, #26
    699a:	18fb      	adds	r3, r7, r3
    699c:	781a      	ldrb	r2, [r3, #0]
    699e:	231b      	movs	r3, #27
    69a0:	18fb      	adds	r3, r7, r3
    69a2:	781b      	ldrb	r3, [r3, #0]
    69a4:	0011      	movs	r1, r2
    69a6:	0018      	movs	r0, r3
    69a8:	4b90      	ldr	r3, [pc, #576]	; (6bec <_usb_d_dev_ep_enable+0x284>)
    69aa:	4798      	blx	r3
    69ac:	0003      	movs	r3, r0
    69ae:	617b      	str	r3, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    69b0:	2313      	movs	r3, #19
    69b2:	18fc      	adds	r4, r7, r3
    69b4:	231b      	movs	r3, #27
    69b6:	18fb      	adds	r3, r7, r3
    69b8:	781a      	ldrb	r2, [r3, #0]
    69ba:	69fb      	ldr	r3, [r7, #28]
    69bc:	0011      	movs	r1, r2
    69be:	0018      	movs	r0, r3
    69c0:	4b8b      	ldr	r3, [pc, #556]	; (6bf0 <_usb_d_dev_ep_enable+0x288>)
    69c2:	4798      	blx	r3
    69c4:	0003      	movs	r3, r0
    69c6:	7023      	strb	r3, [r4, #0]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    69c8:	231b      	movs	r3, #27
    69ca:	18fb      	adds	r3, r7, r3
    69cc:	781b      	ldrb	r3, [r3, #0]
    69ce:	2b07      	cmp	r3, #7
    69d0:	d803      	bhi.n	69da <_usb_d_dev_ep_enable+0x72>
    69d2:	697b      	ldr	r3, [r7, #20]
    69d4:	7c9b      	ldrb	r3, [r3, #18]
    69d6:	2bff      	cmp	r3, #255	; 0xff
    69d8:	d102      	bne.n	69e0 <_usb_d_dev_ep_enable+0x78>
		return -USB_ERR_PARAM;
    69da:	2312      	movs	r3, #18
    69dc:	425b      	negs	r3, r3
    69de:	e0fe      	b.n	6bde <_usb_d_dev_ep_enable+0x276>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    69e0:	231b      	movs	r3, #27
    69e2:	18fb      	adds	r3, r7, r3
    69e4:	781b      	ldrb	r3, [r3, #0]
    69e6:	015a      	lsls	r2, r3, #5
    69e8:	4b82      	ldr	r3, [pc, #520]	; (6bf4 <_usb_d_dev_ep_enable+0x28c>)
    69ea:	18d3      	adds	r3, r2, r3
    69ec:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    69ee:	697b      	ldr	r3, [r7, #20]
    69f0:	7cdb      	ldrb	r3, [r3, #19]
    69f2:	2207      	movs	r2, #7
    69f4:	4013      	ands	r3, r2
    69f6:	b2db      	uxtb	r3, r3
    69f8:	2b01      	cmp	r3, #1
    69fa:	d15d      	bne.n	6ab8 <_usb_d_dev_ep_enable+0x150>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    69fc:	2313      	movs	r3, #19
    69fe:	18fb      	adds	r3, r7, r3
    6a00:	781b      	ldrb	r3, [r3, #0]
    6a02:	2277      	movs	r2, #119	; 0x77
    6a04:	4013      	ands	r3, r2
    6a06:	d002      	beq.n	6a0e <_usb_d_dev_ep_enable+0xa6>
			return -USB_ERR_REDO;
    6a08:	2314      	movs	r3, #20
    6a0a:	425b      	negs	r3, r3
    6a0c:	e0e7      	b.n	6bde <_usb_d_dev_ep_enable+0x276>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    6a0e:	231b      	movs	r3, #27
    6a10:	18fb      	adds	r3, r7, r3
    6a12:	7819      	ldrb	r1, [r3, #0]
    6a14:	69fb      	ldr	r3, [r7, #28]
    6a16:	2211      	movs	r2, #17
    6a18:	0018      	movs	r0, r3
    6a1a:	4b77      	ldr	r3, [pc, #476]	; (6bf8 <_usb_d_dev_ep_enable+0x290>)
    6a1c:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    6a1e:	697b      	ldr	r3, [r7, #20]
    6a20:	8a1b      	ldrh	r3, [r3, #16]
    6a22:	039b      	lsls	r3, r3, #14
    6a24:	001a      	movs	r2, r3
    6a26:	4b75      	ldr	r3, [pc, #468]	; (6bfc <_usb_d_dev_ep_enable+0x294>)
    6a28:	401a      	ands	r2, r3
    6a2a:	0014      	movs	r4, r2
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    6a2c:	697b      	ldr	r3, [r7, #20]
    6a2e:	8a1b      	ldrh	r3, [r3, #16]
    6a30:	0018      	movs	r0, r3
    6a32:	4b73      	ldr	r3, [pc, #460]	; (6c00 <_usb_d_dev_ep_enable+0x298>)
    6a34:	4798      	blx	r3
    6a36:	0003      	movs	r3, r0
    6a38:	071b      	lsls	r3, r3, #28
    6a3a:	001a      	movs	r2, r3
    6a3c:	23e0      	movs	r3, #224	; 0xe0
    6a3e:	05db      	lsls	r3, r3, #23
    6a40:	4013      	ands	r3, r2
    6a42:	0022      	movs	r2, r4
    6a44:	431a      	orrs	r2, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    6a46:	68fb      	ldr	r3, [r7, #12]
    6a48:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    6a4a:	68fb      	ldr	r3, [r7, #12]
    6a4c:	3310      	adds	r3, #16
    6a4e:	001c      	movs	r4, r3
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    6a50:	697b      	ldr	r3, [r7, #20]
    6a52:	8a1b      	ldrh	r3, [r3, #16]
    6a54:	049b      	lsls	r3, r3, #18
    6a56:	0c9d      	lsrs	r5, r3, #18
    6a58:	697b      	ldr	r3, [r7, #20]
    6a5a:	8a1b      	ldrh	r3, [r3, #16]
    6a5c:	0018      	movs	r0, r3
    6a5e:	4b68      	ldr	r3, [pc, #416]	; (6c00 <_usb_d_dev_ep_enable+0x298>)
    6a60:	4798      	blx	r3
    6a62:	0003      	movs	r3, r0
    6a64:	071b      	lsls	r3, r3, #28
    6a66:	001a      	movs	r2, r3
    6a68:	23e0      	movs	r3, #224	; 0xe0
    6a6a:	05db      	lsls	r3, r3, #23
    6a6c:	4013      	ands	r3, r2
    6a6e:	432b      	orrs	r3, r5
    6a70:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    6a72:	231b      	movs	r3, #27
    6a74:	18fb      	adds	r3, r7, r3
    6a76:	781b      	ldrb	r3, [r3, #0]
    6a78:	2200      	movs	r2, #0
    6a7a:	2100      	movs	r1, #0
    6a7c:	0018      	movs	r0, r3
    6a7e:	4b61      	ldr	r3, [pc, #388]	; (6c04 <_usb_d_dev_ep_enable+0x29c>)
    6a80:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    6a82:	231b      	movs	r3, #27
    6a84:	18fb      	adds	r3, r7, r3
    6a86:	781b      	ldrb	r3, [r3, #0]
    6a88:	2200      	movs	r2, #0
    6a8a:	2101      	movs	r1, #1
    6a8c:	0018      	movs	r0, r3
    6a8e:	4b5e      	ldr	r3, [pc, #376]	; (6c08 <_usb_d_dev_ep_enable+0x2a0>)
    6a90:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    6a92:	231b      	movs	r3, #27
    6a94:	18fb      	adds	r3, r7, r3
    6a96:	781b      	ldrb	r3, [r3, #0]
    6a98:	2100      	movs	r1, #0
    6a9a:	0018      	movs	r0, r3
    6a9c:	4b5b      	ldr	r3, [pc, #364]	; (6c0c <_usb_d_dev_ep_enable+0x2a4>)
    6a9e:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    6aa0:	231b      	movs	r3, #27
    6aa2:	18fb      	adds	r3, r7, r3
    6aa4:	781b      	ldrb	r3, [r3, #0]
    6aa6:	2101      	movs	r1, #1
    6aa8:	0018      	movs	r0, r3
    6aaa:	4b58      	ldr	r3, [pc, #352]	; (6c0c <_usb_d_dev_ep_enable+0x2a4>)
    6aac:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    6aae:	697b      	ldr	r3, [r7, #20]
    6ab0:	0018      	movs	r0, r3
    6ab2:	4b57      	ldr	r3, [pc, #348]	; (6c10 <_usb_d_dev_ep_enable+0x2a8>)
    6ab4:	4798      	blx	r3
    6ab6:	e091      	b.n	6bdc <_usb_d_dev_ep_enable+0x274>

	} else if (dir) {
    6ab8:	231a      	movs	r3, #26
    6aba:	18fb      	adds	r3, r7, r3
    6abc:	781b      	ldrb	r3, [r3, #0]
    6abe:	2b00      	cmp	r3, #0
    6ac0:	d047      	beq.n	6b52 <_usb_d_dev_ep_enable+0x1ea>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    6ac2:	2313      	movs	r3, #19
    6ac4:	18fb      	adds	r3, r7, r3
    6ac6:	781b      	ldrb	r3, [r3, #0]
    6ac8:	2270      	movs	r2, #112	; 0x70
    6aca:	4013      	ands	r3, r2
    6acc:	d002      	beq.n	6ad4 <_usb_d_dev_ep_enable+0x16c>
			return -USB_ERR_REDO;
    6ace:	2314      	movs	r3, #20
    6ad0:	425b      	negs	r3, r3
    6ad2:	e084      	b.n	6bde <_usb_d_dev_ep_enable+0x276>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    6ad4:	697b      	ldr	r3, [r7, #20]
    6ad6:	7cdb      	ldrb	r3, [r3, #19]
    6ad8:	075b      	lsls	r3, r3, #29
    6ada:	0f5b      	lsrs	r3, r3, #29
    6adc:	b2db      	uxtb	r3, r3
    6ade:	011b      	lsls	r3, r3, #4
    6ae0:	b2db      	uxtb	r3, r3
    6ae2:	2270      	movs	r2, #112	; 0x70
    6ae4:	4013      	ands	r3, r2
    6ae6:	b2d9      	uxtb	r1, r3
    6ae8:	2313      	movs	r3, #19
    6aea:	18fb      	adds	r3, r7, r3
    6aec:	2213      	movs	r2, #19
    6aee:	18ba      	adds	r2, r7, r2
    6af0:	7812      	ldrb	r2, [r2, #0]
    6af2:	430a      	orrs	r2, r1
    6af4:	701a      	strb	r2, [r3, #0]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    6af6:	2313      	movs	r3, #19
    6af8:	18fb      	adds	r3, r7, r3
    6afa:	781a      	ldrb	r2, [r3, #0]
    6afc:	231b      	movs	r3, #27
    6afe:	18fb      	adds	r3, r7, r3
    6b00:	7819      	ldrb	r1, [r3, #0]
    6b02:	69fb      	ldr	r3, [r7, #28]
    6b04:	0018      	movs	r0, r3
    6b06:	4b3c      	ldr	r3, [pc, #240]	; (6bf8 <_usb_d_dev_ep_enable+0x290>)
    6b08:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    6b0a:	68fb      	ldr	r3, [r7, #12]
    6b0c:	3310      	adds	r3, #16
    6b0e:	001c      	movs	r4, r3
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    6b10:	697b      	ldr	r3, [r7, #20]
    6b12:	8a1b      	ldrh	r3, [r3, #16]
    6b14:	049b      	lsls	r3, r3, #18
    6b16:	0c9d      	lsrs	r5, r3, #18
    6b18:	697b      	ldr	r3, [r7, #20]
    6b1a:	8a1b      	ldrh	r3, [r3, #16]
    6b1c:	0018      	movs	r0, r3
    6b1e:	4b38      	ldr	r3, [pc, #224]	; (6c00 <_usb_d_dev_ep_enable+0x298>)
    6b20:	4798      	blx	r3
    6b22:	0003      	movs	r3, r0
    6b24:	071b      	lsls	r3, r3, #28
    6b26:	001a      	movs	r2, r3
    6b28:	23e0      	movs	r3, #224	; 0xe0
    6b2a:	05db      	lsls	r3, r3, #23
    6b2c:	4013      	ands	r3, r2
    6b2e:	432b      	orrs	r3, r5
    6b30:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    6b32:	231b      	movs	r3, #27
    6b34:	18fb      	adds	r3, r7, r3
    6b36:	781b      	ldrb	r3, [r3, #0]
    6b38:	2200      	movs	r2, #0
    6b3a:	2101      	movs	r1, #1
    6b3c:	0018      	movs	r0, r3
    6b3e:	4b32      	ldr	r3, [pc, #200]	; (6c08 <_usb_d_dev_ep_enable+0x2a0>)
    6b40:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    6b42:	231b      	movs	r3, #27
    6b44:	18fb      	adds	r3, r7, r3
    6b46:	781b      	ldrb	r3, [r3, #0]
    6b48:	2101      	movs	r1, #1
    6b4a:	0018      	movs	r0, r3
    6b4c:	4b2f      	ldr	r3, [pc, #188]	; (6c0c <_usb_d_dev_ep_enable+0x2a4>)
    6b4e:	4798      	blx	r3
    6b50:	e044      	b.n	6bdc <_usb_d_dev_ep_enable+0x274>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    6b52:	2313      	movs	r3, #19
    6b54:	18fb      	adds	r3, r7, r3
    6b56:	781b      	ldrb	r3, [r3, #0]
    6b58:	2207      	movs	r2, #7
    6b5a:	4013      	ands	r3, r2
    6b5c:	d002      	beq.n	6b64 <_usb_d_dev_ep_enable+0x1fc>
			return -USB_ERR_REDO;
    6b5e:	2314      	movs	r3, #20
    6b60:	425b      	negs	r3, r3
    6b62:	e03c      	b.n	6bde <_usb_d_dev_ep_enable+0x276>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    6b64:	697b      	ldr	r3, [r7, #20]
    6b66:	7cdb      	ldrb	r3, [r3, #19]
    6b68:	075b      	lsls	r3, r3, #29
    6b6a:	0f5b      	lsrs	r3, r3, #29
    6b6c:	b2db      	uxtb	r3, r3
    6b6e:	0019      	movs	r1, r3
    6b70:	2313      	movs	r3, #19
    6b72:	18fb      	adds	r3, r7, r3
    6b74:	2213      	movs	r2, #19
    6b76:	18ba      	adds	r2, r7, r2
    6b78:	7812      	ldrb	r2, [r2, #0]
    6b7a:	430a      	orrs	r2, r1
    6b7c:	701a      	strb	r2, [r3, #0]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    6b7e:	2313      	movs	r3, #19
    6b80:	18fb      	adds	r3, r7, r3
    6b82:	781a      	ldrb	r2, [r3, #0]
    6b84:	231b      	movs	r3, #27
    6b86:	18fb      	adds	r3, r7, r3
    6b88:	7819      	ldrb	r1, [r3, #0]
    6b8a:	69fb      	ldr	r3, [r7, #28]
    6b8c:	0018      	movs	r0, r3
    6b8e:	4b1a      	ldr	r3, [pc, #104]	; (6bf8 <_usb_d_dev_ep_enable+0x290>)
    6b90:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    6b92:	697b      	ldr	r3, [r7, #20]
    6b94:	8a1b      	ldrh	r3, [r3, #16]
    6b96:	039b      	lsls	r3, r3, #14
    6b98:	001a      	movs	r2, r3
    6b9a:	4b18      	ldr	r3, [pc, #96]	; (6bfc <_usb_d_dev_ep_enable+0x294>)
    6b9c:	401a      	ands	r2, r3
    6b9e:	0014      	movs	r4, r2
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    6ba0:	697b      	ldr	r3, [r7, #20]
    6ba2:	8a1b      	ldrh	r3, [r3, #16]
    6ba4:	0018      	movs	r0, r3
    6ba6:	4b16      	ldr	r3, [pc, #88]	; (6c00 <_usb_d_dev_ep_enable+0x298>)
    6ba8:	4798      	blx	r3
    6baa:	0003      	movs	r3, r0
    6bac:	071b      	lsls	r3, r3, #28
    6bae:	001a      	movs	r2, r3
    6bb0:	23e0      	movs	r3, #224	; 0xe0
    6bb2:	05db      	lsls	r3, r3, #23
    6bb4:	4013      	ands	r3, r2
    6bb6:	0022      	movs	r2, r4
    6bb8:	431a      	orrs	r2, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    6bba:	68fb      	ldr	r3, [r7, #12]
    6bbc:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    6bbe:	231b      	movs	r3, #27
    6bc0:	18fb      	adds	r3, r7, r3
    6bc2:	781b      	ldrb	r3, [r3, #0]
    6bc4:	2200      	movs	r2, #0
    6bc6:	2100      	movs	r1, #0
    6bc8:	0018      	movs	r0, r3
    6bca:	4b0e      	ldr	r3, [pc, #56]	; (6c04 <_usb_d_dev_ep_enable+0x29c>)
    6bcc:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    6bce:	231b      	movs	r3, #27
    6bd0:	18fb      	adds	r3, r7, r3
    6bd2:	781b      	ldrb	r3, [r3, #0]
    6bd4:	2100      	movs	r1, #0
    6bd6:	0018      	movs	r0, r3
    6bd8:	4b0c      	ldr	r3, [pc, #48]	; (6c0c <_usb_d_dev_ep_enable+0x2a4>)
    6bda:	4798      	blx	r3
	}

	return USB_OK;
    6bdc:	2300      	movs	r3, #0
}
    6bde:	0018      	movs	r0, r3
    6be0:	46bd      	mov	sp, r7
    6be2:	b008      	add	sp, #32
    6be4:	bdb0      	pop	{r4, r5, r7, pc}
    6be6:	46c0      	nop			; (mov r8, r8)
    6be8:	41005000 	.word	0x41005000
    6bec:	000053e9 	.word	0x000053e9
    6bf0:	00004909 	.word	0x00004909
    6bf4:	20000ee4 	.word	0x20000ee4
    6bf8:	000048d9 	.word	0x000048d9
    6bfc:	0fffc000 	.word	0x0fffc000
    6c00:	00005375 	.word	0x00005375
    6c04:	00005309 	.word	0x00005309
    6c08:	0000529d 	.word	0x0000529d
    6c0c:	00005265 	.word	0x00005265
    6c10:	00006659 	.word	0x00006659

00006c14 <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    6c14:	b580      	push	{r7, lr}
    6c16:	b084      	sub	sp, #16
    6c18:	af00      	add	r7, sp, #0
    6c1a:	6078      	str	r0, [r7, #4]
    6c1c:	000a      	movs	r2, r1
    6c1e:	1cfb      	adds	r3, r7, #3
    6c20:	701a      	strb	r2, [r3, #0]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    6c22:	687b      	ldr	r3, [r7, #4]
    6c24:	7c9a      	ldrb	r2, [r3, #18]
    6c26:	230f      	movs	r3, #15
    6c28:	18fb      	adds	r3, r7, r3
    6c2a:	210f      	movs	r1, #15
    6c2c:	400a      	ands	r2, r1
    6c2e:	701a      	strb	r2, [r3, #0]
	return _usbd_ep_is_stalled(epn, dir);
    6c30:	1cfb      	adds	r3, r7, #3
    6c32:	781a      	ldrb	r2, [r3, #0]
    6c34:	230f      	movs	r3, #15
    6c36:	18fb      	adds	r3, r7, r3
    6c38:	781b      	ldrb	r3, [r3, #0]
    6c3a:	0011      	movs	r1, r2
    6c3c:	0018      	movs	r0, r3
    6c3e:	4b03      	ldr	r3, [pc, #12]	; (6c4c <_usb_d_dev_ep_stall_get+0x38>)
    6c40:	4798      	blx	r3
    6c42:	0003      	movs	r3, r0
}
    6c44:	0018      	movs	r0, r3
    6c46:	46bd      	mov	sp, r7
    6c48:	b004      	add	sp, #16
    6c4a:	bd80      	pop	{r7, pc}
    6c4c:	00004db9 	.word	0x00004db9

00006c50 <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    6c50:	b580      	push	{r7, lr}
    6c52:	b084      	sub	sp, #16
    6c54:	af00      	add	r7, sp, #0
    6c56:	6078      	str	r0, [r7, #4]
    6c58:	000a      	movs	r2, r1
    6c5a:	1cfb      	adds	r3, r7, #3
    6c5c:	701a      	strb	r2, [r3, #0]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    6c5e:	687b      	ldr	r3, [r7, #4]
    6c60:	7c9a      	ldrb	r2, [r3, #18]
    6c62:	230f      	movs	r3, #15
    6c64:	18fb      	adds	r3, r7, r3
    6c66:	210f      	movs	r1, #15
    6c68:	400a      	ands	r2, r1
    6c6a:	701a      	strb	r2, [r3, #0]
	_usbd_ep_set_stall(epn, dir, true);
    6c6c:	1cfb      	adds	r3, r7, #3
    6c6e:	7819      	ldrb	r1, [r3, #0]
    6c70:	230f      	movs	r3, #15
    6c72:	18fb      	adds	r3, r7, r3
    6c74:	781b      	ldrb	r3, [r3, #0]
    6c76:	2201      	movs	r2, #1
    6c78:	0018      	movs	r0, r3
    6c7a:	4b0b      	ldr	r3, [pc, #44]	; (6ca8 <_usb_d_dev_ep_stall_set+0x58>)
    6c7c:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    6c7e:	1cfb      	adds	r3, r7, #3
    6c80:	781b      	ldrb	r3, [r3, #0]
    6c82:	2220      	movs	r2, #32
    6c84:	409a      	lsls	r2, r3
    6c86:	230f      	movs	r3, #15
    6c88:	18fb      	adds	r3, r7, r3
    6c8a:	781b      	ldrb	r3, [r3, #0]
    6c8c:	0011      	movs	r1, r2
    6c8e:	0018      	movs	r0, r3
    6c90:	4b06      	ldr	r3, [pc, #24]	; (6cac <_usb_d_dev_ep_stall_set+0x5c>)
    6c92:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    6c94:	687b      	ldr	r3, [r7, #4]
    6c96:	7cda      	ldrb	r2, [r3, #19]
    6c98:	2108      	movs	r1, #8
    6c9a:	430a      	orrs	r2, r1
    6c9c:	74da      	strb	r2, [r3, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    6c9e:	2300      	movs	r3, #0
}
    6ca0:	0018      	movs	r0, r3
    6ca2:	46bd      	mov	sp, r7
    6ca4:	b004      	add	sp, #16
    6ca6:	bd80      	pop	{r7, pc}
    6ca8:	00004d4d 	.word	0x00004d4d
    6cac:	00004cb9 	.word	0x00004cb9

00006cb0 <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    6cb0:	b590      	push	{r4, r7, lr}
    6cb2:	b085      	sub	sp, #20
    6cb4:	af00      	add	r7, sp, #0
    6cb6:	6078      	str	r0, [r7, #4]
    6cb8:	000a      	movs	r2, r1
    6cba:	1cfb      	adds	r3, r7, #3
    6cbc:	701a      	strb	r2, [r3, #0]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    6cbe:	687b      	ldr	r3, [r7, #4]
    6cc0:	7c9a      	ldrb	r2, [r3, #18]
    6cc2:	230f      	movs	r3, #15
    6cc4:	18fb      	adds	r3, r7, r3
    6cc6:	210f      	movs	r1, #15
    6cc8:	400a      	ands	r2, r1
    6cca:	701a      	strb	r2, [r3, #0]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    6ccc:	1cfb      	adds	r3, r7, #3
    6cce:	781a      	ldrb	r2, [r3, #0]
    6cd0:	230e      	movs	r3, #14
    6cd2:	18fc      	adds	r4, r7, r3
    6cd4:	230f      	movs	r3, #15
    6cd6:	18fb      	adds	r3, r7, r3
    6cd8:	781b      	ldrb	r3, [r3, #0]
    6cda:	0011      	movs	r1, r2
    6cdc:	0018      	movs	r0, r3
    6cde:	4b31      	ldr	r3, [pc, #196]	; (6da4 <_usb_d_dev_ep_stall_clr+0xf4>)
    6ce0:	4798      	blx	r3
    6ce2:	0003      	movs	r3, r0
    6ce4:	7023      	strb	r3, [r4, #0]
	if (!is_stalled) {
    6ce6:	230e      	movs	r3, #14
    6ce8:	18fb      	adds	r3, r7, r3
    6cea:	781b      	ldrb	r3, [r3, #0]
    6cec:	2201      	movs	r2, #1
    6cee:	4053      	eors	r3, r2
    6cf0:	b2db      	uxtb	r3, r3
    6cf2:	2b00      	cmp	r3, #0
    6cf4:	d001      	beq.n	6cfa <_usb_d_dev_ep_stall_clr+0x4a>
		return ERR_NONE;
    6cf6:	2300      	movs	r3, #0
    6cf8:	e050      	b.n	6d9c <_usb_d_dev_ep_stall_clr+0xec>
	}
	_usbd_ep_set_stall(epn, dir, false);
    6cfa:	1cfb      	adds	r3, r7, #3
    6cfc:	7819      	ldrb	r1, [r3, #0]
    6cfe:	230f      	movs	r3, #15
    6d00:	18fb      	adds	r3, r7, r3
    6d02:	781b      	ldrb	r3, [r3, #0]
    6d04:	2200      	movs	r2, #0
    6d06:	0018      	movs	r0, r3
    6d08:	4b27      	ldr	r3, [pc, #156]	; (6da8 <_usb_d_dev_ep_stall_clr+0xf8>)
    6d0a:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    6d0c:	1cfb      	adds	r3, r7, #3
    6d0e:	781b      	ldrb	r3, [r3, #0]
    6d10:	2220      	movs	r2, #32
    6d12:	409a      	lsls	r2, r3
    6d14:	230f      	movs	r3, #15
    6d16:	18fb      	adds	r3, r7, r3
    6d18:	781b      	ldrb	r3, [r3, #0]
    6d1a:	0011      	movs	r1, r2
    6d1c:	0018      	movs	r0, r3
    6d1e:	4b23      	ldr	r3, [pc, #140]	; (6dac <_usb_d_dev_ep_stall_clr+0xfc>)
    6d20:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    6d22:	1cfb      	adds	r3, r7, #3
    6d24:	781a      	ldrb	r2, [r3, #0]
    6d26:	230f      	movs	r3, #15
    6d28:	18fb      	adds	r3, r7, r3
    6d2a:	781b      	ldrb	r3, [r3, #0]
    6d2c:	0011      	movs	r1, r2
    6d2e:	0018      	movs	r0, r3
    6d30:	4b1f      	ldr	r3, [pc, #124]	; (6db0 <_usb_d_dev_ep_stall_clr+0x100>)
    6d32:	4798      	blx	r3
    6d34:	1e03      	subs	r3, r0, #0
    6d36:	d011      	beq.n	6d5c <_usb_d_dev_ep_stall_clr+0xac>
		_usbd_ep_ack_stall(epn, dir);
    6d38:	1cfb      	adds	r3, r7, #3
    6d3a:	781a      	ldrb	r2, [r3, #0]
    6d3c:	230f      	movs	r3, #15
    6d3e:	18fb      	adds	r3, r7, r3
    6d40:	781b      	ldrb	r3, [r3, #0]
    6d42:	0011      	movs	r1, r2
    6d44:	0018      	movs	r0, r3
    6d46:	4b1b      	ldr	r3, [pc, #108]	; (6db4 <_usb_d_dev_ep_stall_clr+0x104>)
    6d48:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    6d4a:	1cfb      	adds	r3, r7, #3
    6d4c:	7819      	ldrb	r1, [r3, #0]
    6d4e:	230f      	movs	r3, #15
    6d50:	18fb      	adds	r3, r7, r3
    6d52:	781b      	ldrb	r3, [r3, #0]
    6d54:	2200      	movs	r2, #0
    6d56:	0018      	movs	r0, r3
    6d58:	4b17      	ldr	r3, [pc, #92]	; (6db8 <_usb_d_dev_ep_stall_clr+0x108>)
    6d5a:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    6d5c:	687b      	ldr	r3, [r7, #4]
    6d5e:	7cdb      	ldrb	r3, [r3, #19]
    6d60:	2207      	movs	r2, #7
    6d62:	4013      	ands	r3, r2
    6d64:	b2db      	uxtb	r3, r3
    6d66:	2b01      	cmp	r3, #1
    6d68:	d112      	bne.n	6d90 <_usb_d_dev_ep_stall_clr+0xe0>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    6d6a:	230f      	movs	r3, #15
    6d6c:	18fb      	adds	r3, r7, r3
    6d6e:	781b      	ldrb	r3, [r3, #0]
    6d70:	4a12      	ldr	r2, [pc, #72]	; (6dbc <_usb_d_dev_ep_stall_clr+0x10c>)
    6d72:	0019      	movs	r1, r3
    6d74:	0010      	movs	r0, r2
    6d76:	4b12      	ldr	r3, [pc, #72]	; (6dc0 <_usb_d_dev_ep_stall_clr+0x110>)
    6d78:	4798      	blx	r3
    6d7a:	0003      	movs	r3, r0
    6d7c:	001a      	movs	r2, r3
    6d7e:	2330      	movs	r3, #48	; 0x30
    6d80:	4013      	ands	r3, r2
    6d82:	d10a      	bne.n	6d9a <_usb_d_dev_ep_stall_clr+0xea>
			ept->flags.bits.is_stalled = 0;
    6d84:	687b      	ldr	r3, [r7, #4]
    6d86:	7cda      	ldrb	r2, [r3, #19]
    6d88:	2108      	movs	r1, #8
    6d8a:	438a      	bics	r2, r1
    6d8c:	74da      	strb	r2, [r3, #19]
    6d8e:	e004      	b.n	6d9a <_usb_d_dev_ep_stall_clr+0xea>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    6d90:	687b      	ldr	r3, [r7, #4]
    6d92:	7cda      	ldrb	r2, [r3, #19]
    6d94:	2108      	movs	r1, #8
    6d96:	438a      	bics	r2, r1
    6d98:	74da      	strb	r2, [r3, #19]
	}
	return ERR_NONE;
    6d9a:	2300      	movs	r3, #0
}
    6d9c:	0018      	movs	r0, r3
    6d9e:	46bd      	mov	sp, r7
    6da0:	b005      	add	sp, #20
    6da2:	bd90      	pop	{r4, r7, pc}
    6da4:	00004db9 	.word	0x00004db9
    6da8:	00004d4d 	.word	0x00004d4d
    6dac:	00004ce9 	.word	0x00004ce9
    6db0:	00004e05 	.word	0x00004e05
    6db4:	00004e51 	.word	0x00004e51
    6db8:	00004f69 	.word	0x00004f69
    6dbc:	41005000 	.word	0x41005000
    6dc0:	00004767 	.word	0x00004767

00006dc4 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    6dc4:	b580      	push	{r7, lr}
    6dc6:	b086      	sub	sp, #24
    6dc8:	af00      	add	r7, sp, #0
    6dca:	0002      	movs	r2, r0
    6dcc:	1dfb      	adds	r3, r7, #7
    6dce:	701a      	strb	r2, [r3, #0]
    6dd0:	1dbb      	adds	r3, r7, #6
    6dd2:	1c0a      	adds	r2, r1, #0
    6dd4:	701a      	strb	r2, [r3, #0]
	uint8_t               epn = USB_EP_GET_N(ep);
    6dd6:	2313      	movs	r3, #19
    6dd8:	18fb      	adds	r3, r7, r3
    6dda:	1dfa      	adds	r2, r7, #7
    6ddc:	7812      	ldrb	r2, [r2, #0]
    6dde:	210f      	movs	r1, #15
    6de0:	400a      	ands	r2, r1
    6de2:	701a      	strb	r2, [r3, #0]
	bool                  dir = USB_EP_GET_DIR(ep);
    6de4:	1dfb      	adds	r3, r7, #7
    6de6:	781b      	ldrb	r3, [r3, #0]
    6de8:	2280      	movs	r2, #128	; 0x80
    6dea:	401a      	ands	r2, r3
    6dec:	2312      	movs	r3, #18
    6dee:	18fb      	adds	r3, r7, r3
    6df0:	1e51      	subs	r1, r2, #1
    6df2:	418a      	sbcs	r2, r1
    6df4:	701a      	strb	r2, [r3, #0]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    6df6:	2312      	movs	r3, #18
    6df8:	18fb      	adds	r3, r7, r3
    6dfa:	781a      	ldrb	r2, [r3, #0]
    6dfc:	2313      	movs	r3, #19
    6dfe:	18fb      	adds	r3, r7, r3
    6e00:	781b      	ldrb	r3, [r3, #0]
    6e02:	0011      	movs	r1, r2
    6e04:	0018      	movs	r0, r3
    6e06:	4b1c      	ldr	r3, [pc, #112]	; (6e78 <_usb_d_dev_ep_stall+0xb4>)
    6e08:	4798      	blx	r3
    6e0a:	0003      	movs	r3, r0
    6e0c:	60fb      	str	r3, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    6e0e:	2313      	movs	r3, #19
    6e10:	18fb      	adds	r3, r7, r3
    6e12:	781b      	ldrb	r3, [r3, #0]
    6e14:	2b07      	cmp	r3, #7
    6e16:	d902      	bls.n	6e1e <_usb_d_dev_ep_stall+0x5a>
		return -USB_ERR_PARAM;
    6e18:	2312      	movs	r3, #18
    6e1a:	425b      	negs	r3, r3
    6e1c:	e028      	b.n	6e70 <_usb_d_dev_ep_stall+0xac>
	}

	if (USB_EP_STALL_SET == ctrl) {
    6e1e:	1dbb      	adds	r3, r7, #6
    6e20:	781b      	ldrb	r3, [r3, #0]
    6e22:	2b01      	cmp	r3, #1
    6e24:	d10a      	bne.n	6e3c <_usb_d_dev_ep_stall+0x78>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    6e26:	2312      	movs	r3, #18
    6e28:	18fb      	adds	r3, r7, r3
    6e2a:	781a      	ldrb	r2, [r3, #0]
    6e2c:	68fb      	ldr	r3, [r7, #12]
    6e2e:	0011      	movs	r1, r2
    6e30:	0018      	movs	r0, r3
    6e32:	4b12      	ldr	r3, [pc, #72]	; (6e7c <_usb_d_dev_ep_stall+0xb8>)
    6e34:	4798      	blx	r3
    6e36:	0003      	movs	r3, r0
    6e38:	617b      	str	r3, [r7, #20]
    6e3a:	e018      	b.n	6e6e <_usb_d_dev_ep_stall+0xaa>
	} else if (USB_EP_STALL_CLR == ctrl) {
    6e3c:	1dbb      	adds	r3, r7, #6
    6e3e:	781b      	ldrb	r3, [r3, #0]
    6e40:	2b00      	cmp	r3, #0
    6e42:	d10a      	bne.n	6e5a <_usb_d_dev_ep_stall+0x96>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    6e44:	2312      	movs	r3, #18
    6e46:	18fb      	adds	r3, r7, r3
    6e48:	781a      	ldrb	r2, [r3, #0]
    6e4a:	68fb      	ldr	r3, [r7, #12]
    6e4c:	0011      	movs	r1, r2
    6e4e:	0018      	movs	r0, r3
    6e50:	4b0b      	ldr	r3, [pc, #44]	; (6e80 <_usb_d_dev_ep_stall+0xbc>)
    6e52:	4798      	blx	r3
    6e54:	0003      	movs	r3, r0
    6e56:	617b      	str	r3, [r7, #20]
    6e58:	e009      	b.n	6e6e <_usb_d_dev_ep_stall+0xaa>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    6e5a:	2312      	movs	r3, #18
    6e5c:	18fb      	adds	r3, r7, r3
    6e5e:	781a      	ldrb	r2, [r3, #0]
    6e60:	68fb      	ldr	r3, [r7, #12]
    6e62:	0011      	movs	r1, r2
    6e64:	0018      	movs	r0, r3
    6e66:	4b07      	ldr	r3, [pc, #28]	; (6e84 <_usb_d_dev_ep_stall+0xc0>)
    6e68:	4798      	blx	r3
    6e6a:	0003      	movs	r3, r0
    6e6c:	617b      	str	r3, [r7, #20]
	}
	return rc;
    6e6e:	697b      	ldr	r3, [r7, #20]
}
    6e70:	0018      	movs	r0, r3
    6e72:	46bd      	mov	sp, r7
    6e74:	b006      	add	sp, #24
    6e76:	bd80      	pop	{r7, pc}
    6e78:	000053e9 	.word	0x000053e9
    6e7c:	00006c51 	.word	0x00006c51
    6e80:	00006cb1 	.word	0x00006cb1
    6e84:	00006c15 	.word	0x00006c15

00006e88 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    6e88:	b590      	push	{r4, r7, lr}
    6e8a:	b083      	sub	sp, #12
    6e8c:	af00      	add	r7, sp, #0
    6e8e:	6078      	str	r0, [r7, #4]
    6e90:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    6e92:	687b      	ldr	r3, [r7, #4]
    6e94:	7c9b      	ldrb	r3, [r3, #18]
    6e96:	2bff      	cmp	r3, #255	; 0xff
    6e98:	d015      	beq.n	6ec6 <_usb_d_dev_trans_done+0x3e>
    6e9a:	687b      	ldr	r3, [r7, #4]
    6e9c:	7cdb      	ldrb	r3, [r3, #19]
    6e9e:	2240      	movs	r2, #64	; 0x40
    6ea0:	4013      	ands	r3, r2
    6ea2:	b2db      	uxtb	r3, r3
    6ea4:	2b00      	cmp	r3, #0
    6ea6:	d00e      	beq.n	6ec6 <_usb_d_dev_trans_done+0x3e>
		return;
	}
	ept->flags.bits.is_busy = 0;
    6ea8:	687b      	ldr	r3, [r7, #4]
    6eaa:	7cda      	ldrb	r2, [r3, #19]
    6eac:	2140      	movs	r1, #64	; 0x40
    6eae:	438a      	bics	r2, r1
    6eb0:	74da      	strb	r2, [r3, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    6eb2:	4b07      	ldr	r3, [pc, #28]	; (6ed0 <_usb_d_dev_trans_done+0x48>)
    6eb4:	691c      	ldr	r4, [r3, #16]
    6eb6:	687b      	ldr	r3, [r7, #4]
    6eb8:	7c98      	ldrb	r0, [r3, #18]
    6eba:	687b      	ldr	r3, [r7, #4]
    6ebc:	689a      	ldr	r2, [r3, #8]
    6ebe:	683b      	ldr	r3, [r7, #0]
    6ec0:	0019      	movs	r1, r3
    6ec2:	47a0      	blx	r4
    6ec4:	e000      	b.n	6ec8 <_usb_d_dev_trans_done+0x40>
		return;
    6ec6:	46c0      	nop			; (mov r8, r8)
}
    6ec8:	46bd      	mov	sp, r7
    6eca:	b003      	add	sp, #12
    6ecc:	bd90      	pop	{r4, r7, pc}
    6ece:	46c0      	nop			; (mov r8, r8)
    6ed0:	20000d7c 	.word	0x20000d7c

00006ed4 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    6ed4:	b580      	push	{r7, lr}
    6ed6:	b086      	sub	sp, #24
    6ed8:	af00      	add	r7, sp, #0
    6eda:	60f8      	str	r0, [r7, #12]
    6edc:	607a      	str	r2, [r7, #4]
    6ede:	230b      	movs	r3, #11
    6ee0:	18fb      	adds	r3, r7, r3
    6ee2:	1c0a      	adds	r2, r1, #0
    6ee4:	701a      	strb	r2, [r3, #0]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    6ee6:	68fb      	ldr	r3, [r7, #12]
    6ee8:	7c9a      	ldrb	r2, [r3, #18]
    6eea:	2317      	movs	r3, #23
    6eec:	18fb      	adds	r3, r7, r3
    6eee:	210f      	movs	r1, #15
    6ef0:	400a      	ands	r2, r1
    6ef2:	701a      	strb	r2, [r3, #0]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    6ef4:	2314      	movs	r3, #20
    6ef6:	18fb      	adds	r3, r7, r3
    6ef8:	4a25      	ldr	r2, [pc, #148]	; (6f90 <_usb_d_dev_trans_stop+0xbc>)
    6efa:	8812      	ldrh	r2, [r2, #0]
    6efc:	801a      	strh	r2, [r3, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    6efe:	68fb      	ldr	r3, [r7, #12]
    6f00:	7c9b      	ldrb	r3, [r3, #18]
    6f02:	2bff      	cmp	r3, #255	; 0xff
    6f04:	d03f      	beq.n	6f86 <_usb_d_dev_trans_stop+0xb2>
    6f06:	68fb      	ldr	r3, [r7, #12]
    6f08:	7cdb      	ldrb	r3, [r3, #19]
    6f0a:	2240      	movs	r2, #64	; 0x40
    6f0c:	4013      	ands	r3, r2
    6f0e:	b2db      	uxtb	r3, r3
    6f10:	2b00      	cmp	r3, #0
    6f12:	d038      	beq.n	6f86 <_usb_d_dev_trans_stop+0xb2>
		return;
	}
	/* Stop transfer */
	if (dir) {
    6f14:	230b      	movs	r3, #11
    6f16:	18fb      	adds	r3, r7, r3
    6f18:	781b      	ldrb	r3, [r3, #0]
    6f1a:	2b00      	cmp	r3, #0
    6f1c:	d008      	beq.n	6f30 <_usb_d_dev_trans_stop+0x5c>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    6f1e:	2317      	movs	r3, #23
    6f20:	18fb      	adds	r3, r7, r3
    6f22:	781b      	ldrb	r3, [r3, #0]
    6f24:	2200      	movs	r2, #0
    6f26:	2101      	movs	r1, #1
    6f28:	0018      	movs	r0, r3
    6f2a:	4b1a      	ldr	r3, [pc, #104]	; (6f94 <_usb_d_dev_trans_stop+0xc0>)
    6f2c:	4798      	blx	r3
    6f2e:	e007      	b.n	6f40 <_usb_d_dev_trans_stop+0x6c>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    6f30:	2317      	movs	r3, #23
    6f32:	18fb      	adds	r3, r7, r3
    6f34:	781b      	ldrb	r3, [r3, #0]
    6f36:	2200      	movs	r2, #0
    6f38:	2100      	movs	r1, #0
    6f3a:	0018      	movs	r0, r3
    6f3c:	4b16      	ldr	r3, [pc, #88]	; (6f98 <_usb_d_dev_trans_stop+0xc4>)
    6f3e:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    6f40:	230b      	movs	r3, #11
    6f42:	18fb      	adds	r3, r7, r3
    6f44:	781b      	ldrb	r3, [r3, #0]
    6f46:	2214      	movs	r2, #20
    6f48:	18ba      	adds	r2, r7, r2
    6f4a:	5cd3      	ldrb	r3, [r2, r3]
    6f4c:	001a      	movs	r2, r3
    6f4e:	2317      	movs	r3, #23
    6f50:	18fb      	adds	r3, r7, r3
    6f52:	781b      	ldrb	r3, [r3, #0]
    6f54:	0011      	movs	r1, r2
    6f56:	0018      	movs	r0, r3
    6f58:	4b10      	ldr	r3, [pc, #64]	; (6f9c <_usb_d_dev_trans_stop+0xc8>)
    6f5a:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    6f5c:	230b      	movs	r3, #11
    6f5e:	18fb      	adds	r3, r7, r3
    6f60:	781b      	ldrb	r3, [r3, #0]
    6f62:	2214      	movs	r2, #20
    6f64:	18ba      	adds	r2, r7, r2
    6f66:	5cd3      	ldrb	r3, [r2, r3]
    6f68:	001a      	movs	r2, r3
    6f6a:	2317      	movs	r3, #23
    6f6c:	18fb      	adds	r3, r7, r3
    6f6e:	781b      	ldrb	r3, [r3, #0]
    6f70:	0011      	movs	r1, r2
    6f72:	0018      	movs	r0, r3
    6f74:	4b0a      	ldr	r3, [pc, #40]	; (6fa0 <_usb_d_dev_trans_stop+0xcc>)
    6f76:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    6f78:	687a      	ldr	r2, [r7, #4]
    6f7a:	68fb      	ldr	r3, [r7, #12]
    6f7c:	0011      	movs	r1, r2
    6f7e:	0018      	movs	r0, r3
    6f80:	4b08      	ldr	r3, [pc, #32]	; (6fa4 <_usb_d_dev_trans_stop+0xd0>)
    6f82:	4798      	blx	r3
    6f84:	e000      	b.n	6f88 <_usb_d_dev_trans_stop+0xb4>
		return;
    6f86:	46c0      	nop			; (mov r8, r8)
}
    6f88:	46bd      	mov	sp, r7
    6f8a:	b006      	add	sp, #24
    6f8c:	bd80      	pop	{r7, pc}
    6f8e:	46c0      	nop			; (mov r8, r8)
    6f90:	0000fd8c 	.word	0x0000fd8c
    6f94:	0000529d 	.word	0x0000529d
    6f98:	00005309 	.word	0x00005309
    6f9c:	00004c89 	.word	0x00004c89
    6fa0:	00004ce9 	.word	0x00004ce9
    6fa4:	00006e89 	.word	0x00006e89

00006fa8 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    6fa8:	b580      	push	{r7, lr}
    6faa:	b086      	sub	sp, #24
    6fac:	af00      	add	r7, sp, #0
    6fae:	0002      	movs	r2, r0
    6fb0:	6039      	str	r1, [r7, #0]
    6fb2:	1dfb      	adds	r3, r7, #7
    6fb4:	701a      	strb	r2, [r3, #0]
	uint8_t            epn   = USB_EP_GET_N(ep);
    6fb6:	2317      	movs	r3, #23
    6fb8:	18fb      	adds	r3, r7, r3
    6fba:	1dfa      	adds	r2, r7, #7
    6fbc:	7812      	ldrb	r2, [r2, #0]
    6fbe:	210f      	movs	r1, #15
    6fc0:	400a      	ands	r2, r1
    6fc2:	701a      	strb	r2, [r3, #0]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    6fc4:	2317      	movs	r3, #23
    6fc6:	18fb      	adds	r3, r7, r3
    6fc8:	781b      	ldrb	r3, [r3, #0]
    6fca:	015a      	lsls	r2, r3, #5
    6fcc:	4b25      	ldr	r3, [pc, #148]	; (7064 <_usb_d_dev_ep_read_req+0xbc>)
    6fce:	18d3      	adds	r3, r2, r3
    6fd0:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    6fd2:	693b      	ldr	r3, [r7, #16]
    6fd4:	681b      	ldr	r3, [r3, #0]
    6fd6:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    6fd8:	693b      	ldr	r3, [r7, #16]
    6fda:	685b      	ldr	r3, [r3, #4]
    6fdc:	049b      	lsls	r3, r3, #18
    6fde:	0c9b      	lsrs	r3, r3, #18
    6fe0:	b29a      	uxth	r2, r3
    6fe2:	230a      	movs	r3, #10
    6fe4:	18fb      	adds	r3, r7, r3
    6fe6:	801a      	strh	r2, [r3, #0]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    6fe8:	2317      	movs	r3, #23
    6fea:	18fb      	adds	r3, r7, r3
    6fec:	781b      	ldrb	r3, [r3, #0]
    6fee:	2b07      	cmp	r3, #7
    6ff0:	d802      	bhi.n	6ff8 <_usb_d_dev_ep_read_req+0x50>
    6ff2:	683b      	ldr	r3, [r7, #0]
    6ff4:	2b00      	cmp	r3, #0
    6ff6:	d102      	bne.n	6ffe <_usb_d_dev_ep_read_req+0x56>
		return -USB_ERR_PARAM;
    6ff8:	2312      	movs	r3, #18
    6ffa:	425b      	negs	r3, r3
    6ffc:	e02d      	b.n	705a <_usb_d_dev_ep_read_req+0xb2>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    6ffe:	2317      	movs	r3, #23
    7000:	18fb      	adds	r3, r7, r3
    7002:	781b      	ldrb	r3, [r3, #0]
    7004:	0018      	movs	r0, r3
    7006:	4b18      	ldr	r3, [pc, #96]	; (7068 <_usb_d_dev_ep_read_req+0xc0>)
    7008:	4798      	blx	r3
    700a:	0003      	movs	r3, r0
    700c:	001a      	movs	r2, r3
    700e:	2301      	movs	r3, #1
    7010:	4053      	eors	r3, r2
    7012:	b2db      	uxtb	r3, r3
    7014:	2b00      	cmp	r3, #0
    7016:	d002      	beq.n	701e <_usb_d_dev_ep_read_req+0x76>
		return -USB_ERR_FUNC;
    7018:	2313      	movs	r3, #19
    701a:	425b      	negs	r3, r3
    701c:	e01d      	b.n	705a <_usb_d_dev_ep_read_req+0xb2>
	}
	if (!_usbd_ep_is_setup(epn)) {
    701e:	2317      	movs	r3, #23
    7020:	18fb      	adds	r3, r7, r3
    7022:	781b      	ldrb	r3, [r3, #0]
    7024:	0018      	movs	r0, r3
    7026:	4b11      	ldr	r3, [pc, #68]	; (706c <_usb_d_dev_ep_read_req+0xc4>)
    7028:	4798      	blx	r3
    702a:	0003      	movs	r3, r0
    702c:	001a      	movs	r2, r3
    702e:	2301      	movs	r3, #1
    7030:	4053      	eors	r3, r2
    7032:	b2db      	uxtb	r3, r3
    7034:	2b00      	cmp	r3, #0
    7036:	d001      	beq.n	703c <_usb_d_dev_ep_read_req+0x94>
		return ERR_NONE;
    7038:	2300      	movs	r3, #0
    703a:	e00e      	b.n	705a <_usb_d_dev_ep_read_req+0xb2>
	}
	memcpy(req_buf, (void *)addr, 8);
    703c:	68f9      	ldr	r1, [r7, #12]
    703e:	683b      	ldr	r3, [r7, #0]
    7040:	2208      	movs	r2, #8
    7042:	0018      	movs	r0, r3
    7044:	4b0a      	ldr	r3, [pc, #40]	; (7070 <_usb_d_dev_ep_read_req+0xc8>)
    7046:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    7048:	2317      	movs	r3, #23
    704a:	18fb      	adds	r3, r7, r3
    704c:	781b      	ldrb	r3, [r3, #0]
    704e:	0018      	movs	r0, r3
    7050:	4b08      	ldr	r3, [pc, #32]	; (7074 <_usb_d_dev_ep_read_req+0xcc>)
    7052:	4798      	blx	r3

	return bytes;
    7054:	230a      	movs	r3, #10
    7056:	18fb      	adds	r3, r7, r3
    7058:	881b      	ldrh	r3, [r3, #0]
}
    705a:	0018      	movs	r0, r3
    705c:	46bd      	mov	sp, r7
    705e:	b006      	add	sp, #24
    7060:	bd80      	pop	{r7, pc}
    7062:	46c0      	nop			; (mov r8, r8)
    7064:	20000ee4 	.word	0x20000ee4
    7068:	00004d19 	.word	0x00004d19
    706c:	00004f11 	.word	0x00004f11
    7070:	0000a581 	.word	0x0000a581
    7074:	00004f45 	.word	0x00004f45

00007078 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    7078:	b580      	push	{r7, lr}
    707a:	b086      	sub	sp, #24
    707c:	af00      	add	r7, sp, #0
    707e:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    7080:	687b      	ldr	r3, [r7, #4]
    7082:	7a1a      	ldrb	r2, [r3, #8]
    7084:	2316      	movs	r3, #22
    7086:	18fb      	adds	r3, r7, r3
    7088:	210f      	movs	r1, #15
    708a:	400a      	ands	r2, r1
    708c:	701a      	strb	r2, [r3, #0]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    708e:	687b      	ldr	r3, [r7, #4]
    7090:	7a1b      	ldrb	r3, [r3, #8]
    7092:	001a      	movs	r2, r3
    7094:	2380      	movs	r3, #128	; 0x80
    7096:	401a      	ands	r2, r3
    7098:	2315      	movs	r3, #21
    709a:	18fb      	adds	r3, r7, r3
    709c:	1e51      	subs	r1, r2, #1
    709e:	418a      	sbcs	r2, r1
    70a0:	701a      	strb	r2, [r3, #0]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    70a2:	2315      	movs	r3, #21
    70a4:	18fb      	adds	r3, r7, r3
    70a6:	781a      	ldrb	r2, [r3, #0]
    70a8:	2316      	movs	r3, #22
    70aa:	18fb      	adds	r3, r7, r3
    70ac:	781b      	ldrb	r3, [r3, #0]
    70ae:	0011      	movs	r1, r2
    70b0:	0018      	movs	r0, r3
    70b2:	4b75      	ldr	r3, [pc, #468]	; (7288 <_usb_d_dev_ep_trans+0x210>)
    70b4:	4798      	blx	r3
    70b6:	0003      	movs	r3, r0
    70b8:	613b      	str	r3, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    70ba:	693b      	ldr	r3, [r7, #16]
    70bc:	8a1b      	ldrh	r3, [r3, #16]
    70be:	4a73      	ldr	r2, [pc, #460]	; (728c <_usb_d_dev_ep_trans+0x214>)
    70c0:	4293      	cmp	r3, r2
    70c2:	d004      	beq.n	70ce <_usb_d_dev_ep_trans+0x56>
    70c4:	693b      	ldr	r3, [r7, #16]
    70c6:	8a1b      	ldrh	r3, [r3, #16]
    70c8:	3b01      	subs	r3, #1
    70ca:	b29a      	uxth	r2, r3
    70cc:	e000      	b.n	70d0 <_usb_d_dev_ep_trans+0x58>
    70ce:	4a6f      	ldr	r2, [pc, #444]	; (728c <_usb_d_dev_ep_trans+0x214>)
    70d0:	230e      	movs	r3, #14
    70d2:	18fb      	adds	r3, r7, r3
    70d4:	801a      	strh	r2, [r3, #0]
	bool     size_n_aligned = (trans->size & size_mask);
    70d6:	687b      	ldr	r3, [r7, #4]
    70d8:	685b      	ldr	r3, [r3, #4]
    70da:	220e      	movs	r2, #14
    70dc:	18ba      	adds	r2, r7, r2
    70de:	8812      	ldrh	r2, [r2, #0]
    70e0:	401a      	ands	r2, r3
    70e2:	230d      	movs	r3, #13
    70e4:	18fb      	adds	r3, r7, r3
    70e6:	1e51      	subs	r1, r2, #1
    70e8:	418a      	sbcs	r2, r1
    70ea:	701a      	strb	r2, [r3, #0]

	bool use_cache = false;
    70ec:	2317      	movs	r3, #23
    70ee:	18fb      	adds	r3, r7, r3
    70f0:	2200      	movs	r2, #0
    70f2:	701a      	strb	r2, [r3, #0]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    70f4:	2316      	movs	r3, #22
    70f6:	18fb      	adds	r3, r7, r3
    70f8:	781b      	ldrb	r3, [r3, #0]
    70fa:	2b07      	cmp	r3, #7
    70fc:	d902      	bls.n	7104 <_usb_d_dev_ep_trans+0x8c>
		return -USB_ERR_PARAM;
    70fe:	2312      	movs	r3, #18
    7100:	425b      	negs	r3, r3
    7102:	e0bc      	b.n	727e <_usb_d_dev_ep_trans+0x206>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    7104:	687b      	ldr	r3, [r7, #4]
    7106:	681b      	ldr	r3, [r3, #0]
    7108:	001a      	movs	r2, r3
    710a:	4b61      	ldr	r3, [pc, #388]	; (7290 <_usb_d_dev_ep_trans+0x218>)
    710c:	429a      	cmp	r2, r3
    710e:	d91c      	bls.n	714a <_usb_d_dev_ep_trans+0xd2>
    7110:	687b      	ldr	r3, [r7, #4]
    7112:	681b      	ldr	r3, [r3, #0]
    7114:	001a      	movs	r2, r3
    7116:	687b      	ldr	r3, [r7, #4]
    7118:	685b      	ldr	r3, [r3, #4]
    711a:	18d3      	adds	r3, r2, r3
    711c:	4a5d      	ldr	r2, [pc, #372]	; (7294 <_usb_d_dev_ep_trans+0x21c>)
    711e:	4293      	cmp	r3, r2
    7120:	d813      	bhi.n	714a <_usb_d_dev_ep_trans+0xd2>
    7122:	687b      	ldr	r3, [r7, #4]
    7124:	681b      	ldr	r3, [r3, #0]
    7126:	001a      	movs	r2, r3
    7128:	2303      	movs	r3, #3
    712a:	4013      	ands	r3, r2
    712c:	d10d      	bne.n	714a <_usb_d_dev_ep_trans+0xd2>
	    || (!dir && (trans->size < ept->size))) {
    712e:	2315      	movs	r3, #21
    7130:	18fb      	adds	r3, r7, r3
    7132:	781b      	ldrb	r3, [r3, #0]
    7134:	2201      	movs	r2, #1
    7136:	4053      	eors	r3, r2
    7138:	b2db      	uxtb	r3, r3
    713a:	2b00      	cmp	r3, #0
    713c:	d010      	beq.n	7160 <_usb_d_dev_ep_trans+0xe8>
    713e:	687b      	ldr	r3, [r7, #4]
    7140:	685b      	ldr	r3, [r3, #4]
    7142:	693a      	ldr	r2, [r7, #16]
    7144:	8a12      	ldrh	r2, [r2, #16]
    7146:	4293      	cmp	r3, r2
    7148:	d20a      	bcs.n	7160 <_usb_d_dev_ep_trans+0xe8>
		if (!ept->cache) {
    714a:	693b      	ldr	r3, [r7, #16]
    714c:	68db      	ldr	r3, [r3, #12]
    714e:	2b00      	cmp	r3, #0
    7150:	d102      	bne.n	7158 <_usb_d_dev_ep_trans+0xe0>
			return -USB_ERR_FUNC;
    7152:	2313      	movs	r3, #19
    7154:	425b      	negs	r3, r3
    7156:	e092      	b.n	727e <_usb_d_dev_ep_trans+0x206>
		}
		/* Use cache all the time. */
		use_cache = true;
    7158:	2317      	movs	r3, #23
    715a:	18fb      	adds	r3, r7, r3
    715c:	2201      	movs	r2, #1
    715e:	701a      	strb	r2, [r3, #0]
	}
	if (!dir && size_n_aligned) {
    7160:	2315      	movs	r3, #21
    7162:	18fb      	adds	r3, r7, r3
    7164:	781b      	ldrb	r3, [r3, #0]
    7166:	2201      	movs	r2, #1
    7168:	4053      	eors	r3, r2
    716a:	b2db      	uxtb	r3, r3
    716c:	2b00      	cmp	r3, #0
    716e:	d00b      	beq.n	7188 <_usb_d_dev_ep_trans+0x110>
    7170:	230d      	movs	r3, #13
    7172:	18fb      	adds	r3, r7, r3
    7174:	781b      	ldrb	r3, [r3, #0]
    7176:	2b00      	cmp	r3, #0
    7178:	d006      	beq.n	7188 <_usb_d_dev_ep_trans+0x110>
		if (!ept->cache) {
    717a:	693b      	ldr	r3, [r7, #16]
    717c:	68db      	ldr	r3, [r3, #12]
    717e:	2b00      	cmp	r3, #0
    7180:	d102      	bne.n	7188 <_usb_d_dev_ep_trans+0x110>
			return -USB_ERR_PARAM;
    7182:	2312      	movs	r3, #18
    7184:	425b      	negs	r3, r3
    7186:	e07a      	b.n	727e <_usb_d_dev_ep_trans+0x206>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    7188:	693b      	ldr	r3, [r7, #16]
    718a:	7cdb      	ldrb	r3, [r3, #19]
    718c:	2208      	movs	r2, #8
    718e:	4013      	ands	r3, r2
    7190:	b2db      	uxtb	r3, r3
    7192:	2b00      	cmp	r3, #0
    7194:	d001      	beq.n	719a <_usb_d_dev_ep_trans+0x122>
		return USB_HALTED;
    7196:	2302      	movs	r3, #2
    7198:	e071      	b.n	727e <_usb_d_dev_ep_trans+0x206>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    719a:	2308      	movs	r3, #8
    719c:	18fb      	adds	r3, r7, r3
    719e:	0018      	movs	r0, r3
    71a0:	4b3d      	ldr	r3, [pc, #244]	; (7298 <_usb_d_dev_ep_trans+0x220>)
    71a2:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    71a4:	693b      	ldr	r3, [r7, #16]
    71a6:	7cdb      	ldrb	r3, [r3, #19]
    71a8:	2240      	movs	r2, #64	; 0x40
    71aa:	4013      	ands	r3, r2
    71ac:	b2db      	uxtb	r3, r3
    71ae:	2b00      	cmp	r3, #0
    71b0:	d006      	beq.n	71c0 <_usb_d_dev_ep_trans+0x148>
		atomic_leave_critical(&flags);
    71b2:	2308      	movs	r3, #8
    71b4:	18fb      	adds	r3, r7, r3
    71b6:	0018      	movs	r0, r3
    71b8:	4b38      	ldr	r3, [pc, #224]	; (729c <_usb_d_dev_ep_trans+0x224>)
    71ba:	4798      	blx	r3
		return USB_BUSY;
    71bc:	2301      	movs	r3, #1
    71be:	e05e      	b.n	727e <_usb_d_dev_ep_trans+0x206>
	}
	ept->flags.bits.is_busy = 1;
    71c0:	693b      	ldr	r3, [r7, #16]
    71c2:	7cda      	ldrb	r2, [r3, #19]
    71c4:	2140      	movs	r1, #64	; 0x40
    71c6:	430a      	orrs	r2, r1
    71c8:	74da      	strb	r2, [r3, #19]
	atomic_leave_critical(&flags);
    71ca:	2308      	movs	r3, #8
    71cc:	18fb      	adds	r3, r7, r3
    71ce:	0018      	movs	r0, r3
    71d0:	4b32      	ldr	r3, [pc, #200]	; (729c <_usb_d_dev_ep_trans+0x224>)
    71d2:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    71d4:	687b      	ldr	r3, [r7, #4]
    71d6:	681a      	ldr	r2, [r3, #0]
    71d8:	693b      	ldr	r3, [r7, #16]
    71da:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    71dc:	687b      	ldr	r3, [r7, #4]
    71de:	685a      	ldr	r2, [r3, #4]
    71e0:	693b      	ldr	r3, [r7, #16]
    71e2:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    71e4:	693b      	ldr	r3, [r7, #16]
    71e6:	2200      	movs	r2, #0
    71e8:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    71ea:	693b      	ldr	r3, [r7, #16]
    71ec:	2215      	movs	r2, #21
    71ee:	18ba      	adds	r2, r7, r2
    71f0:	7812      	ldrb	r2, [r2, #0]
    71f2:	01d0      	lsls	r0, r2, #7
    71f4:	7cda      	ldrb	r2, [r3, #19]
    71f6:	217f      	movs	r1, #127	; 0x7f
    71f8:	400a      	ands	r2, r1
    71fa:	1c11      	adds	r1, r2, #0
    71fc:	1c02      	adds	r2, r0, #0
    71fe:	430a      	orrs	r2, r1
    7200:	74da      	strb	r2, [r3, #19]
	ept->flags.bits.use_cache = use_cache;
    7202:	693b      	ldr	r3, [r7, #16]
    7204:	2217      	movs	r2, #23
    7206:	18ba      	adds	r2, r7, r2
    7208:	7812      	ldrb	r2, [r2, #0]
    720a:	2101      	movs	r1, #1
    720c:	400a      	ands	r2, r1
    720e:	0150      	lsls	r0, r2, #5
    7210:	7cda      	ldrb	r2, [r3, #19]
    7212:	2120      	movs	r1, #32
    7214:	438a      	bics	r2, r1
    7216:	1c11      	adds	r1, r2, #0
    7218:	1c02      	adds	r2, r0, #0
    721a:	430a      	orrs	r2, r1
    721c:	74da      	strb	r2, [r3, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    721e:	687b      	ldr	r3, [r7, #4]
    7220:	7a5b      	ldrb	r3, [r3, #9]
    7222:	2b00      	cmp	r3, #0
    7224:	d009      	beq.n	723a <_usb_d_dev_ep_trans+0x1c2>
    7226:	230d      	movs	r3, #13
    7228:	18fb      	adds	r3, r7, r3
    722a:	781b      	ldrb	r3, [r3, #0]
    722c:	2201      	movs	r2, #1
    722e:	4053      	eors	r3, r2
    7230:	b2db      	uxtb	r3, r3
    7232:	2b00      	cmp	r3, #0
    7234:	d001      	beq.n	723a <_usb_d_dev_ep_trans+0x1c2>
    7236:	2301      	movs	r3, #1
    7238:	e000      	b.n	723c <_usb_d_dev_ep_trans+0x1c4>
    723a:	2300      	movs	r3, #0
    723c:	b2db      	uxtb	r3, r3
    723e:	1c1a      	adds	r2, r3, #0
    7240:	2301      	movs	r3, #1
    7242:	4013      	ands	r3, r2
    7244:	b2da      	uxtb	r2, r3
    7246:	693b      	ldr	r3, [r7, #16]
    7248:	2101      	movs	r1, #1
    724a:	400a      	ands	r2, r1
    724c:	0110      	lsls	r0, r2, #4
    724e:	7cda      	ldrb	r2, [r3, #19]
    7250:	2110      	movs	r1, #16
    7252:	438a      	bics	r2, r1
    7254:	1c11      	adds	r1, r2, #0
    7256:	1c02      	adds	r2, r0, #0
    7258:	430a      	orrs	r2, r1
    725a:	74da      	strb	r2, [r3, #19]

	if (dir) {
    725c:	2315      	movs	r3, #21
    725e:	18fb      	adds	r3, r7, r3
    7260:	781b      	ldrb	r3, [r3, #0]
    7262:	2b00      	cmp	r3, #0
    7264:	d005      	beq.n	7272 <_usb_d_dev_ep_trans+0x1fa>
		_usb_d_dev_in_next(ept, false);
    7266:	693b      	ldr	r3, [r7, #16]
    7268:	2100      	movs	r1, #0
    726a:	0018      	movs	r0, r3
    726c:	4b0c      	ldr	r3, [pc, #48]	; (72a0 <_usb_d_dev_ep_trans+0x228>)
    726e:	4798      	blx	r3
    7270:	e004      	b.n	727c <_usb_d_dev_ep_trans+0x204>
	} else {
		_usb_d_dev_out_next(ept, false);
    7272:	693b      	ldr	r3, [r7, #16]
    7274:	2100      	movs	r1, #0
    7276:	0018      	movs	r0, r3
    7278:	4b0a      	ldr	r3, [pc, #40]	; (72a4 <_usb_d_dev_ep_trans+0x22c>)
    727a:	4798      	blx	r3
	}

	return ERR_NONE;
    727c:	2300      	movs	r3, #0
}
    727e:	0018      	movs	r0, r3
    7280:	46bd      	mov	sp, r7
    7282:	b006      	add	sp, #24
    7284:	bd80      	pop	{r7, pc}
    7286:	46c0      	nop			; (mov r8, r8)
    7288:	000053e9 	.word	0x000053e9
    728c:	000003ff 	.word	0x000003ff
    7290:	1fffffff 	.word	0x1fffffff
    7294:	20007fff 	.word	0x20007fff
    7298:	000073dd 	.word	0x000073dd
    729c:	000073ff 	.word	0x000073ff
    72a0:	00005725 	.word	0x00005725
    72a4:	000059c5 	.word	0x000059c5

000072a8 <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    72a8:	b580      	push	{r7, lr}
    72aa:	b084      	sub	sp, #16
    72ac:	af00      	add	r7, sp, #0
    72ae:	0002      	movs	r2, r0
    72b0:	6039      	str	r1, [r7, #0]
    72b2:	1dfb      	adds	r3, r7, #7
    72b4:	701a      	strb	r2, [r3, #0]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    72b6:	683b      	ldr	r3, [r7, #0]
    72b8:	2b00      	cmp	r3, #0
    72ba:	d001      	beq.n	72c0 <_usb_d_dev_register_callback+0x18>
    72bc:	683b      	ldr	r3, [r7, #0]
    72be:	e000      	b.n	72c2 <_usb_d_dev_register_callback+0x1a>
    72c0:	4b0a      	ldr	r3, [pc, #40]	; (72ec <_usb_d_dev_register_callback+0x44>)
    72c2:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    72c4:	1dfb      	adds	r3, r7, #7
    72c6:	781b      	ldrb	r3, [r3, #0]
    72c8:	2b01      	cmp	r3, #1
    72ca:	d103      	bne.n	72d4 <_usb_d_dev_register_callback+0x2c>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    72cc:	4b08      	ldr	r3, [pc, #32]	; (72f0 <_usb_d_dev_register_callback+0x48>)
    72ce:	68fa      	ldr	r2, [r7, #12]
    72d0:	605a      	str	r2, [r3, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    72d2:	e006      	b.n	72e2 <_usb_d_dev_register_callback+0x3a>
	} else if (type == USB_D_CB_SOF) {
    72d4:	1dfb      	adds	r3, r7, #7
    72d6:	781b      	ldrb	r3, [r3, #0]
    72d8:	2b00      	cmp	r3, #0
    72da:	d102      	bne.n	72e2 <_usb_d_dev_register_callback+0x3a>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    72dc:	4b04      	ldr	r3, [pc, #16]	; (72f0 <_usb_d_dev_register_callback+0x48>)
    72de:	68fa      	ldr	r2, [r7, #12]
    72e0:	601a      	str	r2, [r3, #0]
}
    72e2:	46c0      	nop			; (mov r8, r8)
    72e4:	46bd      	mov	sp, r7
    72e6:	b004      	add	sp, #16
    72e8:	bd80      	pop	{r7, pc}
    72ea:	46c0      	nop			; (mov r8, r8)
    72ec:	00004b29 	.word	0x00004b29
    72f0:	20000d7c 	.word	0x20000d7c

000072f4 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    72f4:	b580      	push	{r7, lr}
    72f6:	b084      	sub	sp, #16
    72f8:	af00      	add	r7, sp, #0
    72fa:	0002      	movs	r2, r0
    72fc:	6039      	str	r1, [r7, #0]
    72fe:	1dfb      	adds	r3, r7, #7
    7300:	701a      	strb	r2, [r3, #0]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    7302:	683b      	ldr	r3, [r7, #0]
    7304:	2b00      	cmp	r3, #0
    7306:	d001      	beq.n	730c <_usb_d_dev_register_ep_callback+0x18>
    7308:	683b      	ldr	r3, [r7, #0]
    730a:	e000      	b.n	730e <_usb_d_dev_register_ep_callback+0x1a>
    730c:	4b0e      	ldr	r3, [pc, #56]	; (7348 <_usb_d_dev_register_ep_callback+0x54>)
    730e:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    7310:	1dfb      	adds	r3, r7, #7
    7312:	781b      	ldrb	r3, [r3, #0]
    7314:	2b00      	cmp	r3, #0
    7316:	d103      	bne.n	7320 <_usb_d_dev_register_ep_callback+0x2c>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    7318:	4b0c      	ldr	r3, [pc, #48]	; (734c <_usb_d_dev_register_ep_callback+0x58>)
    731a:	68fa      	ldr	r2, [r7, #12]
    731c:	609a      	str	r2, [r3, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    731e:	e00e      	b.n	733e <_usb_d_dev_register_ep_callback+0x4a>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    7320:	1dfb      	adds	r3, r7, #7
    7322:	781b      	ldrb	r3, [r3, #0]
    7324:	2b01      	cmp	r3, #1
    7326:	d103      	bne.n	7330 <_usb_d_dev_register_ep_callback+0x3c>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    7328:	4b08      	ldr	r3, [pc, #32]	; (734c <_usb_d_dev_register_ep_callback+0x58>)
    732a:	68fa      	ldr	r2, [r7, #12]
    732c:	60da      	str	r2, [r3, #12]
}
    732e:	e006      	b.n	733e <_usb_d_dev_register_ep_callback+0x4a>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    7330:	1dfb      	adds	r3, r7, #7
    7332:	781b      	ldrb	r3, [r3, #0]
    7334:	2b02      	cmp	r3, #2
    7336:	d102      	bne.n	733e <_usb_d_dev_register_ep_callback+0x4a>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    7338:	4b04      	ldr	r3, [pc, #16]	; (734c <_usb_d_dev_register_ep_callback+0x58>)
    733a:	68fa      	ldr	r2, [r7, #12]
    733c:	611a      	str	r2, [r3, #16]
}
    733e:	46c0      	nop			; (mov r8, r8)
    7340:	46bd      	mov	sp, r7
    7342:	b004      	add	sp, #16
    7344:	bd80      	pop	{r7, pc}
    7346:	46c0      	nop			; (mov r8, r8)
    7348:	00004b29 	.word	0x00004b29
    734c:	20000d7c 	.word	0x20000d7c

00007350 <USB_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_Handler(void)
{
    7350:	b580      	push	{r7, lr}
    7352:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    7354:	4b02      	ldr	r3, [pc, #8]	; (7360 <USB_Handler+0x10>)
    7356:	4798      	blx	r3
}
    7358:	46c0      	nop			; (mov r8, r8)
    735a:	46bd      	mov	sp, r7
    735c:	bd80      	pop	{r7, pc}
    735e:	46c0      	nop			; (mov r8, r8)
    7360:	00006351 	.word	0x00006351

00007364 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    7364:	b580      	push	{r7, lr}
    7366:	af00      	add	r7, sp, #0

	usart_sync_enable(&TARGET_IO);
    7368:	4b05      	ldr	r3, [pc, #20]	; (7380 <stdio_redirect_init+0x1c>)
    736a:	0018      	movs	r0, r3
    736c:	4b05      	ldr	r3, [pc, #20]	; (7384 <stdio_redirect_init+0x20>)
    736e:	4798      	blx	r3
	stdio_io_init(&TARGET_IO.io);
    7370:	4b03      	ldr	r3, [pc, #12]	; (7380 <stdio_redirect_init+0x1c>)
    7372:	0018      	movs	r0, r3
    7374:	4b04      	ldr	r3, [pc, #16]	; (7388 <stdio_redirect_init+0x24>)
    7376:	4798      	blx	r3
}
    7378:	46c0      	nop			; (mov r8, r8)
    737a:	46bd      	mov	sp, r7
    737c:	bd80      	pop	{r7, pc}
    737e:	46c0      	nop			; (mov r8, r8)
    7380:	200010fc 	.word	0x200010fc
    7384:	00001bfd 	.word	0x00001bfd
    7388:	00007421 	.word	0x00007421

0000738c <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    738c:	b580      	push	{r7, lr}
    738e:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    7390:	4b07      	ldr	r3, [pc, #28]	; (73b0 <cdc_device_acm_init+0x24>)
    7392:	0018      	movs	r0, r3
    7394:	4b07      	ldr	r3, [pc, #28]	; (73b4 <cdc_device_acm_init+0x28>)
    7396:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    7398:	4b07      	ldr	r3, [pc, #28]	; (73b8 <cdc_device_acm_init+0x2c>)
    739a:	4798      	blx	r3

	usbdc_start(single_desc);
    739c:	4b07      	ldr	r3, [pc, #28]	; (73bc <cdc_device_acm_init+0x30>)
    739e:	0018      	movs	r0, r3
    73a0:	4b07      	ldr	r3, [pc, #28]	; (73c0 <cdc_device_acm_init+0x34>)
    73a2:	4798      	blx	r3
	usbdc_attach();
    73a4:	4b07      	ldr	r3, [pc, #28]	; (73c4 <cdc_device_acm_init+0x38>)
    73a6:	4798      	blx	r3
}
    73a8:	46c0      	nop			; (mov r8, r8)
    73aa:	46bd      	mov	sp, r7
    73ac:	bd80      	pop	{r7, pc}
    73ae:	46c0      	nop			; (mov r8, r8)
    73b0:	20001024 	.word	0x20001024
    73b4:	000087f1 	.word	0x000087f1
    73b8:	000079d9 	.word	0x000079d9
    73bc:	20000074 	.word	0x20000074
    73c0:	00008895 	.word	0x00008895
    73c4:	000088e5 	.word	0x000088e5

000073c8 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    73c8:	b580      	push	{r7, lr}
    73ca:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    73cc:	4b02      	ldr	r3, [pc, #8]	; (73d8 <usb_init+0x10>)
    73ce:	4798      	blx	r3
}
    73d0:	46c0      	nop			; (mov r8, r8)
    73d2:	46bd      	mov	sp, r7
    73d4:	bd80      	pop	{r7, pc}
    73d6:	46c0      	nop			; (mov r8, r8)
    73d8:	0000738d 	.word	0x0000738d

000073dc <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    73dc:	b580      	push	{r7, lr}
    73de:	b084      	sub	sp, #16
    73e0:	af00      	add	r7, sp, #0
    73e2:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    73e4:	f3ef 8310 	mrs	r3, PRIMASK
    73e8:	60fb      	str	r3, [r7, #12]
  return(result);
    73ea:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    73ec:	687b      	ldr	r3, [r7, #4]
    73ee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    73f0:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    73f2:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    73f6:	46c0      	nop			; (mov r8, r8)
    73f8:	46bd      	mov	sp, r7
    73fa:	b004      	add	sp, #16
    73fc:	bd80      	pop	{r7, pc}

000073fe <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    73fe:	b580      	push	{r7, lr}
    7400:	b084      	sub	sp, #16
    7402:	af00      	add	r7, sp, #0
    7404:	6078      	str	r0, [r7, #4]
    7406:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    740a:	687b      	ldr	r3, [r7, #4]
    740c:	681b      	ldr	r3, [r3, #0]
    740e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    7410:	68fb      	ldr	r3, [r7, #12]
    7412:	f383 8810 	msr	PRIMASK, r3
}
    7416:	46c0      	nop			; (mov r8, r8)
    7418:	46bd      	mov	sp, r7
    741a:	b004      	add	sp, #16
    741c:	bd80      	pop	{r7, pc}
	...

00007420 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    7420:	b580      	push	{r7, lr}
    7422:	b082      	sub	sp, #8
    7424:	af00      	add	r7, sp, #0
    7426:	6078      	str	r0, [r7, #4]
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    7428:	4b0a      	ldr	r3, [pc, #40]	; (7454 <stdio_io_init+0x34>)
    742a:	681b      	ldr	r3, [r3, #0]
    742c:	689b      	ldr	r3, [r3, #8]
    742e:	2100      	movs	r1, #0
    7430:	0018      	movs	r0, r3
    7432:	4b09      	ldr	r3, [pc, #36]	; (7458 <stdio_io_init+0x38>)
    7434:	4798      	blx	r3
	setbuf(stdin, NULL);
    7436:	4b07      	ldr	r3, [pc, #28]	; (7454 <stdio_io_init+0x34>)
    7438:	681b      	ldr	r3, [r3, #0]
    743a:	685b      	ldr	r3, [r3, #4]
    743c:	2100      	movs	r1, #0
    743e:	0018      	movs	r0, r3
    7440:	4b05      	ldr	r3, [pc, #20]	; (7458 <stdio_io_init+0x38>)
    7442:	4798      	blx	r3
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    7444:	4b05      	ldr	r3, [pc, #20]	; (745c <stdio_io_init+0x3c>)
    7446:	687a      	ldr	r2, [r7, #4]
    7448:	601a      	str	r2, [r3, #0]
}
    744a:	46c0      	nop			; (mov r8, r8)
    744c:	46bd      	mov	sp, r7
    744e:	b002      	add	sp, #8
    7450:	bd80      	pop	{r7, pc}
    7452:	46c0      	nop			; (mov r8, r8)
    7454:	20000084 	.word	0x20000084
    7458:	0000a6bd 	.word	0x0000a6bd
    745c:	20001064 	.word	0x20001064

00007460 <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    7460:	b580      	push	{r7, lr}
    7462:	b082      	sub	sp, #8
    7464:	af00      	add	r7, sp, #0
    7466:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    7468:	687b      	ldr	r3, [r7, #4]
    746a:	781b      	ldrb	r3, [r3, #0]
    746c:	b29a      	uxth	r2, r3
    746e:	687b      	ldr	r3, [r7, #4]
    7470:	3301      	adds	r3, #1
    7472:	781b      	ldrb	r3, [r3, #0]
    7474:	b29b      	uxth	r3, r3
    7476:	021b      	lsls	r3, r3, #8
    7478:	b29b      	uxth	r3, r3
    747a:	18d3      	adds	r3, r2, r3
    747c:	b29b      	uxth	r3, r3
}
    747e:	0018      	movs	r0, r3
    7480:	46bd      	mov	sp, r7
    7482:	b002      	add	sp, #8
    7484:	bd80      	pop	{r7, pc}

00007486 <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    7486:	b580      	push	{r7, lr}
    7488:	b082      	sub	sp, #8
    748a:	af00      	add	r7, sp, #0
    748c:	6078      	str	r0, [r7, #4]
	return desc[0];
    748e:	687b      	ldr	r3, [r7, #4]
    7490:	781b      	ldrb	r3, [r3, #0]
}
    7492:	0018      	movs	r0, r3
    7494:	46bd      	mov	sp, r7
    7496:	b002      	add	sp, #8
    7498:	bd80      	pop	{r7, pc}
	...

0000749c <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    749c:	b580      	push	{r7, lr}
    749e:	b082      	sub	sp, #8
    74a0:	af00      	add	r7, sp, #0
    74a2:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    74a4:	687b      	ldr	r3, [r7, #4]
    74a6:	0018      	movs	r0, r3
    74a8:	4b04      	ldr	r3, [pc, #16]	; (74bc <usb_desc_next+0x20>)
    74aa:	4798      	blx	r3
    74ac:	0003      	movs	r3, r0
    74ae:	001a      	movs	r2, r3
    74b0:	687b      	ldr	r3, [r7, #4]
    74b2:	189b      	adds	r3, r3, r2
}
    74b4:	0018      	movs	r0, r3
    74b6:	46bd      	mov	sp, r7
    74b8:	b002      	add	sp, #8
    74ba:	bd80      	pop	{r7, pc}
    74bc:	00007487 	.word	0x00007487

000074c0 <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    74c0:	b580      	push	{r7, lr}
    74c2:	b08c      	sub	sp, #48	; 0x30
    74c4:	af00      	add	r7, sp, #0
    74c6:	6078      	str	r0, [r7, #4]
    74c8:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    74ca:	687b      	ldr	r3, [r7, #4]
    74cc:	689b      	ldr	r3, [r3, #8]
    74ce:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    74d0:	683b      	ldr	r3, [r7, #0]
    74d2:	681b      	ldr	r3, [r3, #0]
    74d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    74d6:	2327      	movs	r3, #39	; 0x27
    74d8:	18fb      	adds	r3, r7, r3
    74da:	2200      	movs	r2, #0
    74dc:	701a      	strb	r2, [r3, #0]
    74de:	e0b7      	b.n	7650 <cdcdf_acm_enable+0x190>
		if (NULL == ifc) {
    74e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    74e2:	2b00      	cmp	r3, #0
    74e4:	d102      	bne.n	74ec <cdcdf_acm_enable+0x2c>
			return ERR_NOT_FOUND;
    74e6:	230a      	movs	r3, #10
    74e8:	425b      	negs	r3, r3
    74ea:	e0bb      	b.n	7664 <cdcdf_acm_enable+0x1a4>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    74ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    74ee:	789a      	ldrb	r2, [r3, #2]
    74f0:	230c      	movs	r3, #12
    74f2:	18fb      	adds	r3, r7, r3
    74f4:	709a      	strb	r2, [r3, #2]
		ifc_desc.bInterfaceClass  = ifc[5];
    74f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    74f8:	795a      	ldrb	r2, [r3, #5]
    74fa:	230c      	movs	r3, #12
    74fc:	18fb      	adds	r3, r7, r3
    74fe:	715a      	strb	r2, [r3, #5]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    7500:	230c      	movs	r3, #12
    7502:	18fb      	adds	r3, r7, r3
    7504:	795b      	ldrb	r3, [r3, #5]
    7506:	2b02      	cmp	r3, #2
    7508:	d004      	beq.n	7514 <cdcdf_acm_enable+0x54>
    750a:	230c      	movs	r3, #12
    750c:	18fb      	adds	r3, r7, r3
    750e:	795b      	ldrb	r3, [r3, #5]
    7510:	2b0a      	cmp	r3, #10
    7512:	d129      	bne.n	7568 <cdcdf_acm_enable+0xa8>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    7514:	2327      	movs	r3, #39	; 0x27
    7516:	18fb      	adds	r3, r7, r3
    7518:	781b      	ldrb	r3, [r3, #0]
    751a:	6a3a      	ldr	r2, [r7, #32]
    751c:	5cd2      	ldrb	r2, [r2, r3]
    751e:	230c      	movs	r3, #12
    7520:	18fb      	adds	r3, r7, r3
    7522:	789b      	ldrb	r3, [r3, #2]
    7524:	429a      	cmp	r2, r3
    7526:	d102      	bne.n	752e <cdcdf_acm_enable+0x6e>
				return ERR_ALREADY_INITIALIZED;
    7528:	2312      	movs	r3, #18
    752a:	425b      	negs	r3, r3
    752c:	e09a      	b.n	7664 <cdcdf_acm_enable+0x1a4>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    752e:	2327      	movs	r3, #39	; 0x27
    7530:	18fb      	adds	r3, r7, r3
    7532:	781b      	ldrb	r3, [r3, #0]
    7534:	6a3a      	ldr	r2, [r7, #32]
    7536:	5cd3      	ldrb	r3, [r2, r3]
    7538:	2bff      	cmp	r3, #255	; 0xff
    753a:	d002      	beq.n	7542 <cdcdf_acm_enable+0x82>
				return ERR_NO_RESOURCE;
    753c:	231c      	movs	r3, #28
    753e:	425b      	negs	r3, r3
    7540:	e090      	b.n	7664 <cdcdf_acm_enable+0x1a4>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    7542:	2327      	movs	r3, #39	; 0x27
    7544:	18fb      	adds	r3, r7, r3
    7546:	781b      	ldrb	r3, [r3, #0]
    7548:	220c      	movs	r2, #12
    754a:	18ba      	adds	r2, r7, r2
    754c:	7891      	ldrb	r1, [r2, #2]
    754e:	6a3a      	ldr	r2, [r7, #32]
    7550:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    7552:	46c0      	nop			; (mov r8, r8)
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    7554:	683b      	ldr	r3, [r7, #0]
    7556:	6859      	ldr	r1, [r3, #4]
    7558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    755a:	2205      	movs	r2, #5
    755c:	0018      	movs	r0, r3
    755e:	4b43      	ldr	r3, [pc, #268]	; (766c <cdcdf_acm_enable+0x1ac>)
    7560:	4798      	blx	r3
    7562:	0003      	movs	r3, r0
    7564:	62bb      	str	r3, [r7, #40]	; 0x28
		while (NULL != ep) {
    7566:	e05c      	b.n	7622 <cdcdf_acm_enable+0x162>
			return ERR_NOT_FOUND;
    7568:	230a      	movs	r3, #10
    756a:	425b      	negs	r3, r3
    756c:	e07a      	b.n	7664 <cdcdf_acm_enable+0x1a4>
			ep_desc.bEndpointAddress = ep[2];
    756e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7570:	789a      	ldrb	r2, [r3, #2]
    7572:	2318      	movs	r3, #24
    7574:	18fb      	adds	r3, r7, r3
    7576:	709a      	strb	r2, [r3, #2]
			ep_desc.bmAttributes     = ep[3];
    7578:	6abb      	ldr	r3, [r7, #40]	; 0x28
    757a:	78da      	ldrb	r2, [r3, #3]
    757c:	2318      	movs	r3, #24
    757e:	18fb      	adds	r3, r7, r3
    7580:	70da      	strb	r2, [r3, #3]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    7582:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7584:	3304      	adds	r3, #4
    7586:	0018      	movs	r0, r3
    7588:	4b39      	ldr	r3, [pc, #228]	; (7670 <cdcdf_acm_enable+0x1b0>)
    758a:	4798      	blx	r3
    758c:	0003      	movs	r3, r0
    758e:	001a      	movs	r2, r3
    7590:	2318      	movs	r3, #24
    7592:	18fb      	adds	r3, r7, r3
    7594:	809a      	strh	r2, [r3, #4]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    7596:	2318      	movs	r3, #24
    7598:	18fb      	adds	r3, r7, r3
    759a:	7898      	ldrb	r0, [r3, #2]
    759c:	2318      	movs	r3, #24
    759e:	18fb      	adds	r3, r7, r3
    75a0:	78d9      	ldrb	r1, [r3, #3]
    75a2:	2318      	movs	r3, #24
    75a4:	18fb      	adds	r3, r7, r3
    75a6:	889b      	ldrh	r3, [r3, #4]
    75a8:	001a      	movs	r2, r3
    75aa:	4b32      	ldr	r3, [pc, #200]	; (7674 <cdcdf_acm_enable+0x1b4>)
    75ac:	4798      	blx	r3
    75ae:	1e03      	subs	r3, r0, #0
    75b0:	d002      	beq.n	75b8 <cdcdf_acm_enable+0xf8>
				return ERR_NOT_INITIALIZED;
    75b2:	2314      	movs	r3, #20
    75b4:	425b      	negs	r3, r3
    75b6:	e055      	b.n	7664 <cdcdf_acm_enable+0x1a4>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    75b8:	2318      	movs	r3, #24
    75ba:	18fb      	adds	r3, r7, r3
    75bc:	789b      	ldrb	r3, [r3, #2]
    75be:	b25b      	sxtb	r3, r3
    75c0:	2b00      	cmp	r3, #0
    75c2:	da13      	bge.n	75ec <cdcdf_acm_enable+0x12c>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    75c4:	2327      	movs	r3, #39	; 0x27
    75c6:	18fb      	adds	r3, r7, r3
    75c8:	781b      	ldrb	r3, [r3, #0]
    75ca:	2218      	movs	r2, #24
    75cc:	18ba      	adds	r2, r7, r2
    75ce:	7891      	ldrb	r1, [r2, #2]
    75d0:	6a3a      	ldr	r2, [r7, #32]
    75d2:	18d3      	adds	r3, r2, r3
    75d4:	1c0a      	adds	r2, r1, #0
    75d6:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    75d8:	2327      	movs	r3, #39	; 0x27
    75da:	18fb      	adds	r3, r7, r3
    75dc:	781b      	ldrb	r3, [r3, #0]
    75de:	6a3a      	ldr	r2, [r7, #32]
    75e0:	18d3      	adds	r3, r2, r3
    75e2:	789b      	ldrb	r3, [r3, #2]
    75e4:	0018      	movs	r0, r3
    75e6:	4b24      	ldr	r3, [pc, #144]	; (7678 <cdcdf_acm_enable+0x1b8>)
    75e8:	4798      	blx	r3
    75ea:	e009      	b.n	7600 <cdcdf_acm_enable+0x140>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    75ec:	2318      	movs	r3, #24
    75ee:	18fb      	adds	r3, r7, r3
    75f0:	789a      	ldrb	r2, [r3, #2]
    75f2:	6a3b      	ldr	r3, [r7, #32]
    75f4:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    75f6:	6a3b      	ldr	r3, [r7, #32]
    75f8:	791b      	ldrb	r3, [r3, #4]
    75fa:	0018      	movs	r0, r3
    75fc:	4b1e      	ldr	r3, [pc, #120]	; (7678 <cdcdf_acm_enable+0x1b8>)
    75fe:	4798      	blx	r3
			}
			desc->sod = ep;
    7600:	683b      	ldr	r3, [r7, #0]
    7602:	6aba      	ldr	r2, [r7, #40]	; 0x28
    7604:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    7606:	683b      	ldr	r3, [r7, #0]
    7608:	681b      	ldr	r3, [r3, #0]
    760a:	0018      	movs	r0, r3
    760c:	4b1b      	ldr	r3, [pc, #108]	; (767c <cdcdf_acm_enable+0x1bc>)
    760e:	4798      	blx	r3
    7610:	0002      	movs	r2, r0
    7612:	683b      	ldr	r3, [r7, #0]
    7614:	685b      	ldr	r3, [r3, #4]
    7616:	0019      	movs	r1, r3
    7618:	0010      	movs	r0, r2
    761a:	4b19      	ldr	r3, [pc, #100]	; (7680 <cdcdf_acm_enable+0x1c0>)
    761c:	4798      	blx	r3
    761e:	0003      	movs	r3, r0
    7620:	62bb      	str	r3, [r7, #40]	; 0x28
		while (NULL != ep) {
    7622:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7624:	2b00      	cmp	r3, #0
    7626:	d1a2      	bne.n	756e <cdcdf_acm_enable+0xae>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    7628:	683b      	ldr	r3, [r7, #0]
    762a:	681b      	ldr	r3, [r3, #0]
    762c:	0018      	movs	r0, r3
    762e:	4b13      	ldr	r3, [pc, #76]	; (767c <cdcdf_acm_enable+0x1bc>)
    7630:	4798      	blx	r3
    7632:	683b      	ldr	r3, [r7, #0]
    7634:	685b      	ldr	r3, [r3, #4]
    7636:	2204      	movs	r2, #4
    7638:	0019      	movs	r1, r3
    763a:	4b0c      	ldr	r3, [pc, #48]	; (766c <cdcdf_acm_enable+0x1ac>)
    763c:	4798      	blx	r3
    763e:	0003      	movs	r3, r0
    7640:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    7642:	2327      	movs	r3, #39	; 0x27
    7644:	18fb      	adds	r3, r7, r3
    7646:	781a      	ldrb	r2, [r3, #0]
    7648:	2327      	movs	r3, #39	; 0x27
    764a:	18fb      	adds	r3, r7, r3
    764c:	3201      	adds	r2, #1
    764e:	701a      	strb	r2, [r3, #0]
    7650:	2327      	movs	r3, #39	; 0x27
    7652:	18fb      	adds	r3, r7, r3
    7654:	781b      	ldrb	r3, [r3, #0]
    7656:	2b01      	cmp	r3, #1
    7658:	d800      	bhi.n	765c <cdcdf_acm_enable+0x19c>
    765a:	e741      	b.n	74e0 <cdcdf_acm_enable+0x20>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    765c:	4b09      	ldr	r3, [pc, #36]	; (7684 <cdcdf_acm_enable+0x1c4>)
    765e:	2201      	movs	r2, #1
    7660:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    7662:	2300      	movs	r3, #0
}
    7664:	0018      	movs	r0, r3
    7666:	46bd      	mov	sp, r7
    7668:	b00c      	add	sp, #48	; 0x30
    766a:	bd80      	pop	{r7, pc}
    766c:	000089e9 	.word	0x000089e9
    7670:	00007461 	.word	0x00007461
    7674:	00002371 	.word	0x00002371
    7678:	0000249d 	.word	0x0000249d
    767c:	0000749d 	.word	0x0000749d
    7680:	00008a4d 	.word	0x00008a4d
    7684:	20001074 	.word	0x20001074

00007688 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    7688:	b580      	push	{r7, lr}
    768a:	b088      	sub	sp, #32
    768c:	af00      	add	r7, sp, #0
    768e:	6078      	str	r0, [r7, #4]
    7690:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    7692:	687b      	ldr	r3, [r7, #4]
    7694:	689b      	ldr	r3, [r3, #8]
    7696:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    7698:	683b      	ldr	r3, [r7, #0]
    769a:	2b00      	cmp	r3, #0
    769c:	d012      	beq.n	76c4 <cdcdf_acm_disable+0x3c>
		ifc_desc.bInterfaceClass = desc->sod[5];
    769e:	683b      	ldr	r3, [r7, #0]
    76a0:	681b      	ldr	r3, [r3, #0]
    76a2:	795a      	ldrb	r2, [r3, #5]
    76a4:	230c      	movs	r3, #12
    76a6:	18fb      	adds	r3, r7, r3
    76a8:	715a      	strb	r2, [r3, #5]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    76aa:	230c      	movs	r3, #12
    76ac:	18fb      	adds	r3, r7, r3
    76ae:	795b      	ldrb	r3, [r3, #5]
    76b0:	2b02      	cmp	r3, #2
    76b2:	d007      	beq.n	76c4 <cdcdf_acm_disable+0x3c>
    76b4:	230c      	movs	r3, #12
    76b6:	18fb      	adds	r3, r7, r3
    76b8:	795b      	ldrb	r3, [r3, #5]
    76ba:	2b0a      	cmp	r3, #10
    76bc:	d002      	beq.n	76c4 <cdcdf_acm_disable+0x3c>
			return ERR_NOT_FOUND;
    76be:	230a      	movs	r3, #10
    76c0:	425b      	negs	r3, r3
    76c2:	e047      	b.n	7754 <cdcdf_acm_disable+0xcc>
		}
	}

	for (i = 0; i < 2; i++) {
    76c4:	231f      	movs	r3, #31
    76c6:	18fb      	adds	r3, r7, r3
    76c8:	2200      	movs	r2, #0
    76ca:	701a      	strb	r2, [r3, #0]
    76cc:	e02d      	b.n	772a <cdcdf_acm_disable+0xa2>
		if (func_data->func_iface[i] == 0xFF) {
    76ce:	231f      	movs	r3, #31
    76d0:	18fb      	adds	r3, r7, r3
    76d2:	781b      	ldrb	r3, [r3, #0]
    76d4:	69ba      	ldr	r2, [r7, #24]
    76d6:	5cd3      	ldrb	r3, [r2, r3]
    76d8:	2bff      	cmp	r3, #255	; 0xff
    76da:	d01e      	beq.n	771a <cdcdf_acm_disable+0x92>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    76dc:	231f      	movs	r3, #31
    76de:	18fb      	adds	r3, r7, r3
    76e0:	781b      	ldrb	r3, [r3, #0]
    76e2:	69ba      	ldr	r2, [r7, #24]
    76e4:	21ff      	movs	r1, #255	; 0xff
    76e6:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    76e8:	231f      	movs	r3, #31
    76ea:	18fb      	adds	r3, r7, r3
    76ec:	781b      	ldrb	r3, [r3, #0]
    76ee:	69ba      	ldr	r2, [r7, #24]
    76f0:	18d3      	adds	r3, r2, r3
    76f2:	789b      	ldrb	r3, [r3, #2]
    76f4:	2bff      	cmp	r3, #255	; 0xff
    76f6:	d011      	beq.n	771c <cdcdf_acm_disable+0x94>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    76f8:	231f      	movs	r3, #31
    76fa:	18fb      	adds	r3, r7, r3
    76fc:	781b      	ldrb	r3, [r3, #0]
    76fe:	69ba      	ldr	r2, [r7, #24]
    7700:	18d3      	adds	r3, r2, r3
    7702:	789b      	ldrb	r3, [r3, #2]
    7704:	0018      	movs	r0, r3
    7706:	4b15      	ldr	r3, [pc, #84]	; (775c <cdcdf_acm_disable+0xd4>)
    7708:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    770a:	231f      	movs	r3, #31
    770c:	18fb      	adds	r3, r7, r3
    770e:	781b      	ldrb	r3, [r3, #0]
    7710:	69ba      	ldr	r2, [r7, #24]
    7712:	18d3      	adds	r3, r2, r3
    7714:	22ff      	movs	r2, #255	; 0xff
    7716:	709a      	strb	r2, [r3, #2]
    7718:	e000      	b.n	771c <cdcdf_acm_disable+0x94>
			continue;
    771a:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < 2; i++) {
    771c:	231f      	movs	r3, #31
    771e:	18fb      	adds	r3, r7, r3
    7720:	781a      	ldrb	r2, [r3, #0]
    7722:	231f      	movs	r3, #31
    7724:	18fb      	adds	r3, r7, r3
    7726:	3201      	adds	r2, #1
    7728:	701a      	strb	r2, [r3, #0]
    772a:	231f      	movs	r3, #31
    772c:	18fb      	adds	r3, r7, r3
    772e:	781b      	ldrb	r3, [r3, #0]
    7730:	2b01      	cmp	r3, #1
    7732:	d9cc      	bls.n	76ce <cdcdf_acm_disable+0x46>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    7734:	69bb      	ldr	r3, [r7, #24]
    7736:	791b      	ldrb	r3, [r3, #4]
    7738:	2bff      	cmp	r3, #255	; 0xff
    773a:	d007      	beq.n	774c <cdcdf_acm_disable+0xc4>
		usb_d_ep_deinit(func_data->func_ep_out);
    773c:	69bb      	ldr	r3, [r7, #24]
    773e:	791b      	ldrb	r3, [r3, #4]
    7740:	0018      	movs	r0, r3
    7742:	4b06      	ldr	r3, [pc, #24]	; (775c <cdcdf_acm_disable+0xd4>)
    7744:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    7746:	69bb      	ldr	r3, [r7, #24]
    7748:	22ff      	movs	r2, #255	; 0xff
    774a:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    774c:	4b04      	ldr	r3, [pc, #16]	; (7760 <cdcdf_acm_disable+0xd8>)
    774e:	2200      	movs	r2, #0
    7750:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    7752:	2300      	movs	r3, #0
}
    7754:	0018      	movs	r0, r3
    7756:	46bd      	mov	sp, r7
    7758:	b008      	add	sp, #32
    775a:	bd80      	pop	{r7, pc}
    775c:	0000243d 	.word	0x0000243d
    7760:	20001074 	.word	0x20001074

00007764 <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    7764:	b580      	push	{r7, lr}
    7766:	b084      	sub	sp, #16
    7768:	af00      	add	r7, sp, #0
    776a:	60f8      	str	r0, [r7, #12]
    776c:	607a      	str	r2, [r7, #4]
    776e:	230b      	movs	r3, #11
    7770:	18fb      	adds	r3, r7, r3
    7772:	1c0a      	adds	r2, r1, #0
    7774:	701a      	strb	r2, [r3, #0]
	switch (ctrl) {
    7776:	230b      	movs	r3, #11
    7778:	18fb      	adds	r3, r7, r3
    777a:	781b      	ldrb	r3, [r3, #0]
    777c:	2b01      	cmp	r3, #1
    777e:	d00b      	beq.n	7798 <cdcdf_acm_ctrl+0x34>
    7780:	2b02      	cmp	r3, #2
    7782:	d011      	beq.n	77a8 <cdcdf_acm_ctrl+0x44>
    7784:	2b00      	cmp	r3, #0
    7786:	d112      	bne.n	77ae <cdcdf_acm_ctrl+0x4a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    7788:	687a      	ldr	r2, [r7, #4]
    778a:	68fb      	ldr	r3, [r7, #12]
    778c:	0011      	movs	r1, r2
    778e:	0018      	movs	r0, r3
    7790:	4b0a      	ldr	r3, [pc, #40]	; (77bc <cdcdf_acm_ctrl+0x58>)
    7792:	4798      	blx	r3
    7794:	0003      	movs	r3, r0
    7796:	e00c      	b.n	77b2 <cdcdf_acm_ctrl+0x4e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    7798:	687a      	ldr	r2, [r7, #4]
    779a:	68fb      	ldr	r3, [r7, #12]
    779c:	0011      	movs	r1, r2
    779e:	0018      	movs	r0, r3
    77a0:	4b07      	ldr	r3, [pc, #28]	; (77c0 <cdcdf_acm_ctrl+0x5c>)
    77a2:	4798      	blx	r3
    77a4:	0003      	movs	r3, r0
    77a6:	e004      	b.n	77b2 <cdcdf_acm_ctrl+0x4e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    77a8:	231b      	movs	r3, #27
    77aa:	425b      	negs	r3, r3
    77ac:	e001      	b.n	77b2 <cdcdf_acm_ctrl+0x4e>

	default:
		return ERR_INVALID_ARG;
    77ae:	230d      	movs	r3, #13
    77b0:	425b      	negs	r3, r3
	}
}
    77b2:	0018      	movs	r0, r3
    77b4:	46bd      	mov	sp, r7
    77b6:	b004      	add	sp, #16
    77b8:	bd80      	pop	{r7, pc}
    77ba:	46c0      	nop			; (mov r8, r8)
    77bc:	000074c1 	.word	0x000074c1
    77c0:	00007689 	.word	0x00007689

000077c4 <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    77c4:	b590      	push	{r4, r7, lr}
    77c6:	b087      	sub	sp, #28
    77c8:	af00      	add	r7, sp, #0
    77ca:	6039      	str	r1, [r7, #0]
    77cc:	0011      	movs	r1, r2
    77ce:	1dfb      	adds	r3, r7, #7
    77d0:	1c02      	adds	r2, r0, #0
    77d2:	701a      	strb	r2, [r3, #0]
    77d4:	1dbb      	adds	r3, r7, #6
    77d6:	1c0a      	adds	r2, r1, #0
    77d8:	701a      	strb	r2, [r3, #0]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    77da:	2316      	movs	r3, #22
    77dc:	18fa      	adds	r2, r7, r3
    77de:	683b      	ldr	r3, [r7, #0]
    77e0:	7999      	ldrb	r1, [r3, #6]
    77e2:	79db      	ldrb	r3, [r3, #7]
    77e4:	021b      	lsls	r3, r3, #8
    77e6:	430b      	orrs	r3, r1
    77e8:	8013      	strh	r3, [r2, #0]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    77ea:	4b2f      	ldr	r3, [pc, #188]	; (78a8 <cdcdf_acm_set_req+0xe4>)
    77ec:	4798      	blx	r3
    77ee:	0003      	movs	r3, r0
    77f0:	613b      	str	r3, [r7, #16]

	switch (req->bRequest) {
    77f2:	683b      	ldr	r3, [r7, #0]
    77f4:	785b      	ldrb	r3, [r3, #1]
    77f6:	2b20      	cmp	r3, #32
    77f8:	d002      	beq.n	7800 <cdcdf_acm_set_req+0x3c>
    77fa:	2b22      	cmp	r3, #34	; 0x22
    77fc:	d037      	beq.n	786e <cdcdf_acm_set_req+0xaa>
    77fe:	e04c      	b.n	789a <cdcdf_acm_set_req+0xd6>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    7800:	2316      	movs	r3, #22
    7802:	18fb      	adds	r3, r7, r3
    7804:	881b      	ldrh	r3, [r3, #0]
    7806:	2b07      	cmp	r3, #7
    7808:	d002      	beq.n	7810 <cdcdf_acm_set_req+0x4c>
			return ERR_INVALID_DATA;
    780a:	2301      	movs	r3, #1
    780c:	425b      	negs	r3, r3
    780e:	e046      	b.n	789e <cdcdf_acm_set_req+0xda>
		}
		if (USB_SETUP_STAGE == stage) {
    7810:	1dbb      	adds	r3, r7, #6
    7812:	781b      	ldrb	r3, [r3, #0]
    7814:	2b00      	cmp	r3, #0
    7816:	d10a      	bne.n	782e <cdcdf_acm_set_req+0x6a>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    7818:	2316      	movs	r3, #22
    781a:	18fb      	adds	r3, r7, r3
    781c:	881a      	ldrh	r2, [r3, #0]
    781e:	6939      	ldr	r1, [r7, #16]
    7820:	1dfb      	adds	r3, r7, #7
    7822:	7818      	ldrb	r0, [r3, #0]
    7824:	2300      	movs	r3, #0
    7826:	4c21      	ldr	r4, [pc, #132]	; (78ac <cdcdf_acm_set_req+0xe8>)
    7828:	47a0      	blx	r4
    782a:	0003      	movs	r3, r0
    782c:	e037      	b.n	789e <cdcdf_acm_set_req+0xda>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    782e:	2308      	movs	r3, #8
    7830:	18fa      	adds	r2, r7, r3
    7832:	693b      	ldr	r3, [r7, #16]
    7834:	0010      	movs	r0, r2
    7836:	0019      	movs	r1, r3
    7838:	2307      	movs	r3, #7
    783a:	001a      	movs	r2, r3
    783c:	4b1c      	ldr	r3, [pc, #112]	; (78b0 <cdcdf_acm_set_req+0xec>)
    783e:	4798      	blx	r3
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    7840:	4b1c      	ldr	r3, [pc, #112]	; (78b4 <cdcdf_acm_set_req+0xf0>)
    7842:	681b      	ldr	r3, [r3, #0]
    7844:	2b00      	cmp	r3, #0
    7846:	d007      	beq.n	7858 <cdcdf_acm_set_req+0x94>
    7848:	4b1a      	ldr	r3, [pc, #104]	; (78b4 <cdcdf_acm_set_req+0xf0>)
    784a:	681b      	ldr	r3, [r3, #0]
    784c:	2208      	movs	r2, #8
    784e:	18ba      	adds	r2, r7, r2
    7850:	0010      	movs	r0, r2
    7852:	4798      	blx	r3
    7854:	1e03      	subs	r3, r0, #0
    7856:	d008      	beq.n	786a <cdcdf_acm_set_req+0xa6>
				usbd_cdc_line_coding = line_coding_tmp;
    7858:	4b17      	ldr	r3, [pc, #92]	; (78b8 <cdcdf_acm_set_req+0xf4>)
    785a:	2208      	movs	r2, #8
    785c:	18ba      	adds	r2, r7, r2
    785e:	6811      	ldr	r1, [r2, #0]
    7860:	6019      	str	r1, [r3, #0]
    7862:	8891      	ldrh	r1, [r2, #4]
    7864:	8099      	strh	r1, [r3, #4]
    7866:	7992      	ldrb	r2, [r2, #6]
    7868:	719a      	strb	r2, [r3, #6]
			}
			return ERR_NONE;
    786a:	2300      	movs	r3, #0
    786c:	e017      	b.n	789e <cdcdf_acm_set_req+0xda>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    786e:	2300      	movs	r3, #0
    7870:	2200      	movs	r2, #0
    7872:	2100      	movs	r1, #0
    7874:	2000      	movs	r0, #0
    7876:	4c0d      	ldr	r4, [pc, #52]	; (78ac <cdcdf_acm_set_req+0xe8>)
    7878:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    787a:	4b10      	ldr	r3, [pc, #64]	; (78bc <cdcdf_acm_set_req+0xf8>)
    787c:	681b      	ldr	r3, [r3, #0]
    787e:	2b00      	cmp	r3, #0
    7880:	d009      	beq.n	7896 <cdcdf_acm_set_req+0xd2>
			cdcdf_acm_notify_state(req->wValue);
    7882:	4b0e      	ldr	r3, [pc, #56]	; (78bc <cdcdf_acm_set_req+0xf8>)
    7884:	681a      	ldr	r2, [r3, #0]
    7886:	683b      	ldr	r3, [r7, #0]
    7888:	7899      	ldrb	r1, [r3, #2]
    788a:	78db      	ldrb	r3, [r3, #3]
    788c:	021b      	lsls	r3, r3, #8
    788e:	430b      	orrs	r3, r1
    7890:	b29b      	uxth	r3, r3
    7892:	0018      	movs	r0, r3
    7894:	4790      	blx	r2
		}
		return ERR_NONE;
    7896:	2300      	movs	r3, #0
    7898:	e001      	b.n	789e <cdcdf_acm_set_req+0xda>
	default:
		return ERR_INVALID_ARG;
    789a:	230d      	movs	r3, #13
    789c:	425b      	negs	r3, r3
	}
}
    789e:	0018      	movs	r0, r3
    78a0:	46bd      	mov	sp, r7
    78a2:	b007      	add	sp, #28
    78a4:	bd90      	pop	{r4, r7, pc}
    78a6:	46c0      	nop			; (mov r8, r8)
    78a8:	000088f9 	.word	0x000088f9
    78ac:	00008731 	.word	0x00008731
    78b0:	0000a581 	.word	0x0000a581
    78b4:	20001088 	.word	0x20001088
    78b8:	2000107c 	.word	0x2000107c
    78bc:	20001084 	.word	0x20001084

000078c0 <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    78c0:	b590      	push	{r4, r7, lr}
    78c2:	b085      	sub	sp, #20
    78c4:	af00      	add	r7, sp, #0
    78c6:	6039      	str	r1, [r7, #0]
    78c8:	0011      	movs	r1, r2
    78ca:	1dfb      	adds	r3, r7, #7
    78cc:	1c02      	adds	r2, r0, #0
    78ce:	701a      	strb	r2, [r3, #0]
    78d0:	1dbb      	adds	r3, r7, #6
    78d2:	1c0a      	adds	r2, r1, #0
    78d4:	701a      	strb	r2, [r3, #0]
	uint16_t len = req->wLength;
    78d6:	230e      	movs	r3, #14
    78d8:	18fa      	adds	r2, r7, r3
    78da:	683b      	ldr	r3, [r7, #0]
    78dc:	7999      	ldrb	r1, [r3, #6]
    78de:	79db      	ldrb	r3, [r3, #7]
    78e0:	021b      	lsls	r3, r3, #8
    78e2:	430b      	orrs	r3, r1
    78e4:	8013      	strh	r3, [r2, #0]

	if (USB_DATA_STAGE == stage) {
    78e6:	1dbb      	adds	r3, r7, #6
    78e8:	781b      	ldrb	r3, [r3, #0]
    78ea:	2b01      	cmp	r3, #1
    78ec:	d101      	bne.n	78f2 <cdcdf_acm_get_req+0x32>
		return ERR_NONE;
    78ee:	2300      	movs	r3, #0
    78f0:	e018      	b.n	7924 <cdcdf_acm_get_req+0x64>
	}

	switch (req->bRequest) {
    78f2:	683b      	ldr	r3, [r7, #0]
    78f4:	785b      	ldrb	r3, [r3, #1]
    78f6:	2b21      	cmp	r3, #33	; 0x21
    78f8:	d112      	bne.n	7920 <cdcdf_acm_get_req+0x60>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    78fa:	230e      	movs	r3, #14
    78fc:	18fb      	adds	r3, r7, r3
    78fe:	881b      	ldrh	r3, [r3, #0]
    7900:	2b07      	cmp	r3, #7
    7902:	d002      	beq.n	790a <cdcdf_acm_get_req+0x4a>
			return ERR_INVALID_DATA;
    7904:	2301      	movs	r3, #1
    7906:	425b      	negs	r3, r3
    7908:	e00c      	b.n	7924 <cdcdf_acm_get_req+0x64>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    790a:	230e      	movs	r3, #14
    790c:	18fb      	adds	r3, r7, r3
    790e:	881a      	ldrh	r2, [r3, #0]
    7910:	4906      	ldr	r1, [pc, #24]	; (792c <cdcdf_acm_get_req+0x6c>)
    7912:	1dfb      	adds	r3, r7, #7
    7914:	7818      	ldrb	r0, [r3, #0]
    7916:	2300      	movs	r3, #0
    7918:	4c05      	ldr	r4, [pc, #20]	; (7930 <cdcdf_acm_get_req+0x70>)
    791a:	47a0      	blx	r4
    791c:	0003      	movs	r3, r0
    791e:	e001      	b.n	7924 <cdcdf_acm_get_req+0x64>
	default:
		return ERR_INVALID_ARG;
    7920:	230d      	movs	r3, #13
    7922:	425b      	negs	r3, r3
	}
}
    7924:	0018      	movs	r0, r3
    7926:	46bd      	mov	sp, r7
    7928:	b005      	add	sp, #20
    792a:	bd90      	pop	{r4, r7, pc}
    792c:	2000107c 	.word	0x2000107c
    7930:	00008731 	.word	0x00008731

00007934 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    7934:	b580      	push	{r7, lr}
    7936:	b082      	sub	sp, #8
    7938:	af00      	add	r7, sp, #0
    793a:	6039      	str	r1, [r7, #0]
    793c:	0011      	movs	r1, r2
    793e:	1dfb      	adds	r3, r7, #7
    7940:	1c02      	adds	r2, r0, #0
    7942:	701a      	strb	r2, [r3, #0]
    7944:	1dbb      	adds	r3, r7, #6
    7946:	1c0a      	adds	r2, r1, #0
    7948:	701a      	strb	r2, [r3, #0]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    794a:	683b      	ldr	r3, [r7, #0]
    794c:	781b      	ldrb	r3, [r3, #0]
    794e:	095b      	lsrs	r3, r3, #5
    7950:	b2db      	uxtb	r3, r3
    7952:	001a      	movs	r2, r3
    7954:	2303      	movs	r3, #3
    7956:	4013      	ands	r3, r2
    7958:	2b01      	cmp	r3, #1
    795a:	d002      	beq.n	7962 <cdcdf_acm_req+0x2e>
		return ERR_NOT_FOUND;
    795c:	230a      	movs	r3, #10
    795e:	425b      	negs	r3, r3
    7960:	e030      	b.n	79c4 <cdcdf_acm_req+0x90>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    7962:	683b      	ldr	r3, [r7, #0]
    7964:	791a      	ldrb	r2, [r3, #4]
    7966:	795b      	ldrb	r3, [r3, #5]
    7968:	021b      	lsls	r3, r3, #8
    796a:	4313      	orrs	r3, r2
    796c:	b29a      	uxth	r2, r3
    796e:	4b17      	ldr	r3, [pc, #92]	; (79cc <cdcdf_acm_req+0x98>)
    7970:	781b      	ldrb	r3, [r3, #0]
    7972:	b29b      	uxth	r3, r3
    7974:	429a      	cmp	r2, r3
    7976:	d00a      	beq.n	798e <cdcdf_acm_req+0x5a>
    7978:	683b      	ldr	r3, [r7, #0]
    797a:	791a      	ldrb	r2, [r3, #4]
    797c:	795b      	ldrb	r3, [r3, #5]
    797e:	021b      	lsls	r3, r3, #8
    7980:	4313      	orrs	r3, r2
    7982:	b29a      	uxth	r2, r3
    7984:	4b11      	ldr	r3, [pc, #68]	; (79cc <cdcdf_acm_req+0x98>)
    7986:	785b      	ldrb	r3, [r3, #1]
    7988:	b29b      	uxth	r3, r3
    798a:	429a      	cmp	r2, r3
    798c:	d118      	bne.n	79c0 <cdcdf_acm_req+0x8c>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    798e:	683b      	ldr	r3, [r7, #0]
    7990:	781b      	ldrb	r3, [r3, #0]
    7992:	b25b      	sxtb	r3, r3
    7994:	2b00      	cmp	r3, #0
    7996:	da09      	bge.n	79ac <cdcdf_acm_req+0x78>
			return cdcdf_acm_get_req(ep, req, stage);
    7998:	1dbb      	adds	r3, r7, #6
    799a:	781a      	ldrb	r2, [r3, #0]
    799c:	6839      	ldr	r1, [r7, #0]
    799e:	1dfb      	adds	r3, r7, #7
    79a0:	781b      	ldrb	r3, [r3, #0]
    79a2:	0018      	movs	r0, r3
    79a4:	4b0a      	ldr	r3, [pc, #40]	; (79d0 <cdcdf_acm_req+0x9c>)
    79a6:	4798      	blx	r3
    79a8:	0003      	movs	r3, r0
    79aa:	e00b      	b.n	79c4 <cdcdf_acm_req+0x90>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    79ac:	1dbb      	adds	r3, r7, #6
    79ae:	781a      	ldrb	r2, [r3, #0]
    79b0:	6839      	ldr	r1, [r7, #0]
    79b2:	1dfb      	adds	r3, r7, #7
    79b4:	781b      	ldrb	r3, [r3, #0]
    79b6:	0018      	movs	r0, r3
    79b8:	4b06      	ldr	r3, [pc, #24]	; (79d4 <cdcdf_acm_req+0xa0>)
    79ba:	4798      	blx	r3
    79bc:	0003      	movs	r3, r0
    79be:	e001      	b.n	79c4 <cdcdf_acm_req+0x90>
		}
	} else {
		return ERR_NOT_FOUND;
    79c0:	230a      	movs	r3, #10
    79c2:	425b      	negs	r3, r3
	}
}
    79c4:	0018      	movs	r0, r3
    79c6:	46bd      	mov	sp, r7
    79c8:	b002      	add	sp, #8
    79ca:	bd80      	pop	{r7, pc}
    79cc:	20001074 	.word	0x20001074
    79d0:	000078c1 	.word	0x000078c1
    79d4:	000077c5 	.word	0x000077c5

000079d8 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    79d8:	b580      	push	{r7, lr}
    79da:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    79dc:	4b0d      	ldr	r3, [pc, #52]	; (7a14 <cdcdf_acm_init+0x3c>)
    79de:	4798      	blx	r3
    79e0:	0003      	movs	r3, r0
    79e2:	2b01      	cmp	r3, #1
    79e4:	d902      	bls.n	79ec <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    79e6:	2311      	movs	r3, #17
    79e8:	425b      	negs	r3, r3
    79ea:	e00f      	b.n	7a0c <cdcdf_acm_init+0x34>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    79ec:	4b0a      	ldr	r3, [pc, #40]	; (7a18 <cdcdf_acm_init+0x40>)
    79ee:	4a0b      	ldr	r2, [pc, #44]	; (7a1c <cdcdf_acm_init+0x44>)
    79f0:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    79f2:	4b09      	ldr	r3, [pc, #36]	; (7a18 <cdcdf_acm_init+0x40>)
    79f4:	4a0a      	ldr	r2, [pc, #40]	; (7a20 <cdcdf_acm_init+0x48>)
    79f6:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    79f8:	4b07      	ldr	r3, [pc, #28]	; (7a18 <cdcdf_acm_init+0x40>)
    79fa:	0018      	movs	r0, r3
    79fc:	4b09      	ldr	r3, [pc, #36]	; (7a24 <cdcdf_acm_init+0x4c>)
    79fe:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    7a00:	4b09      	ldr	r3, [pc, #36]	; (7a28 <cdcdf_acm_init+0x50>)
    7a02:	0019      	movs	r1, r3
    7a04:	2001      	movs	r0, #1
    7a06:	4b09      	ldr	r3, [pc, #36]	; (7a2c <cdcdf_acm_init+0x54>)
    7a08:	4798      	blx	r3
	return ERR_NONE;
    7a0a:	2300      	movs	r3, #0
}
    7a0c:	0018      	movs	r0, r3
    7a0e:	46bd      	mov	sp, r7
    7a10:	bd80      	pop	{r7, pc}
    7a12:	46c0      	nop			; (mov r8, r8)
    7a14:	0000890d 	.word	0x0000890d
    7a18:	20001068 	.word	0x20001068
    7a1c:	00007765 	.word	0x00007765
    7a20:	20001074 	.word	0x20001074
    7a24:	00008871 	.word	0x00008871
    7a28:	2000007c 	.word	0x2000007c
    7a2c:	0000878d 	.word	0x0000878d

00007a30 <usb_get_u16>:
{
    7a30:	b580      	push	{r7, lr}
    7a32:	b082      	sub	sp, #8
    7a34:	af00      	add	r7, sp, #0
    7a36:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    7a38:	687b      	ldr	r3, [r7, #4]
    7a3a:	781b      	ldrb	r3, [r3, #0]
    7a3c:	b29a      	uxth	r2, r3
    7a3e:	687b      	ldr	r3, [r7, #4]
    7a40:	3301      	adds	r3, #1
    7a42:	781b      	ldrb	r3, [r3, #0]
    7a44:	b29b      	uxth	r3, r3
    7a46:	021b      	lsls	r3, r3, #8
    7a48:	b29b      	uxth	r3, r3
    7a4a:	18d3      	adds	r3, r2, r3
    7a4c:	b29b      	uxth	r3, r3
}
    7a4e:	0018      	movs	r0, r3
    7a50:	46bd      	mov	sp, r7
    7a52:	b002      	add	sp, #8
    7a54:	bd80      	pop	{r7, pc}

00007a56 <usb_desc_len>:
{
    7a56:	b580      	push	{r7, lr}
    7a58:	b082      	sub	sp, #8
    7a5a:	af00      	add	r7, sp, #0
    7a5c:	6078      	str	r0, [r7, #4]
	return desc[0];
    7a5e:	687b      	ldr	r3, [r7, #4]
    7a60:	781b      	ldrb	r3, [r3, #0]
}
    7a62:	0018      	movs	r0, r3
    7a64:	46bd      	mov	sp, r7
    7a66:	b002      	add	sp, #8
    7a68:	bd80      	pop	{r7, pc}
	...

00007a6c <usb_desc_next>:
{
    7a6c:	b580      	push	{r7, lr}
    7a6e:	b082      	sub	sp, #8
    7a70:	af00      	add	r7, sp, #0
    7a72:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    7a74:	687b      	ldr	r3, [r7, #4]
    7a76:	0018      	movs	r0, r3
    7a78:	4b04      	ldr	r3, [pc, #16]	; (7a8c <usb_desc_next+0x20>)
    7a7a:	4798      	blx	r3
    7a7c:	0003      	movs	r3, r0
    7a7e:	001a      	movs	r2, r3
    7a80:	687b      	ldr	r3, [r7, #4]
    7a82:	189b      	adds	r3, r3, r2
}
    7a84:	0018      	movs	r0, r3
    7a86:	46bd      	mov	sp, r7
    7a88:	b002      	add	sp, #8
    7a8a:	bd80      	pop	{r7, pc}
    7a8c:	00007a57 	.word	0x00007a57

00007a90 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    7a90:	b580      	push	{r7, lr}
    7a92:	b082      	sub	sp, #8
    7a94:	af00      	add	r7, sp, #0
    7a96:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    7a98:	687b      	ldr	r3, [r7, #4]
    7a9a:	3302      	adds	r3, #2
    7a9c:	0018      	movs	r0, r3
    7a9e:	4b03      	ldr	r3, [pc, #12]	; (7aac <usb_cfg_desc_total_len+0x1c>)
    7aa0:	4798      	blx	r3
    7aa2:	0003      	movs	r3, r0
}
    7aa4:	0018      	movs	r0, r3
    7aa6:	46bd      	mov	sp, r7
    7aa8:	b002      	add	sp, #8
    7aaa:	bd80      	pop	{r7, pc}
    7aac:	00007a31 	.word	0x00007a31

00007ab0 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    7ab0:	b590      	push	{r4, r7, lr}
    7ab2:	b085      	sub	sp, #20
    7ab4:	af00      	add	r7, sp, #0
    7ab6:	0002      	movs	r2, r0
    7ab8:	6039      	str	r1, [r7, #0]
    7aba:	1dfb      	adds	r3, r7, #7
    7abc:	701a      	strb	r2, [r3, #0]
	uint8_t *dev_desc = NULL;
    7abe:	2300      	movs	r3, #0
    7ac0:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    7ac2:	230a      	movs	r3, #10
    7ac4:	18fa      	adds	r2, r7, r3
    7ac6:	683b      	ldr	r3, [r7, #0]
    7ac8:	7999      	ldrb	r1, [r3, #6]
    7aca:	79db      	ldrb	r3, [r3, #7]
    7acc:	021b      	lsls	r3, r3, #8
    7ace:	430b      	orrs	r3, r1
    7ad0:	8013      	strh	r3, [r2, #0]
	if (length > 0x12) {
    7ad2:	230a      	movs	r3, #10
    7ad4:	18fb      	adds	r3, r7, r3
    7ad6:	881b      	ldrh	r3, [r3, #0]
    7ad8:	2b12      	cmp	r3, #18
    7ada:	d903      	bls.n	7ae4 <usbdc_get_dev_desc+0x34>
		length = 0x12;
    7adc:	230a      	movs	r3, #10
    7ade:	18fb      	adds	r3, r7, r3
    7ae0:	2212      	movs	r2, #18
    7ae2:	801a      	strh	r2, [r3, #0]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    7ae4:	68fb      	ldr	r3, [r7, #12]
    7ae6:	2b00      	cmp	r3, #0
    7ae8:	d10b      	bne.n	7b02 <usbdc_get_dev_desc+0x52>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    7aea:	4b11      	ldr	r3, [pc, #68]	; (7b30 <usbdc_get_dev_desc+0x80>)
    7aec:	681b      	ldr	r3, [r3, #0]
    7aee:	6818      	ldr	r0, [r3, #0]
    7af0:	4b0f      	ldr	r3, [pc, #60]	; (7b30 <usbdc_get_dev_desc+0x80>)
    7af2:	681b      	ldr	r3, [r3, #0]
    7af4:	685b      	ldr	r3, [r3, #4]
    7af6:	2201      	movs	r2, #1
    7af8:	0019      	movs	r1, r3
    7afa:	4b0e      	ldr	r3, [pc, #56]	; (7b34 <usbdc_get_dev_desc+0x84>)
    7afc:	4798      	blx	r3
    7afe:	0003      	movs	r3, r0
    7b00:	60fb      	str	r3, [r7, #12]
	}
	if (!dev_desc) {
    7b02:	68fb      	ldr	r3, [r7, #12]
    7b04:	2b00      	cmp	r3, #0
    7b06:	d101      	bne.n	7b0c <usbdc_get_dev_desc+0x5c>
		return false;
    7b08:	2300      	movs	r3, #0
    7b0a:	e00d      	b.n	7b28 <usbdc_get_dev_desc+0x78>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    7b0c:	230a      	movs	r3, #10
    7b0e:	18fb      	adds	r3, r7, r3
    7b10:	881a      	ldrh	r2, [r3, #0]
    7b12:	68f9      	ldr	r1, [r7, #12]
    7b14:	1dfb      	adds	r3, r7, #7
    7b16:	7818      	ldrb	r0, [r3, #0]
    7b18:	2300      	movs	r3, #0
    7b1a:	4c07      	ldr	r4, [pc, #28]	; (7b38 <usbdc_get_dev_desc+0x88>)
    7b1c:	47a0      	blx	r4
    7b1e:	1e03      	subs	r3, r0, #0
    7b20:	d001      	beq.n	7b26 <usbdc_get_dev_desc+0x76>
		return false;
    7b22:	2300      	movs	r3, #0
    7b24:	e000      	b.n	7b28 <usbdc_get_dev_desc+0x78>
	}
	return true;
    7b26:	2301      	movs	r3, #1
}
    7b28:	0018      	movs	r0, r3
    7b2a:	46bd      	mov	sp, r7
    7b2c:	b005      	add	sp, #20
    7b2e:	bd90      	pop	{r4, r7, pc}
    7b30:	2000108c 	.word	0x2000108c
    7b34:	000089e9 	.word	0x000089e9
    7b38:	00008731 	.word	0x00008731

00007b3c <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    7b3c:	b590      	push	{r4, r7, lr}
    7b3e:	b087      	sub	sp, #28
    7b40:	af00      	add	r7, sp, #0
    7b42:	0002      	movs	r2, r0
    7b44:	6039      	str	r1, [r7, #0]
    7b46:	1dfb      	adds	r3, r7, #7
    7b48:	701a      	strb	r2, [r3, #0]
	uint8_t *cfg_desc = NULL;
    7b4a:	2300      	movs	r3, #0
    7b4c:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    7b4e:	2312      	movs	r3, #18
    7b50:	18fa      	adds	r2, r7, r3
    7b52:	683b      	ldr	r3, [r7, #0]
    7b54:	7999      	ldrb	r1, [r3, #6]
    7b56:	79db      	ldrb	r3, [r3, #7]
    7b58:	021b      	lsls	r3, r3, #8
    7b5a:	430b      	orrs	r3, r1
    7b5c:	8013      	strh	r3, [r2, #0]
	uint8_t  index    = req->wValue & 0x00FF;
    7b5e:	683b      	ldr	r3, [r7, #0]
    7b60:	789a      	ldrb	r2, [r3, #2]
    7b62:	78db      	ldrb	r3, [r3, #3]
    7b64:	021b      	lsls	r3, r3, #8
    7b66:	4313      	orrs	r3, r2
    7b68:	b29a      	uxth	r2, r3
    7b6a:	2310      	movs	r3, #16
    7b6c:	18fb      	adds	r3, r7, r3
    7b6e:	701a      	strb	r2, [r3, #0]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    7b70:	2312      	movs	r3, #18
    7b72:	18fb      	adds	r3, r7, r3
    7b74:	881b      	ldrh	r3, [r3, #0]
    7b76:	4a28      	ldr	r2, [pc, #160]	; (7c18 <usbdc_get_cfg_desc+0xdc>)
    7b78:	7f12      	ldrb	r2, [r2, #28]
    7b7a:	3a01      	subs	r2, #1
    7b7c:	401a      	ands	r2, r3
    7b7e:	2311      	movs	r3, #17
    7b80:	18fb      	adds	r3, r7, r3
    7b82:	4251      	negs	r1, r2
    7b84:	414a      	adcs	r2, r1
    7b86:	701a      	strb	r2, [r3, #0]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    7b88:	697b      	ldr	r3, [r7, #20]
    7b8a:	2b00      	cmp	r3, #0
    7b8c:	d10f      	bne.n	7bae <usbdc_get_cfg_desc+0x72>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    7b8e:	4b22      	ldr	r3, [pc, #136]	; (7c18 <usbdc_get_cfg_desc+0xdc>)
    7b90:	681b      	ldr	r3, [r3, #0]
    7b92:	6818      	ldr	r0, [r3, #0]
    7b94:	4b20      	ldr	r3, [pc, #128]	; (7c18 <usbdc_get_cfg_desc+0xdc>)
    7b96:	681b      	ldr	r3, [r3, #0]
    7b98:	6859      	ldr	r1, [r3, #4]
    7b9a:	2310      	movs	r3, #16
    7b9c:	18fb      	adds	r3, r7, r3
    7b9e:	781b      	ldrb	r3, [r3, #0]
    7ba0:	3301      	adds	r3, #1
    7ba2:	b2db      	uxtb	r3, r3
    7ba4:	001a      	movs	r2, r3
    7ba6:	4b1d      	ldr	r3, [pc, #116]	; (7c1c <usbdc_get_cfg_desc+0xe0>)
    7ba8:	4798      	blx	r3
    7baa:	0003      	movs	r3, r0
    7bac:	617b      	str	r3, [r7, #20]
	}
	if (NULL == cfg_desc) {
    7bae:	697b      	ldr	r3, [r7, #20]
    7bb0:	2b00      	cmp	r3, #0
    7bb2:	d101      	bne.n	7bb8 <usbdc_get_cfg_desc+0x7c>
		return false;
    7bb4:	2300      	movs	r3, #0
    7bb6:	e02b      	b.n	7c10 <usbdc_get_cfg_desc+0xd4>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    7bb8:	230e      	movs	r3, #14
    7bba:	18fc      	adds	r4, r7, r3
    7bbc:	697b      	ldr	r3, [r7, #20]
    7bbe:	0018      	movs	r0, r3
    7bc0:	4b17      	ldr	r3, [pc, #92]	; (7c20 <usbdc_get_cfg_desc+0xe4>)
    7bc2:	4798      	blx	r3
    7bc4:	0003      	movs	r3, r0
    7bc6:	8023      	strh	r3, [r4, #0]
	if (length <= total_len) {
    7bc8:	2312      	movs	r3, #18
    7bca:	18fa      	adds	r2, r7, r3
    7bcc:	230e      	movs	r3, #14
    7bce:	18fb      	adds	r3, r7, r3
    7bd0:	8812      	ldrh	r2, [r2, #0]
    7bd2:	881b      	ldrh	r3, [r3, #0]
    7bd4:	429a      	cmp	r2, r3
    7bd6:	d804      	bhi.n	7be2 <usbdc_get_cfg_desc+0xa6>
		need_zlp = false;
    7bd8:	2311      	movs	r3, #17
    7bda:	18fb      	adds	r3, r7, r3
    7bdc:	2200      	movs	r2, #0
    7bde:	701a      	strb	r2, [r3, #0]
    7be0:	e005      	b.n	7bee <usbdc_get_cfg_desc+0xb2>
	} else {
		length = total_len;
    7be2:	2312      	movs	r3, #18
    7be4:	18fb      	adds	r3, r7, r3
    7be6:	220e      	movs	r2, #14
    7be8:	18ba      	adds	r2, r7, r2
    7bea:	8812      	ldrh	r2, [r2, #0]
    7bec:	801a      	strh	r2, [r3, #0]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    7bee:	2312      	movs	r3, #18
    7bf0:	18fb      	adds	r3, r7, r3
    7bf2:	881a      	ldrh	r2, [r3, #0]
    7bf4:	2311      	movs	r3, #17
    7bf6:	18fb      	adds	r3, r7, r3
    7bf8:	781c      	ldrb	r4, [r3, #0]
    7bfa:	6979      	ldr	r1, [r7, #20]
    7bfc:	1dfb      	adds	r3, r7, #7
    7bfe:	7818      	ldrb	r0, [r3, #0]
    7c00:	0023      	movs	r3, r4
    7c02:	4c08      	ldr	r4, [pc, #32]	; (7c24 <usbdc_get_cfg_desc+0xe8>)
    7c04:	47a0      	blx	r4
    7c06:	1e03      	subs	r3, r0, #0
    7c08:	d001      	beq.n	7c0e <usbdc_get_cfg_desc+0xd2>
		return false;
    7c0a:	2300      	movs	r3, #0
    7c0c:	e000      	b.n	7c10 <usbdc_get_cfg_desc+0xd4>
	}
	return true;
    7c0e:	2301      	movs	r3, #1
}
    7c10:	0018      	movs	r0, r3
    7c12:	46bd      	mov	sp, r7
    7c14:	b007      	add	sp, #28
    7c16:	bd90      	pop	{r4, r7, pc}
    7c18:	2000108c 	.word	0x2000108c
    7c1c:	00008ab9 	.word	0x00008ab9
    7c20:	00007a91 	.word	0x00007a91
    7c24:	00008731 	.word	0x00008731

00007c28 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    7c28:	b590      	push	{r4, r7, lr}
    7c2a:	b085      	sub	sp, #20
    7c2c:	af00      	add	r7, sp, #0
    7c2e:	0002      	movs	r2, r0
    7c30:	6039      	str	r1, [r7, #0]
    7c32:	1dfb      	adds	r3, r7, #7
    7c34:	701a      	strb	r2, [r3, #0]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    7c36:	230e      	movs	r3, #14
    7c38:	18fa      	adds	r2, r7, r3
    7c3a:	683b      	ldr	r3, [r7, #0]
    7c3c:	7999      	ldrb	r1, [r3, #6]
    7c3e:	79db      	ldrb	r3, [r3, #7]
    7c40:	021b      	lsls	r3, r3, #8
    7c42:	430b      	orrs	r3, r1
    7c44:	8013      	strh	r3, [r2, #0]
	uint8_t  index    = req->wValue & 0x00FF;
    7c46:	683b      	ldr	r3, [r7, #0]
    7c48:	789a      	ldrb	r2, [r3, #2]
    7c4a:	78db      	ldrb	r3, [r3, #3]
    7c4c:	021b      	lsls	r3, r3, #8
    7c4e:	4313      	orrs	r3, r2
    7c50:	b29a      	uxth	r2, r3
    7c52:	230c      	movs	r3, #12
    7c54:	18fb      	adds	r3, r7, r3
    7c56:	701a      	strb	r2, [r3, #0]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    7c58:	230e      	movs	r3, #14
    7c5a:	18fb      	adds	r3, r7, r3
    7c5c:	881b      	ldrh	r3, [r3, #0]
    7c5e:	4a21      	ldr	r2, [pc, #132]	; (7ce4 <usbdc_get_str_desc+0xbc>)
    7c60:	7f12      	ldrb	r2, [r2, #28]
    7c62:	3a01      	subs	r2, #1
    7c64:	401a      	ands	r2, r3
    7c66:	230d      	movs	r3, #13
    7c68:	18fb      	adds	r3, r7, r3
    7c6a:	4251      	negs	r1, r2
    7c6c:	414a      	adcs	r2, r1
    7c6e:	701a      	strb	r2, [r3, #0]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    7c70:	4b1c      	ldr	r3, [pc, #112]	; (7ce4 <usbdc_get_str_desc+0xbc>)
    7c72:	681b      	ldr	r3, [r3, #0]
    7c74:	6818      	ldr	r0, [r3, #0]
    7c76:	4b1b      	ldr	r3, [pc, #108]	; (7ce4 <usbdc_get_str_desc+0xbc>)
    7c78:	681b      	ldr	r3, [r3, #0]
    7c7a:	6859      	ldr	r1, [r3, #4]
    7c7c:	230c      	movs	r3, #12
    7c7e:	18fb      	adds	r3, r7, r3
    7c80:	781b      	ldrb	r3, [r3, #0]
    7c82:	001a      	movs	r2, r3
    7c84:	4b18      	ldr	r3, [pc, #96]	; (7ce8 <usbdc_get_str_desc+0xc0>)
    7c86:	4798      	blx	r3
    7c88:	0003      	movs	r3, r0
    7c8a:	60bb      	str	r3, [r7, #8]
	if (NULL == str_desc) {
    7c8c:	68bb      	ldr	r3, [r7, #8]
    7c8e:	2b00      	cmp	r3, #0
    7c90:	d101      	bne.n	7c96 <usbdc_get_str_desc+0x6e>
		return false;
    7c92:	2300      	movs	r3, #0
    7c94:	e022      	b.n	7cdc <usbdc_get_str_desc+0xb4>
	}
	if (length <= str_desc[0]) {
    7c96:	68bb      	ldr	r3, [r7, #8]
    7c98:	781b      	ldrb	r3, [r3, #0]
    7c9a:	b29b      	uxth	r3, r3
    7c9c:	220e      	movs	r2, #14
    7c9e:	18ba      	adds	r2, r7, r2
    7ca0:	8812      	ldrh	r2, [r2, #0]
    7ca2:	429a      	cmp	r2, r3
    7ca4:	d804      	bhi.n	7cb0 <usbdc_get_str_desc+0x88>
		need_zlp = false;
    7ca6:	230d      	movs	r3, #13
    7ca8:	18fb      	adds	r3, r7, r3
    7caa:	2200      	movs	r2, #0
    7cac:	701a      	strb	r2, [r3, #0]
    7cae:	e004      	b.n	7cba <usbdc_get_str_desc+0x92>
	} else {
		length = str_desc[0];
    7cb0:	68bb      	ldr	r3, [r7, #8]
    7cb2:	781a      	ldrb	r2, [r3, #0]
    7cb4:	230e      	movs	r3, #14
    7cb6:	18fb      	adds	r3, r7, r3
    7cb8:	801a      	strh	r2, [r3, #0]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    7cba:	230e      	movs	r3, #14
    7cbc:	18fb      	adds	r3, r7, r3
    7cbe:	881a      	ldrh	r2, [r3, #0]
    7cc0:	230d      	movs	r3, #13
    7cc2:	18fb      	adds	r3, r7, r3
    7cc4:	781c      	ldrb	r4, [r3, #0]
    7cc6:	68b9      	ldr	r1, [r7, #8]
    7cc8:	1dfb      	adds	r3, r7, #7
    7cca:	7818      	ldrb	r0, [r3, #0]
    7ccc:	0023      	movs	r3, r4
    7cce:	4c07      	ldr	r4, [pc, #28]	; (7cec <usbdc_get_str_desc+0xc4>)
    7cd0:	47a0      	blx	r4
    7cd2:	1e03      	subs	r3, r0, #0
    7cd4:	d001      	beq.n	7cda <usbdc_get_str_desc+0xb2>
		return false;
    7cd6:	2300      	movs	r3, #0
    7cd8:	e000      	b.n	7cdc <usbdc_get_str_desc+0xb4>
	}
	return true;
    7cda:	2301      	movs	r3, #1
}
    7cdc:	0018      	movs	r0, r3
    7cde:	46bd      	mov	sp, r7
    7ce0:	b005      	add	sp, #20
    7ce2:	bd90      	pop	{r4, r7, pc}
    7ce4:	2000108c 	.word	0x2000108c
    7ce8:	00008b3d 	.word	0x00008b3d
    7cec:	00008731 	.word	0x00008731

00007cf0 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    7cf0:	b580      	push	{r7, lr}
    7cf2:	b084      	sub	sp, #16
    7cf4:	af00      	add	r7, sp, #0
    7cf6:	0002      	movs	r2, r0
    7cf8:	6039      	str	r1, [r7, #0]
    7cfa:	1dfb      	adds	r3, r7, #7
    7cfc:	701a      	strb	r2, [r3, #0]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    7cfe:	683b      	ldr	r3, [r7, #0]
    7d00:	789a      	ldrb	r2, [r3, #2]
    7d02:	78db      	ldrb	r3, [r3, #3]
    7d04:	021b      	lsls	r3, r3, #8
    7d06:	4313      	orrs	r3, r2
    7d08:	b29b      	uxth	r3, r3
    7d0a:	0a1b      	lsrs	r3, r3, #8
    7d0c:	b29a      	uxth	r2, r3
    7d0e:	230f      	movs	r3, #15
    7d10:	18fb      	adds	r3, r7, r3
    7d12:	701a      	strb	r2, [r3, #0]
	switch (type) {
    7d14:	230f      	movs	r3, #15
    7d16:	18fb      	adds	r3, r7, r3
    7d18:	781b      	ldrb	r3, [r3, #0]
    7d1a:	2b02      	cmp	r3, #2
    7d1c:	d00f      	beq.n	7d3e <usbdc_get_desc_req+0x4e>
    7d1e:	2b03      	cmp	r3, #3
    7d20:	d016      	beq.n	7d50 <usbdc_get_desc_req+0x60>
    7d22:	2b01      	cmp	r3, #1
    7d24:	d002      	beq.n	7d2c <usbdc_get_desc_req+0x3c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    7d26:	46c0      	nop			; (mov r8, r8)
	}
	return false;
    7d28:	2300      	movs	r3, #0
    7d2a:	e019      	b.n	7d60 <usbdc_get_desc_req+0x70>
		return usbdc_get_dev_desc(ep, req);
    7d2c:	683a      	ldr	r2, [r7, #0]
    7d2e:	1dfb      	adds	r3, r7, #7
    7d30:	781b      	ldrb	r3, [r3, #0]
    7d32:	0011      	movs	r1, r2
    7d34:	0018      	movs	r0, r3
    7d36:	4b0c      	ldr	r3, [pc, #48]	; (7d68 <usbdc_get_desc_req+0x78>)
    7d38:	4798      	blx	r3
    7d3a:	0003      	movs	r3, r0
    7d3c:	e010      	b.n	7d60 <usbdc_get_desc_req+0x70>
		return usbdc_get_cfg_desc(ep, req);
    7d3e:	683a      	ldr	r2, [r7, #0]
    7d40:	1dfb      	adds	r3, r7, #7
    7d42:	781b      	ldrb	r3, [r3, #0]
    7d44:	0011      	movs	r1, r2
    7d46:	0018      	movs	r0, r3
    7d48:	4b08      	ldr	r3, [pc, #32]	; (7d6c <usbdc_get_desc_req+0x7c>)
    7d4a:	4798      	blx	r3
    7d4c:	0003      	movs	r3, r0
    7d4e:	e007      	b.n	7d60 <usbdc_get_desc_req+0x70>
		return usbdc_get_str_desc(ep, req);
    7d50:	683a      	ldr	r2, [r7, #0]
    7d52:	1dfb      	adds	r3, r7, #7
    7d54:	781b      	ldrb	r3, [r3, #0]
    7d56:	0011      	movs	r1, r2
    7d58:	0018      	movs	r0, r3
    7d5a:	4b05      	ldr	r3, [pc, #20]	; (7d70 <usbdc_get_desc_req+0x80>)
    7d5c:	4798      	blx	r3
    7d5e:	0003      	movs	r3, r0
}
    7d60:	0018      	movs	r0, r3
    7d62:	46bd      	mov	sp, r7
    7d64:	b004      	add	sp, #16
    7d66:	bd80      	pop	{r7, pc}
    7d68:	00007ab1 	.word	0x00007ab1
    7d6c:	00007b3d 	.word	0x00007b3d
    7d70:	00007c29 	.word	0x00007c29

00007d74 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    7d74:	b590      	push	{r4, r7, lr}
    7d76:	b085      	sub	sp, #20
    7d78:	af00      	add	r7, sp, #0
    7d7a:	0002      	movs	r2, r0
    7d7c:	6039      	str	r1, [r7, #0]
    7d7e:	1dfb      	adds	r3, r7, #7
    7d80:	701a      	strb	r2, [r3, #0]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    7d82:	683b      	ldr	r3, [r7, #0]
    7d84:	781b      	ldrb	r3, [r3, #0]
    7d86:	001a      	movs	r2, r3
    7d88:	231f      	movs	r3, #31
    7d8a:	4013      	ands	r3, r2
    7d8c:	d41e      	bmi.n	7dcc <usbdc_get_status_req+0x58>
    7d8e:	2b01      	cmp	r3, #1
    7d90:	dd02      	ble.n	7d98 <usbdc_get_status_req+0x24>
    7d92:	2b02      	cmp	r3, #2
    7d94:	d003      	beq.n	7d9e <usbdc_get_status_req+0x2a>
    7d96:	e019      	b.n	7dcc <usbdc_get_status_req+0x58>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    7d98:	2300      	movs	r3, #0
    7d9a:	60fb      	str	r3, [r7, #12]
		break;
    7d9c:	e018      	b.n	7dd0 <usbdc_get_status_req+0x5c>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    7d9e:	683b      	ldr	r3, [r7, #0]
    7da0:	791a      	ldrb	r2, [r3, #4]
    7da2:	795b      	ldrb	r3, [r3, #5]
    7da4:	021b      	lsls	r3, r3, #8
    7da6:	4313      	orrs	r3, r2
    7da8:	b29b      	uxth	r3, r3
    7daa:	b2db      	uxtb	r3, r3
    7dac:	2102      	movs	r1, #2
    7dae:	0018      	movs	r0, r3
    7db0:	4b12      	ldr	r3, [pc, #72]	; (7dfc <usbdc_get_status_req+0x88>)
    7db2:	4798      	blx	r3
    7db4:	0003      	movs	r3, r0
    7db6:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    7db8:	68fb      	ldr	r3, [r7, #12]
    7dba:	2b00      	cmp	r3, #0
    7dbc:	da01      	bge.n	7dc2 <usbdc_get_status_req+0x4e>
			return false;
    7dbe:	2300      	movs	r3, #0
    7dc0:	e017      	b.n	7df2 <usbdc_get_status_req+0x7e>
		}
		st = st & 0x1;
    7dc2:	68fb      	ldr	r3, [r7, #12]
    7dc4:	2201      	movs	r2, #1
    7dc6:	4013      	ands	r3, r2
    7dc8:	60fb      	str	r3, [r7, #12]
		break;
    7dca:	e001      	b.n	7dd0 <usbdc_get_status_req+0x5c>
	default:
		return false;
    7dcc:	2300      	movs	r3, #0
    7dce:	e010      	b.n	7df2 <usbdc_get_status_req+0x7e>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    7dd0:	4b0b      	ldr	r3, [pc, #44]	; (7e00 <usbdc_get_status_req+0x8c>)
    7dd2:	695b      	ldr	r3, [r3, #20]
    7dd4:	220c      	movs	r2, #12
    7dd6:	18b9      	adds	r1, r7, r2
    7dd8:	2202      	movs	r2, #2
    7dda:	0018      	movs	r0, r3
    7ddc:	4b09      	ldr	r3, [pc, #36]	; (7e04 <usbdc_get_status_req+0x90>)
    7dde:	4798      	blx	r3
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    7de0:	4b07      	ldr	r3, [pc, #28]	; (7e00 <usbdc_get_status_req+0x8c>)
    7de2:	6959      	ldr	r1, [r3, #20]
    7de4:	1dfb      	adds	r3, r7, #7
    7de6:	7818      	ldrb	r0, [r3, #0]
    7de8:	2300      	movs	r3, #0
    7dea:	2202      	movs	r2, #2
    7dec:	4c06      	ldr	r4, [pc, #24]	; (7e08 <usbdc_get_status_req+0x94>)
    7dee:	47a0      	blx	r4
	return true;
    7df0:	2301      	movs	r3, #1
}
    7df2:	0018      	movs	r0, r3
    7df4:	46bd      	mov	sp, r7
    7df6:	b005      	add	sp, #20
    7df8:	bd90      	pop	{r4, r7, pc}
    7dfa:	46c0      	nop			; (mov r8, r8)
    7dfc:	00002755 	.word	0x00002755
    7e00:	2000108c 	.word	0x2000108c
    7e04:	0000a581 	.word	0x0000a581
    7e08:	00008731 	.word	0x00008731

00007e0c <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    7e0c:	b590      	push	{r4, r7, lr}
    7e0e:	b085      	sub	sp, #20
    7e10:	af00      	add	r7, sp, #0
    7e12:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    7e14:	4b21      	ldr	r3, [pc, #132]	; (7e9c <usbdc_get_interface+0x90>)
    7e16:	691b      	ldr	r3, [r3, #16]
    7e18:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    7e1a:	4b20      	ldr	r3, [pc, #128]	; (7e9c <usbdc_get_interface+0x90>)
    7e1c:	7f5b      	ldrb	r3, [r3, #29]
    7e1e:	0019      	movs	r1, r3
    7e20:	687b      	ldr	r3, [r7, #4]
    7e22:	791a      	ldrb	r2, [r3, #4]
    7e24:	795b      	ldrb	r3, [r3, #5]
    7e26:	021b      	lsls	r3, r3, #8
    7e28:	4313      	orrs	r3, r2
    7e2a:	b29b      	uxth	r3, r3
    7e2c:	4119      	asrs	r1, r3
    7e2e:	000b      	movs	r3, r1
    7e30:	2201      	movs	r2, #1
    7e32:	4013      	ands	r3, r2
    7e34:	d129      	bne.n	7e8a <usbdc_get_interface+0x7e>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    7e36:	4b19      	ldr	r3, [pc, #100]	; (7e9c <usbdc_get_interface+0x90>)
    7e38:	695b      	ldr	r3, [r3, #20]
    7e3a:	2200      	movs	r2, #0
    7e3c:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    7e3e:	4b17      	ldr	r3, [pc, #92]	; (7e9c <usbdc_get_interface+0x90>)
    7e40:	6959      	ldr	r1, [r3, #20]
    7e42:	2300      	movs	r3, #0
    7e44:	2201      	movs	r2, #1
    7e46:	2000      	movs	r0, #0
    7e48:	4c15      	ldr	r4, [pc, #84]	; (7ea0 <usbdc_get_interface+0x94>)
    7e4a:	47a0      	blx	r4
		return true;
    7e4c:	2301      	movs	r3, #1
    7e4e:	e020      	b.n	7e92 <usbdc_get_interface+0x86>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    7e50:	68fb      	ldr	r3, [r7, #12]
    7e52:	685b      	ldr	r3, [r3, #4]
    7e54:	687a      	ldr	r2, [r7, #4]
    7e56:	68f8      	ldr	r0, [r7, #12]
    7e58:	2102      	movs	r1, #2
    7e5a:	4798      	blx	r3
    7e5c:	0003      	movs	r3, r0
    7e5e:	60bb      	str	r3, [r7, #8]
    7e60:	68bb      	ldr	r3, [r7, #8]
    7e62:	2b00      	cmp	r3, #0
    7e64:	da03      	bge.n	7e6e <usbdc_get_interface+0x62>
			func = func->next;
    7e66:	68fb      	ldr	r3, [r7, #12]
    7e68:	681b      	ldr	r3, [r3, #0]
    7e6a:	60fb      	str	r3, [r7, #12]
    7e6c:	e00d      	b.n	7e8a <usbdc_get_interface+0x7e>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    7e6e:	4b0b      	ldr	r3, [pc, #44]	; (7e9c <usbdc_get_interface+0x90>)
    7e70:	695b      	ldr	r3, [r3, #20]
    7e72:	68ba      	ldr	r2, [r7, #8]
    7e74:	b2d2      	uxtb	r2, r2
    7e76:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    7e78:	4b08      	ldr	r3, [pc, #32]	; (7e9c <usbdc_get_interface+0x90>)
    7e7a:	6959      	ldr	r1, [r3, #20]
    7e7c:	2300      	movs	r3, #0
    7e7e:	2201      	movs	r2, #1
    7e80:	2000      	movs	r0, #0
    7e82:	4c07      	ldr	r4, [pc, #28]	; (7ea0 <usbdc_get_interface+0x94>)
    7e84:	47a0      	blx	r4
			return true;
    7e86:	2301      	movs	r3, #1
    7e88:	e003      	b.n	7e92 <usbdc_get_interface+0x86>
	while (NULL != func) {
    7e8a:	68fb      	ldr	r3, [r7, #12]
    7e8c:	2b00      	cmp	r3, #0
    7e8e:	d1df      	bne.n	7e50 <usbdc_get_interface+0x44>
		}
	}
	return false;
    7e90:	2300      	movs	r3, #0
}
    7e92:	0018      	movs	r0, r3
    7e94:	46bd      	mov	sp, r7
    7e96:	b005      	add	sp, #20
    7e98:	bd90      	pop	{r4, r7, pc}
    7e9a:	46c0      	nop			; (mov r8, r8)
    7e9c:	2000108c 	.word	0x2000108c
    7ea0:	00008731 	.word	0x00008731

00007ea4 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    7ea4:	b590      	push	{r4, r7, lr}
    7ea6:	b083      	sub	sp, #12
    7ea8:	af00      	add	r7, sp, #0
    7eaa:	0002      	movs	r2, r0
    7eac:	6039      	str	r1, [r7, #0]
    7eae:	1dfb      	adds	r3, r7, #7
    7eb0:	701a      	strb	r2, [r3, #0]
	switch (req->bRequest) {
    7eb2:	683b      	ldr	r3, [r7, #0]
    7eb4:	785b      	ldrb	r3, [r3, #1]
    7eb6:	2b06      	cmp	r3, #6
    7eb8:	d008      	beq.n	7ecc <usbdc_get_req+0x28>
    7eba:	dc02      	bgt.n	7ec2 <usbdc_get_req+0x1e>
    7ebc:	2b00      	cmp	r3, #0
    7ebe:	d01d      	beq.n	7efc <usbdc_get_req+0x58>
    7ec0:	e02b      	b.n	7f1a <usbdc_get_req+0x76>
    7ec2:	2b08      	cmp	r3, #8
    7ec4:	d00b      	beq.n	7ede <usbdc_get_req+0x3a>
    7ec6:	2b0a      	cmp	r3, #10
    7ec8:	d021      	beq.n	7f0e <usbdc_get_req+0x6a>
    7eca:	e026      	b.n	7f1a <usbdc_get_req+0x76>
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    7ecc:	683a      	ldr	r2, [r7, #0]
    7ece:	1dfb      	adds	r3, r7, #7
    7ed0:	781b      	ldrb	r3, [r3, #0]
    7ed2:	0011      	movs	r1, r2
    7ed4:	0018      	movs	r0, r3
    7ed6:	4b13      	ldr	r3, [pc, #76]	; (7f24 <usbdc_get_req+0x80>)
    7ed8:	4798      	blx	r3
    7eda:	0003      	movs	r3, r0
    7edc:	e01e      	b.n	7f1c <usbdc_get_req+0x78>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    7ede:	4b12      	ldr	r3, [pc, #72]	; (7f28 <usbdc_get_req+0x84>)
    7ee0:	695b      	ldr	r3, [r3, #20]
    7ee2:	4a11      	ldr	r2, [pc, #68]	; (7f28 <usbdc_get_req+0x84>)
    7ee4:	7ed2      	ldrb	r2, [r2, #27]
    7ee6:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    7ee8:	4b0f      	ldr	r3, [pc, #60]	; (7f28 <usbdc_get_req+0x84>)
    7eea:	6959      	ldr	r1, [r3, #20]
    7eec:	1dfb      	adds	r3, r7, #7
    7eee:	7818      	ldrb	r0, [r3, #0]
    7ef0:	2300      	movs	r3, #0
    7ef2:	2201      	movs	r2, #1
    7ef4:	4c0d      	ldr	r4, [pc, #52]	; (7f2c <usbdc_get_req+0x88>)
    7ef6:	47a0      	blx	r4
		return true;
    7ef8:	2301      	movs	r3, #1
    7efa:	e00f      	b.n	7f1c <usbdc_get_req+0x78>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    7efc:	683a      	ldr	r2, [r7, #0]
    7efe:	1dfb      	adds	r3, r7, #7
    7f00:	781b      	ldrb	r3, [r3, #0]
    7f02:	0011      	movs	r1, r2
    7f04:	0018      	movs	r0, r3
    7f06:	4b0a      	ldr	r3, [pc, #40]	; (7f30 <usbdc_get_req+0x8c>)
    7f08:	4798      	blx	r3
    7f0a:	0003      	movs	r3, r0
    7f0c:	e006      	b.n	7f1c <usbdc_get_req+0x78>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    7f0e:	683b      	ldr	r3, [r7, #0]
    7f10:	0018      	movs	r0, r3
    7f12:	4b08      	ldr	r3, [pc, #32]	; (7f34 <usbdc_get_req+0x90>)
    7f14:	4798      	blx	r3
    7f16:	0003      	movs	r3, r0
    7f18:	e000      	b.n	7f1c <usbdc_get_req+0x78>
	default:
		return false;
    7f1a:	2300      	movs	r3, #0
	}
}
    7f1c:	0018      	movs	r0, r3
    7f1e:	46bd      	mov	sp, r7
    7f20:	b003      	add	sp, #12
    7f22:	bd90      	pop	{r4, r7, pc}
    7f24:	00007cf1 	.word	0x00007cf1
    7f28:	2000108c 	.word	0x2000108c
    7f2c:	00008731 	.word	0x00008731
    7f30:	00007d75 	.word	0x00007d75
    7f34:	00007e0d 	.word	0x00007e0d

00007f38 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    7f38:	b590      	push	{r4, r7, lr}
    7f3a:	b083      	sub	sp, #12
    7f3c:	af00      	add	r7, sp, #0
    7f3e:	0002      	movs	r2, r0
    7f40:	6039      	str	r1, [r7, #0]
    7f42:	1dfb      	adds	r3, r7, #7
    7f44:	701a      	strb	r2, [r3, #0]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    7f46:	683b      	ldr	r3, [r7, #0]
    7f48:	781b      	ldrb	r3, [r3, #0]
    7f4a:	001a      	movs	r2, r3
    7f4c:	231f      	movs	r3, #31
    7f4e:	4013      	ands	r3, r2
    7f50:	2b02      	cmp	r3, #2
    7f52:	d11d      	bne.n	7f90 <usbdc_clear_ftr_req+0x58>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    7f54:	683b      	ldr	r3, [r7, #0]
    7f56:	799a      	ldrb	r2, [r3, #6]
    7f58:	79db      	ldrb	r3, [r3, #7]
    7f5a:	021b      	lsls	r3, r3, #8
    7f5c:	4313      	orrs	r3, r2
    7f5e:	b29b      	uxth	r3, r3
    7f60:	2b00      	cmp	r3, #0
    7f62:	d001      	beq.n	7f68 <usbdc_clear_ftr_req+0x30>
			return false;
    7f64:	2300      	movs	r3, #0
    7f66:	e014      	b.n	7f92 <usbdc_clear_ftr_req+0x5a>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    7f68:	683b      	ldr	r3, [r7, #0]
    7f6a:	791a      	ldrb	r2, [r3, #4]
    7f6c:	795b      	ldrb	r3, [r3, #5]
    7f6e:	021b      	lsls	r3, r3, #8
    7f70:	4313      	orrs	r3, r2
    7f72:	b29b      	uxth	r3, r3
    7f74:	b2db      	uxtb	r3, r3
    7f76:	2100      	movs	r1, #0
    7f78:	0018      	movs	r0, r3
    7f7a:	4b08      	ldr	r3, [pc, #32]	; (7f9c <usbdc_clear_ftr_req+0x64>)
    7f7c:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    7f7e:	1dfb      	adds	r3, r7, #7
    7f80:	7818      	ldrb	r0, [r3, #0]
    7f82:	2301      	movs	r3, #1
    7f84:	2200      	movs	r2, #0
    7f86:	2100      	movs	r1, #0
    7f88:	4c05      	ldr	r4, [pc, #20]	; (7fa0 <usbdc_clear_ftr_req+0x68>)
    7f8a:	47a0      	blx	r4
		return true;
    7f8c:	2301      	movs	r3, #1
    7f8e:	e000      	b.n	7f92 <usbdc_clear_ftr_req+0x5a>
	default:
		return false;
    7f90:	2300      	movs	r3, #0
	}
}
    7f92:	0018      	movs	r0, r3
    7f94:	46bd      	mov	sp, r7
    7f96:	b003      	add	sp, #12
    7f98:	bd90      	pop	{r4, r7, pc}
    7f9a:	46c0      	nop			; (mov r8, r8)
    7f9c:	00002755 	.word	0x00002755
    7fa0:	00008731 	.word	0x00008731

00007fa4 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    7fa4:	b590      	push	{r4, r7, lr}
    7fa6:	b083      	sub	sp, #12
    7fa8:	af00      	add	r7, sp, #0
    7faa:	0002      	movs	r2, r0
    7fac:	6039      	str	r1, [r7, #0]
    7fae:	1dfb      	adds	r3, r7, #7
    7fb0:	701a      	strb	r2, [r3, #0]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    7fb2:	683b      	ldr	r3, [r7, #0]
    7fb4:	781b      	ldrb	r3, [r3, #0]
    7fb6:	001a      	movs	r2, r3
    7fb8:	231f      	movs	r3, #31
    7fba:	4013      	ands	r3, r2
    7fbc:	2b02      	cmp	r3, #2
    7fbe:	d11d      	bne.n	7ffc <usbdc_set_ftr_req+0x58>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    7fc0:	683b      	ldr	r3, [r7, #0]
    7fc2:	799a      	ldrb	r2, [r3, #6]
    7fc4:	79db      	ldrb	r3, [r3, #7]
    7fc6:	021b      	lsls	r3, r3, #8
    7fc8:	4313      	orrs	r3, r2
    7fca:	b29b      	uxth	r3, r3
    7fcc:	2b00      	cmp	r3, #0
    7fce:	d001      	beq.n	7fd4 <usbdc_set_ftr_req+0x30>
			return false;
    7fd0:	2300      	movs	r3, #0
    7fd2:	e014      	b.n	7ffe <usbdc_set_ftr_req+0x5a>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    7fd4:	683b      	ldr	r3, [r7, #0]
    7fd6:	791a      	ldrb	r2, [r3, #4]
    7fd8:	795b      	ldrb	r3, [r3, #5]
    7fda:	021b      	lsls	r3, r3, #8
    7fdc:	4313      	orrs	r3, r2
    7fde:	b29b      	uxth	r3, r3
    7fe0:	b2db      	uxtb	r3, r3
    7fe2:	2101      	movs	r1, #1
    7fe4:	0018      	movs	r0, r3
    7fe6:	4b08      	ldr	r3, [pc, #32]	; (8008 <usbdc_set_ftr_req+0x64>)
    7fe8:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    7fea:	1dfb      	adds	r3, r7, #7
    7fec:	7818      	ldrb	r0, [r3, #0]
    7fee:	2301      	movs	r3, #1
    7ff0:	2200      	movs	r2, #0
    7ff2:	2100      	movs	r1, #0
    7ff4:	4c05      	ldr	r4, [pc, #20]	; (800c <usbdc_set_ftr_req+0x68>)
    7ff6:	47a0      	blx	r4
		return true;
    7ff8:	2301      	movs	r3, #1
    7ffa:	e000      	b.n	7ffe <usbdc_set_ftr_req+0x5a>
	default:
		return false;
    7ffc:	2300      	movs	r3, #0
	}
}
    7ffe:	0018      	movs	r0, r3
    8000:	46bd      	mov	sp, r7
    8002:	b003      	add	sp, #12
    8004:	bd90      	pop	{r4, r7, pc}
    8006:	46c0      	nop			; (mov r8, r8)
    8008:	00002755 	.word	0x00002755
    800c:	00008731 	.word	0x00008731

00008010 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    8010:	b580      	push	{r7, lr}
    8012:	b082      	sub	sp, #8
    8014:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    8016:	4b0a      	ldr	r3, [pc, #40]	; (8040 <usbdc_unconfig+0x30>)
    8018:	691b      	ldr	r3, [r3, #16]
    801a:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    801c:	e008      	b.n	8030 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    801e:	687b      	ldr	r3, [r7, #4]
    8020:	685b      	ldr	r3, [r3, #4]
    8022:	6878      	ldr	r0, [r7, #4]
    8024:	2200      	movs	r2, #0
    8026:	2101      	movs	r1, #1
    8028:	4798      	blx	r3
		func = func->next;
    802a:	687b      	ldr	r3, [r7, #4]
    802c:	681b      	ldr	r3, [r3, #0]
    802e:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    8030:	687b      	ldr	r3, [r7, #4]
    8032:	2b00      	cmp	r3, #0
    8034:	d1f3      	bne.n	801e <usbdc_unconfig+0xe>
	}
}
    8036:	46c0      	nop			; (mov r8, r8)
    8038:	46bd      	mov	sp, r7
    803a:	b002      	add	sp, #8
    803c:	bd80      	pop	{r7, pc}
    803e:	46c0      	nop			; (mov r8, r8)
    8040:	2000108c 	.word	0x2000108c

00008044 <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    8044:	b590      	push	{r4, r7, lr}
    8046:	b089      	sub	sp, #36	; 0x24
    8048:	af00      	add	r7, sp, #0
    804a:	0002      	movs	r2, r0
    804c:	1dfb      	adds	r3, r7, #7
    804e:	701a      	strb	r2, [r3, #0]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    8050:	2300      	movs	r3, #0
    8052:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    8054:	2317      	movs	r3, #23
    8056:	18fb      	adds	r3, r7, r3
    8058:	22ff      	movs	r2, #255	; 0xff
    805a:	701a      	strb	r2, [r3, #0]

	if (cfg_value == 0) {
    805c:	1dfb      	adds	r3, r7, #7
    805e:	781b      	ldrb	r3, [r3, #0]
    8060:	2b00      	cmp	r3, #0
    8062:	d103      	bne.n	806c <usbdc_set_config+0x28>
		usbdc_unconfig();
    8064:	4b3e      	ldr	r3, [pc, #248]	; (8160 <usbdc_set_config+0x11c>)
    8066:	4798      	blx	r3
		return true;
    8068:	2301      	movs	r3, #1
    806a:	e075      	b.n	8158 <usbdc_set_config+0x114>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    806c:	69bb      	ldr	r3, [r7, #24]
    806e:	2b00      	cmp	r3, #0
    8070:	d10c      	bne.n	808c <usbdc_set_config+0x48>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    8072:	4b3c      	ldr	r3, [pc, #240]	; (8164 <usbdc_set_config+0x120>)
    8074:	681b      	ldr	r3, [r3, #0]
    8076:	6818      	ldr	r0, [r3, #0]
    8078:	4b3a      	ldr	r3, [pc, #232]	; (8164 <usbdc_set_config+0x120>)
    807a:	681b      	ldr	r3, [r3, #0]
    807c:	6859      	ldr	r1, [r3, #4]
    807e:	1dfb      	adds	r3, r7, #7
    8080:	781b      	ldrb	r3, [r3, #0]
    8082:	001a      	movs	r2, r3
    8084:	4b38      	ldr	r3, [pc, #224]	; (8168 <usbdc_set_config+0x124>)
    8086:	4798      	blx	r3
    8088:	0003      	movs	r3, r0
    808a:	61bb      	str	r3, [r7, #24]
	}
	if (NULL == cfg_desc) {
    808c:	69bb      	ldr	r3, [r7, #24]
    808e:	2b00      	cmp	r3, #0
    8090:	d101      	bne.n	8096 <usbdc_set_config+0x52>
		return false;
    8092:	2300      	movs	r3, #0
    8094:	e060      	b.n	8158 <usbdc_set_config+0x114>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    8096:	2314      	movs	r3, #20
    8098:	18fc      	adds	r4, r7, r3
    809a:	69bb      	ldr	r3, [r7, #24]
    809c:	0018      	movs	r0, r3
    809e:	4b33      	ldr	r3, [pc, #204]	; (816c <usbdc_set_config+0x128>)
    80a0:	4798      	blx	r3
    80a2:	0003      	movs	r3, r0
    80a4:	8023      	strh	r3, [r4, #0]
	desc.eod  = cfg_desc + total_len;
    80a6:	2314      	movs	r3, #20
    80a8:	18fb      	adds	r3, r7, r3
    80aa:	881b      	ldrh	r3, [r3, #0]
    80ac:	69ba      	ldr	r2, [r7, #24]
    80ae:	18d2      	adds	r2, r2, r3
    80b0:	230c      	movs	r3, #12
    80b2:	18fb      	adds	r3, r7, r3
    80b4:	605a      	str	r2, [r3, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    80b6:	230c      	movs	r3, #12
    80b8:	18fb      	adds	r3, r7, r3
    80ba:	6859      	ldr	r1, [r3, #4]
    80bc:	69bb      	ldr	r3, [r7, #24]
    80be:	2204      	movs	r2, #4
    80c0:	0018      	movs	r0, r3
    80c2:	4b2b      	ldr	r3, [pc, #172]	; (8170 <usbdc_set_config+0x12c>)
    80c4:	4798      	blx	r3
    80c6:	0002      	movs	r2, r0
    80c8:	230c      	movs	r3, #12
    80ca:	18fb      	adds	r3, r7, r3
    80cc:	601a      	str	r2, [r3, #0]

	while (NULL != desc.sod) {
    80ce:	e03d      	b.n	814c <usbdc_set_config+0x108>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    80d0:	230c      	movs	r3, #12
    80d2:	18fb      	adds	r3, r7, r3
    80d4:	681b      	ldr	r3, [r3, #0]
    80d6:	3302      	adds	r3, #2
    80d8:	781b      	ldrb	r3, [r3, #0]
    80da:	2217      	movs	r2, #23
    80dc:	18ba      	adds	r2, r7, r2
    80de:	7812      	ldrb	r2, [r2, #0]
    80e0:	429a      	cmp	r2, r3
    80e2:	d01b      	beq.n	811c <usbdc_set_config+0xd8>
			last_iface = desc.sod[2];
    80e4:	230c      	movs	r3, #12
    80e6:	18fb      	adds	r3, r7, r3
    80e8:	681a      	ldr	r2, [r3, #0]
    80ea:	2317      	movs	r3, #23
    80ec:	18fb      	adds	r3, r7, r3
    80ee:	7892      	ldrb	r2, [r2, #2]
    80f0:	701a      	strb	r2, [r3, #0]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    80f2:	4b1c      	ldr	r3, [pc, #112]	; (8164 <usbdc_set_config+0x120>)
    80f4:	691b      	ldr	r3, [r3, #16]
    80f6:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    80f8:	e00b      	b.n	8112 <usbdc_set_config+0xce>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    80fa:	69fb      	ldr	r3, [r7, #28]
    80fc:	685b      	ldr	r3, [r3, #4]
    80fe:	220c      	movs	r2, #12
    8100:	18ba      	adds	r2, r7, r2
    8102:	69f8      	ldr	r0, [r7, #28]
    8104:	2100      	movs	r1, #0
    8106:	4798      	blx	r3
    8108:	1e03      	subs	r3, r0, #0
    810a:	d006      	beq.n	811a <usbdc_set_config+0xd6>
					func = func->next;
    810c:	69fb      	ldr	r3, [r7, #28]
    810e:	681b      	ldr	r3, [r3, #0]
    8110:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    8112:	69fb      	ldr	r3, [r7, #28]
    8114:	2b00      	cmp	r3, #0
    8116:	d1f0      	bne.n	80fa <usbdc_set_config+0xb6>
    8118:	e000      	b.n	811c <usbdc_set_config+0xd8>
				} else {
					break;
    811a:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    811c:	230c      	movs	r3, #12
    811e:	18fb      	adds	r3, r7, r3
    8120:	681b      	ldr	r3, [r3, #0]
    8122:	0018      	movs	r0, r3
    8124:	4b13      	ldr	r3, [pc, #76]	; (8174 <usbdc_set_config+0x130>)
    8126:	4798      	blx	r3
    8128:	0002      	movs	r2, r0
    812a:	230c      	movs	r3, #12
    812c:	18fb      	adds	r3, r7, r3
    812e:	601a      	str	r2, [r3, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    8130:	230c      	movs	r3, #12
    8132:	18fb      	adds	r3, r7, r3
    8134:	6818      	ldr	r0, [r3, #0]
    8136:	230c      	movs	r3, #12
    8138:	18fb      	adds	r3, r7, r3
    813a:	685b      	ldr	r3, [r3, #4]
    813c:	2204      	movs	r2, #4
    813e:	0019      	movs	r1, r3
    8140:	4b0b      	ldr	r3, [pc, #44]	; (8170 <usbdc_set_config+0x12c>)
    8142:	4798      	blx	r3
    8144:	0002      	movs	r2, r0
    8146:	230c      	movs	r3, #12
    8148:	18fb      	adds	r3, r7, r3
    814a:	601a      	str	r2, [r3, #0]
	while (NULL != desc.sod) {
    814c:	230c      	movs	r3, #12
    814e:	18fb      	adds	r3, r7, r3
    8150:	681b      	ldr	r3, [r3, #0]
    8152:	2b00      	cmp	r3, #0
    8154:	d1bc      	bne.n	80d0 <usbdc_set_config+0x8c>
	}
	return true;
    8156:	2301      	movs	r3, #1
}
    8158:	0018      	movs	r0, r3
    815a:	46bd      	mov	sp, r7
    815c:	b009      	add	sp, #36	; 0x24
    815e:	bd90      	pop	{r4, r7, pc}
    8160:	00008011 	.word	0x00008011
    8164:	2000108c 	.word	0x2000108c
    8168:	00008ab9 	.word	0x00008ab9
    816c:	00007a91 	.word	0x00007a91
    8170:	000089e9 	.word	0x000089e9
    8174:	00007a6d 	.word	0x00007a6d

00008178 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    8178:	b580      	push	{r7, lr}
    817a:	b082      	sub	sp, #8
    817c:	af00      	add	r7, sp, #0
    817e:	0002      	movs	r2, r0
    8180:	1dfb      	adds	r3, r7, #7
    8182:	701a      	strb	r2, [r3, #0]
	usb_d_set_address(addr);
    8184:	1dfb      	adds	r3, r7, #7
    8186:	781b      	ldrb	r3, [r3, #0]
    8188:	0018      	movs	r0, r3
    818a:	4b03      	ldr	r3, [pc, #12]	; (8198 <usbdc_set_address+0x20>)
    818c:	4798      	blx	r3
}
    818e:	46c0      	nop			; (mov r8, r8)
    8190:	46bd      	mov	sp, r7
    8192:	b002      	add	sp, #8
    8194:	bd80      	pop	{r7, pc}
    8196:	46c0      	nop			; (mov r8, r8)
    8198:	00002321 	.word	0x00002321

0000819c <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    819c:	b590      	push	{r4, r7, lr}
    819e:	b087      	sub	sp, #28
    81a0:	af00      	add	r7, sp, #0
    81a2:	0002      	movs	r2, r0
    81a4:	1dbb      	adds	r3, r7, #6
    81a6:	801a      	strh	r2, [r3, #0]
    81a8:	1d3b      	adds	r3, r7, #4
    81aa:	1c0a      	adds	r2, r1, #0
    81ac:	801a      	strh	r2, [r3, #0]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    81ae:	2300      	movs	r3, #0
    81b0:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    81b2:	693b      	ldr	r3, [r7, #16]
    81b4:	2b00      	cmp	r3, #0
    81b6:	d10c      	bne.n	81d2 <usbdc_set_interface+0x36>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    81b8:	4b4f      	ldr	r3, [pc, #316]	; (82f8 <usbdc_set_interface+0x15c>)
    81ba:	681b      	ldr	r3, [r3, #0]
    81bc:	6818      	ldr	r0, [r3, #0]
    81be:	4b4e      	ldr	r3, [pc, #312]	; (82f8 <usbdc_set_interface+0x15c>)
    81c0:	681b      	ldr	r3, [r3, #0]
    81c2:	6859      	ldr	r1, [r3, #4]
    81c4:	4b4c      	ldr	r3, [pc, #304]	; (82f8 <usbdc_set_interface+0x15c>)
    81c6:	7edb      	ldrb	r3, [r3, #27]
    81c8:	001a      	movs	r2, r3
    81ca:	4b4c      	ldr	r3, [pc, #304]	; (82fc <usbdc_set_interface+0x160>)
    81cc:	4798      	blx	r3
    81ce:	0003      	movs	r3, r0
    81d0:	613b      	str	r3, [r7, #16]
	}
	if (NULL == ifc) {
    81d2:	693b      	ldr	r3, [r7, #16]
    81d4:	2b00      	cmp	r3, #0
    81d6:	d101      	bne.n	81dc <usbdc_set_interface+0x40>
		return false;
    81d8:	2300      	movs	r3, #0
    81da:	e088      	b.n	82ee <usbdc_set_interface+0x152>
	}
	desc.sod = ifc;
    81dc:	2308      	movs	r3, #8
    81de:	18fb      	adds	r3, r7, r3
    81e0:	693a      	ldr	r2, [r7, #16]
    81e2:	601a      	str	r2, [r3, #0]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    81e4:	693b      	ldr	r3, [r7, #16]
    81e6:	0018      	movs	r0, r3
    81e8:	4b45      	ldr	r3, [pc, #276]	; (8300 <usbdc_set_interface+0x164>)
    81ea:	4798      	blx	r3
    81ec:	0003      	movs	r3, r0
    81ee:	001a      	movs	r2, r3
    81f0:	693b      	ldr	r3, [r7, #16]
    81f2:	189a      	adds	r2, r3, r2
    81f4:	2308      	movs	r3, #8
    81f6:	18fb      	adds	r3, r7, r3
    81f8:	605a      	str	r2, [r3, #4]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    81fa:	2308      	movs	r3, #8
    81fc:	18fb      	adds	r3, r7, r3
    81fe:	6818      	ldr	r0, [r3, #0]
    8200:	2308      	movs	r3, #8
    8202:	18fb      	adds	r3, r7, r3
    8204:	685b      	ldr	r3, [r3, #4]
    8206:	2204      	movs	r2, #4
    8208:	0019      	movs	r1, r3
    820a:	4b3e      	ldr	r3, [pc, #248]	; (8304 <usbdc_set_interface+0x168>)
    820c:	4798      	blx	r3
    820e:	0003      	movs	r3, r0
    8210:	613b      	str	r3, [r7, #16]
    8212:	693b      	ldr	r3, [r7, #16]
    8214:	2b00      	cmp	r3, #0
    8216:	d11c      	bne.n	8252 <usbdc_set_interface+0xb6>
		return false;
    8218:	2300      	movs	r3, #0
    821a:	e068      	b.n	82ee <usbdc_set_interface+0x152>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    821c:	2308      	movs	r3, #8
    821e:	18fb      	adds	r3, r7, r3
    8220:	681b      	ldr	r3, [r3, #0]
    8222:	0018      	movs	r0, r3
    8224:	4b38      	ldr	r3, [pc, #224]	; (8308 <usbdc_set_interface+0x16c>)
    8226:	4798      	blx	r3
    8228:	0002      	movs	r2, r0
    822a:	2308      	movs	r3, #8
    822c:	18fb      	adds	r3, r7, r3
    822e:	601a      	str	r2, [r3, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    8230:	2308      	movs	r3, #8
    8232:	18fb      	adds	r3, r7, r3
    8234:	6818      	ldr	r0, [r3, #0]
    8236:	2308      	movs	r3, #8
    8238:	18fb      	adds	r3, r7, r3
    823a:	685b      	ldr	r3, [r3, #4]
    823c:	2204      	movs	r2, #4
    823e:	0019      	movs	r1, r3
    8240:	4b30      	ldr	r3, [pc, #192]	; (8304 <usbdc_set_interface+0x168>)
    8242:	4798      	blx	r3
    8244:	0003      	movs	r3, r0
    8246:	613b      	str	r3, [r7, #16]
		if (NULL == ifc) {
    8248:	693b      	ldr	r3, [r7, #16]
    824a:	2b00      	cmp	r3, #0
    824c:	d101      	bne.n	8252 <usbdc_set_interface+0xb6>
			return false;
    824e:	2300      	movs	r3, #0
    8250:	e04d      	b.n	82ee <usbdc_set_interface+0x152>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    8252:	693b      	ldr	r3, [r7, #16]
    8254:	3302      	adds	r3, #2
    8256:	781b      	ldrb	r3, [r3, #0]
    8258:	b29b      	uxth	r3, r3
    825a:	1d3a      	adds	r2, r7, #4
    825c:	8812      	ldrh	r2, [r2, #0]
    825e:	429a      	cmp	r2, r3
    8260:	d1dc      	bne.n	821c <usbdc_set_interface+0x80>
    8262:	693b      	ldr	r3, [r7, #16]
    8264:	3303      	adds	r3, #3
    8266:	781b      	ldrb	r3, [r3, #0]
    8268:	b29b      	uxth	r3, r3
    826a:	1dba      	adds	r2, r7, #6
    826c:	8812      	ldrh	r2, [r2, #0]
    826e:	429a      	cmp	r2, r3
    8270:	d1d4      	bne.n	821c <usbdc_set_interface+0x80>
		}
	}

	desc.sod = ifc;
    8272:	2308      	movs	r3, #8
    8274:	18fb      	adds	r3, r7, r3
    8276:	693a      	ldr	r2, [r7, #16]
    8278:	601a      	str	r2, [r3, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    827a:	4b1f      	ldr	r3, [pc, #124]	; (82f8 <usbdc_set_interface+0x15c>)
    827c:	691b      	ldr	r3, [r3, #16]
    827e:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    8280:	e031      	b.n	82e6 <usbdc_set_interface+0x14a>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    8282:	697b      	ldr	r3, [r7, #20]
    8284:	685b      	ldr	r3, [r3, #4]
    8286:	2208      	movs	r2, #8
    8288:	18ba      	adds	r2, r7, r2
    828a:	6978      	ldr	r0, [r7, #20]
    828c:	2101      	movs	r1, #1
    828e:	4798      	blx	r3
    8290:	1e03      	subs	r3, r0, #0
    8292:	d003      	beq.n	829c <usbdc_set_interface+0x100>
			func = func->next;
    8294:	697b      	ldr	r3, [r7, #20]
    8296:	681b      	ldr	r3, [r3, #0]
    8298:	617b      	str	r3, [r7, #20]
    829a:	e024      	b.n	82e6 <usbdc_set_interface+0x14a>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    829c:	697b      	ldr	r3, [r7, #20]
    829e:	685b      	ldr	r3, [r3, #4]
    82a0:	2208      	movs	r2, #8
    82a2:	18ba      	adds	r2, r7, r2
    82a4:	6978      	ldr	r0, [r7, #20]
    82a6:	2100      	movs	r1, #0
    82a8:	4798      	blx	r3
    82aa:	1e03      	subs	r3, r0, #0
    82ac:	d119      	bne.n	82e2 <usbdc_set_interface+0x146>
			if (alt_set) {
    82ae:	1dbb      	adds	r3, r7, #6
    82b0:	881b      	ldrh	r3, [r3, #0]
    82b2:	2b00      	cmp	r3, #0
    82b4:	d00d      	beq.n	82d2 <usbdc_set_interface+0x136>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    82b6:	4b10      	ldr	r3, [pc, #64]	; (82f8 <usbdc_set_interface+0x15c>)
    82b8:	7f5b      	ldrb	r3, [r3, #29]
    82ba:	b25a      	sxtb	r2, r3
    82bc:	1d3b      	adds	r3, r7, #4
    82be:	881b      	ldrh	r3, [r3, #0]
    82c0:	2101      	movs	r1, #1
    82c2:	4099      	lsls	r1, r3
    82c4:	000b      	movs	r3, r1
    82c6:	b25b      	sxtb	r3, r3
    82c8:	4313      	orrs	r3, r2
    82ca:	b25b      	sxtb	r3, r3
    82cc:	b2da      	uxtb	r2, r3
    82ce:	4b0a      	ldr	r3, [pc, #40]	; (82f8 <usbdc_set_interface+0x15c>)
    82d0:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    82d2:	2300      	movs	r3, #0
    82d4:	2200      	movs	r2, #0
    82d6:	2100      	movs	r1, #0
    82d8:	2000      	movs	r0, #0
    82da:	4c0c      	ldr	r4, [pc, #48]	; (830c <usbdc_set_interface+0x170>)
    82dc:	47a0      	blx	r4
			return true;
    82de:	2301      	movs	r3, #1
    82e0:	e005      	b.n	82ee <usbdc_set_interface+0x152>
		} else {
			return false;
    82e2:	2300      	movs	r3, #0
    82e4:	e003      	b.n	82ee <usbdc_set_interface+0x152>
	while (NULL != func) {
    82e6:	697b      	ldr	r3, [r7, #20]
    82e8:	2b00      	cmp	r3, #0
    82ea:	d1ca      	bne.n	8282 <usbdc_set_interface+0xe6>
		}
	}

	return false;
    82ec:	2300      	movs	r3, #0
}
    82ee:	0018      	movs	r0, r3
    82f0:	46bd      	mov	sp, r7
    82f2:	b007      	add	sp, #28
    82f4:	bd90      	pop	{r4, r7, pc}
    82f6:	46c0      	nop			; (mov r8, r8)
    82f8:	2000108c 	.word	0x2000108c
    82fc:	00008ab9 	.word	0x00008ab9
    8300:	00007a91 	.word	0x00007a91
    8304:	000089e9 	.word	0x000089e9
    8308:	00007a6d 	.word	0x00007a6d
    830c:	00008731 	.word	0x00008731

00008310 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    8310:	b590      	push	{r4, r7, lr}
    8312:	b083      	sub	sp, #12
    8314:	af00      	add	r7, sp, #0
    8316:	0002      	movs	r2, r0
    8318:	6039      	str	r1, [r7, #0]
    831a:	1dfb      	adds	r3, r7, #7
    831c:	701a      	strb	r2, [r3, #0]
	switch (req->bRequest) {
    831e:	683b      	ldr	r3, [r7, #0]
    8320:	785b      	ldrb	r3, [r3, #1]
    8322:	2b0b      	cmp	r3, #11
    8324:	d852      	bhi.n	83cc <usbdc_set_req+0xbc>
    8326:	009a      	lsls	r2, r3, #2
    8328:	4b2b      	ldr	r3, [pc, #172]	; (83d8 <usbdc_set_req+0xc8>)
    832a:	18d3      	adds	r3, r2, r3
    832c:	681b      	ldr	r3, [r3, #0]
    832e:	469f      	mov	pc, r3
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    8330:	1dfb      	adds	r3, r7, #7
    8332:	7818      	ldrb	r0, [r3, #0]
    8334:	2301      	movs	r3, #1
    8336:	2200      	movs	r2, #0
    8338:	2100      	movs	r1, #0
    833a:	4c28      	ldr	r4, [pc, #160]	; (83dc <usbdc_set_req+0xcc>)
    833c:	47a0      	blx	r4
    833e:	0003      	movs	r3, r0
    8340:	425a      	negs	r2, r3
    8342:	4153      	adcs	r3, r2
    8344:	b2db      	uxtb	r3, r3
    8346:	e042      	b.n	83ce <usbdc_set_req+0xbe>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    8348:	683b      	ldr	r3, [r7, #0]
    834a:	789a      	ldrb	r2, [r3, #2]
    834c:	78db      	ldrb	r3, [r3, #3]
    834e:	021b      	lsls	r3, r3, #8
    8350:	4313      	orrs	r3, r2
    8352:	b29b      	uxth	r3, r3
    8354:	b2db      	uxtb	r3, r3
    8356:	0018      	movs	r0, r3
    8358:	4b21      	ldr	r3, [pc, #132]	; (83e0 <usbdc_set_req+0xd0>)
    835a:	4798      	blx	r3
    835c:	0003      	movs	r3, r0
    835e:	001a      	movs	r2, r3
    8360:	2301      	movs	r3, #1
    8362:	4053      	eors	r3, r2
    8364:	b2db      	uxtb	r3, r3
    8366:	2b00      	cmp	r3, #0
    8368:	d001      	beq.n	836e <usbdc_set_req+0x5e>
			return false;
    836a:	2300      	movs	r3, #0
    836c:	e02f      	b.n	83ce <usbdc_set_req+0xbe>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    836e:	1dfb      	adds	r3, r7, #7
    8370:	7818      	ldrb	r0, [r3, #0]
    8372:	2301      	movs	r3, #1
    8374:	2200      	movs	r2, #0
    8376:	2100      	movs	r1, #0
    8378:	4c18      	ldr	r4, [pc, #96]	; (83dc <usbdc_set_req+0xcc>)
    837a:	47a0      	blx	r4
    837c:	0003      	movs	r3, r0
    837e:	425a      	negs	r2, r3
    8380:	4153      	adcs	r3, r2
    8382:	b2db      	uxtb	r3, r3
    8384:	e023      	b.n	83ce <usbdc_set_req+0xbe>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    8386:	683a      	ldr	r2, [r7, #0]
    8388:	1dfb      	adds	r3, r7, #7
    838a:	781b      	ldrb	r3, [r3, #0]
    838c:	0011      	movs	r1, r2
    838e:	0018      	movs	r0, r3
    8390:	4b14      	ldr	r3, [pc, #80]	; (83e4 <usbdc_set_req+0xd4>)
    8392:	4798      	blx	r3
    8394:	0003      	movs	r3, r0
    8396:	e01a      	b.n	83ce <usbdc_set_req+0xbe>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    8398:	683a      	ldr	r2, [r7, #0]
    839a:	1dfb      	adds	r3, r7, #7
    839c:	781b      	ldrb	r3, [r3, #0]
    839e:	0011      	movs	r1, r2
    83a0:	0018      	movs	r0, r3
    83a2:	4b11      	ldr	r3, [pc, #68]	; (83e8 <usbdc_set_req+0xd8>)
    83a4:	4798      	blx	r3
    83a6:	0003      	movs	r3, r0
    83a8:	e011      	b.n	83ce <usbdc_set_req+0xbe>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    83aa:	683b      	ldr	r3, [r7, #0]
    83ac:	789a      	ldrb	r2, [r3, #2]
    83ae:	78db      	ldrb	r3, [r3, #3]
    83b0:	021b      	lsls	r3, r3, #8
    83b2:	4313      	orrs	r3, r2
    83b4:	b298      	uxth	r0, r3
    83b6:	683b      	ldr	r3, [r7, #0]
    83b8:	791a      	ldrb	r2, [r3, #4]
    83ba:	795b      	ldrb	r3, [r3, #5]
    83bc:	021b      	lsls	r3, r3, #8
    83be:	4313      	orrs	r3, r2
    83c0:	b29b      	uxth	r3, r3
    83c2:	0019      	movs	r1, r3
    83c4:	4b09      	ldr	r3, [pc, #36]	; (83ec <usbdc_set_req+0xdc>)
    83c6:	4798      	blx	r3
    83c8:	0003      	movs	r3, r0
    83ca:	e000      	b.n	83ce <usbdc_set_req+0xbe>
	default:
		return false;
    83cc:	2300      	movs	r3, #0
	}
}
    83ce:	0018      	movs	r0, r3
    83d0:	46bd      	mov	sp, r7
    83d2:	b003      	add	sp, #12
    83d4:	bd90      	pop	{r4, r7, pc}
    83d6:	46c0      	nop			; (mov r8, r8)
    83d8:	0000fd90 	.word	0x0000fd90
    83dc:	00008731 	.word	0x00008731
    83e0:	00008045 	.word	0x00008045
    83e4:	00007f39 	.word	0x00007f39
    83e8:	00007fa5 	.word	0x00007fa5
    83ec:	0000819d 	.word	0x0000819d

000083f0 <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    83f0:	b580      	push	{r7, lr}
    83f2:	b082      	sub	sp, #8
    83f4:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    83f6:	4b0a      	ldr	r3, [pc, #40]	; (8420 <usbdc_sof_notify+0x30>)
    83f8:	685b      	ldr	r3, [r3, #4]
    83fa:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    83fc:	e009      	b.n	8412 <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    83fe:	687b      	ldr	r3, [r7, #4]
    8400:	685b      	ldr	r3, [r3, #4]
    8402:	2b00      	cmp	r3, #0
    8404:	d002      	beq.n	840c <usbdc_sof_notify+0x1c>
			sof->cb();
    8406:	687b      	ldr	r3, [r7, #4]
    8408:	685b      	ldr	r3, [r3, #4]
    840a:	4798      	blx	r3
		}
		sof = sof->next;
    840c:	687b      	ldr	r3, [r7, #4]
    840e:	681b      	ldr	r3, [r3, #0]
    8410:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    8412:	687b      	ldr	r3, [r7, #4]
    8414:	2b00      	cmp	r3, #0
    8416:	d1f2      	bne.n	83fe <usbdc_sof_notify+0xe>
	}
}
    8418:	46c0      	nop			; (mov r8, r8)
    841a:	46bd      	mov	sp, r7
    841c:	b002      	add	sp, #8
    841e:	bd80      	pop	{r7, pc}
    8420:	2000108c 	.word	0x2000108c

00008424 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    8424:	b580      	push	{r7, lr}
    8426:	b084      	sub	sp, #16
    8428:	af00      	add	r7, sp, #0
    842a:	0002      	movs	r2, r0
    842c:	6039      	str	r1, [r7, #0]
    842e:	1dfb      	adds	r3, r7, #7
    8430:	701a      	strb	r2, [r3, #0]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    8432:	4b0c      	ldr	r3, [pc, #48]	; (8464 <usbdc_change_notify+0x40>)
    8434:	68db      	ldr	r3, [r3, #12]
    8436:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    8438:	e00d      	b.n	8456 <usbdc_change_notify+0x32>
		if (NULL != cg->cb) {
    843a:	68fb      	ldr	r3, [r7, #12]
    843c:	685b      	ldr	r3, [r3, #4]
    843e:	2b00      	cmp	r3, #0
    8440:	d006      	beq.n	8450 <usbdc_change_notify+0x2c>
			cg->cb(change, value);
    8442:	68fb      	ldr	r3, [r7, #12]
    8444:	685b      	ldr	r3, [r3, #4]
    8446:	6839      	ldr	r1, [r7, #0]
    8448:	1dfa      	adds	r2, r7, #7
    844a:	7812      	ldrb	r2, [r2, #0]
    844c:	0010      	movs	r0, r2
    844e:	4798      	blx	r3
		}
		cg = cg->next;
    8450:	68fb      	ldr	r3, [r7, #12]
    8452:	681b      	ldr	r3, [r3, #0]
    8454:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    8456:	68fb      	ldr	r3, [r7, #12]
    8458:	2b00      	cmp	r3, #0
    845a:	d1ee      	bne.n	843a <usbdc_change_notify+0x16>
	}
}
    845c:	46c0      	nop			; (mov r8, r8)
    845e:	46bd      	mov	sp, r7
    8460:	b004      	add	sp, #16
    8462:	bd80      	pop	{r7, pc}
    8464:	2000108c 	.word	0x2000108c

00008468 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    8468:	b590      	push	{r4, r7, lr}
    846a:	b085      	sub	sp, #20
    846c:	af00      	add	r7, sp, #0
    846e:	6039      	str	r1, [r7, #0]
    8470:	0011      	movs	r1, r2
    8472:	1dfb      	adds	r3, r7, #7
    8474:	1c02      	adds	r2, r0, #0
    8476:	701a      	strb	r2, [r3, #0]
    8478:	1dbb      	adds	r3, r7, #6
    847a:	1c0a      	adds	r2, r1, #0
    847c:	701a      	strb	r2, [r3, #0]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    847e:	4b14      	ldr	r3, [pc, #80]	; (84d0 <usbdc_request_handler+0x68>)
    8480:	689b      	ldr	r3, [r3, #8]
    8482:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    8484:	e01c      	b.n	84c0 <usbdc_request_handler+0x58>
		if (NULL != h->cb) {
    8486:	68fb      	ldr	r3, [r7, #12]
    8488:	685b      	ldr	r3, [r3, #4]
    848a:	2b00      	cmp	r3, #0
    848c:	d015      	beq.n	84ba <usbdc_request_handler+0x52>
			rc = h->cb(ep, req, stage);
    848e:	68fb      	ldr	r3, [r7, #12]
    8490:	685b      	ldr	r3, [r3, #4]
    8492:	1dba      	adds	r2, r7, #6
    8494:	7814      	ldrb	r4, [r2, #0]
    8496:	6839      	ldr	r1, [r7, #0]
    8498:	1dfa      	adds	r2, r7, #7
    849a:	7810      	ldrb	r0, [r2, #0]
    849c:	0022      	movs	r2, r4
    849e:	4798      	blx	r3
    84a0:	0003      	movs	r3, r0
    84a2:	60bb      	str	r3, [r7, #8]
			if (0 == rc) {
    84a4:	68bb      	ldr	r3, [r7, #8]
    84a6:	2b00      	cmp	r3, #0
    84a8:	d101      	bne.n	84ae <usbdc_request_handler+0x46>
				return true;
    84aa:	2301      	movs	r3, #1
    84ac:	e00c      	b.n	84c8 <usbdc_request_handler+0x60>
			} else if (ERR_NOT_FOUND != rc) {
    84ae:	68bb      	ldr	r3, [r7, #8]
    84b0:	330a      	adds	r3, #10
    84b2:	d002      	beq.n	84ba <usbdc_request_handler+0x52>
				return -1;
    84b4:	2301      	movs	r3, #1
    84b6:	425b      	negs	r3, r3
    84b8:	e006      	b.n	84c8 <usbdc_request_handler+0x60>
			}
		}
		h = h->next;
    84ba:	68fb      	ldr	r3, [r7, #12]
    84bc:	681b      	ldr	r3, [r3, #0]
    84be:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    84c0:	68fb      	ldr	r3, [r7, #12]
    84c2:	2b00      	cmp	r3, #0
    84c4:	d1df      	bne.n	8486 <usbdc_request_handler+0x1e>
	}
	return false;
    84c6:	2300      	movs	r3, #0
}
    84c8:	0018      	movs	r0, r3
    84ca:	46bd      	mov	sp, r7
    84cc:	b005      	add	sp, #20
    84ce:	bd90      	pop	{r4, r7, pc}
    84d0:	2000108c 	.word	0x2000108c

000084d4 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    84d4:	b580      	push	{r7, lr}
    84d6:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    84d8:	4b02      	ldr	r3, [pc, #8]	; (84e4 <usbd_sof_cb+0x10>)
    84da:	4798      	blx	r3
}
    84dc:	46c0      	nop			; (mov r8, r8)
    84de:	46bd      	mov	sp, r7
    84e0:	bd80      	pop	{r7, pc}
    84e2:	46c0      	nop			; (mov r8, r8)
    84e4:	000083f1 	.word	0x000083f1

000084e8 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    84e8:	b580      	push	{r7, lr}
    84ea:	b082      	sub	sp, #8
    84ec:	af00      	add	r7, sp, #0
    84ee:	0002      	movs	r2, r0
    84f0:	6039      	str	r1, [r7, #0]
    84f2:	1dfb      	adds	r3, r7, #7
    84f4:	701a      	strb	r2, [r3, #0]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    84f6:	6839      	ldr	r1, [r7, #0]
    84f8:	1dfb      	adds	r3, r7, #7
    84fa:	781b      	ldrb	r3, [r3, #0]
    84fc:	2200      	movs	r2, #0
    84fe:	0018      	movs	r0, r3
    8500:	4b16      	ldr	r3, [pc, #88]	; (855c <usbdc_cb_ctl_req+0x74>)
    8502:	4798      	blx	r3
    8504:	0003      	movs	r3, r0
    8506:	1c5a      	adds	r2, r3, #1
    8508:	d00b      	beq.n	8522 <usbdc_cb_ctl_req+0x3a>
    850a:	2b01      	cmp	r3, #1
    850c:	d007      	beq.n	851e <usbdc_cb_ctl_req+0x36>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    850e:	46c0      	nop			; (mov r8, r8)
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    8510:	683b      	ldr	r3, [r7, #0]
    8512:	781b      	ldrb	r3, [r3, #0]
    8514:	001a      	movs	r2, r3
    8516:	23e0      	movs	r3, #224	; 0xe0
    8518:	4013      	ands	r3, r2
    851a:	d007      	beq.n	852c <usbdc_cb_ctl_req+0x44>
    851c:	e003      	b.n	8526 <usbdc_cb_ctl_req+0x3e>
		return true;
    851e:	2301      	movs	r3, #1
    8520:	e017      	b.n	8552 <usbdc_cb_ctl_req+0x6a>
		return false;
    8522:	2300      	movs	r3, #0
    8524:	e015      	b.n	8552 <usbdc_cb_ctl_req+0x6a>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    8526:	2b80      	cmp	r3, #128	; 0x80
    8528:	d009      	beq.n	853e <usbdc_cb_ctl_req+0x56>
    852a:	e011      	b.n	8550 <usbdc_cb_ctl_req+0x68>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    852c:	683a      	ldr	r2, [r7, #0]
    852e:	1dfb      	adds	r3, r7, #7
    8530:	781b      	ldrb	r3, [r3, #0]
    8532:	0011      	movs	r1, r2
    8534:	0018      	movs	r0, r3
    8536:	4b0a      	ldr	r3, [pc, #40]	; (8560 <usbdc_cb_ctl_req+0x78>)
    8538:	4798      	blx	r3
    853a:	0003      	movs	r3, r0
    853c:	e009      	b.n	8552 <usbdc_cb_ctl_req+0x6a>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    853e:	683a      	ldr	r2, [r7, #0]
    8540:	1dfb      	adds	r3, r7, #7
    8542:	781b      	ldrb	r3, [r3, #0]
    8544:	0011      	movs	r1, r2
    8546:	0018      	movs	r0, r3
    8548:	4b06      	ldr	r3, [pc, #24]	; (8564 <usbdc_cb_ctl_req+0x7c>)
    854a:	4798      	blx	r3
    854c:	0003      	movs	r3, r0
    854e:	e000      	b.n	8552 <usbdc_cb_ctl_req+0x6a>
	default:
		return false;
    8550:	2300      	movs	r3, #0
	}
}
    8552:	0018      	movs	r0, r3
    8554:	46bd      	mov	sp, r7
    8556:	b002      	add	sp, #8
    8558:	bd80      	pop	{r7, pc}
    855a:	46c0      	nop			; (mov r8, r8)
    855c:	00008469 	.word	0x00008469
    8560:	00008311 	.word	0x00008311
    8564:	00007ea5 	.word	0x00007ea5

00008568 <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    8568:	b580      	push	{r7, lr}
    856a:	b082      	sub	sp, #8
    856c:	af00      	add	r7, sp, #0
    856e:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    8570:	687b      	ldr	r3, [r7, #4]
    8572:	781b      	ldrb	r3, [r3, #0]
    8574:	2b00      	cmp	r3, #0
    8576:	d141      	bne.n	85fc <usbdc_ctrl_status_end+0x94>
		return;
	}
	switch (req->bRequest) {
    8578:	687b      	ldr	r3, [r7, #4]
    857a:	785b      	ldrb	r3, [r3, #1]
    857c:	2b05      	cmp	r3, #5
    857e:	d01f      	beq.n	85c0 <usbdc_ctrl_status_end+0x58>
    8580:	2b09      	cmp	r3, #9
    8582:	d000      	beq.n	8586 <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    8584:	e03b      	b.n	85fe <usbdc_ctrl_status_end+0x96>
		usbdc.cfg_value = req->wValue;
    8586:	687b      	ldr	r3, [r7, #4]
    8588:	789a      	ldrb	r2, [r3, #2]
    858a:	78db      	ldrb	r3, [r3, #3]
    858c:	021b      	lsls	r3, r3, #8
    858e:	4313      	orrs	r3, r2
    8590:	b29b      	uxth	r3, r3
    8592:	b2da      	uxtb	r2, r3
    8594:	4b1b      	ldr	r3, [pc, #108]	; (8604 <usbdc_ctrl_status_end+0x9c>)
    8596:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    8598:	687b      	ldr	r3, [r7, #4]
    859a:	789a      	ldrb	r2, [r3, #2]
    859c:	78db      	ldrb	r3, [r3, #3]
    859e:	021b      	lsls	r3, r3, #8
    85a0:	4313      	orrs	r3, r2
    85a2:	b29b      	uxth	r3, r3
    85a4:	2b00      	cmp	r3, #0
    85a6:	d001      	beq.n	85ac <usbdc_ctrl_status_end+0x44>
    85a8:	2204      	movs	r2, #4
    85aa:	e000      	b.n	85ae <usbdc_ctrl_status_end+0x46>
    85ac:	2203      	movs	r2, #3
    85ae:	4b15      	ldr	r3, [pc, #84]	; (8604 <usbdc_ctrl_status_end+0x9c>)
    85b0:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    85b2:	4b14      	ldr	r3, [pc, #80]	; (8604 <usbdc_ctrl_status_end+0x9c>)
    85b4:	7e9b      	ldrb	r3, [r3, #26]
    85b6:	0019      	movs	r1, r3
    85b8:	2001      	movs	r0, #1
    85ba:	4b13      	ldr	r3, [pc, #76]	; (8608 <usbdc_ctrl_status_end+0xa0>)
    85bc:	4798      	blx	r3
		break;
    85be:	e01e      	b.n	85fe <usbdc_ctrl_status_end+0x96>
		usbdc_set_address(req->wValue);
    85c0:	687b      	ldr	r3, [r7, #4]
    85c2:	789a      	ldrb	r2, [r3, #2]
    85c4:	78db      	ldrb	r3, [r3, #3]
    85c6:	021b      	lsls	r3, r3, #8
    85c8:	4313      	orrs	r3, r2
    85ca:	b29b      	uxth	r3, r3
    85cc:	b2db      	uxtb	r3, r3
    85ce:	0018      	movs	r0, r3
    85d0:	4b0e      	ldr	r3, [pc, #56]	; (860c <usbdc_ctrl_status_end+0xa4>)
    85d2:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    85d4:	687b      	ldr	r3, [r7, #4]
    85d6:	789a      	ldrb	r2, [r3, #2]
    85d8:	78db      	ldrb	r3, [r3, #3]
    85da:	021b      	lsls	r3, r3, #8
    85dc:	4313      	orrs	r3, r2
    85de:	b29b      	uxth	r3, r3
    85e0:	2b00      	cmp	r3, #0
    85e2:	d001      	beq.n	85e8 <usbdc_ctrl_status_end+0x80>
    85e4:	2203      	movs	r2, #3
    85e6:	e000      	b.n	85ea <usbdc_ctrl_status_end+0x82>
    85e8:	2202      	movs	r2, #2
    85ea:	4b06      	ldr	r3, [pc, #24]	; (8604 <usbdc_ctrl_status_end+0x9c>)
    85ec:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    85ee:	4b05      	ldr	r3, [pc, #20]	; (8604 <usbdc_ctrl_status_end+0x9c>)
    85f0:	7e9b      	ldrb	r3, [r3, #26]
    85f2:	0019      	movs	r1, r3
    85f4:	2001      	movs	r0, #1
    85f6:	4b04      	ldr	r3, [pc, #16]	; (8608 <usbdc_ctrl_status_end+0xa0>)
    85f8:	4798      	blx	r3
		break;
    85fa:	e000      	b.n	85fe <usbdc_ctrl_status_end+0x96>
		return;
    85fc:	46c0      	nop			; (mov r8, r8)
	}
}
    85fe:	46bd      	mov	sp, r7
    8600:	b002      	add	sp, #8
    8602:	bd80      	pop	{r7, pc}
    8604:	2000108c 	.word	0x2000108c
    8608:	00008425 	.word	0x00008425
    860c:	00008179 	.word	0x00008179

00008610 <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    8610:	b580      	push	{r7, lr}
    8612:	b082      	sub	sp, #8
    8614:	af00      	add	r7, sp, #0
    8616:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    8618:	687b      	ldr	r3, [r7, #4]
    861a:	2201      	movs	r2, #1
    861c:	0019      	movs	r1, r3
    861e:	2000      	movs	r0, #0
    8620:	4b03      	ldr	r3, [pc, #12]	; (8630 <usbdc_ctrl_data_end+0x20>)
    8622:	4798      	blx	r3
	return false;
    8624:	2300      	movs	r3, #0
}
    8626:	0018      	movs	r0, r3
    8628:	46bd      	mov	sp, r7
    862a:	b002      	add	sp, #8
    862c:	bd80      	pop	{r7, pc}
    862e:	46c0      	nop			; (mov r8, r8)
    8630:	00008469 	.word	0x00008469

00008634 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    8634:	b580      	push	{r7, lr}
    8636:	b082      	sub	sp, #8
    8638:	af00      	add	r7, sp, #0
    863a:	603a      	str	r2, [r7, #0]
    863c:	1dfb      	adds	r3, r7, #7
    863e:	1c02      	adds	r2, r0, #0
    8640:	701a      	strb	r2, [r3, #0]
    8642:	1dbb      	adds	r3, r7, #6
    8644:	1c0a      	adds	r2, r1, #0
    8646:	701a      	strb	r2, [r3, #0]
	(void)ep;

	switch (code) {
    8648:	1dbb      	adds	r3, r7, #6
    864a:	781b      	ldrb	r3, [r3, #0]
    864c:	2b00      	cmp	r3, #0
    864e:	d002      	beq.n	8656 <usbdc_cb_ctl_done+0x22>
    8650:	2b01      	cmp	r3, #1
    8652:	d005      	beq.n	8660 <usbdc_cb_ctl_done+0x2c>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    8654:	e00a      	b.n	866c <usbdc_cb_ctl_done+0x38>
		usbdc_ctrl_status_end(req);
    8656:	683b      	ldr	r3, [r7, #0]
    8658:	0018      	movs	r0, r3
    865a:	4b07      	ldr	r3, [pc, #28]	; (8678 <usbdc_cb_ctl_done+0x44>)
    865c:	4798      	blx	r3
		break;
    865e:	e005      	b.n	866c <usbdc_cb_ctl_done+0x38>
		return usbdc_ctrl_data_end(req);
    8660:	683b      	ldr	r3, [r7, #0]
    8662:	0018      	movs	r0, r3
    8664:	4b05      	ldr	r3, [pc, #20]	; (867c <usbdc_cb_ctl_done+0x48>)
    8666:	4798      	blx	r3
    8668:	0003      	movs	r3, r0
    866a:	e000      	b.n	866e <usbdc_cb_ctl_done+0x3a>
	}
	return false;
    866c:	2300      	movs	r3, #0
}
    866e:	0018      	movs	r0, r3
    8670:	46bd      	mov	sp, r7
    8672:	b002      	add	sp, #8
    8674:	bd80      	pop	{r7, pc}
    8676:	46c0      	nop			; (mov r8, r8)
    8678:	00008569 	.word	0x00008569
    867c:	00008611 	.word	0x00008611

00008680 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    8680:	b580      	push	{r7, lr}
    8682:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    8684:	4b12      	ldr	r3, [pc, #72]	; (86d0 <usbdc_reset+0x50>)
    8686:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    8688:	4b12      	ldr	r3, [pc, #72]	; (86d4 <usbdc_reset+0x54>)
    868a:	2202      	movs	r2, #2
    868c:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    868e:	4b11      	ldr	r3, [pc, #68]	; (86d4 <usbdc_reset+0x54>)
    8690:	2200      	movs	r2, #0
    8692:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    8694:	4b0f      	ldr	r3, [pc, #60]	; (86d4 <usbdc_reset+0x54>)
    8696:	2200      	movs	r2, #0
    8698:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    869a:	2000      	movs	r0, #0
    869c:	4b0e      	ldr	r3, [pc, #56]	; (86d8 <usbdc_reset+0x58>)
    869e:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    86a0:	4b0c      	ldr	r3, [pc, #48]	; (86d4 <usbdc_reset+0x54>)
    86a2:	7f1b      	ldrb	r3, [r3, #28]
    86a4:	0018      	movs	r0, r3
    86a6:	4b0d      	ldr	r3, [pc, #52]	; (86dc <usbdc_reset+0x5c>)
    86a8:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    86aa:	4b0d      	ldr	r3, [pc, #52]	; (86e0 <usbdc_reset+0x60>)
    86ac:	001a      	movs	r2, r3
    86ae:	2100      	movs	r1, #0
    86b0:	2000      	movs	r0, #0
    86b2:	4b0c      	ldr	r3, [pc, #48]	; (86e4 <usbdc_reset+0x64>)
    86b4:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    86b6:	4b0c      	ldr	r3, [pc, #48]	; (86e8 <usbdc_reset+0x68>)
    86b8:	001a      	movs	r2, r3
    86ba:	2102      	movs	r1, #2
    86bc:	2000      	movs	r0, #0
    86be:	4b09      	ldr	r3, [pc, #36]	; (86e4 <usbdc_reset+0x64>)
    86c0:	4798      	blx	r3
	usb_d_ep_enable(0);
    86c2:	2000      	movs	r0, #0
    86c4:	4b09      	ldr	r3, [pc, #36]	; (86ec <usbdc_reset+0x6c>)
    86c6:	4798      	blx	r3
}
    86c8:	46c0      	nop			; (mov r8, r8)
    86ca:	46bd      	mov	sp, r7
    86cc:	bd80      	pop	{r7, pc}
    86ce:	46c0      	nop			; (mov r8, r8)
    86d0:	00008011 	.word	0x00008011
    86d4:	2000108c 	.word	0x2000108c
    86d8:	0000243d 	.word	0x0000243d
    86dc:	00002345 	.word	0x00002345
    86e0:	000084e9 	.word	0x000084e9
    86e4:	000027b5 	.word	0x000027b5
    86e8:	00008635 	.word	0x00008635
    86ec:	0000249d 	.word	0x0000249d

000086f0 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    86f0:	b580      	push	{r7, lr}
    86f2:	b082      	sub	sp, #8
    86f4:	af00      	add	r7, sp, #0
    86f6:	0002      	movs	r2, r0
    86f8:	6039      	str	r1, [r7, #0]
    86fa:	1dfb      	adds	r3, r7, #7
    86fc:	701a      	strb	r2, [r3, #0]
	(void)param;

	switch (ev) {
    86fe:	1dfb      	adds	r3, r7, #7
    8700:	781b      	ldrb	r3, [r3, #0]
    8702:	2b00      	cmp	r3, #0
    8704:	d002      	beq.n	870c <usbd_event_cb+0x1c>
    8706:	2b01      	cmp	r3, #1
    8708:	d006      	beq.n	8718 <usbd_event_cb+0x28>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    870a:	e008      	b.n	871e <usbd_event_cb+0x2e>
		usbdc_change_notify(USBDC_C_CONN, param);
    870c:	683b      	ldr	r3, [r7, #0]
    870e:	0019      	movs	r1, r3
    8710:	2000      	movs	r0, #0
    8712:	4b05      	ldr	r3, [pc, #20]	; (8728 <usbd_event_cb+0x38>)
    8714:	4798      	blx	r3
		break;
    8716:	e002      	b.n	871e <usbd_event_cb+0x2e>
		usbdc_reset();
    8718:	4b04      	ldr	r3, [pc, #16]	; (872c <usbd_event_cb+0x3c>)
    871a:	4798      	blx	r3
		break;
    871c:	46c0      	nop			; (mov r8, r8)
	}
}
    871e:	46c0      	nop			; (mov r8, r8)
    8720:	46bd      	mov	sp, r7
    8722:	b002      	add	sp, #8
    8724:	bd80      	pop	{r7, pc}
    8726:	46c0      	nop			; (mov r8, r8)
    8728:	00008425 	.word	0x00008425
    872c:	00008681 	.word	0x00008681

00008730 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    8730:	b580      	push	{r7, lr}
    8732:	b088      	sub	sp, #32
    8734:	af00      	add	r7, sp, #0
    8736:	60b9      	str	r1, [r7, #8]
    8738:	607a      	str	r2, [r7, #4]
    873a:	0019      	movs	r1, r3
    873c:	230f      	movs	r3, #15
    873e:	18fb      	adds	r3, r7, r3
    8740:	1c02      	adds	r2, r0, #0
    8742:	701a      	strb	r2, [r3, #0]
    8744:	230e      	movs	r3, #14
    8746:	18fb      	adds	r3, r7, r3
    8748:	1c0a      	adds	r2, r1, #0
    874a:	701a      	strb	r2, [r3, #0]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    874c:	2314      	movs	r3, #20
    874e:	18fb      	adds	r3, r7, r3
    8750:	68ba      	ldr	r2, [r7, #8]
    8752:	601a      	str	r2, [r3, #0]
    8754:	2314      	movs	r3, #20
    8756:	18fb      	adds	r3, r7, r3
    8758:	687a      	ldr	r2, [r7, #4]
    875a:	605a      	str	r2, [r3, #4]
    875c:	2314      	movs	r3, #20
    875e:	18fb      	adds	r3, r7, r3
    8760:	220f      	movs	r2, #15
    8762:	18ba      	adds	r2, r7, r2
    8764:	7812      	ldrb	r2, [r2, #0]
    8766:	721a      	strb	r2, [r3, #8]
    8768:	230e      	movs	r3, #14
    876a:	18fb      	adds	r3, r7, r3
    876c:	781a      	ldrb	r2, [r3, #0]
    876e:	2314      	movs	r3, #20
    8770:	18fb      	adds	r3, r7, r3
    8772:	725a      	strb	r2, [r3, #9]
	return usb_d_ep_transfer(&xfer);
    8774:	2314      	movs	r3, #20
    8776:	18fb      	adds	r3, r7, r3
    8778:	0018      	movs	r0, r3
    877a:	4b03      	ldr	r3, [pc, #12]	; (8788 <usbdc_xfer+0x58>)
    877c:	4798      	blx	r3
    877e:	0003      	movs	r3, r0
}
    8780:	0018      	movs	r0, r3
    8782:	46bd      	mov	sp, r7
    8784:	b008      	add	sp, #32
    8786:	bd80      	pop	{r7, pc}
    8788:	0000251d 	.word	0x0000251d

0000878c <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    878c:	b580      	push	{r7, lr}
    878e:	b082      	sub	sp, #8
    8790:	af00      	add	r7, sp, #0
    8792:	0002      	movs	r2, r0
    8794:	6039      	str	r1, [r7, #0]
    8796:	1dfb      	adds	r3, r7, #7
    8798:	701a      	strb	r2, [r3, #0]
	switch (type) {
    879a:	1dfb      	adds	r3, r7, #7
    879c:	781b      	ldrb	r3, [r3, #0]
    879e:	2b01      	cmp	r3, #1
    87a0:	d00b      	beq.n	87ba <usbdc_register_handler+0x2e>
    87a2:	2b02      	cmp	r3, #2
    87a4:	d010      	beq.n	87c8 <usbdc_register_handler+0x3c>
    87a6:	2b00      	cmp	r3, #0
    87a8:	d000      	beq.n	87ac <usbdc_register_handler+0x20>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
    87aa:	e014      	b.n	87d6 <usbdc_register_handler+0x4a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    87ac:	683a      	ldr	r2, [r7, #0]
    87ae:	4b0c      	ldr	r3, [pc, #48]	; (87e0 <usbdc_register_handler+0x54>)
    87b0:	0011      	movs	r1, r2
    87b2:	0018      	movs	r0, r3
    87b4:	4b0b      	ldr	r3, [pc, #44]	; (87e4 <usbdc_register_handler+0x58>)
    87b6:	4798      	blx	r3
		break;
    87b8:	e00d      	b.n	87d6 <usbdc_register_handler+0x4a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    87ba:	683a      	ldr	r2, [r7, #0]
    87bc:	4b0a      	ldr	r3, [pc, #40]	; (87e8 <usbdc_register_handler+0x5c>)
    87be:	0011      	movs	r1, r2
    87c0:	0018      	movs	r0, r3
    87c2:	4b08      	ldr	r3, [pc, #32]	; (87e4 <usbdc_register_handler+0x58>)
    87c4:	4798      	blx	r3
		break;
    87c6:	e006      	b.n	87d6 <usbdc_register_handler+0x4a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    87c8:	683a      	ldr	r2, [r7, #0]
    87ca:	4b08      	ldr	r3, [pc, #32]	; (87ec <usbdc_register_handler+0x60>)
    87cc:	0011      	movs	r1, r2
    87ce:	0018      	movs	r0, r3
    87d0:	4b04      	ldr	r3, [pc, #16]	; (87e4 <usbdc_register_handler+0x58>)
    87d2:	4798      	blx	r3
		break;
    87d4:	46c0      	nop			; (mov r8, r8)
	}
}
    87d6:	46c0      	nop			; (mov r8, r8)
    87d8:	46bd      	mov	sp, r7
    87da:	b002      	add	sp, #8
    87dc:	bd80      	pop	{r7, pc}
    87de:	46c0      	nop			; (mov r8, r8)
    87e0:	20001090 	.word	0x20001090
    87e4:	00008c01 	.word	0x00008c01
    87e8:	20001094 	.word	0x20001094
    87ec:	20001098 	.word	0x20001098

000087f0 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    87f0:	b580      	push	{r7, lr}
    87f2:	b084      	sub	sp, #16
    87f4:	af00      	add	r7, sp, #0
    87f6:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
    87f8:	687b      	ldr	r3, [r7, #4]
    87fa:	1e5a      	subs	r2, r3, #1
    87fc:	4193      	sbcs	r3, r2
    87fe:	b2db      	uxtb	r3, r3
    8800:	4a12      	ldr	r2, [pc, #72]	; (884c <usbdc_init+0x5c>)
    8802:	4913      	ldr	r1, [pc, #76]	; (8850 <usbdc_init+0x60>)
    8804:	0018      	movs	r0, r3
    8806:	4b13      	ldr	r3, [pc, #76]	; (8854 <usbdc_init+0x64>)
    8808:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    880a:	4b13      	ldr	r3, [pc, #76]	; (8858 <usbdc_init+0x68>)
    880c:	4798      	blx	r3
    880e:	0003      	movs	r3, r0
    8810:	60fb      	str	r3, [r7, #12]
	if (rc < 0) {
    8812:	68fb      	ldr	r3, [r7, #12]
    8814:	2b00      	cmp	r3, #0
    8816:	da01      	bge.n	881c <usbdc_init+0x2c>
		return rc;
    8818:	68fb      	ldr	r3, [r7, #12]
    881a:	e013      	b.n	8844 <usbdc_init+0x54>
	}

	memset(&usbdc, 0, sizeof(usbdc));
    881c:	4b0f      	ldr	r3, [pc, #60]	; (885c <usbdc_init+0x6c>)
    881e:	2220      	movs	r2, #32
    8820:	2100      	movs	r1, #0
    8822:	0018      	movs	r0, r3
    8824:	4b0e      	ldr	r3, [pc, #56]	; (8860 <usbdc_init+0x70>)
    8826:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    8828:	4b0c      	ldr	r3, [pc, #48]	; (885c <usbdc_init+0x6c>)
    882a:	687a      	ldr	r2, [r7, #4]
    882c:	615a      	str	r2, [r3, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    882e:	4b0d      	ldr	r3, [pc, #52]	; (8864 <usbdc_init+0x74>)
    8830:	0019      	movs	r1, r3
    8832:	2000      	movs	r0, #0
    8834:	4b0c      	ldr	r3, [pc, #48]	; (8868 <usbdc_init+0x78>)
    8836:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    8838:	4b0c      	ldr	r3, [pc, #48]	; (886c <usbdc_init+0x7c>)
    883a:	0019      	movs	r1, r3
    883c:	2001      	movs	r0, #1
    883e:	4b0a      	ldr	r3, [pc, #40]	; (8868 <usbdc_init+0x78>)
    8840:	4798      	blx	r3

	return 0;
    8842:	2300      	movs	r3, #0
}
    8844:	0018      	movs	r0, r3
    8846:	46bd      	mov	sp, r7
    8848:	b004      	add	sp, #16
    884a:	bd80      	pop	{r7, pc}
    884c:	00000355 	.word	0x00000355
    8850:	0000fdc0 	.word	0x0000fdc0
    8854:	00002841 	.word	0x00002841
    8858:	00002209 	.word	0x00002209
    885c:	2000108c 	.word	0x2000108c
    8860:	0000a605 	.word	0x0000a605
    8864:	000084d5 	.word	0x000084d5
    8868:	000022d1 	.word	0x000022d1
    886c:	000086f1 	.word	0x000086f1

00008870 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    8870:	b580      	push	{r7, lr}
    8872:	b082      	sub	sp, #8
    8874:	af00      	add	r7, sp, #0
    8876:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
    8878:	687a      	ldr	r2, [r7, #4]
    887a:	4b04      	ldr	r3, [pc, #16]	; (888c <usbdc_register_function+0x1c>)
    887c:	0011      	movs	r1, r2
    887e:	0018      	movs	r0, r3
    8880:	4b03      	ldr	r3, [pc, #12]	; (8890 <usbdc_register_function+0x20>)
    8882:	4798      	blx	r3
}
    8884:	46c0      	nop			; (mov r8, r8)
    8886:	46bd      	mov	sp, r7
    8888:	b002      	add	sp, #8
    888a:	bd80      	pop	{r7, pc}
    888c:	2000109c 	.word	0x2000109c
    8890:	00008c01 	.word	0x00008c01

00008894 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    8894:	b580      	push	{r7, lr}
    8896:	b082      	sub	sp, #8
    8898:	af00      	add	r7, sp, #0
    889a:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
    889c:	4b0f      	ldr	r3, [pc, #60]	; (88dc <usbdc_start+0x48>)
    889e:	7e9b      	ldrb	r3, [r3, #26]
    88a0:	2b00      	cmp	r3, #0
    88a2:	d002      	beq.n	88aa <usbdc_start+0x16>
		return ERR_BUSY;
    88a4:	2304      	movs	r3, #4
    88a6:	425b      	negs	r3, r3
    88a8:	e013      	b.n	88d2 <usbdc_start+0x3e>
	}

	if (desces) {
    88aa:	687b      	ldr	r3, [r7, #4]
    88ac:	2b00      	cmp	r3, #0
    88ae:	d00e      	beq.n	88ce <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
    88b0:	4b0a      	ldr	r3, [pc, #40]	; (88dc <usbdc_start+0x48>)
    88b2:	687a      	ldr	r2, [r7, #4]
    88b4:	601a      	str	r2, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    88b6:	687b      	ldr	r3, [r7, #4]
    88b8:	681b      	ldr	r3, [r3, #0]
    88ba:	79da      	ldrb	r2, [r3, #7]
    88bc:	4b07      	ldr	r3, [pc, #28]	; (88dc <usbdc_start+0x48>)
    88be:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    88c0:	4b06      	ldr	r3, [pc, #24]	; (88dc <usbdc_start+0x48>)
    88c2:	2201      	movs	r2, #1
    88c4:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    88c6:	4b06      	ldr	r3, [pc, #24]	; (88e0 <usbdc_start+0x4c>)
    88c8:	4798      	blx	r3
	return ERR_NONE;
    88ca:	2300      	movs	r3, #0
    88cc:	e001      	b.n	88d2 <usbdc_start+0x3e>
		return ERR_BAD_DATA;
    88ce:	2309      	movs	r3, #9
    88d0:	425b      	negs	r3, r3
}
    88d2:	0018      	movs	r0, r3
    88d4:	46bd      	mov	sp, r7
    88d6:	b002      	add	sp, #8
    88d8:	bd80      	pop	{r7, pc}
    88da:	46c0      	nop			; (mov r8, r8)
    88dc:	2000108c 	.word	0x2000108c
    88e0:	000022f9 	.word	0x000022f9

000088e4 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    88e4:	b580      	push	{r7, lr}
    88e6:	af00      	add	r7, sp, #0
	usb_d_attach();
    88e8:	4b02      	ldr	r3, [pc, #8]	; (88f4 <usbdc_attach+0x10>)
    88ea:	4798      	blx	r3
}
    88ec:	46c0      	nop			; (mov r8, r8)
    88ee:	46bd      	mov	sp, r7
    88f0:	bd80      	pop	{r7, pc}
    88f2:	46c0      	nop			; (mov r8, r8)
    88f4:	0000230d 	.word	0x0000230d

000088f8 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
    88f8:	b580      	push	{r7, lr}
    88fa:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
    88fc:	4b02      	ldr	r3, [pc, #8]	; (8908 <usbdc_get_ctrl_buffer+0x10>)
    88fe:	695b      	ldr	r3, [r3, #20]
}
    8900:	0018      	movs	r0, r3
    8902:	46bd      	mov	sp, r7
    8904:	bd80      	pop	{r7, pc}
    8906:	46c0      	nop			; (mov r8, r8)
    8908:	2000108c 	.word	0x2000108c

0000890c <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
    890c:	b580      	push	{r7, lr}
    890e:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
    8910:	4b06      	ldr	r3, [pc, #24]	; (892c <usbdc_get_state+0x20>)
    8912:	7e9b      	ldrb	r3, [r3, #26]
    8914:	001a      	movs	r2, r3
    8916:	2310      	movs	r3, #16
    8918:	4013      	ands	r3, r2
    891a:	d001      	beq.n	8920 <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
    891c:	2310      	movs	r3, #16
    891e:	e001      	b.n	8924 <usbdc_get_state+0x18>
	}
	return usbdc.state;
    8920:	4b02      	ldr	r3, [pc, #8]	; (892c <usbdc_get_state+0x20>)
    8922:	7e9b      	ldrb	r3, [r3, #26]
}
    8924:	0018      	movs	r0, r3
    8926:	46bd      	mov	sp, r7
    8928:	bd80      	pop	{r7, pc}
    892a:	46c0      	nop			; (mov r8, r8)
    892c:	2000108c 	.word	0x2000108c

00008930 <usb_get_u16>:
{
    8930:	b580      	push	{r7, lr}
    8932:	b082      	sub	sp, #8
    8934:	af00      	add	r7, sp, #0
    8936:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    8938:	687b      	ldr	r3, [r7, #4]
    893a:	781b      	ldrb	r3, [r3, #0]
    893c:	b29a      	uxth	r2, r3
    893e:	687b      	ldr	r3, [r7, #4]
    8940:	3301      	adds	r3, #1
    8942:	781b      	ldrb	r3, [r3, #0]
    8944:	b29b      	uxth	r3, r3
    8946:	021b      	lsls	r3, r3, #8
    8948:	b29b      	uxth	r3, r3
    894a:	18d3      	adds	r3, r2, r3
    894c:	b29b      	uxth	r3, r3
}
    894e:	0018      	movs	r0, r3
    8950:	46bd      	mov	sp, r7
    8952:	b002      	add	sp, #8
    8954:	bd80      	pop	{r7, pc}

00008956 <usb_desc_len>:
{
    8956:	b580      	push	{r7, lr}
    8958:	b082      	sub	sp, #8
    895a:	af00      	add	r7, sp, #0
    895c:	6078      	str	r0, [r7, #4]
	return desc[0];
    895e:	687b      	ldr	r3, [r7, #4]
    8960:	781b      	ldrb	r3, [r3, #0]
}
    8962:	0018      	movs	r0, r3
    8964:	46bd      	mov	sp, r7
    8966:	b002      	add	sp, #8
    8968:	bd80      	pop	{r7, pc}

0000896a <usb_desc_type>:
{
    896a:	b580      	push	{r7, lr}
    896c:	b082      	sub	sp, #8
    896e:	af00      	add	r7, sp, #0
    8970:	6078      	str	r0, [r7, #4]
	return desc[1];
    8972:	687b      	ldr	r3, [r7, #4]
    8974:	3301      	adds	r3, #1
    8976:	781b      	ldrb	r3, [r3, #0]
}
    8978:	0018      	movs	r0, r3
    897a:	46bd      	mov	sp, r7
    897c:	b002      	add	sp, #8
    897e:	bd80      	pop	{r7, pc}

00008980 <usb_desc_next>:
{
    8980:	b580      	push	{r7, lr}
    8982:	b082      	sub	sp, #8
    8984:	af00      	add	r7, sp, #0
    8986:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    8988:	687b      	ldr	r3, [r7, #4]
    898a:	0018      	movs	r0, r3
    898c:	4b04      	ldr	r3, [pc, #16]	; (89a0 <usb_desc_next+0x20>)
    898e:	4798      	blx	r3
    8990:	0003      	movs	r3, r0
    8992:	001a      	movs	r2, r3
    8994:	687b      	ldr	r3, [r7, #4]
    8996:	189b      	adds	r3, r3, r2
}
    8998:	0018      	movs	r0, r3
    899a:	46bd      	mov	sp, r7
    899c:	b002      	add	sp, #8
    899e:	bd80      	pop	{r7, pc}
    89a0:	00008957 	.word	0x00008957

000089a4 <usb_cfg_desc_total_len>:
{
    89a4:	b580      	push	{r7, lr}
    89a6:	b082      	sub	sp, #8
    89a8:	af00      	add	r7, sp, #0
    89aa:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    89ac:	687b      	ldr	r3, [r7, #4]
    89ae:	3302      	adds	r3, #2
    89b0:	0018      	movs	r0, r3
    89b2:	4b03      	ldr	r3, [pc, #12]	; (89c0 <usb_cfg_desc_total_len+0x1c>)
    89b4:	4798      	blx	r3
    89b6:	0003      	movs	r3, r0
}
    89b8:	0018      	movs	r0, r3
    89ba:	46bd      	mov	sp, r7
    89bc:	b002      	add	sp, #8
    89be:	bd80      	pop	{r7, pc}
    89c0:	00008931 	.word	0x00008931

000089c4 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
    89c4:	b580      	push	{r7, lr}
    89c6:	b082      	sub	sp, #8
    89c8:	af00      	add	r7, sp, #0
    89ca:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    89cc:	687b      	ldr	r3, [r7, #4]
    89ce:	0018      	movs	r0, r3
    89d0:	4b04      	ldr	r3, [pc, #16]	; (89e4 <usb_cfg_desc_next+0x20>)
    89d2:	4798      	blx	r3
    89d4:	0003      	movs	r3, r0
    89d6:	001a      	movs	r2, r3
    89d8:	687b      	ldr	r3, [r7, #4]
    89da:	189b      	adds	r3, r3, r2
}
    89dc:	0018      	movs	r0, r3
    89de:	46bd      	mov	sp, r7
    89e0:	b002      	add	sp, #8
    89e2:	bd80      	pop	{r7, pc}
    89e4:	000089a5 	.word	0x000089a5

000089e8 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    89e8:	b580      	push	{r7, lr}
    89ea:	b084      	sub	sp, #16
    89ec:	af00      	add	r7, sp, #0
    89ee:	60f8      	str	r0, [r7, #12]
    89f0:	60b9      	str	r1, [r7, #8]
    89f2:	1dfb      	adds	r3, r7, #7
    89f4:	701a      	strb	r2, [r3, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    89f6:	e01a      	b.n	8a2e <usb_find_desc+0x46>
		_desc_len_check();
    89f8:	68fb      	ldr	r3, [r7, #12]
    89fa:	0018      	movs	r0, r3
    89fc:	4b10      	ldr	r3, [pc, #64]	; (8a40 <usb_find_desc+0x58>)
    89fe:	4798      	blx	r3
    8a00:	0003      	movs	r3, r0
    8a02:	2b01      	cmp	r3, #1
    8a04:	d801      	bhi.n	8a0a <usb_find_desc+0x22>
    8a06:	2300      	movs	r3, #0
    8a08:	e016      	b.n	8a38 <usb_find_desc+0x50>
		if (type == usb_desc_type(desc)) {
    8a0a:	68fb      	ldr	r3, [r7, #12]
    8a0c:	0018      	movs	r0, r3
    8a0e:	4b0d      	ldr	r3, [pc, #52]	; (8a44 <usb_find_desc+0x5c>)
    8a10:	4798      	blx	r3
    8a12:	0003      	movs	r3, r0
    8a14:	001a      	movs	r2, r3
    8a16:	1dfb      	adds	r3, r7, #7
    8a18:	781b      	ldrb	r3, [r3, #0]
    8a1a:	4293      	cmp	r3, r2
    8a1c:	d101      	bne.n	8a22 <usb_find_desc+0x3a>
			return desc;
    8a1e:	68fb      	ldr	r3, [r7, #12]
    8a20:	e00a      	b.n	8a38 <usb_find_desc+0x50>
		}
		desc = usb_desc_next(desc);
    8a22:	68fb      	ldr	r3, [r7, #12]
    8a24:	0018      	movs	r0, r3
    8a26:	4b08      	ldr	r3, [pc, #32]	; (8a48 <usb_find_desc+0x60>)
    8a28:	4798      	blx	r3
    8a2a:	0003      	movs	r3, r0
    8a2c:	60fb      	str	r3, [r7, #12]
	while (desc < eof) {
    8a2e:	68fa      	ldr	r2, [r7, #12]
    8a30:	68bb      	ldr	r3, [r7, #8]
    8a32:	429a      	cmp	r2, r3
    8a34:	d3e0      	bcc.n	89f8 <usb_find_desc+0x10>
	}
	return NULL;
    8a36:	2300      	movs	r3, #0
}
    8a38:	0018      	movs	r0, r3
    8a3a:	46bd      	mov	sp, r7
    8a3c:	b004      	add	sp, #16
    8a3e:	bd80      	pop	{r7, pc}
    8a40:	00008957 	.word	0x00008957
    8a44:	0000896b 	.word	0x0000896b
    8a48:	00008981 	.word	0x00008981

00008a4c <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
    8a4c:	b580      	push	{r7, lr}
    8a4e:	b082      	sub	sp, #8
    8a50:	af00      	add	r7, sp, #0
    8a52:	6078      	str	r0, [r7, #4]
    8a54:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    8a56:	e01e      	b.n	8a96 <usb_find_ep_desc+0x4a>
		_desc_len_check();
    8a58:	687b      	ldr	r3, [r7, #4]
    8a5a:	0018      	movs	r0, r3
    8a5c:	4b13      	ldr	r3, [pc, #76]	; (8aac <usb_find_ep_desc+0x60>)
    8a5e:	4798      	blx	r3
    8a60:	0003      	movs	r3, r0
    8a62:	2b01      	cmp	r3, #1
    8a64:	d801      	bhi.n	8a6a <usb_find_ep_desc+0x1e>
    8a66:	2300      	movs	r3, #0
    8a68:	e01c      	b.n	8aa4 <usb_find_ep_desc+0x58>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    8a6a:	687b      	ldr	r3, [r7, #4]
    8a6c:	0018      	movs	r0, r3
    8a6e:	4b10      	ldr	r3, [pc, #64]	; (8ab0 <usb_find_ep_desc+0x64>)
    8a70:	4798      	blx	r3
    8a72:	0003      	movs	r3, r0
    8a74:	2b04      	cmp	r3, #4
    8a76:	d013      	beq.n	8aa0 <usb_find_ep_desc+0x54>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    8a78:	687b      	ldr	r3, [r7, #4]
    8a7a:	0018      	movs	r0, r3
    8a7c:	4b0c      	ldr	r3, [pc, #48]	; (8ab0 <usb_find_ep_desc+0x64>)
    8a7e:	4798      	blx	r3
    8a80:	0003      	movs	r3, r0
    8a82:	2b05      	cmp	r3, #5
    8a84:	d101      	bne.n	8a8a <usb_find_ep_desc+0x3e>
			return desc;
    8a86:	687b      	ldr	r3, [r7, #4]
    8a88:	e00c      	b.n	8aa4 <usb_find_ep_desc+0x58>
		}
		desc = usb_desc_next(desc);
    8a8a:	687b      	ldr	r3, [r7, #4]
    8a8c:	0018      	movs	r0, r3
    8a8e:	4b09      	ldr	r3, [pc, #36]	; (8ab4 <usb_find_ep_desc+0x68>)
    8a90:	4798      	blx	r3
    8a92:	0003      	movs	r3, r0
    8a94:	607b      	str	r3, [r7, #4]
	while (desc < eof) {
    8a96:	687a      	ldr	r2, [r7, #4]
    8a98:	683b      	ldr	r3, [r7, #0]
    8a9a:	429a      	cmp	r2, r3
    8a9c:	d3dc      	bcc.n	8a58 <usb_find_ep_desc+0xc>
    8a9e:	e000      	b.n	8aa2 <usb_find_ep_desc+0x56>
			break;
    8aa0:	46c0      	nop			; (mov r8, r8)
	}
	return NULL;
    8aa2:	2300      	movs	r3, #0
}
    8aa4:	0018      	movs	r0, r3
    8aa6:	46bd      	mov	sp, r7
    8aa8:	b002      	add	sp, #8
    8aaa:	bd80      	pop	{r7, pc}
    8aac:	00008957 	.word	0x00008957
    8ab0:	0000896b 	.word	0x0000896b
    8ab4:	00008981 	.word	0x00008981

00008ab8 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    8ab8:	b580      	push	{r7, lr}
    8aba:	b084      	sub	sp, #16
    8abc:	af00      	add	r7, sp, #0
    8abe:	60f8      	str	r0, [r7, #12]
    8ac0:	60b9      	str	r1, [r7, #8]
    8ac2:	1dfb      	adds	r3, r7, #7
    8ac4:	701a      	strb	r2, [r3, #0]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    8ac6:	68b9      	ldr	r1, [r7, #8]
    8ac8:	68fb      	ldr	r3, [r7, #12]
    8aca:	2202      	movs	r2, #2
    8acc:	0018      	movs	r0, r3
    8ace:	4b18      	ldr	r3, [pc, #96]	; (8b30 <usb_find_cfg_desc+0x78>)
    8ad0:	4798      	blx	r3
    8ad2:	0003      	movs	r3, r0
    8ad4:	60fb      	str	r3, [r7, #12]
	if (!desc) {
    8ad6:	68fb      	ldr	r3, [r7, #12]
    8ad8:	2b00      	cmp	r3, #0
    8ada:	d11e      	bne.n	8b1a <usb_find_cfg_desc+0x62>
		return NULL;
    8adc:	2300      	movs	r3, #0
    8ade:	e023      	b.n	8b28 <usb_find_cfg_desc+0x70>
	}
	while (desc < eof) {
		_desc_len_check();
    8ae0:	68fb      	ldr	r3, [r7, #12]
    8ae2:	0018      	movs	r0, r3
    8ae4:	4b13      	ldr	r3, [pc, #76]	; (8b34 <usb_find_cfg_desc+0x7c>)
    8ae6:	4798      	blx	r3
    8ae8:	0003      	movs	r3, r0
    8aea:	2b01      	cmp	r3, #1
    8aec:	d801      	bhi.n	8af2 <usb_find_cfg_desc+0x3a>
    8aee:	2300      	movs	r3, #0
    8af0:	e01a      	b.n	8b28 <usb_find_cfg_desc+0x70>
		if (desc[1] != USB_DT_CONFIG) {
    8af2:	68fb      	ldr	r3, [r7, #12]
    8af4:	3301      	adds	r3, #1
    8af6:	781b      	ldrb	r3, [r3, #0]
    8af8:	2b02      	cmp	r3, #2
    8afa:	d113      	bne.n	8b24 <usb_find_cfg_desc+0x6c>
			break;
		}
		if (desc[5] == cfg_value) {
    8afc:	68fb      	ldr	r3, [r7, #12]
    8afe:	3305      	adds	r3, #5
    8b00:	781b      	ldrb	r3, [r3, #0]
    8b02:	1dfa      	adds	r2, r7, #7
    8b04:	7812      	ldrb	r2, [r2, #0]
    8b06:	429a      	cmp	r2, r3
    8b08:	d101      	bne.n	8b0e <usb_find_cfg_desc+0x56>
			return desc;
    8b0a:	68fb      	ldr	r3, [r7, #12]
    8b0c:	e00c      	b.n	8b28 <usb_find_cfg_desc+0x70>
		}
		desc = usb_cfg_desc_next(desc);
    8b0e:	68fb      	ldr	r3, [r7, #12]
    8b10:	0018      	movs	r0, r3
    8b12:	4b09      	ldr	r3, [pc, #36]	; (8b38 <usb_find_cfg_desc+0x80>)
    8b14:	4798      	blx	r3
    8b16:	0003      	movs	r3, r0
    8b18:	60fb      	str	r3, [r7, #12]
	while (desc < eof) {
    8b1a:	68fa      	ldr	r2, [r7, #12]
    8b1c:	68bb      	ldr	r3, [r7, #8]
    8b1e:	429a      	cmp	r2, r3
    8b20:	d3de      	bcc.n	8ae0 <usb_find_cfg_desc+0x28>
    8b22:	e000      	b.n	8b26 <usb_find_cfg_desc+0x6e>
			break;
    8b24:	46c0      	nop			; (mov r8, r8)
	}
	return NULL;
    8b26:	2300      	movs	r3, #0
}
    8b28:	0018      	movs	r0, r3
    8b2a:	46bd      	mov	sp, r7
    8b2c:	b004      	add	sp, #16
    8b2e:	bd80      	pop	{r7, pc}
    8b30:	000089e9 	.word	0x000089e9
    8b34:	00008957 	.word	0x00008957
    8b38:	000089c5 	.word	0x000089c5

00008b3c <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    8b3c:	b580      	push	{r7, lr}
    8b3e:	b086      	sub	sp, #24
    8b40:	af00      	add	r7, sp, #0
    8b42:	60f8      	str	r0, [r7, #12]
    8b44:	60b9      	str	r1, [r7, #8]
    8b46:	1dfb      	adds	r3, r7, #7
    8b48:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    8b4a:	2317      	movs	r3, #23
    8b4c:	18fb      	adds	r3, r7, r3
    8b4e:	2200      	movs	r2, #0
    8b50:	701a      	strb	r2, [r3, #0]
    8b52:	e02c      	b.n	8bae <usb_find_str_desc+0x72>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    8b54:	68b9      	ldr	r1, [r7, #8]
    8b56:	68fb      	ldr	r3, [r7, #12]
    8b58:	2203      	movs	r2, #3
    8b5a:	0018      	movs	r0, r3
    8b5c:	4b18      	ldr	r3, [pc, #96]	; (8bc0 <usb_find_str_desc+0x84>)
    8b5e:	4798      	blx	r3
    8b60:	0003      	movs	r3, r0
    8b62:	60fb      	str	r3, [r7, #12]
		if (desc) {
    8b64:	68fb      	ldr	r3, [r7, #12]
    8b66:	2b00      	cmp	r3, #0
    8b68:	d01f      	beq.n	8baa <usb_find_str_desc+0x6e>
			_desc_len_check();
    8b6a:	68fb      	ldr	r3, [r7, #12]
    8b6c:	0018      	movs	r0, r3
    8b6e:	4b15      	ldr	r3, [pc, #84]	; (8bc4 <usb_find_str_desc+0x88>)
    8b70:	4798      	blx	r3
    8b72:	0003      	movs	r3, r0
    8b74:	2b01      	cmp	r3, #1
    8b76:	d801      	bhi.n	8b7c <usb_find_str_desc+0x40>
    8b78:	2300      	movs	r3, #0
    8b7a:	e01d      	b.n	8bb8 <usb_find_str_desc+0x7c>
			if (i == str_index) {
    8b7c:	2317      	movs	r3, #23
    8b7e:	18fa      	adds	r2, r7, r3
    8b80:	1dfb      	adds	r3, r7, #7
    8b82:	7812      	ldrb	r2, [r2, #0]
    8b84:	781b      	ldrb	r3, [r3, #0]
    8b86:	429a      	cmp	r2, r3
    8b88:	d101      	bne.n	8b8e <usb_find_str_desc+0x52>
				return desc;
    8b8a:	68fb      	ldr	r3, [r7, #12]
    8b8c:	e014      	b.n	8bb8 <usb_find_str_desc+0x7c>
			}
			i++;
    8b8e:	2317      	movs	r3, #23
    8b90:	18fb      	adds	r3, r7, r3
    8b92:	781a      	ldrb	r2, [r3, #0]
    8b94:	2317      	movs	r3, #23
    8b96:	18fb      	adds	r3, r7, r3
    8b98:	3201      	adds	r2, #1
    8b9a:	701a      	strb	r2, [r3, #0]
			desc = usb_desc_next(desc);
    8b9c:	68fb      	ldr	r3, [r7, #12]
    8b9e:	0018      	movs	r0, r3
    8ba0:	4b09      	ldr	r3, [pc, #36]	; (8bc8 <usb_find_str_desc+0x8c>)
    8ba2:	4798      	blx	r3
    8ba4:	0003      	movs	r3, r0
    8ba6:	60fb      	str	r3, [r7, #12]
    8ba8:	e001      	b.n	8bae <usb_find_str_desc+0x72>
		} else {
			return NULL;
    8baa:	2300      	movs	r3, #0
    8bac:	e004      	b.n	8bb8 <usb_find_str_desc+0x7c>
	for (i = 0; desc < eof;) {
    8bae:	68fa      	ldr	r2, [r7, #12]
    8bb0:	68bb      	ldr	r3, [r7, #8]
    8bb2:	429a      	cmp	r2, r3
    8bb4:	d3ce      	bcc.n	8b54 <usb_find_str_desc+0x18>
		}
	}
	return NULL;
    8bb6:	2300      	movs	r3, #0
}
    8bb8:	0018      	movs	r0, r3
    8bba:	46bd      	mov	sp, r7
    8bbc:	b006      	add	sp, #24
    8bbe:	bd80      	pop	{r7, pc}
    8bc0:	000089e9 	.word	0x000089e9
    8bc4:	00008957 	.word	0x00008957
    8bc8:	00008981 	.word	0x00008981

00008bcc <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    8bcc:	b580      	push	{r7, lr}
    8bce:	b084      	sub	sp, #16
    8bd0:	af00      	add	r7, sp, #0
    8bd2:	6078      	str	r0, [r7, #4]
    8bd4:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    8bd6:	687b      	ldr	r3, [r7, #4]
    8bd8:	681b      	ldr	r3, [r3, #0]
    8bda:	60fb      	str	r3, [r7, #12]
    8bdc:	e008      	b.n	8bf0 <is_list_element+0x24>
		if (it == element) {
    8bde:	68fa      	ldr	r2, [r7, #12]
    8be0:	683b      	ldr	r3, [r7, #0]
    8be2:	429a      	cmp	r2, r3
    8be4:	d101      	bne.n	8bea <is_list_element+0x1e>
			return true;
    8be6:	2301      	movs	r3, #1
    8be8:	e006      	b.n	8bf8 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    8bea:	68fb      	ldr	r3, [r7, #12]
    8bec:	681b      	ldr	r3, [r3, #0]
    8bee:	60fb      	str	r3, [r7, #12]
    8bf0:	68fb      	ldr	r3, [r7, #12]
    8bf2:	2b00      	cmp	r3, #0
    8bf4:	d1f3      	bne.n	8bde <is_list_element+0x12>
		}
	}

	return false;
    8bf6:	2300      	movs	r3, #0
}
    8bf8:	0018      	movs	r0, r3
    8bfa:	46bd      	mov	sp, r7
    8bfc:	b004      	add	sp, #16
    8bfe:	bd80      	pop	{r7, pc}

00008c00 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    8c00:	b580      	push	{r7, lr}
    8c02:	b084      	sub	sp, #16
    8c04:	af00      	add	r7, sp, #0
    8c06:	6078      	str	r0, [r7, #4]
    8c08:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    8c0a:	687b      	ldr	r3, [r7, #4]
    8c0c:	681b      	ldr	r3, [r3, #0]
    8c0e:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    8c10:	683a      	ldr	r2, [r7, #0]
    8c12:	687b      	ldr	r3, [r7, #4]
    8c14:	0011      	movs	r1, r2
    8c16:	0018      	movs	r0, r3
    8c18:	4b16      	ldr	r3, [pc, #88]	; (8c74 <list_insert_at_end+0x74>)
    8c1a:	4798      	blx	r3
    8c1c:	0003      	movs	r3, r0
    8c1e:	1e5a      	subs	r2, r3, #1
    8c20:	4193      	sbcs	r3, r2
    8c22:	b2db      	uxtb	r3, r3
    8c24:	2201      	movs	r2, #1
    8c26:	4053      	eors	r3, r2
    8c28:	b2db      	uxtb	r3, r3
    8c2a:	1c1a      	adds	r2, r3, #0
    8c2c:	2301      	movs	r3, #1
    8c2e:	4013      	ands	r3, r2
    8c30:	b2db      	uxtb	r3, r3
    8c32:	4911      	ldr	r1, [pc, #68]	; (8c78 <list_insert_at_end+0x78>)
    8c34:	224f      	movs	r2, #79	; 0x4f
    8c36:	0018      	movs	r0, r3
    8c38:	4b10      	ldr	r3, [pc, #64]	; (8c7c <list_insert_at_end+0x7c>)
    8c3a:	4798      	blx	r3

	if (!list->head) {
    8c3c:	687b      	ldr	r3, [r7, #4]
    8c3e:	681b      	ldr	r3, [r3, #0]
    8c40:	2b00      	cmp	r3, #0
    8c42:	d109      	bne.n	8c58 <list_insert_at_end+0x58>
		list->head                             = (struct list_element *)element;
    8c44:	687b      	ldr	r3, [r7, #4]
    8c46:	683a      	ldr	r2, [r7, #0]
    8c48:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    8c4a:	683b      	ldr	r3, [r7, #0]
    8c4c:	2200      	movs	r2, #0
    8c4e:	601a      	str	r2, [r3, #0]
		return;
    8c50:	e00c      	b.n	8c6c <list_insert_at_end+0x6c>
	}

	while (it->next) {
		it = it->next;
    8c52:	68fb      	ldr	r3, [r7, #12]
    8c54:	681b      	ldr	r3, [r3, #0]
    8c56:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    8c58:	68fb      	ldr	r3, [r7, #12]
    8c5a:	681b      	ldr	r3, [r3, #0]
    8c5c:	2b00      	cmp	r3, #0
    8c5e:	d1f8      	bne.n	8c52 <list_insert_at_end+0x52>
	}
	it->next                               = (struct list_element *)element;
    8c60:	68fb      	ldr	r3, [r7, #12]
    8c62:	683a      	ldr	r2, [r7, #0]
    8c64:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    8c66:	683b      	ldr	r3, [r7, #0]
    8c68:	2200      	movs	r2, #0
    8c6a:	601a      	str	r2, [r3, #0]
}
    8c6c:	46bd      	mov	sp, r7
    8c6e:	b004      	add	sp, #16
    8c70:	bd80      	pop	{r7, pc}
    8c72:	46c0      	nop			; (mov r8, r8)
    8c74:	00008bcd 	.word	0x00008bcd
    8c78:	0000fdd8 	.word	0x0000fdd8
    8c7c:	00002841 	.word	0x00002841

00008c80 <__aeabi_atexit>:
    8c80:	000b      	movs	r3, r1
    8c82:	b510      	push	{r4, lr}
    8c84:	0001      	movs	r1, r0
    8c86:	0018      	movs	r0, r3
    8c88:	f001 fc4e 	bl	a528 <__cxa_atexit>
    8c8c:	bd10      	pop	{r4, pc}
    8c8e:	46c0      	nop			; (mov r8, r8)

00008c90 <__udivsi3>:
    8c90:	2200      	movs	r2, #0
    8c92:	0843      	lsrs	r3, r0, #1
    8c94:	428b      	cmp	r3, r1
    8c96:	d374      	bcc.n	8d82 <__udivsi3+0xf2>
    8c98:	0903      	lsrs	r3, r0, #4
    8c9a:	428b      	cmp	r3, r1
    8c9c:	d35f      	bcc.n	8d5e <__udivsi3+0xce>
    8c9e:	0a03      	lsrs	r3, r0, #8
    8ca0:	428b      	cmp	r3, r1
    8ca2:	d344      	bcc.n	8d2e <__udivsi3+0x9e>
    8ca4:	0b03      	lsrs	r3, r0, #12
    8ca6:	428b      	cmp	r3, r1
    8ca8:	d328      	bcc.n	8cfc <__udivsi3+0x6c>
    8caa:	0c03      	lsrs	r3, r0, #16
    8cac:	428b      	cmp	r3, r1
    8cae:	d30d      	bcc.n	8ccc <__udivsi3+0x3c>
    8cb0:	22ff      	movs	r2, #255	; 0xff
    8cb2:	0209      	lsls	r1, r1, #8
    8cb4:	ba12      	rev	r2, r2
    8cb6:	0c03      	lsrs	r3, r0, #16
    8cb8:	428b      	cmp	r3, r1
    8cba:	d302      	bcc.n	8cc2 <__udivsi3+0x32>
    8cbc:	1212      	asrs	r2, r2, #8
    8cbe:	0209      	lsls	r1, r1, #8
    8cc0:	d065      	beq.n	8d8e <__udivsi3+0xfe>
    8cc2:	0b03      	lsrs	r3, r0, #12
    8cc4:	428b      	cmp	r3, r1
    8cc6:	d319      	bcc.n	8cfc <__udivsi3+0x6c>
    8cc8:	e000      	b.n	8ccc <__udivsi3+0x3c>
    8cca:	0a09      	lsrs	r1, r1, #8
    8ccc:	0bc3      	lsrs	r3, r0, #15
    8cce:	428b      	cmp	r3, r1
    8cd0:	d301      	bcc.n	8cd6 <__udivsi3+0x46>
    8cd2:	03cb      	lsls	r3, r1, #15
    8cd4:	1ac0      	subs	r0, r0, r3
    8cd6:	4152      	adcs	r2, r2
    8cd8:	0b83      	lsrs	r3, r0, #14
    8cda:	428b      	cmp	r3, r1
    8cdc:	d301      	bcc.n	8ce2 <__udivsi3+0x52>
    8cde:	038b      	lsls	r3, r1, #14
    8ce0:	1ac0      	subs	r0, r0, r3
    8ce2:	4152      	adcs	r2, r2
    8ce4:	0b43      	lsrs	r3, r0, #13
    8ce6:	428b      	cmp	r3, r1
    8ce8:	d301      	bcc.n	8cee <__udivsi3+0x5e>
    8cea:	034b      	lsls	r3, r1, #13
    8cec:	1ac0      	subs	r0, r0, r3
    8cee:	4152      	adcs	r2, r2
    8cf0:	0b03      	lsrs	r3, r0, #12
    8cf2:	428b      	cmp	r3, r1
    8cf4:	d301      	bcc.n	8cfa <__udivsi3+0x6a>
    8cf6:	030b      	lsls	r3, r1, #12
    8cf8:	1ac0      	subs	r0, r0, r3
    8cfa:	4152      	adcs	r2, r2
    8cfc:	0ac3      	lsrs	r3, r0, #11
    8cfe:	428b      	cmp	r3, r1
    8d00:	d301      	bcc.n	8d06 <__udivsi3+0x76>
    8d02:	02cb      	lsls	r3, r1, #11
    8d04:	1ac0      	subs	r0, r0, r3
    8d06:	4152      	adcs	r2, r2
    8d08:	0a83      	lsrs	r3, r0, #10
    8d0a:	428b      	cmp	r3, r1
    8d0c:	d301      	bcc.n	8d12 <__udivsi3+0x82>
    8d0e:	028b      	lsls	r3, r1, #10
    8d10:	1ac0      	subs	r0, r0, r3
    8d12:	4152      	adcs	r2, r2
    8d14:	0a43      	lsrs	r3, r0, #9
    8d16:	428b      	cmp	r3, r1
    8d18:	d301      	bcc.n	8d1e <__udivsi3+0x8e>
    8d1a:	024b      	lsls	r3, r1, #9
    8d1c:	1ac0      	subs	r0, r0, r3
    8d1e:	4152      	adcs	r2, r2
    8d20:	0a03      	lsrs	r3, r0, #8
    8d22:	428b      	cmp	r3, r1
    8d24:	d301      	bcc.n	8d2a <__udivsi3+0x9a>
    8d26:	020b      	lsls	r3, r1, #8
    8d28:	1ac0      	subs	r0, r0, r3
    8d2a:	4152      	adcs	r2, r2
    8d2c:	d2cd      	bcs.n	8cca <__udivsi3+0x3a>
    8d2e:	09c3      	lsrs	r3, r0, #7
    8d30:	428b      	cmp	r3, r1
    8d32:	d301      	bcc.n	8d38 <__udivsi3+0xa8>
    8d34:	01cb      	lsls	r3, r1, #7
    8d36:	1ac0      	subs	r0, r0, r3
    8d38:	4152      	adcs	r2, r2
    8d3a:	0983      	lsrs	r3, r0, #6
    8d3c:	428b      	cmp	r3, r1
    8d3e:	d301      	bcc.n	8d44 <__udivsi3+0xb4>
    8d40:	018b      	lsls	r3, r1, #6
    8d42:	1ac0      	subs	r0, r0, r3
    8d44:	4152      	adcs	r2, r2
    8d46:	0943      	lsrs	r3, r0, #5
    8d48:	428b      	cmp	r3, r1
    8d4a:	d301      	bcc.n	8d50 <__udivsi3+0xc0>
    8d4c:	014b      	lsls	r3, r1, #5
    8d4e:	1ac0      	subs	r0, r0, r3
    8d50:	4152      	adcs	r2, r2
    8d52:	0903      	lsrs	r3, r0, #4
    8d54:	428b      	cmp	r3, r1
    8d56:	d301      	bcc.n	8d5c <__udivsi3+0xcc>
    8d58:	010b      	lsls	r3, r1, #4
    8d5a:	1ac0      	subs	r0, r0, r3
    8d5c:	4152      	adcs	r2, r2
    8d5e:	08c3      	lsrs	r3, r0, #3
    8d60:	428b      	cmp	r3, r1
    8d62:	d301      	bcc.n	8d68 <__udivsi3+0xd8>
    8d64:	00cb      	lsls	r3, r1, #3
    8d66:	1ac0      	subs	r0, r0, r3
    8d68:	4152      	adcs	r2, r2
    8d6a:	0883      	lsrs	r3, r0, #2
    8d6c:	428b      	cmp	r3, r1
    8d6e:	d301      	bcc.n	8d74 <__udivsi3+0xe4>
    8d70:	008b      	lsls	r3, r1, #2
    8d72:	1ac0      	subs	r0, r0, r3
    8d74:	4152      	adcs	r2, r2
    8d76:	0843      	lsrs	r3, r0, #1
    8d78:	428b      	cmp	r3, r1
    8d7a:	d301      	bcc.n	8d80 <__udivsi3+0xf0>
    8d7c:	004b      	lsls	r3, r1, #1
    8d7e:	1ac0      	subs	r0, r0, r3
    8d80:	4152      	adcs	r2, r2
    8d82:	1a41      	subs	r1, r0, r1
    8d84:	d200      	bcs.n	8d88 <__udivsi3+0xf8>
    8d86:	4601      	mov	r1, r0
    8d88:	4152      	adcs	r2, r2
    8d8a:	4610      	mov	r0, r2
    8d8c:	4770      	bx	lr
    8d8e:	e7ff      	b.n	8d90 <__udivsi3+0x100>
    8d90:	b501      	push	{r0, lr}
    8d92:	2000      	movs	r0, #0
    8d94:	f000 f806 	bl	8da4 <__aeabi_idiv0>
    8d98:	bd02      	pop	{r1, pc}
    8d9a:	46c0      	nop			; (mov r8, r8)

00008d9c <__aeabi_uidivmod>:
    8d9c:	2900      	cmp	r1, #0
    8d9e:	d0f7      	beq.n	8d90 <__udivsi3+0x100>
    8da0:	e776      	b.n	8c90 <__udivsi3>
    8da2:	4770      	bx	lr

00008da4 <__aeabi_idiv0>:
    8da4:	4770      	bx	lr
    8da6:	46c0      	nop			; (mov r8, r8)

00008da8 <__aeabi_uldivmod>:
    8da8:	2b00      	cmp	r3, #0
    8daa:	d111      	bne.n	8dd0 <__aeabi_uldivmod+0x28>
    8dac:	2a00      	cmp	r2, #0
    8dae:	d10f      	bne.n	8dd0 <__aeabi_uldivmod+0x28>
    8db0:	2900      	cmp	r1, #0
    8db2:	d100      	bne.n	8db6 <__aeabi_uldivmod+0xe>
    8db4:	2800      	cmp	r0, #0
    8db6:	d002      	beq.n	8dbe <__aeabi_uldivmod+0x16>
    8db8:	2100      	movs	r1, #0
    8dba:	43c9      	mvns	r1, r1
    8dbc:	1c08      	adds	r0, r1, #0
    8dbe:	b407      	push	{r0, r1, r2}
    8dc0:	4802      	ldr	r0, [pc, #8]	; (8dcc <__aeabi_uldivmod+0x24>)
    8dc2:	a102      	add	r1, pc, #8	; (adr r1, 8dcc <__aeabi_uldivmod+0x24>)
    8dc4:	1840      	adds	r0, r0, r1
    8dc6:	9002      	str	r0, [sp, #8]
    8dc8:	bd03      	pop	{r0, r1, pc}
    8dca:	46c0      	nop			; (mov r8, r8)
    8dcc:	ffffffd9 	.word	0xffffffd9
    8dd0:	b403      	push	{r0, r1}
    8dd2:	4668      	mov	r0, sp
    8dd4:	b501      	push	{r0, lr}
    8dd6:	9802      	ldr	r0, [sp, #8]
    8dd8:	f000 f806 	bl	8de8 <__udivmoddi4>
    8ddc:	9b01      	ldr	r3, [sp, #4]
    8dde:	469e      	mov	lr, r3
    8de0:	b002      	add	sp, #8
    8de2:	bc0c      	pop	{r2, r3}
    8de4:	4770      	bx	lr
    8de6:	46c0      	nop			; (mov r8, r8)

00008de8 <__udivmoddi4>:
    8de8:	b5f0      	push	{r4, r5, r6, r7, lr}
    8dea:	4657      	mov	r7, sl
    8dec:	464e      	mov	r6, r9
    8dee:	4645      	mov	r5, r8
    8df0:	46de      	mov	lr, fp
    8df2:	b5e0      	push	{r5, r6, r7, lr}
    8df4:	0004      	movs	r4, r0
    8df6:	b083      	sub	sp, #12
    8df8:	000d      	movs	r5, r1
    8dfa:	4692      	mov	sl, r2
    8dfc:	4699      	mov	r9, r3
    8dfe:	428b      	cmp	r3, r1
    8e00:	d82f      	bhi.n	8e62 <__udivmoddi4+0x7a>
    8e02:	d02c      	beq.n	8e5e <__udivmoddi4+0x76>
    8e04:	4649      	mov	r1, r9
    8e06:	4650      	mov	r0, sl
    8e08:	f001 fa82 	bl	a310 <__clzdi2>
    8e0c:	0029      	movs	r1, r5
    8e0e:	0006      	movs	r6, r0
    8e10:	0020      	movs	r0, r4
    8e12:	f001 fa7d 	bl	a310 <__clzdi2>
    8e16:	1a33      	subs	r3, r6, r0
    8e18:	4698      	mov	r8, r3
    8e1a:	3b20      	subs	r3, #32
    8e1c:	469b      	mov	fp, r3
    8e1e:	d500      	bpl.n	8e22 <__udivmoddi4+0x3a>
    8e20:	e074      	b.n	8f0c <__udivmoddi4+0x124>
    8e22:	4653      	mov	r3, sl
    8e24:	465a      	mov	r2, fp
    8e26:	4093      	lsls	r3, r2
    8e28:	001f      	movs	r7, r3
    8e2a:	4653      	mov	r3, sl
    8e2c:	4642      	mov	r2, r8
    8e2e:	4093      	lsls	r3, r2
    8e30:	001e      	movs	r6, r3
    8e32:	42af      	cmp	r7, r5
    8e34:	d829      	bhi.n	8e8a <__udivmoddi4+0xa2>
    8e36:	d026      	beq.n	8e86 <__udivmoddi4+0x9e>
    8e38:	465b      	mov	r3, fp
    8e3a:	1ba4      	subs	r4, r4, r6
    8e3c:	41bd      	sbcs	r5, r7
    8e3e:	2b00      	cmp	r3, #0
    8e40:	da00      	bge.n	8e44 <__udivmoddi4+0x5c>
    8e42:	e079      	b.n	8f38 <__udivmoddi4+0x150>
    8e44:	2200      	movs	r2, #0
    8e46:	2300      	movs	r3, #0
    8e48:	9200      	str	r2, [sp, #0]
    8e4a:	9301      	str	r3, [sp, #4]
    8e4c:	2301      	movs	r3, #1
    8e4e:	465a      	mov	r2, fp
    8e50:	4093      	lsls	r3, r2
    8e52:	9301      	str	r3, [sp, #4]
    8e54:	2301      	movs	r3, #1
    8e56:	4642      	mov	r2, r8
    8e58:	4093      	lsls	r3, r2
    8e5a:	9300      	str	r3, [sp, #0]
    8e5c:	e019      	b.n	8e92 <__udivmoddi4+0xaa>
    8e5e:	4282      	cmp	r2, r0
    8e60:	d9d0      	bls.n	8e04 <__udivmoddi4+0x1c>
    8e62:	2200      	movs	r2, #0
    8e64:	2300      	movs	r3, #0
    8e66:	9200      	str	r2, [sp, #0]
    8e68:	9301      	str	r3, [sp, #4]
    8e6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8e6c:	2b00      	cmp	r3, #0
    8e6e:	d001      	beq.n	8e74 <__udivmoddi4+0x8c>
    8e70:	601c      	str	r4, [r3, #0]
    8e72:	605d      	str	r5, [r3, #4]
    8e74:	9800      	ldr	r0, [sp, #0]
    8e76:	9901      	ldr	r1, [sp, #4]
    8e78:	b003      	add	sp, #12
    8e7a:	bc3c      	pop	{r2, r3, r4, r5}
    8e7c:	4690      	mov	r8, r2
    8e7e:	4699      	mov	r9, r3
    8e80:	46a2      	mov	sl, r4
    8e82:	46ab      	mov	fp, r5
    8e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8e86:	42a3      	cmp	r3, r4
    8e88:	d9d6      	bls.n	8e38 <__udivmoddi4+0x50>
    8e8a:	2200      	movs	r2, #0
    8e8c:	2300      	movs	r3, #0
    8e8e:	9200      	str	r2, [sp, #0]
    8e90:	9301      	str	r3, [sp, #4]
    8e92:	4643      	mov	r3, r8
    8e94:	2b00      	cmp	r3, #0
    8e96:	d0e8      	beq.n	8e6a <__udivmoddi4+0x82>
    8e98:	07fb      	lsls	r3, r7, #31
    8e9a:	0872      	lsrs	r2, r6, #1
    8e9c:	431a      	orrs	r2, r3
    8e9e:	4646      	mov	r6, r8
    8ea0:	087b      	lsrs	r3, r7, #1
    8ea2:	e00e      	b.n	8ec2 <__udivmoddi4+0xda>
    8ea4:	42ab      	cmp	r3, r5
    8ea6:	d101      	bne.n	8eac <__udivmoddi4+0xc4>
    8ea8:	42a2      	cmp	r2, r4
    8eaa:	d80c      	bhi.n	8ec6 <__udivmoddi4+0xde>
    8eac:	1aa4      	subs	r4, r4, r2
    8eae:	419d      	sbcs	r5, r3
    8eb0:	2001      	movs	r0, #1
    8eb2:	1924      	adds	r4, r4, r4
    8eb4:	416d      	adcs	r5, r5
    8eb6:	2100      	movs	r1, #0
    8eb8:	3e01      	subs	r6, #1
    8eba:	1824      	adds	r4, r4, r0
    8ebc:	414d      	adcs	r5, r1
    8ebe:	2e00      	cmp	r6, #0
    8ec0:	d006      	beq.n	8ed0 <__udivmoddi4+0xe8>
    8ec2:	42ab      	cmp	r3, r5
    8ec4:	d9ee      	bls.n	8ea4 <__udivmoddi4+0xbc>
    8ec6:	3e01      	subs	r6, #1
    8ec8:	1924      	adds	r4, r4, r4
    8eca:	416d      	adcs	r5, r5
    8ecc:	2e00      	cmp	r6, #0
    8ece:	d1f8      	bne.n	8ec2 <__udivmoddi4+0xda>
    8ed0:	465b      	mov	r3, fp
    8ed2:	9800      	ldr	r0, [sp, #0]
    8ed4:	9901      	ldr	r1, [sp, #4]
    8ed6:	1900      	adds	r0, r0, r4
    8ed8:	4169      	adcs	r1, r5
    8eda:	2b00      	cmp	r3, #0
    8edc:	db22      	blt.n	8f24 <__udivmoddi4+0x13c>
    8ede:	002b      	movs	r3, r5
    8ee0:	465a      	mov	r2, fp
    8ee2:	40d3      	lsrs	r3, r2
    8ee4:	002a      	movs	r2, r5
    8ee6:	4644      	mov	r4, r8
    8ee8:	40e2      	lsrs	r2, r4
    8eea:	001c      	movs	r4, r3
    8eec:	465b      	mov	r3, fp
    8eee:	0015      	movs	r5, r2
    8ef0:	2b00      	cmp	r3, #0
    8ef2:	db2c      	blt.n	8f4e <__udivmoddi4+0x166>
    8ef4:	0026      	movs	r6, r4
    8ef6:	409e      	lsls	r6, r3
    8ef8:	0033      	movs	r3, r6
    8efa:	0026      	movs	r6, r4
    8efc:	4647      	mov	r7, r8
    8efe:	40be      	lsls	r6, r7
    8f00:	0032      	movs	r2, r6
    8f02:	1a80      	subs	r0, r0, r2
    8f04:	4199      	sbcs	r1, r3
    8f06:	9000      	str	r0, [sp, #0]
    8f08:	9101      	str	r1, [sp, #4]
    8f0a:	e7ae      	b.n	8e6a <__udivmoddi4+0x82>
    8f0c:	4642      	mov	r2, r8
    8f0e:	2320      	movs	r3, #32
    8f10:	1a9b      	subs	r3, r3, r2
    8f12:	4652      	mov	r2, sl
    8f14:	40da      	lsrs	r2, r3
    8f16:	4641      	mov	r1, r8
    8f18:	0013      	movs	r3, r2
    8f1a:	464a      	mov	r2, r9
    8f1c:	408a      	lsls	r2, r1
    8f1e:	0017      	movs	r7, r2
    8f20:	431f      	orrs	r7, r3
    8f22:	e782      	b.n	8e2a <__udivmoddi4+0x42>
    8f24:	4642      	mov	r2, r8
    8f26:	2320      	movs	r3, #32
    8f28:	1a9b      	subs	r3, r3, r2
    8f2a:	002a      	movs	r2, r5
    8f2c:	4646      	mov	r6, r8
    8f2e:	409a      	lsls	r2, r3
    8f30:	0023      	movs	r3, r4
    8f32:	40f3      	lsrs	r3, r6
    8f34:	4313      	orrs	r3, r2
    8f36:	e7d5      	b.n	8ee4 <__udivmoddi4+0xfc>
    8f38:	4642      	mov	r2, r8
    8f3a:	2320      	movs	r3, #32
    8f3c:	2100      	movs	r1, #0
    8f3e:	1a9b      	subs	r3, r3, r2
    8f40:	2200      	movs	r2, #0
    8f42:	9100      	str	r1, [sp, #0]
    8f44:	9201      	str	r2, [sp, #4]
    8f46:	2201      	movs	r2, #1
    8f48:	40da      	lsrs	r2, r3
    8f4a:	9201      	str	r2, [sp, #4]
    8f4c:	e782      	b.n	8e54 <__udivmoddi4+0x6c>
    8f4e:	4642      	mov	r2, r8
    8f50:	2320      	movs	r3, #32
    8f52:	0026      	movs	r6, r4
    8f54:	1a9b      	subs	r3, r3, r2
    8f56:	40de      	lsrs	r6, r3
    8f58:	002f      	movs	r7, r5
    8f5a:	46b4      	mov	ip, r6
    8f5c:	4097      	lsls	r7, r2
    8f5e:	4666      	mov	r6, ip
    8f60:	003b      	movs	r3, r7
    8f62:	4333      	orrs	r3, r6
    8f64:	e7c9      	b.n	8efa <__udivmoddi4+0x112>
    8f66:	46c0      	nop			; (mov r8, r8)

00008f68 <__aeabi_ddiv>:
    8f68:	b5f0      	push	{r4, r5, r6, r7, lr}
    8f6a:	4657      	mov	r7, sl
    8f6c:	4645      	mov	r5, r8
    8f6e:	46de      	mov	lr, fp
    8f70:	464e      	mov	r6, r9
    8f72:	b5e0      	push	{r5, r6, r7, lr}
    8f74:	004c      	lsls	r4, r1, #1
    8f76:	030e      	lsls	r6, r1, #12
    8f78:	b087      	sub	sp, #28
    8f7a:	4683      	mov	fp, r0
    8f7c:	4692      	mov	sl, r2
    8f7e:	001d      	movs	r5, r3
    8f80:	4680      	mov	r8, r0
    8f82:	0b36      	lsrs	r6, r6, #12
    8f84:	0d64      	lsrs	r4, r4, #21
    8f86:	0fcf      	lsrs	r7, r1, #31
    8f88:	2c00      	cmp	r4, #0
    8f8a:	d04f      	beq.n	902c <__aeabi_ddiv+0xc4>
    8f8c:	4b6f      	ldr	r3, [pc, #444]	; (914c <__aeabi_ddiv+0x1e4>)
    8f8e:	429c      	cmp	r4, r3
    8f90:	d035      	beq.n	8ffe <__aeabi_ddiv+0x96>
    8f92:	2380      	movs	r3, #128	; 0x80
    8f94:	0f42      	lsrs	r2, r0, #29
    8f96:	041b      	lsls	r3, r3, #16
    8f98:	00f6      	lsls	r6, r6, #3
    8f9a:	4313      	orrs	r3, r2
    8f9c:	4333      	orrs	r3, r6
    8f9e:	4699      	mov	r9, r3
    8fa0:	00c3      	lsls	r3, r0, #3
    8fa2:	4698      	mov	r8, r3
    8fa4:	4b6a      	ldr	r3, [pc, #424]	; (9150 <__aeabi_ddiv+0x1e8>)
    8fa6:	2600      	movs	r6, #0
    8fa8:	469c      	mov	ip, r3
    8faa:	2300      	movs	r3, #0
    8fac:	4464      	add	r4, ip
    8fae:	9303      	str	r3, [sp, #12]
    8fb0:	032b      	lsls	r3, r5, #12
    8fb2:	0b1b      	lsrs	r3, r3, #12
    8fb4:	469b      	mov	fp, r3
    8fb6:	006b      	lsls	r3, r5, #1
    8fb8:	0fed      	lsrs	r5, r5, #31
    8fba:	4650      	mov	r0, sl
    8fbc:	0d5b      	lsrs	r3, r3, #21
    8fbe:	9501      	str	r5, [sp, #4]
    8fc0:	d05e      	beq.n	9080 <__aeabi_ddiv+0x118>
    8fc2:	4a62      	ldr	r2, [pc, #392]	; (914c <__aeabi_ddiv+0x1e4>)
    8fc4:	4293      	cmp	r3, r2
    8fc6:	d053      	beq.n	9070 <__aeabi_ddiv+0x108>
    8fc8:	465a      	mov	r2, fp
    8fca:	00d1      	lsls	r1, r2, #3
    8fcc:	2280      	movs	r2, #128	; 0x80
    8fce:	0f40      	lsrs	r0, r0, #29
    8fd0:	0412      	lsls	r2, r2, #16
    8fd2:	4302      	orrs	r2, r0
    8fd4:	430a      	orrs	r2, r1
    8fd6:	4693      	mov	fp, r2
    8fd8:	4652      	mov	r2, sl
    8fda:	00d1      	lsls	r1, r2, #3
    8fdc:	4a5c      	ldr	r2, [pc, #368]	; (9150 <__aeabi_ddiv+0x1e8>)
    8fde:	4694      	mov	ip, r2
    8fe0:	2200      	movs	r2, #0
    8fe2:	4463      	add	r3, ip
    8fe4:	0038      	movs	r0, r7
    8fe6:	4068      	eors	r0, r5
    8fe8:	4684      	mov	ip, r0
    8fea:	9002      	str	r0, [sp, #8]
    8fec:	1ae4      	subs	r4, r4, r3
    8fee:	4316      	orrs	r6, r2
    8ff0:	2e0f      	cmp	r6, #15
    8ff2:	d900      	bls.n	8ff6 <__aeabi_ddiv+0x8e>
    8ff4:	e0b4      	b.n	9160 <__aeabi_ddiv+0x1f8>
    8ff6:	4b57      	ldr	r3, [pc, #348]	; (9154 <__aeabi_ddiv+0x1ec>)
    8ff8:	00b6      	lsls	r6, r6, #2
    8ffa:	599b      	ldr	r3, [r3, r6]
    8ffc:	469f      	mov	pc, r3
    8ffe:	0003      	movs	r3, r0
    9000:	4333      	orrs	r3, r6
    9002:	4699      	mov	r9, r3
    9004:	d16c      	bne.n	90e0 <__aeabi_ddiv+0x178>
    9006:	2300      	movs	r3, #0
    9008:	4698      	mov	r8, r3
    900a:	3302      	adds	r3, #2
    900c:	2608      	movs	r6, #8
    900e:	9303      	str	r3, [sp, #12]
    9010:	e7ce      	b.n	8fb0 <__aeabi_ddiv+0x48>
    9012:	46cb      	mov	fp, r9
    9014:	4641      	mov	r1, r8
    9016:	9a03      	ldr	r2, [sp, #12]
    9018:	9701      	str	r7, [sp, #4]
    901a:	2a02      	cmp	r2, #2
    901c:	d165      	bne.n	90ea <__aeabi_ddiv+0x182>
    901e:	9b01      	ldr	r3, [sp, #4]
    9020:	4c4a      	ldr	r4, [pc, #296]	; (914c <__aeabi_ddiv+0x1e4>)
    9022:	469c      	mov	ip, r3
    9024:	2300      	movs	r3, #0
    9026:	2200      	movs	r2, #0
    9028:	4698      	mov	r8, r3
    902a:	e06b      	b.n	9104 <__aeabi_ddiv+0x19c>
    902c:	0003      	movs	r3, r0
    902e:	4333      	orrs	r3, r6
    9030:	4699      	mov	r9, r3
    9032:	d04e      	beq.n	90d2 <__aeabi_ddiv+0x16a>
    9034:	2e00      	cmp	r6, #0
    9036:	d100      	bne.n	903a <__aeabi_ddiv+0xd2>
    9038:	e1bc      	b.n	93b4 <__aeabi_ddiv+0x44c>
    903a:	0030      	movs	r0, r6
    903c:	f001 f94a 	bl	a2d4 <__clzsi2>
    9040:	0003      	movs	r3, r0
    9042:	3b0b      	subs	r3, #11
    9044:	2b1c      	cmp	r3, #28
    9046:	dd00      	ble.n	904a <__aeabi_ddiv+0xe2>
    9048:	e1ac      	b.n	93a4 <__aeabi_ddiv+0x43c>
    904a:	221d      	movs	r2, #29
    904c:	1ad3      	subs	r3, r2, r3
    904e:	465a      	mov	r2, fp
    9050:	0001      	movs	r1, r0
    9052:	40da      	lsrs	r2, r3
    9054:	3908      	subs	r1, #8
    9056:	408e      	lsls	r6, r1
    9058:	0013      	movs	r3, r2
    905a:	4333      	orrs	r3, r6
    905c:	4699      	mov	r9, r3
    905e:	465b      	mov	r3, fp
    9060:	408b      	lsls	r3, r1
    9062:	4698      	mov	r8, r3
    9064:	2300      	movs	r3, #0
    9066:	4c3c      	ldr	r4, [pc, #240]	; (9158 <__aeabi_ddiv+0x1f0>)
    9068:	2600      	movs	r6, #0
    906a:	1a24      	subs	r4, r4, r0
    906c:	9303      	str	r3, [sp, #12]
    906e:	e79f      	b.n	8fb0 <__aeabi_ddiv+0x48>
    9070:	4651      	mov	r1, sl
    9072:	465a      	mov	r2, fp
    9074:	4311      	orrs	r1, r2
    9076:	d129      	bne.n	90cc <__aeabi_ddiv+0x164>
    9078:	2200      	movs	r2, #0
    907a:	4693      	mov	fp, r2
    907c:	3202      	adds	r2, #2
    907e:	e7b1      	b.n	8fe4 <__aeabi_ddiv+0x7c>
    9080:	4659      	mov	r1, fp
    9082:	4301      	orrs	r1, r0
    9084:	d01e      	beq.n	90c4 <__aeabi_ddiv+0x15c>
    9086:	465b      	mov	r3, fp
    9088:	2b00      	cmp	r3, #0
    908a:	d100      	bne.n	908e <__aeabi_ddiv+0x126>
    908c:	e19e      	b.n	93cc <__aeabi_ddiv+0x464>
    908e:	4658      	mov	r0, fp
    9090:	f001 f920 	bl	a2d4 <__clzsi2>
    9094:	0003      	movs	r3, r0
    9096:	3b0b      	subs	r3, #11
    9098:	2b1c      	cmp	r3, #28
    909a:	dd00      	ble.n	909e <__aeabi_ddiv+0x136>
    909c:	e18f      	b.n	93be <__aeabi_ddiv+0x456>
    909e:	0002      	movs	r2, r0
    90a0:	4659      	mov	r1, fp
    90a2:	3a08      	subs	r2, #8
    90a4:	4091      	lsls	r1, r2
    90a6:	468b      	mov	fp, r1
    90a8:	211d      	movs	r1, #29
    90aa:	1acb      	subs	r3, r1, r3
    90ac:	4651      	mov	r1, sl
    90ae:	40d9      	lsrs	r1, r3
    90b0:	000b      	movs	r3, r1
    90b2:	4659      	mov	r1, fp
    90b4:	430b      	orrs	r3, r1
    90b6:	4651      	mov	r1, sl
    90b8:	469b      	mov	fp, r3
    90ba:	4091      	lsls	r1, r2
    90bc:	4b26      	ldr	r3, [pc, #152]	; (9158 <__aeabi_ddiv+0x1f0>)
    90be:	2200      	movs	r2, #0
    90c0:	1a1b      	subs	r3, r3, r0
    90c2:	e78f      	b.n	8fe4 <__aeabi_ddiv+0x7c>
    90c4:	2300      	movs	r3, #0
    90c6:	2201      	movs	r2, #1
    90c8:	469b      	mov	fp, r3
    90ca:	e78b      	b.n	8fe4 <__aeabi_ddiv+0x7c>
    90cc:	4651      	mov	r1, sl
    90ce:	2203      	movs	r2, #3
    90d0:	e788      	b.n	8fe4 <__aeabi_ddiv+0x7c>
    90d2:	2300      	movs	r3, #0
    90d4:	4698      	mov	r8, r3
    90d6:	3301      	adds	r3, #1
    90d8:	2604      	movs	r6, #4
    90da:	2400      	movs	r4, #0
    90dc:	9303      	str	r3, [sp, #12]
    90de:	e767      	b.n	8fb0 <__aeabi_ddiv+0x48>
    90e0:	2303      	movs	r3, #3
    90e2:	46b1      	mov	r9, r6
    90e4:	9303      	str	r3, [sp, #12]
    90e6:	260c      	movs	r6, #12
    90e8:	e762      	b.n	8fb0 <__aeabi_ddiv+0x48>
    90ea:	2a03      	cmp	r2, #3
    90ec:	d100      	bne.n	90f0 <__aeabi_ddiv+0x188>
    90ee:	e25c      	b.n	95aa <__aeabi_ddiv+0x642>
    90f0:	9b01      	ldr	r3, [sp, #4]
    90f2:	2a01      	cmp	r2, #1
    90f4:	d000      	beq.n	90f8 <__aeabi_ddiv+0x190>
    90f6:	e1e4      	b.n	94c2 <__aeabi_ddiv+0x55a>
    90f8:	4013      	ands	r3, r2
    90fa:	469c      	mov	ip, r3
    90fc:	2300      	movs	r3, #0
    90fe:	2400      	movs	r4, #0
    9100:	2200      	movs	r2, #0
    9102:	4698      	mov	r8, r3
    9104:	2100      	movs	r1, #0
    9106:	0312      	lsls	r2, r2, #12
    9108:	0b13      	lsrs	r3, r2, #12
    910a:	0d0a      	lsrs	r2, r1, #20
    910c:	0512      	lsls	r2, r2, #20
    910e:	431a      	orrs	r2, r3
    9110:	0523      	lsls	r3, r4, #20
    9112:	4c12      	ldr	r4, [pc, #72]	; (915c <__aeabi_ddiv+0x1f4>)
    9114:	4640      	mov	r0, r8
    9116:	4022      	ands	r2, r4
    9118:	4313      	orrs	r3, r2
    911a:	4662      	mov	r2, ip
    911c:	005b      	lsls	r3, r3, #1
    911e:	07d2      	lsls	r2, r2, #31
    9120:	085b      	lsrs	r3, r3, #1
    9122:	4313      	orrs	r3, r2
    9124:	0019      	movs	r1, r3
    9126:	b007      	add	sp, #28
    9128:	bc3c      	pop	{r2, r3, r4, r5}
    912a:	4690      	mov	r8, r2
    912c:	4699      	mov	r9, r3
    912e:	46a2      	mov	sl, r4
    9130:	46ab      	mov	fp, r5
    9132:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9134:	2300      	movs	r3, #0
    9136:	2280      	movs	r2, #128	; 0x80
    9138:	469c      	mov	ip, r3
    913a:	0312      	lsls	r2, r2, #12
    913c:	4698      	mov	r8, r3
    913e:	4c03      	ldr	r4, [pc, #12]	; (914c <__aeabi_ddiv+0x1e4>)
    9140:	e7e0      	b.n	9104 <__aeabi_ddiv+0x19c>
    9142:	2300      	movs	r3, #0
    9144:	4c01      	ldr	r4, [pc, #4]	; (914c <__aeabi_ddiv+0x1e4>)
    9146:	2200      	movs	r2, #0
    9148:	4698      	mov	r8, r3
    914a:	e7db      	b.n	9104 <__aeabi_ddiv+0x19c>
    914c:	000007ff 	.word	0x000007ff
    9150:	fffffc01 	.word	0xfffffc01
    9154:	0000fdf8 	.word	0x0000fdf8
    9158:	fffffc0d 	.word	0xfffffc0d
    915c:	800fffff 	.word	0x800fffff
    9160:	45d9      	cmp	r9, fp
    9162:	d900      	bls.n	9166 <__aeabi_ddiv+0x1fe>
    9164:	e139      	b.n	93da <__aeabi_ddiv+0x472>
    9166:	d100      	bne.n	916a <__aeabi_ddiv+0x202>
    9168:	e134      	b.n	93d4 <__aeabi_ddiv+0x46c>
    916a:	2300      	movs	r3, #0
    916c:	4646      	mov	r6, r8
    916e:	464d      	mov	r5, r9
    9170:	469a      	mov	sl, r3
    9172:	3c01      	subs	r4, #1
    9174:	465b      	mov	r3, fp
    9176:	0e0a      	lsrs	r2, r1, #24
    9178:	021b      	lsls	r3, r3, #8
    917a:	431a      	orrs	r2, r3
    917c:	020b      	lsls	r3, r1, #8
    917e:	0c17      	lsrs	r7, r2, #16
    9180:	9303      	str	r3, [sp, #12]
    9182:	0413      	lsls	r3, r2, #16
    9184:	0c1b      	lsrs	r3, r3, #16
    9186:	0039      	movs	r1, r7
    9188:	0028      	movs	r0, r5
    918a:	4690      	mov	r8, r2
    918c:	9301      	str	r3, [sp, #4]
    918e:	f7ff fd7f 	bl	8c90 <__udivsi3>
    9192:	0002      	movs	r2, r0
    9194:	9b01      	ldr	r3, [sp, #4]
    9196:	4683      	mov	fp, r0
    9198:	435a      	muls	r2, r3
    919a:	0028      	movs	r0, r5
    919c:	0039      	movs	r1, r7
    919e:	4691      	mov	r9, r2
    91a0:	f7ff fdfc 	bl	8d9c <__aeabi_uidivmod>
    91a4:	0c35      	lsrs	r5, r6, #16
    91a6:	0409      	lsls	r1, r1, #16
    91a8:	430d      	orrs	r5, r1
    91aa:	45a9      	cmp	r9, r5
    91ac:	d90d      	bls.n	91ca <__aeabi_ddiv+0x262>
    91ae:	465b      	mov	r3, fp
    91b0:	4445      	add	r5, r8
    91b2:	3b01      	subs	r3, #1
    91b4:	45a8      	cmp	r8, r5
    91b6:	d900      	bls.n	91ba <__aeabi_ddiv+0x252>
    91b8:	e13a      	b.n	9430 <__aeabi_ddiv+0x4c8>
    91ba:	45a9      	cmp	r9, r5
    91bc:	d800      	bhi.n	91c0 <__aeabi_ddiv+0x258>
    91be:	e137      	b.n	9430 <__aeabi_ddiv+0x4c8>
    91c0:	2302      	movs	r3, #2
    91c2:	425b      	negs	r3, r3
    91c4:	469c      	mov	ip, r3
    91c6:	4445      	add	r5, r8
    91c8:	44e3      	add	fp, ip
    91ca:	464b      	mov	r3, r9
    91cc:	1aeb      	subs	r3, r5, r3
    91ce:	0039      	movs	r1, r7
    91d0:	0018      	movs	r0, r3
    91d2:	9304      	str	r3, [sp, #16]
    91d4:	f7ff fd5c 	bl	8c90 <__udivsi3>
    91d8:	9b01      	ldr	r3, [sp, #4]
    91da:	0005      	movs	r5, r0
    91dc:	4343      	muls	r3, r0
    91de:	0039      	movs	r1, r7
    91e0:	9804      	ldr	r0, [sp, #16]
    91e2:	4699      	mov	r9, r3
    91e4:	f7ff fdda 	bl	8d9c <__aeabi_uidivmod>
    91e8:	0433      	lsls	r3, r6, #16
    91ea:	0409      	lsls	r1, r1, #16
    91ec:	0c1b      	lsrs	r3, r3, #16
    91ee:	430b      	orrs	r3, r1
    91f0:	4599      	cmp	r9, r3
    91f2:	d909      	bls.n	9208 <__aeabi_ddiv+0x2a0>
    91f4:	4443      	add	r3, r8
    91f6:	1e6a      	subs	r2, r5, #1
    91f8:	4598      	cmp	r8, r3
    91fa:	d900      	bls.n	91fe <__aeabi_ddiv+0x296>
    91fc:	e11a      	b.n	9434 <__aeabi_ddiv+0x4cc>
    91fe:	4599      	cmp	r9, r3
    9200:	d800      	bhi.n	9204 <__aeabi_ddiv+0x29c>
    9202:	e117      	b.n	9434 <__aeabi_ddiv+0x4cc>
    9204:	3d02      	subs	r5, #2
    9206:	4443      	add	r3, r8
    9208:	464a      	mov	r2, r9
    920a:	1a9b      	subs	r3, r3, r2
    920c:	465a      	mov	r2, fp
    920e:	0412      	lsls	r2, r2, #16
    9210:	432a      	orrs	r2, r5
    9212:	9903      	ldr	r1, [sp, #12]
    9214:	4693      	mov	fp, r2
    9216:	0c10      	lsrs	r0, r2, #16
    9218:	0c0a      	lsrs	r2, r1, #16
    921a:	4691      	mov	r9, r2
    921c:	0409      	lsls	r1, r1, #16
    921e:	465a      	mov	r2, fp
    9220:	0c09      	lsrs	r1, r1, #16
    9222:	464e      	mov	r6, r9
    9224:	000d      	movs	r5, r1
    9226:	0412      	lsls	r2, r2, #16
    9228:	0c12      	lsrs	r2, r2, #16
    922a:	4345      	muls	r5, r0
    922c:	9105      	str	r1, [sp, #20]
    922e:	4351      	muls	r1, r2
    9230:	4372      	muls	r2, r6
    9232:	4370      	muls	r0, r6
    9234:	1952      	adds	r2, r2, r5
    9236:	0c0e      	lsrs	r6, r1, #16
    9238:	18b2      	adds	r2, r6, r2
    923a:	4295      	cmp	r5, r2
    923c:	d903      	bls.n	9246 <__aeabi_ddiv+0x2de>
    923e:	2580      	movs	r5, #128	; 0x80
    9240:	026d      	lsls	r5, r5, #9
    9242:	46ac      	mov	ip, r5
    9244:	4460      	add	r0, ip
    9246:	0c15      	lsrs	r5, r2, #16
    9248:	0409      	lsls	r1, r1, #16
    924a:	0412      	lsls	r2, r2, #16
    924c:	0c09      	lsrs	r1, r1, #16
    924e:	1828      	adds	r0, r5, r0
    9250:	1852      	adds	r2, r2, r1
    9252:	4283      	cmp	r3, r0
    9254:	d200      	bcs.n	9258 <__aeabi_ddiv+0x2f0>
    9256:	e0ce      	b.n	93f6 <__aeabi_ddiv+0x48e>
    9258:	d100      	bne.n	925c <__aeabi_ddiv+0x2f4>
    925a:	e0c8      	b.n	93ee <__aeabi_ddiv+0x486>
    925c:	1a1d      	subs	r5, r3, r0
    925e:	4653      	mov	r3, sl
    9260:	1a9e      	subs	r6, r3, r2
    9262:	45b2      	cmp	sl, r6
    9264:	4192      	sbcs	r2, r2
    9266:	4252      	negs	r2, r2
    9268:	1aab      	subs	r3, r5, r2
    926a:	469a      	mov	sl, r3
    926c:	4598      	cmp	r8, r3
    926e:	d100      	bne.n	9272 <__aeabi_ddiv+0x30a>
    9270:	e117      	b.n	94a2 <__aeabi_ddiv+0x53a>
    9272:	0039      	movs	r1, r7
    9274:	0018      	movs	r0, r3
    9276:	f7ff fd0b 	bl	8c90 <__udivsi3>
    927a:	9b01      	ldr	r3, [sp, #4]
    927c:	0005      	movs	r5, r0
    927e:	4343      	muls	r3, r0
    9280:	0039      	movs	r1, r7
    9282:	4650      	mov	r0, sl
    9284:	9304      	str	r3, [sp, #16]
    9286:	f7ff fd89 	bl	8d9c <__aeabi_uidivmod>
    928a:	9804      	ldr	r0, [sp, #16]
    928c:	040b      	lsls	r3, r1, #16
    928e:	0c31      	lsrs	r1, r6, #16
    9290:	4319      	orrs	r1, r3
    9292:	4288      	cmp	r0, r1
    9294:	d909      	bls.n	92aa <__aeabi_ddiv+0x342>
    9296:	4441      	add	r1, r8
    9298:	1e6b      	subs	r3, r5, #1
    929a:	4588      	cmp	r8, r1
    929c:	d900      	bls.n	92a0 <__aeabi_ddiv+0x338>
    929e:	e107      	b.n	94b0 <__aeabi_ddiv+0x548>
    92a0:	4288      	cmp	r0, r1
    92a2:	d800      	bhi.n	92a6 <__aeabi_ddiv+0x33e>
    92a4:	e104      	b.n	94b0 <__aeabi_ddiv+0x548>
    92a6:	3d02      	subs	r5, #2
    92a8:	4441      	add	r1, r8
    92aa:	9b04      	ldr	r3, [sp, #16]
    92ac:	1acb      	subs	r3, r1, r3
    92ae:	0018      	movs	r0, r3
    92b0:	0039      	movs	r1, r7
    92b2:	9304      	str	r3, [sp, #16]
    92b4:	f7ff fcec 	bl	8c90 <__udivsi3>
    92b8:	9b01      	ldr	r3, [sp, #4]
    92ba:	4682      	mov	sl, r0
    92bc:	4343      	muls	r3, r0
    92be:	0039      	movs	r1, r7
    92c0:	9804      	ldr	r0, [sp, #16]
    92c2:	9301      	str	r3, [sp, #4]
    92c4:	f7ff fd6a 	bl	8d9c <__aeabi_uidivmod>
    92c8:	9801      	ldr	r0, [sp, #4]
    92ca:	040b      	lsls	r3, r1, #16
    92cc:	0431      	lsls	r1, r6, #16
    92ce:	0c09      	lsrs	r1, r1, #16
    92d0:	4319      	orrs	r1, r3
    92d2:	4288      	cmp	r0, r1
    92d4:	d90d      	bls.n	92f2 <__aeabi_ddiv+0x38a>
    92d6:	4653      	mov	r3, sl
    92d8:	4441      	add	r1, r8
    92da:	3b01      	subs	r3, #1
    92dc:	4588      	cmp	r8, r1
    92de:	d900      	bls.n	92e2 <__aeabi_ddiv+0x37a>
    92e0:	e0e8      	b.n	94b4 <__aeabi_ddiv+0x54c>
    92e2:	4288      	cmp	r0, r1
    92e4:	d800      	bhi.n	92e8 <__aeabi_ddiv+0x380>
    92e6:	e0e5      	b.n	94b4 <__aeabi_ddiv+0x54c>
    92e8:	2302      	movs	r3, #2
    92ea:	425b      	negs	r3, r3
    92ec:	469c      	mov	ip, r3
    92ee:	4441      	add	r1, r8
    92f0:	44e2      	add	sl, ip
    92f2:	9b01      	ldr	r3, [sp, #4]
    92f4:	042d      	lsls	r5, r5, #16
    92f6:	1ace      	subs	r6, r1, r3
    92f8:	4651      	mov	r1, sl
    92fa:	4329      	orrs	r1, r5
    92fc:	9d05      	ldr	r5, [sp, #20]
    92fe:	464f      	mov	r7, r9
    9300:	002a      	movs	r2, r5
    9302:	040b      	lsls	r3, r1, #16
    9304:	0c08      	lsrs	r0, r1, #16
    9306:	0c1b      	lsrs	r3, r3, #16
    9308:	435a      	muls	r2, r3
    930a:	4345      	muls	r5, r0
    930c:	437b      	muls	r3, r7
    930e:	4378      	muls	r0, r7
    9310:	195b      	adds	r3, r3, r5
    9312:	0c17      	lsrs	r7, r2, #16
    9314:	18fb      	adds	r3, r7, r3
    9316:	429d      	cmp	r5, r3
    9318:	d903      	bls.n	9322 <__aeabi_ddiv+0x3ba>
    931a:	2580      	movs	r5, #128	; 0x80
    931c:	026d      	lsls	r5, r5, #9
    931e:	46ac      	mov	ip, r5
    9320:	4460      	add	r0, ip
    9322:	0c1d      	lsrs	r5, r3, #16
    9324:	0412      	lsls	r2, r2, #16
    9326:	041b      	lsls	r3, r3, #16
    9328:	0c12      	lsrs	r2, r2, #16
    932a:	1828      	adds	r0, r5, r0
    932c:	189b      	adds	r3, r3, r2
    932e:	4286      	cmp	r6, r0
    9330:	d200      	bcs.n	9334 <__aeabi_ddiv+0x3cc>
    9332:	e093      	b.n	945c <__aeabi_ddiv+0x4f4>
    9334:	d100      	bne.n	9338 <__aeabi_ddiv+0x3d0>
    9336:	e08e      	b.n	9456 <__aeabi_ddiv+0x4ee>
    9338:	2301      	movs	r3, #1
    933a:	4319      	orrs	r1, r3
    933c:	4ba0      	ldr	r3, [pc, #640]	; (95c0 <__aeabi_ddiv+0x658>)
    933e:	18e3      	adds	r3, r4, r3
    9340:	2b00      	cmp	r3, #0
    9342:	dc00      	bgt.n	9346 <__aeabi_ddiv+0x3de>
    9344:	e099      	b.n	947a <__aeabi_ddiv+0x512>
    9346:	074a      	lsls	r2, r1, #29
    9348:	d000      	beq.n	934c <__aeabi_ddiv+0x3e4>
    934a:	e09e      	b.n	948a <__aeabi_ddiv+0x522>
    934c:	465a      	mov	r2, fp
    934e:	01d2      	lsls	r2, r2, #7
    9350:	d506      	bpl.n	9360 <__aeabi_ddiv+0x3f8>
    9352:	465a      	mov	r2, fp
    9354:	4b9b      	ldr	r3, [pc, #620]	; (95c4 <__aeabi_ddiv+0x65c>)
    9356:	401a      	ands	r2, r3
    9358:	2380      	movs	r3, #128	; 0x80
    935a:	4693      	mov	fp, r2
    935c:	00db      	lsls	r3, r3, #3
    935e:	18e3      	adds	r3, r4, r3
    9360:	4a99      	ldr	r2, [pc, #612]	; (95c8 <__aeabi_ddiv+0x660>)
    9362:	4293      	cmp	r3, r2
    9364:	dd68      	ble.n	9438 <__aeabi_ddiv+0x4d0>
    9366:	2301      	movs	r3, #1
    9368:	9a02      	ldr	r2, [sp, #8]
    936a:	4c98      	ldr	r4, [pc, #608]	; (95cc <__aeabi_ddiv+0x664>)
    936c:	401a      	ands	r2, r3
    936e:	2300      	movs	r3, #0
    9370:	4694      	mov	ip, r2
    9372:	4698      	mov	r8, r3
    9374:	2200      	movs	r2, #0
    9376:	e6c5      	b.n	9104 <__aeabi_ddiv+0x19c>
    9378:	2280      	movs	r2, #128	; 0x80
    937a:	464b      	mov	r3, r9
    937c:	0312      	lsls	r2, r2, #12
    937e:	4213      	tst	r3, r2
    9380:	d00a      	beq.n	9398 <__aeabi_ddiv+0x430>
    9382:	465b      	mov	r3, fp
    9384:	4213      	tst	r3, r2
    9386:	d106      	bne.n	9396 <__aeabi_ddiv+0x42e>
    9388:	431a      	orrs	r2, r3
    938a:	0312      	lsls	r2, r2, #12
    938c:	0b12      	lsrs	r2, r2, #12
    938e:	46ac      	mov	ip, r5
    9390:	4688      	mov	r8, r1
    9392:	4c8e      	ldr	r4, [pc, #568]	; (95cc <__aeabi_ddiv+0x664>)
    9394:	e6b6      	b.n	9104 <__aeabi_ddiv+0x19c>
    9396:	464b      	mov	r3, r9
    9398:	431a      	orrs	r2, r3
    939a:	0312      	lsls	r2, r2, #12
    939c:	0b12      	lsrs	r2, r2, #12
    939e:	46bc      	mov	ip, r7
    93a0:	4c8a      	ldr	r4, [pc, #552]	; (95cc <__aeabi_ddiv+0x664>)
    93a2:	e6af      	b.n	9104 <__aeabi_ddiv+0x19c>
    93a4:	0003      	movs	r3, r0
    93a6:	465a      	mov	r2, fp
    93a8:	3b28      	subs	r3, #40	; 0x28
    93aa:	409a      	lsls	r2, r3
    93ac:	2300      	movs	r3, #0
    93ae:	4691      	mov	r9, r2
    93b0:	4698      	mov	r8, r3
    93b2:	e657      	b.n	9064 <__aeabi_ddiv+0xfc>
    93b4:	4658      	mov	r0, fp
    93b6:	f000 ff8d 	bl	a2d4 <__clzsi2>
    93ba:	3020      	adds	r0, #32
    93bc:	e640      	b.n	9040 <__aeabi_ddiv+0xd8>
    93be:	0003      	movs	r3, r0
    93c0:	4652      	mov	r2, sl
    93c2:	3b28      	subs	r3, #40	; 0x28
    93c4:	409a      	lsls	r2, r3
    93c6:	2100      	movs	r1, #0
    93c8:	4693      	mov	fp, r2
    93ca:	e677      	b.n	90bc <__aeabi_ddiv+0x154>
    93cc:	f000 ff82 	bl	a2d4 <__clzsi2>
    93d0:	3020      	adds	r0, #32
    93d2:	e65f      	b.n	9094 <__aeabi_ddiv+0x12c>
    93d4:	4588      	cmp	r8, r1
    93d6:	d200      	bcs.n	93da <__aeabi_ddiv+0x472>
    93d8:	e6c7      	b.n	916a <__aeabi_ddiv+0x202>
    93da:	464b      	mov	r3, r9
    93dc:	07de      	lsls	r6, r3, #31
    93de:	085d      	lsrs	r5, r3, #1
    93e0:	4643      	mov	r3, r8
    93e2:	085b      	lsrs	r3, r3, #1
    93e4:	431e      	orrs	r6, r3
    93e6:	4643      	mov	r3, r8
    93e8:	07db      	lsls	r3, r3, #31
    93ea:	469a      	mov	sl, r3
    93ec:	e6c2      	b.n	9174 <__aeabi_ddiv+0x20c>
    93ee:	2500      	movs	r5, #0
    93f0:	4592      	cmp	sl, r2
    93f2:	d300      	bcc.n	93f6 <__aeabi_ddiv+0x48e>
    93f4:	e733      	b.n	925e <__aeabi_ddiv+0x2f6>
    93f6:	9e03      	ldr	r6, [sp, #12]
    93f8:	4659      	mov	r1, fp
    93fa:	46b4      	mov	ip, r6
    93fc:	44e2      	add	sl, ip
    93fe:	45b2      	cmp	sl, r6
    9400:	41ad      	sbcs	r5, r5
    9402:	426d      	negs	r5, r5
    9404:	4445      	add	r5, r8
    9406:	18eb      	adds	r3, r5, r3
    9408:	3901      	subs	r1, #1
    940a:	4598      	cmp	r8, r3
    940c:	d207      	bcs.n	941e <__aeabi_ddiv+0x4b6>
    940e:	4298      	cmp	r0, r3
    9410:	d900      	bls.n	9414 <__aeabi_ddiv+0x4ac>
    9412:	e07f      	b.n	9514 <__aeabi_ddiv+0x5ac>
    9414:	d100      	bne.n	9418 <__aeabi_ddiv+0x4b0>
    9416:	e0bc      	b.n	9592 <__aeabi_ddiv+0x62a>
    9418:	1a1d      	subs	r5, r3, r0
    941a:	468b      	mov	fp, r1
    941c:	e71f      	b.n	925e <__aeabi_ddiv+0x2f6>
    941e:	4598      	cmp	r8, r3
    9420:	d1fa      	bne.n	9418 <__aeabi_ddiv+0x4b0>
    9422:	9d03      	ldr	r5, [sp, #12]
    9424:	4555      	cmp	r5, sl
    9426:	d9f2      	bls.n	940e <__aeabi_ddiv+0x4a6>
    9428:	4643      	mov	r3, r8
    942a:	468b      	mov	fp, r1
    942c:	1a1d      	subs	r5, r3, r0
    942e:	e716      	b.n	925e <__aeabi_ddiv+0x2f6>
    9430:	469b      	mov	fp, r3
    9432:	e6ca      	b.n	91ca <__aeabi_ddiv+0x262>
    9434:	0015      	movs	r5, r2
    9436:	e6e7      	b.n	9208 <__aeabi_ddiv+0x2a0>
    9438:	465a      	mov	r2, fp
    943a:	08c9      	lsrs	r1, r1, #3
    943c:	0752      	lsls	r2, r2, #29
    943e:	430a      	orrs	r2, r1
    9440:	055b      	lsls	r3, r3, #21
    9442:	4690      	mov	r8, r2
    9444:	0d5c      	lsrs	r4, r3, #21
    9446:	465a      	mov	r2, fp
    9448:	2301      	movs	r3, #1
    944a:	9902      	ldr	r1, [sp, #8]
    944c:	0252      	lsls	r2, r2, #9
    944e:	4019      	ands	r1, r3
    9450:	0b12      	lsrs	r2, r2, #12
    9452:	468c      	mov	ip, r1
    9454:	e656      	b.n	9104 <__aeabi_ddiv+0x19c>
    9456:	2b00      	cmp	r3, #0
    9458:	d100      	bne.n	945c <__aeabi_ddiv+0x4f4>
    945a:	e76f      	b.n	933c <__aeabi_ddiv+0x3d4>
    945c:	4446      	add	r6, r8
    945e:	1e4a      	subs	r2, r1, #1
    9460:	45b0      	cmp	r8, r6
    9462:	d929      	bls.n	94b8 <__aeabi_ddiv+0x550>
    9464:	0011      	movs	r1, r2
    9466:	4286      	cmp	r6, r0
    9468:	d000      	beq.n	946c <__aeabi_ddiv+0x504>
    946a:	e765      	b.n	9338 <__aeabi_ddiv+0x3d0>
    946c:	9a03      	ldr	r2, [sp, #12]
    946e:	4293      	cmp	r3, r2
    9470:	d000      	beq.n	9474 <__aeabi_ddiv+0x50c>
    9472:	e761      	b.n	9338 <__aeabi_ddiv+0x3d0>
    9474:	e762      	b.n	933c <__aeabi_ddiv+0x3d4>
    9476:	2101      	movs	r1, #1
    9478:	4249      	negs	r1, r1
    947a:	2001      	movs	r0, #1
    947c:	1ac2      	subs	r2, r0, r3
    947e:	2a38      	cmp	r2, #56	; 0x38
    9480:	dd21      	ble.n	94c6 <__aeabi_ddiv+0x55e>
    9482:	9b02      	ldr	r3, [sp, #8]
    9484:	4003      	ands	r3, r0
    9486:	469c      	mov	ip, r3
    9488:	e638      	b.n	90fc <__aeabi_ddiv+0x194>
    948a:	220f      	movs	r2, #15
    948c:	400a      	ands	r2, r1
    948e:	2a04      	cmp	r2, #4
    9490:	d100      	bne.n	9494 <__aeabi_ddiv+0x52c>
    9492:	e75b      	b.n	934c <__aeabi_ddiv+0x3e4>
    9494:	000a      	movs	r2, r1
    9496:	1d11      	adds	r1, r2, #4
    9498:	4291      	cmp	r1, r2
    949a:	4192      	sbcs	r2, r2
    949c:	4252      	negs	r2, r2
    949e:	4493      	add	fp, r2
    94a0:	e754      	b.n	934c <__aeabi_ddiv+0x3e4>
    94a2:	4b47      	ldr	r3, [pc, #284]	; (95c0 <__aeabi_ddiv+0x658>)
    94a4:	18e3      	adds	r3, r4, r3
    94a6:	2b00      	cmp	r3, #0
    94a8:	dde5      	ble.n	9476 <__aeabi_ddiv+0x50e>
    94aa:	2201      	movs	r2, #1
    94ac:	4252      	negs	r2, r2
    94ae:	e7f2      	b.n	9496 <__aeabi_ddiv+0x52e>
    94b0:	001d      	movs	r5, r3
    94b2:	e6fa      	b.n	92aa <__aeabi_ddiv+0x342>
    94b4:	469a      	mov	sl, r3
    94b6:	e71c      	b.n	92f2 <__aeabi_ddiv+0x38a>
    94b8:	42b0      	cmp	r0, r6
    94ba:	d839      	bhi.n	9530 <__aeabi_ddiv+0x5c8>
    94bc:	d06e      	beq.n	959c <__aeabi_ddiv+0x634>
    94be:	0011      	movs	r1, r2
    94c0:	e73a      	b.n	9338 <__aeabi_ddiv+0x3d0>
    94c2:	9302      	str	r3, [sp, #8]
    94c4:	e73a      	b.n	933c <__aeabi_ddiv+0x3d4>
    94c6:	2a1f      	cmp	r2, #31
    94c8:	dc3c      	bgt.n	9544 <__aeabi_ddiv+0x5dc>
    94ca:	2320      	movs	r3, #32
    94cc:	1a9b      	subs	r3, r3, r2
    94ce:	000c      	movs	r4, r1
    94d0:	4658      	mov	r0, fp
    94d2:	4099      	lsls	r1, r3
    94d4:	4098      	lsls	r0, r3
    94d6:	1e4b      	subs	r3, r1, #1
    94d8:	4199      	sbcs	r1, r3
    94da:	465b      	mov	r3, fp
    94dc:	40d4      	lsrs	r4, r2
    94de:	40d3      	lsrs	r3, r2
    94e0:	4320      	orrs	r0, r4
    94e2:	4308      	orrs	r0, r1
    94e4:	001a      	movs	r2, r3
    94e6:	0743      	lsls	r3, r0, #29
    94e8:	d009      	beq.n	94fe <__aeabi_ddiv+0x596>
    94ea:	230f      	movs	r3, #15
    94ec:	4003      	ands	r3, r0
    94ee:	2b04      	cmp	r3, #4
    94f0:	d005      	beq.n	94fe <__aeabi_ddiv+0x596>
    94f2:	0001      	movs	r1, r0
    94f4:	1d08      	adds	r0, r1, #4
    94f6:	4288      	cmp	r0, r1
    94f8:	419b      	sbcs	r3, r3
    94fa:	425b      	negs	r3, r3
    94fc:	18d2      	adds	r2, r2, r3
    94fe:	0213      	lsls	r3, r2, #8
    9500:	d53a      	bpl.n	9578 <__aeabi_ddiv+0x610>
    9502:	2301      	movs	r3, #1
    9504:	9a02      	ldr	r2, [sp, #8]
    9506:	2401      	movs	r4, #1
    9508:	401a      	ands	r2, r3
    950a:	2300      	movs	r3, #0
    950c:	4694      	mov	ip, r2
    950e:	4698      	mov	r8, r3
    9510:	2200      	movs	r2, #0
    9512:	e5f7      	b.n	9104 <__aeabi_ddiv+0x19c>
    9514:	2102      	movs	r1, #2
    9516:	4249      	negs	r1, r1
    9518:	468c      	mov	ip, r1
    951a:	9d03      	ldr	r5, [sp, #12]
    951c:	44e3      	add	fp, ip
    951e:	46ac      	mov	ip, r5
    9520:	44e2      	add	sl, ip
    9522:	45aa      	cmp	sl, r5
    9524:	41ad      	sbcs	r5, r5
    9526:	426d      	negs	r5, r5
    9528:	4445      	add	r5, r8
    952a:	18ed      	adds	r5, r5, r3
    952c:	1a2d      	subs	r5, r5, r0
    952e:	e696      	b.n	925e <__aeabi_ddiv+0x2f6>
    9530:	1e8a      	subs	r2, r1, #2
    9532:	9903      	ldr	r1, [sp, #12]
    9534:	004d      	lsls	r5, r1, #1
    9536:	428d      	cmp	r5, r1
    9538:	4189      	sbcs	r1, r1
    953a:	4249      	negs	r1, r1
    953c:	4441      	add	r1, r8
    953e:	1876      	adds	r6, r6, r1
    9540:	9503      	str	r5, [sp, #12]
    9542:	e78f      	b.n	9464 <__aeabi_ddiv+0x4fc>
    9544:	201f      	movs	r0, #31
    9546:	4240      	negs	r0, r0
    9548:	1ac3      	subs	r3, r0, r3
    954a:	4658      	mov	r0, fp
    954c:	40d8      	lsrs	r0, r3
    954e:	0003      	movs	r3, r0
    9550:	2a20      	cmp	r2, #32
    9552:	d028      	beq.n	95a6 <__aeabi_ddiv+0x63e>
    9554:	2040      	movs	r0, #64	; 0x40
    9556:	465d      	mov	r5, fp
    9558:	1a82      	subs	r2, r0, r2
    955a:	4095      	lsls	r5, r2
    955c:	4329      	orrs	r1, r5
    955e:	1e4a      	subs	r2, r1, #1
    9560:	4191      	sbcs	r1, r2
    9562:	4319      	orrs	r1, r3
    9564:	2307      	movs	r3, #7
    9566:	2200      	movs	r2, #0
    9568:	400b      	ands	r3, r1
    956a:	d009      	beq.n	9580 <__aeabi_ddiv+0x618>
    956c:	230f      	movs	r3, #15
    956e:	2200      	movs	r2, #0
    9570:	400b      	ands	r3, r1
    9572:	0008      	movs	r0, r1
    9574:	2b04      	cmp	r3, #4
    9576:	d1bd      	bne.n	94f4 <__aeabi_ddiv+0x58c>
    9578:	0001      	movs	r1, r0
    957a:	0753      	lsls	r3, r2, #29
    957c:	0252      	lsls	r2, r2, #9
    957e:	0b12      	lsrs	r2, r2, #12
    9580:	08c9      	lsrs	r1, r1, #3
    9582:	4319      	orrs	r1, r3
    9584:	2301      	movs	r3, #1
    9586:	4688      	mov	r8, r1
    9588:	9902      	ldr	r1, [sp, #8]
    958a:	2400      	movs	r4, #0
    958c:	4019      	ands	r1, r3
    958e:	468c      	mov	ip, r1
    9590:	e5b8      	b.n	9104 <__aeabi_ddiv+0x19c>
    9592:	4552      	cmp	r2, sl
    9594:	d8be      	bhi.n	9514 <__aeabi_ddiv+0x5ac>
    9596:	468b      	mov	fp, r1
    9598:	2500      	movs	r5, #0
    959a:	e660      	b.n	925e <__aeabi_ddiv+0x2f6>
    959c:	9d03      	ldr	r5, [sp, #12]
    959e:	429d      	cmp	r5, r3
    95a0:	d3c6      	bcc.n	9530 <__aeabi_ddiv+0x5c8>
    95a2:	0011      	movs	r1, r2
    95a4:	e762      	b.n	946c <__aeabi_ddiv+0x504>
    95a6:	2500      	movs	r5, #0
    95a8:	e7d8      	b.n	955c <__aeabi_ddiv+0x5f4>
    95aa:	2280      	movs	r2, #128	; 0x80
    95ac:	465b      	mov	r3, fp
    95ae:	0312      	lsls	r2, r2, #12
    95b0:	431a      	orrs	r2, r3
    95b2:	9b01      	ldr	r3, [sp, #4]
    95b4:	0312      	lsls	r2, r2, #12
    95b6:	0b12      	lsrs	r2, r2, #12
    95b8:	469c      	mov	ip, r3
    95ba:	4688      	mov	r8, r1
    95bc:	4c03      	ldr	r4, [pc, #12]	; (95cc <__aeabi_ddiv+0x664>)
    95be:	e5a1      	b.n	9104 <__aeabi_ddiv+0x19c>
    95c0:	000003ff 	.word	0x000003ff
    95c4:	feffffff 	.word	0xfeffffff
    95c8:	000007fe 	.word	0x000007fe
    95cc:	000007ff 	.word	0x000007ff

000095d0 <__aeabi_dmul>:
    95d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    95d2:	4657      	mov	r7, sl
    95d4:	4645      	mov	r5, r8
    95d6:	46de      	mov	lr, fp
    95d8:	464e      	mov	r6, r9
    95da:	b5e0      	push	{r5, r6, r7, lr}
    95dc:	030c      	lsls	r4, r1, #12
    95de:	4698      	mov	r8, r3
    95e0:	004e      	lsls	r6, r1, #1
    95e2:	0b23      	lsrs	r3, r4, #12
    95e4:	b087      	sub	sp, #28
    95e6:	0007      	movs	r7, r0
    95e8:	4692      	mov	sl, r2
    95ea:	469b      	mov	fp, r3
    95ec:	0d76      	lsrs	r6, r6, #21
    95ee:	0fcd      	lsrs	r5, r1, #31
    95f0:	2e00      	cmp	r6, #0
    95f2:	d06b      	beq.n	96cc <__aeabi_dmul+0xfc>
    95f4:	4b6d      	ldr	r3, [pc, #436]	; (97ac <__aeabi_dmul+0x1dc>)
    95f6:	429e      	cmp	r6, r3
    95f8:	d035      	beq.n	9666 <__aeabi_dmul+0x96>
    95fa:	2480      	movs	r4, #128	; 0x80
    95fc:	465b      	mov	r3, fp
    95fe:	0f42      	lsrs	r2, r0, #29
    9600:	0424      	lsls	r4, r4, #16
    9602:	00db      	lsls	r3, r3, #3
    9604:	4314      	orrs	r4, r2
    9606:	431c      	orrs	r4, r3
    9608:	00c3      	lsls	r3, r0, #3
    960a:	4699      	mov	r9, r3
    960c:	4b68      	ldr	r3, [pc, #416]	; (97b0 <__aeabi_dmul+0x1e0>)
    960e:	46a3      	mov	fp, r4
    9610:	469c      	mov	ip, r3
    9612:	2300      	movs	r3, #0
    9614:	2700      	movs	r7, #0
    9616:	4466      	add	r6, ip
    9618:	9302      	str	r3, [sp, #8]
    961a:	4643      	mov	r3, r8
    961c:	031c      	lsls	r4, r3, #12
    961e:	005a      	lsls	r2, r3, #1
    9620:	0fdb      	lsrs	r3, r3, #31
    9622:	4650      	mov	r0, sl
    9624:	0b24      	lsrs	r4, r4, #12
    9626:	0d52      	lsrs	r2, r2, #21
    9628:	4698      	mov	r8, r3
    962a:	d100      	bne.n	962e <__aeabi_dmul+0x5e>
    962c:	e076      	b.n	971c <__aeabi_dmul+0x14c>
    962e:	4b5f      	ldr	r3, [pc, #380]	; (97ac <__aeabi_dmul+0x1dc>)
    9630:	429a      	cmp	r2, r3
    9632:	d06d      	beq.n	9710 <__aeabi_dmul+0x140>
    9634:	2380      	movs	r3, #128	; 0x80
    9636:	0f41      	lsrs	r1, r0, #29
    9638:	041b      	lsls	r3, r3, #16
    963a:	430b      	orrs	r3, r1
    963c:	495c      	ldr	r1, [pc, #368]	; (97b0 <__aeabi_dmul+0x1e0>)
    963e:	00e4      	lsls	r4, r4, #3
    9640:	468c      	mov	ip, r1
    9642:	431c      	orrs	r4, r3
    9644:	00c3      	lsls	r3, r0, #3
    9646:	2000      	movs	r0, #0
    9648:	4462      	add	r2, ip
    964a:	4641      	mov	r1, r8
    964c:	18b6      	adds	r6, r6, r2
    964e:	4069      	eors	r1, r5
    9650:	1c72      	adds	r2, r6, #1
    9652:	9101      	str	r1, [sp, #4]
    9654:	4694      	mov	ip, r2
    9656:	4307      	orrs	r7, r0
    9658:	2f0f      	cmp	r7, #15
    965a:	d900      	bls.n	965e <__aeabi_dmul+0x8e>
    965c:	e0b0      	b.n	97c0 <__aeabi_dmul+0x1f0>
    965e:	4a55      	ldr	r2, [pc, #340]	; (97b4 <__aeabi_dmul+0x1e4>)
    9660:	00bf      	lsls	r7, r7, #2
    9662:	59d2      	ldr	r2, [r2, r7]
    9664:	4697      	mov	pc, r2
    9666:	465b      	mov	r3, fp
    9668:	4303      	orrs	r3, r0
    966a:	4699      	mov	r9, r3
    966c:	d000      	beq.n	9670 <__aeabi_dmul+0xa0>
    966e:	e087      	b.n	9780 <__aeabi_dmul+0x1b0>
    9670:	2300      	movs	r3, #0
    9672:	469b      	mov	fp, r3
    9674:	3302      	adds	r3, #2
    9676:	2708      	movs	r7, #8
    9678:	9302      	str	r3, [sp, #8]
    967a:	e7ce      	b.n	961a <__aeabi_dmul+0x4a>
    967c:	4642      	mov	r2, r8
    967e:	9201      	str	r2, [sp, #4]
    9680:	2802      	cmp	r0, #2
    9682:	d067      	beq.n	9754 <__aeabi_dmul+0x184>
    9684:	2803      	cmp	r0, #3
    9686:	d100      	bne.n	968a <__aeabi_dmul+0xba>
    9688:	e20e      	b.n	9aa8 <__aeabi_dmul+0x4d8>
    968a:	2801      	cmp	r0, #1
    968c:	d000      	beq.n	9690 <__aeabi_dmul+0xc0>
    968e:	e162      	b.n	9956 <__aeabi_dmul+0x386>
    9690:	2300      	movs	r3, #0
    9692:	2400      	movs	r4, #0
    9694:	2200      	movs	r2, #0
    9696:	4699      	mov	r9, r3
    9698:	9901      	ldr	r1, [sp, #4]
    969a:	4001      	ands	r1, r0
    969c:	b2cd      	uxtb	r5, r1
    969e:	2100      	movs	r1, #0
    96a0:	0312      	lsls	r2, r2, #12
    96a2:	0d0b      	lsrs	r3, r1, #20
    96a4:	0b12      	lsrs	r2, r2, #12
    96a6:	051b      	lsls	r3, r3, #20
    96a8:	4313      	orrs	r3, r2
    96aa:	4a43      	ldr	r2, [pc, #268]	; (97b8 <__aeabi_dmul+0x1e8>)
    96ac:	0524      	lsls	r4, r4, #20
    96ae:	4013      	ands	r3, r2
    96b0:	431c      	orrs	r4, r3
    96b2:	0064      	lsls	r4, r4, #1
    96b4:	07ed      	lsls	r5, r5, #31
    96b6:	0864      	lsrs	r4, r4, #1
    96b8:	432c      	orrs	r4, r5
    96ba:	4648      	mov	r0, r9
    96bc:	0021      	movs	r1, r4
    96be:	b007      	add	sp, #28
    96c0:	bc3c      	pop	{r2, r3, r4, r5}
    96c2:	4690      	mov	r8, r2
    96c4:	4699      	mov	r9, r3
    96c6:	46a2      	mov	sl, r4
    96c8:	46ab      	mov	fp, r5
    96ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    96cc:	4303      	orrs	r3, r0
    96ce:	4699      	mov	r9, r3
    96d0:	d04f      	beq.n	9772 <__aeabi_dmul+0x1a2>
    96d2:	465b      	mov	r3, fp
    96d4:	2b00      	cmp	r3, #0
    96d6:	d100      	bne.n	96da <__aeabi_dmul+0x10a>
    96d8:	e189      	b.n	99ee <__aeabi_dmul+0x41e>
    96da:	4658      	mov	r0, fp
    96dc:	f000 fdfa 	bl	a2d4 <__clzsi2>
    96e0:	0003      	movs	r3, r0
    96e2:	3b0b      	subs	r3, #11
    96e4:	2b1c      	cmp	r3, #28
    96e6:	dd00      	ble.n	96ea <__aeabi_dmul+0x11a>
    96e8:	e17a      	b.n	99e0 <__aeabi_dmul+0x410>
    96ea:	221d      	movs	r2, #29
    96ec:	1ad3      	subs	r3, r2, r3
    96ee:	003a      	movs	r2, r7
    96f0:	0001      	movs	r1, r0
    96f2:	465c      	mov	r4, fp
    96f4:	40da      	lsrs	r2, r3
    96f6:	3908      	subs	r1, #8
    96f8:	408c      	lsls	r4, r1
    96fa:	0013      	movs	r3, r2
    96fc:	408f      	lsls	r7, r1
    96fe:	4323      	orrs	r3, r4
    9700:	469b      	mov	fp, r3
    9702:	46b9      	mov	r9, r7
    9704:	2300      	movs	r3, #0
    9706:	4e2d      	ldr	r6, [pc, #180]	; (97bc <__aeabi_dmul+0x1ec>)
    9708:	2700      	movs	r7, #0
    970a:	1a36      	subs	r6, r6, r0
    970c:	9302      	str	r3, [sp, #8]
    970e:	e784      	b.n	961a <__aeabi_dmul+0x4a>
    9710:	4653      	mov	r3, sl
    9712:	4323      	orrs	r3, r4
    9714:	d12a      	bne.n	976c <__aeabi_dmul+0x19c>
    9716:	2400      	movs	r4, #0
    9718:	2002      	movs	r0, #2
    971a:	e796      	b.n	964a <__aeabi_dmul+0x7a>
    971c:	4653      	mov	r3, sl
    971e:	4323      	orrs	r3, r4
    9720:	d020      	beq.n	9764 <__aeabi_dmul+0x194>
    9722:	2c00      	cmp	r4, #0
    9724:	d100      	bne.n	9728 <__aeabi_dmul+0x158>
    9726:	e157      	b.n	99d8 <__aeabi_dmul+0x408>
    9728:	0020      	movs	r0, r4
    972a:	f000 fdd3 	bl	a2d4 <__clzsi2>
    972e:	0003      	movs	r3, r0
    9730:	3b0b      	subs	r3, #11
    9732:	2b1c      	cmp	r3, #28
    9734:	dd00      	ble.n	9738 <__aeabi_dmul+0x168>
    9736:	e149      	b.n	99cc <__aeabi_dmul+0x3fc>
    9738:	211d      	movs	r1, #29
    973a:	1acb      	subs	r3, r1, r3
    973c:	4651      	mov	r1, sl
    973e:	0002      	movs	r2, r0
    9740:	40d9      	lsrs	r1, r3
    9742:	4653      	mov	r3, sl
    9744:	3a08      	subs	r2, #8
    9746:	4094      	lsls	r4, r2
    9748:	4093      	lsls	r3, r2
    974a:	430c      	orrs	r4, r1
    974c:	4a1b      	ldr	r2, [pc, #108]	; (97bc <__aeabi_dmul+0x1ec>)
    974e:	1a12      	subs	r2, r2, r0
    9750:	2000      	movs	r0, #0
    9752:	e77a      	b.n	964a <__aeabi_dmul+0x7a>
    9754:	2501      	movs	r5, #1
    9756:	9b01      	ldr	r3, [sp, #4]
    9758:	4c14      	ldr	r4, [pc, #80]	; (97ac <__aeabi_dmul+0x1dc>)
    975a:	401d      	ands	r5, r3
    975c:	2300      	movs	r3, #0
    975e:	2200      	movs	r2, #0
    9760:	4699      	mov	r9, r3
    9762:	e79c      	b.n	969e <__aeabi_dmul+0xce>
    9764:	2400      	movs	r4, #0
    9766:	2200      	movs	r2, #0
    9768:	2001      	movs	r0, #1
    976a:	e76e      	b.n	964a <__aeabi_dmul+0x7a>
    976c:	4653      	mov	r3, sl
    976e:	2003      	movs	r0, #3
    9770:	e76b      	b.n	964a <__aeabi_dmul+0x7a>
    9772:	2300      	movs	r3, #0
    9774:	469b      	mov	fp, r3
    9776:	3301      	adds	r3, #1
    9778:	2704      	movs	r7, #4
    977a:	2600      	movs	r6, #0
    977c:	9302      	str	r3, [sp, #8]
    977e:	e74c      	b.n	961a <__aeabi_dmul+0x4a>
    9780:	2303      	movs	r3, #3
    9782:	4681      	mov	r9, r0
    9784:	270c      	movs	r7, #12
    9786:	9302      	str	r3, [sp, #8]
    9788:	e747      	b.n	961a <__aeabi_dmul+0x4a>
    978a:	2280      	movs	r2, #128	; 0x80
    978c:	2300      	movs	r3, #0
    978e:	2500      	movs	r5, #0
    9790:	0312      	lsls	r2, r2, #12
    9792:	4699      	mov	r9, r3
    9794:	4c05      	ldr	r4, [pc, #20]	; (97ac <__aeabi_dmul+0x1dc>)
    9796:	e782      	b.n	969e <__aeabi_dmul+0xce>
    9798:	465c      	mov	r4, fp
    979a:	464b      	mov	r3, r9
    979c:	9802      	ldr	r0, [sp, #8]
    979e:	e76f      	b.n	9680 <__aeabi_dmul+0xb0>
    97a0:	465c      	mov	r4, fp
    97a2:	464b      	mov	r3, r9
    97a4:	9501      	str	r5, [sp, #4]
    97a6:	9802      	ldr	r0, [sp, #8]
    97a8:	e76a      	b.n	9680 <__aeabi_dmul+0xb0>
    97aa:	46c0      	nop			; (mov r8, r8)
    97ac:	000007ff 	.word	0x000007ff
    97b0:	fffffc01 	.word	0xfffffc01
    97b4:	0000fe38 	.word	0x0000fe38
    97b8:	800fffff 	.word	0x800fffff
    97bc:	fffffc0d 	.word	0xfffffc0d
    97c0:	464a      	mov	r2, r9
    97c2:	4649      	mov	r1, r9
    97c4:	0c17      	lsrs	r7, r2, #16
    97c6:	0c1a      	lsrs	r2, r3, #16
    97c8:	041b      	lsls	r3, r3, #16
    97ca:	0c1b      	lsrs	r3, r3, #16
    97cc:	0408      	lsls	r0, r1, #16
    97ce:	0019      	movs	r1, r3
    97d0:	0c00      	lsrs	r0, r0, #16
    97d2:	4341      	muls	r1, r0
    97d4:	0015      	movs	r5, r2
    97d6:	4688      	mov	r8, r1
    97d8:	0019      	movs	r1, r3
    97da:	437d      	muls	r5, r7
    97dc:	4379      	muls	r1, r7
    97de:	9503      	str	r5, [sp, #12]
    97e0:	4689      	mov	r9, r1
    97e2:	0029      	movs	r1, r5
    97e4:	0015      	movs	r5, r2
    97e6:	4345      	muls	r5, r0
    97e8:	444d      	add	r5, r9
    97ea:	9502      	str	r5, [sp, #8]
    97ec:	4645      	mov	r5, r8
    97ee:	0c2d      	lsrs	r5, r5, #16
    97f0:	46aa      	mov	sl, r5
    97f2:	9d02      	ldr	r5, [sp, #8]
    97f4:	4455      	add	r5, sl
    97f6:	45a9      	cmp	r9, r5
    97f8:	d906      	bls.n	9808 <__aeabi_dmul+0x238>
    97fa:	468a      	mov	sl, r1
    97fc:	2180      	movs	r1, #128	; 0x80
    97fe:	0249      	lsls	r1, r1, #9
    9800:	4689      	mov	r9, r1
    9802:	44ca      	add	sl, r9
    9804:	4651      	mov	r1, sl
    9806:	9103      	str	r1, [sp, #12]
    9808:	0c29      	lsrs	r1, r5, #16
    980a:	9104      	str	r1, [sp, #16]
    980c:	4641      	mov	r1, r8
    980e:	0409      	lsls	r1, r1, #16
    9810:	042d      	lsls	r5, r5, #16
    9812:	0c09      	lsrs	r1, r1, #16
    9814:	4688      	mov	r8, r1
    9816:	0029      	movs	r1, r5
    9818:	0c25      	lsrs	r5, r4, #16
    981a:	0424      	lsls	r4, r4, #16
    981c:	4441      	add	r1, r8
    981e:	0c24      	lsrs	r4, r4, #16
    9820:	9105      	str	r1, [sp, #20]
    9822:	0021      	movs	r1, r4
    9824:	4341      	muls	r1, r0
    9826:	4688      	mov	r8, r1
    9828:	0021      	movs	r1, r4
    982a:	4379      	muls	r1, r7
    982c:	468a      	mov	sl, r1
    982e:	4368      	muls	r0, r5
    9830:	4641      	mov	r1, r8
    9832:	4450      	add	r0, sl
    9834:	4681      	mov	r9, r0
    9836:	0c08      	lsrs	r0, r1, #16
    9838:	4448      	add	r0, r9
    983a:	436f      	muls	r7, r5
    983c:	4582      	cmp	sl, r0
    983e:	d903      	bls.n	9848 <__aeabi_dmul+0x278>
    9840:	2180      	movs	r1, #128	; 0x80
    9842:	0249      	lsls	r1, r1, #9
    9844:	4689      	mov	r9, r1
    9846:	444f      	add	r7, r9
    9848:	0c01      	lsrs	r1, r0, #16
    984a:	4689      	mov	r9, r1
    984c:	0039      	movs	r1, r7
    984e:	4449      	add	r1, r9
    9850:	9102      	str	r1, [sp, #8]
    9852:	4641      	mov	r1, r8
    9854:	040f      	lsls	r7, r1, #16
    9856:	9904      	ldr	r1, [sp, #16]
    9858:	0c3f      	lsrs	r7, r7, #16
    985a:	4688      	mov	r8, r1
    985c:	0400      	lsls	r0, r0, #16
    985e:	19c0      	adds	r0, r0, r7
    9860:	4480      	add	r8, r0
    9862:	4641      	mov	r1, r8
    9864:	9104      	str	r1, [sp, #16]
    9866:	4659      	mov	r1, fp
    9868:	0c0f      	lsrs	r7, r1, #16
    986a:	0409      	lsls	r1, r1, #16
    986c:	0c09      	lsrs	r1, r1, #16
    986e:	4688      	mov	r8, r1
    9870:	4359      	muls	r1, r3
    9872:	468a      	mov	sl, r1
    9874:	0039      	movs	r1, r7
    9876:	4351      	muls	r1, r2
    9878:	4689      	mov	r9, r1
    987a:	4641      	mov	r1, r8
    987c:	434a      	muls	r2, r1
    987e:	4651      	mov	r1, sl
    9880:	0c09      	lsrs	r1, r1, #16
    9882:	468b      	mov	fp, r1
    9884:	437b      	muls	r3, r7
    9886:	18d2      	adds	r2, r2, r3
    9888:	445a      	add	r2, fp
    988a:	4293      	cmp	r3, r2
    988c:	d903      	bls.n	9896 <__aeabi_dmul+0x2c6>
    988e:	2380      	movs	r3, #128	; 0x80
    9890:	025b      	lsls	r3, r3, #9
    9892:	469b      	mov	fp, r3
    9894:	44d9      	add	r9, fp
    9896:	4651      	mov	r1, sl
    9898:	0409      	lsls	r1, r1, #16
    989a:	0c09      	lsrs	r1, r1, #16
    989c:	468a      	mov	sl, r1
    989e:	4641      	mov	r1, r8
    98a0:	4361      	muls	r1, r4
    98a2:	437c      	muls	r4, r7
    98a4:	0c13      	lsrs	r3, r2, #16
    98a6:	0412      	lsls	r2, r2, #16
    98a8:	444b      	add	r3, r9
    98aa:	4452      	add	r2, sl
    98ac:	46a1      	mov	r9, r4
    98ae:	468a      	mov	sl, r1
    98b0:	003c      	movs	r4, r7
    98b2:	4641      	mov	r1, r8
    98b4:	436c      	muls	r4, r5
    98b6:	434d      	muls	r5, r1
    98b8:	4651      	mov	r1, sl
    98ba:	444d      	add	r5, r9
    98bc:	0c0f      	lsrs	r7, r1, #16
    98be:	197d      	adds	r5, r7, r5
    98c0:	45a9      	cmp	r9, r5
    98c2:	d903      	bls.n	98cc <__aeabi_dmul+0x2fc>
    98c4:	2180      	movs	r1, #128	; 0x80
    98c6:	0249      	lsls	r1, r1, #9
    98c8:	4688      	mov	r8, r1
    98ca:	4444      	add	r4, r8
    98cc:	9f04      	ldr	r7, [sp, #16]
    98ce:	9903      	ldr	r1, [sp, #12]
    98d0:	46b8      	mov	r8, r7
    98d2:	4441      	add	r1, r8
    98d4:	468b      	mov	fp, r1
    98d6:	4583      	cmp	fp, r0
    98d8:	4180      	sbcs	r0, r0
    98da:	4241      	negs	r1, r0
    98dc:	4688      	mov	r8, r1
    98de:	4651      	mov	r1, sl
    98e0:	0408      	lsls	r0, r1, #16
    98e2:	042f      	lsls	r7, r5, #16
    98e4:	0c00      	lsrs	r0, r0, #16
    98e6:	183f      	adds	r7, r7, r0
    98e8:	4658      	mov	r0, fp
    98ea:	9902      	ldr	r1, [sp, #8]
    98ec:	1810      	adds	r0, r2, r0
    98ee:	4689      	mov	r9, r1
    98f0:	4290      	cmp	r0, r2
    98f2:	4192      	sbcs	r2, r2
    98f4:	444f      	add	r7, r9
    98f6:	46ba      	mov	sl, r7
    98f8:	4252      	negs	r2, r2
    98fa:	4699      	mov	r9, r3
    98fc:	4693      	mov	fp, r2
    98fe:	44c2      	add	sl, r8
    9900:	44d1      	add	r9, sl
    9902:	44cb      	add	fp, r9
    9904:	428f      	cmp	r7, r1
    9906:	41bf      	sbcs	r7, r7
    9908:	45c2      	cmp	sl, r8
    990a:	4189      	sbcs	r1, r1
    990c:	4599      	cmp	r9, r3
    990e:	419b      	sbcs	r3, r3
    9910:	4593      	cmp	fp, r2
    9912:	4192      	sbcs	r2, r2
    9914:	427f      	negs	r7, r7
    9916:	4249      	negs	r1, r1
    9918:	0c2d      	lsrs	r5, r5, #16
    991a:	4252      	negs	r2, r2
    991c:	430f      	orrs	r7, r1
    991e:	425b      	negs	r3, r3
    9920:	4313      	orrs	r3, r2
    9922:	197f      	adds	r7, r7, r5
    9924:	18ff      	adds	r7, r7, r3
    9926:	465b      	mov	r3, fp
    9928:	193c      	adds	r4, r7, r4
    992a:	0ddb      	lsrs	r3, r3, #23
    992c:	9a05      	ldr	r2, [sp, #20]
    992e:	0264      	lsls	r4, r4, #9
    9930:	431c      	orrs	r4, r3
    9932:	0243      	lsls	r3, r0, #9
    9934:	4313      	orrs	r3, r2
    9936:	1e5d      	subs	r5, r3, #1
    9938:	41ab      	sbcs	r3, r5
    993a:	465a      	mov	r2, fp
    993c:	0dc0      	lsrs	r0, r0, #23
    993e:	4303      	orrs	r3, r0
    9940:	0252      	lsls	r2, r2, #9
    9942:	4313      	orrs	r3, r2
    9944:	01e2      	lsls	r2, r4, #7
    9946:	d556      	bpl.n	99f6 <__aeabi_dmul+0x426>
    9948:	2001      	movs	r0, #1
    994a:	085a      	lsrs	r2, r3, #1
    994c:	4003      	ands	r3, r0
    994e:	4313      	orrs	r3, r2
    9950:	07e2      	lsls	r2, r4, #31
    9952:	4313      	orrs	r3, r2
    9954:	0864      	lsrs	r4, r4, #1
    9956:	485a      	ldr	r0, [pc, #360]	; (9ac0 <__aeabi_dmul+0x4f0>)
    9958:	4460      	add	r0, ip
    995a:	2800      	cmp	r0, #0
    995c:	dd4d      	ble.n	99fa <__aeabi_dmul+0x42a>
    995e:	075a      	lsls	r2, r3, #29
    9960:	d009      	beq.n	9976 <__aeabi_dmul+0x3a6>
    9962:	220f      	movs	r2, #15
    9964:	401a      	ands	r2, r3
    9966:	2a04      	cmp	r2, #4
    9968:	d005      	beq.n	9976 <__aeabi_dmul+0x3a6>
    996a:	1d1a      	adds	r2, r3, #4
    996c:	429a      	cmp	r2, r3
    996e:	419b      	sbcs	r3, r3
    9970:	425b      	negs	r3, r3
    9972:	18e4      	adds	r4, r4, r3
    9974:	0013      	movs	r3, r2
    9976:	01e2      	lsls	r2, r4, #7
    9978:	d504      	bpl.n	9984 <__aeabi_dmul+0x3b4>
    997a:	2080      	movs	r0, #128	; 0x80
    997c:	4a51      	ldr	r2, [pc, #324]	; (9ac4 <__aeabi_dmul+0x4f4>)
    997e:	00c0      	lsls	r0, r0, #3
    9980:	4014      	ands	r4, r2
    9982:	4460      	add	r0, ip
    9984:	4a50      	ldr	r2, [pc, #320]	; (9ac8 <__aeabi_dmul+0x4f8>)
    9986:	4290      	cmp	r0, r2
    9988:	dd00      	ble.n	998c <__aeabi_dmul+0x3bc>
    998a:	e6e3      	b.n	9754 <__aeabi_dmul+0x184>
    998c:	2501      	movs	r5, #1
    998e:	08db      	lsrs	r3, r3, #3
    9990:	0762      	lsls	r2, r4, #29
    9992:	431a      	orrs	r2, r3
    9994:	0264      	lsls	r4, r4, #9
    9996:	9b01      	ldr	r3, [sp, #4]
    9998:	4691      	mov	r9, r2
    999a:	0b22      	lsrs	r2, r4, #12
    999c:	0544      	lsls	r4, r0, #21
    999e:	0d64      	lsrs	r4, r4, #21
    99a0:	401d      	ands	r5, r3
    99a2:	e67c      	b.n	969e <__aeabi_dmul+0xce>
    99a4:	2280      	movs	r2, #128	; 0x80
    99a6:	4659      	mov	r1, fp
    99a8:	0312      	lsls	r2, r2, #12
    99aa:	4211      	tst	r1, r2
    99ac:	d008      	beq.n	99c0 <__aeabi_dmul+0x3f0>
    99ae:	4214      	tst	r4, r2
    99b0:	d106      	bne.n	99c0 <__aeabi_dmul+0x3f0>
    99b2:	4322      	orrs	r2, r4
    99b4:	0312      	lsls	r2, r2, #12
    99b6:	0b12      	lsrs	r2, r2, #12
    99b8:	4645      	mov	r5, r8
    99ba:	4699      	mov	r9, r3
    99bc:	4c43      	ldr	r4, [pc, #268]	; (9acc <__aeabi_dmul+0x4fc>)
    99be:	e66e      	b.n	969e <__aeabi_dmul+0xce>
    99c0:	465b      	mov	r3, fp
    99c2:	431a      	orrs	r2, r3
    99c4:	0312      	lsls	r2, r2, #12
    99c6:	0b12      	lsrs	r2, r2, #12
    99c8:	4c40      	ldr	r4, [pc, #256]	; (9acc <__aeabi_dmul+0x4fc>)
    99ca:	e668      	b.n	969e <__aeabi_dmul+0xce>
    99cc:	0003      	movs	r3, r0
    99ce:	4654      	mov	r4, sl
    99d0:	3b28      	subs	r3, #40	; 0x28
    99d2:	409c      	lsls	r4, r3
    99d4:	2300      	movs	r3, #0
    99d6:	e6b9      	b.n	974c <__aeabi_dmul+0x17c>
    99d8:	f000 fc7c 	bl	a2d4 <__clzsi2>
    99dc:	3020      	adds	r0, #32
    99de:	e6a6      	b.n	972e <__aeabi_dmul+0x15e>
    99e0:	0003      	movs	r3, r0
    99e2:	3b28      	subs	r3, #40	; 0x28
    99e4:	409f      	lsls	r7, r3
    99e6:	2300      	movs	r3, #0
    99e8:	46bb      	mov	fp, r7
    99ea:	4699      	mov	r9, r3
    99ec:	e68a      	b.n	9704 <__aeabi_dmul+0x134>
    99ee:	f000 fc71 	bl	a2d4 <__clzsi2>
    99f2:	3020      	adds	r0, #32
    99f4:	e674      	b.n	96e0 <__aeabi_dmul+0x110>
    99f6:	46b4      	mov	ip, r6
    99f8:	e7ad      	b.n	9956 <__aeabi_dmul+0x386>
    99fa:	2501      	movs	r5, #1
    99fc:	1a2a      	subs	r2, r5, r0
    99fe:	2a38      	cmp	r2, #56	; 0x38
    9a00:	dd06      	ble.n	9a10 <__aeabi_dmul+0x440>
    9a02:	9b01      	ldr	r3, [sp, #4]
    9a04:	2400      	movs	r4, #0
    9a06:	401d      	ands	r5, r3
    9a08:	2300      	movs	r3, #0
    9a0a:	2200      	movs	r2, #0
    9a0c:	4699      	mov	r9, r3
    9a0e:	e646      	b.n	969e <__aeabi_dmul+0xce>
    9a10:	2a1f      	cmp	r2, #31
    9a12:	dc21      	bgt.n	9a58 <__aeabi_dmul+0x488>
    9a14:	2520      	movs	r5, #32
    9a16:	0020      	movs	r0, r4
    9a18:	1aad      	subs	r5, r5, r2
    9a1a:	001e      	movs	r6, r3
    9a1c:	40ab      	lsls	r3, r5
    9a1e:	40a8      	lsls	r0, r5
    9a20:	40d6      	lsrs	r6, r2
    9a22:	1e5d      	subs	r5, r3, #1
    9a24:	41ab      	sbcs	r3, r5
    9a26:	4330      	orrs	r0, r6
    9a28:	4318      	orrs	r0, r3
    9a2a:	40d4      	lsrs	r4, r2
    9a2c:	0743      	lsls	r3, r0, #29
    9a2e:	d009      	beq.n	9a44 <__aeabi_dmul+0x474>
    9a30:	230f      	movs	r3, #15
    9a32:	4003      	ands	r3, r0
    9a34:	2b04      	cmp	r3, #4
    9a36:	d005      	beq.n	9a44 <__aeabi_dmul+0x474>
    9a38:	0003      	movs	r3, r0
    9a3a:	1d18      	adds	r0, r3, #4
    9a3c:	4298      	cmp	r0, r3
    9a3e:	419b      	sbcs	r3, r3
    9a40:	425b      	negs	r3, r3
    9a42:	18e4      	adds	r4, r4, r3
    9a44:	0223      	lsls	r3, r4, #8
    9a46:	d521      	bpl.n	9a8c <__aeabi_dmul+0x4bc>
    9a48:	2501      	movs	r5, #1
    9a4a:	9b01      	ldr	r3, [sp, #4]
    9a4c:	2401      	movs	r4, #1
    9a4e:	401d      	ands	r5, r3
    9a50:	2300      	movs	r3, #0
    9a52:	2200      	movs	r2, #0
    9a54:	4699      	mov	r9, r3
    9a56:	e622      	b.n	969e <__aeabi_dmul+0xce>
    9a58:	251f      	movs	r5, #31
    9a5a:	0021      	movs	r1, r4
    9a5c:	426d      	negs	r5, r5
    9a5e:	1a28      	subs	r0, r5, r0
    9a60:	40c1      	lsrs	r1, r0
    9a62:	0008      	movs	r0, r1
    9a64:	2a20      	cmp	r2, #32
    9a66:	d01d      	beq.n	9aa4 <__aeabi_dmul+0x4d4>
    9a68:	355f      	adds	r5, #95	; 0x5f
    9a6a:	1aaa      	subs	r2, r5, r2
    9a6c:	4094      	lsls	r4, r2
    9a6e:	4323      	orrs	r3, r4
    9a70:	1e5c      	subs	r4, r3, #1
    9a72:	41a3      	sbcs	r3, r4
    9a74:	2507      	movs	r5, #7
    9a76:	4303      	orrs	r3, r0
    9a78:	401d      	ands	r5, r3
    9a7a:	2200      	movs	r2, #0
    9a7c:	2d00      	cmp	r5, #0
    9a7e:	d009      	beq.n	9a94 <__aeabi_dmul+0x4c4>
    9a80:	220f      	movs	r2, #15
    9a82:	2400      	movs	r4, #0
    9a84:	401a      	ands	r2, r3
    9a86:	0018      	movs	r0, r3
    9a88:	2a04      	cmp	r2, #4
    9a8a:	d1d6      	bne.n	9a3a <__aeabi_dmul+0x46a>
    9a8c:	0003      	movs	r3, r0
    9a8e:	0765      	lsls	r5, r4, #29
    9a90:	0264      	lsls	r4, r4, #9
    9a92:	0b22      	lsrs	r2, r4, #12
    9a94:	08db      	lsrs	r3, r3, #3
    9a96:	432b      	orrs	r3, r5
    9a98:	2501      	movs	r5, #1
    9a9a:	4699      	mov	r9, r3
    9a9c:	9b01      	ldr	r3, [sp, #4]
    9a9e:	2400      	movs	r4, #0
    9aa0:	401d      	ands	r5, r3
    9aa2:	e5fc      	b.n	969e <__aeabi_dmul+0xce>
    9aa4:	2400      	movs	r4, #0
    9aa6:	e7e2      	b.n	9a6e <__aeabi_dmul+0x49e>
    9aa8:	2280      	movs	r2, #128	; 0x80
    9aaa:	2501      	movs	r5, #1
    9aac:	0312      	lsls	r2, r2, #12
    9aae:	4322      	orrs	r2, r4
    9ab0:	9901      	ldr	r1, [sp, #4]
    9ab2:	0312      	lsls	r2, r2, #12
    9ab4:	0b12      	lsrs	r2, r2, #12
    9ab6:	400d      	ands	r5, r1
    9ab8:	4699      	mov	r9, r3
    9aba:	4c04      	ldr	r4, [pc, #16]	; (9acc <__aeabi_dmul+0x4fc>)
    9abc:	e5ef      	b.n	969e <__aeabi_dmul+0xce>
    9abe:	46c0      	nop			; (mov r8, r8)
    9ac0:	000003ff 	.word	0x000003ff
    9ac4:	feffffff 	.word	0xfeffffff
    9ac8:	000007fe 	.word	0x000007fe
    9acc:	000007ff 	.word	0x000007ff

00009ad0 <__aeabi_dsub>:
    9ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
    9ad2:	4646      	mov	r6, r8
    9ad4:	46d6      	mov	lr, sl
    9ad6:	464f      	mov	r7, r9
    9ad8:	030c      	lsls	r4, r1, #12
    9ada:	b5c0      	push	{r6, r7, lr}
    9adc:	0fcd      	lsrs	r5, r1, #31
    9ade:	004e      	lsls	r6, r1, #1
    9ae0:	0a61      	lsrs	r1, r4, #9
    9ae2:	0f44      	lsrs	r4, r0, #29
    9ae4:	430c      	orrs	r4, r1
    9ae6:	00c1      	lsls	r1, r0, #3
    9ae8:	0058      	lsls	r0, r3, #1
    9aea:	0d40      	lsrs	r0, r0, #21
    9aec:	4684      	mov	ip, r0
    9aee:	468a      	mov	sl, r1
    9af0:	000f      	movs	r7, r1
    9af2:	0319      	lsls	r1, r3, #12
    9af4:	0f50      	lsrs	r0, r2, #29
    9af6:	0a49      	lsrs	r1, r1, #9
    9af8:	4301      	orrs	r1, r0
    9afa:	48c6      	ldr	r0, [pc, #792]	; (9e14 <__aeabi_dsub+0x344>)
    9afc:	0d76      	lsrs	r6, r6, #21
    9afe:	46a8      	mov	r8, r5
    9b00:	0fdb      	lsrs	r3, r3, #31
    9b02:	00d2      	lsls	r2, r2, #3
    9b04:	4584      	cmp	ip, r0
    9b06:	d100      	bne.n	9b0a <__aeabi_dsub+0x3a>
    9b08:	e0d8      	b.n	9cbc <__aeabi_dsub+0x1ec>
    9b0a:	2001      	movs	r0, #1
    9b0c:	4043      	eors	r3, r0
    9b0e:	42ab      	cmp	r3, r5
    9b10:	d100      	bne.n	9b14 <__aeabi_dsub+0x44>
    9b12:	e0a6      	b.n	9c62 <__aeabi_dsub+0x192>
    9b14:	4660      	mov	r0, ip
    9b16:	1a35      	subs	r5, r6, r0
    9b18:	2d00      	cmp	r5, #0
    9b1a:	dc00      	bgt.n	9b1e <__aeabi_dsub+0x4e>
    9b1c:	e105      	b.n	9d2a <__aeabi_dsub+0x25a>
    9b1e:	2800      	cmp	r0, #0
    9b20:	d110      	bne.n	9b44 <__aeabi_dsub+0x74>
    9b22:	000b      	movs	r3, r1
    9b24:	4313      	orrs	r3, r2
    9b26:	d100      	bne.n	9b2a <__aeabi_dsub+0x5a>
    9b28:	e0d7      	b.n	9cda <__aeabi_dsub+0x20a>
    9b2a:	1e6b      	subs	r3, r5, #1
    9b2c:	2b00      	cmp	r3, #0
    9b2e:	d000      	beq.n	9b32 <__aeabi_dsub+0x62>
    9b30:	e14b      	b.n	9dca <__aeabi_dsub+0x2fa>
    9b32:	4653      	mov	r3, sl
    9b34:	1a9f      	subs	r7, r3, r2
    9b36:	45ba      	cmp	sl, r7
    9b38:	4180      	sbcs	r0, r0
    9b3a:	1a64      	subs	r4, r4, r1
    9b3c:	4240      	negs	r0, r0
    9b3e:	1a24      	subs	r4, r4, r0
    9b40:	2601      	movs	r6, #1
    9b42:	e01e      	b.n	9b82 <__aeabi_dsub+0xb2>
    9b44:	4bb3      	ldr	r3, [pc, #716]	; (9e14 <__aeabi_dsub+0x344>)
    9b46:	429e      	cmp	r6, r3
    9b48:	d048      	beq.n	9bdc <__aeabi_dsub+0x10c>
    9b4a:	2380      	movs	r3, #128	; 0x80
    9b4c:	041b      	lsls	r3, r3, #16
    9b4e:	4319      	orrs	r1, r3
    9b50:	2d38      	cmp	r5, #56	; 0x38
    9b52:	dd00      	ble.n	9b56 <__aeabi_dsub+0x86>
    9b54:	e119      	b.n	9d8a <__aeabi_dsub+0x2ba>
    9b56:	2d1f      	cmp	r5, #31
    9b58:	dd00      	ble.n	9b5c <__aeabi_dsub+0x8c>
    9b5a:	e14c      	b.n	9df6 <__aeabi_dsub+0x326>
    9b5c:	2320      	movs	r3, #32
    9b5e:	000f      	movs	r7, r1
    9b60:	1b5b      	subs	r3, r3, r5
    9b62:	0010      	movs	r0, r2
    9b64:	409a      	lsls	r2, r3
    9b66:	409f      	lsls	r7, r3
    9b68:	40e8      	lsrs	r0, r5
    9b6a:	1e53      	subs	r3, r2, #1
    9b6c:	419a      	sbcs	r2, r3
    9b6e:	40e9      	lsrs	r1, r5
    9b70:	4307      	orrs	r7, r0
    9b72:	4317      	orrs	r7, r2
    9b74:	4653      	mov	r3, sl
    9b76:	1bdf      	subs	r7, r3, r7
    9b78:	1a61      	subs	r1, r4, r1
    9b7a:	45ba      	cmp	sl, r7
    9b7c:	41a4      	sbcs	r4, r4
    9b7e:	4264      	negs	r4, r4
    9b80:	1b0c      	subs	r4, r1, r4
    9b82:	0223      	lsls	r3, r4, #8
    9b84:	d400      	bmi.n	9b88 <__aeabi_dsub+0xb8>
    9b86:	e0c5      	b.n	9d14 <__aeabi_dsub+0x244>
    9b88:	0264      	lsls	r4, r4, #9
    9b8a:	0a65      	lsrs	r5, r4, #9
    9b8c:	2d00      	cmp	r5, #0
    9b8e:	d100      	bne.n	9b92 <__aeabi_dsub+0xc2>
    9b90:	e0f6      	b.n	9d80 <__aeabi_dsub+0x2b0>
    9b92:	0028      	movs	r0, r5
    9b94:	f000 fb9e 	bl	a2d4 <__clzsi2>
    9b98:	0003      	movs	r3, r0
    9b9a:	3b08      	subs	r3, #8
    9b9c:	2b1f      	cmp	r3, #31
    9b9e:	dd00      	ble.n	9ba2 <__aeabi_dsub+0xd2>
    9ba0:	e0e9      	b.n	9d76 <__aeabi_dsub+0x2a6>
    9ba2:	2220      	movs	r2, #32
    9ba4:	003c      	movs	r4, r7
    9ba6:	1ad2      	subs	r2, r2, r3
    9ba8:	409d      	lsls	r5, r3
    9baa:	40d4      	lsrs	r4, r2
    9bac:	409f      	lsls	r7, r3
    9bae:	4325      	orrs	r5, r4
    9bb0:	429e      	cmp	r6, r3
    9bb2:	dd00      	ble.n	9bb6 <__aeabi_dsub+0xe6>
    9bb4:	e0db      	b.n	9d6e <__aeabi_dsub+0x29e>
    9bb6:	1b9e      	subs	r6, r3, r6
    9bb8:	1c73      	adds	r3, r6, #1
    9bba:	2b1f      	cmp	r3, #31
    9bbc:	dd00      	ble.n	9bc0 <__aeabi_dsub+0xf0>
    9bbe:	e10a      	b.n	9dd6 <__aeabi_dsub+0x306>
    9bc0:	2220      	movs	r2, #32
    9bc2:	0038      	movs	r0, r7
    9bc4:	1ad2      	subs	r2, r2, r3
    9bc6:	0029      	movs	r1, r5
    9bc8:	4097      	lsls	r7, r2
    9bca:	002c      	movs	r4, r5
    9bcc:	4091      	lsls	r1, r2
    9bce:	40d8      	lsrs	r0, r3
    9bd0:	1e7a      	subs	r2, r7, #1
    9bd2:	4197      	sbcs	r7, r2
    9bd4:	40dc      	lsrs	r4, r3
    9bd6:	2600      	movs	r6, #0
    9bd8:	4301      	orrs	r1, r0
    9bda:	430f      	orrs	r7, r1
    9bdc:	077b      	lsls	r3, r7, #29
    9bde:	d009      	beq.n	9bf4 <__aeabi_dsub+0x124>
    9be0:	230f      	movs	r3, #15
    9be2:	403b      	ands	r3, r7
    9be4:	2b04      	cmp	r3, #4
    9be6:	d005      	beq.n	9bf4 <__aeabi_dsub+0x124>
    9be8:	1d3b      	adds	r3, r7, #4
    9bea:	42bb      	cmp	r3, r7
    9bec:	41bf      	sbcs	r7, r7
    9bee:	427f      	negs	r7, r7
    9bf0:	19e4      	adds	r4, r4, r7
    9bf2:	001f      	movs	r7, r3
    9bf4:	0223      	lsls	r3, r4, #8
    9bf6:	d525      	bpl.n	9c44 <__aeabi_dsub+0x174>
    9bf8:	4b86      	ldr	r3, [pc, #536]	; (9e14 <__aeabi_dsub+0x344>)
    9bfa:	3601      	adds	r6, #1
    9bfc:	429e      	cmp	r6, r3
    9bfe:	d100      	bne.n	9c02 <__aeabi_dsub+0x132>
    9c00:	e0af      	b.n	9d62 <__aeabi_dsub+0x292>
    9c02:	4b85      	ldr	r3, [pc, #532]	; (9e18 <__aeabi_dsub+0x348>)
    9c04:	2501      	movs	r5, #1
    9c06:	401c      	ands	r4, r3
    9c08:	4643      	mov	r3, r8
    9c0a:	0762      	lsls	r2, r4, #29
    9c0c:	08ff      	lsrs	r7, r7, #3
    9c0e:	0264      	lsls	r4, r4, #9
    9c10:	0576      	lsls	r6, r6, #21
    9c12:	4317      	orrs	r7, r2
    9c14:	0b24      	lsrs	r4, r4, #12
    9c16:	0d76      	lsrs	r6, r6, #21
    9c18:	401d      	ands	r5, r3
    9c1a:	2100      	movs	r1, #0
    9c1c:	0324      	lsls	r4, r4, #12
    9c1e:	0b23      	lsrs	r3, r4, #12
    9c20:	0d0c      	lsrs	r4, r1, #20
    9c22:	4a7e      	ldr	r2, [pc, #504]	; (9e1c <__aeabi_dsub+0x34c>)
    9c24:	0524      	lsls	r4, r4, #20
    9c26:	431c      	orrs	r4, r3
    9c28:	4014      	ands	r4, r2
    9c2a:	0533      	lsls	r3, r6, #20
    9c2c:	4323      	orrs	r3, r4
    9c2e:	005b      	lsls	r3, r3, #1
    9c30:	07ed      	lsls	r5, r5, #31
    9c32:	085b      	lsrs	r3, r3, #1
    9c34:	432b      	orrs	r3, r5
    9c36:	0038      	movs	r0, r7
    9c38:	0019      	movs	r1, r3
    9c3a:	bc1c      	pop	{r2, r3, r4}
    9c3c:	4690      	mov	r8, r2
    9c3e:	4699      	mov	r9, r3
    9c40:	46a2      	mov	sl, r4
    9c42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9c44:	2501      	movs	r5, #1
    9c46:	4643      	mov	r3, r8
    9c48:	0762      	lsls	r2, r4, #29
    9c4a:	08ff      	lsrs	r7, r7, #3
    9c4c:	4317      	orrs	r7, r2
    9c4e:	08e4      	lsrs	r4, r4, #3
    9c50:	401d      	ands	r5, r3
    9c52:	4b70      	ldr	r3, [pc, #448]	; (9e14 <__aeabi_dsub+0x344>)
    9c54:	429e      	cmp	r6, r3
    9c56:	d036      	beq.n	9cc6 <__aeabi_dsub+0x1f6>
    9c58:	0324      	lsls	r4, r4, #12
    9c5a:	0576      	lsls	r6, r6, #21
    9c5c:	0b24      	lsrs	r4, r4, #12
    9c5e:	0d76      	lsrs	r6, r6, #21
    9c60:	e7db      	b.n	9c1a <__aeabi_dsub+0x14a>
    9c62:	4663      	mov	r3, ip
    9c64:	1af3      	subs	r3, r6, r3
    9c66:	2b00      	cmp	r3, #0
    9c68:	dc00      	bgt.n	9c6c <__aeabi_dsub+0x19c>
    9c6a:	e094      	b.n	9d96 <__aeabi_dsub+0x2c6>
    9c6c:	4660      	mov	r0, ip
    9c6e:	2800      	cmp	r0, #0
    9c70:	d035      	beq.n	9cde <__aeabi_dsub+0x20e>
    9c72:	4868      	ldr	r0, [pc, #416]	; (9e14 <__aeabi_dsub+0x344>)
    9c74:	4286      	cmp	r6, r0
    9c76:	d0b1      	beq.n	9bdc <__aeabi_dsub+0x10c>
    9c78:	2780      	movs	r7, #128	; 0x80
    9c7a:	043f      	lsls	r7, r7, #16
    9c7c:	4339      	orrs	r1, r7
    9c7e:	2b38      	cmp	r3, #56	; 0x38
    9c80:	dc00      	bgt.n	9c84 <__aeabi_dsub+0x1b4>
    9c82:	e0fd      	b.n	9e80 <__aeabi_dsub+0x3b0>
    9c84:	430a      	orrs	r2, r1
    9c86:	0017      	movs	r7, r2
    9c88:	2100      	movs	r1, #0
    9c8a:	1e7a      	subs	r2, r7, #1
    9c8c:	4197      	sbcs	r7, r2
    9c8e:	4457      	add	r7, sl
    9c90:	4557      	cmp	r7, sl
    9c92:	4180      	sbcs	r0, r0
    9c94:	1909      	adds	r1, r1, r4
    9c96:	4244      	negs	r4, r0
    9c98:	190c      	adds	r4, r1, r4
    9c9a:	0223      	lsls	r3, r4, #8
    9c9c:	d53a      	bpl.n	9d14 <__aeabi_dsub+0x244>
    9c9e:	4b5d      	ldr	r3, [pc, #372]	; (9e14 <__aeabi_dsub+0x344>)
    9ca0:	3601      	adds	r6, #1
    9ca2:	429e      	cmp	r6, r3
    9ca4:	d100      	bne.n	9ca8 <__aeabi_dsub+0x1d8>
    9ca6:	e14b      	b.n	9f40 <__aeabi_dsub+0x470>
    9ca8:	2201      	movs	r2, #1
    9caa:	4b5b      	ldr	r3, [pc, #364]	; (9e18 <__aeabi_dsub+0x348>)
    9cac:	401c      	ands	r4, r3
    9cae:	087b      	lsrs	r3, r7, #1
    9cb0:	4017      	ands	r7, r2
    9cb2:	431f      	orrs	r7, r3
    9cb4:	07e2      	lsls	r2, r4, #31
    9cb6:	4317      	orrs	r7, r2
    9cb8:	0864      	lsrs	r4, r4, #1
    9cba:	e78f      	b.n	9bdc <__aeabi_dsub+0x10c>
    9cbc:	0008      	movs	r0, r1
    9cbe:	4310      	orrs	r0, r2
    9cc0:	d000      	beq.n	9cc4 <__aeabi_dsub+0x1f4>
    9cc2:	e724      	b.n	9b0e <__aeabi_dsub+0x3e>
    9cc4:	e721      	b.n	9b0a <__aeabi_dsub+0x3a>
    9cc6:	0023      	movs	r3, r4
    9cc8:	433b      	orrs	r3, r7
    9cca:	d100      	bne.n	9cce <__aeabi_dsub+0x1fe>
    9ccc:	e1b9      	b.n	a042 <__aeabi_dsub+0x572>
    9cce:	2280      	movs	r2, #128	; 0x80
    9cd0:	0312      	lsls	r2, r2, #12
    9cd2:	4314      	orrs	r4, r2
    9cd4:	0324      	lsls	r4, r4, #12
    9cd6:	0b24      	lsrs	r4, r4, #12
    9cd8:	e79f      	b.n	9c1a <__aeabi_dsub+0x14a>
    9cda:	002e      	movs	r6, r5
    9cdc:	e77e      	b.n	9bdc <__aeabi_dsub+0x10c>
    9cde:	0008      	movs	r0, r1
    9ce0:	4310      	orrs	r0, r2
    9ce2:	d100      	bne.n	9ce6 <__aeabi_dsub+0x216>
    9ce4:	e0ca      	b.n	9e7c <__aeabi_dsub+0x3ac>
    9ce6:	1e58      	subs	r0, r3, #1
    9ce8:	4684      	mov	ip, r0
    9cea:	2800      	cmp	r0, #0
    9cec:	d000      	beq.n	9cf0 <__aeabi_dsub+0x220>
    9cee:	e0e7      	b.n	9ec0 <__aeabi_dsub+0x3f0>
    9cf0:	4452      	add	r2, sl
    9cf2:	4552      	cmp	r2, sl
    9cf4:	4180      	sbcs	r0, r0
    9cf6:	1864      	adds	r4, r4, r1
    9cf8:	4240      	negs	r0, r0
    9cfa:	1824      	adds	r4, r4, r0
    9cfc:	0017      	movs	r7, r2
    9cfe:	2601      	movs	r6, #1
    9d00:	0223      	lsls	r3, r4, #8
    9d02:	d507      	bpl.n	9d14 <__aeabi_dsub+0x244>
    9d04:	2602      	movs	r6, #2
    9d06:	e7cf      	b.n	9ca8 <__aeabi_dsub+0x1d8>
    9d08:	4664      	mov	r4, ip
    9d0a:	432c      	orrs	r4, r5
    9d0c:	d100      	bne.n	9d10 <__aeabi_dsub+0x240>
    9d0e:	e1b3      	b.n	a078 <__aeabi_dsub+0x5a8>
    9d10:	002c      	movs	r4, r5
    9d12:	4667      	mov	r7, ip
    9d14:	077b      	lsls	r3, r7, #29
    9d16:	d000      	beq.n	9d1a <__aeabi_dsub+0x24a>
    9d18:	e762      	b.n	9be0 <__aeabi_dsub+0x110>
    9d1a:	0763      	lsls	r3, r4, #29
    9d1c:	08ff      	lsrs	r7, r7, #3
    9d1e:	431f      	orrs	r7, r3
    9d20:	2501      	movs	r5, #1
    9d22:	4643      	mov	r3, r8
    9d24:	08e4      	lsrs	r4, r4, #3
    9d26:	401d      	ands	r5, r3
    9d28:	e793      	b.n	9c52 <__aeabi_dsub+0x182>
    9d2a:	2d00      	cmp	r5, #0
    9d2c:	d178      	bne.n	9e20 <__aeabi_dsub+0x350>
    9d2e:	1c75      	adds	r5, r6, #1
    9d30:	056d      	lsls	r5, r5, #21
    9d32:	0d6d      	lsrs	r5, r5, #21
    9d34:	2d01      	cmp	r5, #1
    9d36:	dc00      	bgt.n	9d3a <__aeabi_dsub+0x26a>
    9d38:	e0f2      	b.n	9f20 <__aeabi_dsub+0x450>
    9d3a:	4650      	mov	r0, sl
    9d3c:	1a80      	subs	r0, r0, r2
    9d3e:	4582      	cmp	sl, r0
    9d40:	41bf      	sbcs	r7, r7
    9d42:	1a65      	subs	r5, r4, r1
    9d44:	427f      	negs	r7, r7
    9d46:	1bed      	subs	r5, r5, r7
    9d48:	4684      	mov	ip, r0
    9d4a:	0228      	lsls	r0, r5, #8
    9d4c:	d400      	bmi.n	9d50 <__aeabi_dsub+0x280>
    9d4e:	e08c      	b.n	9e6a <__aeabi_dsub+0x39a>
    9d50:	4650      	mov	r0, sl
    9d52:	1a17      	subs	r7, r2, r0
    9d54:	42ba      	cmp	r2, r7
    9d56:	4192      	sbcs	r2, r2
    9d58:	1b0c      	subs	r4, r1, r4
    9d5a:	4255      	negs	r5, r2
    9d5c:	1b65      	subs	r5, r4, r5
    9d5e:	4698      	mov	r8, r3
    9d60:	e714      	b.n	9b8c <__aeabi_dsub+0xbc>
    9d62:	2501      	movs	r5, #1
    9d64:	4643      	mov	r3, r8
    9d66:	2400      	movs	r4, #0
    9d68:	401d      	ands	r5, r3
    9d6a:	2700      	movs	r7, #0
    9d6c:	e755      	b.n	9c1a <__aeabi_dsub+0x14a>
    9d6e:	4c2a      	ldr	r4, [pc, #168]	; (9e18 <__aeabi_dsub+0x348>)
    9d70:	1af6      	subs	r6, r6, r3
    9d72:	402c      	ands	r4, r5
    9d74:	e732      	b.n	9bdc <__aeabi_dsub+0x10c>
    9d76:	003d      	movs	r5, r7
    9d78:	3828      	subs	r0, #40	; 0x28
    9d7a:	4085      	lsls	r5, r0
    9d7c:	2700      	movs	r7, #0
    9d7e:	e717      	b.n	9bb0 <__aeabi_dsub+0xe0>
    9d80:	0038      	movs	r0, r7
    9d82:	f000 faa7 	bl	a2d4 <__clzsi2>
    9d86:	3020      	adds	r0, #32
    9d88:	e706      	b.n	9b98 <__aeabi_dsub+0xc8>
    9d8a:	430a      	orrs	r2, r1
    9d8c:	0017      	movs	r7, r2
    9d8e:	2100      	movs	r1, #0
    9d90:	1e7a      	subs	r2, r7, #1
    9d92:	4197      	sbcs	r7, r2
    9d94:	e6ee      	b.n	9b74 <__aeabi_dsub+0xa4>
    9d96:	2b00      	cmp	r3, #0
    9d98:	d000      	beq.n	9d9c <__aeabi_dsub+0x2cc>
    9d9a:	e0e5      	b.n	9f68 <__aeabi_dsub+0x498>
    9d9c:	1c73      	adds	r3, r6, #1
    9d9e:	469c      	mov	ip, r3
    9da0:	055b      	lsls	r3, r3, #21
    9da2:	0d5b      	lsrs	r3, r3, #21
    9da4:	2b01      	cmp	r3, #1
    9da6:	dc00      	bgt.n	9daa <__aeabi_dsub+0x2da>
    9da8:	e09f      	b.n	9eea <__aeabi_dsub+0x41a>
    9daa:	4b1a      	ldr	r3, [pc, #104]	; (9e14 <__aeabi_dsub+0x344>)
    9dac:	459c      	cmp	ip, r3
    9dae:	d100      	bne.n	9db2 <__aeabi_dsub+0x2e2>
    9db0:	e0c5      	b.n	9f3e <__aeabi_dsub+0x46e>
    9db2:	4452      	add	r2, sl
    9db4:	4552      	cmp	r2, sl
    9db6:	4180      	sbcs	r0, r0
    9db8:	1864      	adds	r4, r4, r1
    9dba:	4240      	negs	r0, r0
    9dbc:	1824      	adds	r4, r4, r0
    9dbe:	07e7      	lsls	r7, r4, #31
    9dc0:	0852      	lsrs	r2, r2, #1
    9dc2:	4317      	orrs	r7, r2
    9dc4:	0864      	lsrs	r4, r4, #1
    9dc6:	4666      	mov	r6, ip
    9dc8:	e708      	b.n	9bdc <__aeabi_dsub+0x10c>
    9dca:	4812      	ldr	r0, [pc, #72]	; (9e14 <__aeabi_dsub+0x344>)
    9dcc:	4285      	cmp	r5, r0
    9dce:	d100      	bne.n	9dd2 <__aeabi_dsub+0x302>
    9dd0:	e085      	b.n	9ede <__aeabi_dsub+0x40e>
    9dd2:	001d      	movs	r5, r3
    9dd4:	e6bc      	b.n	9b50 <__aeabi_dsub+0x80>
    9dd6:	0029      	movs	r1, r5
    9dd8:	3e1f      	subs	r6, #31
    9dda:	40f1      	lsrs	r1, r6
    9ddc:	2b20      	cmp	r3, #32
    9dde:	d100      	bne.n	9de2 <__aeabi_dsub+0x312>
    9de0:	e07f      	b.n	9ee2 <__aeabi_dsub+0x412>
    9de2:	2240      	movs	r2, #64	; 0x40
    9de4:	1ad3      	subs	r3, r2, r3
    9de6:	409d      	lsls	r5, r3
    9de8:	432f      	orrs	r7, r5
    9dea:	1e7d      	subs	r5, r7, #1
    9dec:	41af      	sbcs	r7, r5
    9dee:	2400      	movs	r4, #0
    9df0:	430f      	orrs	r7, r1
    9df2:	2600      	movs	r6, #0
    9df4:	e78e      	b.n	9d14 <__aeabi_dsub+0x244>
    9df6:	002b      	movs	r3, r5
    9df8:	000f      	movs	r7, r1
    9dfa:	3b20      	subs	r3, #32
    9dfc:	40df      	lsrs	r7, r3
    9dfe:	2d20      	cmp	r5, #32
    9e00:	d071      	beq.n	9ee6 <__aeabi_dsub+0x416>
    9e02:	2340      	movs	r3, #64	; 0x40
    9e04:	1b5d      	subs	r5, r3, r5
    9e06:	40a9      	lsls	r1, r5
    9e08:	430a      	orrs	r2, r1
    9e0a:	1e51      	subs	r1, r2, #1
    9e0c:	418a      	sbcs	r2, r1
    9e0e:	2100      	movs	r1, #0
    9e10:	4317      	orrs	r7, r2
    9e12:	e6af      	b.n	9b74 <__aeabi_dsub+0xa4>
    9e14:	000007ff 	.word	0x000007ff
    9e18:	ff7fffff 	.word	0xff7fffff
    9e1c:	800fffff 	.word	0x800fffff
    9e20:	2e00      	cmp	r6, #0
    9e22:	d03e      	beq.n	9ea2 <__aeabi_dsub+0x3d2>
    9e24:	4eb3      	ldr	r6, [pc, #716]	; (a0f4 <__aeabi_dsub+0x624>)
    9e26:	45b4      	cmp	ip, r6
    9e28:	d045      	beq.n	9eb6 <__aeabi_dsub+0x3e6>
    9e2a:	2680      	movs	r6, #128	; 0x80
    9e2c:	0436      	lsls	r6, r6, #16
    9e2e:	426d      	negs	r5, r5
    9e30:	4334      	orrs	r4, r6
    9e32:	2d38      	cmp	r5, #56	; 0x38
    9e34:	dd00      	ble.n	9e38 <__aeabi_dsub+0x368>
    9e36:	e0a8      	b.n	9f8a <__aeabi_dsub+0x4ba>
    9e38:	2d1f      	cmp	r5, #31
    9e3a:	dd00      	ble.n	9e3e <__aeabi_dsub+0x36e>
    9e3c:	e11f      	b.n	a07e <__aeabi_dsub+0x5ae>
    9e3e:	2620      	movs	r6, #32
    9e40:	0027      	movs	r7, r4
    9e42:	4650      	mov	r0, sl
    9e44:	1b76      	subs	r6, r6, r5
    9e46:	40b7      	lsls	r7, r6
    9e48:	40e8      	lsrs	r0, r5
    9e4a:	4307      	orrs	r7, r0
    9e4c:	4650      	mov	r0, sl
    9e4e:	40b0      	lsls	r0, r6
    9e50:	1e46      	subs	r6, r0, #1
    9e52:	41b0      	sbcs	r0, r6
    9e54:	40ec      	lsrs	r4, r5
    9e56:	4338      	orrs	r0, r7
    9e58:	1a17      	subs	r7, r2, r0
    9e5a:	42ba      	cmp	r2, r7
    9e5c:	4192      	sbcs	r2, r2
    9e5e:	1b0c      	subs	r4, r1, r4
    9e60:	4252      	negs	r2, r2
    9e62:	1aa4      	subs	r4, r4, r2
    9e64:	4666      	mov	r6, ip
    9e66:	4698      	mov	r8, r3
    9e68:	e68b      	b.n	9b82 <__aeabi_dsub+0xb2>
    9e6a:	4664      	mov	r4, ip
    9e6c:	4667      	mov	r7, ip
    9e6e:	432c      	orrs	r4, r5
    9e70:	d000      	beq.n	9e74 <__aeabi_dsub+0x3a4>
    9e72:	e68b      	b.n	9b8c <__aeabi_dsub+0xbc>
    9e74:	2500      	movs	r5, #0
    9e76:	2600      	movs	r6, #0
    9e78:	2700      	movs	r7, #0
    9e7a:	e6ea      	b.n	9c52 <__aeabi_dsub+0x182>
    9e7c:	001e      	movs	r6, r3
    9e7e:	e6ad      	b.n	9bdc <__aeabi_dsub+0x10c>
    9e80:	2b1f      	cmp	r3, #31
    9e82:	dc60      	bgt.n	9f46 <__aeabi_dsub+0x476>
    9e84:	2720      	movs	r7, #32
    9e86:	1af8      	subs	r0, r7, r3
    9e88:	000f      	movs	r7, r1
    9e8a:	4684      	mov	ip, r0
    9e8c:	4087      	lsls	r7, r0
    9e8e:	0010      	movs	r0, r2
    9e90:	40d8      	lsrs	r0, r3
    9e92:	4307      	orrs	r7, r0
    9e94:	4660      	mov	r0, ip
    9e96:	4082      	lsls	r2, r0
    9e98:	1e50      	subs	r0, r2, #1
    9e9a:	4182      	sbcs	r2, r0
    9e9c:	40d9      	lsrs	r1, r3
    9e9e:	4317      	orrs	r7, r2
    9ea0:	e6f5      	b.n	9c8e <__aeabi_dsub+0x1be>
    9ea2:	0026      	movs	r6, r4
    9ea4:	4650      	mov	r0, sl
    9ea6:	4306      	orrs	r6, r0
    9ea8:	d005      	beq.n	9eb6 <__aeabi_dsub+0x3e6>
    9eaa:	43ed      	mvns	r5, r5
    9eac:	2d00      	cmp	r5, #0
    9eae:	d0d3      	beq.n	9e58 <__aeabi_dsub+0x388>
    9eb0:	4e90      	ldr	r6, [pc, #576]	; (a0f4 <__aeabi_dsub+0x624>)
    9eb2:	45b4      	cmp	ip, r6
    9eb4:	d1bd      	bne.n	9e32 <__aeabi_dsub+0x362>
    9eb6:	000c      	movs	r4, r1
    9eb8:	0017      	movs	r7, r2
    9eba:	4666      	mov	r6, ip
    9ebc:	4698      	mov	r8, r3
    9ebe:	e68d      	b.n	9bdc <__aeabi_dsub+0x10c>
    9ec0:	488c      	ldr	r0, [pc, #560]	; (a0f4 <__aeabi_dsub+0x624>)
    9ec2:	4283      	cmp	r3, r0
    9ec4:	d00b      	beq.n	9ede <__aeabi_dsub+0x40e>
    9ec6:	4663      	mov	r3, ip
    9ec8:	e6d9      	b.n	9c7e <__aeabi_dsub+0x1ae>
    9eca:	2d00      	cmp	r5, #0
    9ecc:	d000      	beq.n	9ed0 <__aeabi_dsub+0x400>
    9ece:	e096      	b.n	9ffe <__aeabi_dsub+0x52e>
    9ed0:	0008      	movs	r0, r1
    9ed2:	4310      	orrs	r0, r2
    9ed4:	d100      	bne.n	9ed8 <__aeabi_dsub+0x408>
    9ed6:	e0e2      	b.n	a09e <__aeabi_dsub+0x5ce>
    9ed8:	000c      	movs	r4, r1
    9eda:	0017      	movs	r7, r2
    9edc:	4698      	mov	r8, r3
    9ede:	4e85      	ldr	r6, [pc, #532]	; (a0f4 <__aeabi_dsub+0x624>)
    9ee0:	e67c      	b.n	9bdc <__aeabi_dsub+0x10c>
    9ee2:	2500      	movs	r5, #0
    9ee4:	e780      	b.n	9de8 <__aeabi_dsub+0x318>
    9ee6:	2100      	movs	r1, #0
    9ee8:	e78e      	b.n	9e08 <__aeabi_dsub+0x338>
    9eea:	0023      	movs	r3, r4
    9eec:	4650      	mov	r0, sl
    9eee:	4303      	orrs	r3, r0
    9ef0:	2e00      	cmp	r6, #0
    9ef2:	d000      	beq.n	9ef6 <__aeabi_dsub+0x426>
    9ef4:	e0a8      	b.n	a048 <__aeabi_dsub+0x578>
    9ef6:	2b00      	cmp	r3, #0
    9ef8:	d100      	bne.n	9efc <__aeabi_dsub+0x42c>
    9efa:	e0de      	b.n	a0ba <__aeabi_dsub+0x5ea>
    9efc:	000b      	movs	r3, r1
    9efe:	4313      	orrs	r3, r2
    9f00:	d100      	bne.n	9f04 <__aeabi_dsub+0x434>
    9f02:	e66b      	b.n	9bdc <__aeabi_dsub+0x10c>
    9f04:	4452      	add	r2, sl
    9f06:	4552      	cmp	r2, sl
    9f08:	4180      	sbcs	r0, r0
    9f0a:	1864      	adds	r4, r4, r1
    9f0c:	4240      	negs	r0, r0
    9f0e:	1824      	adds	r4, r4, r0
    9f10:	0017      	movs	r7, r2
    9f12:	0223      	lsls	r3, r4, #8
    9f14:	d400      	bmi.n	9f18 <__aeabi_dsub+0x448>
    9f16:	e6fd      	b.n	9d14 <__aeabi_dsub+0x244>
    9f18:	4b77      	ldr	r3, [pc, #476]	; (a0f8 <__aeabi_dsub+0x628>)
    9f1a:	4666      	mov	r6, ip
    9f1c:	401c      	ands	r4, r3
    9f1e:	e65d      	b.n	9bdc <__aeabi_dsub+0x10c>
    9f20:	0025      	movs	r5, r4
    9f22:	4650      	mov	r0, sl
    9f24:	4305      	orrs	r5, r0
    9f26:	2e00      	cmp	r6, #0
    9f28:	d1cf      	bne.n	9eca <__aeabi_dsub+0x3fa>
    9f2a:	2d00      	cmp	r5, #0
    9f2c:	d14f      	bne.n	9fce <__aeabi_dsub+0x4fe>
    9f2e:	000c      	movs	r4, r1
    9f30:	4314      	orrs	r4, r2
    9f32:	d100      	bne.n	9f36 <__aeabi_dsub+0x466>
    9f34:	e0a0      	b.n	a078 <__aeabi_dsub+0x5a8>
    9f36:	000c      	movs	r4, r1
    9f38:	0017      	movs	r7, r2
    9f3a:	4698      	mov	r8, r3
    9f3c:	e64e      	b.n	9bdc <__aeabi_dsub+0x10c>
    9f3e:	4666      	mov	r6, ip
    9f40:	2400      	movs	r4, #0
    9f42:	2700      	movs	r7, #0
    9f44:	e685      	b.n	9c52 <__aeabi_dsub+0x182>
    9f46:	001f      	movs	r7, r3
    9f48:	0008      	movs	r0, r1
    9f4a:	3f20      	subs	r7, #32
    9f4c:	40f8      	lsrs	r0, r7
    9f4e:	0007      	movs	r7, r0
    9f50:	2b20      	cmp	r3, #32
    9f52:	d100      	bne.n	9f56 <__aeabi_dsub+0x486>
    9f54:	e08e      	b.n	a074 <__aeabi_dsub+0x5a4>
    9f56:	2040      	movs	r0, #64	; 0x40
    9f58:	1ac3      	subs	r3, r0, r3
    9f5a:	4099      	lsls	r1, r3
    9f5c:	430a      	orrs	r2, r1
    9f5e:	1e51      	subs	r1, r2, #1
    9f60:	418a      	sbcs	r2, r1
    9f62:	2100      	movs	r1, #0
    9f64:	4317      	orrs	r7, r2
    9f66:	e692      	b.n	9c8e <__aeabi_dsub+0x1be>
    9f68:	2e00      	cmp	r6, #0
    9f6a:	d114      	bne.n	9f96 <__aeabi_dsub+0x4c6>
    9f6c:	0026      	movs	r6, r4
    9f6e:	4650      	mov	r0, sl
    9f70:	4306      	orrs	r6, r0
    9f72:	d062      	beq.n	a03a <__aeabi_dsub+0x56a>
    9f74:	43db      	mvns	r3, r3
    9f76:	2b00      	cmp	r3, #0
    9f78:	d15c      	bne.n	a034 <__aeabi_dsub+0x564>
    9f7a:	1887      	adds	r7, r0, r2
    9f7c:	4297      	cmp	r7, r2
    9f7e:	4192      	sbcs	r2, r2
    9f80:	1864      	adds	r4, r4, r1
    9f82:	4252      	negs	r2, r2
    9f84:	18a4      	adds	r4, r4, r2
    9f86:	4666      	mov	r6, ip
    9f88:	e687      	b.n	9c9a <__aeabi_dsub+0x1ca>
    9f8a:	4650      	mov	r0, sl
    9f8c:	4320      	orrs	r0, r4
    9f8e:	1e44      	subs	r4, r0, #1
    9f90:	41a0      	sbcs	r0, r4
    9f92:	2400      	movs	r4, #0
    9f94:	e760      	b.n	9e58 <__aeabi_dsub+0x388>
    9f96:	4e57      	ldr	r6, [pc, #348]	; (a0f4 <__aeabi_dsub+0x624>)
    9f98:	45b4      	cmp	ip, r6
    9f9a:	d04e      	beq.n	a03a <__aeabi_dsub+0x56a>
    9f9c:	2680      	movs	r6, #128	; 0x80
    9f9e:	0436      	lsls	r6, r6, #16
    9fa0:	425b      	negs	r3, r3
    9fa2:	4334      	orrs	r4, r6
    9fa4:	2b38      	cmp	r3, #56	; 0x38
    9fa6:	dd00      	ble.n	9faa <__aeabi_dsub+0x4da>
    9fa8:	e07f      	b.n	a0aa <__aeabi_dsub+0x5da>
    9faa:	2b1f      	cmp	r3, #31
    9fac:	dd00      	ble.n	9fb0 <__aeabi_dsub+0x4e0>
    9fae:	e08b      	b.n	a0c8 <__aeabi_dsub+0x5f8>
    9fb0:	2620      	movs	r6, #32
    9fb2:	0027      	movs	r7, r4
    9fb4:	4650      	mov	r0, sl
    9fb6:	1af6      	subs	r6, r6, r3
    9fb8:	40b7      	lsls	r7, r6
    9fba:	40d8      	lsrs	r0, r3
    9fbc:	4307      	orrs	r7, r0
    9fbe:	4650      	mov	r0, sl
    9fc0:	40b0      	lsls	r0, r6
    9fc2:	1e46      	subs	r6, r0, #1
    9fc4:	41b0      	sbcs	r0, r6
    9fc6:	4307      	orrs	r7, r0
    9fc8:	40dc      	lsrs	r4, r3
    9fca:	18bf      	adds	r7, r7, r2
    9fcc:	e7d6      	b.n	9f7c <__aeabi_dsub+0x4ac>
    9fce:	000d      	movs	r5, r1
    9fd0:	4315      	orrs	r5, r2
    9fd2:	d100      	bne.n	9fd6 <__aeabi_dsub+0x506>
    9fd4:	e602      	b.n	9bdc <__aeabi_dsub+0x10c>
    9fd6:	4650      	mov	r0, sl
    9fd8:	1a80      	subs	r0, r0, r2
    9fda:	4582      	cmp	sl, r0
    9fdc:	41bf      	sbcs	r7, r7
    9fde:	1a65      	subs	r5, r4, r1
    9fe0:	427f      	negs	r7, r7
    9fe2:	1bed      	subs	r5, r5, r7
    9fe4:	4684      	mov	ip, r0
    9fe6:	0228      	lsls	r0, r5, #8
    9fe8:	d400      	bmi.n	9fec <__aeabi_dsub+0x51c>
    9fea:	e68d      	b.n	9d08 <__aeabi_dsub+0x238>
    9fec:	4650      	mov	r0, sl
    9fee:	1a17      	subs	r7, r2, r0
    9ff0:	42ba      	cmp	r2, r7
    9ff2:	4192      	sbcs	r2, r2
    9ff4:	1b0c      	subs	r4, r1, r4
    9ff6:	4252      	negs	r2, r2
    9ff8:	1aa4      	subs	r4, r4, r2
    9ffa:	4698      	mov	r8, r3
    9ffc:	e5ee      	b.n	9bdc <__aeabi_dsub+0x10c>
    9ffe:	000d      	movs	r5, r1
    a000:	4315      	orrs	r5, r2
    a002:	d100      	bne.n	a006 <__aeabi_dsub+0x536>
    a004:	e76b      	b.n	9ede <__aeabi_dsub+0x40e>
    a006:	4650      	mov	r0, sl
    a008:	0767      	lsls	r7, r4, #29
    a00a:	08c0      	lsrs	r0, r0, #3
    a00c:	4307      	orrs	r7, r0
    a00e:	2080      	movs	r0, #128	; 0x80
    a010:	08e4      	lsrs	r4, r4, #3
    a012:	0300      	lsls	r0, r0, #12
    a014:	4204      	tst	r4, r0
    a016:	d007      	beq.n	a028 <__aeabi_dsub+0x558>
    a018:	08cd      	lsrs	r5, r1, #3
    a01a:	4205      	tst	r5, r0
    a01c:	d104      	bne.n	a028 <__aeabi_dsub+0x558>
    a01e:	002c      	movs	r4, r5
    a020:	4698      	mov	r8, r3
    a022:	08d7      	lsrs	r7, r2, #3
    a024:	0749      	lsls	r1, r1, #29
    a026:	430f      	orrs	r7, r1
    a028:	0f7b      	lsrs	r3, r7, #29
    a02a:	00e4      	lsls	r4, r4, #3
    a02c:	431c      	orrs	r4, r3
    a02e:	00ff      	lsls	r7, r7, #3
    a030:	4e30      	ldr	r6, [pc, #192]	; (a0f4 <__aeabi_dsub+0x624>)
    a032:	e5d3      	b.n	9bdc <__aeabi_dsub+0x10c>
    a034:	4e2f      	ldr	r6, [pc, #188]	; (a0f4 <__aeabi_dsub+0x624>)
    a036:	45b4      	cmp	ip, r6
    a038:	d1b4      	bne.n	9fa4 <__aeabi_dsub+0x4d4>
    a03a:	000c      	movs	r4, r1
    a03c:	0017      	movs	r7, r2
    a03e:	4666      	mov	r6, ip
    a040:	e5cc      	b.n	9bdc <__aeabi_dsub+0x10c>
    a042:	2700      	movs	r7, #0
    a044:	2400      	movs	r4, #0
    a046:	e5e8      	b.n	9c1a <__aeabi_dsub+0x14a>
    a048:	2b00      	cmp	r3, #0
    a04a:	d039      	beq.n	a0c0 <__aeabi_dsub+0x5f0>
    a04c:	000b      	movs	r3, r1
    a04e:	4313      	orrs	r3, r2
    a050:	d100      	bne.n	a054 <__aeabi_dsub+0x584>
    a052:	e744      	b.n	9ede <__aeabi_dsub+0x40e>
    a054:	08c0      	lsrs	r0, r0, #3
    a056:	0767      	lsls	r7, r4, #29
    a058:	4307      	orrs	r7, r0
    a05a:	2080      	movs	r0, #128	; 0x80
    a05c:	08e4      	lsrs	r4, r4, #3
    a05e:	0300      	lsls	r0, r0, #12
    a060:	4204      	tst	r4, r0
    a062:	d0e1      	beq.n	a028 <__aeabi_dsub+0x558>
    a064:	08cb      	lsrs	r3, r1, #3
    a066:	4203      	tst	r3, r0
    a068:	d1de      	bne.n	a028 <__aeabi_dsub+0x558>
    a06a:	08d7      	lsrs	r7, r2, #3
    a06c:	0749      	lsls	r1, r1, #29
    a06e:	430f      	orrs	r7, r1
    a070:	001c      	movs	r4, r3
    a072:	e7d9      	b.n	a028 <__aeabi_dsub+0x558>
    a074:	2100      	movs	r1, #0
    a076:	e771      	b.n	9f5c <__aeabi_dsub+0x48c>
    a078:	2500      	movs	r5, #0
    a07a:	2700      	movs	r7, #0
    a07c:	e5e9      	b.n	9c52 <__aeabi_dsub+0x182>
    a07e:	002e      	movs	r6, r5
    a080:	0027      	movs	r7, r4
    a082:	3e20      	subs	r6, #32
    a084:	40f7      	lsrs	r7, r6
    a086:	2d20      	cmp	r5, #32
    a088:	d02f      	beq.n	a0ea <__aeabi_dsub+0x61a>
    a08a:	2640      	movs	r6, #64	; 0x40
    a08c:	1b75      	subs	r5, r6, r5
    a08e:	40ac      	lsls	r4, r5
    a090:	4650      	mov	r0, sl
    a092:	4320      	orrs	r0, r4
    a094:	1e44      	subs	r4, r0, #1
    a096:	41a0      	sbcs	r0, r4
    a098:	2400      	movs	r4, #0
    a09a:	4338      	orrs	r0, r7
    a09c:	e6dc      	b.n	9e58 <__aeabi_dsub+0x388>
    a09e:	2480      	movs	r4, #128	; 0x80
    a0a0:	2500      	movs	r5, #0
    a0a2:	0324      	lsls	r4, r4, #12
    a0a4:	4e13      	ldr	r6, [pc, #76]	; (a0f4 <__aeabi_dsub+0x624>)
    a0a6:	2700      	movs	r7, #0
    a0a8:	e5d3      	b.n	9c52 <__aeabi_dsub+0x182>
    a0aa:	4650      	mov	r0, sl
    a0ac:	4320      	orrs	r0, r4
    a0ae:	0007      	movs	r7, r0
    a0b0:	1e78      	subs	r0, r7, #1
    a0b2:	4187      	sbcs	r7, r0
    a0b4:	2400      	movs	r4, #0
    a0b6:	18bf      	adds	r7, r7, r2
    a0b8:	e760      	b.n	9f7c <__aeabi_dsub+0x4ac>
    a0ba:	000c      	movs	r4, r1
    a0bc:	0017      	movs	r7, r2
    a0be:	e58d      	b.n	9bdc <__aeabi_dsub+0x10c>
    a0c0:	000c      	movs	r4, r1
    a0c2:	0017      	movs	r7, r2
    a0c4:	4e0b      	ldr	r6, [pc, #44]	; (a0f4 <__aeabi_dsub+0x624>)
    a0c6:	e589      	b.n	9bdc <__aeabi_dsub+0x10c>
    a0c8:	001e      	movs	r6, r3
    a0ca:	0027      	movs	r7, r4
    a0cc:	3e20      	subs	r6, #32
    a0ce:	40f7      	lsrs	r7, r6
    a0d0:	2b20      	cmp	r3, #32
    a0d2:	d00c      	beq.n	a0ee <__aeabi_dsub+0x61e>
    a0d4:	2640      	movs	r6, #64	; 0x40
    a0d6:	1af3      	subs	r3, r6, r3
    a0d8:	409c      	lsls	r4, r3
    a0da:	4650      	mov	r0, sl
    a0dc:	4320      	orrs	r0, r4
    a0de:	1e44      	subs	r4, r0, #1
    a0e0:	41a0      	sbcs	r0, r4
    a0e2:	4307      	orrs	r7, r0
    a0e4:	2400      	movs	r4, #0
    a0e6:	18bf      	adds	r7, r7, r2
    a0e8:	e748      	b.n	9f7c <__aeabi_dsub+0x4ac>
    a0ea:	2400      	movs	r4, #0
    a0ec:	e7d0      	b.n	a090 <__aeabi_dsub+0x5c0>
    a0ee:	2400      	movs	r4, #0
    a0f0:	e7f3      	b.n	a0da <__aeabi_dsub+0x60a>
    a0f2:	46c0      	nop			; (mov r8, r8)
    a0f4:	000007ff 	.word	0x000007ff
    a0f8:	ff7fffff 	.word	0xff7fffff

0000a0fc <__aeabi_d2iz>:
    a0fc:	b530      	push	{r4, r5, lr}
    a0fe:	4d13      	ldr	r5, [pc, #76]	; (a14c <__aeabi_d2iz+0x50>)
    a100:	030a      	lsls	r2, r1, #12
    a102:	004b      	lsls	r3, r1, #1
    a104:	0b12      	lsrs	r2, r2, #12
    a106:	0d5b      	lsrs	r3, r3, #21
    a108:	0fc9      	lsrs	r1, r1, #31
    a10a:	2400      	movs	r4, #0
    a10c:	42ab      	cmp	r3, r5
    a10e:	dd10      	ble.n	a132 <__aeabi_d2iz+0x36>
    a110:	4c0f      	ldr	r4, [pc, #60]	; (a150 <__aeabi_d2iz+0x54>)
    a112:	42a3      	cmp	r3, r4
    a114:	dc0f      	bgt.n	a136 <__aeabi_d2iz+0x3a>
    a116:	2480      	movs	r4, #128	; 0x80
    a118:	4d0e      	ldr	r5, [pc, #56]	; (a154 <__aeabi_d2iz+0x58>)
    a11a:	0364      	lsls	r4, r4, #13
    a11c:	4322      	orrs	r2, r4
    a11e:	1aed      	subs	r5, r5, r3
    a120:	2d1f      	cmp	r5, #31
    a122:	dd0b      	ble.n	a13c <__aeabi_d2iz+0x40>
    a124:	480c      	ldr	r0, [pc, #48]	; (a158 <__aeabi_d2iz+0x5c>)
    a126:	1ac3      	subs	r3, r0, r3
    a128:	40da      	lsrs	r2, r3
    a12a:	4254      	negs	r4, r2
    a12c:	2900      	cmp	r1, #0
    a12e:	d100      	bne.n	a132 <__aeabi_d2iz+0x36>
    a130:	0014      	movs	r4, r2
    a132:	0020      	movs	r0, r4
    a134:	bd30      	pop	{r4, r5, pc}
    a136:	4b09      	ldr	r3, [pc, #36]	; (a15c <__aeabi_d2iz+0x60>)
    a138:	18cc      	adds	r4, r1, r3
    a13a:	e7fa      	b.n	a132 <__aeabi_d2iz+0x36>
    a13c:	4c08      	ldr	r4, [pc, #32]	; (a160 <__aeabi_d2iz+0x64>)
    a13e:	40e8      	lsrs	r0, r5
    a140:	46a4      	mov	ip, r4
    a142:	4463      	add	r3, ip
    a144:	409a      	lsls	r2, r3
    a146:	4302      	orrs	r2, r0
    a148:	e7ef      	b.n	a12a <__aeabi_d2iz+0x2e>
    a14a:	46c0      	nop			; (mov r8, r8)
    a14c:	000003fe 	.word	0x000003fe
    a150:	0000041d 	.word	0x0000041d
    a154:	00000433 	.word	0x00000433
    a158:	00000413 	.word	0x00000413
    a15c:	7fffffff 	.word	0x7fffffff
    a160:	fffffbed 	.word	0xfffffbed

0000a164 <__aeabi_i2d>:
    a164:	b570      	push	{r4, r5, r6, lr}
    a166:	2800      	cmp	r0, #0
    a168:	d030      	beq.n	a1cc <__aeabi_i2d+0x68>
    a16a:	17c3      	asrs	r3, r0, #31
    a16c:	18c4      	adds	r4, r0, r3
    a16e:	405c      	eors	r4, r3
    a170:	0fc5      	lsrs	r5, r0, #31
    a172:	0020      	movs	r0, r4
    a174:	f000 f8ae 	bl	a2d4 <__clzsi2>
    a178:	4b17      	ldr	r3, [pc, #92]	; (a1d8 <__aeabi_i2d+0x74>)
    a17a:	4a18      	ldr	r2, [pc, #96]	; (a1dc <__aeabi_i2d+0x78>)
    a17c:	1a1b      	subs	r3, r3, r0
    a17e:	1ad2      	subs	r2, r2, r3
    a180:	2a1f      	cmp	r2, #31
    a182:	dd18      	ble.n	a1b6 <__aeabi_i2d+0x52>
    a184:	4a16      	ldr	r2, [pc, #88]	; (a1e0 <__aeabi_i2d+0x7c>)
    a186:	1ad2      	subs	r2, r2, r3
    a188:	4094      	lsls	r4, r2
    a18a:	2200      	movs	r2, #0
    a18c:	0324      	lsls	r4, r4, #12
    a18e:	055b      	lsls	r3, r3, #21
    a190:	0b24      	lsrs	r4, r4, #12
    a192:	0d5b      	lsrs	r3, r3, #21
    a194:	2100      	movs	r1, #0
    a196:	0010      	movs	r0, r2
    a198:	0324      	lsls	r4, r4, #12
    a19a:	0d0a      	lsrs	r2, r1, #20
    a19c:	0b24      	lsrs	r4, r4, #12
    a19e:	0512      	lsls	r2, r2, #20
    a1a0:	4322      	orrs	r2, r4
    a1a2:	4c10      	ldr	r4, [pc, #64]	; (a1e4 <__aeabi_i2d+0x80>)
    a1a4:	051b      	lsls	r3, r3, #20
    a1a6:	4022      	ands	r2, r4
    a1a8:	4313      	orrs	r3, r2
    a1aa:	005b      	lsls	r3, r3, #1
    a1ac:	07ed      	lsls	r5, r5, #31
    a1ae:	085b      	lsrs	r3, r3, #1
    a1b0:	432b      	orrs	r3, r5
    a1b2:	0019      	movs	r1, r3
    a1b4:	bd70      	pop	{r4, r5, r6, pc}
    a1b6:	0021      	movs	r1, r4
    a1b8:	4091      	lsls	r1, r2
    a1ba:	000a      	movs	r2, r1
    a1bc:	210b      	movs	r1, #11
    a1be:	1a08      	subs	r0, r1, r0
    a1c0:	40c4      	lsrs	r4, r0
    a1c2:	055b      	lsls	r3, r3, #21
    a1c4:	0324      	lsls	r4, r4, #12
    a1c6:	0b24      	lsrs	r4, r4, #12
    a1c8:	0d5b      	lsrs	r3, r3, #21
    a1ca:	e7e3      	b.n	a194 <__aeabi_i2d+0x30>
    a1cc:	2500      	movs	r5, #0
    a1ce:	2300      	movs	r3, #0
    a1d0:	2400      	movs	r4, #0
    a1d2:	2200      	movs	r2, #0
    a1d4:	e7de      	b.n	a194 <__aeabi_i2d+0x30>
    a1d6:	46c0      	nop			; (mov r8, r8)
    a1d8:	0000041e 	.word	0x0000041e
    a1dc:	00000433 	.word	0x00000433
    a1e0:	00000413 	.word	0x00000413
    a1e4:	800fffff 	.word	0x800fffff

0000a1e8 <__aeabi_ui2d>:
    a1e8:	b510      	push	{r4, lr}
    a1ea:	1e04      	subs	r4, r0, #0
    a1ec:	d028      	beq.n	a240 <__aeabi_ui2d+0x58>
    a1ee:	f000 f871 	bl	a2d4 <__clzsi2>
    a1f2:	4b15      	ldr	r3, [pc, #84]	; (a248 <__aeabi_ui2d+0x60>)
    a1f4:	4a15      	ldr	r2, [pc, #84]	; (a24c <__aeabi_ui2d+0x64>)
    a1f6:	1a1b      	subs	r3, r3, r0
    a1f8:	1ad2      	subs	r2, r2, r3
    a1fa:	2a1f      	cmp	r2, #31
    a1fc:	dd15      	ble.n	a22a <__aeabi_ui2d+0x42>
    a1fe:	4a14      	ldr	r2, [pc, #80]	; (a250 <__aeabi_ui2d+0x68>)
    a200:	1ad2      	subs	r2, r2, r3
    a202:	4094      	lsls	r4, r2
    a204:	2200      	movs	r2, #0
    a206:	0324      	lsls	r4, r4, #12
    a208:	055b      	lsls	r3, r3, #21
    a20a:	0b24      	lsrs	r4, r4, #12
    a20c:	0d5b      	lsrs	r3, r3, #21
    a20e:	2100      	movs	r1, #0
    a210:	0010      	movs	r0, r2
    a212:	0324      	lsls	r4, r4, #12
    a214:	0d0a      	lsrs	r2, r1, #20
    a216:	0b24      	lsrs	r4, r4, #12
    a218:	0512      	lsls	r2, r2, #20
    a21a:	4322      	orrs	r2, r4
    a21c:	4c0d      	ldr	r4, [pc, #52]	; (a254 <__aeabi_ui2d+0x6c>)
    a21e:	051b      	lsls	r3, r3, #20
    a220:	4022      	ands	r2, r4
    a222:	4313      	orrs	r3, r2
    a224:	005b      	lsls	r3, r3, #1
    a226:	0859      	lsrs	r1, r3, #1
    a228:	bd10      	pop	{r4, pc}
    a22a:	0021      	movs	r1, r4
    a22c:	4091      	lsls	r1, r2
    a22e:	000a      	movs	r2, r1
    a230:	210b      	movs	r1, #11
    a232:	1a08      	subs	r0, r1, r0
    a234:	40c4      	lsrs	r4, r0
    a236:	055b      	lsls	r3, r3, #21
    a238:	0324      	lsls	r4, r4, #12
    a23a:	0b24      	lsrs	r4, r4, #12
    a23c:	0d5b      	lsrs	r3, r3, #21
    a23e:	e7e6      	b.n	a20e <__aeabi_ui2d+0x26>
    a240:	2300      	movs	r3, #0
    a242:	2400      	movs	r4, #0
    a244:	2200      	movs	r2, #0
    a246:	e7e2      	b.n	a20e <__aeabi_ui2d+0x26>
    a248:	0000041e 	.word	0x0000041e
    a24c:	00000433 	.word	0x00000433
    a250:	00000413 	.word	0x00000413
    a254:	800fffff 	.word	0x800fffff

0000a258 <__aeabi_cdrcmple>:
    a258:	4684      	mov	ip, r0
    a25a:	1c10      	adds	r0, r2, #0
    a25c:	4662      	mov	r2, ip
    a25e:	468c      	mov	ip, r1
    a260:	1c19      	adds	r1, r3, #0
    a262:	4663      	mov	r3, ip
    a264:	e000      	b.n	a268 <__aeabi_cdcmpeq>
    a266:	46c0      	nop			; (mov r8, r8)

0000a268 <__aeabi_cdcmpeq>:
    a268:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    a26a:	f000 f8fb 	bl	a464 <__ledf2>
    a26e:	2800      	cmp	r0, #0
    a270:	d401      	bmi.n	a276 <__aeabi_cdcmpeq+0xe>
    a272:	2100      	movs	r1, #0
    a274:	42c8      	cmn	r0, r1
    a276:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0000a278 <__aeabi_dcmpeq>:
    a278:	b510      	push	{r4, lr}
    a27a:	f000 f855 	bl	a328 <__eqdf2>
    a27e:	4240      	negs	r0, r0
    a280:	3001      	adds	r0, #1
    a282:	bd10      	pop	{r4, pc}

0000a284 <__aeabi_dcmplt>:
    a284:	b510      	push	{r4, lr}
    a286:	f000 f8ed 	bl	a464 <__ledf2>
    a28a:	2800      	cmp	r0, #0
    a28c:	db01      	blt.n	a292 <__aeabi_dcmplt+0xe>
    a28e:	2000      	movs	r0, #0
    a290:	bd10      	pop	{r4, pc}
    a292:	2001      	movs	r0, #1
    a294:	bd10      	pop	{r4, pc}
    a296:	46c0      	nop			; (mov r8, r8)

0000a298 <__aeabi_dcmple>:
    a298:	b510      	push	{r4, lr}
    a29a:	f000 f8e3 	bl	a464 <__ledf2>
    a29e:	2800      	cmp	r0, #0
    a2a0:	dd01      	ble.n	a2a6 <__aeabi_dcmple+0xe>
    a2a2:	2000      	movs	r0, #0
    a2a4:	bd10      	pop	{r4, pc}
    a2a6:	2001      	movs	r0, #1
    a2a8:	bd10      	pop	{r4, pc}
    a2aa:	46c0      	nop			; (mov r8, r8)

0000a2ac <__aeabi_dcmpgt>:
    a2ac:	b510      	push	{r4, lr}
    a2ae:	f000 f875 	bl	a39c <__gedf2>
    a2b2:	2800      	cmp	r0, #0
    a2b4:	dc01      	bgt.n	a2ba <__aeabi_dcmpgt+0xe>
    a2b6:	2000      	movs	r0, #0
    a2b8:	bd10      	pop	{r4, pc}
    a2ba:	2001      	movs	r0, #1
    a2bc:	bd10      	pop	{r4, pc}
    a2be:	46c0      	nop			; (mov r8, r8)

0000a2c0 <__aeabi_dcmpge>:
    a2c0:	b510      	push	{r4, lr}
    a2c2:	f000 f86b 	bl	a39c <__gedf2>
    a2c6:	2800      	cmp	r0, #0
    a2c8:	da01      	bge.n	a2ce <__aeabi_dcmpge+0xe>
    a2ca:	2000      	movs	r0, #0
    a2cc:	bd10      	pop	{r4, pc}
    a2ce:	2001      	movs	r0, #1
    a2d0:	bd10      	pop	{r4, pc}
    a2d2:	46c0      	nop			; (mov r8, r8)

0000a2d4 <__clzsi2>:
    a2d4:	211c      	movs	r1, #28
    a2d6:	2301      	movs	r3, #1
    a2d8:	041b      	lsls	r3, r3, #16
    a2da:	4298      	cmp	r0, r3
    a2dc:	d301      	bcc.n	a2e2 <__clzsi2+0xe>
    a2de:	0c00      	lsrs	r0, r0, #16
    a2e0:	3910      	subs	r1, #16
    a2e2:	0a1b      	lsrs	r3, r3, #8
    a2e4:	4298      	cmp	r0, r3
    a2e6:	d301      	bcc.n	a2ec <__clzsi2+0x18>
    a2e8:	0a00      	lsrs	r0, r0, #8
    a2ea:	3908      	subs	r1, #8
    a2ec:	091b      	lsrs	r3, r3, #4
    a2ee:	4298      	cmp	r0, r3
    a2f0:	d301      	bcc.n	a2f6 <__clzsi2+0x22>
    a2f2:	0900      	lsrs	r0, r0, #4
    a2f4:	3904      	subs	r1, #4
    a2f6:	a202      	add	r2, pc, #8	; (adr r2, a300 <__clzsi2+0x2c>)
    a2f8:	5c10      	ldrb	r0, [r2, r0]
    a2fa:	1840      	adds	r0, r0, r1
    a2fc:	4770      	bx	lr
    a2fe:	46c0      	nop			; (mov r8, r8)
    a300:	02020304 	.word	0x02020304
    a304:	01010101 	.word	0x01010101
	...

0000a310 <__clzdi2>:
    a310:	b510      	push	{r4, lr}
    a312:	2900      	cmp	r1, #0
    a314:	d103      	bne.n	a31e <__clzdi2+0xe>
    a316:	f7ff ffdd 	bl	a2d4 <__clzsi2>
    a31a:	3020      	adds	r0, #32
    a31c:	e002      	b.n	a324 <__clzdi2+0x14>
    a31e:	1c08      	adds	r0, r1, #0
    a320:	f7ff ffd8 	bl	a2d4 <__clzsi2>
    a324:	bd10      	pop	{r4, pc}
    a326:	46c0      	nop			; (mov r8, r8)

0000a328 <__eqdf2>:
    a328:	b5f0      	push	{r4, r5, r6, r7, lr}
    a32a:	464f      	mov	r7, r9
    a32c:	4646      	mov	r6, r8
    a32e:	46d6      	mov	lr, sl
    a330:	005c      	lsls	r4, r3, #1
    a332:	b5c0      	push	{r6, r7, lr}
    a334:	031f      	lsls	r7, r3, #12
    a336:	0fdb      	lsrs	r3, r3, #31
    a338:	469a      	mov	sl, r3
    a33a:	4b17      	ldr	r3, [pc, #92]	; (a398 <__eqdf2+0x70>)
    a33c:	030e      	lsls	r6, r1, #12
    a33e:	004d      	lsls	r5, r1, #1
    a340:	4684      	mov	ip, r0
    a342:	4680      	mov	r8, r0
    a344:	0b36      	lsrs	r6, r6, #12
    a346:	0d6d      	lsrs	r5, r5, #21
    a348:	0fc9      	lsrs	r1, r1, #31
    a34a:	4691      	mov	r9, r2
    a34c:	0b3f      	lsrs	r7, r7, #12
    a34e:	0d64      	lsrs	r4, r4, #21
    a350:	2001      	movs	r0, #1
    a352:	429d      	cmp	r5, r3
    a354:	d008      	beq.n	a368 <__eqdf2+0x40>
    a356:	429c      	cmp	r4, r3
    a358:	d001      	beq.n	a35e <__eqdf2+0x36>
    a35a:	42a5      	cmp	r5, r4
    a35c:	d00b      	beq.n	a376 <__eqdf2+0x4e>
    a35e:	bc1c      	pop	{r2, r3, r4}
    a360:	4690      	mov	r8, r2
    a362:	4699      	mov	r9, r3
    a364:	46a2      	mov	sl, r4
    a366:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a368:	4663      	mov	r3, ip
    a36a:	4333      	orrs	r3, r6
    a36c:	d1f7      	bne.n	a35e <__eqdf2+0x36>
    a36e:	42ac      	cmp	r4, r5
    a370:	d1f5      	bne.n	a35e <__eqdf2+0x36>
    a372:	433a      	orrs	r2, r7
    a374:	d1f3      	bne.n	a35e <__eqdf2+0x36>
    a376:	2001      	movs	r0, #1
    a378:	42be      	cmp	r6, r7
    a37a:	d1f0      	bne.n	a35e <__eqdf2+0x36>
    a37c:	45c8      	cmp	r8, r9
    a37e:	d1ee      	bne.n	a35e <__eqdf2+0x36>
    a380:	4551      	cmp	r1, sl
    a382:	d007      	beq.n	a394 <__eqdf2+0x6c>
    a384:	2d00      	cmp	r5, #0
    a386:	d1ea      	bne.n	a35e <__eqdf2+0x36>
    a388:	4663      	mov	r3, ip
    a38a:	431e      	orrs	r6, r3
    a38c:	0030      	movs	r0, r6
    a38e:	1e46      	subs	r6, r0, #1
    a390:	41b0      	sbcs	r0, r6
    a392:	e7e4      	b.n	a35e <__eqdf2+0x36>
    a394:	2000      	movs	r0, #0
    a396:	e7e2      	b.n	a35e <__eqdf2+0x36>
    a398:	000007ff 	.word	0x000007ff

0000a39c <__gedf2>:
    a39c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a39e:	4645      	mov	r5, r8
    a3a0:	46de      	mov	lr, fp
    a3a2:	4657      	mov	r7, sl
    a3a4:	464e      	mov	r6, r9
    a3a6:	b5e0      	push	{r5, r6, r7, lr}
    a3a8:	031f      	lsls	r7, r3, #12
    a3aa:	0b3d      	lsrs	r5, r7, #12
    a3ac:	4f2c      	ldr	r7, [pc, #176]	; (a460 <__gedf2+0xc4>)
    a3ae:	030e      	lsls	r6, r1, #12
    a3b0:	004c      	lsls	r4, r1, #1
    a3b2:	46ab      	mov	fp, r5
    a3b4:	005d      	lsls	r5, r3, #1
    a3b6:	4684      	mov	ip, r0
    a3b8:	0b36      	lsrs	r6, r6, #12
    a3ba:	0d64      	lsrs	r4, r4, #21
    a3bc:	0fc9      	lsrs	r1, r1, #31
    a3be:	4690      	mov	r8, r2
    a3c0:	0d6d      	lsrs	r5, r5, #21
    a3c2:	0fdb      	lsrs	r3, r3, #31
    a3c4:	42bc      	cmp	r4, r7
    a3c6:	d02a      	beq.n	a41e <__gedf2+0x82>
    a3c8:	4f25      	ldr	r7, [pc, #148]	; (a460 <__gedf2+0xc4>)
    a3ca:	42bd      	cmp	r5, r7
    a3cc:	d02d      	beq.n	a42a <__gedf2+0x8e>
    a3ce:	2c00      	cmp	r4, #0
    a3d0:	d10f      	bne.n	a3f2 <__gedf2+0x56>
    a3d2:	4330      	orrs	r0, r6
    a3d4:	0007      	movs	r7, r0
    a3d6:	4681      	mov	r9, r0
    a3d8:	4278      	negs	r0, r7
    a3da:	4178      	adcs	r0, r7
    a3dc:	b2c0      	uxtb	r0, r0
    a3de:	2d00      	cmp	r5, #0
    a3e0:	d117      	bne.n	a412 <__gedf2+0x76>
    a3e2:	465f      	mov	r7, fp
    a3e4:	433a      	orrs	r2, r7
    a3e6:	d114      	bne.n	a412 <__gedf2+0x76>
    a3e8:	464b      	mov	r3, r9
    a3ea:	2000      	movs	r0, #0
    a3ec:	2b00      	cmp	r3, #0
    a3ee:	d00a      	beq.n	a406 <__gedf2+0x6a>
    a3f0:	e006      	b.n	a400 <__gedf2+0x64>
    a3f2:	2d00      	cmp	r5, #0
    a3f4:	d102      	bne.n	a3fc <__gedf2+0x60>
    a3f6:	4658      	mov	r0, fp
    a3f8:	4302      	orrs	r2, r0
    a3fa:	d001      	beq.n	a400 <__gedf2+0x64>
    a3fc:	4299      	cmp	r1, r3
    a3fe:	d018      	beq.n	a432 <__gedf2+0x96>
    a400:	4248      	negs	r0, r1
    a402:	2101      	movs	r1, #1
    a404:	4308      	orrs	r0, r1
    a406:	bc3c      	pop	{r2, r3, r4, r5}
    a408:	4690      	mov	r8, r2
    a40a:	4699      	mov	r9, r3
    a40c:	46a2      	mov	sl, r4
    a40e:	46ab      	mov	fp, r5
    a410:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a412:	2800      	cmp	r0, #0
    a414:	d0f2      	beq.n	a3fc <__gedf2+0x60>
    a416:	2001      	movs	r0, #1
    a418:	3b01      	subs	r3, #1
    a41a:	4318      	orrs	r0, r3
    a41c:	e7f3      	b.n	a406 <__gedf2+0x6a>
    a41e:	0037      	movs	r7, r6
    a420:	4307      	orrs	r7, r0
    a422:	d0d1      	beq.n	a3c8 <__gedf2+0x2c>
    a424:	2002      	movs	r0, #2
    a426:	4240      	negs	r0, r0
    a428:	e7ed      	b.n	a406 <__gedf2+0x6a>
    a42a:	465f      	mov	r7, fp
    a42c:	4317      	orrs	r7, r2
    a42e:	d0ce      	beq.n	a3ce <__gedf2+0x32>
    a430:	e7f8      	b.n	a424 <__gedf2+0x88>
    a432:	42ac      	cmp	r4, r5
    a434:	dce4      	bgt.n	a400 <__gedf2+0x64>
    a436:	da03      	bge.n	a440 <__gedf2+0xa4>
    a438:	1e48      	subs	r0, r1, #1
    a43a:	2101      	movs	r1, #1
    a43c:	4308      	orrs	r0, r1
    a43e:	e7e2      	b.n	a406 <__gedf2+0x6a>
    a440:	455e      	cmp	r6, fp
    a442:	d8dd      	bhi.n	a400 <__gedf2+0x64>
    a444:	d006      	beq.n	a454 <__gedf2+0xb8>
    a446:	2000      	movs	r0, #0
    a448:	455e      	cmp	r6, fp
    a44a:	d2dc      	bcs.n	a406 <__gedf2+0x6a>
    a44c:	2301      	movs	r3, #1
    a44e:	1e48      	subs	r0, r1, #1
    a450:	4318      	orrs	r0, r3
    a452:	e7d8      	b.n	a406 <__gedf2+0x6a>
    a454:	45c4      	cmp	ip, r8
    a456:	d8d3      	bhi.n	a400 <__gedf2+0x64>
    a458:	2000      	movs	r0, #0
    a45a:	45c4      	cmp	ip, r8
    a45c:	d3f6      	bcc.n	a44c <__gedf2+0xb0>
    a45e:	e7d2      	b.n	a406 <__gedf2+0x6a>
    a460:	000007ff 	.word	0x000007ff

0000a464 <__ledf2>:
    a464:	b5f0      	push	{r4, r5, r6, r7, lr}
    a466:	464e      	mov	r6, r9
    a468:	4645      	mov	r5, r8
    a46a:	46de      	mov	lr, fp
    a46c:	4657      	mov	r7, sl
    a46e:	005c      	lsls	r4, r3, #1
    a470:	b5e0      	push	{r5, r6, r7, lr}
    a472:	031f      	lsls	r7, r3, #12
    a474:	0fdb      	lsrs	r3, r3, #31
    a476:	4699      	mov	r9, r3
    a478:	4b2a      	ldr	r3, [pc, #168]	; (a524 <__ledf2+0xc0>)
    a47a:	030e      	lsls	r6, r1, #12
    a47c:	004d      	lsls	r5, r1, #1
    a47e:	0fc9      	lsrs	r1, r1, #31
    a480:	4684      	mov	ip, r0
    a482:	0b36      	lsrs	r6, r6, #12
    a484:	0d6d      	lsrs	r5, r5, #21
    a486:	468b      	mov	fp, r1
    a488:	4690      	mov	r8, r2
    a48a:	0b3f      	lsrs	r7, r7, #12
    a48c:	0d64      	lsrs	r4, r4, #21
    a48e:	429d      	cmp	r5, r3
    a490:	d020      	beq.n	a4d4 <__ledf2+0x70>
    a492:	4b24      	ldr	r3, [pc, #144]	; (a524 <__ledf2+0xc0>)
    a494:	429c      	cmp	r4, r3
    a496:	d022      	beq.n	a4de <__ledf2+0x7a>
    a498:	2d00      	cmp	r5, #0
    a49a:	d112      	bne.n	a4c2 <__ledf2+0x5e>
    a49c:	4330      	orrs	r0, r6
    a49e:	4243      	negs	r3, r0
    a4a0:	4143      	adcs	r3, r0
    a4a2:	b2db      	uxtb	r3, r3
    a4a4:	2c00      	cmp	r4, #0
    a4a6:	d01f      	beq.n	a4e8 <__ledf2+0x84>
    a4a8:	2b00      	cmp	r3, #0
    a4aa:	d00c      	beq.n	a4c6 <__ledf2+0x62>
    a4ac:	464b      	mov	r3, r9
    a4ae:	2001      	movs	r0, #1
    a4b0:	3b01      	subs	r3, #1
    a4b2:	4303      	orrs	r3, r0
    a4b4:	0018      	movs	r0, r3
    a4b6:	bc3c      	pop	{r2, r3, r4, r5}
    a4b8:	4690      	mov	r8, r2
    a4ba:	4699      	mov	r9, r3
    a4bc:	46a2      	mov	sl, r4
    a4be:	46ab      	mov	fp, r5
    a4c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a4c2:	2c00      	cmp	r4, #0
    a4c4:	d016      	beq.n	a4f4 <__ledf2+0x90>
    a4c6:	45cb      	cmp	fp, r9
    a4c8:	d017      	beq.n	a4fa <__ledf2+0x96>
    a4ca:	465b      	mov	r3, fp
    a4cc:	4259      	negs	r1, r3
    a4ce:	2301      	movs	r3, #1
    a4d0:	430b      	orrs	r3, r1
    a4d2:	e7ef      	b.n	a4b4 <__ledf2+0x50>
    a4d4:	0031      	movs	r1, r6
    a4d6:	2302      	movs	r3, #2
    a4d8:	4301      	orrs	r1, r0
    a4da:	d1eb      	bne.n	a4b4 <__ledf2+0x50>
    a4dc:	e7d9      	b.n	a492 <__ledf2+0x2e>
    a4de:	0039      	movs	r1, r7
    a4e0:	2302      	movs	r3, #2
    a4e2:	4311      	orrs	r1, r2
    a4e4:	d1e6      	bne.n	a4b4 <__ledf2+0x50>
    a4e6:	e7d7      	b.n	a498 <__ledf2+0x34>
    a4e8:	433a      	orrs	r2, r7
    a4ea:	d1dd      	bne.n	a4a8 <__ledf2+0x44>
    a4ec:	2300      	movs	r3, #0
    a4ee:	2800      	cmp	r0, #0
    a4f0:	d0e0      	beq.n	a4b4 <__ledf2+0x50>
    a4f2:	e7ea      	b.n	a4ca <__ledf2+0x66>
    a4f4:	433a      	orrs	r2, r7
    a4f6:	d1e6      	bne.n	a4c6 <__ledf2+0x62>
    a4f8:	e7e7      	b.n	a4ca <__ledf2+0x66>
    a4fa:	42a5      	cmp	r5, r4
    a4fc:	dce5      	bgt.n	a4ca <__ledf2+0x66>
    a4fe:	db05      	blt.n	a50c <__ledf2+0xa8>
    a500:	42be      	cmp	r6, r7
    a502:	d8e2      	bhi.n	a4ca <__ledf2+0x66>
    a504:	d007      	beq.n	a516 <__ledf2+0xb2>
    a506:	2300      	movs	r3, #0
    a508:	42be      	cmp	r6, r7
    a50a:	d2d3      	bcs.n	a4b4 <__ledf2+0x50>
    a50c:	4659      	mov	r1, fp
    a50e:	2301      	movs	r3, #1
    a510:	3901      	subs	r1, #1
    a512:	430b      	orrs	r3, r1
    a514:	e7ce      	b.n	a4b4 <__ledf2+0x50>
    a516:	45c4      	cmp	ip, r8
    a518:	d8d7      	bhi.n	a4ca <__ledf2+0x66>
    a51a:	2300      	movs	r3, #0
    a51c:	45c4      	cmp	ip, r8
    a51e:	d3f5      	bcc.n	a50c <__ledf2+0xa8>
    a520:	e7c8      	b.n	a4b4 <__ledf2+0x50>
    a522:	46c0      	nop			; (mov r8, r8)
    a524:	000007ff 	.word	0x000007ff

0000a528 <__cxa_atexit>:
    a528:	b510      	push	{r4, lr}
    a52a:	0013      	movs	r3, r2
    a52c:	000a      	movs	r2, r1
    a52e:	0001      	movs	r1, r0
    a530:	2002      	movs	r0, #2
    a532:	f001 fde9 	bl	c108 <__register_exitproc>
    a536:	bd10      	pop	{r4, pc}

0000a538 <__libc_init_array>:
    a538:	b570      	push	{r4, r5, r6, lr}
    a53a:	4e0d      	ldr	r6, [pc, #52]	; (a570 <__libc_init_array+0x38>)
    a53c:	4d0d      	ldr	r5, [pc, #52]	; (a574 <__libc_init_array+0x3c>)
    a53e:	2400      	movs	r4, #0
    a540:	1bad      	subs	r5, r5, r6
    a542:	10ad      	asrs	r5, r5, #2
    a544:	d005      	beq.n	a552 <__libc_init_array+0x1a>
    a546:	00a3      	lsls	r3, r4, #2
    a548:	58f3      	ldr	r3, [r6, r3]
    a54a:	3401      	adds	r4, #1
    a54c:	4798      	blx	r3
    a54e:	42a5      	cmp	r5, r4
    a550:	d1f9      	bne.n	a546 <__libc_init_array+0xe>
    a552:	f005 fe89 	bl	10268 <_init>
    a556:	4e08      	ldr	r6, [pc, #32]	; (a578 <__libc_init_array+0x40>)
    a558:	4d08      	ldr	r5, [pc, #32]	; (a57c <__libc_init_array+0x44>)
    a55a:	2400      	movs	r4, #0
    a55c:	1bad      	subs	r5, r5, r6
    a55e:	10ad      	asrs	r5, r5, #2
    a560:	d005      	beq.n	a56e <__libc_init_array+0x36>
    a562:	00a3      	lsls	r3, r4, #2
    a564:	58f3      	ldr	r3, [r6, r3]
    a566:	3401      	adds	r4, #1
    a568:	4798      	blx	r3
    a56a:	42a5      	cmp	r5, r4
    a56c:	d1f9      	bne.n	a562 <__libc_init_array+0x2a>
    a56e:	bd70      	pop	{r4, r5, r6, pc}
    a570:	00010274 	.word	0x00010274
    a574:	00010274 	.word	0x00010274
    a578:	00010274 	.word	0x00010274
    a57c:	00010284 	.word	0x00010284

0000a580 <memcpy>:
    a580:	b5f0      	push	{r4, r5, r6, r7, lr}
    a582:	0005      	movs	r5, r0
    a584:	2a0f      	cmp	r2, #15
    a586:	d92f      	bls.n	a5e8 <memcpy+0x68>
    a588:	000b      	movs	r3, r1
    a58a:	4303      	orrs	r3, r0
    a58c:	079b      	lsls	r3, r3, #30
    a58e:	d134      	bne.n	a5fa <memcpy+0x7a>
    a590:	0016      	movs	r6, r2
    a592:	000c      	movs	r4, r1
    a594:	0003      	movs	r3, r0
    a596:	3e10      	subs	r6, #16
    a598:	0935      	lsrs	r5, r6, #4
    a59a:	3501      	adds	r5, #1
    a59c:	012d      	lsls	r5, r5, #4
    a59e:	1945      	adds	r5, r0, r5
    a5a0:	6827      	ldr	r7, [r4, #0]
    a5a2:	601f      	str	r7, [r3, #0]
    a5a4:	6867      	ldr	r7, [r4, #4]
    a5a6:	605f      	str	r7, [r3, #4]
    a5a8:	68a7      	ldr	r7, [r4, #8]
    a5aa:	609f      	str	r7, [r3, #8]
    a5ac:	68e7      	ldr	r7, [r4, #12]
    a5ae:	3410      	adds	r4, #16
    a5b0:	60df      	str	r7, [r3, #12]
    a5b2:	3310      	adds	r3, #16
    a5b4:	429d      	cmp	r5, r3
    a5b6:	d1f3      	bne.n	a5a0 <memcpy+0x20>
    a5b8:	230f      	movs	r3, #15
    a5ba:	439e      	bics	r6, r3
    a5bc:	3610      	adds	r6, #16
    a5be:	1985      	adds	r5, r0, r6
    a5c0:	1989      	adds	r1, r1, r6
    a5c2:	4013      	ands	r3, r2
    a5c4:	2b03      	cmp	r3, #3
    a5c6:	d91a      	bls.n	a5fe <memcpy+0x7e>
    a5c8:	1f1e      	subs	r6, r3, #4
    a5ca:	2300      	movs	r3, #0
    a5cc:	08b4      	lsrs	r4, r6, #2
    a5ce:	3401      	adds	r4, #1
    a5d0:	00a4      	lsls	r4, r4, #2
    a5d2:	58cf      	ldr	r7, [r1, r3]
    a5d4:	50ef      	str	r7, [r5, r3]
    a5d6:	3304      	adds	r3, #4
    a5d8:	42a3      	cmp	r3, r4
    a5da:	d1fa      	bne.n	a5d2 <memcpy+0x52>
    a5dc:	2403      	movs	r4, #3
    a5de:	43a6      	bics	r6, r4
    a5e0:	1d33      	adds	r3, r6, #4
    a5e2:	4022      	ands	r2, r4
    a5e4:	18c9      	adds	r1, r1, r3
    a5e6:	18ed      	adds	r5, r5, r3
    a5e8:	2a00      	cmp	r2, #0
    a5ea:	d005      	beq.n	a5f8 <memcpy+0x78>
    a5ec:	2300      	movs	r3, #0
    a5ee:	5ccc      	ldrb	r4, [r1, r3]
    a5f0:	54ec      	strb	r4, [r5, r3]
    a5f2:	3301      	adds	r3, #1
    a5f4:	4293      	cmp	r3, r2
    a5f6:	d1fa      	bne.n	a5ee <memcpy+0x6e>
    a5f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a5fa:	0005      	movs	r5, r0
    a5fc:	e7f6      	b.n	a5ec <memcpy+0x6c>
    a5fe:	001a      	movs	r2, r3
    a600:	e7f2      	b.n	a5e8 <memcpy+0x68>
    a602:	46c0      	nop			; (mov r8, r8)

0000a604 <memset>:
    a604:	b5f0      	push	{r4, r5, r6, r7, lr}
    a606:	0783      	lsls	r3, r0, #30
    a608:	d043      	beq.n	a692 <memset+0x8e>
    a60a:	1e54      	subs	r4, r2, #1
    a60c:	2a00      	cmp	r2, #0
    a60e:	d03f      	beq.n	a690 <memset+0x8c>
    a610:	b2ce      	uxtb	r6, r1
    a612:	0002      	movs	r2, r0
    a614:	2503      	movs	r5, #3
    a616:	e002      	b.n	a61e <memset+0x1a>
    a618:	001a      	movs	r2, r3
    a61a:	3c01      	subs	r4, #1
    a61c:	d338      	bcc.n	a690 <memset+0x8c>
    a61e:	1c53      	adds	r3, r2, #1
    a620:	7016      	strb	r6, [r2, #0]
    a622:	422b      	tst	r3, r5
    a624:	d1f8      	bne.n	a618 <memset+0x14>
    a626:	2c03      	cmp	r4, #3
    a628:	d92a      	bls.n	a680 <memset+0x7c>
    a62a:	22ff      	movs	r2, #255	; 0xff
    a62c:	400a      	ands	r2, r1
    a62e:	0215      	lsls	r5, r2, #8
    a630:	4315      	orrs	r5, r2
    a632:	042a      	lsls	r2, r5, #16
    a634:	4315      	orrs	r5, r2
    a636:	2c0f      	cmp	r4, #15
    a638:	d914      	bls.n	a664 <memset+0x60>
    a63a:	0027      	movs	r7, r4
    a63c:	001a      	movs	r2, r3
    a63e:	3f10      	subs	r7, #16
    a640:	093e      	lsrs	r6, r7, #4
    a642:	3601      	adds	r6, #1
    a644:	0136      	lsls	r6, r6, #4
    a646:	199e      	adds	r6, r3, r6
    a648:	6015      	str	r5, [r2, #0]
    a64a:	6055      	str	r5, [r2, #4]
    a64c:	6095      	str	r5, [r2, #8]
    a64e:	60d5      	str	r5, [r2, #12]
    a650:	3210      	adds	r2, #16
    a652:	4296      	cmp	r6, r2
    a654:	d1f8      	bne.n	a648 <memset+0x44>
    a656:	220f      	movs	r2, #15
    a658:	4397      	bics	r7, r2
    a65a:	3710      	adds	r7, #16
    a65c:	19db      	adds	r3, r3, r7
    a65e:	4014      	ands	r4, r2
    a660:	2c03      	cmp	r4, #3
    a662:	d90d      	bls.n	a680 <memset+0x7c>
    a664:	001a      	movs	r2, r3
    a666:	1f27      	subs	r7, r4, #4
    a668:	08be      	lsrs	r6, r7, #2
    a66a:	3601      	adds	r6, #1
    a66c:	00b6      	lsls	r6, r6, #2
    a66e:	199e      	adds	r6, r3, r6
    a670:	c220      	stmia	r2!, {r5}
    a672:	42b2      	cmp	r2, r6
    a674:	d1fc      	bne.n	a670 <memset+0x6c>
    a676:	2203      	movs	r2, #3
    a678:	4397      	bics	r7, r2
    a67a:	3704      	adds	r7, #4
    a67c:	19db      	adds	r3, r3, r7
    a67e:	4014      	ands	r4, r2
    a680:	2c00      	cmp	r4, #0
    a682:	d005      	beq.n	a690 <memset+0x8c>
    a684:	b2c9      	uxtb	r1, r1
    a686:	191c      	adds	r4, r3, r4
    a688:	7019      	strb	r1, [r3, #0]
    a68a:	3301      	adds	r3, #1
    a68c:	429c      	cmp	r4, r3
    a68e:	d1fb      	bne.n	a688 <memset+0x84>
    a690:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a692:	0014      	movs	r4, r2
    a694:	0003      	movs	r3, r0
    a696:	e7c6      	b.n	a626 <memset+0x22>

0000a698 <printf>:
    a698:	b40f      	push	{r0, r1, r2, r3}
    a69a:	b500      	push	{lr}
    a69c:	4906      	ldr	r1, [pc, #24]	; (a6b8 <printf+0x20>)
    a69e:	b083      	sub	sp, #12
    a6a0:	ab04      	add	r3, sp, #16
    a6a2:	6808      	ldr	r0, [r1, #0]
    a6a4:	cb04      	ldmia	r3!, {r2}
    a6a6:	6881      	ldr	r1, [r0, #8]
    a6a8:	9301      	str	r3, [sp, #4]
    a6aa:	f000 f913 	bl	a8d4 <_vfprintf_r>
    a6ae:	b003      	add	sp, #12
    a6b0:	bc08      	pop	{r3}
    a6b2:	b004      	add	sp, #16
    a6b4:	4718      	bx	r3
    a6b6:	46c0      	nop			; (mov r8, r8)
    a6b8:	20000084 	.word	0x20000084

0000a6bc <setbuf>:
    a6bc:	424a      	negs	r2, r1
    a6be:	414a      	adcs	r2, r1
    a6c0:	2380      	movs	r3, #128	; 0x80
    a6c2:	b510      	push	{r4, lr}
    a6c4:	0052      	lsls	r2, r2, #1
    a6c6:	00db      	lsls	r3, r3, #3
    a6c8:	f000 f802 	bl	a6d0 <setvbuf>
    a6cc:	bd10      	pop	{r4, pc}
    a6ce:	46c0      	nop			; (mov r8, r8)

0000a6d0 <setvbuf>:
    a6d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    a6d2:	4647      	mov	r7, r8
    a6d4:	46ce      	mov	lr, r9
    a6d6:	b580      	push	{r7, lr}
    a6d8:	001f      	movs	r7, r3
    a6da:	4b63      	ldr	r3, [pc, #396]	; (a868 <setvbuf+0x198>)
    a6dc:	b083      	sub	sp, #12
    a6de:	681d      	ldr	r5, [r3, #0]
    a6e0:	0004      	movs	r4, r0
    a6e2:	4688      	mov	r8, r1
    a6e4:	0016      	movs	r6, r2
    a6e6:	2d00      	cmp	r5, #0
    a6e8:	d002      	beq.n	a6f0 <setvbuf+0x20>
    a6ea:	6bab      	ldr	r3, [r5, #56]	; 0x38
    a6ec:	2b00      	cmp	r3, #0
    a6ee:	d066      	beq.n	a7be <setvbuf+0xee>
    a6f0:	2e02      	cmp	r6, #2
    a6f2:	d005      	beq.n	a700 <setvbuf+0x30>
    a6f4:	2e01      	cmp	r6, #1
    a6f6:	d900      	bls.n	a6fa <setvbuf+0x2a>
    a6f8:	e0a1      	b.n	a83e <setvbuf+0x16e>
    a6fa:	2f00      	cmp	r7, #0
    a6fc:	da00      	bge.n	a700 <setvbuf+0x30>
    a6fe:	e09e      	b.n	a83e <setvbuf+0x16e>
    a700:	6e63      	ldr	r3, [r4, #100]	; 0x64
    a702:	07db      	lsls	r3, r3, #31
    a704:	d533      	bpl.n	a76e <setvbuf+0x9e>
    a706:	0021      	movs	r1, r4
    a708:	0028      	movs	r0, r5
    a70a:	f002 fea1 	bl	d450 <_fflush_r>
    a70e:	6b21      	ldr	r1, [r4, #48]	; 0x30
    a710:	2900      	cmp	r1, #0
    a712:	d008      	beq.n	a726 <setvbuf+0x56>
    a714:	0023      	movs	r3, r4
    a716:	3340      	adds	r3, #64	; 0x40
    a718:	4299      	cmp	r1, r3
    a71a:	d002      	beq.n	a722 <setvbuf+0x52>
    a71c:	0028      	movs	r0, r5
    a71e:	f002 ff9b 	bl	d658 <_free_r>
    a722:	2300      	movs	r3, #0
    a724:	6323      	str	r3, [r4, #48]	; 0x30
    a726:	2300      	movs	r3, #0
    a728:	61a3      	str	r3, [r4, #24]
    a72a:	6063      	str	r3, [r4, #4]
    a72c:	220c      	movs	r2, #12
    a72e:	5ea3      	ldrsh	r3, [r4, r2]
    a730:	061a      	lsls	r2, r3, #24
    a732:	d43d      	bmi.n	a7b0 <setvbuf+0xe0>
    a734:	4a4d      	ldr	r2, [pc, #308]	; (a86c <setvbuf+0x19c>)
    a736:	4013      	ands	r3, r2
    a738:	81a3      	strh	r3, [r4, #12]
    a73a:	2e02      	cmp	r6, #2
    a73c:	d01e      	beq.n	a77c <setvbuf+0xac>
    a73e:	ab01      	add	r3, sp, #4
    a740:	466a      	mov	r2, sp
    a742:	0021      	movs	r1, r4
    a744:	0028      	movs	r0, r5
    a746:	f003 fa23 	bl	db90 <__swhatbuf_r>
    a74a:	89a3      	ldrh	r3, [r4, #12]
    a74c:	4318      	orrs	r0, r3
    a74e:	81a0      	strh	r0, [r4, #12]
    a750:	2f00      	cmp	r7, #0
    a752:	d138      	bne.n	a7c6 <setvbuf+0xf6>
    a754:	9f00      	ldr	r7, [sp, #0]
    a756:	0038      	movs	r0, r7
    a758:	f003 fa92 	bl	dc80 <malloc>
    a75c:	4680      	mov	r8, r0
    a75e:	2800      	cmp	r0, #0
    a760:	d100      	bne.n	a764 <setvbuf+0x94>
    a762:	e06f      	b.n	a844 <setvbuf+0x174>
    a764:	2280      	movs	r2, #128	; 0x80
    a766:	89a3      	ldrh	r3, [r4, #12]
    a768:	4313      	orrs	r3, r2
    a76a:	81a3      	strh	r3, [r4, #12]
    a76c:	e02e      	b.n	a7cc <setvbuf+0xfc>
    a76e:	89a3      	ldrh	r3, [r4, #12]
    a770:	059b      	lsls	r3, r3, #22
    a772:	d4c8      	bmi.n	a706 <setvbuf+0x36>
    a774:	6da0      	ldr	r0, [r4, #88]	; 0x58
    a776:	f003 fa07 	bl	db88 <__retarget_lock_acquire_recursive>
    a77a:	e7c4      	b.n	a706 <setvbuf+0x36>
    a77c:	2500      	movs	r5, #0
    a77e:	2202      	movs	r2, #2
    a780:	4313      	orrs	r3, r2
    a782:	2200      	movs	r2, #0
    a784:	60a2      	str	r2, [r4, #8]
    a786:	0022      	movs	r2, r4
    a788:	3243      	adds	r2, #67	; 0x43
    a78a:	6022      	str	r2, [r4, #0]
    a78c:	6122      	str	r2, [r4, #16]
    a78e:	2201      	movs	r2, #1
    a790:	6e61      	ldr	r1, [r4, #100]	; 0x64
    a792:	81a3      	strh	r3, [r4, #12]
    a794:	6162      	str	r2, [r4, #20]
    a796:	4211      	tst	r1, r2
    a798:	d104      	bne.n	a7a4 <setvbuf+0xd4>
    a79a:	059b      	lsls	r3, r3, #22
    a79c:	d402      	bmi.n	a7a4 <setvbuf+0xd4>
    a79e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    a7a0:	f003 f9f4 	bl	db8c <__retarget_lock_release_recursive>
    a7a4:	0028      	movs	r0, r5
    a7a6:	b003      	add	sp, #12
    a7a8:	bc0c      	pop	{r2, r3}
    a7aa:	4690      	mov	r8, r2
    a7ac:	4699      	mov	r9, r3
    a7ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a7b0:	6921      	ldr	r1, [r4, #16]
    a7b2:	0028      	movs	r0, r5
    a7b4:	f002 ff50 	bl	d658 <_free_r>
    a7b8:	220c      	movs	r2, #12
    a7ba:	5ea3      	ldrsh	r3, [r4, r2]
    a7bc:	e7ba      	b.n	a734 <setvbuf+0x64>
    a7be:	0028      	movs	r0, r5
    a7c0:	f002 fea0 	bl	d504 <__sinit>
    a7c4:	e794      	b.n	a6f0 <setvbuf+0x20>
    a7c6:	4643      	mov	r3, r8
    a7c8:	2b00      	cmp	r3, #0
    a7ca:	d0c4      	beq.n	a756 <setvbuf+0x86>
    a7cc:	6bab      	ldr	r3, [r5, #56]	; 0x38
    a7ce:	2b00      	cmp	r3, #0
    a7d0:	d027      	beq.n	a822 <setvbuf+0x152>
    a7d2:	9b00      	ldr	r3, [sp, #0]
    a7d4:	429f      	cmp	r7, r3
    a7d6:	d02a      	beq.n	a82e <setvbuf+0x15e>
    a7d8:	2380      	movs	r3, #128	; 0x80
    a7da:	89a2      	ldrh	r2, [r4, #12]
    a7dc:	011b      	lsls	r3, r3, #4
    a7de:	4313      	orrs	r3, r2
    a7e0:	b21b      	sxth	r3, r3
    a7e2:	81a3      	strh	r3, [r4, #12]
    a7e4:	2e01      	cmp	r6, #1
    a7e6:	d026      	beq.n	a836 <setvbuf+0x166>
    a7e8:	4642      	mov	r2, r8
    a7ea:	6022      	str	r2, [r4, #0]
    a7ec:	6122      	str	r2, [r4, #16]
    a7ee:	2208      	movs	r2, #8
    a7f0:	b29b      	uxth	r3, r3
    a7f2:	6167      	str	r7, [r4, #20]
    a7f4:	401a      	ands	r2, r3
    a7f6:	d00b      	beq.n	a810 <setvbuf+0x140>
    a7f8:	07da      	lsls	r2, r3, #31
    a7fa:	d510      	bpl.n	a81e <setvbuf+0x14e>
    a7fc:	2200      	movs	r2, #0
    a7fe:	2501      	movs	r5, #1
    a800:	60a2      	str	r2, [r4, #8]
    a802:	6e62      	ldr	r2, [r4, #100]	; 0x64
    a804:	427f      	negs	r7, r7
    a806:	61a7      	str	r7, [r4, #24]
    a808:	4015      	ands	r5, r2
    a80a:	d0c6      	beq.n	a79a <setvbuf+0xca>
    a80c:	2500      	movs	r5, #0
    a80e:	e7c9      	b.n	a7a4 <setvbuf+0xd4>
    a810:	60a2      	str	r2, [r4, #8]
    a812:	2501      	movs	r5, #1
    a814:	6e62      	ldr	r2, [r4, #100]	; 0x64
    a816:	4015      	ands	r5, r2
    a818:	d0bf      	beq.n	a79a <setvbuf+0xca>
    a81a:	2500      	movs	r5, #0
    a81c:	e7c2      	b.n	a7a4 <setvbuf+0xd4>
    a81e:	60a7      	str	r7, [r4, #8]
    a820:	e7f7      	b.n	a812 <setvbuf+0x142>
    a822:	0028      	movs	r0, r5
    a824:	f002 fe6e 	bl	d504 <__sinit>
    a828:	9b00      	ldr	r3, [sp, #0]
    a82a:	429f      	cmp	r7, r3
    a82c:	d1d4      	bne.n	a7d8 <setvbuf+0x108>
    a82e:	220c      	movs	r2, #12
    a830:	5ea3      	ldrsh	r3, [r4, r2]
    a832:	2e01      	cmp	r6, #1
    a834:	d1d8      	bne.n	a7e8 <setvbuf+0x118>
    a836:	2201      	movs	r2, #1
    a838:	4313      	orrs	r3, r2
    a83a:	81a3      	strh	r3, [r4, #12]
    a83c:	e7d4      	b.n	a7e8 <setvbuf+0x118>
    a83e:	2501      	movs	r5, #1
    a840:	426d      	negs	r5, r5
    a842:	e7af      	b.n	a7a4 <setvbuf+0xd4>
    a844:	9b00      	ldr	r3, [sp, #0]
    a846:	4699      	mov	r9, r3
    a848:	42bb      	cmp	r3, r7
    a84a:	d005      	beq.n	a858 <setvbuf+0x188>
    a84c:	0018      	movs	r0, r3
    a84e:	f003 fa17 	bl	dc80 <malloc>
    a852:	4680      	mov	r8, r0
    a854:	2800      	cmp	r0, #0
    a856:	d104      	bne.n	a862 <setvbuf+0x192>
    a858:	2501      	movs	r5, #1
    a85a:	220c      	movs	r2, #12
    a85c:	5ea3      	ldrsh	r3, [r4, r2]
    a85e:	426d      	negs	r5, r5
    a860:	e78d      	b.n	a77e <setvbuf+0xae>
    a862:	464f      	mov	r7, r9
    a864:	e77e      	b.n	a764 <setvbuf+0x94>
    a866:	46c0      	nop			; (mov r8, r8)
    a868:	20000084 	.word	0x20000084
    a86c:	fffff35c 	.word	0xfffff35c

0000a870 <strlen>:
    a870:	b510      	push	{r4, lr}
    a872:	0783      	lsls	r3, r0, #30
    a874:	d025      	beq.n	a8c2 <strlen+0x52>
    a876:	7803      	ldrb	r3, [r0, #0]
    a878:	2b00      	cmp	r3, #0
    a87a:	d024      	beq.n	a8c6 <strlen+0x56>
    a87c:	0003      	movs	r3, r0
    a87e:	2103      	movs	r1, #3
    a880:	e002      	b.n	a888 <strlen+0x18>
    a882:	781a      	ldrb	r2, [r3, #0]
    a884:	2a00      	cmp	r2, #0
    a886:	d01a      	beq.n	a8be <strlen+0x4e>
    a888:	3301      	adds	r3, #1
    a88a:	420b      	tst	r3, r1
    a88c:	d1f9      	bne.n	a882 <strlen+0x12>
    a88e:	6819      	ldr	r1, [r3, #0]
    a890:	4a0e      	ldr	r2, [pc, #56]	; (a8cc <strlen+0x5c>)
    a892:	4c0f      	ldr	r4, [pc, #60]	; (a8d0 <strlen+0x60>)
    a894:	188a      	adds	r2, r1, r2
    a896:	438a      	bics	r2, r1
    a898:	4222      	tst	r2, r4
    a89a:	d106      	bne.n	a8aa <strlen+0x3a>
    a89c:	3304      	adds	r3, #4
    a89e:	6819      	ldr	r1, [r3, #0]
    a8a0:	4a0a      	ldr	r2, [pc, #40]	; (a8cc <strlen+0x5c>)
    a8a2:	188a      	adds	r2, r1, r2
    a8a4:	438a      	bics	r2, r1
    a8a6:	4222      	tst	r2, r4
    a8a8:	d0f8      	beq.n	a89c <strlen+0x2c>
    a8aa:	001a      	movs	r2, r3
    a8ac:	781b      	ldrb	r3, [r3, #0]
    a8ae:	2b00      	cmp	r3, #0
    a8b0:	d003      	beq.n	a8ba <strlen+0x4a>
    a8b2:	3201      	adds	r2, #1
    a8b4:	7811      	ldrb	r1, [r2, #0]
    a8b6:	2900      	cmp	r1, #0
    a8b8:	d1fb      	bne.n	a8b2 <strlen+0x42>
    a8ba:	1a10      	subs	r0, r2, r0
    a8bc:	bd10      	pop	{r4, pc}
    a8be:	1a18      	subs	r0, r3, r0
    a8c0:	e7fc      	b.n	a8bc <strlen+0x4c>
    a8c2:	0003      	movs	r3, r0
    a8c4:	e7e3      	b.n	a88e <strlen+0x1e>
    a8c6:	2000      	movs	r0, #0
    a8c8:	e7f8      	b.n	a8bc <strlen+0x4c>
    a8ca:	46c0      	nop			; (mov r8, r8)
    a8cc:	fefefeff 	.word	0xfefefeff
    a8d0:	80808080 	.word	0x80808080

0000a8d4 <_vfprintf_r>:
    a8d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    a8d6:	46de      	mov	lr, fp
    a8d8:	464e      	mov	r6, r9
    a8da:	4645      	mov	r5, r8
    a8dc:	4657      	mov	r7, sl
    a8de:	b5e0      	push	{r5, r6, r7, lr}
    a8e0:	b0c3      	sub	sp, #268	; 0x10c
    a8e2:	4689      	mov	r9, r1
    a8e4:	0014      	movs	r4, r2
    a8e6:	001d      	movs	r5, r3
    a8e8:	930f      	str	r3, [sp, #60]	; 0x3c
    a8ea:	0006      	movs	r6, r0
    a8ec:	9006      	str	r0, [sp, #24]
    a8ee:	f003 f939 	bl	db64 <_localeconv_r>
    a8f2:	6803      	ldr	r3, [r0, #0]
    a8f4:	0018      	movs	r0, r3
    a8f6:	9318      	str	r3, [sp, #96]	; 0x60
    a8f8:	f7ff ffba 	bl	a870 <strlen>
    a8fc:	9017      	str	r0, [sp, #92]	; 0x5c
    a8fe:	2e00      	cmp	r6, #0
    a900:	d004      	beq.n	a90c <_vfprintf_r+0x38>
    a902:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    a904:	9307      	str	r3, [sp, #28]
    a906:	2b00      	cmp	r3, #0
    a908:	d100      	bne.n	a90c <_vfprintf_r+0x38>
    a90a:	e0a7      	b.n	aa5c <_vfprintf_r+0x188>
    a90c:	464b      	mov	r3, r9
    a90e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    a910:	07db      	lsls	r3, r3, #31
    a912:	d478      	bmi.n	aa06 <_vfprintf_r+0x132>
    a914:	464b      	mov	r3, r9
    a916:	210c      	movs	r1, #12
    a918:	5e59      	ldrsh	r1, [r3, r1]
    a91a:	b28b      	uxth	r3, r1
    a91c:	059a      	lsls	r2, r3, #22
    a91e:	d56e      	bpl.n	a9fe <_vfprintf_r+0x12a>
    a920:	2280      	movs	r2, #128	; 0x80
    a922:	0192      	lsls	r2, r2, #6
    a924:	4213      	tst	r3, r2
    a926:	d109      	bne.n	a93c <_vfprintf_r+0x68>
    a928:	430a      	orrs	r2, r1
    a92a:	464b      	mov	r3, r9
    a92c:	4649      	mov	r1, r9
    a92e:	819a      	strh	r2, [r3, #12]
    a930:	6e49      	ldr	r1, [r1, #100]	; 0x64
    a932:	4bcc      	ldr	r3, [pc, #816]	; (ac64 <_vfprintf_r+0x390>)
    a934:	400b      	ands	r3, r1
    a936:	4649      	mov	r1, r9
    a938:	664b      	str	r3, [r1, #100]	; 0x64
    a93a:	b293      	uxth	r3, r2
    a93c:	071a      	lsls	r2, r3, #28
    a93e:	d567      	bpl.n	aa10 <_vfprintf_r+0x13c>
    a940:	464a      	mov	r2, r9
    a942:	6912      	ldr	r2, [r2, #16]
    a944:	2a00      	cmp	r2, #0
    a946:	d063      	beq.n	aa10 <_vfprintf_r+0x13c>
    a948:	221a      	movs	r2, #26
    a94a:	401a      	ands	r2, r3
    a94c:	2a0a      	cmp	r2, #10
    a94e:	d100      	bne.n	a952 <_vfprintf_r+0x7e>
    a950:	e088      	b.n	aa64 <_vfprintf_r+0x190>
    a952:	ab32      	add	r3, sp, #200	; 0xc8
    a954:	9325      	str	r3, [sp, #148]	; 0x94
    a956:	2300      	movs	r3, #0
    a958:	46cb      	mov	fp, r9
    a95a:	af25      	add	r7, sp, #148	; 0x94
    a95c:	60bb      	str	r3, [r7, #8]
    a95e:	607b      	str	r3, [r7, #4]
    a960:	9407      	str	r4, [sp, #28]
    a962:	9314      	str	r3, [sp, #80]	; 0x50
    a964:	9316      	str	r3, [sp, #88]	; 0x58
    a966:	9315      	str	r3, [sp, #84]	; 0x54
    a968:	ae32      	add	r6, sp, #200	; 0xc8
    a96a:	9319      	str	r3, [sp, #100]	; 0x64
    a96c:	931a      	str	r3, [sp, #104]	; 0x68
    a96e:	930a      	str	r3, [sp, #40]	; 0x28
    a970:	9c07      	ldr	r4, [sp, #28]
    a972:	7823      	ldrb	r3, [r4, #0]
    a974:	2b00      	cmp	r3, #0
    a976:	d101      	bne.n	a97c <_vfprintf_r+0xa8>
    a978:	f000 fd9e 	bl	b4b8 <_vfprintf_r+0xbe4>
    a97c:	2b25      	cmp	r3, #37	; 0x25
    a97e:	d103      	bne.n	a988 <_vfprintf_r+0xb4>
    a980:	f000 fd9a 	bl	b4b8 <_vfprintf_r+0xbe4>
    a984:	2b25      	cmp	r3, #37	; 0x25
    a986:	d003      	beq.n	a990 <_vfprintf_r+0xbc>
    a988:	3401      	adds	r4, #1
    a98a:	7823      	ldrb	r3, [r4, #0]
    a98c:	2b00      	cmp	r3, #0
    a98e:	d1f9      	bne.n	a984 <_vfprintf_r+0xb0>
    a990:	9b07      	ldr	r3, [sp, #28]
    a992:	1ae5      	subs	r5, r4, r3
    a994:	d010      	beq.n	a9b8 <_vfprintf_r+0xe4>
    a996:	9b07      	ldr	r3, [sp, #28]
    a998:	6075      	str	r5, [r6, #4]
    a99a:	6033      	str	r3, [r6, #0]
    a99c:	68bb      	ldr	r3, [r7, #8]
    a99e:	195b      	adds	r3, r3, r5
    a9a0:	60bb      	str	r3, [r7, #8]
    a9a2:	687b      	ldr	r3, [r7, #4]
    a9a4:	3301      	adds	r3, #1
    a9a6:	607b      	str	r3, [r7, #4]
    a9a8:	2b07      	cmp	r3, #7
    a9aa:	dc4c      	bgt.n	aa46 <_vfprintf_r+0x172>
    a9ac:	3608      	adds	r6, #8
    a9ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a9b0:	469c      	mov	ip, r3
    a9b2:	44ac      	add	ip, r5
    a9b4:	4663      	mov	r3, ip
    a9b6:	930a      	str	r3, [sp, #40]	; 0x28
    a9b8:	7823      	ldrb	r3, [r4, #0]
    a9ba:	2b00      	cmp	r3, #0
    a9bc:	d101      	bne.n	a9c2 <_vfprintf_r+0xee>
    a9be:	f000 fc99 	bl	b2f4 <_vfprintf_r+0xa20>
    a9c2:	1c63      	adds	r3, r4, #1
    a9c4:	9307      	str	r3, [sp, #28]
    a9c6:	2300      	movs	r3, #0
    a9c8:	aa16      	add	r2, sp, #88	; 0x58
    a9ca:	77d3      	strb	r3, [r2, #31]
    a9cc:	2201      	movs	r2, #1
    a9ce:	4252      	negs	r2, r2
    a9d0:	4692      	mov	sl, r2
    a9d2:	2200      	movs	r2, #0
    a9d4:	920b      	str	r2, [sp, #44]	; 0x2c
    a9d6:	3220      	adds	r2, #32
    a9d8:	4691      	mov	r9, r2
    a9da:	3220      	adds	r2, #32
    a9dc:	7863      	ldrb	r3, [r4, #1]
    a9de:	2100      	movs	r1, #0
    a9e0:	2000      	movs	r0, #0
    a9e2:	2400      	movs	r4, #0
    a9e4:	4694      	mov	ip, r2
    a9e6:	9a07      	ldr	r2, [sp, #28]
    a9e8:	3201      	adds	r2, #1
    a9ea:	9207      	str	r2, [sp, #28]
    a9ec:	001a      	movs	r2, r3
    a9ee:	3a20      	subs	r2, #32
    a9f0:	2a58      	cmp	r2, #88	; 0x58
    a9f2:	d900      	bls.n	a9f6 <_vfprintf_r+0x122>
    a9f4:	e2e7      	b.n	afc6 <_vfprintf_r+0x6f2>
    a9f6:	4d9c      	ldr	r5, [pc, #624]	; (ac68 <_vfprintf_r+0x394>)
    a9f8:	0092      	lsls	r2, r2, #2
    a9fa:	58aa      	ldr	r2, [r5, r2]
    a9fc:	4697      	mov	pc, r2
    a9fe:	464b      	mov	r3, r9
    aa00:	6d98      	ldr	r0, [r3, #88]	; 0x58
    aa02:	f003 f8c1 	bl	db88 <__retarget_lock_acquire_recursive>
    aa06:	464b      	mov	r3, r9
    aa08:	210c      	movs	r1, #12
    aa0a:	5e59      	ldrsh	r1, [r3, r1]
    aa0c:	b28b      	uxth	r3, r1
    aa0e:	e787      	b.n	a920 <_vfprintf_r+0x4c>
    aa10:	4649      	mov	r1, r9
    aa12:	9806      	ldr	r0, [sp, #24]
    aa14:	f001 fb0e 	bl	c034 <__swsetup_r>
    aa18:	464b      	mov	r3, r9
    aa1a:	2800      	cmp	r0, #0
    aa1c:	d03a      	beq.n	aa94 <_vfprintf_r+0x1c0>
    aa1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    aa20:	07db      	lsls	r3, r3, #31
    aa22:	d405      	bmi.n	aa30 <_vfprintf_r+0x15c>
    aa24:	464b      	mov	r3, r9
    aa26:	899b      	ldrh	r3, [r3, #12]
    aa28:	059b      	lsls	r3, r3, #22
    aa2a:	d401      	bmi.n	aa30 <_vfprintf_r+0x15c>
    aa2c:	f000 ffcf 	bl	b9ce <_vfprintf_r+0x10fa>
    aa30:	2301      	movs	r3, #1
    aa32:	425b      	negs	r3, r3
    aa34:	930a      	str	r3, [sp, #40]	; 0x28
    aa36:	980a      	ldr	r0, [sp, #40]	; 0x28
    aa38:	b043      	add	sp, #268	; 0x10c
    aa3a:	bc3c      	pop	{r2, r3, r4, r5}
    aa3c:	4690      	mov	r8, r2
    aa3e:	4699      	mov	r9, r3
    aa40:	46a2      	mov	sl, r4
    aa42:	46ab      	mov	fp, r5
    aa44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    aa46:	003a      	movs	r2, r7
    aa48:	4659      	mov	r1, fp
    aa4a:	9806      	ldr	r0, [sp, #24]
    aa4c:	f004 fa1e 	bl	ee8c <__sprint_r>
    aa50:	2800      	cmp	r0, #0
    aa52:	d001      	beq.n	aa58 <_vfprintf_r+0x184>
    aa54:	f000 fcce 	bl	b3f4 <_vfprintf_r+0xb20>
    aa58:	ae32      	add	r6, sp, #200	; 0xc8
    aa5a:	e7a8      	b.n	a9ae <_vfprintf_r+0xda>
    aa5c:	9806      	ldr	r0, [sp, #24]
    aa5e:	f002 fd51 	bl	d504 <__sinit>
    aa62:	e753      	b.n	a90c <_vfprintf_r+0x38>
    aa64:	464a      	mov	r2, r9
    aa66:	210e      	movs	r1, #14
    aa68:	5e52      	ldrsh	r2, [r2, r1]
    aa6a:	2a00      	cmp	r2, #0
    aa6c:	da00      	bge.n	aa70 <_vfprintf_r+0x19c>
    aa6e:	e770      	b.n	a952 <_vfprintf_r+0x7e>
    aa70:	464a      	mov	r2, r9
    aa72:	6e52      	ldr	r2, [r2, #100]	; 0x64
    aa74:	07d2      	lsls	r2, r2, #31
    aa76:	d405      	bmi.n	aa84 <_vfprintf_r+0x1b0>
    aa78:	059b      	lsls	r3, r3, #22
    aa7a:	d403      	bmi.n	aa84 <_vfprintf_r+0x1b0>
    aa7c:	464b      	mov	r3, r9
    aa7e:	6d98      	ldr	r0, [r3, #88]	; 0x58
    aa80:	f003 f884 	bl	db8c <__retarget_lock_release_recursive>
    aa84:	002b      	movs	r3, r5
    aa86:	0022      	movs	r2, r4
    aa88:	4649      	mov	r1, r9
    aa8a:	9806      	ldr	r0, [sp, #24]
    aa8c:	f001 fa8e 	bl	bfac <__sbprintf>
    aa90:	900a      	str	r0, [sp, #40]	; 0x28
    aa92:	e7d0      	b.n	aa36 <_vfprintf_r+0x162>
    aa94:	899b      	ldrh	r3, [r3, #12]
    aa96:	e757      	b.n	a948 <_vfprintf_r+0x74>
    aa98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    aa9a:	920f      	str	r2, [sp, #60]	; 0x3c
    aa9c:	425b      	negs	r3, r3
    aa9e:	930b      	str	r3, [sp, #44]	; 0x2c
    aaa0:	2304      	movs	r3, #4
    aaa2:	431c      	orrs	r4, r3
    aaa4:	9b07      	ldr	r3, [sp, #28]
    aaa6:	781b      	ldrb	r3, [r3, #0]
    aaa8:	e79d      	b.n	a9e6 <_vfprintf_r+0x112>
    aaaa:	9b07      	ldr	r3, [sp, #28]
    aaac:	2101      	movs	r1, #1
    aaae:	781b      	ldrb	r3, [r3, #0]
    aab0:	202b      	movs	r0, #43	; 0x2b
    aab2:	e798      	b.n	a9e6 <_vfprintf_r+0x112>
    aab4:	9b07      	ldr	r3, [sp, #28]
    aab6:	1c5a      	adds	r2, r3, #1
    aab8:	781b      	ldrb	r3, [r3, #0]
    aaba:	4690      	mov	r8, r2
    aabc:	2b2a      	cmp	r3, #42	; 0x2a
    aabe:	d101      	bne.n	aac4 <_vfprintf_r+0x1f0>
    aac0:	f001 fa38 	bl	bf34 <_vfprintf_r+0x1660>
    aac4:	001a      	movs	r2, r3
    aac6:	2500      	movs	r5, #0
    aac8:	3a30      	subs	r2, #48	; 0x30
    aaca:	46aa      	mov	sl, r5
    aacc:	2a09      	cmp	r2, #9
    aace:	d901      	bls.n	aad4 <_vfprintf_r+0x200>
    aad0:	f001 f96d 	bl	bdae <_vfprintf_r+0x14da>
    aad4:	0025      	movs	r5, r4
    aad6:	4643      	mov	r3, r8
    aad8:	4654      	mov	r4, sl
    aada:	4688      	mov	r8, r1
    aadc:	4682      	mov	sl, r0
    aade:	00a1      	lsls	r1, r4, #2
    aae0:	190c      	adds	r4, r1, r4
    aae2:	7818      	ldrb	r0, [r3, #0]
    aae4:	0064      	lsls	r4, r4, #1
    aae6:	18a4      	adds	r4, r4, r2
    aae8:	0002      	movs	r2, r0
    aaea:	1c59      	adds	r1, r3, #1
    aaec:	3a30      	subs	r2, #48	; 0x30
    aaee:	000b      	movs	r3, r1
    aaf0:	2a09      	cmp	r2, #9
    aaf2:	d9f4      	bls.n	aade <_vfprintf_r+0x20a>
    aaf4:	9107      	str	r1, [sp, #28]
    aaf6:	0003      	movs	r3, r0
    aaf8:	4641      	mov	r1, r8
    aafa:	4650      	mov	r0, sl
    aafc:	46a2      	mov	sl, r4
    aafe:	002c      	movs	r4, r5
    ab00:	e774      	b.n	a9ec <_vfprintf_r+0x118>
    ab02:	9312      	str	r3, [sp, #72]	; 0x48
    ab04:	2900      	cmp	r1, #0
    ab06:	d001      	beq.n	ab0c <_vfprintf_r+0x238>
    ab08:	f001 fa2e 	bl	bf68 <_vfprintf_r+0x1694>
    ab0c:	4b57      	ldr	r3, [pc, #348]	; (ac6c <_vfprintf_r+0x398>)
    ab0e:	9319      	str	r3, [sp, #100]	; 0x64
    ab10:	06a3      	lsls	r3, r4, #26
    ab12:	d501      	bpl.n	ab18 <_vfprintf_r+0x244>
    ab14:	f000 fe9a 	bl	b84c <_vfprintf_r+0xf78>
    ab18:	06e3      	lsls	r3, r4, #27
    ab1a:	d501      	bpl.n	ab20 <_vfprintf_r+0x24c>
    ab1c:	f000 fd9a 	bl	b654 <_vfprintf_r+0xd80>
    ab20:	0663      	lsls	r3, r4, #25
    ab22:	d401      	bmi.n	ab28 <_vfprintf_r+0x254>
    ab24:	f000 fd96 	bl	b654 <_vfprintf_r+0xd80>
    ab28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ab2a:	881a      	ldrh	r2, [r3, #0]
    ab2c:	920c      	str	r2, [sp, #48]	; 0x30
    ab2e:	2200      	movs	r2, #0
    ab30:	3304      	adds	r3, #4
    ab32:	920d      	str	r2, [sp, #52]	; 0x34
    ab34:	930f      	str	r3, [sp, #60]	; 0x3c
    ab36:	07e3      	lsls	r3, r4, #31
    ab38:	d401      	bmi.n	ab3e <_vfprintf_r+0x26a>
    ab3a:	f000 fd76 	bl	b62a <_vfprintf_r+0xd56>
    ab3e:	990c      	ldr	r1, [sp, #48]	; 0x30
    ab40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    ab42:	000b      	movs	r3, r1
    ab44:	4313      	orrs	r3, r2
    ab46:	001a      	movs	r2, r3
    ab48:	2302      	movs	r3, #2
    ab4a:	2a00      	cmp	r2, #0
    ab4c:	d008      	beq.n	ab60 <_vfprintf_r+0x28c>
    ab4e:	2030      	movs	r0, #48	; 0x30
    ab50:	a91e      	add	r1, sp, #120	; 0x78
    ab52:	7008      	strb	r0, [r1, #0]
    ab54:	2548      	movs	r5, #72	; 0x48
    ab56:	4668      	mov	r0, sp
    ab58:	1940      	adds	r0, r0, r5
    ab5a:	7800      	ldrb	r0, [r0, #0]
    ab5c:	431c      	orrs	r4, r3
    ab5e:	7048      	strb	r0, [r1, #1]
    ab60:	2100      	movs	r1, #0
    ab62:	4688      	mov	r8, r1
    ab64:	a816      	add	r0, sp, #88	; 0x58
    ab66:	77c1      	strb	r1, [r0, #31]
    ab68:	4651      	mov	r1, sl
    ab6a:	3101      	adds	r1, #1
    ab6c:	d100      	bne.n	ab70 <_vfprintf_r+0x29c>
    ab6e:	e0e6      	b.n	ad3e <_vfprintf_r+0x46a>
    ab70:	2180      	movs	r1, #128	; 0x80
    ab72:	0020      	movs	r0, r4
    ab74:	4388      	bics	r0, r1
    ab76:	9009      	str	r0, [sp, #36]	; 0x24
    ab78:	2a00      	cmp	r2, #0
    ab7a:	d000      	beq.n	ab7e <_vfprintf_r+0x2aa>
    ab7c:	e0e3      	b.n	ad46 <_vfprintf_r+0x472>
    ab7e:	4652      	mov	r2, sl
    ab80:	2a00      	cmp	r2, #0
    ab82:	d001      	beq.n	ab88 <_vfprintf_r+0x2b4>
    ab84:	f000 fc38 	bl	b3f8 <_vfprintf_r+0xb24>
    ab88:	2b00      	cmp	r3, #0
    ab8a:	d001      	beq.n	ab90 <_vfprintf_r+0x2bc>
    ab8c:	f000 fd0c 	bl	b5a8 <_vfprintf_r+0xcd4>
    ab90:	2001      	movs	r0, #1
    ab92:	ab32      	add	r3, sp, #200	; 0xc8
    ab94:	4020      	ands	r0, r4
    ab96:	900e      	str	r0, [sp, #56]	; 0x38
    ab98:	9311      	str	r3, [sp, #68]	; 0x44
    ab9a:	d008      	beq.n	abae <_vfprintf_r+0x2da>
    ab9c:	2327      	movs	r3, #39	; 0x27
    ab9e:	2130      	movs	r1, #48	; 0x30
    aba0:	aa28      	add	r2, sp, #160	; 0xa0
    aba2:	54d1      	strb	r1, [r2, r3]
    aba4:	aa16      	add	r2, sp, #88	; 0x58
    aba6:	4694      	mov	ip, r2
    aba8:	3348      	adds	r3, #72	; 0x48
    abaa:	4463      	add	r3, ip
    abac:	9311      	str	r3, [sp, #68]	; 0x44
    abae:	4653      	mov	r3, sl
    abb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    abb2:	9308      	str	r3, [sp, #32]
    abb4:	4592      	cmp	sl, r2
    abb6:	da00      	bge.n	abba <_vfprintf_r+0x2e6>
    abb8:	9208      	str	r2, [sp, #32]
    abba:	2300      	movs	r3, #0
    abbc:	9313      	str	r3, [sp, #76]	; 0x4c
    abbe:	4643      	mov	r3, r8
    abc0:	2b00      	cmp	r3, #0
    abc2:	d002      	beq.n	abca <_vfprintf_r+0x2f6>
    abc4:	9b08      	ldr	r3, [sp, #32]
    abc6:	3301      	adds	r3, #1
    abc8:	9308      	str	r3, [sp, #32]
    abca:	2302      	movs	r3, #2
    abcc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    abce:	401a      	ands	r2, r3
    abd0:	4691      	mov	r9, r2
    abd2:	d002      	beq.n	abda <_vfprintf_r+0x306>
    abd4:	9b08      	ldr	r3, [sp, #32]
    abd6:	3302      	adds	r3, #2
    abd8:	9308      	str	r3, [sp, #32]
    abda:	2384      	movs	r3, #132	; 0x84
    abdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    abde:	401a      	ands	r2, r3
    abe0:	9210      	str	r2, [sp, #64]	; 0x40
    abe2:	d000      	beq.n	abe6 <_vfprintf_r+0x312>
    abe4:	e207      	b.n	aff6 <_vfprintf_r+0x722>
    abe6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    abe8:	9a08      	ldr	r2, [sp, #32]
    abea:	1a9c      	subs	r4, r3, r2
    abec:	2c00      	cmp	r4, #0
    abee:	dc00      	bgt.n	abf2 <_vfprintf_r+0x31e>
    abf0:	e201      	b.n	aff6 <_vfprintf_r+0x722>
    abf2:	491f      	ldr	r1, [pc, #124]	; (ac70 <_vfprintf_r+0x39c>)
    abf4:	68ba      	ldr	r2, [r7, #8]
    abf6:	687b      	ldr	r3, [r7, #4]
    abf8:	4688      	mov	r8, r1
    abfa:	2c10      	cmp	r4, #16
    abfc:	dd21      	ble.n	ac42 <_vfprintf_r+0x36e>
    abfe:	0031      	movs	r1, r6
    ac00:	2510      	movs	r5, #16
    ac02:	465e      	mov	r6, fp
    ac04:	e003      	b.n	ac0e <_vfprintf_r+0x33a>
    ac06:	3c10      	subs	r4, #16
    ac08:	3108      	adds	r1, #8
    ac0a:	2c10      	cmp	r4, #16
    ac0c:	dd17      	ble.n	ac3e <_vfprintf_r+0x36a>
    ac0e:	4640      	mov	r0, r8
    ac10:	3210      	adds	r2, #16
    ac12:	3301      	adds	r3, #1
    ac14:	6008      	str	r0, [r1, #0]
    ac16:	604d      	str	r5, [r1, #4]
    ac18:	60ba      	str	r2, [r7, #8]
    ac1a:	607b      	str	r3, [r7, #4]
    ac1c:	2b07      	cmp	r3, #7
    ac1e:	ddf2      	ble.n	ac06 <_vfprintf_r+0x332>
    ac20:	003a      	movs	r2, r7
    ac22:	0031      	movs	r1, r6
    ac24:	9806      	ldr	r0, [sp, #24]
    ac26:	f004 f931 	bl	ee8c <__sprint_r>
    ac2a:	2800      	cmp	r0, #0
    ac2c:	d001      	beq.n	ac32 <_vfprintf_r+0x35e>
    ac2e:	f000 fccf 	bl	b5d0 <_vfprintf_r+0xcfc>
    ac32:	3c10      	subs	r4, #16
    ac34:	68ba      	ldr	r2, [r7, #8]
    ac36:	687b      	ldr	r3, [r7, #4]
    ac38:	a932      	add	r1, sp, #200	; 0xc8
    ac3a:	2c10      	cmp	r4, #16
    ac3c:	dce7      	bgt.n	ac0e <_vfprintf_r+0x33a>
    ac3e:	46b3      	mov	fp, r6
    ac40:	000e      	movs	r6, r1
    ac42:	4641      	mov	r1, r8
    ac44:	6074      	str	r4, [r6, #4]
    ac46:	3301      	adds	r3, #1
    ac48:	18a4      	adds	r4, r4, r2
    ac4a:	6031      	str	r1, [r6, #0]
    ac4c:	60bc      	str	r4, [r7, #8]
    ac4e:	607b      	str	r3, [r7, #4]
    ac50:	2b07      	cmp	r3, #7
    ac52:	dd01      	ble.n	ac58 <_vfprintf_r+0x384>
    ac54:	f000 fcae 	bl	b5b4 <_vfprintf_r+0xce0>
    ac58:	ab16      	add	r3, sp, #88	; 0x58
    ac5a:	7fdb      	ldrb	r3, [r3, #31]
    ac5c:	3608      	adds	r6, #8
    ac5e:	4698      	mov	r8, r3
    ac60:	e1ca      	b.n	aff8 <_vfprintf_r+0x724>
    ac62:	46c0      	nop			; (mov r8, r8)
    ac64:	ffffdfff 	.word	0xffffdfff
    ac68:	0000fe7c 	.word	0x0000fe7c
    ac6c:	00010004 	.word	0x00010004
    ac70:	00010024 	.word	0x00010024
    ac74:	2200      	movs	r2, #0
    ac76:	9d07      	ldr	r5, [sp, #28]
    ac78:	3b30      	subs	r3, #48	; 0x30
    ac7a:	46a8      	mov	r8, r5
    ac7c:	920b      	str	r2, [sp, #44]	; 0x2c
    ac7e:	001a      	movs	r2, r3
    ac80:	9408      	str	r4, [sp, #32]
    ac82:	002c      	movs	r4, r5
    ac84:	4655      	mov	r5, sl
    ac86:	4682      	mov	sl, r0
    ac88:	4640      	mov	r0, r8
    ac8a:	4688      	mov	r8, r1
    ac8c:	0011      	movs	r1, r2
    ac8e:	2200      	movs	r2, #0
    ac90:	0093      	lsls	r3, r2, #2
    ac92:	189a      	adds	r2, r3, r2
    ac94:	7803      	ldrb	r3, [r0, #0]
    ac96:	0052      	lsls	r2, r2, #1
    ac98:	188a      	adds	r2, r1, r2
    ac9a:	0019      	movs	r1, r3
    ac9c:	3401      	adds	r4, #1
    ac9e:	3930      	subs	r1, #48	; 0x30
    aca0:	0020      	movs	r0, r4
    aca2:	2909      	cmp	r1, #9
    aca4:	d9f4      	bls.n	ac90 <_vfprintf_r+0x3bc>
    aca6:	9407      	str	r4, [sp, #28]
    aca8:	4650      	mov	r0, sl
    acaa:	9c08      	ldr	r4, [sp, #32]
    acac:	920b      	str	r2, [sp, #44]	; 0x2c
    acae:	4641      	mov	r1, r8
    acb0:	46aa      	mov	sl, r5
    acb2:	e69b      	b.n	a9ec <_vfprintf_r+0x118>
    acb4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    acb6:	9312      	str	r3, [sp, #72]	; 0x48
    acb8:	6813      	ldr	r3, [r2, #0]
    acba:	2120      	movs	r1, #32
    acbc:	9308      	str	r3, [sp, #32]
    acbe:	466b      	mov	r3, sp
    acc0:	185b      	adds	r3, r3, r1
    acc2:	781b      	ldrb	r3, [r3, #0]
    acc4:	ad28      	add	r5, sp, #160	; 0xa0
    acc6:	702b      	strb	r3, [r5, #0]
    acc8:	2300      	movs	r3, #0
    acca:	a916      	add	r1, sp, #88	; 0x58
    accc:	77cb      	strb	r3, [r1, #31]
    acce:	0013      	movs	r3, r2
    acd0:	3304      	adds	r3, #4
    acd2:	930f      	str	r3, [sp, #60]	; 0x3c
    acd4:	2300      	movs	r3, #0
    acd6:	9409      	str	r4, [sp, #36]	; 0x24
    acd8:	4698      	mov	r8, r3
    acda:	3301      	adds	r3, #1
    acdc:	9308      	str	r3, [sp, #32]
    acde:	930e      	str	r3, [sp, #56]	; 0x38
    ace0:	2300      	movs	r3, #0
    ace2:	9511      	str	r5, [sp, #68]	; 0x44
    ace4:	469a      	mov	sl, r3
    ace6:	9313      	str	r3, [sp, #76]	; 0x4c
    ace8:	e76f      	b.n	abca <_vfprintf_r+0x2f6>
    acea:	9312      	str	r3, [sp, #72]	; 0x48
    acec:	2900      	cmp	r1, #0
    acee:	d001      	beq.n	acf4 <_vfprintf_r+0x420>
    acf0:	f001 f94d 	bl	bf8e <_vfprintf_r+0x16ba>
    acf4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    acf6:	06a3      	lsls	r3, r4, #26
    acf8:	d501      	bpl.n	acfe <_vfprintf_r+0x42a>
    acfa:	f000 fd5a 	bl	b7b2 <_vfprintf_r+0xede>
    acfe:	06e3      	lsls	r3, r4, #27
    ad00:	d501      	bpl.n	ad06 <_vfprintf_r+0x432>
    ad02:	f000 fcab 	bl	b65c <_vfprintf_r+0xd88>
    ad06:	0663      	lsls	r3, r4, #25
    ad08:	d401      	bmi.n	ad0e <_vfprintf_r+0x43a>
    ad0a:	f000 fca7 	bl	b65c <_vfprintf_r+0xd88>
    ad0e:	2100      	movs	r1, #0
    ad10:	5e53      	ldrsh	r3, [r2, r1]
    ad12:	930c      	str	r3, [sp, #48]	; 0x30
    ad14:	3204      	adds	r2, #4
    ad16:	17db      	asrs	r3, r3, #31
    ad18:	930d      	str	r3, [sp, #52]	; 0x34
    ad1a:	920f      	str	r2, [sp, #60]	; 0x3c
    ad1c:	2b00      	cmp	r3, #0
    ad1e:	da01      	bge.n	ad24 <_vfprintf_r+0x450>
    ad20:	f000 fdb2 	bl	b888 <_vfprintf_r+0xfb4>
    ad24:	990c      	ldr	r1, [sp, #48]	; 0x30
    ad26:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    ad28:	0008      	movs	r0, r1
    ad2a:	4651      	mov	r1, sl
    ad2c:	ab16      	add	r3, sp, #88	; 0x58
    ad2e:	7fdb      	ldrb	r3, [r3, #31]
    ad30:	4310      	orrs	r0, r2
    ad32:	4698      	mov	r8, r3
    ad34:	0002      	movs	r2, r0
    ad36:	2301      	movs	r3, #1
    ad38:	3101      	adds	r1, #1
    ad3a:	d000      	beq.n	ad3e <_vfprintf_r+0x46a>
    ad3c:	e718      	b.n	ab70 <_vfprintf_r+0x29c>
    ad3e:	2a00      	cmp	r2, #0
    ad40:	d100      	bne.n	ad44 <_vfprintf_r+0x470>
    ad42:	e35a      	b.n	b3fa <_vfprintf_r+0xb26>
    ad44:	9409      	str	r4, [sp, #36]	; 0x24
    ad46:	2b01      	cmp	r3, #1
    ad48:	d101      	bne.n	ad4e <_vfprintf_r+0x47a>
    ad4a:	f000 fc06 	bl	b55a <_vfprintf_r+0xc86>
    ad4e:	2b02      	cmp	r3, #2
    ad50:	d000      	beq.n	ad54 <_vfprintf_r+0x480>
    ad52:	e380      	b.n	b456 <_vfprintf_r+0xb82>
    ad54:	9c19      	ldr	r4, [sp, #100]	; 0x64
    ad56:	200f      	movs	r0, #15
    ad58:	46a1      	mov	r9, r4
    ad5a:	46b4      	mov	ip, r6
    ad5c:	ab32      	add	r3, sp, #200	; 0xc8
    ad5e:	0019      	movs	r1, r3
    ad60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ad62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ad64:	0004      	movs	r4, r0
    ad66:	464d      	mov	r5, r9
    ad68:	4014      	ands	r4, r2
    ad6a:	5d2c      	ldrb	r4, [r5, r4]
    ad6c:	071e      	lsls	r6, r3, #28
    ad6e:	0915      	lsrs	r5, r2, #4
    ad70:	3901      	subs	r1, #1
    ad72:	432e      	orrs	r6, r5
    ad74:	700c      	strb	r4, [r1, #0]
    ad76:	091c      	lsrs	r4, r3, #4
    ad78:	0023      	movs	r3, r4
    ad7a:	0034      	movs	r4, r6
    ad7c:	0032      	movs	r2, r6
    ad7e:	431c      	orrs	r4, r3
    ad80:	d1f0      	bne.n	ad64 <_vfprintf_r+0x490>
    ad82:	920c      	str	r2, [sp, #48]	; 0x30
    ad84:	930d      	str	r3, [sp, #52]	; 0x34
    ad86:	ab32      	add	r3, sp, #200	; 0xc8
    ad88:	1a5b      	subs	r3, r3, r1
    ad8a:	9111      	str	r1, [sp, #68]	; 0x44
    ad8c:	4666      	mov	r6, ip
    ad8e:	930e      	str	r3, [sp, #56]	; 0x38
    ad90:	e70d      	b.n	abae <_vfprintf_r+0x2da>
    ad92:	4663      	mov	r3, ip
    ad94:	431c      	orrs	r4, r3
    ad96:	9b07      	ldr	r3, [sp, #28]
    ad98:	781b      	ldrb	r3, [r3, #0]
    ad9a:	e624      	b.n	a9e6 <_vfprintf_r+0x112>
    ad9c:	9b07      	ldr	r3, [sp, #28]
    ad9e:	781b      	ldrb	r3, [r3, #0]
    ada0:	2b6c      	cmp	r3, #108	; 0x6c
    ada2:	d101      	bne.n	ada8 <_vfprintf_r+0x4d4>
    ada4:	f000 fe8c 	bl	bac0 <_vfprintf_r+0x11ec>
    ada8:	2210      	movs	r2, #16
    adaa:	4314      	orrs	r4, r2
    adac:	e61b      	b.n	a9e6 <_vfprintf_r+0x112>
    adae:	2900      	cmp	r1, #0
    adb0:	d001      	beq.n	adb6 <_vfprintf_r+0x4e2>
    adb2:	f001 f8d5 	bl	bf60 <_vfprintf_r+0x168c>
    adb6:	06a3      	lsls	r3, r4, #26
    adb8:	d501      	bpl.n	adbe <_vfprintf_r+0x4ea>
    adba:	f000 fe76 	bl	baaa <_vfprintf_r+0x11d6>
    adbe:	06e3      	lsls	r3, r4, #27
    adc0:	d500      	bpl.n	adc4 <_vfprintf_r+0x4f0>
    adc2:	e110      	b.n	afe6 <_vfprintf_r+0x712>
    adc4:	0663      	lsls	r3, r4, #25
    adc6:	d400      	bmi.n	adca <_vfprintf_r+0x4f6>
    adc8:	e10d      	b.n	afe6 <_vfprintf_r+0x712>
    adca:	4669      	mov	r1, sp
    adcc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    adce:	8d09      	ldrh	r1, [r1, #40]	; 0x28
    add0:	681a      	ldr	r2, [r3, #0]
    add2:	3304      	adds	r3, #4
    add4:	9208      	str	r2, [sp, #32]
    add6:	8011      	strh	r1, [r2, #0]
    add8:	930f      	str	r3, [sp, #60]	; 0x3c
    adda:	e5c9      	b.n	a970 <_vfprintf_r+0x9c>
    addc:	990f      	ldr	r1, [sp, #60]	; 0x3c
    adde:	2230      	movs	r2, #48	; 0x30
    ade0:	680b      	ldr	r3, [r1, #0]
    ade2:	930c      	str	r3, [sp, #48]	; 0x30
    ade4:	2300      	movs	r3, #0
    ade6:	930d      	str	r3, [sp, #52]	; 0x34
    ade8:	3302      	adds	r3, #2
    adea:	431c      	orrs	r4, r3
    adec:	ab1e      	add	r3, sp, #120	; 0x78
    adee:	701a      	strb	r2, [r3, #0]
    adf0:	3248      	adds	r2, #72	; 0x48
    adf2:	705a      	strb	r2, [r3, #1]
    adf4:	000b      	movs	r3, r1
    adf6:	3304      	adds	r3, #4
    adf8:	930f      	str	r3, [sp, #60]	; 0x3c
    adfa:	4bc1      	ldr	r3, [pc, #772]	; (b100 <_vfprintf_r+0x82c>)
    adfc:	9212      	str	r2, [sp, #72]	; 0x48
    adfe:	9319      	str	r3, [sp, #100]	; 0x64
    ae00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ae02:	2302      	movs	r3, #2
    ae04:	e6ac      	b.n	ab60 <_vfprintf_r+0x28c>
    ae06:	464b      	mov	r3, r9
    ae08:	431c      	orrs	r4, r3
    ae0a:	9b07      	ldr	r3, [sp, #28]
    ae0c:	781b      	ldrb	r3, [r3, #0]
    ae0e:	e5ea      	b.n	a9e6 <_vfprintf_r+0x112>
    ae10:	9312      	str	r3, [sp, #72]	; 0x48
    ae12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ae14:	a916      	add	r1, sp, #88	; 0x58
    ae16:	1d1d      	adds	r5, r3, #4
    ae18:	681b      	ldr	r3, [r3, #0]
    ae1a:	001a      	movs	r2, r3
    ae1c:	9311      	str	r3, [sp, #68]	; 0x44
    ae1e:	2300      	movs	r3, #0
    ae20:	77cb      	strb	r3, [r1, #31]
    ae22:	2a00      	cmp	r2, #0
    ae24:	d101      	bne.n	ae2a <_vfprintf_r+0x556>
    ae26:	f000 ff01 	bl	bc2c <_vfprintf_r+0x1358>
    ae2a:	4653      	mov	r3, sl
    ae2c:	3301      	adds	r3, #1
    ae2e:	d101      	bne.n	ae34 <_vfprintf_r+0x560>
    ae30:	f000 fe64 	bl	bafc <_vfprintf_r+0x1228>
    ae34:	4652      	mov	r2, sl
    ae36:	2100      	movs	r1, #0
    ae38:	9811      	ldr	r0, [sp, #68]	; 0x44
    ae3a:	f003 f9df 	bl	e1fc <memchr>
    ae3e:	2800      	cmp	r0, #0
    ae40:	d101      	bne.n	ae46 <_vfprintf_r+0x572>
    ae42:	f000 ff78 	bl	bd36 <_vfprintf_r+0x1462>
    ae46:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ae48:	1ac3      	subs	r3, r0, r3
    ae4a:	001a      	movs	r2, r3
    ae4c:	930e      	str	r3, [sp, #56]	; 0x38
    ae4e:	43db      	mvns	r3, r3
    ae50:	17db      	asrs	r3, r3, #31
    ae52:	401a      	ands	r2, r3
    ae54:	ab16      	add	r3, sp, #88	; 0x58
    ae56:	7fdb      	ldrb	r3, [r3, #31]
    ae58:	9208      	str	r2, [sp, #32]
    ae5a:	4698      	mov	r8, r3
    ae5c:	2300      	movs	r3, #0
    ae5e:	950f      	str	r5, [sp, #60]	; 0x3c
    ae60:	9409      	str	r4, [sp, #36]	; 0x24
    ae62:	469a      	mov	sl, r3
    ae64:	9313      	str	r3, [sp, #76]	; 0x4c
    ae66:	e6aa      	b.n	abbe <_vfprintf_r+0x2ea>
    ae68:	2308      	movs	r3, #8
    ae6a:	431c      	orrs	r4, r3
    ae6c:	9b07      	ldr	r3, [sp, #28]
    ae6e:	781b      	ldrb	r3, [r3, #0]
    ae70:	e5b9      	b.n	a9e6 <_vfprintf_r+0x112>
    ae72:	9312      	str	r3, [sp, #72]	; 0x48
    ae74:	2310      	movs	r3, #16
    ae76:	431c      	orrs	r4, r3
    ae78:	06a3      	lsls	r3, r4, #26
    ae7a:	d501      	bpl.n	ae80 <_vfprintf_r+0x5ac>
    ae7c:	f000 fca7 	bl	b7ce <_vfprintf_r+0xefa>
    ae80:	06e3      	lsls	r3, r4, #27
    ae82:	d500      	bpl.n	ae86 <_vfprintf_r+0x5b2>
    ae84:	e3ee      	b.n	b664 <_vfprintf_r+0xd90>
    ae86:	0663      	lsls	r3, r4, #25
    ae88:	d400      	bmi.n	ae8c <_vfprintf_r+0x5b8>
    ae8a:	e3eb      	b.n	b664 <_vfprintf_r+0xd90>
    ae8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ae8e:	881a      	ldrh	r2, [r3, #0]
    ae90:	920c      	str	r2, [sp, #48]	; 0x30
    ae92:	2200      	movs	r2, #0
    ae94:	3304      	adds	r3, #4
    ae96:	920d      	str	r2, [sp, #52]	; 0x34
    ae98:	930f      	str	r3, [sp, #60]	; 0x3c
    ae9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ae9c:	2300      	movs	r3, #0
    ae9e:	e65f      	b.n	ab60 <_vfprintf_r+0x28c>
    aea0:	9312      	str	r3, [sp, #72]	; 0x48
    aea2:	2310      	movs	r3, #16
    aea4:	431c      	orrs	r4, r3
    aea6:	06a3      	lsls	r3, r4, #26
    aea8:	d501      	bpl.n	aeae <_vfprintf_r+0x5da>
    aeaa:	f000 fcba 	bl	b822 <_vfprintf_r+0xf4e>
    aeae:	06e3      	lsls	r3, r4, #27
    aeb0:	d500      	bpl.n	aeb4 <_vfprintf_r+0x5e0>
    aeb2:	e3da      	b.n	b66a <_vfprintf_r+0xd96>
    aeb4:	0663      	lsls	r3, r4, #25
    aeb6:	d400      	bmi.n	aeba <_vfprintf_r+0x5e6>
    aeb8:	e3d7      	b.n	b66a <_vfprintf_r+0xd96>
    aeba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    aebc:	881a      	ldrh	r2, [r3, #0]
    aebe:	920c      	str	r2, [sp, #48]	; 0x30
    aec0:	2200      	movs	r2, #0
    aec2:	3304      	adds	r3, #4
    aec4:	920d      	str	r2, [sp, #52]	; 0x34
    aec6:	930f      	str	r3, [sp, #60]	; 0x3c
    aec8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    aeca:	2301      	movs	r3, #1
    aecc:	e648      	b.n	ab60 <_vfprintf_r+0x28c>
    aece:	9312      	str	r3, [sp, #72]	; 0x48
    aed0:	2900      	cmp	r1, #0
    aed2:	d001      	beq.n	aed8 <_vfprintf_r+0x604>
    aed4:	f001 f857 	bl	bf86 <_vfprintf_r+0x16b2>
    aed8:	4b8a      	ldr	r3, [pc, #552]	; (b104 <_vfprintf_r+0x830>)
    aeda:	9319      	str	r3, [sp, #100]	; 0x64
    aedc:	e618      	b.n	ab10 <_vfprintf_r+0x23c>
    aede:	2301      	movs	r3, #1
    aee0:	431c      	orrs	r4, r3
    aee2:	9b07      	ldr	r3, [sp, #28]
    aee4:	781b      	ldrb	r3, [r3, #0]
    aee6:	e57e      	b.n	a9e6 <_vfprintf_r+0x112>
    aee8:	2380      	movs	r3, #128	; 0x80
    aeea:	431c      	orrs	r4, r3
    aeec:	9b07      	ldr	r3, [sp, #28]
    aeee:	781b      	ldrb	r3, [r3, #0]
    aef0:	e579      	b.n	a9e6 <_vfprintf_r+0x112>
    aef2:	9b07      	ldr	r3, [sp, #28]
    aef4:	781b      	ldrb	r3, [r3, #0]
    aef6:	2800      	cmp	r0, #0
    aef8:	d000      	beq.n	aefc <_vfprintf_r+0x628>
    aefa:	e574      	b.n	a9e6 <_vfprintf_r+0x112>
    aefc:	2101      	movs	r1, #1
    aefe:	3020      	adds	r0, #32
    af00:	e571      	b.n	a9e6 <_vfprintf_r+0x112>
    af02:	9312      	str	r3, [sp, #72]	; 0x48
    af04:	2900      	cmp	r1, #0
    af06:	d001      	beq.n	af0c <_vfprintf_r+0x638>
    af08:	f001 f839 	bl	bf7e <_vfprintf_r+0x16aa>
    af0c:	2207      	movs	r2, #7
    af0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    af10:	3307      	adds	r3, #7
    af12:	4393      	bics	r3, r2
    af14:	3201      	adds	r2, #1
    af16:	4694      	mov	ip, r2
    af18:	449c      	add	ip, r3
    af1a:	4662      	mov	r2, ip
    af1c:	920f      	str	r2, [sp, #60]	; 0x3c
    af1e:	681a      	ldr	r2, [r3, #0]
    af20:	9216      	str	r2, [sp, #88]	; 0x58
    af22:	685b      	ldr	r3, [r3, #4]
    af24:	2201      	movs	r2, #1
    af26:	9315      	str	r3, [sp, #84]	; 0x54
    af28:	9b15      	ldr	r3, [sp, #84]	; 0x54
    af2a:	9d16      	ldr	r5, [sp, #88]	; 0x58
    af2c:	005b      	lsls	r3, r3, #1
    af2e:	085b      	lsrs	r3, r3, #1
    af30:	4698      	mov	r8, r3
    af32:	4252      	negs	r2, r2
    af34:	4b74      	ldr	r3, [pc, #464]	; (b108 <_vfprintf_r+0x834>)
    af36:	0028      	movs	r0, r5
    af38:	4641      	mov	r1, r8
    af3a:	f004 fde7 	bl	fb0c <__aeabi_dcmpun>
    af3e:	2800      	cmp	r0, #0
    af40:	d001      	beq.n	af46 <_vfprintf_r+0x672>
    af42:	f000 fcb4 	bl	b8ae <_vfprintf_r+0xfda>
    af46:	2201      	movs	r2, #1
    af48:	4b6f      	ldr	r3, [pc, #444]	; (b108 <_vfprintf_r+0x834>)
    af4a:	4252      	negs	r2, r2
    af4c:	0028      	movs	r0, r5
    af4e:	4641      	mov	r1, r8
    af50:	f7ff f9a2 	bl	a298 <__aeabi_dcmple>
    af54:	2800      	cmp	r0, #0
    af56:	d001      	beq.n	af5c <_vfprintf_r+0x688>
    af58:	f000 fca9 	bl	b8ae <_vfprintf_r+0xfda>
    af5c:	2200      	movs	r2, #0
    af5e:	2300      	movs	r3, #0
    af60:	9816      	ldr	r0, [sp, #88]	; 0x58
    af62:	9915      	ldr	r1, [sp, #84]	; 0x54
    af64:	f7ff f98e 	bl	a284 <__aeabi_dcmplt>
    af68:	2800      	cmp	r0, #0
    af6a:	d001      	beq.n	af70 <_vfprintf_r+0x69c>
    af6c:	f000 fd55 	bl	ba1a <_vfprintf_r+0x1146>
    af70:	ab16      	add	r3, sp, #88	; 0x58
    af72:	7fdb      	ldrb	r3, [r3, #31]
    af74:	4698      	mov	r8, r3
    af76:	9b12      	ldr	r3, [sp, #72]	; 0x48
    af78:	2b47      	cmp	r3, #71	; 0x47
    af7a:	dd01      	ble.n	af80 <_vfprintf_r+0x6ac>
    af7c:	f000 fdb4 	bl	bae8 <_vfprintf_r+0x1214>
    af80:	4b62      	ldr	r3, [pc, #392]	; (b10c <_vfprintf_r+0x838>)
    af82:	9311      	str	r3, [sp, #68]	; 0x44
    af84:	2380      	movs	r3, #128	; 0x80
    af86:	439c      	bics	r4, r3
    af88:	3b7d      	subs	r3, #125	; 0x7d
    af8a:	9308      	str	r3, [sp, #32]
    af8c:	930e      	str	r3, [sp, #56]	; 0x38
    af8e:	2300      	movs	r3, #0
    af90:	9409      	str	r4, [sp, #36]	; 0x24
    af92:	469a      	mov	sl, r3
    af94:	9313      	str	r3, [sp, #76]	; 0x4c
    af96:	e612      	b.n	abbe <_vfprintf_r+0x2ea>
    af98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    af9a:	1d1a      	adds	r2, r3, #4
    af9c:	681b      	ldr	r3, [r3, #0]
    af9e:	930b      	str	r3, [sp, #44]	; 0x2c
    afa0:	2b00      	cmp	r3, #0
    afa2:	da00      	bge.n	afa6 <_vfprintf_r+0x6d2>
    afa4:	e578      	b.n	aa98 <_vfprintf_r+0x1c4>
    afa6:	9b07      	ldr	r3, [sp, #28]
    afa8:	920f      	str	r2, [sp, #60]	; 0x3c
    afaa:	781b      	ldrb	r3, [r3, #0]
    afac:	e51b      	b.n	a9e6 <_vfprintf_r+0x112>
    afae:	9312      	str	r3, [sp, #72]	; 0x48
    afb0:	2900      	cmp	r1, #0
    afb2:	d001      	beq.n	afb8 <_vfprintf_r+0x6e4>
    afb4:	f000 ffcc 	bl	bf50 <_vfprintf_r+0x167c>
    afb8:	2310      	movs	r3, #16
    afba:	431c      	orrs	r4, r3
    afbc:	e69a      	b.n	acf4 <_vfprintf_r+0x420>
    afbe:	9312      	str	r3, [sp, #72]	; 0x48
    afc0:	e771      	b.n	aea6 <_vfprintf_r+0x5d2>
    afc2:	9312      	str	r3, [sp, #72]	; 0x48
    afc4:	e758      	b.n	ae78 <_vfprintf_r+0x5a4>
    afc6:	9312      	str	r3, [sp, #72]	; 0x48
    afc8:	2900      	cmp	r1, #0
    afca:	d001      	beq.n	afd0 <_vfprintf_r+0x6fc>
    afcc:	f000 ffd3 	bl	bf76 <_vfprintf_r+0x16a2>
    afd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    afd2:	2b00      	cmp	r3, #0
    afd4:	d100      	bne.n	afd8 <_vfprintf_r+0x704>
    afd6:	e18d      	b.n	b2f4 <_vfprintf_r+0xa20>
    afd8:	ad28      	add	r5, sp, #160	; 0xa0
    afda:	702b      	strb	r3, [r5, #0]
    afdc:	2300      	movs	r3, #0
    afde:	aa16      	add	r2, sp, #88	; 0x58
    afe0:	77d3      	strb	r3, [r2, #31]
    afe2:	9409      	str	r4, [sp, #36]	; 0x24
    afe4:	e678      	b.n	acd8 <_vfprintf_r+0x404>
    afe6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    afe8:	990a      	ldr	r1, [sp, #40]	; 0x28
    afea:	6813      	ldr	r3, [r2, #0]
    afec:	6019      	str	r1, [r3, #0]
    afee:	0013      	movs	r3, r2
    aff0:	3304      	adds	r3, #4
    aff2:	930f      	str	r3, [sp, #60]	; 0x3c
    aff4:	e4bc      	b.n	a970 <_vfprintf_r+0x9c>
    aff6:	68bc      	ldr	r4, [r7, #8]
    aff8:	4643      	mov	r3, r8
    affa:	2b00      	cmp	r3, #0
    affc:	d00f      	beq.n	b01e <_vfprintf_r+0x74a>
    affe:	aa16      	add	r2, sp, #88	; 0x58
    b000:	231f      	movs	r3, #31
    b002:	4694      	mov	ip, r2
    b004:	4463      	add	r3, ip
    b006:	6033      	str	r3, [r6, #0]
    b008:	2301      	movs	r3, #1
    b00a:	6073      	str	r3, [r6, #4]
    b00c:	687b      	ldr	r3, [r7, #4]
    b00e:	3401      	adds	r4, #1
    b010:	3301      	adds	r3, #1
    b012:	60bc      	str	r4, [r7, #8]
    b014:	607b      	str	r3, [r7, #4]
    b016:	2b07      	cmp	r3, #7
    b018:	dd00      	ble.n	b01c <_vfprintf_r+0x748>
    b01a:	e203      	b.n	b424 <_vfprintf_r+0xb50>
    b01c:	3608      	adds	r6, #8
    b01e:	464b      	mov	r3, r9
    b020:	2b00      	cmp	r3, #0
    b022:	d00c      	beq.n	b03e <_vfprintf_r+0x76a>
    b024:	ab1e      	add	r3, sp, #120	; 0x78
    b026:	6033      	str	r3, [r6, #0]
    b028:	2302      	movs	r3, #2
    b02a:	6073      	str	r3, [r6, #4]
    b02c:	687b      	ldr	r3, [r7, #4]
    b02e:	3402      	adds	r4, #2
    b030:	3301      	adds	r3, #1
    b032:	60bc      	str	r4, [r7, #8]
    b034:	607b      	str	r3, [r7, #4]
    b036:	2b07      	cmp	r3, #7
    b038:	dd00      	ble.n	b03c <_vfprintf_r+0x768>
    b03a:	e1fd      	b.n	b438 <_vfprintf_r+0xb64>
    b03c:	3608      	adds	r6, #8
    b03e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    b040:	2b80      	cmp	r3, #128	; 0x80
    b042:	d100      	bne.n	b046 <_vfprintf_r+0x772>
    b044:	e173      	b.n	b32e <_vfprintf_r+0xa5a>
    b046:	4653      	mov	r3, sl
    b048:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    b04a:	1a9d      	subs	r5, r3, r2
    b04c:	2d00      	cmp	r5, #0
    b04e:	dd32      	ble.n	b0b6 <_vfprintf_r+0x7e2>
    b050:	4a2f      	ldr	r2, [pc, #188]	; (b110 <_vfprintf_r+0x83c>)
    b052:	687b      	ldr	r3, [r7, #4]
    b054:	4691      	mov	r9, r2
    b056:	2d10      	cmp	r5, #16
    b058:	dd22      	ble.n	b0a0 <_vfprintf_r+0x7cc>
    b05a:	2210      	movs	r2, #16
    b05c:	4692      	mov	sl, r2
    b05e:	0022      	movs	r2, r4
    b060:	465c      	mov	r4, fp
    b062:	e003      	b.n	b06c <_vfprintf_r+0x798>
    b064:	3d10      	subs	r5, #16
    b066:	3608      	adds	r6, #8
    b068:	2d10      	cmp	r5, #16
    b06a:	dd17      	ble.n	b09c <_vfprintf_r+0x7c8>
    b06c:	4649      	mov	r1, r9
    b06e:	6031      	str	r1, [r6, #0]
    b070:	4651      	mov	r1, sl
    b072:	3210      	adds	r2, #16
    b074:	3301      	adds	r3, #1
    b076:	6071      	str	r1, [r6, #4]
    b078:	60ba      	str	r2, [r7, #8]
    b07a:	607b      	str	r3, [r7, #4]
    b07c:	2b07      	cmp	r3, #7
    b07e:	ddf1      	ble.n	b064 <_vfprintf_r+0x790>
    b080:	003a      	movs	r2, r7
    b082:	0021      	movs	r1, r4
    b084:	9806      	ldr	r0, [sp, #24]
    b086:	f003 ff01 	bl	ee8c <__sprint_r>
    b08a:	2800      	cmp	r0, #0
    b08c:	d000      	beq.n	b090 <_vfprintf_r+0x7bc>
    b08e:	e18a      	b.n	b3a6 <_vfprintf_r+0xad2>
    b090:	3d10      	subs	r5, #16
    b092:	68ba      	ldr	r2, [r7, #8]
    b094:	687b      	ldr	r3, [r7, #4]
    b096:	ae32      	add	r6, sp, #200	; 0xc8
    b098:	2d10      	cmp	r5, #16
    b09a:	dce7      	bgt.n	b06c <_vfprintf_r+0x798>
    b09c:	46a3      	mov	fp, r4
    b09e:	0014      	movs	r4, r2
    b0a0:	464a      	mov	r2, r9
    b0a2:	1964      	adds	r4, r4, r5
    b0a4:	3301      	adds	r3, #1
    b0a6:	6032      	str	r2, [r6, #0]
    b0a8:	6075      	str	r5, [r6, #4]
    b0aa:	60bc      	str	r4, [r7, #8]
    b0ac:	607b      	str	r3, [r7, #4]
    b0ae:	2b07      	cmp	r3, #7
    b0b0:	dd00      	ble.n	b0b4 <_vfprintf_r+0x7e0>
    b0b2:	e1ad      	b.n	b410 <_vfprintf_r+0xb3c>
    b0b4:	3608      	adds	r6, #8
    b0b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b0b8:	05db      	lsls	r3, r3, #23
    b0ba:	d500      	bpl.n	b0be <_vfprintf_r+0x7ea>
    b0bc:	e0be      	b.n	b23c <_vfprintf_r+0x968>
    b0be:	9b11      	ldr	r3, [sp, #68]	; 0x44
    b0c0:	6033      	str	r3, [r6, #0]
    b0c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b0c4:	469c      	mov	ip, r3
    b0c6:	6073      	str	r3, [r6, #4]
    b0c8:	687b      	ldr	r3, [r7, #4]
    b0ca:	4464      	add	r4, ip
    b0cc:	3301      	adds	r3, #1
    b0ce:	60bc      	str	r4, [r7, #8]
    b0d0:	607b      	str	r3, [r7, #4]
    b0d2:	2b07      	cmp	r3, #7
    b0d4:	dd00      	ble.n	b0d8 <_vfprintf_r+0x804>
    b0d6:	e0a6      	b.n	b226 <_vfprintf_r+0x952>
    b0d8:	3608      	adds	r6, #8
    b0da:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b0dc:	075b      	lsls	r3, r3, #29
    b0de:	d54a      	bpl.n	b176 <_vfprintf_r+0x8a2>
    b0e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b0e2:	9a08      	ldr	r2, [sp, #32]
    b0e4:	1a9d      	subs	r5, r3, r2
    b0e6:	2d00      	cmp	r5, #0
    b0e8:	dd45      	ble.n	b176 <_vfprintf_r+0x8a2>
    b0ea:	4a0a      	ldr	r2, [pc, #40]	; (b114 <_vfprintf_r+0x840>)
    b0ec:	687b      	ldr	r3, [r7, #4]
    b0ee:	4690      	mov	r8, r2
    b0f0:	2d10      	cmp	r5, #16
    b0f2:	dd2f      	ble.n	b154 <_vfprintf_r+0x880>
    b0f4:	2210      	movs	r2, #16
    b0f6:	4691      	mov	r9, r2
    b0f8:	0022      	movs	r2, r4
    b0fa:	465c      	mov	r4, fp
    b0fc:	e010      	b.n	b120 <_vfprintf_r+0x84c>
    b0fe:	46c0      	nop			; (mov r8, r8)
    b100:	00010004 	.word	0x00010004
    b104:	0000fff0 	.word	0x0000fff0
    b108:	7fefffff 	.word	0x7fefffff
    b10c:	0000ffe0 	.word	0x0000ffe0
    b110:	00010034 	.word	0x00010034
    b114:	00010024 	.word	0x00010024
    b118:	3d10      	subs	r5, #16
    b11a:	3608      	adds	r6, #8
    b11c:	2d10      	cmp	r5, #16
    b11e:	dd17      	ble.n	b150 <_vfprintf_r+0x87c>
    b120:	49d1      	ldr	r1, [pc, #836]	; (b468 <_vfprintf_r+0xb94>)
    b122:	3210      	adds	r2, #16
    b124:	6031      	str	r1, [r6, #0]
    b126:	4649      	mov	r1, r9
    b128:	3301      	adds	r3, #1
    b12a:	6071      	str	r1, [r6, #4]
    b12c:	60ba      	str	r2, [r7, #8]
    b12e:	607b      	str	r3, [r7, #4]
    b130:	2b07      	cmp	r3, #7
    b132:	ddf1      	ble.n	b118 <_vfprintf_r+0x844>
    b134:	003a      	movs	r2, r7
    b136:	0021      	movs	r1, r4
    b138:	9806      	ldr	r0, [sp, #24]
    b13a:	f003 fea7 	bl	ee8c <__sprint_r>
    b13e:	2800      	cmp	r0, #0
    b140:	d000      	beq.n	b144 <_vfprintf_r+0x870>
    b142:	e130      	b.n	b3a6 <_vfprintf_r+0xad2>
    b144:	3d10      	subs	r5, #16
    b146:	68ba      	ldr	r2, [r7, #8]
    b148:	687b      	ldr	r3, [r7, #4]
    b14a:	ae32      	add	r6, sp, #200	; 0xc8
    b14c:	2d10      	cmp	r5, #16
    b14e:	dce7      	bgt.n	b120 <_vfprintf_r+0x84c>
    b150:	46a3      	mov	fp, r4
    b152:	0014      	movs	r4, r2
    b154:	4642      	mov	r2, r8
    b156:	1964      	adds	r4, r4, r5
    b158:	3301      	adds	r3, #1
    b15a:	c624      	stmia	r6!, {r2, r5}
    b15c:	60bc      	str	r4, [r7, #8]
    b15e:	607b      	str	r3, [r7, #4]
    b160:	2b07      	cmp	r3, #7
    b162:	dd08      	ble.n	b176 <_vfprintf_r+0x8a2>
    b164:	003a      	movs	r2, r7
    b166:	4659      	mov	r1, fp
    b168:	9806      	ldr	r0, [sp, #24]
    b16a:	f003 fe8f 	bl	ee8c <__sprint_r>
    b16e:	2800      	cmp	r0, #0
    b170:	d000      	beq.n	b174 <_vfprintf_r+0x8a0>
    b172:	e13f      	b.n	b3f4 <_vfprintf_r+0xb20>
    b174:	68bc      	ldr	r4, [r7, #8]
    b176:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b178:	9908      	ldr	r1, [sp, #32]
    b17a:	428b      	cmp	r3, r1
    b17c:	da00      	bge.n	b180 <_vfprintf_r+0x8ac>
    b17e:	000b      	movs	r3, r1
    b180:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b182:	4694      	mov	ip, r2
    b184:	449c      	add	ip, r3
    b186:	4663      	mov	r3, ip
    b188:	930a      	str	r3, [sp, #40]	; 0x28
    b18a:	2c00      	cmp	r4, #0
    b18c:	d000      	beq.n	b190 <_vfprintf_r+0x8bc>
    b18e:	e129      	b.n	b3e4 <_vfprintf_r+0xb10>
    b190:	2300      	movs	r3, #0
    b192:	ae32      	add	r6, sp, #200	; 0xc8
    b194:	607b      	str	r3, [r7, #4]
    b196:	f7ff fbeb 	bl	a970 <_vfprintf_r+0x9c>
    b19a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    b19c:	2b01      	cmp	r3, #1
    b19e:	dc00      	bgt.n	b1a2 <_vfprintf_r+0x8ce>
    b1a0:	e103      	b.n	b3aa <_vfprintf_r+0xad6>
    b1a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    b1a4:	3401      	adds	r4, #1
    b1a6:	6033      	str	r3, [r6, #0]
    b1a8:	2301      	movs	r3, #1
    b1aa:	6073      	str	r3, [r6, #4]
    b1ac:	687b      	ldr	r3, [r7, #4]
    b1ae:	60bc      	str	r4, [r7, #8]
    b1b0:	3301      	adds	r3, #1
    b1b2:	607b      	str	r3, [r7, #4]
    b1b4:	2b07      	cmp	r3, #7
    b1b6:	dd00      	ble.n	b1ba <_vfprintf_r+0x8e6>
    b1b8:	e2ef      	b.n	b79a <_vfprintf_r+0xec6>
    b1ba:	3608      	adds	r6, #8
    b1bc:	9a18      	ldr	r2, [sp, #96]	; 0x60
    b1be:	3301      	adds	r3, #1
    b1c0:	6032      	str	r2, [r6, #0]
    b1c2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    b1c4:	4698      	mov	r8, r3
    b1c6:	4694      	mov	ip, r2
    b1c8:	4464      	add	r4, ip
    b1ca:	6072      	str	r2, [r6, #4]
    b1cc:	60bc      	str	r4, [r7, #8]
    b1ce:	607b      	str	r3, [r7, #4]
    b1d0:	2b07      	cmp	r3, #7
    b1d2:	dd00      	ble.n	b1d6 <_vfprintf_r+0x902>
    b1d4:	e318      	b.n	b808 <_vfprintf_r+0xf34>
    b1d6:	3608      	adds	r6, #8
    b1d8:	2200      	movs	r2, #0
    b1da:	2300      	movs	r3, #0
    b1dc:	9816      	ldr	r0, [sp, #88]	; 0x58
    b1de:	9915      	ldr	r1, [sp, #84]	; 0x54
    b1e0:	f7ff f84a 	bl	a278 <__aeabi_dcmpeq>
    b1e4:	2800      	cmp	r0, #0
    b1e6:	d000      	beq.n	b1ea <_vfprintf_r+0x916>
    b1e8:	e1f4      	b.n	b5d4 <_vfprintf_r+0xd00>
    b1ea:	9d11      	ldr	r5, [sp, #68]	; 0x44
    b1ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
    b1ee:	3501      	adds	r5, #1
    b1f0:	3b01      	subs	r3, #1
    b1f2:	6035      	str	r5, [r6, #0]
    b1f4:	6073      	str	r3, [r6, #4]
    b1f6:	18e4      	adds	r4, r4, r3
    b1f8:	2301      	movs	r3, #1
    b1fa:	469c      	mov	ip, r3
    b1fc:	44e0      	add	r8, ip
    b1fe:	4643      	mov	r3, r8
    b200:	60bc      	str	r4, [r7, #8]
    b202:	607b      	str	r3, [r7, #4]
    b204:	2b07      	cmp	r3, #7
    b206:	dd00      	ble.n	b20a <_vfprintf_r+0x936>
    b208:	e0e0      	b.n	b3cc <_vfprintf_r+0xaf8>
    b20a:	3608      	adds	r6, #8
    b20c:	ab21      	add	r3, sp, #132	; 0x84
    b20e:	6033      	str	r3, [r6, #0]
    b210:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    b212:	469c      	mov	ip, r3
    b214:	6073      	str	r3, [r6, #4]
    b216:	4643      	mov	r3, r8
    b218:	4464      	add	r4, ip
    b21a:	3301      	adds	r3, #1
    b21c:	60bc      	str	r4, [r7, #8]
    b21e:	607b      	str	r3, [r7, #4]
    b220:	2b07      	cmp	r3, #7
    b222:	dc00      	bgt.n	b226 <_vfprintf_r+0x952>
    b224:	e758      	b.n	b0d8 <_vfprintf_r+0x804>
    b226:	003a      	movs	r2, r7
    b228:	4659      	mov	r1, fp
    b22a:	9806      	ldr	r0, [sp, #24]
    b22c:	f003 fe2e 	bl	ee8c <__sprint_r>
    b230:	2800      	cmp	r0, #0
    b232:	d000      	beq.n	b236 <_vfprintf_r+0x962>
    b234:	e0de      	b.n	b3f4 <_vfprintf_r+0xb20>
    b236:	68bc      	ldr	r4, [r7, #8]
    b238:	ae32      	add	r6, sp, #200	; 0xc8
    b23a:	e74e      	b.n	b0da <_vfprintf_r+0x806>
    b23c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    b23e:	2b65      	cmp	r3, #101	; 0x65
    b240:	ddab      	ble.n	b19a <_vfprintf_r+0x8c6>
    b242:	2200      	movs	r2, #0
    b244:	2300      	movs	r3, #0
    b246:	9816      	ldr	r0, [sp, #88]	; 0x58
    b248:	9915      	ldr	r1, [sp, #84]	; 0x54
    b24a:	f7ff f815 	bl	a278 <__aeabi_dcmpeq>
    b24e:	2800      	cmp	r0, #0
    b250:	d100      	bne.n	b254 <_vfprintf_r+0x980>
    b252:	e134      	b.n	b4be <_vfprintf_r+0xbea>
    b254:	4b85      	ldr	r3, [pc, #532]	; (b46c <_vfprintf_r+0xb98>)
    b256:	3401      	adds	r4, #1
    b258:	6033      	str	r3, [r6, #0]
    b25a:	2301      	movs	r3, #1
    b25c:	6073      	str	r3, [r6, #4]
    b25e:	687b      	ldr	r3, [r7, #4]
    b260:	60bc      	str	r4, [r7, #8]
    b262:	3301      	adds	r3, #1
    b264:	607b      	str	r3, [r7, #4]
    b266:	2b07      	cmp	r3, #7
    b268:	dd00      	ble.n	b26c <_vfprintf_r+0x998>
    b26a:	e3dc      	b.n	ba26 <_vfprintf_r+0x1152>
    b26c:	3608      	adds	r6, #8
    b26e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    b270:	9a14      	ldr	r2, [sp, #80]	; 0x50
    b272:	4293      	cmp	r3, r2
    b274:	db03      	blt.n	b27e <_vfprintf_r+0x9aa>
    b276:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b278:	07db      	lsls	r3, r3, #31
    b27a:	d400      	bmi.n	b27e <_vfprintf_r+0x9aa>
    b27c:	e3b7      	b.n	b9ee <_vfprintf_r+0x111a>
    b27e:	9b18      	ldr	r3, [sp, #96]	; 0x60
    b280:	68ba      	ldr	r2, [r7, #8]
    b282:	6033      	str	r3, [r6, #0]
    b284:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    b286:	469c      	mov	ip, r3
    b288:	6073      	str	r3, [r6, #4]
    b28a:	687b      	ldr	r3, [r7, #4]
    b28c:	4462      	add	r2, ip
    b28e:	3301      	adds	r3, #1
    b290:	0014      	movs	r4, r2
    b292:	60ba      	str	r2, [r7, #8]
    b294:	607b      	str	r3, [r7, #4]
    b296:	2b07      	cmp	r3, #7
    b298:	dd01      	ble.n	b29e <_vfprintf_r+0x9ca>
    b29a:	f000 fc19 	bl	bad0 <_vfprintf_r+0x11fc>
    b29e:	3608      	adds	r6, #8
    b2a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
    b2a2:	1e5d      	subs	r5, r3, #1
    b2a4:	2d00      	cmp	r5, #0
    b2a6:	dc00      	bgt.n	b2aa <_vfprintf_r+0x9d6>
    b2a8:	e717      	b.n	b0da <_vfprintf_r+0x806>
    b2aa:	4a71      	ldr	r2, [pc, #452]	; (b470 <_vfprintf_r+0xb9c>)
    b2ac:	687b      	ldr	r3, [r7, #4]
    b2ae:	4691      	mov	r9, r2
    b2b0:	2d10      	cmp	r5, #16
    b2b2:	dc00      	bgt.n	b2b6 <_vfprintf_r+0x9e2>
    b2b4:	e1c3      	b.n	b63e <_vfprintf_r+0xd6a>
    b2b6:	2210      	movs	r2, #16
    b2b8:	4690      	mov	r8, r2
    b2ba:	0022      	movs	r2, r4
    b2bc:	464c      	mov	r4, r9
    b2be:	46d9      	mov	r9, fp
    b2c0:	e004      	b.n	b2cc <_vfprintf_r+0x9f8>
    b2c2:	3608      	adds	r6, #8
    b2c4:	3d10      	subs	r5, #16
    b2c6:	2d10      	cmp	r5, #16
    b2c8:	dc00      	bgt.n	b2cc <_vfprintf_r+0x9f8>
    b2ca:	e37c      	b.n	b9c6 <_vfprintf_r+0x10f2>
    b2cc:	4641      	mov	r1, r8
    b2ce:	3210      	adds	r2, #16
    b2d0:	3301      	adds	r3, #1
    b2d2:	6034      	str	r4, [r6, #0]
    b2d4:	6071      	str	r1, [r6, #4]
    b2d6:	60ba      	str	r2, [r7, #8]
    b2d8:	607b      	str	r3, [r7, #4]
    b2da:	2b07      	cmp	r3, #7
    b2dc:	ddf1      	ble.n	b2c2 <_vfprintf_r+0x9ee>
    b2de:	003a      	movs	r2, r7
    b2e0:	4649      	mov	r1, r9
    b2e2:	9806      	ldr	r0, [sp, #24]
    b2e4:	f003 fdd2 	bl	ee8c <__sprint_r>
    b2e8:	2800      	cmp	r0, #0
    b2ea:	d10b      	bne.n	b304 <_vfprintf_r+0xa30>
    b2ec:	68ba      	ldr	r2, [r7, #8]
    b2ee:	687b      	ldr	r3, [r7, #4]
    b2f0:	ae32      	add	r6, sp, #200	; 0xc8
    b2f2:	e7e7      	b.n	b2c4 <_vfprintf_r+0x9f0>
    b2f4:	68bb      	ldr	r3, [r7, #8]
    b2f6:	46d9      	mov	r9, fp
    b2f8:	2b00      	cmp	r3, #0
    b2fa:	d001      	beq.n	b300 <_vfprintf_r+0xa2c>
    b2fc:	f000 fd4c 	bl	bd98 <_vfprintf_r+0x14c4>
    b300:	2300      	movs	r3, #0
    b302:	607b      	str	r3, [r7, #4]
    b304:	464b      	mov	r3, r9
    b306:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    b308:	07db      	lsls	r3, r3, #31
    b30a:	d40d      	bmi.n	b328 <_vfprintf_r+0xa54>
    b30c:	464b      	mov	r3, r9
    b30e:	899b      	ldrh	r3, [r3, #12]
    b310:	059a      	lsls	r2, r3, #22
    b312:	d505      	bpl.n	b320 <_vfprintf_r+0xa4c>
    b314:	065b      	lsls	r3, r3, #25
    b316:	d401      	bmi.n	b31c <_vfprintf_r+0xa48>
    b318:	f7ff fb8d 	bl	aa36 <_vfprintf_r+0x162>
    b31c:	f7ff fb88 	bl	aa30 <_vfprintf_r+0x15c>
    b320:	464b      	mov	r3, r9
    b322:	6d98      	ldr	r0, [r3, #88]	; 0x58
    b324:	f002 fc32 	bl	db8c <__retarget_lock_release_recursive>
    b328:	464b      	mov	r3, r9
    b32a:	899b      	ldrh	r3, [r3, #12]
    b32c:	e7f2      	b.n	b314 <_vfprintf_r+0xa40>
    b32e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b330:	9a08      	ldr	r2, [sp, #32]
    b332:	1a9d      	subs	r5, r3, r2
    b334:	2d00      	cmp	r5, #0
    b336:	dc00      	bgt.n	b33a <_vfprintf_r+0xa66>
    b338:	e685      	b.n	b046 <_vfprintf_r+0x772>
    b33a:	4a4d      	ldr	r2, [pc, #308]	; (b470 <_vfprintf_r+0xb9c>)
    b33c:	687b      	ldr	r3, [r7, #4]
    b33e:	4691      	mov	r9, r2
    b340:	2d10      	cmp	r5, #16
    b342:	dd24      	ble.n	b38e <_vfprintf_r+0xaba>
    b344:	2210      	movs	r2, #16
    b346:	0021      	movs	r1, r4
    b348:	4690      	mov	r8, r2
    b34a:	465c      	mov	r4, fp
    b34c:	0032      	movs	r2, r6
    b34e:	464e      	mov	r6, r9
    b350:	e003      	b.n	b35a <_vfprintf_r+0xa86>
    b352:	3d10      	subs	r5, #16
    b354:	3208      	adds	r2, #8
    b356:	2d10      	cmp	r5, #16
    b358:	dd15      	ble.n	b386 <_vfprintf_r+0xab2>
    b35a:	4640      	mov	r0, r8
    b35c:	3110      	adds	r1, #16
    b35e:	3301      	adds	r3, #1
    b360:	6016      	str	r6, [r2, #0]
    b362:	6050      	str	r0, [r2, #4]
    b364:	60b9      	str	r1, [r7, #8]
    b366:	607b      	str	r3, [r7, #4]
    b368:	2b07      	cmp	r3, #7
    b36a:	ddf2      	ble.n	b352 <_vfprintf_r+0xa7e>
    b36c:	003a      	movs	r2, r7
    b36e:	0021      	movs	r1, r4
    b370:	9806      	ldr	r0, [sp, #24]
    b372:	f003 fd8b 	bl	ee8c <__sprint_r>
    b376:	2800      	cmp	r0, #0
    b378:	d115      	bne.n	b3a6 <_vfprintf_r+0xad2>
    b37a:	3d10      	subs	r5, #16
    b37c:	68b9      	ldr	r1, [r7, #8]
    b37e:	687b      	ldr	r3, [r7, #4]
    b380:	aa32      	add	r2, sp, #200	; 0xc8
    b382:	2d10      	cmp	r5, #16
    b384:	dce9      	bgt.n	b35a <_vfprintf_r+0xa86>
    b386:	46a3      	mov	fp, r4
    b388:	46b1      	mov	r9, r6
    b38a:	000c      	movs	r4, r1
    b38c:	0016      	movs	r6, r2
    b38e:	464a      	mov	r2, r9
    b390:	1964      	adds	r4, r4, r5
    b392:	3301      	adds	r3, #1
    b394:	6032      	str	r2, [r6, #0]
    b396:	6075      	str	r5, [r6, #4]
    b398:	60bc      	str	r4, [r7, #8]
    b39a:	607b      	str	r3, [r7, #4]
    b39c:	2b07      	cmp	r3, #7
    b39e:	dd00      	ble.n	b3a2 <_vfprintf_r+0xace>
    b3a0:	e263      	b.n	b86a <_vfprintf_r+0xf96>
    b3a2:	3608      	adds	r6, #8
    b3a4:	e64f      	b.n	b046 <_vfprintf_r+0x772>
    b3a6:	46a1      	mov	r9, r4
    b3a8:	e7ac      	b.n	b304 <_vfprintf_r+0xa30>
    b3aa:	2301      	movs	r3, #1
    b3ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
    b3ae:	4213      	tst	r3, r2
    b3b0:	d000      	beq.n	b3b4 <_vfprintf_r+0xae0>
    b3b2:	e6f6      	b.n	b1a2 <_vfprintf_r+0x8ce>
    b3b4:	6073      	str	r3, [r6, #4]
    b3b6:	687b      	ldr	r3, [r7, #4]
    b3b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
    b3ba:	3301      	adds	r3, #1
    b3bc:	3401      	adds	r4, #1
    b3be:	6032      	str	r2, [r6, #0]
    b3c0:	60bc      	str	r4, [r7, #8]
    b3c2:	4698      	mov	r8, r3
    b3c4:	607b      	str	r3, [r7, #4]
    b3c6:	2b07      	cmp	r3, #7
    b3c8:	dc00      	bgt.n	b3cc <_vfprintf_r+0xaf8>
    b3ca:	e71e      	b.n	b20a <_vfprintf_r+0x936>
    b3cc:	003a      	movs	r2, r7
    b3ce:	4659      	mov	r1, fp
    b3d0:	9806      	ldr	r0, [sp, #24]
    b3d2:	f003 fd5b 	bl	ee8c <__sprint_r>
    b3d6:	2800      	cmp	r0, #0
    b3d8:	d10c      	bne.n	b3f4 <_vfprintf_r+0xb20>
    b3da:	687b      	ldr	r3, [r7, #4]
    b3dc:	68bc      	ldr	r4, [r7, #8]
    b3de:	4698      	mov	r8, r3
    b3e0:	ae32      	add	r6, sp, #200	; 0xc8
    b3e2:	e713      	b.n	b20c <_vfprintf_r+0x938>
    b3e4:	003a      	movs	r2, r7
    b3e6:	4659      	mov	r1, fp
    b3e8:	9806      	ldr	r0, [sp, #24]
    b3ea:	f003 fd4f 	bl	ee8c <__sprint_r>
    b3ee:	2800      	cmp	r0, #0
    b3f0:	d100      	bne.n	b3f4 <_vfprintf_r+0xb20>
    b3f2:	e6cd      	b.n	b190 <_vfprintf_r+0x8bc>
    b3f4:	46d9      	mov	r9, fp
    b3f6:	e785      	b.n	b304 <_vfprintf_r+0xa30>
    b3f8:	9c09      	ldr	r4, [sp, #36]	; 0x24
    b3fa:	2b01      	cmp	r3, #1
    b3fc:	d100      	bne.n	b400 <_vfprintf_r+0xb2c>
    b3fe:	e148      	b.n	b692 <_vfprintf_r+0xdbe>
    b400:	2b02      	cmp	r3, #2
    b402:	d123      	bne.n	b44c <_vfprintf_r+0xb78>
    b404:	9409      	str	r4, [sp, #36]	; 0x24
    b406:	2300      	movs	r3, #0
    b408:	2400      	movs	r4, #0
    b40a:	930c      	str	r3, [sp, #48]	; 0x30
    b40c:	940d      	str	r4, [sp, #52]	; 0x34
    b40e:	e4a1      	b.n	ad54 <_vfprintf_r+0x480>
    b410:	003a      	movs	r2, r7
    b412:	4659      	mov	r1, fp
    b414:	9806      	ldr	r0, [sp, #24]
    b416:	f003 fd39 	bl	ee8c <__sprint_r>
    b41a:	2800      	cmp	r0, #0
    b41c:	d1ea      	bne.n	b3f4 <_vfprintf_r+0xb20>
    b41e:	68bc      	ldr	r4, [r7, #8]
    b420:	ae32      	add	r6, sp, #200	; 0xc8
    b422:	e648      	b.n	b0b6 <_vfprintf_r+0x7e2>
    b424:	003a      	movs	r2, r7
    b426:	4659      	mov	r1, fp
    b428:	9806      	ldr	r0, [sp, #24]
    b42a:	f003 fd2f 	bl	ee8c <__sprint_r>
    b42e:	2800      	cmp	r0, #0
    b430:	d1e0      	bne.n	b3f4 <_vfprintf_r+0xb20>
    b432:	68bc      	ldr	r4, [r7, #8]
    b434:	ae32      	add	r6, sp, #200	; 0xc8
    b436:	e5f2      	b.n	b01e <_vfprintf_r+0x74a>
    b438:	003a      	movs	r2, r7
    b43a:	4659      	mov	r1, fp
    b43c:	9806      	ldr	r0, [sp, #24]
    b43e:	f003 fd25 	bl	ee8c <__sprint_r>
    b442:	2800      	cmp	r0, #0
    b444:	d1d6      	bne.n	b3f4 <_vfprintf_r+0xb20>
    b446:	68bc      	ldr	r4, [r7, #8]
    b448:	ae32      	add	r6, sp, #200	; 0xc8
    b44a:	e5f8      	b.n	b03e <_vfprintf_r+0x76a>
    b44c:	9409      	str	r4, [sp, #36]	; 0x24
    b44e:	2300      	movs	r3, #0
    b450:	2400      	movs	r4, #0
    b452:	930c      	str	r3, [sp, #48]	; 0x30
    b454:	940d      	str	r4, [sp, #52]	; 0x34
    b456:	980c      	ldr	r0, [sp, #48]	; 0x30
    b458:	990d      	ldr	r1, [sp, #52]	; 0x34
    b45a:	4653      	mov	r3, sl
    b45c:	aa32      	add	r2, sp, #200	; 0xc8
    b45e:	4691      	mov	r9, r2
    b460:	9308      	str	r3, [sp, #32]
    b462:	46b2      	mov	sl, r6
    b464:	e007      	b.n	b476 <_vfprintf_r+0xba2>
    b466:	46c0      	nop			; (mov r8, r8)
    b468:	00010024 	.word	0x00010024
    b46c:	00010020 	.word	0x00010020
    b470:	00010034 	.word	0x00010034
    b474:	46a1      	mov	r9, r4
    b476:	074a      	lsls	r2, r1, #29
    b478:	4694      	mov	ip, r2
    b47a:	464b      	mov	r3, r9
    b47c:	4665      	mov	r5, ip
    b47e:	1e5c      	subs	r4, r3, #1
    b480:	08c6      	lsrs	r6, r0, #3
    b482:	2307      	movs	r3, #7
    b484:	08ca      	lsrs	r2, r1, #3
    b486:	4335      	orrs	r5, r6
    b488:	0011      	movs	r1, r2
    b48a:	002a      	movs	r2, r5
    b48c:	4003      	ands	r3, r0
    b48e:	3330      	adds	r3, #48	; 0x30
    b490:	7023      	strb	r3, [r4, #0]
    b492:	0028      	movs	r0, r5
    b494:	430a      	orrs	r2, r1
    b496:	d1ed      	bne.n	b474 <_vfprintf_r+0xba0>
    b498:	900c      	str	r0, [sp, #48]	; 0x30
    b49a:	910d      	str	r1, [sp, #52]	; 0x34
    b49c:	9908      	ldr	r1, [sp, #32]
    b49e:	4656      	mov	r6, sl
    b4a0:	468a      	mov	sl, r1
    b4a2:	9909      	ldr	r1, [sp, #36]	; 0x24
    b4a4:	464a      	mov	r2, r9
    b4a6:	9411      	str	r4, [sp, #68]	; 0x44
    b4a8:	07c9      	lsls	r1, r1, #31
    b4aa:	d500      	bpl.n	b4ae <_vfprintf_r+0xbda>
    b4ac:	e0e0      	b.n	b670 <_vfprintf_r+0xd9c>
    b4ae:	ab32      	add	r3, sp, #200	; 0xc8
    b4b0:	1b1b      	subs	r3, r3, r4
    b4b2:	930e      	str	r3, [sp, #56]	; 0x38
    b4b4:	f7ff fb7b 	bl	abae <_vfprintf_r+0x2da>
    b4b8:	9c07      	ldr	r4, [sp, #28]
    b4ba:	f7ff fa7d 	bl	a9b8 <_vfprintf_r+0xe4>
    b4be:	981f      	ldr	r0, [sp, #124]	; 0x7c
    b4c0:	2800      	cmp	r0, #0
    b4c2:	dc00      	bgt.n	b4c6 <_vfprintf_r+0xbf2>
    b4c4:	e2b9      	b.n	ba3a <_vfprintf_r+0x1166>
    b4c6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    b4c8:	9914      	ldr	r1, [sp, #80]	; 0x50
    b4ca:	0013      	movs	r3, r2
    b4cc:	4690      	mov	r8, r2
    b4ce:	428b      	cmp	r3, r1
    b4d0:	dd00      	ble.n	b4d4 <_vfprintf_r+0xc00>
    b4d2:	4688      	mov	r8, r1
    b4d4:	4643      	mov	r3, r8
    b4d6:	2b00      	cmp	r3, #0
    b4d8:	dd0c      	ble.n	b4f4 <_vfprintf_r+0xc20>
    b4da:	9b11      	ldr	r3, [sp, #68]	; 0x44
    b4dc:	4444      	add	r4, r8
    b4de:	6033      	str	r3, [r6, #0]
    b4e0:	4643      	mov	r3, r8
    b4e2:	6073      	str	r3, [r6, #4]
    b4e4:	687b      	ldr	r3, [r7, #4]
    b4e6:	60bc      	str	r4, [r7, #8]
    b4e8:	3301      	adds	r3, #1
    b4ea:	607b      	str	r3, [r7, #4]
    b4ec:	2b07      	cmp	r3, #7
    b4ee:	dd00      	ble.n	b4f2 <_vfprintf_r+0xc1e>
    b4f0:	e389      	b.n	bc06 <_vfprintf_r+0x1332>
    b4f2:	3608      	adds	r6, #8
    b4f4:	4643      	mov	r3, r8
    b4f6:	43db      	mvns	r3, r3
    b4f8:	4642      	mov	r2, r8
    b4fa:	17db      	asrs	r3, r3, #31
    b4fc:	4013      	ands	r3, r2
    b4fe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    b500:	1ad3      	subs	r3, r2, r3
    b502:	4698      	mov	r8, r3
    b504:	2b00      	cmp	r3, #0
    b506:	dc00      	bgt.n	b50a <_vfprintf_r+0xc36>
    b508:	e0eb      	b.n	b6e2 <_vfprintf_r+0xe0e>
    b50a:	2b10      	cmp	r3, #16
    b50c:	dc01      	bgt.n	b512 <_vfprintf_r+0xc3e>
    b50e:	f000 fcd9 	bl	bec4 <_vfprintf_r+0x15f0>
    b512:	4adc      	ldr	r2, [pc, #880]	; (b884 <_vfprintf_r+0xfb0>)
    b514:	687b      	ldr	r3, [r7, #4]
    b516:	4691      	mov	r9, r2
    b518:	2210      	movs	r2, #16
    b51a:	464d      	mov	r5, r9
    b51c:	4692      	mov	sl, r2
    b51e:	0022      	movs	r2, r4
    b520:	4644      	mov	r4, r8
    b522:	46d8      	mov	r8, fp
    b524:	e004      	b.n	b530 <_vfprintf_r+0xc5c>
    b526:	3608      	adds	r6, #8
    b528:	3c10      	subs	r4, #16
    b52a:	2c10      	cmp	r4, #16
    b52c:	dc00      	bgt.n	b530 <_vfprintf_r+0xc5c>
    b52e:	e0bf      	b.n	b6b0 <_vfprintf_r+0xddc>
    b530:	4651      	mov	r1, sl
    b532:	3210      	adds	r2, #16
    b534:	3301      	adds	r3, #1
    b536:	6035      	str	r5, [r6, #0]
    b538:	6071      	str	r1, [r6, #4]
    b53a:	60ba      	str	r2, [r7, #8]
    b53c:	607b      	str	r3, [r7, #4]
    b53e:	2b07      	cmp	r3, #7
    b540:	ddf1      	ble.n	b526 <_vfprintf_r+0xc52>
    b542:	003a      	movs	r2, r7
    b544:	4641      	mov	r1, r8
    b546:	9806      	ldr	r0, [sp, #24]
    b548:	f003 fca0 	bl	ee8c <__sprint_r>
    b54c:	2800      	cmp	r0, #0
    b54e:	d000      	beq.n	b552 <_vfprintf_r+0xc7e>
    b550:	e3b6      	b.n	bcc0 <_vfprintf_r+0x13ec>
    b552:	68ba      	ldr	r2, [r7, #8]
    b554:	687b      	ldr	r3, [r7, #4]
    b556:	ae32      	add	r6, sp, #200	; 0xc8
    b558:	e7e6      	b.n	b528 <_vfprintf_r+0xc54>
    b55a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b55c:	2b00      	cmp	r3, #0
    b55e:	d100      	bne.n	b562 <_vfprintf_r+0xc8e>
    b560:	e092      	b.n	b688 <_vfprintf_r+0xdb4>
    b562:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    b564:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    b566:	ab32      	add	r3, sp, #200	; 0xc8
    b568:	46b1      	mov	r9, r6
    b56a:	001e      	movs	r6, r3
    b56c:	0020      	movs	r0, r4
    b56e:	0029      	movs	r1, r5
    b570:	220a      	movs	r2, #10
    b572:	2300      	movs	r3, #0
    b574:	f7fd fc18 	bl	8da8 <__aeabi_uldivmod>
    b578:	3e01      	subs	r6, #1
    b57a:	3230      	adds	r2, #48	; 0x30
    b57c:	7032      	strb	r2, [r6, #0]
    b57e:	2300      	movs	r3, #0
    b580:	0020      	movs	r0, r4
    b582:	0029      	movs	r1, r5
    b584:	220a      	movs	r2, #10
    b586:	f7fd fc0f 	bl	8da8 <__aeabi_uldivmod>
    b58a:	0003      	movs	r3, r0
    b58c:	0004      	movs	r4, r0
    b58e:	000d      	movs	r5, r1
    b590:	430b      	orrs	r3, r1
    b592:	d1eb      	bne.n	b56c <_vfprintf_r+0xc98>
    b594:	0032      	movs	r2, r6
    b596:	ab32      	add	r3, sp, #200	; 0xc8
    b598:	1a9b      	subs	r3, r3, r2
    b59a:	9611      	str	r6, [sp, #68]	; 0x44
    b59c:	940c      	str	r4, [sp, #48]	; 0x30
    b59e:	950d      	str	r5, [sp, #52]	; 0x34
    b5a0:	464e      	mov	r6, r9
    b5a2:	930e      	str	r3, [sp, #56]	; 0x38
    b5a4:	f7ff fb03 	bl	abae <_vfprintf_r+0x2da>
    b5a8:	2300      	movs	r3, #0
    b5aa:	930e      	str	r3, [sp, #56]	; 0x38
    b5ac:	ab32      	add	r3, sp, #200	; 0xc8
    b5ae:	9311      	str	r3, [sp, #68]	; 0x44
    b5b0:	f7ff fafd 	bl	abae <_vfprintf_r+0x2da>
    b5b4:	003a      	movs	r2, r7
    b5b6:	4659      	mov	r1, fp
    b5b8:	9806      	ldr	r0, [sp, #24]
    b5ba:	f003 fc67 	bl	ee8c <__sprint_r>
    b5be:	2800      	cmp	r0, #0
    b5c0:	d000      	beq.n	b5c4 <_vfprintf_r+0xcf0>
    b5c2:	e717      	b.n	b3f4 <_vfprintf_r+0xb20>
    b5c4:	ab16      	add	r3, sp, #88	; 0x58
    b5c6:	7fdb      	ldrb	r3, [r3, #31]
    b5c8:	68bc      	ldr	r4, [r7, #8]
    b5ca:	4698      	mov	r8, r3
    b5cc:	ae32      	add	r6, sp, #200	; 0xc8
    b5ce:	e513      	b.n	aff8 <_vfprintf_r+0x724>
    b5d0:	46b1      	mov	r9, r6
    b5d2:	e697      	b.n	b304 <_vfprintf_r+0xa30>
    b5d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
    b5d6:	1e5d      	subs	r5, r3, #1
    b5d8:	2d00      	cmp	r5, #0
    b5da:	dc00      	bgt.n	b5de <_vfprintf_r+0xd0a>
    b5dc:	e616      	b.n	b20c <_vfprintf_r+0x938>
    b5de:	4ba9      	ldr	r3, [pc, #676]	; (b884 <_vfprintf_r+0xfb0>)
    b5e0:	4699      	mov	r9, r3
    b5e2:	2d10      	cmp	r5, #16
    b5e4:	dc00      	bgt.n	b5e8 <_vfprintf_r+0xd14>
    b5e6:	e10a      	b.n	b7fe <_vfprintf_r+0xf2a>
    b5e8:	2310      	movs	r3, #16
    b5ea:	0022      	movs	r2, r4
    b5ec:	469a      	mov	sl, r3
    b5ee:	465c      	mov	r4, fp
    b5f0:	4643      	mov	r3, r8
    b5f2:	e004      	b.n	b5fe <_vfprintf_r+0xd2a>
    b5f4:	3608      	adds	r6, #8
    b5f6:	3d10      	subs	r5, #16
    b5f8:	2d10      	cmp	r5, #16
    b5fa:	dc00      	bgt.n	b5fe <_vfprintf_r+0xd2a>
    b5fc:	e0fc      	b.n	b7f8 <_vfprintf_r+0xf24>
    b5fe:	4649      	mov	r1, r9
    b600:	6031      	str	r1, [r6, #0]
    b602:	4651      	mov	r1, sl
    b604:	3210      	adds	r2, #16
    b606:	3301      	adds	r3, #1
    b608:	6071      	str	r1, [r6, #4]
    b60a:	60ba      	str	r2, [r7, #8]
    b60c:	607b      	str	r3, [r7, #4]
    b60e:	2b07      	cmp	r3, #7
    b610:	ddf0      	ble.n	b5f4 <_vfprintf_r+0xd20>
    b612:	003a      	movs	r2, r7
    b614:	0021      	movs	r1, r4
    b616:	9806      	ldr	r0, [sp, #24]
    b618:	f003 fc38 	bl	ee8c <__sprint_r>
    b61c:	2800      	cmp	r0, #0
    b61e:	d000      	beq.n	b622 <_vfprintf_r+0xd4e>
    b620:	e6c1      	b.n	b3a6 <_vfprintf_r+0xad2>
    b622:	68ba      	ldr	r2, [r7, #8]
    b624:	687b      	ldr	r3, [r7, #4]
    b626:	ae32      	add	r6, sp, #200	; 0xc8
    b628:	e7e5      	b.n	b5f6 <_vfprintf_r+0xd22>
    b62a:	990c      	ldr	r1, [sp, #48]	; 0x30
    b62c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    b62e:	0008      	movs	r0, r1
    b630:	4310      	orrs	r0, r2
    b632:	2302      	movs	r3, #2
    b634:	0002      	movs	r2, r0
    b636:	f7ff fa93 	bl	ab60 <_vfprintf_r+0x28c>
    b63a:	46a3      	mov	fp, r4
    b63c:	0014      	movs	r4, r2
    b63e:	464a      	mov	r2, r9
    b640:	1964      	adds	r4, r4, r5
    b642:	3301      	adds	r3, #1
    b644:	6032      	str	r2, [r6, #0]
    b646:	6075      	str	r5, [r6, #4]
    b648:	60bc      	str	r4, [r7, #8]
    b64a:	607b      	str	r3, [r7, #4]
    b64c:	2b07      	cmp	r3, #7
    b64e:	dc00      	bgt.n	b652 <_vfprintf_r+0xd7e>
    b650:	e542      	b.n	b0d8 <_vfprintf_r+0x804>
    b652:	e5e8      	b.n	b226 <_vfprintf_r+0x952>
    b654:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b656:	681a      	ldr	r2, [r3, #0]
    b658:	f7ff fa68 	bl	ab2c <_vfprintf_r+0x258>
    b65c:	6813      	ldr	r3, [r2, #0]
    b65e:	9308      	str	r3, [sp, #32]
    b660:	f7ff fb57 	bl	ad12 <_vfprintf_r+0x43e>
    b664:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b666:	681a      	ldr	r2, [r3, #0]
    b668:	e412      	b.n	ae90 <_vfprintf_r+0x5bc>
    b66a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b66c:	681a      	ldr	r2, [r3, #0]
    b66e:	e426      	b.n	aebe <_vfprintf_r+0x5ea>
    b670:	2b30      	cmp	r3, #48	; 0x30
    b672:	d100      	bne.n	b676 <_vfprintf_r+0xda2>
    b674:	e23c      	b.n	baf0 <_vfprintf_r+0x121c>
    b676:	2330      	movs	r3, #48	; 0x30
    b678:	3a02      	subs	r2, #2
    b67a:	7013      	strb	r3, [r2, #0]
    b67c:	ab32      	add	r3, sp, #200	; 0xc8
    b67e:	1a9b      	subs	r3, r3, r2
    b680:	930e      	str	r3, [sp, #56]	; 0x38
    b682:	9211      	str	r2, [sp, #68]	; 0x44
    b684:	f7ff fa93 	bl	abae <_vfprintf_r+0x2da>
    b688:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b68a:	2b09      	cmp	r3, #9
    b68c:	d900      	bls.n	b690 <_vfprintf_r+0xdbc>
    b68e:	e768      	b.n	b562 <_vfprintf_r+0xc8e>
    b690:	9c09      	ldr	r4, [sp, #36]	; 0x24
    b692:	2227      	movs	r2, #39	; 0x27
    b694:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b696:	a928      	add	r1, sp, #160	; 0xa0
    b698:	3330      	adds	r3, #48	; 0x30
    b69a:	548b      	strb	r3, [r1, r2]
    b69c:	2301      	movs	r3, #1
    b69e:	aa16      	add	r2, sp, #88	; 0x58
    b6a0:	4694      	mov	ip, r2
    b6a2:	930e      	str	r3, [sp, #56]	; 0x38
    b6a4:	336e      	adds	r3, #110	; 0x6e
    b6a6:	4463      	add	r3, ip
    b6a8:	9409      	str	r4, [sp, #36]	; 0x24
    b6aa:	9311      	str	r3, [sp, #68]	; 0x44
    b6ac:	f7ff fa7f 	bl	abae <_vfprintf_r+0x2da>
    b6b0:	46c3      	mov	fp, r8
    b6b2:	46a9      	mov	r9, r5
    b6b4:	46a0      	mov	r8, r4
    b6b6:	0014      	movs	r4, r2
    b6b8:	464a      	mov	r2, r9
    b6ba:	6032      	str	r2, [r6, #0]
    b6bc:	4642      	mov	r2, r8
    b6be:	4444      	add	r4, r8
    b6c0:	3301      	adds	r3, #1
    b6c2:	6072      	str	r2, [r6, #4]
    b6c4:	60bc      	str	r4, [r7, #8]
    b6c6:	607b      	str	r3, [r7, #4]
    b6c8:	2b07      	cmp	r3, #7
    b6ca:	dc00      	bgt.n	b6ce <_vfprintf_r+0xdfa>
    b6cc:	e18d      	b.n	b9ea <_vfprintf_r+0x1116>
    b6ce:	003a      	movs	r2, r7
    b6d0:	4659      	mov	r1, fp
    b6d2:	9806      	ldr	r0, [sp, #24]
    b6d4:	f003 fbda 	bl	ee8c <__sprint_r>
    b6d8:	2800      	cmp	r0, #0
    b6da:	d000      	beq.n	b6de <_vfprintf_r+0xe0a>
    b6dc:	e68a      	b.n	b3f4 <_vfprintf_r+0xb20>
    b6de:	68bc      	ldr	r4, [r7, #8]
    b6e0:	ae32      	add	r6, sp, #200	; 0xc8
    b6e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    b6e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
    b6e6:	4293      	cmp	r3, r2
    b6e8:	db00      	blt.n	b6ec <_vfprintf_r+0xe18>
    b6ea:	e179      	b.n	b9e0 <_vfprintf_r+0x110c>
    b6ec:	9a18      	ldr	r2, [sp, #96]	; 0x60
    b6ee:	6032      	str	r2, [r6, #0]
    b6f0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    b6f2:	4694      	mov	ip, r2
    b6f4:	6072      	str	r2, [r6, #4]
    b6f6:	687a      	ldr	r2, [r7, #4]
    b6f8:	4464      	add	r4, ip
    b6fa:	3201      	adds	r2, #1
    b6fc:	60bc      	str	r4, [r7, #8]
    b6fe:	607a      	str	r2, [r7, #4]
    b700:	2a07      	cmp	r2, #7
    b702:	dd00      	ble.n	b706 <_vfprintf_r+0xe32>
    b704:	e176      	b.n	b9f4 <_vfprintf_r+0x1120>
    b706:	3608      	adds	r6, #8
    b708:	9a14      	ldr	r2, [sp, #80]	; 0x50
    b70a:	9913      	ldr	r1, [sp, #76]	; 0x4c
    b70c:	1ad3      	subs	r3, r2, r3
    b70e:	1a52      	subs	r2, r2, r1
    b710:	4690      	mov	r8, r2
    b712:	429a      	cmp	r2, r3
    b714:	dd00      	ble.n	b718 <_vfprintf_r+0xe44>
    b716:	4698      	mov	r8, r3
    b718:	4642      	mov	r2, r8
    b71a:	2a00      	cmp	r2, #0
    b71c:	dd0f      	ble.n	b73e <_vfprintf_r+0xe6a>
    b71e:	9913      	ldr	r1, [sp, #76]	; 0x4c
    b720:	9a11      	ldr	r2, [sp, #68]	; 0x44
    b722:	468c      	mov	ip, r1
    b724:	4462      	add	r2, ip
    b726:	6032      	str	r2, [r6, #0]
    b728:	4642      	mov	r2, r8
    b72a:	6072      	str	r2, [r6, #4]
    b72c:	687a      	ldr	r2, [r7, #4]
    b72e:	4444      	add	r4, r8
    b730:	3201      	adds	r2, #1
    b732:	60bc      	str	r4, [r7, #8]
    b734:	607a      	str	r2, [r7, #4]
    b736:	2a07      	cmp	r2, #7
    b738:	dd00      	ble.n	b73c <_vfprintf_r+0xe68>
    b73a:	e289      	b.n	bc50 <_vfprintf_r+0x137c>
    b73c:	3608      	adds	r6, #8
    b73e:	4642      	mov	r2, r8
    b740:	43d5      	mvns	r5, r2
    b742:	17ed      	asrs	r5, r5, #31
    b744:	4015      	ands	r5, r2
    b746:	1b5d      	subs	r5, r3, r5
    b748:	2d00      	cmp	r5, #0
    b74a:	dc00      	bgt.n	b74e <_vfprintf_r+0xe7a>
    b74c:	e4c5      	b.n	b0da <_vfprintf_r+0x806>
    b74e:	4a4d      	ldr	r2, [pc, #308]	; (b884 <_vfprintf_r+0xfb0>)
    b750:	687b      	ldr	r3, [r7, #4]
    b752:	4691      	mov	r9, r2
    b754:	2d10      	cmp	r5, #16
    b756:	dc00      	bgt.n	b75a <_vfprintf_r+0xe86>
    b758:	e771      	b.n	b63e <_vfprintf_r+0xd6a>
    b75a:	2210      	movs	r2, #16
    b75c:	4690      	mov	r8, r2
    b75e:	0022      	movs	r2, r4
    b760:	465c      	mov	r4, fp
    b762:	e004      	b.n	b76e <_vfprintf_r+0xe9a>
    b764:	3608      	adds	r6, #8
    b766:	3d10      	subs	r5, #16
    b768:	2d10      	cmp	r5, #16
    b76a:	dc00      	bgt.n	b76e <_vfprintf_r+0xe9a>
    b76c:	e765      	b.n	b63a <_vfprintf_r+0xd66>
    b76e:	4649      	mov	r1, r9
    b770:	6031      	str	r1, [r6, #0]
    b772:	4641      	mov	r1, r8
    b774:	3210      	adds	r2, #16
    b776:	3301      	adds	r3, #1
    b778:	6071      	str	r1, [r6, #4]
    b77a:	60ba      	str	r2, [r7, #8]
    b77c:	607b      	str	r3, [r7, #4]
    b77e:	2b07      	cmp	r3, #7
    b780:	ddf0      	ble.n	b764 <_vfprintf_r+0xe90>
    b782:	003a      	movs	r2, r7
    b784:	0021      	movs	r1, r4
    b786:	9806      	ldr	r0, [sp, #24]
    b788:	f003 fb80 	bl	ee8c <__sprint_r>
    b78c:	2800      	cmp	r0, #0
    b78e:	d000      	beq.n	b792 <_vfprintf_r+0xebe>
    b790:	e609      	b.n	b3a6 <_vfprintf_r+0xad2>
    b792:	68ba      	ldr	r2, [r7, #8]
    b794:	687b      	ldr	r3, [r7, #4]
    b796:	ae32      	add	r6, sp, #200	; 0xc8
    b798:	e7e5      	b.n	b766 <_vfprintf_r+0xe92>
    b79a:	003a      	movs	r2, r7
    b79c:	4659      	mov	r1, fp
    b79e:	9806      	ldr	r0, [sp, #24]
    b7a0:	f003 fb74 	bl	ee8c <__sprint_r>
    b7a4:	2800      	cmp	r0, #0
    b7a6:	d000      	beq.n	b7aa <_vfprintf_r+0xed6>
    b7a8:	e624      	b.n	b3f4 <_vfprintf_r+0xb20>
    b7aa:	68bc      	ldr	r4, [r7, #8]
    b7ac:	687b      	ldr	r3, [r7, #4]
    b7ae:	ae32      	add	r6, sp, #200	; 0xc8
    b7b0:	e504      	b.n	b1bc <_vfprintf_r+0x8e8>
    b7b2:	2307      	movs	r3, #7
    b7b4:	3207      	adds	r2, #7
    b7b6:	439a      	bics	r2, r3
    b7b8:	3301      	adds	r3, #1
    b7ba:	469c      	mov	ip, r3
    b7bc:	4494      	add	ip, r2
    b7be:	4663      	mov	r3, ip
    b7c0:	930f      	str	r3, [sp, #60]	; 0x3c
    b7c2:	6853      	ldr	r3, [r2, #4]
    b7c4:	6812      	ldr	r2, [r2, #0]
    b7c6:	930d      	str	r3, [sp, #52]	; 0x34
    b7c8:	920c      	str	r2, [sp, #48]	; 0x30
    b7ca:	f7ff faa7 	bl	ad1c <_vfprintf_r+0x448>
    b7ce:	2207      	movs	r2, #7
    b7d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b7d2:	3307      	adds	r3, #7
    b7d4:	4393      	bics	r3, r2
    b7d6:	3201      	adds	r2, #1
    b7d8:	4694      	mov	ip, r2
    b7da:	449c      	add	ip, r3
    b7dc:	4662      	mov	r2, ip
    b7de:	920f      	str	r2, [sp, #60]	; 0x3c
    b7e0:	681a      	ldr	r2, [r3, #0]
    b7e2:	685b      	ldr	r3, [r3, #4]
    b7e4:	0011      	movs	r1, r2
    b7e6:	001a      	movs	r2, r3
    b7e8:	0008      	movs	r0, r1
    b7ea:	4310      	orrs	r0, r2
    b7ec:	910c      	str	r1, [sp, #48]	; 0x30
    b7ee:	920d      	str	r2, [sp, #52]	; 0x34
    b7f0:	2300      	movs	r3, #0
    b7f2:	0002      	movs	r2, r0
    b7f4:	f7ff f9b4 	bl	ab60 <_vfprintf_r+0x28c>
    b7f8:	46a3      	mov	fp, r4
    b7fa:	4698      	mov	r8, r3
    b7fc:	0014      	movs	r4, r2
    b7fe:	464b      	mov	r3, r9
    b800:	6075      	str	r5, [r6, #4]
    b802:	6033      	str	r3, [r6, #0]
    b804:	1964      	adds	r4, r4, r5
    b806:	e4f7      	b.n	b1f8 <_vfprintf_r+0x924>
    b808:	003a      	movs	r2, r7
    b80a:	4659      	mov	r1, fp
    b80c:	9806      	ldr	r0, [sp, #24]
    b80e:	f003 fb3d 	bl	ee8c <__sprint_r>
    b812:	2800      	cmp	r0, #0
    b814:	d000      	beq.n	b818 <_vfprintf_r+0xf44>
    b816:	e5ed      	b.n	b3f4 <_vfprintf_r+0xb20>
    b818:	687b      	ldr	r3, [r7, #4]
    b81a:	68bc      	ldr	r4, [r7, #8]
    b81c:	4698      	mov	r8, r3
    b81e:	ae32      	add	r6, sp, #200	; 0xc8
    b820:	e4da      	b.n	b1d8 <_vfprintf_r+0x904>
    b822:	2207      	movs	r2, #7
    b824:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b826:	3307      	adds	r3, #7
    b828:	4393      	bics	r3, r2
    b82a:	3201      	adds	r2, #1
    b82c:	4694      	mov	ip, r2
    b82e:	449c      	add	ip, r3
    b830:	4662      	mov	r2, ip
    b832:	920f      	str	r2, [sp, #60]	; 0x3c
    b834:	681a      	ldr	r2, [r3, #0]
    b836:	685b      	ldr	r3, [r3, #4]
    b838:	0011      	movs	r1, r2
    b83a:	001a      	movs	r2, r3
    b83c:	0008      	movs	r0, r1
    b83e:	4310      	orrs	r0, r2
    b840:	910c      	str	r1, [sp, #48]	; 0x30
    b842:	920d      	str	r2, [sp, #52]	; 0x34
    b844:	2301      	movs	r3, #1
    b846:	0002      	movs	r2, r0
    b848:	f7ff f98a 	bl	ab60 <_vfprintf_r+0x28c>
    b84c:	2207      	movs	r2, #7
    b84e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b850:	3307      	adds	r3, #7
    b852:	4393      	bics	r3, r2
    b854:	3201      	adds	r2, #1
    b856:	4694      	mov	ip, r2
    b858:	449c      	add	ip, r3
    b85a:	4662      	mov	r2, ip
    b85c:	920f      	str	r2, [sp, #60]	; 0x3c
    b85e:	681a      	ldr	r2, [r3, #0]
    b860:	685b      	ldr	r3, [r3, #4]
    b862:	920c      	str	r2, [sp, #48]	; 0x30
    b864:	930d      	str	r3, [sp, #52]	; 0x34
    b866:	f7ff f966 	bl	ab36 <_vfprintf_r+0x262>
    b86a:	003a      	movs	r2, r7
    b86c:	4659      	mov	r1, fp
    b86e:	9806      	ldr	r0, [sp, #24]
    b870:	f003 fb0c 	bl	ee8c <__sprint_r>
    b874:	2800      	cmp	r0, #0
    b876:	d000      	beq.n	b87a <_vfprintf_r+0xfa6>
    b878:	e5bc      	b.n	b3f4 <_vfprintf_r+0xb20>
    b87a:	68bc      	ldr	r4, [r7, #8]
    b87c:	ae32      	add	r6, sp, #200	; 0xc8
    b87e:	f7ff fbe2 	bl	b046 <_vfprintf_r+0x772>
    b882:	46c0      	nop			; (mov r8, r8)
    b884:	00010034 	.word	0x00010034
    b888:	980c      	ldr	r0, [sp, #48]	; 0x30
    b88a:	990d      	ldr	r1, [sp, #52]	; 0x34
    b88c:	2300      	movs	r3, #0
    b88e:	4242      	negs	r2, r0
    b890:	418b      	sbcs	r3, r1
    b892:	0011      	movs	r1, r2
    b894:	001a      	movs	r2, r3
    b896:	232d      	movs	r3, #45	; 0x2d
    b898:	a816      	add	r0, sp, #88	; 0x58
    b89a:	77c3      	strb	r3, [r0, #31]
    b89c:	0008      	movs	r0, r1
    b89e:	4310      	orrs	r0, r2
    b8a0:	910c      	str	r1, [sp, #48]	; 0x30
    b8a2:	920d      	str	r2, [sp, #52]	; 0x34
    b8a4:	4698      	mov	r8, r3
    b8a6:	0002      	movs	r2, r0
    b8a8:	3b2c      	subs	r3, #44	; 0x2c
    b8aa:	f7ff f95d 	bl	ab68 <_vfprintf_r+0x294>
    b8ae:	9916      	ldr	r1, [sp, #88]	; 0x58
    b8b0:	9d15      	ldr	r5, [sp, #84]	; 0x54
    b8b2:	000a      	movs	r2, r1
    b8b4:	0008      	movs	r0, r1
    b8b6:	002b      	movs	r3, r5
    b8b8:	0029      	movs	r1, r5
    b8ba:	f004 f927 	bl	fb0c <__aeabi_dcmpun>
    b8be:	2800      	cmp	r0, #0
    b8c0:	d000      	beq.n	b8c4 <_vfprintf_r+0xff0>
    b8c2:	e2c6      	b.n	be52 <_vfprintf_r+0x157e>
    b8c4:	4653      	mov	r3, sl
    b8c6:	3301      	adds	r3, #1
    b8c8:	d100      	bne.n	b8cc <_vfprintf_r+0xff8>
    b8ca:	e09f      	b.n	ba0c <_vfprintf_r+0x1138>
    b8cc:	2320      	movs	r3, #32
    b8ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
    b8d0:	439a      	bics	r2, r3
    b8d2:	920e      	str	r2, [sp, #56]	; 0x38
    b8d4:	2a47      	cmp	r2, #71	; 0x47
    b8d6:	d100      	bne.n	b8da <_vfprintf_r+0x1006>
    b8d8:	e1a1      	b.n	bc1e <_vfprintf_r+0x134a>
    b8da:	2380      	movs	r3, #128	; 0x80
    b8dc:	005b      	lsls	r3, r3, #1
    b8de:	4323      	orrs	r3, r4
    b8e0:	9309      	str	r3, [sp, #36]	; 0x24
    b8e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
    b8e4:	2b00      	cmp	r3, #0
    b8e6:	da00      	bge.n	b8ea <_vfprintf_r+0x1016>
    b8e8:	e1ed      	b.n	bcc6 <_vfprintf_r+0x13f2>
    b8ea:	9a16      	ldr	r2, [sp, #88]	; 0x58
    b8ec:	9308      	str	r3, [sp, #32]
    b8ee:	2300      	movs	r3, #0
    b8f0:	4691      	mov	r9, r2
    b8f2:	9310      	str	r3, [sp, #64]	; 0x40
    b8f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    b8f6:	2b66      	cmp	r3, #102	; 0x66
    b8f8:	d100      	bne.n	b8fc <_vfprintf_r+0x1028>
    b8fa:	e1b8      	b.n	bc6e <_vfprintf_r+0x139a>
    b8fc:	2b46      	cmp	r3, #70	; 0x46
    b8fe:	d100      	bne.n	b902 <_vfprintf_r+0x102e>
    b900:	e237      	b.n	bd72 <_vfprintf_r+0x149e>
    b902:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    b904:	9806      	ldr	r0, [sp, #24]
    b906:	3a45      	subs	r2, #69	; 0x45
    b908:	0013      	movs	r3, r2
    b90a:	4259      	negs	r1, r3
    b90c:	4159      	adcs	r1, r3
    b90e:	ab20      	add	r3, sp, #128	; 0x80
    b910:	000d      	movs	r5, r1
    b912:	9303      	str	r3, [sp, #12]
    b914:	ab1f      	add	r3, sp, #124	; 0x7c
    b916:	9302      	str	r3, [sp, #8]
    b918:	2302      	movs	r3, #2
    b91a:	aa23      	add	r2, sp, #140	; 0x8c
    b91c:	4455      	add	r5, sl
    b91e:	921b      	str	r2, [sp, #108]	; 0x6c
    b920:	9204      	str	r2, [sp, #16]
    b922:	9300      	str	r3, [sp, #0]
    b924:	9501      	str	r5, [sp, #4]
    b926:	9b08      	ldr	r3, [sp, #32]
    b928:	464a      	mov	r2, r9
    b92a:	f000 fd25 	bl	c378 <_dtoa_r>
    b92e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    b930:	9011      	str	r0, [sp, #68]	; 0x44
    b932:	2b67      	cmp	r3, #103	; 0x67
    b934:	d000      	beq.n	b938 <_vfprintf_r+0x1064>
    b936:	e20b      	b.n	bd50 <_vfprintf_r+0x147c>
    b938:	9b11      	ldr	r3, [sp, #68]	; 0x44
    b93a:	4698      	mov	r8, r3
    b93c:	44a8      	add	r8, r5
    b93e:	07e3      	lsls	r3, r4, #31
    b940:	d400      	bmi.n	b944 <_vfprintf_r+0x1070>
    b942:	e277      	b.n	be34 <_vfprintf_r+0x1560>
    b944:	2300      	movs	r3, #0
    b946:	2200      	movs	r2, #0
    b948:	4648      	mov	r0, r9
    b94a:	9908      	ldr	r1, [sp, #32]
    b94c:	f7fe fc94 	bl	a278 <__aeabi_dcmpeq>
    b950:	4643      	mov	r3, r8
    b952:	2800      	cmp	r0, #0
    b954:	d10a      	bne.n	b96c <_vfprintf_r+0x1098>
    b956:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    b958:	4543      	cmp	r3, r8
    b95a:	d207      	bcs.n	b96c <_vfprintf_r+0x1098>
    b95c:	2130      	movs	r1, #48	; 0x30
    b95e:	4640      	mov	r0, r8
    b960:	1c5a      	adds	r2, r3, #1
    b962:	9223      	str	r2, [sp, #140]	; 0x8c
    b964:	7019      	strb	r1, [r3, #0]
    b966:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    b968:	4298      	cmp	r0, r3
    b96a:	d8f9      	bhi.n	b960 <_vfprintf_r+0x108c>
    b96c:	9a11      	ldr	r2, [sp, #68]	; 0x44
    b96e:	1a9b      	subs	r3, r3, r2
    b970:	9314      	str	r3, [sp, #80]	; 0x50
    b972:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b974:	2b47      	cmp	r3, #71	; 0x47
    b976:	d100      	bne.n	b97a <_vfprintf_r+0x10a6>
    b978:	e0d0      	b.n	bb1c <_vfprintf_r+0x1248>
    b97a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    b97c:	2b65      	cmp	r3, #101	; 0x65
    b97e:	dc00      	bgt.n	b982 <_vfprintf_r+0x10ae>
    b980:	e2d5      	b.n	bf2e <_vfprintf_r+0x165a>
    b982:	9b12      	ldr	r3, [sp, #72]	; 0x48
    b984:	2b66      	cmp	r3, #102	; 0x66
    b986:	d100      	bne.n	b98a <_vfprintf_r+0x10b6>
    b988:	e1c6      	b.n	bd18 <_vfprintf_r+0x1444>
    b98a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    b98c:	9313      	str	r3, [sp, #76]	; 0x4c
    b98e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    b990:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    b992:	0019      	movs	r1, r3
    b994:	4291      	cmp	r1, r2
    b996:	dd00      	ble.n	b99a <_vfprintf_r+0x10c6>
    b998:	e1a0      	b.n	bcdc <_vfprintf_r+0x1408>
    b99a:	07e3      	lsls	r3, r4, #31
    b99c:	d500      	bpl.n	b9a0 <_vfprintf_r+0x10cc>
    b99e:	e242      	b.n	be26 <_vfprintf_r+0x1552>
    b9a0:	43d3      	mvns	r3, r2
    b9a2:	17db      	asrs	r3, r3, #31
    b9a4:	0011      	movs	r1, r2
    b9a6:	401a      	ands	r2, r3
    b9a8:	2367      	movs	r3, #103	; 0x67
    b9aa:	9208      	str	r2, [sp, #32]
    b9ac:	910e      	str	r1, [sp, #56]	; 0x38
    b9ae:	9312      	str	r3, [sp, #72]	; 0x48
    b9b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    b9b2:	2b00      	cmp	r3, #0
    b9b4:	d000      	beq.n	b9b8 <_vfprintf_r+0x10e4>
    b9b6:	e0a9      	b.n	bb0c <_vfprintf_r+0x1238>
    b9b8:	ab16      	add	r3, sp, #88	; 0x58
    b9ba:	7fdb      	ldrb	r3, [r3, #31]
    b9bc:	4698      	mov	r8, r3
    b9be:	2300      	movs	r3, #0
    b9c0:	469a      	mov	sl, r3
    b9c2:	f7ff f8fc 	bl	abbe <_vfprintf_r+0x2ea>
    b9c6:	46cb      	mov	fp, r9
    b9c8:	46a1      	mov	r9, r4
    b9ca:	0014      	movs	r4, r2
    b9cc:	e637      	b.n	b63e <_vfprintf_r+0xd6a>
    b9ce:	464b      	mov	r3, r9
    b9d0:	6d98      	ldr	r0, [r3, #88]	; 0x58
    b9d2:	f002 f8db 	bl	db8c <__retarget_lock_release_recursive>
    b9d6:	2301      	movs	r3, #1
    b9d8:	425b      	negs	r3, r3
    b9da:	930a      	str	r3, [sp, #40]	; 0x28
    b9dc:	f7ff f82b 	bl	aa36 <_vfprintf_r+0x162>
    b9e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    b9e2:	07d2      	lsls	r2, r2, #31
    b9e4:	d400      	bmi.n	b9e8 <_vfprintf_r+0x1114>
    b9e6:	e68f      	b.n	b708 <_vfprintf_r+0xe34>
    b9e8:	e680      	b.n	b6ec <_vfprintf_r+0xe18>
    b9ea:	3608      	adds	r6, #8
    b9ec:	e679      	b.n	b6e2 <_vfprintf_r+0xe0e>
    b9ee:	68bc      	ldr	r4, [r7, #8]
    b9f0:	f7ff fb73 	bl	b0da <_vfprintf_r+0x806>
    b9f4:	003a      	movs	r2, r7
    b9f6:	4659      	mov	r1, fp
    b9f8:	9806      	ldr	r0, [sp, #24]
    b9fa:	f003 fa47 	bl	ee8c <__sprint_r>
    b9fe:	2800      	cmp	r0, #0
    ba00:	d000      	beq.n	ba04 <_vfprintf_r+0x1130>
    ba02:	e4f7      	b.n	b3f4 <_vfprintf_r+0xb20>
    ba04:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    ba06:	68bc      	ldr	r4, [r7, #8]
    ba08:	ae32      	add	r6, sp, #200	; 0xc8
    ba0a:	e67d      	b.n	b708 <_vfprintf_r+0xe34>
    ba0c:	2320      	movs	r3, #32
    ba0e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    ba10:	439a      	bics	r2, r3
    ba12:	3b1a      	subs	r3, #26
    ba14:	920e      	str	r2, [sp, #56]	; 0x38
    ba16:	469a      	mov	sl, r3
    ba18:	e75f      	b.n	b8da <_vfprintf_r+0x1006>
    ba1a:	232d      	movs	r3, #45	; 0x2d
    ba1c:	aa16      	add	r2, sp, #88	; 0x58
    ba1e:	77d3      	strb	r3, [r2, #31]
    ba20:	4698      	mov	r8, r3
    ba22:	f7ff faa8 	bl	af76 <_vfprintf_r+0x6a2>
    ba26:	003a      	movs	r2, r7
    ba28:	4659      	mov	r1, fp
    ba2a:	9806      	ldr	r0, [sp, #24]
    ba2c:	f003 fa2e 	bl	ee8c <__sprint_r>
    ba30:	2800      	cmp	r0, #0
    ba32:	d000      	beq.n	ba36 <_vfprintf_r+0x1162>
    ba34:	e4de      	b.n	b3f4 <_vfprintf_r+0xb20>
    ba36:	ae32      	add	r6, sp, #200	; 0xc8
    ba38:	e419      	b.n	b26e <_vfprintf_r+0x99a>
    ba3a:	4be3      	ldr	r3, [pc, #908]	; (bdc8 <_vfprintf_r+0x14f4>)
    ba3c:	3401      	adds	r4, #1
    ba3e:	6033      	str	r3, [r6, #0]
    ba40:	2301      	movs	r3, #1
    ba42:	6073      	str	r3, [r6, #4]
    ba44:	687b      	ldr	r3, [r7, #4]
    ba46:	60bc      	str	r4, [r7, #8]
    ba48:	3301      	adds	r3, #1
    ba4a:	607b      	str	r3, [r7, #4]
    ba4c:	2b07      	cmp	r3, #7
    ba4e:	dd00      	ble.n	ba52 <_vfprintf_r+0x117e>
    ba50:	e155      	b.n	bcfe <_vfprintf_r+0x142a>
    ba52:	3608      	adds	r6, #8
    ba54:	2800      	cmp	r0, #0
    ba56:	d107      	bne.n	ba68 <_vfprintf_r+0x1194>
    ba58:	9b14      	ldr	r3, [sp, #80]	; 0x50
    ba5a:	2b00      	cmp	r3, #0
    ba5c:	d104      	bne.n	ba68 <_vfprintf_r+0x1194>
    ba5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ba60:	07db      	lsls	r3, r3, #31
    ba62:	d401      	bmi.n	ba68 <_vfprintf_r+0x1194>
    ba64:	f7ff fb39 	bl	b0da <_vfprintf_r+0x806>
    ba68:	9b18      	ldr	r3, [sp, #96]	; 0x60
    ba6a:	6033      	str	r3, [r6, #0]
    ba6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    ba6e:	1919      	adds	r1, r3, r4
    ba70:	6073      	str	r3, [r6, #4]
    ba72:	687b      	ldr	r3, [r7, #4]
    ba74:	60b9      	str	r1, [r7, #8]
    ba76:	3301      	adds	r3, #1
    ba78:	607b      	str	r3, [r7, #4]
    ba7a:	2b07      	cmp	r3, #7
    ba7c:	dd00      	ble.n	ba80 <_vfprintf_r+0x11ac>
    ba7e:	e1c4      	b.n	be0a <_vfprintf_r+0x1536>
    ba80:	0032      	movs	r2, r6
    ba82:	3208      	adds	r2, #8
    ba84:	2800      	cmp	r0, #0
    ba86:	da00      	bge.n	ba8a <_vfprintf_r+0x11b6>
    ba88:	e195      	b.n	bdb6 <_vfprintf_r+0x14e2>
    ba8a:	9811      	ldr	r0, [sp, #68]	; 0x44
    ba8c:	3301      	adds	r3, #1
    ba8e:	6010      	str	r0, [r2, #0]
    ba90:	9814      	ldr	r0, [sp, #80]	; 0x50
    ba92:	607b      	str	r3, [r7, #4]
    ba94:	1844      	adds	r4, r0, r1
    ba96:	6050      	str	r0, [r2, #4]
    ba98:	60bc      	str	r4, [r7, #8]
    ba9a:	2b07      	cmp	r3, #7
    ba9c:	dd01      	ble.n	baa2 <_vfprintf_r+0x11ce>
    ba9e:	f7ff fbc2 	bl	b226 <_vfprintf_r+0x952>
    baa2:	3208      	adds	r2, #8
    baa4:	0016      	movs	r6, r2
    baa6:	f7ff fb18 	bl	b0da <_vfprintf_r+0x806>
    baaa:	990f      	ldr	r1, [sp, #60]	; 0x3c
    baac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    baae:	680b      	ldr	r3, [r1, #0]
    bab0:	601a      	str	r2, [r3, #0]
    bab2:	17d2      	asrs	r2, r2, #31
    bab4:	605a      	str	r2, [r3, #4]
    bab6:	000b      	movs	r3, r1
    bab8:	3304      	adds	r3, #4
    baba:	930f      	str	r3, [sp, #60]	; 0x3c
    babc:	f7fe ff58 	bl	a970 <_vfprintf_r+0x9c>
    bac0:	464b      	mov	r3, r9
    bac2:	9a07      	ldr	r2, [sp, #28]
    bac4:	431c      	orrs	r4, r3
    bac6:	3201      	adds	r2, #1
    bac8:	7813      	ldrb	r3, [r2, #0]
    baca:	9207      	str	r2, [sp, #28]
    bacc:	f7fe ff8b 	bl	a9e6 <_vfprintf_r+0x112>
    bad0:	003a      	movs	r2, r7
    bad2:	4659      	mov	r1, fp
    bad4:	9806      	ldr	r0, [sp, #24]
    bad6:	f003 f9d9 	bl	ee8c <__sprint_r>
    bada:	2800      	cmp	r0, #0
    badc:	d000      	beq.n	bae0 <_vfprintf_r+0x120c>
    bade:	e489      	b.n	b3f4 <_vfprintf_r+0xb20>
    bae0:	68bc      	ldr	r4, [r7, #8]
    bae2:	ae32      	add	r6, sp, #200	; 0xc8
    bae4:	f7ff fbdc 	bl	b2a0 <_vfprintf_r+0x9cc>
    bae8:	4bb8      	ldr	r3, [pc, #736]	; (bdcc <_vfprintf_r+0x14f8>)
    baea:	9311      	str	r3, [sp, #68]	; 0x44
    baec:	f7ff fa4a 	bl	af84 <_vfprintf_r+0x6b0>
    baf0:	9a11      	ldr	r2, [sp, #68]	; 0x44
    baf2:	ab32      	add	r3, sp, #200	; 0xc8
    baf4:	1a9b      	subs	r3, r3, r2
    baf6:	930e      	str	r3, [sp, #56]	; 0x38
    baf8:	f7ff f859 	bl	abae <_vfprintf_r+0x2da>
    bafc:	9811      	ldr	r0, [sp, #68]	; 0x44
    bafe:	f7fe feb7 	bl	a870 <strlen>
    bb02:	0002      	movs	r2, r0
    bb04:	900e      	str	r0, [sp, #56]	; 0x38
    bb06:	0003      	movs	r3, r0
    bb08:	f7ff f9a1 	bl	ae4e <_vfprintf_r+0x57a>
    bb0c:	232d      	movs	r3, #45	; 0x2d
    bb0e:	aa16      	add	r2, sp, #88	; 0x58
    bb10:	77d3      	strb	r3, [r2, #31]
    bb12:	4698      	mov	r8, r3
    bb14:	2300      	movs	r3, #0
    bb16:	469a      	mov	sl, r3
    bb18:	f7ff f854 	bl	abc4 <_vfprintf_r+0x2f0>
    bb1c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    bb1e:	9313      	str	r3, [sp, #76]	; 0x4c
    bb20:	1cda      	adds	r2, r3, #3
    bb22:	db02      	blt.n	bb2a <_vfprintf_r+0x1256>
    bb24:	459a      	cmp	sl, r3
    bb26:	db00      	blt.n	bb2a <_vfprintf_r+0x1256>
    bb28:	e731      	b.n	b98e <_vfprintf_r+0x10ba>
    bb2a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    bb2c:	3b02      	subs	r3, #2
    bb2e:	9312      	str	r3, [sp, #72]	; 0x48
    bb30:	222c      	movs	r2, #44	; 0x2c
    bb32:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    bb34:	2148      	movs	r1, #72	; 0x48
    bb36:	1e5d      	subs	r5, r3, #1
    bb38:	ab16      	add	r3, sp, #88	; 0x58
    bb3a:	189b      	adds	r3, r3, r2
    bb3c:	466a      	mov	r2, sp
    bb3e:	1852      	adds	r2, r2, r1
    bb40:	7812      	ldrb	r2, [r2, #0]
    bb42:	951f      	str	r5, [sp, #124]	; 0x7c
    bb44:	701a      	strb	r2, [r3, #0]
    bb46:	2d00      	cmp	r5, #0
    bb48:	da00      	bge.n	bb4c <_vfprintf_r+0x1278>
    bb4a:	e1cb      	b.n	bee4 <_vfprintf_r+0x1610>
    bb4c:	212d      	movs	r1, #45	; 0x2d
    bb4e:	232b      	movs	r3, #43	; 0x2b
    bb50:	aa16      	add	r2, sp, #88	; 0x58
    bb52:	1852      	adds	r2, r2, r1
    bb54:	7013      	strb	r3, [r2, #0]
    bb56:	2d09      	cmp	r5, #9
    bb58:	dc00      	bgt.n	bb5c <_vfprintf_r+0x1288>
    bb5a:	e16d      	b.n	be38 <_vfprintf_r+0x1564>
    bb5c:	aa16      	add	r2, sp, #88	; 0x58
    bb5e:	233b      	movs	r3, #59	; 0x3b
    bb60:	4694      	mov	ip, r2
    bb62:	4463      	add	r3, ip
    bb64:	469a      	mov	sl, r3
    bb66:	46b1      	mov	r9, r6
    bb68:	46a0      	mov	r8, r4
    bb6a:	4656      	mov	r6, sl
    bb6c:	e000      	b.n	bb70 <_vfprintf_r+0x129c>
    bb6e:	0026      	movs	r6, r4
    bb70:	0028      	movs	r0, r5
    bb72:	210a      	movs	r1, #10
    bb74:	f003 fcb6 	bl	f4e4 <__aeabi_idivmod>
    bb78:	1e74      	subs	r4, r6, #1
    bb7a:	3130      	adds	r1, #48	; 0x30
    bb7c:	7021      	strb	r1, [r4, #0]
    bb7e:	0028      	movs	r0, r5
    bb80:	210a      	movs	r1, #10
    bb82:	f003 fbc9 	bl	f318 <__divsi3>
    bb86:	0005      	movs	r5, r0
    bb88:	2809      	cmp	r0, #9
    bb8a:	dcf0      	bgt.n	bb6e <_vfprintf_r+0x129a>
    bb8c:	0023      	movs	r3, r4
    bb8e:	4644      	mov	r4, r8
    bb90:	46b0      	mov	r8, r6
    bb92:	464e      	mov	r6, r9
    bb94:	4699      	mov	r9, r3
    bb96:	0003      	movs	r3, r0
    bb98:	3330      	adds	r3, #48	; 0x30
    bb9a:	b2d8      	uxtb	r0, r3
    bb9c:	4643      	mov	r3, r8
    bb9e:	3b02      	subs	r3, #2
    bba0:	7018      	strb	r0, [r3, #0]
    bba2:	459a      	cmp	sl, r3
    bba4:	d800      	bhi.n	bba8 <_vfprintf_r+0x12d4>
    bba6:	e1f6      	b.n	bf96 <_vfprintf_r+0x16c2>
    bba8:	4642      	mov	r2, r8
    bbaa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    bbac:	4645      	mov	r5, r8
    bbae:	1a99      	subs	r1, r3, r2
    bbb0:	2301      	movs	r3, #1
    bbb2:	3107      	adds	r1, #7
    bbb4:	425b      	negs	r3, r3
    bbb6:	e001      	b.n	bbbc <_vfprintf_r+0x12e8>
    bbb8:	5ce8      	ldrb	r0, [r5, r3]
    bbba:	3301      	adds	r3, #1
    bbbc:	aa21      	add	r2, sp, #132	; 0x84
    bbbe:	18d2      	adds	r2, r2, r3
    bbc0:	70d0      	strb	r0, [r2, #3]
    bbc2:	428b      	cmp	r3, r1
    bbc4:	d1f8      	bne.n	bbb8 <_vfprintf_r+0x12e4>
    bbc6:	a916      	add	r1, sp, #88	; 0x58
    bbc8:	468c      	mov	ip, r1
    bbca:	222e      	movs	r2, #46	; 0x2e
    bbcc:	464b      	mov	r3, r9
    bbce:	4462      	add	r2, ip
    bbd0:	4694      	mov	ip, r2
    bbd2:	1afb      	subs	r3, r7, r3
    bbd4:	4463      	add	r3, ip
    bbd6:	aa21      	add	r2, sp, #132	; 0x84
    bbd8:	9914      	ldr	r1, [sp, #80]	; 0x50
    bbda:	1a9b      	subs	r3, r3, r2
    bbdc:	469c      	mov	ip, r3
    bbde:	000a      	movs	r2, r1
    bbe0:	4462      	add	r2, ip
    bbe2:	931a      	str	r3, [sp, #104]	; 0x68
    bbe4:	920e      	str	r2, [sp, #56]	; 0x38
    bbe6:	2901      	cmp	r1, #1
    bbe8:	dc00      	bgt.n	bbec <_vfprintf_r+0x1318>
    bbea:	e170      	b.n	bece <_vfprintf_r+0x15fa>
    bbec:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    bbee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    bbf0:	4694      	mov	ip, r2
    bbf2:	4463      	add	r3, ip
    bbf4:	001a      	movs	r2, r3
    bbf6:	930e      	str	r3, [sp, #56]	; 0x38
    bbf8:	43db      	mvns	r3, r3
    bbfa:	17db      	asrs	r3, r3, #31
    bbfc:	401a      	ands	r2, r3
    bbfe:	2300      	movs	r3, #0
    bc00:	9208      	str	r2, [sp, #32]
    bc02:	9313      	str	r3, [sp, #76]	; 0x4c
    bc04:	e6d4      	b.n	b9b0 <_vfprintf_r+0x10dc>
    bc06:	003a      	movs	r2, r7
    bc08:	4659      	mov	r1, fp
    bc0a:	9806      	ldr	r0, [sp, #24]
    bc0c:	f003 f93e 	bl	ee8c <__sprint_r>
    bc10:	2800      	cmp	r0, #0
    bc12:	d001      	beq.n	bc18 <_vfprintf_r+0x1344>
    bc14:	f7ff fbee 	bl	b3f4 <_vfprintf_r+0xb20>
    bc18:	68bc      	ldr	r4, [r7, #8]
    bc1a:	ae32      	add	r6, sp, #200	; 0xc8
    bc1c:	e46a      	b.n	b4f4 <_vfprintf_r+0xc20>
    bc1e:	4653      	mov	r3, sl
    bc20:	2b00      	cmp	r3, #0
    bc22:	d000      	beq.n	bc26 <_vfprintf_r+0x1352>
    bc24:	e659      	b.n	b8da <_vfprintf_r+0x1006>
    bc26:	3301      	adds	r3, #1
    bc28:	469a      	mov	sl, r3
    bc2a:	e656      	b.n	b8da <_vfprintf_r+0x1006>
    bc2c:	4653      	mov	r3, sl
    bc2e:	9308      	str	r3, [sp, #32]
    bc30:	2b06      	cmp	r3, #6
    bc32:	d901      	bls.n	bc38 <_vfprintf_r+0x1364>
    bc34:	2306      	movs	r3, #6
    bc36:	9308      	str	r3, [sp, #32]
    bc38:	9b08      	ldr	r3, [sp, #32]
    bc3a:	950f      	str	r5, [sp, #60]	; 0x3c
    bc3c:	930e      	str	r3, [sp, #56]	; 0x38
    bc3e:	2300      	movs	r3, #0
    bc40:	4698      	mov	r8, r3
    bc42:	469a      	mov	sl, r3
    bc44:	9313      	str	r3, [sp, #76]	; 0x4c
    bc46:	4b62      	ldr	r3, [pc, #392]	; (bdd0 <_vfprintf_r+0x14fc>)
    bc48:	9409      	str	r4, [sp, #36]	; 0x24
    bc4a:	9311      	str	r3, [sp, #68]	; 0x44
    bc4c:	f7fe ffbd 	bl	abca <_vfprintf_r+0x2f6>
    bc50:	003a      	movs	r2, r7
    bc52:	4659      	mov	r1, fp
    bc54:	9806      	ldr	r0, [sp, #24]
    bc56:	f003 f919 	bl	ee8c <__sprint_r>
    bc5a:	2800      	cmp	r0, #0
    bc5c:	d001      	beq.n	bc62 <_vfprintf_r+0x138e>
    bc5e:	f7ff fbc9 	bl	b3f4 <_vfprintf_r+0xb20>
    bc62:	9b14      	ldr	r3, [sp, #80]	; 0x50
    bc64:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    bc66:	68bc      	ldr	r4, [r7, #8]
    bc68:	1a9b      	subs	r3, r3, r2
    bc6a:	ae32      	add	r6, sp, #200	; 0xc8
    bc6c:	e567      	b.n	b73e <_vfprintf_r+0xe6a>
    bc6e:	ab23      	add	r3, sp, #140	; 0x8c
    bc70:	931b      	str	r3, [sp, #108]	; 0x6c
    bc72:	9304      	str	r3, [sp, #16]
    bc74:	ab20      	add	r3, sp, #128	; 0x80
    bc76:	9303      	str	r3, [sp, #12]
    bc78:	ab1f      	add	r3, sp, #124	; 0x7c
    bc7a:	9302      	str	r3, [sp, #8]
    bc7c:	4653      	mov	r3, sl
    bc7e:	9301      	str	r3, [sp, #4]
    bc80:	2303      	movs	r3, #3
    bc82:	464a      	mov	r2, r9
    bc84:	9300      	str	r3, [sp, #0]
    bc86:	9806      	ldr	r0, [sp, #24]
    bc88:	9b08      	ldr	r3, [sp, #32]
    bc8a:	f000 fb75 	bl	c378 <_dtoa_r>
    bc8e:	0003      	movs	r3, r0
    bc90:	4453      	add	r3, sl
    bc92:	4698      	mov	r8, r3
    bc94:	4655      	mov	r5, sl
    bc96:	9011      	str	r0, [sp, #68]	; 0x44
    bc98:	9b11      	ldr	r3, [sp, #68]	; 0x44
    bc9a:	781b      	ldrb	r3, [r3, #0]
    bc9c:	2b30      	cmp	r3, #48	; 0x30
    bc9e:	d002      	beq.n	bca6 <_vfprintf_r+0x13d2>
    bca0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    bca2:	4498      	add	r8, r3
    bca4:	e64e      	b.n	b944 <_vfprintf_r+0x1070>
    bca6:	2200      	movs	r2, #0
    bca8:	2300      	movs	r3, #0
    bcaa:	4648      	mov	r0, r9
    bcac:	9908      	ldr	r1, [sp, #32]
    bcae:	f7fe fae3 	bl	a278 <__aeabi_dcmpeq>
    bcb2:	2800      	cmp	r0, #0
    bcb4:	d1f4      	bne.n	bca0 <_vfprintf_r+0x13cc>
    bcb6:	2301      	movs	r3, #1
    bcb8:	1b5b      	subs	r3, r3, r5
    bcba:	931f      	str	r3, [sp, #124]	; 0x7c
    bcbc:	4498      	add	r8, r3
    bcbe:	e641      	b.n	b944 <_vfprintf_r+0x1070>
    bcc0:	46c1      	mov	r9, r8
    bcc2:	f7ff fb1f 	bl	b304 <_vfprintf_r+0xa30>
    bcc6:	2280      	movs	r2, #128	; 0x80
    bcc8:	0612      	lsls	r2, r2, #24
    bcca:	4694      	mov	ip, r2
    bccc:	9b16      	ldr	r3, [sp, #88]	; 0x58
    bcce:	4699      	mov	r9, r3
    bcd0:	9b15      	ldr	r3, [sp, #84]	; 0x54
    bcd2:	4463      	add	r3, ip
    bcd4:	9308      	str	r3, [sp, #32]
    bcd6:	232d      	movs	r3, #45	; 0x2d
    bcd8:	9310      	str	r3, [sp, #64]	; 0x40
    bcda:	e60b      	b.n	b8f4 <_vfprintf_r+0x1020>
    bcdc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    bcde:	9b14      	ldr	r3, [sp, #80]	; 0x50
    bce0:	4694      	mov	ip, r2
    bce2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    bce4:	4463      	add	r3, ip
    bce6:	930e      	str	r3, [sp, #56]	; 0x38
    bce8:	2a00      	cmp	r2, #0
    bcea:	dc00      	bgt.n	bcee <_vfprintf_r+0x141a>
    bcec:	e0e3      	b.n	beb6 <_vfprintf_r+0x15e2>
    bcee:	001a      	movs	r2, r3
    bcf0:	43db      	mvns	r3, r3
    bcf2:	17db      	asrs	r3, r3, #31
    bcf4:	401a      	ands	r2, r3
    bcf6:	2367      	movs	r3, #103	; 0x67
    bcf8:	9208      	str	r2, [sp, #32]
    bcfa:	9312      	str	r3, [sp, #72]	; 0x48
    bcfc:	e658      	b.n	b9b0 <_vfprintf_r+0x10dc>
    bcfe:	003a      	movs	r2, r7
    bd00:	4659      	mov	r1, fp
    bd02:	9806      	ldr	r0, [sp, #24]
    bd04:	f003 f8c2 	bl	ee8c <__sprint_r>
    bd08:	2800      	cmp	r0, #0
    bd0a:	d001      	beq.n	bd10 <_vfprintf_r+0x143c>
    bd0c:	f7ff fb72 	bl	b3f4 <_vfprintf_r+0xb20>
    bd10:	981f      	ldr	r0, [sp, #124]	; 0x7c
    bd12:	68bc      	ldr	r4, [r7, #8]
    bd14:	ae32      	add	r6, sp, #200	; 0xc8
    bd16:	e69d      	b.n	ba54 <_vfprintf_r+0x1180>
    bd18:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    bd1a:	9313      	str	r3, [sp, #76]	; 0x4c
    bd1c:	2b00      	cmp	r3, #0
    bd1e:	dc00      	bgt.n	bd22 <_vfprintf_r+0x144e>
    bd20:	e0f2      	b.n	bf08 <_vfprintf_r+0x1634>
    bd22:	4652      	mov	r2, sl
    bd24:	2a00      	cmp	r2, #0
    bd26:	d000      	beq.n	bd2a <_vfprintf_r+0x1456>
    bd28:	e0a0      	b.n	be6c <_vfprintf_r+0x1598>
    bd2a:	07e2      	lsls	r2, r4, #31
    bd2c:	d500      	bpl.n	bd30 <_vfprintf_r+0x145c>
    bd2e:	e09d      	b.n	be6c <_vfprintf_r+0x1598>
    bd30:	9308      	str	r3, [sp, #32]
    bd32:	930e      	str	r3, [sp, #56]	; 0x38
    bd34:	e63c      	b.n	b9b0 <_vfprintf_r+0x10dc>
    bd36:	ab16      	add	r3, sp, #88	; 0x58
    bd38:	7fdb      	ldrb	r3, [r3, #31]
    bd3a:	950f      	str	r5, [sp, #60]	; 0x3c
    bd3c:	4698      	mov	r8, r3
    bd3e:	4653      	mov	r3, sl
    bd40:	9308      	str	r3, [sp, #32]
    bd42:	930e      	str	r3, [sp, #56]	; 0x38
    bd44:	2300      	movs	r3, #0
    bd46:	9409      	str	r4, [sp, #36]	; 0x24
    bd48:	469a      	mov	sl, r3
    bd4a:	9313      	str	r3, [sp, #76]	; 0x4c
    bd4c:	f7fe ff37 	bl	abbe <_vfprintf_r+0x2ea>
    bd50:	9b11      	ldr	r3, [sp, #68]	; 0x44
    bd52:	4698      	mov	r8, r3
    bd54:	9b12      	ldr	r3, [sp, #72]	; 0x48
    bd56:	44a8      	add	r8, r5
    bd58:	2b47      	cmp	r3, #71	; 0x47
    bd5a:	d000      	beq.n	bd5e <_vfprintf_r+0x148a>
    bd5c:	e5f2      	b.n	b944 <_vfprintf_r+0x1070>
    bd5e:	07e3      	lsls	r3, r4, #31
    bd60:	d400      	bmi.n	bd64 <_vfprintf_r+0x1490>
    bd62:	e0dc      	b.n	bf1e <_vfprintf_r+0x164a>
    bd64:	9b11      	ldr	r3, [sp, #68]	; 0x44
    bd66:	4698      	mov	r8, r3
    bd68:	9b12      	ldr	r3, [sp, #72]	; 0x48
    bd6a:	44a8      	add	r8, r5
    bd6c:	2b46      	cmp	r3, #70	; 0x46
    bd6e:	d093      	beq.n	bc98 <_vfprintf_r+0x13c4>
    bd70:	e5e8      	b.n	b944 <_vfprintf_r+0x1070>
    bd72:	ab23      	add	r3, sp, #140	; 0x8c
    bd74:	931b      	str	r3, [sp, #108]	; 0x6c
    bd76:	9304      	str	r3, [sp, #16]
    bd78:	ab20      	add	r3, sp, #128	; 0x80
    bd7a:	9303      	str	r3, [sp, #12]
    bd7c:	ab1f      	add	r3, sp, #124	; 0x7c
    bd7e:	9302      	str	r3, [sp, #8]
    bd80:	4653      	mov	r3, sl
    bd82:	9301      	str	r3, [sp, #4]
    bd84:	2303      	movs	r3, #3
    bd86:	464a      	mov	r2, r9
    bd88:	9300      	str	r3, [sp, #0]
    bd8a:	9806      	ldr	r0, [sp, #24]
    bd8c:	9b08      	ldr	r3, [sp, #32]
    bd8e:	f000 faf3 	bl	c378 <_dtoa_r>
    bd92:	4655      	mov	r5, sl
    bd94:	9011      	str	r0, [sp, #68]	; 0x44
    bd96:	e7e5      	b.n	bd64 <_vfprintf_r+0x1490>
    bd98:	003a      	movs	r2, r7
    bd9a:	4659      	mov	r1, fp
    bd9c:	9806      	ldr	r0, [sp, #24]
    bd9e:	f003 f875 	bl	ee8c <__sprint_r>
    bda2:	2800      	cmp	r0, #0
    bda4:	d101      	bne.n	bdaa <_vfprintf_r+0x14d6>
    bda6:	f7ff faab 	bl	b300 <_vfprintf_r+0xa2c>
    bdaa:	f7ff faab 	bl	b304 <_vfprintf_r+0xa30>
    bdae:	4642      	mov	r2, r8
    bdb0:	9207      	str	r2, [sp, #28]
    bdb2:	f7fe fe1b 	bl	a9ec <_vfprintf_r+0x118>
    bdb6:	4244      	negs	r4, r0
    bdb8:	3010      	adds	r0, #16
    bdba:	db00      	blt.n	bdbe <_vfprintf_r+0x14ea>
    bdbc:	e0d8      	b.n	bf70 <_vfprintf_r+0x169c>
    bdbe:	4805      	ldr	r0, [pc, #20]	; (bdd4 <_vfprintf_r+0x1500>)
    bdc0:	2610      	movs	r6, #16
    bdc2:	0005      	movs	r5, r0
    bdc4:	e00c      	b.n	bde0 <_vfprintf_r+0x150c>
    bdc6:	46c0      	nop			; (mov r8, r8)
    bdc8:	00010020 	.word	0x00010020
    bdcc:	0000ffe4 	.word	0x0000ffe4
    bdd0:	00010018 	.word	0x00010018
    bdd4:	00010034 	.word	0x00010034
    bdd8:	3208      	adds	r2, #8
    bdda:	3c10      	subs	r4, #16
    bddc:	2c10      	cmp	r4, #16
    bdde:	dd51      	ble.n	be84 <_vfprintf_r+0x15b0>
    bde0:	3110      	adds	r1, #16
    bde2:	3301      	adds	r3, #1
    bde4:	6015      	str	r5, [r2, #0]
    bde6:	6056      	str	r6, [r2, #4]
    bde8:	60b9      	str	r1, [r7, #8]
    bdea:	607b      	str	r3, [r7, #4]
    bdec:	2b07      	cmp	r3, #7
    bdee:	ddf3      	ble.n	bdd8 <_vfprintf_r+0x1504>
    bdf0:	003a      	movs	r2, r7
    bdf2:	4659      	mov	r1, fp
    bdf4:	9806      	ldr	r0, [sp, #24]
    bdf6:	f003 f849 	bl	ee8c <__sprint_r>
    bdfa:	2800      	cmp	r0, #0
    bdfc:	d001      	beq.n	be02 <_vfprintf_r+0x152e>
    bdfe:	f7ff faf9 	bl	b3f4 <_vfprintf_r+0xb20>
    be02:	68b9      	ldr	r1, [r7, #8]
    be04:	687b      	ldr	r3, [r7, #4]
    be06:	aa32      	add	r2, sp, #200	; 0xc8
    be08:	e7e7      	b.n	bdda <_vfprintf_r+0x1506>
    be0a:	003a      	movs	r2, r7
    be0c:	4659      	mov	r1, fp
    be0e:	9806      	ldr	r0, [sp, #24]
    be10:	f003 f83c 	bl	ee8c <__sprint_r>
    be14:	2800      	cmp	r0, #0
    be16:	d001      	beq.n	be1c <_vfprintf_r+0x1548>
    be18:	f7ff faec 	bl	b3f4 <_vfprintf_r+0xb20>
    be1c:	981f      	ldr	r0, [sp, #124]	; 0x7c
    be1e:	68b9      	ldr	r1, [r7, #8]
    be20:	687b      	ldr	r3, [r7, #4]
    be22:	aa32      	add	r2, sp, #200	; 0xc8
    be24:	e62e      	b.n	ba84 <_vfprintf_r+0x11b0>
    be26:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    be28:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    be2a:	4694      	mov	ip, r2
    be2c:	4463      	add	r3, ip
    be2e:	001a      	movs	r2, r3
    be30:	930e      	str	r3, [sp, #56]	; 0x38
    be32:	e75d      	b.n	bcf0 <_vfprintf_r+0x141c>
    be34:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    be36:	e599      	b.n	b96c <_vfprintf_r+0x1098>
    be38:	212e      	movs	r1, #46	; 0x2e
    be3a:	2330      	movs	r3, #48	; 0x30
    be3c:	aa16      	add	r2, sp, #88	; 0x58
    be3e:	1852      	adds	r2, r2, r1
    be40:	7013      	strb	r3, [r2, #0]
    be42:	002b      	movs	r3, r5
    be44:	aa16      	add	r2, sp, #88	; 0x58
    be46:	3101      	adds	r1, #1
    be48:	3330      	adds	r3, #48	; 0x30
    be4a:	1852      	adds	r2, r2, r1
    be4c:	7013      	strb	r3, [r2, #0]
    be4e:	ab22      	add	r3, sp, #136	; 0x88
    be50:	e6c1      	b.n	bbd6 <_vfprintf_r+0x1302>
    be52:	9b15      	ldr	r3, [sp, #84]	; 0x54
    be54:	2b00      	cmp	r3, #0
    be56:	db52      	blt.n	befe <_vfprintf_r+0x162a>
    be58:	ab16      	add	r3, sp, #88	; 0x58
    be5a:	7fdb      	ldrb	r3, [r3, #31]
    be5c:	4698      	mov	r8, r3
    be5e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    be60:	2b47      	cmp	r3, #71	; 0x47
    be62:	dc48      	bgt.n	bef6 <_vfprintf_r+0x1622>
    be64:	4b4e      	ldr	r3, [pc, #312]	; (bfa0 <_vfprintf_r+0x16cc>)
    be66:	9311      	str	r3, [sp, #68]	; 0x44
    be68:	f7ff f88c 	bl	af84 <_vfprintf_r+0x6b0>
    be6c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    be6e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    be70:	4694      	mov	ip, r2
    be72:	4463      	add	r3, ip
    be74:	4453      	add	r3, sl
    be76:	001a      	movs	r2, r3
    be78:	930e      	str	r3, [sp, #56]	; 0x38
    be7a:	43db      	mvns	r3, r3
    be7c:	17db      	asrs	r3, r3, #31
    be7e:	401a      	ands	r2, r3
    be80:	9208      	str	r2, [sp, #32]
    be82:	e595      	b.n	b9b0 <_vfprintf_r+0x10dc>
    be84:	46a9      	mov	r9, r5
    be86:	4648      	mov	r0, r9
    be88:	1909      	adds	r1, r1, r4
    be8a:	3301      	adds	r3, #1
    be8c:	6010      	str	r0, [r2, #0]
    be8e:	6054      	str	r4, [r2, #4]
    be90:	60b9      	str	r1, [r7, #8]
    be92:	3208      	adds	r2, #8
    be94:	607b      	str	r3, [r7, #4]
    be96:	2b07      	cmp	r3, #7
    be98:	dc00      	bgt.n	be9c <_vfprintf_r+0x15c8>
    be9a:	e5f6      	b.n	ba8a <_vfprintf_r+0x11b6>
    be9c:	003a      	movs	r2, r7
    be9e:	4659      	mov	r1, fp
    bea0:	9806      	ldr	r0, [sp, #24]
    bea2:	f002 fff3 	bl	ee8c <__sprint_r>
    bea6:	2800      	cmp	r0, #0
    bea8:	d001      	beq.n	beae <_vfprintf_r+0x15da>
    beaa:	f7ff faa3 	bl	b3f4 <_vfprintf_r+0xb20>
    beae:	68b9      	ldr	r1, [r7, #8]
    beb0:	687b      	ldr	r3, [r7, #4]
    beb2:	aa32      	add	r2, sp, #200	; 0xc8
    beb4:	e5e9      	b.n	ba8a <_vfprintf_r+0x11b6>
    beb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    beb8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    beba:	1a98      	subs	r0, r3, r2
    bebc:	1c43      	adds	r3, r0, #1
    bebe:	001a      	movs	r2, r3
    bec0:	930e      	str	r3, [sp, #56]	; 0x38
    bec2:	e715      	b.n	bcf0 <_vfprintf_r+0x141c>
    bec4:	4a37      	ldr	r2, [pc, #220]	; (bfa4 <_vfprintf_r+0x16d0>)
    bec6:	687b      	ldr	r3, [r7, #4]
    bec8:	4691      	mov	r9, r2
    beca:	f7ff fbf5 	bl	b6b8 <_vfprintf_r+0xde4>
    bece:	2301      	movs	r3, #1
    bed0:	4023      	ands	r3, r4
    bed2:	9313      	str	r3, [sp, #76]	; 0x4c
    bed4:	d000      	beq.n	bed8 <_vfprintf_r+0x1604>
    bed6:	e689      	b.n	bbec <_vfprintf_r+0x1318>
    bed8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    beda:	43d3      	mvns	r3, r2
    bedc:	17db      	asrs	r3, r3, #31
    bede:	401a      	ands	r2, r3
    bee0:	9208      	str	r2, [sp, #32]
    bee2:	e565      	b.n	b9b0 <_vfprintf_r+0x10dc>
    bee4:	2301      	movs	r3, #1
    bee6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    bee8:	391b      	subs	r1, #27
    beea:	1a9d      	subs	r5, r3, r2
    beec:	aa16      	add	r2, sp, #88	; 0x58
    beee:	332c      	adds	r3, #44	; 0x2c
    bef0:	1852      	adds	r2, r2, r1
    bef2:	7013      	strb	r3, [r2, #0]
    bef4:	e62f      	b.n	bb56 <_vfprintf_r+0x1282>
    bef6:	4b2c      	ldr	r3, [pc, #176]	; (bfa8 <_vfprintf_r+0x16d4>)
    bef8:	9311      	str	r3, [sp, #68]	; 0x44
    befa:	f7ff f843 	bl	af84 <_vfprintf_r+0x6b0>
    befe:	232d      	movs	r3, #45	; 0x2d
    bf00:	aa16      	add	r2, sp, #88	; 0x58
    bf02:	77d3      	strb	r3, [r2, #31]
    bf04:	4698      	mov	r8, r3
    bf06:	e7aa      	b.n	be5e <_vfprintf_r+0x158a>
    bf08:	4653      	mov	r3, sl
    bf0a:	2b00      	cmp	r3, #0
    bf0c:	d101      	bne.n	bf12 <_vfprintf_r+0x163e>
    bf0e:	07e3      	lsls	r3, r4, #31
    bf10:	d503      	bpl.n	bf1a <_vfprintf_r+0x1646>
    bf12:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    bf14:	1c58      	adds	r0, r3, #1
    bf16:	0003      	movs	r3, r0
    bf18:	e7ac      	b.n	be74 <_vfprintf_r+0x15a0>
    bf1a:	2301      	movs	r3, #1
    bf1c:	e708      	b.n	bd30 <_vfprintf_r+0x145c>
    bf1e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    bf20:	9a11      	ldr	r2, [sp, #68]	; 0x44
    bf22:	1a9b      	subs	r3, r3, r2
    bf24:	9314      	str	r3, [sp, #80]	; 0x50
    bf26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    bf28:	2b47      	cmp	r3, #71	; 0x47
    bf2a:	d100      	bne.n	bf2e <_vfprintf_r+0x165a>
    bf2c:	e5f6      	b.n	bb1c <_vfprintf_r+0x1248>
    bf2e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    bf30:	9313      	str	r3, [sp, #76]	; 0x4c
    bf32:	e5fd      	b.n	bb30 <_vfprintf_r+0x125c>
    bf34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    bf36:	1d1d      	adds	r5, r3, #4
    bf38:	681b      	ldr	r3, [r3, #0]
    bf3a:	46a8      	mov	r8, r5
    bf3c:	469a      	mov	sl, r3
    bf3e:	2b00      	cmp	r3, #0
    bf40:	db0a      	blt.n	bf58 <_vfprintf_r+0x1684>
    bf42:	4645      	mov	r5, r8
    bf44:	9b07      	ldr	r3, [sp, #28]
    bf46:	950f      	str	r5, [sp, #60]	; 0x3c
    bf48:	785b      	ldrb	r3, [r3, #1]
    bf4a:	9207      	str	r2, [sp, #28]
    bf4c:	f7fe fd4b 	bl	a9e6 <_vfprintf_r+0x112>
    bf50:	ab16      	add	r3, sp, #88	; 0x58
    bf52:	77d8      	strb	r0, [r3, #31]
    bf54:	f7ff f830 	bl	afb8 <_vfprintf_r+0x6e4>
    bf58:	2301      	movs	r3, #1
    bf5a:	425b      	negs	r3, r3
    bf5c:	469a      	mov	sl, r3
    bf5e:	e7f0      	b.n	bf42 <_vfprintf_r+0x166e>
    bf60:	ab16      	add	r3, sp, #88	; 0x58
    bf62:	77d8      	strb	r0, [r3, #31]
    bf64:	f7fe ff27 	bl	adb6 <_vfprintf_r+0x4e2>
    bf68:	ab16      	add	r3, sp, #88	; 0x58
    bf6a:	77d8      	strb	r0, [r3, #31]
    bf6c:	f7fe fdce 	bl	ab0c <_vfprintf_r+0x238>
    bf70:	480c      	ldr	r0, [pc, #48]	; (bfa4 <_vfprintf_r+0x16d0>)
    bf72:	4681      	mov	r9, r0
    bf74:	e787      	b.n	be86 <_vfprintf_r+0x15b2>
    bf76:	ab16      	add	r3, sp, #88	; 0x58
    bf78:	77d8      	strb	r0, [r3, #31]
    bf7a:	f7ff f829 	bl	afd0 <_vfprintf_r+0x6fc>
    bf7e:	ab16      	add	r3, sp, #88	; 0x58
    bf80:	77d8      	strb	r0, [r3, #31]
    bf82:	f7fe ffc3 	bl	af0c <_vfprintf_r+0x638>
    bf86:	ab16      	add	r3, sp, #88	; 0x58
    bf88:	77d8      	strb	r0, [r3, #31]
    bf8a:	f7fe ffa5 	bl	aed8 <_vfprintf_r+0x604>
    bf8e:	ab16      	add	r3, sp, #88	; 0x58
    bf90:	77d8      	strb	r0, [r3, #31]
    bf92:	f7fe feaf 	bl	acf4 <_vfprintf_r+0x420>
    bf96:	aa16      	add	r2, sp, #88	; 0x58
    bf98:	232e      	movs	r3, #46	; 0x2e
    bf9a:	4694      	mov	ip, r2
    bf9c:	4463      	add	r3, ip
    bf9e:	e61a      	b.n	bbd6 <_vfprintf_r+0x1302>
    bfa0:	0000ffe8 	.word	0x0000ffe8
    bfa4:	00010034 	.word	0x00010034
    bfa8:	0000ffec 	.word	0x0000ffec

0000bfac <__sbprintf>:
    bfac:	b5f0      	push	{r4, r5, r6, r7, lr}
    bfae:	0015      	movs	r5, r2
    bfb0:	2202      	movs	r2, #2
    bfb2:	4c1e      	ldr	r4, [pc, #120]	; (c02c <__sbprintf+0x80>)
    bfb4:	001f      	movs	r7, r3
    bfb6:	898b      	ldrh	r3, [r1, #12]
    bfb8:	44a5      	add	sp, r4
    bfba:	4393      	bics	r3, r2
    bfbc:	466a      	mov	r2, sp
    bfbe:	8193      	strh	r3, [r2, #12]
    bfc0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    bfc2:	0006      	movs	r6, r0
    bfc4:	9319      	str	r3, [sp, #100]	; 0x64
    bfc6:	89cb      	ldrh	r3, [r1, #14]
    bfc8:	a816      	add	r0, sp, #88	; 0x58
    bfca:	81d3      	strh	r3, [r2, #14]
    bfcc:	69cb      	ldr	r3, [r1, #28]
    bfce:	000c      	movs	r4, r1
    bfd0:	9307      	str	r3, [sp, #28]
    bfd2:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    bfd4:	9309      	str	r3, [sp, #36]	; 0x24
    bfd6:	ab1a      	add	r3, sp, #104	; 0x68
    bfd8:	9300      	str	r3, [sp, #0]
    bfda:	9304      	str	r3, [sp, #16]
    bfdc:	2380      	movs	r3, #128	; 0x80
    bfde:	00db      	lsls	r3, r3, #3
    bfe0:	9302      	str	r3, [sp, #8]
    bfe2:	9305      	str	r3, [sp, #20]
    bfe4:	2300      	movs	r3, #0
    bfe6:	9306      	str	r3, [sp, #24]
    bfe8:	f001 fdca 	bl	db80 <__retarget_lock_init_recursive>
    bfec:	002a      	movs	r2, r5
    bfee:	003b      	movs	r3, r7
    bff0:	4669      	mov	r1, sp
    bff2:	0030      	movs	r0, r6
    bff4:	f7fe fc6e 	bl	a8d4 <_vfprintf_r>
    bff8:	1e05      	subs	r5, r0, #0
    bffa:	db05      	blt.n	c008 <__sbprintf+0x5c>
    bffc:	4669      	mov	r1, sp
    bffe:	0030      	movs	r0, r6
    c000:	f001 fa26 	bl	d450 <_fflush_r>
    c004:	2800      	cmp	r0, #0
    c006:	d10e      	bne.n	c026 <__sbprintf+0x7a>
    c008:	466b      	mov	r3, sp
    c00a:	899b      	ldrh	r3, [r3, #12]
    c00c:	065b      	lsls	r3, r3, #25
    c00e:	d503      	bpl.n	c018 <__sbprintf+0x6c>
    c010:	2240      	movs	r2, #64	; 0x40
    c012:	89a3      	ldrh	r3, [r4, #12]
    c014:	4313      	orrs	r3, r2
    c016:	81a3      	strh	r3, [r4, #12]
    c018:	9816      	ldr	r0, [sp, #88]	; 0x58
    c01a:	f001 fdb3 	bl	db84 <__retarget_lock_close_recursive>
    c01e:	0028      	movs	r0, r5
    c020:	4b03      	ldr	r3, [pc, #12]	; (c030 <__sbprintf+0x84>)
    c022:	449d      	add	sp, r3
    c024:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c026:	2501      	movs	r5, #1
    c028:	426d      	negs	r5, r5
    c02a:	e7ed      	b.n	c008 <__sbprintf+0x5c>
    c02c:	fffffb94 	.word	0xfffffb94
    c030:	0000046c 	.word	0x0000046c

0000c034 <__swsetup_r>:
    c034:	4b33      	ldr	r3, [pc, #204]	; (c104 <__swsetup_r+0xd0>)
    c036:	b570      	push	{r4, r5, r6, lr}
    c038:	0005      	movs	r5, r0
    c03a:	6818      	ldr	r0, [r3, #0]
    c03c:	000c      	movs	r4, r1
    c03e:	2800      	cmp	r0, #0
    c040:	d002      	beq.n	c048 <__swsetup_r+0x14>
    c042:	6b83      	ldr	r3, [r0, #56]	; 0x38
    c044:	2b00      	cmp	r3, #0
    c046:	d03c      	beq.n	c0c2 <__swsetup_r+0x8e>
    c048:	230c      	movs	r3, #12
    c04a:	5ee2      	ldrsh	r2, [r4, r3]
    c04c:	b293      	uxth	r3, r2
    c04e:	0719      	lsls	r1, r3, #28
    c050:	d50d      	bpl.n	c06e <__swsetup_r+0x3a>
    c052:	6921      	ldr	r1, [r4, #16]
    c054:	2900      	cmp	r1, #0
    c056:	d015      	beq.n	c084 <__swsetup_r+0x50>
    c058:	07da      	lsls	r2, r3, #31
    c05a:	d521      	bpl.n	c0a0 <__swsetup_r+0x6c>
    c05c:	2300      	movs	r3, #0
    c05e:	60a3      	str	r3, [r4, #8]
    c060:	6963      	ldr	r3, [r4, #20]
    c062:	2000      	movs	r0, #0
    c064:	425b      	negs	r3, r3
    c066:	61a3      	str	r3, [r4, #24]
    c068:	2900      	cmp	r1, #0
    c06a:	d021      	beq.n	c0b0 <__swsetup_r+0x7c>
    c06c:	bd70      	pop	{r4, r5, r6, pc}
    c06e:	06d9      	lsls	r1, r3, #27
    c070:	d53f      	bpl.n	c0f2 <__swsetup_r+0xbe>
    c072:	075b      	lsls	r3, r3, #29
    c074:	d428      	bmi.n	c0c8 <__swsetup_r+0x94>
    c076:	6921      	ldr	r1, [r4, #16]
    c078:	2308      	movs	r3, #8
    c07a:	4313      	orrs	r3, r2
    c07c:	81a3      	strh	r3, [r4, #12]
    c07e:	b29b      	uxth	r3, r3
    c080:	2900      	cmp	r1, #0
    c082:	d1e9      	bne.n	c058 <__swsetup_r+0x24>
    c084:	22a0      	movs	r2, #160	; 0xa0
    c086:	2080      	movs	r0, #128	; 0x80
    c088:	0092      	lsls	r2, r2, #2
    c08a:	0080      	lsls	r0, r0, #2
    c08c:	401a      	ands	r2, r3
    c08e:	4282      	cmp	r2, r0
    c090:	d0e2      	beq.n	c058 <__swsetup_r+0x24>
    c092:	0021      	movs	r1, r4
    c094:	0028      	movs	r0, r5
    c096:	f001 fdab 	bl	dbf0 <__smakebuf_r>
    c09a:	89a3      	ldrh	r3, [r4, #12]
    c09c:	6921      	ldr	r1, [r4, #16]
    c09e:	e7db      	b.n	c058 <__swsetup_r+0x24>
    c0a0:	2200      	movs	r2, #0
    c0a2:	079b      	lsls	r3, r3, #30
    c0a4:	d400      	bmi.n	c0a8 <__swsetup_r+0x74>
    c0a6:	6962      	ldr	r2, [r4, #20]
    c0a8:	60a2      	str	r2, [r4, #8]
    c0aa:	2000      	movs	r0, #0
    c0ac:	2900      	cmp	r1, #0
    c0ae:	d1dd      	bne.n	c06c <__swsetup_r+0x38>
    c0b0:	220c      	movs	r2, #12
    c0b2:	5ea3      	ldrsh	r3, [r4, r2]
    c0b4:	061a      	lsls	r2, r3, #24
    c0b6:	d5d9      	bpl.n	c06c <__swsetup_r+0x38>
    c0b8:	2240      	movs	r2, #64	; 0x40
    c0ba:	4313      	orrs	r3, r2
    c0bc:	81a3      	strh	r3, [r4, #12]
    c0be:	3801      	subs	r0, #1
    c0c0:	e7d4      	b.n	c06c <__swsetup_r+0x38>
    c0c2:	f001 fa1f 	bl	d504 <__sinit>
    c0c6:	e7bf      	b.n	c048 <__swsetup_r+0x14>
    c0c8:	6b21      	ldr	r1, [r4, #48]	; 0x30
    c0ca:	2900      	cmp	r1, #0
    c0cc:	d00a      	beq.n	c0e4 <__swsetup_r+0xb0>
    c0ce:	0023      	movs	r3, r4
    c0d0:	3340      	adds	r3, #64	; 0x40
    c0d2:	4299      	cmp	r1, r3
    c0d4:	d004      	beq.n	c0e0 <__swsetup_r+0xac>
    c0d6:	0028      	movs	r0, r5
    c0d8:	f001 fabe 	bl	d658 <_free_r>
    c0dc:	230c      	movs	r3, #12
    c0de:	5ee2      	ldrsh	r2, [r4, r3]
    c0e0:	2300      	movs	r3, #0
    c0e2:	6323      	str	r3, [r4, #48]	; 0x30
    c0e4:	2324      	movs	r3, #36	; 0x24
    c0e6:	439a      	bics	r2, r3
    c0e8:	2300      	movs	r3, #0
    c0ea:	6921      	ldr	r1, [r4, #16]
    c0ec:	6063      	str	r3, [r4, #4]
    c0ee:	6021      	str	r1, [r4, #0]
    c0f0:	e7c2      	b.n	c078 <__swsetup_r+0x44>
    c0f2:	2309      	movs	r3, #9
    c0f4:	602b      	str	r3, [r5, #0]
    c0f6:	2340      	movs	r3, #64	; 0x40
    c0f8:	2001      	movs	r0, #1
    c0fa:	431a      	orrs	r2, r3
    c0fc:	81a2      	strh	r2, [r4, #12]
    c0fe:	4240      	negs	r0, r0
    c100:	e7b4      	b.n	c06c <__swsetup_r+0x38>
    c102:	46c0      	nop			; (mov r8, r8)
    c104:	20000084 	.word	0x20000084

0000c108 <__register_exitproc>:
    c108:	b5f0      	push	{r4, r5, r6, r7, lr}
    c10a:	464e      	mov	r6, r9
    c10c:	4645      	mov	r5, r8
    c10e:	46de      	mov	lr, fp
    c110:	4657      	mov	r7, sl
    c112:	b5e0      	push	{r5, r6, r7, lr}
    c114:	4d36      	ldr	r5, [pc, #216]	; (c1f0 <__register_exitproc+0xe8>)
    c116:	b083      	sub	sp, #12
    c118:	0006      	movs	r6, r0
    c11a:	6828      	ldr	r0, [r5, #0]
    c11c:	4698      	mov	r8, r3
    c11e:	000f      	movs	r7, r1
    c120:	4691      	mov	r9, r2
    c122:	f001 fd31 	bl	db88 <__retarget_lock_acquire_recursive>
    c126:	4b33      	ldr	r3, [pc, #204]	; (c1f4 <__register_exitproc+0xec>)
    c128:	681c      	ldr	r4, [r3, #0]
    c12a:	23a4      	movs	r3, #164	; 0xa4
    c12c:	005b      	lsls	r3, r3, #1
    c12e:	58e0      	ldr	r0, [r4, r3]
    c130:	2800      	cmp	r0, #0
    c132:	d052      	beq.n	c1da <__register_exitproc+0xd2>
    c134:	6843      	ldr	r3, [r0, #4]
    c136:	2b1f      	cmp	r3, #31
    c138:	dc13      	bgt.n	c162 <__register_exitproc+0x5a>
    c13a:	1c5a      	adds	r2, r3, #1
    c13c:	9201      	str	r2, [sp, #4]
    c13e:	2e00      	cmp	r6, #0
    c140:	d128      	bne.n	c194 <__register_exitproc+0x8c>
    c142:	9a01      	ldr	r2, [sp, #4]
    c144:	3302      	adds	r3, #2
    c146:	009b      	lsls	r3, r3, #2
    c148:	6042      	str	r2, [r0, #4]
    c14a:	501f      	str	r7, [r3, r0]
    c14c:	6828      	ldr	r0, [r5, #0]
    c14e:	f001 fd1d 	bl	db8c <__retarget_lock_release_recursive>
    c152:	2000      	movs	r0, #0
    c154:	b003      	add	sp, #12
    c156:	bc3c      	pop	{r2, r3, r4, r5}
    c158:	4690      	mov	r8, r2
    c15a:	4699      	mov	r9, r3
    c15c:	46a2      	mov	sl, r4
    c15e:	46ab      	mov	fp, r5
    c160:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c162:	4b25      	ldr	r3, [pc, #148]	; (c1f8 <__register_exitproc+0xf0>)
    c164:	2b00      	cmp	r3, #0
    c166:	d03d      	beq.n	c1e4 <__register_exitproc+0xdc>
    c168:	20c8      	movs	r0, #200	; 0xc8
    c16a:	0040      	lsls	r0, r0, #1
    c16c:	f001 fd88 	bl	dc80 <malloc>
    c170:	2800      	cmp	r0, #0
    c172:	d037      	beq.n	c1e4 <__register_exitproc+0xdc>
    c174:	22a4      	movs	r2, #164	; 0xa4
    c176:	2300      	movs	r3, #0
    c178:	0052      	lsls	r2, r2, #1
    c17a:	58a1      	ldr	r1, [r4, r2]
    c17c:	6043      	str	r3, [r0, #4]
    c17e:	6001      	str	r1, [r0, #0]
    c180:	50a0      	str	r0, [r4, r2]
    c182:	3240      	adds	r2, #64	; 0x40
    c184:	5083      	str	r3, [r0, r2]
    c186:	3204      	adds	r2, #4
    c188:	5083      	str	r3, [r0, r2]
    c18a:	3301      	adds	r3, #1
    c18c:	9301      	str	r3, [sp, #4]
    c18e:	2300      	movs	r3, #0
    c190:	2e00      	cmp	r6, #0
    c192:	d0d6      	beq.n	c142 <__register_exitproc+0x3a>
    c194:	009a      	lsls	r2, r3, #2
    c196:	4692      	mov	sl, r2
    c198:	4482      	add	sl, r0
    c19a:	464a      	mov	r2, r9
    c19c:	2188      	movs	r1, #136	; 0x88
    c19e:	4654      	mov	r4, sl
    c1a0:	5062      	str	r2, [r4, r1]
    c1a2:	22c4      	movs	r2, #196	; 0xc4
    c1a4:	0052      	lsls	r2, r2, #1
    c1a6:	4691      	mov	r9, r2
    c1a8:	4481      	add	r9, r0
    c1aa:	464a      	mov	r2, r9
    c1ac:	3987      	subs	r1, #135	; 0x87
    c1ae:	4099      	lsls	r1, r3
    c1b0:	6812      	ldr	r2, [r2, #0]
    c1b2:	468b      	mov	fp, r1
    c1b4:	430a      	orrs	r2, r1
    c1b6:	4694      	mov	ip, r2
    c1b8:	464a      	mov	r2, r9
    c1ba:	4661      	mov	r1, ip
    c1bc:	6011      	str	r1, [r2, #0]
    c1be:	2284      	movs	r2, #132	; 0x84
    c1c0:	4641      	mov	r1, r8
    c1c2:	0052      	lsls	r2, r2, #1
    c1c4:	50a1      	str	r1, [r4, r2]
    c1c6:	2e02      	cmp	r6, #2
    c1c8:	d1bb      	bne.n	c142 <__register_exitproc+0x3a>
    c1ca:	0002      	movs	r2, r0
    c1cc:	465c      	mov	r4, fp
    c1ce:	328d      	adds	r2, #141	; 0x8d
    c1d0:	32ff      	adds	r2, #255	; 0xff
    c1d2:	6811      	ldr	r1, [r2, #0]
    c1d4:	430c      	orrs	r4, r1
    c1d6:	6014      	str	r4, [r2, #0]
    c1d8:	e7b3      	b.n	c142 <__register_exitproc+0x3a>
    c1da:	0020      	movs	r0, r4
    c1dc:	304d      	adds	r0, #77	; 0x4d
    c1de:	30ff      	adds	r0, #255	; 0xff
    c1e0:	50e0      	str	r0, [r4, r3]
    c1e2:	e7a7      	b.n	c134 <__register_exitproc+0x2c>
    c1e4:	6828      	ldr	r0, [r5, #0]
    c1e6:	f001 fcd1 	bl	db8c <__retarget_lock_release_recursive>
    c1ea:	2001      	movs	r0, #1
    c1ec:	4240      	negs	r0, r0
    c1ee:	e7b1      	b.n	c154 <__register_exitproc+0x4c>
    c1f0:	200004b0 	.word	0x200004b0
    c1f4:	0000fe78 	.word	0x0000fe78
    c1f8:	0000dc81 	.word	0x0000dc81

0000c1fc <register_fini>:
    c1fc:	4b03      	ldr	r3, [pc, #12]	; (c20c <register_fini+0x10>)
    c1fe:	b510      	push	{r4, lr}
    c200:	2b00      	cmp	r3, #0
    c202:	d002      	beq.n	c20a <register_fini+0xe>
    c204:	4802      	ldr	r0, [pc, #8]	; (c210 <register_fini+0x14>)
    c206:	f000 f805 	bl	c214 <atexit>
    c20a:	bd10      	pop	{r4, pc}
    c20c:	00000000 	.word	0x00000000
    c210:	0000d585 	.word	0x0000d585

0000c214 <atexit>:
    c214:	b510      	push	{r4, lr}
    c216:	0001      	movs	r1, r0
    c218:	2300      	movs	r3, #0
    c21a:	2200      	movs	r2, #0
    c21c:	2000      	movs	r0, #0
    c21e:	f7ff ff73 	bl	c108 <__register_exitproc>
    c222:	bd10      	pop	{r4, pc}

0000c224 <quorem>:
    c224:	b5f0      	push	{r4, r5, r6, r7, lr}
    c226:	4645      	mov	r5, r8
    c228:	4680      	mov	r8, r0
    c22a:	46de      	mov	lr, fp
    c22c:	4657      	mov	r7, sl
    c22e:	464e      	mov	r6, r9
    c230:	4642      	mov	r2, r8
    c232:	b5e0      	push	{r5, r6, r7, lr}
    c234:	690c      	ldr	r4, [r1, #16]
    c236:	6912      	ldr	r2, [r2, #16]
    c238:	b085      	sub	sp, #20
    c23a:	000b      	movs	r3, r1
    c23c:	9102      	str	r1, [sp, #8]
    c23e:	2000      	movs	r0, #0
    c240:	4294      	cmp	r4, r2
    c242:	dd00      	ble.n	c246 <quorem+0x22>
    c244:	e090      	b.n	c368 <quorem+0x144>
    c246:	2214      	movs	r2, #20
    c248:	4694      	mov	ip, r2
    c24a:	4463      	add	r3, ip
    c24c:	4699      	mov	r9, r3
    c24e:	464a      	mov	r2, r9
    c250:	3c01      	subs	r4, #1
    c252:	00a3      	lsls	r3, r4, #2
    c254:	18d6      	adds	r6, r2, r3
    c256:	2214      	movs	r2, #20
    c258:	4442      	add	r2, r8
    c25a:	4693      	mov	fp, r2
    c25c:	449b      	add	fp, r3
    c25e:	6833      	ldr	r3, [r6, #0]
    c260:	0015      	movs	r5, r2
    c262:	1c59      	adds	r1, r3, #1
    c264:	465b      	mov	r3, fp
    c266:	6818      	ldr	r0, [r3, #0]
    c268:	9201      	str	r2, [sp, #4]
    c26a:	f7fc fd11 	bl	8c90 <__udivsi3>
    c26e:	1e03      	subs	r3, r0, #0
    c270:	9000      	str	r0, [sp, #0]
    c272:	d042      	beq.n	c2fa <quorem+0xd6>
    c274:	0029      	movs	r1, r5
    c276:	2700      	movs	r7, #0
    c278:	464d      	mov	r5, r9
    c27a:	2000      	movs	r0, #0
    c27c:	46b1      	mov	r9, r6
    c27e:	46a2      	mov	sl, r4
    c280:	003e      	movs	r6, r7
    c282:	0004      	movs	r4, r0
    c284:	469c      	mov	ip, r3
    c286:	002f      	movs	r7, r5
    c288:	0008      	movs	r0, r1
    c28a:	9503      	str	r5, [sp, #12]
    c28c:	4663      	mov	r3, ip
    c28e:	cf04      	ldmia	r7!, {r2}
    c290:	0415      	lsls	r5, r2, #16
    c292:	0c2d      	lsrs	r5, r5, #16
    c294:	435d      	muls	r5, r3
    c296:	0c12      	lsrs	r2, r2, #16
    c298:	435a      	muls	r2, r3
    c29a:	19ad      	adds	r5, r5, r6
    c29c:	0c2b      	lsrs	r3, r5, #16
    c29e:	18d2      	adds	r2, r2, r3
    c2a0:	6803      	ldr	r3, [r0, #0]
    c2a2:	042d      	lsls	r5, r5, #16
    c2a4:	0419      	lsls	r1, r3, #16
    c2a6:	0c09      	lsrs	r1, r1, #16
    c2a8:	1909      	adds	r1, r1, r4
    c2aa:	0c16      	lsrs	r6, r2, #16
    c2ac:	0c2d      	lsrs	r5, r5, #16
    c2ae:	0412      	lsls	r2, r2, #16
    c2b0:	1b49      	subs	r1, r1, r5
    c2b2:	0c12      	lsrs	r2, r2, #16
    c2b4:	0c1b      	lsrs	r3, r3, #16
    c2b6:	1a9b      	subs	r3, r3, r2
    c2b8:	140a      	asrs	r2, r1, #16
    c2ba:	189b      	adds	r3, r3, r2
    c2bc:	0409      	lsls	r1, r1, #16
    c2be:	141c      	asrs	r4, r3, #16
    c2c0:	0c09      	lsrs	r1, r1, #16
    c2c2:	041b      	lsls	r3, r3, #16
    c2c4:	4319      	orrs	r1, r3
    c2c6:	c002      	stmia	r0!, {r1}
    c2c8:	45b9      	cmp	r9, r7
    c2ca:	d2df      	bcs.n	c28c <quorem+0x68>
    c2cc:	9b03      	ldr	r3, [sp, #12]
    c2ce:	464e      	mov	r6, r9
    c2d0:	4699      	mov	r9, r3
    c2d2:	465b      	mov	r3, fp
    c2d4:	681b      	ldr	r3, [r3, #0]
    c2d6:	4654      	mov	r4, sl
    c2d8:	2b00      	cmp	r3, #0
    c2da:	d10e      	bne.n	c2fa <quorem+0xd6>
    c2dc:	465b      	mov	r3, fp
    c2de:	9a01      	ldr	r2, [sp, #4]
    c2e0:	3b04      	subs	r3, #4
    c2e2:	429a      	cmp	r2, r3
    c2e4:	d304      	bcc.n	c2f0 <quorem+0xcc>
    c2e6:	e006      	b.n	c2f6 <quorem+0xd2>
    c2e8:	3b04      	subs	r3, #4
    c2ea:	3c01      	subs	r4, #1
    c2ec:	429a      	cmp	r2, r3
    c2ee:	d202      	bcs.n	c2f6 <quorem+0xd2>
    c2f0:	6819      	ldr	r1, [r3, #0]
    c2f2:	2900      	cmp	r1, #0
    c2f4:	d0f8      	beq.n	c2e8 <quorem+0xc4>
    c2f6:	4643      	mov	r3, r8
    c2f8:	611c      	str	r4, [r3, #16]
    c2fa:	9902      	ldr	r1, [sp, #8]
    c2fc:	4640      	mov	r0, r8
    c2fe:	f002 fa51 	bl	e7a4 <__mcmp>
    c302:	2800      	cmp	r0, #0
    c304:	db2f      	blt.n	c366 <quorem+0x142>
    c306:	464f      	mov	r7, r9
    c308:	2000      	movs	r0, #0
    c30a:	9b00      	ldr	r3, [sp, #0]
    c30c:	9d01      	ldr	r5, [sp, #4]
    c30e:	3301      	adds	r3, #1
    c310:	9300      	str	r3, [sp, #0]
    c312:	682b      	ldr	r3, [r5, #0]
    c314:	cf02      	ldmia	r7!, {r1}
    c316:	041a      	lsls	r2, r3, #16
    c318:	0c12      	lsrs	r2, r2, #16
    c31a:	1810      	adds	r0, r2, r0
    c31c:	040a      	lsls	r2, r1, #16
    c31e:	0c12      	lsrs	r2, r2, #16
    c320:	1a82      	subs	r2, r0, r2
    c322:	0c09      	lsrs	r1, r1, #16
    c324:	0c1b      	lsrs	r3, r3, #16
    c326:	1a5b      	subs	r3, r3, r1
    c328:	1411      	asrs	r1, r2, #16
    c32a:	185b      	adds	r3, r3, r1
    c32c:	0412      	lsls	r2, r2, #16
    c32e:	1418      	asrs	r0, r3, #16
    c330:	0c12      	lsrs	r2, r2, #16
    c332:	041b      	lsls	r3, r3, #16
    c334:	4313      	orrs	r3, r2
    c336:	c508      	stmia	r5!, {r3}
    c338:	42be      	cmp	r6, r7
    c33a:	d2ea      	bcs.n	c312 <quorem+0xee>
    c33c:	9901      	ldr	r1, [sp, #4]
    c33e:	00a3      	lsls	r3, r4, #2
    c340:	468c      	mov	ip, r1
    c342:	4463      	add	r3, ip
    c344:	681a      	ldr	r2, [r3, #0]
    c346:	2a00      	cmp	r2, #0
    c348:	d10d      	bne.n	c366 <quorem+0x142>
    c34a:	3b04      	subs	r3, #4
    c34c:	000a      	movs	r2, r1
    c34e:	4299      	cmp	r1, r3
    c350:	d304      	bcc.n	c35c <quorem+0x138>
    c352:	e006      	b.n	c362 <quorem+0x13e>
    c354:	3b04      	subs	r3, #4
    c356:	3c01      	subs	r4, #1
    c358:	429a      	cmp	r2, r3
    c35a:	d202      	bcs.n	c362 <quorem+0x13e>
    c35c:	6819      	ldr	r1, [r3, #0]
    c35e:	2900      	cmp	r1, #0
    c360:	d0f8      	beq.n	c354 <quorem+0x130>
    c362:	4643      	mov	r3, r8
    c364:	611c      	str	r4, [r3, #16]
    c366:	9800      	ldr	r0, [sp, #0]
    c368:	b005      	add	sp, #20
    c36a:	bc3c      	pop	{r2, r3, r4, r5}
    c36c:	4690      	mov	r8, r2
    c36e:	4699      	mov	r9, r3
    c370:	46a2      	mov	sl, r4
    c372:	46ab      	mov	fp, r5
    c374:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c376:	46c0      	nop			; (mov r8, r8)

0000c378 <_dtoa_r>:
    c378:	b5f0      	push	{r4, r5, r6, r7, lr}
    c37a:	4657      	mov	r7, sl
    c37c:	464e      	mov	r6, r9
    c37e:	4645      	mov	r5, r8
    c380:	46de      	mov	lr, fp
    c382:	b5e0      	push	{r5, r6, r7, lr}
    c384:	6c01      	ldr	r1, [r0, #64]	; 0x40
    c386:	b099      	sub	sp, #100	; 0x64
    c388:	4682      	mov	sl, r0
    c38a:	001d      	movs	r5, r3
    c38c:	0016      	movs	r6, r2
    c38e:	001f      	movs	r7, r3
    c390:	2900      	cmp	r1, #0
    c392:	d009      	beq.n	c3a8 <_dtoa_r+0x30>
    c394:	2301      	movs	r3, #1
    c396:	6c42      	ldr	r2, [r0, #68]	; 0x44
    c398:	4093      	lsls	r3, r2
    c39a:	604a      	str	r2, [r1, #4]
    c39c:	608b      	str	r3, [r1, #8]
    c39e:	f001 fff5 	bl	e38c <_Bfree>
    c3a2:	2300      	movs	r3, #0
    c3a4:	4652      	mov	r2, sl
    c3a6:	6413      	str	r3, [r2, #64]	; 0x40
    c3a8:	46b8      	mov	r8, r7
    c3aa:	2f00      	cmp	r7, #0
    c3ac:	db37      	blt.n	c41e <_dtoa_r+0xa6>
    c3ae:	2300      	movs	r3, #0
    c3b0:	9a25      	ldr	r2, [sp, #148]	; 0x94
    c3b2:	6013      	str	r3, [r2, #0]
    c3b4:	4642      	mov	r2, r8
    c3b6:	4bd6      	ldr	r3, [pc, #856]	; (c710 <_dtoa_r+0x398>)
    c3b8:	401a      	ands	r2, r3
    c3ba:	429a      	cmp	r2, r3
    c3bc:	d018      	beq.n	c3f0 <_dtoa_r+0x78>
    c3be:	2200      	movs	r2, #0
    c3c0:	2300      	movs	r3, #0
    c3c2:	0030      	movs	r0, r6
    c3c4:	0039      	movs	r1, r7
    c3c6:	f7fd ff57 	bl	a278 <__aeabi_dcmpeq>
    c3ca:	2800      	cmp	r0, #0
    c3cc:	d02f      	beq.n	c42e <_dtoa_r+0xb6>
    c3ce:	2301      	movs	r3, #1
    c3d0:	9a24      	ldr	r2, [sp, #144]	; 0x90
    c3d2:	6013      	str	r3, [r2, #0]
    c3d4:	9b26      	ldr	r3, [sp, #152]	; 0x98
    c3d6:	2b00      	cmp	r3, #0
    c3d8:	d100      	bne.n	c3dc <_dtoa_r+0x64>
    c3da:	e22a      	b.n	c832 <_dtoa_r+0x4ba>
    c3dc:	48cd      	ldr	r0, [pc, #820]	; (c714 <_dtoa_r+0x39c>)
    c3de:	6018      	str	r0, [r3, #0]
    c3e0:	3801      	subs	r0, #1
    c3e2:	b019      	add	sp, #100	; 0x64
    c3e4:	bc3c      	pop	{r2, r3, r4, r5}
    c3e6:	4690      	mov	r8, r2
    c3e8:	4699      	mov	r9, r3
    c3ea:	46a2      	mov	sl, r4
    c3ec:	46ab      	mov	fp, r5
    c3ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c3f0:	4bc9      	ldr	r3, [pc, #804]	; (c718 <_dtoa_r+0x3a0>)
    c3f2:	9a24      	ldr	r2, [sp, #144]	; 0x90
    c3f4:	6013      	str	r3, [r2, #0]
    c3f6:	2e00      	cmp	r6, #0
    c3f8:	d10b      	bne.n	c412 <_dtoa_r+0x9a>
    c3fa:	4643      	mov	r3, r8
    c3fc:	0318      	lsls	r0, r3, #12
    c3fe:	d108      	bne.n	c412 <_dtoa_r+0x9a>
    c400:	9b26      	ldr	r3, [sp, #152]	; 0x98
    c402:	48c6      	ldr	r0, [pc, #792]	; (c71c <_dtoa_r+0x3a4>)
    c404:	2b00      	cmp	r3, #0
    c406:	d0ec      	beq.n	c3e2 <_dtoa_r+0x6a>
    c408:	0003      	movs	r3, r0
    c40a:	3308      	adds	r3, #8
    c40c:	9a26      	ldr	r2, [sp, #152]	; 0x98
    c40e:	6013      	str	r3, [r2, #0]
    c410:	e7e7      	b.n	c3e2 <_dtoa_r+0x6a>
    c412:	9b26      	ldr	r3, [sp, #152]	; 0x98
    c414:	48c2      	ldr	r0, [pc, #776]	; (c720 <_dtoa_r+0x3a8>)
    c416:	2b00      	cmp	r3, #0
    c418:	d0e3      	beq.n	c3e2 <_dtoa_r+0x6a>
    c41a:	1cc3      	adds	r3, r0, #3
    c41c:	e7f6      	b.n	c40c <_dtoa_r+0x94>
    c41e:	2301      	movs	r3, #1
    c420:	9a25      	ldr	r2, [sp, #148]	; 0x94
    c422:	0068      	lsls	r0, r5, #1
    c424:	6013      	str	r3, [r2, #0]
    c426:	0843      	lsrs	r3, r0, #1
    c428:	4698      	mov	r8, r3
    c42a:	001f      	movs	r7, r3
    c42c:	e7c2      	b.n	c3b4 <_dtoa_r+0x3c>
    c42e:	ab16      	add	r3, sp, #88	; 0x58
    c430:	9301      	str	r3, [sp, #4]
    c432:	ab17      	add	r3, sp, #92	; 0x5c
    c434:	9300      	str	r3, [sp, #0]
    c436:	0032      	movs	r2, r6
    c438:	003b      	movs	r3, r7
    c43a:	4650      	mov	r0, sl
    c43c:	f002 fa68 	bl	e910 <__d2b>
    c440:	4643      	mov	r3, r8
    c442:	4683      	mov	fp, r0
    c444:	0d1a      	lsrs	r2, r3, #20
    c446:	d100      	bne.n	c44a <_dtoa_r+0xd2>
    c448:	e1d6      	b.n	c7f8 <_dtoa_r+0x480>
    c44a:	033b      	lsls	r3, r7, #12
    c44c:	4cb5      	ldr	r4, [pc, #724]	; (c724 <_dtoa_r+0x3ac>)
    c44e:	0b1b      	lsrs	r3, r3, #12
    c450:	431c      	orrs	r4, r3
    c452:	4bb5      	ldr	r3, [pc, #724]	; (c728 <_dtoa_r+0x3b0>)
    c454:	0030      	movs	r0, r6
    c456:	4698      	mov	r8, r3
    c458:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c45a:	0021      	movs	r1, r4
    c45c:	4699      	mov	r9, r3
    c45e:	2300      	movs	r3, #0
    c460:	4490      	add	r8, r2
    c462:	930f      	str	r3, [sp, #60]	; 0x3c
    c464:	2200      	movs	r2, #0
    c466:	4bb1      	ldr	r3, [pc, #708]	; (c72c <_dtoa_r+0x3b4>)
    c468:	f7fd fb32 	bl	9ad0 <__aeabi_dsub>
    c46c:	4ab0      	ldr	r2, [pc, #704]	; (c730 <_dtoa_r+0x3b8>)
    c46e:	4bb1      	ldr	r3, [pc, #708]	; (c734 <_dtoa_r+0x3bc>)
    c470:	f7fd f8ae 	bl	95d0 <__aeabi_dmul>
    c474:	4ab0      	ldr	r2, [pc, #704]	; (c738 <_dtoa_r+0x3c0>)
    c476:	4bb1      	ldr	r3, [pc, #708]	; (c73c <_dtoa_r+0x3c4>)
    c478:	f003 f838 	bl	f4ec <__aeabi_dadd>
    c47c:	0004      	movs	r4, r0
    c47e:	4640      	mov	r0, r8
    c480:	000d      	movs	r5, r1
    c482:	f7fd fe6f 	bl	a164 <__aeabi_i2d>
    c486:	4aae      	ldr	r2, [pc, #696]	; (c740 <_dtoa_r+0x3c8>)
    c488:	4bae      	ldr	r3, [pc, #696]	; (c744 <_dtoa_r+0x3cc>)
    c48a:	f7fd f8a1 	bl	95d0 <__aeabi_dmul>
    c48e:	0002      	movs	r2, r0
    c490:	000b      	movs	r3, r1
    c492:	0020      	movs	r0, r4
    c494:	0029      	movs	r1, r5
    c496:	f003 f829 	bl	f4ec <__aeabi_dadd>
    c49a:	0004      	movs	r4, r0
    c49c:	000d      	movs	r5, r1
    c49e:	f7fd fe2d 	bl	a0fc <__aeabi_d2iz>
    c4a2:	2200      	movs	r2, #0
    c4a4:	9003      	str	r0, [sp, #12]
    c4a6:	2300      	movs	r3, #0
    c4a8:	0020      	movs	r0, r4
    c4aa:	0029      	movs	r1, r5
    c4ac:	f7fd feea 	bl	a284 <__aeabi_dcmplt>
    c4b0:	2800      	cmp	r0, #0
    c4b2:	d000      	beq.n	c4b6 <_dtoa_r+0x13e>
    c4b4:	e2b1      	b.n	ca1a <_dtoa_r+0x6a2>
    c4b6:	2301      	movs	r3, #1
    c4b8:	9c03      	ldr	r4, [sp, #12]
    c4ba:	930c      	str	r3, [sp, #48]	; 0x30
    c4bc:	2c16      	cmp	r4, #22
    c4be:	d810      	bhi.n	c4e2 <_dtoa_r+0x16a>
    c4c0:	49a1      	ldr	r1, [pc, #644]	; (c748 <_dtoa_r+0x3d0>)
    c4c2:	00e3      	lsls	r3, r4, #3
    c4c4:	18c9      	adds	r1, r1, r3
    c4c6:	0032      	movs	r2, r6
    c4c8:	6808      	ldr	r0, [r1, #0]
    c4ca:	6849      	ldr	r1, [r1, #4]
    c4cc:	003b      	movs	r3, r7
    c4ce:	f7fd feed 	bl	a2ac <__aeabi_dcmpgt>
    c4d2:	2800      	cmp	r0, #0
    c4d4:	d100      	bne.n	c4d8 <_dtoa_r+0x160>
    c4d6:	e31d      	b.n	cb14 <_dtoa_r+0x79c>
    c4d8:	0023      	movs	r3, r4
    c4da:	3b01      	subs	r3, #1
    c4dc:	9303      	str	r3, [sp, #12]
    c4de:	2300      	movs	r3, #0
    c4e0:	930c      	str	r3, [sp, #48]	; 0x30
    c4e2:	464b      	mov	r3, r9
    c4e4:	4642      	mov	r2, r8
    c4e6:	1a9a      	subs	r2, r3, r2
    c4e8:	2300      	movs	r3, #0
    c4ea:	9306      	str	r3, [sp, #24]
    c4ec:	0013      	movs	r3, r2
    c4ee:	3b01      	subs	r3, #1
    c4f0:	9304      	str	r3, [sp, #16]
    c4f2:	d500      	bpl.n	c4f6 <_dtoa_r+0x17e>
    c4f4:	e2a1      	b.n	ca3a <_dtoa_r+0x6c2>
    c4f6:	9b03      	ldr	r3, [sp, #12]
    c4f8:	2b00      	cmp	r3, #0
    c4fa:	da00      	bge.n	c4fe <_dtoa_r+0x186>
    c4fc:	e284      	b.n	ca08 <_dtoa_r+0x690>
    c4fe:	469c      	mov	ip, r3
    c500:	930d      	str	r3, [sp, #52]	; 0x34
    c502:	2300      	movs	r3, #0
    c504:	9a04      	ldr	r2, [sp, #16]
    c506:	4699      	mov	r9, r3
    c508:	0011      	movs	r1, r2
    c50a:	4461      	add	r1, ip
    c50c:	9104      	str	r1, [sp, #16]
    c50e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    c510:	2b09      	cmp	r3, #9
    c512:	d900      	bls.n	c516 <_dtoa_r+0x19e>
    c514:	e18f      	b.n	c836 <_dtoa_r+0x4be>
    c516:	2401      	movs	r4, #1
    c518:	2b05      	cmp	r3, #5
    c51a:	dd02      	ble.n	c522 <_dtoa_r+0x1aa>
    c51c:	2400      	movs	r4, #0
    c51e:	3b04      	subs	r3, #4
    c520:	9322      	str	r3, [sp, #136]	; 0x88
    c522:	9b22      	ldr	r3, [sp, #136]	; 0x88
    c524:	2b03      	cmp	r3, #3
    c526:	d101      	bne.n	c52c <_dtoa_r+0x1b4>
    c528:	f000 fcce 	bl	cec8 <_dtoa_r+0xb50>
    c52c:	dc01      	bgt.n	c532 <_dtoa_r+0x1ba>
    c52e:	f000 fc92 	bl	ce56 <_dtoa_r+0xade>
    c532:	9b22      	ldr	r3, [sp, #136]	; 0x88
    c534:	2b04      	cmp	r3, #4
    c536:	d101      	bne.n	c53c <_dtoa_r+0x1c4>
    c538:	f000 fc40 	bl	cdbc <_dtoa_r+0xa44>
    c53c:	2301      	movs	r3, #1
    c53e:	930b      	str	r3, [sp, #44]	; 0x2c
    c540:	9b22      	ldr	r3, [sp, #136]	; 0x88
    c542:	2b05      	cmp	r3, #5
    c544:	d001      	beq.n	c54a <_dtoa_r+0x1d2>
    c546:	f000 fc8b 	bl	ce60 <_dtoa_r+0xae8>
    c54a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    c54c:	9b03      	ldr	r3, [sp, #12]
    c54e:	4694      	mov	ip, r2
    c550:	4463      	add	r3, ip
    c552:	930e      	str	r3, [sp, #56]	; 0x38
    c554:	3301      	adds	r3, #1
    c556:	9307      	str	r3, [sp, #28]
    c558:	1e1d      	subs	r5, r3, #0
    c55a:	dc01      	bgt.n	c560 <_dtoa_r+0x1e8>
    c55c:	f000 fd49 	bl	cff2 <_dtoa_r+0xc7a>
    c560:	9b07      	ldr	r3, [sp, #28]
    c562:	4698      	mov	r8, r3
    c564:	2300      	movs	r3, #0
    c566:	4652      	mov	r2, sl
    c568:	2100      	movs	r1, #0
    c56a:	6453      	str	r3, [r2, #68]	; 0x44
    c56c:	2d17      	cmp	r5, #23
    c56e:	d90a      	bls.n	c586 <_dtoa_r+0x20e>
    c570:	2201      	movs	r2, #1
    c572:	3304      	adds	r3, #4
    c574:	005b      	lsls	r3, r3, #1
    c576:	0018      	movs	r0, r3
    c578:	3014      	adds	r0, #20
    c57a:	0011      	movs	r1, r2
    c57c:	3201      	adds	r2, #1
    c57e:	4285      	cmp	r5, r0
    c580:	d2f8      	bcs.n	c574 <_dtoa_r+0x1fc>
    c582:	4653      	mov	r3, sl
    c584:	6459      	str	r1, [r3, #68]	; 0x44
    c586:	4650      	mov	r0, sl
    c588:	f001 fed8 	bl	e33c <_Balloc>
    c58c:	4653      	mov	r3, sl
    c58e:	6418      	str	r0, [r3, #64]	; 0x40
    c590:	4643      	mov	r3, r8
    c592:	900a      	str	r0, [sp, #40]	; 0x28
    c594:	2b0e      	cmp	r3, #14
    c596:	d900      	bls.n	c59a <_dtoa_r+0x222>
    c598:	e161      	b.n	c85e <_dtoa_r+0x4e6>
    c59a:	2c00      	cmp	r4, #0
    c59c:	d100      	bne.n	c5a0 <_dtoa_r+0x228>
    c59e:	e15e      	b.n	c85e <_dtoa_r+0x4e6>
    c5a0:	9610      	str	r6, [sp, #64]	; 0x40
    c5a2:	9711      	str	r7, [sp, #68]	; 0x44
    c5a4:	9e03      	ldr	r6, [sp, #12]
    c5a6:	2e00      	cmp	r6, #0
    c5a8:	dc01      	bgt.n	c5ae <_dtoa_r+0x236>
    c5aa:	f000 fd25 	bl	cff8 <_dtoa_r+0xc80>
    c5ae:	0032      	movs	r2, r6
    c5b0:	210f      	movs	r1, #15
    c5b2:	4b65      	ldr	r3, [pc, #404]	; (c748 <_dtoa_r+0x3d0>)
    c5b4:	400a      	ands	r2, r1
    c5b6:	00d2      	lsls	r2, r2, #3
    c5b8:	189b      	adds	r3, r3, r2
    c5ba:	1136      	asrs	r6, r6, #4
    c5bc:	681c      	ldr	r4, [r3, #0]
    c5be:	685d      	ldr	r5, [r3, #4]
    c5c0:	06f3      	lsls	r3, r6, #27
    c5c2:	d401      	bmi.n	c5c8 <_dtoa_r+0x250>
    c5c4:	f000 fcca 	bl	cf5c <_dtoa_r+0xbe4>
    c5c8:	4b60      	ldr	r3, [pc, #384]	; (c74c <_dtoa_r+0x3d4>)
    c5ca:	400e      	ands	r6, r1
    c5cc:	6a1a      	ldr	r2, [r3, #32]
    c5ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c5d0:	9810      	ldr	r0, [sp, #64]	; 0x40
    c5d2:	9911      	ldr	r1, [sp, #68]	; 0x44
    c5d4:	f7fc fcc8 	bl	8f68 <__aeabi_ddiv>
    c5d8:	2303      	movs	r3, #3
    c5da:	4698      	mov	r8, r3
    c5dc:	9008      	str	r0, [sp, #32]
    c5de:	9109      	str	r1, [sp, #36]	; 0x24
    c5e0:	2e00      	cmp	r6, #0
    c5e2:	d011      	beq.n	c608 <_dtoa_r+0x290>
    c5e4:	4f59      	ldr	r7, [pc, #356]	; (c74c <_dtoa_r+0x3d4>)
    c5e6:	2301      	movs	r3, #1
    c5e8:	4233      	tst	r3, r6
    c5ea:	d009      	beq.n	c600 <_dtoa_r+0x288>
    c5ec:	469c      	mov	ip, r3
    c5ee:	683a      	ldr	r2, [r7, #0]
    c5f0:	687b      	ldr	r3, [r7, #4]
    c5f2:	0020      	movs	r0, r4
    c5f4:	0029      	movs	r1, r5
    c5f6:	44e0      	add	r8, ip
    c5f8:	f7fc ffea 	bl	95d0 <__aeabi_dmul>
    c5fc:	0004      	movs	r4, r0
    c5fe:	000d      	movs	r5, r1
    c600:	1076      	asrs	r6, r6, #1
    c602:	3708      	adds	r7, #8
    c604:	2e00      	cmp	r6, #0
    c606:	d1ee      	bne.n	c5e6 <_dtoa_r+0x26e>
    c608:	0022      	movs	r2, r4
    c60a:	9808      	ldr	r0, [sp, #32]
    c60c:	9909      	ldr	r1, [sp, #36]	; 0x24
    c60e:	002b      	movs	r3, r5
    c610:	f7fc fcaa 	bl	8f68 <__aeabi_ddiv>
    c614:	0006      	movs	r6, r0
    c616:	000f      	movs	r7, r1
    c618:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c61a:	2b00      	cmp	r3, #0
    c61c:	d009      	beq.n	c632 <_dtoa_r+0x2ba>
    c61e:	2200      	movs	r2, #0
    c620:	4b40      	ldr	r3, [pc, #256]	; (c724 <_dtoa_r+0x3ac>)
    c622:	0030      	movs	r0, r6
    c624:	0039      	movs	r1, r7
    c626:	f7fd fe2d 	bl	a284 <__aeabi_dcmplt>
    c62a:	2800      	cmp	r0, #0
    c62c:	d001      	beq.n	c632 <_dtoa_r+0x2ba>
    c62e:	f000 fdc2 	bl	d1b6 <_dtoa_r+0xe3e>
    c632:	4640      	mov	r0, r8
    c634:	f7fd fd96 	bl	a164 <__aeabi_i2d>
    c638:	0032      	movs	r2, r6
    c63a:	003b      	movs	r3, r7
    c63c:	f7fc ffc8 	bl	95d0 <__aeabi_dmul>
    c640:	2200      	movs	r2, #0
    c642:	4b43      	ldr	r3, [pc, #268]	; (c750 <_dtoa_r+0x3d8>)
    c644:	f002 ff52 	bl	f4ec <__aeabi_dadd>
    c648:	4a42      	ldr	r2, [pc, #264]	; (c754 <_dtoa_r+0x3dc>)
    c64a:	000b      	movs	r3, r1
    c64c:	4694      	mov	ip, r2
    c64e:	4463      	add	r3, ip
    c650:	9008      	str	r0, [sp, #32]
    c652:	9109      	str	r1, [sp, #36]	; 0x24
    c654:	9309      	str	r3, [sp, #36]	; 0x24
    c656:	9b07      	ldr	r3, [sp, #28]
    c658:	2b00      	cmp	r3, #0
    c65a:	d101      	bne.n	c660 <_dtoa_r+0x2e8>
    c65c:	f000 fc50 	bl	cf00 <_dtoa_r+0xb88>
    c660:	9b03      	ldr	r3, [sp, #12]
    c662:	9313      	str	r3, [sp, #76]	; 0x4c
    c664:	9b07      	ldr	r3, [sp, #28]
    c666:	9312      	str	r3, [sp, #72]	; 0x48
    c668:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c66a:	2b00      	cmp	r3, #0
    c66c:	d101      	bne.n	c672 <_dtoa_r+0x2fa>
    c66e:	f000 fd1d 	bl	d0ac <_dtoa_r+0xd34>
    c672:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c674:	2000      	movs	r0, #0
    c676:	1e5a      	subs	r2, r3, #1
    c678:	4b33      	ldr	r3, [pc, #204]	; (c748 <_dtoa_r+0x3d0>)
    c67a:	00d2      	lsls	r2, r2, #3
    c67c:	189b      	adds	r3, r3, r2
    c67e:	681a      	ldr	r2, [r3, #0]
    c680:	685b      	ldr	r3, [r3, #4]
    c682:	4935      	ldr	r1, [pc, #212]	; (c758 <_dtoa_r+0x3e0>)
    c684:	f7fc fc70 	bl	8f68 <__aeabi_ddiv>
    c688:	9a08      	ldr	r2, [sp, #32]
    c68a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c68c:	f7fd fa20 	bl	9ad0 <__aeabi_dsub>
    c690:	9008      	str	r0, [sp, #32]
    c692:	9109      	str	r1, [sp, #36]	; 0x24
    c694:	0039      	movs	r1, r7
    c696:	0030      	movs	r0, r6
    c698:	f7fd fd30 	bl	a0fc <__aeabi_d2iz>
    c69c:	0004      	movs	r4, r0
    c69e:	f7fd fd61 	bl	a164 <__aeabi_i2d>
    c6a2:	0002      	movs	r2, r0
    c6a4:	000b      	movs	r3, r1
    c6a6:	0030      	movs	r0, r6
    c6a8:	0039      	movs	r1, r7
    c6aa:	f7fd fa11 	bl	9ad0 <__aeabi_dsub>
    c6ae:	0005      	movs	r5, r0
    c6b0:	000e      	movs	r6, r1
    c6b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c6b4:	3430      	adds	r4, #48	; 0x30
    c6b6:	1c51      	adds	r1, r2, #1
    c6b8:	b2e7      	uxtb	r7, r4
    c6ba:	9114      	str	r1, [sp, #80]	; 0x50
    c6bc:	7017      	strb	r7, [r2, #0]
    c6be:	0033      	movs	r3, r6
    c6c0:	9808      	ldr	r0, [sp, #32]
    c6c2:	9909      	ldr	r1, [sp, #36]	; 0x24
    c6c4:	002a      	movs	r2, r5
    c6c6:	f7fd fdf1 	bl	a2ac <__aeabi_dcmpgt>
    c6ca:	2800      	cmp	r0, #0
    c6cc:	d001      	beq.n	c6d2 <_dtoa_r+0x35a>
    c6ce:	f000 fdfe 	bl	d2ce <_dtoa_r+0xf56>
    c6d2:	002a      	movs	r2, r5
    c6d4:	0033      	movs	r3, r6
    c6d6:	2000      	movs	r0, #0
    c6d8:	4912      	ldr	r1, [pc, #72]	; (c724 <_dtoa_r+0x3ac>)
    c6da:	f7fd f9f9 	bl	9ad0 <__aeabi_dsub>
    c6de:	0002      	movs	r2, r0
    c6e0:	000b      	movs	r3, r1
    c6e2:	9808      	ldr	r0, [sp, #32]
    c6e4:	9909      	ldr	r1, [sp, #36]	; 0x24
    c6e6:	f7fd fde1 	bl	a2ac <__aeabi_dcmpgt>
    c6ea:	2800      	cmp	r0, #0
    c6ec:	d001      	beq.n	c6f2 <_dtoa_r+0x37a>
    c6ee:	f000 fde7 	bl	d2c0 <_dtoa_r+0xf48>
    c6f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c6f4:	2b01      	cmp	r3, #1
    c6f6:	d101      	bne.n	c6fc <_dtoa_r+0x384>
    c6f8:	f000 fc78 	bl	cfec <_dtoa_r+0xc74>
    c6fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c6fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c700:	4694      	mov	ip, r2
    c702:	4463      	add	r3, ip
    c704:	4698      	mov	r8, r3
    c706:	464b      	mov	r3, r9
    c708:	9312      	str	r3, [sp, #72]	; 0x48
    c70a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    c70c:	4699      	mov	r9, r3
    c70e:	e038      	b.n	c782 <_dtoa_r+0x40a>
    c710:	7ff00000 	.word	0x7ff00000
    c714:	00010021 	.word	0x00010021
    c718:	0000270f 	.word	0x0000270f
    c71c:	00010044 	.word	0x00010044
    c720:	00010050 	.word	0x00010050
    c724:	3ff00000 	.word	0x3ff00000
    c728:	fffffc01 	.word	0xfffffc01
    c72c:	3ff80000 	.word	0x3ff80000
    c730:	636f4361 	.word	0x636f4361
    c734:	3fd287a7 	.word	0x3fd287a7
    c738:	8b60c8b3 	.word	0x8b60c8b3
    c73c:	3fc68a28 	.word	0x3fc68a28
    c740:	509f79fb 	.word	0x509f79fb
    c744:	3fd34413 	.word	0x3fd34413
    c748:	00010080 	.word	0x00010080
    c74c:	00010058 	.word	0x00010058
    c750:	401c0000 	.word	0x401c0000
    c754:	fcc00000 	.word	0xfcc00000
    c758:	3fe00000 	.word	0x3fe00000
    c75c:	002a      	movs	r2, r5
    c75e:	0033      	movs	r3, r6
    c760:	2000      	movs	r0, #0
    c762:	49b9      	ldr	r1, [pc, #740]	; (ca48 <_dtoa_r+0x6d0>)
    c764:	f7fd f9b4 	bl	9ad0 <__aeabi_dsub>
    c768:	9a08      	ldr	r2, [sp, #32]
    c76a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c76c:	f7fd fd8a 	bl	a284 <__aeabi_dcmplt>
    c770:	2800      	cmp	r0, #0
    c772:	d001      	beq.n	c778 <_dtoa_r+0x400>
    c774:	f000 fd74 	bl	d260 <_dtoa_r+0xee8>
    c778:	46a1      	mov	r9, r4
    c77a:	4544      	cmp	r4, r8
    c77c:	d101      	bne.n	c782 <_dtoa_r+0x40a>
    c77e:	f000 fc33 	bl	cfe8 <_dtoa_r+0xc70>
    c782:	9808      	ldr	r0, [sp, #32]
    c784:	9909      	ldr	r1, [sp, #36]	; 0x24
    c786:	2200      	movs	r2, #0
    c788:	4bb0      	ldr	r3, [pc, #704]	; (ca4c <_dtoa_r+0x6d4>)
    c78a:	f7fc ff21 	bl	95d0 <__aeabi_dmul>
    c78e:	2200      	movs	r2, #0
    c790:	4bae      	ldr	r3, [pc, #696]	; (ca4c <_dtoa_r+0x6d4>)
    c792:	9008      	str	r0, [sp, #32]
    c794:	9109      	str	r1, [sp, #36]	; 0x24
    c796:	0028      	movs	r0, r5
    c798:	0031      	movs	r1, r6
    c79a:	f7fc ff19 	bl	95d0 <__aeabi_dmul>
    c79e:	000d      	movs	r5, r1
    c7a0:	0004      	movs	r4, r0
    c7a2:	f7fd fcab 	bl	a0fc <__aeabi_d2iz>
    c7a6:	0007      	movs	r7, r0
    c7a8:	f7fd fcdc 	bl	a164 <__aeabi_i2d>
    c7ac:	0002      	movs	r2, r0
    c7ae:	000b      	movs	r3, r1
    c7b0:	0020      	movs	r0, r4
    c7b2:	0029      	movs	r1, r5
    c7b4:	f7fd f98c 	bl	9ad0 <__aeabi_dsub>
    c7b8:	464b      	mov	r3, r9
    c7ba:	3730      	adds	r7, #48	; 0x30
    c7bc:	b2ff      	uxtb	r7, r7
    c7be:	1c5c      	adds	r4, r3, #1
    c7c0:	701f      	strb	r7, [r3, #0]
    c7c2:	9a08      	ldr	r2, [sp, #32]
    c7c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c7c6:	0005      	movs	r5, r0
    c7c8:	000e      	movs	r6, r1
    c7ca:	f7fd fd5b 	bl	a284 <__aeabi_dcmplt>
    c7ce:	2800      	cmp	r0, #0
    c7d0:	d0c4      	beq.n	c75c <_dtoa_r+0x3e4>
    c7d2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c7d4:	9303      	str	r3, [sp, #12]
    c7d6:	4659      	mov	r1, fp
    c7d8:	4650      	mov	r0, sl
    c7da:	f001 fdd7 	bl	e38c <_Bfree>
    c7de:	2300      	movs	r3, #0
    c7e0:	7023      	strb	r3, [r4, #0]
    c7e2:	9b03      	ldr	r3, [sp, #12]
    c7e4:	9a24      	ldr	r2, [sp, #144]	; 0x90
    c7e6:	3301      	adds	r3, #1
    c7e8:	6013      	str	r3, [r2, #0]
    c7ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
    c7ec:	2b00      	cmp	r3, #0
    c7ee:	d100      	bne.n	c7f2 <_dtoa_r+0x47a>
    c7f0:	e3a8      	b.n	cf44 <_dtoa_r+0xbcc>
    c7f2:	601c      	str	r4, [r3, #0]
    c7f4:	980a      	ldr	r0, [sp, #40]	; 0x28
    c7f6:	e5f4      	b.n	c3e2 <_dtoa_r+0x6a>
    c7f8:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c7fa:	4699      	mov	r9, r3
    c7fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c7fe:	444b      	add	r3, r9
    c800:	001c      	movs	r4, r3
    c802:	4b93      	ldr	r3, [pc, #588]	; (ca50 <_dtoa_r+0x6d8>)
    c804:	18e3      	adds	r3, r4, r3
    c806:	2b20      	cmp	r3, #32
    c808:	dc00      	bgt.n	c80c <_dtoa_r+0x494>
    c80a:	e17e      	b.n	cb0a <_dtoa_r+0x792>
    c80c:	0031      	movs	r1, r6
    c80e:	4a91      	ldr	r2, [pc, #580]	; (ca54 <_dtoa_r+0x6dc>)
    c810:	4640      	mov	r0, r8
    c812:	18a2      	adds	r2, r4, r2
    c814:	40d1      	lsrs	r1, r2
    c816:	000a      	movs	r2, r1
    c818:	2140      	movs	r1, #64	; 0x40
    c81a:	1acb      	subs	r3, r1, r3
    c81c:	4098      	lsls	r0, r3
    c81e:	4310      	orrs	r0, r2
    c820:	f7fd fce2 	bl	a1e8 <__aeabi_ui2d>
    c824:	1e63      	subs	r3, r4, #1
    c826:	4698      	mov	r8, r3
    c828:	2301      	movs	r3, #1
    c82a:	4d8b      	ldr	r5, [pc, #556]	; (ca58 <_dtoa_r+0x6e0>)
    c82c:	930f      	str	r3, [sp, #60]	; 0x3c
    c82e:	1949      	adds	r1, r1, r5
    c830:	e618      	b.n	c464 <_dtoa_r+0xec>
    c832:	488a      	ldr	r0, [pc, #552]	; (ca5c <_dtoa_r+0x6e4>)
    c834:	e5d5      	b.n	c3e2 <_dtoa_r+0x6a>
    c836:	2300      	movs	r3, #0
    c838:	4652      	mov	r2, sl
    c83a:	2100      	movs	r1, #0
    c83c:	6453      	str	r3, [r2, #68]	; 0x44
    c83e:	4650      	mov	r0, sl
    c840:	f001 fd7c 	bl	e33c <_Balloc>
    c844:	4653      	mov	r3, sl
    c846:	6418      	str	r0, [r3, #64]	; 0x40
    c848:	2301      	movs	r3, #1
    c84a:	425b      	negs	r3, r3
    c84c:	9307      	str	r3, [sp, #28]
    c84e:	930e      	str	r3, [sp, #56]	; 0x38
    c850:	3302      	adds	r3, #2
    c852:	2200      	movs	r2, #0
    c854:	930b      	str	r3, [sp, #44]	; 0x2c
    c856:	2300      	movs	r3, #0
    c858:	900a      	str	r0, [sp, #40]	; 0x28
    c85a:	9223      	str	r2, [sp, #140]	; 0x8c
    c85c:	9322      	str	r3, [sp, #136]	; 0x88
    c85e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c860:	2b00      	cmp	r3, #0
    c862:	da00      	bge.n	c866 <_dtoa_r+0x4ee>
    c864:	e0ab      	b.n	c9be <_dtoa_r+0x646>
    c866:	9a03      	ldr	r2, [sp, #12]
    c868:	2a0e      	cmp	r2, #14
    c86a:	dd00      	ble.n	c86e <_dtoa_r+0x4f6>
    c86c:	e0a7      	b.n	c9be <_dtoa_r+0x646>
    c86e:	4b7c      	ldr	r3, [pc, #496]	; (ca60 <_dtoa_r+0x6e8>)
    c870:	00d2      	lsls	r2, r2, #3
    c872:	189b      	adds	r3, r3, r2
    c874:	685c      	ldr	r4, [r3, #4]
    c876:	681b      	ldr	r3, [r3, #0]
    c878:	9304      	str	r3, [sp, #16]
    c87a:	9405      	str	r4, [sp, #20]
    c87c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    c87e:	2b00      	cmp	r3, #0
    c880:	da00      	bge.n	c884 <_dtoa_r+0x50c>
    c882:	e2a7      	b.n	cdd4 <_dtoa_r+0xa5c>
    c884:	9c04      	ldr	r4, [sp, #16]
    c886:	9d05      	ldr	r5, [sp, #20]
    c888:	0030      	movs	r0, r6
    c88a:	0022      	movs	r2, r4
    c88c:	002b      	movs	r3, r5
    c88e:	0039      	movs	r1, r7
    c890:	f7fc fb6a 	bl	8f68 <__aeabi_ddiv>
    c894:	f7fd fc32 	bl	a0fc <__aeabi_d2iz>
    c898:	4680      	mov	r8, r0
    c89a:	f7fd fc63 	bl	a164 <__aeabi_i2d>
    c89e:	0022      	movs	r2, r4
    c8a0:	002b      	movs	r3, r5
    c8a2:	f7fc fe95 	bl	95d0 <__aeabi_dmul>
    c8a6:	0002      	movs	r2, r0
    c8a8:	000b      	movs	r3, r1
    c8aa:	0030      	movs	r0, r6
    c8ac:	0039      	movs	r1, r7
    c8ae:	f7fd f90f 	bl	9ad0 <__aeabi_dsub>
    c8b2:	4643      	mov	r3, r8
    c8b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c8b6:	3330      	adds	r3, #48	; 0x30
    c8b8:	7013      	strb	r3, [r2, #0]
    c8ba:	9b07      	ldr	r3, [sp, #28]
    c8bc:	0006      	movs	r6, r0
    c8be:	000f      	movs	r7, r1
    c8c0:	1c54      	adds	r4, r2, #1
    c8c2:	2b01      	cmp	r3, #1
    c8c4:	d04e      	beq.n	c964 <_dtoa_r+0x5ec>
    c8c6:	2200      	movs	r2, #0
    c8c8:	4b60      	ldr	r3, [pc, #384]	; (ca4c <_dtoa_r+0x6d4>)
    c8ca:	f7fc fe81 	bl	95d0 <__aeabi_dmul>
    c8ce:	2200      	movs	r2, #0
    c8d0:	2300      	movs	r3, #0
    c8d2:	0006      	movs	r6, r0
    c8d4:	000f      	movs	r7, r1
    c8d6:	f7fd fccf 	bl	a278 <__aeabi_dcmpeq>
    c8da:	2800      	cmp	r0, #0
    c8dc:	d000      	beq.n	c8e0 <_dtoa_r+0x568>
    c8de:	e77a      	b.n	c7d6 <_dtoa_r+0x45e>
    c8e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c8e2:	9a07      	ldr	r2, [sp, #28]
    c8e4:	1c9d      	adds	r5, r3, #2
    c8e6:	469c      	mov	ip, r3
    c8e8:	465b      	mov	r3, fp
    c8ea:	9306      	str	r3, [sp, #24]
    c8ec:	4653      	mov	r3, sl
    c8ee:	4462      	add	r2, ip
    c8f0:	46aa      	mov	sl, r5
    c8f2:	9c04      	ldr	r4, [sp, #16]
    c8f4:	9d05      	ldr	r5, [sp, #20]
    c8f6:	4691      	mov	r9, r2
    c8f8:	9307      	str	r3, [sp, #28]
    c8fa:	e00f      	b.n	c91c <_dtoa_r+0x5a4>
    c8fc:	2200      	movs	r2, #0
    c8fe:	4b53      	ldr	r3, [pc, #332]	; (ca4c <_dtoa_r+0x6d4>)
    c900:	f7fc fe66 	bl	95d0 <__aeabi_dmul>
    c904:	2301      	movs	r3, #1
    c906:	469c      	mov	ip, r3
    c908:	2200      	movs	r2, #0
    c90a:	2300      	movs	r3, #0
    c90c:	0006      	movs	r6, r0
    c90e:	000f      	movs	r7, r1
    c910:	44e2      	add	sl, ip
    c912:	f7fd fcb1 	bl	a278 <__aeabi_dcmpeq>
    c916:	2800      	cmp	r0, #0
    c918:	d000      	beq.n	c91c <_dtoa_r+0x5a4>
    c91a:	e2d9      	b.n	ced0 <_dtoa_r+0xb58>
    c91c:	0022      	movs	r2, r4
    c91e:	002b      	movs	r3, r5
    c920:	0030      	movs	r0, r6
    c922:	0039      	movs	r1, r7
    c924:	f7fc fb20 	bl	8f68 <__aeabi_ddiv>
    c928:	f7fd fbe8 	bl	a0fc <__aeabi_d2iz>
    c92c:	4680      	mov	r8, r0
    c92e:	f7fd fc19 	bl	a164 <__aeabi_i2d>
    c932:	0022      	movs	r2, r4
    c934:	002b      	movs	r3, r5
    c936:	f7fc fe4b 	bl	95d0 <__aeabi_dmul>
    c93a:	0002      	movs	r2, r0
    c93c:	000b      	movs	r3, r1
    c93e:	0030      	movs	r0, r6
    c940:	0039      	movs	r1, r7
    c942:	f7fd f8c5 	bl	9ad0 <__aeabi_dsub>
    c946:	4653      	mov	r3, sl
    c948:	4642      	mov	r2, r8
    c94a:	3b01      	subs	r3, #1
    c94c:	3230      	adds	r2, #48	; 0x30
    c94e:	0006      	movs	r6, r0
    c950:	000f      	movs	r7, r1
    c952:	46d3      	mov	fp, sl
    c954:	701a      	strb	r2, [r3, #0]
    c956:	45d1      	cmp	r9, sl
    c958:	d1d0      	bne.n	c8fc <_dtoa_r+0x584>
    c95a:	9b06      	ldr	r3, [sp, #24]
    c95c:	4654      	mov	r4, sl
    c95e:	469b      	mov	fp, r3
    c960:	9b07      	ldr	r3, [sp, #28]
    c962:	469a      	mov	sl, r3
    c964:	0032      	movs	r2, r6
    c966:	003b      	movs	r3, r7
    c968:	0030      	movs	r0, r6
    c96a:	0039      	movs	r1, r7
    c96c:	f002 fdbe 	bl	f4ec <__aeabi_dadd>
    c970:	0006      	movs	r6, r0
    c972:	000f      	movs	r7, r1
    c974:	0002      	movs	r2, r0
    c976:	000b      	movs	r3, r1
    c978:	9804      	ldr	r0, [sp, #16]
    c97a:	9905      	ldr	r1, [sp, #20]
    c97c:	f7fd fc82 	bl	a284 <__aeabi_dcmplt>
    c980:	2800      	cmp	r0, #0
    c982:	d10c      	bne.n	c99e <_dtoa_r+0x626>
    c984:	9804      	ldr	r0, [sp, #16]
    c986:	9905      	ldr	r1, [sp, #20]
    c988:	0032      	movs	r2, r6
    c98a:	003b      	movs	r3, r7
    c98c:	f7fd fc74 	bl	a278 <__aeabi_dcmpeq>
    c990:	2800      	cmp	r0, #0
    c992:	d100      	bne.n	c996 <_dtoa_r+0x61e>
    c994:	e71f      	b.n	c7d6 <_dtoa_r+0x45e>
    c996:	4643      	mov	r3, r8
    c998:	07db      	lsls	r3, r3, #31
    c99a:	d400      	bmi.n	c99e <_dtoa_r+0x626>
    c99c:	e71b      	b.n	c7d6 <_dtoa_r+0x45e>
    c99e:	1e65      	subs	r5, r4, #1
    c9a0:	782f      	ldrb	r7, [r5, #0]
    c9a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c9a4:	e006      	b.n	c9b4 <_dtoa_r+0x63c>
    c9a6:	429d      	cmp	r5, r3
    c9a8:	d100      	bne.n	c9ac <_dtoa_r+0x634>
    c9aa:	e351      	b.n	d050 <_dtoa_r+0xcd8>
    c9ac:	3c02      	subs	r4, #2
    c9ae:	7827      	ldrb	r7, [r4, #0]
    c9b0:	002c      	movs	r4, r5
    c9b2:	3d01      	subs	r5, #1
    c9b4:	2f39      	cmp	r7, #57	; 0x39
    c9b6:	d0f6      	beq.n	c9a6 <_dtoa_r+0x62e>
    c9b8:	3701      	adds	r7, #1
    c9ba:	702f      	strb	r7, [r5, #0]
    c9bc:	e70b      	b.n	c7d6 <_dtoa_r+0x45e>
    c9be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c9c0:	2a00      	cmp	r2, #0
    c9c2:	d04f      	beq.n	ca64 <_dtoa_r+0x6ec>
    c9c4:	9a22      	ldr	r2, [sp, #136]	; 0x88
    c9c6:	2a01      	cmp	r2, #1
    c9c8:	dc00      	bgt.n	c9cc <_dtoa_r+0x654>
    c9ca:	e22c      	b.n	ce26 <_dtoa_r+0xaae>
    c9cc:	9b07      	ldr	r3, [sp, #28]
    c9ce:	1e5c      	subs	r4, r3, #1
    c9d0:	464b      	mov	r3, r9
    c9d2:	45a1      	cmp	r9, r4
    c9d4:	da00      	bge.n	c9d8 <_dtoa_r+0x660>
    c9d6:	e2b8      	b.n	cf4a <_dtoa_r+0xbd2>
    c9d8:	1b1c      	subs	r4, r3, r4
    c9da:	9b07      	ldr	r3, [sp, #28]
    c9dc:	2b00      	cmp	r3, #0
    c9de:	da00      	bge.n	c9e2 <_dtoa_r+0x66a>
    c9e0:	e3d4      	b.n	d18c <_dtoa_r+0xe14>
    c9e2:	9b06      	ldr	r3, [sp, #24]
    c9e4:	9308      	str	r3, [sp, #32]
    c9e6:	9b07      	ldr	r3, [sp, #28]
    c9e8:	9a06      	ldr	r2, [sp, #24]
    c9ea:	2101      	movs	r1, #1
    c9ec:	4694      	mov	ip, r2
    c9ee:	449c      	add	ip, r3
    c9f0:	4662      	mov	r2, ip
    c9f2:	9206      	str	r2, [sp, #24]
    c9f4:	9a04      	ldr	r2, [sp, #16]
    c9f6:	4650      	mov	r0, sl
    c9f8:	4694      	mov	ip, r2
    c9fa:	449c      	add	ip, r3
    c9fc:	4663      	mov	r3, ip
    c9fe:	9304      	str	r3, [sp, #16]
    ca00:	f001 fd5c 	bl	e4bc <__i2b>
    ca04:	4680      	mov	r8, r0
    ca06:	e032      	b.n	ca6e <_dtoa_r+0x6f6>
    ca08:	9a06      	ldr	r2, [sp, #24]
    ca0a:	9b03      	ldr	r3, [sp, #12]
    ca0c:	1ad2      	subs	r2, r2, r3
    ca0e:	425b      	negs	r3, r3
    ca10:	4699      	mov	r9, r3
    ca12:	2300      	movs	r3, #0
    ca14:	9206      	str	r2, [sp, #24]
    ca16:	930d      	str	r3, [sp, #52]	; 0x34
    ca18:	e579      	b.n	c50e <_dtoa_r+0x196>
    ca1a:	9803      	ldr	r0, [sp, #12]
    ca1c:	f7fd fba2 	bl	a164 <__aeabi_i2d>
    ca20:	000b      	movs	r3, r1
    ca22:	0002      	movs	r2, r0
    ca24:	0029      	movs	r1, r5
    ca26:	0020      	movs	r0, r4
    ca28:	f7fd fc26 	bl	a278 <__aeabi_dcmpeq>
    ca2c:	0002      	movs	r2, r0
    ca2e:	4250      	negs	r0, r2
    ca30:	4150      	adcs	r0, r2
    ca32:	9b03      	ldr	r3, [sp, #12]
    ca34:	1a1b      	subs	r3, r3, r0
    ca36:	9303      	str	r3, [sp, #12]
    ca38:	e53d      	b.n	c4b6 <_dtoa_r+0x13e>
    ca3a:	2301      	movs	r3, #1
    ca3c:	1a9b      	subs	r3, r3, r2
    ca3e:	9306      	str	r3, [sp, #24]
    ca40:	2300      	movs	r3, #0
    ca42:	9304      	str	r3, [sp, #16]
    ca44:	e557      	b.n	c4f6 <_dtoa_r+0x17e>
    ca46:	46c0      	nop			; (mov r8, r8)
    ca48:	3ff00000 	.word	0x3ff00000
    ca4c:	40240000 	.word	0x40240000
    ca50:	00000432 	.word	0x00000432
    ca54:	00000412 	.word	0x00000412
    ca58:	fe100000 	.word	0xfe100000
    ca5c:	00010020 	.word	0x00010020
    ca60:	00010080 	.word	0x00010080
    ca64:	9b06      	ldr	r3, [sp, #24]
    ca66:	464c      	mov	r4, r9
    ca68:	9308      	str	r3, [sp, #32]
    ca6a:	2300      	movs	r3, #0
    ca6c:	4698      	mov	r8, r3
    ca6e:	9908      	ldr	r1, [sp, #32]
    ca70:	1e0b      	subs	r3, r1, #0
    ca72:	dd0e      	ble.n	ca92 <_dtoa_r+0x71a>
    ca74:	9a04      	ldr	r2, [sp, #16]
    ca76:	2a00      	cmp	r2, #0
    ca78:	dd0b      	ble.n	ca92 <_dtoa_r+0x71a>
    ca7a:	4293      	cmp	r3, r2
    ca7c:	dd00      	ble.n	ca80 <_dtoa_r+0x708>
    ca7e:	e187      	b.n	cd90 <_dtoa_r+0xa18>
    ca80:	9a06      	ldr	r2, [sp, #24]
    ca82:	1ad2      	subs	r2, r2, r3
    ca84:	9206      	str	r2, [sp, #24]
    ca86:	9a08      	ldr	r2, [sp, #32]
    ca88:	1ad2      	subs	r2, r2, r3
    ca8a:	9208      	str	r2, [sp, #32]
    ca8c:	9a04      	ldr	r2, [sp, #16]
    ca8e:	1ad3      	subs	r3, r2, r3
    ca90:	9304      	str	r3, [sp, #16]
    ca92:	464b      	mov	r3, r9
    ca94:	2b00      	cmp	r3, #0
    ca96:	d01a      	beq.n	cace <_dtoa_r+0x756>
    ca98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ca9a:	2b00      	cmp	r3, #0
    ca9c:	d100      	bne.n	caa0 <_dtoa_r+0x728>
    ca9e:	e1bb      	b.n	ce18 <_dtoa_r+0xaa0>
    caa0:	2c00      	cmp	r4, #0
    caa2:	dd10      	ble.n	cac6 <_dtoa_r+0x74e>
    caa4:	4641      	mov	r1, r8
    caa6:	0022      	movs	r2, r4
    caa8:	4650      	mov	r0, sl
    caaa:	f001 fdbb 	bl	e624 <__pow5mult>
    caae:	465a      	mov	r2, fp
    cab0:	0001      	movs	r1, r0
    cab2:	4680      	mov	r8, r0
    cab4:	4650      	mov	r0, sl
    cab6:	f001 fd0b 	bl	e4d0 <__multiply>
    caba:	0005      	movs	r5, r0
    cabc:	4659      	mov	r1, fp
    cabe:	4650      	mov	r0, sl
    cac0:	f001 fc64 	bl	e38c <_Bfree>
    cac4:	46ab      	mov	fp, r5
    cac6:	464b      	mov	r3, r9
    cac8:	1b1a      	subs	r2, r3, r4
    caca:	d000      	beq.n	cace <_dtoa_r+0x756>
    cacc:	e1a5      	b.n	ce1a <_dtoa_r+0xaa2>
    cace:	2101      	movs	r1, #1
    cad0:	4650      	mov	r0, sl
    cad2:	f001 fcf3 	bl	e4bc <__i2b>
    cad6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cad8:	4681      	mov	r9, r0
    cada:	2b00      	cmp	r3, #0
    cadc:	dd1d      	ble.n	cb1a <_dtoa_r+0x7a2>
    cade:	001a      	movs	r2, r3
    cae0:	0001      	movs	r1, r0
    cae2:	4650      	mov	r0, sl
    cae4:	f001 fd9e 	bl	e624 <__pow5mult>
    cae8:	9b22      	ldr	r3, [sp, #136]	; 0x88
    caea:	4681      	mov	r9, r0
    caec:	2b01      	cmp	r3, #1
    caee:	dc00      	bgt.n	caf2 <_dtoa_r+0x77a>
    caf0:	e150      	b.n	cd94 <_dtoa_r+0xa1c>
    caf2:	2400      	movs	r4, #0
    caf4:	464b      	mov	r3, r9
    caf6:	691b      	ldr	r3, [r3, #16]
    caf8:	3303      	adds	r3, #3
    cafa:	009b      	lsls	r3, r3, #2
    cafc:	444b      	add	r3, r9
    cafe:	6858      	ldr	r0, [r3, #4]
    cb00:	f001 fc94 	bl	e42c <__hi0bits>
    cb04:	2320      	movs	r3, #32
    cb06:	1a1b      	subs	r3, r3, r0
    cb08:	e010      	b.n	cb2c <_dtoa_r+0x7b4>
    cb0a:	2220      	movs	r2, #32
    cb0c:	0030      	movs	r0, r6
    cb0e:	1ad3      	subs	r3, r2, r3
    cb10:	4098      	lsls	r0, r3
    cb12:	e685      	b.n	c820 <_dtoa_r+0x4a8>
    cb14:	2300      	movs	r3, #0
    cb16:	930c      	str	r3, [sp, #48]	; 0x30
    cb18:	e4e3      	b.n	c4e2 <_dtoa_r+0x16a>
    cb1a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    cb1c:	2400      	movs	r4, #0
    cb1e:	2b01      	cmp	r3, #1
    cb20:	dc00      	bgt.n	cb24 <_dtoa_r+0x7ac>
    cb22:	e18b      	b.n	ce3c <_dtoa_r+0xac4>
    cb24:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    cb26:	2301      	movs	r3, #1
    cb28:	2a00      	cmp	r2, #0
    cb2a:	d1e3      	bne.n	caf4 <_dtoa_r+0x77c>
    cb2c:	9904      	ldr	r1, [sp, #16]
    cb2e:	201f      	movs	r0, #31
    cb30:	468c      	mov	ip, r1
    cb32:	4463      	add	r3, ip
    cb34:	4018      	ands	r0, r3
    cb36:	d100      	bne.n	cb3a <_dtoa_r+0x7c2>
    cb38:	e0ae      	b.n	cc98 <_dtoa_r+0x920>
    cb3a:	2320      	movs	r3, #32
    cb3c:	1a1b      	subs	r3, r3, r0
    cb3e:	2b04      	cmp	r3, #4
    cb40:	dc00      	bgt.n	cb44 <_dtoa_r+0x7cc>
    cb42:	e3cc      	b.n	d2de <_dtoa_r+0xf66>
    cb44:	231c      	movs	r3, #28
    cb46:	1a18      	subs	r0, r3, r0
    cb48:	9b06      	ldr	r3, [sp, #24]
    cb4a:	469c      	mov	ip, r3
    cb4c:	4484      	add	ip, r0
    cb4e:	4663      	mov	r3, ip
    cb50:	9306      	str	r3, [sp, #24]
    cb52:	9b08      	ldr	r3, [sp, #32]
    cb54:	469c      	mov	ip, r3
    cb56:	4484      	add	ip, r0
    cb58:	4663      	mov	r3, ip
    cb5a:	468c      	mov	ip, r1
    cb5c:	4484      	add	ip, r0
    cb5e:	9308      	str	r3, [sp, #32]
    cb60:	4663      	mov	r3, ip
    cb62:	9304      	str	r3, [sp, #16]
    cb64:	9b06      	ldr	r3, [sp, #24]
    cb66:	2b00      	cmp	r3, #0
    cb68:	dd05      	ble.n	cb76 <_dtoa_r+0x7fe>
    cb6a:	4659      	mov	r1, fp
    cb6c:	001a      	movs	r2, r3
    cb6e:	4650      	mov	r0, sl
    cb70:	f001 fdb8 	bl	e6e4 <__lshift>
    cb74:	4683      	mov	fp, r0
    cb76:	9b04      	ldr	r3, [sp, #16]
    cb78:	2b00      	cmp	r3, #0
    cb7a:	dd05      	ble.n	cb88 <_dtoa_r+0x810>
    cb7c:	4649      	mov	r1, r9
    cb7e:	001a      	movs	r2, r3
    cb80:	4650      	mov	r0, sl
    cb82:	f001 fdaf 	bl	e6e4 <__lshift>
    cb86:	4681      	mov	r9, r0
    cb88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cb8a:	2b00      	cmp	r3, #0
    cb8c:	d000      	beq.n	cb90 <_dtoa_r+0x818>
    cb8e:	e094      	b.n	ccba <_dtoa_r+0x942>
    cb90:	9b07      	ldr	r3, [sp, #28]
    cb92:	2b00      	cmp	r3, #0
    cb94:	dc00      	bgt.n	cb98 <_dtoa_r+0x820>
    cb96:	e175      	b.n	ce84 <_dtoa_r+0xb0c>
    cb98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cb9a:	2b00      	cmp	r3, #0
    cb9c:	d100      	bne.n	cba0 <_dtoa_r+0x828>
    cb9e:	e0a6      	b.n	ccee <_dtoa_r+0x976>
    cba0:	9b08      	ldr	r3, [sp, #32]
    cba2:	2b00      	cmp	r3, #0
    cba4:	dd05      	ble.n	cbb2 <_dtoa_r+0x83a>
    cba6:	4641      	mov	r1, r8
    cba8:	001a      	movs	r2, r3
    cbaa:	4650      	mov	r0, sl
    cbac:	f001 fd9a 	bl	e6e4 <__lshift>
    cbb0:	4680      	mov	r8, r0
    cbb2:	4643      	mov	r3, r8
    cbb4:	930c      	str	r3, [sp, #48]	; 0x30
    cbb6:	2c00      	cmp	r4, #0
    cbb8:	d000      	beq.n	cbbc <_dtoa_r+0x844>
    cbba:	e250      	b.n	d05e <_dtoa_r+0xce6>
    cbbc:	9c07      	ldr	r4, [sp, #28]
    cbbe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    cbc0:	3c01      	subs	r4, #1
    cbc2:	0023      	movs	r3, r4
    cbc4:	4694      	mov	ip, r2
    cbc6:	4463      	add	r3, ip
    cbc8:	9308      	str	r3, [sp, #32]
    cbca:	2301      	movs	r3, #1
    cbcc:	4033      	ands	r3, r6
    cbce:	9307      	str	r3, [sp, #28]
    cbd0:	464b      	mov	r3, r9
    cbd2:	9306      	str	r3, [sp, #24]
    cbd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cbd6:	4657      	mov	r7, sl
    cbd8:	4645      	mov	r5, r8
    cbda:	465e      	mov	r6, fp
    cbdc:	4692      	mov	sl, r2
    cbde:	4698      	mov	r8, r3
    cbe0:	9b06      	ldr	r3, [sp, #24]
    cbe2:	0030      	movs	r0, r6
    cbe4:	0019      	movs	r1, r3
    cbe6:	4699      	mov	r9, r3
    cbe8:	f7ff fb1c 	bl	c224 <quorem>
    cbec:	0003      	movs	r3, r0
    cbee:	900b      	str	r0, [sp, #44]	; 0x2c
    cbf0:	3330      	adds	r3, #48	; 0x30
    cbf2:	0029      	movs	r1, r5
    cbf4:	0030      	movs	r0, r6
    cbf6:	9304      	str	r3, [sp, #16]
    cbf8:	f001 fdd4 	bl	e7a4 <__mcmp>
    cbfc:	4649      	mov	r1, r9
    cbfe:	0004      	movs	r4, r0
    cc00:	4642      	mov	r2, r8
    cc02:	0038      	movs	r0, r7
    cc04:	f001 fde8 	bl	e7d8 <__mdiff>
    cc08:	68c3      	ldr	r3, [r0, #12]
    cc0a:	4681      	mov	r9, r0
    cc0c:	2b00      	cmp	r3, #0
    cc0e:	d000      	beq.n	cc12 <_dtoa_r+0x89a>
    cc10:	e11e      	b.n	ce50 <_dtoa_r+0xad8>
    cc12:	0001      	movs	r1, r0
    cc14:	0030      	movs	r0, r6
    cc16:	f001 fdc5 	bl	e7a4 <__mcmp>
    cc1a:	4683      	mov	fp, r0
    cc1c:	4649      	mov	r1, r9
    cc1e:	0038      	movs	r0, r7
    cc20:	f001 fbb4 	bl	e38c <_Bfree>
    cc24:	465b      	mov	r3, fp
    cc26:	9a22      	ldr	r2, [sp, #136]	; 0x88
    cc28:	4313      	orrs	r3, r2
    cc2a:	d103      	bne.n	cc34 <_dtoa_r+0x8bc>
    cc2c:	9b07      	ldr	r3, [sp, #28]
    cc2e:	2b00      	cmp	r3, #0
    cc30:	d100      	bne.n	cc34 <_dtoa_r+0x8bc>
    cc32:	e306      	b.n	d242 <_dtoa_r+0xeca>
    cc34:	2c00      	cmp	r4, #0
    cc36:	da00      	bge.n	cc3a <_dtoa_r+0x8c2>
    cc38:	e1a8      	b.n	cf8c <_dtoa_r+0xc14>
    cc3a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    cc3c:	431c      	orrs	r4, r3
    cc3e:	d103      	bne.n	cc48 <_dtoa_r+0x8d0>
    cc40:	9b07      	ldr	r3, [sp, #28]
    cc42:	2b00      	cmp	r3, #0
    cc44:	d100      	bne.n	cc48 <_dtoa_r+0x8d0>
    cc46:	e1a1      	b.n	cf8c <_dtoa_r+0xc14>
    cc48:	465b      	mov	r3, fp
    cc4a:	2b00      	cmp	r3, #0
    cc4c:	dd00      	ble.n	cc50 <_dtoa_r+0x8d8>
    cc4e:	e282      	b.n	d156 <_dtoa_r+0xdde>
    cc50:	4669      	mov	r1, sp
    cc52:	4652      	mov	r2, sl
    cc54:	4653      	mov	r3, sl
    cc56:	7c09      	ldrb	r1, [r1, #16]
    cc58:	1c5c      	adds	r4, r3, #1
    cc5a:	7011      	strb	r1, [r2, #0]
    cc5c:	9a08      	ldr	r2, [sp, #32]
    cc5e:	4552      	cmp	r2, sl
    cc60:	d100      	bne.n	cc64 <_dtoa_r+0x8ec>
    cc62:	e28a      	b.n	d17a <_dtoa_r+0xe02>
    cc64:	0031      	movs	r1, r6
    cc66:	2300      	movs	r3, #0
    cc68:	220a      	movs	r2, #10
    cc6a:	0038      	movs	r0, r7
    cc6c:	f001 fb98 	bl	e3a0 <__multadd>
    cc70:	2300      	movs	r3, #0
    cc72:	0006      	movs	r6, r0
    cc74:	220a      	movs	r2, #10
    cc76:	0029      	movs	r1, r5
    cc78:	0038      	movs	r0, r7
    cc7a:	4545      	cmp	r5, r8
    cc7c:	d100      	bne.n	cc80 <_dtoa_r+0x908>
    cc7e:	e0e1      	b.n	ce44 <_dtoa_r+0xacc>
    cc80:	f001 fb8e 	bl	e3a0 <__multadd>
    cc84:	4641      	mov	r1, r8
    cc86:	0005      	movs	r5, r0
    cc88:	2300      	movs	r3, #0
    cc8a:	220a      	movs	r2, #10
    cc8c:	0038      	movs	r0, r7
    cc8e:	f001 fb87 	bl	e3a0 <__multadd>
    cc92:	46a2      	mov	sl, r4
    cc94:	4680      	mov	r8, r0
    cc96:	e7a3      	b.n	cbe0 <_dtoa_r+0x868>
    cc98:	201c      	movs	r0, #28
    cc9a:	9b06      	ldr	r3, [sp, #24]
    cc9c:	469c      	mov	ip, r3
    cc9e:	4484      	add	ip, r0
    cca0:	4663      	mov	r3, ip
    cca2:	9306      	str	r3, [sp, #24]
    cca4:	9b08      	ldr	r3, [sp, #32]
    cca6:	469c      	mov	ip, r3
    cca8:	4484      	add	ip, r0
    ccaa:	4663      	mov	r3, ip
    ccac:	9308      	str	r3, [sp, #32]
    ccae:	9b04      	ldr	r3, [sp, #16]
    ccb0:	469c      	mov	ip, r3
    ccb2:	4484      	add	ip, r0
    ccb4:	4663      	mov	r3, ip
    ccb6:	9304      	str	r3, [sp, #16]
    ccb8:	e754      	b.n	cb64 <_dtoa_r+0x7ec>
    ccba:	4649      	mov	r1, r9
    ccbc:	4658      	mov	r0, fp
    ccbe:	f001 fd71 	bl	e7a4 <__mcmp>
    ccc2:	2800      	cmp	r0, #0
    ccc4:	db00      	blt.n	ccc8 <_dtoa_r+0x950>
    ccc6:	e763      	b.n	cb90 <_dtoa_r+0x818>
    ccc8:	9b03      	ldr	r3, [sp, #12]
    ccca:	4659      	mov	r1, fp
    cccc:	3b01      	subs	r3, #1
    ccce:	9303      	str	r3, [sp, #12]
    ccd0:	220a      	movs	r2, #10
    ccd2:	2300      	movs	r3, #0
    ccd4:	4650      	mov	r0, sl
    ccd6:	f001 fb63 	bl	e3a0 <__multadd>
    ccda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ccdc:	4683      	mov	fp, r0
    ccde:	2b00      	cmp	r3, #0
    cce0:	d000      	beq.n	cce4 <_dtoa_r+0x96c>
    cce2:	e2ca      	b.n	d27a <_dtoa_r+0xf02>
    cce4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    cce6:	2b00      	cmp	r3, #0
    cce8:	dc00      	bgt.n	ccec <_dtoa_r+0x974>
    ccea:	e2d8      	b.n	d29e <_dtoa_r+0xf26>
    ccec:	9307      	str	r3, [sp, #28]
    ccee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ccf0:	465d      	mov	r5, fp
    ccf2:	2400      	movs	r4, #0
    ccf4:	9f07      	ldr	r7, [sp, #28]
    ccf6:	469b      	mov	fp, r3
    ccf8:	e006      	b.n	cd08 <_dtoa_r+0x990>
    ccfa:	0029      	movs	r1, r5
    ccfc:	2300      	movs	r3, #0
    ccfe:	220a      	movs	r2, #10
    cd00:	4650      	mov	r0, sl
    cd02:	f001 fb4d 	bl	e3a0 <__multadd>
    cd06:	0005      	movs	r5, r0
    cd08:	4649      	mov	r1, r9
    cd0a:	0028      	movs	r0, r5
    cd0c:	f7ff fa8a 	bl	c224 <quorem>
    cd10:	465b      	mov	r3, fp
    cd12:	3030      	adds	r0, #48	; 0x30
    cd14:	5518      	strb	r0, [r3, r4]
    cd16:	3401      	adds	r4, #1
    cd18:	42bc      	cmp	r4, r7
    cd1a:	dbee      	blt.n	ccfa <_dtoa_r+0x982>
    cd1c:	46ab      	mov	fp, r5
    cd1e:	0006      	movs	r6, r0
    cd20:	9c07      	ldr	r4, [sp, #28]
    cd22:	2c00      	cmp	r4, #0
    cd24:	dc00      	bgt.n	cd28 <_dtoa_r+0x9b0>
    cd26:	e237      	b.n	d198 <_dtoa_r+0xe20>
    cd28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cd2a:	2700      	movs	r7, #0
    cd2c:	469c      	mov	ip, r3
    cd2e:	4464      	add	r4, ip
    cd30:	4659      	mov	r1, fp
    cd32:	2201      	movs	r2, #1
    cd34:	4650      	mov	r0, sl
    cd36:	f001 fcd5 	bl	e6e4 <__lshift>
    cd3a:	4649      	mov	r1, r9
    cd3c:	4683      	mov	fp, r0
    cd3e:	f001 fd31 	bl	e7a4 <__mcmp>
    cd42:	2800      	cmp	r0, #0
    cd44:	dc00      	bgt.n	cd48 <_dtoa_r+0x9d0>
    cd46:	e144      	b.n	cfd2 <_dtoa_r+0xc5a>
    cd48:	1e65      	subs	r5, r4, #1
    cd4a:	782b      	ldrb	r3, [r5, #0]
    cd4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    cd4e:	e006      	b.n	cd5e <_dtoa_r+0x9e6>
    cd50:	4295      	cmp	r5, r2
    cd52:	d100      	bne.n	cd56 <_dtoa_r+0x9de>
    cd54:	e0b1      	b.n	ceba <_dtoa_r+0xb42>
    cd56:	3c02      	subs	r4, #2
    cd58:	7823      	ldrb	r3, [r4, #0]
    cd5a:	002c      	movs	r4, r5
    cd5c:	3d01      	subs	r5, #1
    cd5e:	2b39      	cmp	r3, #57	; 0x39
    cd60:	d0f6      	beq.n	cd50 <_dtoa_r+0x9d8>
    cd62:	3301      	adds	r3, #1
    cd64:	702b      	strb	r3, [r5, #0]
    cd66:	4649      	mov	r1, r9
    cd68:	4650      	mov	r0, sl
    cd6a:	f001 fb0f 	bl	e38c <_Bfree>
    cd6e:	4643      	mov	r3, r8
    cd70:	2b00      	cmp	r3, #0
    cd72:	d100      	bne.n	cd76 <_dtoa_r+0x9fe>
    cd74:	e52f      	b.n	c7d6 <_dtoa_r+0x45e>
    cd76:	2f00      	cmp	r7, #0
    cd78:	d005      	beq.n	cd86 <_dtoa_r+0xa0e>
    cd7a:	4547      	cmp	r7, r8
    cd7c:	d003      	beq.n	cd86 <_dtoa_r+0xa0e>
    cd7e:	0039      	movs	r1, r7
    cd80:	4650      	mov	r0, sl
    cd82:	f001 fb03 	bl	e38c <_Bfree>
    cd86:	4641      	mov	r1, r8
    cd88:	4650      	mov	r0, sl
    cd8a:	f001 faff 	bl	e38c <_Bfree>
    cd8e:	e522      	b.n	c7d6 <_dtoa_r+0x45e>
    cd90:	0013      	movs	r3, r2
    cd92:	e675      	b.n	ca80 <_dtoa_r+0x708>
    cd94:	2e00      	cmp	r6, #0
    cd96:	d000      	beq.n	cd9a <_dtoa_r+0xa22>
    cd98:	e6ab      	b.n	caf2 <_dtoa_r+0x77a>
    cd9a:	033b      	lsls	r3, r7, #12
    cd9c:	2400      	movs	r4, #0
    cd9e:	2b00      	cmp	r3, #0
    cda0:	d000      	beq.n	cda4 <_dtoa_r+0xa2c>
    cda2:	e6bf      	b.n	cb24 <_dtoa_r+0x7ac>
    cda4:	4bba      	ldr	r3, [pc, #744]	; (d090 <_dtoa_r+0xd18>)
    cda6:	423b      	tst	r3, r7
    cda8:	d100      	bne.n	cdac <_dtoa_r+0xa34>
    cdaa:	e6bb      	b.n	cb24 <_dtoa_r+0x7ac>
    cdac:	9b06      	ldr	r3, [sp, #24]
    cdae:	3401      	adds	r4, #1
    cdb0:	3301      	adds	r3, #1
    cdb2:	9306      	str	r3, [sp, #24]
    cdb4:	9b04      	ldr	r3, [sp, #16]
    cdb6:	3301      	adds	r3, #1
    cdb8:	9304      	str	r3, [sp, #16]
    cdba:	e6b3      	b.n	cb24 <_dtoa_r+0x7ac>
    cdbc:	2301      	movs	r3, #1
    cdbe:	930b      	str	r3, [sp, #44]	; 0x2c
    cdc0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    cdc2:	2b00      	cmp	r3, #0
    cdc4:	dc00      	bgt.n	cdc8 <_dtoa_r+0xa50>
    cdc6:	e0d1      	b.n	cf6c <_dtoa_r+0xbf4>
    cdc8:	001d      	movs	r5, r3
    cdca:	4698      	mov	r8, r3
    cdcc:	930e      	str	r3, [sp, #56]	; 0x38
    cdce:	9307      	str	r3, [sp, #28]
    cdd0:	f7ff fbc8 	bl	c564 <_dtoa_r+0x1ec>
    cdd4:	9b07      	ldr	r3, [sp, #28]
    cdd6:	2b00      	cmp	r3, #0
    cdd8:	dd00      	ble.n	cddc <_dtoa_r+0xa64>
    cdda:	e553      	b.n	c884 <_dtoa_r+0x50c>
    cddc:	d000      	beq.n	cde0 <_dtoa_r+0xa68>
    cdde:	e0ad      	b.n	cf3c <_dtoa_r+0xbc4>
    cde0:	9804      	ldr	r0, [sp, #16]
    cde2:	9905      	ldr	r1, [sp, #20]
    cde4:	2200      	movs	r2, #0
    cde6:	4bab      	ldr	r3, [pc, #684]	; (d094 <_dtoa_r+0xd1c>)
    cde8:	f7fc fbf2 	bl	95d0 <__aeabi_dmul>
    cdec:	003b      	movs	r3, r7
    cdee:	0032      	movs	r2, r6
    cdf0:	f7fd fa66 	bl	a2c0 <__aeabi_dcmpge>
    cdf4:	2300      	movs	r3, #0
    cdf6:	4699      	mov	r9, r3
    cdf8:	4698      	mov	r8, r3
    cdfa:	2800      	cmp	r0, #0
    cdfc:	d055      	beq.n	ceaa <_dtoa_r+0xb32>
    cdfe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    ce00:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    ce02:	43db      	mvns	r3, r3
    ce04:	9303      	str	r3, [sp, #12]
    ce06:	4649      	mov	r1, r9
    ce08:	4650      	mov	r0, sl
    ce0a:	f001 fabf 	bl	e38c <_Bfree>
    ce0e:	4643      	mov	r3, r8
    ce10:	2b00      	cmp	r3, #0
    ce12:	d100      	bne.n	ce16 <_dtoa_r+0xa9e>
    ce14:	e4df      	b.n	c7d6 <_dtoa_r+0x45e>
    ce16:	e7b6      	b.n	cd86 <_dtoa_r+0xa0e>
    ce18:	464a      	mov	r2, r9
    ce1a:	4659      	mov	r1, fp
    ce1c:	4650      	mov	r0, sl
    ce1e:	f001 fc01 	bl	e624 <__pow5mult>
    ce22:	4683      	mov	fp, r0
    ce24:	e653      	b.n	cace <_dtoa_r+0x756>
    ce26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    ce28:	2a00      	cmp	r2, #0
    ce2a:	d100      	bne.n	ce2e <_dtoa_r+0xab6>
    ce2c:	e1b6      	b.n	d19c <_dtoa_r+0xe24>
    ce2e:	4a9a      	ldr	r2, [pc, #616]	; (d098 <_dtoa_r+0xd20>)
    ce30:	464c      	mov	r4, r9
    ce32:	4694      	mov	ip, r2
    ce34:	9a06      	ldr	r2, [sp, #24]
    ce36:	4463      	add	r3, ip
    ce38:	9208      	str	r2, [sp, #32]
    ce3a:	e5d5      	b.n	c9e8 <_dtoa_r+0x670>
    ce3c:	2e00      	cmp	r6, #0
    ce3e:	d000      	beq.n	ce42 <_dtoa_r+0xaca>
    ce40:	e670      	b.n	cb24 <_dtoa_r+0x7ac>
    ce42:	e7aa      	b.n	cd9a <_dtoa_r+0xa22>
    ce44:	f001 faac 	bl	e3a0 <__multadd>
    ce48:	46a2      	mov	sl, r4
    ce4a:	0005      	movs	r5, r0
    ce4c:	4680      	mov	r8, r0
    ce4e:	e6c7      	b.n	cbe0 <_dtoa_r+0x868>
    ce50:	2301      	movs	r3, #1
    ce52:	469b      	mov	fp, r3
    ce54:	e6e2      	b.n	cc1c <_dtoa_r+0x8a4>
    ce56:	2300      	movs	r3, #0
    ce58:	930b      	str	r3, [sp, #44]	; 0x2c
    ce5a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ce5c:	2b02      	cmp	r3, #2
    ce5e:	d0af      	beq.n	cdc0 <_dtoa_r+0xa48>
    ce60:	2400      	movs	r4, #0
    ce62:	4653      	mov	r3, sl
    ce64:	0021      	movs	r1, r4
    ce66:	645c      	str	r4, [r3, #68]	; 0x44
    ce68:	4650      	mov	r0, sl
    ce6a:	f001 fa67 	bl	e33c <_Balloc>
    ce6e:	4653      	mov	r3, sl
    ce70:	6418      	str	r0, [r3, #64]	; 0x40
    ce72:	2301      	movs	r3, #1
    ce74:	425b      	negs	r3, r3
    ce76:	9307      	str	r3, [sp, #28]
    ce78:	930e      	str	r3, [sp, #56]	; 0x38
    ce7a:	3302      	adds	r3, #2
    ce7c:	900a      	str	r0, [sp, #40]	; 0x28
    ce7e:	9423      	str	r4, [sp, #140]	; 0x8c
    ce80:	930b      	str	r3, [sp, #44]	; 0x2c
    ce82:	e4ec      	b.n	c85e <_dtoa_r+0x4e6>
    ce84:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ce86:	2b02      	cmp	r3, #2
    ce88:	dc00      	bgt.n	ce8c <_dtoa_r+0xb14>
    ce8a:	e685      	b.n	cb98 <_dtoa_r+0x820>
    ce8c:	9b07      	ldr	r3, [sp, #28]
    ce8e:	2b00      	cmp	r3, #0
    ce90:	d1b5      	bne.n	cdfe <_dtoa_r+0xa86>
    ce92:	4649      	mov	r1, r9
    ce94:	2205      	movs	r2, #5
    ce96:	4650      	mov	r0, sl
    ce98:	f001 fa82 	bl	e3a0 <__multadd>
    ce9c:	4681      	mov	r9, r0
    ce9e:	0001      	movs	r1, r0
    cea0:	4658      	mov	r0, fp
    cea2:	f001 fc7f 	bl	e7a4 <__mcmp>
    cea6:	2800      	cmp	r0, #0
    cea8:	dda9      	ble.n	cdfe <_dtoa_r+0xa86>
    ceaa:	2331      	movs	r3, #49	; 0x31
    ceac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ceae:	7013      	strb	r3, [r2, #0]
    ceb0:	9b03      	ldr	r3, [sp, #12]
    ceb2:	1c54      	adds	r4, r2, #1
    ceb4:	3301      	adds	r3, #1
    ceb6:	9303      	str	r3, [sp, #12]
    ceb8:	e7a5      	b.n	ce06 <_dtoa_r+0xa8e>
    ceba:	9b03      	ldr	r3, [sp, #12]
    cebc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    cebe:	3301      	adds	r3, #1
    cec0:	9303      	str	r3, [sp, #12]
    cec2:	2331      	movs	r3, #49	; 0x31
    cec4:	7013      	strb	r3, [r2, #0]
    cec6:	e74e      	b.n	cd66 <_dtoa_r+0x9ee>
    cec8:	2300      	movs	r3, #0
    ceca:	930b      	str	r3, [sp, #44]	; 0x2c
    cecc:	f7ff fb3d 	bl	c54a <_dtoa_r+0x1d2>
    ced0:	9b06      	ldr	r3, [sp, #24]
    ced2:	465c      	mov	r4, fp
    ced4:	469b      	mov	fp, r3
    ced6:	9b07      	ldr	r3, [sp, #28]
    ced8:	469a      	mov	sl, r3
    ceda:	e47c      	b.n	c7d6 <_dtoa_r+0x45e>
    cedc:	4640      	mov	r0, r8
    cede:	f7fd f941 	bl	a164 <__aeabi_i2d>
    cee2:	0032      	movs	r2, r6
    cee4:	003b      	movs	r3, r7
    cee6:	f7fc fb73 	bl	95d0 <__aeabi_dmul>
    ceea:	2200      	movs	r2, #0
    ceec:	4b6b      	ldr	r3, [pc, #428]	; (d09c <_dtoa_r+0xd24>)
    ceee:	f002 fafd 	bl	f4ec <__aeabi_dadd>
    cef2:	4a6b      	ldr	r2, [pc, #428]	; (d0a0 <_dtoa_r+0xd28>)
    cef4:	000b      	movs	r3, r1
    cef6:	4694      	mov	ip, r2
    cef8:	4463      	add	r3, ip
    cefa:	9008      	str	r0, [sp, #32]
    cefc:	9109      	str	r1, [sp, #36]	; 0x24
    cefe:	9309      	str	r3, [sp, #36]	; 0x24
    cf00:	2200      	movs	r2, #0
    cf02:	4b64      	ldr	r3, [pc, #400]	; (d094 <_dtoa_r+0xd1c>)
    cf04:	0030      	movs	r0, r6
    cf06:	0039      	movs	r1, r7
    cf08:	f7fc fde2 	bl	9ad0 <__aeabi_dsub>
    cf0c:	9e08      	ldr	r6, [sp, #32]
    cf0e:	9f09      	ldr	r7, [sp, #36]	; 0x24
    cf10:	0032      	movs	r2, r6
    cf12:	003b      	movs	r3, r7
    cf14:	0004      	movs	r4, r0
    cf16:	000d      	movs	r5, r1
    cf18:	f7fd f9c8 	bl	a2ac <__aeabi_dcmpgt>
    cf1c:	2800      	cmp	r0, #0
    cf1e:	d000      	beq.n	cf22 <_dtoa_r+0xbaa>
    cf20:	e0b2      	b.n	d088 <_dtoa_r+0xd10>
    cf22:	2080      	movs	r0, #128	; 0x80
    cf24:	0600      	lsls	r0, r0, #24
    cf26:	4684      	mov	ip, r0
    cf28:	0039      	movs	r1, r7
    cf2a:	4461      	add	r1, ip
    cf2c:	000b      	movs	r3, r1
    cf2e:	0032      	movs	r2, r6
    cf30:	0020      	movs	r0, r4
    cf32:	0029      	movs	r1, r5
    cf34:	f7fd f9a6 	bl	a284 <__aeabi_dcmplt>
    cf38:	2800      	cmp	r0, #0
    cf3a:	d057      	beq.n	cfec <_dtoa_r+0xc74>
    cf3c:	2300      	movs	r3, #0
    cf3e:	4699      	mov	r9, r3
    cf40:	4698      	mov	r8, r3
    cf42:	e75c      	b.n	cdfe <_dtoa_r+0xa86>
    cf44:	980a      	ldr	r0, [sp, #40]	; 0x28
    cf46:	f7ff fa4c 	bl	c3e2 <_dtoa_r+0x6a>
    cf4a:	1ae2      	subs	r2, r4, r3
    cf4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cf4e:	46a1      	mov	r9, r4
    cf50:	469c      	mov	ip, r3
    cf52:	4494      	add	ip, r2
    cf54:	4663      	mov	r3, ip
    cf56:	2400      	movs	r4, #0
    cf58:	930d      	str	r3, [sp, #52]	; 0x34
    cf5a:	e53e      	b.n	c9da <_dtoa_r+0x662>
    cf5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cf5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cf60:	9208      	str	r2, [sp, #32]
    cf62:	9309      	str	r3, [sp, #36]	; 0x24
    cf64:	2302      	movs	r3, #2
    cf66:	4698      	mov	r8, r3
    cf68:	f7ff fb3a 	bl	c5e0 <_dtoa_r+0x268>
    cf6c:	2300      	movs	r3, #0
    cf6e:	4652      	mov	r2, sl
    cf70:	2100      	movs	r1, #0
    cf72:	6453      	str	r3, [r2, #68]	; 0x44
    cf74:	4650      	mov	r0, sl
    cf76:	f001 f9e1 	bl	e33c <_Balloc>
    cf7a:	4653      	mov	r3, sl
    cf7c:	6418      	str	r0, [r3, #64]	; 0x40
    cf7e:	2301      	movs	r3, #1
    cf80:	900a      	str	r0, [sp, #40]	; 0x28
    cf82:	9307      	str	r3, [sp, #28]
    cf84:	9323      	str	r3, [sp, #140]	; 0x8c
    cf86:	930e      	str	r3, [sp, #56]	; 0x38
    cf88:	f7ff fb07 	bl	c59a <_dtoa_r+0x222>
    cf8c:	4643      	mov	r3, r8
    cf8e:	930c      	str	r3, [sp, #48]	; 0x30
    cf90:	465b      	mov	r3, fp
    cf92:	9a06      	ldr	r2, [sp, #24]
    cf94:	46a8      	mov	r8, r5
    cf96:	46b3      	mov	fp, r6
    cf98:	4655      	mov	r5, sl
    cf9a:	9e04      	ldr	r6, [sp, #16]
    cf9c:	4691      	mov	r9, r2
    cf9e:	46ba      	mov	sl, r7
    cfa0:	2b00      	cmp	r3, #0
    cfa2:	dd10      	ble.n	cfc6 <_dtoa_r+0xc4e>
    cfa4:	4659      	mov	r1, fp
    cfa6:	2201      	movs	r2, #1
    cfa8:	0038      	movs	r0, r7
    cfaa:	f001 fb9b 	bl	e6e4 <__lshift>
    cfae:	4649      	mov	r1, r9
    cfb0:	4683      	mov	fp, r0
    cfb2:	f001 fbf7 	bl	e7a4 <__mcmp>
    cfb6:	2800      	cmp	r0, #0
    cfb8:	dc00      	bgt.n	cfbc <_dtoa_r+0xc44>
    cfba:	e157      	b.n	d26c <_dtoa_r+0xef4>
    cfbc:	2e39      	cmp	r6, #57	; 0x39
    cfbe:	d100      	bne.n	cfc2 <_dtoa_r+0xc4a>
    cfc0:	e122      	b.n	d208 <_dtoa_r+0xe90>
    cfc2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    cfc4:	3631      	adds	r6, #49	; 0x31
    cfc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cfc8:	4647      	mov	r7, r8
    cfca:	1c6c      	adds	r4, r5, #1
    cfcc:	702e      	strb	r6, [r5, #0]
    cfce:	4698      	mov	r8, r3
    cfd0:	e6c9      	b.n	cd66 <_dtoa_r+0x9ee>
    cfd2:	2800      	cmp	r0, #0
    cfd4:	d103      	bne.n	cfde <_dtoa_r+0xc66>
    cfd6:	07f3      	lsls	r3, r6, #31
    cfd8:	d501      	bpl.n	cfde <_dtoa_r+0xc66>
    cfda:	e6b5      	b.n	cd48 <_dtoa_r+0x9d0>
    cfdc:	001c      	movs	r4, r3
    cfde:	1e63      	subs	r3, r4, #1
    cfe0:	781a      	ldrb	r2, [r3, #0]
    cfe2:	2a30      	cmp	r2, #48	; 0x30
    cfe4:	d0fa      	beq.n	cfdc <_dtoa_r+0xc64>
    cfe6:	e6be      	b.n	cd66 <_dtoa_r+0x9ee>
    cfe8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    cfea:	4699      	mov	r9, r3
    cfec:	9e10      	ldr	r6, [sp, #64]	; 0x40
    cfee:	9f11      	ldr	r7, [sp, #68]	; 0x44
    cff0:	e435      	b.n	c85e <_dtoa_r+0x4e6>
    cff2:	2501      	movs	r5, #1
    cff4:	f7ff fab4 	bl	c560 <_dtoa_r+0x1e8>
    cff8:	9b03      	ldr	r3, [sp, #12]
    cffa:	2b00      	cmp	r3, #0
    cffc:	d100      	bne.n	d000 <_dtoa_r+0xc88>
    cffe:	e0d4      	b.n	d1aa <_dtoa_r+0xe32>
    d000:	9810      	ldr	r0, [sp, #64]	; 0x40
    d002:	9911      	ldr	r1, [sp, #68]	; 0x44
    d004:	425c      	negs	r4, r3
    d006:	230f      	movs	r3, #15
    d008:	4a26      	ldr	r2, [pc, #152]	; (d0a4 <_dtoa_r+0xd2c>)
    d00a:	4023      	ands	r3, r4
    d00c:	00db      	lsls	r3, r3, #3
    d00e:	18d3      	adds	r3, r2, r3
    d010:	681a      	ldr	r2, [r3, #0]
    d012:	685b      	ldr	r3, [r3, #4]
    d014:	f7fc fadc 	bl	95d0 <__aeabi_dmul>
    d018:	1124      	asrs	r4, r4, #4
    d01a:	0006      	movs	r6, r0
    d01c:	000f      	movs	r7, r1
    d01e:	2c00      	cmp	r4, #0
    d020:	d100      	bne.n	d024 <_dtoa_r+0xcac>
    d022:	e149      	b.n	d2b8 <_dtoa_r+0xf40>
    d024:	2302      	movs	r3, #2
    d026:	4698      	mov	r8, r3
    d028:	4d1f      	ldr	r5, [pc, #124]	; (d0a8 <_dtoa_r+0xd30>)
    d02a:	2301      	movs	r3, #1
    d02c:	4223      	tst	r3, r4
    d02e:	d009      	beq.n	d044 <_dtoa_r+0xccc>
    d030:	469c      	mov	ip, r3
    d032:	682a      	ldr	r2, [r5, #0]
    d034:	686b      	ldr	r3, [r5, #4]
    d036:	0030      	movs	r0, r6
    d038:	0039      	movs	r1, r7
    d03a:	44e0      	add	r8, ip
    d03c:	f7fc fac8 	bl	95d0 <__aeabi_dmul>
    d040:	0006      	movs	r6, r0
    d042:	000f      	movs	r7, r1
    d044:	1064      	asrs	r4, r4, #1
    d046:	3508      	adds	r5, #8
    d048:	2c00      	cmp	r4, #0
    d04a:	d1ee      	bne.n	d02a <_dtoa_r+0xcb2>
    d04c:	f7ff fae4 	bl	c618 <_dtoa_r+0x2a0>
    d050:	9b03      	ldr	r3, [sp, #12]
    d052:	2730      	movs	r7, #48	; 0x30
    d054:	3301      	adds	r3, #1
    d056:	9303      	str	r3, [sp, #12]
    d058:	2330      	movs	r3, #48	; 0x30
    d05a:	702b      	strb	r3, [r5, #0]
    d05c:	e4ac      	b.n	c9b8 <_dtoa_r+0x640>
    d05e:	6859      	ldr	r1, [r3, #4]
    d060:	4650      	mov	r0, sl
    d062:	f001 f96b 	bl	e33c <_Balloc>
    d066:	4643      	mov	r3, r8
    d068:	4641      	mov	r1, r8
    d06a:	0004      	movs	r4, r0
    d06c:	691b      	ldr	r3, [r3, #16]
    d06e:	310c      	adds	r1, #12
    d070:	1c9a      	adds	r2, r3, #2
    d072:	0092      	lsls	r2, r2, #2
    d074:	300c      	adds	r0, #12
    d076:	f7fd fa83 	bl	a580 <memcpy>
    d07a:	2201      	movs	r2, #1
    d07c:	0021      	movs	r1, r4
    d07e:	4650      	mov	r0, sl
    d080:	f001 fb30 	bl	e6e4 <__lshift>
    d084:	900c      	str	r0, [sp, #48]	; 0x30
    d086:	e599      	b.n	cbbc <_dtoa_r+0x844>
    d088:	2300      	movs	r3, #0
    d08a:	4699      	mov	r9, r3
    d08c:	4698      	mov	r8, r3
    d08e:	e70c      	b.n	ceaa <_dtoa_r+0xb32>
    d090:	7ff00000 	.word	0x7ff00000
    d094:	40140000 	.word	0x40140000
    d098:	00000433 	.word	0x00000433
    d09c:	401c0000 	.word	0x401c0000
    d0a0:	fcc00000 	.word	0xfcc00000
    d0a4:	00010080 	.word	0x00010080
    d0a8:	00010058 	.word	0x00010058
    d0ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d0ae:	498f      	ldr	r1, [pc, #572]	; (d2ec <_dtoa_r+0xf74>)
    d0b0:	3b01      	subs	r3, #1
    d0b2:	00db      	lsls	r3, r3, #3
    d0b4:	18c9      	adds	r1, r1, r3
    d0b6:	6808      	ldr	r0, [r1, #0]
    d0b8:	6849      	ldr	r1, [r1, #4]
    d0ba:	9a08      	ldr	r2, [sp, #32]
    d0bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d0be:	f7fc fa87 	bl	95d0 <__aeabi_dmul>
    d0c2:	9014      	str	r0, [sp, #80]	; 0x50
    d0c4:	9115      	str	r1, [sp, #84]	; 0x54
    d0c6:	0039      	movs	r1, r7
    d0c8:	0030      	movs	r0, r6
    d0ca:	f7fd f817 	bl	a0fc <__aeabi_d2iz>
    d0ce:	0005      	movs	r5, r0
    d0d0:	f7fd f848 	bl	a164 <__aeabi_i2d>
    d0d4:	0002      	movs	r2, r0
    d0d6:	000b      	movs	r3, r1
    d0d8:	0030      	movs	r0, r6
    d0da:	0039      	movs	r1, r7
    d0dc:	f7fc fcf8 	bl	9ad0 <__aeabi_dsub>
    d0e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d0e2:	9008      	str	r0, [sp, #32]
    d0e4:	9109      	str	r1, [sp, #36]	; 0x24
    d0e6:	990a      	ldr	r1, [sp, #40]	; 0x28
    d0e8:	001a      	movs	r2, r3
    d0ea:	468c      	mov	ip, r1
    d0ec:	3530      	adds	r5, #48	; 0x30
    d0ee:	4462      	add	r2, ip
    d0f0:	1c4c      	adds	r4, r1, #1
    d0f2:	700d      	strb	r5, [r1, #0]
    d0f4:	4690      	mov	r8, r2
    d0f6:	2b01      	cmp	r3, #1
    d0f8:	d01b      	beq.n	d132 <_dtoa_r+0xdba>
    d0fa:	9808      	ldr	r0, [sp, #32]
    d0fc:	9909      	ldr	r1, [sp, #36]	; 0x24
    d0fe:	0025      	movs	r5, r4
    d100:	2200      	movs	r2, #0
    d102:	4b7b      	ldr	r3, [pc, #492]	; (d2f0 <_dtoa_r+0xf78>)
    d104:	f7fc fa64 	bl	95d0 <__aeabi_dmul>
    d108:	000f      	movs	r7, r1
    d10a:	0006      	movs	r6, r0
    d10c:	f7fc fff6 	bl	a0fc <__aeabi_d2iz>
    d110:	0004      	movs	r4, r0
    d112:	f7fd f827 	bl	a164 <__aeabi_i2d>
    d116:	3430      	adds	r4, #48	; 0x30
    d118:	0002      	movs	r2, r0
    d11a:	000b      	movs	r3, r1
    d11c:	0030      	movs	r0, r6
    d11e:	0039      	movs	r1, r7
    d120:	f7fc fcd6 	bl	9ad0 <__aeabi_dsub>
    d124:	702c      	strb	r4, [r5, #0]
    d126:	3501      	adds	r5, #1
    d128:	45a8      	cmp	r8, r5
    d12a:	d1e9      	bne.n	d100 <_dtoa_r+0xd88>
    d12c:	4644      	mov	r4, r8
    d12e:	9008      	str	r0, [sp, #32]
    d130:	9109      	str	r1, [sp, #36]	; 0x24
    d132:	9814      	ldr	r0, [sp, #80]	; 0x50
    d134:	9915      	ldr	r1, [sp, #84]	; 0x54
    d136:	2200      	movs	r2, #0
    d138:	4b6e      	ldr	r3, [pc, #440]	; (d2f4 <_dtoa_r+0xf7c>)
    d13a:	f002 f9d7 	bl	f4ec <__aeabi_dadd>
    d13e:	9a08      	ldr	r2, [sp, #32]
    d140:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d142:	f7fd f89f 	bl	a284 <__aeabi_dcmplt>
    d146:	2800      	cmp	r0, #0
    d148:	d067      	beq.n	d21a <_dtoa_r+0xea2>
    d14a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    d14c:	1e65      	subs	r5, r4, #1
    d14e:	9303      	str	r3, [sp, #12]
    d150:	782f      	ldrb	r7, [r5, #0]
    d152:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d154:	e42e      	b.n	c9b4 <_dtoa_r+0x63c>
    d156:	4643      	mov	r3, r8
    d158:	46b3      	mov	fp, r6
    d15a:	930c      	str	r3, [sp, #48]	; 0x30
    d15c:	9e04      	ldr	r6, [sp, #16]
    d15e:	9b06      	ldr	r3, [sp, #24]
    d160:	46a8      	mov	r8, r5
    d162:	4699      	mov	r9, r3
    d164:	4655      	mov	r5, sl
    d166:	46ba      	mov	sl, r7
    d168:	2e39      	cmp	r6, #57	; 0x39
    d16a:	d04d      	beq.n	d208 <_dtoa_r+0xe90>
    d16c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d16e:	3601      	adds	r6, #1
    d170:	4647      	mov	r7, r8
    d172:	1c6c      	adds	r4, r5, #1
    d174:	702e      	strb	r6, [r5, #0]
    d176:	4698      	mov	r8, r3
    d178:	e5f5      	b.n	cd66 <_dtoa_r+0x9ee>
    d17a:	4642      	mov	r2, r8
    d17c:	9b06      	ldr	r3, [sp, #24]
    d17e:	46b3      	mov	fp, r6
    d180:	46ba      	mov	sl, r7
    d182:	9e04      	ldr	r6, [sp, #16]
    d184:	4699      	mov	r9, r3
    d186:	002f      	movs	r7, r5
    d188:	4690      	mov	r8, r2
    d18a:	e5d1      	b.n	cd30 <_dtoa_r+0x9b8>
    d18c:	9b06      	ldr	r3, [sp, #24]
    d18e:	9a07      	ldr	r2, [sp, #28]
    d190:	1a9b      	subs	r3, r3, r2
    d192:	9308      	str	r3, [sp, #32]
    d194:	2300      	movs	r3, #0
    d196:	e427      	b.n	c9e8 <_dtoa_r+0x670>
    d198:	2401      	movs	r4, #1
    d19a:	e5c5      	b.n	cd28 <_dtoa_r+0x9b0>
    d19c:	2336      	movs	r3, #54	; 0x36
    d19e:	9a16      	ldr	r2, [sp, #88]	; 0x58
    d1a0:	464c      	mov	r4, r9
    d1a2:	1a9b      	subs	r3, r3, r2
    d1a4:	9a06      	ldr	r2, [sp, #24]
    d1a6:	9208      	str	r2, [sp, #32]
    d1a8:	e41e      	b.n	c9e8 <_dtoa_r+0x670>
    d1aa:	2302      	movs	r3, #2
    d1ac:	9e10      	ldr	r6, [sp, #64]	; 0x40
    d1ae:	9f11      	ldr	r7, [sp, #68]	; 0x44
    d1b0:	4698      	mov	r8, r3
    d1b2:	f7ff fa31 	bl	c618 <_dtoa_r+0x2a0>
    d1b6:	9b07      	ldr	r3, [sp, #28]
    d1b8:	2b00      	cmp	r3, #0
    d1ba:	d100      	bne.n	d1be <_dtoa_r+0xe46>
    d1bc:	e68e      	b.n	cedc <_dtoa_r+0xb64>
    d1be:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    d1c0:	2c00      	cmp	r4, #0
    d1c2:	dc00      	bgt.n	d1c6 <_dtoa_r+0xe4e>
    d1c4:	e712      	b.n	cfec <_dtoa_r+0xc74>
    d1c6:	9b03      	ldr	r3, [sp, #12]
    d1c8:	2200      	movs	r2, #0
    d1ca:	3b01      	subs	r3, #1
    d1cc:	9313      	str	r3, [sp, #76]	; 0x4c
    d1ce:	0030      	movs	r0, r6
    d1d0:	4b47      	ldr	r3, [pc, #284]	; (d2f0 <_dtoa_r+0xf78>)
    d1d2:	0039      	movs	r1, r7
    d1d4:	f7fc f9fc 	bl	95d0 <__aeabi_dmul>
    d1d8:	0006      	movs	r6, r0
    d1da:	4640      	mov	r0, r8
    d1dc:	000f      	movs	r7, r1
    d1de:	3001      	adds	r0, #1
    d1e0:	f7fc ffc0 	bl	a164 <__aeabi_i2d>
    d1e4:	0032      	movs	r2, r6
    d1e6:	003b      	movs	r3, r7
    d1e8:	f7fc f9f2 	bl	95d0 <__aeabi_dmul>
    d1ec:	2200      	movs	r2, #0
    d1ee:	4b42      	ldr	r3, [pc, #264]	; (d2f8 <_dtoa_r+0xf80>)
    d1f0:	f002 f97c 	bl	f4ec <__aeabi_dadd>
    d1f4:	4a41      	ldr	r2, [pc, #260]	; (d2fc <_dtoa_r+0xf84>)
    d1f6:	000b      	movs	r3, r1
    d1f8:	4694      	mov	ip, r2
    d1fa:	4463      	add	r3, ip
    d1fc:	9008      	str	r0, [sp, #32]
    d1fe:	9109      	str	r1, [sp, #36]	; 0x24
    d200:	9412      	str	r4, [sp, #72]	; 0x48
    d202:	9309      	str	r3, [sp, #36]	; 0x24
    d204:	f7ff fa30 	bl	c668 <_dtoa_r+0x2f0>
    d208:	2339      	movs	r3, #57	; 0x39
    d20a:	702b      	strb	r3, [r5, #0]
    d20c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d20e:	4647      	mov	r7, r8
    d210:	1c6c      	adds	r4, r5, #1
    d212:	4698      	mov	r8, r3
    d214:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    d216:	2339      	movs	r3, #57	; 0x39
    d218:	e5a1      	b.n	cd5e <_dtoa_r+0x9e6>
    d21a:	9a14      	ldr	r2, [sp, #80]	; 0x50
    d21c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    d21e:	2000      	movs	r0, #0
    d220:	4934      	ldr	r1, [pc, #208]	; (d2f4 <_dtoa_r+0xf7c>)
    d222:	f7fc fc55 	bl	9ad0 <__aeabi_dsub>
    d226:	9a08      	ldr	r2, [sp, #32]
    d228:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d22a:	f7fd f83f 	bl	a2ac <__aeabi_dcmpgt>
    d22e:	2800      	cmp	r0, #0
    d230:	d101      	bne.n	d236 <_dtoa_r+0xebe>
    d232:	e6db      	b.n	cfec <_dtoa_r+0xc74>
    d234:	001c      	movs	r4, r3
    d236:	1e63      	subs	r3, r4, #1
    d238:	781a      	ldrb	r2, [r3, #0]
    d23a:	2a30      	cmp	r2, #48	; 0x30
    d23c:	d0fa      	beq.n	d234 <_dtoa_r+0xebc>
    d23e:	f7ff fac8 	bl	c7d2 <_dtoa_r+0x45a>
    d242:	4643      	mov	r3, r8
    d244:	46b3      	mov	fp, r6
    d246:	930c      	str	r3, [sp, #48]	; 0x30
    d248:	9e04      	ldr	r6, [sp, #16]
    d24a:	9b06      	ldr	r3, [sp, #24]
    d24c:	46a8      	mov	r8, r5
    d24e:	4699      	mov	r9, r3
    d250:	4655      	mov	r5, sl
    d252:	46ba      	mov	sl, r7
    d254:	2e39      	cmp	r6, #57	; 0x39
    d256:	d0d7      	beq.n	d208 <_dtoa_r+0xe90>
    d258:	2c00      	cmp	r4, #0
    d25a:	dd00      	ble.n	d25e <_dtoa_r+0xee6>
    d25c:	e6b1      	b.n	cfc2 <_dtoa_r+0xc4a>
    d25e:	e6b2      	b.n	cfc6 <_dtoa_r+0xc4e>
    d260:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    d262:	464d      	mov	r5, r9
    d264:	9203      	str	r2, [sp, #12]
    d266:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d268:	f7ff fba4 	bl	c9b4 <_dtoa_r+0x63c>
    d26c:	2800      	cmp	r0, #0
    d26e:	d000      	beq.n	d272 <_dtoa_r+0xefa>
    d270:	e6a9      	b.n	cfc6 <_dtoa_r+0xc4e>
    d272:	07f3      	lsls	r3, r6, #31
    d274:	d400      	bmi.n	d278 <_dtoa_r+0xf00>
    d276:	e6a6      	b.n	cfc6 <_dtoa_r+0xc4e>
    d278:	e6a0      	b.n	cfbc <_dtoa_r+0xc44>
    d27a:	2300      	movs	r3, #0
    d27c:	4641      	mov	r1, r8
    d27e:	220a      	movs	r2, #10
    d280:	4650      	mov	r0, sl
    d282:	f001 f88d 	bl	e3a0 <__multadd>
    d286:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d288:	4680      	mov	r8, r0
    d28a:	2b00      	cmp	r3, #0
    d28c:	dd01      	ble.n	d292 <_dtoa_r+0xf1a>
    d28e:	9307      	str	r3, [sp, #28]
    d290:	e486      	b.n	cba0 <_dtoa_r+0x828>
    d292:	9b22      	ldr	r3, [sp, #136]	; 0x88
    d294:	2b02      	cmp	r3, #2
    d296:	dc1f      	bgt.n	d2d8 <_dtoa_r+0xf60>
    d298:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d29a:	9307      	str	r3, [sp, #28]
    d29c:	e480      	b.n	cba0 <_dtoa_r+0x828>
    d29e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    d2a0:	2b02      	cmp	r3, #2
    d2a2:	dc19      	bgt.n	d2d8 <_dtoa_r+0xf60>
    d2a4:	4649      	mov	r1, r9
    d2a6:	f7fe ffbd 	bl	c224 <quorem>
    d2aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d2ac:	3030      	adds	r0, #48	; 0x30
    d2ae:	7018      	strb	r0, [r3, #0]
    d2b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d2b2:	0006      	movs	r6, r0
    d2b4:	9307      	str	r3, [sp, #28]
    d2b6:	e533      	b.n	cd20 <_dtoa_r+0x9a8>
    d2b8:	2302      	movs	r3, #2
    d2ba:	4698      	mov	r8, r3
    d2bc:	f7ff f9ac 	bl	c618 <_dtoa_r+0x2a0>
    d2c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    d2c2:	9c14      	ldr	r4, [sp, #80]	; 0x50
    d2c4:	9303      	str	r3, [sp, #12]
    d2c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d2c8:	001d      	movs	r5, r3
    d2ca:	f7ff fb73 	bl	c9b4 <_dtoa_r+0x63c>
    d2ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    d2d0:	9c14      	ldr	r4, [sp, #80]	; 0x50
    d2d2:	9303      	str	r3, [sp, #12]
    d2d4:	f7ff fa7f 	bl	c7d6 <_dtoa_r+0x45e>
    d2d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d2da:	9307      	str	r3, [sp, #28]
    d2dc:	e5d6      	b.n	ce8c <_dtoa_r+0xb14>
    d2de:	2b04      	cmp	r3, #4
    d2e0:	d100      	bne.n	d2e4 <_dtoa_r+0xf6c>
    d2e2:	e43f      	b.n	cb64 <_dtoa_r+0x7ec>
    d2e4:	233c      	movs	r3, #60	; 0x3c
    d2e6:	1a18      	subs	r0, r3, r0
    d2e8:	e4d7      	b.n	cc9a <_dtoa_r+0x922>
    d2ea:	46c0      	nop			; (mov r8, r8)
    d2ec:	00010080 	.word	0x00010080
    d2f0:	40240000 	.word	0x40240000
    d2f4:	3fe00000 	.word	0x3fe00000
    d2f8:	401c0000 	.word	0x401c0000
    d2fc:	fcc00000 	.word	0xfcc00000

0000d300 <__sflush_r>:
    d300:	b5f0      	push	{r4, r5, r6, r7, lr}
    d302:	46c6      	mov	lr, r8
    d304:	b500      	push	{lr}
    d306:	230c      	movs	r3, #12
    d308:	5eca      	ldrsh	r2, [r1, r3]
    d30a:	4680      	mov	r8, r0
    d30c:	b293      	uxth	r3, r2
    d30e:	000c      	movs	r4, r1
    d310:	0719      	lsls	r1, r3, #28
    d312:	d440      	bmi.n	d396 <__sflush_r+0x96>
    d314:	2380      	movs	r3, #128	; 0x80
    d316:	011b      	lsls	r3, r3, #4
    d318:	4313      	orrs	r3, r2
    d31a:	6862      	ldr	r2, [r4, #4]
    d31c:	81a3      	strh	r3, [r4, #12]
    d31e:	2a00      	cmp	r2, #0
    d320:	dc00      	bgt.n	d324 <__sflush_r+0x24>
    d322:	e070      	b.n	d406 <__sflush_r+0x106>
    d324:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    d326:	2e00      	cmp	r6, #0
    d328:	d031      	beq.n	d38e <__sflush_r+0x8e>
    d32a:	4642      	mov	r2, r8
    d32c:	4641      	mov	r1, r8
    d32e:	6815      	ldr	r5, [r2, #0]
    d330:	2200      	movs	r2, #0
    d332:	b29b      	uxth	r3, r3
    d334:	600a      	str	r2, [r1, #0]
    d336:	04da      	lsls	r2, r3, #19
    d338:	d400      	bmi.n	d33c <__sflush_r+0x3c>
    d33a:	e069      	b.n	d410 <__sflush_r+0x110>
    d33c:	6d22      	ldr	r2, [r4, #80]	; 0x50
    d33e:	075b      	lsls	r3, r3, #29
    d340:	d506      	bpl.n	d350 <__sflush_r+0x50>
    d342:	6863      	ldr	r3, [r4, #4]
    d344:	1ad2      	subs	r2, r2, r3
    d346:	6b23      	ldr	r3, [r4, #48]	; 0x30
    d348:	2b00      	cmp	r3, #0
    d34a:	d001      	beq.n	d350 <__sflush_r+0x50>
    d34c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    d34e:	1ad2      	subs	r2, r2, r3
    d350:	2300      	movs	r3, #0
    d352:	69e1      	ldr	r1, [r4, #28]
    d354:	4640      	mov	r0, r8
    d356:	47b0      	blx	r6
    d358:	1c43      	adds	r3, r0, #1
    d35a:	d03d      	beq.n	d3d8 <__sflush_r+0xd8>
    d35c:	89a3      	ldrh	r3, [r4, #12]
    d35e:	4a3a      	ldr	r2, [pc, #232]	; (d448 <__sflush_r+0x148>)
    d360:	4013      	ands	r3, r2
    d362:	2200      	movs	r2, #0
    d364:	6062      	str	r2, [r4, #4]
    d366:	6922      	ldr	r2, [r4, #16]
    d368:	b21b      	sxth	r3, r3
    d36a:	81a3      	strh	r3, [r4, #12]
    d36c:	6022      	str	r2, [r4, #0]
    d36e:	04db      	lsls	r3, r3, #19
    d370:	d447      	bmi.n	d402 <__sflush_r+0x102>
    d372:	4643      	mov	r3, r8
    d374:	6b21      	ldr	r1, [r4, #48]	; 0x30
    d376:	601d      	str	r5, [r3, #0]
    d378:	2900      	cmp	r1, #0
    d37a:	d008      	beq.n	d38e <__sflush_r+0x8e>
    d37c:	0023      	movs	r3, r4
    d37e:	3340      	adds	r3, #64	; 0x40
    d380:	4299      	cmp	r1, r3
    d382:	d002      	beq.n	d38a <__sflush_r+0x8a>
    d384:	4640      	mov	r0, r8
    d386:	f000 f967 	bl	d658 <_free_r>
    d38a:	2300      	movs	r3, #0
    d38c:	6323      	str	r3, [r4, #48]	; 0x30
    d38e:	2000      	movs	r0, #0
    d390:	bc04      	pop	{r2}
    d392:	4690      	mov	r8, r2
    d394:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d396:	6926      	ldr	r6, [r4, #16]
    d398:	2e00      	cmp	r6, #0
    d39a:	d0f8      	beq.n	d38e <__sflush_r+0x8e>
    d39c:	6822      	ldr	r2, [r4, #0]
    d39e:	6026      	str	r6, [r4, #0]
    d3a0:	1b95      	subs	r5, r2, r6
    d3a2:	2200      	movs	r2, #0
    d3a4:	079b      	lsls	r3, r3, #30
    d3a6:	d100      	bne.n	d3aa <__sflush_r+0xaa>
    d3a8:	6962      	ldr	r2, [r4, #20]
    d3aa:	60a2      	str	r2, [r4, #8]
    d3ac:	2d00      	cmp	r5, #0
    d3ae:	dc04      	bgt.n	d3ba <__sflush_r+0xba>
    d3b0:	e7ed      	b.n	d38e <__sflush_r+0x8e>
    d3b2:	1836      	adds	r6, r6, r0
    d3b4:	1a2d      	subs	r5, r5, r0
    d3b6:	2d00      	cmp	r5, #0
    d3b8:	dde9      	ble.n	d38e <__sflush_r+0x8e>
    d3ba:	002b      	movs	r3, r5
    d3bc:	0032      	movs	r2, r6
    d3be:	69e1      	ldr	r1, [r4, #28]
    d3c0:	4640      	mov	r0, r8
    d3c2:	6a67      	ldr	r7, [r4, #36]	; 0x24
    d3c4:	47b8      	blx	r7
    d3c6:	2800      	cmp	r0, #0
    d3c8:	dcf3      	bgt.n	d3b2 <__sflush_r+0xb2>
    d3ca:	2240      	movs	r2, #64	; 0x40
    d3cc:	2001      	movs	r0, #1
    d3ce:	89a3      	ldrh	r3, [r4, #12]
    d3d0:	4240      	negs	r0, r0
    d3d2:	4313      	orrs	r3, r2
    d3d4:	81a3      	strh	r3, [r4, #12]
    d3d6:	e7db      	b.n	d390 <__sflush_r+0x90>
    d3d8:	4643      	mov	r3, r8
    d3da:	6819      	ldr	r1, [r3, #0]
    d3dc:	291d      	cmp	r1, #29
    d3de:	d8f4      	bhi.n	d3ca <__sflush_r+0xca>
    d3e0:	4b1a      	ldr	r3, [pc, #104]	; (d44c <__sflush_r+0x14c>)
    d3e2:	2201      	movs	r2, #1
    d3e4:	40cb      	lsrs	r3, r1
    d3e6:	439a      	bics	r2, r3
    d3e8:	d1ef      	bne.n	d3ca <__sflush_r+0xca>
    d3ea:	89a3      	ldrh	r3, [r4, #12]
    d3ec:	4e16      	ldr	r6, [pc, #88]	; (d448 <__sflush_r+0x148>)
    d3ee:	6062      	str	r2, [r4, #4]
    d3f0:	4033      	ands	r3, r6
    d3f2:	6922      	ldr	r2, [r4, #16]
    d3f4:	b21b      	sxth	r3, r3
    d3f6:	81a3      	strh	r3, [r4, #12]
    d3f8:	6022      	str	r2, [r4, #0]
    d3fa:	04db      	lsls	r3, r3, #19
    d3fc:	d5b9      	bpl.n	d372 <__sflush_r+0x72>
    d3fe:	2900      	cmp	r1, #0
    d400:	d1b7      	bne.n	d372 <__sflush_r+0x72>
    d402:	6520      	str	r0, [r4, #80]	; 0x50
    d404:	e7b5      	b.n	d372 <__sflush_r+0x72>
    d406:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    d408:	2a00      	cmp	r2, #0
    d40a:	dd00      	ble.n	d40e <__sflush_r+0x10e>
    d40c:	e78a      	b.n	d324 <__sflush_r+0x24>
    d40e:	e7be      	b.n	d38e <__sflush_r+0x8e>
    d410:	2200      	movs	r2, #0
    d412:	2301      	movs	r3, #1
    d414:	69e1      	ldr	r1, [r4, #28]
    d416:	4640      	mov	r0, r8
    d418:	47b0      	blx	r6
    d41a:	0002      	movs	r2, r0
    d41c:	1c43      	adds	r3, r0, #1
    d41e:	d002      	beq.n	d426 <__sflush_r+0x126>
    d420:	89a3      	ldrh	r3, [r4, #12]
    d422:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    d424:	e78b      	b.n	d33e <__sflush_r+0x3e>
    d426:	4643      	mov	r3, r8
    d428:	681b      	ldr	r3, [r3, #0]
    d42a:	2b00      	cmp	r3, #0
    d42c:	d0f8      	beq.n	d420 <__sflush_r+0x120>
    d42e:	2b1d      	cmp	r3, #29
    d430:	d001      	beq.n	d436 <__sflush_r+0x136>
    d432:	2b16      	cmp	r3, #22
    d434:	d103      	bne.n	d43e <__sflush_r+0x13e>
    d436:	4643      	mov	r3, r8
    d438:	2000      	movs	r0, #0
    d43a:	601d      	str	r5, [r3, #0]
    d43c:	e7a8      	b.n	d390 <__sflush_r+0x90>
    d43e:	2140      	movs	r1, #64	; 0x40
    d440:	89a3      	ldrh	r3, [r4, #12]
    d442:	430b      	orrs	r3, r1
    d444:	81a3      	strh	r3, [r4, #12]
    d446:	e7a3      	b.n	d390 <__sflush_r+0x90>
    d448:	fffff7ff 	.word	0xfffff7ff
    d44c:	20400001 	.word	0x20400001

0000d450 <_fflush_r>:
    d450:	b570      	push	{r4, r5, r6, lr}
    d452:	0005      	movs	r5, r0
    d454:	000c      	movs	r4, r1
    d456:	2800      	cmp	r0, #0
    d458:	d002      	beq.n	d460 <_fflush_r+0x10>
    d45a:	6b83      	ldr	r3, [r0, #56]	; 0x38
    d45c:	2b00      	cmp	r3, #0
    d45e:	d016      	beq.n	d48e <_fflush_r+0x3e>
    d460:	220c      	movs	r2, #12
    d462:	5ea3      	ldrsh	r3, [r4, r2]
    d464:	2600      	movs	r6, #0
    d466:	2b00      	cmp	r3, #0
    d468:	d00f      	beq.n	d48a <_fflush_r+0x3a>
    d46a:	6e62      	ldr	r2, [r4, #100]	; 0x64
    d46c:	07d2      	lsls	r2, r2, #31
    d46e:	d401      	bmi.n	d474 <_fflush_r+0x24>
    d470:	059b      	lsls	r3, r3, #22
    d472:	d513      	bpl.n	d49c <_fflush_r+0x4c>
    d474:	0021      	movs	r1, r4
    d476:	0028      	movs	r0, r5
    d478:	f7ff ff42 	bl	d300 <__sflush_r>
    d47c:	6e63      	ldr	r3, [r4, #100]	; 0x64
    d47e:	0006      	movs	r6, r0
    d480:	07db      	lsls	r3, r3, #31
    d482:	d402      	bmi.n	d48a <_fflush_r+0x3a>
    d484:	89a3      	ldrh	r3, [r4, #12]
    d486:	059b      	lsls	r3, r3, #22
    d488:	d504      	bpl.n	d494 <_fflush_r+0x44>
    d48a:	0030      	movs	r0, r6
    d48c:	bd70      	pop	{r4, r5, r6, pc}
    d48e:	f000 f839 	bl	d504 <__sinit>
    d492:	e7e5      	b.n	d460 <_fflush_r+0x10>
    d494:	6da0      	ldr	r0, [r4, #88]	; 0x58
    d496:	f000 fb79 	bl	db8c <__retarget_lock_release_recursive>
    d49a:	e7f6      	b.n	d48a <_fflush_r+0x3a>
    d49c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    d49e:	f000 fb73 	bl	db88 <__retarget_lock_acquire_recursive>
    d4a2:	e7e7      	b.n	d474 <_fflush_r+0x24>

0000d4a4 <_cleanup_r>:
    d4a4:	b510      	push	{r4, lr}
    d4a6:	4902      	ldr	r1, [pc, #8]	; (d4b0 <_cleanup_r+0xc>)
    d4a8:	f000 fb36 	bl	db18 <_fwalk_reent>
    d4ac:	bd10      	pop	{r4, pc}
    d4ae:	46c0      	nop			; (mov r8, r8)
    d4b0:	0000ef45 	.word	0x0000ef45

0000d4b4 <std.isra.0>:
    d4b4:	2300      	movs	r3, #0
    d4b6:	b510      	push	{r4, lr}
    d4b8:	0004      	movs	r4, r0
    d4ba:	6003      	str	r3, [r0, #0]
    d4bc:	6043      	str	r3, [r0, #4]
    d4be:	6083      	str	r3, [r0, #8]
    d4c0:	8181      	strh	r1, [r0, #12]
    d4c2:	6643      	str	r3, [r0, #100]	; 0x64
    d4c4:	81c2      	strh	r2, [r0, #14]
    d4c6:	6103      	str	r3, [r0, #16]
    d4c8:	6143      	str	r3, [r0, #20]
    d4ca:	6183      	str	r3, [r0, #24]
    d4cc:	2208      	movs	r2, #8
    d4ce:	2100      	movs	r1, #0
    d4d0:	305c      	adds	r0, #92	; 0x5c
    d4d2:	f7fd f897 	bl	a604 <memset>
    d4d6:	0020      	movs	r0, r4
    d4d8:	4b06      	ldr	r3, [pc, #24]	; (d4f4 <std.isra.0+0x40>)
    d4da:	61e4      	str	r4, [r4, #28]
    d4dc:	6223      	str	r3, [r4, #32]
    d4de:	4b06      	ldr	r3, [pc, #24]	; (d4f8 <std.isra.0+0x44>)
    d4e0:	3058      	adds	r0, #88	; 0x58
    d4e2:	6263      	str	r3, [r4, #36]	; 0x24
    d4e4:	4b05      	ldr	r3, [pc, #20]	; (d4fc <std.isra.0+0x48>)
    d4e6:	62a3      	str	r3, [r4, #40]	; 0x28
    d4e8:	4b05      	ldr	r3, [pc, #20]	; (d500 <std.isra.0+0x4c>)
    d4ea:	62e3      	str	r3, [r4, #44]	; 0x2c
    d4ec:	f000 fb48 	bl	db80 <__retarget_lock_init_recursive>
    d4f0:	bd10      	pop	{r4, pc}
    d4f2:	46c0      	nop			; (mov r8, r8)
    d4f4:	0000ed6d 	.word	0x0000ed6d
    d4f8:	0000ed95 	.word	0x0000ed95
    d4fc:	0000edd1 	.word	0x0000edd1
    d500:	0000edfd 	.word	0x0000edfd

0000d504 <__sinit>:
    d504:	b570      	push	{r4, r5, r6, lr}
    d506:	0004      	movs	r4, r0
    d508:	4d14      	ldr	r5, [pc, #80]	; (d55c <__sinit+0x58>)
    d50a:	0028      	movs	r0, r5
    d50c:	f000 fb3c 	bl	db88 <__retarget_lock_acquire_recursive>
    d510:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    d512:	2b00      	cmp	r3, #0
    d514:	d11d      	bne.n	d552 <__sinit+0x4e>
    d516:	4a12      	ldr	r2, [pc, #72]	; (d560 <__sinit+0x5c>)
    d518:	2104      	movs	r1, #4
    d51a:	63e2      	str	r2, [r4, #60]	; 0x3c
    d51c:	22b8      	movs	r2, #184	; 0xb8
    d51e:	0092      	lsls	r2, r2, #2
    d520:	50a3      	str	r3, [r4, r2]
    d522:	23b9      	movs	r3, #185	; 0xb9
    d524:	2203      	movs	r2, #3
    d526:	009b      	lsls	r3, r3, #2
    d528:	50e2      	str	r2, [r4, r3]
    d52a:	3308      	adds	r3, #8
    d52c:	18e2      	adds	r2, r4, r3
    d52e:	3b04      	subs	r3, #4
    d530:	50e2      	str	r2, [r4, r3]
    d532:	6860      	ldr	r0, [r4, #4]
    d534:	2200      	movs	r2, #0
    d536:	f7ff ffbd 	bl	d4b4 <std.isra.0>
    d53a:	2201      	movs	r2, #1
    d53c:	2109      	movs	r1, #9
    d53e:	68a0      	ldr	r0, [r4, #8]
    d540:	f7ff ffb8 	bl	d4b4 <std.isra.0>
    d544:	2202      	movs	r2, #2
    d546:	2112      	movs	r1, #18
    d548:	68e0      	ldr	r0, [r4, #12]
    d54a:	f7ff ffb3 	bl	d4b4 <std.isra.0>
    d54e:	2301      	movs	r3, #1
    d550:	63a3      	str	r3, [r4, #56]	; 0x38
    d552:	0028      	movs	r0, r5
    d554:	f000 fb1a 	bl	db8c <__retarget_lock_release_recursive>
    d558:	bd70      	pop	{r4, r5, r6, pc}
    d55a:	46c0      	nop			; (mov r8, r8)
    d55c:	20001150 	.word	0x20001150
    d560:	0000d4a5 	.word	0x0000d4a5

0000d564 <__sfp_lock_acquire>:
    d564:	b510      	push	{r4, lr}
    d566:	4802      	ldr	r0, [pc, #8]	; (d570 <__sfp_lock_acquire+0xc>)
    d568:	f000 fb0e 	bl	db88 <__retarget_lock_acquire_recursive>
    d56c:	bd10      	pop	{r4, pc}
    d56e:	46c0      	nop			; (mov r8, r8)
    d570:	20001164 	.word	0x20001164

0000d574 <__sfp_lock_release>:
    d574:	b510      	push	{r4, lr}
    d576:	4802      	ldr	r0, [pc, #8]	; (d580 <__sfp_lock_release+0xc>)
    d578:	f000 fb08 	bl	db8c <__retarget_lock_release_recursive>
    d57c:	bd10      	pop	{r4, pc}
    d57e:	46c0      	nop			; (mov r8, r8)
    d580:	20001164 	.word	0x20001164

0000d584 <__libc_fini_array>:
    d584:	b570      	push	{r4, r5, r6, lr}
    d586:	4b09      	ldr	r3, [pc, #36]	; (d5ac <__libc_fini_array+0x28>)
    d588:	4c09      	ldr	r4, [pc, #36]	; (d5b0 <__libc_fini_array+0x2c>)
    d58a:	1ae4      	subs	r4, r4, r3
    d58c:	10a4      	asrs	r4, r4, #2
    d58e:	d009      	beq.n	d5a4 <__libc_fini_array+0x20>
    d590:	4a08      	ldr	r2, [pc, #32]	; (d5b4 <__libc_fini_array+0x30>)
    d592:	18a5      	adds	r5, r4, r2
    d594:	00ad      	lsls	r5, r5, #2
    d596:	18ed      	adds	r5, r5, r3
    d598:	682b      	ldr	r3, [r5, #0]
    d59a:	3c01      	subs	r4, #1
    d59c:	4798      	blx	r3
    d59e:	3d04      	subs	r5, #4
    d5a0:	2c00      	cmp	r4, #0
    d5a2:	d1f9      	bne.n	d598 <__libc_fini_array+0x14>
    d5a4:	f002 fe6e 	bl	10284 <_fini>
    d5a8:	bd70      	pop	{r4, r5, r6, pc}
    d5aa:	46c0      	nop			; (mov r8, r8)
    d5ac:	00010290 	.word	0x00010290
    d5b0:	00010294 	.word	0x00010294
    d5b4:	3fffffff 	.word	0x3fffffff

0000d5b8 <_malloc_trim_r>:
    d5b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d5ba:	000c      	movs	r4, r1
    d5bc:	0006      	movs	r6, r0
    d5be:	f000 fead 	bl	e31c <__malloc_lock>
    d5c2:	4f20      	ldr	r7, [pc, #128]	; (d644 <_malloc_trim_r+0x8c>)
    d5c4:	68bb      	ldr	r3, [r7, #8]
    d5c6:	685d      	ldr	r5, [r3, #4]
    d5c8:	2303      	movs	r3, #3
    d5ca:	439d      	bics	r5, r3
    d5cc:	4b1e      	ldr	r3, [pc, #120]	; (d648 <_malloc_trim_r+0x90>)
    d5ce:	1b2c      	subs	r4, r5, r4
    d5d0:	469c      	mov	ip, r3
    d5d2:	4464      	add	r4, ip
    d5d4:	0b24      	lsrs	r4, r4, #12
    d5d6:	4b1d      	ldr	r3, [pc, #116]	; (d64c <_malloc_trim_r+0x94>)
    d5d8:	3c01      	subs	r4, #1
    d5da:	0324      	lsls	r4, r4, #12
    d5dc:	429c      	cmp	r4, r3
    d5de:	dd07      	ble.n	d5f0 <_malloc_trim_r+0x38>
    d5e0:	2100      	movs	r1, #0
    d5e2:	0030      	movs	r0, r6
    d5e4:	f001 fbb0 	bl	ed48 <_sbrk_r>
    d5e8:	68bb      	ldr	r3, [r7, #8]
    d5ea:	195b      	adds	r3, r3, r5
    d5ec:	4298      	cmp	r0, r3
    d5ee:	d004      	beq.n	d5fa <_malloc_trim_r+0x42>
    d5f0:	0030      	movs	r0, r6
    d5f2:	f000 fe9b 	bl	e32c <__malloc_unlock>
    d5f6:	2000      	movs	r0, #0
    d5f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d5fa:	4261      	negs	r1, r4
    d5fc:	0030      	movs	r0, r6
    d5fe:	f001 fba3 	bl	ed48 <_sbrk_r>
    d602:	1c43      	adds	r3, r0, #1
    d604:	d00d      	beq.n	d622 <_malloc_trim_r+0x6a>
    d606:	2201      	movs	r2, #1
    d608:	68bb      	ldr	r3, [r7, #8]
    d60a:	1b2d      	subs	r5, r5, r4
    d60c:	4315      	orrs	r5, r2
    d60e:	605d      	str	r5, [r3, #4]
    d610:	4b0f      	ldr	r3, [pc, #60]	; (d650 <_malloc_trim_r+0x98>)
    d612:	0030      	movs	r0, r6
    d614:	681a      	ldr	r2, [r3, #0]
    d616:	1b14      	subs	r4, r2, r4
    d618:	601c      	str	r4, [r3, #0]
    d61a:	f000 fe87 	bl	e32c <__malloc_unlock>
    d61e:	2001      	movs	r0, #1
    d620:	e7ea      	b.n	d5f8 <_malloc_trim_r+0x40>
    d622:	2100      	movs	r1, #0
    d624:	0030      	movs	r0, r6
    d626:	f001 fb8f 	bl	ed48 <_sbrk_r>
    d62a:	68ba      	ldr	r2, [r7, #8]
    d62c:	1a83      	subs	r3, r0, r2
    d62e:	2b0f      	cmp	r3, #15
    d630:	ddde      	ble.n	d5f0 <_malloc_trim_r+0x38>
    d632:	4908      	ldr	r1, [pc, #32]	; (d654 <_malloc_trim_r+0x9c>)
    d634:	6809      	ldr	r1, [r1, #0]
    d636:	1a40      	subs	r0, r0, r1
    d638:	4905      	ldr	r1, [pc, #20]	; (d650 <_malloc_trim_r+0x98>)
    d63a:	6008      	str	r0, [r1, #0]
    d63c:	2101      	movs	r1, #1
    d63e:	430b      	orrs	r3, r1
    d640:	6053      	str	r3, [r2, #4]
    d642:	e7d5      	b.n	d5f0 <_malloc_trim_r+0x38>
    d644:	200004b4 	.word	0x200004b4
    d648:	00000fef 	.word	0x00000fef
    d64c:	00000fff 	.word	0x00000fff
    d650:	200010ac 	.word	0x200010ac
    d654:	200008bc 	.word	0x200008bc

0000d658 <_free_r>:
    d658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d65a:	0004      	movs	r4, r0
    d65c:	1e0d      	subs	r5, r1, #0
    d65e:	d03c      	beq.n	d6da <_free_r+0x82>
    d660:	f000 fe5c 	bl	e31c <__malloc_lock>
    d664:	0029      	movs	r1, r5
    d666:	3908      	subs	r1, #8
    d668:	6848      	ldr	r0, [r1, #4]
    d66a:	2301      	movs	r3, #1
    d66c:	0005      	movs	r5, r0
    d66e:	2603      	movs	r6, #3
    d670:	439d      	bics	r5, r3
    d672:	194a      	adds	r2, r1, r5
    d674:	469c      	mov	ip, r3
    d676:	4f61      	ldr	r7, [pc, #388]	; (d7fc <_free_r+0x1a4>)
    d678:	6853      	ldr	r3, [r2, #4]
    d67a:	43b3      	bics	r3, r6
    d67c:	68be      	ldr	r6, [r7, #8]
    d67e:	42b2      	cmp	r2, r6
    d680:	d056      	beq.n	d730 <_free_r+0xd8>
    d682:	4666      	mov	r6, ip
    d684:	6053      	str	r3, [r2, #4]
    d686:	4206      	tst	r6, r0
    d688:	d10a      	bne.n	d6a0 <_free_r+0x48>
    d68a:	003e      	movs	r6, r7
    d68c:	6808      	ldr	r0, [r1, #0]
    d68e:	3608      	adds	r6, #8
    d690:	1a09      	subs	r1, r1, r0
    d692:	182d      	adds	r5, r5, r0
    d694:	6888      	ldr	r0, [r1, #8]
    d696:	42b0      	cmp	r0, r6
    d698:	d065      	beq.n	d766 <_free_r+0x10e>
    d69a:	68ce      	ldr	r6, [r1, #12]
    d69c:	60c6      	str	r6, [r0, #12]
    d69e:	60b0      	str	r0, [r6, #8]
    d6a0:	2001      	movs	r0, #1
    d6a2:	18d6      	adds	r6, r2, r3
    d6a4:	6876      	ldr	r6, [r6, #4]
    d6a6:	4206      	tst	r6, r0
    d6a8:	d033      	beq.n	d712 <_free_r+0xba>
    d6aa:	4b55      	ldr	r3, [pc, #340]	; (d800 <_free_r+0x1a8>)
    d6ac:	4328      	orrs	r0, r5
    d6ae:	6048      	str	r0, [r1, #4]
    d6b0:	514d      	str	r5, [r1, r5]
    d6b2:	429d      	cmp	r5, r3
    d6b4:	d812      	bhi.n	d6dc <_free_r+0x84>
    d6b6:	08ed      	lsrs	r5, r5, #3
    d6b8:	3bff      	subs	r3, #255	; 0xff
    d6ba:	10aa      	asrs	r2, r5, #2
    d6bc:	3bff      	subs	r3, #255	; 0xff
    d6be:	4093      	lsls	r3, r2
    d6c0:	687a      	ldr	r2, [r7, #4]
    d6c2:	00ed      	lsls	r5, r5, #3
    d6c4:	4313      	orrs	r3, r2
    d6c6:	607b      	str	r3, [r7, #4]
    d6c8:	19ef      	adds	r7, r5, r7
    d6ca:	68bb      	ldr	r3, [r7, #8]
    d6cc:	60cf      	str	r7, [r1, #12]
    d6ce:	608b      	str	r3, [r1, #8]
    d6d0:	60b9      	str	r1, [r7, #8]
    d6d2:	60d9      	str	r1, [r3, #12]
    d6d4:	0020      	movs	r0, r4
    d6d6:	f000 fe29 	bl	e32c <__malloc_unlock>
    d6da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d6dc:	0a68      	lsrs	r0, r5, #9
    d6de:	2804      	cmp	r0, #4
    d6e0:	d850      	bhi.n	d784 <_free_r+0x12c>
    d6e2:	09a8      	lsrs	r0, r5, #6
    d6e4:	0002      	movs	r2, r0
    d6e6:	3039      	adds	r0, #57	; 0x39
    d6e8:	3238      	adds	r2, #56	; 0x38
    d6ea:	00c0      	lsls	r0, r0, #3
    d6ec:	1838      	adds	r0, r7, r0
    d6ee:	3808      	subs	r0, #8
    d6f0:	6883      	ldr	r3, [r0, #8]
    d6f2:	2603      	movs	r6, #3
    d6f4:	4298      	cmp	r0, r3
    d6f6:	d04c      	beq.n	d792 <_free_r+0x13a>
    d6f8:	685a      	ldr	r2, [r3, #4]
    d6fa:	43b2      	bics	r2, r6
    d6fc:	4295      	cmp	r5, r2
    d6fe:	d230      	bcs.n	d762 <_free_r+0x10a>
    d700:	689b      	ldr	r3, [r3, #8]
    d702:	4298      	cmp	r0, r3
    d704:	d1f8      	bne.n	d6f8 <_free_r+0xa0>
    d706:	68c3      	ldr	r3, [r0, #12]
    d708:	60cb      	str	r3, [r1, #12]
    d70a:	6088      	str	r0, [r1, #8]
    d70c:	6099      	str	r1, [r3, #8]
    d70e:	60c1      	str	r1, [r0, #12]
    d710:	e7e0      	b.n	d6d4 <_free_r+0x7c>
    d712:	18ed      	adds	r5, r5, r3
    d714:	4e3b      	ldr	r6, [pc, #236]	; (d804 <_free_r+0x1ac>)
    d716:	6893      	ldr	r3, [r2, #8]
    d718:	42b3      	cmp	r3, r6
    d71a:	d042      	beq.n	d7a2 <_free_r+0x14a>
    d71c:	68d2      	ldr	r2, [r2, #12]
    d71e:	4328      	orrs	r0, r5
    d720:	60da      	str	r2, [r3, #12]
    d722:	6093      	str	r3, [r2, #8]
    d724:	4b36      	ldr	r3, [pc, #216]	; (d800 <_free_r+0x1a8>)
    d726:	6048      	str	r0, [r1, #4]
    d728:	514d      	str	r5, [r1, r5]
    d72a:	429d      	cmp	r5, r3
    d72c:	d8d6      	bhi.n	d6dc <_free_r+0x84>
    d72e:	e7c2      	b.n	d6b6 <_free_r+0x5e>
    d730:	4662      	mov	r2, ip
    d732:	18eb      	adds	r3, r5, r3
    d734:	4202      	tst	r2, r0
    d736:	d106      	bne.n	d746 <_free_r+0xee>
    d738:	680a      	ldr	r2, [r1, #0]
    d73a:	1a89      	subs	r1, r1, r2
    d73c:	6888      	ldr	r0, [r1, #8]
    d73e:	189b      	adds	r3, r3, r2
    d740:	68ca      	ldr	r2, [r1, #12]
    d742:	60c2      	str	r2, [r0, #12]
    d744:	6090      	str	r0, [r2, #8]
    d746:	2201      	movs	r2, #1
    d748:	431a      	orrs	r2, r3
    d74a:	604a      	str	r2, [r1, #4]
    d74c:	4a2e      	ldr	r2, [pc, #184]	; (d808 <_free_r+0x1b0>)
    d74e:	60b9      	str	r1, [r7, #8]
    d750:	6812      	ldr	r2, [r2, #0]
    d752:	4293      	cmp	r3, r2
    d754:	d3be      	bcc.n	d6d4 <_free_r+0x7c>
    d756:	4b2d      	ldr	r3, [pc, #180]	; (d80c <_free_r+0x1b4>)
    d758:	0020      	movs	r0, r4
    d75a:	6819      	ldr	r1, [r3, #0]
    d75c:	f7ff ff2c 	bl	d5b8 <_malloc_trim_r>
    d760:	e7b8      	b.n	d6d4 <_free_r+0x7c>
    d762:	0018      	movs	r0, r3
    d764:	e7cf      	b.n	d706 <_free_r+0xae>
    d766:	4666      	mov	r6, ip
    d768:	18d0      	adds	r0, r2, r3
    d76a:	6840      	ldr	r0, [r0, #4]
    d76c:	4230      	tst	r0, r6
    d76e:	d13f      	bne.n	d7f0 <_free_r+0x198>
    d770:	6890      	ldr	r0, [r2, #8]
    d772:	195d      	adds	r5, r3, r5
    d774:	68d3      	ldr	r3, [r2, #12]
    d776:	60c3      	str	r3, [r0, #12]
    d778:	6098      	str	r0, [r3, #8]
    d77a:	4663      	mov	r3, ip
    d77c:	432b      	orrs	r3, r5
    d77e:	604b      	str	r3, [r1, #4]
    d780:	514d      	str	r5, [r1, r5]
    d782:	e7a7      	b.n	d6d4 <_free_r+0x7c>
    d784:	2814      	cmp	r0, #20
    d786:	d814      	bhi.n	d7b2 <_free_r+0x15a>
    d788:	0002      	movs	r2, r0
    d78a:	305c      	adds	r0, #92	; 0x5c
    d78c:	325b      	adds	r2, #91	; 0x5b
    d78e:	00c0      	lsls	r0, r0, #3
    d790:	e7ac      	b.n	d6ec <_free_r+0x94>
    d792:	2301      	movs	r3, #1
    d794:	1092      	asrs	r2, r2, #2
    d796:	4093      	lsls	r3, r2
    d798:	687a      	ldr	r2, [r7, #4]
    d79a:	4313      	orrs	r3, r2
    d79c:	607b      	str	r3, [r7, #4]
    d79e:	0003      	movs	r3, r0
    d7a0:	e7b2      	b.n	d708 <_free_r+0xb0>
    d7a2:	4328      	orrs	r0, r5
    d7a4:	60d9      	str	r1, [r3, #12]
    d7a6:	6099      	str	r1, [r3, #8]
    d7a8:	60cb      	str	r3, [r1, #12]
    d7aa:	608b      	str	r3, [r1, #8]
    d7ac:	6048      	str	r0, [r1, #4]
    d7ae:	514d      	str	r5, [r1, r5]
    d7b0:	e790      	b.n	d6d4 <_free_r+0x7c>
    d7b2:	2854      	cmp	r0, #84	; 0x54
    d7b4:	d805      	bhi.n	d7c2 <_free_r+0x16a>
    d7b6:	0b28      	lsrs	r0, r5, #12
    d7b8:	0002      	movs	r2, r0
    d7ba:	306f      	adds	r0, #111	; 0x6f
    d7bc:	326e      	adds	r2, #110	; 0x6e
    d7be:	00c0      	lsls	r0, r0, #3
    d7c0:	e794      	b.n	d6ec <_free_r+0x94>
    d7c2:	22aa      	movs	r2, #170	; 0xaa
    d7c4:	0052      	lsls	r2, r2, #1
    d7c6:	4290      	cmp	r0, r2
    d7c8:	d805      	bhi.n	d7d6 <_free_r+0x17e>
    d7ca:	0be8      	lsrs	r0, r5, #15
    d7cc:	0002      	movs	r2, r0
    d7ce:	3078      	adds	r0, #120	; 0x78
    d7d0:	3277      	adds	r2, #119	; 0x77
    d7d2:	00c0      	lsls	r0, r0, #3
    d7d4:	e78a      	b.n	d6ec <_free_r+0x94>
    d7d6:	4a0e      	ldr	r2, [pc, #56]	; (d810 <_free_r+0x1b8>)
    d7d8:	4290      	cmp	r0, r2
    d7da:	d805      	bhi.n	d7e8 <_free_r+0x190>
    d7dc:	0ca8      	lsrs	r0, r5, #18
    d7de:	0002      	movs	r2, r0
    d7e0:	307d      	adds	r0, #125	; 0x7d
    d7e2:	327c      	adds	r2, #124	; 0x7c
    d7e4:	00c0      	lsls	r0, r0, #3
    d7e6:	e781      	b.n	d6ec <_free_r+0x94>
    d7e8:	20fe      	movs	r0, #254	; 0xfe
    d7ea:	227e      	movs	r2, #126	; 0x7e
    d7ec:	0080      	lsls	r0, r0, #2
    d7ee:	e77d      	b.n	d6ec <_free_r+0x94>
    d7f0:	4663      	mov	r3, ip
    d7f2:	432b      	orrs	r3, r5
    d7f4:	604b      	str	r3, [r1, #4]
    d7f6:	6015      	str	r5, [r2, #0]
    d7f8:	e76c      	b.n	d6d4 <_free_r+0x7c>
    d7fa:	46c0      	nop			; (mov r8, r8)
    d7fc:	200004b4 	.word	0x200004b4
    d800:	000001ff 	.word	0x000001ff
    d804:	200004bc 	.word	0x200004bc
    d808:	200008c0 	.word	0x200008c0
    d80c:	200010dc 	.word	0x200010dc
    d810:	00000554 	.word	0x00000554

0000d814 <__sfvwrite_r>:
    d814:	b5f0      	push	{r4, r5, r6, r7, lr}
    d816:	464e      	mov	r6, r9
    d818:	46de      	mov	lr, fp
    d81a:	4657      	mov	r7, sl
    d81c:	4645      	mov	r5, r8
    d81e:	b5e0      	push	{r5, r6, r7, lr}
    d820:	6893      	ldr	r3, [r2, #8]
    d822:	b083      	sub	sp, #12
    d824:	9000      	str	r0, [sp, #0]
    d826:	000c      	movs	r4, r1
    d828:	0016      	movs	r6, r2
    d82a:	2b00      	cmp	r3, #0
    d82c:	d025      	beq.n	d87a <__sfvwrite_r+0x66>
    d82e:	898b      	ldrh	r3, [r1, #12]
    d830:	071a      	lsls	r2, r3, #28
    d832:	d52a      	bpl.n	d88a <__sfvwrite_r+0x76>
    d834:	690a      	ldr	r2, [r1, #16]
    d836:	2a00      	cmp	r2, #0
    d838:	d027      	beq.n	d88a <__sfvwrite_r+0x76>
    d83a:	6832      	ldr	r2, [r6, #0]
    d83c:	4693      	mov	fp, r2
    d83e:	079a      	lsls	r2, r3, #30
    d840:	d52f      	bpl.n	d8a2 <__sfvwrite_r+0x8e>
    d842:	4bb2      	ldr	r3, [pc, #712]	; (db0c <__sfvwrite_r+0x2f8>)
    d844:	2700      	movs	r7, #0
    d846:	2500      	movs	r5, #0
    d848:	4698      	mov	r8, r3
    d84a:	46b1      	mov	r9, r6
    d84c:	2d00      	cmp	r5, #0
    d84e:	d100      	bne.n	d852 <__sfvwrite_r+0x3e>
    d850:	e072      	b.n	d938 <__sfvwrite_r+0x124>
    d852:	002b      	movs	r3, r5
    d854:	4545      	cmp	r5, r8
    d856:	d900      	bls.n	d85a <__sfvwrite_r+0x46>
    d858:	4bac      	ldr	r3, [pc, #688]	; (db0c <__sfvwrite_r+0x2f8>)
    d85a:	003a      	movs	r2, r7
    d85c:	69e1      	ldr	r1, [r4, #28]
    d85e:	9800      	ldr	r0, [sp, #0]
    d860:	6a66      	ldr	r6, [r4, #36]	; 0x24
    d862:	47b0      	blx	r6
    d864:	2800      	cmp	r0, #0
    d866:	dc00      	bgt.n	d86a <__sfvwrite_r+0x56>
    d868:	e073      	b.n	d952 <__sfvwrite_r+0x13e>
    d86a:	464b      	mov	r3, r9
    d86c:	689b      	ldr	r3, [r3, #8]
    d86e:	183f      	adds	r7, r7, r0
    d870:	1a2d      	subs	r5, r5, r0
    d872:	1a18      	subs	r0, r3, r0
    d874:	464b      	mov	r3, r9
    d876:	6098      	str	r0, [r3, #8]
    d878:	d1e8      	bne.n	d84c <__sfvwrite_r+0x38>
    d87a:	2000      	movs	r0, #0
    d87c:	b003      	add	sp, #12
    d87e:	bc3c      	pop	{r2, r3, r4, r5}
    d880:	4690      	mov	r8, r2
    d882:	4699      	mov	r9, r3
    d884:	46a2      	mov	sl, r4
    d886:	46ab      	mov	fp, r5
    d888:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d88a:	0021      	movs	r1, r4
    d88c:	9800      	ldr	r0, [sp, #0]
    d88e:	f7fe fbd1 	bl	c034 <__swsetup_r>
    d892:	2800      	cmp	r0, #0
    d894:	d000      	beq.n	d898 <__sfvwrite_r+0x84>
    d896:	e130      	b.n	dafa <__sfvwrite_r+0x2e6>
    d898:	6832      	ldr	r2, [r6, #0]
    d89a:	89a3      	ldrh	r3, [r4, #12]
    d89c:	4693      	mov	fp, r2
    d89e:	079a      	lsls	r2, r3, #30
    d8a0:	d4cf      	bmi.n	d842 <__sfvwrite_r+0x2e>
    d8a2:	07da      	lsls	r2, r3, #31
    d8a4:	d55d      	bpl.n	d962 <__sfvwrite_r+0x14e>
    d8a6:	2300      	movs	r3, #0
    d8a8:	2000      	movs	r0, #0
    d8aa:	469a      	mov	sl, r3
    d8ac:	2700      	movs	r7, #0
    d8ae:	001d      	movs	r5, r3
    d8b0:	46b1      	mov	r9, r6
    d8b2:	e029      	b.n	d908 <__sfvwrite_r+0xf4>
    d8b4:	2800      	cmp	r0, #0
    d8b6:	d033      	beq.n	d920 <__sfvwrite_r+0x10c>
    d8b8:	46a8      	mov	r8, r5
    d8ba:	42bd      	cmp	r5, r7
    d8bc:	d900      	bls.n	d8c0 <__sfvwrite_r+0xac>
    d8be:	46b8      	mov	r8, r7
    d8c0:	6820      	ldr	r0, [r4, #0]
    d8c2:	6922      	ldr	r2, [r4, #16]
    d8c4:	4646      	mov	r6, r8
    d8c6:	6963      	ldr	r3, [r4, #20]
    d8c8:	4290      	cmp	r0, r2
    d8ca:	d907      	bls.n	d8dc <__sfvwrite_r+0xc8>
    d8cc:	68a2      	ldr	r2, [r4, #8]
    d8ce:	4694      	mov	ip, r2
    d8d0:	449c      	add	ip, r3
    d8d2:	4662      	mov	r2, ip
    d8d4:	9201      	str	r2, [sp, #4]
    d8d6:	45e0      	cmp	r8, ip
    d8d8:	dd00      	ble.n	d8dc <__sfvwrite_r+0xc8>
    d8da:	e0e9      	b.n	dab0 <__sfvwrite_r+0x29c>
    d8dc:	4598      	cmp	r8, r3
    d8de:	da00      	bge.n	d8e2 <__sfvwrite_r+0xce>
    d8e0:	e08f      	b.n	da02 <__sfvwrite_r+0x1ee>
    d8e2:	6a66      	ldr	r6, [r4, #36]	; 0x24
    d8e4:	4652      	mov	r2, sl
    d8e6:	69e1      	ldr	r1, [r4, #28]
    d8e8:	9800      	ldr	r0, [sp, #0]
    d8ea:	47b0      	blx	r6
    d8ec:	1e06      	subs	r6, r0, #0
    d8ee:	dd30      	ble.n	d952 <__sfvwrite_r+0x13e>
    d8f0:	1bad      	subs	r5, r5, r6
    d8f2:	2001      	movs	r0, #1
    d8f4:	2d00      	cmp	r5, #0
    d8f6:	d026      	beq.n	d946 <__sfvwrite_r+0x132>
    d8f8:	464b      	mov	r3, r9
    d8fa:	689b      	ldr	r3, [r3, #8]
    d8fc:	44b2      	add	sl, r6
    d8fe:	1bbf      	subs	r7, r7, r6
    d900:	1b9e      	subs	r6, r3, r6
    d902:	464b      	mov	r3, r9
    d904:	609e      	str	r6, [r3, #8]
    d906:	d0b8      	beq.n	d87a <__sfvwrite_r+0x66>
    d908:	2f00      	cmp	r7, #0
    d90a:	d1d3      	bne.n	d8b4 <__sfvwrite_r+0xa0>
    d90c:	465b      	mov	r3, fp
    d90e:	681b      	ldr	r3, [r3, #0]
    d910:	469a      	mov	sl, r3
    d912:	465b      	mov	r3, fp
    d914:	685f      	ldr	r7, [r3, #4]
    d916:	2308      	movs	r3, #8
    d918:	469c      	mov	ip, r3
    d91a:	44e3      	add	fp, ip
    d91c:	2f00      	cmp	r7, #0
    d91e:	d0f5      	beq.n	d90c <__sfvwrite_r+0xf8>
    d920:	003a      	movs	r2, r7
    d922:	210a      	movs	r1, #10
    d924:	4650      	mov	r0, sl
    d926:	f000 fc69 	bl	e1fc <memchr>
    d92a:	2800      	cmp	r0, #0
    d92c:	d100      	bne.n	d930 <__sfvwrite_r+0x11c>
    d92e:	e0e2      	b.n	daf6 <__sfvwrite_r+0x2e2>
    d930:	4653      	mov	r3, sl
    d932:	3001      	adds	r0, #1
    d934:	1ac5      	subs	r5, r0, r3
    d936:	e7bf      	b.n	d8b8 <__sfvwrite_r+0xa4>
    d938:	465b      	mov	r3, fp
    d93a:	681f      	ldr	r7, [r3, #0]
    d93c:	685d      	ldr	r5, [r3, #4]
    d93e:	2308      	movs	r3, #8
    d940:	469c      	mov	ip, r3
    d942:	44e3      	add	fp, ip
    d944:	e782      	b.n	d84c <__sfvwrite_r+0x38>
    d946:	0021      	movs	r1, r4
    d948:	9800      	ldr	r0, [sp, #0]
    d94a:	f7ff fd81 	bl	d450 <_fflush_r>
    d94e:	2800      	cmp	r0, #0
    d950:	d0d2      	beq.n	d8f8 <__sfvwrite_r+0xe4>
    d952:	220c      	movs	r2, #12
    d954:	5ea3      	ldrsh	r3, [r4, r2]
    d956:	2240      	movs	r2, #64	; 0x40
    d958:	2001      	movs	r0, #1
    d95a:	4313      	orrs	r3, r2
    d95c:	81a3      	strh	r3, [r4, #12]
    d95e:	4240      	negs	r0, r0
    d960:	e78c      	b.n	d87c <__sfvwrite_r+0x68>
    d962:	2200      	movs	r2, #0
    d964:	4691      	mov	r9, r2
    d966:	464d      	mov	r5, r9
    d968:	2d00      	cmp	r5, #0
    d96a:	d023      	beq.n	d9b4 <__sfvwrite_r+0x1a0>
    d96c:	68a2      	ldr	r2, [r4, #8]
    d96e:	4690      	mov	r8, r2
    d970:	2280      	movs	r2, #128	; 0x80
    d972:	0092      	lsls	r2, r2, #2
    d974:	4213      	tst	r3, r2
    d976:	d026      	beq.n	d9c6 <__sfvwrite_r+0x1b2>
    d978:	46c2      	mov	sl, r8
    d97a:	4545      	cmp	r5, r8
    d97c:	d34d      	bcc.n	da1a <__sfvwrite_r+0x206>
    d97e:	2290      	movs	r2, #144	; 0x90
    d980:	00d2      	lsls	r2, r2, #3
    d982:	4213      	tst	r3, r2
    d984:	d14e      	bne.n	da24 <__sfvwrite_r+0x210>
    d986:	002f      	movs	r7, r5
    d988:	6820      	ldr	r0, [r4, #0]
    d98a:	4652      	mov	r2, sl
    d98c:	4649      	mov	r1, r9
    d98e:	f000 fc75 	bl	e27c <memmove>
    d992:	4642      	mov	r2, r8
    d994:	68a3      	ldr	r3, [r4, #8]
    d996:	1a98      	subs	r0, r3, r2
    d998:	6823      	ldr	r3, [r4, #0]
    d99a:	60a0      	str	r0, [r4, #8]
    d99c:	4453      	add	r3, sl
    d99e:	6023      	str	r3, [r4, #0]
    d9a0:	68b3      	ldr	r3, [r6, #8]
    d9a2:	44b9      	add	r9, r7
    d9a4:	1bed      	subs	r5, r5, r7
    d9a6:	1bdf      	subs	r7, r3, r7
    d9a8:	60b7      	str	r7, [r6, #8]
    d9aa:	d100      	bne.n	d9ae <__sfvwrite_r+0x19a>
    d9ac:	e765      	b.n	d87a <__sfvwrite_r+0x66>
    d9ae:	89a3      	ldrh	r3, [r4, #12]
    d9b0:	2d00      	cmp	r5, #0
    d9b2:	d1db      	bne.n	d96c <__sfvwrite_r+0x158>
    d9b4:	465a      	mov	r2, fp
    d9b6:	6812      	ldr	r2, [r2, #0]
    d9b8:	4691      	mov	r9, r2
    d9ba:	465a      	mov	r2, fp
    d9bc:	6855      	ldr	r5, [r2, #4]
    d9be:	2208      	movs	r2, #8
    d9c0:	4694      	mov	ip, r2
    d9c2:	44e3      	add	fp, ip
    d9c4:	e7d0      	b.n	d968 <__sfvwrite_r+0x154>
    d9c6:	6820      	ldr	r0, [r4, #0]
    d9c8:	6923      	ldr	r3, [r4, #16]
    d9ca:	4298      	cmp	r0, r3
    d9cc:	d802      	bhi.n	d9d4 <__sfvwrite_r+0x1c0>
    d9ce:	6967      	ldr	r7, [r4, #20]
    d9d0:	42bd      	cmp	r5, r7
    d9d2:	d259      	bcs.n	da88 <__sfvwrite_r+0x274>
    d9d4:	4647      	mov	r7, r8
    d9d6:	42af      	cmp	r7, r5
    d9d8:	d900      	bls.n	d9dc <__sfvwrite_r+0x1c8>
    d9da:	002f      	movs	r7, r5
    d9dc:	003a      	movs	r2, r7
    d9de:	4649      	mov	r1, r9
    d9e0:	f000 fc4c 	bl	e27c <memmove>
    d9e4:	68a3      	ldr	r3, [r4, #8]
    d9e6:	6822      	ldr	r2, [r4, #0]
    d9e8:	1bdb      	subs	r3, r3, r7
    d9ea:	19d2      	adds	r2, r2, r7
    d9ec:	60a3      	str	r3, [r4, #8]
    d9ee:	6022      	str	r2, [r4, #0]
    d9f0:	2b00      	cmp	r3, #0
    d9f2:	d1d5      	bne.n	d9a0 <__sfvwrite_r+0x18c>
    d9f4:	0021      	movs	r1, r4
    d9f6:	9800      	ldr	r0, [sp, #0]
    d9f8:	f7ff fd2a 	bl	d450 <_fflush_r>
    d9fc:	2800      	cmp	r0, #0
    d9fe:	d0cf      	beq.n	d9a0 <__sfvwrite_r+0x18c>
    da00:	e7a7      	b.n	d952 <__sfvwrite_r+0x13e>
    da02:	4642      	mov	r2, r8
    da04:	4651      	mov	r1, sl
    da06:	f000 fc39 	bl	e27c <memmove>
    da0a:	4642      	mov	r2, r8
    da0c:	68a3      	ldr	r3, [r4, #8]
    da0e:	1a9b      	subs	r3, r3, r2
    da10:	60a3      	str	r3, [r4, #8]
    da12:	6823      	ldr	r3, [r4, #0]
    da14:	4443      	add	r3, r8
    da16:	6023      	str	r3, [r4, #0]
    da18:	e76a      	b.n	d8f0 <__sfvwrite_r+0xdc>
    da1a:	46a8      	mov	r8, r5
    da1c:	6820      	ldr	r0, [r4, #0]
    da1e:	002f      	movs	r7, r5
    da20:	46aa      	mov	sl, r5
    da22:	e7b2      	b.n	d98a <__sfvwrite_r+0x176>
    da24:	6921      	ldr	r1, [r4, #16]
    da26:	6822      	ldr	r2, [r4, #0]
    da28:	1a52      	subs	r2, r2, r1
    da2a:	4692      	mov	sl, r2
    da2c:	6962      	ldr	r2, [r4, #20]
    da2e:	0057      	lsls	r7, r2, #1
    da30:	18bf      	adds	r7, r7, r2
    da32:	0ffa      	lsrs	r2, r7, #31
    da34:	19d7      	adds	r7, r2, r7
    da36:	4652      	mov	r2, sl
    da38:	1c50      	adds	r0, r2, #1
    da3a:	107f      	asrs	r7, r7, #1
    da3c:	1940      	adds	r0, r0, r5
    da3e:	003a      	movs	r2, r7
    da40:	42b8      	cmp	r0, r7
    da42:	d901      	bls.n	da48 <__sfvwrite_r+0x234>
    da44:	0007      	movs	r7, r0
    da46:	0002      	movs	r2, r0
    da48:	055b      	lsls	r3, r3, #21
    da4a:	d542      	bpl.n	dad2 <__sfvwrite_r+0x2be>
    da4c:	0011      	movs	r1, r2
    da4e:	9800      	ldr	r0, [sp, #0]
    da50:	f000 f920 	bl	dc94 <_malloc_r>
    da54:	4680      	mov	r8, r0
    da56:	1e03      	subs	r3, r0, #0
    da58:	d052      	beq.n	db00 <__sfvwrite_r+0x2ec>
    da5a:	4652      	mov	r2, sl
    da5c:	6921      	ldr	r1, [r4, #16]
    da5e:	f7fc fd8f 	bl	a580 <memcpy>
    da62:	89a3      	ldrh	r3, [r4, #12]
    da64:	4a2a      	ldr	r2, [pc, #168]	; (db10 <__sfvwrite_r+0x2fc>)
    da66:	4013      	ands	r3, r2
    da68:	2280      	movs	r2, #128	; 0x80
    da6a:	4313      	orrs	r3, r2
    da6c:	81a3      	strh	r3, [r4, #12]
    da6e:	4643      	mov	r3, r8
    da70:	4640      	mov	r0, r8
    da72:	6123      	str	r3, [r4, #16]
    da74:	4653      	mov	r3, sl
    da76:	4450      	add	r0, sl
    da78:	6167      	str	r7, [r4, #20]
    da7a:	1aff      	subs	r7, r7, r3
    da7c:	60a7      	str	r7, [r4, #8]
    da7e:	6020      	str	r0, [r4, #0]
    da80:	46a8      	mov	r8, r5
    da82:	002f      	movs	r7, r5
    da84:	46aa      	mov	sl, r5
    da86:	e780      	b.n	d98a <__sfvwrite_r+0x176>
    da88:	4b22      	ldr	r3, [pc, #136]	; (db14 <__sfvwrite_r+0x300>)
    da8a:	0028      	movs	r0, r5
    da8c:	429d      	cmp	r5, r3
    da8e:	d900      	bls.n	da92 <__sfvwrite_r+0x27e>
    da90:	0018      	movs	r0, r3
    da92:	0039      	movs	r1, r7
    da94:	f001 fc40 	bl	f318 <__divsi3>
    da98:	003b      	movs	r3, r7
    da9a:	464a      	mov	r2, r9
    da9c:	4343      	muls	r3, r0
    da9e:	69e1      	ldr	r1, [r4, #28]
    daa0:	9800      	ldr	r0, [sp, #0]
    daa2:	6a67      	ldr	r7, [r4, #36]	; 0x24
    daa4:	47b8      	blx	r7
    daa6:	2800      	cmp	r0, #0
    daa8:	dc00      	bgt.n	daac <__sfvwrite_r+0x298>
    daaa:	e752      	b.n	d952 <__sfvwrite_r+0x13e>
    daac:	0007      	movs	r7, r0
    daae:	e777      	b.n	d9a0 <__sfvwrite_r+0x18c>
    dab0:	4666      	mov	r6, ip
    dab2:	4651      	mov	r1, sl
    dab4:	f000 fbe2 	bl	e27c <memmove>
    dab8:	46b4      	mov	ip, r6
    daba:	6823      	ldr	r3, [r4, #0]
    dabc:	0021      	movs	r1, r4
    dabe:	4463      	add	r3, ip
    dac0:	6023      	str	r3, [r4, #0]
    dac2:	9800      	ldr	r0, [sp, #0]
    dac4:	f7ff fcc4 	bl	d450 <_fflush_r>
    dac8:	2800      	cmp	r0, #0
    daca:	d000      	beq.n	dace <__sfvwrite_r+0x2ba>
    dacc:	e741      	b.n	d952 <__sfvwrite_r+0x13e>
    dace:	9e01      	ldr	r6, [sp, #4]
    dad0:	e70e      	b.n	d8f0 <__sfvwrite_r+0xdc>
    dad2:	9800      	ldr	r0, [sp, #0]
    dad4:	f000 ff7a 	bl	e9cc <_realloc_r>
    dad8:	4680      	mov	r8, r0
    dada:	2800      	cmp	r0, #0
    dadc:	d1c7      	bne.n	da6e <__sfvwrite_r+0x25a>
    dade:	9d00      	ldr	r5, [sp, #0]
    dae0:	6921      	ldr	r1, [r4, #16]
    dae2:	0028      	movs	r0, r5
    dae4:	f7ff fdb8 	bl	d658 <_free_r>
    dae8:	2280      	movs	r2, #128	; 0x80
    daea:	89a3      	ldrh	r3, [r4, #12]
    daec:	4393      	bics	r3, r2
    daee:	3a74      	subs	r2, #116	; 0x74
    daf0:	b21b      	sxth	r3, r3
    daf2:	602a      	str	r2, [r5, #0]
    daf4:	e72f      	b.n	d956 <__sfvwrite_r+0x142>
    daf6:	1c7d      	adds	r5, r7, #1
    daf8:	e6de      	b.n	d8b8 <__sfvwrite_r+0xa4>
    dafa:	2001      	movs	r0, #1
    dafc:	4240      	negs	r0, r0
    dafe:	e6bd      	b.n	d87c <__sfvwrite_r+0x68>
    db00:	9a00      	ldr	r2, [sp, #0]
    db02:	330c      	adds	r3, #12
    db04:	6013      	str	r3, [r2, #0]
    db06:	220c      	movs	r2, #12
    db08:	5ea3      	ldrsh	r3, [r4, r2]
    db0a:	e724      	b.n	d956 <__sfvwrite_r+0x142>
    db0c:	7ffffc00 	.word	0x7ffffc00
    db10:	fffffb7f 	.word	0xfffffb7f
    db14:	7fffffff 	.word	0x7fffffff

0000db18 <_fwalk_reent>:
    db18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    db1a:	4647      	mov	r7, r8
    db1c:	46ce      	mov	lr, r9
    db1e:	b580      	push	{r7, lr}
    db20:	27b8      	movs	r7, #184	; 0xb8
    db22:	4680      	mov	r8, r0
    db24:	00bf      	lsls	r7, r7, #2
    db26:	4447      	add	r7, r8
    db28:	4689      	mov	r9, r1
    db2a:	2600      	movs	r6, #0
    db2c:	2f00      	cmp	r7, #0
    db2e:	d014      	beq.n	db5a <_fwalk_reent+0x42>
    db30:	687b      	ldr	r3, [r7, #4]
    db32:	68bc      	ldr	r4, [r7, #8]
    db34:	1e5d      	subs	r5, r3, #1
    db36:	d40d      	bmi.n	db54 <_fwalk_reent+0x3c>
    db38:	89a3      	ldrh	r3, [r4, #12]
    db3a:	2b01      	cmp	r3, #1
    db3c:	d907      	bls.n	db4e <_fwalk_reent+0x36>
    db3e:	220e      	movs	r2, #14
    db40:	5ea3      	ldrsh	r3, [r4, r2]
    db42:	3301      	adds	r3, #1
    db44:	d003      	beq.n	db4e <_fwalk_reent+0x36>
    db46:	0021      	movs	r1, r4
    db48:	4640      	mov	r0, r8
    db4a:	47c8      	blx	r9
    db4c:	4306      	orrs	r6, r0
    db4e:	3468      	adds	r4, #104	; 0x68
    db50:	3d01      	subs	r5, #1
    db52:	d2f1      	bcs.n	db38 <_fwalk_reent+0x20>
    db54:	683f      	ldr	r7, [r7, #0]
    db56:	2f00      	cmp	r7, #0
    db58:	d1ea      	bne.n	db30 <_fwalk_reent+0x18>
    db5a:	0030      	movs	r0, r6
    db5c:	bc0c      	pop	{r2, r3}
    db5e:	4690      	mov	r8, r2
    db60:	4699      	mov	r9, r3
    db62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000db64 <_localeconv_r>:
    db64:	4b04      	ldr	r3, [pc, #16]	; (db78 <_localeconv_r+0x14>)
    db66:	681b      	ldr	r3, [r3, #0]
    db68:	6b58      	ldr	r0, [r3, #52]	; 0x34
    db6a:	2800      	cmp	r0, #0
    db6c:	d001      	beq.n	db72 <_localeconv_r+0xe>
    db6e:	30f0      	adds	r0, #240	; 0xf0
    db70:	4770      	bx	lr
    db72:	4802      	ldr	r0, [pc, #8]	; (db7c <_localeconv_r+0x18>)
    db74:	e7fb      	b.n	db6e <_localeconv_r+0xa>
    db76:	46c0      	nop			; (mov r8, r8)
    db78:	20000084 	.word	0x20000084
    db7c:	200008c4 	.word	0x200008c4

0000db80 <__retarget_lock_init_recursive>:
    db80:	4770      	bx	lr
    db82:	46c0      	nop			; (mov r8, r8)

0000db84 <__retarget_lock_close_recursive>:
    db84:	4770      	bx	lr
    db86:	46c0      	nop			; (mov r8, r8)

0000db88 <__retarget_lock_acquire_recursive>:
    db88:	4770      	bx	lr
    db8a:	46c0      	nop			; (mov r8, r8)

0000db8c <__retarget_lock_release_recursive>:
    db8c:	4770      	bx	lr
    db8e:	46c0      	nop			; (mov r8, r8)

0000db90 <__swhatbuf_r>:
    db90:	b570      	push	{r4, r5, r6, lr}
    db92:	000c      	movs	r4, r1
    db94:	001e      	movs	r6, r3
    db96:	230e      	movs	r3, #14
    db98:	5ec9      	ldrsh	r1, [r1, r3]
    db9a:	b090      	sub	sp, #64	; 0x40
    db9c:	0015      	movs	r5, r2
    db9e:	2900      	cmp	r1, #0
    dba0:	db15      	blt.n	dbce <__swhatbuf_r+0x3e>
    dba2:	aa01      	add	r2, sp, #4
    dba4:	f001 faae 	bl	f104 <_fstat_r>
    dba8:	2800      	cmp	r0, #0
    dbaa:	db10      	blt.n	dbce <__swhatbuf_r+0x3e>
    dbac:	22f0      	movs	r2, #240	; 0xf0
    dbae:	9b02      	ldr	r3, [sp, #8]
    dbb0:	0212      	lsls	r2, r2, #8
    dbb2:	4013      	ands	r3, r2
    dbb4:	4a0d      	ldr	r2, [pc, #52]	; (dbec <__swhatbuf_r+0x5c>)
    dbb6:	2080      	movs	r0, #128	; 0x80
    dbb8:	4694      	mov	ip, r2
    dbba:	4463      	add	r3, ip
    dbbc:	425a      	negs	r2, r3
    dbbe:	4153      	adcs	r3, r2
    dbc0:	6033      	str	r3, [r6, #0]
    dbc2:	2380      	movs	r3, #128	; 0x80
    dbc4:	00db      	lsls	r3, r3, #3
    dbc6:	602b      	str	r3, [r5, #0]
    dbc8:	0100      	lsls	r0, r0, #4
    dbca:	b010      	add	sp, #64	; 0x40
    dbcc:	bd70      	pop	{r4, r5, r6, pc}
    dbce:	2300      	movs	r3, #0
    dbd0:	6033      	str	r3, [r6, #0]
    dbd2:	89a3      	ldrh	r3, [r4, #12]
    dbd4:	061b      	lsls	r3, r3, #24
    dbd6:	d503      	bpl.n	dbe0 <__swhatbuf_r+0x50>
    dbd8:	2340      	movs	r3, #64	; 0x40
    dbda:	2000      	movs	r0, #0
    dbdc:	602b      	str	r3, [r5, #0]
    dbde:	e7f4      	b.n	dbca <__swhatbuf_r+0x3a>
    dbe0:	2380      	movs	r3, #128	; 0x80
    dbe2:	00db      	lsls	r3, r3, #3
    dbe4:	602b      	str	r3, [r5, #0]
    dbe6:	2000      	movs	r0, #0
    dbe8:	e7ef      	b.n	dbca <__swhatbuf_r+0x3a>
    dbea:	46c0      	nop			; (mov r8, r8)
    dbec:	ffffe000 	.word	0xffffe000

0000dbf0 <__smakebuf_r>:
    dbf0:	b570      	push	{r4, r5, r6, lr}
    dbf2:	898b      	ldrh	r3, [r1, #12]
    dbf4:	b082      	sub	sp, #8
    dbf6:	0006      	movs	r6, r0
    dbf8:	000c      	movs	r4, r1
    dbfa:	079b      	lsls	r3, r3, #30
    dbfc:	d507      	bpl.n	dc0e <__smakebuf_r+0x1e>
    dbfe:	0023      	movs	r3, r4
    dc00:	3343      	adds	r3, #67	; 0x43
    dc02:	6023      	str	r3, [r4, #0]
    dc04:	6123      	str	r3, [r4, #16]
    dc06:	2301      	movs	r3, #1
    dc08:	6163      	str	r3, [r4, #20]
    dc0a:	b002      	add	sp, #8
    dc0c:	bd70      	pop	{r4, r5, r6, pc}
    dc0e:	ab01      	add	r3, sp, #4
    dc10:	466a      	mov	r2, sp
    dc12:	f7ff ffbd 	bl	db90 <__swhatbuf_r>
    dc16:	9900      	ldr	r1, [sp, #0]
    dc18:	0005      	movs	r5, r0
    dc1a:	0030      	movs	r0, r6
    dc1c:	f000 f83a 	bl	dc94 <_malloc_r>
    dc20:	2800      	cmp	r0, #0
    dc22:	d01e      	beq.n	dc62 <__smakebuf_r+0x72>
    dc24:	2280      	movs	r2, #128	; 0x80
    dc26:	4b15      	ldr	r3, [pc, #84]	; (dc7c <__smakebuf_r+0x8c>)
    dc28:	63f3      	str	r3, [r6, #60]	; 0x3c
    dc2a:	89a3      	ldrh	r3, [r4, #12]
    dc2c:	6020      	str	r0, [r4, #0]
    dc2e:	4313      	orrs	r3, r2
    dc30:	9a00      	ldr	r2, [sp, #0]
    dc32:	b21b      	sxth	r3, r3
    dc34:	6162      	str	r2, [r4, #20]
    dc36:	9a01      	ldr	r2, [sp, #4]
    dc38:	81a3      	strh	r3, [r4, #12]
    dc3a:	6120      	str	r0, [r4, #16]
    dc3c:	2a00      	cmp	r2, #0
    dc3e:	d102      	bne.n	dc46 <__smakebuf_r+0x56>
    dc40:	432b      	orrs	r3, r5
    dc42:	81a3      	strh	r3, [r4, #12]
    dc44:	e7e1      	b.n	dc0a <__smakebuf_r+0x1a>
    dc46:	230e      	movs	r3, #14
    dc48:	5ee1      	ldrsh	r1, [r4, r3]
    dc4a:	0030      	movs	r0, r6
    dc4c:	f001 fa6e 	bl	f12c <_isatty_r>
    dc50:	2800      	cmp	r0, #0
    dc52:	d010      	beq.n	dc76 <__smakebuf_r+0x86>
    dc54:	2203      	movs	r2, #3
    dc56:	89a3      	ldrh	r3, [r4, #12]
    dc58:	4393      	bics	r3, r2
    dc5a:	2201      	movs	r2, #1
    dc5c:	4313      	orrs	r3, r2
    dc5e:	b21b      	sxth	r3, r3
    dc60:	e7ee      	b.n	dc40 <__smakebuf_r+0x50>
    dc62:	220c      	movs	r2, #12
    dc64:	5ea3      	ldrsh	r3, [r4, r2]
    dc66:	059a      	lsls	r2, r3, #22
    dc68:	d4cf      	bmi.n	dc0a <__smakebuf_r+0x1a>
    dc6a:	2203      	movs	r2, #3
    dc6c:	4393      	bics	r3, r2
    dc6e:	2202      	movs	r2, #2
    dc70:	4313      	orrs	r3, r2
    dc72:	81a3      	strh	r3, [r4, #12]
    dc74:	e7c3      	b.n	dbfe <__smakebuf_r+0xe>
    dc76:	220c      	movs	r2, #12
    dc78:	5ea3      	ldrsh	r3, [r4, r2]
    dc7a:	e7e1      	b.n	dc40 <__smakebuf_r+0x50>
    dc7c:	0000d4a5 	.word	0x0000d4a5

0000dc80 <malloc>:
    dc80:	b510      	push	{r4, lr}
    dc82:	4b03      	ldr	r3, [pc, #12]	; (dc90 <malloc+0x10>)
    dc84:	0001      	movs	r1, r0
    dc86:	6818      	ldr	r0, [r3, #0]
    dc88:	f000 f804 	bl	dc94 <_malloc_r>
    dc8c:	bd10      	pop	{r4, pc}
    dc8e:	46c0      	nop			; (mov r8, r8)
    dc90:	20000084 	.word	0x20000084

0000dc94 <_malloc_r>:
    dc94:	b5f0      	push	{r4, r5, r6, r7, lr}
    dc96:	4657      	mov	r7, sl
    dc98:	4645      	mov	r5, r8
    dc9a:	46de      	mov	lr, fp
    dc9c:	464e      	mov	r6, r9
    dc9e:	b5e0      	push	{r5, r6, r7, lr}
    dca0:	000d      	movs	r5, r1
    dca2:	350b      	adds	r5, #11
    dca4:	b083      	sub	sp, #12
    dca6:	0007      	movs	r7, r0
    dca8:	2d16      	cmp	r5, #22
    dcaa:	d800      	bhi.n	dcae <_malloc_r+0x1a>
    dcac:	e09f      	b.n	ddee <_malloc_r+0x15a>
    dcae:	2307      	movs	r3, #7
    dcb0:	439d      	bics	r5, r3
    dcb2:	d500      	bpl.n	dcb6 <_malloc_r+0x22>
    dcb4:	e0c4      	b.n	de40 <_malloc_r+0x1ac>
    dcb6:	42a9      	cmp	r1, r5
    dcb8:	d900      	bls.n	dcbc <_malloc_r+0x28>
    dcba:	e0c1      	b.n	de40 <_malloc_r+0x1ac>
    dcbc:	f000 fb2e 	bl	e31c <__malloc_lock>
    dcc0:	23f8      	movs	r3, #248	; 0xf8
    dcc2:	33ff      	adds	r3, #255	; 0xff
    dcc4:	429d      	cmp	r5, r3
    dcc6:	d800      	bhi.n	dcca <_malloc_r+0x36>
    dcc8:	e28f      	b.n	e1ea <_malloc_r+0x556>
    dcca:	0a68      	lsrs	r0, r5, #9
    dccc:	d100      	bne.n	dcd0 <_malloc_r+0x3c>
    dcce:	e0bb      	b.n	de48 <_malloc_r+0x1b4>
    dcd0:	2804      	cmp	r0, #4
    dcd2:	d900      	bls.n	dcd6 <_malloc_r+0x42>
    dcd4:	e162      	b.n	df9c <_malloc_r+0x308>
    dcd6:	2338      	movs	r3, #56	; 0x38
    dcd8:	4698      	mov	r8, r3
    dcda:	09a8      	lsrs	r0, r5, #6
    dcdc:	4480      	add	r8, r0
    dcde:	3039      	adds	r0, #57	; 0x39
    dce0:	00c1      	lsls	r1, r0, #3
    dce2:	4ed2      	ldr	r6, [pc, #840]	; (e02c <_malloc_r+0x398>)
    dce4:	1871      	adds	r1, r6, r1
    dce6:	3908      	subs	r1, #8
    dce8:	68cc      	ldr	r4, [r1, #12]
    dcea:	42a1      	cmp	r1, r4
    dcec:	d019      	beq.n	dd22 <_malloc_r+0x8e>
    dcee:	2303      	movs	r3, #3
    dcf0:	6862      	ldr	r2, [r4, #4]
    dcf2:	439a      	bics	r2, r3
    dcf4:	0013      	movs	r3, r2
    dcf6:	1b52      	subs	r2, r2, r5
    dcf8:	2a0f      	cmp	r2, #15
    dcfa:	dd00      	ble.n	dcfe <_malloc_r+0x6a>
    dcfc:	e0aa      	b.n	de54 <_malloc_r+0x1c0>
    dcfe:	2a00      	cmp	r2, #0
    dd00:	db00      	blt.n	dd04 <_malloc_r+0x70>
    dd02:	e088      	b.n	de16 <_malloc_r+0x182>
    dd04:	2303      	movs	r3, #3
    dd06:	469c      	mov	ip, r3
    dd08:	e008      	b.n	dd1c <_malloc_r+0x88>
    dd0a:	4662      	mov	r2, ip
    dd0c:	6863      	ldr	r3, [r4, #4]
    dd0e:	4393      	bics	r3, r2
    dd10:	1b5a      	subs	r2, r3, r5
    dd12:	2a0f      	cmp	r2, #15
    dd14:	dd00      	ble.n	dd18 <_malloc_r+0x84>
    dd16:	e09d      	b.n	de54 <_malloc_r+0x1c0>
    dd18:	2a00      	cmp	r2, #0
    dd1a:	da7c      	bge.n	de16 <_malloc_r+0x182>
    dd1c:	68e4      	ldr	r4, [r4, #12]
    dd1e:	42a1      	cmp	r1, r4
    dd20:	d1f3      	bne.n	dd0a <_malloc_r+0x76>
    dd22:	0032      	movs	r2, r6
    dd24:	6934      	ldr	r4, [r6, #16]
    dd26:	3208      	adds	r2, #8
    dd28:	4294      	cmp	r4, r2
    dd2a:	d100      	bne.n	dd2e <_malloc_r+0x9a>
    dd2c:	e190      	b.n	e050 <_malloc_r+0x3bc>
    dd2e:	2303      	movs	r3, #3
    dd30:	6861      	ldr	r1, [r4, #4]
    dd32:	4399      	bics	r1, r3
    dd34:	4689      	mov	r9, r1
    dd36:	1b49      	subs	r1, r1, r5
    dd38:	290f      	cmp	r1, #15
    dd3a:	dd00      	ble.n	dd3e <_malloc_r+0xaa>
    dd3c:	e162      	b.n	e004 <_malloc_r+0x370>
    dd3e:	6172      	str	r2, [r6, #20]
    dd40:	6132      	str	r2, [r6, #16]
    dd42:	2900      	cmp	r1, #0
    dd44:	db00      	blt.n	dd48 <_malloc_r+0xb4>
    dd46:	e087      	b.n	de58 <_malloc_r+0x1c4>
    dd48:	4ab9      	ldr	r2, [pc, #740]	; (e030 <_malloc_r+0x39c>)
    dd4a:	464b      	mov	r3, r9
    dd4c:	4591      	cmp	r9, r2
    dd4e:	d900      	bls.n	dd52 <_malloc_r+0xbe>
    dd50:	e130      	b.n	dfb4 <_malloc_r+0x320>
    dd52:	08db      	lsrs	r3, r3, #3
    dd54:	3aff      	subs	r2, #255	; 0xff
    dd56:	1099      	asrs	r1, r3, #2
    dd58:	3aff      	subs	r2, #255	; 0xff
    dd5a:	408a      	lsls	r2, r1
    dd5c:	00db      	lsls	r3, r3, #3
    dd5e:	6871      	ldr	r1, [r6, #4]
    dd60:	199b      	adds	r3, r3, r6
    dd62:	430a      	orrs	r2, r1
    dd64:	6899      	ldr	r1, [r3, #8]
    dd66:	6072      	str	r2, [r6, #4]
    dd68:	60e3      	str	r3, [r4, #12]
    dd6a:	60a1      	str	r1, [r4, #8]
    dd6c:	609c      	str	r4, [r3, #8]
    dd6e:	0013      	movs	r3, r2
    dd70:	60cc      	str	r4, [r1, #12]
    dd72:	2101      	movs	r1, #1
    dd74:	1082      	asrs	r2, r0, #2
    dd76:	4091      	lsls	r1, r2
    dd78:	4299      	cmp	r1, r3
    dd7a:	d86f      	bhi.n	de5c <_malloc_r+0x1c8>
    dd7c:	420b      	tst	r3, r1
    dd7e:	d105      	bne.n	dd8c <_malloc_r+0xf8>
    dd80:	2203      	movs	r2, #3
    dd82:	4390      	bics	r0, r2
    dd84:	0049      	lsls	r1, r1, #1
    dd86:	3004      	adds	r0, #4
    dd88:	420b      	tst	r3, r1
    dd8a:	d0fb      	beq.n	dd84 <_malloc_r+0xf0>
    dd8c:	2303      	movs	r3, #3
    dd8e:	4698      	mov	r8, r3
    dd90:	00c3      	lsls	r3, r0, #3
    dd92:	4699      	mov	r9, r3
    dd94:	44b1      	add	r9, r6
    dd96:	46cc      	mov	ip, r9
    dd98:	4682      	mov	sl, r0
    dd9a:	4663      	mov	r3, ip
    dd9c:	68dc      	ldr	r4, [r3, #12]
    dd9e:	45a4      	cmp	ip, r4
    dda0:	d107      	bne.n	ddb2 <_malloc_r+0x11e>
    dda2:	e157      	b.n	e054 <_malloc_r+0x3c0>
    dda4:	2a00      	cmp	r2, #0
    dda6:	db00      	blt.n	ddaa <_malloc_r+0x116>
    dda8:	e166      	b.n	e078 <_malloc_r+0x3e4>
    ddaa:	68e4      	ldr	r4, [r4, #12]
    ddac:	45a4      	cmp	ip, r4
    ddae:	d100      	bne.n	ddb2 <_malloc_r+0x11e>
    ddb0:	e150      	b.n	e054 <_malloc_r+0x3c0>
    ddb2:	4642      	mov	r2, r8
    ddb4:	6863      	ldr	r3, [r4, #4]
    ddb6:	4393      	bics	r3, r2
    ddb8:	1b5a      	subs	r2, r3, r5
    ddba:	2a0f      	cmp	r2, #15
    ddbc:	ddf2      	ble.n	dda4 <_malloc_r+0x110>
    ddbe:	2001      	movs	r0, #1
    ddc0:	4680      	mov	r8, r0
    ddc2:	1961      	adds	r1, r4, r5
    ddc4:	4305      	orrs	r5, r0
    ddc6:	6065      	str	r5, [r4, #4]
    ddc8:	68a0      	ldr	r0, [r4, #8]
    ddca:	68e5      	ldr	r5, [r4, #12]
    ddcc:	3608      	adds	r6, #8
    ddce:	60c5      	str	r5, [r0, #12]
    ddd0:	60a8      	str	r0, [r5, #8]
    ddd2:	4640      	mov	r0, r8
    ddd4:	60f1      	str	r1, [r6, #12]
    ddd6:	60b1      	str	r1, [r6, #8]
    ddd8:	4310      	orrs	r0, r2
    ddda:	6048      	str	r0, [r1, #4]
    dddc:	60ce      	str	r6, [r1, #12]
    ddde:	608e      	str	r6, [r1, #8]
    dde0:	0038      	movs	r0, r7
    dde2:	50e2      	str	r2, [r4, r3]
    dde4:	f000 faa2 	bl	e32c <__malloc_unlock>
    dde8:	0020      	movs	r0, r4
    ddea:	3008      	adds	r0, #8
    ddec:	e021      	b.n	de32 <_malloc_r+0x19e>
    ddee:	2910      	cmp	r1, #16
    ddf0:	d826      	bhi.n	de40 <_malloc_r+0x1ac>
    ddf2:	0038      	movs	r0, r7
    ddf4:	f000 fa92 	bl	e31c <__malloc_lock>
    ddf8:	2510      	movs	r5, #16
    ddfa:	2318      	movs	r3, #24
    ddfc:	2002      	movs	r0, #2
    ddfe:	4e8b      	ldr	r6, [pc, #556]	; (e02c <_malloc_r+0x398>)
    de00:	18f3      	adds	r3, r6, r3
    de02:	001a      	movs	r2, r3
    de04:	685c      	ldr	r4, [r3, #4]
    de06:	3a08      	subs	r2, #8
    de08:	4294      	cmp	r4, r2
    de0a:	d100      	bne.n	de0e <_malloc_r+0x17a>
    de0c:	e12e      	b.n	e06c <_malloc_r+0x3d8>
    de0e:	2303      	movs	r3, #3
    de10:	6862      	ldr	r2, [r4, #4]
    de12:	439a      	bics	r2, r3
    de14:	0013      	movs	r3, r2
    de16:	68e2      	ldr	r2, [r4, #12]
    de18:	68a1      	ldr	r1, [r4, #8]
    de1a:	60ca      	str	r2, [r1, #12]
    de1c:	6091      	str	r1, [r2, #8]
    de1e:	2201      	movs	r2, #1
    de20:	18e3      	adds	r3, r4, r3
    de22:	6859      	ldr	r1, [r3, #4]
    de24:	0038      	movs	r0, r7
    de26:	430a      	orrs	r2, r1
    de28:	605a      	str	r2, [r3, #4]
    de2a:	f000 fa7f 	bl	e32c <__malloc_unlock>
    de2e:	0020      	movs	r0, r4
    de30:	3008      	adds	r0, #8
    de32:	b003      	add	sp, #12
    de34:	bc3c      	pop	{r2, r3, r4, r5}
    de36:	4690      	mov	r8, r2
    de38:	4699      	mov	r9, r3
    de3a:	46a2      	mov	sl, r4
    de3c:	46ab      	mov	fp, r5
    de3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    de40:	230c      	movs	r3, #12
    de42:	2000      	movs	r0, #0
    de44:	603b      	str	r3, [r7, #0]
    de46:	e7f4      	b.n	de32 <_malloc_r+0x19e>
    de48:	2180      	movs	r1, #128	; 0x80
    de4a:	233f      	movs	r3, #63	; 0x3f
    de4c:	2040      	movs	r0, #64	; 0x40
    de4e:	0089      	lsls	r1, r1, #2
    de50:	4698      	mov	r8, r3
    de52:	e746      	b.n	dce2 <_malloc_r+0x4e>
    de54:	4640      	mov	r0, r8
    de56:	e764      	b.n	dd22 <_malloc_r+0x8e>
    de58:	464b      	mov	r3, r9
    de5a:	e7e0      	b.n	de1e <_malloc_r+0x18a>
    de5c:	2303      	movs	r3, #3
    de5e:	68b4      	ldr	r4, [r6, #8]
    de60:	6862      	ldr	r2, [r4, #4]
    de62:	439a      	bics	r2, r3
    de64:	4690      	mov	r8, r2
    de66:	42aa      	cmp	r2, r5
    de68:	d303      	bcc.n	de72 <_malloc_r+0x1de>
    de6a:	1b53      	subs	r3, r2, r5
    de6c:	2b0f      	cmp	r3, #15
    de6e:	dd00      	ble.n	de72 <_malloc_r+0x1de>
    de70:	e086      	b.n	df80 <_malloc_r+0x2ec>
    de72:	0023      	movs	r3, r4
    de74:	4443      	add	r3, r8
    de76:	4a6f      	ldr	r2, [pc, #444]	; (e034 <_malloc_r+0x3a0>)
    de78:	9301      	str	r3, [sp, #4]
    de7a:	4b6f      	ldr	r3, [pc, #444]	; (e038 <_malloc_r+0x3a4>)
    de7c:	4693      	mov	fp, r2
    de7e:	681b      	ldr	r3, [r3, #0]
    de80:	6812      	ldr	r2, [r2, #0]
    de82:	18eb      	adds	r3, r5, r3
    de84:	3201      	adds	r2, #1
    de86:	d100      	bne.n	de8a <_malloc_r+0x1f6>
    de88:	e168      	b.n	e15c <_malloc_r+0x4c8>
    de8a:	4a6c      	ldr	r2, [pc, #432]	; (e03c <_malloc_r+0x3a8>)
    de8c:	4694      	mov	ip, r2
    de8e:	4463      	add	r3, ip
    de90:	0b1b      	lsrs	r3, r3, #12
    de92:	031b      	lsls	r3, r3, #12
    de94:	9300      	str	r3, [sp, #0]
    de96:	9900      	ldr	r1, [sp, #0]
    de98:	0038      	movs	r0, r7
    de9a:	f000 ff55 	bl	ed48 <_sbrk_r>
    de9e:	0003      	movs	r3, r0
    dea0:	4681      	mov	r9, r0
    dea2:	3301      	adds	r3, #1
    dea4:	d061      	beq.n	df6a <_malloc_r+0x2d6>
    dea6:	9b01      	ldr	r3, [sp, #4]
    dea8:	4283      	cmp	r3, r0
    deaa:	d900      	bls.n	deae <_malloc_r+0x21a>
    deac:	e0ff      	b.n	e0ae <_malloc_r+0x41a>
    deae:	4b64      	ldr	r3, [pc, #400]	; (e040 <_malloc_r+0x3ac>)
    deb0:	9a00      	ldr	r2, [sp, #0]
    deb2:	469a      	mov	sl, r3
    deb4:	681b      	ldr	r3, [r3, #0]
    deb6:	469c      	mov	ip, r3
    deb8:	4653      	mov	r3, sl
    deba:	4462      	add	r2, ip
    debc:	601a      	str	r2, [r3, #0]
    debe:	9b01      	ldr	r3, [sp, #4]
    dec0:	0011      	movs	r1, r2
    dec2:	4283      	cmp	r3, r0
    dec4:	d100      	bne.n	dec8 <_malloc_r+0x234>
    dec6:	e155      	b.n	e174 <_malloc_r+0x4e0>
    dec8:	465b      	mov	r3, fp
    deca:	681b      	ldr	r3, [r3, #0]
    decc:	3301      	adds	r3, #1
    dece:	d100      	bne.n	ded2 <_malloc_r+0x23e>
    ded0:	e16c      	b.n	e1ac <_malloc_r+0x518>
    ded2:	464b      	mov	r3, r9
    ded4:	9a01      	ldr	r2, [sp, #4]
    ded6:	1a9b      	subs	r3, r3, r2
    ded8:	1859      	adds	r1, r3, r1
    deda:	4653      	mov	r3, sl
    dedc:	6019      	str	r1, [r3, #0]
    dede:	2307      	movs	r3, #7
    dee0:	464a      	mov	r2, r9
    dee2:	4013      	ands	r3, r2
    dee4:	d100      	bne.n	dee8 <_malloc_r+0x254>
    dee6:	e124      	b.n	e132 <_malloc_r+0x49e>
    dee8:	2108      	movs	r1, #8
    deea:	4689      	mov	r9, r1
    deec:	4955      	ldr	r1, [pc, #340]	; (e044 <_malloc_r+0x3b0>)
    deee:	1ad2      	subs	r2, r2, r3
    def0:	4491      	add	r9, r2
    def2:	1acb      	subs	r3, r1, r3
    def4:	9a00      	ldr	r2, [sp, #0]
    def6:	0038      	movs	r0, r7
    def8:	444a      	add	r2, r9
    defa:	0511      	lsls	r1, r2, #20
    defc:	0d09      	lsrs	r1, r1, #20
    defe:	1a5b      	subs	r3, r3, r1
    df00:	0019      	movs	r1, r3
    df02:	469b      	mov	fp, r3
    df04:	f000 ff20 	bl	ed48 <_sbrk_r>
    df08:	1c43      	adds	r3, r0, #1
    df0a:	d100      	bne.n	df0e <_malloc_r+0x27a>
    df0c:	e142      	b.n	e194 <_malloc_r+0x500>
    df0e:	464b      	mov	r3, r9
    df10:	1ac0      	subs	r0, r0, r3
    df12:	2301      	movs	r3, #1
    df14:	4458      	add	r0, fp
    df16:	4318      	orrs	r0, r3
    df18:	4653      	mov	r3, sl
    df1a:	681b      	ldr	r3, [r3, #0]
    df1c:	445b      	add	r3, fp
    df1e:	0019      	movs	r1, r3
    df20:	4653      	mov	r3, sl
    df22:	6019      	str	r1, [r3, #0]
    df24:	464b      	mov	r3, r9
    df26:	60b3      	str	r3, [r6, #8]
    df28:	6058      	str	r0, [r3, #4]
    df2a:	42b4      	cmp	r4, r6
    df2c:	d013      	beq.n	df56 <_malloc_r+0x2c2>
    df2e:	4643      	mov	r3, r8
    df30:	2b0f      	cmp	r3, #15
    df32:	d800      	bhi.n	df36 <_malloc_r+0x2a2>
    df34:	e0e8      	b.n	e108 <_malloc_r+0x474>
    df36:	4643      	mov	r3, r8
    df38:	2207      	movs	r2, #7
    df3a:	6860      	ldr	r0, [r4, #4]
    df3c:	3b0c      	subs	r3, #12
    df3e:	4393      	bics	r3, r2
    df40:	3a06      	subs	r2, #6
    df42:	4002      	ands	r2, r0
    df44:	2005      	movs	r0, #5
    df46:	431a      	orrs	r2, r3
    df48:	6062      	str	r2, [r4, #4]
    df4a:	18e2      	adds	r2, r4, r3
    df4c:	6050      	str	r0, [r2, #4]
    df4e:	6090      	str	r0, [r2, #8]
    df50:	2b0f      	cmp	r3, #15
    df52:	d900      	bls.n	df56 <_malloc_r+0x2c2>
    df54:	e122      	b.n	e19c <_malloc_r+0x508>
    df56:	4b3c      	ldr	r3, [pc, #240]	; (e048 <_malloc_r+0x3b4>)
    df58:	681a      	ldr	r2, [r3, #0]
    df5a:	4291      	cmp	r1, r2
    df5c:	d900      	bls.n	df60 <_malloc_r+0x2cc>
    df5e:	6019      	str	r1, [r3, #0]
    df60:	4b3a      	ldr	r3, [pc, #232]	; (e04c <_malloc_r+0x3b8>)
    df62:	681a      	ldr	r2, [r3, #0]
    df64:	4291      	cmp	r1, r2
    df66:	d900      	bls.n	df6a <_malloc_r+0x2d6>
    df68:	6019      	str	r1, [r3, #0]
    df6a:	2303      	movs	r3, #3
    df6c:	68b4      	ldr	r4, [r6, #8]
    df6e:	6862      	ldr	r2, [r4, #4]
    df70:	439a      	bics	r2, r3
    df72:	1b53      	subs	r3, r2, r5
    df74:	4295      	cmp	r5, r2
    df76:	d900      	bls.n	df7a <_malloc_r+0x2e6>
    df78:	e0c9      	b.n	e10e <_malloc_r+0x47a>
    df7a:	2b0f      	cmp	r3, #15
    df7c:	dc00      	bgt.n	df80 <_malloc_r+0x2ec>
    df7e:	e0c6      	b.n	e10e <_malloc_r+0x47a>
    df80:	2201      	movs	r2, #1
    df82:	0029      	movs	r1, r5
    df84:	4313      	orrs	r3, r2
    df86:	4311      	orrs	r1, r2
    df88:	1965      	adds	r5, r4, r5
    df8a:	6061      	str	r1, [r4, #4]
    df8c:	0038      	movs	r0, r7
    df8e:	60b5      	str	r5, [r6, #8]
    df90:	606b      	str	r3, [r5, #4]
    df92:	f000 f9cb 	bl	e32c <__malloc_unlock>
    df96:	0020      	movs	r0, r4
    df98:	3008      	adds	r0, #8
    df9a:	e74a      	b.n	de32 <_malloc_r+0x19e>
    df9c:	2814      	cmp	r0, #20
    df9e:	d97a      	bls.n	e096 <_malloc_r+0x402>
    dfa0:	2854      	cmp	r0, #84	; 0x54
    dfa2:	d900      	bls.n	dfa6 <_malloc_r+0x312>
    dfa4:	e0ba      	b.n	e11c <_malloc_r+0x488>
    dfa6:	236e      	movs	r3, #110	; 0x6e
    dfa8:	4698      	mov	r8, r3
    dfaa:	0b28      	lsrs	r0, r5, #12
    dfac:	4480      	add	r8, r0
    dfae:	306f      	adds	r0, #111	; 0x6f
    dfb0:	00c1      	lsls	r1, r0, #3
    dfb2:	e696      	b.n	dce2 <_malloc_r+0x4e>
    dfb4:	0a5a      	lsrs	r2, r3, #9
    dfb6:	2a04      	cmp	r2, #4
    dfb8:	d973      	bls.n	e0a2 <_malloc_r+0x40e>
    dfba:	2a14      	cmp	r2, #20
    dfbc:	d900      	bls.n	dfc0 <_malloc_r+0x32c>
    dfbe:	e0d0      	b.n	e162 <_malloc_r+0x4ce>
    dfc0:	0011      	movs	r1, r2
    dfc2:	325c      	adds	r2, #92	; 0x5c
    dfc4:	315b      	adds	r1, #91	; 0x5b
    dfc6:	00d2      	lsls	r2, r2, #3
    dfc8:	2308      	movs	r3, #8
    dfca:	425b      	negs	r3, r3
    dfcc:	469c      	mov	ip, r3
    dfce:	18b2      	adds	r2, r6, r2
    dfd0:	4494      	add	ip, r2
    dfd2:	4663      	mov	r3, ip
    dfd4:	689a      	ldr	r2, [r3, #8]
    dfd6:	2303      	movs	r3, #3
    dfd8:	4698      	mov	r8, r3
    dfda:	4594      	cmp	ip, r2
    dfdc:	d100      	bne.n	dfe0 <_malloc_r+0x34c>
    dfde:	e0ab      	b.n	e138 <_malloc_r+0x4a4>
    dfe0:	4643      	mov	r3, r8
    dfe2:	6851      	ldr	r1, [r2, #4]
    dfe4:	4399      	bics	r1, r3
    dfe6:	4589      	cmp	r9, r1
    dfe8:	d300      	bcc.n	dfec <_malloc_r+0x358>
    dfea:	e095      	b.n	e118 <_malloc_r+0x484>
    dfec:	6892      	ldr	r2, [r2, #8]
    dfee:	4594      	cmp	ip, r2
    dff0:	d1f6      	bne.n	dfe0 <_malloc_r+0x34c>
    dff2:	4663      	mov	r3, ip
    dff4:	68da      	ldr	r2, [r3, #12]
    dff6:	6873      	ldr	r3, [r6, #4]
    dff8:	4661      	mov	r1, ip
    dffa:	60e2      	str	r2, [r4, #12]
    dffc:	60a1      	str	r1, [r4, #8]
    dffe:	6094      	str	r4, [r2, #8]
    e000:	60cc      	str	r4, [r1, #12]
    e002:	e6b6      	b.n	dd72 <_malloc_r+0xde>
    e004:	2301      	movs	r3, #1
    e006:	1960      	adds	r0, r4, r5
    e008:	431d      	orrs	r5, r3
    e00a:	6065      	str	r5, [r4, #4]
    e00c:	6170      	str	r0, [r6, #20]
    e00e:	6130      	str	r0, [r6, #16]
    e010:	60c2      	str	r2, [r0, #12]
    e012:	6082      	str	r2, [r0, #8]
    e014:	001a      	movs	r2, r3
    e016:	464b      	mov	r3, r9
    e018:	430a      	orrs	r2, r1
    e01a:	6042      	str	r2, [r0, #4]
    e01c:	0038      	movs	r0, r7
    e01e:	50e1      	str	r1, [r4, r3]
    e020:	f000 f984 	bl	e32c <__malloc_unlock>
    e024:	0020      	movs	r0, r4
    e026:	3008      	adds	r0, #8
    e028:	e703      	b.n	de32 <_malloc_r+0x19e>
    e02a:	46c0      	nop			; (mov r8, r8)
    e02c:	200004b4 	.word	0x200004b4
    e030:	000001ff 	.word	0x000001ff
    e034:	200008bc 	.word	0x200008bc
    e038:	200010dc 	.word	0x200010dc
    e03c:	0000100f 	.word	0x0000100f
    e040:	200010ac 	.word	0x200010ac
    e044:	00001008 	.word	0x00001008
    e048:	200010d4 	.word	0x200010d4
    e04c:	200010d8 	.word	0x200010d8
    e050:	6873      	ldr	r3, [r6, #4]
    e052:	e68e      	b.n	dd72 <_malloc_r+0xde>
    e054:	2308      	movs	r3, #8
    e056:	469b      	mov	fp, r3
    e058:	3b07      	subs	r3, #7
    e05a:	44dc      	add	ip, fp
    e05c:	469b      	mov	fp, r3
    e05e:	44da      	add	sl, fp
    e060:	4643      	mov	r3, r8
    e062:	4652      	mov	r2, sl
    e064:	4213      	tst	r3, r2
    e066:	d000      	beq.n	e06a <_malloc_r+0x3d6>
    e068:	e697      	b.n	dd9a <_malloc_r+0x106>
    e06a:	e037      	b.n	e0dc <_malloc_r+0x448>
    e06c:	68dc      	ldr	r4, [r3, #12]
    e06e:	3002      	adds	r0, #2
    e070:	42a3      	cmp	r3, r4
    e072:	d100      	bne.n	e076 <_malloc_r+0x3e2>
    e074:	e655      	b.n	dd22 <_malloc_r+0x8e>
    e076:	e6ca      	b.n	de0e <_malloc_r+0x17a>
    e078:	2201      	movs	r2, #1
    e07a:	18e3      	adds	r3, r4, r3
    e07c:	6859      	ldr	r1, [r3, #4]
    e07e:	0038      	movs	r0, r7
    e080:	430a      	orrs	r2, r1
    e082:	605a      	str	r2, [r3, #4]
    e084:	68e3      	ldr	r3, [r4, #12]
    e086:	68a2      	ldr	r2, [r4, #8]
    e088:	60d3      	str	r3, [r2, #12]
    e08a:	609a      	str	r2, [r3, #8]
    e08c:	f000 f94e 	bl	e32c <__malloc_unlock>
    e090:	0020      	movs	r0, r4
    e092:	3008      	adds	r0, #8
    e094:	e6cd      	b.n	de32 <_malloc_r+0x19e>
    e096:	235b      	movs	r3, #91	; 0x5b
    e098:	4698      	mov	r8, r3
    e09a:	4480      	add	r8, r0
    e09c:	305c      	adds	r0, #92	; 0x5c
    e09e:	00c1      	lsls	r1, r0, #3
    e0a0:	e61f      	b.n	dce2 <_malloc_r+0x4e>
    e0a2:	099a      	lsrs	r2, r3, #6
    e0a4:	0011      	movs	r1, r2
    e0a6:	3239      	adds	r2, #57	; 0x39
    e0a8:	3138      	adds	r1, #56	; 0x38
    e0aa:	00d2      	lsls	r2, r2, #3
    e0ac:	e78c      	b.n	dfc8 <_malloc_r+0x334>
    e0ae:	42b4      	cmp	r4, r6
    e0b0:	d000      	beq.n	e0b4 <_malloc_r+0x420>
    e0b2:	e75a      	b.n	df6a <_malloc_r+0x2d6>
    e0b4:	4b4f      	ldr	r3, [pc, #316]	; (e1f4 <_malloc_r+0x560>)
    e0b6:	9a00      	ldr	r2, [sp, #0]
    e0b8:	469a      	mov	sl, r3
    e0ba:	681b      	ldr	r3, [r3, #0]
    e0bc:	469c      	mov	ip, r3
    e0be:	4653      	mov	r3, sl
    e0c0:	4462      	add	r2, ip
    e0c2:	0011      	movs	r1, r2
    e0c4:	601a      	str	r2, [r3, #0]
    e0c6:	e6ff      	b.n	dec8 <_malloc_r+0x234>
    e0c8:	2308      	movs	r3, #8
    e0ca:	425b      	negs	r3, r3
    e0cc:	469c      	mov	ip, r3
    e0ce:	44e1      	add	r9, ip
    e0d0:	464b      	mov	r3, r9
    e0d2:	689b      	ldr	r3, [r3, #8]
    e0d4:	3801      	subs	r0, #1
    e0d6:	4599      	cmp	r9, r3
    e0d8:	d000      	beq.n	e0dc <_malloc_r+0x448>
    e0da:	e084      	b.n	e1e6 <_malloc_r+0x552>
    e0dc:	4643      	mov	r3, r8
    e0de:	4203      	tst	r3, r0
    e0e0:	d1f2      	bne.n	e0c8 <_malloc_r+0x434>
    e0e2:	6873      	ldr	r3, [r6, #4]
    e0e4:	438b      	bics	r3, r1
    e0e6:	6073      	str	r3, [r6, #4]
    e0e8:	0049      	lsls	r1, r1, #1
    e0ea:	4299      	cmp	r1, r3
    e0ec:	d900      	bls.n	e0f0 <_malloc_r+0x45c>
    e0ee:	e6b5      	b.n	de5c <_malloc_r+0x1c8>
    e0f0:	2900      	cmp	r1, #0
    e0f2:	d100      	bne.n	e0f6 <_malloc_r+0x462>
    e0f4:	e6b2      	b.n	de5c <_malloc_r+0x1c8>
    e0f6:	4650      	mov	r0, sl
    e0f8:	420b      	tst	r3, r1
    e0fa:	d000      	beq.n	e0fe <_malloc_r+0x46a>
    e0fc:	e648      	b.n	dd90 <_malloc_r+0xfc>
    e0fe:	0049      	lsls	r1, r1, #1
    e100:	3004      	adds	r0, #4
    e102:	420b      	tst	r3, r1
    e104:	d0fb      	beq.n	e0fe <_malloc_r+0x46a>
    e106:	e643      	b.n	dd90 <_malloc_r+0xfc>
    e108:	2301      	movs	r3, #1
    e10a:	464a      	mov	r2, r9
    e10c:	6053      	str	r3, [r2, #4]
    e10e:	0038      	movs	r0, r7
    e110:	f000 f90c 	bl	e32c <__malloc_unlock>
    e114:	2000      	movs	r0, #0
    e116:	e68c      	b.n	de32 <_malloc_r+0x19e>
    e118:	4694      	mov	ip, r2
    e11a:	e76a      	b.n	dff2 <_malloc_r+0x35e>
    e11c:	23aa      	movs	r3, #170	; 0xaa
    e11e:	005b      	lsls	r3, r3, #1
    e120:	4298      	cmp	r0, r3
    e122:	d811      	bhi.n	e148 <_malloc_r+0x4b4>
    e124:	3bdd      	subs	r3, #221	; 0xdd
    e126:	4698      	mov	r8, r3
    e128:	0be8      	lsrs	r0, r5, #15
    e12a:	4480      	add	r8, r0
    e12c:	3078      	adds	r0, #120	; 0x78
    e12e:	00c1      	lsls	r1, r0, #3
    e130:	e5d7      	b.n	dce2 <_malloc_r+0x4e>
    e132:	2380      	movs	r3, #128	; 0x80
    e134:	015b      	lsls	r3, r3, #5
    e136:	e6dd      	b.n	def4 <_malloc_r+0x260>
    e138:	1089      	asrs	r1, r1, #2
    e13a:	3b02      	subs	r3, #2
    e13c:	408b      	lsls	r3, r1
    e13e:	6872      	ldr	r2, [r6, #4]
    e140:	4313      	orrs	r3, r2
    e142:	6073      	str	r3, [r6, #4]
    e144:	4662      	mov	r2, ip
    e146:	e757      	b.n	dff8 <_malloc_r+0x364>
    e148:	4b2b      	ldr	r3, [pc, #172]	; (e1f8 <_malloc_r+0x564>)
    e14a:	4298      	cmp	r0, r3
    e14c:	d81c      	bhi.n	e188 <_malloc_r+0x4f4>
    e14e:	237c      	movs	r3, #124	; 0x7c
    e150:	4698      	mov	r8, r3
    e152:	0ca8      	lsrs	r0, r5, #18
    e154:	4480      	add	r8, r0
    e156:	307d      	adds	r0, #125	; 0x7d
    e158:	00c1      	lsls	r1, r0, #3
    e15a:	e5c2      	b.n	dce2 <_malloc_r+0x4e>
    e15c:	3310      	adds	r3, #16
    e15e:	9300      	str	r3, [sp, #0]
    e160:	e699      	b.n	de96 <_malloc_r+0x202>
    e162:	2a54      	cmp	r2, #84	; 0x54
    e164:	d826      	bhi.n	e1b4 <_malloc_r+0x520>
    e166:	464b      	mov	r3, r9
    e168:	0b1a      	lsrs	r2, r3, #12
    e16a:	0011      	movs	r1, r2
    e16c:	326f      	adds	r2, #111	; 0x6f
    e16e:	316e      	adds	r1, #110	; 0x6e
    e170:	00d2      	lsls	r2, r2, #3
    e172:	e729      	b.n	dfc8 <_malloc_r+0x334>
    e174:	051b      	lsls	r3, r3, #20
    e176:	d000      	beq.n	e17a <_malloc_r+0x4e6>
    e178:	e6a6      	b.n	dec8 <_malloc_r+0x234>
    e17a:	2001      	movs	r0, #1
    e17c:	9b00      	ldr	r3, [sp, #0]
    e17e:	68b2      	ldr	r2, [r6, #8]
    e180:	4443      	add	r3, r8
    e182:	4303      	orrs	r3, r0
    e184:	6053      	str	r3, [r2, #4]
    e186:	e6e6      	b.n	df56 <_malloc_r+0x2c2>
    e188:	21fe      	movs	r1, #254	; 0xfe
    e18a:	237e      	movs	r3, #126	; 0x7e
    e18c:	207f      	movs	r0, #127	; 0x7f
    e18e:	0089      	lsls	r1, r1, #2
    e190:	4698      	mov	r8, r3
    e192:	e5a6      	b.n	dce2 <_malloc_r+0x4e>
    e194:	2300      	movs	r3, #0
    e196:	2001      	movs	r0, #1
    e198:	469b      	mov	fp, r3
    e19a:	e6bd      	b.n	df18 <_malloc_r+0x284>
    e19c:	0021      	movs	r1, r4
    e19e:	0038      	movs	r0, r7
    e1a0:	3108      	adds	r1, #8
    e1a2:	f7ff fa59 	bl	d658 <_free_r>
    e1a6:	4653      	mov	r3, sl
    e1a8:	6819      	ldr	r1, [r3, #0]
    e1aa:	e6d4      	b.n	df56 <_malloc_r+0x2c2>
    e1ac:	465b      	mov	r3, fp
    e1ae:	464a      	mov	r2, r9
    e1b0:	601a      	str	r2, [r3, #0]
    e1b2:	e694      	b.n	dede <_malloc_r+0x24a>
    e1b4:	21aa      	movs	r1, #170	; 0xaa
    e1b6:	0049      	lsls	r1, r1, #1
    e1b8:	428a      	cmp	r2, r1
    e1ba:	d806      	bhi.n	e1ca <_malloc_r+0x536>
    e1bc:	464b      	mov	r3, r9
    e1be:	0bda      	lsrs	r2, r3, #15
    e1c0:	0011      	movs	r1, r2
    e1c2:	3278      	adds	r2, #120	; 0x78
    e1c4:	3177      	adds	r1, #119	; 0x77
    e1c6:	00d2      	lsls	r2, r2, #3
    e1c8:	e6fe      	b.n	dfc8 <_malloc_r+0x334>
    e1ca:	490b      	ldr	r1, [pc, #44]	; (e1f8 <_malloc_r+0x564>)
    e1cc:	428a      	cmp	r2, r1
    e1ce:	d806      	bhi.n	e1de <_malloc_r+0x54a>
    e1d0:	464b      	mov	r3, r9
    e1d2:	0c9a      	lsrs	r2, r3, #18
    e1d4:	0011      	movs	r1, r2
    e1d6:	327d      	adds	r2, #125	; 0x7d
    e1d8:	317c      	adds	r1, #124	; 0x7c
    e1da:	00d2      	lsls	r2, r2, #3
    e1dc:	e6f4      	b.n	dfc8 <_malloc_r+0x334>
    e1de:	22fe      	movs	r2, #254	; 0xfe
    e1e0:	217e      	movs	r1, #126	; 0x7e
    e1e2:	0092      	lsls	r2, r2, #2
    e1e4:	e6f0      	b.n	dfc8 <_malloc_r+0x334>
    e1e6:	6873      	ldr	r3, [r6, #4]
    e1e8:	e77e      	b.n	e0e8 <_malloc_r+0x454>
    e1ea:	002b      	movs	r3, r5
    e1ec:	08e8      	lsrs	r0, r5, #3
    e1ee:	3308      	adds	r3, #8
    e1f0:	e605      	b.n	ddfe <_malloc_r+0x16a>
    e1f2:	46c0      	nop			; (mov r8, r8)
    e1f4:	200010ac 	.word	0x200010ac
    e1f8:	00000554 	.word	0x00000554

0000e1fc <memchr>:
    e1fc:	b570      	push	{r4, r5, r6, lr}
    e1fe:	b2cd      	uxtb	r5, r1
    e200:	0783      	lsls	r3, r0, #30
    e202:	d034      	beq.n	e26e <memchr+0x72>
    e204:	1e54      	subs	r4, r2, #1
    e206:	2a00      	cmp	r2, #0
    e208:	d01b      	beq.n	e242 <memchr+0x46>
    e20a:	7803      	ldrb	r3, [r0, #0]
    e20c:	42ab      	cmp	r3, r5
    e20e:	d019      	beq.n	e244 <memchr+0x48>
    e210:	2203      	movs	r2, #3
    e212:	e004      	b.n	e21e <memchr+0x22>
    e214:	3c01      	subs	r4, #1
    e216:	d314      	bcc.n	e242 <memchr+0x46>
    e218:	7803      	ldrb	r3, [r0, #0]
    e21a:	42ab      	cmp	r3, r5
    e21c:	d012      	beq.n	e244 <memchr+0x48>
    e21e:	3001      	adds	r0, #1
    e220:	4210      	tst	r0, r2
    e222:	d1f7      	bne.n	e214 <memchr+0x18>
    e224:	2c03      	cmp	r4, #3
    e226:	d80e      	bhi.n	e246 <memchr+0x4a>
    e228:	2c00      	cmp	r4, #0
    e22a:	d00a      	beq.n	e242 <memchr+0x46>
    e22c:	7803      	ldrb	r3, [r0, #0]
    e22e:	42ab      	cmp	r3, r5
    e230:	d008      	beq.n	e244 <memchr+0x48>
    e232:	1904      	adds	r4, r0, r4
    e234:	e002      	b.n	e23c <memchr+0x40>
    e236:	7803      	ldrb	r3, [r0, #0]
    e238:	42ab      	cmp	r3, r5
    e23a:	d003      	beq.n	e244 <memchr+0x48>
    e23c:	3001      	adds	r0, #1
    e23e:	4284      	cmp	r4, r0
    e240:	d1f9      	bne.n	e236 <memchr+0x3a>
    e242:	2000      	movs	r0, #0
    e244:	bd70      	pop	{r4, r5, r6, pc}
    e246:	22ff      	movs	r2, #255	; 0xff
    e248:	060b      	lsls	r3, r1, #24
    e24a:	0c1b      	lsrs	r3, r3, #16
    e24c:	4011      	ands	r1, r2
    e24e:	4319      	orrs	r1, r3
    e250:	040b      	lsls	r3, r1, #16
    e252:	4e08      	ldr	r6, [pc, #32]	; (e274 <memchr+0x78>)
    e254:	4319      	orrs	r1, r3
    e256:	6803      	ldr	r3, [r0, #0]
    e258:	4a07      	ldr	r2, [pc, #28]	; (e278 <memchr+0x7c>)
    e25a:	404b      	eors	r3, r1
    e25c:	189a      	adds	r2, r3, r2
    e25e:	439a      	bics	r2, r3
    e260:	4232      	tst	r2, r6
    e262:	d1e3      	bne.n	e22c <memchr+0x30>
    e264:	3c04      	subs	r4, #4
    e266:	3004      	adds	r0, #4
    e268:	2c03      	cmp	r4, #3
    e26a:	d8f4      	bhi.n	e256 <memchr+0x5a>
    e26c:	e7dc      	b.n	e228 <memchr+0x2c>
    e26e:	0014      	movs	r4, r2
    e270:	e7d8      	b.n	e224 <memchr+0x28>
    e272:	46c0      	nop			; (mov r8, r8)
    e274:	80808080 	.word	0x80808080
    e278:	fefefeff 	.word	0xfefefeff

0000e27c <memmove>:
    e27c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e27e:	4288      	cmp	r0, r1
    e280:	d90a      	bls.n	e298 <memmove+0x1c>
    e282:	188b      	adds	r3, r1, r2
    e284:	4298      	cmp	r0, r3
    e286:	d207      	bcs.n	e298 <memmove+0x1c>
    e288:	1e53      	subs	r3, r2, #1
    e28a:	2a00      	cmp	r2, #0
    e28c:	d003      	beq.n	e296 <memmove+0x1a>
    e28e:	5cca      	ldrb	r2, [r1, r3]
    e290:	54c2      	strb	r2, [r0, r3]
    e292:	3b01      	subs	r3, #1
    e294:	d2fb      	bcs.n	e28e <memmove+0x12>
    e296:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e298:	0005      	movs	r5, r0
    e29a:	2a0f      	cmp	r2, #15
    e29c:	d808      	bhi.n	e2b0 <memmove+0x34>
    e29e:	2a00      	cmp	r2, #0
    e2a0:	d0f9      	beq.n	e296 <memmove+0x1a>
    e2a2:	2300      	movs	r3, #0
    e2a4:	5ccc      	ldrb	r4, [r1, r3]
    e2a6:	54ec      	strb	r4, [r5, r3]
    e2a8:	3301      	adds	r3, #1
    e2aa:	4293      	cmp	r3, r2
    e2ac:	d1fa      	bne.n	e2a4 <memmove+0x28>
    e2ae:	e7f2      	b.n	e296 <memmove+0x1a>
    e2b0:	000b      	movs	r3, r1
    e2b2:	4303      	orrs	r3, r0
    e2b4:	079b      	lsls	r3, r3, #30
    e2b6:	d12d      	bne.n	e314 <memmove+0x98>
    e2b8:	0015      	movs	r5, r2
    e2ba:	000c      	movs	r4, r1
    e2bc:	0003      	movs	r3, r0
    e2be:	3d10      	subs	r5, #16
    e2c0:	092f      	lsrs	r7, r5, #4
    e2c2:	3701      	adds	r7, #1
    e2c4:	013f      	lsls	r7, r7, #4
    e2c6:	19c7      	adds	r7, r0, r7
    e2c8:	6826      	ldr	r6, [r4, #0]
    e2ca:	601e      	str	r6, [r3, #0]
    e2cc:	6866      	ldr	r6, [r4, #4]
    e2ce:	605e      	str	r6, [r3, #4]
    e2d0:	68a6      	ldr	r6, [r4, #8]
    e2d2:	609e      	str	r6, [r3, #8]
    e2d4:	68e6      	ldr	r6, [r4, #12]
    e2d6:	3410      	adds	r4, #16
    e2d8:	60de      	str	r6, [r3, #12]
    e2da:	3310      	adds	r3, #16
    e2dc:	429f      	cmp	r7, r3
    e2de:	d1f3      	bne.n	e2c8 <memmove+0x4c>
    e2e0:	240f      	movs	r4, #15
    e2e2:	43a5      	bics	r5, r4
    e2e4:	3510      	adds	r5, #16
    e2e6:	1949      	adds	r1, r1, r5
    e2e8:	4014      	ands	r4, r2
    e2ea:	1945      	adds	r5, r0, r5
    e2ec:	2c03      	cmp	r4, #3
    e2ee:	d913      	bls.n	e318 <memmove+0x9c>
    e2f0:	2300      	movs	r3, #0
    e2f2:	1f27      	subs	r7, r4, #4
    e2f4:	08be      	lsrs	r6, r7, #2
    e2f6:	3601      	adds	r6, #1
    e2f8:	00b6      	lsls	r6, r6, #2
    e2fa:	58cc      	ldr	r4, [r1, r3]
    e2fc:	50ec      	str	r4, [r5, r3]
    e2fe:	3304      	adds	r3, #4
    e300:	42b3      	cmp	r3, r6
    e302:	d1fa      	bne.n	e2fa <memmove+0x7e>
    e304:	2603      	movs	r6, #3
    e306:	43b7      	bics	r7, r6
    e308:	1d3c      	adds	r4, r7, #4
    e30a:	1909      	adds	r1, r1, r4
    e30c:	192d      	adds	r5, r5, r4
    e30e:	4032      	ands	r2, r6
    e310:	d1c7      	bne.n	e2a2 <memmove+0x26>
    e312:	e7c0      	b.n	e296 <memmove+0x1a>
    e314:	0005      	movs	r5, r0
    e316:	e7c4      	b.n	e2a2 <memmove+0x26>
    e318:	0022      	movs	r2, r4
    e31a:	e7c0      	b.n	e29e <memmove+0x22>

0000e31c <__malloc_lock>:
    e31c:	b510      	push	{r4, lr}
    e31e:	4802      	ldr	r0, [pc, #8]	; (e328 <__malloc_lock+0xc>)
    e320:	f7ff fc32 	bl	db88 <__retarget_lock_acquire_recursive>
    e324:	bd10      	pop	{r4, pc}
    e326:	46c0      	nop			; (mov r8, r8)
    e328:	20001154 	.word	0x20001154

0000e32c <__malloc_unlock>:
    e32c:	b510      	push	{r4, lr}
    e32e:	4802      	ldr	r0, [pc, #8]	; (e338 <__malloc_unlock+0xc>)
    e330:	f7ff fc2c 	bl	db8c <__retarget_lock_release_recursive>
    e334:	bd10      	pop	{r4, pc}
    e336:	46c0      	nop			; (mov r8, r8)
    e338:	20001154 	.word	0x20001154

0000e33c <_Balloc>:
    e33c:	b570      	push	{r4, r5, r6, lr}
    e33e:	0004      	movs	r4, r0
    e340:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
    e342:	000d      	movs	r5, r1
    e344:	2800      	cmp	r0, #0
    e346:	d00a      	beq.n	e35e <_Balloc+0x22>
    e348:	00ab      	lsls	r3, r5, #2
    e34a:	18c3      	adds	r3, r0, r3
    e34c:	6818      	ldr	r0, [r3, #0]
    e34e:	2800      	cmp	r0, #0
    e350:	d00f      	beq.n	e372 <_Balloc+0x36>
    e352:	6802      	ldr	r2, [r0, #0]
    e354:	601a      	str	r2, [r3, #0]
    e356:	2300      	movs	r3, #0
    e358:	6103      	str	r3, [r0, #16]
    e35a:	60c3      	str	r3, [r0, #12]
    e35c:	bd70      	pop	{r4, r5, r6, pc}
    e35e:	2221      	movs	r2, #33	; 0x21
    e360:	2104      	movs	r1, #4
    e362:	0020      	movs	r0, r4
    e364:	f000 fdb0 	bl	eec8 <_calloc_r>
    e368:	64e0      	str	r0, [r4, #76]	; 0x4c
    e36a:	2800      	cmp	r0, #0
    e36c:	d1ec      	bne.n	e348 <_Balloc+0xc>
    e36e:	2000      	movs	r0, #0
    e370:	e7f4      	b.n	e35c <_Balloc+0x20>
    e372:	2601      	movs	r6, #1
    e374:	40ae      	lsls	r6, r5
    e376:	1d72      	adds	r2, r6, #5
    e378:	0092      	lsls	r2, r2, #2
    e37a:	2101      	movs	r1, #1
    e37c:	0020      	movs	r0, r4
    e37e:	f000 fda3 	bl	eec8 <_calloc_r>
    e382:	2800      	cmp	r0, #0
    e384:	d0f3      	beq.n	e36e <_Balloc+0x32>
    e386:	6045      	str	r5, [r0, #4]
    e388:	6086      	str	r6, [r0, #8]
    e38a:	e7e4      	b.n	e356 <_Balloc+0x1a>

0000e38c <_Bfree>:
    e38c:	2900      	cmp	r1, #0
    e38e:	d006      	beq.n	e39e <_Bfree+0x12>
    e390:	684b      	ldr	r3, [r1, #4]
    e392:	009a      	lsls	r2, r3, #2
    e394:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    e396:	189b      	adds	r3, r3, r2
    e398:	681a      	ldr	r2, [r3, #0]
    e39a:	600a      	str	r2, [r1, #0]
    e39c:	6019      	str	r1, [r3, #0]
    e39e:	4770      	bx	lr

0000e3a0 <__multadd>:
    e3a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e3a2:	46ce      	mov	lr, r9
    e3a4:	4647      	mov	r7, r8
    e3a6:	4681      	mov	r9, r0
    e3a8:	0008      	movs	r0, r1
    e3aa:	b580      	push	{r7, lr}
    e3ac:	000d      	movs	r5, r1
    e3ae:	690c      	ldr	r4, [r1, #16]
    e3b0:	001f      	movs	r7, r3
    e3b2:	2100      	movs	r1, #0
    e3b4:	3014      	adds	r0, #20
    e3b6:	6803      	ldr	r3, [r0, #0]
    e3b8:	3101      	adds	r1, #1
    e3ba:	041e      	lsls	r6, r3, #16
    e3bc:	0c36      	lsrs	r6, r6, #16
    e3be:	4356      	muls	r6, r2
    e3c0:	0c1b      	lsrs	r3, r3, #16
    e3c2:	4353      	muls	r3, r2
    e3c4:	19f6      	adds	r6, r6, r7
    e3c6:	0c37      	lsrs	r7, r6, #16
    e3c8:	19db      	adds	r3, r3, r7
    e3ca:	0436      	lsls	r6, r6, #16
    e3cc:	0c1f      	lsrs	r7, r3, #16
    e3ce:	0c36      	lsrs	r6, r6, #16
    e3d0:	041b      	lsls	r3, r3, #16
    e3d2:	199b      	adds	r3, r3, r6
    e3d4:	c008      	stmia	r0!, {r3}
    e3d6:	428c      	cmp	r4, r1
    e3d8:	dced      	bgt.n	e3b6 <__multadd+0x16>
    e3da:	2f00      	cmp	r7, #0
    e3dc:	d008      	beq.n	e3f0 <__multadd+0x50>
    e3de:	68ab      	ldr	r3, [r5, #8]
    e3e0:	429c      	cmp	r4, r3
    e3e2:	da0a      	bge.n	e3fa <__multadd+0x5a>
    e3e4:	1d23      	adds	r3, r4, #4
    e3e6:	009b      	lsls	r3, r3, #2
    e3e8:	18eb      	adds	r3, r5, r3
    e3ea:	3401      	adds	r4, #1
    e3ec:	605f      	str	r7, [r3, #4]
    e3ee:	612c      	str	r4, [r5, #16]
    e3f0:	0028      	movs	r0, r5
    e3f2:	bc0c      	pop	{r2, r3}
    e3f4:	4690      	mov	r8, r2
    e3f6:	4699      	mov	r9, r3
    e3f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e3fa:	686b      	ldr	r3, [r5, #4]
    e3fc:	4648      	mov	r0, r9
    e3fe:	1c59      	adds	r1, r3, #1
    e400:	f7ff ff9c 	bl	e33c <_Balloc>
    e404:	0029      	movs	r1, r5
    e406:	692b      	ldr	r3, [r5, #16]
    e408:	4680      	mov	r8, r0
    e40a:	1c9a      	adds	r2, r3, #2
    e40c:	0092      	lsls	r2, r2, #2
    e40e:	310c      	adds	r1, #12
    e410:	300c      	adds	r0, #12
    e412:	f7fc f8b5 	bl	a580 <memcpy>
    e416:	686b      	ldr	r3, [r5, #4]
    e418:	009a      	lsls	r2, r3, #2
    e41a:	464b      	mov	r3, r9
    e41c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    e41e:	189b      	adds	r3, r3, r2
    e420:	681a      	ldr	r2, [r3, #0]
    e422:	602a      	str	r2, [r5, #0]
    e424:	601d      	str	r5, [r3, #0]
    e426:	4645      	mov	r5, r8
    e428:	e7dc      	b.n	e3e4 <__multadd+0x44>
    e42a:	46c0      	nop			; (mov r8, r8)

0000e42c <__hi0bits>:
    e42c:	0003      	movs	r3, r0
    e42e:	0c02      	lsrs	r2, r0, #16
    e430:	2000      	movs	r0, #0
    e432:	2a00      	cmp	r2, #0
    e434:	d101      	bne.n	e43a <__hi0bits+0xe>
    e436:	041b      	lsls	r3, r3, #16
    e438:	3010      	adds	r0, #16
    e43a:	0e1a      	lsrs	r2, r3, #24
    e43c:	d101      	bne.n	e442 <__hi0bits+0x16>
    e43e:	3008      	adds	r0, #8
    e440:	021b      	lsls	r3, r3, #8
    e442:	0f1a      	lsrs	r2, r3, #28
    e444:	d101      	bne.n	e44a <__hi0bits+0x1e>
    e446:	3004      	adds	r0, #4
    e448:	011b      	lsls	r3, r3, #4
    e44a:	0f9a      	lsrs	r2, r3, #30
    e44c:	d101      	bne.n	e452 <__hi0bits+0x26>
    e44e:	3002      	adds	r0, #2
    e450:	009b      	lsls	r3, r3, #2
    e452:	2b00      	cmp	r3, #0
    e454:	db03      	blt.n	e45e <__hi0bits+0x32>
    e456:	3001      	adds	r0, #1
    e458:	005b      	lsls	r3, r3, #1
    e45a:	d400      	bmi.n	e45e <__hi0bits+0x32>
    e45c:	2020      	movs	r0, #32
    e45e:	4770      	bx	lr

0000e460 <__lo0bits>:
    e460:	6803      	ldr	r3, [r0, #0]
    e462:	075a      	lsls	r2, r3, #29
    e464:	d009      	beq.n	e47a <__lo0bits+0x1a>
    e466:	2200      	movs	r2, #0
    e468:	07d9      	lsls	r1, r3, #31
    e46a:	d404      	bmi.n	e476 <__lo0bits+0x16>
    e46c:	079a      	lsls	r2, r3, #30
    e46e:	d420      	bmi.n	e4b2 <__lo0bits+0x52>
    e470:	2202      	movs	r2, #2
    e472:	089b      	lsrs	r3, r3, #2
    e474:	6003      	str	r3, [r0, #0]
    e476:	0010      	movs	r0, r2
    e478:	4770      	bx	lr
    e47a:	0419      	lsls	r1, r3, #16
    e47c:	2200      	movs	r2, #0
    e47e:	2900      	cmp	r1, #0
    e480:	d101      	bne.n	e486 <__lo0bits+0x26>
    e482:	0c1b      	lsrs	r3, r3, #16
    e484:	3210      	adds	r2, #16
    e486:	21ff      	movs	r1, #255	; 0xff
    e488:	4219      	tst	r1, r3
    e48a:	d101      	bne.n	e490 <__lo0bits+0x30>
    e48c:	3208      	adds	r2, #8
    e48e:	0a1b      	lsrs	r3, r3, #8
    e490:	0719      	lsls	r1, r3, #28
    e492:	d101      	bne.n	e498 <__lo0bits+0x38>
    e494:	3204      	adds	r2, #4
    e496:	091b      	lsrs	r3, r3, #4
    e498:	0799      	lsls	r1, r3, #30
    e49a:	d101      	bne.n	e4a0 <__lo0bits+0x40>
    e49c:	3202      	adds	r2, #2
    e49e:	089b      	lsrs	r3, r3, #2
    e4a0:	07d9      	lsls	r1, r3, #31
    e4a2:	d404      	bmi.n	e4ae <__lo0bits+0x4e>
    e4a4:	085b      	lsrs	r3, r3, #1
    e4a6:	d101      	bne.n	e4ac <__lo0bits+0x4c>
    e4a8:	2220      	movs	r2, #32
    e4aa:	e7e4      	b.n	e476 <__lo0bits+0x16>
    e4ac:	3201      	adds	r2, #1
    e4ae:	6003      	str	r3, [r0, #0]
    e4b0:	e7e1      	b.n	e476 <__lo0bits+0x16>
    e4b2:	085b      	lsrs	r3, r3, #1
    e4b4:	6003      	str	r3, [r0, #0]
    e4b6:	2201      	movs	r2, #1
    e4b8:	e7dd      	b.n	e476 <__lo0bits+0x16>
    e4ba:	46c0      	nop			; (mov r8, r8)

0000e4bc <__i2b>:
    e4bc:	b510      	push	{r4, lr}
    e4be:	000c      	movs	r4, r1
    e4c0:	2101      	movs	r1, #1
    e4c2:	f7ff ff3b 	bl	e33c <_Balloc>
    e4c6:	2301      	movs	r3, #1
    e4c8:	6144      	str	r4, [r0, #20]
    e4ca:	6103      	str	r3, [r0, #16]
    e4cc:	bd10      	pop	{r4, pc}
    e4ce:	46c0      	nop			; (mov r8, r8)

0000e4d0 <__multiply>:
    e4d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    e4d2:	4657      	mov	r7, sl
    e4d4:	464e      	mov	r6, r9
    e4d6:	4645      	mov	r5, r8
    e4d8:	46de      	mov	lr, fp
    e4da:	b5e0      	push	{r5, r6, r7, lr}
    e4dc:	6914      	ldr	r4, [r2, #16]
    e4de:	690e      	ldr	r6, [r1, #16]
    e4e0:	b085      	sub	sp, #20
    e4e2:	000f      	movs	r7, r1
    e4e4:	0015      	movs	r5, r2
    e4e6:	42a6      	cmp	r6, r4
    e4e8:	da04      	bge.n	e4f4 <__multiply+0x24>
    e4ea:	0033      	movs	r3, r6
    e4ec:	0017      	movs	r7, r2
    e4ee:	0026      	movs	r6, r4
    e4f0:	000d      	movs	r5, r1
    e4f2:	001c      	movs	r4, r3
    e4f4:	1933      	adds	r3, r6, r4
    e4f6:	4698      	mov	r8, r3
    e4f8:	68bb      	ldr	r3, [r7, #8]
    e4fa:	6879      	ldr	r1, [r7, #4]
    e4fc:	4598      	cmp	r8, r3
    e4fe:	dd00      	ble.n	e502 <__multiply+0x32>
    e500:	3101      	adds	r1, #1
    e502:	f7ff ff1b 	bl	e33c <_Balloc>
    e506:	2214      	movs	r2, #20
    e508:	0003      	movs	r3, r0
    e50a:	4694      	mov	ip, r2
    e50c:	4463      	add	r3, ip
    e50e:	469b      	mov	fp, r3
    e510:	4643      	mov	r3, r8
    e512:	009b      	lsls	r3, r3, #2
    e514:	445b      	add	r3, fp
    e516:	0019      	movs	r1, r3
    e518:	9302      	str	r3, [sp, #8]
    e51a:	9003      	str	r0, [sp, #12]
    e51c:	465b      	mov	r3, fp
    e51e:	2200      	movs	r2, #0
    e520:	458b      	cmp	fp, r1
    e522:	d203      	bcs.n	e52c <__multiply+0x5c>
    e524:	9902      	ldr	r1, [sp, #8]
    e526:	c304      	stmia	r3!, {r2}
    e528:	4299      	cmp	r1, r3
    e52a:	d8fc      	bhi.n	e526 <__multiply+0x56>
    e52c:	2314      	movs	r3, #20
    e52e:	00a4      	lsls	r4, r4, #2
    e530:	469a      	mov	sl, r3
    e532:	3714      	adds	r7, #20
    e534:	0023      	movs	r3, r4
    e536:	46bc      	mov	ip, r7
    e538:	44aa      	add	sl, r5
    e53a:	00b6      	lsls	r6, r6, #2
    e53c:	4453      	add	r3, sl
    e53e:	9700      	str	r7, [sp, #0]
    e540:	44b4      	add	ip, r6
    e542:	9301      	str	r3, [sp, #4]
    e544:	459a      	cmp	sl, r3
    e546:	d24f      	bcs.n	e5e8 <__multiply+0x118>
    e548:	4653      	mov	r3, sl
    e54a:	681b      	ldr	r3, [r3, #0]
    e54c:	041e      	lsls	r6, r3, #16
    e54e:	0c36      	lsrs	r6, r6, #16
    e550:	d020      	beq.n	e594 <__multiply+0xc4>
    e552:	465c      	mov	r4, fp
    e554:	2700      	movs	r7, #0
    e556:	9d00      	ldr	r5, [sp, #0]
    e558:	0021      	movs	r1, r4
    e55a:	cc08      	ldmia	r4!, {r3}
    e55c:	cd04      	ldmia	r5!, {r2}
    e55e:	4699      	mov	r9, r3
    e560:	4648      	mov	r0, r9
    e562:	0413      	lsls	r3, r2, #16
    e564:	0c1b      	lsrs	r3, r3, #16
    e566:	4373      	muls	r3, r6
    e568:	0400      	lsls	r0, r0, #16
    e56a:	0c00      	lsrs	r0, r0, #16
    e56c:	181b      	adds	r3, r3, r0
    e56e:	19d8      	adds	r0, r3, r7
    e570:	0c13      	lsrs	r3, r2, #16
    e572:	464a      	mov	r2, r9
    e574:	4373      	muls	r3, r6
    e576:	0c12      	lsrs	r2, r2, #16
    e578:	189b      	adds	r3, r3, r2
    e57a:	0c02      	lsrs	r2, r0, #16
    e57c:	189b      	adds	r3, r3, r2
    e57e:	0402      	lsls	r2, r0, #16
    e580:	0c1f      	lsrs	r7, r3, #16
    e582:	0c12      	lsrs	r2, r2, #16
    e584:	041b      	lsls	r3, r3, #16
    e586:	4313      	orrs	r3, r2
    e588:	600b      	str	r3, [r1, #0]
    e58a:	45ac      	cmp	ip, r5
    e58c:	d8e4      	bhi.n	e558 <__multiply+0x88>
    e58e:	4653      	mov	r3, sl
    e590:	6027      	str	r7, [r4, #0]
    e592:	681b      	ldr	r3, [r3, #0]
    e594:	0c1e      	lsrs	r6, r3, #16
    e596:	d020      	beq.n	e5da <__multiply+0x10a>
    e598:	465b      	mov	r3, fp
    e59a:	2100      	movs	r1, #0
    e59c:	681b      	ldr	r3, [r3, #0]
    e59e:	465c      	mov	r4, fp
    e5a0:	0018      	movs	r0, r3
    e5a2:	000f      	movs	r7, r1
    e5a4:	4662      	mov	r2, ip
    e5a6:	9d00      	ldr	r5, [sp, #0]
    e5a8:	8829      	ldrh	r1, [r5, #0]
    e5aa:	0c00      	lsrs	r0, r0, #16
    e5ac:	4371      	muls	r1, r6
    e5ae:	1809      	adds	r1, r1, r0
    e5b0:	19c9      	adds	r1, r1, r7
    e5b2:	041b      	lsls	r3, r3, #16
    e5b4:	0408      	lsls	r0, r1, #16
    e5b6:	0c1b      	lsrs	r3, r3, #16
    e5b8:	4303      	orrs	r3, r0
    e5ba:	6023      	str	r3, [r4, #0]
    e5bc:	cd08      	ldmia	r5!, {r3}
    e5be:	6860      	ldr	r0, [r4, #4]
    e5c0:	0c1b      	lsrs	r3, r3, #16
    e5c2:	4373      	muls	r3, r6
    e5c4:	0407      	lsls	r7, r0, #16
    e5c6:	0c3f      	lsrs	r7, r7, #16
    e5c8:	19db      	adds	r3, r3, r7
    e5ca:	0c09      	lsrs	r1, r1, #16
    e5cc:	185b      	adds	r3, r3, r1
    e5ce:	0c1f      	lsrs	r7, r3, #16
    e5d0:	3404      	adds	r4, #4
    e5d2:	42aa      	cmp	r2, r5
    e5d4:	d8e8      	bhi.n	e5a8 <__multiply+0xd8>
    e5d6:	4694      	mov	ip, r2
    e5d8:	6023      	str	r3, [r4, #0]
    e5da:	2304      	movs	r3, #4
    e5dc:	4699      	mov	r9, r3
    e5de:	9b01      	ldr	r3, [sp, #4]
    e5e0:	44ca      	add	sl, r9
    e5e2:	44cb      	add	fp, r9
    e5e4:	4553      	cmp	r3, sl
    e5e6:	d8af      	bhi.n	e548 <__multiply+0x78>
    e5e8:	4643      	mov	r3, r8
    e5ea:	2b00      	cmp	r3, #0
    e5ec:	dd0e      	ble.n	e60c <__multiply+0x13c>
    e5ee:	9b02      	ldr	r3, [sp, #8]
    e5f0:	3b04      	subs	r3, #4
    e5f2:	681a      	ldr	r2, [r3, #0]
    e5f4:	2a00      	cmp	r2, #0
    e5f6:	d109      	bne.n	e60c <__multiply+0x13c>
    e5f8:	4642      	mov	r2, r8
    e5fa:	e003      	b.n	e604 <__multiply+0x134>
    e5fc:	3b04      	subs	r3, #4
    e5fe:	6819      	ldr	r1, [r3, #0]
    e600:	2900      	cmp	r1, #0
    e602:	d102      	bne.n	e60a <__multiply+0x13a>
    e604:	3a01      	subs	r2, #1
    e606:	2a00      	cmp	r2, #0
    e608:	d1f8      	bne.n	e5fc <__multiply+0x12c>
    e60a:	4690      	mov	r8, r2
    e60c:	9b03      	ldr	r3, [sp, #12]
    e60e:	4642      	mov	r2, r8
    e610:	0018      	movs	r0, r3
    e612:	611a      	str	r2, [r3, #16]
    e614:	b005      	add	sp, #20
    e616:	bc3c      	pop	{r2, r3, r4, r5}
    e618:	4690      	mov	r8, r2
    e61a:	4699      	mov	r9, r3
    e61c:	46a2      	mov	sl, r4
    e61e:	46ab      	mov	fp, r5
    e620:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e622:	46c0      	nop			; (mov r8, r8)

0000e624 <__pow5mult>:
    e624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e626:	4647      	mov	r7, r8
    e628:	46ce      	mov	lr, r9
    e62a:	2303      	movs	r3, #3
    e62c:	b580      	push	{r7, lr}
    e62e:	4680      	mov	r8, r0
    e630:	000f      	movs	r7, r1
    e632:	0014      	movs	r4, r2
    e634:	4013      	ands	r3, r2
    e636:	d13a      	bne.n	e6ae <__pow5mult+0x8a>
    e638:	10a4      	asrs	r4, r4, #2
    e63a:	003e      	movs	r6, r7
    e63c:	2c00      	cmp	r4, #0
    e63e:	d025      	beq.n	e68c <__pow5mult+0x68>
    e640:	4643      	mov	r3, r8
    e642:	6c9d      	ldr	r5, [r3, #72]	; 0x48
    e644:	2d00      	cmp	r5, #0
    e646:	d03b      	beq.n	e6c0 <__pow5mult+0x9c>
    e648:	003e      	movs	r6, r7
    e64a:	2300      	movs	r3, #0
    e64c:	2701      	movs	r7, #1
    e64e:	4699      	mov	r9, r3
    e650:	4227      	tst	r7, r4
    e652:	d107      	bne.n	e664 <__pow5mult+0x40>
    e654:	1064      	asrs	r4, r4, #1
    e656:	d019      	beq.n	e68c <__pow5mult+0x68>
    e658:	6828      	ldr	r0, [r5, #0]
    e65a:	2800      	cmp	r0, #0
    e65c:	d01b      	beq.n	e696 <__pow5mult+0x72>
    e65e:	0005      	movs	r5, r0
    e660:	4227      	tst	r7, r4
    e662:	d0f7      	beq.n	e654 <__pow5mult+0x30>
    e664:	002a      	movs	r2, r5
    e666:	0031      	movs	r1, r6
    e668:	4640      	mov	r0, r8
    e66a:	f7ff ff31 	bl	e4d0 <__multiply>
    e66e:	2e00      	cmp	r6, #0
    e670:	d01b      	beq.n	e6aa <__pow5mult+0x86>
    e672:	4642      	mov	r2, r8
    e674:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    e676:	6873      	ldr	r3, [r6, #4]
    e678:	4694      	mov	ip, r2
    e67a:	009b      	lsls	r3, r3, #2
    e67c:	4463      	add	r3, ip
    e67e:	681a      	ldr	r2, [r3, #0]
    e680:	1064      	asrs	r4, r4, #1
    e682:	6032      	str	r2, [r6, #0]
    e684:	601e      	str	r6, [r3, #0]
    e686:	0006      	movs	r6, r0
    e688:	2c00      	cmp	r4, #0
    e68a:	d1e5      	bne.n	e658 <__pow5mult+0x34>
    e68c:	0030      	movs	r0, r6
    e68e:	bc0c      	pop	{r2, r3}
    e690:	4690      	mov	r8, r2
    e692:	4699      	mov	r9, r3
    e694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e696:	002a      	movs	r2, r5
    e698:	0029      	movs	r1, r5
    e69a:	4640      	mov	r0, r8
    e69c:	f7ff ff18 	bl	e4d0 <__multiply>
    e6a0:	464b      	mov	r3, r9
    e6a2:	6028      	str	r0, [r5, #0]
    e6a4:	6003      	str	r3, [r0, #0]
    e6a6:	0005      	movs	r5, r0
    e6a8:	e7da      	b.n	e660 <__pow5mult+0x3c>
    e6aa:	0006      	movs	r6, r0
    e6ac:	e7d2      	b.n	e654 <__pow5mult+0x30>
    e6ae:	4a0b      	ldr	r2, [pc, #44]	; (e6dc <__pow5mult+0xb8>)
    e6b0:	3b01      	subs	r3, #1
    e6b2:	009b      	lsls	r3, r3, #2
    e6b4:	589a      	ldr	r2, [r3, r2]
    e6b6:	2300      	movs	r3, #0
    e6b8:	f7ff fe72 	bl	e3a0 <__multadd>
    e6bc:	0007      	movs	r7, r0
    e6be:	e7bb      	b.n	e638 <__pow5mult+0x14>
    e6c0:	2101      	movs	r1, #1
    e6c2:	4640      	mov	r0, r8
    e6c4:	f7ff fe3a 	bl	e33c <_Balloc>
    e6c8:	4b05      	ldr	r3, [pc, #20]	; (e6e0 <__pow5mult+0xbc>)
    e6ca:	0005      	movs	r5, r0
    e6cc:	6143      	str	r3, [r0, #20]
    e6ce:	2301      	movs	r3, #1
    e6d0:	6103      	str	r3, [r0, #16]
    e6d2:	4643      	mov	r3, r8
    e6d4:	6498      	str	r0, [r3, #72]	; 0x48
    e6d6:	2300      	movs	r3, #0
    e6d8:	6003      	str	r3, [r0, #0]
    e6da:	e7b5      	b.n	e648 <__pow5mult+0x24>
    e6dc:	00010148 	.word	0x00010148
    e6e0:	00000271 	.word	0x00000271

0000e6e4 <__lshift>:
    e6e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e6e6:	464e      	mov	r6, r9
    e6e8:	4645      	mov	r5, r8
    e6ea:	46de      	mov	lr, fp
    e6ec:	4657      	mov	r7, sl
    e6ee:	b5e0      	push	{r5, r6, r7, lr}
    e6f0:	000e      	movs	r6, r1
    e6f2:	6933      	ldr	r3, [r6, #16]
    e6f4:	1154      	asrs	r4, r2, #5
    e6f6:	4698      	mov	r8, r3
    e6f8:	44a0      	add	r8, r4
    e6fa:	4643      	mov	r3, r8
    e6fc:	1c5d      	adds	r5, r3, #1
    e6fe:	68b3      	ldr	r3, [r6, #8]
    e700:	4683      	mov	fp, r0
    e702:	4691      	mov	r9, r2
    e704:	6849      	ldr	r1, [r1, #4]
    e706:	429d      	cmp	r5, r3
    e708:	dd03      	ble.n	e712 <__lshift+0x2e>
    e70a:	3101      	adds	r1, #1
    e70c:	005b      	lsls	r3, r3, #1
    e70e:	429d      	cmp	r5, r3
    e710:	dcfb      	bgt.n	e70a <__lshift+0x26>
    e712:	4658      	mov	r0, fp
    e714:	f7ff fe12 	bl	e33c <_Balloc>
    e718:	0003      	movs	r3, r0
    e71a:	4684      	mov	ip, r0
    e71c:	3314      	adds	r3, #20
    e71e:	2c00      	cmp	r4, #0
    e720:	dd06      	ble.n	e730 <__lshift+0x4c>
    e722:	2100      	movs	r1, #0
    e724:	00a4      	lsls	r4, r4, #2
    e726:	001a      	movs	r2, r3
    e728:	191b      	adds	r3, r3, r4
    e72a:	c202      	stmia	r2!, {r1}
    e72c:	4293      	cmp	r3, r2
    e72e:	d1fc      	bne.n	e72a <__lshift+0x46>
    e730:	6932      	ldr	r2, [r6, #16]
    e732:	4648      	mov	r0, r9
    e734:	0097      	lsls	r7, r2, #2
    e736:	0031      	movs	r1, r6
    e738:	221f      	movs	r2, #31
    e73a:	3114      	adds	r1, #20
    e73c:	4010      	ands	r0, r2
    e73e:	19cf      	adds	r7, r1, r7
    e740:	4681      	mov	r9, r0
    e742:	2800      	cmp	r0, #0
    e744:	d025      	beq.n	e792 <__lshift+0xae>
    e746:	2220      	movs	r2, #32
    e748:	1a12      	subs	r2, r2, r0
    e74a:	4692      	mov	sl, r2
    e74c:	2200      	movs	r2, #0
    e74e:	4648      	mov	r0, r9
    e750:	680c      	ldr	r4, [r1, #0]
    e752:	4084      	lsls	r4, r0
    e754:	4650      	mov	r0, sl
    e756:	4314      	orrs	r4, r2
    e758:	601c      	str	r4, [r3, #0]
    e75a:	c904      	ldmia	r1!, {r2}
    e75c:	3304      	adds	r3, #4
    e75e:	40c2      	lsrs	r2, r0
    e760:	428f      	cmp	r7, r1
    e762:	d8f4      	bhi.n	e74e <__lshift+0x6a>
    e764:	601a      	str	r2, [r3, #0]
    e766:	2a00      	cmp	r2, #0
    e768:	d001      	beq.n	e76e <__lshift+0x8a>
    e76a:	4645      	mov	r5, r8
    e76c:	3502      	adds	r5, #2
    e76e:	4663      	mov	r3, ip
    e770:	3d01      	subs	r5, #1
    e772:	611d      	str	r5, [r3, #16]
    e774:	6873      	ldr	r3, [r6, #4]
    e776:	4660      	mov	r0, ip
    e778:	009a      	lsls	r2, r3, #2
    e77a:	465b      	mov	r3, fp
    e77c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    e77e:	189b      	adds	r3, r3, r2
    e780:	681a      	ldr	r2, [r3, #0]
    e782:	6032      	str	r2, [r6, #0]
    e784:	601e      	str	r6, [r3, #0]
    e786:	bc3c      	pop	{r2, r3, r4, r5}
    e788:	4690      	mov	r8, r2
    e78a:	4699      	mov	r9, r3
    e78c:	46a2      	mov	sl, r4
    e78e:	46ab      	mov	fp, r5
    e790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e792:	c904      	ldmia	r1!, {r2}
    e794:	c304      	stmia	r3!, {r2}
    e796:	428f      	cmp	r7, r1
    e798:	d9e9      	bls.n	e76e <__lshift+0x8a>
    e79a:	c904      	ldmia	r1!, {r2}
    e79c:	c304      	stmia	r3!, {r2}
    e79e:	428f      	cmp	r7, r1
    e7a0:	d8f7      	bhi.n	e792 <__lshift+0xae>
    e7a2:	e7e4      	b.n	e76e <__lshift+0x8a>

0000e7a4 <__mcmp>:
    e7a4:	690a      	ldr	r2, [r1, #16]
    e7a6:	6903      	ldr	r3, [r0, #16]
    e7a8:	b530      	push	{r4, r5, lr}
    e7aa:	0005      	movs	r5, r0
    e7ac:	1a98      	subs	r0, r3, r2
    e7ae:	d111      	bne.n	e7d4 <__mcmp+0x30>
    e7b0:	0092      	lsls	r2, r2, #2
    e7b2:	3514      	adds	r5, #20
    e7b4:	3114      	adds	r1, #20
    e7b6:	18ab      	adds	r3, r5, r2
    e7b8:	1889      	adds	r1, r1, r2
    e7ba:	e001      	b.n	e7c0 <__mcmp+0x1c>
    e7bc:	429d      	cmp	r5, r3
    e7be:	d209      	bcs.n	e7d4 <__mcmp+0x30>
    e7c0:	3b04      	subs	r3, #4
    e7c2:	3904      	subs	r1, #4
    e7c4:	681c      	ldr	r4, [r3, #0]
    e7c6:	680a      	ldr	r2, [r1, #0]
    e7c8:	4294      	cmp	r4, r2
    e7ca:	d0f7      	beq.n	e7bc <__mcmp+0x18>
    e7cc:	4294      	cmp	r4, r2
    e7ce:	4180      	sbcs	r0, r0
    e7d0:	2201      	movs	r2, #1
    e7d2:	4310      	orrs	r0, r2
    e7d4:	bd30      	pop	{r4, r5, pc}
    e7d6:	46c0      	nop			; (mov r8, r8)

0000e7d8 <__mdiff>:
    e7d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e7da:	4645      	mov	r5, r8
    e7dc:	46de      	mov	lr, fp
    e7de:	4657      	mov	r7, sl
    e7e0:	464e      	mov	r6, r9
    e7e2:	0014      	movs	r4, r2
    e7e4:	690b      	ldr	r3, [r1, #16]
    e7e6:	6912      	ldr	r2, [r2, #16]
    e7e8:	b5e0      	push	{r5, r6, r7, lr}
    e7ea:	4688      	mov	r8, r1
    e7ec:	1a9d      	subs	r5, r3, r2
    e7ee:	d11a      	bne.n	e826 <__mdiff+0x4e>
    e7f0:	000f      	movs	r7, r1
    e7f2:	2114      	movs	r1, #20
    e7f4:	468c      	mov	ip, r1
    e7f6:	0092      	lsls	r2, r2, #2
    e7f8:	3714      	adds	r7, #20
    e7fa:	44a4      	add	ip, r4
    e7fc:	18bb      	adds	r3, r7, r2
    e7fe:	4462      	add	r2, ip
    e800:	e002      	b.n	e808 <__mdiff+0x30>
    e802:	429f      	cmp	r7, r3
    e804:	d300      	bcc.n	e808 <__mdiff+0x30>
    e806:	e070      	b.n	e8ea <__mdiff+0x112>
    e808:	3b04      	subs	r3, #4
    e80a:	3a04      	subs	r2, #4
    e80c:	681e      	ldr	r6, [r3, #0]
    e80e:	6811      	ldr	r1, [r2, #0]
    e810:	428e      	cmp	r6, r1
    e812:	d0f6      	beq.n	e802 <__mdiff+0x2a>
    e814:	d300      	bcc.n	e818 <__mdiff+0x40>
    e816:	e071      	b.n	e8fc <__mdiff+0x124>
    e818:	4643      	mov	r3, r8
    e81a:	003e      	movs	r6, r7
    e81c:	46a0      	mov	r8, r4
    e81e:	4667      	mov	r7, ip
    e820:	001c      	movs	r4, r3
    e822:	2501      	movs	r5, #1
    e824:	e006      	b.n	e834 <__mdiff+0x5c>
    e826:	2d00      	cmp	r5, #0
    e828:	db6a      	blt.n	e900 <__mdiff+0x128>
    e82a:	4647      	mov	r7, r8
    e82c:	0026      	movs	r6, r4
    e82e:	2500      	movs	r5, #0
    e830:	3714      	adds	r7, #20
    e832:	3614      	adds	r6, #20
    e834:	4643      	mov	r3, r8
    e836:	6859      	ldr	r1, [r3, #4]
    e838:	f7ff fd80 	bl	e33c <_Balloc>
    e83c:	4643      	mov	r3, r8
    e83e:	4681      	mov	r9, r0
    e840:	60c5      	str	r5, [r0, #12]
    e842:	6918      	ldr	r0, [r3, #16]
    e844:	464d      	mov	r5, r9
    e846:	0083      	lsls	r3, r0, #2
    e848:	469c      	mov	ip, r3
    e84a:	6923      	ldr	r3, [r4, #16]
    e84c:	44bc      	add	ip, r7
    e84e:	009b      	lsls	r3, r3, #2
    e850:	4698      	mov	r8, r3
    e852:	2300      	movs	r3, #0
    e854:	44b0      	add	r8, r6
    e856:	3514      	adds	r5, #20
    e858:	469a      	mov	sl, r3
    e85a:	e000      	b.n	e85e <__mdiff+0x86>
    e85c:	0027      	movs	r7, r4
    e85e:	ce04      	ldmia	r6!, {r2}
    e860:	003c      	movs	r4, r7
    e862:	4693      	mov	fp, r2
    e864:	4659      	mov	r1, fp
    e866:	cc08      	ldmia	r4!, {r3}
    e868:	0409      	lsls	r1, r1, #16
    e86a:	041a      	lsls	r2, r3, #16
    e86c:	0c12      	lsrs	r2, r2, #16
    e86e:	4452      	add	r2, sl
    e870:	0c09      	lsrs	r1, r1, #16
    e872:	1a52      	subs	r2, r2, r1
    e874:	0c19      	lsrs	r1, r3, #16
    e876:	465b      	mov	r3, fp
    e878:	0c1b      	lsrs	r3, r3, #16
    e87a:	1acb      	subs	r3, r1, r3
    e87c:	1411      	asrs	r1, r2, #16
    e87e:	185b      	adds	r3, r3, r1
    e880:	0412      	lsls	r2, r2, #16
    e882:	1419      	asrs	r1, r3, #16
    e884:	0c12      	lsrs	r2, r2, #16
    e886:	041b      	lsls	r3, r3, #16
    e888:	468a      	mov	sl, r1
    e88a:	4313      	orrs	r3, r2
    e88c:	1d29      	adds	r1, r5, #4
    e88e:	602b      	str	r3, [r5, #0]
    e890:	000d      	movs	r5, r1
    e892:	45b0      	cmp	r8, r6
    e894:	d8e2      	bhi.n	e85c <__mdiff+0x84>
    e896:	45a4      	cmp	ip, r4
    e898:	d916      	bls.n	e8c8 <__mdiff+0xf0>
    e89a:	cc08      	ldmia	r4!, {r3}
    e89c:	041a      	lsls	r2, r3, #16
    e89e:	0c12      	lsrs	r2, r2, #16
    e8a0:	4452      	add	r2, sl
    e8a2:	1416      	asrs	r6, r2, #16
    e8a4:	0c1b      	lsrs	r3, r3, #16
    e8a6:	199b      	adds	r3, r3, r6
    e8a8:	0412      	lsls	r2, r2, #16
    e8aa:	141e      	asrs	r6, r3, #16
    e8ac:	0c12      	lsrs	r2, r2, #16
    e8ae:	041b      	lsls	r3, r3, #16
    e8b0:	4313      	orrs	r3, r2
    e8b2:	46b2      	mov	sl, r6
    e8b4:	c508      	stmia	r5!, {r3}
    e8b6:	45a4      	cmp	ip, r4
    e8b8:	d8ef      	bhi.n	e89a <__mdiff+0xc2>
    e8ba:	4662      	mov	r2, ip
    e8bc:	2403      	movs	r4, #3
    e8be:	1bd2      	subs	r2, r2, r7
    e8c0:	3a05      	subs	r2, #5
    e8c2:	43a2      	bics	r2, r4
    e8c4:	3204      	adds	r2, #4
    e8c6:	1889      	adds	r1, r1, r2
    e8c8:	3904      	subs	r1, #4
    e8ca:	2b00      	cmp	r3, #0
    e8cc:	d104      	bne.n	e8d8 <__mdiff+0x100>
    e8ce:	3904      	subs	r1, #4
    e8d0:	680b      	ldr	r3, [r1, #0]
    e8d2:	3801      	subs	r0, #1
    e8d4:	2b00      	cmp	r3, #0
    e8d6:	d0fa      	beq.n	e8ce <__mdiff+0xf6>
    e8d8:	464b      	mov	r3, r9
    e8da:	6118      	str	r0, [r3, #16]
    e8dc:	4648      	mov	r0, r9
    e8de:	bc3c      	pop	{r2, r3, r4, r5}
    e8e0:	4690      	mov	r8, r2
    e8e2:	4699      	mov	r9, r3
    e8e4:	46a2      	mov	sl, r4
    e8e6:	46ab      	mov	fp, r5
    e8e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e8ea:	2100      	movs	r1, #0
    e8ec:	f7ff fd26 	bl	e33c <_Balloc>
    e8f0:	2301      	movs	r3, #1
    e8f2:	6103      	str	r3, [r0, #16]
    e8f4:	2300      	movs	r3, #0
    e8f6:	4681      	mov	r9, r0
    e8f8:	6143      	str	r3, [r0, #20]
    e8fa:	e7ef      	b.n	e8dc <__mdiff+0x104>
    e8fc:	4666      	mov	r6, ip
    e8fe:	e799      	b.n	e834 <__mdiff+0x5c>
    e900:	0027      	movs	r7, r4
    e902:	000e      	movs	r6, r1
    e904:	46a0      	mov	r8, r4
    e906:	3714      	adds	r7, #20
    e908:	3614      	adds	r6, #20
    e90a:	000c      	movs	r4, r1
    e90c:	2501      	movs	r5, #1
    e90e:	e791      	b.n	e834 <__mdiff+0x5c>

0000e910 <__d2b>:
    e910:	b5f0      	push	{r4, r5, r6, r7, lr}
    e912:	2101      	movs	r1, #1
    e914:	001c      	movs	r4, r3
    e916:	b083      	sub	sp, #12
    e918:	9e08      	ldr	r6, [sp, #32]
    e91a:	0015      	movs	r5, r2
    e91c:	f7ff fd0e 	bl	e33c <_Balloc>
    e920:	0323      	lsls	r3, r4, #12
    e922:	0064      	lsls	r4, r4, #1
    e924:	0007      	movs	r7, r0
    e926:	0b1b      	lsrs	r3, r3, #12
    e928:	0d64      	lsrs	r4, r4, #21
    e92a:	d002      	beq.n	e932 <__d2b+0x22>
    e92c:	2280      	movs	r2, #128	; 0x80
    e92e:	0352      	lsls	r2, r2, #13
    e930:	4313      	orrs	r3, r2
    e932:	9301      	str	r3, [sp, #4]
    e934:	2d00      	cmp	r5, #0
    e936:	d019      	beq.n	e96c <__d2b+0x5c>
    e938:	4668      	mov	r0, sp
    e93a:	9500      	str	r5, [sp, #0]
    e93c:	f7ff fd90 	bl	e460 <__lo0bits>
    e940:	2800      	cmp	r0, #0
    e942:	d130      	bne.n	e9a6 <__d2b+0x96>
    e944:	9b00      	ldr	r3, [sp, #0]
    e946:	617b      	str	r3, [r7, #20]
    e948:	9b01      	ldr	r3, [sp, #4]
    e94a:	61bb      	str	r3, [r7, #24]
    e94c:	1e5a      	subs	r2, r3, #1
    e94e:	4193      	sbcs	r3, r2
    e950:	1c5d      	adds	r5, r3, #1
    e952:	613d      	str	r5, [r7, #16]
    e954:	2c00      	cmp	r4, #0
    e956:	d014      	beq.n	e982 <__d2b+0x72>
    e958:	4b19      	ldr	r3, [pc, #100]	; (e9c0 <__d2b+0xb0>)
    e95a:	469c      	mov	ip, r3
    e95c:	2335      	movs	r3, #53	; 0x35
    e95e:	4464      	add	r4, ip
    e960:	1824      	adds	r4, r4, r0
    e962:	1a18      	subs	r0, r3, r0
    e964:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e966:	6034      	str	r4, [r6, #0]
    e968:	6018      	str	r0, [r3, #0]
    e96a:	e019      	b.n	e9a0 <__d2b+0x90>
    e96c:	a801      	add	r0, sp, #4
    e96e:	f7ff fd77 	bl	e460 <__lo0bits>
    e972:	9b01      	ldr	r3, [sp, #4]
    e974:	3020      	adds	r0, #32
    e976:	617b      	str	r3, [r7, #20]
    e978:	2301      	movs	r3, #1
    e97a:	2501      	movs	r5, #1
    e97c:	613b      	str	r3, [r7, #16]
    e97e:	2c00      	cmp	r4, #0
    e980:	d1ea      	bne.n	e958 <__d2b+0x48>
    e982:	4b10      	ldr	r3, [pc, #64]	; (e9c4 <__d2b+0xb4>)
    e984:	469c      	mov	ip, r3
    e986:	4b10      	ldr	r3, [pc, #64]	; (e9c8 <__d2b+0xb8>)
    e988:	4460      	add	r0, ip
    e98a:	18eb      	adds	r3, r5, r3
    e98c:	009b      	lsls	r3, r3, #2
    e98e:	18fb      	adds	r3, r7, r3
    e990:	6030      	str	r0, [r6, #0]
    e992:	6958      	ldr	r0, [r3, #20]
    e994:	f7ff fd4a 	bl	e42c <__hi0bits>
    e998:	016b      	lsls	r3, r5, #5
    e99a:	1a18      	subs	r0, r3, r0
    e99c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e99e:	6018      	str	r0, [r3, #0]
    e9a0:	0038      	movs	r0, r7
    e9a2:	b003      	add	sp, #12
    e9a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e9a6:	9b01      	ldr	r3, [sp, #4]
    e9a8:	2220      	movs	r2, #32
    e9aa:	0019      	movs	r1, r3
    e9ac:	1a12      	subs	r2, r2, r0
    e9ae:	4091      	lsls	r1, r2
    e9b0:	000a      	movs	r2, r1
    e9b2:	40c3      	lsrs	r3, r0
    e9b4:	9900      	ldr	r1, [sp, #0]
    e9b6:	9301      	str	r3, [sp, #4]
    e9b8:	430a      	orrs	r2, r1
    e9ba:	617a      	str	r2, [r7, #20]
    e9bc:	e7c5      	b.n	e94a <__d2b+0x3a>
    e9be:	46c0      	nop			; (mov r8, r8)
    e9c0:	fffffbcd 	.word	0xfffffbcd
    e9c4:	fffffbce 	.word	0xfffffbce
    e9c8:	3fffffff 	.word	0x3fffffff

0000e9cc <_realloc_r>:
    e9cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    e9ce:	464e      	mov	r6, r9
    e9d0:	4645      	mov	r5, r8
    e9d2:	46de      	mov	lr, fp
    e9d4:	4657      	mov	r7, sl
    e9d6:	b5e0      	push	{r5, r6, r7, lr}
    e9d8:	b085      	sub	sp, #20
    e9da:	9001      	str	r0, [sp, #4]
    e9dc:	000e      	movs	r6, r1
    e9de:	0015      	movs	r5, r2
    e9e0:	2900      	cmp	r1, #0
    e9e2:	d100      	bne.n	e9e6 <_realloc_r+0x1a>
    e9e4:	e09e      	b.n	eb24 <_realloc_r+0x158>
    e9e6:	0037      	movs	r7, r6
    e9e8:	9801      	ldr	r0, [sp, #4]
    e9ea:	3f08      	subs	r7, #8
    e9ec:	f7ff fc96 	bl	e31c <__malloc_lock>
    e9f0:	687a      	ldr	r2, [r7, #4]
    e9f2:	2303      	movs	r3, #3
    e9f4:	0014      	movs	r4, r2
    e9f6:	439c      	bics	r4, r3
    e9f8:	002b      	movs	r3, r5
    e9fa:	330b      	adds	r3, #11
    e9fc:	46b9      	mov	r9, r7
    e9fe:	2b16      	cmp	r3, #22
    ea00:	d847      	bhi.n	ea92 <_realloc_r+0xc6>
    ea02:	2110      	movs	r1, #16
    ea04:	2310      	movs	r3, #16
    ea06:	4688      	mov	r8, r1
    ea08:	4545      	cmp	r5, r8
    ea0a:	d846      	bhi.n	ea9a <_realloc_r+0xce>
    ea0c:	429c      	cmp	r4, r3
    ea0e:	da49      	bge.n	eaa4 <_realloc_r+0xd8>
    ea10:	49cc      	ldr	r1, [pc, #816]	; (ed44 <_realloc_r+0x378>)
    ea12:	1938      	adds	r0, r7, r4
    ea14:	468b      	mov	fp, r1
    ea16:	6889      	ldr	r1, [r1, #8]
    ea18:	9002      	str	r0, [sp, #8]
    ea1a:	4288      	cmp	r0, r1
    ea1c:	d100      	bne.n	ea20 <_realloc_r+0x54>
    ea1e:	e0c2      	b.n	eba6 <_realloc_r+0x1da>
    ea20:	2101      	movs	r1, #1
    ea22:	468a      	mov	sl, r1
    ea24:	6840      	ldr	r0, [r0, #4]
    ea26:	0001      	movs	r1, r0
    ea28:	9003      	str	r0, [sp, #12]
    ea2a:	4650      	mov	r0, sl
    ea2c:	4381      	bics	r1, r0
    ea2e:	468c      	mov	ip, r1
    ea30:	9902      	ldr	r1, [sp, #8]
    ea32:	468b      	mov	fp, r1
    ea34:	44dc      	add	ip, fp
    ea36:	4661      	mov	r1, ip
    ea38:	6849      	ldr	r1, [r1, #4]
    ea3a:	4201      	tst	r1, r0
    ea3c:	d04d      	beq.n	eada <_realloc_r+0x10e>
    ea3e:	4210      	tst	r0, r2
    ea40:	d100      	bne.n	ea44 <_realloc_r+0x78>
    ea42:	e0a2      	b.n	eb8a <_realloc_r+0x1be>
    ea44:	0029      	movs	r1, r5
    ea46:	9801      	ldr	r0, [sp, #4]
    ea48:	f7ff f924 	bl	dc94 <_malloc_r>
    ea4c:	1e05      	subs	r5, r0, #0
    ea4e:	d039      	beq.n	eac4 <_realloc_r+0xf8>
    ea50:	2301      	movs	r3, #1
    ea52:	0002      	movs	r2, r0
    ea54:	6879      	ldr	r1, [r7, #4]
    ea56:	3a08      	subs	r2, #8
    ea58:	4399      	bics	r1, r3
    ea5a:	187f      	adds	r7, r7, r1
    ea5c:	42ba      	cmp	r2, r7
    ea5e:	d100      	bne.n	ea62 <_realloc_r+0x96>
    ea60:	e12e      	b.n	ecc0 <_realloc_r+0x2f4>
    ea62:	1f22      	subs	r2, r4, #4
    ea64:	2a24      	cmp	r2, #36	; 0x24
    ea66:	d900      	bls.n	ea6a <_realloc_r+0x9e>
    ea68:	e114      	b.n	ec94 <_realloc_r+0x2c8>
    ea6a:	2a13      	cmp	r2, #19
    ea6c:	d900      	bls.n	ea70 <_realloc_r+0xa4>
    ea6e:	e0e8      	b.n	ec42 <_realloc_r+0x276>
    ea70:	0003      	movs	r3, r0
    ea72:	0032      	movs	r2, r6
    ea74:	6811      	ldr	r1, [r2, #0]
    ea76:	6019      	str	r1, [r3, #0]
    ea78:	6851      	ldr	r1, [r2, #4]
    ea7a:	6059      	str	r1, [r3, #4]
    ea7c:	6892      	ldr	r2, [r2, #8]
    ea7e:	609a      	str	r2, [r3, #8]
    ea80:	9c01      	ldr	r4, [sp, #4]
    ea82:	0031      	movs	r1, r6
    ea84:	0020      	movs	r0, r4
    ea86:	f7fe fde7 	bl	d658 <_free_r>
    ea8a:	0020      	movs	r0, r4
    ea8c:	f7ff fc4e 	bl	e32c <__malloc_unlock>
    ea90:	e01b      	b.n	eaca <_realloc_r+0xfe>
    ea92:	2107      	movs	r1, #7
    ea94:	438b      	bics	r3, r1
    ea96:	4698      	mov	r8, r3
    ea98:	d5b6      	bpl.n	ea08 <_realloc_r+0x3c>
    ea9a:	230c      	movs	r3, #12
    ea9c:	9a01      	ldr	r2, [sp, #4]
    ea9e:	2500      	movs	r5, #0
    eaa0:	6013      	str	r3, [r2, #0]
    eaa2:	e012      	b.n	eaca <_realloc_r+0xfe>
    eaa4:	0035      	movs	r5, r6
    eaa6:	4643      	mov	r3, r8
    eaa8:	1ae3      	subs	r3, r4, r3
    eaaa:	2b0f      	cmp	r3, #15
    eaac:	d825      	bhi.n	eafa <_realloc_r+0x12e>
    eaae:	464b      	mov	r3, r9
    eab0:	2201      	movs	r2, #1
    eab2:	4649      	mov	r1, r9
    eab4:	685b      	ldr	r3, [r3, #4]
    eab6:	4013      	ands	r3, r2
    eab8:	4323      	orrs	r3, r4
    eaba:	604b      	str	r3, [r1, #4]
    eabc:	444c      	add	r4, r9
    eabe:	6863      	ldr	r3, [r4, #4]
    eac0:	431a      	orrs	r2, r3
    eac2:	6062      	str	r2, [r4, #4]
    eac4:	9801      	ldr	r0, [sp, #4]
    eac6:	f7ff fc31 	bl	e32c <__malloc_unlock>
    eaca:	0028      	movs	r0, r5
    eacc:	b005      	add	sp, #20
    eace:	bc3c      	pop	{r2, r3, r4, r5}
    ead0:	4690      	mov	r8, r2
    ead2:	4699      	mov	r9, r3
    ead4:	46a2      	mov	sl, r4
    ead6:	46ab      	mov	fp, r5
    ead8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eada:	2103      	movs	r1, #3
    eadc:	9803      	ldr	r0, [sp, #12]
    eade:	468c      	mov	ip, r1
    eae0:	4388      	bics	r0, r1
    eae2:	1821      	adds	r1, r4, r0
    eae4:	468b      	mov	fp, r1
    eae6:	4299      	cmp	r1, r3
    eae8:	db21      	blt.n	eb2e <_realloc_r+0x162>
    eaea:	9a02      	ldr	r2, [sp, #8]
    eaec:	0035      	movs	r5, r6
    eaee:	68d3      	ldr	r3, [r2, #12]
    eaf0:	6892      	ldr	r2, [r2, #8]
    eaf2:	465c      	mov	r4, fp
    eaf4:	60d3      	str	r3, [r2, #12]
    eaf6:	609a      	str	r2, [r3, #8]
    eaf8:	e7d5      	b.n	eaa6 <_realloc_r+0xda>
    eafa:	464a      	mov	r2, r9
    eafc:	2001      	movs	r0, #1
    eafe:	4646      	mov	r6, r8
    eb00:	6852      	ldr	r2, [r2, #4]
    eb02:	4649      	mov	r1, r9
    eb04:	4002      	ands	r2, r0
    eb06:	4332      	orrs	r2, r6
    eb08:	464e      	mov	r6, r9
    eb0a:	4441      	add	r1, r8
    eb0c:	4303      	orrs	r3, r0
    eb0e:	6072      	str	r2, [r6, #4]
    eb10:	444c      	add	r4, r9
    eb12:	604b      	str	r3, [r1, #4]
    eb14:	6863      	ldr	r3, [r4, #4]
    eb16:	3108      	adds	r1, #8
    eb18:	4318      	orrs	r0, r3
    eb1a:	6060      	str	r0, [r4, #4]
    eb1c:	9801      	ldr	r0, [sp, #4]
    eb1e:	f7fe fd9b 	bl	d658 <_free_r>
    eb22:	e7cf      	b.n	eac4 <_realloc_r+0xf8>
    eb24:	0011      	movs	r1, r2
    eb26:	f7ff f8b5 	bl	dc94 <_malloc_r>
    eb2a:	0005      	movs	r5, r0
    eb2c:	e7cd      	b.n	eaca <_realloc_r+0xfe>
    eb2e:	4651      	mov	r1, sl
    eb30:	4211      	tst	r1, r2
    eb32:	d000      	beq.n	eb36 <_realloc_r+0x16a>
    eb34:	e786      	b.n	ea44 <_realloc_r+0x78>
    eb36:	4661      	mov	r1, ip
    eb38:	683a      	ldr	r2, [r7, #0]
    eb3a:	1aba      	subs	r2, r7, r2
    eb3c:	4692      	mov	sl, r2
    eb3e:	6852      	ldr	r2, [r2, #4]
    eb40:	438a      	bics	r2, r1
    eb42:	1880      	adds	r0, r0, r2
    eb44:	4683      	mov	fp, r0
    eb46:	44a3      	add	fp, r4
    eb48:	459b      	cmp	fp, r3
    eb4a:	db26      	blt.n	eb9a <_realloc_r+0x1ce>
    eb4c:	9a02      	ldr	r2, [sp, #8]
    eb4e:	68d3      	ldr	r3, [r2, #12]
    eb50:	6892      	ldr	r2, [r2, #8]
    eb52:	60d3      	str	r3, [r2, #12]
    eb54:	609a      	str	r2, [r3, #8]
    eb56:	4653      	mov	r3, sl
    eb58:	4652      	mov	r2, sl
    eb5a:	4655      	mov	r5, sl
    eb5c:	6892      	ldr	r2, [r2, #8]
    eb5e:	68db      	ldr	r3, [r3, #12]
    eb60:	3508      	adds	r5, #8
    eb62:	60d3      	str	r3, [r2, #12]
    eb64:	609a      	str	r2, [r3, #8]
    eb66:	1f22      	subs	r2, r4, #4
    eb68:	2a24      	cmp	r2, #36	; 0x24
    eb6a:	d900      	bls.n	eb6e <_realloc_r+0x1a2>
    eb6c:	e096      	b.n	ec9c <_realloc_r+0x2d0>
    eb6e:	2a13      	cmp	r2, #19
    eb70:	d972      	bls.n	ec58 <_realloc_r+0x28c>
    eb72:	4653      	mov	r3, sl
    eb74:	6831      	ldr	r1, [r6, #0]
    eb76:	6099      	str	r1, [r3, #8]
    eb78:	6871      	ldr	r1, [r6, #4]
    eb7a:	60d9      	str	r1, [r3, #12]
    eb7c:	2a1b      	cmp	r2, #27
    eb7e:	d900      	bls.n	eb82 <_realloc_r+0x1b6>
    eb80:	e0a4      	b.n	eccc <_realloc_r+0x300>
    eb82:	0032      	movs	r2, r6
    eb84:	3310      	adds	r3, #16
    eb86:	3208      	adds	r2, #8
    eb88:	e068      	b.n	ec5c <_realloc_r+0x290>
    eb8a:	683a      	ldr	r2, [r7, #0]
    eb8c:	1aba      	subs	r2, r7, r2
    eb8e:	4692      	mov	sl, r2
    eb90:	4651      	mov	r1, sl
    eb92:	2203      	movs	r2, #3
    eb94:	6849      	ldr	r1, [r1, #4]
    eb96:	4391      	bics	r1, r2
    eb98:	000a      	movs	r2, r1
    eb9a:	4693      	mov	fp, r2
    eb9c:	44a3      	add	fp, r4
    eb9e:	459b      	cmp	fp, r3
    eba0:	da00      	bge.n	eba4 <_realloc_r+0x1d8>
    eba2:	e74f      	b.n	ea44 <_realloc_r+0x78>
    eba4:	e7d7      	b.n	eb56 <_realloc_r+0x18a>
    eba6:	2003      	movs	r0, #3
    eba8:	9902      	ldr	r1, [sp, #8]
    ebaa:	4684      	mov	ip, r0
    ebac:	6849      	ldr	r1, [r1, #4]
    ebae:	4381      	bics	r1, r0
    ebb0:	4640      	mov	r0, r8
    ebb2:	1909      	adds	r1, r1, r4
    ebb4:	3010      	adds	r0, #16
    ebb6:	9002      	str	r0, [sp, #8]
    ebb8:	4281      	cmp	r1, r0
    ebba:	da58      	bge.n	ec6e <_realloc_r+0x2a2>
    ebbc:	07d2      	lsls	r2, r2, #31
    ebbe:	d500      	bpl.n	ebc2 <_realloc_r+0x1f6>
    ebc0:	e740      	b.n	ea44 <_realloc_r+0x78>
    ebc2:	4660      	mov	r0, ip
    ebc4:	683a      	ldr	r2, [r7, #0]
    ebc6:	1aba      	subs	r2, r7, r2
    ebc8:	4692      	mov	sl, r2
    ebca:	6852      	ldr	r2, [r2, #4]
    ebcc:	4382      	bics	r2, r0
    ebce:	9802      	ldr	r0, [sp, #8]
    ebd0:	1851      	adds	r1, r2, r1
    ebd2:	9103      	str	r1, [sp, #12]
    ebd4:	4288      	cmp	r0, r1
    ebd6:	dce0      	bgt.n	eb9a <_realloc_r+0x1ce>
    ebd8:	4653      	mov	r3, sl
    ebda:	4652      	mov	r2, sl
    ebdc:	4655      	mov	r5, sl
    ebde:	6892      	ldr	r2, [r2, #8]
    ebe0:	68db      	ldr	r3, [r3, #12]
    ebe2:	3508      	adds	r5, #8
    ebe4:	60d3      	str	r3, [r2, #12]
    ebe6:	609a      	str	r2, [r3, #8]
    ebe8:	1f22      	subs	r2, r4, #4
    ebea:	2a24      	cmp	r2, #36	; 0x24
    ebec:	d900      	bls.n	ebf0 <_realloc_r+0x224>
    ebee:	e08e      	b.n	ed0e <_realloc_r+0x342>
    ebf0:	2a13      	cmp	r2, #19
    ebf2:	d800      	bhi.n	ebf6 <_realloc_r+0x22a>
    ebf4:	e088      	b.n	ed08 <_realloc_r+0x33c>
    ebf6:	4653      	mov	r3, sl
    ebf8:	6831      	ldr	r1, [r6, #0]
    ebfa:	6099      	str	r1, [r3, #8]
    ebfc:	6871      	ldr	r1, [r6, #4]
    ebfe:	60d9      	str	r1, [r3, #12]
    ec00:	2a1b      	cmp	r2, #27
    ec02:	d900      	bls.n	ec06 <_realloc_r+0x23a>
    ec04:	e088      	b.n	ed18 <_realloc_r+0x34c>
    ec06:	0032      	movs	r2, r6
    ec08:	3310      	adds	r3, #16
    ec0a:	3208      	adds	r2, #8
    ec0c:	6811      	ldr	r1, [r2, #0]
    ec0e:	6019      	str	r1, [r3, #0]
    ec10:	6851      	ldr	r1, [r2, #4]
    ec12:	6059      	str	r1, [r3, #4]
    ec14:	6892      	ldr	r2, [r2, #8]
    ec16:	609a      	str	r2, [r3, #8]
    ec18:	4651      	mov	r1, sl
    ec1a:	465b      	mov	r3, fp
    ec1c:	4642      	mov	r2, r8
    ec1e:	4441      	add	r1, r8
    ec20:	6099      	str	r1, [r3, #8]
    ec22:	9b03      	ldr	r3, [sp, #12]
    ec24:	9801      	ldr	r0, [sp, #4]
    ec26:	1a9a      	subs	r2, r3, r2
    ec28:	2301      	movs	r3, #1
    ec2a:	431a      	orrs	r2, r3
    ec2c:	604a      	str	r2, [r1, #4]
    ec2e:	4652      	mov	r2, sl
    ec30:	6852      	ldr	r2, [r2, #4]
    ec32:	4013      	ands	r3, r2
    ec34:	4642      	mov	r2, r8
    ec36:	4313      	orrs	r3, r2
    ec38:	4652      	mov	r2, sl
    ec3a:	6053      	str	r3, [r2, #4]
    ec3c:	f7ff fb76 	bl	e32c <__malloc_unlock>
    ec40:	e743      	b.n	eaca <_realloc_r+0xfe>
    ec42:	6833      	ldr	r3, [r6, #0]
    ec44:	6003      	str	r3, [r0, #0]
    ec46:	6873      	ldr	r3, [r6, #4]
    ec48:	6043      	str	r3, [r0, #4]
    ec4a:	2a1b      	cmp	r2, #27
    ec4c:	d82d      	bhi.n	ecaa <_realloc_r+0x2de>
    ec4e:	0003      	movs	r3, r0
    ec50:	0032      	movs	r2, r6
    ec52:	3308      	adds	r3, #8
    ec54:	3208      	adds	r2, #8
    ec56:	e70d      	b.n	ea74 <_realloc_r+0xa8>
    ec58:	002b      	movs	r3, r5
    ec5a:	0032      	movs	r2, r6
    ec5c:	6811      	ldr	r1, [r2, #0]
    ec5e:	465c      	mov	r4, fp
    ec60:	6019      	str	r1, [r3, #0]
    ec62:	6851      	ldr	r1, [r2, #4]
    ec64:	46d1      	mov	r9, sl
    ec66:	6059      	str	r1, [r3, #4]
    ec68:	6892      	ldr	r2, [r2, #8]
    ec6a:	609a      	str	r2, [r3, #8]
    ec6c:	e71b      	b.n	eaa6 <_realloc_r+0xda>
    ec6e:	4643      	mov	r3, r8
    ec70:	18fa      	adds	r2, r7, r3
    ec72:	465b      	mov	r3, fp
    ec74:	609a      	str	r2, [r3, #8]
    ec76:	4643      	mov	r3, r8
    ec78:	1ac9      	subs	r1, r1, r3
    ec7a:	2301      	movs	r3, #1
    ec7c:	4319      	orrs	r1, r3
    ec7e:	6051      	str	r1, [r2, #4]
    ec80:	687a      	ldr	r2, [r7, #4]
    ec82:	9801      	ldr	r0, [sp, #4]
    ec84:	4013      	ands	r3, r2
    ec86:	4642      	mov	r2, r8
    ec88:	4313      	orrs	r3, r2
    ec8a:	607b      	str	r3, [r7, #4]
    ec8c:	f7ff fb4e 	bl	e32c <__malloc_unlock>
    ec90:	0035      	movs	r5, r6
    ec92:	e71a      	b.n	eaca <_realloc_r+0xfe>
    ec94:	0031      	movs	r1, r6
    ec96:	f7ff faf1 	bl	e27c <memmove>
    ec9a:	e6f1      	b.n	ea80 <_realloc_r+0xb4>
    ec9c:	0031      	movs	r1, r6
    ec9e:	0028      	movs	r0, r5
    eca0:	f7ff faec 	bl	e27c <memmove>
    eca4:	465c      	mov	r4, fp
    eca6:	46d1      	mov	r9, sl
    eca8:	e6fd      	b.n	eaa6 <_realloc_r+0xda>
    ecaa:	68b3      	ldr	r3, [r6, #8]
    ecac:	6083      	str	r3, [r0, #8]
    ecae:	68f3      	ldr	r3, [r6, #12]
    ecb0:	60c3      	str	r3, [r0, #12]
    ecb2:	2a24      	cmp	r2, #36	; 0x24
    ecb4:	d015      	beq.n	ece2 <_realloc_r+0x316>
    ecb6:	0003      	movs	r3, r0
    ecb8:	0032      	movs	r2, r6
    ecba:	3310      	adds	r3, #16
    ecbc:	3210      	adds	r2, #16
    ecbe:	e6d9      	b.n	ea74 <_realloc_r+0xa8>
    ecc0:	6853      	ldr	r3, [r2, #4]
    ecc2:	2203      	movs	r2, #3
    ecc4:	4393      	bics	r3, r2
    ecc6:	18e4      	adds	r4, r4, r3
    ecc8:	0035      	movs	r5, r6
    ecca:	e6ec      	b.n	eaa6 <_realloc_r+0xda>
    eccc:	4653      	mov	r3, sl
    ecce:	68b1      	ldr	r1, [r6, #8]
    ecd0:	6119      	str	r1, [r3, #16]
    ecd2:	68f1      	ldr	r1, [r6, #12]
    ecd4:	6159      	str	r1, [r3, #20]
    ecd6:	2a24      	cmp	r2, #36	; 0x24
    ecd8:	d00c      	beq.n	ecf4 <_realloc_r+0x328>
    ecda:	0032      	movs	r2, r6
    ecdc:	3318      	adds	r3, #24
    ecde:	3210      	adds	r2, #16
    ece0:	e7bc      	b.n	ec5c <_realloc_r+0x290>
    ece2:	6933      	ldr	r3, [r6, #16]
    ece4:	0032      	movs	r2, r6
    ece6:	6103      	str	r3, [r0, #16]
    ece8:	0003      	movs	r3, r0
    ecea:	6971      	ldr	r1, [r6, #20]
    ecec:	3318      	adds	r3, #24
    ecee:	3218      	adds	r2, #24
    ecf0:	6141      	str	r1, [r0, #20]
    ecf2:	e6bf      	b.n	ea74 <_realloc_r+0xa8>
    ecf4:	4653      	mov	r3, sl
    ecf6:	6932      	ldr	r2, [r6, #16]
    ecf8:	4651      	mov	r1, sl
    ecfa:	619a      	str	r2, [r3, #24]
    ecfc:	0032      	movs	r2, r6
    ecfe:	6970      	ldr	r0, [r6, #20]
    ed00:	3320      	adds	r3, #32
    ed02:	3218      	adds	r2, #24
    ed04:	61c8      	str	r0, [r1, #28]
    ed06:	e7a9      	b.n	ec5c <_realloc_r+0x290>
    ed08:	002b      	movs	r3, r5
    ed0a:	0032      	movs	r2, r6
    ed0c:	e77e      	b.n	ec0c <_realloc_r+0x240>
    ed0e:	0031      	movs	r1, r6
    ed10:	0028      	movs	r0, r5
    ed12:	f7ff fab3 	bl	e27c <memmove>
    ed16:	e77f      	b.n	ec18 <_realloc_r+0x24c>
    ed18:	4653      	mov	r3, sl
    ed1a:	68b1      	ldr	r1, [r6, #8]
    ed1c:	6119      	str	r1, [r3, #16]
    ed1e:	68f1      	ldr	r1, [r6, #12]
    ed20:	6159      	str	r1, [r3, #20]
    ed22:	2a24      	cmp	r2, #36	; 0x24
    ed24:	d003      	beq.n	ed2e <_realloc_r+0x362>
    ed26:	0032      	movs	r2, r6
    ed28:	3318      	adds	r3, #24
    ed2a:	3210      	adds	r2, #16
    ed2c:	e76e      	b.n	ec0c <_realloc_r+0x240>
    ed2e:	4653      	mov	r3, sl
    ed30:	6932      	ldr	r2, [r6, #16]
    ed32:	4651      	mov	r1, sl
    ed34:	619a      	str	r2, [r3, #24]
    ed36:	0032      	movs	r2, r6
    ed38:	6970      	ldr	r0, [r6, #20]
    ed3a:	3320      	adds	r3, #32
    ed3c:	3218      	adds	r2, #24
    ed3e:	61c8      	str	r0, [r1, #28]
    ed40:	e764      	b.n	ec0c <_realloc_r+0x240>
    ed42:	46c0      	nop			; (mov r8, r8)
    ed44:	200004b4 	.word	0x200004b4

0000ed48 <_sbrk_r>:
    ed48:	2300      	movs	r3, #0
    ed4a:	b570      	push	{r4, r5, r6, lr}
    ed4c:	4c06      	ldr	r4, [pc, #24]	; (ed68 <_sbrk_r+0x20>)
    ed4e:	0005      	movs	r5, r0
    ed50:	0008      	movs	r0, r1
    ed52:	6023      	str	r3, [r4, #0]
    ed54:	f000 ff22 	bl	fb9c <_sbrk>
    ed58:	1c43      	adds	r3, r0, #1
    ed5a:	d000      	beq.n	ed5e <_sbrk_r+0x16>
    ed5c:	bd70      	pop	{r4, r5, r6, pc}
    ed5e:	6823      	ldr	r3, [r4, #0]
    ed60:	2b00      	cmp	r3, #0
    ed62:	d0fb      	beq.n	ed5c <_sbrk_r+0x14>
    ed64:	602b      	str	r3, [r5, #0]
    ed66:	e7f9      	b.n	ed5c <_sbrk_r+0x14>
    ed68:	20001168 	.word	0x20001168

0000ed6c <__sread>:
    ed6c:	b570      	push	{r4, r5, r6, lr}
    ed6e:	000c      	movs	r4, r1
    ed70:	250e      	movs	r5, #14
    ed72:	5f49      	ldrsh	r1, [r1, r5]
    ed74:	f000 fa26 	bl	f1c4 <_read_r>
    ed78:	2800      	cmp	r0, #0
    ed7a:	db03      	blt.n	ed84 <__sread+0x18>
    ed7c:	6d23      	ldr	r3, [r4, #80]	; 0x50
    ed7e:	181b      	adds	r3, r3, r0
    ed80:	6523      	str	r3, [r4, #80]	; 0x50
    ed82:	bd70      	pop	{r4, r5, r6, pc}
    ed84:	89a3      	ldrh	r3, [r4, #12]
    ed86:	4a02      	ldr	r2, [pc, #8]	; (ed90 <__sread+0x24>)
    ed88:	4013      	ands	r3, r2
    ed8a:	81a3      	strh	r3, [r4, #12]
    ed8c:	e7f9      	b.n	ed82 <__sread+0x16>
    ed8e:	46c0      	nop			; (mov r8, r8)
    ed90:	ffffefff 	.word	0xffffefff

0000ed94 <__swrite>:
    ed94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ed96:	0016      	movs	r6, r2
    ed98:	001f      	movs	r7, r3
    ed9a:	220c      	movs	r2, #12
    ed9c:	5e8b      	ldrsh	r3, [r1, r2]
    ed9e:	0005      	movs	r5, r0
    eda0:	000c      	movs	r4, r1
    eda2:	05da      	lsls	r2, r3, #23
    eda4:	d507      	bpl.n	edb6 <__swrite+0x22>
    eda6:	230e      	movs	r3, #14
    eda8:	5ec9      	ldrsh	r1, [r1, r3]
    edaa:	2200      	movs	r2, #0
    edac:	2302      	movs	r3, #2
    edae:	f000 f9df 	bl	f170 <_lseek_r>
    edb2:	220c      	movs	r2, #12
    edb4:	5ea3      	ldrsh	r3, [r4, r2]
    edb6:	4a05      	ldr	r2, [pc, #20]	; (edcc <__swrite+0x38>)
    edb8:	0028      	movs	r0, r5
    edba:	4013      	ands	r3, r2
    edbc:	81a3      	strh	r3, [r4, #12]
    edbe:	0032      	movs	r2, r6
    edc0:	230e      	movs	r3, #14
    edc2:	5ee1      	ldrsh	r1, [r4, r3]
    edc4:	003b      	movs	r3, r7
    edc6:	f000 f86b 	bl	eea0 <_write_r>
    edca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    edcc:	ffffefff 	.word	0xffffefff

0000edd0 <__sseek>:
    edd0:	b570      	push	{r4, r5, r6, lr}
    edd2:	000c      	movs	r4, r1
    edd4:	250e      	movs	r5, #14
    edd6:	5f49      	ldrsh	r1, [r1, r5]
    edd8:	f000 f9ca 	bl	f170 <_lseek_r>
    eddc:	1c43      	adds	r3, r0, #1
    edde:	d006      	beq.n	edee <__sseek+0x1e>
    ede0:	2380      	movs	r3, #128	; 0x80
    ede2:	89a2      	ldrh	r2, [r4, #12]
    ede4:	015b      	lsls	r3, r3, #5
    ede6:	4313      	orrs	r3, r2
    ede8:	81a3      	strh	r3, [r4, #12]
    edea:	6520      	str	r0, [r4, #80]	; 0x50
    edec:	bd70      	pop	{r4, r5, r6, pc}
    edee:	89a3      	ldrh	r3, [r4, #12]
    edf0:	4a01      	ldr	r2, [pc, #4]	; (edf8 <__sseek+0x28>)
    edf2:	4013      	ands	r3, r2
    edf4:	81a3      	strh	r3, [r4, #12]
    edf6:	e7f9      	b.n	edec <__sseek+0x1c>
    edf8:	ffffefff 	.word	0xffffefff

0000edfc <__sclose>:
    edfc:	b510      	push	{r4, lr}
    edfe:	230e      	movs	r3, #14
    ee00:	5ec9      	ldrsh	r1, [r1, r3]
    ee02:	f000 f88d 	bl	ef20 <_close_r>
    ee06:	bd10      	pop	{r4, pc}

0000ee08 <__sprint_r.part.0>:
    ee08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ee0a:	464e      	mov	r6, r9
    ee0c:	4645      	mov	r5, r8
    ee0e:	46de      	mov	lr, fp
    ee10:	4657      	mov	r7, sl
    ee12:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    ee14:	b5e0      	push	{r5, r6, r7, lr}
    ee16:	4680      	mov	r8, r0
    ee18:	000e      	movs	r6, r1
    ee1a:	4691      	mov	r9, r2
    ee1c:	049b      	lsls	r3, r3, #18
    ee1e:	d531      	bpl.n	ee84 <__sprint_r.part.0+0x7c>
    ee20:	6813      	ldr	r3, [r2, #0]
    ee22:	469a      	mov	sl, r3
    ee24:	6893      	ldr	r3, [r2, #8]
    ee26:	2b00      	cmp	r3, #0
    ee28:	d02a      	beq.n	ee80 <__sprint_r.part.0+0x78>
    ee2a:	4652      	mov	r2, sl
    ee2c:	6852      	ldr	r2, [r2, #4]
    ee2e:	2500      	movs	r5, #0
    ee30:	4693      	mov	fp, r2
    ee32:	0897      	lsrs	r7, r2, #2
    ee34:	4652      	mov	r2, sl
    ee36:	6814      	ldr	r4, [r2, #0]
    ee38:	d104      	bne.n	ee44 <__sprint_r.part.0+0x3c>
    ee3a:	e016      	b.n	ee6a <__sprint_r.part.0+0x62>
    ee3c:	3501      	adds	r5, #1
    ee3e:	3404      	adds	r4, #4
    ee40:	42af      	cmp	r7, r5
    ee42:	d010      	beq.n	ee66 <__sprint_r.part.0+0x5e>
    ee44:	0032      	movs	r2, r6
    ee46:	6821      	ldr	r1, [r4, #0]
    ee48:	4640      	mov	r0, r8
    ee4a:	f000 f92d 	bl	f0a8 <_fputwc_r>
    ee4e:	1c43      	adds	r3, r0, #1
    ee50:	d1f4      	bne.n	ee3c <__sprint_r.part.0+0x34>
    ee52:	464a      	mov	r2, r9
    ee54:	2300      	movs	r3, #0
    ee56:	6093      	str	r3, [r2, #8]
    ee58:	6053      	str	r3, [r2, #4]
    ee5a:	bc3c      	pop	{r2, r3, r4, r5}
    ee5c:	4690      	mov	r8, r2
    ee5e:	4699      	mov	r9, r3
    ee60:	46a2      	mov	sl, r4
    ee62:	46ab      	mov	fp, r5
    ee64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ee66:	464b      	mov	r3, r9
    ee68:	689b      	ldr	r3, [r3, #8]
    ee6a:	465a      	mov	r2, fp
    ee6c:	2103      	movs	r1, #3
    ee6e:	438a      	bics	r2, r1
    ee70:	1a9b      	subs	r3, r3, r2
    ee72:	464a      	mov	r2, r9
    ee74:	6093      	str	r3, [r2, #8]
    ee76:	2208      	movs	r2, #8
    ee78:	4694      	mov	ip, r2
    ee7a:	44e2      	add	sl, ip
    ee7c:	2b00      	cmp	r3, #0
    ee7e:	d1d4      	bne.n	ee2a <__sprint_r.part.0+0x22>
    ee80:	2000      	movs	r0, #0
    ee82:	e7e6      	b.n	ee52 <__sprint_r.part.0+0x4a>
    ee84:	f7fe fcc6 	bl	d814 <__sfvwrite_r>
    ee88:	e7e3      	b.n	ee52 <__sprint_r.part.0+0x4a>
    ee8a:	46c0      	nop			; (mov r8, r8)

0000ee8c <__sprint_r>:
    ee8c:	6893      	ldr	r3, [r2, #8]
    ee8e:	b510      	push	{r4, lr}
    ee90:	2b00      	cmp	r3, #0
    ee92:	d002      	beq.n	ee9a <__sprint_r+0xe>
    ee94:	f7ff ffb8 	bl	ee08 <__sprint_r.part.0>
    ee98:	bd10      	pop	{r4, pc}
    ee9a:	6053      	str	r3, [r2, #4]
    ee9c:	2000      	movs	r0, #0
    ee9e:	e7fb      	b.n	ee98 <__sprint_r+0xc>

0000eea0 <_write_r>:
    eea0:	b570      	push	{r4, r5, r6, lr}
    eea2:	0005      	movs	r5, r0
    eea4:	0008      	movs	r0, r1
    eea6:	0011      	movs	r1, r2
    eea8:	2200      	movs	r2, #0
    eeaa:	4c06      	ldr	r4, [pc, #24]	; (eec4 <_write_r+0x24>)
    eeac:	6022      	str	r2, [r4, #0]
    eeae:	001a      	movs	r2, r3
    eeb0:	f000 fe82 	bl	fbb8 <_write>
    eeb4:	1c43      	adds	r3, r0, #1
    eeb6:	d000      	beq.n	eeba <_write_r+0x1a>
    eeb8:	bd70      	pop	{r4, r5, r6, pc}
    eeba:	6823      	ldr	r3, [r4, #0]
    eebc:	2b00      	cmp	r3, #0
    eebe:	d0fb      	beq.n	eeb8 <_write_r+0x18>
    eec0:	602b      	str	r3, [r5, #0]
    eec2:	e7f9      	b.n	eeb8 <_write_r+0x18>
    eec4:	20001168 	.word	0x20001168

0000eec8 <_calloc_r>:
    eec8:	b510      	push	{r4, lr}
    eeca:	4351      	muls	r1, r2
    eecc:	f7fe fee2 	bl	dc94 <_malloc_r>
    eed0:	1e04      	subs	r4, r0, #0
    eed2:	d01c      	beq.n	ef0e <_calloc_r+0x46>
    eed4:	0003      	movs	r3, r0
    eed6:	3b08      	subs	r3, #8
    eed8:	685a      	ldr	r2, [r3, #4]
    eeda:	2303      	movs	r3, #3
    eedc:	439a      	bics	r2, r3
    eede:	3a04      	subs	r2, #4
    eee0:	2a24      	cmp	r2, #36	; 0x24
    eee2:	d816      	bhi.n	ef12 <_calloc_r+0x4a>
    eee4:	0003      	movs	r3, r0
    eee6:	2a13      	cmp	r2, #19
    eee8:	d90d      	bls.n	ef06 <_calloc_r+0x3e>
    eeea:	2100      	movs	r1, #0
    eeec:	3308      	adds	r3, #8
    eeee:	6001      	str	r1, [r0, #0]
    eef0:	6041      	str	r1, [r0, #4]
    eef2:	2a1b      	cmp	r2, #27
    eef4:	d907      	bls.n	ef06 <_calloc_r+0x3e>
    eef6:	6081      	str	r1, [r0, #8]
    eef8:	60c1      	str	r1, [r0, #12]
    eefa:	2a24      	cmp	r2, #36	; 0x24
    eefc:	d10d      	bne.n	ef1a <_calloc_r+0x52>
    eefe:	0003      	movs	r3, r0
    ef00:	6101      	str	r1, [r0, #16]
    ef02:	3318      	adds	r3, #24
    ef04:	6141      	str	r1, [r0, #20]
    ef06:	2200      	movs	r2, #0
    ef08:	601a      	str	r2, [r3, #0]
    ef0a:	605a      	str	r2, [r3, #4]
    ef0c:	609a      	str	r2, [r3, #8]
    ef0e:	0020      	movs	r0, r4
    ef10:	bd10      	pop	{r4, pc}
    ef12:	2100      	movs	r1, #0
    ef14:	f7fb fb76 	bl	a604 <memset>
    ef18:	e7f9      	b.n	ef0e <_calloc_r+0x46>
    ef1a:	0003      	movs	r3, r0
    ef1c:	3310      	adds	r3, #16
    ef1e:	e7f2      	b.n	ef06 <_calloc_r+0x3e>

0000ef20 <_close_r>:
    ef20:	2300      	movs	r3, #0
    ef22:	b570      	push	{r4, r5, r6, lr}
    ef24:	4c06      	ldr	r4, [pc, #24]	; (ef40 <_close_r+0x20>)
    ef26:	0005      	movs	r5, r0
    ef28:	0008      	movs	r0, r1
    ef2a:	6023      	str	r3, [r4, #0]
    ef2c:	f000 fe0e 	bl	fb4c <_close>
    ef30:	1c43      	adds	r3, r0, #1
    ef32:	d000      	beq.n	ef36 <_close_r+0x16>
    ef34:	bd70      	pop	{r4, r5, r6, pc}
    ef36:	6823      	ldr	r3, [r4, #0]
    ef38:	2b00      	cmp	r3, #0
    ef3a:	d0fb      	beq.n	ef34 <_close_r+0x14>
    ef3c:	602b      	str	r3, [r5, #0]
    ef3e:	e7f9      	b.n	ef34 <_close_r+0x14>
    ef40:	20001168 	.word	0x20001168

0000ef44 <_fclose_r>:
    ef44:	b570      	push	{r4, r5, r6, lr}
    ef46:	0005      	movs	r5, r0
    ef48:	1e0c      	subs	r4, r1, #0
    ef4a:	d040      	beq.n	efce <_fclose_r+0x8a>
    ef4c:	2800      	cmp	r0, #0
    ef4e:	d002      	beq.n	ef56 <_fclose_r+0x12>
    ef50:	6b83      	ldr	r3, [r0, #56]	; 0x38
    ef52:	2b00      	cmp	r3, #0
    ef54:	d03e      	beq.n	efd4 <_fclose_r+0x90>
    ef56:	2601      	movs	r6, #1
    ef58:	6e63      	ldr	r3, [r4, #100]	; 0x64
    ef5a:	4233      	tst	r3, r6
    ef5c:	d133      	bne.n	efc6 <_fclose_r+0x82>
    ef5e:	89a3      	ldrh	r3, [r4, #12]
    ef60:	059b      	lsls	r3, r3, #22
    ef62:	d543      	bpl.n	efec <_fclose_r+0xa8>
    ef64:	0021      	movs	r1, r4
    ef66:	0028      	movs	r0, r5
    ef68:	f7fe f9ca 	bl	d300 <__sflush_r>
    ef6c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    ef6e:	0006      	movs	r6, r0
    ef70:	2b00      	cmp	r3, #0
    ef72:	d004      	beq.n	ef7e <_fclose_r+0x3a>
    ef74:	69e1      	ldr	r1, [r4, #28]
    ef76:	0028      	movs	r0, r5
    ef78:	4798      	blx	r3
    ef7a:	2800      	cmp	r0, #0
    ef7c:	db44      	blt.n	f008 <_fclose_r+0xc4>
    ef7e:	89a3      	ldrh	r3, [r4, #12]
    ef80:	061b      	lsls	r3, r3, #24
    ef82:	d42a      	bmi.n	efda <_fclose_r+0x96>
    ef84:	6b21      	ldr	r1, [r4, #48]	; 0x30
    ef86:	2900      	cmp	r1, #0
    ef88:	d008      	beq.n	ef9c <_fclose_r+0x58>
    ef8a:	0023      	movs	r3, r4
    ef8c:	3340      	adds	r3, #64	; 0x40
    ef8e:	4299      	cmp	r1, r3
    ef90:	d002      	beq.n	ef98 <_fclose_r+0x54>
    ef92:	0028      	movs	r0, r5
    ef94:	f7fe fb60 	bl	d658 <_free_r>
    ef98:	2300      	movs	r3, #0
    ef9a:	6323      	str	r3, [r4, #48]	; 0x30
    ef9c:	6c61      	ldr	r1, [r4, #68]	; 0x44
    ef9e:	2900      	cmp	r1, #0
    efa0:	d004      	beq.n	efac <_fclose_r+0x68>
    efa2:	0028      	movs	r0, r5
    efa4:	f7fe fb58 	bl	d658 <_free_r>
    efa8:	2300      	movs	r3, #0
    efaa:	6463      	str	r3, [r4, #68]	; 0x44
    efac:	f7fe fada 	bl	d564 <__sfp_lock_acquire>
    efb0:	2300      	movs	r3, #0
    efb2:	81a3      	strh	r3, [r4, #12]
    efb4:	6e63      	ldr	r3, [r4, #100]	; 0x64
    efb6:	07db      	lsls	r3, r3, #31
    efb8:	d514      	bpl.n	efe4 <_fclose_r+0xa0>
    efba:	6da0      	ldr	r0, [r4, #88]	; 0x58
    efbc:	f7fe fde2 	bl	db84 <__retarget_lock_close_recursive>
    efc0:	f7fe fad8 	bl	d574 <__sfp_lock_release>
    efc4:	e004      	b.n	efd0 <_fclose_r+0x8c>
    efc6:	220c      	movs	r2, #12
    efc8:	5ea3      	ldrsh	r3, [r4, r2]
    efca:	2b00      	cmp	r3, #0
    efcc:	d1ca      	bne.n	ef64 <_fclose_r+0x20>
    efce:	2600      	movs	r6, #0
    efd0:	0030      	movs	r0, r6
    efd2:	bd70      	pop	{r4, r5, r6, pc}
    efd4:	f7fe fa96 	bl	d504 <__sinit>
    efd8:	e7bd      	b.n	ef56 <_fclose_r+0x12>
    efda:	6921      	ldr	r1, [r4, #16]
    efdc:	0028      	movs	r0, r5
    efde:	f7fe fb3b 	bl	d658 <_free_r>
    efe2:	e7cf      	b.n	ef84 <_fclose_r+0x40>
    efe4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    efe6:	f7fe fdd1 	bl	db8c <__retarget_lock_release_recursive>
    efea:	e7e6      	b.n	efba <_fclose_r+0x76>
    efec:	6da0      	ldr	r0, [r4, #88]	; 0x58
    efee:	f7fe fdcb 	bl	db88 <__retarget_lock_acquire_recursive>
    eff2:	220c      	movs	r2, #12
    eff4:	5ea3      	ldrsh	r3, [r4, r2]
    eff6:	2b00      	cmp	r3, #0
    eff8:	d1b4      	bne.n	ef64 <_fclose_r+0x20>
    effa:	6e63      	ldr	r3, [r4, #100]	; 0x64
    effc:	401e      	ands	r6, r3
    effe:	d1e6      	bne.n	efce <_fclose_r+0x8a>
    f000:	6da0      	ldr	r0, [r4, #88]	; 0x58
    f002:	f7fe fdc3 	bl	db8c <__retarget_lock_release_recursive>
    f006:	e7e3      	b.n	efd0 <_fclose_r+0x8c>
    f008:	2601      	movs	r6, #1
    f00a:	4276      	negs	r6, r6
    f00c:	e7b7      	b.n	ef7e <_fclose_r+0x3a>
    f00e:	46c0      	nop			; (mov r8, r8)

0000f010 <__fputwc>:
    f010:	b5f0      	push	{r4, r5, r6, r7, lr}
    f012:	46ce      	mov	lr, r9
    f014:	4647      	mov	r7, r8
    f016:	b580      	push	{r7, lr}
    f018:	b085      	sub	sp, #20
    f01a:	4680      	mov	r8, r0
    f01c:	4689      	mov	r9, r1
    f01e:	0014      	movs	r4, r2
    f020:	f000 f896 	bl	f150 <__locale_mb_cur_max>
    f024:	2801      	cmp	r0, #1
    f026:	d031      	beq.n	f08c <__fputwc+0x7c>
    f028:	0023      	movs	r3, r4
    f02a:	af03      	add	r7, sp, #12
    f02c:	335c      	adds	r3, #92	; 0x5c
    f02e:	464a      	mov	r2, r9
    f030:	0039      	movs	r1, r7
    f032:	4640      	mov	r0, r8
    f034:	f000 f938 	bl	f2a8 <_wcrtomb_r>
    f038:	0006      	movs	r6, r0
    f03a:	1c43      	adds	r3, r0, #1
    f03c:	d021      	beq.n	f082 <__fputwc+0x72>
    f03e:	2800      	cmp	r0, #0
    f040:	d030      	beq.n	f0a4 <__fputwc+0x94>
    f042:	7839      	ldrb	r1, [r7, #0]
    f044:	2500      	movs	r5, #0
    f046:	e007      	b.n	f058 <__fputwc+0x48>
    f048:	6823      	ldr	r3, [r4, #0]
    f04a:	1c5a      	adds	r2, r3, #1
    f04c:	6022      	str	r2, [r4, #0]
    f04e:	7019      	strb	r1, [r3, #0]
    f050:	3501      	adds	r5, #1
    f052:	42b5      	cmp	r5, r6
    f054:	d226      	bcs.n	f0a4 <__fputwc+0x94>
    f056:	5d79      	ldrb	r1, [r7, r5]
    f058:	68a3      	ldr	r3, [r4, #8]
    f05a:	3b01      	subs	r3, #1
    f05c:	60a3      	str	r3, [r4, #8]
    f05e:	2b00      	cmp	r3, #0
    f060:	daf2      	bge.n	f048 <__fputwc+0x38>
    f062:	69a2      	ldr	r2, [r4, #24]
    f064:	4293      	cmp	r3, r2
    f066:	db01      	blt.n	f06c <__fputwc+0x5c>
    f068:	290a      	cmp	r1, #10
    f06a:	d1ed      	bne.n	f048 <__fputwc+0x38>
    f06c:	0022      	movs	r2, r4
    f06e:	4640      	mov	r0, r8
    f070:	f000 f8bc 	bl	f1ec <__swbuf_r>
    f074:	1c43      	adds	r3, r0, #1
    f076:	d1eb      	bne.n	f050 <__fputwc+0x40>
    f078:	b005      	add	sp, #20
    f07a:	bc0c      	pop	{r2, r3}
    f07c:	4690      	mov	r8, r2
    f07e:	4699      	mov	r9, r3
    f080:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f082:	2240      	movs	r2, #64	; 0x40
    f084:	89a3      	ldrh	r3, [r4, #12]
    f086:	4313      	orrs	r3, r2
    f088:	81a3      	strh	r3, [r4, #12]
    f08a:	e7f5      	b.n	f078 <__fputwc+0x68>
    f08c:	464b      	mov	r3, r9
    f08e:	3b01      	subs	r3, #1
    f090:	2bfe      	cmp	r3, #254	; 0xfe
    f092:	d8c9      	bhi.n	f028 <__fputwc+0x18>
    f094:	466a      	mov	r2, sp
    f096:	464b      	mov	r3, r9
    f098:	71d3      	strb	r3, [r2, #7]
    f09a:	79d1      	ldrb	r1, [r2, #7]
    f09c:	af03      	add	r7, sp, #12
    f09e:	7039      	strb	r1, [r7, #0]
    f0a0:	2601      	movs	r6, #1
    f0a2:	e7cf      	b.n	f044 <__fputwc+0x34>
    f0a4:	4648      	mov	r0, r9
    f0a6:	e7e7      	b.n	f078 <__fputwc+0x68>

0000f0a8 <_fputwc_r>:
    f0a8:	6e53      	ldr	r3, [r2, #100]	; 0x64
    f0aa:	b570      	push	{r4, r5, r6, lr}
    f0ac:	0005      	movs	r5, r0
    f0ae:	000e      	movs	r6, r1
    f0b0:	0014      	movs	r4, r2
    f0b2:	07db      	lsls	r3, r3, #31
    f0b4:	d41e      	bmi.n	f0f4 <_fputwc_r+0x4c>
    f0b6:	230c      	movs	r3, #12
    f0b8:	5ed2      	ldrsh	r2, [r2, r3]
    f0ba:	b291      	uxth	r1, r2
    f0bc:	058b      	lsls	r3, r1, #22
    f0be:	d516      	bpl.n	f0ee <_fputwc_r+0x46>
    f0c0:	2380      	movs	r3, #128	; 0x80
    f0c2:	019b      	lsls	r3, r3, #6
    f0c4:	4219      	tst	r1, r3
    f0c6:	d104      	bne.n	f0d2 <_fputwc_r+0x2a>
    f0c8:	431a      	orrs	r2, r3
    f0ca:	81a2      	strh	r2, [r4, #12]
    f0cc:	6e62      	ldr	r2, [r4, #100]	; 0x64
    f0ce:	4313      	orrs	r3, r2
    f0d0:	6663      	str	r3, [r4, #100]	; 0x64
    f0d2:	0028      	movs	r0, r5
    f0d4:	0022      	movs	r2, r4
    f0d6:	0031      	movs	r1, r6
    f0d8:	f7ff ff9a 	bl	f010 <__fputwc>
    f0dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
    f0de:	0005      	movs	r5, r0
    f0e0:	07db      	lsls	r3, r3, #31
    f0e2:	d402      	bmi.n	f0ea <_fputwc_r+0x42>
    f0e4:	89a3      	ldrh	r3, [r4, #12]
    f0e6:	059b      	lsls	r3, r3, #22
    f0e8:	d508      	bpl.n	f0fc <_fputwc_r+0x54>
    f0ea:	0028      	movs	r0, r5
    f0ec:	bd70      	pop	{r4, r5, r6, pc}
    f0ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
    f0f0:	f7fe fd4a 	bl	db88 <__retarget_lock_acquire_recursive>
    f0f4:	230c      	movs	r3, #12
    f0f6:	5ee2      	ldrsh	r2, [r4, r3]
    f0f8:	b291      	uxth	r1, r2
    f0fa:	e7e1      	b.n	f0c0 <_fputwc_r+0x18>
    f0fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
    f0fe:	f7fe fd45 	bl	db8c <__retarget_lock_release_recursive>
    f102:	e7f2      	b.n	f0ea <_fputwc_r+0x42>

0000f104 <_fstat_r>:
    f104:	2300      	movs	r3, #0
    f106:	b570      	push	{r4, r5, r6, lr}
    f108:	4c07      	ldr	r4, [pc, #28]	; (f128 <_fstat_r+0x24>)
    f10a:	0005      	movs	r5, r0
    f10c:	0008      	movs	r0, r1
    f10e:	0011      	movs	r1, r2
    f110:	6023      	str	r3, [r4, #0]
    f112:	f000 fd23 	bl	fb5c <_fstat>
    f116:	1c43      	adds	r3, r0, #1
    f118:	d000      	beq.n	f11c <_fstat_r+0x18>
    f11a:	bd70      	pop	{r4, r5, r6, pc}
    f11c:	6823      	ldr	r3, [r4, #0]
    f11e:	2b00      	cmp	r3, #0
    f120:	d0fb      	beq.n	f11a <_fstat_r+0x16>
    f122:	602b      	str	r3, [r5, #0]
    f124:	e7f9      	b.n	f11a <_fstat_r+0x16>
    f126:	46c0      	nop			; (mov r8, r8)
    f128:	20001168 	.word	0x20001168

0000f12c <_isatty_r>:
    f12c:	2300      	movs	r3, #0
    f12e:	b570      	push	{r4, r5, r6, lr}
    f130:	4c06      	ldr	r4, [pc, #24]	; (f14c <_isatty_r+0x20>)
    f132:	0005      	movs	r5, r0
    f134:	0008      	movs	r0, r1
    f136:	6023      	str	r3, [r4, #0]
    f138:	f000 fd18 	bl	fb6c <_isatty>
    f13c:	1c43      	adds	r3, r0, #1
    f13e:	d000      	beq.n	f142 <_isatty_r+0x16>
    f140:	bd70      	pop	{r4, r5, r6, pc}
    f142:	6823      	ldr	r3, [r4, #0]
    f144:	2b00      	cmp	r3, #0
    f146:	d0fb      	beq.n	f140 <_isatty_r+0x14>
    f148:	602b      	str	r3, [r5, #0]
    f14a:	e7f9      	b.n	f140 <_isatty_r+0x14>
    f14c:	20001168 	.word	0x20001168

0000f150 <__locale_mb_cur_max>:
    f150:	4b05      	ldr	r3, [pc, #20]	; (f168 <__locale_mb_cur_max+0x18>)
    f152:	681b      	ldr	r3, [r3, #0]
    f154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    f156:	2b00      	cmp	r3, #0
    f158:	d003      	beq.n	f162 <__locale_mb_cur_max+0x12>
    f15a:	2294      	movs	r2, #148	; 0x94
    f15c:	0052      	lsls	r2, r2, #1
    f15e:	5c98      	ldrb	r0, [r3, r2]
    f160:	4770      	bx	lr
    f162:	4b02      	ldr	r3, [pc, #8]	; (f16c <__locale_mb_cur_max+0x1c>)
    f164:	e7f9      	b.n	f15a <__locale_mb_cur_max+0xa>
    f166:	46c0      	nop			; (mov r8, r8)
    f168:	20000084 	.word	0x20000084
    f16c:	200008c4 	.word	0x200008c4

0000f170 <_lseek_r>:
    f170:	b570      	push	{r4, r5, r6, lr}
    f172:	0005      	movs	r5, r0
    f174:	0008      	movs	r0, r1
    f176:	0011      	movs	r1, r2
    f178:	2200      	movs	r2, #0
    f17a:	4c06      	ldr	r4, [pc, #24]	; (f194 <_lseek_r+0x24>)
    f17c:	6022      	str	r2, [r4, #0]
    f17e:	001a      	movs	r2, r3
    f180:	f000 fcfc 	bl	fb7c <_lseek>
    f184:	1c43      	adds	r3, r0, #1
    f186:	d000      	beq.n	f18a <_lseek_r+0x1a>
    f188:	bd70      	pop	{r4, r5, r6, pc}
    f18a:	6823      	ldr	r3, [r4, #0]
    f18c:	2b00      	cmp	r3, #0
    f18e:	d0fb      	beq.n	f188 <_lseek_r+0x18>
    f190:	602b      	str	r3, [r5, #0]
    f192:	e7f9      	b.n	f188 <_lseek_r+0x18>
    f194:	20001168 	.word	0x20001168

0000f198 <__ascii_mbtowc>:
    f198:	b082      	sub	sp, #8
    f19a:	2900      	cmp	r1, #0
    f19c:	d00a      	beq.n	f1b4 <__ascii_mbtowc+0x1c>
    f19e:	2a00      	cmp	r2, #0
    f1a0:	d00b      	beq.n	f1ba <__ascii_mbtowc+0x22>
    f1a2:	2b00      	cmp	r3, #0
    f1a4:	d00b      	beq.n	f1be <__ascii_mbtowc+0x26>
    f1a6:	7813      	ldrb	r3, [r2, #0]
    f1a8:	600b      	str	r3, [r1, #0]
    f1aa:	7810      	ldrb	r0, [r2, #0]
    f1ac:	1e43      	subs	r3, r0, #1
    f1ae:	4198      	sbcs	r0, r3
    f1b0:	b002      	add	sp, #8
    f1b2:	4770      	bx	lr
    f1b4:	a901      	add	r1, sp, #4
    f1b6:	2a00      	cmp	r2, #0
    f1b8:	d1f3      	bne.n	f1a2 <__ascii_mbtowc+0xa>
    f1ba:	2000      	movs	r0, #0
    f1bc:	e7f8      	b.n	f1b0 <__ascii_mbtowc+0x18>
    f1be:	2002      	movs	r0, #2
    f1c0:	4240      	negs	r0, r0
    f1c2:	e7f5      	b.n	f1b0 <__ascii_mbtowc+0x18>

0000f1c4 <_read_r>:
    f1c4:	b570      	push	{r4, r5, r6, lr}
    f1c6:	0005      	movs	r5, r0
    f1c8:	0008      	movs	r0, r1
    f1ca:	0011      	movs	r1, r2
    f1cc:	2200      	movs	r2, #0
    f1ce:	4c06      	ldr	r4, [pc, #24]	; (f1e8 <_read_r+0x24>)
    f1d0:	6022      	str	r2, [r4, #0]
    f1d2:	001a      	movs	r2, r3
    f1d4:	f000 fcda 	bl	fb8c <_read>
    f1d8:	1c43      	adds	r3, r0, #1
    f1da:	d000      	beq.n	f1de <_read_r+0x1a>
    f1dc:	bd70      	pop	{r4, r5, r6, pc}
    f1de:	6823      	ldr	r3, [r4, #0]
    f1e0:	2b00      	cmp	r3, #0
    f1e2:	d0fb      	beq.n	f1dc <_read_r+0x18>
    f1e4:	602b      	str	r3, [r5, #0]
    f1e6:	e7f9      	b.n	f1dc <_read_r+0x18>
    f1e8:	20001168 	.word	0x20001168

0000f1ec <__swbuf_r>:
    f1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f1ee:	0006      	movs	r6, r0
    f1f0:	000d      	movs	r5, r1
    f1f2:	0014      	movs	r4, r2
    f1f4:	2800      	cmp	r0, #0
    f1f6:	d002      	beq.n	f1fe <__swbuf_r+0x12>
    f1f8:	6b83      	ldr	r3, [r0, #56]	; 0x38
    f1fa:	2b00      	cmp	r3, #0
    f1fc:	d04e      	beq.n	f29c <__swbuf_r+0xb0>
    f1fe:	69a3      	ldr	r3, [r4, #24]
    f200:	60a3      	str	r3, [r4, #8]
    f202:	230c      	movs	r3, #12
    f204:	5ee0      	ldrsh	r0, [r4, r3]
    f206:	b281      	uxth	r1, r0
    f208:	070b      	lsls	r3, r1, #28
    f20a:	d53c      	bpl.n	f286 <__swbuf_r+0x9a>
    f20c:	6923      	ldr	r3, [r4, #16]
    f20e:	2b00      	cmp	r3, #0
    f210:	d039      	beq.n	f286 <__swbuf_r+0x9a>
    f212:	22ff      	movs	r2, #255	; 0xff
    f214:	b2ef      	uxtb	r7, r5
    f216:	4015      	ands	r5, r2
    f218:	2280      	movs	r2, #128	; 0x80
    f21a:	0192      	lsls	r2, r2, #6
    f21c:	4211      	tst	r1, r2
    f21e:	d015      	beq.n	f24c <__swbuf_r+0x60>
    f220:	6822      	ldr	r2, [r4, #0]
    f222:	6961      	ldr	r1, [r4, #20]
    f224:	1ad3      	subs	r3, r2, r3
    f226:	428b      	cmp	r3, r1
    f228:	da1b      	bge.n	f262 <__swbuf_r+0x76>
    f22a:	3301      	adds	r3, #1
    f22c:	68a1      	ldr	r1, [r4, #8]
    f22e:	3901      	subs	r1, #1
    f230:	60a1      	str	r1, [r4, #8]
    f232:	1c51      	adds	r1, r2, #1
    f234:	6021      	str	r1, [r4, #0]
    f236:	7017      	strb	r7, [r2, #0]
    f238:	6962      	ldr	r2, [r4, #20]
    f23a:	429a      	cmp	r2, r3
    f23c:	d01a      	beq.n	f274 <__swbuf_r+0x88>
    f23e:	89a3      	ldrh	r3, [r4, #12]
    f240:	07db      	lsls	r3, r3, #31
    f242:	d501      	bpl.n	f248 <__swbuf_r+0x5c>
    f244:	2d0a      	cmp	r5, #10
    f246:	d015      	beq.n	f274 <__swbuf_r+0x88>
    f248:	0028      	movs	r0, r5
    f24a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f24c:	4302      	orrs	r2, r0
    f24e:	6e61      	ldr	r1, [r4, #100]	; 0x64
    f250:	81a2      	strh	r2, [r4, #12]
    f252:	4a14      	ldr	r2, [pc, #80]	; (f2a4 <__swbuf_r+0xb8>)
    f254:	400a      	ands	r2, r1
    f256:	6662      	str	r2, [r4, #100]	; 0x64
    f258:	6961      	ldr	r1, [r4, #20]
    f25a:	6822      	ldr	r2, [r4, #0]
    f25c:	1ad3      	subs	r3, r2, r3
    f25e:	428b      	cmp	r3, r1
    f260:	dbe3      	blt.n	f22a <__swbuf_r+0x3e>
    f262:	0021      	movs	r1, r4
    f264:	0030      	movs	r0, r6
    f266:	f7fe f8f3 	bl	d450 <_fflush_r>
    f26a:	2800      	cmp	r0, #0
    f26c:	d108      	bne.n	f280 <__swbuf_r+0x94>
    f26e:	6822      	ldr	r2, [r4, #0]
    f270:	2301      	movs	r3, #1
    f272:	e7db      	b.n	f22c <__swbuf_r+0x40>
    f274:	0021      	movs	r1, r4
    f276:	0030      	movs	r0, r6
    f278:	f7fe f8ea 	bl	d450 <_fflush_r>
    f27c:	2800      	cmp	r0, #0
    f27e:	d0e3      	beq.n	f248 <__swbuf_r+0x5c>
    f280:	2501      	movs	r5, #1
    f282:	426d      	negs	r5, r5
    f284:	e7e0      	b.n	f248 <__swbuf_r+0x5c>
    f286:	0021      	movs	r1, r4
    f288:	0030      	movs	r0, r6
    f28a:	f7fc fed3 	bl	c034 <__swsetup_r>
    f28e:	2800      	cmp	r0, #0
    f290:	d1f6      	bne.n	f280 <__swbuf_r+0x94>
    f292:	230c      	movs	r3, #12
    f294:	5ee0      	ldrsh	r0, [r4, r3]
    f296:	6923      	ldr	r3, [r4, #16]
    f298:	b281      	uxth	r1, r0
    f29a:	e7ba      	b.n	f212 <__swbuf_r+0x26>
    f29c:	f7fe f932 	bl	d504 <__sinit>
    f2a0:	e7ad      	b.n	f1fe <__swbuf_r+0x12>
    f2a2:	46c0      	nop			; (mov r8, r8)
    f2a4:	ffffdfff 	.word	0xffffdfff

0000f2a8 <_wcrtomb_r>:
    f2a8:	b570      	push	{r4, r5, r6, lr}
    f2aa:	001d      	movs	r5, r3
    f2ac:	4b11      	ldr	r3, [pc, #68]	; (f2f4 <_wcrtomb_r+0x4c>)
    f2ae:	b084      	sub	sp, #16
    f2b0:	681b      	ldr	r3, [r3, #0]
    f2b2:	0004      	movs	r4, r0
    f2b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    f2b6:	2900      	cmp	r1, #0
    f2b8:	d00e      	beq.n	f2d8 <_wcrtomb_r+0x30>
    f2ba:	2b00      	cmp	r3, #0
    f2bc:	d016      	beq.n	f2ec <_wcrtomb_r+0x44>
    f2be:	20e0      	movs	r0, #224	; 0xe0
    f2c0:	581e      	ldr	r6, [r3, r0]
    f2c2:	002b      	movs	r3, r5
    f2c4:	0020      	movs	r0, r4
    f2c6:	47b0      	blx	r6
    f2c8:	1c43      	adds	r3, r0, #1
    f2ca:	d103      	bne.n	f2d4 <_wcrtomb_r+0x2c>
    f2cc:	2300      	movs	r3, #0
    f2ce:	602b      	str	r3, [r5, #0]
    f2d0:	338a      	adds	r3, #138	; 0x8a
    f2d2:	6023      	str	r3, [r4, #0]
    f2d4:	b004      	add	sp, #16
    f2d6:	bd70      	pop	{r4, r5, r6, pc}
    f2d8:	2b00      	cmp	r3, #0
    f2da:	d009      	beq.n	f2f0 <_wcrtomb_r+0x48>
    f2dc:	22e0      	movs	r2, #224	; 0xe0
    f2de:	a901      	add	r1, sp, #4
    f2e0:	589e      	ldr	r6, [r3, r2]
    f2e2:	0020      	movs	r0, r4
    f2e4:	002b      	movs	r3, r5
    f2e6:	2200      	movs	r2, #0
    f2e8:	47b0      	blx	r6
    f2ea:	e7ed      	b.n	f2c8 <_wcrtomb_r+0x20>
    f2ec:	4b02      	ldr	r3, [pc, #8]	; (f2f8 <_wcrtomb_r+0x50>)
    f2ee:	e7e6      	b.n	f2be <_wcrtomb_r+0x16>
    f2f0:	4b01      	ldr	r3, [pc, #4]	; (f2f8 <_wcrtomb_r+0x50>)
    f2f2:	e7f3      	b.n	f2dc <_wcrtomb_r+0x34>
    f2f4:	20000084 	.word	0x20000084
    f2f8:	200008c4 	.word	0x200008c4

0000f2fc <__ascii_wctomb>:
    f2fc:	2900      	cmp	r1, #0
    f2fe:	d004      	beq.n	f30a <__ascii_wctomb+0xe>
    f300:	2aff      	cmp	r2, #255	; 0xff
    f302:	d804      	bhi.n	f30e <__ascii_wctomb+0x12>
    f304:	2001      	movs	r0, #1
    f306:	700a      	strb	r2, [r1, #0]
    f308:	4770      	bx	lr
    f30a:	2000      	movs	r0, #0
    f30c:	e7fc      	b.n	f308 <__ascii_wctomb+0xc>
    f30e:	238a      	movs	r3, #138	; 0x8a
    f310:	6003      	str	r3, [r0, #0]
    f312:	2001      	movs	r0, #1
    f314:	4240      	negs	r0, r0
    f316:	e7f7      	b.n	f308 <__ascii_wctomb+0xc>

0000f318 <__divsi3>:
    f318:	4603      	mov	r3, r0
    f31a:	430b      	orrs	r3, r1
    f31c:	d47f      	bmi.n	f41e <__divsi3+0x106>
    f31e:	2200      	movs	r2, #0
    f320:	0843      	lsrs	r3, r0, #1
    f322:	428b      	cmp	r3, r1
    f324:	d374      	bcc.n	f410 <__divsi3+0xf8>
    f326:	0903      	lsrs	r3, r0, #4
    f328:	428b      	cmp	r3, r1
    f32a:	d35f      	bcc.n	f3ec <__divsi3+0xd4>
    f32c:	0a03      	lsrs	r3, r0, #8
    f32e:	428b      	cmp	r3, r1
    f330:	d344      	bcc.n	f3bc <__divsi3+0xa4>
    f332:	0b03      	lsrs	r3, r0, #12
    f334:	428b      	cmp	r3, r1
    f336:	d328      	bcc.n	f38a <__divsi3+0x72>
    f338:	0c03      	lsrs	r3, r0, #16
    f33a:	428b      	cmp	r3, r1
    f33c:	d30d      	bcc.n	f35a <__divsi3+0x42>
    f33e:	22ff      	movs	r2, #255	; 0xff
    f340:	0209      	lsls	r1, r1, #8
    f342:	ba12      	rev	r2, r2
    f344:	0c03      	lsrs	r3, r0, #16
    f346:	428b      	cmp	r3, r1
    f348:	d302      	bcc.n	f350 <__divsi3+0x38>
    f34a:	1212      	asrs	r2, r2, #8
    f34c:	0209      	lsls	r1, r1, #8
    f34e:	d065      	beq.n	f41c <__divsi3+0x104>
    f350:	0b03      	lsrs	r3, r0, #12
    f352:	428b      	cmp	r3, r1
    f354:	d319      	bcc.n	f38a <__divsi3+0x72>
    f356:	e000      	b.n	f35a <__divsi3+0x42>
    f358:	0a09      	lsrs	r1, r1, #8
    f35a:	0bc3      	lsrs	r3, r0, #15
    f35c:	428b      	cmp	r3, r1
    f35e:	d301      	bcc.n	f364 <__divsi3+0x4c>
    f360:	03cb      	lsls	r3, r1, #15
    f362:	1ac0      	subs	r0, r0, r3
    f364:	4152      	adcs	r2, r2
    f366:	0b83      	lsrs	r3, r0, #14
    f368:	428b      	cmp	r3, r1
    f36a:	d301      	bcc.n	f370 <__divsi3+0x58>
    f36c:	038b      	lsls	r3, r1, #14
    f36e:	1ac0      	subs	r0, r0, r3
    f370:	4152      	adcs	r2, r2
    f372:	0b43      	lsrs	r3, r0, #13
    f374:	428b      	cmp	r3, r1
    f376:	d301      	bcc.n	f37c <__divsi3+0x64>
    f378:	034b      	lsls	r3, r1, #13
    f37a:	1ac0      	subs	r0, r0, r3
    f37c:	4152      	adcs	r2, r2
    f37e:	0b03      	lsrs	r3, r0, #12
    f380:	428b      	cmp	r3, r1
    f382:	d301      	bcc.n	f388 <__divsi3+0x70>
    f384:	030b      	lsls	r3, r1, #12
    f386:	1ac0      	subs	r0, r0, r3
    f388:	4152      	adcs	r2, r2
    f38a:	0ac3      	lsrs	r3, r0, #11
    f38c:	428b      	cmp	r3, r1
    f38e:	d301      	bcc.n	f394 <__divsi3+0x7c>
    f390:	02cb      	lsls	r3, r1, #11
    f392:	1ac0      	subs	r0, r0, r3
    f394:	4152      	adcs	r2, r2
    f396:	0a83      	lsrs	r3, r0, #10
    f398:	428b      	cmp	r3, r1
    f39a:	d301      	bcc.n	f3a0 <__divsi3+0x88>
    f39c:	028b      	lsls	r3, r1, #10
    f39e:	1ac0      	subs	r0, r0, r3
    f3a0:	4152      	adcs	r2, r2
    f3a2:	0a43      	lsrs	r3, r0, #9
    f3a4:	428b      	cmp	r3, r1
    f3a6:	d301      	bcc.n	f3ac <__divsi3+0x94>
    f3a8:	024b      	lsls	r3, r1, #9
    f3aa:	1ac0      	subs	r0, r0, r3
    f3ac:	4152      	adcs	r2, r2
    f3ae:	0a03      	lsrs	r3, r0, #8
    f3b0:	428b      	cmp	r3, r1
    f3b2:	d301      	bcc.n	f3b8 <__divsi3+0xa0>
    f3b4:	020b      	lsls	r3, r1, #8
    f3b6:	1ac0      	subs	r0, r0, r3
    f3b8:	4152      	adcs	r2, r2
    f3ba:	d2cd      	bcs.n	f358 <__divsi3+0x40>
    f3bc:	09c3      	lsrs	r3, r0, #7
    f3be:	428b      	cmp	r3, r1
    f3c0:	d301      	bcc.n	f3c6 <__divsi3+0xae>
    f3c2:	01cb      	lsls	r3, r1, #7
    f3c4:	1ac0      	subs	r0, r0, r3
    f3c6:	4152      	adcs	r2, r2
    f3c8:	0983      	lsrs	r3, r0, #6
    f3ca:	428b      	cmp	r3, r1
    f3cc:	d301      	bcc.n	f3d2 <__divsi3+0xba>
    f3ce:	018b      	lsls	r3, r1, #6
    f3d0:	1ac0      	subs	r0, r0, r3
    f3d2:	4152      	adcs	r2, r2
    f3d4:	0943      	lsrs	r3, r0, #5
    f3d6:	428b      	cmp	r3, r1
    f3d8:	d301      	bcc.n	f3de <__divsi3+0xc6>
    f3da:	014b      	lsls	r3, r1, #5
    f3dc:	1ac0      	subs	r0, r0, r3
    f3de:	4152      	adcs	r2, r2
    f3e0:	0903      	lsrs	r3, r0, #4
    f3e2:	428b      	cmp	r3, r1
    f3e4:	d301      	bcc.n	f3ea <__divsi3+0xd2>
    f3e6:	010b      	lsls	r3, r1, #4
    f3e8:	1ac0      	subs	r0, r0, r3
    f3ea:	4152      	adcs	r2, r2
    f3ec:	08c3      	lsrs	r3, r0, #3
    f3ee:	428b      	cmp	r3, r1
    f3f0:	d301      	bcc.n	f3f6 <__divsi3+0xde>
    f3f2:	00cb      	lsls	r3, r1, #3
    f3f4:	1ac0      	subs	r0, r0, r3
    f3f6:	4152      	adcs	r2, r2
    f3f8:	0883      	lsrs	r3, r0, #2
    f3fa:	428b      	cmp	r3, r1
    f3fc:	d301      	bcc.n	f402 <__divsi3+0xea>
    f3fe:	008b      	lsls	r3, r1, #2
    f400:	1ac0      	subs	r0, r0, r3
    f402:	4152      	adcs	r2, r2
    f404:	0843      	lsrs	r3, r0, #1
    f406:	428b      	cmp	r3, r1
    f408:	d301      	bcc.n	f40e <__divsi3+0xf6>
    f40a:	004b      	lsls	r3, r1, #1
    f40c:	1ac0      	subs	r0, r0, r3
    f40e:	4152      	adcs	r2, r2
    f410:	1a41      	subs	r1, r0, r1
    f412:	d200      	bcs.n	f416 <__divsi3+0xfe>
    f414:	4601      	mov	r1, r0
    f416:	4152      	adcs	r2, r2
    f418:	4610      	mov	r0, r2
    f41a:	4770      	bx	lr
    f41c:	e05d      	b.n	f4da <__divsi3+0x1c2>
    f41e:	0fca      	lsrs	r2, r1, #31
    f420:	d000      	beq.n	f424 <__divsi3+0x10c>
    f422:	4249      	negs	r1, r1
    f424:	1003      	asrs	r3, r0, #32
    f426:	d300      	bcc.n	f42a <__divsi3+0x112>
    f428:	4240      	negs	r0, r0
    f42a:	4053      	eors	r3, r2
    f42c:	2200      	movs	r2, #0
    f42e:	469c      	mov	ip, r3
    f430:	0903      	lsrs	r3, r0, #4
    f432:	428b      	cmp	r3, r1
    f434:	d32d      	bcc.n	f492 <__divsi3+0x17a>
    f436:	0a03      	lsrs	r3, r0, #8
    f438:	428b      	cmp	r3, r1
    f43a:	d312      	bcc.n	f462 <__divsi3+0x14a>
    f43c:	22fc      	movs	r2, #252	; 0xfc
    f43e:	0189      	lsls	r1, r1, #6
    f440:	ba12      	rev	r2, r2
    f442:	0a03      	lsrs	r3, r0, #8
    f444:	428b      	cmp	r3, r1
    f446:	d30c      	bcc.n	f462 <__divsi3+0x14a>
    f448:	0189      	lsls	r1, r1, #6
    f44a:	1192      	asrs	r2, r2, #6
    f44c:	428b      	cmp	r3, r1
    f44e:	d308      	bcc.n	f462 <__divsi3+0x14a>
    f450:	0189      	lsls	r1, r1, #6
    f452:	1192      	asrs	r2, r2, #6
    f454:	428b      	cmp	r3, r1
    f456:	d304      	bcc.n	f462 <__divsi3+0x14a>
    f458:	0189      	lsls	r1, r1, #6
    f45a:	d03a      	beq.n	f4d2 <__divsi3+0x1ba>
    f45c:	1192      	asrs	r2, r2, #6
    f45e:	e000      	b.n	f462 <__divsi3+0x14a>
    f460:	0989      	lsrs	r1, r1, #6
    f462:	09c3      	lsrs	r3, r0, #7
    f464:	428b      	cmp	r3, r1
    f466:	d301      	bcc.n	f46c <__divsi3+0x154>
    f468:	01cb      	lsls	r3, r1, #7
    f46a:	1ac0      	subs	r0, r0, r3
    f46c:	4152      	adcs	r2, r2
    f46e:	0983      	lsrs	r3, r0, #6
    f470:	428b      	cmp	r3, r1
    f472:	d301      	bcc.n	f478 <__divsi3+0x160>
    f474:	018b      	lsls	r3, r1, #6
    f476:	1ac0      	subs	r0, r0, r3
    f478:	4152      	adcs	r2, r2
    f47a:	0943      	lsrs	r3, r0, #5
    f47c:	428b      	cmp	r3, r1
    f47e:	d301      	bcc.n	f484 <__divsi3+0x16c>
    f480:	014b      	lsls	r3, r1, #5
    f482:	1ac0      	subs	r0, r0, r3
    f484:	4152      	adcs	r2, r2
    f486:	0903      	lsrs	r3, r0, #4
    f488:	428b      	cmp	r3, r1
    f48a:	d301      	bcc.n	f490 <__divsi3+0x178>
    f48c:	010b      	lsls	r3, r1, #4
    f48e:	1ac0      	subs	r0, r0, r3
    f490:	4152      	adcs	r2, r2
    f492:	08c3      	lsrs	r3, r0, #3
    f494:	428b      	cmp	r3, r1
    f496:	d301      	bcc.n	f49c <__divsi3+0x184>
    f498:	00cb      	lsls	r3, r1, #3
    f49a:	1ac0      	subs	r0, r0, r3
    f49c:	4152      	adcs	r2, r2
    f49e:	0883      	lsrs	r3, r0, #2
    f4a0:	428b      	cmp	r3, r1
    f4a2:	d301      	bcc.n	f4a8 <__divsi3+0x190>
    f4a4:	008b      	lsls	r3, r1, #2
    f4a6:	1ac0      	subs	r0, r0, r3
    f4a8:	4152      	adcs	r2, r2
    f4aa:	d2d9      	bcs.n	f460 <__divsi3+0x148>
    f4ac:	0843      	lsrs	r3, r0, #1
    f4ae:	428b      	cmp	r3, r1
    f4b0:	d301      	bcc.n	f4b6 <__divsi3+0x19e>
    f4b2:	004b      	lsls	r3, r1, #1
    f4b4:	1ac0      	subs	r0, r0, r3
    f4b6:	4152      	adcs	r2, r2
    f4b8:	1a41      	subs	r1, r0, r1
    f4ba:	d200      	bcs.n	f4be <__divsi3+0x1a6>
    f4bc:	4601      	mov	r1, r0
    f4be:	4663      	mov	r3, ip
    f4c0:	4152      	adcs	r2, r2
    f4c2:	105b      	asrs	r3, r3, #1
    f4c4:	4610      	mov	r0, r2
    f4c6:	d301      	bcc.n	f4cc <__divsi3+0x1b4>
    f4c8:	4240      	negs	r0, r0
    f4ca:	2b00      	cmp	r3, #0
    f4cc:	d500      	bpl.n	f4d0 <__divsi3+0x1b8>
    f4ce:	4249      	negs	r1, r1
    f4d0:	4770      	bx	lr
    f4d2:	4663      	mov	r3, ip
    f4d4:	105b      	asrs	r3, r3, #1
    f4d6:	d300      	bcc.n	f4da <__divsi3+0x1c2>
    f4d8:	4240      	negs	r0, r0
    f4da:	b501      	push	{r0, lr}
    f4dc:	2000      	movs	r0, #0
    f4de:	f7f9 fc61 	bl	8da4 <__aeabi_idiv0>
    f4e2:	bd02      	pop	{r1, pc}

0000f4e4 <__aeabi_idivmod>:
    f4e4:	2900      	cmp	r1, #0
    f4e6:	d0f8      	beq.n	f4da <__divsi3+0x1c2>
    f4e8:	e716      	b.n	f318 <__divsi3>
    f4ea:	4770      	bx	lr

0000f4ec <__aeabi_dadd>:
    f4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f4ee:	4645      	mov	r5, r8
    f4f0:	46de      	mov	lr, fp
    f4f2:	4657      	mov	r7, sl
    f4f4:	464e      	mov	r6, r9
    f4f6:	030c      	lsls	r4, r1, #12
    f4f8:	b5e0      	push	{r5, r6, r7, lr}
    f4fa:	004e      	lsls	r6, r1, #1
    f4fc:	0fc9      	lsrs	r1, r1, #31
    f4fe:	4688      	mov	r8, r1
    f500:	000d      	movs	r5, r1
    f502:	0a61      	lsrs	r1, r4, #9
    f504:	0f44      	lsrs	r4, r0, #29
    f506:	430c      	orrs	r4, r1
    f508:	00c7      	lsls	r7, r0, #3
    f50a:	0319      	lsls	r1, r3, #12
    f50c:	0058      	lsls	r0, r3, #1
    f50e:	0fdb      	lsrs	r3, r3, #31
    f510:	469b      	mov	fp, r3
    f512:	0a4b      	lsrs	r3, r1, #9
    f514:	0f51      	lsrs	r1, r2, #29
    f516:	430b      	orrs	r3, r1
    f518:	0d76      	lsrs	r6, r6, #21
    f51a:	0d40      	lsrs	r0, r0, #21
    f51c:	0019      	movs	r1, r3
    f51e:	00d2      	lsls	r2, r2, #3
    f520:	45d8      	cmp	r8, fp
    f522:	d100      	bne.n	f526 <__aeabi_dadd+0x3a>
    f524:	e0ae      	b.n	f684 <__aeabi_dadd+0x198>
    f526:	1a35      	subs	r5, r6, r0
    f528:	2d00      	cmp	r5, #0
    f52a:	dc00      	bgt.n	f52e <__aeabi_dadd+0x42>
    f52c:	e0f6      	b.n	f71c <__aeabi_dadd+0x230>
    f52e:	2800      	cmp	r0, #0
    f530:	d10f      	bne.n	f552 <__aeabi_dadd+0x66>
    f532:	4313      	orrs	r3, r2
    f534:	d100      	bne.n	f538 <__aeabi_dadd+0x4c>
    f536:	e0db      	b.n	f6f0 <__aeabi_dadd+0x204>
    f538:	1e6b      	subs	r3, r5, #1
    f53a:	2b00      	cmp	r3, #0
    f53c:	d000      	beq.n	f540 <__aeabi_dadd+0x54>
    f53e:	e137      	b.n	f7b0 <__aeabi_dadd+0x2c4>
    f540:	1aba      	subs	r2, r7, r2
    f542:	4297      	cmp	r7, r2
    f544:	41bf      	sbcs	r7, r7
    f546:	1a64      	subs	r4, r4, r1
    f548:	427f      	negs	r7, r7
    f54a:	1be4      	subs	r4, r4, r7
    f54c:	2601      	movs	r6, #1
    f54e:	0017      	movs	r7, r2
    f550:	e024      	b.n	f59c <__aeabi_dadd+0xb0>
    f552:	4bc6      	ldr	r3, [pc, #792]	; (f86c <__aeabi_dadd+0x380>)
    f554:	429e      	cmp	r6, r3
    f556:	d04d      	beq.n	f5f4 <__aeabi_dadd+0x108>
    f558:	2380      	movs	r3, #128	; 0x80
    f55a:	041b      	lsls	r3, r3, #16
    f55c:	4319      	orrs	r1, r3
    f55e:	2d38      	cmp	r5, #56	; 0x38
    f560:	dd00      	ble.n	f564 <__aeabi_dadd+0x78>
    f562:	e107      	b.n	f774 <__aeabi_dadd+0x288>
    f564:	2d1f      	cmp	r5, #31
    f566:	dd00      	ble.n	f56a <__aeabi_dadd+0x7e>
    f568:	e138      	b.n	f7dc <__aeabi_dadd+0x2f0>
    f56a:	2020      	movs	r0, #32
    f56c:	1b43      	subs	r3, r0, r5
    f56e:	469a      	mov	sl, r3
    f570:	000b      	movs	r3, r1
    f572:	4650      	mov	r0, sl
    f574:	4083      	lsls	r3, r0
    f576:	4699      	mov	r9, r3
    f578:	0013      	movs	r3, r2
    f57a:	4648      	mov	r0, r9
    f57c:	40eb      	lsrs	r3, r5
    f57e:	4318      	orrs	r0, r3
    f580:	0003      	movs	r3, r0
    f582:	4650      	mov	r0, sl
    f584:	4082      	lsls	r2, r0
    f586:	1e50      	subs	r0, r2, #1
    f588:	4182      	sbcs	r2, r0
    f58a:	40e9      	lsrs	r1, r5
    f58c:	431a      	orrs	r2, r3
    f58e:	1aba      	subs	r2, r7, r2
    f590:	1a61      	subs	r1, r4, r1
    f592:	4297      	cmp	r7, r2
    f594:	41a4      	sbcs	r4, r4
    f596:	0017      	movs	r7, r2
    f598:	4264      	negs	r4, r4
    f59a:	1b0c      	subs	r4, r1, r4
    f59c:	0223      	lsls	r3, r4, #8
    f59e:	d562      	bpl.n	f666 <__aeabi_dadd+0x17a>
    f5a0:	0264      	lsls	r4, r4, #9
    f5a2:	0a65      	lsrs	r5, r4, #9
    f5a4:	2d00      	cmp	r5, #0
    f5a6:	d100      	bne.n	f5aa <__aeabi_dadd+0xbe>
    f5a8:	e0df      	b.n	f76a <__aeabi_dadd+0x27e>
    f5aa:	0028      	movs	r0, r5
    f5ac:	f7fa fe92 	bl	a2d4 <__clzsi2>
    f5b0:	0003      	movs	r3, r0
    f5b2:	3b08      	subs	r3, #8
    f5b4:	2b1f      	cmp	r3, #31
    f5b6:	dd00      	ble.n	f5ba <__aeabi_dadd+0xce>
    f5b8:	e0d2      	b.n	f760 <__aeabi_dadd+0x274>
    f5ba:	2220      	movs	r2, #32
    f5bc:	003c      	movs	r4, r7
    f5be:	1ad2      	subs	r2, r2, r3
    f5c0:	409d      	lsls	r5, r3
    f5c2:	40d4      	lsrs	r4, r2
    f5c4:	409f      	lsls	r7, r3
    f5c6:	4325      	orrs	r5, r4
    f5c8:	429e      	cmp	r6, r3
    f5ca:	dd00      	ble.n	f5ce <__aeabi_dadd+0xe2>
    f5cc:	e0c4      	b.n	f758 <__aeabi_dadd+0x26c>
    f5ce:	1b9e      	subs	r6, r3, r6
    f5d0:	1c73      	adds	r3, r6, #1
    f5d2:	2b1f      	cmp	r3, #31
    f5d4:	dd00      	ble.n	f5d8 <__aeabi_dadd+0xec>
    f5d6:	e0f1      	b.n	f7bc <__aeabi_dadd+0x2d0>
    f5d8:	2220      	movs	r2, #32
    f5da:	0038      	movs	r0, r7
    f5dc:	0029      	movs	r1, r5
    f5de:	1ad2      	subs	r2, r2, r3
    f5e0:	40d8      	lsrs	r0, r3
    f5e2:	4091      	lsls	r1, r2
    f5e4:	4097      	lsls	r7, r2
    f5e6:	002c      	movs	r4, r5
    f5e8:	4301      	orrs	r1, r0
    f5ea:	1e78      	subs	r0, r7, #1
    f5ec:	4187      	sbcs	r7, r0
    f5ee:	40dc      	lsrs	r4, r3
    f5f0:	2600      	movs	r6, #0
    f5f2:	430f      	orrs	r7, r1
    f5f4:	077b      	lsls	r3, r7, #29
    f5f6:	d009      	beq.n	f60c <__aeabi_dadd+0x120>
    f5f8:	230f      	movs	r3, #15
    f5fa:	403b      	ands	r3, r7
    f5fc:	2b04      	cmp	r3, #4
    f5fe:	d005      	beq.n	f60c <__aeabi_dadd+0x120>
    f600:	1d3b      	adds	r3, r7, #4
    f602:	42bb      	cmp	r3, r7
    f604:	41bf      	sbcs	r7, r7
    f606:	427f      	negs	r7, r7
    f608:	19e4      	adds	r4, r4, r7
    f60a:	001f      	movs	r7, r3
    f60c:	0223      	lsls	r3, r4, #8
    f60e:	d52c      	bpl.n	f66a <__aeabi_dadd+0x17e>
    f610:	4b96      	ldr	r3, [pc, #600]	; (f86c <__aeabi_dadd+0x380>)
    f612:	3601      	adds	r6, #1
    f614:	429e      	cmp	r6, r3
    f616:	d100      	bne.n	f61a <__aeabi_dadd+0x12e>
    f618:	e09a      	b.n	f750 <__aeabi_dadd+0x264>
    f61a:	4645      	mov	r5, r8
    f61c:	4b94      	ldr	r3, [pc, #592]	; (f870 <__aeabi_dadd+0x384>)
    f61e:	08ff      	lsrs	r7, r7, #3
    f620:	401c      	ands	r4, r3
    f622:	0760      	lsls	r0, r4, #29
    f624:	0576      	lsls	r6, r6, #21
    f626:	0264      	lsls	r4, r4, #9
    f628:	4307      	orrs	r7, r0
    f62a:	0b24      	lsrs	r4, r4, #12
    f62c:	0d76      	lsrs	r6, r6, #21
    f62e:	2100      	movs	r1, #0
    f630:	0324      	lsls	r4, r4, #12
    f632:	0b23      	lsrs	r3, r4, #12
    f634:	0d0c      	lsrs	r4, r1, #20
    f636:	4a8f      	ldr	r2, [pc, #572]	; (f874 <__aeabi_dadd+0x388>)
    f638:	0524      	lsls	r4, r4, #20
    f63a:	431c      	orrs	r4, r3
    f63c:	4014      	ands	r4, r2
    f63e:	0533      	lsls	r3, r6, #20
    f640:	4323      	orrs	r3, r4
    f642:	005b      	lsls	r3, r3, #1
    f644:	07ed      	lsls	r5, r5, #31
    f646:	085b      	lsrs	r3, r3, #1
    f648:	432b      	orrs	r3, r5
    f64a:	0038      	movs	r0, r7
    f64c:	0019      	movs	r1, r3
    f64e:	bc3c      	pop	{r2, r3, r4, r5}
    f650:	4690      	mov	r8, r2
    f652:	4699      	mov	r9, r3
    f654:	46a2      	mov	sl, r4
    f656:	46ab      	mov	fp, r5
    f658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f65a:	4664      	mov	r4, ip
    f65c:	4304      	orrs	r4, r0
    f65e:	d100      	bne.n	f662 <__aeabi_dadd+0x176>
    f660:	e211      	b.n	fa86 <__aeabi_dadd+0x59a>
    f662:	0004      	movs	r4, r0
    f664:	4667      	mov	r7, ip
    f666:	077b      	lsls	r3, r7, #29
    f668:	d1c6      	bne.n	f5f8 <__aeabi_dadd+0x10c>
    f66a:	4645      	mov	r5, r8
    f66c:	0760      	lsls	r0, r4, #29
    f66e:	08ff      	lsrs	r7, r7, #3
    f670:	4307      	orrs	r7, r0
    f672:	08e4      	lsrs	r4, r4, #3
    f674:	4b7d      	ldr	r3, [pc, #500]	; (f86c <__aeabi_dadd+0x380>)
    f676:	429e      	cmp	r6, r3
    f678:	d030      	beq.n	f6dc <__aeabi_dadd+0x1f0>
    f67a:	0324      	lsls	r4, r4, #12
    f67c:	0576      	lsls	r6, r6, #21
    f67e:	0b24      	lsrs	r4, r4, #12
    f680:	0d76      	lsrs	r6, r6, #21
    f682:	e7d4      	b.n	f62e <__aeabi_dadd+0x142>
    f684:	1a33      	subs	r3, r6, r0
    f686:	469a      	mov	sl, r3
    f688:	2b00      	cmp	r3, #0
    f68a:	dd78      	ble.n	f77e <__aeabi_dadd+0x292>
    f68c:	2800      	cmp	r0, #0
    f68e:	d031      	beq.n	f6f4 <__aeabi_dadd+0x208>
    f690:	4876      	ldr	r0, [pc, #472]	; (f86c <__aeabi_dadd+0x380>)
    f692:	4286      	cmp	r6, r0
    f694:	d0ae      	beq.n	f5f4 <__aeabi_dadd+0x108>
    f696:	2080      	movs	r0, #128	; 0x80
    f698:	0400      	lsls	r0, r0, #16
    f69a:	4301      	orrs	r1, r0
    f69c:	4653      	mov	r3, sl
    f69e:	2b38      	cmp	r3, #56	; 0x38
    f6a0:	dc00      	bgt.n	f6a4 <__aeabi_dadd+0x1b8>
    f6a2:	e0e9      	b.n	f878 <__aeabi_dadd+0x38c>
    f6a4:	430a      	orrs	r2, r1
    f6a6:	1e51      	subs	r1, r2, #1
    f6a8:	418a      	sbcs	r2, r1
    f6aa:	2100      	movs	r1, #0
    f6ac:	19d2      	adds	r2, r2, r7
    f6ae:	42ba      	cmp	r2, r7
    f6b0:	41bf      	sbcs	r7, r7
    f6b2:	1909      	adds	r1, r1, r4
    f6b4:	427c      	negs	r4, r7
    f6b6:	0017      	movs	r7, r2
    f6b8:	190c      	adds	r4, r1, r4
    f6ba:	0223      	lsls	r3, r4, #8
    f6bc:	d5d3      	bpl.n	f666 <__aeabi_dadd+0x17a>
    f6be:	4b6b      	ldr	r3, [pc, #428]	; (f86c <__aeabi_dadd+0x380>)
    f6c0:	3601      	adds	r6, #1
    f6c2:	429e      	cmp	r6, r3
    f6c4:	d100      	bne.n	f6c8 <__aeabi_dadd+0x1dc>
    f6c6:	e13a      	b.n	f93e <__aeabi_dadd+0x452>
    f6c8:	2001      	movs	r0, #1
    f6ca:	4b69      	ldr	r3, [pc, #420]	; (f870 <__aeabi_dadd+0x384>)
    f6cc:	401c      	ands	r4, r3
    f6ce:	087b      	lsrs	r3, r7, #1
    f6d0:	4007      	ands	r7, r0
    f6d2:	431f      	orrs	r7, r3
    f6d4:	07e0      	lsls	r0, r4, #31
    f6d6:	4307      	orrs	r7, r0
    f6d8:	0864      	lsrs	r4, r4, #1
    f6da:	e78b      	b.n	f5f4 <__aeabi_dadd+0x108>
    f6dc:	0023      	movs	r3, r4
    f6de:	433b      	orrs	r3, r7
    f6e0:	d100      	bne.n	f6e4 <__aeabi_dadd+0x1f8>
    f6e2:	e1cb      	b.n	fa7c <__aeabi_dadd+0x590>
    f6e4:	2280      	movs	r2, #128	; 0x80
    f6e6:	0312      	lsls	r2, r2, #12
    f6e8:	4314      	orrs	r4, r2
    f6ea:	0324      	lsls	r4, r4, #12
    f6ec:	0b24      	lsrs	r4, r4, #12
    f6ee:	e79e      	b.n	f62e <__aeabi_dadd+0x142>
    f6f0:	002e      	movs	r6, r5
    f6f2:	e77f      	b.n	f5f4 <__aeabi_dadd+0x108>
    f6f4:	0008      	movs	r0, r1
    f6f6:	4310      	orrs	r0, r2
    f6f8:	d100      	bne.n	f6fc <__aeabi_dadd+0x210>
    f6fa:	e0b4      	b.n	f866 <__aeabi_dadd+0x37a>
    f6fc:	1e58      	subs	r0, r3, #1
    f6fe:	2800      	cmp	r0, #0
    f700:	d000      	beq.n	f704 <__aeabi_dadd+0x218>
    f702:	e0de      	b.n	f8c2 <__aeabi_dadd+0x3d6>
    f704:	18ba      	adds	r2, r7, r2
    f706:	42ba      	cmp	r2, r7
    f708:	419b      	sbcs	r3, r3
    f70a:	1864      	adds	r4, r4, r1
    f70c:	425b      	negs	r3, r3
    f70e:	18e4      	adds	r4, r4, r3
    f710:	0017      	movs	r7, r2
    f712:	2601      	movs	r6, #1
    f714:	0223      	lsls	r3, r4, #8
    f716:	d5a6      	bpl.n	f666 <__aeabi_dadd+0x17a>
    f718:	2602      	movs	r6, #2
    f71a:	e7d5      	b.n	f6c8 <__aeabi_dadd+0x1dc>
    f71c:	2d00      	cmp	r5, #0
    f71e:	d16e      	bne.n	f7fe <__aeabi_dadd+0x312>
    f720:	1c70      	adds	r0, r6, #1
    f722:	0540      	lsls	r0, r0, #21
    f724:	0d40      	lsrs	r0, r0, #21
    f726:	2801      	cmp	r0, #1
    f728:	dc00      	bgt.n	f72c <__aeabi_dadd+0x240>
    f72a:	e0f9      	b.n	f920 <__aeabi_dadd+0x434>
    f72c:	1ab8      	subs	r0, r7, r2
    f72e:	4684      	mov	ip, r0
    f730:	4287      	cmp	r7, r0
    f732:	4180      	sbcs	r0, r0
    f734:	1ae5      	subs	r5, r4, r3
    f736:	4240      	negs	r0, r0
    f738:	1a2d      	subs	r5, r5, r0
    f73a:	0228      	lsls	r0, r5, #8
    f73c:	d400      	bmi.n	f740 <__aeabi_dadd+0x254>
    f73e:	e089      	b.n	f854 <__aeabi_dadd+0x368>
    f740:	1bd7      	subs	r7, r2, r7
    f742:	42ba      	cmp	r2, r7
    f744:	4192      	sbcs	r2, r2
    f746:	1b1c      	subs	r4, r3, r4
    f748:	4252      	negs	r2, r2
    f74a:	1aa5      	subs	r5, r4, r2
    f74c:	46d8      	mov	r8, fp
    f74e:	e729      	b.n	f5a4 <__aeabi_dadd+0xb8>
    f750:	4645      	mov	r5, r8
    f752:	2400      	movs	r4, #0
    f754:	2700      	movs	r7, #0
    f756:	e76a      	b.n	f62e <__aeabi_dadd+0x142>
    f758:	4c45      	ldr	r4, [pc, #276]	; (f870 <__aeabi_dadd+0x384>)
    f75a:	1af6      	subs	r6, r6, r3
    f75c:	402c      	ands	r4, r5
    f75e:	e749      	b.n	f5f4 <__aeabi_dadd+0x108>
    f760:	003d      	movs	r5, r7
    f762:	3828      	subs	r0, #40	; 0x28
    f764:	4085      	lsls	r5, r0
    f766:	2700      	movs	r7, #0
    f768:	e72e      	b.n	f5c8 <__aeabi_dadd+0xdc>
    f76a:	0038      	movs	r0, r7
    f76c:	f7fa fdb2 	bl	a2d4 <__clzsi2>
    f770:	3020      	adds	r0, #32
    f772:	e71d      	b.n	f5b0 <__aeabi_dadd+0xc4>
    f774:	430a      	orrs	r2, r1
    f776:	1e51      	subs	r1, r2, #1
    f778:	418a      	sbcs	r2, r1
    f77a:	2100      	movs	r1, #0
    f77c:	e707      	b.n	f58e <__aeabi_dadd+0xa2>
    f77e:	2b00      	cmp	r3, #0
    f780:	d000      	beq.n	f784 <__aeabi_dadd+0x298>
    f782:	e0f3      	b.n	f96c <__aeabi_dadd+0x480>
    f784:	1c70      	adds	r0, r6, #1
    f786:	0543      	lsls	r3, r0, #21
    f788:	0d5b      	lsrs	r3, r3, #21
    f78a:	2b01      	cmp	r3, #1
    f78c:	dc00      	bgt.n	f790 <__aeabi_dadd+0x2a4>
    f78e:	e0ad      	b.n	f8ec <__aeabi_dadd+0x400>
    f790:	4b36      	ldr	r3, [pc, #216]	; (f86c <__aeabi_dadd+0x380>)
    f792:	4298      	cmp	r0, r3
    f794:	d100      	bne.n	f798 <__aeabi_dadd+0x2ac>
    f796:	e0d1      	b.n	f93c <__aeabi_dadd+0x450>
    f798:	18ba      	adds	r2, r7, r2
    f79a:	42ba      	cmp	r2, r7
    f79c:	41bf      	sbcs	r7, r7
    f79e:	1864      	adds	r4, r4, r1
    f7a0:	427f      	negs	r7, r7
    f7a2:	19e4      	adds	r4, r4, r7
    f7a4:	07e7      	lsls	r7, r4, #31
    f7a6:	0852      	lsrs	r2, r2, #1
    f7a8:	4317      	orrs	r7, r2
    f7aa:	0864      	lsrs	r4, r4, #1
    f7ac:	0006      	movs	r6, r0
    f7ae:	e721      	b.n	f5f4 <__aeabi_dadd+0x108>
    f7b0:	482e      	ldr	r0, [pc, #184]	; (f86c <__aeabi_dadd+0x380>)
    f7b2:	4285      	cmp	r5, r0
    f7b4:	d100      	bne.n	f7b8 <__aeabi_dadd+0x2cc>
    f7b6:	e093      	b.n	f8e0 <__aeabi_dadd+0x3f4>
    f7b8:	001d      	movs	r5, r3
    f7ba:	e6d0      	b.n	f55e <__aeabi_dadd+0x72>
    f7bc:	0029      	movs	r1, r5
    f7be:	3e1f      	subs	r6, #31
    f7c0:	40f1      	lsrs	r1, r6
    f7c2:	2b20      	cmp	r3, #32
    f7c4:	d100      	bne.n	f7c8 <__aeabi_dadd+0x2dc>
    f7c6:	e08d      	b.n	f8e4 <__aeabi_dadd+0x3f8>
    f7c8:	2240      	movs	r2, #64	; 0x40
    f7ca:	1ad3      	subs	r3, r2, r3
    f7cc:	409d      	lsls	r5, r3
    f7ce:	432f      	orrs	r7, r5
    f7d0:	1e7d      	subs	r5, r7, #1
    f7d2:	41af      	sbcs	r7, r5
    f7d4:	2400      	movs	r4, #0
    f7d6:	430f      	orrs	r7, r1
    f7d8:	2600      	movs	r6, #0
    f7da:	e744      	b.n	f666 <__aeabi_dadd+0x17a>
    f7dc:	002b      	movs	r3, r5
    f7de:	0008      	movs	r0, r1
    f7e0:	3b20      	subs	r3, #32
    f7e2:	40d8      	lsrs	r0, r3
    f7e4:	0003      	movs	r3, r0
    f7e6:	2d20      	cmp	r5, #32
    f7e8:	d100      	bne.n	f7ec <__aeabi_dadd+0x300>
    f7ea:	e07d      	b.n	f8e8 <__aeabi_dadd+0x3fc>
    f7ec:	2040      	movs	r0, #64	; 0x40
    f7ee:	1b45      	subs	r5, r0, r5
    f7f0:	40a9      	lsls	r1, r5
    f7f2:	430a      	orrs	r2, r1
    f7f4:	1e51      	subs	r1, r2, #1
    f7f6:	418a      	sbcs	r2, r1
    f7f8:	2100      	movs	r1, #0
    f7fa:	431a      	orrs	r2, r3
    f7fc:	e6c7      	b.n	f58e <__aeabi_dadd+0xa2>
    f7fe:	2e00      	cmp	r6, #0
    f800:	d050      	beq.n	f8a4 <__aeabi_dadd+0x3b8>
    f802:	4e1a      	ldr	r6, [pc, #104]	; (f86c <__aeabi_dadd+0x380>)
    f804:	42b0      	cmp	r0, r6
    f806:	d057      	beq.n	f8b8 <__aeabi_dadd+0x3cc>
    f808:	2680      	movs	r6, #128	; 0x80
    f80a:	426b      	negs	r3, r5
    f80c:	4699      	mov	r9, r3
    f80e:	0436      	lsls	r6, r6, #16
    f810:	4334      	orrs	r4, r6
    f812:	464b      	mov	r3, r9
    f814:	2b38      	cmp	r3, #56	; 0x38
    f816:	dd00      	ble.n	f81a <__aeabi_dadd+0x32e>
    f818:	e0d6      	b.n	f9c8 <__aeabi_dadd+0x4dc>
    f81a:	2b1f      	cmp	r3, #31
    f81c:	dd00      	ble.n	f820 <__aeabi_dadd+0x334>
    f81e:	e135      	b.n	fa8c <__aeabi_dadd+0x5a0>
    f820:	2620      	movs	r6, #32
    f822:	1af5      	subs	r5, r6, r3
    f824:	0026      	movs	r6, r4
    f826:	40ae      	lsls	r6, r5
    f828:	46b2      	mov	sl, r6
    f82a:	003e      	movs	r6, r7
    f82c:	40de      	lsrs	r6, r3
    f82e:	46ac      	mov	ip, r5
    f830:	0035      	movs	r5, r6
    f832:	4656      	mov	r6, sl
    f834:	432e      	orrs	r6, r5
    f836:	4665      	mov	r5, ip
    f838:	40af      	lsls	r7, r5
    f83a:	1e7d      	subs	r5, r7, #1
    f83c:	41af      	sbcs	r7, r5
    f83e:	40dc      	lsrs	r4, r3
    f840:	4337      	orrs	r7, r6
    f842:	1bd7      	subs	r7, r2, r7
    f844:	42ba      	cmp	r2, r7
    f846:	4192      	sbcs	r2, r2
    f848:	1b0c      	subs	r4, r1, r4
    f84a:	4252      	negs	r2, r2
    f84c:	1aa4      	subs	r4, r4, r2
    f84e:	0006      	movs	r6, r0
    f850:	46d8      	mov	r8, fp
    f852:	e6a3      	b.n	f59c <__aeabi_dadd+0xb0>
    f854:	4664      	mov	r4, ip
    f856:	4667      	mov	r7, ip
    f858:	432c      	orrs	r4, r5
    f85a:	d000      	beq.n	f85e <__aeabi_dadd+0x372>
    f85c:	e6a2      	b.n	f5a4 <__aeabi_dadd+0xb8>
    f85e:	2500      	movs	r5, #0
    f860:	2600      	movs	r6, #0
    f862:	2700      	movs	r7, #0
    f864:	e706      	b.n	f674 <__aeabi_dadd+0x188>
    f866:	001e      	movs	r6, r3
    f868:	e6c4      	b.n	f5f4 <__aeabi_dadd+0x108>
    f86a:	46c0      	nop			; (mov r8, r8)
    f86c:	000007ff 	.word	0x000007ff
    f870:	ff7fffff 	.word	0xff7fffff
    f874:	800fffff 	.word	0x800fffff
    f878:	2b1f      	cmp	r3, #31
    f87a:	dc63      	bgt.n	f944 <__aeabi_dadd+0x458>
    f87c:	2020      	movs	r0, #32
    f87e:	1ac3      	subs	r3, r0, r3
    f880:	0008      	movs	r0, r1
    f882:	4098      	lsls	r0, r3
    f884:	469c      	mov	ip, r3
    f886:	4683      	mov	fp, r0
    f888:	4653      	mov	r3, sl
    f88a:	0010      	movs	r0, r2
    f88c:	40d8      	lsrs	r0, r3
    f88e:	0003      	movs	r3, r0
    f890:	4658      	mov	r0, fp
    f892:	4318      	orrs	r0, r3
    f894:	4663      	mov	r3, ip
    f896:	409a      	lsls	r2, r3
    f898:	1e53      	subs	r3, r2, #1
    f89a:	419a      	sbcs	r2, r3
    f89c:	4653      	mov	r3, sl
    f89e:	4302      	orrs	r2, r0
    f8a0:	40d9      	lsrs	r1, r3
    f8a2:	e703      	b.n	f6ac <__aeabi_dadd+0x1c0>
    f8a4:	0026      	movs	r6, r4
    f8a6:	433e      	orrs	r6, r7
    f8a8:	d006      	beq.n	f8b8 <__aeabi_dadd+0x3cc>
    f8aa:	43eb      	mvns	r3, r5
    f8ac:	4699      	mov	r9, r3
    f8ae:	2b00      	cmp	r3, #0
    f8b0:	d0c7      	beq.n	f842 <__aeabi_dadd+0x356>
    f8b2:	4e94      	ldr	r6, [pc, #592]	; (fb04 <__aeabi_dadd+0x618>)
    f8b4:	42b0      	cmp	r0, r6
    f8b6:	d1ac      	bne.n	f812 <__aeabi_dadd+0x326>
    f8b8:	000c      	movs	r4, r1
    f8ba:	0017      	movs	r7, r2
    f8bc:	0006      	movs	r6, r0
    f8be:	46d8      	mov	r8, fp
    f8c0:	e698      	b.n	f5f4 <__aeabi_dadd+0x108>
    f8c2:	4b90      	ldr	r3, [pc, #576]	; (fb04 <__aeabi_dadd+0x618>)
    f8c4:	459a      	cmp	sl, r3
    f8c6:	d00b      	beq.n	f8e0 <__aeabi_dadd+0x3f4>
    f8c8:	4682      	mov	sl, r0
    f8ca:	e6e7      	b.n	f69c <__aeabi_dadd+0x1b0>
    f8cc:	2800      	cmp	r0, #0
    f8ce:	d000      	beq.n	f8d2 <__aeabi_dadd+0x3e6>
    f8d0:	e09e      	b.n	fa10 <__aeabi_dadd+0x524>
    f8d2:	0018      	movs	r0, r3
    f8d4:	4310      	orrs	r0, r2
    f8d6:	d100      	bne.n	f8da <__aeabi_dadd+0x3ee>
    f8d8:	e0e9      	b.n	faae <__aeabi_dadd+0x5c2>
    f8da:	001c      	movs	r4, r3
    f8dc:	0017      	movs	r7, r2
    f8de:	46d8      	mov	r8, fp
    f8e0:	4e88      	ldr	r6, [pc, #544]	; (fb04 <__aeabi_dadd+0x618>)
    f8e2:	e687      	b.n	f5f4 <__aeabi_dadd+0x108>
    f8e4:	2500      	movs	r5, #0
    f8e6:	e772      	b.n	f7ce <__aeabi_dadd+0x2e2>
    f8e8:	2100      	movs	r1, #0
    f8ea:	e782      	b.n	f7f2 <__aeabi_dadd+0x306>
    f8ec:	0023      	movs	r3, r4
    f8ee:	433b      	orrs	r3, r7
    f8f0:	2e00      	cmp	r6, #0
    f8f2:	d000      	beq.n	f8f6 <__aeabi_dadd+0x40a>
    f8f4:	e0ab      	b.n	fa4e <__aeabi_dadd+0x562>
    f8f6:	2b00      	cmp	r3, #0
    f8f8:	d100      	bne.n	f8fc <__aeabi_dadd+0x410>
    f8fa:	e0e7      	b.n	facc <__aeabi_dadd+0x5e0>
    f8fc:	000b      	movs	r3, r1
    f8fe:	4313      	orrs	r3, r2
    f900:	d100      	bne.n	f904 <__aeabi_dadd+0x418>
    f902:	e677      	b.n	f5f4 <__aeabi_dadd+0x108>
    f904:	18ba      	adds	r2, r7, r2
    f906:	42ba      	cmp	r2, r7
    f908:	41bf      	sbcs	r7, r7
    f90a:	1864      	adds	r4, r4, r1
    f90c:	427f      	negs	r7, r7
    f90e:	19e4      	adds	r4, r4, r7
    f910:	0223      	lsls	r3, r4, #8
    f912:	d400      	bmi.n	f916 <__aeabi_dadd+0x42a>
    f914:	e0f2      	b.n	fafc <__aeabi_dadd+0x610>
    f916:	4b7c      	ldr	r3, [pc, #496]	; (fb08 <__aeabi_dadd+0x61c>)
    f918:	0017      	movs	r7, r2
    f91a:	401c      	ands	r4, r3
    f91c:	0006      	movs	r6, r0
    f91e:	e669      	b.n	f5f4 <__aeabi_dadd+0x108>
    f920:	0020      	movs	r0, r4
    f922:	4338      	orrs	r0, r7
    f924:	2e00      	cmp	r6, #0
    f926:	d1d1      	bne.n	f8cc <__aeabi_dadd+0x3e0>
    f928:	2800      	cmp	r0, #0
    f92a:	d15b      	bne.n	f9e4 <__aeabi_dadd+0x4f8>
    f92c:	001c      	movs	r4, r3
    f92e:	4314      	orrs	r4, r2
    f930:	d100      	bne.n	f934 <__aeabi_dadd+0x448>
    f932:	e0a8      	b.n	fa86 <__aeabi_dadd+0x59a>
    f934:	001c      	movs	r4, r3
    f936:	0017      	movs	r7, r2
    f938:	46d8      	mov	r8, fp
    f93a:	e65b      	b.n	f5f4 <__aeabi_dadd+0x108>
    f93c:	0006      	movs	r6, r0
    f93e:	2400      	movs	r4, #0
    f940:	2700      	movs	r7, #0
    f942:	e697      	b.n	f674 <__aeabi_dadd+0x188>
    f944:	4650      	mov	r0, sl
    f946:	000b      	movs	r3, r1
    f948:	3820      	subs	r0, #32
    f94a:	40c3      	lsrs	r3, r0
    f94c:	4699      	mov	r9, r3
    f94e:	4653      	mov	r3, sl
    f950:	2b20      	cmp	r3, #32
    f952:	d100      	bne.n	f956 <__aeabi_dadd+0x46a>
    f954:	e095      	b.n	fa82 <__aeabi_dadd+0x596>
    f956:	2340      	movs	r3, #64	; 0x40
    f958:	4650      	mov	r0, sl
    f95a:	1a1b      	subs	r3, r3, r0
    f95c:	4099      	lsls	r1, r3
    f95e:	430a      	orrs	r2, r1
    f960:	1e51      	subs	r1, r2, #1
    f962:	418a      	sbcs	r2, r1
    f964:	464b      	mov	r3, r9
    f966:	2100      	movs	r1, #0
    f968:	431a      	orrs	r2, r3
    f96a:	e69f      	b.n	f6ac <__aeabi_dadd+0x1c0>
    f96c:	2e00      	cmp	r6, #0
    f96e:	d130      	bne.n	f9d2 <__aeabi_dadd+0x4e6>
    f970:	0026      	movs	r6, r4
    f972:	433e      	orrs	r6, r7
    f974:	d067      	beq.n	fa46 <__aeabi_dadd+0x55a>
    f976:	43db      	mvns	r3, r3
    f978:	469a      	mov	sl, r3
    f97a:	2b00      	cmp	r3, #0
    f97c:	d01c      	beq.n	f9b8 <__aeabi_dadd+0x4cc>
    f97e:	4e61      	ldr	r6, [pc, #388]	; (fb04 <__aeabi_dadd+0x618>)
    f980:	42b0      	cmp	r0, r6
    f982:	d060      	beq.n	fa46 <__aeabi_dadd+0x55a>
    f984:	4653      	mov	r3, sl
    f986:	2b38      	cmp	r3, #56	; 0x38
    f988:	dd00      	ble.n	f98c <__aeabi_dadd+0x4a0>
    f98a:	e096      	b.n	faba <__aeabi_dadd+0x5ce>
    f98c:	2b1f      	cmp	r3, #31
    f98e:	dd00      	ble.n	f992 <__aeabi_dadd+0x4a6>
    f990:	e09f      	b.n	fad2 <__aeabi_dadd+0x5e6>
    f992:	2620      	movs	r6, #32
    f994:	1af3      	subs	r3, r6, r3
    f996:	0026      	movs	r6, r4
    f998:	409e      	lsls	r6, r3
    f99a:	469c      	mov	ip, r3
    f99c:	46b3      	mov	fp, r6
    f99e:	4653      	mov	r3, sl
    f9a0:	003e      	movs	r6, r7
    f9a2:	40de      	lsrs	r6, r3
    f9a4:	0033      	movs	r3, r6
    f9a6:	465e      	mov	r6, fp
    f9a8:	431e      	orrs	r6, r3
    f9aa:	4663      	mov	r3, ip
    f9ac:	409f      	lsls	r7, r3
    f9ae:	1e7b      	subs	r3, r7, #1
    f9b0:	419f      	sbcs	r7, r3
    f9b2:	4653      	mov	r3, sl
    f9b4:	40dc      	lsrs	r4, r3
    f9b6:	4337      	orrs	r7, r6
    f9b8:	18bf      	adds	r7, r7, r2
    f9ba:	4297      	cmp	r7, r2
    f9bc:	4192      	sbcs	r2, r2
    f9be:	1864      	adds	r4, r4, r1
    f9c0:	4252      	negs	r2, r2
    f9c2:	18a4      	adds	r4, r4, r2
    f9c4:	0006      	movs	r6, r0
    f9c6:	e678      	b.n	f6ba <__aeabi_dadd+0x1ce>
    f9c8:	4327      	orrs	r7, r4
    f9ca:	1e7c      	subs	r4, r7, #1
    f9cc:	41a7      	sbcs	r7, r4
    f9ce:	2400      	movs	r4, #0
    f9d0:	e737      	b.n	f842 <__aeabi_dadd+0x356>
    f9d2:	4e4c      	ldr	r6, [pc, #304]	; (fb04 <__aeabi_dadd+0x618>)
    f9d4:	42b0      	cmp	r0, r6
    f9d6:	d036      	beq.n	fa46 <__aeabi_dadd+0x55a>
    f9d8:	2680      	movs	r6, #128	; 0x80
    f9da:	425b      	negs	r3, r3
    f9dc:	0436      	lsls	r6, r6, #16
    f9de:	469a      	mov	sl, r3
    f9e0:	4334      	orrs	r4, r6
    f9e2:	e7cf      	b.n	f984 <__aeabi_dadd+0x498>
    f9e4:	0018      	movs	r0, r3
    f9e6:	4310      	orrs	r0, r2
    f9e8:	d100      	bne.n	f9ec <__aeabi_dadd+0x500>
    f9ea:	e603      	b.n	f5f4 <__aeabi_dadd+0x108>
    f9ec:	1ab8      	subs	r0, r7, r2
    f9ee:	4684      	mov	ip, r0
    f9f0:	4567      	cmp	r7, ip
    f9f2:	41ad      	sbcs	r5, r5
    f9f4:	1ae0      	subs	r0, r4, r3
    f9f6:	426d      	negs	r5, r5
    f9f8:	1b40      	subs	r0, r0, r5
    f9fa:	0205      	lsls	r5, r0, #8
    f9fc:	d400      	bmi.n	fa00 <__aeabi_dadd+0x514>
    f9fe:	e62c      	b.n	f65a <__aeabi_dadd+0x16e>
    fa00:	1bd7      	subs	r7, r2, r7
    fa02:	42ba      	cmp	r2, r7
    fa04:	4192      	sbcs	r2, r2
    fa06:	1b1c      	subs	r4, r3, r4
    fa08:	4252      	negs	r2, r2
    fa0a:	1aa4      	subs	r4, r4, r2
    fa0c:	46d8      	mov	r8, fp
    fa0e:	e5f1      	b.n	f5f4 <__aeabi_dadd+0x108>
    fa10:	0018      	movs	r0, r3
    fa12:	4310      	orrs	r0, r2
    fa14:	d100      	bne.n	fa18 <__aeabi_dadd+0x52c>
    fa16:	e763      	b.n	f8e0 <__aeabi_dadd+0x3f4>
    fa18:	08f8      	lsrs	r0, r7, #3
    fa1a:	0767      	lsls	r7, r4, #29
    fa1c:	4307      	orrs	r7, r0
    fa1e:	2080      	movs	r0, #128	; 0x80
    fa20:	08e4      	lsrs	r4, r4, #3
    fa22:	0300      	lsls	r0, r0, #12
    fa24:	4204      	tst	r4, r0
    fa26:	d008      	beq.n	fa3a <__aeabi_dadd+0x54e>
    fa28:	08dd      	lsrs	r5, r3, #3
    fa2a:	4205      	tst	r5, r0
    fa2c:	d105      	bne.n	fa3a <__aeabi_dadd+0x54e>
    fa2e:	08d2      	lsrs	r2, r2, #3
    fa30:	0759      	lsls	r1, r3, #29
    fa32:	4311      	orrs	r1, r2
    fa34:	000f      	movs	r7, r1
    fa36:	002c      	movs	r4, r5
    fa38:	46d8      	mov	r8, fp
    fa3a:	0f7b      	lsrs	r3, r7, #29
    fa3c:	00e4      	lsls	r4, r4, #3
    fa3e:	431c      	orrs	r4, r3
    fa40:	00ff      	lsls	r7, r7, #3
    fa42:	4e30      	ldr	r6, [pc, #192]	; (fb04 <__aeabi_dadd+0x618>)
    fa44:	e5d6      	b.n	f5f4 <__aeabi_dadd+0x108>
    fa46:	000c      	movs	r4, r1
    fa48:	0017      	movs	r7, r2
    fa4a:	0006      	movs	r6, r0
    fa4c:	e5d2      	b.n	f5f4 <__aeabi_dadd+0x108>
    fa4e:	2b00      	cmp	r3, #0
    fa50:	d038      	beq.n	fac4 <__aeabi_dadd+0x5d8>
    fa52:	000b      	movs	r3, r1
    fa54:	4313      	orrs	r3, r2
    fa56:	d100      	bne.n	fa5a <__aeabi_dadd+0x56e>
    fa58:	e742      	b.n	f8e0 <__aeabi_dadd+0x3f4>
    fa5a:	08f8      	lsrs	r0, r7, #3
    fa5c:	0767      	lsls	r7, r4, #29
    fa5e:	4307      	orrs	r7, r0
    fa60:	2080      	movs	r0, #128	; 0x80
    fa62:	08e4      	lsrs	r4, r4, #3
    fa64:	0300      	lsls	r0, r0, #12
    fa66:	4204      	tst	r4, r0
    fa68:	d0e7      	beq.n	fa3a <__aeabi_dadd+0x54e>
    fa6a:	08cb      	lsrs	r3, r1, #3
    fa6c:	4203      	tst	r3, r0
    fa6e:	d1e4      	bne.n	fa3a <__aeabi_dadd+0x54e>
    fa70:	08d2      	lsrs	r2, r2, #3
    fa72:	0749      	lsls	r1, r1, #29
    fa74:	4311      	orrs	r1, r2
    fa76:	000f      	movs	r7, r1
    fa78:	001c      	movs	r4, r3
    fa7a:	e7de      	b.n	fa3a <__aeabi_dadd+0x54e>
    fa7c:	2700      	movs	r7, #0
    fa7e:	2400      	movs	r4, #0
    fa80:	e5d5      	b.n	f62e <__aeabi_dadd+0x142>
    fa82:	2100      	movs	r1, #0
    fa84:	e76b      	b.n	f95e <__aeabi_dadd+0x472>
    fa86:	2500      	movs	r5, #0
    fa88:	2700      	movs	r7, #0
    fa8a:	e5f3      	b.n	f674 <__aeabi_dadd+0x188>
    fa8c:	464e      	mov	r6, r9
    fa8e:	0025      	movs	r5, r4
    fa90:	3e20      	subs	r6, #32
    fa92:	40f5      	lsrs	r5, r6
    fa94:	464b      	mov	r3, r9
    fa96:	002e      	movs	r6, r5
    fa98:	2b20      	cmp	r3, #32
    fa9a:	d02d      	beq.n	faf8 <__aeabi_dadd+0x60c>
    fa9c:	2540      	movs	r5, #64	; 0x40
    fa9e:	1aed      	subs	r5, r5, r3
    faa0:	40ac      	lsls	r4, r5
    faa2:	4327      	orrs	r7, r4
    faa4:	1e7c      	subs	r4, r7, #1
    faa6:	41a7      	sbcs	r7, r4
    faa8:	2400      	movs	r4, #0
    faaa:	4337      	orrs	r7, r6
    faac:	e6c9      	b.n	f842 <__aeabi_dadd+0x356>
    faae:	2480      	movs	r4, #128	; 0x80
    fab0:	2500      	movs	r5, #0
    fab2:	0324      	lsls	r4, r4, #12
    fab4:	4e13      	ldr	r6, [pc, #76]	; (fb04 <__aeabi_dadd+0x618>)
    fab6:	2700      	movs	r7, #0
    fab8:	e5dc      	b.n	f674 <__aeabi_dadd+0x188>
    faba:	4327      	orrs	r7, r4
    fabc:	1e7c      	subs	r4, r7, #1
    fabe:	41a7      	sbcs	r7, r4
    fac0:	2400      	movs	r4, #0
    fac2:	e779      	b.n	f9b8 <__aeabi_dadd+0x4cc>
    fac4:	000c      	movs	r4, r1
    fac6:	0017      	movs	r7, r2
    fac8:	4e0e      	ldr	r6, [pc, #56]	; (fb04 <__aeabi_dadd+0x618>)
    faca:	e593      	b.n	f5f4 <__aeabi_dadd+0x108>
    facc:	000c      	movs	r4, r1
    face:	0017      	movs	r7, r2
    fad0:	e590      	b.n	f5f4 <__aeabi_dadd+0x108>
    fad2:	4656      	mov	r6, sl
    fad4:	0023      	movs	r3, r4
    fad6:	3e20      	subs	r6, #32
    fad8:	40f3      	lsrs	r3, r6
    fada:	4699      	mov	r9, r3
    fadc:	4653      	mov	r3, sl
    fade:	2b20      	cmp	r3, #32
    fae0:	d00e      	beq.n	fb00 <__aeabi_dadd+0x614>
    fae2:	2340      	movs	r3, #64	; 0x40
    fae4:	4656      	mov	r6, sl
    fae6:	1b9b      	subs	r3, r3, r6
    fae8:	409c      	lsls	r4, r3
    faea:	4327      	orrs	r7, r4
    faec:	1e7c      	subs	r4, r7, #1
    faee:	41a7      	sbcs	r7, r4
    faf0:	464b      	mov	r3, r9
    faf2:	2400      	movs	r4, #0
    faf4:	431f      	orrs	r7, r3
    faf6:	e75f      	b.n	f9b8 <__aeabi_dadd+0x4cc>
    faf8:	2400      	movs	r4, #0
    fafa:	e7d2      	b.n	faa2 <__aeabi_dadd+0x5b6>
    fafc:	0017      	movs	r7, r2
    fafe:	e5b2      	b.n	f666 <__aeabi_dadd+0x17a>
    fb00:	2400      	movs	r4, #0
    fb02:	e7f2      	b.n	faea <__aeabi_dadd+0x5fe>
    fb04:	000007ff 	.word	0x000007ff
    fb08:	ff7fffff 	.word	0xff7fffff

0000fb0c <__aeabi_dcmpun>:
    fb0c:	b570      	push	{r4, r5, r6, lr}
    fb0e:	4e0e      	ldr	r6, [pc, #56]	; (fb48 <__aeabi_dcmpun+0x3c>)
    fb10:	030d      	lsls	r5, r1, #12
    fb12:	031c      	lsls	r4, r3, #12
    fb14:	0049      	lsls	r1, r1, #1
    fb16:	005b      	lsls	r3, r3, #1
    fb18:	0b2d      	lsrs	r5, r5, #12
    fb1a:	0d49      	lsrs	r1, r1, #21
    fb1c:	0b24      	lsrs	r4, r4, #12
    fb1e:	0d5b      	lsrs	r3, r3, #21
    fb20:	42b1      	cmp	r1, r6
    fb22:	d004      	beq.n	fb2e <__aeabi_dcmpun+0x22>
    fb24:	4908      	ldr	r1, [pc, #32]	; (fb48 <__aeabi_dcmpun+0x3c>)
    fb26:	2000      	movs	r0, #0
    fb28:	428b      	cmp	r3, r1
    fb2a:	d008      	beq.n	fb3e <__aeabi_dcmpun+0x32>
    fb2c:	bd70      	pop	{r4, r5, r6, pc}
    fb2e:	4305      	orrs	r5, r0
    fb30:	2001      	movs	r0, #1
    fb32:	2d00      	cmp	r5, #0
    fb34:	d1fa      	bne.n	fb2c <__aeabi_dcmpun+0x20>
    fb36:	4904      	ldr	r1, [pc, #16]	; (fb48 <__aeabi_dcmpun+0x3c>)
    fb38:	2000      	movs	r0, #0
    fb3a:	428b      	cmp	r3, r1
    fb3c:	d1f6      	bne.n	fb2c <__aeabi_dcmpun+0x20>
    fb3e:	4314      	orrs	r4, r2
    fb40:	0020      	movs	r0, r4
    fb42:	1e44      	subs	r4, r0, #1
    fb44:	41a0      	sbcs	r0, r4
    fb46:	e7f1      	b.n	fb2c <__aeabi_dcmpun+0x20>
    fb48:	000007ff 	.word	0x000007ff

0000fb4c <_close>:
    fb4c:	2258      	movs	r2, #88	; 0x58
    fb4e:	2001      	movs	r0, #1
    fb50:	4b01      	ldr	r3, [pc, #4]	; (fb58 <_close+0xc>)
    fb52:	4240      	negs	r0, r0
    fb54:	601a      	str	r2, [r3, #0]
    fb56:	4770      	bx	lr
    fb58:	20001168 	.word	0x20001168

0000fb5c <_fstat>:
    fb5c:	2258      	movs	r2, #88	; 0x58
    fb5e:	2001      	movs	r0, #1
    fb60:	4b01      	ldr	r3, [pc, #4]	; (fb68 <_fstat+0xc>)
    fb62:	4240      	negs	r0, r0
    fb64:	601a      	str	r2, [r3, #0]
    fb66:	4770      	bx	lr
    fb68:	20001168 	.word	0x20001168

0000fb6c <_isatty>:
    fb6c:	2258      	movs	r2, #88	; 0x58
    fb6e:	4b02      	ldr	r3, [pc, #8]	; (fb78 <_isatty+0xc>)
    fb70:	2000      	movs	r0, #0
    fb72:	601a      	str	r2, [r3, #0]
    fb74:	4770      	bx	lr
    fb76:	46c0      	nop			; (mov r8, r8)
    fb78:	20001168 	.word	0x20001168

0000fb7c <_lseek>:
    fb7c:	2258      	movs	r2, #88	; 0x58
    fb7e:	2001      	movs	r0, #1
    fb80:	4b01      	ldr	r3, [pc, #4]	; (fb88 <_lseek+0xc>)
    fb82:	4240      	negs	r0, r0
    fb84:	601a      	str	r2, [r3, #0]
    fb86:	4770      	bx	lr
    fb88:	20001168 	.word	0x20001168

0000fb8c <_read>:
    fb8c:	2258      	movs	r2, #88	; 0x58
    fb8e:	2001      	movs	r0, #1
    fb90:	4b01      	ldr	r3, [pc, #4]	; (fb98 <_read+0xc>)
    fb92:	4240      	negs	r0, r0
    fb94:	601a      	str	r2, [r3, #0]
    fb96:	4770      	bx	lr
    fb98:	20001168 	.word	0x20001168

0000fb9c <_sbrk>:
    fb9c:	4a04      	ldr	r2, [pc, #16]	; (fbb0 <_sbrk+0x14>)
    fb9e:	6813      	ldr	r3, [r2, #0]
    fba0:	2b00      	cmp	r3, #0
    fba2:	d003      	beq.n	fbac <_sbrk+0x10>
    fba4:	1818      	adds	r0, r3, r0
    fba6:	6010      	str	r0, [r2, #0]
    fba8:	0018      	movs	r0, r3
    fbaa:	4770      	bx	lr
    fbac:	4b01      	ldr	r3, [pc, #4]	; (fbb4 <_sbrk+0x18>)
    fbae:	e7f9      	b.n	fba4 <_sbrk+0x8>
    fbb0:	200010e0 	.word	0x200010e0
    fbb4:	20003170 	.word	0x20003170

0000fbb8 <_write>:
    fbb8:	2258      	movs	r2, #88	; 0x58
    fbba:	2001      	movs	r0, #1
    fbbc:	4b01      	ldr	r3, [pc, #4]	; (fbc4 <_write+0xc>)
    fbbe:	4240      	negs	r0, r0
    fbc0:	601a      	str	r2, [r3, #0]
    fbc2:	4770      	bx	lr
    fbc4:	20001168 	.word	0x20001168
    fbc8:	656e6f74 	.word	0x656e6f74
    fbcc:	6c25203a 	.word	0x6c25203a
    fbd0:	0a0d2075 	.word	0x0a0d2075
    fbd4:	00000000 	.word	0x00000000
    fbd8:	682f2e2e 	.word	0x682f2e2e
    fbdc:	702f6c70 	.word	0x702f6c70
    fbe0:	2f74726f 	.word	0x2f74726f
    fbe4:	5f6c7068 	.word	0x5f6c7068
    fbe8:	6f697067 	.word	0x6f697067
    fbec:	7361625f 	.word	0x7361625f
    fbf0:	00682e65 	.word	0x00682e65
    fbf4:	682f2e2e 	.word	0x682f2e2e
    fbf8:	702f6c70 	.word	0x702f6c70
    fbfc:	70682f6d 	.word	0x70682f6d
    fc00:	6d705f6c 	.word	0x6d705f6c
    fc04:	7361625f 	.word	0x7361625f
    fc08:	00682e65 	.word	0x00682e65
    fc0c:	682f2e2e 	.word	0x682f2e2e
    fc10:	732f6c61 	.word	0x732f6c61
    fc14:	682f6372 	.word	0x682f6372
    fc18:	645f6c61 	.word	0x645f6c61
    fc1c:	735f6361 	.word	0x735f6361
    fc20:	2e636e79 	.word	0x2e636e79
    fc24:	00000063 	.word	0x00000063
    fc28:	682f2e2e 	.word	0x682f2e2e
    fc2c:	732f6c61 	.word	0x732f6c61
    fc30:	682f6372 	.word	0x682f6372
    fc34:	695f6c61 	.word	0x695f6c61
    fc38:	00632e6f 	.word	0x00632e6f
    fc3c:	682f2e2e 	.word	0x682f2e2e
    fc40:	732f6c61 	.word	0x732f6c61
    fc44:	682f6372 	.word	0x682f6372
    fc48:	735f6c61 	.word	0x735f6c61
    fc4c:	6d5f6970 	.word	0x6d5f6970
    fc50:	6e79735f 	.word	0x6e79735f
    fc54:	00632e63 	.word	0x00632e63
    fc58:	682f2e2e 	.word	0x682f2e2e
    fc5c:	732f6c61 	.word	0x732f6c61
    fc60:	682f6372 	.word	0x682f6372
    fc64:	755f6c61 	.word	0x755f6c61
    fc68:	74726173 	.word	0x74726173
    fc6c:	6e79735f 	.word	0x6e79735f
    fc70:	00632e63 	.word	0x00632e63
    fc74:	682f2e2e 	.word	0x682f2e2e
    fc78:	632f6c70 	.word	0x632f6c70
    fc7c:	2f65726f 	.word	0x2f65726f
    fc80:	5f6c7068 	.word	0x5f6c7068
    fc84:	65726f63 	.word	0x65726f63
    fc88:	70306d5f 	.word	0x70306d5f
    fc8c:	5f73756c 	.word	0x5f73756c
    fc90:	65736162 	.word	0x65736162
    fc94:	0000632e 	.word	0x0000632e
    fc98:	0000291e 	.word	0x0000291e
    fc9c:	000028fc 	.word	0x000028fc
    fca0:	000028da 	.word	0x000028da
    fca4:	000028b8 	.word	0x000028b8
    fca8:	00002896 	.word	0x00002896
    fcac:	00002a0a 	.word	0x00002a0a
    fcb0:	000029e8 	.word	0x000029e8
    fcb4:	000029d4 	.word	0x000029d4
    fcb8:	000029b6 	.word	0x000029b6
    fcbc:	0000299e 	.word	0x0000299e
    fcc0:	682f2e2e 	.word	0x682f2e2e
    fcc4:	642f6c70 	.word	0x642f6c70
    fcc8:	682f6361 	.word	0x682f6361
    fccc:	645f6c70 	.word	0x645f6c70
    fcd0:	632e6361 	.word	0x632e6361
    fcd4:	00000000 	.word	0x00000000
    fcd8:	682f2e2e 	.word	0x682f2e2e
    fcdc:	732f6c70 	.word	0x732f6c70
    fce0:	6f637265 	.word	0x6f637265
    fce4:	70682f6d 	.word	0x70682f6d
    fce8:	65735f6c 	.word	0x65735f6c
    fcec:	6d6f6372 	.word	0x6d6f6372
    fcf0:	0000632e 	.word	0x0000632e

0000fcf4 <sercomspi_regs>:
    fcf4:	0020000c 00020000 00000000 01ff003b     .. .........;...
    fd04:	20000c00 02000000 00000000 ff000500     ... ............
    fd14:	000c0101 00000030 00000002 00170000     ....0...........
    fd24:	000201ff                                ....

0000fd28 <_usb_ep_cfgs>:
    fd28:	20000b7c 00000000 00000040 20000bbc     |.. ....@...... 
    fd38:	00000000 00000040 20000bfc 00000000     ....@...... ....
    fd48:	00000040 20000c3c 00000000 00000040     @...<.. ....@...
    fd58:	20000c7c 00000000 00000040 20000cbc     |.. ....@...... 
    fd68:	00000000 00000040 20000cfc 00000000     ....@...... ....
    fd78:	00000040 20000d3c 00000000 00000040     @...<.. ....@...
    fd88:	00000804 00004a25 000083cc 00008386     ....%J..........
    fd98:	000083cc 00008398 000083cc 00008330     ............0...
    fda8:	000083cc 000083cc 000083cc 00008348     ............H...
    fdb8:	000083cc 000083aa 752f2e2e 642f6273     ........../usb/d
    fdc8:	63697665 73752f65 2e636462 00000063     evice/usbdc.c...
    fdd8:	682f2e2e 752f6c61 736c6974 6372732f     ../hal/utils/src
    fde8:	6974752f 6c5f736c 2e747369 00000063     /utils_list.c...
    fdf8:	00009160 00009142 000090fc 0000901a     `...B...........
    fe08:	000090fc 00009134 000090fc 0000901a     ....4...........
    fe18:	00009142 00009142 00009134 0000901a     B...B...4.......
    fe28:	00009012 00009012 00009012 00009378     ............x...
    fe38:	000097c0 00009680 00009680 0000967c     ............|...
    fe48:	00009798 00009798 0000978a 0000967c     ............|...
    fe58:	00009798 0000978a 00009798 0000967c     ............|...
    fe68:	000097a0 000097a0 000097a0 000099a4     ................

0000fe78 <_global_impure_ptr>:
    fe78:	20000088 0000aef2 0000afc6 0000afc6     ... ............
    fe88:	0000aede 0000afc6 0000afc6 0000afc6     ................
    fe98:	0000afc6 0000afc6 0000afc6 0000af98     ................
    fea8:	0000aaaa 0000afc6 0000aaa0 0000aab4     ................
    feb8:	0000afc6 0000aee8 0000ac74 0000ac74     ........t...t...
    fec8:	0000ac74 0000ac74 0000ac74 0000ac74     t...t...t...t...
    fed8:	0000ac74 0000ac74 0000ac74 0000afc6     t...t...t.......
    fee8:	0000afc6 0000afc6 0000afc6 0000afc6     ................
    fef8:	0000afc6 0000afc6 0000afc6 0000afc6     ................
    ff08:	0000afc6 0000afae 0000af02 0000afc6     ................
    ff18:	0000af02 0000afc6 0000afc6 0000afc6     ................
    ff28:	0000afc6 0000ae68 0000afc6 0000afc6     ....h...........
    ff38:	0000ae72 0000afc6 0000afc6 0000afc6     r...............
    ff48:	0000afc6 0000afc6 0000aea0 0000afc6     ................
    ff58:	0000afc6 0000aece 0000afc6 0000afc6     ................
    ff68:	0000afc6 0000afc6 0000afc6 0000afc6     ................
    ff78:	0000afc6 0000afc6 0000afc6 0000afc6     ................
    ff88:	0000acb4 0000acea 0000af02 0000af02     ................
    ff98:	0000af02 0000ad92 0000acea 0000afc6     ................
    ffa8:	0000afc6 0000ad9c 0000afc6 0000adae     ................
    ffb8:	0000afc2 0000addc 0000ae06 0000afc6     ................
    ffc8:	0000ae10 0000afc6 0000afbe 0000afc6     ................
    ffd8:	0000afc6 0000ab02 00464e49 00666e69     ........INF.inf.
    ffe8:	004e414e 006e616e 33323130 37363534     NAN.nan.01234567
    fff8:	42413938 46454443 00000000 33323130     89ABCDEF....0123
   10008:	37363534 62613938 66656463 00000000     456789abcdef....
   10018:	6c756e28 0000296c 00000030              (null)..0...

00010024 <blanks.7238>:
   10024:	20202020 20202020 20202020 20202020                     

00010034 <zeroes.7239>:
   10034:	30303030 30303030 30303030 30303030     0000000000000000
   10044:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
   10054:	00000000                                ....

00010058 <__mprec_bigtens>:
   10058:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   10068:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   10078:	7f73bf3c 75154fdd                       <.s..O.u

00010080 <__mprec_tens>:
   10080:	00000000 3ff00000 00000000 40240000     .......?......$@
   10090:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   100a0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   100b0:	00000000 412e8480 00000000 416312d0     .......A......cA
   100c0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   100d0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   100e0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   100f0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   10100:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   10110:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   10120:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   10130:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   10140:	79d99db4 44ea7843                       ...yCx.D

00010148 <p05.6055>:
   10148:	00000005 00000019 0000007d 00000043     ........}...C...
   10158:	49534f50 00000058 0000002e              POSIX.......

00010164 <_ctype_>:
   10164:	20202000 20202020 28282020 20282828     .         ((((( 
   10174:	20202020 20202020 20202020 20202020                     
   10184:	10108820 10101010 10101010 10101010      ...............
   10194:	04040410 04040404 10040404 10101010     ................
   101a4:	41411010 41414141 01010101 01010101     ..AAAAAA........
   101b4:	01010101 01010101 01010101 10101010     ................
   101c4:	42421010 42424242 02020202 02020202     ..BBBBBB........
   101d4:	02020202 02020202 02020202 10101010     ................
   101e4:	00000020 00000000 00000000 00000000      ...............
	...

00010268 <_init>:
   10268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1026a:	46c0      	nop			; (mov r8, r8)
   1026c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1026e:	bc08      	pop	{r3}
   10270:	469e      	mov	lr, r3
   10272:	4770      	bx	lr

00010274 <__init_array_start>:
   10274:	0000c1fd 	.word	0x0000c1fd

00010278 <__frame_dummy_init_array_entry>:
   10278:	000000dd 000002a9 0000070d              ............

00010284 <_fini>:
   10284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10286:	46c0      	nop			; (mov r8, r8)
   10288:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1028a:	bc08      	pop	{r3}
   1028c:	469e      	mov	lr, r3
   1028e:	4770      	bx	lr

00010290 <__fini_array_start>:
   10290:	000000b5 	.word	0x000000b5
