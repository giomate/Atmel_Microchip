
libZCD_SAMD21_LIB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005a20  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000006c  20000000  00005a20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000006d8  2000006c  00005a8c  0002006c  2**2
                  ALLOC
  3 .stack        00002004  20000744  00006164  0002006c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004b823  00000000  00000000  000200ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00007128  00000000  00000000  0006b910  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0001b127  00000000  00000000  00072a38  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000015f8  00000000  00000000  0008db5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001770  00000000  00000000  0008f157  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000250e6  00000000  00000000  000908c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001eb73  00000000  00000000  000b59ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00099ed5  00000000  00000000  000d4520  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003b10  00000000  00000000  0016e3f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	48 27 00 20 19 01 00 00 15 01 00 00 15 01 00 00     H'. ............
	...
      2c:	15 01 00 00 00 00 00 00 00 00 00 00 15 01 00 00     ................
      3c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      4c:	15 01 00 00 d5 21 00 00 15 01 00 00 15 01 00 00     .....!..........
      5c:	81 40 00 00 15 01 00 00 15 01 00 00 15 01 00 00     .@..............
      6c:	15 01 00 00 15 26 00 00 15 01 00 00 15 01 00 00     .....&..........
      7c:	15 01 00 00 15 01 00 00 15 01 00 00 d1 2c 00 00     .............,..
      8c:	e5 2c 00 00 15 01 00 00 15 01 00 00 15 01 00 00     .,..............
      9c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      ac:	15 01 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000006c 	.word	0x2000006c
      d4:	00000000 	.word	0x00000000
      d8:	00005a20 	.word	0x00005a20

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000070 	.word	0x20000070
     108:	00005a20 	.word	0x00005a20
     10c:	00005a20 	.word	0x00005a20
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
{
     118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     11a:	4a23      	ldr	r2, [pc, #140]	; (1a8 <Reset_Handler+0x90>)
     11c:	4b23      	ldr	r3, [pc, #140]	; (1ac <Reset_Handler+0x94>)
     11e:	429a      	cmp	r2, r3
     120:	d009      	beq.n	136 <Reset_Handler+0x1e>
     122:	4b22      	ldr	r3, [pc, #136]	; (1ac <Reset_Handler+0x94>)
     124:	4a20      	ldr	r2, [pc, #128]	; (1a8 <Reset_Handler+0x90>)
     126:	e003      	b.n	130 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     128:	6811      	ldr	r1, [r2, #0]
     12a:	6019      	str	r1, [r3, #0]
     12c:	3304      	adds	r3, #4
     12e:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     130:	491f      	ldr	r1, [pc, #124]	; (1b0 <Reset_Handler+0x98>)
     132:	428b      	cmp	r3, r1
     134:	d3f8      	bcc.n	128 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     136:	4b1f      	ldr	r3, [pc, #124]	; (1b4 <Reset_Handler+0x9c>)
     138:	e002      	b.n	140 <Reset_Handler+0x28>
                *pDest++ = 0;
     13a:	2200      	movs	r2, #0
     13c:	601a      	str	r2, [r3, #0]
     13e:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     140:	4a1d      	ldr	r2, [pc, #116]	; (1b8 <Reset_Handler+0xa0>)
     142:	4293      	cmp	r3, r2
     144:	d3f9      	bcc.n	13a <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     146:	4a1d      	ldr	r2, [pc, #116]	; (1bc <Reset_Handler+0xa4>)
     148:	21ff      	movs	r1, #255	; 0xff
     14a:	4b1d      	ldr	r3, [pc, #116]	; (1c0 <Reset_Handler+0xa8>)
     14c:	438b      	bics	r3, r1
     14e:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     150:	39fd      	subs	r1, #253	; 0xfd
     152:	2390      	movs	r3, #144	; 0x90
     154:	005b      	lsls	r3, r3, #1
     156:	4a1b      	ldr	r2, [pc, #108]	; (1c4 <Reset_Handler+0xac>)
     158:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15a:	4a1b      	ldr	r2, [pc, #108]	; (1c8 <Reset_Handler+0xb0>)
     15c:	78d3      	ldrb	r3, [r2, #3]
     15e:	2503      	movs	r5, #3
     160:	43ab      	bics	r3, r5
     162:	2402      	movs	r4, #2
     164:	4323      	orrs	r3, r4
     166:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     168:	78d3      	ldrb	r3, [r2, #3]
     16a:	270c      	movs	r7, #12
     16c:	43bb      	bics	r3, r7
     16e:	2608      	movs	r6, #8
     170:	4333      	orrs	r3, r6
     172:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     174:	4b15      	ldr	r3, [pc, #84]	; (1cc <Reset_Handler+0xb4>)
     176:	7b98      	ldrb	r0, [r3, #14]
     178:	2230      	movs	r2, #48	; 0x30
     17a:	4390      	bics	r0, r2
     17c:	2220      	movs	r2, #32
     17e:	4310      	orrs	r0, r2
     180:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     182:	7b99      	ldrb	r1, [r3, #14]
     184:	43b9      	bics	r1, r7
     186:	4331      	orrs	r1, r6
     188:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     18a:	7b9a      	ldrb	r2, [r3, #14]
     18c:	43aa      	bics	r2, r5
     18e:	4322      	orrs	r2, r4
     190:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     192:	4a0f      	ldr	r2, [pc, #60]	; (1d0 <Reset_Handler+0xb8>)
     194:	6851      	ldr	r1, [r2, #4]
     196:	2380      	movs	r3, #128	; 0x80
     198:	430b      	orrs	r3, r1
     19a:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     19c:	4b0d      	ldr	r3, [pc, #52]	; (1d4 <Reset_Handler+0xbc>)
     19e:	4798      	blx	r3
        main();
     1a0:	4b0d      	ldr	r3, [pc, #52]	; (1d8 <Reset_Handler+0xc0>)
     1a2:	4798      	blx	r3
     1a4:	e7fe      	b.n	1a4 <Reset_Handler+0x8c>
     1a6:	46c0      	nop			; (mov r8, r8)
     1a8:	00005a20 	.word	0x00005a20
     1ac:	20000000 	.word	0x20000000
     1b0:	2000006c 	.word	0x2000006c
     1b4:	2000006c 	.word	0x2000006c
     1b8:	20000744 	.word	0x20000744
     1bc:	e000ed00 	.word	0xe000ed00
     1c0:	00000000 	.word	0x00000000
     1c4:	41007000 	.word	0x41007000
     1c8:	41005000 	.word	0x41005000
     1cc:	41004800 	.word	0x41004800
     1d0:	41004000 	.word	0x41004000
     1d4:	00005695 	.word	0x00005695
     1d8:	000001dd 	.word	0x000001dd

000001dc <main>:
static ZCD_Handler zcd;


static  uint16_t  dac_value=0;
int main(void)
{
     1dc:	b590      	push	{r4, r7, lr}
     1de:	b083      	sub	sp, #12
     1e0:	af00      	add	r7, sp, #0
	uint32_t local_tone;
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
     1e2:	4b1b      	ldr	r3, [pc, #108]	; (250 <main+0x74>)
     1e4:	4798      	blx	r3
		usb.Init();
     1e6:	4b1b      	ldr	r3, [pc, #108]	; (254 <main+0x78>)
     1e8:	0018      	movs	r0, r3
     1ea:	4b1b      	ldr	r3, [pc, #108]	; (258 <main+0x7c>)
     1ec:	4798      	blx	r3
		delay_ms(100);
     1ee:	2064      	movs	r0, #100	; 0x64
     1f0:	4b1a      	ldr	r3, [pc, #104]	; (25c <main+0x80>)
     1f2:	4798      	blx	r3
		usb.println("initiating ZCD Sensor");
     1f4:	4a1a      	ldr	r2, [pc, #104]	; (260 <main+0x84>)
     1f6:	4b17      	ldr	r3, [pc, #92]	; (254 <main+0x78>)
     1f8:	0011      	movs	r1, r2
     1fa:	0018      	movs	r0, r3
     1fc:	4b19      	ldr	r3, [pc, #100]	; (264 <main+0x88>)
     1fe:	4798      	blx	r3
	dac_sync_enable_channel(&DAC_0, 0);
     200:	4b19      	ldr	r3, [pc, #100]	; (268 <main+0x8c>)
     202:	2100      	movs	r1, #0
     204:	0018      	movs	r0, r3
     206:	4b19      	ldr	r3, [pc, #100]	; (26c <main+0x90>)
     208:	4798      	blx	r3
	zcd.Init();
     20a:	4b19      	ldr	r3, [pc, #100]	; (270 <main+0x94>)
     20c:	0018      	movs	r0, r3
     20e:	4b19      	ldr	r3, [pc, #100]	; (274 <main+0x98>)
     210:	4798      	blx	r3
	bool dir=true;
     212:	1dfb      	adds	r3, r7, #7
     214:	2201      	movs	r2, #1
     216:	701a      	strb	r2, [r3, #0]
	//
	// 	timer_start(&TIMER_0);
	/* Replace with your application code */
	while (1) {

			dac_value=dir?0:0x3ff;
     218:	1dfb      	adds	r3, r7, #7
     21a:	781b      	ldrb	r3, [r3, #0]
     21c:	2b00      	cmp	r3, #0
     21e:	d001      	beq.n	224 <main+0x48>
     220:	2200      	movs	r2, #0
     222:	e000      	b.n	226 <main+0x4a>
     224:	4a14      	ldr	r2, [pc, #80]	; (278 <main+0x9c>)
     226:	4b15      	ldr	r3, [pc, #84]	; (27c <main+0xa0>)
     228:	801a      	strh	r2, [r3, #0]
			dac_sync_write(&DAC_0, 0, &dac_value, 1);
     22a:	4a14      	ldr	r2, [pc, #80]	; (27c <main+0xa0>)
     22c:	480e      	ldr	r0, [pc, #56]	; (268 <main+0x8c>)
     22e:	2301      	movs	r3, #1
     230:	2100      	movs	r1, #0
     232:	4c13      	ldr	r4, [pc, #76]	; (280 <main+0xa4>)
     234:	47a0      	blx	r4
		
			dir=!dir;
     236:	1dfb      	adds	r3, r7, #7
     238:	1dfa      	adds	r2, r7, #7
     23a:	7812      	ldrb	r2, [r2, #0]
     23c:	2101      	movs	r1, #1
     23e:	404a      	eors	r2, r1
     240:	701a      	strb	r2, [r3, #0]
			local_tone=zcd.Get_Tone();
     242:	4b0b      	ldr	r3, [pc, #44]	; (270 <main+0x94>)
     244:	0018      	movs	r0, r3
     246:	4b0f      	ldr	r3, [pc, #60]	; (284 <main+0xa8>)
     248:	4798      	blx	r3
     24a:	0003      	movs	r3, r0
     24c:	603b      	str	r3, [r7, #0]
			dac_value=dir?0:0x3ff;
     24e:	e7e3      	b.n	218 <main+0x3c>
     250:	000007e9 	.word	0x000007e9
     254:	20000590 	.word	0x20000590
     258:	000050ad 	.word	0x000050ad
     25c:	00001029 	.word	0x00001029
     260:	0000570c 	.word	0x0000570c
     264:	00005161 	.word	0x00005161
     268:	2000069c 	.word	0x2000069c
     26c:	00000f41 	.word	0x00000f41
     270:	20000088 	.word	0x20000088
     274:	000005c9 	.word	0x000005c9
     278:	000003ff 	.word	0x000003ff
     27c:	2000009c 	.word	0x2000009c
     280:	00000f79 	.word	0x00000f79
     284:	000005e9 	.word	0x000005e9

00000288 <_Z41__static_initialization_and_destruction_0ii>:
	
		
		
		
	}
     288:	b580      	push	{r7, lr}
     28a:	b082      	sub	sp, #8
     28c:	af00      	add	r7, sp, #0
     28e:	6078      	str	r0, [r7, #4]
     290:	6039      	str	r1, [r7, #0]
     292:	687b      	ldr	r3, [r7, #4]
     294:	2b01      	cmp	r3, #1
     296:	d10d      	bne.n	2b4 <_Z41__static_initialization_and_destruction_0ii+0x2c>
     298:	683b      	ldr	r3, [r7, #0]
     29a:	4a08      	ldr	r2, [pc, #32]	; (2bc <_Z41__static_initialization_and_destruction_0ii+0x34>)
     29c:	4293      	cmp	r3, r2
     29e:	d109      	bne.n	2b4 <_Z41__static_initialization_and_destruction_0ii+0x2c>
static ZCD_Handler zcd;
     2a0:	4b07      	ldr	r3, [pc, #28]	; (2c0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     2a2:	0018      	movs	r0, r3
     2a4:	4b07      	ldr	r3, [pc, #28]	; (2c4 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     2a6:	4798      	blx	r3
     2a8:	4a07      	ldr	r2, [pc, #28]	; (2c8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
     2aa:	4908      	ldr	r1, [pc, #32]	; (2cc <_Z41__static_initialization_and_destruction_0ii+0x44>)
     2ac:	4b04      	ldr	r3, [pc, #16]	; (2c0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     2ae:	0018      	movs	r0, r3
     2b0:	4b07      	ldr	r3, [pc, #28]	; (2d0 <_Z41__static_initialization_and_destruction_0ii+0x48>)
     2b2:	4798      	blx	r3
     2b4:	46c0      	nop			; (mov r8, r8)
     2b6:	46bd      	mov	sp, r7
     2b8:	b002      	add	sp, #8
     2ba:	bd80      	pop	{r7, pc}
     2bc:	0000ffff 	.word	0x0000ffff
     2c0:	20000088 	.word	0x20000088
     2c4:	00000591 	.word	0x00000591
     2c8:	20000000 	.word	0x20000000
     2cc:	000005b5 	.word	0x000005b5
     2d0:	000054fd 	.word	0x000054fd

000002d4 <_GLOBAL__sub_I_main>:
     2d4:	b580      	push	{r7, lr}
     2d6:	af00      	add	r7, sp, #0
     2d8:	4b03      	ldr	r3, [pc, #12]	; (2e8 <_GLOBAL__sub_I_main+0x14>)
     2da:	0019      	movs	r1, r3
     2dc:	2001      	movs	r0, #1
     2de:	4b03      	ldr	r3, [pc, #12]	; (2ec <_GLOBAL__sub_I_main+0x18>)
     2e0:	4798      	blx	r3
     2e2:	46bd      	mov	sp, r7
     2e4:	bd80      	pop	{r7, pc}
     2e6:	46c0      	nop			; (mov r8, r8)
     2e8:	0000ffff 	.word	0x0000ffff
     2ec:	00000289 	.word	0x00000289

000002f0 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     2f0:	b580      	push	{r7, lr}
     2f2:	b084      	sub	sp, #16
     2f4:	af00      	add	r7, sp, #0
     2f6:	60f8      	str	r0, [r7, #12]
     2f8:	607a      	str	r2, [r7, #4]
     2fa:	230b      	movs	r3, #11
     2fc:	18fb      	adds	r3, r7, r3
     2fe:	1c0a      	adds	r2, r1, #0
     300:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     302:	230b      	movs	r3, #11
     304:	18fb      	adds	r3, r7, r3
     306:	781b      	ldrb	r3, [r3, #0]
     308:	68fa      	ldr	r2, [r7, #12]
     30a:	01db      	lsls	r3, r3, #7
     30c:	18d3      	adds	r3, r2, r3
     30e:	3318      	adds	r3, #24
     310:	687a      	ldr	r2, [r7, #4]
     312:	601a      	str	r2, [r3, #0]
}
     314:	46c0      	nop			; (mov r8, r8)
     316:	46bd      	mov	sp, r7
     318:	b004      	add	sp, #16
     31a:	bd80      	pop	{r7, pc}

0000031c <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     31c:	b580      	push	{r7, lr}
     31e:	b084      	sub	sp, #16
     320:	af00      	add	r7, sp, #0
     322:	60f8      	str	r0, [r7, #12]
     324:	607a      	str	r2, [r7, #4]
     326:	230b      	movs	r3, #11
     328:	18fb      	adds	r3, r7, r3
     32a:	1c0a      	adds	r2, r1, #0
     32c:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     32e:	230b      	movs	r3, #11
     330:	18fb      	adds	r3, r7, r3
     332:	781b      	ldrb	r3, [r3, #0]
     334:	68fa      	ldr	r2, [r7, #12]
     336:	01db      	lsls	r3, r3, #7
     338:	18d3      	adds	r3, r2, r3
     33a:	3314      	adds	r3, #20
     33c:	687a      	ldr	r2, [r7, #4]
     33e:	601a      	str	r2, [r3, #0]
}
     340:	46c0      	nop			; (mov r8, r8)
     342:	46bd      	mov	sp, r7
     344:	b004      	add	sp, #16
     346:	bd80      	pop	{r7, pc}

00000348 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
     348:	b580      	push	{r7, lr}
     34a:	b082      	sub	sp, #8
     34c:	af00      	add	r7, sp, #0
     34e:	6039      	str	r1, [r7, #0]
     350:	0011      	movs	r1, r2
     352:	1dfb      	adds	r3, r7, #7
     354:	1c02      	adds	r2, r0, #0
     356:	701a      	strb	r2, [r3, #0]
     358:	1dbb      	adds	r3, r7, #6
     35a:	1c0a      	adds	r2, r1, #0
     35c:	701a      	strb	r2, [r3, #0]
	if (level) {
     35e:	1dbb      	adds	r3, r7, #6
     360:	781b      	ldrb	r3, [r3, #0]
     362:	2b00      	cmp	r3, #0
     364:	d008      	beq.n	378 <_gpio_set_level+0x30>
		hri_port_set_OUT_reg(PORT_IOBUS, port, mask);
     366:	683a      	ldr	r2, [r7, #0]
     368:	1dfb      	adds	r3, r7, #7
     36a:	7819      	ldrb	r1, [r3, #0]
     36c:	23c0      	movs	r3, #192	; 0xc0
     36e:	05db      	lsls	r3, r3, #23
     370:	0018      	movs	r0, r3
     372:	4b07      	ldr	r3, [pc, #28]	; (390 <_gpio_set_level+0x48>)
     374:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
	}
}
     376:	e007      	b.n	388 <_gpio_set_level+0x40>
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
     378:	683a      	ldr	r2, [r7, #0]
     37a:	1dfb      	adds	r3, r7, #7
     37c:	7819      	ldrb	r1, [r3, #0]
     37e:	23c0      	movs	r3, #192	; 0xc0
     380:	05db      	lsls	r3, r3, #23
     382:	0018      	movs	r0, r3
     384:	4b03      	ldr	r3, [pc, #12]	; (394 <_gpio_set_level+0x4c>)
     386:	4798      	blx	r3
}
     388:	46c0      	nop			; (mov r8, r8)
     38a:	46bd      	mov	sp, r7
     38c:	b002      	add	sp, #8
     38e:	bd80      	pop	{r7, pc}
     390:	000002f1 	.word	0x000002f1
     394:	0000031d 	.word	0x0000031d

00000398 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
     398:	b580      	push	{r7, lr}
     39a:	b082      	sub	sp, #8
     39c:	af00      	add	r7, sp, #0
     39e:	0002      	movs	r2, r0
     3a0:	1dfb      	adds	r3, r7, #7
     3a2:	701a      	strb	r2, [r3, #0]
     3a4:	1dbb      	adds	r3, r7, #6
     3a6:	1c0a      	adds	r2, r1, #0
     3a8:	701a      	strb	r2, [r3, #0]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     3aa:	1dfb      	adds	r3, r7, #7
     3ac:	781b      	ldrb	r3, [r3, #0]
     3ae:	115b      	asrs	r3, r3, #5
     3b0:	b2d8      	uxtb	r0, r3
     3b2:	1dfb      	adds	r3, r7, #7
     3b4:	781b      	ldrb	r3, [r3, #0]
     3b6:	001a      	movs	r2, r3
     3b8:	231f      	movs	r3, #31
     3ba:	4013      	ands	r3, r2
     3bc:	2201      	movs	r2, #1
     3be:	409a      	lsls	r2, r3
     3c0:	0011      	movs	r1, r2
     3c2:	1dbb      	adds	r3, r7, #6
     3c4:	781b      	ldrb	r3, [r3, #0]
     3c6:	001a      	movs	r2, r3
     3c8:	4b02      	ldr	r3, [pc, #8]	; (3d4 <gpio_set_pin_level+0x3c>)
     3ca:	4798      	blx	r3
}
     3cc:	46c0      	nop			; (mov r8, r8)
     3ce:	46bd      	mov	sp, r7
     3d0:	b002      	add	sp, #8
     3d2:	bd80      	pop	{r7, pc}
     3d4:	00000349 	.word	0x00000349

000003d8 <_ZN17SPI_Syn_ZCD_ClassC1Ev>:
SPI_Syn_ZCD_Class	*ptrSPISyncZCD;



// default constructor
SPI_Syn_ZCD_Class::SPI_Syn_ZCD_Class()
     3d8:	b580      	push	{r7, lr}
     3da:	b082      	sub	sp, #8
     3dc:	af00      	add	r7, sp, #0
     3de:	6078      	str	r0, [r7, #4]
{
		ptrSPISyncZCD=this;
     3e0:	4b03      	ldr	r3, [pc, #12]	; (3f0 <_ZN17SPI_Syn_ZCD_ClassC1Ev+0x18>)
     3e2:	687a      	ldr	r2, [r7, #4]
     3e4:	601a      	str	r2, [r3, #0]
//	SPI=SPI_1;
} //SPI_Syn_Class
     3e6:	687b      	ldr	r3, [r7, #4]
     3e8:	0018      	movs	r0, r3
     3ea:	46bd      	mov	sp, r7
     3ec:	b002      	add	sp, #8
     3ee:	bd80      	pop	{r7, pc}
     3f0:	200000a0 	.word	0x200000a0

000003f4 <_ZN17SPI_Syn_ZCD_ClassD1Ev>:



// default destructor
SPI_Syn_ZCD_Class::~SPI_Syn_ZCD_Class()
     3f4:	b580      	push	{r7, lr}
     3f6:	b082      	sub	sp, #8
     3f8:	af00      	add	r7, sp, #0
     3fa:	6078      	str	r0, [r7, #4]
{
} //~SPI_Syn_Class
     3fc:	687b      	ldr	r3, [r7, #4]
     3fe:	0018      	movs	r0, r3
     400:	46bd      	mov	sp, r7
     402:	b002      	add	sp, #8
     404:	bd80      	pop	{r7, pc}
	...

00000408 <_ZN17SPI_Syn_ZCD_Class4InitEv>:

void SPI_Syn_ZCD_Class::Init(){
     408:	b580      	push	{r7, lr}
     40a:	b082      	sub	sp, #8
     40c:	af00      	add	r7, sp, #0
     40e:	6078      	str	r0, [r7, #4]

		spi_m_sync_get_io_descriptor(&SPI_ZCD, &io);
     410:	687b      	ldr	r3, [r7, #4]
     412:	330c      	adds	r3, #12
     414:	001a      	movs	r2, r3
     416:	4b08      	ldr	r3, [pc, #32]	; (438 <_ZN17SPI_Syn_ZCD_Class4InitEv+0x30>)
     418:	0011      	movs	r1, r2
     41a:	0018      	movs	r0, r3
     41c:	4b07      	ldr	r3, [pc, #28]	; (43c <_ZN17SPI_Syn_ZCD_Class4InitEv+0x34>)
     41e:	4798      	blx	r3

	Enable();
     420:	687b      	ldr	r3, [r7, #4]
     422:	0018      	movs	r0, r3
     424:	4b06      	ldr	r3, [pc, #24]	; (440 <_ZN17SPI_Syn_ZCD_Class4InitEv+0x38>)
     426:	4798      	blx	r3
	ready=true;
     428:	687b      	ldr	r3, [r7, #4]
     42a:	2201      	movs	r2, #1
     42c:	701a      	strb	r2, [r3, #0]
	
}
     42e:	46c0      	nop			; (mov r8, r8)
     430:	46bd      	mov	sp, r7
     432:	b002      	add	sp, #8
     434:	bd80      	pop	{r7, pc}
     436:	46c0      	nop			; (mov r8, r8)
     438:	20000710 	.word	0x20000710
     43c:	00001349 	.word	0x00001349
     440:	00000445 	.word	0x00000445

00000444 <_ZN17SPI_Syn_ZCD_Class6EnableEv>:



uint8_t SPI_Syn_ZCD_Class::Enable(){
     444:	b580      	push	{r7, lr}
     446:	b082      	sub	sp, #8
     448:	af00      	add	r7, sp, #0
     44a:	6078      	str	r0, [r7, #4]
	
	spi_m_sync_enable(&SPI_ZCD);
     44c:	4b04      	ldr	r3, [pc, #16]	; (460 <_ZN17SPI_Syn_ZCD_Class6EnableEv+0x1c>)
     44e:	0018      	movs	r0, r3
     450:	4b04      	ldr	r3, [pc, #16]	; (464 <_ZN17SPI_Syn_ZCD_Class6EnableEv+0x20>)
     452:	4798      	blx	r3
	return 0;
     454:	2300      	movs	r3, #0
}
     456:	0018      	movs	r0, r3
     458:	46bd      	mov	sp, r7
     45a:	b002      	add	sp, #8
     45c:	bd80      	pop	{r7, pc}
     45e:	46c0      	nop			; (mov r8, r8)
     460:	20000710 	.word	0x20000710
     464:	00001261 	.word	0x00001261

00000468 <_ZN17SPI_Syn_ZCD_Class5WriteEPKhh>:

uint8_t  SPI_Syn_ZCD_Class::Write(const uint8_t * p, uint8_t n){
     468:	b580      	push	{r7, lr}
     46a:	b084      	sub	sp, #16
     46c:	af00      	add	r7, sp, #0
     46e:	60f8      	str	r0, [r7, #12]
     470:	60b9      	str	r1, [r7, #8]
     472:	1dfb      	adds	r3, r7, #7
     474:	701a      	strb	r2, [r3, #0]
	ready=false;
     476:	68fb      	ldr	r3, [r7, #12]
     478:	2200      	movs	r2, #0
     47a:	701a      	strb	r2, [r3, #0]
	io_write(io, p, (uint16_t)n);
     47c:	68fb      	ldr	r3, [r7, #12]
     47e:	68d8      	ldr	r0, [r3, #12]
     480:	1dfb      	adds	r3, r7, #7
     482:	781b      	ldrb	r3, [r3, #0]
     484:	b29a      	uxth	r2, r3
     486:	68bb      	ldr	r3, [r7, #8]
     488:	0019      	movs	r1, r3
     48a:	4b04      	ldr	r3, [pc, #16]	; (49c <_ZN17SPI_Syn_ZCD_Class5WriteEPKhh+0x34>)
     48c:	4798      	blx	r3

	return n;
     48e:	1dfb      	adds	r3, r7, #7
     490:	781b      	ldrb	r3, [r3, #0]
}
     492:	0018      	movs	r0, r3
     494:	46bd      	mov	sp, r7
     496:	b004      	add	sp, #16
     498:	bd80      	pop	{r7, pc}
     49a:	46c0      	nop			; (mov r8, r8)
     49c:	00001199 	.word	0x00001199

000004a0 <_ZN17SPI_Syn_ZCD_Class4ReadEPhh>:
uint8_t  SPI_Syn_ZCD_Class::Read(uint8_t * p, uint8_t n){
     4a0:	b580      	push	{r7, lr}
     4a2:	b084      	sub	sp, #16
     4a4:	af00      	add	r7, sp, #0
     4a6:	60f8      	str	r0, [r7, #12]
     4a8:	60b9      	str	r1, [r7, #8]
     4aa:	1dfb      	adds	r3, r7, #7
     4ac:	701a      	strb	r2, [r3, #0]
	ready=false;
     4ae:	68fb      	ldr	r3, [r7, #12]
     4b0:	2200      	movs	r2, #0
     4b2:	701a      	strb	r2, [r3, #0]
		io_read(io, p, (uint16_t)n);
     4b4:	68fb      	ldr	r3, [r7, #12]
     4b6:	68d8      	ldr	r0, [r3, #12]
     4b8:	1dfb      	adds	r3, r7, #7
     4ba:	781b      	ldrb	r3, [r3, #0]
     4bc:	b29a      	uxth	r2, r3
     4be:	68bb      	ldr	r3, [r7, #8]
     4c0:	0019      	movs	r1, r3
     4c2:	4b04      	ldr	r3, [pc, #16]	; (4d4 <_ZN17SPI_Syn_ZCD_Class4ReadEPhh+0x34>)
     4c4:	4798      	blx	r3

	
	return n;
     4c6:	1dfb      	adds	r3, r7, #7
     4c8:	781b      	ldrb	r3, [r3, #0]
}
     4ca:	0018      	movs	r0, r3
     4cc:	46bd      	mov	sp, r7
     4ce:	b004      	add	sp, #16
     4d0:	bd80      	pop	{r7, pc}
     4d2:	46c0      	nop			; (mov r8, r8)
     4d4:	000011d1 	.word	0x000011d1

000004d8 <_ZN17SPI_Syn_ZCD_Class5SetCSEb>:
void SPI_Syn_ZCD_Class::Disable(void){
	//SPI_LMX_disable();
	spi_m_sync_disable(&SPI_ZCD);
	
}
void SPI_Syn_ZCD_Class::SetCS(bool st){
     4d8:	b580      	push	{r7, lr}
     4da:	b082      	sub	sp, #8
     4dc:	af00      	add	r7, sp, #0
     4de:	6078      	str	r0, [r7, #4]
     4e0:	000a      	movs	r2, r1
     4e2:	1cfb      	adds	r3, r7, #3
     4e4:	701a      	strb	r2, [r3, #0]
	gpio_set_pin_level(CS_ZCD,st);
     4e6:	1cfb      	adds	r3, r7, #3
     4e8:	781b      	ldrb	r3, [r3, #0]
     4ea:	0019      	movs	r1, r3
     4ec:	2003      	movs	r0, #3
     4ee:	4b03      	ldr	r3, [pc, #12]	; (4fc <_ZN17SPI_Syn_ZCD_Class5SetCSEb+0x24>)
     4f0:	4798      	blx	r3
}
     4f2:	46c0      	nop			; (mov r8, r8)
     4f4:	46bd      	mov	sp, r7
     4f6:	b002      	add	sp, #8
     4f8:	bd80      	pop	{r7, pc}
     4fa:	46c0      	nop			; (mov r8, r8)
     4fc:	00000399 	.word	0x00000399

00000500 <hri_port_toggle_OUT_reg>:

static inline void hri_port_toggle_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     500:	b580      	push	{r7, lr}
     502:	b084      	sub	sp, #16
     504:	af00      	add	r7, sp, #0
     506:	60f8      	str	r0, [r7, #12]
     508:	607a      	str	r2, [r7, #4]
     50a:	230b      	movs	r3, #11
     50c:	18fb      	adds	r3, r7, r3
     50e:	1c0a      	adds	r2, r1, #0
     510:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
     512:	230b      	movs	r3, #11
     514:	18fb      	adds	r3, r7, r3
     516:	781b      	ldrb	r3, [r3, #0]
     518:	68fa      	ldr	r2, [r7, #12]
     51a:	01db      	lsls	r3, r3, #7
     51c:	18d3      	adds	r3, r2, r3
     51e:	331c      	adds	r3, #28
     520:	687a      	ldr	r2, [r7, #4]
     522:	601a      	str	r2, [r3, #0]
}
     524:	46c0      	nop			; (mov r8, r8)
     526:	46bd      	mov	sp, r7
     528:	b004      	add	sp, #16
     52a:	bd80      	pop	{r7, pc}

0000052c <_gpio_toggle_level>:

/**
 * \brief Change output level to the opposite with mask
 */
static inline void _gpio_toggle_level(const enum gpio_port port, const uint32_t mask)
{
     52c:	b580      	push	{r7, lr}
     52e:	b082      	sub	sp, #8
     530:	af00      	add	r7, sp, #0
     532:	0002      	movs	r2, r0
     534:	6039      	str	r1, [r7, #0]
     536:	1dfb      	adds	r3, r7, #7
     538:	701a      	strb	r2, [r3, #0]
	hri_port_toggle_OUT_reg(PORT_IOBUS, port, mask);
     53a:	683a      	ldr	r2, [r7, #0]
     53c:	1dfb      	adds	r3, r7, #7
     53e:	7819      	ldrb	r1, [r3, #0]
     540:	23c0      	movs	r3, #192	; 0xc0
     542:	05db      	lsls	r3, r3, #23
     544:	0018      	movs	r0, r3
     546:	4b03      	ldr	r3, [pc, #12]	; (554 <_gpio_toggle_level+0x28>)
     548:	4798      	blx	r3
}
     54a:	46c0      	nop			; (mov r8, r8)
     54c:	46bd      	mov	sp, r7
     54e:	b002      	add	sp, #8
     550:	bd80      	pop	{r7, pc}
     552:	46c0      	nop			; (mov r8, r8)
     554:	00000501 	.word	0x00000501

00000558 <gpio_toggle_pin_level>:
 * Toggle the pin levels on pins defined by bit mask
 *
 * \param[in] pin       The pin number for device
 */
static inline void gpio_toggle_pin_level(const uint8_t pin)
{
     558:	b580      	push	{r7, lr}
     55a:	b082      	sub	sp, #8
     55c:	af00      	add	r7, sp, #0
     55e:	0002      	movs	r2, r0
     560:	1dfb      	adds	r3, r7, #7
     562:	701a      	strb	r2, [r3, #0]
	_gpio_toggle_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin));
     564:	1dfb      	adds	r3, r7, #7
     566:	781b      	ldrb	r3, [r3, #0]
     568:	115b      	asrs	r3, r3, #5
     56a:	b2d8      	uxtb	r0, r3
     56c:	1dfb      	adds	r3, r7, #7
     56e:	781b      	ldrb	r3, [r3, #0]
     570:	001a      	movs	r2, r3
     572:	231f      	movs	r3, #31
     574:	4013      	ands	r3, r2
     576:	2201      	movs	r2, #1
     578:	409a      	lsls	r2, r3
     57a:	0013      	movs	r3, r2
     57c:	0019      	movs	r1, r3
     57e:	4b03      	ldr	r3, [pc, #12]	; (58c <gpio_toggle_pin_level+0x34>)
     580:	4798      	blx	r3
}
     582:	46c0      	nop			; (mov r8, r8)
     584:	46bd      	mov	sp, r7
     586:	b002      	add	sp, #8
     588:	bd80      	pop	{r7, pc}
     58a:	46c0      	nop			; (mov r8, r8)
     58c:	0000052d 	.word	0x0000052d

00000590 <_ZN11ZCD_HandlerC1Ev>:
#include "CDC_Class.h"

static SPI_Syn_ZCD_Class local_spi;

// default constructor
ZCD_Handler::ZCD_Handler()
     590:	b580      	push	{r7, lr}
     592:	b082      	sub	sp, #8
     594:	af00      	add	r7, sp, #0
     596:	6078      	str	r0, [r7, #4]
{
	spi=&local_spi;
     598:	687b      	ldr	r3, [r7, #4]
     59a:	4a05      	ldr	r2, [pc, #20]	; (5b0 <_ZN11ZCD_HandlerC1Ev+0x20>)
     59c:	605a      	str	r2, [r3, #4]
	tone=0;
     59e:	687b      	ldr	r3, [r7, #4]
     5a0:	2200      	movs	r2, #0
     5a2:	601a      	str	r2, [r3, #0]
} //ZCD_Handler
     5a4:	687b      	ldr	r3, [r7, #4]
     5a6:	0018      	movs	r0, r3
     5a8:	46bd      	mov	sp, r7
     5aa:	b002      	add	sp, #8
     5ac:	bd80      	pop	{r7, pc}
     5ae:	46c0      	nop			; (mov r8, r8)
     5b0:	200000a4 	.word	0x200000a4

000005b4 <_ZN11ZCD_HandlerD1Ev>:

// default destructor
ZCD_Handler::~ZCD_Handler()
     5b4:	b580      	push	{r7, lr}
     5b6:	b082      	sub	sp, #8
     5b8:	af00      	add	r7, sp, #0
     5ba:	6078      	str	r0, [r7, #4]
{
} //~ZCD_Handler
     5bc:	687b      	ldr	r3, [r7, #4]
     5be:	0018      	movs	r0, r3
     5c0:	46bd      	mov	sp, r7
     5c2:	b002      	add	sp, #8
     5c4:	bd80      	pop	{r7, pc}
	...

000005c8 <_ZN11ZCD_Handler4InitEv>:

bool ZCD_Handler::Init(){
     5c8:	b580      	push	{r7, lr}
     5ca:	b082      	sub	sp, #8
     5cc:	af00      	add	r7, sp, #0
     5ce:	6078      	str	r0, [r7, #4]
	spi->Init();
     5d0:	687b      	ldr	r3, [r7, #4]
     5d2:	685b      	ldr	r3, [r3, #4]
     5d4:	0018      	movs	r0, r3
     5d6:	4b03      	ldr	r3, [pc, #12]	; (5e4 <_ZN11ZCD_Handler4InitEv+0x1c>)
     5d8:	4798      	blx	r3
	return true;
     5da:	2301      	movs	r3, #1
}
     5dc:	0018      	movs	r0, r3
     5de:	46bd      	mov	sp, r7
     5e0:	b002      	add	sp, #8
     5e2:	bd80      	pop	{r7, pc}
     5e4:	00000409 	.word	0x00000409

000005e8 <_ZN11ZCD_Handler8Get_ToneEv>:

uint32_t ZCD_Handler::Get_Tone(){
     5e8:	b580      	push	{r7, lr}
     5ea:	b084      	sub	sp, #16
     5ec:	af00      	add	r7, sp, #0
     5ee:	6078      	str	r0, [r7, #4]
	command=0x01;
     5f0:	687b      	ldr	r3, [r7, #4]
     5f2:	2201      	movs	r2, #1
     5f4:	721a      	strb	r2, [r3, #8]
	spi->SetCS(false);
     5f6:	687b      	ldr	r3, [r7, #4]
     5f8:	685b      	ldr	r3, [r3, #4]
     5fa:	2100      	movs	r1, #0
     5fc:	0018      	movs	r0, r3
     5fe:	4b38      	ldr	r3, [pc, #224]	; (6e0 <_ZN11ZCD_Handler8Get_ToneEv+0xf8>)
     600:	4798      	blx	r3
	spi->Write(&command,1);
     602:	687b      	ldr	r3, [r7, #4]
     604:	6858      	ldr	r0, [r3, #4]
     606:	687b      	ldr	r3, [r7, #4]
     608:	3308      	adds	r3, #8
     60a:	2201      	movs	r2, #1
     60c:	0019      	movs	r1, r3
     60e:	4b35      	ldr	r3, [pc, #212]	; (6e4 <_ZN11ZCD_Handler8Get_ToneEv+0xfc>)
     610:	4798      	blx	r3
	spi->SetCS(true);
     612:	687b      	ldr	r3, [r7, #4]
     614:	685b      	ldr	r3, [r3, #4]
     616:	2101      	movs	r1, #1
     618:	0018      	movs	r0, r3
     61a:	4b31      	ldr	r3, [pc, #196]	; (6e0 <_ZN11ZCD_Handler8Get_ToneEv+0xf8>)
     61c:	4798      	blx	r3
	delay_ms(100);
     61e:	2064      	movs	r0, #100	; 0x64
     620:	4b31      	ldr	r3, [pc, #196]	; (6e8 <_ZN11ZCD_Handler8Get_ToneEv+0x100>)
     622:	4798      	blx	r3
	spi->SetCS(false);
     624:	687b      	ldr	r3, [r7, #4]
     626:	685b      	ldr	r3, [r3, #4]
     628:	2100      	movs	r1, #0
     62a:	0018      	movs	r0, r3
     62c:	4b2c      	ldr	r3, [pc, #176]	; (6e0 <_ZN11ZCD_Handler8Get_ToneEv+0xf8>)
     62e:	4798      	blx	r3
	spi->Read(read_buffer,4);
     630:	687b      	ldr	r3, [r7, #4]
     632:	6858      	ldr	r0, [r3, #4]
     634:	687b      	ldr	r3, [r7, #4]
     636:	3309      	adds	r3, #9
     638:	2204      	movs	r2, #4
     63a:	0019      	movs	r1, r3
     63c:	4b2b      	ldr	r3, [pc, #172]	; (6ec <_ZN11ZCD_Handler8Get_ToneEv+0x104>)
     63e:	4798      	blx	r3
	spi->SetCS(true);
     640:	687b      	ldr	r3, [r7, #4]
     642:	685b      	ldr	r3, [r3, #4]
     644:	2101      	movs	r1, #1
     646:	0018      	movs	r0, r3
     648:	4b25      	ldr	r3, [pc, #148]	; (6e0 <_ZN11ZCD_Handler8Get_ToneEv+0xf8>)
     64a:	4798      	blx	r3
	last_tone=tone;
     64c:	687b      	ldr	r3, [r7, #4]
     64e:	681a      	ldr	r2, [r3, #0]
     650:	687b      	ldr	r3, [r7, #4]
     652:	611a      	str	r2, [r3, #16]
	tone=0;
     654:	687b      	ldr	r3, [r7, #4]
     656:	2200      	movs	r2, #0
     658:	601a      	str	r2, [r3, #0]
	for ( int i = 0; i < 4; i++)
     65a:	2300      	movs	r3, #0
     65c:	60fb      	str	r3, [r7, #12]
     65e:	68fb      	ldr	r3, [r7, #12]
     660:	2b03      	cmp	r3, #3
     662:	dc14      	bgt.n	68e <_ZN11ZCD_Handler8Get_ToneEv+0xa6>
	{
		tone|=(uint32_t)(read_buffer[i]<<(8*(3-i)));
     664:	687b      	ldr	r3, [r7, #4]
     666:	681b      	ldr	r3, [r3, #0]
     668:	6879      	ldr	r1, [r7, #4]
     66a:	68fa      	ldr	r2, [r7, #12]
     66c:	188a      	adds	r2, r1, r2
     66e:	3209      	adds	r2, #9
     670:	7812      	ldrb	r2, [r2, #0]
     672:	0010      	movs	r0, r2
     674:	68fa      	ldr	r2, [r7, #12]
     676:	2103      	movs	r1, #3
     678:	1a8a      	subs	r2, r1, r2
     67a:	00d2      	lsls	r2, r2, #3
     67c:	4090      	lsls	r0, r2
     67e:	0002      	movs	r2, r0
     680:	431a      	orrs	r2, r3
     682:	687b      	ldr	r3, [r7, #4]
     684:	601a      	str	r2, [r3, #0]
	for ( int i = 0; i < 4; i++)
     686:	68fb      	ldr	r3, [r7, #12]
     688:	3301      	adds	r3, #1
     68a:	60fb      	str	r3, [r7, #12]
     68c:	e7e7      	b.n	65e <_ZN11ZCD_Handler8Get_ToneEv+0x76>
	}
	if (tone>0)
     68e:	687b      	ldr	r3, [r7, #4]
     690:	681b      	ldr	r3, [r3, #0]
     692:	2b00      	cmp	r3, #0
     694:	d01a      	beq.n	6cc <_ZN11ZCD_Handler8Get_ToneEv+0xe4>
	{
	
		if (tone<24000001)
     696:	687b      	ldr	r3, [r7, #4]
     698:	681b      	ldr	r3, [r3, #0]
     69a:	4a15      	ldr	r2, [pc, #84]	; (6f0 <_ZN11ZCD_Handler8Get_ToneEv+0x108>)
     69c:	4293      	cmp	r3, r2
     69e:	d819      	bhi.n	6d4 <_ZN11ZCD_Handler8Get_ToneEv+0xec>
		{
			gpio_toggle_pin_level(LED0);
     6a0:	203e      	movs	r0, #62	; 0x3e
     6a2:	4b14      	ldr	r3, [pc, #80]	; (6f4 <_ZN11ZCD_Handler8Get_ToneEv+0x10c>)
     6a4:	4798      	blx	r3
			usb<<"tone: "<<tone<<NEWLINE;
     6a6:	4a14      	ldr	r2, [pc, #80]	; (6f8 <_ZN11ZCD_Handler8Get_ToneEv+0x110>)
     6a8:	4b14      	ldr	r3, [pc, #80]	; (6fc <_ZN11ZCD_Handler8Get_ToneEv+0x114>)
     6aa:	0011      	movs	r1, r2
     6ac:	0018      	movs	r0, r3
     6ae:	4b14      	ldr	r3, [pc, #80]	; (700 <_ZN11ZCD_Handler8Get_ToneEv+0x118>)
     6b0:	4798      	blx	r3
     6b2:	0002      	movs	r2, r0
     6b4:	687b      	ldr	r3, [r7, #4]
     6b6:	0019      	movs	r1, r3
     6b8:	0010      	movs	r0, r2
     6ba:	4b12      	ldr	r3, [pc, #72]	; (704 <_ZN11ZCD_Handler8Get_ToneEv+0x11c>)
     6bc:	4798      	blx	r3
     6be:	0002      	movs	r2, r0
     6c0:	4b11      	ldr	r3, [pc, #68]	; (708 <_ZN11ZCD_Handler8Get_ToneEv+0x120>)
     6c2:	0019      	movs	r1, r3
     6c4:	0010      	movs	r0, r2
     6c6:	4b11      	ldr	r3, [pc, #68]	; (70c <_ZN11ZCD_Handler8Get_ToneEv+0x124>)
     6c8:	4798      	blx	r3
     6ca:	e003      	b.n	6d4 <_ZN11ZCD_Handler8Get_ToneEv+0xec>
		}
		
	} 
	else
	{
		tone=last_tone;
     6cc:	687b      	ldr	r3, [r7, #4]
     6ce:	691a      	ldr	r2, [r3, #16]
     6d0:	687b      	ldr	r3, [r7, #4]
     6d2:	601a      	str	r2, [r3, #0]
	}
	return tone;
     6d4:	687b      	ldr	r3, [r7, #4]
     6d6:	681b      	ldr	r3, [r3, #0]
     6d8:	0018      	movs	r0, r3
     6da:	46bd      	mov	sp, r7
     6dc:	b004      	add	sp, #16
     6de:	bd80      	pop	{r7, pc}
     6e0:	000004d9 	.word	0x000004d9
     6e4:	00000469 	.word	0x00000469
     6e8:	00001029 	.word	0x00001029
     6ec:	000004a1 	.word	0x000004a1
     6f0:	016e3600 	.word	0x016e3600
     6f4:	00000559 	.word	0x00000559
     6f8:	00005724 	.word	0x00005724
     6fc:	20000590 	.word	0x20000590
     700:	00000711 	.word	0x00000711
     704:	00000735 	.word	0x00000735
     708:	0000572c 	.word	0x0000572c
     70c:	0000075d 	.word	0x0000075d

00000710 <_ZlsIA7_cER5PrintS2_RKT_>:
	writeAddr(v);
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
     710:	b580      	push	{r7, lr}
     712:	b082      	sub	sp, #8
     714:	af00      	add	r7, sp, #0
     716:	6078      	str	r0, [r7, #4]
     718:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     71a:	683a      	ldr	r2, [r7, #0]
     71c:	687b      	ldr	r3, [r7, #4]
     71e:	0011      	movs	r1, r2
     720:	0018      	movs	r0, r3
     722:	4b03      	ldr	r3, [pc, #12]	; (730 <_ZlsIA7_cER5PrintS2_RKT_+0x20>)
     724:	4798      	blx	r3
     726:	687b      	ldr	r3, [r7, #4]
     728:	0018      	movs	r0, r3
     72a:	46bd      	mov	sp, r7
     72c:	b002      	add	sp, #8
     72e:	bd80      	pop	{r7, pc}
     730:	00005129 	.word	0x00005129

00000734 <_ZlsImER5PrintS1_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     734:	b580      	push	{r7, lr}
     736:	b082      	sub	sp, #8
     738:	af00      	add	r7, sp, #0
     73a:	6078      	str	r0, [r7, #4]
     73c:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     73e:	683b      	ldr	r3, [r7, #0]
     740:	6819      	ldr	r1, [r3, #0]
     742:	687b      	ldr	r3, [r7, #4]
     744:	220a      	movs	r2, #10
     746:	0018      	movs	r0, r3
     748:	4b03      	ldr	r3, [pc, #12]	; (758 <_ZlsImER5PrintS1_RKT_+0x24>)
     74a:	4798      	blx	r3
     74c:	687b      	ldr	r3, [r7, #4]
     74e:	0018      	movs	r0, r3
     750:	46bd      	mov	sp, r7
     752:	b002      	add	sp, #8
     754:	bd80      	pop	{r7, pc}
     756:	46c0      	nop			; (mov r8, r8)
     758:	00005205 	.word	0x00005205

0000075c <_ZlsIA3_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     75c:	b580      	push	{r7, lr}
     75e:	b082      	sub	sp, #8
     760:	af00      	add	r7, sp, #0
     762:	6078      	str	r0, [r7, #4]
     764:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     766:	683a      	ldr	r2, [r7, #0]
     768:	687b      	ldr	r3, [r7, #4]
     76a:	0011      	movs	r1, r2
     76c:	0018      	movs	r0, r3
     76e:	4b03      	ldr	r3, [pc, #12]	; (77c <_ZlsIA3_cER5PrintS2_RKT_+0x20>)
     770:	4798      	blx	r3
     772:	687b      	ldr	r3, [r7, #4]
     774:	0018      	movs	r0, r3
     776:	46bd      	mov	sp, r7
     778:	b002      	add	sp, #8
     77a:	bd80      	pop	{r7, pc}
     77c:	00005129 	.word	0x00005129

00000780 <_Z41__static_initialization_and_destruction_0ii>:
     780:	b580      	push	{r7, lr}
     782:	b082      	sub	sp, #8
     784:	af00      	add	r7, sp, #0
     786:	6078      	str	r0, [r7, #4]
     788:	6039      	str	r1, [r7, #0]
     78a:	687b      	ldr	r3, [r7, #4]
     78c:	2b01      	cmp	r3, #1
     78e:	d10d      	bne.n	7ac <_Z41__static_initialization_and_destruction_0ii+0x2c>
     790:	683b      	ldr	r3, [r7, #0]
     792:	4a08      	ldr	r2, [pc, #32]	; (7b4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     794:	4293      	cmp	r3, r2
     796:	d109      	bne.n	7ac <_Z41__static_initialization_and_destruction_0ii+0x2c>
static SPI_Syn_ZCD_Class local_spi;
     798:	4b07      	ldr	r3, [pc, #28]	; (7b8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     79a:	0018      	movs	r0, r3
     79c:	4b07      	ldr	r3, [pc, #28]	; (7bc <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     79e:	4798      	blx	r3
     7a0:	4a07      	ldr	r2, [pc, #28]	; (7c0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
     7a2:	4908      	ldr	r1, [pc, #32]	; (7c4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
     7a4:	4b04      	ldr	r3, [pc, #16]	; (7b8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     7a6:	0018      	movs	r0, r3
     7a8:	4b07      	ldr	r3, [pc, #28]	; (7c8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
     7aa:	4798      	blx	r3
     7ac:	46c0      	nop			; (mov r8, r8)
     7ae:	46bd      	mov	sp, r7
     7b0:	b002      	add	sp, #8
     7b2:	bd80      	pop	{r7, pc}
     7b4:	0000ffff 	.word	0x0000ffff
     7b8:	200000a4 	.word	0x200000a4
     7bc:	000003d9 	.word	0x000003d9
     7c0:	20000000 	.word	0x20000000
     7c4:	000003f5 	.word	0x000003f5
     7c8:	000054fd 	.word	0x000054fd

000007cc <_GLOBAL__sub_I__ZN11ZCD_HandlerC2Ev>:
     7cc:	b580      	push	{r7, lr}
     7ce:	af00      	add	r7, sp, #0
     7d0:	4b03      	ldr	r3, [pc, #12]	; (7e0 <_GLOBAL__sub_I__ZN11ZCD_HandlerC2Ev+0x14>)
     7d2:	0019      	movs	r1, r3
     7d4:	2001      	movs	r0, #1
     7d6:	4b03      	ldr	r3, [pc, #12]	; (7e4 <_GLOBAL__sub_I__ZN11ZCD_HandlerC2Ev+0x18>)
     7d8:	4798      	blx	r3
     7da:	46bd      	mov	sp, r7
     7dc:	bd80      	pop	{r7, pc}
     7de:	46c0      	nop			; (mov r8, r8)
     7e0:	0000ffff 	.word	0x0000ffff
     7e4:	00000781 	.word	0x00000781

000007e8 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     7e8:	b510      	push	{r4, lr}
	system_init();
     7ea:	4b02      	ldr	r3, [pc, #8]	; (7f4 <atmel_start_init+0xc>)
     7ec:	4798      	blx	r3
	usb_init();
     7ee:	4b02      	ldr	r3, [pc, #8]	; (7f8 <atmel_start_init+0x10>)
     7f0:	4798      	blx	r3
}
     7f2:	bd10      	pop	{r4, pc}
     7f4:	00000ddd 	.word	0x00000ddd
     7f8:	000040c1 	.word	0x000040c1

000007fc <TIMER_ZCD_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ZCD_init(void)
{
     7fc:	b510      	push	{r4, lr}
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     7fe:	4a08      	ldr	r2, [pc, #32]	; (820 <TIMER_ZCD_init+0x24>)
     800:	6a11      	ldr	r1, [r2, #32]
     802:	2380      	movs	r3, #128	; 0x80
     804:	011b      	lsls	r3, r3, #4
     806:	430b      	orrs	r3, r1
     808:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     80a:	4a06      	ldr	r2, [pc, #24]	; (824 <TIMER_ZCD_init+0x28>)
     80c:	4b06      	ldr	r3, [pc, #24]	; (828 <TIMER_ZCD_init+0x2c>)
     80e:	805a      	strh	r2, [r3, #2]
	_pm_enable_bus_clock(PM_BUS_APBC, TC3);
	_gclk_enable_channel(TC3_GCLK_ID, CONF_GCLK_TC3_SRC);

	timer_init(&TIMER_ZCD, TC3, _tc_get_timer());
     810:	4b06      	ldr	r3, [pc, #24]	; (82c <TIMER_ZCD_init+0x30>)
     812:	4798      	blx	r3
     814:	0002      	movs	r2, r0
     816:	4906      	ldr	r1, [pc, #24]	; (830 <TIMER_ZCD_init+0x34>)
     818:	4806      	ldr	r0, [pc, #24]	; (834 <TIMER_ZCD_init+0x38>)
     81a:	4b07      	ldr	r3, [pc, #28]	; (838 <TIMER_ZCD_init+0x3c>)
     81c:	4798      	blx	r3
}
     81e:	bd10      	pop	{r4, pc}
     820:	40000400 	.word	0x40000400
     824:	0000401b 	.word	0x0000401b
     828:	40000c00 	.word	0x40000c00
     82c:	00002caf 	.word	0x00002caf
     830:	42002c00 	.word	0x42002c00
     834:	20000668 	.word	0x20000668
     838:	00001435 	.word	0x00001435

0000083c <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
     83c:	b510      	push	{r4, lr}
     83e:	4a08      	ldr	r2, [pc, #32]	; (860 <TIMER_USB_init+0x24>)
     840:	6a11      	ldr	r1, [r2, #32]
     842:	2380      	movs	r3, #128	; 0x80
     844:	015b      	lsls	r3, r3, #5
     846:	430b      	orrs	r3, r1
     848:	6213      	str	r3, [r2, #32]
     84a:	4a06      	ldr	r2, [pc, #24]	; (864 <TIMER_USB_init+0x28>)
     84c:	4b06      	ldr	r3, [pc, #24]	; (868 <TIMER_USB_init+0x2c>)
     84e:	805a      	strh	r2, [r3, #2]
	_pm_enable_bus_clock(PM_BUS_APBC, TC4);
	_gclk_enable_channel(TC4_GCLK_ID, CONF_GCLK_TC4_SRC);

	timer_init(&TIMER_USB, TC4, _tc_get_timer());
     850:	4b06      	ldr	r3, [pc, #24]	; (86c <TIMER_USB_init+0x30>)
     852:	4798      	blx	r3
     854:	0002      	movs	r2, r0
     856:	4906      	ldr	r1, [pc, #24]	; (870 <TIMER_USB_init+0x34>)
     858:	4806      	ldr	r0, [pc, #24]	; (874 <TIMER_USB_init+0x38>)
     85a:	4b07      	ldr	r3, [pc, #28]	; (878 <TIMER_USB_init+0x3c>)
     85c:	4798      	blx	r3
}
     85e:	bd10      	pop	{r4, pc}
     860:	40000400 	.word	0x40000400
     864:	0000431c 	.word	0x0000431c
     868:	40000c00 	.word	0x40000c00
     86c:	00002caf 	.word	0x00002caf
     870:	42003000 	.word	0x42003000
     874:	20000728 	.word	0x20000728
     878:	00001435 	.word	0x00001435

0000087c <EXTERNAL_IRQ_0_init>:
{
     87c:	b510      	push	{r4, lr}
     87e:	4a0f      	ldr	r2, [pc, #60]	; (8bc <EXTERNAL_IRQ_0_init+0x40>)
     880:	4b0f      	ldr	r3, [pc, #60]	; (8c0 <EXTERNAL_IRQ_0_init+0x44>)
     882:	805a      	strh	r2, [r3, #2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     884:	3a05      	subs	r2, #5
     886:	23c0      	movs	r3, #192	; 0xc0
     888:	05db      	lsls	r3, r3, #23
     88a:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     88c:	4b0d      	ldr	r3, [pc, #52]	; (8c4 <EXTERNAL_IRQ_0_init+0x48>)
     88e:	4a0e      	ldr	r2, [pc, #56]	; (8c8 <EXTERNAL_IRQ_0_init+0x4c>)
     890:	629a      	str	r2, [r3, #40]	; 0x28
     892:	4a0e      	ldr	r2, [pc, #56]	; (8cc <EXTERNAL_IRQ_0_init+0x50>)
     894:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     896:	214e      	movs	r1, #78	; 0x4e
     898:	5c5a      	ldrb	r2, [r3, r1]
     89a:	2004      	movs	r0, #4
     89c:	4382      	bics	r2, r0
     89e:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     8a0:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     8a2:	3803      	subs	r0, #3
     8a4:	4382      	bics	r2, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     8a6:	4302      	orrs	r2, r0
     8a8:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     8aa:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     8ac:	3917      	subs	r1, #23
     8ae:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     8b0:	200f      	movs	r0, #15
     8b2:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     8b4:	545a      	strb	r2, [r3, r1]
	ext_irq_init();
     8b6:	4b06      	ldr	r3, [pc, #24]	; (8d0 <EXTERNAL_IRQ_0_init+0x54>)
     8b8:	4798      	blx	r3
}
     8ba:	bd10      	pop	{r4, pc}
     8bc:	00004005 	.word	0x00004005
     8c0:	40000c00 	.word	0x40000c00
     8c4:	41004400 	.word	0x41004400
     8c8:	40024000 	.word	0x40024000
     8cc:	c0020000 	.word	0xc0020000
     8d0:	0000108d 	.word	0x0000108d

000008d4 <SPI_ADF_PORT_init>:
{
     8d4:	b5f0      	push	{r4, r5, r6, r7, lr}
     8d6:	46c6      	mov	lr, r8
     8d8:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     8da:	22c0      	movs	r2, #192	; 0xc0
     8dc:	05d2      	lsls	r2, r2, #23
     8de:	2310      	movs	r3, #16
     8e0:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     8e2:	6093      	str	r3, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     8e4:	4b25      	ldr	r3, [pc, #148]	; (97c <SPI_ADF_PORT_init+0xa8>)
     8e6:	4926      	ldr	r1, [pc, #152]	; (980 <SPI_ADF_PORT_init+0xac>)
     8e8:	6299      	str	r1, [r3, #40]	; 0x28
     8ea:	21c0      	movs	r1, #192	; 0xc0
     8ec:	0609      	lsls	r1, r1, #24
     8ee:	468c      	mov	ip, r1
     8f0:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     8f2:	2044      	movs	r0, #68	; 0x44
     8f4:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     8f6:	2701      	movs	r7, #1
     8f8:	43b9      	bics	r1, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     8fa:	2601      	movs	r6, #1
     8fc:	4331      	orrs	r1, r6
     8fe:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     900:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     902:	2132      	movs	r1, #50	; 0x32
     904:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     906:	250f      	movs	r5, #15
     908:	43a8      	bics	r0, r5
	tmp |= PORT_PMUX_PMUXE(data);
     90a:	2403      	movs	r4, #3
     90c:	46a0      	mov	r8, r4
     90e:	4644      	mov	r4, r8
     910:	4320      	orrs	r0, r4
     912:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     914:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     916:	2020      	movs	r0, #32
     918:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     91a:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     91c:	4819      	ldr	r0, [pc, #100]	; (984 <SPI_ADF_PORT_init+0xb0>)
     91e:	6298      	str	r0, [r3, #40]	; 0x28
     920:	4660      	mov	r0, ip
     922:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     924:	2045      	movs	r0, #69	; 0x45
     926:	4684      	mov	ip, r0
     928:	5c18      	ldrb	r0, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     92a:	43b8      	bics	r0, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     92c:	4330      	orrs	r0, r6
     92e:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     930:	4664      	mov	r4, ip
     932:	5518      	strb	r0, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     934:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     936:	3c36      	subs	r4, #54	; 0x36
     938:	4020      	ands	r0, r4
	tmp |= PORT_PMUX_PMUXO(data);
     93a:	2430      	movs	r4, #48	; 0x30
     93c:	46a4      	mov	ip, r4
     93e:	4664      	mov	r4, ip
     940:	4320      	orrs	r0, r4
     942:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     944:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     946:	310e      	adds	r1, #14
     948:	6051      	str	r1, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     94a:	4a0f      	ldr	r2, [pc, #60]	; (988 <SPI_ADF_PORT_init+0xb4>)
     94c:	629a      	str	r2, [r3, #40]	; 0x28
     94e:	4a0f      	ldr	r2, [pc, #60]	; (98c <SPI_ADF_PORT_init+0xb8>)
     950:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     952:	2246      	movs	r2, #70	; 0x46
     954:	5c99      	ldrb	r1, [r3, r2]
     956:	2004      	movs	r0, #4
     958:	4381      	bics	r1, r0
     95a:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     95c:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     95e:	43b9      	bics	r1, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     960:	4331      	orrs	r1, r6
     962:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     964:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     966:	2133      	movs	r1, #51	; 0x33
     968:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     96a:	43aa      	bics	r2, r5
	tmp |= PORT_PMUX_PMUXE(data);
     96c:	4640      	mov	r0, r8
     96e:	4302      	orrs	r2, r0
     970:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     972:	545a      	strb	r2, [r3, r1]
}
     974:	bc04      	pop	{r2}
     976:	4690      	mov	r8, r2
     978:	bdf0      	pop	{r4, r5, r6, r7, pc}
     97a:	46c0      	nop			; (mov r8, r8)
     97c:	41004400 	.word	0x41004400
     980:	40000010 	.word	0x40000010
     984:	40000020 	.word	0x40000020
     988:	40020040 	.word	0x40020040
     98c:	c0020000 	.word	0xc0020000

00000990 <SPI_ADF_CLOCK_init>:
     990:	4a04      	ldr	r2, [pc, #16]	; (9a4 <SPI_ADF_CLOCK_init+0x14>)
     992:	6a13      	ldr	r3, [r2, #32]
     994:	2104      	movs	r1, #4
     996:	430b      	orrs	r3, r1
     998:	6213      	str	r3, [r2, #32]
     99a:	4a03      	ldr	r2, [pc, #12]	; (9a8 <SPI_ADF_CLOCK_init+0x18>)
     99c:	4b03      	ldr	r3, [pc, #12]	; (9ac <SPI_ADF_CLOCK_init+0x1c>)
     99e:	805a      	strh	r2, [r3, #2]
}
     9a0:	4770      	bx	lr
     9a2:	46c0      	nop			; (mov r8, r8)
     9a4:	40000400 	.word	0x40000400
     9a8:	00004014 	.word	0x00004014
     9ac:	40000c00 	.word	0x40000c00

000009b0 <SPI_ADF_init>:
{
     9b0:	b510      	push	{r4, lr}
	SPI_ADF_CLOCK_init();
     9b2:	4b04      	ldr	r3, [pc, #16]	; (9c4 <SPI_ADF_init+0x14>)
     9b4:	4798      	blx	r3
	spi_m_sync_init(&SPI_ADF, SERCOM0);
     9b6:	4904      	ldr	r1, [pc, #16]	; (9c8 <SPI_ADF_init+0x18>)
     9b8:	4804      	ldr	r0, [pc, #16]	; (9cc <SPI_ADF_init+0x1c>)
     9ba:	4b05      	ldr	r3, [pc, #20]	; (9d0 <SPI_ADF_init+0x20>)
     9bc:	4798      	blx	r3
	SPI_ADF_PORT_init();
     9be:	4b05      	ldr	r3, [pc, #20]	; (9d4 <SPI_ADF_init+0x24>)
     9c0:	4798      	blx	r3
}
     9c2:	bd10      	pop	{r4, pc}
     9c4:	00000991 	.word	0x00000991
     9c8:	42000800 	.word	0x42000800
     9cc:	200006f8 	.word	0x200006f8
     9d0:	00001209 	.word	0x00001209
     9d4:	000008d5 	.word	0x000008d5

000009d8 <SPI_LMX_PORT_init>:
{
     9d8:	b5f0      	push	{r4, r5, r6, r7, lr}
     9da:	46c6      	mov	lr, r8
     9dc:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     9de:	22c0      	movs	r2, #192	; 0xc0
     9e0:	05d2      	lsls	r2, r2, #23
     9e2:	2380      	movs	r3, #128	; 0x80
     9e4:	025b      	lsls	r3, r3, #9
     9e6:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     9e8:	6093      	str	r3, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     9ea:	4b26      	ldr	r3, [pc, #152]	; (a84 <SPI_LMX_PORT_init+0xac>)
     9ec:	2180      	movs	r1, #128	; 0x80
     9ee:	05c9      	lsls	r1, r1, #23
     9f0:	468c      	mov	ip, r1
     9f2:	6299      	str	r1, [r3, #40]	; 0x28
     9f4:	4924      	ldr	r1, [pc, #144]	; (a88 <SPI_LMX_PORT_init+0xb0>)
     9f6:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9f8:	2050      	movs	r0, #80	; 0x50
     9fa:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     9fc:	2701      	movs	r7, #1
     9fe:	43b9      	bics	r1, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a00:	2601      	movs	r6, #1
     a02:	4331      	orrs	r1, r6
     a04:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a06:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a08:	2138      	movs	r1, #56	; 0x38
     a0a:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     a0c:	250f      	movs	r5, #15
     a0e:	43a8      	bics	r0, r5
	tmp |= PORT_PMUX_PMUXE(data);
     a10:	2402      	movs	r4, #2
     a12:	46a0      	mov	r8, r4
     a14:	4644      	mov	r4, r8
     a16:	4320      	orrs	r0, r4
     a18:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a1a:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a1c:	2080      	movs	r0, #128	; 0x80
     a1e:	0280      	lsls	r0, r0, #10
     a20:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a22:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a24:	4660      	mov	r0, ip
     a26:	6298      	str	r0, [r3, #40]	; 0x28
     a28:	4818      	ldr	r0, [pc, #96]	; (a8c <SPI_LMX_PORT_init+0xb4>)
     a2a:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a2c:	2051      	movs	r0, #81	; 0x51
     a2e:	4684      	mov	ip, r0
     a30:	5c18      	ldrb	r0, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     a32:	43b8      	bics	r0, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a34:	4330      	orrs	r0, r6
     a36:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a38:	4664      	mov	r4, ip
     a3a:	5518      	strb	r0, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a3c:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     a3e:	3c42      	subs	r4, #66	; 0x42
     a40:	4020      	ands	r0, r4
	tmp |= PORT_PMUX_PMUXO(data);
     a42:	2420      	movs	r4, #32
     a44:	46a4      	mov	ip, r4
     a46:	4664      	mov	r4, ip
     a48:	4320      	orrs	r0, r4
     a4a:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a4c:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     a4e:	2180      	movs	r1, #128	; 0x80
     a50:	02c9      	lsls	r1, r1, #11
     a52:	6051      	str	r1, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a54:	4a0e      	ldr	r2, [pc, #56]	; (a90 <SPI_LMX_PORT_init+0xb8>)
     a56:	629a      	str	r2, [r3, #40]	; 0x28
     a58:	4a0e      	ldr	r2, [pc, #56]	; (a94 <SPI_LMX_PORT_init+0xbc>)
     a5a:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     a5c:	2252      	movs	r2, #82	; 0x52
     a5e:	5c99      	ldrb	r1, [r3, r2]
     a60:	2004      	movs	r0, #4
     a62:	4381      	bics	r1, r0
     a64:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a66:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     a68:	43b9      	bics	r1, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a6a:	4331      	orrs	r1, r6
     a6c:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a6e:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a70:	2139      	movs	r1, #57	; 0x39
     a72:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     a74:	43aa      	bics	r2, r5
	tmp |= PORT_PMUX_PMUXE(data);
     a76:	4640      	mov	r0, r8
     a78:	4302      	orrs	r2, r0
     a7a:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a7c:	545a      	strb	r2, [r3, r1]
}
     a7e:	bc04      	pop	{r2}
     a80:	4690      	mov	r8, r2
     a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a84:	41004400 	.word	0x41004400
     a88:	c0000001 	.word	0xc0000001
     a8c:	c0000002 	.word	0xc0000002
     a90:	40020000 	.word	0x40020000
     a94:	c0020004 	.word	0xc0020004

00000a98 <SPI_LMX_CLOCK_init>:
     a98:	4a04      	ldr	r2, [pc, #16]	; (aac <SPI_LMX_CLOCK_init+0x14>)
     a9a:	6a13      	ldr	r3, [r2, #32]
     a9c:	2108      	movs	r1, #8
     a9e:	430b      	orrs	r3, r1
     aa0:	6213      	str	r3, [r2, #32]
     aa2:	4a03      	ldr	r2, [pc, #12]	; (ab0 <SPI_LMX_CLOCK_init+0x18>)
     aa4:	4b03      	ldr	r3, [pc, #12]	; (ab4 <SPI_LMX_CLOCK_init+0x1c>)
     aa6:	805a      	strh	r2, [r3, #2]
}
     aa8:	4770      	bx	lr
     aaa:	46c0      	nop			; (mov r8, r8)
     aac:	40000400 	.word	0x40000400
     ab0:	00004015 	.word	0x00004015
     ab4:	40000c00 	.word	0x40000c00

00000ab8 <SPI_LMX_init>:
{
     ab8:	b510      	push	{r4, lr}
	SPI_LMX_CLOCK_init();
     aba:	4b04      	ldr	r3, [pc, #16]	; (acc <SPI_LMX_init+0x14>)
     abc:	4798      	blx	r3
	spi_m_sync_init(&SPI_LMX, SERCOM1);
     abe:	4904      	ldr	r1, [pc, #16]	; (ad0 <SPI_LMX_init+0x18>)
     ac0:	4804      	ldr	r0, [pc, #16]	; (ad4 <SPI_LMX_init+0x1c>)
     ac2:	4b05      	ldr	r3, [pc, #20]	; (ad8 <SPI_LMX_init+0x20>)
     ac4:	4798      	blx	r3
	SPI_LMX_PORT_init();
     ac6:	4b05      	ldr	r3, [pc, #20]	; (adc <SPI_LMX_init+0x24>)
     ac8:	4798      	blx	r3
}
     aca:	bd10      	pop	{r4, pc}
     acc:	00000a99 	.word	0x00000a99
     ad0:	42000c00 	.word	0x42000c00
     ad4:	20000684 	.word	0x20000684
     ad8:	00001209 	.word	0x00001209
     adc:	000009d9 	.word	0x000009d9

00000ae0 <SPI_ZCD_PORT_init>:
{
     ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ae2:	21c0      	movs	r1, #192	; 0xc0
     ae4:	05c9      	lsls	r1, r1, #23
     ae6:	2380      	movs	r3, #128	; 0x80
     ae8:	015b      	lsls	r3, r3, #5
     aea:	614b      	str	r3, [r1, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     aec:	608b      	str	r3, [r1, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     aee:	4b22      	ldr	r3, [pc, #136]	; (b78 <SPI_ZCD_PORT_init+0x98>)
     af0:	4a22      	ldr	r2, [pc, #136]	; (b7c <SPI_ZCD_PORT_init+0x9c>)
     af2:	629a      	str	r2, [r3, #40]	; 0x28
     af4:	20c0      	movs	r0, #192	; 0xc0
     af6:	0600      	lsls	r0, r0, #24
     af8:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     afa:	264c      	movs	r6, #76	; 0x4c
     afc:	5d9a      	ldrb	r2, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
     afe:	2501      	movs	r5, #1
     b00:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b02:	2401      	movs	r4, #1
     b04:	4322      	orrs	r2, r4
     b06:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b08:	559a      	strb	r2, [r3, r6]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b0a:	3e16      	subs	r6, #22
     b0c:	5d9a      	ldrb	r2, [r3, r6]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     b0e:	270f      	movs	r7, #15
     b10:	43ba      	bics	r2, r7
	tmp |= PORT_PMUX_PMUXE(data);
     b12:	2702      	movs	r7, #2
     b14:	433a      	orrs	r2, r7
     b16:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b18:	559a      	strb	r2, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b1a:	2280      	movs	r2, #128	; 0x80
     b1c:	0092      	lsls	r2, r2, #2
     b1e:	614a      	str	r2, [r1, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b20:	608a      	str	r2, [r1, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b22:	4a17      	ldr	r2, [pc, #92]	; (b80 <SPI_ZCD_PORT_init+0xa0>)
     b24:	629a      	str	r2, [r3, #40]	; 0x28
     b26:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b28:	2049      	movs	r0, #73	; 0x49
     b2a:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     b2c:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b2e:	4322      	orrs	r2, r4
     b30:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b32:	541a      	strb	r2, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b34:	2234      	movs	r2, #52	; 0x34
     b36:	5c98      	ldrb	r0, [r3, r2]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     b38:	3e27      	subs	r6, #39	; 0x27
     b3a:	4030      	ands	r0, r6
	tmp |= PORT_PMUX_PMUXO(data);
     b3c:	2730      	movs	r7, #48	; 0x30
     b3e:	4338      	orrs	r0, r7
     b40:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b42:	5498      	strb	r0, [r3, r2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     b44:	2280      	movs	r2, #128	; 0x80
     b46:	0212      	lsls	r2, r2, #8
     b48:	604a      	str	r2, [r1, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b4a:	4a0e      	ldr	r2, [pc, #56]	; (b84 <SPI_ZCD_PORT_init+0xa4>)
     b4c:	629a      	str	r2, [r3, #40]	; 0x28
     b4e:	4a0e      	ldr	r2, [pc, #56]	; (b88 <SPI_ZCD_PORT_init+0xa8>)
     b50:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     b52:	224f      	movs	r2, #79	; 0x4f
     b54:	5c99      	ldrb	r1, [r3, r2]
     b56:	2004      	movs	r0, #4
     b58:	4381      	bics	r1, r0
     b5a:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b5c:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     b5e:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b60:	4321      	orrs	r1, r4
     b62:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b64:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b66:	2137      	movs	r1, #55	; 0x37
     b68:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     b6a:	4032      	ands	r2, r6
	tmp |= PORT_PMUX_PMUXO(data);
     b6c:	2020      	movs	r0, #32
     b6e:	4302      	orrs	r2, r0
     b70:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b72:	545a      	strb	r2, [r3, r1]
}
     b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b76:	46c0      	nop			; (mov r8, r8)
     b78:	41004400 	.word	0x41004400
     b7c:	40001000 	.word	0x40001000
     b80:	40000200 	.word	0x40000200
     b84:	40028000 	.word	0x40028000
     b88:	c0020000 	.word	0xc0020000

00000b8c <SPI_ZCD_CLOCK_init>:
     b8c:	4a04      	ldr	r2, [pc, #16]	; (ba0 <SPI_ZCD_CLOCK_init+0x14>)
     b8e:	6a13      	ldr	r3, [r2, #32]
     b90:	2110      	movs	r1, #16
     b92:	430b      	orrs	r3, r1
     b94:	6213      	str	r3, [r2, #32]
     b96:	4a03      	ldr	r2, [pc, #12]	; (ba4 <SPI_ZCD_CLOCK_init+0x18>)
     b98:	4b03      	ldr	r3, [pc, #12]	; (ba8 <SPI_ZCD_CLOCK_init+0x1c>)
     b9a:	805a      	strh	r2, [r3, #2]
}
     b9c:	4770      	bx	lr
     b9e:	46c0      	nop			; (mov r8, r8)
     ba0:	40000400 	.word	0x40000400
     ba4:	00004016 	.word	0x00004016
     ba8:	40000c00 	.word	0x40000c00

00000bac <SPI_ZCD_init>:
{
     bac:	b510      	push	{r4, lr}
	SPI_ZCD_CLOCK_init();
     bae:	4b04      	ldr	r3, [pc, #16]	; (bc0 <SPI_ZCD_init+0x14>)
     bb0:	4798      	blx	r3
	spi_m_sync_init(&SPI_ZCD, SERCOM2);
     bb2:	4904      	ldr	r1, [pc, #16]	; (bc4 <SPI_ZCD_init+0x18>)
     bb4:	4804      	ldr	r0, [pc, #16]	; (bc8 <SPI_ZCD_init+0x1c>)
     bb6:	4b05      	ldr	r3, [pc, #20]	; (bcc <SPI_ZCD_init+0x20>)
     bb8:	4798      	blx	r3
	SPI_ZCD_PORT_init();
     bba:	4b05      	ldr	r3, [pc, #20]	; (bd0 <SPI_ZCD_init+0x24>)
     bbc:	4798      	blx	r3
}
     bbe:	bd10      	pop	{r4, pc}
     bc0:	00000b8d 	.word	0x00000b8d
     bc4:	42001000 	.word	0x42001000
     bc8:	20000710 	.word	0x20000710
     bcc:	00001209 	.word	0x00001209
     bd0:	00000ae1 	.word	0x00000ae1

00000bd4 <USART_0_CLOCK_init>:
     bd4:	4a04      	ldr	r2, [pc, #16]	; (be8 <USART_0_CLOCK_init+0x14>)
     bd6:	6a13      	ldr	r3, [r2, #32]
     bd8:	2120      	movs	r1, #32
     bda:	430b      	orrs	r3, r1
     bdc:	6213      	str	r3, [r2, #32]
     bde:	4a03      	ldr	r2, [pc, #12]	; (bec <USART_0_CLOCK_init+0x18>)
     be0:	4b03      	ldr	r3, [pc, #12]	; (bf0 <USART_0_CLOCK_init+0x1c>)
     be2:	805a      	strh	r2, [r3, #2]
}
     be4:	4770      	bx	lr
     be6:	46c0      	nop			; (mov r8, r8)
     be8:	40000400 	.word	0x40000400
     bec:	00004017 	.word	0x00004017
     bf0:	40000c00 	.word	0x40000c00

00000bf4 <USART_0_PORT_init>:
{
     bf4:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     bf6:	4b0f      	ldr	r3, [pc, #60]	; (c34 <USART_0_PORT_init+0x40>)
     bf8:	2256      	movs	r2, #86	; 0x56
     bfa:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     bfc:	2501      	movs	r5, #1
     bfe:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c00:	2401      	movs	r4, #1
     c02:	4321      	orrs	r1, r4
     c04:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c06:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c08:	203b      	movs	r0, #59	; 0x3b
     c0a:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     c0c:	3a47      	subs	r2, #71	; 0x47
     c0e:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     c10:	2202      	movs	r2, #2
     c12:	4311      	orrs	r1, r2
     c14:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c16:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c18:	2157      	movs	r1, #87	; 0x57
     c1a:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     c1c:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c1e:	4322      	orrs	r2, r4
     c20:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c22:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c24:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     c26:	3948      	subs	r1, #72	; 0x48
     c28:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     c2a:	2120      	movs	r1, #32
     c2c:	430a      	orrs	r2, r1
     c2e:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c30:	541a      	strb	r2, [r3, r0]
}
     c32:	bd30      	pop	{r4, r5, pc}
     c34:	41004400 	.word	0x41004400

00000c38 <USART_0_init>:
{
     c38:	b510      	push	{r4, lr}
     c3a:	b082      	sub	sp, #8
	USART_0_CLOCK_init();
     c3c:	4b06      	ldr	r3, [pc, #24]	; (c58 <USART_0_init+0x20>)
     c3e:	4798      	blx	r3
	usart_async_init(&USART_0, SERCOM3, USART_0_buffer, USART_0_BUFFER_SIZE, (void *)NULL);
     c40:	2300      	movs	r3, #0
     c42:	9300      	str	r3, [sp, #0]
     c44:	3310      	adds	r3, #16
     c46:	4a05      	ldr	r2, [pc, #20]	; (c5c <USART_0_init+0x24>)
     c48:	4905      	ldr	r1, [pc, #20]	; (c60 <USART_0_init+0x28>)
     c4a:	4806      	ldr	r0, [pc, #24]	; (c64 <USART_0_init+0x2c>)
     c4c:	4c06      	ldr	r4, [pc, #24]	; (c68 <USART_0_init+0x30>)
     c4e:	47a0      	blx	r4
	USART_0_PORT_init();
     c50:	4b06      	ldr	r3, [pc, #24]	; (c6c <USART_0_init+0x34>)
     c52:	4798      	blx	r3
}
     c54:	b002      	add	sp, #8
     c56:	bd10      	pop	{r4, pc}
     c58:	00000bd5 	.word	0x00000bd5
     c5c:	200000b4 	.word	0x200000b4
     c60:	42001400 	.word	0x42001400
     c64:	200006a8 	.word	0x200006a8
     c68:	000017b5 	.word	0x000017b5
     c6c:	00000bf5 	.word	0x00000bf5

00000c70 <delay_driver_init>:
{
     c70:	b510      	push	{r4, lr}
	delay_init(SysTick);
     c72:	4802      	ldr	r0, [pc, #8]	; (c7c <delay_driver_init+0xc>)
     c74:	4b02      	ldr	r3, [pc, #8]	; (c80 <delay_driver_init+0x10>)
     c76:	4798      	blx	r3
}
     c78:	bd10      	pop	{r4, pc}
     c7a:	46c0      	nop			; (mov r8, r8)
     c7c:	e000e010 	.word	0xe000e010
     c80:	00001015 	.word	0x00001015

00000c84 <DAC_0_PORT_init>:

void DAC_0_PORT_init(void)
{
     c84:	b510      	push	{r4, lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     c86:	2204      	movs	r2, #4
     c88:	23c0      	movs	r3, #192	; 0xc0
     c8a:	05db      	lsls	r3, r3, #23
     c8c:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c8e:	490a      	ldr	r1, [pc, #40]	; (cb8 <DAC_0_PORT_init+0x34>)
     c90:	4b0a      	ldr	r3, [pc, #40]	; (cbc <DAC_0_PORT_init+0x38>)
     c92:	628b      	str	r3, [r1, #40]	; 0x28
     c94:	23c0      	movs	r3, #192	; 0xc0
     c96:	061b      	lsls	r3, r3, #24
     c98:	628b      	str	r3, [r1, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c9a:	2342      	movs	r3, #66	; 0x42
     c9c:	5cca      	ldrb	r2, [r1, r3]
	tmp &= ~PORT_PINCFG_PMUXEN;
     c9e:	2001      	movs	r0, #1
     ca0:	4382      	bics	r2, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     ca2:	4302      	orrs	r2, r0
     ca4:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ca6:	54ca      	strb	r2, [r1, r3]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     ca8:	2231      	movs	r2, #49	; 0x31
     caa:	5c8b      	ldrb	r3, [r1, r2]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     cac:	240f      	movs	r4, #15
     cae:	43a3      	bics	r3, r4
	tmp |= PORT_PMUX_PMUXE(data);
     cb0:	4303      	orrs	r3, r0
     cb2:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     cb4:	548b      	strb	r3, [r1, r2]

	// Disable digital pin circuitry
	gpio_set_pin_direction(PA02, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PA02, PINMUX_PA02B_DAC_VOUT);
}
     cb6:	bd10      	pop	{r4, pc}
     cb8:	41004400 	.word	0x41004400
     cbc:	40000004 	.word	0x40000004

00000cc0 <DAC_0_CLOCK_init>:
     cc0:	4a04      	ldr	r2, [pc, #16]	; (cd4 <DAC_0_CLOCK_init+0x14>)
     cc2:	6a11      	ldr	r1, [r2, #32]
     cc4:	2380      	movs	r3, #128	; 0x80
     cc6:	02db      	lsls	r3, r3, #11
     cc8:	430b      	orrs	r3, r1
     cca:	6213      	str	r3, [r2, #32]
     ccc:	4a02      	ldr	r2, [pc, #8]	; (cd8 <DAC_0_CLOCK_init+0x18>)
     cce:	4b03      	ldr	r3, [pc, #12]	; (cdc <DAC_0_CLOCK_init+0x1c>)
     cd0:	805a      	strh	r2, [r3, #2]
void DAC_0_CLOCK_init(void)
{

	_pm_enable_bus_clock(PM_BUS_APBC, DAC);
	_gclk_enable_channel(DAC_GCLK_ID, CONF_GCLK_DAC_SRC);
}
     cd2:	4770      	bx	lr
     cd4:	40000400 	.word	0x40000400
     cd8:	00004021 	.word	0x00004021
     cdc:	40000c00 	.word	0x40000c00

00000ce0 <DAC_0_init>:

void DAC_0_init(void)
{
     ce0:	b510      	push	{r4, lr}
	DAC_0_CLOCK_init();
     ce2:	4b04      	ldr	r3, [pc, #16]	; (cf4 <DAC_0_init+0x14>)
     ce4:	4798      	blx	r3
	dac_sync_init(&DAC_0, DAC);
     ce6:	4904      	ldr	r1, [pc, #16]	; (cf8 <DAC_0_init+0x18>)
     ce8:	4804      	ldr	r0, [pc, #16]	; (cfc <DAC_0_init+0x1c>)
     cea:	4b05      	ldr	r3, [pc, #20]	; (d00 <DAC_0_init+0x20>)
     cec:	4798      	blx	r3
	DAC_0_PORT_init();
     cee:	4b05      	ldr	r3, [pc, #20]	; (d04 <DAC_0_init+0x24>)
     cf0:	4798      	blx	r3
}
     cf2:	bd10      	pop	{r4, pc}
     cf4:	00000cc1 	.word	0x00000cc1
     cf8:	42004800 	.word	0x42004800
     cfc:	2000069c 	.word	0x2000069c
     d00:	00000ef1 	.word	0x00000ef1
     d04:	00000c85 	.word	0x00000c85

00000d08 <USB_DEVICE_INSTANCE_PORT_init>:

void USB_DEVICE_INSTANCE_PORT_init(void)
{
     d08:	b5f0      	push	{r4, r5, r6, r7, lr}
     d0a:	46c6      	mov	lr, r8
     d0c:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d0e:	24c0      	movs	r4, #192	; 0xc0
     d10:	05e4      	lsls	r4, r4, #23
     d12:	2280      	movs	r2, #128	; 0x80
     d14:	0452      	lsls	r2, r2, #17
     d16:	60a2      	str	r2, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d18:	4b1c      	ldr	r3, [pc, #112]	; (d8c <USB_DEVICE_INSTANCE_PORT_init+0x84>)
     d1a:	2780      	movs	r7, #128	; 0x80
     d1c:	05ff      	lsls	r7, r7, #23
     d1e:	629f      	str	r7, [r3, #40]	; 0x28
     d20:	491b      	ldr	r1, [pc, #108]	; (d90 <USB_DEVICE_INSTANCE_PORT_init+0x88>)
     d22:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d24:	6162      	str	r2, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     d26:	2058      	movs	r0, #88	; 0x58
     d28:	5c19      	ldrb	r1, [r3, r0]
     d2a:	2204      	movs	r2, #4
     d2c:	4690      	mov	r8, r2
     d2e:	4391      	bics	r1, r2
     d30:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d32:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     d34:	2601      	movs	r6, #1
     d36:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     d38:	2501      	movs	r5, #1
     d3a:	4329      	orrs	r1, r5
     d3c:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d3e:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     d40:	381c      	subs	r0, #28
     d42:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     d44:	320b      	adds	r2, #11
     d46:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     d48:	2206      	movs	r2, #6
     d4a:	4694      	mov	ip, r2
     d4c:	4662      	mov	r2, ip
     d4e:	4311      	orrs	r1, r2
     d50:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     d52:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d54:	2180      	movs	r1, #128	; 0x80
     d56:	0489      	lsls	r1, r1, #18
     d58:	60a1      	str	r1, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d5a:	629f      	str	r7, [r3, #40]	; 0x28
     d5c:	4f0d      	ldr	r7, [pc, #52]	; (d94 <USB_DEVICE_INSTANCE_PORT_init+0x8c>)
     d5e:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d60:	6161      	str	r1, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     d62:	2159      	movs	r1, #89	; 0x59
     d64:	5c5c      	ldrb	r4, [r3, r1]
     d66:	4642      	mov	r2, r8
     d68:	4394      	bics	r4, r2
     d6a:	545c      	strb	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d6c:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     d6e:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     d70:	432a      	orrs	r2, r5
     d72:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d74:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     d76:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     d78:	394a      	subs	r1, #74	; 0x4a
     d7a:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     d7c:	2160      	movs	r1, #96	; 0x60
     d7e:	430a      	orrs	r2, r1
     d80:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     d82:	541a      	strb	r2, [r3, r0]
	                      // <GPIO_PIN_FUNCTION_E"> E
	                      // <GPIO_PIN_FUNCTION_F"> F
	                      // <GPIO_PIN_FUNCTION_G"> G
	                      // <GPIO_PIN_FUNCTION_H"> H
	                      PINMUX_PA25G_USB_DP);
}
     d84:	bc04      	pop	{r2}
     d86:	4690      	mov	r8, r2
     d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d8a:	46c0      	nop			; (mov r8, r8)
     d8c:	41004400 	.word	0x41004400
     d90:	c0000100 	.word	0xc0000100
     d94:	c0000200 	.word	0xc0000200

00000d98 <USB_DEVICE_INSTANCE_CLOCK_init>:
			PM->APBBMASK.reg |= 1 << peripheral;
     d98:	4b06      	ldr	r3, [pc, #24]	; (db4 <USB_DEVICE_INSTANCE_CLOCK_init+0x1c>)
     d9a:	69da      	ldr	r2, [r3, #28]
     d9c:	2120      	movs	r1, #32
     d9e:	430a      	orrs	r2, r1
     da0:	61da      	str	r2, [r3, #28]
			PM->AHBMASK.reg |= 1 << peripheral;
     da2:	695a      	ldr	r2, [r3, #20]
     da4:	3120      	adds	r1, #32
     da6:	430a      	orrs	r2, r1
     da8:	615a      	str	r2, [r3, #20]
     daa:	4a03      	ldr	r2, [pc, #12]	; (db8 <USB_DEVICE_INSTANCE_CLOCK_init+0x20>)
     dac:	4b03      	ldr	r3, [pc, #12]	; (dbc <USB_DEVICE_INSTANCE_CLOCK_init+0x24>)
     dae:	805a      	strh	r2, [r3, #2]
{

	_pm_enable_bus_clock(PM_BUS_APBB, USB);
	_pm_enable_bus_clock(PM_BUS_AHB, USB);
	_gclk_enable_channel(USB_GCLK_ID, CONF_GCLK_USB_SRC);
}
     db0:	4770      	bx	lr
     db2:	46c0      	nop			; (mov r8, r8)
     db4:	40000400 	.word	0x40000400
     db8:	00004406 	.word	0x00004406
     dbc:	40000c00 	.word	0x40000c00

00000dc0 <USB_DEVICE_INSTANCE_init>:

void USB_DEVICE_INSTANCE_init(void)
{
     dc0:	b510      	push	{r4, lr}
	USB_DEVICE_INSTANCE_CLOCK_init();
     dc2:	4b03      	ldr	r3, [pc, #12]	; (dd0 <USB_DEVICE_INSTANCE_init+0x10>)
     dc4:	4798      	blx	r3
	usb_d_init();
     dc6:	4b03      	ldr	r3, [pc, #12]	; (dd4 <USB_DEVICE_INSTANCE_init+0x14>)
     dc8:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
     dca:	4b03      	ldr	r3, [pc, #12]	; (dd8 <USB_DEVICE_INSTANCE_init+0x18>)
     dcc:	4798      	blx	r3
}
     dce:	bd10      	pop	{r4, pc}
     dd0:	00000d99 	.word	0x00000d99
     dd4:	00001a9d 	.word	0x00001a9d
     dd8:	00000d09 	.word	0x00000d09

00000ddc <system_init>:

void system_init(void)
{
     ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
     dde:	46c6      	mov	lr, r8
     de0:	b500      	push	{lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     de2:	4b32      	ldr	r3, [pc, #200]	; (eac <system_init+0xd0>)
     de4:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     de6:	22c0      	movs	r2, #192	; 0xc0
     de8:	05d2      	lsls	r2, r2, #23
     dea:	2308      	movs	r3, #8
     dec:	6193      	str	r3, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     dee:	6093      	str	r3, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     df0:	4b2f      	ldr	r3, [pc, #188]	; (eb0 <system_init+0xd4>)
     df2:	4930      	ldr	r1, [pc, #192]	; (eb4 <system_init+0xd8>)
     df4:	6299      	str	r1, [r3, #40]	; 0x28
     df6:	25c0      	movs	r5, #192	; 0xc0
     df8:	062d      	lsls	r5, r5, #24
     dfa:	629d      	str	r5, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     dfc:	2443      	movs	r4, #67	; 0x43
     dfe:	5d19      	ldrb	r1, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     e00:	2001      	movs	r0, #1
     e02:	4381      	bics	r1, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e04:	5519      	strb	r1, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e06:	2180      	movs	r1, #128	; 0x80
     e08:	6151      	str	r1, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     e0a:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e0c:	492a      	ldr	r1, [pc, #168]	; (eb8 <system_init+0xdc>)
     e0e:	6299      	str	r1, [r3, #40]	; 0x28
     e10:	629d      	str	r5, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e12:	3404      	adds	r4, #4
     e14:	5d19      	ldrb	r1, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     e16:	4381      	bics	r1, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e18:	5519      	strb	r1, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     e1a:	2180      	movs	r1, #128	; 0x80
     e1c:	0309      	lsls	r1, r1, #12
     e1e:	6191      	str	r1, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     e20:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e22:	2180      	movs	r1, #128	; 0x80
     e24:	05c9      	lsls	r1, r1, #23
     e26:	6299      	str	r1, [r3, #40]	; 0x28
     e28:	4c24      	ldr	r4, [pc, #144]	; (ebc <system_init+0xe0>)
     e2a:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e2c:	2653      	movs	r6, #83	; 0x53
     e2e:	5d9c      	ldrb	r4, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
     e30:	4384      	bics	r4, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e32:	559c      	strb	r4, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     e34:	6191      	str	r1, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     e36:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e38:	6299      	str	r1, [r3, #40]	; 0x28
     e3a:	4c21      	ldr	r4, [pc, #132]	; (ec0 <system_init+0xe4>)
     e3c:	46a0      	mov	r8, r4
     e3e:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e40:	275e      	movs	r7, #94	; 0x5e
     e42:	5ddc      	ldrb	r4, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     e44:	4384      	bics	r4, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e46:	55dc      	strb	r4, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e48:	2480      	movs	r4, #128	; 0x80
     e4a:	00e4      	lsls	r4, r4, #3
     e4c:	3736      	adds	r7, #54	; 0x36
     e4e:	51d4      	str	r4, [r2, r7]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     e50:	3f0c      	subs	r7, #12
     e52:	51d4      	str	r4, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e54:	24a8      	movs	r4, #168	; 0xa8
     e56:	4e1b      	ldr	r6, [pc, #108]	; (ec4 <system_init+0xe8>)
     e58:	511e      	str	r6, [r3, r4]
     e5a:	511d      	str	r5, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e5c:	25ca      	movs	r5, #202	; 0xca
     e5e:	46ac      	mov	ip, r5
     e60:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     e62:	4385      	bics	r5, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e64:	4666      	mov	r6, ip
     e66:	559d      	strb	r5, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     e68:	2598      	movs	r5, #152	; 0x98
     e6a:	5151      	str	r1, [r2, r5]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     e6c:	51d1      	str	r1, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e6e:	5119      	str	r1, [r3, r4]
     e70:	4642      	mov	r2, r8
     e72:	511a      	str	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e74:	21de      	movs	r1, #222	; 0xde
     e76:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     e78:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e7a:	545a      	strb	r2, [r3, r1]
	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);

	EXTERNAL_IRQ_0_init();
     e7c:	4b12      	ldr	r3, [pc, #72]	; (ec8 <system_init+0xec>)
     e7e:	4798      	blx	r3

	SPI_ADF_init();
     e80:	4b12      	ldr	r3, [pc, #72]	; (ecc <system_init+0xf0>)
     e82:	4798      	blx	r3

	SPI_LMX_init();
     e84:	4b12      	ldr	r3, [pc, #72]	; (ed0 <system_init+0xf4>)
     e86:	4798      	blx	r3

	SPI_ZCD_init();
     e88:	4b12      	ldr	r3, [pc, #72]	; (ed4 <system_init+0xf8>)
     e8a:	4798      	blx	r3
	USART_0_init();
     e8c:	4b12      	ldr	r3, [pc, #72]	; (ed8 <system_init+0xfc>)
     e8e:	4798      	blx	r3

	delay_driver_init();
     e90:	4b12      	ldr	r3, [pc, #72]	; (edc <system_init+0x100>)
     e92:	4798      	blx	r3

	TIMER_ZCD_init();
     e94:	4b12      	ldr	r3, [pc, #72]	; (ee0 <system_init+0x104>)
     e96:	4798      	blx	r3
	TIMER_USB_init();
     e98:	4b12      	ldr	r3, [pc, #72]	; (ee4 <system_init+0x108>)
     e9a:	4798      	blx	r3
	DAC_0_init();
     e9c:	4b12      	ldr	r3, [pc, #72]	; (ee8 <system_init+0x10c>)
     e9e:	4798      	blx	r3

	USB_DEVICE_INSTANCE_init();
     ea0:	4b12      	ldr	r3, [pc, #72]	; (eec <system_init+0x110>)
     ea2:	4798      	blx	r3
}
     ea4:	bc04      	pop	{r2}
     ea6:	4690      	mov	r8, r2
     ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     eaa:	46c0      	nop			; (mov r8, r8)
     eac:	00002025 	.word	0x00002025
     eb0:	41004400 	.word	0x41004400
     eb4:	40000008 	.word	0x40000008
     eb8:	40000080 	.word	0x40000080
     ebc:	c0000008 	.word	0xc0000008
     ec0:	c0004000 	.word	0xc0004000
     ec4:	40000400 	.word	0x40000400
     ec8:	0000087d 	.word	0x0000087d
     ecc:	000009b1 	.word	0x000009b1
     ed0:	00000ab9 	.word	0x00000ab9
     ed4:	00000bad 	.word	0x00000bad
     ed8:	00000c39 	.word	0x00000c39
     edc:	00000c71 	.word	0x00000c71
     ee0:	000007fd 	.word	0x000007fd
     ee4:	0000083d 	.word	0x0000083d
     ee8:	00000ce1 	.word	0x00000ce1
     eec:	00000dc1 	.word	0x00000dc1

00000ef0 <dac_sync_init>:

/**
 * \brief Initialize the DAC HAL instance and hardware.
 */
int32_t dac_sync_init(struct dac_sync_descriptor *const descr, void *const hw)
{
     ef0:	b570      	push	{r4, r5, r6, lr}
     ef2:	0004      	movs	r4, r0
     ef4:	000d      	movs	r5, r1
	uint8_t i;
	int32_t rc;

	ASSERT(descr && hw);
     ef6:	2800      	cmp	r0, #0
     ef8:	d010      	beq.n	f1c <dac_sync_init+0x2c>
     efa:	2900      	cmp	r1, #0
     efc:	d00c      	beq.n	f18 <dac_sync_init+0x28>
     efe:	2001      	movs	r0, #1
     f00:	2232      	movs	r2, #50	; 0x32
     f02:	490c      	ldr	r1, [pc, #48]	; (f34 <dac_sync_init+0x44>)
     f04:	4b0c      	ldr	r3, [pc, #48]	; (f38 <dac_sync_init+0x48>)
     f06:	4798      	blx	r3

	rc = _dac_sync_init(&descr->device, hw);
     f08:	0029      	movs	r1, r5
     f0a:	0020      	movs	r0, r4
     f0c:	4b0b      	ldr	r3, [pc, #44]	; (f3c <dac_sync_init+0x4c>)
     f0e:	4798      	blx	r3
	if (rc) {
     f10:	2800      	cmp	r0, #0
     f12:	d10e      	bne.n	f32 <dac_sync_init+0x42>
     f14:	2300      	movs	r3, #0
     f16:	e00a      	b.n	f2e <dac_sync_init+0x3e>
	ASSERT(descr && hw);
     f18:	2000      	movs	r0, #0
     f1a:	e7f1      	b.n	f00 <dac_sync_init+0x10>
     f1c:	2000      	movs	r0, #0
     f1e:	e7ef      	b.n	f00 <dac_sync_init+0x10>
		return rc;
	}

	for (i = 0; i < CHANNEL_NUM; i++) {
		descr->sel_ch[i].buffer = NULL;
     f20:	00da      	lsls	r2, r3, #3
     f22:	18a2      	adds	r2, r4, r2
     f24:	2100      	movs	r1, #0
     f26:	6051      	str	r1, [r2, #4]
		descr->sel_ch[i].length = 0;
     f28:	6091      	str	r1, [r2, #8]
	for (i = 0; i < CHANNEL_NUM; i++) {
     f2a:	3301      	adds	r3, #1
     f2c:	b2db      	uxtb	r3, r3
     f2e:	2b00      	cmp	r3, #0
     f30:	d0f6      	beq.n	f20 <dac_sync_init+0x30>
	}

	return ERR_NONE;
}
     f32:	bd70      	pop	{r4, r5, r6, pc}
     f34:	00005730 	.word	0x00005730
     f38:	00001e29 	.word	0x00001e29
     f3c:	00002099 	.word	0x00002099

00000f40 <dac_sync_enable_channel>:

/**
 * \brief Enable DAC channel
 */
int32_t dac_sync_enable_channel(struct dac_sync_descriptor *const descr, const uint8_t ch)
{
     f40:	b570      	push	{r4, r5, r6, lr}
     f42:	0004      	movs	r4, r0
     f44:	000d      	movs	r5, r1
	ASSERT(descr && (ch < CHANNEL_NUM));
     f46:	2800      	cmp	r0, #0
     f48:	d00c      	beq.n	f64 <dac_sync_enable_channel+0x24>
     f4a:	2900      	cmp	r1, #0
     f4c:	d00c      	beq.n	f68 <dac_sync_enable_channel+0x28>
     f4e:	2000      	movs	r0, #0
     f50:	2252      	movs	r2, #82	; 0x52
     f52:	4906      	ldr	r1, [pc, #24]	; (f6c <dac_sync_enable_channel+0x2c>)
     f54:	4b06      	ldr	r3, [pc, #24]	; (f70 <dac_sync_enable_channel+0x30>)
     f56:	4798      	blx	r3

	_dac_sync_enable_channel(&descr->device, ch);
     f58:	0029      	movs	r1, r5
     f5a:	0020      	movs	r0, r4
     f5c:	4b05      	ldr	r3, [pc, #20]	; (f74 <dac_sync_enable_channel+0x34>)
     f5e:	4798      	blx	r3

	return ERR_NONE;
}
     f60:	2000      	movs	r0, #0
     f62:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && (ch < CHANNEL_NUM));
     f64:	2000      	movs	r0, #0
     f66:	e7f3      	b.n	f50 <dac_sync_enable_channel+0x10>
     f68:	2001      	movs	r0, #1
     f6a:	e7f1      	b.n	f50 <dac_sync_enable_channel+0x10>
     f6c:	00005730 	.word	0x00005730
     f70:	00001e29 	.word	0x00001e29
     f74:	000020c5 	.word	0x000020c5

00000f78 <dac_sync_write>:

/**
 * \brief DAC convert digital data to analog output
 */
int32_t dac_sync_write(struct dac_sync_descriptor *descr, const uint8_t ch, uint16_t *buffer, uint32_t length)
{
     f78:	b5f0      	push	{r4, r5, r6, r7, lr}
     f7a:	46ce      	mov	lr, r9
     f7c:	b500      	push	{lr}
     f7e:	b082      	sub	sp, #8
     f80:	0007      	movs	r7, r0
     f82:	000d      	movs	r5, r1
     f84:	0014      	movs	r4, r2
     f86:	4699      	mov	r9, r3
	ASSERT(descr && (ch < CHANNEL_NUM) && buffer && length);
     f88:	2800      	cmp	r0, #0
     f8a:	d007      	beq.n	f9c <dac_sync_write+0x24>
     f8c:	2900      	cmp	r1, #0
     f8e:	d107      	bne.n	fa0 <dac_sync_write+0x28>
     f90:	2a00      	cmp	r2, #0
     f92:	d018      	beq.n	fc6 <dac_sync_write+0x4e>
     f94:	2b00      	cmp	r3, #0
     f96:	d118      	bne.n	fca <dac_sync_write+0x52>
     f98:	2000      	movs	r0, #0
     f9a:	e002      	b.n	fa2 <dac_sync_write+0x2a>
     f9c:	2000      	movs	r0, #0
     f9e:	e000      	b.n	fa2 <dac_sync_write+0x2a>
     fa0:	2000      	movs	r0, #0
     fa2:	226a      	movs	r2, #106	; 0x6a
     fa4:	4917      	ldr	r1, [pc, #92]	; (1004 <dac_sync_write+0x8c>)
     fa6:	4b18      	ldr	r3, [pc, #96]	; (1008 <dac_sync_write+0x90>)
     fa8:	4798      	blx	r3

	/* check whether channel is enable */
	if (!_dac_sync_is_channel_enable(&descr->device, ch)) {
     faa:	9701      	str	r7, [sp, #4]
     fac:	0029      	movs	r1, r5
     fae:	0038      	movs	r0, r7
     fb0:	4b16      	ldr	r3, [pc, #88]	; (100c <dac_sync_write+0x94>)
     fb2:	4798      	blx	r3
     fb4:	2800      	cmp	r0, #0
     fb6:	d022      	beq.n	ffe <dac_sync_write+0x86>
		return ERR_NOT_READY;
	}

	descr->sel_ch[ch].buffer = buffer;
     fb8:	002e      	movs	r6, r5
     fba:	00eb      	lsls	r3, r5, #3
     fbc:	18fb      	adds	r3, r7, r3
     fbe:	605c      	str	r4, [r3, #4]
	descr->sel_ch[ch].length = length;
     fc0:	464a      	mov	r2, r9
     fc2:	609a      	str	r2, [r3, #8]

	while (descr->sel_ch[ch].length) {
     fc4:	e011      	b.n	fea <dac_sync_write+0x72>
	ASSERT(descr && (ch < CHANNEL_NUM) && buffer && length);
     fc6:	2000      	movs	r0, #0
     fc8:	e7eb      	b.n	fa2 <dac_sync_write+0x2a>
     fca:	2001      	movs	r0, #1
     fcc:	e7e9      	b.n	fa2 <dac_sync_write+0x2a>
		_dac_sync_write_data(&descr->device, *(descr->sel_ch[ch].buffer), ch);
     fce:	00f4      	lsls	r4, r6, #3
     fd0:	193c      	adds	r4, r7, r4
     fd2:	6863      	ldr	r3, [r4, #4]
     fd4:	8819      	ldrh	r1, [r3, #0]
     fd6:	002a      	movs	r2, r5
     fd8:	9801      	ldr	r0, [sp, #4]
     fda:	4b0d      	ldr	r3, [pc, #52]	; (1010 <dac_sync_write+0x98>)
     fdc:	4798      	blx	r3
		descr->sel_ch[ch].buffer++;
     fde:	6863      	ldr	r3, [r4, #4]
     fe0:	3302      	adds	r3, #2
     fe2:	6063      	str	r3, [r4, #4]
		descr->sel_ch[ch].length--;
     fe4:	68a3      	ldr	r3, [r4, #8]
     fe6:	3b01      	subs	r3, #1
     fe8:	60a3      	str	r3, [r4, #8]
	while (descr->sel_ch[ch].length) {
     fea:	00f3      	lsls	r3, r6, #3
     fec:	18fb      	adds	r3, r7, r3
     fee:	689b      	ldr	r3, [r3, #8]
     ff0:	2b00      	cmp	r3, #0
     ff2:	d1ec      	bne.n	fce <dac_sync_write+0x56>
	}

	return ERR_NONE;
     ff4:	2000      	movs	r0, #0
}
     ff6:	b002      	add	sp, #8
     ff8:	bc04      	pop	{r2}
     ffa:	4691      	mov	r9, r2
     ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ERR_NOT_READY;
     ffe:	201d      	movs	r0, #29
    1000:	4240      	negs	r0, r0
    1002:	e7f8      	b.n	ff6 <dac_sync_write+0x7e>
    1004:	00005730 	.word	0x00005730
    1008:	00001e29 	.word	0x00001e29
    100c:	000020d9 	.word	0x000020d9
    1010:	000020eb 	.word	0x000020eb

00001014 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    1014:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
    1016:	4b02      	ldr	r3, [pc, #8]	; (1020 <delay_init+0xc>)
    1018:	6018      	str	r0, [r3, #0]
    101a:	4b02      	ldr	r3, [pc, #8]	; (1024 <delay_init+0x10>)
    101c:	4798      	blx	r3
}
    101e:	bd10      	pop	{r4, pc}
    1020:	200000c4 	.word	0x200000c4
    1024:	00002a7d 	.word	0x00002a7d

00001028 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    1028:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    102a:	4b04      	ldr	r3, [pc, #16]	; (103c <delay_ms+0x14>)
    102c:	681c      	ldr	r4, [r3, #0]
    102e:	4b04      	ldr	r3, [pc, #16]	; (1040 <delay_ms+0x18>)
    1030:	4798      	blx	r3
    1032:	0001      	movs	r1, r0
    1034:	0020      	movs	r0, r4
    1036:	4b03      	ldr	r3, [pc, #12]	; (1044 <delay_ms+0x1c>)
    1038:	4798      	blx	r3
}
    103a:	bd10      	pop	{r4, pc}
    103c:	200000c4 	.word	0x200000c4
    1040:	00002019 	.word	0x00002019
    1044:	00002a89 	.word	0x00002a89

00001048 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    1048:	b570      	push	{r4, r5, r6, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    104a:	2501      	movs	r5, #1
    104c:	2400      	movs	r4, #0

	while (upper >= lower) {
    104e:	e007      	b.n	1060 <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
    1050:	4a0d      	ldr	r2, [pc, #52]	; (1088 <process_ext_irq+0x40>)
    1052:	58b3      	ldr	r3, [r6, r2]
    1054:	2b00      	cmp	r3, #0
    1056:	d000      	beq.n	105a <process_ext_irq+0x12>
				ext_irqs[middle].cb();
    1058:	4798      	blx	r3
			lower = middle + 1;
		} else {
			upper = middle - 1;
		}
	}
}
    105a:	bd70      	pop	{r4, r5, r6, pc}
			upper = middle - 1;
    105c:	3a01      	subs	r2, #1
    105e:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
    1060:	42ac      	cmp	r4, r5
    1062:	d8fa      	bhi.n	105a <process_ext_irq+0x12>
		middle = (upper + lower) >> 1;
    1064:	192b      	adds	r3, r5, r4
    1066:	105b      	asrs	r3, r3, #1
    1068:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
    106a:	2a00      	cmp	r2, #0
    106c:	d1f5      	bne.n	105a <process_ext_irq+0x12>
    106e:	21ff      	movs	r1, #255	; 0xff
    1070:	400b      	ands	r3, r1
		if (ext_irqs[middle].pin == pin) {
    1072:	00de      	lsls	r6, r3, #3
    1074:	4904      	ldr	r1, [pc, #16]	; (1088 <process_ext_irq+0x40>)
    1076:	1989      	adds	r1, r1, r6
    1078:	6849      	ldr	r1, [r1, #4]
    107a:	4281      	cmp	r1, r0
    107c:	d0e8      	beq.n	1050 <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
    107e:	d2ed      	bcs.n	105c <process_ext_irq+0x14>
			lower = middle + 1;
    1080:	3201      	adds	r2, #1
    1082:	b2d4      	uxtb	r4, r2
    1084:	e7ec      	b.n	1060 <process_ext_irq+0x18>
    1086:	46c0      	nop			; (mov r8, r8)
    1088:	200000c8 	.word	0x200000c8

0000108c <ext_irq_init>:
{
    108c:	b510      	push	{r4, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    108e:	2300      	movs	r3, #0
    1090:	2b00      	cmp	r3, #0
    1092:	d003      	beq.n	109c <ext_irq_init+0x10>
	return _ext_irq_init(process_ext_irq);
    1094:	4807      	ldr	r0, [pc, #28]	; (10b4 <ext_irq_init+0x28>)
    1096:	4b08      	ldr	r3, [pc, #32]	; (10b8 <ext_irq_init+0x2c>)
    1098:	4798      	blx	r3
}
    109a:	bd10      	pop	{r4, pc}
		ext_irqs[i].pin = 0xFFFFFFFF;
    109c:	4a07      	ldr	r2, [pc, #28]	; (10bc <ext_irq_init+0x30>)
    109e:	00d9      	lsls	r1, r3, #3
    10a0:	1850      	adds	r0, r2, r1
    10a2:	2401      	movs	r4, #1
    10a4:	4264      	negs	r4, r4
    10a6:	6044      	str	r4, [r0, #4]
		ext_irqs[i].cb  = NULL;
    10a8:	2000      	movs	r0, #0
    10aa:	5088      	str	r0, [r1, r2]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    10ac:	3301      	adds	r3, #1
    10ae:	b29b      	uxth	r3, r3
    10b0:	e7ee      	b.n	1090 <ext_irq_init+0x4>
    10b2:	46c0      	nop			; (mov r8, r8)
    10b4:	00001049 	.word	0x00001049
    10b8:	000020f9 	.word	0x000020f9
    10bc:	200000c8 	.word	0x200000c8

000010c0 <ext_irq_register>:
{
    10c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    10c2:	46c6      	mov	lr, r8
    10c4:	b500      	push	{lr}
    10c6:	b084      	sub	sp, #16
    10c8:	9001      	str	r0, [sp, #4]
	uint8_t i = 0, j = 0;
    10ca:	2300      	movs	r3, #0
	for (; i < EXT_IRQ_AMOUNT; i++) {
    10cc:	2b00      	cmp	r3, #0
    10ce:	d010      	beq.n	10f2 <ext_irq_register+0x32>
	bool    found = false;
    10d0:	2300      	movs	r3, #0
    10d2:	4698      	mov	r8, r3
	if (NULL == cb) {
    10d4:	2900      	cmp	r1, #0
    10d6:	d01b      	beq.n	1110 <ext_irq_register+0x50>
	if (!found) {
    10d8:	4643      	mov	r3, r8
    10da:	2b00      	cmp	r3, #0
    10dc:	d146      	bne.n	116c <ext_irq_register+0xac>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    10de:	2b00      	cmp	r3, #0
    10e0:	d124      	bne.n	112c <ext_irq_register+0x6c>
			if (NULL == ext_irqs[i].cb) {
    10e2:	00da      	lsls	r2, r3, #3
    10e4:	4c2a      	ldr	r4, [pc, #168]	; (1190 <ext_irq_register+0xd0>)
    10e6:	5912      	ldr	r2, [r2, r4]
    10e8:	2a00      	cmp	r2, #0
    10ea:	d018      	beq.n	111e <ext_irq_register+0x5e>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    10ec:	3301      	adds	r3, #1
    10ee:	b2db      	uxtb	r3, r3
    10f0:	e7f5      	b.n	10de <ext_irq_register+0x1e>
		if (ext_irqs[i].pin == pin) {
    10f2:	00dc      	lsls	r4, r3, #3
    10f4:	4a26      	ldr	r2, [pc, #152]	; (1190 <ext_irq_register+0xd0>)
    10f6:	1912      	adds	r2, r2, r4
    10f8:	6852      	ldr	r2, [r2, #4]
    10fa:	9801      	ldr	r0, [sp, #4]
    10fc:	4282      	cmp	r2, r0
    10fe:	d002      	beq.n	1106 <ext_irq_register+0x46>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    1100:	3301      	adds	r3, #1
    1102:	b2db      	uxtb	r3, r3
    1104:	e7e2      	b.n	10cc <ext_irq_register+0xc>
			ext_irqs[i].cb = cb;
    1106:	4b22      	ldr	r3, [pc, #136]	; (1190 <ext_irq_register+0xd0>)
    1108:	50e1      	str	r1, [r4, r3]
			found          = true;
    110a:	2301      	movs	r3, #1
    110c:	4698      	mov	r8, r3
			break;
    110e:	e7e1      	b.n	10d4 <ext_irq_register+0x14>
		if (!found) {
    1110:	4643      	mov	r3, r8
    1112:	2b00      	cmp	r3, #0
    1114:	d035      	beq.n	1182 <ext_irq_register+0xc2>
		return _ext_irq_enable(pin, false);
    1116:	9801      	ldr	r0, [sp, #4]
    1118:	4b1e      	ldr	r3, [pc, #120]	; (1194 <ext_irq_register+0xd4>)
    111a:	4798      	blx	r3
    111c:	e02d      	b.n	117a <ext_irq_register+0xba>
				ext_irqs[i].cb  = cb;
    111e:	00dd      	lsls	r5, r3, #3
    1120:	5129      	str	r1, [r5, r4]
				ext_irqs[i].pin = pin;
    1122:	1965      	adds	r5, r4, r5
    1124:	9a01      	ldr	r2, [sp, #4]
    1126:	606a      	str	r2, [r5, #4]
				found           = true;
    1128:	2201      	movs	r2, #1
    112a:	4690      	mov	r8, r2
    112c:	2200      	movs	r2, #0
    112e:	e001      	b.n	1134 <ext_irq_register+0x74>
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    1130:	3201      	adds	r2, #1
    1132:	b2d2      	uxtb	r2, r2
    1134:	0019      	movs	r1, r3
    1136:	4311      	orrs	r1, r2
    1138:	d118      	bne.n	116c <ext_irq_register+0xac>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    113a:	4915      	ldr	r1, [pc, #84]	; (1190 <ext_irq_register+0xd0>)
    113c:	00dc      	lsls	r4, r3, #3
    113e:	190c      	adds	r4, r1, r4
    1140:	6867      	ldr	r7, [r4, #4]
    1142:	00d4      	lsls	r4, r2, #3
    1144:	1909      	adds	r1, r1, r4
    1146:	6849      	ldr	r1, [r1, #4]
    1148:	428f      	cmp	r7, r1
    114a:	d2f1      	bcs.n	1130 <ext_irq_register+0x70>
    114c:	1c4c      	adds	r4, r1, #1
    114e:	d0ef      	beq.n	1130 <ext_irq_register+0x70>
				struct ext_irq tmp = ext_irqs[j];
    1150:	a902      	add	r1, sp, #8
    1152:	468c      	mov	ip, r1
    1154:	4f0e      	ldr	r7, [pc, #56]	; (1190 <ext_irq_register+0xd0>)
    1156:	00d1      	lsls	r1, r2, #3
    1158:	1879      	adds	r1, r7, r1
    115a:	4664      	mov	r4, ip
    115c:	c941      	ldmia	r1!, {r0, r6}
    115e:	c441      	stmia	r4!, {r0, r6}
				ext_irqs[i] = tmp;
    1160:	00dd      	lsls	r5, r3, #3
    1162:	197d      	adds	r5, r7, r5
    1164:	4661      	mov	r1, ip
    1166:	c911      	ldmia	r1!, {r0, r4}
    1168:	c511      	stmia	r5!, {r0, r4}
    116a:	e7e1      	b.n	1130 <ext_irq_register+0x70>
	if (!found) {
    116c:	4643      	mov	r3, r8
    116e:	2b00      	cmp	r3, #0
    1170:	d00a      	beq.n	1188 <ext_irq_register+0xc8>
	return _ext_irq_enable(pin, true);
    1172:	2101      	movs	r1, #1
    1174:	9801      	ldr	r0, [sp, #4]
    1176:	4b07      	ldr	r3, [pc, #28]	; (1194 <ext_irq_register+0xd4>)
    1178:	4798      	blx	r3
}
    117a:	b004      	add	sp, #16
    117c:	bc04      	pop	{r2}
    117e:	4690      	mov	r8, r2
    1180:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return ERR_INVALID_ARG;
    1182:	200d      	movs	r0, #13
    1184:	4240      	negs	r0, r0
    1186:	e7f8      	b.n	117a <ext_irq_register+0xba>
		return ERR_INVALID_ARG;
    1188:	200d      	movs	r0, #13
    118a:	4240      	negs	r0, r0
    118c:	e7f5      	b.n	117a <ext_irq_register+0xba>
    118e:	46c0      	nop			; (mov r8, r8)
    1190:	200000c8 	.word	0x200000c8
    1194:	00002189 	.word	0x00002189

00001198 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    1198:	b570      	push	{r4, r5, r6, lr}
    119a:	0004      	movs	r4, r0
    119c:	000d      	movs	r5, r1
    119e:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
    11a0:	2800      	cmp	r0, #0
    11a2:	d00e      	beq.n	11c2 <io_write+0x2a>
    11a4:	2900      	cmp	r1, #0
    11a6:	d00a      	beq.n	11be <io_write+0x26>
    11a8:	2001      	movs	r0, #1
    11aa:	2234      	movs	r2, #52	; 0x34
    11ac:	4906      	ldr	r1, [pc, #24]	; (11c8 <io_write+0x30>)
    11ae:	4b07      	ldr	r3, [pc, #28]	; (11cc <io_write+0x34>)
    11b0:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    11b2:	6823      	ldr	r3, [r4, #0]
    11b4:	0032      	movs	r2, r6
    11b6:	0029      	movs	r1, r5
    11b8:	0020      	movs	r0, r4
    11ba:	4798      	blx	r3
}
    11bc:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
    11be:	2000      	movs	r0, #0
    11c0:	e7f3      	b.n	11aa <io_write+0x12>
    11c2:	2000      	movs	r0, #0
    11c4:	e7f1      	b.n	11aa <io_write+0x12>
    11c6:	46c0      	nop			; (mov r8, r8)
    11c8:	0000574c 	.word	0x0000574c
    11cc:	00001e29 	.word	0x00001e29

000011d0 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    11d0:	b570      	push	{r4, r5, r6, lr}
    11d2:	0004      	movs	r4, r0
    11d4:	000d      	movs	r5, r1
    11d6:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
    11d8:	2800      	cmp	r0, #0
    11da:	d00e      	beq.n	11fa <io_read+0x2a>
    11dc:	2900      	cmp	r1, #0
    11de:	d00a      	beq.n	11f6 <io_read+0x26>
    11e0:	2001      	movs	r0, #1
    11e2:	223d      	movs	r2, #61	; 0x3d
    11e4:	4906      	ldr	r1, [pc, #24]	; (1200 <io_read+0x30>)
    11e6:	4b07      	ldr	r3, [pc, #28]	; (1204 <io_read+0x34>)
    11e8:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    11ea:	6863      	ldr	r3, [r4, #4]
    11ec:	0032      	movs	r2, r6
    11ee:	0029      	movs	r1, r5
    11f0:	0020      	movs	r0, r4
    11f2:	4798      	blx	r3
}
    11f4:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
    11f6:	2000      	movs	r0, #0
    11f8:	e7f3      	b.n	11e2 <io_read+0x12>
    11fa:	2000      	movs	r0, #0
    11fc:	e7f1      	b.n	11e2 <io_read+0x12>
    11fe:	46c0      	nop			; (mov r8, r8)
    1200:	0000574c 	.word	0x0000574c
    1204:	00001e29 	.word	0x00001e29

00001208 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    1208:	b570      	push	{r4, r5, r6, lr}
    120a:	0004      	movs	r4, r0
    120c:	000d      	movs	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
    120e:	2800      	cmp	r0, #0
    1210:	d017      	beq.n	1242 <spi_m_sync_init+0x3a>
    1212:	2900      	cmp	r1, #0
    1214:	d013      	beq.n	123e <spi_m_sync_init+0x36>
    1216:	2001      	movs	r0, #1
    1218:	2240      	movs	r2, #64	; 0x40
    121a:	490b      	ldr	r1, [pc, #44]	; (1248 <spi_m_sync_init+0x40>)
    121c:	4b0b      	ldr	r3, [pc, #44]	; (124c <spi_m_sync_init+0x44>)
    121e:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    1220:	6065      	str	r5, [r4, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    1222:	1d20      	adds	r0, r4, #4
    1224:	0029      	movs	r1, r5
    1226:	4b0a      	ldr	r3, [pc, #40]	; (1250 <spi_m_sync_init+0x48>)
    1228:	4798      	blx	r3

	if (rc < 0) {
    122a:	2800      	cmp	r0, #0
    122c:	db06      	blt.n	123c <spi_m_sync_init+0x34>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    122e:	4b09      	ldr	r3, [pc, #36]	; (1254 <spi_m_sync_init+0x4c>)
    1230:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
    1232:	4b09      	ldr	r3, [pc, #36]	; (1258 <spi_m_sync_init+0x50>)
    1234:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
    1236:	4b09      	ldr	r3, [pc, #36]	; (125c <spi_m_sync_init+0x54>)
    1238:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
    123a:	2000      	movs	r0, #0
}
    123c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(spi && hw);
    123e:	2000      	movs	r0, #0
    1240:	e7ea      	b.n	1218 <spi_m_sync_init+0x10>
    1242:	2000      	movs	r0, #0
    1244:	e7e8      	b.n	1218 <spi_m_sync_init+0x10>
    1246:	46c0      	nop			; (mov r8, r8)
    1248:	00005760 	.word	0x00005760
    124c:	00001e29 	.word	0x00001e29
    1250:	00002629 	.word	0x00002629
    1254:	ffff8000 	.word	0xffff8000
    1258:	0000130d 	.word	0x0000130d
    125c:	000012d1 	.word	0x000012d1

00001260 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
    1260:	b510      	push	{r4, lr}
    1262:	0004      	movs	r4, r0
	ASSERT(spi);
    1264:	1e43      	subs	r3, r0, #1
    1266:	4198      	sbcs	r0, r3
    1268:	b2c0      	uxtb	r0, r0
    126a:	2257      	movs	r2, #87	; 0x57
    126c:	4903      	ldr	r1, [pc, #12]	; (127c <spi_m_sync_enable+0x1c>)
    126e:	4b04      	ldr	r3, [pc, #16]	; (1280 <spi_m_sync_enable+0x20>)
    1270:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
    1272:	1d20      	adds	r0, r4, #4
    1274:	4b03      	ldr	r3, [pc, #12]	; (1284 <spi_m_sync_enable+0x24>)
    1276:	4798      	blx	r3
}
    1278:	bd10      	pop	{r4, pc}
    127a:	46c0      	nop			; (mov r8, r8)
    127c:	00005760 	.word	0x00005760
    1280:	00001e29 	.word	0x00001e29
    1284:	0000282d 	.word	0x0000282d

00001288 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    1288:	b530      	push	{r4, r5, lr}
    128a:	b087      	sub	sp, #28
    128c:	0004      	movs	r4, r0
    128e:	000d      	movs	r5, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    1290:	2800      	cmp	r0, #0
    1292:	d015      	beq.n	12c0 <spi_m_sync_transfer+0x38>
    1294:	2900      	cmp	r1, #0
    1296:	d011      	beq.n	12bc <spi_m_sync_transfer+0x34>
    1298:	2001      	movs	r0, #1
    129a:	22b3      	movs	r2, #179	; 0xb3
    129c:	4909      	ldr	r1, [pc, #36]	; (12c4 <spi_m_sync_transfer+0x3c>)
    129e:	4b0a      	ldr	r3, [pc, #40]	; (12c8 <spi_m_sync_transfer+0x40>)
    12a0:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    12a2:	682b      	ldr	r3, [r5, #0]
    12a4:	9303      	str	r3, [sp, #12]
	msg.rxbuf = p_xfer->rxbuf;
    12a6:	686b      	ldr	r3, [r5, #4]
    12a8:	9304      	str	r3, [sp, #16]
	msg.size  = p_xfer->size;
    12aa:	68ab      	ldr	r3, [r5, #8]
    12ac:	9301      	str	r3, [sp, #4]
    12ae:	9305      	str	r3, [sp, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    12b0:	1d20      	adds	r0, r4, #4
    12b2:	a903      	add	r1, sp, #12
    12b4:	4b05      	ldr	r3, [pc, #20]	; (12cc <spi_m_sync_transfer+0x44>)
    12b6:	4798      	blx	r3
}
    12b8:	b007      	add	sp, #28
    12ba:	bd30      	pop	{r4, r5, pc}
	ASSERT(spi && p_xfer);
    12bc:	2000      	movs	r0, #0
    12be:	e7ec      	b.n	129a <spi_m_sync_transfer+0x12>
    12c0:	2000      	movs	r0, #0
    12c2:	e7ea      	b.n	129a <spi_m_sync_transfer+0x12>
    12c4:	00005760 	.word	0x00005760
    12c8:	00001e29 	.word	0x00001e29
    12cc:	00002865 	.word	0x00002865

000012d0 <_spi_m_sync_io_write>:
{
    12d0:	b570      	push	{r4, r5, r6, lr}
    12d2:	b084      	sub	sp, #16
    12d4:	0004      	movs	r4, r0
    12d6:	000e      	movs	r6, r1
    12d8:	0015      	movs	r5, r2
	ASSERT(io);
    12da:	1e43      	subs	r3, r0, #1
    12dc:	4198      	sbcs	r0, r3
    12de:	b2c0      	uxtb	r0, r0
    12e0:	22a3      	movs	r2, #163	; 0xa3
    12e2:	4907      	ldr	r1, [pc, #28]	; (1300 <_spi_m_sync_io_write+0x30>)
    12e4:	4b07      	ldr	r3, [pc, #28]	; (1304 <_spi_m_sync_io_write+0x34>)
    12e6:	4798      	blx	r3
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    12e8:	0020      	movs	r0, r4
    12ea:	380c      	subs	r0, #12
	xfer.rxbuf = 0;
    12ec:	2300      	movs	r3, #0
    12ee:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
    12f0:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
    12f2:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    12f4:	a901      	add	r1, sp, #4
    12f6:	4b04      	ldr	r3, [pc, #16]	; (1308 <_spi_m_sync_io_write+0x38>)
    12f8:	4798      	blx	r3
}
    12fa:	b004      	add	sp, #16
    12fc:	bd70      	pop	{r4, r5, r6, pc}
    12fe:	46c0      	nop			; (mov r8, r8)
    1300:	00005760 	.word	0x00005760
    1304:	00001e29 	.word	0x00001e29
    1308:	00001289 	.word	0x00001289

0000130c <_spi_m_sync_io_read>:
{
    130c:	b570      	push	{r4, r5, r6, lr}
    130e:	b084      	sub	sp, #16
    1310:	0004      	movs	r4, r0
    1312:	000e      	movs	r6, r1
    1314:	0015      	movs	r5, r2
	ASSERT(io);
    1316:	1e43      	subs	r3, r0, #1
    1318:	4198      	sbcs	r0, r3
    131a:	b2c0      	uxtb	r0, r0
    131c:	2287      	movs	r2, #135	; 0x87
    131e:	4907      	ldr	r1, [pc, #28]	; (133c <_spi_m_sync_io_read+0x30>)
    1320:	4b07      	ldr	r3, [pc, #28]	; (1340 <_spi_m_sync_io_read+0x34>)
    1322:	4798      	blx	r3
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    1324:	0020      	movs	r0, r4
    1326:	380c      	subs	r0, #12
	xfer.rxbuf = buf;
    1328:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
    132a:	2300      	movs	r3, #0
    132c:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
    132e:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    1330:	a901      	add	r1, sp, #4
    1332:	4b04      	ldr	r3, [pc, #16]	; (1344 <_spi_m_sync_io_read+0x38>)
    1334:	4798      	blx	r3
}
    1336:	b004      	add	sp, #16
    1338:	bd70      	pop	{r4, r5, r6, pc}
    133a:	46c0      	nop			; (mov r8, r8)
    133c:	00005760 	.word	0x00005760
    1340:	00001e29 	.word	0x00001e29
    1344:	00001289 	.word	0x00001289

00001348 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
    1348:	b570      	push	{r4, r5, r6, lr}
    134a:	0004      	movs	r4, r0
    134c:	000d      	movs	r5, r1
	ASSERT(spi && io);
    134e:	2800      	cmp	r0, #0
    1350:	d00c      	beq.n	136c <spi_m_sync_get_io_descriptor+0x24>
    1352:	2900      	cmp	r1, #0
    1354:	d008      	beq.n	1368 <spi_m_sync_get_io_descriptor+0x20>
    1356:	2001      	movs	r0, #1
    1358:	22bd      	movs	r2, #189	; 0xbd
    135a:	4905      	ldr	r1, [pc, #20]	; (1370 <spi_m_sync_get_io_descriptor+0x28>)
    135c:	4b05      	ldr	r3, [pc, #20]	; (1374 <spi_m_sync_get_io_descriptor+0x2c>)
    135e:	4798      	blx	r3
	*io = &spi->io;
    1360:	340c      	adds	r4, #12
    1362:	602c      	str	r4, [r5, #0]
	return 0;
}
    1364:	2000      	movs	r0, #0
    1366:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(spi && io);
    1368:	2000      	movs	r0, #0
    136a:	e7f5      	b.n	1358 <spi_m_sync_get_io_descriptor+0x10>
    136c:	2000      	movs	r0, #0
    136e:	e7f3      	b.n	1358 <spi_m_sync_get_io_descriptor+0x10>
    1370:	00005760 	.word	0x00005760
    1374:	00001e29 	.word	0x00001e29

00001378 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    1378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    137a:	6806      	ldr	r6, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    137c:	2e00      	cmp	r6, #0
    137e:	d002      	beq.n	1386 <timer_add_timer_task+0xe>
    1380:	0033      	movs	r3, r6
    1382:	2500      	movs	r5, #0
    1384:	e00c      	b.n	13a0 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    1386:	4b10      	ldr	r3, [pc, #64]	; (13c8 <timer_add_timer_task+0x50>)
    1388:	4798      	blx	r3
		return;
    138a:	e018      	b.n	13be <timer_add_timer_task+0x46>
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    138c:	689f      	ldr	r7, [r3, #8]
    138e:	46bc      	mov	ip, r7
    1390:	4464      	add	r4, ip
    1392:	1aa4      	subs	r4, r4, r2
    1394:	3401      	adds	r4, #1
		}
		if (time_left >= new_task->interval)
    1396:	688f      	ldr	r7, [r1, #8]
    1398:	42bc      	cmp	r4, r7
    139a:	d20b      	bcs.n	13b4 <timer_add_timer_task+0x3c>
			break;
		prev = it;
    139c:	001d      	movs	r5, r3
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    139e:	681b      	ldr	r3, [r3, #0]
    13a0:	2b00      	cmp	r3, #0
    13a2:	d007      	beq.n	13b4 <timer_add_timer_task+0x3c>
		if (it->time_label <= time) {
    13a4:	685c      	ldr	r4, [r3, #4]
    13a6:	4294      	cmp	r4, r2
    13a8:	d8f0      	bhi.n	138c <timer_add_timer_task+0x14>
			time_left = it->interval - (time - it->time_label);
    13aa:	1aa4      	subs	r4, r4, r2
    13ac:	689f      	ldr	r7, [r3, #8]
    13ae:	46bc      	mov	ip, r7
    13b0:	4464      	add	r4, ip
    13b2:	e7f0      	b.n	1396 <timer_add_timer_task+0x1e>
	}

	if (it == head) {
    13b4:	42b3      	cmp	r3, r6
    13b6:	d003      	beq.n	13c0 <timer_add_timer_task+0x48>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    13b8:	0028      	movs	r0, r5
    13ba:	4b04      	ldr	r3, [pc, #16]	; (13cc <timer_add_timer_task+0x54>)
    13bc:	4798      	blx	r3
	}
}
    13be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    13c0:	4b01      	ldr	r3, [pc, #4]	; (13c8 <timer_add_timer_task+0x50>)
    13c2:	4798      	blx	r3
    13c4:	e7fb      	b.n	13be <timer_add_timer_task+0x46>
    13c6:	46c0      	nop			; (mov r8, r8)
    13c8:	00001e49 	.word	0x00001e49
    13cc:	00001e75 	.word	0x00001e75

000013d0 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    13d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    13d2:	0005      	movs	r5, r0
    13d4:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    13d6:	6903      	ldr	r3, [r0, #16]
    13d8:	1c5e      	adds	r6, r3, #1
    13da:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    13dc:	7e03      	ldrb	r3, [r0, #24]
    13de:	07db      	lsls	r3, r3, #31
    13e0:	d402      	bmi.n	13e8 <timer_process_counted+0x18>
    13e2:	7e03      	ldrb	r3, [r0, #24]
    13e4:	079b      	lsls	r3, r3, #30
    13e6:	d50a      	bpl.n	13fe <timer_process_counted+0x2e>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    13e8:	7e2b      	ldrb	r3, [r5, #24]
    13ea:	2202      	movs	r2, #2
    13ec:	4313      	orrs	r3, r2
    13ee:	b2db      	uxtb	r3, r3
    13f0:	762b      	strb	r3, [r5, #24]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
	}
}
    13f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    13f4:	696f      	ldr	r7, [r5, #20]
		tmp->cb(tmp);
    13f6:	68e3      	ldr	r3, [r4, #12]
    13f8:	0020      	movs	r0, r4
    13fa:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
    13fc:	003c      	movs	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
    13fe:	2c00      	cmp	r4, #0
    1400:	d0f7      	beq.n	13f2 <timer_process_counted+0x22>
    1402:	6863      	ldr	r3, [r4, #4]
    1404:	1af3      	subs	r3, r6, r3
    1406:	68a2      	ldr	r2, [r4, #8]
    1408:	4293      	cmp	r3, r2
    140a:	d3f2      	bcc.n	13f2 <timer_process_counted+0x22>
		list_remove_head(&timer->tasks);
    140c:	002f      	movs	r7, r5
    140e:	3714      	adds	r7, #20
    1410:	0038      	movs	r0, r7
    1412:	4b06      	ldr	r3, [pc, #24]	; (142c <timer_process_counted+0x5c>)
    1414:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    1416:	7c23      	ldrb	r3, [r4, #16]
    1418:	2b01      	cmp	r3, #1
    141a:	d1eb      	bne.n	13f4 <timer_process_counted+0x24>
			tmp->time_label = time;
    141c:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    141e:	0032      	movs	r2, r6
    1420:	0021      	movs	r1, r4
    1422:	0038      	movs	r0, r7
    1424:	4b02      	ldr	r3, [pc, #8]	; (1430 <timer_process_counted+0x60>)
    1426:	4798      	blx	r3
    1428:	e7e4      	b.n	13f4 <timer_process_counted+0x24>
    142a:	46c0      	nop			; (mov r8, r8)
    142c:	00001ebd 	.word	0x00001ebd
    1430:	00001379 	.word	0x00001379

00001434 <timer_init>:
{
    1434:	b570      	push	{r4, r5, r6, lr}
    1436:	0004      	movs	r4, r0
    1438:	000d      	movs	r5, r1
	ASSERT(descr && hw);
    143a:	2800      	cmp	r0, #0
    143c:	d012      	beq.n	1464 <timer_init+0x30>
    143e:	2900      	cmp	r1, #0
    1440:	d00e      	beq.n	1460 <timer_init+0x2c>
    1442:	2001      	movs	r0, #1
    1444:	223b      	movs	r2, #59	; 0x3b
    1446:	4908      	ldr	r1, [pc, #32]	; (1468 <timer_init+0x34>)
    1448:	4b08      	ldr	r3, [pc, #32]	; (146c <timer_init+0x38>)
    144a:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    144c:	0029      	movs	r1, r5
    144e:	0020      	movs	r0, r4
    1450:	4b07      	ldr	r3, [pc, #28]	; (1470 <timer_init+0x3c>)
    1452:	4798      	blx	r3
	descr->time                           = 0;
    1454:	2300      	movs	r3, #0
    1456:	6123      	str	r3, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    1458:	4b06      	ldr	r3, [pc, #24]	; (1474 <timer_init+0x40>)
    145a:	6023      	str	r3, [r4, #0]
}
    145c:	2000      	movs	r0, #0
    145e:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
    1460:	2000      	movs	r0, #0
    1462:	e7ef      	b.n	1444 <timer_init+0x10>
    1464:	2000      	movs	r0, #0
    1466:	e7ed      	b.n	1444 <timer_init+0x10>
    1468:	0000577c 	.word	0x0000577c
    146c:	00001e29 	.word	0x00001e29
    1470:	00002b65 	.word	0x00002b65
    1474:	000013d1 	.word	0x000013d1

00001478 <timer_start>:
{
    1478:	b510      	push	{r4, lr}
    147a:	0004      	movs	r4, r0
	ASSERT(descr);
    147c:	1e43      	subs	r3, r0, #1
    147e:	4198      	sbcs	r0, r3
    1480:	b2c0      	uxtb	r0, r0
    1482:	2253      	movs	r2, #83	; 0x53
    1484:	4907      	ldr	r1, [pc, #28]	; (14a4 <timer_start+0x2c>)
    1486:	4b08      	ldr	r3, [pc, #32]	; (14a8 <timer_start+0x30>)
    1488:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
    148a:	0020      	movs	r0, r4
    148c:	4b07      	ldr	r3, [pc, #28]	; (14ac <timer_start+0x34>)
    148e:	4798      	blx	r3
    1490:	2800      	cmp	r0, #0
    1492:	d104      	bne.n	149e <timer_start+0x26>
	_timer_start(&descr->device);
    1494:	0020      	movs	r0, r4
    1496:	4b06      	ldr	r3, [pc, #24]	; (14b0 <timer_start+0x38>)
    1498:	4798      	blx	r3
	return ERR_NONE;
    149a:	2000      	movs	r0, #0
}
    149c:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    149e:	2011      	movs	r0, #17
    14a0:	4240      	negs	r0, r0
    14a2:	e7fb      	b.n	149c <timer_start+0x24>
    14a4:	0000577c 	.word	0x0000577c
    14a8:	00001e29 	.word	0x00001e29
    14ac:	00002ca3 	.word	0x00002ca3
    14b0:	00002c89 	.word	0x00002c89

000014b4 <timer_stop>:
{
    14b4:	b510      	push	{r4, lr}
    14b6:	0004      	movs	r4, r0
	ASSERT(descr);
    14b8:	1e43      	subs	r3, r0, #1
    14ba:	4198      	sbcs	r0, r3
    14bc:	b2c0      	uxtb	r0, r0
    14be:	2261      	movs	r2, #97	; 0x61
    14c0:	4907      	ldr	r1, [pc, #28]	; (14e0 <timer_stop+0x2c>)
    14c2:	4b08      	ldr	r3, [pc, #32]	; (14e4 <timer_stop+0x30>)
    14c4:	4798      	blx	r3
	if (!_timer_is_started(&descr->device)) {
    14c6:	0020      	movs	r0, r4
    14c8:	4b07      	ldr	r3, [pc, #28]	; (14e8 <timer_stop+0x34>)
    14ca:	4798      	blx	r3
    14cc:	2800      	cmp	r0, #0
    14ce:	d004      	beq.n	14da <timer_stop+0x26>
	_timer_stop(&descr->device);
    14d0:	0020      	movs	r0, r4
    14d2:	4b06      	ldr	r3, [pc, #24]	; (14ec <timer_stop+0x38>)
    14d4:	4798      	blx	r3
	return ERR_NONE;
    14d6:	2000      	movs	r0, #0
}
    14d8:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    14da:	2011      	movs	r0, #17
    14dc:	4240      	negs	r0, r0
    14de:	e7fb      	b.n	14d8 <timer_stop+0x24>
    14e0:	0000577c 	.word	0x0000577c
    14e4:	00001e29 	.word	0x00001e29
    14e8:	00002ca3 	.word	0x00002ca3
    14ec:	00002c97 	.word	0x00002c97

000014f0 <timer_add_task>:
{
    14f0:	b570      	push	{r4, r5, r6, lr}
    14f2:	b082      	sub	sp, #8
    14f4:	0004      	movs	r4, r0
    14f6:	000d      	movs	r5, r1
	ASSERT(descr && task);
    14f8:	2800      	cmp	r0, #0
    14fa:	d026      	beq.n	154a <timer_add_task+0x5a>
    14fc:	2900      	cmp	r1, #0
    14fe:	d022      	beq.n	1546 <timer_add_task+0x56>
    1500:	2001      	movs	r0, #1
    1502:	227a      	movs	r2, #122	; 0x7a
    1504:	491f      	ldr	r1, [pc, #124]	; (1584 <timer_add_task+0x94>)
    1506:	4b20      	ldr	r3, [pc, #128]	; (1588 <timer_add_task+0x98>)
    1508:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    150a:	7e23      	ldrb	r3, [r4, #24]
    150c:	2201      	movs	r2, #1
    150e:	4313      	orrs	r3, r2
    1510:	b2db      	uxtb	r3, r3
    1512:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
    1514:	0026      	movs	r6, r4
    1516:	3614      	adds	r6, #20
    1518:	0029      	movs	r1, r5
    151a:	0030      	movs	r0, r6
    151c:	4b1b      	ldr	r3, [pc, #108]	; (158c <timer_add_task+0x9c>)
    151e:	4798      	blx	r3
    1520:	2800      	cmp	r0, #0
    1522:	d114      	bne.n	154e <timer_add_task+0x5e>
	task->time_label = descr->time;
    1524:	6923      	ldr	r3, [r4, #16]
    1526:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    1528:	6922      	ldr	r2, [r4, #16]
    152a:	0029      	movs	r1, r5
    152c:	0030      	movs	r0, r6
    152e:	4b18      	ldr	r3, [pc, #96]	; (1590 <timer_add_task+0xa0>)
    1530:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    1532:	7e23      	ldrb	r3, [r4, #24]
    1534:	2201      	movs	r2, #1
    1536:	4393      	bics	r3, r2
    1538:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    153a:	7e23      	ldrb	r3, [r4, #24]
    153c:	079b      	lsls	r3, r3, #30
    153e:	d412      	bmi.n	1566 <timer_add_task+0x76>
	return ERR_NONE;
    1540:	2000      	movs	r0, #0
}
    1542:	b002      	add	sp, #8
    1544:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && task);
    1546:	2000      	movs	r0, #0
    1548:	e7db      	b.n	1502 <timer_add_task+0x12>
    154a:	2000      	movs	r0, #0
    154c:	e7d9      	b.n	1502 <timer_add_task+0x12>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    154e:	7e23      	ldrb	r3, [r4, #24]
    1550:	2201      	movs	r2, #1
    1552:	4393      	bics	r3, r2
    1554:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
    1556:	327e      	adds	r2, #126	; 0x7e
    1558:	490a      	ldr	r1, [pc, #40]	; (1584 <timer_add_task+0x94>)
    155a:	2000      	movs	r0, #0
    155c:	4b0a      	ldr	r3, [pc, #40]	; (1588 <timer_add_task+0x98>)
    155e:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    1560:	2012      	movs	r0, #18
    1562:	4240      	negs	r0, r0
    1564:	e7ed      	b.n	1542 <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
    1566:	a801      	add	r0, sp, #4
    1568:	4b0a      	ldr	r3, [pc, #40]	; (1594 <timer_add_task+0xa4>)
    156a:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    156c:	7e23      	ldrb	r3, [r4, #24]
    156e:	2202      	movs	r2, #2
    1570:	4393      	bics	r3, r2
    1572:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
    1574:	0020      	movs	r0, r4
    1576:	4b08      	ldr	r3, [pc, #32]	; (1598 <timer_add_task+0xa8>)
    1578:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    157a:	a801      	add	r0, sp, #4
    157c:	4b07      	ldr	r3, [pc, #28]	; (159c <timer_add_task+0xac>)
    157e:	4798      	blx	r3
	return ERR_NONE;
    1580:	2000      	movs	r0, #0
    1582:	e7de      	b.n	1542 <timer_add_task+0x52>
    1584:	0000577c 	.word	0x0000577c
    1588:	00001e29 	.word	0x00001e29
    158c:	00001e31 	.word	0x00001e31
    1590:	00001379 	.word	0x00001379
    1594:	000040cd 	.word	0x000040cd
    1598:	00002cb5 	.word	0x00002cb5
    159c:	000040db 	.word	0x000040db

000015a0 <timer_remove_task>:
{
    15a0:	b570      	push	{r4, r5, r6, lr}
    15a2:	b082      	sub	sp, #8
    15a4:	0004      	movs	r4, r0
    15a6:	000d      	movs	r5, r1
	ASSERT(descr && task);
    15a8:	2800      	cmp	r0, #0
    15aa:	d023      	beq.n	15f4 <timer_remove_task+0x54>
    15ac:	2900      	cmp	r1, #0
    15ae:	d01f      	beq.n	15f0 <timer_remove_task+0x50>
    15b0:	2001      	movs	r0, #1
    15b2:	2295      	movs	r2, #149	; 0x95
    15b4:	491d      	ldr	r1, [pc, #116]	; (162c <timer_remove_task+0x8c>)
    15b6:	4b1e      	ldr	r3, [pc, #120]	; (1630 <timer_remove_task+0x90>)
    15b8:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    15ba:	7e23      	ldrb	r3, [r4, #24]
    15bc:	2201      	movs	r2, #1
    15be:	4313      	orrs	r3, r2
    15c0:	b2db      	uxtb	r3, r3
    15c2:	7623      	strb	r3, [r4, #24]
	if (!is_list_element(&descr->tasks, task)) {
    15c4:	0026      	movs	r6, r4
    15c6:	3614      	adds	r6, #20
    15c8:	0029      	movs	r1, r5
    15ca:	0030      	movs	r0, r6
    15cc:	4b19      	ldr	r3, [pc, #100]	; (1634 <timer_remove_task+0x94>)
    15ce:	4798      	blx	r3
    15d0:	2800      	cmp	r0, #0
    15d2:	d011      	beq.n	15f8 <timer_remove_task+0x58>
	list_delete_element(&descr->tasks, task);
    15d4:	0029      	movs	r1, r5
    15d6:	0030      	movs	r0, r6
    15d8:	4b17      	ldr	r3, [pc, #92]	; (1638 <timer_remove_task+0x98>)
    15da:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    15dc:	7e23      	ldrb	r3, [r4, #24]
    15de:	2201      	movs	r2, #1
    15e0:	4393      	bics	r3, r2
    15e2:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    15e4:	7e23      	ldrb	r3, [r4, #24]
    15e6:	079b      	lsls	r3, r3, #30
    15e8:	d411      	bmi.n	160e <timer_remove_task+0x6e>
	return ERR_NONE;
    15ea:	2000      	movs	r0, #0
}
    15ec:	b002      	add	sp, #8
    15ee:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && task);
    15f0:	2000      	movs	r0, #0
    15f2:	e7de      	b.n	15b2 <timer_remove_task+0x12>
    15f4:	2000      	movs	r0, #0
    15f6:	e7dc      	b.n	15b2 <timer_remove_task+0x12>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    15f8:	7e23      	ldrb	r3, [r4, #24]
    15fa:	2201      	movs	r2, #1
    15fc:	4393      	bics	r3, r2
    15fe:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
    1600:	3299      	adds	r2, #153	; 0x99
    1602:	490a      	ldr	r1, [pc, #40]	; (162c <timer_remove_task+0x8c>)
    1604:	4b0a      	ldr	r3, [pc, #40]	; (1630 <timer_remove_task+0x90>)
    1606:	4798      	blx	r3
		return ERR_NOT_FOUND;
    1608:	200a      	movs	r0, #10
    160a:	4240      	negs	r0, r0
    160c:	e7ee      	b.n	15ec <timer_remove_task+0x4c>
		CRITICAL_SECTION_ENTER()
    160e:	a801      	add	r0, sp, #4
    1610:	4b0a      	ldr	r3, [pc, #40]	; (163c <timer_remove_task+0x9c>)
    1612:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    1614:	7e23      	ldrb	r3, [r4, #24]
    1616:	2202      	movs	r2, #2
    1618:	4393      	bics	r3, r2
    161a:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
    161c:	0020      	movs	r0, r4
    161e:	4b08      	ldr	r3, [pc, #32]	; (1640 <timer_remove_task+0xa0>)
    1620:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    1622:	a801      	add	r0, sp, #4
    1624:	4b07      	ldr	r3, [pc, #28]	; (1644 <timer_remove_task+0xa4>)
    1626:	4798      	blx	r3
	return ERR_NONE;
    1628:	2000      	movs	r0, #0
    162a:	e7df      	b.n	15ec <timer_remove_task+0x4c>
    162c:	0000577c 	.word	0x0000577c
    1630:	00001e29 	.word	0x00001e29
    1634:	00001e31 	.word	0x00001e31
    1638:	00001ecf 	.word	0x00001ecf
    163c:	000040cd 	.word	0x000040cd
    1640:	00002cb5 	.word	0x00002cb5
    1644:	000040db 	.word	0x000040db

00001648 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
    1648:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    164a:	3808      	subs	r0, #8

	descr->stat = 0;
    164c:	2300      	movs	r3, #0
    164e:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.tx_done) {
    1650:	6a43      	ldr	r3, [r0, #36]	; 0x24
    1652:	2b00      	cmp	r3, #0
    1654:	d000      	beq.n	1658 <usart_transmission_complete+0x10>
		descr->usart_cb.tx_done(descr);
    1656:	4798      	blx	r3
	}
}
    1658:	bd10      	pop	{r4, pc}

0000165a <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
    165a:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    165c:	3808      	subs	r0, #8

	descr->stat = 0;
    165e:	2300      	movs	r3, #0
    1660:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.error) {
    1662:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    1664:	2b00      	cmp	r3, #0
    1666:	d000      	beq.n	166a <usart_error+0x10>
		descr->usart_cb.error(descr);
    1668:	4798      	blx	r3
	}
}
    166a:	bd10      	pop	{r4, pc}

0000166c <usart_fill_rx_buffer>:
{
    166c:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    166e:	0004      	movs	r4, r0
	ringbuffer_put(&descr->rx, data);
    1670:	302c      	adds	r0, #44	; 0x2c
    1672:	4b04      	ldr	r3, [pc, #16]	; (1684 <usart_fill_rx_buffer+0x18>)
    1674:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
    1676:	6a23      	ldr	r3, [r4, #32]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    1678:	3c08      	subs	r4, #8
	if (descr->usart_cb.rx_done) {
    167a:	2b00      	cmp	r3, #0
    167c:	d001      	beq.n	1682 <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
    167e:	0020      	movs	r0, r4
    1680:	4798      	blx	r3
}
    1682:	bd10      	pop	{r4, pc}
    1684:	00001f99 	.word	0x00001f99

00001688 <usart_async_write>:
{
    1688:	b570      	push	{r4, r5, r6, lr}
    168a:	0004      	movs	r4, r0
    168c:	000e      	movs	r6, r1
    168e:	0015      	movs	r5, r2
	ASSERT(descr && buf && length);
    1690:	2800      	cmp	r0, #0
    1692:	d01d      	beq.n	16d0 <usart_async_write+0x48>
    1694:	2900      	cmp	r1, #0
    1696:	d01d      	beq.n	16d4 <usart_async_write+0x4c>
    1698:	2a00      	cmp	r2, #0
    169a:	d11d      	bne.n	16d8 <usart_async_write+0x50>
    169c:	2000      	movs	r0, #0
    169e:	223c      	movs	r2, #60	; 0x3c
    16a0:	32ff      	adds	r2, #255	; 0xff
    16a2:	4910      	ldr	r1, [pc, #64]	; (16e4 <usart_async_write+0x5c>)
    16a4:	4b10      	ldr	r3, [pc, #64]	; (16e8 <usart_async_write+0x60>)
    16a6:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
    16a8:	2344      	movs	r3, #68	; 0x44
    16aa:	5ae2      	ldrh	r2, [r4, r3]
    16ac:	3308      	adds	r3, #8
    16ae:	5ae3      	ldrh	r3, [r4, r3]
    16b0:	429a      	cmp	r2, r3
    16b2:	d113      	bne.n	16dc <usart_async_write+0x54>
	descr->tx_buffer        = (uint8_t *)buf;
    16b4:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
    16b6:	234c      	movs	r3, #76	; 0x4c
    16b8:	52e5      	strh	r5, [r4, r3]
	descr->tx_por           = 0;
    16ba:	2200      	movs	r2, #0
    16bc:	3b08      	subs	r3, #8
    16be:	52e2      	strh	r2, [r4, r3]
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    16c0:	3b43      	subs	r3, #67	; 0x43
    16c2:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    16c4:	0020      	movs	r0, r4
    16c6:	3008      	adds	r0, #8
    16c8:	4b08      	ldr	r3, [pc, #32]	; (16ec <usart_async_write+0x64>)
    16ca:	4798      	blx	r3
	return (int32_t)length;
    16cc:	0028      	movs	r0, r5
}
    16ce:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
    16d0:	2000      	movs	r0, #0
    16d2:	e7e4      	b.n	169e <usart_async_write+0x16>
    16d4:	2000      	movs	r0, #0
    16d6:	e7e2      	b.n	169e <usart_async_write+0x16>
    16d8:	2001      	movs	r0, #1
    16da:	e7e0      	b.n	169e <usart_async_write+0x16>
		return ERR_NO_RESOURCE;
    16dc:	201c      	movs	r0, #28
    16de:	4240      	negs	r0, r0
    16e0:	e7f5      	b.n	16ce <usart_async_write+0x46>
    16e2:	46c0      	nop			; (mov r8, r8)
    16e4:	00005794 	.word	0x00005794
    16e8:	00001e29 	.word	0x00001e29
    16ec:	00002605 	.word	0x00002605

000016f0 <usart_process_byte_sent>:
{
    16f0:	b570      	push	{r4, r5, r6, lr}
    16f2:	0004      	movs	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
    16f4:	0002      	movs	r2, r0
    16f6:	3a08      	subs	r2, #8
    16f8:	2344      	movs	r3, #68	; 0x44
    16fa:	5ad3      	ldrh	r3, [r2, r3]
    16fc:	214c      	movs	r1, #76	; 0x4c
    16fe:	5a52      	ldrh	r2, [r2, r1]
    1700:	4293      	cmp	r3, r2
    1702:	d00d      	beq.n	1720 <usart_process_byte_sent+0x30>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    1704:	0002      	movs	r2, r0
    1706:	6c01      	ldr	r1, [r0, #64]	; 0x40
    1708:	3a08      	subs	r2, #8
    170a:	1c5d      	adds	r5, r3, #1
    170c:	2044      	movs	r0, #68	; 0x44
    170e:	5215      	strh	r5, [r2, r0]
    1710:	5cc9      	ldrb	r1, [r1, r3]
    1712:	0020      	movs	r0, r4
    1714:	4b04      	ldr	r3, [pc, #16]	; (1728 <usart_process_byte_sent+0x38>)
    1716:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    1718:	0020      	movs	r0, r4
    171a:	4b04      	ldr	r3, [pc, #16]	; (172c <usart_process_byte_sent+0x3c>)
    171c:	4798      	blx	r3
}
    171e:	bd70      	pop	{r4, r5, r6, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
    1720:	4b03      	ldr	r3, [pc, #12]	; (1730 <usart_process_byte_sent+0x40>)
    1722:	4798      	blx	r3
}
    1724:	e7fb      	b.n	171e <usart_process_byte_sent+0x2e>
    1726:	46c0      	nop			; (mov r8, r8)
    1728:	000025fd 	.word	0x000025fd
    172c:	00002605 	.word	0x00002605
    1730:	0000260d 	.word	0x0000260d

00001734 <usart_async_read>:
{
    1734:	b5f0      	push	{r4, r5, r6, r7, lr}
    1736:	b085      	sub	sp, #20
    1738:	0004      	movs	r4, r0
    173a:	000d      	movs	r5, r1
    173c:	0016      	movs	r6, r2
	ASSERT(descr && buf && length);
    173e:	2800      	cmp	r0, #0
    1740:	d017      	beq.n	1772 <usart_async_read+0x3e>
    1742:	2900      	cmp	r1, #0
    1744:	d017      	beq.n	1776 <usart_async_read+0x42>
    1746:	2a00      	cmp	r2, #0
    1748:	d117      	bne.n	177a <usart_async_read+0x46>
    174a:	2000      	movs	r0, #0
    174c:	22ac      	movs	r2, #172	; 0xac
    174e:	0052      	lsls	r2, r2, #1
    1750:	4912      	ldr	r1, [pc, #72]	; (179c <usart_async_read+0x68>)
    1752:	4b13      	ldr	r3, [pc, #76]	; (17a0 <usart_async_read+0x6c>)
    1754:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    1756:	a803      	add	r0, sp, #12
    1758:	4b12      	ldr	r3, [pc, #72]	; (17a4 <usart_async_read+0x70>)
    175a:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    175c:	3434      	adds	r4, #52	; 0x34
    175e:	0020      	movs	r0, r4
    1760:	9401      	str	r4, [sp, #4]
    1762:	4b11      	ldr	r3, [pc, #68]	; (17a8 <usart_async_read+0x74>)
    1764:	4798      	blx	r3
    1766:	0007      	movs	r7, r0
	CRITICAL_SECTION_LEAVE()
    1768:	a803      	add	r0, sp, #12
    176a:	4b10      	ldr	r3, [pc, #64]	; (17ac <usart_async_read+0x78>)
    176c:	4798      	blx	r3
	uint16_t                       was_read = 0;
    176e:	2400      	movs	r4, #0
	while ((was_read < num) && (was_read < length)) {
    1770:	e00b      	b.n	178a <usart_async_read+0x56>
	ASSERT(descr && buf && length);
    1772:	2000      	movs	r0, #0
    1774:	e7ea      	b.n	174c <usart_async_read+0x18>
    1776:	2000      	movs	r0, #0
    1778:	e7e8      	b.n	174c <usart_async_read+0x18>
    177a:	2001      	movs	r0, #1
    177c:	e7e6      	b.n	174c <usart_async_read+0x18>
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    177e:	3401      	adds	r4, #1
    1780:	b2a4      	uxth	r4, r4
    1782:	1869      	adds	r1, r5, r1
    1784:	9801      	ldr	r0, [sp, #4]
    1786:	4b0a      	ldr	r3, [pc, #40]	; (17b0 <usart_async_read+0x7c>)
    1788:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    178a:	0021      	movs	r1, r4
    178c:	42a7      	cmp	r7, r4
    178e:	d901      	bls.n	1794 <usart_async_read+0x60>
    1790:	42b4      	cmp	r4, r6
    1792:	d3f4      	bcc.n	177e <usart_async_read+0x4a>
}
    1794:	0020      	movs	r0, r4
    1796:	b005      	add	sp, #20
    1798:	bdf0      	pop	{r4, r5, r6, r7, pc}
    179a:	46c0      	nop			; (mov r8, r8)
    179c:	00005794 	.word	0x00005794
    17a0:	00001e29 	.word	0x00001e29
    17a4:	000040cd 	.word	0x000040cd
    17a8:	00001fd9 	.word	0x00001fd9
    17ac:	000040db 	.word	0x000040db
    17b0:	00001f4d 	.word	0x00001f4d

000017b4 <usart_async_init>:
{
    17b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    17b6:	0004      	movs	r4, r0
    17b8:	000d      	movs	r5, r1
    17ba:	0016      	movs	r6, r2
    17bc:	001f      	movs	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    17be:	2800      	cmp	r0, #0
    17c0:	d026      	beq.n	1810 <usart_async_init+0x5c>
    17c2:	2900      	cmp	r1, #0
    17c4:	d026      	beq.n	1814 <usart_async_init+0x60>
    17c6:	2a00      	cmp	r2, #0
    17c8:	d026      	beq.n	1818 <usart_async_init+0x64>
    17ca:	2b00      	cmp	r3, #0
    17cc:	d126      	bne.n	181c <usart_async_init+0x68>
    17ce:	2000      	movs	r0, #0
    17d0:	223a      	movs	r2, #58	; 0x3a
    17d2:	4915      	ldr	r1, [pc, #84]	; (1828 <usart_async_init+0x74>)
    17d4:	4b15      	ldr	r3, [pc, #84]	; (182c <usart_async_init+0x78>)
    17d6:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    17d8:	0020      	movs	r0, r4
    17da:	3034      	adds	r0, #52	; 0x34
    17dc:	003a      	movs	r2, r7
    17de:	0031      	movs	r1, r6
    17e0:	4b13      	ldr	r3, [pc, #76]	; (1830 <usart_async_init+0x7c>)
    17e2:	4798      	blx	r3
    17e4:	2800      	cmp	r0, #0
    17e6:	d11b      	bne.n	1820 <usart_async_init+0x6c>
	init_status = _usart_async_init(&descr->device, hw);
    17e8:	0020      	movs	r0, r4
    17ea:	3008      	adds	r0, #8
    17ec:	0029      	movs	r1, r5
    17ee:	4b11      	ldr	r3, [pc, #68]	; (1834 <usart_async_init+0x80>)
    17f0:	4798      	blx	r3
	if (init_status) {
    17f2:	2800      	cmp	r0, #0
    17f4:	d10b      	bne.n	180e <usart_async_init+0x5a>
	descr->io.read  = usart_async_read;
    17f6:	4b10      	ldr	r3, [pc, #64]	; (1838 <usart_async_init+0x84>)
    17f8:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_async_write;
    17fa:	4b10      	ldr	r3, [pc, #64]	; (183c <usart_async_init+0x88>)
    17fc:	6023      	str	r3, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    17fe:	4b10      	ldr	r3, [pc, #64]	; (1840 <usart_async_init+0x8c>)
    1800:	60a3      	str	r3, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    1802:	4b10      	ldr	r3, [pc, #64]	; (1844 <usart_async_init+0x90>)
    1804:	60e3      	str	r3, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    1806:	4b10      	ldr	r3, [pc, #64]	; (1848 <usart_async_init+0x94>)
    1808:	6123      	str	r3, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    180a:	4b10      	ldr	r3, [pc, #64]	; (184c <usart_async_init+0x98>)
    180c:	6163      	str	r3, [r4, #20]
}
    180e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    1810:	2000      	movs	r0, #0
    1812:	e7dd      	b.n	17d0 <usart_async_init+0x1c>
    1814:	2000      	movs	r0, #0
    1816:	e7db      	b.n	17d0 <usart_async_init+0x1c>
    1818:	2000      	movs	r0, #0
    181a:	e7d9      	b.n	17d0 <usart_async_init+0x1c>
    181c:	2001      	movs	r0, #1
    181e:	e7d7      	b.n	17d0 <usart_async_init+0x1c>
		return ERR_INVALID_ARG;
    1820:	200d      	movs	r0, #13
    1822:	4240      	negs	r0, r0
    1824:	e7f3      	b.n	180e <usart_async_init+0x5a>
    1826:	46c0      	nop			; (mov r8, r8)
    1828:	00005794 	.word	0x00005794
    182c:	00001e29 	.word	0x00001e29
    1830:	00001f01 	.word	0x00001f01
    1834:	00002571 	.word	0x00002571
    1838:	00001735 	.word	0x00001735
    183c:	00001689 	.word	0x00001689
    1840:	000016f1 	.word	0x000016f1
    1844:	0000166d 	.word	0x0000166d
    1848:	00001649 	.word	0x00001649
    184c:	0000165b 	.word	0x0000165b

00001850 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    1850:	b510      	push	{r4, lr}
    1852:	0001      	movs	r1, r0
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    1854:	2000      	movs	r0, #0
    1856:	e001      	b.n	185c <_usb_d_find_ep+0xc>
    1858:	3001      	adds	r0, #1
    185a:	b240      	sxtb	r0, r0
    185c:	2803      	cmp	r0, #3
    185e:	dc0f      	bgt.n	1880 <_usb_d_find_ep+0x30>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    1860:	0142      	lsls	r2, r0, #5
    1862:	4b09      	ldr	r3, [pc, #36]	; (1888 <_usb_d_find_ep+0x38>)
    1864:	189b      	adds	r3, r3, r2
    1866:	785a      	ldrb	r2, [r3, #1]
    1868:	428a      	cmp	r2, r1
    186a:	d00b      	beq.n	1884 <_usb_d_find_ep+0x34>
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    186c:	0143      	lsls	r3, r0, #5
    186e:	4c06      	ldr	r4, [pc, #24]	; (1888 <_usb_d_find_ep+0x38>)
    1870:	5d1b      	ldrb	r3, [r3, r4]
    1872:	2b00      	cmp	r3, #0
    1874:	d1f0      	bne.n	1858 <_usb_d_find_ep+0x8>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    1876:	330f      	adds	r3, #15
    1878:	400b      	ands	r3, r1
    187a:	4293      	cmp	r3, r2
    187c:	d1ec      	bne.n	1858 <_usb_d_find_ep+0x8>
    187e:	e001      	b.n	1884 <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
    1880:	2001      	movs	r0, #1
    1882:	4240      	negs	r0, r0
}
    1884:	bd10      	pop	{r4, pc}
    1886:	46c0      	nop			; (mov r8, r8)
    1888:	200000d0 	.word	0x200000d0

0000188c <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    188c:	2000      	movs	r0, #0
    188e:	4770      	bx	lr

00001890 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    1890:	b570      	push	{r4, r5, r6, lr}
    1892:	0004      	movs	r4, r0
    1894:	000d      	movs	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
    1896:	4b08      	ldr	r3, [pc, #32]	; (18b8 <usb_d_cb_trans_more+0x28>)
    1898:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    189a:	0142      	lsls	r2, r0, #5
    189c:	4b07      	ldr	r3, [pc, #28]	; (18bc <usb_d_cb_trans_more+0x2c>)
    189e:	189b      	adds	r3, r3, r2
    18a0:	789b      	ldrb	r3, [r3, #2]
    18a2:	2b03      	cmp	r3, #3
    18a4:	d001      	beq.n	18aa <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
    18a6:	2000      	movs	r0, #0
}
    18a8:	bd70      	pop	{r4, r5, r6, pc}
		return ept->callbacks.more(ep, transfered);
    18aa:	4b04      	ldr	r3, [pc, #16]	; (18bc <usb_d_cb_trans_more+0x2c>)
    18ac:	1898      	adds	r0, r3, r2
    18ae:	6983      	ldr	r3, [r0, #24]
    18b0:	0029      	movs	r1, r5
    18b2:	0020      	movs	r0, r4
    18b4:	4798      	blx	r3
    18b6:	e7f7      	b.n	18a8 <usb_d_cb_trans_more+0x18>
    18b8:	00001851 	.word	0x00001851
    18bc:	200000d0 	.word	0x200000d0

000018c0 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    18c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    18c2:	b087      	sub	sp, #28
    18c4:	0005      	movs	r5, r0
    18c6:	000f      	movs	r7, r1
    18c8:	9201      	str	r2, [sp, #4]
	int8_t           ep_index = _usb_d_find_ep(ep);
    18ca:	4b4a      	ldr	r3, [pc, #296]	; (19f4 <_usb_d_cb_trans_done+0x134>)
    18cc:	4798      	blx	r3
    18ce:	0004      	movs	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    18d0:	0146      	lsls	r6, r0, #5
    18d2:	4a49      	ldr	r2, [pc, #292]	; (19f8 <_usb_d_cb_trans_done+0x138>)
    18d4:	1996      	adds	r6, r2, r6

	if (code == USB_TRANS_DONE) {
    18d6:	2f00      	cmp	r7, #0
    18d8:	d151      	bne.n	197e <_usb_d_cb_trans_done+0xbe>
		ept->xfer.hdr.status = USB_XFER_DONE;
    18da:	0013      	movs	r3, r2
    18dc:	0142      	lsls	r2, r0, #5
    18de:	2000      	movs	r0, #0
    18e0:	70f0      	strb	r0, [r6, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    18e2:	5cd3      	ldrb	r3, [r2, r3]
    18e4:	2b00      	cmp	r3, #0
    18e6:	d00e      	beq.n	1906 <_usb_d_cb_trans_done+0x46>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    18e8:	0162      	lsls	r2, r4, #5
    18ea:	4b43      	ldr	r3, [pc, #268]	; (19f8 <_usb_d_cb_trans_done+0x138>)
    18ec:	189b      	adds	r3, r3, r2
    18ee:	2201      	movs	r2, #1
    18f0:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    18f2:	0164      	lsls	r4, r4, #5
    18f4:	4b40      	ldr	r3, [pc, #256]	; (19f8 <_usb_d_cb_trans_done+0x138>)
    18f6:	191c      	adds	r4, r3, r4
    18f8:	69e3      	ldr	r3, [r4, #28]
    18fa:	78e1      	ldrb	r1, [r4, #3]
    18fc:	9a01      	ldr	r2, [sp, #4]
    18fe:	0028      	movs	r0, r5
    1900:	4798      	blx	r3
}
    1902:	b007      	add	sp, #28
    1904:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t state   = ept->xfer.hdr.state;
    1906:	78b3      	ldrb	r3, [r6, #2]
    1908:	240c      	movs	r4, #12
    190a:	5734      	ldrsb	r4, [r6, r4]
	if (state == USB_EP_S_X_DATA) {
    190c:	2b03      	cmp	r3, #3
    190e:	d008      	beq.n	1922 <_usb_d_cb_trans_done+0x62>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    1910:	0032      	movs	r2, r6
    1912:	320c      	adds	r2, #12
    1914:	7870      	ldrb	r0, [r6, #1]
    1916:	2100      	movs	r1, #0
    1918:	69f3      	ldr	r3, [r6, #28]
    191a:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    191c:	2302      	movs	r3, #2
    191e:	70b3      	strb	r3, [r6, #2]
    1920:	e7ef      	b.n	1902 <_usb_d_cb_trans_done+0x42>
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    1922:	7870      	ldrb	r0, [r6, #1]
    1924:	0032      	movs	r2, r6
    1926:	320c      	adds	r2, #12
    1928:	2101      	movs	r1, #1
    192a:	69f3      	ldr	r3, [r6, #28]
    192c:	4798      	blx	r3
		if (err) {
    192e:	2800      	cmp	r0, #0
    1930:	d010      	beq.n	1954 <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    1932:	2305      	movs	r3, #5
    1934:	70b3      	strb	r3, [r6, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    1936:	3b03      	subs	r3, #3
    1938:	70f3      	strb	r3, [r6, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    193a:	2c00      	cmp	r4, #0
    193c:	db08      	blt.n	1950 <_usb_d_cb_trans_done+0x90>
    193e:	7873      	ldrb	r3, [r6, #1]
    1940:	2080      	movs	r0, #128	; 0x80
    1942:	4240      	negs	r0, r0
    1944:	4318      	orrs	r0, r3
    1946:	b2c0      	uxtb	r0, r0
    1948:	2101      	movs	r1, #1
    194a:	4b2c      	ldr	r3, [pc, #176]	; (19fc <_usb_d_cb_trans_done+0x13c>)
    194c:	4798      	blx	r3
    194e:	e7d8      	b.n	1902 <_usb_d_cb_trans_done+0x42>
    1950:	7870      	ldrb	r0, [r6, #1]
    1952:	e7f9      	b.n	1948 <_usb_d_cb_trans_done+0x88>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    1954:	2304      	movs	r3, #4
    1956:	70b3      	strb	r3, [r6, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    1958:	7871      	ldrb	r1, [r6, #1]
	struct usb_d_transfer trans
    195a:	2200      	movs	r2, #0
    195c:	9203      	str	r2, [sp, #12]
    195e:	9204      	str	r2, [sp, #16]
    1960:	2c00      	cmp	r4, #0
    1962:	db09      	blt.n	1978 <_usb_d_cb_trans_done+0xb8>
    1964:	3b84      	subs	r3, #132	; 0x84
    1966:	430b      	orrs	r3, r1
    1968:	b2da      	uxtb	r2, r3
    196a:	a803      	add	r0, sp, #12
    196c:	7202      	strb	r2, [r0, #8]
    196e:	2301      	movs	r3, #1
    1970:	7243      	strb	r3, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
    1972:	4b23      	ldr	r3, [pc, #140]	; (1a00 <_usb_d_cb_trans_done+0x140>)
    1974:	4798      	blx	r3
    1976:	e7c4      	b.n	1902 <_usb_d_cb_trans_done+0x42>
	struct usb_d_transfer trans
    1978:	220f      	movs	r2, #15
    197a:	400a      	ands	r2, r1
    197c:	e7f5      	b.n	196a <_usb_d_cb_trans_done+0xaa>
	} else if (code == USB_TRANS_STALL) {
    197e:	2f01      	cmp	r7, #1
    1980:	d00a      	beq.n	1998 <_usb_d_cb_trans_done+0xd8>
	} else if (code == USB_TRANS_ABORT) {
    1982:	2f02      	cmp	r7, #2
    1984:	d01d      	beq.n	19c2 <_usb_d_cb_trans_done+0x102>
	} else if (code == USB_TRANS_RESET) {
    1986:	2f03      	cmp	r7, #3
    1988:	d02c      	beq.n	19e4 <_usb_d_cb_trans_done+0x124>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    198a:	0142      	lsls	r2, r0, #5
    198c:	4b1a      	ldr	r3, [pc, #104]	; (19f8 <_usb_d_cb_trans_done+0x138>)
    198e:	189b      	adds	r3, r3, r2
    1990:	2206      	movs	r2, #6
    1992:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    1994:	70da      	strb	r2, [r3, #3]
    1996:	e7ac      	b.n	18f2 <_usb_d_cb_trans_done+0x32>
		ept->xfer.hdr.status = USB_XFER_HALT;
    1998:	4b17      	ldr	r3, [pc, #92]	; (19f8 <_usb_d_cb_trans_done+0x138>)
    199a:	0142      	lsls	r2, r0, #5
    199c:	1899      	adds	r1, r3, r2
    199e:	2002      	movs	r0, #2
    19a0:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    19a2:	5cd3      	ldrb	r3, [r2, r3]
    19a4:	2b00      	cmp	r3, #0
    19a6:	d005      	beq.n	19b4 <_usb_d_cb_trans_done+0xf4>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    19a8:	0162      	lsls	r2, r4, #5
    19aa:	4b13      	ldr	r3, [pc, #76]	; (19f8 <_usb_d_cb_trans_done+0x138>)
    19ac:	189b      	adds	r3, r3, r2
    19ae:	2205      	movs	r2, #5
    19b0:	709a      	strb	r2, [r3, #2]
    19b2:	e79e      	b.n	18f2 <_usb_d_cb_trans_done+0x32>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    19b4:	2202      	movs	r2, #2
    19b6:	708a      	strb	r2, [r1, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    19b8:	2100      	movs	r1, #0
    19ba:	0028      	movs	r0, r5
    19bc:	4b0f      	ldr	r3, [pc, #60]	; (19fc <_usb_d_cb_trans_done+0x13c>)
    19be:	4798      	blx	r3
    19c0:	e797      	b.n	18f2 <_usb_d_cb_trans_done+0x32>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    19c2:	4b0d      	ldr	r3, [pc, #52]	; (19f8 <_usb_d_cb_trans_done+0x138>)
    19c4:	0142      	lsls	r2, r0, #5
    19c6:	1899      	adds	r1, r3, r2
    19c8:	2004      	movs	r0, #4
    19ca:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    19cc:	5cd3      	ldrb	r3, [r2, r3]
    19ce:	2b00      	cmp	r3, #0
    19d0:	d005      	beq.n	19de <_usb_d_cb_trans_done+0x11e>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    19d2:	0162      	lsls	r2, r4, #5
    19d4:	4b08      	ldr	r3, [pc, #32]	; (19f8 <_usb_d_cb_trans_done+0x138>)
    19d6:	189b      	adds	r3, r3, r2
    19d8:	2201      	movs	r2, #1
    19da:	709a      	strb	r2, [r3, #2]
    19dc:	e789      	b.n	18f2 <_usb_d_cb_trans_done+0x32>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    19de:	2302      	movs	r3, #2
    19e0:	708b      	strb	r3, [r1, #2]
			return;
    19e2:	e78e      	b.n	1902 <_usb_d_cb_trans_done+0x42>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    19e4:	0142      	lsls	r2, r0, #5
    19e6:	4b04      	ldr	r3, [pc, #16]	; (19f8 <_usb_d_cb_trans_done+0x138>)
    19e8:	189b      	adds	r3, r3, r2
    19ea:	2200      	movs	r2, #0
    19ec:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    19ee:	3205      	adds	r2, #5
    19f0:	70da      	strb	r2, [r3, #3]
    19f2:	e77e      	b.n	18f2 <_usb_d_cb_trans_done+0x32>
    19f4:	00001851 	.word	0x00001851
    19f8:	200000d0 	.word	0x200000d0
    19fc:	00003c3d 	.word	0x00003c3d
    1a00:	00003e0d 	.word	0x00003e0d

00001a04 <usb_d_cb_trans_setup>:
{
    1a04:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a06:	46c6      	mov	lr, r8
    1a08:	b500      	push	{lr}
    1a0a:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1a0c:	4b1f      	ldr	r3, [pc, #124]	; (1a8c <usb_d_cb_trans_setup+0x88>)
    1a0e:	4798      	blx	r3
    1a10:	0006      	movs	r6, r0
	uint8_t *        req      = ept->xfer.req;
    1a12:	0143      	lsls	r3, r0, #5
    1a14:	3308      	adds	r3, #8
    1a16:	4c1e      	ldr	r4, [pc, #120]	; (1a90 <usb_d_cb_trans_setup+0x8c>)
    1a18:	18e4      	adds	r4, r4, r3
    1a1a:	3404      	adds	r4, #4
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    1a1c:	0021      	movs	r1, r4
    1a1e:	0028      	movs	r0, r5
    1a20:	4b1c      	ldr	r3, [pc, #112]	; (1a94 <usb_d_cb_trans_setup+0x90>)
    1a22:	4798      	blx	r3
    1a24:	b2c0      	uxtb	r0, r0
	if (n != 8) {
    1a26:	2808      	cmp	r0, #8
    1a28:	d00c      	beq.n	1a44 <usb_d_cb_trans_setup+0x40>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1a2a:	2101      	movs	r1, #1
    1a2c:	0028      	movs	r0, r5
    1a2e:	4c1a      	ldr	r4, [pc, #104]	; (1a98 <usb_d_cb_trans_setup+0x94>)
    1a30:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    1a32:	2080      	movs	r0, #128	; 0x80
    1a34:	4240      	negs	r0, r0
    1a36:	4328      	orrs	r0, r5
    1a38:	b2c0      	uxtb	r0, r0
    1a3a:	2101      	movs	r1, #1
    1a3c:	47a0      	blx	r4
}
    1a3e:	bc04      	pop	{r2}
    1a40:	4690      	mov	r8, r2
    1a42:	bdf0      	pop	{r4, r5, r6, r7, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1a44:	2100      	movs	r1, #0
    1a46:	0028      	movs	r0, r5
    1a48:	4b13      	ldr	r3, [pc, #76]	; (1a98 <usb_d_cb_trans_setup+0x94>)
    1a4a:	4698      	mov	r8, r3
    1a4c:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    1a4e:	2780      	movs	r7, #128	; 0x80
    1a50:	427f      	negs	r7, r7
    1a52:	432f      	orrs	r7, r5
    1a54:	b2ff      	uxtb	r7, r7
    1a56:	2100      	movs	r1, #0
    1a58:	0038      	movs	r0, r7
    1a5a:	47c0      	blx	r8
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    1a5c:	0172      	lsls	r2, r6, #5
    1a5e:	4b0c      	ldr	r3, [pc, #48]	; (1a90 <usb_d_cb_trans_setup+0x8c>)
    1a60:	189b      	adds	r3, r3, r2
    1a62:	2201      	movs	r2, #1
    1a64:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    1a66:	695b      	ldr	r3, [r3, #20]
    1a68:	0021      	movs	r1, r4
    1a6a:	0028      	movs	r0, r5
    1a6c:	4798      	blx	r3
    1a6e:	2800      	cmp	r0, #0
    1a70:	d1e5      	bne.n	1a3e <usb_d_cb_trans_setup+0x3a>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    1a72:	0176      	lsls	r6, r6, #5
    1a74:	4b06      	ldr	r3, [pc, #24]	; (1a90 <usb_d_cb_trans_setup+0x8c>)
    1a76:	199e      	adds	r6, r3, r6
    1a78:	2305      	movs	r3, #5
    1a7a:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1a7c:	2101      	movs	r1, #1
    1a7e:	0028      	movs	r0, r5
    1a80:	4c05      	ldr	r4, [pc, #20]	; (1a98 <usb_d_cb_trans_setup+0x94>)
    1a82:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    1a84:	2101      	movs	r1, #1
    1a86:	0038      	movs	r0, r7
    1a88:	47a0      	blx	r4
    1a8a:	e7d8      	b.n	1a3e <usb_d_cb_trans_setup+0x3a>
    1a8c:	00001851 	.word	0x00001851
    1a90:	200000d0 	.word	0x200000d0
    1a94:	00003d95 	.word	0x00003d95
    1a98:	00003c3d 	.word	0x00003c3d

00001a9c <usb_d_init>:

int32_t usb_d_init(void)
{
    1a9c:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    1a9e:	4b12      	ldr	r3, [pc, #72]	; (1ae8 <usb_d_init+0x4c>)
    1aa0:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    1aa2:	2800      	cmp	r0, #0
    1aa4:	db1e      	blt.n	1ae4 <usb_d_init+0x48>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    1aa6:	2280      	movs	r2, #128	; 0x80
    1aa8:	2100      	movs	r1, #0
    1aaa:	4810      	ldr	r0, [pc, #64]	; (1aec <usb_d_init+0x50>)
    1aac:	4b10      	ldr	r3, [pc, #64]	; (1af0 <usb_d_init+0x54>)
    1aae:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    1ab0:	2200      	movs	r2, #0
    1ab2:	e00a      	b.n	1aca <usb_d_init+0x2e>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    1ab4:	0151      	lsls	r1, r2, #5
    1ab6:	4b0d      	ldr	r3, [pc, #52]	; (1aec <usb_d_init+0x50>)
    1ab8:	185b      	adds	r3, r3, r1
    1aba:	21ff      	movs	r1, #255	; 0xff
    1abc:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    1abe:	490d      	ldr	r1, [pc, #52]	; (1af4 <usb_d_init+0x58>)
    1ac0:	6159      	str	r1, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    1ac2:	6199      	str	r1, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    1ac4:	61d9      	str	r1, [r3, #28]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    1ac6:	3201      	adds	r2, #1
    1ac8:	b2d2      	uxtb	r2, r2
    1aca:	2a03      	cmp	r2, #3
    1acc:	d9f2      	bls.n	1ab4 <usb_d_init+0x18>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    1ace:	490a      	ldr	r1, [pc, #40]	; (1af8 <usb_d_init+0x5c>)
    1ad0:	2000      	movs	r0, #0
    1ad2:	4c0a      	ldr	r4, [pc, #40]	; (1afc <usb_d_init+0x60>)
    1ad4:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    1ad6:	490a      	ldr	r1, [pc, #40]	; (1b00 <usb_d_init+0x64>)
    1ad8:	2001      	movs	r0, #1
    1ada:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    1adc:	4909      	ldr	r1, [pc, #36]	; (1b04 <usb_d_init+0x68>)
    1ade:	2002      	movs	r0, #2
    1ae0:	47a0      	blx	r4
	return ERR_NONE;
    1ae2:	2000      	movs	r0, #0
}
    1ae4:	bd10      	pop	{r4, pc}
    1ae6:	46c0      	nop			; (mov r8, r8)
    1ae8:	00003609 	.word	0x00003609
    1aec:	200000d0 	.word	0x200000d0
    1af0:	000056ef 	.word	0x000056ef
    1af4:	0000188d 	.word	0x0000188d
    1af8:	00001a05 	.word	0x00001a05
    1afc:	00004051 	.word	0x00004051
    1b00:	00001891 	.word	0x00001891
    1b04:	000018c1 	.word	0x000018c1

00001b08 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    1b08:	b510      	push	{r4, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    1b0a:	4b01      	ldr	r3, [pc, #4]	; (1b10 <usb_d_register_callback+0x8>)
    1b0c:	4798      	blx	r3
}
    1b0e:	bd10      	pop	{r4, pc}
    1b10:	0000402d 	.word	0x0000402d

00001b14 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    1b14:	b510      	push	{r4, lr}
	return _usb_d_dev_enable();
    1b16:	4b01      	ldr	r3, [pc, #4]	; (1b1c <usb_d_enable+0x8>)
    1b18:	4798      	blx	r3
}
    1b1a:	bd10      	pop	{r4, pc}
    1b1c:	000036b1 	.word	0x000036b1

00001b20 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    1b20:	b510      	push	{r4, lr}
	_usb_d_dev_attach();
    1b22:	4b01      	ldr	r3, [pc, #4]	; (1b28 <usb_d_attach+0x8>)
    1b24:	4798      	blx	r3
}
    1b26:	bd10      	pop	{r4, pc}
    1b28:	00003701 	.word	0x00003701

00001b2c <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    1b2c:	b510      	push	{r4, lr}
	_usb_d_dev_set_address(addr);
    1b2e:	4b01      	ldr	r3, [pc, #4]	; (1b34 <usb_d_set_address+0x8>)
    1b30:	4798      	blx	r3
}
    1b32:	bd10      	pop	{r4, pc}
    1b34:	00003711 	.word	0x00003711

00001b38 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    1b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1b3a:	0005      	movs	r5, r0
    1b3c:	000e      	movs	r6, r1
    1b3e:	0017      	movs	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    1b40:	4b0f      	ldr	r3, [pc, #60]	; (1b80 <usb_d_ep_init+0x48>)
    1b42:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    1b44:	2800      	cmp	r0, #0
    1b46:	da14      	bge.n	1b72 <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    1b48:	20ff      	movs	r0, #255	; 0xff
    1b4a:	4b0d      	ldr	r3, [pc, #52]	; (1b80 <usb_d_ep_init+0x48>)
    1b4c:	4798      	blx	r3
    1b4e:	1e04      	subs	r4, r0, #0
		if (ep_index < 0) {
    1b50:	db12      	blt.n	1b78 <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    1b52:	003a      	movs	r2, r7
    1b54:	0031      	movs	r1, r6
    1b56:	0028      	movs	r0, r5
    1b58:	4b0a      	ldr	r3, [pc, #40]	; (1b84 <usb_d_ep_init+0x4c>)
    1b5a:	4798      	blx	r3
	if (rc < 0) {
    1b5c:	2800      	cmp	r0, #0
    1b5e:	db07      	blt.n	1b70 <usb_d_ep_init+0x38>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    1b60:	4a09      	ldr	r2, [pc, #36]	; (1b88 <usb_d_ep_init+0x50>)
    1b62:	0164      	lsls	r4, r4, #5
    1b64:	1913      	adds	r3, r2, r4
    1b66:	705d      	strb	r5, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    1b68:	2303      	movs	r3, #3
    1b6a:	401e      	ands	r6, r3
    1b6c:	54a6      	strb	r6, [r4, r2]
	return ERR_NONE;
    1b6e:	2000      	movs	r0, #0
}
    1b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    1b72:	2014      	movs	r0, #20
    1b74:	4240      	negs	r0, r0
    1b76:	e7fb      	b.n	1b70 <usb_d_ep_init+0x38>
			return -USB_ERR_ALLOC_FAIL;
    1b78:	2015      	movs	r0, #21
    1b7a:	4240      	negs	r0, r0
    1b7c:	e7f8      	b.n	1b70 <usb_d_ep_init+0x38>
    1b7e:	46c0      	nop			; (mov r8, r8)
    1b80:	00001851 	.word	0x00001851
    1b84:	00003725 	.word	0x00003725
    1b88:	200000d0 	.word	0x200000d0

00001b8c <usb_d_ep0_init>:
{
    1b8c:	b510      	push	{r4, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    1b8e:	b282      	uxth	r2, r0
    1b90:	2100      	movs	r1, #0
    1b92:	2000      	movs	r0, #0
    1b94:	4b01      	ldr	r3, [pc, #4]	; (1b9c <usb_d_ep0_init+0x10>)
    1b96:	4798      	blx	r3
}
    1b98:	bd10      	pop	{r4, pc}
    1b9a:	46c0      	nop			; (mov r8, r8)
    1b9c:	00001b39 	.word	0x00001b39

00001ba0 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    1ba0:	b570      	push	{r4, r5, r6, lr}
    1ba2:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1ba4:	4b06      	ldr	r3, [pc, #24]	; (1bc0 <usb_d_ep_deinit+0x20>)
    1ba6:	4798      	blx	r3
    1ba8:	1e04      	subs	r4, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    1baa:	db07      	blt.n	1bbc <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    1bac:	0028      	movs	r0, r5
    1bae:	4b05      	ldr	r3, [pc, #20]	; (1bc4 <usb_d_ep_deinit+0x24>)
    1bb0:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    1bb2:	0164      	lsls	r4, r4, #5
    1bb4:	4b04      	ldr	r3, [pc, #16]	; (1bc8 <usb_d_ep_deinit+0x28>)
    1bb6:	191c      	adds	r4, r3, r4
    1bb8:	23ff      	movs	r3, #255	; 0xff
    1bba:	7063      	strb	r3, [r4, #1]
}
    1bbc:	bd70      	pop	{r4, r5, r6, pc}
    1bbe:	46c0      	nop			; (mov r8, r8)
    1bc0:	00001851 	.word	0x00001851
    1bc4:	00003871 	.word	0x00003871
    1bc8:	200000d0 	.word	0x200000d0

00001bcc <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    1bcc:	b570      	push	{r4, r5, r6, lr}
    1bce:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1bd0:	4b0f      	ldr	r3, [pc, #60]	; (1c10 <usb_d_ep_enable+0x44>)
    1bd2:	4798      	blx	r3
    1bd4:	1e04      	subs	r4, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    1bd6:	db17      	blt.n	1c08 <usb_d_ep_enable+0x3c>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    1bd8:	0143      	lsls	r3, r0, #5
    1bda:	4a0e      	ldr	r2, [pc, #56]	; (1c14 <usb_d_ep_enable+0x48>)
    1bdc:	5c9b      	ldrb	r3, [r3, r2]
    1bde:	2b00      	cmp	r3, #0
    1be0:	d10a      	bne.n	1bf8 <usb_d_ep_enable+0x2c>
    1be2:	2102      	movs	r1, #2
    1be4:	0162      	lsls	r2, r4, #5
    1be6:	4b0b      	ldr	r3, [pc, #44]	; (1c14 <usb_d_ep_enable+0x48>)
    1be8:	189b      	adds	r3, r3, r2
    1bea:	7099      	strb	r1, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    1bec:	0028      	movs	r0, r5
    1bee:	4b0a      	ldr	r3, [pc, #40]	; (1c18 <usb_d_ep_enable+0x4c>)
    1bf0:	4798      	blx	r3
	if (rc < 0) {
    1bf2:	2800      	cmp	r0, #0
    1bf4:	db02      	blt.n	1bfc <usb_d_ep_enable+0x30>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    1bf6:	bd70      	pop	{r4, r5, r6, pc}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    1bf8:	2101      	movs	r1, #1
    1bfa:	e7f3      	b.n	1be4 <usb_d_ep_enable+0x18>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    1bfc:	0164      	lsls	r4, r4, #5
    1bfe:	4b05      	ldr	r3, [pc, #20]	; (1c14 <usb_d_ep_enable+0x48>)
    1c00:	191c      	adds	r4, r3, r4
    1c02:	2300      	movs	r3, #0
    1c04:	70a3      	strb	r3, [r4, #2]
    1c06:	e7f6      	b.n	1bf6 <usb_d_ep_enable+0x2a>
		return -USB_ERR_PARAM;
    1c08:	2012      	movs	r0, #18
    1c0a:	4240      	negs	r0, r0
    1c0c:	e7f3      	b.n	1bf6 <usb_d_ep_enable+0x2a>
    1c0e:	46c0      	nop			; (mov r8, r8)
    1c10:	00001851 	.word	0x00001851
    1c14:	200000d0 	.word	0x200000d0
    1c18:	00003935 	.word	0x00003935

00001c1c <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    1c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c1e:	46d6      	mov	lr, sl
    1c20:	464f      	mov	r7, r9
    1c22:	4646      	mov	r6, r8
    1c24:	b5c0      	push	{r6, r7, lr}
    1c26:	b086      	sub	sp, #24
    1c28:	0005      	movs	r5, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    1c2a:	7a06      	ldrb	r6, [r0, #8]
    1c2c:	0030      	movs	r0, r6
    1c2e:	4b3f      	ldr	r3, [pc, #252]	; (1d2c <usb_d_ep_transfer+0x110>)
    1c30:	4798      	blx	r3
    1c32:	0007      	movs	r7, r0
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    1c34:	09f6      	lsrs	r6, r6, #7
    1c36:	7a6b      	ldrb	r3, [r5, #9]
    1c38:	1e5a      	subs	r2, r3, #1
    1c3a:	4193      	sbcs	r3, r2
    1c3c:	b2dc      	uxtb	r4, r3
	uint32_t              len = xfer->size;
    1c3e:	686b      	ldr	r3, [r5, #4]
    1c40:	4698      	mov	r8, r3
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    1c42:	2800      	cmp	r0, #0
    1c44:	db6b      	blt.n	1d1e <usb_d_ep_transfer+0x102>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    1c46:	a804      	add	r0, sp, #16
    1c48:	4b39      	ldr	r3, [pc, #228]	; (1d30 <usb_d_ep_transfer+0x114>)
    1c4a:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    1c4c:	017a      	lsls	r2, r7, #5
    1c4e:	4b39      	ldr	r3, [pc, #228]	; (1d34 <usb_d_ep_transfer+0x118>)
    1c50:	189b      	adds	r3, r3, r2
    1c52:	789a      	ldrb	r2, [r3, #2]
    1c54:	2317      	movs	r3, #23
    1c56:	446b      	add	r3, sp
    1c58:	701a      	strb	r2, [r3, #0]
	if (state == USB_EP_S_IDLE) {
    1c5a:	781b      	ldrb	r3, [r3, #0]
    1c5c:	2b01      	cmp	r3, #1
    1c5e:	d00e      	beq.n	1c7e <usb_d_ep_transfer+0x62>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    1c60:	a804      	add	r0, sp, #16
    1c62:	4b35      	ldr	r3, [pc, #212]	; (1d38 <usb_d_ep_transfer+0x11c>)
    1c64:	4798      	blx	r3
		switch (state) {
    1c66:	2317      	movs	r3, #23
    1c68:	446b      	add	r3, sp
    1c6a:	781b      	ldrb	r3, [r3, #0]
    1c6c:	b2db      	uxtb	r3, r3
    1c6e:	2b05      	cmp	r3, #5
    1c70:	d02b      	beq.n	1cca <usb_d_ep_transfer+0xae>
    1c72:	2b06      	cmp	r3, #6
    1c74:	d056      	beq.n	1d24 <usb_d_ep_transfer+0x108>
    1c76:	2b00      	cmp	r3, #0
    1c78:	d029      	beq.n	1cce <usb_d_ep_transfer+0xb2>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    1c7a:	2001      	movs	r0, #1
    1c7c:	e01f      	b.n	1cbe <usb_d_ep_transfer+0xa2>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    1c7e:	4b2d      	ldr	r3, [pc, #180]	; (1d34 <usb_d_ep_transfer+0x118>)
    1c80:	4699      	mov	r9, r3
    1c82:	017b      	lsls	r3, r7, #5
    1c84:	469a      	mov	sl, r3
    1c86:	464b      	mov	r3, r9
    1c88:	4453      	add	r3, sl
    1c8a:	2203      	movs	r2, #3
    1c8c:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    1c8e:	a804      	add	r0, sp, #16
    1c90:	4b29      	ldr	r3, [pc, #164]	; (1d38 <usb_d_ep_transfer+0x11c>)
    1c92:	4798      	blx	r3
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1c94:	464b      	mov	r3, r9
    1c96:	4652      	mov	r2, sl
    1c98:	5cd3      	ldrb	r3, [r2, r3]
    1c9a:	2b00      	cmp	r3, #0
    1c9c:	d01a      	beq.n	1cd4 <usb_d_ep_transfer+0xb8>
				zlp = false;
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1c9e:	7a29      	ldrb	r1, [r5, #8]
    1ca0:	682b      	ldr	r3, [r5, #0]
    1ca2:	9301      	str	r3, [sp, #4]
	struct usb_d_transfer trans
    1ca4:	4643      	mov	r3, r8
    1ca6:	9302      	str	r3, [sp, #8]
    1ca8:	2e00      	cmp	r6, #0
    1caa:	d035      	beq.n	1d18 <usb_d_ep_transfer+0xfc>
    1cac:	2280      	movs	r2, #128	; 0x80
    1cae:	4252      	negs	r2, r2
    1cb0:	430a      	orrs	r2, r1
    1cb2:	b2d2      	uxtb	r2, r2
    1cb4:	a801      	add	r0, sp, #4
    1cb6:	7202      	strb	r2, [r0, #8]
    1cb8:	7244      	strb	r4, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
    1cba:	4b20      	ldr	r3, [pc, #128]	; (1d3c <usb_d_ep_transfer+0x120>)
    1cbc:	4798      	blx	r3
	return rc;
}
    1cbe:	b006      	add	sp, #24
    1cc0:	bc1c      	pop	{r2, r3, r4}
    1cc2:	4690      	mov	r8, r2
    1cc4:	4699      	mov	r9, r3
    1cc6:	46a2      	mov	sl, r4
    1cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return USB_HALTED;
    1cca:	2002      	movs	r0, #2
    1ccc:	e7f7      	b.n	1cbe <usb_d_ep_transfer+0xa2>
			return -USB_ERR_FUNC;
    1cce:	2013      	movs	r0, #19
    1cd0:	4240      	negs	r0, r0
    1cd2:	e7f4      	b.n	1cbe <usb_d_ep_transfer+0xa2>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    1cd4:	017b      	lsls	r3, r7, #5
    1cd6:	4a17      	ldr	r2, [pc, #92]	; (1d34 <usb_d_ep_transfer+0x118>)
    1cd8:	18d2      	adds	r2, r2, r3
    1cda:	7c93      	ldrb	r3, [r2, #18]
    1cdc:	7cd4      	ldrb	r4, [r2, #19]
    1cde:	0224      	lsls	r4, r4, #8
    1ce0:	191b      	adds	r3, r3, r4
    1ce2:	b29b      	uxth	r3, r3
		if (req_len == 0) {
    1ce4:	2b00      	cmp	r3, #0
    1ce6:	d106      	bne.n	1cf6 <usb_d_ep_transfer+0xda>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    1ce8:	2304      	movs	r3, #4
    1cea:	7093      	strb	r3, [r2, #2]
			len                 = 0;
    1cec:	2300      	movs	r3, #0
    1cee:	4698      	mov	r8, r3
			zlp                 = true;
    1cf0:	2401      	movs	r4, #1
			dir                 = true;
    1cf2:	2601      	movs	r6, #1
    1cf4:	e7d3      	b.n	1c9e <usb_d_ep_transfer+0x82>
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    1cf6:	017f      	lsls	r7, r7, #5
    1cf8:	4a0e      	ldr	r2, [pc, #56]	; (1d34 <usb_d_ep_transfer+0x118>)
    1cfa:	19d7      	adds	r7, r2, r7
    1cfc:	220c      	movs	r2, #12
    1cfe:	56ba      	ldrsb	r2, [r7, r2]
    1d00:	0fd6      	lsrs	r6, r2, #31
			if (len > req_len) {
    1d02:	4598      	cmp	r8, r3
    1d04:	d900      	bls.n	1d08 <usb_d_ep_transfer+0xec>
				len = req_len;
    1d06:	4698      	mov	r8, r3
			if (dir) {
    1d08:	2a00      	cmp	r2, #0
    1d0a:	db01      	blt.n	1d10 <usb_d_ep_transfer+0xf4>
				zlp = false;
    1d0c:	2400      	movs	r4, #0
    1d0e:	e7c6      	b.n	1c9e <usb_d_ep_transfer+0x82>
				zlp = (req_len > len);
    1d10:	4598      	cmp	r8, r3
    1d12:	419b      	sbcs	r3, r3
    1d14:	425c      	negs	r4, r3
    1d16:	e7c2      	b.n	1c9e <usb_d_ep_transfer+0x82>
	struct usb_d_transfer trans
    1d18:	220f      	movs	r2, #15
    1d1a:	400a      	ands	r2, r1
    1d1c:	e7ca      	b.n	1cb4 <usb_d_ep_transfer+0x98>
		return -USB_ERR_PARAM;
    1d1e:	2012      	movs	r0, #18
    1d20:	4240      	negs	r0, r0
    1d22:	e7cc      	b.n	1cbe <usb_d_ep_transfer+0xa2>
			return -USB_ERROR;
    1d24:	2010      	movs	r0, #16
    1d26:	4240      	negs	r0, r0
    1d28:	e7c9      	b.n	1cbe <usb_d_ep_transfer+0xa2>
    1d2a:	46c0      	nop			; (mov r8, r8)
    1d2c:	00001851 	.word	0x00001851
    1d30:	000040cd 	.word	0x000040cd
    1d34:	200000d0 	.word	0x200000d0
    1d38:	000040db 	.word	0x000040db
    1d3c:	00003e0d 	.word	0x00003e0d

00001d40 <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    1d40:	b570      	push	{r4, r5, r6, lr}
    1d42:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1d44:	4b07      	ldr	r3, [pc, #28]	; (1d64 <usb_d_ep_abort+0x24>)
    1d46:	4798      	blx	r3
    1d48:	1e04      	subs	r4, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    1d4a:	db09      	blt.n	1d60 <usb_d_ep_abort+0x20>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    1d4c:	0028      	movs	r0, r5
    1d4e:	4b06      	ldr	r3, [pc, #24]	; (1d68 <usb_d_ep_abort+0x28>)
    1d50:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    1d52:	0164      	lsls	r4, r4, #5
    1d54:	4b05      	ldr	r3, [pc, #20]	; (1d6c <usb_d_ep_abort+0x2c>)
    1d56:	191c      	adds	r4, r3, r4
    1d58:	2301      	movs	r3, #1
    1d5a:	70a3      	strb	r3, [r4, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    1d5c:	3303      	adds	r3, #3
    1d5e:	70e3      	strb	r3, [r4, #3]
}
    1d60:	bd70      	pop	{r4, r5, r6, pc}
    1d62:	46c0      	nop			; (mov r8, r8)
    1d64:	00001851 	.word	0x00001851
    1d68:	00003fe9 	.word	0x00003fe9
    1d6c:	200000d0 	.word	0x200000d0

00001d70 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    1d70:	b570      	push	{r4, r5, r6, lr}
    1d72:	0004      	movs	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    1d74:	2900      	cmp	r1, #0
    1d76:	d005      	beq.n	1d84 <usb_d_ep_halt+0x14>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    1d78:	2901      	cmp	r1, #1
    1d7a:	d024      	beq.n	1dc6 <usb_d_ep_halt+0x56>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    1d7c:	2102      	movs	r1, #2
    1d7e:	4b13      	ldr	r3, [pc, #76]	; (1dcc <usb_d_ep_halt+0x5c>)
    1d80:	4798      	blx	r3
	}
}
    1d82:	bd70      	pop	{r4, r5, r6, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    1d84:	4b12      	ldr	r3, [pc, #72]	; (1dd0 <usb_d_ep_halt+0x60>)
    1d86:	4798      	blx	r3
    1d88:	1e05      	subs	r5, r0, #0
	if (ep_index < 0) {
    1d8a:	db19      	blt.n	1dc0 <usb_d_ep_halt+0x50>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    1d8c:	2102      	movs	r1, #2
    1d8e:	0020      	movs	r0, r4
    1d90:	4b0e      	ldr	r3, [pc, #56]	; (1dcc <usb_d_ep_halt+0x5c>)
    1d92:	4798      	blx	r3
    1d94:	2800      	cmp	r0, #0
    1d96:	d0f4      	beq.n	1d82 <usb_d_ep_halt+0x12>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1d98:	2100      	movs	r1, #0
    1d9a:	0020      	movs	r0, r4
    1d9c:	4b0b      	ldr	r3, [pc, #44]	; (1dcc <usb_d_ep_halt+0x5c>)
    1d9e:	4798      	blx	r3
		if (rc < 0) {
    1da0:	2800      	cmp	r0, #0
    1da2:	dbee      	blt.n	1d82 <usb_d_ep_halt+0x12>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    1da4:	016d      	lsls	r5, r5, #5
    1da6:	4b0b      	ldr	r3, [pc, #44]	; (1dd4 <usb_d_ep_halt+0x64>)
    1da8:	195d      	adds	r5, r3, r5
    1daa:	2301      	movs	r3, #1
    1dac:	70ab      	strb	r3, [r5, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    1dae:	3302      	adds	r3, #2
    1db0:	70eb      	strb	r3, [r5, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    1db2:	69eb      	ldr	r3, [r5, #28]
    1db4:	2200      	movs	r2, #0
    1db6:	2103      	movs	r1, #3
    1db8:	0020      	movs	r0, r4
    1dba:	4798      	blx	r3
	return ERR_NONE;
    1dbc:	2000      	movs	r0, #0
    1dbe:	e7e0      	b.n	1d82 <usb_d_ep_halt+0x12>
		return -USB_ERR_PARAM;
    1dc0:	2012      	movs	r0, #18
    1dc2:	4240      	negs	r0, r0
		return _usb_d_ep_halt_clr(ep);
    1dc4:	e7dd      	b.n	1d82 <usb_d_ep_halt+0x12>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1dc6:	4b01      	ldr	r3, [pc, #4]	; (1dcc <usb_d_ep_halt+0x5c>)
    1dc8:	4798      	blx	r3
    1dca:	e7da      	b.n	1d82 <usb_d_ep_halt+0x12>
    1dcc:	00003c3d 	.word	0x00003c3d
    1dd0:	00001851 	.word	0x00001851
    1dd4:	200000d0 	.word	0x200000d0

00001dd8 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    1dd8:	b570      	push	{r4, r5, r6, lr}
    1dda:	000d      	movs	r5, r1
    1ddc:	0014      	movs	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    1dde:	4b0f      	ldr	r3, [pc, #60]	; (1e1c <usb_d_ep_register_callback+0x44>)
    1de0:	4798      	blx	r3
    1de2:	0003      	movs	r3, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    1de4:	2c00      	cmp	r4, #0
    1de6:	d008      	beq.n	1dfa <usb_d_ep_register_callback+0x22>
	if (ep_index < 0) {
    1de8:	2b00      	cmp	r3, #0
    1dea:	db05      	blt.n	1df8 <usb_d_ep_register_callback+0x20>
		return;
	}
	switch (type) {
    1dec:	2d01      	cmp	r5, #1
    1dee:	d00b      	beq.n	1e08 <usb_d_ep_register_callback+0x30>
    1df0:	2d00      	cmp	r5, #0
    1df2:	d004      	beq.n	1dfe <usb_d_ep_register_callback+0x26>
    1df4:	2d02      	cmp	r5, #2
    1df6:	d00c      	beq.n	1e12 <usb_d_ep_register_callback+0x3a>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
	}
}
    1df8:	bd70      	pop	{r4, r5, r6, pc}
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    1dfa:	4c09      	ldr	r4, [pc, #36]	; (1e20 <usb_d_ep_register_callback+0x48>)
    1dfc:	e7f4      	b.n	1de8 <usb_d_ep_register_callback+0x10>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    1dfe:	0140      	lsls	r0, r0, #5
    1e00:	4b08      	ldr	r3, [pc, #32]	; (1e24 <usb_d_ep_register_callback+0x4c>)
    1e02:	1818      	adds	r0, r3, r0
    1e04:	6144      	str	r4, [r0, #20]
		break;
    1e06:	e7f7      	b.n	1df8 <usb_d_ep_register_callback+0x20>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    1e08:	0140      	lsls	r0, r0, #5
    1e0a:	4b06      	ldr	r3, [pc, #24]	; (1e24 <usb_d_ep_register_callback+0x4c>)
    1e0c:	1818      	adds	r0, r3, r0
    1e0e:	6184      	str	r4, [r0, #24]
		break;
    1e10:	e7f2      	b.n	1df8 <usb_d_ep_register_callback+0x20>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    1e12:	0140      	lsls	r0, r0, #5
    1e14:	4b03      	ldr	r3, [pc, #12]	; (1e24 <usb_d_ep_register_callback+0x4c>)
    1e16:	1818      	adds	r0, r3, r0
    1e18:	61c4      	str	r4, [r0, #28]
		break;
    1e1a:	e7ed      	b.n	1df8 <usb_d_ep_register_callback+0x20>
    1e1c:	00001851 	.word	0x00001851
    1e20:	0000188d 	.word	0x0000188d
    1e24:	200000d0 	.word	0x200000d0

00001e28 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    1e28:	2800      	cmp	r0, #0
    1e2a:	d100      	bne.n	1e2e <assert+0x6>
		__asm("BKPT #0");
    1e2c:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    1e2e:	4770      	bx	lr

00001e30 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    1e30:	6803      	ldr	r3, [r0, #0]
    1e32:	2b00      	cmp	r3, #0
    1e34:	d003      	beq.n	1e3e <is_list_element+0xe>
		if (it == element) {
    1e36:	428b      	cmp	r3, r1
    1e38:	d003      	beq.n	1e42 <is_list_element+0x12>
	for (it = list->head; it; it = it->next) {
    1e3a:	681b      	ldr	r3, [r3, #0]
    1e3c:	e7f9      	b.n	1e32 <is_list_element+0x2>
			return true;
		}
	}

	return false;
    1e3e:	2000      	movs	r0, #0
}
    1e40:	4770      	bx	lr
			return true;
    1e42:	2001      	movs	r0, #1
    1e44:	e7fc      	b.n	1e40 <is_list_element+0x10>
	...

00001e48 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    1e48:	b570      	push	{r4, r5, r6, lr}
    1e4a:	0004      	movs	r4, r0
    1e4c:	000d      	movs	r5, r1
	ASSERT(!is_list_element(list, element));
    1e4e:	4b06      	ldr	r3, [pc, #24]	; (1e68 <list_insert_as_head+0x20>)
    1e50:	4798      	blx	r3
    1e52:	2301      	movs	r3, #1
    1e54:	4058      	eors	r0, r3
    1e56:	b2c0      	uxtb	r0, r0
    1e58:	2239      	movs	r2, #57	; 0x39
    1e5a:	4904      	ldr	r1, [pc, #16]	; (1e6c <list_insert_as_head+0x24>)
    1e5c:	4b04      	ldr	r3, [pc, #16]	; (1e70 <list_insert_as_head+0x28>)
    1e5e:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    1e60:	6823      	ldr	r3, [r4, #0]
    1e62:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    1e64:	6025      	str	r5, [r4, #0]
}
    1e66:	bd70      	pop	{r4, r5, r6, pc}
    1e68:	00001e31 	.word	0x00001e31
    1e6c:	000057b4 	.word	0x000057b4
    1e70:	00001e29 	.word	0x00001e29

00001e74 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    1e74:	6803      	ldr	r3, [r0, #0]
    1e76:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    1e78:	6001      	str	r1, [r0, #0]
}
    1e7a:	4770      	bx	lr

00001e7c <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    1e7c:	b570      	push	{r4, r5, r6, lr}
    1e7e:	0005      	movs	r5, r0
    1e80:	000e      	movs	r6, r1
	struct list_element *it = list->head;
    1e82:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    1e84:	4b0a      	ldr	r3, [pc, #40]	; (1eb0 <list_insert_at_end+0x34>)
    1e86:	4798      	blx	r3
    1e88:	2301      	movs	r3, #1
    1e8a:	4058      	eors	r0, r3
    1e8c:	b2c0      	uxtb	r0, r0
    1e8e:	224f      	movs	r2, #79	; 0x4f
    1e90:	4908      	ldr	r1, [pc, #32]	; (1eb4 <list_insert_at_end+0x38>)
    1e92:	4b09      	ldr	r3, [pc, #36]	; (1eb8 <list_insert_at_end+0x3c>)
    1e94:	4798      	blx	r3

	if (!list->head) {
    1e96:	682b      	ldr	r3, [r5, #0]
    1e98:	2b00      	cmp	r3, #0
    1e9a:	d103      	bne.n	1ea4 <list_insert_at_end+0x28>
		list->head                             = (struct list_element *)element;
    1e9c:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    1e9e:	6033      	str	r3, [r6, #0]
		return;
    1ea0:	e005      	b.n	1eae <list_insert_at_end+0x32>
	}

	while (it->next) {
		it = it->next;
    1ea2:	001c      	movs	r4, r3
	while (it->next) {
    1ea4:	6823      	ldr	r3, [r4, #0]
    1ea6:	2b00      	cmp	r3, #0
    1ea8:	d1fb      	bne.n	1ea2 <list_insert_at_end+0x26>
	}
	it->next                               = (struct list_element *)element;
    1eaa:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    1eac:	6033      	str	r3, [r6, #0]
}
    1eae:	bd70      	pop	{r4, r5, r6, pc}
    1eb0:	00001e31 	.word	0x00001e31
    1eb4:	000057b4 	.word	0x000057b4
    1eb8:	00001e29 	.word	0x00001e29

00001ebc <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    1ebc:	6803      	ldr	r3, [r0, #0]
    1ebe:	2b00      	cmp	r3, #0
    1ec0:	d003      	beq.n	1eca <list_remove_head+0xe>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    1ec2:	681a      	ldr	r2, [r3, #0]
    1ec4:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
    1ec6:	0018      	movs	r0, r3
	}

	return NULL;
}
    1ec8:	4770      	bx	lr
	return NULL;
    1eca:	2000      	movs	r0, #0
    1ecc:	e7fc      	b.n	1ec8 <list_remove_head+0xc>

00001ece <list_delete_element>:
/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
	if (!element) {
    1ece:	2900      	cmp	r1, #0
    1ed0:	d012      	beq.n	1ef8 <list_delete_element+0x2a>
		return false;
	}

	if (list->head == element) {
    1ed2:	6803      	ldr	r3, [r0, #0]
    1ed4:	4299      	cmp	r1, r3
    1ed6:	d104      	bne.n	1ee2 <list_delete_element+0x14>
		list->head = list->head->next;
    1ed8:	681b      	ldr	r3, [r3, #0]
    1eda:	6003      	str	r3, [r0, #0]
		return true;
    1edc:	2001      	movs	r0, #1
    1ede:	e00a      	b.n	1ef6 <list_delete_element+0x28>
	} else {
		struct list_element *it = list->head;

		while (it && it->next != element) {
			it = it->next;
    1ee0:	0013      	movs	r3, r2
		while (it && it->next != element) {
    1ee2:	2b00      	cmp	r3, #0
    1ee4:	d002      	beq.n	1eec <list_delete_element+0x1e>
    1ee6:	681a      	ldr	r2, [r3, #0]
    1ee8:	4291      	cmp	r1, r2
    1eea:	d1f9      	bne.n	1ee0 <list_delete_element+0x12>
		}
		if (it) {
    1eec:	2b00      	cmp	r3, #0
    1eee:	d005      	beq.n	1efc <list_delete_element+0x2e>
			it->next = ((struct list_element *)element)->next;
    1ef0:	680a      	ldr	r2, [r1, #0]
    1ef2:	601a      	str	r2, [r3, #0]
			return true;
    1ef4:	2001      	movs	r0, #1
		}
	}

	return false;
}
    1ef6:	4770      	bx	lr
		return false;
    1ef8:	2000      	movs	r0, #0
    1efa:	e7fc      	b.n	1ef6 <list_delete_element+0x28>
	return false;
    1efc:	2000      	movs	r0, #0
    1efe:	e7fa      	b.n	1ef6 <list_delete_element+0x28>

00001f00 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    1f00:	b570      	push	{r4, r5, r6, lr}
    1f02:	0004      	movs	r4, r0
    1f04:	000e      	movs	r6, r1
    1f06:	0015      	movs	r5, r2
	ASSERT(rb && buf && size);
    1f08:	2800      	cmp	r0, #0
    1f0a:	d012      	beq.n	1f32 <ringbuffer_init+0x32>
    1f0c:	2900      	cmp	r1, #0
    1f0e:	d012      	beq.n	1f36 <ringbuffer_init+0x36>
    1f10:	2a00      	cmp	r2, #0
    1f12:	d112      	bne.n	1f3a <ringbuffer_init+0x3a>
    1f14:	2000      	movs	r0, #0
    1f16:	2228      	movs	r2, #40	; 0x28
    1f18:	490a      	ldr	r1, [pc, #40]	; (1f44 <ringbuffer_init+0x44>)
    1f1a:	4b0b      	ldr	r3, [pc, #44]	; (1f48 <ringbuffer_init+0x48>)
    1f1c:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    1f1e:	1e6b      	subs	r3, r5, #1
    1f20:	422b      	tst	r3, r5
    1f22:	d10c      	bne.n	1f3e <ringbuffer_init+0x3e>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    1f24:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    1f26:	2300      	movs	r3, #0
    1f28:	60a3      	str	r3, [r4, #8]
	rb->write_index = rb->read_index;
    1f2a:	60e3      	str	r3, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    1f2c:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    1f2e:	2000      	movs	r0, #0
}
    1f30:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    1f32:	2000      	movs	r0, #0
    1f34:	e7ef      	b.n	1f16 <ringbuffer_init+0x16>
    1f36:	2000      	movs	r0, #0
    1f38:	e7ed      	b.n	1f16 <ringbuffer_init+0x16>
    1f3a:	2001      	movs	r0, #1
    1f3c:	e7eb      	b.n	1f16 <ringbuffer_init+0x16>
		return ERR_INVALID_ARG;
    1f3e:	200d      	movs	r0, #13
    1f40:	4240      	negs	r0, r0
    1f42:	e7f5      	b.n	1f30 <ringbuffer_init+0x30>
    1f44:	000057d4 	.word	0x000057d4
    1f48:	00001e29 	.word	0x00001e29

00001f4c <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    1f4c:	b570      	push	{r4, r5, r6, lr}
    1f4e:	0004      	movs	r4, r0
    1f50:	000d      	movs	r5, r1
	ASSERT(rb && data);
    1f52:	2800      	cmp	r0, #0
    1f54:	d016      	beq.n	1f84 <ringbuffer_get+0x38>
    1f56:	2900      	cmp	r1, #0
    1f58:	d012      	beq.n	1f80 <ringbuffer_get+0x34>
    1f5a:	2001      	movs	r0, #1
    1f5c:	2240      	movs	r2, #64	; 0x40
    1f5e:	490c      	ldr	r1, [pc, #48]	; (1f90 <ringbuffer_get+0x44>)
    1f60:	4b0c      	ldr	r3, [pc, #48]	; (1f94 <ringbuffer_get+0x48>)
    1f62:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    1f64:	68a3      	ldr	r3, [r4, #8]
    1f66:	68e2      	ldr	r2, [r4, #12]
    1f68:	429a      	cmp	r2, r3
    1f6a:	d00d      	beq.n	1f88 <ringbuffer_get+0x3c>
		*data = rb->buf[rb->read_index & rb->size];
    1f6c:	6862      	ldr	r2, [r4, #4]
    1f6e:	4013      	ands	r3, r2
    1f70:	6822      	ldr	r2, [r4, #0]
    1f72:	5cd3      	ldrb	r3, [r2, r3]
    1f74:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    1f76:	68a3      	ldr	r3, [r4, #8]
    1f78:	3301      	adds	r3, #1
    1f7a:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    1f7c:	2000      	movs	r0, #0
	}

	return ERR_NOT_FOUND;
}
    1f7e:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && data);
    1f80:	2000      	movs	r0, #0
    1f82:	e7eb      	b.n	1f5c <ringbuffer_get+0x10>
    1f84:	2000      	movs	r0, #0
    1f86:	e7e9      	b.n	1f5c <ringbuffer_get+0x10>
	return ERR_NOT_FOUND;
    1f88:	200a      	movs	r0, #10
    1f8a:	4240      	negs	r0, r0
    1f8c:	e7f7      	b.n	1f7e <ringbuffer_get+0x32>
    1f8e:	46c0      	nop			; (mov r8, r8)
    1f90:	000057d4 	.word	0x000057d4
    1f94:	00001e29 	.word	0x00001e29

00001f98 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    1f98:	b570      	push	{r4, r5, r6, lr}
    1f9a:	0004      	movs	r4, r0
    1f9c:	000d      	movs	r5, r1
	ASSERT(rb);
    1f9e:	1e43      	subs	r3, r0, #1
    1fa0:	4198      	sbcs	r0, r3
    1fa2:	b2c0      	uxtb	r0, r0
    1fa4:	2251      	movs	r2, #81	; 0x51
    1fa6:	490a      	ldr	r1, [pc, #40]	; (1fd0 <ringbuffer_put+0x38>)
    1fa8:	4b0a      	ldr	r3, [pc, #40]	; (1fd4 <ringbuffer_put+0x3c>)
    1faa:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    1fac:	6863      	ldr	r3, [r4, #4]
    1fae:	68e2      	ldr	r2, [r4, #12]
    1fb0:	4013      	ands	r3, r2
    1fb2:	6822      	ldr	r2, [r4, #0]
    1fb4:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    1fb6:	68e3      	ldr	r3, [r4, #12]
    1fb8:	68a2      	ldr	r2, [r4, #8]
    1fba:	1a9a      	subs	r2, r3, r2
    1fbc:	6861      	ldr	r1, [r4, #4]
    1fbe:	428a      	cmp	r2, r1
    1fc0:	d901      	bls.n	1fc6 <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
    1fc2:	1a59      	subs	r1, r3, r1
    1fc4:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
    1fc6:	3301      	adds	r3, #1
    1fc8:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    1fca:	2000      	movs	r0, #0
    1fcc:	bd70      	pop	{r4, r5, r6, pc}
    1fce:	46c0      	nop			; (mov r8, r8)
    1fd0:	000057d4 	.word	0x000057d4
    1fd4:	00001e29 	.word	0x00001e29

00001fd8 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    1fd8:	b510      	push	{r4, lr}
    1fda:	0004      	movs	r4, r0
	ASSERT(rb);
    1fdc:	1e43      	subs	r3, r0, #1
    1fde:	4198      	sbcs	r0, r3
    1fe0:	b2c0      	uxtb	r0, r0
    1fe2:	2267      	movs	r2, #103	; 0x67
    1fe4:	4903      	ldr	r1, [pc, #12]	; (1ff4 <ringbuffer_num+0x1c>)
    1fe6:	4b04      	ldr	r3, [pc, #16]	; (1ff8 <ringbuffer_num+0x20>)
    1fe8:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    1fea:	68e0      	ldr	r0, [r4, #12]
    1fec:	68a3      	ldr	r3, [r4, #8]
    1fee:	1ac0      	subs	r0, r0, r3
}
    1ff0:	bd10      	pop	{r4, pc}
    1ff2:	46c0      	nop			; (mov r8, r8)
    1ff4:	000057d4 	.word	0x000057d4
    1ff8:	00001e29 	.word	0x00001e29

00001ffc <_irq_set>:
/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
	NVIC_SetPendingIRQ((IRQn_Type)n);
    1ffc:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1ffe:	2b00      	cmp	r3, #0
    2000:	db07      	blt.n	2012 <STACK_SIZE+0x12>
  {
    NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2002:	231f      	movs	r3, #31
    2004:	4018      	ands	r0, r3
    2006:	3b1e      	subs	r3, #30
    2008:	4083      	lsls	r3, r0
    200a:	2280      	movs	r2, #128	; 0x80
    200c:	0052      	lsls	r2, r2, #1
    200e:	4901      	ldr	r1, [pc, #4]	; (2014 <STACK_SIZE+0x14>)
    2010:	508b      	str	r3, [r1, r2]
}
    2012:	4770      	bx	lr
    2014:	e000e100 	.word	0xe000e100

00002018 <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 8:
		return (ms * (freq / 100000)) * 100;
    2018:	0103      	lsls	r3, r0, #4
    201a:	1a1b      	subs	r3, r3, r0
    201c:	015a      	lsls	r2, r3, #5
    201e:	2064      	movs	r0, #100	; 0x64
    2020:	4350      	muls	r0, r2
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    2022:	4770      	bx	lr

00002024 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    2024:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    2026:	4b06      	ldr	r3, [pc, #24]	; (2040 <_init_chip+0x1c>)
    2028:	685a      	ldr	r2, [r3, #4]
    202a:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
    202c:	4b05      	ldr	r3, [pc, #20]	; (2044 <_init_chip+0x20>)
    202e:	4798      	blx	r3
	_sysctrl_init_sources();
    2030:	4b05      	ldr	r3, [pc, #20]	; (2048 <_init_chip+0x24>)
    2032:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
    2034:	4b05      	ldr	r3, [pc, #20]	; (204c <_init_chip+0x28>)
    2036:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    2038:	20ff      	movs	r0, #255	; 0xff
    203a:	4b05      	ldr	r3, [pc, #20]	; (2050 <_init_chip+0x2c>)
    203c:	4798      	blx	r3
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
    203e:	bd10      	pop	{r4, pc}
    2040:	41004000 	.word	0x41004000
    2044:	00002361 	.word	0x00002361
    2048:	00002979 	.word	0x00002979
    204c:	000029d5 	.word	0x000029d5
    2050:	0000228d 	.word	0x0000228d

00002054 <_dac_init>:
typedef uint8_t  hri_dac_intflag_reg_t;
typedef uint8_t  hri_dac_status_reg_t;

static inline void hri_dac_wait_for_sync(const void *const hw)
{
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    2054:	79c3      	ldrb	r3, [r0, #7]
    2056:	09db      	lsrs	r3, r3, #7
    2058:	d1fc      	bne.n	2054 <_dac_init>
    205a:	79c3      	ldrb	r3, [r0, #7]
    205c:	09db      	lsrs	r3, r3, #7
    205e:	d1fc      	bne.n	205a <_dac_init+0x6>

static inline hri_dac_ctrla_reg_t hri_dac_get_CTRLA_reg(const void *const hw, hri_dac_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_dac_wait_for_sync(hw);
	tmp = ((Dac *)hw)->CTRLA.reg;
    2060:	7803      	ldrb	r3, [r0, #0]
 * param[in] hw The pointer to DAC hardware instance
 */
static int32_t _dac_init(void *const hw)
{
	hri_dac_wait_for_sync(hw);
	if (hri_dac_get_CTRLA_reg(hw, DAC_CTRLA_ENABLE)) {
    2062:	079b      	lsls	r3, r3, #30
    2064:	d507      	bpl.n	2076 <_dac_init+0x22>
}

static inline void hri_dac_write_CTRLA_reg(const void *const hw, hri_dac_ctrla_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->CTRLA.reg = data;
    2066:	2300      	movs	r3, #0
    2068:	7003      	strb	r3, [r0, #0]
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    206a:	79c3      	ldrb	r3, [r0, #7]
    206c:	09db      	lsrs	r3, r3, #7
    206e:	d1fc      	bne.n	206a <_dac_init+0x16>
    2070:	79c3      	ldrb	r3, [r0, #7]
    2072:	09db      	lsrs	r3, r3, #7
    2074:	d1fc      	bne.n	2070 <_dac_init+0x1c>
	((Dac *)hw)->CTRLA.reg = data;
    2076:	2301      	movs	r3, #1
    2078:	7003      	strb	r3, [r0, #0]
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    207a:	79c3      	ldrb	r3, [r0, #7]
    207c:	09db      	lsrs	r3, r3, #7
    207e:	d1fc      	bne.n	207a <_dac_init+0x26>
    2080:	79c3      	ldrb	r3, [r0, #7]
    2082:	09db      	lsrs	r3, r3, #7
    2084:	d1fc      	bne.n	2080 <_dac_init+0x2c>
}

static inline void hri_dac_write_EVCTRL_reg(const void *const hw, hri_dac_evctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->EVCTRL.reg = data;
    2086:	7083      	strb	r3, [r0, #2]
	((Dac *)hw)->CTRLB.reg = data;
    2088:	2241      	movs	r2, #65	; 0x41
    208a:	7042      	strb	r2, [r0, #1]
	((Dac *)hw)->CTRLA.reg = data;
    208c:	7003      	strb	r3, [r0, #0]
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    208e:	79c3      	ldrb	r3, [r0, #7]
    2090:	09db      	lsrs	r3, r3, #7
    2092:	d1fc      	bne.n	208e <_dac_init+0x3a>

	hri_dac_write_EVCTRL_reg(hw, _dac.ev_ctrl);
	hri_dac_write_CTRLB_reg(hw, _dac.ctrlb);
	hri_dac_write_CTRLA_reg(hw, _dac.ctrla);
	return ERR_NONE;
}
    2094:	2000      	movs	r0, #0
    2096:	4770      	bx	lr

00002098 <_dac_sync_init>:
{
    2098:	b570      	push	{r4, r5, r6, lr}
    209a:	0005      	movs	r5, r0
    209c:	000c      	movs	r4, r1
	ASSERT(device);
    209e:	1e43      	subs	r3, r0, #1
    20a0:	4198      	sbcs	r0, r3
    20a2:	b2c0      	uxtb	r0, r0
    20a4:	2249      	movs	r2, #73	; 0x49
    20a6:	4904      	ldr	r1, [pc, #16]	; (20b8 <_dac_sync_init+0x20>)
    20a8:	4b04      	ldr	r3, [pc, #16]	; (20bc <_dac_sync_init+0x24>)
    20aa:	4798      	blx	r3
	device->hw = hw;
    20ac:	602c      	str	r4, [r5, #0]
	return _dac_init(device->hw);
    20ae:	0020      	movs	r0, r4
    20b0:	4b03      	ldr	r3, [pc, #12]	; (20c0 <_dac_sync_init+0x28>)
    20b2:	4798      	blx	r3
}
    20b4:	bd70      	pop	{r4, r5, r6, pc}
    20b6:	46c0      	nop			; (mov r8, r8)
    20b8:	000057f8 	.word	0x000057f8
    20bc:	00001e29 	.word	0x00001e29
    20c0:	00002055 	.word	0x00002055

000020c4 <_dac_sync_enable_channel>:
 * \brief Enable DAC Channel
 */
void _dac_sync_enable_channel(struct _dac_sync_device *const device, const uint8_t ch)
{
	(void)ch;
	hri_dac_set_CTRLA_ENABLE_bit(device->hw);
    20c4:	6802      	ldr	r2, [r0, #0]
	((Dac *)hw)->CTRLA.reg |= DAC_CTRLA_ENABLE;
    20c6:	7813      	ldrb	r3, [r2, #0]
    20c8:	2102      	movs	r1, #2
    20ca:	430b      	orrs	r3, r1
    20cc:	b2db      	uxtb	r3, r3
    20ce:	7013      	strb	r3, [r2, #0]
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    20d0:	79d3      	ldrb	r3, [r2, #7]
    20d2:	09db      	lsrs	r3, r3, #7
    20d4:	d1fc      	bne.n	20d0 <_dac_sync_enable_channel+0xc>
}
    20d6:	4770      	bx	lr

000020d8 <_dac_sync_is_channel_enable>:
}

bool _dac_sync_is_channel_enable(struct _dac_sync_device *const device, const uint8_t ch)
{
	(void)ch;
	return hri_dac_get_CTRLA_ENABLE_bit(device->hw);
    20d8:	6802      	ldr	r2, [r0, #0]
    20da:	79d3      	ldrb	r3, [r2, #7]
    20dc:	09db      	lsrs	r3, r3, #7
    20de:	d1fc      	bne.n	20da <_dac_sync_is_channel_enable+0x2>
	tmp = ((Dac *)hw)->CTRLA.reg;
    20e0:	7813      	ldrb	r3, [r2, #0]
	tmp = (tmp & DAC_CTRLA_ENABLE) >> DAC_CTRLA_ENABLE_Pos;
    20e2:	085b      	lsrs	r3, r3, #1
	return (bool)tmp;
    20e4:	2001      	movs	r0, #1
    20e6:	4018      	ands	r0, r3
}
    20e8:	4770      	bx	lr

000020ea <_dac_sync_write_data>:
 * \brief write synchronous DAC data for output
 */
void _dac_sync_write_data(struct _dac_sync_device *const device, const uint16_t data, const uint8_t ch)
{
	(void)ch;
	hri_dac_write_DATA_reg(device->hw, data);
    20ea:	6802      	ldr	r2, [r0, #0]
}

static inline void hri_dac_write_DATA_reg(const void *const hw, hri_dac_data_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->DATA.reg = data;
    20ec:	8111      	strh	r1, [r2, #8]
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    20ee:	79d3      	ldrb	r3, [r2, #7]
    20f0:	09db      	lsrs	r3, r3, #7
    20f2:	d1fc      	bne.n	20ee <_dac_sync_write_data+0x4>
}
    20f4:	4770      	bx	lr
	...

000020f8 <_ext_irq_init>:
typedef uint8_t  hri_eic_nmiflag_reg_t;
typedef uint8_t  hri_eic_status_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw)
{
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    20f8:	4b20      	ldr	r3, [pc, #128]	; (217c <_ext_irq_init+0x84>)
    20fa:	785b      	ldrb	r3, [r3, #1]
    20fc:	09db      	lsrs	r3, r3, #7
    20fe:	d1fb      	bne.n	20f8 <_ext_irq_init>
    2100:	4b1e      	ldr	r3, [pc, #120]	; (217c <_ext_irq_init+0x84>)
    2102:	785b      	ldrb	r3, [r3, #1]
    2104:	09db      	lsrs	r3, r3, #7
    2106:	d1fb      	bne.n	2100 <_ext_irq_init+0x8>

static inline hri_eic_ctrl_reg_t hri_eic_get_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw);
	tmp = ((Eic *)hw)->CTRL.reg;
    2108:	4b1c      	ldr	r3, [pc, #112]	; (217c <_ext_irq_init+0x84>)
    210a:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC);
	if (hri_eic_get_CTRL_reg(EIC, EIC_CTRL_ENABLE)) {
    210c:	079b      	lsls	r3, r3, #30
    210e:	d50a      	bpl.n	2126 <_ext_irq_init+0x2e>
}

static inline void hri_eic_write_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRL.reg = data;
    2110:	2200      	movs	r2, #0
    2112:	4b1a      	ldr	r3, [pc, #104]	; (217c <_ext_irq_init+0x84>)
    2114:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    2116:	4b19      	ldr	r3, [pc, #100]	; (217c <_ext_irq_init+0x84>)
    2118:	785b      	ldrb	r3, [r3, #1]
    211a:	09db      	lsrs	r3, r3, #7
    211c:	d1fb      	bne.n	2116 <_ext_irq_init+0x1e>
    211e:	4b17      	ldr	r3, [pc, #92]	; (217c <_ext_irq_init+0x84>)
    2120:	785b      	ldrb	r3, [r3, #1]
    2122:	09db      	lsrs	r3, r3, #7
    2124:	d1fb      	bne.n	211e <_ext_irq_init+0x26>
	((Eic *)hw)->CTRL.reg = data;
    2126:	2201      	movs	r2, #1
    2128:	4b14      	ldr	r3, [pc, #80]	; (217c <_ext_irq_init+0x84>)
    212a:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    212c:	4b13      	ldr	r3, [pc, #76]	; (217c <_ext_irq_init+0x84>)
    212e:	785b      	ldrb	r3, [r3, #1]
    2130:	09db      	lsrs	r3, r3, #7
    2132:	d1fb      	bne.n	212c <_ext_irq_init+0x34>
    2134:	4b11      	ldr	r3, [pc, #68]	; (217c <_ext_irq_init+0x84>)
    2136:	785b      	ldrb	r3, [r3, #1]
    2138:	09db      	lsrs	r3, r3, #7
    213a:	d1fb      	bne.n	2134 <_ext_irq_init+0x3c>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    213c:	4b0f      	ldr	r3, [pc, #60]	; (217c <_ext_irq_init+0x84>)
    213e:	2200      	movs	r2, #0
    2140:	709a      	strb	r2, [r3, #2]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    2142:	605a      	str	r2, [r3, #4]
}

static inline void hri_eic_write_WAKEUP_reg(const void *const hw, hri_eic_wakeup_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->WAKEUP.reg = data;
    2144:	615a      	str	r2, [r3, #20]
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    2146:	619a      	str	r2, [r3, #24]
    2148:	61da      	str	r2, [r3, #28]
	((Eic *)hw)->CTRL.reg |= EIC_CTRL_ENABLE;
    214a:	781a      	ldrb	r2, [r3, #0]
    214c:	2102      	movs	r1, #2
    214e:	430a      	orrs	r2, r1
    2150:	b2d2      	uxtb	r2, r2
    2152:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    2154:	4b09      	ldr	r3, [pc, #36]	; (217c <_ext_irq_init+0x84>)
    2156:	785b      	ldrb	r3, [r3, #1]
    2158:	09db      	lsrs	r3, r3, #7
    215a:	d1fb      	bne.n	2154 <_ext_irq_init+0x5c>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    215c:	4b08      	ldr	r3, [pc, #32]	; (2180 <_ext_irq_init+0x88>)
    215e:	2210      	movs	r2, #16
    2160:	2180      	movs	r1, #128	; 0x80
    2162:	505a      	str	r2, [r3, r1]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2164:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2168:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    216c:	3101      	adds	r1, #1
    216e:	31ff      	adds	r1, #255	; 0xff
    2170:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2172:	601a      	str	r2, [r3, #0]

	NVIC_DisableIRQ(EIC_IRQn);
	NVIC_ClearPendingIRQ(EIC_IRQn);
	NVIC_EnableIRQ(EIC_IRQn);

	callback = cb;
    2174:	4b03      	ldr	r3, [pc, #12]	; (2184 <_ext_irq_init+0x8c>)
    2176:	6018      	str	r0, [r3, #0]

	return ERR_NONE;
}
    2178:	2000      	movs	r0, #0
    217a:	4770      	bx	lr
    217c:	40001800 	.word	0x40001800
    2180:	e000e100 	.word	0xe000e100
    2184:	20000150 	.word	0x20000150

00002188 <_ext_irq_enable>:
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
	uint8_t extint = INVALID_EXTINT_NUMBER;
	uint8_t i      = 0;
    2188:	2300      	movs	r3, #0

	for (; i < ARRAY_SIZE(_map); i++) {
    218a:	2b00      	cmp	r3, #0
    218c:	d00b      	beq.n	21a6 <_ext_irq_enable+0x1e>
	uint8_t extint = INVALID_EXTINT_NUMBER;
    218e:	22ff      	movs	r2, #255	; 0xff
		if (_map[i].pin == pin) {
			extint = _map[i].extint;
			break;
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    2190:	2aff      	cmp	r2, #255	; 0xff
    2192:	d017      	beq.n	21c4 <_ext_irq_enable+0x3c>
		return ERR_INVALID_ARG;
	}

	if (enable) {
    2194:	2900      	cmp	r1, #0
    2196:	d10f      	bne.n	21b8 <_ext_irq_enable+0x30>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    2198:	2301      	movs	r3, #1
    219a:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENCLR.reg = mask;
    219c:	4a0b      	ldr	r2, [pc, #44]	; (21cc <_ext_irq_enable+0x44>)
    219e:	6093      	str	r3, [r2, #8]
	((Eic *)hw)->INTFLAG.reg = mask;
    21a0:	6113      	str	r3, [r2, #16]
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
	}

	return ERR_NONE;
    21a2:	2000      	movs	r0, #0
}
    21a4:	4770      	bx	lr
		if (_map[i].pin == pin) {
    21a6:	280e      	cmp	r0, #14
    21a8:	d002      	beq.n	21b0 <_ext_irq_enable+0x28>
	for (; i < ARRAY_SIZE(_map); i++) {
    21aa:	3301      	adds	r3, #1
    21ac:	b2db      	uxtb	r3, r3
    21ae:	e7ec      	b.n	218a <_ext_irq_enable+0x2>
			extint = _map[i].extint;
    21b0:	00da      	lsls	r2, r3, #3
    21b2:	4b07      	ldr	r3, [pc, #28]	; (21d0 <_ext_irq_enable+0x48>)
    21b4:	5cd2      	ldrb	r2, [r2, r3]
			break;
    21b6:	e7eb      	b.n	2190 <_ext_irq_enable+0x8>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    21b8:	2301      	movs	r3, #1
    21ba:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENSET.reg = mask;
    21bc:	4a03      	ldr	r2, [pc, #12]	; (21cc <_ext_irq_enable+0x44>)
    21be:	60d3      	str	r3, [r2, #12]
	return ERR_NONE;
    21c0:	2000      	movs	r0, #0
    21c2:	e7ef      	b.n	21a4 <_ext_irq_enable+0x1c>
		return ERR_INVALID_ARG;
    21c4:	200d      	movs	r0, #13
    21c6:	4240      	negs	r0, r0
    21c8:	e7ec      	b.n	21a4 <_ext_irq_enable+0x1c>
    21ca:	46c0      	nop			; (mov r8, r8)
    21cc:	40001800 	.word	0x40001800
    21d0:	00005810 	.word	0x00005810

000021d4 <EIC_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_Handler(void)
{
    21d4:	b570      	push	{r4, r5, r6, lr}
    21d6:	b082      	sub	sp, #8
	return ((Eic *)hw)->INTFLAG.reg;
    21d8:	4b26      	ldr	r3, [pc, #152]	; (2274 <EIC_Handler+0xa0>)
    21da:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
    21dc:	68d9      	ldr	r1, [r3, #12]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
    21de:	400a      	ands	r2, r1
    21e0:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    21e2:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    21e4:	611a      	str	r2, [r3, #16]

	ASSERT(callback);
    21e6:	4b24      	ldr	r3, [pc, #144]	; (2278 <EIC_Handler+0xa4>)
    21e8:	6818      	ldr	r0, [r3, #0]
    21ea:	1e43      	subs	r3, r0, #1
    21ec:	4198      	sbcs	r0, r3
    21ee:	b2c0      	uxtb	r0, r0
    21f0:	22d2      	movs	r2, #210	; 0xd2
    21f2:	4922      	ldr	r1, [pc, #136]	; (227c <EIC_Handler+0xa8>)
    21f4:	4b22      	ldr	r3, [pc, #136]	; (2280 <EIC_Handler+0xac>)
    21f6:	4798      	blx	r3
	uint32_t          pin = INVALID_PIN_NUMBER;
    21f8:	2501      	movs	r5, #1
    21fa:	426d      	negs	r5, r5

	while (flags) {
    21fc:	e02e      	b.n	225c <EIC_Handler+0x88>
					break;
				}
				if (_map[middle].extint < pos) {
					lower = middle + 1;
				} else {
					upper = middle - 1;
    21fe:	3901      	subs	r1, #1
    2200:	b2ce      	uxtb	r6, r1
			while (upper >= lower) {
    2202:	42b0      	cmp	r0, r6
    2204:	d80e      	bhi.n	2224 <EIC_Handler+0x50>
				middle = (upper + lower) >> 1;
    2206:	1832      	adds	r2, r6, r0
    2208:	1052      	asrs	r2, r2, #1
    220a:	b2d1      	uxtb	r1, r2
				if (_map[middle].extint == pos) {
    220c:	23ff      	movs	r3, #255	; 0xff
    220e:	4013      	ands	r3, r2
    2210:	00db      	lsls	r3, r3, #3
    2212:	4a1c      	ldr	r2, [pc, #112]	; (2284 <EIC_Handler+0xb0>)
    2214:	5c9b      	ldrb	r3, [r3, r2]
    2216:	42a3      	cmp	r3, r4
    2218:	d003      	beq.n	2222 <EIC_Handler+0x4e>
				if (_map[middle].extint < pos) {
    221a:	daf0      	bge.n	21fe <EIC_Handler+0x2a>
					lower = middle + 1;
    221c:	3101      	adds	r1, #1
    221e:	b2c8      	uxtb	r0, r1
    2220:	e7ef      	b.n	2202 <EIC_Handler+0x2e>
					pin = _map[middle].pin;
    2222:	250e      	movs	r5, #14
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    2224:	1c6b      	adds	r3, r5, #1
    2226:	d003      	beq.n	2230 <EIC_Handler+0x5c>
				callback(pin);
    2228:	4b13      	ldr	r3, [pc, #76]	; (2278 <EIC_Handler+0xa4>)
    222a:	681b      	ldr	r3, [r3, #0]
    222c:	0028      	movs	r0, r5
    222e:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    2230:	2201      	movs	r2, #1
    2232:	40a2      	lsls	r2, r4
    2234:	9b01      	ldr	r3, [sp, #4]
    2236:	4393      	bics	r3, r2
    2238:	9301      	str	r3, [sp, #4]
			pos = ffs(flags) - 1;
    223a:	9801      	ldr	r0, [sp, #4]
    223c:	4b12      	ldr	r3, [pc, #72]	; (2288 <EIC_Handler+0xb4>)
    223e:	4798      	blx	r3
    2240:	3801      	subs	r0, #1
    2242:	b244      	sxtb	r4, r0
		while (-1 != pos) {
    2244:	1c63      	adds	r3, r4, #1
    2246:	d002      	beq.n	224e <EIC_Handler+0x7a>
    2248:	2601      	movs	r6, #1
    224a:	2000      	movs	r0, #0
    224c:	e7d9      	b.n	2202 <EIC_Handler+0x2e>
	return ((Eic *)hw)->INTFLAG.reg;
    224e:	4b09      	ldr	r3, [pc, #36]	; (2274 <EIC_Handler+0xa0>)
    2250:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
    2252:	68d9      	ldr	r1, [r3, #12]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
    2254:	400a      	ands	r2, r1
    2256:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    2258:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    225a:	611a      	str	r2, [r3, #16]
	while (flags) {
    225c:	9b01      	ldr	r3, [sp, #4]
    225e:	2b00      	cmp	r3, #0
    2260:	d005      	beq.n	226e <EIC_Handler+0x9a>
		pos = ffs(flags) - 1;
    2262:	9801      	ldr	r0, [sp, #4]
    2264:	4b08      	ldr	r3, [pc, #32]	; (2288 <EIC_Handler+0xb4>)
    2266:	4798      	blx	r3
    2268:	3801      	subs	r0, #1
    226a:	b244      	sxtb	r4, r0
		while (-1 != pos) {
    226c:	e7ea      	b.n	2244 <EIC_Handler+0x70>
	}
}
    226e:	b002      	add	sp, #8
    2270:	bd70      	pop	{r4, r5, r6, pc}
    2272:	46c0      	nop			; (mov r8, r8)
    2274:	40001800 	.word	0x40001800
    2278:	20000150 	.word	0x20000150
    227c:	00005818 	.word	0x00005818
    2280:	00001e29 	.word	0x00001e29
    2284:	00005810 	.word	0x00005810
    2288:	00005625 	.word	0x00005625

0000228c <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    228c:	07c3      	lsls	r3, r0, #31
    228e:	d509      	bpl.n	22a4 <_gclk_init_generators_by_fref+0x18>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
    2290:	4b27      	ldr	r3, [pc, #156]	; (2330 <_gclk_init_generators_by_fref+0xa4>)
    2292:	2280      	movs	r2, #128	; 0x80
    2294:	0052      	lsls	r2, r2, #1
    2296:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    2298:	4a26      	ldr	r2, [pc, #152]	; (2334 <_gclk_init_generators_by_fref+0xa8>)
    229a:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    229c:	4b24      	ldr	r3, [pc, #144]	; (2330 <_gclk_init_generators_by_fref+0xa4>)
    229e:	785b      	ldrb	r3, [r3, #1]
    22a0:	09db      	lsrs	r3, r3, #7
    22a2:	d1fb      	bne.n	229c <_gclk_init_generators_by_fref+0x10>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SRC | GCLK_GENCTRL_ID(0));
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    22a4:	0783      	lsls	r3, r0, #30
    22a6:	d508      	bpl.n	22ba <_gclk_init_generators_by_fref+0x2e>
	((Gclk *)hw)->GENDIV.reg = data;
    22a8:	4b21      	ldr	r3, [pc, #132]	; (2330 <_gclk_init_generators_by_fref+0xa4>)
    22aa:	4a23      	ldr	r2, [pc, #140]	; (2338 <_gclk_init_generators_by_fref+0xac>)
    22ac:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    22ae:	4a23      	ldr	r2, [pc, #140]	; (233c <_gclk_init_generators_by_fref+0xb0>)
    22b0:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    22b2:	4b1f      	ldr	r3, [pc, #124]	; (2330 <_gclk_init_generators_by_fref+0xa4>)
    22b4:	785b      	ldrb	r3, [r3, #1]
    22b6:	09db      	lsrs	r3, r3, #7
    22b8:	d1fb      	bne.n	22b2 <_gclk_init_generators_by_fref+0x26>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SRC | GCLK_GENCTRL_ID(1));
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    22ba:	0743      	lsls	r3, r0, #29
    22bc:	d508      	bpl.n	22d0 <_gclk_init_generators_by_fref+0x44>
	((Gclk *)hw)->GENDIV.reg = data;
    22be:	4b1c      	ldr	r3, [pc, #112]	; (2330 <_gclk_init_generators_by_fref+0xa4>)
    22c0:	4a1f      	ldr	r2, [pc, #124]	; (2340 <_gclk_init_generators_by_fref+0xb4>)
    22c2:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    22c4:	4a1f      	ldr	r2, [pc, #124]	; (2344 <_gclk_init_generators_by_fref+0xb8>)
    22c6:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    22c8:	4b19      	ldr	r3, [pc, #100]	; (2330 <_gclk_init_generators_by_fref+0xa4>)
    22ca:	785b      	ldrb	r3, [r3, #1]
    22cc:	09db      	lsrs	r3, r3, #7
    22ce:	d1fb      	bne.n	22c8 <_gclk_init_generators_by_fref+0x3c>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    22d0:	0703      	lsls	r3, r0, #28
    22d2:	d508      	bpl.n	22e6 <_gclk_init_generators_by_fref+0x5a>
	((Gclk *)hw)->GENDIV.reg = data;
    22d4:	4b16      	ldr	r3, [pc, #88]	; (2330 <_gclk_init_generators_by_fref+0xa4>)
    22d6:	4a1c      	ldr	r2, [pc, #112]	; (2348 <_gclk_init_generators_by_fref+0xbc>)
    22d8:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    22da:	4a1c      	ldr	r2, [pc, #112]	; (234c <_gclk_init_generators_by_fref+0xc0>)
    22dc:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    22de:	4b14      	ldr	r3, [pc, #80]	; (2330 <_gclk_init_generators_by_fref+0xa4>)
    22e0:	785b      	ldrb	r3, [r3, #1]
    22e2:	09db      	lsrs	r3, r3, #7
    22e4:	d1fb      	bne.n	22de <_gclk_init_generators_by_fref+0x52>
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SRC | GCLK_GENCTRL_ID(3));
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    22e6:	06c3      	lsls	r3, r0, #27
    22e8:	d509      	bpl.n	22fe <_gclk_init_generators_by_fref+0x72>
	((Gclk *)hw)->GENDIV.reg = data;
    22ea:	4b11      	ldr	r3, [pc, #68]	; (2330 <_gclk_init_generators_by_fref+0xa4>)
    22ec:	2282      	movs	r2, #130	; 0x82
    22ee:	0052      	lsls	r2, r2, #1
    22f0:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    22f2:	4a17      	ldr	r2, [pc, #92]	; (2350 <_gclk_init_generators_by_fref+0xc4>)
    22f4:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    22f6:	4b0e      	ldr	r3, [pc, #56]	; (2330 <_gclk_init_generators_by_fref+0xa4>)
    22f8:	785b      	ldrb	r3, [r3, #1]
    22fa:	09db      	lsrs	r3, r3, #7
    22fc:	d1fb      	bne.n	22f6 <_gclk_init_generators_by_fref+0x6a>
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SRC | GCLK_GENCTRL_ID(4));
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    22fe:	0683      	lsls	r3, r0, #26
    2300:	d508      	bpl.n	2314 <_gclk_init_generators_by_fref+0x88>
	((Gclk *)hw)->GENDIV.reg = data;
    2302:	4b0b      	ldr	r3, [pc, #44]	; (2330 <_gclk_init_generators_by_fref+0xa4>)
    2304:	4a13      	ldr	r2, [pc, #76]	; (2354 <_gclk_init_generators_by_fref+0xc8>)
    2306:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    2308:	4a13      	ldr	r2, [pc, #76]	; (2358 <_gclk_init_generators_by_fref+0xcc>)
    230a:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    230c:	4b08      	ldr	r3, [pc, #32]	; (2330 <_gclk_init_generators_by_fref+0xa4>)
    230e:	785b      	ldrb	r3, [r3, #1]
    2310:	09db      	lsrs	r3, r3, #7
    2312:	d1fb      	bne.n	230c <_gclk_init_generators_by_fref+0x80>
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SRC | GCLK_GENCTRL_ID(5));
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    2314:	0643      	lsls	r3, r0, #25
    2316:	d509      	bpl.n	232c <_gclk_init_generators_by_fref+0xa0>
	((Gclk *)hw)->GENDIV.reg = data;
    2318:	4b05      	ldr	r3, [pc, #20]	; (2330 <_gclk_init_generators_by_fref+0xa4>)
    231a:	2283      	movs	r2, #131	; 0x83
    231c:	0052      	lsls	r2, r2, #1
    231e:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    2320:	4a0e      	ldr	r2, [pc, #56]	; (235c <_gclk_init_generators_by_fref+0xd0>)
    2322:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    2324:	4b02      	ldr	r3, [pc, #8]	; (2330 <_gclk_init_generators_by_fref+0xa4>)
    2326:	785b      	ldrb	r3, [r3, #1]
    2328:	09db      	lsrs	r3, r3, #7
    232a:	d1fb      	bne.n	2324 <_gclk_init_generators_by_fref+0x98>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
    232c:	4770      	bx	lr
    232e:	46c0      	nop			; (mov r8, r8)
    2330:	40000c00 	.word	0x40000c00
    2334:	00290800 	.word	0x00290800
    2338:	00000601 	.word	0x00000601
    233c:	00010801 	.word	0x00010801
    2340:	00000402 	.word	0x00000402
    2344:	00210602 	.word	0x00210602
    2348:	00000803 	.word	0x00000803
    234c:	00290603 	.word	0x00290603
    2350:	00090704 	.word	0x00090704
    2354:	00000305 	.word	0x00000305
    2358:	00010805 	.word	0x00010805
    235c:	00210406 	.word	0x00210406

00002360 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
    2360:	4b06      	ldr	r3, [pc, #24]	; (237c <_pm_init+0x1c>)
    2362:	7a1a      	ldrb	r2, [r3, #8]
    2364:	b2d2      	uxtb	r2, r2
    2366:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
    2368:	7a5a      	ldrb	r2, [r3, #9]
    236a:	b2d2      	uxtb	r2, r2
    236c:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
    236e:	7a9a      	ldrb	r2, [r3, #10]
    2370:	b2d2      	uxtb	r2, r2
    2372:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
    2374:	7ada      	ldrb	r2, [r3, #11]
    2376:	b2d2      	uxtb	r2, r2
    2378:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
    237a:	4770      	bx	lr
    237c:	40000400 	.word	0x40000400

00002380 <_sercom_get_hardware_index>:
{
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    2380:	4b02      	ldr	r3, [pc, #8]	; (238c <_sercom_get_hardware_index+0xc>)
    2382:	469c      	mov	ip, r3
    2384:	4460      	add	r0, ip
    2386:	0a80      	lsrs	r0, r0, #10
    2388:	b2c0      	uxtb	r0, r0
}
    238a:	4770      	bx	lr
    238c:	bdfff800 	.word	0xbdfff800

00002390 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    2390:	b510      	push	{r4, lr}
	void *hw = device->hw;
    2392:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    2394:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    2396:	07db      	lsls	r3, r3, #31
    2398:	d502      	bpl.n	23a0 <_sercom_usart_interrupt_handler+0x10>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    239a:	7da3      	ldrb	r3, [r4, #22]
    239c:	07db      	lsls	r3, r3, #31
    239e:	d40f      	bmi.n	23c0 <_sercom_usart_interrupt_handler+0x30>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    23a0:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    23a2:	079b      	lsls	r3, r3, #30
    23a4:	d502      	bpl.n	23ac <_sercom_usart_interrupt_handler+0x1c>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    23a6:	7da3      	ldrb	r3, [r4, #22]
    23a8:	079b      	lsls	r3, r3, #30
    23aa:	d40e      	bmi.n	23ca <_sercom_usart_interrupt_handler+0x3a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    23ac:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    23ae:	075b      	lsls	r3, r3, #29
    23b0:	d515      	bpl.n	23de <_sercom_usart_interrupt_handler+0x4e>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    23b2:	8b62      	ldrh	r2, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    23b4:	2337      	movs	r3, #55	; 0x37
    23b6:	421a      	tst	r2, r3
    23b8:	d00c      	beq.n	23d4 <_sercom_usart_interrupt_handler+0x44>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    23ba:	3308      	adds	r3, #8
    23bc:	8363      	strh	r3, [r4, #26]
		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
		status = hri_sercomusart_read_STATUS_reg(hw);
		hri_sercomusart_clear_STATUS_reg(hw, status);
	}
}
    23be:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    23c0:	2301      	movs	r3, #1
    23c2:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    23c4:	6803      	ldr	r3, [r0, #0]
    23c6:	4798      	blx	r3
    23c8:	e7f9      	b.n	23be <_sercom_usart_interrupt_handler+0x2e>
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    23ca:	2302      	movs	r3, #2
    23cc:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    23ce:	6883      	ldr	r3, [r0, #8]
    23d0:	4798      	blx	r3
    23d2:	e7f4      	b.n	23be <_sercom_usart_interrupt_handler+0x2e>
		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    23d4:	6843      	ldr	r3, [r0, #4]
	return ((Sercom *)hw)->USART.DATA.reg;
    23d6:	8d21      	ldrh	r1, [r4, #40]	; 0x28
    23d8:	b2c9      	uxtb	r1, r1
    23da:	4798      	blx	r3
    23dc:	e7ef      	b.n	23be <_sercom_usart_interrupt_handler+0x2e>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    23de:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    23e0:	09db      	lsrs	r3, r3, #7
    23e2:	d0ec      	beq.n	23be <_sercom_usart_interrupt_handler+0x2e>
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    23e4:	2380      	movs	r3, #128	; 0x80
    23e6:	7623      	strb	r3, [r4, #24]
		device->usart_cb.error_cb(device);
    23e8:	68c3      	ldr	r3, [r0, #12]
    23ea:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    23ec:	8b63      	ldrh	r3, [r4, #26]
    23ee:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    23f0:	8363      	strh	r3, [r4, #26]
    23f2:	e7e4      	b.n	23be <_sercom_usart_interrupt_handler+0x2e>

000023f4 <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM3) {
    23f4:	4b03      	ldr	r3, [pc, #12]	; (2404 <_sercom_init_irq_param+0x10>)
    23f6:	4298      	cmp	r0, r3
    23f8:	d000      	beq.n	23fc <_sercom_init_irq_param+0x8>
		_sercom3_dev = (struct _usart_async_device *)dev;
	}
}
    23fa:	4770      	bx	lr
		_sercom3_dev = (struct _usart_async_device *)dev;
    23fc:	4b02      	ldr	r3, [pc, #8]	; (2408 <_sercom_init_irq_param+0x14>)
    23fe:	6019      	str	r1, [r3, #0]
}
    2400:	e7fb      	b.n	23fa <_sercom_init_irq_param+0x6>
    2402:	46c0      	nop			; (mov r8, r8)
    2404:	42001400 	.word	0x42001400
    2408:	20000154 	.word	0x20000154

0000240c <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    240c:	b510      	push	{r4, lr}
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    240e:	4b02      	ldr	r3, [pc, #8]	; (2418 <_sercom_get_irq_num+0xc>)
    2410:	4798      	blx	r3
    2412:	3009      	adds	r0, #9
    2414:	b2c0      	uxtb	r0, r0
}
    2416:	bd10      	pop	{r4, pc}
    2418:	00002381 	.word	0x00002381

0000241c <_spi_sync_enable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    241c:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    241e:	07db      	lsls	r3, r3, #31
    2420:	d408      	bmi.n	2434 <_spi_sync_enable+0x18>
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    2422:	6803      	ldr	r3, [r0, #0]
    2424:	2202      	movs	r2, #2
    2426:	4313      	orrs	r3, r2
    2428:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    242a:	69c3      	ldr	r3, [r0, #28]
    242c:	079b      	lsls	r3, r3, #30
    242e:	d1fc      	bne.n	242a <_spi_sync_enable+0xe>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    2430:	2000      	movs	r0, #0
}
    2432:	4770      	bx	lr
		return ERR_BUSY;
    2434:	2004      	movs	r0, #4
    2436:	4240      	negs	r0, r0
    2438:	e7fb      	b.n	2432 <_spi_sync_enable+0x16>
	...

0000243c <_get_sercom_index>:
{
    243c:	b510      	push	{r4, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    243e:	4b0b      	ldr	r3, [pc, #44]	; (246c <_get_sercom_index+0x30>)
    2440:	4798      	blx	r3
    2442:	0002      	movs	r2, r0
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    2444:	2000      	movs	r0, #0
    2446:	2800      	cmp	r0, #0
    2448:	d006      	beq.n	2458 <_get_sercom_index+0x1c>
	ASSERT(false);
    244a:	4a09      	ldr	r2, [pc, #36]	; (2470 <_get_sercom_index+0x34>)
    244c:	4909      	ldr	r1, [pc, #36]	; (2474 <_get_sercom_index+0x38>)
    244e:	2000      	movs	r0, #0
    2450:	4b09      	ldr	r3, [pc, #36]	; (2478 <_get_sercom_index+0x3c>)
    2452:	4798      	blx	r3
	return 0;
    2454:	2000      	movs	r0, #0
}
    2456:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == sercom_offset) {
    2458:	0083      	lsls	r3, r0, #2
    245a:	181b      	adds	r3, r3, r0
    245c:	0099      	lsls	r1, r3, #2
    245e:	4b07      	ldr	r3, [pc, #28]	; (247c <_get_sercom_index+0x40>)
    2460:	5ccb      	ldrb	r3, [r1, r3]
    2462:	429a      	cmp	r2, r3
    2464:	d0f7      	beq.n	2456 <_get_sercom_index+0x1a>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    2466:	3001      	adds	r0, #1
    2468:	b2c0      	uxtb	r0, r0
    246a:	e7ec      	b.n	2446 <_get_sercom_index+0xa>
    246c:	00002381 	.word	0x00002381
    2470:	0000025e 	.word	0x0000025e
    2474:	000058a0 	.word	0x000058a0
    2478:	00001e29 	.word	0x00001e29
    247c:	00005830 	.word	0x00005830

00002480 <_usart_init>:
{
    2480:	b570      	push	{r4, r5, r6, lr}
    2482:	0004      	movs	r4, r0
	uint8_t i = _get_sercom_index(hw);
    2484:	4b38      	ldr	r3, [pc, #224]	; (2568 <_usart_init+0xe8>)
    2486:	4798      	blx	r3
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    2488:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    248a:	07db      	lsls	r3, r3, #31
    248c:	d41d      	bmi.n	24ca <_usart_init+0x4a>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    248e:	0083      	lsls	r3, r0, #2
    2490:	181b      	adds	r3, r3, r0
    2492:	009a      	lsls	r2, r3, #2
    2494:	4b35      	ldr	r3, [pc, #212]	; (256c <_usart_init+0xec>)
    2496:	189b      	adds	r3, r3, r2
    2498:	685a      	ldr	r2, [r3, #4]
    249a:	231c      	movs	r3, #28
    249c:	401a      	ands	r2, r3
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    249e:	69e3      	ldr	r3, [r4, #28]
    24a0:	079b      	lsls	r3, r3, #30
    24a2:	d1fc      	bne.n	249e <_usart_init+0x1e>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    24a4:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    24a6:	079b      	lsls	r3, r3, #30
    24a8:	d509      	bpl.n	24be <_usart_init+0x3e>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    24aa:	6823      	ldr	r3, [r4, #0]
    24ac:	2102      	movs	r1, #2
    24ae:	438b      	bics	r3, r1
    24b0:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    24b2:	69e3      	ldr	r3, [r4, #28]
    24b4:	079b      	lsls	r3, r3, #30
    24b6:	d1fc      	bne.n	24b2 <_usart_init+0x32>
    24b8:	69e3      	ldr	r3, [r4, #28]
    24ba:	079b      	lsls	r3, r3, #30
    24bc:	d4fc      	bmi.n	24b8 <_usart_init+0x38>
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    24be:	2301      	movs	r3, #1
    24c0:	4313      	orrs	r3, r2
	((Sercom *)hw)->USART.CTRLA.reg = data;
    24c2:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    24c4:	69e3      	ldr	r3, [r4, #28]
    24c6:	079b      	lsls	r3, r3, #30
    24c8:	d1fc      	bne.n	24c4 <_usart_init+0x44>
    24ca:	69e3      	ldr	r3, [r4, #28]
    24cc:	07db      	lsls	r3, r3, #31
    24ce:	d4fc      	bmi.n	24ca <_usart_init+0x4a>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    24d0:	0083      	lsls	r3, r0, #2
    24d2:	181b      	adds	r3, r3, r0
    24d4:	009a      	lsls	r2, r3, #2
    24d6:	4b25      	ldr	r3, [pc, #148]	; (256c <_usart_init+0xec>)
    24d8:	189b      	adds	r3, r3, r2
    24da:	685b      	ldr	r3, [r3, #4]
	((Sercom *)hw)->USART.CTRLA.reg = data;
    24dc:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    24de:	69e3      	ldr	r3, [r4, #28]
    24e0:	079b      	lsls	r3, r3, #30
    24e2:	d1fc      	bne.n	24de <_usart_init+0x5e>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    24e4:	0083      	lsls	r3, r0, #2
    24e6:	181b      	adds	r3, r3, r0
    24e8:	009a      	lsls	r2, r3, #2
    24ea:	4b20      	ldr	r3, [pc, #128]	; (256c <_usart_init+0xec>)
    24ec:	189b      	adds	r3, r3, r2
    24ee:	689b      	ldr	r3, [r3, #8]
	((Sercom *)hw)->USART.CTRLB.reg = data;
    24f0:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    24f2:	69e3      	ldr	r3, [r4, #28]
    24f4:	075b      	lsls	r3, r3, #29
    24f6:	d1fc      	bne.n	24f2 <_usart_init+0x72>
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    24f8:	0083      	lsls	r3, r0, #2
    24fa:	181b      	adds	r3, r3, r0
    24fc:	009a      	lsls	r2, r3, #2
    24fe:	4b1b      	ldr	r3, [pc, #108]	; (256c <_usart_init+0xec>)
    2500:	189b      	adds	r3, r3, r2
    2502:	685b      	ldr	r3, [r3, #4]
    2504:	049a      	lsls	r2, r3, #18
    2506:	d40b      	bmi.n	2520 <_usart_init+0xa0>
    2508:	22c0      	movs	r2, #192	; 0xc0
    250a:	01d2      	lsls	r2, r2, #7
    250c:	4213      	tst	r3, r2
    250e:	d107      	bne.n	2520 <_usart_init+0xa0>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    2510:	0083      	lsls	r3, r0, #2
    2512:	181b      	adds	r3, r3, r0
    2514:	009a      	lsls	r2, r3, #2
    2516:	4b15      	ldr	r3, [pc, #84]	; (256c <_usart_init+0xec>)
    2518:	189b      	adds	r3, r3, r2
    251a:	899b      	ldrh	r3, [r3, #12]
	((Sercom *)hw)->USART.BAUD.reg = data;
    251c:	81a3      	strh	r3, [r4, #12]
    251e:	e015      	b.n	254c <_usart_init+0xcc>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    2520:	0083      	lsls	r3, r0, #2
    2522:	181b      	adds	r3, r3, r0
    2524:	009a      	lsls	r2, r3, #2
    2526:	4911      	ldr	r1, [pc, #68]	; (256c <_usart_init+0xec>)
    2528:	1889      	adds	r1, r1, r2
    252a:	898a      	ldrh	r2, [r1, #12]
    252c:	89a3      	ldrh	r3, [r4, #12]
    252e:	04d2      	lsls	r2, r2, #19
    2530:	0cd2      	lsrs	r2, r2, #19
    2532:	0b5b      	lsrs	r3, r3, #13
    2534:	035b      	lsls	r3, r3, #13
    2536:	4313      	orrs	r3, r2
    2538:	81a3      	strh	r3, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    253a:	7b8b      	ldrb	r3, [r1, #14]
    253c:	2207      	movs	r2, #7
    253e:	401a      	ands	r2, r3
    2540:	89a3      	ldrh	r3, [r4, #12]
    2542:	0352      	lsls	r2, r2, #13
    2544:	04db      	lsls	r3, r3, #19
    2546:	0cdb      	lsrs	r3, r3, #19
    2548:	4313      	orrs	r3, r2
    254a:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    254c:	4a07      	ldr	r2, [pc, #28]	; (256c <_usart_init+0xec>)
    254e:	0083      	lsls	r3, r0, #2
    2550:	181d      	adds	r5, r3, r0
    2552:	00a9      	lsls	r1, r5, #2
    2554:	000d      	movs	r5, r1
    2556:	1851      	adds	r1, r2, r1
    2558:	7bc9      	ldrb	r1, [r1, #15]
	((Sercom *)hw)->USART.RXPL.reg = data;
    255a:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    255c:	1952      	adds	r2, r2, r5
    255e:	7c12      	ldrb	r2, [r2, #16]
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    2560:	2330      	movs	r3, #48	; 0x30
    2562:	54e2      	strb	r2, [r4, r3]
}
    2564:	2000      	movs	r0, #0
    2566:	bd70      	pop	{r4, r5, r6, pc}
    2568:	0000243d 	.word	0x0000243d
    256c:	00005830 	.word	0x00005830

00002570 <_usart_async_init>:
{
    2570:	b570      	push	{r4, r5, r6, lr}
    2572:	0006      	movs	r6, r0
    2574:	000c      	movs	r4, r1
	ASSERT(device);
    2576:	1e43      	subs	r3, r0, #1
    2578:	4198      	sbcs	r0, r3
    257a:	b2c0      	uxtb	r0, r0
    257c:	22c4      	movs	r2, #196	; 0xc4
    257e:	4919      	ldr	r1, [pc, #100]	; (25e4 <_usart_async_init+0x74>)
    2580:	4b19      	ldr	r3, [pc, #100]	; (25e8 <_usart_async_init+0x78>)
    2582:	4798      	blx	r3
	init_status = _usart_init(hw);
    2584:	0020      	movs	r0, r4
    2586:	4b19      	ldr	r3, [pc, #100]	; (25ec <_usart_async_init+0x7c>)
    2588:	4798      	blx	r3
    258a:	1e05      	subs	r5, r0, #0
	if (init_status) {
    258c:	d001      	beq.n	2592 <_usart_async_init+0x22>
}
    258e:	0028      	movs	r0, r5
    2590:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    2592:	61b4      	str	r4, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
    2594:	0031      	movs	r1, r6
    2596:	0020      	movs	r0, r4
    2598:	4b15      	ldr	r3, [pc, #84]	; (25f0 <_usart_async_init+0x80>)
    259a:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)_sercom_get_irq_num(hw));
    259c:	0020      	movs	r0, r4
    259e:	4b15      	ldr	r3, [pc, #84]	; (25f4 <_usart_async_init+0x84>)
    25a0:	4798      	blx	r3
    25a2:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    25a4:	2b00      	cmp	r3, #0
    25a6:	db0a      	blt.n	25be <_usart_async_init+0x4e>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    25a8:	211f      	movs	r1, #31
    25aa:	4001      	ands	r1, r0
    25ac:	2201      	movs	r2, #1
    25ae:	408a      	lsls	r2, r1
    25b0:	2180      	movs	r1, #128	; 0x80
    25b2:	4c11      	ldr	r4, [pc, #68]	; (25f8 <_usart_async_init+0x88>)
    25b4:	5062      	str	r2, [r4, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    25b6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    25ba:	f3bf 8f6f 	isb	sy
  if ((int32_t)(IRQn) >= 0)
    25be:	2b00      	cmp	r3, #0
    25c0:	db07      	blt.n	25d2 <_usart_async_init+0x62>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    25c2:	211f      	movs	r1, #31
    25c4:	4001      	ands	r1, r0
    25c6:	2201      	movs	r2, #1
    25c8:	408a      	lsls	r2, r1
    25ca:	21c0      	movs	r1, #192	; 0xc0
    25cc:	0049      	lsls	r1, r1, #1
    25ce:	4c0a      	ldr	r4, [pc, #40]	; (25f8 <_usart_async_init+0x88>)
    25d0:	5062      	str	r2, [r4, r1]
  if ((int32_t)(IRQn) >= 0)
    25d2:	2b00      	cmp	r3, #0
    25d4:	dbdb      	blt.n	258e <_usart_async_init+0x1e>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    25d6:	231f      	movs	r3, #31
    25d8:	4018      	ands	r0, r3
    25da:	3b1e      	subs	r3, #30
    25dc:	4083      	lsls	r3, r0
    25de:	4a06      	ldr	r2, [pc, #24]	; (25f8 <_usart_async_init+0x88>)
    25e0:	6013      	str	r3, [r2, #0]
    25e2:	e7d4      	b.n	258e <_usart_async_init+0x1e>
    25e4:	000058a0 	.word	0x000058a0
    25e8:	00001e29 	.word	0x00001e29
    25ec:	00002481 	.word	0x00002481
    25f0:	000023f5 	.word	0x000023f5
    25f4:	0000240d 	.word	0x0000240d
    25f8:	e000e100 	.word	0xe000e100

000025fc <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    25fc:	6983      	ldr	r3, [r0, #24]
    25fe:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
    2600:	8519      	strh	r1, [r3, #40]	; 0x28
}
    2602:	4770      	bx	lr

00002604 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    2604:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    2606:	2201      	movs	r2, #1
    2608:	759a      	strb	r2, [r3, #22]
}
    260a:	4770      	bx	lr

0000260c <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    260c:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    260e:	2202      	movs	r2, #2
    2610:	759a      	strb	r2, [r3, #22]
}
    2612:	4770      	bx	lr

00002614 <SERCOM3_Handler>:

	return NULL;
}

void SERCOM3_Handler(void)
{
    2614:	b510      	push	{r4, lr}
	_sercom_usart_interrupt_handler(_sercom3_dev);
    2616:	4b02      	ldr	r3, [pc, #8]	; (2620 <SERCOM3_Handler+0xc>)
    2618:	6818      	ldr	r0, [r3, #0]
    261a:	4b02      	ldr	r3, [pc, #8]	; (2624 <SERCOM3_Handler+0x10>)
    261c:	4798      	blx	r3
}
    261e:	bd10      	pop	{r4, pc}
    2620:	20000154 	.word	0x20000154
    2624:	00002391 	.word	0x00002391

00002628 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    2628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    262a:	0006      	movs	r6, r0
    262c:	000c      	movs	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    262e:	0008      	movs	r0, r1
    2630:	4b73      	ldr	r3, [pc, #460]	; (2800 <_spi_m_sync_init+0x1d8>)
    2632:	4798      	blx	r3
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    2634:	2300      	movs	r3, #0
    2636:	e001      	b.n	263c <_spi_m_sync_init+0x14>
    2638:	3301      	adds	r3, #1
    263a:	b2db      	uxtb	r3, r3
    263c:	2b02      	cmp	r3, #2
    263e:	d80b      	bhi.n	2658 <_spi_m_sync_init+0x30>
		if (sercomspi_regs[i].n == n) {
    2640:	0119      	lsls	r1, r3, #4
    2642:	18c9      	adds	r1, r1, r3
    2644:	4a6f      	ldr	r2, [pc, #444]	; (2804 <_spi_m_sync_init+0x1dc>)
    2646:	1852      	adds	r2, r2, r1
    2648:	324c      	adds	r2, #76	; 0x4c
    264a:	7812      	ldrb	r2, [r2, #0]
    264c:	4290      	cmp	r0, r2
    264e:	d1f3      	bne.n	2638 <_spi_m_sync_init+0x10>
			return &sercomspi_regs[i];
    2650:	4d6c      	ldr	r5, [pc, #432]	; (2804 <_spi_m_sync_init+0x1dc>)
    2652:	353c      	adds	r5, #60	; 0x3c
    2654:	186d      	adds	r5, r5, r1
    2656:	e000      	b.n	265a <_spi_m_sync_init+0x32>
	return NULL;
    2658:	2500      	movs	r5, #0
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    265a:	2e00      	cmp	r6, #0
    265c:	d100      	bne.n	2660 <_spi_m_sync_init+0x38>
    265e:	e082      	b.n	2766 <_spi_m_sync_init+0x13e>
    2660:	2c00      	cmp	r4, #0
    2662:	d100      	bne.n	2666 <_spi_m_sync_init+0x3e>
    2664:	e07d      	b.n	2762 <_spi_m_sync_init+0x13a>
    2666:	2001      	movs	r0, #1
    2668:	4a67      	ldr	r2, [pc, #412]	; (2808 <_spi_m_sync_init+0x1e0>)
    266a:	4968      	ldr	r1, [pc, #416]	; (280c <_spi_m_sync_init+0x1e4>)
    266c:	4b68      	ldr	r3, [pc, #416]	; (2810 <_spi_m_sync_init+0x1e8>)
    266e:	4798      	blx	r3

	if (regs == NULL) {
    2670:	2d00      	cmp	r5, #0
    2672:	d100      	bne.n	2676 <_spi_m_sync_init+0x4e>
    2674:	e0c0      	b.n	27f8 <_spi_m_sync_init+0x1d0>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    2676:	69e3      	ldr	r3, [r4, #28]
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    2678:	07db      	lsls	r3, r3, #31
    267a:	d421      	bmi.n	26c0 <_spi_m_sync_init+0x98>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    267c:	782a      	ldrb	r2, [r5, #0]
    267e:	786b      	ldrb	r3, [r5, #1]
    2680:	021b      	lsls	r3, r3, #8
    2682:	4313      	orrs	r3, r2
    2684:	78aa      	ldrb	r2, [r5, #2]
    2686:	0412      	lsls	r2, r2, #16
    2688:	4313      	orrs	r3, r2
    268a:	78ea      	ldrb	r2, [r5, #3]
    268c:	0612      	lsls	r2, r2, #24
    268e:	431a      	orrs	r2, r3
    2690:	231c      	movs	r3, #28
    2692:	401a      	ands	r2, r3
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2694:	69e3      	ldr	r3, [r4, #28]
    2696:	079b      	lsls	r3, r3, #30
    2698:	d1fc      	bne.n	2694 <_spi_m_sync_init+0x6c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    269a:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    269c:	079b      	lsls	r3, r3, #30
    269e:	d509      	bpl.n	26b4 <_spi_m_sync_init+0x8c>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    26a0:	6823      	ldr	r3, [r4, #0]
    26a2:	2102      	movs	r1, #2
    26a4:	438b      	bics	r3, r1
    26a6:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    26a8:	69e3      	ldr	r3, [r4, #28]
    26aa:	079b      	lsls	r3, r3, #30
    26ac:	d1fc      	bne.n	26a8 <_spi_m_sync_init+0x80>
    26ae:	69e3      	ldr	r3, [r4, #28]
    26b0:	079b      	lsls	r3, r3, #30
    26b2:	d4fc      	bmi.n	26ae <_spi_m_sync_init+0x86>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    26b4:	2301      	movs	r3, #1
    26b6:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    26b8:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    26ba:	69e3      	ldr	r3, [r4, #28]
    26bc:	079b      	lsls	r3, r3, #30
    26be:	d1fc      	bne.n	26ba <_spi_m_sync_init+0x92>
    26c0:	69e3      	ldr	r3, [r4, #28]
    26c2:	07db      	lsls	r3, r3, #31
    26c4:	d4fc      	bmi.n	26c0 <_spi_m_sync_init+0x98>
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    26c6:	6034      	str	r4, [r6, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    26c8:	782b      	ldrb	r3, [r5, #0]
    26ca:	786a      	ldrb	r2, [r5, #1]
    26cc:	0212      	lsls	r2, r2, #8
    26ce:	431a      	orrs	r2, r3
    26d0:	78ab      	ldrb	r3, [r5, #2]
    26d2:	041b      	lsls	r3, r3, #16
    26d4:	431a      	orrs	r2, r3
    26d6:	78eb      	ldrb	r3, [r5, #3]
    26d8:	061b      	lsls	r3, r3, #24
    26da:	4313      	orrs	r3, r2
    26dc:	221c      	movs	r2, #28
    26de:	4013      	ands	r3, r2
    26e0:	2b08      	cmp	r3, #8
    26e2:	d042      	beq.n	276a <_spi_m_sync_init+0x142>
	ASSERT(hw && regs);
    26e4:	2c00      	cmp	r4, #0
    26e6:	d100      	bne.n	26ea <_spi_m_sync_init+0xc2>
    26e8:	e082      	b.n	27f0 <_spi_m_sync_init+0x1c8>
    26ea:	2d00      	cmp	r5, #0
    26ec:	d100      	bne.n	26f0 <_spi_m_sync_init+0xc8>
    26ee:	e07d      	b.n	27ec <_spi_m_sync_init+0x1c4>
    26f0:	2001      	movs	r0, #1
    26f2:	4a48      	ldr	r2, [pc, #288]	; (2814 <_spi_m_sync_init+0x1ec>)
    26f4:	4945      	ldr	r1, [pc, #276]	; (280c <_spi_m_sync_init+0x1e4>)
    26f6:	4b46      	ldr	r3, [pc, #280]	; (2810 <_spi_m_sync_init+0x1e8>)
    26f8:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    26fa:	782b      	ldrb	r3, [r5, #0]
    26fc:	786a      	ldrb	r2, [r5, #1]
    26fe:	0212      	lsls	r2, r2, #8
    2700:	431a      	orrs	r2, r3
    2702:	78ab      	ldrb	r3, [r5, #2]
    2704:	041b      	lsls	r3, r3, #16
    2706:	431a      	orrs	r2, r3
    2708:	78eb      	ldrb	r3, [r5, #3]
    270a:	061b      	lsls	r3, r3, #24
    270c:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLA_reg(
    270e:	4a42      	ldr	r2, [pc, #264]	; (2818 <_spi_m_sync_init+0x1f0>)
    2710:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    2712:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2714:	69e3      	ldr	r3, [r4, #28]
    2716:	079b      	lsls	r3, r3, #30
    2718:	d1fc      	bne.n	2714 <_spi_m_sync_init+0xec>
	    (regs->ctrlb
    271a:	792b      	ldrb	r3, [r5, #4]
    271c:	796a      	ldrb	r2, [r5, #5]
    271e:	0212      	lsls	r2, r2, #8
    2720:	431a      	orrs	r2, r3
    2722:	79ab      	ldrb	r3, [r5, #6]
    2724:	041b      	lsls	r3, r3, #16
    2726:	431a      	orrs	r2, r3
    2728:	79eb      	ldrb	r3, [r5, #7]
    272a:	061b      	lsls	r3, r3, #24
    272c:	4313      	orrs	r3, r2
	        | (SERCOM_SPI_CTRLB_RXEN));
    272e:	4a3b      	ldr	r2, [pc, #236]	; (281c <_spi_m_sync_init+0x1f4>)
    2730:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(
    2732:	2280      	movs	r2, #128	; 0x80
    2734:	0292      	lsls	r2, r2, #10
    2736:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    2738:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    273a:	69e3      	ldr	r3, [r4, #28]
    273c:	075b      	lsls	r3, r3, #29
    273e:	d1fc      	bne.n	273a <_spi_m_sync_init+0x112>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    2740:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    2742:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    2744:	7b6a      	ldrb	r2, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    2746:	2330      	movs	r3, #48	; 0x30
    2748:	54e2      	strb	r2, [r4, r3]
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    274a:	792b      	ldrb	r3, [r5, #4]
    274c:	075b      	lsls	r3, r3, #29
    274e:	d151      	bne.n	27f4 <_spi_m_sync_init+0x1cc>
    2750:	2301      	movs	r3, #1
    2752:	7133      	strb	r3, [r6, #4]

	dev->dummy_byte = regs->dummy_byte;
    2754:	7baa      	ldrb	r2, [r5, #14]
    2756:	7beb      	ldrb	r3, [r5, #15]
    2758:	021b      	lsls	r3, r3, #8
    275a:	4313      	orrs	r3, r2
    275c:	80f3      	strh	r3, [r6, #6]

	return ERR_NONE;
    275e:	2000      	movs	r0, #0
}
    2760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(dev && hw);
    2762:	2000      	movs	r0, #0
    2764:	e780      	b.n	2668 <_spi_m_sync_init+0x40>
    2766:	2000      	movs	r0, #0
    2768:	e77e      	b.n	2668 <_spi_m_sync_init+0x40>
	ASSERT(hw && regs);
    276a:	2c00      	cmp	r4, #0
    276c:	d03c      	beq.n	27e8 <_spi_m_sync_init+0x1c0>
    276e:	2d00      	cmp	r5, #0
    2770:	d038      	beq.n	27e4 <_spi_m_sync_init+0x1bc>
    2772:	2001      	movs	r0, #1
    2774:	4a2a      	ldr	r2, [pc, #168]	; (2820 <_spi_m_sync_init+0x1f8>)
    2776:	4925      	ldr	r1, [pc, #148]	; (280c <_spi_m_sync_init+0x1e4>)
    2778:	4b25      	ldr	r3, [pc, #148]	; (2810 <_spi_m_sync_init+0x1e8>)
    277a:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    277c:	782b      	ldrb	r3, [r5, #0]
    277e:	786a      	ldrb	r2, [r5, #1]
    2780:	0212      	lsls	r2, r2, #8
    2782:	431a      	orrs	r2, r3
    2784:	78ab      	ldrb	r3, [r5, #2]
    2786:	041b      	lsls	r3, r3, #16
    2788:	431a      	orrs	r2, r3
    278a:	78eb      	ldrb	r3, [r5, #3]
    278c:	061b      	lsls	r3, r3, #24
    278e:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLA_reg(
    2790:	4a21      	ldr	r2, [pc, #132]	; (2818 <_spi_m_sync_init+0x1f0>)
    2792:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    2794:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2796:	69e3      	ldr	r3, [r4, #28]
    2798:	079b      	lsls	r3, r3, #30
    279a:	d1fc      	bne.n	2796 <_spi_m_sync_init+0x16e>
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    279c:	792b      	ldrb	r3, [r5, #4]
    279e:	796a      	ldrb	r2, [r5, #5]
    27a0:	0212      	lsls	r2, r2, #8
    27a2:	431a      	orrs	r2, r3
    27a4:	79ab      	ldrb	r3, [r5, #6]
    27a6:	041b      	lsls	r3, r3, #16
    27a8:	431a      	orrs	r2, r3
    27aa:	79eb      	ldrb	r3, [r5, #7]
    27ac:	061b      	lsls	r3, r3, #24
    27ae:	4313      	orrs	r3, r2
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    27b0:	4a1c      	ldr	r2, [pc, #112]	; (2824 <_spi_m_sync_init+0x1fc>)
    27b2:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(hw,
    27b4:	4a1c      	ldr	r2, [pc, #112]	; (2828 <_spi_m_sync_init+0x200>)
    27b6:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    27b8:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    27ba:	69e3      	ldr	r3, [r4, #28]
    27bc:	075b      	lsls	r3, r3, #29
    27be:	d1fc      	bne.n	27ba <_spi_m_sync_init+0x192>
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    27c0:	7a2b      	ldrb	r3, [r5, #8]
    27c2:	7a6a      	ldrb	r2, [r5, #9]
    27c4:	0212      	lsls	r2, r2, #8
    27c6:	431a      	orrs	r2, r3
    27c8:	7aab      	ldrb	r3, [r5, #10]
    27ca:	041b      	lsls	r3, r3, #16
    27cc:	431a      	orrs	r2, r3
    27ce:	7aeb      	ldrb	r3, [r5, #11]
    27d0:	061b      	lsls	r3, r3, #24
    27d2:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.ADDR.reg = data;
    27d4:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    27d6:	7b6a      	ldrb	r2, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    27d8:	2330      	movs	r3, #48	; 0x30
    27da:	54e2      	strb	r2, [r4, r3]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    27dc:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    27de:	2b00      	cmp	r3, #0
    27e0:	d1fc      	bne.n	27dc <_spi_m_sync_init+0x1b4>
    27e2:	e7b2      	b.n	274a <_spi_m_sync_init+0x122>
	ASSERT(hw && regs);
    27e4:	2000      	movs	r0, #0
    27e6:	e7c5      	b.n	2774 <_spi_m_sync_init+0x14c>
    27e8:	2000      	movs	r0, #0
    27ea:	e7c3      	b.n	2774 <_spi_m_sync_init+0x14c>
	ASSERT(hw && regs);
    27ec:	2000      	movs	r0, #0
    27ee:	e780      	b.n	26f2 <_spi_m_sync_init+0xca>
    27f0:	2000      	movs	r0, #0
    27f2:	e77e      	b.n	26f2 <_spi_m_sync_init+0xca>
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    27f4:	2302      	movs	r3, #2
    27f6:	e7ac      	b.n	2752 <_spi_m_sync_init+0x12a>
		return ERR_INVALID_ARG;
    27f8:	200d      	movs	r0, #13
    27fa:	4240      	negs	r0, r0
    27fc:	e7b0      	b.n	2760 <_spi_m_sync_init+0x138>
    27fe:	46c0      	nop			; (mov r8, r8)
    2800:	00002381 	.word	0x00002381
    2804:	00005830 	.word	0x00005830
    2808:	00000952 	.word	0x00000952
    280c:	000058a0 	.word	0x000058a0
    2810:	00001e29 	.word	0x00001e29
    2814:	00000917 	.word	0x00000917
    2818:	fffffefc 	.word	0xfffffefc
    281c:	fffd1dbf 	.word	0xfffd1dbf
    2820:	0000092b 	.word	0x0000092b
    2824:	fffdddbf 	.word	0xfffdddbf
    2828:	00020240 	.word	0x00020240

0000282c <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    282c:	b510      	push	{r4, lr}
    282e:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->prvt);
    2830:	d00d      	beq.n	284e <_spi_m_sync_enable+0x22>
    2832:	6803      	ldr	r3, [r0, #0]
    2834:	2b00      	cmp	r3, #0
    2836:	d008      	beq.n	284a <_spi_m_sync_enable+0x1e>
    2838:	2001      	movs	r0, #1
    283a:	4a06      	ldr	r2, [pc, #24]	; (2854 <_spi_m_sync_enable+0x28>)
    283c:	4906      	ldr	r1, [pc, #24]	; (2858 <_spi_m_sync_enable+0x2c>)
    283e:	4b07      	ldr	r3, [pc, #28]	; (285c <_spi_m_sync_enable+0x30>)
    2840:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    2842:	6820      	ldr	r0, [r4, #0]
    2844:	4b06      	ldr	r3, [pc, #24]	; (2860 <_spi_m_sync_enable+0x34>)
    2846:	4798      	blx	r3
}
    2848:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->prvt);
    284a:	2000      	movs	r0, #0
    284c:	e7f5      	b.n	283a <_spi_m_sync_enable+0xe>
    284e:	2000      	movs	r0, #0
    2850:	e7f3      	b.n	283a <_spi_m_sync_enable+0xe>
    2852:	46c0      	nop			; (mov r8, r8)
    2854:	000009ad 	.word	0x000009ad
    2858:	000058a0 	.word	0x000058a0
    285c:	00001e29 	.word	0x00001e29
    2860:	0000241d 	.word	0x0000241d

00002864 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    2864:	b5f0      	push	{r4, r5, r6, r7, lr}
    2866:	46ce      	mov	lr, r9
    2868:	4647      	mov	r7, r8
    286a:	b580      	push	{r7, lr}
    286c:	b089      	sub	sp, #36	; 0x24
    286e:	4681      	mov	r9, r0
    2870:	000d      	movs	r5, r1
	void *                 hw   = dev->prvt;
    2872:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    2874:	680b      	ldr	r3, [r1, #0]
    2876:	9303      	str	r3, [sp, #12]
    2878:	684b      	ldr	r3, [r1, #4]
    287a:	9304      	str	r3, [sp, #16]
    287c:	2300      	movs	r3, #0
    287e:	9305      	str	r3, [sp, #20]
    2880:	9306      	str	r3, [sp, #24]
    2882:	7906      	ldrb	r6, [r0, #4]

	ASSERT(dev && hw);
    2884:	2800      	cmp	r0, #0
    2886:	d014      	beq.n	28b2 <_spi_m_sync_trans+0x4e>
    2888:	2c00      	cmp	r4, #0
    288a:	d010      	beq.n	28ae <_spi_m_sync_trans+0x4a>
    288c:	2001      	movs	r0, #1
    288e:	4a37      	ldr	r2, [pc, #220]	; (296c <_spi_m_sync_trans+0x108>)
    2890:	4937      	ldr	r1, [pc, #220]	; (2970 <_spi_m_sync_trans+0x10c>)
    2892:	4b38      	ldr	r3, [pc, #224]	; (2974 <_spi_m_sync_trans+0x110>)
    2894:	4798      	blx	r3
    2896:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    2898:	075b      	lsls	r3, r3, #29
    289a:	d164      	bne.n	2966 <_spi_m_sync_trans+0x102>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    289c:	69e3      	ldr	r3, [r4, #28]
    289e:	079b      	lsls	r3, r3, #30
    28a0:	d1fc      	bne.n	289c <_spi_m_sync_trans+0x38>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    28a2:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    28a4:	079b      	lsls	r3, r3, #30
    28a6:	d420      	bmi.n	28ea <_spi_m_sync_trans+0x86>
		return ERR_NOT_INITIALIZED;
    28a8:	2014      	movs	r0, #20
    28aa:	4240      	negs	r0, r0
    28ac:	e056      	b.n	295c <_spi_m_sync_trans+0xf8>
	ASSERT(dev && hw);
    28ae:	2000      	movs	r0, #0
    28b0:	e7ed      	b.n	288e <_spi_m_sync_trans+0x2a>
    28b2:	2000      	movs	r0, #0
    28b4:	e7eb      	b.n	288e <_spi_m_sync_trans+0x2a>
		return false;
    28b6:	2200      	movs	r2, #0
    28b8:	e02d      	b.n	2916 <_spi_m_sync_trans+0xb2>
			data |= (*ctrl->txbuf) << 8;
    28ba:	7848      	ldrb	r0, [r1, #1]
    28bc:	0200      	lsls	r0, r0, #8
    28be:	4647      	mov	r7, r8
    28c0:	4307      	orrs	r7, r0
    28c2:	46b8      	mov	r8, r7
			ctrl->txbuf++;
    28c4:	3102      	adds	r1, #2
    28c6:	9103      	str	r1, [sp, #12]
	ctrl->txcnt++;
    28c8:	3201      	adds	r2, #1
    28ca:	9205      	str	r2, [sp, #20]
	((Sercom *)hw)->SPI.DATA.reg = data;
    28cc:	4642      	mov	r2, r8
    28ce:	62a2      	str	r2, [r4, #40]	; 0x28
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    28d0:	b25b      	sxtb	r3, r3
    28d2:	2b00      	cmp	r3, #0
    28d4:	db35      	blt.n	2942 <_spi_m_sync_trans+0xde>
	return ERR_NONE;
    28d6:	2000      	movs	r0, #0
			}
		}

		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
    28d8:	2800      	cmp	r0, #0
    28da:	db3a      	blt.n	2952 <_spi_m_sync_trans+0xee>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    28dc:	9805      	ldr	r0, [sp, #20]
    28de:	68ab      	ldr	r3, [r5, #8]
    28e0:	4298      	cmp	r0, r3
    28e2:	d302      	bcc.n	28ea <_spi_m_sync_trans+0x86>
    28e4:	9a06      	ldr	r2, [sp, #24]
    28e6:	4293      	cmp	r3, r2
    28e8:	d933      	bls.n	2952 <_spi_m_sync_trans+0xee>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    28ea:	7e23      	ldrb	r3, [r4, #24]
    28ec:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    28ee:	075a      	lsls	r2, r3, #29
    28f0:	d5e1      	bpl.n	28b6 <_spi_m_sync_trans+0x52>
	return ((Sercom *)hw)->SPI.DATA.reg;
    28f2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    28f4:	9a04      	ldr	r2, [sp, #16]
    28f6:	2a00      	cmp	r2, #0
    28f8:	d008      	beq.n	290c <_spi_m_sync_trans+0xa8>
		*ctrl->rxbuf++ = (uint8_t)data;
    28fa:	1c50      	adds	r0, r2, #1
    28fc:	9004      	str	r0, [sp, #16]
    28fe:	7011      	strb	r1, [r2, #0]
		if (ctrl->char_size > 1) {
    2900:	2e01      	cmp	r6, #1
    2902:	d903      	bls.n	290c <_spi_m_sync_trans+0xa8>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    2904:	1c90      	adds	r0, r2, #2
    2906:	9004      	str	r0, [sp, #16]
    2908:	0a09      	lsrs	r1, r1, #8
    290a:	7051      	strb	r1, [r2, #1]
	ctrl->rxcnt++;
    290c:	9a06      	ldr	r2, [sp, #24]
    290e:	9201      	str	r2, [sp, #4]
    2910:	3201      	adds	r2, #1
    2912:	9206      	str	r2, [sp, #24]
	return true;
    2914:	2201      	movs	r2, #1
		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    2916:	2a00      	cmp	r2, #0
    2918:	d1da      	bne.n	28d0 <_spi_m_sync_trans+0x6c>
			if (ctrl.rxcnt >= ctrl.txcnt) {
    291a:	9906      	ldr	r1, [sp, #24]
    291c:	9a05      	ldr	r2, [sp, #20]
    291e:	4291      	cmp	r1, r2
    2920:	d3d6      	bcc.n	28d0 <_spi_m_sync_trans+0x6c>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    2922:	4649      	mov	r1, r9
    2924:	88c8      	ldrh	r0, [r1, #6]
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    2926:	07d9      	lsls	r1, r3, #31
    2928:	d5d2      	bpl.n	28d0 <_spi_m_sync_trans+0x6c>
	if (ctrl->txbuf) {
    292a:	9903      	ldr	r1, [sp, #12]
    292c:	2900      	cmp	r1, #0
    292e:	d006      	beq.n	293e <_spi_m_sync_trans+0xda>
		data = *ctrl->txbuf++;
    2930:	1c48      	adds	r0, r1, #1
    2932:	9003      	str	r0, [sp, #12]
    2934:	7808      	ldrb	r0, [r1, #0]
    2936:	4680      	mov	r8, r0
		if (ctrl->char_size > 1) {
    2938:	2e01      	cmp	r6, #1
    293a:	d8be      	bhi.n	28ba <_spi_m_sync_trans+0x56>
    293c:	e7c4      	b.n	28c8 <_spi_m_sync_trans+0x64>
		data = dummy;
    293e:	4680      	mov	r8, r0
    2940:	e7c2      	b.n	28c8 <_spi_m_sync_trans+0x64>
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    2942:	2301      	movs	r3, #1
    2944:	425b      	negs	r3, r3
    2946:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    2948:	3381      	adds	r3, #129	; 0x81
    294a:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    294c:	2013      	movs	r0, #19
    294e:	4240      	negs	r0, r0
    2950:	e7c2      	b.n	28d8 <_spi_m_sync_trans+0x74>
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    2952:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    2954:	079b      	lsls	r3, r3, #30
    2956:	d0fc      	beq.n	2952 <_spi_m_sync_trans+0xee>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    2958:	2303      	movs	r3, #3
    295a:	7623      	strb	r3, [r4, #24]
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
    295c:	b009      	add	sp, #36	; 0x24
    295e:	bc0c      	pop	{r2, r3}
    2960:	4690      	mov	r8, r2
    2962:	4699      	mov	r9, r3
    2964:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ERR_BUSY;
    2966:	2004      	movs	r0, #4
    2968:	4240      	negs	r0, r0
    296a:	e7f7      	b.n	295c <_spi_m_sync_trans+0xf8>
    296c:	00000ab2 	.word	0x00000ab2
    2970:	000058a0 	.word	0x000058a0
    2974:	00001e29 	.word	0x00001e29

00002978 <_sysctrl_init_sources>:
}

static inline void hri_sysctrl_write_XOSC32K_reg(const void *const hw, hri_sysctrl_xosc32k_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->XOSC32K.reg = data;
    2978:	4a14      	ldr	r2, [pc, #80]	; (29cc <_sysctrl_init_sources+0x54>)
    297a:	2366      	movs	r3, #102	; 0x66
    297c:	8293      	strh	r3, [r2, #20]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    297e:	6a11      	ldr	r1, [r2, #32]
	tmp = (tmp & SYSCTRL_OSC8M_CALIB_Msk) >> SYSCTRL_OSC8M_CALIB_Pos;
    2980:	0c09      	lsrs	r1, r1, #16
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    2982:	6a13      	ldr	r3, [r2, #32]

#if CONF_OSC8M_CONFIG == 1
	calib = hri_sysctrl_read_OSC8M_CALIB_bf(hw);

	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    2984:	0f9b      	lsrs	r3, r3, #30
    2986:	079b      	lsls	r3, r3, #30
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    2988:	0409      	lsls	r1, r1, #16
    298a:	4811      	ldr	r0, [pc, #68]	; (29d0 <_sysctrl_init_sources+0x58>)
    298c:	4001      	ands	r1, r0
#endif
	                                SYSCTRL_OSC8M_PRESC(CONF_OSC8M_PRESC)
	                                | (CONF_OSC8M_RUNSTDBY << SYSCTRL_OSC8M_RUNSTDBY_Pos)
    298e:	430b      	orrs	r3, r1
	hri_sysctrl_write_OSC8M_reg(hw,
    2990:	2102      	movs	r1, #2
    2992:	430b      	orrs	r3, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    2994:	6213      	str	r3, [r2, #32]
	tmp = ((Sysctrl *)hw)->OSC32K.reg;
    2996:	6993      	ldr	r3, [r2, #24]
	tmp = (tmp & SYSCTRL_OSC32K_CALIB_Msk) >> SYSCTRL_OSC32K_CALIB_Pos;
    2998:	0c1b      	lsrs	r3, r3, #16
	hri_sysctrl_write_OSC32K_reg(
	    hw,
#if CONF_OSC32K_OVERWRITE_CALIBRATION == 1
	    SYSCTRL_OSC32K_CALIB(CONF_OSC32K_CALIB) |
#else
	    SYSCTRL_OSC32K_CALIB(calib) |
    299a:	041b      	lsls	r3, r3, #16
    299c:	21fe      	movs	r1, #254	; 0xfe
    299e:	03c9      	lsls	r1, r1, #15
    29a0:	400b      	ands	r3, r1
#endif
	        (CONF_OSC32K_WRTLOCK << SYSCTRL_OSC32K_WRTLOCK_Pos) | SYSCTRL_OSC32K_STARTUP(CONF_OSC32K_STARTUP)
	        | (CONF_OSC32K_RUNSTDBY << SYSCTRL_OSC32K_RUNSTDBY_Pos) | (CONF_OSC32K_EN1K << SYSCTRL_OSC32K_EN1K_Pos)
	        | (CONF_OSC32K_EN32K << SYSCTRL_OSC32K_EN32K_Pos) | (1 << SYSCTRL_OSC32K_ENABLE_Pos));
    29a2:	2146      	movs	r1, #70	; 0x46
    29a4:	430b      	orrs	r3, r1
	((Sysctrl *)hw)->OSC32K.reg = data;
    29a6:	6193      	str	r3, [r2, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    29a8:	7f13      	ldrb	r3, [r2, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    29aa:	3927      	subs	r1, #39	; 0x27
    29ac:	400b      	ands	r3, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    29ae:	7713      	strb	r3, [r2, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) >> SYSCTRL_PCLKSR_XOSC32KRDY_Pos;
    29b0:	4b06      	ldr	r3, [pc, #24]	; (29cc <_sysctrl_init_sources+0x54>)
    29b2:	68db      	ldr	r3, [r3, #12]
	                                    (CONF_OSC32K_WRTLOCK << SYSCTRL_OSCULP32K_WRTLOCK_Pos));
#endif

#if CONF_XOSC32K_CONFIG == 1
#if CONF_XOSC32K_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_XOSC32KRDY_bit(hw))
    29b4:	079b      	lsls	r3, r3, #30
    29b6:	d5fb      	bpl.n	29b0 <_sysctrl_init_sources+0x38>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) >> SYSCTRL_PCLKSR_OSC32KRDY_Pos;
    29b8:	4b04      	ldr	r3, [pc, #16]	; (29cc <_sysctrl_init_sources+0x54>)
    29ba:	68db      	ldr	r3, [r3, #12]
#endif
#endif

#if CONF_OSC32K_CONFIG == 1
#if CONF_OSC32K_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC32KRDY_bit(hw))
    29bc:	075b      	lsls	r3, r3, #29
    29be:	d5fb      	bpl.n	29b8 <_sysctrl_init_sources+0x40>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    29c0:	4b02      	ldr	r3, [pc, #8]	; (29cc <_sysctrl_init_sources+0x54>)
    29c2:	68db      	ldr	r3, [r3, #12]
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    29c4:	071b      	lsls	r3, r3, #28
    29c6:	d5fb      	bpl.n	29c0 <_sysctrl_init_sources+0x48>
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    29c8:	4770      	bx	lr
    29ca:	46c0      	nop			; (mov r8, r8)
    29cc:	40000800 	.word	0x40000800
    29d0:	0fff0000 	.word	0x0fff0000

000029d4 <_sysctrl_init_referenced_generators>:
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    29d4:	2202      	movs	r2, #2
    29d6:	4b1f      	ldr	r3, [pc, #124]	; (2a54 <_sysctrl_init_referenced_generators+0x80>)
    29d8:	849a      	strh	r2, [r3, #36]	; 0x24
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    29da:	4b1e      	ldr	r3, [pc, #120]	; (2a54 <_sysctrl_init_referenced_generators+0x80>)
    29dc:	68db      	ldr	r3, [r3, #12]
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    29de:	06db      	lsls	r3, r3, #27
    29e0:	d5fb      	bpl.n	29da <_sysctrl_init_referenced_generators+0x6>
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
    29e2:	4a1d      	ldr	r2, [pc, #116]	; (2a58 <_sysctrl_init_referenced_generators+0x84>)
    29e4:	4b1b      	ldr	r3, [pc, #108]	; (2a54 <_sysctrl_init_referenced_generators+0x80>)
    29e6:	62da      	str	r2, [r3, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    29e8:	4b1c      	ldr	r3, [pc, #112]	; (2a5c <_sysctrl_init_referenced_generators+0x88>)
    29ea:	681b      	ldr	r3, [r3, #0]
    29ec:	0e9b      	lsrs	r3, r3, #26
    29ee:	2b3f      	cmp	r3, #63	; 0x3f
    29f0:	d028      	beq.n	2a44 <_sysctrl_init_referenced_generators+0x70>
    29f2:	029b      	lsls	r3, r3, #10
    29f4:	2280      	movs	r2, #128	; 0x80
    29f6:	0092      	lsls	r2, r2, #2
    29f8:	431a      	orrs	r2, r3
	((Sysctrl *)hw)->DFLLVAL.reg = data;
    29fa:	4b16      	ldr	r3, [pc, #88]	; (2a54 <_sysctrl_init_referenced_generators+0x80>)
    29fc:	629a      	str	r2, [r3, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    29fe:	2293      	movs	r2, #147	; 0x93
    2a00:	0052      	lsls	r2, r2, #1
    2a02:	849a      	strh	r2, [r3, #36]	; 0x24
}

static inline void hri_sysctrl_write_DPLLCTRLA_reg(const void *const hw, hri_sysctrl_dpllctrla_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DPLLCTRLA.reg = data;
    2a04:	2142      	movs	r1, #66	; 0x42
    2a06:	3ae2      	subs	r2, #226	; 0xe2
    2a08:	5499      	strb	r1, [r3, r2]
}

static inline void hri_sysctrl_write_DPLLRATIO_reg(const void *const hw, hri_sysctrl_dpllratio_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DPLLRATIO.reg = data;
    2a0a:	4a15      	ldr	r2, [pc, #84]	; (2a60 <_sysctrl_init_referenced_generators+0x8c>)
    2a0c:	649a      	str	r2, [r3, #72]	; 0x48
}

static inline void hri_sysctrl_write_DPLLCTRLB_reg(const void *const hw, hri_sysctrl_dpllctrlb_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DPLLCTRLB.reg = data;
    2a0e:	2200      	movs	r2, #0
    2a10:	64da      	str	r2, [r3, #76]	; 0x4c
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
    2a12:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
	        | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
    2a14:	075b      	lsls	r3, r3, #29
    2a16:	d518      	bpl.n	2a4a <_sysctrl_init_referenced_generators+0x76>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    2a18:	4b0e      	ldr	r3, [pc, #56]	; (2a54 <_sysctrl_init_referenced_generators+0x80>)
    2a1a:	68db      	ldr	r3, [r3, #12]
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;
#else
		hri_sysctrl_pclksr_reg_t status_mask = SYSCTRL_PCLKSR_DFLLRDY;
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
    2a1c:	06db      	lsls	r3, r3, #27
    2a1e:	d5fb      	bpl.n	2a18 <_sysctrl_init_referenced_generators+0x44>
	return (((Sysctrl *)hw)->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE) >> SYSCTRL_DPLLSTATUS_ENABLE_Pos;
    2a20:	2350      	movs	r3, #80	; 0x50
    2a22:	4a0c      	ldr	r2, [pc, #48]	; (2a54 <_sysctrl_init_referenced_generators+0x80>)
    2a24:	5cd3      	ldrb	r3, [r2, r3]
#endif
#endif

#if CONF_DPLL_CONFIG == 1
#if CONF_DPLL_ENABLE == 1
	while (!(hri_sysctrl_get_DPLLSTATUS_ENABLE_bit(hw) || hri_sysctrl_get_DPLLSTATUS_LOCK_bit(hw)
    2a26:	075b      	lsls	r3, r3, #29
    2a28:	d407      	bmi.n	2a3a <_sysctrl_init_referenced_generators+0x66>
	return (((Sysctrl *)hw)->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_LOCK) >> SYSCTRL_DPLLSTATUS_LOCK_Pos;
    2a2a:	2350      	movs	r3, #80	; 0x50
    2a2c:	5cd3      	ldrb	r3, [r2, r3]
    2a2e:	07db      	lsls	r3, r3, #31
    2a30:	d403      	bmi.n	2a3a <_sysctrl_init_referenced_generators+0x66>
	return (((Sysctrl *)hw)->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_CLKRDY) >> SYSCTRL_DPLLSTATUS_CLKRDY_Pos;
    2a32:	2350      	movs	r3, #80	; 0x50
    2a34:	5cd3      	ldrb	r3, [r2, r3]
    2a36:	079b      	lsls	r3, r3, #30
    2a38:	d5f2      	bpl.n	2a20 <_sysctrl_init_referenced_generators+0x4c>
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
    2a3a:	4b0a      	ldr	r3, [pc, #40]	; (2a64 <_sysctrl_init_referenced_generators+0x90>)
    2a3c:	785b      	ldrb	r3, [r3, #1]
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
    2a3e:	09db      	lsrs	r3, r3, #7
    2a40:	d1fb      	bne.n	2a3a <_sysctrl_init_referenced_generators+0x66>
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    2a42:	4770      	bx	lr
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    2a44:	22fc      	movs	r2, #252	; 0xfc
    2a46:	01d2      	lsls	r2, r2, #7
    2a48:	e7d7      	b.n	29fa <_sysctrl_init_referenced_generators+0x26>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    2a4a:	4b02      	ldr	r3, [pc, #8]	; (2a54 <_sysctrl_init_referenced_generators+0x80>)
    2a4c:	68db      	ldr	r3, [r3, #12]
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    2a4e:	06db      	lsls	r3, r3, #27
    2a50:	d5fb      	bpl.n	2a4a <_sysctrl_init_referenced_generators+0x76>
    2a52:	e7e5      	b.n	2a20 <_sysctrl_init_referenced_generators+0x4c>
    2a54:	40000800 	.word	0x40000800
    2a58:	0401bb80 	.word	0x0401bb80
    2a5c:	00806024 	.word	0x00806024
    2a60:	000e05b7 	.word	0x000e05b7
    2a64:	40000c00 	.word	0x40000c00

00002a68 <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    2a68:	4b02      	ldr	r3, [pc, #8]	; (2a74 <_system_time_init+0xc>)
    2a6a:	4a03      	ldr	r2, [pc, #12]	; (2a78 <_system_time_init+0x10>)
    2a6c:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    2a6e:	2205      	movs	r2, #5
    2a70:	601a      	str	r2, [r3, #0]
	                | (1 << SysTick_CTRL_CLKSOURCE_Pos);
}
    2a72:	4770      	bx	lr
    2a74:	e000e010 	.word	0xe000e010
    2a78:	00ffffff 	.word	0x00ffffff

00002a7c <_delay_init>:
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
    2a7c:	b510      	push	{r4, lr}
	_system_time_init(hw);
    2a7e:	4b01      	ldr	r3, [pc, #4]	; (2a84 <_delay_init+0x8>)
    2a80:	4798      	blx	r3
}
    2a82:	bd10      	pop	{r4, pc}
    2a84:	00002a69 	.word	0x00002a69

00002a88 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    2a88:	0e08      	lsrs	r0, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    2a8a:	e00b      	b.n	2aa4 <_delay_cycles+0x1c>
		SysTick->LOAD = 0xFFFFFF;
    2a8c:	4b0b      	ldr	r3, [pc, #44]	; (2abc <_delay_cycles+0x34>)
    2a8e:	480c      	ldr	r0, [pc, #48]	; (2ac0 <_delay_cycles+0x38>)
    2a90:	6058      	str	r0, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
    2a92:	6098      	str	r0, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    2a94:	4b09      	ldr	r3, [pc, #36]	; (2abc <_delay_cycles+0x34>)
    2a96:	681b      	ldr	r3, [r3, #0]
    2a98:	03db      	lsls	r3, r3, #15
    2a9a:	d5fb      	bpl.n	2a94 <_delay_cycles+0xc>
			;
		buf -= 0xFFFFFF;
    2a9c:	4b09      	ldr	r3, [pc, #36]	; (2ac4 <_delay_cycles+0x3c>)
    2a9e:	469c      	mov	ip, r3
    2aa0:	4461      	add	r1, ip
	while (n--) {
    2aa2:	0010      	movs	r0, r2
    2aa4:	1e42      	subs	r2, r0, #1
    2aa6:	b2d2      	uxtb	r2, r2
    2aa8:	2800      	cmp	r0, #0
    2aaa:	d1ef      	bne.n	2a8c <_delay_cycles+0x4>
	}

	SysTick->LOAD = buf;
    2aac:	4b03      	ldr	r3, [pc, #12]	; (2abc <_delay_cycles+0x34>)
    2aae:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    2ab0:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    2ab2:	4b02      	ldr	r3, [pc, #8]	; (2abc <_delay_cycles+0x34>)
    2ab4:	681b      	ldr	r3, [r3, #0]
    2ab6:	03db      	lsls	r3, r3, #15
    2ab8:	d5fb      	bpl.n	2ab2 <_delay_cycles+0x2a>
		;
}
    2aba:	4770      	bx	lr
    2abc:	e000e010 	.word	0xe000e010
    2ac0:	00ffffff 	.word	0x00ffffff
    2ac4:	ff000001 	.word	0xff000001

00002ac8 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    2ac8:	b510      	push	{r4, lr}
	void *const hw = device->hw;
    2aca:	68c3      	ldr	r3, [r0, #12]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    2acc:	7b9a      	ldrb	r2, [r3, #14]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    2ace:	07d2      	lsls	r2, r2, #31
    2ad0:	d400      	bmi.n	2ad4 <tc_interrupt_handler+0xc>
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
	}
}
    2ad2:	bd10      	pop	{r4, pc}
}

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    2ad4:	2201      	movs	r2, #1
    2ad6:	739a      	strb	r2, [r3, #14]
		device->timer_cb.period_expired(device);
    2ad8:	6803      	ldr	r3, [r0, #0]
    2ada:	4798      	blx	r3
}
    2adc:	e7f9      	b.n	2ad2 <tc_interrupt_handler+0xa>
	...

00002ae0 <tc_get_hardware_index>:
 * \param[in] hw The pointer to hardware instance
 */
static uint8_t tc_get_hardware_index(const void *const hw)
{
#ifndef _UNIT_TEST_
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    2ae0:	4b02      	ldr	r3, [pc, #8]	; (2aec <tc_get_hardware_index+0xc>)
    2ae2:	469c      	mov	ip, r3
    2ae4:	4460      	add	r0, ip
    2ae6:	0a80      	lsrs	r0, r0, #10
    2ae8:	b2c0      	uxtb	r0, r0
#else
	return ((uint32_t)hw - TC_HW_BASE_ADDR) / sizeof(Tc);
#endif
}
    2aea:	4770      	bx	lr
    2aec:	bdffd400 	.word	0xbdffd400

00002af0 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC3) {
    2af0:	4b06      	ldr	r3, [pc, #24]	; (2b0c <_tc_init_irq_param+0x1c>)
    2af2:	4298      	cmp	r0, r3
    2af4:	d003      	beq.n	2afe <_tc_init_irq_param+0xe>
		_tc3_dev = (struct _timer_device *)dev;
	}
	if (hw == TC4) {
    2af6:	4b06      	ldr	r3, [pc, #24]	; (2b10 <_tc_init_irq_param+0x20>)
    2af8:	4298      	cmp	r0, r3
    2afa:	d003      	beq.n	2b04 <_tc_init_irq_param+0x14>
		_tc4_dev = (struct _timer_device *)dev;
	}
}
    2afc:	4770      	bx	lr
		_tc3_dev = (struct _timer_device *)dev;
    2afe:	4b05      	ldr	r3, [pc, #20]	; (2b14 <_tc_init_irq_param+0x24>)
    2b00:	6019      	str	r1, [r3, #0]
    2b02:	e7f8      	b.n	2af6 <_tc_init_irq_param+0x6>
		_tc4_dev = (struct _timer_device *)dev;
    2b04:	4b03      	ldr	r3, [pc, #12]	; (2b14 <_tc_init_irq_param+0x24>)
    2b06:	6059      	str	r1, [r3, #4]
}
    2b08:	e7f8      	b.n	2afc <_tc_init_irq_param+0xc>
    2b0a:	46c0      	nop			; (mov r8, r8)
    2b0c:	42002c00 	.word	0x42002c00
    2b10:	42003000 	.word	0x42003000
    2b14:	20000158 	.word	0x20000158

00002b18 <get_tc_index>:
{
    2b18:	b510      	push	{r4, lr}
	uint8_t tc_offset = tc_get_hardware_index(hw) + TC_NUMBER_OFFSET;
    2b1a:	4b0e      	ldr	r3, [pc, #56]	; (2b54 <get_tc_index+0x3c>)
    2b1c:	4798      	blx	r3
    2b1e:	3003      	adds	r0, #3
    2b20:	b2c0      	uxtb	r0, r0
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    2b22:	2300      	movs	r3, #0
    2b24:	2b01      	cmp	r3, #1
    2b26:	d80b      	bhi.n	2b40 <get_tc_index+0x28>
		if (_tcs[i].number == tc_offset) {
    2b28:	009a      	lsls	r2, r3, #2
    2b2a:	18d2      	adds	r2, r2, r3
    2b2c:	0091      	lsls	r1, r2, #2
    2b2e:	4a0a      	ldr	r2, [pc, #40]	; (2b58 <get_tc_index+0x40>)
    2b30:	5c8a      	ldrb	r2, [r1, r2]
    2b32:	4290      	cmp	r0, r2
    2b34:	d002      	beq.n	2b3c <get_tc_index+0x24>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    2b36:	3301      	adds	r3, #1
    2b38:	b2db      	uxtb	r3, r3
    2b3a:	e7f3      	b.n	2b24 <get_tc_index+0xc>
			return i;
    2b3c:	b258      	sxtb	r0, r3
    2b3e:	e007      	b.n	2b50 <get_tc_index+0x38>
	ASSERT(false);
    2b40:	22a4      	movs	r2, #164	; 0xa4
    2b42:	0052      	lsls	r2, r2, #1
    2b44:	4905      	ldr	r1, [pc, #20]	; (2b5c <get_tc_index+0x44>)
    2b46:	2000      	movs	r0, #0
    2b48:	4b05      	ldr	r3, [pc, #20]	; (2b60 <get_tc_index+0x48>)
    2b4a:	4798      	blx	r3
	return -1;
    2b4c:	2001      	movs	r0, #1
    2b4e:	4240      	negs	r0, r0
}
    2b50:	bd10      	pop	{r4, pc}
    2b52:	46c0      	nop			; (mov r8, r8)
    2b54:	00002ae1 	.word	0x00002ae1
    2b58:	000058bc 	.word	0x000058bc
    2b5c:	000058e4 	.word	0x000058e4
    2b60:	00001e29 	.word	0x00001e29

00002b64 <_timer_init>:
{
    2b64:	b570      	push	{r4, r5, r6, lr}
    2b66:	0006      	movs	r6, r0
    2b68:	000c      	movs	r4, r1
	int8_t i = get_tc_index(hw);
    2b6a:	0008      	movs	r0, r1
    2b6c:	4b3f      	ldr	r3, [pc, #252]	; (2c6c <_timer_init+0x108>)
    2b6e:	4798      	blx	r3
    2b70:	0005      	movs	r5, r0
	device->hw = hw;
    2b72:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    2b74:	228d      	movs	r2, #141	; 0x8d
    2b76:	493e      	ldr	r1, [pc, #248]	; (2c70 <_timer_init+0x10c>)
    2b78:	2001      	movs	r0, #1
    2b7a:	4b3e      	ldr	r3, [pc, #248]	; (2c74 <_timer_init+0x110>)
    2b7c:	4798      	blx	r3
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    2b7e:	7be3      	ldrb	r3, [r4, #15]
    2b80:	09db      	lsrs	r3, r3, #7
    2b82:	d1fc      	bne.n	2b7e <_timer_init+0x1a>
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    2b84:	8823      	ldrh	r3, [r4, #0]
	if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    2b86:	079b      	lsls	r3, r3, #30
    2b88:	d504      	bpl.n	2b94 <_timer_init+0x30>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    2b8a:	2300      	movs	r3, #0
    2b8c:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    2b8e:	7be3      	ldrb	r3, [r4, #15]
    2b90:	09db      	lsrs	r3, r3, #7
    2b92:	d1fc      	bne.n	2b8e <_timer_init+0x2a>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    2b94:	2301      	movs	r3, #1
    2b96:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    2b98:	7be3      	ldrb	r3, [r4, #15]
    2b9a:	09db      	lsrs	r3, r3, #7
    2b9c:	d1fc      	bne.n	2b98 <_timer_init+0x34>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    2b9e:	00aa      	lsls	r2, r5, #2
    2ba0:	1952      	adds	r2, r2, r5
    2ba2:	0091      	lsls	r1, r2, #2
    2ba4:	4b34      	ldr	r3, [pc, #208]	; (2c78 <_timer_init+0x114>)
    2ba6:	185b      	adds	r3, r3, r1
    2ba8:	885a      	ldrh	r2, [r3, #2]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    2baa:	8022      	strh	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    2bac:	7919      	ldrb	r1, [r3, #4]
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    2bae:	7221      	strb	r1, [r4, #8]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    2bb0:	88db      	ldrh	r3, [r3, #6]
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    2bb2:	8163      	strh	r3, [r4, #10]
    2bb4:	230c      	movs	r3, #12
    2bb6:	4013      	ands	r3, r2
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    2bb8:	2b08      	cmp	r3, #8
    2bba:	d039      	beq.n	2c30 <_timer_init+0xcc>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    2bbc:	2b00      	cmp	r3, #0
    2bbe:	d143      	bne.n	2c48 <_timer_init+0xe4>
		hri_tccount16_write_CC_reg(hw, 0, (hri_tccount16_cc_reg_t)_tcs[i].cc0);
    2bc0:	4a2d      	ldr	r2, [pc, #180]	; (2c78 <_timer_init+0x114>)
    2bc2:	00ab      	lsls	r3, r5, #2
    2bc4:	1958      	adds	r0, r3, r5
    2bc6:	0081      	lsls	r1, r0, #2
    2bc8:	0008      	movs	r0, r1
    2bca:	1851      	adds	r1, r2, r1
    2bcc:	8989      	ldrh	r1, [r1, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2bce:	8321      	strh	r1, [r4, #24]
		hri_tccount16_write_CC_reg(hw, 1, (hri_tccount16_cc_reg_t)_tcs[i].cc1);
    2bd0:	1812      	adds	r2, r2, r0
    2bd2:	8a13      	ldrh	r3, [r2, #16]
    2bd4:	8363      	strh	r3, [r4, #26]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    2bd6:	2301      	movs	r3, #1
    2bd8:	7363      	strb	r3, [r4, #13]
	_tc_init_irq_param(hw, (void *)device);
    2bda:	0031      	movs	r1, r6
    2bdc:	0020      	movs	r0, r4
    2bde:	4b27      	ldr	r3, [pc, #156]	; (2c7c <_timer_init+0x118>)
    2be0:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    2be2:	0020      	movs	r0, r4
    2be4:	4b26      	ldr	r3, [pc, #152]	; (2c80 <_timer_init+0x11c>)
    2be6:	4798      	blx	r3
    2be8:	3012      	adds	r0, #18
    2bea:	b2c0      	uxtb	r0, r0
    2bec:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    2bee:	2b00      	cmp	r3, #0
    2bf0:	db0a      	blt.n	2c08 <_timer_init+0xa4>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2bf2:	211f      	movs	r1, #31
    2bf4:	4001      	ands	r1, r0
    2bf6:	2201      	movs	r2, #1
    2bf8:	408a      	lsls	r2, r1
    2bfa:	2180      	movs	r1, #128	; 0x80
    2bfc:	4c21      	ldr	r4, [pc, #132]	; (2c84 <_timer_init+0x120>)
    2bfe:	5062      	str	r2, [r4, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    2c00:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2c04:	f3bf 8f6f 	isb	sy
  if ((int32_t)(IRQn) >= 0)
    2c08:	2b00      	cmp	r3, #0
    2c0a:	db07      	blt.n	2c1c <_timer_init+0xb8>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2c0c:	211f      	movs	r1, #31
    2c0e:	4001      	ands	r1, r0
    2c10:	2201      	movs	r2, #1
    2c12:	408a      	lsls	r2, r1
    2c14:	21c0      	movs	r1, #192	; 0xc0
    2c16:	0049      	lsls	r1, r1, #1
    2c18:	4c1a      	ldr	r4, [pc, #104]	; (2c84 <_timer_init+0x120>)
    2c1a:	5062      	str	r2, [r4, r1]
  if ((int32_t)(IRQn) >= 0)
    2c1c:	2b00      	cmp	r3, #0
    2c1e:	db05      	blt.n	2c2c <_timer_init+0xc8>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2c20:	231f      	movs	r3, #31
    2c22:	4018      	ands	r0, r3
    2c24:	3b1e      	subs	r3, #30
    2c26:	4083      	lsls	r3, r0
    2c28:	4a16      	ldr	r2, [pc, #88]	; (2c84 <_timer_init+0x120>)
    2c2a:	6013      	str	r3, [r2, #0]
}
    2c2c:	2000      	movs	r0, #0
    2c2e:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    2c30:	4a11      	ldr	r2, [pc, #68]	; (2c78 <_timer_init+0x114>)
    2c32:	00ab      	lsls	r3, r5, #2
    2c34:	1958      	adds	r0, r3, r5
    2c36:	0081      	lsls	r1, r0, #2
    2c38:	0008      	movs	r0, r1
    2c3a:	1851      	adds	r1, r2, r1
    2c3c:	68c9      	ldr	r1, [r1, #12]
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2c3e:	61a1      	str	r1, [r4, #24]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    2c40:	1812      	adds	r2, r2, r0
    2c42:	6913      	ldr	r3, [r2, #16]
    2c44:	61e3      	str	r3, [r4, #28]
    2c46:	e7c6      	b.n	2bd6 <_timer_init+0x72>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    2c48:	2b04      	cmp	r3, #4
    2c4a:	d1c4      	bne.n	2bd6 <_timer_init+0x72>
		hri_tccount8_write_CC_reg(hw, 0, (hri_tccount8_cc_reg_t)_tcs[i].cc0);
    2c4c:	490a      	ldr	r1, [pc, #40]	; (2c78 <_timer_init+0x114>)
    2c4e:	00ab      	lsls	r3, r5, #2
    2c50:	1958      	adds	r0, r3, r5
    2c52:	0082      	lsls	r2, r0, #2
    2c54:	188a      	adds	r2, r1, r2
    2c56:	7b10      	ldrb	r0, [r2, #12]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    2c58:	7620      	strb	r0, [r4, #24]
		hri_tccount8_write_CC_reg(hw, 1, (hri_tccount8_cc_reg_t)_tcs[i].cc1);
    2c5a:	7c12      	ldrb	r2, [r2, #16]
    2c5c:	7662      	strb	r2, [r4, #25]
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    2c5e:	195d      	adds	r5, r3, r5
    2c60:	00ab      	lsls	r3, r5, #2
    2c62:	18c9      	adds	r1, r1, r3
    2c64:	7a0b      	ldrb	r3, [r1, #8]
	((Tc *)hw)->COUNT8.PER.reg = data;
    2c66:	7523      	strb	r3, [r4, #20]
    2c68:	e7b5      	b.n	2bd6 <_timer_init+0x72>
    2c6a:	46c0      	nop			; (mov r8, r8)
    2c6c:	00002b19 	.word	0x00002b19
    2c70:	000058e4 	.word	0x000058e4
    2c74:	00001e29 	.word	0x00001e29
    2c78:	000058bc 	.word	0x000058bc
    2c7c:	00002af1 	.word	0x00002af1
    2c80:	00002ae1 	.word	0x00002ae1
    2c84:	e000e100 	.word	0xe000e100

00002c88 <_timer_start>:
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    2c88:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    2c8a:	8813      	ldrh	r3, [r2, #0]
    2c8c:	2102      	movs	r1, #2
    2c8e:	430b      	orrs	r3, r1
    2c90:	b29b      	uxth	r3, r3
    2c92:	8013      	strh	r3, [r2, #0]
}
    2c94:	4770      	bx	lr

00002c96 <_timer_stop>:
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    2c96:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    2c98:	8813      	ldrh	r3, [r2, #0]
    2c9a:	2102      	movs	r1, #2
    2c9c:	438b      	bics	r3, r1
    2c9e:	8013      	strh	r3, [r2, #0]
}
    2ca0:	4770      	bx	lr

00002ca2 <_timer_is_started>:
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    2ca2:	68c3      	ldr	r3, [r0, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    2ca4:	881b      	ldrh	r3, [r3, #0]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    2ca6:	085b      	lsrs	r3, r3, #1
	return (bool)tmp;
    2ca8:	2001      	movs	r0, #1
    2caa:	4018      	ands	r0, r3
}
    2cac:	4770      	bx	lr

00002cae <_tc_get_timer>:
}
    2cae:	2000      	movs	r0, #0
    2cb0:	4770      	bx	lr
	...

00002cb4 <_timer_set_irq>:
{
    2cb4:	b510      	push	{r4, lr}
	_irq_set((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(device->hw)));
    2cb6:	68c0      	ldr	r0, [r0, #12]
    2cb8:	4b03      	ldr	r3, [pc, #12]	; (2cc8 <_timer_set_irq+0x14>)
    2cba:	4798      	blx	r3
    2cbc:	3012      	adds	r0, #18
    2cbe:	b2c0      	uxtb	r0, r0
    2cc0:	4b02      	ldr	r3, [pc, #8]	; (2ccc <_timer_set_irq+0x18>)
    2cc2:	4798      	blx	r3
}
    2cc4:	bd10      	pop	{r4, pc}
    2cc6:	46c0      	nop			; (mov r8, r8)
    2cc8:	00002ae1 	.word	0x00002ae1
    2ccc:	00001ffd 	.word	0x00001ffd

00002cd0 <TC3_Handler>:
{
    2cd0:	b510      	push	{r4, lr}
	tc_interrupt_handler(_tc3_dev);
    2cd2:	4b02      	ldr	r3, [pc, #8]	; (2cdc <TC3_Handler+0xc>)
    2cd4:	6818      	ldr	r0, [r3, #0]
    2cd6:	4b02      	ldr	r3, [pc, #8]	; (2ce0 <TC3_Handler+0x10>)
    2cd8:	4798      	blx	r3
}
    2cda:	bd10      	pop	{r4, pc}
    2cdc:	20000158 	.word	0x20000158
    2ce0:	00002ac9 	.word	0x00002ac9

00002ce4 <TC4_Handler>:
{
    2ce4:	b510      	push	{r4, lr}
	tc_interrupt_handler(_tc4_dev);
    2ce6:	4b02      	ldr	r3, [pc, #8]	; (2cf0 <TC4_Handler+0xc>)
    2ce8:	6858      	ldr	r0, [r3, #4]
    2cea:	4b02      	ldr	r3, [pc, #8]	; (2cf4 <TC4_Handler+0x10>)
    2cec:	4798      	blx	r3
}
    2cee:	bd10      	pop	{r4, pc}
    2cf0:	20000158 	.word	0x20000158
    2cf4:	00002ac9 	.word	0x00002ac9

00002cf8 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    2cf8:	2000      	movs	r0, #0
    2cfa:	4770      	bx	lr

00002cfc <_usb_load_calib>:
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 55
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    2cfc:	4b12      	ldr	r3, [pc, #72]	; (2d48 <_usb_load_calib+0x4c>)
    2cfe:	681a      	ldr	r2, [r3, #0]
    2d00:	0b53      	lsrs	r3, r2, #13
	uint32_t pad_transn
    2d02:	211f      	movs	r1, #31
    2d04:	400b      	ands	r3, r1
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    2d06:	0c90      	lsrs	r0, r2, #18
	uint32_t pad_transp
    2d08:	4001      	ands	r1, r0
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    2d0a:	0dd0      	lsrs	r0, r2, #23
    2d0c:	2207      	movs	r2, #7
    2d0e:	4002      	ands	r2, r0
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0x1F) {
    2d10:	2b1f      	cmp	r3, #31
    2d12:	d012      	beq.n	2d3a <_usb_load_calib+0x3e>
		pad_transn = 5;
	}
	if (pad_transp == 0x1F) {
    2d14:	291f      	cmp	r1, #31
    2d16:	d012      	beq.n	2d3e <_usb_load_calib+0x42>
		pad_transp = 29;
	}
	if (pad_trim == 0x7) {
    2d18:	2a07      	cmp	r2, #7
    2d1a:	d012      	beq.n	2d42 <_usb_load_calib+0x46>
		pad_trim = 5;
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    2d1c:	019b      	lsls	r3, r3, #6
    2d1e:	430b      	orrs	r3, r1
    2d20:	0312      	lsls	r2, r2, #12
    2d22:	4313      	orrs	r3, r2
    2d24:	4a09      	ldr	r2, [pc, #36]	; (2d4c <_usb_load_calib+0x50>)
    2d26:	8513      	strh	r3, [r2, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    2d28:	78d3      	ldrb	r3, [r2, #3]
    2d2a:	2103      	movs	r1, #3
    2d2c:	430b      	orrs	r3, r1
    2d2e:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    2d30:	78d3      	ldrb	r3, [r2, #3]
    2d32:	210c      	movs	r1, #12
    2d34:	430b      	orrs	r3, r1
    2d36:	70d3      	strb	r3, [r2, #3]
}
    2d38:	4770      	bx	lr
		pad_transn = 5;
    2d3a:	3b1a      	subs	r3, #26
    2d3c:	e7ea      	b.n	2d14 <_usb_load_calib+0x18>
		pad_transp = 29;
    2d3e:	3902      	subs	r1, #2
    2d40:	e7ea      	b.n	2d18 <_usb_load_calib+0x1c>
		pad_trim = 5;
    2d42:	3a02      	subs	r2, #2
    2d44:	e7ea      	b.n	2d1c <_usb_load_calib+0x20>
    2d46:	46c0      	nop			; (mov r8, r8)
    2d48:	00806024 	.word	0x00806024
    2d4c:	41005000 	.word	0x41005000

00002d50 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    2d50:	b510      	push	{r4, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    2d52:	7c83      	ldrb	r3, [r0, #18]
    2d54:	220f      	movs	r2, #15
    2d56:	4013      	ands	r3, r2
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2d58:	7cc1      	ldrb	r1, [r0, #19]
    2d5a:	3a08      	subs	r2, #8
    2d5c:	400a      	ands	r2, r1

	if (!is_ctrl) {
    2d5e:	2a01      	cmp	r2, #1
    2d60:	d00d      	beq.n	2d7e <_usb_d_dev_handle_setup+0x2e>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2d62:	001a      	movs	r2, r3
    2d64:	3208      	adds	r2, #8
    2d66:	0152      	lsls	r2, r2, #5
    2d68:	4919      	ldr	r1, [pc, #100]	; (2dd0 <_usb_d_dev_handle_setup+0x80>)
    2d6a:	468c      	mov	ip, r1
    2d6c:	4462      	add	r2, ip
    2d6e:	2110      	movs	r1, #16
    2d70:	71d1      	strb	r1, [r2, #7]
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    2d72:	015b      	lsls	r3, r3, #5
    2d74:	4a17      	ldr	r2, [pc, #92]	; (2dd4 <_usb_d_dev_handle_setup+0x84>)
    2d76:	4694      	mov	ip, r2
    2d78:	4463      	add	r3, ip
    2d7a:	7019      	strb	r1, [r3, #0]
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
}
    2d7c:	bd10      	pop	{r4, pc}
	if (_usb_d_dev_ep_is_busy(ept)) {
    2d7e:	064a      	lsls	r2, r1, #25
    2d80:	d50c      	bpl.n	2d9c <_usb_d_dev_handle_setup+0x4c>
		ept->flags.bits.is_busy = 0;
    2d82:	7cc2      	ldrb	r2, [r0, #19]
    2d84:	2140      	movs	r1, #64	; 0x40
    2d86:	438a      	bics	r2, r1
    2d88:	74c2      	strb	r2, [r0, #19]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2d8a:	001a      	movs	r2, r3
    2d8c:	3208      	adds	r2, #8
    2d8e:	0152      	lsls	r2, r2, #5
    2d90:	4c0f      	ldr	r4, [pc, #60]	; (2dd0 <_usb_d_dev_handle_setup+0x80>)
    2d92:	46a4      	mov	ip, r4
    2d94:	4462      	add	r2, ip
    2d96:	2480      	movs	r4, #128	; 0x80
    2d98:	7114      	strb	r4, [r2, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2d9a:	7151      	strb	r1, [r2, #5]
	ept->flags.bits.is_stalled = 0;
    2d9c:	7cc2      	ldrb	r2, [r0, #19]
    2d9e:	2108      	movs	r1, #8
    2da0:	438a      	bics	r2, r1
    2da2:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    2da4:	015a      	lsls	r2, r3, #5
    2da6:	490c      	ldr	r1, [pc, #48]	; (2dd8 <_usb_d_dev_handle_setup+0x88>)
    2da8:	1889      	adds	r1, r1, r2
    2daa:	2400      	movs	r4, #0
    2dac:	728c      	strb	r4, [r1, #10]
    2dae:	768c      	strb	r4, [r1, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2db0:	3308      	adds	r3, #8
    2db2:	015b      	lsls	r3, r3, #5
    2db4:	4906      	ldr	r1, [pc, #24]	; (2dd0 <_usb_d_dev_handle_setup+0x80>)
    2db6:	468c      	mov	ip, r1
    2db8:	4463      	add	r3, ip
    2dba:	216f      	movs	r1, #111	; 0x6f
    2dbc:	71d9      	strb	r1, [r3, #7]
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2dbe:	4b05      	ldr	r3, [pc, #20]	; (2dd4 <_usb_d_dev_handle_setup+0x84>)
    2dc0:	469c      	mov	ip, r3
    2dc2:	4462      	add	r2, ip
    2dc4:	7011      	strb	r1, [r2, #0]
	dev_inst.ep_callbacks.setup(ept->ep);
    2dc6:	4b05      	ldr	r3, [pc, #20]	; (2ddc <_usb_d_dev_handle_setup+0x8c>)
    2dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2dca:	7c80      	ldrb	r0, [r0, #18]
    2dcc:	4798      	blx	r3
    2dce:	e7d5      	b.n	2d7c <_usb_d_dev_handle_setup+0x2c>
    2dd0:	41005000 	.word	0x41005000
    2dd4:	41005108 	.word	0x41005108
    2dd8:	20000160 	.word	0x20000160
    2ddc:	200001e0 	.word	0x200001e0

00002de0 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    2de0:	b510      	push	{r4, lr}
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2de2:	7c82      	ldrb	r2, [r0, #18]
    2de4:	230f      	movs	r3, #15
    2de6:	4013      	ands	r3, r2
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    2de8:	2220      	movs	r2, #32
    2dea:	408a      	lsls	r2, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    2dec:	b2d2      	uxtb	r2, r2
    2dee:	015b      	lsls	r3, r3, #5
    2df0:	4905      	ldr	r1, [pc, #20]	; (2e08 <_usb_d_dev_handle_stall+0x28>)
    2df2:	468c      	mov	ip, r1
    2df4:	4463      	add	r3, ip
    2df6:	701a      	strb	r2, [r3, #0]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    2df8:	4b04      	ldr	r3, [pc, #16]	; (2e0c <_usb_d_dev_handle_stall+0x2c>)
    2dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2dfc:	6882      	ldr	r2, [r0, #8]
    2dfe:	7c80      	ldrb	r0, [r0, #18]
    2e00:	2101      	movs	r1, #1
    2e02:	4798      	blx	r3
}
    2e04:	bd10      	pop	{r4, pc}
    2e06:	46c0      	nop			; (mov r8, r8)
    2e08:	41005108 	.word	0x41005108
    2e0c:	200001e0 	.word	0x200001e0

00002e10 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    2e10:	b510      	push	{r4, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    2e12:	7c83      	ldrb	r3, [r0, #18]
    2e14:	2bff      	cmp	r3, #255	; 0xff
    2e16:	d002      	beq.n	2e1e <_usb_d_dev_trans_done+0xe>
    2e18:	7cc2      	ldrb	r2, [r0, #19]
    2e1a:	0652      	lsls	r2, r2, #25
    2e1c:	d400      	bmi.n	2e20 <_usb_d_dev_trans_done+0x10>
		return;
	}
	ept->flags.bits.is_busy = 0;
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
}
    2e1e:	bd10      	pop	{r4, pc}
	ept->flags.bits.is_busy = 0;
    2e20:	7cc2      	ldrb	r2, [r0, #19]
    2e22:	2440      	movs	r4, #64	; 0x40
    2e24:	43a2      	bics	r2, r4
    2e26:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    2e28:	4a02      	ldr	r2, [pc, #8]	; (2e34 <_usb_d_dev_trans_done+0x24>)
    2e2a:	6b14      	ldr	r4, [r2, #48]	; 0x30
    2e2c:	6882      	ldr	r2, [r0, #8]
    2e2e:	0018      	movs	r0, r3
    2e30:	47a0      	blx	r4
    2e32:	e7f4      	b.n	2e1e <_usb_d_dev_trans_done+0xe>
    2e34:	200001e0 	.word	0x200001e0

00002e38 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    2e38:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e3a:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2e3c:	7c84      	ldrb	r4, [r0, #18]
    2e3e:	230f      	movs	r3, #15
    2e40:	4023      	ands	r3, r4
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    2e42:	4d18      	ldr	r5, [pc, #96]	; (2ea4 <_usb_d_dev_trans_stop+0x6c>)
    2e44:	882e      	ldrh	r6, [r5, #0]
    2e46:	ad01      	add	r5, sp, #4
    2e48:	802e      	strh	r6, [r5, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    2e4a:	2cff      	cmp	r4, #255	; 0xff
    2e4c:	d01e      	beq.n	2e8c <_usb_d_dev_trans_stop+0x54>
    2e4e:	7cc4      	ldrb	r4, [r0, #19]
    2e50:	0664      	lsls	r4, r4, #25
    2e52:	d51b      	bpl.n	2e8c <_usb_d_dev_trans_stop+0x54>
		return;
	}
	/* Stop transfer */
	if (dir) {
    2e54:	2900      	cmp	r1, #0
    2e56:	d01b      	beq.n	2e90 <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2e58:	001c      	movs	r4, r3
    2e5a:	3408      	adds	r4, #8
    2e5c:	0164      	lsls	r4, r4, #5
    2e5e:	4d12      	ldr	r5, [pc, #72]	; (2ea8 <_usb_d_dev_trans_stop+0x70>)
    2e60:	46ac      	mov	ip, r5
    2e62:	4464      	add	r4, ip
    2e64:	2580      	movs	r5, #128	; 0x80
    2e66:	7125      	strb	r5, [r4, #4]
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    2e68:	ad01      	add	r5, sp, #4
    2e6a:	5c6e      	ldrb	r6, [r5, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2e6c:	001c      	movs	r4, r3
    2e6e:	3408      	adds	r4, #8
    2e70:	0164      	lsls	r4, r4, #5
    2e72:	4f0d      	ldr	r7, [pc, #52]	; (2ea8 <_usb_d_dev_trans_stop+0x70>)
    2e74:	46bc      	mov	ip, r7
    2e76:	4464      	add	r4, ip
    2e78:	71e6      	strb	r6, [r4, #7]
	_usbd_ep_int_dis(epn, intflags[dir]);
    2e7a:	5c69      	ldrb	r1, [r5, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2e7c:	015b      	lsls	r3, r3, #5
    2e7e:	4c0b      	ldr	r4, [pc, #44]	; (2eac <_usb_d_dev_trans_stop+0x74>)
    2e80:	46a4      	mov	ip, r4
    2e82:	4463      	add	r3, ip
    2e84:	7019      	strb	r1, [r3, #0]
	_usb_d_dev_trans_done(ept, code);
    2e86:	0011      	movs	r1, r2
    2e88:	4b09      	ldr	r3, [pc, #36]	; (2eb0 <_usb_d_dev_trans_stop+0x78>)
    2e8a:	4798      	blx	r3
}
    2e8c:	b003      	add	sp, #12
    2e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2e90:	001c      	movs	r4, r3
    2e92:	3408      	adds	r4, #8
    2e94:	0164      	lsls	r4, r4, #5
    2e96:	4d04      	ldr	r5, [pc, #16]	; (2ea8 <_usb_d_dev_trans_stop+0x70>)
    2e98:	46ac      	mov	ip, r5
    2e9a:	4464      	add	r4, ip
    2e9c:	2540      	movs	r5, #64	; 0x40
    2e9e:	7165      	strb	r5, [r4, #5]
    2ea0:	e7e2      	b.n	2e68 <_usb_d_dev_trans_stop+0x30>
    2ea2:	46c0      	nop			; (mov r8, r8)
    2ea4:	000058f8 	.word	0x000058f8
    2ea8:	41005000 	.word	0x41005000
    2eac:	41005108 	.word	0x41005108
    2eb0:	00002e11 	.word	0x00002e11

00002eb4 <_usb_d_dev_handle_trfail>:
{
    2eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2eb6:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    2eb8:	7c83      	ldrb	r3, [r0, #18]
    2eba:	220f      	movs	r2, #15
    2ebc:	4013      	ands	r3, r2
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    2ebe:	4a3c      	ldr	r2, [pc, #240]	; (2fb0 <_usb_d_dev_handle_trfail+0xfc>)
    2ec0:	8894      	ldrh	r4, [r2, #4]
    2ec2:	aa01      	add	r2, sp, #4
    2ec4:	8014      	strh	r4, [r2, #0]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    2ec6:	015a      	lsls	r2, r3, #5
    2ec8:	4c3a      	ldr	r4, [pc, #232]	; (2fb4 <_usb_d_dev_handle_trfail+0x100>)
    2eca:	18a4      	adds	r4, r4, r2
	uint8_t            eptype
    2ecc:	2900      	cmp	r1, #0
    2ece:	d033      	beq.n	2f38 <_usb_d_dev_handle_trfail+0x84>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    2ed0:	001a      	movs	r2, r3
    2ed2:	3208      	adds	r2, #8
    2ed4:	0152      	lsls	r2, r2, #5
    2ed6:	4d38      	ldr	r5, [pc, #224]	; (2fb8 <_usb_d_dev_handle_trfail+0x104>)
    2ed8:	5d52      	ldrb	r2, [r2, r5]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    2eda:	0912      	lsrs	r2, r2, #4
    2edc:	2507      	movs	r5, #7
    2ede:	4015      	ands	r5, r2
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2ee0:	7cc2      	ldrb	r2, [r0, #19]
    2ee2:	2607      	movs	r6, #7
    2ee4:	4016      	ands	r6, r2
	st.reg = bank[bank_n].STATUS_BK.reg;
    2ee6:	010a      	lsls	r2, r1, #4
    2ee8:	18a2      	adds	r2, r4, r2
    2eea:	7a94      	ldrb	r4, [r2, #10]
    2eec:	b2e4      	uxtb	r4, r4
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    2eee:	2d02      	cmp	r5, #2
    2ef0:	d02a      	beq.n	2f48 <_usb_d_dev_handle_trfail+0x94>
	} else if (st.bit.ERRORFLOW) {
    2ef2:	07a4      	lsls	r4, r4, #30
    2ef4:	d544      	bpl.n	2f80 <_usb_d_dev_handle_trfail+0xcc>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    2ef6:	7a94      	ldrb	r4, [r2, #10]
    2ef8:	2502      	movs	r5, #2
    2efa:	43ac      	bics	r4, r5
    2efc:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    2efe:	ac01      	add	r4, sp, #4
    2f00:	5c65      	ldrb	r5, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2f02:	001a      	movs	r2, r3
    2f04:	3208      	adds	r2, #8
    2f06:	0152      	lsls	r2, r2, #5
    2f08:	4f2b      	ldr	r7, [pc, #172]	; (2fb8 <_usb_d_dev_handle_trfail+0x104>)
    2f0a:	46bc      	mov	ip, r7
    2f0c:	4462      	add	r2, ip
    2f0e:	71d5      	strb	r5, [r2, #7]
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    2f10:	5c62      	ldrb	r2, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2f12:	015b      	lsls	r3, r3, #5
    2f14:	4c29      	ldr	r4, [pc, #164]	; (2fbc <_usb_d_dev_handle_trfail+0x108>)
    2f16:	46a4      	mov	ip, r4
    2f18:	4463      	add	r3, ip
    2f1a:	701a      	strb	r2, [r3, #0]
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    2f1c:	2e01      	cmp	r6, #1
    2f1e:	d145      	bne.n	2fac <_usb_d_dev_handle_trfail+0xf8>
    2f20:	7cc3      	ldrb	r3, [r0, #19]
    2f22:	065b      	lsls	r3, r3, #25
    2f24:	d542      	bpl.n	2fac <_usb_d_dev_handle_trfail+0xf8>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    2f26:	7cc3      	ldrb	r3, [r0, #19]
    2f28:	09db      	lsrs	r3, r3, #7
    2f2a:	4299      	cmp	r1, r3
    2f2c:	d03e      	beq.n	2fac <_usb_d_dev_handle_trfail+0xf8>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    2f2e:	2200      	movs	r2, #0
    2f30:	0019      	movs	r1, r3
    2f32:	4b23      	ldr	r3, [pc, #140]	; (2fc0 <_usb_d_dev_handle_trfail+0x10c>)
    2f34:	4798      	blx	r3
    2f36:	e039      	b.n	2fac <_usb_d_dev_handle_trfail+0xf8>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    2f38:	001a      	movs	r2, r3
    2f3a:	3208      	adds	r2, #8
    2f3c:	0152      	lsls	r2, r2, #5
    2f3e:	4d1e      	ldr	r5, [pc, #120]	; (2fb8 <_usb_d_dev_handle_trfail+0x104>)
    2f40:	5d55      	ldrb	r5, [r2, r5]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    2f42:	2207      	movs	r2, #7
    2f44:	4015      	ands	r5, r2
    2f46:	e7cb      	b.n	2ee0 <_usb_d_dev_handle_trfail+0x2c>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    2f48:	07e5      	lsls	r5, r4, #31
    2f4a:	d5d2      	bpl.n	2ef2 <_usb_d_dev_handle_trfail+0x3e>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    2f4c:	7a94      	ldrb	r4, [r2, #10]
    2f4e:	2501      	movs	r5, #1
    2f50:	43ac      	bics	r4, r5
    2f52:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    2f54:	ac01      	add	r4, sp, #4
    2f56:	5c65      	ldrb	r5, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2f58:	001a      	movs	r2, r3
    2f5a:	3208      	adds	r2, #8
    2f5c:	0152      	lsls	r2, r2, #5
    2f5e:	4e16      	ldr	r6, [pc, #88]	; (2fb8 <_usb_d_dev_handle_trfail+0x104>)
    2f60:	46b4      	mov	ip, r6
    2f62:	4462      	add	r2, ip
    2f64:	71d5      	strb	r5, [r2, #7]
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    2f66:	5c62      	ldrb	r2, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2f68:	015b      	lsls	r3, r3, #5
    2f6a:	4c14      	ldr	r4, [pc, #80]	; (2fbc <_usb_d_dev_handle_trfail+0x108>)
    2f6c:	46a4      	mov	ip, r4
    2f6e:	4463      	add	r3, ip
    2f70:	701a      	strb	r2, [r3, #0]
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    2f72:	1e4b      	subs	r3, r1, #1
    2f74:	4199      	sbcs	r1, r3
    2f76:	b2c9      	uxtb	r1, r1
    2f78:	2204      	movs	r2, #4
    2f7a:	4b11      	ldr	r3, [pc, #68]	; (2fc0 <_usb_d_dev_handle_trfail+0x10c>)
    2f7c:	4798      	blx	r3
    2f7e:	e015      	b.n	2fac <_usb_d_dev_handle_trfail+0xf8>
	bank->STATUS_BK.reg     = 0;
    2f80:	005a      	lsls	r2, r3, #1
    2f82:	1852      	adds	r2, r2, r1
    2f84:	0112      	lsls	r2, r2, #4
    2f86:	480b      	ldr	r0, [pc, #44]	; (2fb4 <_usb_d_dev_handle_trfail+0x100>)
    2f88:	1882      	adds	r2, r0, r2
    2f8a:	2000      	movs	r0, #0
    2f8c:	7290      	strb	r0, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    2f8e:	a801      	add	r0, sp, #4
    2f90:	5c44      	ldrb	r4, [r0, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2f92:	001a      	movs	r2, r3
    2f94:	3208      	adds	r2, #8
    2f96:	0152      	lsls	r2, r2, #5
    2f98:	4d07      	ldr	r5, [pc, #28]	; (2fb8 <_usb_d_dev_handle_trfail+0x104>)
    2f9a:	46ac      	mov	ip, r5
    2f9c:	4462      	add	r2, ip
    2f9e:	71d4      	strb	r4, [r2, #7]
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    2fa0:	5c42      	ldrb	r2, [r0, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2fa2:	015b      	lsls	r3, r3, #5
    2fa4:	4905      	ldr	r1, [pc, #20]	; (2fbc <_usb_d_dev_handle_trfail+0x108>)
    2fa6:	468c      	mov	ip, r1
    2fa8:	4463      	add	r3, ip
    2faa:	701a      	strb	r2, [r3, #0]
}
    2fac:	b003      	add	sp, #12
    2fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2fb0:	000058f8 	.word	0x000058f8
    2fb4:	20000160 	.word	0x20000160
    2fb8:	41005000 	.word	0x41005000
    2fbc:	41005108 	.word	0x41005108
    2fc0:	00002e39 	.word	0x00002e39

00002fc4 <_usb_d_dev_reset_epts>:
{
    2fc4:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < USB_D_N_EP; i++) {
    2fc6:	2500      	movs	r5, #0
    2fc8:	e018      	b.n	2ffc <_usb_d_dev_reset_epts+0x38>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    2fca:	4c10      	ldr	r4, [pc, #64]	; (300c <_usb_d_dev_reset_epts+0x48>)
    2fcc:	3420      	adds	r4, #32
    2fce:	00ae      	lsls	r6, r5, #2
    2fd0:	1973      	adds	r3, r6, r5
    2fd2:	0098      	lsls	r0, r3, #2
    2fd4:	3010      	adds	r0, #16
    2fd6:	1820      	adds	r0, r4, r0
    2fd8:	3004      	adds	r0, #4
    2fda:	2103      	movs	r1, #3
    2fdc:	4b0c      	ldr	r3, [pc, #48]	; (3010 <_usb_d_dev_reset_epts+0x4c>)
    2fde:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    2fe0:	1972      	adds	r2, r6, r5
    2fe2:	0093      	lsls	r3, r2, #2
    2fe4:	18e3      	adds	r3, r4, r3
    2fe6:	3326      	adds	r3, #38	; 0x26
    2fe8:	22ff      	movs	r2, #255	; 0xff
    2fea:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    2fec:	1976      	adds	r6, r6, r5
    2fee:	00b3      	lsls	r3, r6, #2
    2ff0:	18e4      	adds	r4, r4, r3
    2ff2:	3427      	adds	r4, #39	; 0x27
    2ff4:	2300      	movs	r3, #0
    2ff6:	7023      	strb	r3, [r4, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    2ff8:	3501      	adds	r5, #1
    2ffa:	b2ed      	uxtb	r5, r5
    2ffc:	2d08      	cmp	r5, #8
    2ffe:	d9e4      	bls.n	2fca <_usb_d_dev_reset_epts+0x6>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    3000:	22a0      	movs	r2, #160	; 0xa0
    3002:	2100      	movs	r1, #0
    3004:	4803      	ldr	r0, [pc, #12]	; (3014 <_usb_d_dev_reset_epts+0x50>)
    3006:	4b04      	ldr	r3, [pc, #16]	; (3018 <_usb_d_dev_reset_epts+0x54>)
    3008:	4798      	blx	r3
}
    300a:	bd70      	pop	{r4, r5, r6, pc}
    300c:	200001e0 	.word	0x200001e0
    3010:	00002e11 	.word	0x00002e11
    3014:	20000160 	.word	0x20000160
    3018:	000056ef 	.word	0x000056ef

0000301c <_usb_d_dev_in_next>:
{
    301c:	b5f0      	push	{r4, r5, r6, r7, lr}
    301e:	46c6      	mov	lr, r8
    3020:	b500      	push	{lr}
    3022:	0005      	movs	r5, r0
    3024:	000e      	movs	r6, r1
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    3026:	7c83      	ldrb	r3, [r0, #18]
    3028:	240f      	movs	r4, #15
    302a:	401c      	ands	r4, r3
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    302c:	0162      	lsls	r2, r4, #5
    302e:	4b56      	ldr	r3, [pc, #344]	; (3188 <_usb_d_dev_in_next+0x16c>)
    3030:	189b      	adds	r3, r3, r2
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    3032:	2900      	cmp	r1, #0
    3034:	d058      	beq.n	30e8 <_usb_d_dev_in_next+0xcc>
    3036:	6959      	ldr	r1, [r3, #20]
    3038:	0489      	lsls	r1, r1, #18
    303a:	0c89      	lsrs	r1, r1, #18
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    303c:	8a2b      	ldrh	r3, [r5, #16]
    303e:	4a53      	ldr	r2, [pc, #332]	; (318c <_usb_d_dev_in_next+0x170>)
    3040:	4293      	cmp	r3, r2
    3042:	d053      	beq.n	30ec <_usb_d_dev_in_next+0xd0>
    3044:	3b01      	subs	r3, #1
    3046:	b21b      	sxth	r3, r3
    3048:	400b      	ands	r3, r1
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    304a:	7cea      	ldrb	r2, [r5, #19]
    304c:	2707      	movs	r7, #7
    304e:	4017      	ands	r7, r2
	if (isr) {
    3050:	2e00      	cmp	r6, #0
    3052:	d007      	beq.n	3064 <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3054:	0022      	movs	r2, r4
    3056:	3208      	adds	r2, #8
    3058:	0152      	lsls	r2, r2, #5
    305a:	484d      	ldr	r0, [pc, #308]	; (3190 <_usb_d_dev_in_next+0x174>)
    305c:	4684      	mov	ip, r0
    305e:	4462      	add	r2, ip
    3060:	2002      	movs	r0, #2
    3062:	71d0      	strb	r0, [r2, #7]
	ept->trans_count += trans_count;
    3064:	68aa      	ldr	r2, [r5, #8]
    3066:	4694      	mov	ip, r2
    3068:	4461      	add	r1, ip
    306a:	60a9      	str	r1, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    306c:	686a      	ldr	r2, [r5, #4]
    306e:	4291      	cmp	r1, r2
    3070:	d24e      	bcs.n	3110 <_usb_d_dev_in_next+0xf4>
		trans_next = ept->trans_size - ept->trans_count;
    3072:	b292      	uxth	r2, r2
    3074:	b28b      	uxth	r3, r1
    3076:	1ad2      	subs	r2, r2, r3
    3078:	b292      	uxth	r2, r2
		if (ept->flags.bits.use_cache) {
    307a:	7ceb      	ldrb	r3, [r5, #19]
    307c:	069b      	lsls	r3, r3, #26
    307e:	d537      	bpl.n	30f0 <_usb_d_dev_in_next+0xd4>
			if (trans_next > ept->size) {
    3080:	8a2b      	ldrh	r3, [r5, #16]
    3082:	4698      	mov	r8, r3
    3084:	429a      	cmp	r2, r3
    3086:	d800      	bhi.n	308a <_usb_d_dev_in_next+0x6e>
		trans_next = ept->trans_size - ept->trans_count;
    3088:	4690      	mov	r8, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    308a:	682b      	ldr	r3, [r5, #0]
    308c:	469c      	mov	ip, r3
    308e:	4461      	add	r1, ip
    3090:	4642      	mov	r2, r8
    3092:	68e8      	ldr	r0, [r5, #12]
    3094:	4b3f      	ldr	r3, [pc, #252]	; (3194 <_usb_d_dev_in_next+0x178>)
    3096:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    3098:	68e9      	ldr	r1, [r5, #12]
	bank->ADDR.reg          = addr;
    309a:	0162      	lsls	r2, r4, #5
    309c:	4b3a      	ldr	r3, [pc, #232]	; (3188 <_usb_d_dev_in_next+0x16c>)
    309e:	189b      	adds	r3, r3, r2
    30a0:	6119      	str	r1, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    30a2:	0163      	lsls	r3, r4, #5
    30a4:	4a38      	ldr	r2, [pc, #224]	; (3188 <_usb_d_dev_in_next+0x16c>)
    30a6:	18d2      	adds	r2, r2, r3
    30a8:	6951      	ldr	r1, [r2, #20]
    30aa:	4643      	mov	r3, r8
    30ac:	049b      	lsls	r3, r3, #18
    30ae:	0c9b      	lsrs	r3, r3, #18
    30b0:	0b89      	lsrs	r1, r1, #14
    30b2:	0389      	lsls	r1, r1, #14
    30b4:	430b      	orrs	r3, r1
    30b6:	6153      	str	r3, [r2, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    30b8:	6951      	ldr	r1, [r2, #20]
    30ba:	4b37      	ldr	r3, [pc, #220]	; (3198 <_usb_d_dev_in_next+0x17c>)
    30bc:	400b      	ands	r3, r1
    30be:	6153      	str	r3, [r2, #20]
	if (!isr) {
    30c0:	2e00      	cmp	r6, #0
    30c2:	d107      	bne.n	30d4 <_usb_d_dev_in_next+0xb8>
		if (is_ctrl) {
    30c4:	2f01      	cmp	r7, #1
    30c6:	d05d      	beq.n	3184 <_usb_d_dev_in_next+0x168>
			inten = USB_D_BANK1_INT_FLAGS;
    30c8:	224a      	movs	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    30ca:	0163      	lsls	r3, r4, #5
    30cc:	4933      	ldr	r1, [pc, #204]	; (319c <_usb_d_dev_in_next+0x180>)
    30ce:	468c      	mov	ip, r1
    30d0:	4463      	add	r3, ip
    30d2:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    30d4:	3408      	adds	r4, #8
    30d6:	0164      	lsls	r4, r4, #5
    30d8:	4b2d      	ldr	r3, [pc, #180]	; (3190 <_usb_d_dev_in_next+0x174>)
    30da:	469c      	mov	ip, r3
    30dc:	4464      	add	r4, ip
    30de:	2380      	movs	r3, #128	; 0x80
    30e0:	7163      	strb	r3, [r4, #5]
}
    30e2:	bc04      	pop	{r2}
    30e4:	4690      	mov	r8, r2
    30e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    30e8:	2100      	movs	r1, #0
    30ea:	e7a7      	b.n	303c <_usb_d_dev_in_next+0x20>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    30ec:	b21b      	sxth	r3, r3
    30ee:	e7ab      	b.n	3048 <_usb_d_dev_in_next+0x2c>
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    30f0:	2380      	movs	r3, #128	; 0x80
    30f2:	019b      	lsls	r3, r3, #6
    30f4:	429a      	cmp	r2, r3
    30f6:	d807      	bhi.n	3108 <_usb_d_dev_in_next+0xec>
		trans_next = ept->trans_size - ept->trans_count;
    30f8:	4690      	mov	r8, r2
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    30fa:	682b      	ldr	r3, [r5, #0]
    30fc:	1859      	adds	r1, r3, r1
	bank->ADDR.reg          = addr;
    30fe:	0162      	lsls	r2, r4, #5
    3100:	4b21      	ldr	r3, [pc, #132]	; (3188 <_usb_d_dev_in_next+0x16c>)
    3102:	189b      	adds	r3, r3, r2
    3104:	6119      	str	r1, [r3, #16]
    3106:	e7cc      	b.n	30a2 <_usb_d_dev_in_next+0x86>
				trans_next = USB_D_DEV_TRANS_MAX;
    3108:	2380      	movs	r3, #128	; 0x80
    310a:	019b      	lsls	r3, r3, #6
    310c:	4698      	mov	r8, r3
    310e:	e7f4      	b.n	30fa <_usb_d_dev_in_next+0xde>
	} else if (ept->flags.bits.need_zlp) {
    3110:	7cea      	ldrb	r2, [r5, #19]
    3112:	06d2      	lsls	r2, r2, #27
    3114:	d50f      	bpl.n	3136 <_usb_d_dev_in_next+0x11a>
		ept->flags.bits.need_zlp = 0;
    3116:	7ceb      	ldrb	r3, [r5, #19]
    3118:	2210      	movs	r2, #16
    311a:	4393      	bics	r3, r2
    311c:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    311e:	0162      	lsls	r2, r4, #5
    3120:	4b19      	ldr	r3, [pc, #100]	; (3188 <_usb_d_dev_in_next+0x16c>)
    3122:	189b      	adds	r3, r3, r2
    3124:	695a      	ldr	r2, [r3, #20]
    3126:	0b92      	lsrs	r2, r2, #14
    3128:	0391      	lsls	r1, r2, #14
    312a:	6159      	str	r1, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    312c:	6959      	ldr	r1, [r3, #20]
    312e:	4a1a      	ldr	r2, [pc, #104]	; (3198 <_usb_d_dev_in_next+0x17c>)
    3130:	400a      	ands	r2, r1
    3132:	615a      	str	r2, [r3, #20]
    3134:	e7c4      	b.n	30c0 <_usb_d_dev_in_next+0xa4>
	if (is_ctrl) {
    3136:	2f01      	cmp	r7, #1
    3138:	d00d      	beq.n	3156 <_usb_d_dev_in_next+0x13a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    313a:	0164      	lsls	r4, r4, #5
    313c:	4a18      	ldr	r2, [pc, #96]	; (31a0 <_usb_d_dev_in_next+0x184>)
    313e:	4694      	mov	ip, r2
    3140:	4464      	add	r4, ip
    3142:	224a      	movs	r2, #74	; 0x4a
    3144:	7022      	strb	r2, [r4, #0]
	if (last_pkt == ept->size) {
    3146:	8a2a      	ldrh	r2, [r5, #16]
    3148:	4293      	cmp	r3, r2
    314a:	d00b      	beq.n	3164 <_usb_d_dev_in_next+0x148>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    314c:	2100      	movs	r1, #0
    314e:	0028      	movs	r0, r5
    3150:	4b14      	ldr	r3, [pc, #80]	; (31a4 <_usb_d_dev_in_next+0x188>)
    3152:	4798      	blx	r3
	return;
    3154:	e7c5      	b.n	30e2 <_usb_d_dev_in_next+0xc6>
    3156:	0164      	lsls	r4, r4, #5
    3158:	4a11      	ldr	r2, [pc, #68]	; (31a0 <_usb_d_dev_in_next+0x184>)
    315a:	4694      	mov	ip, r2
    315c:	4464      	add	r4, ip
    315e:	224b      	movs	r2, #75	; 0x4b
    3160:	7022      	strb	r2, [r4, #0]
    3162:	e7f0      	b.n	3146 <_usb_d_dev_in_next+0x12a>
		ept->flags.bits.is_busy = 0;
    3164:	7ceb      	ldrb	r3, [r5, #19]
    3166:	2240      	movs	r2, #64	; 0x40
    3168:	4393      	bics	r3, r2
    316a:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    316c:	4b0e      	ldr	r3, [pc, #56]	; (31a8 <_usb_d_dev_in_next+0x18c>)
    316e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3170:	7ca8      	ldrb	r0, [r5, #18]
    3172:	68a9      	ldr	r1, [r5, #8]
    3174:	4798      	blx	r3
    3176:	2800      	cmp	r0, #0
    3178:	d1b3      	bne.n	30e2 <_usb_d_dev_in_next+0xc6>
		ept->flags.bits.is_busy = 1;
    317a:	7ceb      	ldrb	r3, [r5, #19]
    317c:	2240      	movs	r2, #64	; 0x40
    317e:	4313      	orrs	r3, r2
    3180:	74eb      	strb	r3, [r5, #19]
    3182:	e7e3      	b.n	314c <_usb_d_dev_in_next+0x130>
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    3184:	224e      	movs	r2, #78	; 0x4e
    3186:	e7a0      	b.n	30ca <_usb_d_dev_in_next+0xae>
    3188:	20000160 	.word	0x20000160
    318c:	000003ff 	.word	0x000003ff
    3190:	41005000 	.word	0x41005000
    3194:	000056dd 	.word	0x000056dd
    3198:	f0003fff 	.word	0xf0003fff
    319c:	41005109 	.word	0x41005109
    31a0:	41005108 	.word	0x41005108
    31a4:	00002e11 	.word	0x00002e11
    31a8:	200001e0 	.word	0x200001e0

000031ac <_usb_d_dev_out_next>:
{
    31ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    31ae:	46de      	mov	lr, fp
    31b0:	4657      	mov	r7, sl
    31b2:	464e      	mov	r6, r9
    31b4:	4645      	mov	r5, r8
    31b6:	b5e0      	push	{r5, r6, r7, lr}
    31b8:	0004      	movs	r4, r0
    31ba:	000f      	movs	r7, r1
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    31bc:	7c83      	ldrb	r3, [r0, #18]
    31be:	250f      	movs	r5, #15
    31c0:	401d      	ands	r5, r3
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    31c2:	2900      	cmp	r1, #0
    31c4:	d059      	beq.n	327a <_usb_d_dev_out_next+0xce>
    31c6:	016a      	lsls	r2, r5, #5
    31c8:	4b71      	ldr	r3, [pc, #452]	; (3390 <_usb_d_dev_out_next+0x1e4>)
    31ca:	189b      	adds	r3, r3, r2
    31cc:	685b      	ldr	r3, [r3, #4]
    31ce:	011b      	lsls	r3, r3, #4
    31d0:	0c9b      	lsrs	r3, r3, #18
    31d2:	469a      	mov	sl, r3
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    31d4:	2f00      	cmp	r7, #0
    31d6:	d053      	beq.n	3280 <_usb_d_dev_out_next+0xd4>
    31d8:	016a      	lsls	r2, r5, #5
    31da:	4b6d      	ldr	r3, [pc, #436]	; (3390 <_usb_d_dev_out_next+0x1e4>)
    31dc:	189b      	adds	r3, r3, r2
    31de:	685b      	ldr	r3, [r3, #4]
    31e0:	049b      	lsls	r3, r3, #18
    31e2:	0c9b      	lsrs	r3, r3, #18
    31e4:	4698      	mov	r8, r3
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    31e6:	8a26      	ldrh	r6, [r4, #16]
    31e8:	4b6a      	ldr	r3, [pc, #424]	; (3394 <_usb_d_dev_out_next+0x1e8>)
    31ea:	429e      	cmp	r6, r3
    31ec:	d001      	beq.n	31f2 <_usb_d_dev_out_next+0x46>
    31ee:	3e01      	subs	r6, #1
    31f0:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    31f2:	4643      	mov	r3, r8
    31f4:	4033      	ands	r3, r6
    31f6:	469b      	mov	fp, r3
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    31f8:	7ce3      	ldrb	r3, [r4, #19]
    31fa:	2207      	movs	r2, #7
    31fc:	401a      	ands	r2, r3
    31fe:	4691      	mov	r9, r2
	if (isr) {
    3200:	2f00      	cmp	r7, #0
    3202:	d007      	beq.n	3214 <_usb_d_dev_out_next+0x68>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3204:	002b      	movs	r3, r5
    3206:	3308      	adds	r3, #8
    3208:	015b      	lsls	r3, r3, #5
    320a:	4a63      	ldr	r2, [pc, #396]	; (3398 <_usb_d_dev_out_next+0x1ec>)
    320c:	4694      	mov	ip, r2
    320e:	4463      	add	r3, ip
    3210:	2201      	movs	r2, #1
    3212:	71da      	strb	r2, [r3, #7]
	if (ept->flags.bits.use_cache && ept->trans_size) {
    3214:	7ce3      	ldrb	r3, [r4, #19]
    3216:	069b      	lsls	r3, r3, #26
    3218:	d511      	bpl.n	323e <_usb_d_dev_out_next+0x92>
    321a:	6862      	ldr	r2, [r4, #4]
    321c:	2a00      	cmp	r2, #0
    321e:	d00e      	beq.n	323e <_usb_d_dev_out_next+0x92>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    3220:	b292      	uxth	r2, r2
    3222:	8923      	ldrh	r3, [r4, #8]
    3224:	1ad2      	subs	r2, r2, r3
    3226:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    3228:	6823      	ldr	r3, [r4, #0]
    322a:	68a1      	ldr	r1, [r4, #8]
    322c:	468c      	mov	ip, r1
    322e:	4463      	add	r3, ip
    3230:	0018      	movs	r0, r3
    3232:	68e1      	ldr	r1, [r4, #12]
    3234:	4593      	cmp	fp, r2
    3236:	d200      	bcs.n	323a <_usb_d_dev_out_next+0x8e>
    3238:	465a      	mov	r2, fp
    323a:	4b58      	ldr	r3, [pc, #352]	; (339c <_usb_d_dev_out_next+0x1f0>)
    323c:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    323e:	6863      	ldr	r3, [r4, #4]
    3240:	2b00      	cmp	r3, #0
    3242:	d120      	bne.n	3286 <_usb_d_dev_out_next+0xda>
    3244:	7ce2      	ldrb	r2, [r4, #19]
    3246:	06d2      	lsls	r2, r2, #27
    3248:	d51d      	bpl.n	3286 <_usb_d_dev_out_next+0xda>
		ept->flags.bits.need_zlp  = 0;
    324a:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    324c:	2210      	movs	r2, #16
    324e:	4393      	bics	r3, r2
    3250:	2220      	movs	r2, #32
    3252:	4313      	orrs	r3, r2
    3254:	74e3      	strb	r3, [r4, #19]
	bank->ADDR.reg          = addr;
    3256:	494e      	ldr	r1, [pc, #312]	; (3390 <_usb_d_dev_out_next+0x1e4>)
    3258:	016a      	lsls	r2, r5, #5
    325a:	68e3      	ldr	r3, [r4, #12]
    325c:	5053      	str	r3, [r2, r1]
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    325e:	8a23      	ldrh	r3, [r4, #16]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    3260:	188a      	adds	r2, r1, r2
    3262:	6851      	ldr	r1, [r2, #4]
    3264:	049b      	lsls	r3, r3, #18
    3266:	091b      	lsrs	r3, r3, #4
    3268:	484d      	ldr	r0, [pc, #308]	; (33a0 <_usb_d_dev_out_next+0x1f4>)
    326a:	4001      	ands	r1, r0
    326c:	430b      	orrs	r3, r1
    326e:	6053      	str	r3, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    3270:	6853      	ldr	r3, [r2, #4]
    3272:	0b9b      	lsrs	r3, r3, #14
    3274:	0399      	lsls	r1, r3, #14
    3276:	6051      	str	r1, [r2, #4]
    3278:	e047      	b.n	330a <_usb_d_dev_out_next+0x15e>
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    327a:	2300      	movs	r3, #0
    327c:	469a      	mov	sl, r3
    327e:	e7a9      	b.n	31d4 <_usb_d_dev_out_next+0x28>
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    3280:	2300      	movs	r3, #0
    3282:	4698      	mov	r8, r3
    3284:	e7af      	b.n	31e6 <_usb_d_dev_out_next+0x3a>
	} else if (isr && last_pkt < ept->size) {
    3286:	2f00      	cmp	r7, #0
    3288:	d01d      	beq.n	32c6 <_usb_d_dev_out_next+0x11a>
    328a:	8a22      	ldrh	r2, [r4, #16]
    328c:	4593      	cmp	fp, r2
    328e:	d21a      	bcs.n	32c6 <_usb_d_dev_out_next+0x11a>
		ept->flags.bits.need_zlp = 0;
    3290:	7ce3      	ldrb	r3, [r4, #19]
    3292:	2210      	movs	r2, #16
    3294:	4393      	bics	r3, r2
    3296:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    3298:	68a3      	ldr	r3, [r4, #8]
    329a:	4443      	add	r3, r8
    329c:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    329e:	464b      	mov	r3, r9
    32a0:	2b01      	cmp	r3, #1
    32a2:	d066      	beq.n	3372 <_usb_d_dev_out_next+0x1c6>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    32a4:	016b      	lsls	r3, r5, #5
    32a6:	4a3f      	ldr	r2, [pc, #252]	; (33a4 <_usb_d_dev_out_next+0x1f8>)
    32a8:	4694      	mov	ip, r2
    32aa:	4463      	add	r3, ip
    32ac:	2225      	movs	r2, #37	; 0x25
    32ae:	701a      	strb	r2, [r3, #0]
	if (0 == epn) {
    32b0:	2d00      	cmp	r5, #0
    32b2:	d103      	bne.n	32bc <_usb_d_dev_out_next+0x110>
	bank->ADDR.reg          = addr;
    32b4:	016d      	lsls	r5, r5, #5
    32b6:	4b36      	ldr	r3, [pc, #216]	; (3390 <_usb_d_dev_out_next+0x1e4>)
    32b8:	68e2      	ldr	r2, [r4, #12]
    32ba:	50ea      	str	r2, [r5, r3]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    32bc:	2100      	movs	r1, #0
    32be:	0020      	movs	r0, r4
    32c0:	4b39      	ldr	r3, [pc, #228]	; (33a8 <_usb_d_dev_out_next+0x1fc>)
    32c2:	4798      	blx	r3
	return;
    32c4:	e033      	b.n	332e <_usb_d_dev_out_next+0x182>
		ept->trans_count += trans_size;
    32c6:	68a2      	ldr	r2, [r4, #8]
    32c8:	4452      	add	r2, sl
    32ca:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    32cc:	4293      	cmp	r3, r2
    32ce:	d9e6      	bls.n	329e <_usb_d_dev_out_next+0xf2>
			trans_next = ept->trans_size - ept->trans_count;
    32d0:	b29b      	uxth	r3, r3
    32d2:	b291      	uxth	r1, r2
    32d4:	1a5b      	subs	r3, r3, r1
    32d6:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    32d8:	7ce1      	ldrb	r1, [r4, #19]
    32da:	0689      	lsls	r1, r1, #26
    32dc:	d52d      	bpl.n	333a <_usb_d_dev_out_next+0x18e>
				if (trans_next > ept->size) {
    32de:	8a21      	ldrh	r1, [r4, #16]
    32e0:	428b      	cmp	r3, r1
    32e2:	d800      	bhi.n	32e6 <_usb_d_dev_out_next+0x13a>
			trans_next = ept->trans_size - ept->trans_count;
    32e4:	0019      	movs	r1, r3
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    32e6:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    32e8:	016b      	lsls	r3, r5, #5
    32ea:	4a29      	ldr	r2, [pc, #164]	; (3390 <_usb_d_dev_out_next+0x1e4>)
    32ec:	5098      	str	r0, [r3, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    32ee:	016b      	lsls	r3, r5, #5
    32f0:	4827      	ldr	r0, [pc, #156]	; (3390 <_usb_d_dev_out_next+0x1e4>)
    32f2:	18c0      	adds	r0, r0, r3
    32f4:	6842      	ldr	r2, [r0, #4]
    32f6:	048b      	lsls	r3, r1, #18
    32f8:	091b      	lsrs	r3, r3, #4
    32fa:	4929      	ldr	r1, [pc, #164]	; (33a0 <_usb_d_dev_out_next+0x1f4>)
    32fc:	400a      	ands	r2, r1
    32fe:	4313      	orrs	r3, r2
    3300:	6043      	str	r3, [r0, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    3302:	6843      	ldr	r3, [r0, #4]
    3304:	0b9b      	lsrs	r3, r3, #14
    3306:	039a      	lsls	r2, r3, #14
    3308:	6042      	str	r2, [r0, #4]
	if (!isr) {
    330a:	2f00      	cmp	r7, #0
    330c:	d108      	bne.n	3320 <_usb_d_dev_out_next+0x174>
		if (is_ctrl) {
    330e:	464b      	mov	r3, r9
    3310:	2b01      	cmp	r3, #1
    3312:	d035      	beq.n	3380 <_usb_d_dev_out_next+0x1d4>
			inten = USB_D_BANK0_INT_FLAGS;
    3314:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    3316:	016b      	lsls	r3, r5, #5
    3318:	4924      	ldr	r1, [pc, #144]	; (33ac <_usb_d_dev_out_next+0x200>)
    331a:	468c      	mov	ip, r1
    331c:	4463      	add	r3, ip
    331e:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3320:	3508      	adds	r5, #8
    3322:	016d      	lsls	r5, r5, #5
    3324:	4b1c      	ldr	r3, [pc, #112]	; (3398 <_usb_d_dev_out_next+0x1ec>)
    3326:	469c      	mov	ip, r3
    3328:	4465      	add	r5, ip
    332a:	2340      	movs	r3, #64	; 0x40
    332c:	712b      	strb	r3, [r5, #4]
}
    332e:	bc3c      	pop	{r2, r3, r4, r5}
    3330:	4690      	mov	r8, r2
    3332:	4699      	mov	r9, r3
    3334:	46a2      	mov	sl, r4
    3336:	46ab      	mov	fp, r5
    3338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (trans_next > ept->size) {
    333a:	8a21      	ldrh	r1, [r4, #16]
    333c:	428b      	cmp	r3, r1
    333e:	d90b      	bls.n	3358 <_usb_d_dev_out_next+0x1ac>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    3340:	2180      	movs	r1, #128	; 0x80
    3342:	0189      	lsls	r1, r1, #6
    3344:	428b      	cmp	r3, r1
    3346:	d80f      	bhi.n	3368 <_usb_d_dev_out_next+0x1bc>
    3348:	43b3      	bics	r3, r6
    334a:	0019      	movs	r1, r3
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    334c:	6823      	ldr	r3, [r4, #0]
    334e:	189a      	adds	r2, r3, r2
	bank->ADDR.reg          = addr;
    3350:	016b      	lsls	r3, r5, #5
    3352:	480f      	ldr	r0, [pc, #60]	; (3390 <_usb_d_dev_out_next+0x1e4>)
    3354:	501a      	str	r2, [r3, r0]
    3356:	e7ca      	b.n	32ee <_usb_d_dev_out_next+0x142>
				} else if (trans_next < ept->size) {
    3358:	428b      	cmp	r3, r1
    335a:	d208      	bcs.n	336e <_usb_d_dev_out_next+0x1c2>
					ept->flags.bits.use_cache = 1;
    335c:	7ce1      	ldrb	r1, [r4, #19]
    335e:	2020      	movs	r0, #32
    3360:	4301      	orrs	r1, r0
    3362:	74e1      	strb	r1, [r4, #19]
			trans_next = ept->trans_size - ept->trans_count;
    3364:	0019      	movs	r1, r3
    3366:	e7f1      	b.n	334c <_usb_d_dev_out_next+0x1a0>
						trans_next = USB_D_DEV_TRANS_MAX;
    3368:	2180      	movs	r1, #128	; 0x80
    336a:	0189      	lsls	r1, r1, #6
    336c:	e7ee      	b.n	334c <_usb_d_dev_out_next+0x1a0>
			trans_next = ept->trans_size - ept->trans_count;
    336e:	0019      	movs	r1, r3
    3370:	e7ec      	b.n	334c <_usb_d_dev_out_next+0x1a0>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    3372:	016b      	lsls	r3, r5, #5
    3374:	4a0b      	ldr	r2, [pc, #44]	; (33a4 <_usb_d_dev_out_next+0x1f8>)
    3376:	4694      	mov	ip, r2
    3378:	4463      	add	r3, ip
    337a:	222d      	movs	r2, #45	; 0x2d
    337c:	701a      	strb	r2, [r3, #0]
    337e:	e797      	b.n	32b0 <_usb_d_dev_out_next+0x104>
	bank->STATUS_BK.reg     = 0;
    3380:	016a      	lsls	r2, r5, #5
    3382:	4b03      	ldr	r3, [pc, #12]	; (3390 <_usb_d_dev_out_next+0x1e4>)
    3384:	189b      	adds	r3, r3, r2
    3386:	2200      	movs	r2, #0
    3388:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    338a:	322d      	adds	r2, #45	; 0x2d
    338c:	e7c3      	b.n	3316 <_usb_d_dev_out_next+0x16a>
    338e:	46c0      	nop			; (mov r8, r8)
    3390:	20000160 	.word	0x20000160
    3394:	000003ff 	.word	0x000003ff
    3398:	41005000 	.word	0x41005000
    339c:	000056dd 	.word	0x000056dd
    33a0:	f0003fff 	.word	0xf0003fff
    33a4:	41005108 	.word	0x41005108
    33a8:	00002e11 	.word	0x00002e11
    33ac:	41005109 	.word	0x41005109

000033b0 <_usb_d_dev_handler>:
{
    33b0:	b570      	push	{r4, r5, r6, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    33b2:	4b89      	ldr	r3, [pc, #548]	; (35d8 <_usb_d_dev_handler+0x228>)
    33b4:	8c1d      	ldrh	r5, [r3, #32]
    33b6:	b2ad      	uxth	r5, r5
	if (0 == epint) {
    33b8:	2d00      	cmp	r5, #0
    33ba:	d001      	beq.n	33c0 <_usb_d_dev_handler+0x10>
	bool     rc    = true;
    33bc:	2400      	movs	r4, #0
    33be:	e0bf      	b.n	3540 <_usb_d_dev_handler+0x190>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    33c0:	8b99      	ldrh	r1, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    33c2:	8b1b      	ldrh	r3, [r3, #24]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    33c4:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    33c6:	075a      	lsls	r2, r3, #29
    33c8:	d40d      	bmi.n	33e6 <_usb_d_dev_handler+0x36>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    33ca:	059a      	lsls	r2, r3, #22
    33cc:	d415      	bmi.n	33fa <_usb_d_dev_handler+0x4a>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    33ce:	061a      	lsls	r2, r3, #24
    33d0:	d437      	bmi.n	3442 <_usb_d_dev_handler+0x92>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    33d2:	2270      	movs	r2, #112	; 0x70
    33d4:	421a      	tst	r2, r3
    33d6:	d13e      	bne.n	3456 <_usb_d_dev_handler+0xa6>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    33d8:	071a      	lsls	r2, r3, #28
    33da:	d457      	bmi.n	348c <_usb_d_dev_handler+0xdc>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    33dc:	07db      	lsls	r3, r3, #31
    33de:	d500      	bpl.n	33e2 <_usb_d_dev_handler+0x32>
    33e0:	e068      	b.n	34b4 <_usb_d_dev_handler+0x104>
		rc = false;
    33e2:	2300      	movs	r3, #0
    33e4:	e006      	b.n	33f4 <_usb_d_dev_handler+0x44>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    33e6:	2204      	movs	r2, #4
    33e8:	4b7b      	ldr	r3, [pc, #492]	; (35d8 <_usb_d_dev_handler+0x228>)
    33ea:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    33ec:	4b7b      	ldr	r3, [pc, #492]	; (35dc <_usb_d_dev_handler+0x22c>)
    33ee:	6a1b      	ldr	r3, [r3, #32]
    33f0:	4798      	blx	r3
		return true;
    33f2:	2301      	movs	r3, #1
		if (_usb_d_dev_handle_nep()) {
    33f4:	2b00      	cmp	r3, #0
    33f6:	d0e1      	beq.n	33bc <_usb_d_dev_handler+0xc>
}
    33f8:	bd70      	pop	{r4, r5, r6, pc}
    33fa:	4b77      	ldr	r3, [pc, #476]	; (35d8 <_usb_d_dev_handler+0x228>)
    33fc:	4a78      	ldr	r2, [pc, #480]	; (35e0 <_usb_d_dev_handler+0x230>)
    33fe:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    3400:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    3402:	3a92      	subs	r2, #146	; 0x92
    3404:	3aff      	subs	r2, #255	; 0xff
    3406:	831a      	strh	r2, [r3, #24]
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    3408:	2300      	movs	r3, #0
    340a:	2b03      	cmp	r3, #3
    340c:	d812      	bhi.n	3434 <_usb_d_dev_handler+0x84>
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    340e:	0158      	lsls	r0, r3, #5
    3410:	4a74      	ldr	r2, [pc, #464]	; (35e4 <_usb_d_dev_handler+0x234>)
    3412:	1812      	adds	r2, r2, r0
    3414:	8912      	ldrh	r2, [r2, #8]
    3416:	0712      	lsls	r2, r2, #28
    3418:	0f12      	lsrs	r2, r2, #28
    341a:	2a03      	cmp	r2, #3
    341c:	d002      	beq.n	3424 <_usb_d_dev_handler+0x74>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    341e:	3301      	adds	r3, #1
    3420:	b2db      	uxtb	r3, r3
    3422:	e7f2      	b.n	340a <_usb_d_dev_handler+0x5a>
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    3424:	4b6f      	ldr	r3, [pc, #444]	; (35e4 <_usb_d_dev_handler+0x234>)
    3426:	181b      	adds	r3, r3, r0
    3428:	8919      	ldrh	r1, [r3, #8]
    342a:	0449      	lsls	r1, r1, #17
    342c:	0d49      	lsrs	r1, r1, #21
			bank->EXTREG.reg = 0;
    342e:	2200      	movs	r2, #0
    3430:	811a      	strh	r2, [r3, #8]
    3432:	e000      	b.n	3436 <_usb_d_dev_handler+0x86>
	uint32_t lpm_variable = 0;
    3434:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    3436:	4b69      	ldr	r3, [pc, #420]	; (35dc <_usb_d_dev_handler+0x22c>)
    3438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    343a:	2003      	movs	r0, #3
    343c:	4798      	blx	r3
	bool     rc    = true;
    343e:	2301      	movs	r3, #1
    3440:	e7d8      	b.n	33f4 <_usb_d_dev_handler+0x44>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    3442:	2280      	movs	r2, #128	; 0x80
    3444:	4b64      	ldr	r3, [pc, #400]	; (35d8 <_usb_d_dev_handler+0x228>)
    3446:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    3448:	4b64      	ldr	r3, [pc, #400]	; (35dc <_usb_d_dev_handler+0x22c>)
    344a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    344c:	2100      	movs	r1, #0
    344e:	2005      	movs	r0, #5
    3450:	4798      	blx	r3
	bool     rc    = true;
    3452:	2301      	movs	r3, #1
    3454:	e7ce      	b.n	33f4 <_usb_d_dev_handler+0x44>
    3456:	4b60      	ldr	r3, [pc, #384]	; (35d8 <_usb_d_dev_handler+0x228>)
    3458:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    345a:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    345c:	4a60      	ldr	r2, [pc, #384]	; (35e0 <_usb_d_dev_handler+0x230>)
    345e:	831a      	strh	r2, [r3, #24]
	if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    3460:	4b61      	ldr	r3, [pc, #388]	; (35e8 <_usb_d_dev_handler+0x238>)
    3462:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    3464:	069b      	lsls	r3, r3, #26
    3466:	d40c      	bmi.n	3482 <_usb_d_dev_handler+0xd2>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    3468:	4b5f      	ldr	r3, [pc, #380]	; (35e8 <_usb_d_dev_handler+0x238>)
    346a:	68da      	ldr	r2, [r3, #12]
	tmp &= mask;
    346c:	23d0      	movs	r3, #208	; 0xd0
    346e:	4013      	ands	r3, r2
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, DFLL_READY_FLAG) != DFLL_READY_FLAG)
    3470:	2bd0      	cmp	r3, #208	; 0xd0
    3472:	d1f9      	bne.n	3468 <_usb_d_dev_handler+0xb8>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    3474:	4b59      	ldr	r3, [pc, #356]	; (35dc <_usb_d_dev_handler+0x22c>)
    3476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3478:	2100      	movs	r1, #0
    347a:	2002      	movs	r0, #2
    347c:	4798      	blx	r3
	bool     rc    = true;
    347e:	2301      	movs	r3, #1
    3480:	e7b8      	b.n	33f4 <_usb_d_dev_handler+0x44>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    3482:	4b59      	ldr	r3, [pc, #356]	; (35e8 <_usb_d_dev_handler+0x238>)
    3484:	68db      	ldr	r3, [r3, #12]
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY)
    3486:	06db      	lsls	r3, r3, #27
    3488:	d5fb      	bpl.n	3482 <_usb_d_dev_handler+0xd2>
    348a:	e7f3      	b.n	3474 <_usb_d_dev_handler+0xc4>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    348c:	4b52      	ldr	r3, [pc, #328]	; (35d8 <_usb_d_dev_handler+0x228>)
    348e:	2100      	movs	r1, #0
    3490:	2280      	movs	r2, #128	; 0x80
    3492:	0052      	lsls	r2, r2, #1
    3494:	5499      	strb	r1, [r3, r2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    3496:	3af8      	subs	r2, #248	; 0xf8
    3498:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    349a:	3268      	adds	r2, #104	; 0x68
    349c:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    349e:	4a50      	ldr	r2, [pc, #320]	; (35e0 <_usb_d_dev_handler+0x230>)
    34a0:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    34a2:	4b52      	ldr	r3, [pc, #328]	; (35ec <_usb_d_dev_handler+0x23c>)
    34a4:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    34a6:	4b4d      	ldr	r3, [pc, #308]	; (35dc <_usb_d_dev_handler+0x22c>)
    34a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    34aa:	2100      	movs	r1, #0
    34ac:	2001      	movs	r0, #1
    34ae:	4798      	blx	r3
	bool     rc    = true;
    34b0:	2301      	movs	r3, #1
    34b2:	e79f      	b.n	33f4 <_usb_d_dev_handler+0x44>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    34b4:	4b48      	ldr	r3, [pc, #288]	; (35d8 <_usb_d_dev_handler+0x228>)
    34b6:	4a4a      	ldr	r2, [pc, #296]	; (35e0 <_usb_d_dev_handler+0x230>)
    34b8:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    34ba:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    34bc:	3a92      	subs	r2, #146	; 0x92
    34be:	3aff      	subs	r2, #255	; 0xff
    34c0:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    34c2:	4b46      	ldr	r3, [pc, #280]	; (35dc <_usb_d_dev_handler+0x22c>)
    34c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    34c6:	2100      	movs	r1, #0
    34c8:	2004      	movs	r0, #4
    34ca:	4798      	blx	r3
	bool     rc    = true;
    34cc:	2301      	movs	r3, #1
    34ce:	e791      	b.n	33f4 <_usb_d_dev_handler+0x44>
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    34d0:	06da      	lsls	r2, r3, #27
    34d2:	d407      	bmi.n	34e4 <_usb_d_dev_handler+0x134>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    34d4:	065a      	lsls	r2, r3, #25
    34d6:	d408      	bmi.n	34ea <_usb_d_dev_handler+0x13a>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    34d8:	069b      	lsls	r3, r3, #26
    34da:	d52f      	bpl.n	353c <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_stall(ept, 0);
    34dc:	2100      	movs	r1, #0
    34de:	4b44      	ldr	r3, [pc, #272]	; (35f0 <_usb_d_dev_handler+0x240>)
    34e0:	4798      	blx	r3
    34e2:	e02b      	b.n	353c <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_setup(ept);
    34e4:	4b43      	ldr	r3, [pc, #268]	; (35f4 <_usb_d_dev_handler+0x244>)
    34e6:	4798      	blx	r3
    34e8:	e028      	b.n	353c <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_stall(ept, 1);
    34ea:	2101      	movs	r1, #1
    34ec:	4b40      	ldr	r3, [pc, #256]	; (35f0 <_usb_d_dev_handler+0x240>)
    34ee:	4798      	blx	r3
    34f0:	e024      	b.n	353c <_usb_d_dev_handler+0x18c>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    34f2:	065a      	lsls	r2, r3, #25
    34f4:	d40f      	bmi.n	3516 <_usb_d_dev_handler+0x166>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    34f6:	071a      	lsls	r2, r3, #28
    34f8:	d411      	bmi.n	351e <_usb_d_dev_handler+0x16e>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    34fa:	079a      	lsls	r2, r3, #30
    34fc:	d413      	bmi.n	3526 <_usb_d_dev_handler+0x176>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    34fe:	7cc1      	ldrb	r1, [r0, #19]
    3500:	2207      	movs	r2, #7
    3502:	400a      	ands	r2, r1
    3504:	2a01      	cmp	r2, #1
    3506:	d119      	bne.n	353c <_usb_d_dev_handler+0x18c>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    3508:	075a      	lsls	r2, r3, #29
    350a:	d410      	bmi.n	352e <_usb_d_dev_handler+0x17e>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    350c:	06db      	lsls	r3, r3, #27
    350e:	d515      	bpl.n	353c <_usb_d_dev_handler+0x18c>
			_usb_d_dev_handle_setup(ept);
    3510:	4b38      	ldr	r3, [pc, #224]	; (35f4 <_usb_d_dev_handler+0x244>)
    3512:	4798      	blx	r3
    3514:	e012      	b.n	353c <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_stall(ept, 1);
    3516:	2101      	movs	r1, #1
    3518:	4b35      	ldr	r3, [pc, #212]	; (35f0 <_usb_d_dev_handler+0x240>)
    351a:	4798      	blx	r3
    351c:	e00e      	b.n	353c <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_trfail(ept, 1);
    351e:	2101      	movs	r1, #1
    3520:	4b35      	ldr	r3, [pc, #212]	; (35f8 <_usb_d_dev_handler+0x248>)
    3522:	4798      	blx	r3
    3524:	e00a      	b.n	353c <_usb_d_dev_handler+0x18c>
		_usb_d_dev_in_next(ept, true);
    3526:	2101      	movs	r1, #1
    3528:	4b34      	ldr	r3, [pc, #208]	; (35fc <_usb_d_dev_handler+0x24c>)
    352a:	4798      	blx	r3
    352c:	e006      	b.n	353c <_usb_d_dev_handler+0x18c>
			_usb_d_dev_handle_trfail(ept, 0);
    352e:	2100      	movs	r1, #0
    3530:	4b31      	ldr	r3, [pc, #196]	; (35f8 <_usb_d_dev_handler+0x248>)
    3532:	4798      	blx	r3
    3534:	e002      	b.n	353c <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_stall(ept, 0);
    3536:	2100      	movs	r1, #0
    3538:	4b2d      	ldr	r3, [pc, #180]	; (35f0 <_usb_d_dev_handler+0x240>)
    353a:	4798      	blx	r3
	for (i = 0; i < USB_D_N_EP; i++) {
    353c:	3401      	adds	r4, #1
    353e:	b2e4      	uxtb	r4, r4
    3540:	2c08      	cmp	r4, #8
    3542:	d900      	bls.n	3546 <_usb_d_dev_handler+0x196>
    3544:	e758      	b.n	33f8 <_usb_d_dev_handler+0x48>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    3546:	4b25      	ldr	r3, [pc, #148]	; (35dc <_usb_d_dev_handler+0x22c>)
    3548:	3320      	adds	r3, #32
    354a:	00a2      	lsls	r2, r4, #2
    354c:	1911      	adds	r1, r2, r4
    354e:	0088      	lsls	r0, r1, #2
    3550:	0001      	movs	r1, r0
    3552:	3010      	adds	r0, #16
    3554:	1818      	adds	r0, r3, r0
    3556:	3004      	adds	r0, #4
		if (ept->ep == 0xFF) {
    3558:	185b      	adds	r3, r3, r1
    355a:	3326      	adds	r3, #38	; 0x26
    355c:	781b      	ldrb	r3, [r3, #0]
    355e:	2bff      	cmp	r3, #255	; 0xff
    3560:	d0ec      	beq.n	353c <_usb_d_dev_handler+0x18c>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3562:	7c82      	ldrb	r2, [r0, #18]
    3564:	230f      	movs	r3, #15
    3566:	4013      	ands	r3, r2
	if (!(epint & (1u << epn))) {
    3568:	2201      	movs	r2, #1
    356a:	409a      	lsls	r2, r3
    356c:	422a      	tst	r2, r5
    356e:	d0e5      	beq.n	353c <_usb_d_dev_handler+0x18c>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    3570:	001a      	movs	r2, r3
    3572:	3208      	adds	r2, #8
    3574:	0152      	lsls	r2, r2, #5
    3576:	4918      	ldr	r1, [pc, #96]	; (35d8 <_usb_d_dev_handler+0x228>)
    3578:	468c      	mov	ip, r1
    357a:	4462      	add	r2, ip
    357c:	79d2      	ldrb	r2, [r2, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    357e:	015b      	lsls	r3, r3, #5
    3580:	491f      	ldr	r1, [pc, #124]	; (3600 <_usb_d_dev_handler+0x250>)
    3582:	468c      	mov	ip, r1
    3584:	4463      	add	r3, ip
    3586:	781b      	ldrb	r3, [r3, #0]
	flags &= mask;
    3588:	4013      	ands	r3, r2
	if (flags) {
    358a:	d0d7      	beq.n	353c <_usb_d_dev_handler+0x18c>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    358c:	7cc2      	ldrb	r2, [r0, #19]
    358e:	2147      	movs	r1, #71	; 0x47
    3590:	4011      	ands	r1, r2
    3592:	2901      	cmp	r1, #1
    3594:	d09c      	beq.n	34d0 <_usb_d_dev_handler+0x120>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    3596:	b252      	sxtb	r2, r2
    3598:	2a00      	cmp	r2, #0
    359a:	dbaa      	blt.n	34f2 <_usb_d_dev_handler+0x142>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    359c:	069a      	lsls	r2, r3, #26
    359e:	d4ca      	bmi.n	3536 <_usb_d_dev_handler+0x186>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    35a0:	075a      	lsls	r2, r3, #29
    35a2:	d40d      	bmi.n	35c0 <_usb_d_dev_handler+0x210>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    35a4:	07da      	lsls	r2, r3, #31
    35a6:	d40f      	bmi.n	35c8 <_usb_d_dev_handler+0x218>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    35a8:	7cc1      	ldrb	r1, [r0, #19]
    35aa:	2207      	movs	r2, #7
    35ac:	400a      	ands	r2, r1
    35ae:	2a01      	cmp	r2, #1
    35b0:	d1c4      	bne.n	353c <_usb_d_dev_handler+0x18c>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    35b2:	071a      	lsls	r2, r3, #28
    35b4:	d40c      	bmi.n	35d0 <_usb_d_dev_handler+0x220>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    35b6:	06db      	lsls	r3, r3, #27
    35b8:	d5c0      	bpl.n	353c <_usb_d_dev_handler+0x18c>
			_usb_d_dev_handle_setup(ept);
    35ba:	4b0e      	ldr	r3, [pc, #56]	; (35f4 <_usb_d_dev_handler+0x244>)
    35bc:	4798      	blx	r3
    35be:	e7bd      	b.n	353c <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_trfail(ept, 0);
    35c0:	2100      	movs	r1, #0
    35c2:	4b0d      	ldr	r3, [pc, #52]	; (35f8 <_usb_d_dev_handler+0x248>)
    35c4:	4798      	blx	r3
    35c6:	e7b9      	b.n	353c <_usb_d_dev_handler+0x18c>
		_usb_d_dev_out_next(ept, true);
    35c8:	2101      	movs	r1, #1
    35ca:	4b0e      	ldr	r3, [pc, #56]	; (3604 <_usb_d_dev_handler+0x254>)
    35cc:	4798      	blx	r3
    35ce:	e7b5      	b.n	353c <_usb_d_dev_handler+0x18c>
			_usb_d_dev_handle_trfail(ept, 1);
    35d0:	2101      	movs	r1, #1
    35d2:	4b09      	ldr	r3, [pc, #36]	; (35f8 <_usb_d_dev_handler+0x248>)
    35d4:	4798      	blx	r3
    35d6:	e7b1      	b.n	353c <_usb_d_dev_handler+0x18c>
    35d8:	41005000 	.word	0x41005000
    35dc:	200001e0 	.word	0x200001e0
    35e0:	00000201 	.word	0x00000201
    35e4:	20000160 	.word	0x20000160
    35e8:	40000800 	.word	0x40000800
    35ec:	00002fc5 	.word	0x00002fc5
    35f0:	00002de1 	.word	0x00002de1
    35f4:	00002d51 	.word	0x00002d51
    35f8:	00002eb5 	.word	0x00002eb5
    35fc:	0000301d 	.word	0x0000301d
    3600:	41005109 	.word	0x41005109
    3604:	000031ad 	.word	0x000031ad

00003608 <_usb_d_dev_init>:
{
    3608:	b500      	push	{lr}
    360a:	b083      	sub	sp, #12
	const uint8_t spdconf[4] = {
    360c:	2200      	movs	r2, #0
    360e:	ab01      	add	r3, sp, #4
    3610:	705a      	strb	r2, [r3, #1]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    3612:	4b21      	ldr	r3, [pc, #132]	; (3698 <_usb_d_dev_init+0x90>)
    3614:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    3616:	07db      	lsls	r3, r3, #31
    3618:	d41b      	bmi.n	3652 <_usb_d_dev_init+0x4a>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    361a:	4b1f      	ldr	r3, [pc, #124]	; (3698 <_usb_d_dev_init+0x90>)
    361c:	789b      	ldrb	r3, [r3, #2]
    361e:	079b      	lsls	r3, r3, #30
    3620:	d1fb      	bne.n	361a <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    3622:	4b1d      	ldr	r3, [pc, #116]	; (3698 <_usb_d_dev_init+0x90>)
    3624:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    3626:	079b      	lsls	r3, r3, #30
    3628:	d50c      	bpl.n	3644 <_usb_d_dev_init+0x3c>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    362a:	4a1b      	ldr	r2, [pc, #108]	; (3698 <_usb_d_dev_init+0x90>)
    362c:	7813      	ldrb	r3, [r2, #0]
    362e:	2102      	movs	r1, #2
    3630:	438b      	bics	r3, r1
    3632:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    3634:	4b18      	ldr	r3, [pc, #96]	; (3698 <_usb_d_dev_init+0x90>)
    3636:	789b      	ldrb	r3, [r3, #2]
    3638:	079b      	lsls	r3, r3, #30
    363a:	d1fb      	bne.n	3634 <_usb_d_dev_init+0x2c>
    363c:	4b16      	ldr	r3, [pc, #88]	; (3698 <_usb_d_dev_init+0x90>)
    363e:	789b      	ldrb	r3, [r3, #2]
    3640:	079b      	lsls	r3, r3, #30
    3642:	d4fb      	bmi.n	363c <_usb_d_dev_init+0x34>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    3644:	2201      	movs	r2, #1
    3646:	4b14      	ldr	r3, [pc, #80]	; (3698 <_usb_d_dev_init+0x90>)
    3648:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    364a:	4b13      	ldr	r3, [pc, #76]	; (3698 <_usb_d_dev_init+0x90>)
    364c:	789b      	ldrb	r3, [r3, #2]
    364e:	079b      	lsls	r3, r3, #30
    3650:	d1fb      	bne.n	364a <_usb_d_dev_init+0x42>
    3652:	4b11      	ldr	r3, [pc, #68]	; (3698 <_usb_d_dev_init+0x90>)
    3654:	789b      	ldrb	r3, [r3, #2]
    3656:	07db      	lsls	r3, r3, #31
    3658:	d4fb      	bmi.n	3652 <_usb_d_dev_init+0x4a>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    365a:	4b10      	ldr	r3, [pc, #64]	; (369c <_usb_d_dev_init+0x94>)
    365c:	4a10      	ldr	r2, [pc, #64]	; (36a0 <_usb_d_dev_init+0x98>)
    365e:	621a      	str	r2, [r3, #32]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    3660:	625a      	str	r2, [r3, #36]	; 0x24
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    3662:	629a      	str	r2, [r3, #40]	; 0x28
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    3664:	62da      	str	r2, [r3, #44]	; 0x2c
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    3666:	631a      	str	r2, [r3, #48]	; 0x30
	_usb_d_dev_reset_epts();
    3668:	4b0e      	ldr	r3, [pc, #56]	; (36a4 <_usb_d_dev_init+0x9c>)
    366a:	4798      	blx	r3
	_usb_load_calib();
    366c:	4b0e      	ldr	r3, [pc, #56]	; (36a8 <_usb_d_dev_init+0xa0>)
    366e:	4798      	blx	r3
	((Usb *)hw)->HOST.CTRLA.reg = data;
    3670:	2204      	movs	r2, #4
    3672:	4b09      	ldr	r3, [pc, #36]	; (3698 <_usb_d_dev_init+0x90>)
    3674:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    3676:	4b08      	ldr	r3, [pc, #32]	; (3698 <_usb_d_dev_init+0x90>)
    3678:	789b      	ldrb	r3, [r3, #2]
    367a:	079b      	lsls	r3, r3, #30
    367c:	d1fb      	bne.n	3676 <_usb_d_dev_init+0x6e>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    367e:	4a06      	ldr	r2, [pc, #24]	; (3698 <_usb_d_dev_init+0x90>)
    3680:	4b0a      	ldr	r3, [pc, #40]	; (36ac <_usb_d_dev_init+0xa4>)
    3682:	6253      	str	r3, [r2, #36]	; 0x24
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    3684:	ab01      	add	r3, sp, #4
    3686:	785b      	ldrb	r3, [r3, #1]
    3688:	2101      	movs	r1, #1
    368a:	430b      	orrs	r3, r1
    368c:	b2db      	uxtb	r3, r3
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    368e:	8113      	strh	r3, [r2, #8]
}
    3690:	2000      	movs	r0, #0
    3692:	b003      	add	sp, #12
    3694:	bd00      	pop	{pc}
    3696:	46c0      	nop			; (mov r8, r8)
    3698:	41005000 	.word	0x41005000
    369c:	200001e0 	.word	0x200001e0
    36a0:	00002cf9 	.word	0x00002cf9
    36a4:	00002fc5 	.word	0x00002fc5
    36a8:	00002cfd 	.word	0x00002cfd
    36ac:	20000160 	.word	0x20000160

000036b0 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    36b0:	4b10      	ldr	r3, [pc, #64]	; (36f4 <_usb_d_dev_enable+0x44>)
    36b2:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    36b4:	079b      	lsls	r3, r3, #30
    36b6:	d119      	bne.n	36ec <_usb_d_dev_enable+0x3c>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    36b8:	4b0e      	ldr	r3, [pc, #56]	; (36f4 <_usb_d_dev_enable+0x44>)
    36ba:	789b      	ldrb	r3, [r3, #2]
    36bc:	079b      	lsls	r3, r3, #30
    36be:	d1fb      	bne.n	36b8 <_usb_d_dev_enable+0x8>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    36c0:	4b0c      	ldr	r3, [pc, #48]	; (36f4 <_usb_d_dev_enable+0x44>)
    36c2:	781b      	ldrb	r3, [r3, #0]
    36c4:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    36c6:	079a      	lsls	r2, r3, #30
    36c8:	d408      	bmi.n	36dc <_usb_d_dev_enable+0x2c>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    36ca:	2202      	movs	r2, #2
    36cc:	4313      	orrs	r3, r2
    36ce:	b2db      	uxtb	r3, r3
	((Usb *)hw)->HOST.CTRLA.reg = data;
    36d0:	4a08      	ldr	r2, [pc, #32]	; (36f4 <_usb_d_dev_enable+0x44>)
    36d2:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    36d4:	4b07      	ldr	r3, [pc, #28]	; (36f4 <_usb_d_dev_enable+0x44>)
    36d6:	789b      	ldrb	r3, [r3, #2]
    36d8:	079b      	lsls	r3, r3, #30
    36da:	d1fb      	bne.n	36d4 <_usb_d_dev_enable+0x24>
    36dc:	2280      	movs	r2, #128	; 0x80
    36de:	4b06      	ldr	r3, [pc, #24]	; (36f8 <_usb_d_dev_enable+0x48>)
    36e0:	601a      	str	r2, [r3, #0]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    36e2:	4a06      	ldr	r2, [pc, #24]	; (36fc <_usb_d_dev_enable+0x4c>)
    36e4:	4b03      	ldr	r3, [pc, #12]	; (36f4 <_usb_d_dev_enable+0x44>)
    36e6:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    36e8:	2000      	movs	r0, #0
}
    36ea:	4770      	bx	lr
		return -USB_ERR_DENIED;
    36ec:	2011      	movs	r0, #17
    36ee:	4240      	negs	r0, r0
    36f0:	e7fb      	b.n	36ea <_usb_d_dev_enable+0x3a>
    36f2:	46c0      	nop			; (mov r8, r8)
    36f4:	41005000 	.word	0x41005000
    36f8:	e000e100 	.word	0xe000e100
    36fc:	0000028d 	.word	0x0000028d

00003700 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    3700:	4a02      	ldr	r2, [pc, #8]	; (370c <_usb_d_dev_attach+0xc>)
    3702:	8913      	ldrh	r3, [r2, #8]
    3704:	2101      	movs	r1, #1
    3706:	438b      	bics	r3, r1
    3708:	8113      	strh	r3, [r2, #8]
}
    370a:	4770      	bx	lr
    370c:	41005000 	.word	0x41005000

00003710 <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    3710:	2380      	movs	r3, #128	; 0x80
    3712:	425b      	negs	r3, r3
    3714:	4318      	orrs	r0, r3
    3716:	b2c0      	uxtb	r0, r0
	((Usb *)hw)->DEVICE.DADD.reg = data;
    3718:	4b01      	ldr	r3, [pc, #4]	; (3720 <_usb_d_dev_set_address+0x10>)
    371a:	7298      	strb	r0, [r3, #10]
}
    371c:	4770      	bx	lr
    371e:	46c0      	nop			; (mov r8, r8)
    3720:	41005000 	.word	0x41005000

00003724 <_usb_d_dev_ep_init>:
{
    3724:	b5f0      	push	{r4, r5, r6, r7, lr}
    3726:	46c6      	mov	lr, r8
    3728:	b500      	push	{lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    372a:	230f      	movs	r3, #15
    372c:	4003      	ands	r3, r0
    372e:	b244      	sxtb	r4, r0
    3730:	46a4      	mov	ip, r4
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3732:	2b00      	cmp	r3, #0
    3734:	d005      	beq.n	3742 <_usb_d_dev_ep_init+0x1e>
    3736:	2c00      	cmp	r4, #0
    3738:	db01      	blt.n	373e <_usb_d_dev_ep_init+0x1a>
    373a:	001c      	movs	r4, r3
    373c:	e002      	b.n	3744 <_usb_d_dev_ep_init+0x20>
    373e:	1d1c      	adds	r4, r3, #4
    3740:	e000      	b.n	3744 <_usb_d_dev_ep_init+0x20>
    3742:	001c      	movs	r4, r3
	return &dev_inst.ep[ep_index];
    3744:	0026      	movs	r6, r4
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    3746:	2503      	movs	r5, #3
    3748:	4029      	ands	r1, r5
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    374a:	001f      	movs	r7, r3
	if (epn > CONF_USB_D_MAX_EP_N) {
    374c:	2b04      	cmp	r3, #4
    374e:	d900      	bls.n	3752 <_usb_d_dev_ep_init+0x2e>
    3750:	e07a      	b.n	3848 <_usb_d_dev_ep_init+0x124>
	if (ept->ep != 0xFF) {
    3752:	00a5      	lsls	r5, r4, #2
    3754:	192d      	adds	r5, r5, r4
    3756:	00ac      	lsls	r4, r5, #2
    3758:	46a0      	mov	r8, r4
    375a:	4c43      	ldr	r4, [pc, #268]	; (3868 <_usb_d_dev_ep_init+0x144>)
    375c:	3420      	adds	r4, #32
    375e:	4444      	add	r4, r8
    3760:	3426      	adds	r4, #38	; 0x26
    3762:	7824      	ldrb	r4, [r4, #0]
    3764:	2cff      	cmp	r4, #255	; 0xff
    3766:	d000      	beq.n	376a <_usb_d_dev_ep_init+0x46>
    3768:	e071      	b.n	384e <_usb_d_dev_ep_init+0x12a>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    376a:	2900      	cmp	r1, #0
    376c:	d118      	bne.n	37a0 <_usb_d_dev_ep_init+0x7c>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    376e:	2b00      	cmp	r3, #0
    3770:	d004      	beq.n	377c <_usb_d_dev_ep_init+0x58>
    3772:	4664      	mov	r4, ip
    3774:	2c00      	cmp	r4, #0
    3776:	db01      	blt.n	377c <_usb_d_dev_ep_init+0x58>
    3778:	3304      	adds	r3, #4
    377a:	b2db      	uxtb	r3, r3
		if (ept_in->ep != 0xFF) {
    377c:	009c      	lsls	r4, r3, #2
    377e:	18e3      	adds	r3, r4, r3
    3780:	009d      	lsls	r5, r3, #2
    3782:	4b39      	ldr	r3, [pc, #228]	; (3868 <_usb_d_dev_ep_init+0x144>)
    3784:	3320      	adds	r3, #32
    3786:	195b      	adds	r3, r3, r5
    3788:	3326      	adds	r3, #38	; 0x26
    378a:	781b      	ldrb	r3, [r3, #0]
    378c:	2bff      	cmp	r3, #255	; 0xff
    378e:	d161      	bne.n	3854 <_usb_d_dev_ep_init+0x130>
		if (pcfg->cache == NULL) {
    3790:	007b      	lsls	r3, r7, #1
    3792:	19db      	adds	r3, r3, r7
    3794:	009c      	lsls	r4, r3, #2
    3796:	4b35      	ldr	r3, [pc, #212]	; (386c <_usb_d_dev_ep_init+0x148>)
    3798:	191b      	adds	r3, r3, r4
    379a:	689b      	ldr	r3, [r3, #8]
    379c:	2b00      	cmp	r3, #0
    379e:	d05c      	beq.n	385a <_usb_d_dev_ep_init+0x136>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    37a0:	4663      	mov	r3, ip
    37a2:	2b00      	cmp	r3, #0
    37a4:	db37      	blt.n	3816 <_usb_d_dev_ep_init+0xf2>
    37a6:	007b      	lsls	r3, r7, #1
    37a8:	19db      	adds	r3, r3, r7
    37aa:	009c      	lsls	r4, r3, #2
    37ac:	4b2f      	ldr	r3, [pc, #188]	; (386c <_usb_d_dev_ep_init+0x148>)
    37ae:	191b      	adds	r3, r3, r4
    37b0:	689b      	ldr	r3, [r3, #8]
    37b2:	1e5c      	subs	r4, r3, #1
    37b4:	41a3      	sbcs	r3, r4
    37b6:	b2db      	uxtb	r3, r3
    37b8:	2b00      	cmp	r3, #0
    37ba:	d00a      	beq.n	37d2 <_usb_d_dev_ep_init+0xae>
    37bc:	4663      	mov	r3, ip
    37be:	2b00      	cmp	r3, #0
    37c0:	db33      	blt.n	382a <_usb_d_dev_ep_init+0x106>
    37c2:	007b      	lsls	r3, r7, #1
    37c4:	19db      	adds	r3, r3, r7
    37c6:	009c      	lsls	r4, r3, #2
    37c8:	4b28      	ldr	r3, [pc, #160]	; (386c <_usb_d_dev_ep_init+0x148>)
    37ca:	191b      	adds	r3, r3, r4
    37cc:	8a1b      	ldrh	r3, [r3, #16]
    37ce:	4293      	cmp	r3, r2
    37d0:	db46      	blt.n	3860 <_usb_d_dev_ep_init+0x13c>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    37d2:	4663      	mov	r3, ip
    37d4:	2b00      	cmp	r3, #0
    37d6:	db2f      	blt.n	3838 <_usb_d_dev_ep_init+0x114>
    37d8:	007b      	lsls	r3, r7, #1
    37da:	19df      	adds	r7, r3, r7
    37dc:	00bc      	lsls	r4, r7, #2
    37de:	4b23      	ldr	r3, [pc, #140]	; (386c <_usb_d_dev_ep_init+0x148>)
    37e0:	191b      	adds	r3, r3, r4
    37e2:	689b      	ldr	r3, [r3, #8]
    37e4:	469c      	mov	ip, r3
    37e6:	4b20      	ldr	r3, [pc, #128]	; (3868 <_usb_d_dev_ep_init+0x144>)
    37e8:	00b5      	lsls	r5, r6, #2
    37ea:	19af      	adds	r7, r5, r6
    37ec:	00bc      	lsls	r4, r7, #2
    37ee:	191c      	adds	r4, r3, r4
    37f0:	4667      	mov	r7, ip
    37f2:	6427      	str	r7, [r4, #64]	; 0x40
	ept->size     = max_pkt_siz;
    37f4:	3444      	adds	r4, #68	; 0x44
    37f6:	8022      	strh	r2, [r4, #0]
	ept->flags.u8 = (ep_type + 1);
    37f8:	3101      	adds	r1, #1
    37fa:	3320      	adds	r3, #32
    37fc:	19ac      	adds	r4, r5, r6
    37fe:	00a2      	lsls	r2, r4, #2
    3800:	0014      	movs	r4, r2
    3802:	189a      	adds	r2, r3, r2
    3804:	3227      	adds	r2, #39	; 0x27
    3806:	7011      	strb	r1, [r2, #0]
	ept->ep       = ep;
    3808:	191b      	adds	r3, r3, r4
    380a:	3326      	adds	r3, #38	; 0x26
    380c:	7018      	strb	r0, [r3, #0]
	return USB_OK;
    380e:	2000      	movs	r0, #0
}
    3810:	bc04      	pop	{r2}
    3812:	4690      	mov	r8, r2
    3814:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    3816:	007b      	lsls	r3, r7, #1
    3818:	19db      	adds	r3, r3, r7
    381a:	009c      	lsls	r4, r3, #2
    381c:	4b13      	ldr	r3, [pc, #76]	; (386c <_usb_d_dev_ep_init+0x148>)
    381e:	191b      	adds	r3, r3, r4
    3820:	68db      	ldr	r3, [r3, #12]
    3822:	1e5c      	subs	r4, r3, #1
    3824:	41a3      	sbcs	r3, r4
    3826:	b2db      	uxtb	r3, r3
    3828:	e7c6      	b.n	37b8 <_usb_d_dev_ep_init+0x94>
    382a:	007b      	lsls	r3, r7, #1
    382c:	19db      	adds	r3, r3, r7
    382e:	009c      	lsls	r4, r3, #2
    3830:	4b0e      	ldr	r3, [pc, #56]	; (386c <_usb_d_dev_ep_init+0x148>)
    3832:	191b      	adds	r3, r3, r4
    3834:	8a5b      	ldrh	r3, [r3, #18]
    3836:	e7ca      	b.n	37ce <_usb_d_dev_ep_init+0xaa>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    3838:	007b      	lsls	r3, r7, #1
    383a:	19df      	adds	r7, r3, r7
    383c:	00bc      	lsls	r4, r7, #2
    383e:	4b0b      	ldr	r3, [pc, #44]	; (386c <_usb_d_dev_ep_init+0x148>)
    3840:	191b      	adds	r3, r3, r4
    3842:	68db      	ldr	r3, [r3, #12]
    3844:	469c      	mov	ip, r3
    3846:	e7ce      	b.n	37e6 <_usb_d_dev_ep_init+0xc2>
		return -USB_ERR_PARAM;
    3848:	2012      	movs	r0, #18
    384a:	4240      	negs	r0, r0
    384c:	e7e0      	b.n	3810 <_usb_d_dev_ep_init+0xec>
		return -USB_ERR_REDO;
    384e:	2014      	movs	r0, #20
    3850:	4240      	negs	r0, r0
    3852:	e7dd      	b.n	3810 <_usb_d_dev_ep_init+0xec>
			return -USB_ERR_REDO;
    3854:	2014      	movs	r0, #20
    3856:	4240      	negs	r0, r0
    3858:	e7da      	b.n	3810 <_usb_d_dev_ep_init+0xec>
			return -USB_ERR_FUNC;
    385a:	2013      	movs	r0, #19
    385c:	4240      	negs	r0, r0
    385e:	e7d7      	b.n	3810 <_usb_d_dev_ep_init+0xec>
		return -USB_ERR_FUNC;
    3860:	2013      	movs	r0, #19
    3862:	4240      	negs	r0, r0
    3864:	e7d4      	b.n	3810 <_usb_d_dev_ep_init+0xec>
    3866:	46c0      	nop			; (mov r8, r8)
    3868:	200001e0 	.word	0x200001e0
    386c:	000058f8 	.word	0x000058f8

00003870 <_usb_d_dev_ep_deinit>:
{
    3870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3872:	0004      	movs	r4, r0
	uint8_t               epn = USB_EP_GET_N(ep);
    3874:	250f      	movs	r5, #15
    3876:	4005      	ands	r5, r0
    3878:	b247      	sxtb	r7, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    387a:	0ffb      	lsrs	r3, r7, #31
    387c:	469c      	mov	ip, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    387e:	2d00      	cmp	r5, #0
    3880:	d005      	beq.n	388e <_usb_d_dev_ep_deinit+0x1e>
    3882:	2f00      	cmp	r7, #0
    3884:	db01      	blt.n	388a <_usb_d_dev_ep_deinit+0x1a>
    3886:	002a      	movs	r2, r5
    3888:	e002      	b.n	3890 <_usb_d_dev_ep_deinit+0x20>
    388a:	1d2a      	adds	r2, r5, #4
    388c:	e000      	b.n	3890 <_usb_d_dev_ep_deinit+0x20>
    388e:	002a      	movs	r2, r5
	return &dev_inst.ep[ep_index];
    3890:	0016      	movs	r6, r2
    3892:	0093      	lsls	r3, r2, #2
    3894:	189b      	adds	r3, r3, r2
    3896:	0099      	lsls	r1, r3, #2
    3898:	3110      	adds	r1, #16
    389a:	4823      	ldr	r0, [pc, #140]	; (3928 <_usb_d_dev_ep_deinit+0xb8>)
    389c:	3020      	adds	r0, #32
    389e:	1840      	adds	r0, r0, r1
    38a0:	3004      	adds	r0, #4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    38a2:	2d04      	cmp	r5, #4
    38a4:	d830      	bhi.n	3908 <_usb_d_dev_ep_deinit+0x98>
    38a6:	0093      	lsls	r3, r2, #2
    38a8:	189a      	adds	r2, r3, r2
    38aa:	0091      	lsls	r1, r2, #2
    38ac:	4b1e      	ldr	r3, [pc, #120]	; (3928 <_usb_d_dev_ep_deinit+0xb8>)
    38ae:	3320      	adds	r3, #32
    38b0:	185b      	adds	r3, r3, r1
    38b2:	3326      	adds	r3, #38	; 0x26
    38b4:	781b      	ldrb	r3, [r3, #0]
    38b6:	2bff      	cmp	r3, #255	; 0xff
    38b8:	d026      	beq.n	3908 <_usb_d_dev_ep_deinit+0x98>
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    38ba:	2203      	movs	r2, #3
    38bc:	4661      	mov	r1, ip
    38be:	4b1b      	ldr	r3, [pc, #108]	; (392c <_usb_d_dev_ep_deinit+0xbc>)
    38c0:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    38c2:	00b2      	lsls	r2, r6, #2
    38c4:	1992      	adds	r2, r2, r6
    38c6:	0091      	lsls	r1, r2, #2
    38c8:	4b17      	ldr	r3, [pc, #92]	; (3928 <_usb_d_dev_ep_deinit+0xb8>)
    38ca:	185b      	adds	r3, r3, r1
    38cc:	3340      	adds	r3, #64	; 0x40
    38ce:	79da      	ldrb	r2, [r3, #7]
    38d0:	2307      	movs	r3, #7
    38d2:	4013      	ands	r3, r2
    38d4:	2b01      	cmp	r3, #1
    38d6:	d018      	beq.n	390a <_usb_d_dev_ep_deinit+0x9a>
	} else if (USB_EP_GET_DIR(ep)) {
    38d8:	2f00      	cmp	r7, #0
    38da:	db1c      	blt.n	3916 <_usb_d_dev_ep_deinit+0xa6>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    38dc:	4a14      	ldr	r2, [pc, #80]	; (3930 <_usb_d_dev_ep_deinit+0xc0>)
    38de:	3408      	adds	r4, #8
    38e0:	0164      	lsls	r4, r4, #5
    38e2:	5ca3      	ldrb	r3, [r4, r2]
    38e4:	2107      	movs	r1, #7
    38e6:	438b      	bics	r3, r1
    38e8:	54a3      	strb	r3, [r4, r2]
	ept->flags.u8 = 0;
    38ea:	4b0f      	ldr	r3, [pc, #60]	; (3928 <_usb_d_dev_ep_deinit+0xb8>)
    38ec:	3320      	adds	r3, #32
    38ee:	00b1      	lsls	r1, r6, #2
    38f0:	1988      	adds	r0, r1, r6
    38f2:	0082      	lsls	r2, r0, #2
    38f4:	189a      	adds	r2, r3, r2
    38f6:	3227      	adds	r2, #39	; 0x27
    38f8:	2000      	movs	r0, #0
    38fa:	7010      	strb	r0, [r2, #0]
	ept->ep       = 0xFF;
    38fc:	198e      	adds	r6, r1, r6
    38fe:	00b2      	lsls	r2, r6, #2
    3900:	189b      	adds	r3, r3, r2
    3902:	3326      	adds	r3, #38	; 0x26
    3904:	22ff      	movs	r2, #255	; 0xff
    3906:	701a      	strb	r2, [r3, #0]
}
    3908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    390a:	3408      	adds	r4, #8
    390c:	0164      	lsls	r4, r4, #5
    390e:	2200      	movs	r2, #0
    3910:	4b07      	ldr	r3, [pc, #28]	; (3930 <_usb_d_dev_ep_deinit+0xc0>)
    3912:	54e2      	strb	r2, [r4, r3]
    3914:	e7e9      	b.n	38ea <_usb_d_dev_ep_deinit+0x7a>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    3916:	4a06      	ldr	r2, [pc, #24]	; (3930 <_usb_d_dev_ep_deinit+0xc0>)
    3918:	3508      	adds	r5, #8
    391a:	016d      	lsls	r5, r5, #5
    391c:	5cab      	ldrb	r3, [r5, r2]
    391e:	2170      	movs	r1, #112	; 0x70
    3920:	438b      	bics	r3, r1
    3922:	54ab      	strb	r3, [r5, r2]
    3924:	e7e1      	b.n	38ea <_usb_d_dev_ep_deinit+0x7a>
    3926:	46c0      	nop			; (mov r8, r8)
    3928:	200001e0 	.word	0x200001e0
    392c:	00002e39 	.word	0x00002e39
    3930:	41005000 	.word	0x41005000

00003934 <_usb_d_dev_ep_enable>:
{
    3934:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn   = USB_EP_GET_N(ep);
    3936:	230f      	movs	r3, #15
    3938:	4003      	ands	r3, r0
    393a:	b240      	sxtb	r0, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    393c:	2b00      	cmp	r3, #0
    393e:	d005      	beq.n	394c <_usb_d_dev_ep_enable+0x18>
    3940:	2800      	cmp	r0, #0
    3942:	db01      	blt.n	3948 <_usb_d_dev_ep_enable+0x14>
    3944:	001e      	movs	r6, r3
    3946:	e002      	b.n	394e <_usb_d_dev_ep_enable+0x1a>
    3948:	1d1e      	adds	r6, r3, #4
    394a:	e000      	b.n	394e <_usb_d_dev_ep_enable+0x1a>
    394c:	001e      	movs	r6, r3
	return &dev_inst.ep[ep_index];
    394e:	0034      	movs	r4, r6
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    3950:	001a      	movs	r2, r3
    3952:	3208      	adds	r2, #8
    3954:	0152      	lsls	r2, r2, #5
    3956:	49b3      	ldr	r1, [pc, #716]	; (3c24 <_usb_d_dev_ep_enable+0x2f0>)
    3958:	5c55      	ldrb	r5, [r2, r1]
    395a:	b2ed      	uxtb	r5, r5
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    395c:	2b04      	cmp	r3, #4
    395e:	d900      	bls.n	3962 <_usb_d_dev_ep_enable+0x2e>
    3960:	e151      	b.n	3c06 <_usb_d_dev_ep_enable+0x2d2>
    3962:	00b1      	lsls	r1, r6, #2
    3964:	1989      	adds	r1, r1, r6
    3966:	008e      	lsls	r6, r1, #2
    3968:	4aaf      	ldr	r2, [pc, #700]	; (3c28 <_usb_d_dev_ep_enable+0x2f4>)
    396a:	3220      	adds	r2, #32
    396c:	1992      	adds	r2, r2, r6
    396e:	3226      	adds	r2, #38	; 0x26
    3970:	7812      	ldrb	r2, [r2, #0]
    3972:	2aff      	cmp	r2, #255	; 0xff
    3974:	d100      	bne.n	3978 <_usb_d_dev_ep_enable+0x44>
    3976:	e149      	b.n	3c0c <_usb_d_dev_ep_enable+0x2d8>
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    3978:	015a      	lsls	r2, r3, #5
    397a:	4eac      	ldr	r6, [pc, #688]	; (3c2c <_usb_d_dev_ep_enable+0x2f8>)
    397c:	18b6      	adds	r6, r6, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    397e:	00a1      	lsls	r1, r4, #2
    3980:	1909      	adds	r1, r1, r4
    3982:	008f      	lsls	r7, r1, #2
    3984:	4aa8      	ldr	r2, [pc, #672]	; (3c28 <_usb_d_dev_ep_enable+0x2f4>)
    3986:	19d2      	adds	r2, r2, r7
    3988:	3240      	adds	r2, #64	; 0x40
    398a:	79d1      	ldrb	r1, [r2, #7]
    398c:	2207      	movs	r2, #7
    398e:	400a      	ands	r2, r1
    3990:	2a01      	cmp	r2, #1
    3992:	d037      	beq.n	3a04 <_usb_d_dev_ep_enable+0xd0>
	} else if (dir) {
    3994:	2800      	cmp	r0, #0
    3996:	da00      	bge.n	399a <_usb_d_dev_ep_enable+0x66>
    3998:	e0cc      	b.n	3b34 <_usb_d_dev_ep_enable+0x200>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    399a:	076a      	lsls	r2, r5, #29
    399c:	d000      	beq.n	39a0 <_usb_d_dev_ep_enable+0x6c>
    399e:	e13e      	b.n	3c1e <_usb_d_dev_ep_enable+0x2ea>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    39a0:	4aa1      	ldr	r2, [pc, #644]	; (3c28 <_usb_d_dev_ep_enable+0x2f4>)
    39a2:	00a0      	lsls	r0, r4, #2
    39a4:	1907      	adds	r7, r0, r4
    39a6:	00b9      	lsls	r1, r7, #2
    39a8:	1851      	adds	r1, r2, r1
    39aa:	3140      	adds	r1, #64	; 0x40
    39ac:	79c9      	ldrb	r1, [r1, #7]
    39ae:	0749      	lsls	r1, r1, #29
    39b0:	0f49      	lsrs	r1, r1, #29
    39b2:	430d      	orrs	r5, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    39b4:	0019      	movs	r1, r3
    39b6:	3108      	adds	r1, #8
    39b8:	0149      	lsls	r1, r1, #5
    39ba:	4f9a      	ldr	r7, [pc, #616]	; (3c24 <_usb_d_dev_ep_enable+0x2f0>)
    39bc:	55cd      	strb	r5, [r1, r7]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    39be:	1904      	adds	r4, r0, r4
    39c0:	00a1      	lsls	r1, r4, #2
    39c2:	1852      	adds	r2, r2, r1
    39c4:	3244      	adds	r2, #68	; 0x44
    39c6:	8810      	ldrh	r0, [r2, #0]
    39c8:	0382      	lsls	r2, r0, #14
    39ca:	4999      	ldr	r1, [pc, #612]	; (3c30 <_usb_d_dev_ep_enable+0x2fc>)
    39cc:	400a      	ands	r2, r1
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    39ce:	2180      	movs	r1, #128	; 0x80
    39d0:	0089      	lsls	r1, r1, #2
    39d2:	4288      	cmp	r0, r1
    39d4:	d900      	bls.n	39d8 <_usb_d_dev_ep_enable+0xa4>
    39d6:	e0f9      	b.n	3bcc <_usb_d_dev_ep_enable+0x298>
    39d8:	3901      	subs	r1, #1
    39da:	39ff      	subs	r1, #255	; 0xff
    39dc:	4288      	cmp	r0, r1
    39de:	d900      	bls.n	39e2 <_usb_d_dev_ep_enable+0xae>
    39e0:	e107      	b.n	3bf2 <_usb_d_dev_ep_enable+0x2be>
    39e2:	2880      	cmp	r0, #128	; 0x80
    39e4:	d900      	bls.n	39e8 <_usb_d_dev_ep_enable+0xb4>
    39e6:	e106      	b.n	3bf6 <_usb_d_dev_ep_enable+0x2c2>
    39e8:	2840      	cmp	r0, #64	; 0x40
    39ea:	d900      	bls.n	39ee <_usb_d_dev_ep_enable+0xba>
    39ec:	e105      	b.n	3bfa <_usb_d_dev_ep_enable+0x2c6>
    39ee:	2820      	cmp	r0, #32
    39f0:	d900      	bls.n	39f4 <_usb_d_dev_ep_enable+0xc0>
    39f2:	e104      	b.n	3bfe <_usb_d_dev_ep_enable+0x2ca>
    39f4:	2810      	cmp	r0, #16
    39f6:	d900      	bls.n	39fa <_usb_d_dev_ep_enable+0xc6>
    39f8:	e103      	b.n	3c02 <_usb_d_dev_ep_enable+0x2ce>
    39fa:	39f8      	subs	r1, #248	; 0xf8
    39fc:	4281      	cmp	r1, r0
    39fe:	4189      	sbcs	r1, r1
    3a00:	4249      	negs	r1, r1
    3a02:	e0e4      	b.n	3bce <_usb_d_dev_ep_enable+0x29a>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    3a04:	3276      	adds	r2, #118	; 0x76
    3a06:	422a      	tst	r2, r5
    3a08:	d000      	beq.n	3a0c <_usb_d_dev_ep_enable+0xd8>
    3a0a:	e102      	b.n	3c12 <_usb_d_dev_ep_enable+0x2de>
    3a0c:	001a      	movs	r2, r3
    3a0e:	3208      	adds	r2, #8
    3a10:	0152      	lsls	r2, r2, #5
    3a12:	2011      	movs	r0, #17
    3a14:	4983      	ldr	r1, [pc, #524]	; (3c24 <_usb_d_dev_ep_enable+0x2f0>)
    3a16:	5450      	strb	r0, [r2, r1]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3a18:	4a83      	ldr	r2, [pc, #524]	; (3c28 <_usb_d_dev_ep_enable+0x2f4>)
    3a1a:	19d2      	adds	r2, r2, r7
    3a1c:	3244      	adds	r2, #68	; 0x44
    3a1e:	8812      	ldrh	r2, [r2, #0]
    3a20:	0391      	lsls	r1, r2, #14
    3a22:	4883      	ldr	r0, [pc, #524]	; (3c30 <_usb_d_dev_ep_enable+0x2fc>)
    3a24:	4001      	ands	r1, r0
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3a26:	2080      	movs	r0, #128	; 0x80
    3a28:	0080      	lsls	r0, r0, #2
    3a2a:	4282      	cmp	r2, r0
    3a2c:	d810      	bhi.n	3a50 <_usb_d_dev_ep_enable+0x11c>
    3a2e:	3801      	subs	r0, #1
    3a30:	38ff      	subs	r0, #255	; 0xff
    3a32:	4282      	cmp	r2, r0
    3a34:	d827      	bhi.n	3a86 <_usb_d_dev_ep_enable+0x152>
    3a36:	2a80      	cmp	r2, #128	; 0x80
    3a38:	d827      	bhi.n	3a8a <_usb_d_dev_ep_enable+0x156>
    3a3a:	2a40      	cmp	r2, #64	; 0x40
    3a3c:	d827      	bhi.n	3a8e <_usb_d_dev_ep_enable+0x15a>
    3a3e:	2a20      	cmp	r2, #32
    3a40:	d827      	bhi.n	3a92 <_usb_d_dev_ep_enable+0x15e>
    3a42:	2a10      	cmp	r2, #16
    3a44:	d827      	bhi.n	3a96 <_usb_d_dev_ep_enable+0x162>
    3a46:	38f8      	subs	r0, #248	; 0xf8
    3a48:	4290      	cmp	r0, r2
    3a4a:	4180      	sbcs	r0, r0
    3a4c:	4240      	negs	r0, r0
    3a4e:	e000      	b.n	3a52 <_usb_d_dev_ep_enable+0x11e>
    3a50:	2007      	movs	r0, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3a52:	0700      	lsls	r0, r0, #28
    3a54:	4301      	orrs	r1, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3a56:	6071      	str	r1, [r6, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3a58:	0491      	lsls	r1, r2, #18
    3a5a:	0c89      	lsrs	r1, r1, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3a5c:	2080      	movs	r0, #128	; 0x80
    3a5e:	0080      	lsls	r0, r0, #2
    3a60:	4282      	cmp	r2, r0
    3a62:	d81a      	bhi.n	3a9a <_usb_d_dev_ep_enable+0x166>
    3a64:	3801      	subs	r0, #1
    3a66:	38ff      	subs	r0, #255	; 0xff
    3a68:	4282      	cmp	r2, r0
    3a6a:	d859      	bhi.n	3b20 <_usb_d_dev_ep_enable+0x1ec>
    3a6c:	2a80      	cmp	r2, #128	; 0x80
    3a6e:	d859      	bhi.n	3b24 <_usb_d_dev_ep_enable+0x1f0>
    3a70:	2a40      	cmp	r2, #64	; 0x40
    3a72:	d859      	bhi.n	3b28 <_usb_d_dev_ep_enable+0x1f4>
    3a74:	2a20      	cmp	r2, #32
    3a76:	d859      	bhi.n	3b2c <_usb_d_dev_ep_enable+0x1f8>
    3a78:	2a10      	cmp	r2, #16
    3a7a:	d859      	bhi.n	3b30 <_usb_d_dev_ep_enable+0x1fc>
    3a7c:	38f8      	subs	r0, #248	; 0xf8
    3a7e:	4290      	cmp	r0, r2
    3a80:	4192      	sbcs	r2, r2
    3a82:	4252      	negs	r2, r2
    3a84:	e00a      	b.n	3a9c <_usb_d_dev_ep_enable+0x168>
    3a86:	2006      	movs	r0, #6
    3a88:	e7e3      	b.n	3a52 <_usb_d_dev_ep_enable+0x11e>
    3a8a:	2005      	movs	r0, #5
    3a8c:	e7e1      	b.n	3a52 <_usb_d_dev_ep_enable+0x11e>
    3a8e:	2004      	movs	r0, #4
    3a90:	e7df      	b.n	3a52 <_usb_d_dev_ep_enable+0x11e>
    3a92:	2003      	movs	r0, #3
    3a94:	e7dd      	b.n	3a52 <_usb_d_dev_ep_enable+0x11e>
    3a96:	2002      	movs	r0, #2
    3a98:	e7db      	b.n	3a52 <_usb_d_dev_ep_enable+0x11e>
    3a9a:	2207      	movs	r2, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3a9c:	0712      	lsls	r2, r2, #28
    3a9e:	430a      	orrs	r2, r1
    3aa0:	6172      	str	r2, [r6, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3aa2:	001a      	movs	r2, r3
    3aa4:	3208      	adds	r2, #8
    3aa6:	0152      	lsls	r2, r2, #5
    3aa8:	495e      	ldr	r1, [pc, #376]	; (3c24 <_usb_d_dev_ep_enable+0x2f0>)
    3aaa:	468c      	mov	ip, r1
    3aac:	4462      	add	r2, ip
    3aae:	2040      	movs	r0, #64	; 0x40
    3ab0:	7150      	strb	r0, [r2, #5]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3ab2:	2180      	movs	r1, #128	; 0x80
    3ab4:	7111      	strb	r1, [r2, #4]
	bank->STATUS_BK.reg     = 0;
    3ab6:	4a5d      	ldr	r2, [pc, #372]	; (3c2c <_usb_d_dev_ep_enable+0x2f8>)
    3ab8:	015b      	lsls	r3, r3, #5
    3aba:	18d3      	adds	r3, r2, r3
    3abc:	2100      	movs	r1, #0
    3abe:	7299      	strb	r1, [r3, #10]
    3ac0:	7699      	strb	r1, [r3, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3ac2:	4959      	ldr	r1, [pc, #356]	; (3c28 <_usb_d_dev_ep_enable+0x2f4>)
    3ac4:	000b      	movs	r3, r1
    3ac6:	3320      	adds	r3, #32
    3ac8:	00a6      	lsls	r6, r4, #2
    3aca:	1937      	adds	r7, r6, r4
    3acc:	00bd      	lsls	r5, r7, #2
    3ace:	195b      	adds	r3, r3, r5
    3ad0:	3326      	adds	r3, #38	; 0x26
    3ad2:	781b      	ldrb	r3, [r3, #0]
    3ad4:	250f      	movs	r5, #15
    3ad6:	402b      	ands	r3, r5
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    3ad8:	1937      	adds	r7, r6, r4
    3ada:	00bd      	lsls	r5, r7, #2
    3adc:	194d      	adds	r5, r1, r5
    3ade:	6c2f      	ldr	r7, [r5, #64]	; 0x40
	bank->ADDR.reg          = addr;
    3ae0:	015d      	lsls	r5, r3, #5
    3ae2:	50af      	str	r7, [r5, r2]
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    3ae4:	1934      	adds	r4, r6, r4
    3ae6:	00a6      	lsls	r6, r4, #2
    3ae8:	1989      	adds	r1, r1, r6
    3aea:	3144      	adds	r1, #68	; 0x44
    3aec:	8809      	ldrh	r1, [r1, #0]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    3aee:	1952      	adds	r2, r2, r5
    3af0:	6854      	ldr	r4, [r2, #4]
    3af2:	0489      	lsls	r1, r1, #18
    3af4:	0909      	lsrs	r1, r1, #4
    3af6:	4e4f      	ldr	r6, [pc, #316]	; (3c34 <_usb_d_dev_ep_enable+0x300>)
    3af8:	4034      	ands	r4, r6
    3afa:	4321      	orrs	r1, r4
    3afc:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    3afe:	6851      	ldr	r1, [r2, #4]
    3b00:	0b89      	lsrs	r1, r1, #14
    3b02:	038c      	lsls	r4, r1, #14
    3b04:	6054      	str	r4, [r2, #4]
    3b06:	3308      	adds	r3, #8
    3b08:	015b      	lsls	r3, r3, #5
    3b0a:	4463      	add	r3, ip
    3b0c:	22b0      	movs	r2, #176	; 0xb0
    3b0e:	711a      	strb	r2, [r3, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3b10:	7158      	strb	r0, [r3, #5]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    3b12:	4b49      	ldr	r3, [pc, #292]	; (3c38 <_usb_d_dev_ep_enable+0x304>)
    3b14:	469c      	mov	ip, r3
    3b16:	4465      	add	r5, ip
    3b18:	2310      	movs	r3, #16
    3b1a:	702b      	strb	r3, [r5, #0]
	return USB_OK;
    3b1c:	2000      	movs	r0, #0
    3b1e:	e067      	b.n	3bf0 <_usb_d_dev_ep_enable+0x2bc>
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3b20:	2206      	movs	r2, #6
    3b22:	e7bb      	b.n	3a9c <_usb_d_dev_ep_enable+0x168>
    3b24:	2205      	movs	r2, #5
    3b26:	e7b9      	b.n	3a9c <_usb_d_dev_ep_enable+0x168>
    3b28:	2204      	movs	r2, #4
    3b2a:	e7b7      	b.n	3a9c <_usb_d_dev_ep_enable+0x168>
    3b2c:	2203      	movs	r2, #3
    3b2e:	e7b5      	b.n	3a9c <_usb_d_dev_ep_enable+0x168>
    3b30:	2202      	movs	r2, #2
    3b32:	e7b3      	b.n	3a9c <_usb_d_dev_ep_enable+0x168>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    3b34:	2270      	movs	r2, #112	; 0x70
    3b36:	422a      	tst	r2, r5
    3b38:	d000      	beq.n	3b3c <_usb_d_dev_ep_enable+0x208>
    3b3a:	e06d      	b.n	3c18 <_usb_d_dev_ep_enable+0x2e4>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    3b3c:	493a      	ldr	r1, [pc, #232]	; (3c28 <_usb_d_dev_ep_enable+0x2f4>)
    3b3e:	00a0      	lsls	r0, r4, #2
    3b40:	1907      	adds	r7, r0, r4
    3b42:	00ba      	lsls	r2, r7, #2
    3b44:	188a      	adds	r2, r1, r2
    3b46:	3240      	adds	r2, #64	; 0x40
    3b48:	79d2      	ldrb	r2, [r2, #7]
    3b4a:	0752      	lsls	r2, r2, #29
    3b4c:	0e52      	lsrs	r2, r2, #25
    3b4e:	4315      	orrs	r5, r2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    3b50:	001a      	movs	r2, r3
    3b52:	3208      	adds	r2, #8
    3b54:	0152      	lsls	r2, r2, #5
    3b56:	4f33      	ldr	r7, [pc, #204]	; (3c24 <_usb_d_dev_ep_enable+0x2f0>)
    3b58:	55d5      	strb	r5, [r2, r7]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3b5a:	1904      	adds	r4, r0, r4
    3b5c:	00a2      	lsls	r2, r4, #2
    3b5e:	1889      	adds	r1, r1, r2
    3b60:	3144      	adds	r1, #68	; 0x44
    3b62:	8809      	ldrh	r1, [r1, #0]
    3b64:	048a      	lsls	r2, r1, #18
    3b66:	0c92      	lsrs	r2, r2, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3b68:	2080      	movs	r0, #128	; 0x80
    3b6a:	0080      	lsls	r0, r0, #2
    3b6c:	4281      	cmp	r1, r0
    3b6e:	d810      	bhi.n	3b92 <_usb_d_dev_ep_enable+0x25e>
    3b70:	3801      	subs	r0, #1
    3b72:	38ff      	subs	r0, #255	; 0xff
    3b74:	4281      	cmp	r1, r0
    3b76:	d81f      	bhi.n	3bb8 <_usb_d_dev_ep_enable+0x284>
    3b78:	2980      	cmp	r1, #128	; 0x80
    3b7a:	d81f      	bhi.n	3bbc <_usb_d_dev_ep_enable+0x288>
    3b7c:	2940      	cmp	r1, #64	; 0x40
    3b7e:	d81f      	bhi.n	3bc0 <_usb_d_dev_ep_enable+0x28c>
    3b80:	2920      	cmp	r1, #32
    3b82:	d81f      	bhi.n	3bc4 <_usb_d_dev_ep_enable+0x290>
    3b84:	2910      	cmp	r1, #16
    3b86:	d81f      	bhi.n	3bc8 <_usb_d_dev_ep_enable+0x294>
    3b88:	38f8      	subs	r0, #248	; 0xf8
    3b8a:	4288      	cmp	r0, r1
    3b8c:	4189      	sbcs	r1, r1
    3b8e:	4249      	negs	r1, r1
    3b90:	e000      	b.n	3b94 <_usb_d_dev_ep_enable+0x260>
    3b92:	2107      	movs	r1, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3b94:	0709      	lsls	r1, r1, #28
    3b96:	430a      	orrs	r2, r1
    3b98:	6172      	str	r2, [r6, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3b9a:	001a      	movs	r2, r3
    3b9c:	3208      	adds	r2, #8
    3b9e:	0152      	lsls	r2, r2, #5
    3ba0:	4920      	ldr	r1, [pc, #128]	; (3c24 <_usb_d_dev_ep_enable+0x2f0>)
    3ba2:	468c      	mov	ip, r1
    3ba4:	4462      	add	r2, ip
    3ba6:	2180      	movs	r1, #128	; 0x80
    3ba8:	7111      	strb	r1, [r2, #4]
	bank->STATUS_BK.reg     = 0;
    3baa:	015a      	lsls	r2, r3, #5
    3bac:	4b1f      	ldr	r3, [pc, #124]	; (3c2c <_usb_d_dev_ep_enable+0x2f8>)
    3bae:	189b      	adds	r3, r3, r2
    3bb0:	2200      	movs	r2, #0
    3bb2:	769a      	strb	r2, [r3, #26]
	return USB_OK;
    3bb4:	2000      	movs	r0, #0
    3bb6:	e01b      	b.n	3bf0 <_usb_d_dev_ep_enable+0x2bc>
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3bb8:	2106      	movs	r1, #6
    3bba:	e7eb      	b.n	3b94 <_usb_d_dev_ep_enable+0x260>
    3bbc:	2105      	movs	r1, #5
    3bbe:	e7e9      	b.n	3b94 <_usb_d_dev_ep_enable+0x260>
    3bc0:	2104      	movs	r1, #4
    3bc2:	e7e7      	b.n	3b94 <_usb_d_dev_ep_enable+0x260>
    3bc4:	2103      	movs	r1, #3
    3bc6:	e7e5      	b.n	3b94 <_usb_d_dev_ep_enable+0x260>
    3bc8:	2102      	movs	r1, #2
    3bca:	e7e3      	b.n	3b94 <_usb_d_dev_ep_enable+0x260>
    3bcc:	2107      	movs	r1, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3bce:	0709      	lsls	r1, r1, #28
    3bd0:	430a      	orrs	r2, r1
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3bd2:	6072      	str	r2, [r6, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3bd4:	001a      	movs	r2, r3
    3bd6:	3208      	adds	r2, #8
    3bd8:	0152      	lsls	r2, r2, #5
    3bda:	4912      	ldr	r1, [pc, #72]	; (3c24 <_usb_d_dev_ep_enable+0x2f0>)
    3bdc:	468c      	mov	ip, r1
    3bde:	4462      	add	r2, ip
    3be0:	2140      	movs	r1, #64	; 0x40
    3be2:	7151      	strb	r1, [r2, #5]
	bank->STATUS_BK.reg     = 0;
    3be4:	015b      	lsls	r3, r3, #5
    3be6:	4a11      	ldr	r2, [pc, #68]	; (3c2c <_usb_d_dev_ep_enable+0x2f8>)
    3be8:	18d3      	adds	r3, r2, r3
    3bea:	2200      	movs	r2, #0
    3bec:	729a      	strb	r2, [r3, #10]
	return USB_OK;
    3bee:	2000      	movs	r0, #0
}
    3bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3bf2:	2106      	movs	r1, #6
    3bf4:	e7eb      	b.n	3bce <_usb_d_dev_ep_enable+0x29a>
    3bf6:	2105      	movs	r1, #5
    3bf8:	e7e9      	b.n	3bce <_usb_d_dev_ep_enable+0x29a>
    3bfa:	2104      	movs	r1, #4
    3bfc:	e7e7      	b.n	3bce <_usb_d_dev_ep_enable+0x29a>
    3bfe:	2103      	movs	r1, #3
    3c00:	e7e5      	b.n	3bce <_usb_d_dev_ep_enable+0x29a>
    3c02:	2102      	movs	r1, #2
    3c04:	e7e3      	b.n	3bce <_usb_d_dev_ep_enable+0x29a>
		return -USB_ERR_PARAM;
    3c06:	2012      	movs	r0, #18
    3c08:	4240      	negs	r0, r0
    3c0a:	e7f1      	b.n	3bf0 <_usb_d_dev_ep_enable+0x2bc>
    3c0c:	2012      	movs	r0, #18
    3c0e:	4240      	negs	r0, r0
    3c10:	e7ee      	b.n	3bf0 <_usb_d_dev_ep_enable+0x2bc>
			return -USB_ERR_REDO;
    3c12:	2014      	movs	r0, #20
    3c14:	4240      	negs	r0, r0
    3c16:	e7eb      	b.n	3bf0 <_usb_d_dev_ep_enable+0x2bc>
			return -USB_ERR_REDO;
    3c18:	2014      	movs	r0, #20
    3c1a:	4240      	negs	r0, r0
    3c1c:	e7e8      	b.n	3bf0 <_usb_d_dev_ep_enable+0x2bc>
			return -USB_ERR_REDO;
    3c1e:	2014      	movs	r0, #20
    3c20:	4240      	negs	r0, r0
    3c22:	e7e5      	b.n	3bf0 <_usb_d_dev_ep_enable+0x2bc>
    3c24:	41005000 	.word	0x41005000
    3c28:	200001e0 	.word	0x200001e0
    3c2c:	20000160 	.word	0x20000160
    3c30:	0fffc000 	.word	0x0fffc000
    3c34:	f0003fff 	.word	0xf0003fff
    3c38:	41005109 	.word	0x41005109

00003c3c <_usb_d_dev_ep_stall>:
{
    3c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    3c3e:	220f      	movs	r2, #15
    3c40:	4002      	ands	r2, r0
    3c42:	b240      	sxtb	r0, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    3c44:	0fc4      	lsrs	r4, r0, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3c46:	2a00      	cmp	r2, #0
    3c48:	d005      	beq.n	3c56 <_usb_d_dev_ep_stall+0x1a>
    3c4a:	2800      	cmp	r0, #0
    3c4c:	db01      	blt.n	3c52 <_usb_d_dev_ep_stall+0x16>
    3c4e:	0013      	movs	r3, r2
    3c50:	e002      	b.n	3c58 <_usb_d_dev_ep_stall+0x1c>
    3c52:	1d13      	adds	r3, r2, #4
    3c54:	e000      	b.n	3c58 <_usb_d_dev_ep_stall+0x1c>
    3c56:	0013      	movs	r3, r2
	return &dev_inst.ep[ep_index];
    3c58:	001d      	movs	r5, r3
    3c5a:	0098      	lsls	r0, r3, #2
    3c5c:	18c0      	adds	r0, r0, r3
    3c5e:	0083      	lsls	r3, r0, #2
    3c60:	3310      	adds	r3, #16
    3c62:	0018      	movs	r0, r3
    3c64:	4b47      	ldr	r3, [pc, #284]	; (3d84 <_usb_d_dev_ep_stall+0x148>)
    3c66:	3320      	adds	r3, #32
    3c68:	181b      	adds	r3, r3, r0
    3c6a:	3304      	adds	r3, #4
	if (epn > CONF_USB_D_MAX_EP_N) {
    3c6c:	2a04      	cmp	r2, #4
    3c6e:	d900      	bls.n	3c72 <_usb_d_dev_ep_stall+0x36>
    3c70:	e084      	b.n	3d7c <_usb_d_dev_ep_stall+0x140>
	if (USB_EP_STALL_SET == ctrl) {
    3c72:	2901      	cmp	r1, #1
    3c74:	d018      	beq.n	3ca8 <_usb_d_dev_ep_stall+0x6c>
	} else if (USB_EP_STALL_CLR == ctrl) {
    3c76:	2900      	cmp	r1, #0
    3c78:	d03d      	beq.n	3cf6 <_usb_d_dev_ep_stall+0xba>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3c7a:	00aa      	lsls	r2, r5, #2
    3c7c:	1952      	adds	r2, r2, r5
    3c7e:	0091      	lsls	r1, r2, #2
    3c80:	4b40      	ldr	r3, [pc, #256]	; (3d84 <_usb_d_dev_ep_stall+0x148>)
    3c82:	3320      	adds	r3, #32
    3c84:	185b      	adds	r3, r3, r1
    3c86:	3326      	adds	r3, #38	; 0x26
    3c88:	781a      	ldrb	r2, [r3, #0]
    3c8a:	230f      	movs	r3, #15
    3c8c:	4013      	ands	r3, r2
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    3c8e:	3308      	adds	r3, #8
    3c90:	015b      	lsls	r3, r3, #5
    3c92:	4a3d      	ldr	r2, [pc, #244]	; (3d88 <_usb_d_dev_ep_stall+0x14c>)
    3c94:	4694      	mov	ip, r2
    3c96:	4463      	add	r3, ip
    3c98:	7998      	ldrb	r0, [r3, #6]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    3c9a:	2310      	movs	r3, #16
    3c9c:	40a3      	lsls	r3, r4
    3c9e:	4018      	ands	r0, r3
    3ca0:	1e43      	subs	r3, r0, #1
    3ca2:	4198      	sbcs	r0, r3
    3ca4:	b2c0      	uxtb	r0, r0
}
    3ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3ca8:	4836      	ldr	r0, [pc, #216]	; (3d84 <_usb_d_dev_ep_stall+0x148>)
    3caa:	0003      	movs	r3, r0
    3cac:	3320      	adds	r3, #32
    3cae:	00aa      	lsls	r2, r5, #2
    3cb0:	1956      	adds	r6, r2, r5
    3cb2:	00b1      	lsls	r1, r6, #2
    3cb4:	185b      	adds	r3, r3, r1
    3cb6:	3326      	adds	r3, #38	; 0x26
    3cb8:	781b      	ldrb	r3, [r3, #0]
    3cba:	210f      	movs	r1, #15
    3cbc:	400b      	ands	r3, r1
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    3cbe:	2610      	movs	r6, #16
    3cc0:	40a6      	lsls	r6, r4
    3cc2:	b2f6      	uxtb	r6, r6
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3cc4:	0019      	movs	r1, r3
    3cc6:	3108      	adds	r1, #8
    3cc8:	0149      	lsls	r1, r1, #5
    3cca:	4f2f      	ldr	r7, [pc, #188]	; (3d88 <_usb_d_dev_ep_stall+0x14c>)
    3ccc:	46bc      	mov	ip, r7
    3cce:	4461      	add	r1, ip
    3cd0:	714e      	strb	r6, [r1, #5]
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    3cd2:	2120      	movs	r1, #32
    3cd4:	40a1      	lsls	r1, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    3cd6:	b2cc      	uxtb	r4, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    3cd8:	0159      	lsls	r1, r3, #5
    3cda:	4b2c      	ldr	r3, [pc, #176]	; (3d8c <_usb_d_dev_ep_stall+0x150>)
    3cdc:	469c      	mov	ip, r3
    3cde:	4461      	add	r1, ip
    3ce0:	700c      	strb	r4, [r1, #0]
	ept->flags.bits.is_stalled = 1;
    3ce2:	1952      	adds	r2, r2, r5
    3ce4:	0093      	lsls	r3, r2, #2
    3ce6:	18c3      	adds	r3, r0, r3
    3ce8:	3340      	adds	r3, #64	; 0x40
    3cea:	79da      	ldrb	r2, [r3, #7]
    3cec:	2108      	movs	r1, #8
    3cee:	430a      	orrs	r2, r1
    3cf0:	71da      	strb	r2, [r3, #7]
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    3cf2:	2000      	movs	r0, #0
    3cf4:	e7d7      	b.n	3ca6 <_usb_d_dev_ep_stall+0x6a>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    3cf6:	7c9a      	ldrb	r2, [r3, #18]
    3cf8:	310f      	adds	r1, #15
    3cfa:	400a      	ands	r2, r1
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    3cfc:	0011      	movs	r1, r2
    3cfe:	3108      	adds	r1, #8
    3d00:	0149      	lsls	r1, r1, #5
    3d02:	4821      	ldr	r0, [pc, #132]	; (3d88 <_usb_d_dev_ep_stall+0x14c>)
    3d04:	4684      	mov	ip, r0
    3d06:	4461      	add	r1, ip
    3d08:	7988      	ldrb	r0, [r1, #6]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    3d0a:	2110      	movs	r1, #16
    3d0c:	40a1      	lsls	r1, r4
	if (!is_stalled) {
    3d0e:	4208      	tst	r0, r1
    3d10:	d024      	beq.n	3d5c <_usb_d_dev_ep_stall+0x120>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    3d12:	b2c9      	uxtb	r1, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3d14:	0010      	movs	r0, r2
    3d16:	3008      	adds	r0, #8
    3d18:	0140      	lsls	r0, r0, #5
    3d1a:	4460      	add	r0, ip
    3d1c:	7101      	strb	r1, [r0, #4]
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    3d1e:	2120      	movs	r1, #32
    3d20:	40a1      	lsls	r1, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    3d22:	b2ce      	uxtb	r6, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    3d24:	0155      	lsls	r5, r2, #5
    3d26:	4f1a      	ldr	r7, [pc, #104]	; (3d90 <_usb_d_dev_ep_stall+0x154>)
    3d28:	46bc      	mov	ip, r7
    3d2a:	4465      	add	r5, ip
    3d2c:	702e      	strb	r6, [r5, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    3d2e:	79c0      	ldrb	r0, [r0, #7]
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    3d30:	4208      	tst	r0, r1
    3d32:	d00a      	beq.n	3d4a <_usb_d_dev_ep_stall+0x10e>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3d34:	0011      	movs	r1, r2
    3d36:	3108      	adds	r1, #8
    3d38:	0149      	lsls	r1, r1, #5
    3d3a:	4813      	ldr	r0, [pc, #76]	; (3d88 <_usb_d_dev_ep_stall+0x14c>)
    3d3c:	4684      	mov	ip, r0
    3d3e:	4461      	add	r1, ip
    3d40:	71ce      	strb	r6, [r1, #7]
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    3d42:	2001      	movs	r0, #1
    3d44:	40a0      	lsls	r0, r4
    3d46:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3d48:	7108      	strb	r0, [r1, #4]
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    3d4a:	7cd8      	ldrb	r0, [r3, #19]
    3d4c:	2107      	movs	r1, #7
    3d4e:	4001      	ands	r1, r0
    3d50:	2901      	cmp	r1, #1
    3d52:	d005      	beq.n	3d60 <_usb_d_dev_ep_stall+0x124>
		ept->flags.bits.is_stalled = 0;
    3d54:	7cda      	ldrb	r2, [r3, #19]
    3d56:	2108      	movs	r1, #8
    3d58:	438a      	bics	r2, r1
    3d5a:	74da      	strb	r2, [r3, #19]
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    3d5c:	2000      	movs	r0, #0
    3d5e:	e7a2      	b.n	3ca6 <_usb_d_dev_ep_stall+0x6a>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    3d60:	3208      	adds	r2, #8
    3d62:	0152      	lsls	r2, r2, #5
    3d64:	4908      	ldr	r1, [pc, #32]	; (3d88 <_usb_d_dev_ep_stall+0x14c>)
    3d66:	468c      	mov	ip, r1
    3d68:	4462      	add	r2, ip
    3d6a:	7991      	ldrb	r1, [r2, #6]
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    3d6c:	2230      	movs	r2, #48	; 0x30
    3d6e:	4211      	tst	r1, r2
    3d70:	d1f4      	bne.n	3d5c <_usb_d_dev_ep_stall+0x120>
			ept->flags.bits.is_stalled = 0;
    3d72:	0002      	movs	r2, r0
    3d74:	2108      	movs	r1, #8
    3d76:	438a      	bics	r2, r1
    3d78:	74da      	strb	r2, [r3, #19]
    3d7a:	e7ef      	b.n	3d5c <_usb_d_dev_ep_stall+0x120>
		return -USB_ERR_PARAM;
    3d7c:	2012      	movs	r0, #18
    3d7e:	4240      	negs	r0, r0
    3d80:	e791      	b.n	3ca6 <_usb_d_dev_ep_stall+0x6a>
    3d82:	46c0      	nop			; (mov r8, r8)
    3d84:	200001e0 	.word	0x200001e0
    3d88:	41005000 	.word	0x41005000
    3d8c:	41005109 	.word	0x41005109
    3d90:	41005108 	.word	0x41005108

00003d94 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    3d94:	b570      	push	{r4, r5, r6, lr}
    3d96:	000e      	movs	r6, r1
	uint8_t            epn   = USB_EP_GET_N(ep);
    3d98:	240f      	movs	r4, #15
    3d9a:	4004      	ands	r4, r0
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    3d9c:	0162      	lsls	r2, r4, #5
    3d9e:	4b18      	ldr	r3, [pc, #96]	; (3e00 <_usb_d_dev_ep_read_req+0x6c>)
    3da0:	189b      	adds	r3, r3, r2
	uint32_t           addr  = bank[0].ADDR.reg;
    3da2:	6819      	ldr	r1, [r3, #0]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    3da4:	685d      	ldr	r5, [r3, #4]
    3da6:	04ad      	lsls	r5, r5, #18
    3da8:	0cad      	lsrs	r5, r5, #18

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    3daa:	2c04      	cmp	r4, #4
    3dac:	d81f      	bhi.n	3dee <_usb_d_dev_ep_read_req+0x5a>
    3dae:	2e00      	cmp	r6, #0
    3db0:	d020      	beq.n	3df4 <_usb_d_dev_ep_read_req+0x60>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    3db2:	0023      	movs	r3, r4
    3db4:	3308      	adds	r3, #8
    3db6:	015b      	lsls	r3, r3, #5
    3db8:	4a12      	ldr	r2, [pc, #72]	; (3e04 <_usb_d_dev_ep_read_req+0x70>)
    3dba:	5c9b      	ldrb	r3, [r3, r2]
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    3dbc:	2b11      	cmp	r3, #17
    3dbe:	d11c      	bne.n	3dfa <_usb_d_dev_ep_read_req+0x66>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    3dc0:	0023      	movs	r3, r4
    3dc2:	3308      	adds	r3, #8
    3dc4:	015b      	lsls	r3, r3, #5
    3dc6:	4694      	mov	ip, r2
    3dc8:	4463      	add	r3, ip
    3dca:	79db      	ldrb	r3, [r3, #7]
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    3dcc:	06db      	lsls	r3, r3, #27
    3dce:	d401      	bmi.n	3dd4 <_usb_d_dev_ep_read_req+0x40>
		return ERR_NONE;
    3dd0:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    3dd2:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(req_buf, (void *)addr, 8);
    3dd4:	2208      	movs	r2, #8
    3dd6:	0030      	movs	r0, r6
    3dd8:	4b0b      	ldr	r3, [pc, #44]	; (3e08 <_usb_d_dev_ep_read_req+0x74>)
    3dda:	4798      	blx	r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3ddc:	3408      	adds	r4, #8
    3dde:	0164      	lsls	r4, r4, #5
    3de0:	4b08      	ldr	r3, [pc, #32]	; (3e04 <_usb_d_dev_ep_read_req+0x70>)
    3de2:	469c      	mov	ip, r3
    3de4:	4464      	add	r4, ip
    3de6:	2310      	movs	r3, #16
    3de8:	71e3      	strb	r3, [r4, #7]
	return bytes;
    3dea:	0028      	movs	r0, r5
    3dec:	e7f1      	b.n	3dd2 <_usb_d_dev_ep_read_req+0x3e>
		return -USB_ERR_PARAM;
    3dee:	2012      	movs	r0, #18
    3df0:	4240      	negs	r0, r0
    3df2:	e7ee      	b.n	3dd2 <_usb_d_dev_ep_read_req+0x3e>
    3df4:	2012      	movs	r0, #18
    3df6:	4240      	negs	r0, r0
    3df8:	e7eb      	b.n	3dd2 <_usb_d_dev_ep_read_req+0x3e>
		return -USB_ERR_FUNC;
    3dfa:	2013      	movs	r0, #19
    3dfc:	4240      	negs	r0, r0
    3dfe:	e7e8      	b.n	3dd2 <_usb_d_dev_ep_read_req+0x3e>
    3e00:	20000160 	.word	0x20000160
    3e04:	41005000 	.word	0x41005000
    3e08:	000056dd 	.word	0x000056dd

00003e0c <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    3e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e0e:	46de      	mov	lr, fp
    3e10:	4657      	mov	r7, sl
    3e12:	464e      	mov	r6, r9
    3e14:	4645      	mov	r5, r8
    3e16:	b5e0      	push	{r5, r6, r7, lr}
    3e18:	b085      	sub	sp, #20
    3e1a:	4680      	mov	r8, r0
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    3e1c:	7a04      	ldrb	r4, [r0, #8]
    3e1e:	220f      	movs	r2, #15
    3e20:	4022      	ands	r2, r4
    3e22:	b264      	sxtb	r4, r4
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    3e24:	0fe3      	lsrs	r3, r4, #31
    3e26:	4699      	mov	r9, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3e28:	2a00      	cmp	r2, #0
    3e2a:	d005      	beq.n	3e38 <_usb_d_dev_ep_trans+0x2c>
    3e2c:	2c00      	cmp	r4, #0
    3e2e:	db01      	blt.n	3e34 <_usb_d_dev_ep_trans+0x28>
    3e30:	0010      	movs	r0, r2
    3e32:	e002      	b.n	3e3a <_usb_d_dev_ep_trans+0x2e>
    3e34:	1d10      	adds	r0, r2, #4
    3e36:	e000      	b.n	3e3a <_usb_d_dev_ep_trans+0x2e>
    3e38:	0010      	movs	r0, r2
	return &dev_inst.ep[ep_index];
    3e3a:	0005      	movs	r5, r0
    3e3c:	4b62      	ldr	r3, [pc, #392]	; (3fc8 <_usb_d_dev_ep_trans+0x1bc>)
    3e3e:	001f      	movs	r7, r3
    3e40:	3720      	adds	r7, #32
    3e42:	0081      	lsls	r1, r0, #2
    3e44:	180e      	adds	r6, r1, r0
    3e46:	46b4      	mov	ip, r6
    3e48:	00b6      	lsls	r6, r6, #2
    3e4a:	3610      	adds	r6, #16
    3e4c:	19bf      	adds	r7, r7, r6
    3e4e:	3704      	adds	r7, #4
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    3e50:	4661      	mov	r1, ip
    3e52:	0088      	lsls	r0, r1, #2
    3e54:	181b      	adds	r3, r3, r0
    3e56:	3344      	adds	r3, #68	; 0x44
    3e58:	881b      	ldrh	r3, [r3, #0]
    3e5a:	495c      	ldr	r1, [pc, #368]	; (3fcc <_usb_d_dev_ep_trans+0x1c0>)
    3e5c:	428b      	cmp	r3, r1
    3e5e:	d042      	beq.n	3ee6 <_usb_d_dev_ep_trans+0xda>
    3e60:	1e5e      	subs	r6, r3, #1
    3e62:	b2b6      	uxth	r6, r6
	bool     size_n_aligned = (trans->size & size_mask);
    3e64:	4641      	mov	r1, r8
    3e66:	6849      	ldr	r1, [r1, #4]
    3e68:	400e      	ands	r6, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    3e6a:	2a04      	cmp	r2, #4
    3e6c:	d900      	bls.n	3e70 <_usb_d_dev_ep_trans+0x64>
    3e6e:	e0a1      	b.n	3fb4 <_usb_d_dev_ep_trans+0x1a8>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    3e70:	4642      	mov	r2, r8
    3e72:	6812      	ldr	r2, [r2, #0]
    3e74:	4856      	ldr	r0, [pc, #344]	; (3fd0 <_usb_d_dev_ep_trans+0x1c4>)
    3e76:	4282      	cmp	r2, r0
    3e78:	d90c      	bls.n	3e94 <_usb_d_dev_ep_trans+0x88>
    3e7a:	1888      	adds	r0, r1, r2
    3e7c:	9001      	str	r0, [sp, #4]
    3e7e:	4855      	ldr	r0, [pc, #340]	; (3fd4 <_usb_d_dev_ep_trans+0x1c8>)
    3e80:	4684      	mov	ip, r0
    3e82:	9801      	ldr	r0, [sp, #4]
    3e84:	4560      	cmp	r0, ip
    3e86:	d805      	bhi.n	3e94 <_usb_d_dev_ep_trans+0x88>
    3e88:	0792      	lsls	r2, r2, #30
    3e8a:	d103      	bne.n	3e94 <_usb_d_dev_ep_trans+0x88>
	    || (!dir && (trans->size < ept->size))) {
    3e8c:	2c00      	cmp	r4, #0
    3e8e:	db2c      	blt.n	3eea <_usb_d_dev_ep_trans+0xde>
    3e90:	4299      	cmp	r1, r3
    3e92:	d22d      	bcs.n	3ef0 <_usb_d_dev_ep_trans+0xe4>
		if (!ept->cache) {
    3e94:	00ab      	lsls	r3, r5, #2
    3e96:	195b      	adds	r3, r3, r5
    3e98:	009a      	lsls	r2, r3, #2
    3e9a:	4b4b      	ldr	r3, [pc, #300]	; (3fc8 <_usb_d_dev_ep_trans+0x1bc>)
    3e9c:	189b      	adds	r3, r3, r2
    3e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3ea0:	2b00      	cmp	r3, #0
    3ea2:	d100      	bne.n	3ea6 <_usb_d_dev_ep_trans+0x9a>
    3ea4:	e089      	b.n	3fba <_usb_d_dev_ep_trans+0x1ae>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
    3ea6:	2301      	movs	r3, #1
    3ea8:	9301      	str	r3, [sp, #4]
	}
	if (!dir && size_n_aligned) {
    3eaa:	2c00      	cmp	r4, #0
    3eac:	db0a      	blt.n	3ec4 <_usb_d_dev_ep_trans+0xb8>
    3eae:	2e00      	cmp	r6, #0
    3eb0:	d008      	beq.n	3ec4 <_usb_d_dev_ep_trans+0xb8>
		if (!ept->cache) {
    3eb2:	00ab      	lsls	r3, r5, #2
    3eb4:	195b      	adds	r3, r3, r5
    3eb6:	009a      	lsls	r2, r3, #2
    3eb8:	4b43      	ldr	r3, [pc, #268]	; (3fc8 <_usb_d_dev_ep_trans+0x1bc>)
    3eba:	189b      	adds	r3, r3, r2
    3ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3ebe:	2b00      	cmp	r3, #0
    3ec0:	d100      	bne.n	3ec4 <_usb_d_dev_ep_trans+0xb8>
    3ec2:	e07d      	b.n	3fc0 <_usb_d_dev_ep_trans+0x1b4>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    3ec4:	00aa      	lsls	r2, r5, #2
    3ec6:	1952      	adds	r2, r2, r5
    3ec8:	0091      	lsls	r1, r2, #2
    3eca:	4b3f      	ldr	r3, [pc, #252]	; (3fc8 <_usb_d_dev_ep_trans+0x1bc>)
    3ecc:	185b      	adds	r3, r3, r1
    3ece:	3340      	adds	r3, #64	; 0x40
    3ed0:	79db      	ldrb	r3, [r3, #7]
    3ed2:	071b      	lsls	r3, r3, #28
    3ed4:	d50f      	bpl.n	3ef6 <_usb_d_dev_ep_trans+0xea>
		return USB_HALTED;
    3ed6:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    3ed8:	b005      	add	sp, #20
    3eda:	bc3c      	pop	{r2, r3, r4, r5}
    3edc:	4690      	mov	r8, r2
    3ede:	4699      	mov	r9, r3
    3ee0:	46a2      	mov	sl, r4
    3ee2:	46ab      	mov	fp, r5
    3ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    3ee6:	001e      	movs	r6, r3
    3ee8:	e7bc      	b.n	3e64 <_usb_d_dev_ep_trans+0x58>
	bool use_cache = false;
    3eea:	2300      	movs	r3, #0
    3eec:	9301      	str	r3, [sp, #4]
    3eee:	e7dc      	b.n	3eaa <_usb_d_dev_ep_trans+0x9e>
    3ef0:	2300      	movs	r3, #0
    3ef2:	9301      	str	r3, [sp, #4]
    3ef4:	e7d9      	b.n	3eaa <_usb_d_dev_ep_trans+0x9e>
	atomic_enter_critical(&flags);
    3ef6:	a803      	add	r0, sp, #12
    3ef8:	4b37      	ldr	r3, [pc, #220]	; (3fd8 <_usb_d_dev_ep_trans+0x1cc>)
    3efa:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    3efc:	00aa      	lsls	r2, r5, #2
    3efe:	1952      	adds	r2, r2, r5
    3f00:	0091      	lsls	r1, r2, #2
    3f02:	4b31      	ldr	r3, [pc, #196]	; (3fc8 <_usb_d_dev_ep_trans+0x1bc>)
    3f04:	185b      	adds	r3, r3, r1
    3f06:	3340      	adds	r3, #64	; 0x40
    3f08:	79db      	ldrb	r3, [r3, #7]
    3f0a:	065b      	lsls	r3, r3, #25
    3f0c:	d430      	bmi.n	3f70 <_usb_d_dev_ep_trans+0x164>
	ept->flags.bits.is_busy = 1;
    3f0e:	00ab      	lsls	r3, r5, #2
    3f10:	195b      	adds	r3, r3, r5
    3f12:	009a      	lsls	r2, r3, #2
    3f14:	4b2c      	ldr	r3, [pc, #176]	; (3fc8 <_usb_d_dev_ep_trans+0x1bc>)
    3f16:	469b      	mov	fp, r3
    3f18:	4493      	add	fp, r2
    3f1a:	2340      	movs	r3, #64	; 0x40
    3f1c:	445b      	add	r3, fp
    3f1e:	469a      	mov	sl, r3
    3f20:	79db      	ldrb	r3, [r3, #7]
    3f22:	2240      	movs	r2, #64	; 0x40
    3f24:	4313      	orrs	r3, r2
    3f26:	4652      	mov	r2, sl
    3f28:	71d3      	strb	r3, [r2, #7]
	atomic_leave_critical(&flags);
    3f2a:	a803      	add	r0, sp, #12
    3f2c:	4b2b      	ldr	r3, [pc, #172]	; (3fdc <_usb_d_dev_ep_trans+0x1d0>)
    3f2e:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    3f30:	465b      	mov	r3, fp
    3f32:	4642      	mov	r2, r8
    3f34:	6812      	ldr	r2, [r2, #0]
    3f36:	635a      	str	r2, [r3, #52]	; 0x34
	ept->trans_size  = trans->size;
    3f38:	4642      	mov	r2, r8
    3f3a:	6852      	ldr	r2, [r2, #4]
    3f3c:	639a      	str	r2, [r3, #56]	; 0x38
	ept->trans_count = 0;
    3f3e:	2300      	movs	r3, #0
    3f40:	465a      	mov	r2, fp
    3f42:	63d3      	str	r3, [r2, #60]	; 0x3c
	ept->flags.bits.dir       = dir;
    3f44:	464b      	mov	r3, r9
    3f46:	01db      	lsls	r3, r3, #7
    3f48:	4652      	mov	r2, sl
    3f4a:	79d2      	ldrb	r2, [r2, #7]
    3f4c:	217f      	movs	r1, #127	; 0x7f
    3f4e:	4011      	ands	r1, r2
	ept->flags.bits.use_cache = use_cache;
    3f50:	9a01      	ldr	r2, [sp, #4]
    3f52:	0152      	lsls	r2, r2, #5
    3f54:	430b      	orrs	r3, r1
    3f56:	2120      	movs	r1, #32
    3f58:	438b      	bics	r3, r1
    3f5a:	431a      	orrs	r2, r3
    3f5c:	4653      	mov	r3, sl
    3f5e:	71da      	strb	r2, [r3, #7]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    3f60:	4643      	mov	r3, r8
    3f62:	7a5b      	ldrb	r3, [r3, #9]
    3f64:	2b00      	cmp	r3, #0
    3f66:	d008      	beq.n	3f7a <_usb_d_dev_ep_trans+0x16e>
    3f68:	2e00      	cmp	r6, #0
    3f6a:	d01b      	beq.n	3fa4 <_usb_d_dev_ep_trans+0x198>
    3f6c:	2200      	movs	r2, #0
    3f6e:	e005      	b.n	3f7c <_usb_d_dev_ep_trans+0x170>
		atomic_leave_critical(&flags);
    3f70:	a803      	add	r0, sp, #12
    3f72:	4b1a      	ldr	r3, [pc, #104]	; (3fdc <_usb_d_dev_ep_trans+0x1d0>)
    3f74:	4798      	blx	r3
		return USB_BUSY;
    3f76:	2001      	movs	r0, #1
    3f78:	e7ae      	b.n	3ed8 <_usb_d_dev_ep_trans+0xcc>
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    3f7a:	2200      	movs	r2, #0
    3f7c:	00ab      	lsls	r3, r5, #2
    3f7e:	195d      	adds	r5, r3, r5
    3f80:	00a9      	lsls	r1, r5, #2
    3f82:	4b11      	ldr	r3, [pc, #68]	; (3fc8 <_usb_d_dev_ep_trans+0x1bc>)
    3f84:	185b      	adds	r3, r3, r1
    3f86:	3340      	adds	r3, #64	; 0x40
    3f88:	0111      	lsls	r1, r2, #4
    3f8a:	79da      	ldrb	r2, [r3, #7]
    3f8c:	2010      	movs	r0, #16
    3f8e:	4382      	bics	r2, r0
    3f90:	430a      	orrs	r2, r1
    3f92:	71da      	strb	r2, [r3, #7]
	if (dir) {
    3f94:	2c00      	cmp	r4, #0
    3f96:	db07      	blt.n	3fa8 <_usb_d_dev_ep_trans+0x19c>
		_usb_d_dev_out_next(ept, false);
    3f98:	2100      	movs	r1, #0
    3f9a:	0038      	movs	r0, r7
    3f9c:	4b10      	ldr	r3, [pc, #64]	; (3fe0 <_usb_d_dev_ep_trans+0x1d4>)
    3f9e:	4798      	blx	r3
	return ERR_NONE;
    3fa0:	2000      	movs	r0, #0
    3fa2:	e799      	b.n	3ed8 <_usb_d_dev_ep_trans+0xcc>
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    3fa4:	2201      	movs	r2, #1
    3fa6:	e7e9      	b.n	3f7c <_usb_d_dev_ep_trans+0x170>
		_usb_d_dev_in_next(ept, false);
    3fa8:	2100      	movs	r1, #0
    3faa:	0038      	movs	r0, r7
    3fac:	4b0d      	ldr	r3, [pc, #52]	; (3fe4 <_usb_d_dev_ep_trans+0x1d8>)
    3fae:	4798      	blx	r3
	return ERR_NONE;
    3fb0:	2000      	movs	r0, #0
    3fb2:	e791      	b.n	3ed8 <_usb_d_dev_ep_trans+0xcc>
		return -USB_ERR_PARAM;
    3fb4:	2012      	movs	r0, #18
    3fb6:	4240      	negs	r0, r0
    3fb8:	e78e      	b.n	3ed8 <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_FUNC;
    3fba:	2013      	movs	r0, #19
    3fbc:	4240      	negs	r0, r0
    3fbe:	e78b      	b.n	3ed8 <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_PARAM;
    3fc0:	2012      	movs	r0, #18
    3fc2:	4240      	negs	r0, r0
    3fc4:	e788      	b.n	3ed8 <_usb_d_dev_ep_trans+0xcc>
    3fc6:	46c0      	nop			; (mov r8, r8)
    3fc8:	200001e0 	.word	0x200001e0
    3fcc:	000003ff 	.word	0x000003ff
    3fd0:	1fffffff 	.word	0x1fffffff
    3fd4:	20007fff 	.word	0x20007fff
    3fd8:	000040cd 	.word	0x000040cd
    3fdc:	000040db 	.word	0x000040db
    3fe0:	000031ad 	.word	0x000031ad
    3fe4:	0000301d 	.word	0x0000301d

00003fe8 <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    3fe8:	b510      	push	{r4, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    3fea:	220f      	movs	r2, #15
    3fec:	4002      	ands	r2, r0
    3fee:	b240      	sxtb	r0, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    3ff0:	0fc1      	lsrs	r1, r0, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3ff2:	2a00      	cmp	r2, #0
    3ff4:	d005      	beq.n	4002 <_usb_d_dev_ep_abort+0x1a>
    3ff6:	2800      	cmp	r0, #0
    3ff8:	db01      	blt.n	3ffe <_usb_d_dev_ep_abort+0x16>
    3ffa:	0010      	movs	r0, r2
    3ffc:	e002      	b.n	4004 <_usb_d_dev_ep_abort+0x1c>
    3ffe:	1d10      	adds	r0, r2, #4
    4000:	e000      	b.n	4004 <_usb_d_dev_ep_abort+0x1c>
    4002:	0010      	movs	r0, r2
	return &dev_inst.ep[ep_index];
    4004:	0083      	lsls	r3, r0, #2
    4006:	181b      	adds	r3, r3, r0
    4008:	009c      	lsls	r4, r3, #2
    400a:	3410      	adds	r4, #16
    400c:	4805      	ldr	r0, [pc, #20]	; (4024 <_usb_d_dev_ep_abort+0x3c>)
    400e:	3020      	adds	r0, #32
    4010:	1900      	adds	r0, r0, r4
    4012:	3004      	adds	r0, #4
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
	if (epn > CONF_USB_D_MAX_EP_N) {
    4014:	2a04      	cmp	r2, #4
    4016:	d900      	bls.n	401a <_usb_d_dev_ep_abort+0x32>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
}
    4018:	bd10      	pop	{r4, pc}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    401a:	2202      	movs	r2, #2
    401c:	4b02      	ldr	r3, [pc, #8]	; (4028 <_usb_d_dev_ep_abort+0x40>)
    401e:	4798      	blx	r3
    4020:	e7fa      	b.n	4018 <_usb_d_dev_ep_abort+0x30>
    4022:	46c0      	nop			; (mov r8, r8)
    4024:	200001e0 	.word	0x200001e0
    4028:	00002e39 	.word	0x00002e39

0000402c <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    402c:	2900      	cmp	r1, #0
    402e:	d006      	beq.n	403e <_usb_d_dev_register_callback+0x12>
	if (type == USB_D_CB_EVENT) {
    4030:	2801      	cmp	r0, #1
    4032:	d006      	beq.n	4042 <_usb_d_dev_register_callback+0x16>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    4034:	2800      	cmp	r0, #0
    4036:	d101      	bne.n	403c <_usb_d_dev_register_callback+0x10>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    4038:	4b03      	ldr	r3, [pc, #12]	; (4048 <_usb_d_dev_register_callback+0x1c>)
    403a:	6219      	str	r1, [r3, #32]
	}
}
    403c:	4770      	bx	lr
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    403e:	4903      	ldr	r1, [pc, #12]	; (404c <_usb_d_dev_register_callback+0x20>)
    4040:	e7f6      	b.n	4030 <_usb_d_dev_register_callback+0x4>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    4042:	4b01      	ldr	r3, [pc, #4]	; (4048 <_usb_d_dev_register_callback+0x1c>)
    4044:	6259      	str	r1, [r3, #36]	; 0x24
    4046:	e7f9      	b.n	403c <_usb_d_dev_register_callback+0x10>
    4048:	200001e0 	.word	0x200001e0
    404c:	00002cf9 	.word	0x00002cf9

00004050 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    4050:	2900      	cmp	r1, #0
    4052:	d008      	beq.n	4066 <_usb_d_dev_register_ep_callback+0x16>
	if (type == USB_D_DEV_EP_CB_SETUP) {
    4054:	2800      	cmp	r0, #0
    4056:	d008      	beq.n	406a <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    4058:	2801      	cmp	r0, #1
    405a:	d009      	beq.n	4070 <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    405c:	2802      	cmp	r0, #2
    405e:	d106      	bne.n	406e <_usb_d_dev_register_ep_callback+0x1e>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    4060:	4b05      	ldr	r3, [pc, #20]	; (4078 <_usb_d_dev_register_ep_callback+0x28>)
    4062:	6319      	str	r1, [r3, #48]	; 0x30
	}
}
    4064:	e003      	b.n	406e <_usb_d_dev_register_ep_callback+0x1e>
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    4066:	4905      	ldr	r1, [pc, #20]	; (407c <_usb_d_dev_register_ep_callback+0x2c>)
    4068:	e7f4      	b.n	4054 <_usb_d_dev_register_ep_callback+0x4>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    406a:	4b03      	ldr	r3, [pc, #12]	; (4078 <_usb_d_dev_register_ep_callback+0x28>)
    406c:	6299      	str	r1, [r3, #40]	; 0x28
}
    406e:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    4070:	4b01      	ldr	r3, [pc, #4]	; (4078 <_usb_d_dev_register_ep_callback+0x28>)
    4072:	62d9      	str	r1, [r3, #44]	; 0x2c
    4074:	e7fb      	b.n	406e <_usb_d_dev_register_ep_callback+0x1e>
    4076:	46c0      	nop			; (mov r8, r8)
    4078:	200001e0 	.word	0x200001e0
    407c:	00002cf9 	.word	0x00002cf9

00004080 <USB_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_Handler(void)
{
    4080:	b510      	push	{r4, lr}

	_usb_d_dev_handler();
    4082:	4b01      	ldr	r3, [pc, #4]	; (4088 <USB_Handler+0x8>)
    4084:	4798      	blx	r3
}
    4086:	bd10      	pop	{r4, pc}
    4088:	000033b1 	.word	0x000033b1

0000408c <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    408c:	b510      	push	{r4, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    408e:	4806      	ldr	r0, [pc, #24]	; (40a8 <cdc_device_acm_init+0x1c>)
    4090:	3040      	adds	r0, #64	; 0x40
    4092:	4b06      	ldr	r3, [pc, #24]	; (40ac <cdc_device_acm_init+0x20>)
    4094:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    4096:	4b06      	ldr	r3, [pc, #24]	; (40b0 <cdc_device_acm_init+0x24>)
    4098:	4798      	blx	r3

	usbdc_start(single_desc);
    409a:	4806      	ldr	r0, [pc, #24]	; (40b4 <cdc_device_acm_init+0x28>)
    409c:	4b06      	ldr	r3, [pc, #24]	; (40b8 <cdc_device_acm_init+0x2c>)
    409e:	4798      	blx	r3
	usbdc_attach();
    40a0:	4b06      	ldr	r3, [pc, #24]	; (40bc <cdc_device_acm_init+0x30>)
    40a2:	4798      	blx	r3
}
    40a4:	bd10      	pop	{r4, pc}
    40a6:	46c0      	nop			; (mov r8, r8)
    40a8:	200004c8 	.word	0x200004c8
    40ac:	00004c05 	.word	0x00004c05
    40b0:	000043ad 	.word	0x000043ad
    40b4:	20000004 	.word	0x20000004
    40b8:	00004c7d 	.word	0x00004c7d
    40bc:	00004cb5 	.word	0x00004cb5

000040c0 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    40c0:	b510      	push	{r4, lr}

	cdc_device_acm_init();
    40c2:	4b01      	ldr	r3, [pc, #4]	; (40c8 <usb_init+0x8>)
    40c4:	4798      	blx	r3
}
    40c6:	bd10      	pop	{r4, pc}
    40c8:	0000408d 	.word	0x0000408d

000040cc <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    40cc:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    40d0:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    40d2:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    40d4:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    40d8:	4770      	bx	lr

000040da <atomic_leave_critical>:
    40da:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    40de:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    40e0:	f383 8810 	msr	PRIMASK, r3
}
    40e4:	4770      	bx	lr
	...

000040e8 <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    40e8:	b510      	push	{r4, lr}
	uint16_t len = req->wLength;
    40ea:	798b      	ldrb	r3, [r1, #6]
    40ec:	79cc      	ldrb	r4, [r1, #7]
    40ee:	0224      	lsls	r4, r4, #8
    40f0:	431c      	orrs	r4, r3

	if (USB_DATA_STAGE == stage) {
    40f2:	2a01      	cmp	r2, #1
    40f4:	d00a      	beq.n	410c <cdcdf_acm_get_req+0x24>
		return ERR_NONE;
	}

	switch (req->bRequest) {
    40f6:	784b      	ldrb	r3, [r1, #1]
    40f8:	2b21      	cmp	r3, #33	; 0x21
    40fa:	d109      	bne.n	4110 <cdcdf_acm_get_req+0x28>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    40fc:	2c07      	cmp	r4, #7
    40fe:	d10a      	bne.n	4116 <cdcdf_acm_get_req+0x2e>
			return ERR_INVALID_DATA;
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    4100:	2300      	movs	r3, #0
    4102:	0022      	movs	r2, r4
    4104:	4905      	ldr	r1, [pc, #20]	; (411c <cdcdf_acm_get_req+0x34>)
    4106:	4c06      	ldr	r4, [pc, #24]	; (4120 <cdcdf_acm_get_req+0x38>)
    4108:	47a0      	blx	r4
	default:
		return ERR_INVALID_ARG;
	}
}
    410a:	bd10      	pop	{r4, pc}
		return ERR_NONE;
    410c:	2000      	movs	r0, #0
    410e:	e7fc      	b.n	410a <cdcdf_acm_get_req+0x22>
		return ERR_INVALID_ARG;
    4110:	200d      	movs	r0, #13
    4112:	4240      	negs	r0, r0
    4114:	e7f9      	b.n	410a <cdcdf_acm_get_req+0x22>
			return ERR_INVALID_DATA;
    4116:	2001      	movs	r0, #1
    4118:	4240      	negs	r0, r0
    411a:	e7f6      	b.n	410a <cdcdf_acm_get_req+0x22>
    411c:	20000548 	.word	0x20000548
    4120:	00004735 	.word	0x00004735

00004124 <cdcdf_acm_set_req>:
{
    4124:	b5f0      	push	{r4, r5, r6, r7, lr}
    4126:	b083      	sub	sp, #12
    4128:	0005      	movs	r5, r0
    412a:	000f      	movs	r7, r1
    412c:	0014      	movs	r4, r2
	uint16_t                   len      = req->wLength;
    412e:	798e      	ldrb	r6, [r1, #6]
    4130:	79cb      	ldrb	r3, [r1, #7]
    4132:	021b      	lsls	r3, r3, #8
    4134:	431e      	orrs	r6, r3
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    4136:	4b23      	ldr	r3, [pc, #140]	; (41c4 <cdcdf_acm_set_req+0xa0>)
    4138:	4798      	blx	r3
	switch (req->bRequest) {
    413a:	787b      	ldrb	r3, [r7, #1]
    413c:	2b20      	cmp	r3, #32
    413e:	d005      	beq.n	414c <cdcdf_acm_set_req+0x28>
    4140:	2b22      	cmp	r3, #34	; 0x22
    4142:	d026      	beq.n	4192 <cdcdf_acm_set_req+0x6e>
		return ERR_INVALID_ARG;
    4144:	200d      	movs	r0, #13
    4146:	4240      	negs	r0, r0
}
    4148:	b003      	add	sp, #12
    414a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (sizeof(struct usb_cdc_line_coding) != len) {
    414c:	2e07      	cmp	r6, #7
    414e:	d131      	bne.n	41b4 <cdcdf_acm_set_req+0x90>
		if (USB_SETUP_STAGE == stage) {
    4150:	2c00      	cmp	r4, #0
    4152:	d017      	beq.n	4184 <cdcdf_acm_set_req+0x60>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    4154:	2207      	movs	r2, #7
    4156:	0001      	movs	r1, r0
    4158:	4668      	mov	r0, sp
    415a:	4b1b      	ldr	r3, [pc, #108]	; (41c8 <cdcdf_acm_set_req+0xa4>)
    415c:	4798      	blx	r3
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    415e:	4b1b      	ldr	r3, [pc, #108]	; (41cc <cdcdf_acm_set_req+0xa8>)
    4160:	689b      	ldr	r3, [r3, #8]
    4162:	2b00      	cmp	r3, #0
    4164:	d003      	beq.n	416e <cdcdf_acm_set_req+0x4a>
    4166:	4668      	mov	r0, sp
    4168:	4798      	blx	r3
    416a:	2800      	cmp	r0, #0
    416c:	d025      	beq.n	41ba <cdcdf_acm_set_req+0x96>
				usbd_cdc_line_coding = line_coding_tmp;
    416e:	4b17      	ldr	r3, [pc, #92]	; (41cc <cdcdf_acm_set_req+0xa8>)
    4170:	9a00      	ldr	r2, [sp, #0]
    4172:	601a      	str	r2, [r3, #0]
    4174:	466a      	mov	r2, sp
    4176:	8892      	ldrh	r2, [r2, #4]
    4178:	809a      	strh	r2, [r3, #4]
    417a:	466a      	mov	r2, sp
    417c:	7992      	ldrb	r2, [r2, #6]
    417e:	719a      	strb	r2, [r3, #6]
			return ERR_NONE;
    4180:	2000      	movs	r0, #0
    4182:	e7e1      	b.n	4148 <cdcdf_acm_set_req+0x24>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    4184:	2300      	movs	r3, #0
    4186:	0032      	movs	r2, r6
    4188:	0001      	movs	r1, r0
    418a:	0028      	movs	r0, r5
    418c:	4c10      	ldr	r4, [pc, #64]	; (41d0 <cdcdf_acm_set_req+0xac>)
    418e:	47a0      	blx	r4
    4190:	e7da      	b.n	4148 <cdcdf_acm_set_req+0x24>
		usbdc_xfer(0, NULL, 0, 0);
    4192:	2300      	movs	r3, #0
    4194:	2200      	movs	r2, #0
    4196:	2100      	movs	r1, #0
    4198:	2000      	movs	r0, #0
    419a:	4c0d      	ldr	r4, [pc, #52]	; (41d0 <cdcdf_acm_set_req+0xac>)
    419c:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    419e:	4b0b      	ldr	r3, [pc, #44]	; (41cc <cdcdf_acm_set_req+0xa8>)
    41a0:	68db      	ldr	r3, [r3, #12]
    41a2:	2b00      	cmp	r3, #0
    41a4:	d00b      	beq.n	41be <cdcdf_acm_set_req+0x9a>
			cdcdf_acm_notify_state(req->wValue);
    41a6:	78ba      	ldrb	r2, [r7, #2]
    41a8:	78f8      	ldrb	r0, [r7, #3]
    41aa:	0200      	lsls	r0, r0, #8
    41ac:	4310      	orrs	r0, r2
    41ae:	4798      	blx	r3
		return ERR_NONE;
    41b0:	2000      	movs	r0, #0
    41b2:	e7c9      	b.n	4148 <cdcdf_acm_set_req+0x24>
			return ERR_INVALID_DATA;
    41b4:	2001      	movs	r0, #1
    41b6:	4240      	negs	r0, r0
    41b8:	e7c6      	b.n	4148 <cdcdf_acm_set_req+0x24>
			return ERR_NONE;
    41ba:	2000      	movs	r0, #0
    41bc:	e7c4      	b.n	4148 <cdcdf_acm_set_req+0x24>
		return ERR_NONE;
    41be:	2000      	movs	r0, #0
    41c0:	e7c2      	b.n	4148 <cdcdf_acm_set_req+0x24>
    41c2:	46c0      	nop			; (mov r8, r8)
    41c4:	00004cc1 	.word	0x00004cc1
    41c8:	000056dd 	.word	0x000056dd
    41cc:	20000548 	.word	0x20000548
    41d0:	00004735 	.word	0x00004735

000041d4 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    41d4:	b570      	push	{r4, r5, r6, lr}
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    41d6:	780c      	ldrb	r4, [r1, #0]
    41d8:	0965      	lsrs	r5, r4, #5
    41da:	2303      	movs	r3, #3
    41dc:	402b      	ands	r3, r5
    41de:	2b01      	cmp	r3, #1
    41e0:	d114      	bne.n	420c <cdcdf_acm_req+0x38>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    41e2:	790d      	ldrb	r5, [r1, #4]
    41e4:	794b      	ldrb	r3, [r1, #5]
    41e6:	021b      	lsls	r3, r3, #8
    41e8:	432b      	orrs	r3, r5
    41ea:	4d0b      	ldr	r5, [pc, #44]	; (4218 <cdcdf_acm_req+0x44>)
    41ec:	7c2d      	ldrb	r5, [r5, #16]
    41ee:	42ab      	cmp	r3, r5
    41f0:	d003      	beq.n	41fa <cdcdf_acm_req+0x26>
    41f2:	4d09      	ldr	r5, [pc, #36]	; (4218 <cdcdf_acm_req+0x44>)
    41f4:	7c6d      	ldrb	r5, [r5, #17]
    41f6:	42ab      	cmp	r3, r5
    41f8:	d10b      	bne.n	4212 <cdcdf_acm_req+0x3e>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    41fa:	b264      	sxtb	r4, r4
    41fc:	2c00      	cmp	r4, #0
    41fe:	db02      	blt.n	4206 <cdcdf_acm_req+0x32>
			return cdcdf_acm_get_req(ep, req, stage);
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    4200:	4b06      	ldr	r3, [pc, #24]	; (421c <cdcdf_acm_req+0x48>)
    4202:	4798      	blx	r3
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    4204:	bd70      	pop	{r4, r5, r6, pc}
			return cdcdf_acm_get_req(ep, req, stage);
    4206:	4b06      	ldr	r3, [pc, #24]	; (4220 <cdcdf_acm_req+0x4c>)
    4208:	4798      	blx	r3
    420a:	e7fb      	b.n	4204 <cdcdf_acm_req+0x30>
		return ERR_NOT_FOUND;
    420c:	200a      	movs	r0, #10
    420e:	4240      	negs	r0, r0
    4210:	e7f8      	b.n	4204 <cdcdf_acm_req+0x30>
		return ERR_NOT_FOUND;
    4212:	200a      	movs	r0, #10
    4214:	4240      	negs	r0, r0
    4216:	e7f5      	b.n	4204 <cdcdf_acm_req+0x30>
    4218:	20000548 	.word	0x20000548
    421c:	00004125 	.word	0x00004125
    4220:	000040e9 	.word	0x000040e9

00004224 <cdcdf_acm_enable>:
{
    4224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4226:	46ce      	mov	lr, r9
    4228:	4647      	mov	r7, r8
    422a:	b580      	push	{r7, lr}
    422c:	000e      	movs	r6, r1
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    422e:	6887      	ldr	r7, [r0, #8]
	ifc = desc->sod;
    4230:	6808      	ldr	r0, [r1, #0]
	for (i = 0; i < 2; i++) {
    4232:	2300      	movs	r3, #0
    4234:	4698      	mov	r8, r3
    4236:	4643      	mov	r3, r8
    4238:	2b01      	cmp	r3, #1
    423a:	d845      	bhi.n	42c8 <cdcdf_acm_enable+0xa4>
		if (NULL == ifc) {
    423c:	2800      	cmp	r0, #0
    423e:	d04b      	beq.n	42d8 <cdcdf_acm_enable+0xb4>
		ifc_desc.bInterfaceNumber = ifc[2];
    4240:	7883      	ldrb	r3, [r0, #2]
		ifc_desc.bInterfaceClass  = ifc[5];
    4242:	7942      	ldrb	r2, [r0, #5]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    4244:	2a02      	cmp	r2, #2
    4246:	d001      	beq.n	424c <cdcdf_acm_enable+0x28>
    4248:	2a0a      	cmp	r2, #10
    424a:	d148      	bne.n	42de <cdcdf_acm_enable+0xba>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    424c:	46c1      	mov	r9, r8
    424e:	4642      	mov	r2, r8
    4250:	5cba      	ldrb	r2, [r7, r2]
    4252:	4293      	cmp	r3, r2
    4254:	d046      	beq.n	42e4 <cdcdf_acm_enable+0xc0>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    4256:	2aff      	cmp	r2, #255	; 0xff
    4258:	d147      	bne.n	42ea <cdcdf_acm_enable+0xc6>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    425a:	4642      	mov	r2, r8
    425c:	54bb      	strb	r3, [r7, r2]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    425e:	2205      	movs	r2, #5
    4260:	6871      	ldr	r1, [r6, #4]
    4262:	4b25      	ldr	r3, [pc, #148]	; (42f8 <cdcdf_acm_enable+0xd4>)
    4264:	4798      	blx	r3
    4266:	0004      	movs	r4, r0
		while (NULL != ep) {
    4268:	e00c      	b.n	4284 <cdcdf_acm_enable+0x60>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    426a:	464b      	mov	r3, r9
    426c:	18fb      	adds	r3, r7, r3
    426e:	709d      	strb	r5, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    4270:	0028      	movs	r0, r5
    4272:	4b22      	ldr	r3, [pc, #136]	; (42fc <cdcdf_acm_enable+0xd8>)
    4274:	4798      	blx	r3
			desc->sod = ep;
    4276:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
	return desc[0];
    4278:	7820      	ldrb	r0, [r4, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    427a:	1820      	adds	r0, r4, r0
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    427c:	6871      	ldr	r1, [r6, #4]
    427e:	4b20      	ldr	r3, [pc, #128]	; (4300 <cdcdf_acm_enable+0xdc>)
    4280:	4798      	blx	r3
    4282:	0004      	movs	r4, r0
		while (NULL != ep) {
    4284:	2c00      	cmp	r4, #0
    4286:	d013      	beq.n	42b0 <cdcdf_acm_enable+0x8c>
			ep_desc.bEndpointAddress = ep[2];
    4288:	78a5      	ldrb	r5, [r4, #2]
			ep_desc.bmAttributes     = ep[3];
    428a:	78e1      	ldrb	r1, [r4, #3]
	return (ptr[0] + (ptr[1] << 8));
    428c:	7922      	ldrb	r2, [r4, #4]
    428e:	7963      	ldrb	r3, [r4, #5]
    4290:	021b      	lsls	r3, r3, #8
    4292:	18d2      	adds	r2, r2, r3
    4294:	b292      	uxth	r2, r2
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    4296:	0028      	movs	r0, r5
    4298:	4b1a      	ldr	r3, [pc, #104]	; (4304 <cdcdf_acm_enable+0xe0>)
    429a:	4798      	blx	r3
    429c:	2800      	cmp	r0, #0
    429e:	d127      	bne.n	42f0 <cdcdf_acm_enable+0xcc>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    42a0:	b26b      	sxtb	r3, r5
    42a2:	2b00      	cmp	r3, #0
    42a4:	dbe1      	blt.n	426a <cdcdf_acm_enable+0x46>
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    42a6:	713d      	strb	r5, [r7, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    42a8:	0028      	movs	r0, r5
    42aa:	4b14      	ldr	r3, [pc, #80]	; (42fc <cdcdf_acm_enable+0xd8>)
    42ac:	4798      	blx	r3
    42ae:	e7e2      	b.n	4276 <cdcdf_acm_enable+0x52>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    42b0:	6830      	ldr	r0, [r6, #0]
	return desc[0];
    42b2:	7803      	ldrb	r3, [r0, #0]
	return (desc + usb_desc_len(desc));
    42b4:	18c0      	adds	r0, r0, r3
    42b6:	2204      	movs	r2, #4
    42b8:	6871      	ldr	r1, [r6, #4]
    42ba:	4b0f      	ldr	r3, [pc, #60]	; (42f8 <cdcdf_acm_enable+0xd4>)
    42bc:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    42be:	4643      	mov	r3, r8
    42c0:	3301      	adds	r3, #1
    42c2:	b2db      	uxtb	r3, r3
    42c4:	4698      	mov	r8, r3
    42c6:	e7b6      	b.n	4236 <cdcdf_acm_enable+0x12>
	_cdcdf_acm_funcd.enabled = true;
    42c8:	2201      	movs	r2, #1
    42ca:	4b0f      	ldr	r3, [pc, #60]	; (4308 <cdcdf_acm_enable+0xe4>)
    42cc:	755a      	strb	r2, [r3, #21]
	return ERR_NONE;
    42ce:	2000      	movs	r0, #0
}
    42d0:	bc0c      	pop	{r2, r3}
    42d2:	4690      	mov	r8, r2
    42d4:	4699      	mov	r9, r3
    42d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return ERR_NOT_FOUND;
    42d8:	200a      	movs	r0, #10
    42da:	4240      	negs	r0, r0
    42dc:	e7f8      	b.n	42d0 <cdcdf_acm_enable+0xac>
			return ERR_NOT_FOUND;
    42de:	200a      	movs	r0, #10
    42e0:	4240      	negs	r0, r0
    42e2:	e7f5      	b.n	42d0 <cdcdf_acm_enable+0xac>
				return ERR_ALREADY_INITIALIZED;
    42e4:	2012      	movs	r0, #18
    42e6:	4240      	negs	r0, r0
    42e8:	e7f2      	b.n	42d0 <cdcdf_acm_enable+0xac>
				return ERR_NO_RESOURCE;
    42ea:	201c      	movs	r0, #28
    42ec:	4240      	negs	r0, r0
    42ee:	e7ef      	b.n	42d0 <cdcdf_acm_enable+0xac>
				return ERR_NOT_INITIALIZED;
    42f0:	2014      	movs	r0, #20
    42f2:	4240      	negs	r0, r0
    42f4:	e7ec      	b.n	42d0 <cdcdf_acm_enable+0xac>
    42f6:	46c0      	nop			; (mov r8, r8)
    42f8:	00004cdd 	.word	0x00004cdd
    42fc:	00001bcd 	.word	0x00001bcd
    4300:	00004cfb 	.word	0x00004cfb
    4304:	00001b39 	.word	0x00001b39
    4308:	20000548 	.word	0x20000548

0000430c <cdcdf_acm_disable>:
{
    430c:	b570      	push	{r4, r5, r6, lr}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    430e:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    4310:	2900      	cmp	r1, #0
    4312:	d01a      	beq.n	434a <cdcdf_acm_disable+0x3e>
		ifc_desc.bInterfaceClass = desc->sod[5];
    4314:	680b      	ldr	r3, [r1, #0]
    4316:	795b      	ldrb	r3, [r3, #5]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    4318:	2b02      	cmp	r3, #2
    431a:	d018      	beq.n	434e <cdcdf_acm_disable+0x42>
    431c:	2b0a      	cmp	r3, #10
    431e:	d124      	bne.n	436a <cdcdf_acm_disable+0x5e>
    4320:	2400      	movs	r4, #0
    4322:	e001      	b.n	4328 <cdcdf_acm_disable+0x1c>
	for (i = 0; i < 2; i++) {
    4324:	3401      	adds	r4, #1
    4326:	b2e4      	uxtb	r4, r4
    4328:	2c01      	cmp	r4, #1
    432a:	d812      	bhi.n	4352 <cdcdf_acm_disable+0x46>
		if (func_data->func_iface[i] == 0xFF) {
    432c:	5d2b      	ldrb	r3, [r5, r4]
    432e:	2bff      	cmp	r3, #255	; 0xff
    4330:	d0f8      	beq.n	4324 <cdcdf_acm_disable+0x18>
			func_data->func_iface[i] = 0xFF;
    4332:	23ff      	movs	r3, #255	; 0xff
    4334:	552b      	strb	r3, [r5, r4]
			if (func_data->func_ep_in[i] != 0xFF) {
    4336:	192b      	adds	r3, r5, r4
    4338:	7898      	ldrb	r0, [r3, #2]
    433a:	28ff      	cmp	r0, #255	; 0xff
    433c:	d0f2      	beq.n	4324 <cdcdf_acm_disable+0x18>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    433e:	4b0c      	ldr	r3, [pc, #48]	; (4370 <cdcdf_acm_disable+0x64>)
    4340:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    4342:	192e      	adds	r6, r5, r4
    4344:	22ff      	movs	r2, #255	; 0xff
    4346:	70b2      	strb	r2, [r6, #2]
    4348:	e7ec      	b.n	4324 <cdcdf_acm_disable+0x18>
    434a:	2400      	movs	r4, #0
    434c:	e7ec      	b.n	4328 <cdcdf_acm_disable+0x1c>
    434e:	2400      	movs	r4, #0
    4350:	e7ea      	b.n	4328 <cdcdf_acm_disable+0x1c>
	if (func_data->func_ep_out != 0xFF) {
    4352:	7928      	ldrb	r0, [r5, #4]
    4354:	28ff      	cmp	r0, #255	; 0xff
    4356:	d003      	beq.n	4360 <cdcdf_acm_disable+0x54>
		usb_d_ep_deinit(func_data->func_ep_out);
    4358:	4b05      	ldr	r3, [pc, #20]	; (4370 <cdcdf_acm_disable+0x64>)
    435a:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    435c:	23ff      	movs	r3, #255	; 0xff
    435e:	712b      	strb	r3, [r5, #4]
	_cdcdf_acm_funcd.enabled = false;
    4360:	2200      	movs	r2, #0
    4362:	4b04      	ldr	r3, [pc, #16]	; (4374 <cdcdf_acm_disable+0x68>)
    4364:	755a      	strb	r2, [r3, #21]
	return ERR_NONE;
    4366:	2000      	movs	r0, #0
}
    4368:	bd70      	pop	{r4, r5, r6, pc}
			return ERR_NOT_FOUND;
    436a:	200a      	movs	r0, #10
    436c:	4240      	negs	r0, r0
    436e:	e7fb      	b.n	4368 <cdcdf_acm_disable+0x5c>
    4370:	00001ba1 	.word	0x00001ba1
    4374:	20000548 	.word	0x20000548

00004378 <cdcdf_acm_ctrl>:
{
    4378:	b510      	push	{r4, lr}
	switch (ctrl) {
    437a:	2901      	cmp	r1, #1
    437c:	d00a      	beq.n	4394 <cdcdf_acm_ctrl+0x1c>
    437e:	2900      	cmp	r1, #0
    4380:	d004      	beq.n	438c <cdcdf_acm_ctrl+0x14>
    4382:	2902      	cmp	r1, #2
    4384:	d10a      	bne.n	439c <cdcdf_acm_ctrl+0x24>
		return ERR_UNSUPPORTED_OP;
    4386:	201b      	movs	r0, #27
    4388:	4240      	negs	r0, r0
}
    438a:	bd10      	pop	{r4, pc}
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    438c:	0011      	movs	r1, r2
    438e:	4b05      	ldr	r3, [pc, #20]	; (43a4 <cdcdf_acm_ctrl+0x2c>)
    4390:	4798      	blx	r3
    4392:	e7fa      	b.n	438a <cdcdf_acm_ctrl+0x12>
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    4394:	0011      	movs	r1, r2
    4396:	4b04      	ldr	r3, [pc, #16]	; (43a8 <cdcdf_acm_ctrl+0x30>)
    4398:	4798      	blx	r3
    439a:	e7f6      	b.n	438a <cdcdf_acm_ctrl+0x12>
		return ERR_INVALID_ARG;
    439c:	200d      	movs	r0, #13
    439e:	4240      	negs	r0, r0
    43a0:	e7f3      	b.n	438a <cdcdf_acm_ctrl+0x12>
    43a2:	46c0      	nop			; (mov r8, r8)
    43a4:	00004225 	.word	0x00004225
    43a8:	0000430d 	.word	0x0000430d

000043ac <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    43ac:	b510      	push	{r4, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    43ae:	4b0b      	ldr	r3, [pc, #44]	; (43dc <cdcdf_acm_init+0x30>)
    43b0:	4798      	blx	r3
    43b2:	2801      	cmp	r0, #1
    43b4:	d80e      	bhi.n	43d4 <cdcdf_acm_init+0x28>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    43b6:	480a      	ldr	r0, [pc, #40]	; (43e0 <cdcdf_acm_init+0x34>)
    43b8:	4b0a      	ldr	r3, [pc, #40]	; (43e4 <cdcdf_acm_init+0x38>)
    43ba:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    43bc:	0003      	movs	r3, r0
    43be:	3310      	adds	r3, #16
    43c0:	6203      	str	r3, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    43c2:	3018      	adds	r0, #24
    43c4:	4b08      	ldr	r3, [pc, #32]	; (43e8 <cdcdf_acm_init+0x3c>)
    43c6:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    43c8:	4908      	ldr	r1, [pc, #32]	; (43ec <cdcdf_acm_init+0x40>)
    43ca:	2001      	movs	r0, #1
    43cc:	4b08      	ldr	r3, [pc, #32]	; (43f0 <cdcdf_acm_init+0x44>)
    43ce:	4798      	blx	r3
	return ERR_NONE;
    43d0:	2000      	movs	r0, #0
}
    43d2:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    43d4:	2011      	movs	r0, #17
    43d6:	4240      	negs	r0, r0
    43d8:	e7fb      	b.n	43d2 <cdcdf_acm_init+0x26>
    43da:	46c0      	nop			; (mov r8, r8)
    43dc:	00004ccd 	.word	0x00004ccd
    43e0:	20000548 	.word	0x20000548
    43e4:	00004379 	.word	0x00004379
    43e8:	00004c65 	.word	0x00004c65
    43ec:	20000064 	.word	0x20000064
    43f0:	00004bcd 	.word	0x00004bcd

000043f4 <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
    43f4:	b570      	push	{r4, r5, r6, lr}
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    43f6:	4d03      	ldr	r5, [pc, #12]	; (4404 <cdcdf_acm_stop_xfer+0x10>)
    43f8:	7ce8      	ldrb	r0, [r5, #19]
    43fa:	4c03      	ldr	r4, [pc, #12]	; (4408 <cdcdf_acm_stop_xfer+0x14>)
    43fc:	47a0      	blx	r4
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    43fe:	7d28      	ldrb	r0, [r5, #20]
    4400:	47a0      	blx	r4
}
    4402:	bd70      	pop	{r4, r5, r6, pc}
    4404:	20000548 	.word	0x20000548
    4408:	00001d41 	.word	0x00001d41

0000440c <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
    440c:	b510      	push	{r4, lr}
	switch (cb_type) {
    440e:	2801      	cmp	r0, #1
    4410:	d010      	beq.n	4434 <cdcdf_acm_register_callback+0x28>
    4412:	2800      	cmp	r0, #0
    4414:	d006      	beq.n	4424 <cdcdf_acm_register_callback+0x18>
    4416:	2802      	cmp	r0, #2
    4418:	d014      	beq.n	4444 <cdcdf_acm_register_callback+0x38>
    441a:	2803      	cmp	r0, #3
    441c:	d016      	beq.n	444c <cdcdf_acm_register_callback+0x40>
		break;
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
		break;
	default:
		return ERR_INVALID_ARG;
    441e:	200d      	movs	r0, #13
    4420:	4240      	negs	r0, r0
    4422:	e006      	b.n	4432 <cdcdf_acm_register_callback+0x26>
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    4424:	4b0b      	ldr	r3, [pc, #44]	; (4454 <cdcdf_acm_register_callback+0x48>)
    4426:	7d18      	ldrb	r0, [r3, #20]
    4428:	000a      	movs	r2, r1
    442a:	2102      	movs	r1, #2
    442c:	4b0a      	ldr	r3, [pc, #40]	; (4458 <cdcdf_acm_register_callback+0x4c>)
    442e:	4798      	blx	r3
	}
	return ERR_NONE;
    4430:	2000      	movs	r0, #0
}
    4432:	bd10      	pop	{r4, pc}
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    4434:	4b07      	ldr	r3, [pc, #28]	; (4454 <cdcdf_acm_register_callback+0x48>)
    4436:	7cd8      	ldrb	r0, [r3, #19]
    4438:	000a      	movs	r2, r1
    443a:	2102      	movs	r1, #2
    443c:	4b06      	ldr	r3, [pc, #24]	; (4458 <cdcdf_acm_register_callback+0x4c>)
    443e:	4798      	blx	r3
	return ERR_NONE;
    4440:	2000      	movs	r0, #0
		break;
    4442:	e7f6      	b.n	4432 <cdcdf_acm_register_callback+0x26>
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    4444:	4b03      	ldr	r3, [pc, #12]	; (4454 <cdcdf_acm_register_callback+0x48>)
    4446:	6099      	str	r1, [r3, #8]
	return ERR_NONE;
    4448:	2000      	movs	r0, #0
		break;
    444a:	e7f2      	b.n	4432 <cdcdf_acm_register_callback+0x26>
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    444c:	4b01      	ldr	r3, [pc, #4]	; (4454 <cdcdf_acm_register_callback+0x48>)
    444e:	60d9      	str	r1, [r3, #12]
	return ERR_NONE;
    4450:	2000      	movs	r0, #0
		break;
    4452:	e7ee      	b.n	4432 <cdcdf_acm_register_callback+0x26>
    4454:	20000548 	.word	0x20000548
    4458:	00001dd9 	.word	0x00001dd9

0000445c <cdcdf_acm_is_enabled>:
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    445c:	4b01      	ldr	r3, [pc, #4]	; (4464 <cdcdf_acm_is_enabled+0x8>)
    445e:	7d58      	ldrb	r0, [r3, #21]
}
    4460:	4770      	bx	lr
    4462:	46c0      	nop			; (mov r8, r8)
    4464:	20000548 	.word	0x20000548

00004468 <cdcdf_acm_read>:
{
    4468:	b570      	push	{r4, r5, r6, lr}
    446a:	0004      	movs	r4, r0
    446c:	000d      	movs	r5, r1
	if (!cdcdf_acm_is_enabled()) {
    446e:	4b07      	ldr	r3, [pc, #28]	; (448c <cdcdf_acm_read+0x24>)
    4470:	4798      	blx	r3
    4472:	2800      	cmp	r0, #0
    4474:	d007      	beq.n	4486 <cdcdf_acm_read+0x1e>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    4476:	4b06      	ldr	r3, [pc, #24]	; (4490 <cdcdf_acm_read+0x28>)
    4478:	7d18      	ldrb	r0, [r3, #20]
    447a:	2300      	movs	r3, #0
    447c:	002a      	movs	r2, r5
    447e:	0021      	movs	r1, r4
    4480:	4c04      	ldr	r4, [pc, #16]	; (4494 <cdcdf_acm_read+0x2c>)
    4482:	47a0      	blx	r4
}
    4484:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_DENIED;
    4486:	2011      	movs	r0, #17
    4488:	4240      	negs	r0, r0
    448a:	e7fb      	b.n	4484 <cdcdf_acm_read+0x1c>
    448c:	0000445d 	.word	0x0000445d
    4490:	20000548 	.word	0x20000548
    4494:	00004735 	.word	0x00004735

00004498 <cdcdf_acm_write>:
{
    4498:	b570      	push	{r4, r5, r6, lr}
    449a:	0004      	movs	r4, r0
    449c:	000d      	movs	r5, r1
	if (!cdcdf_acm_is_enabled()) {
    449e:	4b07      	ldr	r3, [pc, #28]	; (44bc <cdcdf_acm_write+0x24>)
    44a0:	4798      	blx	r3
    44a2:	2800      	cmp	r0, #0
    44a4:	d007      	beq.n	44b6 <cdcdf_acm_write+0x1e>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    44a6:	4b06      	ldr	r3, [pc, #24]	; (44c0 <cdcdf_acm_write+0x28>)
    44a8:	7cd8      	ldrb	r0, [r3, #19]
    44aa:	2301      	movs	r3, #1
    44ac:	002a      	movs	r2, r5
    44ae:	0021      	movs	r1, r4
    44b0:	4c04      	ldr	r4, [pc, #16]	; (44c4 <cdcdf_acm_write+0x2c>)
    44b2:	47a0      	blx	r4
}
    44b4:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_DENIED;
    44b6:	2011      	movs	r0, #17
    44b8:	4240      	negs	r0, r0
    44ba:	e7fb      	b.n	44b4 <cdcdf_acm_write+0x1c>
    44bc:	0000445d 	.word	0x0000445d
    44c0:	20000548 	.word	0x20000548
    44c4:	00004735 	.word	0x00004735

000044c8 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    44c8:	b510      	push	{r4, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    44ca:	4b06      	ldr	r3, [pc, #24]	; (44e4 <usbdc_unconfig+0x1c>)
    44cc:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    44ce:	e005      	b.n	44dc <usbdc_unconfig+0x14>
		func->ctrl(func, USBDF_DISABLE, NULL);
    44d0:	2200      	movs	r2, #0
    44d2:	2101      	movs	r1, #1
    44d4:	0020      	movs	r0, r4
    44d6:	6863      	ldr	r3, [r4, #4]
    44d8:	4798      	blx	r3
		func = func->next;
    44da:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    44dc:	2c00      	cmp	r4, #0
    44de:	d1f7      	bne.n	44d0 <usbdc_unconfig+0x8>
	}
}
    44e0:	bd10      	pop	{r4, pc}
    44e2:	46c0      	nop			; (mov r8, r8)
    44e4:	2000056c 	.word	0x2000056c

000044e8 <usbdc_sof_notify>:
	}
}

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    44e8:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    44ea:	4b06      	ldr	r3, [pc, #24]	; (4504 <usbdc_sof_notify+0x1c>)
    44ec:	685c      	ldr	r4, [r3, #4]

	while (sof != NULL) {
    44ee:	e000      	b.n	44f2 <usbdc_sof_notify+0xa>
		if (NULL != sof->cb) {
			sof->cb();
		}
		sof = sof->next;
    44f0:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    44f2:	2c00      	cmp	r4, #0
    44f4:	d004      	beq.n	4500 <usbdc_sof_notify+0x18>
		if (NULL != sof->cb) {
    44f6:	6863      	ldr	r3, [r4, #4]
    44f8:	2b00      	cmp	r3, #0
    44fa:	d0f9      	beq.n	44f0 <usbdc_sof_notify+0x8>
			sof->cb();
    44fc:	4798      	blx	r3
    44fe:	e7f7      	b.n	44f0 <usbdc_sof_notify+0x8>
	}
}
    4500:	bd10      	pop	{r4, pc}
    4502:	46c0      	nop			; (mov r8, r8)
    4504:	2000056c 	.word	0x2000056c

00004508 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    4508:	b570      	push	{r4, r5, r6, lr}
    450a:	0006      	movs	r6, r0
    450c:	000d      	movs	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    450e:	4b07      	ldr	r3, [pc, #28]	; (452c <usbdc_change_notify+0x24>)
    4510:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    4512:	e000      	b.n	4516 <usbdc_change_notify+0xe>
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
    4514:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    4516:	2c00      	cmp	r4, #0
    4518:	d006      	beq.n	4528 <usbdc_change_notify+0x20>
		if (NULL != cg->cb) {
    451a:	6863      	ldr	r3, [r4, #4]
    451c:	2b00      	cmp	r3, #0
    451e:	d0f9      	beq.n	4514 <usbdc_change_notify+0xc>
			cg->cb(change, value);
    4520:	0029      	movs	r1, r5
    4522:	0030      	movs	r0, r6
    4524:	4798      	blx	r3
    4526:	e7f5      	b.n	4514 <usbdc_change_notify+0xc>
	}
}
    4528:	bd70      	pop	{r4, r5, r6, pc}
    452a:	46c0      	nop			; (mov r8, r8)
    452c:	2000056c 	.word	0x2000056c

00004530 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    4530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4532:	0007      	movs	r7, r0
    4534:	000e      	movs	r6, r1
    4536:	0015      	movs	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    4538:	4b0b      	ldr	r3, [pc, #44]	; (4568 <usbdc_request_handler+0x38>)
    453a:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    453c:	e000      	b.n	4540 <usbdc_request_handler+0x10>
				return true;
			} else if (ERR_NOT_FOUND != rc) {
				return -1;
			}
		}
		h = h->next;
    453e:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    4540:	2c00      	cmp	r4, #0
    4542:	d00d      	beq.n	4560 <usbdc_request_handler+0x30>
		if (NULL != h->cb) {
    4544:	6863      	ldr	r3, [r4, #4]
    4546:	2b00      	cmp	r3, #0
    4548:	d0f9      	beq.n	453e <usbdc_request_handler+0xe>
			rc = h->cb(ep, req, stage);
    454a:	002a      	movs	r2, r5
    454c:	0031      	movs	r1, r6
    454e:	0038      	movs	r0, r7
    4550:	4798      	blx	r3
			if (0 == rc) {
    4552:	2800      	cmp	r0, #0
    4554:	d006      	beq.n	4564 <usbdc_request_handler+0x34>
			} else if (ERR_NOT_FOUND != rc) {
    4556:	300a      	adds	r0, #10
    4558:	d0f1      	beq.n	453e <usbdc_request_handler+0xe>
				return -1;
    455a:	2001      	movs	r0, #1
    455c:	4240      	negs	r0, r0
    455e:	e000      	b.n	4562 <usbdc_request_handler+0x32>
	}
	return false;
    4560:	2000      	movs	r0, #0
}
    4562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    4564:	2001      	movs	r0, #1
    4566:	e7fc      	b.n	4562 <usbdc_request_handler+0x32>
    4568:	2000056c 	.word	0x2000056c

0000456c <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    456c:	b510      	push	{r4, lr}
	usbdc_sof_notify();
    456e:	4b01      	ldr	r3, [pc, #4]	; (4574 <usbd_sof_cb+0x8>)
    4570:	4798      	blx	r3
}
    4572:	bd10      	pop	{r4, pc}
    4574:	000044e9 	.word	0x000044e9

00004578 <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    4578:	b510      	push	{r4, lr}
    457a:	0001      	movs	r1, r0
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    457c:	2201      	movs	r2, #1
    457e:	2000      	movs	r0, #0
    4580:	4b01      	ldr	r3, [pc, #4]	; (4588 <usbdc_ctrl_data_end+0x10>)
    4582:	4798      	blx	r3
	return false;
}
    4584:	2000      	movs	r0, #0
    4586:	bd10      	pop	{r4, pc}
    4588:	00004531 	.word	0x00004531

0000458c <usbdc_set_address>:
{
    458c:	b510      	push	{r4, lr}
	usb_d_set_address(addr);
    458e:	4b01      	ldr	r3, [pc, #4]	; (4594 <usbdc_set_address+0x8>)
    4590:	4798      	blx	r3
}
    4592:	bd10      	pop	{r4, pc}
    4594:	00001b2d 	.word	0x00001b2d

00004598 <usbdc_ctrl_status_end>:
{
    4598:	b510      	push	{r4, lr}
    459a:	0004      	movs	r4, r0
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    459c:	7803      	ldrb	r3, [r0, #0]
    459e:	2b00      	cmp	r3, #0
    45a0:	d112      	bne.n	45c8 <usbdc_ctrl_status_end+0x30>
	switch (req->bRequest) {
    45a2:	7843      	ldrb	r3, [r0, #1]
    45a4:	2b05      	cmp	r3, #5
    45a6:	d012      	beq.n	45ce <usbdc_ctrl_status_end+0x36>
    45a8:	2b09      	cmp	r3, #9
    45aa:	d10d      	bne.n	45c8 <usbdc_ctrl_status_end+0x30>
		usbdc.cfg_value = req->wValue;
    45ac:	7882      	ldrb	r2, [r0, #2]
    45ae:	4b10      	ldr	r3, [pc, #64]	; (45f0 <usbdc_ctrl_status_end+0x58>)
    45b0:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    45b2:	7882      	ldrb	r2, [r0, #2]
    45b4:	78c3      	ldrb	r3, [r0, #3]
    45b6:	021b      	lsls	r3, r3, #8
    45b8:	4313      	orrs	r3, r2
    45ba:	d106      	bne.n	45ca <usbdc_ctrl_status_end+0x32>
    45bc:	2103      	movs	r1, #3
    45be:	4b0c      	ldr	r3, [pc, #48]	; (45f0 <usbdc_ctrl_status_end+0x58>)
    45c0:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    45c2:	2001      	movs	r0, #1
    45c4:	4b0b      	ldr	r3, [pc, #44]	; (45f4 <usbdc_ctrl_status_end+0x5c>)
    45c6:	4798      	blx	r3
}
    45c8:	bd10      	pop	{r4, pc}
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    45ca:	2104      	movs	r1, #4
    45cc:	e7f7      	b.n	45be <usbdc_ctrl_status_end+0x26>
		usbdc_set_address(req->wValue);
    45ce:	7880      	ldrb	r0, [r0, #2]
    45d0:	4b09      	ldr	r3, [pc, #36]	; (45f8 <usbdc_ctrl_status_end+0x60>)
    45d2:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    45d4:	78a2      	ldrb	r2, [r4, #2]
    45d6:	78e3      	ldrb	r3, [r4, #3]
    45d8:	021b      	lsls	r3, r3, #8
    45da:	4313      	orrs	r3, r2
    45dc:	d006      	beq.n	45ec <usbdc_ctrl_status_end+0x54>
    45de:	2103      	movs	r1, #3
    45e0:	4b03      	ldr	r3, [pc, #12]	; (45f0 <usbdc_ctrl_status_end+0x58>)
    45e2:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    45e4:	2001      	movs	r0, #1
    45e6:	4b03      	ldr	r3, [pc, #12]	; (45f4 <usbdc_ctrl_status_end+0x5c>)
    45e8:	4798      	blx	r3
		break;
    45ea:	e7ed      	b.n	45c8 <usbdc_ctrl_status_end+0x30>
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    45ec:	2102      	movs	r1, #2
    45ee:	e7f7      	b.n	45e0 <usbdc_ctrl_status_end+0x48>
    45f0:	2000056c 	.word	0x2000056c
    45f4:	00004509 	.word	0x00004509
    45f8:	0000458d 	.word	0x0000458d

000045fc <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    45fc:	b510      	push	{r4, lr}
	(void)ep;

	switch (code) {
    45fe:	2900      	cmp	r1, #0
    4600:	d003      	beq.n	460a <usbdc_cb_ctl_done+0xe>
    4602:	2901      	cmp	r1, #1
    4604:	d006      	beq.n	4614 <usbdc_cb_ctl_done+0x18>
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
    4606:	2000      	movs	r0, #0
    4608:	e003      	b.n	4612 <usbdc_cb_ctl_done+0x16>
		usbdc_ctrl_status_end(req);
    460a:	0010      	movs	r0, r2
    460c:	4b03      	ldr	r3, [pc, #12]	; (461c <usbdc_cb_ctl_done+0x20>)
    460e:	4798      	blx	r3
	return false;
    4610:	2000      	movs	r0, #0
}
    4612:	bd10      	pop	{r4, pc}
		return usbdc_ctrl_data_end(req);
    4614:	0010      	movs	r0, r2
    4616:	4b02      	ldr	r3, [pc, #8]	; (4620 <usbdc_cb_ctl_done+0x24>)
    4618:	4798      	blx	r3
    461a:	e7fa      	b.n	4612 <usbdc_cb_ctl_done+0x16>
    461c:	00004599 	.word	0x00004599
    4620:	00004579 	.word	0x00004579

00004624 <usbdc_set_config>:
{
    4624:	b530      	push	{r4, r5, lr}
    4626:	b083      	sub	sp, #12
    4628:	1e02      	subs	r2, r0, #0
	if (cfg_value == 0) {
    462a:	d014      	beq.n	4656 <usbdc_set_config+0x32>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    462c:	4b1e      	ldr	r3, [pc, #120]	; (46a8 <usbdc_set_config+0x84>)
    462e:	681b      	ldr	r3, [r3, #0]
    4630:	6818      	ldr	r0, [r3, #0]
    4632:	6859      	ldr	r1, [r3, #4]
    4634:	4b1d      	ldr	r3, [pc, #116]	; (46ac <usbdc_set_config+0x88>)
    4636:	4798      	blx	r3
	if (NULL == cfg_desc) {
    4638:	2800      	cmp	r0, #0
    463a:	d032      	beq.n	46a2 <usbdc_set_config+0x7e>
	return (ptr[0] + (ptr[1] << 8));
    463c:	7881      	ldrb	r1, [r0, #2]
    463e:	78c3      	ldrb	r3, [r0, #3]
    4640:	021b      	lsls	r3, r3, #8
    4642:	18c9      	adds	r1, r1, r3
    4644:	b289      	uxth	r1, r1
	desc.eod  = cfg_desc + total_len;
    4646:	1841      	adds	r1, r0, r1
    4648:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    464a:	2204      	movs	r2, #4
    464c:	4b18      	ldr	r3, [pc, #96]	; (46b0 <usbdc_set_config+0x8c>)
    464e:	4798      	blx	r3
    4650:	9000      	str	r0, [sp, #0]
	uint8_t                 last_iface = 0xFF;
    4652:	24ff      	movs	r4, #255	; 0xff
	while (NULL != desc.sod) {
    4654:	e00d      	b.n	4672 <usbdc_set_config+0x4e>
		usbdc_unconfig();
    4656:	4b17      	ldr	r3, [pc, #92]	; (46b4 <usbdc_set_config+0x90>)
    4658:	4798      	blx	r3
		return true;
    465a:	2001      	movs	r0, #1
    465c:	e01f      	b.n	469e <usbdc_set_config+0x7a>
			last_iface = desc.sod[2];
    465e:	002c      	movs	r4, r5
		desc.sod = usb_desc_next(desc.sod);
    4660:	9800      	ldr	r0, [sp, #0]
	return desc[0];
    4662:	7803      	ldrb	r3, [r0, #0]
	return (desc + usb_desc_len(desc));
    4664:	18c0      	adds	r0, r0, r3
    4666:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    4668:	2204      	movs	r2, #4
    466a:	9901      	ldr	r1, [sp, #4]
    466c:	4b10      	ldr	r3, [pc, #64]	; (46b0 <usbdc_set_config+0x8c>)
    466e:	4798      	blx	r3
    4670:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    4672:	9b00      	ldr	r3, [sp, #0]
    4674:	2b00      	cmp	r3, #0
    4676:	d011      	beq.n	469c <usbdc_set_config+0x78>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    4678:	789d      	ldrb	r5, [r3, #2]
    467a:	42ac      	cmp	r4, r5
    467c:	d0f0      	beq.n	4660 <usbdc_set_config+0x3c>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    467e:	4b0a      	ldr	r3, [pc, #40]	; (46a8 <usbdc_set_config+0x84>)
    4680:	691c      	ldr	r4, [r3, #16]
			while (NULL != func) {
    4682:	2c00      	cmp	r4, #0
    4684:	d0eb      	beq.n	465e <usbdc_set_config+0x3a>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    4686:	466a      	mov	r2, sp
    4688:	2100      	movs	r1, #0
    468a:	0020      	movs	r0, r4
    468c:	6863      	ldr	r3, [r4, #4]
    468e:	4798      	blx	r3
    4690:	2800      	cmp	r0, #0
    4692:	d001      	beq.n	4698 <usbdc_set_config+0x74>
					func = func->next;
    4694:	6824      	ldr	r4, [r4, #0]
    4696:	e7f4      	b.n	4682 <usbdc_set_config+0x5e>
			last_iface = desc.sod[2];
    4698:	002c      	movs	r4, r5
    469a:	e7e1      	b.n	4660 <usbdc_set_config+0x3c>
	return true;
    469c:	2001      	movs	r0, #1
}
    469e:	b003      	add	sp, #12
    46a0:	bd30      	pop	{r4, r5, pc}
		return false;
    46a2:	2000      	movs	r0, #0
    46a4:	e7fb      	b.n	469e <usbdc_set_config+0x7a>
    46a6:	46c0      	nop			; (mov r8, r8)
    46a8:	2000056c 	.word	0x2000056c
    46ac:	00004d21 	.word	0x00004d21
    46b0:	00004cdd 	.word	0x00004cdd
    46b4:	000044c9 	.word	0x000044c9

000046b8 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    46b8:	b510      	push	{r4, lr}
	usbdc_unconfig();
    46ba:	4b0d      	ldr	r3, [pc, #52]	; (46f0 <usbdc_reset+0x38>)
    46bc:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    46be:	4c0d      	ldr	r4, [pc, #52]	; (46f4 <usbdc_reset+0x3c>)
    46c0:	2302      	movs	r3, #2
    46c2:	76a3      	strb	r3, [r4, #26]
	usbdc.cfg_value   = 0;
    46c4:	2300      	movs	r3, #0
    46c6:	76e3      	strb	r3, [r4, #27]
	usbdc.ifc_alt_map = 0;
    46c8:	7763      	strb	r3, [r4, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    46ca:	2000      	movs	r0, #0
    46cc:	4b0a      	ldr	r3, [pc, #40]	; (46f8 <usbdc_reset+0x40>)
    46ce:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    46d0:	7f20      	ldrb	r0, [r4, #28]
    46d2:	4b0a      	ldr	r3, [pc, #40]	; (46fc <usbdc_reset+0x44>)
    46d4:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    46d6:	4a0a      	ldr	r2, [pc, #40]	; (4700 <usbdc_reset+0x48>)
    46d8:	2100      	movs	r1, #0
    46da:	2000      	movs	r0, #0
    46dc:	4c09      	ldr	r4, [pc, #36]	; (4704 <usbdc_reset+0x4c>)
    46de:	47a0      	blx	r4
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    46e0:	4a09      	ldr	r2, [pc, #36]	; (4708 <usbdc_reset+0x50>)
    46e2:	2102      	movs	r1, #2
    46e4:	2000      	movs	r0, #0
    46e6:	47a0      	blx	r4
	usb_d_ep_enable(0);
    46e8:	2000      	movs	r0, #0
    46ea:	4b08      	ldr	r3, [pc, #32]	; (470c <usbdc_reset+0x54>)
    46ec:	4798      	blx	r3
}
    46ee:	bd10      	pop	{r4, pc}
    46f0:	000044c9 	.word	0x000044c9
    46f4:	2000056c 	.word	0x2000056c
    46f8:	00001ba1 	.word	0x00001ba1
    46fc:	00001b8d 	.word	0x00001b8d
    4700:	00004b81 	.word	0x00004b81
    4704:	00001dd9 	.word	0x00001dd9
    4708:	000045fd 	.word	0x000045fd
    470c:	00001bcd 	.word	0x00001bcd

00004710 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    4710:	b510      	push	{r4, lr}
	(void)param;

	switch (ev) {
    4712:	2800      	cmp	r0, #0
    4714:	d002      	beq.n	471c <usbd_event_cb+0xc>
    4716:	2801      	cmp	r0, #1
    4718:	d004      	beq.n	4724 <usbd_event_cb+0x14>
		break;

	default:
		break;
	}
}
    471a:	bd10      	pop	{r4, pc}
		usbdc_change_notify(USBDC_C_CONN, param);
    471c:	2000      	movs	r0, #0
    471e:	4b03      	ldr	r3, [pc, #12]	; (472c <usbd_event_cb+0x1c>)
    4720:	4798      	blx	r3
		break;
    4722:	e7fa      	b.n	471a <usbd_event_cb+0xa>
		usbdc_reset();
    4724:	4b02      	ldr	r3, [pc, #8]	; (4730 <usbd_event_cb+0x20>)
    4726:	4798      	blx	r3
}
    4728:	e7f7      	b.n	471a <usbd_event_cb+0xa>
    472a:	46c0      	nop			; (mov r8, r8)
    472c:	00004509 	.word	0x00004509
    4730:	000046b9 	.word	0x000046b9

00004734 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    4734:	b510      	push	{r4, lr}
    4736:	b084      	sub	sp, #16
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    4738:	ac01      	add	r4, sp, #4
    473a:	9101      	str	r1, [sp, #4]
    473c:	9202      	str	r2, [sp, #8]
    473e:	7220      	strb	r0, [r4, #8]
    4740:	7263      	strb	r3, [r4, #9]
	return usb_d_ep_transfer(&xfer);
    4742:	0020      	movs	r0, r4
    4744:	4b01      	ldr	r3, [pc, #4]	; (474c <usbdc_xfer+0x18>)
    4746:	4798      	blx	r3
}
    4748:	b004      	add	sp, #16
    474a:	bd10      	pop	{r4, pc}
    474c:	00001c1d 	.word	0x00001c1d

00004750 <usbdc_clear_ftr_req>:
{
    4750:	b510      	push	{r4, lr}
    4752:	0004      	movs	r4, r0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    4754:	780a      	ldrb	r2, [r1, #0]
    4756:	231f      	movs	r3, #31
    4758:	4013      	ands	r3, r2
    475a:	2b02      	cmp	r3, #2
    475c:	d112      	bne.n	4784 <usbdc_clear_ftr_req+0x34>
		if (req->wLength != 0) {
    475e:	798a      	ldrb	r2, [r1, #6]
    4760:	79cb      	ldrb	r3, [r1, #7]
    4762:	021b      	lsls	r3, r3, #8
    4764:	4313      	orrs	r3, r2
    4766:	d001      	beq.n	476c <usbdc_clear_ftr_req+0x1c>
			return false;
    4768:	2000      	movs	r0, #0
    476a:	e00c      	b.n	4786 <usbdc_clear_ftr_req+0x36>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    476c:	7908      	ldrb	r0, [r1, #4]
    476e:	2100      	movs	r1, #0
    4770:	4b05      	ldr	r3, [pc, #20]	; (4788 <usbdc_clear_ftr_req+0x38>)
    4772:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    4774:	2301      	movs	r3, #1
    4776:	2200      	movs	r2, #0
    4778:	2100      	movs	r1, #0
    477a:	0020      	movs	r0, r4
    477c:	4c03      	ldr	r4, [pc, #12]	; (478c <usbdc_clear_ftr_req+0x3c>)
    477e:	47a0      	blx	r4
		return true;
    4780:	2001      	movs	r0, #1
    4782:	e000      	b.n	4786 <usbdc_clear_ftr_req+0x36>
		return false;
    4784:	2000      	movs	r0, #0
}
    4786:	bd10      	pop	{r4, pc}
    4788:	00001d71 	.word	0x00001d71
    478c:	00004735 	.word	0x00004735

00004790 <usbdc_set_ftr_req>:
{
    4790:	b510      	push	{r4, lr}
    4792:	0004      	movs	r4, r0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    4794:	780a      	ldrb	r2, [r1, #0]
    4796:	231f      	movs	r3, #31
    4798:	4013      	ands	r3, r2
    479a:	2b02      	cmp	r3, #2
    479c:	d112      	bne.n	47c4 <usbdc_set_ftr_req+0x34>
		if (req->wLength != 0) {
    479e:	798a      	ldrb	r2, [r1, #6]
    47a0:	79cb      	ldrb	r3, [r1, #7]
    47a2:	021b      	lsls	r3, r3, #8
    47a4:	4313      	orrs	r3, r2
    47a6:	d001      	beq.n	47ac <usbdc_set_ftr_req+0x1c>
			return false;
    47a8:	2000      	movs	r0, #0
    47aa:	e00c      	b.n	47c6 <usbdc_set_ftr_req+0x36>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    47ac:	7908      	ldrb	r0, [r1, #4]
    47ae:	2101      	movs	r1, #1
    47b0:	4b05      	ldr	r3, [pc, #20]	; (47c8 <usbdc_set_ftr_req+0x38>)
    47b2:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    47b4:	2301      	movs	r3, #1
    47b6:	2200      	movs	r2, #0
    47b8:	2100      	movs	r1, #0
    47ba:	0020      	movs	r0, r4
    47bc:	4c03      	ldr	r4, [pc, #12]	; (47cc <usbdc_set_ftr_req+0x3c>)
    47be:	47a0      	blx	r4
		return true;
    47c0:	2001      	movs	r0, #1
    47c2:	e000      	b.n	47c6 <usbdc_set_ftr_req+0x36>
		return false;
    47c4:	2000      	movs	r0, #0
}
    47c6:	bd10      	pop	{r4, pc}
    47c8:	00001d71 	.word	0x00001d71
    47cc:	00004735 	.word	0x00004735

000047d0 <usbdc_set_interface>:
{
    47d0:	b570      	push	{r4, r5, r6, lr}
    47d2:	b082      	sub	sp, #8
    47d4:	0005      	movs	r5, r0
    47d6:	000c      	movs	r4, r1
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    47d8:	4b2a      	ldr	r3, [pc, #168]	; (4884 <usbdc_set_interface+0xb4>)
    47da:	681a      	ldr	r2, [r3, #0]
    47dc:	6810      	ldr	r0, [r2, #0]
    47de:	6851      	ldr	r1, [r2, #4]
    47e0:	7eda      	ldrb	r2, [r3, #27]
    47e2:	4b29      	ldr	r3, [pc, #164]	; (4888 <usbdc_set_interface+0xb8>)
    47e4:	4798      	blx	r3
	if (NULL == ifc) {
    47e6:	2800      	cmp	r0, #0
    47e8:	d045      	beq.n	4876 <usbdc_set_interface+0xa6>
	desc.sod = ifc;
    47ea:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    47ec:	7881      	ldrb	r1, [r0, #2]
    47ee:	78c3      	ldrb	r3, [r0, #3]
    47f0:	021b      	lsls	r3, r3, #8
    47f2:	18c9      	adds	r1, r1, r3
    47f4:	b289      	uxth	r1, r1
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    47f6:	1841      	adds	r1, r0, r1
    47f8:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    47fa:	2204      	movs	r2, #4
    47fc:	4b23      	ldr	r3, [pc, #140]	; (488c <usbdc_set_interface+0xbc>)
    47fe:	4798      	blx	r3
    4800:	2800      	cmp	r0, #0
    4802:	d10b      	bne.n	481c <usbdc_set_interface+0x4c>
		return false;
    4804:	2000      	movs	r0, #0
    4806:	e039      	b.n	487c <usbdc_set_interface+0xac>
		desc.sod = usb_desc_next(desc.sod);
    4808:	9800      	ldr	r0, [sp, #0]
	return desc[0];
    480a:	7803      	ldrb	r3, [r0, #0]
	return (desc + usb_desc_len(desc));
    480c:	18c0      	adds	r0, r0, r3
    480e:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    4810:	2204      	movs	r2, #4
    4812:	9901      	ldr	r1, [sp, #4]
    4814:	4b1d      	ldr	r3, [pc, #116]	; (488c <usbdc_set_interface+0xbc>)
    4816:	4798      	blx	r3
		if (NULL == ifc) {
    4818:	2800      	cmp	r0, #0
    481a:	d02e      	beq.n	487a <usbdc_set_interface+0xaa>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    481c:	7883      	ldrb	r3, [r0, #2]
    481e:	42a3      	cmp	r3, r4
    4820:	d1f2      	bne.n	4808 <usbdc_set_interface+0x38>
    4822:	78c3      	ldrb	r3, [r0, #3]
    4824:	42ab      	cmp	r3, r5
    4826:	d1ef      	bne.n	4808 <usbdc_set_interface+0x38>
	desc.sod = ifc;
    4828:	9000      	str	r0, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    482a:	4b16      	ldr	r3, [pc, #88]	; (4884 <usbdc_set_interface+0xb4>)
    482c:	691e      	ldr	r6, [r3, #16]
	while (NULL != func) {
    482e:	2e00      	cmp	r6, #0
    4830:	d01f      	beq.n	4872 <usbdc_set_interface+0xa2>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    4832:	466a      	mov	r2, sp
    4834:	2101      	movs	r1, #1
    4836:	0030      	movs	r0, r6
    4838:	6873      	ldr	r3, [r6, #4]
    483a:	4798      	blx	r3
    483c:	2800      	cmp	r0, #0
    483e:	d001      	beq.n	4844 <usbdc_set_interface+0x74>
			func = func->next;
    4840:	6836      	ldr	r6, [r6, #0]
    4842:	e7f4      	b.n	482e <usbdc_set_interface+0x5e>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    4844:	6873      	ldr	r3, [r6, #4]
    4846:	466a      	mov	r2, sp
    4848:	2100      	movs	r1, #0
    484a:	0030      	movs	r0, r6
    484c:	4798      	blx	r3
    484e:	2800      	cmp	r0, #0
    4850:	d116      	bne.n	4880 <usbdc_set_interface+0xb0>
			if (alt_set) {
    4852:	2d00      	cmp	r5, #0
    4854:	d005      	beq.n	4862 <usbdc_set_interface+0x92>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    4856:	2201      	movs	r2, #1
    4858:	40a2      	lsls	r2, r4
    485a:	490a      	ldr	r1, [pc, #40]	; (4884 <usbdc_set_interface+0xb4>)
    485c:	7f4b      	ldrb	r3, [r1, #29]
    485e:	4313      	orrs	r3, r2
    4860:	774b      	strb	r3, [r1, #29]
			usbdc_xfer(0, NULL, 0, 0);
    4862:	2300      	movs	r3, #0
    4864:	2200      	movs	r2, #0
    4866:	2100      	movs	r1, #0
    4868:	2000      	movs	r0, #0
    486a:	4c09      	ldr	r4, [pc, #36]	; (4890 <usbdc_set_interface+0xc0>)
    486c:	47a0      	blx	r4
			return true;
    486e:	2001      	movs	r0, #1
    4870:	e004      	b.n	487c <usbdc_set_interface+0xac>
	return false;
    4872:	2000      	movs	r0, #0
    4874:	e002      	b.n	487c <usbdc_set_interface+0xac>
		return false;
    4876:	2000      	movs	r0, #0
    4878:	e000      	b.n	487c <usbdc_set_interface+0xac>
			return false;
    487a:	2000      	movs	r0, #0
}
    487c:	b002      	add	sp, #8
    487e:	bd70      	pop	{r4, r5, r6, pc}
			return false;
    4880:	2000      	movs	r0, #0
    4882:	e7fb      	b.n	487c <usbdc_set_interface+0xac>
    4884:	2000056c 	.word	0x2000056c
    4888:	00004d21 	.word	0x00004d21
    488c:	00004cdd 	.word	0x00004cdd
    4890:	00004735 	.word	0x00004735

00004894 <usbdc_set_req>:
{
    4894:	b510      	push	{r4, lr}
    4896:	0004      	movs	r4, r0
	switch (req->bRequest) {
    4898:	784b      	ldrb	r3, [r1, #1]
    489a:	2b0b      	cmp	r3, #11
    489c:	d82d      	bhi.n	48fa <usbdc_set_req+0x66>
    489e:	009b      	lsls	r3, r3, #2
    48a0:	4a17      	ldr	r2, [pc, #92]	; (4900 <usbdc_set_req+0x6c>)
    48a2:	58d3      	ldr	r3, [r2, r3]
    48a4:	469f      	mov	pc, r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    48a6:	2301      	movs	r3, #1
    48a8:	2200      	movs	r2, #0
    48aa:	2100      	movs	r1, #0
    48ac:	4c15      	ldr	r4, [pc, #84]	; (4904 <usbdc_set_req+0x70>)
    48ae:	47a0      	blx	r4
    48b0:	4243      	negs	r3, r0
    48b2:	4158      	adcs	r0, r3
    48b4:	b2c0      	uxtb	r0, r0
}
    48b6:	bd10      	pop	{r4, pc}
		if (!usbdc_set_config(req->wValue)) {
    48b8:	7888      	ldrb	r0, [r1, #2]
    48ba:	4b13      	ldr	r3, [pc, #76]	; (4908 <usbdc_set_req+0x74>)
    48bc:	4798      	blx	r3
    48be:	2800      	cmp	r0, #0
    48c0:	d0f9      	beq.n	48b6 <usbdc_set_req+0x22>
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    48c2:	2301      	movs	r3, #1
    48c4:	2200      	movs	r2, #0
    48c6:	2100      	movs	r1, #0
    48c8:	0020      	movs	r0, r4
    48ca:	4c0e      	ldr	r4, [pc, #56]	; (4904 <usbdc_set_req+0x70>)
    48cc:	47a0      	blx	r4
    48ce:	4243      	negs	r3, r0
    48d0:	4158      	adcs	r0, r3
    48d2:	b2c0      	uxtb	r0, r0
    48d4:	e7ef      	b.n	48b6 <usbdc_set_req+0x22>
		return usbdc_clear_ftr_req(ep, req);
    48d6:	4b0d      	ldr	r3, [pc, #52]	; (490c <usbdc_set_req+0x78>)
    48d8:	4798      	blx	r3
    48da:	e7ec      	b.n	48b6 <usbdc_set_req+0x22>
		return usbdc_set_ftr_req(ep, req);
    48dc:	4b0c      	ldr	r3, [pc, #48]	; (4910 <usbdc_set_req+0x7c>)
    48de:	4798      	blx	r3
    48e0:	e7e9      	b.n	48b6 <usbdc_set_req+0x22>
		return usbdc_set_interface(req->wValue, req->wIndex);
    48e2:	790a      	ldrb	r2, [r1, #4]
    48e4:	794b      	ldrb	r3, [r1, #5]
    48e6:	021b      	lsls	r3, r3, #8
    48e8:	4313      	orrs	r3, r2
    48ea:	788a      	ldrb	r2, [r1, #2]
    48ec:	78c8      	ldrb	r0, [r1, #3]
    48ee:	0200      	lsls	r0, r0, #8
    48f0:	4310      	orrs	r0, r2
    48f2:	0019      	movs	r1, r3
    48f4:	4b07      	ldr	r3, [pc, #28]	; (4914 <usbdc_set_req+0x80>)
    48f6:	4798      	blx	r3
    48f8:	e7dd      	b.n	48b6 <usbdc_set_req+0x22>
		return false;
    48fa:	2000      	movs	r0, #0
    48fc:	e7db      	b.n	48b6 <usbdc_set_req+0x22>
    48fe:	46c0      	nop			; (mov r8, r8)
    4900:	0000593c 	.word	0x0000593c
    4904:	00004735 	.word	0x00004735
    4908:	00004625 	.word	0x00004625
    490c:	00004751 	.word	0x00004751
    4910:	00004791 	.word	0x00004791
    4914:	000047d1 	.word	0x000047d1

00004918 <usbdc_get_dev_desc>:
{
    4918:	b570      	push	{r4, r5, r6, lr}
    491a:	0005      	movs	r5, r0
	uint16_t length   = req->wLength;
    491c:	798b      	ldrb	r3, [r1, #6]
    491e:	79cc      	ldrb	r4, [r1, #7]
    4920:	0224      	lsls	r4, r4, #8
    4922:	431c      	orrs	r4, r3
	if (length > 0x12) {
    4924:	2c12      	cmp	r4, #18
    4926:	d900      	bls.n	492a <usbdc_get_dev_desc+0x12>
		length = 0x12;
    4928:	2412      	movs	r4, #18
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    492a:	4b0b      	ldr	r3, [pc, #44]	; (4958 <usbdc_get_dev_desc+0x40>)
    492c:	681b      	ldr	r3, [r3, #0]
    492e:	6818      	ldr	r0, [r3, #0]
    4930:	6859      	ldr	r1, [r3, #4]
    4932:	2201      	movs	r2, #1
    4934:	4b09      	ldr	r3, [pc, #36]	; (495c <usbdc_get_dev_desc+0x44>)
    4936:	4798      	blx	r3
	if (!dev_desc) {
    4938:	2800      	cmp	r0, #0
    493a:	d00b      	beq.n	4954 <usbdc_get_dev_desc+0x3c>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    493c:	2300      	movs	r3, #0
    493e:	0022      	movs	r2, r4
    4940:	0001      	movs	r1, r0
    4942:	0028      	movs	r0, r5
    4944:	4c06      	ldr	r4, [pc, #24]	; (4960 <usbdc_get_dev_desc+0x48>)
    4946:	47a0      	blx	r4
    4948:	2800      	cmp	r0, #0
    494a:	d101      	bne.n	4950 <usbdc_get_dev_desc+0x38>
	return true;
    494c:	2001      	movs	r0, #1
}
    494e:	bd70      	pop	{r4, r5, r6, pc}
		return false;
    4950:	2000      	movs	r0, #0
    4952:	e7fc      	b.n	494e <usbdc_get_dev_desc+0x36>
		return false;
    4954:	2000      	movs	r0, #0
    4956:	e7fa      	b.n	494e <usbdc_get_dev_desc+0x36>
    4958:	2000056c 	.word	0x2000056c
    495c:	00004cdd 	.word	0x00004cdd
    4960:	00004735 	.word	0x00004735

00004964 <usbdc_get_cfg_desc>:
{
    4964:	b570      	push	{r4, r5, r6, lr}
    4966:	0005      	movs	r5, r0
	uint16_t length   = req->wLength;
    4968:	798b      	ldrb	r3, [r1, #6]
    496a:	79ce      	ldrb	r6, [r1, #7]
    496c:	0236      	lsls	r6, r6, #8
    496e:	431e      	orrs	r6, r3
	uint8_t  index    = req->wValue & 0x00FF;
    4970:	788a      	ldrb	r2, [r1, #2]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    4972:	4b13      	ldr	r3, [pc, #76]	; (49c0 <usbdc_get_cfg_desc+0x5c>)
    4974:	7f1c      	ldrb	r4, [r3, #28]
    4976:	3c01      	subs	r4, #1
    4978:	4034      	ands	r4, r6
    497a:	4261      	negs	r1, r4
    497c:	414c      	adcs	r4, r1
    497e:	b2e4      	uxtb	r4, r4
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    4980:	681b      	ldr	r3, [r3, #0]
    4982:	6818      	ldr	r0, [r3, #0]
    4984:	6859      	ldr	r1, [r3, #4]
    4986:	3201      	adds	r2, #1
    4988:	b2d2      	uxtb	r2, r2
    498a:	4b0e      	ldr	r3, [pc, #56]	; (49c4 <usbdc_get_cfg_desc+0x60>)
    498c:	4798      	blx	r3
	if (NULL == cfg_desc) {
    498e:	2800      	cmp	r0, #0
    4990:	d013      	beq.n	49ba <usbdc_get_cfg_desc+0x56>
	return (ptr[0] + (ptr[1] << 8));
    4992:	7882      	ldrb	r2, [r0, #2]
    4994:	78c3      	ldrb	r3, [r0, #3]
    4996:	021b      	lsls	r3, r3, #8
    4998:	18d2      	adds	r2, r2, r3
    499a:	b292      	uxth	r2, r2
	if (length <= total_len) {
    499c:	4296      	cmp	r6, r2
    499e:	d801      	bhi.n	49a4 <usbdc_get_cfg_desc+0x40>
	uint16_t length   = req->wLength;
    49a0:	0032      	movs	r2, r6
		need_zlp = false;
    49a2:	2400      	movs	r4, #0
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    49a4:	0023      	movs	r3, r4
    49a6:	0001      	movs	r1, r0
    49a8:	0028      	movs	r0, r5
    49aa:	4c07      	ldr	r4, [pc, #28]	; (49c8 <usbdc_get_cfg_desc+0x64>)
    49ac:	47a0      	blx	r4
    49ae:	2800      	cmp	r0, #0
    49b0:	d101      	bne.n	49b6 <usbdc_get_cfg_desc+0x52>
	return true;
    49b2:	2001      	movs	r0, #1
}
    49b4:	bd70      	pop	{r4, r5, r6, pc}
		return false;
    49b6:	2000      	movs	r0, #0
    49b8:	e7fc      	b.n	49b4 <usbdc_get_cfg_desc+0x50>
		return false;
    49ba:	2000      	movs	r0, #0
    49bc:	e7fa      	b.n	49b4 <usbdc_get_cfg_desc+0x50>
    49be:	46c0      	nop			; (mov r8, r8)
    49c0:	2000056c 	.word	0x2000056c
    49c4:	00004d21 	.word	0x00004d21
    49c8:	00004735 	.word	0x00004735

000049cc <usbdc_get_str_desc>:
{
    49cc:	b570      	push	{r4, r5, r6, lr}
    49ce:	0005      	movs	r5, r0
	uint16_t length   = req->wLength;
    49d0:	798b      	ldrb	r3, [r1, #6]
    49d2:	79ce      	ldrb	r6, [r1, #7]
    49d4:	0236      	lsls	r6, r6, #8
    49d6:	431e      	orrs	r6, r3
	uint8_t  index    = req->wValue & 0x00FF;
    49d8:	788a      	ldrb	r2, [r1, #2]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    49da:	4b10      	ldr	r3, [pc, #64]	; (4a1c <usbdc_get_str_desc+0x50>)
    49dc:	7f1c      	ldrb	r4, [r3, #28]
    49de:	3c01      	subs	r4, #1
    49e0:	4034      	ands	r4, r6
    49e2:	4261      	negs	r1, r4
    49e4:	414c      	adcs	r4, r1
    49e6:	b2e4      	uxtb	r4, r4
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    49e8:	681b      	ldr	r3, [r3, #0]
    49ea:	6818      	ldr	r0, [r3, #0]
    49ec:	6859      	ldr	r1, [r3, #4]
    49ee:	4b0c      	ldr	r3, [pc, #48]	; (4a20 <usbdc_get_str_desc+0x54>)
    49f0:	4798      	blx	r3
	if (NULL == str_desc) {
    49f2:	2800      	cmp	r0, #0
    49f4:	d00f      	beq.n	4a16 <usbdc_get_str_desc+0x4a>
	if (length <= str_desc[0]) {
    49f6:	7802      	ldrb	r2, [r0, #0]
    49f8:	4296      	cmp	r6, r2
    49fa:	d801      	bhi.n	4a00 <usbdc_get_str_desc+0x34>
	uint16_t length   = req->wLength;
    49fc:	0032      	movs	r2, r6
		need_zlp = false;
    49fe:	2400      	movs	r4, #0
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    4a00:	0023      	movs	r3, r4
    4a02:	0001      	movs	r1, r0
    4a04:	0028      	movs	r0, r5
    4a06:	4c07      	ldr	r4, [pc, #28]	; (4a24 <usbdc_get_str_desc+0x58>)
    4a08:	47a0      	blx	r4
    4a0a:	2800      	cmp	r0, #0
    4a0c:	d101      	bne.n	4a12 <usbdc_get_str_desc+0x46>
	return true;
    4a0e:	2001      	movs	r0, #1
}
    4a10:	bd70      	pop	{r4, r5, r6, pc}
		return false;
    4a12:	2000      	movs	r0, #0
    4a14:	e7fc      	b.n	4a10 <usbdc_get_str_desc+0x44>
		return false;
    4a16:	2000      	movs	r0, #0
    4a18:	e7fa      	b.n	4a10 <usbdc_get_str_desc+0x44>
    4a1a:	46c0      	nop			; (mov r8, r8)
    4a1c:	2000056c 	.word	0x2000056c
    4a20:	00004d65 	.word	0x00004d65
    4a24:	00004735 	.word	0x00004735

00004a28 <usbdc_get_desc_req>:
{
    4a28:	b510      	push	{r4, lr}
	uint8_t type = (uint8_t)(req->wValue >> 8);
    4a2a:	78cb      	ldrb	r3, [r1, #3]
	switch (type) {
    4a2c:	2b02      	cmp	r3, #2
    4a2e:	d008      	beq.n	4a42 <usbdc_get_desc_req+0x1a>
    4a30:	2b03      	cmp	r3, #3
    4a32:	d009      	beq.n	4a48 <usbdc_get_desc_req+0x20>
    4a34:	2b01      	cmp	r3, #1
    4a36:	d001      	beq.n	4a3c <usbdc_get_desc_req+0x14>
	return false;
    4a38:	2000      	movs	r0, #0
    4a3a:	e001      	b.n	4a40 <usbdc_get_desc_req+0x18>
		return usbdc_get_dev_desc(ep, req);
    4a3c:	4b04      	ldr	r3, [pc, #16]	; (4a50 <usbdc_get_desc_req+0x28>)
    4a3e:	4798      	blx	r3
}
    4a40:	bd10      	pop	{r4, pc}
		return usbdc_get_cfg_desc(ep, req);
    4a42:	4b04      	ldr	r3, [pc, #16]	; (4a54 <usbdc_get_desc_req+0x2c>)
    4a44:	4798      	blx	r3
    4a46:	e7fb      	b.n	4a40 <usbdc_get_desc_req+0x18>
		return usbdc_get_str_desc(ep, req);
    4a48:	4b03      	ldr	r3, [pc, #12]	; (4a58 <usbdc_get_desc_req+0x30>)
    4a4a:	4798      	blx	r3
    4a4c:	e7f8      	b.n	4a40 <usbdc_get_desc_req+0x18>
    4a4e:	46c0      	nop			; (mov r8, r8)
    4a50:	00004919 	.word	0x00004919
    4a54:	00004965 	.word	0x00004965
    4a58:	000049cd 	.word	0x000049cd

00004a5c <usbdc_get_status_req>:
{
    4a5c:	b530      	push	{r4, r5, lr}
    4a5e:	b083      	sub	sp, #12
    4a60:	0004      	movs	r4, r0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    4a62:	780a      	ldrb	r2, [r1, #0]
    4a64:	231f      	movs	r3, #31
    4a66:	4013      	ands	r3, r2
    4a68:	b2da      	uxtb	r2, r3
    4a6a:	2a01      	cmp	r2, #1
    4a6c:	d903      	bls.n	4a76 <usbdc_get_status_req+0x1a>
    4a6e:	2b02      	cmp	r3, #2
    4a70:	d012      	beq.n	4a98 <usbdc_get_status_req+0x3c>
		return false;
    4a72:	2000      	movs	r0, #0
    4a74:	e00e      	b.n	4a94 <usbdc_get_status_req+0x38>
		st = 0;
    4a76:	2300      	movs	r3, #0
    4a78:	9301      	str	r3, [sp, #4]
	memcpy(usbdc.ctrl_buf, &st, 2);
    4a7a:	4d0d      	ldr	r5, [pc, #52]	; (4ab0 <usbdc_get_status_req+0x54>)
    4a7c:	2202      	movs	r2, #2
    4a7e:	a901      	add	r1, sp, #4
    4a80:	6968      	ldr	r0, [r5, #20]
    4a82:	4b0c      	ldr	r3, [pc, #48]	; (4ab4 <usbdc_get_status_req+0x58>)
    4a84:	4798      	blx	r3
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    4a86:	6969      	ldr	r1, [r5, #20]
    4a88:	2300      	movs	r3, #0
    4a8a:	2202      	movs	r2, #2
    4a8c:	0020      	movs	r0, r4
    4a8e:	4c0a      	ldr	r4, [pc, #40]	; (4ab8 <usbdc_get_status_req+0x5c>)
    4a90:	47a0      	blx	r4
	return true;
    4a92:	2001      	movs	r0, #1
}
    4a94:	b003      	add	sp, #12
    4a96:	bd30      	pop	{r4, r5, pc}
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    4a98:	7908      	ldrb	r0, [r1, #4]
    4a9a:	2102      	movs	r1, #2
    4a9c:	4b07      	ldr	r3, [pc, #28]	; (4abc <usbdc_get_status_req+0x60>)
    4a9e:	4798      	blx	r3
		if (st < 0) {
    4aa0:	2800      	cmp	r0, #0
    4aa2:	db03      	blt.n	4aac <usbdc_get_status_req+0x50>
		st = st & 0x1;
    4aa4:	2301      	movs	r3, #1
    4aa6:	4018      	ands	r0, r3
    4aa8:	9001      	str	r0, [sp, #4]
		break;
    4aaa:	e7e6      	b.n	4a7a <usbdc_get_status_req+0x1e>
			return false;
    4aac:	2000      	movs	r0, #0
    4aae:	e7f1      	b.n	4a94 <usbdc_get_status_req+0x38>
    4ab0:	2000056c 	.word	0x2000056c
    4ab4:	000056dd 	.word	0x000056dd
    4ab8:	00004735 	.word	0x00004735
    4abc:	00001d71 	.word	0x00001d71

00004ac0 <usbdc_get_interface>:
{
    4ac0:	b570      	push	{r4, r5, r6, lr}
    4ac2:	0005      	movs	r5, r0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    4ac4:	4b16      	ldr	r3, [pc, #88]	; (4b20 <usbdc_get_interface+0x60>)
    4ac6:	691c      	ldr	r4, [r3, #16]
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    4ac8:	7f5a      	ldrb	r2, [r3, #29]
    4aca:	7901      	ldrb	r1, [r0, #4]
    4acc:	7943      	ldrb	r3, [r0, #5]
    4ace:	021b      	lsls	r3, r3, #8
    4ad0:	430b      	orrs	r3, r1
    4ad2:	411a      	asrs	r2, r3
    4ad4:	07d3      	lsls	r3, r2, #31
    4ad6:	d50a      	bpl.n	4aee <usbdc_get_interface+0x2e>
	while (NULL != func) {
    4ad8:	2c00      	cmp	r4, #0
    4ada:	d01f      	beq.n	4b1c <usbdc_get_interface+0x5c>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    4adc:	002a      	movs	r2, r5
    4ade:	2102      	movs	r1, #2
    4ae0:	0020      	movs	r0, r4
    4ae2:	6863      	ldr	r3, [r4, #4]
    4ae4:	4798      	blx	r3
    4ae6:	2800      	cmp	r0, #0
    4ae8:	da0d      	bge.n	4b06 <usbdc_get_interface+0x46>
			func = func->next;
    4aea:	6824      	ldr	r4, [r4, #0]
    4aec:	e7f4      	b.n	4ad8 <usbdc_get_interface+0x18>
		usbdc.ctrl_buf[0] = 0;
    4aee:	4b0c      	ldr	r3, [pc, #48]	; (4b20 <usbdc_get_interface+0x60>)
    4af0:	2200      	movs	r2, #0
    4af2:	6959      	ldr	r1, [r3, #20]
    4af4:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    4af6:	6959      	ldr	r1, [r3, #20]
    4af8:	2300      	movs	r3, #0
    4afa:	3201      	adds	r2, #1
    4afc:	2000      	movs	r0, #0
    4afe:	4c09      	ldr	r4, [pc, #36]	; (4b24 <usbdc_get_interface+0x64>)
    4b00:	47a0      	blx	r4
		return true;
    4b02:	2001      	movs	r0, #1
    4b04:	e00b      	b.n	4b1e <usbdc_get_interface+0x5e>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    4b06:	4b06      	ldr	r3, [pc, #24]	; (4b20 <usbdc_get_interface+0x60>)
    4b08:	695a      	ldr	r2, [r3, #20]
    4b0a:	7010      	strb	r0, [r2, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    4b0c:	6959      	ldr	r1, [r3, #20]
    4b0e:	2300      	movs	r3, #0
    4b10:	2201      	movs	r2, #1
    4b12:	2000      	movs	r0, #0
    4b14:	4c03      	ldr	r4, [pc, #12]	; (4b24 <usbdc_get_interface+0x64>)
    4b16:	47a0      	blx	r4
			return true;
    4b18:	2001      	movs	r0, #1
    4b1a:	e000      	b.n	4b1e <usbdc_get_interface+0x5e>
	return false;
    4b1c:	2000      	movs	r0, #0
}
    4b1e:	bd70      	pop	{r4, r5, r6, pc}
    4b20:	2000056c 	.word	0x2000056c
    4b24:	00004735 	.word	0x00004735

00004b28 <usbdc_get_req>:
{
    4b28:	b510      	push	{r4, lr}
	switch (req->bRequest) {
    4b2a:	784b      	ldrb	r3, [r1, #1]
    4b2c:	2b06      	cmp	r3, #6
    4b2e:	d00d      	beq.n	4b4c <usbdc_get_req+0x24>
    4b30:	d907      	bls.n	4b42 <usbdc_get_req+0x1a>
    4b32:	2b08      	cmp	r3, #8
    4b34:	d00d      	beq.n	4b52 <usbdc_get_req+0x2a>
    4b36:	2b0a      	cmp	r3, #10
    4b38:	d116      	bne.n	4b68 <usbdc_get_req+0x40>
		return usbdc_get_interface(req);
    4b3a:	0008      	movs	r0, r1
    4b3c:	4b0b      	ldr	r3, [pc, #44]	; (4b6c <usbdc_get_req+0x44>)
    4b3e:	4798      	blx	r3
    4b40:	e006      	b.n	4b50 <usbdc_get_req+0x28>
	switch (req->bRequest) {
    4b42:	2b00      	cmp	r3, #0
    4b44:	d110      	bne.n	4b68 <usbdc_get_req+0x40>
		return usbdc_get_status_req(ep, req);
    4b46:	4b0a      	ldr	r3, [pc, #40]	; (4b70 <usbdc_get_req+0x48>)
    4b48:	4798      	blx	r3
    4b4a:	e001      	b.n	4b50 <usbdc_get_req+0x28>
		return usbdc_get_desc_req(ep, req);
    4b4c:	4b09      	ldr	r3, [pc, #36]	; (4b74 <usbdc_get_req+0x4c>)
    4b4e:	4798      	blx	r3
}
    4b50:	bd10      	pop	{r4, pc}
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    4b52:	4b09      	ldr	r3, [pc, #36]	; (4b78 <usbdc_get_req+0x50>)
    4b54:	7eda      	ldrb	r2, [r3, #27]
    4b56:	6959      	ldr	r1, [r3, #20]
    4b58:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    4b5a:	6959      	ldr	r1, [r3, #20]
    4b5c:	2300      	movs	r3, #0
    4b5e:	2201      	movs	r2, #1
    4b60:	4c06      	ldr	r4, [pc, #24]	; (4b7c <usbdc_get_req+0x54>)
    4b62:	47a0      	blx	r4
		return true;
    4b64:	2001      	movs	r0, #1
    4b66:	e7f3      	b.n	4b50 <usbdc_get_req+0x28>
		return false;
    4b68:	2000      	movs	r0, #0
    4b6a:	e7f1      	b.n	4b50 <usbdc_get_req+0x28>
    4b6c:	00004ac1 	.word	0x00004ac1
    4b70:	00004a5d 	.word	0x00004a5d
    4b74:	00004a29 	.word	0x00004a29
    4b78:	2000056c 	.word	0x2000056c
    4b7c:	00004735 	.word	0x00004735

00004b80 <usbdc_cb_ctl_req>:
{
    4b80:	b570      	push	{r4, r5, r6, lr}
    4b82:	0005      	movs	r5, r0
    4b84:	000c      	movs	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    4b86:	2200      	movs	r2, #0
    4b88:	4b0d      	ldr	r3, [pc, #52]	; (4bc0 <usbdc_cb_ctl_req+0x40>)
    4b8a:	4798      	blx	r3
    4b8c:	1c43      	adds	r3, r0, #1
    4b8e:	d014      	beq.n	4bba <usbdc_cb_ctl_req+0x3a>
    4b90:	2801      	cmp	r0, #1
    4b92:	d013      	beq.n	4bbc <usbdc_cb_ctl_req+0x3c>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    4b94:	7823      	ldrb	r3, [r4, #0]
    4b96:	221f      	movs	r2, #31
    4b98:	4393      	bics	r3, r2
    4b9a:	d004      	beq.n	4ba6 <usbdc_cb_ctl_req+0x26>
    4b9c:	b2db      	uxtb	r3, r3
    4b9e:	2b80      	cmp	r3, #128	; 0x80
    4ba0:	d006      	beq.n	4bb0 <usbdc_cb_ctl_req+0x30>
		return false;
    4ba2:	2000      	movs	r0, #0
    4ba4:	e00a      	b.n	4bbc <usbdc_cb_ctl_req+0x3c>
		return usbdc_set_req(ep, req);
    4ba6:	0021      	movs	r1, r4
    4ba8:	0028      	movs	r0, r5
    4baa:	4b06      	ldr	r3, [pc, #24]	; (4bc4 <usbdc_cb_ctl_req+0x44>)
    4bac:	4798      	blx	r3
    4bae:	e005      	b.n	4bbc <usbdc_cb_ctl_req+0x3c>
		return usbdc_get_req(ep, req);
    4bb0:	0021      	movs	r1, r4
    4bb2:	0028      	movs	r0, r5
    4bb4:	4b04      	ldr	r3, [pc, #16]	; (4bc8 <usbdc_cb_ctl_req+0x48>)
    4bb6:	4798      	blx	r3
    4bb8:	e000      	b.n	4bbc <usbdc_cb_ctl_req+0x3c>
		return false;
    4bba:	2000      	movs	r0, #0
}
    4bbc:	bd70      	pop	{r4, r5, r6, pc}
    4bbe:	46c0      	nop			; (mov r8, r8)
    4bc0:	00004531 	.word	0x00004531
    4bc4:	00004895 	.word	0x00004895
    4bc8:	00004b29 	.word	0x00004b29

00004bcc <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    4bcc:	b510      	push	{r4, lr}
	switch (type) {
    4bce:	2801      	cmp	r0, #1
    4bd0:	d009      	beq.n	4be6 <usbdc_register_handler+0x1a>
    4bd2:	2800      	cmp	r0, #0
    4bd4:	d002      	beq.n	4bdc <usbdc_register_handler+0x10>
    4bd6:	2802      	cmp	r0, #2
    4bd8:	d00a      	beq.n	4bf0 <usbdc_register_handler+0x24>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
	}
}
    4bda:	bd10      	pop	{r4, pc}
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    4bdc:	4807      	ldr	r0, [pc, #28]	; (4bfc <usbdc_register_handler+0x30>)
    4bde:	3004      	adds	r0, #4
    4be0:	4b07      	ldr	r3, [pc, #28]	; (4c00 <usbdc_register_handler+0x34>)
    4be2:	4798      	blx	r3
		break;
    4be4:	e7f9      	b.n	4bda <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    4be6:	4805      	ldr	r0, [pc, #20]	; (4bfc <usbdc_register_handler+0x30>)
    4be8:	3008      	adds	r0, #8
    4bea:	4b05      	ldr	r3, [pc, #20]	; (4c00 <usbdc_register_handler+0x34>)
    4bec:	4798      	blx	r3
		break;
    4bee:	e7f4      	b.n	4bda <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    4bf0:	4802      	ldr	r0, [pc, #8]	; (4bfc <usbdc_register_handler+0x30>)
    4bf2:	300c      	adds	r0, #12
    4bf4:	4b02      	ldr	r3, [pc, #8]	; (4c00 <usbdc_register_handler+0x34>)
    4bf6:	4798      	blx	r3
}
    4bf8:	e7ef      	b.n	4bda <usbdc_register_handler+0xe>
    4bfa:	46c0      	nop			; (mov r8, r8)
    4bfc:	2000056c 	.word	0x2000056c
    4c00:	00001e7d 	.word	0x00001e7d

00004c04 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    4c04:	b570      	push	{r4, r5, r6, lr}
    4c06:	0004      	movs	r4, r0
	ASSERT(ctrl_buf);
    4c08:	1e43      	subs	r3, r0, #1
    4c0a:	4198      	sbcs	r0, r3
    4c0c:	b2c0      	uxtb	r0, r0
    4c0e:	4a0c      	ldr	r2, [pc, #48]	; (4c40 <usbdc_init+0x3c>)
    4c10:	490c      	ldr	r1, [pc, #48]	; (4c44 <usbdc_init+0x40>)
    4c12:	4b0d      	ldr	r3, [pc, #52]	; (4c48 <usbdc_init+0x44>)
    4c14:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    4c16:	4b0d      	ldr	r3, [pc, #52]	; (4c4c <usbdc_init+0x48>)
    4c18:	4798      	blx	r3
	if (rc < 0) {
    4c1a:	2800      	cmp	r0, #0
    4c1c:	db0e      	blt.n	4c3c <usbdc_init+0x38>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    4c1e:	4d0c      	ldr	r5, [pc, #48]	; (4c50 <usbdc_init+0x4c>)
    4c20:	2220      	movs	r2, #32
    4c22:	2100      	movs	r1, #0
    4c24:	0028      	movs	r0, r5
    4c26:	4b0b      	ldr	r3, [pc, #44]	; (4c54 <usbdc_init+0x50>)
    4c28:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    4c2a:	616c      	str	r4, [r5, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    4c2c:	490a      	ldr	r1, [pc, #40]	; (4c58 <usbdc_init+0x54>)
    4c2e:	2000      	movs	r0, #0
    4c30:	4c0a      	ldr	r4, [pc, #40]	; (4c5c <usbdc_init+0x58>)
    4c32:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    4c34:	490a      	ldr	r1, [pc, #40]	; (4c60 <usbdc_init+0x5c>)
    4c36:	2001      	movs	r0, #1
    4c38:	47a0      	blx	r4

	return 0;
    4c3a:	2000      	movs	r0, #0
}
    4c3c:	bd70      	pop	{r4, r5, r6, pc}
    4c3e:	46c0      	nop			; (mov r8, r8)
    4c40:	00000355 	.word	0x00000355
    4c44:	0000596c 	.word	0x0000596c
    4c48:	00001e29 	.word	0x00001e29
    4c4c:	00001a9d 	.word	0x00001a9d
    4c50:	2000056c 	.word	0x2000056c
    4c54:	000056ef 	.word	0x000056ef
    4c58:	0000456d 	.word	0x0000456d
    4c5c:	00001b09 	.word	0x00001b09
    4c60:	00004711 	.word	0x00004711

00004c64 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    4c64:	b510      	push	{r4, lr}
    4c66:	0001      	movs	r1, r0
	list_insert_at_end(&usbdc.func_list, func);
    4c68:	4802      	ldr	r0, [pc, #8]	; (4c74 <usbdc_register_function+0x10>)
    4c6a:	3010      	adds	r0, #16
    4c6c:	4b02      	ldr	r3, [pc, #8]	; (4c78 <usbdc_register_function+0x14>)
    4c6e:	4798      	blx	r3
}
    4c70:	bd10      	pop	{r4, pc}
    4c72:	46c0      	nop			; (mov r8, r8)
    4c74:	2000056c 	.word	0x2000056c
    4c78:	00001e7d 	.word	0x00001e7d

00004c7c <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    4c7c:	b510      	push	{r4, lr}
	if (usbdc.state >= USBD_S_POWER) {
    4c7e:	4b0b      	ldr	r3, [pc, #44]	; (4cac <usbdc_start+0x30>)
    4c80:	7e9b      	ldrb	r3, [r3, #26]
    4c82:	2b00      	cmp	r3, #0
    4c84:	d10c      	bne.n	4ca0 <usbdc_start+0x24>
		return ERR_BUSY;
	}

	if (desces) {
    4c86:	2800      	cmp	r0, #0
    4c88:	d00d      	beq.n	4ca6 <usbdc_start+0x2a>
		usbdc.desces.ls_fs = desces;
    4c8a:	4b08      	ldr	r3, [pc, #32]	; (4cac <usbdc_start+0x30>)
    4c8c:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    4c8e:	6802      	ldr	r2, [r0, #0]
    4c90:	79d2      	ldrb	r2, [r2, #7]
    4c92:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    4c94:	2201      	movs	r2, #1
    4c96:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    4c98:	4b05      	ldr	r3, [pc, #20]	; (4cb0 <usbdc_start+0x34>)
    4c9a:	4798      	blx	r3
	return ERR_NONE;
    4c9c:	2000      	movs	r0, #0
}
    4c9e:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    4ca0:	2004      	movs	r0, #4
    4ca2:	4240      	negs	r0, r0
    4ca4:	e7fb      	b.n	4c9e <usbdc_start+0x22>
		return ERR_BAD_DATA;
    4ca6:	2009      	movs	r0, #9
    4ca8:	4240      	negs	r0, r0
    4caa:	e7f8      	b.n	4c9e <usbdc_start+0x22>
    4cac:	2000056c 	.word	0x2000056c
    4cb0:	00001b15 	.word	0x00001b15

00004cb4 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    4cb4:	b510      	push	{r4, lr}
	usb_d_attach();
    4cb6:	4b01      	ldr	r3, [pc, #4]	; (4cbc <usbdc_attach+0x8>)
    4cb8:	4798      	blx	r3
}
    4cba:	bd10      	pop	{r4, pc}
    4cbc:	00001b21 	.word	0x00001b21

00004cc0 <usbdc_get_ctrl_buffer>:
/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
    4cc0:	4b01      	ldr	r3, [pc, #4]	; (4cc8 <usbdc_get_ctrl_buffer+0x8>)
    4cc2:	6958      	ldr	r0, [r3, #20]
}
    4cc4:	4770      	bx	lr
    4cc6:	46c0      	nop			; (mov r8, r8)
    4cc8:	2000056c 	.word	0x2000056c

00004ccc <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    4ccc:	4b02      	ldr	r3, [pc, #8]	; (4cd8 <usbdc_get_state+0xc>)
    4cce:	7e98      	ldrb	r0, [r3, #26]
    4cd0:	06c3      	lsls	r3, r0, #27
    4cd2:	d500      	bpl.n	4cd6 <usbdc_get_state+0xa>
		return USBD_S_SUSPEND;
    4cd4:	2010      	movs	r0, #16
	}
	return usbdc.state;
}
    4cd6:	4770      	bx	lr
    4cd8:	2000056c 	.word	0x2000056c

00004cdc <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    4cdc:	b510      	push	{r4, lr}
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    4cde:	4288      	cmp	r0, r1
    4ce0:	d207      	bcs.n	4cf2 <usb_find_desc+0x16>
	return desc[0];
    4ce2:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    4ce4:	2b01      	cmp	r3, #1
    4ce6:	d906      	bls.n	4cf6 <usb_find_desc+0x1a>
	return desc[1];
    4ce8:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    4cea:	4294      	cmp	r4, r2
    4cec:	d002      	beq.n	4cf4 <usb_find_desc+0x18>
	return (desc + usb_desc_len(desc));
    4cee:	18c0      	adds	r0, r0, r3
    4cf0:	e7f5      	b.n	4cde <usb_find_desc+0x2>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    4cf2:	2000      	movs	r0, #0
}
    4cf4:	bd10      	pop	{r4, pc}
		_desc_len_check();
    4cf6:	2000      	movs	r0, #0
    4cf8:	e7fc      	b.n	4cf4 <usb_find_desc+0x18>

00004cfa <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    4cfa:	4288      	cmp	r0, r1
    4cfc:	d209      	bcs.n	4d12 <usb_find_ep_desc+0x18>
	return desc[0];
    4cfe:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    4d00:	2b01      	cmp	r3, #1
    4d02:	d908      	bls.n	4d16 <usb_find_ep_desc+0x1c>
	return desc[1];
    4d04:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    4d06:	2a04      	cmp	r2, #4
    4d08:	d007      	beq.n	4d1a <usb_find_ep_desc+0x20>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    4d0a:	2a05      	cmp	r2, #5
    4d0c:	d002      	beq.n	4d14 <usb_find_ep_desc+0x1a>
	return (desc + usb_desc_len(desc));
    4d0e:	18c0      	adds	r0, r0, r3
    4d10:	e7f3      	b.n	4cfa <usb_find_ep_desc>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    4d12:	2000      	movs	r0, #0
}
    4d14:	4770      	bx	lr
		_desc_len_check();
    4d16:	2000      	movs	r0, #0
    4d18:	e7fc      	b.n	4d14 <usb_find_ep_desc+0x1a>
	return NULL;
    4d1a:	2000      	movs	r0, #0
    4d1c:	e7fa      	b.n	4d14 <usb_find_ep_desc+0x1a>
	...

00004d20 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    4d20:	b570      	push	{r4, r5, r6, lr}
    4d22:	000c      	movs	r4, r1
    4d24:	0015      	movs	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    4d26:	2202      	movs	r2, #2
    4d28:	4b0d      	ldr	r3, [pc, #52]	; (4d60 <usb_find_cfg_desc+0x40>)
    4d2a:	4798      	blx	r3
	if (!desc) {
    4d2c:	2800      	cmp	r0, #0
    4d2e:	d012      	beq.n	4d56 <usb_find_cfg_desc+0x36>
		return NULL;
	}
	while (desc < eof) {
    4d30:	42a0      	cmp	r0, r4
    4d32:	d20f      	bcs.n	4d54 <usb_find_cfg_desc+0x34>
	return desc[0];
    4d34:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    4d36:	2b01      	cmp	r3, #1
    4d38:	d90e      	bls.n	4d58 <usb_find_cfg_desc+0x38>
		if (desc[1] != USB_DT_CONFIG) {
    4d3a:	7843      	ldrb	r3, [r0, #1]
    4d3c:	2b02      	cmp	r3, #2
    4d3e:	d10d      	bne.n	4d5c <usb_find_cfg_desc+0x3c>
			break;
		}
		if (desc[5] == cfg_value) {
    4d40:	7943      	ldrb	r3, [r0, #5]
    4d42:	42ab      	cmp	r3, r5
    4d44:	d007      	beq.n	4d56 <usb_find_cfg_desc+0x36>
	return (ptr[0] + (ptr[1] << 8));
    4d46:	7883      	ldrb	r3, [r0, #2]
    4d48:	78c2      	ldrb	r2, [r0, #3]
    4d4a:	0212      	lsls	r2, r2, #8
    4d4c:	189b      	adds	r3, r3, r2
    4d4e:	b29b      	uxth	r3, r3
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    4d50:	18c0      	adds	r0, r0, r3
    4d52:	e7ed      	b.n	4d30 <usb_find_cfg_desc+0x10>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    4d54:	2000      	movs	r0, #0
}
    4d56:	bd70      	pop	{r4, r5, r6, pc}
		_desc_len_check();
    4d58:	2000      	movs	r0, #0
    4d5a:	e7fc      	b.n	4d56 <usb_find_cfg_desc+0x36>
	return NULL;
    4d5c:	2000      	movs	r0, #0
    4d5e:	e7fa      	b.n	4d56 <usb_find_cfg_desc+0x36>
    4d60:	00004cdd 	.word	0x00004cdd

00004d64 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    4d64:	b570      	push	{r4, r5, r6, lr}
    4d66:	000d      	movs	r5, r1
    4d68:	0016      	movs	r6, r2
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    4d6a:	2400      	movs	r4, #0
    4d6c:	42a8      	cmp	r0, r5
    4d6e:	d20e      	bcs.n	4d8e <usb_find_str_desc+0x2a>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    4d70:	2203      	movs	r2, #3
    4d72:	0029      	movs	r1, r5
    4d74:	4b08      	ldr	r3, [pc, #32]	; (4d98 <usb_find_str_desc+0x34>)
    4d76:	4798      	blx	r3
		if (desc) {
    4d78:	2800      	cmp	r0, #0
    4d7a:	d009      	beq.n	4d90 <usb_find_str_desc+0x2c>
	return desc[0];
    4d7c:	7803      	ldrb	r3, [r0, #0]
			_desc_len_check();
    4d7e:	2b01      	cmp	r3, #1
    4d80:	d907      	bls.n	4d92 <usb_find_str_desc+0x2e>
			if (i == str_index) {
    4d82:	42b4      	cmp	r4, r6
    4d84:	d004      	beq.n	4d90 <usb_find_str_desc+0x2c>
				return desc;
			}
			i++;
    4d86:	3401      	adds	r4, #1
    4d88:	b2e4      	uxtb	r4, r4
	return (desc + usb_desc_len(desc));
    4d8a:	18c0      	adds	r0, r0, r3
    4d8c:	e7ee      	b.n	4d6c <usb_find_str_desc+0x8>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    4d8e:	2000      	movs	r0, #0
}
    4d90:	bd70      	pop	{r4, r5, r6, pc}
			_desc_len_check();
    4d92:	2000      	movs	r0, #0
    4d94:	e7fc      	b.n	4d90 <usb_find_str_desc+0x2c>
    4d96:	46c0      	nop			; (mov r8, r8)
    4d98:	00004cdd 	.word	0x00004cdd

00004d9c <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    4d9c:	2000      	movs	r0, #0
    4d9e:	4770      	bx	lr

00004da0 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    4da0:	4770      	bx	lr
	...

00004da4 <_ZL10USBTimeoutPK10timer_task>:
//#include "Timer_Class.h"

CDC_Class	*ptrCDCClass;

static void	USBTimeout(const struct timer_task *const timer_task){
	ptrCDCClass->timeout=true;
    4da4:	4b03      	ldr	r3, [pc, #12]	; (4db4 <_ZL10USBTimeoutPK10timer_task+0x10>)
    4da6:	681b      	ldr	r3, [r3, #0]
    4da8:	2201      	movs	r2, #1
    4daa:	749a      	strb	r2, [r3, #18]
	ptrCDCClass->connected=false;
    4dac:	2200      	movs	r2, #0
    4dae:	741a      	strb	r2, [r3, #16]
	
}
    4db0:	4770      	bx	lr
    4db2:	46c0      	nop			; (mov r8, r8)
    4db4:	2000058c 	.word	0x2000058c

00004db8 <_ZL12cb_bulk_readh13usb_xfer_codem>:
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
	
	ptrCDCClass->rxReady=true;
    4db8:	4b03      	ldr	r3, [pc, #12]	; (4dc8 <_ZL12cb_bulk_readh13usb_xfer_codem+0x10>)
    4dba:	681b      	ldr	r3, [r3, #0]
    4dbc:	2201      	movs	r2, #1
    4dbe:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->plugged=true;
    4dc0:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    4dc2:	741a      	strb	r2, [r3, #16]


	return false;
}
    4dc4:	2000      	movs	r0, #0
    4dc6:	4770      	bx	lr
    4dc8:	2000058c 	.word	0x2000058c

00004dcc <_ZL13cb_bulk_writeh13usb_xfer_codem>:
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
    4dcc:	4b03      	ldr	r3, [pc, #12]	; (4ddc <_ZL13cb_bulk_writeh13usb_xfer_codem+0x10>)
    4dce:	681b      	ldr	r3, [r3, #0]
    4dd0:	2201      	movs	r2, #1
    4dd2:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->plugged=true;
    4dd4:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    4dd6:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
}
    4dd8:	2000      	movs	r0, #0
    4dda:	4770      	bx	lr
    4ddc:	2000058c 	.word	0x2000058c

00004de0 <_ZN9CDC_Class4peekEv>:
	return cdcdf_acm_is_enabled();
	
}

int CDC_Class::peek(void)
{
    4de0:	b530      	push	{r4, r5, lr}
    4de2:	b083      	sub	sp, #12
    4de4:	0004      	movs	r4, r0
	uint8_t	r;
	if (_serialPeek != -1)
    4de6:	6983      	ldr	r3, [r0, #24]
    4de8:	3301      	adds	r3, #1
    4dea:	d002      	beq.n	4df2 <_ZN9CDC_Class4peekEv+0x12>
	return _serialPeek;
    4dec:	6980      	ldr	r0, [r0, #24]
	_serialPeek = readData(&r,1);
	_serialPeek=(int)r;
	return _serialPeek;
}
    4dee:	b003      	add	sp, #12
    4df0:	bd30      	pop	{r4, r5, pc}
	_serialPeek = readData(&r,1);
    4df2:	6803      	ldr	r3, [r0, #0]
    4df4:	69db      	ldr	r3, [r3, #28]
    4df6:	466a      	mov	r2, sp
    4df8:	1dd5      	adds	r5, r2, #7
    4dfa:	2201      	movs	r2, #1
    4dfc:	0029      	movs	r1, r5
    4dfe:	4798      	blx	r3
    4e00:	61a0      	str	r0, [r4, #24]
	_serialPeek=(int)r;
    4e02:	782b      	ldrb	r3, [r5, #0]
    4e04:	61a3      	str	r3, [r4, #24]
	return _serialPeek;
    4e06:	69a0      	ldr	r0, [r4, #24]
    4e08:	e7f1      	b.n	4dee <_ZN9CDC_Class4peekEv+0xe>

00004e0a <_ZN9CDC_Class5writeEh>:
}

void	CDC_Class::clear(void){
	cdcdf_acm_stop_xfer();
}
size_t CDC_Class::write(uint8_t c) {
    4e0a:	b500      	push	{lr}
    4e0c:	b083      	sub	sp, #12
    4e0e:	466b      	mov	r3, sp
    4e10:	71d9      	strb	r1, [r3, #7]
	if (connected){
    4e12:	7c03      	ldrb	r3, [r0, #16]
    4e14:	2b00      	cmp	r3, #0
    4e16:	d00a      	beq.n	4e2e <_ZN9CDC_Class5writeEh+0x24>
		while(!txReady);
    4e18:	7d03      	ldrb	r3, [r0, #20]
    4e1a:	2b00      	cmp	r3, #0
    4e1c:	d0fc      	beq.n	4e18 <_ZN9CDC_Class5writeEh+0xe>
		return writeData(&c, 1);
    4e1e:	6803      	ldr	r3, [r0, #0]
    4e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4e22:	2201      	movs	r2, #1
    4e24:	4669      	mov	r1, sp
    4e26:	3107      	adds	r1, #7
    4e28:	4798      	blx	r3
	}else{
		return 0;
	}
		
}
    4e2a:	b003      	add	sp, #12
    4e2c:	bd00      	pop	{pc}
		return 0;
    4e2e:	2000      	movs	r0, #0
    4e30:	e7fb      	b.n	4e2a <_ZN9CDC_Class5writeEh+0x20>

00004e32 <_ZN9CDC_Class9availableEv>:
	return r;		
}


bool	CDC_Class::available(void){
	if (rxReady && txReady)
    4e32:	7d43      	ldrb	r3, [r0, #21]
    4e34:	2b00      	cmp	r3, #0
    4e36:	d002      	beq.n	4e3e <_ZN9CDC_Class9availableEv+0xc>
    4e38:	7d00      	ldrb	r0, [r0, #20]
    4e3a:	b2c0      	uxtb	r0, r0
	{
		
	return false;
	}
	
}
    4e3c:	4770      	bx	lr
	if (rxReady && txReady)
    4e3e:	2000      	movs	r0, #0
    4e40:	e7fc      	b.n	4e3c <_ZN9CDC_Class9availableEv+0xa>
	...

00004e44 <_ZN9CDC_ClassD1Ev>:
CDC_Class::~CDC_Class()
    4e44:	b510      	push	{r4, lr}
    4e46:	0004      	movs	r4, r0
    4e48:	4b03      	ldr	r3, [pc, #12]	; (4e58 <_ZN9CDC_ClassD1Ev+0x14>)
    4e4a:	3308      	adds	r3, #8
    4e4c:	6003      	str	r3, [r0, #0]
    4e4e:	3010      	adds	r0, #16
    4e50:	4b02      	ldr	r3, [pc, #8]	; (4e5c <_ZN9CDC_ClassD1Ev+0x18>)
    4e52:	4798      	blx	r3
} //~CDC_Class
    4e54:	0020      	movs	r0, r4
    4e56:	bd10      	pop	{r4, pc}
    4e58:	000059a8 	.word	0x000059a8
    4e5c:	00005291 	.word	0x00005291

00004e60 <_ZL10cb_state_c22usb_cdc_control_signal>:
{
    4e60:	b510      	push	{r4, lr}
    4e62:	b082      	sub	sp, #8
    4e64:	1c03      	adds	r3, r0, #0
    4e66:	aa01      	add	r2, sp, #4
    4e68:	8010      	strh	r0, [r2, #0]
	if (state.rs232.DTR) {
    4e6a:	07db      	lsls	r3, r3, #31
    4e6c:	d402      	bmi.n	4e74 <_ZL10cb_state_c22usb_cdc_control_signal+0x14>
}
    4e6e:	2000      	movs	r0, #0
    4e70:	b002      	add	sp, #8
    4e72:	bd10      	pop	{r4, pc}
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
    4e74:	4906      	ldr	r1, [pc, #24]	; (4e90 <_ZL10cb_state_c22usb_cdc_control_signal+0x30>)
    4e76:	2000      	movs	r0, #0
    4e78:	4c06      	ldr	r4, [pc, #24]	; (4e94 <_ZL10cb_state_c22usb_cdc_control_signal+0x34>)
    4e7a:	47a0      	blx	r4
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
    4e7c:	4906      	ldr	r1, [pc, #24]	; (4e98 <_ZL10cb_state_c22usb_cdc_control_signal+0x38>)
    4e7e:	2001      	movs	r0, #1
    4e80:	47a0      	blx	r4
		ptrCDCClass->txReady=true;
    4e82:	4b06      	ldr	r3, [pc, #24]	; (4e9c <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>)
    4e84:	681b      	ldr	r3, [r3, #0]
    4e86:	2201      	movs	r2, #1
    4e88:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
    4e8a:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->connected=true;
    4e8c:	741a      	strb	r2, [r3, #16]
    4e8e:	e7ee      	b.n	4e6e <_ZL10cb_state_c22usb_cdc_control_signal+0xe>
    4e90:	00004db9 	.word	0x00004db9
    4e94:	0000440d 	.word	0x0000440d
    4e98:	00004dcd 	.word	0x00004dcd
    4e9c:	2000058c 	.word	0x2000058c

00004ea0 <_ZN9CDC_Class4readEv>:
{
    4ea0:	b510      	push	{r4, lr}
    4ea2:	b082      	sub	sp, #8
    4ea4:	0004      	movs	r4, r0
	rxReady=false;
    4ea6:	2300      	movs	r3, #0
    4ea8:	7543      	strb	r3, [r0, #21]
	cdcdf_acm_read(&p, 1);
    4eaa:	2101      	movs	r1, #1
    4eac:	466b      	mov	r3, sp
    4eae:	1dd8      	adds	r0, r3, #7
    4eb0:	4b04      	ldr	r3, [pc, #16]	; (4ec4 <_ZN9CDC_Class4readEv+0x24>)
    4eb2:	4798      	blx	r3
	while(!rxReady);
    4eb4:	7d63      	ldrb	r3, [r4, #21]
    4eb6:	2b00      	cmp	r3, #0
    4eb8:	d0fc      	beq.n	4eb4 <_ZN9CDC_Class4readEv+0x14>
	return (int)p;
    4eba:	466b      	mov	r3, sp
    4ebc:	79d8      	ldrb	r0, [r3, #7]
}
    4ebe:	b002      	add	sp, #8
    4ec0:	bd10      	pop	{r4, pc}
    4ec2:	46c0      	nop			; (mov r8, r8)
    4ec4:	00004469 	.word	0x00004469

00004ec8 <_ZN9CDC_Class8readDataEPvl>:
{
    4ec8:	b570      	push	{r4, r5, r6, lr}
    4eca:	0004      	movs	r4, r0
    4ecc:	000e      	movs	r6, r1
    4ece:	0015      	movs	r5, r2
	if (connected)
    4ed0:	7c03      	ldrb	r3, [r0, #16]
    4ed2:	2b00      	cmp	r3, #0
    4ed4:	d102      	bne.n	4edc <_ZN9CDC_Class8readDataEPvl+0x14>
		r=0;
    4ed6:	2500      	movs	r5, #0
}
    4ed8:	0028      	movs	r0, r5
    4eda:	bd70      	pop	{r4, r5, r6, pc}
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    4edc:	0093      	lsls	r3, r2, #2
    4ede:	189b      	adds	r3, r3, r2
    4ee0:	005a      	lsls	r2, r3, #1
    4ee2:	490f      	ldr	r1, [pc, #60]	; (4f20 <_ZN9CDC_Class8readDataEPvl+0x58>)
    4ee4:	480f      	ldr	r0, [pc, #60]	; (4f24 <_ZN9CDC_Class8readDataEPvl+0x5c>)
    4ee6:	4b10      	ldr	r3, [pc, #64]	; (4f28 <_ZN9CDC_Class8readDataEPvl+0x60>)
    4ee8:	4798      	blx	r3
		rxReady=false;
    4eea:	2300      	movs	r3, #0
    4eec:	7563      	strb	r3, [r4, #21]
		r=cdcdf_acm_read((uint8_t *)p, size);
    4eee:	0029      	movs	r1, r5
    4ef0:	0030      	movs	r0, r6
    4ef2:	4b0e      	ldr	r3, [pc, #56]	; (4f2c <_ZN9CDC_Class8readDataEPvl+0x64>)
    4ef4:	4798      	blx	r3
    4ef6:	b2c5      	uxtb	r5, r0
    4ef8:	e002      	b.n	4f00 <_ZN9CDC_Class8readDataEPvl+0x38>
		while((!rxReady)&&(connected));
    4efa:	2300      	movs	r3, #0
    4efc:	2b00      	cmp	r3, #0
    4efe:	d005      	beq.n	4f0c <_ZN9CDC_Class8readDataEPvl+0x44>
    4f00:	7d63      	ldrb	r3, [r4, #21]
    4f02:	2b00      	cmp	r3, #0
    4f04:	d1f9      	bne.n	4efa <_ZN9CDC_Class8readDataEPvl+0x32>
    4f06:	7c23      	ldrb	r3, [r4, #16]
    4f08:	b2db      	uxtb	r3, r3
    4f0a:	e7f7      	b.n	4efc <_ZN9CDC_Class8readDataEPvl+0x34>
		usbTerminalTimer.Stop();
    4f0c:	4c05      	ldr	r4, [pc, #20]	; (4f24 <_ZN9CDC_Class8readDataEPvl+0x5c>)
    4f0e:	0020      	movs	r0, r4
    4f10:	4b07      	ldr	r3, [pc, #28]	; (4f30 <_ZN9CDC_Class8readDataEPvl+0x68>)
    4f12:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    4f14:	4902      	ldr	r1, [pc, #8]	; (4f20 <_ZN9CDC_Class8readDataEPvl+0x58>)
    4f16:	0020      	movs	r0, r4
    4f18:	4b06      	ldr	r3, [pc, #24]	; (4f34 <_ZN9CDC_Class8readDataEPvl+0x6c>)
    4f1a:	4798      	blx	r3
    4f1c:	e7dc      	b.n	4ed8 <_ZN9CDC_Class8readDataEPvl+0x10>
    4f1e:	46c0      	nop			; (mov r8, r8)
    4f20:	00004da5 	.word	0x00004da5
    4f24:	200005f8 	.word	0x200005f8
    4f28:	0000546d 	.word	0x0000546d
    4f2c:	00004469 	.word	0x00004469
    4f30:	000053dd 	.word	0x000053dd
    4f34:	000054b5 	.word	0x000054b5

00004f38 <_ZN9CDC_Class5flushEv>:
void	CDC_Class::flush(void){
    4f38:	b510      	push	{r4, lr}
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
    4f3a:	301c      	adds	r0, #28
    4f3c:	2140      	movs	r1, #64	; 0x40
    4f3e:	4b01      	ldr	r3, [pc, #4]	; (4f44 <_ZN9CDC_Class5flushEv+0xc>)
    4f40:	4798      	blx	r3
}
    4f42:	bd10      	pop	{r4, pc}
    4f44:	00004499 	.word	0x00004499

00004f48 <_ZN9CDC_Class9writeDataEPKvl>:
{
    4f48:	b570      	push	{r4, r5, r6, lr}
    4f4a:	0004      	movs	r4, r0
    4f4c:	000e      	movs	r6, r1
    4f4e:	0015      	movs	r5, r2
	if (connected)
    4f50:	7c03      	ldrb	r3, [r0, #16]
    4f52:	2b00      	cmp	r3, #0
    4f54:	d102      	bne.n	4f5c <_ZN9CDC_Class9writeDataEPKvl+0x14>
		return 0;
    4f56:	2500      	movs	r5, #0
}
    4f58:	0028      	movs	r0, r5
    4f5a:	bd70      	pop	{r4, r5, r6, pc}
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    4f5c:	0093      	lsls	r3, r2, #2
    4f5e:	189b      	adds	r3, r3, r2
    4f60:	005a      	lsls	r2, r3, #1
    4f62:	490f      	ldr	r1, [pc, #60]	; (4fa0 <_ZN9CDC_Class9writeDataEPKvl+0x58>)
    4f64:	480f      	ldr	r0, [pc, #60]	; (4fa4 <_ZN9CDC_Class9writeDataEPKvl+0x5c>)
    4f66:	4b10      	ldr	r3, [pc, #64]	; (4fa8 <_ZN9CDC_Class9writeDataEPKvl+0x60>)
    4f68:	4798      	blx	r3
		txReady=false;
    4f6a:	2300      	movs	r3, #0
    4f6c:	7523      	strb	r3, [r4, #20]
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    4f6e:	0029      	movs	r1, r5
    4f70:	0030      	movs	r0, r6
    4f72:	4b0e      	ldr	r3, [pc, #56]	; (4fac <_ZN9CDC_Class9writeDataEPKvl+0x64>)
    4f74:	4798      	blx	r3
    4f76:	0005      	movs	r5, r0
    4f78:	e002      	b.n	4f80 <_ZN9CDC_Class9writeDataEPKvl+0x38>
		while((!txReady)&&(connected)){
    4f7a:	2300      	movs	r3, #0
    4f7c:	2b00      	cmp	r3, #0
    4f7e:	d005      	beq.n	4f8c <_ZN9CDC_Class9writeDataEPKvl+0x44>
    4f80:	7d23      	ldrb	r3, [r4, #20]
    4f82:	2b00      	cmp	r3, #0
    4f84:	d1f9      	bne.n	4f7a <_ZN9CDC_Class9writeDataEPKvl+0x32>
    4f86:	7c23      	ldrb	r3, [r4, #16]
    4f88:	b2db      	uxtb	r3, r3
    4f8a:	e7f7      	b.n	4f7c <_ZN9CDC_Class9writeDataEPKvl+0x34>
			usbTerminalTimer.Stop();
    4f8c:	4c05      	ldr	r4, [pc, #20]	; (4fa4 <_ZN9CDC_Class9writeDataEPKvl+0x5c>)
    4f8e:	0020      	movs	r0, r4
    4f90:	4b07      	ldr	r3, [pc, #28]	; (4fb0 <_ZN9CDC_Class9writeDataEPKvl+0x68>)
    4f92:	4798      	blx	r3
			usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    4f94:	4902      	ldr	r1, [pc, #8]	; (4fa0 <_ZN9CDC_Class9writeDataEPKvl+0x58>)
    4f96:	0020      	movs	r0, r4
    4f98:	4b06      	ldr	r3, [pc, #24]	; (4fb4 <_ZN9CDC_Class9writeDataEPKvl+0x6c>)
    4f9a:	4798      	blx	r3
		return r;
    4f9c:	e7dc      	b.n	4f58 <_ZN9CDC_Class9writeDataEPKvl+0x10>
    4f9e:	46c0      	nop			; (mov r8, r8)
    4fa0:	00004da5 	.word	0x00004da5
    4fa4:	200005f8 	.word	0x200005f8
    4fa8:	0000546d 	.word	0x0000546d
    4fac:	00004499 	.word	0x00004499
    4fb0:	000053dd 	.word	0x000053dd
    4fb4:	000054b5 	.word	0x000054b5

00004fb8 <_ZN9CDC_Class5writeEPKhj>:
{
    4fb8:	b570      	push	{r4, r5, r6, lr}
    4fba:	0004      	movs	r4, r0
    4fbc:	000e      	movs	r6, r1
    4fbe:	0015      	movs	r5, r2
	txReady=false;
    4fc0:	2300      	movs	r3, #0
    4fc2:	7503      	strb	r3, [r0, #20]
 	if (connected){
    4fc4:	7c03      	ldrb	r3, [r0, #16]
    4fc6:	2b00      	cmp	r3, #0
    4fc8:	d102      	bne.n	4fd0 <_ZN9CDC_Class5writeEPKhj+0x18>
 		r=0;
    4fca:	2500      	movs	r5, #0
}
    4fcc:	0028      	movs	r0, r5
    4fce:	bd70      	pop	{r4, r5, r6, pc}
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    4fd0:	0093      	lsls	r3, r2, #2
    4fd2:	189b      	adds	r3, r3, r2
    4fd4:	005a      	lsls	r2, r3, #1
    4fd6:	490e      	ldr	r1, [pc, #56]	; (5010 <_ZN9CDC_Class5writeEPKhj+0x58>)
    4fd8:	480e      	ldr	r0, [pc, #56]	; (5014 <_ZN9CDC_Class5writeEPKhj+0x5c>)
    4fda:	4b0f      	ldr	r3, [pc, #60]	; (5018 <_ZN9CDC_Class5writeEPKhj+0x60>)
    4fdc:	4798      	blx	r3
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    4fde:	0029      	movs	r1, r5
    4fe0:	0030      	movs	r0, r6
    4fe2:	4b0e      	ldr	r3, [pc, #56]	; (501c <_ZN9CDC_Class5writeEPKhj+0x64>)
    4fe4:	4798      	blx	r3
    4fe6:	0005      	movs	r5, r0
    4fe8:	e002      	b.n	4ff0 <_ZN9CDC_Class5writeEPKhj+0x38>
		while((!txReady)&&(connected));
    4fea:	2300      	movs	r3, #0
    4fec:	2b00      	cmp	r3, #0
    4fee:	d005      	beq.n	4ffc <_ZN9CDC_Class5writeEPKhj+0x44>
    4ff0:	7d23      	ldrb	r3, [r4, #20]
    4ff2:	2b00      	cmp	r3, #0
    4ff4:	d1f9      	bne.n	4fea <_ZN9CDC_Class5writeEPKhj+0x32>
    4ff6:	7c23      	ldrb	r3, [r4, #16]
    4ff8:	b2db      	uxtb	r3, r3
    4ffa:	e7f7      	b.n	4fec <_ZN9CDC_Class5writeEPKhj+0x34>
		usbTerminalTimer.Stop();
    4ffc:	4c05      	ldr	r4, [pc, #20]	; (5014 <_ZN9CDC_Class5writeEPKhj+0x5c>)
    4ffe:	0020      	movs	r0, r4
    5000:	4b07      	ldr	r3, [pc, #28]	; (5020 <_ZN9CDC_Class5writeEPKhj+0x68>)
    5002:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    5004:	4902      	ldr	r1, [pc, #8]	; (5010 <_ZN9CDC_Class5writeEPKhj+0x58>)
    5006:	0020      	movs	r0, r4
    5008:	4b06      	ldr	r3, [pc, #24]	; (5024 <_ZN9CDC_Class5writeEPKhj+0x6c>)
    500a:	4798      	blx	r3
    500c:	e7de      	b.n	4fcc <_ZN9CDC_Class5writeEPKhj+0x14>
    500e:	46c0      	nop			; (mov r8, r8)
    5010:	00004da5 	.word	0x00004da5
    5014:	200005f8 	.word	0x200005f8
    5018:	0000546d 	.word	0x0000546d
    501c:	00004499 	.word	0x00004499
    5020:	000053dd 	.word	0x000053dd
    5024:	000054b5 	.word	0x000054b5

00005028 <_ZN9CDC_Class5clearEv>:
void	CDC_Class::clear(void){
    5028:	b510      	push	{r4, lr}
	cdcdf_acm_stop_xfer();
    502a:	4b01      	ldr	r3, [pc, #4]	; (5030 <_ZN9CDC_Class5clearEv+0x8>)
    502c:	4798      	blx	r3
}
    502e:	bd10      	pop	{r4, pc}
    5030:	000043f5 	.word	0x000043f5

00005034 <_ZN9CDC_ClassC1Ev>:
CDC_Class::CDC_Class()
    5034:	b510      	push	{r4, lr}
    5036:	0004      	movs	r4, r0
    Print() : write_error(0) {}
    5038:	2300      	movs	r3, #0
    503a:	6043      	str	r3, [r0, #4]
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
    503c:	4b08      	ldr	r3, [pc, #32]	; (5060 <_ZN9CDC_ClassC1Ev+0x2c>)
    503e:	6003      	str	r3, [r0, #0]
    5040:	23fa      	movs	r3, #250	; 0xfa
    5042:	009b      	lsls	r3, r3, #2
    5044:	6083      	str	r3, [r0, #8]
    5046:	3010      	adds	r0, #16
    5048:	4b06      	ldr	r3, [pc, #24]	; (5064 <_ZN9CDC_ClassC1Ev+0x30>)
    504a:	4798      	blx	r3
    504c:	4b06      	ldr	r3, [pc, #24]	; (5068 <_ZN9CDC_ClassC1Ev+0x34>)
    504e:	3308      	adds	r3, #8
    5050:	6023      	str	r3, [r4, #0]
	_serialPeek=-1;
    5052:	2301      	movs	r3, #1
    5054:	425b      	negs	r3, r3
    5056:	61a3      	str	r3, [r4, #24]
	ptrCDCClass=this;
    5058:	4b04      	ldr	r3, [pc, #16]	; (506c <_ZN9CDC_ClassC1Ev+0x38>)
    505a:	601c      	str	r4, [r3, #0]
} //CDC_Class
    505c:	0020      	movs	r0, r4
    505e:	bd10      	pop	{r4, pc}
    5060:	0000598c 	.word	0x0000598c
    5064:	00005285 	.word	0x00005285
    5068:	000059a8 	.word	0x000059a8
    506c:	2000058c 	.word	0x2000058c

00005070 <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
    5070:	b510      	push	{r4, lr}
    5072:	2801      	cmp	r0, #1
    5074:	d000      	beq.n	5078 <_Z41__static_initialization_and_destruction_0ii+0x8>
    5076:	bd10      	pop	{r4, pc}
    5078:	4b06      	ldr	r3, [pc, #24]	; (5094 <_Z41__static_initialization_and_destruction_0ii+0x24>)
    507a:	4299      	cmp	r1, r3
    507c:	d1fb      	bne.n	5076 <_Z41__static_initialization_and_destruction_0ii+0x6>
    507e:	4c06      	ldr	r4, [pc, #24]	; (5098 <_Z41__static_initialization_and_destruction_0ii+0x28>)
    5080:	3404      	adds	r4, #4
    5082:	0020      	movs	r0, r4
    5084:	4b05      	ldr	r3, [pc, #20]	; (509c <_Z41__static_initialization_and_destruction_0ii+0x2c>)
    5086:	4798      	blx	r3
    5088:	4a05      	ldr	r2, [pc, #20]	; (50a0 <_Z41__static_initialization_and_destruction_0ii+0x30>)
    508a:	4906      	ldr	r1, [pc, #24]	; (50a4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    508c:	0020      	movs	r0, r4
    508e:	4b06      	ldr	r3, [pc, #24]	; (50a8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    5090:	4798      	blx	r3
    5092:	e7f0      	b.n	5076 <_Z41__static_initialization_and_destruction_0ii+0x6>
    5094:	0000ffff 	.word	0x0000ffff
    5098:	2000058c 	.word	0x2000058c
    509c:	00005035 	.word	0x00005035
    50a0:	20000000 	.word	0x20000000
    50a4:	00004e45 	.word	0x00004e45
    50a8:	000054fd 	.word	0x000054fd

000050ac <_ZN9CDC_Class4InitEv>:
void CDC_Class::Init(void){
    50ac:	b570      	push	{r4, r5, r6, lr}
    50ae:	0005      	movs	r5, r0
	OnInit();
    50b0:	3010      	adds	r0, #16
    50b2:	4b06      	ldr	r3, [pc, #24]	; (50cc <_ZN9CDC_Class4InitEv+0x20>)
    50b4:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
    50b6:	4906      	ldr	r1, [pc, #24]	; (50d0 <_ZN9CDC_Class4InitEv+0x24>)
    50b8:	2003      	movs	r0, #3
    50ba:	4b06      	ldr	r3, [pc, #24]	; (50d4 <_ZN9CDC_Class4InitEv+0x28>)
    50bc:	4798      	blx	r3
	delay_ms(100);
    50be:	2064      	movs	r0, #100	; 0x64
    50c0:	4c05      	ldr	r4, [pc, #20]	; (50d8 <_ZN9CDC_Class4InitEv+0x2c>)
    50c2:	47a0      	blx	r4
	if (connected)
    50c4:	7c2b      	ldrb	r3, [r5, #16]
	delay_ms(100);
    50c6:	2064      	movs	r0, #100	; 0x64
    50c8:	47a0      	blx	r4
}
    50ca:	bd70      	pop	{r4, r5, r6, pc}
    50cc:	00005295 	.word	0x00005295
    50d0:	00004e61 	.word	0x00004e61
    50d4:	0000440d 	.word	0x0000440d
    50d8:	00001029 	.word	0x00001029

000050dc <_ZN9CDC_Class9IsEnabledEv>:
bool CDC_Class::IsEnabled(void){
    50dc:	b510      	push	{r4, lr}
	return cdcdf_acm_is_enabled();
    50de:	4b01      	ldr	r3, [pc, #4]	; (50e4 <_ZN9CDC_Class9IsEnabledEv+0x8>)
    50e0:	4798      	blx	r3
}
    50e2:	bd10      	pop	{r4, pc}
    50e4:	0000445d 	.word	0x0000445d

000050e8 <_GLOBAL__sub_I_ptrCDCClass>:
 CDC_Class	usb;
    50e8:	b510      	push	{r4, lr}
    50ea:	4902      	ldr	r1, [pc, #8]	; (50f4 <_GLOBAL__sub_I_ptrCDCClass+0xc>)
    50ec:	2001      	movs	r0, #1
    50ee:	4b02      	ldr	r3, [pc, #8]	; (50f8 <_GLOBAL__sub_I_ptrCDCClass+0x10>)
    50f0:	4798      	blx	r3
    50f2:	bd10      	pop	{r4, pc}
    50f4:	0000ffff 	.word	0x0000ffff
    50f8:	00005071 	.word	0x00005071

000050fc <__cxa_pure_virtual>:

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
		}
    50fc:	4770      	bx	lr

000050fe <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    50fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5100:	0005      	movs	r5, r0
  size_t n = 0;
    5102:	2400      	movs	r4, #0
  while (size--) {
    5104:	1e56      	subs	r6, r2, #1
    5106:	2a00      	cmp	r2, #0
    5108:	d00b      	beq.n	5122 <_ZN5Print5writeEPKhj+0x24>
    if (write(*buffer++)) n++;
    510a:	682b      	ldr	r3, [r5, #0]
    510c:	681b      	ldr	r3, [r3, #0]
    510e:	1c4f      	adds	r7, r1, #1
    5110:	7809      	ldrb	r1, [r1, #0]
    5112:	0028      	movs	r0, r5
    5114:	4798      	blx	r3
    5116:	2800      	cmp	r0, #0
    5118:	d003      	beq.n	5122 <_ZN5Print5writeEPKhj+0x24>
    511a:	3401      	adds	r4, #1
  while (size--) {
    511c:	0032      	movs	r2, r6
    if (write(*buffer++)) n++;
    511e:	0039      	movs	r1, r7
  while (size--) {
    5120:	e7f0      	b.n	5104 <_ZN5Print5writeEPKhj+0x6>
    else break;
  }
  return n;
}
    5122:	0020      	movs	r0, r4
    5124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00005128 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
    5128:	b570      	push	{r4, r5, r6, lr}
    512a:	0005      	movs	r5, r0
    512c:	1e0c      	subs	r4, r1, #0
      if (str == NULL) return 0;
    512e:	d009      	beq.n	5144 <_ZN5Print5printEPKc+0x1c>
      return write((const uint8_t *)str, strlen(str));
    5130:	0008      	movs	r0, r1
    5132:	4b05      	ldr	r3, [pc, #20]	; (5148 <_ZN5Print5printEPKc+0x20>)
    5134:	4798      	blx	r3
    5136:	0002      	movs	r2, r0
    5138:	682b      	ldr	r3, [r5, #0]
    513a:	685b      	ldr	r3, [r3, #4]
    513c:	0021      	movs	r1, r4
    513e:	0028      	movs	r0, r5
    5140:	4798      	blx	r3
  return write(str);
}
    5142:	bd70      	pop	{r4, r5, r6, pc}
      if (str == NULL) return 0;
    5144:	2000      	movs	r0, #0
  return write(str);
    5146:	e7fc      	b.n	5142 <_ZN5Print5printEPKc+0x1a>
    5148:	000056ff 	.word	0x000056ff

0000514c <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
    514c:	b510      	push	{r4, lr}
      return write((const uint8_t *)str, strlen(str));
    514e:	6803      	ldr	r3, [r0, #0]
    5150:	685b      	ldr	r3, [r3, #4]
    5152:	2202      	movs	r2, #2
    5154:	4901      	ldr	r1, [pc, #4]	; (515c <_ZN5Print7printlnEv+0x10>)
    5156:	4798      	blx	r3
  return write("\r\n");
}
    5158:	bd10      	pop	{r4, pc}
    515a:	46c0      	nop			; (mov r8, r8)
    515c:	000059e0 	.word	0x000059e0

00005160 <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
    5160:	b570      	push	{r4, r5, r6, lr}
    5162:	0005      	movs	r5, r0
  size_t n = print(c);
    5164:	4b03      	ldr	r3, [pc, #12]	; (5174 <_ZN5Print7printlnEPKc+0x14>)
    5166:	4798      	blx	r3
    5168:	0004      	movs	r4, r0
  n += println();
    516a:	0028      	movs	r0, r5
    516c:	4b02      	ldr	r3, [pc, #8]	; (5178 <_ZN5Print7printlnEPKc+0x18>)
    516e:	4798      	blx	r3
    5170:	1820      	adds	r0, r4, r0
  return n;
}
    5172:	bd70      	pop	{r4, r5, r6, pc}
    5174:	00005129 	.word	0x00005129
    5178:	0000514d 	.word	0x0000514d

0000517c <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    517c:	b5f0      	push	{r4, r5, r6, r7, lr}
    517e:	46ce      	mov	lr, r9
    5180:	b500      	push	{lr}
    5182:	b08c      	sub	sp, #48	; 0x30
    5184:	4681      	mov	r9, r0
    5186:	000d      	movs	r5, r1
    5188:	0010      	movs	r0, r2
    518a:	9201      	str	r2, [sp, #4]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    518c:	2100      	movs	r1, #0
    518e:	2320      	movs	r3, #32
    5190:	aa03      	add	r2, sp, #12
    5192:	54d1      	strb	r1, [r2, r3]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    5194:	2801      	cmp	r0, #1
    5196:	dd01      	ble.n	519c <_ZN5Print11printNumberEmh+0x20>
    5198:	ae0b      	add	r6, sp, #44	; 0x2c
    519a:	e007      	b.n	51ac <_ZN5Print11printNumberEmh+0x30>
    519c:	230a      	movs	r3, #10
    519e:	9301      	str	r3, [sp, #4]
    51a0:	e7fa      	b.n	5198 <_ZN5Print11printNumberEmh+0x1c>

  do {
    char c = n % base;
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    51a2:	3437      	adds	r4, #55	; 0x37
    51a4:	b2e4      	uxtb	r4, r4
    51a6:	7034      	strb	r4, [r6, #0]
  } while(n);
    51a8:	2d00      	cmp	r5, #0
    51aa:	d012      	beq.n	51d2 <_ZN5Print11printNumberEmh+0x56>
    char c = n % base;
    51ac:	9901      	ldr	r1, [sp, #4]
    51ae:	0028      	movs	r0, r5
    51b0:	4b11      	ldr	r3, [pc, #68]	; (51f8 <_ZN5Print11printNumberEmh+0x7c>)
    51b2:	4798      	blx	r3
    51b4:	000f      	movs	r7, r1
    51b6:	b2cc      	uxtb	r4, r1
    n /= base;
    51b8:	9901      	ldr	r1, [sp, #4]
    51ba:	0028      	movs	r0, r5
    51bc:	4b0f      	ldr	r3, [pc, #60]	; (51fc <_ZN5Print11printNumberEmh+0x80>)
    51be:	4798      	blx	r3
    51c0:	0005      	movs	r5, r0
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    51c2:	3e01      	subs	r6, #1
    51c4:	23ff      	movs	r3, #255	; 0xff
    51c6:	401f      	ands	r7, r3
    51c8:	2f09      	cmp	r7, #9
    51ca:	dcea      	bgt.n	51a2 <_ZN5Print11printNumberEmh+0x26>
    51cc:	3430      	adds	r4, #48	; 0x30
    51ce:	b2e4      	uxtb	r4, r4
    51d0:	e7e9      	b.n	51a6 <_ZN5Print11printNumberEmh+0x2a>
      if (str == NULL) return 0;
    51d2:	2e00      	cmp	r6, #0
    51d4:	d00d      	beq.n	51f2 <_ZN5Print11printNumberEmh+0x76>
      return write((const uint8_t *)str, strlen(str));
    51d6:	0030      	movs	r0, r6
    51d8:	4b09      	ldr	r3, [pc, #36]	; (5200 <_ZN5Print11printNumberEmh+0x84>)
    51da:	4798      	blx	r3
    51dc:	0002      	movs	r2, r0
    51de:	464b      	mov	r3, r9
    51e0:	681b      	ldr	r3, [r3, #0]
    51e2:	685b      	ldr	r3, [r3, #4]
    51e4:	0031      	movs	r1, r6
    51e6:	4648      	mov	r0, r9
    51e8:	4798      	blx	r3

  return write(str);
}
    51ea:	b00c      	add	sp, #48	; 0x30
    51ec:	bc04      	pop	{r2}
    51ee:	4691      	mov	r9, r2
    51f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (str == NULL) return 0;
    51f2:	2000      	movs	r0, #0
  return write(str);
    51f4:	e7f9      	b.n	51ea <_ZN5Print11printNumberEmh+0x6e>
    51f6:	46c0      	nop			; (mov r8, r8)
    51f8:	00005619 	.word	0x00005619
    51fc:	0000550d 	.word	0x0000550d
    5200:	000056ff 	.word	0x000056ff

00005204 <_ZN5Print5printEmi>:
{
    5204:	b510      	push	{r4, lr}
  if (base == 0) return write(n);
    5206:	2a00      	cmp	r2, #0
    5208:	d003      	beq.n	5212 <_ZN5Print5printEmi+0xe>
  else return printNumber(n, base);
    520a:	b2d2      	uxtb	r2, r2
    520c:	4b03      	ldr	r3, [pc, #12]	; (521c <_ZN5Print5printEmi+0x18>)
    520e:	4798      	blx	r3
}
    5210:	bd10      	pop	{r4, pc}
  if (base == 0) return write(n);
    5212:	b2c9      	uxtb	r1, r1
    5214:	6803      	ldr	r3, [r0, #0]
    5216:	681b      	ldr	r3, [r3, #0]
    5218:	4798      	blx	r3
    521a:	e7f9      	b.n	5210 <_ZN5Print5printEmi+0xc>
    521c:	0000517d 	.word	0x0000517d

00005220 <_ZL14USBTimeoutTaskPK10timer_task>:
#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
	ptrSerialTerminalClass->timeout=true;
    5220:	4b03      	ldr	r3, [pc, #12]	; (5230 <_ZL14USBTimeoutTaskPK10timer_task+0x10>)
    5222:	2201      	movs	r2, #1
    5224:	6819      	ldr	r1, [r3, #0]
    5226:	708a      	strb	r2, [r1, #2]
	ptrSerialTerminalClass->plugged=false;
    5228:	681b      	ldr	r3, [r3, #0]
    522a:	2200      	movs	r2, #0
    522c:	705a      	strb	r2, [r3, #1]
}
    522e:	4770      	bx	lr
    5230:	200005f0 	.word	0x200005f0

00005234 <_ZL10USBPluggedv>:

static void USBPlugged(void){
    5234:	b510      	push	{r4, lr}
    5236:	b082      	sub	sp, #8
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    5238:	a801      	add	r0, sp, #4
    523a:	4b0e      	ldr	r3, [pc, #56]	; (5274 <_ZL10USBPluggedv+0x40>)
    523c:	4798      	blx	r3
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    523e:	23c0      	movs	r3, #192	; 0xc0
    5240:	05db      	lsls	r3, r3, #23
    5242:	681c      	ldr	r4, [r3, #0]
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    5244:	4a0c      	ldr	r2, [pc, #48]	; (5278 <_ZL10USBPluggedv+0x44>)
    5246:	6a12      	ldr	r2, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    5248:	691b      	ldr	r3, [r3, #16]

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT_IOBUS, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    524a:	4053      	eors	r3, r2
    524c:	401c      	ands	r4, r3
    524e:	4054      	eors	r4, r2

	CRITICAL_SECTION_LEAVE();
    5250:	a801      	add	r0, sp, #4
    5252:	4b0a      	ldr	r3, [pc, #40]	; (527c <_ZL10USBPluggedv+0x48>)
    5254:	4798      	blx	r3
	if (gpio_get_pin_level(PIN_PA14))
    5256:	0463      	lsls	r3, r4, #17
    5258:	d407      	bmi.n	526a <_ZL10USBPluggedv+0x36>
	{
		ptrSerialTerminalClass->plugged=true;
	} 
	else
	{
		ptrSerialTerminalClass->plugged=false;
    525a:	4a09      	ldr	r2, [pc, #36]	; (5280 <_ZL10USBPluggedv+0x4c>)
    525c:	2300      	movs	r3, #0
    525e:	6811      	ldr	r1, [r2, #0]
    5260:	704b      	strb	r3, [r1, #1]
		ptrSerialTerminalClass->connected=false;
    5262:	6812      	ldr	r2, [r2, #0]
    5264:	7013      	strb	r3, [r2, #0]
	}
	
}
    5266:	b002      	add	sp, #8
    5268:	bd10      	pop	{r4, pc}
		ptrSerialTerminalClass->plugged=true;
    526a:	4b05      	ldr	r3, [pc, #20]	; (5280 <_ZL10USBPluggedv+0x4c>)
    526c:	681b      	ldr	r3, [r3, #0]
    526e:	2201      	movs	r2, #1
    5270:	705a      	strb	r2, [r3, #1]
    5272:	e7f8      	b.n	5266 <_ZL10USBPluggedv+0x32>
    5274:	000040cd 	.word	0x000040cd
    5278:	41004400 	.word	0x41004400
    527c:	000040db 	.word	0x000040db
    5280:	200005f0 	.word	0x200005f0

00005284 <_ZN20SerialTerminal_ClassC1Ev>:


// default constructor
SerialTerminal_Class::SerialTerminal_Class()
{
	ptrSerialTerminalClass=this;
    5284:	4b01      	ldr	r3, [pc, #4]	; (528c <_ZN20SerialTerminal_ClassC1Ev+0x8>)
    5286:	6018      	str	r0, [r3, #0]
	
} //SerialTerminal_Class
    5288:	4770      	bx	lr
    528a:	46c0      	nop			; (mov r8, r8)
    528c:	200005f0 	.word	0x200005f0

00005290 <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
{
} //~SerialTerminal_Class
    5290:	4770      	bx	lr
	...

00005294 <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
    5294:	b530      	push	{r4, r5, lr}
    5296:	b083      	sub	sp, #12
    5298:	0005      	movs	r5, r0
		ext_irq_register(PIN_PA14, USBPlugged);
    529a:	491e      	ldr	r1, [pc, #120]	; (5314 <_ZN20SerialTerminal_Class6OnInitEv+0x80>)
    529c:	200e      	movs	r0, #14
    529e:	4b1e      	ldr	r3, [pc, #120]	; (5318 <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
    52a0:	4798      	blx	r3
		if (usbTerminalTimer.Init())
    52a2:	481e      	ldr	r0, [pc, #120]	; (531c <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
    52a4:	4b1e      	ldr	r3, [pc, #120]	; (5320 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    52a6:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    52a8:	a801      	add	r0, sp, #4
    52aa:	4b1e      	ldr	r3, [pc, #120]	; (5324 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    52ac:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    52ae:	23c0      	movs	r3, #192	; 0xc0
    52b0:	05db      	lsls	r3, r3, #23
    52b2:	681c      	ldr	r4, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    52b4:	4a1c      	ldr	r2, [pc, #112]	; (5328 <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
    52b6:	6a12      	ldr	r2, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    52b8:	691b      	ldr	r3, [r3, #16]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    52ba:	4053      	eors	r3, r2
    52bc:	401c      	ands	r4, r3
    52be:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    52c0:	a801      	add	r0, sp, #4
    52c2:	4b1a      	ldr	r3, [pc, #104]	; (532c <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
    52c4:	4798      	blx	r3
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    52c6:	2380      	movs	r3, #128	; 0x80
    52c8:	01db      	lsls	r3, r3, #7
    52ca:	401c      	ands	r4, r3
    52cc:	1e63      	subs	r3, r4, #1
    52ce:	419c      	sbcs	r4, r3
    52d0:	b2e4      	uxtb	r4, r4
		{
		//	usbTerminalTimer.Start_periodic_task((FUNC_PTR)USBTimerTicks,1);
		}
		vbusDetected=gpio_get_pin_level(PIN_PA14);
    52d2:	70ec      	strb	r4, [r5, #3]
		if (vbusDetected)
    52d4:	2c00      	cmp	r4, #0
    52d6:	d104      	bne.n	52e2 <_ZN20SerialTerminal_Class6OnInitEv+0x4e>
			
			usbTerminalTimer.Stop();
		} 
		else
		{
			connected=false;
    52d8:	2300      	movs	r3, #0
    52da:	702b      	strb	r3, [r5, #0]
			plugged=false;
    52dc:	706b      	strb	r3, [r5, #1]
		}
		
}
    52de:	b003      	add	sp, #12
    52e0:	bd30      	pop	{r4, r5, pc}
			timeout=false;
    52e2:	2300      	movs	r3, #0
    52e4:	70ab      	strb	r3, [r5, #2]
			plugged=true;
    52e6:	3301      	adds	r3, #1
    52e8:	706b      	strb	r3, [r5, #1]
			usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
    52ea:	2296      	movs	r2, #150	; 0x96
    52ec:	0092      	lsls	r2, r2, #2
    52ee:	4910      	ldr	r1, [pc, #64]	; (5330 <_ZN20SerialTerminal_Class6OnInitEv+0x9c>)
    52f0:	480a      	ldr	r0, [pc, #40]	; (531c <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
    52f2:	4b10      	ldr	r3, [pc, #64]	; (5334 <_ZN20SerialTerminal_Class6OnInitEv+0xa0>)
    52f4:	4798      	blx	r3
			while ((!usb.IsEnabled())){
    52f6:	4810      	ldr	r0, [pc, #64]	; (5338 <_ZN20SerialTerminal_Class6OnInitEv+0xa4>)
    52f8:	4b10      	ldr	r3, [pc, #64]	; (533c <_ZN20SerialTerminal_Class6OnInitEv+0xa8>)
    52fa:	4798      	blx	r3
    52fc:	2800      	cmp	r0, #0
    52fe:	d105      	bne.n	530c <_ZN20SerialTerminal_Class6OnInitEv+0x78>
				if (timeout)
    5300:	78ab      	ldrb	r3, [r5, #2]
    5302:	2b00      	cmp	r3, #0
    5304:	d0f7      	beq.n	52f6 <_ZN20SerialTerminal_Class6OnInitEv+0x62>
					connected=false;
    5306:	2300      	movs	r3, #0
    5308:	702b      	strb	r3, [r5, #0]
					return;
    530a:	e7e8      	b.n	52de <_ZN20SerialTerminal_Class6OnInitEv+0x4a>
			usbTerminalTimer.Stop();
    530c:	4803      	ldr	r0, [pc, #12]	; (531c <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
    530e:	4b0c      	ldr	r3, [pc, #48]	; (5340 <_ZN20SerialTerminal_Class6OnInitEv+0xac>)
    5310:	4798      	blx	r3
    5312:	e7e4      	b.n	52de <_ZN20SerialTerminal_Class6OnInitEv+0x4a>
    5314:	00005235 	.word	0x00005235
    5318:	000010c1 	.word	0x000010c1
    531c:	200005f8 	.word	0x200005f8
    5320:	000053bd 	.word	0x000053bd
    5324:	000040cd 	.word	0x000040cd
    5328:	41004400 	.word	0x41004400
    532c:	000040db 	.word	0x000040db
    5330:	00005221 	.word	0x00005221
    5334:	0000546d 	.word	0x0000546d
    5338:	20000590 	.word	0x20000590
    533c:	000050dd 	.word	0x000050dd
    5340:	000053dd 	.word	0x000053dd

00005344 <_ZN17TimerSerial_ClassD1Ev>:
}

// default destructor
TimerSerial_Class::~TimerSerial_Class()
{
	timeout=0;
    5344:	2300      	movs	r3, #0
    5346:	7043      	strb	r3, [r0, #1]
} //~Timer_Class
    5348:	4770      	bx	lr
	...

0000534c <_ZN17TimerSerial_ClassC1EP16timer_descriptor>:
	timer_descr=descr;
    534c:	6101      	str	r1, [r0, #16]
	ptrTimerSerialClass=this;
    534e:	4b04      	ldr	r3, [pc, #16]	; (5360 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x14>)
    5350:	6018      	str	r0, [r3, #0]
	clockCycles=1024;
    5352:	2380      	movs	r3, #128	; 0x80
    5354:	00db      	lsls	r3, r3, #3
    5356:	6183      	str	r3, [r0, #24]
	task->cb=task_cb;
    5358:	6883      	ldr	r3, [r0, #8]
    535a:	4a02      	ldr	r2, [pc, #8]	; (5364 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x18>)
    535c:	60da      	str	r2, [r3, #12]
} //Timer_Class
    535e:	4770      	bx	lr
    5360:	200005f4 	.word	0x200005f4
    5364:	000053f9 	.word	0x000053f9

00005368 <_Z41__static_initialization_and_destruction_0ii>:


}


TimerSerial_Class usbTerminalTimer(&TIMER_USB);
    5368:	b510      	push	{r4, lr}
    536a:	2801      	cmp	r0, #1
    536c:	d000      	beq.n	5370 <_Z41__static_initialization_and_destruction_0ii+0x8>
    536e:	bd10      	pop	{r4, pc}
    5370:	4b07      	ldr	r3, [pc, #28]	; (5390 <_Z41__static_initialization_and_destruction_0ii+0x28>)
    5372:	4299      	cmp	r1, r3
    5374:	d1fb      	bne.n	536e <_Z41__static_initialization_and_destruction_0ii+0x6>
    5376:	4c07      	ldr	r4, [pc, #28]	; (5394 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
    5378:	3404      	adds	r4, #4
    537a:	4907      	ldr	r1, [pc, #28]	; (5398 <_Z41__static_initialization_and_destruction_0ii+0x30>)
    537c:	0020      	movs	r0, r4
    537e:	4b07      	ldr	r3, [pc, #28]	; (539c <_Z41__static_initialization_and_destruction_0ii+0x34>)
    5380:	4798      	blx	r3
    5382:	4a07      	ldr	r2, [pc, #28]	; (53a0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    5384:	4907      	ldr	r1, [pc, #28]	; (53a4 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    5386:	0020      	movs	r0, r4
    5388:	4b07      	ldr	r3, [pc, #28]	; (53a8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    538a:	4798      	blx	r3
    538c:	e7ef      	b.n	536e <_Z41__static_initialization_and_destruction_0ii+0x6>
    538e:	46c0      	nop			; (mov r8, r8)
    5390:	0000ffff 	.word	0x0000ffff
    5394:	200005f4 	.word	0x200005f4
    5398:	20000728 	.word	0x20000728
    539c:	0000534d 	.word	0x0000534d
    53a0:	20000000 	.word	0x20000000
    53a4:	00005345 	.word	0x00005345
    53a8:	000054fd 	.word	0x000054fd

000053ac <_ZN17TimerSerial_Class5StartEv>:
int32_t TimerSerial_Class::Start(void){
    53ac:	b510      	push	{r4, lr}
	status=timer_start(timer_descr);
    53ae:	6900      	ldr	r0, [r0, #16]
    53b0:	4b01      	ldr	r3, [pc, #4]	; (53b8 <_ZN17TimerSerial_Class5StartEv+0xc>)
    53b2:	4798      	blx	r3
}
    53b4:	bd10      	pop	{r4, pc}
    53b6:	46c0      	nop			; (mov r8, r8)
    53b8:	00001479 	.word	0x00001479

000053bc <_ZN17TimerSerial_Class4InitEv>:
bool TimerSerial_Class::Init(void){
    53bc:	b510      	push	{r4, lr}
    53be:	0004      	movs	r4, r0
	ticks=0;
    53c0:	2300      	movs	r3, #0
    53c2:	60c3      	str	r3, [r0, #12]
	isOK=Start()==0;
    53c4:	4b04      	ldr	r3, [pc, #16]	; (53d8 <_ZN17TimerSerial_Class4InitEv+0x1c>)
    53c6:	4798      	blx	r3
    53c8:	4243      	negs	r3, r0
    53ca:	4158      	adcs	r0, r3
    53cc:	b2c0      	uxtb	r0, r0
    53ce:	70a0      	strb	r0, [r4, #2]
	return isOK;
    53d0:	78a0      	ldrb	r0, [r4, #2]
    53d2:	b2c0      	uxtb	r0, r0
}
    53d4:	bd10      	pop	{r4, pc}
    53d6:	46c0      	nop			; (mov r8, r8)
    53d8:	000053ad 	.word	0x000053ad

000053dc <_ZN17TimerSerial_Class4StopEv>:
int32_t TimerSerial_Class::Stop( void){
    53dc:	b510      	push	{r4, lr}
    53de:	0004      	movs	r4, r0
	status=timer_stop(timer_descr);
    53e0:	6900      	ldr	r0, [r0, #16]
    53e2:	4b02      	ldr	r3, [pc, #8]	; (53ec <_ZN17TimerSerial_Class4StopEv+0x10>)
    53e4:	4798      	blx	r3
	timeout=0;
    53e6:	2300      	movs	r3, #0
    53e8:	7063      	strb	r3, [r4, #1]
}
    53ea:	bd10      	pop	{r4, pc}
    53ec:	000014b5 	.word	0x000014b5

000053f0 <_ZN17TimerSerial_Class10setTimeoutEv>:
	timeout=1;
    53f0:	2301      	movs	r3, #1
    53f2:	7043      	strb	r3, [r0, #1]
}
    53f4:	4770      	bx	lr
	...

000053f8 <_ZL7task_cbPK10timer_task>:
{
    53f8:	b510      	push	{r4, lr}
	ptrTimerSerialClass->setTimeout();
    53fa:	4b02      	ldr	r3, [pc, #8]	; (5404 <_ZL7task_cbPK10timer_task+0xc>)
    53fc:	6818      	ldr	r0, [r3, #0]
    53fe:	4b02      	ldr	r3, [pc, #8]	; (5408 <_ZL7task_cbPK10timer_task+0x10>)
    5400:	4798      	blx	r3
}
    5402:	bd10      	pop	{r4, pc}
    5404:	200005f4 	.word	0x200005f4
    5408:	000053f1 	.word	0x000053f1

0000540c <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv>:
void	TimerSerial_Class::ChooseAvailableTimerTask(void){
    540c:	b510      	push	{r4, lr}
	for ( uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    540e:	2300      	movs	r3, #0
    5410:	2b03      	cmp	r3, #3
    5412:	dc0f      	bgt.n	5434 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x28>
			if (taskSerialArray[ii].cb==NULL)
    5414:	009a      	lsls	r2, r3, #2
    5416:	18d2      	adds	r2, r2, r3
    5418:	0091      	lsls	r1, r2, #2
    541a:	4a08      	ldr	r2, [pc, #32]	; (543c <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x30>)
    541c:	1852      	adds	r2, r2, r1
    541e:	6b12      	ldr	r2, [r2, #48]	; 0x30
    5420:	2a00      	cmp	r2, #0
    5422:	d002      	beq.n	542a <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x1e>
	for ( uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    5424:	3301      	adds	r3, #1
    5426:	b2db      	uxtb	r3, r3
    5428:	e7f2      	b.n	5410 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x4>
				task=&taskSerialArray[ii];
    542a:	4b04      	ldr	r3, [pc, #16]	; (543c <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x30>)
    542c:	3324      	adds	r3, #36	; 0x24
    542e:	185b      	adds	r3, r3, r1
    5430:	6083      	str	r3, [r0, #8]
			return;
    5432:	e002      	b.n	543a <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x2e>
	task=&taskSerialArray[0];
    5434:	4b01      	ldr	r3, [pc, #4]	; (543c <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x30>)
    5436:	3324      	adds	r3, #36	; 0x24
    5438:	6083      	str	r3, [r0, #8]
}
    543a:	bd10      	pop	{r4, pc}
    543c:	200005f4 	.word	0x200005f4

00005440 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode>:
int32_t TimerSerial_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    5440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5442:	0004      	movs	r4, r0
    5444:	000e      	movs	r6, r1
    5446:	0017      	movs	r7, r2
    5448:	001d      	movs	r5, r3
	ChooseAvailableTimerTask();
    544a:	4b06      	ldr	r3, [pc, #24]	; (5464 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x24>)
    544c:	4798      	blx	r3
	task->interval = interval;
    544e:	68a3      	ldr	r3, [r4, #8]
    5450:	609f      	str	r7, [r3, #8]
	task->cb       = (timer_cb_t)func;
    5452:	68a3      	ldr	r3, [r4, #8]
    5454:	60de      	str	r6, [r3, #12]
	task->mode     = modeTask;
    5456:	68a3      	ldr	r3, [r4, #8]
    5458:	741d      	strb	r5, [r3, #16]
	status=timer_add_task(timer_descr, task);
    545a:	6920      	ldr	r0, [r4, #16]
    545c:	68a1      	ldr	r1, [r4, #8]
    545e:	4b02      	ldr	r3, [pc, #8]	; (5468 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x28>)
    5460:	4798      	blx	r3
}
    5462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5464:	0000540d 	.word	0x0000540d
    5468:	000014f1 	.word	0x000014f1

0000546c <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
    546c:	b570      	push	{r4, r5, r6, lr}
    546e:	0004      	movs	r4, r0
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    5470:	2300      	movs	r3, #0
    5472:	4d03      	ldr	r5, [pc, #12]	; (5480 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x14>)
    5474:	47a8      	blx	r5
	status=timer_start(timer_descr);
    5476:	6920      	ldr	r0, [r4, #16]
    5478:	4b02      	ldr	r3, [pc, #8]	; (5484 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x18>)
    547a:	4798      	blx	r3
}
    547c:	bd70      	pop	{r4, r5, r6, pc}
    547e:	46c0      	nop			; (mov r8, r8)
    5480:	00005441 	.word	0x00005441
    5484:	00001479 	.word	0x00001479

00005488 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE>:
void	TimerSerial_Class::GetTaskFunction(FUNC_PTR func){
    5488:	b530      	push	{r4, r5, lr}
	for (uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    548a:	2300      	movs	r3, #0
    548c:	2b03      	cmp	r3, #3
    548e:	dc0e      	bgt.n	54ae <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x26>
		if (taskSerialArray[ii].cb==(timer_cb_t)func)
    5490:	009a      	lsls	r2, r3, #2
    5492:	18d2      	adds	r2, r2, r3
    5494:	0094      	lsls	r4, r2, #2
    5496:	4a06      	ldr	r2, [pc, #24]	; (54b0 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x28>)
    5498:	1912      	adds	r2, r2, r4
    549a:	6b12      	ldr	r2, [r2, #48]	; 0x30
    549c:	428a      	cmp	r2, r1
    549e:	d002      	beq.n	54a6 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x1e>
	for (uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    54a0:	3301      	adds	r3, #1
    54a2:	b2db      	uxtb	r3, r3
    54a4:	e7f2      	b.n	548c <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x4>
			task=&taskSerialArray[ii];
    54a6:	4b02      	ldr	r3, [pc, #8]	; (54b0 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x28>)
    54a8:	3324      	adds	r3, #36	; 0x24
    54aa:	191b      	adds	r3, r3, r4
    54ac:	6083      	str	r3, [r0, #8]
}
    54ae:	bd30      	pop	{r4, r5, pc}
    54b0:	200005f4 	.word	0x200005f4

000054b4 <_ZN17TimerSerial_Class11Remove_taskEPFvvE>:
void	TimerSerial_Class::Remove_task(FUNC_PTR func){
    54b4:	b510      	push	{r4, lr}
    54b6:	0004      	movs	r4, r0
	GetTaskFunction(func);
    54b8:	4b08      	ldr	r3, [pc, #32]	; (54dc <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x28>)
    54ba:	4798      	blx	r3
	if (is_list_element(&timer_descr->tasks, task))
    54bc:	6920      	ldr	r0, [r4, #16]
    54be:	3014      	adds	r0, #20
    54c0:	68a1      	ldr	r1, [r4, #8]
    54c2:	4b07      	ldr	r3, [pc, #28]	; (54e0 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x2c>)
    54c4:	4798      	blx	r3
    54c6:	2800      	cmp	r0, #0
    54c8:	d103      	bne.n	54d2 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x1e>
	task->cb=NULL;
    54ca:	68a3      	ldr	r3, [r4, #8]
    54cc:	2200      	movs	r2, #0
    54ce:	60da      	str	r2, [r3, #12]
}
    54d0:	bd10      	pop	{r4, pc}
		timer_remove_task(timer_descr, task);
    54d2:	68a1      	ldr	r1, [r4, #8]
    54d4:	6920      	ldr	r0, [r4, #16]
    54d6:	4b03      	ldr	r3, [pc, #12]	; (54e4 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x30>)
    54d8:	4798      	blx	r3
    54da:	e7f6      	b.n	54ca <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x16>
    54dc:	00005489 	.word	0x00005489
    54e0:	00001e31 	.word	0x00001e31
    54e4:	000015a1 	.word	0x000015a1

000054e8 <_GLOBAL__sub_I_ptrTimerSerialClass>:
TimerSerial_Class usbTerminalTimer(&TIMER_USB);
    54e8:	b510      	push	{r4, lr}
    54ea:	4902      	ldr	r1, [pc, #8]	; (54f4 <_GLOBAL__sub_I_ptrTimerSerialClass+0xc>)
    54ec:	2001      	movs	r0, #1
    54ee:	4b02      	ldr	r3, [pc, #8]	; (54f8 <_GLOBAL__sub_I_ptrTimerSerialClass+0x10>)
    54f0:	4798      	blx	r3
    54f2:	bd10      	pop	{r4, pc}
    54f4:	0000ffff 	.word	0x0000ffff
    54f8:	00005369 	.word	0x00005369

000054fc <__aeabi_atexit>:
    54fc:	000b      	movs	r3, r1
    54fe:	b510      	push	{r4, lr}
    5500:	0001      	movs	r1, r0
    5502:	0018      	movs	r0, r3
    5504:	f000 f8b8 	bl	5678 <__cxa_atexit>
    5508:	bd10      	pop	{r4, pc}
	...

0000550c <__udivsi3>:
    550c:	2200      	movs	r2, #0
    550e:	0843      	lsrs	r3, r0, #1
    5510:	428b      	cmp	r3, r1
    5512:	d374      	bcc.n	55fe <__udivsi3+0xf2>
    5514:	0903      	lsrs	r3, r0, #4
    5516:	428b      	cmp	r3, r1
    5518:	d35f      	bcc.n	55da <__udivsi3+0xce>
    551a:	0a03      	lsrs	r3, r0, #8
    551c:	428b      	cmp	r3, r1
    551e:	d344      	bcc.n	55aa <__udivsi3+0x9e>
    5520:	0b03      	lsrs	r3, r0, #12
    5522:	428b      	cmp	r3, r1
    5524:	d328      	bcc.n	5578 <__udivsi3+0x6c>
    5526:	0c03      	lsrs	r3, r0, #16
    5528:	428b      	cmp	r3, r1
    552a:	d30d      	bcc.n	5548 <__udivsi3+0x3c>
    552c:	22ff      	movs	r2, #255	; 0xff
    552e:	0209      	lsls	r1, r1, #8
    5530:	ba12      	rev	r2, r2
    5532:	0c03      	lsrs	r3, r0, #16
    5534:	428b      	cmp	r3, r1
    5536:	d302      	bcc.n	553e <__udivsi3+0x32>
    5538:	1212      	asrs	r2, r2, #8
    553a:	0209      	lsls	r1, r1, #8
    553c:	d065      	beq.n	560a <__udivsi3+0xfe>
    553e:	0b03      	lsrs	r3, r0, #12
    5540:	428b      	cmp	r3, r1
    5542:	d319      	bcc.n	5578 <__udivsi3+0x6c>
    5544:	e000      	b.n	5548 <__udivsi3+0x3c>
    5546:	0a09      	lsrs	r1, r1, #8
    5548:	0bc3      	lsrs	r3, r0, #15
    554a:	428b      	cmp	r3, r1
    554c:	d301      	bcc.n	5552 <__udivsi3+0x46>
    554e:	03cb      	lsls	r3, r1, #15
    5550:	1ac0      	subs	r0, r0, r3
    5552:	4152      	adcs	r2, r2
    5554:	0b83      	lsrs	r3, r0, #14
    5556:	428b      	cmp	r3, r1
    5558:	d301      	bcc.n	555e <__udivsi3+0x52>
    555a:	038b      	lsls	r3, r1, #14
    555c:	1ac0      	subs	r0, r0, r3
    555e:	4152      	adcs	r2, r2
    5560:	0b43      	lsrs	r3, r0, #13
    5562:	428b      	cmp	r3, r1
    5564:	d301      	bcc.n	556a <__udivsi3+0x5e>
    5566:	034b      	lsls	r3, r1, #13
    5568:	1ac0      	subs	r0, r0, r3
    556a:	4152      	adcs	r2, r2
    556c:	0b03      	lsrs	r3, r0, #12
    556e:	428b      	cmp	r3, r1
    5570:	d301      	bcc.n	5576 <__udivsi3+0x6a>
    5572:	030b      	lsls	r3, r1, #12
    5574:	1ac0      	subs	r0, r0, r3
    5576:	4152      	adcs	r2, r2
    5578:	0ac3      	lsrs	r3, r0, #11
    557a:	428b      	cmp	r3, r1
    557c:	d301      	bcc.n	5582 <__udivsi3+0x76>
    557e:	02cb      	lsls	r3, r1, #11
    5580:	1ac0      	subs	r0, r0, r3
    5582:	4152      	adcs	r2, r2
    5584:	0a83      	lsrs	r3, r0, #10
    5586:	428b      	cmp	r3, r1
    5588:	d301      	bcc.n	558e <__udivsi3+0x82>
    558a:	028b      	lsls	r3, r1, #10
    558c:	1ac0      	subs	r0, r0, r3
    558e:	4152      	adcs	r2, r2
    5590:	0a43      	lsrs	r3, r0, #9
    5592:	428b      	cmp	r3, r1
    5594:	d301      	bcc.n	559a <__udivsi3+0x8e>
    5596:	024b      	lsls	r3, r1, #9
    5598:	1ac0      	subs	r0, r0, r3
    559a:	4152      	adcs	r2, r2
    559c:	0a03      	lsrs	r3, r0, #8
    559e:	428b      	cmp	r3, r1
    55a0:	d301      	bcc.n	55a6 <__udivsi3+0x9a>
    55a2:	020b      	lsls	r3, r1, #8
    55a4:	1ac0      	subs	r0, r0, r3
    55a6:	4152      	adcs	r2, r2
    55a8:	d2cd      	bcs.n	5546 <__udivsi3+0x3a>
    55aa:	09c3      	lsrs	r3, r0, #7
    55ac:	428b      	cmp	r3, r1
    55ae:	d301      	bcc.n	55b4 <__udivsi3+0xa8>
    55b0:	01cb      	lsls	r3, r1, #7
    55b2:	1ac0      	subs	r0, r0, r3
    55b4:	4152      	adcs	r2, r2
    55b6:	0983      	lsrs	r3, r0, #6
    55b8:	428b      	cmp	r3, r1
    55ba:	d301      	bcc.n	55c0 <__udivsi3+0xb4>
    55bc:	018b      	lsls	r3, r1, #6
    55be:	1ac0      	subs	r0, r0, r3
    55c0:	4152      	adcs	r2, r2
    55c2:	0943      	lsrs	r3, r0, #5
    55c4:	428b      	cmp	r3, r1
    55c6:	d301      	bcc.n	55cc <__udivsi3+0xc0>
    55c8:	014b      	lsls	r3, r1, #5
    55ca:	1ac0      	subs	r0, r0, r3
    55cc:	4152      	adcs	r2, r2
    55ce:	0903      	lsrs	r3, r0, #4
    55d0:	428b      	cmp	r3, r1
    55d2:	d301      	bcc.n	55d8 <__udivsi3+0xcc>
    55d4:	010b      	lsls	r3, r1, #4
    55d6:	1ac0      	subs	r0, r0, r3
    55d8:	4152      	adcs	r2, r2
    55da:	08c3      	lsrs	r3, r0, #3
    55dc:	428b      	cmp	r3, r1
    55de:	d301      	bcc.n	55e4 <__udivsi3+0xd8>
    55e0:	00cb      	lsls	r3, r1, #3
    55e2:	1ac0      	subs	r0, r0, r3
    55e4:	4152      	adcs	r2, r2
    55e6:	0883      	lsrs	r3, r0, #2
    55e8:	428b      	cmp	r3, r1
    55ea:	d301      	bcc.n	55f0 <__udivsi3+0xe4>
    55ec:	008b      	lsls	r3, r1, #2
    55ee:	1ac0      	subs	r0, r0, r3
    55f0:	4152      	adcs	r2, r2
    55f2:	0843      	lsrs	r3, r0, #1
    55f4:	428b      	cmp	r3, r1
    55f6:	d301      	bcc.n	55fc <__udivsi3+0xf0>
    55f8:	004b      	lsls	r3, r1, #1
    55fa:	1ac0      	subs	r0, r0, r3
    55fc:	4152      	adcs	r2, r2
    55fe:	1a41      	subs	r1, r0, r1
    5600:	d200      	bcs.n	5604 <__udivsi3+0xf8>
    5602:	4601      	mov	r1, r0
    5604:	4152      	adcs	r2, r2
    5606:	4610      	mov	r0, r2
    5608:	4770      	bx	lr
    560a:	e7ff      	b.n	560c <__udivsi3+0x100>
    560c:	b501      	push	{r0, lr}
    560e:	2000      	movs	r0, #0
    5610:	f000 f806 	bl	5620 <__aeabi_idiv0>
    5614:	bd02      	pop	{r1, pc}
    5616:	46c0      	nop			; (mov r8, r8)

00005618 <__aeabi_uidivmod>:
    5618:	2900      	cmp	r1, #0
    561a:	d0f7      	beq.n	560c <__udivsi3+0x100>
    561c:	e776      	b.n	550c <__udivsi3>
    561e:	4770      	bx	lr

00005620 <__aeabi_idiv0>:
    5620:	4770      	bx	lr
    5622:	46c0      	nop			; (mov r8, r8)

00005624 <__ffssi2>:
    5624:	b510      	push	{r4, lr}
    5626:	2300      	movs	r3, #0
    5628:	2800      	cmp	r0, #0
    562a:	d002      	beq.n	5632 <__ffssi2+0xe>
    562c:	f000 f804 	bl	5638 <__ctzsi2>
    5630:	1c43      	adds	r3, r0, #1
    5632:	0018      	movs	r0, r3
    5634:	bd10      	pop	{r4, pc}
    5636:	46c0      	nop			; (mov r8, r8)

00005638 <__ctzsi2>:
    5638:	4241      	negs	r1, r0
    563a:	4008      	ands	r0, r1
    563c:	211c      	movs	r1, #28
    563e:	2301      	movs	r3, #1
    5640:	041b      	lsls	r3, r3, #16
    5642:	4298      	cmp	r0, r3
    5644:	d301      	bcc.n	564a <__ctzsi2+0x12>
    5646:	0c00      	lsrs	r0, r0, #16
    5648:	3910      	subs	r1, #16
    564a:	0a1b      	lsrs	r3, r3, #8
    564c:	4298      	cmp	r0, r3
    564e:	d301      	bcc.n	5654 <__ctzsi2+0x1c>
    5650:	0a00      	lsrs	r0, r0, #8
    5652:	3908      	subs	r1, #8
    5654:	091b      	lsrs	r3, r3, #4
    5656:	4298      	cmp	r0, r3
    5658:	d301      	bcc.n	565e <__ctzsi2+0x26>
    565a:	0900      	lsrs	r0, r0, #4
    565c:	3904      	subs	r1, #4
    565e:	a202      	add	r2, pc, #8	; (adr r2, 5668 <__ctzsi2+0x30>)
    5660:	5c10      	ldrb	r0, [r2, r0]
    5662:	1a40      	subs	r0, r0, r1
    5664:	4770      	bx	lr
    5666:	46c0      	nop			; (mov r8, r8)
    5668:	1d1d1c1b 	.word	0x1d1d1c1b
    566c:	1e1e1e1e 	.word	0x1e1e1e1e
    5670:	1f1f1f1f 	.word	0x1f1f1f1f
    5674:	1f1f1f1f 	.word	0x1f1f1f1f

00005678 <__cxa_atexit>:
    5678:	b570      	push	{r4, r5, r6, lr}
    567a:	4c05      	ldr	r4, [pc, #20]	; (5690 <__cxa_atexit+0x18>)
    567c:	0005      	movs	r5, r0
    567e:	0013      	movs	r3, r2
    5680:	1e20      	subs	r0, r4, #0
    5682:	d004      	beq.n	568e <__cxa_atexit+0x16>
    5684:	000a      	movs	r2, r1
    5686:	2002      	movs	r0, #2
    5688:	0029      	movs	r1, r5
    568a:	e000      	b.n	568e <__cxa_atexit+0x16>
    568c:	bf00      	nop
    568e:	bd70      	pop	{r4, r5, r6, pc}
    5690:	00000000 	.word	0x00000000

00005694 <__libc_init_array>:
    5694:	b570      	push	{r4, r5, r6, lr}
    5696:	2600      	movs	r6, #0
    5698:	4d0c      	ldr	r5, [pc, #48]	; (56cc <__libc_init_array+0x38>)
    569a:	4c0d      	ldr	r4, [pc, #52]	; (56d0 <__libc_init_array+0x3c>)
    569c:	1b64      	subs	r4, r4, r5
    569e:	10a4      	asrs	r4, r4, #2
    56a0:	42a6      	cmp	r6, r4
    56a2:	d109      	bne.n	56b8 <__libc_init_array+0x24>
    56a4:	2600      	movs	r6, #0
    56a6:	f000 f9a3 	bl	59f0 <_init>
    56aa:	4d0a      	ldr	r5, [pc, #40]	; (56d4 <__libc_init_array+0x40>)
    56ac:	4c0a      	ldr	r4, [pc, #40]	; (56d8 <__libc_init_array+0x44>)
    56ae:	1b64      	subs	r4, r4, r5
    56b0:	10a4      	asrs	r4, r4, #2
    56b2:	42a6      	cmp	r6, r4
    56b4:	d105      	bne.n	56c2 <__libc_init_array+0x2e>
    56b6:	bd70      	pop	{r4, r5, r6, pc}
    56b8:	00b3      	lsls	r3, r6, #2
    56ba:	58eb      	ldr	r3, [r5, r3]
    56bc:	4798      	blx	r3
    56be:	3601      	adds	r6, #1
    56c0:	e7ee      	b.n	56a0 <__libc_init_array+0xc>
    56c2:	00b3      	lsls	r3, r6, #2
    56c4:	58eb      	ldr	r3, [r5, r3]
    56c6:	4798      	blx	r3
    56c8:	3601      	adds	r6, #1
    56ca:	e7f2      	b.n	56b2 <__libc_init_array+0x1e>
    56cc:	000059fc 	.word	0x000059fc
    56d0:	000059fc 	.word	0x000059fc
    56d4:	000059fc 	.word	0x000059fc
    56d8:	00005a10 	.word	0x00005a10

000056dc <memcpy>:
    56dc:	2300      	movs	r3, #0
    56de:	b510      	push	{r4, lr}
    56e0:	429a      	cmp	r2, r3
    56e2:	d100      	bne.n	56e6 <memcpy+0xa>
    56e4:	bd10      	pop	{r4, pc}
    56e6:	5ccc      	ldrb	r4, [r1, r3]
    56e8:	54c4      	strb	r4, [r0, r3]
    56ea:	3301      	adds	r3, #1
    56ec:	e7f8      	b.n	56e0 <memcpy+0x4>

000056ee <memset>:
    56ee:	0003      	movs	r3, r0
    56f0:	1882      	adds	r2, r0, r2
    56f2:	4293      	cmp	r3, r2
    56f4:	d100      	bne.n	56f8 <memset+0xa>
    56f6:	4770      	bx	lr
    56f8:	7019      	strb	r1, [r3, #0]
    56fa:	3301      	adds	r3, #1
    56fc:	e7f9      	b.n	56f2 <memset+0x4>

000056fe <strlen>:
    56fe:	2300      	movs	r3, #0
    5700:	5cc2      	ldrb	r2, [r0, r3]
    5702:	3301      	adds	r3, #1
    5704:	2a00      	cmp	r2, #0
    5706:	d1fb      	bne.n	5700 <strlen+0x2>
    5708:	1e58      	subs	r0, r3, #1
    570a:	4770      	bx	lr
    570c:	74696e69 	.word	0x74696e69
    5710:	69746169 	.word	0x69746169
    5714:	5a20676e 	.word	0x5a20676e
    5718:	53204443 	.word	0x53204443
    571c:	6f736e65 	.word	0x6f736e65
    5720:	00000072 	.word	0x00000072
    5724:	656e6f74 	.word	0x656e6f74
    5728:	0000203a 	.word	0x0000203a
    572c:	00000a0d 	.word	0x00000a0d
    5730:	682f2e2e 	.word	0x682f2e2e
    5734:	732f6c61 	.word	0x732f6c61
    5738:	682f6372 	.word	0x682f6372
    573c:	645f6c61 	.word	0x645f6c61
    5740:	735f6361 	.word	0x735f6361
    5744:	2e636e79 	.word	0x2e636e79
    5748:	00000063 	.word	0x00000063
    574c:	682f2e2e 	.word	0x682f2e2e
    5750:	732f6c61 	.word	0x732f6c61
    5754:	682f6372 	.word	0x682f6372
    5758:	695f6c61 	.word	0x695f6c61
    575c:	00632e6f 	.word	0x00632e6f
    5760:	682f2e2e 	.word	0x682f2e2e
    5764:	732f6c61 	.word	0x732f6c61
    5768:	682f6372 	.word	0x682f6372
    576c:	735f6c61 	.word	0x735f6c61
    5770:	6d5f6970 	.word	0x6d5f6970
    5774:	6e79735f 	.word	0x6e79735f
    5778:	00632e63 	.word	0x00632e63
    577c:	682f2e2e 	.word	0x682f2e2e
    5780:	732f6c61 	.word	0x732f6c61
    5784:	682f6372 	.word	0x682f6372
    5788:	745f6c61 	.word	0x745f6c61
    578c:	72656d69 	.word	0x72656d69
    5790:	0000632e 	.word	0x0000632e
    5794:	682f2e2e 	.word	0x682f2e2e
    5798:	732f6c61 	.word	0x732f6c61
    579c:	682f6372 	.word	0x682f6372
    57a0:	755f6c61 	.word	0x755f6c61
    57a4:	74726173 	.word	0x74726173
    57a8:	7973615f 	.word	0x7973615f
    57ac:	632e636e 	.word	0x632e636e
    57b0:	00000000 	.word	0x00000000
    57b4:	682f2e2e 	.word	0x682f2e2e
    57b8:	752f6c61 	.word	0x752f6c61
    57bc:	736c6974 	.word	0x736c6974
    57c0:	6372732f 	.word	0x6372732f
    57c4:	6974752f 	.word	0x6974752f
    57c8:	6c5f736c 	.word	0x6c5f736c
    57cc:	2e747369 	.word	0x2e747369
    57d0:	00000063 	.word	0x00000063
    57d4:	682f2e2e 	.word	0x682f2e2e
    57d8:	752f6c61 	.word	0x752f6c61
    57dc:	736c6974 	.word	0x736c6974
    57e0:	6372732f 	.word	0x6372732f
    57e4:	6974752f 	.word	0x6974752f
    57e8:	725f736c 	.word	0x725f736c
    57ec:	62676e69 	.word	0x62676e69
    57f0:	65666675 	.word	0x65666675
    57f4:	00632e72 	.word	0x00632e72
    57f8:	682f2e2e 	.word	0x682f2e2e
    57fc:	642f6c70 	.word	0x642f6c70
    5800:	682f6361 	.word	0x682f6361
    5804:	645f6c70 	.word	0x645f6c70
    5808:	632e6361 	.word	0x632e6361
    580c:	00000000 	.word	0x00000000

00005810 <_map>:
    5810:	0000000e 0000000e 682f2e2e 652f6c70     ........../hpl/e
    5820:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....

00005830 <_usarts>:
    5830:	00000003 40100004 00030000 0000ff2e     .......@........
    5840:	00000000                                ....

00005844 <_i2cms>:
	...

0000585c <_i2css>:
	...

0000586c <sercomspi_regs>:
    586c:	0020000c 00020000 00000000 01ff003b     .. .........;...
    587c:	20000c00 02000000 00000000 ff000500     ... ............
    588c:	000c0101 00000030 00000002 00170000     ....0...........
    589c:	000201ff 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    58ac:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..

000058bc <_tcs>:
    58bc:	03680003 00000000 00000000 00001770     ..h.........p...
    58cc:	00000000 03680004 00000000 00000000     ......h.........
    58dc:	0000007d 00000000 682f2e2e 742f6c70     }........./hpl/t
    58ec:	70682f63 63745f6c 0000632e 00004a25     c/hpl_tc.c..%J..
    58fc:	00000804                                ....

00005900 <_usb_ep_cfgs>:
    5900:	20000488 00000000 00000040 20000448     ... ....@...H.. 
    5910:	20000408 00400040 200003c8 20000388     ... @.@.... ... 
    5920:	00400040 20000348 20000308 00400040     @.@.H.. ... @.@.
    5930:	200002c8 00000000 00000040 000048fa     ... ....@....H..
    5940:	000048d6 000048fa 000048dc 000048fa     .H...H...H...H..
    5950:	000048a6 000048fa 000048fa 000048fa     .H...H...H...H..
    5960:	000048b8 000048fa 000048e2 752f2e2e     .H...H...H..../u
    5970:	642f6273 63697665 73752f65 2e636462     sb/device/usbdc.
    5980:	00000063                                c...

00005984 <_ZTV6Stream>:
	...
    598c:	000050fd 000050ff 00004d9d 00004da1     .P...P...M...M..
    599c:	000050fd 000050fd 000050fd              .P...P...P..

000059a8 <_ZTV9CDC_Class>:
	...
    59b0:	00004e0b 00004fb9 00004d9d 00004f39     .N...O...M..9O..
    59c0:	00004e33 00004ea1 00004de1 00004ec9     3N...N...M...N..
    59d0:	00005029 00004f49 2e257830 00005838     )P..IO..0x%.8X..
    59e0:	00000a0d 006e616e 00666e69 0066766f     ....nan.inf.ovf.

000059f0 <_init>:
    59f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    59f2:	46c0      	nop			; (mov r8, r8)
    59f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    59f6:	bc08      	pop	{r3}
    59f8:	469e      	mov	lr, r3
    59fa:	4770      	bx	lr

000059fc <__init_array_start>:
    59fc:	000000dd 	.word	0x000000dd
    5a00:	000002d5 	.word	0x000002d5
    5a04:	000007cd 	.word	0x000007cd
    5a08:	000050e9 	.word	0x000050e9
    5a0c:	000054e9 	.word	0x000054e9

00005a10 <_fini>:
    5a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5a12:	46c0      	nop			; (mov r8, r8)
    5a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5a16:	bc08      	pop	{r3}
    5a18:	469e      	mov	lr, r3
    5a1a:	4770      	bx	lr

00005a1c <__fini_array_start>:
    5a1c:	000000b5 	.word	0x000000b5
