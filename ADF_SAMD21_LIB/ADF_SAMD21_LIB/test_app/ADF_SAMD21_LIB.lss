
ADF_SAMD21_LIB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000127fc  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000127fc  000127fc  000227fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000a30  20000000  00012804  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000088c  20000a30  00013238  00030a30  2**3
                  ALLOC
  4 .stack        00002004  200012bc  00013ac4  00030a30  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00030a30  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00030a58  2**0
                  CONTENTS, READONLY
  7 .debug_info   0002df6f  00000000  00000000  00030ab1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000041b4  00000000  00000000  0005ea20  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000a597  00000000  00000000  00062bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001938  00000000  00000000  0006d16b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000017f0  00000000  00000000  0006eaa3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00020cc3  00000000  00000000  00070293  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001762e  00000000  00000000  00090f56  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000936c1  00000000  00000000  000a8584  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000072b8  00000000  00000000  0013bc48  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .stab         0000009c  00000000  00000000  00142f00  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000014d  00000000  00000000  00142f9c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	c0 32 00 20 1d 0b 00 00 19 0b 00 00 19 0b 00 00     .2. ............
	...
      2c:	19 0b 00 00 00 00 00 00 00 00 00 00 19 0b 00 00     ................
      3c:	19 0b 00 00 19 0b 00 00 19 0b 00 00 19 0b 00 00     ................
      4c:	19 0b 00 00 19 0b 00 00 19 0b 00 00 19 0b 00 00     ................
      5c:	e9 72 00 00 19 0b 00 00 19 0b 00 00 19 0b 00 00     .r..............
      6c:	19 0b 00 00 19 0b 00 00 19 0b 00 00 19 0b 00 00     ................
      7c:	19 0b 00 00 19 0b 00 00 19 0b 00 00 19 0b 00 00     ................
      8c:	19 0b 00 00 19 0b 00 00 19 0b 00 00 19 0b 00 00     ................
      9c:	19 0b 00 00 19 0b 00 00 19 0b 00 00 19 0b 00 00     ................
      ac:	19 0b 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000a30 	.word	0x20000a30
      d4:	00000000 	.word	0x00000000
      d8:	00012804 	.word	0x00012804

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000a34 	.word	0x20000a34
     108:	00012804 	.word	0x00012804
     10c:	00012804 	.word	0x00012804
     110:	00000000 	.word	0x00000000

00000114 <_Z41__static_initialization_and_destruction_0ii>:
				#else
				
				printf("**************************\n\r");
				printf("Not Locked at:  %lf",target_frequency);
				printf(" MHz\n");
				printf("**************************\n");
     114:	b510      	push	{r4, lr}
     116:	2801      	cmp	r0, #1
     118:	d000      	beq.n	11c <_Z41__static_initialization_and_destruction_0ii+0x8>
     11a:	bd10      	pop	{r4, pc}
     11c:	4b06      	ldr	r3, [pc, #24]	; (138 <_Z41__static_initialization_and_destruction_0ii+0x24>)
     11e:	4299      	cmp	r1, r3
     120:	d1fb      	bne.n	11a <_Z41__static_initialization_and_destruction_0ii+0x6>
     122:	4c06      	ldr	r4, [pc, #24]	; (13c <_Z41__static_initialization_and_destruction_0ii+0x28>)
     124:	0020      	movs	r0, r4
     126:	4b06      	ldr	r3, [pc, #24]	; (140 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
     128:	4798      	blx	r3
     12a:	4a06      	ldr	r2, [pc, #24]	; (144 <_Z41__static_initialization_and_destruction_0ii+0x30>)
     12c:	4906      	ldr	r1, [pc, #24]	; (148 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     12e:	0020      	movs	r0, r4
     130:	4b06      	ldr	r3, [pc, #24]	; (14c <_Z41__static_initialization_and_destruction_0ii+0x38>)
     132:	4798      	blx	r3
     134:	e7f1      	b.n	11a <_Z41__static_initialization_and_destruction_0ii+0x6>
     136:	46c0      	nop			; (mov r8, r8)
     138:	0000ffff 	.word	0x0000ffff
     13c:	20000a4c 	.word	0x20000a4c
     140:	00000c79 	.word	0x00000c79
     144:	20000000 	.word	0x20000000
     148:	00000c85 	.word	0x00000c85
     14c:	00008bd5 	.word	0x00008bd5

00000150 <_ZN14ADF5610_DriverC1Ev>:
     150:	b510      	push	{r4, lr}
     152:	4a0e      	ldr	r2, [pc, #56]	; (18c <_ZN14ADF5610_DriverC1Ev+0x3c>)
     154:	6002      	str	r2, [r0, #0]
     156:	2300      	movs	r3, #0
     158:	2192      	movs	r1, #146	; 0x92
     15a:	0049      	lsls	r1, r1, #1
		 buffer32=0;
     15c:	5043      	str	r3, [r0, r1]
		 dir=1;
     15e:	2401      	movs	r4, #1
     160:	3114      	adds	r1, #20
     162:	5044      	str	r4, [r0, r1]
		 spi_adf=&staticSPI;
     164:	490a      	ldr	r1, [pc, #40]	; (190 <_ZN14ADF5610_DriverC1Ev+0x40>)
     166:	6041      	str	r1, [r0, #4]
		 is_locked=false;
     168:	219e      	movs	r1, #158	; 0x9e
     16a:	0049      	lsls	r1, r1, #1
     16c:	5443      	strb	r3, [r0, r1]
		 upper_limit=4400;
     16e:	4909      	ldr	r1, [pc, #36]	; (194 <_ZN14ADF5610_DriverC1Ev+0x44>)
     170:	6081      	str	r1, [r0, #8]
		 lower_limit=3600;
     172:	60c2      	str	r2, [r0, #12]
		 step=(upper_limit-lower_limit)/1024.0*2;
     174:	4908      	ldr	r1, [pc, #32]	; (198 <_ZN14ADF5610_DriverC1Ev+0x48>)
     176:	2298      	movs	r2, #152	; 0x98
     178:	0052      	lsls	r2, r2, #1
     17a:	5081      	str	r1, [r0, r2]
		 target_frequency=current_frequency+step;
     17c:	4907      	ldr	r1, [pc, #28]	; (19c <_ZN14ADF5610_DriverC1Ev+0x4c>)
     17e:	3204      	adds	r2, #4
     180:	5081      	str	r1, [r0, r2]
		 pll_started=false;
     182:	2256      	movs	r2, #86	; 0x56
     184:	32ff      	adds	r2, #255	; 0xff
     186:	5483      	strb	r3, [r0, r2]
}
     188:	bd10      	pop	{r4, pc}
     18a:	46c0      	nop			; (mov r8, r8)
     18c:	45610000 	.word	0x45610000
     190:	20000a4c 	.word	0x20000a4c
     194:	45898000 	.word	0x45898000
     198:	3fc80000 	.word	0x3fc80000
     19c:	45611900 	.word	0x45611900

000001a0 <_ZN14ADF5610_DriverD1Ev>:
}
     1a0:	4770      	bx	lr
	...

000001a4 <_ZN14ADF5610_Driver13ShowRegistersEi>:
void ADF5610_Driver::ShowRegisters(int index){
     1a4:	b570      	push	{r4, r5, r6, lr}
     1a6:	0005      	movs	r5, r0
     1a8:	1e0c      	subs	r4, r1, #0
	switch (index){
     1aa:	d006      	beq.n	1ba <_ZN14ADF5610_Driver13ShowRegistersEi+0x16>
     1ac:	2900      	cmp	r1, #0
     1ae:	db0d      	blt.n	1cc <_ZN14ADF5610_Driver13ShowRegistersEi+0x28>
     1b0:	000b      	movs	r3, r1
     1b2:	3b12      	subs	r3, #18
     1b4:	2b01      	cmp	r3, #1
     1b6:	d809      	bhi.n	1cc <_ZN14ADF5610_Driver13ShowRegistersEi+0x28>
}
     1b8:	bd70      	pop	{r4, r5, r6, pc}
			  printf("Read R%d",index);
     1ba:	480e      	ldr	r0, [pc, #56]	; (1f4 <_ZN14ADF5610_Driver13ShowRegistersEi+0x50>)
     1bc:	4e0e      	ldr	r6, [pc, #56]	; (1f8 <_ZN14ADF5610_Driver13ShowRegistersEi+0x54>)
     1be:	47b0      	blx	r6
			  printf(":  0x%08lx\n" ,RegRead[index]);
     1c0:	3404      	adds	r4, #4
     1c2:	00a4      	lsls	r4, r4, #2
     1c4:	5961      	ldr	r1, [r4, r5]
     1c6:	480d      	ldr	r0, [pc, #52]	; (1fc <_ZN14ADF5610_Driver13ShowRegistersEi+0x58>)
     1c8:	47b0      	blx	r6
			  break;
     1ca:	e7f5      	b.n	1b8 <_ZN14ADF5610_Driver13ShowRegistersEi+0x14>
			  printf("Write R%d",index);
     1cc:	0021      	movs	r1, r4
     1ce:	480c      	ldr	r0, [pc, #48]	; (200 <_ZN14ADF5610_Driver13ShowRegistersEi+0x5c>)
     1d0:	4e09      	ldr	r6, [pc, #36]	; (1f8 <_ZN14ADF5610_Driver13ShowRegistersEi+0x54>)
     1d2:	47b0      	blx	r6
			  printf(":  0x%08lx\t",RegWrite[index]);
     1d4:	0023      	movs	r3, r4
     1d6:	331a      	adds	r3, #26
     1d8:	009b      	lsls	r3, r3, #2
     1da:	18eb      	adds	r3, r5, r3
     1dc:	6859      	ldr	r1, [r3, #4]
     1de:	4809      	ldr	r0, [pc, #36]	; (204 <_ZN14ADF5610_Driver13ShowRegistersEi+0x60>)
     1e0:	47b0      	blx	r6
			  printf("Read R%d",index);
     1e2:	0021      	movs	r1, r4
     1e4:	4803      	ldr	r0, [pc, #12]	; (1f4 <_ZN14ADF5610_Driver13ShowRegistersEi+0x50>)
     1e6:	47b0      	blx	r6
			  printf(":  0x%08lx\n",RegRead[index]);
     1e8:	3404      	adds	r4, #4
     1ea:	00a4      	lsls	r4, r4, #2
     1ec:	5961      	ldr	r1, [r4, r5]
     1ee:	4803      	ldr	r0, [pc, #12]	; (1fc <_ZN14ADF5610_Driver13ShowRegistersEi+0x58>)
     1f0:	47b0      	blx	r6
}
     1f2:	e7e1      	b.n	1b8 <_ZN14ADF5610_Driver13ShowRegistersEi+0x14>
     1f4:	00012080 	.word	0x00012080
     1f8:	0000d225 	.word	0x0000d225
     1fc:	0001208c 	.word	0x0001208c
     200:	00012098 	.word	0x00012098
     204:	000120a4 	.word	0x000120a4

00000208 <_ZN14ADF5610_Driver9Is_LockedEv>:
bool ADF5610_Driver::Is_Locked(void){
     208:	b530      	push	{r4, r5, lr}
     20a:	b083      	sub	sp, #12
     20c:	0005      	movs	r5, r0
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
     20e:	a801      	add	r0, sp, #4
     210:	4b0b      	ldr	r3, [pc, #44]	; (240 <_ZN14ADF5610_Driver9Is_LockedEv+0x38>)
     212:	4798      	blx	r3
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
     214:	22c0      	movs	r2, #192	; 0xc0
     216:	05d2      	lsls	r2, r2, #23
     218:	6810      	ldr	r0, [r2, #0]
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Port *)hw)->Group[submodule_index].IN.reg;
     21a:	4b0a      	ldr	r3, [pc, #40]	; (244 <_ZN14ADF5610_Driver9Is_LockedEv+0x3c>)
     21c:	6a1b      	ldr	r3, [r3, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
     21e:	6914      	ldr	r4, [r2, #16]

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT_IOBUS, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
     220:	405c      	eors	r4, r3
     222:	4004      	ands	r4, r0
     224:	405c      	eors	r4, r3

	CRITICAL_SECTION_LEAVE();
     226:	a801      	add	r0, sp, #4
     228:	4b07      	ldr	r3, [pc, #28]	; (248 <_ZN14ADF5610_Driver9Is_LockedEv+0x40>)
     22a:	4798      	blx	r3
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
     22c:	2040      	movs	r0, #64	; 0x40
     22e:	4020      	ands	r0, r4
     230:	1e43      	subs	r3, r0, #1
     232:	4198      	sbcs	r0, r3
     234:	b2c0      	uxtb	r0, r0
	is_locked= gpio_get_pin_level(PA06);
     236:	239e      	movs	r3, #158	; 0x9e
     238:	005b      	lsls	r3, r3, #1
     23a:	54e8      	strb	r0, [r5, r3]
}
     23c:	b003      	add	sp, #12
     23e:	bd30      	pop	{r4, r5, pc}
     240:	00001a4d 	.word	0x00001a4d
     244:	41004400 	.word	0x41004400
     248:	00001a6f 	.word	0x00001a6f

0000024c <_ZN14ADF5610_Driver23ConvertU32FourByteArrayEPhm>:
void ADF5610_Driver::ConvertU32FourByteArray(uint8_t *array,uint32_t  data){
     24c:	b510      	push	{r4, lr}
	for (int i =0;i<4;i++){
     24e:	2000      	movs	r0, #0
     250:	2803      	cmp	r0, #3
     252:	dc07      	bgt.n	264 <_ZN14ADF5610_Driver23ConvertU32FourByteArrayEPhm+0x18>
		array[i]=(uint8_t)((data>>((3-i)*8)&0xff));
     254:	2303      	movs	r3, #3
     256:	1a1b      	subs	r3, r3, r0
     258:	00db      	lsls	r3, r3, #3
     25a:	0014      	movs	r4, r2
     25c:	40dc      	lsrs	r4, r3
     25e:	540c      	strb	r4, [r1, r0]
	for (int i =0;i<4;i++){
     260:	3001      	adds	r0, #1
     262:	e7f5      	b.n	250 <_ZN14ADF5610_Driver23ConvertU32FourByteArrayEPhm+0x4>
}
     264:	bd10      	pop	{r4, pc}
	...

00000268 <_ZN14ADF5610_Driver13ReadRegistersEh>:
void ADF5610_Driver::ReadRegisters(uint8_t index) {
     268:	b570      	push	{r4, r5, r6, lr}
     26a:	0004      	movs	r4, r0
     26c:	000d      	movs	r5, r1
	spi_adf->SetCS(false);
     26e:	2100      	movs	r1, #0
     270:	6840      	ldr	r0, [r0, #4]
     272:	4e20      	ldr	r6, [pc, #128]	; (2f4 <_ZN14ADF5610_Driver13ReadRegistersEh+0x8c>)
     274:	47b0      	blx	r6
	to_send[0]=0;
     276:	2300      	movs	r3, #0
     278:	22a8      	movs	r2, #168	; 0xa8
     27a:	0052      	lsls	r2, r2, #1
     27c:	54a3      	strb	r3, [r4, r2]
	to_send[1]=0;
     27e:	2252      	movs	r2, #82	; 0x52
     280:	32ff      	adds	r2, #255	; 0xff
     282:	54a3      	strb	r3, [r4, r2]
	to_send[2]=index;
     284:	3201      	adds	r2, #1
     286:	54a5      	strb	r5, [r4, r2]
	to_send[3]=0;
     288:	2254      	movs	r2, #84	; 0x54
     28a:	32ff      	adds	r2, #255	; 0xff
     28c:	54a3      	strb	r3, [r4, r2]
	spi_adf->Write(to_send,4);
     28e:	0021      	movs	r1, r4
     290:	3151      	adds	r1, #81	; 0x51
     292:	31ff      	adds	r1, #255	; 0xff
     294:	3a50      	subs	r2, #80	; 0x50
     296:	3aff      	subs	r2, #255	; 0xff
     298:	6860      	ldr	r0, [r4, #4]
     29a:	4b17      	ldr	r3, [pc, #92]	; (2f8 <_ZN14ADF5610_Driver13ReadRegistersEh+0x90>)
     29c:	4798      	blx	r3
	spi_adf->SetCS(true);
     29e:	2101      	movs	r1, #1
     2a0:	6860      	ldr	r0, [r4, #4]
     2a2:	47b0      	blx	r6
	delay_ms(1);
     2a4:	2001      	movs	r0, #1
     2a6:	4b15      	ldr	r3, [pc, #84]	; (2fc <_ZN14ADF5610_Driver13ReadRegistersEh+0x94>)
     2a8:	4798      	blx	r3
	spi_adf->SetCS(false);
     2aa:	2100      	movs	r1, #0
     2ac:	6860      	ldr	r0, [r4, #4]
     2ae:	47b0      	blx	r6
	spi_adf->Read((uint8_t*)&recibido32,4);
     2b0:	0021      	movs	r1, r4
     2b2:	3149      	adds	r1, #73	; 0x49
     2b4:	31ff      	adds	r1, #255	; 0xff
     2b6:	2204      	movs	r2, #4
     2b8:	6860      	ldr	r0, [r4, #4]
     2ba:	4b11      	ldr	r3, [pc, #68]	; (300 <_ZN14ADF5610_Driver13ReadRegistersEh+0x98>)
     2bc:	4798      	blx	r3
	RegRead[index]=((recibido32&(0x000000FF))<<24)|((recibido32&(0x0000FF00))<<8);
     2be:	23a4      	movs	r3, #164	; 0xa4
     2c0:	005b      	lsls	r3, r3, #1
     2c2:	58e2      	ldr	r2, [r4, r3]
     2c4:	0613      	lsls	r3, r2, #24
     2c6:	0211      	lsls	r1, r2, #8
     2c8:	20ff      	movs	r0, #255	; 0xff
     2ca:	0400      	lsls	r0, r0, #16
     2cc:	4001      	ands	r1, r0
     2ce:	430b      	orrs	r3, r1
	RegRead[index]|=((recibido32&(0xFF000000))>>24)|((recibido32&(0x00FF0000))>>8);
     2d0:	0e11      	lsrs	r1, r2, #24
     2d2:	0a12      	lsrs	r2, r2, #8
     2d4:	20ff      	movs	r0, #255	; 0xff
     2d6:	0200      	lsls	r0, r0, #8
     2d8:	4002      	ands	r2, r0
     2da:	430a      	orrs	r2, r1
     2dc:	4313      	orrs	r3, r2
	RegRead[index]>>=7;
     2de:	09db      	lsrs	r3, r3, #7
	bitClear(RegRead[index],24);
     2e0:	4a08      	ldr	r2, [pc, #32]	; (304 <_ZN14ADF5610_Driver13ReadRegistersEh+0x9c>)
     2e2:	4013      	ands	r3, r2
     2e4:	3504      	adds	r5, #4
     2e6:	00ad      	lsls	r5, r5, #2
     2e8:	512b      	str	r3, [r5, r4]
	spi_adf->SetCS(true);
     2ea:	6860      	ldr	r0, [r4, #4]
     2ec:	2101      	movs	r1, #1
     2ee:	47b0      	blx	r6
}
     2f0:	bd70      	pop	{r4, r5, r6, pc}
     2f2:	46c0      	nop			; (mov r8, r8)
     2f4:	00000cf5 	.word	0x00000cf5
     2f8:	00000cc5 	.word	0x00000cc5
     2fc:	00001ab9 	.word	0x00001ab9
     300:	00000cdd 	.word	0x00000cdd
     304:	feffffff 	.word	0xfeffffff

00000308 <_ZN14ADF5610_Driver17InitiateRegistersEv>:
  for (int i = 0; i < 23; i++) {
     308:	2300      	movs	r3, #0
     30a:	e00e      	b.n	32a <_ZN14ADF5610_Driver17InitiateRegistersEv+0x22>
          RegIni[i] = 0x20;
     30c:	001a      	movs	r2, r3
     30e:	3232      	adds	r2, #50	; 0x32
     310:	0092      	lsls	r2, r2, #2
     312:	2120      	movs	r1, #32
     314:	5011      	str	r1, [r2, r0]
    RegWrite[i]=RegIni[i];
     316:	001a      	movs	r2, r3
     318:	3232      	adds	r2, #50	; 0x32
     31a:	0092      	lsls	r2, r2, #2
     31c:	5811      	ldr	r1, [r2, r0]
     31e:	001a      	movs	r2, r3
     320:	321a      	adds	r2, #26
     322:	0092      	lsls	r2, r2, #2
     324:	1882      	adds	r2, r0, r2
     326:	6051      	str	r1, [r2, #4]
  for (int i = 0; i < 23; i++) {
     328:	3301      	adds	r3, #1
     32a:	2b16      	cmp	r3, #22
     32c:	dc6c      	bgt.n	408 <_ZN14ADF5610_Driver17InitiateRegistersEv+0x100>
    switch (i) {
     32e:	d865      	bhi.n	3fc <_ZN14ADF5610_Driver17InitiateRegistersEv+0xf4>
     330:	009a      	lsls	r2, r3, #2
     332:	4936      	ldr	r1, [pc, #216]	; (40c <_ZN14ADF5610_Driver17InitiateRegistersEv+0x104>)
     334:	588a      	ldr	r2, [r1, r2]
     336:	4697      	mov	pc, r2
        RegIni[i] = 0x2;
     338:	001a      	movs	r2, r3
     33a:	3232      	adds	r2, #50	; 0x32
     33c:	0092      	lsls	r2, r2, #2
     33e:	2102      	movs	r1, #2
     340:	5011      	str	r1, [r2, r0]
        break;
     342:	e7e8      	b.n	316 <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
        RegIni[i] = 0x1;
     344:	001a      	movs	r2, r3
     346:	3232      	adds	r2, #50	; 0x32
     348:	0092      	lsls	r2, r2, #2
     34a:	2101      	movs	r1, #1
     34c:	5011      	str	r1, [r2, r0]
        break;
     34e:	e7e2      	b.n	316 <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
        RegIni[i] = 0x31;
     350:	001a      	movs	r2, r3
     352:	3232      	adds	r2, #50	; 0x32
     354:	0092      	lsls	r2, r2, #2
     356:	2131      	movs	r1, #49	; 0x31
     358:	5011      	str	r1, [r2, r0]
        break;
     35a:	e7dc      	b.n	316 <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
        RegIni[i] = 0xFD70A3;
     35c:	001a      	movs	r2, r3
     35e:	3232      	adds	r2, #50	; 0x32
     360:	0092      	lsls	r2, r2, #2
     362:	492b      	ldr	r1, [pc, #172]	; (410 <_ZN14ADF5610_Driver17InitiateRegistersEv+0x108>)
     364:	5011      	str	r1, [r2, r0]
        break;
     366:	e7d6      	b.n	316 <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
        RegIni[i] = 0x000;
     368:	001a      	movs	r2, r3
     36a:	3232      	adds	r2, #50	; 0x32
     36c:	0092      	lsls	r2, r2, #2
     36e:	2100      	movs	r1, #0
     370:	5011      	str	r1, [r2, r0]
        break;
     372:	e7d0      	b.n	316 <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
        RegIni[i] = 0x2F4A;
     374:	001a      	movs	r2, r3
     376:	3232      	adds	r2, #50	; 0x32
     378:	0092      	lsls	r2, r2, #2
     37a:	4926      	ldr	r1, [pc, #152]	; (414 <_ZN14ADF5610_Driver17InitiateRegistersEv+0x10c>)
     37c:	5011      	str	r1, [r2, r0]
        break;
     37e:	e7ca      	b.n	316 <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
        RegIni[i] = 0x214D;
     380:	001a      	movs	r2, r3
     382:	3232      	adds	r2, #50	; 0x32
     384:	0092      	lsls	r2, r2, #2
     386:	4924      	ldr	r1, [pc, #144]	; (418 <_ZN14ADF5610_Driver17InitiateRegistersEv+0x110>)
     388:	5011      	str	r1, [r2, r0]
        break;
     38a:	e7c4      	b.n	316 <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
        RegIni[i] = 0xC9BEFF;
     38c:	001a      	movs	r2, r3
     38e:	3232      	adds	r2, #50	; 0x32
     390:	0092      	lsls	r2, r2, #2
     392:	4922      	ldr	r1, [pc, #136]	; (41c <_ZN14ADF5610_Driver17InitiateRegistersEv+0x114>)
     394:	5011      	str	r1, [r2, r0]
        break;
     396:	e7be      	b.n	316 <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
        RegIni[i] = 0x3FFF;
     398:	001a      	movs	r2, r3
     39a:	3232      	adds	r2, #50	; 0x32
     39c:	0092      	lsls	r2, r2, #2
     39e:	4920      	ldr	r1, [pc, #128]	; (420 <_ZN14ADF5610_Driver17InitiateRegistersEv+0x118>)
     3a0:	5011      	str	r1, [r2, r0]
        break;
     3a2:	e7b8      	b.n	316 <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
        RegIni[i] = 0x2047;
     3a4:	001a      	movs	r2, r3
     3a6:	3232      	adds	r2, #50	; 0x32
     3a8:	0092      	lsls	r2, r2, #2
     3aa:	491e      	ldr	r1, [pc, #120]	; (424 <_ZN14ADF5610_Driver17InitiateRegistersEv+0x11c>)
     3ac:	5011      	str	r1, [r2, r0]
        break;
     3ae:	e7b2      	b.n	316 <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
        RegIni[i] = 0xF8061;
     3b0:	001a      	movs	r2, r3
     3b2:	3232      	adds	r2, #50	; 0x32
     3b4:	0092      	lsls	r2, r2, #2
     3b6:	491c      	ldr	r1, [pc, #112]	; (428 <_ZN14ADF5610_Driver17InitiateRegistersEv+0x120>)
     3b8:	5011      	str	r1, [r2, r0]
        break;
     3ba:	e7ac      	b.n	316 <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
        RegIni[i] = 0x081;
     3bc:	001a      	movs	r2, r3
     3be:	3232      	adds	r2, #50	; 0x32
     3c0:	0092      	lsls	r2, r2, #2
     3c2:	2181      	movs	r1, #129	; 0x81
     3c4:	5011      	str	r1, [r2, r0]
        break;
     3c6:	e7a6      	b.n	316 <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
		RegIni[i] = 0x020;
     3c8:	001a      	movs	r2, r3
     3ca:	3232      	adds	r2, #50	; 0x32
     3cc:	0092      	lsls	r2, r2, #2
     3ce:	2120      	movs	r1, #32
     3d0:	5011      	str	r1, [r2, r0]
		break;
     3d2:	e7a0      	b.n	316 <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
        RegIni[i] = RegIni[5];
     3d4:	22dc      	movs	r2, #220	; 0xdc
     3d6:	5881      	ldr	r1, [r0, r2]
     3d8:	001a      	movs	r2, r3
     3da:	3232      	adds	r2, #50	; 0x32
     3dc:	0092      	lsls	r2, r2, #2
     3de:	5011      	str	r1, [r2, r0]
         break;
     3e0:	e799      	b.n	316 <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
       RegIni[i] = (0x01<<3)|(0x00<<7)|(0x07<<9)|(0x03<<12)|(0x01<<15);
     3e2:	001a      	movs	r2, r3
     3e4:	3232      	adds	r2, #50	; 0x32
     3e6:	0092      	lsls	r2, r2, #2
     3e8:	4910      	ldr	r1, [pc, #64]	; (42c <_ZN14ADF5610_Driver17InitiateRegistersEv+0x124>)
     3ea:	5011      	str	r1, [r2, r0]
         break;
     3ec:	e793      	b.n	316 <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
         RegIni[i] =(0x02<<3)|(0x07<<7)|(0x00);
     3ee:	001a      	movs	r2, r3
     3f0:	3232      	adds	r2, #50	; 0x32
     3f2:	0092      	lsls	r2, r2, #2
     3f4:	21e4      	movs	r1, #228	; 0xe4
     3f6:	0089      	lsls	r1, r1, #2
     3f8:	5011      	str	r1, [r2, r0]
         break;
     3fa:	e78c      	b.n	316 <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
        RegIni[i] = 0x0;
     3fc:	001a      	movs	r2, r3
     3fe:	3232      	adds	r2, #50	; 0x32
     400:	0092      	lsls	r2, r2, #2
     402:	2100      	movs	r1, #0
     404:	5011      	str	r1, [r2, r0]
        break;
     406:	e786      	b.n	316 <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
}
     408:	4770      	bx	lr
     40a:	46c0      	nop			; (mov r8, r8)
     40c:	00011fd4 	.word	0x00011fd4
     410:	00fd70a3 	.word	0x00fd70a3
     414:	00002f4a 	.word	0x00002f4a
     418:	0000214d 	.word	0x0000214d
     41c:	00c9beff 	.word	0x00c9beff
     420:	00003fff 	.word	0x00003fff
     424:	00002047 	.word	0x00002047
     428:	000f8061 	.word	0x000f8061
     42c:	0000be08 	.word	0x0000be08

00000430 <_ZN14ADF5610_Driver16ReadAllRegistersEv>:
void ADF5610_Driver::ReadAllRegisters(){
     430:	b570      	push	{r4, r5, r6, lr}
     432:	0005      	movs	r5, r0
  for (int i=0; i<=19;i++){
     434:	2400      	movs	r4, #0
     436:	2c13      	cmp	r4, #19
     438:	dc05      	bgt.n	446 <_ZN14ADF5610_Driver16ReadAllRegistersEv+0x16>
    ReadRegisters((uint8_t)i);
     43a:	b2e1      	uxtb	r1, r4
     43c:	0028      	movs	r0, r5
     43e:	4b02      	ldr	r3, [pc, #8]	; (448 <_ZN14ADF5610_Driver16ReadAllRegistersEv+0x18>)
     440:	4798      	blx	r3
  for (int i=0; i<=19;i++){
     442:	3401      	adds	r4, #1
     444:	e7f7      	b.n	436 <_ZN14ADF5610_Driver16ReadAllRegistersEv+0x6>
}
     446:	bd70      	pop	{r4, r5, r6, pc}
     448:	00000269 	.word	0x00000269

0000044c <_ZN14ADF5610_Driver18CalculateVCOValuesEv>:
void ADF5610_Driver::CalculateVCOValues(void){
     44c:	b5f0      	push	{r4, r5, r6, r7, lr}
     44e:	46ce      	mov	lr, r9
     450:	4647      	mov	r7, r8
     452:	b580      	push	{r7, lr}
     454:	b085      	sub	sp, #20
     456:	0007      	movs	r7, r0
	 aux_register=0;
     458:	2200      	movs	r2, #0
     45a:	23a0      	movs	r3, #160	; 0xa0
     45c:	005b      	lsls	r3, r3, #1
     45e:	50c2      	str	r2, [r0, r3]
		double  fDIV=target_frequency;
     460:	259a      	movs	r5, #154	; 0x9a
     462:	006d      	lsls	r5, r5, #1
     464:	4c81      	ldr	r4, [pc, #516]	; (66c <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x220>)
     466:	5940      	ldr	r0, [r0, r5]
     468:	47a0      	blx	r4
     46a:	0002      	movs	r2, r0
     46c:	000b      	movs	r3, r1
		int k=floor(log((14600)/(fDIV))/log(2));
     46e:	4980      	ldr	r1, [pc, #512]	; (670 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x224>)
     470:	4688      	mov	r8, r1
     472:	2000      	movs	r0, #0
     474:	497f      	ldr	r1, [pc, #508]	; (674 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x228>)
     476:	47c0      	blx	r8
     478:	4b7f      	ldr	r3, [pc, #508]	; (678 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x22c>)
     47a:	4798      	blx	r3
     47c:	4a7f      	ldr	r2, [pc, #508]	; (67c <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x230>)
     47e:	4b80      	ldr	r3, [pc, #512]	; (680 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x234>)
     480:	47c0      	blx	r8
     482:	4b80      	ldr	r3, [pc, #512]	; (684 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x238>)
     484:	4798      	blx	r3
     486:	4b80      	ldr	r3, [pc, #512]	; (688 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x23c>)
     488:	4798      	blx	r3
		uint8_t kDIV=7-(uint8_t)(k);
     48a:	2307      	movs	r3, #7
     48c:	9000      	str	r0, [sp, #0]
     48e:	1a1b      	subs	r3, r3, r0
     490:	b2de      	uxtb	r6, r3
	  double fVCO = 7300*((target_frequency*pow(2, k))/(14600)); //VCO
     492:	5978      	ldr	r0, [r7, r5]
     494:	47a0      	blx	r4
     496:	9002      	str	r0, [sp, #8]
     498:	9103      	str	r1, [sp, #12]
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
     49a:	9800      	ldr	r0, [sp, #0]
     49c:	4b7b      	ldr	r3, [pc, #492]	; (68c <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x240>)
     49e:	4798      	blx	r3
     4a0:	0002      	movs	r2, r0
     4a2:	000b      	movs	r3, r1
     4a4:	2000      	movs	r0, #0
     4a6:	2180      	movs	r1, #128	; 0x80
     4a8:	05c9      	lsls	r1, r1, #23
     4aa:	4c79      	ldr	r4, [pc, #484]	; (690 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x244>)
     4ac:	47a0      	blx	r4
     4ae:	0002      	movs	r2, r0
     4b0:	000b      	movs	r3, r1
     4b2:	4c78      	ldr	r4, [pc, #480]	; (694 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x248>)
     4b4:	9802      	ldr	r0, [sp, #8]
     4b6:	9903      	ldr	r1, [sp, #12]
     4b8:	47a0      	blx	r4
     4ba:	2200      	movs	r2, #0
     4bc:	4b6d      	ldr	r3, [pc, #436]	; (674 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x228>)
     4be:	47c0      	blx	r8
     4c0:	2200      	movs	r2, #0
     4c2:	4b75      	ldr	r3, [pc, #468]	; (698 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x24c>)
     4c4:	47a0      	blx	r4
     4c6:	9000      	str	r0, [sp, #0]
     4c8:	9101      	str	r1, [sp, #4]
	  if (fVCO<4000){
     4ca:	2200      	movs	r2, #0
     4cc:	4b73      	ldr	r3, [pc, #460]	; (69c <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x250>)
     4ce:	4c74      	ldr	r4, [pc, #464]	; (6a0 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x254>)
     4d0:	47a0      	blx	r4
     4d2:	2800      	cmp	r0, #0
     4d4:	d02f      	beq.n	536 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0xea>
		fPD = 1*fX; //Phase detector frequency
     4d6:	2200      	movs	r2, #0
     4d8:	4b72      	ldr	r3, [pc, #456]	; (6a4 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x258>)
 N = fVCO /fPD;   // Calculate N
     4da:	9800      	ldr	r0, [sp, #0]
     4dc:	9901      	ldr	r1, [sp, #4]
     4de:	4c64      	ldr	r4, [pc, #400]	; (670 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x224>)
     4e0:	47a0      	blx	r4
     4e2:	0004      	movs	r4, r0
     4e4:	000d      	movs	r5, r1
     4e6:	003b      	movs	r3, r7
     4e8:	3371      	adds	r3, #113	; 0x71
     4ea:	33ff      	adds	r3, #255	; 0xff
     4ec:	601c      	str	r4, [r3, #0]
     4ee:	605d      	str	r5, [r3, #4]
  N_Int = floor(fVCO/fPD);   // N= 50 for 5 GHz   // Turn N into integer
     4f0:	4b64      	ldr	r3, [pc, #400]	; (684 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x238>)
     4f2:	4798      	blx	r3
     4f4:	000a      	movs	r2, r1
     4f6:	0001      	movs	r1, r0
     4f8:	9102      	str	r1, [sp, #8]
     4fa:	9203      	str	r2, [sp, #12]
     4fc:	003b      	movs	r3, r7
     4fe:	3369      	adds	r3, #105	; 0x69
     500:	33ff      	adds	r3, #255	; 0xff
     502:	6019      	str	r1, [r3, #0]
     504:	605a      	str	r2, [r3, #4]
 F_Frac1x = (N - N_Int) * pow(2, 24);   // Calculate Frac1 (N remainder * 2^24)
     506:	0013      	movs	r3, r2
     508:	0002      	movs	r2, r0
     50a:	0020      	movs	r0, r4
     50c:	0029      	movs	r1, r5
     50e:	4c66      	ldr	r4, [pc, #408]	; (6a8 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x25c>)
     510:	47a0      	blx	r4
     512:	2200      	movs	r2, #0
     514:	4b65      	ldr	r3, [pc, #404]	; (6ac <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x260>)
     516:	4c5f      	ldr	r4, [pc, #380]	; (694 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x248>)
     518:	47a0      	blx	r4
     51a:	003b      	movs	r3, r7
     51c:	3379      	adds	r3, #121	; 0x79
     51e:	33ff      	adds	r3, #255	; 0xff
     520:	6018      	str	r0, [r3, #0]
     522:	6059      	str	r1, [r3, #4]
   F_FracN = (uint32_t)F_Frac1x;  // turn Frac1 into an integer
     524:	4b62      	ldr	r3, [pc, #392]	; (6b0 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x264>)
     526:	4798      	blx	r3
     528:	23c0      	movs	r3, #192	; 0xc0
     52a:	005b      	lsls	r3, r3, #1
     52c:	50f8      	str	r0, [r7, r3]
  for (int i = 0; i < 23; i++) {
     52e:	2400      	movs	r4, #0
     530:	46b1      	mov	r9, r6
     532:	0005      	movs	r5, r0
     534:	e00e      	b.n	554 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x108>
		fPD = 2*fX; //Phase detector frequency
     536:	2200      	movs	r2, #0
     538:	4b5e      	ldr	r3, [pc, #376]	; (6b4 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x268>)
     53a:	e7ce      	b.n	4da <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x8e>
        RegWrite[i] =(uint32_t)(0x00FFFFFF&((long)N_Int));  //Fixed value (Phase control not needed)
     53c:	9802      	ldr	r0, [sp, #8]
     53e:	9903      	ldr	r1, [sp, #12]
     540:	4b51      	ldr	r3, [pc, #324]	; (688 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x23c>)
     542:	4798      	blx	r3
     544:	0200      	lsls	r0, r0, #8
     546:	0a00      	lsrs	r0, r0, #8
     548:	0023      	movs	r3, r4
     54a:	331a      	adds	r3, #26
     54c:	009b      	lsls	r3, r3, #2
     54e:	18fb      	adds	r3, r7, r3
     550:	6058      	str	r0, [r3, #4]
  for (int i = 0; i < 23; i++) {
     552:	3401      	adds	r4, #1
     554:	2c16      	cmp	r4, #22
     556:	dd00      	ble.n	55a <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x10e>
     558:	e083      	b.n	662 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x216>
    switch (i) {
     55a:	1ee3      	subs	r3, r4, #3
     55c:	2b13      	cmp	r3, #19
     55e:	d8f8      	bhi.n	552 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x106>
     560:	009b      	lsls	r3, r3, #2
     562:	4a55      	ldr	r2, [pc, #340]	; (6b8 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x26c>)
     564:	58d3      	ldr	r3, [r2, r3]
     566:	469f      	mov	pc, r3
        RegWrite[i] =(uint32_t)(0x00FFFFFF&(F_FracN));
     568:	022a      	lsls	r2, r5, #8
     56a:	0a12      	lsrs	r2, r2, #8
     56c:	0023      	movs	r3, r4
     56e:	331a      	adds	r3, #26
     570:	009b      	lsls	r3, r3, #2
     572:	18fb      	adds	r3, r7, r3
     574:	605a      	str	r2, [r3, #4]
        break;
     576:	e7ec      	b.n	552 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x106>
		 RegWrite[i]=RegIni[i];
     578:	0023      	movs	r3, r4
     57a:	3332      	adds	r3, #50	; 0x32
     57c:	009b      	lsls	r3, r3, #2
     57e:	59da      	ldr	r2, [r3, r7]
     580:	0023      	movs	r3, r4
     582:	331a      	adds	r3, #26
     584:	009b      	lsls	r3, r3, #2
     586:	18fb      	adds	r3, r7, r3
     588:	605a      	str	r2, [r3, #4]
        break;
     58a:	e7e2      	b.n	552 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x106>
        if (fVCO<4000){
     58c:	2200      	movs	r2, #0
     58e:	4b43      	ldr	r3, [pc, #268]	; (69c <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x250>)
     590:	9800      	ldr	r0, [sp, #0]
     592:	9901      	ldr	r1, [sp, #4]
     594:	4e42      	ldr	r6, [pc, #264]	; (6a0 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x254>)
     596:	47b0      	blx	r6
     598:	2800      	cmp	r0, #0
     59a:	d008      	beq.n	5ae <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x162>
          bitWrite(RegWrite[i], 19, 0);
     59c:	0023      	movs	r3, r4
     59e:	331a      	adds	r3, #26
     5a0:	009b      	lsls	r3, r3, #2
     5a2:	18fb      	adds	r3, r7, r3
     5a4:	4a45      	ldr	r2, [pc, #276]	; (6bc <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x270>)
     5a6:	6859      	ldr	r1, [r3, #4]
     5a8:	400a      	ands	r2, r1
     5aa:	605a      	str	r2, [r3, #4]
     5ac:	e7d1      	b.n	552 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x106>
          bitWrite(RegWrite[i], 19, 1);
     5ae:	0023      	movs	r3, r4
     5b0:	331a      	adds	r3, #26
     5b2:	009b      	lsls	r3, r3, #2
     5b4:	18fb      	adds	r3, r7, r3
     5b6:	2280      	movs	r2, #128	; 0x80
     5b8:	0312      	lsls	r2, r2, #12
     5ba:	6859      	ldr	r1, [r3, #4]
     5bc:	430a      	orrs	r2, r1
     5be:	605a      	str	r2, [r3, #4]
     5c0:	e7c7      	b.n	552 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x106>
    	  aux_register=RegWrite[5];
     5c2:	2380      	movs	r3, #128	; 0x80
     5c4:	58fa      	ldr	r2, [r7, r3]
     5c6:	33c0      	adds	r3, #192	; 0xc0
     5c8:	50fa      	str	r2, [r7, r3]
        RegWrite[i]=aux_register;
     5ca:	0023      	movs	r3, r4
     5cc:	331a      	adds	r3, #26
     5ce:	009b      	lsls	r3, r3, #2
     5d0:	18fb      	adds	r3, r7, r3
     5d2:	605a      	str	r2, [r3, #4]
        break;
     5d4:	e7bd      	b.n	552 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x106>
        RegWrite[i]=RegIni[i];
     5d6:	0023      	movs	r3, r4
     5d8:	3332      	adds	r3, #50	; 0x32
     5da:	009b      	lsls	r3, r3, #2
     5dc:	59da      	ldr	r2, [r3, r7]
     5de:	0023      	movs	r3, r4
     5e0:	331a      	adds	r3, #26
     5e2:	009b      	lsls	r3, r3, #2
     5e4:	18fb      	adds	r3, r7, r3
     5e6:	605a      	str	r2, [r3, #4]
        break;
     5e8:	e7b3      	b.n	552 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x106>
    switch (i) {
     5ea:	2303      	movs	r3, #3
     5ec:	464e      	mov	r6, r9
     5ee:	e022      	b.n	636 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x1ea>
					bitWrite(RegWrite[i], j, bitRead(VCOAdd,j-3));
     5f0:	1ed9      	subs	r1, r3, #3
     5f2:	2202      	movs	r2, #2
     5f4:	410a      	asrs	r2, r1
     5f6:	07d2      	lsls	r2, r2, #31
     5f8:	d509      	bpl.n	60e <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x1c2>
     5fa:	2101      	movs	r1, #1
     5fc:	4099      	lsls	r1, r3
     5fe:	0022      	movs	r2, r4
     600:	321a      	adds	r2, #26
     602:	0092      	lsls	r2, r2, #2
     604:	18ba      	adds	r2, r7, r2
     606:	6850      	ldr	r0, [r2, #4]
     608:	4301      	orrs	r1, r0
     60a:	6051      	str	r1, [r2, #4]
     60c:	e012      	b.n	634 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x1e8>
     60e:	2101      	movs	r1, #1
     610:	4099      	lsls	r1, r3
     612:	0022      	movs	r2, r4
     614:	321a      	adds	r2, #26
     616:	0092      	lsls	r2, r2, #2
     618:	18ba      	adds	r2, r7, r2
     61a:	6850      	ldr	r0, [r2, #4]
     61c:	4388      	bics	r0, r1
     61e:	6050      	str	r0, [r2, #4]
     620:	e008      	b.n	634 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x1e8>
					bitWrite(RegWrite[i], j, bitRead(kDIV,j-7));
     622:	2101      	movs	r1, #1
     624:	4099      	lsls	r1, r3
     626:	0022      	movs	r2, r4
     628:	321a      	adds	r2, #26
     62a:	0092      	lsls	r2, r2, #2
     62c:	18ba      	adds	r2, r7, r2
     62e:	6850      	ldr	r0, [r2, #4]
     630:	4388      	bics	r0, r1
     632:	6050      	str	r0, [r2, #4]
			for (int j=3;j<16;j++){
     634:	3301      	adds	r3, #1
     636:	2b0f      	cmp	r3, #15
     638:	dc11      	bgt.n	65e <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x212>
				if (j<7){
     63a:	2b06      	cmp	r3, #6
     63c:	ddd8      	ble.n	5f0 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x1a4>
					bitWrite(RegWrite[i], j, bitRead(kDIV,j-7));
     63e:	1fda      	subs	r2, r3, #7
     640:	0031      	movs	r1, r6
     642:	4111      	asrs	r1, r2
     644:	000a      	movs	r2, r1
     646:	07d2      	lsls	r2, r2, #31
     648:	d5eb      	bpl.n	622 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x1d6>
     64a:	2101      	movs	r1, #1
     64c:	4099      	lsls	r1, r3
     64e:	0022      	movs	r2, r4
     650:	321a      	adds	r2, #26
     652:	0092      	lsls	r2, r2, #2
     654:	18ba      	adds	r2, r7, r2
     656:	6850      	ldr	r0, [r2, #4]
     658:	4301      	orrs	r1, r0
     65a:	6051      	str	r1, [r2, #4]
     65c:	e7ea      	b.n	634 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x1e8>
     65e:	46b1      	mov	r9, r6
     660:	e777      	b.n	552 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x106>
}
     662:	b005      	add	sp, #20
     664:	bc0c      	pop	{r2, r3}
     666:	4690      	mov	r8, r2
     668:	4699      	mov	r9, r3
     66a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     66c:	0000cfb1 	.word	0x0000cfb1
     670:	0000ba81 	.word	0x0000ba81
     674:	40cc8400 	.word	0x40cc8400
     678:	00008d15 	.word	0x00008d15
     67c:	fefa39ef 	.word	0xfefa39ef
     680:	3fe62e42 	.word	0x3fe62e42
     684:	00008be5 	.word	0x00008be5
     688:	0000ce55 	.word	0x0000ce55
     68c:	0000cebd 	.word	0x0000cebd
     690:	00008e25 	.word	0x00008e25
     694:	0000c2e9 	.word	0x0000c2e9
     698:	40bc8400 	.word	0x40bc8400
     69c:	40af4000 	.word	0x40af4000
     6a0:	0000a715 	.word	0x0000a715
     6a4:	40490000 	.word	0x40490000
     6a8:	0000c7e9 	.word	0x0000c7e9
     6ac:	41700000 	.word	0x41700000
     6b0:	0000a819 	.word	0x0000a819
     6b4:	40590000 	.word	0x40590000
     6b8:	00012030 	.word	0x00012030
     6bc:	fff7ffff 	.word	0xfff7ffff

000006c0 <_ZN14ADF5610_Driver16SetNextFrequencyEv>:
{
     6c0:	b510      	push	{r4, lr}
  CalculateVCOValues();
     6c2:	4b01      	ldr	r3, [pc, #4]	; (6c8 <_ZN14ADF5610_Driver16SetNextFrequencyEv+0x8>)
     6c4:	4798      	blx	r3
}
     6c6:	bd10      	pop	{r4, pc}
     6c8:	0000044d 	.word	0x0000044d

000006cc <_ZN14ADF5610_Driver6usleepEl>:
	
}
#ifdef ARDUINO_AVR_UNO
#else

void ADF5610_Driver::usleep(long us){
     6cc:	b510      	push	{r4, lr}
     6ce:	0008      	movs	r0, r1
	if (us/1000>1)
     6d0:	4b07      	ldr	r3, [pc, #28]	; (6f0 <_ZN14ADF5610_Driver6usleepEl+0x24>)
     6d2:	4299      	cmp	r1, r3
     6d4:	dc03      	bgt.n	6de <_ZN14ADF5610_Driver6usleepEl+0x12>
	{
		delay_ms(us/1000);
	} 
	else
	{
		delay_ms(1);
     6d6:	2001      	movs	r0, #1
     6d8:	4b06      	ldr	r3, [pc, #24]	; (6f4 <_ZN14ADF5610_Driver6usleepEl+0x28>)
     6da:	4798      	blx	r3
	}
	
}
     6dc:	bd10      	pop	{r4, pc}
		delay_ms(us/1000);
     6de:	21fa      	movs	r1, #250	; 0xfa
     6e0:	0089      	lsls	r1, r1, #2
     6e2:	4b05      	ldr	r3, [pc, #20]	; (6f8 <_ZN14ADF5610_Driver6usleepEl+0x2c>)
     6e4:	4798      	blx	r3
     6e6:	b280      	uxth	r0, r0
     6e8:	4b02      	ldr	r3, [pc, #8]	; (6f4 <_ZN14ADF5610_Driver6usleepEl+0x28>)
     6ea:	4798      	blx	r3
     6ec:	e7f6      	b.n	6dc <_ZN14ADF5610_Driver6usleepEl+0x10>
     6ee:	46c0      	nop			; (mov r8, r8)
     6f0:	000007cf 	.word	0x000007cf
     6f4:	00001ab9 	.word	0x00001ab9
     6f8:	0000a511 	.word	0x0000a511

000006fc <_ZN14ADF5610_Driver14WriteRegistersEh>:
void  ADF5610_Driver::WriteRegisters(uint8_t index) {
     6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     6fe:	0004      	movs	r4, r0
     700:	000d      	movs	r5, r1
  local_index=0;
     702:	2300      	movs	r3, #0
     704:	22a2      	movs	r2, #162	; 0xa2
     706:	0052      	lsls	r2, r2, #1
     708:	5483      	strb	r3, [r0, r2]
  buffer32 = 0;
     70a:	3a20      	subs	r2, #32
     70c:	5083      	str	r3, [r0, r2]
  if (index>19){
     70e:	2913      	cmp	r1, #19
     710:	dd1a      	ble.n	748 <_ZN14ADF5610_Driver14WriteRegistersEh+0x4c>
    if(index>22){
     712:	2916      	cmp	r1, #22
     714:	dd13      	ble.n	73e <_ZN14ADF5610_Driver14WriteRegistersEh+0x42>
		if (index>23)
     716:	2917      	cmp	r1, #23
     718:	dd0c      	ble.n	734 <_ZN14ADF5610_Driver14WriteRegistersEh+0x38>
			if (index==24)
     71a:	2918      	cmp	r1, #24
     71c:	d004      	beq.n	728 <_ZN14ADF5610_Driver14WriteRegistersEh+0x2c>
				 local_index=3;
     71e:	2203      	movs	r2, #3
     720:	23a2      	movs	r3, #162	; 0xa2
     722:	005b      	lsls	r3, r3, #1
     724:	54c2      	strb	r2, [r0, r3]
     726:	e012      	b.n	74e <_ZN14ADF5610_Driver14WriteRegistersEh+0x52>
				local_index=4;
     728:	3a21      	subs	r2, #33	; 0x21
     72a:	3aff      	subs	r2, #255	; 0xff
     72c:	23a2      	movs	r3, #162	; 0xa2
     72e:	005b      	lsls	r3, r3, #1
     730:	54c2      	strb	r2, [r0, r3]
     732:	e00c      	b.n	74e <_ZN14ADF5610_Driver14WriteRegistersEh+0x52>
			 local_index=3;
     734:	2203      	movs	r2, #3
     736:	23a2      	movs	r3, #162	; 0xa2
     738:	005b      	lsls	r3, r3, #1
     73a:	54c2      	strb	r2, [r0, r3]
     73c:	e007      	b.n	74e <_ZN14ADF5610_Driver14WriteRegistersEh+0x52>
		 local_index=5;
     73e:	2205      	movs	r2, #5
     740:	23a2      	movs	r3, #162	; 0xa2
     742:	005b      	lsls	r3, r3, #1
     744:	54c2      	strb	r2, [r0, r3]
     746:	e002      	b.n	74e <_ZN14ADF5610_Driver14WriteRegistersEh+0x52>
    local_index=index;
     748:	23a2      	movs	r3, #162	; 0xa2
     74a:	005b      	lsls	r3, r3, #1
     74c:	54e1      	strb	r1, [r4, r3]
  switch (local_index){
     74e:	23a2      	movs	r3, #162	; 0xa2
     750:	005b      	lsls	r3, r3, #1
     752:	5ce3      	ldrb	r3, [r4, r3]
     754:	3b10      	subs	r3, #16
     756:	b2db      	uxtb	r3, r3
     758:	2b03      	cmp	r3, #3
     75a:	d800      	bhi.n	75e <_ZN14ADF5610_Driver14WriteRegistersEh+0x62>
}
     75c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		    spi_adf->SetCS(false);
     75e:	2100      	movs	r1, #0
     760:	6860      	ldr	r0, [r4, #4]
     762:	4e21      	ldr	r6, [pc, #132]	; (7e8 <_ZN14ADF5610_Driver14WriteRegistersEh+0xec>)
     764:	47b0      	blx	r6
			  buffer32 =((uint32_t)local_index <<3)|(RegWrite[index]<<8);
     766:	23a2      	movs	r3, #162	; 0xa2
     768:	005b      	lsls	r3, r3, #1
     76a:	5ce2      	ldrb	r2, [r4, r3]
     76c:	00d2      	lsls	r2, r2, #3
     76e:	002b      	movs	r3, r5
     770:	331a      	adds	r3, #26
     772:	009b      	lsls	r3, r3, #2
     774:	18e3      	adds	r3, r4, r3
     776:	685b      	ldr	r3, [r3, #4]
     778:	021b      	lsls	r3, r3, #8
     77a:	431a      	orrs	r2, r3
     77c:	2392      	movs	r3, #146	; 0x92
     77e:	005b      	lsls	r3, r3, #1
     780:	50e2      	str	r2, [r4, r3]
			  ConvertU32FourByteArray(to_send,buffer32);
     782:	0027      	movs	r7, r4
     784:	3751      	adds	r7, #81	; 0x51
     786:	37ff      	adds	r7, #255	; 0xff
     788:	0039      	movs	r1, r7
     78a:	0020      	movs	r0, r4
     78c:	4b17      	ldr	r3, [pc, #92]	; (7ec <_ZN14ADF5610_Driver14WriteRegistersEh+0xf0>)
     78e:	4798      	blx	r3
		          spi_adf->Write(to_send,4);
     790:	2204      	movs	r2, #4
     792:	0039      	movs	r1, r7
     794:	6860      	ldr	r0, [r4, #4]
     796:	4b16      	ldr	r3, [pc, #88]	; (7f0 <_ZN14ADF5610_Driver14WriteRegistersEh+0xf4>)
     798:	4798      	blx	r3
			 usleep(1);
     79a:	2101      	movs	r1, #1
     79c:	0020      	movs	r0, r4
     79e:	4b15      	ldr	r3, [pc, #84]	; (7f4 <_ZN14ADF5610_Driver14WriteRegistersEh+0xf8>)
     7a0:	4798      	blx	r3
		   spi_adf->SetCS(true);
     7a2:	2101      	movs	r1, #1
     7a4:	6860      	ldr	r0, [r4, #4]
     7a6:	47b0      	blx	r6
		   if(!is_locked){
     7a8:	239e      	movs	r3, #158	; 0x9e
     7aa:	005b      	lsls	r3, r3, #1
     7ac:	5ce3      	ldrb	r3, [r4, r3]
     7ae:	2b00      	cmp	r3, #0
     7b0:	d1d4      	bne.n	75c <_ZN14ADF5610_Driver14WriteRegistersEh+0x60>
			   usleep(1);
     7b2:	2101      	movs	r1, #1
     7b4:	0020      	movs	r0, r4
     7b6:	4b0f      	ldr	r3, [pc, #60]	; (7f4 <_ZN14ADF5610_Driver14WriteRegistersEh+0xf8>)
     7b8:	4798      	blx	r3
			   ReadRegisters(local_index);
     7ba:	26a2      	movs	r6, #162	; 0xa2
     7bc:	0076      	lsls	r6, r6, #1
     7be:	5da1      	ldrb	r1, [r4, r6]
     7c0:	0020      	movs	r0, r4
     7c2:	4b0d      	ldr	r3, [pc, #52]	; (7f8 <_ZN14ADF5610_Driver14WriteRegistersEh+0xfc>)
     7c4:	4798      	blx	r3
				   if(RegRead[local_index]!=RegWrite[index]){
     7c6:	5da3      	ldrb	r3, [r4, r6]
     7c8:	3304      	adds	r3, #4
     7ca:	009b      	lsls	r3, r3, #2
     7cc:	591a      	ldr	r2, [r3, r4]
     7ce:	002b      	movs	r3, r5
     7d0:	331a      	adds	r3, #26
     7d2:	009b      	lsls	r3, r3, #2
     7d4:	18e3      	adds	r3, r4, r3
     7d6:	685b      	ldr	r3, [r3, #4]
     7d8:	429a      	cmp	r2, r3
     7da:	d0bf      	beq.n	75c <_ZN14ADF5610_Driver14WriteRegistersEh+0x60>
							   ShowRegisters(index);
     7dc:	0029      	movs	r1, r5
     7de:	0020      	movs	r0, r4
     7e0:	4b06      	ldr	r3, [pc, #24]	; (7fc <_ZN14ADF5610_Driver14WriteRegistersEh+0x100>)
     7e2:	4798      	blx	r3
}
     7e4:	e7ba      	b.n	75c <_ZN14ADF5610_Driver14WriteRegistersEh+0x60>
     7e6:	46c0      	nop			; (mov r8, r8)
     7e8:	00000cf5 	.word	0x00000cf5
     7ec:	0000024d 	.word	0x0000024d
     7f0:	00000cc5 	.word	0x00000cc5
     7f4:	000006cd 	.word	0x000006cd
     7f8:	00000269 	.word	0x00000269
     7fc:	000001a5 	.word	0x000001a5

00000800 <_ZN14ADF5610_Driver25CompleteConfigurationFlowEj>:
void ADF5610_Driver::CompleteConfigurationFlow(unsigned int k){
     800:	b570      	push	{r4, r5, r6, lr}
     802:	0005      	movs	r5, r0
     804:	000c      	movs	r4, r1
     806:	e00d      	b.n	824 <_ZN14ADF5610_Driver25CompleteConfigurationFlowEj+0x24>
     808:	2616      	movs	r6, #22
      for(int j=22;j>19;j--){
     80a:	2e13      	cmp	r6, #19
     80c:	dd05      	ble.n	81a <_ZN14ADF5610_Driver25CompleteConfigurationFlowEj+0x1a>
        WriteRegisters(j);
     80e:	b2f1      	uxtb	r1, r6
     810:	0028      	movs	r0, r5
     812:	4b0d      	ldr	r3, [pc, #52]	; (848 <_ZN14ADF5610_Driver25CompleteConfigurationFlowEj+0x48>)
     814:	4798      	blx	r3
      for(int j=22;j>19;j--){
     816:	3e01      	subs	r6, #1
     818:	e7f7      	b.n	80a <_ZN14ADF5610_Driver25CompleteConfigurationFlowEj+0xa>
	   WriteRegisters(5);
     81a:	2105      	movs	r1, #5
     81c:	0028      	movs	r0, r5
     81e:	4b0a      	ldr	r3, [pc, #40]	; (848 <_ZN14ADF5610_Driver25CompleteConfigurationFlowEj+0x48>)
     820:	4798      	blx	r3
  for (int i=k; i<20;i++){
     822:	3401      	adds	r4, #1
     824:	2c13      	cmp	r4, #19
     826:	dc06      	bgt.n	836 <_ZN14ADF5610_Driver25CompleteConfigurationFlowEj+0x36>
    if (i==5){
     828:	2c05      	cmp	r4, #5
     82a:	d0ed      	beq.n	808 <_ZN14ADF5610_Driver25CompleteConfigurationFlowEj+0x8>
      WriteRegisters(i);
     82c:	b2e1      	uxtb	r1, r4
     82e:	0028      	movs	r0, r5
     830:	4b05      	ldr	r3, [pc, #20]	; (848 <_ZN14ADF5610_Driver25CompleteConfigurationFlowEj+0x48>)
     832:	4798      	blx	r3
     834:	e7f5      	b.n	822 <_ZN14ADF5610_Driver25CompleteConfigurationFlowEj+0x22>
  WriteRegisters(3);
     836:	2103      	movs	r1, #3
     838:	0028      	movs	r0, r5
     83a:	4c03      	ldr	r4, [pc, #12]	; (848 <_ZN14ADF5610_Driver25CompleteConfigurationFlowEj+0x48>)
     83c:	47a0      	blx	r4
  WriteRegisters(4);
     83e:	2104      	movs	r1, #4
     840:	0028      	movs	r0, r5
     842:	47a0      	blx	r4
}
     844:	bd70      	pop	{r4, r5, r6, pc}
     846:	46c0      	nop			; (mov r8, r8)
     848:	000006fd 	.word	0x000006fd

0000084c <_ZN14ADF5610_Driver7InitPLLEv>:
bool  ADF5610_Driver::InitPLL(void){
     84c:	b570      	push	{r4, r5, r6, lr}
     84e:	0004      	movs	r4, r0
		CompleteConfigurationFlow(0);
     850:	2100      	movs	r1, #0
     852:	0020      	movs	r0, r4
     854:	4b0d      	ldr	r3, [pc, #52]	; (88c <_ZN14ADF5610_Driver7InitPLLEv+0x40>)
     856:	4798      	blx	r3
		ReadAllRegisters();
     858:	0020      	movs	r0, r4
     85a:	4b0d      	ldr	r3, [pc, #52]	; (890 <_ZN14ADF5610_Driver7InitPLLEv+0x44>)
     85c:	4798      	blx	r3
		pll_started= bitRead(RegRead[1],1)&(bitRead(RegRead[1],0)==0);
     85e:	6963      	ldr	r3, [r4, #20]
     860:	0859      	lsrs	r1, r3, #1
     862:	2201      	movs	r2, #1
     864:	401a      	ands	r2, r3
     866:	4253      	negs	r3, r2
     868:	4153      	adcs	r3, r2
     86a:	400b      	ands	r3, r1
     86c:	2556      	movs	r5, #86	; 0x56
     86e:	35ff      	adds	r5, #255	; 0xff
     870:	5563      	strb	r3, [r4, r5]
		delay_ms(100);
     872:	2064      	movs	r0, #100	; 0x64
     874:	4b07      	ldr	r3, [pc, #28]	; (894 <_ZN14ADF5610_Driver7InitPLLEv+0x48>)
     876:	4798      	blx	r3
	}while((!Is_Locked())|((!pll_started)|false));
     878:	0020      	movs	r0, r4
     87a:	4b07      	ldr	r3, [pc, #28]	; (898 <_ZN14ADF5610_Driver7InitPLLEv+0x4c>)
     87c:	4798      	blx	r3
     87e:	5d63      	ldrb	r3, [r4, r5]
	do{
     880:	2800      	cmp	r0, #0
     882:	d0e5      	beq.n	850 <_ZN14ADF5610_Driver7InitPLLEv+0x4>
     884:	2b00      	cmp	r3, #0
     886:	d0e3      	beq.n	850 <_ZN14ADF5610_Driver7InitPLLEv+0x4>
}
     888:	0018      	movs	r0, r3
     88a:	bd70      	pop	{r4, r5, r6, pc}
     88c:	00000801 	.word	0x00000801
     890:	00000431 	.word	0x00000431
     894:	00001ab9 	.word	0x00001ab9
     898:	00000209 	.word	0x00000209

0000089c <_ZN14ADF5610_Driver4InitEv>:
bool ADF5610_Driver::Init(void){
     89c:	b570      	push	{r4, r5, r6, lr}
     89e:	0004      	movs	r4, r0
	spi_adf=&staticSPI;
     8a0:	480d      	ldr	r0, [pc, #52]	; (8d8 <_ZN14ADF5610_Driver4InitEv+0x3c>)
     8a2:	6060      	str	r0, [r4, #4]
	spi_adf->Init();
     8a4:	4b0d      	ldr	r3, [pc, #52]	; (8dc <_ZN14ADF5610_Driver4InitEv+0x40>)
     8a6:	4798      	blx	r3
	memset(to_send,0,4);
     8a8:	0025      	movs	r5, r4
     8aa:	3551      	adds	r5, #81	; 0x51
     8ac:	35ff      	adds	r5, #255	; 0xff
     8ae:	2204      	movs	r2, #4
     8b0:	2100      	movs	r1, #0
     8b2:	0028      	movs	r0, r5
     8b4:	4b0a      	ldr	r3, [pc, #40]	; (8e0 <_ZN14ADF5610_Driver4InitEv+0x44>)
     8b6:	4798      	blx	r3
	spi_adf->Write(to_send,4);
     8b8:	2204      	movs	r2, #4
     8ba:	0029      	movs	r1, r5
     8bc:	6860      	ldr	r0, [r4, #4]
     8be:	4b09      	ldr	r3, [pc, #36]	; (8e4 <_ZN14ADF5610_Driver4InitEv+0x48>)
     8c0:	4798      	blx	r3
	spi_adf->SetCS(true);
     8c2:	2101      	movs	r1, #1
     8c4:	6860      	ldr	r0, [r4, #4]
     8c6:	4b08      	ldr	r3, [pc, #32]	; (8e8 <_ZN14ADF5610_Driver4InitEv+0x4c>)
     8c8:	4798      	blx	r3
	 InitiateRegisters();
     8ca:	0020      	movs	r0, r4
     8cc:	4b07      	ldr	r3, [pc, #28]	; (8ec <_ZN14ADF5610_Driver4InitEv+0x50>)
     8ce:	4798      	blx	r3
	return InitPLL();
     8d0:	0020      	movs	r0, r4
     8d2:	4b07      	ldr	r3, [pc, #28]	; (8f0 <_ZN14ADF5610_Driver4InitEv+0x54>)
     8d4:	4798      	blx	r3
}
     8d6:	bd70      	pop	{r4, r5, r6, pc}
     8d8:	20000a4c 	.word	0x20000a4c
     8dc:	00000c9d 	.word	0x00000c9d
     8e0:	0000d191 	.word	0x0000d191
     8e4:	00000cc5 	.word	0x00000cc5
     8e8:	00000cf5 	.word	0x00000cf5
     8ec:	00000309 	.word	0x00000309
     8f0:	0000084d 	.word	0x0000084d

000008f4 <_ZN14ADF5610_Driver11WriteSubVCOEv>:
void ADF5610_Driver::WriteSubVCO(void){
     8f4:	b570      	push	{r4, r5, r6, lr}
     8f6:	0005      	movs	r5, r0
	WriteRegisters(22);
     8f8:	2116      	movs	r1, #22
     8fa:	4c04      	ldr	r4, [pc, #16]	; (90c <_ZN14ADF5610_Driver11WriteSubVCOEv+0x18>)
     8fc:	47a0      	blx	r4
	WriteRegisters(20);
     8fe:	2114      	movs	r1, #20
     900:	0028      	movs	r0, r5
     902:	47a0      	blx	r4
	WriteRegisters(5);
     904:	2105      	movs	r1, #5
     906:	0028      	movs	r0, r5
     908:	47a0      	blx	r4
}
     90a:	bd70      	pop	{r4, r5, r6, pc}
     90c:	000006fd 	.word	0x000006fd

00000910 <_ZN14ADF5610_Driver22ShortConfigurationFlowEv>:
void ADF5610_Driver::ShortConfigurationFlow(void){
     910:	b570      	push	{r4, r5, r6, lr}
     912:	0004      	movs	r4, r0
  WriteRegisters(8);
     914:	2108      	movs	r1, #8
     916:	4d06      	ldr	r5, [pc, #24]	; (930 <_ZN14ADF5610_Driver22ShortConfigurationFlowEv+0x20>)
     918:	47a8      	blx	r5
  WriteSubVCO();
     91a:	0020      	movs	r0, r4
     91c:	4b05      	ldr	r3, [pc, #20]	; (934 <_ZN14ADF5610_Driver22ShortConfigurationFlowEv+0x24>)
     91e:	4798      	blx	r3
  WriteRegisters(3);
     920:	2103      	movs	r1, #3
     922:	0020      	movs	r0, r4
     924:	47a8      	blx	r5
  WriteRegisters(4);
     926:	2104      	movs	r1, #4
     928:	0020      	movs	r0, r4
     92a:	47a8      	blx	r5
}
     92c:	bd70      	pop	{r4, r5, r6, pc}
     92e:	46c0      	nop			; (mov r8, r8)
     930:	000006fd 	.word	0x000006fd
     934:	000008f5 	.word	0x000008f5

00000938 <_ZN14ADF5610_Driver8SelfTestEh>:
bool	ADF5610_Driver::SelfTest(uint8_t cycles){
     938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     93a:	46ce      	mov	lr, r9
     93c:	4647      	mov	r7, r8
     93e:	b580      	push	{r7, lr}
     940:	0004      	movs	r4, r0
     942:	4688      	mov	r8, r1
	dir=1;
     944:	2201      	movs	r2, #1
     946:	239c      	movs	r3, #156	; 0x9c
     948:	005b      	lsls	r3, r3, #1
     94a:	50c2      	str	r2, [r0, r3]
	int errorCounter=0;
     94c:	2700      	movs	r7, #0
     94e:	e02d      	b.n	9ac <_ZN14ADF5610_Driver8SelfTestEh+0x74>
				dir=-1;
     950:	2201      	movs	r2, #1
     952:	4252      	negs	r2, r2
     954:	3338      	adds	r3, #56	; 0x38
     956:	33ff      	adds	r3, #255	; 0xff
     958:	50e2      	str	r2, [r4, r3]
			   printf("Current frequence: %lf\n",current_frequency);
     95a:	1c28      	adds	r0, r5, #0
     95c:	4b53      	ldr	r3, [pc, #332]	; (aac <_ZN14ADF5610_Driver8SelfTestEh+0x174>)
     95e:	4798      	blx	r3
     960:	0002      	movs	r2, r0
     962:	000b      	movs	r3, r1
     964:	4852      	ldr	r0, [pc, #328]	; (ab0 <_ZN14ADF5610_Driver8SelfTestEh+0x178>)
     966:	4953      	ldr	r1, [pc, #332]	; (ab4 <_ZN14ADF5610_Driver8SelfTestEh+0x17c>)
     968:	4788      	blx	r1
				target_frequency=current_frequency+(dir*step);
     96a:	6825      	ldr	r5, [r4, #0]
     96c:	239c      	movs	r3, #156	; 0x9c
     96e:	005b      	lsls	r3, r3, #1
     970:	58e0      	ldr	r0, [r4, r3]
     972:	3b08      	subs	r3, #8
     974:	58e6      	ldr	r6, [r4, r3]
     976:	4b50      	ldr	r3, [pc, #320]	; (ab8 <_ZN14ADF5610_Driver8SelfTestEh+0x180>)
     978:	4798      	blx	r3
     97a:	1c31      	adds	r1, r6, #0
     97c:	4b4f      	ldr	r3, [pc, #316]	; (abc <_ZN14ADF5610_Driver8SelfTestEh+0x184>)
     97e:	4798      	blx	r3
     980:	1c01      	adds	r1, r0, #0
     982:	1c28      	adds	r0, r5, #0
     984:	4b4e      	ldr	r3, [pc, #312]	; (ac0 <_ZN14ADF5610_Driver8SelfTestEh+0x188>)
     986:	4798      	blx	r3
     988:	239a      	movs	r3, #154	; 0x9a
     98a:	005b      	lsls	r3, r3, #1
     98c:	50e0      	str	r0, [r4, r3]
				SetNextFrequency();
     98e:	0020      	movs	r0, r4
     990:	4b4c      	ldr	r3, [pc, #304]	; (ac4 <_ZN14ADF5610_Driver8SelfTestEh+0x18c>)
     992:	4798      	blx	r3
				ShortConfigurationFlow();
     994:	0020      	movs	r0, r4
     996:	4b4c      	ldr	r3, [pc, #304]	; (ac8 <_ZN14ADF5610_Driver8SelfTestEh+0x190>)
     998:	4798      	blx	r3
				usleep(1000);
     99a:	21fa      	movs	r1, #250	; 0xfa
     99c:	0089      	lsls	r1, r1, #2
     99e:	0020      	movs	r0, r4
     9a0:	4b4a      	ldr	r3, [pc, #296]	; (acc <_ZN14ADF5610_Driver8SelfTestEh+0x194>)
     9a2:	4798      	blx	r3
			 errorCounter=0;
     9a4:	2700      	movs	r7, #0
		 delay_ms(1);
     9a6:	2001      	movs	r0, #1
     9a8:	4b49      	ldr	r3, [pc, #292]	; (ad0 <_ZN14ADF5610_Driver8SelfTestEh+0x198>)
     9aa:	4798      	blx	r3
	while (((lower_limit<=current_frequency)&(current_frequency<=upper_limit))&&(cycles>counter)){
     9ac:	6826      	ldr	r6, [r4, #0]
     9ae:	2501      	movs	r5, #1
     9b0:	1c31      	adds	r1, r6, #0
     9b2:	68e0      	ldr	r0, [r4, #12]
     9b4:	4b47      	ldr	r3, [pc, #284]	; (ad4 <_ZN14ADF5610_Driver8SelfTestEh+0x19c>)
     9b6:	4798      	blx	r3
     9b8:	2800      	cmp	r0, #0
     9ba:	d100      	bne.n	9be <_ZN14ADF5610_Driver8SelfTestEh+0x86>
     9bc:	2500      	movs	r5, #0
     9be:	b2ed      	uxtb	r5, r5
     9c0:	2301      	movs	r3, #1
     9c2:	4699      	mov	r9, r3
     9c4:	68a1      	ldr	r1, [r4, #8]
     9c6:	1c30      	adds	r0, r6, #0
     9c8:	4b42      	ldr	r3, [pc, #264]	; (ad4 <_ZN14ADF5610_Driver8SelfTestEh+0x19c>)
     9ca:	4798      	blx	r3
     9cc:	2800      	cmp	r0, #0
     9ce:	d101      	bne.n	9d4 <_ZN14ADF5610_Driver8SelfTestEh+0x9c>
     9d0:	2300      	movs	r3, #0
     9d2:	4699      	mov	r9, r3
     9d4:	464b      	mov	r3, r9
     9d6:	401d      	ands	r5, r3
     9d8:	d062      	beq.n	aa0 <_ZN14ADF5610_Driver8SelfTestEh+0x168>
     9da:	4643      	mov	r3, r8
     9dc:	2b00      	cmp	r3, #0
     9de:	dd60      	ble.n	aa2 <_ZN14ADF5610_Driver8SelfTestEh+0x16a>
		 if(Is_Locked()){
     9e0:	0020      	movs	r0, r4
     9e2:	4b3d      	ldr	r3, [pc, #244]	; (ad8 <_ZN14ADF5610_Driver8SelfTestEh+0x1a0>)
     9e4:	4798      	blx	r3
     9e6:	1e05      	subs	r5, r0, #0
     9e8:	d02b      	beq.n	a42 <_ZN14ADF5610_Driver8SelfTestEh+0x10a>
			 is_locked=true;
     9ea:	2201      	movs	r2, #1
     9ec:	239e      	movs	r3, #158	; 0x9e
     9ee:	005b      	lsls	r3, r3, #1
     9f0:	54e2      	strb	r2, [r4, r3]
			 current_frequency=target_frequency;
     9f2:	3b08      	subs	r3, #8
     9f4:	58e5      	ldr	r5, [r4, r3]
     9f6:	6025      	str	r5, [r4, #0]
			  if ((current_frequency>(upper_limit-step))&&(dir==1)){
     9f8:	3b04      	subs	r3, #4
     9fa:	58e6      	ldr	r6, [r4, r3]
     9fc:	1c31      	adds	r1, r6, #0
     9fe:	68a0      	ldr	r0, [r4, #8]
     a00:	4b36      	ldr	r3, [pc, #216]	; (adc <_ZN14ADF5610_Driver8SelfTestEh+0x1a4>)
     a02:	4798      	blx	r3
     a04:	1c01      	adds	r1, r0, #0
     a06:	1c28      	adds	r0, r5, #0
     a08:	4b35      	ldr	r3, [pc, #212]	; (ae0 <_ZN14ADF5610_Driver8SelfTestEh+0x1a8>)
     a0a:	4798      	blx	r3
     a0c:	2800      	cmp	r0, #0
     a0e:	d004      	beq.n	a1a <_ZN14ADF5610_Driver8SelfTestEh+0xe2>
     a10:	239c      	movs	r3, #156	; 0x9c
     a12:	005b      	lsls	r3, r3, #1
     a14:	58e3      	ldr	r3, [r4, r3]
     a16:	2b01      	cmp	r3, #1
     a18:	d09a      	beq.n	950 <_ZN14ADF5610_Driver8SelfTestEh+0x18>
			  }else if((current_frequency<(lower_limit+step))&&(dir==-1)){
     a1a:	68e1      	ldr	r1, [r4, #12]
     a1c:	1c30      	adds	r0, r6, #0
     a1e:	4b28      	ldr	r3, [pc, #160]	; (ac0 <_ZN14ADF5610_Driver8SelfTestEh+0x188>)
     a20:	4798      	blx	r3
     a22:	1c01      	adds	r1, r0, #0
     a24:	1c28      	adds	r0, r5, #0
     a26:	4b2f      	ldr	r3, [pc, #188]	; (ae4 <_ZN14ADF5610_Driver8SelfTestEh+0x1ac>)
     a28:	4798      	blx	r3
     a2a:	2800      	cmp	r0, #0
     a2c:	d095      	beq.n	95a <_ZN14ADF5610_Driver8SelfTestEh+0x22>
     a2e:	239c      	movs	r3, #156	; 0x9c
     a30:	005b      	lsls	r3, r3, #1
     a32:	58e3      	ldr	r3, [r4, r3]
     a34:	3301      	adds	r3, #1
     a36:	d190      	bne.n	95a <_ZN14ADF5610_Driver8SelfTestEh+0x22>
				dir=1;
     a38:	2201      	movs	r2, #1
     a3a:	239c      	movs	r3, #156	; 0x9c
     a3c:	005b      	lsls	r3, r3, #1
     a3e:	50e2      	str	r2, [r4, r3]
     a40:	e78b      	b.n	95a <_ZN14ADF5610_Driver8SelfTestEh+0x22>
			 errorCounter++;
     a42:	3701      	adds	r7, #1
			 if(is_locked){
     a44:	239e      	movs	r3, #158	; 0x9e
     a46:	005b      	lsls	r3, r3, #1
     a48:	5ce3      	ldrb	r3, [r4, r3]
     a4a:	2b00      	cmp	r3, #0
     a4c:	d10b      	bne.n	a66 <_ZN14ADF5610_Driver8SelfTestEh+0x12e>
		   SetNextFrequency();
     a4e:	0020      	movs	r0, r4
     a50:	4b1c      	ldr	r3, [pc, #112]	; (ac4 <_ZN14ADF5610_Driver8SelfTestEh+0x18c>)
     a52:	4798      	blx	r3
		   CompleteConfigurationFlow(0);
     a54:	2100      	movs	r1, #0
     a56:	0020      	movs	r0, r4
     a58:	4b23      	ldr	r3, [pc, #140]	; (ae8 <_ZN14ADF5610_Driver8SelfTestEh+0x1b0>)
     a5a:	4798      	blx	r3
			for (int var = 1; var < 24; ++var) {
     a5c:	2301      	movs	r3, #1
     a5e:	2b17      	cmp	r3, #23
     a60:	dc17      	bgt.n	a92 <_ZN14ADF5610_Driver8SelfTestEh+0x15a>
     a62:	3301      	adds	r3, #1
     a64:	e7fb      	b.n	a5e <_ZN14ADF5610_Driver8SelfTestEh+0x126>
				 is_locked=false;
     a66:	2200      	movs	r2, #0
     a68:	239e      	movs	r3, #158	; 0x9e
     a6a:	005b      	lsls	r3, r3, #1
     a6c:	54e2      	strb	r2, [r4, r3]
				  printf("**************************\n\r");
     a6e:	481f      	ldr	r0, [pc, #124]	; (aec <_ZN14ADF5610_Driver8SelfTestEh+0x1b4>)
     a70:	4e10      	ldr	r6, [pc, #64]	; (ab4 <_ZN14ADF5610_Driver8SelfTestEh+0x17c>)
     a72:	47b0      	blx	r6
				   printf("Not Locked at:  %lf",target_frequency);
     a74:	239a      	movs	r3, #154	; 0x9a
     a76:	005b      	lsls	r3, r3, #1
     a78:	58e0      	ldr	r0, [r4, r3]
     a7a:	4b0c      	ldr	r3, [pc, #48]	; (aac <_ZN14ADF5610_Driver8SelfTestEh+0x174>)
     a7c:	4798      	blx	r3
     a7e:	0002      	movs	r2, r0
     a80:	000b      	movs	r3, r1
     a82:	481b      	ldr	r0, [pc, #108]	; (af0 <_ZN14ADF5610_Driver8SelfTestEh+0x1b8>)
     a84:	47b0      	blx	r6
				   printf(" MHz\n");
     a86:	481b      	ldr	r0, [pc, #108]	; (af4 <_ZN14ADF5610_Driver8SelfTestEh+0x1bc>)
     a88:	4e1b      	ldr	r6, [pc, #108]	; (af8 <_ZN14ADF5610_Driver8SelfTestEh+0x1c0>)
     a8a:	47b0      	blx	r6
				   printf("**************************\n");
     a8c:	481b      	ldr	r0, [pc, #108]	; (afc <_ZN14ADF5610_Driver8SelfTestEh+0x1c4>)
     a8e:	47b0      	blx	r6
     a90:	e7dd      	b.n	a4e <_ZN14ADF5610_Driver8SelfTestEh+0x116>
			usleep(100000);
     a92:	491b      	ldr	r1, [pc, #108]	; (b00 <_ZN14ADF5610_Driver8SelfTestEh+0x1c8>)
     a94:	0020      	movs	r0, r4
     a96:	4b0d      	ldr	r3, [pc, #52]	; (acc <_ZN14ADF5610_Driver8SelfTestEh+0x194>)
     a98:	4798      	blx	r3
			if(errorCounter>100){
     a9a:	2f64      	cmp	r7, #100	; 0x64
     a9c:	dd83      	ble.n	9a6 <_ZN14ADF5610_Driver8SelfTestEh+0x6e>
     a9e:	e000      	b.n	aa2 <_ZN14ADF5610_Driver8SelfTestEh+0x16a>
	return true;
     aa0:	2501      	movs	r5, #1
}
     aa2:	0028      	movs	r0, r5
     aa4:	bc0c      	pop	{r2, r3}
     aa6:	4690      	mov	r8, r2
     aa8:	4699      	mov	r9, r3
     aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     aac:	0000cfb1 	.word	0x0000cfb1
     ab0:	000120b0 	.word	0x000120b0
     ab4:	0000d225 	.word	0x0000d225
     ab8:	0000b3c1 	.word	0x0000b3c1
     abc:	0000ae49 	.word	0x0000ae49
     ac0:	0000a9d5 	.word	0x0000a9d5
     ac4:	000006c1 	.word	0x000006c1
     ac8:	00000911 	.word	0x00000911
     acc:	000006cd 	.word	0x000006cd
     ad0:	00001ab9 	.word	0x00001ab9
     ad4:	0000a79d 	.word	0x0000a79d
     ad8:	00000209 	.word	0x00000209
     adc:	0000b089 	.word	0x0000b089
     ae0:	0000a7b1 	.word	0x0000a7b1
     ae4:	0000a789 	.word	0x0000a789
     ae8:	00000801 	.word	0x00000801
     aec:	000120c8 	.word	0x000120c8
     af0:	000120e8 	.word	0x000120e8
     af4:	000120fc 	.word	0x000120fc
     af8:	0000d2e9 	.word	0x0000d2e9
     afc:	00012104 	.word	0x00012104
     b00:	000186a0 	.word	0x000186a0

00000b04 <_GLOBAL__sub_I__ZN14ADF5610_DriverC2Ev>:
}
     b04:	b510      	push	{r4, lr}
     b06:	4902      	ldr	r1, [pc, #8]	; (b10 <_GLOBAL__sub_I__ZN14ADF5610_DriverC2Ev+0xc>)
     b08:	2001      	movs	r0, #1
     b0a:	4b02      	ldr	r3, [pc, #8]	; (b14 <_GLOBAL__sub_I__ZN14ADF5610_DriverC2Ev+0x10>)
     b0c:	4798      	blx	r3
     b0e:	bd10      	pop	{r4, pc}
     b10:	0000ffff 	.word	0x0000ffff
     b14:	00000115 	.word	0x00000115

00000b18 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     b18:	e7fe      	b.n	b18 <Dummy_Handler>
	...

00000b1c <Reset_Handler>:
{
     b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     b1e:	4a23      	ldr	r2, [pc, #140]	; (bac <Reset_Handler+0x90>)
     b20:	4b23      	ldr	r3, [pc, #140]	; (bb0 <Reset_Handler+0x94>)
     b22:	429a      	cmp	r2, r3
     b24:	d009      	beq.n	b3a <Reset_Handler+0x1e>
     b26:	4b22      	ldr	r3, [pc, #136]	; (bb0 <Reset_Handler+0x94>)
     b28:	4a20      	ldr	r2, [pc, #128]	; (bac <Reset_Handler+0x90>)
     b2a:	e003      	b.n	b34 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     b2c:	6811      	ldr	r1, [r2, #0]
     b2e:	6019      	str	r1, [r3, #0]
     b30:	3304      	adds	r3, #4
     b32:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     b34:	491f      	ldr	r1, [pc, #124]	; (bb4 <Reset_Handler+0x98>)
     b36:	428b      	cmp	r3, r1
     b38:	d3f8      	bcc.n	b2c <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     b3a:	4b1f      	ldr	r3, [pc, #124]	; (bb8 <Reset_Handler+0x9c>)
     b3c:	e002      	b.n	b44 <Reset_Handler+0x28>
                *pDest++ = 0;
     b3e:	2200      	movs	r2, #0
     b40:	601a      	str	r2, [r3, #0]
     b42:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     b44:	4a1d      	ldr	r2, [pc, #116]	; (bbc <Reset_Handler+0xa0>)
     b46:	4293      	cmp	r3, r2
     b48:	d3f9      	bcc.n	b3e <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     b4a:	4a1d      	ldr	r2, [pc, #116]	; (bc0 <Reset_Handler+0xa4>)
     b4c:	21ff      	movs	r1, #255	; 0xff
     b4e:	4b1d      	ldr	r3, [pc, #116]	; (bc4 <Reset_Handler+0xa8>)
     b50:	438b      	bics	r3, r1
     b52:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     b54:	39fd      	subs	r1, #253	; 0xfd
     b56:	2390      	movs	r3, #144	; 0x90
     b58:	005b      	lsls	r3, r3, #1
     b5a:	4a1b      	ldr	r2, [pc, #108]	; (bc8 <Reset_Handler+0xac>)
     b5c:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     b5e:	4a1b      	ldr	r2, [pc, #108]	; (bcc <Reset_Handler+0xb0>)
     b60:	78d3      	ldrb	r3, [r2, #3]
     b62:	2503      	movs	r5, #3
     b64:	43ab      	bics	r3, r5
     b66:	2402      	movs	r4, #2
     b68:	4323      	orrs	r3, r4
     b6a:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     b6c:	78d3      	ldrb	r3, [r2, #3]
     b6e:	270c      	movs	r7, #12
     b70:	43bb      	bics	r3, r7
     b72:	2608      	movs	r6, #8
     b74:	4333      	orrs	r3, r6
     b76:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     b78:	4b15      	ldr	r3, [pc, #84]	; (bd0 <Reset_Handler+0xb4>)
     b7a:	7b98      	ldrb	r0, [r3, #14]
     b7c:	2230      	movs	r2, #48	; 0x30
     b7e:	4390      	bics	r0, r2
     b80:	2220      	movs	r2, #32
     b82:	4310      	orrs	r0, r2
     b84:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     b86:	7b99      	ldrb	r1, [r3, #14]
     b88:	43b9      	bics	r1, r7
     b8a:	4331      	orrs	r1, r6
     b8c:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     b8e:	7b9a      	ldrb	r2, [r3, #14]
     b90:	43aa      	bics	r2, r5
     b92:	4322      	orrs	r2, r4
     b94:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     b96:	4a0f      	ldr	r2, [pc, #60]	; (bd4 <Reset_Handler+0xb8>)
     b98:	6851      	ldr	r1, [r2, #4]
     b9a:	2380      	movs	r3, #128	; 0x80
     b9c:	430b      	orrs	r3, r1
     b9e:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     ba0:	4b0d      	ldr	r3, [pc, #52]	; (bd8 <Reset_Handler+0xbc>)
     ba2:	4798      	blx	r3
        main();
     ba4:	4b0d      	ldr	r3, [pc, #52]	; (bdc <Reset_Handler+0xc0>)
     ba6:	4798      	blx	r3
     ba8:	e7fe      	b.n	ba8 <Reset_Handler+0x8c>
     baa:	46c0      	nop			; (mov r8, r8)
     bac:	00012804 	.word	0x00012804
     bb0:	20000000 	.word	0x20000000
     bb4:	20000a30 	.word	0x20000a30
     bb8:	20000a30 	.word	0x20000a30
     bbc:	200012bc 	.word	0x200012bc
     bc0:	e000ed00 	.word	0xe000ed00
     bc4:	00000000 	.word	0x00000000
     bc8:	41007000 	.word	0x41007000
     bcc:	41005000 	.word	0x41005000
     bd0:	41004800 	.word	0x41004800
     bd4:	41004000 	.word	0x41004000
     bd8:	0000d0c5 	.word	0x0000d0c5
     bdc:	00000c1d 	.word	0x00000c1d

00000be0 <_Z41__static_initialization_and_destruction_0ii>:
	while (1) {
		adf.SelfTest(1);
		delay_ms(1000);
		adf.Init();
	}
}
     be0:	b510      	push	{r4, lr}
     be2:	2801      	cmp	r0, #1
     be4:	d000      	beq.n	be8 <_Z41__static_initialization_and_destruction_0ii+0x8>
     be6:	bd10      	pop	{r4, pc}
     be8:	4b06      	ldr	r3, [pc, #24]	; (c04 <_Z41__static_initialization_and_destruction_0ii+0x24>)
     bea:	4299      	cmp	r1, r3
     bec:	d1fb      	bne.n	be6 <_Z41__static_initialization_and_destruction_0ii+0x6>
ADF5610_Driver adf;
     bee:	4c06      	ldr	r4, [pc, #24]	; (c08 <_Z41__static_initialization_and_destruction_0ii+0x28>)
     bf0:	0020      	movs	r0, r4
     bf2:	4b06      	ldr	r3, [pc, #24]	; (c0c <_Z41__static_initialization_and_destruction_0ii+0x2c>)
     bf4:	4798      	blx	r3
     bf6:	4a06      	ldr	r2, [pc, #24]	; (c10 <_Z41__static_initialization_and_destruction_0ii+0x30>)
     bf8:	4906      	ldr	r1, [pc, #24]	; (c14 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     bfa:	0020      	movs	r0, r4
     bfc:	4b06      	ldr	r3, [pc, #24]	; (c18 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     bfe:	4798      	blx	r3
}
     c00:	e7f1      	b.n	be6 <_Z41__static_initialization_and_destruction_0ii+0x6>
     c02:	46c0      	nop			; (mov r8, r8)
     c04:	0000ffff 	.word	0x0000ffff
     c08:	20000a60 	.word	0x20000a60
     c0c:	00000151 	.word	0x00000151
     c10:	20000000 	.word	0x20000000
     c14:	000001a1 	.word	0x000001a1
     c18:	00008bd5 	.word	0x00008bd5

00000c1c <main>:
{
     c1c:	b510      	push	{r4, lr}
	atmel_start_init();
     c1e:	4b0a      	ldr	r3, [pc, #40]	; (c48 <main+0x2c>)
     c20:	4798      	blx	r3
	printf("hello\n\r");
     c22:	480a      	ldr	r0, [pc, #40]	; (c4c <main+0x30>)
     c24:	4b0a      	ldr	r3, [pc, #40]	; (c50 <main+0x34>)
     c26:	4798      	blx	r3
	adf.Init();
     c28:	480a      	ldr	r0, [pc, #40]	; (c54 <main+0x38>)
     c2a:	4b0b      	ldr	r3, [pc, #44]	; (c58 <main+0x3c>)
     c2c:	4798      	blx	r3
		adf.SelfTest(1);
     c2e:	4c09      	ldr	r4, [pc, #36]	; (c54 <main+0x38>)
     c30:	2101      	movs	r1, #1
     c32:	0020      	movs	r0, r4
     c34:	4b09      	ldr	r3, [pc, #36]	; (c5c <main+0x40>)
     c36:	4798      	blx	r3
		delay_ms(1000);
     c38:	20fa      	movs	r0, #250	; 0xfa
     c3a:	0080      	lsls	r0, r0, #2
     c3c:	4b08      	ldr	r3, [pc, #32]	; (c60 <main+0x44>)
     c3e:	4798      	blx	r3
		adf.Init();
     c40:	0020      	movs	r0, r4
     c42:	4b05      	ldr	r3, [pc, #20]	; (c58 <main+0x3c>)
     c44:	4798      	blx	r3
     c46:	e7f2      	b.n	c2e <main+0x12>
     c48:	00000d0d 	.word	0x00000d0d
     c4c:	00012120 	.word	0x00012120
     c50:	0000d225 	.word	0x0000d225
     c54:	20000a60 	.word	0x20000a60
     c58:	0000089d 	.word	0x0000089d
     c5c:	00000939 	.word	0x00000939
     c60:	00001ab9 	.word	0x00001ab9

00000c64 <_GLOBAL__sub_I_adf>:
}
     c64:	b510      	push	{r4, lr}
     c66:	4902      	ldr	r1, [pc, #8]	; (c70 <_GLOBAL__sub_I_adf+0xc>)
     c68:	2001      	movs	r0, #1
     c6a:	4b02      	ldr	r3, [pc, #8]	; (c74 <_GLOBAL__sub_I_adf+0x10>)
     c6c:	4798      	blx	r3
     c6e:	bd10      	pop	{r4, pc}
     c70:	0000ffff 	.word	0x0000ffff
     c74:	00000be1 	.word	0x00000be1

00000c78 <_ZN17SPI_Syn_Class_ADFC1Ev>:


// default constructor
SPI_Syn_Class_ADF::SPI_Syn_Class_ADF()
{
		ptrSPISync_adf=this;
     c78:	4b01      	ldr	r3, [pc, #4]	; (c80 <_ZN17SPI_Syn_Class_ADFC1Ev+0x8>)
     c7a:	6018      	str	r0, [r3, #0]
//	SPI=SPI_1;
} //SPI_Syn_Class_ADF
     c7c:	4770      	bx	lr
     c7e:	46c0      	nop			; (mov r8, r8)
     c80:	20000be8 	.word	0x20000be8

00000c84 <_ZN17SPI_Syn_Class_ADFD1Ev>:


// default destructor
SPI_Syn_Class_ADF::~SPI_Syn_Class_ADF()
{
} //~SPI_Syn_Class_ADF
     c84:	4770      	bx	lr
	...

00000c88 <_ZN17SPI_Syn_Class_ADF6EnableEv>:
	
}



uint8_t SPI_Syn_Class_ADF::Enable(){
     c88:	b510      	push	{r4, lr}
	spi_m_sync_enable(&SPI_ADF);
     c8a:	4802      	ldr	r0, [pc, #8]	; (c94 <_ZN17SPI_Syn_Class_ADF6EnableEv+0xc>)
     c8c:	4b02      	ldr	r3, [pc, #8]	; (c98 <_ZN17SPI_Syn_Class_ADF6EnableEv+0x10>)
     c8e:	4798      	blx	r3
	return 0;
}
     c90:	2000      	movs	r0, #0
     c92:	bd10      	pop	{r4, pc}
     c94:	2000127c 	.word	0x2000127c
     c98:	00001c21 	.word	0x00001c21

00000c9c <_ZN17SPI_Syn_Class_ADF4InitEv>:
void SPI_Syn_Class_ADF::Init(){
     c9c:	b510      	push	{r4, lr}
     c9e:	0004      	movs	r4, r0
	spi_m_sync_get_io_descriptor(&SPI_ADF, &io);
     ca0:	0001      	movs	r1, r0
     ca2:	310c      	adds	r1, #12
     ca4:	4804      	ldr	r0, [pc, #16]	; (cb8 <_ZN17SPI_Syn_Class_ADF4InitEv+0x1c>)
     ca6:	4b05      	ldr	r3, [pc, #20]	; (cbc <_ZN17SPI_Syn_Class_ADF4InitEv+0x20>)
     ca8:	4798      	blx	r3
	Enable();
     caa:	0020      	movs	r0, r4
     cac:	4b04      	ldr	r3, [pc, #16]	; (cc0 <_ZN17SPI_Syn_Class_ADF4InitEv+0x24>)
     cae:	4798      	blx	r3
	ready=true;
     cb0:	2301      	movs	r3, #1
     cb2:	7023      	strb	r3, [r4, #0]
}
     cb4:	bd10      	pop	{r4, pc}
     cb6:	46c0      	nop			; (mov r8, r8)
     cb8:	2000127c 	.word	0x2000127c
     cbc:	00001d95 	.word	0x00001d95
     cc0:	00000c89 	.word	0x00000c89

00000cc4 <_ZN17SPI_Syn_Class_ADF5WriteEPKhh>:

uint8_t  SPI_Syn_Class_ADF::Write(const uint8_t * p, uint8_t n){
     cc4:	b510      	push	{r4, lr}
     cc6:	0014      	movs	r4, r2
	ready=false;
     cc8:	2300      	movs	r3, #0
     cca:	7003      	strb	r3, [r0, #0]

	io_write(io, p, (uint16_t)n);
     ccc:	68c0      	ldr	r0, [r0, #12]
     cce:	b292      	uxth	r2, r2
     cd0:	4b01      	ldr	r3, [pc, #4]	; (cd8 <_ZN17SPI_Syn_Class_ADF5WriteEPKhh+0x14>)
     cd2:	4798      	blx	r3

	return n;
}
     cd4:	0020      	movs	r0, r4
     cd6:	bd10      	pop	{r4, pc}
     cd8:	00001af1 	.word	0x00001af1

00000cdc <_ZN17SPI_Syn_Class_ADF4ReadEPhh>:
uint8_t  SPI_Syn_Class_ADF::Read(uint8_t * p, uint8_t n){
     cdc:	b510      	push	{r4, lr}
     cde:	0014      	movs	r4, r2
	ready=false;
     ce0:	2300      	movs	r3, #0
     ce2:	7003      	strb	r3, [r0, #0]
	io_read(io, p, (uint16_t)n);
     ce4:	68c0      	ldr	r0, [r0, #12]
     ce6:	b292      	uxth	r2, r2
     ce8:	4b01      	ldr	r3, [pc, #4]	; (cf0 <_ZN17SPI_Syn_Class_ADF4ReadEPhh+0x14>)
     cea:	4798      	blx	r3

	
	return n;
}
     cec:	0020      	movs	r0, r4
     cee:	bd10      	pop	{r4, pc}
     cf0:	00001b45 	.word	0x00001b45

00000cf4 <_ZN17SPI_Syn_Class_ADF5SetCSEb>:
	if (level) {
     cf4:	2900      	cmp	r1, #0
     cf6:	d104      	bne.n	d02 <_ZN17SPI_Syn_Class_ADF5SetCSEb+0xe>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     cf8:	2280      	movs	r2, #128	; 0x80
     cfa:	23c0      	movs	r3, #192	; 0xc0
     cfc:	05db      	lsls	r3, r3, #23
     cfe:	615a      	str	r2, [r3, #20]
	//spi_m_sync_disable(SPI);
	
}
void SPI_Syn_Class_ADF::SetCS(bool st){
	gpio_set_pin_level(CS_ADF,st);
}
     d00:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     d02:	2280      	movs	r2, #128	; 0x80
     d04:	23c0      	movs	r3, #192	; 0xc0
     d06:	05db      	lsls	r3, r3, #23
     d08:	619a      	str	r2, [r3, #24]
     d0a:	e7f9      	b.n	d00 <_ZN17SPI_Syn_Class_ADF5SetCSEb+0xc>

00000d0c <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     d0c:	b580      	push	{r7, lr}
     d0e:	af00      	add	r7, sp, #0
	system_init();
     d10:	4b04      	ldr	r3, [pc, #16]	; (d24 <atmel_start_init+0x18>)
     d12:	4798      	blx	r3
	usb_init();
     d14:	4b04      	ldr	r3, [pc, #16]	; (d28 <atmel_start_init+0x1c>)
     d16:	4798      	blx	r3
	stdio_redirect_init();
     d18:	4b04      	ldr	r3, [pc, #16]	; (d2c <atmel_start_init+0x20>)
     d1a:	4798      	blx	r3
}
     d1c:	46c0      	nop			; (mov r8, r8)
     d1e:	46bd      	mov	sp, r7
     d20:	bd80      	pop	{r7, pc}
     d22:	46c0      	nop			; (mov r8, r8)
     d24:	00001995 	.word	0x00001995
     d28:	00007361 	.word	0x00007361
     d2c:	000072fd 	.word	0x000072fd

00000d30 <hri_gclk_write_CLKCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
     d30:	b580      	push	{r7, lr}
     d32:	b082      	sub	sp, #8
     d34:	af00      	add	r7, sp, #0
     d36:	6078      	str	r0, [r7, #4]
     d38:	000a      	movs	r2, r1
     d3a:	1cbb      	adds	r3, r7, #2
     d3c:	801a      	strh	r2, [r3, #0]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     d3e:	687b      	ldr	r3, [r7, #4]
     d40:	1cba      	adds	r2, r7, #2
     d42:	8812      	ldrh	r2, [r2, #0]
     d44:	805a      	strh	r2, [r3, #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     d46:	46c0      	nop			; (mov r8, r8)
     d48:	46bd      	mov	sp, r7
     d4a:	b002      	add	sp, #8
     d4c:	bd80      	pop	{r7, pc}

00000d4e <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     d4e:	b580      	push	{r7, lr}
     d50:	b084      	sub	sp, #16
     d52:	af00      	add	r7, sp, #0
     d54:	60f8      	str	r0, [r7, #12]
     d56:	607a      	str	r2, [r7, #4]
     d58:	230b      	movs	r3, #11
     d5a:	18fb      	adds	r3, r7, r3
     d5c:	1c0a      	adds	r2, r1, #0
     d5e:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d60:	230b      	movs	r3, #11
     d62:	18fb      	adds	r3, r7, r3
     d64:	781b      	ldrb	r3, [r3, #0]
     d66:	68fa      	ldr	r2, [r7, #12]
     d68:	01db      	lsls	r3, r3, #7
     d6a:	18d3      	adds	r3, r2, r3
     d6c:	3308      	adds	r3, #8
     d6e:	687a      	ldr	r2, [r7, #4]
     d70:	601a      	str	r2, [r3, #0]
}
     d72:	46c0      	nop			; (mov r8, r8)
     d74:	46bd      	mov	sp, r7
     d76:	b004      	add	sp, #16
     d78:	bd80      	pop	{r7, pc}

00000d7a <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     d7a:	b580      	push	{r7, lr}
     d7c:	b084      	sub	sp, #16
     d7e:	af00      	add	r7, sp, #0
     d80:	60f8      	str	r0, [r7, #12]
     d82:	607a      	str	r2, [r7, #4]
     d84:	230b      	movs	r3, #11
     d86:	18fb      	adds	r3, r7, r3
     d88:	1c0a      	adds	r2, r1, #0
     d8a:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     d8c:	230b      	movs	r3, #11
     d8e:	18fb      	adds	r3, r7, r3
     d90:	781b      	ldrb	r3, [r3, #0]
     d92:	68fa      	ldr	r2, [r7, #12]
     d94:	01db      	lsls	r3, r3, #7
     d96:	18d3      	adds	r3, r2, r3
     d98:	3304      	adds	r3, #4
     d9a:	687a      	ldr	r2, [r7, #4]
     d9c:	601a      	str	r2, [r3, #0]
}
     d9e:	46c0      	nop			; (mov r8, r8)
     da0:	46bd      	mov	sp, r7
     da2:	b004      	add	sp, #16
     da4:	bd80      	pop	{r7, pc}

00000da6 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     da6:	b580      	push	{r7, lr}
     da8:	b084      	sub	sp, #16
     daa:	af00      	add	r7, sp, #0
     dac:	60f8      	str	r0, [r7, #12]
     dae:	607a      	str	r2, [r7, #4]
     db0:	230b      	movs	r3, #11
     db2:	18fb      	adds	r3, r7, r3
     db4:	1c0a      	adds	r2, r1, #0
     db6:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     db8:	230b      	movs	r3, #11
     dba:	18fb      	adds	r3, r7, r3
     dbc:	781b      	ldrb	r3, [r3, #0]
     dbe:	68fa      	ldr	r2, [r7, #12]
     dc0:	01db      	lsls	r3, r3, #7
     dc2:	18d3      	adds	r3, r2, r3
     dc4:	3318      	adds	r3, #24
     dc6:	687a      	ldr	r2, [r7, #4]
     dc8:	601a      	str	r2, [r3, #0]
}
     dca:	46c0      	nop			; (mov r8, r8)
     dcc:	46bd      	mov	sp, r7
     dce:	b004      	add	sp, #16
     dd0:	bd80      	pop	{r7, pc}

00000dd2 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     dd2:	b580      	push	{r7, lr}
     dd4:	b084      	sub	sp, #16
     dd6:	af00      	add	r7, sp, #0
     dd8:	60f8      	str	r0, [r7, #12]
     dda:	607a      	str	r2, [r7, #4]
     ddc:	230b      	movs	r3, #11
     dde:	18fb      	adds	r3, r7, r3
     de0:	1c0a      	adds	r2, r1, #0
     de2:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     de4:	230b      	movs	r3, #11
     de6:	18fb      	adds	r3, r7, r3
     de8:	781b      	ldrb	r3, [r3, #0]
     dea:	68fa      	ldr	r2, [r7, #12]
     dec:	01db      	lsls	r3, r3, #7
     dee:	18d3      	adds	r3, r2, r3
     df0:	3314      	adds	r3, #20
     df2:	687a      	ldr	r2, [r7, #4]
     df4:	601a      	str	r2, [r3, #0]
}
     df6:	46c0      	nop			; (mov r8, r8)
     df8:	46bd      	mov	sp, r7
     dfa:	b004      	add	sp, #16
     dfc:	bd80      	pop	{r7, pc}

00000dfe <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     dfe:	b590      	push	{r4, r7, lr}
     e00:	b085      	sub	sp, #20
     e02:	af00      	add	r7, sp, #0
     e04:	6078      	str	r0, [r7, #4]
     e06:	000c      	movs	r4, r1
     e08:	0010      	movs	r0, r2
     e0a:	0019      	movs	r1, r3
     e0c:	1cfb      	adds	r3, r7, #3
     e0e:	1c22      	adds	r2, r4, #0
     e10:	701a      	strb	r2, [r3, #0]
     e12:	1cbb      	adds	r3, r7, #2
     e14:	1c02      	adds	r2, r0, #0
     e16:	701a      	strb	r2, [r3, #0]
     e18:	1c7b      	adds	r3, r7, #1
     e1a:	1c0a      	adds	r2, r1, #0
     e1c:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     e1e:	1cfb      	adds	r3, r7, #3
     e20:	7819      	ldrb	r1, [r3, #0]
     e22:	1cbb      	adds	r3, r7, #2
     e24:	781a      	ldrb	r2, [r3, #0]
     e26:	230f      	movs	r3, #15
     e28:	18fb      	adds	r3, r7, r3
     e2a:	6878      	ldr	r0, [r7, #4]
     e2c:	2430      	movs	r4, #48	; 0x30
     e2e:	01c9      	lsls	r1, r1, #7
     e30:	1841      	adds	r1, r0, r1
     e32:	188a      	adds	r2, r1, r2
     e34:	1912      	adds	r2, r2, r4
     e36:	7812      	ldrb	r2, [r2, #0]
     e38:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     e3a:	230f      	movs	r3, #15
     e3c:	18fb      	adds	r3, r7, r3
     e3e:	220f      	movs	r2, #15
     e40:	18ba      	adds	r2, r7, r2
     e42:	7812      	ldrb	r2, [r2, #0]
     e44:	210f      	movs	r1, #15
     e46:	438a      	bics	r2, r1
     e48:	701a      	strb	r2, [r3, #0]
	tmp |= PORT_PMUX_PMUXE(data);
     e4a:	1c7b      	adds	r3, r7, #1
     e4c:	781b      	ldrb	r3, [r3, #0]
     e4e:	220f      	movs	r2, #15
     e50:	4013      	ands	r3, r2
     e52:	b2d9      	uxtb	r1, r3
     e54:	230f      	movs	r3, #15
     e56:	18fb      	adds	r3, r7, r3
     e58:	220f      	movs	r2, #15
     e5a:	18ba      	adds	r2, r7, r2
     e5c:	7812      	ldrb	r2, [r2, #0]
     e5e:	430a      	orrs	r2, r1
     e60:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     e62:	1cfb      	adds	r3, r7, #3
     e64:	781a      	ldrb	r2, [r3, #0]
     e66:	1cbb      	adds	r3, r7, #2
     e68:	781b      	ldrb	r3, [r3, #0]
     e6a:	6879      	ldr	r1, [r7, #4]
     e6c:	2030      	movs	r0, #48	; 0x30
     e6e:	01d2      	lsls	r2, r2, #7
     e70:	188a      	adds	r2, r1, r2
     e72:	18d3      	adds	r3, r2, r3
     e74:	181b      	adds	r3, r3, r0
     e76:	220f      	movs	r2, #15
     e78:	18ba      	adds	r2, r7, r2
     e7a:	7812      	ldrb	r2, [r2, #0]
     e7c:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     e7e:	46c0      	nop			; (mov r8, r8)
     e80:	46bd      	mov	sp, r7
     e82:	b005      	add	sp, #20
     e84:	bd90      	pop	{r4, r7, pc}

00000e86 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     e86:	b590      	push	{r4, r7, lr}
     e88:	b085      	sub	sp, #20
     e8a:	af00      	add	r7, sp, #0
     e8c:	6078      	str	r0, [r7, #4]
     e8e:	000c      	movs	r4, r1
     e90:	0010      	movs	r0, r2
     e92:	0019      	movs	r1, r3
     e94:	1cfb      	adds	r3, r7, #3
     e96:	1c22      	adds	r2, r4, #0
     e98:	701a      	strb	r2, [r3, #0]
     e9a:	1cbb      	adds	r3, r7, #2
     e9c:	1c02      	adds	r2, r0, #0
     e9e:	701a      	strb	r2, [r3, #0]
     ea0:	1c7b      	adds	r3, r7, #1
     ea2:	1c0a      	adds	r2, r1, #0
     ea4:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     ea6:	1cfb      	adds	r3, r7, #3
     ea8:	7819      	ldrb	r1, [r3, #0]
     eaa:	1cbb      	adds	r3, r7, #2
     eac:	781a      	ldrb	r2, [r3, #0]
     eae:	230f      	movs	r3, #15
     eb0:	18fb      	adds	r3, r7, r3
     eb2:	6878      	ldr	r0, [r7, #4]
     eb4:	2430      	movs	r4, #48	; 0x30
     eb6:	01c9      	lsls	r1, r1, #7
     eb8:	1841      	adds	r1, r0, r1
     eba:	188a      	adds	r2, r1, r2
     ebc:	1912      	adds	r2, r2, r4
     ebe:	7812      	ldrb	r2, [r2, #0]
     ec0:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     ec2:	230f      	movs	r3, #15
     ec4:	18fb      	adds	r3, r7, r3
     ec6:	220f      	movs	r2, #15
     ec8:	18ba      	adds	r2, r7, r2
     eca:	7812      	ldrb	r2, [r2, #0]
     ecc:	210f      	movs	r1, #15
     ece:	400a      	ands	r2, r1
     ed0:	701a      	strb	r2, [r3, #0]
	tmp |= PORT_PMUX_PMUXO(data);
     ed2:	1c7b      	adds	r3, r7, #1
     ed4:	781b      	ldrb	r3, [r3, #0]
     ed6:	011b      	lsls	r3, r3, #4
     ed8:	b2d9      	uxtb	r1, r3
     eda:	230f      	movs	r3, #15
     edc:	18fb      	adds	r3, r7, r3
     ede:	220f      	movs	r2, #15
     ee0:	18ba      	adds	r2, r7, r2
     ee2:	7812      	ldrb	r2, [r2, #0]
     ee4:	430a      	orrs	r2, r1
     ee6:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ee8:	1cfb      	adds	r3, r7, #3
     eea:	781a      	ldrb	r2, [r3, #0]
     eec:	1cbb      	adds	r3, r7, #2
     eee:	781b      	ldrb	r3, [r3, #0]
     ef0:	6879      	ldr	r1, [r7, #4]
     ef2:	2030      	movs	r0, #48	; 0x30
     ef4:	01d2      	lsls	r2, r2, #7
     ef6:	188a      	adds	r2, r1, r2
     ef8:	18d3      	adds	r3, r2, r3
     efa:	181b      	adds	r3, r3, r0
     efc:	220f      	movs	r2, #15
     efe:	18ba      	adds	r2, r7, r2
     f00:	7812      	ldrb	r2, [r2, #0]
     f02:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     f04:	46c0      	nop			; (mov r8, r8)
     f06:	46bd      	mov	sp, r7
     f08:	b005      	add	sp, #20
     f0a:	bd90      	pop	{r4, r7, pc}

00000f0c <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
     f0c:	b590      	push	{r4, r7, lr}
     f0e:	b085      	sub	sp, #20
     f10:	af00      	add	r7, sp, #0
     f12:	6078      	str	r0, [r7, #4]
     f14:	000c      	movs	r4, r1
     f16:	0010      	movs	r0, r2
     f18:	0019      	movs	r1, r3
     f1a:	1cfb      	adds	r3, r7, #3
     f1c:	1c22      	adds	r2, r4, #0
     f1e:	701a      	strb	r2, [r3, #0]
     f20:	1cbb      	adds	r3, r7, #2
     f22:	1c02      	adds	r2, r0, #0
     f24:	701a      	strb	r2, [r3, #0]
     f26:	1c7b      	adds	r3, r7, #1
     f28:	1c0a      	adds	r2, r1, #0
     f2a:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f2c:	1cfb      	adds	r3, r7, #3
     f2e:	7819      	ldrb	r1, [r3, #0]
     f30:	1cbb      	adds	r3, r7, #2
     f32:	781a      	ldrb	r2, [r3, #0]
     f34:	230f      	movs	r3, #15
     f36:	18fb      	adds	r3, r7, r3
     f38:	6878      	ldr	r0, [r7, #4]
     f3a:	2440      	movs	r4, #64	; 0x40
     f3c:	01c9      	lsls	r1, r1, #7
     f3e:	1841      	adds	r1, r0, r1
     f40:	188a      	adds	r2, r1, r2
     f42:	1912      	adds	r2, r2, r4
     f44:	7812      	ldrb	r2, [r2, #0]
     f46:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     f48:	230f      	movs	r3, #15
     f4a:	18fb      	adds	r3, r7, r3
     f4c:	220f      	movs	r2, #15
     f4e:	18ba      	adds	r2, r7, r2
     f50:	7812      	ldrb	r2, [r2, #0]
     f52:	2101      	movs	r1, #1
     f54:	438a      	bics	r2, r1
     f56:	701a      	strb	r2, [r3, #0]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     f58:	1c7b      	adds	r3, r7, #1
     f5a:	7819      	ldrb	r1, [r3, #0]
     f5c:	230f      	movs	r3, #15
     f5e:	18fb      	adds	r3, r7, r3
     f60:	220f      	movs	r2, #15
     f62:	18ba      	adds	r2, r7, r2
     f64:	7812      	ldrb	r2, [r2, #0]
     f66:	430a      	orrs	r2, r1
     f68:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f6a:	1cfb      	adds	r3, r7, #3
     f6c:	781a      	ldrb	r2, [r3, #0]
     f6e:	1cbb      	adds	r3, r7, #2
     f70:	781b      	ldrb	r3, [r3, #0]
     f72:	6879      	ldr	r1, [r7, #4]
     f74:	2040      	movs	r0, #64	; 0x40
     f76:	01d2      	lsls	r2, r2, #7
     f78:	188a      	adds	r2, r1, r2
     f7a:	18d3      	adds	r3, r2, r3
     f7c:	181b      	adds	r3, r3, r0
     f7e:	220f      	movs	r2, #15
     f80:	18ba      	adds	r2, r7, r2
     f82:	7812      	ldrb	r2, [r2, #0]
     f84:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     f86:	46c0      	nop			; (mov r8, r8)
     f88:	46bd      	mov	sp, r7
     f8a:	b005      	add	sp, #20
     f8c:	bd90      	pop	{r4, r7, pc}

00000f8e <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     f8e:	b5b0      	push	{r4, r5, r7, lr}
     f90:	b082      	sub	sp, #8
     f92:	af00      	add	r7, sp, #0
     f94:	6078      	str	r0, [r7, #4]
     f96:	0008      	movs	r0, r1
     f98:	0011      	movs	r1, r2
     f9a:	1cfb      	adds	r3, r7, #3
     f9c:	1c02      	adds	r2, r0, #0
     f9e:	701a      	strb	r2, [r3, #0]
     fa0:	1cbb      	adds	r3, r7, #2
     fa2:	1c0a      	adds	r2, r1, #0
     fa4:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     fa6:	1cfb      	adds	r3, r7, #3
     fa8:	781a      	ldrb	r2, [r3, #0]
     faa:	1cbb      	adds	r3, r7, #2
     fac:	781b      	ldrb	r3, [r3, #0]
     fae:	1cf9      	adds	r1, r7, #3
     fb0:	7808      	ldrb	r0, [r1, #0]
     fb2:	1cb9      	adds	r1, r7, #2
     fb4:	7809      	ldrb	r1, [r1, #0]
     fb6:	687c      	ldr	r4, [r7, #4]
     fb8:	2540      	movs	r5, #64	; 0x40
     fba:	01c0      	lsls	r0, r0, #7
     fbc:	1820      	adds	r0, r4, r0
     fbe:	1841      	adds	r1, r0, r1
     fc0:	1949      	adds	r1, r1, r5
     fc2:	7809      	ldrb	r1, [r1, #0]
     fc4:	b2c9      	uxtb	r1, r1
     fc6:	2004      	movs	r0, #4
     fc8:	4301      	orrs	r1, r0
     fca:	b2cc      	uxtb	r4, r1
     fcc:	6879      	ldr	r1, [r7, #4]
     fce:	2040      	movs	r0, #64	; 0x40
     fd0:	01d2      	lsls	r2, r2, #7
     fd2:	188a      	adds	r2, r1, r2
     fd4:	18d3      	adds	r3, r2, r3
     fd6:	181b      	adds	r3, r3, r0
     fd8:	1c22      	adds	r2, r4, #0
     fda:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     fdc:	46c0      	nop			; (mov r8, r8)
     fde:	46bd      	mov	sp, r7
     fe0:	b002      	add	sp, #8
     fe2:	bdb0      	pop	{r4, r5, r7, pc}

00000fe4 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     fe4:	b5b0      	push	{r4, r5, r7, lr}
     fe6:	b082      	sub	sp, #8
     fe8:	af00      	add	r7, sp, #0
     fea:	6078      	str	r0, [r7, #4]
     fec:	0008      	movs	r0, r1
     fee:	0011      	movs	r1, r2
     ff0:	1cfb      	adds	r3, r7, #3
     ff2:	1c02      	adds	r2, r0, #0
     ff4:	701a      	strb	r2, [r3, #0]
     ff6:	1cbb      	adds	r3, r7, #2
     ff8:	1c0a      	adds	r2, r1, #0
     ffa:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     ffc:	1cfb      	adds	r3, r7, #3
     ffe:	781a      	ldrb	r2, [r3, #0]
    1000:	1cbb      	adds	r3, r7, #2
    1002:	781b      	ldrb	r3, [r3, #0]
    1004:	1cf9      	adds	r1, r7, #3
    1006:	7808      	ldrb	r0, [r1, #0]
    1008:	1cb9      	adds	r1, r7, #2
    100a:	7809      	ldrb	r1, [r1, #0]
    100c:	687c      	ldr	r4, [r7, #4]
    100e:	2540      	movs	r5, #64	; 0x40
    1010:	01c0      	lsls	r0, r0, #7
    1012:	1820      	adds	r0, r4, r0
    1014:	1841      	adds	r1, r0, r1
    1016:	1949      	adds	r1, r1, r5
    1018:	7809      	ldrb	r1, [r1, #0]
    101a:	b2c9      	uxtb	r1, r1
    101c:	2004      	movs	r0, #4
    101e:	4381      	bics	r1, r0
    1020:	b2cc      	uxtb	r4, r1
    1022:	6879      	ldr	r1, [r7, #4]
    1024:	2040      	movs	r0, #64	; 0x40
    1026:	01d2      	lsls	r2, r2, #7
    1028:	188a      	adds	r2, r1, r2
    102a:	18d3      	adds	r3, r2, r3
    102c:	181b      	adds	r3, r3, r0
    102e:	1c22      	adds	r2, r4, #0
    1030:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1032:	46c0      	nop			; (mov r8, r8)
    1034:	46bd      	mov	sp, r7
    1036:	b002      	add	sp, #8
    1038:	bdb0      	pop	{r4, r5, r7, pc}

0000103a <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
    103a:	b580      	push	{r7, lr}
    103c:	b084      	sub	sp, #16
    103e:	af00      	add	r7, sp, #0
    1040:	60f8      	str	r0, [r7, #12]
    1042:	607a      	str	r2, [r7, #4]
    1044:	230b      	movs	r3, #11
    1046:	18fb      	adds	r3, r7, r3
    1048:	1c0a      	adds	r2, r1, #0
    104a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    104c:	230b      	movs	r3, #11
    104e:	18fb      	adds	r3, r7, r3
    1050:	781b      	ldrb	r3, [r3, #0]
    1052:	68fa      	ldr	r2, [r7, #12]
    1054:	01db      	lsls	r3, r3, #7
    1056:	18d3      	adds	r3, r2, r3
    1058:	3328      	adds	r3, #40	; 0x28
    105a:	687a      	ldr	r2, [r7, #4]
    105c:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    105e:	46c0      	nop			; (mov r8, r8)
    1060:	46bd      	mov	sp, r7
    1062:	b004      	add	sp, #16
    1064:	bd80      	pop	{r7, pc}
	...

00001068 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
    1068:	b580      	push	{r7, lr}
    106a:	b082      	sub	sp, #8
    106c:	af00      	add	r7, sp, #0
    106e:	6039      	str	r1, [r7, #0]
    1070:	0011      	movs	r1, r2
    1072:	1dfb      	adds	r3, r7, #7
    1074:	1c02      	adds	r2, r0, #0
    1076:	701a      	strb	r2, [r3, #0]
    1078:	1dbb      	adds	r3, r7, #6
    107a:	1c0a      	adds	r2, r1, #0
    107c:	701a      	strb	r2, [r3, #0]
	switch (direction) {
    107e:	1dbb      	adds	r3, r7, #6
    1080:	781b      	ldrb	r3, [r3, #0]
    1082:	2b01      	cmp	r3, #1
    1084:	d023      	beq.n	10ce <_gpio_set_direction+0x66>
    1086:	2b02      	cmp	r3, #2
    1088:	d03f      	beq.n	110a <_gpio_set_direction+0xa2>
    108a:	2b00      	cmp	r3, #0
    108c:	d15d      	bne.n	114a <_gpio_set_direction+0xe2>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, mask);
    108e:	683a      	ldr	r2, [r7, #0]
    1090:	1dfb      	adds	r3, r7, #7
    1092:	7819      	ldrb	r1, [r3, #0]
    1094:	23c0      	movs	r3, #192	; 0xc0
    1096:	05db      	lsls	r3, r3, #23
    1098:	0018      	movs	r0, r3
    109a:	4b31      	ldr	r3, [pc, #196]	; (1160 <_gpio_set_direction+0xf8>)
    109c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    109e:	683b      	ldr	r3, [r7, #0]
    10a0:	041b      	lsls	r3, r3, #16
    10a2:	0c1b      	lsrs	r3, r3, #16
    10a4:	2280      	movs	r2, #128	; 0x80
    10a6:	05d2      	lsls	r2, r2, #23
    10a8:	431a      	orrs	r2, r3
    10aa:	1dfb      	adds	r3, r7, #7
    10ac:	781b      	ldrb	r3, [r3, #0]
    10ae:	482d      	ldr	r0, [pc, #180]	; (1164 <_gpio_set_direction+0xfc>)
    10b0:	0019      	movs	r1, r3
    10b2:	4b2d      	ldr	r3, [pc, #180]	; (1168 <_gpio_set_direction+0x100>)
    10b4:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    10b6:	683b      	ldr	r3, [r7, #0]
    10b8:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    10ba:	22c0      	movs	r2, #192	; 0xc0
    10bc:	0612      	lsls	r2, r2, #24
    10be:	431a      	orrs	r2, r3
    10c0:	1dfb      	adds	r3, r7, #7
    10c2:	781b      	ldrb	r3, [r3, #0]
    10c4:	4827      	ldr	r0, [pc, #156]	; (1164 <_gpio_set_direction+0xfc>)
    10c6:	0019      	movs	r1, r3
    10c8:	4b27      	ldr	r3, [pc, #156]	; (1168 <_gpio_set_direction+0x100>)
    10ca:	4798      	blx	r3
		break;
    10cc:	e043      	b.n	1156 <_gpio_set_direction+0xee>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, mask);
    10ce:	683a      	ldr	r2, [r7, #0]
    10d0:	1dfb      	adds	r3, r7, #7
    10d2:	7819      	ldrb	r1, [r3, #0]
    10d4:	23c0      	movs	r3, #192	; 0xc0
    10d6:	05db      	lsls	r3, r3, #23
    10d8:	0018      	movs	r0, r3
    10da:	4b21      	ldr	r3, [pc, #132]	; (1160 <_gpio_set_direction+0xf8>)
    10dc:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    10de:	683b      	ldr	r3, [r7, #0]
    10e0:	041b      	lsls	r3, r3, #16
    10e2:	0c1b      	lsrs	r3, r3, #16
    10e4:	4a21      	ldr	r2, [pc, #132]	; (116c <_gpio_set_direction+0x104>)
    10e6:	431a      	orrs	r2, r3
    10e8:	1dfb      	adds	r3, r7, #7
    10ea:	781b      	ldrb	r3, [r3, #0]
    10ec:	481d      	ldr	r0, [pc, #116]	; (1164 <_gpio_set_direction+0xfc>)
    10ee:	0019      	movs	r1, r3
    10f0:	4b1d      	ldr	r3, [pc, #116]	; (1168 <_gpio_set_direction+0x100>)
    10f2:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
    10f4:	683b      	ldr	r3, [r7, #0]
    10f6:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    10f8:	4a1d      	ldr	r2, [pc, #116]	; (1170 <_gpio_set_direction+0x108>)
    10fa:	431a      	orrs	r2, r3
    10fc:	1dfb      	adds	r3, r7, #7
    10fe:	781b      	ldrb	r3, [r3, #0]
    1100:	4818      	ldr	r0, [pc, #96]	; (1164 <_gpio_set_direction+0xfc>)
    1102:	0019      	movs	r1, r3
    1104:	4b18      	ldr	r3, [pc, #96]	; (1168 <_gpio_set_direction+0x100>)
    1106:	4798      	blx	r3
		break;
    1108:	e025      	b.n	1156 <_gpio_set_direction+0xee>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT_IOBUS, port, mask);
    110a:	683a      	ldr	r2, [r7, #0]
    110c:	1dfb      	adds	r3, r7, #7
    110e:	7819      	ldrb	r1, [r3, #0]
    1110:	23c0      	movs	r3, #192	; 0xc0
    1112:	05db      	lsls	r3, r3, #23
    1114:	0018      	movs	r0, r3
    1116:	4b17      	ldr	r3, [pc, #92]	; (1174 <_gpio_set_direction+0x10c>)
    1118:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    111a:	683b      	ldr	r3, [r7, #0]
    111c:	041b      	lsls	r3, r3, #16
    111e:	0c1b      	lsrs	r3, r3, #16
    1120:	2280      	movs	r2, #128	; 0x80
    1122:	05d2      	lsls	r2, r2, #23
    1124:	431a      	orrs	r2, r3
    1126:	1dfb      	adds	r3, r7, #7
    1128:	781b      	ldrb	r3, [r3, #0]
    112a:	480e      	ldr	r0, [pc, #56]	; (1164 <_gpio_set_direction+0xfc>)
    112c:	0019      	movs	r1, r3
    112e:	4b0e      	ldr	r3, [pc, #56]	; (1168 <_gpio_set_direction+0x100>)
    1130:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    1132:	683b      	ldr	r3, [r7, #0]
    1134:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    1136:	22c0      	movs	r2, #192	; 0xc0
    1138:	0612      	lsls	r2, r2, #24
    113a:	431a      	orrs	r2, r3
    113c:	1dfb      	adds	r3, r7, #7
    113e:	781b      	ldrb	r3, [r3, #0]
    1140:	4808      	ldr	r0, [pc, #32]	; (1164 <_gpio_set_direction+0xfc>)
    1142:	0019      	movs	r1, r3
    1144:	4b08      	ldr	r3, [pc, #32]	; (1168 <_gpio_set_direction+0x100>)
    1146:	4798      	blx	r3
		break;
    1148:	e005      	b.n	1156 <_gpio_set_direction+0xee>

	default:
		ASSERT(false);
    114a:	4b0b      	ldr	r3, [pc, #44]	; (1178 <_gpio_set_direction+0x110>)
    114c:	2245      	movs	r2, #69	; 0x45
    114e:	0019      	movs	r1, r3
    1150:	2000      	movs	r0, #0
    1152:	4b0a      	ldr	r3, [pc, #40]	; (117c <_gpio_set_direction+0x114>)
    1154:	4798      	blx	r3
	}
}
    1156:	46c0      	nop			; (mov r8, r8)
    1158:	46bd      	mov	sp, r7
    115a:	b002      	add	sp, #8
    115c:	bd80      	pop	{r7, pc}
    115e:	46c0      	nop			; (mov r8, r8)
    1160:	00000d7b 	.word	0x00000d7b
    1164:	41004400 	.word	0x41004400
    1168:	0000103b 	.word	0x0000103b
    116c:	40020000 	.word	0x40020000
    1170:	c0020000 	.word	0xc0020000
    1174:	00000d4f 	.word	0x00000d4f
    1178:	00012128 	.word	0x00012128
    117c:	00002a9d 	.word	0x00002a9d

00001180 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    1180:	b580      	push	{r7, lr}
    1182:	b082      	sub	sp, #8
    1184:	af00      	add	r7, sp, #0
    1186:	6039      	str	r1, [r7, #0]
    1188:	0011      	movs	r1, r2
    118a:	1dfb      	adds	r3, r7, #7
    118c:	1c02      	adds	r2, r0, #0
    118e:	701a      	strb	r2, [r3, #0]
    1190:	1dbb      	adds	r3, r7, #6
    1192:	1c0a      	adds	r2, r1, #0
    1194:	701a      	strb	r2, [r3, #0]
	if (level) {
    1196:	1dbb      	adds	r3, r7, #6
    1198:	781b      	ldrb	r3, [r3, #0]
    119a:	2b00      	cmp	r3, #0
    119c:	d008      	beq.n	11b0 <_gpio_set_level+0x30>
		hri_port_set_OUT_reg(PORT_IOBUS, port, mask);
    119e:	683a      	ldr	r2, [r7, #0]
    11a0:	1dfb      	adds	r3, r7, #7
    11a2:	7819      	ldrb	r1, [r3, #0]
    11a4:	23c0      	movs	r3, #192	; 0xc0
    11a6:	05db      	lsls	r3, r3, #23
    11a8:	0018      	movs	r0, r3
    11aa:	4b07      	ldr	r3, [pc, #28]	; (11c8 <_gpio_set_level+0x48>)
    11ac:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
	}
}
    11ae:	e007      	b.n	11c0 <_gpio_set_level+0x40>
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
    11b0:	683a      	ldr	r2, [r7, #0]
    11b2:	1dfb      	adds	r3, r7, #7
    11b4:	7819      	ldrb	r1, [r3, #0]
    11b6:	23c0      	movs	r3, #192	; 0xc0
    11b8:	05db      	lsls	r3, r3, #23
    11ba:	0018      	movs	r0, r3
    11bc:	4b03      	ldr	r3, [pc, #12]	; (11cc <_gpio_set_level+0x4c>)
    11be:	4798      	blx	r3
}
    11c0:	46c0      	nop			; (mov r8, r8)
    11c2:	46bd      	mov	sp, r7
    11c4:	b002      	add	sp, #8
    11c6:	bd80      	pop	{r7, pc}
    11c8:	00000da7 	.word	0x00000da7
    11cc:	00000dd3 	.word	0x00000dd3

000011d0 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
    11d0:	b590      	push	{r4, r7, lr}
    11d2:	b083      	sub	sp, #12
    11d4:	af00      	add	r7, sp, #0
    11d6:	0004      	movs	r4, r0
    11d8:	0008      	movs	r0, r1
    11da:	0011      	movs	r1, r2
    11dc:	1dfb      	adds	r3, r7, #7
    11de:	1c22      	adds	r2, r4, #0
    11e0:	701a      	strb	r2, [r3, #0]
    11e2:	1dbb      	adds	r3, r7, #6
    11e4:	1c02      	adds	r2, r0, #0
    11e6:	701a      	strb	r2, [r3, #0]
    11e8:	1d7b      	adds	r3, r7, #5
    11ea:	1c0a      	adds	r2, r1, #0
    11ec:	701a      	strb	r2, [r3, #0]
	switch (pull_mode) {
    11ee:	1d7b      	adds	r3, r7, #5
    11f0:	781b      	ldrb	r3, [r3, #0]
    11f2:	2b01      	cmp	r3, #1
    11f4:	d00c      	beq.n	1210 <_gpio_set_pin_pull_mode+0x40>
    11f6:	2b02      	cmp	r3, #2
    11f8:	d029      	beq.n	124e <_gpio_set_pin_pull_mode+0x7e>
    11fa:	2b00      	cmp	r3, #0
    11fc:	d146      	bne.n	128c <_gpio_set_pin_pull_mode+0xbc>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    11fe:	1dbb      	adds	r3, r7, #6
    1200:	781a      	ldrb	r2, [r3, #0]
    1202:	1dfb      	adds	r3, r7, #7
    1204:	781b      	ldrb	r3, [r3, #0]
    1206:	4827      	ldr	r0, [pc, #156]	; (12a4 <_gpio_set_pin_pull_mode+0xd4>)
    1208:	0019      	movs	r1, r3
    120a:	4b27      	ldr	r3, [pc, #156]	; (12a8 <_gpio_set_pin_pull_mode+0xd8>)
    120c:	4798      	blx	r3
		break;
    120e:	e044      	b.n	129a <_gpio_set_pin_pull_mode+0xca>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, 1U << pin);
    1210:	1dbb      	adds	r3, r7, #6
    1212:	781b      	ldrb	r3, [r3, #0]
    1214:	2201      	movs	r2, #1
    1216:	409a      	lsls	r2, r3
    1218:	1dfb      	adds	r3, r7, #7
    121a:	7819      	ldrb	r1, [r3, #0]
    121c:	23c0      	movs	r3, #192	; 0xc0
    121e:	05db      	lsls	r3, r3, #23
    1220:	0018      	movs	r0, r3
    1222:	4b22      	ldr	r3, [pc, #136]	; (12ac <_gpio_set_pin_pull_mode+0xdc>)
    1224:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    1226:	1dbb      	adds	r3, r7, #6
    1228:	781a      	ldrb	r2, [r3, #0]
    122a:	1dfb      	adds	r3, r7, #7
    122c:	781b      	ldrb	r3, [r3, #0]
    122e:	481d      	ldr	r0, [pc, #116]	; (12a4 <_gpio_set_pin_pull_mode+0xd4>)
    1230:	0019      	movs	r1, r3
    1232:	4b1f      	ldr	r3, [pc, #124]	; (12b0 <_gpio_set_pin_pull_mode+0xe0>)
    1234:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT_IOBUS, port, 1U << pin);
    1236:	1dbb      	adds	r3, r7, #6
    1238:	781b      	ldrb	r3, [r3, #0]
    123a:	2201      	movs	r2, #1
    123c:	409a      	lsls	r2, r3
    123e:	1dfb      	adds	r3, r7, #7
    1240:	7819      	ldrb	r1, [r3, #0]
    1242:	23c0      	movs	r3, #192	; 0xc0
    1244:	05db      	lsls	r3, r3, #23
    1246:	0018      	movs	r0, r3
    1248:	4b1a      	ldr	r3, [pc, #104]	; (12b4 <_gpio_set_pin_pull_mode+0xe4>)
    124a:	4798      	blx	r3
		break;
    124c:	e025      	b.n	129a <_gpio_set_pin_pull_mode+0xca>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, 1U << pin);
    124e:	1dbb      	adds	r3, r7, #6
    1250:	781b      	ldrb	r3, [r3, #0]
    1252:	2201      	movs	r2, #1
    1254:	409a      	lsls	r2, r3
    1256:	1dfb      	adds	r3, r7, #7
    1258:	7819      	ldrb	r1, [r3, #0]
    125a:	23c0      	movs	r3, #192	; 0xc0
    125c:	05db      	lsls	r3, r3, #23
    125e:	0018      	movs	r0, r3
    1260:	4b12      	ldr	r3, [pc, #72]	; (12ac <_gpio_set_pin_pull_mode+0xdc>)
    1262:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    1264:	1dbb      	adds	r3, r7, #6
    1266:	781a      	ldrb	r2, [r3, #0]
    1268:	1dfb      	adds	r3, r7, #7
    126a:	781b      	ldrb	r3, [r3, #0]
    126c:	480d      	ldr	r0, [pc, #52]	; (12a4 <_gpio_set_pin_pull_mode+0xd4>)
    126e:	0019      	movs	r1, r3
    1270:	4b0f      	ldr	r3, [pc, #60]	; (12b0 <_gpio_set_pin_pull_mode+0xe0>)
    1272:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT_IOBUS, port, 1U << pin);
    1274:	1dbb      	adds	r3, r7, #6
    1276:	781b      	ldrb	r3, [r3, #0]
    1278:	2201      	movs	r2, #1
    127a:	409a      	lsls	r2, r3
    127c:	1dfb      	adds	r3, r7, #7
    127e:	7819      	ldrb	r1, [r3, #0]
    1280:	23c0      	movs	r3, #192	; 0xc0
    1282:	05db      	lsls	r3, r3, #23
    1284:	0018      	movs	r0, r3
    1286:	4b0c      	ldr	r3, [pc, #48]	; (12b8 <_gpio_set_pin_pull_mode+0xe8>)
    1288:	4798      	blx	r3
		break;
    128a:	e006      	b.n	129a <_gpio_set_pin_pull_mode+0xca>

	default:
		ASSERT(false);
    128c:	4b0b      	ldr	r3, [pc, #44]	; (12bc <_gpio_set_pin_pull_mode+0xec>)
    128e:	2288      	movs	r2, #136	; 0x88
    1290:	0019      	movs	r1, r3
    1292:	2000      	movs	r0, #0
    1294:	4b0a      	ldr	r3, [pc, #40]	; (12c0 <_gpio_set_pin_pull_mode+0xf0>)
    1296:	4798      	blx	r3
		break;
    1298:	46c0      	nop			; (mov r8, r8)
	}
}
    129a:	46c0      	nop			; (mov r8, r8)
    129c:	46bd      	mov	sp, r7
    129e:	b003      	add	sp, #12
    12a0:	bd90      	pop	{r4, r7, pc}
    12a2:	46c0      	nop			; (mov r8, r8)
    12a4:	41004400 	.word	0x41004400
    12a8:	00000fe5 	.word	0x00000fe5
    12ac:	00000d7b 	.word	0x00000d7b
    12b0:	00000f8f 	.word	0x00000f8f
    12b4:	00000da7 	.word	0x00000da7
    12b8:	00000dd3 	.word	0x00000dd3
    12bc:	00012128 	.word	0x00012128
    12c0:	00002a9d 	.word	0x00002a9d

000012c4 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    12c4:	b590      	push	{r4, r7, lr}
    12c6:	b085      	sub	sp, #20
    12c8:	af00      	add	r7, sp, #0
    12ca:	6078      	str	r0, [r7, #4]
    12cc:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    12ce:	687b      	ldr	r3, [r7, #4]
    12d0:	095a      	lsrs	r2, r3, #5
    12d2:	230f      	movs	r3, #15
    12d4:	18fb      	adds	r3, r7, r3
    12d6:	701a      	strb	r2, [r3, #0]
	uint8_t pin  = GPIO_PIN(gpio);
    12d8:	687b      	ldr	r3, [r7, #4]
    12da:	b2da      	uxtb	r2, r3
    12dc:	230e      	movs	r3, #14
    12de:	18fb      	adds	r3, r7, r3
    12e0:	211f      	movs	r1, #31
    12e2:	400a      	ands	r2, r1
    12e4:	701a      	strb	r2, [r3, #0]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    12e6:	683b      	ldr	r3, [r7, #0]
    12e8:	3301      	adds	r3, #1
    12ea:	d10a      	bne.n	1302 <_gpio_set_pin_function+0x3e>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    12ec:	230e      	movs	r3, #14
    12ee:	18fb      	adds	r3, r7, r3
    12f0:	781a      	ldrb	r2, [r3, #0]
    12f2:	230f      	movs	r3, #15
    12f4:	18fb      	adds	r3, r7, r3
    12f6:	7819      	ldrb	r1, [r3, #0]
    12f8:	481b      	ldr	r0, [pc, #108]	; (1368 <_gpio_set_pin_function+0xa4>)
    12fa:	2300      	movs	r3, #0
    12fc:	4c1b      	ldr	r4, [pc, #108]	; (136c <_gpio_set_pin_function+0xa8>)
    12fe:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    1300:	e02e      	b.n	1360 <_gpio_set_pin_function+0x9c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    1302:	230e      	movs	r3, #14
    1304:	18fb      	adds	r3, r7, r3
    1306:	781a      	ldrb	r2, [r3, #0]
    1308:	230f      	movs	r3, #15
    130a:	18fb      	adds	r3, r7, r3
    130c:	7819      	ldrb	r1, [r3, #0]
    130e:	4816      	ldr	r0, [pc, #88]	; (1368 <_gpio_set_pin_function+0xa4>)
    1310:	2301      	movs	r3, #1
    1312:	4c16      	ldr	r4, [pc, #88]	; (136c <_gpio_set_pin_function+0xa8>)
    1314:	47a0      	blx	r4
		if (pin & 1) {
    1316:	230e      	movs	r3, #14
    1318:	18fb      	adds	r3, r7, r3
    131a:	781b      	ldrb	r3, [r3, #0]
    131c:	2201      	movs	r2, #1
    131e:	4013      	ands	r3, r2
    1320:	d00f      	beq.n	1342 <_gpio_set_pin_function+0x7e>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    1322:	230e      	movs	r3, #14
    1324:	18fb      	adds	r3, r7, r3
    1326:	781b      	ldrb	r3, [r3, #0]
    1328:	085b      	lsrs	r3, r3, #1
    132a:	b2da      	uxtb	r2, r3
    132c:	683b      	ldr	r3, [r7, #0]
    132e:	b2d8      	uxtb	r0, r3
    1330:	230f      	movs	r3, #15
    1332:	18fb      	adds	r3, r7, r3
    1334:	7819      	ldrb	r1, [r3, #0]
    1336:	4c0c      	ldr	r4, [pc, #48]	; (1368 <_gpio_set_pin_function+0xa4>)
    1338:	0003      	movs	r3, r0
    133a:	0020      	movs	r0, r4
    133c:	4c0c      	ldr	r4, [pc, #48]	; (1370 <_gpio_set_pin_function+0xac>)
    133e:	47a0      	blx	r4
}
    1340:	e00e      	b.n	1360 <_gpio_set_pin_function+0x9c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    1342:	230e      	movs	r3, #14
    1344:	18fb      	adds	r3, r7, r3
    1346:	781b      	ldrb	r3, [r3, #0]
    1348:	085b      	lsrs	r3, r3, #1
    134a:	b2da      	uxtb	r2, r3
    134c:	683b      	ldr	r3, [r7, #0]
    134e:	b2d8      	uxtb	r0, r3
    1350:	230f      	movs	r3, #15
    1352:	18fb      	adds	r3, r7, r3
    1354:	7819      	ldrb	r1, [r3, #0]
    1356:	4c04      	ldr	r4, [pc, #16]	; (1368 <_gpio_set_pin_function+0xa4>)
    1358:	0003      	movs	r3, r0
    135a:	0020      	movs	r0, r4
    135c:	4c05      	ldr	r4, [pc, #20]	; (1374 <_gpio_set_pin_function+0xb0>)
    135e:	47a0      	blx	r4
}
    1360:	46c0      	nop			; (mov r8, r8)
    1362:	46bd      	mov	sp, r7
    1364:	b005      	add	sp, #20
    1366:	bd90      	pop	{r4, r7, pc}
    1368:	41004400 	.word	0x41004400
    136c:	00000f0d 	.word	0x00000f0d
    1370:	00000e87 	.word	0x00000e87
    1374:	00000dff 	.word	0x00000dff

00001378 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    1378:	b580      	push	{r7, lr}
    137a:	b082      	sub	sp, #8
    137c:	af00      	add	r7, sp, #0
    137e:	0002      	movs	r2, r0
    1380:	1dfb      	adds	r3, r7, #7
    1382:	701a      	strb	r2, [r3, #0]
    1384:	1dbb      	adds	r3, r7, #6
    1386:	1c0a      	adds	r2, r1, #0
    1388:	701a      	strb	r2, [r3, #0]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    138a:	1dfb      	adds	r3, r7, #7
    138c:	781b      	ldrb	r3, [r3, #0]
    138e:	095b      	lsrs	r3, r3, #5
    1390:	b2d8      	uxtb	r0, r3
    1392:	1dfb      	adds	r3, r7, #7
    1394:	781b      	ldrb	r3, [r3, #0]
    1396:	221f      	movs	r2, #31
    1398:	4013      	ands	r3, r2
    139a:	b2d9      	uxtb	r1, r3
    139c:	1dbb      	adds	r3, r7, #6
    139e:	781b      	ldrb	r3, [r3, #0]
    13a0:	001a      	movs	r2, r3
    13a2:	4b03      	ldr	r3, [pc, #12]	; (13b0 <gpio_set_pin_pull_mode+0x38>)
    13a4:	4798      	blx	r3
}
    13a6:	46c0      	nop			; (mov r8, r8)
    13a8:	46bd      	mov	sp, r7
    13aa:	b002      	add	sp, #8
    13ac:	bd80      	pop	{r7, pc}
    13ae:	46c0      	nop			; (mov r8, r8)
    13b0:	000011d1 	.word	0x000011d1

000013b4 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    13b4:	b580      	push	{r7, lr}
    13b6:	b082      	sub	sp, #8
    13b8:	af00      	add	r7, sp, #0
    13ba:	6078      	str	r0, [r7, #4]
    13bc:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    13be:	683a      	ldr	r2, [r7, #0]
    13c0:	687b      	ldr	r3, [r7, #4]
    13c2:	0011      	movs	r1, r2
    13c4:	0018      	movs	r0, r3
    13c6:	4b03      	ldr	r3, [pc, #12]	; (13d4 <gpio_set_pin_function+0x20>)
    13c8:	4798      	blx	r3
}
    13ca:	46c0      	nop			; (mov r8, r8)
    13cc:	46bd      	mov	sp, r7
    13ce:	b002      	add	sp, #8
    13d0:	bd80      	pop	{r7, pc}
    13d2:	46c0      	nop			; (mov r8, r8)
    13d4:	000012c5 	.word	0x000012c5

000013d8 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    13d8:	b580      	push	{r7, lr}
    13da:	b082      	sub	sp, #8
    13dc:	af00      	add	r7, sp, #0
    13de:	0002      	movs	r2, r0
    13e0:	1dfb      	adds	r3, r7, #7
    13e2:	701a      	strb	r2, [r3, #0]
    13e4:	1dbb      	adds	r3, r7, #6
    13e6:	1c0a      	adds	r2, r1, #0
    13e8:	701a      	strb	r2, [r3, #0]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    13ea:	1dfb      	adds	r3, r7, #7
    13ec:	781b      	ldrb	r3, [r3, #0]
    13ee:	095b      	lsrs	r3, r3, #5
    13f0:	b2d8      	uxtb	r0, r3
    13f2:	1dfb      	adds	r3, r7, #7
    13f4:	781b      	ldrb	r3, [r3, #0]
    13f6:	221f      	movs	r2, #31
    13f8:	4013      	ands	r3, r2
    13fa:	2201      	movs	r2, #1
    13fc:	409a      	lsls	r2, r3
    13fe:	0011      	movs	r1, r2
    1400:	1dbb      	adds	r3, r7, #6
    1402:	781b      	ldrb	r3, [r3, #0]
    1404:	001a      	movs	r2, r3
    1406:	4b03      	ldr	r3, [pc, #12]	; (1414 <gpio_set_pin_direction+0x3c>)
    1408:	4798      	blx	r3
}
    140a:	46c0      	nop			; (mov r8, r8)
    140c:	46bd      	mov	sp, r7
    140e:	b002      	add	sp, #8
    1410:	bd80      	pop	{r7, pc}
    1412:	46c0      	nop			; (mov r8, r8)
    1414:	00001069 	.word	0x00001069

00001418 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    1418:	b580      	push	{r7, lr}
    141a:	b082      	sub	sp, #8
    141c:	af00      	add	r7, sp, #0
    141e:	0002      	movs	r2, r0
    1420:	1dfb      	adds	r3, r7, #7
    1422:	701a      	strb	r2, [r3, #0]
    1424:	1dbb      	adds	r3, r7, #6
    1426:	1c0a      	adds	r2, r1, #0
    1428:	701a      	strb	r2, [r3, #0]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    142a:	1dfb      	adds	r3, r7, #7
    142c:	781b      	ldrb	r3, [r3, #0]
    142e:	095b      	lsrs	r3, r3, #5
    1430:	b2d8      	uxtb	r0, r3
    1432:	1dfb      	adds	r3, r7, #7
    1434:	781b      	ldrb	r3, [r3, #0]
    1436:	221f      	movs	r2, #31
    1438:	4013      	ands	r3, r2
    143a:	2201      	movs	r2, #1
    143c:	409a      	lsls	r2, r3
    143e:	0011      	movs	r1, r2
    1440:	1dbb      	adds	r3, r7, #6
    1442:	781b      	ldrb	r3, [r3, #0]
    1444:	001a      	movs	r2, r3
    1446:	4b03      	ldr	r3, [pc, #12]	; (1454 <gpio_set_pin_level+0x3c>)
    1448:	4798      	blx	r3
}
    144a:	46c0      	nop			; (mov r8, r8)
    144c:	46bd      	mov	sp, r7
    144e:	b002      	add	sp, #8
    1450:	bd80      	pop	{r7, pc}
    1452:	46c0      	nop			; (mov r8, r8)
    1454:	00001181 	.word	0x00001181

00001458 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    1458:	b580      	push	{r7, lr}
    145a:	af00      	add	r7, sp, #0
	_init_chip();
    145c:	4b02      	ldr	r3, [pc, #8]	; (1468 <init_mcu+0x10>)
    145e:	4798      	blx	r3
}
    1460:	46c0      	nop			; (mov r8, r8)
    1462:	46bd      	mov	sp, r7
    1464:	bd80      	pop	{r7, pc}
    1466:	46c0      	nop			; (mov r8, r8)
    1468:	00002d09 	.word	0x00002d09

0000146c <_gclk_enable_channel>:
 *
 * \param[in] channel The channel to enable clock for
 * \param[in] source The clock source for the given channel
 */
static inline void _gclk_enable_channel(const uint8_t channel, const uint8_t source)
{
    146c:	b580      	push	{r7, lr}
    146e:	b082      	sub	sp, #8
    1470:	af00      	add	r7, sp, #0
    1472:	0002      	movs	r2, r0
    1474:	1dfb      	adds	r3, r7, #7
    1476:	701a      	strb	r2, [r3, #0]
    1478:	1dbb      	adds	r3, r7, #6
    147a:	1c0a      	adds	r2, r1, #0
    147c:	701a      	strb	r2, [r3, #0]

	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(channel) | GCLK_CLKCTRL_GEN(source) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
    147e:	1dfb      	adds	r3, r7, #7
    1480:	781b      	ldrb	r3, [r3, #0]
    1482:	b29b      	uxth	r3, r3
    1484:	223f      	movs	r2, #63	; 0x3f
    1486:	4013      	ands	r3, r2
    1488:	b29a      	uxth	r2, r3
    148a:	1dbb      	adds	r3, r7, #6
    148c:	781b      	ldrb	r3, [r3, #0]
    148e:	b29b      	uxth	r3, r3
    1490:	021b      	lsls	r3, r3, #8
    1492:	b299      	uxth	r1, r3
    1494:	23f0      	movs	r3, #240	; 0xf0
    1496:	011b      	lsls	r3, r3, #4
    1498:	400b      	ands	r3, r1
    149a:	b29b      	uxth	r3, r3
    149c:	4313      	orrs	r3, r2
    149e:	b29b      	uxth	r3, r3
	hri_gclk_write_CLKCTRL_reg(GCLK,
    14a0:	2280      	movs	r2, #128	; 0x80
    14a2:	01d2      	lsls	r2, r2, #7
    14a4:	4313      	orrs	r3, r2
    14a6:	b29b      	uxth	r3, r3
    14a8:	4a04      	ldr	r2, [pc, #16]	; (14bc <_gclk_enable_channel+0x50>)
    14aa:	0019      	movs	r1, r3
    14ac:	0010      	movs	r0, r2
    14ae:	4b04      	ldr	r3, [pc, #16]	; (14c0 <_gclk_enable_channel+0x54>)
    14b0:	4798      	blx	r3
}
    14b2:	46c0      	nop			; (mov r8, r8)
    14b4:	46bd      	mov	sp, r7
    14b6:	b002      	add	sp, #8
    14b8:	bd80      	pop	{r7, pc}
    14ba:	46c0      	nop			; (mov r8, r8)
    14bc:	40000c00 	.word	0x40000c00
    14c0:	00000d31 	.word	0x00000d31

000014c4 <_pm_get_ahb_index>:
 * \param[in] module Module to get index for
 *
 * \return index of the given module if succeeds, ERR_INVALID_ARG otherwise
 */
static inline int32_t _pm_get_ahb_index(const void *const module)
{
    14c4:	b580      	push	{r7, lr}
    14c6:	b082      	sub	sp, #8
    14c8:	af00      	add	r7, sp, #0
    14ca:	6078      	str	r0, [r7, #4]
	if ((uint32_t)module == (uint32_t)PM_BUS_APBA) {
    14cc:	687b      	ldr	r3, [r7, #4]
    14ce:	2b01      	cmp	r3, #1
    14d0:	d101      	bne.n	14d6 <_pm_get_ahb_index+0x12>
		return 0;
    14d2:	2300      	movs	r3, #0
    14d4:	e023      	b.n	151e <_pm_get_ahb_index+0x5a>
	} else if ((uint32_t)module == (uint32_t)PM_BUS_APBB) {
    14d6:	687b      	ldr	r3, [r7, #4]
    14d8:	2b02      	cmp	r3, #2
    14da:	d101      	bne.n	14e0 <_pm_get_ahb_index+0x1c>
		return 1;
    14dc:	2301      	movs	r3, #1
    14de:	e01e      	b.n	151e <_pm_get_ahb_index+0x5a>
	} else if ((uint32_t)module == (uint32_t)PM_BUS_APBC) {
    14e0:	687b      	ldr	r3, [r7, #4]
    14e2:	2b03      	cmp	r3, #3
    14e4:	d101      	bne.n	14ea <_pm_get_ahb_index+0x26>
		return 2;
    14e6:	2302      	movs	r3, #2
    14e8:	e019      	b.n	151e <_pm_get_ahb_index+0x5a>
	}
	if ((uint32_t)module == (uint32_t)DSU) {
    14ea:	687b      	ldr	r3, [r7, #4]
    14ec:	4a0e      	ldr	r2, [pc, #56]	; (1528 <_pm_get_ahb_index+0x64>)
    14ee:	4293      	cmp	r3, r2
    14f0:	d101      	bne.n	14f6 <_pm_get_ahb_index+0x32>
		return 3;
    14f2:	2303      	movs	r3, #3
    14f4:	e013      	b.n	151e <_pm_get_ahb_index+0x5a>
	} else if ((uint32_t)module == (uint32_t)NVMCTRL) {
    14f6:	687b      	ldr	r3, [r7, #4]
    14f8:	4a0c      	ldr	r2, [pc, #48]	; (152c <_pm_get_ahb_index+0x68>)
    14fa:	4293      	cmp	r3, r2
    14fc:	d101      	bne.n	1502 <_pm_get_ahb_index+0x3e>
		return 4;
    14fe:	2304      	movs	r3, #4
    1500:	e00d      	b.n	151e <_pm_get_ahb_index+0x5a>
	} else if ((uint32_t)module == (uint32_t)DMAC) {
    1502:	687b      	ldr	r3, [r7, #4]
    1504:	4a0a      	ldr	r2, [pc, #40]	; (1530 <_pm_get_ahb_index+0x6c>)
    1506:	4293      	cmp	r3, r2
    1508:	d101      	bne.n	150e <_pm_get_ahb_index+0x4a>
		return 5;
    150a:	2305      	movs	r3, #5
    150c:	e007      	b.n	151e <_pm_get_ahb_index+0x5a>
	}
#ifdef USB
	else if ((uint32_t)module == (uint32_t)USB) {
    150e:	687b      	ldr	r3, [r7, #4]
    1510:	4a08      	ldr	r2, [pc, #32]	; (1534 <_pm_get_ahb_index+0x70>)
    1512:	4293      	cmp	r3, r2
    1514:	d101      	bne.n	151a <_pm_get_ahb_index+0x56>
		return 6;
    1516:	2306      	movs	r3, #6
    1518:	e001      	b.n	151e <_pm_get_ahb_index+0x5a>
	}
#endif

	return ERR_INVALID_ARG;
    151a:	230d      	movs	r3, #13
    151c:	425b      	negs	r3, r3
}
    151e:	0018      	movs	r0, r3
    1520:	46bd      	mov	sp, r7
    1522:	b002      	add	sp, #8
    1524:	bd80      	pop	{r7, pc}
    1526:	46c0      	nop			; (mov r8, r8)
    1528:	41002000 	.word	0x41002000
    152c:	41004000 	.word	0x41004000
    1530:	41004800 	.word	0x41004800
    1534:	41005000 	.word	0x41005000

00001538 <_pm_get_apbb_index>:
 * \param[in] module Module to get index for
 *
 * \return index of the given module if succeeds, ERR_INVALID_ARG otherwise
 */
static inline int32_t _pm_get_apbb_index(const void *const module)
{
    1538:	b580      	push	{r7, lr}
    153a:	b082      	sub	sp, #8
    153c:	af00      	add	r7, sp, #0
    153e:	6078      	str	r0, [r7, #4]
	if ((uint32_t)module == (uint32_t)PAC1) {
    1540:	687a      	ldr	r2, [r7, #4]
    1542:	2382      	movs	r3, #130	; 0x82
    1544:	05db      	lsls	r3, r3, #23
    1546:	429a      	cmp	r2, r3
    1548:	d101      	bne.n	154e <_pm_get_apbb_index+0x16>
		return 0;
    154a:	2300      	movs	r3, #0
    154c:	e01f      	b.n	158e <_pm_get_apbb_index+0x56>
	} else if ((uint32_t)module == (uint32_t)DSU) {
    154e:	687b      	ldr	r3, [r7, #4]
    1550:	4a11      	ldr	r2, [pc, #68]	; (1598 <_pm_get_apbb_index+0x60>)
    1552:	4293      	cmp	r3, r2
    1554:	d101      	bne.n	155a <_pm_get_apbb_index+0x22>
		return 1;
    1556:	2301      	movs	r3, #1
    1558:	e019      	b.n	158e <_pm_get_apbb_index+0x56>
	} else if ((uint32_t)module == (uint32_t)NVMCTRL) {
    155a:	687b      	ldr	r3, [r7, #4]
    155c:	4a0f      	ldr	r2, [pc, #60]	; (159c <_pm_get_apbb_index+0x64>)
    155e:	4293      	cmp	r3, r2
    1560:	d101      	bne.n	1566 <_pm_get_apbb_index+0x2e>
		return 2;
    1562:	2302      	movs	r3, #2
    1564:	e013      	b.n	158e <_pm_get_apbb_index+0x56>
	}
	if ((uint32_t)module == (uint32_t)PORT) {
    1566:	687b      	ldr	r3, [r7, #4]
    1568:	4a0d      	ldr	r2, [pc, #52]	; (15a0 <_pm_get_apbb_index+0x68>)
    156a:	4293      	cmp	r3, r2
    156c:	d101      	bne.n	1572 <_pm_get_apbb_index+0x3a>
		return 3;
    156e:	2303      	movs	r3, #3
    1570:	e00d      	b.n	158e <_pm_get_apbb_index+0x56>
	} else if ((uint32_t)module == (uint32_t)DMAC) {
    1572:	687b      	ldr	r3, [r7, #4]
    1574:	4a0b      	ldr	r2, [pc, #44]	; (15a4 <_pm_get_apbb_index+0x6c>)
    1576:	4293      	cmp	r3, r2
    1578:	d101      	bne.n	157e <_pm_get_apbb_index+0x46>
		return 4;
    157a:	2304      	movs	r3, #4
    157c:	e007      	b.n	158e <_pm_get_apbb_index+0x56>
	}
#ifdef USB
	else if ((uint32_t)module == (uint32_t)USB) {
    157e:	687b      	ldr	r3, [r7, #4]
    1580:	4a09      	ldr	r2, [pc, #36]	; (15a8 <_pm_get_apbb_index+0x70>)
    1582:	4293      	cmp	r3, r2
    1584:	d101      	bne.n	158a <_pm_get_apbb_index+0x52>
		return 5;
    1586:	2305      	movs	r3, #5
    1588:	e001      	b.n	158e <_pm_get_apbb_index+0x56>
	}
#endif

	return ERR_INVALID_ARG;
    158a:	230d      	movs	r3, #13
    158c:	425b      	negs	r3, r3
}
    158e:	0018      	movs	r0, r3
    1590:	46bd      	mov	sp, r7
    1592:	b002      	add	sp, #8
    1594:	bd80      	pop	{r7, pc}
    1596:	46c0      	nop			; (mov r8, r8)
    1598:	41002000 	.word	0x41002000
    159c:	41004000 	.word	0x41004000
    15a0:	41004400 	.word	0x41004400
    15a4:	41004800 	.word	0x41004800
    15a8:	41005000 	.word	0x41005000

000015ac <_pm_enable_bus_clock>:
 *
 * \param[in] bus A bus to enable clock on
 * \param[in] module A hardware module to enable clock for
 */
static inline void _pm_enable_bus_clock(const enum _pm_bus bus, const void *const module)
{
    15ac:	b580      	push	{r7, lr}
    15ae:	b084      	sub	sp, #16
    15b0:	af00      	add	r7, sp, #0
    15b2:	0002      	movs	r2, r0
    15b4:	6039      	str	r1, [r7, #0]
    15b6:	1dfb      	adds	r3, r7, #7
    15b8:	701a      	strb	r2, [r3, #0]
	uint32_t peripheral = ((uint32_t)module & 0x0000ff00) >> 10;
    15ba:	683b      	ldr	r3, [r7, #0]
    15bc:	0a9b      	lsrs	r3, r3, #10
    15be:	223f      	movs	r2, #63	; 0x3f
    15c0:	4013      	ands	r3, r2
    15c2:	60fb      	str	r3, [r7, #12]

	switch (bus) {
    15c4:	1dfb      	adds	r3, r7, #7
    15c6:	781b      	ldrb	r3, [r3, #0]
    15c8:	2b01      	cmp	r3, #1
    15ca:	d01e      	beq.n	160a <_pm_enable_bus_clock+0x5e>
    15cc:	dc02      	bgt.n	15d4 <_pm_enable_bus_clock+0x28>
    15ce:	2b00      	cmp	r3, #0
    15d0:	d005      	beq.n	15de <_pm_enable_bus_clock+0x32>
    15d2:	e044      	b.n	165e <_pm_enable_bus_clock+0xb2>
    15d4:	2b02      	cmp	r3, #2
    15d6:	d022      	beq.n	161e <_pm_enable_bus_clock+0x72>
    15d8:	2b03      	cmp	r3, #3
    15da:	d036      	beq.n	164a <_pm_enable_bus_clock+0x9e>
    15dc:	e03f      	b.n	165e <_pm_enable_bus_clock+0xb2>
	case PM_BUS_AHB:
		if (_pm_get_ahb_index(module) >= 0) {
    15de:	683b      	ldr	r3, [r7, #0]
    15e0:	0018      	movs	r0, r3
    15e2:	4b26      	ldr	r3, [pc, #152]	; (167c <_pm_enable_bus_clock+0xd0>)
    15e4:	4798      	blx	r3
    15e6:	1e03      	subs	r3, r0, #0
    15e8:	db40      	blt.n	166c <_pm_enable_bus_clock+0xc0>
			peripheral = (uint32_t)_pm_get_ahb_index(module);
    15ea:	683b      	ldr	r3, [r7, #0]
    15ec:	0018      	movs	r0, r3
    15ee:	4b23      	ldr	r3, [pc, #140]	; (167c <_pm_enable_bus_clock+0xd0>)
    15f0:	4798      	blx	r3
    15f2:	0003      	movs	r3, r0
    15f4:	60fb      	str	r3, [r7, #12]
			PM->AHBMASK.reg |= 1 << peripheral;
    15f6:	4b22      	ldr	r3, [pc, #136]	; (1680 <_pm_enable_bus_clock+0xd4>)
    15f8:	4a21      	ldr	r2, [pc, #132]	; (1680 <_pm_enable_bus_clock+0xd4>)
    15fa:	6952      	ldr	r2, [r2, #20]
    15fc:	2001      	movs	r0, #1
    15fe:	68f9      	ldr	r1, [r7, #12]
    1600:	4088      	lsls	r0, r1
    1602:	0001      	movs	r1, r0
    1604:	430a      	orrs	r2, r1
    1606:	615a      	str	r2, [r3, #20]
		}
		break;
    1608:	e030      	b.n	166c <_pm_enable_bus_clock+0xc0>
	case PM_BUS_APBA:
		PM->APBAMASK.reg |= 1 << peripheral;
    160a:	4b1d      	ldr	r3, [pc, #116]	; (1680 <_pm_enable_bus_clock+0xd4>)
    160c:	4a1c      	ldr	r2, [pc, #112]	; (1680 <_pm_enable_bus_clock+0xd4>)
    160e:	6992      	ldr	r2, [r2, #24]
    1610:	2001      	movs	r0, #1
    1612:	68f9      	ldr	r1, [r7, #12]
    1614:	4088      	lsls	r0, r1
    1616:	0001      	movs	r1, r0
    1618:	430a      	orrs	r2, r1
    161a:	619a      	str	r2, [r3, #24]
		break;
    161c:	e029      	b.n	1672 <_pm_enable_bus_clock+0xc6>
	case PM_BUS_APBB:
		if (_pm_get_apbb_index(module) >= 0) {
    161e:	683b      	ldr	r3, [r7, #0]
    1620:	0018      	movs	r0, r3
    1622:	4b18      	ldr	r3, [pc, #96]	; (1684 <_pm_enable_bus_clock+0xd8>)
    1624:	4798      	blx	r3
    1626:	1e03      	subs	r3, r0, #0
    1628:	db22      	blt.n	1670 <_pm_enable_bus_clock+0xc4>
			peripheral = (uint32_t)_pm_get_apbb_index(module);
    162a:	683b      	ldr	r3, [r7, #0]
    162c:	0018      	movs	r0, r3
    162e:	4b15      	ldr	r3, [pc, #84]	; (1684 <_pm_enable_bus_clock+0xd8>)
    1630:	4798      	blx	r3
    1632:	0003      	movs	r3, r0
    1634:	60fb      	str	r3, [r7, #12]
			PM->APBBMASK.reg |= 1 << peripheral;
    1636:	4b12      	ldr	r3, [pc, #72]	; (1680 <_pm_enable_bus_clock+0xd4>)
    1638:	4a11      	ldr	r2, [pc, #68]	; (1680 <_pm_enable_bus_clock+0xd4>)
    163a:	69d2      	ldr	r2, [r2, #28]
    163c:	2001      	movs	r0, #1
    163e:	68f9      	ldr	r1, [r7, #12]
    1640:	4088      	lsls	r0, r1
    1642:	0001      	movs	r1, r0
    1644:	430a      	orrs	r2, r1
    1646:	61da      	str	r2, [r3, #28]
		}
		break;
    1648:	e012      	b.n	1670 <_pm_enable_bus_clock+0xc4>
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
    164a:	4b0d      	ldr	r3, [pc, #52]	; (1680 <_pm_enable_bus_clock+0xd4>)
    164c:	4a0c      	ldr	r2, [pc, #48]	; (1680 <_pm_enable_bus_clock+0xd4>)
    164e:	6a12      	ldr	r2, [r2, #32]
    1650:	2001      	movs	r0, #1
    1652:	68f9      	ldr	r1, [r7, #12]
    1654:	4088      	lsls	r0, r1
    1656:	0001      	movs	r1, r0
    1658:	430a      	orrs	r2, r1
    165a:	621a      	str	r2, [r3, #32]
		break;
    165c:	e009      	b.n	1672 <_pm_enable_bus_clock+0xc6>
	default:
		ASSERT(false);
    165e:	4b0a      	ldr	r3, [pc, #40]	; (1688 <_pm_enable_bus_clock+0xdc>)
    1660:	229b      	movs	r2, #155	; 0x9b
    1662:	0019      	movs	r1, r3
    1664:	2000      	movs	r0, #0
    1666:	4b09      	ldr	r3, [pc, #36]	; (168c <_pm_enable_bus_clock+0xe0>)
    1668:	4798      	blx	r3
		break;
    166a:	e002      	b.n	1672 <_pm_enable_bus_clock+0xc6>
		break;
    166c:	46c0      	nop			; (mov r8, r8)
    166e:	e000      	b.n	1672 <_pm_enable_bus_clock+0xc6>
		break;
    1670:	46c0      	nop			; (mov r8, r8)
	}
}
    1672:	46c0      	nop			; (mov r8, r8)
    1674:	46bd      	mov	sp, r7
    1676:	b004      	add	sp, #16
    1678:	bd80      	pop	{r7, pc}
    167a:	46c0      	nop			; (mov r8, r8)
    167c:	000014c5 	.word	0x000014c5
    1680:	40000400 	.word	0x40000400
    1684:	00001539 	.word	0x00001539
    1688:	00012144 	.word	0x00012144
    168c:	00002a9d 	.word	0x00002a9d

00001690 <SPI_ADF_PORT_init>:
struct spi_m_sync_descriptor SPI_LMX;

struct usart_sync_descriptor TARGET_IO;

void SPI_ADF_PORT_init(void)
{
    1690:	b580      	push	{r7, lr}
    1692:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PA04,
    1694:	2100      	movs	r1, #0
    1696:	2004      	movs	r0, #4
    1698:	4b13      	ldr	r3, [pc, #76]	; (16e8 <SPI_ADF_PORT_init+0x58>)
    169a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PA04, GPIO_DIRECTION_OUT);
    169c:	2102      	movs	r1, #2
    169e:	2004      	movs	r0, #4
    16a0:	4b12      	ldr	r3, [pc, #72]	; (16ec <SPI_ADF_PORT_init+0x5c>)
    16a2:	4798      	blx	r3

	gpio_set_pin_function(PA04, PINMUX_PA04D_SERCOM0_PAD0);
    16a4:	4b12      	ldr	r3, [pc, #72]	; (16f0 <SPI_ADF_PORT_init+0x60>)
    16a6:	0019      	movs	r1, r3
    16a8:	2004      	movs	r0, #4
    16aa:	4b12      	ldr	r3, [pc, #72]	; (16f4 <SPI_ADF_PORT_init+0x64>)
    16ac:	4798      	blx	r3

	gpio_set_pin_level(PA05,
    16ae:	2100      	movs	r1, #0
    16b0:	2005      	movs	r0, #5
    16b2:	4b0d      	ldr	r3, [pc, #52]	; (16e8 <SPI_ADF_PORT_init+0x58>)
    16b4:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PA05, GPIO_DIRECTION_OUT);
    16b6:	2102      	movs	r1, #2
    16b8:	2005      	movs	r0, #5
    16ba:	4b0c      	ldr	r3, [pc, #48]	; (16ec <SPI_ADF_PORT_init+0x5c>)
    16bc:	4798      	blx	r3

	gpio_set_pin_function(PA05, PINMUX_PA05D_SERCOM0_PAD1);
    16be:	4b0e      	ldr	r3, [pc, #56]	; (16f8 <SPI_ADF_PORT_init+0x68>)
    16c0:	0019      	movs	r1, r3
    16c2:	2005      	movs	r0, #5
    16c4:	4b0b      	ldr	r3, [pc, #44]	; (16f4 <SPI_ADF_PORT_init+0x64>)
    16c6:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA06, GPIO_DIRECTION_IN);
    16c8:	2101      	movs	r1, #1
    16ca:	2006      	movs	r0, #6
    16cc:	4b07      	ldr	r3, [pc, #28]	; (16ec <SPI_ADF_PORT_init+0x5c>)
    16ce:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA06,
    16d0:	2100      	movs	r1, #0
    16d2:	2006      	movs	r0, #6
    16d4:	4b09      	ldr	r3, [pc, #36]	; (16fc <SPI_ADF_PORT_init+0x6c>)
    16d6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA06, PINMUX_PA06D_SERCOM0_PAD2);
    16d8:	4b09      	ldr	r3, [pc, #36]	; (1700 <SPI_ADF_PORT_init+0x70>)
    16da:	0019      	movs	r1, r3
    16dc:	2006      	movs	r0, #6
    16de:	4b05      	ldr	r3, [pc, #20]	; (16f4 <SPI_ADF_PORT_init+0x64>)
    16e0:	4798      	blx	r3
}
    16e2:	46c0      	nop			; (mov r8, r8)
    16e4:	46bd      	mov	sp, r7
    16e6:	bd80      	pop	{r7, pc}
    16e8:	00001419 	.word	0x00001419
    16ec:	000013d9 	.word	0x000013d9
    16f0:	00040003 	.word	0x00040003
    16f4:	000013b5 	.word	0x000013b5
    16f8:	00050003 	.word	0x00050003
    16fc:	00001379 	.word	0x00001379
    1700:	00060003 	.word	0x00060003

00001704 <SPI_ADF_CLOCK_init>:

void SPI_ADF_CLOCK_init(void)
{
    1704:	b580      	push	{r7, lr}
    1706:	af00      	add	r7, sp, #0
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM0);
    1708:	4b05      	ldr	r3, [pc, #20]	; (1720 <SPI_ADF_CLOCK_init+0x1c>)
    170a:	0019      	movs	r1, r3
    170c:	2003      	movs	r0, #3
    170e:	4b05      	ldr	r3, [pc, #20]	; (1724 <SPI_ADF_CLOCK_init+0x20>)
    1710:	4798      	blx	r3
	_gclk_enable_channel(SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC);
    1712:	2100      	movs	r1, #0
    1714:	2014      	movs	r0, #20
    1716:	4b04      	ldr	r3, [pc, #16]	; (1728 <SPI_ADF_CLOCK_init+0x24>)
    1718:	4798      	blx	r3
}
    171a:	46c0      	nop			; (mov r8, r8)
    171c:	46bd      	mov	sp, r7
    171e:	bd80      	pop	{r7, pc}
    1720:	42000800 	.word	0x42000800
    1724:	000015ad 	.word	0x000015ad
    1728:	0000146d 	.word	0x0000146d

0000172c <SPI_ADF_init>:

void SPI_ADF_init(void)
{
    172c:	b580      	push	{r7, lr}
    172e:	af00      	add	r7, sp, #0
	SPI_ADF_CLOCK_init();
    1730:	4b06      	ldr	r3, [pc, #24]	; (174c <SPI_ADF_init+0x20>)
    1732:	4798      	blx	r3
	spi_m_sync_init(&SPI_ADF, SERCOM0);
    1734:	4a06      	ldr	r2, [pc, #24]	; (1750 <SPI_ADF_init+0x24>)
    1736:	4b07      	ldr	r3, [pc, #28]	; (1754 <SPI_ADF_init+0x28>)
    1738:	0011      	movs	r1, r2
    173a:	0018      	movs	r0, r3
    173c:	4b06      	ldr	r3, [pc, #24]	; (1758 <SPI_ADF_init+0x2c>)
    173e:	4798      	blx	r3
	SPI_ADF_PORT_init();
    1740:	4b06      	ldr	r3, [pc, #24]	; (175c <SPI_ADF_init+0x30>)
    1742:	4798      	blx	r3
}
    1744:	46c0      	nop			; (mov r8, r8)
    1746:	46bd      	mov	sp, r7
    1748:	bd80      	pop	{r7, pc}
    174a:	46c0      	nop			; (mov r8, r8)
    174c:	00001705 	.word	0x00001705
    1750:	42000800 	.word	0x42000800
    1754:	2000127c 	.word	0x2000127c
    1758:	00001b99 	.word	0x00001b99
    175c:	00001691 	.word	0x00001691

00001760 <SPI_LMX_PORT_init>:

void SPI_LMX_PORT_init(void)
{
    1760:	b580      	push	{r7, lr}
    1762:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PA16,
    1764:	2100      	movs	r1, #0
    1766:	2010      	movs	r0, #16
    1768:	4b13      	ldr	r3, [pc, #76]	; (17b8 <SPI_LMX_PORT_init+0x58>)
    176a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PA16, GPIO_DIRECTION_OUT);
    176c:	2102      	movs	r1, #2
    176e:	2010      	movs	r0, #16
    1770:	4b12      	ldr	r3, [pc, #72]	; (17bc <SPI_LMX_PORT_init+0x5c>)
    1772:	4798      	blx	r3

	gpio_set_pin_function(PA16, PINMUX_PA16C_SERCOM1_PAD0);
    1774:	4b12      	ldr	r3, [pc, #72]	; (17c0 <SPI_LMX_PORT_init+0x60>)
    1776:	0019      	movs	r1, r3
    1778:	2010      	movs	r0, #16
    177a:	4b12      	ldr	r3, [pc, #72]	; (17c4 <SPI_LMX_PORT_init+0x64>)
    177c:	4798      	blx	r3

	gpio_set_pin_level(PA17,
    177e:	2100      	movs	r1, #0
    1780:	2011      	movs	r0, #17
    1782:	4b0d      	ldr	r3, [pc, #52]	; (17b8 <SPI_LMX_PORT_init+0x58>)
    1784:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PA17, GPIO_DIRECTION_OUT);
    1786:	2102      	movs	r1, #2
    1788:	2011      	movs	r0, #17
    178a:	4b0c      	ldr	r3, [pc, #48]	; (17bc <SPI_LMX_PORT_init+0x5c>)
    178c:	4798      	blx	r3

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
    178e:	4b0e      	ldr	r3, [pc, #56]	; (17c8 <SPI_LMX_PORT_init+0x68>)
    1790:	0019      	movs	r1, r3
    1792:	2011      	movs	r0, #17
    1794:	4b0b      	ldr	r3, [pc, #44]	; (17c4 <SPI_LMX_PORT_init+0x64>)
    1796:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA18, GPIO_DIRECTION_IN);
    1798:	2101      	movs	r1, #1
    179a:	2012      	movs	r0, #18
    179c:	4b07      	ldr	r3, [pc, #28]	; (17bc <SPI_LMX_PORT_init+0x5c>)
    179e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA18,
    17a0:	2100      	movs	r1, #0
    17a2:	2012      	movs	r0, #18
    17a4:	4b09      	ldr	r3, [pc, #36]	; (17cc <SPI_LMX_PORT_init+0x6c>)
    17a6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA18, PINMUX_PA18C_SERCOM1_PAD2);
    17a8:	4b09      	ldr	r3, [pc, #36]	; (17d0 <SPI_LMX_PORT_init+0x70>)
    17aa:	0019      	movs	r1, r3
    17ac:	2012      	movs	r0, #18
    17ae:	4b05      	ldr	r3, [pc, #20]	; (17c4 <SPI_LMX_PORT_init+0x64>)
    17b0:	4798      	blx	r3
}
    17b2:	46c0      	nop			; (mov r8, r8)
    17b4:	46bd      	mov	sp, r7
    17b6:	bd80      	pop	{r7, pc}
    17b8:	00001419 	.word	0x00001419
    17bc:	000013d9 	.word	0x000013d9
    17c0:	00100002 	.word	0x00100002
    17c4:	000013b5 	.word	0x000013b5
    17c8:	00110002 	.word	0x00110002
    17cc:	00001379 	.word	0x00001379
    17d0:	00120002 	.word	0x00120002

000017d4 <SPI_LMX_CLOCK_init>:

void SPI_LMX_CLOCK_init(void)
{
    17d4:	b580      	push	{r7, lr}
    17d6:	af00      	add	r7, sp, #0
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM1);
    17d8:	4b05      	ldr	r3, [pc, #20]	; (17f0 <SPI_LMX_CLOCK_init+0x1c>)
    17da:	0019      	movs	r1, r3
    17dc:	2003      	movs	r0, #3
    17de:	4b05      	ldr	r3, [pc, #20]	; (17f4 <SPI_LMX_CLOCK_init+0x20>)
    17e0:	4798      	blx	r3
	_gclk_enable_channel(SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC);
    17e2:	2100      	movs	r1, #0
    17e4:	2015      	movs	r0, #21
    17e6:	4b04      	ldr	r3, [pc, #16]	; (17f8 <SPI_LMX_CLOCK_init+0x24>)
    17e8:	4798      	blx	r3
}
    17ea:	46c0      	nop			; (mov r8, r8)
    17ec:	46bd      	mov	sp, r7
    17ee:	bd80      	pop	{r7, pc}
    17f0:	42000c00 	.word	0x42000c00
    17f4:	000015ad 	.word	0x000015ad
    17f8:	0000146d 	.word	0x0000146d

000017fc <SPI_LMX_init>:

void SPI_LMX_init(void)
{
    17fc:	b580      	push	{r7, lr}
    17fe:	af00      	add	r7, sp, #0
	SPI_LMX_CLOCK_init();
    1800:	4b06      	ldr	r3, [pc, #24]	; (181c <SPI_LMX_init+0x20>)
    1802:	4798      	blx	r3
	spi_m_sync_init(&SPI_LMX, SERCOM1);
    1804:	4a06      	ldr	r2, [pc, #24]	; (1820 <SPI_LMX_init+0x24>)
    1806:	4b07      	ldr	r3, [pc, #28]	; (1824 <SPI_LMX_init+0x28>)
    1808:	0011      	movs	r1, r2
    180a:	0018      	movs	r0, r3
    180c:	4b06      	ldr	r3, [pc, #24]	; (1828 <SPI_LMX_init+0x2c>)
    180e:	4798      	blx	r3
	SPI_LMX_PORT_init();
    1810:	4b06      	ldr	r3, [pc, #24]	; (182c <SPI_LMX_init+0x30>)
    1812:	4798      	blx	r3
}
    1814:	46c0      	nop			; (mov r8, r8)
    1816:	46bd      	mov	sp, r7
    1818:	bd80      	pop	{r7, pc}
    181a:	46c0      	nop			; (mov r8, r8)
    181c:	000017d5 	.word	0x000017d5
    1820:	42000c00 	.word	0x42000c00
    1824:	20001258 	.word	0x20001258
    1828:	00001b99 	.word	0x00001b99
    182c:	00001761 	.word	0x00001761

00001830 <TARGET_IO_PORT_init>:

void TARGET_IO_PORT_init(void)
{
    1830:	b580      	push	{r7, lr}
    1832:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PA22, PINMUX_PA22C_SERCOM3_PAD0);
    1834:	4b06      	ldr	r3, [pc, #24]	; (1850 <TARGET_IO_PORT_init+0x20>)
    1836:	0019      	movs	r1, r3
    1838:	2016      	movs	r0, #22
    183a:	4b06      	ldr	r3, [pc, #24]	; (1854 <TARGET_IO_PORT_init+0x24>)
    183c:	4798      	blx	r3

	gpio_set_pin_function(PA23, PINMUX_PA23C_SERCOM3_PAD1);
    183e:	4b06      	ldr	r3, [pc, #24]	; (1858 <TARGET_IO_PORT_init+0x28>)
    1840:	0019      	movs	r1, r3
    1842:	2017      	movs	r0, #23
    1844:	4b03      	ldr	r3, [pc, #12]	; (1854 <TARGET_IO_PORT_init+0x24>)
    1846:	4798      	blx	r3
}
    1848:	46c0      	nop			; (mov r8, r8)
    184a:	46bd      	mov	sp, r7
    184c:	bd80      	pop	{r7, pc}
    184e:	46c0      	nop			; (mov r8, r8)
    1850:	00160002 	.word	0x00160002
    1854:	000013b5 	.word	0x000013b5
    1858:	00170002 	.word	0x00170002

0000185c <TARGET_IO_CLOCK_init>:

void TARGET_IO_CLOCK_init(void)
{
    185c:	b580      	push	{r7, lr}
    185e:	af00      	add	r7, sp, #0
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM3);
    1860:	4b05      	ldr	r3, [pc, #20]	; (1878 <TARGET_IO_CLOCK_init+0x1c>)
    1862:	0019      	movs	r1, r3
    1864:	2003      	movs	r0, #3
    1866:	4b05      	ldr	r3, [pc, #20]	; (187c <TARGET_IO_CLOCK_init+0x20>)
    1868:	4798      	blx	r3
	_gclk_enable_channel(SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC);
    186a:	2100      	movs	r1, #0
    186c:	2017      	movs	r0, #23
    186e:	4b04      	ldr	r3, [pc, #16]	; (1880 <TARGET_IO_CLOCK_init+0x24>)
    1870:	4798      	blx	r3
}
    1872:	46c0      	nop			; (mov r8, r8)
    1874:	46bd      	mov	sp, r7
    1876:	bd80      	pop	{r7, pc}
    1878:	42001400 	.word	0x42001400
    187c:	000015ad 	.word	0x000015ad
    1880:	0000146d 	.word	0x0000146d

00001884 <TARGET_IO_init>:

void TARGET_IO_init(void)
{
    1884:	b580      	push	{r7, lr}
    1886:	af00      	add	r7, sp, #0
	TARGET_IO_CLOCK_init();
    1888:	4b06      	ldr	r3, [pc, #24]	; (18a4 <TARGET_IO_init+0x20>)
    188a:	4798      	blx	r3
	usart_sync_init(&TARGET_IO, SERCOM3, (void *)NULL);
    188c:	4906      	ldr	r1, [pc, #24]	; (18a8 <TARGET_IO_init+0x24>)
    188e:	4b07      	ldr	r3, [pc, #28]	; (18ac <TARGET_IO_init+0x28>)
    1890:	2200      	movs	r2, #0
    1892:	0018      	movs	r0, r3
    1894:	4b06      	ldr	r3, [pc, #24]	; (18b0 <TARGET_IO_init+0x2c>)
    1896:	4798      	blx	r3
	TARGET_IO_PORT_init();
    1898:	4b06      	ldr	r3, [pc, #24]	; (18b4 <TARGET_IO_init+0x30>)
    189a:	4798      	blx	r3
}
    189c:	46c0      	nop			; (mov r8, r8)
    189e:	46bd      	mov	sp, r7
    18a0:	bd80      	pop	{r7, pc}
    18a2:	46c0      	nop			; (mov r8, r8)
    18a4:	0000185d 	.word	0x0000185d
    18a8:	42001400 	.word	0x42001400
    18ac:	20001270 	.word	0x20001270
    18b0:	00001de1 	.word	0x00001de1
    18b4:	00001831 	.word	0x00001831

000018b8 <delay_driver_init>:

void delay_driver_init(void)
{
    18b8:	b580      	push	{r7, lr}
    18ba:	af00      	add	r7, sp, #0
	delay_init(SysTick);
    18bc:	4b03      	ldr	r3, [pc, #12]	; (18cc <delay_driver_init+0x14>)
    18be:	0018      	movs	r0, r3
    18c0:	4b03      	ldr	r3, [pc, #12]	; (18d0 <delay_driver_init+0x18>)
    18c2:	4798      	blx	r3
}
    18c4:	46c0      	nop			; (mov r8, r8)
    18c6:	46bd      	mov	sp, r7
    18c8:	bd80      	pop	{r7, pc}
    18ca:	46c0      	nop			; (mov r8, r8)
    18cc:	e000e010 	.word	0xe000e010
    18d0:	00001a91 	.word	0x00001a91

000018d4 <USB_DEVICE_INSTANCE_PORT_init>:

void USB_DEVICE_INSTANCE_PORT_init(void)
{
    18d4:	b580      	push	{r7, lr}
    18d6:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    18d8:	2102      	movs	r1, #2
    18da:	2018      	movs	r0, #24
    18dc:	4b11      	ldr	r3, [pc, #68]	; (1924 <USB_DEVICE_INSTANCE_PORT_init+0x50>)
    18de:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    18e0:	2100      	movs	r1, #0
    18e2:	2018      	movs	r0, #24
    18e4:	4b10      	ldr	r3, [pc, #64]	; (1928 <USB_DEVICE_INSTANCE_PORT_init+0x54>)
    18e6:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    18e8:	2100      	movs	r1, #0
    18ea:	2018      	movs	r0, #24
    18ec:	4b0f      	ldr	r3, [pc, #60]	; (192c <USB_DEVICE_INSTANCE_PORT_init+0x58>)
    18ee:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    18f0:	4b0f      	ldr	r3, [pc, #60]	; (1930 <USB_DEVICE_INSTANCE_PORT_init+0x5c>)
    18f2:	0019      	movs	r1, r3
    18f4:	2018      	movs	r0, #24
    18f6:	4b0f      	ldr	r3, [pc, #60]	; (1934 <USB_DEVICE_INSTANCE_PORT_init+0x60>)
    18f8:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_F"> F
	                      // <GPIO_PIN_FUNCTION_G"> G
	                      // <GPIO_PIN_FUNCTION_H"> H
	                      PINMUX_PA24G_USB_DM);

	gpio_set_pin_direction(PA25,
    18fa:	2102      	movs	r1, #2
    18fc:	2019      	movs	r0, #25
    18fe:	4b09      	ldr	r3, [pc, #36]	; (1924 <USB_DEVICE_INSTANCE_PORT_init+0x50>)
    1900:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    1902:	2100      	movs	r1, #0
    1904:	2019      	movs	r0, #25
    1906:	4b08      	ldr	r3, [pc, #32]	; (1928 <USB_DEVICE_INSTANCE_PORT_init+0x54>)
    1908:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    190a:	2100      	movs	r1, #0
    190c:	2019      	movs	r0, #25
    190e:	4b07      	ldr	r3, [pc, #28]	; (192c <USB_DEVICE_INSTANCE_PORT_init+0x58>)
    1910:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    1912:	4b09      	ldr	r3, [pc, #36]	; (1938 <USB_DEVICE_INSTANCE_PORT_init+0x64>)
    1914:	0019      	movs	r1, r3
    1916:	2019      	movs	r0, #25
    1918:	4b06      	ldr	r3, [pc, #24]	; (1934 <USB_DEVICE_INSTANCE_PORT_init+0x60>)
    191a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_E"> E
	                      // <GPIO_PIN_FUNCTION_F"> F
	                      // <GPIO_PIN_FUNCTION_G"> G
	                      // <GPIO_PIN_FUNCTION_H"> H
	                      PINMUX_PA25G_USB_DP);
}
    191c:	46c0      	nop			; (mov r8, r8)
    191e:	46bd      	mov	sp, r7
    1920:	bd80      	pop	{r7, pc}
    1922:	46c0      	nop			; (mov r8, r8)
    1924:	000013d9 	.word	0x000013d9
    1928:	00001419 	.word	0x00001419
    192c:	00001379 	.word	0x00001379
    1930:	00180006 	.word	0x00180006
    1934:	000013b5 	.word	0x000013b5
    1938:	00190006 	.word	0x00190006

0000193c <USB_DEVICE_INSTANCE_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void USB_DEVICE_INSTANCE_CLOCK_init(void)
{
    193c:	b580      	push	{r7, lr}
    193e:	af00      	add	r7, sp, #0

	_pm_enable_bus_clock(PM_BUS_APBB, USB);
    1940:	4b08      	ldr	r3, [pc, #32]	; (1964 <USB_DEVICE_INSTANCE_CLOCK_init+0x28>)
    1942:	0019      	movs	r1, r3
    1944:	2002      	movs	r0, #2
    1946:	4b08      	ldr	r3, [pc, #32]	; (1968 <USB_DEVICE_INSTANCE_CLOCK_init+0x2c>)
    1948:	4798      	blx	r3
	_pm_enable_bus_clock(PM_BUS_AHB, USB);
    194a:	4b06      	ldr	r3, [pc, #24]	; (1964 <USB_DEVICE_INSTANCE_CLOCK_init+0x28>)
    194c:	0019      	movs	r1, r3
    194e:	2000      	movs	r0, #0
    1950:	4b05      	ldr	r3, [pc, #20]	; (1968 <USB_DEVICE_INSTANCE_CLOCK_init+0x2c>)
    1952:	4798      	blx	r3
	_gclk_enable_channel(USB_GCLK_ID, CONF_GCLK_USB_SRC);
    1954:	2104      	movs	r1, #4
    1956:	2006      	movs	r0, #6
    1958:	4b04      	ldr	r3, [pc, #16]	; (196c <USB_DEVICE_INSTANCE_CLOCK_init+0x30>)
    195a:	4798      	blx	r3
}
    195c:	46c0      	nop			; (mov r8, r8)
    195e:	46bd      	mov	sp, r7
    1960:	bd80      	pop	{r7, pc}
    1962:	46c0      	nop			; (mov r8, r8)
    1964:	41005000 	.word	0x41005000
    1968:	000015ad 	.word	0x000015ad
    196c:	0000146d 	.word	0x0000146d

00001970 <USB_DEVICE_INSTANCE_init>:

void USB_DEVICE_INSTANCE_init(void)
{
    1970:	b580      	push	{r7, lr}
    1972:	af00      	add	r7, sp, #0
	USB_DEVICE_INSTANCE_CLOCK_init();
    1974:	4b04      	ldr	r3, [pc, #16]	; (1988 <USB_DEVICE_INSTANCE_init+0x18>)
    1976:	4798      	blx	r3
	usb_d_init();
    1978:	4b04      	ldr	r3, [pc, #16]	; (198c <USB_DEVICE_INSTANCE_init+0x1c>)
    197a:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
    197c:	4b04      	ldr	r3, [pc, #16]	; (1990 <USB_DEVICE_INSTANCE_init+0x20>)
    197e:	4798      	blx	r3
}
    1980:	46c0      	nop			; (mov r8, r8)
    1982:	46bd      	mov	sp, r7
    1984:	bd80      	pop	{r7, pc}
    1986:	46c0      	nop			; (mov r8, r8)
    1988:	0000193d 	.word	0x0000193d
    198c:	00002465 	.word	0x00002465
    1990:	000018d5 	.word	0x000018d5

00001994 <system_init>:

void system_init(void)
{
    1994:	b580      	push	{r7, lr}
    1996:	af00      	add	r7, sp, #0
	init_mcu();
    1998:	4b23      	ldr	r3, [pc, #140]	; (1a28 <system_init+0x94>)
    199a:	4798      	blx	r3

	// GPIO on PA07

	gpio_set_pin_level(CS_ADF,
    199c:	2100      	movs	r1, #0
    199e:	2007      	movs	r0, #7
    19a0:	4b22      	ldr	r3, [pc, #136]	; (1a2c <system_init+0x98>)
    19a2:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CS_ADF, GPIO_DIRECTION_OUT);
    19a4:	2102      	movs	r1, #2
    19a6:	2007      	movs	r0, #7
    19a8:	4b21      	ldr	r3, [pc, #132]	; (1a30 <system_init+0x9c>)
    19aa:	4798      	blx	r3

	gpio_set_pin_function(CS_ADF, GPIO_PIN_FUNCTION_OFF);
    19ac:	2301      	movs	r3, #1
    19ae:	425b      	negs	r3, r3
    19b0:	0019      	movs	r1, r3
    19b2:	2007      	movs	r0, #7
    19b4:	4b1f      	ldr	r3, [pc, #124]	; (1a34 <system_init+0xa0>)
    19b6:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_LMX,
    19b8:	2101      	movs	r1, #1
    19ba:	2013      	movs	r0, #19
    19bc:	4b1b      	ldr	r3, [pc, #108]	; (1a2c <system_init+0x98>)
    19be:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_LMX, GPIO_DIRECTION_OUT);
    19c0:	2102      	movs	r1, #2
    19c2:	2013      	movs	r0, #19
    19c4:	4b1a      	ldr	r3, [pc, #104]	; (1a30 <system_init+0x9c>)
    19c6:	4798      	blx	r3

	gpio_set_pin_function(CS_LMX, GPIO_PIN_FUNCTION_OFF);
    19c8:	2301      	movs	r3, #1
    19ca:	425b      	negs	r3, r3
    19cc:	0019      	movs	r1, r3
    19ce:	2013      	movs	r0, #19
    19d0:	4b18      	ldr	r3, [pc, #96]	; (1a34 <system_init+0xa0>)
    19d2:	4798      	blx	r3

	// GPIO on PA30

	gpio_set_pin_level(PA30,
    19d4:	2101      	movs	r1, #1
    19d6:	201e      	movs	r0, #30
    19d8:	4b14      	ldr	r3, [pc, #80]	; (1a2c <system_init+0x98>)
    19da:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(PA30, GPIO_DIRECTION_OUT);
    19dc:	2102      	movs	r1, #2
    19de:	201e      	movs	r0, #30
    19e0:	4b13      	ldr	r3, [pc, #76]	; (1a30 <system_init+0x9c>)
    19e2:	4798      	blx	r3

	gpio_set_pin_function(PA30, GPIO_PIN_FUNCTION_OFF);
    19e4:	2301      	movs	r3, #1
    19e6:	425b      	negs	r3, r3
    19e8:	0019      	movs	r1, r3
    19ea:	201e      	movs	r0, #30
    19ec:	4b11      	ldr	r3, [pc, #68]	; (1a34 <system_init+0xa0>)
    19ee:	4798      	blx	r3

	// GPIO on PB30

	gpio_set_pin_level(LED0,
    19f0:	2101      	movs	r1, #1
    19f2:	203e      	movs	r0, #62	; 0x3e
    19f4:	4b0d      	ldr	r3, [pc, #52]	; (1a2c <system_init+0x98>)
    19f6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    19f8:	2102      	movs	r1, #2
    19fa:	203e      	movs	r0, #62	; 0x3e
    19fc:	4b0c      	ldr	r3, [pc, #48]	; (1a30 <system_init+0x9c>)
    19fe:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    1a00:	2301      	movs	r3, #1
    1a02:	425b      	negs	r3, r3
    1a04:	0019      	movs	r1, r3
    1a06:	203e      	movs	r0, #62	; 0x3e
    1a08:	4b0a      	ldr	r3, [pc, #40]	; (1a34 <system_init+0xa0>)
    1a0a:	4798      	blx	r3

	SPI_ADF_init();
    1a0c:	4b0a      	ldr	r3, [pc, #40]	; (1a38 <system_init+0xa4>)
    1a0e:	4798      	blx	r3

	SPI_LMX_init();
    1a10:	4b0a      	ldr	r3, [pc, #40]	; (1a3c <system_init+0xa8>)
    1a12:	4798      	blx	r3

	TARGET_IO_init();
    1a14:	4b0a      	ldr	r3, [pc, #40]	; (1a40 <system_init+0xac>)
    1a16:	4798      	blx	r3

	delay_driver_init();
    1a18:	4b0a      	ldr	r3, [pc, #40]	; (1a44 <system_init+0xb0>)
    1a1a:	4798      	blx	r3

	USB_DEVICE_INSTANCE_init();
    1a1c:	4b0a      	ldr	r3, [pc, #40]	; (1a48 <system_init+0xb4>)
    1a1e:	4798      	blx	r3
}
    1a20:	46c0      	nop			; (mov r8, r8)
    1a22:	46bd      	mov	sp, r7
    1a24:	bd80      	pop	{r7, pc}
    1a26:	46c0      	nop			; (mov r8, r8)
    1a28:	00001459 	.word	0x00001459
    1a2c:	00001419 	.word	0x00001419
    1a30:	000013d9 	.word	0x000013d9
    1a34:	000013b5 	.word	0x000013b5
    1a38:	0000172d 	.word	0x0000172d
    1a3c:	000017fd 	.word	0x000017fd
    1a40:	00001885 	.word	0x00001885
    1a44:	000018b9 	.word	0x000018b9
    1a48:	00001971 	.word	0x00001971

00001a4c <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    1a4c:	b580      	push	{r7, lr}
    1a4e:	b084      	sub	sp, #16
    1a50:	af00      	add	r7, sp, #0
    1a52:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1a54:	f3ef 8310 	mrs	r3, PRIMASK
    1a58:	60fb      	str	r3, [r7, #12]
  return(result);
    1a5a:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    1a5c:	687b      	ldr	r3, [r7, #4]
    1a5e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    1a60:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    1a62:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    1a66:	46c0      	nop			; (mov r8, r8)
    1a68:	46bd      	mov	sp, r7
    1a6a:	b004      	add	sp, #16
    1a6c:	bd80      	pop	{r7, pc}

00001a6e <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    1a6e:	b580      	push	{r7, lr}
    1a70:	b084      	sub	sp, #16
    1a72:	af00      	add	r7, sp, #0
    1a74:	6078      	str	r0, [r7, #4]
    1a76:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    1a7a:	687b      	ldr	r3, [r7, #4]
    1a7c:	681b      	ldr	r3, [r3, #0]
    1a7e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    1a80:	68fb      	ldr	r3, [r7, #12]
    1a82:	f383 8810 	msr	PRIMASK, r3
}
    1a86:	46c0      	nop			; (mov r8, r8)
    1a88:	46bd      	mov	sp, r7
    1a8a:	b004      	add	sp, #16
    1a8c:	bd80      	pop	{r7, pc}
	...

00001a90 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    1a90:	b580      	push	{r7, lr}
    1a92:	b082      	sub	sp, #8
    1a94:	af00      	add	r7, sp, #0
    1a96:	6078      	str	r0, [r7, #4]
	_delay_init(hardware = hw);
    1a98:	4b05      	ldr	r3, [pc, #20]	; (1ab0 <delay_init+0x20>)
    1a9a:	687a      	ldr	r2, [r7, #4]
    1a9c:	601a      	str	r2, [r3, #0]
    1a9e:	4b04      	ldr	r3, [pc, #16]	; (1ab0 <delay_init+0x20>)
    1aa0:	681b      	ldr	r3, [r3, #0]
    1aa2:	0018      	movs	r0, r3
    1aa4:	4b03      	ldr	r3, [pc, #12]	; (1ab4 <delay_init+0x24>)
    1aa6:	4798      	blx	r3
}
    1aa8:	46c0      	nop			; (mov r8, r8)
    1aaa:	46bd      	mov	sp, r7
    1aac:	b002      	add	sp, #8
    1aae:	bd80      	pop	{r7, pc}
    1ab0:	20000bec 	.word	0x20000bec
    1ab4:	000044a1 	.word	0x000044a1

00001ab8 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    1ab8:	b590      	push	{r4, r7, lr}
    1aba:	b083      	sub	sp, #12
    1abc:	af00      	add	r7, sp, #0
    1abe:	0002      	movs	r2, r0
    1ac0:	1dbb      	adds	r3, r7, #6
    1ac2:	801a      	strh	r2, [r3, #0]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    1ac4:	4b07      	ldr	r3, [pc, #28]	; (1ae4 <delay_ms+0x2c>)
    1ac6:	681c      	ldr	r4, [r3, #0]
    1ac8:	1dbb      	adds	r3, r7, #6
    1aca:	881b      	ldrh	r3, [r3, #0]
    1acc:	0018      	movs	r0, r3
    1ace:	4b06      	ldr	r3, [pc, #24]	; (1ae8 <delay_ms+0x30>)
    1ad0:	4798      	blx	r3
    1ad2:	0003      	movs	r3, r0
    1ad4:	0019      	movs	r1, r3
    1ad6:	0020      	movs	r0, r4
    1ad8:	4b04      	ldr	r3, [pc, #16]	; (1aec <delay_ms+0x34>)
    1ada:	4798      	blx	r3
}
    1adc:	46c0      	nop			; (mov r8, r8)
    1ade:	46bd      	mov	sp, r7
    1ae0:	b003      	add	sp, #12
    1ae2:	bd90      	pop	{r4, r7, pc}
    1ae4:	20000bec 	.word	0x20000bec
    1ae8:	00002cb9 	.word	0x00002cb9
    1aec:	000044bd 	.word	0x000044bd

00001af0 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    1af0:	b580      	push	{r7, lr}
    1af2:	b084      	sub	sp, #16
    1af4:	af00      	add	r7, sp, #0
    1af6:	60f8      	str	r0, [r7, #12]
    1af8:	60b9      	str	r1, [r7, #8]
    1afa:	1dbb      	adds	r3, r7, #6
    1afc:	801a      	strh	r2, [r3, #0]
	ASSERT(io_descr && buf);
    1afe:	68fb      	ldr	r3, [r7, #12]
    1b00:	2b00      	cmp	r3, #0
    1b02:	d004      	beq.n	1b0e <io_write+0x1e>
    1b04:	68bb      	ldr	r3, [r7, #8]
    1b06:	2b00      	cmp	r3, #0
    1b08:	d001      	beq.n	1b0e <io_write+0x1e>
    1b0a:	2301      	movs	r3, #1
    1b0c:	e000      	b.n	1b10 <io_write+0x20>
    1b0e:	2300      	movs	r3, #0
    1b10:	1c1a      	adds	r2, r3, #0
    1b12:	2301      	movs	r3, #1
    1b14:	4013      	ands	r3, r2
    1b16:	b2db      	uxtb	r3, r3
    1b18:	4908      	ldr	r1, [pc, #32]	; (1b3c <io_write+0x4c>)
    1b1a:	2234      	movs	r2, #52	; 0x34
    1b1c:	0018      	movs	r0, r3
    1b1e:	4b08      	ldr	r3, [pc, #32]	; (1b40 <io_write+0x50>)
    1b20:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    1b22:	68fb      	ldr	r3, [r7, #12]
    1b24:	681b      	ldr	r3, [r3, #0]
    1b26:	1dba      	adds	r2, r7, #6
    1b28:	8812      	ldrh	r2, [r2, #0]
    1b2a:	68b9      	ldr	r1, [r7, #8]
    1b2c:	68f8      	ldr	r0, [r7, #12]
    1b2e:	4798      	blx	r3
    1b30:	0003      	movs	r3, r0
}
    1b32:	0018      	movs	r0, r3
    1b34:	46bd      	mov	sp, r7
    1b36:	b004      	add	sp, #16
    1b38:	bd80      	pop	{r7, pc}
    1b3a:	46c0      	nop			; (mov r8, r8)
    1b3c:	0001215c 	.word	0x0001215c
    1b40:	00002a9d 	.word	0x00002a9d

00001b44 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    1b44:	b580      	push	{r7, lr}
    1b46:	b084      	sub	sp, #16
    1b48:	af00      	add	r7, sp, #0
    1b4a:	60f8      	str	r0, [r7, #12]
    1b4c:	60b9      	str	r1, [r7, #8]
    1b4e:	1dbb      	adds	r3, r7, #6
    1b50:	801a      	strh	r2, [r3, #0]
	ASSERT(io_descr && buf);
    1b52:	68fb      	ldr	r3, [r7, #12]
    1b54:	2b00      	cmp	r3, #0
    1b56:	d004      	beq.n	1b62 <io_read+0x1e>
    1b58:	68bb      	ldr	r3, [r7, #8]
    1b5a:	2b00      	cmp	r3, #0
    1b5c:	d001      	beq.n	1b62 <io_read+0x1e>
    1b5e:	2301      	movs	r3, #1
    1b60:	e000      	b.n	1b64 <io_read+0x20>
    1b62:	2300      	movs	r3, #0
    1b64:	1c1a      	adds	r2, r3, #0
    1b66:	2301      	movs	r3, #1
    1b68:	4013      	ands	r3, r2
    1b6a:	b2db      	uxtb	r3, r3
    1b6c:	4908      	ldr	r1, [pc, #32]	; (1b90 <io_read+0x4c>)
    1b6e:	223d      	movs	r2, #61	; 0x3d
    1b70:	0018      	movs	r0, r3
    1b72:	4b08      	ldr	r3, [pc, #32]	; (1b94 <io_read+0x50>)
    1b74:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    1b76:	68fb      	ldr	r3, [r7, #12]
    1b78:	685b      	ldr	r3, [r3, #4]
    1b7a:	1dba      	adds	r2, r7, #6
    1b7c:	8812      	ldrh	r2, [r2, #0]
    1b7e:	68b9      	ldr	r1, [r7, #8]
    1b80:	68f8      	ldr	r0, [r7, #12]
    1b82:	4798      	blx	r3
    1b84:	0003      	movs	r3, r0
}
    1b86:	0018      	movs	r0, r3
    1b88:	46bd      	mov	sp, r7
    1b8a:	b004      	add	sp, #16
    1b8c:	bd80      	pop	{r7, pc}
    1b8e:	46c0      	nop			; (mov r8, r8)
    1b90:	0001215c 	.word	0x0001215c
    1b94:	00002a9d 	.word	0x00002a9d

00001b98 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    1b98:	b580      	push	{r7, lr}
    1b9a:	b084      	sub	sp, #16
    1b9c:	af00      	add	r7, sp, #0
    1b9e:	6078      	str	r0, [r7, #4]
    1ba0:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    1ba2:	2300      	movs	r3, #0
    1ba4:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    1ba6:	687b      	ldr	r3, [r7, #4]
    1ba8:	2b00      	cmp	r3, #0
    1baa:	d004      	beq.n	1bb6 <spi_m_sync_init+0x1e>
    1bac:	683b      	ldr	r3, [r7, #0]
    1bae:	2b00      	cmp	r3, #0
    1bb0:	d001      	beq.n	1bb6 <spi_m_sync_init+0x1e>
    1bb2:	2301      	movs	r3, #1
    1bb4:	e000      	b.n	1bb8 <spi_m_sync_init+0x20>
    1bb6:	2300      	movs	r3, #0
    1bb8:	1c1a      	adds	r2, r3, #0
    1bba:	2301      	movs	r3, #1
    1bbc:	4013      	ands	r3, r2
    1bbe:	b2db      	uxtb	r3, r3
    1bc0:	4911      	ldr	r1, [pc, #68]	; (1c08 <spi_m_sync_init+0x70>)
    1bc2:	2240      	movs	r2, #64	; 0x40
    1bc4:	0018      	movs	r0, r3
    1bc6:	4b11      	ldr	r3, [pc, #68]	; (1c0c <spi_m_sync_init+0x74>)
    1bc8:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    1bca:	687b      	ldr	r3, [r7, #4]
    1bcc:	683a      	ldr	r2, [r7, #0]
    1bce:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    1bd0:	687b      	ldr	r3, [r7, #4]
    1bd2:	3304      	adds	r3, #4
    1bd4:	683a      	ldr	r2, [r7, #0]
    1bd6:	0011      	movs	r1, r2
    1bd8:	0018      	movs	r0, r3
    1bda:	4b0d      	ldr	r3, [pc, #52]	; (1c10 <spi_m_sync_init+0x78>)
    1bdc:	4798      	blx	r3
    1bde:	0003      	movs	r3, r0
    1be0:	60fb      	str	r3, [r7, #12]

	if (rc < 0) {
    1be2:	68fb      	ldr	r3, [r7, #12]
    1be4:	2b00      	cmp	r3, #0
    1be6:	da01      	bge.n	1bec <spi_m_sync_init+0x54>
		return rc;
    1be8:	68fb      	ldr	r3, [r7, #12]
    1bea:	e009      	b.n	1c00 <spi_m_sync_init+0x68>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    1bec:	687b      	ldr	r3, [r7, #4]
    1bee:	4a09      	ldr	r2, [pc, #36]	; (1c14 <spi_m_sync_init+0x7c>)
    1bf0:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    1bf2:	687b      	ldr	r3, [r7, #4]
    1bf4:	4a08      	ldr	r2, [pc, #32]	; (1c18 <spi_m_sync_init+0x80>)
    1bf6:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    1bf8:	687b      	ldr	r3, [r7, #4]
    1bfa:	4a08      	ldr	r2, [pc, #32]	; (1c1c <spi_m_sync_init+0x84>)
    1bfc:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    1bfe:	2300      	movs	r3, #0
}
    1c00:	0018      	movs	r0, r3
    1c02:	46bd      	mov	sp, r7
    1c04:	b004      	add	sp, #16
    1c06:	bd80      	pop	{r7, pc}
    1c08:	00012170 	.word	0x00012170
    1c0c:	00002a9d 	.word	0x00002a9d
    1c10:	00003a61 	.word	0x00003a61
    1c14:	ffff8000 	.word	0xffff8000
    1c18:	00001c59 	.word	0x00001c59
    1c1c:	00001cbd 	.word	0x00001cbd

00001c20 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
    1c20:	b580      	push	{r7, lr}
    1c22:	b082      	sub	sp, #8
    1c24:	af00      	add	r7, sp, #0
    1c26:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    1c28:	687b      	ldr	r3, [r7, #4]
    1c2a:	1e5a      	subs	r2, r3, #1
    1c2c:	4193      	sbcs	r3, r2
    1c2e:	b2db      	uxtb	r3, r3
    1c30:	4906      	ldr	r1, [pc, #24]	; (1c4c <spi_m_sync_enable+0x2c>)
    1c32:	2257      	movs	r2, #87	; 0x57
    1c34:	0018      	movs	r0, r3
    1c36:	4b06      	ldr	r3, [pc, #24]	; (1c50 <spi_m_sync_enable+0x30>)
    1c38:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
    1c3a:	687b      	ldr	r3, [r7, #4]
    1c3c:	3304      	adds	r3, #4
    1c3e:	0018      	movs	r0, r3
    1c40:	4b04      	ldr	r3, [pc, #16]	; (1c54 <spi_m_sync_enable+0x34>)
    1c42:	4798      	blx	r3
}
    1c44:	46c0      	nop			; (mov r8, r8)
    1c46:	46bd      	mov	sp, r7
    1c48:	b002      	add	sp, #8
    1c4a:	bd80      	pop	{r7, pc}
    1c4c:	00012170 	.word	0x00012170
    1c50:	00002a9d 	.word	0x00002a9d
    1c54:	00003bc5 	.word	0x00003bc5

00001c58 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    1c58:	b580      	push	{r7, lr}
    1c5a:	b088      	sub	sp, #32
    1c5c:	af00      	add	r7, sp, #0
    1c5e:	60f8      	str	r0, [r7, #12]
    1c60:	60b9      	str	r1, [r7, #8]
    1c62:	1dbb      	adds	r3, r7, #6
    1c64:	801a      	strh	r2, [r3, #0]
	ASSERT(io);
    1c66:	68fb      	ldr	r3, [r7, #12]
    1c68:	1e5a      	subs	r2, r3, #1
    1c6a:	4193      	sbcs	r3, r2
    1c6c:	b2db      	uxtb	r3, r3
    1c6e:	4910      	ldr	r1, [pc, #64]	; (1cb0 <_spi_m_sync_io_read+0x58>)
    1c70:	2287      	movs	r2, #135	; 0x87
    1c72:	0018      	movs	r0, r3
    1c74:	4b0f      	ldr	r3, [pc, #60]	; (1cb4 <_spi_m_sync_io_read+0x5c>)
    1c76:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    1c78:	68fb      	ldr	r3, [r7, #12]
    1c7a:	3b0c      	subs	r3, #12
    1c7c:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    1c7e:	2310      	movs	r3, #16
    1c80:	18fb      	adds	r3, r7, r3
    1c82:	68ba      	ldr	r2, [r7, #8]
    1c84:	605a      	str	r2, [r3, #4]
	xfer.txbuf = 0;
    1c86:	2310      	movs	r3, #16
    1c88:	18fb      	adds	r3, r7, r3
    1c8a:	2200      	movs	r2, #0
    1c8c:	601a      	str	r2, [r3, #0]
	xfer.size  = length;
    1c8e:	1dbb      	adds	r3, r7, #6
    1c90:	881a      	ldrh	r2, [r3, #0]
    1c92:	2310      	movs	r3, #16
    1c94:	18fb      	adds	r3, r7, r3
    1c96:	609a      	str	r2, [r3, #8]

	return spi_m_sync_transfer(spi, &xfer);
    1c98:	2310      	movs	r3, #16
    1c9a:	18fa      	adds	r2, r7, r3
    1c9c:	69fb      	ldr	r3, [r7, #28]
    1c9e:	0011      	movs	r1, r2
    1ca0:	0018      	movs	r0, r3
    1ca2:	4b05      	ldr	r3, [pc, #20]	; (1cb8 <_spi_m_sync_io_read+0x60>)
    1ca4:	4798      	blx	r3
    1ca6:	0003      	movs	r3, r0
}
    1ca8:	0018      	movs	r0, r3
    1caa:	46bd      	mov	sp, r7
    1cac:	b008      	add	sp, #32
    1cae:	bd80      	pop	{r7, pc}
    1cb0:	00012170 	.word	0x00012170
    1cb4:	00002a9d 	.word	0x00002a9d
    1cb8:	00001d21 	.word	0x00001d21

00001cbc <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    1cbc:	b580      	push	{r7, lr}
    1cbe:	b088      	sub	sp, #32
    1cc0:	af00      	add	r7, sp, #0
    1cc2:	60f8      	str	r0, [r7, #12]
    1cc4:	60b9      	str	r1, [r7, #8]
    1cc6:	1dbb      	adds	r3, r7, #6
    1cc8:	801a      	strh	r2, [r3, #0]
	ASSERT(io);
    1cca:	68fb      	ldr	r3, [r7, #12]
    1ccc:	1e5a      	subs	r2, r3, #1
    1cce:	4193      	sbcs	r3, r2
    1cd0:	b2db      	uxtb	r3, r3
    1cd2:	4910      	ldr	r1, [pc, #64]	; (1d14 <_spi_m_sync_io_write+0x58>)
    1cd4:	22a3      	movs	r2, #163	; 0xa3
    1cd6:	0018      	movs	r0, r3
    1cd8:	4b0f      	ldr	r3, [pc, #60]	; (1d18 <_spi_m_sync_io_write+0x5c>)
    1cda:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    1cdc:	68fb      	ldr	r3, [r7, #12]
    1cde:	3b0c      	subs	r3, #12
    1ce0:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    1ce2:	2310      	movs	r3, #16
    1ce4:	18fb      	adds	r3, r7, r3
    1ce6:	2200      	movs	r2, #0
    1ce8:	605a      	str	r2, [r3, #4]
	xfer.txbuf = (uint8_t *)buf;
    1cea:	2310      	movs	r3, #16
    1cec:	18fb      	adds	r3, r7, r3
    1cee:	68ba      	ldr	r2, [r7, #8]
    1cf0:	601a      	str	r2, [r3, #0]
	xfer.size  = length;
    1cf2:	1dbb      	adds	r3, r7, #6
    1cf4:	881a      	ldrh	r2, [r3, #0]
    1cf6:	2310      	movs	r3, #16
    1cf8:	18fb      	adds	r3, r7, r3
    1cfa:	609a      	str	r2, [r3, #8]

	return spi_m_sync_transfer(spi, &xfer);
    1cfc:	2310      	movs	r3, #16
    1cfe:	18fa      	adds	r2, r7, r3
    1d00:	69fb      	ldr	r3, [r7, #28]
    1d02:	0011      	movs	r1, r2
    1d04:	0018      	movs	r0, r3
    1d06:	4b05      	ldr	r3, [pc, #20]	; (1d1c <_spi_m_sync_io_write+0x60>)
    1d08:	4798      	blx	r3
    1d0a:	0003      	movs	r3, r0
}
    1d0c:	0018      	movs	r0, r3
    1d0e:	46bd      	mov	sp, r7
    1d10:	b008      	add	sp, #32
    1d12:	bd80      	pop	{r7, pc}
    1d14:	00012170 	.word	0x00012170
    1d18:	00002a9d 	.word	0x00002a9d
    1d1c:	00001d21 	.word	0x00001d21

00001d20 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    1d20:	b580      	push	{r7, lr}
    1d22:	b086      	sub	sp, #24
    1d24:	af00      	add	r7, sp, #0
    1d26:	6078      	str	r0, [r7, #4]
    1d28:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    1d2a:	687b      	ldr	r3, [r7, #4]
    1d2c:	2b00      	cmp	r3, #0
    1d2e:	d004      	beq.n	1d3a <spi_m_sync_transfer+0x1a>
    1d30:	683b      	ldr	r3, [r7, #0]
    1d32:	2b00      	cmp	r3, #0
    1d34:	d001      	beq.n	1d3a <spi_m_sync_transfer+0x1a>
    1d36:	2301      	movs	r3, #1
    1d38:	e000      	b.n	1d3c <spi_m_sync_transfer+0x1c>
    1d3a:	2300      	movs	r3, #0
    1d3c:	1c1a      	adds	r2, r3, #0
    1d3e:	2301      	movs	r3, #1
    1d40:	4013      	ands	r3, r2
    1d42:	b2db      	uxtb	r3, r3
    1d44:	4910      	ldr	r1, [pc, #64]	; (1d88 <spi_m_sync_transfer+0x68>)
    1d46:	22b3      	movs	r2, #179	; 0xb3
    1d48:	0018      	movs	r0, r3
    1d4a:	4b10      	ldr	r3, [pc, #64]	; (1d8c <spi_m_sync_transfer+0x6c>)
    1d4c:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    1d4e:	683b      	ldr	r3, [r7, #0]
    1d50:	681a      	ldr	r2, [r3, #0]
    1d52:	230c      	movs	r3, #12
    1d54:	18fb      	adds	r3, r7, r3
    1d56:	601a      	str	r2, [r3, #0]
	msg.rxbuf = p_xfer->rxbuf;
    1d58:	683b      	ldr	r3, [r7, #0]
    1d5a:	685a      	ldr	r2, [r3, #4]
    1d5c:	230c      	movs	r3, #12
    1d5e:	18fb      	adds	r3, r7, r3
    1d60:	605a      	str	r2, [r3, #4]
	msg.size  = p_xfer->size;
    1d62:	683b      	ldr	r3, [r7, #0]
    1d64:	689a      	ldr	r2, [r3, #8]
    1d66:	230c      	movs	r3, #12
    1d68:	18fb      	adds	r3, r7, r3
    1d6a:	609a      	str	r2, [r3, #8]
	return _spi_m_sync_trans(&spi->dev, &msg);
    1d6c:	687b      	ldr	r3, [r7, #4]
    1d6e:	3304      	adds	r3, #4
    1d70:	220c      	movs	r2, #12
    1d72:	18ba      	adds	r2, r7, r2
    1d74:	0011      	movs	r1, r2
    1d76:	0018      	movs	r0, r3
    1d78:	4b05      	ldr	r3, [pc, #20]	; (1d90 <spi_m_sync_transfer+0x70>)
    1d7a:	4798      	blx	r3
    1d7c:	0003      	movs	r3, r0
}
    1d7e:	0018      	movs	r0, r3
    1d80:	46bd      	mov	sp, r7
    1d82:	b006      	add	sp, #24
    1d84:	bd80      	pop	{r7, pc}
    1d86:	46c0      	nop			; (mov r8, r8)
    1d88:	00012170 	.word	0x00012170
    1d8c:	00002a9d 	.word	0x00002a9d
    1d90:	00003d7d 	.word	0x00003d7d

00001d94 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
    1d94:	b580      	push	{r7, lr}
    1d96:	b082      	sub	sp, #8
    1d98:	af00      	add	r7, sp, #0
    1d9a:	6078      	str	r0, [r7, #4]
    1d9c:	6039      	str	r1, [r7, #0]
	ASSERT(spi && io);
    1d9e:	687b      	ldr	r3, [r7, #4]
    1da0:	2b00      	cmp	r3, #0
    1da2:	d004      	beq.n	1dae <spi_m_sync_get_io_descriptor+0x1a>
    1da4:	683b      	ldr	r3, [r7, #0]
    1da6:	2b00      	cmp	r3, #0
    1da8:	d001      	beq.n	1dae <spi_m_sync_get_io_descriptor+0x1a>
    1daa:	2301      	movs	r3, #1
    1dac:	e000      	b.n	1db0 <spi_m_sync_get_io_descriptor+0x1c>
    1dae:	2300      	movs	r3, #0
    1db0:	1c1a      	adds	r2, r3, #0
    1db2:	2301      	movs	r3, #1
    1db4:	4013      	ands	r3, r2
    1db6:	b2db      	uxtb	r3, r3
    1db8:	4907      	ldr	r1, [pc, #28]	; (1dd8 <spi_m_sync_get_io_descriptor+0x44>)
    1dba:	22bd      	movs	r2, #189	; 0xbd
    1dbc:	0018      	movs	r0, r3
    1dbe:	4b07      	ldr	r3, [pc, #28]	; (1ddc <spi_m_sync_get_io_descriptor+0x48>)
    1dc0:	4798      	blx	r3
	*io = &spi->io;
    1dc2:	687b      	ldr	r3, [r7, #4]
    1dc4:	330c      	adds	r3, #12
    1dc6:	001a      	movs	r2, r3
    1dc8:	683b      	ldr	r3, [r7, #0]
    1dca:	601a      	str	r2, [r3, #0]
	return 0;
    1dcc:	2300      	movs	r3, #0
}
    1dce:	0018      	movs	r0, r3
    1dd0:	46bd      	mov	sp, r7
    1dd2:	b002      	add	sp, #8
    1dd4:	bd80      	pop	{r7, pc}
    1dd6:	46c0      	nop			; (mov r8, r8)
    1dd8:	00012170 	.word	0x00012170
    1ddc:	00002a9d 	.word	0x00002a9d

00001de0 <usart_sync_init>:

/**
 * \brief Initialize usart interface
 */
int32_t usart_sync_init(struct usart_sync_descriptor *const descr, void *const hw, void *const func)
{
    1de0:	b580      	push	{r7, lr}
    1de2:	b086      	sub	sp, #24
    1de4:	af00      	add	r7, sp, #0
    1de6:	60f8      	str	r0, [r7, #12]
    1de8:	60b9      	str	r1, [r7, #8]
    1dea:	607a      	str	r2, [r7, #4]
	int32_t init_status;
	ASSERT(descr && hw);
    1dec:	68fb      	ldr	r3, [r7, #12]
    1dee:	2b00      	cmp	r3, #0
    1df0:	d004      	beq.n	1dfc <usart_sync_init+0x1c>
    1df2:	68bb      	ldr	r3, [r7, #8]
    1df4:	2b00      	cmp	r3, #0
    1df6:	d001      	beq.n	1dfc <usart_sync_init+0x1c>
    1df8:	2301      	movs	r3, #1
    1dfa:	e000      	b.n	1dfe <usart_sync_init+0x1e>
    1dfc:	2300      	movs	r3, #0
    1dfe:	1c1a      	adds	r2, r3, #0
    1e00:	2301      	movs	r3, #1
    1e02:	4013      	ands	r3, r2
    1e04:	b2db      	uxtb	r3, r3
    1e06:	490f      	ldr	r1, [pc, #60]	; (1e44 <usart_sync_init+0x64>)
    1e08:	2234      	movs	r2, #52	; 0x34
    1e0a:	0018      	movs	r0, r3
    1e0c:	4b0e      	ldr	r3, [pc, #56]	; (1e48 <usart_sync_init+0x68>)
    1e0e:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
    1e10:	68fb      	ldr	r3, [r7, #12]
    1e12:	3308      	adds	r3, #8
    1e14:	68ba      	ldr	r2, [r7, #8]
    1e16:	0011      	movs	r1, r2
    1e18:	0018      	movs	r0, r3
    1e1a:	4b0c      	ldr	r3, [pc, #48]	; (1e4c <usart_sync_init+0x6c>)
    1e1c:	4798      	blx	r3
    1e1e:	0003      	movs	r3, r0
    1e20:	617b      	str	r3, [r7, #20]
	if (init_status) {
    1e22:	697b      	ldr	r3, [r7, #20]
    1e24:	2b00      	cmp	r3, #0
    1e26:	d001      	beq.n	1e2c <usart_sync_init+0x4c>
		return init_status;
    1e28:	697b      	ldr	r3, [r7, #20]
    1e2a:	e006      	b.n	1e3a <usart_sync_init+0x5a>
	}

	descr->io.read  = usart_sync_read;
    1e2c:	68fb      	ldr	r3, [r7, #12]
    1e2e:	4a08      	ldr	r2, [pc, #32]	; (1e50 <usart_sync_init+0x70>)
    1e30:	605a      	str	r2, [r3, #4]
	descr->io.write = usart_sync_write;
    1e32:	68fb      	ldr	r3, [r7, #12]
    1e34:	4a07      	ldr	r2, [pc, #28]	; (1e54 <usart_sync_init+0x74>)
    1e36:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    1e38:	2300      	movs	r3, #0
}
    1e3a:	0018      	movs	r0, r3
    1e3c:	46bd      	mov	sp, r7
    1e3e:	b006      	add	sp, #24
    1e40:	bd80      	pop	{r7, pc}
    1e42:	46c0      	nop			; (mov r8, r8)
    1e44:	0001218c 	.word	0x0001218c
    1e48:	00002a9d 	.word	0x00002a9d
    1e4c:	00003439 	.word	0x00003439
    1e50:	00001f69 	.word	0x00001f69
    1e54:	00001e95 	.word	0x00001e95

00001e58 <usart_sync_enable>:

/**
 * \brief Enable usart interface
 */
int32_t usart_sync_enable(struct usart_sync_descriptor *const descr)
{
    1e58:	b580      	push	{r7, lr}
    1e5a:	b082      	sub	sp, #8
    1e5c:	af00      	add	r7, sp, #0
    1e5e:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    1e60:	687b      	ldr	r3, [r7, #4]
    1e62:	1e5a      	subs	r2, r3, #1
    1e64:	4193      	sbcs	r3, r2
    1e66:	b2db      	uxtb	r3, r3
    1e68:	4907      	ldr	r1, [pc, #28]	; (1e88 <usart_sync_enable+0x30>)
    1e6a:	2253      	movs	r2, #83	; 0x53
    1e6c:	0018      	movs	r0, r3
    1e6e:	4b07      	ldr	r3, [pc, #28]	; (1e8c <usart_sync_enable+0x34>)
    1e70:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
    1e72:	687b      	ldr	r3, [r7, #4]
    1e74:	3308      	adds	r3, #8
    1e76:	0018      	movs	r0, r3
    1e78:	4b05      	ldr	r3, [pc, #20]	; (1e90 <usart_sync_enable+0x38>)
    1e7a:	4798      	blx	r3

	return ERR_NONE;
    1e7c:	2300      	movs	r3, #0
}
    1e7e:	0018      	movs	r0, r3
    1e80:	46bd      	mov	sp, r7
    1e82:	b002      	add	sp, #8
    1e84:	bd80      	pop	{r7, pc}
    1e86:	46c0      	nop			; (mov r8, r8)
    1e88:	0001218c 	.word	0x0001218c
    1e8c:	00002a9d 	.word	0x00002a9d
    1e90:	00003479 	.word	0x00003479

00001e94 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    1e94:	b580      	push	{r7, lr}
    1e96:	b086      	sub	sp, #24
    1e98:	af00      	add	r7, sp, #0
    1e9a:	60f8      	str	r0, [r7, #12]
    1e9c:	60b9      	str	r1, [r7, #8]
    1e9e:	1dbb      	adds	r3, r7, #6
    1ea0:	801a      	strh	r2, [r3, #0]
	uint32_t                      offset = 0;
    1ea2:	2300      	movs	r3, #0
    1ea4:	617b      	str	r3, [r7, #20]
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);
    1ea6:	68fb      	ldr	r3, [r7, #12]
    1ea8:	613b      	str	r3, [r7, #16]

	ASSERT(io_descr && buf && length);
    1eaa:	68fb      	ldr	r3, [r7, #12]
    1eac:	2b00      	cmp	r3, #0
    1eae:	d008      	beq.n	1ec2 <usart_sync_write+0x2e>
    1eb0:	68bb      	ldr	r3, [r7, #8]
    1eb2:	2b00      	cmp	r3, #0
    1eb4:	d005      	beq.n	1ec2 <usart_sync_write+0x2e>
    1eb6:	1dbb      	adds	r3, r7, #6
    1eb8:	881b      	ldrh	r3, [r3, #0]
    1eba:	2b00      	cmp	r3, #0
    1ebc:	d001      	beq.n	1ec2 <usart_sync_write+0x2e>
    1ebe:	2301      	movs	r3, #1
    1ec0:	e000      	b.n	1ec4 <usart_sync_write+0x30>
    1ec2:	2300      	movs	r3, #0
    1ec4:	1c1a      	adds	r2, r3, #0
    1ec6:	2301      	movs	r3, #1
    1ec8:	4013      	ands	r3, r2
    1eca:	b2db      	uxtb	r3, r3
    1ecc:	4921      	ldr	r1, [pc, #132]	; (1f54 <usart_sync_write+0xc0>)
    1ece:	22f1      	movs	r2, #241	; 0xf1
    1ed0:	0018      	movs	r0, r3
    1ed2:	4b21      	ldr	r3, [pc, #132]	; (1f58 <usart_sync_write+0xc4>)
    1ed4:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
    1ed6:	46c0      	nop			; (mov r8, r8)
    1ed8:	693b      	ldr	r3, [r7, #16]
    1eda:	3308      	adds	r3, #8
    1edc:	0018      	movs	r0, r3
    1ede:	4b1f      	ldr	r3, [pc, #124]	; (1f5c <usart_sync_write+0xc8>)
    1ee0:	4798      	blx	r3
    1ee2:	0003      	movs	r3, r0
    1ee4:	001a      	movs	r2, r3
    1ee6:	2301      	movs	r3, #1
    1ee8:	4053      	eors	r3, r2
    1eea:	b2db      	uxtb	r3, r3
    1eec:	2b00      	cmp	r3, #0
    1eee:	d1f3      	bne.n	1ed8 <usart_sync_write+0x44>
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
    1ef0:	693b      	ldr	r3, [r7, #16]
    1ef2:	3308      	adds	r3, #8
    1ef4:	0018      	movs	r0, r3
    1ef6:	68ba      	ldr	r2, [r7, #8]
    1ef8:	697b      	ldr	r3, [r7, #20]
    1efa:	18d3      	adds	r3, r2, r3
    1efc:	781b      	ldrb	r3, [r3, #0]
    1efe:	0019      	movs	r1, r3
    1f00:	4b17      	ldr	r3, [pc, #92]	; (1f60 <usart_sync_write+0xcc>)
    1f02:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
    1f04:	46c0      	nop			; (mov r8, r8)
    1f06:	693b      	ldr	r3, [r7, #16]
    1f08:	3308      	adds	r3, #8
    1f0a:	0018      	movs	r0, r3
    1f0c:	4b13      	ldr	r3, [pc, #76]	; (1f5c <usart_sync_write+0xc8>)
    1f0e:	4798      	blx	r3
    1f10:	0003      	movs	r3, r0
    1f12:	001a      	movs	r2, r3
    1f14:	2301      	movs	r3, #1
    1f16:	4053      	eors	r3, r2
    1f18:	b2db      	uxtb	r3, r3
    1f1a:	2b00      	cmp	r3, #0
    1f1c:	d1f3      	bne.n	1f06 <usart_sync_write+0x72>
			;
	} while (++offset < length);
    1f1e:	697b      	ldr	r3, [r7, #20]
    1f20:	3301      	adds	r3, #1
    1f22:	617b      	str	r3, [r7, #20]
    1f24:	1dbb      	adds	r3, r7, #6
    1f26:	881b      	ldrh	r3, [r3, #0]
    1f28:	697a      	ldr	r2, [r7, #20]
    1f2a:	429a      	cmp	r2, r3
    1f2c:	d3e0      	bcc.n	1ef0 <usart_sync_write+0x5c>
	while (!_usart_sync_is_transmit_done(&descr->device))
    1f2e:	46c0      	nop			; (mov r8, r8)
    1f30:	693b      	ldr	r3, [r7, #16]
    1f32:	3308      	adds	r3, #8
    1f34:	0018      	movs	r0, r3
    1f36:	4b0b      	ldr	r3, [pc, #44]	; (1f64 <usart_sync_write+0xd0>)
    1f38:	4798      	blx	r3
    1f3a:	0003      	movs	r3, r0
    1f3c:	001a      	movs	r2, r3
    1f3e:	2301      	movs	r3, #1
    1f40:	4053      	eors	r3, r2
    1f42:	b2db      	uxtb	r3, r3
    1f44:	2b00      	cmp	r3, #0
    1f46:	d1f3      	bne.n	1f30 <usart_sync_write+0x9c>
		;
	return (int32_t)offset;
    1f48:	697b      	ldr	r3, [r7, #20]
}
    1f4a:	0018      	movs	r0, r3
    1f4c:	46bd      	mov	sp, r7
    1f4e:	b006      	add	sp, #24
    1f50:	bd80      	pop	{r7, pc}
    1f52:	46c0      	nop			; (mov r8, r8)
    1f54:	0001218c 	.word	0x0001218c
    1f58:	00002a9d 	.word	0x00002a9d
    1f5c:	000034e9 	.word	0x000034e9
    1f60:	00003499 	.word	0x00003499
    1f64:	00003509 	.word	0x00003509

00001f68 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    1f68:	b590      	push	{r4, r7, lr}
    1f6a:	b087      	sub	sp, #28
    1f6c:	af00      	add	r7, sp, #0
    1f6e:	60f8      	str	r0, [r7, #12]
    1f70:	60b9      	str	r1, [r7, #8]
    1f72:	1dbb      	adds	r3, r7, #6
    1f74:	801a      	strh	r2, [r3, #0]
	uint32_t                      offset = 0;
    1f76:	2300      	movs	r3, #0
    1f78:	617b      	str	r3, [r7, #20]
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);
    1f7a:	68fb      	ldr	r3, [r7, #12]
    1f7c:	613b      	str	r3, [r7, #16]

	ASSERT(io_descr && buf && length);
    1f7e:	68fb      	ldr	r3, [r7, #12]
    1f80:	2b00      	cmp	r3, #0
    1f82:	d008      	beq.n	1f96 <usart_sync_read+0x2e>
    1f84:	68bb      	ldr	r3, [r7, #8]
    1f86:	2b00      	cmp	r3, #0
    1f88:	d005      	beq.n	1f96 <usart_sync_read+0x2e>
    1f8a:	1dbb      	adds	r3, r7, #6
    1f8c:	881b      	ldrh	r3, [r3, #0]
    1f8e:	2b00      	cmp	r3, #0
    1f90:	d001      	beq.n	1f96 <usart_sync_read+0x2e>
    1f92:	2301      	movs	r3, #1
    1f94:	e000      	b.n	1f98 <usart_sync_read+0x30>
    1f96:	2300      	movs	r3, #0
    1f98:	1c1a      	adds	r2, r3, #0
    1f9a:	2301      	movs	r3, #1
    1f9c:	4013      	ands	r3, r2
    1f9e:	b2d8      	uxtb	r0, r3
    1fa0:	2386      	movs	r3, #134	; 0x86
    1fa2:	005a      	lsls	r2, r3, #1
    1fa4:	4b13      	ldr	r3, [pc, #76]	; (1ff4 <usart_sync_read+0x8c>)
    1fa6:	0019      	movs	r1, r3
    1fa8:	4b13      	ldr	r3, [pc, #76]	; (1ff8 <usart_sync_read+0x90>)
    1faa:	4798      	blx	r3
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
    1fac:	46c0      	nop			; (mov r8, r8)
    1fae:	693b      	ldr	r3, [r7, #16]
    1fb0:	3308      	adds	r3, #8
    1fb2:	0018      	movs	r0, r3
    1fb4:	4b11      	ldr	r3, [pc, #68]	; (1ffc <usart_sync_read+0x94>)
    1fb6:	4798      	blx	r3
    1fb8:	0003      	movs	r3, r0
    1fba:	001a      	movs	r2, r3
    1fbc:	2301      	movs	r3, #1
    1fbe:	4053      	eors	r3, r2
    1fc0:	b2db      	uxtb	r3, r3
    1fc2:	2b00      	cmp	r3, #0
    1fc4:	d1f3      	bne.n	1fae <usart_sync_read+0x46>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
    1fc6:	68ba      	ldr	r2, [r7, #8]
    1fc8:	697b      	ldr	r3, [r7, #20]
    1fca:	18d4      	adds	r4, r2, r3
    1fcc:	693b      	ldr	r3, [r7, #16]
    1fce:	3308      	adds	r3, #8
    1fd0:	0018      	movs	r0, r3
    1fd2:	4b0b      	ldr	r3, [pc, #44]	; (2000 <STACK_SIZE>)
    1fd4:	4798      	blx	r3
    1fd6:	0003      	movs	r3, r0
    1fd8:	7023      	strb	r3, [r4, #0]
	} while (++offset < length);
    1fda:	697b      	ldr	r3, [r7, #20]
    1fdc:	3301      	adds	r3, #1
    1fde:	617b      	str	r3, [r7, #20]
    1fe0:	1dbb      	adds	r3, r7, #6
    1fe2:	881b      	ldrh	r3, [r3, #0]
    1fe4:	697a      	ldr	r2, [r7, #20]
    1fe6:	429a      	cmp	r2, r3
    1fe8:	d3e0      	bcc.n	1fac <usart_sync_read+0x44>

	return (int32_t)offset;
    1fea:	697b      	ldr	r3, [r7, #20]
}
    1fec:	0018      	movs	r0, r3
    1fee:	46bd      	mov	sp, r7
    1ff0:	b007      	add	sp, #28
    1ff2:	bd90      	pop	{r4, r7, pc}
    1ff4:	0001218c 	.word	0x0001218c
    1ff8:	00002a9d 	.word	0x00002a9d
    1ffc:	00003529 	.word	0x00003529
    2000:	000034c5 	.word	0x000034c5

00002004 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    2004:	b580      	push	{r7, lr}
    2006:	b084      	sub	sp, #16
    2008:	af00      	add	r7, sp, #0
    200a:	0002      	movs	r2, r0
    200c:	1dfb      	adds	r3, r7, #7
    200e:	701a      	strb	r2, [r3, #0]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2010:	230f      	movs	r3, #15
    2012:	18fb      	adds	r3, r7, r3
    2014:	2200      	movs	r2, #0
    2016:	701a      	strb	r2, [r3, #0]
    2018:	e038      	b.n	208c <_usb_d_find_ep+0x88>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    201a:	230f      	movs	r3, #15
    201c:	18fb      	adds	r3, r7, r3
    201e:	781b      	ldrb	r3, [r3, #0]
    2020:	b25b      	sxtb	r3, r3
    2022:	4a20      	ldr	r2, [pc, #128]	; (20a4 <_usb_d_find_ep+0xa0>)
    2024:	015b      	lsls	r3, r3, #5
    2026:	18d3      	adds	r3, r2, r3
    2028:	3301      	adds	r3, #1
    202a:	781b      	ldrb	r3, [r3, #0]
    202c:	1dfa      	adds	r2, r7, #7
    202e:	7812      	ldrb	r2, [r2, #0]
    2030:	429a      	cmp	r2, r3
    2032:	d104      	bne.n	203e <_usb_d_find_ep+0x3a>
			return i;
    2034:	230f      	movs	r3, #15
    2036:	18fb      	adds	r3, r7, r3
    2038:	781b      	ldrb	r3, [r3, #0]
    203a:	b25b      	sxtb	r3, r3
    203c:	e02e      	b.n	209c <_usb_d_find_ep+0x98>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    203e:	230f      	movs	r3, #15
    2040:	18fb      	adds	r3, r7, r3
    2042:	2200      	movs	r2, #0
    2044:	569a      	ldrsb	r2, [r3, r2]
    2046:	4b17      	ldr	r3, [pc, #92]	; (20a4 <_usb_d_find_ep+0xa0>)
    2048:	0152      	lsls	r2, r2, #5
    204a:	5cd3      	ldrb	r3, [r2, r3]
    204c:	2b00      	cmp	r3, #0
    204e:	d113      	bne.n	2078 <_usb_d_find_ep+0x74>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    2050:	1dfb      	adds	r3, r7, #7
    2052:	781b      	ldrb	r3, [r3, #0]
    2054:	220f      	movs	r2, #15
    2056:	4013      	ands	r3, r2
    2058:	220f      	movs	r2, #15
    205a:	18ba      	adds	r2, r7, r2
    205c:	7812      	ldrb	r2, [r2, #0]
    205e:	b252      	sxtb	r2, r2
    2060:	4910      	ldr	r1, [pc, #64]	; (20a4 <_usb_d_find_ep+0xa0>)
    2062:	0152      	lsls	r2, r2, #5
    2064:	188a      	adds	r2, r1, r2
    2066:	3201      	adds	r2, #1
    2068:	7812      	ldrb	r2, [r2, #0]
    206a:	4293      	cmp	r3, r2
    206c:	d104      	bne.n	2078 <_usb_d_find_ep+0x74>
			return i;
    206e:	230f      	movs	r3, #15
    2070:	18fb      	adds	r3, r7, r3
    2072:	781b      	ldrb	r3, [r3, #0]
    2074:	b25b      	sxtb	r3, r3
    2076:	e011      	b.n	209c <_usb_d_find_ep+0x98>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2078:	230f      	movs	r3, #15
    207a:	18fb      	adds	r3, r7, r3
    207c:	781b      	ldrb	r3, [r3, #0]
    207e:	b25b      	sxtb	r3, r3
    2080:	b2db      	uxtb	r3, r3
    2082:	3301      	adds	r3, #1
    2084:	b2da      	uxtb	r2, r3
    2086:	230f      	movs	r3, #15
    2088:	18fb      	adds	r3, r7, r3
    208a:	701a      	strb	r2, [r3, #0]
    208c:	230f      	movs	r3, #15
    208e:	18fb      	adds	r3, r7, r3
    2090:	781b      	ldrb	r3, [r3, #0]
    2092:	b25b      	sxtb	r3, r3
    2094:	2b07      	cmp	r3, #7
    2096:	ddc0      	ble.n	201a <_usb_d_find_ep+0x16>
		}
	}
	return -1;
    2098:	2301      	movs	r3, #1
    209a:	425b      	negs	r3, r3
}
    209c:	0018      	movs	r0, r3
    209e:	46bd      	mov	sp, r7
    20a0:	b004      	add	sp, #16
    20a2:	bd80      	pop	{r7, pc}
    20a4:	20000bf0 	.word	0x20000bf0

000020a8 <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    20a8:	b580      	push	{r7, lr}
    20aa:	b088      	sub	sp, #32
    20ac:	af00      	add	r7, sp, #0
    20ae:	60ba      	str	r2, [r7, #8]
    20b0:	607b      	str	r3, [r7, #4]
    20b2:	230f      	movs	r3, #15
    20b4:	18fb      	adds	r3, r7, r3
    20b6:	1c02      	adds	r2, r0, #0
    20b8:	701a      	strb	r2, [r3, #0]
    20ba:	230e      	movs	r3, #14
    20bc:	18fb      	adds	r3, r7, r3
    20be:	1c0a      	adds	r2, r1, #0
    20c0:	701a      	strb	r2, [r3, #0]
	struct usb_d_transfer trans
    20c2:	2314      	movs	r3, #20
    20c4:	18fb      	adds	r3, r7, r3
    20c6:	68ba      	ldr	r2, [r7, #8]
    20c8:	601a      	str	r2, [r3, #0]
    20ca:	2314      	movs	r3, #20
    20cc:	18fb      	adds	r3, r7, r3
    20ce:	687a      	ldr	r2, [r7, #4]
    20d0:	605a      	str	r2, [r3, #4]
    20d2:	230e      	movs	r3, #14
    20d4:	18fb      	adds	r3, r7, r3
    20d6:	781b      	ldrb	r3, [r3, #0]
    20d8:	2b00      	cmp	r3, #0
    20da:	d007      	beq.n	20ec <_usb_d_trans+0x44>
    20dc:	230f      	movs	r3, #15
    20de:	18fb      	adds	r3, r7, r3
    20e0:	781b      	ldrb	r3, [r3, #0]
    20e2:	2280      	movs	r2, #128	; 0x80
    20e4:	4252      	negs	r2, r2
    20e6:	4313      	orrs	r3, r2
    20e8:	b2db      	uxtb	r3, r3
    20ea:	e005      	b.n	20f8 <_usb_d_trans+0x50>
    20ec:	230f      	movs	r3, #15
    20ee:	18fb      	adds	r3, r7, r3
    20f0:	781b      	ldrb	r3, [r3, #0]
    20f2:	220f      	movs	r2, #15
    20f4:	4013      	ands	r3, r2
    20f6:	b2db      	uxtb	r3, r3
    20f8:	2214      	movs	r2, #20
    20fa:	18ba      	adds	r2, r7, r2
    20fc:	7213      	strb	r3, [r2, #8]
    20fe:	2314      	movs	r3, #20
    2100:	18fb      	adds	r3, r7, r3
    2102:	2228      	movs	r2, #40	; 0x28
    2104:	18ba      	adds	r2, r7, r2
    2106:	7812      	ldrb	r2, [r2, #0]
    2108:	725a      	strb	r2, [r3, #9]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    210a:	2314      	movs	r3, #20
    210c:	18fb      	adds	r3, r7, r3
    210e:	0018      	movs	r0, r3
    2110:	4b03      	ldr	r3, [pc, #12]	; (2120 <_usb_d_trans+0x78>)
    2112:	4798      	blx	r3
    2114:	0003      	movs	r3, r0
}
    2116:	0018      	movs	r0, r3
    2118:	46bd      	mov	sp, r7
    211a:	b008      	add	sp, #32
    211c:	bd80      	pop	{r7, pc}
    211e:	46c0      	nop			; (mov r8, r8)
    2120:	00007011 	.word	0x00007011

00002124 <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    2124:	b580      	push	{r7, lr}
    2126:	b084      	sub	sp, #16
    2128:	af00      	add	r7, sp, #0
    212a:	60f8      	str	r0, [r7, #12]
    212c:	60b9      	str	r1, [r7, #8]
    212e:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    2130:	2300      	movs	r3, #0
}
    2132:	0018      	movs	r0, r3
    2134:	46bd      	mov	sp, r7
    2136:	b004      	add	sp, #16
    2138:	bd80      	pop	{r7, pc}
	...

0000213c <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    213c:	b590      	push	{r4, r7, lr}
    213e:	b087      	sub	sp, #28
    2140:	af00      	add	r7, sp, #0
    2142:	0002      	movs	r2, r0
    2144:	1dfb      	adds	r3, r7, #7
    2146:	701a      	strb	r2, [r3, #0]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2148:	2317      	movs	r3, #23
    214a:	18fc      	adds	r4, r7, r3
    214c:	1dfb      	adds	r3, r7, #7
    214e:	781b      	ldrb	r3, [r3, #0]
    2150:	0018      	movs	r0, r3
    2152:	4b33      	ldr	r3, [pc, #204]	; (2220 <usb_d_cb_trans_setup+0xe4>)
    2154:	4798      	blx	r3
    2156:	0003      	movs	r3, r0
    2158:	7023      	strb	r3, [r4, #0]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    215a:	2317      	movs	r3, #23
    215c:	18fb      	adds	r3, r7, r3
    215e:	781b      	ldrb	r3, [r3, #0]
    2160:	b25b      	sxtb	r3, r3
    2162:	015a      	lsls	r2, r3, #5
    2164:	4b2f      	ldr	r3, [pc, #188]	; (2224 <usb_d_cb_trans_setup+0xe8>)
    2166:	18d3      	adds	r3, r2, r3
    2168:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    216a:	693b      	ldr	r3, [r7, #16]
    216c:	330c      	adds	r3, #12
    216e:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    2170:	68fa      	ldr	r2, [r7, #12]
    2172:	1dfb      	adds	r3, r7, #7
    2174:	781b      	ldrb	r3, [r3, #0]
    2176:	0011      	movs	r1, r2
    2178:	0018      	movs	r0, r3
    217a:	4b2b      	ldr	r3, [pc, #172]	; (2228 <usb_d_cb_trans_setup+0xec>)
    217c:	4798      	blx	r3
    217e:	0002      	movs	r2, r0
    2180:	230b      	movs	r3, #11
    2182:	18fb      	adds	r3, r7, r3
    2184:	701a      	strb	r2, [r3, #0]
	if (n != 8) {
    2186:	230b      	movs	r3, #11
    2188:	18fb      	adds	r3, r7, r3
    218a:	781b      	ldrb	r3, [r3, #0]
    218c:	2b08      	cmp	r3, #8
    218e:	d010      	beq.n	21b2 <usb_d_cb_trans_setup+0x76>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2190:	1dfb      	adds	r3, r7, #7
    2192:	781b      	ldrb	r3, [r3, #0]
    2194:	2101      	movs	r1, #1
    2196:	0018      	movs	r0, r3
    2198:	4b24      	ldr	r3, [pc, #144]	; (222c <usb_d_cb_trans_setup+0xf0>)
    219a:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    219c:	1dfb      	adds	r3, r7, #7
    219e:	781b      	ldrb	r3, [r3, #0]
    21a0:	2280      	movs	r2, #128	; 0x80
    21a2:	4252      	negs	r2, r2
    21a4:	4313      	orrs	r3, r2
    21a6:	b2db      	uxtb	r3, r3
    21a8:	2101      	movs	r1, #1
    21aa:	0018      	movs	r0, r3
    21ac:	4b1f      	ldr	r3, [pc, #124]	; (222c <usb_d_cb_trans_setup+0xf0>)
    21ae:	4798      	blx	r3
		return;
    21b0:	e033      	b.n	221a <usb_d_cb_trans_setup+0xde>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    21b2:	1dfb      	adds	r3, r7, #7
    21b4:	781b      	ldrb	r3, [r3, #0]
    21b6:	2100      	movs	r1, #0
    21b8:	0018      	movs	r0, r3
    21ba:	4b1c      	ldr	r3, [pc, #112]	; (222c <usb_d_cb_trans_setup+0xf0>)
    21bc:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    21be:	1dfb      	adds	r3, r7, #7
    21c0:	781b      	ldrb	r3, [r3, #0]
    21c2:	2280      	movs	r2, #128	; 0x80
    21c4:	4252      	negs	r2, r2
    21c6:	4313      	orrs	r3, r2
    21c8:	b2db      	uxtb	r3, r3
    21ca:	2100      	movs	r1, #0
    21cc:	0018      	movs	r0, r3
    21ce:	4b17      	ldr	r3, [pc, #92]	; (222c <usb_d_cb_trans_setup+0xf0>)
    21d0:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    21d2:	693b      	ldr	r3, [r7, #16]
    21d4:	2201      	movs	r2, #1
    21d6:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    21d8:	693b      	ldr	r3, [r7, #16]
    21da:	695b      	ldr	r3, [r3, #20]
    21dc:	68f9      	ldr	r1, [r7, #12]
    21de:	1dfa      	adds	r2, r7, #7
    21e0:	7812      	ldrb	r2, [r2, #0]
    21e2:	0010      	movs	r0, r2
    21e4:	4798      	blx	r3
    21e6:	0003      	movs	r3, r0
    21e8:	001a      	movs	r2, r3
    21ea:	2301      	movs	r3, #1
    21ec:	4053      	eors	r3, r2
    21ee:	b2db      	uxtb	r3, r3
    21f0:	2b00      	cmp	r3, #0
    21f2:	d012      	beq.n	221a <usb_d_cb_trans_setup+0xde>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    21f4:	693b      	ldr	r3, [r7, #16]
    21f6:	2205      	movs	r2, #5
    21f8:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    21fa:	1dfb      	adds	r3, r7, #7
    21fc:	781b      	ldrb	r3, [r3, #0]
    21fe:	2101      	movs	r1, #1
    2200:	0018      	movs	r0, r3
    2202:	4b0a      	ldr	r3, [pc, #40]	; (222c <usb_d_cb_trans_setup+0xf0>)
    2204:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    2206:	1dfb      	adds	r3, r7, #7
    2208:	781b      	ldrb	r3, [r3, #0]
    220a:	2280      	movs	r2, #128	; 0x80
    220c:	4252      	negs	r2, r2
    220e:	4313      	orrs	r3, r2
    2210:	b2db      	uxtb	r3, r3
    2212:	2101      	movs	r1, #1
    2214:	0018      	movs	r0, r3
    2216:	4b05      	ldr	r3, [pc, #20]	; (222c <usb_d_cb_trans_setup+0xf0>)
    2218:	4798      	blx	r3
	}
}
    221a:	46bd      	mov	sp, r7
    221c:	b007      	add	sp, #28
    221e:	bd90      	pop	{r4, r7, pc}
    2220:	00002005 	.word	0x00002005
    2224:	20000bf0 	.word	0x20000bf0
    2228:	00006f41 	.word	0x00006f41
    222c:	00006d5d 	.word	0x00006d5d

00002230 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    2230:	b590      	push	{r4, r7, lr}
    2232:	b085      	sub	sp, #20
    2234:	af00      	add	r7, sp, #0
    2236:	0002      	movs	r2, r0
    2238:	6039      	str	r1, [r7, #0]
    223a:	1dfb      	adds	r3, r7, #7
    223c:	701a      	strb	r2, [r3, #0]
	int8_t           ep_index = _usb_d_find_ep(ep);
    223e:	230f      	movs	r3, #15
    2240:	18fc      	adds	r4, r7, r3
    2242:	1dfb      	adds	r3, r7, #7
    2244:	781b      	ldrb	r3, [r3, #0]
    2246:	0018      	movs	r0, r3
    2248:	4b0e      	ldr	r3, [pc, #56]	; (2284 <usb_d_cb_trans_more+0x54>)
    224a:	4798      	blx	r3
    224c:	0003      	movs	r3, r0
    224e:	7023      	strb	r3, [r4, #0]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2250:	230f      	movs	r3, #15
    2252:	18fb      	adds	r3, r7, r3
    2254:	781b      	ldrb	r3, [r3, #0]
    2256:	b25b      	sxtb	r3, r3
    2258:	015a      	lsls	r2, r3, #5
    225a:	4b0b      	ldr	r3, [pc, #44]	; (2288 <usb_d_cb_trans_more+0x58>)
    225c:	18d3      	adds	r3, r2, r3
    225e:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    2260:	68bb      	ldr	r3, [r7, #8]
    2262:	789b      	ldrb	r3, [r3, #2]
    2264:	2b03      	cmp	r3, #3
    2266:	d108      	bne.n	227a <usb_d_cb_trans_more+0x4a>
		return ept->callbacks.more(ep, transfered);
    2268:	68bb      	ldr	r3, [r7, #8]
    226a:	699b      	ldr	r3, [r3, #24]
    226c:	6839      	ldr	r1, [r7, #0]
    226e:	1dfa      	adds	r2, r7, #7
    2270:	7812      	ldrb	r2, [r2, #0]
    2272:	0010      	movs	r0, r2
    2274:	4798      	blx	r3
    2276:	0003      	movs	r3, r0
    2278:	e000      	b.n	227c <usb_d_cb_trans_more+0x4c>
	}
	return false;
    227a:	2300      	movs	r3, #0
}
    227c:	0018      	movs	r0, r3
    227e:	46bd      	mov	sp, r7
    2280:	b005      	add	sp, #20
    2282:	bd90      	pop	{r4, r7, pc}
    2284:	00002005 	.word	0x00002005
    2288:	20000bf0 	.word	0x20000bf0

0000228c <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    228c:	b590      	push	{r4, r7, lr}
    228e:	b087      	sub	sp, #28
    2290:	af02      	add	r7, sp, #8
    2292:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    2294:	230f      	movs	r3, #15
    2296:	18fb      	adds	r3, r7, r3
    2298:	687a      	ldr	r2, [r7, #4]
    229a:	7892      	ldrb	r2, [r2, #2]
    229c:	701a      	strb	r2, [r3, #0]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    229e:	687b      	ldr	r3, [r7, #4]
    22a0:	7b1b      	ldrb	r3, [r3, #12]
    22a2:	001a      	movs	r2, r3
    22a4:	2380      	movs	r3, #128	; 0x80
    22a6:	401a      	ands	r2, r3
    22a8:	230e      	movs	r3, #14
    22aa:	18fb      	adds	r3, r7, r3
    22ac:	1e51      	subs	r1, r2, #1
    22ae:	418a      	sbcs	r2, r1
    22b0:	701a      	strb	r2, [r3, #0]

	if (state == USB_EP_S_X_DATA) {
    22b2:	230f      	movs	r3, #15
    22b4:	18fb      	adds	r3, r7, r3
    22b6:	781b      	ldrb	r3, [r3, #0]
    22b8:	2b03      	cmp	r3, #3
    22ba:	d142      	bne.n	2342 <usb_d_ctrl_trans_done+0xb6>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    22bc:	687b      	ldr	r3, [r7, #4]
    22be:	69db      	ldr	r3, [r3, #28]
    22c0:	687a      	ldr	r2, [r7, #4]
    22c2:	7850      	ldrb	r0, [r2, #1]
    22c4:	687a      	ldr	r2, [r7, #4]
    22c6:	320c      	adds	r2, #12
    22c8:	210d      	movs	r1, #13
    22ca:	187c      	adds	r4, r7, r1
    22cc:	2101      	movs	r1, #1
    22ce:	4798      	blx	r3
    22d0:	0003      	movs	r3, r0
    22d2:	7023      	strb	r3, [r4, #0]
		if (err) {
    22d4:	230d      	movs	r3, #13
    22d6:	18fb      	adds	r3, r7, r3
    22d8:	781b      	ldrb	r3, [r3, #0]
    22da:	2b00      	cmp	r3, #0
    22dc:	d018      	beq.n	2310 <usb_d_ctrl_trans_done+0x84>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    22de:	687b      	ldr	r3, [r7, #4]
    22e0:	2205      	movs	r2, #5
    22e2:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    22e4:	687b      	ldr	r3, [r7, #4]
    22e6:	2202      	movs	r2, #2
    22e8:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    22ea:	230e      	movs	r3, #14
    22ec:	18fb      	adds	r3, r7, r3
    22ee:	781b      	ldrb	r3, [r3, #0]
    22f0:	2b00      	cmp	r3, #0
    22f2:	d002      	beq.n	22fa <usb_d_ctrl_trans_done+0x6e>
    22f4:	687b      	ldr	r3, [r7, #4]
    22f6:	785b      	ldrb	r3, [r3, #1]
    22f8:	e005      	b.n	2306 <usb_d_ctrl_trans_done+0x7a>
    22fa:	687b      	ldr	r3, [r7, #4]
    22fc:	785b      	ldrb	r3, [r3, #1]
    22fe:	2280      	movs	r2, #128	; 0x80
    2300:	4252      	negs	r2, r2
    2302:	4313      	orrs	r3, r2
    2304:	b2db      	uxtb	r3, r3
    2306:	2101      	movs	r1, #1
    2308:	0018      	movs	r0, r3
    230a:	4b15      	ldr	r3, [pc, #84]	; (2360 <usb_d_ctrl_trans_done+0xd4>)
    230c:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    230e:	e023      	b.n	2358 <usb_d_ctrl_trans_done+0xcc>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    2310:	687b      	ldr	r3, [r7, #4]
    2312:	2204      	movs	r2, #4
    2314:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    2316:	687b      	ldr	r3, [r7, #4]
    2318:	7858      	ldrb	r0, [r3, #1]
    231a:	230e      	movs	r3, #14
    231c:	18fb      	adds	r3, r7, r3
    231e:	781b      	ldrb	r3, [r3, #0]
    2320:	1e5a      	subs	r2, r3, #1
    2322:	4193      	sbcs	r3, r2
    2324:	b2db      	uxtb	r3, r3
    2326:	2201      	movs	r2, #1
    2328:	4053      	eors	r3, r2
    232a:	b2db      	uxtb	r3, r3
    232c:	1c1a      	adds	r2, r3, #0
    232e:	2301      	movs	r3, #1
    2330:	4013      	ands	r3, r2
    2332:	b2d9      	uxtb	r1, r3
    2334:	2301      	movs	r3, #1
    2336:	9300      	str	r3, [sp, #0]
    2338:	2300      	movs	r3, #0
    233a:	2200      	movs	r2, #0
    233c:	4c09      	ldr	r4, [pc, #36]	; (2364 <usb_d_ctrl_trans_done+0xd8>)
    233e:	47a0      	blx	r4
}
    2340:	e00a      	b.n	2358 <usb_d_ctrl_trans_done+0xcc>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    2342:	687b      	ldr	r3, [r7, #4]
    2344:	69db      	ldr	r3, [r3, #28]
    2346:	687a      	ldr	r2, [r7, #4]
    2348:	7850      	ldrb	r0, [r2, #1]
    234a:	687a      	ldr	r2, [r7, #4]
    234c:	320c      	adds	r2, #12
    234e:	2100      	movs	r1, #0
    2350:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2352:	687b      	ldr	r3, [r7, #4]
    2354:	2202      	movs	r2, #2
    2356:	709a      	strb	r2, [r3, #2]
}
    2358:	46c0      	nop			; (mov r8, r8)
    235a:	46bd      	mov	sp, r7
    235c:	b005      	add	sp, #20
    235e:	bd90      	pop	{r4, r7, pc}
    2360:	00006d5d 	.word	0x00006d5d
    2364:	000020a9 	.word	0x000020a9

00002368 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    2368:	b590      	push	{r4, r7, lr}
    236a:	b087      	sub	sp, #28
    236c:	af00      	add	r7, sp, #0
    236e:	60b9      	str	r1, [r7, #8]
    2370:	607a      	str	r2, [r7, #4]
    2372:	230f      	movs	r3, #15
    2374:	18fb      	adds	r3, r7, r3
    2376:	1c02      	adds	r2, r0, #0
    2378:	701a      	strb	r2, [r3, #0]
	int8_t           ep_index = _usb_d_find_ep(ep);
    237a:	2317      	movs	r3, #23
    237c:	18fc      	adds	r4, r7, r3
    237e:	230f      	movs	r3, #15
    2380:	18fb      	adds	r3, r7, r3
    2382:	781b      	ldrb	r3, [r3, #0]
    2384:	0018      	movs	r0, r3
    2386:	4b33      	ldr	r3, [pc, #204]	; (2454 <_usb_d_cb_trans_done+0xec>)
    2388:	4798      	blx	r3
    238a:	0003      	movs	r3, r0
    238c:	7023      	strb	r3, [r4, #0]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    238e:	2317      	movs	r3, #23
    2390:	18fb      	adds	r3, r7, r3
    2392:	781b      	ldrb	r3, [r3, #0]
    2394:	b25b      	sxtb	r3, r3
    2396:	015a      	lsls	r2, r3, #5
    2398:	4b2f      	ldr	r3, [pc, #188]	; (2458 <_usb_d_cb_trans_done+0xf0>)
    239a:	18d3      	adds	r3, r2, r3
    239c:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    239e:	68bb      	ldr	r3, [r7, #8]
    23a0:	2b00      	cmp	r3, #0
    23a2:	d10f      	bne.n	23c4 <_usb_d_cb_trans_done+0x5c>
		ept->xfer.hdr.status = USB_XFER_DONE;
    23a4:	693b      	ldr	r3, [r7, #16]
    23a6:	2200      	movs	r2, #0
    23a8:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    23aa:	693b      	ldr	r3, [r7, #16]
    23ac:	781b      	ldrb	r3, [r3, #0]
    23ae:	2b00      	cmp	r3, #0
    23b0:	d104      	bne.n	23bc <_usb_d_cb_trans_done+0x54>
			usb_d_ctrl_trans_done(ept);
    23b2:	693b      	ldr	r3, [r7, #16]
    23b4:	0018      	movs	r0, r3
    23b6:	4b29      	ldr	r3, [pc, #164]	; (245c <_usb_d_cb_trans_done+0xf4>)
    23b8:	4798      	blx	r3
			return;
    23ba:	e048      	b.n	244e <_usb_d_cb_trans_done+0xe6>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    23bc:	693b      	ldr	r3, [r7, #16]
    23be:	2201      	movs	r2, #1
    23c0:	709a      	strb	r2, [r3, #2]
    23c2:	e03a      	b.n	243a <_usb_d_cb_trans_done+0xd2>
	} else if (code == USB_TRANS_STALL) {
    23c4:	68bb      	ldr	r3, [r7, #8]
    23c6:	2b01      	cmp	r3, #1
    23c8:	d115      	bne.n	23f6 <_usb_d_cb_trans_done+0x8e>
		ept->xfer.hdr.status = USB_XFER_HALT;
    23ca:	693b      	ldr	r3, [r7, #16]
    23cc:	2202      	movs	r2, #2
    23ce:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    23d0:	693b      	ldr	r3, [r7, #16]
    23d2:	781b      	ldrb	r3, [r3, #0]
    23d4:	2b00      	cmp	r3, #0
    23d6:	d10a      	bne.n	23ee <_usb_d_cb_trans_done+0x86>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    23d8:	693b      	ldr	r3, [r7, #16]
    23da:	2202      	movs	r2, #2
    23dc:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    23de:	230f      	movs	r3, #15
    23e0:	18fb      	adds	r3, r7, r3
    23e2:	781b      	ldrb	r3, [r3, #0]
    23e4:	2100      	movs	r1, #0
    23e6:	0018      	movs	r0, r3
    23e8:	4b1d      	ldr	r3, [pc, #116]	; (2460 <_usb_d_cb_trans_done+0xf8>)
    23ea:	4798      	blx	r3
    23ec:	e025      	b.n	243a <_usb_d_cb_trans_done+0xd2>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    23ee:	693b      	ldr	r3, [r7, #16]
    23f0:	2205      	movs	r2, #5
    23f2:	709a      	strb	r2, [r3, #2]
    23f4:	e021      	b.n	243a <_usb_d_cb_trans_done+0xd2>
		}
	} else if (code == USB_TRANS_ABORT) {
    23f6:	68bb      	ldr	r3, [r7, #8]
    23f8:	2b02      	cmp	r3, #2
    23fa:	d10e      	bne.n	241a <_usb_d_cb_trans_done+0xb2>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    23fc:	693b      	ldr	r3, [r7, #16]
    23fe:	2204      	movs	r2, #4
    2400:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2402:	693b      	ldr	r3, [r7, #16]
    2404:	781b      	ldrb	r3, [r3, #0]
    2406:	2b00      	cmp	r3, #0
    2408:	d103      	bne.n	2412 <_usb_d_cb_trans_done+0xaa>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    240a:	693b      	ldr	r3, [r7, #16]
    240c:	2202      	movs	r2, #2
    240e:	709a      	strb	r2, [r3, #2]
			return;
    2410:	e01d      	b.n	244e <_usb_d_cb_trans_done+0xe6>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    2412:	693b      	ldr	r3, [r7, #16]
    2414:	2201      	movs	r2, #1
    2416:	709a      	strb	r2, [r3, #2]
    2418:	e00f      	b.n	243a <_usb_d_cb_trans_done+0xd2>
	} else if (code == USB_TRANS_RESET) {
    241a:	68bb      	ldr	r3, [r7, #8]
    241c:	2b03      	cmp	r3, #3
    241e:	d106      	bne.n	242e <_usb_d_cb_trans_done+0xc6>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    2420:	693b      	ldr	r3, [r7, #16]
    2422:	2200      	movs	r2, #0
    2424:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    2426:	693b      	ldr	r3, [r7, #16]
    2428:	2205      	movs	r2, #5
    242a:	70da      	strb	r2, [r3, #3]
    242c:	e005      	b.n	243a <_usb_d_cb_trans_done+0xd2>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    242e:	693b      	ldr	r3, [r7, #16]
    2430:	2206      	movs	r2, #6
    2432:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    2434:	693b      	ldr	r3, [r7, #16]
    2436:	2206      	movs	r2, #6
    2438:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    243a:	693b      	ldr	r3, [r7, #16]
    243c:	69db      	ldr	r3, [r3, #28]
    243e:	693a      	ldr	r2, [r7, #16]
    2440:	78d1      	ldrb	r1, [r2, #3]
    2442:	687c      	ldr	r4, [r7, #4]
    2444:	220f      	movs	r2, #15
    2446:	18ba      	adds	r2, r7, r2
    2448:	7810      	ldrb	r0, [r2, #0]
    244a:	0022      	movs	r2, r4
    244c:	4798      	blx	r3
}
    244e:	46bd      	mov	sp, r7
    2450:	b007      	add	sp, #28
    2452:	bd90      	pop	{r4, r7, pc}
    2454:	00002005 	.word	0x00002005
    2458:	20000bf0 	.word	0x20000bf0
    245c:	0000228d 	.word	0x0000228d
    2460:	00006d5d 	.word	0x00006d5d

00002464 <usb_d_init>:

int32_t usb_d_init(void)
{
    2464:	b580      	push	{r7, lr}
    2466:	b082      	sub	sp, #8
    2468:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    246a:	4b28      	ldr	r3, [pc, #160]	; (250c <usb_d_init+0xa8>)
    246c:	4798      	blx	r3
    246e:	0003      	movs	r3, r0
    2470:	603b      	str	r3, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    2472:	683b      	ldr	r3, [r7, #0]
    2474:	2b00      	cmp	r3, #0
    2476:	da01      	bge.n	247c <usb_d_init+0x18>
		return rc;
    2478:	683b      	ldr	r3, [r7, #0]
    247a:	e043      	b.n	2504 <usb_d_init+0xa0>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    247c:	2380      	movs	r3, #128	; 0x80
    247e:	005a      	lsls	r2, r3, #1
    2480:	4b23      	ldr	r3, [pc, #140]	; (2510 <usb_d_init+0xac>)
    2482:	2100      	movs	r1, #0
    2484:	0018      	movs	r0, r3
    2486:	4b23      	ldr	r3, [pc, #140]	; (2514 <usb_d_init+0xb0>)
    2488:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    248a:	1dfb      	adds	r3, r7, #7
    248c:	2200      	movs	r2, #0
    248e:	701a      	strb	r2, [r3, #0]
    2490:	e024      	b.n	24dc <usb_d_init+0x78>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    2492:	1dfb      	adds	r3, r7, #7
    2494:	781b      	ldrb	r3, [r3, #0]
    2496:	4a1e      	ldr	r2, [pc, #120]	; (2510 <usb_d_init+0xac>)
    2498:	015b      	lsls	r3, r3, #5
    249a:	18d3      	adds	r3, r2, r3
    249c:	3301      	adds	r3, #1
    249e:	22ff      	movs	r2, #255	; 0xff
    24a0:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    24a2:	1dfb      	adds	r3, r7, #7
    24a4:	781b      	ldrb	r3, [r3, #0]
    24a6:	4a1a      	ldr	r2, [pc, #104]	; (2510 <usb_d_init+0xac>)
    24a8:	015b      	lsls	r3, r3, #5
    24aa:	18d3      	adds	r3, r2, r3
    24ac:	3314      	adds	r3, #20
    24ae:	4a1a      	ldr	r2, [pc, #104]	; (2518 <usb_d_init+0xb4>)
    24b0:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    24b2:	1dfb      	adds	r3, r7, #7
    24b4:	781b      	ldrb	r3, [r3, #0]
    24b6:	4a16      	ldr	r2, [pc, #88]	; (2510 <usb_d_init+0xac>)
    24b8:	015b      	lsls	r3, r3, #5
    24ba:	18d3      	adds	r3, r2, r3
    24bc:	3318      	adds	r3, #24
    24be:	4a16      	ldr	r2, [pc, #88]	; (2518 <usb_d_init+0xb4>)
    24c0:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    24c2:	1dfb      	adds	r3, r7, #7
    24c4:	781b      	ldrb	r3, [r3, #0]
    24c6:	4a12      	ldr	r2, [pc, #72]	; (2510 <usb_d_init+0xac>)
    24c8:	015b      	lsls	r3, r3, #5
    24ca:	18d3      	adds	r3, r2, r3
    24cc:	331c      	adds	r3, #28
    24ce:	4a12      	ldr	r2, [pc, #72]	; (2518 <usb_d_init+0xb4>)
    24d0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    24d2:	1dfb      	adds	r3, r7, #7
    24d4:	781a      	ldrb	r2, [r3, #0]
    24d6:	1dfb      	adds	r3, r7, #7
    24d8:	3201      	adds	r2, #1
    24da:	701a      	strb	r2, [r3, #0]
    24dc:	1dfb      	adds	r3, r7, #7
    24de:	781b      	ldrb	r3, [r3, #0]
    24e0:	2b07      	cmp	r3, #7
    24e2:	d9d6      	bls.n	2492 <usb_d_init+0x2e>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    24e4:	4b0d      	ldr	r3, [pc, #52]	; (251c <usb_d_init+0xb8>)
    24e6:	0019      	movs	r1, r3
    24e8:	2000      	movs	r0, #0
    24ea:	4b0d      	ldr	r3, [pc, #52]	; (2520 <usb_d_init+0xbc>)
    24ec:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    24ee:	4b0d      	ldr	r3, [pc, #52]	; (2524 <usb_d_init+0xc0>)
    24f0:	0019      	movs	r1, r3
    24f2:	2001      	movs	r0, #1
    24f4:	4b0a      	ldr	r3, [pc, #40]	; (2520 <usb_d_init+0xbc>)
    24f6:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    24f8:	4b0b      	ldr	r3, [pc, #44]	; (2528 <usb_d_init+0xc4>)
    24fa:	0019      	movs	r1, r3
    24fc:	2002      	movs	r0, #2
    24fe:	4b08      	ldr	r3, [pc, #32]	; (2520 <usb_d_init+0xbc>)
    2500:	4798      	blx	r3
	return ERR_NONE;
    2502:	2300      	movs	r3, #0
}
    2504:	0018      	movs	r0, r3
    2506:	46bd      	mov	sp, r7
    2508:	b002      	add	sp, #8
    250a:	bd80      	pop	{r7, pc}
    250c:	00006411 	.word	0x00006411
    2510:	20000bf0 	.word	0x20000bf0
    2514:	0000d191 	.word	0x0000d191
    2518:	00002125 	.word	0x00002125
    251c:	0000213d 	.word	0x0000213d
    2520:	0000728d 	.word	0x0000728d
    2524:	00002231 	.word	0x00002231
    2528:	00002369 	.word	0x00002369

0000252c <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    252c:	b580      	push	{r7, lr}
    252e:	b082      	sub	sp, #8
    2530:	af00      	add	r7, sp, #0
    2532:	0002      	movs	r2, r0
    2534:	6039      	str	r1, [r7, #0]
    2536:	1dfb      	adds	r3, r7, #7
    2538:	701a      	strb	r2, [r3, #0]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    253a:	683a      	ldr	r2, [r7, #0]
    253c:	1dfb      	adds	r3, r7, #7
    253e:	781b      	ldrb	r3, [r3, #0]
    2540:	0011      	movs	r1, r2
    2542:	0018      	movs	r0, r3
    2544:	4b02      	ldr	r3, [pc, #8]	; (2550 <usb_d_register_callback+0x24>)
    2546:	4798      	blx	r3
}
    2548:	46c0      	nop			; (mov r8, r8)
    254a:	46bd      	mov	sp, r7
    254c:	b002      	add	sp, #8
    254e:	bd80      	pop	{r7, pc}
    2550:	00007241 	.word	0x00007241

00002554 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    2554:	b580      	push	{r7, lr}
    2556:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    2558:	4b02      	ldr	r3, [pc, #8]	; (2564 <usb_d_enable+0x10>)
    255a:	4798      	blx	r3
    255c:	0003      	movs	r3, r0
}
    255e:	0018      	movs	r0, r3
    2560:	46bd      	mov	sp, r7
    2562:	bd80      	pop	{r7, pc}
    2564:	0000651d 	.word	0x0000651d

00002568 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    2568:	b580      	push	{r7, lr}
    256a:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    256c:	4b02      	ldr	r3, [pc, #8]	; (2578 <usb_d_attach+0x10>)
    256e:	4798      	blx	r3
}
    2570:	46c0      	nop			; (mov r8, r8)
    2572:	46bd      	mov	sp, r7
    2574:	bd80      	pop	{r7, pc}
    2576:	46c0      	nop			; (mov r8, r8)
    2578:	000065a1 	.word	0x000065a1

0000257c <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    257c:	b580      	push	{r7, lr}
    257e:	b082      	sub	sp, #8
    2580:	af00      	add	r7, sp, #0
    2582:	0002      	movs	r2, r0
    2584:	1dfb      	adds	r3, r7, #7
    2586:	701a      	strb	r2, [r3, #0]
	_usb_d_dev_set_address(addr);
    2588:	1dfb      	adds	r3, r7, #7
    258a:	781b      	ldrb	r3, [r3, #0]
    258c:	0018      	movs	r0, r3
    258e:	4b03      	ldr	r3, [pc, #12]	; (259c <usb_d_set_address+0x20>)
    2590:	4798      	blx	r3
}
    2592:	46c0      	nop			; (mov r8, r8)
    2594:	46bd      	mov	sp, r7
    2596:	b002      	add	sp, #8
    2598:	bd80      	pop	{r7, pc}
    259a:	46c0      	nop			; (mov r8, r8)
    259c:	000065bd 	.word	0x000065bd

000025a0 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    25a0:	b580      	push	{r7, lr}
    25a2:	b082      	sub	sp, #8
    25a4:	af00      	add	r7, sp, #0
    25a6:	0002      	movs	r2, r0
    25a8:	1dfb      	adds	r3, r7, #7
    25aa:	701a      	strb	r2, [r3, #0]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    25ac:	1dfb      	adds	r3, r7, #7
    25ae:	781b      	ldrb	r3, [r3, #0]
    25b0:	b29b      	uxth	r3, r3
    25b2:	001a      	movs	r2, r3
    25b4:	2100      	movs	r1, #0
    25b6:	2000      	movs	r0, #0
    25b8:	4b03      	ldr	r3, [pc, #12]	; (25c8 <usb_d_ep0_init+0x28>)
    25ba:	4798      	blx	r3
    25bc:	0003      	movs	r3, r0
}
    25be:	0018      	movs	r0, r3
    25c0:	46bd      	mov	sp, r7
    25c2:	b002      	add	sp, #8
    25c4:	bd80      	pop	{r7, pc}
    25c6:	46c0      	nop			; (mov r8, r8)
    25c8:	000025cd 	.word	0x000025cd

000025cc <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    25cc:	b590      	push	{r4, r7, lr}
    25ce:	b087      	sub	sp, #28
    25d0:	af00      	add	r7, sp, #0
    25d2:	0004      	movs	r4, r0
    25d4:	0008      	movs	r0, r1
    25d6:	0011      	movs	r1, r2
    25d8:	1dfb      	adds	r3, r7, #7
    25da:	1c22      	adds	r2, r4, #0
    25dc:	701a      	strb	r2, [r3, #0]
    25de:	1dbb      	adds	r3, r7, #6
    25e0:	1c02      	adds	r2, r0, #0
    25e2:	701a      	strb	r2, [r3, #0]
    25e4:	1d3b      	adds	r3, r7, #4
    25e6:	1c0a      	adds	r2, r1, #0
    25e8:	801a      	strh	r2, [r3, #0]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    25ea:	2317      	movs	r3, #23
    25ec:	18fc      	adds	r4, r7, r3
    25ee:	1dfb      	adds	r3, r7, #7
    25f0:	781b      	ldrb	r3, [r3, #0]
    25f2:	0018      	movs	r0, r3
    25f4:	4b25      	ldr	r3, [pc, #148]	; (268c <usb_d_ep_init+0xc0>)
    25f6:	4798      	blx	r3
    25f8:	0003      	movs	r3, r0
    25fa:	7023      	strb	r3, [r4, #0]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    25fc:	2317      	movs	r3, #23
    25fe:	18fb      	adds	r3, r7, r3
    2600:	781b      	ldrb	r3, [r3, #0]
    2602:	b25b      	sxtb	r3, r3
    2604:	015a      	lsls	r2, r3, #5
    2606:	4b22      	ldr	r3, [pc, #136]	; (2690 <usb_d_ep_init+0xc4>)
    2608:	18d3      	adds	r3, r2, r3
    260a:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    260c:	2317      	movs	r3, #23
    260e:	18fb      	adds	r3, r7, r3
    2610:	781b      	ldrb	r3, [r3, #0]
    2612:	2b7f      	cmp	r3, #127	; 0x7f
    2614:	d802      	bhi.n	261c <usb_d_ep_init+0x50>
		return -USB_ERR_REDO;
    2616:	2314      	movs	r3, #20
    2618:	425b      	negs	r3, r3
    261a:	e032      	b.n	2682 <usb_d_ep_init+0xb6>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    261c:	2317      	movs	r3, #23
    261e:	18fc      	adds	r4, r7, r3
    2620:	20ff      	movs	r0, #255	; 0xff
    2622:	4b1a      	ldr	r3, [pc, #104]	; (268c <usb_d_ep_init+0xc0>)
    2624:	4798      	blx	r3
    2626:	0003      	movs	r3, r0
    2628:	7023      	strb	r3, [r4, #0]
		if (ep_index < 0) {
    262a:	2317      	movs	r3, #23
    262c:	18fb      	adds	r3, r7, r3
    262e:	781b      	ldrb	r3, [r3, #0]
    2630:	2b7f      	cmp	r3, #127	; 0x7f
    2632:	d902      	bls.n	263a <usb_d_ep_init+0x6e>
			return -USB_ERR_ALLOC_FAIL;
    2634:	2315      	movs	r3, #21
    2636:	425b      	negs	r3, r3
    2638:	e023      	b.n	2682 <usb_d_ep_init+0xb6>
		}
		ept = &usb_d_inst.ep[ep_index];
    263a:	2317      	movs	r3, #23
    263c:	18fb      	adds	r3, r7, r3
    263e:	781b      	ldrb	r3, [r3, #0]
    2640:	b25b      	sxtb	r3, r3
    2642:	015a      	lsls	r2, r3, #5
    2644:	4b12      	ldr	r3, [pc, #72]	; (2690 <usb_d_ep_init+0xc4>)
    2646:	18d3      	adds	r3, r2, r3
    2648:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    264a:	1d3b      	adds	r3, r7, #4
    264c:	881a      	ldrh	r2, [r3, #0]
    264e:	1dbb      	adds	r3, r7, #6
    2650:	7819      	ldrb	r1, [r3, #0]
    2652:	1dfb      	adds	r3, r7, #7
    2654:	781b      	ldrb	r3, [r3, #0]
    2656:	0018      	movs	r0, r3
    2658:	4b0e      	ldr	r3, [pc, #56]	; (2694 <usb_d_ep_init+0xc8>)
    265a:	4798      	blx	r3
    265c:	0003      	movs	r3, r0
    265e:	60fb      	str	r3, [r7, #12]
	if (rc < 0) {
    2660:	68fb      	ldr	r3, [r7, #12]
    2662:	2b00      	cmp	r3, #0
    2664:	da01      	bge.n	266a <usb_d_ep_init+0x9e>
		return rc;
    2666:	68fb      	ldr	r3, [r7, #12]
    2668:	e00b      	b.n	2682 <usb_d_ep_init+0xb6>
	}
	ept->xfer.hdr.ep   = ep;
    266a:	693b      	ldr	r3, [r7, #16]
    266c:	1dfa      	adds	r2, r7, #7
    266e:	7812      	ldrb	r2, [r2, #0]
    2670:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    2672:	1dbb      	adds	r3, r7, #6
    2674:	781b      	ldrb	r3, [r3, #0]
    2676:	2203      	movs	r2, #3
    2678:	4013      	ands	r3, r2
    267a:	b2da      	uxtb	r2, r3
    267c:	693b      	ldr	r3, [r7, #16]
    267e:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    2680:	2300      	movs	r3, #0
}
    2682:	0018      	movs	r0, r3
    2684:	46bd      	mov	sp, r7
    2686:	b007      	add	sp, #28
    2688:	bd90      	pop	{r4, r7, pc}
    268a:	46c0      	nop			; (mov r8, r8)
    268c:	00002005 	.word	0x00002005
    2690:	20000bf0 	.word	0x20000bf0
    2694:	00006685 	.word	0x00006685

00002698 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    2698:	b590      	push	{r4, r7, lr}
    269a:	b085      	sub	sp, #20
    269c:	af00      	add	r7, sp, #0
    269e:	0002      	movs	r2, r0
    26a0:	1dfb      	adds	r3, r7, #7
    26a2:	701a      	strb	r2, [r3, #0]
	int8_t           ep_index = _usb_d_find_ep(ep);
    26a4:	230f      	movs	r3, #15
    26a6:	18fc      	adds	r4, r7, r3
    26a8:	1dfb      	adds	r3, r7, #7
    26aa:	781b      	ldrb	r3, [r3, #0]
    26ac:	0018      	movs	r0, r3
    26ae:	4b0f      	ldr	r3, [pc, #60]	; (26ec <usb_d_ep_deinit+0x54>)
    26b0:	4798      	blx	r3
    26b2:	0003      	movs	r3, r0
    26b4:	7023      	strb	r3, [r4, #0]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    26b6:	230f      	movs	r3, #15
    26b8:	18fb      	adds	r3, r7, r3
    26ba:	781b      	ldrb	r3, [r3, #0]
    26bc:	b25b      	sxtb	r3, r3
    26be:	015a      	lsls	r2, r3, #5
    26c0:	4b0b      	ldr	r3, [pc, #44]	; (26f0 <usb_d_ep_deinit+0x58>)
    26c2:	18d3      	adds	r3, r2, r3
    26c4:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    26c6:	230f      	movs	r3, #15
    26c8:	18fb      	adds	r3, r7, r3
    26ca:	781b      	ldrb	r3, [r3, #0]
    26cc:	2b7f      	cmp	r3, #127	; 0x7f
    26ce:	d808      	bhi.n	26e2 <usb_d_ep_deinit+0x4a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    26d0:	1dfb      	adds	r3, r7, #7
    26d2:	781b      	ldrb	r3, [r3, #0]
    26d4:	0018      	movs	r0, r3
    26d6:	4b07      	ldr	r3, [pc, #28]	; (26f4 <usb_d_ep_deinit+0x5c>)
    26d8:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    26da:	68bb      	ldr	r3, [r7, #8]
    26dc:	22ff      	movs	r2, #255	; 0xff
    26de:	705a      	strb	r2, [r3, #1]
    26e0:	e000      	b.n	26e4 <usb_d_ep_deinit+0x4c>
		return;
    26e2:	46c0      	nop			; (mov r8, r8)
}
    26e4:	46bd      	mov	sp, r7
    26e6:	b005      	add	sp, #20
    26e8:	bd90      	pop	{r4, r7, pc}
    26ea:	46c0      	nop			; (mov r8, r8)
    26ec:	00002005 	.word	0x00002005
    26f0:	20000bf0 	.word	0x20000bf0
    26f4:	00006801 	.word	0x00006801

000026f8 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    26f8:	b590      	push	{r4, r7, lr}
    26fa:	b087      	sub	sp, #28
    26fc:	af00      	add	r7, sp, #0
    26fe:	0002      	movs	r2, r0
    2700:	1dfb      	adds	r3, r7, #7
    2702:	701a      	strb	r2, [r3, #0]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2704:	2317      	movs	r3, #23
    2706:	18fc      	adds	r4, r7, r3
    2708:	1dfb      	adds	r3, r7, #7
    270a:	781b      	ldrb	r3, [r3, #0]
    270c:	0018      	movs	r0, r3
    270e:	4b17      	ldr	r3, [pc, #92]	; (276c <usb_d_ep_enable+0x74>)
    2710:	4798      	blx	r3
    2712:	0003      	movs	r3, r0
    2714:	7023      	strb	r3, [r4, #0]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2716:	2317      	movs	r3, #23
    2718:	18fb      	adds	r3, r7, r3
    271a:	781b      	ldrb	r3, [r3, #0]
    271c:	b25b      	sxtb	r3, r3
    271e:	015a      	lsls	r2, r3, #5
    2720:	4b13      	ldr	r3, [pc, #76]	; (2770 <usb_d_ep_enable+0x78>)
    2722:	18d3      	adds	r3, r2, r3
    2724:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    2726:	2317      	movs	r3, #23
    2728:	18fb      	adds	r3, r7, r3
    272a:	781b      	ldrb	r3, [r3, #0]
    272c:	2b7f      	cmp	r3, #127	; 0x7f
    272e:	d902      	bls.n	2736 <usb_d_ep_enable+0x3e>
		return -USB_ERR_PARAM;
    2730:	2312      	movs	r3, #18
    2732:	425b      	negs	r3, r3
    2734:	e016      	b.n	2764 <usb_d_ep_enable+0x6c>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    2736:	693b      	ldr	r3, [r7, #16]
    2738:	781b      	ldrb	r3, [r3, #0]
    273a:	2b00      	cmp	r3, #0
    273c:	d101      	bne.n	2742 <usb_d_ep_enable+0x4a>
    273e:	2202      	movs	r2, #2
    2740:	e000      	b.n	2744 <usb_d_ep_enable+0x4c>
    2742:	2201      	movs	r2, #1
    2744:	693b      	ldr	r3, [r7, #16]
    2746:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    2748:	1dfb      	adds	r3, r7, #7
    274a:	781b      	ldrb	r3, [r3, #0]
    274c:	0018      	movs	r0, r3
    274e:	4b09      	ldr	r3, [pc, #36]	; (2774 <usb_d_ep_enable+0x7c>)
    2750:	4798      	blx	r3
    2752:	0003      	movs	r3, r0
    2754:	60fb      	str	r3, [r7, #12]
	if (rc < 0) {
    2756:	68fb      	ldr	r3, [r7, #12]
    2758:	2b00      	cmp	r3, #0
    275a:	da02      	bge.n	2762 <usb_d_ep_enable+0x6a>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    275c:	693b      	ldr	r3, [r7, #16]
    275e:	2200      	movs	r2, #0
    2760:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    2762:	68fb      	ldr	r3, [r7, #12]
}
    2764:	0018      	movs	r0, r3
    2766:	46bd      	mov	sp, r7
    2768:	b007      	add	sp, #28
    276a:	bd90      	pop	{r4, r7, pc}
    276c:	00002005 	.word	0x00002005
    2770:	20000bf0 	.word	0x20000bf0
    2774:	00006901 	.word	0x00006901

00002778 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    2778:	b5b0      	push	{r4, r5, r7, lr}
    277a:	b08c      	sub	sp, #48	; 0x30
    277c:	af02      	add	r7, sp, #8
    277e:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    2780:	687b      	ldr	r3, [r7, #4]
    2782:	7a1b      	ldrb	r3, [r3, #8]
    2784:	221f      	movs	r2, #31
    2786:	18bc      	adds	r4, r7, r2
    2788:	0018      	movs	r0, r3
    278a:	4b5e      	ldr	r3, [pc, #376]	; (2904 <usb_d_ep_transfer+0x18c>)
    278c:	4798      	blx	r3
    278e:	0003      	movs	r3, r0
    2790:	7023      	strb	r3, [r4, #0]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    2792:	231f      	movs	r3, #31
    2794:	18fb      	adds	r3, r7, r3
    2796:	781b      	ldrb	r3, [r3, #0]
    2798:	b25b      	sxtb	r3, r3
    279a:	015a      	lsls	r2, r3, #5
    279c:	4b5a      	ldr	r3, [pc, #360]	; (2908 <usb_d_ep_transfer+0x190>)
    279e:	18d3      	adds	r3, r2, r3
    27a0:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    27a2:	687b      	ldr	r3, [r7, #4]
    27a4:	7a1b      	ldrb	r3, [r3, #8]
    27a6:	001a      	movs	r2, r3
    27a8:	2380      	movs	r3, #128	; 0x80
    27aa:	401a      	ands	r2, r3
    27ac:	2327      	movs	r3, #39	; 0x27
    27ae:	18fb      	adds	r3, r7, r3
    27b0:	1e51      	subs	r1, r2, #1
    27b2:	418a      	sbcs	r2, r1
    27b4:	701a      	strb	r2, [r3, #0]
    27b6:	687b      	ldr	r3, [r7, #4]
    27b8:	7a5a      	ldrb	r2, [r3, #9]
    27ba:	2326      	movs	r3, #38	; 0x26
    27bc:	18fb      	adds	r3, r7, r3
    27be:	1e51      	subs	r1, r2, #1
    27c0:	418a      	sbcs	r2, r1
    27c2:	701a      	strb	r2, [r3, #0]
	uint32_t              len = xfer->size;
    27c4:	687b      	ldr	r3, [r7, #4]
    27c6:	685b      	ldr	r3, [r3, #4]
    27c8:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    27ca:	231f      	movs	r3, #31
    27cc:	18fb      	adds	r3, r7, r3
    27ce:	781b      	ldrb	r3, [r3, #0]
    27d0:	2b7f      	cmp	r3, #127	; 0x7f
    27d2:	d902      	bls.n	27da <usb_d_ep_transfer+0x62>
		return -USB_ERR_PARAM;
    27d4:	2312      	movs	r3, #18
    27d6:	425b      	negs	r3, r3
    27d8:	e090      	b.n	28fc <usb_d_ep_transfer+0x184>
	}

	atomic_enter_critical(&flags);
    27da:	2308      	movs	r3, #8
    27dc:	18fb      	adds	r3, r7, r3
    27de:	0018      	movs	r0, r3
    27e0:	4b4a      	ldr	r3, [pc, #296]	; (290c <usb_d_ep_transfer+0x194>)
    27e2:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    27e4:	69bb      	ldr	r3, [r7, #24]
    27e6:	789a      	ldrb	r2, [r3, #2]
    27e8:	230f      	movs	r3, #15
    27ea:	18fb      	adds	r3, r7, r3
    27ec:	701a      	strb	r2, [r3, #0]
	if (state == USB_EP_S_IDLE) {
    27ee:	230f      	movs	r3, #15
    27f0:	18fb      	adds	r3, r7, r3
    27f2:	781b      	ldrb	r3, [r3, #0]
    27f4:	b2db      	uxtb	r3, r3
    27f6:	2b01      	cmp	r3, #1
    27f8:	d10c      	bne.n	2814 <usb_d_ep_transfer+0x9c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    27fa:	69bb      	ldr	r3, [r7, #24]
    27fc:	2203      	movs	r2, #3
    27fe:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    2800:	2308      	movs	r3, #8
    2802:	18fb      	adds	r3, r7, r3
    2804:	0018      	movs	r0, r3
    2806:	4b42      	ldr	r3, [pc, #264]	; (2910 <usb_d_ep_transfer+0x198>)
    2808:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    280a:	69bb      	ldr	r3, [r7, #24]
    280c:	781b      	ldrb	r3, [r3, #0]
    280e:	2b00      	cmp	r3, #0
    2810:	d161      	bne.n	28d6 <usb_d_ep_transfer+0x15e>
    2812:	e019      	b.n	2848 <usb_d_ep_transfer+0xd0>
		atomic_leave_critical(&flags);
    2814:	2308      	movs	r3, #8
    2816:	18fb      	adds	r3, r7, r3
    2818:	0018      	movs	r0, r3
    281a:	4b3d      	ldr	r3, [pc, #244]	; (2910 <usb_d_ep_transfer+0x198>)
    281c:	4798      	blx	r3
		switch (state) {
    281e:	230f      	movs	r3, #15
    2820:	18fb      	adds	r3, r7, r3
    2822:	781b      	ldrb	r3, [r3, #0]
    2824:	b2db      	uxtb	r3, r3
    2826:	2b05      	cmp	r3, #5
    2828:	d004      	beq.n	2834 <usb_d_ep_transfer+0xbc>
    282a:	2b06      	cmp	r3, #6
    282c:	d004      	beq.n	2838 <usb_d_ep_transfer+0xc0>
    282e:	2b00      	cmp	r3, #0
    2830:	d005      	beq.n	283e <usb_d_ep_transfer+0xc6>
    2832:	e007      	b.n	2844 <usb_d_ep_transfer+0xcc>
			return USB_HALTED;
    2834:	2302      	movs	r3, #2
    2836:	e061      	b.n	28fc <usb_d_ep_transfer+0x184>
			return -USB_ERROR;
    2838:	2310      	movs	r3, #16
    283a:	425b      	negs	r3, r3
    283c:	e05e      	b.n	28fc <usb_d_ep_transfer+0x184>
			return -USB_ERR_FUNC;
    283e:	2313      	movs	r3, #19
    2840:	425b      	negs	r3, r3
    2842:	e05b      	b.n	28fc <usb_d_ep_transfer+0x184>
			return USB_BUSY;
    2844:	2301      	movs	r3, #1
    2846:	e059      	b.n	28fc <usb_d_ep_transfer+0x184>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    2848:	69bb      	ldr	r3, [r7, #24]
    284a:	7c9b      	ldrb	r3, [r3, #18]
    284c:	b299      	uxth	r1, r3
    284e:	69bb      	ldr	r3, [r7, #24]
    2850:	7cdb      	ldrb	r3, [r3, #19]
    2852:	b29b      	uxth	r3, r3
    2854:	021b      	lsls	r3, r3, #8
    2856:	b29a      	uxth	r2, r3
    2858:	2316      	movs	r3, #22
    285a:	18fb      	adds	r3, r7, r3
    285c:	188a      	adds	r2, r1, r2
    285e:	801a      	strh	r2, [r3, #0]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    2860:	2316      	movs	r3, #22
    2862:	18fb      	adds	r3, r7, r3
    2864:	881b      	ldrh	r3, [r3, #0]
    2866:	2b00      	cmp	r3, #0
    2868:	d10d      	bne.n	2886 <usb_d_ep_transfer+0x10e>
			dir                 = true;
    286a:	2327      	movs	r3, #39	; 0x27
    286c:	18fb      	adds	r3, r7, r3
    286e:	2201      	movs	r2, #1
    2870:	701a      	strb	r2, [r3, #0]
			len                 = 0;
    2872:	2300      	movs	r3, #0
    2874:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    2876:	2326      	movs	r3, #38	; 0x26
    2878:	18fb      	adds	r3, r7, r3
    287a:	2201      	movs	r2, #1
    287c:	701a      	strb	r2, [r3, #0]
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    287e:	69bb      	ldr	r3, [r7, #24]
    2880:	2204      	movs	r2, #4
    2882:	709a      	strb	r2, [r3, #2]
    2884:	e027      	b.n	28d6 <usb_d_ep_transfer+0x15e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    2886:	69bb      	ldr	r3, [r7, #24]
    2888:	7b1b      	ldrb	r3, [r3, #12]
    288a:	001a      	movs	r2, r3
    288c:	2380      	movs	r3, #128	; 0x80
    288e:	401a      	ands	r2, r3
    2890:	2327      	movs	r3, #39	; 0x27
    2892:	18fb      	adds	r3, r7, r3
    2894:	1e51      	subs	r1, r2, #1
    2896:	418a      	sbcs	r2, r1
    2898:	701a      	strb	r2, [r3, #0]
			/* Data length not exceed requested. */
			if (len > req_len) {
    289a:	2316      	movs	r3, #22
    289c:	18fb      	adds	r3, r7, r3
    289e:	881a      	ldrh	r2, [r3, #0]
    28a0:	6a3b      	ldr	r3, [r7, #32]
    28a2:	429a      	cmp	r2, r3
    28a4:	d203      	bcs.n	28ae <usb_d_ep_transfer+0x136>
				len = req_len;
    28a6:	2316      	movs	r3, #22
    28a8:	18fb      	adds	r3, r7, r3
    28aa:	881b      	ldrh	r3, [r3, #0]
    28ac:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    28ae:	2327      	movs	r3, #39	; 0x27
    28b0:	18fb      	adds	r3, r7, r3
    28b2:	781b      	ldrb	r3, [r3, #0]
    28b4:	2b00      	cmp	r3, #0
    28b6:	d00a      	beq.n	28ce <usb_d_ep_transfer+0x156>
				/* Setup -> In */
				zlp = (req_len > len);
    28b8:	2316      	movs	r3, #22
    28ba:	18fb      	adds	r3, r7, r3
    28bc:	881a      	ldrh	r2, [r3, #0]
    28be:	2326      	movs	r3, #38	; 0x26
    28c0:	18fb      	adds	r3, r7, r3
    28c2:	6a39      	ldr	r1, [r7, #32]
    28c4:	4291      	cmp	r1, r2
    28c6:	4192      	sbcs	r2, r2
    28c8:	4252      	negs	r2, r2
    28ca:	701a      	strb	r2, [r3, #0]
    28cc:	e003      	b.n	28d6 <usb_d_ep_transfer+0x15e>
			} else {
				zlp = false;
    28ce:	2326      	movs	r3, #38	; 0x26
    28d0:	18fb      	adds	r3, r7, r3
    28d2:	2200      	movs	r2, #0
    28d4:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    28d6:	687b      	ldr	r3, [r7, #4]
    28d8:	7a18      	ldrb	r0, [r3, #8]
    28da:	687b      	ldr	r3, [r7, #4]
    28dc:	681c      	ldr	r4, [r3, #0]
    28de:	2326      	movs	r3, #38	; 0x26
    28e0:	18fb      	adds	r3, r7, r3
    28e2:	781b      	ldrb	r3, [r3, #0]
    28e4:	6a3d      	ldr	r5, [r7, #32]
    28e6:	2227      	movs	r2, #39	; 0x27
    28e8:	18ba      	adds	r2, r7, r2
    28ea:	7811      	ldrb	r1, [r2, #0]
    28ec:	9300      	str	r3, [sp, #0]
    28ee:	002b      	movs	r3, r5
    28f0:	0022      	movs	r2, r4
    28f2:	4c08      	ldr	r4, [pc, #32]	; (2914 <usb_d_ep_transfer+0x19c>)
    28f4:	47a0      	blx	r4
    28f6:	0003      	movs	r3, r0
    28f8:	613b      	str	r3, [r7, #16]
	return rc;
    28fa:	693b      	ldr	r3, [r7, #16]
}
    28fc:	0018      	movs	r0, r3
    28fe:	46bd      	mov	sp, r7
    2900:	b00a      	add	sp, #40	; 0x28
    2902:	bdb0      	pop	{r4, r5, r7, pc}
    2904:	00002005 	.word	0x00002005
    2908:	20000bf0 	.word	0x20000bf0
    290c:	00001a4d 	.word	0x00001a4d
    2910:	00001a6f 	.word	0x00001a6f
    2914:	000020a9 	.word	0x000020a9

00002918 <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    2918:	b590      	push	{r4, r7, lr}
    291a:	b087      	sub	sp, #28
    291c:	af00      	add	r7, sp, #0
    291e:	0002      	movs	r2, r0
    2920:	1dfb      	adds	r3, r7, #7
    2922:	701a      	strb	r2, [r3, #0]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2924:	2317      	movs	r3, #23
    2926:	18fc      	adds	r4, r7, r3
    2928:	1dfb      	adds	r3, r7, #7
    292a:	781b      	ldrb	r3, [r3, #0]
    292c:	0018      	movs	r0, r3
    292e:	4b1d      	ldr	r3, [pc, #116]	; (29a4 <_usb_d_ep_halt_clr+0x8c>)
    2930:	4798      	blx	r3
    2932:	0003      	movs	r3, r0
    2934:	7023      	strb	r3, [r4, #0]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2936:	2317      	movs	r3, #23
    2938:	18fb      	adds	r3, r7, r3
    293a:	781b      	ldrb	r3, [r3, #0]
    293c:	b25b      	sxtb	r3, r3
    293e:	015a      	lsls	r2, r3, #5
    2940:	4b19      	ldr	r3, [pc, #100]	; (29a8 <_usb_d_ep_halt_clr+0x90>)
    2942:	18d3      	adds	r3, r2, r3
    2944:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    2946:	2317      	movs	r3, #23
    2948:	18fb      	adds	r3, r7, r3
    294a:	781b      	ldrb	r3, [r3, #0]
    294c:	2b7f      	cmp	r3, #127	; 0x7f
    294e:	d902      	bls.n	2956 <_usb_d_ep_halt_clr+0x3e>
		return -USB_ERR_PARAM;
    2950:	2312      	movs	r3, #18
    2952:	425b      	negs	r3, r3
    2954:	e022      	b.n	299c <_usb_d_ep_halt_clr+0x84>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    2956:	1dfb      	adds	r3, r7, #7
    2958:	781b      	ldrb	r3, [r3, #0]
    295a:	2102      	movs	r1, #2
    295c:	0018      	movs	r0, r3
    295e:	4b13      	ldr	r3, [pc, #76]	; (29ac <_usb_d_ep_halt_clr+0x94>)
    2960:	4798      	blx	r3
    2962:	1e03      	subs	r3, r0, #0
    2964:	d019      	beq.n	299a <_usb_d_ep_halt_clr+0x82>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2966:	1dfb      	adds	r3, r7, #7
    2968:	781b      	ldrb	r3, [r3, #0]
    296a:	2100      	movs	r1, #0
    296c:	0018      	movs	r0, r3
    296e:	4b0f      	ldr	r3, [pc, #60]	; (29ac <_usb_d_ep_halt_clr+0x94>)
    2970:	4798      	blx	r3
    2972:	0003      	movs	r3, r0
    2974:	60fb      	str	r3, [r7, #12]
		if (rc < 0) {
    2976:	68fb      	ldr	r3, [r7, #12]
    2978:	2b00      	cmp	r3, #0
    297a:	da01      	bge.n	2980 <_usb_d_ep_halt_clr+0x68>
			return rc;
    297c:	68fb      	ldr	r3, [r7, #12]
    297e:	e00d      	b.n	299c <_usb_d_ep_halt_clr+0x84>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    2980:	693b      	ldr	r3, [r7, #16]
    2982:	2201      	movs	r2, #1
    2984:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    2986:	693b      	ldr	r3, [r7, #16]
    2988:	2203      	movs	r2, #3
    298a:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    298c:	693b      	ldr	r3, [r7, #16]
    298e:	69db      	ldr	r3, [r3, #28]
    2990:	1dfa      	adds	r2, r7, #7
    2992:	7810      	ldrb	r0, [r2, #0]
    2994:	2200      	movs	r2, #0
    2996:	2103      	movs	r1, #3
    2998:	4798      	blx	r3
	}
	return ERR_NONE;
    299a:	2300      	movs	r3, #0
}
    299c:	0018      	movs	r0, r3
    299e:	46bd      	mov	sp, r7
    29a0:	b007      	add	sp, #28
    29a2:	bd90      	pop	{r4, r7, pc}
    29a4:	00002005 	.word	0x00002005
    29a8:	20000bf0 	.word	0x20000bf0
    29ac:	00006d5d 	.word	0x00006d5d

000029b0 <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    29b0:	b580      	push	{r7, lr}
    29b2:	b082      	sub	sp, #8
    29b4:	af00      	add	r7, sp, #0
    29b6:	0002      	movs	r2, r0
    29b8:	1dfb      	adds	r3, r7, #7
    29ba:	701a      	strb	r2, [r3, #0]
    29bc:	1dbb      	adds	r3, r7, #6
    29be:	1c0a      	adds	r2, r1, #0
    29c0:	701a      	strb	r2, [r3, #0]
	if (ctrl == USB_EP_HALT_CLR) {
    29c2:	1dbb      	adds	r3, r7, #6
    29c4:	781b      	ldrb	r3, [r3, #0]
    29c6:	2b00      	cmp	r3, #0
    29c8:	d106      	bne.n	29d8 <usb_d_ep_halt+0x28>
		return _usb_d_ep_halt_clr(ep);
    29ca:	1dfb      	adds	r3, r7, #7
    29cc:	781b      	ldrb	r3, [r3, #0]
    29ce:	0018      	movs	r0, r3
    29d0:	4b0d      	ldr	r3, [pc, #52]	; (2a08 <usb_d_ep_halt+0x58>)
    29d2:	4798      	blx	r3
    29d4:	0003      	movs	r3, r0
    29d6:	e012      	b.n	29fe <usb_d_ep_halt+0x4e>
	} else if (ctrl == USB_EP_HALT_SET) {
    29d8:	1dbb      	adds	r3, r7, #6
    29da:	781b      	ldrb	r3, [r3, #0]
    29dc:	2b01      	cmp	r3, #1
    29de:	d107      	bne.n	29f0 <usb_d_ep_halt+0x40>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    29e0:	1dfb      	adds	r3, r7, #7
    29e2:	781b      	ldrb	r3, [r3, #0]
    29e4:	2101      	movs	r1, #1
    29e6:	0018      	movs	r0, r3
    29e8:	4b08      	ldr	r3, [pc, #32]	; (2a0c <usb_d_ep_halt+0x5c>)
    29ea:	4798      	blx	r3
    29ec:	0003      	movs	r3, r0
    29ee:	e006      	b.n	29fe <usb_d_ep_halt+0x4e>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    29f0:	1dfb      	adds	r3, r7, #7
    29f2:	781b      	ldrb	r3, [r3, #0]
    29f4:	2102      	movs	r1, #2
    29f6:	0018      	movs	r0, r3
    29f8:	4b04      	ldr	r3, [pc, #16]	; (2a0c <usb_d_ep_halt+0x5c>)
    29fa:	4798      	blx	r3
    29fc:	0003      	movs	r3, r0
	}
}
    29fe:	0018      	movs	r0, r3
    2a00:	46bd      	mov	sp, r7
    2a02:	b002      	add	sp, #8
    2a04:	bd80      	pop	{r7, pc}
    2a06:	46c0      	nop			; (mov r8, r8)
    2a08:	00002919 	.word	0x00002919
    2a0c:	00006d5d 	.word	0x00006d5d

00002a10 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    2a10:	b590      	push	{r4, r7, lr}
    2a12:	b087      	sub	sp, #28
    2a14:	af00      	add	r7, sp, #0
    2a16:	603a      	str	r2, [r7, #0]
    2a18:	1dfb      	adds	r3, r7, #7
    2a1a:	1c02      	adds	r2, r0, #0
    2a1c:	701a      	strb	r2, [r3, #0]
    2a1e:	1dbb      	adds	r3, r7, #6
    2a20:	1c0a      	adds	r2, r1, #0
    2a22:	701a      	strb	r2, [r3, #0]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2a24:	2317      	movs	r3, #23
    2a26:	18fc      	adds	r4, r7, r3
    2a28:	1dfb      	adds	r3, r7, #7
    2a2a:	781b      	ldrb	r3, [r3, #0]
    2a2c:	0018      	movs	r0, r3
    2a2e:	4b18      	ldr	r3, [pc, #96]	; (2a90 <usb_d_ep_register_callback+0x80>)
    2a30:	4798      	blx	r3
    2a32:	0003      	movs	r3, r0
    2a34:	7023      	strb	r3, [r4, #0]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2a36:	2317      	movs	r3, #23
    2a38:	18fb      	adds	r3, r7, r3
    2a3a:	781b      	ldrb	r3, [r3, #0]
    2a3c:	b25b      	sxtb	r3, r3
    2a3e:	015a      	lsls	r2, r3, #5
    2a40:	4b14      	ldr	r3, [pc, #80]	; (2a94 <usb_d_ep_register_callback+0x84>)
    2a42:	18d3      	adds	r3, r2, r3
    2a44:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    2a46:	683b      	ldr	r3, [r7, #0]
    2a48:	2b00      	cmp	r3, #0
    2a4a:	d001      	beq.n	2a50 <usb_d_ep_register_callback+0x40>
    2a4c:	683b      	ldr	r3, [r7, #0]
    2a4e:	e000      	b.n	2a52 <usb_d_ep_register_callback+0x42>
    2a50:	4b11      	ldr	r3, [pc, #68]	; (2a98 <usb_d_ep_register_callback+0x88>)
    2a52:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    2a54:	2317      	movs	r3, #23
    2a56:	18fb      	adds	r3, r7, r3
    2a58:	781b      	ldrb	r3, [r3, #0]
    2a5a:	2b7f      	cmp	r3, #127	; 0x7f
    2a5c:	d814      	bhi.n	2a88 <usb_d_ep_register_callback+0x78>
		return;
	}
	switch (type) {
    2a5e:	1dbb      	adds	r3, r7, #6
    2a60:	781b      	ldrb	r3, [r3, #0]
    2a62:	2b01      	cmp	r3, #1
    2a64:	d008      	beq.n	2a78 <usb_d_ep_register_callback+0x68>
    2a66:	2b02      	cmp	r3, #2
    2a68:	d00a      	beq.n	2a80 <usb_d_ep_register_callback+0x70>
    2a6a:	2b00      	cmp	r3, #0
    2a6c:	d000      	beq.n	2a70 <usb_d_ep_register_callback+0x60>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    2a6e:	e00c      	b.n	2a8a <usb_d_ep_register_callback+0x7a>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    2a70:	693b      	ldr	r3, [r7, #16]
    2a72:	68fa      	ldr	r2, [r7, #12]
    2a74:	615a      	str	r2, [r3, #20]
		break;
    2a76:	e008      	b.n	2a8a <usb_d_ep_register_callback+0x7a>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    2a78:	693b      	ldr	r3, [r7, #16]
    2a7a:	68fa      	ldr	r2, [r7, #12]
    2a7c:	619a      	str	r2, [r3, #24]
		break;
    2a7e:	e004      	b.n	2a8a <usb_d_ep_register_callback+0x7a>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    2a80:	693b      	ldr	r3, [r7, #16]
    2a82:	68fa      	ldr	r2, [r7, #12]
    2a84:	61da      	str	r2, [r3, #28]
		break;
    2a86:	e000      	b.n	2a8a <usb_d_ep_register_callback+0x7a>
		return;
    2a88:	46c0      	nop			; (mov r8, r8)
	}
}
    2a8a:	46bd      	mov	sp, r7
    2a8c:	b007      	add	sp, #28
    2a8e:	bd90      	pop	{r4, r7, pc}
    2a90:	00002005 	.word	0x00002005
    2a94:	20000bf0 	.word	0x20000bf0
    2a98:	00002125 	.word	0x00002125

00002a9c <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    2a9c:	b580      	push	{r7, lr}
    2a9e:	b084      	sub	sp, #16
    2aa0:	af00      	add	r7, sp, #0
    2aa2:	60b9      	str	r1, [r7, #8]
    2aa4:	607a      	str	r2, [r7, #4]
    2aa6:	230f      	movs	r3, #15
    2aa8:	18fb      	adds	r3, r7, r3
    2aaa:	1c02      	adds	r2, r0, #0
    2aac:	701a      	strb	r2, [r3, #0]
	if (!(condition)) {
    2aae:	230f      	movs	r3, #15
    2ab0:	18fb      	adds	r3, r7, r3
    2ab2:	781b      	ldrb	r3, [r3, #0]
    2ab4:	2201      	movs	r2, #1
    2ab6:	4053      	eors	r3, r2
    2ab8:	b2db      	uxtb	r3, r3
    2aba:	2b00      	cmp	r3, #0
    2abc:	d000      	beq.n	2ac0 <assert+0x24>
		__asm("BKPT #0");
    2abe:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    2ac0:	46c0      	nop			; (mov r8, r8)
    2ac2:	46bd      	mov	sp, r7
    2ac4:	b004      	add	sp, #16
    2ac6:	bd80      	pop	{r7, pc}

00002ac8 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    2ac8:	b590      	push	{r4, r7, lr}
    2aca:	b083      	sub	sp, #12
    2acc:	af00      	add	r7, sp, #0
    2ace:	6039      	str	r1, [r7, #0]
    2ad0:	0011      	movs	r1, r2
    2ad2:	1dbb      	adds	r3, r7, #6
    2ad4:	1c02      	adds	r2, r0, #0
    2ad6:	801a      	strh	r2, [r3, #0]
    2ad8:	1d7b      	adds	r3, r7, #5
    2ada:	1c0a      	adds	r2, r1, #0
    2adc:	701a      	strb	r2, [r3, #0]
	switch (power) {
    2ade:	1d7b      	adds	r3, r7, #5
    2ae0:	781b      	ldrb	r3, [r3, #0]
    2ae2:	3b04      	subs	r3, #4
    2ae4:	2b04      	cmp	r3, #4
    2ae6:	d859      	bhi.n	2b9c <_get_cycles_for_us_internal+0xd4>
    2ae8:	009a      	lsls	r2, r3, #2
    2aea:	4b34      	ldr	r3, [pc, #208]	; (2bbc <_get_cycles_for_us_internal+0xf4>)
    2aec:	18d3      	adds	r3, r2, r3
    2aee:	681b      	ldr	r3, [r3, #0]
    2af0:	469f      	mov	pc, r3
	case 8:
		return (us * (freq / 100000) - 1) / 10 + 1;
    2af2:	1dbb      	adds	r3, r7, #6
    2af4:	881c      	ldrh	r4, [r3, #0]
    2af6:	683a      	ldr	r2, [r7, #0]
    2af8:	4b31      	ldr	r3, [pc, #196]	; (2bc0 <_get_cycles_for_us_internal+0xf8>)
    2afa:	4932      	ldr	r1, [pc, #200]	; (2bc4 <_get_cycles_for_us_internal+0xfc>)
    2afc:	0010      	movs	r0, r2
    2afe:	4798      	blx	r3
    2b00:	0003      	movs	r3, r0
    2b02:	4363      	muls	r3, r4
    2b04:	1e5a      	subs	r2, r3, #1
    2b06:	4b2e      	ldr	r3, [pc, #184]	; (2bc0 <_get_cycles_for_us_internal+0xf8>)
    2b08:	210a      	movs	r1, #10
    2b0a:	0010      	movs	r0, r2
    2b0c:	4798      	blx	r3
    2b0e:	0003      	movs	r3, r0
    2b10:	3301      	adds	r3, #1
    2b12:	e04e      	b.n	2bb2 <_get_cycles_for_us_internal+0xea>
	case 7:
		return (us * (freq / 10000) - 1) / 100 + 1;
    2b14:	1dbb      	adds	r3, r7, #6
    2b16:	881c      	ldrh	r4, [r3, #0]
    2b18:	683a      	ldr	r2, [r7, #0]
    2b1a:	4b29      	ldr	r3, [pc, #164]	; (2bc0 <_get_cycles_for_us_internal+0xf8>)
    2b1c:	492a      	ldr	r1, [pc, #168]	; (2bc8 <_get_cycles_for_us_internal+0x100>)
    2b1e:	0010      	movs	r0, r2
    2b20:	4798      	blx	r3
    2b22:	0003      	movs	r3, r0
    2b24:	4363      	muls	r3, r4
    2b26:	1e5a      	subs	r2, r3, #1
    2b28:	4b25      	ldr	r3, [pc, #148]	; (2bc0 <_get_cycles_for_us_internal+0xf8>)
    2b2a:	2164      	movs	r1, #100	; 0x64
    2b2c:	0010      	movs	r0, r2
    2b2e:	4798      	blx	r3
    2b30:	0003      	movs	r3, r0
    2b32:	3301      	adds	r3, #1
    2b34:	e03d      	b.n	2bb2 <_get_cycles_for_us_internal+0xea>
	case 6:
		return (us * (freq / 1000) - 1) / 1000 + 1;
    2b36:	1dbb      	adds	r3, r7, #6
    2b38:	881c      	ldrh	r4, [r3, #0]
    2b3a:	6838      	ldr	r0, [r7, #0]
    2b3c:	4b20      	ldr	r3, [pc, #128]	; (2bc0 <_get_cycles_for_us_internal+0xf8>)
    2b3e:	22fa      	movs	r2, #250	; 0xfa
    2b40:	0091      	lsls	r1, r2, #2
    2b42:	4798      	blx	r3
    2b44:	0003      	movs	r3, r0
    2b46:	4363      	muls	r3, r4
    2b48:	1e58      	subs	r0, r3, #1
    2b4a:	4b1d      	ldr	r3, [pc, #116]	; (2bc0 <_get_cycles_for_us_internal+0xf8>)
    2b4c:	22fa      	movs	r2, #250	; 0xfa
    2b4e:	0091      	lsls	r1, r2, #2
    2b50:	4798      	blx	r3
    2b52:	0003      	movs	r3, r0
    2b54:	3301      	adds	r3, #1
    2b56:	e02c      	b.n	2bb2 <_get_cycles_for_us_internal+0xea>
	case 5:
		return (us * (freq / 100) - 1) / 10000 + 1;
    2b58:	1dbb      	adds	r3, r7, #6
    2b5a:	881c      	ldrh	r4, [r3, #0]
    2b5c:	683a      	ldr	r2, [r7, #0]
    2b5e:	4b18      	ldr	r3, [pc, #96]	; (2bc0 <_get_cycles_for_us_internal+0xf8>)
    2b60:	2164      	movs	r1, #100	; 0x64
    2b62:	0010      	movs	r0, r2
    2b64:	4798      	blx	r3
    2b66:	0003      	movs	r3, r0
    2b68:	4363      	muls	r3, r4
    2b6a:	1e5a      	subs	r2, r3, #1
    2b6c:	4b14      	ldr	r3, [pc, #80]	; (2bc0 <_get_cycles_for_us_internal+0xf8>)
    2b6e:	4916      	ldr	r1, [pc, #88]	; (2bc8 <_get_cycles_for_us_internal+0x100>)
    2b70:	0010      	movs	r0, r2
    2b72:	4798      	blx	r3
    2b74:	0003      	movs	r3, r0
    2b76:	3301      	adds	r3, #1
    2b78:	e01b      	b.n	2bb2 <_get_cycles_for_us_internal+0xea>
	case 4:
		return (us * (freq / 10) - 1) / 100000 + 1;
    2b7a:	1dbb      	adds	r3, r7, #6
    2b7c:	881c      	ldrh	r4, [r3, #0]
    2b7e:	683a      	ldr	r2, [r7, #0]
    2b80:	4b0f      	ldr	r3, [pc, #60]	; (2bc0 <_get_cycles_for_us_internal+0xf8>)
    2b82:	210a      	movs	r1, #10
    2b84:	0010      	movs	r0, r2
    2b86:	4798      	blx	r3
    2b88:	0003      	movs	r3, r0
    2b8a:	4363      	muls	r3, r4
    2b8c:	1e5a      	subs	r2, r3, #1
    2b8e:	4b0c      	ldr	r3, [pc, #48]	; (2bc0 <_get_cycles_for_us_internal+0xf8>)
    2b90:	490c      	ldr	r1, [pc, #48]	; (2bc4 <_get_cycles_for_us_internal+0xfc>)
    2b92:	0010      	movs	r0, r2
    2b94:	4798      	blx	r3
    2b96:	0003      	movs	r3, r0
    2b98:	3301      	adds	r3, #1
    2b9a:	e00a      	b.n	2bb2 <_get_cycles_for_us_internal+0xea>
	default:
		return (us * freq - 1) / 1000000 + 1;
    2b9c:	1dbb      	adds	r3, r7, #6
    2b9e:	881b      	ldrh	r3, [r3, #0]
    2ba0:	683a      	ldr	r2, [r7, #0]
    2ba2:	4353      	muls	r3, r2
    2ba4:	1e5a      	subs	r2, r3, #1
    2ba6:	4b06      	ldr	r3, [pc, #24]	; (2bc0 <_get_cycles_for_us_internal+0xf8>)
    2ba8:	4908      	ldr	r1, [pc, #32]	; (2bcc <_get_cycles_for_us_internal+0x104>)
    2baa:	0010      	movs	r0, r2
    2bac:	4798      	blx	r3
    2bae:	0003      	movs	r3, r0
    2bb0:	3301      	adds	r3, #1
	}
}
    2bb2:	0018      	movs	r0, r3
    2bb4:	46bd      	mov	sp, r7
    2bb6:	b003      	add	sp, #12
    2bb8:	bd90      	pop	{r4, r7, pc}
    2bba:	46c0      	nop			; (mov r8, r8)
    2bbc:	000121cc 	.word	0x000121cc
    2bc0:	0000a3fd 	.word	0x0000a3fd
    2bc4:	000186a0 	.word	0x000186a0
    2bc8:	00002710 	.word	0x00002710
    2bcc:	000f4240 	.word	0x000f4240

00002bd0 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    2bd0:	b590      	push	{r4, r7, lr}
    2bd2:	b083      	sub	sp, #12
    2bd4:	af00      	add	r7, sp, #0
    2bd6:	6039      	str	r1, [r7, #0]
    2bd8:	0011      	movs	r1, r2
    2bda:	1dbb      	adds	r3, r7, #6
    2bdc:	1c02      	adds	r2, r0, #0
    2bde:	801a      	strh	r2, [r3, #0]
    2be0:	1d7b      	adds	r3, r7, #5
    2be2:	1c0a      	adds	r2, r1, #0
    2be4:	701a      	strb	r2, [r3, #0]
	switch (power) {
    2be6:	1d7b      	adds	r3, r7, #5
    2be8:	781b      	ldrb	r3, [r3, #0]
    2bea:	3b04      	subs	r3, #4
    2bec:	2b04      	cmp	r3, #4
    2bee:	d84b      	bhi.n	2c88 <_get_cycles_for_ms_internal+0xb8>
    2bf0:	009a      	lsls	r2, r3, #2
    2bf2:	4b2d      	ldr	r3, [pc, #180]	; (2ca8 <_get_cycles_for_ms_internal+0xd8>)
    2bf4:	18d3      	adds	r3, r2, r3
    2bf6:	681b      	ldr	r3, [r3, #0]
    2bf8:	469f      	mov	pc, r3
	case 8:
		return (ms * (freq / 100000)) * 100;
    2bfa:	1dbb      	adds	r3, r7, #6
    2bfc:	881c      	ldrh	r4, [r3, #0]
    2bfe:	683a      	ldr	r2, [r7, #0]
    2c00:	4b2a      	ldr	r3, [pc, #168]	; (2cac <_get_cycles_for_ms_internal+0xdc>)
    2c02:	492b      	ldr	r1, [pc, #172]	; (2cb0 <_get_cycles_for_ms_internal+0xe0>)
    2c04:	0010      	movs	r0, r2
    2c06:	4798      	blx	r3
    2c08:	0003      	movs	r3, r0
    2c0a:	4363      	muls	r3, r4
    2c0c:	2264      	movs	r2, #100	; 0x64
    2c0e:	4353      	muls	r3, r2
    2c10:	e045      	b.n	2c9e <_get_cycles_for_ms_internal+0xce>
	case 7:
		return (ms * (freq / 10000)) * 10;
    2c12:	1dbb      	adds	r3, r7, #6
    2c14:	881c      	ldrh	r4, [r3, #0]
    2c16:	683a      	ldr	r2, [r7, #0]
    2c18:	4b24      	ldr	r3, [pc, #144]	; (2cac <_get_cycles_for_ms_internal+0xdc>)
    2c1a:	4926      	ldr	r1, [pc, #152]	; (2cb4 <_get_cycles_for_ms_internal+0xe4>)
    2c1c:	0010      	movs	r0, r2
    2c1e:	4798      	blx	r3
    2c20:	0003      	movs	r3, r0
    2c22:	4363      	muls	r3, r4
    2c24:	001a      	movs	r2, r3
    2c26:	0013      	movs	r3, r2
    2c28:	009b      	lsls	r3, r3, #2
    2c2a:	189b      	adds	r3, r3, r2
    2c2c:	005b      	lsls	r3, r3, #1
    2c2e:	e036      	b.n	2c9e <_get_cycles_for_ms_internal+0xce>
	case 6:
		return (ms * (freq / 1000));
    2c30:	1dbb      	adds	r3, r7, #6
    2c32:	881c      	ldrh	r4, [r3, #0]
    2c34:	6838      	ldr	r0, [r7, #0]
    2c36:	4b1d      	ldr	r3, [pc, #116]	; (2cac <_get_cycles_for_ms_internal+0xdc>)
    2c38:	22fa      	movs	r2, #250	; 0xfa
    2c3a:	0091      	lsls	r1, r2, #2
    2c3c:	4798      	blx	r3
    2c3e:	0003      	movs	r3, r0
    2c40:	4363      	muls	r3, r4
    2c42:	e02c      	b.n	2c9e <_get_cycles_for_ms_internal+0xce>
	case 5:
		return (ms * (freq / 100) - 1) / 10 + 1;
    2c44:	1dbb      	adds	r3, r7, #6
    2c46:	881c      	ldrh	r4, [r3, #0]
    2c48:	683a      	ldr	r2, [r7, #0]
    2c4a:	4b18      	ldr	r3, [pc, #96]	; (2cac <_get_cycles_for_ms_internal+0xdc>)
    2c4c:	2164      	movs	r1, #100	; 0x64
    2c4e:	0010      	movs	r0, r2
    2c50:	4798      	blx	r3
    2c52:	0003      	movs	r3, r0
    2c54:	4363      	muls	r3, r4
    2c56:	1e5a      	subs	r2, r3, #1
    2c58:	4b14      	ldr	r3, [pc, #80]	; (2cac <_get_cycles_for_ms_internal+0xdc>)
    2c5a:	210a      	movs	r1, #10
    2c5c:	0010      	movs	r0, r2
    2c5e:	4798      	blx	r3
    2c60:	0003      	movs	r3, r0
    2c62:	3301      	adds	r3, #1
    2c64:	e01b      	b.n	2c9e <_get_cycles_for_ms_internal+0xce>
	case 4:
		return (ms * (freq / 10) - 1) / 100 + 1;
    2c66:	1dbb      	adds	r3, r7, #6
    2c68:	881c      	ldrh	r4, [r3, #0]
    2c6a:	683a      	ldr	r2, [r7, #0]
    2c6c:	4b0f      	ldr	r3, [pc, #60]	; (2cac <_get_cycles_for_ms_internal+0xdc>)
    2c6e:	210a      	movs	r1, #10
    2c70:	0010      	movs	r0, r2
    2c72:	4798      	blx	r3
    2c74:	0003      	movs	r3, r0
    2c76:	4363      	muls	r3, r4
    2c78:	1e5a      	subs	r2, r3, #1
    2c7a:	4b0c      	ldr	r3, [pc, #48]	; (2cac <_get_cycles_for_ms_internal+0xdc>)
    2c7c:	2164      	movs	r1, #100	; 0x64
    2c7e:	0010      	movs	r0, r2
    2c80:	4798      	blx	r3
    2c82:	0003      	movs	r3, r0
    2c84:	3301      	adds	r3, #1
    2c86:	e00a      	b.n	2c9e <_get_cycles_for_ms_internal+0xce>
	default:
		return (ms * freq - 1) / 1000 + 1;
    2c88:	1dbb      	adds	r3, r7, #6
    2c8a:	881b      	ldrh	r3, [r3, #0]
    2c8c:	683a      	ldr	r2, [r7, #0]
    2c8e:	4353      	muls	r3, r2
    2c90:	1e58      	subs	r0, r3, #1
    2c92:	4b06      	ldr	r3, [pc, #24]	; (2cac <_get_cycles_for_ms_internal+0xdc>)
    2c94:	22fa      	movs	r2, #250	; 0xfa
    2c96:	0091      	lsls	r1, r2, #2
    2c98:	4798      	blx	r3
    2c9a:	0003      	movs	r3, r0
    2c9c:	3301      	adds	r3, #1
	}
}
    2c9e:	0018      	movs	r0, r3
    2ca0:	46bd      	mov	sp, r7
    2ca2:	b003      	add	sp, #12
    2ca4:	bd90      	pop	{r4, r7, pc}
    2ca6:	46c0      	nop			; (mov r8, r8)
    2ca8:	000121e0 	.word	0x000121e0
    2cac:	0000a3fd 	.word	0x0000a3fd
    2cb0:	000186a0 	.word	0x000186a0
    2cb4:	00002710 	.word	0x00002710

00002cb8 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    2cb8:	b580      	push	{r7, lr}
    2cba:	b082      	sub	sp, #8
    2cbc:	af00      	add	r7, sp, #0
    2cbe:	0002      	movs	r2, r0
    2cc0:	1dbb      	adds	r3, r7, #6
    2cc2:	801a      	strh	r2, [r3, #0]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    2cc4:	4905      	ldr	r1, [pc, #20]	; (2cdc <_get_cycles_for_ms+0x24>)
    2cc6:	1dbb      	adds	r3, r7, #6
    2cc8:	881b      	ldrh	r3, [r3, #0]
    2cca:	2208      	movs	r2, #8
    2ccc:	0018      	movs	r0, r3
    2cce:	4b04      	ldr	r3, [pc, #16]	; (2ce0 <_get_cycles_for_ms+0x28>)
    2cd0:	4798      	blx	r3
    2cd2:	0003      	movs	r3, r0
}
    2cd4:	0018      	movs	r0, r3
    2cd6:	46bd      	mov	sp, r7
    2cd8:	b002      	add	sp, #8
    2cda:	bd80      	pop	{r7, pc}
    2cdc:	02dc7000 	.word	0x02dc7000
    2ce0:	00002bd1 	.word	0x00002bd1

00002ce4 <hri_nvmctrl_set_CTRLB_RWS_bf>:
	((Nvmctrl *)hw)->CTRLB.reg ^= NVMCTRL_CTRLB_CACHEDIS;
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
    2ce4:	b580      	push	{r7, lr}
    2ce6:	b082      	sub	sp, #8
    2ce8:	af00      	add	r7, sp, #0
    2cea:	6078      	str	r0, [r7, #4]
    2cec:	6039      	str	r1, [r7, #0]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    2cee:	687b      	ldr	r3, [r7, #4]
    2cf0:	685a      	ldr	r2, [r3, #4]
    2cf2:	683b      	ldr	r3, [r7, #0]
    2cf4:	005b      	lsls	r3, r3, #1
    2cf6:	211e      	movs	r1, #30
    2cf8:	400b      	ands	r3, r1
    2cfa:	431a      	orrs	r2, r3
    2cfc:	687b      	ldr	r3, [r7, #4]
    2cfe:	605a      	str	r2, [r3, #4]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    2d00:	46c0      	nop			; (mov r8, r8)
    2d02:	46bd      	mov	sp, r7
    2d04:	b002      	add	sp, #8
    2d06:	bd80      	pop	{r7, pc}

00002d08 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    2d08:	b580      	push	{r7, lr}
    2d0a:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    2d0c:	4b08      	ldr	r3, [pc, #32]	; (2d30 <_init_chip+0x28>)
    2d0e:	2100      	movs	r1, #0
    2d10:	0018      	movs	r0, r3
    2d12:	4b08      	ldr	r3, [pc, #32]	; (2d34 <_init_chip+0x2c>)
    2d14:	4798      	blx	r3

	_pm_init();
    2d16:	4b08      	ldr	r3, [pc, #32]	; (2d38 <_init_chip+0x30>)
    2d18:	4798      	blx	r3
	_sysctrl_init_sources();
    2d1a:	4b08      	ldr	r3, [pc, #32]	; (2d3c <_init_chip+0x34>)
    2d1c:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
    2d1e:	4b08      	ldr	r3, [pc, #32]	; (2d40 <_init_chip+0x38>)
    2d20:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    2d22:	20ff      	movs	r0, #255	; 0xff
    2d24:	4b07      	ldr	r3, [pc, #28]	; (2d44 <_init_chip+0x3c>)
    2d26:	4798      	blx	r3
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
    2d28:	46c0      	nop			; (mov r8, r8)
    2d2a:	46bd      	mov	sp, r7
    2d2c:	bd80      	pop	{r7, pc}
    2d2e:	46c0      	nop			; (mov r8, r8)
    2d30:	41004000 	.word	0x41004000
    2d34:	00002ce5 	.word	0x00002ce5
    2d38:	00002f89 	.word	0x00002f89
    2d3c:	000041dd 	.word	0x000041dd
    2d40:	000042fd 	.word	0x000042fd
    2d44:	00002da5 	.word	0x00002da5

00002d48 <hri_gclk_wait_for_sync>:
{
    2d48:	b580      	push	{r7, lr}
    2d4a:	b082      	sub	sp, #8
    2d4c:	af00      	add	r7, sp, #0
    2d4e:	6078      	str	r0, [r7, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    2d50:	46c0      	nop			; (mov r8, r8)
    2d52:	687b      	ldr	r3, [r7, #4]
    2d54:	785b      	ldrb	r3, [r3, #1]
    2d56:	061b      	lsls	r3, r3, #24
    2d58:	0fdb      	lsrs	r3, r3, #31
    2d5a:	b2db      	uxtb	r3, r3
    2d5c:	2b00      	cmp	r3, #0
    2d5e:	d1f8      	bne.n	2d52 <hri_gclk_wait_for_sync+0xa>
}
    2d60:	46c0      	nop			; (mov r8, r8)
    2d62:	46bd      	mov	sp, r7
    2d64:	b002      	add	sp, #8
    2d66:	bd80      	pop	{r7, pc}

00002d68 <hri_gclk_write_GENCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_GENCTRL_reg(const void *const hw, hri_gclk_genctrl_reg_t data)
{
    2d68:	b580      	push	{r7, lr}
    2d6a:	b082      	sub	sp, #8
    2d6c:	af00      	add	r7, sp, #0
    2d6e:	6078      	str	r0, [r7, #4]
    2d70:	6039      	str	r1, [r7, #0]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENCTRL.reg = data;
    2d72:	687b      	ldr	r3, [r7, #4]
    2d74:	683a      	ldr	r2, [r7, #0]
    2d76:	605a      	str	r2, [r3, #4]
	hri_gclk_wait_for_sync(hw);
    2d78:	687b      	ldr	r3, [r7, #4]
    2d7a:	0018      	movs	r0, r3
    2d7c:	4b02      	ldr	r3, [pc, #8]	; (2d88 <hri_gclk_write_GENCTRL_reg+0x20>)
    2d7e:	4798      	blx	r3
	GCLK_CRITICAL_SECTION_LEAVE();
}
    2d80:	46c0      	nop			; (mov r8, r8)
    2d82:	46bd      	mov	sp, r7
    2d84:	b002      	add	sp, #8
    2d86:	bd80      	pop	{r7, pc}
    2d88:	00002d49 	.word	0x00002d49

00002d8c <hri_gclk_write_GENDIV_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
    2d8c:	b580      	push	{r7, lr}
    2d8e:	b082      	sub	sp, #8
    2d90:	af00      	add	r7, sp, #0
    2d92:	6078      	str	r0, [r7, #4]
    2d94:	6039      	str	r1, [r7, #0]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
    2d96:	687b      	ldr	r3, [r7, #4]
    2d98:	683a      	ldr	r2, [r7, #0]
    2d9a:	609a      	str	r2, [r3, #8]
	GCLK_CRITICAL_SECTION_LEAVE();
}
    2d9c:	46c0      	nop			; (mov r8, r8)
    2d9e:	46bd      	mov	sp, r7
    2da0:	b002      	add	sp, #8
    2da2:	bd80      	pop	{r7, pc}

00002da4 <_gclk_init_generators_by_fref>:
	        | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    2da4:	b580      	push	{r7, lr}
    2da6:	b082      	sub	sp, #8
    2da8:	af00      	add	r7, sp, #0
    2daa:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    2dac:	687b      	ldr	r3, [r7, #4]
    2dae:	2201      	movs	r2, #1
    2db0:	4013      	ands	r3, r2
    2db2:	d00c      	beq.n	2dce <_gclk_init_generators_by_fref+0x2a>
		hri_gclk_write_GENDIV_reg(GCLK, GCLK_GENDIV_DIV(CONF_GCLK_GEN_0_DIV) | GCLK_GENDIV_ID(0));
    2db4:	2380      	movs	r3, #128	; 0x80
    2db6:	005b      	lsls	r3, r3, #1
    2db8:	4a38      	ldr	r2, [pc, #224]	; (2e9c <_gclk_init_generators_by_fref+0xf8>)
    2dba:	0019      	movs	r1, r3
    2dbc:	0010      	movs	r0, r2
    2dbe:	4b38      	ldr	r3, [pc, #224]	; (2ea0 <_gclk_init_generators_by_fref+0xfc>)
    2dc0:	4798      	blx	r3
		hri_gclk_write_GENCTRL_reg(
    2dc2:	4a38      	ldr	r2, [pc, #224]	; (2ea4 <_gclk_init_generators_by_fref+0x100>)
    2dc4:	4b35      	ldr	r3, [pc, #212]	; (2e9c <_gclk_init_generators_by_fref+0xf8>)
    2dc6:	0011      	movs	r1, r2
    2dc8:	0018      	movs	r0, r3
    2dca:	4b37      	ldr	r3, [pc, #220]	; (2ea8 <_gclk_init_generators_by_fref+0x104>)
    2dcc:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SRC | GCLK_GENCTRL_ID(0));
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    2dce:	687b      	ldr	r3, [r7, #4]
    2dd0:	2202      	movs	r2, #2
    2dd2:	4013      	ands	r3, r2
    2dd4:	d00c      	beq.n	2df0 <_gclk_init_generators_by_fref+0x4c>
		hri_gclk_write_GENDIV_reg(GCLK, GCLK_GENDIV_DIV(CONF_GCLK_GEN_1_DIV) | GCLK_GENDIV_ID(1));
    2dd6:	2302      	movs	r3, #2
    2dd8:	33ff      	adds	r3, #255	; 0xff
    2dda:	4a30      	ldr	r2, [pc, #192]	; (2e9c <_gclk_init_generators_by_fref+0xf8>)
    2ddc:	0019      	movs	r1, r3
    2dde:	0010      	movs	r0, r2
    2de0:	4b2f      	ldr	r3, [pc, #188]	; (2ea0 <_gclk_init_generators_by_fref+0xfc>)
    2de2:	4798      	blx	r3
		hri_gclk_write_GENCTRL_reg(
    2de4:	4a31      	ldr	r2, [pc, #196]	; (2eac <_gclk_init_generators_by_fref+0x108>)
    2de6:	4b2d      	ldr	r3, [pc, #180]	; (2e9c <_gclk_init_generators_by_fref+0xf8>)
    2de8:	0011      	movs	r1, r2
    2dea:	0018      	movs	r0, r3
    2dec:	4b2e      	ldr	r3, [pc, #184]	; (2ea8 <_gclk_init_generators_by_fref+0x104>)
    2dee:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SRC | GCLK_GENCTRL_ID(1));
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    2df0:	687b      	ldr	r3, [r7, #4]
    2df2:	2204      	movs	r2, #4
    2df4:	4013      	ands	r3, r2
    2df6:	d00b      	beq.n	2e10 <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENDIV_reg(GCLK, GCLK_GENDIV_DIV(CONF_GCLK_GEN_2_DIV) | GCLK_GENDIV_ID(2));
    2df8:	4a2d      	ldr	r2, [pc, #180]	; (2eb0 <_gclk_init_generators_by_fref+0x10c>)
    2dfa:	4b28      	ldr	r3, [pc, #160]	; (2e9c <_gclk_init_generators_by_fref+0xf8>)
    2dfc:	0011      	movs	r1, r2
    2dfe:	0018      	movs	r0, r3
    2e00:	4b27      	ldr	r3, [pc, #156]	; (2ea0 <_gclk_init_generators_by_fref+0xfc>)
    2e02:	4798      	blx	r3
		hri_gclk_write_GENCTRL_reg(
    2e04:	4a2b      	ldr	r2, [pc, #172]	; (2eb4 <_gclk_init_generators_by_fref+0x110>)
    2e06:	4b25      	ldr	r3, [pc, #148]	; (2e9c <_gclk_init_generators_by_fref+0xf8>)
    2e08:	0011      	movs	r1, r2
    2e0a:	0018      	movs	r0, r3
    2e0c:	4b26      	ldr	r3, [pc, #152]	; (2ea8 <_gclk_init_generators_by_fref+0x104>)
    2e0e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    2e10:	687b      	ldr	r3, [r7, #4]
    2e12:	2208      	movs	r2, #8
    2e14:	4013      	ands	r3, r2
    2e16:	d00b      	beq.n	2e30 <_gclk_init_generators_by_fref+0x8c>
		hri_gclk_write_GENDIV_reg(GCLK, GCLK_GENDIV_DIV(CONF_GCLK_GEN_3_DIV) | GCLK_GENDIV_ID(3));
    2e18:	4a27      	ldr	r2, [pc, #156]	; (2eb8 <_gclk_init_generators_by_fref+0x114>)
    2e1a:	4b20      	ldr	r3, [pc, #128]	; (2e9c <_gclk_init_generators_by_fref+0xf8>)
    2e1c:	0011      	movs	r1, r2
    2e1e:	0018      	movs	r0, r3
    2e20:	4b1f      	ldr	r3, [pc, #124]	; (2ea0 <_gclk_init_generators_by_fref+0xfc>)
    2e22:	4798      	blx	r3
		hri_gclk_write_GENCTRL_reg(
    2e24:	4a25      	ldr	r2, [pc, #148]	; (2ebc <_gclk_init_generators_by_fref+0x118>)
    2e26:	4b1d      	ldr	r3, [pc, #116]	; (2e9c <_gclk_init_generators_by_fref+0xf8>)
    2e28:	0011      	movs	r1, r2
    2e2a:	0018      	movs	r0, r3
    2e2c:	4b1e      	ldr	r3, [pc, #120]	; (2ea8 <_gclk_init_generators_by_fref+0x104>)
    2e2e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SRC | GCLK_GENCTRL_ID(3));
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    2e30:	687b      	ldr	r3, [r7, #4]
    2e32:	2210      	movs	r2, #16
    2e34:	4013      	ands	r3, r2
    2e36:	d00c      	beq.n	2e52 <_gclk_init_generators_by_fref+0xae>
		hri_gclk_write_GENDIV_reg(GCLK, GCLK_GENDIV_DIV(CONF_GCLK_GEN_4_DIV) | GCLK_GENDIV_ID(4));
    2e38:	2382      	movs	r3, #130	; 0x82
    2e3a:	005b      	lsls	r3, r3, #1
    2e3c:	4a17      	ldr	r2, [pc, #92]	; (2e9c <_gclk_init_generators_by_fref+0xf8>)
    2e3e:	0019      	movs	r1, r3
    2e40:	0010      	movs	r0, r2
    2e42:	4b17      	ldr	r3, [pc, #92]	; (2ea0 <_gclk_init_generators_by_fref+0xfc>)
    2e44:	4798      	blx	r3
		hri_gclk_write_GENCTRL_reg(
    2e46:	4a1e      	ldr	r2, [pc, #120]	; (2ec0 <_gclk_init_generators_by_fref+0x11c>)
    2e48:	4b14      	ldr	r3, [pc, #80]	; (2e9c <_gclk_init_generators_by_fref+0xf8>)
    2e4a:	0011      	movs	r1, r2
    2e4c:	0018      	movs	r0, r3
    2e4e:	4b16      	ldr	r3, [pc, #88]	; (2ea8 <_gclk_init_generators_by_fref+0x104>)
    2e50:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SRC | GCLK_GENCTRL_ID(4));
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    2e52:	687b      	ldr	r3, [r7, #4]
    2e54:	2220      	movs	r2, #32
    2e56:	4013      	ands	r3, r2
    2e58:	d00b      	beq.n	2e72 <_gclk_init_generators_by_fref+0xce>
		hri_gclk_write_GENDIV_reg(GCLK, GCLK_GENDIV_DIV(CONF_GCLK_GEN_5_DIV) | GCLK_GENDIV_ID(5));
    2e5a:	4a1a      	ldr	r2, [pc, #104]	; (2ec4 <_gclk_init_generators_by_fref+0x120>)
    2e5c:	4b0f      	ldr	r3, [pc, #60]	; (2e9c <_gclk_init_generators_by_fref+0xf8>)
    2e5e:	0011      	movs	r1, r2
    2e60:	0018      	movs	r0, r3
    2e62:	4b0f      	ldr	r3, [pc, #60]	; (2ea0 <_gclk_init_generators_by_fref+0xfc>)
    2e64:	4798      	blx	r3
		hri_gclk_write_GENCTRL_reg(
    2e66:	4a18      	ldr	r2, [pc, #96]	; (2ec8 <_gclk_init_generators_by_fref+0x124>)
    2e68:	4b0c      	ldr	r3, [pc, #48]	; (2e9c <_gclk_init_generators_by_fref+0xf8>)
    2e6a:	0011      	movs	r1, r2
    2e6c:	0018      	movs	r0, r3
    2e6e:	4b0e      	ldr	r3, [pc, #56]	; (2ea8 <_gclk_init_generators_by_fref+0x104>)
    2e70:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SRC | GCLK_GENCTRL_ID(5));
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    2e72:	687b      	ldr	r3, [r7, #4]
    2e74:	2240      	movs	r2, #64	; 0x40
    2e76:	4013      	ands	r3, r2
    2e78:	d00c      	beq.n	2e94 <_gclk_init_generators_by_fref+0xf0>
		hri_gclk_write_GENDIV_reg(GCLK, GCLK_GENDIV_DIV(CONF_GCLK_GEN_6_DIV) | GCLK_GENDIV_ID(6));
    2e7a:	2383      	movs	r3, #131	; 0x83
    2e7c:	005b      	lsls	r3, r3, #1
    2e7e:	4a07      	ldr	r2, [pc, #28]	; (2e9c <_gclk_init_generators_by_fref+0xf8>)
    2e80:	0019      	movs	r1, r3
    2e82:	0010      	movs	r0, r2
    2e84:	4b06      	ldr	r3, [pc, #24]	; (2ea0 <_gclk_init_generators_by_fref+0xfc>)
    2e86:	4798      	blx	r3
		hri_gclk_write_GENCTRL_reg(
    2e88:	4a10      	ldr	r2, [pc, #64]	; (2ecc <_gclk_init_generators_by_fref+0x128>)
    2e8a:	4b04      	ldr	r3, [pc, #16]	; (2e9c <_gclk_init_generators_by_fref+0xf8>)
    2e8c:	0011      	movs	r1, r2
    2e8e:	0018      	movs	r0, r3
    2e90:	4b05      	ldr	r3, [pc, #20]	; (2ea8 <_gclk_init_generators_by_fref+0x104>)
    2e92:	4798      	blx	r3
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
    2e94:	46c0      	nop			; (mov r8, r8)
    2e96:	46bd      	mov	sp, r7
    2e98:	b002      	add	sp, #8
    2e9a:	bd80      	pop	{r7, pc}
    2e9c:	40000c00 	.word	0x40000c00
    2ea0:	00002d8d 	.word	0x00002d8d
    2ea4:	00290800 	.word	0x00290800
    2ea8:	00002d69 	.word	0x00002d69
    2eac:	00010601 	.word	0x00010601
    2eb0:	00000402 	.word	0x00000402
    2eb4:	00210602 	.word	0x00210602
    2eb8:	00000803 	.word	0x00000803
    2ebc:	00290603 	.word	0x00290603
    2ec0:	00090704 	.word	0x00090704
    2ec4:	00000305 	.word	0x00000305
    2ec8:	00010805 	.word	0x00010805
    2ecc:	00210406 	.word	0x00210406

00002ed0 <hri_pm_set_CPUSEL_CPUDIV_bf>:
{
	return ((Pm *)hw)->SLEEP.reg;
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
    2ed0:	b580      	push	{r7, lr}
    2ed2:	b082      	sub	sp, #8
    2ed4:	af00      	add	r7, sp, #0
    2ed6:	6078      	str	r0, [r7, #4]
    2ed8:	000a      	movs	r2, r1
    2eda:	1cfb      	adds	r3, r7, #3
    2edc:	701a      	strb	r2, [r3, #0]
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
    2ede:	687b      	ldr	r3, [r7, #4]
    2ee0:	7a1b      	ldrb	r3, [r3, #8]
    2ee2:	b2da      	uxtb	r2, r3
    2ee4:	1cfb      	adds	r3, r7, #3
    2ee6:	781b      	ldrb	r3, [r3, #0]
    2ee8:	2107      	movs	r1, #7
    2eea:	400b      	ands	r3, r1
    2eec:	b2db      	uxtb	r3, r3
    2eee:	4313      	orrs	r3, r2
    2ef0:	b2da      	uxtb	r2, r3
    2ef2:	687b      	ldr	r3, [r7, #4]
    2ef4:	721a      	strb	r2, [r3, #8]
	PM_CRITICAL_SECTION_LEAVE();
}
    2ef6:	46c0      	nop			; (mov r8, r8)
    2ef8:	46bd      	mov	sp, r7
    2efa:	b002      	add	sp, #8
    2efc:	bd80      	pop	{r7, pc}

00002efe <hri_pm_set_APBASEL_APBADIV_bf>:
{
	return ((Pm *)hw)->CPUSEL.reg;
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
    2efe:	b580      	push	{r7, lr}
    2f00:	b082      	sub	sp, #8
    2f02:	af00      	add	r7, sp, #0
    2f04:	6078      	str	r0, [r7, #4]
    2f06:	000a      	movs	r2, r1
    2f08:	1cfb      	adds	r3, r7, #3
    2f0a:	701a      	strb	r2, [r3, #0]
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
    2f0c:	687b      	ldr	r3, [r7, #4]
    2f0e:	7a5b      	ldrb	r3, [r3, #9]
    2f10:	b2da      	uxtb	r2, r3
    2f12:	1cfb      	adds	r3, r7, #3
    2f14:	781b      	ldrb	r3, [r3, #0]
    2f16:	2107      	movs	r1, #7
    2f18:	400b      	ands	r3, r1
    2f1a:	b2db      	uxtb	r3, r3
    2f1c:	4313      	orrs	r3, r2
    2f1e:	b2da      	uxtb	r2, r3
    2f20:	687b      	ldr	r3, [r7, #4]
    2f22:	725a      	strb	r2, [r3, #9]
	PM_CRITICAL_SECTION_LEAVE();
}
    2f24:	46c0      	nop			; (mov r8, r8)
    2f26:	46bd      	mov	sp, r7
    2f28:	b002      	add	sp, #8
    2f2a:	bd80      	pop	{r7, pc}

00002f2c <hri_pm_set_APBBSEL_APBBDIV_bf>:
{
	return ((Pm *)hw)->APBASEL.reg;
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
    2f2c:	b580      	push	{r7, lr}
    2f2e:	b082      	sub	sp, #8
    2f30:	af00      	add	r7, sp, #0
    2f32:	6078      	str	r0, [r7, #4]
    2f34:	000a      	movs	r2, r1
    2f36:	1cfb      	adds	r3, r7, #3
    2f38:	701a      	strb	r2, [r3, #0]
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
    2f3a:	687b      	ldr	r3, [r7, #4]
    2f3c:	7a9b      	ldrb	r3, [r3, #10]
    2f3e:	b2da      	uxtb	r2, r3
    2f40:	1cfb      	adds	r3, r7, #3
    2f42:	781b      	ldrb	r3, [r3, #0]
    2f44:	2107      	movs	r1, #7
    2f46:	400b      	ands	r3, r1
    2f48:	b2db      	uxtb	r3, r3
    2f4a:	4313      	orrs	r3, r2
    2f4c:	b2da      	uxtb	r2, r3
    2f4e:	687b      	ldr	r3, [r7, #4]
    2f50:	729a      	strb	r2, [r3, #10]
	PM_CRITICAL_SECTION_LEAVE();
}
    2f52:	46c0      	nop			; (mov r8, r8)
    2f54:	46bd      	mov	sp, r7
    2f56:	b002      	add	sp, #8
    2f58:	bd80      	pop	{r7, pc}

00002f5a <hri_pm_set_APBCSEL_APBCDIV_bf>:
{
	return ((Pm *)hw)->APBBSEL.reg;
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
    2f5a:	b580      	push	{r7, lr}
    2f5c:	b082      	sub	sp, #8
    2f5e:	af00      	add	r7, sp, #0
    2f60:	6078      	str	r0, [r7, #4]
    2f62:	000a      	movs	r2, r1
    2f64:	1cfb      	adds	r3, r7, #3
    2f66:	701a      	strb	r2, [r3, #0]
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
    2f68:	687b      	ldr	r3, [r7, #4]
    2f6a:	7adb      	ldrb	r3, [r3, #11]
    2f6c:	b2da      	uxtb	r2, r3
    2f6e:	1cfb      	adds	r3, r7, #3
    2f70:	781b      	ldrb	r3, [r3, #0]
    2f72:	2107      	movs	r1, #7
    2f74:	400b      	ands	r3, r1
    2f76:	b2db      	uxtb	r3, r3
    2f78:	4313      	orrs	r3, r2
    2f7a:	b2da      	uxtb	r2, r3
    2f7c:	687b      	ldr	r3, [r7, #4]
    2f7e:	72da      	strb	r2, [r3, #11]
	PM_CRITICAL_SECTION_LEAVE();
}
    2f80:	46c0      	nop			; (mov r8, r8)
    2f82:	46bd      	mov	sp, r7
    2f84:	b002      	add	sp, #8
    2f86:	bd80      	pop	{r7, pc}

00002f88 <_pm_init>:

/**
 * \brief Power Manager Init
 */
void _pm_init(void)
{
    2f88:	b580      	push	{r7, lr}
    2f8a:	af00      	add	r7, sp, #0
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
    2f8c:	4b0b      	ldr	r3, [pc, #44]	; (2fbc <_pm_init+0x34>)
    2f8e:	2100      	movs	r1, #0
    2f90:	0018      	movs	r0, r3
    2f92:	4b0b      	ldr	r3, [pc, #44]	; (2fc0 <_pm_init+0x38>)
    2f94:	4798      	blx	r3
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
    2f96:	4b09      	ldr	r3, [pc, #36]	; (2fbc <_pm_init+0x34>)
    2f98:	2100      	movs	r1, #0
    2f9a:	0018      	movs	r0, r3
    2f9c:	4b09      	ldr	r3, [pc, #36]	; (2fc4 <_pm_init+0x3c>)
    2f9e:	4798      	blx	r3
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
    2fa0:	4b06      	ldr	r3, [pc, #24]	; (2fbc <_pm_init+0x34>)
    2fa2:	2100      	movs	r1, #0
    2fa4:	0018      	movs	r0, r3
    2fa6:	4b08      	ldr	r3, [pc, #32]	; (2fc8 <_pm_init+0x40>)
    2fa8:	4798      	blx	r3
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
    2faa:	4b04      	ldr	r3, [pc, #16]	; (2fbc <_pm_init+0x34>)
    2fac:	2100      	movs	r1, #0
    2fae:	0018      	movs	r0, r3
    2fb0:	4b06      	ldr	r3, [pc, #24]	; (2fcc <_pm_init+0x44>)
    2fb2:	4798      	blx	r3
}
    2fb4:	46c0      	nop			; (mov r8, r8)
    2fb6:	46bd      	mov	sp, r7
    2fb8:	bd80      	pop	{r7, pc}
    2fba:	46c0      	nop			; (mov r8, r8)
    2fbc:	40000400 	.word	0x40000400
    2fc0:	00002ed1 	.word	0x00002ed1
    2fc4:	00002eff 	.word	0x00002eff
    2fc8:	00002f2d 	.word	0x00002f2d
    2fcc:	00002f5b 	.word	0x00002f5b

00002fd0 <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    2fd0:	b580      	push	{r7, lr}
    2fd2:	b082      	sub	sp, #8
    2fd4:	af00      	add	r7, sp, #0
    2fd6:	6078      	str	r0, [r7, #4]
    2fd8:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2fda:	46c0      	nop			; (mov r8, r8)
    2fdc:	687b      	ldr	r3, [r7, #4]
    2fde:	69db      	ldr	r3, [r3, #28]
    2fe0:	683a      	ldr	r2, [r7, #0]
    2fe2:	4013      	ands	r3, r2
    2fe4:	d1fa      	bne.n	2fdc <hri_sercomspi_wait_for_sync+0xc>
	};
}
    2fe6:	46c0      	nop			; (mov r8, r8)
    2fe8:	46bd      	mov	sp, r7
    2fea:	b002      	add	sp, #8
    2fec:	bd80      	pop	{r7, pc}

00002fee <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    2fee:	b580      	push	{r7, lr}
    2ff0:	b082      	sub	sp, #8
    2ff2:	af00      	add	r7, sp, #0
    2ff4:	6078      	str	r0, [r7, #4]
    2ff6:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    2ff8:	687b      	ldr	r3, [r7, #4]
    2ffa:	69db      	ldr	r3, [r3, #28]
    2ffc:	683a      	ldr	r2, [r7, #0]
    2ffe:	4013      	ands	r3, r2
    3000:	1e5a      	subs	r2, r3, #1
    3002:	4193      	sbcs	r3, r2
    3004:	b2db      	uxtb	r3, r3
}
    3006:	0018      	movs	r0, r3
    3008:	46bd      	mov	sp, r7
    300a:	b002      	add	sp, #8
    300c:	bd80      	pop	{r7, pc}

0000300e <hri_sercomusart_wait_for_sync>:

static inline void hri_sercomusart_wait_for_sync(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
    300e:	b580      	push	{r7, lr}
    3010:	b082      	sub	sp, #8
    3012:	af00      	add	r7, sp, #0
    3014:	6078      	str	r0, [r7, #4]
    3016:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    3018:	46c0      	nop			; (mov r8, r8)
    301a:	687b      	ldr	r3, [r7, #4]
    301c:	69db      	ldr	r3, [r3, #28]
    301e:	683a      	ldr	r2, [r7, #0]
    3020:	4013      	ands	r3, r2
    3022:	d1fa      	bne.n	301a <hri_sercomusart_wait_for_sync+0xc>
	};
}
    3024:	46c0      	nop			; (mov r8, r8)
    3026:	46bd      	mov	sp, r7
    3028:	b002      	add	sp, #8
    302a:	bd80      	pop	{r7, pc}

0000302c <hri_sercomusart_is_syncing>:

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
    302c:	b580      	push	{r7, lr}
    302e:	b082      	sub	sp, #8
    3030:	af00      	add	r7, sp, #0
    3032:	6078      	str	r0, [r7, #4]
    3034:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    3036:	687b      	ldr	r3, [r7, #4]
    3038:	69db      	ldr	r3, [r3, #28]
    303a:	683a      	ldr	r2, [r7, #0]
    303c:	4013      	ands	r3, r2
    303e:	1e5a      	subs	r2, r3, #1
    3040:	4193      	sbcs	r3, r2
    3042:	b2db      	uxtb	r3, r3
}
    3044:	0018      	movs	r0, r3
    3046:	46bd      	mov	sp, r7
    3048:	b002      	add	sp, #8
    304a:	bd80      	pop	{r7, pc}

0000304c <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    304c:	b580      	push	{r7, lr}
    304e:	b084      	sub	sp, #16
    3050:	af00      	add	r7, sp, #0
    3052:	6078      	str	r0, [r7, #4]
    3054:	000a      	movs	r2, r1
    3056:	1cfb      	adds	r3, r7, #3
    3058:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    305a:	230f      	movs	r3, #15
    305c:	18fb      	adds	r3, r7, r3
    305e:	687a      	ldr	r2, [r7, #4]
    3060:	7e12      	ldrb	r2, [r2, #24]
    3062:	701a      	strb	r2, [r3, #0]
	tmp &= mask;
    3064:	230f      	movs	r3, #15
    3066:	18fb      	adds	r3, r7, r3
    3068:	220f      	movs	r2, #15
    306a:	18ba      	adds	r2, r7, r2
    306c:	1cf9      	adds	r1, r7, #3
    306e:	7812      	ldrb	r2, [r2, #0]
    3070:	7809      	ldrb	r1, [r1, #0]
    3072:	400a      	ands	r2, r1
    3074:	701a      	strb	r2, [r3, #0]
	return tmp;
    3076:	230f      	movs	r3, #15
    3078:	18fb      	adds	r3, r7, r3
    307a:	781b      	ldrb	r3, [r3, #0]
}
    307c:	0018      	movs	r0, r3
    307e:	46bd      	mov	sp, r7
    3080:	b004      	add	sp, #16
    3082:	bd80      	pop	{r7, pc}

00003084 <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    3084:	b580      	push	{r7, lr}
    3086:	b082      	sub	sp, #8
    3088:	af00      	add	r7, sp, #0
    308a:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    308c:	687b      	ldr	r3, [r7, #4]
    308e:	7e1b      	ldrb	r3, [r3, #24]
    3090:	b2db      	uxtb	r3, r3
}
    3092:	0018      	movs	r0, r3
    3094:	46bd      	mov	sp, r7
    3096:	b002      	add	sp, #8
    3098:	bd80      	pop	{r7, pc}

0000309a <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    309a:	b580      	push	{r7, lr}
    309c:	b082      	sub	sp, #8
    309e:	af00      	add	r7, sp, #0
    30a0:	6078      	str	r0, [r7, #4]
    30a2:	000a      	movs	r2, r1
    30a4:	1cfb      	adds	r3, r7, #3
    30a6:	701a      	strb	r2, [r3, #0]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    30a8:	687b      	ldr	r3, [r7, #4]
    30aa:	1cfa      	adds	r2, r7, #3
    30ac:	7812      	ldrb	r2, [r2, #0]
    30ae:	761a      	strb	r2, [r3, #24]
}
    30b0:	46c0      	nop			; (mov r8, r8)
    30b2:	46bd      	mov	sp, r7
    30b4:	b002      	add	sp, #8
    30b6:	bd80      	pop	{r7, pc}

000030b8 <hri_sercomusart_get_interrupt_DRE_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
    30b8:	b580      	push	{r7, lr}
    30ba:	b082      	sub	sp, #8
    30bc:	af00      	add	r7, sp, #0
    30be:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    30c0:	687b      	ldr	r3, [r7, #4]
    30c2:	7e1b      	ldrb	r3, [r3, #24]
    30c4:	b2db      	uxtb	r3, r3
    30c6:	001a      	movs	r2, r3
    30c8:	2301      	movs	r3, #1
    30ca:	4013      	ands	r3, r2
    30cc:	1e5a      	subs	r2, r3, #1
    30ce:	4193      	sbcs	r3, r2
    30d0:	b2db      	uxtb	r3, r3
}
    30d2:	0018      	movs	r0, r3
    30d4:	46bd      	mov	sp, r7
    30d6:	b002      	add	sp, #8
    30d8:	bd80      	pop	{r7, pc}

000030da <hri_sercomusart_get_interrupt_TXC_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
}

static inline bool hri_sercomusart_get_interrupt_TXC_bit(const void *const hw)
{
    30da:	b580      	push	{r7, lr}
    30dc:	b082      	sub	sp, #8
    30de:	af00      	add	r7, sp, #0
    30e0:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    30e2:	687b      	ldr	r3, [r7, #4]
    30e4:	7e1b      	ldrb	r3, [r3, #24]
    30e6:	b2db      	uxtb	r3, r3
    30e8:	085b      	lsrs	r3, r3, #1
    30ea:	2201      	movs	r2, #1
    30ec:	4013      	ands	r3, r2
    30ee:	1e5a      	subs	r2, r3, #1
    30f0:	4193      	sbcs	r3, r2
    30f2:	b2db      	uxtb	r3, r3
}
    30f4:	0018      	movs	r0, r3
    30f6:	46bd      	mov	sp, r7
    30f8:	b002      	add	sp, #8
    30fa:	bd80      	pop	{r7, pc}

000030fc <hri_sercomusart_get_interrupt_RXC_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
}

static inline bool hri_sercomusart_get_interrupt_RXC_bit(const void *const hw)
{
    30fc:	b580      	push	{r7, lr}
    30fe:	b082      	sub	sp, #8
    3100:	af00      	add	r7, sp, #0
    3102:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    3104:	687b      	ldr	r3, [r7, #4]
    3106:	7e1b      	ldrb	r3, [r3, #24]
    3108:	b2db      	uxtb	r3, r3
    310a:	089b      	lsrs	r3, r3, #2
    310c:	2201      	movs	r2, #1
    310e:	4013      	ands	r3, r2
    3110:	1e5a      	subs	r2, r3, #1
    3112:	4193      	sbcs	r3, r2
    3114:	b2db      	uxtb	r3, r3
}
    3116:	0018      	movs	r0, r3
    3118:	46bd      	mov	sp, r7
    311a:	b002      	add	sp, #8
    311c:	bd80      	pop	{r7, pc}
	...

00003120 <hri_sercomspi_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_SPI_CTRLA_SWRST) >> SERCOM_SPI_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
    3120:	b580      	push	{r7, lr}
    3122:	b082      	sub	sp, #8
    3124:	af00      	add	r7, sp, #0
    3126:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    3128:	687b      	ldr	r3, [r7, #4]
    312a:	681b      	ldr	r3, [r3, #0]
    312c:	2202      	movs	r2, #2
    312e:	431a      	orrs	r2, r3
    3130:	687b      	ldr	r3, [r7, #4]
    3132:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    3134:	687b      	ldr	r3, [r7, #4]
    3136:	2103      	movs	r1, #3
    3138:	0018      	movs	r0, r3
    313a:	4b03      	ldr	r3, [pc, #12]	; (3148 <hri_sercomspi_set_CTRLA_ENABLE_bit+0x28>)
    313c:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    313e:	46c0      	nop			; (mov r8, r8)
    3140:	46bd      	mov	sp, r7
    3142:	b002      	add	sp, #8
    3144:	bd80      	pop	{r7, pc}
    3146:	46c0      	nop			; (mov r8, r8)
    3148:	00002fd1 	.word	0x00002fd1

0000314c <hri_sercomspi_get_CTRLA_ENABLE_bit>:

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    314c:	b580      	push	{r7, lr}
    314e:	b084      	sub	sp, #16
    3150:	af00      	add	r7, sp, #0
    3152:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    3154:	687b      	ldr	r3, [r7, #4]
    3156:	2103      	movs	r1, #3
    3158:	0018      	movs	r0, r3
    315a:	4b09      	ldr	r3, [pc, #36]	; (3180 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    315c:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    315e:	687b      	ldr	r3, [r7, #4]
    3160:	681b      	ldr	r3, [r3, #0]
    3162:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    3164:	68fb      	ldr	r3, [r7, #12]
    3166:	085b      	lsrs	r3, r3, #1
    3168:	2201      	movs	r2, #1
    316a:	4013      	ands	r3, r2
    316c:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    316e:	68fb      	ldr	r3, [r7, #12]
    3170:	1e5a      	subs	r2, r3, #1
    3172:	4193      	sbcs	r3, r2
    3174:	b2db      	uxtb	r3, r3
}
    3176:	0018      	movs	r0, r3
    3178:	46bd      	mov	sp, r7
    317a:	b004      	add	sp, #16
    317c:	bd80      	pop	{r7, pc}
    317e:	46c0      	nop			; (mov r8, r8)
    3180:	00002fd1 	.word	0x00002fd1

00003184 <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    3184:	b580      	push	{r7, lr}
    3186:	b082      	sub	sp, #8
    3188:	af00      	add	r7, sp, #0
    318a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    318c:	687b      	ldr	r3, [r7, #4]
    318e:	681b      	ldr	r3, [r3, #0]
    3190:	2202      	movs	r2, #2
    3192:	4393      	bics	r3, r2
    3194:	001a      	movs	r2, r3
    3196:	687b      	ldr	r3, [r7, #4]
    3198:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    319a:	687b      	ldr	r3, [r7, #4]
    319c:	2103      	movs	r1, #3
    319e:	0018      	movs	r0, r3
    31a0:	4b02      	ldr	r3, [pc, #8]	; (31ac <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x28>)
    31a2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    31a4:	46c0      	nop			; (mov r8, r8)
    31a6:	46bd      	mov	sp, r7
    31a8:	b002      	add	sp, #8
    31aa:	bd80      	pop	{r7, pc}
    31ac:	00002fd1 	.word	0x00002fd1

000031b0 <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    31b0:	b580      	push	{r7, lr}
    31b2:	b084      	sub	sp, #16
    31b4:	af00      	add	r7, sp, #0
    31b6:	6078      	str	r0, [r7, #4]
    31b8:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    31ba:	687b      	ldr	r3, [r7, #4]
    31bc:	2103      	movs	r1, #3
    31be:	0018      	movs	r0, r3
    31c0:	4b06      	ldr	r3, [pc, #24]	; (31dc <hri_sercomspi_get_CTRLA_reg+0x2c>)
    31c2:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    31c4:	687b      	ldr	r3, [r7, #4]
    31c6:	681b      	ldr	r3, [r3, #0]
    31c8:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    31ca:	68fb      	ldr	r3, [r7, #12]
    31cc:	683a      	ldr	r2, [r7, #0]
    31ce:	4013      	ands	r3, r2
    31d0:	60fb      	str	r3, [r7, #12]
	return tmp;
    31d2:	68fb      	ldr	r3, [r7, #12]
}
    31d4:	0018      	movs	r0, r3
    31d6:	46bd      	mov	sp, r7
    31d8:	b004      	add	sp, #16
    31da:	bd80      	pop	{r7, pc}
    31dc:	00002fd1 	.word	0x00002fd1

000031e0 <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    31e0:	b580      	push	{r7, lr}
    31e2:	b082      	sub	sp, #8
    31e4:	af00      	add	r7, sp, #0
    31e6:	6078      	str	r0, [r7, #4]
    31e8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    31ea:	687b      	ldr	r3, [r7, #4]
    31ec:	683a      	ldr	r2, [r7, #0]
    31ee:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    31f0:	687b      	ldr	r3, [r7, #4]
    31f2:	2103      	movs	r1, #3
    31f4:	0018      	movs	r0, r3
    31f6:	4b03      	ldr	r3, [pc, #12]	; (3204 <hri_sercomspi_write_CTRLA_reg+0x24>)
    31f8:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    31fa:	46c0      	nop			; (mov r8, r8)
    31fc:	46bd      	mov	sp, r7
    31fe:	b002      	add	sp, #8
    3200:	bd80      	pop	{r7, pc}
    3202:	46c0      	nop			; (mov r8, r8)
    3204:	00002fd1 	.word	0x00002fd1

00003208 <hri_sercomusart_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_USART_CTRLA_SWRST) >> SERCOM_USART_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomusart_set_CTRLA_ENABLE_bit(const void *const hw)
{
    3208:	b580      	push	{r7, lr}
    320a:	b082      	sub	sp, #8
    320c:	af00      	add	r7, sp, #0
    320e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    3210:	687b      	ldr	r3, [r7, #4]
    3212:	681b      	ldr	r3, [r3, #0]
    3214:	2202      	movs	r2, #2
    3216:	431a      	orrs	r2, r3
    3218:	687b      	ldr	r3, [r7, #4]
    321a:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    321c:	687b      	ldr	r3, [r7, #4]
    321e:	2103      	movs	r1, #3
    3220:	0018      	movs	r0, r3
    3222:	4b03      	ldr	r3, [pc, #12]	; (3230 <hri_sercomusart_set_CTRLA_ENABLE_bit+0x28>)
    3224:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3226:	46c0      	nop			; (mov r8, r8)
    3228:	46bd      	mov	sp, r7
    322a:	b002      	add	sp, #8
    322c:	bd80      	pop	{r7, pc}
    322e:	46c0      	nop			; (mov r8, r8)
    3230:	0000300f 	.word	0x0000300f

00003234 <hri_sercomusart_clear_CTRLA_ENABLE_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomusart_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    3234:	b580      	push	{r7, lr}
    3236:	b082      	sub	sp, #8
    3238:	af00      	add	r7, sp, #0
    323a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    323c:	687b      	ldr	r3, [r7, #4]
    323e:	681b      	ldr	r3, [r3, #0]
    3240:	2202      	movs	r2, #2
    3242:	4393      	bics	r3, r2
    3244:	001a      	movs	r2, r3
    3246:	687b      	ldr	r3, [r7, #4]
    3248:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    324a:	687b      	ldr	r3, [r7, #4]
    324c:	2103      	movs	r1, #3
    324e:	0018      	movs	r0, r3
    3250:	4b02      	ldr	r3, [pc, #8]	; (325c <hri_sercomusart_clear_CTRLA_ENABLE_bit+0x28>)
    3252:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3254:	46c0      	nop			; (mov r8, r8)
    3256:	46bd      	mov	sp, r7
    3258:	b002      	add	sp, #8
    325a:	bd80      	pop	{r7, pc}
    325c:	0000300f 	.word	0x0000300f

00003260 <hri_sercomusart_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
    3260:	b580      	push	{r7, lr}
    3262:	b084      	sub	sp, #16
    3264:	af00      	add	r7, sp, #0
    3266:	6078      	str	r0, [r7, #4]
    3268:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    326a:	687b      	ldr	r3, [r7, #4]
    326c:	2103      	movs	r1, #3
    326e:	0018      	movs	r0, r3
    3270:	4b06      	ldr	r3, [pc, #24]	; (328c <hri_sercomusart_get_CTRLA_reg+0x2c>)
    3272:	4798      	blx	r3
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    3274:	687b      	ldr	r3, [r7, #4]
    3276:	681b      	ldr	r3, [r3, #0]
    3278:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    327a:	68fb      	ldr	r3, [r7, #12]
    327c:	683a      	ldr	r2, [r7, #0]
    327e:	4013      	ands	r3, r2
    3280:	60fb      	str	r3, [r7, #12]
	return tmp;
    3282:	68fb      	ldr	r3, [r7, #12]
}
    3284:	0018      	movs	r0, r3
    3286:	46bd      	mov	sp, r7
    3288:	b004      	add	sp, #16
    328a:	bd80      	pop	{r7, pc}
    328c:	0000300f 	.word	0x0000300f

00003290 <hri_sercomusart_write_CTRLA_reg>:

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
    3290:	b580      	push	{r7, lr}
    3292:	b082      	sub	sp, #8
    3294:	af00      	add	r7, sp, #0
    3296:	6078      	str	r0, [r7, #4]
    3298:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    329a:	687b      	ldr	r3, [r7, #4]
    329c:	683a      	ldr	r2, [r7, #0]
    329e:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    32a0:	687b      	ldr	r3, [r7, #4]
    32a2:	2103      	movs	r1, #3
    32a4:	0018      	movs	r0, r3
    32a6:	4b03      	ldr	r3, [pc, #12]	; (32b4 <hri_sercomusart_write_CTRLA_reg+0x24>)
    32a8:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    32aa:	46c0      	nop			; (mov r8, r8)
    32ac:	46bd      	mov	sp, r7
    32ae:	b002      	add	sp, #8
    32b0:	bd80      	pop	{r7, pc}
    32b2:	46c0      	nop			; (mov r8, r8)
    32b4:	0000300f 	.word	0x0000300f

000032b8 <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    32b8:	b580      	push	{r7, lr}
    32ba:	b082      	sub	sp, #8
    32bc:	af00      	add	r7, sp, #0
    32be:	6078      	str	r0, [r7, #4]
    32c0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    32c2:	687b      	ldr	r3, [r7, #4]
    32c4:	683a      	ldr	r2, [r7, #0]
    32c6:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    32c8:	687b      	ldr	r3, [r7, #4]
    32ca:	2107      	movs	r1, #7
    32cc:	0018      	movs	r0, r3
    32ce:	4b03      	ldr	r3, [pc, #12]	; (32dc <hri_sercomspi_write_CTRLB_reg+0x24>)
    32d0:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    32d2:	46c0      	nop			; (mov r8, r8)
    32d4:	46bd      	mov	sp, r7
    32d6:	b002      	add	sp, #8
    32d8:	bd80      	pop	{r7, pc}
    32da:	46c0      	nop			; (mov r8, r8)
    32dc:	00002fd1 	.word	0x00002fd1

000032e0 <hri_sercomusart_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
    32e0:	b580      	push	{r7, lr}
    32e2:	b082      	sub	sp, #8
    32e4:	af00      	add	r7, sp, #0
    32e6:	6078      	str	r0, [r7, #4]
    32e8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    32ea:	687b      	ldr	r3, [r7, #4]
    32ec:	683a      	ldr	r2, [r7, #0]
    32ee:	605a      	str	r2, [r3, #4]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_MASK);
    32f0:	687b      	ldr	r3, [r7, #4]
    32f2:	2107      	movs	r1, #7
    32f4:	0018      	movs	r0, r3
    32f6:	4b03      	ldr	r3, [pc, #12]	; (3304 <hri_sercomusart_write_CTRLB_reg+0x24>)
    32f8:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    32fa:	46c0      	nop			; (mov r8, r8)
    32fc:	46bd      	mov	sp, r7
    32fe:	b002      	add	sp, #8
    3300:	bd80      	pop	{r7, pc}
    3302:	46c0      	nop			; (mov r8, r8)
    3304:	0000300f 	.word	0x0000300f

00003308 <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    3308:	b580      	push	{r7, lr}
    330a:	b082      	sub	sp, #8
    330c:	af00      	add	r7, sp, #0
    330e:	6078      	str	r0, [r7, #4]
    3310:	000a      	movs	r2, r1
    3312:	1cfb      	adds	r3, r7, #3
    3314:	701a      	strb	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    3316:	687b      	ldr	r3, [r7, #4]
    3318:	1cfa      	adds	r2, r7, #3
    331a:	7812      	ldrb	r2, [r2, #0]
    331c:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    331e:	46c0      	nop			; (mov r8, r8)
    3320:	46bd      	mov	sp, r7
    3322:	b002      	add	sp, #8
    3324:	bd80      	pop	{r7, pc}

00003326 <hri_sercomusart_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
    3326:	b580      	push	{r7, lr}
    3328:	b082      	sub	sp, #8
    332a:	af00      	add	r7, sp, #0
    332c:	6078      	str	r0, [r7, #4]
    332e:	000a      	movs	r2, r1
    3330:	1cbb      	adds	r3, r7, #2
    3332:	801a      	strh	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    3334:	687b      	ldr	r3, [r7, #4]
    3336:	1cba      	adds	r2, r7, #2
    3338:	8812      	ldrh	r2, [r2, #0]
    333a:	819a      	strh	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    333c:	46c0      	nop			; (mov r8, r8)
    333e:	46bd      	mov	sp, r7
    3340:	b002      	add	sp, #8
    3342:	bd80      	pop	{r7, pc}

00003344 <hri_sercomusart_write_RXPL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
    3344:	b580      	push	{r7, lr}
    3346:	b082      	sub	sp, #8
    3348:	af00      	add	r7, sp, #0
    334a:	6078      	str	r0, [r7, #4]
    334c:	000a      	movs	r2, r1
    334e:	1cfb      	adds	r3, r7, #3
    3350:	701a      	strb	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    3352:	687b      	ldr	r3, [r7, #4]
    3354:	1cfa      	adds	r2, r7, #3
    3356:	7812      	ldrb	r2, [r2, #0]
    3358:	739a      	strb	r2, [r3, #14]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    335a:	46c0      	nop			; (mov r8, r8)
    335c:	46bd      	mov	sp, r7
    335e:	b002      	add	sp, #8
    3360:	bd80      	pop	{r7, pc}

00003362 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    3362:	b580      	push	{r7, lr}
    3364:	b082      	sub	sp, #8
    3366:	af00      	add	r7, sp, #0
    3368:	6078      	str	r0, [r7, #4]
    336a:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    336c:	687b      	ldr	r3, [r7, #4]
    336e:	683a      	ldr	r2, [r7, #0]
    3370:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3372:	46c0      	nop			; (mov r8, r8)
    3374:	46bd      	mov	sp, r7
    3376:	b002      	add	sp, #8
    3378:	bd80      	pop	{r7, pc}

0000337a <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    337a:	b580      	push	{r7, lr}
    337c:	b082      	sub	sp, #8
    337e:	af00      	add	r7, sp, #0
    3380:	6078      	str	r0, [r7, #4]
    3382:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    3384:	687b      	ldr	r3, [r7, #4]
    3386:	683a      	ldr	r2, [r7, #0]
    3388:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    338a:	46c0      	nop			; (mov r8, r8)
    338c:	46bd      	mov	sp, r7
    338e:	b002      	add	sp, #8
    3390:	bd80      	pop	{r7, pc}

00003392 <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    3392:	b580      	push	{r7, lr}
    3394:	b082      	sub	sp, #8
    3396:	af00      	add	r7, sp, #0
    3398:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    339a:	687b      	ldr	r3, [r7, #4]
    339c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    339e:	0018      	movs	r0, r3
    33a0:	46bd      	mov	sp, r7
    33a2:	b002      	add	sp, #8
    33a4:	bd80      	pop	{r7, pc}

000033a6 <hri_sercomusart_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_DATA_reg(const void *const hw, hri_sercomusart_data_reg_t data)
{
    33a6:	b580      	push	{r7, lr}
    33a8:	b082      	sub	sp, #8
    33aa:	af00      	add	r7, sp, #0
    33ac:	6078      	str	r0, [r7, #4]
    33ae:	000a      	movs	r2, r1
    33b0:	1cbb      	adds	r3, r7, #2
    33b2:	801a      	strh	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DATA.reg = data;
    33b4:	687b      	ldr	r3, [r7, #4]
    33b6:	1cba      	adds	r2, r7, #2
    33b8:	8812      	ldrh	r2, [r2, #0]
    33ba:	851a      	strh	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    33bc:	46c0      	nop			; (mov r8, r8)
    33be:	46bd      	mov	sp, r7
    33c0:	b002      	add	sp, #8
    33c2:	bd80      	pop	{r7, pc}

000033c4 <hri_sercomusart_read_DATA_reg>:
	((Sercom *)hw)->USART.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_data_reg_t hri_sercomusart_read_DATA_reg(const void *const hw)
{
    33c4:	b580      	push	{r7, lr}
    33c6:	b082      	sub	sp, #8
    33c8:	af00      	add	r7, sp, #0
    33ca:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->USART.DATA.reg;
    33cc:	687b      	ldr	r3, [r7, #4]
    33ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    33d0:	b29b      	uxth	r3, r3
}
    33d2:	0018      	movs	r0, r3
    33d4:	46bd      	mov	sp, r7
    33d6:	b002      	add	sp, #8
    33d8:	bd80      	pop	{r7, pc}

000033da <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    33da:	b580      	push	{r7, lr}
    33dc:	b082      	sub	sp, #8
    33de:	af00      	add	r7, sp, #0
    33e0:	6078      	str	r0, [r7, #4]
    33e2:	000a      	movs	r2, r1
    33e4:	1cfb      	adds	r3, r7, #3
    33e6:	701a      	strb	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    33e8:	687b      	ldr	r3, [r7, #4]
    33ea:	1cfa      	adds	r2, r7, #3
    33ec:	2130      	movs	r1, #48	; 0x30
    33ee:	7812      	ldrb	r2, [r2, #0]
    33f0:	545a      	strb	r2, [r3, r1]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    33f2:	46c0      	nop			; (mov r8, r8)
    33f4:	46bd      	mov	sp, r7
    33f6:	b002      	add	sp, #8
    33f8:	bd80      	pop	{r7, pc}

000033fa <hri_sercomusart_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
    33fa:	b580      	push	{r7, lr}
    33fc:	b082      	sub	sp, #8
    33fe:	af00      	add	r7, sp, #0
    3400:	6078      	str	r0, [r7, #4]
    3402:	000a      	movs	r2, r1
    3404:	1cfb      	adds	r3, r7, #3
    3406:	701a      	strb	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    3408:	687b      	ldr	r3, [r7, #4]
    340a:	1cfa      	adds	r2, r7, #3
    340c:	2130      	movs	r1, #48	; 0x30
    340e:	7812      	ldrb	r2, [r2, #0]
    3410:	545a      	strb	r2, [r3, r1]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3412:	46c0      	nop			; (mov r8, r8)
    3414:	46bd      	mov	sp, r7
    3416:	b002      	add	sp, #8
    3418:	bd80      	pop	{r7, pc}

0000341a <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    341a:	b580      	push	{r7, lr}
    341c:	b082      	sub	sp, #8
    341e:	af00      	add	r7, sp, #0
    3420:	6078      	str	r0, [r7, #4]
    3422:	000a      	movs	r2, r1
    3424:	1cbb      	adds	r3, r7, #2
    3426:	801a      	strh	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    3428:	687b      	ldr	r3, [r7, #4]
    342a:	1cba      	adds	r2, r7, #2
    342c:	8812      	ldrh	r2, [r2, #0]
    342e:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3430:	46c0      	nop			; (mov r8, r8)
    3432:	46bd      	mov	sp, r7
    3434:	b002      	add	sp, #8
    3436:	bd80      	pop	{r7, pc}

00003438 <_usart_sync_init>:

/**
 * \brief Initialize synchronous SERCOM USART
 */
int32_t _usart_sync_init(struct _usart_sync_device *const device, void *const hw)
{
    3438:	b580      	push	{r7, lr}
    343a:	b082      	sub	sp, #8
    343c:	af00      	add	r7, sp, #0
    343e:	6078      	str	r0, [r7, #4]
    3440:	6039      	str	r1, [r7, #0]
	ASSERT(device);
    3442:	687b      	ldr	r3, [r7, #4]
    3444:	1e5a      	subs	r2, r3, #1
    3446:	4193      	sbcs	r3, r2
    3448:	b2db      	uxtb	r3, r3
    344a:	4908      	ldr	r1, [pc, #32]	; (346c <_usart_sync_init+0x34>)
    344c:	22b4      	movs	r2, #180	; 0xb4
    344e:	0018      	movs	r0, r3
    3450:	4b07      	ldr	r3, [pc, #28]	; (3470 <_usart_sync_init+0x38>)
    3452:	4798      	blx	r3

	device->hw = hw;
    3454:	687b      	ldr	r3, [r7, #4]
    3456:	683a      	ldr	r2, [r7, #0]
    3458:	601a      	str	r2, [r3, #0]

	return _usart_init(hw);
    345a:	683b      	ldr	r3, [r7, #0]
    345c:	0018      	movs	r0, r3
    345e:	4b05      	ldr	r3, [pc, #20]	; (3474 <_usart_sync_init+0x3c>)
    3460:	4798      	blx	r3
    3462:	0003      	movs	r3, r0
}
    3464:	0018      	movs	r0, r3
    3466:	46bd      	mov	sp, r7
    3468:	b002      	add	sp, #8
    346a:	bd80      	pop	{r7, pc}
    346c:	000121f4 	.word	0x000121f4
    3470:	00002a9d 	.word	0x00002a9d
    3474:	000035f1 	.word	0x000035f1

00003478 <_usart_sync_enable>:

/**
 * \brief Enable SERCOM module
 */
void _usart_sync_enable(struct _usart_sync_device *const device)
{
    3478:	b580      	push	{r7, lr}
    347a:	b082      	sub	sp, #8
    347c:	af00      	add	r7, sp, #0
    347e:	6078      	str	r0, [r7, #4]
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    3480:	687b      	ldr	r3, [r7, #4]
    3482:	681b      	ldr	r3, [r3, #0]
    3484:	0018      	movs	r0, r3
    3486:	4b03      	ldr	r3, [pc, #12]	; (3494 <_usart_sync_enable+0x1c>)
    3488:	4798      	blx	r3
}
    348a:	46c0      	nop			; (mov r8, r8)
    348c:	46bd      	mov	sp, r7
    348e:	b002      	add	sp, #8
    3490:	bd80      	pop	{r7, pc}
    3492:	46c0      	nop			; (mov r8, r8)
    3494:	00003209 	.word	0x00003209

00003498 <_usart_sync_write_byte>:

/**
 * \brief Write a byte to the given SERCOM USART instance
 */
void _usart_sync_write_byte(struct _usart_sync_device *const device, uint8_t data)
{
    3498:	b580      	push	{r7, lr}
    349a:	b082      	sub	sp, #8
    349c:	af00      	add	r7, sp, #0
    349e:	6078      	str	r0, [r7, #4]
    34a0:	000a      	movs	r2, r1
    34a2:	1cfb      	adds	r3, r7, #3
    34a4:	701a      	strb	r2, [r3, #0]
	hri_sercomusart_write_DATA_reg(device->hw, data);
    34a6:	687b      	ldr	r3, [r7, #4]
    34a8:	681a      	ldr	r2, [r3, #0]
    34aa:	1cfb      	adds	r3, r7, #3
    34ac:	781b      	ldrb	r3, [r3, #0]
    34ae:	b29b      	uxth	r3, r3
    34b0:	0019      	movs	r1, r3
    34b2:	0010      	movs	r0, r2
    34b4:	4b02      	ldr	r3, [pc, #8]	; (34c0 <_usart_sync_write_byte+0x28>)
    34b6:	4798      	blx	r3
}
    34b8:	46c0      	nop			; (mov r8, r8)
    34ba:	46bd      	mov	sp, r7
    34bc:	b002      	add	sp, #8
    34be:	bd80      	pop	{r7, pc}
    34c0:	000033a7 	.word	0x000033a7

000034c4 <_usart_sync_read_byte>:

/**
 * \brief Read a byte from the given SERCOM USART instance
 */
uint8_t _usart_sync_read_byte(const struct _usart_sync_device *const device)
{
    34c4:	b580      	push	{r7, lr}
    34c6:	b082      	sub	sp, #8
    34c8:	af00      	add	r7, sp, #0
    34ca:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_read_DATA_reg(device->hw);
    34cc:	687b      	ldr	r3, [r7, #4]
    34ce:	681b      	ldr	r3, [r3, #0]
    34d0:	0018      	movs	r0, r3
    34d2:	4b04      	ldr	r3, [pc, #16]	; (34e4 <_usart_sync_read_byte+0x20>)
    34d4:	4798      	blx	r3
    34d6:	0003      	movs	r3, r0
    34d8:	b2db      	uxtb	r3, r3
}
    34da:	0018      	movs	r0, r3
    34dc:	46bd      	mov	sp, r7
    34de:	b002      	add	sp, #8
    34e0:	bd80      	pop	{r7, pc}
    34e2:	46c0      	nop			; (mov r8, r8)
    34e4:	000033c5 	.word	0x000033c5

000034e8 <_usart_sync_is_ready_to_send>:

/**
 * \brief Check if USART is ready to send next byte
 */
bool _usart_sync_is_ready_to_send(const struct _usart_sync_device *const device)
{
    34e8:	b580      	push	{r7, lr}
    34ea:	b082      	sub	sp, #8
    34ec:	af00      	add	r7, sp, #0
    34ee:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    34f0:	687b      	ldr	r3, [r7, #4]
    34f2:	681b      	ldr	r3, [r3, #0]
    34f4:	0018      	movs	r0, r3
    34f6:	4b03      	ldr	r3, [pc, #12]	; (3504 <_usart_sync_is_ready_to_send+0x1c>)
    34f8:	4798      	blx	r3
    34fa:	0003      	movs	r3, r0
}
    34fc:	0018      	movs	r0, r3
    34fe:	46bd      	mov	sp, r7
    3500:	b002      	add	sp, #8
    3502:	bd80      	pop	{r7, pc}
    3504:	000030b9 	.word	0x000030b9

00003508 <_usart_sync_is_transmit_done>:

/**
 * \brief Check if USART transmission complete
 */
bool _usart_sync_is_transmit_done(const struct _usart_sync_device *const device)
{
    3508:	b580      	push	{r7, lr}
    350a:	b082      	sub	sp, #8
    350c:	af00      	add	r7, sp, #0
    350e:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    3510:	687b      	ldr	r3, [r7, #4]
    3512:	681b      	ldr	r3, [r3, #0]
    3514:	0018      	movs	r0, r3
    3516:	4b03      	ldr	r3, [pc, #12]	; (3524 <_usart_sync_is_transmit_done+0x1c>)
    3518:	4798      	blx	r3
    351a:	0003      	movs	r3, r0
}
    351c:	0018      	movs	r0, r3
    351e:	46bd      	mov	sp, r7
    3520:	b002      	add	sp, #8
    3522:	bd80      	pop	{r7, pc}
    3524:	000030db 	.word	0x000030db

00003528 <_usart_sync_is_byte_received>:

/**
 * \brief Check if there is data received by USART
 */
bool _usart_sync_is_byte_received(const struct _usart_sync_device *const device)
{
    3528:	b580      	push	{r7, lr}
    352a:	b082      	sub	sp, #8
    352c:	af00      	add	r7, sp, #0
    352e:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    3530:	687b      	ldr	r3, [r7, #4]
    3532:	681b      	ldr	r3, [r3, #0]
    3534:	0018      	movs	r0, r3
    3536:	4b03      	ldr	r3, [pc, #12]	; (3544 <_usart_sync_is_byte_received+0x1c>)
    3538:	4798      	blx	r3
    353a:	0003      	movs	r3, r0
}
    353c:	0018      	movs	r0, r3
    353e:	46bd      	mov	sp, r7
    3540:	b002      	add	sp, #8
    3542:	bd80      	pop	{r7, pc}
    3544:	000030fd 	.word	0x000030fd

00003548 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    3548:	b580      	push	{r7, lr}
    354a:	b082      	sub	sp, #8
    354c:	af00      	add	r7, sp, #0
    354e:	6078      	str	r0, [r7, #4]
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    3550:	687b      	ldr	r3, [r7, #4]
    3552:	4a04      	ldr	r2, [pc, #16]	; (3564 <_sercom_get_hardware_index+0x1c>)
    3554:	4694      	mov	ip, r2
    3556:	4463      	add	r3, ip
    3558:	0a9b      	lsrs	r3, r3, #10
    355a:	b2db      	uxtb	r3, r3
}
    355c:	0018      	movs	r0, r3
    355e:	46bd      	mov	sp, r7
    3560:	b002      	add	sp, #8
    3562:	bd80      	pop	{r7, pc}
    3564:	bdfff800 	.word	0xbdfff800

00003568 <_get_sercom_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static uint8_t _get_sercom_index(const void *const hw)
{
    3568:	b590      	push	{r4, r7, lr}
    356a:	b085      	sub	sp, #20
    356c:	af00      	add	r7, sp, #0
    356e:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    3570:	230e      	movs	r3, #14
    3572:	18fc      	adds	r4, r7, r3
    3574:	687b      	ldr	r3, [r7, #4]
    3576:	0018      	movs	r0, r3
    3578:	4b18      	ldr	r3, [pc, #96]	; (35dc <_get_sercom_index+0x74>)
    357a:	4798      	blx	r3
    357c:	0003      	movs	r3, r0
    357e:	7023      	strb	r3, [r4, #0]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    3580:	230f      	movs	r3, #15
    3582:	18fb      	adds	r3, r7, r3
    3584:	2200      	movs	r2, #0
    3586:	701a      	strb	r2, [r3, #0]
    3588:	e018      	b.n	35bc <_get_sercom_index+0x54>
		if (_usarts[i].number == sercom_offset) {
    358a:	230f      	movs	r3, #15
    358c:	18fb      	adds	r3, r7, r3
    358e:	781a      	ldrb	r2, [r3, #0]
    3590:	4913      	ldr	r1, [pc, #76]	; (35e0 <_get_sercom_index+0x78>)
    3592:	0013      	movs	r3, r2
    3594:	009b      	lsls	r3, r3, #2
    3596:	189b      	adds	r3, r3, r2
    3598:	009b      	lsls	r3, r3, #2
    359a:	5c5b      	ldrb	r3, [r3, r1]
    359c:	220e      	movs	r2, #14
    359e:	18ba      	adds	r2, r7, r2
    35a0:	7812      	ldrb	r2, [r2, #0]
    35a2:	429a      	cmp	r2, r3
    35a4:	d103      	bne.n	35ae <_get_sercom_index+0x46>
			return i;
    35a6:	230f      	movs	r3, #15
    35a8:	18fb      	adds	r3, r7, r3
    35aa:	781b      	ldrb	r3, [r3, #0]
    35ac:	e012      	b.n	35d4 <_get_sercom_index+0x6c>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    35ae:	230f      	movs	r3, #15
    35b0:	18fb      	adds	r3, r7, r3
    35b2:	781a      	ldrb	r2, [r3, #0]
    35b4:	230f      	movs	r3, #15
    35b6:	18fb      	adds	r3, r7, r3
    35b8:	3201      	adds	r2, #1
    35ba:	701a      	strb	r2, [r3, #0]
    35bc:	230f      	movs	r3, #15
    35be:	18fb      	adds	r3, r7, r3
    35c0:	781b      	ldrb	r3, [r3, #0]
    35c2:	2b00      	cmp	r3, #0
    35c4:	d0e1      	beq.n	358a <_get_sercom_index+0x22>
		}
	}

	ASSERT(false);
    35c6:	4a07      	ldr	r2, [pc, #28]	; (35e4 <_get_sercom_index+0x7c>)
    35c8:	4b07      	ldr	r3, [pc, #28]	; (35e8 <_get_sercom_index+0x80>)
    35ca:	0019      	movs	r1, r3
    35cc:	2000      	movs	r0, #0
    35ce:	4b07      	ldr	r3, [pc, #28]	; (35ec <_get_sercom_index+0x84>)
    35d0:	4798      	blx	r3
	return 0;
    35d2:	2300      	movs	r3, #0
}
    35d4:	0018      	movs	r0, r3
    35d6:	46bd      	mov	sp, r7
    35d8:	b005      	add	sp, #20
    35da:	bd90      	pop	{r4, r7, pc}
    35dc:	00003549 	.word	0x00003549
    35e0:	20000004 	.word	0x20000004
    35e4:	0000023a 	.word	0x0000023a
    35e8:	000121f4 	.word	0x000121f4
    35ec:	00002a9d 	.word	0x00002a9d

000035f0 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    35f0:	b590      	push	{r4, r7, lr}
    35f2:	b085      	sub	sp, #20
    35f4:	af00      	add	r7, sp, #0
    35f6:	6078      	str	r0, [r7, #4]
	uint8_t i = _get_sercom_index(hw);
    35f8:	230f      	movs	r3, #15
    35fa:	18fc      	adds	r4, r7, r3
    35fc:	687b      	ldr	r3, [r7, #4]
    35fe:	0018      	movs	r0, r3
    3600:	4b6f      	ldr	r3, [pc, #444]	; (37c0 <_usart_init+0x1d0>)
    3602:	4798      	blx	r3
    3604:	0003      	movs	r3, r0
    3606:	7023      	strb	r3, [r4, #0]

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    3608:	687b      	ldr	r3, [r7, #4]
    360a:	2101      	movs	r1, #1
    360c:	0018      	movs	r0, r3
    360e:	4b6d      	ldr	r3, [pc, #436]	; (37c4 <_usart_init+0x1d4>)
    3610:	4798      	blx	r3
    3612:	0003      	movs	r3, r0
    3614:	001a      	movs	r2, r3
    3616:	2301      	movs	r3, #1
    3618:	4053      	eors	r3, r2
    361a:	b2db      	uxtb	r3, r3
    361c:	2b00      	cmp	r3, #0
    361e:	d025      	beq.n	366c <_usart_init+0x7c>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    3620:	230f      	movs	r3, #15
    3622:	18fb      	adds	r3, r7, r3
    3624:	781a      	ldrb	r2, [r3, #0]
    3626:	4968      	ldr	r1, [pc, #416]	; (37c8 <_usart_init+0x1d8>)
    3628:	0013      	movs	r3, r2
    362a:	009b      	lsls	r3, r3, #2
    362c:	189b      	adds	r3, r3, r2
    362e:	009b      	lsls	r3, r3, #2
    3630:	18cb      	adds	r3, r1, r3
    3632:	3304      	adds	r3, #4
    3634:	681b      	ldr	r3, [r3, #0]
    3636:	221c      	movs	r2, #28
    3638:	4013      	ands	r3, r2
    363a:	60bb      	str	r3, [r7, #8]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    363c:	687b      	ldr	r3, [r7, #4]
    363e:	2102      	movs	r1, #2
    3640:	0018      	movs	r0, r3
    3642:	4b62      	ldr	r3, [pc, #392]	; (37cc <_usart_init+0x1dc>)
    3644:	4798      	blx	r3
    3646:	1e03      	subs	r3, r0, #0
    3648:	d008      	beq.n	365c <_usart_init+0x6c>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
    364a:	687b      	ldr	r3, [r7, #4]
    364c:	0018      	movs	r0, r3
    364e:	4b60      	ldr	r3, [pc, #384]	; (37d0 <_usart_init+0x1e0>)
    3650:	4798      	blx	r3
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
    3652:	687b      	ldr	r3, [r7, #4]
    3654:	2102      	movs	r1, #2
    3656:	0018      	movs	r0, r3
    3658:	4b5e      	ldr	r3, [pc, #376]	; (37d4 <_usart_init+0x1e4>)
    365a:	4798      	blx	r3
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    365c:	68bb      	ldr	r3, [r7, #8]
    365e:	2201      	movs	r2, #1
    3660:	431a      	orrs	r2, r3
    3662:	687b      	ldr	r3, [r7, #4]
    3664:	0011      	movs	r1, r2
    3666:	0018      	movs	r0, r3
    3668:	4b5b      	ldr	r3, [pc, #364]	; (37d8 <_usart_init+0x1e8>)
    366a:	4798      	blx	r3
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);
    366c:	687b      	ldr	r3, [r7, #4]
    366e:	2101      	movs	r1, #1
    3670:	0018      	movs	r0, r3
    3672:	4b58      	ldr	r3, [pc, #352]	; (37d4 <_usart_init+0x1e4>)
    3674:	4798      	blx	r3

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    3676:	230f      	movs	r3, #15
    3678:	18fb      	adds	r3, r7, r3
    367a:	781a      	ldrb	r2, [r3, #0]
    367c:	4952      	ldr	r1, [pc, #328]	; (37c8 <_usart_init+0x1d8>)
    367e:	0013      	movs	r3, r2
    3680:	009b      	lsls	r3, r3, #2
    3682:	189b      	adds	r3, r3, r2
    3684:	009b      	lsls	r3, r3, #2
    3686:	18cb      	adds	r3, r1, r3
    3688:	3304      	adds	r3, #4
    368a:	681a      	ldr	r2, [r3, #0]
    368c:	687b      	ldr	r3, [r7, #4]
    368e:	0011      	movs	r1, r2
    3690:	0018      	movs	r0, r3
    3692:	4b51      	ldr	r3, [pc, #324]	; (37d8 <_usart_init+0x1e8>)
    3694:	4798      	blx	r3
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    3696:	230f      	movs	r3, #15
    3698:	18fb      	adds	r3, r7, r3
    369a:	781a      	ldrb	r2, [r3, #0]
    369c:	494a      	ldr	r1, [pc, #296]	; (37c8 <_usart_init+0x1d8>)
    369e:	0013      	movs	r3, r2
    36a0:	009b      	lsls	r3, r3, #2
    36a2:	189b      	adds	r3, r3, r2
    36a4:	009b      	lsls	r3, r3, #2
    36a6:	18cb      	adds	r3, r1, r3
    36a8:	3308      	adds	r3, #8
    36aa:	681a      	ldr	r2, [r3, #0]
    36ac:	687b      	ldr	r3, [r7, #4]
    36ae:	0011      	movs	r1, r2
    36b0:	0018      	movs	r0, r3
    36b2:	4b4a      	ldr	r3, [pc, #296]	; (37dc <_usart_init+0x1ec>)
    36b4:	4798      	blx	r3
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    36b6:	230f      	movs	r3, #15
    36b8:	18fb      	adds	r3, r7, r3
    36ba:	781a      	ldrb	r2, [r3, #0]
    36bc:	4942      	ldr	r1, [pc, #264]	; (37c8 <_usart_init+0x1d8>)
    36be:	0013      	movs	r3, r2
    36c0:	009b      	lsls	r3, r3, #2
    36c2:	189b      	adds	r3, r3, r2
    36c4:	009b      	lsls	r3, r3, #2
    36c6:	18cb      	adds	r3, r1, r3
    36c8:	3304      	adds	r3, #4
    36ca:	681a      	ldr	r2, [r3, #0]
    36cc:	2380      	movs	r3, #128	; 0x80
    36ce:	019b      	lsls	r3, r3, #6
    36d0:	4013      	ands	r3, r2
    36d2:	d10e      	bne.n	36f2 <_usart_init+0x102>
    36d4:	230f      	movs	r3, #15
    36d6:	18fb      	adds	r3, r7, r3
    36d8:	781a      	ldrb	r2, [r3, #0]
    36da:	493b      	ldr	r1, [pc, #236]	; (37c8 <_usart_init+0x1d8>)
    36dc:	0013      	movs	r3, r2
    36de:	009b      	lsls	r3, r3, #2
    36e0:	189b      	adds	r3, r3, r2
    36e2:	009b      	lsls	r3, r3, #2
    36e4:	18cb      	adds	r3, r1, r3
    36e6:	3304      	adds	r3, #4
    36e8:	681a      	ldr	r2, [r3, #0]
    36ea:	23c0      	movs	r3, #192	; 0xc0
    36ec:	01db      	lsls	r3, r3, #7
    36ee:	4013      	ands	r3, r2
    36f0:	d030      	beq.n	3754 <_usart_init+0x164>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    36f2:	230f      	movs	r3, #15
    36f4:	18fb      	adds	r3, r7, r3
    36f6:	781a      	ldrb	r2, [r3, #0]
    36f8:	4933      	ldr	r1, [pc, #204]	; (37c8 <_usart_init+0x1d8>)
    36fa:	0013      	movs	r3, r2
    36fc:	009b      	lsls	r3, r3, #2
    36fe:	189b      	adds	r3, r3, r2
    3700:	009b      	lsls	r3, r3, #2
    3702:	18cb      	adds	r3, r1, r3
    3704:	330c      	adds	r3, #12
    3706:	881b      	ldrh	r3, [r3, #0]
    3708:	04db      	lsls	r3, r3, #19
    370a:	0cdb      	lsrs	r3, r3, #19
    370c:	b299      	uxth	r1, r3
    370e:	687a      	ldr	r2, [r7, #4]
    3710:	8993      	ldrh	r3, [r2, #12]
    3712:	04c9      	lsls	r1, r1, #19
    3714:	0cc8      	lsrs	r0, r1, #19
    3716:	0b5b      	lsrs	r3, r3, #13
    3718:	035b      	lsls	r3, r3, #13
    371a:	1c19      	adds	r1, r3, #0
    371c:	1c03      	adds	r3, r0, #0
    371e:	430b      	orrs	r3, r1
    3720:	8193      	strh	r3, [r2, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    3722:	230f      	movs	r3, #15
    3724:	18fb      	adds	r3, r7, r3
    3726:	781a      	ldrb	r2, [r3, #0]
    3728:	4927      	ldr	r1, [pc, #156]	; (37c8 <_usart_init+0x1d8>)
    372a:	0013      	movs	r3, r2
    372c:	009b      	lsls	r3, r3, #2
    372e:	189b      	adds	r3, r3, r2
    3730:	009b      	lsls	r3, r3, #2
    3732:	18cb      	adds	r3, r1, r3
    3734:	330e      	adds	r3, #14
    3736:	781b      	ldrb	r3, [r3, #0]
    3738:	1c1a      	adds	r2, r3, #0
    373a:	2307      	movs	r3, #7
    373c:	4013      	ands	r3, r2
    373e:	b2d9      	uxtb	r1, r3
    3740:	687a      	ldr	r2, [r7, #4]
    3742:	8993      	ldrh	r3, [r2, #12]
    3744:	0348      	lsls	r0, r1, #13
    3746:	04db      	lsls	r3, r3, #19
    3748:	0cdb      	lsrs	r3, r3, #19
    374a:	1c19      	adds	r1, r3, #0
    374c:	1c03      	adds	r3, r0, #0
    374e:	430b      	orrs	r3, r1
    3750:	8193      	strh	r3, [r2, #12]
    3752:	e00f      	b.n	3774 <_usart_init+0x184>
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    3754:	230f      	movs	r3, #15
    3756:	18fb      	adds	r3, r7, r3
    3758:	781a      	ldrb	r2, [r3, #0]
    375a:	491b      	ldr	r1, [pc, #108]	; (37c8 <_usart_init+0x1d8>)
    375c:	0013      	movs	r3, r2
    375e:	009b      	lsls	r3, r3, #2
    3760:	189b      	adds	r3, r3, r2
    3762:	009b      	lsls	r3, r3, #2
    3764:	18cb      	adds	r3, r1, r3
    3766:	330c      	adds	r3, #12
    3768:	881a      	ldrh	r2, [r3, #0]
    376a:	687b      	ldr	r3, [r7, #4]
    376c:	0011      	movs	r1, r2
    376e:	0018      	movs	r0, r3
    3770:	4b1b      	ldr	r3, [pc, #108]	; (37e0 <_usart_init+0x1f0>)
    3772:	4798      	blx	r3
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    3774:	230f      	movs	r3, #15
    3776:	18fb      	adds	r3, r7, r3
    3778:	781a      	ldrb	r2, [r3, #0]
    377a:	4913      	ldr	r1, [pc, #76]	; (37c8 <_usart_init+0x1d8>)
    377c:	0013      	movs	r3, r2
    377e:	009b      	lsls	r3, r3, #2
    3780:	189b      	adds	r3, r3, r2
    3782:	009b      	lsls	r3, r3, #2
    3784:	18cb      	adds	r3, r1, r3
    3786:	330f      	adds	r3, #15
    3788:	781a      	ldrb	r2, [r3, #0]
    378a:	687b      	ldr	r3, [r7, #4]
    378c:	0011      	movs	r1, r2
    378e:	0018      	movs	r0, r3
    3790:	4b14      	ldr	r3, [pc, #80]	; (37e4 <_usart_init+0x1f4>)
    3792:	4798      	blx	r3
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    3794:	230f      	movs	r3, #15
    3796:	18fb      	adds	r3, r7, r3
    3798:	781a      	ldrb	r2, [r3, #0]
    379a:	490b      	ldr	r1, [pc, #44]	; (37c8 <_usart_init+0x1d8>)
    379c:	0013      	movs	r3, r2
    379e:	009b      	lsls	r3, r3, #2
    37a0:	189b      	adds	r3, r3, r2
    37a2:	009b      	lsls	r3, r3, #2
    37a4:	18cb      	adds	r3, r1, r3
    37a6:	3310      	adds	r3, #16
    37a8:	781a      	ldrb	r2, [r3, #0]
    37aa:	687b      	ldr	r3, [r7, #4]
    37ac:	0011      	movs	r1, r2
    37ae:	0018      	movs	r0, r3
    37b0:	4b0d      	ldr	r3, [pc, #52]	; (37e8 <_usart_init+0x1f8>)
    37b2:	4798      	blx	r3

	return ERR_NONE;
    37b4:	2300      	movs	r3, #0
}
    37b6:	0018      	movs	r0, r3
    37b8:	46bd      	mov	sp, r7
    37ba:	b005      	add	sp, #20
    37bc:	bd90      	pop	{r4, r7, pc}
    37be:	46c0      	nop			; (mov r8, r8)
    37c0:	00003569 	.word	0x00003569
    37c4:	0000302d 	.word	0x0000302d
    37c8:	20000004 	.word	0x20000004
    37cc:	00003261 	.word	0x00003261
    37d0:	00003235 	.word	0x00003235
    37d4:	0000300f 	.word	0x0000300f
    37d8:	00003291 	.word	0x00003291
    37dc:	000032e1 	.word	0x000032e1
    37e0:	00003327 	.word	0x00003327
    37e4:	00003345 	.word	0x00003345
    37e8:	000033fb 	.word	0x000033fb

000037ec <_spi_sync_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
    37ec:	b580      	push	{r7, lr}
    37ee:	b082      	sub	sp, #8
    37f0:	af00      	add	r7, sp, #0
    37f2:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    37f4:	687b      	ldr	r3, [r7, #4]
    37f6:	2101      	movs	r1, #1
    37f8:	0018      	movs	r0, r3
    37fa:	4b08      	ldr	r3, [pc, #32]	; (381c <_spi_sync_enable+0x30>)
    37fc:	4798      	blx	r3
    37fe:	1e03      	subs	r3, r0, #0
    3800:	d002      	beq.n	3808 <_spi_sync_enable+0x1c>
		return ERR_BUSY;
    3802:	2304      	movs	r3, #4
    3804:	425b      	negs	r3, r3
    3806:	e004      	b.n	3812 <_spi_sync_enable+0x26>
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);
    3808:	687b      	ldr	r3, [r7, #4]
    380a:	0018      	movs	r0, r3
    380c:	4b04      	ldr	r3, [pc, #16]	; (3820 <_spi_sync_enable+0x34>)
    380e:	4798      	blx	r3

	return ERR_NONE;
    3810:	2300      	movs	r3, #0
}
    3812:	0018      	movs	r0, r3
    3814:	46bd      	mov	sp, r7
    3816:	b002      	add	sp, #8
    3818:	bd80      	pop	{r7, pc}
    381a:	46c0      	nop			; (mov r8, r8)
    381c:	00002fef 	.word	0x00002fef
    3820:	00003121 	.word	0x00003121

00003824 <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    3824:	b580      	push	{r7, lr}
    3826:	b082      	sub	sp, #8
    3828:	af00      	add	r7, sp, #0
    382a:	6078      	str	r0, [r7, #4]
    382c:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    382e:	687b      	ldr	r3, [r7, #4]
    3830:	2b00      	cmp	r3, #0
    3832:	d004      	beq.n	383e <_spi_load_regs_master+0x1a>
    3834:	683b      	ldr	r3, [r7, #0]
    3836:	2b00      	cmp	r3, #0
    3838:	d001      	beq.n	383e <_spi_load_regs_master+0x1a>
    383a:	2301      	movs	r3, #1
    383c:	e000      	b.n	3840 <_spi_load_regs_master+0x1c>
    383e:	2300      	movs	r3, #0
    3840:	1c1a      	adds	r2, r3, #0
    3842:	2301      	movs	r3, #1
    3844:	4013      	ands	r3, r2
    3846:	b2db      	uxtb	r3, r3
    3848:	4a1f      	ldr	r2, [pc, #124]	; (38c8 <_spi_load_regs_master+0xa4>)
    384a:	4920      	ldr	r1, [pc, #128]	; (38cc <_spi_load_regs_master+0xa8>)
    384c:	0018      	movs	r0, r3
    384e:	4b20      	ldr	r3, [pc, #128]	; (38d0 <_spi_load_regs_master+0xac>)
    3850:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    3852:	683b      	ldr	r3, [r7, #0]
    3854:	781a      	ldrb	r2, [r3, #0]
    3856:	7859      	ldrb	r1, [r3, #1]
    3858:	0209      	lsls	r1, r1, #8
    385a:	430a      	orrs	r2, r1
    385c:	7899      	ldrb	r1, [r3, #2]
    385e:	0409      	lsls	r1, r1, #16
    3860:	430a      	orrs	r2, r1
    3862:	78db      	ldrb	r3, [r3, #3]
    3864:	061b      	lsls	r3, r3, #24
    3866:	4313      	orrs	r3, r2
    3868:	001a      	movs	r2, r3
	hri_sercomspi_write_CTRLA_reg(
    386a:	4b1a      	ldr	r3, [pc, #104]	; (38d4 <_spi_load_regs_master+0xb0>)
    386c:	401a      	ands	r2, r3
    386e:	687b      	ldr	r3, [r7, #4]
    3870:	0011      	movs	r1, r2
    3872:	0018      	movs	r0, r3
    3874:	4b18      	ldr	r3, [pc, #96]	; (38d8 <_spi_load_regs_master+0xb4>)
    3876:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    3878:	683b      	ldr	r3, [r7, #0]
    387a:	791a      	ldrb	r2, [r3, #4]
    387c:	7959      	ldrb	r1, [r3, #5]
    387e:	0209      	lsls	r1, r1, #8
    3880:	430a      	orrs	r2, r1
    3882:	7999      	ldrb	r1, [r3, #6]
    3884:	0409      	lsls	r1, r1, #16
    3886:	430a      	orrs	r2, r1
    3888:	79db      	ldrb	r3, [r3, #7]
    388a:	061b      	lsls	r3, r3, #24
    388c:	4313      	orrs	r3, r2
    388e:	001a      	movs	r2, r3
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    3890:	4b12      	ldr	r3, [pc, #72]	; (38dc <_spi_load_regs_master+0xb8>)
    3892:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(
    3894:	2280      	movs	r2, #128	; 0x80
    3896:	0292      	lsls	r2, r2, #10
    3898:	431a      	orrs	r2, r3
    389a:	687b      	ldr	r3, [r7, #4]
    389c:	0011      	movs	r1, r2
    389e:	0018      	movs	r0, r3
    38a0:	4b0f      	ldr	r3, [pc, #60]	; (38e0 <_spi_load_regs_master+0xbc>)
    38a2:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    38a4:	683b      	ldr	r3, [r7, #0]
    38a6:	7b1a      	ldrb	r2, [r3, #12]
    38a8:	687b      	ldr	r3, [r7, #4]
    38aa:	0011      	movs	r1, r2
    38ac:	0018      	movs	r0, r3
    38ae:	4b0d      	ldr	r3, [pc, #52]	; (38e4 <_spi_load_regs_master+0xc0>)
    38b0:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    38b2:	683b      	ldr	r3, [r7, #0]
    38b4:	7b5a      	ldrb	r2, [r3, #13]
    38b6:	687b      	ldr	r3, [r7, #4]
    38b8:	0011      	movs	r1, r2
    38ba:	0018      	movs	r0, r3
    38bc:	4b0a      	ldr	r3, [pc, #40]	; (38e8 <_spi_load_regs_master+0xc4>)
    38be:	4798      	blx	r3
}
    38c0:	46c0      	nop			; (mov r8, r8)
    38c2:	46bd      	mov	sp, r7
    38c4:	b002      	add	sp, #8
    38c6:	bd80      	pop	{r7, pc}
    38c8:	000008ef 	.word	0x000008ef
    38cc:	000121f4 	.word	0x000121f4
    38d0:	00002a9d 	.word	0x00002a9d
    38d4:	fffffefc 	.word	0xfffffefc
    38d8:	000031e1 	.word	0x000031e1
    38dc:	fffd1dbf 	.word	0xfffd1dbf
    38e0:	000032b9 	.word	0x000032b9
    38e4:	00003309 	.word	0x00003309
    38e8:	000033db 	.word	0x000033db

000038ec <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    38ec:	b580      	push	{r7, lr}
    38ee:	b082      	sub	sp, #8
    38f0:	af00      	add	r7, sp, #0
    38f2:	6078      	str	r0, [r7, #4]
    38f4:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    38f6:	687b      	ldr	r3, [r7, #4]
    38f8:	2b00      	cmp	r3, #0
    38fa:	d004      	beq.n	3906 <_spi_load_regs_slave+0x1a>
    38fc:	683b      	ldr	r3, [r7, #0]
    38fe:	2b00      	cmp	r3, #0
    3900:	d001      	beq.n	3906 <_spi_load_regs_slave+0x1a>
    3902:	2301      	movs	r3, #1
    3904:	e000      	b.n	3908 <_spi_load_regs_slave+0x1c>
    3906:	2300      	movs	r3, #0
    3908:	1c1a      	adds	r2, r3, #0
    390a:	2301      	movs	r3, #1
    390c:	4013      	ands	r3, r2
    390e:	b2db      	uxtb	r3, r3
    3910:	4a29      	ldr	r2, [pc, #164]	; (39b8 <_spi_load_regs_slave+0xcc>)
    3912:	492a      	ldr	r1, [pc, #168]	; (39bc <_spi_load_regs_slave+0xd0>)
    3914:	0018      	movs	r0, r3
    3916:	4b2a      	ldr	r3, [pc, #168]	; (39c0 <_spi_load_regs_slave+0xd4>)
    3918:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    391a:	683b      	ldr	r3, [r7, #0]
    391c:	781a      	ldrb	r2, [r3, #0]
    391e:	7859      	ldrb	r1, [r3, #1]
    3920:	0209      	lsls	r1, r1, #8
    3922:	430a      	orrs	r2, r1
    3924:	7899      	ldrb	r1, [r3, #2]
    3926:	0409      	lsls	r1, r1, #16
    3928:	430a      	orrs	r2, r1
    392a:	78db      	ldrb	r3, [r3, #3]
    392c:	061b      	lsls	r3, r3, #24
    392e:	4313      	orrs	r3, r2
    3930:	001a      	movs	r2, r3
	hri_sercomspi_write_CTRLA_reg(
    3932:	4b24      	ldr	r3, [pc, #144]	; (39c4 <_spi_load_regs_slave+0xd8>)
    3934:	401a      	ands	r2, r3
    3936:	687b      	ldr	r3, [r7, #4]
    3938:	0011      	movs	r1, r2
    393a:	0018      	movs	r0, r3
    393c:	4b22      	ldr	r3, [pc, #136]	; (39c8 <_spi_load_regs_slave+0xdc>)
    393e:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    3940:	683b      	ldr	r3, [r7, #0]
    3942:	791a      	ldrb	r2, [r3, #4]
    3944:	7959      	ldrb	r1, [r3, #5]
    3946:	0209      	lsls	r1, r1, #8
    3948:	430a      	orrs	r2, r1
    394a:	7999      	ldrb	r1, [r3, #6]
    394c:	0409      	lsls	r1, r1, #16
    394e:	430a      	orrs	r2, r1
    3950:	79db      	ldrb	r3, [r3, #7]
    3952:	061b      	lsls	r3, r3, #24
    3954:	4313      	orrs	r3, r2
    3956:	001a      	movs	r2, r3
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    3958:	4b1c      	ldr	r3, [pc, #112]	; (39cc <_spi_load_regs_slave+0xe0>)
    395a:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(hw,
    395c:	4a1c      	ldr	r2, [pc, #112]	; (39d0 <_spi_load_regs_slave+0xe4>)
    395e:	431a      	orrs	r2, r3
    3960:	687b      	ldr	r3, [r7, #4]
    3962:	0011      	movs	r1, r2
    3964:	0018      	movs	r0, r3
    3966:	4b1b      	ldr	r3, [pc, #108]	; (39d4 <_spi_load_regs_slave+0xe8>)
    3968:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    396a:	683b      	ldr	r3, [r7, #0]
    396c:	7a1a      	ldrb	r2, [r3, #8]
    396e:	7a59      	ldrb	r1, [r3, #9]
    3970:	0209      	lsls	r1, r1, #8
    3972:	430a      	orrs	r2, r1
    3974:	7a99      	ldrb	r1, [r3, #10]
    3976:	0409      	lsls	r1, r1, #16
    3978:	430a      	orrs	r2, r1
    397a:	7adb      	ldrb	r3, [r3, #11]
    397c:	061b      	lsls	r3, r3, #24
    397e:	4313      	orrs	r3, r2
    3980:	001a      	movs	r2, r3
    3982:	687b      	ldr	r3, [r7, #4]
    3984:	0011      	movs	r1, r2
    3986:	0018      	movs	r0, r3
    3988:	4b13      	ldr	r3, [pc, #76]	; (39d8 <_spi_load_regs_slave+0xec>)
    398a:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    398c:	683b      	ldr	r3, [r7, #0]
    398e:	7b5a      	ldrb	r2, [r3, #13]
    3990:	687b      	ldr	r3, [r7, #4]
    3992:	0011      	movs	r1, r2
    3994:	0018      	movs	r0, r3
    3996:	4b11      	ldr	r3, [pc, #68]	; (39dc <_spi_load_regs_slave+0xf0>)
    3998:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    399a:	46c0      	nop			; (mov r8, r8)
    399c:	2301      	movs	r3, #1
    399e:	425a      	negs	r2, r3
    39a0:	687b      	ldr	r3, [r7, #4]
    39a2:	0011      	movs	r1, r2
    39a4:	0018      	movs	r0, r3
    39a6:	4b0e      	ldr	r3, [pc, #56]	; (39e0 <_spi_load_regs_slave+0xf4>)
    39a8:	4798      	blx	r3
    39aa:	1e03      	subs	r3, r0, #0
    39ac:	d1f6      	bne.n	399c <_spi_load_regs_slave+0xb0>
		;
}
    39ae:	46c0      	nop			; (mov r8, r8)
    39b0:	46bd      	mov	sp, r7
    39b2:	b002      	add	sp, #8
    39b4:	bd80      	pop	{r7, pc}
    39b6:	46c0      	nop			; (mov r8, r8)
    39b8:	00000903 	.word	0x00000903
    39bc:	000121f4 	.word	0x000121f4
    39c0:	00002a9d 	.word	0x00002a9d
    39c4:	fffffefc 	.word	0xfffffefc
    39c8:	000031e1 	.word	0x000031e1
    39cc:	fffdddbf 	.word	0xfffdddbf
    39d0:	00020240 	.word	0x00020240
    39d4:	000032b9 	.word	0x000032b9
    39d8:	00003363 	.word	0x00003363
    39dc:	000033db 	.word	0x000033db
    39e0:	00002fef 	.word	0x00002fef

000039e4 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    39e4:	b590      	push	{r4, r7, lr}
    39e6:	b085      	sub	sp, #20
    39e8:	af00      	add	r7, sp, #0
    39ea:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    39ec:	687b      	ldr	r3, [r7, #4]
    39ee:	220e      	movs	r2, #14
    39f0:	18bc      	adds	r4, r7, r2
    39f2:	0018      	movs	r0, r3
    39f4:	4b18      	ldr	r3, [pc, #96]	; (3a58 <_spi_get_regs+0x74>)
    39f6:	4798      	blx	r3
    39f8:	0003      	movs	r3, r0
    39fa:	7023      	strb	r3, [r4, #0]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    39fc:	230f      	movs	r3, #15
    39fe:	18fb      	adds	r3, r7, r3
    3a00:	2200      	movs	r2, #0
    3a02:	701a      	strb	r2, [r3, #0]
    3a04:	e01e      	b.n	3a44 <_spi_get_regs+0x60>
		if (sercomspi_regs[i].n == n) {
    3a06:	230f      	movs	r3, #15
    3a08:	18fb      	adds	r3, r7, r3
    3a0a:	781a      	ldrb	r2, [r3, #0]
    3a0c:	4913      	ldr	r1, [pc, #76]	; (3a5c <_spi_get_regs+0x78>)
    3a0e:	0013      	movs	r3, r2
    3a10:	011b      	lsls	r3, r3, #4
    3a12:	189b      	adds	r3, r3, r2
    3a14:	18cb      	adds	r3, r1, r3
    3a16:	3310      	adds	r3, #16
    3a18:	781b      	ldrb	r3, [r3, #0]
    3a1a:	220e      	movs	r2, #14
    3a1c:	18ba      	adds	r2, r7, r2
    3a1e:	7812      	ldrb	r2, [r2, #0]
    3a20:	429a      	cmp	r2, r3
    3a22:	d108      	bne.n	3a36 <_spi_get_regs+0x52>
			return &sercomspi_regs[i];
    3a24:	230f      	movs	r3, #15
    3a26:	18fb      	adds	r3, r7, r3
    3a28:	781a      	ldrb	r2, [r3, #0]
    3a2a:	0013      	movs	r3, r2
    3a2c:	011b      	lsls	r3, r3, #4
    3a2e:	189b      	adds	r3, r3, r2
    3a30:	4a0a      	ldr	r2, [pc, #40]	; (3a5c <_spi_get_regs+0x78>)
    3a32:	189b      	adds	r3, r3, r2
    3a34:	e00c      	b.n	3a50 <_spi_get_regs+0x6c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    3a36:	230f      	movs	r3, #15
    3a38:	18fb      	adds	r3, r7, r3
    3a3a:	781a      	ldrb	r2, [r3, #0]
    3a3c:	230f      	movs	r3, #15
    3a3e:	18fb      	adds	r3, r7, r3
    3a40:	3201      	adds	r2, #1
    3a42:	701a      	strb	r2, [r3, #0]
    3a44:	230f      	movs	r3, #15
    3a46:	18fb      	adds	r3, r7, r3
    3a48:	781b      	ldrb	r3, [r3, #0]
    3a4a:	2b01      	cmp	r3, #1
    3a4c:	d9db      	bls.n	3a06 <_spi_get_regs+0x22>
		}
	}

	return NULL;
    3a4e:	2300      	movs	r3, #0
}
    3a50:	0018      	movs	r0, r3
    3a52:	46bd      	mov	sp, r7
    3a54:	b005      	add	sp, #20
    3a56:	bd90      	pop	{r4, r7, pc}
    3a58:	00003549 	.word	0x00003549
    3a5c:	00012210 	.word	0x00012210

00003a60 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    3a60:	b580      	push	{r7, lr}
    3a62:	b084      	sub	sp, #16
    3a64:	af00      	add	r7, sp, #0
    3a66:	6078      	str	r0, [r7, #4]
    3a68:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    3a6a:	683b      	ldr	r3, [r7, #0]
    3a6c:	0018      	movs	r0, r3
    3a6e:	4b4a      	ldr	r3, [pc, #296]	; (3b98 <_spi_m_sync_init+0x138>)
    3a70:	4798      	blx	r3
    3a72:	0003      	movs	r3, r0
    3a74:	60fb      	str	r3, [r7, #12]

	ASSERT(dev && hw);
    3a76:	687b      	ldr	r3, [r7, #4]
    3a78:	2b00      	cmp	r3, #0
    3a7a:	d004      	beq.n	3a86 <_spi_m_sync_init+0x26>
    3a7c:	683b      	ldr	r3, [r7, #0]
    3a7e:	2b00      	cmp	r3, #0
    3a80:	d001      	beq.n	3a86 <_spi_m_sync_init+0x26>
    3a82:	2301      	movs	r3, #1
    3a84:	e000      	b.n	3a88 <_spi_m_sync_init+0x28>
    3a86:	2300      	movs	r3, #0
    3a88:	1c1a      	adds	r2, r3, #0
    3a8a:	2301      	movs	r3, #1
    3a8c:	4013      	ands	r3, r2
    3a8e:	b2db      	uxtb	r3, r3
    3a90:	4a42      	ldr	r2, [pc, #264]	; (3b9c <_spi_m_sync_init+0x13c>)
    3a92:	4943      	ldr	r1, [pc, #268]	; (3ba0 <_spi_m_sync_init+0x140>)
    3a94:	0018      	movs	r0, r3
    3a96:	4b43      	ldr	r3, [pc, #268]	; (3ba4 <_spi_m_sync_init+0x144>)
    3a98:	4798      	blx	r3

	if (regs == NULL) {
    3a9a:	68fb      	ldr	r3, [r7, #12]
    3a9c:	2b00      	cmp	r3, #0
    3a9e:	d102      	bne.n	3aa6 <_spi_m_sync_init+0x46>
		return ERR_INVALID_ARG;
    3aa0:	230d      	movs	r3, #13
    3aa2:	425b      	negs	r3, r3
    3aa4:	e074      	b.n	3b90 <_spi_m_sync_init+0x130>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    3aa6:	683b      	ldr	r3, [r7, #0]
    3aa8:	2101      	movs	r1, #1
    3aaa:	0018      	movs	r0, r3
    3aac:	4b3e      	ldr	r3, [pc, #248]	; (3ba8 <_spi_m_sync_init+0x148>)
    3aae:	4798      	blx	r3
    3ab0:	0003      	movs	r3, r0
    3ab2:	001a      	movs	r2, r3
    3ab4:	2301      	movs	r3, #1
    3ab6:	4053      	eors	r3, r2
    3ab8:	b2db      	uxtb	r3, r3
    3aba:	2b00      	cmp	r3, #0
    3abc:	d026      	beq.n	3b0c <_spi_m_sync_init+0xac>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    3abe:	68fb      	ldr	r3, [r7, #12]
    3ac0:	781a      	ldrb	r2, [r3, #0]
    3ac2:	7859      	ldrb	r1, [r3, #1]
    3ac4:	0209      	lsls	r1, r1, #8
    3ac6:	430a      	orrs	r2, r1
    3ac8:	7899      	ldrb	r1, [r3, #2]
    3aca:	0409      	lsls	r1, r1, #16
    3acc:	430a      	orrs	r2, r1
    3ace:	78db      	ldrb	r3, [r3, #3]
    3ad0:	061b      	lsls	r3, r3, #24
    3ad2:	4313      	orrs	r3, r2
    3ad4:	001a      	movs	r2, r3
    3ad6:	231c      	movs	r3, #28
    3ad8:	4013      	ands	r3, r2
    3ada:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    3adc:	683b      	ldr	r3, [r7, #0]
    3ade:	2102      	movs	r1, #2
    3ae0:	0018      	movs	r0, r3
    3ae2:	4b32      	ldr	r3, [pc, #200]	; (3bac <_spi_m_sync_init+0x14c>)
    3ae4:	4798      	blx	r3
    3ae6:	1e03      	subs	r3, r0, #0
    3ae8:	d008      	beq.n	3afc <_spi_m_sync_init+0x9c>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    3aea:	683b      	ldr	r3, [r7, #0]
    3aec:	0018      	movs	r0, r3
    3aee:	4b30      	ldr	r3, [pc, #192]	; (3bb0 <_spi_m_sync_init+0x150>)
    3af0:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    3af2:	683b      	ldr	r3, [r7, #0]
    3af4:	2102      	movs	r1, #2
    3af6:	0018      	movs	r0, r3
    3af8:	4b2e      	ldr	r3, [pc, #184]	; (3bb4 <_spi_m_sync_init+0x154>)
    3afa:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    3afc:	68bb      	ldr	r3, [r7, #8]
    3afe:	2201      	movs	r2, #1
    3b00:	431a      	orrs	r2, r3
    3b02:	683b      	ldr	r3, [r7, #0]
    3b04:	0011      	movs	r1, r2
    3b06:	0018      	movs	r0, r3
    3b08:	4b2b      	ldr	r3, [pc, #172]	; (3bb8 <_spi_m_sync_init+0x158>)
    3b0a:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    3b0c:	683b      	ldr	r3, [r7, #0]
    3b0e:	2101      	movs	r1, #1
    3b10:	0018      	movs	r0, r3
    3b12:	4b28      	ldr	r3, [pc, #160]	; (3bb4 <_spi_m_sync_init+0x154>)
    3b14:	4798      	blx	r3

	dev->prvt = hw;
    3b16:	687b      	ldr	r3, [r7, #4]
    3b18:	683a      	ldr	r2, [r7, #0]
    3b1a:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    3b1c:	68fb      	ldr	r3, [r7, #12]
    3b1e:	781a      	ldrb	r2, [r3, #0]
    3b20:	7859      	ldrb	r1, [r3, #1]
    3b22:	0209      	lsls	r1, r1, #8
    3b24:	430a      	orrs	r2, r1
    3b26:	7899      	ldrb	r1, [r3, #2]
    3b28:	0409      	lsls	r1, r1, #16
    3b2a:	430a      	orrs	r2, r1
    3b2c:	78db      	ldrb	r3, [r3, #3]
    3b2e:	061b      	lsls	r3, r3, #24
    3b30:	4313      	orrs	r3, r2
    3b32:	001a      	movs	r2, r3
    3b34:	231c      	movs	r3, #28
    3b36:	4013      	ands	r3, r2
    3b38:	2b08      	cmp	r3, #8
    3b3a:	d106      	bne.n	3b4a <_spi_m_sync_init+0xea>
		_spi_load_regs_slave(hw, regs);
    3b3c:	68fa      	ldr	r2, [r7, #12]
    3b3e:	683b      	ldr	r3, [r7, #0]
    3b40:	0011      	movs	r1, r2
    3b42:	0018      	movs	r0, r3
    3b44:	4b1d      	ldr	r3, [pc, #116]	; (3bbc <_spi_m_sync_init+0x15c>)
    3b46:	4798      	blx	r3
    3b48:	e005      	b.n	3b56 <_spi_m_sync_init+0xf6>
	} else {
		_spi_load_regs_master(hw, regs);
    3b4a:	68fa      	ldr	r2, [r7, #12]
    3b4c:	683b      	ldr	r3, [r7, #0]
    3b4e:	0011      	movs	r1, r2
    3b50:	0018      	movs	r0, r3
    3b52:	4b1b      	ldr	r3, [pc, #108]	; (3bc0 <_spi_m_sync_init+0x160>)
    3b54:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    3b56:	68fb      	ldr	r3, [r7, #12]
    3b58:	791a      	ldrb	r2, [r3, #4]
    3b5a:	7959      	ldrb	r1, [r3, #5]
    3b5c:	0209      	lsls	r1, r1, #8
    3b5e:	430a      	orrs	r2, r1
    3b60:	7999      	ldrb	r1, [r3, #6]
    3b62:	0409      	lsls	r1, r1, #16
    3b64:	430a      	orrs	r2, r1
    3b66:	79db      	ldrb	r3, [r3, #7]
    3b68:	061b      	lsls	r3, r3, #24
    3b6a:	4313      	orrs	r3, r2
    3b6c:	001a      	movs	r2, r3
    3b6e:	2307      	movs	r3, #7
    3b70:	4013      	ands	r3, r2
    3b72:	d101      	bne.n	3b78 <_spi_m_sync_init+0x118>
    3b74:	2201      	movs	r2, #1
    3b76:	e000      	b.n	3b7a <_spi_m_sync_init+0x11a>
    3b78:	2202      	movs	r2, #2
    3b7a:	687b      	ldr	r3, [r7, #4]
    3b7c:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    3b7e:	68fb      	ldr	r3, [r7, #12]
    3b80:	7b9a      	ldrb	r2, [r3, #14]
    3b82:	7bdb      	ldrb	r3, [r3, #15]
    3b84:	021b      	lsls	r3, r3, #8
    3b86:	4313      	orrs	r3, r2
    3b88:	b29a      	uxth	r2, r3
    3b8a:	687b      	ldr	r3, [r7, #4]
    3b8c:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    3b8e:	2300      	movs	r3, #0
}
    3b90:	0018      	movs	r0, r3
    3b92:	46bd      	mov	sp, r7
    3b94:	b004      	add	sp, #16
    3b96:	bd80      	pop	{r7, pc}
    3b98:	000039e5 	.word	0x000039e5
    3b9c:	00000925 	.word	0x00000925
    3ba0:	000121f4 	.word	0x000121f4
    3ba4:	00002a9d 	.word	0x00002a9d
    3ba8:	00002fef 	.word	0x00002fef
    3bac:	000031b1 	.word	0x000031b1
    3bb0:	00003185 	.word	0x00003185
    3bb4:	00002fd1 	.word	0x00002fd1
    3bb8:	000031e1 	.word	0x000031e1
    3bbc:	000038ed 	.word	0x000038ed
    3bc0:	00003825 	.word	0x00003825

00003bc4 <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    3bc4:	b580      	push	{r7, lr}
    3bc6:	b082      	sub	sp, #8
    3bc8:	af00      	add	r7, sp, #0
    3bca:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    3bcc:	687b      	ldr	r3, [r7, #4]
    3bce:	2b00      	cmp	r3, #0
    3bd0:	d005      	beq.n	3bde <_spi_m_sync_enable+0x1a>
    3bd2:	687b      	ldr	r3, [r7, #4]
    3bd4:	681b      	ldr	r3, [r3, #0]
    3bd6:	2b00      	cmp	r3, #0
    3bd8:	d001      	beq.n	3bde <_spi_m_sync_enable+0x1a>
    3bda:	2301      	movs	r3, #1
    3bdc:	e000      	b.n	3be0 <_spi_m_sync_enable+0x1c>
    3bde:	2300      	movs	r3, #0
    3be0:	1c1a      	adds	r2, r3, #0
    3be2:	2301      	movs	r3, #1
    3be4:	4013      	ands	r3, r2
    3be6:	b2d8      	uxtb	r0, r3
    3be8:	2398      	movs	r3, #152	; 0x98
    3bea:	011a      	lsls	r2, r3, #4
    3bec:	4b06      	ldr	r3, [pc, #24]	; (3c08 <_spi_m_sync_enable+0x44>)
    3bee:	0019      	movs	r1, r3
    3bf0:	4b06      	ldr	r3, [pc, #24]	; (3c0c <_spi_m_sync_enable+0x48>)
    3bf2:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    3bf4:	687b      	ldr	r3, [r7, #4]
    3bf6:	681b      	ldr	r3, [r3, #0]
    3bf8:	0018      	movs	r0, r3
    3bfa:	4b05      	ldr	r3, [pc, #20]	; (3c10 <_spi_m_sync_enable+0x4c>)
    3bfc:	4798      	blx	r3
    3bfe:	0003      	movs	r3, r0
}
    3c00:	0018      	movs	r0, r3
    3c02:	46bd      	mov	sp, r7
    3c04:	b002      	add	sp, #8
    3c06:	bd80      	pop	{r7, pc}
    3c08:	000121f4 	.word	0x000121f4
    3c0c:	00002a9d 	.word	0x00002a9d
    3c10:	000037ed 	.word	0x000037ed

00003c14 <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    3c14:	b580      	push	{r7, lr}
    3c16:	b082      	sub	sp, #8
    3c18:	af00      	add	r7, sp, #0
    3c1a:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    3c1c:	46c0      	nop			; (mov r8, r8)
    3c1e:	687b      	ldr	r3, [r7, #4]
    3c20:	2103      	movs	r1, #3
    3c22:	0018      	movs	r0, r3
    3c24:	4b06      	ldr	r3, [pc, #24]	; (3c40 <_spi_wait_bus_idle+0x2c>)
    3c26:	4798      	blx	r3
    3c28:	1e03      	subs	r3, r0, #0
    3c2a:	d0f8      	beq.n	3c1e <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    3c2c:	687b      	ldr	r3, [r7, #4]
    3c2e:	2103      	movs	r1, #3
    3c30:	0018      	movs	r0, r3
    3c32:	4b04      	ldr	r3, [pc, #16]	; (3c44 <_spi_wait_bus_idle+0x30>)
    3c34:	4798      	blx	r3
}
    3c36:	46c0      	nop			; (mov r8, r8)
    3c38:	46bd      	mov	sp, r7
    3c3a:	b002      	add	sp, #8
    3c3c:	bd80      	pop	{r7, pc}
    3c3e:	46c0      	nop			; (mov r8, r8)
    3c40:	0000304d 	.word	0x0000304d
    3c44:	0000309b 	.word	0x0000309b

00003c48 <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    3c48:	b580      	push	{r7, lr}
    3c4a:	b086      	sub	sp, #24
    3c4c:	af00      	add	r7, sp, #0
    3c4e:	60f8      	str	r0, [r7, #12]
    3c50:	60b9      	str	r1, [r7, #8]
    3c52:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    3c54:	68bb      	ldr	r3, [r7, #8]
    3c56:	2204      	movs	r2, #4
    3c58:	4013      	ands	r3, r2
    3c5a:	d101      	bne.n	3c60 <_spi_rx_check_and_receive+0x18>
		return false;
    3c5c:	2300      	movs	r3, #0
    3c5e:	e024      	b.n	3caa <_spi_rx_check_and_receive+0x62>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    3c60:	68fb      	ldr	r3, [r7, #12]
    3c62:	0018      	movs	r0, r3
    3c64:	4b13      	ldr	r3, [pc, #76]	; (3cb4 <_spi_rx_check_and_receive+0x6c>)
    3c66:	4798      	blx	r3
    3c68:	0003      	movs	r3, r0
    3c6a:	617b      	str	r3, [r7, #20]

	if (ctrl->rxbuf) {
    3c6c:	687b      	ldr	r3, [r7, #4]
    3c6e:	685b      	ldr	r3, [r3, #4]
    3c70:	2b00      	cmp	r3, #0
    3c72:	d014      	beq.n	3c9e <_spi_rx_check_and_receive+0x56>
		*ctrl->rxbuf++ = (uint8_t)data;
    3c74:	687b      	ldr	r3, [r7, #4]
    3c76:	685b      	ldr	r3, [r3, #4]
    3c78:	1c59      	adds	r1, r3, #1
    3c7a:	687a      	ldr	r2, [r7, #4]
    3c7c:	6051      	str	r1, [r2, #4]
    3c7e:	697a      	ldr	r2, [r7, #20]
    3c80:	b2d2      	uxtb	r2, r2
    3c82:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    3c84:	687b      	ldr	r3, [r7, #4]
    3c86:	7c1b      	ldrb	r3, [r3, #16]
    3c88:	2b01      	cmp	r3, #1
    3c8a:	d908      	bls.n	3c9e <_spi_rx_check_and_receive+0x56>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    3c8c:	687b      	ldr	r3, [r7, #4]
    3c8e:	685b      	ldr	r3, [r3, #4]
    3c90:	1c59      	adds	r1, r3, #1
    3c92:	687a      	ldr	r2, [r7, #4]
    3c94:	6051      	str	r1, [r2, #4]
    3c96:	697a      	ldr	r2, [r7, #20]
    3c98:	0a12      	lsrs	r2, r2, #8
    3c9a:	b2d2      	uxtb	r2, r2
    3c9c:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    3c9e:	687b      	ldr	r3, [r7, #4]
    3ca0:	68db      	ldr	r3, [r3, #12]
    3ca2:	1c5a      	adds	r2, r3, #1
    3ca4:	687b      	ldr	r3, [r7, #4]
    3ca6:	60da      	str	r2, [r3, #12]

	return true;
    3ca8:	2301      	movs	r3, #1
}
    3caa:	0018      	movs	r0, r3
    3cac:	46bd      	mov	sp, r7
    3cae:	b006      	add	sp, #24
    3cb0:	bd80      	pop	{r7, pc}
    3cb2:	46c0      	nop			; (mov r8, r8)
    3cb4:	00003393 	.word	0x00003393

00003cb8 <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    3cb8:	b580      	push	{r7, lr}
    3cba:	b086      	sub	sp, #24
    3cbc:	af00      	add	r7, sp, #0
    3cbe:	60f8      	str	r0, [r7, #12]
    3cc0:	60b9      	str	r1, [r7, #8]
    3cc2:	607a      	str	r2, [r7, #4]
    3cc4:	001a      	movs	r2, r3
    3cc6:	1cbb      	adds	r3, r7, #2
    3cc8:	801a      	strh	r2, [r3, #0]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    3cca:	68bb      	ldr	r3, [r7, #8]
    3ccc:	2201      	movs	r2, #1
    3cce:	4013      	ands	r3, r2
    3cd0:	d02b      	beq.n	3d2a <_spi_tx_check_and_send+0x72>
		return;
	}

	if (ctrl->txbuf) {
    3cd2:	687b      	ldr	r3, [r7, #4]
    3cd4:	681b      	ldr	r3, [r3, #0]
    3cd6:	2b00      	cmp	r3, #0
    3cd8:	d018      	beq.n	3d0c <_spi_tx_check_and_send+0x54>
		data = *ctrl->txbuf++;
    3cda:	687b      	ldr	r3, [r7, #4]
    3cdc:	681b      	ldr	r3, [r3, #0]
    3cde:	1c59      	adds	r1, r3, #1
    3ce0:	687a      	ldr	r2, [r7, #4]
    3ce2:	6011      	str	r1, [r2, #0]
    3ce4:	781b      	ldrb	r3, [r3, #0]
    3ce6:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    3ce8:	687b      	ldr	r3, [r7, #4]
    3cea:	7c1b      	ldrb	r3, [r3, #16]
    3cec:	2b01      	cmp	r3, #1
    3cee:	d910      	bls.n	3d12 <_spi_tx_check_and_send+0x5a>
			data |= (*ctrl->txbuf) << 8;
    3cf0:	687b      	ldr	r3, [r7, #4]
    3cf2:	681b      	ldr	r3, [r3, #0]
    3cf4:	781b      	ldrb	r3, [r3, #0]
    3cf6:	021b      	lsls	r3, r3, #8
    3cf8:	001a      	movs	r2, r3
    3cfa:	697b      	ldr	r3, [r7, #20]
    3cfc:	4313      	orrs	r3, r2
    3cfe:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    3d00:	687b      	ldr	r3, [r7, #4]
    3d02:	681b      	ldr	r3, [r3, #0]
    3d04:	1c5a      	adds	r2, r3, #1
    3d06:	687b      	ldr	r3, [r7, #4]
    3d08:	601a      	str	r2, [r3, #0]
    3d0a:	e002      	b.n	3d12 <_spi_tx_check_and_send+0x5a>
		}
	} else {
		data = dummy;
    3d0c:	1cbb      	adds	r3, r7, #2
    3d0e:	881b      	ldrh	r3, [r3, #0]
    3d10:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    3d12:	687b      	ldr	r3, [r7, #4]
    3d14:	689b      	ldr	r3, [r3, #8]
    3d16:	1c5a      	adds	r2, r3, #1
    3d18:	687b      	ldr	r3, [r7, #4]
    3d1a:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    3d1c:	697a      	ldr	r2, [r7, #20]
    3d1e:	68fb      	ldr	r3, [r7, #12]
    3d20:	0011      	movs	r1, r2
    3d22:	0018      	movs	r0, r3
    3d24:	4b03      	ldr	r3, [pc, #12]	; (3d34 <_spi_tx_check_and_send+0x7c>)
    3d26:	4798      	blx	r3
    3d28:	e000      	b.n	3d2c <_spi_tx_check_and_send+0x74>
		return;
    3d2a:	46c0      	nop			; (mov r8, r8)
}
    3d2c:	46bd      	mov	sp, r7
    3d2e:	b006      	add	sp, #24
    3d30:	bd80      	pop	{r7, pc}
    3d32:	46c0      	nop			; (mov r8, r8)
    3d34:	0000337b 	.word	0x0000337b

00003d38 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    3d38:	b580      	push	{r7, lr}
    3d3a:	b082      	sub	sp, #8
    3d3c:	af00      	add	r7, sp, #0
    3d3e:	6078      	str	r0, [r7, #4]
    3d40:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    3d42:	687b      	ldr	r3, [r7, #4]
    3d44:	2280      	movs	r2, #128	; 0x80
    3d46:	4013      	ands	r3, r2
    3d48:	d00d      	beq.n	3d66 <_spi_err_check+0x2e>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    3d4a:	4a09      	ldr	r2, [pc, #36]	; (3d70 <_spi_err_check+0x38>)
    3d4c:	683b      	ldr	r3, [r7, #0]
    3d4e:	0011      	movs	r1, r2
    3d50:	0018      	movs	r0, r3
    3d52:	4b08      	ldr	r3, [pc, #32]	; (3d74 <_spi_err_check+0x3c>)
    3d54:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    3d56:	683b      	ldr	r3, [r7, #0]
    3d58:	2180      	movs	r1, #128	; 0x80
    3d5a:	0018      	movs	r0, r3
    3d5c:	4b06      	ldr	r3, [pc, #24]	; (3d78 <_spi_err_check+0x40>)
    3d5e:	4798      	blx	r3
		return ERR_OVERFLOW;
    3d60:	2313      	movs	r3, #19
    3d62:	425b      	negs	r3, r3
    3d64:	e000      	b.n	3d68 <_spi_err_check+0x30>
	}

	return ERR_NONE;
    3d66:	2300      	movs	r3, #0
}
    3d68:	0018      	movs	r0, r3
    3d6a:	46bd      	mov	sp, r7
    3d6c:	b002      	add	sp, #8
    3d6e:	bd80      	pop	{r7, pc}
    3d70:	0000ffff 	.word	0x0000ffff
    3d74:	0000341b 	.word	0x0000341b
    3d78:	0000309b 	.word	0x0000309b

00003d7c <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    3d7c:	b590      	push	{r4, r7, lr}
    3d7e:	b08b      	sub	sp, #44	; 0x2c
    3d80:	af00      	add	r7, sp, #0
    3d82:	6078      	str	r0, [r7, #4]
    3d84:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    3d86:	687b      	ldr	r3, [r7, #4]
    3d88:	681b      	ldr	r3, [r3, #0]
    3d8a:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    3d8c:	2300      	movs	r3, #0
    3d8e:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    3d90:	683b      	ldr	r3, [r7, #0]
    3d92:	681a      	ldr	r2, [r3, #0]
    3d94:	2308      	movs	r3, #8
    3d96:	18fb      	adds	r3, r7, r3
    3d98:	601a      	str	r2, [r3, #0]
    3d9a:	683b      	ldr	r3, [r7, #0]
    3d9c:	685a      	ldr	r2, [r3, #4]
    3d9e:	2308      	movs	r3, #8
    3da0:	18fb      	adds	r3, r7, r3
    3da2:	605a      	str	r2, [r3, #4]
    3da4:	2308      	movs	r3, #8
    3da6:	18fb      	adds	r3, r7, r3
    3da8:	2200      	movs	r2, #0
    3daa:	609a      	str	r2, [r3, #8]
    3dac:	2308      	movs	r3, #8
    3dae:	18fb      	adds	r3, r7, r3
    3db0:	2200      	movs	r2, #0
    3db2:	60da      	str	r2, [r3, #12]
    3db4:	687b      	ldr	r3, [r7, #4]
    3db6:	791a      	ldrb	r2, [r3, #4]
    3db8:	2308      	movs	r3, #8
    3dba:	18fb      	adds	r3, r7, r3
    3dbc:	741a      	strb	r2, [r3, #16]

	ASSERT(dev && hw);
    3dbe:	687b      	ldr	r3, [r7, #4]
    3dc0:	2b00      	cmp	r3, #0
    3dc2:	d004      	beq.n	3dce <_spi_m_sync_trans+0x52>
    3dc4:	6a3b      	ldr	r3, [r7, #32]
    3dc6:	2b00      	cmp	r3, #0
    3dc8:	d001      	beq.n	3dce <_spi_m_sync_trans+0x52>
    3dca:	2301      	movs	r3, #1
    3dcc:	e000      	b.n	3dd0 <_spi_m_sync_trans+0x54>
    3dce:	2300      	movs	r3, #0
    3dd0:	1c1a      	adds	r2, r3, #0
    3dd2:	2301      	movs	r3, #1
    3dd4:	4013      	ands	r3, r2
    3dd6:	b2db      	uxtb	r3, r3
    3dd8:	4a34      	ldr	r2, [pc, #208]	; (3eac <_spi_m_sync_trans+0x130>)
    3dda:	4935      	ldr	r1, [pc, #212]	; (3eb0 <_spi_m_sync_trans+0x134>)
    3ddc:	0018      	movs	r0, r3
    3dde:	4b35      	ldr	r3, [pc, #212]	; (3eb4 <_spi_m_sync_trans+0x138>)
    3de0:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    3de2:	6a3b      	ldr	r3, [r7, #32]
    3de4:	2107      	movs	r1, #7
    3de6:	0018      	movs	r0, r3
    3de8:	4b33      	ldr	r3, [pc, #204]	; (3eb8 <_spi_m_sync_trans+0x13c>)
    3dea:	4798      	blx	r3
    3dec:	1e03      	subs	r3, r0, #0
    3dee:	d002      	beq.n	3df6 <_spi_m_sync_trans+0x7a>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    3df0:	2304      	movs	r3, #4
    3df2:	425b      	negs	r3, r3
    3df4:	e055      	b.n	3ea2 <_spi_m_sync_trans+0x126>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    3df6:	6a3b      	ldr	r3, [r7, #32]
    3df8:	0018      	movs	r0, r3
    3dfa:	4b30      	ldr	r3, [pc, #192]	; (3ebc <_spi_m_sync_trans+0x140>)
    3dfc:	4798      	blx	r3
    3dfe:	0003      	movs	r3, r0
    3e00:	001a      	movs	r2, r3
    3e02:	2301      	movs	r3, #1
    3e04:	4053      	eors	r3, r2
    3e06:	b2db      	uxtb	r3, r3
    3e08:	2b00      	cmp	r3, #0
    3e0a:	d002      	beq.n	3e12 <_spi_m_sync_trans+0x96>
		return ERR_NOT_INITIALIZED;
    3e0c:	2314      	movs	r3, #20
    3e0e:	425b      	negs	r3, r3
    3e10:	e047      	b.n	3ea2 <_spi_m_sync_trans+0x126>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    3e12:	6a3b      	ldr	r3, [r7, #32]
    3e14:	0018      	movs	r0, r3
    3e16:	4b2a      	ldr	r3, [pc, #168]	; (3ec0 <_spi_m_sync_trans+0x144>)
    3e18:	4798      	blx	r3
    3e1a:	0003      	movs	r3, r0
    3e1c:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    3e1e:	2308      	movs	r3, #8
    3e20:	18fa      	adds	r2, r7, r3
    3e22:	69f9      	ldr	r1, [r7, #28]
    3e24:	6a3b      	ldr	r3, [r7, #32]
    3e26:	0018      	movs	r0, r3
    3e28:	4b26      	ldr	r3, [pc, #152]	; (3ec4 <_spi_m_sync_trans+0x148>)
    3e2a:	4798      	blx	r3
    3e2c:	0003      	movs	r3, r0
    3e2e:	001a      	movs	r2, r3
    3e30:	2301      	movs	r3, #1
    3e32:	4053      	eors	r3, r2
    3e34:	b2db      	uxtb	r3, r3
    3e36:	2b00      	cmp	r3, #0
    3e38:	d00f      	beq.n	3e5a <_spi_m_sync_trans+0xde>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    3e3a:	2308      	movs	r3, #8
    3e3c:	18fb      	adds	r3, r7, r3
    3e3e:	68da      	ldr	r2, [r3, #12]
    3e40:	2308      	movs	r3, #8
    3e42:	18fb      	adds	r3, r7, r3
    3e44:	689b      	ldr	r3, [r3, #8]
    3e46:	429a      	cmp	r2, r3
    3e48:	d307      	bcc.n	3e5a <_spi_m_sync_trans+0xde>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    3e4a:	687b      	ldr	r3, [r7, #4]
    3e4c:	88db      	ldrh	r3, [r3, #6]
    3e4e:	2208      	movs	r2, #8
    3e50:	18ba      	adds	r2, r7, r2
    3e52:	69f9      	ldr	r1, [r7, #28]
    3e54:	6a38      	ldr	r0, [r7, #32]
    3e56:	4c1c      	ldr	r4, [pc, #112]	; (3ec8 <_spi_m_sync_trans+0x14c>)
    3e58:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    3e5a:	6a3a      	ldr	r2, [r7, #32]
    3e5c:	69fb      	ldr	r3, [r7, #28]
    3e5e:	0011      	movs	r1, r2
    3e60:	0018      	movs	r0, r3
    3e62:	4b1a      	ldr	r3, [pc, #104]	; (3ecc <_spi_m_sync_trans+0x150>)
    3e64:	4798      	blx	r3
    3e66:	0003      	movs	r3, r0
    3e68:	627b      	str	r3, [r7, #36]	; 0x24

		if (rc < 0) {
    3e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3e6c:	2b00      	cmp	r3, #0
    3e6e:	db12      	blt.n	3e96 <_spi_m_sync_trans+0x11a>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    3e70:	2308      	movs	r3, #8
    3e72:	18fb      	adds	r3, r7, r3
    3e74:	689a      	ldr	r2, [r3, #8]
    3e76:	683b      	ldr	r3, [r7, #0]
    3e78:	689b      	ldr	r3, [r3, #8]
    3e7a:	429a      	cmp	r2, r3
    3e7c:	d3c9      	bcc.n	3e12 <_spi_m_sync_trans+0x96>
    3e7e:	2308      	movs	r3, #8
    3e80:	18fb      	adds	r3, r7, r3
    3e82:	68da      	ldr	r2, [r3, #12]
    3e84:	683b      	ldr	r3, [r7, #0]
    3e86:	689b      	ldr	r3, [r3, #8]
    3e88:	429a      	cmp	r2, r3
    3e8a:	d3c2      	bcc.n	3e12 <_spi_m_sync_trans+0x96>
			rc = ctrl.txcnt;
    3e8c:	2308      	movs	r3, #8
    3e8e:	18fb      	adds	r3, r7, r3
    3e90:	689b      	ldr	r3, [r3, #8]
    3e92:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    3e94:	e000      	b.n	3e98 <_spi_m_sync_trans+0x11c>
			break;
    3e96:	46c0      	nop			; (mov r8, r8)
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    3e98:	6a3b      	ldr	r3, [r7, #32]
    3e9a:	0018      	movs	r0, r3
    3e9c:	4b0c      	ldr	r3, [pc, #48]	; (3ed0 <_spi_m_sync_trans+0x154>)
    3e9e:	4798      	blx	r3

	return rc;
    3ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    3ea2:	0018      	movs	r0, r3
    3ea4:	46bd      	mov	sp, r7
    3ea6:	b00b      	add	sp, #44	; 0x2c
    3ea8:	bd90      	pop	{r4, r7, pc}
    3eaa:	46c0      	nop			; (mov r8, r8)
    3eac:	00000a85 	.word	0x00000a85
    3eb0:	000121f4 	.word	0x000121f4
    3eb4:	00002a9d 	.word	0x00002a9d
    3eb8:	00002fef 	.word	0x00002fef
    3ebc:	0000314d 	.word	0x0000314d
    3ec0:	00003085 	.word	0x00003085
    3ec4:	00003c49 	.word	0x00003c49
    3ec8:	00003cb9 	.word	0x00003cb9
    3ecc:	00003d39 	.word	0x00003d39
    3ed0:	00003c15 	.word	0x00003c15

00003ed4 <hri_gclk_get_STATUS_SYNCBUSY_bit>:
{
    3ed4:	b580      	push	{r7, lr}
    3ed6:	b082      	sub	sp, #8
    3ed8:	af00      	add	r7, sp, #0
    3eda:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
    3edc:	687b      	ldr	r3, [r7, #4]
    3ede:	785b      	ldrb	r3, [r3, #1]
    3ee0:	b2db      	uxtb	r3, r3
    3ee2:	09db      	lsrs	r3, r3, #7
    3ee4:	2201      	movs	r2, #1
    3ee6:	4013      	ands	r3, r2
    3ee8:	1e5a      	subs	r2, r3, #1
    3eea:	4193      	sbcs	r3, r2
    3eec:	b2db      	uxtb	r3, r3
}
    3eee:	0018      	movs	r0, r3
    3ef0:	46bd      	mov	sp, r7
    3ef2:	b002      	add	sp, #8
    3ef4:	bd80      	pop	{r7, pc}

00003ef6 <hri_sysctrl_get_PCLKSR_XOSC32KRDY_bit>:
{
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_XOSCRDY) >> SYSCTRL_PCLKSR_XOSCRDY_Pos;
}

static inline bool hri_sysctrl_get_PCLKSR_XOSC32KRDY_bit(const void *const hw)
{
    3ef6:	b580      	push	{r7, lr}
    3ef8:	b082      	sub	sp, #8
    3efa:	af00      	add	r7, sp, #0
    3efc:	6078      	str	r0, [r7, #4]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) >> SYSCTRL_PCLKSR_XOSC32KRDY_Pos;
    3efe:	687b      	ldr	r3, [r7, #4]
    3f00:	68db      	ldr	r3, [r3, #12]
    3f02:	085b      	lsrs	r3, r3, #1
    3f04:	2201      	movs	r2, #1
    3f06:	4013      	ands	r3, r2
    3f08:	1e5a      	subs	r2, r3, #1
    3f0a:	4193      	sbcs	r3, r2
    3f0c:	b2db      	uxtb	r3, r3
}
    3f0e:	0018      	movs	r0, r3
    3f10:	46bd      	mov	sp, r7
    3f12:	b002      	add	sp, #8
    3f14:	bd80      	pop	{r7, pc}

00003f16 <hri_sysctrl_get_PCLKSR_OSC32KRDY_bit>:

static inline bool hri_sysctrl_get_PCLKSR_OSC32KRDY_bit(const void *const hw)
{
    3f16:	b580      	push	{r7, lr}
    3f18:	b082      	sub	sp, #8
    3f1a:	af00      	add	r7, sp, #0
    3f1c:	6078      	str	r0, [r7, #4]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) >> SYSCTRL_PCLKSR_OSC32KRDY_Pos;
    3f1e:	687b      	ldr	r3, [r7, #4]
    3f20:	68db      	ldr	r3, [r3, #12]
    3f22:	089b      	lsrs	r3, r3, #2
    3f24:	2201      	movs	r2, #1
    3f26:	4013      	ands	r3, r2
    3f28:	1e5a      	subs	r2, r3, #1
    3f2a:	4193      	sbcs	r3, r2
    3f2c:	b2db      	uxtb	r3, r3
}
    3f2e:	0018      	movs	r0, r3
    3f30:	46bd      	mov	sp, r7
    3f32:	b002      	add	sp, #8
    3f34:	bd80      	pop	{r7, pc}

00003f36 <hri_sysctrl_get_PCLKSR_OSC8MRDY_bit>:

static inline bool hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(const void *const hw)
{
    3f36:	b580      	push	{r7, lr}
    3f38:	b082      	sub	sp, #8
    3f3a:	af00      	add	r7, sp, #0
    3f3c:	6078      	str	r0, [r7, #4]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    3f3e:	687b      	ldr	r3, [r7, #4]
    3f40:	68db      	ldr	r3, [r3, #12]
    3f42:	08db      	lsrs	r3, r3, #3
    3f44:	2201      	movs	r2, #1
    3f46:	4013      	ands	r3, r2
    3f48:	1e5a      	subs	r2, r3, #1
    3f4a:	4193      	sbcs	r3, r2
    3f4c:	b2db      	uxtb	r3, r3
}
    3f4e:	0018      	movs	r0, r3
    3f50:	46bd      	mov	sp, r7
    3f52:	b002      	add	sp, #8
    3f54:	bd80      	pop	{r7, pc}

00003f56 <hri_sysctrl_get_PCLKSR_DFLLRDY_bit>:

static inline bool hri_sysctrl_get_PCLKSR_DFLLRDY_bit(const void *const hw)
{
    3f56:	b580      	push	{r7, lr}
    3f58:	b082      	sub	sp, #8
    3f5a:	af00      	add	r7, sp, #0
    3f5c:	6078      	str	r0, [r7, #4]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    3f5e:	687b      	ldr	r3, [r7, #4]
    3f60:	68db      	ldr	r3, [r3, #12]
    3f62:	091b      	lsrs	r3, r3, #4
    3f64:	2201      	movs	r2, #1
    3f66:	4013      	ands	r3, r2
    3f68:	1e5a      	subs	r2, r3, #1
    3f6a:	4193      	sbcs	r3, r2
    3f6c:	b2db      	uxtb	r3, r3
}
    3f6e:	0018      	movs	r0, r3
    3f70:	46bd      	mov	sp, r7
    3f72:	b002      	add	sp, #8
    3f74:	bd80      	pop	{r7, pc}

00003f76 <hri_sysctrl_get_PCLKSR_reg>:
{
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DPLLLTO) >> SYSCTRL_PCLKSR_DPLLLTO_Pos;
}

static inline hri_sysctrl_pclksr_reg_t hri_sysctrl_get_PCLKSR_reg(const void *const hw, hri_sysctrl_pclksr_reg_t mask)
{
    3f76:	b580      	push	{r7, lr}
    3f78:	b084      	sub	sp, #16
    3f7a:	af00      	add	r7, sp, #0
    3f7c:	6078      	str	r0, [r7, #4]
    3f7e:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    3f80:	687b      	ldr	r3, [r7, #4]
    3f82:	68db      	ldr	r3, [r3, #12]
    3f84:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    3f86:	68fb      	ldr	r3, [r7, #12]
    3f88:	683a      	ldr	r2, [r7, #0]
    3f8a:	4013      	ands	r3, r2
    3f8c:	60fb      	str	r3, [r7, #12]
	return tmp;
    3f8e:	68fb      	ldr	r3, [r7, #12]
}
    3f90:	0018      	movs	r0, r3
    3f92:	46bd      	mov	sp, r7
    3f94:	b004      	add	sp, #16
    3f96:	bd80      	pop	{r7, pc}

00003f98 <hri_sysctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Sysctrl *)hw)->PCLKSR.reg;
}

static inline bool hri_sysctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw)
{
    3f98:	b580      	push	{r7, lr}
    3f9a:	b082      	sub	sp, #8
    3f9c:	af00      	add	r7, sp, #0
    3f9e:	6078      	str	r0, [r7, #4]
	return (((Sysctrl *)hw)->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_LOCK) >> SYSCTRL_DPLLSTATUS_LOCK_Pos;
    3fa0:	687b      	ldr	r3, [r7, #4]
    3fa2:	2250      	movs	r2, #80	; 0x50
    3fa4:	5c9b      	ldrb	r3, [r3, r2]
    3fa6:	b2db      	uxtb	r3, r3
    3fa8:	001a      	movs	r2, r3
    3faa:	2301      	movs	r3, #1
    3fac:	4013      	ands	r3, r2
    3fae:	1e5a      	subs	r2, r3, #1
    3fb0:	4193      	sbcs	r3, r2
    3fb2:	b2db      	uxtb	r3, r3
}
    3fb4:	0018      	movs	r0, r3
    3fb6:	46bd      	mov	sp, r7
    3fb8:	b002      	add	sp, #8
    3fba:	bd80      	pop	{r7, pc}

00003fbc <hri_sysctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_sysctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw)
{
    3fbc:	b580      	push	{r7, lr}
    3fbe:	b082      	sub	sp, #8
    3fc0:	af00      	add	r7, sp, #0
    3fc2:	6078      	str	r0, [r7, #4]
	return (((Sysctrl *)hw)->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_CLKRDY) >> SYSCTRL_DPLLSTATUS_CLKRDY_Pos;
    3fc4:	687b      	ldr	r3, [r7, #4]
    3fc6:	2250      	movs	r2, #80	; 0x50
    3fc8:	5c9b      	ldrb	r3, [r3, r2]
    3fca:	b2db      	uxtb	r3, r3
    3fcc:	085b      	lsrs	r3, r3, #1
    3fce:	2201      	movs	r2, #1
    3fd0:	4013      	ands	r3, r2
    3fd2:	1e5a      	subs	r2, r3, #1
    3fd4:	4193      	sbcs	r3, r2
    3fd6:	b2db      	uxtb	r3, r3
}
    3fd8:	0018      	movs	r0, r3
    3fda:	46bd      	mov	sp, r7
    3fdc:	b002      	add	sp, #8
    3fde:	bd80      	pop	{r7, pc}

00003fe0 <hri_sysctrl_get_DPLLSTATUS_ENABLE_bit>:

static inline bool hri_sysctrl_get_DPLLSTATUS_ENABLE_bit(const void *const hw)
{
    3fe0:	b580      	push	{r7, lr}
    3fe2:	b082      	sub	sp, #8
    3fe4:	af00      	add	r7, sp, #0
    3fe6:	6078      	str	r0, [r7, #4]
	return (((Sysctrl *)hw)->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE) >> SYSCTRL_DPLLSTATUS_ENABLE_Pos;
    3fe8:	687b      	ldr	r3, [r7, #4]
    3fea:	2250      	movs	r2, #80	; 0x50
    3fec:	5c9b      	ldrb	r3, [r3, r2]
    3fee:	b2db      	uxtb	r3, r3
    3ff0:	089b      	lsrs	r3, r3, #2
    3ff2:	2201      	movs	r2, #1
    3ff4:	4013      	ands	r3, r2
    3ff6:	1e5a      	subs	r2, r3, #1
    3ff8:	4193      	sbcs	r3, r2
    3ffa:	b2db      	uxtb	r3, r3
}
    3ffc:	0018      	movs	r0, r3
    3ffe:	46bd      	mov	sp, r7
    4000:	b002      	add	sp, #8
    4002:	bd80      	pop	{r7, pc}

00004004 <hri_sysctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sysctrl_write_XOSC32K_reg(const void *const hw, hri_sysctrl_xosc32k_reg_t data)
{
    4004:	b580      	push	{r7, lr}
    4006:	b082      	sub	sp, #8
    4008:	af00      	add	r7, sp, #0
    400a:	6078      	str	r0, [r7, #4]
    400c:	000a      	movs	r2, r1
    400e:	1cbb      	adds	r3, r7, #2
    4010:	801a      	strh	r2, [r3, #0]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->XOSC32K.reg = data;
    4012:	687b      	ldr	r3, [r7, #4]
    4014:	1cba      	adds	r2, r7, #2
    4016:	8812      	ldrh	r2, [r2, #0]
    4018:	829a      	strh	r2, [r3, #20]
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    401a:	46c0      	nop			; (mov r8, r8)
    401c:	46bd      	mov	sp, r7
    401e:	b002      	add	sp, #8
    4020:	bd80      	pop	{r7, pc}

00004022 <hri_sysctrl_read_OSC32K_CALIB_bf>:
	((Sysctrl *)hw)->OSC32K.reg ^= SYSCTRL_OSC32K_CALIB(mask);
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_sysctrl_osc32k_reg_t hri_sysctrl_read_OSC32K_CALIB_bf(const void *const hw)
{
    4022:	b580      	push	{r7, lr}
    4024:	b084      	sub	sp, #16
    4026:	af00      	add	r7, sp, #0
    4028:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC32K.reg;
    402a:	687b      	ldr	r3, [r7, #4]
    402c:	699b      	ldr	r3, [r3, #24]
    402e:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SYSCTRL_OSC32K_CALIB_Msk) >> SYSCTRL_OSC32K_CALIB_Pos;
    4030:	68fb      	ldr	r3, [r7, #12]
    4032:	0c1b      	lsrs	r3, r3, #16
    4034:	227f      	movs	r2, #127	; 0x7f
    4036:	4013      	ands	r3, r2
    4038:	60fb      	str	r3, [r7, #12]
	return tmp;
    403a:	68fb      	ldr	r3, [r7, #12]
}
    403c:	0018      	movs	r0, r3
    403e:	46bd      	mov	sp, r7
    4040:	b004      	add	sp, #16
    4042:	bd80      	pop	{r7, pc}

00004044 <hri_sysctrl_write_OSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sysctrl_write_OSC32K_reg(const void *const hw, hri_sysctrl_osc32k_reg_t data)
{
    4044:	b580      	push	{r7, lr}
    4046:	b082      	sub	sp, #8
    4048:	af00      	add	r7, sp, #0
    404a:	6078      	str	r0, [r7, #4]
    404c:	6039      	str	r1, [r7, #0]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC32K.reg = data;
    404e:	687b      	ldr	r3, [r7, #4]
    4050:	683a      	ldr	r2, [r7, #0]
    4052:	619a      	str	r2, [r3, #24]
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    4054:	46c0      	nop			; (mov r8, r8)
    4056:	46bd      	mov	sp, r7
    4058:	b002      	add	sp, #8
    405a:	bd80      	pop	{r7, pc}

0000405c <hri_sysctrl_read_OSCULP32K_CALIB_bf>:
	((Sysctrl *)hw)->OSCULP32K.reg ^= SYSCTRL_OSCULP32K_CALIB(mask);
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_sysctrl_osculp32k_reg_t hri_sysctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    405c:	b580      	push	{r7, lr}
    405e:	b084      	sub	sp, #16
    4060:	af00      	add	r7, sp, #0
    4062:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    4064:	230f      	movs	r3, #15
    4066:	18fb      	adds	r3, r7, r3
    4068:	687a      	ldr	r2, [r7, #4]
    406a:	7f12      	ldrb	r2, [r2, #28]
    406c:	701a      	strb	r2, [r3, #0]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    406e:	230f      	movs	r3, #15
    4070:	18fb      	adds	r3, r7, r3
    4072:	220f      	movs	r2, #15
    4074:	18ba      	adds	r2, r7, r2
    4076:	7812      	ldrb	r2, [r2, #0]
    4078:	211f      	movs	r1, #31
    407a:	400a      	ands	r2, r1
    407c:	701a      	strb	r2, [r3, #0]
	return tmp;
    407e:	230f      	movs	r3, #15
    4080:	18fb      	adds	r3, r7, r3
    4082:	781b      	ldrb	r3, [r3, #0]
}
    4084:	0018      	movs	r0, r3
    4086:	46bd      	mov	sp, r7
    4088:	b004      	add	sp, #16
    408a:	bd80      	pop	{r7, pc}

0000408c <hri_sysctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sysctrl_write_OSCULP32K_reg(const void *const hw, hri_sysctrl_osculp32k_reg_t data)
{
    408c:	b580      	push	{r7, lr}
    408e:	b082      	sub	sp, #8
    4090:	af00      	add	r7, sp, #0
    4092:	6078      	str	r0, [r7, #4]
    4094:	000a      	movs	r2, r1
    4096:	1cfb      	adds	r3, r7, #3
    4098:	701a      	strb	r2, [r3, #0]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    409a:	687b      	ldr	r3, [r7, #4]
    409c:	1cfa      	adds	r2, r7, #3
    409e:	7812      	ldrb	r2, [r2, #0]
    40a0:	771a      	strb	r2, [r3, #28]
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    40a2:	46c0      	nop			; (mov r8, r8)
    40a4:	46bd      	mov	sp, r7
    40a6:	b002      	add	sp, #8
    40a8:	bd80      	pop	{r7, pc}

000040aa <hri_sysctrl_read_OSC8M_CALIB_bf>:
	((Sysctrl *)hw)->OSC8M.reg ^= SYSCTRL_OSC8M_CALIB(mask);
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
    40aa:	b580      	push	{r7, lr}
    40ac:	b084      	sub	sp, #16
    40ae:	af00      	add	r7, sp, #0
    40b0:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    40b2:	687b      	ldr	r3, [r7, #4]
    40b4:	6a1b      	ldr	r3, [r3, #32]
    40b6:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SYSCTRL_OSC8M_CALIB_Msk) >> SYSCTRL_OSC8M_CALIB_Pos;
    40b8:	68fb      	ldr	r3, [r7, #12]
    40ba:	0c1b      	lsrs	r3, r3, #16
    40bc:	051b      	lsls	r3, r3, #20
    40be:	0d1b      	lsrs	r3, r3, #20
    40c0:	60fb      	str	r3, [r7, #12]
	return tmp;
    40c2:	68fb      	ldr	r3, [r7, #12]
}
    40c4:	0018      	movs	r0, r3
    40c6:	46bd      	mov	sp, r7
    40c8:	b004      	add	sp, #16
    40ca:	bd80      	pop	{r7, pc}

000040cc <hri_sysctrl_read_OSC8M_FRANGE_bf>:
	((Sysctrl *)hw)->OSC8M.reg ^= SYSCTRL_OSC8M_FRANGE(mask);
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
    40cc:	b580      	push	{r7, lr}
    40ce:	b084      	sub	sp, #16
    40d0:	af00      	add	r7, sp, #0
    40d2:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    40d4:	687b      	ldr	r3, [r7, #4]
    40d6:	6a1b      	ldr	r3, [r3, #32]
    40d8:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SYSCTRL_OSC8M_FRANGE_Msk) >> SYSCTRL_OSC8M_FRANGE_Pos;
    40da:	68fb      	ldr	r3, [r7, #12]
    40dc:	0f9b      	lsrs	r3, r3, #30
    40de:	60fb      	str	r3, [r7, #12]
	return tmp;
    40e0:	68fb      	ldr	r3, [r7, #12]
}
    40e2:	0018      	movs	r0, r3
    40e4:	46bd      	mov	sp, r7
    40e6:	b004      	add	sp, #16
    40e8:	bd80      	pop	{r7, pc}

000040ea <hri_sysctrl_write_OSC8M_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
    40ea:	b580      	push	{r7, lr}
    40ec:	b082      	sub	sp, #8
    40ee:	af00      	add	r7, sp, #0
    40f0:	6078      	str	r0, [r7, #4]
    40f2:	6039      	str	r1, [r7, #0]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    40f4:	687b      	ldr	r3, [r7, #4]
    40f6:	683a      	ldr	r2, [r7, #0]
    40f8:	621a      	str	r2, [r3, #32]
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    40fa:	46c0      	nop			; (mov r8, r8)
    40fc:	46bd      	mov	sp, r7
    40fe:	b002      	add	sp, #8
    4100:	bd80      	pop	{r7, pc}

00004102 <hri_sysctrl_get_DFLLCTRL_MODE_bit>:
	((Sysctrl *)hw)->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_MODE;
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sysctrl_get_DFLLCTRL_MODE_bit(const void *const hw)
{
    4102:	b580      	push	{r7, lr}
    4104:	b084      	sub	sp, #16
    4106:	af00      	add	r7, sp, #0
    4108:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
    410a:	230e      	movs	r3, #14
    410c:	18fb      	adds	r3, r7, r3
    410e:	687a      	ldr	r2, [r7, #4]
    4110:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    4112:	801a      	strh	r2, [r3, #0]
	tmp = (tmp & SYSCTRL_DFLLCTRL_MODE) >> SYSCTRL_DFLLCTRL_MODE_Pos;
    4114:	230e      	movs	r3, #14
    4116:	18fb      	adds	r3, r7, r3
    4118:	881b      	ldrh	r3, [r3, #0]
    411a:	089b      	lsrs	r3, r3, #2
    411c:	b29a      	uxth	r2, r3
    411e:	230e      	movs	r3, #14
    4120:	18fb      	adds	r3, r7, r3
    4122:	2101      	movs	r1, #1
    4124:	400a      	ands	r2, r1
    4126:	801a      	strh	r2, [r3, #0]
	return (bool)tmp;
    4128:	230e      	movs	r3, #14
    412a:	18fb      	adds	r3, r7, r3
    412c:	881b      	ldrh	r3, [r3, #0]
    412e:	1e5a      	subs	r2, r3, #1
    4130:	4193      	sbcs	r3, r2
    4132:	b2db      	uxtb	r3, r3
}
    4134:	0018      	movs	r0, r3
    4136:	46bd      	mov	sp, r7
    4138:	b004      	add	sp, #16
    413a:	bd80      	pop	{r7, pc}

0000413c <hri_sysctrl_write_DFLLCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
    413c:	b580      	push	{r7, lr}
    413e:	b082      	sub	sp, #8
    4140:	af00      	add	r7, sp, #0
    4142:	6078      	str	r0, [r7, #4]
    4144:	000a      	movs	r2, r1
    4146:	1cbb      	adds	r3, r7, #2
    4148:	801a      	strh	r2, [r3, #0]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    414a:	687b      	ldr	r3, [r7, #4]
    414c:	1cba      	adds	r2, r7, #2
    414e:	8812      	ldrh	r2, [r2, #0]
    4150:	849a      	strh	r2, [r3, #36]	; 0x24
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    4152:	46c0      	nop			; (mov r8, r8)
    4154:	46bd      	mov	sp, r7
    4156:	b002      	add	sp, #8
    4158:	bd80      	pop	{r7, pc}

0000415a <hri_sysctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sysctrl_write_DFLLVAL_reg(const void *const hw, hri_sysctrl_dfllval_reg_t data)
{
    415a:	b580      	push	{r7, lr}
    415c:	b082      	sub	sp, #8
    415e:	af00      	add	r7, sp, #0
    4160:	6078      	str	r0, [r7, #4]
    4162:	6039      	str	r1, [r7, #0]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLVAL.reg = data;
    4164:	687b      	ldr	r3, [r7, #4]
    4166:	683a      	ldr	r2, [r7, #0]
    4168:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    416a:	46c0      	nop			; (mov r8, r8)
    416c:	46bd      	mov	sp, r7
    416e:	b002      	add	sp, #8
    4170:	bd80      	pop	{r7, pc}

00004172 <hri_sysctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
    4172:	b580      	push	{r7, lr}
    4174:	b082      	sub	sp, #8
    4176:	af00      	add	r7, sp, #0
    4178:	6078      	str	r0, [r7, #4]
    417a:	6039      	str	r1, [r7, #0]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
    417c:	687b      	ldr	r3, [r7, #4]
    417e:	683a      	ldr	r2, [r7, #0]
    4180:	62da      	str	r2, [r3, #44]	; 0x2c
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    4182:	46c0      	nop			; (mov r8, r8)
    4184:	46bd      	mov	sp, r7
    4186:	b002      	add	sp, #8
    4188:	bd80      	pop	{r7, pc}

0000418a <hri_sysctrl_write_DPLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sysctrl_write_DPLLCTRLA_reg(const void *const hw, hri_sysctrl_dpllctrla_reg_t data)
{
    418a:	b580      	push	{r7, lr}
    418c:	b082      	sub	sp, #8
    418e:	af00      	add	r7, sp, #0
    4190:	6078      	str	r0, [r7, #4]
    4192:	000a      	movs	r2, r1
    4194:	1cfb      	adds	r3, r7, #3
    4196:	701a      	strb	r2, [r3, #0]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DPLLCTRLA.reg = data;
    4198:	687b      	ldr	r3, [r7, #4]
    419a:	1cfa      	adds	r2, r7, #3
    419c:	2144      	movs	r1, #68	; 0x44
    419e:	7812      	ldrb	r2, [r2, #0]
    41a0:	545a      	strb	r2, [r3, r1]
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    41a2:	46c0      	nop			; (mov r8, r8)
    41a4:	46bd      	mov	sp, r7
    41a6:	b002      	add	sp, #8
    41a8:	bd80      	pop	{r7, pc}

000041aa <hri_sysctrl_write_DPLLRATIO_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sysctrl_write_DPLLRATIO_reg(const void *const hw, hri_sysctrl_dpllratio_reg_t data)
{
    41aa:	b580      	push	{r7, lr}
    41ac:	b082      	sub	sp, #8
    41ae:	af00      	add	r7, sp, #0
    41b0:	6078      	str	r0, [r7, #4]
    41b2:	6039      	str	r1, [r7, #0]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DPLLRATIO.reg = data;
    41b4:	687b      	ldr	r3, [r7, #4]
    41b6:	683a      	ldr	r2, [r7, #0]
    41b8:	649a      	str	r2, [r3, #72]	; 0x48
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    41ba:	46c0      	nop			; (mov r8, r8)
    41bc:	46bd      	mov	sp, r7
    41be:	b002      	add	sp, #8
    41c0:	bd80      	pop	{r7, pc}

000041c2 <hri_sysctrl_write_DPLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sysctrl_write_DPLLCTRLB_reg(const void *const hw, hri_sysctrl_dpllctrlb_reg_t data)
{
    41c2:	b580      	push	{r7, lr}
    41c4:	b082      	sub	sp, #8
    41c6:	af00      	add	r7, sp, #0
    41c8:	6078      	str	r0, [r7, #4]
    41ca:	6039      	str	r1, [r7, #0]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DPLLCTRLB.reg = data;
    41cc:	687b      	ldr	r3, [r7, #4]
    41ce:	683a      	ldr	r2, [r7, #0]
    41d0:	64da      	str	r2, [r3, #76]	; 0x4c
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    41d2:	46c0      	nop			; (mov r8, r8)
    41d4:	46bd      	mov	sp, r7
    41d6:	b002      	add	sp, #8
    41d8:	bd80      	pop	{r7, pc}
	...

000041dc <_sysctrl_init_sources>:
 * \brief Initializes clock generators
 *
 * All GCLK generators are running when this function returns.
 */
void _sysctrl_init_sources(void)
{
    41dc:	b580      	push	{r7, lr}
    41de:	b082      	sub	sp, #8
    41e0:	af00      	add	r7, sp, #0
	void *   hw = (void *)SYSCTRL;
    41e2:	4b39      	ldr	r3, [pc, #228]	; (42c8 <_sysctrl_init_sources+0xec>)
    41e4:	607b      	str	r3, [r7, #4]
	uint16_t calib;

#if CONF_XOSC32K_CONFIG == 1
	hri_sysctrl_write_XOSC32K_reg(
    41e6:	687b      	ldr	r3, [r7, #4]
    41e8:	2166      	movs	r1, #102	; 0x66
    41ea:	0018      	movs	r0, r3
    41ec:	4b37      	ldr	r3, [pc, #220]	; (42cc <_sysctrl_init_sources+0xf0>)
    41ee:	4798      	blx	r3
	        | (CONF_XOSC_RUNSTDBY << SYSCTRL_XOSC_RUNSTDBY_Pos) | (CONF_XOSC_XTALEN << SYSCTRL_XOSC_XTALEN_Pos)
	        | (CONF_XOSC_ENABLE << SYSCTRL_XOSC_ENABLE_Pos));
#endif

#if CONF_OSC8M_CONFIG == 1
	calib = hri_sysctrl_read_OSC8M_CALIB_bf(hw);
    41f0:	687b      	ldr	r3, [r7, #4]
    41f2:	0018      	movs	r0, r3
    41f4:	4b36      	ldr	r3, [pc, #216]	; (42d0 <_sysctrl_init_sources+0xf4>)
    41f6:	4798      	blx	r3
    41f8:	0002      	movs	r2, r0
    41fa:	1cbb      	adds	r3, r7, #2
    41fc:	801a      	strh	r2, [r3, #0]

	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    41fe:	687b      	ldr	r3, [r7, #4]
    4200:	0018      	movs	r0, r3
    4202:	4b34      	ldr	r3, [pc, #208]	; (42d4 <_sysctrl_init_sources+0xf8>)
    4204:	4798      	blx	r3
    4206:	0003      	movs	r3, r0
    4208:	079a      	lsls	r2, r3, #30
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    420a:	1cbb      	adds	r3, r7, #2
    420c:	881b      	ldrh	r3, [r3, #0]
    420e:	041b      	lsls	r3, r3, #16
    4210:	0019      	movs	r1, r3
    4212:	4b31      	ldr	r3, [pc, #196]	; (42d8 <_sysctrl_init_sources+0xfc>)
    4214:	400b      	ands	r3, r1
#endif
	                                SYSCTRL_OSC8M_PRESC(CONF_OSC8M_PRESC)
	                                | (CONF_OSC8M_RUNSTDBY << SYSCTRL_OSC8M_RUNSTDBY_Pos)
    4216:	4313      	orrs	r3, r2
	hri_sysctrl_write_OSC8M_reg(hw,
    4218:	2202      	movs	r2, #2
    421a:	431a      	orrs	r2, r3
    421c:	687b      	ldr	r3, [r7, #4]
    421e:	0011      	movs	r1, r2
    4220:	0018      	movs	r0, r3
    4222:	4b2e      	ldr	r3, [pc, #184]	; (42dc <_sysctrl_init_sources+0x100>)
    4224:	4798      	blx	r3
	                                | (CONF_OSC8M_ENABLE << SYSCTRL_OSC8M_ENABLE_Pos));
#endif

#if CONF_OSC32K_CONFIG == 1
	calib = hri_sysctrl_read_OSC32K_CALIB_bf(hw);
    4226:	687b      	ldr	r3, [r7, #4]
    4228:	0018      	movs	r0, r3
    422a:	4b2d      	ldr	r3, [pc, #180]	; (42e0 <_sysctrl_init_sources+0x104>)
    422c:	4798      	blx	r3
    422e:	0002      	movs	r2, r0
    4230:	1cbb      	adds	r3, r7, #2
    4232:	801a      	strh	r2, [r3, #0]
	hri_sysctrl_write_OSC32K_reg(
	    hw,
#if CONF_OSC32K_OVERWRITE_CALIBRATION == 1
	    SYSCTRL_OSC32K_CALIB(CONF_OSC32K_CALIB) |
#else
	    SYSCTRL_OSC32K_CALIB(calib) |
    4234:	1cbb      	adds	r3, r7, #2
    4236:	881b      	ldrh	r3, [r3, #0]
    4238:	041b      	lsls	r3, r3, #16
    423a:	001a      	movs	r2, r3
#endif
	        (CONF_OSC32K_WRTLOCK << SYSCTRL_OSC32K_WRTLOCK_Pos) | SYSCTRL_OSC32K_STARTUP(CONF_OSC32K_STARTUP)
    423c:	23fe      	movs	r3, #254	; 0xfe
    423e:	03db      	lsls	r3, r3, #15
    4240:	4013      	ands	r3, r2
	        | (CONF_OSC32K_RUNSTDBY << SYSCTRL_OSC32K_RUNSTDBY_Pos) | (CONF_OSC32K_EN1K << SYSCTRL_OSC32K_EN1K_Pos)
	        | (CONF_OSC32K_EN32K << SYSCTRL_OSC32K_EN32K_Pos) | (1 << SYSCTRL_OSC32K_ENABLE_Pos));
    4242:	2246      	movs	r2, #70	; 0x46
    4244:	431a      	orrs	r2, r3
	hri_sysctrl_write_OSC32K_reg(
    4246:	687b      	ldr	r3, [r7, #4]
    4248:	0011      	movs	r1, r2
    424a:	0018      	movs	r0, r3
    424c:	4b25      	ldr	r3, [pc, #148]	; (42e4 <_sysctrl_init_sources+0x108>)
    424e:	4798      	blx	r3
	/* Enable OSC32K anyway since GCLK configuration may need it to sync */
	hri_sysctrl_set_OSC32K_ENABLE_bit(hw);
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_sysctrl_read_OSCULP32K_CALIB_bf(hw);
    4250:	687b      	ldr	r3, [r7, #4]
    4252:	0018      	movs	r0, r3
    4254:	4b24      	ldr	r3, [pc, #144]	; (42e8 <_sysctrl_init_sources+0x10c>)
    4256:	4798      	blx	r3
    4258:	0003      	movs	r3, r0
    425a:	001a      	movs	r2, r3
    425c:	1cbb      	adds	r3, r7, #2
    425e:	801a      	strh	r2, [r3, #0]

	hri_sysctrl_write_OSCULP32K_reg(hw,
    4260:	1cbb      	adds	r3, r7, #2
    4262:	881b      	ldrh	r3, [r3, #0]
    4264:	b2db      	uxtb	r3, r3
    4266:	221f      	movs	r2, #31
    4268:	4013      	ands	r3, r2
    426a:	b2da      	uxtb	r2, r3
    426c:	687b      	ldr	r3, [r7, #4]
    426e:	0011      	movs	r1, r2
    4270:	0018      	movs	r0, r3
    4272:	4b1e      	ldr	r3, [pc, #120]	; (42ec <_sysctrl_init_sources+0x110>)
    4274:	4798      	blx	r3
	                                    (CONF_OSC32K_WRTLOCK << SYSCTRL_OSCULP32K_WRTLOCK_Pos));
#endif

#if CONF_XOSC32K_CONFIG == 1
#if CONF_XOSC32K_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_XOSC32KRDY_bit(hw))
    4276:	46c0      	nop			; (mov r8, r8)
    4278:	687b      	ldr	r3, [r7, #4]
    427a:	0018      	movs	r0, r3
    427c:	4b1c      	ldr	r3, [pc, #112]	; (42f0 <_sysctrl_init_sources+0x114>)
    427e:	4798      	blx	r3
    4280:	0003      	movs	r3, r0
    4282:	001a      	movs	r2, r3
    4284:	2301      	movs	r3, #1
    4286:	4053      	eors	r3, r2
    4288:	b2db      	uxtb	r3, r3
    428a:	2b00      	cmp	r3, #0
    428c:	d1f4      	bne.n	4278 <_sysctrl_init_sources+0x9c>
#endif
#endif

#if CONF_OSC32K_CONFIG == 1
#if CONF_OSC32K_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC32KRDY_bit(hw))
    428e:	46c0      	nop			; (mov r8, r8)
    4290:	687b      	ldr	r3, [r7, #4]
    4292:	0018      	movs	r0, r3
    4294:	4b17      	ldr	r3, [pc, #92]	; (42f4 <_sysctrl_init_sources+0x118>)
    4296:	4798      	blx	r3
    4298:	0003      	movs	r3, r0
    429a:	001a      	movs	r2, r3
    429c:	2301      	movs	r3, #1
    429e:	4053      	eors	r3, r2
    42a0:	b2db      	uxtb	r3, r3
    42a2:	2b00      	cmp	r3, #0
    42a4:	d1f4      	bne.n	4290 <_sysctrl_init_sources+0xb4>
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    42a6:	46c0      	nop			; (mov r8, r8)
    42a8:	687b      	ldr	r3, [r7, #4]
    42aa:	0018      	movs	r0, r3
    42ac:	4b12      	ldr	r3, [pc, #72]	; (42f8 <_sysctrl_init_sources+0x11c>)
    42ae:	4798      	blx	r3
    42b0:	0003      	movs	r3, r0
    42b2:	001a      	movs	r2, r3
    42b4:	2301      	movs	r3, #1
    42b6:	4053      	eors	r3, r2
    42b8:	b2db      	uxtb	r3, r3
    42ba:	2b00      	cmp	r3, #0
    42bc:	d1f4      	bne.n	42a8 <_sysctrl_init_sources+0xcc>
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    42be:	46c0      	nop			; (mov r8, r8)
    42c0:	46bd      	mov	sp, r7
    42c2:	b002      	add	sp, #8
    42c4:	bd80      	pop	{r7, pc}
    42c6:	46c0      	nop			; (mov r8, r8)
    42c8:	40000800 	.word	0x40000800
    42cc:	00004005 	.word	0x00004005
    42d0:	000040ab 	.word	0x000040ab
    42d4:	000040cd 	.word	0x000040cd
    42d8:	0fff0000 	.word	0x0fff0000
    42dc:	000040eb 	.word	0x000040eb
    42e0:	00004023 	.word	0x00004023
    42e4:	00004045 	.word	0x00004045
    42e8:	0000405d 	.word	0x0000405d
    42ec:	0000408d 	.word	0x0000408d
    42f0:	00003ef7 	.word	0x00003ef7
    42f4:	00003f17 	.word	0x00003f17
    42f8:	00003f37 	.word	0x00003f37

000042fc <_sysctrl_init_referenced_generators>:

void _sysctrl_init_referenced_generators(void)
{
    42fc:	b580      	push	{r7, lr}
    42fe:	b084      	sub	sp, #16
    4300:	af00      	add	r7, sp, #0
	void *hw = (void *)SYSCTRL;
    4302:	4b4c      	ldr	r3, [pc, #304]	; (4434 <_sysctrl_init_referenced_generators+0x138>)
    4304:	60fb      	str	r3, [r7, #12]
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != CONF_DFLL_OPEN_LOOP_MODE
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
    4306:	68fb      	ldr	r3, [r7, #12]
    4308:	2102      	movs	r1, #2
    430a:	0018      	movs	r0, r3
    430c:	4b4a      	ldr	r3, [pc, #296]	; (4438 <_sysctrl_init_referenced_generators+0x13c>)
    430e:	4798      	blx	r3
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    4310:	46c0      	nop			; (mov r8, r8)
    4312:	68fb      	ldr	r3, [r7, #12]
    4314:	0018      	movs	r0, r3
    4316:	4b49      	ldr	r3, [pc, #292]	; (443c <_sysctrl_init_referenced_generators+0x140>)
    4318:	4798      	blx	r3
    431a:	0003      	movs	r3, r0
    431c:	001a      	movs	r2, r3
    431e:	2301      	movs	r3, #1
    4320:	4053      	eors	r3, r2
    4322:	b2db      	uxtb	r3, r3
    4324:	2b00      	cmp	r3, #0
    4326:	d1f4      	bne.n	4312 <_sysctrl_init_referenced_generators+0x16>
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
    4328:	4a45      	ldr	r2, [pc, #276]	; (4440 <_sysctrl_init_referenced_generators+0x144>)
    432a:	68fb      	ldr	r3, [r7, #12]
    432c:	0011      	movs	r1, r2
    432e:	0018      	movs	r0, r3
    4330:	4b44      	ldr	r3, [pc, #272]	; (4444 <_sysctrl_init_referenced_generators+0x148>)
    4332:	4798      	blx	r3
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    4334:	4b44      	ldr	r3, [pc, #272]	; (4448 <_sysctrl_init_referenced_generators+0x14c>)
    4336:	681b      	ldr	r3, [r3, #0]
    4338:	0e9b      	lsrs	r3, r3, #26
    433a:	2b3f      	cmp	r3, #63	; 0x3f
    433c:	d009      	beq.n	4352 <_sysctrl_init_referenced_generators+0x56>
    433e:	4b42      	ldr	r3, [pc, #264]	; (4448 <_sysctrl_init_referenced_generators+0x14c>)
    4340:	681b      	ldr	r3, [r3, #0]
    4342:	0e9b      	lsrs	r3, r3, #26
    4344:	029b      	lsls	r3, r3, #10
    4346:	041b      	lsls	r3, r3, #16
    4348:	0c1b      	lsrs	r3, r3, #16
    434a:	2280      	movs	r2, #128	; 0x80
    434c:	0092      	lsls	r2, r2, #2
    434e:	4313      	orrs	r3, r2
    4350:	e001      	b.n	4356 <_sysctrl_init_referenced_generators+0x5a>
    4352:	23fc      	movs	r3, #252	; 0xfc
    4354:	01db      	lsls	r3, r3, #7
    4356:	68fa      	ldr	r2, [r7, #12]
    4358:	0019      	movs	r1, r3
    435a:	0010      	movs	r0, r2
    435c:	4b3b      	ldr	r3, [pc, #236]	; (444c <_sysctrl_init_referenced_generators+0x150>)
    435e:	4798      	blx	r3

	hri_sysctrl_dfllctrl_reg_t tmp =
    4360:	230a      	movs	r3, #10
    4362:	18fb      	adds	r3, r7, r3
    4364:	2293      	movs	r2, #147	; 0x93
    4366:	0052      	lsls	r2, r2, #1
    4368:	801a      	strh	r2, [r3, #0]
	    | (CONF_DFLL_QLDIS << SYSCTRL_DFLLCTRL_QLDIS_Pos) | (CONF_DFLL_CCDIS << SYSCTRL_DFLLCTRL_CCDIS_Pos)
	    | (CONF_DFLL_RUNSTDBY << SYSCTRL_DFLLCTRL_RUNSTDBY_Pos) | (CONF_DFLL_USBCRM << SYSCTRL_DFLLCTRL_USBCRM_Pos)
	    | (CONF_DFLL_LLAW << SYSCTRL_DFLLCTRL_LLAW_Pos) | (CONF_DFLL_STABLE << SYSCTRL_DFLLCTRL_STABLE_Pos)
	    | (CONF_DFLL_MODE << SYSCTRL_DFLLCTRL_MODE_Pos) | (CONF_DFLL_ENABLE << SYSCTRL_DFLLCTRL_ENABLE_Pos);

	hri_sysctrl_write_DFLLCTRL_reg(hw, tmp);
    436a:	230a      	movs	r3, #10
    436c:	18fb      	adds	r3, r7, r3
    436e:	881a      	ldrh	r2, [r3, #0]
    4370:	68fb      	ldr	r3, [r7, #12]
    4372:	0011      	movs	r1, r2
    4374:	0018      	movs	r0, r3
    4376:	4b30      	ldr	r3, [pc, #192]	; (4438 <_sysctrl_init_referenced_generators+0x13c>)
    4378:	4798      	blx	r3
#if CONF_DPLL_REFCLK == SYSCTRL_DPLLCTRLB_REFCLK_GCLK_Val
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(1) | GCLK_CLKCTRL_GEN(CONF_DPLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DPLLCTRLA_reg(hw,
    437a:	68fb      	ldr	r3, [r7, #12]
    437c:	2142      	movs	r1, #66	; 0x42
    437e:	0018      	movs	r0, r3
    4380:	4b33      	ldr	r3, [pc, #204]	; (4450 <_sysctrl_init_referenced_generators+0x154>)
    4382:	4798      	blx	r3
	                                (CONF_DPLL_RUNSTDBY << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_DPLL_ENABLE << SYSCTRL_DPLLCTRLA_ENABLE_Pos));
	hri_sysctrl_write_DPLLRATIO_reg(
    4384:	4a33      	ldr	r2, [pc, #204]	; (4454 <_sysctrl_init_referenced_generators+0x158>)
    4386:	68fb      	ldr	r3, [r7, #12]
    4388:	0011      	movs	r1, r2
    438a:	0018      	movs	r0, r3
    438c:	4b32      	ldr	r3, [pc, #200]	; (4458 <_sysctrl_init_referenced_generators+0x15c>)
    438e:	4798      	blx	r3
	    hw, SYSCTRL_DPLLRATIO_LDRFRAC(CONF_DPLL_LDRFRAC) | SYSCTRL_DPLLRATIO_LDR(CONF_DPLL_LDR));
	hri_sysctrl_write_DPLLCTRLB_reg(
    4390:	68fb      	ldr	r3, [r7, #12]
    4392:	2100      	movs	r1, #0
    4394:	0018      	movs	r0, r3
    4396:	4b31      	ldr	r3, [pc, #196]	; (445c <_sysctrl_init_referenced_generators+0x160>)
    4398:	4798      	blx	r3
	        | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
    439a:	68fb      	ldr	r3, [r7, #12]
    439c:	0018      	movs	r0, r3
    439e:	4b30      	ldr	r3, [pc, #192]	; (4460 <_sysctrl_init_referenced_generators+0x164>)
    43a0:	4798      	blx	r3
    43a2:	1e03      	subs	r3, r0, #0
    43a4:	d00d      	beq.n	43c2 <_sysctrl_init_referenced_generators+0xc6>

#if CONF_DFLL_USBCRM == 0
		hri_sysctrl_pclksr_reg_t status_mask
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;
#else
		hri_sysctrl_pclksr_reg_t status_mask = SYSCTRL_PCLKSR_DFLLRDY;
    43a6:	2310      	movs	r3, #16
    43a8:	607b      	str	r3, [r7, #4]
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
    43aa:	46c0      	nop			; (mov r8, r8)
    43ac:	687a      	ldr	r2, [r7, #4]
    43ae:	68fb      	ldr	r3, [r7, #12]
    43b0:	0011      	movs	r1, r2
    43b2:	0018      	movs	r0, r3
    43b4:	4b2b      	ldr	r3, [pc, #172]	; (4464 <_sysctrl_init_referenced_generators+0x168>)
    43b6:	4798      	blx	r3
    43b8:	0002      	movs	r2, r0
    43ba:	687b      	ldr	r3, [r7, #4]
    43bc:	429a      	cmp	r2, r3
    43be:	d1f5      	bne.n	43ac <_sysctrl_init_referenced_generators+0xb0>
    43c0:	e00b      	b.n	43da <_sysctrl_init_referenced_generators+0xde>
			;
	} else {
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    43c2:	46c0      	nop			; (mov r8, r8)
    43c4:	68fb      	ldr	r3, [r7, #12]
    43c6:	0018      	movs	r0, r3
    43c8:	4b1c      	ldr	r3, [pc, #112]	; (443c <_sysctrl_init_referenced_generators+0x140>)
    43ca:	4798      	blx	r3
    43cc:	0003      	movs	r3, r0
    43ce:	001a      	movs	r2, r3
    43d0:	2301      	movs	r3, #1
    43d2:	4053      	eors	r3, r2
    43d4:	b2db      	uxtb	r3, r3
    43d6:	2b00      	cmp	r3, #0
    43d8:	d1f4      	bne.n	43c4 <_sysctrl_init_referenced_generators+0xc8>
#endif
#endif

#if CONF_DPLL_CONFIG == 1
#if CONF_DPLL_ENABLE == 1
	while (!(hri_sysctrl_get_DPLLSTATUS_ENABLE_bit(hw) || hri_sysctrl_get_DPLLSTATUS_LOCK_bit(hw)
    43da:	46c0      	nop			; (mov r8, r8)
    43dc:	68fb      	ldr	r3, [r7, #12]
    43de:	0018      	movs	r0, r3
    43e0:	4b21      	ldr	r3, [pc, #132]	; (4468 <_sysctrl_init_referenced_generators+0x16c>)
    43e2:	4798      	blx	r3
    43e4:	0003      	movs	r3, r0
    43e6:	001a      	movs	r2, r3
    43e8:	2301      	movs	r3, #1
    43ea:	4053      	eors	r3, r2
    43ec:	b2db      	uxtb	r3, r3
    43ee:	2b00      	cmp	r3, #0
    43f0:	d015      	beq.n	441e <_sysctrl_init_referenced_generators+0x122>
    43f2:	68fb      	ldr	r3, [r7, #12]
    43f4:	0018      	movs	r0, r3
    43f6:	4b1d      	ldr	r3, [pc, #116]	; (446c <_sysctrl_init_referenced_generators+0x170>)
    43f8:	4798      	blx	r3
    43fa:	0003      	movs	r3, r0
    43fc:	001a      	movs	r2, r3
    43fe:	2301      	movs	r3, #1
    4400:	4053      	eors	r3, r2
    4402:	b2db      	uxtb	r3, r3
    4404:	2b00      	cmp	r3, #0
    4406:	d00a      	beq.n	441e <_sysctrl_init_referenced_generators+0x122>
	         || hri_sysctrl_get_DPLLSTATUS_CLKRDY_bit(hw)))
    4408:	68fb      	ldr	r3, [r7, #12]
    440a:	0018      	movs	r0, r3
    440c:	4b18      	ldr	r3, [pc, #96]	; (4470 <_sysctrl_init_referenced_generators+0x174>)
    440e:	4798      	blx	r3
    4410:	0003      	movs	r3, r0
    4412:	001a      	movs	r2, r3
    4414:	2301      	movs	r3, #1
    4416:	4053      	eors	r3, r2
    4418:	b2db      	uxtb	r3, r3
	while (!(hri_sysctrl_get_DPLLSTATUS_ENABLE_bit(hw) || hri_sysctrl_get_DPLLSTATUS_LOCK_bit(hw)
    441a:	2b00      	cmp	r3, #0
    441c:	d1de      	bne.n	43dc <_sysctrl_init_referenced_generators+0xe0>
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
    441e:	46c0      	nop			; (mov r8, r8)
    4420:	4b14      	ldr	r3, [pc, #80]	; (4474 <_sysctrl_init_referenced_generators+0x178>)
    4422:	0018      	movs	r0, r3
    4424:	4b14      	ldr	r3, [pc, #80]	; (4478 <_sysctrl_init_referenced_generators+0x17c>)
    4426:	4798      	blx	r3
    4428:	1e03      	subs	r3, r0, #0
    442a:	d1f9      	bne.n	4420 <_sysctrl_init_referenced_generators+0x124>
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    442c:	46c0      	nop			; (mov r8, r8)
    442e:	46bd      	mov	sp, r7
    4430:	b004      	add	sp, #16
    4432:	bd80      	pop	{r7, pc}
    4434:	40000800 	.word	0x40000800
    4438:	0000413d 	.word	0x0000413d
    443c:	00003f57 	.word	0x00003f57
    4440:	0401bb80 	.word	0x0401bb80
    4444:	00004173 	.word	0x00004173
    4448:	00806024 	.word	0x00806024
    444c:	0000415b 	.word	0x0000415b
    4450:	0000418b 	.word	0x0000418b
    4454:	000e05b7 	.word	0x000e05b7
    4458:	000041ab 	.word	0x000041ab
    445c:	000041c3 	.word	0x000041c3
    4460:	00004103 	.word	0x00004103
    4464:	00003f77 	.word	0x00003f77
    4468:	00003fe1 	.word	0x00003fe1
    446c:	00003f99 	.word	0x00003f99
    4470:	00003fbd 	.word	0x00003fbd
    4474:	40000c00 	.word	0x40000c00
    4478:	00003ed5 	.word	0x00003ed5

0000447c <_system_time_init>:

/**
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
    447c:	b580      	push	{r7, lr}
    447e:	b082      	sub	sp, #8
    4480:	af00      	add	r7, sp, #0
    4482:	6078      	str	r0, [r7, #4]
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    4484:	4b04      	ldr	r3, [pc, #16]	; (4498 <_system_time_init+0x1c>)
    4486:	4a05      	ldr	r2, [pc, #20]	; (449c <_system_time_init+0x20>)
    4488:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    448a:	4b03      	ldr	r3, [pc, #12]	; (4498 <_system_time_init+0x1c>)
    448c:	2205      	movs	r2, #5
    448e:	601a      	str	r2, [r3, #0]
	                | (1 << SysTick_CTRL_CLKSOURCE_Pos);
}
    4490:	46c0      	nop			; (mov r8, r8)
    4492:	46bd      	mov	sp, r7
    4494:	b002      	add	sp, #8
    4496:	bd80      	pop	{r7, pc}
    4498:	e000e010 	.word	0xe000e010
    449c:	00ffffff 	.word	0x00ffffff

000044a0 <_delay_init>:
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
    44a0:	b580      	push	{r7, lr}
    44a2:	b082      	sub	sp, #8
    44a4:	af00      	add	r7, sp, #0
    44a6:	6078      	str	r0, [r7, #4]
	_system_time_init(hw);
    44a8:	687b      	ldr	r3, [r7, #4]
    44aa:	0018      	movs	r0, r3
    44ac:	4b02      	ldr	r3, [pc, #8]	; (44b8 <_delay_init+0x18>)
    44ae:	4798      	blx	r3
}
    44b0:	46c0      	nop			; (mov r8, r8)
    44b2:	46bd      	mov	sp, r7
    44b4:	b002      	add	sp, #8
    44b6:	bd80      	pop	{r7, pc}
    44b8:	0000447d 	.word	0x0000447d

000044bc <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    44bc:	b580      	push	{r7, lr}
    44be:	b084      	sub	sp, #16
    44c0:	af00      	add	r7, sp, #0
    44c2:	6078      	str	r0, [r7, #4]
    44c4:	6039      	str	r1, [r7, #0]
	(void)hw;
	uint8_t  n   = cycles >> 24;
    44c6:	683b      	ldr	r3, [r7, #0]
    44c8:	0e1a      	lsrs	r2, r3, #24
    44ca:	230f      	movs	r3, #15
    44cc:	18fb      	adds	r3, r7, r3
    44ce:	701a      	strb	r2, [r3, #0]
	uint32_t buf = cycles;
    44d0:	683b      	ldr	r3, [r7, #0]
    44d2:	60bb      	str	r3, [r7, #8]

	while (n--) {
    44d4:	e011      	b.n	44fa <_delay_cycles+0x3e>
		SysTick->LOAD = 0xFFFFFF;
    44d6:	4b16      	ldr	r3, [pc, #88]	; (4530 <_delay_cycles+0x74>)
    44d8:	4a16      	ldr	r2, [pc, #88]	; (4534 <_delay_cycles+0x78>)
    44da:	605a      	str	r2, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
    44dc:	4b14      	ldr	r3, [pc, #80]	; (4530 <_delay_cycles+0x74>)
    44de:	4a15      	ldr	r2, [pc, #84]	; (4534 <_delay_cycles+0x78>)
    44e0:	609a      	str	r2, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    44e2:	46c0      	nop			; (mov r8, r8)
    44e4:	4b12      	ldr	r3, [pc, #72]	; (4530 <_delay_cycles+0x74>)
    44e6:	681a      	ldr	r2, [r3, #0]
    44e8:	2380      	movs	r3, #128	; 0x80
    44ea:	025b      	lsls	r3, r3, #9
    44ec:	4013      	ands	r3, r2
    44ee:	d0f9      	beq.n	44e4 <_delay_cycles+0x28>
			;
		buf -= 0xFFFFFF;
    44f0:	68bb      	ldr	r3, [r7, #8]
    44f2:	4a11      	ldr	r2, [pc, #68]	; (4538 <_delay_cycles+0x7c>)
    44f4:	4694      	mov	ip, r2
    44f6:	4463      	add	r3, ip
    44f8:	60bb      	str	r3, [r7, #8]
	while (n--) {
    44fa:	230f      	movs	r3, #15
    44fc:	18fb      	adds	r3, r7, r3
    44fe:	781b      	ldrb	r3, [r3, #0]
    4500:	220f      	movs	r2, #15
    4502:	18ba      	adds	r2, r7, r2
    4504:	1e59      	subs	r1, r3, #1
    4506:	7011      	strb	r1, [r2, #0]
    4508:	2b00      	cmp	r3, #0
    450a:	d1e4      	bne.n	44d6 <_delay_cycles+0x1a>
	}

	SysTick->LOAD = buf;
    450c:	4b08      	ldr	r3, [pc, #32]	; (4530 <_delay_cycles+0x74>)
    450e:	68ba      	ldr	r2, [r7, #8]
    4510:	605a      	str	r2, [r3, #4]
	SysTick->VAL  = buf;
    4512:	4b07      	ldr	r3, [pc, #28]	; (4530 <_delay_cycles+0x74>)
    4514:	68ba      	ldr	r2, [r7, #8]
    4516:	609a      	str	r2, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    4518:	46c0      	nop			; (mov r8, r8)
    451a:	4b05      	ldr	r3, [pc, #20]	; (4530 <_delay_cycles+0x74>)
    451c:	681a      	ldr	r2, [r3, #0]
    451e:	2380      	movs	r3, #128	; 0x80
    4520:	025b      	lsls	r3, r3, #9
    4522:	4013      	ands	r3, r2
    4524:	d0f9      	beq.n	451a <_delay_cycles+0x5e>
		;
}
    4526:	46c0      	nop			; (mov r8, r8)
    4528:	46bd      	mov	sp, r7
    452a:	b004      	add	sp, #16
    452c:	bd80      	pop	{r7, pc}
    452e:	46c0      	nop			; (mov r8, r8)
    4530:	e000e010 	.word	0xe000e010
    4534:	00ffffff 	.word	0x00ffffff
    4538:	ff000001 	.word	0xff000001

0000453c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    453c:	b580      	push	{r7, lr}
    453e:	b082      	sub	sp, #8
    4540:	af00      	add	r7, sp, #0
    4542:	0002      	movs	r2, r0
    4544:	1dfb      	adds	r3, r7, #7
    4546:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    4548:	1dfb      	adds	r3, r7, #7
    454a:	781b      	ldrb	r3, [r3, #0]
    454c:	2b7f      	cmp	r3, #127	; 0x7f
    454e:	d809      	bhi.n	4564 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4550:	4b06      	ldr	r3, [pc, #24]	; (456c <__NVIC_EnableIRQ+0x30>)
    4552:	1dfa      	adds	r2, r7, #7
    4554:	7812      	ldrb	r2, [r2, #0]
    4556:	0011      	movs	r1, r2
    4558:	221f      	movs	r2, #31
    455a:	400a      	ands	r2, r1
    455c:	2101      	movs	r1, #1
    455e:	4091      	lsls	r1, r2
    4560:	000a      	movs	r2, r1
    4562:	601a      	str	r2, [r3, #0]
  }
}
    4564:	46c0      	nop			; (mov r8, r8)
    4566:	46bd      	mov	sp, r7
    4568:	b002      	add	sp, #8
    456a:	bd80      	pop	{r7, pc}
    456c:	e000e100 	.word	0xe000e100

00004570 <hri_sysctrl_get_PCLKSR_reg>:
{
    4570:	b580      	push	{r7, lr}
    4572:	b084      	sub	sp, #16
    4574:	af00      	add	r7, sp, #0
    4576:	6078      	str	r0, [r7, #4]
    4578:	6039      	str	r1, [r7, #0]
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    457a:	687b      	ldr	r3, [r7, #4]
    457c:	68db      	ldr	r3, [r3, #12]
    457e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    4580:	68fb      	ldr	r3, [r7, #12]
    4582:	683a      	ldr	r2, [r7, #0]
    4584:	4013      	ands	r3, r2
    4586:	60fb      	str	r3, [r7, #12]
	return tmp;
    4588:	68fb      	ldr	r3, [r7, #12]
}
    458a:	0018      	movs	r0, r3
    458c:	46bd      	mov	sp, r7
    458e:	b004      	add	sp, #16
    4590:	bd80      	pop	{r7, pc}

00004592 <hri_sysctrl_get_DPLLSTATUS_reg>:
{
    4592:	b580      	push	{r7, lr}
    4594:	b084      	sub	sp, #16
    4596:	af00      	add	r7, sp, #0
    4598:	6078      	str	r0, [r7, #4]
    459a:	000a      	movs	r2, r1
    459c:	1cfb      	adds	r3, r7, #3
    459e:	701a      	strb	r2, [r3, #0]
	tmp = ((Sysctrl *)hw)->DPLLSTATUS.reg;
    45a0:	230f      	movs	r3, #15
    45a2:	18fb      	adds	r3, r7, r3
    45a4:	687a      	ldr	r2, [r7, #4]
    45a6:	2150      	movs	r1, #80	; 0x50
    45a8:	5c52      	ldrb	r2, [r2, r1]
    45aa:	701a      	strb	r2, [r3, #0]
	tmp &= mask;
    45ac:	230f      	movs	r3, #15
    45ae:	18fb      	adds	r3, r7, r3
    45b0:	220f      	movs	r2, #15
    45b2:	18ba      	adds	r2, r7, r2
    45b4:	1cf9      	adds	r1, r7, #3
    45b6:	7812      	ldrb	r2, [r2, #0]
    45b8:	7809      	ldrb	r1, [r1, #0]
    45ba:	400a      	ands	r2, r1
    45bc:	701a      	strb	r2, [r3, #0]
	return tmp;
    45be:	230f      	movs	r3, #15
    45c0:	18fb      	adds	r3, r7, r3
    45c2:	781b      	ldrb	r3, [r3, #0]
}
    45c4:	0018      	movs	r0, r3
    45c6:	46bd      	mov	sp, r7
    45c8:	b004      	add	sp, #16
    45ca:	bd80      	pop	{r7, pc}

000045cc <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    45cc:	b580      	push	{r7, lr}
    45ce:	b082      	sub	sp, #8
    45d0:	af00      	add	r7, sp, #0
    45d2:	6078      	str	r0, [r7, #4]
    45d4:	000a      	movs	r2, r1
    45d6:	1cfb      	adds	r3, r7, #3
    45d8:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    45da:	46c0      	nop			; (mov r8, r8)
    45dc:	687b      	ldr	r3, [r7, #4]
    45de:	789b      	ldrb	r3, [r3, #2]
    45e0:	b2db      	uxtb	r3, r3
    45e2:	1cfa      	adds	r2, r7, #3
    45e4:	7812      	ldrb	r2, [r2, #0]
    45e6:	4013      	ands	r3, r2
    45e8:	b2db      	uxtb	r3, r3
    45ea:	2b00      	cmp	r3, #0
    45ec:	d1f6      	bne.n	45dc <hri_usb_wait_for_sync+0x10>
	};
}
    45ee:	46c0      	nop			; (mov r8, r8)
    45f0:	46bd      	mov	sp, r7
    45f2:	b002      	add	sp, #8
    45f4:	bd80      	pop	{r7, pc}

000045f6 <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    45f6:	b580      	push	{r7, lr}
    45f8:	b082      	sub	sp, #8
    45fa:	af00      	add	r7, sp, #0
    45fc:	6078      	str	r0, [r7, #4]
    45fe:	000a      	movs	r2, r1
    4600:	1cfb      	adds	r3, r7, #3
    4602:	701a      	strb	r2, [r3, #0]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    4604:	687b      	ldr	r3, [r7, #4]
    4606:	789b      	ldrb	r3, [r3, #2]
    4608:	b2db      	uxtb	r3, r3
    460a:	1cfa      	adds	r2, r7, #3
    460c:	7812      	ldrb	r2, [r2, #0]
    460e:	4013      	ands	r3, r2
    4610:	b2db      	uxtb	r3, r3
    4612:	1e5a      	subs	r2, r3, #1
    4614:	4193      	sbcs	r3, r2
    4616:	b2db      	uxtb	r3, r3
}
    4618:	0018      	movs	r0, r3
    461a:	46bd      	mov	sp, r7
    461c:	b002      	add	sp, #8
    461e:	bd80      	pop	{r7, pc}

00004620 <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    4620:	b580      	push	{r7, lr}
    4622:	b084      	sub	sp, #16
    4624:	af00      	add	r7, sp, #0
    4626:	6078      	str	r0, [r7, #4]
    4628:	0008      	movs	r0, r1
    462a:	0011      	movs	r1, r2
    462c:	1cfb      	adds	r3, r7, #3
    462e:	1c02      	adds	r2, r0, #0
    4630:	701a      	strb	r2, [r3, #0]
    4632:	1cbb      	adds	r3, r7, #2
    4634:	1c0a      	adds	r2, r1, #0
    4636:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    4638:	1cfb      	adds	r3, r7, #3
    463a:	781a      	ldrb	r2, [r3, #0]
    463c:	230f      	movs	r3, #15
    463e:	18fb      	adds	r3, r7, r3
    4640:	6879      	ldr	r1, [r7, #4]
    4642:	3208      	adds	r2, #8
    4644:	0152      	lsls	r2, r2, #5
    4646:	188a      	adds	r2, r1, r2
    4648:	3207      	adds	r2, #7
    464a:	7812      	ldrb	r2, [r2, #0]
    464c:	701a      	strb	r2, [r3, #0]
	tmp &= mask;
    464e:	230f      	movs	r3, #15
    4650:	18fb      	adds	r3, r7, r3
    4652:	220f      	movs	r2, #15
    4654:	18ba      	adds	r2, r7, r2
    4656:	1cb9      	adds	r1, r7, #2
    4658:	7812      	ldrb	r2, [r2, #0]
    465a:	7809      	ldrb	r1, [r1, #0]
    465c:	400a      	ands	r2, r1
    465e:	701a      	strb	r2, [r3, #0]
	return tmp;
    4660:	230f      	movs	r3, #15
    4662:	18fb      	adds	r3, r7, r3
    4664:	781b      	ldrb	r3, [r3, #0]
}
    4666:	0018      	movs	r0, r3
    4668:	46bd      	mov	sp, r7
    466a:	b004      	add	sp, #16
    466c:	bd80      	pop	{r7, pc}

0000466e <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    466e:	b580      	push	{r7, lr}
    4670:	b082      	sub	sp, #8
    4672:	af00      	add	r7, sp, #0
    4674:	6078      	str	r0, [r7, #4]
    4676:	000a      	movs	r2, r1
    4678:	1cfb      	adds	r3, r7, #3
    467a:	701a      	strb	r2, [r3, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    467c:	1cfb      	adds	r3, r7, #3
    467e:	781b      	ldrb	r3, [r3, #0]
    4680:	687a      	ldr	r2, [r7, #4]
    4682:	3308      	adds	r3, #8
    4684:	015b      	lsls	r3, r3, #5
    4686:	18d3      	adds	r3, r2, r3
    4688:	3307      	adds	r3, #7
    468a:	781b      	ldrb	r3, [r3, #0]
    468c:	b2db      	uxtb	r3, r3
}
    468e:	0018      	movs	r0, r3
    4690:	46bd      	mov	sp, r7
    4692:	b002      	add	sp, #8
    4694:	bd80      	pop	{r7, pc}

00004696 <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    4696:	b580      	push	{r7, lr}
    4698:	b082      	sub	sp, #8
    469a:	af00      	add	r7, sp, #0
    469c:	6078      	str	r0, [r7, #4]
    469e:	0008      	movs	r0, r1
    46a0:	0011      	movs	r1, r2
    46a2:	1cfb      	adds	r3, r7, #3
    46a4:	1c02      	adds	r2, r0, #0
    46a6:	701a      	strb	r2, [r3, #0]
    46a8:	1cbb      	adds	r3, r7, #2
    46aa:	1c0a      	adds	r2, r1, #0
    46ac:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    46ae:	1cfb      	adds	r3, r7, #3
    46b0:	781b      	ldrb	r3, [r3, #0]
    46b2:	687a      	ldr	r2, [r7, #4]
    46b4:	3308      	adds	r3, #8
    46b6:	015b      	lsls	r3, r3, #5
    46b8:	18d3      	adds	r3, r2, r3
    46ba:	3307      	adds	r3, #7
    46bc:	1cba      	adds	r2, r7, #2
    46be:	7812      	ldrb	r2, [r2, #0]
    46c0:	701a      	strb	r2, [r3, #0]
}
    46c2:	46c0      	nop			; (mov r8, r8)
    46c4:	46bd      	mov	sp, r7
    46c6:	b002      	add	sp, #8
    46c8:	bd80      	pop	{r7, pc}

000046ca <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    46ca:	b580      	push	{r7, lr}
    46cc:	b082      	sub	sp, #8
    46ce:	af00      	add	r7, sp, #0
    46d0:	6078      	str	r0, [r7, #4]
    46d2:	0008      	movs	r0, r1
    46d4:	0011      	movs	r1, r2
    46d6:	1cfb      	adds	r3, r7, #3
    46d8:	1c02      	adds	r2, r0, #0
    46da:	701a      	strb	r2, [r3, #0]
    46dc:	1cbb      	adds	r3, r7, #2
    46de:	1c0a      	adds	r2, r1, #0
    46e0:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    46e2:	1cfb      	adds	r3, r7, #3
    46e4:	781b      	ldrb	r3, [r3, #0]
    46e6:	687a      	ldr	r2, [r7, #4]
    46e8:	3308      	adds	r3, #8
    46ea:	015b      	lsls	r3, r3, #5
    46ec:	18d3      	adds	r3, r2, r3
    46ee:	3305      	adds	r3, #5
    46f0:	1cba      	adds	r2, r7, #2
    46f2:	7812      	ldrb	r2, [r2, #0]
    46f4:	701a      	strb	r2, [r3, #0]
}
    46f6:	46c0      	nop			; (mov r8, r8)
    46f8:	46bd      	mov	sp, r7
    46fa:	b002      	add	sp, #8
    46fc:	bd80      	pop	{r7, pc}

000046fe <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    46fe:	b580      	push	{r7, lr}
    4700:	b082      	sub	sp, #8
    4702:	af00      	add	r7, sp, #0
    4704:	6078      	str	r0, [r7, #4]
    4706:	000a      	movs	r2, r1
    4708:	1cfb      	adds	r3, r7, #3
    470a:	701a      	strb	r2, [r3, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    470c:	1cfb      	adds	r3, r7, #3
    470e:	781b      	ldrb	r3, [r3, #0]
    4710:	687a      	ldr	r2, [r7, #4]
    4712:	3308      	adds	r3, #8
    4714:	015b      	lsls	r3, r3, #5
    4716:	18d3      	adds	r3, r2, r3
    4718:	3306      	adds	r3, #6
    471a:	781b      	ldrb	r3, [r3, #0]
    471c:	b2db      	uxtb	r3, r3
}
    471e:	0018      	movs	r0, r3
    4720:	46bd      	mov	sp, r7
    4722:	b002      	add	sp, #8
    4724:	bd80      	pop	{r7, pc}

00004726 <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    4726:	b580      	push	{r7, lr}
    4728:	b082      	sub	sp, #8
    472a:	af00      	add	r7, sp, #0
    472c:	6078      	str	r0, [r7, #4]
    472e:	0008      	movs	r0, r1
    4730:	0011      	movs	r1, r2
    4732:	1cfb      	adds	r3, r7, #3
    4734:	1c02      	adds	r2, r0, #0
    4736:	701a      	strb	r2, [r3, #0]
    4738:	1cbb      	adds	r3, r7, #2
    473a:	1c0a      	adds	r2, r1, #0
    473c:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    473e:	1cfb      	adds	r3, r7, #3
    4740:	781b      	ldrb	r3, [r3, #0]
    4742:	687a      	ldr	r2, [r7, #4]
    4744:	3308      	adds	r3, #8
    4746:	015b      	lsls	r3, r3, #5
    4748:	18d3      	adds	r3, r2, r3
    474a:	3304      	adds	r3, #4
    474c:	1cba      	adds	r2, r7, #2
    474e:	7812      	ldrb	r2, [r2, #0]
    4750:	701a      	strb	r2, [r3, #0]
}
    4752:	46c0      	nop			; (mov r8, r8)
    4754:	46bd      	mov	sp, r7
    4756:	b002      	add	sp, #8
    4758:	bd80      	pop	{r7, pc}

0000475a <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    475a:	b580      	push	{r7, lr}
    475c:	b082      	sub	sp, #8
    475e:	af00      	add	r7, sp, #0
    4760:	6078      	str	r0, [r7, #4]
    4762:	000a      	movs	r2, r1
    4764:	1cfb      	adds	r3, r7, #3
    4766:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    4768:	1cfb      	adds	r3, r7, #3
    476a:	781a      	ldrb	r2, [r3, #0]
    476c:	6879      	ldr	r1, [r7, #4]
    476e:	2384      	movs	r3, #132	; 0x84
    4770:	005b      	lsls	r3, r3, #1
    4772:	0152      	lsls	r2, r2, #5
    4774:	188a      	adds	r2, r1, r2
    4776:	18d3      	adds	r3, r2, r3
    4778:	2210      	movs	r2, #16
    477a:	701a      	strb	r2, [r3, #0]
}
    477c:	46c0      	nop			; (mov r8, r8)
    477e:	46bd      	mov	sp, r7
    4780:	b002      	add	sp, #8
    4782:	bd80      	pop	{r7, pc}

00004784 <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    4784:	b580      	push	{r7, lr}
    4786:	b082      	sub	sp, #8
    4788:	af00      	add	r7, sp, #0
    478a:	6078      	str	r0, [r7, #4]
    478c:	0008      	movs	r0, r1
    478e:	0011      	movs	r1, r2
    4790:	1cfb      	adds	r3, r7, #3
    4792:	1c02      	adds	r2, r0, #0
    4794:	701a      	strb	r2, [r3, #0]
    4796:	1cbb      	adds	r3, r7, #2
    4798:	1c0a      	adds	r2, r1, #0
    479a:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    479c:	1cfb      	adds	r3, r7, #3
    479e:	781a      	ldrb	r2, [r3, #0]
    47a0:	6879      	ldr	r1, [r7, #4]
    47a2:	230a      	movs	r3, #10
    47a4:	33ff      	adds	r3, #255	; 0xff
    47a6:	0152      	lsls	r2, r2, #5
    47a8:	188a      	adds	r2, r1, r2
    47aa:	18d3      	adds	r3, r2, r3
    47ac:	1cba      	adds	r2, r7, #2
    47ae:	7812      	ldrb	r2, [r2, #0]
    47b0:	701a      	strb	r2, [r3, #0]
}
    47b2:	46c0      	nop			; (mov r8, r8)
    47b4:	46bd      	mov	sp, r7
    47b6:	b002      	add	sp, #8
    47b8:	bd80      	pop	{r7, pc}

000047ba <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    47ba:	b580      	push	{r7, lr}
    47bc:	b082      	sub	sp, #8
    47be:	af00      	add	r7, sp, #0
    47c0:	6078      	str	r0, [r7, #4]
    47c2:	0008      	movs	r0, r1
    47c4:	0011      	movs	r1, r2
    47c6:	1cfb      	adds	r3, r7, #3
    47c8:	1c02      	adds	r2, r0, #0
    47ca:	701a      	strb	r2, [r3, #0]
    47cc:	1cbb      	adds	r3, r7, #2
    47ce:	1c0a      	adds	r2, r1, #0
    47d0:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    47d2:	1cfb      	adds	r3, r7, #3
    47d4:	781a      	ldrb	r2, [r3, #0]
    47d6:	6879      	ldr	r1, [r7, #4]
    47d8:	2384      	movs	r3, #132	; 0x84
    47da:	005b      	lsls	r3, r3, #1
    47dc:	0152      	lsls	r2, r2, #5
    47de:	188a      	adds	r2, r1, r2
    47e0:	18d3      	adds	r3, r2, r3
    47e2:	1cba      	adds	r2, r7, #2
    47e4:	7812      	ldrb	r2, [r2, #0]
    47e6:	701a      	strb	r2, [r3, #0]
}
    47e8:	46c0      	nop			; (mov r8, r8)
    47ea:	46bd      	mov	sp, r7
    47ec:	b002      	add	sp, #8
    47ee:	bd80      	pop	{r7, pc}

000047f0 <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    47f0:	b580      	push	{r7, lr}
    47f2:	b084      	sub	sp, #16
    47f4:	af00      	add	r7, sp, #0
    47f6:	6078      	str	r0, [r7, #4]
    47f8:	000a      	movs	r2, r1
    47fa:	1cfb      	adds	r3, r7, #3
    47fc:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    47fe:	1cfb      	adds	r3, r7, #3
    4800:	7819      	ldrb	r1, [r3, #0]
    4802:	230f      	movs	r3, #15
    4804:	18fb      	adds	r3, r7, r3
    4806:	687a      	ldr	r2, [r7, #4]
    4808:	3108      	adds	r1, #8
    480a:	0149      	lsls	r1, r1, #5
    480c:	5c8a      	ldrb	r2, [r1, r2]
    480e:	701a      	strb	r2, [r3, #0]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    4810:	230f      	movs	r3, #15
    4812:	18fb      	adds	r3, r7, r3
    4814:	220f      	movs	r2, #15
    4816:	18ba      	adds	r2, r7, r2
    4818:	7812      	ldrb	r2, [r2, #0]
    481a:	2107      	movs	r1, #7
    481c:	400a      	ands	r2, r1
    481e:	701a      	strb	r2, [r3, #0]
	return tmp;
    4820:	230f      	movs	r3, #15
    4822:	18fb      	adds	r3, r7, r3
    4824:	781b      	ldrb	r3, [r3, #0]
}
    4826:	0018      	movs	r0, r3
    4828:	46bd      	mov	sp, r7
    482a:	b004      	add	sp, #16
    482c:	bd80      	pop	{r7, pc}

0000482e <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    482e:	b580      	push	{r7, lr}
    4830:	b084      	sub	sp, #16
    4832:	af00      	add	r7, sp, #0
    4834:	6078      	str	r0, [r7, #4]
    4836:	000a      	movs	r2, r1
    4838:	1cfb      	adds	r3, r7, #3
    483a:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    483c:	1cfb      	adds	r3, r7, #3
    483e:	7819      	ldrb	r1, [r3, #0]
    4840:	230f      	movs	r3, #15
    4842:	18fb      	adds	r3, r7, r3
    4844:	687a      	ldr	r2, [r7, #4]
    4846:	3108      	adds	r1, #8
    4848:	0149      	lsls	r1, r1, #5
    484a:	5c8a      	ldrb	r2, [r1, r2]
    484c:	701a      	strb	r2, [r3, #0]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    484e:	230f      	movs	r3, #15
    4850:	18fb      	adds	r3, r7, r3
    4852:	781b      	ldrb	r3, [r3, #0]
    4854:	091b      	lsrs	r3, r3, #4
    4856:	b2da      	uxtb	r2, r3
    4858:	230f      	movs	r3, #15
    485a:	18fb      	adds	r3, r7, r3
    485c:	2107      	movs	r1, #7
    485e:	400a      	ands	r2, r1
    4860:	701a      	strb	r2, [r3, #0]
	return tmp;
    4862:	230f      	movs	r3, #15
    4864:	18fb      	adds	r3, r7, r3
    4866:	781b      	ldrb	r3, [r3, #0]
}
    4868:	0018      	movs	r0, r3
    486a:	46bd      	mov	sp, r7
    486c:	b004      	add	sp, #16
    486e:	bd80      	pop	{r7, pc}

00004870 <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    4870:	b580      	push	{r7, lr}
    4872:	b082      	sub	sp, #8
    4874:	af00      	add	r7, sp, #0
    4876:	6078      	str	r0, [r7, #4]
    4878:	0008      	movs	r0, r1
    487a:	0011      	movs	r1, r2
    487c:	1cfb      	adds	r3, r7, #3
    487e:	1c02      	adds	r2, r0, #0
    4880:	701a      	strb	r2, [r3, #0]
    4882:	1cbb      	adds	r3, r7, #2
    4884:	1c0a      	adds	r2, r1, #0
    4886:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    4888:	1cfb      	adds	r3, r7, #3
    488a:	781a      	ldrb	r2, [r3, #0]
    488c:	687b      	ldr	r3, [r7, #4]
    488e:	3208      	adds	r2, #8
    4890:	0152      	lsls	r2, r2, #5
    4892:	1cb9      	adds	r1, r7, #2
    4894:	7809      	ldrb	r1, [r1, #0]
    4896:	54d1      	strb	r1, [r2, r3]
	USB_CRITICAL_SECTION_LEAVE();
}
    4898:	46c0      	nop			; (mov r8, r8)
    489a:	46bd      	mov	sp, r7
    489c:	b002      	add	sp, #8
    489e:	bd80      	pop	{r7, pc}

000048a0 <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    48a0:	b580      	push	{r7, lr}
    48a2:	b082      	sub	sp, #8
    48a4:	af00      	add	r7, sp, #0
    48a6:	6078      	str	r0, [r7, #4]
    48a8:	000a      	movs	r2, r1
    48aa:	1cfb      	adds	r3, r7, #3
    48ac:	701a      	strb	r2, [r3, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    48ae:	1cfb      	adds	r3, r7, #3
    48b0:	781a      	ldrb	r2, [r3, #0]
    48b2:	687b      	ldr	r3, [r7, #4]
    48b4:	3208      	adds	r2, #8
    48b6:	0152      	lsls	r2, r2, #5
    48b8:	5cd3      	ldrb	r3, [r2, r3]
    48ba:	b2db      	uxtb	r3, r3
}
    48bc:	0018      	movs	r0, r3
    48be:	46bd      	mov	sp, r7
    48c0:	b002      	add	sp, #8
    48c2:	bd80      	pop	{r7, pc}

000048c4 <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    48c4:	b580      	push	{r7, lr}
    48c6:	b082      	sub	sp, #8
    48c8:	af00      	add	r7, sp, #0
    48ca:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    48cc:	687b      	ldr	r3, [r7, #4]
    48ce:	8b9b      	ldrh	r3, [r3, #28]
    48d0:	b29b      	uxth	r3, r3
}
    48d2:	0018      	movs	r0, r3
    48d4:	46bd      	mov	sp, r7
    48d6:	b002      	add	sp, #8
    48d8:	bd80      	pop	{r7, pc}

000048da <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    48da:	b580      	push	{r7, lr}
    48dc:	b082      	sub	sp, #8
    48de:	af00      	add	r7, sp, #0
    48e0:	6078      	str	r0, [r7, #4]
    48e2:	000a      	movs	r2, r1
    48e4:	1cbb      	adds	r3, r7, #2
    48e6:	801a      	strh	r2, [r3, #0]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    48e8:	687b      	ldr	r3, [r7, #4]
    48ea:	1cba      	adds	r2, r7, #2
    48ec:	8812      	ldrh	r2, [r2, #0]
    48ee:	839a      	strh	r2, [r3, #28]
}
    48f0:	46c0      	nop			; (mov r8, r8)
    48f2:	46bd      	mov	sp, r7
    48f4:	b002      	add	sp, #8
    48f6:	bd80      	pop	{r7, pc}

000048f8 <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    48f8:	b580      	push	{r7, lr}
    48fa:	b082      	sub	sp, #8
    48fc:	af00      	add	r7, sp, #0
    48fe:	6078      	str	r0, [r7, #4]
    4900:	000a      	movs	r2, r1
    4902:	1cbb      	adds	r3, r7, #2
    4904:	801a      	strh	r2, [r3, #0]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    4906:	687b      	ldr	r3, [r7, #4]
    4908:	1cba      	adds	r2, r7, #2
    490a:	8812      	ldrh	r2, [r2, #0]
    490c:	831a      	strh	r2, [r3, #24]
}
    490e:	46c0      	nop			; (mov r8, r8)
    4910:	46bd      	mov	sp, r7
    4912:	b002      	add	sp, #8
    4914:	bd80      	pop	{r7, pc}

00004916 <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    4916:	b580      	push	{r7, lr}
    4918:	b082      	sub	sp, #8
    491a:	af00      	add	r7, sp, #0
    491c:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    491e:	687b      	ldr	r3, [r7, #4]
    4920:	8b1b      	ldrh	r3, [r3, #24]
    4922:	b29b      	uxth	r3, r3
}
    4924:	0018      	movs	r0, r3
    4926:	46bd      	mov	sp, r7
    4928:	b002      	add	sp, #8
    492a:	bd80      	pop	{r7, pc}

0000492c <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    492c:	b580      	push	{r7, lr}
    492e:	b082      	sub	sp, #8
    4930:	af00      	add	r7, sp, #0
    4932:	6078      	str	r0, [r7, #4]
    4934:	000a      	movs	r2, r1
    4936:	1cbb      	adds	r3, r7, #2
    4938:	801a      	strh	r2, [r3, #0]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    493a:	687b      	ldr	r3, [r7, #4]
    493c:	1cba      	adds	r2, r7, #2
    493e:	8812      	ldrh	r2, [r2, #0]
    4940:	829a      	strh	r2, [r3, #20]
}
    4942:	46c0      	nop			; (mov r8, r8)
    4944:	46bd      	mov	sp, r7
    4946:	b002      	add	sp, #8
    4948:	bd80      	pop	{r7, pc}

0000494a <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    494a:	b580      	push	{r7, lr}
    494c:	b084      	sub	sp, #16
    494e:	af00      	add	r7, sp, #0
    4950:	6078      	str	r0, [r7, #4]
    4952:	000a      	movs	r2, r1
    4954:	1cfb      	adds	r3, r7, #3
    4956:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    4958:	230f      	movs	r3, #15
    495a:	18fb      	adds	r3, r7, r3
    495c:	687a      	ldr	r2, [r7, #4]
    495e:	7892      	ldrb	r2, [r2, #2]
    4960:	701a      	strb	r2, [r3, #0]
	tmp &= mask;
    4962:	230f      	movs	r3, #15
    4964:	18fb      	adds	r3, r7, r3
    4966:	220f      	movs	r2, #15
    4968:	18ba      	adds	r2, r7, r2
    496a:	1cf9      	adds	r1, r7, #3
    496c:	7812      	ldrb	r2, [r2, #0]
    496e:	7809      	ldrb	r1, [r1, #0]
    4970:	400a      	ands	r2, r1
    4972:	701a      	strb	r2, [r3, #0]
	return tmp;
    4974:	230f      	movs	r3, #15
    4976:	18fb      	adds	r3, r7, r3
    4978:	781b      	ldrb	r3, [r3, #0]
}
    497a:	0018      	movs	r0, r3
    497c:	46bd      	mov	sp, r7
    497e:	b004      	add	sp, #16
    4980:	bd80      	pop	{r7, pc}
	...

00004984 <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    4984:	b580      	push	{r7, lr}
    4986:	b082      	sub	sp, #8
    4988:	af00      	add	r7, sp, #0
    498a:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    498c:	687b      	ldr	r3, [r7, #4]
    498e:	781b      	ldrb	r3, [r3, #0]
    4990:	b2db      	uxtb	r3, r3
    4992:	2202      	movs	r2, #2
    4994:	4393      	bics	r3, r2
    4996:	b2da      	uxtb	r2, r3
    4998:	687b      	ldr	r3, [r7, #4]
    499a:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    499c:	687b      	ldr	r3, [r7, #4]
    499e:	2103      	movs	r1, #3
    49a0:	0018      	movs	r0, r3
    49a2:	4b03      	ldr	r3, [pc, #12]	; (49b0 <hri_usb_clear_CTRLA_ENABLE_bit+0x2c>)
    49a4:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    49a6:	46c0      	nop			; (mov r8, r8)
    49a8:	46bd      	mov	sp, r7
    49aa:	b002      	add	sp, #8
    49ac:	bd80      	pop	{r7, pc}
    49ae:	46c0      	nop			; (mov r8, r8)
    49b0:	000045cd 	.word	0x000045cd

000049b4 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    49b4:	b580      	push	{r7, lr}
    49b6:	b084      	sub	sp, #16
    49b8:	af00      	add	r7, sp, #0
    49ba:	6078      	str	r0, [r7, #4]
    49bc:	000a      	movs	r2, r1
    49be:	1cfb      	adds	r3, r7, #3
    49c0:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    49c2:	687b      	ldr	r3, [r7, #4]
    49c4:	2103      	movs	r1, #3
    49c6:	0018      	movs	r0, r3
    49c8:	4b0b      	ldr	r3, [pc, #44]	; (49f8 <hri_usb_get_CTRLA_reg+0x44>)
    49ca:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    49cc:	230f      	movs	r3, #15
    49ce:	18fb      	adds	r3, r7, r3
    49d0:	687a      	ldr	r2, [r7, #4]
    49d2:	7812      	ldrb	r2, [r2, #0]
    49d4:	701a      	strb	r2, [r3, #0]
	tmp &= mask;
    49d6:	230f      	movs	r3, #15
    49d8:	18fb      	adds	r3, r7, r3
    49da:	220f      	movs	r2, #15
    49dc:	18ba      	adds	r2, r7, r2
    49de:	1cf9      	adds	r1, r7, #3
    49e0:	7812      	ldrb	r2, [r2, #0]
    49e2:	7809      	ldrb	r1, [r1, #0]
    49e4:	400a      	ands	r2, r1
    49e6:	701a      	strb	r2, [r3, #0]
	return tmp;
    49e8:	230f      	movs	r3, #15
    49ea:	18fb      	adds	r3, r7, r3
    49ec:	781b      	ldrb	r3, [r3, #0]
}
    49ee:	0018      	movs	r0, r3
    49f0:	46bd      	mov	sp, r7
    49f2:	b004      	add	sp, #16
    49f4:	bd80      	pop	{r7, pc}
    49f6:	46c0      	nop			; (mov r8, r8)
    49f8:	000045cd 	.word	0x000045cd

000049fc <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    49fc:	b580      	push	{r7, lr}
    49fe:	b082      	sub	sp, #8
    4a00:	af00      	add	r7, sp, #0
    4a02:	6078      	str	r0, [r7, #4]
    4a04:	000a      	movs	r2, r1
    4a06:	1cfb      	adds	r3, r7, #3
    4a08:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    4a0a:	687b      	ldr	r3, [r7, #4]
    4a0c:	1cfa      	adds	r2, r7, #3
    4a0e:	7812      	ldrb	r2, [r2, #0]
    4a10:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    4a12:	687b      	ldr	r3, [r7, #4]
    4a14:	2103      	movs	r1, #3
    4a16:	0018      	movs	r0, r3
    4a18:	4b02      	ldr	r3, [pc, #8]	; (4a24 <hri_usb_write_CTRLA_reg+0x28>)
    4a1a:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    4a1c:	46c0      	nop			; (mov r8, r8)
    4a1e:	46bd      	mov	sp, r7
    4a20:	b002      	add	sp, #8
    4a22:	bd80      	pop	{r7, pc}
    4a24:	000045cd 	.word	0x000045cd

00004a28 <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    4a28:	b580      	push	{r7, lr}
    4a2a:	b082      	sub	sp, #8
    4a2c:	af00      	add	r7, sp, #0
    4a2e:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    4a30:	687b      	ldr	r3, [r7, #4]
    4a32:	2103      	movs	r1, #3
    4a34:	0018      	movs	r0, r3
    4a36:	4b04      	ldr	r3, [pc, #16]	; (4a48 <hri_usb_read_CTRLA_reg+0x20>)
    4a38:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    4a3a:	687b      	ldr	r3, [r7, #4]
    4a3c:	781b      	ldrb	r3, [r3, #0]
    4a3e:	b2db      	uxtb	r3, r3
}
    4a40:	0018      	movs	r0, r3
    4a42:	46bd      	mov	sp, r7
    4a44:	b002      	add	sp, #8
    4a46:	bd80      	pop	{r7, pc}
    4a48:	000045cd 	.word	0x000045cd

00004a4c <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    4a4c:	b580      	push	{r7, lr}
    4a4e:	b082      	sub	sp, #8
    4a50:	af00      	add	r7, sp, #0
    4a52:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    4a54:	687b      	ldr	r3, [r7, #4]
    4a56:	891b      	ldrh	r3, [r3, #8]
    4a58:	b29b      	uxth	r3, r3
    4a5a:	2201      	movs	r2, #1
    4a5c:	4393      	bics	r3, r2
    4a5e:	b29a      	uxth	r2, r3
    4a60:	687b      	ldr	r3, [r7, #4]
    4a62:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    4a64:	46c0      	nop			; (mov r8, r8)
    4a66:	46bd      	mov	sp, r7
    4a68:	b002      	add	sp, #8
    4a6a:	bd80      	pop	{r7, pc}

00004a6c <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    4a6c:	b580      	push	{r7, lr}
    4a6e:	b082      	sub	sp, #8
    4a70:	af00      	add	r7, sp, #0
    4a72:	6078      	str	r0, [r7, #4]
    4a74:	000a      	movs	r2, r1
    4a76:	1cbb      	adds	r3, r7, #2
    4a78:	801a      	strh	r2, [r3, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    4a7a:	687b      	ldr	r3, [r7, #4]
    4a7c:	1cba      	adds	r2, r7, #2
    4a7e:	8812      	ldrh	r2, [r2, #0]
    4a80:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    4a82:	46c0      	nop			; (mov r8, r8)
    4a84:	46bd      	mov	sp, r7
    4a86:	b002      	add	sp, #8
    4a88:	bd80      	pop	{r7, pc}

00004a8a <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    4a8a:	b580      	push	{r7, lr}
    4a8c:	b082      	sub	sp, #8
    4a8e:	af00      	add	r7, sp, #0
    4a90:	6078      	str	r0, [r7, #4]
    4a92:	000a      	movs	r2, r1
    4a94:	1cfb      	adds	r3, r7, #3
    4a96:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    4a98:	687b      	ldr	r3, [r7, #4]
    4a9a:	1cfa      	adds	r2, r7, #3
    4a9c:	7812      	ldrb	r2, [r2, #0]
    4a9e:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    4aa0:	46c0      	nop			; (mov r8, r8)
    4aa2:	46bd      	mov	sp, r7
    4aa4:	b002      	add	sp, #8
    4aa6:	bd80      	pop	{r7, pc}

00004aa8 <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    4aa8:	b580      	push	{r7, lr}
    4aaa:	b082      	sub	sp, #8
    4aac:	af00      	add	r7, sp, #0
    4aae:	6078      	str	r0, [r7, #4]
    4ab0:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    4ab2:	687b      	ldr	r3, [r7, #4]
    4ab4:	683a      	ldr	r2, [r7, #0]
    4ab6:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    4ab8:	46c0      	nop			; (mov r8, r8)
    4aba:	46bd      	mov	sp, r7
    4abc:	b002      	add	sp, #8
    4abe:	bd80      	pop	{r7, pc}

00004ac0 <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    4ac0:	b580      	push	{r7, lr}
    4ac2:	b082      	sub	sp, #8
    4ac4:	af00      	add	r7, sp, #0
    4ac6:	6078      	str	r0, [r7, #4]
    4ac8:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    4aca:	2300      	movs	r3, #0
}
    4acc:	0018      	movs	r0, r3
    4ace:	46bd      	mov	sp, r7
    4ad0:	b002      	add	sp, #8
    4ad2:	bd80      	pop	{r7, pc}

00004ad4 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    4ad4:	b580      	push	{r7, lr}
    4ad6:	b084      	sub	sp, #16
    4ad8:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 50
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 55
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    4ada:	4b26      	ldr	r3, [pc, #152]	; (4b74 <_usb_load_calib+0xa0>)
    4adc:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    4ade:	4b26      	ldr	r3, [pc, #152]	; (4b78 <_usb_load_calib+0xa4>)
    4ae0:	681b      	ldr	r3, [r3, #0]
    4ae2:	0b5b      	lsrs	r3, r3, #13
	uint32_t pad_transn
    4ae4:	221f      	movs	r2, #31
    4ae6:	4013      	ands	r3, r2
    4ae8:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    4aea:	4b23      	ldr	r3, [pc, #140]	; (4b78 <_usb_load_calib+0xa4>)
    4aec:	681b      	ldr	r3, [r3, #0]
    4aee:	0c9b      	lsrs	r3, r3, #18
	uint32_t pad_transp
    4af0:	221f      	movs	r2, #31
    4af2:	4013      	ands	r3, r2
    4af4:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    4af6:	4b20      	ldr	r3, [pc, #128]	; (4b78 <_usb_load_calib+0xa4>)
    4af8:	681b      	ldr	r3, [r3, #0]
    4afa:	0ddb      	lsrs	r3, r3, #23
    4afc:	2207      	movs	r2, #7
    4afe:	4013      	ands	r3, r2
    4b00:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0x1F) {
    4b02:	68fb      	ldr	r3, [r7, #12]
    4b04:	2b1f      	cmp	r3, #31
    4b06:	d101      	bne.n	4b0c <_usb_load_calib+0x38>
		pad_transn = 5;
    4b08:	2305      	movs	r3, #5
    4b0a:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0x1F) {
    4b0c:	68bb      	ldr	r3, [r7, #8]
    4b0e:	2b1f      	cmp	r3, #31
    4b10:	d101      	bne.n	4b16 <_usb_load_calib+0x42>
		pad_transp = 29;
    4b12:	231d      	movs	r3, #29
    4b14:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0x7) {
    4b16:	687b      	ldr	r3, [r7, #4]
    4b18:	2b07      	cmp	r3, #7
    4b1a:	d101      	bne.n	4b20 <_usb_load_calib+0x4c>
		pad_trim = 5;
    4b1c:	2305      	movs	r3, #5
    4b1e:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    4b20:	68fb      	ldr	r3, [r7, #12]
    4b22:	b29b      	uxth	r3, r3
    4b24:	019b      	lsls	r3, r3, #6
    4b26:	b29a      	uxth	r2, r3
    4b28:	23f8      	movs	r3, #248	; 0xf8
    4b2a:	00db      	lsls	r3, r3, #3
    4b2c:	4013      	ands	r3, r2
    4b2e:	b29a      	uxth	r2, r3
    4b30:	68bb      	ldr	r3, [r7, #8]
    4b32:	b29b      	uxth	r3, r3
    4b34:	211f      	movs	r1, #31
    4b36:	400b      	ands	r3, r1
    4b38:	b29b      	uxth	r3, r3
    4b3a:	4313      	orrs	r3, r2
    4b3c:	b29a      	uxth	r2, r3
    4b3e:	687b      	ldr	r3, [r7, #4]
    4b40:	b29b      	uxth	r3, r3
    4b42:	031b      	lsls	r3, r3, #12
    4b44:	b299      	uxth	r1, r3
    4b46:	23e0      	movs	r3, #224	; 0xe0
    4b48:	01db      	lsls	r3, r3, #7
    4b4a:	400b      	ands	r3, r1
    4b4c:	b29b      	uxth	r3, r3
    4b4e:	4313      	orrs	r3, r2
    4b50:	b29a      	uxth	r2, r3
    4b52:	683b      	ldr	r3, [r7, #0]
    4b54:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    4b56:	683a      	ldr	r2, [r7, #0]
    4b58:	78d3      	ldrb	r3, [r2, #3]
    4b5a:	2103      	movs	r1, #3
    4b5c:	430b      	orrs	r3, r1
    4b5e:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    4b60:	683a      	ldr	r2, [r7, #0]
    4b62:	78d3      	ldrb	r3, [r2, #3]
    4b64:	210c      	movs	r1, #12
    4b66:	430b      	orrs	r3, r1
    4b68:	70d3      	strb	r3, [r2, #3]
}
    4b6a:	46c0      	nop			; (mov r8, r8)
    4b6c:	46bd      	mov	sp, r7
    4b6e:	b004      	add	sp, #16
    4b70:	bd80      	pop	{r7, pc}
    4b72:	46c0      	nop			; (mov r8, r8)
    4b74:	41005000 	.word	0x41005000
    4b78:	00806024 	.word	0x00806024

00004b7c <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    4b7c:	b580      	push	{r7, lr}
    4b7e:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (SYSCTRL_DPLLSTATUS_ENABLE | SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)
	while (hri_sysctrl_get_DPLLSTATUS_reg(SYSCTRL, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    4b80:	46c0      	nop			; (mov r8, r8)
    4b82:	4b05      	ldr	r3, [pc, #20]	; (4b98 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    4b84:	2107      	movs	r1, #7
    4b86:	0018      	movs	r0, r3
    4b88:	4b04      	ldr	r3, [pc, #16]	; (4b9c <_usb_d_dev_wait_dpll_rdy+0x20>)
    4b8a:	4798      	blx	r3
    4b8c:	0003      	movs	r3, r0
    4b8e:	2b07      	cmp	r3, #7
    4b90:	d1f7      	bne.n	4b82 <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    4b92:	46c0      	nop			; (mov r8, r8)
    4b94:	46bd      	mov	sp, r7
    4b96:	bd80      	pop	{r7, pc}
    4b98:	40000800 	.word	0x40000800
    4b9c:	00004593 	.word	0x00004593

00004ba0 <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    4ba0:	b580      	push	{r7, lr}
    4ba2:	af00      	add	r7, sp, #0
#define DFLL_READY_FLAG (SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC)
	/* In USB recovery mode the status is not checked */
	if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    4ba4:	4b0e      	ldr	r3, [pc, #56]	; (4be0 <_usb_d_dev_wait_dfll_rdy+0x40>)
    4ba6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    4ba8:	b29b      	uxth	r3, r3
    4baa:	001a      	movs	r2, r3
    4bac:	2320      	movs	r3, #32
    4bae:	4013      	ands	r3, r2
    4bb0:	d109      	bne.n	4bc6 <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, DFLL_READY_FLAG) != DFLL_READY_FLAG)
    4bb2:	46c0      	nop			; (mov r8, r8)
    4bb4:	4b0a      	ldr	r3, [pc, #40]	; (4be0 <_usb_d_dev_wait_dfll_rdy+0x40>)
    4bb6:	21d0      	movs	r1, #208	; 0xd0
    4bb8:	0018      	movs	r0, r3
    4bba:	4b0a      	ldr	r3, [pc, #40]	; (4be4 <_usb_d_dev_wait_dfll_rdy+0x44>)
    4bbc:	4798      	blx	r3
    4bbe:	0003      	movs	r3, r0
    4bc0:	2bd0      	cmp	r3, #208	; 0xd0
    4bc2:	d1f7      	bne.n	4bb4 <_usb_d_dev_wait_dfll_rdy+0x14>
			;
	} else {
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY)
			;
	}
}
    4bc4:	e008      	b.n	4bd8 <_usb_d_dev_wait_dfll_rdy+0x38>
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY)
    4bc6:	46c0      	nop			; (mov r8, r8)
    4bc8:	4b05      	ldr	r3, [pc, #20]	; (4be0 <_usb_d_dev_wait_dfll_rdy+0x40>)
    4bca:	2110      	movs	r1, #16
    4bcc:	0018      	movs	r0, r3
    4bce:	4b05      	ldr	r3, [pc, #20]	; (4be4 <_usb_d_dev_wait_dfll_rdy+0x44>)
    4bd0:	4798      	blx	r3
    4bd2:	0003      	movs	r3, r0
    4bd4:	2b10      	cmp	r3, #16
    4bd6:	d1f7      	bne.n	4bc8 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    4bd8:	46c0      	nop			; (mov r8, r8)
    4bda:	46bd      	mov	sp, r7
    4bdc:	bd80      	pop	{r7, pc}
    4bde:	46c0      	nop			; (mov r8, r8)
    4be0:	40000800 	.word	0x40000800
    4be4:	00004571 	.word	0x00004571

00004be8 <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    4be8:	b580      	push	{r7, lr}
    4bea:	b082      	sub	sp, #8
    4bec:	af00      	add	r7, sp, #0
    4bee:	0002      	movs	r2, r0
    4bf0:	1dfb      	adds	r3, r7, #7
    4bf2:	701a      	strb	r2, [r3, #0]
	if (clk_src == USB_CLK_SRC_DFLL) {
    4bf4:	1dfb      	adds	r3, r7, #7
    4bf6:	781b      	ldrb	r3, [r3, #0]
    4bf8:	2b00      	cmp	r3, #0
    4bfa:	d102      	bne.n	4c02 <_usb_d_dev_wait_clk_rdy+0x1a>
		_usb_d_dev_wait_dfll_rdy();
    4bfc:	4b06      	ldr	r3, [pc, #24]	; (4c18 <_usb_d_dev_wait_clk_rdy+0x30>)
    4bfe:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    4c00:	e005      	b.n	4c0e <_usb_d_dev_wait_clk_rdy+0x26>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    4c02:	1dfb      	adds	r3, r7, #7
    4c04:	781b      	ldrb	r3, [r3, #0]
    4c06:	2b01      	cmp	r3, #1
    4c08:	d101      	bne.n	4c0e <_usb_d_dev_wait_clk_rdy+0x26>
		_usb_d_dev_wait_dpll_rdy();
    4c0a:	4b04      	ldr	r3, [pc, #16]	; (4c1c <_usb_d_dev_wait_clk_rdy+0x34>)
    4c0c:	4798      	blx	r3
}
    4c0e:	46c0      	nop			; (mov r8, r8)
    4c10:	46bd      	mov	sp, r7
    4c12:	b002      	add	sp, #8
    4c14:	bd80      	pop	{r7, pc}
    4c16:	46c0      	nop			; (mov r8, r8)
    4c18:	00004ba1 	.word	0x00004ba1
    4c1c:	00004b7d 	.word	0x00004b7d

00004c20 <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    4c20:	b580      	push	{r7, lr}
    4c22:	b082      	sub	sp, #8
    4c24:	af00      	add	r7, sp, #0
    4c26:	0002      	movs	r2, r0
    4c28:	6039      	str	r1, [r7, #0]
    4c2a:	1dfb      	adds	r3, r7, #7
    4c2c:	701a      	strb	r2, [r3, #0]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    4c2e:	683b      	ldr	r3, [r7, #0]
    4c30:	b2da      	uxtb	r2, r3
    4c32:	1dfb      	adds	r3, r7, #7
    4c34:	781b      	ldrb	r3, [r3, #0]
    4c36:	4804      	ldr	r0, [pc, #16]	; (4c48 <_usbd_ep_int_ack+0x28>)
    4c38:	0019      	movs	r1, r3
    4c3a:	4b04      	ldr	r3, [pc, #16]	; (4c4c <_usbd_ep_int_ack+0x2c>)
    4c3c:	4798      	blx	r3
}
    4c3e:	46c0      	nop			; (mov r8, r8)
    4c40:	46bd      	mov	sp, r7
    4c42:	b002      	add	sp, #8
    4c44:	bd80      	pop	{r7, pc}
    4c46:	46c0      	nop			; (mov r8, r8)
    4c48:	41005000 	.word	0x41005000
    4c4c:	00004697 	.word	0x00004697

00004c50 <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    4c50:	b580      	push	{r7, lr}
    4c52:	b082      	sub	sp, #8
    4c54:	af00      	add	r7, sp, #0
    4c56:	0002      	movs	r2, r0
    4c58:	6039      	str	r1, [r7, #0]
    4c5a:	1dfb      	adds	r3, r7, #7
    4c5c:	701a      	strb	r2, [r3, #0]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    4c5e:	683b      	ldr	r3, [r7, #0]
    4c60:	b2da      	uxtb	r2, r3
    4c62:	1dfb      	adds	r3, r7, #7
    4c64:	781b      	ldrb	r3, [r3, #0]
    4c66:	4804      	ldr	r0, [pc, #16]	; (4c78 <_usbd_ep_int_en+0x28>)
    4c68:	0019      	movs	r1, r3
    4c6a:	4b04      	ldr	r3, [pc, #16]	; (4c7c <_usbd_ep_int_en+0x2c>)
    4c6c:	4798      	blx	r3
}
    4c6e:	46c0      	nop			; (mov r8, r8)
    4c70:	46bd      	mov	sp, r7
    4c72:	b002      	add	sp, #8
    4c74:	bd80      	pop	{r7, pc}
    4c76:	46c0      	nop			; (mov r8, r8)
    4c78:	41005000 	.word	0x41005000
    4c7c:	00004785 	.word	0x00004785

00004c80 <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    4c80:	b580      	push	{r7, lr}
    4c82:	b082      	sub	sp, #8
    4c84:	af00      	add	r7, sp, #0
    4c86:	0002      	movs	r2, r0
    4c88:	6039      	str	r1, [r7, #0]
    4c8a:	1dfb      	adds	r3, r7, #7
    4c8c:	701a      	strb	r2, [r3, #0]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    4c8e:	683b      	ldr	r3, [r7, #0]
    4c90:	b2da      	uxtb	r2, r3
    4c92:	1dfb      	adds	r3, r7, #7
    4c94:	781b      	ldrb	r3, [r3, #0]
    4c96:	4804      	ldr	r0, [pc, #16]	; (4ca8 <_usbd_ep_int_dis+0x28>)
    4c98:	0019      	movs	r1, r3
    4c9a:	4b04      	ldr	r3, [pc, #16]	; (4cac <_usbd_ep_int_dis+0x2c>)
    4c9c:	4798      	blx	r3
}
    4c9e:	46c0      	nop			; (mov r8, r8)
    4ca0:	46bd      	mov	sp, r7
    4ca2:	b002      	add	sp, #8
    4ca4:	bd80      	pop	{r7, pc}
    4ca6:	46c0      	nop			; (mov r8, r8)
    4ca8:	41005000 	.word	0x41005000
    4cac:	000047bb 	.word	0x000047bb

00004cb0 <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    4cb0:	b580      	push	{r7, lr}
    4cb2:	b082      	sub	sp, #8
    4cb4:	af00      	add	r7, sp, #0
    4cb6:	0002      	movs	r2, r0
    4cb8:	1dfb      	adds	r3, r7, #7
    4cba:	701a      	strb	r2, [r3, #0]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    4cbc:	1dfb      	adds	r3, r7, #7
    4cbe:	781b      	ldrb	r3, [r3, #0]
    4cc0:	4a06      	ldr	r2, [pc, #24]	; (4cdc <_usbd_ep_is_ctrl+0x2c>)
    4cc2:	0019      	movs	r1, r3
    4cc4:	0010      	movs	r0, r2
    4cc6:	4b06      	ldr	r3, [pc, #24]	; (4ce0 <_usbd_ep_is_ctrl+0x30>)
    4cc8:	4798      	blx	r3
    4cca:	0003      	movs	r3, r0
    4ccc:	3b11      	subs	r3, #17
    4cce:	425a      	negs	r2, r3
    4cd0:	4153      	adcs	r3, r2
    4cd2:	b2db      	uxtb	r3, r3
}
    4cd4:	0018      	movs	r0, r3
    4cd6:	46bd      	mov	sp, r7
    4cd8:	b002      	add	sp, #8
    4cda:	bd80      	pop	{r7, pc}
    4cdc:	41005000 	.word	0x41005000
    4ce0:	000048a1 	.word	0x000048a1

00004ce4 <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    4ce4:	b590      	push	{r4, r7, lr}
    4ce6:	b083      	sub	sp, #12
    4ce8:	af00      	add	r7, sp, #0
    4cea:	0004      	movs	r4, r0
    4cec:	0008      	movs	r0, r1
    4cee:	0011      	movs	r1, r2
    4cf0:	1dfb      	adds	r3, r7, #7
    4cf2:	1c22      	adds	r2, r4, #0
    4cf4:	701a      	strb	r2, [r3, #0]
    4cf6:	1dbb      	adds	r3, r7, #6
    4cf8:	1c02      	adds	r2, r0, #0
    4cfa:	701a      	strb	r2, [r3, #0]
    4cfc:	1d7b      	adds	r3, r7, #5
    4cfe:	1c0a      	adds	r2, r1, #0
    4d00:	701a      	strb	r2, [r3, #0]
	if (st) {
    4d02:	1d7b      	adds	r3, r7, #5
    4d04:	781b      	ldrb	r3, [r3, #0]
    4d06:	2b00      	cmp	r3, #0
    4d08:	d00c      	beq.n	4d24 <_usbd_ep_set_stall+0x40>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    4d0a:	1dbb      	adds	r3, r7, #6
    4d0c:	781b      	ldrb	r3, [r3, #0]
    4d0e:	2210      	movs	r2, #16
    4d10:	409a      	lsls	r2, r3
    4d12:	0013      	movs	r3, r2
    4d14:	b2da      	uxtb	r2, r3
    4d16:	1dfb      	adds	r3, r7, #7
    4d18:	781b      	ldrb	r3, [r3, #0]
    4d1a:	480a      	ldr	r0, [pc, #40]	; (4d44 <_usbd_ep_set_stall+0x60>)
    4d1c:	0019      	movs	r1, r3
    4d1e:	4b0a      	ldr	r3, [pc, #40]	; (4d48 <_usbd_ep_set_stall+0x64>)
    4d20:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    4d22:	e00b      	b.n	4d3c <_usbd_ep_set_stall+0x58>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    4d24:	1dbb      	adds	r3, r7, #6
    4d26:	781b      	ldrb	r3, [r3, #0]
    4d28:	2210      	movs	r2, #16
    4d2a:	409a      	lsls	r2, r3
    4d2c:	0013      	movs	r3, r2
    4d2e:	b2da      	uxtb	r2, r3
    4d30:	1dfb      	adds	r3, r7, #7
    4d32:	781b      	ldrb	r3, [r3, #0]
    4d34:	4803      	ldr	r0, [pc, #12]	; (4d44 <_usbd_ep_set_stall+0x60>)
    4d36:	0019      	movs	r1, r3
    4d38:	4b04      	ldr	r3, [pc, #16]	; (4d4c <_usbd_ep_set_stall+0x68>)
    4d3a:	4798      	blx	r3
}
    4d3c:	46c0      	nop			; (mov r8, r8)
    4d3e:	46bd      	mov	sp, r7
    4d40:	b003      	add	sp, #12
    4d42:	bd90      	pop	{r4, r7, pc}
    4d44:	41005000 	.word	0x41005000
    4d48:	000046cb 	.word	0x000046cb
    4d4c:	00004727 	.word	0x00004727

00004d50 <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    4d50:	b580      	push	{r7, lr}
    4d52:	b084      	sub	sp, #16
    4d54:	af00      	add	r7, sp, #0
    4d56:	0002      	movs	r2, r0
    4d58:	1dfb      	adds	r3, r7, #7
    4d5a:	701a      	strb	r2, [r3, #0]
    4d5c:	1dbb      	adds	r3, r7, #6
    4d5e:	1c0a      	adds	r2, r1, #0
    4d60:	701a      	strb	r2, [r3, #0]
	Usb *hw = USB;
    4d62:	4b0c      	ldr	r3, [pc, #48]	; (4d94 <_usbd_ep_is_stalled+0x44>)
    4d64:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    4d66:	1dfb      	adds	r3, r7, #7
    4d68:	781a      	ldrb	r2, [r3, #0]
    4d6a:	68fb      	ldr	r3, [r7, #12]
    4d6c:	0011      	movs	r1, r2
    4d6e:	0018      	movs	r0, r3
    4d70:	4b09      	ldr	r3, [pc, #36]	; (4d98 <_usbd_ep_is_stalled+0x48>)
    4d72:	4798      	blx	r3
    4d74:	0003      	movs	r3, r0
    4d76:	0019      	movs	r1, r3
    4d78:	1dbb      	adds	r3, r7, #6
    4d7a:	781b      	ldrb	r3, [r3, #0]
    4d7c:	2210      	movs	r2, #16
    4d7e:	409a      	lsls	r2, r3
    4d80:	0013      	movs	r3, r2
    4d82:	400b      	ands	r3, r1
    4d84:	1e5a      	subs	r2, r3, #1
    4d86:	4193      	sbcs	r3, r2
    4d88:	b2db      	uxtb	r3, r3
}
    4d8a:	0018      	movs	r0, r3
    4d8c:	46bd      	mov	sp, r7
    4d8e:	b004      	add	sp, #16
    4d90:	bd80      	pop	{r7, pc}
    4d92:	46c0      	nop			; (mov r8, r8)
    4d94:	41005000 	.word	0x41005000
    4d98:	000046ff 	.word	0x000046ff

00004d9c <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    4d9c:	b580      	push	{r7, lr}
    4d9e:	b084      	sub	sp, #16
    4da0:	af00      	add	r7, sp, #0
    4da2:	0002      	movs	r2, r0
    4da4:	1dfb      	adds	r3, r7, #7
    4da6:	701a      	strb	r2, [r3, #0]
    4da8:	1dbb      	adds	r3, r7, #6
    4daa:	1c0a      	adds	r2, r1, #0
    4dac:	701a      	strb	r2, [r3, #0]
	Usb *hw = USB;
    4dae:	4b0c      	ldr	r3, [pc, #48]	; (4de0 <_usbd_ep_is_stall_sent+0x44>)
    4db0:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    4db2:	1dfb      	adds	r3, r7, #7
    4db4:	781a      	ldrb	r2, [r3, #0]
    4db6:	68fb      	ldr	r3, [r7, #12]
    4db8:	0011      	movs	r1, r2
    4dba:	0018      	movs	r0, r3
    4dbc:	4b09      	ldr	r3, [pc, #36]	; (4de4 <_usbd_ep_is_stall_sent+0x48>)
    4dbe:	4798      	blx	r3
    4dc0:	0003      	movs	r3, r0
    4dc2:	0019      	movs	r1, r3
    4dc4:	1dbb      	adds	r3, r7, #6
    4dc6:	781b      	ldrb	r3, [r3, #0]
    4dc8:	2220      	movs	r2, #32
    4dca:	409a      	lsls	r2, r3
    4dcc:	0013      	movs	r3, r2
    4dce:	400b      	ands	r3, r1
    4dd0:	1e5a      	subs	r2, r3, #1
    4dd2:	4193      	sbcs	r3, r2
    4dd4:	b2db      	uxtb	r3, r3
}
    4dd6:	0018      	movs	r0, r3
    4dd8:	46bd      	mov	sp, r7
    4dda:	b004      	add	sp, #16
    4ddc:	bd80      	pop	{r7, pc}
    4dde:	46c0      	nop			; (mov r8, r8)
    4de0:	41005000 	.word	0x41005000
    4de4:	0000466f 	.word	0x0000466f

00004de8 <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    4de8:	b580      	push	{r7, lr}
    4dea:	b082      	sub	sp, #8
    4dec:	af00      	add	r7, sp, #0
    4dee:	0002      	movs	r2, r0
    4df0:	1dfb      	adds	r3, r7, #7
    4df2:	701a      	strb	r2, [r3, #0]
    4df4:	1dbb      	adds	r3, r7, #6
    4df6:	1c0a      	adds	r2, r1, #0
    4df8:	701a      	strb	r2, [r3, #0]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    4dfa:	1dbb      	adds	r3, r7, #6
    4dfc:	781b      	ldrb	r3, [r3, #0]
    4dfe:	2220      	movs	r2, #32
    4e00:	409a      	lsls	r2, r3
    4e02:	1dfb      	adds	r3, r7, #7
    4e04:	781b      	ldrb	r3, [r3, #0]
    4e06:	0011      	movs	r1, r2
    4e08:	0018      	movs	r0, r3
    4e0a:	4b03      	ldr	r3, [pc, #12]	; (4e18 <_usbd_ep_ack_stall+0x30>)
    4e0c:	4798      	blx	r3
}
    4e0e:	46c0      	nop			; (mov r8, r8)
    4e10:	46bd      	mov	sp, r7
    4e12:	b002      	add	sp, #8
    4e14:	bd80      	pop	{r7, pc}
    4e16:	46c0      	nop			; (mov r8, r8)
    4e18:	00004c21 	.word	0x00004c21

00004e1c <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    4e1c:	b590      	push	{r4, r7, lr}
    4e1e:	b083      	sub	sp, #12
    4e20:	af00      	add	r7, sp, #0
    4e22:	0004      	movs	r4, r0
    4e24:	0008      	movs	r0, r1
    4e26:	0011      	movs	r1, r2
    4e28:	1dfb      	adds	r3, r7, #7
    4e2a:	1c22      	adds	r2, r4, #0
    4e2c:	701a      	strb	r2, [r3, #0]
    4e2e:	1dbb      	adds	r3, r7, #6
    4e30:	1c02      	adds	r2, r0, #0
    4e32:	701a      	strb	r2, [r3, #0]
    4e34:	1d7b      	adds	r3, r7, #5
    4e36:	1c0a      	adds	r2, r1, #0
    4e38:	701a      	strb	r2, [r3, #0]
	if (en) {
    4e3a:	1d7b      	adds	r3, r7, #5
    4e3c:	781b      	ldrb	r3, [r3, #0]
    4e3e:	2b00      	cmp	r3, #0
    4e40:	d00a      	beq.n	4e58 <_usbd_ep_int_stall_en+0x3c>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    4e42:	1dbb      	adds	r3, r7, #6
    4e44:	781b      	ldrb	r3, [r3, #0]
    4e46:	2220      	movs	r2, #32
    4e48:	409a      	lsls	r2, r3
    4e4a:	1dfb      	adds	r3, r7, #7
    4e4c:	781b      	ldrb	r3, [r3, #0]
    4e4e:	0011      	movs	r1, r2
    4e50:	0018      	movs	r0, r3
    4e52:	4b08      	ldr	r3, [pc, #32]	; (4e74 <_usbd_ep_int_stall_en+0x58>)
    4e54:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    4e56:	e009      	b.n	4e6c <_usbd_ep_int_stall_en+0x50>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    4e58:	1dbb      	adds	r3, r7, #6
    4e5a:	781b      	ldrb	r3, [r3, #0]
    4e5c:	2220      	movs	r2, #32
    4e5e:	409a      	lsls	r2, r3
    4e60:	1dfb      	adds	r3, r7, #7
    4e62:	781b      	ldrb	r3, [r3, #0]
    4e64:	0011      	movs	r1, r2
    4e66:	0018      	movs	r0, r3
    4e68:	4b03      	ldr	r3, [pc, #12]	; (4e78 <_usbd_ep_int_stall_en+0x5c>)
    4e6a:	4798      	blx	r3
}
    4e6c:	46c0      	nop			; (mov r8, r8)
    4e6e:	46bd      	mov	sp, r7
    4e70:	b003      	add	sp, #12
    4e72:	bd90      	pop	{r4, r7, pc}
    4e74:	00004c51 	.word	0x00004c51
    4e78:	00004c81 	.word	0x00004c81

00004e7c <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    4e7c:	b580      	push	{r7, lr}
    4e7e:	b082      	sub	sp, #8
    4e80:	af00      	add	r7, sp, #0
    4e82:	0002      	movs	r2, r0
    4e84:	1dfb      	adds	r3, r7, #7
    4e86:	701a      	strb	r2, [r3, #0]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    4e88:	1dfb      	adds	r3, r7, #7
    4e8a:	781b      	ldrb	r3, [r3, #0]
    4e8c:	4a04      	ldr	r2, [pc, #16]	; (4ea0 <_usbd_ep_stop_setup+0x24>)
    4e8e:	0019      	movs	r1, r3
    4e90:	0010      	movs	r0, r2
    4e92:	4b04      	ldr	r3, [pc, #16]	; (4ea4 <_usbd_ep_stop_setup+0x28>)
    4e94:	4798      	blx	r3
}
    4e96:	46c0      	nop			; (mov r8, r8)
    4e98:	46bd      	mov	sp, r7
    4e9a:	b002      	add	sp, #8
    4e9c:	bd80      	pop	{r7, pc}
    4e9e:	46c0      	nop			; (mov r8, r8)
    4ea0:	41005000 	.word	0x41005000
    4ea4:	0000475b 	.word	0x0000475b

00004ea8 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    4ea8:	b580      	push	{r7, lr}
    4eaa:	b082      	sub	sp, #8
    4eac:	af00      	add	r7, sp, #0
    4eae:	0002      	movs	r2, r0
    4eb0:	1dfb      	adds	r3, r7, #7
    4eb2:	701a      	strb	r2, [r3, #0]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    4eb4:	1dfb      	adds	r3, r7, #7
    4eb6:	781b      	ldrb	r3, [r3, #0]
    4eb8:	4806      	ldr	r0, [pc, #24]	; (4ed4 <_usbd_ep_is_setup+0x2c>)
    4eba:	2210      	movs	r2, #16
    4ebc:	0019      	movs	r1, r3
    4ebe:	4b06      	ldr	r3, [pc, #24]	; (4ed8 <_usbd_ep_is_setup+0x30>)
    4ec0:	4798      	blx	r3
    4ec2:	0003      	movs	r3, r0
    4ec4:	1e5a      	subs	r2, r3, #1
    4ec6:	4193      	sbcs	r3, r2
    4ec8:	b2db      	uxtb	r3, r3
}
    4eca:	0018      	movs	r0, r3
    4ecc:	46bd      	mov	sp, r7
    4ece:	b002      	add	sp, #8
    4ed0:	bd80      	pop	{r7, pc}
    4ed2:	46c0      	nop			; (mov r8, r8)
    4ed4:	41005000 	.word	0x41005000
    4ed8:	00004621 	.word	0x00004621

00004edc <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    4edc:	b580      	push	{r7, lr}
    4ede:	b082      	sub	sp, #8
    4ee0:	af00      	add	r7, sp, #0
    4ee2:	0002      	movs	r2, r0
    4ee4:	1dfb      	adds	r3, r7, #7
    4ee6:	701a      	strb	r2, [r3, #0]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    4ee8:	1dfb      	adds	r3, r7, #7
    4eea:	781b      	ldrb	r3, [r3, #0]
    4eec:	2110      	movs	r1, #16
    4eee:	0018      	movs	r0, r3
    4ef0:	4b02      	ldr	r3, [pc, #8]	; (4efc <_usbd_ep_ack_setup+0x20>)
    4ef2:	4798      	blx	r3
}
    4ef4:	46c0      	nop			; (mov r8, r8)
    4ef6:	46bd      	mov	sp, r7
    4ef8:	b002      	add	sp, #8
    4efa:	bd80      	pop	{r7, pc}
    4efc:	00004c21 	.word	0x00004c21

00004f00 <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    4f00:	b590      	push	{r4, r7, lr}
    4f02:	b083      	sub	sp, #12
    4f04:	af00      	add	r7, sp, #0
    4f06:	0004      	movs	r4, r0
    4f08:	0008      	movs	r0, r1
    4f0a:	0011      	movs	r1, r2
    4f0c:	1dfb      	adds	r3, r7, #7
    4f0e:	1c22      	adds	r2, r4, #0
    4f10:	701a      	strb	r2, [r3, #0]
    4f12:	1dbb      	adds	r3, r7, #6
    4f14:	1c02      	adds	r2, r0, #0
    4f16:	701a      	strb	r2, [r3, #0]
    4f18:	1d7b      	adds	r3, r7, #5
    4f1a:	1c0a      	adds	r2, r1, #0
    4f1c:	701a      	strb	r2, [r3, #0]
	if (tgl) {
    4f1e:	1d7b      	adds	r3, r7, #5
    4f20:	781b      	ldrb	r3, [r3, #0]
    4f22:	2b00      	cmp	r3, #0
    4f24:	d00c      	beq.n	4f40 <_usbd_ep_set_toggle+0x40>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    4f26:	1dbb      	adds	r3, r7, #6
    4f28:	781b      	ldrb	r3, [r3, #0]
    4f2a:	2201      	movs	r2, #1
    4f2c:	409a      	lsls	r2, r3
    4f2e:	0013      	movs	r3, r2
    4f30:	b2da      	uxtb	r2, r3
    4f32:	1dfb      	adds	r3, r7, #7
    4f34:	781b      	ldrb	r3, [r3, #0]
    4f36:	480a      	ldr	r0, [pc, #40]	; (4f60 <_usbd_ep_set_toggle+0x60>)
    4f38:	0019      	movs	r1, r3
    4f3a:	4b0a      	ldr	r3, [pc, #40]	; (4f64 <_usbd_ep_set_toggle+0x64>)
    4f3c:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    4f3e:	e00b      	b.n	4f58 <_usbd_ep_set_toggle+0x58>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    4f40:	1dbb      	adds	r3, r7, #6
    4f42:	781b      	ldrb	r3, [r3, #0]
    4f44:	2201      	movs	r2, #1
    4f46:	409a      	lsls	r2, r3
    4f48:	0013      	movs	r3, r2
    4f4a:	b2da      	uxtb	r2, r3
    4f4c:	1dfb      	adds	r3, r7, #7
    4f4e:	781b      	ldrb	r3, [r3, #0]
    4f50:	4803      	ldr	r0, [pc, #12]	; (4f60 <_usbd_ep_set_toggle+0x60>)
    4f52:	0019      	movs	r1, r3
    4f54:	4b04      	ldr	r3, [pc, #16]	; (4f68 <_usbd_ep_set_toggle+0x68>)
    4f56:	4798      	blx	r3
}
    4f58:	46c0      	nop			; (mov r8, r8)
    4f5a:	46bd      	mov	sp, r7
    4f5c:	b003      	add	sp, #12
    4f5e:	bd90      	pop	{r4, r7, pc}
    4f60:	41005000 	.word	0x41005000
    4f64:	000046cb 	.word	0x000046cb
    4f68:	00004727 	.word	0x00004727

00004f6c <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    4f6c:	b580      	push	{r7, lr}
    4f6e:	b082      	sub	sp, #8
    4f70:	af00      	add	r7, sp, #0
    4f72:	0002      	movs	r2, r0
    4f74:	1dfb      	adds	r3, r7, #7
    4f76:	701a      	strb	r2, [r3, #0]
    4f78:	1dbb      	adds	r3, r7, #6
    4f7a:	1c0a      	adds	r2, r1, #0
    4f7c:	701a      	strb	r2, [r3, #0]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    4f7e:	1dbb      	adds	r3, r7, #6
    4f80:	781b      	ldrb	r3, [r3, #0]
    4f82:	2201      	movs	r2, #1
    4f84:	409a      	lsls	r2, r3
    4f86:	1dfb      	adds	r3, r7, #7
    4f88:	781b      	ldrb	r3, [r3, #0]
    4f8a:	0011      	movs	r1, r2
    4f8c:	0018      	movs	r0, r3
    4f8e:	4b03      	ldr	r3, [pc, #12]	; (4f9c <_usbd_ep_ack_io_cpt+0x30>)
    4f90:	4798      	blx	r3
}
    4f92:	46c0      	nop			; (mov r8, r8)
    4f94:	46bd      	mov	sp, r7
    4f96:	b002      	add	sp, #8
    4f98:	bd80      	pop	{r7, pc}
    4f9a:	46c0      	nop			; (mov r8, r8)
    4f9c:	00004c21 	.word	0x00004c21

00004fa0 <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    4fa0:	b580      	push	{r7, lr}
    4fa2:	b084      	sub	sp, #16
    4fa4:	af00      	add	r7, sp, #0
    4fa6:	603a      	str	r2, [r7, #0]
    4fa8:	1dfb      	adds	r3, r7, #7
    4faa:	1c02      	adds	r2, r0, #0
    4fac:	701a      	strb	r2, [r3, #0]
    4fae:	1dbb      	adds	r3, r7, #6
    4fb0:	1c0a      	adds	r2, r1, #0
    4fb2:	701a      	strb	r2, [r3, #0]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    4fb4:	1dfb      	adds	r3, r7, #7
    4fb6:	781a      	ldrb	r2, [r3, #0]
    4fb8:	1dbb      	adds	r3, r7, #6
    4fba:	781b      	ldrb	r3, [r3, #0]
    4fbc:	0052      	lsls	r2, r2, #1
    4fbe:	18d3      	adds	r3, r2, r3
    4fc0:	011a      	lsls	r2, r3, #4
    4fc2:	4b05      	ldr	r3, [pc, #20]	; (4fd8 <_usbd_ep_set_buf+0x38>)
    4fc4:	18d3      	adds	r3, r2, r3
    4fc6:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    4fc8:	68fb      	ldr	r3, [r7, #12]
    4fca:	683a      	ldr	r2, [r7, #0]
    4fcc:	601a      	str	r2, [r3, #0]
}
    4fce:	46c0      	nop			; (mov r8, r8)
    4fd0:	46bd      	mov	sp, r7
    4fd2:	b004      	add	sp, #16
    4fd4:	bd80      	pop	{r7, pc}
    4fd6:	46c0      	nop			; (mov r8, r8)
    4fd8:	20001058 	.word	0x20001058

00004fdc <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    4fdc:	b590      	push	{r4, r7, lr}
    4fde:	b085      	sub	sp, #20
    4fe0:	af00      	add	r7, sp, #0
    4fe2:	0004      	movs	r4, r0
    4fe4:	0008      	movs	r0, r1
    4fe6:	0011      	movs	r1, r2
    4fe8:	1dfb      	adds	r3, r7, #7
    4fea:	1c22      	adds	r2, r4, #0
    4fec:	701a      	strb	r2, [r3, #0]
    4fee:	1dbb      	adds	r3, r7, #6
    4ff0:	1c02      	adds	r2, r0, #0
    4ff2:	701a      	strb	r2, [r3, #0]
    4ff4:	1d3b      	adds	r3, r7, #4
    4ff6:	1c0a      	adds	r2, r1, #0
    4ff8:	801a      	strh	r2, [r3, #0]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    4ffa:	1dfb      	adds	r3, r7, #7
    4ffc:	781a      	ldrb	r2, [r3, #0]
    4ffe:	1dbb      	adds	r3, r7, #6
    5000:	781b      	ldrb	r3, [r3, #0]
    5002:	0052      	lsls	r2, r2, #1
    5004:	18d3      	adds	r3, r2, r3
    5006:	011a      	lsls	r2, r3, #4
    5008:	4b0a      	ldr	r3, [pc, #40]	; (5034 <_usbd_ep_set_in_count+0x58>)
    500a:	18d3      	adds	r3, r2, r3
    500c:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    500e:	1d3b      	adds	r3, r7, #4
    5010:	881b      	ldrh	r3, [r3, #0]
    5012:	049b      	lsls	r3, r3, #18
    5014:	0c9b      	lsrs	r3, r3, #18
    5016:	b299      	uxth	r1, r3
    5018:	68fb      	ldr	r3, [r7, #12]
    501a:	685a      	ldr	r2, [r3, #4]
    501c:	0489      	lsls	r1, r1, #18
    501e:	0c89      	lsrs	r1, r1, #18
    5020:	0389      	lsls	r1, r1, #14
    5022:	4805      	ldr	r0, [pc, #20]	; (5038 <_usbd_ep_set_in_count+0x5c>)
    5024:	4002      	ands	r2, r0
    5026:	430a      	orrs	r2, r1
    5028:	605a      	str	r2, [r3, #4]
}
    502a:	46c0      	nop			; (mov r8, r8)
    502c:	46bd      	mov	sp, r7
    502e:	b005      	add	sp, #20
    5030:	bd90      	pop	{r4, r7, pc}
    5032:	46c0      	nop			; (mov r8, r8)
    5034:	20001058 	.word	0x20001058
    5038:	f0003fff 	.word	0xf0003fff

0000503c <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    503c:	b590      	push	{r4, r7, lr}
    503e:	b085      	sub	sp, #20
    5040:	af00      	add	r7, sp, #0
    5042:	0004      	movs	r4, r0
    5044:	0008      	movs	r0, r1
    5046:	0011      	movs	r1, r2
    5048:	1dfb      	adds	r3, r7, #7
    504a:	1c22      	adds	r2, r4, #0
    504c:	701a      	strb	r2, [r3, #0]
    504e:	1dbb      	adds	r3, r7, #6
    5050:	1c02      	adds	r2, r0, #0
    5052:	701a      	strb	r2, [r3, #0]
    5054:	1d3b      	adds	r3, r7, #4
    5056:	1c0a      	adds	r2, r1, #0
    5058:	801a      	strh	r2, [r3, #0]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    505a:	1dfb      	adds	r3, r7, #7
    505c:	781a      	ldrb	r2, [r3, #0]
    505e:	1dbb      	adds	r3, r7, #6
    5060:	781b      	ldrb	r3, [r3, #0]
    5062:	0052      	lsls	r2, r2, #1
    5064:	18d3      	adds	r3, r2, r3
    5066:	011a      	lsls	r2, r3, #4
    5068:	4b09      	ldr	r3, [pc, #36]	; (5090 <_usbd_ep_set_in_size+0x54>)
    506a:	18d3      	adds	r3, r2, r3
    506c:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    506e:	1d3b      	adds	r3, r7, #4
    5070:	881b      	ldrh	r3, [r3, #0]
    5072:	049b      	lsls	r3, r3, #18
    5074:	0c9b      	lsrs	r3, r3, #18
    5076:	b299      	uxth	r1, r3
    5078:	68fb      	ldr	r3, [r7, #12]
    507a:	685a      	ldr	r2, [r3, #4]
    507c:	0489      	lsls	r1, r1, #18
    507e:	0c89      	lsrs	r1, r1, #18
    5080:	0b92      	lsrs	r2, r2, #14
    5082:	0392      	lsls	r2, r2, #14
    5084:	430a      	orrs	r2, r1
    5086:	605a      	str	r2, [r3, #4]
}
    5088:	46c0      	nop			; (mov r8, r8)
    508a:	46bd      	mov	sp, r7
    508c:	b005      	add	sp, #20
    508e:	bd90      	pop	{r4, r7, pc}
    5090:	20001058 	.word	0x20001058

00005094 <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    5094:	b590      	push	{r4, r7, lr}
    5096:	b085      	sub	sp, #20
    5098:	af00      	add	r7, sp, #0
    509a:	0004      	movs	r4, r0
    509c:	0008      	movs	r0, r1
    509e:	0011      	movs	r1, r2
    50a0:	1dfb      	adds	r3, r7, #7
    50a2:	1c22      	adds	r2, r4, #0
    50a4:	701a      	strb	r2, [r3, #0]
    50a6:	1dbb      	adds	r3, r7, #6
    50a8:	1c02      	adds	r2, r0, #0
    50aa:	701a      	strb	r2, [r3, #0]
    50ac:	1d3b      	adds	r3, r7, #4
    50ae:	1c0a      	adds	r2, r1, #0
    50b0:	801a      	strh	r2, [r3, #0]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    50b2:	1dfb      	adds	r3, r7, #7
    50b4:	781a      	ldrb	r2, [r3, #0]
    50b6:	1dbb      	adds	r3, r7, #6
    50b8:	781b      	ldrb	r3, [r3, #0]
    50ba:	0052      	lsls	r2, r2, #1
    50bc:	18d3      	adds	r3, r2, r3
    50be:	011a      	lsls	r2, r3, #4
    50c0:	4b09      	ldr	r3, [pc, #36]	; (50e8 <_usbd_ep_set_out_count+0x54>)
    50c2:	18d3      	adds	r3, r2, r3
    50c4:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    50c6:	1d3b      	adds	r3, r7, #4
    50c8:	881b      	ldrh	r3, [r3, #0]
    50ca:	049b      	lsls	r3, r3, #18
    50cc:	0c9b      	lsrs	r3, r3, #18
    50ce:	b299      	uxth	r1, r3
    50d0:	68fb      	ldr	r3, [r7, #12]
    50d2:	685a      	ldr	r2, [r3, #4]
    50d4:	0489      	lsls	r1, r1, #18
    50d6:	0c89      	lsrs	r1, r1, #18
    50d8:	0b92      	lsrs	r2, r2, #14
    50da:	0392      	lsls	r2, r2, #14
    50dc:	430a      	orrs	r2, r1
    50de:	605a      	str	r2, [r3, #4]
}
    50e0:	46c0      	nop			; (mov r8, r8)
    50e2:	46bd      	mov	sp, r7
    50e4:	b005      	add	sp, #20
    50e6:	bd90      	pop	{r4, r7, pc}
    50e8:	20001058 	.word	0x20001058

000050ec <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    50ec:	b590      	push	{r4, r7, lr}
    50ee:	b085      	sub	sp, #20
    50f0:	af00      	add	r7, sp, #0
    50f2:	0004      	movs	r4, r0
    50f4:	0008      	movs	r0, r1
    50f6:	0011      	movs	r1, r2
    50f8:	1dfb      	adds	r3, r7, #7
    50fa:	1c22      	adds	r2, r4, #0
    50fc:	701a      	strb	r2, [r3, #0]
    50fe:	1dbb      	adds	r3, r7, #6
    5100:	1c02      	adds	r2, r0, #0
    5102:	701a      	strb	r2, [r3, #0]
    5104:	1d3b      	adds	r3, r7, #4
    5106:	1c0a      	adds	r2, r1, #0
    5108:	801a      	strh	r2, [r3, #0]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    510a:	1dfb      	adds	r3, r7, #7
    510c:	781a      	ldrb	r2, [r3, #0]
    510e:	1dbb      	adds	r3, r7, #6
    5110:	781b      	ldrb	r3, [r3, #0]
    5112:	0052      	lsls	r2, r2, #1
    5114:	18d3      	adds	r3, r2, r3
    5116:	011a      	lsls	r2, r3, #4
    5118:	4b0a      	ldr	r3, [pc, #40]	; (5144 <_usbd_ep_set_out_size+0x58>)
    511a:	18d3      	adds	r3, r2, r3
    511c:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    511e:	1d3b      	adds	r3, r7, #4
    5120:	881b      	ldrh	r3, [r3, #0]
    5122:	049b      	lsls	r3, r3, #18
    5124:	0c9b      	lsrs	r3, r3, #18
    5126:	b299      	uxth	r1, r3
    5128:	68fb      	ldr	r3, [r7, #12]
    512a:	685a      	ldr	r2, [r3, #4]
    512c:	0489      	lsls	r1, r1, #18
    512e:	0c89      	lsrs	r1, r1, #18
    5130:	0389      	lsls	r1, r1, #14
    5132:	4805      	ldr	r0, [pc, #20]	; (5148 <_usbd_ep_set_out_size+0x5c>)
    5134:	4002      	ands	r2, r0
    5136:	430a      	orrs	r2, r1
    5138:	605a      	str	r2, [r3, #4]
}
    513a:	46c0      	nop			; (mov r8, r8)
    513c:	46bd      	mov	sp, r7
    513e:	b005      	add	sp, #20
    5140:	bd90      	pop	{r4, r7, pc}
    5142:	46c0      	nop			; (mov r8, r8)
    5144:	20001058 	.word	0x20001058
    5148:	f0003fff 	.word	0xf0003fff

0000514c <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    514c:	b580      	push	{r7, lr}
    514e:	b084      	sub	sp, #16
    5150:	af00      	add	r7, sp, #0
    5152:	60ba      	str	r2, [r7, #8]
    5154:	607b      	str	r3, [r7, #4]
    5156:	230f      	movs	r3, #15
    5158:	18fb      	adds	r3, r7, r3
    515a:	1c02      	adds	r2, r0, #0
    515c:	701a      	strb	r2, [r3, #0]
    515e:	230e      	movs	r3, #14
    5160:	18fb      	adds	r3, r7, r3
    5162:	1c0a      	adds	r2, r1, #0
    5164:	701a      	strb	r2, [r3, #0]
	_usbd_ep_set_in_size(epn, bank_n, size);
    5166:	68bb      	ldr	r3, [r7, #8]
    5168:	b29a      	uxth	r2, r3
    516a:	230e      	movs	r3, #14
    516c:	18fb      	adds	r3, r7, r3
    516e:	7819      	ldrb	r1, [r3, #0]
    5170:	230f      	movs	r3, #15
    5172:	18fb      	adds	r3, r7, r3
    5174:	781b      	ldrb	r3, [r3, #0]
    5176:	0018      	movs	r0, r3
    5178:	4b08      	ldr	r3, [pc, #32]	; (519c <_usbd_ep_set_in_trans+0x50>)
    517a:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    517c:	687b      	ldr	r3, [r7, #4]
    517e:	b29a      	uxth	r2, r3
    5180:	230e      	movs	r3, #14
    5182:	18fb      	adds	r3, r7, r3
    5184:	7819      	ldrb	r1, [r3, #0]
    5186:	230f      	movs	r3, #15
    5188:	18fb      	adds	r3, r7, r3
    518a:	781b      	ldrb	r3, [r3, #0]
    518c:	0018      	movs	r0, r3
    518e:	4b04      	ldr	r3, [pc, #16]	; (51a0 <_usbd_ep_set_in_trans+0x54>)
    5190:	4798      	blx	r3
}
    5192:	46c0      	nop			; (mov r8, r8)
    5194:	46bd      	mov	sp, r7
    5196:	b004      	add	sp, #16
    5198:	bd80      	pop	{r7, pc}
    519a:	46c0      	nop			; (mov r8, r8)
    519c:	0000503d 	.word	0x0000503d
    51a0:	00004fdd 	.word	0x00004fdd

000051a4 <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    51a4:	b580      	push	{r7, lr}
    51a6:	b084      	sub	sp, #16
    51a8:	af00      	add	r7, sp, #0
    51aa:	60ba      	str	r2, [r7, #8]
    51ac:	607b      	str	r3, [r7, #4]
    51ae:	230f      	movs	r3, #15
    51b0:	18fb      	adds	r3, r7, r3
    51b2:	1c02      	adds	r2, r0, #0
    51b4:	701a      	strb	r2, [r3, #0]
    51b6:	230e      	movs	r3, #14
    51b8:	18fb      	adds	r3, r7, r3
    51ba:	1c0a      	adds	r2, r1, #0
    51bc:	701a      	strb	r2, [r3, #0]
	_usbd_ep_set_out_size(epn, bank_n, size);
    51be:	68bb      	ldr	r3, [r7, #8]
    51c0:	b29a      	uxth	r2, r3
    51c2:	230e      	movs	r3, #14
    51c4:	18fb      	adds	r3, r7, r3
    51c6:	7819      	ldrb	r1, [r3, #0]
    51c8:	230f      	movs	r3, #15
    51ca:	18fb      	adds	r3, r7, r3
    51cc:	781b      	ldrb	r3, [r3, #0]
    51ce:	0018      	movs	r0, r3
    51d0:	4b08      	ldr	r3, [pc, #32]	; (51f4 <_usbd_ep_set_out_trans+0x50>)
    51d2:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    51d4:	687b      	ldr	r3, [r7, #4]
    51d6:	b29a      	uxth	r2, r3
    51d8:	230e      	movs	r3, #14
    51da:	18fb      	adds	r3, r7, r3
    51dc:	7819      	ldrb	r1, [r3, #0]
    51de:	230f      	movs	r3, #15
    51e0:	18fb      	adds	r3, r7, r3
    51e2:	781b      	ldrb	r3, [r3, #0]
    51e4:	0018      	movs	r0, r3
    51e6:	4b04      	ldr	r3, [pc, #16]	; (51f8 <_usbd_ep_set_out_trans+0x54>)
    51e8:	4798      	blx	r3
}
    51ea:	46c0      	nop			; (mov r8, r8)
    51ec:	46bd      	mov	sp, r7
    51ee:	b004      	add	sp, #16
    51f0:	bd80      	pop	{r7, pc}
    51f2:	46c0      	nop			; (mov r8, r8)
    51f4:	000050ed 	.word	0x000050ed
    51f8:	00005095 	.word	0x00005095

000051fc <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    51fc:	b580      	push	{r7, lr}
    51fe:	b084      	sub	sp, #16
    5200:	af00      	add	r7, sp, #0
    5202:	0002      	movs	r2, r0
    5204:	1dfb      	adds	r3, r7, #7
    5206:	701a      	strb	r2, [r3, #0]
    5208:	1dbb      	adds	r3, r7, #6
    520a:	1c0a      	adds	r2, r1, #0
    520c:	701a      	strb	r2, [r3, #0]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    520e:	1dfb      	adds	r3, r7, #7
    5210:	781a      	ldrb	r2, [r3, #0]
    5212:	1dbb      	adds	r3, r7, #6
    5214:	781b      	ldrb	r3, [r3, #0]
    5216:	0052      	lsls	r2, r2, #1
    5218:	18d3      	adds	r3, r2, r3
    521a:	011a      	lsls	r2, r3, #4
    521c:	4b04      	ldr	r3, [pc, #16]	; (5230 <_usbd_ep_clear_bank_status+0x34>)
    521e:	18d3      	adds	r3, r2, r3
    5220:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    5222:	68fb      	ldr	r3, [r7, #12]
    5224:	2200      	movs	r2, #0
    5226:	729a      	strb	r2, [r3, #10]
}
    5228:	46c0      	nop			; (mov r8, r8)
    522a:	46bd      	mov	sp, r7
    522c:	b004      	add	sp, #16
    522e:	bd80      	pop	{r7, pc}
    5230:	20001058 	.word	0x20001058

00005234 <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    5234:	b590      	push	{r4, r7, lr}
    5236:	b083      	sub	sp, #12
    5238:	af00      	add	r7, sp, #0
    523a:	0004      	movs	r4, r0
    523c:	0008      	movs	r0, r1
    523e:	0011      	movs	r1, r2
    5240:	1dfb      	adds	r3, r7, #7
    5242:	1c22      	adds	r2, r4, #0
    5244:	701a      	strb	r2, [r3, #0]
    5246:	1dbb      	adds	r3, r7, #6
    5248:	1c02      	adds	r2, r0, #0
    524a:	701a      	strb	r2, [r3, #0]
    524c:	1d7b      	adds	r3, r7, #5
    524e:	1c0a      	adds	r2, r1, #0
    5250:	701a      	strb	r2, [r3, #0]
	if (rdy) {
    5252:	1d7b      	adds	r3, r7, #5
    5254:	781b      	ldrb	r3, [r3, #0]
    5256:	2b00      	cmp	r3, #0
    5258:	d00c      	beq.n	5274 <_usbd_ep_set_in_rdy+0x40>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    525a:	1dbb      	adds	r3, r7, #6
    525c:	781b      	ldrb	r3, [r3, #0]
    525e:	2240      	movs	r2, #64	; 0x40
    5260:	409a      	lsls	r2, r3
    5262:	0013      	movs	r3, r2
    5264:	b2da      	uxtb	r2, r3
    5266:	1dfb      	adds	r3, r7, #7
    5268:	781b      	ldrb	r3, [r3, #0]
    526a:	480a      	ldr	r0, [pc, #40]	; (5294 <_usbd_ep_set_in_rdy+0x60>)
    526c:	0019      	movs	r1, r3
    526e:	4b0a      	ldr	r3, [pc, #40]	; (5298 <_usbd_ep_set_in_rdy+0x64>)
    5270:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    5272:	e00b      	b.n	528c <_usbd_ep_set_in_rdy+0x58>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    5274:	1dbb      	adds	r3, r7, #6
    5276:	781b      	ldrb	r3, [r3, #0]
    5278:	2240      	movs	r2, #64	; 0x40
    527a:	409a      	lsls	r2, r3
    527c:	0013      	movs	r3, r2
    527e:	b2da      	uxtb	r2, r3
    5280:	1dfb      	adds	r3, r7, #7
    5282:	781b      	ldrb	r3, [r3, #0]
    5284:	4803      	ldr	r0, [pc, #12]	; (5294 <_usbd_ep_set_in_rdy+0x60>)
    5286:	0019      	movs	r1, r3
    5288:	4b04      	ldr	r3, [pc, #16]	; (529c <_usbd_ep_set_in_rdy+0x68>)
    528a:	4798      	blx	r3
}
    528c:	46c0      	nop			; (mov r8, r8)
    528e:	46bd      	mov	sp, r7
    5290:	b003      	add	sp, #12
    5292:	bd90      	pop	{r4, r7, pc}
    5294:	41005000 	.word	0x41005000
    5298:	000046cb 	.word	0x000046cb
    529c:	00004727 	.word	0x00004727

000052a0 <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    52a0:	b590      	push	{r4, r7, lr}
    52a2:	b083      	sub	sp, #12
    52a4:	af00      	add	r7, sp, #0
    52a6:	0004      	movs	r4, r0
    52a8:	0008      	movs	r0, r1
    52aa:	0011      	movs	r1, r2
    52ac:	1dfb      	adds	r3, r7, #7
    52ae:	1c22      	adds	r2, r4, #0
    52b0:	701a      	strb	r2, [r3, #0]
    52b2:	1dbb      	adds	r3, r7, #6
    52b4:	1c02      	adds	r2, r0, #0
    52b6:	701a      	strb	r2, [r3, #0]
    52b8:	1d7b      	adds	r3, r7, #5
    52ba:	1c0a      	adds	r2, r1, #0
    52bc:	701a      	strb	r2, [r3, #0]
	if (rdy) {
    52be:	1d7b      	adds	r3, r7, #5
    52c0:	781b      	ldrb	r3, [r3, #0]
    52c2:	2b00      	cmp	r3, #0
    52c4:	d00c      	beq.n	52e0 <_usbd_ep_set_out_rdy+0x40>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    52c6:	1dbb      	adds	r3, r7, #6
    52c8:	781b      	ldrb	r3, [r3, #0]
    52ca:	2240      	movs	r2, #64	; 0x40
    52cc:	409a      	lsls	r2, r3
    52ce:	0013      	movs	r3, r2
    52d0:	b2da      	uxtb	r2, r3
    52d2:	1dfb      	adds	r3, r7, #7
    52d4:	781b      	ldrb	r3, [r3, #0]
    52d6:	480a      	ldr	r0, [pc, #40]	; (5300 <_usbd_ep_set_out_rdy+0x60>)
    52d8:	0019      	movs	r1, r3
    52da:	4b0a      	ldr	r3, [pc, #40]	; (5304 <_usbd_ep_set_out_rdy+0x64>)
    52dc:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    52de:	e00b      	b.n	52f8 <_usbd_ep_set_out_rdy+0x58>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    52e0:	1dbb      	adds	r3, r7, #6
    52e2:	781b      	ldrb	r3, [r3, #0]
    52e4:	2240      	movs	r2, #64	; 0x40
    52e6:	409a      	lsls	r2, r3
    52e8:	0013      	movs	r3, r2
    52ea:	b2da      	uxtb	r2, r3
    52ec:	1dfb      	adds	r3, r7, #7
    52ee:	781b      	ldrb	r3, [r3, #0]
    52f0:	4803      	ldr	r0, [pc, #12]	; (5300 <_usbd_ep_set_out_rdy+0x60>)
    52f2:	0019      	movs	r1, r3
    52f4:	4b04      	ldr	r3, [pc, #16]	; (5308 <_usbd_ep_set_out_rdy+0x68>)
    52f6:	4798      	blx	r3
}
    52f8:	46c0      	nop			; (mov r8, r8)
    52fa:	46bd      	mov	sp, r7
    52fc:	b003      	add	sp, #12
    52fe:	bd90      	pop	{r4, r7, pc}
    5300:	41005000 	.word	0x41005000
    5304:	00004727 	.word	0x00004727
    5308:	000046cb 	.word	0x000046cb

0000530c <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    530c:	b580      	push	{r7, lr}
    530e:	b082      	sub	sp, #8
    5310:	af00      	add	r7, sp, #0
    5312:	0002      	movs	r2, r0
    5314:	1dbb      	adds	r3, r7, #6
    5316:	801a      	strh	r2, [r3, #0]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    5318:	1dbb      	adds	r3, r7, #6
    531a:	881a      	ldrh	r2, [r3, #0]
    531c:	2380      	movs	r3, #128	; 0x80
    531e:	009b      	lsls	r3, r3, #2
    5320:	429a      	cmp	r2, r3
    5322:	d827      	bhi.n	5374 <_usbd_ep_pcksize_size+0x68>
    5324:	1dbb      	adds	r3, r7, #6
    5326:	881a      	ldrh	r2, [r3, #0]
    5328:	2380      	movs	r3, #128	; 0x80
    532a:	005b      	lsls	r3, r3, #1
    532c:	429a      	cmp	r2, r3
    532e:	d81f      	bhi.n	5370 <_usbd_ep_pcksize_size+0x64>
    5330:	1dbb      	adds	r3, r7, #6
    5332:	881b      	ldrh	r3, [r3, #0]
    5334:	2b80      	cmp	r3, #128	; 0x80
    5336:	d819      	bhi.n	536c <_usbd_ep_pcksize_size+0x60>
    5338:	1dbb      	adds	r3, r7, #6
    533a:	881b      	ldrh	r3, [r3, #0]
    533c:	2b40      	cmp	r3, #64	; 0x40
    533e:	d813      	bhi.n	5368 <_usbd_ep_pcksize_size+0x5c>
    5340:	1dbb      	adds	r3, r7, #6
    5342:	881b      	ldrh	r3, [r3, #0]
    5344:	2b20      	cmp	r3, #32
    5346:	d80d      	bhi.n	5364 <_usbd_ep_pcksize_size+0x58>
    5348:	1dbb      	adds	r3, r7, #6
    534a:	881b      	ldrh	r3, [r3, #0]
    534c:	2b10      	cmp	r3, #16
    534e:	d807      	bhi.n	5360 <_usbd_ep_pcksize_size+0x54>
    5350:	1dbb      	adds	r3, r7, #6
    5352:	881b      	ldrh	r3, [r3, #0]
    5354:	2208      	movs	r2, #8
    5356:	429a      	cmp	r2, r3
    5358:	419b      	sbcs	r3, r3
    535a:	425b      	negs	r3, r3
    535c:	b2db      	uxtb	r3, r3
    535e:	e00a      	b.n	5376 <_usbd_ep_pcksize_size+0x6a>
    5360:	2302      	movs	r3, #2
    5362:	e008      	b.n	5376 <_usbd_ep_pcksize_size+0x6a>
    5364:	2303      	movs	r3, #3
    5366:	e006      	b.n	5376 <_usbd_ep_pcksize_size+0x6a>
    5368:	2304      	movs	r3, #4
    536a:	e004      	b.n	5376 <_usbd_ep_pcksize_size+0x6a>
    536c:	2305      	movs	r3, #5
    536e:	e002      	b.n	5376 <_usbd_ep_pcksize_size+0x6a>
    5370:	2306      	movs	r3, #6
    5372:	e000      	b.n	5376 <_usbd_ep_pcksize_size+0x6a>
    5374:	2307      	movs	r3, #7
}
    5376:	0018      	movs	r0, r3
    5378:	46bd      	mov	sp, r7
    537a:	b002      	add	sp, #8
    537c:	bd80      	pop	{r7, pc}
	...

00005380 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    5380:	b580      	push	{r7, lr}
    5382:	b084      	sub	sp, #16
    5384:	af00      	add	r7, sp, #0
    5386:	0002      	movs	r2, r0
    5388:	1dfb      	adds	r3, r7, #7
    538a:	701a      	strb	r2, [r3, #0]
    538c:	1dbb      	adds	r3, r7, #6
    538e:	1c0a      	adds	r2, r1, #0
    5390:	701a      	strb	r2, [r3, #0]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    5392:	1dfb      	adds	r3, r7, #7
    5394:	781b      	ldrb	r3, [r3, #0]
    5396:	2b00      	cmp	r3, #0
    5398:	d00b      	beq.n	53b2 <_usb_d_dev_ept+0x32>
    539a:	1dbb      	adds	r3, r7, #6
    539c:	781b      	ldrb	r3, [r3, #0]
    539e:	2b00      	cmp	r3, #0
    53a0:	d004      	beq.n	53ac <_usb_d_dev_ept+0x2c>
    53a2:	1dfb      	adds	r3, r7, #7
    53a4:	781b      	ldrb	r3, [r3, #0]
    53a6:	3307      	adds	r3, #7
    53a8:	b2db      	uxtb	r3, r3
    53aa:	e003      	b.n	53b4 <_usb_d_dev_ept+0x34>
    53ac:	1dfb      	adds	r3, r7, #7
    53ae:	781b      	ldrb	r3, [r3, #0]
    53b0:	e000      	b.n	53b4 <_usb_d_dev_ept+0x34>
    53b2:	2300      	movs	r3, #0
    53b4:	220f      	movs	r2, #15
    53b6:	18ba      	adds	r2, r7, r2
    53b8:	7013      	strb	r3, [r2, #0]
	return &dev_inst.ep[ep_index];
    53ba:	230f      	movs	r3, #15
    53bc:	18fb      	adds	r3, r7, r3
    53be:	781a      	ldrb	r2, [r3, #0]
    53c0:	0013      	movs	r3, r2
    53c2:	009b      	lsls	r3, r3, #2
    53c4:	189b      	adds	r3, r3, r2
    53c6:	009b      	lsls	r3, r3, #2
    53c8:	3310      	adds	r3, #16
    53ca:	001a      	movs	r2, r3
    53cc:	4b03      	ldr	r3, [pc, #12]	; (53dc <_usb_d_dev_ept+0x5c>)
    53ce:	18d3      	adds	r3, r2, r3
    53d0:	3304      	adds	r3, #4
}
    53d2:	0018      	movs	r0, r3
    53d4:	46bd      	mov	sp, r7
    53d6:	b004      	add	sp, #16
    53d8:	bd80      	pop	{r7, pc}
    53da:	46c0      	nop			; (mov r8, r8)
    53dc:	20000ef0 	.word	0x20000ef0

000053e0 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    53e0:	b580      	push	{r7, lr}
    53e2:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    53e4:	4b05      	ldr	r3, [pc, #20]	; (53fc <_usb_d_dev_sof+0x1c>)
    53e6:	2104      	movs	r1, #4
    53e8:	0018      	movs	r0, r3
    53ea:	4b05      	ldr	r3, [pc, #20]	; (5400 <_usb_d_dev_sof+0x20>)
    53ec:	4798      	blx	r3
	dev_inst.callbacks.sof();
    53ee:	4b05      	ldr	r3, [pc, #20]	; (5404 <_usb_d_dev_sof+0x24>)
    53f0:	681b      	ldr	r3, [r3, #0]
    53f2:	4798      	blx	r3
}
    53f4:	46c0      	nop			; (mov r8, r8)
    53f6:	46bd      	mov	sp, r7
    53f8:	bd80      	pop	{r7, pc}
    53fa:	46c0      	nop			; (mov r8, r8)
    53fc:	41005000 	.word	0x41005000
    5400:	000048db 	.word	0x000048db
    5404:	20000ef0 	.word	0x20000ef0

00005408 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    5408:	b580      	push	{r7, lr}
    540a:	b084      	sub	sp, #16
    540c:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    540e:	2300      	movs	r3, #0
    5410:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    5412:	4a22      	ldr	r2, [pc, #136]	; (549c <_usb_d_dev_lpmsusp+0x94>)
    5414:	4b22      	ldr	r3, [pc, #136]	; (54a0 <_usb_d_dev_lpmsusp+0x98>)
    5416:	0011      	movs	r1, r2
    5418:	0018      	movs	r0, r3
    541a:	4b22      	ldr	r3, [pc, #136]	; (54a4 <_usb_d_dev_lpmsusp+0x9c>)
    541c:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    541e:	4a1f      	ldr	r2, [pc, #124]	; (549c <_usb_d_dev_lpmsusp+0x94>)
    5420:	4b1f      	ldr	r3, [pc, #124]	; (54a0 <_usb_d_dev_lpmsusp+0x98>)
    5422:	0011      	movs	r1, r2
    5424:	0018      	movs	r0, r3
    5426:	4b20      	ldr	r3, [pc, #128]	; (54a8 <_usb_d_dev_lpmsusp+0xa0>)
    5428:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    542a:	4b1d      	ldr	r3, [pc, #116]	; (54a0 <_usb_d_dev_lpmsusp+0x98>)
    542c:	2170      	movs	r1, #112	; 0x70
    542e:	0018      	movs	r0, r3
    5430:	4b1e      	ldr	r3, [pc, #120]	; (54ac <_usb_d_dev_lpmsusp+0xa4>)
    5432:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    5434:	230f      	movs	r3, #15
    5436:	18fb      	adds	r3, r7, r3
    5438:	2200      	movs	r2, #0
    543a:	701a      	strb	r2, [r3, #0]
    543c:	e01e      	b.n	547c <_usb_d_dev_lpmsusp+0x74>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    543e:	230f      	movs	r3, #15
    5440:	18fb      	adds	r3, r7, r3
    5442:	781b      	ldrb	r3, [r3, #0]
    5444:	015a      	lsls	r2, r3, #5
    5446:	4b1a      	ldr	r3, [pc, #104]	; (54b0 <_usb_d_dev_lpmsusp+0xa8>)
    5448:	18d3      	adds	r3, r2, r3
    544a:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    544c:	687b      	ldr	r3, [r7, #4]
    544e:	891b      	ldrh	r3, [r3, #8]
    5450:	071b      	lsls	r3, r3, #28
    5452:	0f1b      	lsrs	r3, r3, #28
    5454:	b2db      	uxtb	r3, r3
    5456:	2b03      	cmp	r3, #3
    5458:	d109      	bne.n	546e <_usb_d_dev_lpmsusp+0x66>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    545a:	687b      	ldr	r3, [r7, #4]
    545c:	891b      	ldrh	r3, [r3, #8]
    545e:	045b      	lsls	r3, r3, #17
    5460:	0d5b      	lsrs	r3, r3, #21
    5462:	b29b      	uxth	r3, r3
    5464:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    5466:	687b      	ldr	r3, [r7, #4]
    5468:	2200      	movs	r2, #0
    546a:	811a      	strh	r2, [r3, #8]
			break;
    546c:	e00b      	b.n	5486 <_usb_d_dev_lpmsusp+0x7e>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    546e:	230f      	movs	r3, #15
    5470:	18fb      	adds	r3, r7, r3
    5472:	781a      	ldrb	r2, [r3, #0]
    5474:	230f      	movs	r3, #15
    5476:	18fb      	adds	r3, r7, r3
    5478:	3201      	adds	r2, #1
    547a:	701a      	strb	r2, [r3, #0]
    547c:	230f      	movs	r3, #15
    547e:	18fb      	adds	r3, r7, r3
    5480:	781b      	ldrb	r3, [r3, #0]
    5482:	2b06      	cmp	r3, #6
    5484:	d9db      	bls.n	543e <_usb_d_dev_lpmsusp+0x36>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    5486:	4b0b      	ldr	r3, [pc, #44]	; (54b4 <_usb_d_dev_lpmsusp+0xac>)
    5488:	685b      	ldr	r3, [r3, #4]
    548a:	68ba      	ldr	r2, [r7, #8]
    548c:	0011      	movs	r1, r2
    548e:	2003      	movs	r0, #3
    5490:	4798      	blx	r3
}
    5492:	46c0      	nop			; (mov r8, r8)
    5494:	46bd      	mov	sp, r7
    5496:	b004      	add	sp, #16
    5498:	bd80      	pop	{r7, pc}
    549a:	46c0      	nop			; (mov r8, r8)
    549c:	00000201 	.word	0x00000201
    54a0:	41005000 	.word	0x41005000
    54a4:	000048db 	.word	0x000048db
    54a8:	0000492d 	.word	0x0000492d
    54ac:	000048f9 	.word	0x000048f9
    54b0:	20001058 	.word	0x20001058
    54b4:	20000ef0 	.word	0x20000ef0

000054b8 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    54b8:	b580      	push	{r7, lr}
    54ba:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    54bc:	4b06      	ldr	r3, [pc, #24]	; (54d8 <_usb_d_dev_ramerr+0x20>)
    54be:	2180      	movs	r1, #128	; 0x80
    54c0:	0018      	movs	r0, r3
    54c2:	4b06      	ldr	r3, [pc, #24]	; (54dc <_usb_d_dev_ramerr+0x24>)
    54c4:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    54c6:	4b06      	ldr	r3, [pc, #24]	; (54e0 <_usb_d_dev_ramerr+0x28>)
    54c8:	685b      	ldr	r3, [r3, #4]
    54ca:	2100      	movs	r1, #0
    54cc:	2005      	movs	r0, #5
    54ce:	4798      	blx	r3
}
    54d0:	46c0      	nop			; (mov r8, r8)
    54d2:	46bd      	mov	sp, r7
    54d4:	bd80      	pop	{r7, pc}
    54d6:	46c0      	nop			; (mov r8, r8)
    54d8:	41005000 	.word	0x41005000
    54dc:	000048db 	.word	0x000048db
    54e0:	20000ef0 	.word	0x20000ef0

000054e4 <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    54e4:	b580      	push	{r7, lr}
    54e6:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    54e8:	4b0d      	ldr	r3, [pc, #52]	; (5520 <_usb_d_dev_wakeup+0x3c>)
    54ea:	2170      	movs	r1, #112	; 0x70
    54ec:	0018      	movs	r0, r3
    54ee:	4b0d      	ldr	r3, [pc, #52]	; (5524 <_usb_d_dev_wakeup+0x40>)
    54f0:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    54f2:	4b0b      	ldr	r3, [pc, #44]	; (5520 <_usb_d_dev_wakeup+0x3c>)
    54f4:	2170      	movs	r1, #112	; 0x70
    54f6:	0018      	movs	r0, r3
    54f8:	4b0b      	ldr	r3, [pc, #44]	; (5528 <_usb_d_dev_wakeup+0x44>)
    54fa:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    54fc:	4a0b      	ldr	r2, [pc, #44]	; (552c <_usb_d_dev_wakeup+0x48>)
    54fe:	4b08      	ldr	r3, [pc, #32]	; (5520 <_usb_d_dev_wakeup+0x3c>)
    5500:	0011      	movs	r1, r2
    5502:	0018      	movs	r0, r3
    5504:	4b0a      	ldr	r3, [pc, #40]	; (5530 <_usb_d_dev_wakeup+0x4c>)
    5506:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    5508:	2000      	movs	r0, #0
    550a:	4b0a      	ldr	r3, [pc, #40]	; (5534 <_usb_d_dev_wakeup+0x50>)
    550c:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    550e:	4b0a      	ldr	r3, [pc, #40]	; (5538 <_usb_d_dev_wakeup+0x54>)
    5510:	685b      	ldr	r3, [r3, #4]
    5512:	2100      	movs	r1, #0
    5514:	2002      	movs	r0, #2
    5516:	4798      	blx	r3
}
    5518:	46c0      	nop			; (mov r8, r8)
    551a:	46bd      	mov	sp, r7
    551c:	bd80      	pop	{r7, pc}
    551e:	46c0      	nop			; (mov r8, r8)
    5520:	41005000 	.word	0x41005000
    5524:	000048db 	.word	0x000048db
    5528:	0000492d 	.word	0x0000492d
    552c:	00000201 	.word	0x00000201
    5530:	000048f9 	.word	0x000048f9
    5534:	00004be9 	.word	0x00004be9
    5538:	20000ef0 	.word	0x20000ef0

0000553c <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    553c:	b580      	push	{r7, lr}
    553e:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    5540:	4b0f      	ldr	r3, [pc, #60]	; (5580 <_usb_d_dev_reset+0x44>)
    5542:	2200      	movs	r2, #0
    5544:	2100      	movs	r1, #0
    5546:	0018      	movs	r0, r3
    5548:	4b0e      	ldr	r3, [pc, #56]	; (5584 <_usb_d_dev_reset+0x48>)
    554a:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    554c:	4b0c      	ldr	r3, [pc, #48]	; (5580 <_usb_d_dev_reset+0x44>)
    554e:	2108      	movs	r1, #8
    5550:	0018      	movs	r0, r3
    5552:	4b0d      	ldr	r3, [pc, #52]	; (5588 <_usb_d_dev_reset+0x4c>)
    5554:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    5556:	4b0a      	ldr	r3, [pc, #40]	; (5580 <_usb_d_dev_reset+0x44>)
    5558:	2170      	movs	r1, #112	; 0x70
    555a:	0018      	movs	r0, r3
    555c:	4b0b      	ldr	r3, [pc, #44]	; (558c <_usb_d_dev_reset+0x50>)
    555e:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    5560:	4a0b      	ldr	r2, [pc, #44]	; (5590 <_usb_d_dev_reset+0x54>)
    5562:	4b07      	ldr	r3, [pc, #28]	; (5580 <_usb_d_dev_reset+0x44>)
    5564:	0011      	movs	r1, r2
    5566:	0018      	movs	r0, r3
    5568:	4b0a      	ldr	r3, [pc, #40]	; (5594 <_usb_d_dev_reset+0x58>)
    556a:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    556c:	4b0a      	ldr	r3, [pc, #40]	; (5598 <_usb_d_dev_reset+0x5c>)
    556e:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    5570:	4b0a      	ldr	r3, [pc, #40]	; (559c <_usb_d_dev_reset+0x60>)
    5572:	685b      	ldr	r3, [r3, #4]
    5574:	2100      	movs	r1, #0
    5576:	2001      	movs	r0, #1
    5578:	4798      	blx	r3
}
    557a:	46c0      	nop			; (mov r8, r8)
    557c:	46bd      	mov	sp, r7
    557e:	bd80      	pop	{r7, pc}
    5580:	41005000 	.word	0x41005000
    5584:	00004871 	.word	0x00004871
    5588:	000048db 	.word	0x000048db
    558c:	0000492d 	.word	0x0000492d
    5590:	00000201 	.word	0x00000201
    5594:	000048f9 	.word	0x000048f9
    5598:	0000637d 	.word	0x0000637d
    559c:	20000ef0 	.word	0x20000ef0

000055a0 <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    55a0:	b580      	push	{r7, lr}
    55a2:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    55a4:	4a0c      	ldr	r2, [pc, #48]	; (55d8 <_usb_d_dev_suspend+0x38>)
    55a6:	4b0d      	ldr	r3, [pc, #52]	; (55dc <_usb_d_dev_suspend+0x3c>)
    55a8:	0011      	movs	r1, r2
    55aa:	0018      	movs	r0, r3
    55ac:	4b0c      	ldr	r3, [pc, #48]	; (55e0 <_usb_d_dev_suspend+0x40>)
    55ae:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    55b0:	4a09      	ldr	r2, [pc, #36]	; (55d8 <_usb_d_dev_suspend+0x38>)
    55b2:	4b0a      	ldr	r3, [pc, #40]	; (55dc <_usb_d_dev_suspend+0x3c>)
    55b4:	0011      	movs	r1, r2
    55b6:	0018      	movs	r0, r3
    55b8:	4b0a      	ldr	r3, [pc, #40]	; (55e4 <_usb_d_dev_suspend+0x44>)
    55ba:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    55bc:	4b07      	ldr	r3, [pc, #28]	; (55dc <_usb_d_dev_suspend+0x3c>)
    55be:	2170      	movs	r1, #112	; 0x70
    55c0:	0018      	movs	r0, r3
    55c2:	4b09      	ldr	r3, [pc, #36]	; (55e8 <_usb_d_dev_suspend+0x48>)
    55c4:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    55c6:	4b09      	ldr	r3, [pc, #36]	; (55ec <_usb_d_dev_suspend+0x4c>)
    55c8:	685b      	ldr	r3, [r3, #4]
    55ca:	2100      	movs	r1, #0
    55cc:	2004      	movs	r0, #4
    55ce:	4798      	blx	r3
}
    55d0:	46c0      	nop			; (mov r8, r8)
    55d2:	46bd      	mov	sp, r7
    55d4:	bd80      	pop	{r7, pc}
    55d6:	46c0      	nop			; (mov r8, r8)
    55d8:	00000201 	.word	0x00000201
    55dc:	41005000 	.word	0x41005000
    55e0:	000048db 	.word	0x000048db
    55e4:	0000492d 	.word	0x0000492d
    55e8:	000048f9 	.word	0x000048f9
    55ec:	20000ef0 	.word	0x20000ef0

000055f0 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    55f0:	b590      	push	{r4, r7, lr}
    55f2:	b083      	sub	sp, #12
    55f4:	af00      	add	r7, sp, #0
	bool     rc    = true;
    55f6:	1dfb      	adds	r3, r7, #7
    55f8:	2201      	movs	r2, #1
    55fa:	701a      	strb	r2, [r3, #0]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    55fc:	1d3c      	adds	r4, r7, #4
    55fe:	4b26      	ldr	r3, [pc, #152]	; (5698 <_usb_d_dev_handle_nep+0xa8>)
    5600:	0018      	movs	r0, r3
    5602:	4b26      	ldr	r3, [pc, #152]	; (569c <_usb_d_dev_handle_nep+0xac>)
    5604:	4798      	blx	r3
    5606:	0003      	movs	r3, r0
    5608:	8023      	strh	r3, [r4, #0]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    560a:	4b23      	ldr	r3, [pc, #140]	; (5698 <_usb_d_dev_handle_nep+0xa8>)
    560c:	0018      	movs	r0, r3
    560e:	4b24      	ldr	r3, [pc, #144]	; (56a0 <_usb_d_dev_handle_nep+0xb0>)
    5610:	4798      	blx	r3
    5612:	0003      	movs	r3, r0
    5614:	0019      	movs	r1, r3
    5616:	1d3b      	adds	r3, r7, #4
    5618:	1d3a      	adds	r2, r7, #4
    561a:	8812      	ldrh	r2, [r2, #0]
    561c:	400a      	ands	r2, r1
    561e:	801a      	strh	r2, [r3, #0]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    5620:	1d3b      	adds	r3, r7, #4
    5622:	881b      	ldrh	r3, [r3, #0]
    5624:	2204      	movs	r2, #4
    5626:	4013      	ands	r3, r2
    5628:	d003      	beq.n	5632 <_usb_d_dev_handle_nep+0x42>
		_usb_d_dev_sof();
    562a:	4b1e      	ldr	r3, [pc, #120]	; (56a4 <_usb_d_dev_handle_nep+0xb4>)
    562c:	4798      	blx	r3
		return true;
    562e:	2301      	movs	r3, #1
    5630:	e02d      	b.n	568e <_usb_d_dev_handle_nep+0x9e>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    5632:	1d3b      	adds	r3, r7, #4
    5634:	881a      	ldrh	r2, [r3, #0]
    5636:	2380      	movs	r3, #128	; 0x80
    5638:	009b      	lsls	r3, r3, #2
    563a:	4013      	ands	r3, r2
    563c:	d002      	beq.n	5644 <_usb_d_dev_handle_nep+0x54>
		_usb_d_dev_lpmsusp();
    563e:	4b1a      	ldr	r3, [pc, #104]	; (56a8 <_usb_d_dev_handle_nep+0xb8>)
    5640:	4798      	blx	r3
    5642:	e022      	b.n	568a <_usb_d_dev_handle_nep+0x9a>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    5644:	1d3b      	adds	r3, r7, #4
    5646:	881b      	ldrh	r3, [r3, #0]
    5648:	2280      	movs	r2, #128	; 0x80
    564a:	4013      	ands	r3, r2
    564c:	d002      	beq.n	5654 <_usb_d_dev_handle_nep+0x64>
		_usb_d_dev_ramerr();
    564e:	4b17      	ldr	r3, [pc, #92]	; (56ac <_usb_d_dev_handle_nep+0xbc>)
    5650:	4798      	blx	r3
    5652:	e01a      	b.n	568a <_usb_d_dev_handle_nep+0x9a>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    5654:	1d3b      	adds	r3, r7, #4
    5656:	881b      	ldrh	r3, [r3, #0]
    5658:	2270      	movs	r2, #112	; 0x70
    565a:	4013      	ands	r3, r2
    565c:	d002      	beq.n	5664 <_usb_d_dev_handle_nep+0x74>
		_usb_d_dev_wakeup();
    565e:	4b14      	ldr	r3, [pc, #80]	; (56b0 <_usb_d_dev_handle_nep+0xc0>)
    5660:	4798      	blx	r3
    5662:	e012      	b.n	568a <_usb_d_dev_handle_nep+0x9a>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    5664:	1d3b      	adds	r3, r7, #4
    5666:	881b      	ldrh	r3, [r3, #0]
    5668:	2208      	movs	r2, #8
    566a:	4013      	ands	r3, r2
    566c:	d002      	beq.n	5674 <_usb_d_dev_handle_nep+0x84>
		_usb_d_dev_reset();
    566e:	4b11      	ldr	r3, [pc, #68]	; (56b4 <_usb_d_dev_handle_nep+0xc4>)
    5670:	4798      	blx	r3
    5672:	e00a      	b.n	568a <_usb_d_dev_handle_nep+0x9a>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    5674:	1d3b      	adds	r3, r7, #4
    5676:	881b      	ldrh	r3, [r3, #0]
    5678:	2201      	movs	r2, #1
    567a:	4013      	ands	r3, r2
    567c:	d002      	beq.n	5684 <_usb_d_dev_handle_nep+0x94>
		_usb_d_dev_suspend();
    567e:	4b0e      	ldr	r3, [pc, #56]	; (56b8 <_usb_d_dev_handle_nep+0xc8>)
    5680:	4798      	blx	r3
    5682:	e002      	b.n	568a <_usb_d_dev_handle_nep+0x9a>
	} else {
		rc = false;
    5684:	1dfb      	adds	r3, r7, #7
    5686:	2200      	movs	r2, #0
    5688:	701a      	strb	r2, [r3, #0]
	}
	return rc;
    568a:	1dfb      	adds	r3, r7, #7
    568c:	781b      	ldrb	r3, [r3, #0]
}
    568e:	0018      	movs	r0, r3
    5690:	46bd      	mov	sp, r7
    5692:	b003      	add	sp, #12
    5694:	bd90      	pop	{r4, r7, pc}
    5696:	46c0      	nop			; (mov r8, r8)
    5698:	41005000 	.word	0x41005000
    569c:	000048c5 	.word	0x000048c5
    56a0:	00004917 	.word	0x00004917
    56a4:	000053e1 	.word	0x000053e1
    56a8:	00005409 	.word	0x00005409
    56ac:	000054b9 	.word	0x000054b9
    56b0:	000054e5 	.word	0x000054e5
    56b4:	0000553d 	.word	0x0000553d
    56b8:	000055a1 	.word	0x000055a1

000056bc <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    56bc:	b590      	push	{r4, r7, lr}
    56be:	b089      	sub	sp, #36	; 0x24
    56c0:	af00      	add	r7, sp, #0
    56c2:	6078      	str	r0, [r7, #4]
    56c4:	000a      	movs	r2, r1
    56c6:	1cfb      	adds	r3, r7, #3
    56c8:	701a      	strb	r2, [r3, #0]
	Usb *              hw          = USB;
    56ca:	4b98      	ldr	r3, [pc, #608]	; (592c <_usb_d_dev_in_next+0x270>)
    56cc:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    56ce:	687b      	ldr	r3, [r7, #4]
    56d0:	7c9a      	ldrb	r2, [r3, #18]
    56d2:	2317      	movs	r3, #23
    56d4:	18fb      	adds	r3, r7, r3
    56d6:	210f      	movs	r1, #15
    56d8:	400a      	ands	r2, r1
    56da:	701a      	strb	r2, [r3, #0]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    56dc:	2317      	movs	r3, #23
    56de:	18fb      	adds	r3, r7, r3
    56e0:	781b      	ldrb	r3, [r3, #0]
    56e2:	015a      	lsls	r2, r3, #5
    56e4:	4b92      	ldr	r3, [pc, #584]	; (5930 <_usb_d_dev_in_next+0x274>)
    56e6:	18d3      	adds	r3, r2, r3
    56e8:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    56ea:	1cfb      	adds	r3, r7, #3
    56ec:	781b      	ldrb	r3, [r3, #0]
    56ee:	2b00      	cmp	r3, #0
    56f0:	d007      	beq.n	5702 <_usb_d_dev_in_next+0x46>
    56f2:	693b      	ldr	r3, [r7, #16]
    56f4:	3310      	adds	r3, #16
    56f6:	685b      	ldr	r3, [r3, #4]
    56f8:	049b      	lsls	r3, r3, #18
    56fa:	0c9b      	lsrs	r3, r3, #18
    56fc:	b29b      	uxth	r3, r3
    56fe:	001a      	movs	r2, r3
    5700:	e000      	b.n	5704 <_usb_d_dev_in_next+0x48>
    5702:	2200      	movs	r2, #0
    5704:	230e      	movs	r3, #14
    5706:	18fb      	adds	r3, r7, r3
    5708:	801a      	strh	r2, [r3, #0]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    570a:	687b      	ldr	r3, [r7, #4]
    570c:	8a1b      	ldrh	r3, [r3, #16]
    570e:	4a89      	ldr	r2, [pc, #548]	; (5934 <_usb_d_dev_in_next+0x278>)
    5710:	4293      	cmp	r3, r2
    5712:	d103      	bne.n	571c <_usb_d_dev_in_next+0x60>
    5714:	687b      	ldr	r3, [r7, #4]
    5716:	8a1b      	ldrh	r3, [r3, #16]
    5718:	b21b      	sxth	r3, r3
    571a:	e004      	b.n	5726 <_usb_d_dev_in_next+0x6a>
    571c:	687b      	ldr	r3, [r7, #4]
    571e:	8a1b      	ldrh	r3, [r3, #16]
    5720:	3b01      	subs	r3, #1
    5722:	b29b      	uxth	r3, r3
    5724:	b21b      	sxth	r3, r3
    5726:	220e      	movs	r2, #14
    5728:	18ba      	adds	r2, r7, r2
    572a:	2100      	movs	r1, #0
    572c:	5e52      	ldrsh	r2, [r2, r1]
    572e:	4013      	ands	r3, r2
    5730:	b21a      	sxth	r2, r3
    5732:	230c      	movs	r3, #12
    5734:	18fb      	adds	r3, r7, r3
    5736:	801a      	strh	r2, [r3, #0]
	uint8_t            inten    = 0;
    5738:	231d      	movs	r3, #29
    573a:	18fb      	adds	r3, r7, r3
    573c:	2200      	movs	r2, #0
    573e:	701a      	strb	r2, [r3, #0]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    5740:	687b      	ldr	r3, [r7, #4]
    5742:	7cdb      	ldrb	r3, [r3, #19]
    5744:	2207      	movs	r2, #7
    5746:	4013      	ands	r3, r2
    5748:	b2da      	uxtb	r2, r3
    574a:	230b      	movs	r3, #11
    574c:	18fb      	adds	r3, r7, r3
    574e:	3a01      	subs	r2, #1
    5750:	4251      	negs	r1, r2
    5752:	414a      	adcs	r2, r1
    5754:	701a      	strb	r2, [r3, #0]

	if (isr) {
    5756:	1cfb      	adds	r3, r7, #3
    5758:	781b      	ldrb	r3, [r3, #0]
    575a:	2b00      	cmp	r3, #0
    575c:	d006      	beq.n	576c <_usb_d_dev_in_next+0xb0>
		_usbd_ep_ack_io_cpt(epn, 1);
    575e:	2317      	movs	r3, #23
    5760:	18fb      	adds	r3, r7, r3
    5762:	781b      	ldrb	r3, [r3, #0]
    5764:	2101      	movs	r1, #1
    5766:	0018      	movs	r0, r3
    5768:	4b73      	ldr	r3, [pc, #460]	; (5938 <_usb_d_dev_in_next+0x27c>)
    576a:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    576c:	687b      	ldr	r3, [r7, #4]
    576e:	689a      	ldr	r2, [r3, #8]
    5770:	230e      	movs	r3, #14
    5772:	18fb      	adds	r3, r7, r3
    5774:	881b      	ldrh	r3, [r3, #0]
    5776:	18d2      	adds	r2, r2, r3
    5778:	687b      	ldr	r3, [r7, #4]
    577a:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    577c:	687b      	ldr	r3, [r7, #4]
    577e:	689a      	ldr	r2, [r3, #8]
    5780:	687b      	ldr	r3, [r7, #4]
    5782:	685b      	ldr	r3, [r3, #4]
    5784:	429a      	cmp	r2, r3
    5786:	d258      	bcs.n	583a <_usb_d_dev_in_next+0x17e>
		trans_next = ept->trans_size - ept->trans_count;
    5788:	687b      	ldr	r3, [r7, #4]
    578a:	685b      	ldr	r3, [r3, #4]
    578c:	b299      	uxth	r1, r3
    578e:	687b      	ldr	r3, [r7, #4]
    5790:	689b      	ldr	r3, [r3, #8]
    5792:	b29a      	uxth	r2, r3
    5794:	231e      	movs	r3, #30
    5796:	18fb      	adds	r3, r7, r3
    5798:	1a8a      	subs	r2, r1, r2
    579a:	801a      	strh	r2, [r3, #0]
		if (ept->flags.bits.use_cache) {
    579c:	687b      	ldr	r3, [r7, #4]
    579e:	7cdb      	ldrb	r3, [r3, #19]
    57a0:	2220      	movs	r2, #32
    57a2:	4013      	ands	r3, r2
    57a4:	b2db      	uxtb	r3, r3
    57a6:	2b00      	cmp	r3, #0
    57a8:	d023      	beq.n	57f2 <_usb_d_dev_in_next+0x136>
			if (trans_next > ept->size) {
    57aa:	687b      	ldr	r3, [r7, #4]
    57ac:	8a1b      	ldrh	r3, [r3, #16]
    57ae:	221e      	movs	r2, #30
    57b0:	18ba      	adds	r2, r7, r2
    57b2:	8812      	ldrh	r2, [r2, #0]
    57b4:	429a      	cmp	r2, r3
    57b6:	d904      	bls.n	57c2 <_usb_d_dev_in_next+0x106>
				trans_next = ept->size;
    57b8:	231e      	movs	r3, #30
    57ba:	18fb      	adds	r3, r7, r3
    57bc:	687a      	ldr	r2, [r7, #4]
    57be:	8a12      	ldrh	r2, [r2, #16]
    57c0:	801a      	strh	r2, [r3, #0]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    57c2:	687b      	ldr	r3, [r7, #4]
    57c4:	68d8      	ldr	r0, [r3, #12]
    57c6:	687b      	ldr	r3, [r7, #4]
    57c8:	681a      	ldr	r2, [r3, #0]
    57ca:	687b      	ldr	r3, [r7, #4]
    57cc:	689b      	ldr	r3, [r3, #8]
    57ce:	18d1      	adds	r1, r2, r3
    57d0:	231e      	movs	r3, #30
    57d2:	18fb      	adds	r3, r7, r3
    57d4:	881b      	ldrh	r3, [r3, #0]
    57d6:	001a      	movs	r2, r3
    57d8:	4b58      	ldr	r3, [pc, #352]	; (593c <_usb_d_dev_in_next+0x280>)
    57da:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    57dc:	687b      	ldr	r3, [r7, #4]
    57de:	68db      	ldr	r3, [r3, #12]
    57e0:	001a      	movs	r2, r3
    57e2:	2317      	movs	r3, #23
    57e4:	18fb      	adds	r3, r7, r3
    57e6:	781b      	ldrb	r3, [r3, #0]
    57e8:	2101      	movs	r1, #1
    57ea:	0018      	movs	r0, r3
    57ec:	4b54      	ldr	r3, [pc, #336]	; (5940 <_usb_d_dev_in_next+0x284>)
    57ee:	4798      	blx	r3
    57f0:	e018      	b.n	5824 <_usb_d_dev_in_next+0x168>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    57f2:	231e      	movs	r3, #30
    57f4:	18fb      	adds	r3, r7, r3
    57f6:	881a      	ldrh	r2, [r3, #0]
    57f8:	2380      	movs	r3, #128	; 0x80
    57fa:	019b      	lsls	r3, r3, #6
    57fc:	429a      	cmp	r2, r3
    57fe:	d904      	bls.n	580a <_usb_d_dev_in_next+0x14e>
				trans_next = USB_D_DEV_TRANS_MAX;
    5800:	231e      	movs	r3, #30
    5802:	18fb      	adds	r3, r7, r3
    5804:	2280      	movs	r2, #128	; 0x80
    5806:	0192      	lsls	r2, r2, #6
    5808:	801a      	strh	r2, [r3, #0]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    580a:	687b      	ldr	r3, [r7, #4]
    580c:	681a      	ldr	r2, [r3, #0]
    580e:	687b      	ldr	r3, [r7, #4]
    5810:	689b      	ldr	r3, [r3, #8]
    5812:	18d3      	adds	r3, r2, r3
    5814:	001a      	movs	r2, r3
    5816:	2317      	movs	r3, #23
    5818:	18fb      	adds	r3, r7, r3
    581a:	781b      	ldrb	r3, [r3, #0]
    581c:	2101      	movs	r1, #1
    581e:	0018      	movs	r0, r3
    5820:	4b47      	ldr	r3, [pc, #284]	; (5940 <_usb_d_dev_in_next+0x284>)
    5822:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    5824:	231e      	movs	r3, #30
    5826:	18fb      	adds	r3, r7, r3
    5828:	881a      	ldrh	r2, [r3, #0]
    582a:	2317      	movs	r3, #23
    582c:	18fb      	adds	r3, r7, r3
    582e:	7818      	ldrb	r0, [r3, #0]
    5830:	2300      	movs	r3, #0
    5832:	2101      	movs	r1, #1
    5834:	4c43      	ldr	r4, [pc, #268]	; (5944 <_usb_d_dev_in_next+0x288>)
    5836:	47a0      	blx	r4
		goto _in_tx_exec;
    5838:	e04b      	b.n	58d2 <_usb_d_dev_in_next+0x216>
	} else if (ept->flags.bits.need_zlp) {
    583a:	687b      	ldr	r3, [r7, #4]
    583c:	7cdb      	ldrb	r3, [r3, #19]
    583e:	2210      	movs	r2, #16
    5840:	4013      	ands	r3, r2
    5842:	b2db      	uxtb	r3, r3
    5844:	2b00      	cmp	r3, #0
    5846:	d00d      	beq.n	5864 <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.need_zlp = 0;
    5848:	687b      	ldr	r3, [r7, #4]
    584a:	7cda      	ldrb	r2, [r3, #19]
    584c:	2110      	movs	r1, #16
    584e:	438a      	bics	r2, r1
    5850:	74da      	strb	r2, [r3, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    5852:	2317      	movs	r3, #23
    5854:	18fb      	adds	r3, r7, r3
    5856:	7818      	ldrb	r0, [r3, #0]
    5858:	2300      	movs	r3, #0
    585a:	2200      	movs	r2, #0
    585c:	2101      	movs	r1, #1
    585e:	4c39      	ldr	r4, [pc, #228]	; (5944 <_usb_d_dev_in_next+0x288>)
    5860:	47a0      	blx	r4
		goto _in_tx_exec;
    5862:	e036      	b.n	58d2 <_usb_d_dev_in_next+0x216>
	}
	/* Complete. */
	if (is_ctrl) {
    5864:	230b      	movs	r3, #11
    5866:	18fb      	adds	r3, r7, r3
    5868:	781b      	ldrb	r3, [r3, #0]
    586a:	2b00      	cmp	r3, #0
    586c:	d008      	beq.n	5880 <_usb_d_dev_in_next+0x1c4>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    586e:	2317      	movs	r3, #23
    5870:	18fb      	adds	r3, r7, r3
    5872:	7819      	ldrb	r1, [r3, #0]
    5874:	69bb      	ldr	r3, [r7, #24]
    5876:	224b      	movs	r2, #75	; 0x4b
    5878:	0018      	movs	r0, r3
    587a:	4b33      	ldr	r3, [pc, #204]	; (5948 <_usb_d_dev_in_next+0x28c>)
    587c:	4798      	blx	r3
    587e:	e007      	b.n	5890 <_usb_d_dev_in_next+0x1d4>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    5880:	2317      	movs	r3, #23
    5882:	18fb      	adds	r3, r7, r3
    5884:	7819      	ldrb	r1, [r3, #0]
    5886:	69bb      	ldr	r3, [r7, #24]
    5888:	224a      	movs	r2, #74	; 0x4a
    588a:	0018      	movs	r0, r3
    588c:	4b2e      	ldr	r3, [pc, #184]	; (5948 <_usb_d_dev_in_next+0x28c>)
    588e:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    5890:	687b      	ldr	r3, [r7, #4]
    5892:	8a1b      	ldrh	r3, [r3, #16]
    5894:	220c      	movs	r2, #12
    5896:	18ba      	adds	r2, r7, r2
    5898:	8812      	ldrh	r2, [r2, #0]
    589a:	429a      	cmp	r2, r3
    589c:	d113      	bne.n	58c6 <_usb_d_dev_in_next+0x20a>
		ept->flags.bits.is_busy = 0;
    589e:	687b      	ldr	r3, [r7, #4]
    58a0:	7cda      	ldrb	r2, [r3, #19]
    58a2:	2140      	movs	r1, #64	; 0x40
    58a4:	438a      	bics	r2, r1
    58a6:	74da      	strb	r2, [r3, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    58a8:	4b28      	ldr	r3, [pc, #160]	; (594c <_usb_d_dev_in_next+0x290>)
    58aa:	68da      	ldr	r2, [r3, #12]
    58ac:	687b      	ldr	r3, [r7, #4]
    58ae:	7c98      	ldrb	r0, [r3, #18]
    58b0:	687b      	ldr	r3, [r7, #4]
    58b2:	689b      	ldr	r3, [r3, #8]
    58b4:	0019      	movs	r1, r3
    58b6:	4790      	blx	r2
    58b8:	1e03      	subs	r3, r0, #0
    58ba:	d132      	bne.n	5922 <_usb_d_dev_in_next+0x266>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    58bc:	687b      	ldr	r3, [r7, #4]
    58be:	7cda      	ldrb	r2, [r3, #19]
    58c0:	2140      	movs	r1, #64	; 0x40
    58c2:	430a      	orrs	r2, r1
    58c4:	74da      	strb	r2, [r3, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    58c6:	687b      	ldr	r3, [r7, #4]
    58c8:	2100      	movs	r1, #0
    58ca:	0018      	movs	r0, r3
    58cc:	4b20      	ldr	r3, [pc, #128]	; (5950 <_usb_d_dev_in_next+0x294>)
    58ce:	4798      	blx	r3
	return;
    58d0:	e028      	b.n	5924 <_usb_d_dev_in_next+0x268>

_in_tx_exec:
	if (!isr) {
    58d2:	1cfb      	adds	r3, r7, #3
    58d4:	781b      	ldrb	r3, [r3, #0]
    58d6:	2201      	movs	r2, #1
    58d8:	4053      	eors	r3, r2
    58da:	b2db      	uxtb	r3, r3
    58dc:	2b00      	cmp	r3, #0
    58de:	d017      	beq.n	5910 <_usb_d_dev_in_next+0x254>
		if (is_ctrl) {
    58e0:	230b      	movs	r3, #11
    58e2:	18fb      	adds	r3, r7, r3
    58e4:	781b      	ldrb	r3, [r3, #0]
    58e6:	2b00      	cmp	r3, #0
    58e8:	d004      	beq.n	58f4 <_usb_d_dev_in_next+0x238>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    58ea:	231d      	movs	r3, #29
    58ec:	18fb      	adds	r3, r7, r3
    58ee:	224e      	movs	r2, #78	; 0x4e
    58f0:	701a      	strb	r2, [r3, #0]
    58f2:	e003      	b.n	58fc <_usb_d_dev_in_next+0x240>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    58f4:	231d      	movs	r3, #29
    58f6:	18fb      	adds	r3, r7, r3
    58f8:	224a      	movs	r2, #74	; 0x4a
    58fa:	701a      	strb	r2, [r3, #0]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    58fc:	231d      	movs	r3, #29
    58fe:	18fb      	adds	r3, r7, r3
    5900:	781a      	ldrb	r2, [r3, #0]
    5902:	2317      	movs	r3, #23
    5904:	18fb      	adds	r3, r7, r3
    5906:	7819      	ldrb	r1, [r3, #0]
    5908:	69bb      	ldr	r3, [r7, #24]
    590a:	0018      	movs	r0, r3
    590c:	4b11      	ldr	r3, [pc, #68]	; (5954 <_usb_d_dev_in_next+0x298>)
    590e:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    5910:	2317      	movs	r3, #23
    5912:	18fb      	adds	r3, r7, r3
    5914:	781b      	ldrb	r3, [r3, #0]
    5916:	2201      	movs	r2, #1
    5918:	2101      	movs	r1, #1
    591a:	0018      	movs	r0, r3
    591c:	4b0e      	ldr	r3, [pc, #56]	; (5958 <_usb_d_dev_in_next+0x29c>)
    591e:	4798      	blx	r3
    5920:	e000      	b.n	5924 <_usb_d_dev_in_next+0x268>
			return;
    5922:	46c0      	nop			; (mov r8, r8)
}
    5924:	46bd      	mov	sp, r7
    5926:	b009      	add	sp, #36	; 0x24
    5928:	bd90      	pop	{r4, r7, pc}
    592a:	46c0      	nop			; (mov r8, r8)
    592c:	41005000 	.word	0x41005000
    5930:	20001058 	.word	0x20001058
    5934:	000003ff 	.word	0x000003ff
    5938:	00004f6d 	.word	0x00004f6d
    593c:	0000d10d 	.word	0x0000d10d
    5940:	00004fa1 	.word	0x00004fa1
    5944:	0000514d 	.word	0x0000514d
    5948:	000047bb 	.word	0x000047bb
    594c:	20000ef0 	.word	0x20000ef0
    5950:	00006e21 	.word	0x00006e21
    5954:	00004785 	.word	0x00004785
    5958:	00005235 	.word	0x00005235

0000595c <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    595c:	b590      	push	{r4, r7, lr}
    595e:	b08b      	sub	sp, #44	; 0x2c
    5960:	af00      	add	r7, sp, #0
    5962:	6078      	str	r0, [r7, #4]
    5964:	000a      	movs	r2, r1
    5966:	1cfb      	adds	r3, r7, #3
    5968:	701a      	strb	r2, [r3, #0]
	Usb *              hw         = USB;
    596a:	4bc7      	ldr	r3, [pc, #796]	; (5c88 <_usb_d_dev_out_next+0x32c>)
    596c:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    596e:	687b      	ldr	r3, [r7, #4]
    5970:	7c9a      	ldrb	r2, [r3, #18]
    5972:	231f      	movs	r3, #31
    5974:	18fb      	adds	r3, r7, r3
    5976:	210f      	movs	r1, #15
    5978:	400a      	ands	r2, r1
    597a:	701a      	strb	r2, [r3, #0]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    597c:	231f      	movs	r3, #31
    597e:	18fb      	adds	r3, r7, r3
    5980:	781b      	ldrb	r3, [r3, #0]
    5982:	015a      	lsls	r2, r3, #5
    5984:	4bc1      	ldr	r3, [pc, #772]	; (5c8c <_usb_d_dev_out_next+0x330>)
    5986:	18d3      	adds	r3, r2, r3
    5988:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    598a:	1cfb      	adds	r3, r7, #3
    598c:	781b      	ldrb	r3, [r3, #0]
    598e:	2b00      	cmp	r3, #0
    5990:	d006      	beq.n	59a0 <_usb_d_dev_out_next+0x44>
    5992:	69bb      	ldr	r3, [r7, #24]
    5994:	685b      	ldr	r3, [r3, #4]
    5996:	011b      	lsls	r3, r3, #4
    5998:	0c9b      	lsrs	r3, r3, #18
    599a:	b29b      	uxth	r3, r3
    599c:	001a      	movs	r2, r3
    599e:	e000      	b.n	59a2 <_usb_d_dev_out_next+0x46>
    59a0:	2200      	movs	r2, #0
    59a2:	2316      	movs	r3, #22
    59a4:	18fb      	adds	r3, r7, r3
    59a6:	801a      	strh	r2, [r3, #0]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    59a8:	1cfb      	adds	r3, r7, #3
    59aa:	781b      	ldrb	r3, [r3, #0]
    59ac:	2b00      	cmp	r3, #0
    59ae:	d006      	beq.n	59be <_usb_d_dev_out_next+0x62>
    59b0:	69bb      	ldr	r3, [r7, #24]
    59b2:	685b      	ldr	r3, [r3, #4]
    59b4:	049b      	lsls	r3, r3, #18
    59b6:	0c9b      	lsrs	r3, r3, #18
    59b8:	b29b      	uxth	r3, r3
    59ba:	001a      	movs	r2, r3
    59bc:	e000      	b.n	59c0 <_usb_d_dev_out_next+0x64>
    59be:	2200      	movs	r2, #0
    59c0:	2314      	movs	r3, #20
    59c2:	18fb      	adds	r3, r7, r3
    59c4:	801a      	strh	r2, [r3, #0]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    59c6:	687b      	ldr	r3, [r7, #4]
    59c8:	8a1b      	ldrh	r3, [r3, #16]
    59ca:	4ab1      	ldr	r2, [pc, #708]	; (5c90 <_usb_d_dev_out_next+0x334>)
    59cc:	4293      	cmp	r3, r2
    59ce:	d004      	beq.n	59da <_usb_d_dev_out_next+0x7e>
    59d0:	687b      	ldr	r3, [r7, #4]
    59d2:	8a1b      	ldrh	r3, [r3, #16]
    59d4:	3b01      	subs	r3, #1
    59d6:	b29a      	uxth	r2, r3
    59d8:	e000      	b.n	59dc <_usb_d_dev_out_next+0x80>
    59da:	4aad      	ldr	r2, [pc, #692]	; (5c90 <_usb_d_dev_out_next+0x334>)
    59dc:	2312      	movs	r3, #18
    59de:	18fb      	adds	r3, r7, r3
    59e0:	801a      	strh	r2, [r3, #0]
	uint16_t           last_pkt   = last_trans & size_mask;
    59e2:	2310      	movs	r3, #16
    59e4:	18fb      	adds	r3, r7, r3
    59e6:	2214      	movs	r2, #20
    59e8:	18ba      	adds	r2, r7, r2
    59ea:	2112      	movs	r1, #18
    59ec:	1879      	adds	r1, r7, r1
    59ee:	8812      	ldrh	r2, [r2, #0]
    59f0:	8809      	ldrh	r1, [r1, #0]
    59f2:	400a      	ands	r2, r1
    59f4:	801a      	strh	r2, [r3, #0]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    59f6:	687b      	ldr	r3, [r7, #4]
    59f8:	7cdb      	ldrb	r3, [r3, #19]
    59fa:	2207      	movs	r2, #7
    59fc:	4013      	ands	r3, r2
    59fe:	b2da      	uxtb	r2, r3
    5a00:	230f      	movs	r3, #15
    5a02:	18fb      	adds	r3, r7, r3
    5a04:	3a01      	subs	r2, #1
    5a06:	4251      	negs	r1, r2
    5a08:	414a      	adcs	r2, r1
    5a0a:	701a      	strb	r2, [r3, #0]

	if (isr) {
    5a0c:	1cfb      	adds	r3, r7, #3
    5a0e:	781b      	ldrb	r3, [r3, #0]
    5a10:	2b00      	cmp	r3, #0
    5a12:	d006      	beq.n	5a22 <_usb_d_dev_out_next+0xc6>
		_usbd_ep_ack_io_cpt(epn, 0);
    5a14:	231f      	movs	r3, #31
    5a16:	18fb      	adds	r3, r7, r3
    5a18:	781b      	ldrb	r3, [r3, #0]
    5a1a:	2100      	movs	r1, #0
    5a1c:	0018      	movs	r0, r3
    5a1e:	4b9d      	ldr	r3, [pc, #628]	; (5c94 <_usb_d_dev_out_next+0x338>)
    5a20:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    5a22:	687b      	ldr	r3, [r7, #4]
    5a24:	7cdb      	ldrb	r3, [r3, #19]
    5a26:	2220      	movs	r2, #32
    5a28:	4013      	ands	r3, r2
    5a2a:	b2db      	uxtb	r3, r3
    5a2c:	2b00      	cmp	r3, #0
    5a2e:	d026      	beq.n	5a7e <_usb_d_dev_out_next+0x122>
    5a30:	687b      	ldr	r3, [r7, #4]
    5a32:	685b      	ldr	r3, [r3, #4]
    5a34:	2b00      	cmp	r3, #0
    5a36:	d022      	beq.n	5a7e <_usb_d_dev_out_next+0x122>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    5a38:	687b      	ldr	r3, [r7, #4]
    5a3a:	685b      	ldr	r3, [r3, #4]
    5a3c:	b299      	uxth	r1, r3
    5a3e:	687b      	ldr	r3, [r7, #4]
    5a40:	689b      	ldr	r3, [r3, #8]
    5a42:	b29a      	uxth	r2, r3
    5a44:	230c      	movs	r3, #12
    5a46:	18fb      	adds	r3, r7, r3
    5a48:	1a8a      	subs	r2, r1, r2
    5a4a:	801a      	strh	r2, [r3, #0]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    5a4c:	687b      	ldr	r3, [r7, #4]
    5a4e:	681a      	ldr	r2, [r3, #0]
    5a50:	687b      	ldr	r3, [r7, #4]
    5a52:	689b      	ldr	r3, [r3, #8]
    5a54:	18d0      	adds	r0, r2, r3
    5a56:	687b      	ldr	r3, [r7, #4]
    5a58:	68d9      	ldr	r1, [r3, #12]
    5a5a:	230c      	movs	r3, #12
    5a5c:	18fa      	adds	r2, r7, r3
    5a5e:	2310      	movs	r3, #16
    5a60:	18fb      	adds	r3, r7, r3
    5a62:	8812      	ldrh	r2, [r2, #0]
    5a64:	881b      	ldrh	r3, [r3, #0]
    5a66:	429a      	cmp	r2, r3
    5a68:	d903      	bls.n	5a72 <_usb_d_dev_out_next+0x116>
    5a6a:	2310      	movs	r3, #16
    5a6c:	18fb      	adds	r3, r7, r3
    5a6e:	881b      	ldrh	r3, [r3, #0]
    5a70:	e002      	b.n	5a78 <_usb_d_dev_out_next+0x11c>
    5a72:	230c      	movs	r3, #12
    5a74:	18fb      	adds	r3, r7, r3
    5a76:	881b      	ldrh	r3, [r3, #0]
    5a78:	001a      	movs	r2, r3
    5a7a:	4b87      	ldr	r3, [pc, #540]	; (5c98 <_usb_d_dev_out_next+0x33c>)
    5a7c:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    5a7e:	687b      	ldr	r3, [r7, #4]
    5a80:	685b      	ldr	r3, [r3, #4]
    5a82:	2b00      	cmp	r3, #0
    5a84:	d125      	bne.n	5ad2 <_usb_d_dev_out_next+0x176>
    5a86:	687b      	ldr	r3, [r7, #4]
    5a88:	7cdb      	ldrb	r3, [r3, #19]
    5a8a:	2210      	movs	r2, #16
    5a8c:	4013      	ands	r3, r2
    5a8e:	b2db      	uxtb	r3, r3
    5a90:	2b00      	cmp	r3, #0
    5a92:	d01e      	beq.n	5ad2 <_usb_d_dev_out_next+0x176>
		ept->flags.bits.need_zlp  = 0;
    5a94:	687b      	ldr	r3, [r7, #4]
    5a96:	7cda      	ldrb	r2, [r3, #19]
    5a98:	2110      	movs	r1, #16
    5a9a:	438a      	bics	r2, r1
    5a9c:	74da      	strb	r2, [r3, #19]
		ept->flags.bits.use_cache = 1;
    5a9e:	687b      	ldr	r3, [r7, #4]
    5aa0:	7cda      	ldrb	r2, [r3, #19]
    5aa2:	2120      	movs	r1, #32
    5aa4:	430a      	orrs	r2, r1
    5aa6:	74da      	strb	r2, [r3, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    5aa8:	687b      	ldr	r3, [r7, #4]
    5aaa:	68db      	ldr	r3, [r3, #12]
    5aac:	001a      	movs	r2, r3
    5aae:	231f      	movs	r3, #31
    5ab0:	18fb      	adds	r3, r7, r3
    5ab2:	781b      	ldrb	r3, [r3, #0]
    5ab4:	2100      	movs	r1, #0
    5ab6:	0018      	movs	r0, r3
    5ab8:	4b78      	ldr	r3, [pc, #480]	; (5c9c <_usb_d_dev_out_next+0x340>)
    5aba:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    5abc:	687b      	ldr	r3, [r7, #4]
    5abe:	8a1b      	ldrh	r3, [r3, #16]
    5ac0:	001a      	movs	r2, r3
    5ac2:	231f      	movs	r3, #31
    5ac4:	18fb      	adds	r3, r7, r3
    5ac6:	7818      	ldrb	r0, [r3, #0]
    5ac8:	2300      	movs	r3, #0
    5aca:	2100      	movs	r1, #0
    5acc:	4c74      	ldr	r4, [pc, #464]	; (5ca0 <_usb_d_dev_out_next+0x344>)
    5ace:	47a0      	blx	r4
		goto _out_rx_exec;
    5ad0:	e0c2      	b.n	5c58 <_usb_d_dev_out_next+0x2fc>
	} else if (isr && last_pkt < ept->size) {
    5ad2:	1cfb      	adds	r3, r7, #3
    5ad4:	781b      	ldrb	r3, [r3, #0]
    5ad6:	2b00      	cmp	r3, #0
    5ad8:	d014      	beq.n	5b04 <_usb_d_dev_out_next+0x1a8>
    5ada:	687b      	ldr	r3, [r7, #4]
    5adc:	8a1b      	ldrh	r3, [r3, #16]
    5ade:	2210      	movs	r2, #16
    5ae0:	18ba      	adds	r2, r7, r2
    5ae2:	8812      	ldrh	r2, [r2, #0]
    5ae4:	429a      	cmp	r2, r3
    5ae6:	d20d      	bcs.n	5b04 <_usb_d_dev_out_next+0x1a8>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    5ae8:	687b      	ldr	r3, [r7, #4]
    5aea:	7cda      	ldrb	r2, [r3, #19]
    5aec:	2110      	movs	r1, #16
    5aee:	438a      	bics	r2, r1
    5af0:	74da      	strb	r2, [r3, #19]
		ept->trans_count += last_trans;
    5af2:	687b      	ldr	r3, [r7, #4]
    5af4:	689a      	ldr	r2, [r3, #8]
    5af6:	2314      	movs	r3, #20
    5af8:	18fb      	adds	r3, r7, r3
    5afa:	881b      	ldrh	r3, [r3, #0]
    5afc:	18d2      	adds	r2, r2, r3
    5afe:	687b      	ldr	r3, [r7, #4]
    5b00:	609a      	str	r2, [r3, #8]
    5b02:	e07e      	b.n	5c02 <_usb_d_dev_out_next+0x2a6>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    5b04:	687b      	ldr	r3, [r7, #4]
    5b06:	689a      	ldr	r2, [r3, #8]
    5b08:	2316      	movs	r3, #22
    5b0a:	18fb      	adds	r3, r7, r3
    5b0c:	881b      	ldrh	r3, [r3, #0]
    5b0e:	18d2      	adds	r2, r2, r3
    5b10:	687b      	ldr	r3, [r7, #4]
    5b12:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    5b14:	687b      	ldr	r3, [r7, #4]
    5b16:	689a      	ldr	r2, [r3, #8]
    5b18:	687b      	ldr	r3, [r7, #4]
    5b1a:	685b      	ldr	r3, [r3, #4]
    5b1c:	429a      	cmp	r2, r3
    5b1e:	d300      	bcc.n	5b22 <_usb_d_dev_out_next+0x1c6>
    5b20:	e06f      	b.n	5c02 <_usb_d_dev_out_next+0x2a6>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    5b22:	687b      	ldr	r3, [r7, #4]
    5b24:	685b      	ldr	r3, [r3, #4]
    5b26:	b299      	uxth	r1, r3
    5b28:	687b      	ldr	r3, [r7, #4]
    5b2a:	689b      	ldr	r3, [r3, #8]
    5b2c:	b29a      	uxth	r2, r3
    5b2e:	2326      	movs	r3, #38	; 0x26
    5b30:	18fb      	adds	r3, r7, r3
    5b32:	1a8a      	subs	r2, r1, r2
    5b34:	801a      	strh	r2, [r3, #0]
			if (ept->flags.bits.use_cache) {
    5b36:	687b      	ldr	r3, [r7, #4]
    5b38:	7cdb      	ldrb	r3, [r3, #19]
    5b3a:	2220      	movs	r2, #32
    5b3c:	4013      	ands	r3, r2
    5b3e:	b2db      	uxtb	r3, r3
    5b40:	2b00      	cmp	r3, #0
    5b42:	d016      	beq.n	5b72 <_usb_d_dev_out_next+0x216>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    5b44:	687b      	ldr	r3, [r7, #4]
    5b46:	8a1b      	ldrh	r3, [r3, #16]
    5b48:	2226      	movs	r2, #38	; 0x26
    5b4a:	18ba      	adds	r2, r7, r2
    5b4c:	8812      	ldrh	r2, [r2, #0]
    5b4e:	429a      	cmp	r2, r3
    5b50:	d904      	bls.n	5b5c <_usb_d_dev_out_next+0x200>
					trans_next = ept->size;
    5b52:	2326      	movs	r3, #38	; 0x26
    5b54:	18fb      	adds	r3, r7, r3
    5b56:	687a      	ldr	r2, [r7, #4]
    5b58:	8a12      	ldrh	r2, [r2, #16]
    5b5a:	801a      	strh	r2, [r3, #0]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    5b5c:	687b      	ldr	r3, [r7, #4]
    5b5e:	68db      	ldr	r3, [r3, #12]
    5b60:	001a      	movs	r2, r3
    5b62:	231f      	movs	r3, #31
    5b64:	18fb      	adds	r3, r7, r3
    5b66:	781b      	ldrb	r3, [r3, #0]
    5b68:	2100      	movs	r1, #0
    5b6a:	0018      	movs	r0, r3
    5b6c:	4b4b      	ldr	r3, [pc, #300]	; (5c9c <_usb_d_dev_out_next+0x340>)
    5b6e:	4798      	blx	r3
    5b70:	e03c      	b.n	5bec <_usb_d_dev_out_next+0x290>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    5b72:	687b      	ldr	r3, [r7, #4]
    5b74:	8a1b      	ldrh	r3, [r3, #16]
    5b76:	2226      	movs	r2, #38	; 0x26
    5b78:	18ba      	adds	r2, r7, r2
    5b7a:	8812      	ldrh	r2, [r2, #0]
    5b7c:	429a      	cmp	r2, r3
    5b7e:	d91c      	bls.n	5bba <_usb_d_dev_out_next+0x25e>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    5b80:	2326      	movs	r3, #38	; 0x26
    5b82:	18fb      	adds	r3, r7, r3
    5b84:	881a      	ldrh	r2, [r3, #0]
    5b86:	2380      	movs	r3, #128	; 0x80
    5b88:	019b      	lsls	r3, r3, #6
    5b8a:	429a      	cmp	r2, r3
    5b8c:	d905      	bls.n	5b9a <_usb_d_dev_out_next+0x23e>
						trans_next = USB_D_DEV_TRANS_MAX;
    5b8e:	2326      	movs	r3, #38	; 0x26
    5b90:	18fb      	adds	r3, r7, r3
    5b92:	2280      	movs	r2, #128	; 0x80
    5b94:	0192      	lsls	r2, r2, #6
    5b96:	801a      	strh	r2, [r3, #0]
    5b98:	e01b      	b.n	5bd2 <_usb_d_dev_out_next+0x276>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    5b9a:	2326      	movs	r3, #38	; 0x26
    5b9c:	18fb      	adds	r3, r7, r3
    5b9e:	2212      	movs	r2, #18
    5ba0:	18ba      	adds	r2, r7, r2
    5ba2:	881b      	ldrh	r3, [r3, #0]
    5ba4:	8812      	ldrh	r2, [r2, #0]
    5ba6:	4013      	ands	r3, r2
    5ba8:	b29a      	uxth	r2, r3
    5baa:	2326      	movs	r3, #38	; 0x26
    5bac:	18fb      	adds	r3, r7, r3
    5bae:	2126      	movs	r1, #38	; 0x26
    5bb0:	1879      	adds	r1, r7, r1
    5bb2:	8809      	ldrh	r1, [r1, #0]
    5bb4:	1a8a      	subs	r2, r1, r2
    5bb6:	801a      	strh	r2, [r3, #0]
    5bb8:	e00b      	b.n	5bd2 <_usb_d_dev_out_next+0x276>
					}
				} else if (trans_next < ept->size) {
    5bba:	687b      	ldr	r3, [r7, #4]
    5bbc:	8a1b      	ldrh	r3, [r3, #16]
    5bbe:	2226      	movs	r2, #38	; 0x26
    5bc0:	18ba      	adds	r2, r7, r2
    5bc2:	8812      	ldrh	r2, [r2, #0]
    5bc4:	429a      	cmp	r2, r3
    5bc6:	d204      	bcs.n	5bd2 <_usb_d_dev_out_next+0x276>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    5bc8:	687b      	ldr	r3, [r7, #4]
    5bca:	7cda      	ldrb	r2, [r3, #19]
    5bcc:	2120      	movs	r1, #32
    5bce:	430a      	orrs	r2, r1
    5bd0:	74da      	strb	r2, [r3, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    5bd2:	687b      	ldr	r3, [r7, #4]
    5bd4:	681a      	ldr	r2, [r3, #0]
    5bd6:	687b      	ldr	r3, [r7, #4]
    5bd8:	689b      	ldr	r3, [r3, #8]
    5bda:	18d3      	adds	r3, r2, r3
    5bdc:	001a      	movs	r2, r3
    5bde:	231f      	movs	r3, #31
    5be0:	18fb      	adds	r3, r7, r3
    5be2:	781b      	ldrb	r3, [r3, #0]
    5be4:	2100      	movs	r1, #0
    5be6:	0018      	movs	r0, r3
    5be8:	4b2c      	ldr	r3, [pc, #176]	; (5c9c <_usb_d_dev_out_next+0x340>)
    5bea:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    5bec:	2326      	movs	r3, #38	; 0x26
    5bee:	18fb      	adds	r3, r7, r3
    5bf0:	881a      	ldrh	r2, [r3, #0]
    5bf2:	231f      	movs	r3, #31
    5bf4:	18fb      	adds	r3, r7, r3
    5bf6:	7818      	ldrb	r0, [r3, #0]
    5bf8:	2300      	movs	r3, #0
    5bfa:	2100      	movs	r1, #0
    5bfc:	4c28      	ldr	r4, [pc, #160]	; (5ca0 <_usb_d_dev_out_next+0x344>)
    5bfe:	47a0      	blx	r4
			goto _out_rx_exec;
    5c00:	e02a      	b.n	5c58 <_usb_d_dev_out_next+0x2fc>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    5c02:	230f      	movs	r3, #15
    5c04:	18fb      	adds	r3, r7, r3
    5c06:	781b      	ldrb	r3, [r3, #0]
    5c08:	2b00      	cmp	r3, #0
    5c0a:	d008      	beq.n	5c1e <_usb_d_dev_out_next+0x2c2>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    5c0c:	231f      	movs	r3, #31
    5c0e:	18fb      	adds	r3, r7, r3
    5c10:	7819      	ldrb	r1, [r3, #0]
    5c12:	6a3b      	ldr	r3, [r7, #32]
    5c14:	222d      	movs	r2, #45	; 0x2d
    5c16:	0018      	movs	r0, r3
    5c18:	4b22      	ldr	r3, [pc, #136]	; (5ca4 <_usb_d_dev_out_next+0x348>)
    5c1a:	4798      	blx	r3
    5c1c:	e007      	b.n	5c2e <_usb_d_dev_out_next+0x2d2>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    5c1e:	231f      	movs	r3, #31
    5c20:	18fb      	adds	r3, r7, r3
    5c22:	7819      	ldrb	r1, [r3, #0]
    5c24:	6a3b      	ldr	r3, [r7, #32]
    5c26:	2225      	movs	r2, #37	; 0x25
    5c28:	0018      	movs	r0, r3
    5c2a:	4b1e      	ldr	r3, [pc, #120]	; (5ca4 <_usb_d_dev_out_next+0x348>)
    5c2c:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    5c2e:	231f      	movs	r3, #31
    5c30:	18fb      	adds	r3, r7, r3
    5c32:	781b      	ldrb	r3, [r3, #0]
    5c34:	2b00      	cmp	r3, #0
    5c36:	d109      	bne.n	5c4c <_usb_d_dev_out_next+0x2f0>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    5c38:	687b      	ldr	r3, [r7, #4]
    5c3a:	68db      	ldr	r3, [r3, #12]
    5c3c:	001a      	movs	r2, r3
    5c3e:	231f      	movs	r3, #31
    5c40:	18fb      	adds	r3, r7, r3
    5c42:	781b      	ldrb	r3, [r3, #0]
    5c44:	2100      	movs	r1, #0
    5c46:	0018      	movs	r0, r3
    5c48:	4b14      	ldr	r3, [pc, #80]	; (5c9c <_usb_d_dev_out_next+0x340>)
    5c4a:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    5c4c:	687b      	ldr	r3, [r7, #4]
    5c4e:	2100      	movs	r1, #0
    5c50:	0018      	movs	r0, r3
    5c52:	4b15      	ldr	r3, [pc, #84]	; (5ca8 <_usb_d_dev_out_next+0x34c>)
    5c54:	4798      	blx	r3
	return;
    5c56:	e041      	b.n	5cdc <_usb_d_dev_out_next+0x380>

_out_rx_exec:
	if (!isr) {
    5c58:	1cfb      	adds	r3, r7, #3
    5c5a:	781b      	ldrb	r3, [r3, #0]
    5c5c:	2201      	movs	r2, #1
    5c5e:	4053      	eors	r3, r2
    5c60:	b2db      	uxtb	r3, r3
    5c62:	2b00      	cmp	r3, #0
    5c64:	d032      	beq.n	5ccc <_usb_d_dev_out_next+0x370>
		if (is_ctrl) {
    5c66:	230f      	movs	r3, #15
    5c68:	18fb      	adds	r3, r7, r3
    5c6a:	781b      	ldrb	r3, [r3, #0]
    5c6c:	2b00      	cmp	r3, #0
    5c6e:	d01f      	beq.n	5cb0 <_usb_d_dev_out_next+0x354>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    5c70:	231f      	movs	r3, #31
    5c72:	18fb      	adds	r3, r7, r3
    5c74:	781b      	ldrb	r3, [r3, #0]
    5c76:	2101      	movs	r1, #1
    5c78:	0018      	movs	r0, r3
    5c7a:	4b0c      	ldr	r3, [pc, #48]	; (5cac <_usb_d_dev_out_next+0x350>)
    5c7c:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    5c7e:	2325      	movs	r3, #37	; 0x25
    5c80:	18fb      	adds	r3, r7, r3
    5c82:	222d      	movs	r2, #45	; 0x2d
    5c84:	701a      	strb	r2, [r3, #0]
    5c86:	e017      	b.n	5cb8 <_usb_d_dev_out_next+0x35c>
    5c88:	41005000 	.word	0x41005000
    5c8c:	20001058 	.word	0x20001058
    5c90:	000003ff 	.word	0x000003ff
    5c94:	00004f6d 	.word	0x00004f6d
    5c98:	0000d10d 	.word	0x0000d10d
    5c9c:	00004fa1 	.word	0x00004fa1
    5ca0:	000051a5 	.word	0x000051a5
    5ca4:	000047bb 	.word	0x000047bb
    5ca8:	00006e21 	.word	0x00006e21
    5cac:	000051fd 	.word	0x000051fd
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    5cb0:	2325      	movs	r3, #37	; 0x25
    5cb2:	18fb      	adds	r3, r7, r3
    5cb4:	2225      	movs	r2, #37	; 0x25
    5cb6:	701a      	strb	r2, [r3, #0]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    5cb8:	2325      	movs	r3, #37	; 0x25
    5cba:	18fb      	adds	r3, r7, r3
    5cbc:	781a      	ldrb	r2, [r3, #0]
    5cbe:	231f      	movs	r3, #31
    5cc0:	18fb      	adds	r3, r7, r3
    5cc2:	7819      	ldrb	r1, [r3, #0]
    5cc4:	6a3b      	ldr	r3, [r7, #32]
    5cc6:	0018      	movs	r0, r3
    5cc8:	4b06      	ldr	r3, [pc, #24]	; (5ce4 <_usb_d_dev_out_next+0x388>)
    5cca:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    5ccc:	231f      	movs	r3, #31
    5cce:	18fb      	adds	r3, r7, r3
    5cd0:	781b      	ldrb	r3, [r3, #0]
    5cd2:	2201      	movs	r2, #1
    5cd4:	2100      	movs	r1, #0
    5cd6:	0018      	movs	r0, r3
    5cd8:	4b03      	ldr	r3, [pc, #12]	; (5ce8 <_usb_d_dev_out_next+0x38c>)
    5cda:	4798      	blx	r3
}
    5cdc:	46bd      	mov	sp, r7
    5cde:	b00b      	add	sp, #44	; 0x2c
    5ce0:	bd90      	pop	{r4, r7, pc}
    5ce2:	46c0      	nop			; (mov r8, r8)
    5ce4:	00004785 	.word	0x00004785
    5ce8:	000052a1 	.word	0x000052a1

00005cec <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    5cec:	b580      	push	{r7, lr}
    5cee:	b084      	sub	sp, #16
    5cf0:	af00      	add	r7, sp, #0
    5cf2:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    5cf4:	687b      	ldr	r3, [r7, #4]
    5cf6:	7c9a      	ldrb	r2, [r3, #18]
    5cf8:	230f      	movs	r3, #15
    5cfa:	18fb      	adds	r3, r7, r3
    5cfc:	210f      	movs	r1, #15
    5cfe:	400a      	ands	r2, r1
    5d00:	701a      	strb	r2, [r3, #0]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    5d02:	687b      	ldr	r3, [r7, #4]
    5d04:	7cdb      	ldrb	r3, [r3, #19]
    5d06:	2207      	movs	r2, #7
    5d08:	4013      	ands	r3, r2
    5d0a:	b2da      	uxtb	r2, r3
    5d0c:	230e      	movs	r3, #14
    5d0e:	18fb      	adds	r3, r7, r3
    5d10:	3a01      	subs	r2, #1
    5d12:	4251      	negs	r1, r2
    5d14:	414a      	adcs	r2, r1
    5d16:	701a      	strb	r2, [r3, #0]

	if (!is_ctrl) {
    5d18:	230e      	movs	r3, #14
    5d1a:	18fb      	adds	r3, r7, r3
    5d1c:	781b      	ldrb	r3, [r3, #0]
    5d1e:	2201      	movs	r2, #1
    5d20:	4053      	eors	r3, r2
    5d22:	b2db      	uxtb	r3, r3
    5d24:	2b00      	cmp	r3, #0
    5d26:	d00c      	beq.n	5d42 <_usb_d_dev_handle_setup+0x56>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    5d28:	230f      	movs	r3, #15
    5d2a:	18fb      	adds	r3, r7, r3
    5d2c:	781b      	ldrb	r3, [r3, #0]
    5d2e:	0018      	movs	r0, r3
    5d30:	4b27      	ldr	r3, [pc, #156]	; (5dd0 <_usb_d_dev_handle_setup+0xe4>)
    5d32:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    5d34:	230f      	movs	r3, #15
    5d36:	18fb      	adds	r3, r7, r3
    5d38:	781b      	ldrb	r3, [r3, #0]
    5d3a:	0018      	movs	r0, r3
    5d3c:	4b25      	ldr	r3, [pc, #148]	; (5dd4 <_usb_d_dev_handle_setup+0xe8>)
    5d3e:	4798      	blx	r3
		return;
    5d40:	e042      	b.n	5dc8 <_usb_d_dev_handle_setup+0xdc>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    5d42:	687b      	ldr	r3, [r7, #4]
    5d44:	7cdb      	ldrb	r3, [r3, #19]
    5d46:	2240      	movs	r2, #64	; 0x40
    5d48:	4013      	ands	r3, r2
    5d4a:	b2db      	uxtb	r3, r3
    5d4c:	2b00      	cmp	r3, #0
    5d4e:	d014      	beq.n	5d7a <_usb_d_dev_handle_setup+0x8e>
		ept->flags.bits.is_busy = 0;
    5d50:	687b      	ldr	r3, [r7, #4]
    5d52:	7cda      	ldrb	r2, [r3, #19]
    5d54:	2140      	movs	r1, #64	; 0x40
    5d56:	438a      	bics	r2, r1
    5d58:	74da      	strb	r2, [r3, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    5d5a:	230f      	movs	r3, #15
    5d5c:	18fb      	adds	r3, r7, r3
    5d5e:	781b      	ldrb	r3, [r3, #0]
    5d60:	2200      	movs	r2, #0
    5d62:	2101      	movs	r1, #1
    5d64:	0018      	movs	r0, r3
    5d66:	4b1c      	ldr	r3, [pc, #112]	; (5dd8 <_usb_d_dev_handle_setup+0xec>)
    5d68:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    5d6a:	230f      	movs	r3, #15
    5d6c:	18fb      	adds	r3, r7, r3
    5d6e:	781b      	ldrb	r3, [r3, #0]
    5d70:	2200      	movs	r2, #0
    5d72:	2100      	movs	r1, #0
    5d74:	0018      	movs	r0, r3
    5d76:	4b19      	ldr	r3, [pc, #100]	; (5ddc <_usb_d_dev_handle_setup+0xf0>)
    5d78:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    5d7a:	687b      	ldr	r3, [r7, #4]
    5d7c:	7cda      	ldrb	r2, [r3, #19]
    5d7e:	2108      	movs	r1, #8
    5d80:	438a      	bics	r2, r1
    5d82:	74da      	strb	r2, [r3, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    5d84:	230f      	movs	r3, #15
    5d86:	18fb      	adds	r3, r7, r3
    5d88:	781b      	ldrb	r3, [r3, #0]
    5d8a:	2100      	movs	r1, #0
    5d8c:	0018      	movs	r0, r3
    5d8e:	4b14      	ldr	r3, [pc, #80]	; (5de0 <_usb_d_dev_handle_setup+0xf4>)
    5d90:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    5d92:	230f      	movs	r3, #15
    5d94:	18fb      	adds	r3, r7, r3
    5d96:	781b      	ldrb	r3, [r3, #0]
    5d98:	2101      	movs	r1, #1
    5d9a:	0018      	movs	r0, r3
    5d9c:	4b10      	ldr	r3, [pc, #64]	; (5de0 <_usb_d_dev_handle_setup+0xf4>)
    5d9e:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    5da0:	230f      	movs	r3, #15
    5da2:	18fb      	adds	r3, r7, r3
    5da4:	781b      	ldrb	r3, [r3, #0]
    5da6:	216f      	movs	r1, #111	; 0x6f
    5da8:	0018      	movs	r0, r3
    5daa:	4b0e      	ldr	r3, [pc, #56]	; (5de4 <_usb_d_dev_handle_setup+0xf8>)
    5dac:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    5dae:	230f      	movs	r3, #15
    5db0:	18fb      	adds	r3, r7, r3
    5db2:	781b      	ldrb	r3, [r3, #0]
    5db4:	216f      	movs	r1, #111	; 0x6f
    5db6:	0018      	movs	r0, r3
    5db8:	4b0b      	ldr	r3, [pc, #44]	; (5de8 <_usb_d_dev_handle_setup+0xfc>)
    5dba:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    5dbc:	4b0b      	ldr	r3, [pc, #44]	; (5dec <_usb_d_dev_handle_setup+0x100>)
    5dbe:	689b      	ldr	r3, [r3, #8]
    5dc0:	687a      	ldr	r2, [r7, #4]
    5dc2:	7c92      	ldrb	r2, [r2, #18]
    5dc4:	0010      	movs	r0, r2
    5dc6:	4798      	blx	r3
}
    5dc8:	46bd      	mov	sp, r7
    5dca:	b004      	add	sp, #16
    5dcc:	bd80      	pop	{r7, pc}
    5dce:	46c0      	nop			; (mov r8, r8)
    5dd0:	00004edd 	.word	0x00004edd
    5dd4:	00004e7d 	.word	0x00004e7d
    5dd8:	00005235 	.word	0x00005235
    5ddc:	000052a1 	.word	0x000052a1
    5de0:	000051fd 	.word	0x000051fd
    5de4:	00004c21 	.word	0x00004c21
    5de8:	00004c81 	.word	0x00004c81
    5dec:	20000ef0 	.word	0x20000ef0

00005df0 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    5df0:	b590      	push	{r4, r7, lr}
    5df2:	b085      	sub	sp, #20
    5df4:	af00      	add	r7, sp, #0
    5df6:	6078      	str	r0, [r7, #4]
    5df8:	000a      	movs	r2, r1
    5dfa:	1cfb      	adds	r3, r7, #3
    5dfc:	701a      	strb	r2, [r3, #0]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    5dfe:	687b      	ldr	r3, [r7, #4]
    5e00:	7c9a      	ldrb	r2, [r3, #18]
    5e02:	230f      	movs	r3, #15
    5e04:	18fb      	adds	r3, r7, r3
    5e06:	210f      	movs	r1, #15
    5e08:	400a      	ands	r2, r1
    5e0a:	701a      	strb	r2, [r3, #0]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    5e0c:	1cfb      	adds	r3, r7, #3
    5e0e:	7819      	ldrb	r1, [r3, #0]
    5e10:	230f      	movs	r3, #15
    5e12:	18fb      	adds	r3, r7, r3
    5e14:	781b      	ldrb	r3, [r3, #0]
    5e16:	2200      	movs	r2, #0
    5e18:	0018      	movs	r0, r3
    5e1a:	4b07      	ldr	r3, [pc, #28]	; (5e38 <_usb_d_dev_handle_stall+0x48>)
    5e1c:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    5e1e:	4b07      	ldr	r3, [pc, #28]	; (5e3c <_usb_d_dev_handle_stall+0x4c>)
    5e20:	691c      	ldr	r4, [r3, #16]
    5e22:	687b      	ldr	r3, [r7, #4]
    5e24:	7c98      	ldrb	r0, [r3, #18]
    5e26:	687b      	ldr	r3, [r7, #4]
    5e28:	689b      	ldr	r3, [r3, #8]
    5e2a:	001a      	movs	r2, r3
    5e2c:	2101      	movs	r1, #1
    5e2e:	47a0      	blx	r4
}
    5e30:	46c0      	nop			; (mov r8, r8)
    5e32:	46bd      	mov	sp, r7
    5e34:	b005      	add	sp, #20
    5e36:	bd90      	pop	{r4, r7, pc}
    5e38:	00004e1d 	.word	0x00004e1d
    5e3c:	20000ef0 	.word	0x20000ef0

00005e40 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    5e40:	b580      	push	{r7, lr}
    5e42:	b088      	sub	sp, #32
    5e44:	af00      	add	r7, sp, #0
    5e46:	6078      	str	r0, [r7, #4]
    5e48:	000a      	movs	r2, r1
    5e4a:	1cfb      	adds	r3, r7, #3
    5e4c:	701a      	strb	r2, [r3, #0]
	Usb *              hw      = USB;
    5e4e:	4b78      	ldr	r3, [pc, #480]	; (6030 <_usb_d_dev_handle_trfail+0x1f0>)
    5e50:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    5e52:	687b      	ldr	r3, [r7, #4]
    5e54:	7c9a      	ldrb	r2, [r3, #18]
    5e56:	231b      	movs	r3, #27
    5e58:	18fb      	adds	r3, r7, r3
    5e5a:	210f      	movs	r1, #15
    5e5c:	400a      	ands	r2, r1
    5e5e:	701a      	strb	r2, [r3, #0]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    5e60:	2310      	movs	r3, #16
    5e62:	18fb      	adds	r3, r7, r3
    5e64:	4a73      	ldr	r2, [pc, #460]	; (6034 <_usb_d_dev_handle_trfail+0x1f4>)
    5e66:	8812      	ldrh	r2, [r2, #0]
    5e68:	801a      	strh	r2, [r3, #0]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    5e6a:	231b      	movs	r3, #27
    5e6c:	18fb      	adds	r3, r7, r3
    5e6e:	781b      	ldrb	r3, [r3, #0]
    5e70:	015a      	lsls	r2, r3, #5
    5e72:	4b71      	ldr	r3, [pc, #452]	; (6038 <_usb_d_dev_handle_trfail+0x1f8>)
    5e74:	18d3      	adds	r3, r2, r3
    5e76:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    5e78:	1cfb      	adds	r3, r7, #3
    5e7a:	781b      	ldrb	r3, [r3, #0]
    5e7c:	2b00      	cmp	r3, #0
    5e7e:	d00a      	beq.n	5e96 <_usb_d_dev_handle_trfail+0x56>
    5e80:	231b      	movs	r3, #27
    5e82:	18fb      	adds	r3, r7, r3
    5e84:	781a      	ldrb	r2, [r3, #0]
    5e86:	69fb      	ldr	r3, [r7, #28]
    5e88:	0011      	movs	r1, r2
    5e8a:	0018      	movs	r0, r3
    5e8c:	4b6b      	ldr	r3, [pc, #428]	; (603c <_usb_d_dev_handle_trfail+0x1fc>)
    5e8e:	4798      	blx	r3
    5e90:	0003      	movs	r3, r0
    5e92:	001a      	movs	r2, r3
    5e94:	e009      	b.n	5eaa <_usb_d_dev_handle_trfail+0x6a>
    5e96:	231b      	movs	r3, #27
    5e98:	18fb      	adds	r3, r7, r3
    5e9a:	781a      	ldrb	r2, [r3, #0]
    5e9c:	69fb      	ldr	r3, [r7, #28]
    5e9e:	0011      	movs	r1, r2
    5ea0:	0018      	movs	r0, r3
    5ea2:	4b67      	ldr	r3, [pc, #412]	; (6040 <_usb_d_dev_handle_trfail+0x200>)
    5ea4:	4798      	blx	r3
    5ea6:	0003      	movs	r3, r0
    5ea8:	001a      	movs	r2, r3
    5eaa:	2313      	movs	r3, #19
    5eac:	18fb      	adds	r3, r7, r3
    5eae:	701a      	strb	r2, [r3, #0]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    5eb0:	687b      	ldr	r3, [r7, #4]
    5eb2:	7cdb      	ldrb	r3, [r3, #19]
    5eb4:	2207      	movs	r2, #7
    5eb6:	4013      	ands	r3, r2
    5eb8:	b2da      	uxtb	r2, r3
    5eba:	2312      	movs	r3, #18
    5ebc:	18fb      	adds	r3, r7, r3
    5ebe:	3a01      	subs	r2, #1
    5ec0:	4251      	negs	r1, r2
    5ec2:	414a      	adcs	r2, r1
    5ec4:	701a      	strb	r2, [r3, #0]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    5ec6:	1cfb      	adds	r3, r7, #3
    5ec8:	781b      	ldrb	r3, [r3, #0]
    5eca:	011b      	lsls	r3, r3, #4
    5ecc:	697a      	ldr	r2, [r7, #20]
    5ece:	18d3      	adds	r3, r2, r3
    5ed0:	7a9b      	ldrb	r3, [r3, #10]
    5ed2:	b2da      	uxtb	r2, r3
    5ed4:	230c      	movs	r3, #12
    5ed6:	18fb      	adds	r3, r7, r3
    5ed8:	701a      	strb	r2, [r3, #0]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    5eda:	2313      	movs	r3, #19
    5edc:	18fb      	adds	r3, r7, r3
    5ede:	781b      	ldrb	r3, [r3, #0]
    5ee0:	2b02      	cmp	r3, #2
    5ee2:	d133      	bne.n	5f4c <_usb_d_dev_handle_trfail+0x10c>
    5ee4:	230c      	movs	r3, #12
    5ee6:	18fb      	adds	r3, r7, r3
    5ee8:	781b      	ldrb	r3, [r3, #0]
    5eea:	2201      	movs	r2, #1
    5eec:	4013      	ands	r3, r2
    5eee:	b2db      	uxtb	r3, r3
    5ef0:	2b00      	cmp	r3, #0
    5ef2:	d02b      	beq.n	5f4c <_usb_d_dev_handle_trfail+0x10c>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    5ef4:	1cfb      	adds	r3, r7, #3
    5ef6:	781b      	ldrb	r3, [r3, #0]
    5ef8:	011b      	lsls	r3, r3, #4
    5efa:	697a      	ldr	r2, [r7, #20]
    5efc:	18d2      	adds	r2, r2, r3
    5efe:	7a93      	ldrb	r3, [r2, #10]
    5f00:	2101      	movs	r1, #1
    5f02:	438b      	bics	r3, r1
    5f04:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    5f06:	1cfb      	adds	r3, r7, #3
    5f08:	781b      	ldrb	r3, [r3, #0]
    5f0a:	2210      	movs	r2, #16
    5f0c:	18ba      	adds	r2, r7, r2
    5f0e:	5cd2      	ldrb	r2, [r2, r3]
    5f10:	231b      	movs	r3, #27
    5f12:	18fb      	adds	r3, r7, r3
    5f14:	7819      	ldrb	r1, [r3, #0]
    5f16:	69fb      	ldr	r3, [r7, #28]
    5f18:	0018      	movs	r0, r3
    5f1a:	4b4a      	ldr	r3, [pc, #296]	; (6044 <_usb_d_dev_handle_trfail+0x204>)
    5f1c:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    5f1e:	1cfb      	adds	r3, r7, #3
    5f20:	781b      	ldrb	r3, [r3, #0]
    5f22:	2210      	movs	r2, #16
    5f24:	18ba      	adds	r2, r7, r2
    5f26:	5cd2      	ldrb	r2, [r2, r3]
    5f28:	231b      	movs	r3, #27
    5f2a:	18fb      	adds	r3, r7, r3
    5f2c:	7819      	ldrb	r1, [r3, #0]
    5f2e:	69fb      	ldr	r3, [r7, #28]
    5f30:	0018      	movs	r0, r3
    5f32:	4b45      	ldr	r3, [pc, #276]	; (6048 <_usb_d_dev_handle_trfail+0x208>)
    5f34:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    5f36:	1cfb      	adds	r3, r7, #3
    5f38:	781b      	ldrb	r3, [r3, #0]
    5f3a:	1e5a      	subs	r2, r3, #1
    5f3c:	4193      	sbcs	r3, r2
    5f3e:	b2d9      	uxtb	r1, r3
    5f40:	687b      	ldr	r3, [r7, #4]
    5f42:	2204      	movs	r2, #4
    5f44:	0018      	movs	r0, r3
    5f46:	4b41      	ldr	r3, [pc, #260]	; (604c <_usb_d_dev_handle_trfail+0x20c>)
    5f48:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    5f4a:	e06d      	b.n	6028 <_usb_d_dev_handle_trfail+0x1e8>
	} else if (st.bit.ERRORFLOW) {
    5f4c:	230c      	movs	r3, #12
    5f4e:	18fb      	adds	r3, r7, r3
    5f50:	781b      	ldrb	r3, [r3, #0]
    5f52:	2202      	movs	r2, #2
    5f54:	4013      	ands	r3, r2
    5f56:	b2db      	uxtb	r3, r3
    5f58:	2b00      	cmp	r3, #0
    5f5a:	d044      	beq.n	5fe6 <_usb_d_dev_handle_trfail+0x1a6>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    5f5c:	1cfb      	adds	r3, r7, #3
    5f5e:	781b      	ldrb	r3, [r3, #0]
    5f60:	011b      	lsls	r3, r3, #4
    5f62:	697a      	ldr	r2, [r7, #20]
    5f64:	18d2      	adds	r2, r2, r3
    5f66:	7a93      	ldrb	r3, [r2, #10]
    5f68:	2102      	movs	r1, #2
    5f6a:	438b      	bics	r3, r1
    5f6c:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    5f6e:	1cfb      	adds	r3, r7, #3
    5f70:	781b      	ldrb	r3, [r3, #0]
    5f72:	2210      	movs	r2, #16
    5f74:	18ba      	adds	r2, r7, r2
    5f76:	5cd2      	ldrb	r2, [r2, r3]
    5f78:	231b      	movs	r3, #27
    5f7a:	18fb      	adds	r3, r7, r3
    5f7c:	7819      	ldrb	r1, [r3, #0]
    5f7e:	69fb      	ldr	r3, [r7, #28]
    5f80:	0018      	movs	r0, r3
    5f82:	4b30      	ldr	r3, [pc, #192]	; (6044 <_usb_d_dev_handle_trfail+0x204>)
    5f84:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    5f86:	1cfb      	adds	r3, r7, #3
    5f88:	781b      	ldrb	r3, [r3, #0]
    5f8a:	2210      	movs	r2, #16
    5f8c:	18ba      	adds	r2, r7, r2
    5f8e:	5cd2      	ldrb	r2, [r2, r3]
    5f90:	231b      	movs	r3, #27
    5f92:	18fb      	adds	r3, r7, r3
    5f94:	7819      	ldrb	r1, [r3, #0]
    5f96:	69fb      	ldr	r3, [r7, #28]
    5f98:	0018      	movs	r0, r3
    5f9a:	4b2b      	ldr	r3, [pc, #172]	; (6048 <_usb_d_dev_handle_trfail+0x208>)
    5f9c:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    5f9e:	2312      	movs	r3, #18
    5fa0:	18fb      	adds	r3, r7, r3
    5fa2:	781b      	ldrb	r3, [r3, #0]
    5fa4:	2b00      	cmp	r3, #0
    5fa6:	d03f      	beq.n	6028 <_usb_d_dev_handle_trfail+0x1e8>
    5fa8:	687b      	ldr	r3, [r7, #4]
    5faa:	7cdb      	ldrb	r3, [r3, #19]
    5fac:	2240      	movs	r2, #64	; 0x40
    5fae:	4013      	ands	r3, r2
    5fb0:	b2db      	uxtb	r3, r3
    5fb2:	2b00      	cmp	r3, #0
    5fb4:	d038      	beq.n	6028 <_usb_d_dev_handle_trfail+0x1e8>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    5fb6:	687b      	ldr	r3, [r7, #4]
    5fb8:	7cdb      	ldrb	r3, [r3, #19]
    5fba:	061b      	lsls	r3, r3, #24
    5fbc:	0fdb      	lsrs	r3, r3, #31
    5fbe:	b2db      	uxtb	r3, r3
    5fc0:	001a      	movs	r2, r3
    5fc2:	1cfb      	adds	r3, r7, #3
    5fc4:	781b      	ldrb	r3, [r3, #0]
    5fc6:	4293      	cmp	r3, r2
    5fc8:	d02e      	beq.n	6028 <_usb_d_dev_handle_trfail+0x1e8>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    5fca:	687b      	ldr	r3, [r7, #4]
    5fcc:	7cdb      	ldrb	r3, [r3, #19]
    5fce:	061b      	lsls	r3, r3, #24
    5fd0:	0fdb      	lsrs	r3, r3, #31
    5fd2:	b2db      	uxtb	r3, r3
    5fd4:	1e5a      	subs	r2, r3, #1
    5fd6:	4193      	sbcs	r3, r2
    5fd8:	b2d9      	uxtb	r1, r3
    5fda:	687b      	ldr	r3, [r7, #4]
    5fdc:	2200      	movs	r2, #0
    5fde:	0018      	movs	r0, r3
    5fe0:	4b1a      	ldr	r3, [pc, #104]	; (604c <_usb_d_dev_handle_trfail+0x20c>)
    5fe2:	4798      	blx	r3
}
    5fe4:	e020      	b.n	6028 <_usb_d_dev_handle_trfail+0x1e8>
		_usbd_ep_clear_bank_status(epn, bank_n);
    5fe6:	1cfb      	adds	r3, r7, #3
    5fe8:	781a      	ldrb	r2, [r3, #0]
    5fea:	231b      	movs	r3, #27
    5fec:	18fb      	adds	r3, r7, r3
    5fee:	781b      	ldrb	r3, [r3, #0]
    5ff0:	0011      	movs	r1, r2
    5ff2:	0018      	movs	r0, r3
    5ff4:	4b16      	ldr	r3, [pc, #88]	; (6050 <_usb_d_dev_handle_trfail+0x210>)
    5ff6:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    5ff8:	1cfb      	adds	r3, r7, #3
    5ffa:	781b      	ldrb	r3, [r3, #0]
    5ffc:	2210      	movs	r2, #16
    5ffe:	18ba      	adds	r2, r7, r2
    6000:	5cd2      	ldrb	r2, [r2, r3]
    6002:	231b      	movs	r3, #27
    6004:	18fb      	adds	r3, r7, r3
    6006:	7819      	ldrb	r1, [r3, #0]
    6008:	69fb      	ldr	r3, [r7, #28]
    600a:	0018      	movs	r0, r3
    600c:	4b0d      	ldr	r3, [pc, #52]	; (6044 <_usb_d_dev_handle_trfail+0x204>)
    600e:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    6010:	1cfb      	adds	r3, r7, #3
    6012:	781b      	ldrb	r3, [r3, #0]
    6014:	2210      	movs	r2, #16
    6016:	18ba      	adds	r2, r7, r2
    6018:	5cd2      	ldrb	r2, [r2, r3]
    601a:	231b      	movs	r3, #27
    601c:	18fb      	adds	r3, r7, r3
    601e:	7819      	ldrb	r1, [r3, #0]
    6020:	69fb      	ldr	r3, [r7, #28]
    6022:	0018      	movs	r0, r3
    6024:	4b08      	ldr	r3, [pc, #32]	; (6048 <_usb_d_dev_handle_trfail+0x208>)
    6026:	4798      	blx	r3
}
    6028:	46c0      	nop			; (mov r8, r8)
    602a:	46bd      	mov	sp, r7
    602c:	b008      	add	sp, #32
    602e:	bd80      	pop	{r7, pc}
    6030:	41005000 	.word	0x41005000
    6034:	00012294 	.word	0x00012294
    6038:	20001058 	.word	0x20001058
    603c:	0000482f 	.word	0x0000482f
    6040:	000047f1 	.word	0x000047f1
    6044:	00004697 	.word	0x00004697
    6048:	000047bb 	.word	0x000047bb
    604c:	00006e6d 	.word	0x00006e6d
    6050:	000051fd 	.word	0x000051fd

00006054 <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    6054:	b580      	push	{r7, lr}
    6056:	b082      	sub	sp, #8
    6058:	af00      	add	r7, sp, #0
    605a:	6078      	str	r0, [r7, #4]
    605c:	000a      	movs	r2, r1
    605e:	1cfb      	adds	r3, r7, #3
    6060:	701a      	strb	r2, [r3, #0]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    6062:	1cfb      	adds	r3, r7, #3
    6064:	781b      	ldrb	r3, [r3, #0]
    6066:	2210      	movs	r2, #16
    6068:	4013      	ands	r3, r2
    606a:	d004      	beq.n	6076 <_usb_d_dev_trans_setup_isr+0x22>
		_usb_d_dev_handle_setup(ept);
    606c:	687b      	ldr	r3, [r7, #4]
    606e:	0018      	movs	r0, r3
    6070:	4b0d      	ldr	r3, [pc, #52]	; (60a8 <_usb_d_dev_trans_setup_isr+0x54>)
    6072:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    6074:	e014      	b.n	60a0 <_usb_d_dev_trans_setup_isr+0x4c>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    6076:	1cfb      	adds	r3, r7, #3
    6078:	781b      	ldrb	r3, [r3, #0]
    607a:	2240      	movs	r2, #64	; 0x40
    607c:	4013      	ands	r3, r2
    607e:	d005      	beq.n	608c <_usb_d_dev_trans_setup_isr+0x38>
		_usb_d_dev_handle_stall(ept, 1);
    6080:	687b      	ldr	r3, [r7, #4]
    6082:	2101      	movs	r1, #1
    6084:	0018      	movs	r0, r3
    6086:	4b09      	ldr	r3, [pc, #36]	; (60ac <_usb_d_dev_trans_setup_isr+0x58>)
    6088:	4798      	blx	r3
}
    608a:	e009      	b.n	60a0 <_usb_d_dev_trans_setup_isr+0x4c>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    608c:	1cfb      	adds	r3, r7, #3
    608e:	781b      	ldrb	r3, [r3, #0]
    6090:	2220      	movs	r2, #32
    6092:	4013      	ands	r3, r2
    6094:	d004      	beq.n	60a0 <_usb_d_dev_trans_setup_isr+0x4c>
		_usb_d_dev_handle_stall(ept, 0);
    6096:	687b      	ldr	r3, [r7, #4]
    6098:	2100      	movs	r1, #0
    609a:	0018      	movs	r0, r3
    609c:	4b03      	ldr	r3, [pc, #12]	; (60ac <_usb_d_dev_trans_setup_isr+0x58>)
    609e:	4798      	blx	r3
}
    60a0:	46c0      	nop			; (mov r8, r8)
    60a2:	46bd      	mov	sp, r7
    60a4:	b002      	add	sp, #8
    60a6:	bd80      	pop	{r7, pc}
    60a8:	00005ced 	.word	0x00005ced
    60ac:	00005df1 	.word	0x00005df1

000060b0 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    60b0:	b580      	push	{r7, lr}
    60b2:	b082      	sub	sp, #8
    60b4:	af00      	add	r7, sp, #0
    60b6:	6078      	str	r0, [r7, #4]
    60b8:	000a      	movs	r2, r1
    60ba:	1cfb      	adds	r3, r7, #3
    60bc:	701a      	strb	r2, [r3, #0]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    60be:	1cfb      	adds	r3, r7, #3
    60c0:	781b      	ldrb	r3, [r3, #0]
    60c2:	2240      	movs	r2, #64	; 0x40
    60c4:	4013      	ands	r3, r2
    60c6:	d005      	beq.n	60d4 <_usb_d_dev_trans_in_isr+0x24>
		_usb_d_dev_handle_stall(ept, 1);
    60c8:	687b      	ldr	r3, [r7, #4]
    60ca:	2101      	movs	r1, #1
    60cc:	0018      	movs	r0, r3
    60ce:	4b1c      	ldr	r3, [pc, #112]	; (6140 <_usb_d_dev_trans_in_isr+0x90>)
    60d0:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    60d2:	e030      	b.n	6136 <_usb_d_dev_trans_in_isr+0x86>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    60d4:	1cfb      	adds	r3, r7, #3
    60d6:	781b      	ldrb	r3, [r3, #0]
    60d8:	2208      	movs	r2, #8
    60da:	4013      	ands	r3, r2
    60dc:	d005      	beq.n	60ea <_usb_d_dev_trans_in_isr+0x3a>
		_usb_d_dev_handle_trfail(ept, 1);
    60de:	687b      	ldr	r3, [r7, #4]
    60e0:	2101      	movs	r1, #1
    60e2:	0018      	movs	r0, r3
    60e4:	4b17      	ldr	r3, [pc, #92]	; (6144 <_usb_d_dev_trans_in_isr+0x94>)
    60e6:	4798      	blx	r3
}
    60e8:	e025      	b.n	6136 <_usb_d_dev_trans_in_isr+0x86>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    60ea:	1cfb      	adds	r3, r7, #3
    60ec:	781b      	ldrb	r3, [r3, #0]
    60ee:	2202      	movs	r2, #2
    60f0:	4013      	ands	r3, r2
    60f2:	d005      	beq.n	6100 <_usb_d_dev_trans_in_isr+0x50>
		_usb_d_dev_in_next(ept, true);
    60f4:	687b      	ldr	r3, [r7, #4]
    60f6:	2101      	movs	r1, #1
    60f8:	0018      	movs	r0, r3
    60fa:	4b13      	ldr	r3, [pc, #76]	; (6148 <_usb_d_dev_trans_in_isr+0x98>)
    60fc:	4798      	blx	r3
}
    60fe:	e01a      	b.n	6136 <_usb_d_dev_trans_in_isr+0x86>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    6100:	687b      	ldr	r3, [r7, #4]
    6102:	7cdb      	ldrb	r3, [r3, #19]
    6104:	2207      	movs	r2, #7
    6106:	4013      	ands	r3, r2
    6108:	b2db      	uxtb	r3, r3
    610a:	2b01      	cmp	r3, #1
    610c:	d113      	bne.n	6136 <_usb_d_dev_trans_in_isr+0x86>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    610e:	1cfb      	adds	r3, r7, #3
    6110:	781b      	ldrb	r3, [r3, #0]
    6112:	2204      	movs	r2, #4
    6114:	4013      	ands	r3, r2
    6116:	d005      	beq.n	6124 <_usb_d_dev_trans_in_isr+0x74>
			_usb_d_dev_handle_trfail(ept, 0);
    6118:	687b      	ldr	r3, [r7, #4]
    611a:	2100      	movs	r1, #0
    611c:	0018      	movs	r0, r3
    611e:	4b09      	ldr	r3, [pc, #36]	; (6144 <_usb_d_dev_trans_in_isr+0x94>)
    6120:	4798      	blx	r3
}
    6122:	e008      	b.n	6136 <_usb_d_dev_trans_in_isr+0x86>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    6124:	1cfb      	adds	r3, r7, #3
    6126:	781b      	ldrb	r3, [r3, #0]
    6128:	2210      	movs	r2, #16
    612a:	4013      	ands	r3, r2
    612c:	d003      	beq.n	6136 <_usb_d_dev_trans_in_isr+0x86>
			_usb_d_dev_handle_setup(ept);
    612e:	687b      	ldr	r3, [r7, #4]
    6130:	0018      	movs	r0, r3
    6132:	4b06      	ldr	r3, [pc, #24]	; (614c <_usb_d_dev_trans_in_isr+0x9c>)
    6134:	4798      	blx	r3
}
    6136:	46c0      	nop			; (mov r8, r8)
    6138:	46bd      	mov	sp, r7
    613a:	b002      	add	sp, #8
    613c:	bd80      	pop	{r7, pc}
    613e:	46c0      	nop			; (mov r8, r8)
    6140:	00005df1 	.word	0x00005df1
    6144:	00005e41 	.word	0x00005e41
    6148:	000056bd 	.word	0x000056bd
    614c:	00005ced 	.word	0x00005ced

00006150 <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    6150:	b580      	push	{r7, lr}
    6152:	b082      	sub	sp, #8
    6154:	af00      	add	r7, sp, #0
    6156:	6078      	str	r0, [r7, #4]
    6158:	000a      	movs	r2, r1
    615a:	1cfb      	adds	r3, r7, #3
    615c:	701a      	strb	r2, [r3, #0]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    615e:	1cfb      	adds	r3, r7, #3
    6160:	781b      	ldrb	r3, [r3, #0]
    6162:	2220      	movs	r2, #32
    6164:	4013      	ands	r3, r2
    6166:	d005      	beq.n	6174 <_usb_d_dev_trans_out_isr+0x24>
		_usb_d_dev_handle_stall(ept, 0);
    6168:	687b      	ldr	r3, [r7, #4]
    616a:	2100      	movs	r1, #0
    616c:	0018      	movs	r0, r3
    616e:	4b1c      	ldr	r3, [pc, #112]	; (61e0 <_usb_d_dev_trans_out_isr+0x90>)
    6170:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    6172:	e030      	b.n	61d6 <_usb_d_dev_trans_out_isr+0x86>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    6174:	1cfb      	adds	r3, r7, #3
    6176:	781b      	ldrb	r3, [r3, #0]
    6178:	2204      	movs	r2, #4
    617a:	4013      	ands	r3, r2
    617c:	d005      	beq.n	618a <_usb_d_dev_trans_out_isr+0x3a>
		_usb_d_dev_handle_trfail(ept, 0);
    617e:	687b      	ldr	r3, [r7, #4]
    6180:	2100      	movs	r1, #0
    6182:	0018      	movs	r0, r3
    6184:	4b17      	ldr	r3, [pc, #92]	; (61e4 <_usb_d_dev_trans_out_isr+0x94>)
    6186:	4798      	blx	r3
}
    6188:	e025      	b.n	61d6 <_usb_d_dev_trans_out_isr+0x86>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    618a:	1cfb      	adds	r3, r7, #3
    618c:	781b      	ldrb	r3, [r3, #0]
    618e:	2201      	movs	r2, #1
    6190:	4013      	ands	r3, r2
    6192:	d005      	beq.n	61a0 <_usb_d_dev_trans_out_isr+0x50>
		_usb_d_dev_out_next(ept, true);
    6194:	687b      	ldr	r3, [r7, #4]
    6196:	2101      	movs	r1, #1
    6198:	0018      	movs	r0, r3
    619a:	4b13      	ldr	r3, [pc, #76]	; (61e8 <_usb_d_dev_trans_out_isr+0x98>)
    619c:	4798      	blx	r3
}
    619e:	e01a      	b.n	61d6 <_usb_d_dev_trans_out_isr+0x86>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    61a0:	687b      	ldr	r3, [r7, #4]
    61a2:	7cdb      	ldrb	r3, [r3, #19]
    61a4:	2207      	movs	r2, #7
    61a6:	4013      	ands	r3, r2
    61a8:	b2db      	uxtb	r3, r3
    61aa:	2b01      	cmp	r3, #1
    61ac:	d113      	bne.n	61d6 <_usb_d_dev_trans_out_isr+0x86>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    61ae:	1cfb      	adds	r3, r7, #3
    61b0:	781b      	ldrb	r3, [r3, #0]
    61b2:	2208      	movs	r2, #8
    61b4:	4013      	ands	r3, r2
    61b6:	d005      	beq.n	61c4 <_usb_d_dev_trans_out_isr+0x74>
			_usb_d_dev_handle_trfail(ept, 1);
    61b8:	687b      	ldr	r3, [r7, #4]
    61ba:	2101      	movs	r1, #1
    61bc:	0018      	movs	r0, r3
    61be:	4b09      	ldr	r3, [pc, #36]	; (61e4 <_usb_d_dev_trans_out_isr+0x94>)
    61c0:	4798      	blx	r3
}
    61c2:	e008      	b.n	61d6 <_usb_d_dev_trans_out_isr+0x86>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    61c4:	1cfb      	adds	r3, r7, #3
    61c6:	781b      	ldrb	r3, [r3, #0]
    61c8:	2210      	movs	r2, #16
    61ca:	4013      	ands	r3, r2
    61cc:	d003      	beq.n	61d6 <_usb_d_dev_trans_out_isr+0x86>
			_usb_d_dev_handle_setup(ept);
    61ce:	687b      	ldr	r3, [r7, #4]
    61d0:	0018      	movs	r0, r3
    61d2:	4b06      	ldr	r3, [pc, #24]	; (61ec <_usb_d_dev_trans_out_isr+0x9c>)
    61d4:	4798      	blx	r3
}
    61d6:	46c0      	nop			; (mov r8, r8)
    61d8:	46bd      	mov	sp, r7
    61da:	b002      	add	sp, #8
    61dc:	bd80      	pop	{r7, pc}
    61de:	46c0      	nop			; (mov r8, r8)
    61e0:	00005df1 	.word	0x00005df1
    61e4:	00005e41 	.word	0x00005e41
    61e8:	0000595d 	.word	0x0000595d
    61ec:	00005ced 	.word	0x00005ced

000061f0 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    61f0:	b580      	push	{r7, lr}
    61f2:	b084      	sub	sp, #16
    61f4:	af00      	add	r7, sp, #0
    61f6:	6078      	str	r0, [r7, #4]
    61f8:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    61fa:	4b37      	ldr	r3, [pc, #220]	; (62d8 <_usb_d_dev_handle_eps+0xe8>)
    61fc:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    61fe:	683b      	ldr	r3, [r7, #0]
    6200:	7c9a      	ldrb	r2, [r3, #18]
    6202:	230b      	movs	r3, #11
    6204:	18fb      	adds	r3, r7, r3
    6206:	210f      	movs	r1, #15
    6208:	400a      	ands	r2, r1
    620a:	701a      	strb	r2, [r3, #0]

	if (!(epint & (1u << epn))) {
    620c:	230b      	movs	r3, #11
    620e:	18fb      	adds	r3, r7, r3
    6210:	781b      	ldrb	r3, [r3, #0]
    6212:	2201      	movs	r2, #1
    6214:	409a      	lsls	r2, r3
    6216:	0013      	movs	r3, r2
    6218:	687a      	ldr	r2, [r7, #4]
    621a:	4013      	ands	r3, r2
    621c:	d057      	beq.n	62ce <_usb_d_dev_handle_eps+0xde>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    621e:	230b      	movs	r3, #11
    6220:	18fb      	adds	r3, r7, r3
    6222:	781a      	ldrb	r2, [r3, #0]
    6224:	230a      	movs	r3, #10
    6226:	18fb      	adds	r3, r7, r3
    6228:	68f9      	ldr	r1, [r7, #12]
    622a:	3208      	adds	r2, #8
    622c:	0152      	lsls	r2, r2, #5
    622e:	188a      	adds	r2, r1, r2
    6230:	3207      	adds	r2, #7
    6232:	7812      	ldrb	r2, [r2, #0]
    6234:	701a      	strb	r2, [r3, #0]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    6236:	230b      	movs	r3, #11
    6238:	18fb      	adds	r3, r7, r3
    623a:	7819      	ldrb	r1, [r3, #0]
    623c:	2309      	movs	r3, #9
    623e:	18fb      	adds	r3, r7, r3
    6240:	68f8      	ldr	r0, [r7, #12]
    6242:	220a      	movs	r2, #10
    6244:	32ff      	adds	r2, #255	; 0xff
    6246:	0149      	lsls	r1, r1, #5
    6248:	1841      	adds	r1, r0, r1
    624a:	188a      	adds	r2, r1, r2
    624c:	7812      	ldrb	r2, [r2, #0]
    624e:	701a      	strb	r2, [r3, #0]
	flags &= mask;
    6250:	230a      	movs	r3, #10
    6252:	18fb      	adds	r3, r7, r3
    6254:	220a      	movs	r2, #10
    6256:	18ba      	adds	r2, r7, r2
    6258:	2109      	movs	r1, #9
    625a:	1879      	adds	r1, r7, r1
    625c:	7812      	ldrb	r2, [r2, #0]
    625e:	7809      	ldrb	r1, [r1, #0]
    6260:	400a      	ands	r2, r1
    6262:	701a      	strb	r2, [r3, #0]
	if (flags) {
    6264:	230a      	movs	r3, #10
    6266:	18fb      	adds	r3, r7, r3
    6268:	781b      	ldrb	r3, [r3, #0]
    626a:	2b00      	cmp	r3, #0
    626c:	d030      	beq.n	62d0 <_usb_d_dev_handle_eps+0xe0>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    626e:	683b      	ldr	r3, [r7, #0]
    6270:	7cdb      	ldrb	r3, [r3, #19]
    6272:	2207      	movs	r2, #7
    6274:	4013      	ands	r3, r2
    6276:	b2db      	uxtb	r3, r3
    6278:	2b01      	cmp	r3, #1
    627a:	d10f      	bne.n	629c <_usb_d_dev_handle_eps+0xac>
    627c:	683b      	ldr	r3, [r7, #0]
    627e:	7cdb      	ldrb	r3, [r3, #19]
    6280:	2240      	movs	r2, #64	; 0x40
    6282:	4013      	ands	r3, r2
    6284:	b2db      	uxtb	r3, r3
    6286:	2b00      	cmp	r3, #0
    6288:	d108      	bne.n	629c <_usb_d_dev_handle_eps+0xac>
			_usb_d_dev_trans_setup_isr(ept, flags);
    628a:	230a      	movs	r3, #10
    628c:	18fb      	adds	r3, r7, r3
    628e:	781a      	ldrb	r2, [r3, #0]
    6290:	683b      	ldr	r3, [r7, #0]
    6292:	0011      	movs	r1, r2
    6294:	0018      	movs	r0, r3
    6296:	4b11      	ldr	r3, [pc, #68]	; (62dc <_usb_d_dev_handle_eps+0xec>)
    6298:	4798      	blx	r3
    629a:	e019      	b.n	62d0 <_usb_d_dev_handle_eps+0xe0>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    629c:	683b      	ldr	r3, [r7, #0]
    629e:	7cdb      	ldrb	r3, [r3, #19]
    62a0:	227f      	movs	r2, #127	; 0x7f
    62a2:	4393      	bics	r3, r2
    62a4:	b2db      	uxtb	r3, r3
    62a6:	2b00      	cmp	r3, #0
    62a8:	d008      	beq.n	62bc <_usb_d_dev_handle_eps+0xcc>
			_usb_d_dev_trans_in_isr(ept, flags);
    62aa:	230a      	movs	r3, #10
    62ac:	18fb      	adds	r3, r7, r3
    62ae:	781a      	ldrb	r2, [r3, #0]
    62b0:	683b      	ldr	r3, [r7, #0]
    62b2:	0011      	movs	r1, r2
    62b4:	0018      	movs	r0, r3
    62b6:	4b0a      	ldr	r3, [pc, #40]	; (62e0 <_usb_d_dev_handle_eps+0xf0>)
    62b8:	4798      	blx	r3
    62ba:	e009      	b.n	62d0 <_usb_d_dev_handle_eps+0xe0>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    62bc:	230a      	movs	r3, #10
    62be:	18fb      	adds	r3, r7, r3
    62c0:	781a      	ldrb	r2, [r3, #0]
    62c2:	683b      	ldr	r3, [r7, #0]
    62c4:	0011      	movs	r1, r2
    62c6:	0018      	movs	r0, r3
    62c8:	4b06      	ldr	r3, [pc, #24]	; (62e4 <_usb_d_dev_handle_eps+0xf4>)
    62ca:	4798      	blx	r3
    62cc:	e000      	b.n	62d0 <_usb_d_dev_handle_eps+0xe0>
		return;
    62ce:	46c0      	nop			; (mov r8, r8)
		}
	}
}
    62d0:	46bd      	mov	sp, r7
    62d2:	b004      	add	sp, #16
    62d4:	bd80      	pop	{r7, pc}
    62d6:	46c0      	nop			; (mov r8, r8)
    62d8:	41005000 	.word	0x41005000
    62dc:	00006055 	.word	0x00006055
    62e0:	000060b1 	.word	0x000060b1
    62e4:	00006151 	.word	0x00006151

000062e8 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    62e8:	b580      	push	{r7, lr}
    62ea:	b084      	sub	sp, #16
    62ec:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    62ee:	4b1f      	ldr	r3, [pc, #124]	; (636c <_usb_d_dev_handler+0x84>)
    62f0:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    62f2:	1dbb      	adds	r3, r7, #6
    62f4:	68ba      	ldr	r2, [r7, #8]
    62f6:	8c12      	ldrh	r2, [r2, #32]
    62f8:	801a      	strh	r2, [r3, #0]
	if (0 == epint) {
    62fa:	1dbb      	adds	r3, r7, #6
    62fc:	881b      	ldrh	r3, [r3, #0]
    62fe:	2b00      	cmp	r3, #0
    6300:	d103      	bne.n	630a <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    6302:	4b1b      	ldr	r3, [pc, #108]	; (6370 <_usb_d_dev_handler+0x88>)
    6304:	4798      	blx	r3
    6306:	1e03      	subs	r3, r0, #0
    6308:	d12b      	bne.n	6362 <_usb_d_dev_handler+0x7a>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    630a:	230f      	movs	r3, #15
    630c:	18fb      	adds	r3, r7, r3
    630e:	2200      	movs	r2, #0
    6310:	701a      	strb	r2, [r3, #0]
    6312:	e020      	b.n	6356 <_usb_d_dev_handler+0x6e>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    6314:	230f      	movs	r3, #15
    6316:	18fb      	adds	r3, r7, r3
    6318:	781a      	ldrb	r2, [r3, #0]
    631a:	0013      	movs	r3, r2
    631c:	009b      	lsls	r3, r3, #2
    631e:	189b      	adds	r3, r3, r2
    6320:	009b      	lsls	r3, r3, #2
    6322:	3310      	adds	r3, #16
    6324:	001a      	movs	r2, r3
    6326:	4b13      	ldr	r3, [pc, #76]	; (6374 <_usb_d_dev_handler+0x8c>)
    6328:	18d3      	adds	r3, r2, r3
    632a:	3304      	adds	r3, #4
    632c:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    632e:	683b      	ldr	r3, [r7, #0]
    6330:	7c9b      	ldrb	r3, [r3, #18]
    6332:	2bff      	cmp	r3, #255	; 0xff
    6334:	d007      	beq.n	6346 <_usb_d_dev_handler+0x5e>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    6336:	1dbb      	adds	r3, r7, #6
    6338:	881b      	ldrh	r3, [r3, #0]
    633a:	683a      	ldr	r2, [r7, #0]
    633c:	0011      	movs	r1, r2
    633e:	0018      	movs	r0, r3
    6340:	4b0d      	ldr	r3, [pc, #52]	; (6378 <_usb_d_dev_handler+0x90>)
    6342:	4798      	blx	r3
    6344:	e000      	b.n	6348 <_usb_d_dev_handler+0x60>
			continue;
    6346:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < USB_D_N_EP; i++) {
    6348:	230f      	movs	r3, #15
    634a:	18fb      	adds	r3, r7, r3
    634c:	781a      	ldrb	r2, [r3, #0]
    634e:	230f      	movs	r3, #15
    6350:	18fb      	adds	r3, r7, r3
    6352:	3201      	adds	r2, #1
    6354:	701a      	strb	r2, [r3, #0]
    6356:	230f      	movs	r3, #15
    6358:	18fb      	adds	r3, r7, r3
    635a:	781b      	ldrb	r3, [r3, #0]
    635c:	2b10      	cmp	r3, #16
    635e:	d9d9      	bls.n	6314 <_usb_d_dev_handler+0x2c>
    6360:	e000      	b.n	6364 <_usb_d_dev_handler+0x7c>
			return;
    6362:	46c0      	nop			; (mov r8, r8)
	}
}
    6364:	46bd      	mov	sp, r7
    6366:	b004      	add	sp, #16
    6368:	bd80      	pop	{r7, pc}
    636a:	46c0      	nop			; (mov r8, r8)
    636c:	41005000 	.word	0x41005000
    6370:	000055f1 	.word	0x000055f1
    6374:	20000ef0 	.word	0x20000ef0
    6378:	000061f1 	.word	0x000061f1

0000637c <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    637c:	b580      	push	{r7, lr}
    637e:	b082      	sub	sp, #8
    6380:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    6382:	1dfb      	adds	r3, r7, #7
    6384:	2200      	movs	r2, #0
    6386:	701a      	strb	r2, [r3, #0]
    6388:	e02b      	b.n	63e2 <_usb_d_dev_reset_epts+0x66>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    638a:	1dfb      	adds	r3, r7, #7
    638c:	781a      	ldrb	r2, [r3, #0]
    638e:	0013      	movs	r3, r2
    6390:	009b      	lsls	r3, r3, #2
    6392:	189b      	adds	r3, r3, r2
    6394:	009b      	lsls	r3, r3, #2
    6396:	3310      	adds	r3, #16
    6398:	001a      	movs	r2, r3
    639a:	4b19      	ldr	r3, [pc, #100]	; (6400 <_usb_d_dev_reset_epts+0x84>)
    639c:	18d3      	adds	r3, r2, r3
    639e:	3304      	adds	r3, #4
    63a0:	2103      	movs	r1, #3
    63a2:	0018      	movs	r0, r3
    63a4:	4b17      	ldr	r3, [pc, #92]	; (6404 <_usb_d_dev_reset_epts+0x88>)
    63a6:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    63a8:	1dfb      	adds	r3, r7, #7
    63aa:	781a      	ldrb	r2, [r3, #0]
    63ac:	4914      	ldr	r1, [pc, #80]	; (6400 <_usb_d_dev_reset_epts+0x84>)
    63ae:	2026      	movs	r0, #38	; 0x26
    63b0:	0013      	movs	r3, r2
    63b2:	009b      	lsls	r3, r3, #2
    63b4:	189b      	adds	r3, r3, r2
    63b6:	009b      	lsls	r3, r3, #2
    63b8:	18cb      	adds	r3, r1, r3
    63ba:	181b      	adds	r3, r3, r0
    63bc:	22ff      	movs	r2, #255	; 0xff
    63be:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    63c0:	1dfb      	adds	r3, r7, #7
    63c2:	781a      	ldrb	r2, [r3, #0]
    63c4:	490e      	ldr	r1, [pc, #56]	; (6400 <_usb_d_dev_reset_epts+0x84>)
    63c6:	2027      	movs	r0, #39	; 0x27
    63c8:	0013      	movs	r3, r2
    63ca:	009b      	lsls	r3, r3, #2
    63cc:	189b      	adds	r3, r3, r2
    63ce:	009b      	lsls	r3, r3, #2
    63d0:	18cb      	adds	r3, r1, r3
    63d2:	181b      	adds	r3, r3, r0
    63d4:	2200      	movs	r2, #0
    63d6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    63d8:	1dfb      	adds	r3, r7, #7
    63da:	781a      	ldrb	r2, [r3, #0]
    63dc:	1dfb      	adds	r3, r7, #7
    63de:	3201      	adds	r2, #1
    63e0:	701a      	strb	r2, [r3, #0]
    63e2:	1dfb      	adds	r3, r7, #7
    63e4:	781b      	ldrb	r3, [r3, #0]
    63e6:	2b10      	cmp	r3, #16
    63e8:	d9cf      	bls.n	638a <_usb_d_dev_reset_epts+0xe>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    63ea:	2380      	movs	r3, #128	; 0x80
    63ec:	005a      	lsls	r2, r3, #1
    63ee:	4b06      	ldr	r3, [pc, #24]	; (6408 <_usb_d_dev_reset_epts+0x8c>)
    63f0:	2100      	movs	r1, #0
    63f2:	0018      	movs	r0, r3
    63f4:	4b05      	ldr	r3, [pc, #20]	; (640c <_usb_d_dev_reset_epts+0x90>)
    63f6:	4798      	blx	r3
}
    63f8:	46c0      	nop			; (mov r8, r8)
    63fa:	46bd      	mov	sp, r7
    63fc:	b002      	add	sp, #8
    63fe:	bd80      	pop	{r7, pc}
    6400:	20000ef0 	.word	0x20000ef0
    6404:	00006e21 	.word	0x00006e21
    6408:	20001058 	.word	0x20001058
    640c:	0000d191 	.word	0x0000d191

00006410 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    6410:	b580      	push	{r7, lr}
    6412:	b084      	sub	sp, #16
    6414:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    6416:	4b34      	ldr	r3, [pc, #208]	; (64e8 <_usb_d_dev_init+0xd8>)
    6418:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    641a:	230b      	movs	r3, #11
    641c:	18fb      	adds	r3, r7, r3
    641e:	2201      	movs	r2, #1
    6420:	701a      	strb	r2, [r3, #0]
	const uint8_t spdconf[4] = {
    6422:	1d3b      	adds	r3, r7, #4
    6424:	2204      	movs	r2, #4
    6426:	701a      	strb	r2, [r3, #0]
    6428:	1d3b      	adds	r3, r7, #4
    642a:	2200      	movs	r2, #0
    642c:	705a      	strb	r2, [r3, #1]
    642e:	1d3b      	adds	r3, r7, #4
    6430:	2200      	movs	r2, #0
    6432:	709a      	strb	r2, [r3, #2]
    6434:	1d3b      	adds	r3, r7, #4
    6436:	2200      	movs	r2, #0
    6438:	70da      	strb	r2, [r3, #3]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    643a:	68fb      	ldr	r3, [r7, #12]
    643c:	2101      	movs	r1, #1
    643e:	0018      	movs	r0, r3
    6440:	4b2a      	ldr	r3, [pc, #168]	; (64ec <_usb_d_dev_init+0xdc>)
    6442:	4798      	blx	r3
    6444:	0003      	movs	r3, r0
    6446:	001a      	movs	r2, r3
    6448:	2301      	movs	r3, #1
    644a:	4053      	eors	r3, r2
    644c:	b2db      	uxtb	r3, r3
    644e:	2b00      	cmp	r3, #0
    6450:	d014      	beq.n	647c <_usb_d_dev_init+0x6c>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    6452:	68fb      	ldr	r3, [r7, #12]
    6454:	2102      	movs	r1, #2
    6456:	0018      	movs	r0, r3
    6458:	4b25      	ldr	r3, [pc, #148]	; (64f0 <_usb_d_dev_init+0xe0>)
    645a:	4798      	blx	r3
    645c:	1e03      	subs	r3, r0, #0
    645e:	d008      	beq.n	6472 <_usb_d_dev_init+0x62>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    6460:	68fb      	ldr	r3, [r7, #12]
    6462:	0018      	movs	r0, r3
    6464:	4b23      	ldr	r3, [pc, #140]	; (64f4 <_usb_d_dev_init+0xe4>)
    6466:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    6468:	68fb      	ldr	r3, [r7, #12]
    646a:	2102      	movs	r1, #2
    646c:	0018      	movs	r0, r3
    646e:	4b22      	ldr	r3, [pc, #136]	; (64f8 <_usb_d_dev_init+0xe8>)
    6470:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    6472:	68fb      	ldr	r3, [r7, #12]
    6474:	2101      	movs	r1, #1
    6476:	0018      	movs	r0, r3
    6478:	4b20      	ldr	r3, [pc, #128]	; (64fc <_usb_d_dev_init+0xec>)
    647a:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    647c:	68fb      	ldr	r3, [r7, #12]
    647e:	2101      	movs	r1, #1
    6480:	0018      	movs	r0, r3
    6482:	4b1d      	ldr	r3, [pc, #116]	; (64f8 <_usb_d_dev_init+0xe8>)
    6484:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    6486:	4b1e      	ldr	r3, [pc, #120]	; (6500 <_usb_d_dev_init+0xf0>)
    6488:	4a1e      	ldr	r2, [pc, #120]	; (6504 <_usb_d_dev_init+0xf4>)
    648a:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    648c:	4b1c      	ldr	r3, [pc, #112]	; (6500 <_usb_d_dev_init+0xf0>)
    648e:	4a1d      	ldr	r2, [pc, #116]	; (6504 <_usb_d_dev_init+0xf4>)
    6490:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    6492:	4b1b      	ldr	r3, [pc, #108]	; (6500 <_usb_d_dev_init+0xf0>)
    6494:	4a1b      	ldr	r2, [pc, #108]	; (6504 <_usb_d_dev_init+0xf4>)
    6496:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    6498:	4b19      	ldr	r3, [pc, #100]	; (6500 <_usb_d_dev_init+0xf0>)
    649a:	4a1a      	ldr	r2, [pc, #104]	; (6504 <_usb_d_dev_init+0xf4>)
    649c:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    649e:	4b18      	ldr	r3, [pc, #96]	; (6500 <_usb_d_dev_init+0xf0>)
    64a0:	4a18      	ldr	r2, [pc, #96]	; (6504 <_usb_d_dev_init+0xf4>)
    64a2:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    64a4:	4b18      	ldr	r3, [pc, #96]	; (6508 <_usb_d_dev_init+0xf8>)
    64a6:	4798      	blx	r3

	_usb_load_calib();
    64a8:	4b18      	ldr	r3, [pc, #96]	; (650c <_usb_d_dev_init+0xfc>)
    64aa:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    64ac:	68fb      	ldr	r3, [r7, #12]
    64ae:	2104      	movs	r1, #4
    64b0:	0018      	movs	r0, r3
    64b2:	4b12      	ldr	r3, [pc, #72]	; (64fc <_usb_d_dev_init+0xec>)
    64b4:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    64b6:	4a16      	ldr	r2, [pc, #88]	; (6510 <_usb_d_dev_init+0x100>)
    64b8:	68fb      	ldr	r3, [r7, #12]
    64ba:	0011      	movs	r1, r2
    64bc:	0018      	movs	r0, r3
    64be:	4b15      	ldr	r3, [pc, #84]	; (6514 <_usb_d_dev_init+0x104>)
    64c0:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    64c2:	230b      	movs	r3, #11
    64c4:	18fb      	adds	r3, r7, r3
    64c6:	781b      	ldrb	r3, [r3, #0]
    64c8:	1d3a      	adds	r2, r7, #4
    64ca:	5cd3      	ldrb	r3, [r2, r3]
    64cc:	2201      	movs	r2, #1
    64ce:	4313      	orrs	r3, r2
    64d0:	b2db      	uxtb	r3, r3
    64d2:	b29a      	uxth	r2, r3
    64d4:	68fb      	ldr	r3, [r7, #12]
    64d6:	0011      	movs	r1, r2
    64d8:	0018      	movs	r0, r3
    64da:	4b0f      	ldr	r3, [pc, #60]	; (6518 <_usb_d_dev_init+0x108>)
    64dc:	4798      	blx	r3

	return ERR_NONE;
    64de:	2300      	movs	r3, #0
}
    64e0:	0018      	movs	r0, r3
    64e2:	46bd      	mov	sp, r7
    64e4:	b004      	add	sp, #16
    64e6:	bd80      	pop	{r7, pc}
    64e8:	41005000 	.word	0x41005000
    64ec:	000045f7 	.word	0x000045f7
    64f0:	000049b5 	.word	0x000049b5
    64f4:	00004985 	.word	0x00004985
    64f8:	000045cd 	.word	0x000045cd
    64fc:	000049fd 	.word	0x000049fd
    6500:	20000ef0 	.word	0x20000ef0
    6504:	00004ac1 	.word	0x00004ac1
    6508:	0000637d 	.word	0x0000637d
    650c:	00004ad5 	.word	0x00004ad5
    6510:	20001058 	.word	0x20001058
    6514:	00004aa9 	.word	0x00004aa9
    6518:	00004a6d 	.word	0x00004a6d

0000651c <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_IRQn);
	NVIC_ClearPendingIRQ(USB_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    651c:	b590      	push	{r4, r7, lr}
    651e:	b083      	sub	sp, #12
    6520:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    6522:	4b18      	ldr	r3, [pc, #96]	; (6584 <_usb_d_dev_enable+0x68>)
    6524:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    6526:	687b      	ldr	r3, [r7, #4]
    6528:	2103      	movs	r1, #3
    652a:	0018      	movs	r0, r3
    652c:	4b16      	ldr	r3, [pc, #88]	; (6588 <_usb_d_dev_enable+0x6c>)
    652e:	4798      	blx	r3
    6530:	1e03      	subs	r3, r0, #0
    6532:	d002      	beq.n	653a <_usb_d_dev_enable+0x1e>
		return -USB_ERR_DENIED;
    6534:	2311      	movs	r3, #17
    6536:	425b      	negs	r3, r3
    6538:	e01f      	b.n	657a <_usb_d_dev_enable+0x5e>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    653a:	1cfc      	adds	r4, r7, #3
    653c:	687b      	ldr	r3, [r7, #4]
    653e:	0018      	movs	r0, r3
    6540:	4b12      	ldr	r3, [pc, #72]	; (658c <_usb_d_dev_enable+0x70>)
    6542:	4798      	blx	r3
    6544:	0003      	movs	r3, r0
    6546:	7023      	strb	r3, [r4, #0]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    6548:	1cfb      	adds	r3, r7, #3
    654a:	781b      	ldrb	r3, [r3, #0]
    654c:	2202      	movs	r2, #2
    654e:	4013      	ands	r3, r2
    6550:	d109      	bne.n	6566 <_usb_d_dev_enable+0x4a>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    6552:	1cfb      	adds	r3, r7, #3
    6554:	781b      	ldrb	r3, [r3, #0]
    6556:	2202      	movs	r2, #2
    6558:	4313      	orrs	r3, r2
    655a:	b2da      	uxtb	r2, r3
    655c:	687b      	ldr	r3, [r7, #4]
    655e:	0011      	movs	r1, r2
    6560:	0018      	movs	r0, r3
    6562:	4b0b      	ldr	r3, [pc, #44]	; (6590 <_usb_d_dev_enable+0x74>)
    6564:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_IRQn);
    6566:	2007      	movs	r0, #7
    6568:	4b0a      	ldr	r3, [pc, #40]	; (6594 <_usb_d_dev_enable+0x78>)
    656a:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    656c:	4a0a      	ldr	r2, [pc, #40]	; (6598 <_usb_d_dev_enable+0x7c>)
    656e:	687b      	ldr	r3, [r7, #4]
    6570:	0011      	movs	r1, r2
    6572:	0018      	movs	r0, r3
    6574:	4b09      	ldr	r3, [pc, #36]	; (659c <_usb_d_dev_enable+0x80>)
    6576:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    6578:	2300      	movs	r3, #0
}
    657a:	0018      	movs	r0, r3
    657c:	46bd      	mov	sp, r7
    657e:	b003      	add	sp, #12
    6580:	bd90      	pop	{r4, r7, pc}
    6582:	46c0      	nop			; (mov r8, r8)
    6584:	41005000 	.word	0x41005000
    6588:	0000494b 	.word	0x0000494b
    658c:	00004a29 	.word	0x00004a29
    6590:	000049fd 	.word	0x000049fd
    6594:	0000453d 	.word	0x0000453d
    6598:	0000028d 	.word	0x0000028d
    659c:	000048f9 	.word	0x000048f9

000065a0 <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    65a0:	b580      	push	{r7, lr}
    65a2:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    65a4:	4b03      	ldr	r3, [pc, #12]	; (65b4 <_usb_d_dev_attach+0x14>)
    65a6:	0018      	movs	r0, r3
    65a8:	4b03      	ldr	r3, [pc, #12]	; (65b8 <_usb_d_dev_attach+0x18>)
    65aa:	4798      	blx	r3
}
    65ac:	46c0      	nop			; (mov r8, r8)
    65ae:	46bd      	mov	sp, r7
    65b0:	bd80      	pop	{r7, pc}
    65b2:	46c0      	nop			; (mov r8, r8)
    65b4:	41005000 	.word	0x41005000
    65b8:	00004a4d 	.word	0x00004a4d

000065bc <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    65bc:	b580      	push	{r7, lr}
    65be:	b082      	sub	sp, #8
    65c0:	af00      	add	r7, sp, #0
    65c2:	0002      	movs	r2, r0
    65c4:	1dfb      	adds	r3, r7, #7
    65c6:	701a      	strb	r2, [r3, #0]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    65c8:	1dfb      	adds	r3, r7, #7
    65ca:	781b      	ldrb	r3, [r3, #0]
    65cc:	2280      	movs	r2, #128	; 0x80
    65ce:	4252      	negs	r2, r2
    65d0:	4313      	orrs	r3, r2
    65d2:	b2db      	uxtb	r3, r3
    65d4:	4a04      	ldr	r2, [pc, #16]	; (65e8 <_usb_d_dev_set_address+0x2c>)
    65d6:	0019      	movs	r1, r3
    65d8:	0010      	movs	r0, r2
    65da:	4b04      	ldr	r3, [pc, #16]	; (65ec <_usb_d_dev_set_address+0x30>)
    65dc:	4798      	blx	r3
}
    65de:	46c0      	nop			; (mov r8, r8)
    65e0:	46bd      	mov	sp, r7
    65e2:	b002      	add	sp, #8
    65e4:	bd80      	pop	{r7, pc}
    65e6:	46c0      	nop			; (mov r8, r8)
    65e8:	41005000 	.word	0x41005000
    65ec:	00004a8b 	.word	0x00004a8b

000065f0 <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    65f0:	b590      	push	{r4, r7, lr}
    65f2:	b085      	sub	sp, #20
    65f4:	af00      	add	r7, sp, #0
    65f6:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    65f8:	4b1c      	ldr	r3, [pc, #112]	; (666c <_usb_d_dev_trans_setup+0x7c>)
    65fa:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    65fc:	687b      	ldr	r3, [r7, #4]
    65fe:	7c9a      	ldrb	r2, [r3, #18]
    6600:	230b      	movs	r3, #11
    6602:	18fb      	adds	r3, r7, r3
    6604:	210f      	movs	r1, #15
    6606:	400a      	ands	r2, r1
    6608:	701a      	strb	r2, [r3, #0]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    660a:	687b      	ldr	r3, [r7, #4]
    660c:	68db      	ldr	r3, [r3, #12]
    660e:	001a      	movs	r2, r3
    6610:	230b      	movs	r3, #11
    6612:	18fb      	adds	r3, r7, r3
    6614:	781b      	ldrb	r3, [r3, #0]
    6616:	2100      	movs	r1, #0
    6618:	0018      	movs	r0, r3
    661a:	4b15      	ldr	r3, [pc, #84]	; (6670 <_usb_d_dev_trans_setup+0x80>)
    661c:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    661e:	687b      	ldr	r3, [r7, #4]
    6620:	8a1b      	ldrh	r3, [r3, #16]
    6622:	001a      	movs	r2, r3
    6624:	230b      	movs	r3, #11
    6626:	18fb      	adds	r3, r7, r3
    6628:	7818      	ldrb	r0, [r3, #0]
    662a:	2300      	movs	r3, #0
    662c:	2100      	movs	r1, #0
    662e:	4c11      	ldr	r4, [pc, #68]	; (6674 <_usb_d_dev_trans_setup+0x84>)
    6630:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    6632:	230b      	movs	r3, #11
    6634:	18fb      	adds	r3, r7, r3
    6636:	7819      	ldrb	r1, [r3, #0]
    6638:	68fb      	ldr	r3, [r7, #12]
    663a:	22b0      	movs	r2, #176	; 0xb0
    663c:	0018      	movs	r0, r3
    663e:	4b0e      	ldr	r3, [pc, #56]	; (6678 <_usb_d_dev_trans_setup+0x88>)
    6640:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    6642:	230b      	movs	r3, #11
    6644:	18fb      	adds	r3, r7, r3
    6646:	781b      	ldrb	r3, [r3, #0]
    6648:	2200      	movs	r2, #0
    664a:	2100      	movs	r1, #0
    664c:	0018      	movs	r0, r3
    664e:	4b0b      	ldr	r3, [pc, #44]	; (667c <_usb_d_dev_trans_setup+0x8c>)
    6650:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    6652:	230b      	movs	r3, #11
    6654:	18fb      	adds	r3, r7, r3
    6656:	7819      	ldrb	r1, [r3, #0]
    6658:	68fb      	ldr	r3, [r7, #12]
    665a:	2210      	movs	r2, #16
    665c:	0018      	movs	r0, r3
    665e:	4b08      	ldr	r3, [pc, #32]	; (6680 <_usb_d_dev_trans_setup+0x90>)
    6660:	4798      	blx	r3
}
    6662:	46c0      	nop			; (mov r8, r8)
    6664:	46bd      	mov	sp, r7
    6666:	b005      	add	sp, #20
    6668:	bd90      	pop	{r4, r7, pc}
    666a:	46c0      	nop			; (mov r8, r8)
    666c:	41005000 	.word	0x41005000
    6670:	00004fa1 	.word	0x00004fa1
    6674:	000051a5 	.word	0x000051a5
    6678:	00004727 	.word	0x00004727
    667c:	000052a1 	.word	0x000052a1
    6680:	00004785 	.word	0x00004785

00006684 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    6684:	b590      	push	{r4, r7, lr}
    6686:	b089      	sub	sp, #36	; 0x24
    6688:	af00      	add	r7, sp, #0
    668a:	0004      	movs	r4, r0
    668c:	0008      	movs	r0, r1
    668e:	0011      	movs	r1, r2
    6690:	1dfb      	adds	r3, r7, #7
    6692:	1c22      	adds	r2, r4, #0
    6694:	701a      	strb	r2, [r3, #0]
    6696:	1dbb      	adds	r3, r7, #6
    6698:	1c02      	adds	r2, r0, #0
    669a:	701a      	strb	r2, [r3, #0]
    669c:	1d3b      	adds	r3, r7, #4
    669e:	1c0a      	adds	r2, r1, #0
    66a0:	801a      	strh	r2, [r3, #0]
	uint8_t               epn = USB_EP_GET_N(ep);
    66a2:	231f      	movs	r3, #31
    66a4:	18fb      	adds	r3, r7, r3
    66a6:	1dfa      	adds	r2, r7, #7
    66a8:	7812      	ldrb	r2, [r2, #0]
    66aa:	210f      	movs	r1, #15
    66ac:	400a      	ands	r2, r1
    66ae:	701a      	strb	r2, [r3, #0]
	bool                  dir = USB_EP_GET_DIR(ep);
    66b0:	1dfb      	adds	r3, r7, #7
    66b2:	781b      	ldrb	r3, [r3, #0]
    66b4:	2280      	movs	r2, #128	; 0x80
    66b6:	401a      	ands	r2, r3
    66b8:	231e      	movs	r3, #30
    66ba:	18fb      	adds	r3, r7, r3
    66bc:	1e51      	subs	r1, r2, #1
    66be:	418a      	sbcs	r2, r1
    66c0:	701a      	strb	r2, [r3, #0]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    66c2:	231e      	movs	r3, #30
    66c4:	18fb      	adds	r3, r7, r3
    66c6:	781a      	ldrb	r2, [r3, #0]
    66c8:	231f      	movs	r3, #31
    66ca:	18fb      	adds	r3, r7, r3
    66cc:	781b      	ldrb	r3, [r3, #0]
    66ce:	0011      	movs	r1, r2
    66d0:	0018      	movs	r0, r3
    66d2:	4b49      	ldr	r3, [pc, #292]	; (67f8 <_usb_d_dev_ep_init+0x174>)
    66d4:	4798      	blx	r3
    66d6:	0003      	movs	r3, r0
    66d8:	61bb      	str	r3, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    66da:	2317      	movs	r3, #23
    66dc:	18fb      	adds	r3, r7, r3
    66de:	1dba      	adds	r2, r7, #6
    66e0:	7812      	ldrb	r2, [r2, #0]
    66e2:	2103      	movs	r1, #3
    66e4:	400a      	ands	r2, r1
    66e6:	701a      	strb	r2, [r3, #0]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    66e8:	231f      	movs	r3, #31
    66ea:	18fb      	adds	r3, r7, r3
    66ec:	781a      	ldrb	r2, [r3, #0]
    66ee:	0013      	movs	r3, r2
    66f0:	005b      	lsls	r3, r3, #1
    66f2:	189b      	adds	r3, r3, r2
    66f4:	009b      	lsls	r3, r3, #2
    66f6:	4a41      	ldr	r2, [pc, #260]	; (67fc <_usb_d_dev_ep_init+0x178>)
    66f8:	189b      	adds	r3, r3, r2
    66fa:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    66fc:	231f      	movs	r3, #31
    66fe:	18fb      	adds	r3, r7, r3
    6700:	781b      	ldrb	r3, [r3, #0]
    6702:	2b07      	cmp	r3, #7
    6704:	d902      	bls.n	670c <_usb_d_dev_ep_init+0x88>
		return -USB_ERR_PARAM;
    6706:	2312      	movs	r3, #18
    6708:	425b      	negs	r3, r3
    670a:	e070      	b.n	67ee <_usb_d_dev_ep_init+0x16a>
	}
	if (ept->ep != 0xFF) {
    670c:	69bb      	ldr	r3, [r7, #24]
    670e:	7c9b      	ldrb	r3, [r3, #18]
    6710:	2bff      	cmp	r3, #255	; 0xff
    6712:	d002      	beq.n	671a <_usb_d_dev_ep_init+0x96>
		return -USB_ERR_REDO;
    6714:	2314      	movs	r3, #20
    6716:	425b      	negs	r3, r3
    6718:	e069      	b.n	67ee <_usb_d_dev_ep_init+0x16a>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    671a:	2317      	movs	r3, #23
    671c:	18fb      	adds	r3, r7, r3
    671e:	781b      	ldrb	r3, [r3, #0]
    6720:	2b00      	cmp	r3, #0
    6722:	d123      	bne.n	676c <_usb_d_dev_ep_init+0xe8>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    6724:	231e      	movs	r3, #30
    6726:	18fb      	adds	r3, r7, r3
    6728:	781b      	ldrb	r3, [r3, #0]
    672a:	1e5a      	subs	r2, r3, #1
    672c:	4193      	sbcs	r3, r2
    672e:	b2db      	uxtb	r3, r3
    6730:	2201      	movs	r2, #1
    6732:	4053      	eors	r3, r2
    6734:	b2db      	uxtb	r3, r3
    6736:	1c1a      	adds	r2, r3, #0
    6738:	2301      	movs	r3, #1
    673a:	4013      	ands	r3, r2
    673c:	b2da      	uxtb	r2, r3
    673e:	231f      	movs	r3, #31
    6740:	18fb      	adds	r3, r7, r3
    6742:	781b      	ldrb	r3, [r3, #0]
    6744:	0011      	movs	r1, r2
    6746:	0018      	movs	r0, r3
    6748:	4b2b      	ldr	r3, [pc, #172]	; (67f8 <_usb_d_dev_ep_init+0x174>)
    674a:	4798      	blx	r3
    674c:	0003      	movs	r3, r0
    674e:	60fb      	str	r3, [r7, #12]
		if (ept_in->ep != 0xFF) {
    6750:	68fb      	ldr	r3, [r7, #12]
    6752:	7c9b      	ldrb	r3, [r3, #18]
    6754:	2bff      	cmp	r3, #255	; 0xff
    6756:	d002      	beq.n	675e <_usb_d_dev_ep_init+0xda>
			return -USB_ERR_REDO;
    6758:	2314      	movs	r3, #20
    675a:	425b      	negs	r3, r3
    675c:	e047      	b.n	67ee <_usb_d_dev_ep_init+0x16a>
		}
		if (pcfg->cache == NULL) {
    675e:	693b      	ldr	r3, [r7, #16]
    6760:	681b      	ldr	r3, [r3, #0]
    6762:	2b00      	cmp	r3, #0
    6764:	d102      	bne.n	676c <_usb_d_dev_ep_init+0xe8>
			return -USB_ERR_FUNC;
    6766:	2313      	movs	r3, #19
    6768:	425b      	negs	r3, r3
    676a:	e040      	b.n	67ee <_usb_d_dev_ep_init+0x16a>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    676c:	231e      	movs	r3, #30
    676e:	18fb      	adds	r3, r7, r3
    6770:	781b      	ldrb	r3, [r3, #0]
    6772:	2b00      	cmp	r3, #0
    6774:	d005      	beq.n	6782 <_usb_d_dev_ep_init+0xfe>
    6776:	693b      	ldr	r3, [r7, #16]
    6778:	685b      	ldr	r3, [r3, #4]
    677a:	1e5a      	subs	r2, r3, #1
    677c:	4193      	sbcs	r3, r2
    677e:	b2db      	uxtb	r3, r3
    6780:	e004      	b.n	678c <_usb_d_dev_ep_init+0x108>
    6782:	693b      	ldr	r3, [r7, #16]
    6784:	681b      	ldr	r3, [r3, #0]
    6786:	1e5a      	subs	r2, r3, #1
    6788:	4193      	sbcs	r3, r2
    678a:	b2db      	uxtb	r3, r3
    678c:	2b00      	cmp	r3, #0
    678e:	d012      	beq.n	67b6 <_usb_d_dev_ep_init+0x132>
    6790:	231e      	movs	r3, #30
    6792:	18fb      	adds	r3, r7, r3
    6794:	781b      	ldrb	r3, [r3, #0]
    6796:	2b00      	cmp	r3, #0
    6798:	d003      	beq.n	67a2 <_usb_d_dev_ep_init+0x11e>
    679a:	693b      	ldr	r3, [r7, #16]
    679c:	895b      	ldrh	r3, [r3, #10]
    679e:	001a      	movs	r2, r3
    67a0:	e002      	b.n	67a8 <_usb_d_dev_ep_init+0x124>
    67a2:	693b      	ldr	r3, [r7, #16]
    67a4:	891b      	ldrh	r3, [r3, #8]
    67a6:	001a      	movs	r2, r3
    67a8:	1d3b      	adds	r3, r7, #4
    67aa:	881b      	ldrh	r3, [r3, #0]
    67ac:	429a      	cmp	r2, r3
    67ae:	da02      	bge.n	67b6 <_usb_d_dev_ep_init+0x132>
		return -USB_ERR_FUNC;
    67b0:	2313      	movs	r3, #19
    67b2:	425b      	negs	r3, r3
    67b4:	e01b      	b.n	67ee <_usb_d_dev_ep_init+0x16a>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    67b6:	231e      	movs	r3, #30
    67b8:	18fb      	adds	r3, r7, r3
    67ba:	781b      	ldrb	r3, [r3, #0]
    67bc:	2b00      	cmp	r3, #0
    67be:	d002      	beq.n	67c6 <_usb_d_dev_ep_init+0x142>
    67c0:	693b      	ldr	r3, [r7, #16]
    67c2:	685a      	ldr	r2, [r3, #4]
    67c4:	e001      	b.n	67ca <_usb_d_dev_ep_init+0x146>
    67c6:	693b      	ldr	r3, [r7, #16]
    67c8:	681a      	ldr	r2, [r3, #0]
    67ca:	69bb      	ldr	r3, [r7, #24]
    67cc:	60da      	str	r2, [r3, #12]
	ept->size     = max_pkt_siz;
    67ce:	69bb      	ldr	r3, [r7, #24]
    67d0:	1d3a      	adds	r2, r7, #4
    67d2:	8812      	ldrh	r2, [r2, #0]
    67d4:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    67d6:	2317      	movs	r3, #23
    67d8:	18fb      	adds	r3, r7, r3
    67da:	781b      	ldrb	r3, [r3, #0]
    67dc:	3301      	adds	r3, #1
    67de:	b2da      	uxtb	r2, r3
    67e0:	69bb      	ldr	r3, [r7, #24]
    67e2:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    67e4:	69bb      	ldr	r3, [r7, #24]
    67e6:	1dfa      	adds	r2, r7, #7
    67e8:	7812      	ldrb	r2, [r2, #0]
    67ea:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    67ec:	2300      	movs	r3, #0
}
    67ee:	0018      	movs	r0, r3
    67f0:	46bd      	mov	sp, r7
    67f2:	b009      	add	sp, #36	; 0x24
    67f4:	bd90      	pop	{r4, r7, pc}
    67f6:	46c0      	nop			; (mov r8, r8)
    67f8:	00005381 	.word	0x00005381
    67fc:	00012234 	.word	0x00012234

00006800 <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    6800:	b580      	push	{r7, lr}
    6802:	b086      	sub	sp, #24
    6804:	af00      	add	r7, sp, #0
    6806:	0002      	movs	r2, r0
    6808:	1dfb      	adds	r3, r7, #7
    680a:	701a      	strb	r2, [r3, #0]
	Usb *                 hw  = USB;
    680c:	4b39      	ldr	r3, [pc, #228]	; (68f4 <_usb_d_dev_ep_deinit+0xf4>)
    680e:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    6810:	2313      	movs	r3, #19
    6812:	18fb      	adds	r3, r7, r3
    6814:	1dfa      	adds	r2, r7, #7
    6816:	7812      	ldrb	r2, [r2, #0]
    6818:	210f      	movs	r1, #15
    681a:	400a      	ands	r2, r1
    681c:	701a      	strb	r2, [r3, #0]
	bool                  dir = USB_EP_GET_DIR(ep);
    681e:	1dfb      	adds	r3, r7, #7
    6820:	781b      	ldrb	r3, [r3, #0]
    6822:	2280      	movs	r2, #128	; 0x80
    6824:	401a      	ands	r2, r3
    6826:	2312      	movs	r3, #18
    6828:	18fb      	adds	r3, r7, r3
    682a:	1e51      	subs	r1, r2, #1
    682c:	418a      	sbcs	r2, r1
    682e:	701a      	strb	r2, [r3, #0]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    6830:	2312      	movs	r3, #18
    6832:	18fb      	adds	r3, r7, r3
    6834:	781a      	ldrb	r2, [r3, #0]
    6836:	2313      	movs	r3, #19
    6838:	18fb      	adds	r3, r7, r3
    683a:	781b      	ldrb	r3, [r3, #0]
    683c:	0011      	movs	r1, r2
    683e:	0018      	movs	r0, r3
    6840:	4b2d      	ldr	r3, [pc, #180]	; (68f8 <_usb_d_dev_ep_deinit+0xf8>)
    6842:	4798      	blx	r3
    6844:	0003      	movs	r3, r0
    6846:	60fb      	str	r3, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    6848:	2313      	movs	r3, #19
    684a:	18fb      	adds	r3, r7, r3
    684c:	781b      	ldrb	r3, [r3, #0]
    684e:	2b07      	cmp	r3, #7
    6850:	d84b      	bhi.n	68ea <_usb_d_dev_ep_deinit+0xea>
    6852:	68fb      	ldr	r3, [r7, #12]
    6854:	7c9b      	ldrb	r3, [r3, #18]
    6856:	2bff      	cmp	r3, #255	; 0xff
    6858:	d047      	beq.n	68ea <_usb_d_dev_ep_deinit+0xea>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    685a:	2312      	movs	r3, #18
    685c:	18fb      	adds	r3, r7, r3
    685e:	7819      	ldrb	r1, [r3, #0]
    6860:	68fb      	ldr	r3, [r7, #12]
    6862:	2203      	movs	r2, #3
    6864:	0018      	movs	r0, r3
    6866:	4b25      	ldr	r3, [pc, #148]	; (68fc <_usb_d_dev_ep_deinit+0xfc>)
    6868:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    686a:	68fb      	ldr	r3, [r7, #12]
    686c:	7cdb      	ldrb	r3, [r3, #19]
    686e:	2207      	movs	r2, #7
    6870:	4013      	ands	r3, r2
    6872:	b2db      	uxtb	r3, r3
    6874:	2b01      	cmp	r3, #1
    6876:	d107      	bne.n	6888 <_usb_d_dev_ep_deinit+0x88>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    6878:	1dfb      	adds	r3, r7, #7
    687a:	781a      	ldrb	r2, [r3, #0]
    687c:	697b      	ldr	r3, [r7, #20]
    687e:	3208      	adds	r2, #8
    6880:	0152      	lsls	r2, r2, #5
    6882:	2100      	movs	r1, #0
    6884:	54d1      	strb	r1, [r2, r3]
    6886:	e029      	b.n	68dc <_usb_d_dev_ep_deinit+0xdc>
	} else if (USB_EP_GET_DIR(ep)) {
    6888:	1dfb      	adds	r3, r7, #7
    688a:	781b      	ldrb	r3, [r3, #0]
    688c:	b25b      	sxtb	r3, r3
    688e:	2b00      	cmp	r3, #0
    6890:	da14      	bge.n	68bc <_usb_d_dev_ep_deinit+0xbc>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    6892:	1dfb      	adds	r3, r7, #7
    6894:	781b      	ldrb	r3, [r3, #0]
    6896:	220f      	movs	r2, #15
    6898:	401a      	ands	r2, r3
    689a:	1dfb      	adds	r3, r7, #7
    689c:	781b      	ldrb	r3, [r3, #0]
    689e:	210f      	movs	r1, #15
    68a0:	4019      	ands	r1, r3
    68a2:	697b      	ldr	r3, [r7, #20]
    68a4:	3108      	adds	r1, #8
    68a6:	0149      	lsls	r1, r1, #5
    68a8:	5ccb      	ldrb	r3, [r1, r3]
    68aa:	b2db      	uxtb	r3, r3
    68ac:	2170      	movs	r1, #112	; 0x70
    68ae:	438b      	bics	r3, r1
    68b0:	b2d9      	uxtb	r1, r3
    68b2:	697b      	ldr	r3, [r7, #20]
    68b4:	3208      	adds	r2, #8
    68b6:	0152      	lsls	r2, r2, #5
    68b8:	54d1      	strb	r1, [r2, r3]
    68ba:	e00f      	b.n	68dc <_usb_d_dev_ep_deinit+0xdc>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    68bc:	1dfb      	adds	r3, r7, #7
    68be:	781a      	ldrb	r2, [r3, #0]
    68c0:	1dfb      	adds	r3, r7, #7
    68c2:	7819      	ldrb	r1, [r3, #0]
    68c4:	697b      	ldr	r3, [r7, #20]
    68c6:	3108      	adds	r1, #8
    68c8:	0149      	lsls	r1, r1, #5
    68ca:	5ccb      	ldrb	r3, [r1, r3]
    68cc:	b2db      	uxtb	r3, r3
    68ce:	2107      	movs	r1, #7
    68d0:	438b      	bics	r3, r1
    68d2:	b2d9      	uxtb	r1, r3
    68d4:	697b      	ldr	r3, [r7, #20]
    68d6:	3208      	adds	r2, #8
    68d8:	0152      	lsls	r2, r2, #5
    68da:	54d1      	strb	r1, [r2, r3]
	}
	ept->flags.u8 = 0;
    68dc:	68fb      	ldr	r3, [r7, #12]
    68de:	2200      	movs	r2, #0
    68e0:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    68e2:	68fb      	ldr	r3, [r7, #12]
    68e4:	22ff      	movs	r2, #255	; 0xff
    68e6:	749a      	strb	r2, [r3, #18]
    68e8:	e000      	b.n	68ec <_usb_d_dev_ep_deinit+0xec>
		return;
    68ea:	46c0      	nop			; (mov r8, r8)
}
    68ec:	46bd      	mov	sp, r7
    68ee:	b006      	add	sp, #24
    68f0:	bd80      	pop	{r7, pc}
    68f2:	46c0      	nop			; (mov r8, r8)
    68f4:	41005000 	.word	0x41005000
    68f8:	00005381 	.word	0x00005381
    68fc:	00006e6d 	.word	0x00006e6d

00006900 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    6900:	b5b0      	push	{r4, r5, r7, lr}
    6902:	b088      	sub	sp, #32
    6904:	af00      	add	r7, sp, #0
    6906:	0002      	movs	r2, r0
    6908:	1dfb      	adds	r3, r7, #7
    690a:	701a      	strb	r2, [r3, #0]
	Usb *                 hw    = USB;
    690c:	4b9c      	ldr	r3, [pc, #624]	; (6b80 <_usb_d_dev_ep_enable+0x280>)
    690e:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    6910:	231b      	movs	r3, #27
    6912:	18fb      	adds	r3, r7, r3
    6914:	1dfa      	adds	r2, r7, #7
    6916:	7812      	ldrb	r2, [r2, #0]
    6918:	210f      	movs	r1, #15
    691a:	400a      	ands	r2, r1
    691c:	701a      	strb	r2, [r3, #0]
	bool                  dir   = USB_EP_GET_DIR(ep);
    691e:	1dfb      	adds	r3, r7, #7
    6920:	781b      	ldrb	r3, [r3, #0]
    6922:	2280      	movs	r2, #128	; 0x80
    6924:	401a      	ands	r2, r3
    6926:	231a      	movs	r3, #26
    6928:	18fb      	adds	r3, r7, r3
    692a:	1e51      	subs	r1, r2, #1
    692c:	418a      	sbcs	r2, r1
    692e:	701a      	strb	r2, [r3, #0]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    6930:	231a      	movs	r3, #26
    6932:	18fb      	adds	r3, r7, r3
    6934:	781a      	ldrb	r2, [r3, #0]
    6936:	231b      	movs	r3, #27
    6938:	18fb      	adds	r3, r7, r3
    693a:	781b      	ldrb	r3, [r3, #0]
    693c:	0011      	movs	r1, r2
    693e:	0018      	movs	r0, r3
    6940:	4b90      	ldr	r3, [pc, #576]	; (6b84 <_usb_d_dev_ep_enable+0x284>)
    6942:	4798      	blx	r3
    6944:	0003      	movs	r3, r0
    6946:	617b      	str	r3, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    6948:	2313      	movs	r3, #19
    694a:	18fc      	adds	r4, r7, r3
    694c:	231b      	movs	r3, #27
    694e:	18fb      	adds	r3, r7, r3
    6950:	781a      	ldrb	r2, [r3, #0]
    6952:	69fb      	ldr	r3, [r7, #28]
    6954:	0011      	movs	r1, r2
    6956:	0018      	movs	r0, r3
    6958:	4b8b      	ldr	r3, [pc, #556]	; (6b88 <_usb_d_dev_ep_enable+0x288>)
    695a:	4798      	blx	r3
    695c:	0003      	movs	r3, r0
    695e:	7023      	strb	r3, [r4, #0]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    6960:	231b      	movs	r3, #27
    6962:	18fb      	adds	r3, r7, r3
    6964:	781b      	ldrb	r3, [r3, #0]
    6966:	2b07      	cmp	r3, #7
    6968:	d803      	bhi.n	6972 <_usb_d_dev_ep_enable+0x72>
    696a:	697b      	ldr	r3, [r7, #20]
    696c:	7c9b      	ldrb	r3, [r3, #18]
    696e:	2bff      	cmp	r3, #255	; 0xff
    6970:	d102      	bne.n	6978 <_usb_d_dev_ep_enable+0x78>
		return -USB_ERR_PARAM;
    6972:	2312      	movs	r3, #18
    6974:	425b      	negs	r3, r3
    6976:	e0fe      	b.n	6b76 <_usb_d_dev_ep_enable+0x276>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    6978:	231b      	movs	r3, #27
    697a:	18fb      	adds	r3, r7, r3
    697c:	781b      	ldrb	r3, [r3, #0]
    697e:	015a      	lsls	r2, r3, #5
    6980:	4b82      	ldr	r3, [pc, #520]	; (6b8c <_usb_d_dev_ep_enable+0x28c>)
    6982:	18d3      	adds	r3, r2, r3
    6984:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    6986:	697b      	ldr	r3, [r7, #20]
    6988:	7cdb      	ldrb	r3, [r3, #19]
    698a:	2207      	movs	r2, #7
    698c:	4013      	ands	r3, r2
    698e:	b2db      	uxtb	r3, r3
    6990:	2b01      	cmp	r3, #1
    6992:	d15d      	bne.n	6a50 <_usb_d_dev_ep_enable+0x150>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    6994:	2313      	movs	r3, #19
    6996:	18fb      	adds	r3, r7, r3
    6998:	781b      	ldrb	r3, [r3, #0]
    699a:	2277      	movs	r2, #119	; 0x77
    699c:	4013      	ands	r3, r2
    699e:	d002      	beq.n	69a6 <_usb_d_dev_ep_enable+0xa6>
			return -USB_ERR_REDO;
    69a0:	2314      	movs	r3, #20
    69a2:	425b      	negs	r3, r3
    69a4:	e0e7      	b.n	6b76 <_usb_d_dev_ep_enable+0x276>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    69a6:	231b      	movs	r3, #27
    69a8:	18fb      	adds	r3, r7, r3
    69aa:	7819      	ldrb	r1, [r3, #0]
    69ac:	69fb      	ldr	r3, [r7, #28]
    69ae:	2211      	movs	r2, #17
    69b0:	0018      	movs	r0, r3
    69b2:	4b77      	ldr	r3, [pc, #476]	; (6b90 <_usb_d_dev_ep_enable+0x290>)
    69b4:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    69b6:	697b      	ldr	r3, [r7, #20]
    69b8:	8a1b      	ldrh	r3, [r3, #16]
    69ba:	039b      	lsls	r3, r3, #14
    69bc:	001a      	movs	r2, r3
    69be:	4b75      	ldr	r3, [pc, #468]	; (6b94 <_usb_d_dev_ep_enable+0x294>)
    69c0:	401a      	ands	r2, r3
    69c2:	0014      	movs	r4, r2
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    69c4:	697b      	ldr	r3, [r7, #20]
    69c6:	8a1b      	ldrh	r3, [r3, #16]
    69c8:	0018      	movs	r0, r3
    69ca:	4b73      	ldr	r3, [pc, #460]	; (6b98 <_usb_d_dev_ep_enable+0x298>)
    69cc:	4798      	blx	r3
    69ce:	0003      	movs	r3, r0
    69d0:	071b      	lsls	r3, r3, #28
    69d2:	001a      	movs	r2, r3
    69d4:	23e0      	movs	r3, #224	; 0xe0
    69d6:	05db      	lsls	r3, r3, #23
    69d8:	4013      	ands	r3, r2
    69da:	0022      	movs	r2, r4
    69dc:	431a      	orrs	r2, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    69de:	68fb      	ldr	r3, [r7, #12]
    69e0:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    69e2:	68fb      	ldr	r3, [r7, #12]
    69e4:	3310      	adds	r3, #16
    69e6:	001c      	movs	r4, r3
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    69e8:	697b      	ldr	r3, [r7, #20]
    69ea:	8a1b      	ldrh	r3, [r3, #16]
    69ec:	049b      	lsls	r3, r3, #18
    69ee:	0c9d      	lsrs	r5, r3, #18
    69f0:	697b      	ldr	r3, [r7, #20]
    69f2:	8a1b      	ldrh	r3, [r3, #16]
    69f4:	0018      	movs	r0, r3
    69f6:	4b68      	ldr	r3, [pc, #416]	; (6b98 <_usb_d_dev_ep_enable+0x298>)
    69f8:	4798      	blx	r3
    69fa:	0003      	movs	r3, r0
    69fc:	071b      	lsls	r3, r3, #28
    69fe:	001a      	movs	r2, r3
    6a00:	23e0      	movs	r3, #224	; 0xe0
    6a02:	05db      	lsls	r3, r3, #23
    6a04:	4013      	ands	r3, r2
    6a06:	432b      	orrs	r3, r5
    6a08:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    6a0a:	231b      	movs	r3, #27
    6a0c:	18fb      	adds	r3, r7, r3
    6a0e:	781b      	ldrb	r3, [r3, #0]
    6a10:	2200      	movs	r2, #0
    6a12:	2100      	movs	r1, #0
    6a14:	0018      	movs	r0, r3
    6a16:	4b61      	ldr	r3, [pc, #388]	; (6b9c <_usb_d_dev_ep_enable+0x29c>)
    6a18:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    6a1a:	231b      	movs	r3, #27
    6a1c:	18fb      	adds	r3, r7, r3
    6a1e:	781b      	ldrb	r3, [r3, #0]
    6a20:	2200      	movs	r2, #0
    6a22:	2101      	movs	r1, #1
    6a24:	0018      	movs	r0, r3
    6a26:	4b5e      	ldr	r3, [pc, #376]	; (6ba0 <_usb_d_dev_ep_enable+0x2a0>)
    6a28:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    6a2a:	231b      	movs	r3, #27
    6a2c:	18fb      	adds	r3, r7, r3
    6a2e:	781b      	ldrb	r3, [r3, #0]
    6a30:	2100      	movs	r1, #0
    6a32:	0018      	movs	r0, r3
    6a34:	4b5b      	ldr	r3, [pc, #364]	; (6ba4 <_usb_d_dev_ep_enable+0x2a4>)
    6a36:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    6a38:	231b      	movs	r3, #27
    6a3a:	18fb      	adds	r3, r7, r3
    6a3c:	781b      	ldrb	r3, [r3, #0]
    6a3e:	2101      	movs	r1, #1
    6a40:	0018      	movs	r0, r3
    6a42:	4b58      	ldr	r3, [pc, #352]	; (6ba4 <_usb_d_dev_ep_enable+0x2a4>)
    6a44:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    6a46:	697b      	ldr	r3, [r7, #20]
    6a48:	0018      	movs	r0, r3
    6a4a:	4b57      	ldr	r3, [pc, #348]	; (6ba8 <_usb_d_dev_ep_enable+0x2a8>)
    6a4c:	4798      	blx	r3
    6a4e:	e091      	b.n	6b74 <_usb_d_dev_ep_enable+0x274>

	} else if (dir) {
    6a50:	231a      	movs	r3, #26
    6a52:	18fb      	adds	r3, r7, r3
    6a54:	781b      	ldrb	r3, [r3, #0]
    6a56:	2b00      	cmp	r3, #0
    6a58:	d047      	beq.n	6aea <_usb_d_dev_ep_enable+0x1ea>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    6a5a:	2313      	movs	r3, #19
    6a5c:	18fb      	adds	r3, r7, r3
    6a5e:	781b      	ldrb	r3, [r3, #0]
    6a60:	2270      	movs	r2, #112	; 0x70
    6a62:	4013      	ands	r3, r2
    6a64:	d002      	beq.n	6a6c <_usb_d_dev_ep_enable+0x16c>
			return -USB_ERR_REDO;
    6a66:	2314      	movs	r3, #20
    6a68:	425b      	negs	r3, r3
    6a6a:	e084      	b.n	6b76 <_usb_d_dev_ep_enable+0x276>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    6a6c:	697b      	ldr	r3, [r7, #20]
    6a6e:	7cdb      	ldrb	r3, [r3, #19]
    6a70:	075b      	lsls	r3, r3, #29
    6a72:	0f5b      	lsrs	r3, r3, #29
    6a74:	b2db      	uxtb	r3, r3
    6a76:	011b      	lsls	r3, r3, #4
    6a78:	b2db      	uxtb	r3, r3
    6a7a:	2270      	movs	r2, #112	; 0x70
    6a7c:	4013      	ands	r3, r2
    6a7e:	b2d9      	uxtb	r1, r3
    6a80:	2313      	movs	r3, #19
    6a82:	18fb      	adds	r3, r7, r3
    6a84:	2213      	movs	r2, #19
    6a86:	18ba      	adds	r2, r7, r2
    6a88:	7812      	ldrb	r2, [r2, #0]
    6a8a:	430a      	orrs	r2, r1
    6a8c:	701a      	strb	r2, [r3, #0]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    6a8e:	2313      	movs	r3, #19
    6a90:	18fb      	adds	r3, r7, r3
    6a92:	781a      	ldrb	r2, [r3, #0]
    6a94:	231b      	movs	r3, #27
    6a96:	18fb      	adds	r3, r7, r3
    6a98:	7819      	ldrb	r1, [r3, #0]
    6a9a:	69fb      	ldr	r3, [r7, #28]
    6a9c:	0018      	movs	r0, r3
    6a9e:	4b3c      	ldr	r3, [pc, #240]	; (6b90 <_usb_d_dev_ep_enable+0x290>)
    6aa0:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    6aa2:	68fb      	ldr	r3, [r7, #12]
    6aa4:	3310      	adds	r3, #16
    6aa6:	001c      	movs	r4, r3
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    6aa8:	697b      	ldr	r3, [r7, #20]
    6aaa:	8a1b      	ldrh	r3, [r3, #16]
    6aac:	049b      	lsls	r3, r3, #18
    6aae:	0c9d      	lsrs	r5, r3, #18
    6ab0:	697b      	ldr	r3, [r7, #20]
    6ab2:	8a1b      	ldrh	r3, [r3, #16]
    6ab4:	0018      	movs	r0, r3
    6ab6:	4b38      	ldr	r3, [pc, #224]	; (6b98 <_usb_d_dev_ep_enable+0x298>)
    6ab8:	4798      	blx	r3
    6aba:	0003      	movs	r3, r0
    6abc:	071b      	lsls	r3, r3, #28
    6abe:	001a      	movs	r2, r3
    6ac0:	23e0      	movs	r3, #224	; 0xe0
    6ac2:	05db      	lsls	r3, r3, #23
    6ac4:	4013      	ands	r3, r2
    6ac6:	432b      	orrs	r3, r5
    6ac8:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    6aca:	231b      	movs	r3, #27
    6acc:	18fb      	adds	r3, r7, r3
    6ace:	781b      	ldrb	r3, [r3, #0]
    6ad0:	2200      	movs	r2, #0
    6ad2:	2101      	movs	r1, #1
    6ad4:	0018      	movs	r0, r3
    6ad6:	4b32      	ldr	r3, [pc, #200]	; (6ba0 <_usb_d_dev_ep_enable+0x2a0>)
    6ad8:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    6ada:	231b      	movs	r3, #27
    6adc:	18fb      	adds	r3, r7, r3
    6ade:	781b      	ldrb	r3, [r3, #0]
    6ae0:	2101      	movs	r1, #1
    6ae2:	0018      	movs	r0, r3
    6ae4:	4b2f      	ldr	r3, [pc, #188]	; (6ba4 <_usb_d_dev_ep_enable+0x2a4>)
    6ae6:	4798      	blx	r3
    6ae8:	e044      	b.n	6b74 <_usb_d_dev_ep_enable+0x274>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    6aea:	2313      	movs	r3, #19
    6aec:	18fb      	adds	r3, r7, r3
    6aee:	781b      	ldrb	r3, [r3, #0]
    6af0:	2207      	movs	r2, #7
    6af2:	4013      	ands	r3, r2
    6af4:	d002      	beq.n	6afc <_usb_d_dev_ep_enable+0x1fc>
			return -USB_ERR_REDO;
    6af6:	2314      	movs	r3, #20
    6af8:	425b      	negs	r3, r3
    6afa:	e03c      	b.n	6b76 <_usb_d_dev_ep_enable+0x276>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    6afc:	697b      	ldr	r3, [r7, #20]
    6afe:	7cdb      	ldrb	r3, [r3, #19]
    6b00:	075b      	lsls	r3, r3, #29
    6b02:	0f5b      	lsrs	r3, r3, #29
    6b04:	b2db      	uxtb	r3, r3
    6b06:	0019      	movs	r1, r3
    6b08:	2313      	movs	r3, #19
    6b0a:	18fb      	adds	r3, r7, r3
    6b0c:	2213      	movs	r2, #19
    6b0e:	18ba      	adds	r2, r7, r2
    6b10:	7812      	ldrb	r2, [r2, #0]
    6b12:	430a      	orrs	r2, r1
    6b14:	701a      	strb	r2, [r3, #0]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    6b16:	2313      	movs	r3, #19
    6b18:	18fb      	adds	r3, r7, r3
    6b1a:	781a      	ldrb	r2, [r3, #0]
    6b1c:	231b      	movs	r3, #27
    6b1e:	18fb      	adds	r3, r7, r3
    6b20:	7819      	ldrb	r1, [r3, #0]
    6b22:	69fb      	ldr	r3, [r7, #28]
    6b24:	0018      	movs	r0, r3
    6b26:	4b1a      	ldr	r3, [pc, #104]	; (6b90 <_usb_d_dev_ep_enable+0x290>)
    6b28:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    6b2a:	697b      	ldr	r3, [r7, #20]
    6b2c:	8a1b      	ldrh	r3, [r3, #16]
    6b2e:	039b      	lsls	r3, r3, #14
    6b30:	001a      	movs	r2, r3
    6b32:	4b18      	ldr	r3, [pc, #96]	; (6b94 <_usb_d_dev_ep_enable+0x294>)
    6b34:	401a      	ands	r2, r3
    6b36:	0014      	movs	r4, r2
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    6b38:	697b      	ldr	r3, [r7, #20]
    6b3a:	8a1b      	ldrh	r3, [r3, #16]
    6b3c:	0018      	movs	r0, r3
    6b3e:	4b16      	ldr	r3, [pc, #88]	; (6b98 <_usb_d_dev_ep_enable+0x298>)
    6b40:	4798      	blx	r3
    6b42:	0003      	movs	r3, r0
    6b44:	071b      	lsls	r3, r3, #28
    6b46:	001a      	movs	r2, r3
    6b48:	23e0      	movs	r3, #224	; 0xe0
    6b4a:	05db      	lsls	r3, r3, #23
    6b4c:	4013      	ands	r3, r2
    6b4e:	0022      	movs	r2, r4
    6b50:	431a      	orrs	r2, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    6b52:	68fb      	ldr	r3, [r7, #12]
    6b54:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    6b56:	231b      	movs	r3, #27
    6b58:	18fb      	adds	r3, r7, r3
    6b5a:	781b      	ldrb	r3, [r3, #0]
    6b5c:	2200      	movs	r2, #0
    6b5e:	2100      	movs	r1, #0
    6b60:	0018      	movs	r0, r3
    6b62:	4b0e      	ldr	r3, [pc, #56]	; (6b9c <_usb_d_dev_ep_enable+0x29c>)
    6b64:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    6b66:	231b      	movs	r3, #27
    6b68:	18fb      	adds	r3, r7, r3
    6b6a:	781b      	ldrb	r3, [r3, #0]
    6b6c:	2100      	movs	r1, #0
    6b6e:	0018      	movs	r0, r3
    6b70:	4b0c      	ldr	r3, [pc, #48]	; (6ba4 <_usb_d_dev_ep_enable+0x2a4>)
    6b72:	4798      	blx	r3
	}

	return USB_OK;
    6b74:	2300      	movs	r3, #0
}
    6b76:	0018      	movs	r0, r3
    6b78:	46bd      	mov	sp, r7
    6b7a:	b008      	add	sp, #32
    6b7c:	bdb0      	pop	{r4, r5, r7, pc}
    6b7e:	46c0      	nop			; (mov r8, r8)
    6b80:	41005000 	.word	0x41005000
    6b84:	00005381 	.word	0x00005381
    6b88:	000048a1 	.word	0x000048a1
    6b8c:	20001058 	.word	0x20001058
    6b90:	00004871 	.word	0x00004871
    6b94:	0fffc000 	.word	0x0fffc000
    6b98:	0000530d 	.word	0x0000530d
    6b9c:	000052a1 	.word	0x000052a1
    6ba0:	00005235 	.word	0x00005235
    6ba4:	000051fd 	.word	0x000051fd
    6ba8:	000065f1 	.word	0x000065f1

00006bac <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    6bac:	b580      	push	{r7, lr}
    6bae:	b084      	sub	sp, #16
    6bb0:	af00      	add	r7, sp, #0
    6bb2:	6078      	str	r0, [r7, #4]
    6bb4:	000a      	movs	r2, r1
    6bb6:	1cfb      	adds	r3, r7, #3
    6bb8:	701a      	strb	r2, [r3, #0]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    6bba:	687b      	ldr	r3, [r7, #4]
    6bbc:	7c9a      	ldrb	r2, [r3, #18]
    6bbe:	230f      	movs	r3, #15
    6bc0:	18fb      	adds	r3, r7, r3
    6bc2:	210f      	movs	r1, #15
    6bc4:	400a      	ands	r2, r1
    6bc6:	701a      	strb	r2, [r3, #0]
	return _usbd_ep_is_stalled(epn, dir);
    6bc8:	1cfb      	adds	r3, r7, #3
    6bca:	781a      	ldrb	r2, [r3, #0]
    6bcc:	230f      	movs	r3, #15
    6bce:	18fb      	adds	r3, r7, r3
    6bd0:	781b      	ldrb	r3, [r3, #0]
    6bd2:	0011      	movs	r1, r2
    6bd4:	0018      	movs	r0, r3
    6bd6:	4b03      	ldr	r3, [pc, #12]	; (6be4 <_usb_d_dev_ep_stall_get+0x38>)
    6bd8:	4798      	blx	r3
    6bda:	0003      	movs	r3, r0
}
    6bdc:	0018      	movs	r0, r3
    6bde:	46bd      	mov	sp, r7
    6be0:	b004      	add	sp, #16
    6be2:	bd80      	pop	{r7, pc}
    6be4:	00004d51 	.word	0x00004d51

00006be8 <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    6be8:	b580      	push	{r7, lr}
    6bea:	b084      	sub	sp, #16
    6bec:	af00      	add	r7, sp, #0
    6bee:	6078      	str	r0, [r7, #4]
    6bf0:	000a      	movs	r2, r1
    6bf2:	1cfb      	adds	r3, r7, #3
    6bf4:	701a      	strb	r2, [r3, #0]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    6bf6:	687b      	ldr	r3, [r7, #4]
    6bf8:	7c9a      	ldrb	r2, [r3, #18]
    6bfa:	230f      	movs	r3, #15
    6bfc:	18fb      	adds	r3, r7, r3
    6bfe:	210f      	movs	r1, #15
    6c00:	400a      	ands	r2, r1
    6c02:	701a      	strb	r2, [r3, #0]
	_usbd_ep_set_stall(epn, dir, true);
    6c04:	1cfb      	adds	r3, r7, #3
    6c06:	7819      	ldrb	r1, [r3, #0]
    6c08:	230f      	movs	r3, #15
    6c0a:	18fb      	adds	r3, r7, r3
    6c0c:	781b      	ldrb	r3, [r3, #0]
    6c0e:	2201      	movs	r2, #1
    6c10:	0018      	movs	r0, r3
    6c12:	4b0b      	ldr	r3, [pc, #44]	; (6c40 <_usb_d_dev_ep_stall_set+0x58>)
    6c14:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    6c16:	1cfb      	adds	r3, r7, #3
    6c18:	781b      	ldrb	r3, [r3, #0]
    6c1a:	2220      	movs	r2, #32
    6c1c:	409a      	lsls	r2, r3
    6c1e:	230f      	movs	r3, #15
    6c20:	18fb      	adds	r3, r7, r3
    6c22:	781b      	ldrb	r3, [r3, #0]
    6c24:	0011      	movs	r1, r2
    6c26:	0018      	movs	r0, r3
    6c28:	4b06      	ldr	r3, [pc, #24]	; (6c44 <_usb_d_dev_ep_stall_set+0x5c>)
    6c2a:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    6c2c:	687b      	ldr	r3, [r7, #4]
    6c2e:	7cda      	ldrb	r2, [r3, #19]
    6c30:	2108      	movs	r1, #8
    6c32:	430a      	orrs	r2, r1
    6c34:	74da      	strb	r2, [r3, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    6c36:	2300      	movs	r3, #0
}
    6c38:	0018      	movs	r0, r3
    6c3a:	46bd      	mov	sp, r7
    6c3c:	b004      	add	sp, #16
    6c3e:	bd80      	pop	{r7, pc}
    6c40:	00004ce5 	.word	0x00004ce5
    6c44:	00004c51 	.word	0x00004c51

00006c48 <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    6c48:	b590      	push	{r4, r7, lr}
    6c4a:	b085      	sub	sp, #20
    6c4c:	af00      	add	r7, sp, #0
    6c4e:	6078      	str	r0, [r7, #4]
    6c50:	000a      	movs	r2, r1
    6c52:	1cfb      	adds	r3, r7, #3
    6c54:	701a      	strb	r2, [r3, #0]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    6c56:	687b      	ldr	r3, [r7, #4]
    6c58:	7c9a      	ldrb	r2, [r3, #18]
    6c5a:	230f      	movs	r3, #15
    6c5c:	18fb      	adds	r3, r7, r3
    6c5e:	210f      	movs	r1, #15
    6c60:	400a      	ands	r2, r1
    6c62:	701a      	strb	r2, [r3, #0]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    6c64:	1cfb      	adds	r3, r7, #3
    6c66:	781a      	ldrb	r2, [r3, #0]
    6c68:	230e      	movs	r3, #14
    6c6a:	18fc      	adds	r4, r7, r3
    6c6c:	230f      	movs	r3, #15
    6c6e:	18fb      	adds	r3, r7, r3
    6c70:	781b      	ldrb	r3, [r3, #0]
    6c72:	0011      	movs	r1, r2
    6c74:	0018      	movs	r0, r3
    6c76:	4b31      	ldr	r3, [pc, #196]	; (6d3c <_usb_d_dev_ep_stall_clr+0xf4>)
    6c78:	4798      	blx	r3
    6c7a:	0003      	movs	r3, r0
    6c7c:	7023      	strb	r3, [r4, #0]
	if (!is_stalled) {
    6c7e:	230e      	movs	r3, #14
    6c80:	18fb      	adds	r3, r7, r3
    6c82:	781b      	ldrb	r3, [r3, #0]
    6c84:	2201      	movs	r2, #1
    6c86:	4053      	eors	r3, r2
    6c88:	b2db      	uxtb	r3, r3
    6c8a:	2b00      	cmp	r3, #0
    6c8c:	d001      	beq.n	6c92 <_usb_d_dev_ep_stall_clr+0x4a>
		return ERR_NONE;
    6c8e:	2300      	movs	r3, #0
    6c90:	e050      	b.n	6d34 <_usb_d_dev_ep_stall_clr+0xec>
	}
	_usbd_ep_set_stall(epn, dir, false);
    6c92:	1cfb      	adds	r3, r7, #3
    6c94:	7819      	ldrb	r1, [r3, #0]
    6c96:	230f      	movs	r3, #15
    6c98:	18fb      	adds	r3, r7, r3
    6c9a:	781b      	ldrb	r3, [r3, #0]
    6c9c:	2200      	movs	r2, #0
    6c9e:	0018      	movs	r0, r3
    6ca0:	4b27      	ldr	r3, [pc, #156]	; (6d40 <_usb_d_dev_ep_stall_clr+0xf8>)
    6ca2:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    6ca4:	1cfb      	adds	r3, r7, #3
    6ca6:	781b      	ldrb	r3, [r3, #0]
    6ca8:	2220      	movs	r2, #32
    6caa:	409a      	lsls	r2, r3
    6cac:	230f      	movs	r3, #15
    6cae:	18fb      	adds	r3, r7, r3
    6cb0:	781b      	ldrb	r3, [r3, #0]
    6cb2:	0011      	movs	r1, r2
    6cb4:	0018      	movs	r0, r3
    6cb6:	4b23      	ldr	r3, [pc, #140]	; (6d44 <_usb_d_dev_ep_stall_clr+0xfc>)
    6cb8:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    6cba:	1cfb      	adds	r3, r7, #3
    6cbc:	781a      	ldrb	r2, [r3, #0]
    6cbe:	230f      	movs	r3, #15
    6cc0:	18fb      	adds	r3, r7, r3
    6cc2:	781b      	ldrb	r3, [r3, #0]
    6cc4:	0011      	movs	r1, r2
    6cc6:	0018      	movs	r0, r3
    6cc8:	4b1f      	ldr	r3, [pc, #124]	; (6d48 <_usb_d_dev_ep_stall_clr+0x100>)
    6cca:	4798      	blx	r3
    6ccc:	1e03      	subs	r3, r0, #0
    6cce:	d011      	beq.n	6cf4 <_usb_d_dev_ep_stall_clr+0xac>
		_usbd_ep_ack_stall(epn, dir);
    6cd0:	1cfb      	adds	r3, r7, #3
    6cd2:	781a      	ldrb	r2, [r3, #0]
    6cd4:	230f      	movs	r3, #15
    6cd6:	18fb      	adds	r3, r7, r3
    6cd8:	781b      	ldrb	r3, [r3, #0]
    6cda:	0011      	movs	r1, r2
    6cdc:	0018      	movs	r0, r3
    6cde:	4b1b      	ldr	r3, [pc, #108]	; (6d4c <_usb_d_dev_ep_stall_clr+0x104>)
    6ce0:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    6ce2:	1cfb      	adds	r3, r7, #3
    6ce4:	7819      	ldrb	r1, [r3, #0]
    6ce6:	230f      	movs	r3, #15
    6ce8:	18fb      	adds	r3, r7, r3
    6cea:	781b      	ldrb	r3, [r3, #0]
    6cec:	2200      	movs	r2, #0
    6cee:	0018      	movs	r0, r3
    6cf0:	4b17      	ldr	r3, [pc, #92]	; (6d50 <_usb_d_dev_ep_stall_clr+0x108>)
    6cf2:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    6cf4:	687b      	ldr	r3, [r7, #4]
    6cf6:	7cdb      	ldrb	r3, [r3, #19]
    6cf8:	2207      	movs	r2, #7
    6cfa:	4013      	ands	r3, r2
    6cfc:	b2db      	uxtb	r3, r3
    6cfe:	2b01      	cmp	r3, #1
    6d00:	d112      	bne.n	6d28 <_usb_d_dev_ep_stall_clr+0xe0>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    6d02:	230f      	movs	r3, #15
    6d04:	18fb      	adds	r3, r7, r3
    6d06:	781b      	ldrb	r3, [r3, #0]
    6d08:	4a12      	ldr	r2, [pc, #72]	; (6d54 <_usb_d_dev_ep_stall_clr+0x10c>)
    6d0a:	0019      	movs	r1, r3
    6d0c:	0010      	movs	r0, r2
    6d0e:	4b12      	ldr	r3, [pc, #72]	; (6d58 <_usb_d_dev_ep_stall_clr+0x110>)
    6d10:	4798      	blx	r3
    6d12:	0003      	movs	r3, r0
    6d14:	001a      	movs	r2, r3
    6d16:	2330      	movs	r3, #48	; 0x30
    6d18:	4013      	ands	r3, r2
    6d1a:	d10a      	bne.n	6d32 <_usb_d_dev_ep_stall_clr+0xea>
			ept->flags.bits.is_stalled = 0;
    6d1c:	687b      	ldr	r3, [r7, #4]
    6d1e:	7cda      	ldrb	r2, [r3, #19]
    6d20:	2108      	movs	r1, #8
    6d22:	438a      	bics	r2, r1
    6d24:	74da      	strb	r2, [r3, #19]
    6d26:	e004      	b.n	6d32 <_usb_d_dev_ep_stall_clr+0xea>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    6d28:	687b      	ldr	r3, [r7, #4]
    6d2a:	7cda      	ldrb	r2, [r3, #19]
    6d2c:	2108      	movs	r1, #8
    6d2e:	438a      	bics	r2, r1
    6d30:	74da      	strb	r2, [r3, #19]
	}
	return ERR_NONE;
    6d32:	2300      	movs	r3, #0
}
    6d34:	0018      	movs	r0, r3
    6d36:	46bd      	mov	sp, r7
    6d38:	b005      	add	sp, #20
    6d3a:	bd90      	pop	{r4, r7, pc}
    6d3c:	00004d51 	.word	0x00004d51
    6d40:	00004ce5 	.word	0x00004ce5
    6d44:	00004c81 	.word	0x00004c81
    6d48:	00004d9d 	.word	0x00004d9d
    6d4c:	00004de9 	.word	0x00004de9
    6d50:	00004f01 	.word	0x00004f01
    6d54:	41005000 	.word	0x41005000
    6d58:	000046ff 	.word	0x000046ff

00006d5c <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    6d5c:	b580      	push	{r7, lr}
    6d5e:	b086      	sub	sp, #24
    6d60:	af00      	add	r7, sp, #0
    6d62:	0002      	movs	r2, r0
    6d64:	1dfb      	adds	r3, r7, #7
    6d66:	701a      	strb	r2, [r3, #0]
    6d68:	1dbb      	adds	r3, r7, #6
    6d6a:	1c0a      	adds	r2, r1, #0
    6d6c:	701a      	strb	r2, [r3, #0]
	uint8_t               epn = USB_EP_GET_N(ep);
    6d6e:	2313      	movs	r3, #19
    6d70:	18fb      	adds	r3, r7, r3
    6d72:	1dfa      	adds	r2, r7, #7
    6d74:	7812      	ldrb	r2, [r2, #0]
    6d76:	210f      	movs	r1, #15
    6d78:	400a      	ands	r2, r1
    6d7a:	701a      	strb	r2, [r3, #0]
	bool                  dir = USB_EP_GET_DIR(ep);
    6d7c:	1dfb      	adds	r3, r7, #7
    6d7e:	781b      	ldrb	r3, [r3, #0]
    6d80:	2280      	movs	r2, #128	; 0x80
    6d82:	401a      	ands	r2, r3
    6d84:	2312      	movs	r3, #18
    6d86:	18fb      	adds	r3, r7, r3
    6d88:	1e51      	subs	r1, r2, #1
    6d8a:	418a      	sbcs	r2, r1
    6d8c:	701a      	strb	r2, [r3, #0]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    6d8e:	2312      	movs	r3, #18
    6d90:	18fb      	adds	r3, r7, r3
    6d92:	781a      	ldrb	r2, [r3, #0]
    6d94:	2313      	movs	r3, #19
    6d96:	18fb      	adds	r3, r7, r3
    6d98:	781b      	ldrb	r3, [r3, #0]
    6d9a:	0011      	movs	r1, r2
    6d9c:	0018      	movs	r0, r3
    6d9e:	4b1c      	ldr	r3, [pc, #112]	; (6e10 <_usb_d_dev_ep_stall+0xb4>)
    6da0:	4798      	blx	r3
    6da2:	0003      	movs	r3, r0
    6da4:	60fb      	str	r3, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    6da6:	2313      	movs	r3, #19
    6da8:	18fb      	adds	r3, r7, r3
    6daa:	781b      	ldrb	r3, [r3, #0]
    6dac:	2b07      	cmp	r3, #7
    6dae:	d902      	bls.n	6db6 <_usb_d_dev_ep_stall+0x5a>
		return -USB_ERR_PARAM;
    6db0:	2312      	movs	r3, #18
    6db2:	425b      	negs	r3, r3
    6db4:	e028      	b.n	6e08 <_usb_d_dev_ep_stall+0xac>
	}

	if (USB_EP_STALL_SET == ctrl) {
    6db6:	1dbb      	adds	r3, r7, #6
    6db8:	781b      	ldrb	r3, [r3, #0]
    6dba:	2b01      	cmp	r3, #1
    6dbc:	d10a      	bne.n	6dd4 <_usb_d_dev_ep_stall+0x78>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    6dbe:	2312      	movs	r3, #18
    6dc0:	18fb      	adds	r3, r7, r3
    6dc2:	781a      	ldrb	r2, [r3, #0]
    6dc4:	68fb      	ldr	r3, [r7, #12]
    6dc6:	0011      	movs	r1, r2
    6dc8:	0018      	movs	r0, r3
    6dca:	4b12      	ldr	r3, [pc, #72]	; (6e14 <_usb_d_dev_ep_stall+0xb8>)
    6dcc:	4798      	blx	r3
    6dce:	0003      	movs	r3, r0
    6dd0:	617b      	str	r3, [r7, #20]
    6dd2:	e018      	b.n	6e06 <_usb_d_dev_ep_stall+0xaa>
	} else if (USB_EP_STALL_CLR == ctrl) {
    6dd4:	1dbb      	adds	r3, r7, #6
    6dd6:	781b      	ldrb	r3, [r3, #0]
    6dd8:	2b00      	cmp	r3, #0
    6dda:	d10a      	bne.n	6df2 <_usb_d_dev_ep_stall+0x96>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    6ddc:	2312      	movs	r3, #18
    6dde:	18fb      	adds	r3, r7, r3
    6de0:	781a      	ldrb	r2, [r3, #0]
    6de2:	68fb      	ldr	r3, [r7, #12]
    6de4:	0011      	movs	r1, r2
    6de6:	0018      	movs	r0, r3
    6de8:	4b0b      	ldr	r3, [pc, #44]	; (6e18 <_usb_d_dev_ep_stall+0xbc>)
    6dea:	4798      	blx	r3
    6dec:	0003      	movs	r3, r0
    6dee:	617b      	str	r3, [r7, #20]
    6df0:	e009      	b.n	6e06 <_usb_d_dev_ep_stall+0xaa>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    6df2:	2312      	movs	r3, #18
    6df4:	18fb      	adds	r3, r7, r3
    6df6:	781a      	ldrb	r2, [r3, #0]
    6df8:	68fb      	ldr	r3, [r7, #12]
    6dfa:	0011      	movs	r1, r2
    6dfc:	0018      	movs	r0, r3
    6dfe:	4b07      	ldr	r3, [pc, #28]	; (6e1c <_usb_d_dev_ep_stall+0xc0>)
    6e00:	4798      	blx	r3
    6e02:	0003      	movs	r3, r0
    6e04:	617b      	str	r3, [r7, #20]
	}
	return rc;
    6e06:	697b      	ldr	r3, [r7, #20]
}
    6e08:	0018      	movs	r0, r3
    6e0a:	46bd      	mov	sp, r7
    6e0c:	b006      	add	sp, #24
    6e0e:	bd80      	pop	{r7, pc}
    6e10:	00005381 	.word	0x00005381
    6e14:	00006be9 	.word	0x00006be9
    6e18:	00006c49 	.word	0x00006c49
    6e1c:	00006bad 	.word	0x00006bad

00006e20 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    6e20:	b590      	push	{r4, r7, lr}
    6e22:	b083      	sub	sp, #12
    6e24:	af00      	add	r7, sp, #0
    6e26:	6078      	str	r0, [r7, #4]
    6e28:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    6e2a:	687b      	ldr	r3, [r7, #4]
    6e2c:	7c9b      	ldrb	r3, [r3, #18]
    6e2e:	2bff      	cmp	r3, #255	; 0xff
    6e30:	d015      	beq.n	6e5e <_usb_d_dev_trans_done+0x3e>
    6e32:	687b      	ldr	r3, [r7, #4]
    6e34:	7cdb      	ldrb	r3, [r3, #19]
    6e36:	2240      	movs	r2, #64	; 0x40
    6e38:	4013      	ands	r3, r2
    6e3a:	b2db      	uxtb	r3, r3
    6e3c:	2b00      	cmp	r3, #0
    6e3e:	d00e      	beq.n	6e5e <_usb_d_dev_trans_done+0x3e>
		return;
	}
	ept->flags.bits.is_busy = 0;
    6e40:	687b      	ldr	r3, [r7, #4]
    6e42:	7cda      	ldrb	r2, [r3, #19]
    6e44:	2140      	movs	r1, #64	; 0x40
    6e46:	438a      	bics	r2, r1
    6e48:	74da      	strb	r2, [r3, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    6e4a:	4b07      	ldr	r3, [pc, #28]	; (6e68 <_usb_d_dev_trans_done+0x48>)
    6e4c:	691c      	ldr	r4, [r3, #16]
    6e4e:	687b      	ldr	r3, [r7, #4]
    6e50:	7c98      	ldrb	r0, [r3, #18]
    6e52:	687b      	ldr	r3, [r7, #4]
    6e54:	689a      	ldr	r2, [r3, #8]
    6e56:	683b      	ldr	r3, [r7, #0]
    6e58:	0019      	movs	r1, r3
    6e5a:	47a0      	blx	r4
    6e5c:	e000      	b.n	6e60 <_usb_d_dev_trans_done+0x40>
		return;
    6e5e:	46c0      	nop			; (mov r8, r8)
}
    6e60:	46bd      	mov	sp, r7
    6e62:	b003      	add	sp, #12
    6e64:	bd90      	pop	{r4, r7, pc}
    6e66:	46c0      	nop			; (mov r8, r8)
    6e68:	20000ef0 	.word	0x20000ef0

00006e6c <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    6e6c:	b580      	push	{r7, lr}
    6e6e:	b086      	sub	sp, #24
    6e70:	af00      	add	r7, sp, #0
    6e72:	60f8      	str	r0, [r7, #12]
    6e74:	607a      	str	r2, [r7, #4]
    6e76:	230b      	movs	r3, #11
    6e78:	18fb      	adds	r3, r7, r3
    6e7a:	1c0a      	adds	r2, r1, #0
    6e7c:	701a      	strb	r2, [r3, #0]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    6e7e:	68fb      	ldr	r3, [r7, #12]
    6e80:	7c9a      	ldrb	r2, [r3, #18]
    6e82:	2317      	movs	r3, #23
    6e84:	18fb      	adds	r3, r7, r3
    6e86:	210f      	movs	r1, #15
    6e88:	400a      	ands	r2, r1
    6e8a:	701a      	strb	r2, [r3, #0]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    6e8c:	2314      	movs	r3, #20
    6e8e:	18fb      	adds	r3, r7, r3
    6e90:	4a25      	ldr	r2, [pc, #148]	; (6f28 <_usb_d_dev_trans_stop+0xbc>)
    6e92:	8812      	ldrh	r2, [r2, #0]
    6e94:	801a      	strh	r2, [r3, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    6e96:	68fb      	ldr	r3, [r7, #12]
    6e98:	7c9b      	ldrb	r3, [r3, #18]
    6e9a:	2bff      	cmp	r3, #255	; 0xff
    6e9c:	d03f      	beq.n	6f1e <_usb_d_dev_trans_stop+0xb2>
    6e9e:	68fb      	ldr	r3, [r7, #12]
    6ea0:	7cdb      	ldrb	r3, [r3, #19]
    6ea2:	2240      	movs	r2, #64	; 0x40
    6ea4:	4013      	ands	r3, r2
    6ea6:	b2db      	uxtb	r3, r3
    6ea8:	2b00      	cmp	r3, #0
    6eaa:	d038      	beq.n	6f1e <_usb_d_dev_trans_stop+0xb2>
		return;
	}
	/* Stop transfer */
	if (dir) {
    6eac:	230b      	movs	r3, #11
    6eae:	18fb      	adds	r3, r7, r3
    6eb0:	781b      	ldrb	r3, [r3, #0]
    6eb2:	2b00      	cmp	r3, #0
    6eb4:	d008      	beq.n	6ec8 <_usb_d_dev_trans_stop+0x5c>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    6eb6:	2317      	movs	r3, #23
    6eb8:	18fb      	adds	r3, r7, r3
    6eba:	781b      	ldrb	r3, [r3, #0]
    6ebc:	2200      	movs	r2, #0
    6ebe:	2101      	movs	r1, #1
    6ec0:	0018      	movs	r0, r3
    6ec2:	4b1a      	ldr	r3, [pc, #104]	; (6f2c <_usb_d_dev_trans_stop+0xc0>)
    6ec4:	4798      	blx	r3
    6ec6:	e007      	b.n	6ed8 <_usb_d_dev_trans_stop+0x6c>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    6ec8:	2317      	movs	r3, #23
    6eca:	18fb      	adds	r3, r7, r3
    6ecc:	781b      	ldrb	r3, [r3, #0]
    6ece:	2200      	movs	r2, #0
    6ed0:	2100      	movs	r1, #0
    6ed2:	0018      	movs	r0, r3
    6ed4:	4b16      	ldr	r3, [pc, #88]	; (6f30 <_usb_d_dev_trans_stop+0xc4>)
    6ed6:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    6ed8:	230b      	movs	r3, #11
    6eda:	18fb      	adds	r3, r7, r3
    6edc:	781b      	ldrb	r3, [r3, #0]
    6ede:	2214      	movs	r2, #20
    6ee0:	18ba      	adds	r2, r7, r2
    6ee2:	5cd3      	ldrb	r3, [r2, r3]
    6ee4:	001a      	movs	r2, r3
    6ee6:	2317      	movs	r3, #23
    6ee8:	18fb      	adds	r3, r7, r3
    6eea:	781b      	ldrb	r3, [r3, #0]
    6eec:	0011      	movs	r1, r2
    6eee:	0018      	movs	r0, r3
    6ef0:	4b10      	ldr	r3, [pc, #64]	; (6f34 <_usb_d_dev_trans_stop+0xc8>)
    6ef2:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    6ef4:	230b      	movs	r3, #11
    6ef6:	18fb      	adds	r3, r7, r3
    6ef8:	781b      	ldrb	r3, [r3, #0]
    6efa:	2214      	movs	r2, #20
    6efc:	18ba      	adds	r2, r7, r2
    6efe:	5cd3      	ldrb	r3, [r2, r3]
    6f00:	001a      	movs	r2, r3
    6f02:	2317      	movs	r3, #23
    6f04:	18fb      	adds	r3, r7, r3
    6f06:	781b      	ldrb	r3, [r3, #0]
    6f08:	0011      	movs	r1, r2
    6f0a:	0018      	movs	r0, r3
    6f0c:	4b0a      	ldr	r3, [pc, #40]	; (6f38 <_usb_d_dev_trans_stop+0xcc>)
    6f0e:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    6f10:	687a      	ldr	r2, [r7, #4]
    6f12:	68fb      	ldr	r3, [r7, #12]
    6f14:	0011      	movs	r1, r2
    6f16:	0018      	movs	r0, r3
    6f18:	4b08      	ldr	r3, [pc, #32]	; (6f3c <_usb_d_dev_trans_stop+0xd0>)
    6f1a:	4798      	blx	r3
    6f1c:	e000      	b.n	6f20 <_usb_d_dev_trans_stop+0xb4>
		return;
    6f1e:	46c0      	nop			; (mov r8, r8)
}
    6f20:	46bd      	mov	sp, r7
    6f22:	b006      	add	sp, #24
    6f24:	bd80      	pop	{r7, pc}
    6f26:	46c0      	nop			; (mov r8, r8)
    6f28:	00012298 	.word	0x00012298
    6f2c:	00005235 	.word	0x00005235
    6f30:	000052a1 	.word	0x000052a1
    6f34:	00004c21 	.word	0x00004c21
    6f38:	00004c81 	.word	0x00004c81
    6f3c:	00006e21 	.word	0x00006e21

00006f40 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    6f40:	b580      	push	{r7, lr}
    6f42:	b086      	sub	sp, #24
    6f44:	af00      	add	r7, sp, #0
    6f46:	0002      	movs	r2, r0
    6f48:	6039      	str	r1, [r7, #0]
    6f4a:	1dfb      	adds	r3, r7, #7
    6f4c:	701a      	strb	r2, [r3, #0]
	uint8_t            epn   = USB_EP_GET_N(ep);
    6f4e:	2317      	movs	r3, #23
    6f50:	18fb      	adds	r3, r7, r3
    6f52:	1dfa      	adds	r2, r7, #7
    6f54:	7812      	ldrb	r2, [r2, #0]
    6f56:	210f      	movs	r1, #15
    6f58:	400a      	ands	r2, r1
    6f5a:	701a      	strb	r2, [r3, #0]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    6f5c:	2317      	movs	r3, #23
    6f5e:	18fb      	adds	r3, r7, r3
    6f60:	781b      	ldrb	r3, [r3, #0]
    6f62:	015a      	lsls	r2, r3, #5
    6f64:	4b25      	ldr	r3, [pc, #148]	; (6ffc <_usb_d_dev_ep_read_req+0xbc>)
    6f66:	18d3      	adds	r3, r2, r3
    6f68:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    6f6a:	693b      	ldr	r3, [r7, #16]
    6f6c:	681b      	ldr	r3, [r3, #0]
    6f6e:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    6f70:	693b      	ldr	r3, [r7, #16]
    6f72:	685b      	ldr	r3, [r3, #4]
    6f74:	049b      	lsls	r3, r3, #18
    6f76:	0c9b      	lsrs	r3, r3, #18
    6f78:	b29a      	uxth	r2, r3
    6f7a:	230a      	movs	r3, #10
    6f7c:	18fb      	adds	r3, r7, r3
    6f7e:	801a      	strh	r2, [r3, #0]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    6f80:	2317      	movs	r3, #23
    6f82:	18fb      	adds	r3, r7, r3
    6f84:	781b      	ldrb	r3, [r3, #0]
    6f86:	2b07      	cmp	r3, #7
    6f88:	d802      	bhi.n	6f90 <_usb_d_dev_ep_read_req+0x50>
    6f8a:	683b      	ldr	r3, [r7, #0]
    6f8c:	2b00      	cmp	r3, #0
    6f8e:	d102      	bne.n	6f96 <_usb_d_dev_ep_read_req+0x56>
		return -USB_ERR_PARAM;
    6f90:	2312      	movs	r3, #18
    6f92:	425b      	negs	r3, r3
    6f94:	e02d      	b.n	6ff2 <_usb_d_dev_ep_read_req+0xb2>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    6f96:	2317      	movs	r3, #23
    6f98:	18fb      	adds	r3, r7, r3
    6f9a:	781b      	ldrb	r3, [r3, #0]
    6f9c:	0018      	movs	r0, r3
    6f9e:	4b18      	ldr	r3, [pc, #96]	; (7000 <_usb_d_dev_ep_read_req+0xc0>)
    6fa0:	4798      	blx	r3
    6fa2:	0003      	movs	r3, r0
    6fa4:	001a      	movs	r2, r3
    6fa6:	2301      	movs	r3, #1
    6fa8:	4053      	eors	r3, r2
    6faa:	b2db      	uxtb	r3, r3
    6fac:	2b00      	cmp	r3, #0
    6fae:	d002      	beq.n	6fb6 <_usb_d_dev_ep_read_req+0x76>
		return -USB_ERR_FUNC;
    6fb0:	2313      	movs	r3, #19
    6fb2:	425b      	negs	r3, r3
    6fb4:	e01d      	b.n	6ff2 <_usb_d_dev_ep_read_req+0xb2>
	}
	if (!_usbd_ep_is_setup(epn)) {
    6fb6:	2317      	movs	r3, #23
    6fb8:	18fb      	adds	r3, r7, r3
    6fba:	781b      	ldrb	r3, [r3, #0]
    6fbc:	0018      	movs	r0, r3
    6fbe:	4b11      	ldr	r3, [pc, #68]	; (7004 <_usb_d_dev_ep_read_req+0xc4>)
    6fc0:	4798      	blx	r3
    6fc2:	0003      	movs	r3, r0
    6fc4:	001a      	movs	r2, r3
    6fc6:	2301      	movs	r3, #1
    6fc8:	4053      	eors	r3, r2
    6fca:	b2db      	uxtb	r3, r3
    6fcc:	2b00      	cmp	r3, #0
    6fce:	d001      	beq.n	6fd4 <_usb_d_dev_ep_read_req+0x94>
		return ERR_NONE;
    6fd0:	2300      	movs	r3, #0
    6fd2:	e00e      	b.n	6ff2 <_usb_d_dev_ep_read_req+0xb2>
	}
	memcpy(req_buf, (void *)addr, 8);
    6fd4:	68f9      	ldr	r1, [r7, #12]
    6fd6:	683b      	ldr	r3, [r7, #0]
    6fd8:	2208      	movs	r2, #8
    6fda:	0018      	movs	r0, r3
    6fdc:	4b0a      	ldr	r3, [pc, #40]	; (7008 <_usb_d_dev_ep_read_req+0xc8>)
    6fde:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    6fe0:	2317      	movs	r3, #23
    6fe2:	18fb      	adds	r3, r7, r3
    6fe4:	781b      	ldrb	r3, [r3, #0]
    6fe6:	0018      	movs	r0, r3
    6fe8:	4b08      	ldr	r3, [pc, #32]	; (700c <_usb_d_dev_ep_read_req+0xcc>)
    6fea:	4798      	blx	r3

	return bytes;
    6fec:	230a      	movs	r3, #10
    6fee:	18fb      	adds	r3, r7, r3
    6ff0:	881b      	ldrh	r3, [r3, #0]
}
    6ff2:	0018      	movs	r0, r3
    6ff4:	46bd      	mov	sp, r7
    6ff6:	b006      	add	sp, #24
    6ff8:	bd80      	pop	{r7, pc}
    6ffa:	46c0      	nop			; (mov r8, r8)
    6ffc:	20001058 	.word	0x20001058
    7000:	00004cb1 	.word	0x00004cb1
    7004:	00004ea9 	.word	0x00004ea9
    7008:	0000d10d 	.word	0x0000d10d
    700c:	00004edd 	.word	0x00004edd

00007010 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    7010:	b580      	push	{r7, lr}
    7012:	b086      	sub	sp, #24
    7014:	af00      	add	r7, sp, #0
    7016:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    7018:	687b      	ldr	r3, [r7, #4]
    701a:	7a1a      	ldrb	r2, [r3, #8]
    701c:	2316      	movs	r3, #22
    701e:	18fb      	adds	r3, r7, r3
    7020:	210f      	movs	r1, #15
    7022:	400a      	ands	r2, r1
    7024:	701a      	strb	r2, [r3, #0]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    7026:	687b      	ldr	r3, [r7, #4]
    7028:	7a1b      	ldrb	r3, [r3, #8]
    702a:	001a      	movs	r2, r3
    702c:	2380      	movs	r3, #128	; 0x80
    702e:	401a      	ands	r2, r3
    7030:	2315      	movs	r3, #21
    7032:	18fb      	adds	r3, r7, r3
    7034:	1e51      	subs	r1, r2, #1
    7036:	418a      	sbcs	r2, r1
    7038:	701a      	strb	r2, [r3, #0]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    703a:	2315      	movs	r3, #21
    703c:	18fb      	adds	r3, r7, r3
    703e:	781a      	ldrb	r2, [r3, #0]
    7040:	2316      	movs	r3, #22
    7042:	18fb      	adds	r3, r7, r3
    7044:	781b      	ldrb	r3, [r3, #0]
    7046:	0011      	movs	r1, r2
    7048:	0018      	movs	r0, r3
    704a:	4b75      	ldr	r3, [pc, #468]	; (7220 <_usb_d_dev_ep_trans+0x210>)
    704c:	4798      	blx	r3
    704e:	0003      	movs	r3, r0
    7050:	613b      	str	r3, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    7052:	693b      	ldr	r3, [r7, #16]
    7054:	8a1b      	ldrh	r3, [r3, #16]
    7056:	4a73      	ldr	r2, [pc, #460]	; (7224 <_usb_d_dev_ep_trans+0x214>)
    7058:	4293      	cmp	r3, r2
    705a:	d004      	beq.n	7066 <_usb_d_dev_ep_trans+0x56>
    705c:	693b      	ldr	r3, [r7, #16]
    705e:	8a1b      	ldrh	r3, [r3, #16]
    7060:	3b01      	subs	r3, #1
    7062:	b29a      	uxth	r2, r3
    7064:	e000      	b.n	7068 <_usb_d_dev_ep_trans+0x58>
    7066:	4a6f      	ldr	r2, [pc, #444]	; (7224 <_usb_d_dev_ep_trans+0x214>)
    7068:	230e      	movs	r3, #14
    706a:	18fb      	adds	r3, r7, r3
    706c:	801a      	strh	r2, [r3, #0]
	bool     size_n_aligned = (trans->size & size_mask);
    706e:	687b      	ldr	r3, [r7, #4]
    7070:	685b      	ldr	r3, [r3, #4]
    7072:	220e      	movs	r2, #14
    7074:	18ba      	adds	r2, r7, r2
    7076:	8812      	ldrh	r2, [r2, #0]
    7078:	401a      	ands	r2, r3
    707a:	230d      	movs	r3, #13
    707c:	18fb      	adds	r3, r7, r3
    707e:	1e51      	subs	r1, r2, #1
    7080:	418a      	sbcs	r2, r1
    7082:	701a      	strb	r2, [r3, #0]

	bool use_cache = false;
    7084:	2317      	movs	r3, #23
    7086:	18fb      	adds	r3, r7, r3
    7088:	2200      	movs	r2, #0
    708a:	701a      	strb	r2, [r3, #0]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    708c:	2316      	movs	r3, #22
    708e:	18fb      	adds	r3, r7, r3
    7090:	781b      	ldrb	r3, [r3, #0]
    7092:	2b07      	cmp	r3, #7
    7094:	d902      	bls.n	709c <_usb_d_dev_ep_trans+0x8c>
		return -USB_ERR_PARAM;
    7096:	2312      	movs	r3, #18
    7098:	425b      	negs	r3, r3
    709a:	e0bc      	b.n	7216 <_usb_d_dev_ep_trans+0x206>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    709c:	687b      	ldr	r3, [r7, #4]
    709e:	681b      	ldr	r3, [r3, #0]
    70a0:	001a      	movs	r2, r3
    70a2:	4b61      	ldr	r3, [pc, #388]	; (7228 <_usb_d_dev_ep_trans+0x218>)
    70a4:	429a      	cmp	r2, r3
    70a6:	d91c      	bls.n	70e2 <_usb_d_dev_ep_trans+0xd2>
    70a8:	687b      	ldr	r3, [r7, #4]
    70aa:	681b      	ldr	r3, [r3, #0]
    70ac:	001a      	movs	r2, r3
    70ae:	687b      	ldr	r3, [r7, #4]
    70b0:	685b      	ldr	r3, [r3, #4]
    70b2:	18d3      	adds	r3, r2, r3
    70b4:	4a5d      	ldr	r2, [pc, #372]	; (722c <_usb_d_dev_ep_trans+0x21c>)
    70b6:	4293      	cmp	r3, r2
    70b8:	d813      	bhi.n	70e2 <_usb_d_dev_ep_trans+0xd2>
    70ba:	687b      	ldr	r3, [r7, #4]
    70bc:	681b      	ldr	r3, [r3, #0]
    70be:	001a      	movs	r2, r3
    70c0:	2303      	movs	r3, #3
    70c2:	4013      	ands	r3, r2
    70c4:	d10d      	bne.n	70e2 <_usb_d_dev_ep_trans+0xd2>
	    || (!dir && (trans->size < ept->size))) {
    70c6:	2315      	movs	r3, #21
    70c8:	18fb      	adds	r3, r7, r3
    70ca:	781b      	ldrb	r3, [r3, #0]
    70cc:	2201      	movs	r2, #1
    70ce:	4053      	eors	r3, r2
    70d0:	b2db      	uxtb	r3, r3
    70d2:	2b00      	cmp	r3, #0
    70d4:	d010      	beq.n	70f8 <_usb_d_dev_ep_trans+0xe8>
    70d6:	687b      	ldr	r3, [r7, #4]
    70d8:	685b      	ldr	r3, [r3, #4]
    70da:	693a      	ldr	r2, [r7, #16]
    70dc:	8a12      	ldrh	r2, [r2, #16]
    70de:	4293      	cmp	r3, r2
    70e0:	d20a      	bcs.n	70f8 <_usb_d_dev_ep_trans+0xe8>
		if (!ept->cache) {
    70e2:	693b      	ldr	r3, [r7, #16]
    70e4:	68db      	ldr	r3, [r3, #12]
    70e6:	2b00      	cmp	r3, #0
    70e8:	d102      	bne.n	70f0 <_usb_d_dev_ep_trans+0xe0>
			return -USB_ERR_FUNC;
    70ea:	2313      	movs	r3, #19
    70ec:	425b      	negs	r3, r3
    70ee:	e092      	b.n	7216 <_usb_d_dev_ep_trans+0x206>
		}
		/* Use cache all the time. */
		use_cache = true;
    70f0:	2317      	movs	r3, #23
    70f2:	18fb      	adds	r3, r7, r3
    70f4:	2201      	movs	r2, #1
    70f6:	701a      	strb	r2, [r3, #0]
	}
	if (!dir && size_n_aligned) {
    70f8:	2315      	movs	r3, #21
    70fa:	18fb      	adds	r3, r7, r3
    70fc:	781b      	ldrb	r3, [r3, #0]
    70fe:	2201      	movs	r2, #1
    7100:	4053      	eors	r3, r2
    7102:	b2db      	uxtb	r3, r3
    7104:	2b00      	cmp	r3, #0
    7106:	d00b      	beq.n	7120 <_usb_d_dev_ep_trans+0x110>
    7108:	230d      	movs	r3, #13
    710a:	18fb      	adds	r3, r7, r3
    710c:	781b      	ldrb	r3, [r3, #0]
    710e:	2b00      	cmp	r3, #0
    7110:	d006      	beq.n	7120 <_usb_d_dev_ep_trans+0x110>
		if (!ept->cache) {
    7112:	693b      	ldr	r3, [r7, #16]
    7114:	68db      	ldr	r3, [r3, #12]
    7116:	2b00      	cmp	r3, #0
    7118:	d102      	bne.n	7120 <_usb_d_dev_ep_trans+0x110>
			return -USB_ERR_PARAM;
    711a:	2312      	movs	r3, #18
    711c:	425b      	negs	r3, r3
    711e:	e07a      	b.n	7216 <_usb_d_dev_ep_trans+0x206>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    7120:	693b      	ldr	r3, [r7, #16]
    7122:	7cdb      	ldrb	r3, [r3, #19]
    7124:	2208      	movs	r2, #8
    7126:	4013      	ands	r3, r2
    7128:	b2db      	uxtb	r3, r3
    712a:	2b00      	cmp	r3, #0
    712c:	d001      	beq.n	7132 <_usb_d_dev_ep_trans+0x122>
		return USB_HALTED;
    712e:	2302      	movs	r3, #2
    7130:	e071      	b.n	7216 <_usb_d_dev_ep_trans+0x206>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    7132:	2308      	movs	r3, #8
    7134:	18fb      	adds	r3, r7, r3
    7136:	0018      	movs	r0, r3
    7138:	4b3d      	ldr	r3, [pc, #244]	; (7230 <_usb_d_dev_ep_trans+0x220>)
    713a:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    713c:	693b      	ldr	r3, [r7, #16]
    713e:	7cdb      	ldrb	r3, [r3, #19]
    7140:	2240      	movs	r2, #64	; 0x40
    7142:	4013      	ands	r3, r2
    7144:	b2db      	uxtb	r3, r3
    7146:	2b00      	cmp	r3, #0
    7148:	d006      	beq.n	7158 <_usb_d_dev_ep_trans+0x148>
		atomic_leave_critical(&flags);
    714a:	2308      	movs	r3, #8
    714c:	18fb      	adds	r3, r7, r3
    714e:	0018      	movs	r0, r3
    7150:	4b38      	ldr	r3, [pc, #224]	; (7234 <_usb_d_dev_ep_trans+0x224>)
    7152:	4798      	blx	r3
		return USB_BUSY;
    7154:	2301      	movs	r3, #1
    7156:	e05e      	b.n	7216 <_usb_d_dev_ep_trans+0x206>
	}
	ept->flags.bits.is_busy = 1;
    7158:	693b      	ldr	r3, [r7, #16]
    715a:	7cda      	ldrb	r2, [r3, #19]
    715c:	2140      	movs	r1, #64	; 0x40
    715e:	430a      	orrs	r2, r1
    7160:	74da      	strb	r2, [r3, #19]
	atomic_leave_critical(&flags);
    7162:	2308      	movs	r3, #8
    7164:	18fb      	adds	r3, r7, r3
    7166:	0018      	movs	r0, r3
    7168:	4b32      	ldr	r3, [pc, #200]	; (7234 <_usb_d_dev_ep_trans+0x224>)
    716a:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    716c:	687b      	ldr	r3, [r7, #4]
    716e:	681a      	ldr	r2, [r3, #0]
    7170:	693b      	ldr	r3, [r7, #16]
    7172:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    7174:	687b      	ldr	r3, [r7, #4]
    7176:	685a      	ldr	r2, [r3, #4]
    7178:	693b      	ldr	r3, [r7, #16]
    717a:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    717c:	693b      	ldr	r3, [r7, #16]
    717e:	2200      	movs	r2, #0
    7180:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    7182:	693b      	ldr	r3, [r7, #16]
    7184:	2215      	movs	r2, #21
    7186:	18ba      	adds	r2, r7, r2
    7188:	7812      	ldrb	r2, [r2, #0]
    718a:	01d0      	lsls	r0, r2, #7
    718c:	7cda      	ldrb	r2, [r3, #19]
    718e:	217f      	movs	r1, #127	; 0x7f
    7190:	400a      	ands	r2, r1
    7192:	1c11      	adds	r1, r2, #0
    7194:	1c02      	adds	r2, r0, #0
    7196:	430a      	orrs	r2, r1
    7198:	74da      	strb	r2, [r3, #19]
	ept->flags.bits.use_cache = use_cache;
    719a:	693b      	ldr	r3, [r7, #16]
    719c:	2217      	movs	r2, #23
    719e:	18ba      	adds	r2, r7, r2
    71a0:	7812      	ldrb	r2, [r2, #0]
    71a2:	2101      	movs	r1, #1
    71a4:	400a      	ands	r2, r1
    71a6:	0150      	lsls	r0, r2, #5
    71a8:	7cda      	ldrb	r2, [r3, #19]
    71aa:	2120      	movs	r1, #32
    71ac:	438a      	bics	r2, r1
    71ae:	1c11      	adds	r1, r2, #0
    71b0:	1c02      	adds	r2, r0, #0
    71b2:	430a      	orrs	r2, r1
    71b4:	74da      	strb	r2, [r3, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    71b6:	687b      	ldr	r3, [r7, #4]
    71b8:	7a5b      	ldrb	r3, [r3, #9]
    71ba:	2b00      	cmp	r3, #0
    71bc:	d009      	beq.n	71d2 <_usb_d_dev_ep_trans+0x1c2>
    71be:	230d      	movs	r3, #13
    71c0:	18fb      	adds	r3, r7, r3
    71c2:	781b      	ldrb	r3, [r3, #0]
    71c4:	2201      	movs	r2, #1
    71c6:	4053      	eors	r3, r2
    71c8:	b2db      	uxtb	r3, r3
    71ca:	2b00      	cmp	r3, #0
    71cc:	d001      	beq.n	71d2 <_usb_d_dev_ep_trans+0x1c2>
    71ce:	2301      	movs	r3, #1
    71d0:	e000      	b.n	71d4 <_usb_d_dev_ep_trans+0x1c4>
    71d2:	2300      	movs	r3, #0
    71d4:	b2db      	uxtb	r3, r3
    71d6:	1c1a      	adds	r2, r3, #0
    71d8:	2301      	movs	r3, #1
    71da:	4013      	ands	r3, r2
    71dc:	b2da      	uxtb	r2, r3
    71de:	693b      	ldr	r3, [r7, #16]
    71e0:	2101      	movs	r1, #1
    71e2:	400a      	ands	r2, r1
    71e4:	0110      	lsls	r0, r2, #4
    71e6:	7cda      	ldrb	r2, [r3, #19]
    71e8:	2110      	movs	r1, #16
    71ea:	438a      	bics	r2, r1
    71ec:	1c11      	adds	r1, r2, #0
    71ee:	1c02      	adds	r2, r0, #0
    71f0:	430a      	orrs	r2, r1
    71f2:	74da      	strb	r2, [r3, #19]

	if (dir) {
    71f4:	2315      	movs	r3, #21
    71f6:	18fb      	adds	r3, r7, r3
    71f8:	781b      	ldrb	r3, [r3, #0]
    71fa:	2b00      	cmp	r3, #0
    71fc:	d005      	beq.n	720a <_usb_d_dev_ep_trans+0x1fa>
		_usb_d_dev_in_next(ept, false);
    71fe:	693b      	ldr	r3, [r7, #16]
    7200:	2100      	movs	r1, #0
    7202:	0018      	movs	r0, r3
    7204:	4b0c      	ldr	r3, [pc, #48]	; (7238 <_usb_d_dev_ep_trans+0x228>)
    7206:	4798      	blx	r3
    7208:	e004      	b.n	7214 <_usb_d_dev_ep_trans+0x204>
	} else {
		_usb_d_dev_out_next(ept, false);
    720a:	693b      	ldr	r3, [r7, #16]
    720c:	2100      	movs	r1, #0
    720e:	0018      	movs	r0, r3
    7210:	4b0a      	ldr	r3, [pc, #40]	; (723c <_usb_d_dev_ep_trans+0x22c>)
    7212:	4798      	blx	r3
	}

	return ERR_NONE;
    7214:	2300      	movs	r3, #0
}
    7216:	0018      	movs	r0, r3
    7218:	46bd      	mov	sp, r7
    721a:	b006      	add	sp, #24
    721c:	bd80      	pop	{r7, pc}
    721e:	46c0      	nop			; (mov r8, r8)
    7220:	00005381 	.word	0x00005381
    7224:	000003ff 	.word	0x000003ff
    7228:	1fffffff 	.word	0x1fffffff
    722c:	20007fff 	.word	0x20007fff
    7230:	00001a4d 	.word	0x00001a4d
    7234:	00001a6f 	.word	0x00001a6f
    7238:	000056bd 	.word	0x000056bd
    723c:	0000595d 	.word	0x0000595d

00007240 <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    7240:	b580      	push	{r7, lr}
    7242:	b084      	sub	sp, #16
    7244:	af00      	add	r7, sp, #0
    7246:	0002      	movs	r2, r0
    7248:	6039      	str	r1, [r7, #0]
    724a:	1dfb      	adds	r3, r7, #7
    724c:	701a      	strb	r2, [r3, #0]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    724e:	683b      	ldr	r3, [r7, #0]
    7250:	2b00      	cmp	r3, #0
    7252:	d001      	beq.n	7258 <_usb_d_dev_register_callback+0x18>
    7254:	683b      	ldr	r3, [r7, #0]
    7256:	e000      	b.n	725a <_usb_d_dev_register_callback+0x1a>
    7258:	4b0a      	ldr	r3, [pc, #40]	; (7284 <_usb_d_dev_register_callback+0x44>)
    725a:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    725c:	1dfb      	adds	r3, r7, #7
    725e:	781b      	ldrb	r3, [r3, #0]
    7260:	2b01      	cmp	r3, #1
    7262:	d103      	bne.n	726c <_usb_d_dev_register_callback+0x2c>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    7264:	4b08      	ldr	r3, [pc, #32]	; (7288 <_usb_d_dev_register_callback+0x48>)
    7266:	68fa      	ldr	r2, [r7, #12]
    7268:	605a      	str	r2, [r3, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    726a:	e006      	b.n	727a <_usb_d_dev_register_callback+0x3a>
	} else if (type == USB_D_CB_SOF) {
    726c:	1dfb      	adds	r3, r7, #7
    726e:	781b      	ldrb	r3, [r3, #0]
    7270:	2b00      	cmp	r3, #0
    7272:	d102      	bne.n	727a <_usb_d_dev_register_callback+0x3a>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    7274:	4b04      	ldr	r3, [pc, #16]	; (7288 <_usb_d_dev_register_callback+0x48>)
    7276:	68fa      	ldr	r2, [r7, #12]
    7278:	601a      	str	r2, [r3, #0]
}
    727a:	46c0      	nop			; (mov r8, r8)
    727c:	46bd      	mov	sp, r7
    727e:	b004      	add	sp, #16
    7280:	bd80      	pop	{r7, pc}
    7282:	46c0      	nop			; (mov r8, r8)
    7284:	00004ac1 	.word	0x00004ac1
    7288:	20000ef0 	.word	0x20000ef0

0000728c <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    728c:	b580      	push	{r7, lr}
    728e:	b084      	sub	sp, #16
    7290:	af00      	add	r7, sp, #0
    7292:	0002      	movs	r2, r0
    7294:	6039      	str	r1, [r7, #0]
    7296:	1dfb      	adds	r3, r7, #7
    7298:	701a      	strb	r2, [r3, #0]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    729a:	683b      	ldr	r3, [r7, #0]
    729c:	2b00      	cmp	r3, #0
    729e:	d001      	beq.n	72a4 <_usb_d_dev_register_ep_callback+0x18>
    72a0:	683b      	ldr	r3, [r7, #0]
    72a2:	e000      	b.n	72a6 <_usb_d_dev_register_ep_callback+0x1a>
    72a4:	4b0e      	ldr	r3, [pc, #56]	; (72e0 <_usb_d_dev_register_ep_callback+0x54>)
    72a6:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    72a8:	1dfb      	adds	r3, r7, #7
    72aa:	781b      	ldrb	r3, [r3, #0]
    72ac:	2b00      	cmp	r3, #0
    72ae:	d103      	bne.n	72b8 <_usb_d_dev_register_ep_callback+0x2c>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    72b0:	4b0c      	ldr	r3, [pc, #48]	; (72e4 <_usb_d_dev_register_ep_callback+0x58>)
    72b2:	68fa      	ldr	r2, [r7, #12]
    72b4:	609a      	str	r2, [r3, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    72b6:	e00e      	b.n	72d6 <_usb_d_dev_register_ep_callback+0x4a>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    72b8:	1dfb      	adds	r3, r7, #7
    72ba:	781b      	ldrb	r3, [r3, #0]
    72bc:	2b01      	cmp	r3, #1
    72be:	d103      	bne.n	72c8 <_usb_d_dev_register_ep_callback+0x3c>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    72c0:	4b08      	ldr	r3, [pc, #32]	; (72e4 <_usb_d_dev_register_ep_callback+0x58>)
    72c2:	68fa      	ldr	r2, [r7, #12]
    72c4:	60da      	str	r2, [r3, #12]
}
    72c6:	e006      	b.n	72d6 <_usb_d_dev_register_ep_callback+0x4a>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    72c8:	1dfb      	adds	r3, r7, #7
    72ca:	781b      	ldrb	r3, [r3, #0]
    72cc:	2b02      	cmp	r3, #2
    72ce:	d102      	bne.n	72d6 <_usb_d_dev_register_ep_callback+0x4a>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    72d0:	4b04      	ldr	r3, [pc, #16]	; (72e4 <_usb_d_dev_register_ep_callback+0x58>)
    72d2:	68fa      	ldr	r2, [r7, #12]
    72d4:	611a      	str	r2, [r3, #16]
}
    72d6:	46c0      	nop			; (mov r8, r8)
    72d8:	46bd      	mov	sp, r7
    72da:	b004      	add	sp, #16
    72dc:	bd80      	pop	{r7, pc}
    72de:	46c0      	nop			; (mov r8, r8)
    72e0:	00004ac1 	.word	0x00004ac1
    72e4:	20000ef0 	.word	0x20000ef0

000072e8 <USB_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_Handler(void)
{
    72e8:	b580      	push	{r7, lr}
    72ea:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    72ec:	4b02      	ldr	r3, [pc, #8]	; (72f8 <USB_Handler+0x10>)
    72ee:	4798      	blx	r3
}
    72f0:	46c0      	nop			; (mov r8, r8)
    72f2:	46bd      	mov	sp, r7
    72f4:	bd80      	pop	{r7, pc}
    72f6:	46c0      	nop			; (mov r8, r8)
    72f8:	000062e9 	.word	0x000062e9

000072fc <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    72fc:	b580      	push	{r7, lr}
    72fe:	af00      	add	r7, sp, #0

	usart_sync_enable(&TARGET_IO);
    7300:	4b05      	ldr	r3, [pc, #20]	; (7318 <stdio_redirect_init+0x1c>)
    7302:	0018      	movs	r0, r3
    7304:	4b05      	ldr	r3, [pc, #20]	; (731c <stdio_redirect_init+0x20>)
    7306:	4798      	blx	r3
	stdio_io_init(&TARGET_IO.io);
    7308:	4b03      	ldr	r3, [pc, #12]	; (7318 <stdio_redirect_init+0x1c>)
    730a:	0018      	movs	r0, r3
    730c:	4b04      	ldr	r3, [pc, #16]	; (7320 <stdio_redirect_init+0x24>)
    730e:	4798      	blx	r3
}
    7310:	46c0      	nop			; (mov r8, r8)
    7312:	46bd      	mov	sp, r7
    7314:	bd80      	pop	{r7, pc}
    7316:	46c0      	nop			; (mov r8, r8)
    7318:	20001270 	.word	0x20001270
    731c:	00001e59 	.word	0x00001e59
    7320:	00007375 	.word	0x00007375

00007324 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    7324:	b580      	push	{r7, lr}
    7326:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    7328:	4b07      	ldr	r3, [pc, #28]	; (7348 <cdc_device_acm_init+0x24>)
    732a:	0018      	movs	r0, r3
    732c:	4b07      	ldr	r3, [pc, #28]	; (734c <cdc_device_acm_init+0x28>)
    732e:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    7330:	4b07      	ldr	r3, [pc, #28]	; (7350 <cdc_device_acm_init+0x2c>)
    7332:	4798      	blx	r3

	usbdc_start(single_desc);
    7334:	4b07      	ldr	r3, [pc, #28]	; (7354 <cdc_device_acm_init+0x30>)
    7336:	0018      	movs	r0, r3
    7338:	4b07      	ldr	r3, [pc, #28]	; (7358 <cdc_device_acm_init+0x34>)
    733a:	4798      	blx	r3
	usbdc_attach();
    733c:	4b07      	ldr	r3, [pc, #28]	; (735c <cdc_device_acm_init+0x38>)
    733e:	4798      	blx	r3
}
    7340:	46c0      	nop			; (mov r8, r8)
    7342:	46bd      	mov	sp, r7
    7344:	bd80      	pop	{r7, pc}
    7346:	46c0      	nop			; (mov r8, r8)
    7348:	20001198 	.word	0x20001198
    734c:	00008745 	.word	0x00008745
    7350:	0000792d 	.word	0x0000792d
    7354:	20000070 	.word	0x20000070
    7358:	000087e9 	.word	0x000087e9
    735c:	00008839 	.word	0x00008839

00007360 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    7360:	b580      	push	{r7, lr}
    7362:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    7364:	4b02      	ldr	r3, [pc, #8]	; (7370 <usb_init+0x10>)
    7366:	4798      	blx	r3
}
    7368:	46c0      	nop			; (mov r8, r8)
    736a:	46bd      	mov	sp, r7
    736c:	bd80      	pop	{r7, pc}
    736e:	46c0      	nop			; (mov r8, r8)
    7370:	00007325 	.word	0x00007325

00007374 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    7374:	b580      	push	{r7, lr}
    7376:	b082      	sub	sp, #8
    7378:	af00      	add	r7, sp, #0
    737a:	6078      	str	r0, [r7, #4]
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    737c:	4b0a      	ldr	r3, [pc, #40]	; (73a8 <stdio_io_init+0x34>)
    737e:	681b      	ldr	r3, [r3, #0]
    7380:	689b      	ldr	r3, [r3, #8]
    7382:	2100      	movs	r1, #0
    7384:	0018      	movs	r0, r3
    7386:	4b09      	ldr	r3, [pc, #36]	; (73ac <stdio_io_init+0x38>)
    7388:	4798      	blx	r3
	setbuf(stdin, NULL);
    738a:	4b07      	ldr	r3, [pc, #28]	; (73a8 <stdio_io_init+0x34>)
    738c:	681b      	ldr	r3, [r3, #0]
    738e:	685b      	ldr	r3, [r3, #4]
    7390:	2100      	movs	r1, #0
    7392:	0018      	movs	r0, r3
    7394:	4b05      	ldr	r3, [pc, #20]	; (73ac <stdio_io_init+0x38>)
    7396:	4798      	blx	r3
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    7398:	4b05      	ldr	r3, [pc, #20]	; (73b0 <stdio_io_init+0x3c>)
    739a:	687a      	ldr	r2, [r7, #4]
    739c:	601a      	str	r2, [r3, #0]
}
    739e:	46c0      	nop			; (mov r8, r8)
    73a0:	46bd      	mov	sp, r7
    73a2:	b002      	add	sp, #8
    73a4:	bd80      	pop	{r7, pc}
    73a6:	46c0      	nop			; (mov r8, r8)
    73a8:	20000084 	.word	0x20000084
    73ac:	0000d2fd 	.word	0x0000d2fd
    73b0:	200011d8 	.word	0x200011d8

000073b4 <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    73b4:	b580      	push	{r7, lr}
    73b6:	b082      	sub	sp, #8
    73b8:	af00      	add	r7, sp, #0
    73ba:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    73bc:	687b      	ldr	r3, [r7, #4]
    73be:	781b      	ldrb	r3, [r3, #0]
    73c0:	b29a      	uxth	r2, r3
    73c2:	687b      	ldr	r3, [r7, #4]
    73c4:	3301      	adds	r3, #1
    73c6:	781b      	ldrb	r3, [r3, #0]
    73c8:	b29b      	uxth	r3, r3
    73ca:	021b      	lsls	r3, r3, #8
    73cc:	b29b      	uxth	r3, r3
    73ce:	18d3      	adds	r3, r2, r3
    73d0:	b29b      	uxth	r3, r3
}
    73d2:	0018      	movs	r0, r3
    73d4:	46bd      	mov	sp, r7
    73d6:	b002      	add	sp, #8
    73d8:	bd80      	pop	{r7, pc}

000073da <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    73da:	b580      	push	{r7, lr}
    73dc:	b082      	sub	sp, #8
    73de:	af00      	add	r7, sp, #0
    73e0:	6078      	str	r0, [r7, #4]
	return desc[0];
    73e2:	687b      	ldr	r3, [r7, #4]
    73e4:	781b      	ldrb	r3, [r3, #0]
}
    73e6:	0018      	movs	r0, r3
    73e8:	46bd      	mov	sp, r7
    73ea:	b002      	add	sp, #8
    73ec:	bd80      	pop	{r7, pc}
	...

000073f0 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    73f0:	b580      	push	{r7, lr}
    73f2:	b082      	sub	sp, #8
    73f4:	af00      	add	r7, sp, #0
    73f6:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    73f8:	687b      	ldr	r3, [r7, #4]
    73fa:	0018      	movs	r0, r3
    73fc:	4b04      	ldr	r3, [pc, #16]	; (7410 <usb_desc_next+0x20>)
    73fe:	4798      	blx	r3
    7400:	0003      	movs	r3, r0
    7402:	001a      	movs	r2, r3
    7404:	687b      	ldr	r3, [r7, #4]
    7406:	189b      	adds	r3, r3, r2
}
    7408:	0018      	movs	r0, r3
    740a:	46bd      	mov	sp, r7
    740c:	b002      	add	sp, #8
    740e:	bd80      	pop	{r7, pc}
    7410:	000073db 	.word	0x000073db

00007414 <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    7414:	b580      	push	{r7, lr}
    7416:	b08c      	sub	sp, #48	; 0x30
    7418:	af00      	add	r7, sp, #0
    741a:	6078      	str	r0, [r7, #4]
    741c:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    741e:	687b      	ldr	r3, [r7, #4]
    7420:	689b      	ldr	r3, [r3, #8]
    7422:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    7424:	683b      	ldr	r3, [r7, #0]
    7426:	681b      	ldr	r3, [r3, #0]
    7428:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    742a:	2327      	movs	r3, #39	; 0x27
    742c:	18fb      	adds	r3, r7, r3
    742e:	2200      	movs	r2, #0
    7430:	701a      	strb	r2, [r3, #0]
    7432:	e0b7      	b.n	75a4 <cdcdf_acm_enable+0x190>
		if (NULL == ifc) {
    7434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7436:	2b00      	cmp	r3, #0
    7438:	d102      	bne.n	7440 <cdcdf_acm_enable+0x2c>
			return ERR_NOT_FOUND;
    743a:	230a      	movs	r3, #10
    743c:	425b      	negs	r3, r3
    743e:	e0bb      	b.n	75b8 <cdcdf_acm_enable+0x1a4>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    7440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7442:	789a      	ldrb	r2, [r3, #2]
    7444:	230c      	movs	r3, #12
    7446:	18fb      	adds	r3, r7, r3
    7448:	709a      	strb	r2, [r3, #2]
		ifc_desc.bInterfaceClass  = ifc[5];
    744a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    744c:	795a      	ldrb	r2, [r3, #5]
    744e:	230c      	movs	r3, #12
    7450:	18fb      	adds	r3, r7, r3
    7452:	715a      	strb	r2, [r3, #5]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    7454:	230c      	movs	r3, #12
    7456:	18fb      	adds	r3, r7, r3
    7458:	795b      	ldrb	r3, [r3, #5]
    745a:	2b02      	cmp	r3, #2
    745c:	d004      	beq.n	7468 <cdcdf_acm_enable+0x54>
    745e:	230c      	movs	r3, #12
    7460:	18fb      	adds	r3, r7, r3
    7462:	795b      	ldrb	r3, [r3, #5]
    7464:	2b0a      	cmp	r3, #10
    7466:	d129      	bne.n	74bc <cdcdf_acm_enable+0xa8>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    7468:	2327      	movs	r3, #39	; 0x27
    746a:	18fb      	adds	r3, r7, r3
    746c:	781b      	ldrb	r3, [r3, #0]
    746e:	6a3a      	ldr	r2, [r7, #32]
    7470:	5cd2      	ldrb	r2, [r2, r3]
    7472:	230c      	movs	r3, #12
    7474:	18fb      	adds	r3, r7, r3
    7476:	789b      	ldrb	r3, [r3, #2]
    7478:	429a      	cmp	r2, r3
    747a:	d102      	bne.n	7482 <cdcdf_acm_enable+0x6e>
				return ERR_ALREADY_INITIALIZED;
    747c:	2312      	movs	r3, #18
    747e:	425b      	negs	r3, r3
    7480:	e09a      	b.n	75b8 <cdcdf_acm_enable+0x1a4>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    7482:	2327      	movs	r3, #39	; 0x27
    7484:	18fb      	adds	r3, r7, r3
    7486:	781b      	ldrb	r3, [r3, #0]
    7488:	6a3a      	ldr	r2, [r7, #32]
    748a:	5cd3      	ldrb	r3, [r2, r3]
    748c:	2bff      	cmp	r3, #255	; 0xff
    748e:	d002      	beq.n	7496 <cdcdf_acm_enable+0x82>
				return ERR_NO_RESOURCE;
    7490:	231c      	movs	r3, #28
    7492:	425b      	negs	r3, r3
    7494:	e090      	b.n	75b8 <cdcdf_acm_enable+0x1a4>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    7496:	2327      	movs	r3, #39	; 0x27
    7498:	18fb      	adds	r3, r7, r3
    749a:	781b      	ldrb	r3, [r3, #0]
    749c:	220c      	movs	r2, #12
    749e:	18ba      	adds	r2, r7, r2
    74a0:	7891      	ldrb	r1, [r2, #2]
    74a2:	6a3a      	ldr	r2, [r7, #32]
    74a4:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    74a6:	46c0      	nop			; (mov r8, r8)
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    74a8:	683b      	ldr	r3, [r7, #0]
    74aa:	6859      	ldr	r1, [r3, #4]
    74ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    74ae:	2205      	movs	r2, #5
    74b0:	0018      	movs	r0, r3
    74b2:	4b43      	ldr	r3, [pc, #268]	; (75c0 <cdcdf_acm_enable+0x1ac>)
    74b4:	4798      	blx	r3
    74b6:	0003      	movs	r3, r0
    74b8:	62bb      	str	r3, [r7, #40]	; 0x28
		while (NULL != ep) {
    74ba:	e05c      	b.n	7576 <cdcdf_acm_enable+0x162>
			return ERR_NOT_FOUND;
    74bc:	230a      	movs	r3, #10
    74be:	425b      	negs	r3, r3
    74c0:	e07a      	b.n	75b8 <cdcdf_acm_enable+0x1a4>
			ep_desc.bEndpointAddress = ep[2];
    74c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    74c4:	789a      	ldrb	r2, [r3, #2]
    74c6:	2318      	movs	r3, #24
    74c8:	18fb      	adds	r3, r7, r3
    74ca:	709a      	strb	r2, [r3, #2]
			ep_desc.bmAttributes     = ep[3];
    74cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    74ce:	78da      	ldrb	r2, [r3, #3]
    74d0:	2318      	movs	r3, #24
    74d2:	18fb      	adds	r3, r7, r3
    74d4:	70da      	strb	r2, [r3, #3]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    74d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    74d8:	3304      	adds	r3, #4
    74da:	0018      	movs	r0, r3
    74dc:	4b39      	ldr	r3, [pc, #228]	; (75c4 <cdcdf_acm_enable+0x1b0>)
    74de:	4798      	blx	r3
    74e0:	0003      	movs	r3, r0
    74e2:	001a      	movs	r2, r3
    74e4:	2318      	movs	r3, #24
    74e6:	18fb      	adds	r3, r7, r3
    74e8:	809a      	strh	r2, [r3, #4]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    74ea:	2318      	movs	r3, #24
    74ec:	18fb      	adds	r3, r7, r3
    74ee:	7898      	ldrb	r0, [r3, #2]
    74f0:	2318      	movs	r3, #24
    74f2:	18fb      	adds	r3, r7, r3
    74f4:	78d9      	ldrb	r1, [r3, #3]
    74f6:	2318      	movs	r3, #24
    74f8:	18fb      	adds	r3, r7, r3
    74fa:	889b      	ldrh	r3, [r3, #4]
    74fc:	001a      	movs	r2, r3
    74fe:	4b32      	ldr	r3, [pc, #200]	; (75c8 <cdcdf_acm_enable+0x1b4>)
    7500:	4798      	blx	r3
    7502:	1e03      	subs	r3, r0, #0
    7504:	d002      	beq.n	750c <cdcdf_acm_enable+0xf8>
				return ERR_NOT_INITIALIZED;
    7506:	2314      	movs	r3, #20
    7508:	425b      	negs	r3, r3
    750a:	e055      	b.n	75b8 <cdcdf_acm_enable+0x1a4>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    750c:	2318      	movs	r3, #24
    750e:	18fb      	adds	r3, r7, r3
    7510:	789b      	ldrb	r3, [r3, #2]
    7512:	b25b      	sxtb	r3, r3
    7514:	2b00      	cmp	r3, #0
    7516:	da13      	bge.n	7540 <cdcdf_acm_enable+0x12c>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    7518:	2327      	movs	r3, #39	; 0x27
    751a:	18fb      	adds	r3, r7, r3
    751c:	781b      	ldrb	r3, [r3, #0]
    751e:	2218      	movs	r2, #24
    7520:	18ba      	adds	r2, r7, r2
    7522:	7891      	ldrb	r1, [r2, #2]
    7524:	6a3a      	ldr	r2, [r7, #32]
    7526:	18d3      	adds	r3, r2, r3
    7528:	1c0a      	adds	r2, r1, #0
    752a:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    752c:	2327      	movs	r3, #39	; 0x27
    752e:	18fb      	adds	r3, r7, r3
    7530:	781b      	ldrb	r3, [r3, #0]
    7532:	6a3a      	ldr	r2, [r7, #32]
    7534:	18d3      	adds	r3, r2, r3
    7536:	789b      	ldrb	r3, [r3, #2]
    7538:	0018      	movs	r0, r3
    753a:	4b24      	ldr	r3, [pc, #144]	; (75cc <cdcdf_acm_enable+0x1b8>)
    753c:	4798      	blx	r3
    753e:	e009      	b.n	7554 <cdcdf_acm_enable+0x140>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    7540:	2318      	movs	r3, #24
    7542:	18fb      	adds	r3, r7, r3
    7544:	789a      	ldrb	r2, [r3, #2]
    7546:	6a3b      	ldr	r3, [r7, #32]
    7548:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    754a:	6a3b      	ldr	r3, [r7, #32]
    754c:	791b      	ldrb	r3, [r3, #4]
    754e:	0018      	movs	r0, r3
    7550:	4b1e      	ldr	r3, [pc, #120]	; (75cc <cdcdf_acm_enable+0x1b8>)
    7552:	4798      	blx	r3
			}
			desc->sod = ep;
    7554:	683b      	ldr	r3, [r7, #0]
    7556:	6aba      	ldr	r2, [r7, #40]	; 0x28
    7558:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    755a:	683b      	ldr	r3, [r7, #0]
    755c:	681b      	ldr	r3, [r3, #0]
    755e:	0018      	movs	r0, r3
    7560:	4b1b      	ldr	r3, [pc, #108]	; (75d0 <cdcdf_acm_enable+0x1bc>)
    7562:	4798      	blx	r3
    7564:	0002      	movs	r2, r0
    7566:	683b      	ldr	r3, [r7, #0]
    7568:	685b      	ldr	r3, [r3, #4]
    756a:	0019      	movs	r1, r3
    756c:	0010      	movs	r0, r2
    756e:	4b19      	ldr	r3, [pc, #100]	; (75d4 <cdcdf_acm_enable+0x1c0>)
    7570:	4798      	blx	r3
    7572:	0003      	movs	r3, r0
    7574:	62bb      	str	r3, [r7, #40]	; 0x28
		while (NULL != ep) {
    7576:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7578:	2b00      	cmp	r3, #0
    757a:	d1a2      	bne.n	74c2 <cdcdf_acm_enable+0xae>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    757c:	683b      	ldr	r3, [r7, #0]
    757e:	681b      	ldr	r3, [r3, #0]
    7580:	0018      	movs	r0, r3
    7582:	4b13      	ldr	r3, [pc, #76]	; (75d0 <cdcdf_acm_enable+0x1bc>)
    7584:	4798      	blx	r3
    7586:	683b      	ldr	r3, [r7, #0]
    7588:	685b      	ldr	r3, [r3, #4]
    758a:	2204      	movs	r2, #4
    758c:	0019      	movs	r1, r3
    758e:	4b0c      	ldr	r3, [pc, #48]	; (75c0 <cdcdf_acm_enable+0x1ac>)
    7590:	4798      	blx	r3
    7592:	0003      	movs	r3, r0
    7594:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    7596:	2327      	movs	r3, #39	; 0x27
    7598:	18fb      	adds	r3, r7, r3
    759a:	781a      	ldrb	r2, [r3, #0]
    759c:	2327      	movs	r3, #39	; 0x27
    759e:	18fb      	adds	r3, r7, r3
    75a0:	3201      	adds	r2, #1
    75a2:	701a      	strb	r2, [r3, #0]
    75a4:	2327      	movs	r3, #39	; 0x27
    75a6:	18fb      	adds	r3, r7, r3
    75a8:	781b      	ldrb	r3, [r3, #0]
    75aa:	2b01      	cmp	r3, #1
    75ac:	d800      	bhi.n	75b0 <cdcdf_acm_enable+0x19c>
    75ae:	e741      	b.n	7434 <cdcdf_acm_enable+0x20>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    75b0:	4b09      	ldr	r3, [pc, #36]	; (75d8 <cdcdf_acm_enable+0x1c4>)
    75b2:	2201      	movs	r2, #1
    75b4:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    75b6:	2300      	movs	r3, #0
}
    75b8:	0018      	movs	r0, r3
    75ba:	46bd      	mov	sp, r7
    75bc:	b00c      	add	sp, #48	; 0x30
    75be:	bd80      	pop	{r7, pc}
    75c0:	0000893d 	.word	0x0000893d
    75c4:	000073b5 	.word	0x000073b5
    75c8:	000025cd 	.word	0x000025cd
    75cc:	000026f9 	.word	0x000026f9
    75d0:	000073f1 	.word	0x000073f1
    75d4:	000089a1 	.word	0x000089a1
    75d8:	200011e8 	.word	0x200011e8

000075dc <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    75dc:	b580      	push	{r7, lr}
    75de:	b088      	sub	sp, #32
    75e0:	af00      	add	r7, sp, #0
    75e2:	6078      	str	r0, [r7, #4]
    75e4:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    75e6:	687b      	ldr	r3, [r7, #4]
    75e8:	689b      	ldr	r3, [r3, #8]
    75ea:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    75ec:	683b      	ldr	r3, [r7, #0]
    75ee:	2b00      	cmp	r3, #0
    75f0:	d012      	beq.n	7618 <cdcdf_acm_disable+0x3c>
		ifc_desc.bInterfaceClass = desc->sod[5];
    75f2:	683b      	ldr	r3, [r7, #0]
    75f4:	681b      	ldr	r3, [r3, #0]
    75f6:	795a      	ldrb	r2, [r3, #5]
    75f8:	230c      	movs	r3, #12
    75fa:	18fb      	adds	r3, r7, r3
    75fc:	715a      	strb	r2, [r3, #5]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    75fe:	230c      	movs	r3, #12
    7600:	18fb      	adds	r3, r7, r3
    7602:	795b      	ldrb	r3, [r3, #5]
    7604:	2b02      	cmp	r3, #2
    7606:	d007      	beq.n	7618 <cdcdf_acm_disable+0x3c>
    7608:	230c      	movs	r3, #12
    760a:	18fb      	adds	r3, r7, r3
    760c:	795b      	ldrb	r3, [r3, #5]
    760e:	2b0a      	cmp	r3, #10
    7610:	d002      	beq.n	7618 <cdcdf_acm_disable+0x3c>
			return ERR_NOT_FOUND;
    7612:	230a      	movs	r3, #10
    7614:	425b      	negs	r3, r3
    7616:	e047      	b.n	76a8 <cdcdf_acm_disable+0xcc>
		}
	}

	for (i = 0; i < 2; i++) {
    7618:	231f      	movs	r3, #31
    761a:	18fb      	adds	r3, r7, r3
    761c:	2200      	movs	r2, #0
    761e:	701a      	strb	r2, [r3, #0]
    7620:	e02d      	b.n	767e <cdcdf_acm_disable+0xa2>
		if (func_data->func_iface[i] == 0xFF) {
    7622:	231f      	movs	r3, #31
    7624:	18fb      	adds	r3, r7, r3
    7626:	781b      	ldrb	r3, [r3, #0]
    7628:	69ba      	ldr	r2, [r7, #24]
    762a:	5cd3      	ldrb	r3, [r2, r3]
    762c:	2bff      	cmp	r3, #255	; 0xff
    762e:	d01e      	beq.n	766e <cdcdf_acm_disable+0x92>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    7630:	231f      	movs	r3, #31
    7632:	18fb      	adds	r3, r7, r3
    7634:	781b      	ldrb	r3, [r3, #0]
    7636:	69ba      	ldr	r2, [r7, #24]
    7638:	21ff      	movs	r1, #255	; 0xff
    763a:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    763c:	231f      	movs	r3, #31
    763e:	18fb      	adds	r3, r7, r3
    7640:	781b      	ldrb	r3, [r3, #0]
    7642:	69ba      	ldr	r2, [r7, #24]
    7644:	18d3      	adds	r3, r2, r3
    7646:	789b      	ldrb	r3, [r3, #2]
    7648:	2bff      	cmp	r3, #255	; 0xff
    764a:	d011      	beq.n	7670 <cdcdf_acm_disable+0x94>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    764c:	231f      	movs	r3, #31
    764e:	18fb      	adds	r3, r7, r3
    7650:	781b      	ldrb	r3, [r3, #0]
    7652:	69ba      	ldr	r2, [r7, #24]
    7654:	18d3      	adds	r3, r2, r3
    7656:	789b      	ldrb	r3, [r3, #2]
    7658:	0018      	movs	r0, r3
    765a:	4b15      	ldr	r3, [pc, #84]	; (76b0 <cdcdf_acm_disable+0xd4>)
    765c:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    765e:	231f      	movs	r3, #31
    7660:	18fb      	adds	r3, r7, r3
    7662:	781b      	ldrb	r3, [r3, #0]
    7664:	69ba      	ldr	r2, [r7, #24]
    7666:	18d3      	adds	r3, r2, r3
    7668:	22ff      	movs	r2, #255	; 0xff
    766a:	709a      	strb	r2, [r3, #2]
    766c:	e000      	b.n	7670 <cdcdf_acm_disable+0x94>
			continue;
    766e:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < 2; i++) {
    7670:	231f      	movs	r3, #31
    7672:	18fb      	adds	r3, r7, r3
    7674:	781a      	ldrb	r2, [r3, #0]
    7676:	231f      	movs	r3, #31
    7678:	18fb      	adds	r3, r7, r3
    767a:	3201      	adds	r2, #1
    767c:	701a      	strb	r2, [r3, #0]
    767e:	231f      	movs	r3, #31
    7680:	18fb      	adds	r3, r7, r3
    7682:	781b      	ldrb	r3, [r3, #0]
    7684:	2b01      	cmp	r3, #1
    7686:	d9cc      	bls.n	7622 <cdcdf_acm_disable+0x46>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    7688:	69bb      	ldr	r3, [r7, #24]
    768a:	791b      	ldrb	r3, [r3, #4]
    768c:	2bff      	cmp	r3, #255	; 0xff
    768e:	d007      	beq.n	76a0 <cdcdf_acm_disable+0xc4>
		usb_d_ep_deinit(func_data->func_ep_out);
    7690:	69bb      	ldr	r3, [r7, #24]
    7692:	791b      	ldrb	r3, [r3, #4]
    7694:	0018      	movs	r0, r3
    7696:	4b06      	ldr	r3, [pc, #24]	; (76b0 <cdcdf_acm_disable+0xd4>)
    7698:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    769a:	69bb      	ldr	r3, [r7, #24]
    769c:	22ff      	movs	r2, #255	; 0xff
    769e:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    76a0:	4b04      	ldr	r3, [pc, #16]	; (76b4 <cdcdf_acm_disable+0xd8>)
    76a2:	2200      	movs	r2, #0
    76a4:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    76a6:	2300      	movs	r3, #0
}
    76a8:	0018      	movs	r0, r3
    76aa:	46bd      	mov	sp, r7
    76ac:	b008      	add	sp, #32
    76ae:	bd80      	pop	{r7, pc}
    76b0:	00002699 	.word	0x00002699
    76b4:	200011e8 	.word	0x200011e8

000076b8 <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    76b8:	b580      	push	{r7, lr}
    76ba:	b084      	sub	sp, #16
    76bc:	af00      	add	r7, sp, #0
    76be:	60f8      	str	r0, [r7, #12]
    76c0:	607a      	str	r2, [r7, #4]
    76c2:	230b      	movs	r3, #11
    76c4:	18fb      	adds	r3, r7, r3
    76c6:	1c0a      	adds	r2, r1, #0
    76c8:	701a      	strb	r2, [r3, #0]
	switch (ctrl) {
    76ca:	230b      	movs	r3, #11
    76cc:	18fb      	adds	r3, r7, r3
    76ce:	781b      	ldrb	r3, [r3, #0]
    76d0:	2b01      	cmp	r3, #1
    76d2:	d00b      	beq.n	76ec <cdcdf_acm_ctrl+0x34>
    76d4:	2b02      	cmp	r3, #2
    76d6:	d011      	beq.n	76fc <cdcdf_acm_ctrl+0x44>
    76d8:	2b00      	cmp	r3, #0
    76da:	d112      	bne.n	7702 <cdcdf_acm_ctrl+0x4a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    76dc:	687a      	ldr	r2, [r7, #4]
    76de:	68fb      	ldr	r3, [r7, #12]
    76e0:	0011      	movs	r1, r2
    76e2:	0018      	movs	r0, r3
    76e4:	4b0a      	ldr	r3, [pc, #40]	; (7710 <cdcdf_acm_ctrl+0x58>)
    76e6:	4798      	blx	r3
    76e8:	0003      	movs	r3, r0
    76ea:	e00c      	b.n	7706 <cdcdf_acm_ctrl+0x4e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    76ec:	687a      	ldr	r2, [r7, #4]
    76ee:	68fb      	ldr	r3, [r7, #12]
    76f0:	0011      	movs	r1, r2
    76f2:	0018      	movs	r0, r3
    76f4:	4b07      	ldr	r3, [pc, #28]	; (7714 <cdcdf_acm_ctrl+0x5c>)
    76f6:	4798      	blx	r3
    76f8:	0003      	movs	r3, r0
    76fa:	e004      	b.n	7706 <cdcdf_acm_ctrl+0x4e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    76fc:	231b      	movs	r3, #27
    76fe:	425b      	negs	r3, r3
    7700:	e001      	b.n	7706 <cdcdf_acm_ctrl+0x4e>

	default:
		return ERR_INVALID_ARG;
    7702:	230d      	movs	r3, #13
    7704:	425b      	negs	r3, r3
	}
}
    7706:	0018      	movs	r0, r3
    7708:	46bd      	mov	sp, r7
    770a:	b004      	add	sp, #16
    770c:	bd80      	pop	{r7, pc}
    770e:	46c0      	nop			; (mov r8, r8)
    7710:	00007415 	.word	0x00007415
    7714:	000075dd 	.word	0x000075dd

00007718 <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    7718:	b590      	push	{r4, r7, lr}
    771a:	b087      	sub	sp, #28
    771c:	af00      	add	r7, sp, #0
    771e:	6039      	str	r1, [r7, #0]
    7720:	0011      	movs	r1, r2
    7722:	1dfb      	adds	r3, r7, #7
    7724:	1c02      	adds	r2, r0, #0
    7726:	701a      	strb	r2, [r3, #0]
    7728:	1dbb      	adds	r3, r7, #6
    772a:	1c0a      	adds	r2, r1, #0
    772c:	701a      	strb	r2, [r3, #0]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    772e:	2316      	movs	r3, #22
    7730:	18fa      	adds	r2, r7, r3
    7732:	683b      	ldr	r3, [r7, #0]
    7734:	7999      	ldrb	r1, [r3, #6]
    7736:	79db      	ldrb	r3, [r3, #7]
    7738:	021b      	lsls	r3, r3, #8
    773a:	430b      	orrs	r3, r1
    773c:	8013      	strh	r3, [r2, #0]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    773e:	4b2f      	ldr	r3, [pc, #188]	; (77fc <cdcdf_acm_set_req+0xe4>)
    7740:	4798      	blx	r3
    7742:	0003      	movs	r3, r0
    7744:	613b      	str	r3, [r7, #16]

	switch (req->bRequest) {
    7746:	683b      	ldr	r3, [r7, #0]
    7748:	785b      	ldrb	r3, [r3, #1]
    774a:	2b20      	cmp	r3, #32
    774c:	d002      	beq.n	7754 <cdcdf_acm_set_req+0x3c>
    774e:	2b22      	cmp	r3, #34	; 0x22
    7750:	d037      	beq.n	77c2 <cdcdf_acm_set_req+0xaa>
    7752:	e04c      	b.n	77ee <cdcdf_acm_set_req+0xd6>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    7754:	2316      	movs	r3, #22
    7756:	18fb      	adds	r3, r7, r3
    7758:	881b      	ldrh	r3, [r3, #0]
    775a:	2b07      	cmp	r3, #7
    775c:	d002      	beq.n	7764 <cdcdf_acm_set_req+0x4c>
			return ERR_INVALID_DATA;
    775e:	2301      	movs	r3, #1
    7760:	425b      	negs	r3, r3
    7762:	e046      	b.n	77f2 <cdcdf_acm_set_req+0xda>
		}
		if (USB_SETUP_STAGE == stage) {
    7764:	1dbb      	adds	r3, r7, #6
    7766:	781b      	ldrb	r3, [r3, #0]
    7768:	2b00      	cmp	r3, #0
    776a:	d10a      	bne.n	7782 <cdcdf_acm_set_req+0x6a>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    776c:	2316      	movs	r3, #22
    776e:	18fb      	adds	r3, r7, r3
    7770:	881a      	ldrh	r2, [r3, #0]
    7772:	6939      	ldr	r1, [r7, #16]
    7774:	1dfb      	adds	r3, r7, #7
    7776:	7818      	ldrb	r0, [r3, #0]
    7778:	2300      	movs	r3, #0
    777a:	4c21      	ldr	r4, [pc, #132]	; (7800 <cdcdf_acm_set_req+0xe8>)
    777c:	47a0      	blx	r4
    777e:	0003      	movs	r3, r0
    7780:	e037      	b.n	77f2 <cdcdf_acm_set_req+0xda>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    7782:	2308      	movs	r3, #8
    7784:	18fa      	adds	r2, r7, r3
    7786:	693b      	ldr	r3, [r7, #16]
    7788:	0010      	movs	r0, r2
    778a:	0019      	movs	r1, r3
    778c:	2307      	movs	r3, #7
    778e:	001a      	movs	r2, r3
    7790:	4b1c      	ldr	r3, [pc, #112]	; (7804 <cdcdf_acm_set_req+0xec>)
    7792:	4798      	blx	r3
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    7794:	4b1c      	ldr	r3, [pc, #112]	; (7808 <cdcdf_acm_set_req+0xf0>)
    7796:	681b      	ldr	r3, [r3, #0]
    7798:	2b00      	cmp	r3, #0
    779a:	d007      	beq.n	77ac <cdcdf_acm_set_req+0x94>
    779c:	4b1a      	ldr	r3, [pc, #104]	; (7808 <cdcdf_acm_set_req+0xf0>)
    779e:	681b      	ldr	r3, [r3, #0]
    77a0:	2208      	movs	r2, #8
    77a2:	18ba      	adds	r2, r7, r2
    77a4:	0010      	movs	r0, r2
    77a6:	4798      	blx	r3
    77a8:	1e03      	subs	r3, r0, #0
    77aa:	d008      	beq.n	77be <cdcdf_acm_set_req+0xa6>
				usbd_cdc_line_coding = line_coding_tmp;
    77ac:	4b17      	ldr	r3, [pc, #92]	; (780c <cdcdf_acm_set_req+0xf4>)
    77ae:	2208      	movs	r2, #8
    77b0:	18ba      	adds	r2, r7, r2
    77b2:	6811      	ldr	r1, [r2, #0]
    77b4:	6019      	str	r1, [r3, #0]
    77b6:	8891      	ldrh	r1, [r2, #4]
    77b8:	8099      	strh	r1, [r3, #4]
    77ba:	7992      	ldrb	r2, [r2, #6]
    77bc:	719a      	strb	r2, [r3, #6]
			}
			return ERR_NONE;
    77be:	2300      	movs	r3, #0
    77c0:	e017      	b.n	77f2 <cdcdf_acm_set_req+0xda>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    77c2:	2300      	movs	r3, #0
    77c4:	2200      	movs	r2, #0
    77c6:	2100      	movs	r1, #0
    77c8:	2000      	movs	r0, #0
    77ca:	4c0d      	ldr	r4, [pc, #52]	; (7800 <cdcdf_acm_set_req+0xe8>)
    77cc:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    77ce:	4b10      	ldr	r3, [pc, #64]	; (7810 <cdcdf_acm_set_req+0xf8>)
    77d0:	681b      	ldr	r3, [r3, #0]
    77d2:	2b00      	cmp	r3, #0
    77d4:	d009      	beq.n	77ea <cdcdf_acm_set_req+0xd2>
			cdcdf_acm_notify_state(req->wValue);
    77d6:	4b0e      	ldr	r3, [pc, #56]	; (7810 <cdcdf_acm_set_req+0xf8>)
    77d8:	681a      	ldr	r2, [r3, #0]
    77da:	683b      	ldr	r3, [r7, #0]
    77dc:	7899      	ldrb	r1, [r3, #2]
    77de:	78db      	ldrb	r3, [r3, #3]
    77e0:	021b      	lsls	r3, r3, #8
    77e2:	430b      	orrs	r3, r1
    77e4:	b29b      	uxth	r3, r3
    77e6:	0018      	movs	r0, r3
    77e8:	4790      	blx	r2
		}
		return ERR_NONE;
    77ea:	2300      	movs	r3, #0
    77ec:	e001      	b.n	77f2 <cdcdf_acm_set_req+0xda>
	default:
		return ERR_INVALID_ARG;
    77ee:	230d      	movs	r3, #13
    77f0:	425b      	negs	r3, r3
	}
}
    77f2:	0018      	movs	r0, r3
    77f4:	46bd      	mov	sp, r7
    77f6:	b007      	add	sp, #28
    77f8:	bd90      	pop	{r4, r7, pc}
    77fa:	46c0      	nop			; (mov r8, r8)
    77fc:	0000884d 	.word	0x0000884d
    7800:	00008685 	.word	0x00008685
    7804:	0000d10d 	.word	0x0000d10d
    7808:	200011fc 	.word	0x200011fc
    780c:	200011f0 	.word	0x200011f0
    7810:	200011f8 	.word	0x200011f8

00007814 <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    7814:	b590      	push	{r4, r7, lr}
    7816:	b085      	sub	sp, #20
    7818:	af00      	add	r7, sp, #0
    781a:	6039      	str	r1, [r7, #0]
    781c:	0011      	movs	r1, r2
    781e:	1dfb      	adds	r3, r7, #7
    7820:	1c02      	adds	r2, r0, #0
    7822:	701a      	strb	r2, [r3, #0]
    7824:	1dbb      	adds	r3, r7, #6
    7826:	1c0a      	adds	r2, r1, #0
    7828:	701a      	strb	r2, [r3, #0]
	uint16_t len = req->wLength;
    782a:	230e      	movs	r3, #14
    782c:	18fa      	adds	r2, r7, r3
    782e:	683b      	ldr	r3, [r7, #0]
    7830:	7999      	ldrb	r1, [r3, #6]
    7832:	79db      	ldrb	r3, [r3, #7]
    7834:	021b      	lsls	r3, r3, #8
    7836:	430b      	orrs	r3, r1
    7838:	8013      	strh	r3, [r2, #0]

	if (USB_DATA_STAGE == stage) {
    783a:	1dbb      	adds	r3, r7, #6
    783c:	781b      	ldrb	r3, [r3, #0]
    783e:	2b01      	cmp	r3, #1
    7840:	d101      	bne.n	7846 <cdcdf_acm_get_req+0x32>
		return ERR_NONE;
    7842:	2300      	movs	r3, #0
    7844:	e018      	b.n	7878 <cdcdf_acm_get_req+0x64>
	}

	switch (req->bRequest) {
    7846:	683b      	ldr	r3, [r7, #0]
    7848:	785b      	ldrb	r3, [r3, #1]
    784a:	2b21      	cmp	r3, #33	; 0x21
    784c:	d112      	bne.n	7874 <cdcdf_acm_get_req+0x60>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    784e:	230e      	movs	r3, #14
    7850:	18fb      	adds	r3, r7, r3
    7852:	881b      	ldrh	r3, [r3, #0]
    7854:	2b07      	cmp	r3, #7
    7856:	d002      	beq.n	785e <cdcdf_acm_get_req+0x4a>
			return ERR_INVALID_DATA;
    7858:	2301      	movs	r3, #1
    785a:	425b      	negs	r3, r3
    785c:	e00c      	b.n	7878 <cdcdf_acm_get_req+0x64>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    785e:	230e      	movs	r3, #14
    7860:	18fb      	adds	r3, r7, r3
    7862:	881a      	ldrh	r2, [r3, #0]
    7864:	4906      	ldr	r1, [pc, #24]	; (7880 <cdcdf_acm_get_req+0x6c>)
    7866:	1dfb      	adds	r3, r7, #7
    7868:	7818      	ldrb	r0, [r3, #0]
    786a:	2300      	movs	r3, #0
    786c:	4c05      	ldr	r4, [pc, #20]	; (7884 <cdcdf_acm_get_req+0x70>)
    786e:	47a0      	blx	r4
    7870:	0003      	movs	r3, r0
    7872:	e001      	b.n	7878 <cdcdf_acm_get_req+0x64>
	default:
		return ERR_INVALID_ARG;
    7874:	230d      	movs	r3, #13
    7876:	425b      	negs	r3, r3
	}
}
    7878:	0018      	movs	r0, r3
    787a:	46bd      	mov	sp, r7
    787c:	b005      	add	sp, #20
    787e:	bd90      	pop	{r4, r7, pc}
    7880:	200011f0 	.word	0x200011f0
    7884:	00008685 	.word	0x00008685

00007888 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    7888:	b580      	push	{r7, lr}
    788a:	b082      	sub	sp, #8
    788c:	af00      	add	r7, sp, #0
    788e:	6039      	str	r1, [r7, #0]
    7890:	0011      	movs	r1, r2
    7892:	1dfb      	adds	r3, r7, #7
    7894:	1c02      	adds	r2, r0, #0
    7896:	701a      	strb	r2, [r3, #0]
    7898:	1dbb      	adds	r3, r7, #6
    789a:	1c0a      	adds	r2, r1, #0
    789c:	701a      	strb	r2, [r3, #0]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    789e:	683b      	ldr	r3, [r7, #0]
    78a0:	781b      	ldrb	r3, [r3, #0]
    78a2:	095b      	lsrs	r3, r3, #5
    78a4:	b2db      	uxtb	r3, r3
    78a6:	001a      	movs	r2, r3
    78a8:	2303      	movs	r3, #3
    78aa:	4013      	ands	r3, r2
    78ac:	2b01      	cmp	r3, #1
    78ae:	d002      	beq.n	78b6 <cdcdf_acm_req+0x2e>
		return ERR_NOT_FOUND;
    78b0:	230a      	movs	r3, #10
    78b2:	425b      	negs	r3, r3
    78b4:	e030      	b.n	7918 <cdcdf_acm_req+0x90>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    78b6:	683b      	ldr	r3, [r7, #0]
    78b8:	791a      	ldrb	r2, [r3, #4]
    78ba:	795b      	ldrb	r3, [r3, #5]
    78bc:	021b      	lsls	r3, r3, #8
    78be:	4313      	orrs	r3, r2
    78c0:	b29a      	uxth	r2, r3
    78c2:	4b17      	ldr	r3, [pc, #92]	; (7920 <cdcdf_acm_req+0x98>)
    78c4:	781b      	ldrb	r3, [r3, #0]
    78c6:	b29b      	uxth	r3, r3
    78c8:	429a      	cmp	r2, r3
    78ca:	d00a      	beq.n	78e2 <cdcdf_acm_req+0x5a>
    78cc:	683b      	ldr	r3, [r7, #0]
    78ce:	791a      	ldrb	r2, [r3, #4]
    78d0:	795b      	ldrb	r3, [r3, #5]
    78d2:	021b      	lsls	r3, r3, #8
    78d4:	4313      	orrs	r3, r2
    78d6:	b29a      	uxth	r2, r3
    78d8:	4b11      	ldr	r3, [pc, #68]	; (7920 <cdcdf_acm_req+0x98>)
    78da:	785b      	ldrb	r3, [r3, #1]
    78dc:	b29b      	uxth	r3, r3
    78de:	429a      	cmp	r2, r3
    78e0:	d118      	bne.n	7914 <cdcdf_acm_req+0x8c>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    78e2:	683b      	ldr	r3, [r7, #0]
    78e4:	781b      	ldrb	r3, [r3, #0]
    78e6:	b25b      	sxtb	r3, r3
    78e8:	2b00      	cmp	r3, #0
    78ea:	da09      	bge.n	7900 <cdcdf_acm_req+0x78>
			return cdcdf_acm_get_req(ep, req, stage);
    78ec:	1dbb      	adds	r3, r7, #6
    78ee:	781a      	ldrb	r2, [r3, #0]
    78f0:	6839      	ldr	r1, [r7, #0]
    78f2:	1dfb      	adds	r3, r7, #7
    78f4:	781b      	ldrb	r3, [r3, #0]
    78f6:	0018      	movs	r0, r3
    78f8:	4b0a      	ldr	r3, [pc, #40]	; (7924 <cdcdf_acm_req+0x9c>)
    78fa:	4798      	blx	r3
    78fc:	0003      	movs	r3, r0
    78fe:	e00b      	b.n	7918 <cdcdf_acm_req+0x90>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    7900:	1dbb      	adds	r3, r7, #6
    7902:	781a      	ldrb	r2, [r3, #0]
    7904:	6839      	ldr	r1, [r7, #0]
    7906:	1dfb      	adds	r3, r7, #7
    7908:	781b      	ldrb	r3, [r3, #0]
    790a:	0018      	movs	r0, r3
    790c:	4b06      	ldr	r3, [pc, #24]	; (7928 <cdcdf_acm_req+0xa0>)
    790e:	4798      	blx	r3
    7910:	0003      	movs	r3, r0
    7912:	e001      	b.n	7918 <cdcdf_acm_req+0x90>
		}
	} else {
		return ERR_NOT_FOUND;
    7914:	230a      	movs	r3, #10
    7916:	425b      	negs	r3, r3
	}
}
    7918:	0018      	movs	r0, r3
    791a:	46bd      	mov	sp, r7
    791c:	b002      	add	sp, #8
    791e:	bd80      	pop	{r7, pc}
    7920:	200011e8 	.word	0x200011e8
    7924:	00007815 	.word	0x00007815
    7928:	00007719 	.word	0x00007719

0000792c <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    792c:	b580      	push	{r7, lr}
    792e:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    7930:	4b0d      	ldr	r3, [pc, #52]	; (7968 <cdcdf_acm_init+0x3c>)
    7932:	4798      	blx	r3
    7934:	0003      	movs	r3, r0
    7936:	2b01      	cmp	r3, #1
    7938:	d902      	bls.n	7940 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    793a:	2311      	movs	r3, #17
    793c:	425b      	negs	r3, r3
    793e:	e00f      	b.n	7960 <cdcdf_acm_init+0x34>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    7940:	4b0a      	ldr	r3, [pc, #40]	; (796c <cdcdf_acm_init+0x40>)
    7942:	4a0b      	ldr	r2, [pc, #44]	; (7970 <cdcdf_acm_init+0x44>)
    7944:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    7946:	4b09      	ldr	r3, [pc, #36]	; (796c <cdcdf_acm_init+0x40>)
    7948:	4a0a      	ldr	r2, [pc, #40]	; (7974 <cdcdf_acm_init+0x48>)
    794a:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    794c:	4b07      	ldr	r3, [pc, #28]	; (796c <cdcdf_acm_init+0x40>)
    794e:	0018      	movs	r0, r3
    7950:	4b09      	ldr	r3, [pc, #36]	; (7978 <cdcdf_acm_init+0x4c>)
    7952:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    7954:	4b09      	ldr	r3, [pc, #36]	; (797c <cdcdf_acm_init+0x50>)
    7956:	0019      	movs	r1, r3
    7958:	2001      	movs	r0, #1
    795a:	4b09      	ldr	r3, [pc, #36]	; (7980 <cdcdf_acm_init+0x54>)
    795c:	4798      	blx	r3
	return ERR_NONE;
    795e:	2300      	movs	r3, #0
}
    7960:	0018      	movs	r0, r3
    7962:	46bd      	mov	sp, r7
    7964:	bd80      	pop	{r7, pc}
    7966:	46c0      	nop			; (mov r8, r8)
    7968:	00008861 	.word	0x00008861
    796c:	200011dc 	.word	0x200011dc
    7970:	000076b9 	.word	0x000076b9
    7974:	200011e8 	.word	0x200011e8
    7978:	000087c5 	.word	0x000087c5
    797c:	20000078 	.word	0x20000078
    7980:	000086e1 	.word	0x000086e1

00007984 <usb_get_u16>:
{
    7984:	b580      	push	{r7, lr}
    7986:	b082      	sub	sp, #8
    7988:	af00      	add	r7, sp, #0
    798a:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    798c:	687b      	ldr	r3, [r7, #4]
    798e:	781b      	ldrb	r3, [r3, #0]
    7990:	b29a      	uxth	r2, r3
    7992:	687b      	ldr	r3, [r7, #4]
    7994:	3301      	adds	r3, #1
    7996:	781b      	ldrb	r3, [r3, #0]
    7998:	b29b      	uxth	r3, r3
    799a:	021b      	lsls	r3, r3, #8
    799c:	b29b      	uxth	r3, r3
    799e:	18d3      	adds	r3, r2, r3
    79a0:	b29b      	uxth	r3, r3
}
    79a2:	0018      	movs	r0, r3
    79a4:	46bd      	mov	sp, r7
    79a6:	b002      	add	sp, #8
    79a8:	bd80      	pop	{r7, pc}

000079aa <usb_desc_len>:
{
    79aa:	b580      	push	{r7, lr}
    79ac:	b082      	sub	sp, #8
    79ae:	af00      	add	r7, sp, #0
    79b0:	6078      	str	r0, [r7, #4]
	return desc[0];
    79b2:	687b      	ldr	r3, [r7, #4]
    79b4:	781b      	ldrb	r3, [r3, #0]
}
    79b6:	0018      	movs	r0, r3
    79b8:	46bd      	mov	sp, r7
    79ba:	b002      	add	sp, #8
    79bc:	bd80      	pop	{r7, pc}
	...

000079c0 <usb_desc_next>:
{
    79c0:	b580      	push	{r7, lr}
    79c2:	b082      	sub	sp, #8
    79c4:	af00      	add	r7, sp, #0
    79c6:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    79c8:	687b      	ldr	r3, [r7, #4]
    79ca:	0018      	movs	r0, r3
    79cc:	4b04      	ldr	r3, [pc, #16]	; (79e0 <usb_desc_next+0x20>)
    79ce:	4798      	blx	r3
    79d0:	0003      	movs	r3, r0
    79d2:	001a      	movs	r2, r3
    79d4:	687b      	ldr	r3, [r7, #4]
    79d6:	189b      	adds	r3, r3, r2
}
    79d8:	0018      	movs	r0, r3
    79da:	46bd      	mov	sp, r7
    79dc:	b002      	add	sp, #8
    79de:	bd80      	pop	{r7, pc}
    79e0:	000079ab 	.word	0x000079ab

000079e4 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    79e4:	b580      	push	{r7, lr}
    79e6:	b082      	sub	sp, #8
    79e8:	af00      	add	r7, sp, #0
    79ea:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    79ec:	687b      	ldr	r3, [r7, #4]
    79ee:	3302      	adds	r3, #2
    79f0:	0018      	movs	r0, r3
    79f2:	4b03      	ldr	r3, [pc, #12]	; (7a00 <usb_cfg_desc_total_len+0x1c>)
    79f4:	4798      	blx	r3
    79f6:	0003      	movs	r3, r0
}
    79f8:	0018      	movs	r0, r3
    79fa:	46bd      	mov	sp, r7
    79fc:	b002      	add	sp, #8
    79fe:	bd80      	pop	{r7, pc}
    7a00:	00007985 	.word	0x00007985

00007a04 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    7a04:	b590      	push	{r4, r7, lr}
    7a06:	b085      	sub	sp, #20
    7a08:	af00      	add	r7, sp, #0
    7a0a:	0002      	movs	r2, r0
    7a0c:	6039      	str	r1, [r7, #0]
    7a0e:	1dfb      	adds	r3, r7, #7
    7a10:	701a      	strb	r2, [r3, #0]
	uint8_t *dev_desc = NULL;
    7a12:	2300      	movs	r3, #0
    7a14:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    7a16:	230a      	movs	r3, #10
    7a18:	18fa      	adds	r2, r7, r3
    7a1a:	683b      	ldr	r3, [r7, #0]
    7a1c:	7999      	ldrb	r1, [r3, #6]
    7a1e:	79db      	ldrb	r3, [r3, #7]
    7a20:	021b      	lsls	r3, r3, #8
    7a22:	430b      	orrs	r3, r1
    7a24:	8013      	strh	r3, [r2, #0]
	if (length > 0x12) {
    7a26:	230a      	movs	r3, #10
    7a28:	18fb      	adds	r3, r7, r3
    7a2a:	881b      	ldrh	r3, [r3, #0]
    7a2c:	2b12      	cmp	r3, #18
    7a2e:	d903      	bls.n	7a38 <usbdc_get_dev_desc+0x34>
		length = 0x12;
    7a30:	230a      	movs	r3, #10
    7a32:	18fb      	adds	r3, r7, r3
    7a34:	2212      	movs	r2, #18
    7a36:	801a      	strh	r2, [r3, #0]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    7a38:	68fb      	ldr	r3, [r7, #12]
    7a3a:	2b00      	cmp	r3, #0
    7a3c:	d10b      	bne.n	7a56 <usbdc_get_dev_desc+0x52>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    7a3e:	4b11      	ldr	r3, [pc, #68]	; (7a84 <usbdc_get_dev_desc+0x80>)
    7a40:	681b      	ldr	r3, [r3, #0]
    7a42:	6818      	ldr	r0, [r3, #0]
    7a44:	4b0f      	ldr	r3, [pc, #60]	; (7a84 <usbdc_get_dev_desc+0x80>)
    7a46:	681b      	ldr	r3, [r3, #0]
    7a48:	685b      	ldr	r3, [r3, #4]
    7a4a:	2201      	movs	r2, #1
    7a4c:	0019      	movs	r1, r3
    7a4e:	4b0e      	ldr	r3, [pc, #56]	; (7a88 <usbdc_get_dev_desc+0x84>)
    7a50:	4798      	blx	r3
    7a52:	0003      	movs	r3, r0
    7a54:	60fb      	str	r3, [r7, #12]
	}
	if (!dev_desc) {
    7a56:	68fb      	ldr	r3, [r7, #12]
    7a58:	2b00      	cmp	r3, #0
    7a5a:	d101      	bne.n	7a60 <usbdc_get_dev_desc+0x5c>
		return false;
    7a5c:	2300      	movs	r3, #0
    7a5e:	e00d      	b.n	7a7c <usbdc_get_dev_desc+0x78>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    7a60:	230a      	movs	r3, #10
    7a62:	18fb      	adds	r3, r7, r3
    7a64:	881a      	ldrh	r2, [r3, #0]
    7a66:	68f9      	ldr	r1, [r7, #12]
    7a68:	1dfb      	adds	r3, r7, #7
    7a6a:	7818      	ldrb	r0, [r3, #0]
    7a6c:	2300      	movs	r3, #0
    7a6e:	4c07      	ldr	r4, [pc, #28]	; (7a8c <usbdc_get_dev_desc+0x88>)
    7a70:	47a0      	blx	r4
    7a72:	1e03      	subs	r3, r0, #0
    7a74:	d001      	beq.n	7a7a <usbdc_get_dev_desc+0x76>
		return false;
    7a76:	2300      	movs	r3, #0
    7a78:	e000      	b.n	7a7c <usbdc_get_dev_desc+0x78>
	}
	return true;
    7a7a:	2301      	movs	r3, #1
}
    7a7c:	0018      	movs	r0, r3
    7a7e:	46bd      	mov	sp, r7
    7a80:	b005      	add	sp, #20
    7a82:	bd90      	pop	{r4, r7, pc}
    7a84:	20001200 	.word	0x20001200
    7a88:	0000893d 	.word	0x0000893d
    7a8c:	00008685 	.word	0x00008685

00007a90 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    7a90:	b590      	push	{r4, r7, lr}
    7a92:	b087      	sub	sp, #28
    7a94:	af00      	add	r7, sp, #0
    7a96:	0002      	movs	r2, r0
    7a98:	6039      	str	r1, [r7, #0]
    7a9a:	1dfb      	adds	r3, r7, #7
    7a9c:	701a      	strb	r2, [r3, #0]
	uint8_t *cfg_desc = NULL;
    7a9e:	2300      	movs	r3, #0
    7aa0:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    7aa2:	2312      	movs	r3, #18
    7aa4:	18fa      	adds	r2, r7, r3
    7aa6:	683b      	ldr	r3, [r7, #0]
    7aa8:	7999      	ldrb	r1, [r3, #6]
    7aaa:	79db      	ldrb	r3, [r3, #7]
    7aac:	021b      	lsls	r3, r3, #8
    7aae:	430b      	orrs	r3, r1
    7ab0:	8013      	strh	r3, [r2, #0]
	uint8_t  index    = req->wValue & 0x00FF;
    7ab2:	683b      	ldr	r3, [r7, #0]
    7ab4:	789a      	ldrb	r2, [r3, #2]
    7ab6:	78db      	ldrb	r3, [r3, #3]
    7ab8:	021b      	lsls	r3, r3, #8
    7aba:	4313      	orrs	r3, r2
    7abc:	b29a      	uxth	r2, r3
    7abe:	2310      	movs	r3, #16
    7ac0:	18fb      	adds	r3, r7, r3
    7ac2:	701a      	strb	r2, [r3, #0]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    7ac4:	2312      	movs	r3, #18
    7ac6:	18fb      	adds	r3, r7, r3
    7ac8:	881b      	ldrh	r3, [r3, #0]
    7aca:	4a28      	ldr	r2, [pc, #160]	; (7b6c <usbdc_get_cfg_desc+0xdc>)
    7acc:	7f12      	ldrb	r2, [r2, #28]
    7ace:	3a01      	subs	r2, #1
    7ad0:	401a      	ands	r2, r3
    7ad2:	2311      	movs	r3, #17
    7ad4:	18fb      	adds	r3, r7, r3
    7ad6:	4251      	negs	r1, r2
    7ad8:	414a      	adcs	r2, r1
    7ada:	701a      	strb	r2, [r3, #0]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    7adc:	697b      	ldr	r3, [r7, #20]
    7ade:	2b00      	cmp	r3, #0
    7ae0:	d10f      	bne.n	7b02 <usbdc_get_cfg_desc+0x72>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    7ae2:	4b22      	ldr	r3, [pc, #136]	; (7b6c <usbdc_get_cfg_desc+0xdc>)
    7ae4:	681b      	ldr	r3, [r3, #0]
    7ae6:	6818      	ldr	r0, [r3, #0]
    7ae8:	4b20      	ldr	r3, [pc, #128]	; (7b6c <usbdc_get_cfg_desc+0xdc>)
    7aea:	681b      	ldr	r3, [r3, #0]
    7aec:	6859      	ldr	r1, [r3, #4]
    7aee:	2310      	movs	r3, #16
    7af0:	18fb      	adds	r3, r7, r3
    7af2:	781b      	ldrb	r3, [r3, #0]
    7af4:	3301      	adds	r3, #1
    7af6:	b2db      	uxtb	r3, r3
    7af8:	001a      	movs	r2, r3
    7afa:	4b1d      	ldr	r3, [pc, #116]	; (7b70 <usbdc_get_cfg_desc+0xe0>)
    7afc:	4798      	blx	r3
    7afe:	0003      	movs	r3, r0
    7b00:	617b      	str	r3, [r7, #20]
	}
	if (NULL == cfg_desc) {
    7b02:	697b      	ldr	r3, [r7, #20]
    7b04:	2b00      	cmp	r3, #0
    7b06:	d101      	bne.n	7b0c <usbdc_get_cfg_desc+0x7c>
		return false;
    7b08:	2300      	movs	r3, #0
    7b0a:	e02b      	b.n	7b64 <usbdc_get_cfg_desc+0xd4>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    7b0c:	230e      	movs	r3, #14
    7b0e:	18fc      	adds	r4, r7, r3
    7b10:	697b      	ldr	r3, [r7, #20]
    7b12:	0018      	movs	r0, r3
    7b14:	4b17      	ldr	r3, [pc, #92]	; (7b74 <usbdc_get_cfg_desc+0xe4>)
    7b16:	4798      	blx	r3
    7b18:	0003      	movs	r3, r0
    7b1a:	8023      	strh	r3, [r4, #0]
	if (length <= total_len) {
    7b1c:	2312      	movs	r3, #18
    7b1e:	18fa      	adds	r2, r7, r3
    7b20:	230e      	movs	r3, #14
    7b22:	18fb      	adds	r3, r7, r3
    7b24:	8812      	ldrh	r2, [r2, #0]
    7b26:	881b      	ldrh	r3, [r3, #0]
    7b28:	429a      	cmp	r2, r3
    7b2a:	d804      	bhi.n	7b36 <usbdc_get_cfg_desc+0xa6>
		need_zlp = false;
    7b2c:	2311      	movs	r3, #17
    7b2e:	18fb      	adds	r3, r7, r3
    7b30:	2200      	movs	r2, #0
    7b32:	701a      	strb	r2, [r3, #0]
    7b34:	e005      	b.n	7b42 <usbdc_get_cfg_desc+0xb2>
	} else {
		length = total_len;
    7b36:	2312      	movs	r3, #18
    7b38:	18fb      	adds	r3, r7, r3
    7b3a:	220e      	movs	r2, #14
    7b3c:	18ba      	adds	r2, r7, r2
    7b3e:	8812      	ldrh	r2, [r2, #0]
    7b40:	801a      	strh	r2, [r3, #0]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    7b42:	2312      	movs	r3, #18
    7b44:	18fb      	adds	r3, r7, r3
    7b46:	881a      	ldrh	r2, [r3, #0]
    7b48:	2311      	movs	r3, #17
    7b4a:	18fb      	adds	r3, r7, r3
    7b4c:	781c      	ldrb	r4, [r3, #0]
    7b4e:	6979      	ldr	r1, [r7, #20]
    7b50:	1dfb      	adds	r3, r7, #7
    7b52:	7818      	ldrb	r0, [r3, #0]
    7b54:	0023      	movs	r3, r4
    7b56:	4c08      	ldr	r4, [pc, #32]	; (7b78 <usbdc_get_cfg_desc+0xe8>)
    7b58:	47a0      	blx	r4
    7b5a:	1e03      	subs	r3, r0, #0
    7b5c:	d001      	beq.n	7b62 <usbdc_get_cfg_desc+0xd2>
		return false;
    7b5e:	2300      	movs	r3, #0
    7b60:	e000      	b.n	7b64 <usbdc_get_cfg_desc+0xd4>
	}
	return true;
    7b62:	2301      	movs	r3, #1
}
    7b64:	0018      	movs	r0, r3
    7b66:	46bd      	mov	sp, r7
    7b68:	b007      	add	sp, #28
    7b6a:	bd90      	pop	{r4, r7, pc}
    7b6c:	20001200 	.word	0x20001200
    7b70:	00008a0d 	.word	0x00008a0d
    7b74:	000079e5 	.word	0x000079e5
    7b78:	00008685 	.word	0x00008685

00007b7c <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    7b7c:	b590      	push	{r4, r7, lr}
    7b7e:	b085      	sub	sp, #20
    7b80:	af00      	add	r7, sp, #0
    7b82:	0002      	movs	r2, r0
    7b84:	6039      	str	r1, [r7, #0]
    7b86:	1dfb      	adds	r3, r7, #7
    7b88:	701a      	strb	r2, [r3, #0]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    7b8a:	230e      	movs	r3, #14
    7b8c:	18fa      	adds	r2, r7, r3
    7b8e:	683b      	ldr	r3, [r7, #0]
    7b90:	7999      	ldrb	r1, [r3, #6]
    7b92:	79db      	ldrb	r3, [r3, #7]
    7b94:	021b      	lsls	r3, r3, #8
    7b96:	430b      	orrs	r3, r1
    7b98:	8013      	strh	r3, [r2, #0]
	uint8_t  index    = req->wValue & 0x00FF;
    7b9a:	683b      	ldr	r3, [r7, #0]
    7b9c:	789a      	ldrb	r2, [r3, #2]
    7b9e:	78db      	ldrb	r3, [r3, #3]
    7ba0:	021b      	lsls	r3, r3, #8
    7ba2:	4313      	orrs	r3, r2
    7ba4:	b29a      	uxth	r2, r3
    7ba6:	230c      	movs	r3, #12
    7ba8:	18fb      	adds	r3, r7, r3
    7baa:	701a      	strb	r2, [r3, #0]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    7bac:	230e      	movs	r3, #14
    7bae:	18fb      	adds	r3, r7, r3
    7bb0:	881b      	ldrh	r3, [r3, #0]
    7bb2:	4a21      	ldr	r2, [pc, #132]	; (7c38 <usbdc_get_str_desc+0xbc>)
    7bb4:	7f12      	ldrb	r2, [r2, #28]
    7bb6:	3a01      	subs	r2, #1
    7bb8:	401a      	ands	r2, r3
    7bba:	230d      	movs	r3, #13
    7bbc:	18fb      	adds	r3, r7, r3
    7bbe:	4251      	negs	r1, r2
    7bc0:	414a      	adcs	r2, r1
    7bc2:	701a      	strb	r2, [r3, #0]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    7bc4:	4b1c      	ldr	r3, [pc, #112]	; (7c38 <usbdc_get_str_desc+0xbc>)
    7bc6:	681b      	ldr	r3, [r3, #0]
    7bc8:	6818      	ldr	r0, [r3, #0]
    7bca:	4b1b      	ldr	r3, [pc, #108]	; (7c38 <usbdc_get_str_desc+0xbc>)
    7bcc:	681b      	ldr	r3, [r3, #0]
    7bce:	6859      	ldr	r1, [r3, #4]
    7bd0:	230c      	movs	r3, #12
    7bd2:	18fb      	adds	r3, r7, r3
    7bd4:	781b      	ldrb	r3, [r3, #0]
    7bd6:	001a      	movs	r2, r3
    7bd8:	4b18      	ldr	r3, [pc, #96]	; (7c3c <usbdc_get_str_desc+0xc0>)
    7bda:	4798      	blx	r3
    7bdc:	0003      	movs	r3, r0
    7bde:	60bb      	str	r3, [r7, #8]
	if (NULL == str_desc) {
    7be0:	68bb      	ldr	r3, [r7, #8]
    7be2:	2b00      	cmp	r3, #0
    7be4:	d101      	bne.n	7bea <usbdc_get_str_desc+0x6e>
		return false;
    7be6:	2300      	movs	r3, #0
    7be8:	e022      	b.n	7c30 <usbdc_get_str_desc+0xb4>
	}
	if (length <= str_desc[0]) {
    7bea:	68bb      	ldr	r3, [r7, #8]
    7bec:	781b      	ldrb	r3, [r3, #0]
    7bee:	b29b      	uxth	r3, r3
    7bf0:	220e      	movs	r2, #14
    7bf2:	18ba      	adds	r2, r7, r2
    7bf4:	8812      	ldrh	r2, [r2, #0]
    7bf6:	429a      	cmp	r2, r3
    7bf8:	d804      	bhi.n	7c04 <usbdc_get_str_desc+0x88>
		need_zlp = false;
    7bfa:	230d      	movs	r3, #13
    7bfc:	18fb      	adds	r3, r7, r3
    7bfe:	2200      	movs	r2, #0
    7c00:	701a      	strb	r2, [r3, #0]
    7c02:	e004      	b.n	7c0e <usbdc_get_str_desc+0x92>
	} else {
		length = str_desc[0];
    7c04:	68bb      	ldr	r3, [r7, #8]
    7c06:	781a      	ldrb	r2, [r3, #0]
    7c08:	230e      	movs	r3, #14
    7c0a:	18fb      	adds	r3, r7, r3
    7c0c:	801a      	strh	r2, [r3, #0]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    7c0e:	230e      	movs	r3, #14
    7c10:	18fb      	adds	r3, r7, r3
    7c12:	881a      	ldrh	r2, [r3, #0]
    7c14:	230d      	movs	r3, #13
    7c16:	18fb      	adds	r3, r7, r3
    7c18:	781c      	ldrb	r4, [r3, #0]
    7c1a:	68b9      	ldr	r1, [r7, #8]
    7c1c:	1dfb      	adds	r3, r7, #7
    7c1e:	7818      	ldrb	r0, [r3, #0]
    7c20:	0023      	movs	r3, r4
    7c22:	4c07      	ldr	r4, [pc, #28]	; (7c40 <usbdc_get_str_desc+0xc4>)
    7c24:	47a0      	blx	r4
    7c26:	1e03      	subs	r3, r0, #0
    7c28:	d001      	beq.n	7c2e <usbdc_get_str_desc+0xb2>
		return false;
    7c2a:	2300      	movs	r3, #0
    7c2c:	e000      	b.n	7c30 <usbdc_get_str_desc+0xb4>
	}
	return true;
    7c2e:	2301      	movs	r3, #1
}
    7c30:	0018      	movs	r0, r3
    7c32:	46bd      	mov	sp, r7
    7c34:	b005      	add	sp, #20
    7c36:	bd90      	pop	{r4, r7, pc}
    7c38:	20001200 	.word	0x20001200
    7c3c:	00008a91 	.word	0x00008a91
    7c40:	00008685 	.word	0x00008685

00007c44 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    7c44:	b580      	push	{r7, lr}
    7c46:	b084      	sub	sp, #16
    7c48:	af00      	add	r7, sp, #0
    7c4a:	0002      	movs	r2, r0
    7c4c:	6039      	str	r1, [r7, #0]
    7c4e:	1dfb      	adds	r3, r7, #7
    7c50:	701a      	strb	r2, [r3, #0]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    7c52:	683b      	ldr	r3, [r7, #0]
    7c54:	789a      	ldrb	r2, [r3, #2]
    7c56:	78db      	ldrb	r3, [r3, #3]
    7c58:	021b      	lsls	r3, r3, #8
    7c5a:	4313      	orrs	r3, r2
    7c5c:	b29b      	uxth	r3, r3
    7c5e:	0a1b      	lsrs	r3, r3, #8
    7c60:	b29a      	uxth	r2, r3
    7c62:	230f      	movs	r3, #15
    7c64:	18fb      	adds	r3, r7, r3
    7c66:	701a      	strb	r2, [r3, #0]
	switch (type) {
    7c68:	230f      	movs	r3, #15
    7c6a:	18fb      	adds	r3, r7, r3
    7c6c:	781b      	ldrb	r3, [r3, #0]
    7c6e:	2b02      	cmp	r3, #2
    7c70:	d00f      	beq.n	7c92 <usbdc_get_desc_req+0x4e>
    7c72:	2b03      	cmp	r3, #3
    7c74:	d016      	beq.n	7ca4 <usbdc_get_desc_req+0x60>
    7c76:	2b01      	cmp	r3, #1
    7c78:	d002      	beq.n	7c80 <usbdc_get_desc_req+0x3c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    7c7a:	46c0      	nop			; (mov r8, r8)
	}
	return false;
    7c7c:	2300      	movs	r3, #0
    7c7e:	e019      	b.n	7cb4 <usbdc_get_desc_req+0x70>
		return usbdc_get_dev_desc(ep, req);
    7c80:	683a      	ldr	r2, [r7, #0]
    7c82:	1dfb      	adds	r3, r7, #7
    7c84:	781b      	ldrb	r3, [r3, #0]
    7c86:	0011      	movs	r1, r2
    7c88:	0018      	movs	r0, r3
    7c8a:	4b0c      	ldr	r3, [pc, #48]	; (7cbc <usbdc_get_desc_req+0x78>)
    7c8c:	4798      	blx	r3
    7c8e:	0003      	movs	r3, r0
    7c90:	e010      	b.n	7cb4 <usbdc_get_desc_req+0x70>
		return usbdc_get_cfg_desc(ep, req);
    7c92:	683a      	ldr	r2, [r7, #0]
    7c94:	1dfb      	adds	r3, r7, #7
    7c96:	781b      	ldrb	r3, [r3, #0]
    7c98:	0011      	movs	r1, r2
    7c9a:	0018      	movs	r0, r3
    7c9c:	4b08      	ldr	r3, [pc, #32]	; (7cc0 <usbdc_get_desc_req+0x7c>)
    7c9e:	4798      	blx	r3
    7ca0:	0003      	movs	r3, r0
    7ca2:	e007      	b.n	7cb4 <usbdc_get_desc_req+0x70>
		return usbdc_get_str_desc(ep, req);
    7ca4:	683a      	ldr	r2, [r7, #0]
    7ca6:	1dfb      	adds	r3, r7, #7
    7ca8:	781b      	ldrb	r3, [r3, #0]
    7caa:	0011      	movs	r1, r2
    7cac:	0018      	movs	r0, r3
    7cae:	4b05      	ldr	r3, [pc, #20]	; (7cc4 <usbdc_get_desc_req+0x80>)
    7cb0:	4798      	blx	r3
    7cb2:	0003      	movs	r3, r0
}
    7cb4:	0018      	movs	r0, r3
    7cb6:	46bd      	mov	sp, r7
    7cb8:	b004      	add	sp, #16
    7cba:	bd80      	pop	{r7, pc}
    7cbc:	00007a05 	.word	0x00007a05
    7cc0:	00007a91 	.word	0x00007a91
    7cc4:	00007b7d 	.word	0x00007b7d

00007cc8 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    7cc8:	b590      	push	{r4, r7, lr}
    7cca:	b085      	sub	sp, #20
    7ccc:	af00      	add	r7, sp, #0
    7cce:	0002      	movs	r2, r0
    7cd0:	6039      	str	r1, [r7, #0]
    7cd2:	1dfb      	adds	r3, r7, #7
    7cd4:	701a      	strb	r2, [r3, #0]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    7cd6:	683b      	ldr	r3, [r7, #0]
    7cd8:	781b      	ldrb	r3, [r3, #0]
    7cda:	001a      	movs	r2, r3
    7cdc:	231f      	movs	r3, #31
    7cde:	4013      	ands	r3, r2
    7ce0:	d41e      	bmi.n	7d20 <usbdc_get_status_req+0x58>
    7ce2:	2b01      	cmp	r3, #1
    7ce4:	dd02      	ble.n	7cec <usbdc_get_status_req+0x24>
    7ce6:	2b02      	cmp	r3, #2
    7ce8:	d003      	beq.n	7cf2 <usbdc_get_status_req+0x2a>
    7cea:	e019      	b.n	7d20 <usbdc_get_status_req+0x58>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    7cec:	2300      	movs	r3, #0
    7cee:	60fb      	str	r3, [r7, #12]
		break;
    7cf0:	e018      	b.n	7d24 <usbdc_get_status_req+0x5c>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    7cf2:	683b      	ldr	r3, [r7, #0]
    7cf4:	791a      	ldrb	r2, [r3, #4]
    7cf6:	795b      	ldrb	r3, [r3, #5]
    7cf8:	021b      	lsls	r3, r3, #8
    7cfa:	4313      	orrs	r3, r2
    7cfc:	b29b      	uxth	r3, r3
    7cfe:	b2db      	uxtb	r3, r3
    7d00:	2102      	movs	r1, #2
    7d02:	0018      	movs	r0, r3
    7d04:	4b12      	ldr	r3, [pc, #72]	; (7d50 <usbdc_get_status_req+0x88>)
    7d06:	4798      	blx	r3
    7d08:	0003      	movs	r3, r0
    7d0a:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    7d0c:	68fb      	ldr	r3, [r7, #12]
    7d0e:	2b00      	cmp	r3, #0
    7d10:	da01      	bge.n	7d16 <usbdc_get_status_req+0x4e>
			return false;
    7d12:	2300      	movs	r3, #0
    7d14:	e017      	b.n	7d46 <usbdc_get_status_req+0x7e>
		}
		st = st & 0x1;
    7d16:	68fb      	ldr	r3, [r7, #12]
    7d18:	2201      	movs	r2, #1
    7d1a:	4013      	ands	r3, r2
    7d1c:	60fb      	str	r3, [r7, #12]
		break;
    7d1e:	e001      	b.n	7d24 <usbdc_get_status_req+0x5c>
	default:
		return false;
    7d20:	2300      	movs	r3, #0
    7d22:	e010      	b.n	7d46 <usbdc_get_status_req+0x7e>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    7d24:	4b0b      	ldr	r3, [pc, #44]	; (7d54 <usbdc_get_status_req+0x8c>)
    7d26:	695b      	ldr	r3, [r3, #20]
    7d28:	220c      	movs	r2, #12
    7d2a:	18b9      	adds	r1, r7, r2
    7d2c:	2202      	movs	r2, #2
    7d2e:	0018      	movs	r0, r3
    7d30:	4b09      	ldr	r3, [pc, #36]	; (7d58 <usbdc_get_status_req+0x90>)
    7d32:	4798      	blx	r3
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    7d34:	4b07      	ldr	r3, [pc, #28]	; (7d54 <usbdc_get_status_req+0x8c>)
    7d36:	6959      	ldr	r1, [r3, #20]
    7d38:	1dfb      	adds	r3, r7, #7
    7d3a:	7818      	ldrb	r0, [r3, #0]
    7d3c:	2300      	movs	r3, #0
    7d3e:	2202      	movs	r2, #2
    7d40:	4c06      	ldr	r4, [pc, #24]	; (7d5c <usbdc_get_status_req+0x94>)
    7d42:	47a0      	blx	r4
	return true;
    7d44:	2301      	movs	r3, #1
}
    7d46:	0018      	movs	r0, r3
    7d48:	46bd      	mov	sp, r7
    7d4a:	b005      	add	sp, #20
    7d4c:	bd90      	pop	{r4, r7, pc}
    7d4e:	46c0      	nop			; (mov r8, r8)
    7d50:	000029b1 	.word	0x000029b1
    7d54:	20001200 	.word	0x20001200
    7d58:	0000d10d 	.word	0x0000d10d
    7d5c:	00008685 	.word	0x00008685

00007d60 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    7d60:	b590      	push	{r4, r7, lr}
    7d62:	b085      	sub	sp, #20
    7d64:	af00      	add	r7, sp, #0
    7d66:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    7d68:	4b21      	ldr	r3, [pc, #132]	; (7df0 <usbdc_get_interface+0x90>)
    7d6a:	691b      	ldr	r3, [r3, #16]
    7d6c:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    7d6e:	4b20      	ldr	r3, [pc, #128]	; (7df0 <usbdc_get_interface+0x90>)
    7d70:	7f5b      	ldrb	r3, [r3, #29]
    7d72:	0019      	movs	r1, r3
    7d74:	687b      	ldr	r3, [r7, #4]
    7d76:	791a      	ldrb	r2, [r3, #4]
    7d78:	795b      	ldrb	r3, [r3, #5]
    7d7a:	021b      	lsls	r3, r3, #8
    7d7c:	4313      	orrs	r3, r2
    7d7e:	b29b      	uxth	r3, r3
    7d80:	4119      	asrs	r1, r3
    7d82:	000b      	movs	r3, r1
    7d84:	2201      	movs	r2, #1
    7d86:	4013      	ands	r3, r2
    7d88:	d129      	bne.n	7dde <usbdc_get_interface+0x7e>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    7d8a:	4b19      	ldr	r3, [pc, #100]	; (7df0 <usbdc_get_interface+0x90>)
    7d8c:	695b      	ldr	r3, [r3, #20]
    7d8e:	2200      	movs	r2, #0
    7d90:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    7d92:	4b17      	ldr	r3, [pc, #92]	; (7df0 <usbdc_get_interface+0x90>)
    7d94:	6959      	ldr	r1, [r3, #20]
    7d96:	2300      	movs	r3, #0
    7d98:	2201      	movs	r2, #1
    7d9a:	2000      	movs	r0, #0
    7d9c:	4c15      	ldr	r4, [pc, #84]	; (7df4 <usbdc_get_interface+0x94>)
    7d9e:	47a0      	blx	r4
		return true;
    7da0:	2301      	movs	r3, #1
    7da2:	e020      	b.n	7de6 <usbdc_get_interface+0x86>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    7da4:	68fb      	ldr	r3, [r7, #12]
    7da6:	685b      	ldr	r3, [r3, #4]
    7da8:	687a      	ldr	r2, [r7, #4]
    7daa:	68f8      	ldr	r0, [r7, #12]
    7dac:	2102      	movs	r1, #2
    7dae:	4798      	blx	r3
    7db0:	0003      	movs	r3, r0
    7db2:	60bb      	str	r3, [r7, #8]
    7db4:	68bb      	ldr	r3, [r7, #8]
    7db6:	2b00      	cmp	r3, #0
    7db8:	da03      	bge.n	7dc2 <usbdc_get_interface+0x62>
			func = func->next;
    7dba:	68fb      	ldr	r3, [r7, #12]
    7dbc:	681b      	ldr	r3, [r3, #0]
    7dbe:	60fb      	str	r3, [r7, #12]
    7dc0:	e00d      	b.n	7dde <usbdc_get_interface+0x7e>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    7dc2:	4b0b      	ldr	r3, [pc, #44]	; (7df0 <usbdc_get_interface+0x90>)
    7dc4:	695b      	ldr	r3, [r3, #20]
    7dc6:	68ba      	ldr	r2, [r7, #8]
    7dc8:	b2d2      	uxtb	r2, r2
    7dca:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    7dcc:	4b08      	ldr	r3, [pc, #32]	; (7df0 <usbdc_get_interface+0x90>)
    7dce:	6959      	ldr	r1, [r3, #20]
    7dd0:	2300      	movs	r3, #0
    7dd2:	2201      	movs	r2, #1
    7dd4:	2000      	movs	r0, #0
    7dd6:	4c07      	ldr	r4, [pc, #28]	; (7df4 <usbdc_get_interface+0x94>)
    7dd8:	47a0      	blx	r4
			return true;
    7dda:	2301      	movs	r3, #1
    7ddc:	e003      	b.n	7de6 <usbdc_get_interface+0x86>
	while (NULL != func) {
    7dde:	68fb      	ldr	r3, [r7, #12]
    7de0:	2b00      	cmp	r3, #0
    7de2:	d1df      	bne.n	7da4 <usbdc_get_interface+0x44>
		}
	}
	return false;
    7de4:	2300      	movs	r3, #0
}
    7de6:	0018      	movs	r0, r3
    7de8:	46bd      	mov	sp, r7
    7dea:	b005      	add	sp, #20
    7dec:	bd90      	pop	{r4, r7, pc}
    7dee:	46c0      	nop			; (mov r8, r8)
    7df0:	20001200 	.word	0x20001200
    7df4:	00008685 	.word	0x00008685

00007df8 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    7df8:	b590      	push	{r4, r7, lr}
    7dfa:	b083      	sub	sp, #12
    7dfc:	af00      	add	r7, sp, #0
    7dfe:	0002      	movs	r2, r0
    7e00:	6039      	str	r1, [r7, #0]
    7e02:	1dfb      	adds	r3, r7, #7
    7e04:	701a      	strb	r2, [r3, #0]
	switch (req->bRequest) {
    7e06:	683b      	ldr	r3, [r7, #0]
    7e08:	785b      	ldrb	r3, [r3, #1]
    7e0a:	2b06      	cmp	r3, #6
    7e0c:	d008      	beq.n	7e20 <usbdc_get_req+0x28>
    7e0e:	dc02      	bgt.n	7e16 <usbdc_get_req+0x1e>
    7e10:	2b00      	cmp	r3, #0
    7e12:	d01d      	beq.n	7e50 <usbdc_get_req+0x58>
    7e14:	e02b      	b.n	7e6e <usbdc_get_req+0x76>
    7e16:	2b08      	cmp	r3, #8
    7e18:	d00b      	beq.n	7e32 <usbdc_get_req+0x3a>
    7e1a:	2b0a      	cmp	r3, #10
    7e1c:	d021      	beq.n	7e62 <usbdc_get_req+0x6a>
    7e1e:	e026      	b.n	7e6e <usbdc_get_req+0x76>
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    7e20:	683a      	ldr	r2, [r7, #0]
    7e22:	1dfb      	adds	r3, r7, #7
    7e24:	781b      	ldrb	r3, [r3, #0]
    7e26:	0011      	movs	r1, r2
    7e28:	0018      	movs	r0, r3
    7e2a:	4b13      	ldr	r3, [pc, #76]	; (7e78 <usbdc_get_req+0x80>)
    7e2c:	4798      	blx	r3
    7e2e:	0003      	movs	r3, r0
    7e30:	e01e      	b.n	7e70 <usbdc_get_req+0x78>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    7e32:	4b12      	ldr	r3, [pc, #72]	; (7e7c <usbdc_get_req+0x84>)
    7e34:	695b      	ldr	r3, [r3, #20]
    7e36:	4a11      	ldr	r2, [pc, #68]	; (7e7c <usbdc_get_req+0x84>)
    7e38:	7ed2      	ldrb	r2, [r2, #27]
    7e3a:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    7e3c:	4b0f      	ldr	r3, [pc, #60]	; (7e7c <usbdc_get_req+0x84>)
    7e3e:	6959      	ldr	r1, [r3, #20]
    7e40:	1dfb      	adds	r3, r7, #7
    7e42:	7818      	ldrb	r0, [r3, #0]
    7e44:	2300      	movs	r3, #0
    7e46:	2201      	movs	r2, #1
    7e48:	4c0d      	ldr	r4, [pc, #52]	; (7e80 <usbdc_get_req+0x88>)
    7e4a:	47a0      	blx	r4
		return true;
    7e4c:	2301      	movs	r3, #1
    7e4e:	e00f      	b.n	7e70 <usbdc_get_req+0x78>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    7e50:	683a      	ldr	r2, [r7, #0]
    7e52:	1dfb      	adds	r3, r7, #7
    7e54:	781b      	ldrb	r3, [r3, #0]
    7e56:	0011      	movs	r1, r2
    7e58:	0018      	movs	r0, r3
    7e5a:	4b0a      	ldr	r3, [pc, #40]	; (7e84 <usbdc_get_req+0x8c>)
    7e5c:	4798      	blx	r3
    7e5e:	0003      	movs	r3, r0
    7e60:	e006      	b.n	7e70 <usbdc_get_req+0x78>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    7e62:	683b      	ldr	r3, [r7, #0]
    7e64:	0018      	movs	r0, r3
    7e66:	4b08      	ldr	r3, [pc, #32]	; (7e88 <usbdc_get_req+0x90>)
    7e68:	4798      	blx	r3
    7e6a:	0003      	movs	r3, r0
    7e6c:	e000      	b.n	7e70 <usbdc_get_req+0x78>
	default:
		return false;
    7e6e:	2300      	movs	r3, #0
	}
}
    7e70:	0018      	movs	r0, r3
    7e72:	46bd      	mov	sp, r7
    7e74:	b003      	add	sp, #12
    7e76:	bd90      	pop	{r4, r7, pc}
    7e78:	00007c45 	.word	0x00007c45
    7e7c:	20001200 	.word	0x20001200
    7e80:	00008685 	.word	0x00008685
    7e84:	00007cc9 	.word	0x00007cc9
    7e88:	00007d61 	.word	0x00007d61

00007e8c <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    7e8c:	b590      	push	{r4, r7, lr}
    7e8e:	b083      	sub	sp, #12
    7e90:	af00      	add	r7, sp, #0
    7e92:	0002      	movs	r2, r0
    7e94:	6039      	str	r1, [r7, #0]
    7e96:	1dfb      	adds	r3, r7, #7
    7e98:	701a      	strb	r2, [r3, #0]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    7e9a:	683b      	ldr	r3, [r7, #0]
    7e9c:	781b      	ldrb	r3, [r3, #0]
    7e9e:	001a      	movs	r2, r3
    7ea0:	231f      	movs	r3, #31
    7ea2:	4013      	ands	r3, r2
    7ea4:	2b02      	cmp	r3, #2
    7ea6:	d11d      	bne.n	7ee4 <usbdc_clear_ftr_req+0x58>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    7ea8:	683b      	ldr	r3, [r7, #0]
    7eaa:	799a      	ldrb	r2, [r3, #6]
    7eac:	79db      	ldrb	r3, [r3, #7]
    7eae:	021b      	lsls	r3, r3, #8
    7eb0:	4313      	orrs	r3, r2
    7eb2:	b29b      	uxth	r3, r3
    7eb4:	2b00      	cmp	r3, #0
    7eb6:	d001      	beq.n	7ebc <usbdc_clear_ftr_req+0x30>
			return false;
    7eb8:	2300      	movs	r3, #0
    7eba:	e014      	b.n	7ee6 <usbdc_clear_ftr_req+0x5a>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    7ebc:	683b      	ldr	r3, [r7, #0]
    7ebe:	791a      	ldrb	r2, [r3, #4]
    7ec0:	795b      	ldrb	r3, [r3, #5]
    7ec2:	021b      	lsls	r3, r3, #8
    7ec4:	4313      	orrs	r3, r2
    7ec6:	b29b      	uxth	r3, r3
    7ec8:	b2db      	uxtb	r3, r3
    7eca:	2100      	movs	r1, #0
    7ecc:	0018      	movs	r0, r3
    7ece:	4b08      	ldr	r3, [pc, #32]	; (7ef0 <usbdc_clear_ftr_req+0x64>)
    7ed0:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    7ed2:	1dfb      	adds	r3, r7, #7
    7ed4:	7818      	ldrb	r0, [r3, #0]
    7ed6:	2301      	movs	r3, #1
    7ed8:	2200      	movs	r2, #0
    7eda:	2100      	movs	r1, #0
    7edc:	4c05      	ldr	r4, [pc, #20]	; (7ef4 <usbdc_clear_ftr_req+0x68>)
    7ede:	47a0      	blx	r4
		return true;
    7ee0:	2301      	movs	r3, #1
    7ee2:	e000      	b.n	7ee6 <usbdc_clear_ftr_req+0x5a>
	default:
		return false;
    7ee4:	2300      	movs	r3, #0
	}
}
    7ee6:	0018      	movs	r0, r3
    7ee8:	46bd      	mov	sp, r7
    7eea:	b003      	add	sp, #12
    7eec:	bd90      	pop	{r4, r7, pc}
    7eee:	46c0      	nop			; (mov r8, r8)
    7ef0:	000029b1 	.word	0x000029b1
    7ef4:	00008685 	.word	0x00008685

00007ef8 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    7ef8:	b590      	push	{r4, r7, lr}
    7efa:	b083      	sub	sp, #12
    7efc:	af00      	add	r7, sp, #0
    7efe:	0002      	movs	r2, r0
    7f00:	6039      	str	r1, [r7, #0]
    7f02:	1dfb      	adds	r3, r7, #7
    7f04:	701a      	strb	r2, [r3, #0]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    7f06:	683b      	ldr	r3, [r7, #0]
    7f08:	781b      	ldrb	r3, [r3, #0]
    7f0a:	001a      	movs	r2, r3
    7f0c:	231f      	movs	r3, #31
    7f0e:	4013      	ands	r3, r2
    7f10:	2b02      	cmp	r3, #2
    7f12:	d11d      	bne.n	7f50 <usbdc_set_ftr_req+0x58>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    7f14:	683b      	ldr	r3, [r7, #0]
    7f16:	799a      	ldrb	r2, [r3, #6]
    7f18:	79db      	ldrb	r3, [r3, #7]
    7f1a:	021b      	lsls	r3, r3, #8
    7f1c:	4313      	orrs	r3, r2
    7f1e:	b29b      	uxth	r3, r3
    7f20:	2b00      	cmp	r3, #0
    7f22:	d001      	beq.n	7f28 <usbdc_set_ftr_req+0x30>
			return false;
    7f24:	2300      	movs	r3, #0
    7f26:	e014      	b.n	7f52 <usbdc_set_ftr_req+0x5a>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    7f28:	683b      	ldr	r3, [r7, #0]
    7f2a:	791a      	ldrb	r2, [r3, #4]
    7f2c:	795b      	ldrb	r3, [r3, #5]
    7f2e:	021b      	lsls	r3, r3, #8
    7f30:	4313      	orrs	r3, r2
    7f32:	b29b      	uxth	r3, r3
    7f34:	b2db      	uxtb	r3, r3
    7f36:	2101      	movs	r1, #1
    7f38:	0018      	movs	r0, r3
    7f3a:	4b08      	ldr	r3, [pc, #32]	; (7f5c <usbdc_set_ftr_req+0x64>)
    7f3c:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    7f3e:	1dfb      	adds	r3, r7, #7
    7f40:	7818      	ldrb	r0, [r3, #0]
    7f42:	2301      	movs	r3, #1
    7f44:	2200      	movs	r2, #0
    7f46:	2100      	movs	r1, #0
    7f48:	4c05      	ldr	r4, [pc, #20]	; (7f60 <usbdc_set_ftr_req+0x68>)
    7f4a:	47a0      	blx	r4
		return true;
    7f4c:	2301      	movs	r3, #1
    7f4e:	e000      	b.n	7f52 <usbdc_set_ftr_req+0x5a>
	default:
		return false;
    7f50:	2300      	movs	r3, #0
	}
}
    7f52:	0018      	movs	r0, r3
    7f54:	46bd      	mov	sp, r7
    7f56:	b003      	add	sp, #12
    7f58:	bd90      	pop	{r4, r7, pc}
    7f5a:	46c0      	nop			; (mov r8, r8)
    7f5c:	000029b1 	.word	0x000029b1
    7f60:	00008685 	.word	0x00008685

00007f64 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    7f64:	b580      	push	{r7, lr}
    7f66:	b082      	sub	sp, #8
    7f68:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    7f6a:	4b0a      	ldr	r3, [pc, #40]	; (7f94 <usbdc_unconfig+0x30>)
    7f6c:	691b      	ldr	r3, [r3, #16]
    7f6e:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    7f70:	e008      	b.n	7f84 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    7f72:	687b      	ldr	r3, [r7, #4]
    7f74:	685b      	ldr	r3, [r3, #4]
    7f76:	6878      	ldr	r0, [r7, #4]
    7f78:	2200      	movs	r2, #0
    7f7a:	2101      	movs	r1, #1
    7f7c:	4798      	blx	r3
		func = func->next;
    7f7e:	687b      	ldr	r3, [r7, #4]
    7f80:	681b      	ldr	r3, [r3, #0]
    7f82:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    7f84:	687b      	ldr	r3, [r7, #4]
    7f86:	2b00      	cmp	r3, #0
    7f88:	d1f3      	bne.n	7f72 <usbdc_unconfig+0xe>
	}
}
    7f8a:	46c0      	nop			; (mov r8, r8)
    7f8c:	46bd      	mov	sp, r7
    7f8e:	b002      	add	sp, #8
    7f90:	bd80      	pop	{r7, pc}
    7f92:	46c0      	nop			; (mov r8, r8)
    7f94:	20001200 	.word	0x20001200

00007f98 <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    7f98:	b590      	push	{r4, r7, lr}
    7f9a:	b089      	sub	sp, #36	; 0x24
    7f9c:	af00      	add	r7, sp, #0
    7f9e:	0002      	movs	r2, r0
    7fa0:	1dfb      	adds	r3, r7, #7
    7fa2:	701a      	strb	r2, [r3, #0]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    7fa4:	2300      	movs	r3, #0
    7fa6:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    7fa8:	2317      	movs	r3, #23
    7faa:	18fb      	adds	r3, r7, r3
    7fac:	22ff      	movs	r2, #255	; 0xff
    7fae:	701a      	strb	r2, [r3, #0]

	if (cfg_value == 0) {
    7fb0:	1dfb      	adds	r3, r7, #7
    7fb2:	781b      	ldrb	r3, [r3, #0]
    7fb4:	2b00      	cmp	r3, #0
    7fb6:	d103      	bne.n	7fc0 <usbdc_set_config+0x28>
		usbdc_unconfig();
    7fb8:	4b3e      	ldr	r3, [pc, #248]	; (80b4 <usbdc_set_config+0x11c>)
    7fba:	4798      	blx	r3
		return true;
    7fbc:	2301      	movs	r3, #1
    7fbe:	e075      	b.n	80ac <usbdc_set_config+0x114>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    7fc0:	69bb      	ldr	r3, [r7, #24]
    7fc2:	2b00      	cmp	r3, #0
    7fc4:	d10c      	bne.n	7fe0 <usbdc_set_config+0x48>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    7fc6:	4b3c      	ldr	r3, [pc, #240]	; (80b8 <usbdc_set_config+0x120>)
    7fc8:	681b      	ldr	r3, [r3, #0]
    7fca:	6818      	ldr	r0, [r3, #0]
    7fcc:	4b3a      	ldr	r3, [pc, #232]	; (80b8 <usbdc_set_config+0x120>)
    7fce:	681b      	ldr	r3, [r3, #0]
    7fd0:	6859      	ldr	r1, [r3, #4]
    7fd2:	1dfb      	adds	r3, r7, #7
    7fd4:	781b      	ldrb	r3, [r3, #0]
    7fd6:	001a      	movs	r2, r3
    7fd8:	4b38      	ldr	r3, [pc, #224]	; (80bc <usbdc_set_config+0x124>)
    7fda:	4798      	blx	r3
    7fdc:	0003      	movs	r3, r0
    7fde:	61bb      	str	r3, [r7, #24]
	}
	if (NULL == cfg_desc) {
    7fe0:	69bb      	ldr	r3, [r7, #24]
    7fe2:	2b00      	cmp	r3, #0
    7fe4:	d101      	bne.n	7fea <usbdc_set_config+0x52>
		return false;
    7fe6:	2300      	movs	r3, #0
    7fe8:	e060      	b.n	80ac <usbdc_set_config+0x114>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    7fea:	2314      	movs	r3, #20
    7fec:	18fc      	adds	r4, r7, r3
    7fee:	69bb      	ldr	r3, [r7, #24]
    7ff0:	0018      	movs	r0, r3
    7ff2:	4b33      	ldr	r3, [pc, #204]	; (80c0 <usbdc_set_config+0x128>)
    7ff4:	4798      	blx	r3
    7ff6:	0003      	movs	r3, r0
    7ff8:	8023      	strh	r3, [r4, #0]
	desc.eod  = cfg_desc + total_len;
    7ffa:	2314      	movs	r3, #20
    7ffc:	18fb      	adds	r3, r7, r3
    7ffe:	881b      	ldrh	r3, [r3, #0]
    8000:	69ba      	ldr	r2, [r7, #24]
    8002:	18d2      	adds	r2, r2, r3
    8004:	230c      	movs	r3, #12
    8006:	18fb      	adds	r3, r7, r3
    8008:	605a      	str	r2, [r3, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    800a:	230c      	movs	r3, #12
    800c:	18fb      	adds	r3, r7, r3
    800e:	6859      	ldr	r1, [r3, #4]
    8010:	69bb      	ldr	r3, [r7, #24]
    8012:	2204      	movs	r2, #4
    8014:	0018      	movs	r0, r3
    8016:	4b2b      	ldr	r3, [pc, #172]	; (80c4 <usbdc_set_config+0x12c>)
    8018:	4798      	blx	r3
    801a:	0002      	movs	r2, r0
    801c:	230c      	movs	r3, #12
    801e:	18fb      	adds	r3, r7, r3
    8020:	601a      	str	r2, [r3, #0]

	while (NULL != desc.sod) {
    8022:	e03d      	b.n	80a0 <usbdc_set_config+0x108>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    8024:	230c      	movs	r3, #12
    8026:	18fb      	adds	r3, r7, r3
    8028:	681b      	ldr	r3, [r3, #0]
    802a:	3302      	adds	r3, #2
    802c:	781b      	ldrb	r3, [r3, #0]
    802e:	2217      	movs	r2, #23
    8030:	18ba      	adds	r2, r7, r2
    8032:	7812      	ldrb	r2, [r2, #0]
    8034:	429a      	cmp	r2, r3
    8036:	d01b      	beq.n	8070 <usbdc_set_config+0xd8>
			last_iface = desc.sod[2];
    8038:	230c      	movs	r3, #12
    803a:	18fb      	adds	r3, r7, r3
    803c:	681a      	ldr	r2, [r3, #0]
    803e:	2317      	movs	r3, #23
    8040:	18fb      	adds	r3, r7, r3
    8042:	7892      	ldrb	r2, [r2, #2]
    8044:	701a      	strb	r2, [r3, #0]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    8046:	4b1c      	ldr	r3, [pc, #112]	; (80b8 <usbdc_set_config+0x120>)
    8048:	691b      	ldr	r3, [r3, #16]
    804a:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    804c:	e00b      	b.n	8066 <usbdc_set_config+0xce>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    804e:	69fb      	ldr	r3, [r7, #28]
    8050:	685b      	ldr	r3, [r3, #4]
    8052:	220c      	movs	r2, #12
    8054:	18ba      	adds	r2, r7, r2
    8056:	69f8      	ldr	r0, [r7, #28]
    8058:	2100      	movs	r1, #0
    805a:	4798      	blx	r3
    805c:	1e03      	subs	r3, r0, #0
    805e:	d006      	beq.n	806e <usbdc_set_config+0xd6>
					func = func->next;
    8060:	69fb      	ldr	r3, [r7, #28]
    8062:	681b      	ldr	r3, [r3, #0]
    8064:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    8066:	69fb      	ldr	r3, [r7, #28]
    8068:	2b00      	cmp	r3, #0
    806a:	d1f0      	bne.n	804e <usbdc_set_config+0xb6>
    806c:	e000      	b.n	8070 <usbdc_set_config+0xd8>
				} else {
					break;
    806e:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    8070:	230c      	movs	r3, #12
    8072:	18fb      	adds	r3, r7, r3
    8074:	681b      	ldr	r3, [r3, #0]
    8076:	0018      	movs	r0, r3
    8078:	4b13      	ldr	r3, [pc, #76]	; (80c8 <usbdc_set_config+0x130>)
    807a:	4798      	blx	r3
    807c:	0002      	movs	r2, r0
    807e:	230c      	movs	r3, #12
    8080:	18fb      	adds	r3, r7, r3
    8082:	601a      	str	r2, [r3, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    8084:	230c      	movs	r3, #12
    8086:	18fb      	adds	r3, r7, r3
    8088:	6818      	ldr	r0, [r3, #0]
    808a:	230c      	movs	r3, #12
    808c:	18fb      	adds	r3, r7, r3
    808e:	685b      	ldr	r3, [r3, #4]
    8090:	2204      	movs	r2, #4
    8092:	0019      	movs	r1, r3
    8094:	4b0b      	ldr	r3, [pc, #44]	; (80c4 <usbdc_set_config+0x12c>)
    8096:	4798      	blx	r3
    8098:	0002      	movs	r2, r0
    809a:	230c      	movs	r3, #12
    809c:	18fb      	adds	r3, r7, r3
    809e:	601a      	str	r2, [r3, #0]
	while (NULL != desc.sod) {
    80a0:	230c      	movs	r3, #12
    80a2:	18fb      	adds	r3, r7, r3
    80a4:	681b      	ldr	r3, [r3, #0]
    80a6:	2b00      	cmp	r3, #0
    80a8:	d1bc      	bne.n	8024 <usbdc_set_config+0x8c>
	}
	return true;
    80aa:	2301      	movs	r3, #1
}
    80ac:	0018      	movs	r0, r3
    80ae:	46bd      	mov	sp, r7
    80b0:	b009      	add	sp, #36	; 0x24
    80b2:	bd90      	pop	{r4, r7, pc}
    80b4:	00007f65 	.word	0x00007f65
    80b8:	20001200 	.word	0x20001200
    80bc:	00008a0d 	.word	0x00008a0d
    80c0:	000079e5 	.word	0x000079e5
    80c4:	0000893d 	.word	0x0000893d
    80c8:	000079c1 	.word	0x000079c1

000080cc <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    80cc:	b580      	push	{r7, lr}
    80ce:	b082      	sub	sp, #8
    80d0:	af00      	add	r7, sp, #0
    80d2:	0002      	movs	r2, r0
    80d4:	1dfb      	adds	r3, r7, #7
    80d6:	701a      	strb	r2, [r3, #0]
	usb_d_set_address(addr);
    80d8:	1dfb      	adds	r3, r7, #7
    80da:	781b      	ldrb	r3, [r3, #0]
    80dc:	0018      	movs	r0, r3
    80de:	4b03      	ldr	r3, [pc, #12]	; (80ec <usbdc_set_address+0x20>)
    80e0:	4798      	blx	r3
}
    80e2:	46c0      	nop			; (mov r8, r8)
    80e4:	46bd      	mov	sp, r7
    80e6:	b002      	add	sp, #8
    80e8:	bd80      	pop	{r7, pc}
    80ea:	46c0      	nop			; (mov r8, r8)
    80ec:	0000257d 	.word	0x0000257d

000080f0 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    80f0:	b590      	push	{r4, r7, lr}
    80f2:	b087      	sub	sp, #28
    80f4:	af00      	add	r7, sp, #0
    80f6:	0002      	movs	r2, r0
    80f8:	1dbb      	adds	r3, r7, #6
    80fa:	801a      	strh	r2, [r3, #0]
    80fc:	1d3b      	adds	r3, r7, #4
    80fe:	1c0a      	adds	r2, r1, #0
    8100:	801a      	strh	r2, [r3, #0]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    8102:	2300      	movs	r3, #0
    8104:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    8106:	693b      	ldr	r3, [r7, #16]
    8108:	2b00      	cmp	r3, #0
    810a:	d10c      	bne.n	8126 <usbdc_set_interface+0x36>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    810c:	4b4f      	ldr	r3, [pc, #316]	; (824c <usbdc_set_interface+0x15c>)
    810e:	681b      	ldr	r3, [r3, #0]
    8110:	6818      	ldr	r0, [r3, #0]
    8112:	4b4e      	ldr	r3, [pc, #312]	; (824c <usbdc_set_interface+0x15c>)
    8114:	681b      	ldr	r3, [r3, #0]
    8116:	6859      	ldr	r1, [r3, #4]
    8118:	4b4c      	ldr	r3, [pc, #304]	; (824c <usbdc_set_interface+0x15c>)
    811a:	7edb      	ldrb	r3, [r3, #27]
    811c:	001a      	movs	r2, r3
    811e:	4b4c      	ldr	r3, [pc, #304]	; (8250 <usbdc_set_interface+0x160>)
    8120:	4798      	blx	r3
    8122:	0003      	movs	r3, r0
    8124:	613b      	str	r3, [r7, #16]
	}
	if (NULL == ifc) {
    8126:	693b      	ldr	r3, [r7, #16]
    8128:	2b00      	cmp	r3, #0
    812a:	d101      	bne.n	8130 <usbdc_set_interface+0x40>
		return false;
    812c:	2300      	movs	r3, #0
    812e:	e088      	b.n	8242 <usbdc_set_interface+0x152>
	}
	desc.sod = ifc;
    8130:	2308      	movs	r3, #8
    8132:	18fb      	adds	r3, r7, r3
    8134:	693a      	ldr	r2, [r7, #16]
    8136:	601a      	str	r2, [r3, #0]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    8138:	693b      	ldr	r3, [r7, #16]
    813a:	0018      	movs	r0, r3
    813c:	4b45      	ldr	r3, [pc, #276]	; (8254 <usbdc_set_interface+0x164>)
    813e:	4798      	blx	r3
    8140:	0003      	movs	r3, r0
    8142:	001a      	movs	r2, r3
    8144:	693b      	ldr	r3, [r7, #16]
    8146:	189a      	adds	r2, r3, r2
    8148:	2308      	movs	r3, #8
    814a:	18fb      	adds	r3, r7, r3
    814c:	605a      	str	r2, [r3, #4]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    814e:	2308      	movs	r3, #8
    8150:	18fb      	adds	r3, r7, r3
    8152:	6818      	ldr	r0, [r3, #0]
    8154:	2308      	movs	r3, #8
    8156:	18fb      	adds	r3, r7, r3
    8158:	685b      	ldr	r3, [r3, #4]
    815a:	2204      	movs	r2, #4
    815c:	0019      	movs	r1, r3
    815e:	4b3e      	ldr	r3, [pc, #248]	; (8258 <usbdc_set_interface+0x168>)
    8160:	4798      	blx	r3
    8162:	0003      	movs	r3, r0
    8164:	613b      	str	r3, [r7, #16]
    8166:	693b      	ldr	r3, [r7, #16]
    8168:	2b00      	cmp	r3, #0
    816a:	d11c      	bne.n	81a6 <usbdc_set_interface+0xb6>
		return false;
    816c:	2300      	movs	r3, #0
    816e:	e068      	b.n	8242 <usbdc_set_interface+0x152>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    8170:	2308      	movs	r3, #8
    8172:	18fb      	adds	r3, r7, r3
    8174:	681b      	ldr	r3, [r3, #0]
    8176:	0018      	movs	r0, r3
    8178:	4b38      	ldr	r3, [pc, #224]	; (825c <usbdc_set_interface+0x16c>)
    817a:	4798      	blx	r3
    817c:	0002      	movs	r2, r0
    817e:	2308      	movs	r3, #8
    8180:	18fb      	adds	r3, r7, r3
    8182:	601a      	str	r2, [r3, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    8184:	2308      	movs	r3, #8
    8186:	18fb      	adds	r3, r7, r3
    8188:	6818      	ldr	r0, [r3, #0]
    818a:	2308      	movs	r3, #8
    818c:	18fb      	adds	r3, r7, r3
    818e:	685b      	ldr	r3, [r3, #4]
    8190:	2204      	movs	r2, #4
    8192:	0019      	movs	r1, r3
    8194:	4b30      	ldr	r3, [pc, #192]	; (8258 <usbdc_set_interface+0x168>)
    8196:	4798      	blx	r3
    8198:	0003      	movs	r3, r0
    819a:	613b      	str	r3, [r7, #16]
		if (NULL == ifc) {
    819c:	693b      	ldr	r3, [r7, #16]
    819e:	2b00      	cmp	r3, #0
    81a0:	d101      	bne.n	81a6 <usbdc_set_interface+0xb6>
			return false;
    81a2:	2300      	movs	r3, #0
    81a4:	e04d      	b.n	8242 <usbdc_set_interface+0x152>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    81a6:	693b      	ldr	r3, [r7, #16]
    81a8:	3302      	adds	r3, #2
    81aa:	781b      	ldrb	r3, [r3, #0]
    81ac:	b29b      	uxth	r3, r3
    81ae:	1d3a      	adds	r2, r7, #4
    81b0:	8812      	ldrh	r2, [r2, #0]
    81b2:	429a      	cmp	r2, r3
    81b4:	d1dc      	bne.n	8170 <usbdc_set_interface+0x80>
    81b6:	693b      	ldr	r3, [r7, #16]
    81b8:	3303      	adds	r3, #3
    81ba:	781b      	ldrb	r3, [r3, #0]
    81bc:	b29b      	uxth	r3, r3
    81be:	1dba      	adds	r2, r7, #6
    81c0:	8812      	ldrh	r2, [r2, #0]
    81c2:	429a      	cmp	r2, r3
    81c4:	d1d4      	bne.n	8170 <usbdc_set_interface+0x80>
		}
	}

	desc.sod = ifc;
    81c6:	2308      	movs	r3, #8
    81c8:	18fb      	adds	r3, r7, r3
    81ca:	693a      	ldr	r2, [r7, #16]
    81cc:	601a      	str	r2, [r3, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    81ce:	4b1f      	ldr	r3, [pc, #124]	; (824c <usbdc_set_interface+0x15c>)
    81d0:	691b      	ldr	r3, [r3, #16]
    81d2:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    81d4:	e031      	b.n	823a <usbdc_set_interface+0x14a>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    81d6:	697b      	ldr	r3, [r7, #20]
    81d8:	685b      	ldr	r3, [r3, #4]
    81da:	2208      	movs	r2, #8
    81dc:	18ba      	adds	r2, r7, r2
    81de:	6978      	ldr	r0, [r7, #20]
    81e0:	2101      	movs	r1, #1
    81e2:	4798      	blx	r3
    81e4:	1e03      	subs	r3, r0, #0
    81e6:	d003      	beq.n	81f0 <usbdc_set_interface+0x100>
			func = func->next;
    81e8:	697b      	ldr	r3, [r7, #20]
    81ea:	681b      	ldr	r3, [r3, #0]
    81ec:	617b      	str	r3, [r7, #20]
    81ee:	e024      	b.n	823a <usbdc_set_interface+0x14a>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    81f0:	697b      	ldr	r3, [r7, #20]
    81f2:	685b      	ldr	r3, [r3, #4]
    81f4:	2208      	movs	r2, #8
    81f6:	18ba      	adds	r2, r7, r2
    81f8:	6978      	ldr	r0, [r7, #20]
    81fa:	2100      	movs	r1, #0
    81fc:	4798      	blx	r3
    81fe:	1e03      	subs	r3, r0, #0
    8200:	d119      	bne.n	8236 <usbdc_set_interface+0x146>
			if (alt_set) {
    8202:	1dbb      	adds	r3, r7, #6
    8204:	881b      	ldrh	r3, [r3, #0]
    8206:	2b00      	cmp	r3, #0
    8208:	d00d      	beq.n	8226 <usbdc_set_interface+0x136>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    820a:	4b10      	ldr	r3, [pc, #64]	; (824c <usbdc_set_interface+0x15c>)
    820c:	7f5b      	ldrb	r3, [r3, #29]
    820e:	b25a      	sxtb	r2, r3
    8210:	1d3b      	adds	r3, r7, #4
    8212:	881b      	ldrh	r3, [r3, #0]
    8214:	2101      	movs	r1, #1
    8216:	4099      	lsls	r1, r3
    8218:	000b      	movs	r3, r1
    821a:	b25b      	sxtb	r3, r3
    821c:	4313      	orrs	r3, r2
    821e:	b25b      	sxtb	r3, r3
    8220:	b2da      	uxtb	r2, r3
    8222:	4b0a      	ldr	r3, [pc, #40]	; (824c <usbdc_set_interface+0x15c>)
    8224:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    8226:	2300      	movs	r3, #0
    8228:	2200      	movs	r2, #0
    822a:	2100      	movs	r1, #0
    822c:	2000      	movs	r0, #0
    822e:	4c0c      	ldr	r4, [pc, #48]	; (8260 <usbdc_set_interface+0x170>)
    8230:	47a0      	blx	r4
			return true;
    8232:	2301      	movs	r3, #1
    8234:	e005      	b.n	8242 <usbdc_set_interface+0x152>
		} else {
			return false;
    8236:	2300      	movs	r3, #0
    8238:	e003      	b.n	8242 <usbdc_set_interface+0x152>
	while (NULL != func) {
    823a:	697b      	ldr	r3, [r7, #20]
    823c:	2b00      	cmp	r3, #0
    823e:	d1ca      	bne.n	81d6 <usbdc_set_interface+0xe6>
		}
	}

	return false;
    8240:	2300      	movs	r3, #0
}
    8242:	0018      	movs	r0, r3
    8244:	46bd      	mov	sp, r7
    8246:	b007      	add	sp, #28
    8248:	bd90      	pop	{r4, r7, pc}
    824a:	46c0      	nop			; (mov r8, r8)
    824c:	20001200 	.word	0x20001200
    8250:	00008a0d 	.word	0x00008a0d
    8254:	000079e5 	.word	0x000079e5
    8258:	0000893d 	.word	0x0000893d
    825c:	000079c1 	.word	0x000079c1
    8260:	00008685 	.word	0x00008685

00008264 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    8264:	b590      	push	{r4, r7, lr}
    8266:	b083      	sub	sp, #12
    8268:	af00      	add	r7, sp, #0
    826a:	0002      	movs	r2, r0
    826c:	6039      	str	r1, [r7, #0]
    826e:	1dfb      	adds	r3, r7, #7
    8270:	701a      	strb	r2, [r3, #0]
	switch (req->bRequest) {
    8272:	683b      	ldr	r3, [r7, #0]
    8274:	785b      	ldrb	r3, [r3, #1]
    8276:	2b0b      	cmp	r3, #11
    8278:	d852      	bhi.n	8320 <usbdc_set_req+0xbc>
    827a:	009a      	lsls	r2, r3, #2
    827c:	4b2b      	ldr	r3, [pc, #172]	; (832c <usbdc_set_req+0xc8>)
    827e:	18d3      	adds	r3, r2, r3
    8280:	681b      	ldr	r3, [r3, #0]
    8282:	469f      	mov	pc, r3
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    8284:	1dfb      	adds	r3, r7, #7
    8286:	7818      	ldrb	r0, [r3, #0]
    8288:	2301      	movs	r3, #1
    828a:	2200      	movs	r2, #0
    828c:	2100      	movs	r1, #0
    828e:	4c28      	ldr	r4, [pc, #160]	; (8330 <usbdc_set_req+0xcc>)
    8290:	47a0      	blx	r4
    8292:	0003      	movs	r3, r0
    8294:	425a      	negs	r2, r3
    8296:	4153      	adcs	r3, r2
    8298:	b2db      	uxtb	r3, r3
    829a:	e042      	b.n	8322 <usbdc_set_req+0xbe>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    829c:	683b      	ldr	r3, [r7, #0]
    829e:	789a      	ldrb	r2, [r3, #2]
    82a0:	78db      	ldrb	r3, [r3, #3]
    82a2:	021b      	lsls	r3, r3, #8
    82a4:	4313      	orrs	r3, r2
    82a6:	b29b      	uxth	r3, r3
    82a8:	b2db      	uxtb	r3, r3
    82aa:	0018      	movs	r0, r3
    82ac:	4b21      	ldr	r3, [pc, #132]	; (8334 <usbdc_set_req+0xd0>)
    82ae:	4798      	blx	r3
    82b0:	0003      	movs	r3, r0
    82b2:	001a      	movs	r2, r3
    82b4:	2301      	movs	r3, #1
    82b6:	4053      	eors	r3, r2
    82b8:	b2db      	uxtb	r3, r3
    82ba:	2b00      	cmp	r3, #0
    82bc:	d001      	beq.n	82c2 <usbdc_set_req+0x5e>
			return false;
    82be:	2300      	movs	r3, #0
    82c0:	e02f      	b.n	8322 <usbdc_set_req+0xbe>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    82c2:	1dfb      	adds	r3, r7, #7
    82c4:	7818      	ldrb	r0, [r3, #0]
    82c6:	2301      	movs	r3, #1
    82c8:	2200      	movs	r2, #0
    82ca:	2100      	movs	r1, #0
    82cc:	4c18      	ldr	r4, [pc, #96]	; (8330 <usbdc_set_req+0xcc>)
    82ce:	47a0      	blx	r4
    82d0:	0003      	movs	r3, r0
    82d2:	425a      	negs	r2, r3
    82d4:	4153      	adcs	r3, r2
    82d6:	b2db      	uxtb	r3, r3
    82d8:	e023      	b.n	8322 <usbdc_set_req+0xbe>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    82da:	683a      	ldr	r2, [r7, #0]
    82dc:	1dfb      	adds	r3, r7, #7
    82de:	781b      	ldrb	r3, [r3, #0]
    82e0:	0011      	movs	r1, r2
    82e2:	0018      	movs	r0, r3
    82e4:	4b14      	ldr	r3, [pc, #80]	; (8338 <usbdc_set_req+0xd4>)
    82e6:	4798      	blx	r3
    82e8:	0003      	movs	r3, r0
    82ea:	e01a      	b.n	8322 <usbdc_set_req+0xbe>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    82ec:	683a      	ldr	r2, [r7, #0]
    82ee:	1dfb      	adds	r3, r7, #7
    82f0:	781b      	ldrb	r3, [r3, #0]
    82f2:	0011      	movs	r1, r2
    82f4:	0018      	movs	r0, r3
    82f6:	4b11      	ldr	r3, [pc, #68]	; (833c <usbdc_set_req+0xd8>)
    82f8:	4798      	blx	r3
    82fa:	0003      	movs	r3, r0
    82fc:	e011      	b.n	8322 <usbdc_set_req+0xbe>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    82fe:	683b      	ldr	r3, [r7, #0]
    8300:	789a      	ldrb	r2, [r3, #2]
    8302:	78db      	ldrb	r3, [r3, #3]
    8304:	021b      	lsls	r3, r3, #8
    8306:	4313      	orrs	r3, r2
    8308:	b298      	uxth	r0, r3
    830a:	683b      	ldr	r3, [r7, #0]
    830c:	791a      	ldrb	r2, [r3, #4]
    830e:	795b      	ldrb	r3, [r3, #5]
    8310:	021b      	lsls	r3, r3, #8
    8312:	4313      	orrs	r3, r2
    8314:	b29b      	uxth	r3, r3
    8316:	0019      	movs	r1, r3
    8318:	4b09      	ldr	r3, [pc, #36]	; (8340 <usbdc_set_req+0xdc>)
    831a:	4798      	blx	r3
    831c:	0003      	movs	r3, r0
    831e:	e000      	b.n	8322 <usbdc_set_req+0xbe>
	default:
		return false;
    8320:	2300      	movs	r3, #0
	}
}
    8322:	0018      	movs	r0, r3
    8324:	46bd      	mov	sp, r7
    8326:	b003      	add	sp, #12
    8328:	bd90      	pop	{r4, r7, pc}
    832a:	46c0      	nop			; (mov r8, r8)
    832c:	0001229c 	.word	0x0001229c
    8330:	00008685 	.word	0x00008685
    8334:	00007f99 	.word	0x00007f99
    8338:	00007e8d 	.word	0x00007e8d
    833c:	00007ef9 	.word	0x00007ef9
    8340:	000080f1 	.word	0x000080f1

00008344 <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    8344:	b580      	push	{r7, lr}
    8346:	b082      	sub	sp, #8
    8348:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    834a:	4b0a      	ldr	r3, [pc, #40]	; (8374 <usbdc_sof_notify+0x30>)
    834c:	685b      	ldr	r3, [r3, #4]
    834e:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    8350:	e009      	b.n	8366 <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    8352:	687b      	ldr	r3, [r7, #4]
    8354:	685b      	ldr	r3, [r3, #4]
    8356:	2b00      	cmp	r3, #0
    8358:	d002      	beq.n	8360 <usbdc_sof_notify+0x1c>
			sof->cb();
    835a:	687b      	ldr	r3, [r7, #4]
    835c:	685b      	ldr	r3, [r3, #4]
    835e:	4798      	blx	r3
		}
		sof = sof->next;
    8360:	687b      	ldr	r3, [r7, #4]
    8362:	681b      	ldr	r3, [r3, #0]
    8364:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    8366:	687b      	ldr	r3, [r7, #4]
    8368:	2b00      	cmp	r3, #0
    836a:	d1f2      	bne.n	8352 <usbdc_sof_notify+0xe>
	}
}
    836c:	46c0      	nop			; (mov r8, r8)
    836e:	46bd      	mov	sp, r7
    8370:	b002      	add	sp, #8
    8372:	bd80      	pop	{r7, pc}
    8374:	20001200 	.word	0x20001200

00008378 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    8378:	b580      	push	{r7, lr}
    837a:	b084      	sub	sp, #16
    837c:	af00      	add	r7, sp, #0
    837e:	0002      	movs	r2, r0
    8380:	6039      	str	r1, [r7, #0]
    8382:	1dfb      	adds	r3, r7, #7
    8384:	701a      	strb	r2, [r3, #0]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    8386:	4b0c      	ldr	r3, [pc, #48]	; (83b8 <usbdc_change_notify+0x40>)
    8388:	68db      	ldr	r3, [r3, #12]
    838a:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    838c:	e00d      	b.n	83aa <usbdc_change_notify+0x32>
		if (NULL != cg->cb) {
    838e:	68fb      	ldr	r3, [r7, #12]
    8390:	685b      	ldr	r3, [r3, #4]
    8392:	2b00      	cmp	r3, #0
    8394:	d006      	beq.n	83a4 <usbdc_change_notify+0x2c>
			cg->cb(change, value);
    8396:	68fb      	ldr	r3, [r7, #12]
    8398:	685b      	ldr	r3, [r3, #4]
    839a:	6839      	ldr	r1, [r7, #0]
    839c:	1dfa      	adds	r2, r7, #7
    839e:	7812      	ldrb	r2, [r2, #0]
    83a0:	0010      	movs	r0, r2
    83a2:	4798      	blx	r3
		}
		cg = cg->next;
    83a4:	68fb      	ldr	r3, [r7, #12]
    83a6:	681b      	ldr	r3, [r3, #0]
    83a8:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    83aa:	68fb      	ldr	r3, [r7, #12]
    83ac:	2b00      	cmp	r3, #0
    83ae:	d1ee      	bne.n	838e <usbdc_change_notify+0x16>
	}
}
    83b0:	46c0      	nop			; (mov r8, r8)
    83b2:	46bd      	mov	sp, r7
    83b4:	b004      	add	sp, #16
    83b6:	bd80      	pop	{r7, pc}
    83b8:	20001200 	.word	0x20001200

000083bc <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    83bc:	b590      	push	{r4, r7, lr}
    83be:	b085      	sub	sp, #20
    83c0:	af00      	add	r7, sp, #0
    83c2:	6039      	str	r1, [r7, #0]
    83c4:	0011      	movs	r1, r2
    83c6:	1dfb      	adds	r3, r7, #7
    83c8:	1c02      	adds	r2, r0, #0
    83ca:	701a      	strb	r2, [r3, #0]
    83cc:	1dbb      	adds	r3, r7, #6
    83ce:	1c0a      	adds	r2, r1, #0
    83d0:	701a      	strb	r2, [r3, #0]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    83d2:	4b14      	ldr	r3, [pc, #80]	; (8424 <usbdc_request_handler+0x68>)
    83d4:	689b      	ldr	r3, [r3, #8]
    83d6:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    83d8:	e01c      	b.n	8414 <usbdc_request_handler+0x58>
		if (NULL != h->cb) {
    83da:	68fb      	ldr	r3, [r7, #12]
    83dc:	685b      	ldr	r3, [r3, #4]
    83de:	2b00      	cmp	r3, #0
    83e0:	d015      	beq.n	840e <usbdc_request_handler+0x52>
			rc = h->cb(ep, req, stage);
    83e2:	68fb      	ldr	r3, [r7, #12]
    83e4:	685b      	ldr	r3, [r3, #4]
    83e6:	1dba      	adds	r2, r7, #6
    83e8:	7814      	ldrb	r4, [r2, #0]
    83ea:	6839      	ldr	r1, [r7, #0]
    83ec:	1dfa      	adds	r2, r7, #7
    83ee:	7810      	ldrb	r0, [r2, #0]
    83f0:	0022      	movs	r2, r4
    83f2:	4798      	blx	r3
    83f4:	0003      	movs	r3, r0
    83f6:	60bb      	str	r3, [r7, #8]
			if (0 == rc) {
    83f8:	68bb      	ldr	r3, [r7, #8]
    83fa:	2b00      	cmp	r3, #0
    83fc:	d101      	bne.n	8402 <usbdc_request_handler+0x46>
				return true;
    83fe:	2301      	movs	r3, #1
    8400:	e00c      	b.n	841c <usbdc_request_handler+0x60>
			} else if (ERR_NOT_FOUND != rc) {
    8402:	68bb      	ldr	r3, [r7, #8]
    8404:	330a      	adds	r3, #10
    8406:	d002      	beq.n	840e <usbdc_request_handler+0x52>
				return -1;
    8408:	2301      	movs	r3, #1
    840a:	425b      	negs	r3, r3
    840c:	e006      	b.n	841c <usbdc_request_handler+0x60>
			}
		}
		h = h->next;
    840e:	68fb      	ldr	r3, [r7, #12]
    8410:	681b      	ldr	r3, [r3, #0]
    8412:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    8414:	68fb      	ldr	r3, [r7, #12]
    8416:	2b00      	cmp	r3, #0
    8418:	d1df      	bne.n	83da <usbdc_request_handler+0x1e>
	}
	return false;
    841a:	2300      	movs	r3, #0
}
    841c:	0018      	movs	r0, r3
    841e:	46bd      	mov	sp, r7
    8420:	b005      	add	sp, #20
    8422:	bd90      	pop	{r4, r7, pc}
    8424:	20001200 	.word	0x20001200

00008428 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    8428:	b580      	push	{r7, lr}
    842a:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    842c:	4b02      	ldr	r3, [pc, #8]	; (8438 <usbd_sof_cb+0x10>)
    842e:	4798      	blx	r3
}
    8430:	46c0      	nop			; (mov r8, r8)
    8432:	46bd      	mov	sp, r7
    8434:	bd80      	pop	{r7, pc}
    8436:	46c0      	nop			; (mov r8, r8)
    8438:	00008345 	.word	0x00008345

0000843c <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    843c:	b580      	push	{r7, lr}
    843e:	b082      	sub	sp, #8
    8440:	af00      	add	r7, sp, #0
    8442:	0002      	movs	r2, r0
    8444:	6039      	str	r1, [r7, #0]
    8446:	1dfb      	adds	r3, r7, #7
    8448:	701a      	strb	r2, [r3, #0]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    844a:	6839      	ldr	r1, [r7, #0]
    844c:	1dfb      	adds	r3, r7, #7
    844e:	781b      	ldrb	r3, [r3, #0]
    8450:	2200      	movs	r2, #0
    8452:	0018      	movs	r0, r3
    8454:	4b16      	ldr	r3, [pc, #88]	; (84b0 <usbdc_cb_ctl_req+0x74>)
    8456:	4798      	blx	r3
    8458:	0003      	movs	r3, r0
    845a:	1c5a      	adds	r2, r3, #1
    845c:	d00b      	beq.n	8476 <usbdc_cb_ctl_req+0x3a>
    845e:	2b01      	cmp	r3, #1
    8460:	d007      	beq.n	8472 <usbdc_cb_ctl_req+0x36>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    8462:	46c0      	nop			; (mov r8, r8)
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    8464:	683b      	ldr	r3, [r7, #0]
    8466:	781b      	ldrb	r3, [r3, #0]
    8468:	001a      	movs	r2, r3
    846a:	23e0      	movs	r3, #224	; 0xe0
    846c:	4013      	ands	r3, r2
    846e:	d007      	beq.n	8480 <usbdc_cb_ctl_req+0x44>
    8470:	e003      	b.n	847a <usbdc_cb_ctl_req+0x3e>
		return true;
    8472:	2301      	movs	r3, #1
    8474:	e017      	b.n	84a6 <usbdc_cb_ctl_req+0x6a>
		return false;
    8476:	2300      	movs	r3, #0
    8478:	e015      	b.n	84a6 <usbdc_cb_ctl_req+0x6a>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    847a:	2b80      	cmp	r3, #128	; 0x80
    847c:	d009      	beq.n	8492 <usbdc_cb_ctl_req+0x56>
    847e:	e011      	b.n	84a4 <usbdc_cb_ctl_req+0x68>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    8480:	683a      	ldr	r2, [r7, #0]
    8482:	1dfb      	adds	r3, r7, #7
    8484:	781b      	ldrb	r3, [r3, #0]
    8486:	0011      	movs	r1, r2
    8488:	0018      	movs	r0, r3
    848a:	4b0a      	ldr	r3, [pc, #40]	; (84b4 <usbdc_cb_ctl_req+0x78>)
    848c:	4798      	blx	r3
    848e:	0003      	movs	r3, r0
    8490:	e009      	b.n	84a6 <usbdc_cb_ctl_req+0x6a>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    8492:	683a      	ldr	r2, [r7, #0]
    8494:	1dfb      	adds	r3, r7, #7
    8496:	781b      	ldrb	r3, [r3, #0]
    8498:	0011      	movs	r1, r2
    849a:	0018      	movs	r0, r3
    849c:	4b06      	ldr	r3, [pc, #24]	; (84b8 <usbdc_cb_ctl_req+0x7c>)
    849e:	4798      	blx	r3
    84a0:	0003      	movs	r3, r0
    84a2:	e000      	b.n	84a6 <usbdc_cb_ctl_req+0x6a>
	default:
		return false;
    84a4:	2300      	movs	r3, #0
	}
}
    84a6:	0018      	movs	r0, r3
    84a8:	46bd      	mov	sp, r7
    84aa:	b002      	add	sp, #8
    84ac:	bd80      	pop	{r7, pc}
    84ae:	46c0      	nop			; (mov r8, r8)
    84b0:	000083bd 	.word	0x000083bd
    84b4:	00008265 	.word	0x00008265
    84b8:	00007df9 	.word	0x00007df9

000084bc <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    84bc:	b580      	push	{r7, lr}
    84be:	b082      	sub	sp, #8
    84c0:	af00      	add	r7, sp, #0
    84c2:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    84c4:	687b      	ldr	r3, [r7, #4]
    84c6:	781b      	ldrb	r3, [r3, #0]
    84c8:	2b00      	cmp	r3, #0
    84ca:	d141      	bne.n	8550 <usbdc_ctrl_status_end+0x94>
		return;
	}
	switch (req->bRequest) {
    84cc:	687b      	ldr	r3, [r7, #4]
    84ce:	785b      	ldrb	r3, [r3, #1]
    84d0:	2b05      	cmp	r3, #5
    84d2:	d01f      	beq.n	8514 <usbdc_ctrl_status_end+0x58>
    84d4:	2b09      	cmp	r3, #9
    84d6:	d000      	beq.n	84da <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    84d8:	e03b      	b.n	8552 <usbdc_ctrl_status_end+0x96>
		usbdc.cfg_value = req->wValue;
    84da:	687b      	ldr	r3, [r7, #4]
    84dc:	789a      	ldrb	r2, [r3, #2]
    84de:	78db      	ldrb	r3, [r3, #3]
    84e0:	021b      	lsls	r3, r3, #8
    84e2:	4313      	orrs	r3, r2
    84e4:	b29b      	uxth	r3, r3
    84e6:	b2da      	uxtb	r2, r3
    84e8:	4b1b      	ldr	r3, [pc, #108]	; (8558 <usbdc_ctrl_status_end+0x9c>)
    84ea:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    84ec:	687b      	ldr	r3, [r7, #4]
    84ee:	789a      	ldrb	r2, [r3, #2]
    84f0:	78db      	ldrb	r3, [r3, #3]
    84f2:	021b      	lsls	r3, r3, #8
    84f4:	4313      	orrs	r3, r2
    84f6:	b29b      	uxth	r3, r3
    84f8:	2b00      	cmp	r3, #0
    84fa:	d001      	beq.n	8500 <usbdc_ctrl_status_end+0x44>
    84fc:	2204      	movs	r2, #4
    84fe:	e000      	b.n	8502 <usbdc_ctrl_status_end+0x46>
    8500:	2203      	movs	r2, #3
    8502:	4b15      	ldr	r3, [pc, #84]	; (8558 <usbdc_ctrl_status_end+0x9c>)
    8504:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    8506:	4b14      	ldr	r3, [pc, #80]	; (8558 <usbdc_ctrl_status_end+0x9c>)
    8508:	7e9b      	ldrb	r3, [r3, #26]
    850a:	0019      	movs	r1, r3
    850c:	2001      	movs	r0, #1
    850e:	4b13      	ldr	r3, [pc, #76]	; (855c <usbdc_ctrl_status_end+0xa0>)
    8510:	4798      	blx	r3
		break;
    8512:	e01e      	b.n	8552 <usbdc_ctrl_status_end+0x96>
		usbdc_set_address(req->wValue);
    8514:	687b      	ldr	r3, [r7, #4]
    8516:	789a      	ldrb	r2, [r3, #2]
    8518:	78db      	ldrb	r3, [r3, #3]
    851a:	021b      	lsls	r3, r3, #8
    851c:	4313      	orrs	r3, r2
    851e:	b29b      	uxth	r3, r3
    8520:	b2db      	uxtb	r3, r3
    8522:	0018      	movs	r0, r3
    8524:	4b0e      	ldr	r3, [pc, #56]	; (8560 <usbdc_ctrl_status_end+0xa4>)
    8526:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    8528:	687b      	ldr	r3, [r7, #4]
    852a:	789a      	ldrb	r2, [r3, #2]
    852c:	78db      	ldrb	r3, [r3, #3]
    852e:	021b      	lsls	r3, r3, #8
    8530:	4313      	orrs	r3, r2
    8532:	b29b      	uxth	r3, r3
    8534:	2b00      	cmp	r3, #0
    8536:	d001      	beq.n	853c <usbdc_ctrl_status_end+0x80>
    8538:	2203      	movs	r2, #3
    853a:	e000      	b.n	853e <usbdc_ctrl_status_end+0x82>
    853c:	2202      	movs	r2, #2
    853e:	4b06      	ldr	r3, [pc, #24]	; (8558 <usbdc_ctrl_status_end+0x9c>)
    8540:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    8542:	4b05      	ldr	r3, [pc, #20]	; (8558 <usbdc_ctrl_status_end+0x9c>)
    8544:	7e9b      	ldrb	r3, [r3, #26]
    8546:	0019      	movs	r1, r3
    8548:	2001      	movs	r0, #1
    854a:	4b04      	ldr	r3, [pc, #16]	; (855c <usbdc_ctrl_status_end+0xa0>)
    854c:	4798      	blx	r3
		break;
    854e:	e000      	b.n	8552 <usbdc_ctrl_status_end+0x96>
		return;
    8550:	46c0      	nop			; (mov r8, r8)
	}
}
    8552:	46bd      	mov	sp, r7
    8554:	b002      	add	sp, #8
    8556:	bd80      	pop	{r7, pc}
    8558:	20001200 	.word	0x20001200
    855c:	00008379 	.word	0x00008379
    8560:	000080cd 	.word	0x000080cd

00008564 <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    8564:	b580      	push	{r7, lr}
    8566:	b082      	sub	sp, #8
    8568:	af00      	add	r7, sp, #0
    856a:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    856c:	687b      	ldr	r3, [r7, #4]
    856e:	2201      	movs	r2, #1
    8570:	0019      	movs	r1, r3
    8572:	2000      	movs	r0, #0
    8574:	4b03      	ldr	r3, [pc, #12]	; (8584 <usbdc_ctrl_data_end+0x20>)
    8576:	4798      	blx	r3
	return false;
    8578:	2300      	movs	r3, #0
}
    857a:	0018      	movs	r0, r3
    857c:	46bd      	mov	sp, r7
    857e:	b002      	add	sp, #8
    8580:	bd80      	pop	{r7, pc}
    8582:	46c0      	nop			; (mov r8, r8)
    8584:	000083bd 	.word	0x000083bd

00008588 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    8588:	b580      	push	{r7, lr}
    858a:	b082      	sub	sp, #8
    858c:	af00      	add	r7, sp, #0
    858e:	603a      	str	r2, [r7, #0]
    8590:	1dfb      	adds	r3, r7, #7
    8592:	1c02      	adds	r2, r0, #0
    8594:	701a      	strb	r2, [r3, #0]
    8596:	1dbb      	adds	r3, r7, #6
    8598:	1c0a      	adds	r2, r1, #0
    859a:	701a      	strb	r2, [r3, #0]
	(void)ep;

	switch (code) {
    859c:	1dbb      	adds	r3, r7, #6
    859e:	781b      	ldrb	r3, [r3, #0]
    85a0:	2b00      	cmp	r3, #0
    85a2:	d002      	beq.n	85aa <usbdc_cb_ctl_done+0x22>
    85a4:	2b01      	cmp	r3, #1
    85a6:	d005      	beq.n	85b4 <usbdc_cb_ctl_done+0x2c>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    85a8:	e00a      	b.n	85c0 <usbdc_cb_ctl_done+0x38>
		usbdc_ctrl_status_end(req);
    85aa:	683b      	ldr	r3, [r7, #0]
    85ac:	0018      	movs	r0, r3
    85ae:	4b07      	ldr	r3, [pc, #28]	; (85cc <usbdc_cb_ctl_done+0x44>)
    85b0:	4798      	blx	r3
		break;
    85b2:	e005      	b.n	85c0 <usbdc_cb_ctl_done+0x38>
		return usbdc_ctrl_data_end(req);
    85b4:	683b      	ldr	r3, [r7, #0]
    85b6:	0018      	movs	r0, r3
    85b8:	4b05      	ldr	r3, [pc, #20]	; (85d0 <usbdc_cb_ctl_done+0x48>)
    85ba:	4798      	blx	r3
    85bc:	0003      	movs	r3, r0
    85be:	e000      	b.n	85c2 <usbdc_cb_ctl_done+0x3a>
	}
	return false;
    85c0:	2300      	movs	r3, #0
}
    85c2:	0018      	movs	r0, r3
    85c4:	46bd      	mov	sp, r7
    85c6:	b002      	add	sp, #8
    85c8:	bd80      	pop	{r7, pc}
    85ca:	46c0      	nop			; (mov r8, r8)
    85cc:	000084bd 	.word	0x000084bd
    85d0:	00008565 	.word	0x00008565

000085d4 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    85d4:	b580      	push	{r7, lr}
    85d6:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    85d8:	4b12      	ldr	r3, [pc, #72]	; (8624 <usbdc_reset+0x50>)
    85da:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    85dc:	4b12      	ldr	r3, [pc, #72]	; (8628 <usbdc_reset+0x54>)
    85de:	2202      	movs	r2, #2
    85e0:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    85e2:	4b11      	ldr	r3, [pc, #68]	; (8628 <usbdc_reset+0x54>)
    85e4:	2200      	movs	r2, #0
    85e6:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    85e8:	4b0f      	ldr	r3, [pc, #60]	; (8628 <usbdc_reset+0x54>)
    85ea:	2200      	movs	r2, #0
    85ec:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    85ee:	2000      	movs	r0, #0
    85f0:	4b0e      	ldr	r3, [pc, #56]	; (862c <usbdc_reset+0x58>)
    85f2:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    85f4:	4b0c      	ldr	r3, [pc, #48]	; (8628 <usbdc_reset+0x54>)
    85f6:	7f1b      	ldrb	r3, [r3, #28]
    85f8:	0018      	movs	r0, r3
    85fa:	4b0d      	ldr	r3, [pc, #52]	; (8630 <usbdc_reset+0x5c>)
    85fc:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    85fe:	4b0d      	ldr	r3, [pc, #52]	; (8634 <usbdc_reset+0x60>)
    8600:	001a      	movs	r2, r3
    8602:	2100      	movs	r1, #0
    8604:	2000      	movs	r0, #0
    8606:	4b0c      	ldr	r3, [pc, #48]	; (8638 <usbdc_reset+0x64>)
    8608:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    860a:	4b0c      	ldr	r3, [pc, #48]	; (863c <usbdc_reset+0x68>)
    860c:	001a      	movs	r2, r3
    860e:	2102      	movs	r1, #2
    8610:	2000      	movs	r0, #0
    8612:	4b09      	ldr	r3, [pc, #36]	; (8638 <usbdc_reset+0x64>)
    8614:	4798      	blx	r3
	usb_d_ep_enable(0);
    8616:	2000      	movs	r0, #0
    8618:	4b09      	ldr	r3, [pc, #36]	; (8640 <usbdc_reset+0x6c>)
    861a:	4798      	blx	r3
}
    861c:	46c0      	nop			; (mov r8, r8)
    861e:	46bd      	mov	sp, r7
    8620:	bd80      	pop	{r7, pc}
    8622:	46c0      	nop			; (mov r8, r8)
    8624:	00007f65 	.word	0x00007f65
    8628:	20001200 	.word	0x20001200
    862c:	00002699 	.word	0x00002699
    8630:	000025a1 	.word	0x000025a1
    8634:	0000843d 	.word	0x0000843d
    8638:	00002a11 	.word	0x00002a11
    863c:	00008589 	.word	0x00008589
    8640:	000026f9 	.word	0x000026f9

00008644 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    8644:	b580      	push	{r7, lr}
    8646:	b082      	sub	sp, #8
    8648:	af00      	add	r7, sp, #0
    864a:	0002      	movs	r2, r0
    864c:	6039      	str	r1, [r7, #0]
    864e:	1dfb      	adds	r3, r7, #7
    8650:	701a      	strb	r2, [r3, #0]
	(void)param;

	switch (ev) {
    8652:	1dfb      	adds	r3, r7, #7
    8654:	781b      	ldrb	r3, [r3, #0]
    8656:	2b00      	cmp	r3, #0
    8658:	d002      	beq.n	8660 <usbd_event_cb+0x1c>
    865a:	2b01      	cmp	r3, #1
    865c:	d006      	beq.n	866c <usbd_event_cb+0x28>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    865e:	e008      	b.n	8672 <usbd_event_cb+0x2e>
		usbdc_change_notify(USBDC_C_CONN, param);
    8660:	683b      	ldr	r3, [r7, #0]
    8662:	0019      	movs	r1, r3
    8664:	2000      	movs	r0, #0
    8666:	4b05      	ldr	r3, [pc, #20]	; (867c <usbd_event_cb+0x38>)
    8668:	4798      	blx	r3
		break;
    866a:	e002      	b.n	8672 <usbd_event_cb+0x2e>
		usbdc_reset();
    866c:	4b04      	ldr	r3, [pc, #16]	; (8680 <usbd_event_cb+0x3c>)
    866e:	4798      	blx	r3
		break;
    8670:	46c0      	nop			; (mov r8, r8)
	}
}
    8672:	46c0      	nop			; (mov r8, r8)
    8674:	46bd      	mov	sp, r7
    8676:	b002      	add	sp, #8
    8678:	bd80      	pop	{r7, pc}
    867a:	46c0      	nop			; (mov r8, r8)
    867c:	00008379 	.word	0x00008379
    8680:	000085d5 	.word	0x000085d5

00008684 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    8684:	b580      	push	{r7, lr}
    8686:	b088      	sub	sp, #32
    8688:	af00      	add	r7, sp, #0
    868a:	60b9      	str	r1, [r7, #8]
    868c:	607a      	str	r2, [r7, #4]
    868e:	0019      	movs	r1, r3
    8690:	230f      	movs	r3, #15
    8692:	18fb      	adds	r3, r7, r3
    8694:	1c02      	adds	r2, r0, #0
    8696:	701a      	strb	r2, [r3, #0]
    8698:	230e      	movs	r3, #14
    869a:	18fb      	adds	r3, r7, r3
    869c:	1c0a      	adds	r2, r1, #0
    869e:	701a      	strb	r2, [r3, #0]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    86a0:	2314      	movs	r3, #20
    86a2:	18fb      	adds	r3, r7, r3
    86a4:	68ba      	ldr	r2, [r7, #8]
    86a6:	601a      	str	r2, [r3, #0]
    86a8:	2314      	movs	r3, #20
    86aa:	18fb      	adds	r3, r7, r3
    86ac:	687a      	ldr	r2, [r7, #4]
    86ae:	605a      	str	r2, [r3, #4]
    86b0:	2314      	movs	r3, #20
    86b2:	18fb      	adds	r3, r7, r3
    86b4:	220f      	movs	r2, #15
    86b6:	18ba      	adds	r2, r7, r2
    86b8:	7812      	ldrb	r2, [r2, #0]
    86ba:	721a      	strb	r2, [r3, #8]
    86bc:	230e      	movs	r3, #14
    86be:	18fb      	adds	r3, r7, r3
    86c0:	781a      	ldrb	r2, [r3, #0]
    86c2:	2314      	movs	r3, #20
    86c4:	18fb      	adds	r3, r7, r3
    86c6:	725a      	strb	r2, [r3, #9]
	return usb_d_ep_transfer(&xfer);
    86c8:	2314      	movs	r3, #20
    86ca:	18fb      	adds	r3, r7, r3
    86cc:	0018      	movs	r0, r3
    86ce:	4b03      	ldr	r3, [pc, #12]	; (86dc <usbdc_xfer+0x58>)
    86d0:	4798      	blx	r3
    86d2:	0003      	movs	r3, r0
}
    86d4:	0018      	movs	r0, r3
    86d6:	46bd      	mov	sp, r7
    86d8:	b008      	add	sp, #32
    86da:	bd80      	pop	{r7, pc}
    86dc:	00002779 	.word	0x00002779

000086e0 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    86e0:	b580      	push	{r7, lr}
    86e2:	b082      	sub	sp, #8
    86e4:	af00      	add	r7, sp, #0
    86e6:	0002      	movs	r2, r0
    86e8:	6039      	str	r1, [r7, #0]
    86ea:	1dfb      	adds	r3, r7, #7
    86ec:	701a      	strb	r2, [r3, #0]
	switch (type) {
    86ee:	1dfb      	adds	r3, r7, #7
    86f0:	781b      	ldrb	r3, [r3, #0]
    86f2:	2b01      	cmp	r3, #1
    86f4:	d00b      	beq.n	870e <usbdc_register_handler+0x2e>
    86f6:	2b02      	cmp	r3, #2
    86f8:	d010      	beq.n	871c <usbdc_register_handler+0x3c>
    86fa:	2b00      	cmp	r3, #0
    86fc:	d000      	beq.n	8700 <usbdc_register_handler+0x20>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
    86fe:	e014      	b.n	872a <usbdc_register_handler+0x4a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    8700:	683a      	ldr	r2, [r7, #0]
    8702:	4b0c      	ldr	r3, [pc, #48]	; (8734 <usbdc_register_handler+0x54>)
    8704:	0011      	movs	r1, r2
    8706:	0018      	movs	r0, r3
    8708:	4b0b      	ldr	r3, [pc, #44]	; (8738 <usbdc_register_handler+0x58>)
    870a:	4798      	blx	r3
		break;
    870c:	e00d      	b.n	872a <usbdc_register_handler+0x4a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    870e:	683a      	ldr	r2, [r7, #0]
    8710:	4b0a      	ldr	r3, [pc, #40]	; (873c <usbdc_register_handler+0x5c>)
    8712:	0011      	movs	r1, r2
    8714:	0018      	movs	r0, r3
    8716:	4b08      	ldr	r3, [pc, #32]	; (8738 <usbdc_register_handler+0x58>)
    8718:	4798      	blx	r3
		break;
    871a:	e006      	b.n	872a <usbdc_register_handler+0x4a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    871c:	683a      	ldr	r2, [r7, #0]
    871e:	4b08      	ldr	r3, [pc, #32]	; (8740 <usbdc_register_handler+0x60>)
    8720:	0011      	movs	r1, r2
    8722:	0018      	movs	r0, r3
    8724:	4b04      	ldr	r3, [pc, #16]	; (8738 <usbdc_register_handler+0x58>)
    8726:	4798      	blx	r3
		break;
    8728:	46c0      	nop			; (mov r8, r8)
	}
}
    872a:	46c0      	nop			; (mov r8, r8)
    872c:	46bd      	mov	sp, r7
    872e:	b002      	add	sp, #8
    8730:	bd80      	pop	{r7, pc}
    8732:	46c0      	nop			; (mov r8, r8)
    8734:	20001204 	.word	0x20001204
    8738:	00008b55 	.word	0x00008b55
    873c:	20001208 	.word	0x20001208
    8740:	2000120c 	.word	0x2000120c

00008744 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    8744:	b580      	push	{r7, lr}
    8746:	b084      	sub	sp, #16
    8748:	af00      	add	r7, sp, #0
    874a:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
    874c:	687b      	ldr	r3, [r7, #4]
    874e:	1e5a      	subs	r2, r3, #1
    8750:	4193      	sbcs	r3, r2
    8752:	b2db      	uxtb	r3, r3
    8754:	4a12      	ldr	r2, [pc, #72]	; (87a0 <usbdc_init+0x5c>)
    8756:	4913      	ldr	r1, [pc, #76]	; (87a4 <usbdc_init+0x60>)
    8758:	0018      	movs	r0, r3
    875a:	4b13      	ldr	r3, [pc, #76]	; (87a8 <usbdc_init+0x64>)
    875c:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    875e:	4b13      	ldr	r3, [pc, #76]	; (87ac <usbdc_init+0x68>)
    8760:	4798      	blx	r3
    8762:	0003      	movs	r3, r0
    8764:	60fb      	str	r3, [r7, #12]
	if (rc < 0) {
    8766:	68fb      	ldr	r3, [r7, #12]
    8768:	2b00      	cmp	r3, #0
    876a:	da01      	bge.n	8770 <usbdc_init+0x2c>
		return rc;
    876c:	68fb      	ldr	r3, [r7, #12]
    876e:	e013      	b.n	8798 <usbdc_init+0x54>
	}

	memset(&usbdc, 0, sizeof(usbdc));
    8770:	4b0f      	ldr	r3, [pc, #60]	; (87b0 <usbdc_init+0x6c>)
    8772:	2220      	movs	r2, #32
    8774:	2100      	movs	r1, #0
    8776:	0018      	movs	r0, r3
    8778:	4b0e      	ldr	r3, [pc, #56]	; (87b4 <usbdc_init+0x70>)
    877a:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    877c:	4b0c      	ldr	r3, [pc, #48]	; (87b0 <usbdc_init+0x6c>)
    877e:	687a      	ldr	r2, [r7, #4]
    8780:	615a      	str	r2, [r3, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    8782:	4b0d      	ldr	r3, [pc, #52]	; (87b8 <usbdc_init+0x74>)
    8784:	0019      	movs	r1, r3
    8786:	2000      	movs	r0, #0
    8788:	4b0c      	ldr	r3, [pc, #48]	; (87bc <usbdc_init+0x78>)
    878a:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    878c:	4b0c      	ldr	r3, [pc, #48]	; (87c0 <usbdc_init+0x7c>)
    878e:	0019      	movs	r1, r3
    8790:	2001      	movs	r0, #1
    8792:	4b0a      	ldr	r3, [pc, #40]	; (87bc <usbdc_init+0x78>)
    8794:	4798      	blx	r3

	return 0;
    8796:	2300      	movs	r3, #0
}
    8798:	0018      	movs	r0, r3
    879a:	46bd      	mov	sp, r7
    879c:	b004      	add	sp, #16
    879e:	bd80      	pop	{r7, pc}
    87a0:	00000355 	.word	0x00000355
    87a4:	000122cc 	.word	0x000122cc
    87a8:	00002a9d 	.word	0x00002a9d
    87ac:	00002465 	.word	0x00002465
    87b0:	20001200 	.word	0x20001200
    87b4:	0000d191 	.word	0x0000d191
    87b8:	00008429 	.word	0x00008429
    87bc:	0000252d 	.word	0x0000252d
    87c0:	00008645 	.word	0x00008645

000087c4 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    87c4:	b580      	push	{r7, lr}
    87c6:	b082      	sub	sp, #8
    87c8:	af00      	add	r7, sp, #0
    87ca:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
    87cc:	687a      	ldr	r2, [r7, #4]
    87ce:	4b04      	ldr	r3, [pc, #16]	; (87e0 <usbdc_register_function+0x1c>)
    87d0:	0011      	movs	r1, r2
    87d2:	0018      	movs	r0, r3
    87d4:	4b03      	ldr	r3, [pc, #12]	; (87e4 <usbdc_register_function+0x20>)
    87d6:	4798      	blx	r3
}
    87d8:	46c0      	nop			; (mov r8, r8)
    87da:	46bd      	mov	sp, r7
    87dc:	b002      	add	sp, #8
    87de:	bd80      	pop	{r7, pc}
    87e0:	20001210 	.word	0x20001210
    87e4:	00008b55 	.word	0x00008b55

000087e8 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    87e8:	b580      	push	{r7, lr}
    87ea:	b082      	sub	sp, #8
    87ec:	af00      	add	r7, sp, #0
    87ee:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
    87f0:	4b0f      	ldr	r3, [pc, #60]	; (8830 <usbdc_start+0x48>)
    87f2:	7e9b      	ldrb	r3, [r3, #26]
    87f4:	2b00      	cmp	r3, #0
    87f6:	d002      	beq.n	87fe <usbdc_start+0x16>
		return ERR_BUSY;
    87f8:	2304      	movs	r3, #4
    87fa:	425b      	negs	r3, r3
    87fc:	e013      	b.n	8826 <usbdc_start+0x3e>
	}

	if (desces) {
    87fe:	687b      	ldr	r3, [r7, #4]
    8800:	2b00      	cmp	r3, #0
    8802:	d00e      	beq.n	8822 <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
    8804:	4b0a      	ldr	r3, [pc, #40]	; (8830 <usbdc_start+0x48>)
    8806:	687a      	ldr	r2, [r7, #4]
    8808:	601a      	str	r2, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    880a:	687b      	ldr	r3, [r7, #4]
    880c:	681b      	ldr	r3, [r3, #0]
    880e:	79da      	ldrb	r2, [r3, #7]
    8810:	4b07      	ldr	r3, [pc, #28]	; (8830 <usbdc_start+0x48>)
    8812:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    8814:	4b06      	ldr	r3, [pc, #24]	; (8830 <usbdc_start+0x48>)
    8816:	2201      	movs	r2, #1
    8818:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    881a:	4b06      	ldr	r3, [pc, #24]	; (8834 <usbdc_start+0x4c>)
    881c:	4798      	blx	r3
	return ERR_NONE;
    881e:	2300      	movs	r3, #0
    8820:	e001      	b.n	8826 <usbdc_start+0x3e>
		return ERR_BAD_DATA;
    8822:	2309      	movs	r3, #9
    8824:	425b      	negs	r3, r3
}
    8826:	0018      	movs	r0, r3
    8828:	46bd      	mov	sp, r7
    882a:	b002      	add	sp, #8
    882c:	bd80      	pop	{r7, pc}
    882e:	46c0      	nop			; (mov r8, r8)
    8830:	20001200 	.word	0x20001200
    8834:	00002555 	.word	0x00002555

00008838 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    8838:	b580      	push	{r7, lr}
    883a:	af00      	add	r7, sp, #0
	usb_d_attach();
    883c:	4b02      	ldr	r3, [pc, #8]	; (8848 <usbdc_attach+0x10>)
    883e:	4798      	blx	r3
}
    8840:	46c0      	nop			; (mov r8, r8)
    8842:	46bd      	mov	sp, r7
    8844:	bd80      	pop	{r7, pc}
    8846:	46c0      	nop			; (mov r8, r8)
    8848:	00002569 	.word	0x00002569

0000884c <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
    884c:	b580      	push	{r7, lr}
    884e:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
    8850:	4b02      	ldr	r3, [pc, #8]	; (885c <usbdc_get_ctrl_buffer+0x10>)
    8852:	695b      	ldr	r3, [r3, #20]
}
    8854:	0018      	movs	r0, r3
    8856:	46bd      	mov	sp, r7
    8858:	bd80      	pop	{r7, pc}
    885a:	46c0      	nop			; (mov r8, r8)
    885c:	20001200 	.word	0x20001200

00008860 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
    8860:	b580      	push	{r7, lr}
    8862:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
    8864:	4b06      	ldr	r3, [pc, #24]	; (8880 <usbdc_get_state+0x20>)
    8866:	7e9b      	ldrb	r3, [r3, #26]
    8868:	001a      	movs	r2, r3
    886a:	2310      	movs	r3, #16
    886c:	4013      	ands	r3, r2
    886e:	d001      	beq.n	8874 <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
    8870:	2310      	movs	r3, #16
    8872:	e001      	b.n	8878 <usbdc_get_state+0x18>
	}
	return usbdc.state;
    8874:	4b02      	ldr	r3, [pc, #8]	; (8880 <usbdc_get_state+0x20>)
    8876:	7e9b      	ldrb	r3, [r3, #26]
}
    8878:	0018      	movs	r0, r3
    887a:	46bd      	mov	sp, r7
    887c:	bd80      	pop	{r7, pc}
    887e:	46c0      	nop			; (mov r8, r8)
    8880:	20001200 	.word	0x20001200

00008884 <usb_get_u16>:
{
    8884:	b580      	push	{r7, lr}
    8886:	b082      	sub	sp, #8
    8888:	af00      	add	r7, sp, #0
    888a:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    888c:	687b      	ldr	r3, [r7, #4]
    888e:	781b      	ldrb	r3, [r3, #0]
    8890:	b29a      	uxth	r2, r3
    8892:	687b      	ldr	r3, [r7, #4]
    8894:	3301      	adds	r3, #1
    8896:	781b      	ldrb	r3, [r3, #0]
    8898:	b29b      	uxth	r3, r3
    889a:	021b      	lsls	r3, r3, #8
    889c:	b29b      	uxth	r3, r3
    889e:	18d3      	adds	r3, r2, r3
    88a0:	b29b      	uxth	r3, r3
}
    88a2:	0018      	movs	r0, r3
    88a4:	46bd      	mov	sp, r7
    88a6:	b002      	add	sp, #8
    88a8:	bd80      	pop	{r7, pc}

000088aa <usb_desc_len>:
{
    88aa:	b580      	push	{r7, lr}
    88ac:	b082      	sub	sp, #8
    88ae:	af00      	add	r7, sp, #0
    88b0:	6078      	str	r0, [r7, #4]
	return desc[0];
    88b2:	687b      	ldr	r3, [r7, #4]
    88b4:	781b      	ldrb	r3, [r3, #0]
}
    88b6:	0018      	movs	r0, r3
    88b8:	46bd      	mov	sp, r7
    88ba:	b002      	add	sp, #8
    88bc:	bd80      	pop	{r7, pc}

000088be <usb_desc_type>:
{
    88be:	b580      	push	{r7, lr}
    88c0:	b082      	sub	sp, #8
    88c2:	af00      	add	r7, sp, #0
    88c4:	6078      	str	r0, [r7, #4]
	return desc[1];
    88c6:	687b      	ldr	r3, [r7, #4]
    88c8:	3301      	adds	r3, #1
    88ca:	781b      	ldrb	r3, [r3, #0]
}
    88cc:	0018      	movs	r0, r3
    88ce:	46bd      	mov	sp, r7
    88d0:	b002      	add	sp, #8
    88d2:	bd80      	pop	{r7, pc}

000088d4 <usb_desc_next>:
{
    88d4:	b580      	push	{r7, lr}
    88d6:	b082      	sub	sp, #8
    88d8:	af00      	add	r7, sp, #0
    88da:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    88dc:	687b      	ldr	r3, [r7, #4]
    88de:	0018      	movs	r0, r3
    88e0:	4b04      	ldr	r3, [pc, #16]	; (88f4 <usb_desc_next+0x20>)
    88e2:	4798      	blx	r3
    88e4:	0003      	movs	r3, r0
    88e6:	001a      	movs	r2, r3
    88e8:	687b      	ldr	r3, [r7, #4]
    88ea:	189b      	adds	r3, r3, r2
}
    88ec:	0018      	movs	r0, r3
    88ee:	46bd      	mov	sp, r7
    88f0:	b002      	add	sp, #8
    88f2:	bd80      	pop	{r7, pc}
    88f4:	000088ab 	.word	0x000088ab

000088f8 <usb_cfg_desc_total_len>:
{
    88f8:	b580      	push	{r7, lr}
    88fa:	b082      	sub	sp, #8
    88fc:	af00      	add	r7, sp, #0
    88fe:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    8900:	687b      	ldr	r3, [r7, #4]
    8902:	3302      	adds	r3, #2
    8904:	0018      	movs	r0, r3
    8906:	4b03      	ldr	r3, [pc, #12]	; (8914 <usb_cfg_desc_total_len+0x1c>)
    8908:	4798      	blx	r3
    890a:	0003      	movs	r3, r0
}
    890c:	0018      	movs	r0, r3
    890e:	46bd      	mov	sp, r7
    8910:	b002      	add	sp, #8
    8912:	bd80      	pop	{r7, pc}
    8914:	00008885 	.word	0x00008885

00008918 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
    8918:	b580      	push	{r7, lr}
    891a:	b082      	sub	sp, #8
    891c:	af00      	add	r7, sp, #0
    891e:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    8920:	687b      	ldr	r3, [r7, #4]
    8922:	0018      	movs	r0, r3
    8924:	4b04      	ldr	r3, [pc, #16]	; (8938 <usb_cfg_desc_next+0x20>)
    8926:	4798      	blx	r3
    8928:	0003      	movs	r3, r0
    892a:	001a      	movs	r2, r3
    892c:	687b      	ldr	r3, [r7, #4]
    892e:	189b      	adds	r3, r3, r2
}
    8930:	0018      	movs	r0, r3
    8932:	46bd      	mov	sp, r7
    8934:	b002      	add	sp, #8
    8936:	bd80      	pop	{r7, pc}
    8938:	000088f9 	.word	0x000088f9

0000893c <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    893c:	b580      	push	{r7, lr}
    893e:	b084      	sub	sp, #16
    8940:	af00      	add	r7, sp, #0
    8942:	60f8      	str	r0, [r7, #12]
    8944:	60b9      	str	r1, [r7, #8]
    8946:	1dfb      	adds	r3, r7, #7
    8948:	701a      	strb	r2, [r3, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    894a:	e01a      	b.n	8982 <usb_find_desc+0x46>
		_desc_len_check();
    894c:	68fb      	ldr	r3, [r7, #12]
    894e:	0018      	movs	r0, r3
    8950:	4b10      	ldr	r3, [pc, #64]	; (8994 <usb_find_desc+0x58>)
    8952:	4798      	blx	r3
    8954:	0003      	movs	r3, r0
    8956:	2b01      	cmp	r3, #1
    8958:	d801      	bhi.n	895e <usb_find_desc+0x22>
    895a:	2300      	movs	r3, #0
    895c:	e016      	b.n	898c <usb_find_desc+0x50>
		if (type == usb_desc_type(desc)) {
    895e:	68fb      	ldr	r3, [r7, #12]
    8960:	0018      	movs	r0, r3
    8962:	4b0d      	ldr	r3, [pc, #52]	; (8998 <usb_find_desc+0x5c>)
    8964:	4798      	blx	r3
    8966:	0003      	movs	r3, r0
    8968:	001a      	movs	r2, r3
    896a:	1dfb      	adds	r3, r7, #7
    896c:	781b      	ldrb	r3, [r3, #0]
    896e:	4293      	cmp	r3, r2
    8970:	d101      	bne.n	8976 <usb_find_desc+0x3a>
			return desc;
    8972:	68fb      	ldr	r3, [r7, #12]
    8974:	e00a      	b.n	898c <usb_find_desc+0x50>
		}
		desc = usb_desc_next(desc);
    8976:	68fb      	ldr	r3, [r7, #12]
    8978:	0018      	movs	r0, r3
    897a:	4b08      	ldr	r3, [pc, #32]	; (899c <usb_find_desc+0x60>)
    897c:	4798      	blx	r3
    897e:	0003      	movs	r3, r0
    8980:	60fb      	str	r3, [r7, #12]
	while (desc < eof) {
    8982:	68fa      	ldr	r2, [r7, #12]
    8984:	68bb      	ldr	r3, [r7, #8]
    8986:	429a      	cmp	r2, r3
    8988:	d3e0      	bcc.n	894c <usb_find_desc+0x10>
	}
	return NULL;
    898a:	2300      	movs	r3, #0
}
    898c:	0018      	movs	r0, r3
    898e:	46bd      	mov	sp, r7
    8990:	b004      	add	sp, #16
    8992:	bd80      	pop	{r7, pc}
    8994:	000088ab 	.word	0x000088ab
    8998:	000088bf 	.word	0x000088bf
    899c:	000088d5 	.word	0x000088d5

000089a0 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
    89a0:	b580      	push	{r7, lr}
    89a2:	b082      	sub	sp, #8
    89a4:	af00      	add	r7, sp, #0
    89a6:	6078      	str	r0, [r7, #4]
    89a8:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    89aa:	e01e      	b.n	89ea <usb_find_ep_desc+0x4a>
		_desc_len_check();
    89ac:	687b      	ldr	r3, [r7, #4]
    89ae:	0018      	movs	r0, r3
    89b0:	4b13      	ldr	r3, [pc, #76]	; (8a00 <usb_find_ep_desc+0x60>)
    89b2:	4798      	blx	r3
    89b4:	0003      	movs	r3, r0
    89b6:	2b01      	cmp	r3, #1
    89b8:	d801      	bhi.n	89be <usb_find_ep_desc+0x1e>
    89ba:	2300      	movs	r3, #0
    89bc:	e01c      	b.n	89f8 <usb_find_ep_desc+0x58>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    89be:	687b      	ldr	r3, [r7, #4]
    89c0:	0018      	movs	r0, r3
    89c2:	4b10      	ldr	r3, [pc, #64]	; (8a04 <usb_find_ep_desc+0x64>)
    89c4:	4798      	blx	r3
    89c6:	0003      	movs	r3, r0
    89c8:	2b04      	cmp	r3, #4
    89ca:	d013      	beq.n	89f4 <usb_find_ep_desc+0x54>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    89cc:	687b      	ldr	r3, [r7, #4]
    89ce:	0018      	movs	r0, r3
    89d0:	4b0c      	ldr	r3, [pc, #48]	; (8a04 <usb_find_ep_desc+0x64>)
    89d2:	4798      	blx	r3
    89d4:	0003      	movs	r3, r0
    89d6:	2b05      	cmp	r3, #5
    89d8:	d101      	bne.n	89de <usb_find_ep_desc+0x3e>
			return desc;
    89da:	687b      	ldr	r3, [r7, #4]
    89dc:	e00c      	b.n	89f8 <usb_find_ep_desc+0x58>
		}
		desc = usb_desc_next(desc);
    89de:	687b      	ldr	r3, [r7, #4]
    89e0:	0018      	movs	r0, r3
    89e2:	4b09      	ldr	r3, [pc, #36]	; (8a08 <usb_find_ep_desc+0x68>)
    89e4:	4798      	blx	r3
    89e6:	0003      	movs	r3, r0
    89e8:	607b      	str	r3, [r7, #4]
	while (desc < eof) {
    89ea:	687a      	ldr	r2, [r7, #4]
    89ec:	683b      	ldr	r3, [r7, #0]
    89ee:	429a      	cmp	r2, r3
    89f0:	d3dc      	bcc.n	89ac <usb_find_ep_desc+0xc>
    89f2:	e000      	b.n	89f6 <usb_find_ep_desc+0x56>
			break;
    89f4:	46c0      	nop			; (mov r8, r8)
	}
	return NULL;
    89f6:	2300      	movs	r3, #0
}
    89f8:	0018      	movs	r0, r3
    89fa:	46bd      	mov	sp, r7
    89fc:	b002      	add	sp, #8
    89fe:	bd80      	pop	{r7, pc}
    8a00:	000088ab 	.word	0x000088ab
    8a04:	000088bf 	.word	0x000088bf
    8a08:	000088d5 	.word	0x000088d5

00008a0c <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    8a0c:	b580      	push	{r7, lr}
    8a0e:	b084      	sub	sp, #16
    8a10:	af00      	add	r7, sp, #0
    8a12:	60f8      	str	r0, [r7, #12]
    8a14:	60b9      	str	r1, [r7, #8]
    8a16:	1dfb      	adds	r3, r7, #7
    8a18:	701a      	strb	r2, [r3, #0]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    8a1a:	68b9      	ldr	r1, [r7, #8]
    8a1c:	68fb      	ldr	r3, [r7, #12]
    8a1e:	2202      	movs	r2, #2
    8a20:	0018      	movs	r0, r3
    8a22:	4b18      	ldr	r3, [pc, #96]	; (8a84 <usb_find_cfg_desc+0x78>)
    8a24:	4798      	blx	r3
    8a26:	0003      	movs	r3, r0
    8a28:	60fb      	str	r3, [r7, #12]
	if (!desc) {
    8a2a:	68fb      	ldr	r3, [r7, #12]
    8a2c:	2b00      	cmp	r3, #0
    8a2e:	d11e      	bne.n	8a6e <usb_find_cfg_desc+0x62>
		return NULL;
    8a30:	2300      	movs	r3, #0
    8a32:	e023      	b.n	8a7c <usb_find_cfg_desc+0x70>
	}
	while (desc < eof) {
		_desc_len_check();
    8a34:	68fb      	ldr	r3, [r7, #12]
    8a36:	0018      	movs	r0, r3
    8a38:	4b13      	ldr	r3, [pc, #76]	; (8a88 <usb_find_cfg_desc+0x7c>)
    8a3a:	4798      	blx	r3
    8a3c:	0003      	movs	r3, r0
    8a3e:	2b01      	cmp	r3, #1
    8a40:	d801      	bhi.n	8a46 <usb_find_cfg_desc+0x3a>
    8a42:	2300      	movs	r3, #0
    8a44:	e01a      	b.n	8a7c <usb_find_cfg_desc+0x70>
		if (desc[1] != USB_DT_CONFIG) {
    8a46:	68fb      	ldr	r3, [r7, #12]
    8a48:	3301      	adds	r3, #1
    8a4a:	781b      	ldrb	r3, [r3, #0]
    8a4c:	2b02      	cmp	r3, #2
    8a4e:	d113      	bne.n	8a78 <usb_find_cfg_desc+0x6c>
			break;
		}
		if (desc[5] == cfg_value) {
    8a50:	68fb      	ldr	r3, [r7, #12]
    8a52:	3305      	adds	r3, #5
    8a54:	781b      	ldrb	r3, [r3, #0]
    8a56:	1dfa      	adds	r2, r7, #7
    8a58:	7812      	ldrb	r2, [r2, #0]
    8a5a:	429a      	cmp	r2, r3
    8a5c:	d101      	bne.n	8a62 <usb_find_cfg_desc+0x56>
			return desc;
    8a5e:	68fb      	ldr	r3, [r7, #12]
    8a60:	e00c      	b.n	8a7c <usb_find_cfg_desc+0x70>
		}
		desc = usb_cfg_desc_next(desc);
    8a62:	68fb      	ldr	r3, [r7, #12]
    8a64:	0018      	movs	r0, r3
    8a66:	4b09      	ldr	r3, [pc, #36]	; (8a8c <usb_find_cfg_desc+0x80>)
    8a68:	4798      	blx	r3
    8a6a:	0003      	movs	r3, r0
    8a6c:	60fb      	str	r3, [r7, #12]
	while (desc < eof) {
    8a6e:	68fa      	ldr	r2, [r7, #12]
    8a70:	68bb      	ldr	r3, [r7, #8]
    8a72:	429a      	cmp	r2, r3
    8a74:	d3de      	bcc.n	8a34 <usb_find_cfg_desc+0x28>
    8a76:	e000      	b.n	8a7a <usb_find_cfg_desc+0x6e>
			break;
    8a78:	46c0      	nop			; (mov r8, r8)
	}
	return NULL;
    8a7a:	2300      	movs	r3, #0
}
    8a7c:	0018      	movs	r0, r3
    8a7e:	46bd      	mov	sp, r7
    8a80:	b004      	add	sp, #16
    8a82:	bd80      	pop	{r7, pc}
    8a84:	0000893d 	.word	0x0000893d
    8a88:	000088ab 	.word	0x000088ab
    8a8c:	00008919 	.word	0x00008919

00008a90 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    8a90:	b580      	push	{r7, lr}
    8a92:	b086      	sub	sp, #24
    8a94:	af00      	add	r7, sp, #0
    8a96:	60f8      	str	r0, [r7, #12]
    8a98:	60b9      	str	r1, [r7, #8]
    8a9a:	1dfb      	adds	r3, r7, #7
    8a9c:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    8a9e:	2317      	movs	r3, #23
    8aa0:	18fb      	adds	r3, r7, r3
    8aa2:	2200      	movs	r2, #0
    8aa4:	701a      	strb	r2, [r3, #0]
    8aa6:	e02c      	b.n	8b02 <usb_find_str_desc+0x72>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    8aa8:	68b9      	ldr	r1, [r7, #8]
    8aaa:	68fb      	ldr	r3, [r7, #12]
    8aac:	2203      	movs	r2, #3
    8aae:	0018      	movs	r0, r3
    8ab0:	4b18      	ldr	r3, [pc, #96]	; (8b14 <usb_find_str_desc+0x84>)
    8ab2:	4798      	blx	r3
    8ab4:	0003      	movs	r3, r0
    8ab6:	60fb      	str	r3, [r7, #12]
		if (desc) {
    8ab8:	68fb      	ldr	r3, [r7, #12]
    8aba:	2b00      	cmp	r3, #0
    8abc:	d01f      	beq.n	8afe <usb_find_str_desc+0x6e>
			_desc_len_check();
    8abe:	68fb      	ldr	r3, [r7, #12]
    8ac0:	0018      	movs	r0, r3
    8ac2:	4b15      	ldr	r3, [pc, #84]	; (8b18 <usb_find_str_desc+0x88>)
    8ac4:	4798      	blx	r3
    8ac6:	0003      	movs	r3, r0
    8ac8:	2b01      	cmp	r3, #1
    8aca:	d801      	bhi.n	8ad0 <usb_find_str_desc+0x40>
    8acc:	2300      	movs	r3, #0
    8ace:	e01d      	b.n	8b0c <usb_find_str_desc+0x7c>
			if (i == str_index) {
    8ad0:	2317      	movs	r3, #23
    8ad2:	18fa      	adds	r2, r7, r3
    8ad4:	1dfb      	adds	r3, r7, #7
    8ad6:	7812      	ldrb	r2, [r2, #0]
    8ad8:	781b      	ldrb	r3, [r3, #0]
    8ada:	429a      	cmp	r2, r3
    8adc:	d101      	bne.n	8ae2 <usb_find_str_desc+0x52>
				return desc;
    8ade:	68fb      	ldr	r3, [r7, #12]
    8ae0:	e014      	b.n	8b0c <usb_find_str_desc+0x7c>
			}
			i++;
    8ae2:	2317      	movs	r3, #23
    8ae4:	18fb      	adds	r3, r7, r3
    8ae6:	781a      	ldrb	r2, [r3, #0]
    8ae8:	2317      	movs	r3, #23
    8aea:	18fb      	adds	r3, r7, r3
    8aec:	3201      	adds	r2, #1
    8aee:	701a      	strb	r2, [r3, #0]
			desc = usb_desc_next(desc);
    8af0:	68fb      	ldr	r3, [r7, #12]
    8af2:	0018      	movs	r0, r3
    8af4:	4b09      	ldr	r3, [pc, #36]	; (8b1c <usb_find_str_desc+0x8c>)
    8af6:	4798      	blx	r3
    8af8:	0003      	movs	r3, r0
    8afa:	60fb      	str	r3, [r7, #12]
    8afc:	e001      	b.n	8b02 <usb_find_str_desc+0x72>
		} else {
			return NULL;
    8afe:	2300      	movs	r3, #0
    8b00:	e004      	b.n	8b0c <usb_find_str_desc+0x7c>
	for (i = 0; desc < eof;) {
    8b02:	68fa      	ldr	r2, [r7, #12]
    8b04:	68bb      	ldr	r3, [r7, #8]
    8b06:	429a      	cmp	r2, r3
    8b08:	d3ce      	bcc.n	8aa8 <usb_find_str_desc+0x18>
		}
	}
	return NULL;
    8b0a:	2300      	movs	r3, #0
}
    8b0c:	0018      	movs	r0, r3
    8b0e:	46bd      	mov	sp, r7
    8b10:	b006      	add	sp, #24
    8b12:	bd80      	pop	{r7, pc}
    8b14:	0000893d 	.word	0x0000893d
    8b18:	000088ab 	.word	0x000088ab
    8b1c:	000088d5 	.word	0x000088d5

00008b20 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    8b20:	b580      	push	{r7, lr}
    8b22:	b084      	sub	sp, #16
    8b24:	af00      	add	r7, sp, #0
    8b26:	6078      	str	r0, [r7, #4]
    8b28:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    8b2a:	687b      	ldr	r3, [r7, #4]
    8b2c:	681b      	ldr	r3, [r3, #0]
    8b2e:	60fb      	str	r3, [r7, #12]
    8b30:	e008      	b.n	8b44 <is_list_element+0x24>
		if (it == element) {
    8b32:	68fa      	ldr	r2, [r7, #12]
    8b34:	683b      	ldr	r3, [r7, #0]
    8b36:	429a      	cmp	r2, r3
    8b38:	d101      	bne.n	8b3e <is_list_element+0x1e>
			return true;
    8b3a:	2301      	movs	r3, #1
    8b3c:	e006      	b.n	8b4c <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    8b3e:	68fb      	ldr	r3, [r7, #12]
    8b40:	681b      	ldr	r3, [r3, #0]
    8b42:	60fb      	str	r3, [r7, #12]
    8b44:	68fb      	ldr	r3, [r7, #12]
    8b46:	2b00      	cmp	r3, #0
    8b48:	d1f3      	bne.n	8b32 <is_list_element+0x12>
		}
	}

	return false;
    8b4a:	2300      	movs	r3, #0
}
    8b4c:	0018      	movs	r0, r3
    8b4e:	46bd      	mov	sp, r7
    8b50:	b004      	add	sp, #16
    8b52:	bd80      	pop	{r7, pc}

00008b54 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    8b54:	b580      	push	{r7, lr}
    8b56:	b084      	sub	sp, #16
    8b58:	af00      	add	r7, sp, #0
    8b5a:	6078      	str	r0, [r7, #4]
    8b5c:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    8b5e:	687b      	ldr	r3, [r7, #4]
    8b60:	681b      	ldr	r3, [r3, #0]
    8b62:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    8b64:	683a      	ldr	r2, [r7, #0]
    8b66:	687b      	ldr	r3, [r7, #4]
    8b68:	0011      	movs	r1, r2
    8b6a:	0018      	movs	r0, r3
    8b6c:	4b16      	ldr	r3, [pc, #88]	; (8bc8 <list_insert_at_end+0x74>)
    8b6e:	4798      	blx	r3
    8b70:	0003      	movs	r3, r0
    8b72:	1e5a      	subs	r2, r3, #1
    8b74:	4193      	sbcs	r3, r2
    8b76:	b2db      	uxtb	r3, r3
    8b78:	2201      	movs	r2, #1
    8b7a:	4053      	eors	r3, r2
    8b7c:	b2db      	uxtb	r3, r3
    8b7e:	1c1a      	adds	r2, r3, #0
    8b80:	2301      	movs	r3, #1
    8b82:	4013      	ands	r3, r2
    8b84:	b2db      	uxtb	r3, r3
    8b86:	4911      	ldr	r1, [pc, #68]	; (8bcc <list_insert_at_end+0x78>)
    8b88:	224f      	movs	r2, #79	; 0x4f
    8b8a:	0018      	movs	r0, r3
    8b8c:	4b10      	ldr	r3, [pc, #64]	; (8bd0 <list_insert_at_end+0x7c>)
    8b8e:	4798      	blx	r3

	if (!list->head) {
    8b90:	687b      	ldr	r3, [r7, #4]
    8b92:	681b      	ldr	r3, [r3, #0]
    8b94:	2b00      	cmp	r3, #0
    8b96:	d109      	bne.n	8bac <list_insert_at_end+0x58>
		list->head                             = (struct list_element *)element;
    8b98:	687b      	ldr	r3, [r7, #4]
    8b9a:	683a      	ldr	r2, [r7, #0]
    8b9c:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    8b9e:	683b      	ldr	r3, [r7, #0]
    8ba0:	2200      	movs	r2, #0
    8ba2:	601a      	str	r2, [r3, #0]
		return;
    8ba4:	e00c      	b.n	8bc0 <list_insert_at_end+0x6c>
	}

	while (it->next) {
		it = it->next;
    8ba6:	68fb      	ldr	r3, [r7, #12]
    8ba8:	681b      	ldr	r3, [r3, #0]
    8baa:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    8bac:	68fb      	ldr	r3, [r7, #12]
    8bae:	681b      	ldr	r3, [r3, #0]
    8bb0:	2b00      	cmp	r3, #0
    8bb2:	d1f8      	bne.n	8ba6 <list_insert_at_end+0x52>
	}
	it->next                               = (struct list_element *)element;
    8bb4:	68fb      	ldr	r3, [r7, #12]
    8bb6:	683a      	ldr	r2, [r7, #0]
    8bb8:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    8bba:	683b      	ldr	r3, [r7, #0]
    8bbc:	2200      	movs	r2, #0
    8bbe:	601a      	str	r2, [r3, #0]
}
    8bc0:	46bd      	mov	sp, r7
    8bc2:	b004      	add	sp, #16
    8bc4:	bd80      	pop	{r7, pc}
    8bc6:	46c0      	nop			; (mov r8, r8)
    8bc8:	00008b21 	.word	0x00008b21
    8bcc:	000122e4 	.word	0x000122e4
    8bd0:	00002a9d 	.word	0x00002a9d

00008bd4 <__aeabi_atexit>:
    8bd4:	000b      	movs	r3, r1
    8bd6:	b510      	push	{r4, lr}
    8bd8:	0001      	movs	r1, r0
    8bda:	0018      	movs	r0, r3
    8bdc:	f004 fa64 	bl	d0a8 <__cxa_atexit>
    8be0:	bd10      	pop	{r4, pc}
    8be2:	46c0      	nop			; (mov r8, r8)

00008be4 <floor>:
    8be4:	4a45      	ldr	r2, [pc, #276]	; (8cfc <floor+0x118>)
    8be6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8be8:	4657      	mov	r7, sl
    8bea:	4692      	mov	sl, r2
    8bec:	004b      	lsls	r3, r1, #1
    8bee:	0d5b      	lsrs	r3, r3, #21
    8bf0:	449a      	add	sl, r3
    8bf2:	464e      	mov	r6, r9
    8bf4:	4645      	mov	r5, r8
    8bf6:	46de      	mov	lr, fp
    8bf8:	4652      	mov	r2, sl
    8bfa:	b5e0      	push	{r5, r6, r7, lr}
    8bfc:	000c      	movs	r4, r1
    8bfe:	0005      	movs	r5, r0
    8c00:	000e      	movs	r6, r1
    8c02:	4689      	mov	r9, r1
    8c04:	0007      	movs	r7, r0
    8c06:	2a13      	cmp	r2, #19
    8c08:	dc22      	bgt.n	8c50 <floor+0x6c>
    8c0a:	2a00      	cmp	r2, #0
    8c0c:	db47      	blt.n	8c9e <floor+0xba>
    8c0e:	4652      	mov	r2, sl
    8c10:	4b3b      	ldr	r3, [pc, #236]	; (8d00 <floor+0x11c>)
    8c12:	4113      	asrs	r3, r2
    8c14:	4698      	mov	r8, r3
    8c16:	000b      	movs	r3, r1
    8c18:	4642      	mov	r2, r8
    8c1a:	4013      	ands	r3, r2
    8c1c:	4303      	orrs	r3, r0
    8c1e:	d011      	beq.n	8c44 <floor+0x60>
    8c20:	4a38      	ldr	r2, [pc, #224]	; (8d04 <floor+0x120>)
    8c22:	4b39      	ldr	r3, [pc, #228]	; (8d08 <floor+0x124>)
    8c24:	f002 fc1c 	bl	b460 <__aeabi_dadd>
    8c28:	2200      	movs	r2, #0
    8c2a:	2300      	movs	r3, #0
    8c2c:	f001 fd86 	bl	a73c <__aeabi_dcmpgt>
    8c30:	2800      	cmp	r0, #0
    8c32:	d005      	beq.n	8c40 <floor+0x5c>
    8c34:	2c00      	cmp	r4, #0
    8c36:	db41      	blt.n	8cbc <floor+0xd8>
    8c38:	464e      	mov	r6, r9
    8c3a:	4643      	mov	r3, r8
    8c3c:	2700      	movs	r7, #0
    8c3e:	439e      	bics	r6, r3
    8c40:	0038      	movs	r0, r7
    8c42:	0031      	movs	r1, r6
    8c44:	bc3c      	pop	{r2, r3, r4, r5}
    8c46:	4690      	mov	r8, r2
    8c48:	4699      	mov	r9, r3
    8c4a:	46a2      	mov	sl, r4
    8c4c:	46ab      	mov	fp, r5
    8c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8c50:	4652      	mov	r2, sl
    8c52:	2a33      	cmp	r2, #51	; 0x33
    8c54:	dd08      	ble.n	8c68 <floor+0x84>
    8c56:	2380      	movs	r3, #128	; 0x80
    8c58:	00db      	lsls	r3, r3, #3
    8c5a:	459a      	cmp	sl, r3
    8c5c:	d1f2      	bne.n	8c44 <floor+0x60>
    8c5e:	0002      	movs	r2, r0
    8c60:	000b      	movs	r3, r1
    8c62:	f002 fbfd 	bl	b460 <__aeabi_dadd>
    8c66:	e7ed      	b.n	8c44 <floor+0x60>
    8c68:	4a28      	ldr	r2, [pc, #160]	; (8d0c <floor+0x128>)
    8c6a:	4694      	mov	ip, r2
    8c6c:	2201      	movs	r2, #1
    8c6e:	4463      	add	r3, ip
    8c70:	4252      	negs	r2, r2
    8c72:	40da      	lsrs	r2, r3
    8c74:	4693      	mov	fp, r2
    8c76:	4202      	tst	r2, r0
    8c78:	d0e4      	beq.n	8c44 <floor+0x60>
    8c7a:	4a22      	ldr	r2, [pc, #136]	; (8d04 <floor+0x120>)
    8c7c:	4b22      	ldr	r3, [pc, #136]	; (8d08 <floor+0x124>)
    8c7e:	f002 fbef 	bl	b460 <__aeabi_dadd>
    8c82:	2200      	movs	r2, #0
    8c84:	2300      	movs	r3, #0
    8c86:	f001 fd59 	bl	a73c <__aeabi_dcmpgt>
    8c8a:	2800      	cmp	r0, #0
    8c8c:	d0d8      	beq.n	8c40 <floor+0x5c>
    8c8e:	2c00      	cmp	r4, #0
    8c90:	db1a      	blt.n	8cc8 <floor+0xe4>
    8c92:	465b      	mov	r3, fp
    8c94:	464e      	mov	r6, r9
    8c96:	439f      	bics	r7, r3
    8c98:	0038      	movs	r0, r7
    8c9a:	0031      	movs	r1, r6
    8c9c:	e7d2      	b.n	8c44 <floor+0x60>
    8c9e:	4a19      	ldr	r2, [pc, #100]	; (8d04 <floor+0x120>)
    8ca0:	4b19      	ldr	r3, [pc, #100]	; (8d08 <floor+0x124>)
    8ca2:	f002 fbdd 	bl	b460 <__aeabi_dadd>
    8ca6:	2200      	movs	r2, #0
    8ca8:	2300      	movs	r3, #0
    8caa:	f001 fd47 	bl	a73c <__aeabi_dcmpgt>
    8cae:	2800      	cmp	r0, #0
    8cb0:	d0c6      	beq.n	8c40 <floor+0x5c>
    8cb2:	2c00      	cmp	r4, #0
    8cb4:	db16      	blt.n	8ce4 <floor+0x100>
    8cb6:	2700      	movs	r7, #0
    8cb8:	2600      	movs	r6, #0
    8cba:	e7c1      	b.n	8c40 <floor+0x5c>
    8cbc:	2380      	movs	r3, #128	; 0x80
    8cbe:	4652      	mov	r2, sl
    8cc0:	035b      	lsls	r3, r3, #13
    8cc2:	4113      	asrs	r3, r2
    8cc4:	4499      	add	r9, r3
    8cc6:	e7b7      	b.n	8c38 <floor+0x54>
    8cc8:	4653      	mov	r3, sl
    8cca:	2b14      	cmp	r3, #20
    8ccc:	d012      	beq.n	8cf4 <floor+0x110>
    8cce:	2334      	movs	r3, #52	; 0x34
    8cd0:	4652      	mov	r2, sl
    8cd2:	2701      	movs	r7, #1
    8cd4:	1a9b      	subs	r3, r3, r2
    8cd6:	409f      	lsls	r7, r3
    8cd8:	197f      	adds	r7, r7, r5
    8cda:	42af      	cmp	r7, r5
    8cdc:	419b      	sbcs	r3, r3
    8cde:	425b      	negs	r3, r3
    8ce0:	4499      	add	r9, r3
    8ce2:	e7d6      	b.n	8c92 <floor+0xae>
    8ce4:	0064      	lsls	r4, r4, #1
    8ce6:	0864      	lsrs	r4, r4, #1
    8ce8:	4325      	orrs	r5, r4
    8cea:	2700      	movs	r7, #0
    8cec:	2d00      	cmp	r5, #0
    8cee:	d0a7      	beq.n	8c40 <floor+0x5c>
    8cf0:	4e07      	ldr	r6, [pc, #28]	; (8d10 <floor+0x12c>)
    8cf2:	e7a5      	b.n	8c40 <floor+0x5c>
    8cf4:	3b13      	subs	r3, #19
    8cf6:	469c      	mov	ip, r3
    8cf8:	44e1      	add	r9, ip
    8cfa:	e7ca      	b.n	8c92 <floor+0xae>
    8cfc:	fffffc01 	.word	0xfffffc01
    8d00:	000fffff 	.word	0x000fffff
    8d04:	8800759c 	.word	0x8800759c
    8d08:	7e37e43c 	.word	0x7e37e43c
    8d0c:	fffffbed 	.word	0xfffffbed
    8d10:	bff00000 	.word	0xbff00000

00008d14 <log>:
    8d14:	b5f0      	push	{r4, r5, r6, r7, lr}
    8d16:	46c6      	mov	lr, r8
    8d18:	b500      	push	{lr}
    8d1a:	b08c      	sub	sp, #48	; 0x30
    8d1c:	0004      	movs	r4, r0
    8d1e:	000d      	movs	r5, r1
    8d20:	f000 fa2c 	bl	917c <__ieee754_log>
    8d24:	4b3a      	ldr	r3, [pc, #232]	; (8e10 <log+0xfc>)
    8d26:	0006      	movs	r6, r0
    8d28:	781b      	ldrb	r3, [r3, #0]
    8d2a:	000f      	movs	r7, r1
    8d2c:	b25b      	sxtb	r3, r3
    8d2e:	4698      	mov	r8, r3
    8d30:	3301      	adds	r3, #1
    8d32:	d00f      	beq.n	8d54 <log+0x40>
    8d34:	0022      	movs	r2, r4
    8d36:	002b      	movs	r3, r5
    8d38:	0020      	movs	r0, r4
    8d3a:	0029      	movs	r1, r5
    8d3c:	f004 f86a 	bl	ce14 <__aeabi_dcmpun>
    8d40:	2800      	cmp	r0, #0
    8d42:	d107      	bne.n	8d54 <log+0x40>
    8d44:	2200      	movs	r2, #0
    8d46:	2300      	movs	r3, #0
    8d48:	0020      	movs	r0, r4
    8d4a:	0029      	movs	r1, r5
    8d4c:	f001 fcf6 	bl	a73c <__aeabi_dcmpgt>
    8d50:	2800      	cmp	r0, #0
    8d52:	d005      	beq.n	8d60 <log+0x4c>
    8d54:	0030      	movs	r0, r6
    8d56:	0039      	movs	r1, r7
    8d58:	b00c      	add	sp, #48	; 0x30
    8d5a:	bc04      	pop	{r2}
    8d5c:	4690      	mov	r8, r2
    8d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8d60:	4b2c      	ldr	r3, [pc, #176]	; (8e14 <log+0x100>)
    8d62:	900a      	str	r0, [sp, #40]	; 0x28
    8d64:	9303      	str	r3, [sp, #12]
    8d66:	4643      	mov	r3, r8
    8d68:	9404      	str	r4, [sp, #16]
    8d6a:	9505      	str	r5, [sp, #20]
    8d6c:	9406      	str	r4, [sp, #24]
    8d6e:	9507      	str	r5, [sp, #28]
    8d70:	2b00      	cmp	r3, #0
    8d72:	d11a      	bne.n	8daa <log+0x96>
    8d74:	22e0      	movs	r2, #224	; 0xe0
    8d76:	4b28      	ldr	r3, [pc, #160]	; (8e18 <log+0x104>)
    8d78:	0612      	lsls	r2, r2, #24
    8d7a:	9208      	str	r2, [sp, #32]
    8d7c:	9309      	str	r3, [sp, #36]	; 0x24
    8d7e:	0020      	movs	r0, r4
    8d80:	2200      	movs	r2, #0
    8d82:	2300      	movs	r3, #0
    8d84:	0029      	movs	r1, r5
    8d86:	f001 fcbf 	bl	a708 <__aeabi_dcmpeq>
    8d8a:	2800      	cmp	r0, #0
    8d8c:	d038      	beq.n	8e00 <log+0xec>
    8d8e:	2302      	movs	r3, #2
    8d90:	9302      	str	r3, [sp, #8]
    8d92:	a802      	add	r0, sp, #8
    8d94:	f001 fa18 	bl	a1c8 <matherr>
    8d98:	2800      	cmp	r0, #0
    8d9a:	d017      	beq.n	8dcc <log+0xb8>
    8d9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8d9e:	9301      	str	r3, [sp, #4]
    8da0:	2b00      	cmp	r3, #0
    8da2:	d118      	bne.n	8dd6 <log+0xc2>
    8da4:	9e08      	ldr	r6, [sp, #32]
    8da6:	9f09      	ldr	r7, [sp, #36]	; 0x24
    8da8:	e7d4      	b.n	8d54 <log+0x40>
    8daa:	2200      	movs	r2, #0
    8dac:	4b1b      	ldr	r3, [pc, #108]	; (8e1c <log+0x108>)
    8dae:	0020      	movs	r0, r4
    8db0:	9208      	str	r2, [sp, #32]
    8db2:	9309      	str	r3, [sp, #36]	; 0x24
    8db4:	0029      	movs	r1, r5
    8db6:	2200      	movs	r2, #0
    8db8:	2300      	movs	r3, #0
    8dba:	f001 fca5 	bl	a708 <__aeabi_dcmpeq>
    8dbe:	2800      	cmp	r0, #0
    8dc0:	d00f      	beq.n	8de2 <log+0xce>
    8dc2:	2302      	movs	r3, #2
    8dc4:	9302      	str	r3, [sp, #8]
    8dc6:	4643      	mov	r3, r8
    8dc8:	2b02      	cmp	r3, #2
    8dca:	d1e2      	bne.n	8d92 <log+0x7e>
    8dcc:	f004 f974 	bl	d0b8 <__errno>
    8dd0:	2322      	movs	r3, #34	; 0x22
    8dd2:	6003      	str	r3, [r0, #0]
    8dd4:	e7e2      	b.n	8d9c <log+0x88>
    8dd6:	f004 f96f 	bl	d0b8 <__errno>
    8dda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8ddc:	9301      	str	r3, [sp, #4]
    8dde:	6003      	str	r3, [r0, #0]
    8de0:	e7e0      	b.n	8da4 <log+0x90>
    8de2:	2301      	movs	r3, #1
    8de4:	9302      	str	r3, [sp, #8]
    8de6:	4643      	mov	r3, r8
    8de8:	2b02      	cmp	r3, #2
    8dea:	d10b      	bne.n	8e04 <log+0xf0>
    8dec:	f004 f964 	bl	d0b8 <__errno>
    8df0:	2321      	movs	r3, #33	; 0x21
    8df2:	6003      	str	r3, [r0, #0]
    8df4:	480a      	ldr	r0, [pc, #40]	; (8e20 <log+0x10c>)
    8df6:	f001 f9e9 	bl	a1cc <nan>
    8dfa:	9008      	str	r0, [sp, #32]
    8dfc:	9109      	str	r1, [sp, #36]	; 0x24
    8dfe:	e7cd      	b.n	8d9c <log+0x88>
    8e00:	2301      	movs	r3, #1
    8e02:	9302      	str	r3, [sp, #8]
    8e04:	a802      	add	r0, sp, #8
    8e06:	f001 f9df 	bl	a1c8 <matherr>
    8e0a:	2800      	cmp	r0, #0
    8e0c:	d1f2      	bne.n	8df4 <log+0xe0>
    8e0e:	e7ed      	b.n	8dec <log+0xd8>
    8e10:	20000080 	.word	0x20000080
    8e14:	00012304 	.word	0x00012304
    8e18:	c7efffff 	.word	0xc7efffff
    8e1c:	fff00000 	.word	0xfff00000
    8e20:	000120e4 	.word	0x000120e4

00008e24 <pow>:
    8e24:	b5f0      	push	{r4, r5, r6, r7, lr}
    8e26:	4657      	mov	r7, sl
    8e28:	464e      	mov	r6, r9
    8e2a:	46de      	mov	lr, fp
    8e2c:	4645      	mov	r5, r8
    8e2e:	b5e0      	push	{r5, r6, r7, lr}
    8e30:	b08f      	sub	sp, #60	; 0x3c
    8e32:	001d      	movs	r5, r3
    8e34:	0006      	movs	r6, r0
    8e36:	000f      	movs	r7, r1
    8e38:	0014      	movs	r4, r2
    8e3a:	f000 fba1 	bl	9580 <__ieee754_pow>
    8e3e:	4bc7      	ldr	r3, [pc, #796]	; (915c <pow+0x338>)
    8e40:	9000      	str	r0, [sp, #0]
    8e42:	9101      	str	r1, [sp, #4]
    8e44:	469a      	mov	sl, r3
    8e46:	781b      	ldrb	r3, [r3, #0]
    8e48:	b25b      	sxtb	r3, r3
    8e4a:	4699      	mov	r9, r3
    8e4c:	3301      	adds	r3, #1
    8e4e:	d03e      	beq.n	8ece <pow+0xaa>
    8e50:	0022      	movs	r2, r4
    8e52:	002b      	movs	r3, r5
    8e54:	0020      	movs	r0, r4
    8e56:	0029      	movs	r1, r5
    8e58:	f003 ffdc 	bl	ce14 <__aeabi_dcmpun>
    8e5c:	4683      	mov	fp, r0
    8e5e:	2800      	cmp	r0, #0
    8e60:	d135      	bne.n	8ece <pow+0xaa>
    8e62:	0032      	movs	r2, r6
    8e64:	003b      	movs	r3, r7
    8e66:	0030      	movs	r0, r6
    8e68:	0039      	movs	r1, r7
    8e6a:	f003 ffd3 	bl	ce14 <__aeabi_dcmpun>
    8e6e:	2200      	movs	r2, #0
    8e70:	9003      	str	r0, [sp, #12]
    8e72:	2800      	cmp	r0, #0
    8e74:	d000      	beq.n	8e78 <pow+0x54>
    8e76:	e0b6      	b.n	8fe6 <pow+0x1c2>
    8e78:	2300      	movs	r3, #0
    8e7a:	0030      	movs	r0, r6
    8e7c:	0039      	movs	r1, r7
    8e7e:	f001 fc43 	bl	a708 <__aeabi_dcmpeq>
    8e82:	2800      	cmp	r0, #0
    8e84:	d02c      	beq.n	8ee0 <pow+0xbc>
    8e86:	2200      	movs	r2, #0
    8e88:	2300      	movs	r3, #0
    8e8a:	0020      	movs	r0, r4
    8e8c:	0029      	movs	r1, r5
    8e8e:	f001 fc3b 	bl	a708 <__aeabi_dcmpeq>
    8e92:	4683      	mov	fp, r0
    8e94:	2800      	cmp	r0, #0
    8e96:	d100      	bne.n	8e9a <pow+0x76>
    8e98:	e077      	b.n	8f8a <pow+0x166>
    8e9a:	ab04      	add	r3, sp, #16
    8e9c:	4698      	mov	r8, r3
    8e9e:	2301      	movs	r3, #1
    8ea0:	4642      	mov	r2, r8
    8ea2:	9304      	str	r3, [sp, #16]
    8ea4:	4bae      	ldr	r3, [pc, #696]	; (9160 <pow+0x33c>)
    8ea6:	6053      	str	r3, [r2, #4]
    8ea8:	4643      	mov	r3, r8
    8eaa:	9a03      	ldr	r2, [sp, #12]
    8eac:	611c      	str	r4, [r3, #16]
    8eae:	615d      	str	r5, [r3, #20]
    8eb0:	621a      	str	r2, [r3, #32]
    8eb2:	609e      	str	r6, [r3, #8]
    8eb4:	60df      	str	r7, [r3, #12]
    8eb6:	4642      	mov	r2, r8
    8eb8:	2300      	movs	r3, #0
    8eba:	2400      	movs	r4, #0
    8ebc:	6193      	str	r3, [r2, #24]
    8ebe:	61d4      	str	r4, [r2, #28]
    8ec0:	464b      	mov	r3, r9
    8ec2:	2b00      	cmp	r3, #0
    8ec4:	d04d      	beq.n	8f62 <pow+0x13e>
    8ec6:	2300      	movs	r3, #0
    8ec8:	4ca6      	ldr	r4, [pc, #664]	; (9164 <pow+0x340>)
    8eca:	9300      	str	r3, [sp, #0]
    8ecc:	9401      	str	r4, [sp, #4]
    8ece:	9800      	ldr	r0, [sp, #0]
    8ed0:	9901      	ldr	r1, [sp, #4]
    8ed2:	b00f      	add	sp, #60	; 0x3c
    8ed4:	bc3c      	pop	{r2, r3, r4, r5}
    8ed6:	4690      	mov	r8, r2
    8ed8:	4699      	mov	r9, r3
    8eda:	46a2      	mov	sl, r4
    8edc:	46ab      	mov	fp, r5
    8ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8ee0:	9800      	ldr	r0, [sp, #0]
    8ee2:	9901      	ldr	r1, [sp, #4]
    8ee4:	f001 f966 	bl	a1b4 <finite>
    8ee8:	4681      	mov	r9, r0
    8eea:	2800      	cmp	r0, #0
    8eec:	d100      	bne.n	8ef0 <pow+0xcc>
    8eee:	e09b      	b.n	9028 <pow+0x204>
    8ef0:	9800      	ldr	r0, [sp, #0]
    8ef2:	9901      	ldr	r1, [sp, #4]
    8ef4:	2200      	movs	r2, #0
    8ef6:	2300      	movs	r3, #0
    8ef8:	f001 fc06 	bl	a708 <__aeabi_dcmpeq>
    8efc:	2800      	cmp	r0, #0
    8efe:	d0e6      	beq.n	8ece <pow+0xaa>
    8f00:	0030      	movs	r0, r6
    8f02:	0039      	movs	r1, r7
    8f04:	f001 f956 	bl	a1b4 <finite>
    8f08:	2800      	cmp	r0, #0
    8f0a:	d0e0      	beq.n	8ece <pow+0xaa>
    8f0c:	0020      	movs	r0, r4
    8f0e:	0029      	movs	r1, r5
    8f10:	f001 f950 	bl	a1b4 <finite>
    8f14:	2800      	cmp	r0, #0
    8f16:	d0da      	beq.n	8ece <pow+0xaa>
    8f18:	ab04      	add	r3, sp, #16
    8f1a:	4698      	mov	r8, r3
    8f1c:	2304      	movs	r3, #4
    8f1e:	4642      	mov	r2, r8
    8f20:	9304      	str	r3, [sp, #16]
    8f22:	4b8f      	ldr	r3, [pc, #572]	; (9160 <pow+0x33c>)
    8f24:	6114      	str	r4, [r2, #16]
    8f26:	6155      	str	r5, [r2, #20]
    8f28:	6053      	str	r3, [r2, #4]
    8f2a:	2300      	movs	r3, #0
    8f2c:	2400      	movs	r4, #0
    8f2e:	6213      	str	r3, [r2, #32]
    8f30:	2300      	movs	r3, #0
    8f32:	6193      	str	r3, [r2, #24]
    8f34:	61d4      	str	r4, [r2, #28]
    8f36:	4653      	mov	r3, sl
    8f38:	781b      	ldrb	r3, [r3, #0]
    8f3a:	6096      	str	r6, [r2, #8]
    8f3c:	60d7      	str	r7, [r2, #12]
    8f3e:	b25b      	sxtb	r3, r3
    8f40:	2b02      	cmp	r3, #2
    8f42:	d004      	beq.n	8f4e <pow+0x12a>
    8f44:	4640      	mov	r0, r8
    8f46:	f001 f93f 	bl	a1c8 <matherr>
    8f4a:	2800      	cmp	r0, #0
    8f4c:	d10e      	bne.n	8f6c <pow+0x148>
    8f4e:	f004 f8b3 	bl	d0b8 <__errno>
    8f52:	2322      	movs	r3, #34	; 0x22
    8f54:	6003      	str	r3, [r0, #0]
    8f56:	e009      	b.n	8f6c <pow+0x148>
    8f58:	4642      	mov	r2, r8
    8f5a:	2300      	movs	r3, #0
    8f5c:	2400      	movs	r4, #0
    8f5e:	6193      	str	r3, [r2, #24]
    8f60:	61d4      	str	r4, [r2, #28]
    8f62:	4640      	mov	r0, r8
    8f64:	f001 f930 	bl	a1c8 <matherr>
    8f68:	2800      	cmp	r0, #0
    8f6a:	d037      	beq.n	8fdc <pow+0x1b8>
    8f6c:	4643      	mov	r3, r8
    8f6e:	6a1b      	ldr	r3, [r3, #32]
    8f70:	2b00      	cmp	r3, #0
    8f72:	d004      	beq.n	8f7e <pow+0x15a>
    8f74:	f004 f8a0 	bl	d0b8 <__errno>
    8f78:	4643      	mov	r3, r8
    8f7a:	6a1b      	ldr	r3, [r3, #32]
    8f7c:	6003      	str	r3, [r0, #0]
    8f7e:	4643      	mov	r3, r8
    8f80:	69dc      	ldr	r4, [r3, #28]
    8f82:	699b      	ldr	r3, [r3, #24]
    8f84:	9300      	str	r3, [sp, #0]
    8f86:	9401      	str	r4, [sp, #4]
    8f88:	e7a1      	b.n	8ece <pow+0xaa>
    8f8a:	0020      	movs	r0, r4
    8f8c:	0029      	movs	r1, r5
    8f8e:	f001 f911 	bl	a1b4 <finite>
    8f92:	2800      	cmp	r0, #0
    8f94:	d09b      	beq.n	8ece <pow+0xaa>
    8f96:	2200      	movs	r2, #0
    8f98:	2300      	movs	r3, #0
    8f9a:	0020      	movs	r0, r4
    8f9c:	0029      	movs	r1, r5
    8f9e:	f001 fbb9 	bl	a714 <__aeabi_dcmplt>
    8fa2:	2800      	cmp	r0, #0
    8fa4:	d100      	bne.n	8fa8 <pow+0x184>
    8fa6:	e792      	b.n	8ece <pow+0xaa>
    8fa8:	ab04      	add	r3, sp, #16
    8faa:	4698      	mov	r8, r3
    8fac:	2301      	movs	r3, #1
    8fae:	4642      	mov	r2, r8
    8fb0:	9304      	str	r3, [sp, #16]
    8fb2:	4b6b      	ldr	r3, [pc, #428]	; (9160 <pow+0x33c>)
    8fb4:	6053      	str	r3, [r2, #4]
    8fb6:	4643      	mov	r3, r8
    8fb8:	465a      	mov	r2, fp
    8fba:	609e      	str	r6, [r3, #8]
    8fbc:	60df      	str	r7, [r3, #12]
    8fbe:	621a      	str	r2, [r3, #32]
    8fc0:	611c      	str	r4, [r3, #16]
    8fc2:	615d      	str	r5, [r3, #20]
    8fc4:	4653      	mov	r3, sl
    8fc6:	781b      	ldrb	r3, [r3, #0]
    8fc8:	b25b      	sxtb	r3, r3
    8fca:	2b00      	cmp	r3, #0
    8fcc:	d0c4      	beq.n	8f58 <pow+0x134>
    8fce:	2000      	movs	r0, #0
    8fd0:	4642      	mov	r2, r8
    8fd2:	4965      	ldr	r1, [pc, #404]	; (9168 <pow+0x344>)
    8fd4:	6190      	str	r0, [r2, #24]
    8fd6:	61d1      	str	r1, [r2, #28]
    8fd8:	2b02      	cmp	r3, #2
    8fda:	d1c2      	bne.n	8f62 <pow+0x13e>
    8fdc:	f004 f86c 	bl	d0b8 <__errno>
    8fe0:	2321      	movs	r3, #33	; 0x21
    8fe2:	6003      	str	r3, [r0, #0]
    8fe4:	e7c2      	b.n	8f6c <pow+0x148>
    8fe6:	2300      	movs	r3, #0
    8fe8:	0020      	movs	r0, r4
    8fea:	0029      	movs	r1, r5
    8fec:	f001 fb8c 	bl	a708 <__aeabi_dcmpeq>
    8ff0:	2800      	cmp	r0, #0
    8ff2:	d100      	bne.n	8ff6 <pow+0x1d2>
    8ff4:	e76b      	b.n	8ece <pow+0xaa>
    8ff6:	ab04      	add	r3, sp, #16
    8ff8:	4698      	mov	r8, r3
    8ffa:	2301      	movs	r3, #1
    8ffc:	4642      	mov	r2, r8
    8ffe:	9304      	str	r3, [sp, #16]
    9000:	4b57      	ldr	r3, [pc, #348]	; (9160 <pow+0x33c>)
    9002:	4641      	mov	r1, r8
    9004:	6053      	str	r3, [r2, #4]
    9006:	4643      	mov	r3, r8
    9008:	465a      	mov	r2, fp
    900a:	621a      	str	r2, [r3, #32]
    900c:	2200      	movs	r2, #0
    900e:	609e      	str	r6, [r3, #8]
    9010:	60df      	str	r7, [r3, #12]
    9012:	611c      	str	r4, [r3, #16]
    9014:	615d      	str	r5, [r3, #20]
    9016:	4b53      	ldr	r3, [pc, #332]	; (9164 <pow+0x340>)
    9018:	618a      	str	r2, [r1, #24]
    901a:	61cb      	str	r3, [r1, #28]
    901c:	9200      	str	r2, [sp, #0]
    901e:	9301      	str	r3, [sp, #4]
    9020:	464b      	mov	r3, r9
    9022:	2b02      	cmp	r3, #2
    9024:	d19d      	bne.n	8f62 <pow+0x13e>
    9026:	e752      	b.n	8ece <pow+0xaa>
    9028:	0030      	movs	r0, r6
    902a:	0039      	movs	r1, r7
    902c:	f001 f8c2 	bl	a1b4 <finite>
    9030:	2800      	cmp	r0, #0
    9032:	d100      	bne.n	9036 <pow+0x212>
    9034:	e75c      	b.n	8ef0 <pow+0xcc>
    9036:	0020      	movs	r0, r4
    9038:	0029      	movs	r1, r5
    903a:	f001 f8bb 	bl	a1b4 <finite>
    903e:	2800      	cmp	r0, #0
    9040:	d100      	bne.n	9044 <pow+0x220>
    9042:	e755      	b.n	8ef0 <pow+0xcc>
    9044:	9800      	ldr	r0, [sp, #0]
    9046:	9901      	ldr	r1, [sp, #4]
    9048:	000b      	movs	r3, r1
    904a:	0002      	movs	r2, r0
    904c:	f003 fee2 	bl	ce14 <__aeabi_dcmpun>
    9050:	ab04      	add	r3, sp, #16
    9052:	4698      	mov	r8, r3
    9054:	2800      	cmp	r0, #0
    9056:	d161      	bne.n	911c <pow+0x2f8>
    9058:	2303      	movs	r3, #3
    905a:	4642      	mov	r2, r8
    905c:	9304      	str	r3, [sp, #16]
    905e:	4b40      	ldr	r3, [pc, #256]	; (9160 <pow+0x33c>)
    9060:	6210      	str	r0, [r2, #32]
    9062:	6053      	str	r3, [r2, #4]
    9064:	4653      	mov	r3, sl
    9066:	781b      	ldrb	r3, [r3, #0]
    9068:	6096      	str	r6, [r2, #8]
    906a:	60d7      	str	r7, [r2, #12]
    906c:	b25b      	sxtb	r3, r3
    906e:	6114      	str	r4, [r2, #16]
    9070:	6155      	str	r5, [r2, #20]
    9072:	4699      	mov	r9, r3
    9074:	2b00      	cmp	r3, #0
    9076:	d12f      	bne.n	90d8 <pow+0x2b4>
    9078:	22e0      	movs	r2, #224	; 0xe0
    907a:	4641      	mov	r1, r8
    907c:	4b3b      	ldr	r3, [pc, #236]	; (916c <pow+0x348>)
    907e:	0612      	lsls	r2, r2, #24
    9080:	618a      	str	r2, [r1, #24]
    9082:	61cb      	str	r3, [r1, #28]
    9084:	0030      	movs	r0, r6
    9086:	2200      	movs	r2, #0
    9088:	2300      	movs	r3, #0
    908a:	0039      	movs	r1, r7
    908c:	f001 fb42 	bl	a714 <__aeabi_dcmplt>
    9090:	2800      	cmp	r0, #0
    9092:	d100      	bne.n	9096 <pow+0x272>
    9094:	e756      	b.n	8f44 <pow+0x120>
    9096:	2200      	movs	r2, #0
    9098:	4b35      	ldr	r3, [pc, #212]	; (9170 <pow+0x34c>)
    909a:	0020      	movs	r0, r4
    909c:	0029      	movs	r1, r5
    909e:	f003 f923 	bl	c2e8 <__aeabi_dmul>
    90a2:	0004      	movs	r4, r0
    90a4:	000d      	movs	r5, r1
    90a6:	f001 f897 	bl	a1d8 <rint>
    90aa:	0002      	movs	r2, r0
    90ac:	000b      	movs	r3, r1
    90ae:	0020      	movs	r0, r4
    90b0:	0029      	movs	r1, r5
    90b2:	f001 fb29 	bl	a708 <__aeabi_dcmpeq>
    90b6:	2800      	cmp	r0, #0
    90b8:	d105      	bne.n	90c6 <pow+0x2a2>
    90ba:	22e0      	movs	r2, #224	; 0xe0
    90bc:	4b2d      	ldr	r3, [pc, #180]	; (9174 <pow+0x350>)
    90be:	0612      	lsls	r2, r2, #24
    90c0:	4641      	mov	r1, r8
    90c2:	618a      	str	r2, [r1, #24]
    90c4:	61cb      	str	r3, [r1, #28]
    90c6:	4653      	mov	r3, sl
    90c8:	781b      	ldrb	r3, [r3, #0]
    90ca:	b25b      	sxtb	r3, r3
    90cc:	4699      	mov	r9, r3
    90ce:	464b      	mov	r3, r9
    90d0:	2b02      	cmp	r3, #2
    90d2:	d000      	beq.n	90d6 <pow+0x2b2>
    90d4:	e736      	b.n	8f44 <pow+0x120>
    90d6:	e73a      	b.n	8f4e <pow+0x12a>
    90d8:	2200      	movs	r2, #0
    90da:	4641      	mov	r1, r8
    90dc:	4b26      	ldr	r3, [pc, #152]	; (9178 <pow+0x354>)
    90de:	0030      	movs	r0, r6
    90e0:	618a      	str	r2, [r1, #24]
    90e2:	61cb      	str	r3, [r1, #28]
    90e4:	2200      	movs	r2, #0
    90e6:	2300      	movs	r3, #0
    90e8:	0039      	movs	r1, r7
    90ea:	f001 fb13 	bl	a714 <__aeabi_dcmplt>
    90ee:	2800      	cmp	r0, #0
    90f0:	d0ed      	beq.n	90ce <pow+0x2aa>
    90f2:	2200      	movs	r2, #0
    90f4:	4b1e      	ldr	r3, [pc, #120]	; (9170 <pow+0x34c>)
    90f6:	0020      	movs	r0, r4
    90f8:	0029      	movs	r1, r5
    90fa:	f003 f8f5 	bl	c2e8 <__aeabi_dmul>
    90fe:	0004      	movs	r4, r0
    9100:	000d      	movs	r5, r1
    9102:	f001 f869 	bl	a1d8 <rint>
    9106:	0002      	movs	r2, r0
    9108:	000b      	movs	r3, r1
    910a:	0020      	movs	r0, r4
    910c:	0029      	movs	r1, r5
    910e:	f001 fafb 	bl	a708 <__aeabi_dcmpeq>
    9112:	2800      	cmp	r0, #0
    9114:	d1d7      	bne.n	90c6 <pow+0x2a2>
    9116:	2200      	movs	r2, #0
    9118:	4b13      	ldr	r3, [pc, #76]	; (9168 <pow+0x344>)
    911a:	e7d1      	b.n	90c0 <pow+0x29c>
    911c:	2301      	movs	r3, #1
    911e:	4642      	mov	r2, r8
    9120:	9304      	str	r3, [sp, #16]
    9122:	4b0f      	ldr	r3, [pc, #60]	; (9160 <pow+0x33c>)
    9124:	6053      	str	r3, [r2, #4]
    9126:	4643      	mov	r3, r8
    9128:	464a      	mov	r2, r9
    912a:	611c      	str	r4, [r3, #16]
    912c:	615d      	str	r5, [r3, #20]
    912e:	621a      	str	r2, [r3, #32]
    9130:	609e      	str	r6, [r3, #8]
    9132:	60df      	str	r7, [r3, #12]
    9134:	2400      	movs	r4, #0
    9136:	4653      	mov	r3, sl
    9138:	571c      	ldrsb	r4, [r3, r4]
    913a:	2c00      	cmp	r4, #0
    913c:	d100      	bne.n	9140 <pow+0x31c>
    913e:	e70b      	b.n	8f58 <pow+0x134>
    9140:	2300      	movs	r3, #0
    9142:	2200      	movs	r2, #0
    9144:	0019      	movs	r1, r3
    9146:	0010      	movs	r0, r2
    9148:	f002 fc9a 	bl	ba80 <__aeabi_ddiv>
    914c:	4643      	mov	r3, r8
    914e:	6198      	str	r0, [r3, #24]
    9150:	61d9      	str	r1, [r3, #28]
    9152:	2c02      	cmp	r4, #2
    9154:	d100      	bne.n	9158 <pow+0x334>
    9156:	e741      	b.n	8fdc <pow+0x1b8>
    9158:	e703      	b.n	8f62 <pow+0x13e>
    915a:	46c0      	nop			; (mov r8, r8)
    915c:	20000080 	.word	0x20000080
    9160:	00012308 	.word	0x00012308
    9164:	3ff00000 	.word	0x3ff00000
    9168:	fff00000 	.word	0xfff00000
    916c:	47efffff 	.word	0x47efffff
    9170:	3fe00000 	.word	0x3fe00000
    9174:	c7efffff 	.word	0xc7efffff
    9178:	7ff00000 	.word	0x7ff00000

0000917c <__ieee754_log>:
    917c:	b5f0      	push	{r4, r5, r6, r7, lr}
    917e:	46d6      	mov	lr, sl
    9180:	464f      	mov	r7, r9
    9182:	4646      	mov	r6, r8
    9184:	b5c0      	push	{r6, r7, lr}
    9186:	4ada      	ldr	r2, [pc, #872]	; (94f0 <__ieee754_log+0x374>)
    9188:	b088      	sub	sp, #32
    918a:	000b      	movs	r3, r1
    918c:	4291      	cmp	r1, r2
    918e:	dc55      	bgt.n	923c <__ieee754_log+0xc0>
    9190:	004a      	lsls	r2, r1, #1
    9192:	0852      	lsrs	r2, r2, #1
    9194:	4302      	orrs	r2, r0
    9196:	d100      	bne.n	919a <__ieee754_log+0x1e>
    9198:	e0ef      	b.n	937a <__ieee754_log+0x1fe>
    919a:	2900      	cmp	r1, #0
    919c:	da00      	bge.n	91a0 <__ieee754_log+0x24>
    919e:	e179      	b.n	9494 <__ieee754_log+0x318>
    91a0:	4bd4      	ldr	r3, [pc, #848]	; (94f4 <__ieee754_log+0x378>)
    91a2:	2200      	movs	r2, #0
    91a4:	f003 f8a0 	bl	c2e8 <__aeabi_dmul>
    91a8:	2536      	movs	r5, #54	; 0x36
    91aa:	4cd3      	ldr	r4, [pc, #844]	; (94f8 <__ieee754_log+0x37c>)
    91ac:	000b      	movs	r3, r1
    91ae:	426d      	negs	r5, r5
    91b0:	42a3      	cmp	r3, r4
    91b2:	dc47      	bgt.n	9244 <__ieee754_log+0xc8>
    91b4:	151a      	asrs	r2, r3, #20
    91b6:	4cd1      	ldr	r4, [pc, #836]	; (94fc <__ieee754_log+0x380>)
    91b8:	031b      	lsls	r3, r3, #12
    91ba:	0b1b      	lsrs	r3, r3, #12
    91bc:	4698      	mov	r8, r3
    91be:	46a4      	mov	ip, r4
    91c0:	2480      	movs	r4, #128	; 0x80
    91c2:	4bcf      	ldr	r3, [pc, #828]	; (9500 <__ieee754_log+0x384>)
    91c4:	0364      	lsls	r4, r4, #13
    91c6:	4443      	add	r3, r8
    91c8:	4023      	ands	r3, r4
    91ca:	4cce      	ldr	r4, [pc, #824]	; (9504 <__ieee754_log+0x388>)
    91cc:	4462      	add	r2, ip
    91ce:	1952      	adds	r2, r2, r5
    91d0:	405c      	eors	r4, r3
    91d2:	4645      	mov	r5, r8
    91d4:	151b      	asrs	r3, r3, #20
    91d6:	4699      	mov	r9, r3
    91d8:	4325      	orrs	r5, r4
    91da:	4bca      	ldr	r3, [pc, #808]	; (9504 <__ieee754_log+0x388>)
    91dc:	0029      	movs	r1, r5
    91de:	4491      	add	r9, r2
    91e0:	2200      	movs	r2, #0
    91e2:	f003 fb01 	bl	c7e8 <__aeabi_dsub>
    91e6:	4643      	mov	r3, r8
    91e8:	3302      	adds	r3, #2
    91ea:	031b      	lsls	r3, r3, #12
    91ec:	0006      	movs	r6, r0
    91ee:	000f      	movs	r7, r1
    91f0:	0b1b      	lsrs	r3, r3, #12
    91f2:	2200      	movs	r2, #0
    91f4:	2b02      	cmp	r3, #2
    91f6:	dc2f      	bgt.n	9258 <__ieee754_log+0xdc>
    91f8:	2300      	movs	r3, #0
    91fa:	f001 fa85 	bl	a708 <__aeabi_dcmpeq>
    91fe:	2800      	cmp	r0, #0
    9200:	d100      	bne.n	9204 <__ieee754_log+0x88>
    9202:	e0c1      	b.n	9388 <__ieee754_log+0x20c>
    9204:	464b      	mov	r3, r9
    9206:	2b00      	cmp	r3, #0
    9208:	d100      	bne.n	920c <__ieee754_log+0x90>
    920a:	e14c      	b.n	94a6 <__ieee754_log+0x32a>
    920c:	4648      	mov	r0, r9
    920e:	f003 fe55 	bl	cebc <__aeabi_i2d>
    9212:	4abd      	ldr	r2, [pc, #756]	; (9508 <__ieee754_log+0x38c>)
    9214:	4bbd      	ldr	r3, [pc, #756]	; (950c <__ieee754_log+0x390>)
    9216:	0004      	movs	r4, r0
    9218:	000d      	movs	r5, r1
    921a:	f003 f865 	bl	c2e8 <__aeabi_dmul>
    921e:	4abc      	ldr	r2, [pc, #752]	; (9510 <__ieee754_log+0x394>)
    9220:	0006      	movs	r6, r0
    9222:	000f      	movs	r7, r1
    9224:	4bbb      	ldr	r3, [pc, #748]	; (9514 <__ieee754_log+0x398>)
    9226:	0020      	movs	r0, r4
    9228:	0029      	movs	r1, r5
    922a:	f003 f85d 	bl	c2e8 <__aeabi_dmul>
    922e:	0002      	movs	r2, r0
    9230:	000b      	movs	r3, r1
    9232:	0030      	movs	r0, r6
    9234:	0039      	movs	r1, r7
    9236:	f002 f913 	bl	b460 <__aeabi_dadd>
    923a:	e007      	b.n	924c <__ieee754_log+0xd0>
    923c:	4cae      	ldr	r4, [pc, #696]	; (94f8 <__ieee754_log+0x37c>)
    923e:	2500      	movs	r5, #0
    9240:	42a3      	cmp	r3, r4
    9242:	ddb7      	ble.n	91b4 <__ieee754_log+0x38>
    9244:	0002      	movs	r2, r0
    9246:	000b      	movs	r3, r1
    9248:	f002 f90a 	bl	b460 <__aeabi_dadd>
    924c:	b008      	add	sp, #32
    924e:	bc1c      	pop	{r2, r3, r4}
    9250:	4690      	mov	r8, r2
    9252:	4699      	mov	r9, r3
    9254:	46a2      	mov	sl, r4
    9256:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9258:	2380      	movs	r3, #128	; 0x80
    925a:	05db      	lsls	r3, r3, #23
    925c:	f002 f900 	bl	b460 <__aeabi_dadd>
    9260:	0002      	movs	r2, r0
    9262:	000b      	movs	r3, r1
    9264:	0030      	movs	r0, r6
    9266:	0039      	movs	r1, r7
    9268:	f002 fc0a 	bl	ba80 <__aeabi_ddiv>
    926c:	0004      	movs	r4, r0
    926e:	4648      	mov	r0, r9
    9270:	000d      	movs	r5, r1
    9272:	f003 fe23 	bl	cebc <__aeabi_i2d>
    9276:	0022      	movs	r2, r4
    9278:	9002      	str	r0, [sp, #8]
    927a:	9103      	str	r1, [sp, #12]
    927c:	002b      	movs	r3, r5
    927e:	0020      	movs	r0, r4
    9280:	0029      	movs	r1, r5
    9282:	9404      	str	r4, [sp, #16]
    9284:	9505      	str	r5, [sp, #20]
    9286:	f003 f82f 	bl	c2e8 <__aeabi_dmul>
    928a:	0004      	movs	r4, r0
    928c:	000d      	movs	r5, r1
    928e:	4ba2      	ldr	r3, [pc, #648]	; (9518 <__ieee754_log+0x39c>)
    9290:	0002      	movs	r2, r0
    9292:	4443      	add	r3, r8
    9294:	469a      	mov	sl, r3
    9296:	000b      	movs	r3, r1
    9298:	9400      	str	r4, [sp, #0]
    929a:	9501      	str	r5, [sp, #4]
    929c:	f003 f824 	bl	c2e8 <__aeabi_dmul>
    92a0:	0004      	movs	r4, r0
    92a2:	000d      	movs	r5, r1
    92a4:	4a9d      	ldr	r2, [pc, #628]	; (951c <__ieee754_log+0x3a0>)
    92a6:	4b9e      	ldr	r3, [pc, #632]	; (9520 <__ieee754_log+0x3a4>)
    92a8:	f003 f81e 	bl	c2e8 <__aeabi_dmul>
    92ac:	4a9d      	ldr	r2, [pc, #628]	; (9524 <__ieee754_log+0x3a8>)
    92ae:	4b9e      	ldr	r3, [pc, #632]	; (9528 <__ieee754_log+0x3ac>)
    92b0:	f002 f8d6 	bl	b460 <__aeabi_dadd>
    92b4:	0022      	movs	r2, r4
    92b6:	002b      	movs	r3, r5
    92b8:	f003 f816 	bl	c2e8 <__aeabi_dmul>
    92bc:	4a9b      	ldr	r2, [pc, #620]	; (952c <__ieee754_log+0x3b0>)
    92be:	4b9c      	ldr	r3, [pc, #624]	; (9530 <__ieee754_log+0x3b4>)
    92c0:	f002 f8ce 	bl	b460 <__aeabi_dadd>
    92c4:	0022      	movs	r2, r4
    92c6:	002b      	movs	r3, r5
    92c8:	f003 f80e 	bl	c2e8 <__aeabi_dmul>
    92cc:	4a99      	ldr	r2, [pc, #612]	; (9534 <__ieee754_log+0x3b8>)
    92ce:	4b9a      	ldr	r3, [pc, #616]	; (9538 <__ieee754_log+0x3bc>)
    92d0:	f002 f8c6 	bl	b460 <__aeabi_dadd>
    92d4:	9a00      	ldr	r2, [sp, #0]
    92d6:	9b01      	ldr	r3, [sp, #4]
    92d8:	f003 f806 	bl	c2e8 <__aeabi_dmul>
    92dc:	4a97      	ldr	r2, [pc, #604]	; (953c <__ieee754_log+0x3c0>)
    92de:	9000      	str	r0, [sp, #0]
    92e0:	9101      	str	r1, [sp, #4]
    92e2:	4b97      	ldr	r3, [pc, #604]	; (9540 <__ieee754_log+0x3c4>)
    92e4:	0020      	movs	r0, r4
    92e6:	0029      	movs	r1, r5
    92e8:	f002 fffe 	bl	c2e8 <__aeabi_dmul>
    92ec:	4a95      	ldr	r2, [pc, #596]	; (9544 <__ieee754_log+0x3c8>)
    92ee:	4b96      	ldr	r3, [pc, #600]	; (9548 <__ieee754_log+0x3cc>)
    92f0:	f002 f8b6 	bl	b460 <__aeabi_dadd>
    92f4:	0022      	movs	r2, r4
    92f6:	002b      	movs	r3, r5
    92f8:	f002 fff6 	bl	c2e8 <__aeabi_dmul>
    92fc:	4a93      	ldr	r2, [pc, #588]	; (954c <__ieee754_log+0x3d0>)
    92fe:	4b94      	ldr	r3, [pc, #592]	; (9550 <__ieee754_log+0x3d4>)
    9300:	f002 f8ae 	bl	b460 <__aeabi_dadd>
    9304:	0022      	movs	r2, r4
    9306:	002b      	movs	r3, r5
    9308:	f002 ffee 	bl	c2e8 <__aeabi_dmul>
    930c:	000b      	movs	r3, r1
    930e:	0002      	movs	r2, r0
    9310:	9800      	ldr	r0, [sp, #0]
    9312:	9901      	ldr	r1, [sp, #4]
    9314:	f002 f8a4 	bl	b460 <__aeabi_dadd>
    9318:	000d      	movs	r5, r1
    931a:	4641      	mov	r1, r8
    931c:	4b8d      	ldr	r3, [pc, #564]	; (9554 <__ieee754_log+0x3d8>)
    931e:	0004      	movs	r4, r0
    9320:	1a5b      	subs	r3, r3, r1
    9322:	4651      	mov	r1, sl
    9324:	430b      	orrs	r3, r1
    9326:	2b00      	cmp	r3, #0
    9328:	dd54      	ble.n	93d4 <__ieee754_log+0x258>
    932a:	2200      	movs	r2, #0
    932c:	4b8a      	ldr	r3, [pc, #552]	; (9558 <__ieee754_log+0x3dc>)
    932e:	0030      	movs	r0, r6
    9330:	0039      	movs	r1, r7
    9332:	f002 ffd9 	bl	c2e8 <__aeabi_dmul>
    9336:	0032      	movs	r2, r6
    9338:	003b      	movs	r3, r7
    933a:	f002 ffd5 	bl	c2e8 <__aeabi_dmul>
    933e:	464b      	mov	r3, r9
    9340:	000a      	movs	r2, r1
    9342:	0001      	movs	r1, r0
    9344:	9100      	str	r1, [sp, #0]
    9346:	9201      	str	r2, [sp, #4]
    9348:	2b00      	cmp	r3, #0
    934a:	d172      	bne.n	9432 <__ieee754_log+0x2b6>
    934c:	0013      	movs	r3, r2
    934e:	0029      	movs	r1, r5
    9350:	0002      	movs	r2, r0
    9352:	0020      	movs	r0, r4
    9354:	f002 f884 	bl	b460 <__aeabi_dadd>
    9358:	9a04      	ldr	r2, [sp, #16]
    935a:	9b05      	ldr	r3, [sp, #20]
    935c:	f002 ffc4 	bl	c2e8 <__aeabi_dmul>
    9360:	0002      	movs	r2, r0
    9362:	000b      	movs	r3, r1
    9364:	9800      	ldr	r0, [sp, #0]
    9366:	9901      	ldr	r1, [sp, #4]
    9368:	f003 fa3e 	bl	c7e8 <__aeabi_dsub>
    936c:	0002      	movs	r2, r0
    936e:	000b      	movs	r3, r1
    9370:	0030      	movs	r0, r6
    9372:	0039      	movs	r1, r7
    9374:	f003 fa38 	bl	c7e8 <__aeabi_dsub>
    9378:	e768      	b.n	924c <__ieee754_log+0xd0>
    937a:	2200      	movs	r2, #0
    937c:	2300      	movs	r3, #0
    937e:	2000      	movs	r0, #0
    9380:	4976      	ldr	r1, [pc, #472]	; (955c <__ieee754_log+0x3e0>)
    9382:	f002 fb7d 	bl	ba80 <__aeabi_ddiv>
    9386:	e761      	b.n	924c <__ieee754_log+0xd0>
    9388:	4a75      	ldr	r2, [pc, #468]	; (9560 <__ieee754_log+0x3e4>)
    938a:	4b76      	ldr	r3, [pc, #472]	; (9564 <__ieee754_log+0x3e8>)
    938c:	0030      	movs	r0, r6
    938e:	0039      	movs	r1, r7
    9390:	f002 ffaa 	bl	c2e8 <__aeabi_dmul>
    9394:	0002      	movs	r2, r0
    9396:	000b      	movs	r3, r1
    9398:	2000      	movs	r0, #0
    939a:	496f      	ldr	r1, [pc, #444]	; (9558 <__ieee754_log+0x3dc>)
    939c:	f003 fa24 	bl	c7e8 <__aeabi_dsub>
    93a0:	0032      	movs	r2, r6
    93a2:	0004      	movs	r4, r0
    93a4:	000d      	movs	r5, r1
    93a6:	003b      	movs	r3, r7
    93a8:	0030      	movs	r0, r6
    93aa:	0039      	movs	r1, r7
    93ac:	f002 ff9c 	bl	c2e8 <__aeabi_dmul>
    93b0:	000b      	movs	r3, r1
    93b2:	0002      	movs	r2, r0
    93b4:	0029      	movs	r1, r5
    93b6:	0020      	movs	r0, r4
    93b8:	f002 ff96 	bl	c2e8 <__aeabi_dmul>
    93bc:	464b      	mov	r3, r9
    93be:	0004      	movs	r4, r0
    93c0:	000d      	movs	r5, r1
    93c2:	2b00      	cmp	r3, #0
    93c4:	d172      	bne.n	94ac <__ieee754_log+0x330>
    93c6:	0002      	movs	r2, r0
    93c8:	000b      	movs	r3, r1
    93ca:	0030      	movs	r0, r6
    93cc:	0039      	movs	r1, r7
    93ce:	f003 fa0b 	bl	c7e8 <__aeabi_dsub>
    93d2:	e73b      	b.n	924c <__ieee754_log+0xd0>
    93d4:	464b      	mov	r3, r9
    93d6:	2b00      	cmp	r3, #0
    93d8:	d100      	bne.n	93dc <__ieee754_log+0x260>
    93da:	e0c5      	b.n	9568 <__ieee754_log+0x3ec>
    93dc:	9802      	ldr	r0, [sp, #8]
    93de:	9903      	ldr	r1, [sp, #12]
    93e0:	4a49      	ldr	r2, [pc, #292]	; (9508 <__ieee754_log+0x38c>)
    93e2:	4b4a      	ldr	r3, [pc, #296]	; (950c <__ieee754_log+0x390>)
    93e4:	f002 ff80 	bl	c2e8 <__aeabi_dmul>
    93e8:	0022      	movs	r2, r4
    93ea:	9000      	str	r0, [sp, #0]
    93ec:	9101      	str	r1, [sp, #4]
    93ee:	002b      	movs	r3, r5
    93f0:	0030      	movs	r0, r6
    93f2:	0039      	movs	r1, r7
    93f4:	f003 f9f8 	bl	c7e8 <__aeabi_dsub>
    93f8:	9a04      	ldr	r2, [sp, #16]
    93fa:	9b05      	ldr	r3, [sp, #20]
    93fc:	f002 ff74 	bl	c2e8 <__aeabi_dmul>
    9400:	4a43      	ldr	r2, [pc, #268]	; (9510 <__ieee754_log+0x394>)
    9402:	0004      	movs	r4, r0
    9404:	000d      	movs	r5, r1
    9406:	9802      	ldr	r0, [sp, #8]
    9408:	9903      	ldr	r1, [sp, #12]
    940a:	4b42      	ldr	r3, [pc, #264]	; (9514 <__ieee754_log+0x398>)
    940c:	f002 ff6c 	bl	c2e8 <__aeabi_dmul>
    9410:	0002      	movs	r2, r0
    9412:	000b      	movs	r3, r1
    9414:	0020      	movs	r0, r4
    9416:	0029      	movs	r1, r5
    9418:	f003 f9e6 	bl	c7e8 <__aeabi_dsub>
    941c:	0032      	movs	r2, r6
    941e:	003b      	movs	r3, r7
    9420:	f003 f9e2 	bl	c7e8 <__aeabi_dsub>
    9424:	0002      	movs	r2, r0
    9426:	000b      	movs	r3, r1
    9428:	9800      	ldr	r0, [sp, #0]
    942a:	9901      	ldr	r1, [sp, #4]
    942c:	f003 f9dc 	bl	c7e8 <__aeabi_dsub>
    9430:	e70c      	b.n	924c <__ieee754_log+0xd0>
    9432:	4a35      	ldr	r2, [pc, #212]	; (9508 <__ieee754_log+0x38c>)
    9434:	4b35      	ldr	r3, [pc, #212]	; (950c <__ieee754_log+0x390>)
    9436:	9802      	ldr	r0, [sp, #8]
    9438:	9903      	ldr	r1, [sp, #12]
    943a:	f002 ff55 	bl	c2e8 <__aeabi_dmul>
    943e:	9a00      	ldr	r2, [sp, #0]
    9440:	9b01      	ldr	r3, [sp, #4]
    9442:	9006      	str	r0, [sp, #24]
    9444:	9107      	str	r1, [sp, #28]
    9446:	0020      	movs	r0, r4
    9448:	0029      	movs	r1, r5
    944a:	f002 f809 	bl	b460 <__aeabi_dadd>
    944e:	9a04      	ldr	r2, [sp, #16]
    9450:	9b05      	ldr	r3, [sp, #20]
    9452:	f002 ff49 	bl	c2e8 <__aeabi_dmul>
    9456:	4a2e      	ldr	r2, [pc, #184]	; (9510 <__ieee754_log+0x394>)
    9458:	0004      	movs	r4, r0
    945a:	000d      	movs	r5, r1
    945c:	9802      	ldr	r0, [sp, #8]
    945e:	9903      	ldr	r1, [sp, #12]
    9460:	4b2c      	ldr	r3, [pc, #176]	; (9514 <__ieee754_log+0x398>)
    9462:	f002 ff41 	bl	c2e8 <__aeabi_dmul>
    9466:	0002      	movs	r2, r0
    9468:	000b      	movs	r3, r1
    946a:	0020      	movs	r0, r4
    946c:	0029      	movs	r1, r5
    946e:	f001 fff7 	bl	b460 <__aeabi_dadd>
    9472:	0002      	movs	r2, r0
    9474:	000b      	movs	r3, r1
    9476:	9800      	ldr	r0, [sp, #0]
    9478:	9901      	ldr	r1, [sp, #4]
    947a:	f003 f9b5 	bl	c7e8 <__aeabi_dsub>
    947e:	0032      	movs	r2, r6
    9480:	003b      	movs	r3, r7
    9482:	f003 f9b1 	bl	c7e8 <__aeabi_dsub>
    9486:	0002      	movs	r2, r0
    9488:	000b      	movs	r3, r1
    948a:	9806      	ldr	r0, [sp, #24]
    948c:	9907      	ldr	r1, [sp, #28]
    948e:	f003 f9ab 	bl	c7e8 <__aeabi_dsub>
    9492:	e6db      	b.n	924c <__ieee754_log+0xd0>
    9494:	0002      	movs	r2, r0
    9496:	000b      	movs	r3, r1
    9498:	f003 f9a6 	bl	c7e8 <__aeabi_dsub>
    949c:	2200      	movs	r2, #0
    949e:	2300      	movs	r3, #0
    94a0:	f002 faee 	bl	ba80 <__aeabi_ddiv>
    94a4:	e6d2      	b.n	924c <__ieee754_log+0xd0>
    94a6:	2000      	movs	r0, #0
    94a8:	2100      	movs	r1, #0
    94aa:	e6cf      	b.n	924c <__ieee754_log+0xd0>
    94ac:	4648      	mov	r0, r9
    94ae:	f003 fd05 	bl	cebc <__aeabi_i2d>
    94b2:	4a15      	ldr	r2, [pc, #84]	; (9508 <__ieee754_log+0x38c>)
    94b4:	4b15      	ldr	r3, [pc, #84]	; (950c <__ieee754_log+0x390>)
    94b6:	9000      	str	r0, [sp, #0]
    94b8:	9101      	str	r1, [sp, #4]
    94ba:	f002 ff15 	bl	c2e8 <__aeabi_dmul>
    94be:	4a14      	ldr	r2, [pc, #80]	; (9510 <__ieee754_log+0x394>)
    94c0:	9002      	str	r0, [sp, #8]
    94c2:	9103      	str	r1, [sp, #12]
    94c4:	9800      	ldr	r0, [sp, #0]
    94c6:	9901      	ldr	r1, [sp, #4]
    94c8:	4b12      	ldr	r3, [pc, #72]	; (9514 <__ieee754_log+0x398>)
    94ca:	f002 ff0d 	bl	c2e8 <__aeabi_dmul>
    94ce:	0002      	movs	r2, r0
    94d0:	000b      	movs	r3, r1
    94d2:	0020      	movs	r0, r4
    94d4:	0029      	movs	r1, r5
    94d6:	f003 f987 	bl	c7e8 <__aeabi_dsub>
    94da:	0032      	movs	r2, r6
    94dc:	003b      	movs	r3, r7
    94de:	f003 f983 	bl	c7e8 <__aeabi_dsub>
    94e2:	0002      	movs	r2, r0
    94e4:	000b      	movs	r3, r1
    94e6:	9802      	ldr	r0, [sp, #8]
    94e8:	9903      	ldr	r1, [sp, #12]
    94ea:	f003 f97d 	bl	c7e8 <__aeabi_dsub>
    94ee:	e6ad      	b.n	924c <__ieee754_log+0xd0>
    94f0:	000fffff 	.word	0x000fffff
    94f4:	43500000 	.word	0x43500000
    94f8:	7fefffff 	.word	0x7fefffff
    94fc:	fffffc01 	.word	0xfffffc01
    9500:	00095f64 	.word	0x00095f64
    9504:	3ff00000 	.word	0x3ff00000
    9508:	fee00000 	.word	0xfee00000
    950c:	3fe62e42 	.word	0x3fe62e42
    9510:	35793c76 	.word	0x35793c76
    9514:	3dea39ef 	.word	0x3dea39ef
    9518:	fff9eb86 	.word	0xfff9eb86
    951c:	df3e5244 	.word	0xdf3e5244
    9520:	3fc2f112 	.word	0x3fc2f112
    9524:	96cb03de 	.word	0x96cb03de
    9528:	3fc74664 	.word	0x3fc74664
    952c:	94229359 	.word	0x94229359
    9530:	3fd24924 	.word	0x3fd24924
    9534:	55555593 	.word	0x55555593
    9538:	3fe55555 	.word	0x3fe55555
    953c:	d078c69f 	.word	0xd078c69f
    9540:	3fc39a09 	.word	0x3fc39a09
    9544:	1d8e78af 	.word	0x1d8e78af
    9548:	3fcc71c5 	.word	0x3fcc71c5
    954c:	9997fa04 	.word	0x9997fa04
    9550:	3fd99999 	.word	0x3fd99999
    9554:	0006b851 	.word	0x0006b851
    9558:	3fe00000 	.word	0x3fe00000
    955c:	c3500000 	.word	0xc3500000
    9560:	55555555 	.word	0x55555555
    9564:	3fd55555 	.word	0x3fd55555
    9568:	0022      	movs	r2, r4
    956a:	002b      	movs	r3, r5
    956c:	0030      	movs	r0, r6
    956e:	0039      	movs	r1, r7
    9570:	f003 f93a 	bl	c7e8 <__aeabi_dsub>
    9574:	9a04      	ldr	r2, [sp, #16]
    9576:	9b05      	ldr	r3, [sp, #20]
    9578:	f002 feb6 	bl	c2e8 <__aeabi_dmul>
    957c:	e6f6      	b.n	936c <__ieee754_log+0x1f0>
    957e:	46c0      	nop			; (mov r8, r8)

00009580 <__ieee754_pow>:
    9580:	b5f0      	push	{r4, r5, r6, r7, lr}
    9582:	4657      	mov	r7, sl
    9584:	464e      	mov	r6, r9
    9586:	4645      	mov	r5, r8
    9588:	46de      	mov	lr, fp
    958a:	001c      	movs	r4, r3
    958c:	0013      	movs	r3, r2
    958e:	b5e0      	push	{r5, r6, r7, lr}
    9590:	0065      	lsls	r5, r4, #1
    9592:	b091      	sub	sp, #68	; 0x44
    9594:	086d      	lsrs	r5, r5, #1
    9596:	9300      	str	r3, [sp, #0]
    9598:	9401      	str	r4, [sp, #4]
    959a:	0007      	movs	r7, r0
    959c:	000e      	movs	r6, r1
    959e:	4680      	mov	r8, r0
    95a0:	4689      	mov	r9, r1
    95a2:	46a2      	mov	sl, r4
    95a4:	432b      	orrs	r3, r5
    95a6:	d031      	beq.n	960c <__ieee754_pow+0x8c>
    95a8:	4b67      	ldr	r3, [pc, #412]	; (9748 <__ieee754_pow+0x1c8>)
    95aa:	0074      	lsls	r4, r6, #1
    95ac:	0864      	lsrs	r4, r4, #1
    95ae:	429c      	cmp	r4, r3
    95b0:	dc27      	bgt.n	9602 <__ieee754_pow+0x82>
    95b2:	d024      	beq.n	95fe <__ieee754_pow+0x7e>
    95b4:	429d      	cmp	r5, r3
    95b6:	dc24      	bgt.n	9602 <__ieee754_pow+0x82>
    95b8:	4b63      	ldr	r3, [pc, #396]	; (9748 <__ieee754_pow+0x1c8>)
    95ba:	429d      	cmp	r5, r3
    95bc:	d100      	bne.n	95c0 <__ieee754_pow+0x40>
    95be:	e081      	b.n	96c4 <__ieee754_pow+0x144>
    95c0:	2300      	movs	r3, #0
    95c2:	469b      	mov	fp, r3
    95c4:	464b      	mov	r3, r9
    95c6:	2b00      	cmp	r3, #0
    95c8:	da00      	bge.n	95cc <__ieee754_pow+0x4c>
    95ca:	e07f      	b.n	96cc <__ieee754_pow+0x14c>
    95cc:	2a00      	cmp	r2, #0
    95ce:	d12c      	bne.n	962a <__ieee754_pow+0xaa>
    95d0:	4b5d      	ldr	r3, [pc, #372]	; (9748 <__ieee754_pow+0x1c8>)
    95d2:	429d      	cmp	r5, r3
    95d4:	d100      	bne.n	95d8 <__ieee754_pow+0x58>
    95d6:	e097      	b.n	9708 <__ieee754_pow+0x188>
    95d8:	4b5c      	ldr	r3, [pc, #368]	; (974c <__ieee754_pow+0x1cc>)
    95da:	429d      	cmp	r5, r3
    95dc:	d066      	beq.n	96ac <__ieee754_pow+0x12c>
    95de:	2380      	movs	r3, #128	; 0x80
    95e0:	05db      	lsls	r3, r3, #23
    95e2:	459a      	cmp	sl, r3
    95e4:	d100      	bne.n	95e8 <__ieee754_pow+0x68>
    95e6:	e3b9      	b.n	9d5c <__ieee754_pow+0x7dc>
    95e8:	4b59      	ldr	r3, [pc, #356]	; (9750 <__ieee754_pow+0x1d0>)
    95ea:	459a      	cmp	sl, r3
    95ec:	d11d      	bne.n	962a <__ieee754_pow+0xaa>
    95ee:	464b      	mov	r3, r9
    95f0:	2b00      	cmp	r3, #0
    95f2:	db1a      	blt.n	962a <__ieee754_pow+0xaa>
    95f4:	0038      	movs	r0, r7
    95f6:	0031      	movs	r1, r6
    95f8:	f000 fcf8 	bl	9fec <__ieee754_sqrt>
    95fc:	e008      	b.n	9610 <__ieee754_pow+0x90>
    95fe:	2800      	cmp	r0, #0
    9600:	d00d      	beq.n	961e <__ieee754_pow+0x9e>
    9602:	4b54      	ldr	r3, [pc, #336]	; (9754 <__ieee754_pow+0x1d4>)
    9604:	469c      	mov	ip, r3
    9606:	4464      	add	r4, ip
    9608:	4327      	orrs	r7, r4
    960a:	d10a      	bne.n	9622 <__ieee754_pow+0xa2>
    960c:	2000      	movs	r0, #0
    960e:	494f      	ldr	r1, [pc, #316]	; (974c <__ieee754_pow+0x1cc>)
    9610:	b011      	add	sp, #68	; 0x44
    9612:	bc3c      	pop	{r2, r3, r4, r5}
    9614:	4690      	mov	r8, r2
    9616:	4699      	mov	r9, r3
    9618:	46a2      	mov	sl, r4
    961a:	46ab      	mov	fp, r5
    961c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    961e:	42a5      	cmp	r5, r4
    9620:	ddca      	ble.n	95b8 <__ieee754_pow+0x38>
    9622:	484d      	ldr	r0, [pc, #308]	; (9758 <__ieee754_pow+0x1d8>)
    9624:	f000 fdd2 	bl	a1cc <nan>
    9628:	e7f2      	b.n	9610 <__ieee754_pow+0x90>
    962a:	0038      	movs	r0, r7
    962c:	0031      	movs	r1, r6
    962e:	f000 fdbd 	bl	a1ac <fabs>
    9632:	4643      	mov	r3, r8
    9634:	2b00      	cmp	r3, #0
    9636:	d11d      	bne.n	9674 <__ieee754_pow+0xf4>
    9638:	2c00      	cmp	r4, #0
    963a:	d004      	beq.n	9646 <__ieee754_pow+0xc6>
    963c:	4a43      	ldr	r2, [pc, #268]	; (974c <__ieee754_pow+0x1cc>)
    963e:	00b3      	lsls	r3, r6, #2
    9640:	089b      	lsrs	r3, r3, #2
    9642:	4293      	cmp	r3, r2
    9644:	d116      	bne.n	9674 <__ieee754_pow+0xf4>
    9646:	4653      	mov	r3, sl
    9648:	2b00      	cmp	r3, #0
    964a:	da00      	bge.n	964e <__ieee754_pow+0xce>
    964c:	e3c5      	b.n	9dda <__ieee754_pow+0x85a>
    964e:	464b      	mov	r3, r9
    9650:	2b00      	cmp	r3, #0
    9652:	dadd      	bge.n	9610 <__ieee754_pow+0x90>
    9654:	4b3f      	ldr	r3, [pc, #252]	; (9754 <__ieee754_pow+0x1d4>)
    9656:	469c      	mov	ip, r3
    9658:	465b      	mov	r3, fp
    965a:	4464      	add	r4, ip
    965c:	431c      	orrs	r4, r3
    965e:	d101      	bne.n	9664 <__ieee754_pow+0xe4>
    9660:	f000 fc53 	bl	9f0a <__ieee754_pow+0x98a>
    9664:	465b      	mov	r3, fp
    9666:	2b01      	cmp	r3, #1
    9668:	d1d2      	bne.n	9610 <__ieee754_pow+0x90>
    966a:	2480      	movs	r4, #128	; 0x80
    966c:	0624      	lsls	r4, r4, #24
    966e:	190b      	adds	r3, r1, r4
    9670:	0019      	movs	r1, r3
    9672:	e7cd      	b.n	9610 <__ieee754_pow+0x90>
    9674:	0ff3      	lsrs	r3, r6, #31
    9676:	3b01      	subs	r3, #1
    9678:	4698      	mov	r8, r3
    967a:	465b      	mov	r3, fp
    967c:	4642      	mov	r2, r8
    967e:	4313      	orrs	r3, r2
    9680:	d057      	beq.n	9732 <__ieee754_pow+0x1b2>
    9682:	4b36      	ldr	r3, [pc, #216]	; (975c <__ieee754_pow+0x1dc>)
    9684:	429d      	cmp	r5, r3
    9686:	dd77      	ble.n	9778 <__ieee754_pow+0x1f8>
    9688:	4b35      	ldr	r3, [pc, #212]	; (9760 <__ieee754_pow+0x1e0>)
    968a:	429d      	cmp	r5, r3
    968c:	dc00      	bgt.n	9690 <__ieee754_pow+0x110>
    968e:	e3b1      	b.n	9df4 <__ieee754_pow+0x874>
    9690:	4b34      	ldr	r3, [pc, #208]	; (9764 <__ieee754_pow+0x1e4>)
    9692:	429c      	cmp	r4, r3
    9694:	dc00      	bgt.n	9698 <__ieee754_pow+0x118>
    9696:	e3a8      	b.n	9dea <__ieee754_pow+0x86a>
    9698:	4653      	mov	r3, sl
    969a:	2b00      	cmp	r3, #0
    969c:	dd43      	ble.n	9726 <__ieee754_pow+0x1a6>
    969e:	4a32      	ldr	r2, [pc, #200]	; (9768 <__ieee754_pow+0x1e8>)
    96a0:	4b32      	ldr	r3, [pc, #200]	; (976c <__ieee754_pow+0x1ec>)
    96a2:	0010      	movs	r0, r2
    96a4:	0019      	movs	r1, r3
    96a6:	f002 fe1f 	bl	c2e8 <__aeabi_dmul>
    96aa:	e7b1      	b.n	9610 <__ieee754_pow+0x90>
    96ac:	4653      	mov	r3, sl
    96ae:	0038      	movs	r0, r7
    96b0:	0031      	movs	r1, r6
    96b2:	2b00      	cmp	r3, #0
    96b4:	daac      	bge.n	9610 <__ieee754_pow+0x90>
    96b6:	003a      	movs	r2, r7
    96b8:	0033      	movs	r3, r6
    96ba:	2000      	movs	r0, #0
    96bc:	4923      	ldr	r1, [pc, #140]	; (974c <__ieee754_pow+0x1cc>)
    96be:	f002 f9df 	bl	ba80 <__aeabi_ddiv>
    96c2:	e7a5      	b.n	9610 <__ieee754_pow+0x90>
    96c4:	2a00      	cmp	r2, #0
    96c6:	d100      	bne.n	96ca <__ieee754_pow+0x14a>
    96c8:	e77a      	b.n	95c0 <__ieee754_pow+0x40>
    96ca:	e79a      	b.n	9602 <__ieee754_pow+0x82>
    96cc:	4b28      	ldr	r3, [pc, #160]	; (9770 <__ieee754_pow+0x1f0>)
    96ce:	429d      	cmp	r5, r3
    96d0:	dc2c      	bgt.n	972c <__ieee754_pow+0x1ac>
    96d2:	4b24      	ldr	r3, [pc, #144]	; (9764 <__ieee754_pow+0x1e4>)
    96d4:	429d      	cmp	r5, r3
    96d6:	dc00      	bgt.n	96da <__ieee754_pow+0x15a>
    96d8:	e778      	b.n	95cc <__ieee754_pow+0x4c>
    96da:	4926      	ldr	r1, [pc, #152]	; (9774 <__ieee754_pow+0x1f4>)
    96dc:	152b      	asrs	r3, r5, #20
    96de:	468c      	mov	ip, r1
    96e0:	4463      	add	r3, ip
    96e2:	2b14      	cmp	r3, #20
    96e4:	dc01      	bgt.n	96ea <__ieee754_pow+0x16a>
    96e6:	f000 fbf3 	bl	9ed0 <__ieee754_pow+0x950>
    96ea:	2134      	movs	r1, #52	; 0x34
    96ec:	1acb      	subs	r3, r1, r3
    96ee:	9900      	ldr	r1, [sp, #0]
    96f0:	40d9      	lsrs	r1, r3
    96f2:	0008      	movs	r0, r1
    96f4:	4098      	lsls	r0, r3
    96f6:	4282      	cmp	r2, r0
    96f8:	d000      	beq.n	96fc <__ieee754_pow+0x17c>
    96fa:	e767      	b.n	95cc <__ieee754_pow+0x4c>
    96fc:	2301      	movs	r3, #1
    96fe:	4019      	ands	r1, r3
    9700:	3301      	adds	r3, #1
    9702:	1a5b      	subs	r3, r3, r1
    9704:	469b      	mov	fp, r3
    9706:	e761      	b.n	95cc <__ieee754_pow+0x4c>
    9708:	4b12      	ldr	r3, [pc, #72]	; (9754 <__ieee754_pow+0x1d4>)
    970a:	18e3      	adds	r3, r4, r3
    970c:	431f      	orrs	r7, r3
    970e:	d100      	bne.n	9712 <__ieee754_pow+0x192>
    9710:	e77c      	b.n	960c <__ieee754_pow+0x8c>
    9712:	4b14      	ldr	r3, [pc, #80]	; (9764 <__ieee754_pow+0x1e4>)
    9714:	429c      	cmp	r4, r3
    9716:	dc00      	bgt.n	971a <__ieee754_pow+0x19a>
    9718:	e327      	b.n	9d6a <__ieee754_pow+0x7ea>
    971a:	9800      	ldr	r0, [sp, #0]
    971c:	9901      	ldr	r1, [sp, #4]
    971e:	4653      	mov	r3, sl
    9720:	2b00      	cmp	r3, #0
    9722:	db00      	blt.n	9726 <__ieee754_pow+0x1a6>
    9724:	e774      	b.n	9610 <__ieee754_pow+0x90>
    9726:	2000      	movs	r0, #0
    9728:	2100      	movs	r1, #0
    972a:	e771      	b.n	9610 <__ieee754_pow+0x90>
    972c:	2302      	movs	r3, #2
    972e:	469b      	mov	fp, r3
    9730:	e74c      	b.n	95cc <__ieee754_pow+0x4c>
    9732:	003a      	movs	r2, r7
    9734:	0033      	movs	r3, r6
    9736:	0038      	movs	r0, r7
    9738:	0031      	movs	r1, r6
    973a:	f003 f855 	bl	c7e8 <__aeabi_dsub>
    973e:	0002      	movs	r2, r0
    9740:	000b      	movs	r3, r1
    9742:	f002 f99d 	bl	ba80 <__aeabi_ddiv>
    9746:	e763      	b.n	9610 <__ieee754_pow+0x90>
    9748:	7ff00000 	.word	0x7ff00000
    974c:	3ff00000 	.word	0x3ff00000
    9750:	3fe00000 	.word	0x3fe00000
    9754:	c0100000 	.word	0xc0100000
    9758:	000120e4 	.word	0x000120e4
    975c:	41e00000 	.word	0x41e00000
    9760:	43f00000 	.word	0x43f00000
    9764:	3fefffff 	.word	0x3fefffff
    9768:	8800759c 	.word	0x8800759c
    976c:	7e37e43c 	.word	0x7e37e43c
    9770:	433fffff 	.word	0x433fffff
    9774:	fffffc01 	.word	0xfffffc01
    9778:	4be9      	ldr	r3, [pc, #932]	; (9b20 <__ieee754_pow+0x5a0>)
    977a:	2200      	movs	r2, #0
    977c:	429c      	cmp	r4, r3
    977e:	dc06      	bgt.n	978e <__ieee754_pow+0x20e>
    9780:	2200      	movs	r2, #0
    9782:	4be8      	ldr	r3, [pc, #928]	; (9b24 <__ieee754_pow+0x5a4>)
    9784:	f002 fdb0 	bl	c2e8 <__aeabi_dmul>
    9788:	2235      	movs	r2, #53	; 0x35
    978a:	000c      	movs	r4, r1
    978c:	4252      	negs	r2, r2
    978e:	4de6      	ldr	r5, [pc, #920]	; (9b28 <__ieee754_pow+0x5a8>)
    9790:	1523      	asrs	r3, r4, #20
    9792:	46ac      	mov	ip, r5
    9794:	4463      	add	r3, ip
    9796:	4699      	mov	r9, r3
    9798:	0324      	lsls	r4, r4, #12
    979a:	4de4      	ldr	r5, [pc, #912]	; (9b2c <__ieee754_pow+0x5ac>)
    979c:	4be4      	ldr	r3, [pc, #912]	; (9b30 <__ieee754_pow+0x5b0>)
    979e:	0b24      	lsrs	r4, r4, #12
    97a0:	4491      	add	r9, r2
    97a2:	4325      	orrs	r5, r4
    97a4:	429c      	cmp	r4, r3
    97a6:	dd09      	ble.n	97bc <__ieee754_pow+0x23c>
    97a8:	4be2      	ldr	r3, [pc, #904]	; (9b34 <__ieee754_pow+0x5b4>)
    97aa:	429c      	cmp	r4, r3
    97ac:	dc00      	bgt.n	97b0 <__ieee754_pow+0x230>
    97ae:	e3b6      	b.n	9f1e <__ieee754_pow+0x99e>
    97b0:	2301      	movs	r3, #1
    97b2:	469c      	mov	ip, r3
    97b4:	4be0      	ldr	r3, [pc, #896]	; (9b38 <__ieee754_pow+0x5b8>)
    97b6:	44e1      	add	r9, ip
    97b8:	469c      	mov	ip, r3
    97ba:	4465      	add	r5, ip
    97bc:	2300      	movs	r3, #0
    97be:	2400      	movs	r4, #0
    97c0:	2200      	movs	r2, #0
    97c2:	9308      	str	r3, [sp, #32]
    97c4:	9409      	str	r4, [sp, #36]	; 0x24
    97c6:	930c      	str	r3, [sp, #48]	; 0x30
    97c8:	940d      	str	r4, [sp, #52]	; 0x34
    97ca:	2400      	movs	r4, #0
    97cc:	4bd7      	ldr	r3, [pc, #860]	; (9b2c <__ieee754_pow+0x5ac>)
    97ce:	9206      	str	r2, [sp, #24]
    97d0:	9307      	str	r3, [sp, #28]
    97d2:	9a06      	ldr	r2, [sp, #24]
    97d4:	9b07      	ldr	r3, [sp, #28]
    97d6:	0029      	movs	r1, r5
    97d8:	900a      	str	r0, [sp, #40]	; 0x28
    97da:	910b      	str	r1, [sp, #44]	; 0x2c
    97dc:	f003 f804 	bl	c7e8 <__aeabi_dsub>
    97e0:	9a06      	ldr	r2, [sp, #24]
    97e2:	9b07      	ldr	r3, [sp, #28]
    97e4:	0006      	movs	r6, r0
    97e6:	000f      	movs	r7, r1
    97e8:	980a      	ldr	r0, [sp, #40]	; 0x28
    97ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
    97ec:	f001 fe38 	bl	b460 <__aeabi_dadd>
    97f0:	0002      	movs	r2, r0
    97f2:	000b      	movs	r3, r1
    97f4:	2000      	movs	r0, #0
    97f6:	49cd      	ldr	r1, [pc, #820]	; (9b2c <__ieee754_pow+0x5ac>)
    97f8:	f002 f942 	bl	ba80 <__aeabi_ddiv>
    97fc:	000a      	movs	r2, r1
    97fe:	0001      	movs	r1, r0
    9800:	0013      	movs	r3, r2
    9802:	910e      	str	r1, [sp, #56]	; 0x38
    9804:	920f      	str	r2, [sp, #60]	; 0x3c
    9806:	0002      	movs	r2, r0
    9808:	0039      	movs	r1, r7
    980a:	0030      	movs	r0, r6
    980c:	f002 fd6c 	bl	c2e8 <__aeabi_dmul>
    9810:	000a      	movs	r2, r1
    9812:	0001      	movs	r1, r0
    9814:	2080      	movs	r0, #128	; 0x80
    9816:	9104      	str	r1, [sp, #16]
    9818:	9205      	str	r2, [sp, #20]
    981a:	0013      	movs	r3, r2
    981c:	2200      	movs	r2, #0
    981e:	1069      	asrs	r1, r5, #1
    9820:	2580      	movs	r5, #128	; 0x80
    9822:	0300      	lsls	r0, r0, #12
    9824:	4684      	mov	ip, r0
    9826:	9202      	str	r2, [sp, #8]
    9828:	9303      	str	r3, [sp, #12]
    982a:	2200      	movs	r2, #0
    982c:	05ad      	lsls	r5, r5, #22
    982e:	430d      	orrs	r5, r1
    9830:	4465      	add	r5, ip
    9832:	192b      	adds	r3, r5, r4
    9834:	9802      	ldr	r0, [sp, #8]
    9836:	9903      	ldr	r1, [sp, #12]
    9838:	0014      	movs	r4, r2
    983a:	001d      	movs	r5, r3
    983c:	f002 fd54 	bl	c2e8 <__aeabi_dmul>
    9840:	0002      	movs	r2, r0
    9842:	000b      	movs	r3, r1
    9844:	0030      	movs	r0, r6
    9846:	0039      	movs	r1, r7
    9848:	f002 ffce 	bl	c7e8 <__aeabi_dsub>
    984c:	9a06      	ldr	r2, [sp, #24]
    984e:	9b07      	ldr	r3, [sp, #28]
    9850:	0006      	movs	r6, r0
    9852:	000f      	movs	r7, r1
    9854:	0020      	movs	r0, r4
    9856:	0029      	movs	r1, r5
    9858:	f002 ffc6 	bl	c7e8 <__aeabi_dsub>
    985c:	0002      	movs	r2, r0
    985e:	000b      	movs	r3, r1
    9860:	980a      	ldr	r0, [sp, #40]	; 0x28
    9862:	990b      	ldr	r1, [sp, #44]	; 0x2c
    9864:	f002 ffc0 	bl	c7e8 <__aeabi_dsub>
    9868:	9a02      	ldr	r2, [sp, #8]
    986a:	9b03      	ldr	r3, [sp, #12]
    986c:	f002 fd3c 	bl	c2e8 <__aeabi_dmul>
    9870:	0002      	movs	r2, r0
    9872:	000b      	movs	r3, r1
    9874:	0030      	movs	r0, r6
    9876:	0039      	movs	r1, r7
    9878:	f002 ffb6 	bl	c7e8 <__aeabi_dsub>
    987c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    987e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9880:	f002 fd32 	bl	c2e8 <__aeabi_dmul>
    9884:	9d04      	ldr	r5, [sp, #16]
    9886:	9e05      	ldr	r6, [sp, #20]
    9888:	9006      	str	r0, [sp, #24]
    988a:	9107      	str	r1, [sp, #28]
    988c:	002a      	movs	r2, r5
    988e:	0033      	movs	r3, r6
    9890:	0028      	movs	r0, r5
    9892:	0031      	movs	r1, r6
    9894:	f002 fd28 	bl	c2e8 <__aeabi_dmul>
    9898:	0006      	movs	r6, r0
    989a:	000f      	movs	r7, r1
    989c:	4aa7      	ldr	r2, [pc, #668]	; (9b3c <__ieee754_pow+0x5bc>)
    989e:	4ba8      	ldr	r3, [pc, #672]	; (9b40 <__ieee754_pow+0x5c0>)
    98a0:	f002 fd22 	bl	c2e8 <__aeabi_dmul>
    98a4:	4aa7      	ldr	r2, [pc, #668]	; (9b44 <__ieee754_pow+0x5c4>)
    98a6:	4ba8      	ldr	r3, [pc, #672]	; (9b48 <__ieee754_pow+0x5c8>)
    98a8:	f001 fdda 	bl	b460 <__aeabi_dadd>
    98ac:	0032      	movs	r2, r6
    98ae:	003b      	movs	r3, r7
    98b0:	f002 fd1a 	bl	c2e8 <__aeabi_dmul>
    98b4:	4aa5      	ldr	r2, [pc, #660]	; (9b4c <__ieee754_pow+0x5cc>)
    98b6:	4ba6      	ldr	r3, [pc, #664]	; (9b50 <__ieee754_pow+0x5d0>)
    98b8:	f001 fdd2 	bl	b460 <__aeabi_dadd>
    98bc:	0032      	movs	r2, r6
    98be:	003b      	movs	r3, r7
    98c0:	f002 fd12 	bl	c2e8 <__aeabi_dmul>
    98c4:	4aa3      	ldr	r2, [pc, #652]	; (9b54 <__ieee754_pow+0x5d4>)
    98c6:	4ba4      	ldr	r3, [pc, #656]	; (9b58 <__ieee754_pow+0x5d8>)
    98c8:	f001 fdca 	bl	b460 <__aeabi_dadd>
    98cc:	0032      	movs	r2, r6
    98ce:	003b      	movs	r3, r7
    98d0:	f002 fd0a 	bl	c2e8 <__aeabi_dmul>
    98d4:	4aa1      	ldr	r2, [pc, #644]	; (9b5c <__ieee754_pow+0x5dc>)
    98d6:	4ba2      	ldr	r3, [pc, #648]	; (9b60 <__ieee754_pow+0x5e0>)
    98d8:	f001 fdc2 	bl	b460 <__aeabi_dadd>
    98dc:	0032      	movs	r2, r6
    98de:	003b      	movs	r3, r7
    98e0:	f002 fd02 	bl	c2e8 <__aeabi_dmul>
    98e4:	4a9f      	ldr	r2, [pc, #636]	; (9b64 <__ieee754_pow+0x5e4>)
    98e6:	4ba0      	ldr	r3, [pc, #640]	; (9b68 <__ieee754_pow+0x5e8>)
    98e8:	f001 fdba 	bl	b460 <__aeabi_dadd>
    98ec:	0032      	movs	r2, r6
    98ee:	0004      	movs	r4, r0
    98f0:	000d      	movs	r5, r1
    98f2:	003b      	movs	r3, r7
    98f4:	0030      	movs	r0, r6
    98f6:	0039      	movs	r1, r7
    98f8:	f002 fcf6 	bl	c2e8 <__aeabi_dmul>
    98fc:	0002      	movs	r2, r0
    98fe:	000b      	movs	r3, r1
    9900:	0020      	movs	r0, r4
    9902:	0029      	movs	r1, r5
    9904:	f002 fcf0 	bl	c2e8 <__aeabi_dmul>
    9908:	9e02      	ldr	r6, [sp, #8]
    990a:	9f03      	ldr	r7, [sp, #12]
    990c:	0004      	movs	r4, r0
    990e:	000d      	movs	r5, r1
    9910:	9804      	ldr	r0, [sp, #16]
    9912:	9905      	ldr	r1, [sp, #20]
    9914:	0032      	movs	r2, r6
    9916:	003b      	movs	r3, r7
    9918:	f001 fda2 	bl	b460 <__aeabi_dadd>
    991c:	9a06      	ldr	r2, [sp, #24]
    991e:	9b07      	ldr	r3, [sp, #28]
    9920:	f002 fce2 	bl	c2e8 <__aeabi_dmul>
    9924:	0022      	movs	r2, r4
    9926:	002b      	movs	r3, r5
    9928:	f001 fd9a 	bl	b460 <__aeabi_dadd>
    992c:	0032      	movs	r2, r6
    992e:	900a      	str	r0, [sp, #40]	; 0x28
    9930:	910b      	str	r1, [sp, #44]	; 0x2c
    9932:	003b      	movs	r3, r7
    9934:	0030      	movs	r0, r6
    9936:	0039      	movs	r1, r7
    9938:	9602      	str	r6, [sp, #8]
    993a:	9703      	str	r7, [sp, #12]
    993c:	f002 fcd4 	bl	c2e8 <__aeabi_dmul>
    9940:	2200      	movs	r2, #0
    9942:	4b8a      	ldr	r3, [pc, #552]	; (9b6c <__ieee754_pow+0x5ec>)
    9944:	0004      	movs	r4, r0
    9946:	000d      	movs	r5, r1
    9948:	f001 fd8a 	bl	b460 <__aeabi_dadd>
    994c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    994e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9950:	f001 fd86 	bl	b460 <__aeabi_dadd>
    9954:	2600      	movs	r6, #0
    9956:	000f      	movs	r7, r1
    9958:	0032      	movs	r2, r6
    995a:	000b      	movs	r3, r1
    995c:	9802      	ldr	r0, [sp, #8]
    995e:	9903      	ldr	r1, [sp, #12]
    9960:	f002 fcc2 	bl	c2e8 <__aeabi_dmul>
    9964:	2200      	movs	r2, #0
    9966:	9002      	str	r0, [sp, #8]
    9968:	9103      	str	r1, [sp, #12]
    996a:	4b80      	ldr	r3, [pc, #512]	; (9b6c <__ieee754_pow+0x5ec>)
    996c:	0030      	movs	r0, r6
    996e:	0039      	movs	r1, r7
    9970:	f002 ff3a 	bl	c7e8 <__aeabi_dsub>
    9974:	0022      	movs	r2, r4
    9976:	002b      	movs	r3, r5
    9978:	f002 ff36 	bl	c7e8 <__aeabi_dsub>
    997c:	0002      	movs	r2, r0
    997e:	000b      	movs	r3, r1
    9980:	980a      	ldr	r0, [sp, #40]	; 0x28
    9982:	990b      	ldr	r1, [sp, #44]	; 0x2c
    9984:	f002 ff30 	bl	c7e8 <__aeabi_dsub>
    9988:	9a04      	ldr	r2, [sp, #16]
    998a:	9b05      	ldr	r3, [sp, #20]
    998c:	f002 fcac 	bl	c2e8 <__aeabi_dmul>
    9990:	0032      	movs	r2, r6
    9992:	0004      	movs	r4, r0
    9994:	000d      	movs	r5, r1
    9996:	9806      	ldr	r0, [sp, #24]
    9998:	9907      	ldr	r1, [sp, #28]
    999a:	003b      	movs	r3, r7
    999c:	f002 fca4 	bl	c2e8 <__aeabi_dmul>
    99a0:	0002      	movs	r2, r0
    99a2:	000b      	movs	r3, r1
    99a4:	0020      	movs	r0, r4
    99a6:	0029      	movs	r1, r5
    99a8:	f001 fd5a 	bl	b460 <__aeabi_dadd>
    99ac:	0004      	movs	r4, r0
    99ae:	000d      	movs	r5, r1
    99b0:	0002      	movs	r2, r0
    99b2:	000b      	movs	r3, r1
    99b4:	9802      	ldr	r0, [sp, #8]
    99b6:	9903      	ldr	r1, [sp, #12]
    99b8:	f001 fd52 	bl	b460 <__aeabi_dadd>
    99bc:	2600      	movs	r6, #0
    99be:	22e0      	movs	r2, #224	; 0xe0
    99c0:	4b6b      	ldr	r3, [pc, #428]	; (9b70 <__ieee754_pow+0x5f0>)
    99c2:	0612      	lsls	r2, r2, #24
    99c4:	0030      	movs	r0, r6
    99c6:	000f      	movs	r7, r1
    99c8:	f002 fc8e 	bl	c2e8 <__aeabi_dmul>
    99cc:	9a02      	ldr	r2, [sp, #8]
    99ce:	9b03      	ldr	r3, [sp, #12]
    99d0:	9004      	str	r0, [sp, #16]
    99d2:	9105      	str	r1, [sp, #20]
    99d4:	0030      	movs	r0, r6
    99d6:	0039      	movs	r1, r7
    99d8:	f002 ff06 	bl	c7e8 <__aeabi_dsub>
    99dc:	0002      	movs	r2, r0
    99de:	000b      	movs	r3, r1
    99e0:	0020      	movs	r0, r4
    99e2:	0029      	movs	r1, r5
    99e4:	f002 ff00 	bl	c7e8 <__aeabi_dsub>
    99e8:	4a62      	ldr	r2, [pc, #392]	; (9b74 <__ieee754_pow+0x5f4>)
    99ea:	4b61      	ldr	r3, [pc, #388]	; (9b70 <__ieee754_pow+0x5f0>)
    99ec:	f002 fc7c 	bl	c2e8 <__aeabi_dmul>
    99f0:	4a61      	ldr	r2, [pc, #388]	; (9b78 <__ieee754_pow+0x5f8>)
    99f2:	0004      	movs	r4, r0
    99f4:	000d      	movs	r5, r1
    99f6:	4b61      	ldr	r3, [pc, #388]	; (9b7c <__ieee754_pow+0x5fc>)
    99f8:	0030      	movs	r0, r6
    99fa:	0039      	movs	r1, r7
    99fc:	f002 fc74 	bl	c2e8 <__aeabi_dmul>
    9a00:	0002      	movs	r2, r0
    9a02:	000b      	movs	r3, r1
    9a04:	0020      	movs	r0, r4
    9a06:	0029      	movs	r1, r5
    9a08:	f001 fd2a 	bl	b460 <__aeabi_dadd>
    9a0c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9a0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9a10:	f001 fd26 	bl	b460 <__aeabi_dadd>
    9a14:	0006      	movs	r6, r0
    9a16:	4648      	mov	r0, r9
    9a18:	000f      	movs	r7, r1
    9a1a:	f003 fa4f 	bl	cebc <__aeabi_i2d>
    9a1e:	0004      	movs	r4, r0
    9a20:	000d      	movs	r5, r1
    9a22:	9804      	ldr	r0, [sp, #16]
    9a24:	9905      	ldr	r1, [sp, #20]
    9a26:	0032      	movs	r2, r6
    9a28:	003b      	movs	r3, r7
    9a2a:	f001 fd19 	bl	b460 <__aeabi_dadd>
    9a2e:	9a08      	ldr	r2, [sp, #32]
    9a30:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9a32:	f001 fd15 	bl	b460 <__aeabi_dadd>
    9a36:	0022      	movs	r2, r4
    9a38:	002b      	movs	r3, r5
    9a3a:	f001 fd11 	bl	b460 <__aeabi_dadd>
    9a3e:	2000      	movs	r0, #0
    9a40:	0022      	movs	r2, r4
    9a42:	002b      	movs	r3, r5
    9a44:	9002      	str	r0, [sp, #8]
    9a46:	9103      	str	r1, [sp, #12]
    9a48:	f002 fece 	bl	c7e8 <__aeabi_dsub>
    9a4c:	9a08      	ldr	r2, [sp, #32]
    9a4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9a50:	f002 feca 	bl	c7e8 <__aeabi_dsub>
    9a54:	9a04      	ldr	r2, [sp, #16]
    9a56:	9b05      	ldr	r3, [sp, #20]
    9a58:	f002 fec6 	bl	c7e8 <__aeabi_dsub>
    9a5c:	0002      	movs	r2, r0
    9a5e:	000b      	movs	r3, r1
    9a60:	0030      	movs	r0, r6
    9a62:	0039      	movs	r1, r7
    9a64:	f002 fec0 	bl	c7e8 <__aeabi_dsub>
    9a68:	9004      	str	r0, [sp, #16]
    9a6a:	9105      	str	r1, [sp, #20]
    9a6c:	465b      	mov	r3, fp
    9a6e:	4642      	mov	r2, r8
    9a70:	3b01      	subs	r3, #1
    9a72:	4313      	orrs	r3, r2
    9a74:	d100      	bne.n	9a78 <__ieee754_pow+0x4f8>
    9a76:	e1ab      	b.n	9dd0 <__ieee754_pow+0x850>
    9a78:	2300      	movs	r3, #0
    9a7a:	4c2c      	ldr	r4, [pc, #176]	; (9b2c <__ieee754_pow+0x5ac>)
    9a7c:	9306      	str	r3, [sp, #24]
    9a7e:	9407      	str	r4, [sp, #28]
    9a80:	9800      	ldr	r0, [sp, #0]
    9a82:	9901      	ldr	r1, [sp, #4]
    9a84:	2600      	movs	r6, #0
    9a86:	000b      	movs	r3, r1
    9a88:	0032      	movs	r2, r6
    9a8a:	000f      	movs	r7, r1
    9a8c:	f002 feac 	bl	c7e8 <__aeabi_dsub>
    9a90:	9a02      	ldr	r2, [sp, #8]
    9a92:	9b03      	ldr	r3, [sp, #12]
    9a94:	f002 fc28 	bl	c2e8 <__aeabi_dmul>
    9a98:	9a00      	ldr	r2, [sp, #0]
    9a9a:	9b01      	ldr	r3, [sp, #4]
    9a9c:	0004      	movs	r4, r0
    9a9e:	000d      	movs	r5, r1
    9aa0:	9804      	ldr	r0, [sp, #16]
    9aa2:	9905      	ldr	r1, [sp, #20]
    9aa4:	f002 fc20 	bl	c2e8 <__aeabi_dmul>
    9aa8:	0002      	movs	r2, r0
    9aaa:	000b      	movs	r3, r1
    9aac:	0020      	movs	r0, r4
    9aae:	0029      	movs	r1, r5
    9ab0:	f001 fcd6 	bl	b460 <__aeabi_dadd>
    9ab4:	0004      	movs	r4, r0
    9ab6:	000d      	movs	r5, r1
    9ab8:	9802      	ldr	r0, [sp, #8]
    9aba:	9903      	ldr	r1, [sp, #12]
    9abc:	0032      	movs	r2, r6
    9abe:	003b      	movs	r3, r7
    9ac0:	9400      	str	r4, [sp, #0]
    9ac2:	9501      	str	r5, [sp, #4]
    9ac4:	f002 fc10 	bl	c2e8 <__aeabi_dmul>
    9ac8:	0002      	movs	r2, r0
    9aca:	000b      	movs	r3, r1
    9acc:	0006      	movs	r6, r0
    9ace:	000f      	movs	r7, r1
    9ad0:	0020      	movs	r0, r4
    9ad2:	0029      	movs	r1, r5
    9ad4:	f001 fcc4 	bl	b460 <__aeabi_dadd>
    9ad8:	4b29      	ldr	r3, [pc, #164]	; (9b80 <__ieee754_pow+0x600>)
    9ada:	0004      	movs	r4, r0
    9adc:	000d      	movs	r5, r1
    9ade:	0002      	movs	r2, r0
    9ae0:	468b      	mov	fp, r1
    9ae2:	4299      	cmp	r1, r3
    9ae4:	dc00      	bgt.n	9ae8 <__ieee754_pow+0x568>
    9ae6:	e14f      	b.n	9d88 <__ieee754_pow+0x808>
    9ae8:	4b26      	ldr	r3, [pc, #152]	; (9b84 <__ieee754_pow+0x604>)
    9aea:	18cb      	adds	r3, r1, r3
    9aec:	4303      	orrs	r3, r0
    9aee:	d000      	beq.n	9af2 <__ieee754_pow+0x572>
    9af0:	e1e2      	b.n	9eb8 <__ieee754_pow+0x938>
    9af2:	9800      	ldr	r0, [sp, #0]
    9af4:	9901      	ldr	r1, [sp, #4]
    9af6:	4a24      	ldr	r2, [pc, #144]	; (9b88 <__ieee754_pow+0x608>)
    9af8:	4b24      	ldr	r3, [pc, #144]	; (9b8c <__ieee754_pow+0x60c>)
    9afa:	f001 fcb1 	bl	b460 <__aeabi_dadd>
    9afe:	0032      	movs	r2, r6
    9b00:	9002      	str	r0, [sp, #8]
    9b02:	9103      	str	r1, [sp, #12]
    9b04:	003b      	movs	r3, r7
    9b06:	0020      	movs	r0, r4
    9b08:	0029      	movs	r1, r5
    9b0a:	f002 fe6d 	bl	c7e8 <__aeabi_dsub>
    9b0e:	0002      	movs	r2, r0
    9b10:	000b      	movs	r3, r1
    9b12:	9802      	ldr	r0, [sp, #8]
    9b14:	9903      	ldr	r1, [sp, #12]
    9b16:	f000 fe11 	bl	a73c <__aeabi_dcmpgt>
    9b1a:	46aa      	mov	sl, r5
    9b1c:	e038      	b.n	9b90 <__ieee754_pow+0x610>
    9b1e:	46c0      	nop			; (mov r8, r8)
    9b20:	000fffff 	.word	0x000fffff
    9b24:	43400000 	.word	0x43400000
    9b28:	fffffc01 	.word	0xfffffc01
    9b2c:	3ff00000 	.word	0x3ff00000
    9b30:	0003988e 	.word	0x0003988e
    9b34:	000bb679 	.word	0x000bb679
    9b38:	fff00000 	.word	0xfff00000
    9b3c:	4a454eef 	.word	0x4a454eef
    9b40:	3fca7e28 	.word	0x3fca7e28
    9b44:	93c9db65 	.word	0x93c9db65
    9b48:	3fcd864a 	.word	0x3fcd864a
    9b4c:	a91d4101 	.word	0xa91d4101
    9b50:	3fd17460 	.word	0x3fd17460
    9b54:	518f264d 	.word	0x518f264d
    9b58:	3fd55555 	.word	0x3fd55555
    9b5c:	db6fabff 	.word	0xdb6fabff
    9b60:	3fdb6db6 	.word	0x3fdb6db6
    9b64:	33333303 	.word	0x33333303
    9b68:	3fe33333 	.word	0x3fe33333
    9b6c:	40080000 	.word	0x40080000
    9b70:	3feec709 	.word	0x3feec709
    9b74:	dc3a03fd 	.word	0xdc3a03fd
    9b78:	145b01f5 	.word	0x145b01f5
    9b7c:	be3e2fe0 	.word	0xbe3e2fe0
    9b80:	408fffff 	.word	0x408fffff
    9b84:	bf700000 	.word	0xbf700000
    9b88:	652b82fe 	.word	0x652b82fe
    9b8c:	3c971547 	.word	0x3c971547
    9b90:	2800      	cmp	r0, #0
    9b92:	d000      	beq.n	9b96 <__ieee754_pow+0x616>
    9b94:	e190      	b.n	9eb8 <__ieee754_pow+0x938>
    9b96:	4aec      	ldr	r2, [pc, #944]	; (9f48 <__ieee754_pow+0x9c8>)
    9b98:	4653      	mov	r3, sl
    9b9a:	4694      	mov	ip, r2
    9b9c:	2280      	movs	r2, #128	; 0x80
    9b9e:	0352      	lsls	r2, r2, #13
    9ba0:	0011      	movs	r1, r2
    9ba2:	151b      	asrs	r3, r3, #20
    9ba4:	4463      	add	r3, ip
    9ba6:	4119      	asrs	r1, r3
    9ba8:	000b      	movs	r3, r1
    9baa:	4690      	mov	r8, r2
    9bac:	4ae7      	ldr	r2, [pc, #924]	; (9f4c <__ieee754_pow+0x9cc>)
    9bae:	445b      	add	r3, fp
    9bb0:	4694      	mov	ip, r2
    9bb2:	005c      	lsls	r4, r3, #1
    9bb4:	0d64      	lsrs	r4, r4, #21
    9bb6:	4de6      	ldr	r5, [pc, #920]	; (9f50 <__ieee754_pow+0x9d0>)
    9bb8:	4464      	add	r4, ip
    9bba:	4125      	asrs	r5, r4
    9bbc:	001a      	movs	r2, r3
    9bbe:	43aa      	bics	r2, r5
    9bc0:	0011      	movs	r1, r2
    9bc2:	4642      	mov	r2, r8
    9bc4:	031b      	lsls	r3, r3, #12
    9bc6:	0b1b      	lsrs	r3, r3, #12
    9bc8:	4313      	orrs	r3, r2
    9bca:	2214      	movs	r2, #20
    9bcc:	1b14      	subs	r4, r2, r4
    9bce:	4123      	asrs	r3, r4
    9bd0:	4699      	mov	r9, r3
    9bd2:	465b      	mov	r3, fp
    9bd4:	2000      	movs	r0, #0
    9bd6:	2b00      	cmp	r3, #0
    9bd8:	da00      	bge.n	9bdc <__ieee754_pow+0x65c>
    9bda:	e1b0      	b.n	9f3e <__ieee754_pow+0x9be>
    9bdc:	0002      	movs	r2, r0
    9bde:	000b      	movs	r3, r1
    9be0:	0030      	movs	r0, r6
    9be2:	0039      	movs	r1, r7
    9be4:	f002 fe00 	bl	c7e8 <__aeabi_dsub>
    9be8:	000b      	movs	r3, r1
    9bea:	0002      	movs	r2, r0
    9bec:	0006      	movs	r6, r0
    9bee:	000f      	movs	r7, r1
    9bf0:	9800      	ldr	r0, [sp, #0]
    9bf2:	9901      	ldr	r1, [sp, #4]
    9bf4:	f001 fc34 	bl	b460 <__aeabi_dadd>
    9bf8:	464b      	mov	r3, r9
    9bfa:	051b      	lsls	r3, r3, #20
    9bfc:	000d      	movs	r5, r1
    9bfe:	4698      	mov	r8, r3
    9c00:	2400      	movs	r4, #0
    9c02:	2200      	movs	r2, #0
    9c04:	4bd3      	ldr	r3, [pc, #844]	; (9f54 <__ieee754_pow+0x9d4>)
    9c06:	0020      	movs	r0, r4
    9c08:	0029      	movs	r1, r5
    9c0a:	f002 fb6d 	bl	c2e8 <__aeabi_dmul>
    9c0e:	0032      	movs	r2, r6
    9c10:	9002      	str	r0, [sp, #8]
    9c12:	9103      	str	r1, [sp, #12]
    9c14:	003b      	movs	r3, r7
    9c16:	0020      	movs	r0, r4
    9c18:	0029      	movs	r1, r5
    9c1a:	f002 fde5 	bl	c7e8 <__aeabi_dsub>
    9c1e:	0002      	movs	r2, r0
    9c20:	000b      	movs	r3, r1
    9c22:	9800      	ldr	r0, [sp, #0]
    9c24:	9901      	ldr	r1, [sp, #4]
    9c26:	f002 fddf 	bl	c7e8 <__aeabi_dsub>
    9c2a:	4acb      	ldr	r2, [pc, #812]	; (9f58 <__ieee754_pow+0x9d8>)
    9c2c:	4bcb      	ldr	r3, [pc, #812]	; (9f5c <__ieee754_pow+0x9dc>)
    9c2e:	f002 fb5b 	bl	c2e8 <__aeabi_dmul>
    9c32:	4acb      	ldr	r2, [pc, #812]	; (9f60 <__ieee754_pow+0x9e0>)
    9c34:	0006      	movs	r6, r0
    9c36:	000f      	movs	r7, r1
    9c38:	4bca      	ldr	r3, [pc, #808]	; (9f64 <__ieee754_pow+0x9e4>)
    9c3a:	0020      	movs	r0, r4
    9c3c:	0029      	movs	r1, r5
    9c3e:	f002 fb53 	bl	c2e8 <__aeabi_dmul>
    9c42:	0002      	movs	r2, r0
    9c44:	000b      	movs	r3, r1
    9c46:	0030      	movs	r0, r6
    9c48:	0039      	movs	r1, r7
    9c4a:	f001 fc09 	bl	b460 <__aeabi_dadd>
    9c4e:	0004      	movs	r4, r0
    9c50:	000d      	movs	r5, r1
    9c52:	0002      	movs	r2, r0
    9c54:	000b      	movs	r3, r1
    9c56:	9802      	ldr	r0, [sp, #8]
    9c58:	9903      	ldr	r1, [sp, #12]
    9c5a:	f001 fc01 	bl	b460 <__aeabi_dadd>
    9c5e:	9a02      	ldr	r2, [sp, #8]
    9c60:	9b03      	ldr	r3, [sp, #12]
    9c62:	0006      	movs	r6, r0
    9c64:	000f      	movs	r7, r1
    9c66:	f002 fdbf 	bl	c7e8 <__aeabi_dsub>
    9c6a:	0002      	movs	r2, r0
    9c6c:	000b      	movs	r3, r1
    9c6e:	0020      	movs	r0, r4
    9c70:	0029      	movs	r1, r5
    9c72:	f002 fdb9 	bl	c7e8 <__aeabi_dsub>
    9c76:	0032      	movs	r2, r6
    9c78:	9000      	str	r0, [sp, #0]
    9c7a:	9101      	str	r1, [sp, #4]
    9c7c:	003b      	movs	r3, r7
    9c7e:	0030      	movs	r0, r6
    9c80:	0039      	movs	r1, r7
    9c82:	f002 fb31 	bl	c2e8 <__aeabi_dmul>
    9c86:	0004      	movs	r4, r0
    9c88:	000d      	movs	r5, r1
    9c8a:	4ab7      	ldr	r2, [pc, #732]	; (9f68 <__ieee754_pow+0x9e8>)
    9c8c:	4bb7      	ldr	r3, [pc, #732]	; (9f6c <__ieee754_pow+0x9ec>)
    9c8e:	f002 fb2b 	bl	c2e8 <__aeabi_dmul>
    9c92:	4ab7      	ldr	r2, [pc, #732]	; (9f70 <__ieee754_pow+0x9f0>)
    9c94:	4bb7      	ldr	r3, [pc, #732]	; (9f74 <__ieee754_pow+0x9f4>)
    9c96:	f002 fda7 	bl	c7e8 <__aeabi_dsub>
    9c9a:	0022      	movs	r2, r4
    9c9c:	002b      	movs	r3, r5
    9c9e:	f002 fb23 	bl	c2e8 <__aeabi_dmul>
    9ca2:	4ab5      	ldr	r2, [pc, #724]	; (9f78 <__ieee754_pow+0x9f8>)
    9ca4:	4bb5      	ldr	r3, [pc, #724]	; (9f7c <__ieee754_pow+0x9fc>)
    9ca6:	f001 fbdb 	bl	b460 <__aeabi_dadd>
    9caa:	0022      	movs	r2, r4
    9cac:	002b      	movs	r3, r5
    9cae:	f002 fb1b 	bl	c2e8 <__aeabi_dmul>
    9cb2:	4ab3      	ldr	r2, [pc, #716]	; (9f80 <__ieee754_pow+0xa00>)
    9cb4:	4bb3      	ldr	r3, [pc, #716]	; (9f84 <__ieee754_pow+0xa04>)
    9cb6:	f002 fd97 	bl	c7e8 <__aeabi_dsub>
    9cba:	0022      	movs	r2, r4
    9cbc:	002b      	movs	r3, r5
    9cbe:	f002 fb13 	bl	c2e8 <__aeabi_dmul>
    9cc2:	4ab1      	ldr	r2, [pc, #708]	; (9f88 <__ieee754_pow+0xa08>)
    9cc4:	4bb1      	ldr	r3, [pc, #708]	; (9f8c <__ieee754_pow+0xa0c>)
    9cc6:	f001 fbcb 	bl	b460 <__aeabi_dadd>
    9cca:	0022      	movs	r2, r4
    9ccc:	002b      	movs	r3, r5
    9cce:	f002 fb0b 	bl	c2e8 <__aeabi_dmul>
    9cd2:	0002      	movs	r2, r0
    9cd4:	000b      	movs	r3, r1
    9cd6:	0030      	movs	r0, r6
    9cd8:	0039      	movs	r1, r7
    9cda:	f002 fd85 	bl	c7e8 <__aeabi_dsub>
    9cde:	0004      	movs	r4, r0
    9ce0:	000d      	movs	r5, r1
    9ce2:	0002      	movs	r2, r0
    9ce4:	000b      	movs	r3, r1
    9ce6:	0030      	movs	r0, r6
    9ce8:	0039      	movs	r1, r7
    9cea:	f002 fafd 	bl	c2e8 <__aeabi_dmul>
    9cee:	2380      	movs	r3, #128	; 0x80
    9cf0:	9002      	str	r0, [sp, #8]
    9cf2:	9103      	str	r1, [sp, #12]
    9cf4:	2200      	movs	r2, #0
    9cf6:	05db      	lsls	r3, r3, #23
    9cf8:	0020      	movs	r0, r4
    9cfa:	0029      	movs	r1, r5
    9cfc:	f002 fd74 	bl	c7e8 <__aeabi_dsub>
    9d00:	0002      	movs	r2, r0
    9d02:	000b      	movs	r3, r1
    9d04:	9802      	ldr	r0, [sp, #8]
    9d06:	9903      	ldr	r1, [sp, #12]
    9d08:	f001 feba 	bl	ba80 <__aeabi_ddiv>
    9d0c:	9a00      	ldr	r2, [sp, #0]
    9d0e:	9b01      	ldr	r3, [sp, #4]
    9d10:	0004      	movs	r4, r0
    9d12:	000d      	movs	r5, r1
    9d14:	0030      	movs	r0, r6
    9d16:	0039      	movs	r1, r7
    9d18:	f002 fae6 	bl	c2e8 <__aeabi_dmul>
    9d1c:	9a00      	ldr	r2, [sp, #0]
    9d1e:	9b01      	ldr	r3, [sp, #4]
    9d20:	f001 fb9e 	bl	b460 <__aeabi_dadd>
    9d24:	0002      	movs	r2, r0
    9d26:	000b      	movs	r3, r1
    9d28:	0020      	movs	r0, r4
    9d2a:	0029      	movs	r1, r5
    9d2c:	f002 fd5c 	bl	c7e8 <__aeabi_dsub>
    9d30:	0032      	movs	r2, r6
    9d32:	003b      	movs	r3, r7
    9d34:	f002 fd58 	bl	c7e8 <__aeabi_dsub>
    9d38:	0002      	movs	r2, r0
    9d3a:	000b      	movs	r3, r1
    9d3c:	2000      	movs	r0, #0
    9d3e:	4994      	ldr	r1, [pc, #592]	; (9f90 <__ieee754_pow+0xa10>)
    9d40:	f002 fd52 	bl	c7e8 <__aeabi_dsub>
    9d44:	4643      	mov	r3, r8
    9d46:	185b      	adds	r3, r3, r1
    9d48:	151a      	asrs	r2, r3, #20
    9d4a:	2a00      	cmp	r2, #0
    9d4c:	dc00      	bgt.n	9d50 <__ieee754_pow+0x7d0>
    9d4e:	e149      	b.n	9fe4 <__ieee754_pow+0xa64>
    9d50:	0019      	movs	r1, r3
    9d52:	9a06      	ldr	r2, [sp, #24]
    9d54:	9b07      	ldr	r3, [sp, #28]
    9d56:	f002 fac7 	bl	c2e8 <__aeabi_dmul>
    9d5a:	e459      	b.n	9610 <__ieee754_pow+0x90>
    9d5c:	003a      	movs	r2, r7
    9d5e:	0033      	movs	r3, r6
    9d60:	0038      	movs	r0, r7
    9d62:	0031      	movs	r1, r6
    9d64:	f002 fac0 	bl	c2e8 <__aeabi_dmul>
    9d68:	e452      	b.n	9610 <__ieee754_pow+0x90>
    9d6a:	4653      	mov	r3, sl
    9d6c:	2b00      	cmp	r3, #0
    9d6e:	db00      	blt.n	9d72 <__ieee754_pow+0x7f2>
    9d70:	e4d9      	b.n	9726 <__ieee754_pow+0x1a6>
    9d72:	9c00      	ldr	r4, [sp, #0]
    9d74:	9d01      	ldr	r5, [sp, #4]
    9d76:	2280      	movs	r2, #128	; 0x80
    9d78:	0612      	lsls	r2, r2, #24
    9d7a:	002b      	movs	r3, r5
    9d7c:	4694      	mov	ip, r2
    9d7e:	4463      	add	r3, ip
    9d80:	0020      	movs	r0, r4
    9d82:	0019      	movs	r1, r3
    9d84:	f7ff fc44 	bl	9610 <__ieee754_pow+0x90>
    9d88:	004b      	lsls	r3, r1, #1
    9d8a:	085b      	lsrs	r3, r3, #1
    9d8c:	469a      	mov	sl, r3
    9d8e:	4b81      	ldr	r3, [pc, #516]	; (9f94 <__ieee754_pow+0xa14>)
    9d90:	459a      	cmp	sl, r3
    9d92:	dc00      	bgt.n	9d96 <__ieee754_pow+0x816>
    9d94:	e0b1      	b.n	9efa <__ieee754_pow+0x97a>
    9d96:	4b80      	ldr	r3, [pc, #512]	; (9f98 <__ieee754_pow+0xa18>)
    9d98:	445b      	add	r3, fp
    9d9a:	431a      	orrs	r2, r3
    9d9c:	d10c      	bne.n	9db8 <__ieee754_pow+0x838>
    9d9e:	0032      	movs	r2, r6
    9da0:	003b      	movs	r3, r7
    9da2:	f002 fd21 	bl	c7e8 <__aeabi_dsub>
    9da6:	0002      	movs	r2, r0
    9da8:	000b      	movs	r3, r1
    9daa:	9800      	ldr	r0, [sp, #0]
    9dac:	9901      	ldr	r1, [sp, #4]
    9dae:	f000 fcbb 	bl	a728 <__aeabi_dcmple>
    9db2:	2800      	cmp	r0, #0
    9db4:	d100      	bne.n	9db8 <__ieee754_pow+0x838>
    9db6:	e6ee      	b.n	9b96 <__ieee754_pow+0x616>
    9db8:	9806      	ldr	r0, [sp, #24]
    9dba:	9907      	ldr	r1, [sp, #28]
    9dbc:	4a77      	ldr	r2, [pc, #476]	; (9f9c <__ieee754_pow+0xa1c>)
    9dbe:	4b78      	ldr	r3, [pc, #480]	; (9fa0 <__ieee754_pow+0xa20>)
    9dc0:	f002 fa92 	bl	c2e8 <__aeabi_dmul>
    9dc4:	4a75      	ldr	r2, [pc, #468]	; (9f9c <__ieee754_pow+0xa1c>)
    9dc6:	4b76      	ldr	r3, [pc, #472]	; (9fa0 <__ieee754_pow+0xa20>)
    9dc8:	f002 fa8e 	bl	c2e8 <__aeabi_dmul>
    9dcc:	f7ff fc20 	bl	9610 <__ieee754_pow+0x90>
    9dd0:	2300      	movs	r3, #0
    9dd2:	4c74      	ldr	r4, [pc, #464]	; (9fa4 <__ieee754_pow+0xa24>)
    9dd4:	9306      	str	r3, [sp, #24]
    9dd6:	9407      	str	r4, [sp, #28]
    9dd8:	e652      	b.n	9a80 <__ieee754_pow+0x500>
    9dda:	0002      	movs	r2, r0
    9ddc:	000b      	movs	r3, r1
    9dde:	2000      	movs	r0, #0
    9de0:	496b      	ldr	r1, [pc, #428]	; (9f90 <__ieee754_pow+0xa10>)
    9de2:	f001 fe4d 	bl	ba80 <__aeabi_ddiv>
    9de6:	f7ff fc32 	bl	964e <__ieee754_pow+0xce>
    9dea:	4653      	mov	r3, sl
    9dec:	2b00      	cmp	r3, #0
    9dee:	db00      	blt.n	9df2 <__ieee754_pow+0x872>
    9df0:	e499      	b.n	9726 <__ieee754_pow+0x1a6>
    9df2:	e454      	b.n	969e <__ieee754_pow+0x11e>
    9df4:	4b6c      	ldr	r3, [pc, #432]	; (9fa8 <__ieee754_pow+0xa28>)
    9df6:	429c      	cmp	r4, r3
    9df8:	ddf7      	ble.n	9dea <__ieee754_pow+0x86a>
    9dfa:	4b65      	ldr	r3, [pc, #404]	; (9f90 <__ieee754_pow+0xa10>)
    9dfc:	429c      	cmp	r4, r3
    9dfe:	dd00      	ble.n	9e02 <__ieee754_pow+0x882>
    9e00:	e44a      	b.n	9698 <__ieee754_pow+0x118>
    9e02:	2200      	movs	r2, #0
    9e04:	4b62      	ldr	r3, [pc, #392]	; (9f90 <__ieee754_pow+0xa10>)
    9e06:	f002 fcef 	bl	c7e8 <__aeabi_dsub>
    9e0a:	22c0      	movs	r2, #192	; 0xc0
    9e0c:	4b67      	ldr	r3, [pc, #412]	; (9fac <__ieee754_pow+0xa2c>)
    9e0e:	05d2      	lsls	r2, r2, #23
    9e10:	0004      	movs	r4, r0
    9e12:	000d      	movs	r5, r1
    9e14:	f002 fa68 	bl	c2e8 <__aeabi_dmul>
    9e18:	4a65      	ldr	r2, [pc, #404]	; (9fb0 <__ieee754_pow+0xa30>)
    9e1a:	0006      	movs	r6, r0
    9e1c:	000f      	movs	r7, r1
    9e1e:	4b65      	ldr	r3, [pc, #404]	; (9fb4 <__ieee754_pow+0xa34>)
    9e20:	0020      	movs	r0, r4
    9e22:	0029      	movs	r1, r5
    9e24:	f002 fa60 	bl	c2e8 <__aeabi_dmul>
    9e28:	2200      	movs	r2, #0
    9e2a:	9002      	str	r0, [sp, #8]
    9e2c:	9103      	str	r1, [sp, #12]
    9e2e:	4b62      	ldr	r3, [pc, #392]	; (9fb8 <__ieee754_pow+0xa38>)
    9e30:	0020      	movs	r0, r4
    9e32:	0029      	movs	r1, r5
    9e34:	f002 fa58 	bl	c2e8 <__aeabi_dmul>
    9e38:	0002      	movs	r2, r0
    9e3a:	000b      	movs	r3, r1
    9e3c:	485f      	ldr	r0, [pc, #380]	; (9fbc <__ieee754_pow+0xa3c>)
    9e3e:	4960      	ldr	r1, [pc, #384]	; (9fc0 <__ieee754_pow+0xa40>)
    9e40:	f002 fcd2 	bl	c7e8 <__aeabi_dsub>
    9e44:	0022      	movs	r2, r4
    9e46:	002b      	movs	r3, r5
    9e48:	f002 fa4e 	bl	c2e8 <__aeabi_dmul>
    9e4c:	0002      	movs	r2, r0
    9e4e:	000b      	movs	r3, r1
    9e50:	2000      	movs	r0, #0
    9e52:	495c      	ldr	r1, [pc, #368]	; (9fc4 <__ieee754_pow+0xa44>)
    9e54:	f002 fcc8 	bl	c7e8 <__aeabi_dsub>
    9e58:	0022      	movs	r2, r4
    9e5a:	9004      	str	r0, [sp, #16]
    9e5c:	9105      	str	r1, [sp, #20]
    9e5e:	002b      	movs	r3, r5
    9e60:	0020      	movs	r0, r4
    9e62:	0029      	movs	r1, r5
    9e64:	f002 fa40 	bl	c2e8 <__aeabi_dmul>
    9e68:	0002      	movs	r2, r0
    9e6a:	000b      	movs	r3, r1
    9e6c:	9804      	ldr	r0, [sp, #16]
    9e6e:	9905      	ldr	r1, [sp, #20]
    9e70:	f002 fa3a 	bl	c2e8 <__aeabi_dmul>
    9e74:	4a54      	ldr	r2, [pc, #336]	; (9fc8 <__ieee754_pow+0xa48>)
    9e76:	4b4d      	ldr	r3, [pc, #308]	; (9fac <__ieee754_pow+0xa2c>)
    9e78:	f002 fa36 	bl	c2e8 <__aeabi_dmul>
    9e7c:	0002      	movs	r2, r0
    9e7e:	000b      	movs	r3, r1
    9e80:	9802      	ldr	r0, [sp, #8]
    9e82:	9903      	ldr	r1, [sp, #12]
    9e84:	f002 fcb0 	bl	c7e8 <__aeabi_dsub>
    9e88:	0002      	movs	r2, r0
    9e8a:	000b      	movs	r3, r1
    9e8c:	0004      	movs	r4, r0
    9e8e:	000d      	movs	r5, r1
    9e90:	0030      	movs	r0, r6
    9e92:	0039      	movs	r1, r7
    9e94:	f001 fae4 	bl	b460 <__aeabi_dadd>
    9e98:	2000      	movs	r0, #0
    9e9a:	0032      	movs	r2, r6
    9e9c:	003b      	movs	r3, r7
    9e9e:	9002      	str	r0, [sp, #8]
    9ea0:	9103      	str	r1, [sp, #12]
    9ea2:	f002 fca1 	bl	c7e8 <__aeabi_dsub>
    9ea6:	0002      	movs	r2, r0
    9ea8:	000b      	movs	r3, r1
    9eaa:	0020      	movs	r0, r4
    9eac:	0029      	movs	r1, r5
    9eae:	f002 fc9b 	bl	c7e8 <__aeabi_dsub>
    9eb2:	9004      	str	r0, [sp, #16]
    9eb4:	9105      	str	r1, [sp, #20]
    9eb6:	e5d9      	b.n	9a6c <__ieee754_pow+0x4ec>
    9eb8:	4a44      	ldr	r2, [pc, #272]	; (9fcc <__ieee754_pow+0xa4c>)
    9eba:	4b45      	ldr	r3, [pc, #276]	; (9fd0 <__ieee754_pow+0xa50>)
    9ebc:	9806      	ldr	r0, [sp, #24]
    9ebe:	9907      	ldr	r1, [sp, #28]
    9ec0:	f002 fa12 	bl	c2e8 <__aeabi_dmul>
    9ec4:	4a41      	ldr	r2, [pc, #260]	; (9fcc <__ieee754_pow+0xa4c>)
    9ec6:	4b42      	ldr	r3, [pc, #264]	; (9fd0 <__ieee754_pow+0xa50>)
    9ec8:	f002 fa0e 	bl	c2e8 <__aeabi_dmul>
    9ecc:	f7ff fba0 	bl	9610 <__ieee754_pow+0x90>
    9ed0:	2a00      	cmp	r2, #0
    9ed2:	d001      	beq.n	9ed8 <__ieee754_pow+0x958>
    9ed4:	f7ff fba9 	bl	962a <__ieee754_pow+0xaa>
    9ed8:	3214      	adds	r2, #20
    9eda:	1ad3      	subs	r3, r2, r3
    9edc:	002a      	movs	r2, r5
    9ede:	411a      	asrs	r2, r3
    9ee0:	0011      	movs	r1, r2
    9ee2:	4099      	lsls	r1, r3
    9ee4:	428d      	cmp	r5, r1
    9ee6:	d001      	beq.n	9eec <__ieee754_pow+0x96c>
    9ee8:	f7ff fb76 	bl	95d8 <__ieee754_pow+0x58>
    9eec:	2301      	movs	r3, #1
    9eee:	401a      	ands	r2, r3
    9ef0:	18db      	adds	r3, r3, r3
    9ef2:	1a9b      	subs	r3, r3, r2
    9ef4:	469b      	mov	fp, r3
    9ef6:	f7ff fb6f 	bl	95d8 <__ieee754_pow+0x58>
    9efa:	2200      	movs	r2, #0
    9efc:	4b31      	ldr	r3, [pc, #196]	; (9fc4 <__ieee754_pow+0xa44>)
    9efe:	4690      	mov	r8, r2
    9f00:	4691      	mov	r9, r2
    9f02:	459a      	cmp	sl, r3
    9f04:	dc00      	bgt.n	9f08 <__ieee754_pow+0x988>
    9f06:	e67b      	b.n	9c00 <__ieee754_pow+0x680>
    9f08:	e645      	b.n	9b96 <__ieee754_pow+0x616>
    9f0a:	0002      	movs	r2, r0
    9f0c:	000b      	movs	r3, r1
    9f0e:	f002 fc6b 	bl	c7e8 <__aeabi_dsub>
    9f12:	0002      	movs	r2, r0
    9f14:	000b      	movs	r3, r1
    9f16:	f001 fdb3 	bl	ba80 <__aeabi_ddiv>
    9f1a:	f7ff fb79 	bl	9610 <__ieee754_pow+0x90>
    9f1e:	2380      	movs	r3, #128	; 0x80
    9f20:	4c2c      	ldr	r4, [pc, #176]	; (9fd4 <__ieee754_pow+0xa54>)
    9f22:	05db      	lsls	r3, r3, #23
    9f24:	9308      	str	r3, [sp, #32]
    9f26:	9409      	str	r4, [sp, #36]	; 0x24
    9f28:	4b2b      	ldr	r3, [pc, #172]	; (9fd8 <__ieee754_pow+0xa58>)
    9f2a:	4c2c      	ldr	r4, [pc, #176]	; (9fdc <__ieee754_pow+0xa5c>)
    9f2c:	2200      	movs	r2, #0
    9f2e:	930c      	str	r3, [sp, #48]	; 0x30
    9f30:	940d      	str	r4, [sp, #52]	; 0x34
    9f32:	2480      	movs	r4, #128	; 0x80
    9f34:	4b2a      	ldr	r3, [pc, #168]	; (9fe0 <__ieee754_pow+0xa60>)
    9f36:	02e4      	lsls	r4, r4, #11
    9f38:	9206      	str	r2, [sp, #24]
    9f3a:	9307      	str	r3, [sp, #28]
    9f3c:	e449      	b.n	97d2 <__ieee754_pow+0x252>
    9f3e:	464b      	mov	r3, r9
    9f40:	425b      	negs	r3, r3
    9f42:	4699      	mov	r9, r3
    9f44:	e64a      	b.n	9bdc <__ieee754_pow+0x65c>
    9f46:	46c0      	nop			; (mov r8, r8)
    9f48:	fffffc02 	.word	0xfffffc02
    9f4c:	fffffc01 	.word	0xfffffc01
    9f50:	000fffff 	.word	0x000fffff
    9f54:	3fe62e43 	.word	0x3fe62e43
    9f58:	fefa39ef 	.word	0xfefa39ef
    9f5c:	3fe62e42 	.word	0x3fe62e42
    9f60:	0ca86c39 	.word	0x0ca86c39
    9f64:	be205c61 	.word	0xbe205c61
    9f68:	72bea4d0 	.word	0x72bea4d0
    9f6c:	3e663769 	.word	0x3e663769
    9f70:	c5d26bf1 	.word	0xc5d26bf1
    9f74:	3ebbbd41 	.word	0x3ebbbd41
    9f78:	af25de2c 	.word	0xaf25de2c
    9f7c:	3f11566a 	.word	0x3f11566a
    9f80:	16bebd93 	.word	0x16bebd93
    9f84:	3f66c16c 	.word	0x3f66c16c
    9f88:	5555553e 	.word	0x5555553e
    9f8c:	3fc55555 	.word	0x3fc55555
    9f90:	3ff00000 	.word	0x3ff00000
    9f94:	4090cbff 	.word	0x4090cbff
    9f98:	3f6f3400 	.word	0x3f6f3400
    9f9c:	c2f8f359 	.word	0xc2f8f359
    9fa0:	01a56e1f 	.word	0x01a56e1f
    9fa4:	bff00000 	.word	0xbff00000
    9fa8:	3feffffe 	.word	0x3feffffe
    9fac:	3ff71547 	.word	0x3ff71547
    9fb0:	f85ddf44 	.word	0xf85ddf44
    9fb4:	3e54ae0b 	.word	0x3e54ae0b
    9fb8:	3fd00000 	.word	0x3fd00000
    9fbc:	55555555 	.word	0x55555555
    9fc0:	3fd55555 	.word	0x3fd55555
    9fc4:	3fe00000 	.word	0x3fe00000
    9fc8:	652b82fe 	.word	0x652b82fe
    9fcc:	8800759c 	.word	0x8800759c
    9fd0:	7e37e43c 	.word	0x7e37e43c
    9fd4:	3fe2b803 	.word	0x3fe2b803
    9fd8:	43cfd006 	.word	0x43cfd006
    9fdc:	3e4cfdeb 	.word	0x3e4cfdeb
    9fe0:	3ff80000 	.word	0x3ff80000
    9fe4:	464a      	mov	r2, r9
    9fe6:	f000 f999 	bl	a31c <scalbn>
    9fea:	e6b2      	b.n	9d52 <__ieee754_pow+0x7d2>

00009fec <__ieee754_sqrt>:
    9fec:	4b6c      	ldr	r3, [pc, #432]	; (a1a0 <__ieee754_sqrt+0x1b4>)
    9fee:	b5f0      	push	{r4, r5, r6, r7, lr}
    9ff0:	000a      	movs	r2, r1
    9ff2:	4646      	mov	r6, r8
    9ff4:	000d      	movs	r5, r1
    9ff6:	46d6      	mov	lr, sl
    9ff8:	464f      	mov	r7, r9
    9ffa:	0019      	movs	r1, r3
    9ffc:	b5c0      	push	{r6, r7, lr}
    9ffe:	0004      	movs	r4, r0
    a000:	0006      	movs	r6, r0
    a002:	4029      	ands	r1, r5
    a004:	4299      	cmp	r1, r3
    a006:	d100      	bne.n	a00a <__ieee754_sqrt+0x1e>
    a008:	e0a7      	b.n	a15a <__ieee754_sqrt+0x16e>
    a00a:	2d00      	cmp	r5, #0
    a00c:	dc00      	bgt.n	a010 <__ieee754_sqrt+0x24>
    a00e:	e081      	b.n	a114 <__ieee754_sqrt+0x128>
    a010:	152f      	asrs	r7, r5, #20
    a012:	d100      	bne.n	a016 <__ieee754_sqrt+0x2a>
    a014:	e08e      	b.n	a134 <__ieee754_sqrt+0x148>
    a016:	4b63      	ldr	r3, [pc, #396]	; (a1a4 <__ieee754_sqrt+0x1b8>)
    a018:	0312      	lsls	r2, r2, #12
    a01a:	469c      	mov	ip, r3
    a01c:	2380      	movs	r3, #128	; 0x80
    a01e:	0b12      	lsrs	r2, r2, #12
    a020:	035b      	lsls	r3, r3, #13
    a022:	4467      	add	r7, ip
    a024:	431a      	orrs	r2, r3
    a026:	07fb      	lsls	r3, r7, #31
    a028:	d468      	bmi.n	a0fc <__ieee754_sqrt+0x110>
    a02a:	107b      	asrs	r3, r7, #1
    a02c:	469c      	mov	ip, r3
    a02e:	0fe3      	lsrs	r3, r4, #31
    a030:	189b      	adds	r3, r3, r2
    a032:	189b      	adds	r3, r3, r2
    a034:	2280      	movs	r2, #128	; 0x80
    a036:	2116      	movs	r1, #22
    a038:	2600      	movs	r6, #0
    a03a:	2500      	movs	r5, #0
    a03c:	0064      	lsls	r4, r4, #1
    a03e:	0392      	lsls	r2, r2, #14
    a040:	18a8      	adds	r0, r5, r2
    a042:	4298      	cmp	r0, r3
    a044:	dc02      	bgt.n	a04c <__ieee754_sqrt+0x60>
    a046:	1885      	adds	r5, r0, r2
    a048:	1a1b      	subs	r3, r3, r0
    a04a:	18b6      	adds	r6, r6, r2
    a04c:	0fe0      	lsrs	r0, r4, #31
    a04e:	005b      	lsls	r3, r3, #1
    a050:	3901      	subs	r1, #1
    a052:	181b      	adds	r3, r3, r0
    a054:	0064      	lsls	r4, r4, #1
    a056:	0852      	lsrs	r2, r2, #1
    a058:	2900      	cmp	r1, #0
    a05a:	d1f1      	bne.n	a040 <__ieee754_sqrt+0x54>
    a05c:	2200      	movs	r2, #0
    a05e:	4692      	mov	sl, r2
    a060:	4690      	mov	r8, r2
    a062:	2280      	movs	r2, #128	; 0x80
    a064:	2020      	movs	r0, #32
    a066:	0612      	lsls	r2, r2, #24
    a068:	e009      	b.n	a07e <__ieee754_sqrt+0x92>
    a06a:	42ab      	cmp	r3, r5
    a06c:	d038      	beq.n	a0e0 <__ieee754_sqrt+0xf4>
    a06e:	0fe1      	lsrs	r1, r4, #31
    a070:	18c9      	adds	r1, r1, r3
    a072:	3801      	subs	r0, #1
    a074:	18cb      	adds	r3, r1, r3
    a076:	0064      	lsls	r4, r4, #1
    a078:	0852      	lsrs	r2, r2, #1
    a07a:	2800      	cmp	r0, #0
    a07c:	d018      	beq.n	a0b0 <__ieee754_sqrt+0xc4>
    a07e:	4641      	mov	r1, r8
    a080:	1851      	adds	r1, r2, r1
    a082:	42ab      	cmp	r3, r5
    a084:	ddf1      	ble.n	a06a <__ieee754_sqrt+0x7e>
    a086:	188f      	adds	r7, r1, r2
    a088:	46b8      	mov	r8, r7
    a08a:	46a9      	mov	r9, r5
    a08c:	2900      	cmp	r1, #0
    a08e:	db30      	blt.n	a0f2 <__ieee754_sqrt+0x106>
    a090:	1b5b      	subs	r3, r3, r5
    a092:	428c      	cmp	r4, r1
    a094:	41ad      	sbcs	r5, r5
    a096:	426d      	negs	r5, r5
    a098:	1b5b      	subs	r3, r3, r5
    a09a:	1a64      	subs	r4, r4, r1
    a09c:	0fe1      	lsrs	r1, r4, #31
    a09e:	18c9      	adds	r1, r1, r3
    a0a0:	3801      	subs	r0, #1
    a0a2:	4492      	add	sl, r2
    a0a4:	464d      	mov	r5, r9
    a0a6:	18cb      	adds	r3, r1, r3
    a0a8:	0064      	lsls	r4, r4, #1
    a0aa:	0852      	lsrs	r2, r2, #1
    a0ac:	2800      	cmp	r0, #0
    a0ae:	d1e6      	bne.n	a07e <__ieee754_sqrt+0x92>
    a0b0:	4323      	orrs	r3, r4
    a0b2:	d128      	bne.n	a106 <__ieee754_sqrt+0x11a>
    a0b4:	4653      	mov	r3, sl
    a0b6:	085b      	lsrs	r3, r3, #1
    a0b8:	493b      	ldr	r1, [pc, #236]	; (a1a8 <__ieee754_sqrt+0x1bc>)
    a0ba:	1072      	asrs	r2, r6, #1
    a0bc:	4688      	mov	r8, r1
    a0be:	4442      	add	r2, r8
    a0c0:	07f1      	lsls	r1, r6, #31
    a0c2:	d502      	bpl.n	a0ca <__ieee754_sqrt+0xde>
    a0c4:	2180      	movs	r1, #128	; 0x80
    a0c6:	0609      	lsls	r1, r1, #24
    a0c8:	430b      	orrs	r3, r1
    a0ca:	4661      	mov	r1, ip
    a0cc:	001e      	movs	r6, r3
    a0ce:	050f      	lsls	r7, r1, #20
    a0d0:	18bd      	adds	r5, r7, r2
    a0d2:	0030      	movs	r0, r6
    a0d4:	0029      	movs	r1, r5
    a0d6:	bc1c      	pop	{r2, r3, r4}
    a0d8:	4690      	mov	r8, r2
    a0da:	4699      	mov	r9, r3
    a0dc:	46a2      	mov	sl, r4
    a0de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a0e0:	42a1      	cmp	r1, r4
    a0e2:	d8c4      	bhi.n	a06e <__ieee754_sqrt+0x82>
    a0e4:	188f      	adds	r7, r1, r2
    a0e6:	46b8      	mov	r8, r7
    a0e8:	2900      	cmp	r1, #0
    a0ea:	db42      	blt.n	a172 <__ieee754_sqrt+0x186>
    a0ec:	4699      	mov	r9, r3
    a0ee:	2300      	movs	r3, #0
    a0f0:	e7d3      	b.n	a09a <__ieee754_sqrt+0xae>
    a0f2:	2f00      	cmp	r7, #0
    a0f4:	db2f      	blt.n	a156 <__ieee754_sqrt+0x16a>
    a0f6:	1c6f      	adds	r7, r5, #1
    a0f8:	46b9      	mov	r9, r7
    a0fa:	e7c9      	b.n	a090 <__ieee754_sqrt+0xa4>
    a0fc:	0fe1      	lsrs	r1, r4, #31
    a0fe:	0052      	lsls	r2, r2, #1
    a100:	188a      	adds	r2, r1, r2
    a102:	0064      	lsls	r4, r4, #1
    a104:	e791      	b.n	a02a <__ieee754_sqrt+0x3e>
    a106:	4653      	mov	r3, sl
    a108:	3301      	adds	r3, #1
    a10a:	d035      	beq.n	a178 <__ieee754_sqrt+0x18c>
    a10c:	4653      	mov	r3, sl
    a10e:	3301      	adds	r3, #1
    a110:	085b      	lsrs	r3, r3, #1
    a112:	e7d1      	b.n	a0b8 <__ieee754_sqrt+0xcc>
    a114:	006b      	lsls	r3, r5, #1
    a116:	085b      	lsrs	r3, r3, #1
    a118:	4303      	orrs	r3, r0
    a11a:	d0da      	beq.n	a0d2 <__ieee754_sqrt+0xe6>
    a11c:	2700      	movs	r7, #0
    a11e:	2d00      	cmp	r5, #0
    a120:	d132      	bne.n	a188 <__ieee754_sqrt+0x19c>
    a122:	0ae2      	lsrs	r2, r4, #11
    a124:	3f15      	subs	r7, #21
    a126:	0564      	lsls	r4, r4, #21
    a128:	2a00      	cmp	r2, #0
    a12a:	d0fa      	beq.n	a122 <__ieee754_sqrt+0x136>
    a12c:	2380      	movs	r3, #128	; 0x80
    a12e:	035b      	lsls	r3, r3, #13
    a130:	421a      	tst	r2, r3
    a132:	d124      	bne.n	a17e <__ieee754_sqrt+0x192>
    a134:	2080      	movs	r0, #128	; 0x80
    a136:	2300      	movs	r3, #0
    a138:	0340      	lsls	r0, r0, #13
    a13a:	e000      	b.n	a13e <__ieee754_sqrt+0x152>
    a13c:	000b      	movs	r3, r1
    a13e:	0052      	lsls	r2, r2, #1
    a140:	1c59      	adds	r1, r3, #1
    a142:	4202      	tst	r2, r0
    a144:	d0fa      	beq.n	a13c <__ieee754_sqrt+0x150>
    a146:	2020      	movs	r0, #32
    a148:	1a40      	subs	r0, r0, r1
    a14a:	1aff      	subs	r7, r7, r3
    a14c:	0023      	movs	r3, r4
    a14e:	40c3      	lsrs	r3, r0
    a150:	408c      	lsls	r4, r1
    a152:	431a      	orrs	r2, r3
    a154:	e75f      	b.n	a016 <__ieee754_sqrt+0x2a>
    a156:	46a9      	mov	r9, r5
    a158:	e79a      	b.n	a090 <__ieee754_sqrt+0xa4>
    a15a:	002b      	movs	r3, r5
    a15c:	0002      	movs	r2, r0
    a15e:	0029      	movs	r1, r5
    a160:	f002 f8c2 	bl	c2e8 <__aeabi_dmul>
    a164:	0032      	movs	r2, r6
    a166:	002b      	movs	r3, r5
    a168:	f001 f97a 	bl	b460 <__aeabi_dadd>
    a16c:	0006      	movs	r6, r0
    a16e:	000d      	movs	r5, r1
    a170:	e7af      	b.n	a0d2 <__ieee754_sqrt+0xe6>
    a172:	2f00      	cmp	r7, #0
    a174:	dabf      	bge.n	a0f6 <__ieee754_sqrt+0x10a>
    a176:	e7b9      	b.n	a0ec <__ieee754_sqrt+0x100>
    a178:	3601      	adds	r6, #1
    a17a:	2300      	movs	r3, #0
    a17c:	e79c      	b.n	a0b8 <__ieee754_sqrt+0xcc>
    a17e:	2301      	movs	r3, #1
    a180:	2100      	movs	r1, #0
    a182:	2020      	movs	r0, #32
    a184:	425b      	negs	r3, r3
    a186:	e7e0      	b.n	a14a <__ieee754_sqrt+0x15e>
    a188:	002b      	movs	r3, r5
    a18a:	0002      	movs	r2, r0
    a18c:	0029      	movs	r1, r5
    a18e:	f002 fb2b 	bl	c7e8 <__aeabi_dsub>
    a192:	0002      	movs	r2, r0
    a194:	000b      	movs	r3, r1
    a196:	f001 fc73 	bl	ba80 <__aeabi_ddiv>
    a19a:	0006      	movs	r6, r0
    a19c:	000d      	movs	r5, r1
    a19e:	e798      	b.n	a0d2 <__ieee754_sqrt+0xe6>
    a1a0:	7ff00000 	.word	0x7ff00000
    a1a4:	fffffc01 	.word	0xfffffc01
    a1a8:	3fe00000 	.word	0x3fe00000

0000a1ac <fabs>:
    a1ac:	0049      	lsls	r1, r1, #1
    a1ae:	084b      	lsrs	r3, r1, #1
    a1b0:	0019      	movs	r1, r3
    a1b2:	4770      	bx	lr

0000a1b4 <finite>:
    a1b4:	4b03      	ldr	r3, [pc, #12]	; (a1c4 <finite+0x10>)
    a1b6:	0048      	lsls	r0, r1, #1
    a1b8:	469c      	mov	ip, r3
    a1ba:	0840      	lsrs	r0, r0, #1
    a1bc:	4460      	add	r0, ip
    a1be:	0fc0      	lsrs	r0, r0, #31
    a1c0:	4770      	bx	lr
    a1c2:	46c0      	nop			; (mov r8, r8)
    a1c4:	80100000 	.word	0x80100000

0000a1c8 <matherr>:
    a1c8:	2000      	movs	r0, #0
    a1ca:	4770      	bx	lr

0000a1cc <nan>:
    a1cc:	2000      	movs	r0, #0
    a1ce:	4901      	ldr	r1, [pc, #4]	; (a1d4 <nan+0x8>)
    a1d0:	4770      	bx	lr
    a1d2:	46c0      	nop			; (mov r8, r8)
    a1d4:	7ff80000 	.word	0x7ff80000

0000a1d8 <rint>:
    a1d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    a1da:	46c6      	mov	lr, r8
    a1dc:	b500      	push	{lr}
    a1de:	0fcb      	lsrs	r3, r1, #31
    a1e0:	4698      	mov	r8, r3
    a1e2:	4c4a      	ldr	r4, [pc, #296]	; (a30c <rint+0x134>)
    a1e4:	004b      	lsls	r3, r1, #1
    a1e6:	0d5b      	lsrs	r3, r3, #21
    a1e8:	191e      	adds	r6, r3, r4
    a1ea:	b082      	sub	sp, #8
    a1ec:	0007      	movs	r7, r0
    a1ee:	000a      	movs	r2, r1
    a1f0:	2e13      	cmp	r6, #19
    a1f2:	dc35      	bgt.n	a260 <rint+0x88>
    a1f4:	2e00      	cmp	r6, #0
    a1f6:	db57      	blt.n	a2a8 <rint+0xd0>
    a1f8:	4b45      	ldr	r3, [pc, #276]	; (a310 <rint+0x138>)
    a1fa:	0004      	movs	r4, r0
    a1fc:	4133      	asrs	r3, r6
    a1fe:	001f      	movs	r7, r3
    a200:	400f      	ands	r7, r1
    a202:	4307      	orrs	r7, r0
    a204:	000d      	movs	r5, r1
    a206:	2f00      	cmp	r7, #0
    a208:	d024      	beq.n	a254 <rint+0x7c>
    a20a:	085b      	lsrs	r3, r3, #1
    a20c:	001c      	movs	r4, r3
    a20e:	400c      	ands	r4, r1
    a210:	4320      	orrs	r0, r4
    a212:	2700      	movs	r7, #0
    a214:	2800      	cmp	r0, #0
    a216:	d007      	beq.n	a228 <rint+0x50>
    a218:	2e13      	cmp	r6, #19
    a21a:	d100      	bne.n	a21e <rint+0x46>
    a21c:	e073      	b.n	a306 <rint+0x12e>
    a21e:	2280      	movs	r2, #128	; 0x80
    a220:	02d2      	lsls	r2, r2, #11
    a222:	4132      	asrs	r2, r6
    a224:	4399      	bics	r1, r3
    a226:	430a      	orrs	r2, r1
    a228:	4643      	mov	r3, r8
    a22a:	00de      	lsls	r6, r3, #3
    a22c:	4b39      	ldr	r3, [pc, #228]	; (a314 <rint+0x13c>)
    a22e:	0011      	movs	r1, r2
    a230:	199e      	adds	r6, r3, r6
    a232:	6834      	ldr	r4, [r6, #0]
    a234:	6875      	ldr	r5, [r6, #4]
    a236:	0038      	movs	r0, r7
    a238:	0022      	movs	r2, r4
    a23a:	002b      	movs	r3, r5
    a23c:	f001 f910 	bl	b460 <__aeabi_dadd>
    a240:	9000      	str	r0, [sp, #0]
    a242:	9101      	str	r1, [sp, #4]
    a244:	9800      	ldr	r0, [sp, #0]
    a246:	9901      	ldr	r1, [sp, #4]
    a248:	0022      	movs	r2, r4
    a24a:	002b      	movs	r3, r5
    a24c:	f002 facc 	bl	c7e8 <__aeabi_dsub>
    a250:	0004      	movs	r4, r0
    a252:	000d      	movs	r5, r1
    a254:	0020      	movs	r0, r4
    a256:	0029      	movs	r1, r5
    a258:	b002      	add	sp, #8
    a25a:	bc04      	pop	{r2}
    a25c:	4690      	mov	r8, r2
    a25e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a260:	2e33      	cmp	r6, #51	; 0x33
    a262:	dd0c      	ble.n	a27e <rint+0xa6>
    a264:	2380      	movs	r3, #128	; 0x80
    a266:	0004      	movs	r4, r0
    a268:	00db      	lsls	r3, r3, #3
    a26a:	000d      	movs	r5, r1
    a26c:	429e      	cmp	r6, r3
    a26e:	d1f1      	bne.n	a254 <rint+0x7c>
    a270:	0002      	movs	r2, r0
    a272:	000b      	movs	r3, r1
    a274:	f001 f8f4 	bl	b460 <__aeabi_dadd>
    a278:	0004      	movs	r4, r0
    a27a:	000d      	movs	r5, r1
    a27c:	e7ea      	b.n	a254 <rint+0x7c>
    a27e:	4c26      	ldr	r4, [pc, #152]	; (a318 <rint+0x140>)
    a280:	000d      	movs	r5, r1
    a282:	46a4      	mov	ip, r4
    a284:	2401      	movs	r4, #1
    a286:	4463      	add	r3, ip
    a288:	4264      	negs	r4, r4
    a28a:	40dc      	lsrs	r4, r3
    a28c:	46a4      	mov	ip, r4
    a28e:	4661      	mov	r1, ip
    a290:	0004      	movs	r4, r0
    a292:	4201      	tst	r1, r0
    a294:	d0de      	beq.n	a254 <rint+0x7c>
    a296:	0849      	lsrs	r1, r1, #1
    a298:	4201      	tst	r1, r0
    a29a:	d0c5      	beq.n	a228 <rint+0x50>
    a29c:	2780      	movs	r7, #128	; 0x80
    a29e:	05ff      	lsls	r7, r7, #23
    a2a0:	411f      	asrs	r7, r3
    a2a2:	4388      	bics	r0, r1
    a2a4:	4307      	orrs	r7, r0
    a2a6:	e7bf      	b.n	a228 <rint+0x50>
    a2a8:	004b      	lsls	r3, r1, #1
    a2aa:	085b      	lsrs	r3, r3, #1
    a2ac:	4303      	orrs	r3, r0
    a2ae:	0004      	movs	r4, r0
    a2b0:	000d      	movs	r5, r1
    a2b2:	2b00      	cmp	r3, #0
    a2b4:	d0ce      	beq.n	a254 <rint+0x7c>
    a2b6:	030b      	lsls	r3, r1, #12
    a2b8:	0b1b      	lsrs	r3, r3, #12
    a2ba:	4303      	orrs	r3, r0
    a2bc:	001a      	movs	r2, r3
    a2be:	425b      	negs	r3, r3
    a2c0:	4313      	orrs	r3, r2
    a2c2:	2280      	movs	r2, #128	; 0x80
    a2c4:	0b1b      	lsrs	r3, r3, #12
    a2c6:	0312      	lsls	r2, r2, #12
    a2c8:	4013      	ands	r3, r2
    a2ca:	0c4a      	lsrs	r2, r1, #17
    a2cc:	0452      	lsls	r2, r2, #17
    a2ce:	4313      	orrs	r3, r2
    a2d0:	0019      	movs	r1, r3
    a2d2:	4643      	mov	r3, r8
    a2d4:	00da      	lsls	r2, r3, #3
    a2d6:	4b0f      	ldr	r3, [pc, #60]	; (a314 <rint+0x13c>)
    a2d8:	189b      	adds	r3, r3, r2
    a2da:	681c      	ldr	r4, [r3, #0]
    a2dc:	685d      	ldr	r5, [r3, #4]
    a2de:	0022      	movs	r2, r4
    a2e0:	002b      	movs	r3, r5
    a2e2:	f001 f8bd 	bl	b460 <__aeabi_dadd>
    a2e6:	9000      	str	r0, [sp, #0]
    a2e8:	9101      	str	r1, [sp, #4]
    a2ea:	9800      	ldr	r0, [sp, #0]
    a2ec:	9901      	ldr	r1, [sp, #4]
    a2ee:	0022      	movs	r2, r4
    a2f0:	002b      	movs	r3, r5
    a2f2:	f002 fa79 	bl	c7e8 <__aeabi_dsub>
    a2f6:	4642      	mov	r2, r8
    a2f8:	004b      	lsls	r3, r1, #1
    a2fa:	085b      	lsrs	r3, r3, #1
    a2fc:	07d6      	lsls	r6, r2, #31
    a2fe:	4333      	orrs	r3, r6
    a300:	0004      	movs	r4, r0
    a302:	001d      	movs	r5, r3
    a304:	e7a6      	b.n	a254 <rint+0x7c>
    a306:	2780      	movs	r7, #128	; 0x80
    a308:	063f      	lsls	r7, r7, #24
    a30a:	e788      	b.n	a21e <rint+0x46>
    a30c:	fffffc01 	.word	0xfffffc01
    a310:	000fffff 	.word	0x000fffff
    a314:	00012310 	.word	0x00012310
    a318:	fffffbed 	.word	0xfffffbed

0000a31c <scalbn>:
    a31c:	004b      	lsls	r3, r1, #1
    a31e:	b570      	push	{r4, r5, r6, lr}
    a320:	0d5b      	lsrs	r3, r3, #21
    a322:	0014      	movs	r4, r2
    a324:	000a      	movs	r2, r1
    a326:	2b00      	cmp	r3, #0
    a328:	d11a      	bne.n	a360 <scalbn+0x44>
    a32a:	004b      	lsls	r3, r1, #1
    a32c:	085b      	lsrs	r3, r3, #1
    a32e:	4303      	orrs	r3, r0
    a330:	d015      	beq.n	a35e <scalbn+0x42>
    a332:	2200      	movs	r2, #0
    a334:	4b22      	ldr	r3, [pc, #136]	; (a3c0 <scalbn+0xa4>)
    a336:	f001 ffd7 	bl	c2e8 <__aeabi_dmul>
    a33a:	4b22      	ldr	r3, [pc, #136]	; (a3c4 <scalbn+0xa8>)
    a33c:	000a      	movs	r2, r1
    a33e:	429c      	cmp	r4, r3
    a340:	db22      	blt.n	a388 <scalbn+0x6c>
    a342:	004b      	lsls	r3, r1, #1
    a344:	0d5b      	lsrs	r3, r3, #21
    a346:	3b36      	subs	r3, #54	; 0x36
    a348:	4d1f      	ldr	r5, [pc, #124]	; (a3c8 <scalbn+0xac>)
    a34a:	18e3      	adds	r3, r4, r3
    a34c:	42ab      	cmp	r3, r5
    a34e:	dc20      	bgt.n	a392 <scalbn+0x76>
    a350:	2b00      	cmp	r3, #0
    a352:	dd0d      	ble.n	a370 <scalbn+0x54>
    a354:	4c1d      	ldr	r4, [pc, #116]	; (a3cc <scalbn+0xb0>)
    a356:	051b      	lsls	r3, r3, #20
    a358:	4022      	ands	r2, r4
    a35a:	431a      	orrs	r2, r3
    a35c:	0011      	movs	r1, r2
    a35e:	bd70      	pop	{r4, r5, r6, pc}
    a360:	4d1b      	ldr	r5, [pc, #108]	; (a3d0 <scalbn+0xb4>)
    a362:	42ab      	cmp	r3, r5
    a364:	d1f0      	bne.n	a348 <scalbn+0x2c>
    a366:	0002      	movs	r2, r0
    a368:	000b      	movs	r3, r1
    a36a:	f001 f879 	bl	b460 <__aeabi_dadd>
    a36e:	e7f6      	b.n	a35e <scalbn+0x42>
    a370:	001d      	movs	r5, r3
    a372:	3535      	adds	r5, #53	; 0x35
    a374:	da18      	bge.n	a3a8 <scalbn+0x8c>
    a376:	4b17      	ldr	r3, [pc, #92]	; (a3d4 <scalbn+0xb8>)
    a378:	0002      	movs	r2, r0
    a37a:	429c      	cmp	r4, r3
    a37c:	dc0a      	bgt.n	a394 <scalbn+0x78>
    a37e:	000b      	movs	r3, r1
    a380:	4815      	ldr	r0, [pc, #84]	; (a3d8 <scalbn+0xbc>)
    a382:	4916      	ldr	r1, [pc, #88]	; (a3dc <scalbn+0xc0>)
    a384:	f000 f832 	bl	a3ec <copysign>
    a388:	4a13      	ldr	r2, [pc, #76]	; (a3d8 <scalbn+0xbc>)
    a38a:	4b14      	ldr	r3, [pc, #80]	; (a3dc <scalbn+0xc0>)
    a38c:	f001 ffac 	bl	c2e8 <__aeabi_dmul>
    a390:	e7e5      	b.n	a35e <scalbn+0x42>
    a392:	0002      	movs	r2, r0
    a394:	000b      	movs	r3, r1
    a396:	4812      	ldr	r0, [pc, #72]	; (a3e0 <scalbn+0xc4>)
    a398:	4912      	ldr	r1, [pc, #72]	; (a3e4 <scalbn+0xc8>)
    a39a:	f000 f827 	bl	a3ec <copysign>
    a39e:	4a10      	ldr	r2, [pc, #64]	; (a3e0 <scalbn+0xc4>)
    a3a0:	4b10      	ldr	r3, [pc, #64]	; (a3e4 <scalbn+0xc8>)
    a3a2:	f001 ffa1 	bl	c2e8 <__aeabi_dmul>
    a3a6:	e7da      	b.n	a35e <scalbn+0x42>
    a3a8:	4c08      	ldr	r4, [pc, #32]	; (a3cc <scalbn+0xb0>)
    a3aa:	3336      	adds	r3, #54	; 0x36
    a3ac:	4022      	ands	r2, r4
    a3ae:	051b      	lsls	r3, r3, #20
    a3b0:	4313      	orrs	r3, r2
    a3b2:	0019      	movs	r1, r3
    a3b4:	2200      	movs	r2, #0
    a3b6:	4b0c      	ldr	r3, [pc, #48]	; (a3e8 <scalbn+0xcc>)
    a3b8:	f001 ff96 	bl	c2e8 <__aeabi_dmul>
    a3bc:	e7cf      	b.n	a35e <scalbn+0x42>
    a3be:	46c0      	nop			; (mov r8, r8)
    a3c0:	43500000 	.word	0x43500000
    a3c4:	ffff3cb0 	.word	0xffff3cb0
    a3c8:	000007fe 	.word	0x000007fe
    a3cc:	800fffff 	.word	0x800fffff
    a3d0:	000007ff 	.word	0x000007ff
    a3d4:	0000c350 	.word	0x0000c350
    a3d8:	c2f8f359 	.word	0xc2f8f359
    a3dc:	01a56e1f 	.word	0x01a56e1f
    a3e0:	8800759c 	.word	0x8800759c
    a3e4:	7e37e43c 	.word	0x7e37e43c
    a3e8:	3c900000 	.word	0x3c900000

0000a3ec <copysign>:
    a3ec:	b530      	push	{r4, r5, lr}
    a3ee:	004a      	lsls	r2, r1, #1
    a3f0:	0fdb      	lsrs	r3, r3, #31
    a3f2:	07db      	lsls	r3, r3, #31
    a3f4:	0852      	lsrs	r2, r2, #1
    a3f6:	431a      	orrs	r2, r3
    a3f8:	0011      	movs	r1, r2
    a3fa:	bd30      	pop	{r4, r5, pc}

0000a3fc <__udivsi3>:
    a3fc:	2200      	movs	r2, #0
    a3fe:	0843      	lsrs	r3, r0, #1
    a400:	428b      	cmp	r3, r1
    a402:	d374      	bcc.n	a4ee <__udivsi3+0xf2>
    a404:	0903      	lsrs	r3, r0, #4
    a406:	428b      	cmp	r3, r1
    a408:	d35f      	bcc.n	a4ca <__udivsi3+0xce>
    a40a:	0a03      	lsrs	r3, r0, #8
    a40c:	428b      	cmp	r3, r1
    a40e:	d344      	bcc.n	a49a <__udivsi3+0x9e>
    a410:	0b03      	lsrs	r3, r0, #12
    a412:	428b      	cmp	r3, r1
    a414:	d328      	bcc.n	a468 <__udivsi3+0x6c>
    a416:	0c03      	lsrs	r3, r0, #16
    a418:	428b      	cmp	r3, r1
    a41a:	d30d      	bcc.n	a438 <__udivsi3+0x3c>
    a41c:	22ff      	movs	r2, #255	; 0xff
    a41e:	0209      	lsls	r1, r1, #8
    a420:	ba12      	rev	r2, r2
    a422:	0c03      	lsrs	r3, r0, #16
    a424:	428b      	cmp	r3, r1
    a426:	d302      	bcc.n	a42e <__udivsi3+0x32>
    a428:	1212      	asrs	r2, r2, #8
    a42a:	0209      	lsls	r1, r1, #8
    a42c:	d065      	beq.n	a4fa <__udivsi3+0xfe>
    a42e:	0b03      	lsrs	r3, r0, #12
    a430:	428b      	cmp	r3, r1
    a432:	d319      	bcc.n	a468 <__udivsi3+0x6c>
    a434:	e000      	b.n	a438 <__udivsi3+0x3c>
    a436:	0a09      	lsrs	r1, r1, #8
    a438:	0bc3      	lsrs	r3, r0, #15
    a43a:	428b      	cmp	r3, r1
    a43c:	d301      	bcc.n	a442 <__udivsi3+0x46>
    a43e:	03cb      	lsls	r3, r1, #15
    a440:	1ac0      	subs	r0, r0, r3
    a442:	4152      	adcs	r2, r2
    a444:	0b83      	lsrs	r3, r0, #14
    a446:	428b      	cmp	r3, r1
    a448:	d301      	bcc.n	a44e <__udivsi3+0x52>
    a44a:	038b      	lsls	r3, r1, #14
    a44c:	1ac0      	subs	r0, r0, r3
    a44e:	4152      	adcs	r2, r2
    a450:	0b43      	lsrs	r3, r0, #13
    a452:	428b      	cmp	r3, r1
    a454:	d301      	bcc.n	a45a <__udivsi3+0x5e>
    a456:	034b      	lsls	r3, r1, #13
    a458:	1ac0      	subs	r0, r0, r3
    a45a:	4152      	adcs	r2, r2
    a45c:	0b03      	lsrs	r3, r0, #12
    a45e:	428b      	cmp	r3, r1
    a460:	d301      	bcc.n	a466 <__udivsi3+0x6a>
    a462:	030b      	lsls	r3, r1, #12
    a464:	1ac0      	subs	r0, r0, r3
    a466:	4152      	adcs	r2, r2
    a468:	0ac3      	lsrs	r3, r0, #11
    a46a:	428b      	cmp	r3, r1
    a46c:	d301      	bcc.n	a472 <__udivsi3+0x76>
    a46e:	02cb      	lsls	r3, r1, #11
    a470:	1ac0      	subs	r0, r0, r3
    a472:	4152      	adcs	r2, r2
    a474:	0a83      	lsrs	r3, r0, #10
    a476:	428b      	cmp	r3, r1
    a478:	d301      	bcc.n	a47e <__udivsi3+0x82>
    a47a:	028b      	lsls	r3, r1, #10
    a47c:	1ac0      	subs	r0, r0, r3
    a47e:	4152      	adcs	r2, r2
    a480:	0a43      	lsrs	r3, r0, #9
    a482:	428b      	cmp	r3, r1
    a484:	d301      	bcc.n	a48a <__udivsi3+0x8e>
    a486:	024b      	lsls	r3, r1, #9
    a488:	1ac0      	subs	r0, r0, r3
    a48a:	4152      	adcs	r2, r2
    a48c:	0a03      	lsrs	r3, r0, #8
    a48e:	428b      	cmp	r3, r1
    a490:	d301      	bcc.n	a496 <__udivsi3+0x9a>
    a492:	020b      	lsls	r3, r1, #8
    a494:	1ac0      	subs	r0, r0, r3
    a496:	4152      	adcs	r2, r2
    a498:	d2cd      	bcs.n	a436 <__udivsi3+0x3a>
    a49a:	09c3      	lsrs	r3, r0, #7
    a49c:	428b      	cmp	r3, r1
    a49e:	d301      	bcc.n	a4a4 <__udivsi3+0xa8>
    a4a0:	01cb      	lsls	r3, r1, #7
    a4a2:	1ac0      	subs	r0, r0, r3
    a4a4:	4152      	adcs	r2, r2
    a4a6:	0983      	lsrs	r3, r0, #6
    a4a8:	428b      	cmp	r3, r1
    a4aa:	d301      	bcc.n	a4b0 <__udivsi3+0xb4>
    a4ac:	018b      	lsls	r3, r1, #6
    a4ae:	1ac0      	subs	r0, r0, r3
    a4b0:	4152      	adcs	r2, r2
    a4b2:	0943      	lsrs	r3, r0, #5
    a4b4:	428b      	cmp	r3, r1
    a4b6:	d301      	bcc.n	a4bc <__udivsi3+0xc0>
    a4b8:	014b      	lsls	r3, r1, #5
    a4ba:	1ac0      	subs	r0, r0, r3
    a4bc:	4152      	adcs	r2, r2
    a4be:	0903      	lsrs	r3, r0, #4
    a4c0:	428b      	cmp	r3, r1
    a4c2:	d301      	bcc.n	a4c8 <__udivsi3+0xcc>
    a4c4:	010b      	lsls	r3, r1, #4
    a4c6:	1ac0      	subs	r0, r0, r3
    a4c8:	4152      	adcs	r2, r2
    a4ca:	08c3      	lsrs	r3, r0, #3
    a4cc:	428b      	cmp	r3, r1
    a4ce:	d301      	bcc.n	a4d4 <__udivsi3+0xd8>
    a4d0:	00cb      	lsls	r3, r1, #3
    a4d2:	1ac0      	subs	r0, r0, r3
    a4d4:	4152      	adcs	r2, r2
    a4d6:	0883      	lsrs	r3, r0, #2
    a4d8:	428b      	cmp	r3, r1
    a4da:	d301      	bcc.n	a4e0 <__udivsi3+0xe4>
    a4dc:	008b      	lsls	r3, r1, #2
    a4de:	1ac0      	subs	r0, r0, r3
    a4e0:	4152      	adcs	r2, r2
    a4e2:	0843      	lsrs	r3, r0, #1
    a4e4:	428b      	cmp	r3, r1
    a4e6:	d301      	bcc.n	a4ec <__udivsi3+0xf0>
    a4e8:	004b      	lsls	r3, r1, #1
    a4ea:	1ac0      	subs	r0, r0, r3
    a4ec:	4152      	adcs	r2, r2
    a4ee:	1a41      	subs	r1, r0, r1
    a4f0:	d200      	bcs.n	a4f4 <__udivsi3+0xf8>
    a4f2:	4601      	mov	r1, r0
    a4f4:	4152      	adcs	r2, r2
    a4f6:	4610      	mov	r0, r2
    a4f8:	4770      	bx	lr
    a4fa:	e7ff      	b.n	a4fc <__udivsi3+0x100>
    a4fc:	b501      	push	{r0, lr}
    a4fe:	2000      	movs	r0, #0
    a500:	f000 f8f0 	bl	a6e4 <__aeabi_idiv0>
    a504:	bd02      	pop	{r1, pc}
    a506:	46c0      	nop			; (mov r8, r8)

0000a508 <__aeabi_uidivmod>:
    a508:	2900      	cmp	r1, #0
    a50a:	d0f7      	beq.n	a4fc <__udivsi3+0x100>
    a50c:	e776      	b.n	a3fc <__udivsi3>
    a50e:	4770      	bx	lr

0000a510 <__divsi3>:
    a510:	4603      	mov	r3, r0
    a512:	430b      	orrs	r3, r1
    a514:	d47f      	bmi.n	a616 <__divsi3+0x106>
    a516:	2200      	movs	r2, #0
    a518:	0843      	lsrs	r3, r0, #1
    a51a:	428b      	cmp	r3, r1
    a51c:	d374      	bcc.n	a608 <__divsi3+0xf8>
    a51e:	0903      	lsrs	r3, r0, #4
    a520:	428b      	cmp	r3, r1
    a522:	d35f      	bcc.n	a5e4 <__divsi3+0xd4>
    a524:	0a03      	lsrs	r3, r0, #8
    a526:	428b      	cmp	r3, r1
    a528:	d344      	bcc.n	a5b4 <__divsi3+0xa4>
    a52a:	0b03      	lsrs	r3, r0, #12
    a52c:	428b      	cmp	r3, r1
    a52e:	d328      	bcc.n	a582 <__divsi3+0x72>
    a530:	0c03      	lsrs	r3, r0, #16
    a532:	428b      	cmp	r3, r1
    a534:	d30d      	bcc.n	a552 <__divsi3+0x42>
    a536:	22ff      	movs	r2, #255	; 0xff
    a538:	0209      	lsls	r1, r1, #8
    a53a:	ba12      	rev	r2, r2
    a53c:	0c03      	lsrs	r3, r0, #16
    a53e:	428b      	cmp	r3, r1
    a540:	d302      	bcc.n	a548 <__divsi3+0x38>
    a542:	1212      	asrs	r2, r2, #8
    a544:	0209      	lsls	r1, r1, #8
    a546:	d065      	beq.n	a614 <__divsi3+0x104>
    a548:	0b03      	lsrs	r3, r0, #12
    a54a:	428b      	cmp	r3, r1
    a54c:	d319      	bcc.n	a582 <__divsi3+0x72>
    a54e:	e000      	b.n	a552 <__divsi3+0x42>
    a550:	0a09      	lsrs	r1, r1, #8
    a552:	0bc3      	lsrs	r3, r0, #15
    a554:	428b      	cmp	r3, r1
    a556:	d301      	bcc.n	a55c <__divsi3+0x4c>
    a558:	03cb      	lsls	r3, r1, #15
    a55a:	1ac0      	subs	r0, r0, r3
    a55c:	4152      	adcs	r2, r2
    a55e:	0b83      	lsrs	r3, r0, #14
    a560:	428b      	cmp	r3, r1
    a562:	d301      	bcc.n	a568 <__divsi3+0x58>
    a564:	038b      	lsls	r3, r1, #14
    a566:	1ac0      	subs	r0, r0, r3
    a568:	4152      	adcs	r2, r2
    a56a:	0b43      	lsrs	r3, r0, #13
    a56c:	428b      	cmp	r3, r1
    a56e:	d301      	bcc.n	a574 <__divsi3+0x64>
    a570:	034b      	lsls	r3, r1, #13
    a572:	1ac0      	subs	r0, r0, r3
    a574:	4152      	adcs	r2, r2
    a576:	0b03      	lsrs	r3, r0, #12
    a578:	428b      	cmp	r3, r1
    a57a:	d301      	bcc.n	a580 <__divsi3+0x70>
    a57c:	030b      	lsls	r3, r1, #12
    a57e:	1ac0      	subs	r0, r0, r3
    a580:	4152      	adcs	r2, r2
    a582:	0ac3      	lsrs	r3, r0, #11
    a584:	428b      	cmp	r3, r1
    a586:	d301      	bcc.n	a58c <__divsi3+0x7c>
    a588:	02cb      	lsls	r3, r1, #11
    a58a:	1ac0      	subs	r0, r0, r3
    a58c:	4152      	adcs	r2, r2
    a58e:	0a83      	lsrs	r3, r0, #10
    a590:	428b      	cmp	r3, r1
    a592:	d301      	bcc.n	a598 <__divsi3+0x88>
    a594:	028b      	lsls	r3, r1, #10
    a596:	1ac0      	subs	r0, r0, r3
    a598:	4152      	adcs	r2, r2
    a59a:	0a43      	lsrs	r3, r0, #9
    a59c:	428b      	cmp	r3, r1
    a59e:	d301      	bcc.n	a5a4 <__divsi3+0x94>
    a5a0:	024b      	lsls	r3, r1, #9
    a5a2:	1ac0      	subs	r0, r0, r3
    a5a4:	4152      	adcs	r2, r2
    a5a6:	0a03      	lsrs	r3, r0, #8
    a5a8:	428b      	cmp	r3, r1
    a5aa:	d301      	bcc.n	a5b0 <__divsi3+0xa0>
    a5ac:	020b      	lsls	r3, r1, #8
    a5ae:	1ac0      	subs	r0, r0, r3
    a5b0:	4152      	adcs	r2, r2
    a5b2:	d2cd      	bcs.n	a550 <__divsi3+0x40>
    a5b4:	09c3      	lsrs	r3, r0, #7
    a5b6:	428b      	cmp	r3, r1
    a5b8:	d301      	bcc.n	a5be <__divsi3+0xae>
    a5ba:	01cb      	lsls	r3, r1, #7
    a5bc:	1ac0      	subs	r0, r0, r3
    a5be:	4152      	adcs	r2, r2
    a5c0:	0983      	lsrs	r3, r0, #6
    a5c2:	428b      	cmp	r3, r1
    a5c4:	d301      	bcc.n	a5ca <__divsi3+0xba>
    a5c6:	018b      	lsls	r3, r1, #6
    a5c8:	1ac0      	subs	r0, r0, r3
    a5ca:	4152      	adcs	r2, r2
    a5cc:	0943      	lsrs	r3, r0, #5
    a5ce:	428b      	cmp	r3, r1
    a5d0:	d301      	bcc.n	a5d6 <__divsi3+0xc6>
    a5d2:	014b      	lsls	r3, r1, #5
    a5d4:	1ac0      	subs	r0, r0, r3
    a5d6:	4152      	adcs	r2, r2
    a5d8:	0903      	lsrs	r3, r0, #4
    a5da:	428b      	cmp	r3, r1
    a5dc:	d301      	bcc.n	a5e2 <__divsi3+0xd2>
    a5de:	010b      	lsls	r3, r1, #4
    a5e0:	1ac0      	subs	r0, r0, r3
    a5e2:	4152      	adcs	r2, r2
    a5e4:	08c3      	lsrs	r3, r0, #3
    a5e6:	428b      	cmp	r3, r1
    a5e8:	d301      	bcc.n	a5ee <__divsi3+0xde>
    a5ea:	00cb      	lsls	r3, r1, #3
    a5ec:	1ac0      	subs	r0, r0, r3
    a5ee:	4152      	adcs	r2, r2
    a5f0:	0883      	lsrs	r3, r0, #2
    a5f2:	428b      	cmp	r3, r1
    a5f4:	d301      	bcc.n	a5fa <__divsi3+0xea>
    a5f6:	008b      	lsls	r3, r1, #2
    a5f8:	1ac0      	subs	r0, r0, r3
    a5fa:	4152      	adcs	r2, r2
    a5fc:	0843      	lsrs	r3, r0, #1
    a5fe:	428b      	cmp	r3, r1
    a600:	d301      	bcc.n	a606 <__divsi3+0xf6>
    a602:	004b      	lsls	r3, r1, #1
    a604:	1ac0      	subs	r0, r0, r3
    a606:	4152      	adcs	r2, r2
    a608:	1a41      	subs	r1, r0, r1
    a60a:	d200      	bcs.n	a60e <__divsi3+0xfe>
    a60c:	4601      	mov	r1, r0
    a60e:	4152      	adcs	r2, r2
    a610:	4610      	mov	r0, r2
    a612:	4770      	bx	lr
    a614:	e05d      	b.n	a6d2 <__divsi3+0x1c2>
    a616:	0fca      	lsrs	r2, r1, #31
    a618:	d000      	beq.n	a61c <__divsi3+0x10c>
    a61a:	4249      	negs	r1, r1
    a61c:	1003      	asrs	r3, r0, #32
    a61e:	d300      	bcc.n	a622 <__divsi3+0x112>
    a620:	4240      	negs	r0, r0
    a622:	4053      	eors	r3, r2
    a624:	2200      	movs	r2, #0
    a626:	469c      	mov	ip, r3
    a628:	0903      	lsrs	r3, r0, #4
    a62a:	428b      	cmp	r3, r1
    a62c:	d32d      	bcc.n	a68a <__divsi3+0x17a>
    a62e:	0a03      	lsrs	r3, r0, #8
    a630:	428b      	cmp	r3, r1
    a632:	d312      	bcc.n	a65a <__divsi3+0x14a>
    a634:	22fc      	movs	r2, #252	; 0xfc
    a636:	0189      	lsls	r1, r1, #6
    a638:	ba12      	rev	r2, r2
    a63a:	0a03      	lsrs	r3, r0, #8
    a63c:	428b      	cmp	r3, r1
    a63e:	d30c      	bcc.n	a65a <__divsi3+0x14a>
    a640:	0189      	lsls	r1, r1, #6
    a642:	1192      	asrs	r2, r2, #6
    a644:	428b      	cmp	r3, r1
    a646:	d308      	bcc.n	a65a <__divsi3+0x14a>
    a648:	0189      	lsls	r1, r1, #6
    a64a:	1192      	asrs	r2, r2, #6
    a64c:	428b      	cmp	r3, r1
    a64e:	d304      	bcc.n	a65a <__divsi3+0x14a>
    a650:	0189      	lsls	r1, r1, #6
    a652:	d03a      	beq.n	a6ca <__divsi3+0x1ba>
    a654:	1192      	asrs	r2, r2, #6
    a656:	e000      	b.n	a65a <__divsi3+0x14a>
    a658:	0989      	lsrs	r1, r1, #6
    a65a:	09c3      	lsrs	r3, r0, #7
    a65c:	428b      	cmp	r3, r1
    a65e:	d301      	bcc.n	a664 <__divsi3+0x154>
    a660:	01cb      	lsls	r3, r1, #7
    a662:	1ac0      	subs	r0, r0, r3
    a664:	4152      	adcs	r2, r2
    a666:	0983      	lsrs	r3, r0, #6
    a668:	428b      	cmp	r3, r1
    a66a:	d301      	bcc.n	a670 <__divsi3+0x160>
    a66c:	018b      	lsls	r3, r1, #6
    a66e:	1ac0      	subs	r0, r0, r3
    a670:	4152      	adcs	r2, r2
    a672:	0943      	lsrs	r3, r0, #5
    a674:	428b      	cmp	r3, r1
    a676:	d301      	bcc.n	a67c <__divsi3+0x16c>
    a678:	014b      	lsls	r3, r1, #5
    a67a:	1ac0      	subs	r0, r0, r3
    a67c:	4152      	adcs	r2, r2
    a67e:	0903      	lsrs	r3, r0, #4
    a680:	428b      	cmp	r3, r1
    a682:	d301      	bcc.n	a688 <__divsi3+0x178>
    a684:	010b      	lsls	r3, r1, #4
    a686:	1ac0      	subs	r0, r0, r3
    a688:	4152      	adcs	r2, r2
    a68a:	08c3      	lsrs	r3, r0, #3
    a68c:	428b      	cmp	r3, r1
    a68e:	d301      	bcc.n	a694 <__divsi3+0x184>
    a690:	00cb      	lsls	r3, r1, #3
    a692:	1ac0      	subs	r0, r0, r3
    a694:	4152      	adcs	r2, r2
    a696:	0883      	lsrs	r3, r0, #2
    a698:	428b      	cmp	r3, r1
    a69a:	d301      	bcc.n	a6a0 <__divsi3+0x190>
    a69c:	008b      	lsls	r3, r1, #2
    a69e:	1ac0      	subs	r0, r0, r3
    a6a0:	4152      	adcs	r2, r2
    a6a2:	d2d9      	bcs.n	a658 <__divsi3+0x148>
    a6a4:	0843      	lsrs	r3, r0, #1
    a6a6:	428b      	cmp	r3, r1
    a6a8:	d301      	bcc.n	a6ae <__divsi3+0x19e>
    a6aa:	004b      	lsls	r3, r1, #1
    a6ac:	1ac0      	subs	r0, r0, r3
    a6ae:	4152      	adcs	r2, r2
    a6b0:	1a41      	subs	r1, r0, r1
    a6b2:	d200      	bcs.n	a6b6 <__divsi3+0x1a6>
    a6b4:	4601      	mov	r1, r0
    a6b6:	4663      	mov	r3, ip
    a6b8:	4152      	adcs	r2, r2
    a6ba:	105b      	asrs	r3, r3, #1
    a6bc:	4610      	mov	r0, r2
    a6be:	d301      	bcc.n	a6c4 <__divsi3+0x1b4>
    a6c0:	4240      	negs	r0, r0
    a6c2:	2b00      	cmp	r3, #0
    a6c4:	d500      	bpl.n	a6c8 <__divsi3+0x1b8>
    a6c6:	4249      	negs	r1, r1
    a6c8:	4770      	bx	lr
    a6ca:	4663      	mov	r3, ip
    a6cc:	105b      	asrs	r3, r3, #1
    a6ce:	d300      	bcc.n	a6d2 <__divsi3+0x1c2>
    a6d0:	4240      	negs	r0, r0
    a6d2:	b501      	push	{r0, lr}
    a6d4:	2000      	movs	r0, #0
    a6d6:	f000 f805 	bl	a6e4 <__aeabi_idiv0>
    a6da:	bd02      	pop	{r1, pc}

0000a6dc <__aeabi_idivmod>:
    a6dc:	2900      	cmp	r1, #0
    a6de:	d0f8      	beq.n	a6d2 <__divsi3+0x1c2>
    a6e0:	e716      	b.n	a510 <__divsi3>
    a6e2:	4770      	bx	lr

0000a6e4 <__aeabi_idiv0>:
    a6e4:	4770      	bx	lr
    a6e6:	46c0      	nop			; (mov r8, r8)

0000a6e8 <__aeabi_cdrcmple>:
    a6e8:	4684      	mov	ip, r0
    a6ea:	1c10      	adds	r0, r2, #0
    a6ec:	4662      	mov	r2, ip
    a6ee:	468c      	mov	ip, r1
    a6f0:	1c19      	adds	r1, r3, #0
    a6f2:	4663      	mov	r3, ip
    a6f4:	e000      	b.n	a6f8 <__aeabi_cdcmpeq>
    a6f6:	46c0      	nop			; (mov r8, r8)

0000a6f8 <__aeabi_cdcmpeq>:
    a6f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    a6fa:	f001 fd93 	bl	c224 <__ledf2>
    a6fe:	2800      	cmp	r0, #0
    a700:	d401      	bmi.n	a706 <__aeabi_cdcmpeq+0xe>
    a702:	2100      	movs	r1, #0
    a704:	42c8      	cmn	r0, r1
    a706:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0000a708 <__aeabi_dcmpeq>:
    a708:	b510      	push	{r4, lr}
    a70a:	f001 fced 	bl	c0e8 <__eqdf2>
    a70e:	4240      	negs	r0, r0
    a710:	3001      	adds	r0, #1
    a712:	bd10      	pop	{r4, pc}

0000a714 <__aeabi_dcmplt>:
    a714:	b510      	push	{r4, lr}
    a716:	f001 fd85 	bl	c224 <__ledf2>
    a71a:	2800      	cmp	r0, #0
    a71c:	db01      	blt.n	a722 <__aeabi_dcmplt+0xe>
    a71e:	2000      	movs	r0, #0
    a720:	bd10      	pop	{r4, pc}
    a722:	2001      	movs	r0, #1
    a724:	bd10      	pop	{r4, pc}
    a726:	46c0      	nop			; (mov r8, r8)

0000a728 <__aeabi_dcmple>:
    a728:	b510      	push	{r4, lr}
    a72a:	f001 fd7b 	bl	c224 <__ledf2>
    a72e:	2800      	cmp	r0, #0
    a730:	dd01      	ble.n	a736 <__aeabi_dcmple+0xe>
    a732:	2000      	movs	r0, #0
    a734:	bd10      	pop	{r4, pc}
    a736:	2001      	movs	r0, #1
    a738:	bd10      	pop	{r4, pc}
    a73a:	46c0      	nop			; (mov r8, r8)

0000a73c <__aeabi_dcmpgt>:
    a73c:	b510      	push	{r4, lr}
    a73e:	f001 fd0d 	bl	c15c <__gedf2>
    a742:	2800      	cmp	r0, #0
    a744:	dc01      	bgt.n	a74a <__aeabi_dcmpgt+0xe>
    a746:	2000      	movs	r0, #0
    a748:	bd10      	pop	{r4, pc}
    a74a:	2001      	movs	r0, #1
    a74c:	bd10      	pop	{r4, pc}
    a74e:	46c0      	nop			; (mov r8, r8)

0000a750 <__aeabi_dcmpge>:
    a750:	b510      	push	{r4, lr}
    a752:	f001 fd03 	bl	c15c <__gedf2>
    a756:	2800      	cmp	r0, #0
    a758:	da01      	bge.n	a75e <__aeabi_dcmpge+0xe>
    a75a:	2000      	movs	r0, #0
    a75c:	bd10      	pop	{r4, pc}
    a75e:	2001      	movs	r0, #1
    a760:	bd10      	pop	{r4, pc}
    a762:	46c0      	nop			; (mov r8, r8)

0000a764 <__aeabi_cfrcmple>:
    a764:	4684      	mov	ip, r0
    a766:	1c08      	adds	r0, r1, #0
    a768:	4661      	mov	r1, ip
    a76a:	e7ff      	b.n	a76c <__aeabi_cfcmpeq>

0000a76c <__aeabi_cfcmpeq>:
    a76c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    a76e:	f000 fb29 	bl	adc4 <__lesf2>
    a772:	2800      	cmp	r0, #0
    a774:	d401      	bmi.n	a77a <__aeabi_cfcmpeq+0xe>
    a776:	2100      	movs	r1, #0
    a778:	42c8      	cmn	r0, r1
    a77a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0000a77c <__aeabi_fcmpeq>:
    a77c:	b510      	push	{r4, lr}
    a77e:	f000 fabb 	bl	acf8 <__eqsf2>
    a782:	4240      	negs	r0, r0
    a784:	3001      	adds	r0, #1
    a786:	bd10      	pop	{r4, pc}

0000a788 <__aeabi_fcmplt>:
    a788:	b510      	push	{r4, lr}
    a78a:	f000 fb1b 	bl	adc4 <__lesf2>
    a78e:	2800      	cmp	r0, #0
    a790:	db01      	blt.n	a796 <__aeabi_fcmplt+0xe>
    a792:	2000      	movs	r0, #0
    a794:	bd10      	pop	{r4, pc}
    a796:	2001      	movs	r0, #1
    a798:	bd10      	pop	{r4, pc}
    a79a:	46c0      	nop			; (mov r8, r8)

0000a79c <__aeabi_fcmple>:
    a79c:	b510      	push	{r4, lr}
    a79e:	f000 fb11 	bl	adc4 <__lesf2>
    a7a2:	2800      	cmp	r0, #0
    a7a4:	dd01      	ble.n	a7aa <__aeabi_fcmple+0xe>
    a7a6:	2000      	movs	r0, #0
    a7a8:	bd10      	pop	{r4, pc}
    a7aa:	2001      	movs	r0, #1
    a7ac:	bd10      	pop	{r4, pc}
    a7ae:	46c0      	nop			; (mov r8, r8)

0000a7b0 <__aeabi_fcmpgt>:
    a7b0:	b510      	push	{r4, lr}
    a7b2:	f000 fac7 	bl	ad44 <__gesf2>
    a7b6:	2800      	cmp	r0, #0
    a7b8:	dc01      	bgt.n	a7be <__aeabi_fcmpgt+0xe>
    a7ba:	2000      	movs	r0, #0
    a7bc:	bd10      	pop	{r4, pc}
    a7be:	2001      	movs	r0, #1
    a7c0:	bd10      	pop	{r4, pc}
    a7c2:	46c0      	nop			; (mov r8, r8)

0000a7c4 <__aeabi_fcmpge>:
    a7c4:	b510      	push	{r4, lr}
    a7c6:	f000 fabd 	bl	ad44 <__gesf2>
    a7ca:	2800      	cmp	r0, #0
    a7cc:	da01      	bge.n	a7d2 <__aeabi_fcmpge+0xe>
    a7ce:	2000      	movs	r0, #0
    a7d0:	bd10      	pop	{r4, pc}
    a7d2:	2001      	movs	r0, #1
    a7d4:	bd10      	pop	{r4, pc}
    a7d6:	46c0      	nop			; (mov r8, r8)

0000a7d8 <__aeabi_uldivmod>:
    a7d8:	2b00      	cmp	r3, #0
    a7da:	d111      	bne.n	a800 <__aeabi_uldivmod+0x28>
    a7dc:	2a00      	cmp	r2, #0
    a7de:	d10f      	bne.n	a800 <__aeabi_uldivmod+0x28>
    a7e0:	2900      	cmp	r1, #0
    a7e2:	d100      	bne.n	a7e6 <__aeabi_uldivmod+0xe>
    a7e4:	2800      	cmp	r0, #0
    a7e6:	d002      	beq.n	a7ee <__aeabi_uldivmod+0x16>
    a7e8:	2100      	movs	r1, #0
    a7ea:	43c9      	mvns	r1, r1
    a7ec:	1c08      	adds	r0, r1, #0
    a7ee:	b407      	push	{r0, r1, r2}
    a7f0:	4802      	ldr	r0, [pc, #8]	; (a7fc <__aeabi_uldivmod+0x24>)
    a7f2:	a102      	add	r1, pc, #8	; (adr r1, a7fc <__aeabi_uldivmod+0x24>)
    a7f4:	1840      	adds	r0, r0, r1
    a7f6:	9002      	str	r0, [sp, #8]
    a7f8:	bd03      	pop	{r0, r1, pc}
    a7fa:	46c0      	nop			; (mov r8, r8)
    a7fc:	fffffee9 	.word	0xfffffee9
    a800:	b403      	push	{r0, r1}
    a802:	4668      	mov	r0, sp
    a804:	b501      	push	{r0, lr}
    a806:	9802      	ldr	r0, [sp, #8]
    a808:	f000 f824 	bl	a854 <__udivmoddi4>
    a80c:	9b01      	ldr	r3, [sp, #4]
    a80e:	469e      	mov	lr, r3
    a810:	b002      	add	sp, #8
    a812:	bc0c      	pop	{r2, r3}
    a814:	4770      	bx	lr
    a816:	46c0      	nop			; (mov r8, r8)

0000a818 <__aeabi_d2uiz>:
    a818:	b570      	push	{r4, r5, r6, lr}
    a81a:	2200      	movs	r2, #0
    a81c:	4b0c      	ldr	r3, [pc, #48]	; (a850 <__aeabi_d2uiz+0x38>)
    a81e:	0004      	movs	r4, r0
    a820:	000d      	movs	r5, r1
    a822:	f7ff ff95 	bl	a750 <__aeabi_dcmpge>
    a826:	2800      	cmp	r0, #0
    a828:	d104      	bne.n	a834 <__aeabi_d2uiz+0x1c>
    a82a:	0020      	movs	r0, r4
    a82c:	0029      	movs	r1, r5
    a82e:	f002 fb11 	bl	ce54 <__aeabi_d2iz>
    a832:	bd70      	pop	{r4, r5, r6, pc}
    a834:	4b06      	ldr	r3, [pc, #24]	; (a850 <__aeabi_d2uiz+0x38>)
    a836:	2200      	movs	r2, #0
    a838:	0020      	movs	r0, r4
    a83a:	0029      	movs	r1, r5
    a83c:	f001 ffd4 	bl	c7e8 <__aeabi_dsub>
    a840:	f002 fb08 	bl	ce54 <__aeabi_d2iz>
    a844:	2380      	movs	r3, #128	; 0x80
    a846:	061b      	lsls	r3, r3, #24
    a848:	469c      	mov	ip, r3
    a84a:	4460      	add	r0, ip
    a84c:	e7f1      	b.n	a832 <__aeabi_d2uiz+0x1a>
    a84e:	46c0      	nop			; (mov r8, r8)
    a850:	41e00000 	.word	0x41e00000

0000a854 <__udivmoddi4>:
    a854:	b5f0      	push	{r4, r5, r6, r7, lr}
    a856:	4657      	mov	r7, sl
    a858:	464e      	mov	r6, r9
    a85a:	4645      	mov	r5, r8
    a85c:	46de      	mov	lr, fp
    a85e:	b5e0      	push	{r5, r6, r7, lr}
    a860:	0004      	movs	r4, r0
    a862:	b083      	sub	sp, #12
    a864:	000d      	movs	r5, r1
    a866:	4692      	mov	sl, r2
    a868:	4699      	mov	r9, r3
    a86a:	428b      	cmp	r3, r1
    a86c:	d82f      	bhi.n	a8ce <__udivmoddi4+0x7a>
    a86e:	d02c      	beq.n	a8ca <__udivmoddi4+0x76>
    a870:	4649      	mov	r1, r9
    a872:	4650      	mov	r0, sl
    a874:	f002 fc0c 	bl	d090 <__clzdi2>
    a878:	0029      	movs	r1, r5
    a87a:	0006      	movs	r6, r0
    a87c:	0020      	movs	r0, r4
    a87e:	f002 fc07 	bl	d090 <__clzdi2>
    a882:	1a33      	subs	r3, r6, r0
    a884:	4698      	mov	r8, r3
    a886:	3b20      	subs	r3, #32
    a888:	469b      	mov	fp, r3
    a88a:	d500      	bpl.n	a88e <__udivmoddi4+0x3a>
    a88c:	e074      	b.n	a978 <__udivmoddi4+0x124>
    a88e:	4653      	mov	r3, sl
    a890:	465a      	mov	r2, fp
    a892:	4093      	lsls	r3, r2
    a894:	001f      	movs	r7, r3
    a896:	4653      	mov	r3, sl
    a898:	4642      	mov	r2, r8
    a89a:	4093      	lsls	r3, r2
    a89c:	001e      	movs	r6, r3
    a89e:	42af      	cmp	r7, r5
    a8a0:	d829      	bhi.n	a8f6 <__udivmoddi4+0xa2>
    a8a2:	d026      	beq.n	a8f2 <__udivmoddi4+0x9e>
    a8a4:	465b      	mov	r3, fp
    a8a6:	1ba4      	subs	r4, r4, r6
    a8a8:	41bd      	sbcs	r5, r7
    a8aa:	2b00      	cmp	r3, #0
    a8ac:	da00      	bge.n	a8b0 <__udivmoddi4+0x5c>
    a8ae:	e079      	b.n	a9a4 <__udivmoddi4+0x150>
    a8b0:	2200      	movs	r2, #0
    a8b2:	2300      	movs	r3, #0
    a8b4:	9200      	str	r2, [sp, #0]
    a8b6:	9301      	str	r3, [sp, #4]
    a8b8:	2301      	movs	r3, #1
    a8ba:	465a      	mov	r2, fp
    a8bc:	4093      	lsls	r3, r2
    a8be:	9301      	str	r3, [sp, #4]
    a8c0:	2301      	movs	r3, #1
    a8c2:	4642      	mov	r2, r8
    a8c4:	4093      	lsls	r3, r2
    a8c6:	9300      	str	r3, [sp, #0]
    a8c8:	e019      	b.n	a8fe <__udivmoddi4+0xaa>
    a8ca:	4282      	cmp	r2, r0
    a8cc:	d9d0      	bls.n	a870 <__udivmoddi4+0x1c>
    a8ce:	2200      	movs	r2, #0
    a8d0:	2300      	movs	r3, #0
    a8d2:	9200      	str	r2, [sp, #0]
    a8d4:	9301      	str	r3, [sp, #4]
    a8d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a8d8:	2b00      	cmp	r3, #0
    a8da:	d001      	beq.n	a8e0 <__udivmoddi4+0x8c>
    a8dc:	601c      	str	r4, [r3, #0]
    a8de:	605d      	str	r5, [r3, #4]
    a8e0:	9800      	ldr	r0, [sp, #0]
    a8e2:	9901      	ldr	r1, [sp, #4]
    a8e4:	b003      	add	sp, #12
    a8e6:	bc3c      	pop	{r2, r3, r4, r5}
    a8e8:	4690      	mov	r8, r2
    a8ea:	4699      	mov	r9, r3
    a8ec:	46a2      	mov	sl, r4
    a8ee:	46ab      	mov	fp, r5
    a8f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a8f2:	42a3      	cmp	r3, r4
    a8f4:	d9d6      	bls.n	a8a4 <__udivmoddi4+0x50>
    a8f6:	2200      	movs	r2, #0
    a8f8:	2300      	movs	r3, #0
    a8fa:	9200      	str	r2, [sp, #0]
    a8fc:	9301      	str	r3, [sp, #4]
    a8fe:	4643      	mov	r3, r8
    a900:	2b00      	cmp	r3, #0
    a902:	d0e8      	beq.n	a8d6 <__udivmoddi4+0x82>
    a904:	07fb      	lsls	r3, r7, #31
    a906:	0872      	lsrs	r2, r6, #1
    a908:	431a      	orrs	r2, r3
    a90a:	4646      	mov	r6, r8
    a90c:	087b      	lsrs	r3, r7, #1
    a90e:	e00e      	b.n	a92e <__udivmoddi4+0xda>
    a910:	42ab      	cmp	r3, r5
    a912:	d101      	bne.n	a918 <__udivmoddi4+0xc4>
    a914:	42a2      	cmp	r2, r4
    a916:	d80c      	bhi.n	a932 <__udivmoddi4+0xde>
    a918:	1aa4      	subs	r4, r4, r2
    a91a:	419d      	sbcs	r5, r3
    a91c:	2001      	movs	r0, #1
    a91e:	1924      	adds	r4, r4, r4
    a920:	416d      	adcs	r5, r5
    a922:	2100      	movs	r1, #0
    a924:	3e01      	subs	r6, #1
    a926:	1824      	adds	r4, r4, r0
    a928:	414d      	adcs	r5, r1
    a92a:	2e00      	cmp	r6, #0
    a92c:	d006      	beq.n	a93c <__udivmoddi4+0xe8>
    a92e:	42ab      	cmp	r3, r5
    a930:	d9ee      	bls.n	a910 <__udivmoddi4+0xbc>
    a932:	3e01      	subs	r6, #1
    a934:	1924      	adds	r4, r4, r4
    a936:	416d      	adcs	r5, r5
    a938:	2e00      	cmp	r6, #0
    a93a:	d1f8      	bne.n	a92e <__udivmoddi4+0xda>
    a93c:	465b      	mov	r3, fp
    a93e:	9800      	ldr	r0, [sp, #0]
    a940:	9901      	ldr	r1, [sp, #4]
    a942:	1900      	adds	r0, r0, r4
    a944:	4169      	adcs	r1, r5
    a946:	2b00      	cmp	r3, #0
    a948:	db22      	blt.n	a990 <__udivmoddi4+0x13c>
    a94a:	002b      	movs	r3, r5
    a94c:	465a      	mov	r2, fp
    a94e:	40d3      	lsrs	r3, r2
    a950:	002a      	movs	r2, r5
    a952:	4644      	mov	r4, r8
    a954:	40e2      	lsrs	r2, r4
    a956:	001c      	movs	r4, r3
    a958:	465b      	mov	r3, fp
    a95a:	0015      	movs	r5, r2
    a95c:	2b00      	cmp	r3, #0
    a95e:	db2c      	blt.n	a9ba <__udivmoddi4+0x166>
    a960:	0026      	movs	r6, r4
    a962:	409e      	lsls	r6, r3
    a964:	0033      	movs	r3, r6
    a966:	0026      	movs	r6, r4
    a968:	4647      	mov	r7, r8
    a96a:	40be      	lsls	r6, r7
    a96c:	0032      	movs	r2, r6
    a96e:	1a80      	subs	r0, r0, r2
    a970:	4199      	sbcs	r1, r3
    a972:	9000      	str	r0, [sp, #0]
    a974:	9101      	str	r1, [sp, #4]
    a976:	e7ae      	b.n	a8d6 <__udivmoddi4+0x82>
    a978:	4642      	mov	r2, r8
    a97a:	2320      	movs	r3, #32
    a97c:	1a9b      	subs	r3, r3, r2
    a97e:	4652      	mov	r2, sl
    a980:	40da      	lsrs	r2, r3
    a982:	4641      	mov	r1, r8
    a984:	0013      	movs	r3, r2
    a986:	464a      	mov	r2, r9
    a988:	408a      	lsls	r2, r1
    a98a:	0017      	movs	r7, r2
    a98c:	431f      	orrs	r7, r3
    a98e:	e782      	b.n	a896 <__udivmoddi4+0x42>
    a990:	4642      	mov	r2, r8
    a992:	2320      	movs	r3, #32
    a994:	1a9b      	subs	r3, r3, r2
    a996:	002a      	movs	r2, r5
    a998:	4646      	mov	r6, r8
    a99a:	409a      	lsls	r2, r3
    a99c:	0023      	movs	r3, r4
    a99e:	40f3      	lsrs	r3, r6
    a9a0:	4313      	orrs	r3, r2
    a9a2:	e7d5      	b.n	a950 <__udivmoddi4+0xfc>
    a9a4:	4642      	mov	r2, r8
    a9a6:	2320      	movs	r3, #32
    a9a8:	2100      	movs	r1, #0
    a9aa:	1a9b      	subs	r3, r3, r2
    a9ac:	2200      	movs	r2, #0
    a9ae:	9100      	str	r1, [sp, #0]
    a9b0:	9201      	str	r2, [sp, #4]
    a9b2:	2201      	movs	r2, #1
    a9b4:	40da      	lsrs	r2, r3
    a9b6:	9201      	str	r2, [sp, #4]
    a9b8:	e782      	b.n	a8c0 <__udivmoddi4+0x6c>
    a9ba:	4642      	mov	r2, r8
    a9bc:	2320      	movs	r3, #32
    a9be:	0026      	movs	r6, r4
    a9c0:	1a9b      	subs	r3, r3, r2
    a9c2:	40de      	lsrs	r6, r3
    a9c4:	002f      	movs	r7, r5
    a9c6:	46b4      	mov	ip, r6
    a9c8:	4097      	lsls	r7, r2
    a9ca:	4666      	mov	r6, ip
    a9cc:	003b      	movs	r3, r7
    a9ce:	4333      	orrs	r3, r6
    a9d0:	e7c9      	b.n	a966 <__udivmoddi4+0x112>
    a9d2:	46c0      	nop			; (mov r8, r8)

0000a9d4 <__aeabi_fadd>:
    a9d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    a9d6:	46c6      	mov	lr, r8
    a9d8:	024e      	lsls	r6, r1, #9
    a9da:	0247      	lsls	r7, r0, #9
    a9dc:	0a76      	lsrs	r6, r6, #9
    a9de:	0a7b      	lsrs	r3, r7, #9
    a9e0:	0044      	lsls	r4, r0, #1
    a9e2:	0fc5      	lsrs	r5, r0, #31
    a9e4:	00f7      	lsls	r7, r6, #3
    a9e6:	0048      	lsls	r0, r1, #1
    a9e8:	4698      	mov	r8, r3
    a9ea:	b500      	push	{lr}
    a9ec:	0e24      	lsrs	r4, r4, #24
    a9ee:	002a      	movs	r2, r5
    a9f0:	00db      	lsls	r3, r3, #3
    a9f2:	0e00      	lsrs	r0, r0, #24
    a9f4:	0fc9      	lsrs	r1, r1, #31
    a9f6:	46bc      	mov	ip, r7
    a9f8:	428d      	cmp	r5, r1
    a9fa:	d067      	beq.n	aacc <__aeabi_fadd+0xf8>
    a9fc:	1a22      	subs	r2, r4, r0
    a9fe:	2a00      	cmp	r2, #0
    aa00:	dc00      	bgt.n	aa04 <__aeabi_fadd+0x30>
    aa02:	e0a5      	b.n	ab50 <__aeabi_fadd+0x17c>
    aa04:	2800      	cmp	r0, #0
    aa06:	d13a      	bne.n	aa7e <__aeabi_fadd+0xaa>
    aa08:	2f00      	cmp	r7, #0
    aa0a:	d100      	bne.n	aa0e <__aeabi_fadd+0x3a>
    aa0c:	e093      	b.n	ab36 <__aeabi_fadd+0x162>
    aa0e:	1e51      	subs	r1, r2, #1
    aa10:	2900      	cmp	r1, #0
    aa12:	d000      	beq.n	aa16 <__aeabi_fadd+0x42>
    aa14:	e0bc      	b.n	ab90 <__aeabi_fadd+0x1bc>
    aa16:	2401      	movs	r4, #1
    aa18:	1bdb      	subs	r3, r3, r7
    aa1a:	015a      	lsls	r2, r3, #5
    aa1c:	d546      	bpl.n	aaac <__aeabi_fadd+0xd8>
    aa1e:	019b      	lsls	r3, r3, #6
    aa20:	099e      	lsrs	r6, r3, #6
    aa22:	0030      	movs	r0, r6
    aa24:	f002 fb16 	bl	d054 <__clzsi2>
    aa28:	3805      	subs	r0, #5
    aa2a:	4086      	lsls	r6, r0
    aa2c:	4284      	cmp	r4, r0
    aa2e:	dd00      	ble.n	aa32 <__aeabi_fadd+0x5e>
    aa30:	e09d      	b.n	ab6e <__aeabi_fadd+0x19a>
    aa32:	1b04      	subs	r4, r0, r4
    aa34:	0032      	movs	r2, r6
    aa36:	2020      	movs	r0, #32
    aa38:	3401      	adds	r4, #1
    aa3a:	40e2      	lsrs	r2, r4
    aa3c:	1b04      	subs	r4, r0, r4
    aa3e:	40a6      	lsls	r6, r4
    aa40:	0033      	movs	r3, r6
    aa42:	1e5e      	subs	r6, r3, #1
    aa44:	41b3      	sbcs	r3, r6
    aa46:	2400      	movs	r4, #0
    aa48:	4313      	orrs	r3, r2
    aa4a:	075a      	lsls	r2, r3, #29
    aa4c:	d004      	beq.n	aa58 <__aeabi_fadd+0x84>
    aa4e:	220f      	movs	r2, #15
    aa50:	401a      	ands	r2, r3
    aa52:	2a04      	cmp	r2, #4
    aa54:	d000      	beq.n	aa58 <__aeabi_fadd+0x84>
    aa56:	3304      	adds	r3, #4
    aa58:	015a      	lsls	r2, r3, #5
    aa5a:	d529      	bpl.n	aab0 <__aeabi_fadd+0xdc>
    aa5c:	3401      	adds	r4, #1
    aa5e:	2cff      	cmp	r4, #255	; 0xff
    aa60:	d100      	bne.n	aa64 <__aeabi_fadd+0x90>
    aa62:	e081      	b.n	ab68 <__aeabi_fadd+0x194>
    aa64:	002a      	movs	r2, r5
    aa66:	019b      	lsls	r3, r3, #6
    aa68:	0a5b      	lsrs	r3, r3, #9
    aa6a:	b2e4      	uxtb	r4, r4
    aa6c:	025b      	lsls	r3, r3, #9
    aa6e:	05e4      	lsls	r4, r4, #23
    aa70:	0a58      	lsrs	r0, r3, #9
    aa72:	07d2      	lsls	r2, r2, #31
    aa74:	4320      	orrs	r0, r4
    aa76:	4310      	orrs	r0, r2
    aa78:	bc04      	pop	{r2}
    aa7a:	4690      	mov	r8, r2
    aa7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    aa7e:	2cff      	cmp	r4, #255	; 0xff
    aa80:	d0e3      	beq.n	aa4a <__aeabi_fadd+0x76>
    aa82:	2180      	movs	r1, #128	; 0x80
    aa84:	0038      	movs	r0, r7
    aa86:	04c9      	lsls	r1, r1, #19
    aa88:	4308      	orrs	r0, r1
    aa8a:	4684      	mov	ip, r0
    aa8c:	2a1b      	cmp	r2, #27
    aa8e:	dd00      	ble.n	aa92 <__aeabi_fadd+0xbe>
    aa90:	e082      	b.n	ab98 <__aeabi_fadd+0x1c4>
    aa92:	2020      	movs	r0, #32
    aa94:	4661      	mov	r1, ip
    aa96:	40d1      	lsrs	r1, r2
    aa98:	1a82      	subs	r2, r0, r2
    aa9a:	4660      	mov	r0, ip
    aa9c:	4090      	lsls	r0, r2
    aa9e:	0002      	movs	r2, r0
    aaa0:	1e50      	subs	r0, r2, #1
    aaa2:	4182      	sbcs	r2, r0
    aaa4:	430a      	orrs	r2, r1
    aaa6:	1a9b      	subs	r3, r3, r2
    aaa8:	015a      	lsls	r2, r3, #5
    aaaa:	d4b8      	bmi.n	aa1e <__aeabi_fadd+0x4a>
    aaac:	075a      	lsls	r2, r3, #29
    aaae:	d1ce      	bne.n	aa4e <__aeabi_fadd+0x7a>
    aab0:	08de      	lsrs	r6, r3, #3
    aab2:	002a      	movs	r2, r5
    aab4:	2cff      	cmp	r4, #255	; 0xff
    aab6:	d13a      	bne.n	ab2e <__aeabi_fadd+0x15a>
    aab8:	2e00      	cmp	r6, #0
    aaba:	d100      	bne.n	aabe <__aeabi_fadd+0xea>
    aabc:	e0ae      	b.n	ac1c <__aeabi_fadd+0x248>
    aabe:	2380      	movs	r3, #128	; 0x80
    aac0:	03db      	lsls	r3, r3, #15
    aac2:	4333      	orrs	r3, r6
    aac4:	025b      	lsls	r3, r3, #9
    aac6:	0a5b      	lsrs	r3, r3, #9
    aac8:	24ff      	movs	r4, #255	; 0xff
    aaca:	e7cf      	b.n	aa6c <__aeabi_fadd+0x98>
    aacc:	1a21      	subs	r1, r4, r0
    aace:	2900      	cmp	r1, #0
    aad0:	dd52      	ble.n	ab78 <__aeabi_fadd+0x1a4>
    aad2:	2800      	cmp	r0, #0
    aad4:	d031      	beq.n	ab3a <__aeabi_fadd+0x166>
    aad6:	2cff      	cmp	r4, #255	; 0xff
    aad8:	d0b7      	beq.n	aa4a <__aeabi_fadd+0x76>
    aada:	2080      	movs	r0, #128	; 0x80
    aadc:	003e      	movs	r6, r7
    aade:	04c0      	lsls	r0, r0, #19
    aae0:	4306      	orrs	r6, r0
    aae2:	46b4      	mov	ip, r6
    aae4:	291b      	cmp	r1, #27
    aae6:	dd00      	ble.n	aaea <__aeabi_fadd+0x116>
    aae8:	e0aa      	b.n	ac40 <__aeabi_fadd+0x26c>
    aaea:	2620      	movs	r6, #32
    aaec:	4660      	mov	r0, ip
    aaee:	40c8      	lsrs	r0, r1
    aaf0:	1a71      	subs	r1, r6, r1
    aaf2:	4666      	mov	r6, ip
    aaf4:	408e      	lsls	r6, r1
    aaf6:	0031      	movs	r1, r6
    aaf8:	1e4e      	subs	r6, r1, #1
    aafa:	41b1      	sbcs	r1, r6
    aafc:	4301      	orrs	r1, r0
    aafe:	185b      	adds	r3, r3, r1
    ab00:	0159      	lsls	r1, r3, #5
    ab02:	d5d3      	bpl.n	aaac <__aeabi_fadd+0xd8>
    ab04:	3401      	adds	r4, #1
    ab06:	2cff      	cmp	r4, #255	; 0xff
    ab08:	d100      	bne.n	ab0c <__aeabi_fadd+0x138>
    ab0a:	e087      	b.n	ac1c <__aeabi_fadd+0x248>
    ab0c:	2201      	movs	r2, #1
    ab0e:	4978      	ldr	r1, [pc, #480]	; (acf0 <__aeabi_fadd+0x31c>)
    ab10:	401a      	ands	r2, r3
    ab12:	085b      	lsrs	r3, r3, #1
    ab14:	400b      	ands	r3, r1
    ab16:	4313      	orrs	r3, r2
    ab18:	e797      	b.n	aa4a <__aeabi_fadd+0x76>
    ab1a:	2c00      	cmp	r4, #0
    ab1c:	d000      	beq.n	ab20 <__aeabi_fadd+0x14c>
    ab1e:	e0a7      	b.n	ac70 <__aeabi_fadd+0x29c>
    ab20:	2b00      	cmp	r3, #0
    ab22:	d000      	beq.n	ab26 <__aeabi_fadd+0x152>
    ab24:	e0b6      	b.n	ac94 <__aeabi_fadd+0x2c0>
    ab26:	1e3b      	subs	r3, r7, #0
    ab28:	d162      	bne.n	abf0 <__aeabi_fadd+0x21c>
    ab2a:	2600      	movs	r6, #0
    ab2c:	2200      	movs	r2, #0
    ab2e:	0273      	lsls	r3, r6, #9
    ab30:	0a5b      	lsrs	r3, r3, #9
    ab32:	b2e4      	uxtb	r4, r4
    ab34:	e79a      	b.n	aa6c <__aeabi_fadd+0x98>
    ab36:	0014      	movs	r4, r2
    ab38:	e787      	b.n	aa4a <__aeabi_fadd+0x76>
    ab3a:	2f00      	cmp	r7, #0
    ab3c:	d04d      	beq.n	abda <__aeabi_fadd+0x206>
    ab3e:	1e48      	subs	r0, r1, #1
    ab40:	2800      	cmp	r0, #0
    ab42:	d157      	bne.n	abf4 <__aeabi_fadd+0x220>
    ab44:	4463      	add	r3, ip
    ab46:	2401      	movs	r4, #1
    ab48:	015a      	lsls	r2, r3, #5
    ab4a:	d5af      	bpl.n	aaac <__aeabi_fadd+0xd8>
    ab4c:	2402      	movs	r4, #2
    ab4e:	e7dd      	b.n	ab0c <__aeabi_fadd+0x138>
    ab50:	2a00      	cmp	r2, #0
    ab52:	d124      	bne.n	ab9e <__aeabi_fadd+0x1ca>
    ab54:	1c62      	adds	r2, r4, #1
    ab56:	b2d2      	uxtb	r2, r2
    ab58:	2a01      	cmp	r2, #1
    ab5a:	ddde      	ble.n	ab1a <__aeabi_fadd+0x146>
    ab5c:	1bde      	subs	r6, r3, r7
    ab5e:	0172      	lsls	r2, r6, #5
    ab60:	d535      	bpl.n	abce <__aeabi_fadd+0x1fa>
    ab62:	1afe      	subs	r6, r7, r3
    ab64:	000d      	movs	r5, r1
    ab66:	e75c      	b.n	aa22 <__aeabi_fadd+0x4e>
    ab68:	002a      	movs	r2, r5
    ab6a:	2300      	movs	r3, #0
    ab6c:	e77e      	b.n	aa6c <__aeabi_fadd+0x98>
    ab6e:	0033      	movs	r3, r6
    ab70:	4a60      	ldr	r2, [pc, #384]	; (acf4 <__aeabi_fadd+0x320>)
    ab72:	1a24      	subs	r4, r4, r0
    ab74:	4013      	ands	r3, r2
    ab76:	e768      	b.n	aa4a <__aeabi_fadd+0x76>
    ab78:	2900      	cmp	r1, #0
    ab7a:	d163      	bne.n	ac44 <__aeabi_fadd+0x270>
    ab7c:	1c61      	adds	r1, r4, #1
    ab7e:	b2c8      	uxtb	r0, r1
    ab80:	2801      	cmp	r0, #1
    ab82:	dd4e      	ble.n	ac22 <__aeabi_fadd+0x24e>
    ab84:	29ff      	cmp	r1, #255	; 0xff
    ab86:	d049      	beq.n	ac1c <__aeabi_fadd+0x248>
    ab88:	4463      	add	r3, ip
    ab8a:	085b      	lsrs	r3, r3, #1
    ab8c:	000c      	movs	r4, r1
    ab8e:	e75c      	b.n	aa4a <__aeabi_fadd+0x76>
    ab90:	2aff      	cmp	r2, #255	; 0xff
    ab92:	d041      	beq.n	ac18 <__aeabi_fadd+0x244>
    ab94:	000a      	movs	r2, r1
    ab96:	e779      	b.n	aa8c <__aeabi_fadd+0xb8>
    ab98:	2201      	movs	r2, #1
    ab9a:	1a9b      	subs	r3, r3, r2
    ab9c:	e784      	b.n	aaa8 <__aeabi_fadd+0xd4>
    ab9e:	2c00      	cmp	r4, #0
    aba0:	d01d      	beq.n	abde <__aeabi_fadd+0x20a>
    aba2:	28ff      	cmp	r0, #255	; 0xff
    aba4:	d022      	beq.n	abec <__aeabi_fadd+0x218>
    aba6:	2480      	movs	r4, #128	; 0x80
    aba8:	04e4      	lsls	r4, r4, #19
    abaa:	4252      	negs	r2, r2
    abac:	4323      	orrs	r3, r4
    abae:	2a1b      	cmp	r2, #27
    abb0:	dd00      	ble.n	abb4 <__aeabi_fadd+0x1e0>
    abb2:	e08a      	b.n	acca <__aeabi_fadd+0x2f6>
    abb4:	001c      	movs	r4, r3
    abb6:	2520      	movs	r5, #32
    abb8:	40d4      	lsrs	r4, r2
    abba:	1aaa      	subs	r2, r5, r2
    abbc:	4093      	lsls	r3, r2
    abbe:	1e5a      	subs	r2, r3, #1
    abc0:	4193      	sbcs	r3, r2
    abc2:	4323      	orrs	r3, r4
    abc4:	4662      	mov	r2, ip
    abc6:	0004      	movs	r4, r0
    abc8:	1ad3      	subs	r3, r2, r3
    abca:	000d      	movs	r5, r1
    abcc:	e725      	b.n	aa1a <__aeabi_fadd+0x46>
    abce:	2e00      	cmp	r6, #0
    abd0:	d000      	beq.n	abd4 <__aeabi_fadd+0x200>
    abd2:	e726      	b.n	aa22 <__aeabi_fadd+0x4e>
    abd4:	2200      	movs	r2, #0
    abd6:	2400      	movs	r4, #0
    abd8:	e7a9      	b.n	ab2e <__aeabi_fadd+0x15a>
    abda:	000c      	movs	r4, r1
    abdc:	e735      	b.n	aa4a <__aeabi_fadd+0x76>
    abde:	2b00      	cmp	r3, #0
    abe0:	d04d      	beq.n	ac7e <__aeabi_fadd+0x2aa>
    abe2:	43d2      	mvns	r2, r2
    abe4:	2a00      	cmp	r2, #0
    abe6:	d0ed      	beq.n	abc4 <__aeabi_fadd+0x1f0>
    abe8:	28ff      	cmp	r0, #255	; 0xff
    abea:	d1e0      	bne.n	abae <__aeabi_fadd+0x1da>
    abec:	4663      	mov	r3, ip
    abee:	24ff      	movs	r4, #255	; 0xff
    abf0:	000d      	movs	r5, r1
    abf2:	e72a      	b.n	aa4a <__aeabi_fadd+0x76>
    abf4:	29ff      	cmp	r1, #255	; 0xff
    abf6:	d00f      	beq.n	ac18 <__aeabi_fadd+0x244>
    abf8:	0001      	movs	r1, r0
    abfa:	e773      	b.n	aae4 <__aeabi_fadd+0x110>
    abfc:	2b00      	cmp	r3, #0
    abfe:	d061      	beq.n	acc4 <__aeabi_fadd+0x2f0>
    ac00:	24ff      	movs	r4, #255	; 0xff
    ac02:	2f00      	cmp	r7, #0
    ac04:	d100      	bne.n	ac08 <__aeabi_fadd+0x234>
    ac06:	e720      	b.n	aa4a <__aeabi_fadd+0x76>
    ac08:	2280      	movs	r2, #128	; 0x80
    ac0a:	4641      	mov	r1, r8
    ac0c:	03d2      	lsls	r2, r2, #15
    ac0e:	4211      	tst	r1, r2
    ac10:	d002      	beq.n	ac18 <__aeabi_fadd+0x244>
    ac12:	4216      	tst	r6, r2
    ac14:	d100      	bne.n	ac18 <__aeabi_fadd+0x244>
    ac16:	003b      	movs	r3, r7
    ac18:	24ff      	movs	r4, #255	; 0xff
    ac1a:	e716      	b.n	aa4a <__aeabi_fadd+0x76>
    ac1c:	24ff      	movs	r4, #255	; 0xff
    ac1e:	2300      	movs	r3, #0
    ac20:	e724      	b.n	aa6c <__aeabi_fadd+0x98>
    ac22:	2c00      	cmp	r4, #0
    ac24:	d1ea      	bne.n	abfc <__aeabi_fadd+0x228>
    ac26:	2b00      	cmp	r3, #0
    ac28:	d058      	beq.n	acdc <__aeabi_fadd+0x308>
    ac2a:	2f00      	cmp	r7, #0
    ac2c:	d100      	bne.n	ac30 <__aeabi_fadd+0x25c>
    ac2e:	e70c      	b.n	aa4a <__aeabi_fadd+0x76>
    ac30:	4463      	add	r3, ip
    ac32:	015a      	lsls	r2, r3, #5
    ac34:	d400      	bmi.n	ac38 <__aeabi_fadd+0x264>
    ac36:	e739      	b.n	aaac <__aeabi_fadd+0xd8>
    ac38:	4a2e      	ldr	r2, [pc, #184]	; (acf4 <__aeabi_fadd+0x320>)
    ac3a:	000c      	movs	r4, r1
    ac3c:	4013      	ands	r3, r2
    ac3e:	e704      	b.n	aa4a <__aeabi_fadd+0x76>
    ac40:	2101      	movs	r1, #1
    ac42:	e75c      	b.n	aafe <__aeabi_fadd+0x12a>
    ac44:	2c00      	cmp	r4, #0
    ac46:	d11e      	bne.n	ac86 <__aeabi_fadd+0x2b2>
    ac48:	2b00      	cmp	r3, #0
    ac4a:	d040      	beq.n	acce <__aeabi_fadd+0x2fa>
    ac4c:	43c9      	mvns	r1, r1
    ac4e:	2900      	cmp	r1, #0
    ac50:	d00b      	beq.n	ac6a <__aeabi_fadd+0x296>
    ac52:	28ff      	cmp	r0, #255	; 0xff
    ac54:	d036      	beq.n	acc4 <__aeabi_fadd+0x2f0>
    ac56:	291b      	cmp	r1, #27
    ac58:	dc47      	bgt.n	acea <__aeabi_fadd+0x316>
    ac5a:	001c      	movs	r4, r3
    ac5c:	2620      	movs	r6, #32
    ac5e:	40cc      	lsrs	r4, r1
    ac60:	1a71      	subs	r1, r6, r1
    ac62:	408b      	lsls	r3, r1
    ac64:	1e59      	subs	r1, r3, #1
    ac66:	418b      	sbcs	r3, r1
    ac68:	4323      	orrs	r3, r4
    ac6a:	4463      	add	r3, ip
    ac6c:	0004      	movs	r4, r0
    ac6e:	e747      	b.n	ab00 <__aeabi_fadd+0x12c>
    ac70:	2b00      	cmp	r3, #0
    ac72:	d118      	bne.n	aca6 <__aeabi_fadd+0x2d2>
    ac74:	1e3b      	subs	r3, r7, #0
    ac76:	d02d      	beq.n	acd4 <__aeabi_fadd+0x300>
    ac78:	000d      	movs	r5, r1
    ac7a:	24ff      	movs	r4, #255	; 0xff
    ac7c:	e6e5      	b.n	aa4a <__aeabi_fadd+0x76>
    ac7e:	003b      	movs	r3, r7
    ac80:	0004      	movs	r4, r0
    ac82:	000d      	movs	r5, r1
    ac84:	e6e1      	b.n	aa4a <__aeabi_fadd+0x76>
    ac86:	28ff      	cmp	r0, #255	; 0xff
    ac88:	d01c      	beq.n	acc4 <__aeabi_fadd+0x2f0>
    ac8a:	2480      	movs	r4, #128	; 0x80
    ac8c:	04e4      	lsls	r4, r4, #19
    ac8e:	4249      	negs	r1, r1
    ac90:	4323      	orrs	r3, r4
    ac92:	e7e0      	b.n	ac56 <__aeabi_fadd+0x282>
    ac94:	2f00      	cmp	r7, #0
    ac96:	d100      	bne.n	ac9a <__aeabi_fadd+0x2c6>
    ac98:	e6d7      	b.n	aa4a <__aeabi_fadd+0x76>
    ac9a:	1bde      	subs	r6, r3, r7
    ac9c:	0172      	lsls	r2, r6, #5
    ac9e:	d51f      	bpl.n	ace0 <__aeabi_fadd+0x30c>
    aca0:	1afb      	subs	r3, r7, r3
    aca2:	000d      	movs	r5, r1
    aca4:	e6d1      	b.n	aa4a <__aeabi_fadd+0x76>
    aca6:	24ff      	movs	r4, #255	; 0xff
    aca8:	2f00      	cmp	r7, #0
    acaa:	d100      	bne.n	acae <__aeabi_fadd+0x2da>
    acac:	e6cd      	b.n	aa4a <__aeabi_fadd+0x76>
    acae:	2280      	movs	r2, #128	; 0x80
    acb0:	4640      	mov	r0, r8
    acb2:	03d2      	lsls	r2, r2, #15
    acb4:	4210      	tst	r0, r2
    acb6:	d0af      	beq.n	ac18 <__aeabi_fadd+0x244>
    acb8:	4216      	tst	r6, r2
    acba:	d1ad      	bne.n	ac18 <__aeabi_fadd+0x244>
    acbc:	003b      	movs	r3, r7
    acbe:	000d      	movs	r5, r1
    acc0:	24ff      	movs	r4, #255	; 0xff
    acc2:	e6c2      	b.n	aa4a <__aeabi_fadd+0x76>
    acc4:	4663      	mov	r3, ip
    acc6:	24ff      	movs	r4, #255	; 0xff
    acc8:	e6bf      	b.n	aa4a <__aeabi_fadd+0x76>
    acca:	2301      	movs	r3, #1
    accc:	e77a      	b.n	abc4 <__aeabi_fadd+0x1f0>
    acce:	003b      	movs	r3, r7
    acd0:	0004      	movs	r4, r0
    acd2:	e6ba      	b.n	aa4a <__aeabi_fadd+0x76>
    acd4:	2680      	movs	r6, #128	; 0x80
    acd6:	2200      	movs	r2, #0
    acd8:	03f6      	lsls	r6, r6, #15
    acda:	e6f0      	b.n	aabe <__aeabi_fadd+0xea>
    acdc:	003b      	movs	r3, r7
    acde:	e6b4      	b.n	aa4a <__aeabi_fadd+0x76>
    ace0:	1e33      	subs	r3, r6, #0
    ace2:	d000      	beq.n	ace6 <__aeabi_fadd+0x312>
    ace4:	e6e2      	b.n	aaac <__aeabi_fadd+0xd8>
    ace6:	2200      	movs	r2, #0
    ace8:	e721      	b.n	ab2e <__aeabi_fadd+0x15a>
    acea:	2301      	movs	r3, #1
    acec:	e7bd      	b.n	ac6a <__aeabi_fadd+0x296>
    acee:	46c0      	nop			; (mov r8, r8)
    acf0:	7dffffff 	.word	0x7dffffff
    acf4:	fbffffff 	.word	0xfbffffff

0000acf8 <__eqsf2>:
    acf8:	b570      	push	{r4, r5, r6, lr}
    acfa:	0042      	lsls	r2, r0, #1
    acfc:	0245      	lsls	r5, r0, #9
    acfe:	024e      	lsls	r6, r1, #9
    ad00:	004c      	lsls	r4, r1, #1
    ad02:	0fc3      	lsrs	r3, r0, #31
    ad04:	0a6d      	lsrs	r5, r5, #9
    ad06:	0e12      	lsrs	r2, r2, #24
    ad08:	0a76      	lsrs	r6, r6, #9
    ad0a:	0e24      	lsrs	r4, r4, #24
    ad0c:	0fc9      	lsrs	r1, r1, #31
    ad0e:	2001      	movs	r0, #1
    ad10:	2aff      	cmp	r2, #255	; 0xff
    ad12:	d006      	beq.n	ad22 <__eqsf2+0x2a>
    ad14:	2cff      	cmp	r4, #255	; 0xff
    ad16:	d003      	beq.n	ad20 <__eqsf2+0x28>
    ad18:	42a2      	cmp	r2, r4
    ad1a:	d101      	bne.n	ad20 <__eqsf2+0x28>
    ad1c:	42b5      	cmp	r5, r6
    ad1e:	d006      	beq.n	ad2e <__eqsf2+0x36>
    ad20:	bd70      	pop	{r4, r5, r6, pc}
    ad22:	2d00      	cmp	r5, #0
    ad24:	d1fc      	bne.n	ad20 <__eqsf2+0x28>
    ad26:	2cff      	cmp	r4, #255	; 0xff
    ad28:	d1fa      	bne.n	ad20 <__eqsf2+0x28>
    ad2a:	2e00      	cmp	r6, #0
    ad2c:	d1f8      	bne.n	ad20 <__eqsf2+0x28>
    ad2e:	428b      	cmp	r3, r1
    ad30:	d006      	beq.n	ad40 <__eqsf2+0x48>
    ad32:	2001      	movs	r0, #1
    ad34:	2a00      	cmp	r2, #0
    ad36:	d1f3      	bne.n	ad20 <__eqsf2+0x28>
    ad38:	0028      	movs	r0, r5
    ad3a:	1e45      	subs	r5, r0, #1
    ad3c:	41a8      	sbcs	r0, r5
    ad3e:	e7ef      	b.n	ad20 <__eqsf2+0x28>
    ad40:	2000      	movs	r0, #0
    ad42:	e7ed      	b.n	ad20 <__eqsf2+0x28>

0000ad44 <__gesf2>:
    ad44:	b5f0      	push	{r4, r5, r6, r7, lr}
    ad46:	0042      	lsls	r2, r0, #1
    ad48:	0245      	lsls	r5, r0, #9
    ad4a:	024c      	lsls	r4, r1, #9
    ad4c:	0fc3      	lsrs	r3, r0, #31
    ad4e:	0048      	lsls	r0, r1, #1
    ad50:	0a6d      	lsrs	r5, r5, #9
    ad52:	0e12      	lsrs	r2, r2, #24
    ad54:	0a64      	lsrs	r4, r4, #9
    ad56:	0e00      	lsrs	r0, r0, #24
    ad58:	0fc9      	lsrs	r1, r1, #31
    ad5a:	2aff      	cmp	r2, #255	; 0xff
    ad5c:	d01e      	beq.n	ad9c <__gesf2+0x58>
    ad5e:	28ff      	cmp	r0, #255	; 0xff
    ad60:	d021      	beq.n	ada6 <__gesf2+0x62>
    ad62:	2a00      	cmp	r2, #0
    ad64:	d10a      	bne.n	ad7c <__gesf2+0x38>
    ad66:	426e      	negs	r6, r5
    ad68:	416e      	adcs	r6, r5
    ad6a:	b2f6      	uxtb	r6, r6
    ad6c:	2800      	cmp	r0, #0
    ad6e:	d10f      	bne.n	ad90 <__gesf2+0x4c>
    ad70:	2c00      	cmp	r4, #0
    ad72:	d10d      	bne.n	ad90 <__gesf2+0x4c>
    ad74:	2000      	movs	r0, #0
    ad76:	2d00      	cmp	r5, #0
    ad78:	d009      	beq.n	ad8e <__gesf2+0x4a>
    ad7a:	e005      	b.n	ad88 <__gesf2+0x44>
    ad7c:	2800      	cmp	r0, #0
    ad7e:	d101      	bne.n	ad84 <__gesf2+0x40>
    ad80:	2c00      	cmp	r4, #0
    ad82:	d001      	beq.n	ad88 <__gesf2+0x44>
    ad84:	428b      	cmp	r3, r1
    ad86:	d011      	beq.n	adac <__gesf2+0x68>
    ad88:	2101      	movs	r1, #1
    ad8a:	4258      	negs	r0, r3
    ad8c:	4308      	orrs	r0, r1
    ad8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ad90:	2e00      	cmp	r6, #0
    ad92:	d0f7      	beq.n	ad84 <__gesf2+0x40>
    ad94:	2001      	movs	r0, #1
    ad96:	3901      	subs	r1, #1
    ad98:	4308      	orrs	r0, r1
    ad9a:	e7f8      	b.n	ad8e <__gesf2+0x4a>
    ad9c:	2d00      	cmp	r5, #0
    ad9e:	d0de      	beq.n	ad5e <__gesf2+0x1a>
    ada0:	2002      	movs	r0, #2
    ada2:	4240      	negs	r0, r0
    ada4:	e7f3      	b.n	ad8e <__gesf2+0x4a>
    ada6:	2c00      	cmp	r4, #0
    ada8:	d0db      	beq.n	ad62 <__gesf2+0x1e>
    adaa:	e7f9      	b.n	ada0 <__gesf2+0x5c>
    adac:	4282      	cmp	r2, r0
    adae:	dceb      	bgt.n	ad88 <__gesf2+0x44>
    adb0:	db04      	blt.n	adbc <__gesf2+0x78>
    adb2:	42a5      	cmp	r5, r4
    adb4:	d8e8      	bhi.n	ad88 <__gesf2+0x44>
    adb6:	2000      	movs	r0, #0
    adb8:	42a5      	cmp	r5, r4
    adba:	d2e8      	bcs.n	ad8e <__gesf2+0x4a>
    adbc:	2101      	movs	r1, #1
    adbe:	1e58      	subs	r0, r3, #1
    adc0:	4308      	orrs	r0, r1
    adc2:	e7e4      	b.n	ad8e <__gesf2+0x4a>

0000adc4 <__lesf2>:
    adc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    adc6:	0042      	lsls	r2, r0, #1
    adc8:	024d      	lsls	r5, r1, #9
    adca:	004c      	lsls	r4, r1, #1
    adcc:	0246      	lsls	r6, r0, #9
    adce:	0a76      	lsrs	r6, r6, #9
    add0:	0e12      	lsrs	r2, r2, #24
    add2:	0fc3      	lsrs	r3, r0, #31
    add4:	0a6d      	lsrs	r5, r5, #9
    add6:	0e24      	lsrs	r4, r4, #24
    add8:	0fc9      	lsrs	r1, r1, #31
    adda:	2aff      	cmp	r2, #255	; 0xff
    addc:	d016      	beq.n	ae0c <__lesf2+0x48>
    adde:	2cff      	cmp	r4, #255	; 0xff
    ade0:	d018      	beq.n	ae14 <__lesf2+0x50>
    ade2:	2a00      	cmp	r2, #0
    ade4:	d10a      	bne.n	adfc <__lesf2+0x38>
    ade6:	4270      	negs	r0, r6
    ade8:	4170      	adcs	r0, r6
    adea:	b2c0      	uxtb	r0, r0
    adec:	2c00      	cmp	r4, #0
    adee:	d015      	beq.n	ae1c <__lesf2+0x58>
    adf0:	2800      	cmp	r0, #0
    adf2:	d005      	beq.n	ae00 <__lesf2+0x3c>
    adf4:	2001      	movs	r0, #1
    adf6:	3901      	subs	r1, #1
    adf8:	4308      	orrs	r0, r1
    adfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    adfc:	2c00      	cmp	r4, #0
    adfe:	d013      	beq.n	ae28 <__lesf2+0x64>
    ae00:	4299      	cmp	r1, r3
    ae02:	d014      	beq.n	ae2e <__lesf2+0x6a>
    ae04:	2001      	movs	r0, #1
    ae06:	425b      	negs	r3, r3
    ae08:	4318      	orrs	r0, r3
    ae0a:	e7f6      	b.n	adfa <__lesf2+0x36>
    ae0c:	2002      	movs	r0, #2
    ae0e:	2e00      	cmp	r6, #0
    ae10:	d1f3      	bne.n	adfa <__lesf2+0x36>
    ae12:	e7e4      	b.n	adde <__lesf2+0x1a>
    ae14:	2002      	movs	r0, #2
    ae16:	2d00      	cmp	r5, #0
    ae18:	d1ef      	bne.n	adfa <__lesf2+0x36>
    ae1a:	e7e2      	b.n	ade2 <__lesf2+0x1e>
    ae1c:	2d00      	cmp	r5, #0
    ae1e:	d1e7      	bne.n	adf0 <__lesf2+0x2c>
    ae20:	2000      	movs	r0, #0
    ae22:	2e00      	cmp	r6, #0
    ae24:	d0e9      	beq.n	adfa <__lesf2+0x36>
    ae26:	e7ed      	b.n	ae04 <__lesf2+0x40>
    ae28:	2d00      	cmp	r5, #0
    ae2a:	d1e9      	bne.n	ae00 <__lesf2+0x3c>
    ae2c:	e7ea      	b.n	ae04 <__lesf2+0x40>
    ae2e:	42a2      	cmp	r2, r4
    ae30:	dc06      	bgt.n	ae40 <__lesf2+0x7c>
    ae32:	dbdf      	blt.n	adf4 <__lesf2+0x30>
    ae34:	42ae      	cmp	r6, r5
    ae36:	d803      	bhi.n	ae40 <__lesf2+0x7c>
    ae38:	2000      	movs	r0, #0
    ae3a:	42ae      	cmp	r6, r5
    ae3c:	d3da      	bcc.n	adf4 <__lesf2+0x30>
    ae3e:	e7dc      	b.n	adfa <__lesf2+0x36>
    ae40:	2001      	movs	r0, #1
    ae42:	4249      	negs	r1, r1
    ae44:	4308      	orrs	r0, r1
    ae46:	e7d8      	b.n	adfa <__lesf2+0x36>

0000ae48 <__aeabi_fmul>:
    ae48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ae4a:	4657      	mov	r7, sl
    ae4c:	464e      	mov	r6, r9
    ae4e:	4645      	mov	r5, r8
    ae50:	46de      	mov	lr, fp
    ae52:	b5e0      	push	{r5, r6, r7, lr}
    ae54:	0247      	lsls	r7, r0, #9
    ae56:	0046      	lsls	r6, r0, #1
    ae58:	4688      	mov	r8, r1
    ae5a:	0a7f      	lsrs	r7, r7, #9
    ae5c:	0e36      	lsrs	r6, r6, #24
    ae5e:	0fc4      	lsrs	r4, r0, #31
    ae60:	2e00      	cmp	r6, #0
    ae62:	d047      	beq.n	aef4 <__aeabi_fmul+0xac>
    ae64:	2eff      	cmp	r6, #255	; 0xff
    ae66:	d024      	beq.n	aeb2 <__aeabi_fmul+0x6a>
    ae68:	00fb      	lsls	r3, r7, #3
    ae6a:	2780      	movs	r7, #128	; 0x80
    ae6c:	04ff      	lsls	r7, r7, #19
    ae6e:	431f      	orrs	r7, r3
    ae70:	2300      	movs	r3, #0
    ae72:	4699      	mov	r9, r3
    ae74:	469a      	mov	sl, r3
    ae76:	3e7f      	subs	r6, #127	; 0x7f
    ae78:	4643      	mov	r3, r8
    ae7a:	025d      	lsls	r5, r3, #9
    ae7c:	0058      	lsls	r0, r3, #1
    ae7e:	0fdb      	lsrs	r3, r3, #31
    ae80:	0a6d      	lsrs	r5, r5, #9
    ae82:	0e00      	lsrs	r0, r0, #24
    ae84:	4698      	mov	r8, r3
    ae86:	d043      	beq.n	af10 <__aeabi_fmul+0xc8>
    ae88:	28ff      	cmp	r0, #255	; 0xff
    ae8a:	d03b      	beq.n	af04 <__aeabi_fmul+0xbc>
    ae8c:	00eb      	lsls	r3, r5, #3
    ae8e:	2580      	movs	r5, #128	; 0x80
    ae90:	2200      	movs	r2, #0
    ae92:	04ed      	lsls	r5, r5, #19
    ae94:	431d      	orrs	r5, r3
    ae96:	387f      	subs	r0, #127	; 0x7f
    ae98:	1836      	adds	r6, r6, r0
    ae9a:	1c73      	adds	r3, r6, #1
    ae9c:	4641      	mov	r1, r8
    ae9e:	469b      	mov	fp, r3
    aea0:	464b      	mov	r3, r9
    aea2:	4061      	eors	r1, r4
    aea4:	4313      	orrs	r3, r2
    aea6:	2b0f      	cmp	r3, #15
    aea8:	d864      	bhi.n	af74 <__aeabi_fmul+0x12c>
    aeaa:	4875      	ldr	r0, [pc, #468]	; (b080 <__aeabi_fmul+0x238>)
    aeac:	009b      	lsls	r3, r3, #2
    aeae:	58c3      	ldr	r3, [r0, r3]
    aeb0:	469f      	mov	pc, r3
    aeb2:	2f00      	cmp	r7, #0
    aeb4:	d142      	bne.n	af3c <__aeabi_fmul+0xf4>
    aeb6:	2308      	movs	r3, #8
    aeb8:	4699      	mov	r9, r3
    aeba:	3b06      	subs	r3, #6
    aebc:	26ff      	movs	r6, #255	; 0xff
    aebe:	469a      	mov	sl, r3
    aec0:	e7da      	b.n	ae78 <__aeabi_fmul+0x30>
    aec2:	4641      	mov	r1, r8
    aec4:	2a02      	cmp	r2, #2
    aec6:	d028      	beq.n	af1a <__aeabi_fmul+0xd2>
    aec8:	2a03      	cmp	r2, #3
    aeca:	d100      	bne.n	aece <__aeabi_fmul+0x86>
    aecc:	e0ce      	b.n	b06c <__aeabi_fmul+0x224>
    aece:	2a01      	cmp	r2, #1
    aed0:	d000      	beq.n	aed4 <__aeabi_fmul+0x8c>
    aed2:	e0ac      	b.n	b02e <__aeabi_fmul+0x1e6>
    aed4:	4011      	ands	r1, r2
    aed6:	2000      	movs	r0, #0
    aed8:	2200      	movs	r2, #0
    aeda:	b2cc      	uxtb	r4, r1
    aedc:	0240      	lsls	r0, r0, #9
    aede:	05d2      	lsls	r2, r2, #23
    aee0:	0a40      	lsrs	r0, r0, #9
    aee2:	07e4      	lsls	r4, r4, #31
    aee4:	4310      	orrs	r0, r2
    aee6:	4320      	orrs	r0, r4
    aee8:	bc3c      	pop	{r2, r3, r4, r5}
    aeea:	4690      	mov	r8, r2
    aeec:	4699      	mov	r9, r3
    aeee:	46a2      	mov	sl, r4
    aef0:	46ab      	mov	fp, r5
    aef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    aef4:	2f00      	cmp	r7, #0
    aef6:	d115      	bne.n	af24 <__aeabi_fmul+0xdc>
    aef8:	2304      	movs	r3, #4
    aefa:	4699      	mov	r9, r3
    aefc:	3b03      	subs	r3, #3
    aefe:	2600      	movs	r6, #0
    af00:	469a      	mov	sl, r3
    af02:	e7b9      	b.n	ae78 <__aeabi_fmul+0x30>
    af04:	20ff      	movs	r0, #255	; 0xff
    af06:	2202      	movs	r2, #2
    af08:	2d00      	cmp	r5, #0
    af0a:	d0c5      	beq.n	ae98 <__aeabi_fmul+0x50>
    af0c:	2203      	movs	r2, #3
    af0e:	e7c3      	b.n	ae98 <__aeabi_fmul+0x50>
    af10:	2d00      	cmp	r5, #0
    af12:	d119      	bne.n	af48 <__aeabi_fmul+0x100>
    af14:	2000      	movs	r0, #0
    af16:	2201      	movs	r2, #1
    af18:	e7be      	b.n	ae98 <__aeabi_fmul+0x50>
    af1a:	2401      	movs	r4, #1
    af1c:	22ff      	movs	r2, #255	; 0xff
    af1e:	400c      	ands	r4, r1
    af20:	2000      	movs	r0, #0
    af22:	e7db      	b.n	aedc <__aeabi_fmul+0x94>
    af24:	0038      	movs	r0, r7
    af26:	f002 f895 	bl	d054 <__clzsi2>
    af2a:	2676      	movs	r6, #118	; 0x76
    af2c:	1f43      	subs	r3, r0, #5
    af2e:	409f      	lsls	r7, r3
    af30:	2300      	movs	r3, #0
    af32:	4276      	negs	r6, r6
    af34:	1a36      	subs	r6, r6, r0
    af36:	4699      	mov	r9, r3
    af38:	469a      	mov	sl, r3
    af3a:	e79d      	b.n	ae78 <__aeabi_fmul+0x30>
    af3c:	230c      	movs	r3, #12
    af3e:	4699      	mov	r9, r3
    af40:	3b09      	subs	r3, #9
    af42:	26ff      	movs	r6, #255	; 0xff
    af44:	469a      	mov	sl, r3
    af46:	e797      	b.n	ae78 <__aeabi_fmul+0x30>
    af48:	0028      	movs	r0, r5
    af4a:	f002 f883 	bl	d054 <__clzsi2>
    af4e:	1f43      	subs	r3, r0, #5
    af50:	409d      	lsls	r5, r3
    af52:	2376      	movs	r3, #118	; 0x76
    af54:	425b      	negs	r3, r3
    af56:	1a18      	subs	r0, r3, r0
    af58:	2200      	movs	r2, #0
    af5a:	e79d      	b.n	ae98 <__aeabi_fmul+0x50>
    af5c:	2080      	movs	r0, #128	; 0x80
    af5e:	2400      	movs	r4, #0
    af60:	03c0      	lsls	r0, r0, #15
    af62:	22ff      	movs	r2, #255	; 0xff
    af64:	e7ba      	b.n	aedc <__aeabi_fmul+0x94>
    af66:	003d      	movs	r5, r7
    af68:	4652      	mov	r2, sl
    af6a:	e7ab      	b.n	aec4 <__aeabi_fmul+0x7c>
    af6c:	003d      	movs	r5, r7
    af6e:	0021      	movs	r1, r4
    af70:	4652      	mov	r2, sl
    af72:	e7a7      	b.n	aec4 <__aeabi_fmul+0x7c>
    af74:	0c3b      	lsrs	r3, r7, #16
    af76:	469c      	mov	ip, r3
    af78:	042a      	lsls	r2, r5, #16
    af7a:	0c12      	lsrs	r2, r2, #16
    af7c:	0c2b      	lsrs	r3, r5, #16
    af7e:	0014      	movs	r4, r2
    af80:	4660      	mov	r0, ip
    af82:	4665      	mov	r5, ip
    af84:	043f      	lsls	r7, r7, #16
    af86:	0c3f      	lsrs	r7, r7, #16
    af88:	437c      	muls	r4, r7
    af8a:	4342      	muls	r2, r0
    af8c:	435d      	muls	r5, r3
    af8e:	437b      	muls	r3, r7
    af90:	0c27      	lsrs	r7, r4, #16
    af92:	189b      	adds	r3, r3, r2
    af94:	18ff      	adds	r7, r7, r3
    af96:	42ba      	cmp	r2, r7
    af98:	d903      	bls.n	afa2 <__aeabi_fmul+0x15a>
    af9a:	2380      	movs	r3, #128	; 0x80
    af9c:	025b      	lsls	r3, r3, #9
    af9e:	469c      	mov	ip, r3
    afa0:	4465      	add	r5, ip
    afa2:	0424      	lsls	r4, r4, #16
    afa4:	043a      	lsls	r2, r7, #16
    afa6:	0c24      	lsrs	r4, r4, #16
    afa8:	1912      	adds	r2, r2, r4
    afaa:	0193      	lsls	r3, r2, #6
    afac:	1e5c      	subs	r4, r3, #1
    afae:	41a3      	sbcs	r3, r4
    afb0:	0c3f      	lsrs	r7, r7, #16
    afb2:	0e92      	lsrs	r2, r2, #26
    afb4:	197d      	adds	r5, r7, r5
    afb6:	431a      	orrs	r2, r3
    afb8:	01ad      	lsls	r5, r5, #6
    afba:	4315      	orrs	r5, r2
    afbc:	012b      	lsls	r3, r5, #4
    afbe:	d504      	bpl.n	afca <__aeabi_fmul+0x182>
    afc0:	2301      	movs	r3, #1
    afc2:	465e      	mov	r6, fp
    afc4:	086a      	lsrs	r2, r5, #1
    afc6:	401d      	ands	r5, r3
    afc8:	4315      	orrs	r5, r2
    afca:	0032      	movs	r2, r6
    afcc:	327f      	adds	r2, #127	; 0x7f
    afce:	2a00      	cmp	r2, #0
    afd0:	dd25      	ble.n	b01e <__aeabi_fmul+0x1d6>
    afd2:	076b      	lsls	r3, r5, #29
    afd4:	d004      	beq.n	afe0 <__aeabi_fmul+0x198>
    afd6:	230f      	movs	r3, #15
    afd8:	402b      	ands	r3, r5
    afda:	2b04      	cmp	r3, #4
    afdc:	d000      	beq.n	afe0 <__aeabi_fmul+0x198>
    afde:	3504      	adds	r5, #4
    afe0:	012b      	lsls	r3, r5, #4
    afe2:	d503      	bpl.n	afec <__aeabi_fmul+0x1a4>
    afe4:	0032      	movs	r2, r6
    afe6:	4b27      	ldr	r3, [pc, #156]	; (b084 <__aeabi_fmul+0x23c>)
    afe8:	3280      	adds	r2, #128	; 0x80
    afea:	401d      	ands	r5, r3
    afec:	2afe      	cmp	r2, #254	; 0xfe
    afee:	dc94      	bgt.n	af1a <__aeabi_fmul+0xd2>
    aff0:	2401      	movs	r4, #1
    aff2:	01a8      	lsls	r0, r5, #6
    aff4:	0a40      	lsrs	r0, r0, #9
    aff6:	b2d2      	uxtb	r2, r2
    aff8:	400c      	ands	r4, r1
    affa:	e76f      	b.n	aedc <__aeabi_fmul+0x94>
    affc:	2080      	movs	r0, #128	; 0x80
    affe:	03c0      	lsls	r0, r0, #15
    b000:	4207      	tst	r7, r0
    b002:	d007      	beq.n	b014 <__aeabi_fmul+0x1cc>
    b004:	4205      	tst	r5, r0
    b006:	d105      	bne.n	b014 <__aeabi_fmul+0x1cc>
    b008:	4328      	orrs	r0, r5
    b00a:	0240      	lsls	r0, r0, #9
    b00c:	0a40      	lsrs	r0, r0, #9
    b00e:	4644      	mov	r4, r8
    b010:	22ff      	movs	r2, #255	; 0xff
    b012:	e763      	b.n	aedc <__aeabi_fmul+0x94>
    b014:	4338      	orrs	r0, r7
    b016:	0240      	lsls	r0, r0, #9
    b018:	0a40      	lsrs	r0, r0, #9
    b01a:	22ff      	movs	r2, #255	; 0xff
    b01c:	e75e      	b.n	aedc <__aeabi_fmul+0x94>
    b01e:	2401      	movs	r4, #1
    b020:	1aa3      	subs	r3, r4, r2
    b022:	2b1b      	cmp	r3, #27
    b024:	dd05      	ble.n	b032 <__aeabi_fmul+0x1ea>
    b026:	400c      	ands	r4, r1
    b028:	2200      	movs	r2, #0
    b02a:	2000      	movs	r0, #0
    b02c:	e756      	b.n	aedc <__aeabi_fmul+0x94>
    b02e:	465e      	mov	r6, fp
    b030:	e7cb      	b.n	afca <__aeabi_fmul+0x182>
    b032:	002a      	movs	r2, r5
    b034:	2020      	movs	r0, #32
    b036:	40da      	lsrs	r2, r3
    b038:	1ac3      	subs	r3, r0, r3
    b03a:	409d      	lsls	r5, r3
    b03c:	002b      	movs	r3, r5
    b03e:	1e5d      	subs	r5, r3, #1
    b040:	41ab      	sbcs	r3, r5
    b042:	4313      	orrs	r3, r2
    b044:	075a      	lsls	r2, r3, #29
    b046:	d004      	beq.n	b052 <__aeabi_fmul+0x20a>
    b048:	220f      	movs	r2, #15
    b04a:	401a      	ands	r2, r3
    b04c:	2a04      	cmp	r2, #4
    b04e:	d000      	beq.n	b052 <__aeabi_fmul+0x20a>
    b050:	3304      	adds	r3, #4
    b052:	015a      	lsls	r2, r3, #5
    b054:	d504      	bpl.n	b060 <__aeabi_fmul+0x218>
    b056:	2401      	movs	r4, #1
    b058:	2201      	movs	r2, #1
    b05a:	400c      	ands	r4, r1
    b05c:	2000      	movs	r0, #0
    b05e:	e73d      	b.n	aedc <__aeabi_fmul+0x94>
    b060:	2401      	movs	r4, #1
    b062:	019b      	lsls	r3, r3, #6
    b064:	0a58      	lsrs	r0, r3, #9
    b066:	400c      	ands	r4, r1
    b068:	2200      	movs	r2, #0
    b06a:	e737      	b.n	aedc <__aeabi_fmul+0x94>
    b06c:	2080      	movs	r0, #128	; 0x80
    b06e:	2401      	movs	r4, #1
    b070:	03c0      	lsls	r0, r0, #15
    b072:	4328      	orrs	r0, r5
    b074:	0240      	lsls	r0, r0, #9
    b076:	0a40      	lsrs	r0, r0, #9
    b078:	400c      	ands	r4, r1
    b07a:	22ff      	movs	r2, #255	; 0xff
    b07c:	e72e      	b.n	aedc <__aeabi_fmul+0x94>
    b07e:	46c0      	nop			; (mov r8, r8)
    b080:	00012320 	.word	0x00012320
    b084:	f7ffffff 	.word	0xf7ffffff

0000b088 <__aeabi_fsub>:
    b088:	b5f0      	push	{r4, r5, r6, r7, lr}
    b08a:	464f      	mov	r7, r9
    b08c:	46d6      	mov	lr, sl
    b08e:	4646      	mov	r6, r8
    b090:	0044      	lsls	r4, r0, #1
    b092:	b5c0      	push	{r6, r7, lr}
    b094:	0fc2      	lsrs	r2, r0, #31
    b096:	0247      	lsls	r7, r0, #9
    b098:	0248      	lsls	r0, r1, #9
    b09a:	0a40      	lsrs	r0, r0, #9
    b09c:	4684      	mov	ip, r0
    b09e:	4666      	mov	r6, ip
    b0a0:	0a7b      	lsrs	r3, r7, #9
    b0a2:	0048      	lsls	r0, r1, #1
    b0a4:	0fc9      	lsrs	r1, r1, #31
    b0a6:	469a      	mov	sl, r3
    b0a8:	0e24      	lsrs	r4, r4, #24
    b0aa:	0015      	movs	r5, r2
    b0ac:	00db      	lsls	r3, r3, #3
    b0ae:	0e00      	lsrs	r0, r0, #24
    b0b0:	4689      	mov	r9, r1
    b0b2:	00f6      	lsls	r6, r6, #3
    b0b4:	28ff      	cmp	r0, #255	; 0xff
    b0b6:	d100      	bne.n	b0ba <__aeabi_fsub+0x32>
    b0b8:	e08f      	b.n	b1da <__aeabi_fsub+0x152>
    b0ba:	2101      	movs	r1, #1
    b0bc:	464f      	mov	r7, r9
    b0be:	404f      	eors	r7, r1
    b0c0:	0039      	movs	r1, r7
    b0c2:	4291      	cmp	r1, r2
    b0c4:	d066      	beq.n	b194 <__aeabi_fsub+0x10c>
    b0c6:	1a22      	subs	r2, r4, r0
    b0c8:	2a00      	cmp	r2, #0
    b0ca:	dc00      	bgt.n	b0ce <__aeabi_fsub+0x46>
    b0cc:	e09d      	b.n	b20a <__aeabi_fsub+0x182>
    b0ce:	2800      	cmp	r0, #0
    b0d0:	d13d      	bne.n	b14e <__aeabi_fsub+0xc6>
    b0d2:	2e00      	cmp	r6, #0
    b0d4:	d100      	bne.n	b0d8 <__aeabi_fsub+0x50>
    b0d6:	e08b      	b.n	b1f0 <__aeabi_fsub+0x168>
    b0d8:	1e51      	subs	r1, r2, #1
    b0da:	2900      	cmp	r1, #0
    b0dc:	d000      	beq.n	b0e0 <__aeabi_fsub+0x58>
    b0de:	e0b5      	b.n	b24c <__aeabi_fsub+0x1c4>
    b0e0:	2401      	movs	r4, #1
    b0e2:	1b9b      	subs	r3, r3, r6
    b0e4:	015a      	lsls	r2, r3, #5
    b0e6:	d544      	bpl.n	b172 <__aeabi_fsub+0xea>
    b0e8:	019b      	lsls	r3, r3, #6
    b0ea:	099f      	lsrs	r7, r3, #6
    b0ec:	0038      	movs	r0, r7
    b0ee:	f001 ffb1 	bl	d054 <__clzsi2>
    b0f2:	3805      	subs	r0, #5
    b0f4:	4087      	lsls	r7, r0
    b0f6:	4284      	cmp	r4, r0
    b0f8:	dd00      	ble.n	b0fc <__aeabi_fsub+0x74>
    b0fa:	e096      	b.n	b22a <__aeabi_fsub+0x1a2>
    b0fc:	1b04      	subs	r4, r0, r4
    b0fe:	003a      	movs	r2, r7
    b100:	2020      	movs	r0, #32
    b102:	3401      	adds	r4, #1
    b104:	40e2      	lsrs	r2, r4
    b106:	1b04      	subs	r4, r0, r4
    b108:	40a7      	lsls	r7, r4
    b10a:	003b      	movs	r3, r7
    b10c:	1e5f      	subs	r7, r3, #1
    b10e:	41bb      	sbcs	r3, r7
    b110:	2400      	movs	r4, #0
    b112:	4313      	orrs	r3, r2
    b114:	075a      	lsls	r2, r3, #29
    b116:	d004      	beq.n	b122 <__aeabi_fsub+0x9a>
    b118:	220f      	movs	r2, #15
    b11a:	401a      	ands	r2, r3
    b11c:	2a04      	cmp	r2, #4
    b11e:	d000      	beq.n	b122 <__aeabi_fsub+0x9a>
    b120:	3304      	adds	r3, #4
    b122:	015a      	lsls	r2, r3, #5
    b124:	d527      	bpl.n	b176 <__aeabi_fsub+0xee>
    b126:	3401      	adds	r4, #1
    b128:	2cff      	cmp	r4, #255	; 0xff
    b12a:	d100      	bne.n	b12e <__aeabi_fsub+0xa6>
    b12c:	e079      	b.n	b222 <__aeabi_fsub+0x19a>
    b12e:	2201      	movs	r2, #1
    b130:	019b      	lsls	r3, r3, #6
    b132:	0a5b      	lsrs	r3, r3, #9
    b134:	b2e4      	uxtb	r4, r4
    b136:	402a      	ands	r2, r5
    b138:	025b      	lsls	r3, r3, #9
    b13a:	05e4      	lsls	r4, r4, #23
    b13c:	0a58      	lsrs	r0, r3, #9
    b13e:	07d2      	lsls	r2, r2, #31
    b140:	4320      	orrs	r0, r4
    b142:	4310      	orrs	r0, r2
    b144:	bc1c      	pop	{r2, r3, r4}
    b146:	4690      	mov	r8, r2
    b148:	4699      	mov	r9, r3
    b14a:	46a2      	mov	sl, r4
    b14c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b14e:	2cff      	cmp	r4, #255	; 0xff
    b150:	d0e0      	beq.n	b114 <__aeabi_fsub+0x8c>
    b152:	2180      	movs	r1, #128	; 0x80
    b154:	04c9      	lsls	r1, r1, #19
    b156:	430e      	orrs	r6, r1
    b158:	2a1b      	cmp	r2, #27
    b15a:	dc7b      	bgt.n	b254 <__aeabi_fsub+0x1cc>
    b15c:	0031      	movs	r1, r6
    b15e:	2020      	movs	r0, #32
    b160:	40d1      	lsrs	r1, r2
    b162:	1a82      	subs	r2, r0, r2
    b164:	4096      	lsls	r6, r2
    b166:	1e72      	subs	r2, r6, #1
    b168:	4196      	sbcs	r6, r2
    b16a:	430e      	orrs	r6, r1
    b16c:	1b9b      	subs	r3, r3, r6
    b16e:	015a      	lsls	r2, r3, #5
    b170:	d4ba      	bmi.n	b0e8 <__aeabi_fsub+0x60>
    b172:	075a      	lsls	r2, r3, #29
    b174:	d1d0      	bne.n	b118 <__aeabi_fsub+0x90>
    b176:	2201      	movs	r2, #1
    b178:	08df      	lsrs	r7, r3, #3
    b17a:	402a      	ands	r2, r5
    b17c:	2cff      	cmp	r4, #255	; 0xff
    b17e:	d133      	bne.n	b1e8 <__aeabi_fsub+0x160>
    b180:	2f00      	cmp	r7, #0
    b182:	d100      	bne.n	b186 <__aeabi_fsub+0xfe>
    b184:	e0a8      	b.n	b2d8 <__aeabi_fsub+0x250>
    b186:	2380      	movs	r3, #128	; 0x80
    b188:	03db      	lsls	r3, r3, #15
    b18a:	433b      	orrs	r3, r7
    b18c:	025b      	lsls	r3, r3, #9
    b18e:	0a5b      	lsrs	r3, r3, #9
    b190:	24ff      	movs	r4, #255	; 0xff
    b192:	e7d1      	b.n	b138 <__aeabi_fsub+0xb0>
    b194:	1a21      	subs	r1, r4, r0
    b196:	2900      	cmp	r1, #0
    b198:	dd4c      	ble.n	b234 <__aeabi_fsub+0x1ac>
    b19a:	2800      	cmp	r0, #0
    b19c:	d02a      	beq.n	b1f4 <__aeabi_fsub+0x16c>
    b19e:	2cff      	cmp	r4, #255	; 0xff
    b1a0:	d0b8      	beq.n	b114 <__aeabi_fsub+0x8c>
    b1a2:	2080      	movs	r0, #128	; 0x80
    b1a4:	04c0      	lsls	r0, r0, #19
    b1a6:	4306      	orrs	r6, r0
    b1a8:	291b      	cmp	r1, #27
    b1aa:	dd00      	ble.n	b1ae <__aeabi_fsub+0x126>
    b1ac:	e0af      	b.n	b30e <__aeabi_fsub+0x286>
    b1ae:	0030      	movs	r0, r6
    b1b0:	2720      	movs	r7, #32
    b1b2:	40c8      	lsrs	r0, r1
    b1b4:	1a79      	subs	r1, r7, r1
    b1b6:	408e      	lsls	r6, r1
    b1b8:	1e71      	subs	r1, r6, #1
    b1ba:	418e      	sbcs	r6, r1
    b1bc:	4306      	orrs	r6, r0
    b1be:	199b      	adds	r3, r3, r6
    b1c0:	0159      	lsls	r1, r3, #5
    b1c2:	d5d6      	bpl.n	b172 <__aeabi_fsub+0xea>
    b1c4:	3401      	adds	r4, #1
    b1c6:	2cff      	cmp	r4, #255	; 0xff
    b1c8:	d100      	bne.n	b1cc <__aeabi_fsub+0x144>
    b1ca:	e085      	b.n	b2d8 <__aeabi_fsub+0x250>
    b1cc:	2201      	movs	r2, #1
    b1ce:	497a      	ldr	r1, [pc, #488]	; (b3b8 <__aeabi_fsub+0x330>)
    b1d0:	401a      	ands	r2, r3
    b1d2:	085b      	lsrs	r3, r3, #1
    b1d4:	400b      	ands	r3, r1
    b1d6:	4313      	orrs	r3, r2
    b1d8:	e79c      	b.n	b114 <__aeabi_fsub+0x8c>
    b1da:	2e00      	cmp	r6, #0
    b1dc:	d000      	beq.n	b1e0 <__aeabi_fsub+0x158>
    b1de:	e770      	b.n	b0c2 <__aeabi_fsub+0x3a>
    b1e0:	e76b      	b.n	b0ba <__aeabi_fsub+0x32>
    b1e2:	1e3b      	subs	r3, r7, #0
    b1e4:	d1c5      	bne.n	b172 <__aeabi_fsub+0xea>
    b1e6:	2200      	movs	r2, #0
    b1e8:	027b      	lsls	r3, r7, #9
    b1ea:	0a5b      	lsrs	r3, r3, #9
    b1ec:	b2e4      	uxtb	r4, r4
    b1ee:	e7a3      	b.n	b138 <__aeabi_fsub+0xb0>
    b1f0:	0014      	movs	r4, r2
    b1f2:	e78f      	b.n	b114 <__aeabi_fsub+0x8c>
    b1f4:	2e00      	cmp	r6, #0
    b1f6:	d04d      	beq.n	b294 <__aeabi_fsub+0x20c>
    b1f8:	1e48      	subs	r0, r1, #1
    b1fa:	2800      	cmp	r0, #0
    b1fc:	d157      	bne.n	b2ae <__aeabi_fsub+0x226>
    b1fe:	199b      	adds	r3, r3, r6
    b200:	2401      	movs	r4, #1
    b202:	015a      	lsls	r2, r3, #5
    b204:	d5b5      	bpl.n	b172 <__aeabi_fsub+0xea>
    b206:	2402      	movs	r4, #2
    b208:	e7e0      	b.n	b1cc <__aeabi_fsub+0x144>
    b20a:	2a00      	cmp	r2, #0
    b20c:	d125      	bne.n	b25a <__aeabi_fsub+0x1d2>
    b20e:	1c62      	adds	r2, r4, #1
    b210:	b2d2      	uxtb	r2, r2
    b212:	2a01      	cmp	r2, #1
    b214:	dd72      	ble.n	b2fc <__aeabi_fsub+0x274>
    b216:	1b9f      	subs	r7, r3, r6
    b218:	017a      	lsls	r2, r7, #5
    b21a:	d535      	bpl.n	b288 <__aeabi_fsub+0x200>
    b21c:	1af7      	subs	r7, r6, r3
    b21e:	000d      	movs	r5, r1
    b220:	e764      	b.n	b0ec <__aeabi_fsub+0x64>
    b222:	2201      	movs	r2, #1
    b224:	2300      	movs	r3, #0
    b226:	402a      	ands	r2, r5
    b228:	e786      	b.n	b138 <__aeabi_fsub+0xb0>
    b22a:	003b      	movs	r3, r7
    b22c:	4a63      	ldr	r2, [pc, #396]	; (b3bc <__aeabi_fsub+0x334>)
    b22e:	1a24      	subs	r4, r4, r0
    b230:	4013      	ands	r3, r2
    b232:	e76f      	b.n	b114 <__aeabi_fsub+0x8c>
    b234:	2900      	cmp	r1, #0
    b236:	d16c      	bne.n	b312 <__aeabi_fsub+0x28a>
    b238:	1c61      	adds	r1, r4, #1
    b23a:	b2c8      	uxtb	r0, r1
    b23c:	2801      	cmp	r0, #1
    b23e:	dd4e      	ble.n	b2de <__aeabi_fsub+0x256>
    b240:	29ff      	cmp	r1, #255	; 0xff
    b242:	d049      	beq.n	b2d8 <__aeabi_fsub+0x250>
    b244:	199b      	adds	r3, r3, r6
    b246:	085b      	lsrs	r3, r3, #1
    b248:	000c      	movs	r4, r1
    b24a:	e763      	b.n	b114 <__aeabi_fsub+0x8c>
    b24c:	2aff      	cmp	r2, #255	; 0xff
    b24e:	d041      	beq.n	b2d4 <__aeabi_fsub+0x24c>
    b250:	000a      	movs	r2, r1
    b252:	e781      	b.n	b158 <__aeabi_fsub+0xd0>
    b254:	2601      	movs	r6, #1
    b256:	1b9b      	subs	r3, r3, r6
    b258:	e789      	b.n	b16e <__aeabi_fsub+0xe6>
    b25a:	2c00      	cmp	r4, #0
    b25c:	d01c      	beq.n	b298 <__aeabi_fsub+0x210>
    b25e:	28ff      	cmp	r0, #255	; 0xff
    b260:	d021      	beq.n	b2a6 <__aeabi_fsub+0x21e>
    b262:	2480      	movs	r4, #128	; 0x80
    b264:	04e4      	lsls	r4, r4, #19
    b266:	4252      	negs	r2, r2
    b268:	4323      	orrs	r3, r4
    b26a:	2a1b      	cmp	r2, #27
    b26c:	dd00      	ble.n	b270 <__aeabi_fsub+0x1e8>
    b26e:	e096      	b.n	b39e <__aeabi_fsub+0x316>
    b270:	001c      	movs	r4, r3
    b272:	2520      	movs	r5, #32
    b274:	40d4      	lsrs	r4, r2
    b276:	1aaa      	subs	r2, r5, r2
    b278:	4093      	lsls	r3, r2
    b27a:	1e5a      	subs	r2, r3, #1
    b27c:	4193      	sbcs	r3, r2
    b27e:	4323      	orrs	r3, r4
    b280:	1af3      	subs	r3, r6, r3
    b282:	0004      	movs	r4, r0
    b284:	000d      	movs	r5, r1
    b286:	e72d      	b.n	b0e4 <__aeabi_fsub+0x5c>
    b288:	2f00      	cmp	r7, #0
    b28a:	d000      	beq.n	b28e <__aeabi_fsub+0x206>
    b28c:	e72e      	b.n	b0ec <__aeabi_fsub+0x64>
    b28e:	2200      	movs	r2, #0
    b290:	2400      	movs	r4, #0
    b292:	e7a9      	b.n	b1e8 <__aeabi_fsub+0x160>
    b294:	000c      	movs	r4, r1
    b296:	e73d      	b.n	b114 <__aeabi_fsub+0x8c>
    b298:	2b00      	cmp	r3, #0
    b29a:	d058      	beq.n	b34e <__aeabi_fsub+0x2c6>
    b29c:	43d2      	mvns	r2, r2
    b29e:	2a00      	cmp	r2, #0
    b2a0:	d0ee      	beq.n	b280 <__aeabi_fsub+0x1f8>
    b2a2:	28ff      	cmp	r0, #255	; 0xff
    b2a4:	d1e1      	bne.n	b26a <__aeabi_fsub+0x1e2>
    b2a6:	0033      	movs	r3, r6
    b2a8:	24ff      	movs	r4, #255	; 0xff
    b2aa:	000d      	movs	r5, r1
    b2ac:	e732      	b.n	b114 <__aeabi_fsub+0x8c>
    b2ae:	29ff      	cmp	r1, #255	; 0xff
    b2b0:	d010      	beq.n	b2d4 <__aeabi_fsub+0x24c>
    b2b2:	0001      	movs	r1, r0
    b2b4:	e778      	b.n	b1a8 <__aeabi_fsub+0x120>
    b2b6:	2b00      	cmp	r3, #0
    b2b8:	d06e      	beq.n	b398 <__aeabi_fsub+0x310>
    b2ba:	24ff      	movs	r4, #255	; 0xff
    b2bc:	2e00      	cmp	r6, #0
    b2be:	d100      	bne.n	b2c2 <__aeabi_fsub+0x23a>
    b2c0:	e728      	b.n	b114 <__aeabi_fsub+0x8c>
    b2c2:	2280      	movs	r2, #128	; 0x80
    b2c4:	4651      	mov	r1, sl
    b2c6:	03d2      	lsls	r2, r2, #15
    b2c8:	4211      	tst	r1, r2
    b2ca:	d003      	beq.n	b2d4 <__aeabi_fsub+0x24c>
    b2cc:	4661      	mov	r1, ip
    b2ce:	4211      	tst	r1, r2
    b2d0:	d100      	bne.n	b2d4 <__aeabi_fsub+0x24c>
    b2d2:	0033      	movs	r3, r6
    b2d4:	24ff      	movs	r4, #255	; 0xff
    b2d6:	e71d      	b.n	b114 <__aeabi_fsub+0x8c>
    b2d8:	24ff      	movs	r4, #255	; 0xff
    b2da:	2300      	movs	r3, #0
    b2dc:	e72c      	b.n	b138 <__aeabi_fsub+0xb0>
    b2de:	2c00      	cmp	r4, #0
    b2e0:	d1e9      	bne.n	b2b6 <__aeabi_fsub+0x22e>
    b2e2:	2b00      	cmp	r3, #0
    b2e4:	d063      	beq.n	b3ae <__aeabi_fsub+0x326>
    b2e6:	2e00      	cmp	r6, #0
    b2e8:	d100      	bne.n	b2ec <__aeabi_fsub+0x264>
    b2ea:	e713      	b.n	b114 <__aeabi_fsub+0x8c>
    b2ec:	199b      	adds	r3, r3, r6
    b2ee:	015a      	lsls	r2, r3, #5
    b2f0:	d400      	bmi.n	b2f4 <__aeabi_fsub+0x26c>
    b2f2:	e73e      	b.n	b172 <__aeabi_fsub+0xea>
    b2f4:	4a31      	ldr	r2, [pc, #196]	; (b3bc <__aeabi_fsub+0x334>)
    b2f6:	000c      	movs	r4, r1
    b2f8:	4013      	ands	r3, r2
    b2fa:	e70b      	b.n	b114 <__aeabi_fsub+0x8c>
    b2fc:	2c00      	cmp	r4, #0
    b2fe:	d11e      	bne.n	b33e <__aeabi_fsub+0x2b6>
    b300:	2b00      	cmp	r3, #0
    b302:	d12f      	bne.n	b364 <__aeabi_fsub+0x2dc>
    b304:	2e00      	cmp	r6, #0
    b306:	d04f      	beq.n	b3a8 <__aeabi_fsub+0x320>
    b308:	0033      	movs	r3, r6
    b30a:	000d      	movs	r5, r1
    b30c:	e702      	b.n	b114 <__aeabi_fsub+0x8c>
    b30e:	2601      	movs	r6, #1
    b310:	e755      	b.n	b1be <__aeabi_fsub+0x136>
    b312:	2c00      	cmp	r4, #0
    b314:	d11f      	bne.n	b356 <__aeabi_fsub+0x2ce>
    b316:	2b00      	cmp	r3, #0
    b318:	d043      	beq.n	b3a2 <__aeabi_fsub+0x31a>
    b31a:	43c9      	mvns	r1, r1
    b31c:	2900      	cmp	r1, #0
    b31e:	d00b      	beq.n	b338 <__aeabi_fsub+0x2b0>
    b320:	28ff      	cmp	r0, #255	; 0xff
    b322:	d039      	beq.n	b398 <__aeabi_fsub+0x310>
    b324:	291b      	cmp	r1, #27
    b326:	dc44      	bgt.n	b3b2 <__aeabi_fsub+0x32a>
    b328:	001c      	movs	r4, r3
    b32a:	2720      	movs	r7, #32
    b32c:	40cc      	lsrs	r4, r1
    b32e:	1a79      	subs	r1, r7, r1
    b330:	408b      	lsls	r3, r1
    b332:	1e59      	subs	r1, r3, #1
    b334:	418b      	sbcs	r3, r1
    b336:	4323      	orrs	r3, r4
    b338:	199b      	adds	r3, r3, r6
    b33a:	0004      	movs	r4, r0
    b33c:	e740      	b.n	b1c0 <__aeabi_fsub+0x138>
    b33e:	2b00      	cmp	r3, #0
    b340:	d11a      	bne.n	b378 <__aeabi_fsub+0x2f0>
    b342:	2e00      	cmp	r6, #0
    b344:	d124      	bne.n	b390 <__aeabi_fsub+0x308>
    b346:	2780      	movs	r7, #128	; 0x80
    b348:	2200      	movs	r2, #0
    b34a:	03ff      	lsls	r7, r7, #15
    b34c:	e71b      	b.n	b186 <__aeabi_fsub+0xfe>
    b34e:	0033      	movs	r3, r6
    b350:	0004      	movs	r4, r0
    b352:	000d      	movs	r5, r1
    b354:	e6de      	b.n	b114 <__aeabi_fsub+0x8c>
    b356:	28ff      	cmp	r0, #255	; 0xff
    b358:	d01e      	beq.n	b398 <__aeabi_fsub+0x310>
    b35a:	2480      	movs	r4, #128	; 0x80
    b35c:	04e4      	lsls	r4, r4, #19
    b35e:	4249      	negs	r1, r1
    b360:	4323      	orrs	r3, r4
    b362:	e7df      	b.n	b324 <__aeabi_fsub+0x29c>
    b364:	2e00      	cmp	r6, #0
    b366:	d100      	bne.n	b36a <__aeabi_fsub+0x2e2>
    b368:	e6d4      	b.n	b114 <__aeabi_fsub+0x8c>
    b36a:	1b9f      	subs	r7, r3, r6
    b36c:	017a      	lsls	r2, r7, #5
    b36e:	d400      	bmi.n	b372 <__aeabi_fsub+0x2ea>
    b370:	e737      	b.n	b1e2 <__aeabi_fsub+0x15a>
    b372:	1af3      	subs	r3, r6, r3
    b374:	000d      	movs	r5, r1
    b376:	e6cd      	b.n	b114 <__aeabi_fsub+0x8c>
    b378:	24ff      	movs	r4, #255	; 0xff
    b37a:	2e00      	cmp	r6, #0
    b37c:	d100      	bne.n	b380 <__aeabi_fsub+0x2f8>
    b37e:	e6c9      	b.n	b114 <__aeabi_fsub+0x8c>
    b380:	2280      	movs	r2, #128	; 0x80
    b382:	4650      	mov	r0, sl
    b384:	03d2      	lsls	r2, r2, #15
    b386:	4210      	tst	r0, r2
    b388:	d0a4      	beq.n	b2d4 <__aeabi_fsub+0x24c>
    b38a:	4660      	mov	r0, ip
    b38c:	4210      	tst	r0, r2
    b38e:	d1a1      	bne.n	b2d4 <__aeabi_fsub+0x24c>
    b390:	0033      	movs	r3, r6
    b392:	000d      	movs	r5, r1
    b394:	24ff      	movs	r4, #255	; 0xff
    b396:	e6bd      	b.n	b114 <__aeabi_fsub+0x8c>
    b398:	0033      	movs	r3, r6
    b39a:	24ff      	movs	r4, #255	; 0xff
    b39c:	e6ba      	b.n	b114 <__aeabi_fsub+0x8c>
    b39e:	2301      	movs	r3, #1
    b3a0:	e76e      	b.n	b280 <__aeabi_fsub+0x1f8>
    b3a2:	0033      	movs	r3, r6
    b3a4:	0004      	movs	r4, r0
    b3a6:	e6b5      	b.n	b114 <__aeabi_fsub+0x8c>
    b3a8:	2700      	movs	r7, #0
    b3aa:	2200      	movs	r2, #0
    b3ac:	e71c      	b.n	b1e8 <__aeabi_fsub+0x160>
    b3ae:	0033      	movs	r3, r6
    b3b0:	e6b0      	b.n	b114 <__aeabi_fsub+0x8c>
    b3b2:	2301      	movs	r3, #1
    b3b4:	e7c0      	b.n	b338 <__aeabi_fsub+0x2b0>
    b3b6:	46c0      	nop			; (mov r8, r8)
    b3b8:	7dffffff 	.word	0x7dffffff
    b3bc:	fbffffff 	.word	0xfbffffff

0000b3c0 <__aeabi_i2f>:
    b3c0:	b570      	push	{r4, r5, r6, lr}
    b3c2:	2800      	cmp	r0, #0
    b3c4:	d030      	beq.n	b428 <__aeabi_i2f+0x68>
    b3c6:	17c3      	asrs	r3, r0, #31
    b3c8:	18c4      	adds	r4, r0, r3
    b3ca:	405c      	eors	r4, r3
    b3cc:	0fc5      	lsrs	r5, r0, #31
    b3ce:	0020      	movs	r0, r4
    b3d0:	f001 fe40 	bl	d054 <__clzsi2>
    b3d4:	239e      	movs	r3, #158	; 0x9e
    b3d6:	1a1b      	subs	r3, r3, r0
    b3d8:	2b96      	cmp	r3, #150	; 0x96
    b3da:	dc0d      	bgt.n	b3f8 <__aeabi_i2f+0x38>
    b3dc:	2296      	movs	r2, #150	; 0x96
    b3de:	1ad2      	subs	r2, r2, r3
    b3e0:	4094      	lsls	r4, r2
    b3e2:	002a      	movs	r2, r5
    b3e4:	0264      	lsls	r4, r4, #9
    b3e6:	0a64      	lsrs	r4, r4, #9
    b3e8:	b2db      	uxtb	r3, r3
    b3ea:	0264      	lsls	r4, r4, #9
    b3ec:	05db      	lsls	r3, r3, #23
    b3ee:	0a60      	lsrs	r0, r4, #9
    b3f0:	07d2      	lsls	r2, r2, #31
    b3f2:	4318      	orrs	r0, r3
    b3f4:	4310      	orrs	r0, r2
    b3f6:	bd70      	pop	{r4, r5, r6, pc}
    b3f8:	2b99      	cmp	r3, #153	; 0x99
    b3fa:	dc19      	bgt.n	b430 <__aeabi_i2f+0x70>
    b3fc:	2299      	movs	r2, #153	; 0x99
    b3fe:	1ad2      	subs	r2, r2, r3
    b400:	2a00      	cmp	r2, #0
    b402:	dd29      	ble.n	b458 <__aeabi_i2f+0x98>
    b404:	4094      	lsls	r4, r2
    b406:	0022      	movs	r2, r4
    b408:	4c14      	ldr	r4, [pc, #80]	; (b45c <__aeabi_i2f+0x9c>)
    b40a:	4014      	ands	r4, r2
    b40c:	0751      	lsls	r1, r2, #29
    b40e:	d004      	beq.n	b41a <__aeabi_i2f+0x5a>
    b410:	210f      	movs	r1, #15
    b412:	400a      	ands	r2, r1
    b414:	2a04      	cmp	r2, #4
    b416:	d000      	beq.n	b41a <__aeabi_i2f+0x5a>
    b418:	3404      	adds	r4, #4
    b41a:	0162      	lsls	r2, r4, #5
    b41c:	d413      	bmi.n	b446 <__aeabi_i2f+0x86>
    b41e:	01a4      	lsls	r4, r4, #6
    b420:	0a64      	lsrs	r4, r4, #9
    b422:	b2db      	uxtb	r3, r3
    b424:	002a      	movs	r2, r5
    b426:	e7e0      	b.n	b3ea <__aeabi_i2f+0x2a>
    b428:	2200      	movs	r2, #0
    b42a:	2300      	movs	r3, #0
    b42c:	2400      	movs	r4, #0
    b42e:	e7dc      	b.n	b3ea <__aeabi_i2f+0x2a>
    b430:	2205      	movs	r2, #5
    b432:	0021      	movs	r1, r4
    b434:	1a12      	subs	r2, r2, r0
    b436:	40d1      	lsrs	r1, r2
    b438:	22b9      	movs	r2, #185	; 0xb9
    b43a:	1ad2      	subs	r2, r2, r3
    b43c:	4094      	lsls	r4, r2
    b43e:	1e62      	subs	r2, r4, #1
    b440:	4194      	sbcs	r4, r2
    b442:	430c      	orrs	r4, r1
    b444:	e7da      	b.n	b3fc <__aeabi_i2f+0x3c>
    b446:	4b05      	ldr	r3, [pc, #20]	; (b45c <__aeabi_i2f+0x9c>)
    b448:	002a      	movs	r2, r5
    b44a:	401c      	ands	r4, r3
    b44c:	239f      	movs	r3, #159	; 0x9f
    b44e:	01a4      	lsls	r4, r4, #6
    b450:	1a1b      	subs	r3, r3, r0
    b452:	0a64      	lsrs	r4, r4, #9
    b454:	b2db      	uxtb	r3, r3
    b456:	e7c8      	b.n	b3ea <__aeabi_i2f+0x2a>
    b458:	0022      	movs	r2, r4
    b45a:	e7d5      	b.n	b408 <__aeabi_i2f+0x48>
    b45c:	fbffffff 	.word	0xfbffffff

0000b460 <__aeabi_dadd>:
    b460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b462:	4645      	mov	r5, r8
    b464:	46de      	mov	lr, fp
    b466:	4657      	mov	r7, sl
    b468:	464e      	mov	r6, r9
    b46a:	030c      	lsls	r4, r1, #12
    b46c:	b5e0      	push	{r5, r6, r7, lr}
    b46e:	004e      	lsls	r6, r1, #1
    b470:	0fc9      	lsrs	r1, r1, #31
    b472:	4688      	mov	r8, r1
    b474:	000d      	movs	r5, r1
    b476:	0a61      	lsrs	r1, r4, #9
    b478:	0f44      	lsrs	r4, r0, #29
    b47a:	430c      	orrs	r4, r1
    b47c:	00c7      	lsls	r7, r0, #3
    b47e:	0319      	lsls	r1, r3, #12
    b480:	0058      	lsls	r0, r3, #1
    b482:	0fdb      	lsrs	r3, r3, #31
    b484:	469b      	mov	fp, r3
    b486:	0a4b      	lsrs	r3, r1, #9
    b488:	0f51      	lsrs	r1, r2, #29
    b48a:	430b      	orrs	r3, r1
    b48c:	0d76      	lsrs	r6, r6, #21
    b48e:	0d40      	lsrs	r0, r0, #21
    b490:	0019      	movs	r1, r3
    b492:	00d2      	lsls	r2, r2, #3
    b494:	45d8      	cmp	r8, fp
    b496:	d100      	bne.n	b49a <__aeabi_dadd+0x3a>
    b498:	e0ae      	b.n	b5f8 <__aeabi_dadd+0x198>
    b49a:	1a35      	subs	r5, r6, r0
    b49c:	2d00      	cmp	r5, #0
    b49e:	dc00      	bgt.n	b4a2 <__aeabi_dadd+0x42>
    b4a0:	e0f6      	b.n	b690 <__aeabi_dadd+0x230>
    b4a2:	2800      	cmp	r0, #0
    b4a4:	d10f      	bne.n	b4c6 <__aeabi_dadd+0x66>
    b4a6:	4313      	orrs	r3, r2
    b4a8:	d100      	bne.n	b4ac <__aeabi_dadd+0x4c>
    b4aa:	e0db      	b.n	b664 <__aeabi_dadd+0x204>
    b4ac:	1e6b      	subs	r3, r5, #1
    b4ae:	2b00      	cmp	r3, #0
    b4b0:	d000      	beq.n	b4b4 <__aeabi_dadd+0x54>
    b4b2:	e137      	b.n	b724 <__aeabi_dadd+0x2c4>
    b4b4:	1aba      	subs	r2, r7, r2
    b4b6:	4297      	cmp	r7, r2
    b4b8:	41bf      	sbcs	r7, r7
    b4ba:	1a64      	subs	r4, r4, r1
    b4bc:	427f      	negs	r7, r7
    b4be:	1be4      	subs	r4, r4, r7
    b4c0:	2601      	movs	r6, #1
    b4c2:	0017      	movs	r7, r2
    b4c4:	e024      	b.n	b510 <__aeabi_dadd+0xb0>
    b4c6:	4bc6      	ldr	r3, [pc, #792]	; (b7e0 <__aeabi_dadd+0x380>)
    b4c8:	429e      	cmp	r6, r3
    b4ca:	d04d      	beq.n	b568 <__aeabi_dadd+0x108>
    b4cc:	2380      	movs	r3, #128	; 0x80
    b4ce:	041b      	lsls	r3, r3, #16
    b4d0:	4319      	orrs	r1, r3
    b4d2:	2d38      	cmp	r5, #56	; 0x38
    b4d4:	dd00      	ble.n	b4d8 <__aeabi_dadd+0x78>
    b4d6:	e107      	b.n	b6e8 <__aeabi_dadd+0x288>
    b4d8:	2d1f      	cmp	r5, #31
    b4da:	dd00      	ble.n	b4de <__aeabi_dadd+0x7e>
    b4dc:	e138      	b.n	b750 <__aeabi_dadd+0x2f0>
    b4de:	2020      	movs	r0, #32
    b4e0:	1b43      	subs	r3, r0, r5
    b4e2:	469a      	mov	sl, r3
    b4e4:	000b      	movs	r3, r1
    b4e6:	4650      	mov	r0, sl
    b4e8:	4083      	lsls	r3, r0
    b4ea:	4699      	mov	r9, r3
    b4ec:	0013      	movs	r3, r2
    b4ee:	4648      	mov	r0, r9
    b4f0:	40eb      	lsrs	r3, r5
    b4f2:	4318      	orrs	r0, r3
    b4f4:	0003      	movs	r3, r0
    b4f6:	4650      	mov	r0, sl
    b4f8:	4082      	lsls	r2, r0
    b4fa:	1e50      	subs	r0, r2, #1
    b4fc:	4182      	sbcs	r2, r0
    b4fe:	40e9      	lsrs	r1, r5
    b500:	431a      	orrs	r2, r3
    b502:	1aba      	subs	r2, r7, r2
    b504:	1a61      	subs	r1, r4, r1
    b506:	4297      	cmp	r7, r2
    b508:	41a4      	sbcs	r4, r4
    b50a:	0017      	movs	r7, r2
    b50c:	4264      	negs	r4, r4
    b50e:	1b0c      	subs	r4, r1, r4
    b510:	0223      	lsls	r3, r4, #8
    b512:	d562      	bpl.n	b5da <__aeabi_dadd+0x17a>
    b514:	0264      	lsls	r4, r4, #9
    b516:	0a65      	lsrs	r5, r4, #9
    b518:	2d00      	cmp	r5, #0
    b51a:	d100      	bne.n	b51e <__aeabi_dadd+0xbe>
    b51c:	e0df      	b.n	b6de <__aeabi_dadd+0x27e>
    b51e:	0028      	movs	r0, r5
    b520:	f001 fd98 	bl	d054 <__clzsi2>
    b524:	0003      	movs	r3, r0
    b526:	3b08      	subs	r3, #8
    b528:	2b1f      	cmp	r3, #31
    b52a:	dd00      	ble.n	b52e <__aeabi_dadd+0xce>
    b52c:	e0d2      	b.n	b6d4 <__aeabi_dadd+0x274>
    b52e:	2220      	movs	r2, #32
    b530:	003c      	movs	r4, r7
    b532:	1ad2      	subs	r2, r2, r3
    b534:	409d      	lsls	r5, r3
    b536:	40d4      	lsrs	r4, r2
    b538:	409f      	lsls	r7, r3
    b53a:	4325      	orrs	r5, r4
    b53c:	429e      	cmp	r6, r3
    b53e:	dd00      	ble.n	b542 <__aeabi_dadd+0xe2>
    b540:	e0c4      	b.n	b6cc <__aeabi_dadd+0x26c>
    b542:	1b9e      	subs	r6, r3, r6
    b544:	1c73      	adds	r3, r6, #1
    b546:	2b1f      	cmp	r3, #31
    b548:	dd00      	ble.n	b54c <__aeabi_dadd+0xec>
    b54a:	e0f1      	b.n	b730 <__aeabi_dadd+0x2d0>
    b54c:	2220      	movs	r2, #32
    b54e:	0038      	movs	r0, r7
    b550:	0029      	movs	r1, r5
    b552:	1ad2      	subs	r2, r2, r3
    b554:	40d8      	lsrs	r0, r3
    b556:	4091      	lsls	r1, r2
    b558:	4097      	lsls	r7, r2
    b55a:	002c      	movs	r4, r5
    b55c:	4301      	orrs	r1, r0
    b55e:	1e78      	subs	r0, r7, #1
    b560:	4187      	sbcs	r7, r0
    b562:	40dc      	lsrs	r4, r3
    b564:	2600      	movs	r6, #0
    b566:	430f      	orrs	r7, r1
    b568:	077b      	lsls	r3, r7, #29
    b56a:	d009      	beq.n	b580 <__aeabi_dadd+0x120>
    b56c:	230f      	movs	r3, #15
    b56e:	403b      	ands	r3, r7
    b570:	2b04      	cmp	r3, #4
    b572:	d005      	beq.n	b580 <__aeabi_dadd+0x120>
    b574:	1d3b      	adds	r3, r7, #4
    b576:	42bb      	cmp	r3, r7
    b578:	41bf      	sbcs	r7, r7
    b57a:	427f      	negs	r7, r7
    b57c:	19e4      	adds	r4, r4, r7
    b57e:	001f      	movs	r7, r3
    b580:	0223      	lsls	r3, r4, #8
    b582:	d52c      	bpl.n	b5de <__aeabi_dadd+0x17e>
    b584:	4b96      	ldr	r3, [pc, #600]	; (b7e0 <__aeabi_dadd+0x380>)
    b586:	3601      	adds	r6, #1
    b588:	429e      	cmp	r6, r3
    b58a:	d100      	bne.n	b58e <__aeabi_dadd+0x12e>
    b58c:	e09a      	b.n	b6c4 <__aeabi_dadd+0x264>
    b58e:	4645      	mov	r5, r8
    b590:	4b94      	ldr	r3, [pc, #592]	; (b7e4 <__aeabi_dadd+0x384>)
    b592:	08ff      	lsrs	r7, r7, #3
    b594:	401c      	ands	r4, r3
    b596:	0760      	lsls	r0, r4, #29
    b598:	0576      	lsls	r6, r6, #21
    b59a:	0264      	lsls	r4, r4, #9
    b59c:	4307      	orrs	r7, r0
    b59e:	0b24      	lsrs	r4, r4, #12
    b5a0:	0d76      	lsrs	r6, r6, #21
    b5a2:	2100      	movs	r1, #0
    b5a4:	0324      	lsls	r4, r4, #12
    b5a6:	0b23      	lsrs	r3, r4, #12
    b5a8:	0d0c      	lsrs	r4, r1, #20
    b5aa:	4a8f      	ldr	r2, [pc, #572]	; (b7e8 <__aeabi_dadd+0x388>)
    b5ac:	0524      	lsls	r4, r4, #20
    b5ae:	431c      	orrs	r4, r3
    b5b0:	4014      	ands	r4, r2
    b5b2:	0533      	lsls	r3, r6, #20
    b5b4:	4323      	orrs	r3, r4
    b5b6:	005b      	lsls	r3, r3, #1
    b5b8:	07ed      	lsls	r5, r5, #31
    b5ba:	085b      	lsrs	r3, r3, #1
    b5bc:	432b      	orrs	r3, r5
    b5be:	0038      	movs	r0, r7
    b5c0:	0019      	movs	r1, r3
    b5c2:	bc3c      	pop	{r2, r3, r4, r5}
    b5c4:	4690      	mov	r8, r2
    b5c6:	4699      	mov	r9, r3
    b5c8:	46a2      	mov	sl, r4
    b5ca:	46ab      	mov	fp, r5
    b5cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b5ce:	4664      	mov	r4, ip
    b5d0:	4304      	orrs	r4, r0
    b5d2:	d100      	bne.n	b5d6 <__aeabi_dadd+0x176>
    b5d4:	e211      	b.n	b9fa <__aeabi_dadd+0x59a>
    b5d6:	0004      	movs	r4, r0
    b5d8:	4667      	mov	r7, ip
    b5da:	077b      	lsls	r3, r7, #29
    b5dc:	d1c6      	bne.n	b56c <__aeabi_dadd+0x10c>
    b5de:	4645      	mov	r5, r8
    b5e0:	0760      	lsls	r0, r4, #29
    b5e2:	08ff      	lsrs	r7, r7, #3
    b5e4:	4307      	orrs	r7, r0
    b5e6:	08e4      	lsrs	r4, r4, #3
    b5e8:	4b7d      	ldr	r3, [pc, #500]	; (b7e0 <__aeabi_dadd+0x380>)
    b5ea:	429e      	cmp	r6, r3
    b5ec:	d030      	beq.n	b650 <__aeabi_dadd+0x1f0>
    b5ee:	0324      	lsls	r4, r4, #12
    b5f0:	0576      	lsls	r6, r6, #21
    b5f2:	0b24      	lsrs	r4, r4, #12
    b5f4:	0d76      	lsrs	r6, r6, #21
    b5f6:	e7d4      	b.n	b5a2 <__aeabi_dadd+0x142>
    b5f8:	1a33      	subs	r3, r6, r0
    b5fa:	469a      	mov	sl, r3
    b5fc:	2b00      	cmp	r3, #0
    b5fe:	dd78      	ble.n	b6f2 <__aeabi_dadd+0x292>
    b600:	2800      	cmp	r0, #0
    b602:	d031      	beq.n	b668 <__aeabi_dadd+0x208>
    b604:	4876      	ldr	r0, [pc, #472]	; (b7e0 <__aeabi_dadd+0x380>)
    b606:	4286      	cmp	r6, r0
    b608:	d0ae      	beq.n	b568 <__aeabi_dadd+0x108>
    b60a:	2080      	movs	r0, #128	; 0x80
    b60c:	0400      	lsls	r0, r0, #16
    b60e:	4301      	orrs	r1, r0
    b610:	4653      	mov	r3, sl
    b612:	2b38      	cmp	r3, #56	; 0x38
    b614:	dc00      	bgt.n	b618 <__aeabi_dadd+0x1b8>
    b616:	e0e9      	b.n	b7ec <__aeabi_dadd+0x38c>
    b618:	430a      	orrs	r2, r1
    b61a:	1e51      	subs	r1, r2, #1
    b61c:	418a      	sbcs	r2, r1
    b61e:	2100      	movs	r1, #0
    b620:	19d2      	adds	r2, r2, r7
    b622:	42ba      	cmp	r2, r7
    b624:	41bf      	sbcs	r7, r7
    b626:	1909      	adds	r1, r1, r4
    b628:	427c      	negs	r4, r7
    b62a:	0017      	movs	r7, r2
    b62c:	190c      	adds	r4, r1, r4
    b62e:	0223      	lsls	r3, r4, #8
    b630:	d5d3      	bpl.n	b5da <__aeabi_dadd+0x17a>
    b632:	4b6b      	ldr	r3, [pc, #428]	; (b7e0 <__aeabi_dadd+0x380>)
    b634:	3601      	adds	r6, #1
    b636:	429e      	cmp	r6, r3
    b638:	d100      	bne.n	b63c <__aeabi_dadd+0x1dc>
    b63a:	e13a      	b.n	b8b2 <__aeabi_dadd+0x452>
    b63c:	2001      	movs	r0, #1
    b63e:	4b69      	ldr	r3, [pc, #420]	; (b7e4 <__aeabi_dadd+0x384>)
    b640:	401c      	ands	r4, r3
    b642:	087b      	lsrs	r3, r7, #1
    b644:	4007      	ands	r7, r0
    b646:	431f      	orrs	r7, r3
    b648:	07e0      	lsls	r0, r4, #31
    b64a:	4307      	orrs	r7, r0
    b64c:	0864      	lsrs	r4, r4, #1
    b64e:	e78b      	b.n	b568 <__aeabi_dadd+0x108>
    b650:	0023      	movs	r3, r4
    b652:	433b      	orrs	r3, r7
    b654:	d100      	bne.n	b658 <__aeabi_dadd+0x1f8>
    b656:	e1cb      	b.n	b9f0 <__aeabi_dadd+0x590>
    b658:	2280      	movs	r2, #128	; 0x80
    b65a:	0312      	lsls	r2, r2, #12
    b65c:	4314      	orrs	r4, r2
    b65e:	0324      	lsls	r4, r4, #12
    b660:	0b24      	lsrs	r4, r4, #12
    b662:	e79e      	b.n	b5a2 <__aeabi_dadd+0x142>
    b664:	002e      	movs	r6, r5
    b666:	e77f      	b.n	b568 <__aeabi_dadd+0x108>
    b668:	0008      	movs	r0, r1
    b66a:	4310      	orrs	r0, r2
    b66c:	d100      	bne.n	b670 <__aeabi_dadd+0x210>
    b66e:	e0b4      	b.n	b7da <__aeabi_dadd+0x37a>
    b670:	1e58      	subs	r0, r3, #1
    b672:	2800      	cmp	r0, #0
    b674:	d000      	beq.n	b678 <__aeabi_dadd+0x218>
    b676:	e0de      	b.n	b836 <__aeabi_dadd+0x3d6>
    b678:	18ba      	adds	r2, r7, r2
    b67a:	42ba      	cmp	r2, r7
    b67c:	419b      	sbcs	r3, r3
    b67e:	1864      	adds	r4, r4, r1
    b680:	425b      	negs	r3, r3
    b682:	18e4      	adds	r4, r4, r3
    b684:	0017      	movs	r7, r2
    b686:	2601      	movs	r6, #1
    b688:	0223      	lsls	r3, r4, #8
    b68a:	d5a6      	bpl.n	b5da <__aeabi_dadd+0x17a>
    b68c:	2602      	movs	r6, #2
    b68e:	e7d5      	b.n	b63c <__aeabi_dadd+0x1dc>
    b690:	2d00      	cmp	r5, #0
    b692:	d16e      	bne.n	b772 <__aeabi_dadd+0x312>
    b694:	1c70      	adds	r0, r6, #1
    b696:	0540      	lsls	r0, r0, #21
    b698:	0d40      	lsrs	r0, r0, #21
    b69a:	2801      	cmp	r0, #1
    b69c:	dc00      	bgt.n	b6a0 <__aeabi_dadd+0x240>
    b69e:	e0f9      	b.n	b894 <__aeabi_dadd+0x434>
    b6a0:	1ab8      	subs	r0, r7, r2
    b6a2:	4684      	mov	ip, r0
    b6a4:	4287      	cmp	r7, r0
    b6a6:	4180      	sbcs	r0, r0
    b6a8:	1ae5      	subs	r5, r4, r3
    b6aa:	4240      	negs	r0, r0
    b6ac:	1a2d      	subs	r5, r5, r0
    b6ae:	0228      	lsls	r0, r5, #8
    b6b0:	d400      	bmi.n	b6b4 <__aeabi_dadd+0x254>
    b6b2:	e089      	b.n	b7c8 <__aeabi_dadd+0x368>
    b6b4:	1bd7      	subs	r7, r2, r7
    b6b6:	42ba      	cmp	r2, r7
    b6b8:	4192      	sbcs	r2, r2
    b6ba:	1b1c      	subs	r4, r3, r4
    b6bc:	4252      	negs	r2, r2
    b6be:	1aa5      	subs	r5, r4, r2
    b6c0:	46d8      	mov	r8, fp
    b6c2:	e729      	b.n	b518 <__aeabi_dadd+0xb8>
    b6c4:	4645      	mov	r5, r8
    b6c6:	2400      	movs	r4, #0
    b6c8:	2700      	movs	r7, #0
    b6ca:	e76a      	b.n	b5a2 <__aeabi_dadd+0x142>
    b6cc:	4c45      	ldr	r4, [pc, #276]	; (b7e4 <__aeabi_dadd+0x384>)
    b6ce:	1af6      	subs	r6, r6, r3
    b6d0:	402c      	ands	r4, r5
    b6d2:	e749      	b.n	b568 <__aeabi_dadd+0x108>
    b6d4:	003d      	movs	r5, r7
    b6d6:	3828      	subs	r0, #40	; 0x28
    b6d8:	4085      	lsls	r5, r0
    b6da:	2700      	movs	r7, #0
    b6dc:	e72e      	b.n	b53c <__aeabi_dadd+0xdc>
    b6de:	0038      	movs	r0, r7
    b6e0:	f001 fcb8 	bl	d054 <__clzsi2>
    b6e4:	3020      	adds	r0, #32
    b6e6:	e71d      	b.n	b524 <__aeabi_dadd+0xc4>
    b6e8:	430a      	orrs	r2, r1
    b6ea:	1e51      	subs	r1, r2, #1
    b6ec:	418a      	sbcs	r2, r1
    b6ee:	2100      	movs	r1, #0
    b6f0:	e707      	b.n	b502 <__aeabi_dadd+0xa2>
    b6f2:	2b00      	cmp	r3, #0
    b6f4:	d000      	beq.n	b6f8 <__aeabi_dadd+0x298>
    b6f6:	e0f3      	b.n	b8e0 <__aeabi_dadd+0x480>
    b6f8:	1c70      	adds	r0, r6, #1
    b6fa:	0543      	lsls	r3, r0, #21
    b6fc:	0d5b      	lsrs	r3, r3, #21
    b6fe:	2b01      	cmp	r3, #1
    b700:	dc00      	bgt.n	b704 <__aeabi_dadd+0x2a4>
    b702:	e0ad      	b.n	b860 <__aeabi_dadd+0x400>
    b704:	4b36      	ldr	r3, [pc, #216]	; (b7e0 <__aeabi_dadd+0x380>)
    b706:	4298      	cmp	r0, r3
    b708:	d100      	bne.n	b70c <__aeabi_dadd+0x2ac>
    b70a:	e0d1      	b.n	b8b0 <__aeabi_dadd+0x450>
    b70c:	18ba      	adds	r2, r7, r2
    b70e:	42ba      	cmp	r2, r7
    b710:	41bf      	sbcs	r7, r7
    b712:	1864      	adds	r4, r4, r1
    b714:	427f      	negs	r7, r7
    b716:	19e4      	adds	r4, r4, r7
    b718:	07e7      	lsls	r7, r4, #31
    b71a:	0852      	lsrs	r2, r2, #1
    b71c:	4317      	orrs	r7, r2
    b71e:	0864      	lsrs	r4, r4, #1
    b720:	0006      	movs	r6, r0
    b722:	e721      	b.n	b568 <__aeabi_dadd+0x108>
    b724:	482e      	ldr	r0, [pc, #184]	; (b7e0 <__aeabi_dadd+0x380>)
    b726:	4285      	cmp	r5, r0
    b728:	d100      	bne.n	b72c <__aeabi_dadd+0x2cc>
    b72a:	e093      	b.n	b854 <__aeabi_dadd+0x3f4>
    b72c:	001d      	movs	r5, r3
    b72e:	e6d0      	b.n	b4d2 <__aeabi_dadd+0x72>
    b730:	0029      	movs	r1, r5
    b732:	3e1f      	subs	r6, #31
    b734:	40f1      	lsrs	r1, r6
    b736:	2b20      	cmp	r3, #32
    b738:	d100      	bne.n	b73c <__aeabi_dadd+0x2dc>
    b73a:	e08d      	b.n	b858 <__aeabi_dadd+0x3f8>
    b73c:	2240      	movs	r2, #64	; 0x40
    b73e:	1ad3      	subs	r3, r2, r3
    b740:	409d      	lsls	r5, r3
    b742:	432f      	orrs	r7, r5
    b744:	1e7d      	subs	r5, r7, #1
    b746:	41af      	sbcs	r7, r5
    b748:	2400      	movs	r4, #0
    b74a:	430f      	orrs	r7, r1
    b74c:	2600      	movs	r6, #0
    b74e:	e744      	b.n	b5da <__aeabi_dadd+0x17a>
    b750:	002b      	movs	r3, r5
    b752:	0008      	movs	r0, r1
    b754:	3b20      	subs	r3, #32
    b756:	40d8      	lsrs	r0, r3
    b758:	0003      	movs	r3, r0
    b75a:	2d20      	cmp	r5, #32
    b75c:	d100      	bne.n	b760 <__aeabi_dadd+0x300>
    b75e:	e07d      	b.n	b85c <__aeabi_dadd+0x3fc>
    b760:	2040      	movs	r0, #64	; 0x40
    b762:	1b45      	subs	r5, r0, r5
    b764:	40a9      	lsls	r1, r5
    b766:	430a      	orrs	r2, r1
    b768:	1e51      	subs	r1, r2, #1
    b76a:	418a      	sbcs	r2, r1
    b76c:	2100      	movs	r1, #0
    b76e:	431a      	orrs	r2, r3
    b770:	e6c7      	b.n	b502 <__aeabi_dadd+0xa2>
    b772:	2e00      	cmp	r6, #0
    b774:	d050      	beq.n	b818 <__aeabi_dadd+0x3b8>
    b776:	4e1a      	ldr	r6, [pc, #104]	; (b7e0 <__aeabi_dadd+0x380>)
    b778:	42b0      	cmp	r0, r6
    b77a:	d057      	beq.n	b82c <__aeabi_dadd+0x3cc>
    b77c:	2680      	movs	r6, #128	; 0x80
    b77e:	426b      	negs	r3, r5
    b780:	4699      	mov	r9, r3
    b782:	0436      	lsls	r6, r6, #16
    b784:	4334      	orrs	r4, r6
    b786:	464b      	mov	r3, r9
    b788:	2b38      	cmp	r3, #56	; 0x38
    b78a:	dd00      	ble.n	b78e <__aeabi_dadd+0x32e>
    b78c:	e0d6      	b.n	b93c <__aeabi_dadd+0x4dc>
    b78e:	2b1f      	cmp	r3, #31
    b790:	dd00      	ble.n	b794 <__aeabi_dadd+0x334>
    b792:	e135      	b.n	ba00 <__aeabi_dadd+0x5a0>
    b794:	2620      	movs	r6, #32
    b796:	1af5      	subs	r5, r6, r3
    b798:	0026      	movs	r6, r4
    b79a:	40ae      	lsls	r6, r5
    b79c:	46b2      	mov	sl, r6
    b79e:	003e      	movs	r6, r7
    b7a0:	40de      	lsrs	r6, r3
    b7a2:	46ac      	mov	ip, r5
    b7a4:	0035      	movs	r5, r6
    b7a6:	4656      	mov	r6, sl
    b7a8:	432e      	orrs	r6, r5
    b7aa:	4665      	mov	r5, ip
    b7ac:	40af      	lsls	r7, r5
    b7ae:	1e7d      	subs	r5, r7, #1
    b7b0:	41af      	sbcs	r7, r5
    b7b2:	40dc      	lsrs	r4, r3
    b7b4:	4337      	orrs	r7, r6
    b7b6:	1bd7      	subs	r7, r2, r7
    b7b8:	42ba      	cmp	r2, r7
    b7ba:	4192      	sbcs	r2, r2
    b7bc:	1b0c      	subs	r4, r1, r4
    b7be:	4252      	negs	r2, r2
    b7c0:	1aa4      	subs	r4, r4, r2
    b7c2:	0006      	movs	r6, r0
    b7c4:	46d8      	mov	r8, fp
    b7c6:	e6a3      	b.n	b510 <__aeabi_dadd+0xb0>
    b7c8:	4664      	mov	r4, ip
    b7ca:	4667      	mov	r7, ip
    b7cc:	432c      	orrs	r4, r5
    b7ce:	d000      	beq.n	b7d2 <__aeabi_dadd+0x372>
    b7d0:	e6a2      	b.n	b518 <__aeabi_dadd+0xb8>
    b7d2:	2500      	movs	r5, #0
    b7d4:	2600      	movs	r6, #0
    b7d6:	2700      	movs	r7, #0
    b7d8:	e706      	b.n	b5e8 <__aeabi_dadd+0x188>
    b7da:	001e      	movs	r6, r3
    b7dc:	e6c4      	b.n	b568 <__aeabi_dadd+0x108>
    b7de:	46c0      	nop			; (mov r8, r8)
    b7e0:	000007ff 	.word	0x000007ff
    b7e4:	ff7fffff 	.word	0xff7fffff
    b7e8:	800fffff 	.word	0x800fffff
    b7ec:	2b1f      	cmp	r3, #31
    b7ee:	dc63      	bgt.n	b8b8 <__aeabi_dadd+0x458>
    b7f0:	2020      	movs	r0, #32
    b7f2:	1ac3      	subs	r3, r0, r3
    b7f4:	0008      	movs	r0, r1
    b7f6:	4098      	lsls	r0, r3
    b7f8:	469c      	mov	ip, r3
    b7fa:	4683      	mov	fp, r0
    b7fc:	4653      	mov	r3, sl
    b7fe:	0010      	movs	r0, r2
    b800:	40d8      	lsrs	r0, r3
    b802:	0003      	movs	r3, r0
    b804:	4658      	mov	r0, fp
    b806:	4318      	orrs	r0, r3
    b808:	4663      	mov	r3, ip
    b80a:	409a      	lsls	r2, r3
    b80c:	1e53      	subs	r3, r2, #1
    b80e:	419a      	sbcs	r2, r3
    b810:	4653      	mov	r3, sl
    b812:	4302      	orrs	r2, r0
    b814:	40d9      	lsrs	r1, r3
    b816:	e703      	b.n	b620 <__aeabi_dadd+0x1c0>
    b818:	0026      	movs	r6, r4
    b81a:	433e      	orrs	r6, r7
    b81c:	d006      	beq.n	b82c <__aeabi_dadd+0x3cc>
    b81e:	43eb      	mvns	r3, r5
    b820:	4699      	mov	r9, r3
    b822:	2b00      	cmp	r3, #0
    b824:	d0c7      	beq.n	b7b6 <__aeabi_dadd+0x356>
    b826:	4e94      	ldr	r6, [pc, #592]	; (ba78 <__aeabi_dadd+0x618>)
    b828:	42b0      	cmp	r0, r6
    b82a:	d1ac      	bne.n	b786 <__aeabi_dadd+0x326>
    b82c:	000c      	movs	r4, r1
    b82e:	0017      	movs	r7, r2
    b830:	0006      	movs	r6, r0
    b832:	46d8      	mov	r8, fp
    b834:	e698      	b.n	b568 <__aeabi_dadd+0x108>
    b836:	4b90      	ldr	r3, [pc, #576]	; (ba78 <__aeabi_dadd+0x618>)
    b838:	459a      	cmp	sl, r3
    b83a:	d00b      	beq.n	b854 <__aeabi_dadd+0x3f4>
    b83c:	4682      	mov	sl, r0
    b83e:	e6e7      	b.n	b610 <__aeabi_dadd+0x1b0>
    b840:	2800      	cmp	r0, #0
    b842:	d000      	beq.n	b846 <__aeabi_dadd+0x3e6>
    b844:	e09e      	b.n	b984 <__aeabi_dadd+0x524>
    b846:	0018      	movs	r0, r3
    b848:	4310      	orrs	r0, r2
    b84a:	d100      	bne.n	b84e <__aeabi_dadd+0x3ee>
    b84c:	e0e9      	b.n	ba22 <__aeabi_dadd+0x5c2>
    b84e:	001c      	movs	r4, r3
    b850:	0017      	movs	r7, r2
    b852:	46d8      	mov	r8, fp
    b854:	4e88      	ldr	r6, [pc, #544]	; (ba78 <__aeabi_dadd+0x618>)
    b856:	e687      	b.n	b568 <__aeabi_dadd+0x108>
    b858:	2500      	movs	r5, #0
    b85a:	e772      	b.n	b742 <__aeabi_dadd+0x2e2>
    b85c:	2100      	movs	r1, #0
    b85e:	e782      	b.n	b766 <__aeabi_dadd+0x306>
    b860:	0023      	movs	r3, r4
    b862:	433b      	orrs	r3, r7
    b864:	2e00      	cmp	r6, #0
    b866:	d000      	beq.n	b86a <__aeabi_dadd+0x40a>
    b868:	e0ab      	b.n	b9c2 <__aeabi_dadd+0x562>
    b86a:	2b00      	cmp	r3, #0
    b86c:	d100      	bne.n	b870 <__aeabi_dadd+0x410>
    b86e:	e0e7      	b.n	ba40 <__aeabi_dadd+0x5e0>
    b870:	000b      	movs	r3, r1
    b872:	4313      	orrs	r3, r2
    b874:	d100      	bne.n	b878 <__aeabi_dadd+0x418>
    b876:	e677      	b.n	b568 <__aeabi_dadd+0x108>
    b878:	18ba      	adds	r2, r7, r2
    b87a:	42ba      	cmp	r2, r7
    b87c:	41bf      	sbcs	r7, r7
    b87e:	1864      	adds	r4, r4, r1
    b880:	427f      	negs	r7, r7
    b882:	19e4      	adds	r4, r4, r7
    b884:	0223      	lsls	r3, r4, #8
    b886:	d400      	bmi.n	b88a <__aeabi_dadd+0x42a>
    b888:	e0f2      	b.n	ba70 <__aeabi_dadd+0x610>
    b88a:	4b7c      	ldr	r3, [pc, #496]	; (ba7c <__aeabi_dadd+0x61c>)
    b88c:	0017      	movs	r7, r2
    b88e:	401c      	ands	r4, r3
    b890:	0006      	movs	r6, r0
    b892:	e669      	b.n	b568 <__aeabi_dadd+0x108>
    b894:	0020      	movs	r0, r4
    b896:	4338      	orrs	r0, r7
    b898:	2e00      	cmp	r6, #0
    b89a:	d1d1      	bne.n	b840 <__aeabi_dadd+0x3e0>
    b89c:	2800      	cmp	r0, #0
    b89e:	d15b      	bne.n	b958 <__aeabi_dadd+0x4f8>
    b8a0:	001c      	movs	r4, r3
    b8a2:	4314      	orrs	r4, r2
    b8a4:	d100      	bne.n	b8a8 <__aeabi_dadd+0x448>
    b8a6:	e0a8      	b.n	b9fa <__aeabi_dadd+0x59a>
    b8a8:	001c      	movs	r4, r3
    b8aa:	0017      	movs	r7, r2
    b8ac:	46d8      	mov	r8, fp
    b8ae:	e65b      	b.n	b568 <__aeabi_dadd+0x108>
    b8b0:	0006      	movs	r6, r0
    b8b2:	2400      	movs	r4, #0
    b8b4:	2700      	movs	r7, #0
    b8b6:	e697      	b.n	b5e8 <__aeabi_dadd+0x188>
    b8b8:	4650      	mov	r0, sl
    b8ba:	000b      	movs	r3, r1
    b8bc:	3820      	subs	r0, #32
    b8be:	40c3      	lsrs	r3, r0
    b8c0:	4699      	mov	r9, r3
    b8c2:	4653      	mov	r3, sl
    b8c4:	2b20      	cmp	r3, #32
    b8c6:	d100      	bne.n	b8ca <__aeabi_dadd+0x46a>
    b8c8:	e095      	b.n	b9f6 <__aeabi_dadd+0x596>
    b8ca:	2340      	movs	r3, #64	; 0x40
    b8cc:	4650      	mov	r0, sl
    b8ce:	1a1b      	subs	r3, r3, r0
    b8d0:	4099      	lsls	r1, r3
    b8d2:	430a      	orrs	r2, r1
    b8d4:	1e51      	subs	r1, r2, #1
    b8d6:	418a      	sbcs	r2, r1
    b8d8:	464b      	mov	r3, r9
    b8da:	2100      	movs	r1, #0
    b8dc:	431a      	orrs	r2, r3
    b8de:	e69f      	b.n	b620 <__aeabi_dadd+0x1c0>
    b8e0:	2e00      	cmp	r6, #0
    b8e2:	d130      	bne.n	b946 <__aeabi_dadd+0x4e6>
    b8e4:	0026      	movs	r6, r4
    b8e6:	433e      	orrs	r6, r7
    b8e8:	d067      	beq.n	b9ba <__aeabi_dadd+0x55a>
    b8ea:	43db      	mvns	r3, r3
    b8ec:	469a      	mov	sl, r3
    b8ee:	2b00      	cmp	r3, #0
    b8f0:	d01c      	beq.n	b92c <__aeabi_dadd+0x4cc>
    b8f2:	4e61      	ldr	r6, [pc, #388]	; (ba78 <__aeabi_dadd+0x618>)
    b8f4:	42b0      	cmp	r0, r6
    b8f6:	d060      	beq.n	b9ba <__aeabi_dadd+0x55a>
    b8f8:	4653      	mov	r3, sl
    b8fa:	2b38      	cmp	r3, #56	; 0x38
    b8fc:	dd00      	ble.n	b900 <__aeabi_dadd+0x4a0>
    b8fe:	e096      	b.n	ba2e <__aeabi_dadd+0x5ce>
    b900:	2b1f      	cmp	r3, #31
    b902:	dd00      	ble.n	b906 <__aeabi_dadd+0x4a6>
    b904:	e09f      	b.n	ba46 <__aeabi_dadd+0x5e6>
    b906:	2620      	movs	r6, #32
    b908:	1af3      	subs	r3, r6, r3
    b90a:	0026      	movs	r6, r4
    b90c:	409e      	lsls	r6, r3
    b90e:	469c      	mov	ip, r3
    b910:	46b3      	mov	fp, r6
    b912:	4653      	mov	r3, sl
    b914:	003e      	movs	r6, r7
    b916:	40de      	lsrs	r6, r3
    b918:	0033      	movs	r3, r6
    b91a:	465e      	mov	r6, fp
    b91c:	431e      	orrs	r6, r3
    b91e:	4663      	mov	r3, ip
    b920:	409f      	lsls	r7, r3
    b922:	1e7b      	subs	r3, r7, #1
    b924:	419f      	sbcs	r7, r3
    b926:	4653      	mov	r3, sl
    b928:	40dc      	lsrs	r4, r3
    b92a:	4337      	orrs	r7, r6
    b92c:	18bf      	adds	r7, r7, r2
    b92e:	4297      	cmp	r7, r2
    b930:	4192      	sbcs	r2, r2
    b932:	1864      	adds	r4, r4, r1
    b934:	4252      	negs	r2, r2
    b936:	18a4      	adds	r4, r4, r2
    b938:	0006      	movs	r6, r0
    b93a:	e678      	b.n	b62e <__aeabi_dadd+0x1ce>
    b93c:	4327      	orrs	r7, r4
    b93e:	1e7c      	subs	r4, r7, #1
    b940:	41a7      	sbcs	r7, r4
    b942:	2400      	movs	r4, #0
    b944:	e737      	b.n	b7b6 <__aeabi_dadd+0x356>
    b946:	4e4c      	ldr	r6, [pc, #304]	; (ba78 <__aeabi_dadd+0x618>)
    b948:	42b0      	cmp	r0, r6
    b94a:	d036      	beq.n	b9ba <__aeabi_dadd+0x55a>
    b94c:	2680      	movs	r6, #128	; 0x80
    b94e:	425b      	negs	r3, r3
    b950:	0436      	lsls	r6, r6, #16
    b952:	469a      	mov	sl, r3
    b954:	4334      	orrs	r4, r6
    b956:	e7cf      	b.n	b8f8 <__aeabi_dadd+0x498>
    b958:	0018      	movs	r0, r3
    b95a:	4310      	orrs	r0, r2
    b95c:	d100      	bne.n	b960 <__aeabi_dadd+0x500>
    b95e:	e603      	b.n	b568 <__aeabi_dadd+0x108>
    b960:	1ab8      	subs	r0, r7, r2
    b962:	4684      	mov	ip, r0
    b964:	4567      	cmp	r7, ip
    b966:	41ad      	sbcs	r5, r5
    b968:	1ae0      	subs	r0, r4, r3
    b96a:	426d      	negs	r5, r5
    b96c:	1b40      	subs	r0, r0, r5
    b96e:	0205      	lsls	r5, r0, #8
    b970:	d400      	bmi.n	b974 <__aeabi_dadd+0x514>
    b972:	e62c      	b.n	b5ce <__aeabi_dadd+0x16e>
    b974:	1bd7      	subs	r7, r2, r7
    b976:	42ba      	cmp	r2, r7
    b978:	4192      	sbcs	r2, r2
    b97a:	1b1c      	subs	r4, r3, r4
    b97c:	4252      	negs	r2, r2
    b97e:	1aa4      	subs	r4, r4, r2
    b980:	46d8      	mov	r8, fp
    b982:	e5f1      	b.n	b568 <__aeabi_dadd+0x108>
    b984:	0018      	movs	r0, r3
    b986:	4310      	orrs	r0, r2
    b988:	d100      	bne.n	b98c <__aeabi_dadd+0x52c>
    b98a:	e763      	b.n	b854 <__aeabi_dadd+0x3f4>
    b98c:	08f8      	lsrs	r0, r7, #3
    b98e:	0767      	lsls	r7, r4, #29
    b990:	4307      	orrs	r7, r0
    b992:	2080      	movs	r0, #128	; 0x80
    b994:	08e4      	lsrs	r4, r4, #3
    b996:	0300      	lsls	r0, r0, #12
    b998:	4204      	tst	r4, r0
    b99a:	d008      	beq.n	b9ae <__aeabi_dadd+0x54e>
    b99c:	08dd      	lsrs	r5, r3, #3
    b99e:	4205      	tst	r5, r0
    b9a0:	d105      	bne.n	b9ae <__aeabi_dadd+0x54e>
    b9a2:	08d2      	lsrs	r2, r2, #3
    b9a4:	0759      	lsls	r1, r3, #29
    b9a6:	4311      	orrs	r1, r2
    b9a8:	000f      	movs	r7, r1
    b9aa:	002c      	movs	r4, r5
    b9ac:	46d8      	mov	r8, fp
    b9ae:	0f7b      	lsrs	r3, r7, #29
    b9b0:	00e4      	lsls	r4, r4, #3
    b9b2:	431c      	orrs	r4, r3
    b9b4:	00ff      	lsls	r7, r7, #3
    b9b6:	4e30      	ldr	r6, [pc, #192]	; (ba78 <__aeabi_dadd+0x618>)
    b9b8:	e5d6      	b.n	b568 <__aeabi_dadd+0x108>
    b9ba:	000c      	movs	r4, r1
    b9bc:	0017      	movs	r7, r2
    b9be:	0006      	movs	r6, r0
    b9c0:	e5d2      	b.n	b568 <__aeabi_dadd+0x108>
    b9c2:	2b00      	cmp	r3, #0
    b9c4:	d038      	beq.n	ba38 <__aeabi_dadd+0x5d8>
    b9c6:	000b      	movs	r3, r1
    b9c8:	4313      	orrs	r3, r2
    b9ca:	d100      	bne.n	b9ce <__aeabi_dadd+0x56e>
    b9cc:	e742      	b.n	b854 <__aeabi_dadd+0x3f4>
    b9ce:	08f8      	lsrs	r0, r7, #3
    b9d0:	0767      	lsls	r7, r4, #29
    b9d2:	4307      	orrs	r7, r0
    b9d4:	2080      	movs	r0, #128	; 0x80
    b9d6:	08e4      	lsrs	r4, r4, #3
    b9d8:	0300      	lsls	r0, r0, #12
    b9da:	4204      	tst	r4, r0
    b9dc:	d0e7      	beq.n	b9ae <__aeabi_dadd+0x54e>
    b9de:	08cb      	lsrs	r3, r1, #3
    b9e0:	4203      	tst	r3, r0
    b9e2:	d1e4      	bne.n	b9ae <__aeabi_dadd+0x54e>
    b9e4:	08d2      	lsrs	r2, r2, #3
    b9e6:	0749      	lsls	r1, r1, #29
    b9e8:	4311      	orrs	r1, r2
    b9ea:	000f      	movs	r7, r1
    b9ec:	001c      	movs	r4, r3
    b9ee:	e7de      	b.n	b9ae <__aeabi_dadd+0x54e>
    b9f0:	2700      	movs	r7, #0
    b9f2:	2400      	movs	r4, #0
    b9f4:	e5d5      	b.n	b5a2 <__aeabi_dadd+0x142>
    b9f6:	2100      	movs	r1, #0
    b9f8:	e76b      	b.n	b8d2 <__aeabi_dadd+0x472>
    b9fa:	2500      	movs	r5, #0
    b9fc:	2700      	movs	r7, #0
    b9fe:	e5f3      	b.n	b5e8 <__aeabi_dadd+0x188>
    ba00:	464e      	mov	r6, r9
    ba02:	0025      	movs	r5, r4
    ba04:	3e20      	subs	r6, #32
    ba06:	40f5      	lsrs	r5, r6
    ba08:	464b      	mov	r3, r9
    ba0a:	002e      	movs	r6, r5
    ba0c:	2b20      	cmp	r3, #32
    ba0e:	d02d      	beq.n	ba6c <__aeabi_dadd+0x60c>
    ba10:	2540      	movs	r5, #64	; 0x40
    ba12:	1aed      	subs	r5, r5, r3
    ba14:	40ac      	lsls	r4, r5
    ba16:	4327      	orrs	r7, r4
    ba18:	1e7c      	subs	r4, r7, #1
    ba1a:	41a7      	sbcs	r7, r4
    ba1c:	2400      	movs	r4, #0
    ba1e:	4337      	orrs	r7, r6
    ba20:	e6c9      	b.n	b7b6 <__aeabi_dadd+0x356>
    ba22:	2480      	movs	r4, #128	; 0x80
    ba24:	2500      	movs	r5, #0
    ba26:	0324      	lsls	r4, r4, #12
    ba28:	4e13      	ldr	r6, [pc, #76]	; (ba78 <__aeabi_dadd+0x618>)
    ba2a:	2700      	movs	r7, #0
    ba2c:	e5dc      	b.n	b5e8 <__aeabi_dadd+0x188>
    ba2e:	4327      	orrs	r7, r4
    ba30:	1e7c      	subs	r4, r7, #1
    ba32:	41a7      	sbcs	r7, r4
    ba34:	2400      	movs	r4, #0
    ba36:	e779      	b.n	b92c <__aeabi_dadd+0x4cc>
    ba38:	000c      	movs	r4, r1
    ba3a:	0017      	movs	r7, r2
    ba3c:	4e0e      	ldr	r6, [pc, #56]	; (ba78 <__aeabi_dadd+0x618>)
    ba3e:	e593      	b.n	b568 <__aeabi_dadd+0x108>
    ba40:	000c      	movs	r4, r1
    ba42:	0017      	movs	r7, r2
    ba44:	e590      	b.n	b568 <__aeabi_dadd+0x108>
    ba46:	4656      	mov	r6, sl
    ba48:	0023      	movs	r3, r4
    ba4a:	3e20      	subs	r6, #32
    ba4c:	40f3      	lsrs	r3, r6
    ba4e:	4699      	mov	r9, r3
    ba50:	4653      	mov	r3, sl
    ba52:	2b20      	cmp	r3, #32
    ba54:	d00e      	beq.n	ba74 <__aeabi_dadd+0x614>
    ba56:	2340      	movs	r3, #64	; 0x40
    ba58:	4656      	mov	r6, sl
    ba5a:	1b9b      	subs	r3, r3, r6
    ba5c:	409c      	lsls	r4, r3
    ba5e:	4327      	orrs	r7, r4
    ba60:	1e7c      	subs	r4, r7, #1
    ba62:	41a7      	sbcs	r7, r4
    ba64:	464b      	mov	r3, r9
    ba66:	2400      	movs	r4, #0
    ba68:	431f      	orrs	r7, r3
    ba6a:	e75f      	b.n	b92c <__aeabi_dadd+0x4cc>
    ba6c:	2400      	movs	r4, #0
    ba6e:	e7d2      	b.n	ba16 <__aeabi_dadd+0x5b6>
    ba70:	0017      	movs	r7, r2
    ba72:	e5b2      	b.n	b5da <__aeabi_dadd+0x17a>
    ba74:	2400      	movs	r4, #0
    ba76:	e7f2      	b.n	ba5e <__aeabi_dadd+0x5fe>
    ba78:	000007ff 	.word	0x000007ff
    ba7c:	ff7fffff 	.word	0xff7fffff

0000ba80 <__aeabi_ddiv>:
    ba80:	b5f0      	push	{r4, r5, r6, r7, lr}
    ba82:	4657      	mov	r7, sl
    ba84:	4645      	mov	r5, r8
    ba86:	46de      	mov	lr, fp
    ba88:	464e      	mov	r6, r9
    ba8a:	b5e0      	push	{r5, r6, r7, lr}
    ba8c:	004c      	lsls	r4, r1, #1
    ba8e:	030e      	lsls	r6, r1, #12
    ba90:	b087      	sub	sp, #28
    ba92:	4683      	mov	fp, r0
    ba94:	4692      	mov	sl, r2
    ba96:	001d      	movs	r5, r3
    ba98:	4680      	mov	r8, r0
    ba9a:	0b36      	lsrs	r6, r6, #12
    ba9c:	0d64      	lsrs	r4, r4, #21
    ba9e:	0fcf      	lsrs	r7, r1, #31
    baa0:	2c00      	cmp	r4, #0
    baa2:	d04f      	beq.n	bb44 <__aeabi_ddiv+0xc4>
    baa4:	4b6f      	ldr	r3, [pc, #444]	; (bc64 <__aeabi_ddiv+0x1e4>)
    baa6:	429c      	cmp	r4, r3
    baa8:	d035      	beq.n	bb16 <__aeabi_ddiv+0x96>
    baaa:	2380      	movs	r3, #128	; 0x80
    baac:	0f42      	lsrs	r2, r0, #29
    baae:	041b      	lsls	r3, r3, #16
    bab0:	00f6      	lsls	r6, r6, #3
    bab2:	4313      	orrs	r3, r2
    bab4:	4333      	orrs	r3, r6
    bab6:	4699      	mov	r9, r3
    bab8:	00c3      	lsls	r3, r0, #3
    baba:	4698      	mov	r8, r3
    babc:	4b6a      	ldr	r3, [pc, #424]	; (bc68 <__aeabi_ddiv+0x1e8>)
    babe:	2600      	movs	r6, #0
    bac0:	469c      	mov	ip, r3
    bac2:	2300      	movs	r3, #0
    bac4:	4464      	add	r4, ip
    bac6:	9303      	str	r3, [sp, #12]
    bac8:	032b      	lsls	r3, r5, #12
    baca:	0b1b      	lsrs	r3, r3, #12
    bacc:	469b      	mov	fp, r3
    bace:	006b      	lsls	r3, r5, #1
    bad0:	0fed      	lsrs	r5, r5, #31
    bad2:	4650      	mov	r0, sl
    bad4:	0d5b      	lsrs	r3, r3, #21
    bad6:	9501      	str	r5, [sp, #4]
    bad8:	d05e      	beq.n	bb98 <__aeabi_ddiv+0x118>
    bada:	4a62      	ldr	r2, [pc, #392]	; (bc64 <__aeabi_ddiv+0x1e4>)
    badc:	4293      	cmp	r3, r2
    bade:	d053      	beq.n	bb88 <__aeabi_ddiv+0x108>
    bae0:	465a      	mov	r2, fp
    bae2:	00d1      	lsls	r1, r2, #3
    bae4:	2280      	movs	r2, #128	; 0x80
    bae6:	0f40      	lsrs	r0, r0, #29
    bae8:	0412      	lsls	r2, r2, #16
    baea:	4302      	orrs	r2, r0
    baec:	430a      	orrs	r2, r1
    baee:	4693      	mov	fp, r2
    baf0:	4652      	mov	r2, sl
    baf2:	00d1      	lsls	r1, r2, #3
    baf4:	4a5c      	ldr	r2, [pc, #368]	; (bc68 <__aeabi_ddiv+0x1e8>)
    baf6:	4694      	mov	ip, r2
    baf8:	2200      	movs	r2, #0
    bafa:	4463      	add	r3, ip
    bafc:	0038      	movs	r0, r7
    bafe:	4068      	eors	r0, r5
    bb00:	4684      	mov	ip, r0
    bb02:	9002      	str	r0, [sp, #8]
    bb04:	1ae4      	subs	r4, r4, r3
    bb06:	4316      	orrs	r6, r2
    bb08:	2e0f      	cmp	r6, #15
    bb0a:	d900      	bls.n	bb0e <__aeabi_ddiv+0x8e>
    bb0c:	e0b4      	b.n	bc78 <__aeabi_ddiv+0x1f8>
    bb0e:	4b57      	ldr	r3, [pc, #348]	; (bc6c <__aeabi_ddiv+0x1ec>)
    bb10:	00b6      	lsls	r6, r6, #2
    bb12:	599b      	ldr	r3, [r3, r6]
    bb14:	469f      	mov	pc, r3
    bb16:	0003      	movs	r3, r0
    bb18:	4333      	orrs	r3, r6
    bb1a:	4699      	mov	r9, r3
    bb1c:	d16c      	bne.n	bbf8 <__aeabi_ddiv+0x178>
    bb1e:	2300      	movs	r3, #0
    bb20:	4698      	mov	r8, r3
    bb22:	3302      	adds	r3, #2
    bb24:	2608      	movs	r6, #8
    bb26:	9303      	str	r3, [sp, #12]
    bb28:	e7ce      	b.n	bac8 <__aeabi_ddiv+0x48>
    bb2a:	46cb      	mov	fp, r9
    bb2c:	4641      	mov	r1, r8
    bb2e:	9a03      	ldr	r2, [sp, #12]
    bb30:	9701      	str	r7, [sp, #4]
    bb32:	2a02      	cmp	r2, #2
    bb34:	d165      	bne.n	bc02 <__aeabi_ddiv+0x182>
    bb36:	9b01      	ldr	r3, [sp, #4]
    bb38:	4c4a      	ldr	r4, [pc, #296]	; (bc64 <__aeabi_ddiv+0x1e4>)
    bb3a:	469c      	mov	ip, r3
    bb3c:	2300      	movs	r3, #0
    bb3e:	2200      	movs	r2, #0
    bb40:	4698      	mov	r8, r3
    bb42:	e06b      	b.n	bc1c <__aeabi_ddiv+0x19c>
    bb44:	0003      	movs	r3, r0
    bb46:	4333      	orrs	r3, r6
    bb48:	4699      	mov	r9, r3
    bb4a:	d04e      	beq.n	bbea <__aeabi_ddiv+0x16a>
    bb4c:	2e00      	cmp	r6, #0
    bb4e:	d100      	bne.n	bb52 <__aeabi_ddiv+0xd2>
    bb50:	e1bc      	b.n	becc <__aeabi_ddiv+0x44c>
    bb52:	0030      	movs	r0, r6
    bb54:	f001 fa7e 	bl	d054 <__clzsi2>
    bb58:	0003      	movs	r3, r0
    bb5a:	3b0b      	subs	r3, #11
    bb5c:	2b1c      	cmp	r3, #28
    bb5e:	dd00      	ble.n	bb62 <__aeabi_ddiv+0xe2>
    bb60:	e1ac      	b.n	bebc <__aeabi_ddiv+0x43c>
    bb62:	221d      	movs	r2, #29
    bb64:	1ad3      	subs	r3, r2, r3
    bb66:	465a      	mov	r2, fp
    bb68:	0001      	movs	r1, r0
    bb6a:	40da      	lsrs	r2, r3
    bb6c:	3908      	subs	r1, #8
    bb6e:	408e      	lsls	r6, r1
    bb70:	0013      	movs	r3, r2
    bb72:	4333      	orrs	r3, r6
    bb74:	4699      	mov	r9, r3
    bb76:	465b      	mov	r3, fp
    bb78:	408b      	lsls	r3, r1
    bb7a:	4698      	mov	r8, r3
    bb7c:	2300      	movs	r3, #0
    bb7e:	4c3c      	ldr	r4, [pc, #240]	; (bc70 <__aeabi_ddiv+0x1f0>)
    bb80:	2600      	movs	r6, #0
    bb82:	1a24      	subs	r4, r4, r0
    bb84:	9303      	str	r3, [sp, #12]
    bb86:	e79f      	b.n	bac8 <__aeabi_ddiv+0x48>
    bb88:	4651      	mov	r1, sl
    bb8a:	465a      	mov	r2, fp
    bb8c:	4311      	orrs	r1, r2
    bb8e:	d129      	bne.n	bbe4 <__aeabi_ddiv+0x164>
    bb90:	2200      	movs	r2, #0
    bb92:	4693      	mov	fp, r2
    bb94:	3202      	adds	r2, #2
    bb96:	e7b1      	b.n	bafc <__aeabi_ddiv+0x7c>
    bb98:	4659      	mov	r1, fp
    bb9a:	4301      	orrs	r1, r0
    bb9c:	d01e      	beq.n	bbdc <__aeabi_ddiv+0x15c>
    bb9e:	465b      	mov	r3, fp
    bba0:	2b00      	cmp	r3, #0
    bba2:	d100      	bne.n	bba6 <__aeabi_ddiv+0x126>
    bba4:	e19e      	b.n	bee4 <__aeabi_ddiv+0x464>
    bba6:	4658      	mov	r0, fp
    bba8:	f001 fa54 	bl	d054 <__clzsi2>
    bbac:	0003      	movs	r3, r0
    bbae:	3b0b      	subs	r3, #11
    bbb0:	2b1c      	cmp	r3, #28
    bbb2:	dd00      	ble.n	bbb6 <__aeabi_ddiv+0x136>
    bbb4:	e18f      	b.n	bed6 <__aeabi_ddiv+0x456>
    bbb6:	0002      	movs	r2, r0
    bbb8:	4659      	mov	r1, fp
    bbba:	3a08      	subs	r2, #8
    bbbc:	4091      	lsls	r1, r2
    bbbe:	468b      	mov	fp, r1
    bbc0:	211d      	movs	r1, #29
    bbc2:	1acb      	subs	r3, r1, r3
    bbc4:	4651      	mov	r1, sl
    bbc6:	40d9      	lsrs	r1, r3
    bbc8:	000b      	movs	r3, r1
    bbca:	4659      	mov	r1, fp
    bbcc:	430b      	orrs	r3, r1
    bbce:	4651      	mov	r1, sl
    bbd0:	469b      	mov	fp, r3
    bbd2:	4091      	lsls	r1, r2
    bbd4:	4b26      	ldr	r3, [pc, #152]	; (bc70 <__aeabi_ddiv+0x1f0>)
    bbd6:	2200      	movs	r2, #0
    bbd8:	1a1b      	subs	r3, r3, r0
    bbda:	e78f      	b.n	bafc <__aeabi_ddiv+0x7c>
    bbdc:	2300      	movs	r3, #0
    bbde:	2201      	movs	r2, #1
    bbe0:	469b      	mov	fp, r3
    bbe2:	e78b      	b.n	bafc <__aeabi_ddiv+0x7c>
    bbe4:	4651      	mov	r1, sl
    bbe6:	2203      	movs	r2, #3
    bbe8:	e788      	b.n	bafc <__aeabi_ddiv+0x7c>
    bbea:	2300      	movs	r3, #0
    bbec:	4698      	mov	r8, r3
    bbee:	3301      	adds	r3, #1
    bbf0:	2604      	movs	r6, #4
    bbf2:	2400      	movs	r4, #0
    bbf4:	9303      	str	r3, [sp, #12]
    bbf6:	e767      	b.n	bac8 <__aeabi_ddiv+0x48>
    bbf8:	2303      	movs	r3, #3
    bbfa:	46b1      	mov	r9, r6
    bbfc:	9303      	str	r3, [sp, #12]
    bbfe:	260c      	movs	r6, #12
    bc00:	e762      	b.n	bac8 <__aeabi_ddiv+0x48>
    bc02:	2a03      	cmp	r2, #3
    bc04:	d100      	bne.n	bc08 <__aeabi_ddiv+0x188>
    bc06:	e25c      	b.n	c0c2 <__aeabi_ddiv+0x642>
    bc08:	9b01      	ldr	r3, [sp, #4]
    bc0a:	2a01      	cmp	r2, #1
    bc0c:	d000      	beq.n	bc10 <__aeabi_ddiv+0x190>
    bc0e:	e1e4      	b.n	bfda <__aeabi_ddiv+0x55a>
    bc10:	4013      	ands	r3, r2
    bc12:	469c      	mov	ip, r3
    bc14:	2300      	movs	r3, #0
    bc16:	2400      	movs	r4, #0
    bc18:	2200      	movs	r2, #0
    bc1a:	4698      	mov	r8, r3
    bc1c:	2100      	movs	r1, #0
    bc1e:	0312      	lsls	r2, r2, #12
    bc20:	0b13      	lsrs	r3, r2, #12
    bc22:	0d0a      	lsrs	r2, r1, #20
    bc24:	0512      	lsls	r2, r2, #20
    bc26:	431a      	orrs	r2, r3
    bc28:	0523      	lsls	r3, r4, #20
    bc2a:	4c12      	ldr	r4, [pc, #72]	; (bc74 <__aeabi_ddiv+0x1f4>)
    bc2c:	4640      	mov	r0, r8
    bc2e:	4022      	ands	r2, r4
    bc30:	4313      	orrs	r3, r2
    bc32:	4662      	mov	r2, ip
    bc34:	005b      	lsls	r3, r3, #1
    bc36:	07d2      	lsls	r2, r2, #31
    bc38:	085b      	lsrs	r3, r3, #1
    bc3a:	4313      	orrs	r3, r2
    bc3c:	0019      	movs	r1, r3
    bc3e:	b007      	add	sp, #28
    bc40:	bc3c      	pop	{r2, r3, r4, r5}
    bc42:	4690      	mov	r8, r2
    bc44:	4699      	mov	r9, r3
    bc46:	46a2      	mov	sl, r4
    bc48:	46ab      	mov	fp, r5
    bc4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bc4c:	2300      	movs	r3, #0
    bc4e:	2280      	movs	r2, #128	; 0x80
    bc50:	469c      	mov	ip, r3
    bc52:	0312      	lsls	r2, r2, #12
    bc54:	4698      	mov	r8, r3
    bc56:	4c03      	ldr	r4, [pc, #12]	; (bc64 <__aeabi_ddiv+0x1e4>)
    bc58:	e7e0      	b.n	bc1c <__aeabi_ddiv+0x19c>
    bc5a:	2300      	movs	r3, #0
    bc5c:	4c01      	ldr	r4, [pc, #4]	; (bc64 <__aeabi_ddiv+0x1e4>)
    bc5e:	2200      	movs	r2, #0
    bc60:	4698      	mov	r8, r3
    bc62:	e7db      	b.n	bc1c <__aeabi_ddiv+0x19c>
    bc64:	000007ff 	.word	0x000007ff
    bc68:	fffffc01 	.word	0xfffffc01
    bc6c:	00012360 	.word	0x00012360
    bc70:	fffffc0d 	.word	0xfffffc0d
    bc74:	800fffff 	.word	0x800fffff
    bc78:	45d9      	cmp	r9, fp
    bc7a:	d900      	bls.n	bc7e <__aeabi_ddiv+0x1fe>
    bc7c:	e139      	b.n	bef2 <__aeabi_ddiv+0x472>
    bc7e:	d100      	bne.n	bc82 <__aeabi_ddiv+0x202>
    bc80:	e134      	b.n	beec <__aeabi_ddiv+0x46c>
    bc82:	2300      	movs	r3, #0
    bc84:	4646      	mov	r6, r8
    bc86:	464d      	mov	r5, r9
    bc88:	469a      	mov	sl, r3
    bc8a:	3c01      	subs	r4, #1
    bc8c:	465b      	mov	r3, fp
    bc8e:	0e0a      	lsrs	r2, r1, #24
    bc90:	021b      	lsls	r3, r3, #8
    bc92:	431a      	orrs	r2, r3
    bc94:	020b      	lsls	r3, r1, #8
    bc96:	0c17      	lsrs	r7, r2, #16
    bc98:	9303      	str	r3, [sp, #12]
    bc9a:	0413      	lsls	r3, r2, #16
    bc9c:	0c1b      	lsrs	r3, r3, #16
    bc9e:	0039      	movs	r1, r7
    bca0:	0028      	movs	r0, r5
    bca2:	4690      	mov	r8, r2
    bca4:	9301      	str	r3, [sp, #4]
    bca6:	f7fe fba9 	bl	a3fc <__udivsi3>
    bcaa:	0002      	movs	r2, r0
    bcac:	9b01      	ldr	r3, [sp, #4]
    bcae:	4683      	mov	fp, r0
    bcb0:	435a      	muls	r2, r3
    bcb2:	0028      	movs	r0, r5
    bcb4:	0039      	movs	r1, r7
    bcb6:	4691      	mov	r9, r2
    bcb8:	f7fe fc26 	bl	a508 <__aeabi_uidivmod>
    bcbc:	0c35      	lsrs	r5, r6, #16
    bcbe:	0409      	lsls	r1, r1, #16
    bcc0:	430d      	orrs	r5, r1
    bcc2:	45a9      	cmp	r9, r5
    bcc4:	d90d      	bls.n	bce2 <__aeabi_ddiv+0x262>
    bcc6:	465b      	mov	r3, fp
    bcc8:	4445      	add	r5, r8
    bcca:	3b01      	subs	r3, #1
    bccc:	45a8      	cmp	r8, r5
    bcce:	d900      	bls.n	bcd2 <__aeabi_ddiv+0x252>
    bcd0:	e13a      	b.n	bf48 <__aeabi_ddiv+0x4c8>
    bcd2:	45a9      	cmp	r9, r5
    bcd4:	d800      	bhi.n	bcd8 <__aeabi_ddiv+0x258>
    bcd6:	e137      	b.n	bf48 <__aeabi_ddiv+0x4c8>
    bcd8:	2302      	movs	r3, #2
    bcda:	425b      	negs	r3, r3
    bcdc:	469c      	mov	ip, r3
    bcde:	4445      	add	r5, r8
    bce0:	44e3      	add	fp, ip
    bce2:	464b      	mov	r3, r9
    bce4:	1aeb      	subs	r3, r5, r3
    bce6:	0039      	movs	r1, r7
    bce8:	0018      	movs	r0, r3
    bcea:	9304      	str	r3, [sp, #16]
    bcec:	f7fe fb86 	bl	a3fc <__udivsi3>
    bcf0:	9b01      	ldr	r3, [sp, #4]
    bcf2:	0005      	movs	r5, r0
    bcf4:	4343      	muls	r3, r0
    bcf6:	0039      	movs	r1, r7
    bcf8:	9804      	ldr	r0, [sp, #16]
    bcfa:	4699      	mov	r9, r3
    bcfc:	f7fe fc04 	bl	a508 <__aeabi_uidivmod>
    bd00:	0433      	lsls	r3, r6, #16
    bd02:	0409      	lsls	r1, r1, #16
    bd04:	0c1b      	lsrs	r3, r3, #16
    bd06:	430b      	orrs	r3, r1
    bd08:	4599      	cmp	r9, r3
    bd0a:	d909      	bls.n	bd20 <__aeabi_ddiv+0x2a0>
    bd0c:	4443      	add	r3, r8
    bd0e:	1e6a      	subs	r2, r5, #1
    bd10:	4598      	cmp	r8, r3
    bd12:	d900      	bls.n	bd16 <__aeabi_ddiv+0x296>
    bd14:	e11a      	b.n	bf4c <__aeabi_ddiv+0x4cc>
    bd16:	4599      	cmp	r9, r3
    bd18:	d800      	bhi.n	bd1c <__aeabi_ddiv+0x29c>
    bd1a:	e117      	b.n	bf4c <__aeabi_ddiv+0x4cc>
    bd1c:	3d02      	subs	r5, #2
    bd1e:	4443      	add	r3, r8
    bd20:	464a      	mov	r2, r9
    bd22:	1a9b      	subs	r3, r3, r2
    bd24:	465a      	mov	r2, fp
    bd26:	0412      	lsls	r2, r2, #16
    bd28:	432a      	orrs	r2, r5
    bd2a:	9903      	ldr	r1, [sp, #12]
    bd2c:	4693      	mov	fp, r2
    bd2e:	0c10      	lsrs	r0, r2, #16
    bd30:	0c0a      	lsrs	r2, r1, #16
    bd32:	4691      	mov	r9, r2
    bd34:	0409      	lsls	r1, r1, #16
    bd36:	465a      	mov	r2, fp
    bd38:	0c09      	lsrs	r1, r1, #16
    bd3a:	464e      	mov	r6, r9
    bd3c:	000d      	movs	r5, r1
    bd3e:	0412      	lsls	r2, r2, #16
    bd40:	0c12      	lsrs	r2, r2, #16
    bd42:	4345      	muls	r5, r0
    bd44:	9105      	str	r1, [sp, #20]
    bd46:	4351      	muls	r1, r2
    bd48:	4372      	muls	r2, r6
    bd4a:	4370      	muls	r0, r6
    bd4c:	1952      	adds	r2, r2, r5
    bd4e:	0c0e      	lsrs	r6, r1, #16
    bd50:	18b2      	adds	r2, r6, r2
    bd52:	4295      	cmp	r5, r2
    bd54:	d903      	bls.n	bd5e <__aeabi_ddiv+0x2de>
    bd56:	2580      	movs	r5, #128	; 0x80
    bd58:	026d      	lsls	r5, r5, #9
    bd5a:	46ac      	mov	ip, r5
    bd5c:	4460      	add	r0, ip
    bd5e:	0c15      	lsrs	r5, r2, #16
    bd60:	0409      	lsls	r1, r1, #16
    bd62:	0412      	lsls	r2, r2, #16
    bd64:	0c09      	lsrs	r1, r1, #16
    bd66:	1828      	adds	r0, r5, r0
    bd68:	1852      	adds	r2, r2, r1
    bd6a:	4283      	cmp	r3, r0
    bd6c:	d200      	bcs.n	bd70 <__aeabi_ddiv+0x2f0>
    bd6e:	e0ce      	b.n	bf0e <__aeabi_ddiv+0x48e>
    bd70:	d100      	bne.n	bd74 <__aeabi_ddiv+0x2f4>
    bd72:	e0c8      	b.n	bf06 <__aeabi_ddiv+0x486>
    bd74:	1a1d      	subs	r5, r3, r0
    bd76:	4653      	mov	r3, sl
    bd78:	1a9e      	subs	r6, r3, r2
    bd7a:	45b2      	cmp	sl, r6
    bd7c:	4192      	sbcs	r2, r2
    bd7e:	4252      	negs	r2, r2
    bd80:	1aab      	subs	r3, r5, r2
    bd82:	469a      	mov	sl, r3
    bd84:	4598      	cmp	r8, r3
    bd86:	d100      	bne.n	bd8a <__aeabi_ddiv+0x30a>
    bd88:	e117      	b.n	bfba <__aeabi_ddiv+0x53a>
    bd8a:	0039      	movs	r1, r7
    bd8c:	0018      	movs	r0, r3
    bd8e:	f7fe fb35 	bl	a3fc <__udivsi3>
    bd92:	9b01      	ldr	r3, [sp, #4]
    bd94:	0005      	movs	r5, r0
    bd96:	4343      	muls	r3, r0
    bd98:	0039      	movs	r1, r7
    bd9a:	4650      	mov	r0, sl
    bd9c:	9304      	str	r3, [sp, #16]
    bd9e:	f7fe fbb3 	bl	a508 <__aeabi_uidivmod>
    bda2:	9804      	ldr	r0, [sp, #16]
    bda4:	040b      	lsls	r3, r1, #16
    bda6:	0c31      	lsrs	r1, r6, #16
    bda8:	4319      	orrs	r1, r3
    bdaa:	4288      	cmp	r0, r1
    bdac:	d909      	bls.n	bdc2 <__aeabi_ddiv+0x342>
    bdae:	4441      	add	r1, r8
    bdb0:	1e6b      	subs	r3, r5, #1
    bdb2:	4588      	cmp	r8, r1
    bdb4:	d900      	bls.n	bdb8 <__aeabi_ddiv+0x338>
    bdb6:	e107      	b.n	bfc8 <__aeabi_ddiv+0x548>
    bdb8:	4288      	cmp	r0, r1
    bdba:	d800      	bhi.n	bdbe <__aeabi_ddiv+0x33e>
    bdbc:	e104      	b.n	bfc8 <__aeabi_ddiv+0x548>
    bdbe:	3d02      	subs	r5, #2
    bdc0:	4441      	add	r1, r8
    bdc2:	9b04      	ldr	r3, [sp, #16]
    bdc4:	1acb      	subs	r3, r1, r3
    bdc6:	0018      	movs	r0, r3
    bdc8:	0039      	movs	r1, r7
    bdca:	9304      	str	r3, [sp, #16]
    bdcc:	f7fe fb16 	bl	a3fc <__udivsi3>
    bdd0:	9b01      	ldr	r3, [sp, #4]
    bdd2:	4682      	mov	sl, r0
    bdd4:	4343      	muls	r3, r0
    bdd6:	0039      	movs	r1, r7
    bdd8:	9804      	ldr	r0, [sp, #16]
    bdda:	9301      	str	r3, [sp, #4]
    bddc:	f7fe fb94 	bl	a508 <__aeabi_uidivmod>
    bde0:	9801      	ldr	r0, [sp, #4]
    bde2:	040b      	lsls	r3, r1, #16
    bde4:	0431      	lsls	r1, r6, #16
    bde6:	0c09      	lsrs	r1, r1, #16
    bde8:	4319      	orrs	r1, r3
    bdea:	4288      	cmp	r0, r1
    bdec:	d90d      	bls.n	be0a <__aeabi_ddiv+0x38a>
    bdee:	4653      	mov	r3, sl
    bdf0:	4441      	add	r1, r8
    bdf2:	3b01      	subs	r3, #1
    bdf4:	4588      	cmp	r8, r1
    bdf6:	d900      	bls.n	bdfa <__aeabi_ddiv+0x37a>
    bdf8:	e0e8      	b.n	bfcc <__aeabi_ddiv+0x54c>
    bdfa:	4288      	cmp	r0, r1
    bdfc:	d800      	bhi.n	be00 <__aeabi_ddiv+0x380>
    bdfe:	e0e5      	b.n	bfcc <__aeabi_ddiv+0x54c>
    be00:	2302      	movs	r3, #2
    be02:	425b      	negs	r3, r3
    be04:	469c      	mov	ip, r3
    be06:	4441      	add	r1, r8
    be08:	44e2      	add	sl, ip
    be0a:	9b01      	ldr	r3, [sp, #4]
    be0c:	042d      	lsls	r5, r5, #16
    be0e:	1ace      	subs	r6, r1, r3
    be10:	4651      	mov	r1, sl
    be12:	4329      	orrs	r1, r5
    be14:	9d05      	ldr	r5, [sp, #20]
    be16:	464f      	mov	r7, r9
    be18:	002a      	movs	r2, r5
    be1a:	040b      	lsls	r3, r1, #16
    be1c:	0c08      	lsrs	r0, r1, #16
    be1e:	0c1b      	lsrs	r3, r3, #16
    be20:	435a      	muls	r2, r3
    be22:	4345      	muls	r5, r0
    be24:	437b      	muls	r3, r7
    be26:	4378      	muls	r0, r7
    be28:	195b      	adds	r3, r3, r5
    be2a:	0c17      	lsrs	r7, r2, #16
    be2c:	18fb      	adds	r3, r7, r3
    be2e:	429d      	cmp	r5, r3
    be30:	d903      	bls.n	be3a <__aeabi_ddiv+0x3ba>
    be32:	2580      	movs	r5, #128	; 0x80
    be34:	026d      	lsls	r5, r5, #9
    be36:	46ac      	mov	ip, r5
    be38:	4460      	add	r0, ip
    be3a:	0c1d      	lsrs	r5, r3, #16
    be3c:	0412      	lsls	r2, r2, #16
    be3e:	041b      	lsls	r3, r3, #16
    be40:	0c12      	lsrs	r2, r2, #16
    be42:	1828      	adds	r0, r5, r0
    be44:	189b      	adds	r3, r3, r2
    be46:	4286      	cmp	r6, r0
    be48:	d200      	bcs.n	be4c <__aeabi_ddiv+0x3cc>
    be4a:	e093      	b.n	bf74 <__aeabi_ddiv+0x4f4>
    be4c:	d100      	bne.n	be50 <__aeabi_ddiv+0x3d0>
    be4e:	e08e      	b.n	bf6e <__aeabi_ddiv+0x4ee>
    be50:	2301      	movs	r3, #1
    be52:	4319      	orrs	r1, r3
    be54:	4ba0      	ldr	r3, [pc, #640]	; (c0d8 <__aeabi_ddiv+0x658>)
    be56:	18e3      	adds	r3, r4, r3
    be58:	2b00      	cmp	r3, #0
    be5a:	dc00      	bgt.n	be5e <__aeabi_ddiv+0x3de>
    be5c:	e099      	b.n	bf92 <__aeabi_ddiv+0x512>
    be5e:	074a      	lsls	r2, r1, #29
    be60:	d000      	beq.n	be64 <__aeabi_ddiv+0x3e4>
    be62:	e09e      	b.n	bfa2 <__aeabi_ddiv+0x522>
    be64:	465a      	mov	r2, fp
    be66:	01d2      	lsls	r2, r2, #7
    be68:	d506      	bpl.n	be78 <__aeabi_ddiv+0x3f8>
    be6a:	465a      	mov	r2, fp
    be6c:	4b9b      	ldr	r3, [pc, #620]	; (c0dc <__aeabi_ddiv+0x65c>)
    be6e:	401a      	ands	r2, r3
    be70:	2380      	movs	r3, #128	; 0x80
    be72:	4693      	mov	fp, r2
    be74:	00db      	lsls	r3, r3, #3
    be76:	18e3      	adds	r3, r4, r3
    be78:	4a99      	ldr	r2, [pc, #612]	; (c0e0 <__aeabi_ddiv+0x660>)
    be7a:	4293      	cmp	r3, r2
    be7c:	dd68      	ble.n	bf50 <__aeabi_ddiv+0x4d0>
    be7e:	2301      	movs	r3, #1
    be80:	9a02      	ldr	r2, [sp, #8]
    be82:	4c98      	ldr	r4, [pc, #608]	; (c0e4 <__aeabi_ddiv+0x664>)
    be84:	401a      	ands	r2, r3
    be86:	2300      	movs	r3, #0
    be88:	4694      	mov	ip, r2
    be8a:	4698      	mov	r8, r3
    be8c:	2200      	movs	r2, #0
    be8e:	e6c5      	b.n	bc1c <__aeabi_ddiv+0x19c>
    be90:	2280      	movs	r2, #128	; 0x80
    be92:	464b      	mov	r3, r9
    be94:	0312      	lsls	r2, r2, #12
    be96:	4213      	tst	r3, r2
    be98:	d00a      	beq.n	beb0 <__aeabi_ddiv+0x430>
    be9a:	465b      	mov	r3, fp
    be9c:	4213      	tst	r3, r2
    be9e:	d106      	bne.n	beae <__aeabi_ddiv+0x42e>
    bea0:	431a      	orrs	r2, r3
    bea2:	0312      	lsls	r2, r2, #12
    bea4:	0b12      	lsrs	r2, r2, #12
    bea6:	46ac      	mov	ip, r5
    bea8:	4688      	mov	r8, r1
    beaa:	4c8e      	ldr	r4, [pc, #568]	; (c0e4 <__aeabi_ddiv+0x664>)
    beac:	e6b6      	b.n	bc1c <__aeabi_ddiv+0x19c>
    beae:	464b      	mov	r3, r9
    beb0:	431a      	orrs	r2, r3
    beb2:	0312      	lsls	r2, r2, #12
    beb4:	0b12      	lsrs	r2, r2, #12
    beb6:	46bc      	mov	ip, r7
    beb8:	4c8a      	ldr	r4, [pc, #552]	; (c0e4 <__aeabi_ddiv+0x664>)
    beba:	e6af      	b.n	bc1c <__aeabi_ddiv+0x19c>
    bebc:	0003      	movs	r3, r0
    bebe:	465a      	mov	r2, fp
    bec0:	3b28      	subs	r3, #40	; 0x28
    bec2:	409a      	lsls	r2, r3
    bec4:	2300      	movs	r3, #0
    bec6:	4691      	mov	r9, r2
    bec8:	4698      	mov	r8, r3
    beca:	e657      	b.n	bb7c <__aeabi_ddiv+0xfc>
    becc:	4658      	mov	r0, fp
    bece:	f001 f8c1 	bl	d054 <__clzsi2>
    bed2:	3020      	adds	r0, #32
    bed4:	e640      	b.n	bb58 <__aeabi_ddiv+0xd8>
    bed6:	0003      	movs	r3, r0
    bed8:	4652      	mov	r2, sl
    beda:	3b28      	subs	r3, #40	; 0x28
    bedc:	409a      	lsls	r2, r3
    bede:	2100      	movs	r1, #0
    bee0:	4693      	mov	fp, r2
    bee2:	e677      	b.n	bbd4 <__aeabi_ddiv+0x154>
    bee4:	f001 f8b6 	bl	d054 <__clzsi2>
    bee8:	3020      	adds	r0, #32
    beea:	e65f      	b.n	bbac <__aeabi_ddiv+0x12c>
    beec:	4588      	cmp	r8, r1
    beee:	d200      	bcs.n	bef2 <__aeabi_ddiv+0x472>
    bef0:	e6c7      	b.n	bc82 <__aeabi_ddiv+0x202>
    bef2:	464b      	mov	r3, r9
    bef4:	07de      	lsls	r6, r3, #31
    bef6:	085d      	lsrs	r5, r3, #1
    bef8:	4643      	mov	r3, r8
    befa:	085b      	lsrs	r3, r3, #1
    befc:	431e      	orrs	r6, r3
    befe:	4643      	mov	r3, r8
    bf00:	07db      	lsls	r3, r3, #31
    bf02:	469a      	mov	sl, r3
    bf04:	e6c2      	b.n	bc8c <__aeabi_ddiv+0x20c>
    bf06:	2500      	movs	r5, #0
    bf08:	4592      	cmp	sl, r2
    bf0a:	d300      	bcc.n	bf0e <__aeabi_ddiv+0x48e>
    bf0c:	e733      	b.n	bd76 <__aeabi_ddiv+0x2f6>
    bf0e:	9e03      	ldr	r6, [sp, #12]
    bf10:	4659      	mov	r1, fp
    bf12:	46b4      	mov	ip, r6
    bf14:	44e2      	add	sl, ip
    bf16:	45b2      	cmp	sl, r6
    bf18:	41ad      	sbcs	r5, r5
    bf1a:	426d      	negs	r5, r5
    bf1c:	4445      	add	r5, r8
    bf1e:	18eb      	adds	r3, r5, r3
    bf20:	3901      	subs	r1, #1
    bf22:	4598      	cmp	r8, r3
    bf24:	d207      	bcs.n	bf36 <__aeabi_ddiv+0x4b6>
    bf26:	4298      	cmp	r0, r3
    bf28:	d900      	bls.n	bf2c <__aeabi_ddiv+0x4ac>
    bf2a:	e07f      	b.n	c02c <__aeabi_ddiv+0x5ac>
    bf2c:	d100      	bne.n	bf30 <__aeabi_ddiv+0x4b0>
    bf2e:	e0bc      	b.n	c0aa <__aeabi_ddiv+0x62a>
    bf30:	1a1d      	subs	r5, r3, r0
    bf32:	468b      	mov	fp, r1
    bf34:	e71f      	b.n	bd76 <__aeabi_ddiv+0x2f6>
    bf36:	4598      	cmp	r8, r3
    bf38:	d1fa      	bne.n	bf30 <__aeabi_ddiv+0x4b0>
    bf3a:	9d03      	ldr	r5, [sp, #12]
    bf3c:	4555      	cmp	r5, sl
    bf3e:	d9f2      	bls.n	bf26 <__aeabi_ddiv+0x4a6>
    bf40:	4643      	mov	r3, r8
    bf42:	468b      	mov	fp, r1
    bf44:	1a1d      	subs	r5, r3, r0
    bf46:	e716      	b.n	bd76 <__aeabi_ddiv+0x2f6>
    bf48:	469b      	mov	fp, r3
    bf4a:	e6ca      	b.n	bce2 <__aeabi_ddiv+0x262>
    bf4c:	0015      	movs	r5, r2
    bf4e:	e6e7      	b.n	bd20 <__aeabi_ddiv+0x2a0>
    bf50:	465a      	mov	r2, fp
    bf52:	08c9      	lsrs	r1, r1, #3
    bf54:	0752      	lsls	r2, r2, #29
    bf56:	430a      	orrs	r2, r1
    bf58:	055b      	lsls	r3, r3, #21
    bf5a:	4690      	mov	r8, r2
    bf5c:	0d5c      	lsrs	r4, r3, #21
    bf5e:	465a      	mov	r2, fp
    bf60:	2301      	movs	r3, #1
    bf62:	9902      	ldr	r1, [sp, #8]
    bf64:	0252      	lsls	r2, r2, #9
    bf66:	4019      	ands	r1, r3
    bf68:	0b12      	lsrs	r2, r2, #12
    bf6a:	468c      	mov	ip, r1
    bf6c:	e656      	b.n	bc1c <__aeabi_ddiv+0x19c>
    bf6e:	2b00      	cmp	r3, #0
    bf70:	d100      	bne.n	bf74 <__aeabi_ddiv+0x4f4>
    bf72:	e76f      	b.n	be54 <__aeabi_ddiv+0x3d4>
    bf74:	4446      	add	r6, r8
    bf76:	1e4a      	subs	r2, r1, #1
    bf78:	45b0      	cmp	r8, r6
    bf7a:	d929      	bls.n	bfd0 <__aeabi_ddiv+0x550>
    bf7c:	0011      	movs	r1, r2
    bf7e:	4286      	cmp	r6, r0
    bf80:	d000      	beq.n	bf84 <__aeabi_ddiv+0x504>
    bf82:	e765      	b.n	be50 <__aeabi_ddiv+0x3d0>
    bf84:	9a03      	ldr	r2, [sp, #12]
    bf86:	4293      	cmp	r3, r2
    bf88:	d000      	beq.n	bf8c <__aeabi_ddiv+0x50c>
    bf8a:	e761      	b.n	be50 <__aeabi_ddiv+0x3d0>
    bf8c:	e762      	b.n	be54 <__aeabi_ddiv+0x3d4>
    bf8e:	2101      	movs	r1, #1
    bf90:	4249      	negs	r1, r1
    bf92:	2001      	movs	r0, #1
    bf94:	1ac2      	subs	r2, r0, r3
    bf96:	2a38      	cmp	r2, #56	; 0x38
    bf98:	dd21      	ble.n	bfde <__aeabi_ddiv+0x55e>
    bf9a:	9b02      	ldr	r3, [sp, #8]
    bf9c:	4003      	ands	r3, r0
    bf9e:	469c      	mov	ip, r3
    bfa0:	e638      	b.n	bc14 <__aeabi_ddiv+0x194>
    bfa2:	220f      	movs	r2, #15
    bfa4:	400a      	ands	r2, r1
    bfa6:	2a04      	cmp	r2, #4
    bfa8:	d100      	bne.n	bfac <__aeabi_ddiv+0x52c>
    bfaa:	e75b      	b.n	be64 <__aeabi_ddiv+0x3e4>
    bfac:	000a      	movs	r2, r1
    bfae:	1d11      	adds	r1, r2, #4
    bfb0:	4291      	cmp	r1, r2
    bfb2:	4192      	sbcs	r2, r2
    bfb4:	4252      	negs	r2, r2
    bfb6:	4493      	add	fp, r2
    bfb8:	e754      	b.n	be64 <__aeabi_ddiv+0x3e4>
    bfba:	4b47      	ldr	r3, [pc, #284]	; (c0d8 <__aeabi_ddiv+0x658>)
    bfbc:	18e3      	adds	r3, r4, r3
    bfbe:	2b00      	cmp	r3, #0
    bfc0:	dde5      	ble.n	bf8e <__aeabi_ddiv+0x50e>
    bfc2:	2201      	movs	r2, #1
    bfc4:	4252      	negs	r2, r2
    bfc6:	e7f2      	b.n	bfae <__aeabi_ddiv+0x52e>
    bfc8:	001d      	movs	r5, r3
    bfca:	e6fa      	b.n	bdc2 <__aeabi_ddiv+0x342>
    bfcc:	469a      	mov	sl, r3
    bfce:	e71c      	b.n	be0a <__aeabi_ddiv+0x38a>
    bfd0:	42b0      	cmp	r0, r6
    bfd2:	d839      	bhi.n	c048 <__aeabi_ddiv+0x5c8>
    bfd4:	d06e      	beq.n	c0b4 <__aeabi_ddiv+0x634>
    bfd6:	0011      	movs	r1, r2
    bfd8:	e73a      	b.n	be50 <__aeabi_ddiv+0x3d0>
    bfda:	9302      	str	r3, [sp, #8]
    bfdc:	e73a      	b.n	be54 <__aeabi_ddiv+0x3d4>
    bfde:	2a1f      	cmp	r2, #31
    bfe0:	dc3c      	bgt.n	c05c <__aeabi_ddiv+0x5dc>
    bfe2:	2320      	movs	r3, #32
    bfe4:	1a9b      	subs	r3, r3, r2
    bfe6:	000c      	movs	r4, r1
    bfe8:	4658      	mov	r0, fp
    bfea:	4099      	lsls	r1, r3
    bfec:	4098      	lsls	r0, r3
    bfee:	1e4b      	subs	r3, r1, #1
    bff0:	4199      	sbcs	r1, r3
    bff2:	465b      	mov	r3, fp
    bff4:	40d4      	lsrs	r4, r2
    bff6:	40d3      	lsrs	r3, r2
    bff8:	4320      	orrs	r0, r4
    bffa:	4308      	orrs	r0, r1
    bffc:	001a      	movs	r2, r3
    bffe:	0743      	lsls	r3, r0, #29
    c000:	d009      	beq.n	c016 <__aeabi_ddiv+0x596>
    c002:	230f      	movs	r3, #15
    c004:	4003      	ands	r3, r0
    c006:	2b04      	cmp	r3, #4
    c008:	d005      	beq.n	c016 <__aeabi_ddiv+0x596>
    c00a:	0001      	movs	r1, r0
    c00c:	1d08      	adds	r0, r1, #4
    c00e:	4288      	cmp	r0, r1
    c010:	419b      	sbcs	r3, r3
    c012:	425b      	negs	r3, r3
    c014:	18d2      	adds	r2, r2, r3
    c016:	0213      	lsls	r3, r2, #8
    c018:	d53a      	bpl.n	c090 <__aeabi_ddiv+0x610>
    c01a:	2301      	movs	r3, #1
    c01c:	9a02      	ldr	r2, [sp, #8]
    c01e:	2401      	movs	r4, #1
    c020:	401a      	ands	r2, r3
    c022:	2300      	movs	r3, #0
    c024:	4694      	mov	ip, r2
    c026:	4698      	mov	r8, r3
    c028:	2200      	movs	r2, #0
    c02a:	e5f7      	b.n	bc1c <__aeabi_ddiv+0x19c>
    c02c:	2102      	movs	r1, #2
    c02e:	4249      	negs	r1, r1
    c030:	468c      	mov	ip, r1
    c032:	9d03      	ldr	r5, [sp, #12]
    c034:	44e3      	add	fp, ip
    c036:	46ac      	mov	ip, r5
    c038:	44e2      	add	sl, ip
    c03a:	45aa      	cmp	sl, r5
    c03c:	41ad      	sbcs	r5, r5
    c03e:	426d      	negs	r5, r5
    c040:	4445      	add	r5, r8
    c042:	18ed      	adds	r5, r5, r3
    c044:	1a2d      	subs	r5, r5, r0
    c046:	e696      	b.n	bd76 <__aeabi_ddiv+0x2f6>
    c048:	1e8a      	subs	r2, r1, #2
    c04a:	9903      	ldr	r1, [sp, #12]
    c04c:	004d      	lsls	r5, r1, #1
    c04e:	428d      	cmp	r5, r1
    c050:	4189      	sbcs	r1, r1
    c052:	4249      	negs	r1, r1
    c054:	4441      	add	r1, r8
    c056:	1876      	adds	r6, r6, r1
    c058:	9503      	str	r5, [sp, #12]
    c05a:	e78f      	b.n	bf7c <__aeabi_ddiv+0x4fc>
    c05c:	201f      	movs	r0, #31
    c05e:	4240      	negs	r0, r0
    c060:	1ac3      	subs	r3, r0, r3
    c062:	4658      	mov	r0, fp
    c064:	40d8      	lsrs	r0, r3
    c066:	0003      	movs	r3, r0
    c068:	2a20      	cmp	r2, #32
    c06a:	d028      	beq.n	c0be <__aeabi_ddiv+0x63e>
    c06c:	2040      	movs	r0, #64	; 0x40
    c06e:	465d      	mov	r5, fp
    c070:	1a82      	subs	r2, r0, r2
    c072:	4095      	lsls	r5, r2
    c074:	4329      	orrs	r1, r5
    c076:	1e4a      	subs	r2, r1, #1
    c078:	4191      	sbcs	r1, r2
    c07a:	4319      	orrs	r1, r3
    c07c:	2307      	movs	r3, #7
    c07e:	2200      	movs	r2, #0
    c080:	400b      	ands	r3, r1
    c082:	d009      	beq.n	c098 <__aeabi_ddiv+0x618>
    c084:	230f      	movs	r3, #15
    c086:	2200      	movs	r2, #0
    c088:	400b      	ands	r3, r1
    c08a:	0008      	movs	r0, r1
    c08c:	2b04      	cmp	r3, #4
    c08e:	d1bd      	bne.n	c00c <__aeabi_ddiv+0x58c>
    c090:	0001      	movs	r1, r0
    c092:	0753      	lsls	r3, r2, #29
    c094:	0252      	lsls	r2, r2, #9
    c096:	0b12      	lsrs	r2, r2, #12
    c098:	08c9      	lsrs	r1, r1, #3
    c09a:	4319      	orrs	r1, r3
    c09c:	2301      	movs	r3, #1
    c09e:	4688      	mov	r8, r1
    c0a0:	9902      	ldr	r1, [sp, #8]
    c0a2:	2400      	movs	r4, #0
    c0a4:	4019      	ands	r1, r3
    c0a6:	468c      	mov	ip, r1
    c0a8:	e5b8      	b.n	bc1c <__aeabi_ddiv+0x19c>
    c0aa:	4552      	cmp	r2, sl
    c0ac:	d8be      	bhi.n	c02c <__aeabi_ddiv+0x5ac>
    c0ae:	468b      	mov	fp, r1
    c0b0:	2500      	movs	r5, #0
    c0b2:	e660      	b.n	bd76 <__aeabi_ddiv+0x2f6>
    c0b4:	9d03      	ldr	r5, [sp, #12]
    c0b6:	429d      	cmp	r5, r3
    c0b8:	d3c6      	bcc.n	c048 <__aeabi_ddiv+0x5c8>
    c0ba:	0011      	movs	r1, r2
    c0bc:	e762      	b.n	bf84 <__aeabi_ddiv+0x504>
    c0be:	2500      	movs	r5, #0
    c0c0:	e7d8      	b.n	c074 <__aeabi_ddiv+0x5f4>
    c0c2:	2280      	movs	r2, #128	; 0x80
    c0c4:	465b      	mov	r3, fp
    c0c6:	0312      	lsls	r2, r2, #12
    c0c8:	431a      	orrs	r2, r3
    c0ca:	9b01      	ldr	r3, [sp, #4]
    c0cc:	0312      	lsls	r2, r2, #12
    c0ce:	0b12      	lsrs	r2, r2, #12
    c0d0:	469c      	mov	ip, r3
    c0d2:	4688      	mov	r8, r1
    c0d4:	4c03      	ldr	r4, [pc, #12]	; (c0e4 <__aeabi_ddiv+0x664>)
    c0d6:	e5a1      	b.n	bc1c <__aeabi_ddiv+0x19c>
    c0d8:	000003ff 	.word	0x000003ff
    c0dc:	feffffff 	.word	0xfeffffff
    c0e0:	000007fe 	.word	0x000007fe
    c0e4:	000007ff 	.word	0x000007ff

0000c0e8 <__eqdf2>:
    c0e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    c0ea:	464f      	mov	r7, r9
    c0ec:	4646      	mov	r6, r8
    c0ee:	46d6      	mov	lr, sl
    c0f0:	005c      	lsls	r4, r3, #1
    c0f2:	b5c0      	push	{r6, r7, lr}
    c0f4:	031f      	lsls	r7, r3, #12
    c0f6:	0fdb      	lsrs	r3, r3, #31
    c0f8:	469a      	mov	sl, r3
    c0fa:	4b17      	ldr	r3, [pc, #92]	; (c158 <__eqdf2+0x70>)
    c0fc:	030e      	lsls	r6, r1, #12
    c0fe:	004d      	lsls	r5, r1, #1
    c100:	4684      	mov	ip, r0
    c102:	4680      	mov	r8, r0
    c104:	0b36      	lsrs	r6, r6, #12
    c106:	0d6d      	lsrs	r5, r5, #21
    c108:	0fc9      	lsrs	r1, r1, #31
    c10a:	4691      	mov	r9, r2
    c10c:	0b3f      	lsrs	r7, r7, #12
    c10e:	0d64      	lsrs	r4, r4, #21
    c110:	2001      	movs	r0, #1
    c112:	429d      	cmp	r5, r3
    c114:	d008      	beq.n	c128 <__eqdf2+0x40>
    c116:	429c      	cmp	r4, r3
    c118:	d001      	beq.n	c11e <__eqdf2+0x36>
    c11a:	42a5      	cmp	r5, r4
    c11c:	d00b      	beq.n	c136 <__eqdf2+0x4e>
    c11e:	bc1c      	pop	{r2, r3, r4}
    c120:	4690      	mov	r8, r2
    c122:	4699      	mov	r9, r3
    c124:	46a2      	mov	sl, r4
    c126:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c128:	4663      	mov	r3, ip
    c12a:	4333      	orrs	r3, r6
    c12c:	d1f7      	bne.n	c11e <__eqdf2+0x36>
    c12e:	42ac      	cmp	r4, r5
    c130:	d1f5      	bne.n	c11e <__eqdf2+0x36>
    c132:	433a      	orrs	r2, r7
    c134:	d1f3      	bne.n	c11e <__eqdf2+0x36>
    c136:	2001      	movs	r0, #1
    c138:	42be      	cmp	r6, r7
    c13a:	d1f0      	bne.n	c11e <__eqdf2+0x36>
    c13c:	45c8      	cmp	r8, r9
    c13e:	d1ee      	bne.n	c11e <__eqdf2+0x36>
    c140:	4551      	cmp	r1, sl
    c142:	d007      	beq.n	c154 <__eqdf2+0x6c>
    c144:	2d00      	cmp	r5, #0
    c146:	d1ea      	bne.n	c11e <__eqdf2+0x36>
    c148:	4663      	mov	r3, ip
    c14a:	431e      	orrs	r6, r3
    c14c:	0030      	movs	r0, r6
    c14e:	1e46      	subs	r6, r0, #1
    c150:	41b0      	sbcs	r0, r6
    c152:	e7e4      	b.n	c11e <__eqdf2+0x36>
    c154:	2000      	movs	r0, #0
    c156:	e7e2      	b.n	c11e <__eqdf2+0x36>
    c158:	000007ff 	.word	0x000007ff

0000c15c <__gedf2>:
    c15c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c15e:	4645      	mov	r5, r8
    c160:	46de      	mov	lr, fp
    c162:	4657      	mov	r7, sl
    c164:	464e      	mov	r6, r9
    c166:	b5e0      	push	{r5, r6, r7, lr}
    c168:	031f      	lsls	r7, r3, #12
    c16a:	0b3d      	lsrs	r5, r7, #12
    c16c:	4f2c      	ldr	r7, [pc, #176]	; (c220 <__gedf2+0xc4>)
    c16e:	030e      	lsls	r6, r1, #12
    c170:	004c      	lsls	r4, r1, #1
    c172:	46ab      	mov	fp, r5
    c174:	005d      	lsls	r5, r3, #1
    c176:	4684      	mov	ip, r0
    c178:	0b36      	lsrs	r6, r6, #12
    c17a:	0d64      	lsrs	r4, r4, #21
    c17c:	0fc9      	lsrs	r1, r1, #31
    c17e:	4690      	mov	r8, r2
    c180:	0d6d      	lsrs	r5, r5, #21
    c182:	0fdb      	lsrs	r3, r3, #31
    c184:	42bc      	cmp	r4, r7
    c186:	d02a      	beq.n	c1de <__gedf2+0x82>
    c188:	4f25      	ldr	r7, [pc, #148]	; (c220 <__gedf2+0xc4>)
    c18a:	42bd      	cmp	r5, r7
    c18c:	d02d      	beq.n	c1ea <__gedf2+0x8e>
    c18e:	2c00      	cmp	r4, #0
    c190:	d10f      	bne.n	c1b2 <__gedf2+0x56>
    c192:	4330      	orrs	r0, r6
    c194:	0007      	movs	r7, r0
    c196:	4681      	mov	r9, r0
    c198:	4278      	negs	r0, r7
    c19a:	4178      	adcs	r0, r7
    c19c:	b2c0      	uxtb	r0, r0
    c19e:	2d00      	cmp	r5, #0
    c1a0:	d117      	bne.n	c1d2 <__gedf2+0x76>
    c1a2:	465f      	mov	r7, fp
    c1a4:	433a      	orrs	r2, r7
    c1a6:	d114      	bne.n	c1d2 <__gedf2+0x76>
    c1a8:	464b      	mov	r3, r9
    c1aa:	2000      	movs	r0, #0
    c1ac:	2b00      	cmp	r3, #0
    c1ae:	d00a      	beq.n	c1c6 <__gedf2+0x6a>
    c1b0:	e006      	b.n	c1c0 <__gedf2+0x64>
    c1b2:	2d00      	cmp	r5, #0
    c1b4:	d102      	bne.n	c1bc <__gedf2+0x60>
    c1b6:	4658      	mov	r0, fp
    c1b8:	4302      	orrs	r2, r0
    c1ba:	d001      	beq.n	c1c0 <__gedf2+0x64>
    c1bc:	4299      	cmp	r1, r3
    c1be:	d018      	beq.n	c1f2 <__gedf2+0x96>
    c1c0:	4248      	negs	r0, r1
    c1c2:	2101      	movs	r1, #1
    c1c4:	4308      	orrs	r0, r1
    c1c6:	bc3c      	pop	{r2, r3, r4, r5}
    c1c8:	4690      	mov	r8, r2
    c1ca:	4699      	mov	r9, r3
    c1cc:	46a2      	mov	sl, r4
    c1ce:	46ab      	mov	fp, r5
    c1d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c1d2:	2800      	cmp	r0, #0
    c1d4:	d0f2      	beq.n	c1bc <__gedf2+0x60>
    c1d6:	2001      	movs	r0, #1
    c1d8:	3b01      	subs	r3, #1
    c1da:	4318      	orrs	r0, r3
    c1dc:	e7f3      	b.n	c1c6 <__gedf2+0x6a>
    c1de:	0037      	movs	r7, r6
    c1e0:	4307      	orrs	r7, r0
    c1e2:	d0d1      	beq.n	c188 <__gedf2+0x2c>
    c1e4:	2002      	movs	r0, #2
    c1e6:	4240      	negs	r0, r0
    c1e8:	e7ed      	b.n	c1c6 <__gedf2+0x6a>
    c1ea:	465f      	mov	r7, fp
    c1ec:	4317      	orrs	r7, r2
    c1ee:	d0ce      	beq.n	c18e <__gedf2+0x32>
    c1f0:	e7f8      	b.n	c1e4 <__gedf2+0x88>
    c1f2:	42ac      	cmp	r4, r5
    c1f4:	dce4      	bgt.n	c1c0 <__gedf2+0x64>
    c1f6:	da03      	bge.n	c200 <__gedf2+0xa4>
    c1f8:	1e48      	subs	r0, r1, #1
    c1fa:	2101      	movs	r1, #1
    c1fc:	4308      	orrs	r0, r1
    c1fe:	e7e2      	b.n	c1c6 <__gedf2+0x6a>
    c200:	455e      	cmp	r6, fp
    c202:	d8dd      	bhi.n	c1c0 <__gedf2+0x64>
    c204:	d006      	beq.n	c214 <__gedf2+0xb8>
    c206:	2000      	movs	r0, #0
    c208:	455e      	cmp	r6, fp
    c20a:	d2dc      	bcs.n	c1c6 <__gedf2+0x6a>
    c20c:	2301      	movs	r3, #1
    c20e:	1e48      	subs	r0, r1, #1
    c210:	4318      	orrs	r0, r3
    c212:	e7d8      	b.n	c1c6 <__gedf2+0x6a>
    c214:	45c4      	cmp	ip, r8
    c216:	d8d3      	bhi.n	c1c0 <__gedf2+0x64>
    c218:	2000      	movs	r0, #0
    c21a:	45c4      	cmp	ip, r8
    c21c:	d3f6      	bcc.n	c20c <__gedf2+0xb0>
    c21e:	e7d2      	b.n	c1c6 <__gedf2+0x6a>
    c220:	000007ff 	.word	0x000007ff

0000c224 <__ledf2>:
    c224:	b5f0      	push	{r4, r5, r6, r7, lr}
    c226:	464e      	mov	r6, r9
    c228:	4645      	mov	r5, r8
    c22a:	46de      	mov	lr, fp
    c22c:	4657      	mov	r7, sl
    c22e:	005c      	lsls	r4, r3, #1
    c230:	b5e0      	push	{r5, r6, r7, lr}
    c232:	031f      	lsls	r7, r3, #12
    c234:	0fdb      	lsrs	r3, r3, #31
    c236:	4699      	mov	r9, r3
    c238:	4b2a      	ldr	r3, [pc, #168]	; (c2e4 <__ledf2+0xc0>)
    c23a:	030e      	lsls	r6, r1, #12
    c23c:	004d      	lsls	r5, r1, #1
    c23e:	0fc9      	lsrs	r1, r1, #31
    c240:	4684      	mov	ip, r0
    c242:	0b36      	lsrs	r6, r6, #12
    c244:	0d6d      	lsrs	r5, r5, #21
    c246:	468b      	mov	fp, r1
    c248:	4690      	mov	r8, r2
    c24a:	0b3f      	lsrs	r7, r7, #12
    c24c:	0d64      	lsrs	r4, r4, #21
    c24e:	429d      	cmp	r5, r3
    c250:	d020      	beq.n	c294 <__ledf2+0x70>
    c252:	4b24      	ldr	r3, [pc, #144]	; (c2e4 <__ledf2+0xc0>)
    c254:	429c      	cmp	r4, r3
    c256:	d022      	beq.n	c29e <__ledf2+0x7a>
    c258:	2d00      	cmp	r5, #0
    c25a:	d112      	bne.n	c282 <__ledf2+0x5e>
    c25c:	4330      	orrs	r0, r6
    c25e:	4243      	negs	r3, r0
    c260:	4143      	adcs	r3, r0
    c262:	b2db      	uxtb	r3, r3
    c264:	2c00      	cmp	r4, #0
    c266:	d01f      	beq.n	c2a8 <__ledf2+0x84>
    c268:	2b00      	cmp	r3, #0
    c26a:	d00c      	beq.n	c286 <__ledf2+0x62>
    c26c:	464b      	mov	r3, r9
    c26e:	2001      	movs	r0, #1
    c270:	3b01      	subs	r3, #1
    c272:	4303      	orrs	r3, r0
    c274:	0018      	movs	r0, r3
    c276:	bc3c      	pop	{r2, r3, r4, r5}
    c278:	4690      	mov	r8, r2
    c27a:	4699      	mov	r9, r3
    c27c:	46a2      	mov	sl, r4
    c27e:	46ab      	mov	fp, r5
    c280:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c282:	2c00      	cmp	r4, #0
    c284:	d016      	beq.n	c2b4 <__ledf2+0x90>
    c286:	45cb      	cmp	fp, r9
    c288:	d017      	beq.n	c2ba <__ledf2+0x96>
    c28a:	465b      	mov	r3, fp
    c28c:	4259      	negs	r1, r3
    c28e:	2301      	movs	r3, #1
    c290:	430b      	orrs	r3, r1
    c292:	e7ef      	b.n	c274 <__ledf2+0x50>
    c294:	0031      	movs	r1, r6
    c296:	2302      	movs	r3, #2
    c298:	4301      	orrs	r1, r0
    c29a:	d1eb      	bne.n	c274 <__ledf2+0x50>
    c29c:	e7d9      	b.n	c252 <__ledf2+0x2e>
    c29e:	0039      	movs	r1, r7
    c2a0:	2302      	movs	r3, #2
    c2a2:	4311      	orrs	r1, r2
    c2a4:	d1e6      	bne.n	c274 <__ledf2+0x50>
    c2a6:	e7d7      	b.n	c258 <__ledf2+0x34>
    c2a8:	433a      	orrs	r2, r7
    c2aa:	d1dd      	bne.n	c268 <__ledf2+0x44>
    c2ac:	2300      	movs	r3, #0
    c2ae:	2800      	cmp	r0, #0
    c2b0:	d0e0      	beq.n	c274 <__ledf2+0x50>
    c2b2:	e7ea      	b.n	c28a <__ledf2+0x66>
    c2b4:	433a      	orrs	r2, r7
    c2b6:	d1e6      	bne.n	c286 <__ledf2+0x62>
    c2b8:	e7e7      	b.n	c28a <__ledf2+0x66>
    c2ba:	42a5      	cmp	r5, r4
    c2bc:	dce5      	bgt.n	c28a <__ledf2+0x66>
    c2be:	db05      	blt.n	c2cc <__ledf2+0xa8>
    c2c0:	42be      	cmp	r6, r7
    c2c2:	d8e2      	bhi.n	c28a <__ledf2+0x66>
    c2c4:	d007      	beq.n	c2d6 <__ledf2+0xb2>
    c2c6:	2300      	movs	r3, #0
    c2c8:	42be      	cmp	r6, r7
    c2ca:	d2d3      	bcs.n	c274 <__ledf2+0x50>
    c2cc:	4659      	mov	r1, fp
    c2ce:	2301      	movs	r3, #1
    c2d0:	3901      	subs	r1, #1
    c2d2:	430b      	orrs	r3, r1
    c2d4:	e7ce      	b.n	c274 <__ledf2+0x50>
    c2d6:	45c4      	cmp	ip, r8
    c2d8:	d8d7      	bhi.n	c28a <__ledf2+0x66>
    c2da:	2300      	movs	r3, #0
    c2dc:	45c4      	cmp	ip, r8
    c2de:	d3f5      	bcc.n	c2cc <__ledf2+0xa8>
    c2e0:	e7c8      	b.n	c274 <__ledf2+0x50>
    c2e2:	46c0      	nop			; (mov r8, r8)
    c2e4:	000007ff 	.word	0x000007ff

0000c2e8 <__aeabi_dmul>:
    c2e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    c2ea:	4657      	mov	r7, sl
    c2ec:	4645      	mov	r5, r8
    c2ee:	46de      	mov	lr, fp
    c2f0:	464e      	mov	r6, r9
    c2f2:	b5e0      	push	{r5, r6, r7, lr}
    c2f4:	030c      	lsls	r4, r1, #12
    c2f6:	4698      	mov	r8, r3
    c2f8:	004e      	lsls	r6, r1, #1
    c2fa:	0b23      	lsrs	r3, r4, #12
    c2fc:	b087      	sub	sp, #28
    c2fe:	0007      	movs	r7, r0
    c300:	4692      	mov	sl, r2
    c302:	469b      	mov	fp, r3
    c304:	0d76      	lsrs	r6, r6, #21
    c306:	0fcd      	lsrs	r5, r1, #31
    c308:	2e00      	cmp	r6, #0
    c30a:	d06b      	beq.n	c3e4 <__aeabi_dmul+0xfc>
    c30c:	4b6d      	ldr	r3, [pc, #436]	; (c4c4 <__aeabi_dmul+0x1dc>)
    c30e:	429e      	cmp	r6, r3
    c310:	d035      	beq.n	c37e <__aeabi_dmul+0x96>
    c312:	2480      	movs	r4, #128	; 0x80
    c314:	465b      	mov	r3, fp
    c316:	0f42      	lsrs	r2, r0, #29
    c318:	0424      	lsls	r4, r4, #16
    c31a:	00db      	lsls	r3, r3, #3
    c31c:	4314      	orrs	r4, r2
    c31e:	431c      	orrs	r4, r3
    c320:	00c3      	lsls	r3, r0, #3
    c322:	4699      	mov	r9, r3
    c324:	4b68      	ldr	r3, [pc, #416]	; (c4c8 <__aeabi_dmul+0x1e0>)
    c326:	46a3      	mov	fp, r4
    c328:	469c      	mov	ip, r3
    c32a:	2300      	movs	r3, #0
    c32c:	2700      	movs	r7, #0
    c32e:	4466      	add	r6, ip
    c330:	9302      	str	r3, [sp, #8]
    c332:	4643      	mov	r3, r8
    c334:	031c      	lsls	r4, r3, #12
    c336:	005a      	lsls	r2, r3, #1
    c338:	0fdb      	lsrs	r3, r3, #31
    c33a:	4650      	mov	r0, sl
    c33c:	0b24      	lsrs	r4, r4, #12
    c33e:	0d52      	lsrs	r2, r2, #21
    c340:	4698      	mov	r8, r3
    c342:	d100      	bne.n	c346 <__aeabi_dmul+0x5e>
    c344:	e076      	b.n	c434 <__aeabi_dmul+0x14c>
    c346:	4b5f      	ldr	r3, [pc, #380]	; (c4c4 <__aeabi_dmul+0x1dc>)
    c348:	429a      	cmp	r2, r3
    c34a:	d06d      	beq.n	c428 <__aeabi_dmul+0x140>
    c34c:	2380      	movs	r3, #128	; 0x80
    c34e:	0f41      	lsrs	r1, r0, #29
    c350:	041b      	lsls	r3, r3, #16
    c352:	430b      	orrs	r3, r1
    c354:	495c      	ldr	r1, [pc, #368]	; (c4c8 <__aeabi_dmul+0x1e0>)
    c356:	00e4      	lsls	r4, r4, #3
    c358:	468c      	mov	ip, r1
    c35a:	431c      	orrs	r4, r3
    c35c:	00c3      	lsls	r3, r0, #3
    c35e:	2000      	movs	r0, #0
    c360:	4462      	add	r2, ip
    c362:	4641      	mov	r1, r8
    c364:	18b6      	adds	r6, r6, r2
    c366:	4069      	eors	r1, r5
    c368:	1c72      	adds	r2, r6, #1
    c36a:	9101      	str	r1, [sp, #4]
    c36c:	4694      	mov	ip, r2
    c36e:	4307      	orrs	r7, r0
    c370:	2f0f      	cmp	r7, #15
    c372:	d900      	bls.n	c376 <__aeabi_dmul+0x8e>
    c374:	e0b0      	b.n	c4d8 <__aeabi_dmul+0x1f0>
    c376:	4a55      	ldr	r2, [pc, #340]	; (c4cc <__aeabi_dmul+0x1e4>)
    c378:	00bf      	lsls	r7, r7, #2
    c37a:	59d2      	ldr	r2, [r2, r7]
    c37c:	4697      	mov	pc, r2
    c37e:	465b      	mov	r3, fp
    c380:	4303      	orrs	r3, r0
    c382:	4699      	mov	r9, r3
    c384:	d000      	beq.n	c388 <__aeabi_dmul+0xa0>
    c386:	e087      	b.n	c498 <__aeabi_dmul+0x1b0>
    c388:	2300      	movs	r3, #0
    c38a:	469b      	mov	fp, r3
    c38c:	3302      	adds	r3, #2
    c38e:	2708      	movs	r7, #8
    c390:	9302      	str	r3, [sp, #8]
    c392:	e7ce      	b.n	c332 <__aeabi_dmul+0x4a>
    c394:	4642      	mov	r2, r8
    c396:	9201      	str	r2, [sp, #4]
    c398:	2802      	cmp	r0, #2
    c39a:	d067      	beq.n	c46c <__aeabi_dmul+0x184>
    c39c:	2803      	cmp	r0, #3
    c39e:	d100      	bne.n	c3a2 <__aeabi_dmul+0xba>
    c3a0:	e20e      	b.n	c7c0 <__aeabi_dmul+0x4d8>
    c3a2:	2801      	cmp	r0, #1
    c3a4:	d000      	beq.n	c3a8 <__aeabi_dmul+0xc0>
    c3a6:	e162      	b.n	c66e <__aeabi_dmul+0x386>
    c3a8:	2300      	movs	r3, #0
    c3aa:	2400      	movs	r4, #0
    c3ac:	2200      	movs	r2, #0
    c3ae:	4699      	mov	r9, r3
    c3b0:	9901      	ldr	r1, [sp, #4]
    c3b2:	4001      	ands	r1, r0
    c3b4:	b2cd      	uxtb	r5, r1
    c3b6:	2100      	movs	r1, #0
    c3b8:	0312      	lsls	r2, r2, #12
    c3ba:	0d0b      	lsrs	r3, r1, #20
    c3bc:	0b12      	lsrs	r2, r2, #12
    c3be:	051b      	lsls	r3, r3, #20
    c3c0:	4313      	orrs	r3, r2
    c3c2:	4a43      	ldr	r2, [pc, #268]	; (c4d0 <__aeabi_dmul+0x1e8>)
    c3c4:	0524      	lsls	r4, r4, #20
    c3c6:	4013      	ands	r3, r2
    c3c8:	431c      	orrs	r4, r3
    c3ca:	0064      	lsls	r4, r4, #1
    c3cc:	07ed      	lsls	r5, r5, #31
    c3ce:	0864      	lsrs	r4, r4, #1
    c3d0:	432c      	orrs	r4, r5
    c3d2:	4648      	mov	r0, r9
    c3d4:	0021      	movs	r1, r4
    c3d6:	b007      	add	sp, #28
    c3d8:	bc3c      	pop	{r2, r3, r4, r5}
    c3da:	4690      	mov	r8, r2
    c3dc:	4699      	mov	r9, r3
    c3de:	46a2      	mov	sl, r4
    c3e0:	46ab      	mov	fp, r5
    c3e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c3e4:	4303      	orrs	r3, r0
    c3e6:	4699      	mov	r9, r3
    c3e8:	d04f      	beq.n	c48a <__aeabi_dmul+0x1a2>
    c3ea:	465b      	mov	r3, fp
    c3ec:	2b00      	cmp	r3, #0
    c3ee:	d100      	bne.n	c3f2 <__aeabi_dmul+0x10a>
    c3f0:	e189      	b.n	c706 <__aeabi_dmul+0x41e>
    c3f2:	4658      	mov	r0, fp
    c3f4:	f000 fe2e 	bl	d054 <__clzsi2>
    c3f8:	0003      	movs	r3, r0
    c3fa:	3b0b      	subs	r3, #11
    c3fc:	2b1c      	cmp	r3, #28
    c3fe:	dd00      	ble.n	c402 <__aeabi_dmul+0x11a>
    c400:	e17a      	b.n	c6f8 <__aeabi_dmul+0x410>
    c402:	221d      	movs	r2, #29
    c404:	1ad3      	subs	r3, r2, r3
    c406:	003a      	movs	r2, r7
    c408:	0001      	movs	r1, r0
    c40a:	465c      	mov	r4, fp
    c40c:	40da      	lsrs	r2, r3
    c40e:	3908      	subs	r1, #8
    c410:	408c      	lsls	r4, r1
    c412:	0013      	movs	r3, r2
    c414:	408f      	lsls	r7, r1
    c416:	4323      	orrs	r3, r4
    c418:	469b      	mov	fp, r3
    c41a:	46b9      	mov	r9, r7
    c41c:	2300      	movs	r3, #0
    c41e:	4e2d      	ldr	r6, [pc, #180]	; (c4d4 <__aeabi_dmul+0x1ec>)
    c420:	2700      	movs	r7, #0
    c422:	1a36      	subs	r6, r6, r0
    c424:	9302      	str	r3, [sp, #8]
    c426:	e784      	b.n	c332 <__aeabi_dmul+0x4a>
    c428:	4653      	mov	r3, sl
    c42a:	4323      	orrs	r3, r4
    c42c:	d12a      	bne.n	c484 <__aeabi_dmul+0x19c>
    c42e:	2400      	movs	r4, #0
    c430:	2002      	movs	r0, #2
    c432:	e796      	b.n	c362 <__aeabi_dmul+0x7a>
    c434:	4653      	mov	r3, sl
    c436:	4323      	orrs	r3, r4
    c438:	d020      	beq.n	c47c <__aeabi_dmul+0x194>
    c43a:	2c00      	cmp	r4, #0
    c43c:	d100      	bne.n	c440 <__aeabi_dmul+0x158>
    c43e:	e157      	b.n	c6f0 <__aeabi_dmul+0x408>
    c440:	0020      	movs	r0, r4
    c442:	f000 fe07 	bl	d054 <__clzsi2>
    c446:	0003      	movs	r3, r0
    c448:	3b0b      	subs	r3, #11
    c44a:	2b1c      	cmp	r3, #28
    c44c:	dd00      	ble.n	c450 <__aeabi_dmul+0x168>
    c44e:	e149      	b.n	c6e4 <__aeabi_dmul+0x3fc>
    c450:	211d      	movs	r1, #29
    c452:	1acb      	subs	r3, r1, r3
    c454:	4651      	mov	r1, sl
    c456:	0002      	movs	r2, r0
    c458:	40d9      	lsrs	r1, r3
    c45a:	4653      	mov	r3, sl
    c45c:	3a08      	subs	r2, #8
    c45e:	4094      	lsls	r4, r2
    c460:	4093      	lsls	r3, r2
    c462:	430c      	orrs	r4, r1
    c464:	4a1b      	ldr	r2, [pc, #108]	; (c4d4 <__aeabi_dmul+0x1ec>)
    c466:	1a12      	subs	r2, r2, r0
    c468:	2000      	movs	r0, #0
    c46a:	e77a      	b.n	c362 <__aeabi_dmul+0x7a>
    c46c:	2501      	movs	r5, #1
    c46e:	9b01      	ldr	r3, [sp, #4]
    c470:	4c14      	ldr	r4, [pc, #80]	; (c4c4 <__aeabi_dmul+0x1dc>)
    c472:	401d      	ands	r5, r3
    c474:	2300      	movs	r3, #0
    c476:	2200      	movs	r2, #0
    c478:	4699      	mov	r9, r3
    c47a:	e79c      	b.n	c3b6 <__aeabi_dmul+0xce>
    c47c:	2400      	movs	r4, #0
    c47e:	2200      	movs	r2, #0
    c480:	2001      	movs	r0, #1
    c482:	e76e      	b.n	c362 <__aeabi_dmul+0x7a>
    c484:	4653      	mov	r3, sl
    c486:	2003      	movs	r0, #3
    c488:	e76b      	b.n	c362 <__aeabi_dmul+0x7a>
    c48a:	2300      	movs	r3, #0
    c48c:	469b      	mov	fp, r3
    c48e:	3301      	adds	r3, #1
    c490:	2704      	movs	r7, #4
    c492:	2600      	movs	r6, #0
    c494:	9302      	str	r3, [sp, #8]
    c496:	e74c      	b.n	c332 <__aeabi_dmul+0x4a>
    c498:	2303      	movs	r3, #3
    c49a:	4681      	mov	r9, r0
    c49c:	270c      	movs	r7, #12
    c49e:	9302      	str	r3, [sp, #8]
    c4a0:	e747      	b.n	c332 <__aeabi_dmul+0x4a>
    c4a2:	2280      	movs	r2, #128	; 0x80
    c4a4:	2300      	movs	r3, #0
    c4a6:	2500      	movs	r5, #0
    c4a8:	0312      	lsls	r2, r2, #12
    c4aa:	4699      	mov	r9, r3
    c4ac:	4c05      	ldr	r4, [pc, #20]	; (c4c4 <__aeabi_dmul+0x1dc>)
    c4ae:	e782      	b.n	c3b6 <__aeabi_dmul+0xce>
    c4b0:	465c      	mov	r4, fp
    c4b2:	464b      	mov	r3, r9
    c4b4:	9802      	ldr	r0, [sp, #8]
    c4b6:	e76f      	b.n	c398 <__aeabi_dmul+0xb0>
    c4b8:	465c      	mov	r4, fp
    c4ba:	464b      	mov	r3, r9
    c4bc:	9501      	str	r5, [sp, #4]
    c4be:	9802      	ldr	r0, [sp, #8]
    c4c0:	e76a      	b.n	c398 <__aeabi_dmul+0xb0>
    c4c2:	46c0      	nop			; (mov r8, r8)
    c4c4:	000007ff 	.word	0x000007ff
    c4c8:	fffffc01 	.word	0xfffffc01
    c4cc:	000123a0 	.word	0x000123a0
    c4d0:	800fffff 	.word	0x800fffff
    c4d4:	fffffc0d 	.word	0xfffffc0d
    c4d8:	464a      	mov	r2, r9
    c4da:	4649      	mov	r1, r9
    c4dc:	0c17      	lsrs	r7, r2, #16
    c4de:	0c1a      	lsrs	r2, r3, #16
    c4e0:	041b      	lsls	r3, r3, #16
    c4e2:	0c1b      	lsrs	r3, r3, #16
    c4e4:	0408      	lsls	r0, r1, #16
    c4e6:	0019      	movs	r1, r3
    c4e8:	0c00      	lsrs	r0, r0, #16
    c4ea:	4341      	muls	r1, r0
    c4ec:	0015      	movs	r5, r2
    c4ee:	4688      	mov	r8, r1
    c4f0:	0019      	movs	r1, r3
    c4f2:	437d      	muls	r5, r7
    c4f4:	4379      	muls	r1, r7
    c4f6:	9503      	str	r5, [sp, #12]
    c4f8:	4689      	mov	r9, r1
    c4fa:	0029      	movs	r1, r5
    c4fc:	0015      	movs	r5, r2
    c4fe:	4345      	muls	r5, r0
    c500:	444d      	add	r5, r9
    c502:	9502      	str	r5, [sp, #8]
    c504:	4645      	mov	r5, r8
    c506:	0c2d      	lsrs	r5, r5, #16
    c508:	46aa      	mov	sl, r5
    c50a:	9d02      	ldr	r5, [sp, #8]
    c50c:	4455      	add	r5, sl
    c50e:	45a9      	cmp	r9, r5
    c510:	d906      	bls.n	c520 <__aeabi_dmul+0x238>
    c512:	468a      	mov	sl, r1
    c514:	2180      	movs	r1, #128	; 0x80
    c516:	0249      	lsls	r1, r1, #9
    c518:	4689      	mov	r9, r1
    c51a:	44ca      	add	sl, r9
    c51c:	4651      	mov	r1, sl
    c51e:	9103      	str	r1, [sp, #12]
    c520:	0c29      	lsrs	r1, r5, #16
    c522:	9104      	str	r1, [sp, #16]
    c524:	4641      	mov	r1, r8
    c526:	0409      	lsls	r1, r1, #16
    c528:	042d      	lsls	r5, r5, #16
    c52a:	0c09      	lsrs	r1, r1, #16
    c52c:	4688      	mov	r8, r1
    c52e:	0029      	movs	r1, r5
    c530:	0c25      	lsrs	r5, r4, #16
    c532:	0424      	lsls	r4, r4, #16
    c534:	4441      	add	r1, r8
    c536:	0c24      	lsrs	r4, r4, #16
    c538:	9105      	str	r1, [sp, #20]
    c53a:	0021      	movs	r1, r4
    c53c:	4341      	muls	r1, r0
    c53e:	4688      	mov	r8, r1
    c540:	0021      	movs	r1, r4
    c542:	4379      	muls	r1, r7
    c544:	468a      	mov	sl, r1
    c546:	4368      	muls	r0, r5
    c548:	4641      	mov	r1, r8
    c54a:	4450      	add	r0, sl
    c54c:	4681      	mov	r9, r0
    c54e:	0c08      	lsrs	r0, r1, #16
    c550:	4448      	add	r0, r9
    c552:	436f      	muls	r7, r5
    c554:	4582      	cmp	sl, r0
    c556:	d903      	bls.n	c560 <__aeabi_dmul+0x278>
    c558:	2180      	movs	r1, #128	; 0x80
    c55a:	0249      	lsls	r1, r1, #9
    c55c:	4689      	mov	r9, r1
    c55e:	444f      	add	r7, r9
    c560:	0c01      	lsrs	r1, r0, #16
    c562:	4689      	mov	r9, r1
    c564:	0039      	movs	r1, r7
    c566:	4449      	add	r1, r9
    c568:	9102      	str	r1, [sp, #8]
    c56a:	4641      	mov	r1, r8
    c56c:	040f      	lsls	r7, r1, #16
    c56e:	9904      	ldr	r1, [sp, #16]
    c570:	0c3f      	lsrs	r7, r7, #16
    c572:	4688      	mov	r8, r1
    c574:	0400      	lsls	r0, r0, #16
    c576:	19c0      	adds	r0, r0, r7
    c578:	4480      	add	r8, r0
    c57a:	4641      	mov	r1, r8
    c57c:	9104      	str	r1, [sp, #16]
    c57e:	4659      	mov	r1, fp
    c580:	0c0f      	lsrs	r7, r1, #16
    c582:	0409      	lsls	r1, r1, #16
    c584:	0c09      	lsrs	r1, r1, #16
    c586:	4688      	mov	r8, r1
    c588:	4359      	muls	r1, r3
    c58a:	468a      	mov	sl, r1
    c58c:	0039      	movs	r1, r7
    c58e:	4351      	muls	r1, r2
    c590:	4689      	mov	r9, r1
    c592:	4641      	mov	r1, r8
    c594:	434a      	muls	r2, r1
    c596:	4651      	mov	r1, sl
    c598:	0c09      	lsrs	r1, r1, #16
    c59a:	468b      	mov	fp, r1
    c59c:	437b      	muls	r3, r7
    c59e:	18d2      	adds	r2, r2, r3
    c5a0:	445a      	add	r2, fp
    c5a2:	4293      	cmp	r3, r2
    c5a4:	d903      	bls.n	c5ae <__aeabi_dmul+0x2c6>
    c5a6:	2380      	movs	r3, #128	; 0x80
    c5a8:	025b      	lsls	r3, r3, #9
    c5aa:	469b      	mov	fp, r3
    c5ac:	44d9      	add	r9, fp
    c5ae:	4651      	mov	r1, sl
    c5b0:	0409      	lsls	r1, r1, #16
    c5b2:	0c09      	lsrs	r1, r1, #16
    c5b4:	468a      	mov	sl, r1
    c5b6:	4641      	mov	r1, r8
    c5b8:	4361      	muls	r1, r4
    c5ba:	437c      	muls	r4, r7
    c5bc:	0c13      	lsrs	r3, r2, #16
    c5be:	0412      	lsls	r2, r2, #16
    c5c0:	444b      	add	r3, r9
    c5c2:	4452      	add	r2, sl
    c5c4:	46a1      	mov	r9, r4
    c5c6:	468a      	mov	sl, r1
    c5c8:	003c      	movs	r4, r7
    c5ca:	4641      	mov	r1, r8
    c5cc:	436c      	muls	r4, r5
    c5ce:	434d      	muls	r5, r1
    c5d0:	4651      	mov	r1, sl
    c5d2:	444d      	add	r5, r9
    c5d4:	0c0f      	lsrs	r7, r1, #16
    c5d6:	197d      	adds	r5, r7, r5
    c5d8:	45a9      	cmp	r9, r5
    c5da:	d903      	bls.n	c5e4 <__aeabi_dmul+0x2fc>
    c5dc:	2180      	movs	r1, #128	; 0x80
    c5de:	0249      	lsls	r1, r1, #9
    c5e0:	4688      	mov	r8, r1
    c5e2:	4444      	add	r4, r8
    c5e4:	9f04      	ldr	r7, [sp, #16]
    c5e6:	9903      	ldr	r1, [sp, #12]
    c5e8:	46b8      	mov	r8, r7
    c5ea:	4441      	add	r1, r8
    c5ec:	468b      	mov	fp, r1
    c5ee:	4583      	cmp	fp, r0
    c5f0:	4180      	sbcs	r0, r0
    c5f2:	4241      	negs	r1, r0
    c5f4:	4688      	mov	r8, r1
    c5f6:	4651      	mov	r1, sl
    c5f8:	0408      	lsls	r0, r1, #16
    c5fa:	042f      	lsls	r7, r5, #16
    c5fc:	0c00      	lsrs	r0, r0, #16
    c5fe:	183f      	adds	r7, r7, r0
    c600:	4658      	mov	r0, fp
    c602:	9902      	ldr	r1, [sp, #8]
    c604:	1810      	adds	r0, r2, r0
    c606:	4689      	mov	r9, r1
    c608:	4290      	cmp	r0, r2
    c60a:	4192      	sbcs	r2, r2
    c60c:	444f      	add	r7, r9
    c60e:	46ba      	mov	sl, r7
    c610:	4252      	negs	r2, r2
    c612:	4699      	mov	r9, r3
    c614:	4693      	mov	fp, r2
    c616:	44c2      	add	sl, r8
    c618:	44d1      	add	r9, sl
    c61a:	44cb      	add	fp, r9
    c61c:	428f      	cmp	r7, r1
    c61e:	41bf      	sbcs	r7, r7
    c620:	45c2      	cmp	sl, r8
    c622:	4189      	sbcs	r1, r1
    c624:	4599      	cmp	r9, r3
    c626:	419b      	sbcs	r3, r3
    c628:	4593      	cmp	fp, r2
    c62a:	4192      	sbcs	r2, r2
    c62c:	427f      	negs	r7, r7
    c62e:	4249      	negs	r1, r1
    c630:	0c2d      	lsrs	r5, r5, #16
    c632:	4252      	negs	r2, r2
    c634:	430f      	orrs	r7, r1
    c636:	425b      	negs	r3, r3
    c638:	4313      	orrs	r3, r2
    c63a:	197f      	adds	r7, r7, r5
    c63c:	18ff      	adds	r7, r7, r3
    c63e:	465b      	mov	r3, fp
    c640:	193c      	adds	r4, r7, r4
    c642:	0ddb      	lsrs	r3, r3, #23
    c644:	9a05      	ldr	r2, [sp, #20]
    c646:	0264      	lsls	r4, r4, #9
    c648:	431c      	orrs	r4, r3
    c64a:	0243      	lsls	r3, r0, #9
    c64c:	4313      	orrs	r3, r2
    c64e:	1e5d      	subs	r5, r3, #1
    c650:	41ab      	sbcs	r3, r5
    c652:	465a      	mov	r2, fp
    c654:	0dc0      	lsrs	r0, r0, #23
    c656:	4303      	orrs	r3, r0
    c658:	0252      	lsls	r2, r2, #9
    c65a:	4313      	orrs	r3, r2
    c65c:	01e2      	lsls	r2, r4, #7
    c65e:	d556      	bpl.n	c70e <__aeabi_dmul+0x426>
    c660:	2001      	movs	r0, #1
    c662:	085a      	lsrs	r2, r3, #1
    c664:	4003      	ands	r3, r0
    c666:	4313      	orrs	r3, r2
    c668:	07e2      	lsls	r2, r4, #31
    c66a:	4313      	orrs	r3, r2
    c66c:	0864      	lsrs	r4, r4, #1
    c66e:	485a      	ldr	r0, [pc, #360]	; (c7d8 <__aeabi_dmul+0x4f0>)
    c670:	4460      	add	r0, ip
    c672:	2800      	cmp	r0, #0
    c674:	dd4d      	ble.n	c712 <__aeabi_dmul+0x42a>
    c676:	075a      	lsls	r2, r3, #29
    c678:	d009      	beq.n	c68e <__aeabi_dmul+0x3a6>
    c67a:	220f      	movs	r2, #15
    c67c:	401a      	ands	r2, r3
    c67e:	2a04      	cmp	r2, #4
    c680:	d005      	beq.n	c68e <__aeabi_dmul+0x3a6>
    c682:	1d1a      	adds	r2, r3, #4
    c684:	429a      	cmp	r2, r3
    c686:	419b      	sbcs	r3, r3
    c688:	425b      	negs	r3, r3
    c68a:	18e4      	adds	r4, r4, r3
    c68c:	0013      	movs	r3, r2
    c68e:	01e2      	lsls	r2, r4, #7
    c690:	d504      	bpl.n	c69c <__aeabi_dmul+0x3b4>
    c692:	2080      	movs	r0, #128	; 0x80
    c694:	4a51      	ldr	r2, [pc, #324]	; (c7dc <__aeabi_dmul+0x4f4>)
    c696:	00c0      	lsls	r0, r0, #3
    c698:	4014      	ands	r4, r2
    c69a:	4460      	add	r0, ip
    c69c:	4a50      	ldr	r2, [pc, #320]	; (c7e0 <__aeabi_dmul+0x4f8>)
    c69e:	4290      	cmp	r0, r2
    c6a0:	dd00      	ble.n	c6a4 <__aeabi_dmul+0x3bc>
    c6a2:	e6e3      	b.n	c46c <__aeabi_dmul+0x184>
    c6a4:	2501      	movs	r5, #1
    c6a6:	08db      	lsrs	r3, r3, #3
    c6a8:	0762      	lsls	r2, r4, #29
    c6aa:	431a      	orrs	r2, r3
    c6ac:	0264      	lsls	r4, r4, #9
    c6ae:	9b01      	ldr	r3, [sp, #4]
    c6b0:	4691      	mov	r9, r2
    c6b2:	0b22      	lsrs	r2, r4, #12
    c6b4:	0544      	lsls	r4, r0, #21
    c6b6:	0d64      	lsrs	r4, r4, #21
    c6b8:	401d      	ands	r5, r3
    c6ba:	e67c      	b.n	c3b6 <__aeabi_dmul+0xce>
    c6bc:	2280      	movs	r2, #128	; 0x80
    c6be:	4659      	mov	r1, fp
    c6c0:	0312      	lsls	r2, r2, #12
    c6c2:	4211      	tst	r1, r2
    c6c4:	d008      	beq.n	c6d8 <__aeabi_dmul+0x3f0>
    c6c6:	4214      	tst	r4, r2
    c6c8:	d106      	bne.n	c6d8 <__aeabi_dmul+0x3f0>
    c6ca:	4322      	orrs	r2, r4
    c6cc:	0312      	lsls	r2, r2, #12
    c6ce:	0b12      	lsrs	r2, r2, #12
    c6d0:	4645      	mov	r5, r8
    c6d2:	4699      	mov	r9, r3
    c6d4:	4c43      	ldr	r4, [pc, #268]	; (c7e4 <__aeabi_dmul+0x4fc>)
    c6d6:	e66e      	b.n	c3b6 <__aeabi_dmul+0xce>
    c6d8:	465b      	mov	r3, fp
    c6da:	431a      	orrs	r2, r3
    c6dc:	0312      	lsls	r2, r2, #12
    c6de:	0b12      	lsrs	r2, r2, #12
    c6e0:	4c40      	ldr	r4, [pc, #256]	; (c7e4 <__aeabi_dmul+0x4fc>)
    c6e2:	e668      	b.n	c3b6 <__aeabi_dmul+0xce>
    c6e4:	0003      	movs	r3, r0
    c6e6:	4654      	mov	r4, sl
    c6e8:	3b28      	subs	r3, #40	; 0x28
    c6ea:	409c      	lsls	r4, r3
    c6ec:	2300      	movs	r3, #0
    c6ee:	e6b9      	b.n	c464 <__aeabi_dmul+0x17c>
    c6f0:	f000 fcb0 	bl	d054 <__clzsi2>
    c6f4:	3020      	adds	r0, #32
    c6f6:	e6a6      	b.n	c446 <__aeabi_dmul+0x15e>
    c6f8:	0003      	movs	r3, r0
    c6fa:	3b28      	subs	r3, #40	; 0x28
    c6fc:	409f      	lsls	r7, r3
    c6fe:	2300      	movs	r3, #0
    c700:	46bb      	mov	fp, r7
    c702:	4699      	mov	r9, r3
    c704:	e68a      	b.n	c41c <__aeabi_dmul+0x134>
    c706:	f000 fca5 	bl	d054 <__clzsi2>
    c70a:	3020      	adds	r0, #32
    c70c:	e674      	b.n	c3f8 <__aeabi_dmul+0x110>
    c70e:	46b4      	mov	ip, r6
    c710:	e7ad      	b.n	c66e <__aeabi_dmul+0x386>
    c712:	2501      	movs	r5, #1
    c714:	1a2a      	subs	r2, r5, r0
    c716:	2a38      	cmp	r2, #56	; 0x38
    c718:	dd06      	ble.n	c728 <__aeabi_dmul+0x440>
    c71a:	9b01      	ldr	r3, [sp, #4]
    c71c:	2400      	movs	r4, #0
    c71e:	401d      	ands	r5, r3
    c720:	2300      	movs	r3, #0
    c722:	2200      	movs	r2, #0
    c724:	4699      	mov	r9, r3
    c726:	e646      	b.n	c3b6 <__aeabi_dmul+0xce>
    c728:	2a1f      	cmp	r2, #31
    c72a:	dc21      	bgt.n	c770 <__aeabi_dmul+0x488>
    c72c:	2520      	movs	r5, #32
    c72e:	0020      	movs	r0, r4
    c730:	1aad      	subs	r5, r5, r2
    c732:	001e      	movs	r6, r3
    c734:	40ab      	lsls	r3, r5
    c736:	40a8      	lsls	r0, r5
    c738:	40d6      	lsrs	r6, r2
    c73a:	1e5d      	subs	r5, r3, #1
    c73c:	41ab      	sbcs	r3, r5
    c73e:	4330      	orrs	r0, r6
    c740:	4318      	orrs	r0, r3
    c742:	40d4      	lsrs	r4, r2
    c744:	0743      	lsls	r3, r0, #29
    c746:	d009      	beq.n	c75c <__aeabi_dmul+0x474>
    c748:	230f      	movs	r3, #15
    c74a:	4003      	ands	r3, r0
    c74c:	2b04      	cmp	r3, #4
    c74e:	d005      	beq.n	c75c <__aeabi_dmul+0x474>
    c750:	0003      	movs	r3, r0
    c752:	1d18      	adds	r0, r3, #4
    c754:	4298      	cmp	r0, r3
    c756:	419b      	sbcs	r3, r3
    c758:	425b      	negs	r3, r3
    c75a:	18e4      	adds	r4, r4, r3
    c75c:	0223      	lsls	r3, r4, #8
    c75e:	d521      	bpl.n	c7a4 <__aeabi_dmul+0x4bc>
    c760:	2501      	movs	r5, #1
    c762:	9b01      	ldr	r3, [sp, #4]
    c764:	2401      	movs	r4, #1
    c766:	401d      	ands	r5, r3
    c768:	2300      	movs	r3, #0
    c76a:	2200      	movs	r2, #0
    c76c:	4699      	mov	r9, r3
    c76e:	e622      	b.n	c3b6 <__aeabi_dmul+0xce>
    c770:	251f      	movs	r5, #31
    c772:	0021      	movs	r1, r4
    c774:	426d      	negs	r5, r5
    c776:	1a28      	subs	r0, r5, r0
    c778:	40c1      	lsrs	r1, r0
    c77a:	0008      	movs	r0, r1
    c77c:	2a20      	cmp	r2, #32
    c77e:	d01d      	beq.n	c7bc <__aeabi_dmul+0x4d4>
    c780:	355f      	adds	r5, #95	; 0x5f
    c782:	1aaa      	subs	r2, r5, r2
    c784:	4094      	lsls	r4, r2
    c786:	4323      	orrs	r3, r4
    c788:	1e5c      	subs	r4, r3, #1
    c78a:	41a3      	sbcs	r3, r4
    c78c:	2507      	movs	r5, #7
    c78e:	4303      	orrs	r3, r0
    c790:	401d      	ands	r5, r3
    c792:	2200      	movs	r2, #0
    c794:	2d00      	cmp	r5, #0
    c796:	d009      	beq.n	c7ac <__aeabi_dmul+0x4c4>
    c798:	220f      	movs	r2, #15
    c79a:	2400      	movs	r4, #0
    c79c:	401a      	ands	r2, r3
    c79e:	0018      	movs	r0, r3
    c7a0:	2a04      	cmp	r2, #4
    c7a2:	d1d6      	bne.n	c752 <__aeabi_dmul+0x46a>
    c7a4:	0003      	movs	r3, r0
    c7a6:	0765      	lsls	r5, r4, #29
    c7a8:	0264      	lsls	r4, r4, #9
    c7aa:	0b22      	lsrs	r2, r4, #12
    c7ac:	08db      	lsrs	r3, r3, #3
    c7ae:	432b      	orrs	r3, r5
    c7b0:	2501      	movs	r5, #1
    c7b2:	4699      	mov	r9, r3
    c7b4:	9b01      	ldr	r3, [sp, #4]
    c7b6:	2400      	movs	r4, #0
    c7b8:	401d      	ands	r5, r3
    c7ba:	e5fc      	b.n	c3b6 <__aeabi_dmul+0xce>
    c7bc:	2400      	movs	r4, #0
    c7be:	e7e2      	b.n	c786 <__aeabi_dmul+0x49e>
    c7c0:	2280      	movs	r2, #128	; 0x80
    c7c2:	2501      	movs	r5, #1
    c7c4:	0312      	lsls	r2, r2, #12
    c7c6:	4322      	orrs	r2, r4
    c7c8:	9901      	ldr	r1, [sp, #4]
    c7ca:	0312      	lsls	r2, r2, #12
    c7cc:	0b12      	lsrs	r2, r2, #12
    c7ce:	400d      	ands	r5, r1
    c7d0:	4699      	mov	r9, r3
    c7d2:	4c04      	ldr	r4, [pc, #16]	; (c7e4 <__aeabi_dmul+0x4fc>)
    c7d4:	e5ef      	b.n	c3b6 <__aeabi_dmul+0xce>
    c7d6:	46c0      	nop			; (mov r8, r8)
    c7d8:	000003ff 	.word	0x000003ff
    c7dc:	feffffff 	.word	0xfeffffff
    c7e0:	000007fe 	.word	0x000007fe
    c7e4:	000007ff 	.word	0x000007ff

0000c7e8 <__aeabi_dsub>:
    c7e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    c7ea:	4646      	mov	r6, r8
    c7ec:	46d6      	mov	lr, sl
    c7ee:	464f      	mov	r7, r9
    c7f0:	030c      	lsls	r4, r1, #12
    c7f2:	b5c0      	push	{r6, r7, lr}
    c7f4:	0fcd      	lsrs	r5, r1, #31
    c7f6:	004e      	lsls	r6, r1, #1
    c7f8:	0a61      	lsrs	r1, r4, #9
    c7fa:	0f44      	lsrs	r4, r0, #29
    c7fc:	430c      	orrs	r4, r1
    c7fe:	00c1      	lsls	r1, r0, #3
    c800:	0058      	lsls	r0, r3, #1
    c802:	0d40      	lsrs	r0, r0, #21
    c804:	4684      	mov	ip, r0
    c806:	468a      	mov	sl, r1
    c808:	000f      	movs	r7, r1
    c80a:	0319      	lsls	r1, r3, #12
    c80c:	0f50      	lsrs	r0, r2, #29
    c80e:	0a49      	lsrs	r1, r1, #9
    c810:	4301      	orrs	r1, r0
    c812:	48c6      	ldr	r0, [pc, #792]	; (cb2c <__aeabi_dsub+0x344>)
    c814:	0d76      	lsrs	r6, r6, #21
    c816:	46a8      	mov	r8, r5
    c818:	0fdb      	lsrs	r3, r3, #31
    c81a:	00d2      	lsls	r2, r2, #3
    c81c:	4584      	cmp	ip, r0
    c81e:	d100      	bne.n	c822 <__aeabi_dsub+0x3a>
    c820:	e0d8      	b.n	c9d4 <__aeabi_dsub+0x1ec>
    c822:	2001      	movs	r0, #1
    c824:	4043      	eors	r3, r0
    c826:	42ab      	cmp	r3, r5
    c828:	d100      	bne.n	c82c <__aeabi_dsub+0x44>
    c82a:	e0a6      	b.n	c97a <__aeabi_dsub+0x192>
    c82c:	4660      	mov	r0, ip
    c82e:	1a35      	subs	r5, r6, r0
    c830:	2d00      	cmp	r5, #0
    c832:	dc00      	bgt.n	c836 <__aeabi_dsub+0x4e>
    c834:	e105      	b.n	ca42 <__aeabi_dsub+0x25a>
    c836:	2800      	cmp	r0, #0
    c838:	d110      	bne.n	c85c <__aeabi_dsub+0x74>
    c83a:	000b      	movs	r3, r1
    c83c:	4313      	orrs	r3, r2
    c83e:	d100      	bne.n	c842 <__aeabi_dsub+0x5a>
    c840:	e0d7      	b.n	c9f2 <__aeabi_dsub+0x20a>
    c842:	1e6b      	subs	r3, r5, #1
    c844:	2b00      	cmp	r3, #0
    c846:	d000      	beq.n	c84a <__aeabi_dsub+0x62>
    c848:	e14b      	b.n	cae2 <__aeabi_dsub+0x2fa>
    c84a:	4653      	mov	r3, sl
    c84c:	1a9f      	subs	r7, r3, r2
    c84e:	45ba      	cmp	sl, r7
    c850:	4180      	sbcs	r0, r0
    c852:	1a64      	subs	r4, r4, r1
    c854:	4240      	negs	r0, r0
    c856:	1a24      	subs	r4, r4, r0
    c858:	2601      	movs	r6, #1
    c85a:	e01e      	b.n	c89a <__aeabi_dsub+0xb2>
    c85c:	4bb3      	ldr	r3, [pc, #716]	; (cb2c <__aeabi_dsub+0x344>)
    c85e:	429e      	cmp	r6, r3
    c860:	d048      	beq.n	c8f4 <__aeabi_dsub+0x10c>
    c862:	2380      	movs	r3, #128	; 0x80
    c864:	041b      	lsls	r3, r3, #16
    c866:	4319      	orrs	r1, r3
    c868:	2d38      	cmp	r5, #56	; 0x38
    c86a:	dd00      	ble.n	c86e <__aeabi_dsub+0x86>
    c86c:	e119      	b.n	caa2 <__aeabi_dsub+0x2ba>
    c86e:	2d1f      	cmp	r5, #31
    c870:	dd00      	ble.n	c874 <__aeabi_dsub+0x8c>
    c872:	e14c      	b.n	cb0e <__aeabi_dsub+0x326>
    c874:	2320      	movs	r3, #32
    c876:	000f      	movs	r7, r1
    c878:	1b5b      	subs	r3, r3, r5
    c87a:	0010      	movs	r0, r2
    c87c:	409a      	lsls	r2, r3
    c87e:	409f      	lsls	r7, r3
    c880:	40e8      	lsrs	r0, r5
    c882:	1e53      	subs	r3, r2, #1
    c884:	419a      	sbcs	r2, r3
    c886:	40e9      	lsrs	r1, r5
    c888:	4307      	orrs	r7, r0
    c88a:	4317      	orrs	r7, r2
    c88c:	4653      	mov	r3, sl
    c88e:	1bdf      	subs	r7, r3, r7
    c890:	1a61      	subs	r1, r4, r1
    c892:	45ba      	cmp	sl, r7
    c894:	41a4      	sbcs	r4, r4
    c896:	4264      	negs	r4, r4
    c898:	1b0c      	subs	r4, r1, r4
    c89a:	0223      	lsls	r3, r4, #8
    c89c:	d400      	bmi.n	c8a0 <__aeabi_dsub+0xb8>
    c89e:	e0c5      	b.n	ca2c <__aeabi_dsub+0x244>
    c8a0:	0264      	lsls	r4, r4, #9
    c8a2:	0a65      	lsrs	r5, r4, #9
    c8a4:	2d00      	cmp	r5, #0
    c8a6:	d100      	bne.n	c8aa <__aeabi_dsub+0xc2>
    c8a8:	e0f6      	b.n	ca98 <__aeabi_dsub+0x2b0>
    c8aa:	0028      	movs	r0, r5
    c8ac:	f000 fbd2 	bl	d054 <__clzsi2>
    c8b0:	0003      	movs	r3, r0
    c8b2:	3b08      	subs	r3, #8
    c8b4:	2b1f      	cmp	r3, #31
    c8b6:	dd00      	ble.n	c8ba <__aeabi_dsub+0xd2>
    c8b8:	e0e9      	b.n	ca8e <__aeabi_dsub+0x2a6>
    c8ba:	2220      	movs	r2, #32
    c8bc:	003c      	movs	r4, r7
    c8be:	1ad2      	subs	r2, r2, r3
    c8c0:	409d      	lsls	r5, r3
    c8c2:	40d4      	lsrs	r4, r2
    c8c4:	409f      	lsls	r7, r3
    c8c6:	4325      	orrs	r5, r4
    c8c8:	429e      	cmp	r6, r3
    c8ca:	dd00      	ble.n	c8ce <__aeabi_dsub+0xe6>
    c8cc:	e0db      	b.n	ca86 <__aeabi_dsub+0x29e>
    c8ce:	1b9e      	subs	r6, r3, r6
    c8d0:	1c73      	adds	r3, r6, #1
    c8d2:	2b1f      	cmp	r3, #31
    c8d4:	dd00      	ble.n	c8d8 <__aeabi_dsub+0xf0>
    c8d6:	e10a      	b.n	caee <__aeabi_dsub+0x306>
    c8d8:	2220      	movs	r2, #32
    c8da:	0038      	movs	r0, r7
    c8dc:	1ad2      	subs	r2, r2, r3
    c8de:	0029      	movs	r1, r5
    c8e0:	4097      	lsls	r7, r2
    c8e2:	002c      	movs	r4, r5
    c8e4:	4091      	lsls	r1, r2
    c8e6:	40d8      	lsrs	r0, r3
    c8e8:	1e7a      	subs	r2, r7, #1
    c8ea:	4197      	sbcs	r7, r2
    c8ec:	40dc      	lsrs	r4, r3
    c8ee:	2600      	movs	r6, #0
    c8f0:	4301      	orrs	r1, r0
    c8f2:	430f      	orrs	r7, r1
    c8f4:	077b      	lsls	r3, r7, #29
    c8f6:	d009      	beq.n	c90c <__aeabi_dsub+0x124>
    c8f8:	230f      	movs	r3, #15
    c8fa:	403b      	ands	r3, r7
    c8fc:	2b04      	cmp	r3, #4
    c8fe:	d005      	beq.n	c90c <__aeabi_dsub+0x124>
    c900:	1d3b      	adds	r3, r7, #4
    c902:	42bb      	cmp	r3, r7
    c904:	41bf      	sbcs	r7, r7
    c906:	427f      	negs	r7, r7
    c908:	19e4      	adds	r4, r4, r7
    c90a:	001f      	movs	r7, r3
    c90c:	0223      	lsls	r3, r4, #8
    c90e:	d525      	bpl.n	c95c <__aeabi_dsub+0x174>
    c910:	4b86      	ldr	r3, [pc, #536]	; (cb2c <__aeabi_dsub+0x344>)
    c912:	3601      	adds	r6, #1
    c914:	429e      	cmp	r6, r3
    c916:	d100      	bne.n	c91a <__aeabi_dsub+0x132>
    c918:	e0af      	b.n	ca7a <__aeabi_dsub+0x292>
    c91a:	4b85      	ldr	r3, [pc, #532]	; (cb30 <__aeabi_dsub+0x348>)
    c91c:	2501      	movs	r5, #1
    c91e:	401c      	ands	r4, r3
    c920:	4643      	mov	r3, r8
    c922:	0762      	lsls	r2, r4, #29
    c924:	08ff      	lsrs	r7, r7, #3
    c926:	0264      	lsls	r4, r4, #9
    c928:	0576      	lsls	r6, r6, #21
    c92a:	4317      	orrs	r7, r2
    c92c:	0b24      	lsrs	r4, r4, #12
    c92e:	0d76      	lsrs	r6, r6, #21
    c930:	401d      	ands	r5, r3
    c932:	2100      	movs	r1, #0
    c934:	0324      	lsls	r4, r4, #12
    c936:	0b23      	lsrs	r3, r4, #12
    c938:	0d0c      	lsrs	r4, r1, #20
    c93a:	4a7e      	ldr	r2, [pc, #504]	; (cb34 <__aeabi_dsub+0x34c>)
    c93c:	0524      	lsls	r4, r4, #20
    c93e:	431c      	orrs	r4, r3
    c940:	4014      	ands	r4, r2
    c942:	0533      	lsls	r3, r6, #20
    c944:	4323      	orrs	r3, r4
    c946:	005b      	lsls	r3, r3, #1
    c948:	07ed      	lsls	r5, r5, #31
    c94a:	085b      	lsrs	r3, r3, #1
    c94c:	432b      	orrs	r3, r5
    c94e:	0038      	movs	r0, r7
    c950:	0019      	movs	r1, r3
    c952:	bc1c      	pop	{r2, r3, r4}
    c954:	4690      	mov	r8, r2
    c956:	4699      	mov	r9, r3
    c958:	46a2      	mov	sl, r4
    c95a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c95c:	2501      	movs	r5, #1
    c95e:	4643      	mov	r3, r8
    c960:	0762      	lsls	r2, r4, #29
    c962:	08ff      	lsrs	r7, r7, #3
    c964:	4317      	orrs	r7, r2
    c966:	08e4      	lsrs	r4, r4, #3
    c968:	401d      	ands	r5, r3
    c96a:	4b70      	ldr	r3, [pc, #448]	; (cb2c <__aeabi_dsub+0x344>)
    c96c:	429e      	cmp	r6, r3
    c96e:	d036      	beq.n	c9de <__aeabi_dsub+0x1f6>
    c970:	0324      	lsls	r4, r4, #12
    c972:	0576      	lsls	r6, r6, #21
    c974:	0b24      	lsrs	r4, r4, #12
    c976:	0d76      	lsrs	r6, r6, #21
    c978:	e7db      	b.n	c932 <__aeabi_dsub+0x14a>
    c97a:	4663      	mov	r3, ip
    c97c:	1af3      	subs	r3, r6, r3
    c97e:	2b00      	cmp	r3, #0
    c980:	dc00      	bgt.n	c984 <__aeabi_dsub+0x19c>
    c982:	e094      	b.n	caae <__aeabi_dsub+0x2c6>
    c984:	4660      	mov	r0, ip
    c986:	2800      	cmp	r0, #0
    c988:	d035      	beq.n	c9f6 <__aeabi_dsub+0x20e>
    c98a:	4868      	ldr	r0, [pc, #416]	; (cb2c <__aeabi_dsub+0x344>)
    c98c:	4286      	cmp	r6, r0
    c98e:	d0b1      	beq.n	c8f4 <__aeabi_dsub+0x10c>
    c990:	2780      	movs	r7, #128	; 0x80
    c992:	043f      	lsls	r7, r7, #16
    c994:	4339      	orrs	r1, r7
    c996:	2b38      	cmp	r3, #56	; 0x38
    c998:	dc00      	bgt.n	c99c <__aeabi_dsub+0x1b4>
    c99a:	e0fd      	b.n	cb98 <__aeabi_dsub+0x3b0>
    c99c:	430a      	orrs	r2, r1
    c99e:	0017      	movs	r7, r2
    c9a0:	2100      	movs	r1, #0
    c9a2:	1e7a      	subs	r2, r7, #1
    c9a4:	4197      	sbcs	r7, r2
    c9a6:	4457      	add	r7, sl
    c9a8:	4557      	cmp	r7, sl
    c9aa:	4180      	sbcs	r0, r0
    c9ac:	1909      	adds	r1, r1, r4
    c9ae:	4244      	negs	r4, r0
    c9b0:	190c      	adds	r4, r1, r4
    c9b2:	0223      	lsls	r3, r4, #8
    c9b4:	d53a      	bpl.n	ca2c <__aeabi_dsub+0x244>
    c9b6:	4b5d      	ldr	r3, [pc, #372]	; (cb2c <__aeabi_dsub+0x344>)
    c9b8:	3601      	adds	r6, #1
    c9ba:	429e      	cmp	r6, r3
    c9bc:	d100      	bne.n	c9c0 <__aeabi_dsub+0x1d8>
    c9be:	e14b      	b.n	cc58 <__aeabi_dsub+0x470>
    c9c0:	2201      	movs	r2, #1
    c9c2:	4b5b      	ldr	r3, [pc, #364]	; (cb30 <__aeabi_dsub+0x348>)
    c9c4:	401c      	ands	r4, r3
    c9c6:	087b      	lsrs	r3, r7, #1
    c9c8:	4017      	ands	r7, r2
    c9ca:	431f      	orrs	r7, r3
    c9cc:	07e2      	lsls	r2, r4, #31
    c9ce:	4317      	orrs	r7, r2
    c9d0:	0864      	lsrs	r4, r4, #1
    c9d2:	e78f      	b.n	c8f4 <__aeabi_dsub+0x10c>
    c9d4:	0008      	movs	r0, r1
    c9d6:	4310      	orrs	r0, r2
    c9d8:	d000      	beq.n	c9dc <__aeabi_dsub+0x1f4>
    c9da:	e724      	b.n	c826 <__aeabi_dsub+0x3e>
    c9dc:	e721      	b.n	c822 <__aeabi_dsub+0x3a>
    c9de:	0023      	movs	r3, r4
    c9e0:	433b      	orrs	r3, r7
    c9e2:	d100      	bne.n	c9e6 <__aeabi_dsub+0x1fe>
    c9e4:	e1b9      	b.n	cd5a <__aeabi_dsub+0x572>
    c9e6:	2280      	movs	r2, #128	; 0x80
    c9e8:	0312      	lsls	r2, r2, #12
    c9ea:	4314      	orrs	r4, r2
    c9ec:	0324      	lsls	r4, r4, #12
    c9ee:	0b24      	lsrs	r4, r4, #12
    c9f0:	e79f      	b.n	c932 <__aeabi_dsub+0x14a>
    c9f2:	002e      	movs	r6, r5
    c9f4:	e77e      	b.n	c8f4 <__aeabi_dsub+0x10c>
    c9f6:	0008      	movs	r0, r1
    c9f8:	4310      	orrs	r0, r2
    c9fa:	d100      	bne.n	c9fe <__aeabi_dsub+0x216>
    c9fc:	e0ca      	b.n	cb94 <__aeabi_dsub+0x3ac>
    c9fe:	1e58      	subs	r0, r3, #1
    ca00:	4684      	mov	ip, r0
    ca02:	2800      	cmp	r0, #0
    ca04:	d000      	beq.n	ca08 <__aeabi_dsub+0x220>
    ca06:	e0e7      	b.n	cbd8 <__aeabi_dsub+0x3f0>
    ca08:	4452      	add	r2, sl
    ca0a:	4552      	cmp	r2, sl
    ca0c:	4180      	sbcs	r0, r0
    ca0e:	1864      	adds	r4, r4, r1
    ca10:	4240      	negs	r0, r0
    ca12:	1824      	adds	r4, r4, r0
    ca14:	0017      	movs	r7, r2
    ca16:	2601      	movs	r6, #1
    ca18:	0223      	lsls	r3, r4, #8
    ca1a:	d507      	bpl.n	ca2c <__aeabi_dsub+0x244>
    ca1c:	2602      	movs	r6, #2
    ca1e:	e7cf      	b.n	c9c0 <__aeabi_dsub+0x1d8>
    ca20:	4664      	mov	r4, ip
    ca22:	432c      	orrs	r4, r5
    ca24:	d100      	bne.n	ca28 <__aeabi_dsub+0x240>
    ca26:	e1b3      	b.n	cd90 <__aeabi_dsub+0x5a8>
    ca28:	002c      	movs	r4, r5
    ca2a:	4667      	mov	r7, ip
    ca2c:	077b      	lsls	r3, r7, #29
    ca2e:	d000      	beq.n	ca32 <__aeabi_dsub+0x24a>
    ca30:	e762      	b.n	c8f8 <__aeabi_dsub+0x110>
    ca32:	0763      	lsls	r3, r4, #29
    ca34:	08ff      	lsrs	r7, r7, #3
    ca36:	431f      	orrs	r7, r3
    ca38:	2501      	movs	r5, #1
    ca3a:	4643      	mov	r3, r8
    ca3c:	08e4      	lsrs	r4, r4, #3
    ca3e:	401d      	ands	r5, r3
    ca40:	e793      	b.n	c96a <__aeabi_dsub+0x182>
    ca42:	2d00      	cmp	r5, #0
    ca44:	d178      	bne.n	cb38 <__aeabi_dsub+0x350>
    ca46:	1c75      	adds	r5, r6, #1
    ca48:	056d      	lsls	r5, r5, #21
    ca4a:	0d6d      	lsrs	r5, r5, #21
    ca4c:	2d01      	cmp	r5, #1
    ca4e:	dc00      	bgt.n	ca52 <__aeabi_dsub+0x26a>
    ca50:	e0f2      	b.n	cc38 <__aeabi_dsub+0x450>
    ca52:	4650      	mov	r0, sl
    ca54:	1a80      	subs	r0, r0, r2
    ca56:	4582      	cmp	sl, r0
    ca58:	41bf      	sbcs	r7, r7
    ca5a:	1a65      	subs	r5, r4, r1
    ca5c:	427f      	negs	r7, r7
    ca5e:	1bed      	subs	r5, r5, r7
    ca60:	4684      	mov	ip, r0
    ca62:	0228      	lsls	r0, r5, #8
    ca64:	d400      	bmi.n	ca68 <__aeabi_dsub+0x280>
    ca66:	e08c      	b.n	cb82 <__aeabi_dsub+0x39a>
    ca68:	4650      	mov	r0, sl
    ca6a:	1a17      	subs	r7, r2, r0
    ca6c:	42ba      	cmp	r2, r7
    ca6e:	4192      	sbcs	r2, r2
    ca70:	1b0c      	subs	r4, r1, r4
    ca72:	4255      	negs	r5, r2
    ca74:	1b65      	subs	r5, r4, r5
    ca76:	4698      	mov	r8, r3
    ca78:	e714      	b.n	c8a4 <__aeabi_dsub+0xbc>
    ca7a:	2501      	movs	r5, #1
    ca7c:	4643      	mov	r3, r8
    ca7e:	2400      	movs	r4, #0
    ca80:	401d      	ands	r5, r3
    ca82:	2700      	movs	r7, #0
    ca84:	e755      	b.n	c932 <__aeabi_dsub+0x14a>
    ca86:	4c2a      	ldr	r4, [pc, #168]	; (cb30 <__aeabi_dsub+0x348>)
    ca88:	1af6      	subs	r6, r6, r3
    ca8a:	402c      	ands	r4, r5
    ca8c:	e732      	b.n	c8f4 <__aeabi_dsub+0x10c>
    ca8e:	003d      	movs	r5, r7
    ca90:	3828      	subs	r0, #40	; 0x28
    ca92:	4085      	lsls	r5, r0
    ca94:	2700      	movs	r7, #0
    ca96:	e717      	b.n	c8c8 <__aeabi_dsub+0xe0>
    ca98:	0038      	movs	r0, r7
    ca9a:	f000 fadb 	bl	d054 <__clzsi2>
    ca9e:	3020      	adds	r0, #32
    caa0:	e706      	b.n	c8b0 <__aeabi_dsub+0xc8>
    caa2:	430a      	orrs	r2, r1
    caa4:	0017      	movs	r7, r2
    caa6:	2100      	movs	r1, #0
    caa8:	1e7a      	subs	r2, r7, #1
    caaa:	4197      	sbcs	r7, r2
    caac:	e6ee      	b.n	c88c <__aeabi_dsub+0xa4>
    caae:	2b00      	cmp	r3, #0
    cab0:	d000      	beq.n	cab4 <__aeabi_dsub+0x2cc>
    cab2:	e0e5      	b.n	cc80 <__aeabi_dsub+0x498>
    cab4:	1c73      	adds	r3, r6, #1
    cab6:	469c      	mov	ip, r3
    cab8:	055b      	lsls	r3, r3, #21
    caba:	0d5b      	lsrs	r3, r3, #21
    cabc:	2b01      	cmp	r3, #1
    cabe:	dc00      	bgt.n	cac2 <__aeabi_dsub+0x2da>
    cac0:	e09f      	b.n	cc02 <__aeabi_dsub+0x41a>
    cac2:	4b1a      	ldr	r3, [pc, #104]	; (cb2c <__aeabi_dsub+0x344>)
    cac4:	459c      	cmp	ip, r3
    cac6:	d100      	bne.n	caca <__aeabi_dsub+0x2e2>
    cac8:	e0c5      	b.n	cc56 <__aeabi_dsub+0x46e>
    caca:	4452      	add	r2, sl
    cacc:	4552      	cmp	r2, sl
    cace:	4180      	sbcs	r0, r0
    cad0:	1864      	adds	r4, r4, r1
    cad2:	4240      	negs	r0, r0
    cad4:	1824      	adds	r4, r4, r0
    cad6:	07e7      	lsls	r7, r4, #31
    cad8:	0852      	lsrs	r2, r2, #1
    cada:	4317      	orrs	r7, r2
    cadc:	0864      	lsrs	r4, r4, #1
    cade:	4666      	mov	r6, ip
    cae0:	e708      	b.n	c8f4 <__aeabi_dsub+0x10c>
    cae2:	4812      	ldr	r0, [pc, #72]	; (cb2c <__aeabi_dsub+0x344>)
    cae4:	4285      	cmp	r5, r0
    cae6:	d100      	bne.n	caea <__aeabi_dsub+0x302>
    cae8:	e085      	b.n	cbf6 <__aeabi_dsub+0x40e>
    caea:	001d      	movs	r5, r3
    caec:	e6bc      	b.n	c868 <__aeabi_dsub+0x80>
    caee:	0029      	movs	r1, r5
    caf0:	3e1f      	subs	r6, #31
    caf2:	40f1      	lsrs	r1, r6
    caf4:	2b20      	cmp	r3, #32
    caf6:	d100      	bne.n	cafa <__aeabi_dsub+0x312>
    caf8:	e07f      	b.n	cbfa <__aeabi_dsub+0x412>
    cafa:	2240      	movs	r2, #64	; 0x40
    cafc:	1ad3      	subs	r3, r2, r3
    cafe:	409d      	lsls	r5, r3
    cb00:	432f      	orrs	r7, r5
    cb02:	1e7d      	subs	r5, r7, #1
    cb04:	41af      	sbcs	r7, r5
    cb06:	2400      	movs	r4, #0
    cb08:	430f      	orrs	r7, r1
    cb0a:	2600      	movs	r6, #0
    cb0c:	e78e      	b.n	ca2c <__aeabi_dsub+0x244>
    cb0e:	002b      	movs	r3, r5
    cb10:	000f      	movs	r7, r1
    cb12:	3b20      	subs	r3, #32
    cb14:	40df      	lsrs	r7, r3
    cb16:	2d20      	cmp	r5, #32
    cb18:	d071      	beq.n	cbfe <__aeabi_dsub+0x416>
    cb1a:	2340      	movs	r3, #64	; 0x40
    cb1c:	1b5d      	subs	r5, r3, r5
    cb1e:	40a9      	lsls	r1, r5
    cb20:	430a      	orrs	r2, r1
    cb22:	1e51      	subs	r1, r2, #1
    cb24:	418a      	sbcs	r2, r1
    cb26:	2100      	movs	r1, #0
    cb28:	4317      	orrs	r7, r2
    cb2a:	e6af      	b.n	c88c <__aeabi_dsub+0xa4>
    cb2c:	000007ff 	.word	0x000007ff
    cb30:	ff7fffff 	.word	0xff7fffff
    cb34:	800fffff 	.word	0x800fffff
    cb38:	2e00      	cmp	r6, #0
    cb3a:	d03e      	beq.n	cbba <__aeabi_dsub+0x3d2>
    cb3c:	4eb3      	ldr	r6, [pc, #716]	; (ce0c <__aeabi_dsub+0x624>)
    cb3e:	45b4      	cmp	ip, r6
    cb40:	d045      	beq.n	cbce <__aeabi_dsub+0x3e6>
    cb42:	2680      	movs	r6, #128	; 0x80
    cb44:	0436      	lsls	r6, r6, #16
    cb46:	426d      	negs	r5, r5
    cb48:	4334      	orrs	r4, r6
    cb4a:	2d38      	cmp	r5, #56	; 0x38
    cb4c:	dd00      	ble.n	cb50 <__aeabi_dsub+0x368>
    cb4e:	e0a8      	b.n	cca2 <__aeabi_dsub+0x4ba>
    cb50:	2d1f      	cmp	r5, #31
    cb52:	dd00      	ble.n	cb56 <__aeabi_dsub+0x36e>
    cb54:	e11f      	b.n	cd96 <__aeabi_dsub+0x5ae>
    cb56:	2620      	movs	r6, #32
    cb58:	0027      	movs	r7, r4
    cb5a:	4650      	mov	r0, sl
    cb5c:	1b76      	subs	r6, r6, r5
    cb5e:	40b7      	lsls	r7, r6
    cb60:	40e8      	lsrs	r0, r5
    cb62:	4307      	orrs	r7, r0
    cb64:	4650      	mov	r0, sl
    cb66:	40b0      	lsls	r0, r6
    cb68:	1e46      	subs	r6, r0, #1
    cb6a:	41b0      	sbcs	r0, r6
    cb6c:	40ec      	lsrs	r4, r5
    cb6e:	4338      	orrs	r0, r7
    cb70:	1a17      	subs	r7, r2, r0
    cb72:	42ba      	cmp	r2, r7
    cb74:	4192      	sbcs	r2, r2
    cb76:	1b0c      	subs	r4, r1, r4
    cb78:	4252      	negs	r2, r2
    cb7a:	1aa4      	subs	r4, r4, r2
    cb7c:	4666      	mov	r6, ip
    cb7e:	4698      	mov	r8, r3
    cb80:	e68b      	b.n	c89a <__aeabi_dsub+0xb2>
    cb82:	4664      	mov	r4, ip
    cb84:	4667      	mov	r7, ip
    cb86:	432c      	orrs	r4, r5
    cb88:	d000      	beq.n	cb8c <__aeabi_dsub+0x3a4>
    cb8a:	e68b      	b.n	c8a4 <__aeabi_dsub+0xbc>
    cb8c:	2500      	movs	r5, #0
    cb8e:	2600      	movs	r6, #0
    cb90:	2700      	movs	r7, #0
    cb92:	e6ea      	b.n	c96a <__aeabi_dsub+0x182>
    cb94:	001e      	movs	r6, r3
    cb96:	e6ad      	b.n	c8f4 <__aeabi_dsub+0x10c>
    cb98:	2b1f      	cmp	r3, #31
    cb9a:	dc60      	bgt.n	cc5e <__aeabi_dsub+0x476>
    cb9c:	2720      	movs	r7, #32
    cb9e:	1af8      	subs	r0, r7, r3
    cba0:	000f      	movs	r7, r1
    cba2:	4684      	mov	ip, r0
    cba4:	4087      	lsls	r7, r0
    cba6:	0010      	movs	r0, r2
    cba8:	40d8      	lsrs	r0, r3
    cbaa:	4307      	orrs	r7, r0
    cbac:	4660      	mov	r0, ip
    cbae:	4082      	lsls	r2, r0
    cbb0:	1e50      	subs	r0, r2, #1
    cbb2:	4182      	sbcs	r2, r0
    cbb4:	40d9      	lsrs	r1, r3
    cbb6:	4317      	orrs	r7, r2
    cbb8:	e6f5      	b.n	c9a6 <__aeabi_dsub+0x1be>
    cbba:	0026      	movs	r6, r4
    cbbc:	4650      	mov	r0, sl
    cbbe:	4306      	orrs	r6, r0
    cbc0:	d005      	beq.n	cbce <__aeabi_dsub+0x3e6>
    cbc2:	43ed      	mvns	r5, r5
    cbc4:	2d00      	cmp	r5, #0
    cbc6:	d0d3      	beq.n	cb70 <__aeabi_dsub+0x388>
    cbc8:	4e90      	ldr	r6, [pc, #576]	; (ce0c <__aeabi_dsub+0x624>)
    cbca:	45b4      	cmp	ip, r6
    cbcc:	d1bd      	bne.n	cb4a <__aeabi_dsub+0x362>
    cbce:	000c      	movs	r4, r1
    cbd0:	0017      	movs	r7, r2
    cbd2:	4666      	mov	r6, ip
    cbd4:	4698      	mov	r8, r3
    cbd6:	e68d      	b.n	c8f4 <__aeabi_dsub+0x10c>
    cbd8:	488c      	ldr	r0, [pc, #560]	; (ce0c <__aeabi_dsub+0x624>)
    cbda:	4283      	cmp	r3, r0
    cbdc:	d00b      	beq.n	cbf6 <__aeabi_dsub+0x40e>
    cbde:	4663      	mov	r3, ip
    cbe0:	e6d9      	b.n	c996 <__aeabi_dsub+0x1ae>
    cbe2:	2d00      	cmp	r5, #0
    cbe4:	d000      	beq.n	cbe8 <__aeabi_dsub+0x400>
    cbe6:	e096      	b.n	cd16 <__aeabi_dsub+0x52e>
    cbe8:	0008      	movs	r0, r1
    cbea:	4310      	orrs	r0, r2
    cbec:	d100      	bne.n	cbf0 <__aeabi_dsub+0x408>
    cbee:	e0e2      	b.n	cdb6 <__aeabi_dsub+0x5ce>
    cbf0:	000c      	movs	r4, r1
    cbf2:	0017      	movs	r7, r2
    cbf4:	4698      	mov	r8, r3
    cbf6:	4e85      	ldr	r6, [pc, #532]	; (ce0c <__aeabi_dsub+0x624>)
    cbf8:	e67c      	b.n	c8f4 <__aeabi_dsub+0x10c>
    cbfa:	2500      	movs	r5, #0
    cbfc:	e780      	b.n	cb00 <__aeabi_dsub+0x318>
    cbfe:	2100      	movs	r1, #0
    cc00:	e78e      	b.n	cb20 <__aeabi_dsub+0x338>
    cc02:	0023      	movs	r3, r4
    cc04:	4650      	mov	r0, sl
    cc06:	4303      	orrs	r3, r0
    cc08:	2e00      	cmp	r6, #0
    cc0a:	d000      	beq.n	cc0e <__aeabi_dsub+0x426>
    cc0c:	e0a8      	b.n	cd60 <__aeabi_dsub+0x578>
    cc0e:	2b00      	cmp	r3, #0
    cc10:	d100      	bne.n	cc14 <__aeabi_dsub+0x42c>
    cc12:	e0de      	b.n	cdd2 <__aeabi_dsub+0x5ea>
    cc14:	000b      	movs	r3, r1
    cc16:	4313      	orrs	r3, r2
    cc18:	d100      	bne.n	cc1c <__aeabi_dsub+0x434>
    cc1a:	e66b      	b.n	c8f4 <__aeabi_dsub+0x10c>
    cc1c:	4452      	add	r2, sl
    cc1e:	4552      	cmp	r2, sl
    cc20:	4180      	sbcs	r0, r0
    cc22:	1864      	adds	r4, r4, r1
    cc24:	4240      	negs	r0, r0
    cc26:	1824      	adds	r4, r4, r0
    cc28:	0017      	movs	r7, r2
    cc2a:	0223      	lsls	r3, r4, #8
    cc2c:	d400      	bmi.n	cc30 <__aeabi_dsub+0x448>
    cc2e:	e6fd      	b.n	ca2c <__aeabi_dsub+0x244>
    cc30:	4b77      	ldr	r3, [pc, #476]	; (ce10 <__aeabi_dsub+0x628>)
    cc32:	4666      	mov	r6, ip
    cc34:	401c      	ands	r4, r3
    cc36:	e65d      	b.n	c8f4 <__aeabi_dsub+0x10c>
    cc38:	0025      	movs	r5, r4
    cc3a:	4650      	mov	r0, sl
    cc3c:	4305      	orrs	r5, r0
    cc3e:	2e00      	cmp	r6, #0
    cc40:	d1cf      	bne.n	cbe2 <__aeabi_dsub+0x3fa>
    cc42:	2d00      	cmp	r5, #0
    cc44:	d14f      	bne.n	cce6 <__aeabi_dsub+0x4fe>
    cc46:	000c      	movs	r4, r1
    cc48:	4314      	orrs	r4, r2
    cc4a:	d100      	bne.n	cc4e <__aeabi_dsub+0x466>
    cc4c:	e0a0      	b.n	cd90 <__aeabi_dsub+0x5a8>
    cc4e:	000c      	movs	r4, r1
    cc50:	0017      	movs	r7, r2
    cc52:	4698      	mov	r8, r3
    cc54:	e64e      	b.n	c8f4 <__aeabi_dsub+0x10c>
    cc56:	4666      	mov	r6, ip
    cc58:	2400      	movs	r4, #0
    cc5a:	2700      	movs	r7, #0
    cc5c:	e685      	b.n	c96a <__aeabi_dsub+0x182>
    cc5e:	001f      	movs	r7, r3
    cc60:	0008      	movs	r0, r1
    cc62:	3f20      	subs	r7, #32
    cc64:	40f8      	lsrs	r0, r7
    cc66:	0007      	movs	r7, r0
    cc68:	2b20      	cmp	r3, #32
    cc6a:	d100      	bne.n	cc6e <__aeabi_dsub+0x486>
    cc6c:	e08e      	b.n	cd8c <__aeabi_dsub+0x5a4>
    cc6e:	2040      	movs	r0, #64	; 0x40
    cc70:	1ac3      	subs	r3, r0, r3
    cc72:	4099      	lsls	r1, r3
    cc74:	430a      	orrs	r2, r1
    cc76:	1e51      	subs	r1, r2, #1
    cc78:	418a      	sbcs	r2, r1
    cc7a:	2100      	movs	r1, #0
    cc7c:	4317      	orrs	r7, r2
    cc7e:	e692      	b.n	c9a6 <__aeabi_dsub+0x1be>
    cc80:	2e00      	cmp	r6, #0
    cc82:	d114      	bne.n	ccae <__aeabi_dsub+0x4c6>
    cc84:	0026      	movs	r6, r4
    cc86:	4650      	mov	r0, sl
    cc88:	4306      	orrs	r6, r0
    cc8a:	d062      	beq.n	cd52 <__aeabi_dsub+0x56a>
    cc8c:	43db      	mvns	r3, r3
    cc8e:	2b00      	cmp	r3, #0
    cc90:	d15c      	bne.n	cd4c <__aeabi_dsub+0x564>
    cc92:	1887      	adds	r7, r0, r2
    cc94:	4297      	cmp	r7, r2
    cc96:	4192      	sbcs	r2, r2
    cc98:	1864      	adds	r4, r4, r1
    cc9a:	4252      	negs	r2, r2
    cc9c:	18a4      	adds	r4, r4, r2
    cc9e:	4666      	mov	r6, ip
    cca0:	e687      	b.n	c9b2 <__aeabi_dsub+0x1ca>
    cca2:	4650      	mov	r0, sl
    cca4:	4320      	orrs	r0, r4
    cca6:	1e44      	subs	r4, r0, #1
    cca8:	41a0      	sbcs	r0, r4
    ccaa:	2400      	movs	r4, #0
    ccac:	e760      	b.n	cb70 <__aeabi_dsub+0x388>
    ccae:	4e57      	ldr	r6, [pc, #348]	; (ce0c <__aeabi_dsub+0x624>)
    ccb0:	45b4      	cmp	ip, r6
    ccb2:	d04e      	beq.n	cd52 <__aeabi_dsub+0x56a>
    ccb4:	2680      	movs	r6, #128	; 0x80
    ccb6:	0436      	lsls	r6, r6, #16
    ccb8:	425b      	negs	r3, r3
    ccba:	4334      	orrs	r4, r6
    ccbc:	2b38      	cmp	r3, #56	; 0x38
    ccbe:	dd00      	ble.n	ccc2 <__aeabi_dsub+0x4da>
    ccc0:	e07f      	b.n	cdc2 <__aeabi_dsub+0x5da>
    ccc2:	2b1f      	cmp	r3, #31
    ccc4:	dd00      	ble.n	ccc8 <__aeabi_dsub+0x4e0>
    ccc6:	e08b      	b.n	cde0 <__aeabi_dsub+0x5f8>
    ccc8:	2620      	movs	r6, #32
    ccca:	0027      	movs	r7, r4
    cccc:	4650      	mov	r0, sl
    ccce:	1af6      	subs	r6, r6, r3
    ccd0:	40b7      	lsls	r7, r6
    ccd2:	40d8      	lsrs	r0, r3
    ccd4:	4307      	orrs	r7, r0
    ccd6:	4650      	mov	r0, sl
    ccd8:	40b0      	lsls	r0, r6
    ccda:	1e46      	subs	r6, r0, #1
    ccdc:	41b0      	sbcs	r0, r6
    ccde:	4307      	orrs	r7, r0
    cce0:	40dc      	lsrs	r4, r3
    cce2:	18bf      	adds	r7, r7, r2
    cce4:	e7d6      	b.n	cc94 <__aeabi_dsub+0x4ac>
    cce6:	000d      	movs	r5, r1
    cce8:	4315      	orrs	r5, r2
    ccea:	d100      	bne.n	ccee <__aeabi_dsub+0x506>
    ccec:	e602      	b.n	c8f4 <__aeabi_dsub+0x10c>
    ccee:	4650      	mov	r0, sl
    ccf0:	1a80      	subs	r0, r0, r2
    ccf2:	4582      	cmp	sl, r0
    ccf4:	41bf      	sbcs	r7, r7
    ccf6:	1a65      	subs	r5, r4, r1
    ccf8:	427f      	negs	r7, r7
    ccfa:	1bed      	subs	r5, r5, r7
    ccfc:	4684      	mov	ip, r0
    ccfe:	0228      	lsls	r0, r5, #8
    cd00:	d400      	bmi.n	cd04 <__aeabi_dsub+0x51c>
    cd02:	e68d      	b.n	ca20 <__aeabi_dsub+0x238>
    cd04:	4650      	mov	r0, sl
    cd06:	1a17      	subs	r7, r2, r0
    cd08:	42ba      	cmp	r2, r7
    cd0a:	4192      	sbcs	r2, r2
    cd0c:	1b0c      	subs	r4, r1, r4
    cd0e:	4252      	negs	r2, r2
    cd10:	1aa4      	subs	r4, r4, r2
    cd12:	4698      	mov	r8, r3
    cd14:	e5ee      	b.n	c8f4 <__aeabi_dsub+0x10c>
    cd16:	000d      	movs	r5, r1
    cd18:	4315      	orrs	r5, r2
    cd1a:	d100      	bne.n	cd1e <__aeabi_dsub+0x536>
    cd1c:	e76b      	b.n	cbf6 <__aeabi_dsub+0x40e>
    cd1e:	4650      	mov	r0, sl
    cd20:	0767      	lsls	r7, r4, #29
    cd22:	08c0      	lsrs	r0, r0, #3
    cd24:	4307      	orrs	r7, r0
    cd26:	2080      	movs	r0, #128	; 0x80
    cd28:	08e4      	lsrs	r4, r4, #3
    cd2a:	0300      	lsls	r0, r0, #12
    cd2c:	4204      	tst	r4, r0
    cd2e:	d007      	beq.n	cd40 <__aeabi_dsub+0x558>
    cd30:	08cd      	lsrs	r5, r1, #3
    cd32:	4205      	tst	r5, r0
    cd34:	d104      	bne.n	cd40 <__aeabi_dsub+0x558>
    cd36:	002c      	movs	r4, r5
    cd38:	4698      	mov	r8, r3
    cd3a:	08d7      	lsrs	r7, r2, #3
    cd3c:	0749      	lsls	r1, r1, #29
    cd3e:	430f      	orrs	r7, r1
    cd40:	0f7b      	lsrs	r3, r7, #29
    cd42:	00e4      	lsls	r4, r4, #3
    cd44:	431c      	orrs	r4, r3
    cd46:	00ff      	lsls	r7, r7, #3
    cd48:	4e30      	ldr	r6, [pc, #192]	; (ce0c <__aeabi_dsub+0x624>)
    cd4a:	e5d3      	b.n	c8f4 <__aeabi_dsub+0x10c>
    cd4c:	4e2f      	ldr	r6, [pc, #188]	; (ce0c <__aeabi_dsub+0x624>)
    cd4e:	45b4      	cmp	ip, r6
    cd50:	d1b4      	bne.n	ccbc <__aeabi_dsub+0x4d4>
    cd52:	000c      	movs	r4, r1
    cd54:	0017      	movs	r7, r2
    cd56:	4666      	mov	r6, ip
    cd58:	e5cc      	b.n	c8f4 <__aeabi_dsub+0x10c>
    cd5a:	2700      	movs	r7, #0
    cd5c:	2400      	movs	r4, #0
    cd5e:	e5e8      	b.n	c932 <__aeabi_dsub+0x14a>
    cd60:	2b00      	cmp	r3, #0
    cd62:	d039      	beq.n	cdd8 <__aeabi_dsub+0x5f0>
    cd64:	000b      	movs	r3, r1
    cd66:	4313      	orrs	r3, r2
    cd68:	d100      	bne.n	cd6c <__aeabi_dsub+0x584>
    cd6a:	e744      	b.n	cbf6 <__aeabi_dsub+0x40e>
    cd6c:	08c0      	lsrs	r0, r0, #3
    cd6e:	0767      	lsls	r7, r4, #29
    cd70:	4307      	orrs	r7, r0
    cd72:	2080      	movs	r0, #128	; 0x80
    cd74:	08e4      	lsrs	r4, r4, #3
    cd76:	0300      	lsls	r0, r0, #12
    cd78:	4204      	tst	r4, r0
    cd7a:	d0e1      	beq.n	cd40 <__aeabi_dsub+0x558>
    cd7c:	08cb      	lsrs	r3, r1, #3
    cd7e:	4203      	tst	r3, r0
    cd80:	d1de      	bne.n	cd40 <__aeabi_dsub+0x558>
    cd82:	08d7      	lsrs	r7, r2, #3
    cd84:	0749      	lsls	r1, r1, #29
    cd86:	430f      	orrs	r7, r1
    cd88:	001c      	movs	r4, r3
    cd8a:	e7d9      	b.n	cd40 <__aeabi_dsub+0x558>
    cd8c:	2100      	movs	r1, #0
    cd8e:	e771      	b.n	cc74 <__aeabi_dsub+0x48c>
    cd90:	2500      	movs	r5, #0
    cd92:	2700      	movs	r7, #0
    cd94:	e5e9      	b.n	c96a <__aeabi_dsub+0x182>
    cd96:	002e      	movs	r6, r5
    cd98:	0027      	movs	r7, r4
    cd9a:	3e20      	subs	r6, #32
    cd9c:	40f7      	lsrs	r7, r6
    cd9e:	2d20      	cmp	r5, #32
    cda0:	d02f      	beq.n	ce02 <__aeabi_dsub+0x61a>
    cda2:	2640      	movs	r6, #64	; 0x40
    cda4:	1b75      	subs	r5, r6, r5
    cda6:	40ac      	lsls	r4, r5
    cda8:	4650      	mov	r0, sl
    cdaa:	4320      	orrs	r0, r4
    cdac:	1e44      	subs	r4, r0, #1
    cdae:	41a0      	sbcs	r0, r4
    cdb0:	2400      	movs	r4, #0
    cdb2:	4338      	orrs	r0, r7
    cdb4:	e6dc      	b.n	cb70 <__aeabi_dsub+0x388>
    cdb6:	2480      	movs	r4, #128	; 0x80
    cdb8:	2500      	movs	r5, #0
    cdba:	0324      	lsls	r4, r4, #12
    cdbc:	4e13      	ldr	r6, [pc, #76]	; (ce0c <__aeabi_dsub+0x624>)
    cdbe:	2700      	movs	r7, #0
    cdc0:	e5d3      	b.n	c96a <__aeabi_dsub+0x182>
    cdc2:	4650      	mov	r0, sl
    cdc4:	4320      	orrs	r0, r4
    cdc6:	0007      	movs	r7, r0
    cdc8:	1e78      	subs	r0, r7, #1
    cdca:	4187      	sbcs	r7, r0
    cdcc:	2400      	movs	r4, #0
    cdce:	18bf      	adds	r7, r7, r2
    cdd0:	e760      	b.n	cc94 <__aeabi_dsub+0x4ac>
    cdd2:	000c      	movs	r4, r1
    cdd4:	0017      	movs	r7, r2
    cdd6:	e58d      	b.n	c8f4 <__aeabi_dsub+0x10c>
    cdd8:	000c      	movs	r4, r1
    cdda:	0017      	movs	r7, r2
    cddc:	4e0b      	ldr	r6, [pc, #44]	; (ce0c <__aeabi_dsub+0x624>)
    cdde:	e589      	b.n	c8f4 <__aeabi_dsub+0x10c>
    cde0:	001e      	movs	r6, r3
    cde2:	0027      	movs	r7, r4
    cde4:	3e20      	subs	r6, #32
    cde6:	40f7      	lsrs	r7, r6
    cde8:	2b20      	cmp	r3, #32
    cdea:	d00c      	beq.n	ce06 <__aeabi_dsub+0x61e>
    cdec:	2640      	movs	r6, #64	; 0x40
    cdee:	1af3      	subs	r3, r6, r3
    cdf0:	409c      	lsls	r4, r3
    cdf2:	4650      	mov	r0, sl
    cdf4:	4320      	orrs	r0, r4
    cdf6:	1e44      	subs	r4, r0, #1
    cdf8:	41a0      	sbcs	r0, r4
    cdfa:	4307      	orrs	r7, r0
    cdfc:	2400      	movs	r4, #0
    cdfe:	18bf      	adds	r7, r7, r2
    ce00:	e748      	b.n	cc94 <__aeabi_dsub+0x4ac>
    ce02:	2400      	movs	r4, #0
    ce04:	e7d0      	b.n	cda8 <__aeabi_dsub+0x5c0>
    ce06:	2400      	movs	r4, #0
    ce08:	e7f3      	b.n	cdf2 <__aeabi_dsub+0x60a>
    ce0a:	46c0      	nop			; (mov r8, r8)
    ce0c:	000007ff 	.word	0x000007ff
    ce10:	ff7fffff 	.word	0xff7fffff

0000ce14 <__aeabi_dcmpun>:
    ce14:	b570      	push	{r4, r5, r6, lr}
    ce16:	4e0e      	ldr	r6, [pc, #56]	; (ce50 <__aeabi_dcmpun+0x3c>)
    ce18:	030d      	lsls	r5, r1, #12
    ce1a:	031c      	lsls	r4, r3, #12
    ce1c:	0049      	lsls	r1, r1, #1
    ce1e:	005b      	lsls	r3, r3, #1
    ce20:	0b2d      	lsrs	r5, r5, #12
    ce22:	0d49      	lsrs	r1, r1, #21
    ce24:	0b24      	lsrs	r4, r4, #12
    ce26:	0d5b      	lsrs	r3, r3, #21
    ce28:	42b1      	cmp	r1, r6
    ce2a:	d004      	beq.n	ce36 <__aeabi_dcmpun+0x22>
    ce2c:	4908      	ldr	r1, [pc, #32]	; (ce50 <__aeabi_dcmpun+0x3c>)
    ce2e:	2000      	movs	r0, #0
    ce30:	428b      	cmp	r3, r1
    ce32:	d008      	beq.n	ce46 <__aeabi_dcmpun+0x32>
    ce34:	bd70      	pop	{r4, r5, r6, pc}
    ce36:	4305      	orrs	r5, r0
    ce38:	2001      	movs	r0, #1
    ce3a:	2d00      	cmp	r5, #0
    ce3c:	d1fa      	bne.n	ce34 <__aeabi_dcmpun+0x20>
    ce3e:	4904      	ldr	r1, [pc, #16]	; (ce50 <__aeabi_dcmpun+0x3c>)
    ce40:	2000      	movs	r0, #0
    ce42:	428b      	cmp	r3, r1
    ce44:	d1f6      	bne.n	ce34 <__aeabi_dcmpun+0x20>
    ce46:	4314      	orrs	r4, r2
    ce48:	0020      	movs	r0, r4
    ce4a:	1e44      	subs	r4, r0, #1
    ce4c:	41a0      	sbcs	r0, r4
    ce4e:	e7f1      	b.n	ce34 <__aeabi_dcmpun+0x20>
    ce50:	000007ff 	.word	0x000007ff

0000ce54 <__aeabi_d2iz>:
    ce54:	b530      	push	{r4, r5, lr}
    ce56:	4d13      	ldr	r5, [pc, #76]	; (cea4 <__aeabi_d2iz+0x50>)
    ce58:	030a      	lsls	r2, r1, #12
    ce5a:	004b      	lsls	r3, r1, #1
    ce5c:	0b12      	lsrs	r2, r2, #12
    ce5e:	0d5b      	lsrs	r3, r3, #21
    ce60:	0fc9      	lsrs	r1, r1, #31
    ce62:	2400      	movs	r4, #0
    ce64:	42ab      	cmp	r3, r5
    ce66:	dd10      	ble.n	ce8a <__aeabi_d2iz+0x36>
    ce68:	4c0f      	ldr	r4, [pc, #60]	; (cea8 <__aeabi_d2iz+0x54>)
    ce6a:	42a3      	cmp	r3, r4
    ce6c:	dc0f      	bgt.n	ce8e <__aeabi_d2iz+0x3a>
    ce6e:	2480      	movs	r4, #128	; 0x80
    ce70:	4d0e      	ldr	r5, [pc, #56]	; (ceac <__aeabi_d2iz+0x58>)
    ce72:	0364      	lsls	r4, r4, #13
    ce74:	4322      	orrs	r2, r4
    ce76:	1aed      	subs	r5, r5, r3
    ce78:	2d1f      	cmp	r5, #31
    ce7a:	dd0b      	ble.n	ce94 <__aeabi_d2iz+0x40>
    ce7c:	480c      	ldr	r0, [pc, #48]	; (ceb0 <__aeabi_d2iz+0x5c>)
    ce7e:	1ac3      	subs	r3, r0, r3
    ce80:	40da      	lsrs	r2, r3
    ce82:	4254      	negs	r4, r2
    ce84:	2900      	cmp	r1, #0
    ce86:	d100      	bne.n	ce8a <__aeabi_d2iz+0x36>
    ce88:	0014      	movs	r4, r2
    ce8a:	0020      	movs	r0, r4
    ce8c:	bd30      	pop	{r4, r5, pc}
    ce8e:	4b09      	ldr	r3, [pc, #36]	; (ceb4 <__aeabi_d2iz+0x60>)
    ce90:	18cc      	adds	r4, r1, r3
    ce92:	e7fa      	b.n	ce8a <__aeabi_d2iz+0x36>
    ce94:	4c08      	ldr	r4, [pc, #32]	; (ceb8 <__aeabi_d2iz+0x64>)
    ce96:	40e8      	lsrs	r0, r5
    ce98:	46a4      	mov	ip, r4
    ce9a:	4463      	add	r3, ip
    ce9c:	409a      	lsls	r2, r3
    ce9e:	4302      	orrs	r2, r0
    cea0:	e7ef      	b.n	ce82 <__aeabi_d2iz+0x2e>
    cea2:	46c0      	nop			; (mov r8, r8)
    cea4:	000003fe 	.word	0x000003fe
    cea8:	0000041d 	.word	0x0000041d
    ceac:	00000433 	.word	0x00000433
    ceb0:	00000413 	.word	0x00000413
    ceb4:	7fffffff 	.word	0x7fffffff
    ceb8:	fffffbed 	.word	0xfffffbed

0000cebc <__aeabi_i2d>:
    cebc:	b570      	push	{r4, r5, r6, lr}
    cebe:	2800      	cmp	r0, #0
    cec0:	d030      	beq.n	cf24 <__aeabi_i2d+0x68>
    cec2:	17c3      	asrs	r3, r0, #31
    cec4:	18c4      	adds	r4, r0, r3
    cec6:	405c      	eors	r4, r3
    cec8:	0fc5      	lsrs	r5, r0, #31
    ceca:	0020      	movs	r0, r4
    cecc:	f000 f8c2 	bl	d054 <__clzsi2>
    ced0:	4b17      	ldr	r3, [pc, #92]	; (cf30 <__aeabi_i2d+0x74>)
    ced2:	4a18      	ldr	r2, [pc, #96]	; (cf34 <__aeabi_i2d+0x78>)
    ced4:	1a1b      	subs	r3, r3, r0
    ced6:	1ad2      	subs	r2, r2, r3
    ced8:	2a1f      	cmp	r2, #31
    ceda:	dd18      	ble.n	cf0e <__aeabi_i2d+0x52>
    cedc:	4a16      	ldr	r2, [pc, #88]	; (cf38 <__aeabi_i2d+0x7c>)
    cede:	1ad2      	subs	r2, r2, r3
    cee0:	4094      	lsls	r4, r2
    cee2:	2200      	movs	r2, #0
    cee4:	0324      	lsls	r4, r4, #12
    cee6:	055b      	lsls	r3, r3, #21
    cee8:	0b24      	lsrs	r4, r4, #12
    ceea:	0d5b      	lsrs	r3, r3, #21
    ceec:	2100      	movs	r1, #0
    ceee:	0010      	movs	r0, r2
    cef0:	0324      	lsls	r4, r4, #12
    cef2:	0d0a      	lsrs	r2, r1, #20
    cef4:	0b24      	lsrs	r4, r4, #12
    cef6:	0512      	lsls	r2, r2, #20
    cef8:	4322      	orrs	r2, r4
    cefa:	4c10      	ldr	r4, [pc, #64]	; (cf3c <__aeabi_i2d+0x80>)
    cefc:	051b      	lsls	r3, r3, #20
    cefe:	4022      	ands	r2, r4
    cf00:	4313      	orrs	r3, r2
    cf02:	005b      	lsls	r3, r3, #1
    cf04:	07ed      	lsls	r5, r5, #31
    cf06:	085b      	lsrs	r3, r3, #1
    cf08:	432b      	orrs	r3, r5
    cf0a:	0019      	movs	r1, r3
    cf0c:	bd70      	pop	{r4, r5, r6, pc}
    cf0e:	0021      	movs	r1, r4
    cf10:	4091      	lsls	r1, r2
    cf12:	000a      	movs	r2, r1
    cf14:	210b      	movs	r1, #11
    cf16:	1a08      	subs	r0, r1, r0
    cf18:	40c4      	lsrs	r4, r0
    cf1a:	055b      	lsls	r3, r3, #21
    cf1c:	0324      	lsls	r4, r4, #12
    cf1e:	0b24      	lsrs	r4, r4, #12
    cf20:	0d5b      	lsrs	r3, r3, #21
    cf22:	e7e3      	b.n	ceec <__aeabi_i2d+0x30>
    cf24:	2500      	movs	r5, #0
    cf26:	2300      	movs	r3, #0
    cf28:	2400      	movs	r4, #0
    cf2a:	2200      	movs	r2, #0
    cf2c:	e7de      	b.n	ceec <__aeabi_i2d+0x30>
    cf2e:	46c0      	nop			; (mov r8, r8)
    cf30:	0000041e 	.word	0x0000041e
    cf34:	00000433 	.word	0x00000433
    cf38:	00000413 	.word	0x00000413
    cf3c:	800fffff 	.word	0x800fffff

0000cf40 <__aeabi_ui2d>:
    cf40:	b510      	push	{r4, lr}
    cf42:	1e04      	subs	r4, r0, #0
    cf44:	d028      	beq.n	cf98 <__aeabi_ui2d+0x58>
    cf46:	f000 f885 	bl	d054 <__clzsi2>
    cf4a:	4b15      	ldr	r3, [pc, #84]	; (cfa0 <__aeabi_ui2d+0x60>)
    cf4c:	4a15      	ldr	r2, [pc, #84]	; (cfa4 <__aeabi_ui2d+0x64>)
    cf4e:	1a1b      	subs	r3, r3, r0
    cf50:	1ad2      	subs	r2, r2, r3
    cf52:	2a1f      	cmp	r2, #31
    cf54:	dd15      	ble.n	cf82 <__aeabi_ui2d+0x42>
    cf56:	4a14      	ldr	r2, [pc, #80]	; (cfa8 <__aeabi_ui2d+0x68>)
    cf58:	1ad2      	subs	r2, r2, r3
    cf5a:	4094      	lsls	r4, r2
    cf5c:	2200      	movs	r2, #0
    cf5e:	0324      	lsls	r4, r4, #12
    cf60:	055b      	lsls	r3, r3, #21
    cf62:	0b24      	lsrs	r4, r4, #12
    cf64:	0d5b      	lsrs	r3, r3, #21
    cf66:	2100      	movs	r1, #0
    cf68:	0010      	movs	r0, r2
    cf6a:	0324      	lsls	r4, r4, #12
    cf6c:	0d0a      	lsrs	r2, r1, #20
    cf6e:	0b24      	lsrs	r4, r4, #12
    cf70:	0512      	lsls	r2, r2, #20
    cf72:	4322      	orrs	r2, r4
    cf74:	4c0d      	ldr	r4, [pc, #52]	; (cfac <__aeabi_ui2d+0x6c>)
    cf76:	051b      	lsls	r3, r3, #20
    cf78:	4022      	ands	r2, r4
    cf7a:	4313      	orrs	r3, r2
    cf7c:	005b      	lsls	r3, r3, #1
    cf7e:	0859      	lsrs	r1, r3, #1
    cf80:	bd10      	pop	{r4, pc}
    cf82:	0021      	movs	r1, r4
    cf84:	4091      	lsls	r1, r2
    cf86:	000a      	movs	r2, r1
    cf88:	210b      	movs	r1, #11
    cf8a:	1a08      	subs	r0, r1, r0
    cf8c:	40c4      	lsrs	r4, r0
    cf8e:	055b      	lsls	r3, r3, #21
    cf90:	0324      	lsls	r4, r4, #12
    cf92:	0b24      	lsrs	r4, r4, #12
    cf94:	0d5b      	lsrs	r3, r3, #21
    cf96:	e7e6      	b.n	cf66 <__aeabi_ui2d+0x26>
    cf98:	2300      	movs	r3, #0
    cf9a:	2400      	movs	r4, #0
    cf9c:	2200      	movs	r2, #0
    cf9e:	e7e2      	b.n	cf66 <__aeabi_ui2d+0x26>
    cfa0:	0000041e 	.word	0x0000041e
    cfa4:	00000433 	.word	0x00000433
    cfa8:	00000413 	.word	0x00000413
    cfac:	800fffff 	.word	0x800fffff

0000cfb0 <__aeabi_f2d>:
    cfb0:	0041      	lsls	r1, r0, #1
    cfb2:	0e09      	lsrs	r1, r1, #24
    cfb4:	1c4b      	adds	r3, r1, #1
    cfb6:	b570      	push	{r4, r5, r6, lr}
    cfb8:	b2db      	uxtb	r3, r3
    cfba:	0246      	lsls	r6, r0, #9
    cfbc:	0a75      	lsrs	r5, r6, #9
    cfbe:	0fc4      	lsrs	r4, r0, #31
    cfc0:	2b01      	cmp	r3, #1
    cfc2:	dd14      	ble.n	cfee <__aeabi_f2d+0x3e>
    cfc4:	23e0      	movs	r3, #224	; 0xe0
    cfc6:	009b      	lsls	r3, r3, #2
    cfc8:	076d      	lsls	r5, r5, #29
    cfca:	0b36      	lsrs	r6, r6, #12
    cfcc:	18cb      	adds	r3, r1, r3
    cfce:	2100      	movs	r1, #0
    cfd0:	0d0a      	lsrs	r2, r1, #20
    cfd2:	0028      	movs	r0, r5
    cfd4:	0512      	lsls	r2, r2, #20
    cfd6:	4d1c      	ldr	r5, [pc, #112]	; (d048 <__aeabi_f2d+0x98>)
    cfd8:	4332      	orrs	r2, r6
    cfda:	055b      	lsls	r3, r3, #21
    cfdc:	402a      	ands	r2, r5
    cfde:	085b      	lsrs	r3, r3, #1
    cfe0:	4313      	orrs	r3, r2
    cfe2:	005b      	lsls	r3, r3, #1
    cfe4:	07e4      	lsls	r4, r4, #31
    cfe6:	085b      	lsrs	r3, r3, #1
    cfe8:	4323      	orrs	r3, r4
    cfea:	0019      	movs	r1, r3
    cfec:	bd70      	pop	{r4, r5, r6, pc}
    cfee:	2900      	cmp	r1, #0
    cff0:	d114      	bne.n	d01c <__aeabi_f2d+0x6c>
    cff2:	2d00      	cmp	r5, #0
    cff4:	d01e      	beq.n	d034 <__aeabi_f2d+0x84>
    cff6:	0028      	movs	r0, r5
    cff8:	f000 f82c 	bl	d054 <__clzsi2>
    cffc:	280a      	cmp	r0, #10
    cffe:	dc1c      	bgt.n	d03a <__aeabi_f2d+0x8a>
    d000:	230b      	movs	r3, #11
    d002:	002a      	movs	r2, r5
    d004:	1a1b      	subs	r3, r3, r0
    d006:	40da      	lsrs	r2, r3
    d008:	0003      	movs	r3, r0
    d00a:	3315      	adds	r3, #21
    d00c:	409d      	lsls	r5, r3
    d00e:	4b0f      	ldr	r3, [pc, #60]	; (d04c <__aeabi_f2d+0x9c>)
    d010:	0312      	lsls	r2, r2, #12
    d012:	1a1b      	subs	r3, r3, r0
    d014:	055b      	lsls	r3, r3, #21
    d016:	0b16      	lsrs	r6, r2, #12
    d018:	0d5b      	lsrs	r3, r3, #21
    d01a:	e7d8      	b.n	cfce <__aeabi_f2d+0x1e>
    d01c:	2d00      	cmp	r5, #0
    d01e:	d006      	beq.n	d02e <__aeabi_f2d+0x7e>
    d020:	0b32      	lsrs	r2, r6, #12
    d022:	2680      	movs	r6, #128	; 0x80
    d024:	0336      	lsls	r6, r6, #12
    d026:	076d      	lsls	r5, r5, #29
    d028:	4316      	orrs	r6, r2
    d02a:	4b09      	ldr	r3, [pc, #36]	; (d050 <__aeabi_f2d+0xa0>)
    d02c:	e7cf      	b.n	cfce <__aeabi_f2d+0x1e>
    d02e:	4b08      	ldr	r3, [pc, #32]	; (d050 <__aeabi_f2d+0xa0>)
    d030:	2600      	movs	r6, #0
    d032:	e7cc      	b.n	cfce <__aeabi_f2d+0x1e>
    d034:	2300      	movs	r3, #0
    d036:	2600      	movs	r6, #0
    d038:	e7c9      	b.n	cfce <__aeabi_f2d+0x1e>
    d03a:	0003      	movs	r3, r0
    d03c:	002a      	movs	r2, r5
    d03e:	3b0b      	subs	r3, #11
    d040:	409a      	lsls	r2, r3
    d042:	2500      	movs	r5, #0
    d044:	e7e3      	b.n	d00e <__aeabi_f2d+0x5e>
    d046:	46c0      	nop			; (mov r8, r8)
    d048:	800fffff 	.word	0x800fffff
    d04c:	00000389 	.word	0x00000389
    d050:	000007ff 	.word	0x000007ff

0000d054 <__clzsi2>:
    d054:	211c      	movs	r1, #28
    d056:	2301      	movs	r3, #1
    d058:	041b      	lsls	r3, r3, #16
    d05a:	4298      	cmp	r0, r3
    d05c:	d301      	bcc.n	d062 <__clzsi2+0xe>
    d05e:	0c00      	lsrs	r0, r0, #16
    d060:	3910      	subs	r1, #16
    d062:	0a1b      	lsrs	r3, r3, #8
    d064:	4298      	cmp	r0, r3
    d066:	d301      	bcc.n	d06c <__clzsi2+0x18>
    d068:	0a00      	lsrs	r0, r0, #8
    d06a:	3908      	subs	r1, #8
    d06c:	091b      	lsrs	r3, r3, #4
    d06e:	4298      	cmp	r0, r3
    d070:	d301      	bcc.n	d076 <__clzsi2+0x22>
    d072:	0900      	lsrs	r0, r0, #4
    d074:	3904      	subs	r1, #4
    d076:	a202      	add	r2, pc, #8	; (adr r2, d080 <__clzsi2+0x2c>)
    d078:	5c10      	ldrb	r0, [r2, r0]
    d07a:	1840      	adds	r0, r0, r1
    d07c:	4770      	bx	lr
    d07e:	46c0      	nop			; (mov r8, r8)
    d080:	02020304 	.word	0x02020304
    d084:	01010101 	.word	0x01010101
	...

0000d090 <__clzdi2>:
    d090:	b510      	push	{r4, lr}
    d092:	2900      	cmp	r1, #0
    d094:	d103      	bne.n	d09e <__clzdi2+0xe>
    d096:	f7ff ffdd 	bl	d054 <__clzsi2>
    d09a:	3020      	adds	r0, #32
    d09c:	e002      	b.n	d0a4 <__clzdi2+0x14>
    d09e:	1c08      	adds	r0, r1, #0
    d0a0:	f7ff ffd8 	bl	d054 <__clzsi2>
    d0a4:	bd10      	pop	{r4, pc}
    d0a6:	46c0      	nop			; (mov r8, r8)

0000d0a8 <__cxa_atexit>:
    d0a8:	b510      	push	{r4, lr}
    d0aa:	0013      	movs	r3, r2
    d0ac:	000a      	movs	r2, r1
    d0ae:	0001      	movs	r1, r0
    d0b0:	2002      	movs	r0, #2
    d0b2:	f001 fe49 	bl	ed48 <__register_exitproc>
    d0b6:	bd10      	pop	{r4, pc}

0000d0b8 <__errno>:
    d0b8:	4b01      	ldr	r3, [pc, #4]	; (d0c0 <__errno+0x8>)
    d0ba:	6818      	ldr	r0, [r3, #0]
    d0bc:	4770      	bx	lr
    d0be:	46c0      	nop			; (mov r8, r8)
    d0c0:	20000084 	.word	0x20000084

0000d0c4 <__libc_init_array>:
    d0c4:	b570      	push	{r4, r5, r6, lr}
    d0c6:	4e0d      	ldr	r6, [pc, #52]	; (d0fc <__libc_init_array+0x38>)
    d0c8:	4d0d      	ldr	r5, [pc, #52]	; (d100 <__libc_init_array+0x3c>)
    d0ca:	2400      	movs	r4, #0
    d0cc:	1bad      	subs	r5, r5, r6
    d0ce:	10ad      	asrs	r5, r5, #2
    d0d0:	d005      	beq.n	d0de <__libc_init_array+0x1a>
    d0d2:	00a3      	lsls	r3, r4, #2
    d0d4:	58f3      	ldr	r3, [r6, r3]
    d0d6:	3401      	adds	r4, #1
    d0d8:	4798      	blx	r3
    d0da:	42a5      	cmp	r5, r4
    d0dc:	d1f9      	bne.n	d0d2 <__libc_init_array+0xe>
    d0de:	f005 fb77 	bl	127d0 <_init>
    d0e2:	4e08      	ldr	r6, [pc, #32]	; (d104 <__libc_init_array+0x40>)
    d0e4:	4d08      	ldr	r5, [pc, #32]	; (d108 <__libc_init_array+0x44>)
    d0e6:	2400      	movs	r4, #0
    d0e8:	1bad      	subs	r5, r5, r6
    d0ea:	10ad      	asrs	r5, r5, #2
    d0ec:	d005      	beq.n	d0fa <__libc_init_array+0x36>
    d0ee:	00a3      	lsls	r3, r4, #2
    d0f0:	58f3      	ldr	r3, [r6, r3]
    d0f2:	3401      	adds	r4, #1
    d0f4:	4798      	blx	r3
    d0f6:	42a5      	cmp	r5, r4
    d0f8:	d1f9      	bne.n	d0ee <__libc_init_array+0x2a>
    d0fa:	bd70      	pop	{r4, r5, r6, pc}
    d0fc:	000127dc 	.word	0x000127dc
    d100:	000127dc 	.word	0x000127dc
    d104:	000127dc 	.word	0x000127dc
    d108:	000127ec 	.word	0x000127ec

0000d10c <memcpy>:
    d10c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d10e:	0005      	movs	r5, r0
    d110:	2a0f      	cmp	r2, #15
    d112:	d92f      	bls.n	d174 <memcpy+0x68>
    d114:	000b      	movs	r3, r1
    d116:	4303      	orrs	r3, r0
    d118:	079b      	lsls	r3, r3, #30
    d11a:	d134      	bne.n	d186 <memcpy+0x7a>
    d11c:	0016      	movs	r6, r2
    d11e:	000c      	movs	r4, r1
    d120:	0003      	movs	r3, r0
    d122:	3e10      	subs	r6, #16
    d124:	0935      	lsrs	r5, r6, #4
    d126:	3501      	adds	r5, #1
    d128:	012d      	lsls	r5, r5, #4
    d12a:	1945      	adds	r5, r0, r5
    d12c:	6827      	ldr	r7, [r4, #0]
    d12e:	601f      	str	r7, [r3, #0]
    d130:	6867      	ldr	r7, [r4, #4]
    d132:	605f      	str	r7, [r3, #4]
    d134:	68a7      	ldr	r7, [r4, #8]
    d136:	609f      	str	r7, [r3, #8]
    d138:	68e7      	ldr	r7, [r4, #12]
    d13a:	3410      	adds	r4, #16
    d13c:	60df      	str	r7, [r3, #12]
    d13e:	3310      	adds	r3, #16
    d140:	429d      	cmp	r5, r3
    d142:	d1f3      	bne.n	d12c <memcpy+0x20>
    d144:	230f      	movs	r3, #15
    d146:	439e      	bics	r6, r3
    d148:	3610      	adds	r6, #16
    d14a:	1985      	adds	r5, r0, r6
    d14c:	1989      	adds	r1, r1, r6
    d14e:	4013      	ands	r3, r2
    d150:	2b03      	cmp	r3, #3
    d152:	d91a      	bls.n	d18a <memcpy+0x7e>
    d154:	1f1e      	subs	r6, r3, #4
    d156:	2300      	movs	r3, #0
    d158:	08b4      	lsrs	r4, r6, #2
    d15a:	3401      	adds	r4, #1
    d15c:	00a4      	lsls	r4, r4, #2
    d15e:	58cf      	ldr	r7, [r1, r3]
    d160:	50ef      	str	r7, [r5, r3]
    d162:	3304      	adds	r3, #4
    d164:	42a3      	cmp	r3, r4
    d166:	d1fa      	bne.n	d15e <memcpy+0x52>
    d168:	2403      	movs	r4, #3
    d16a:	43a6      	bics	r6, r4
    d16c:	1d33      	adds	r3, r6, #4
    d16e:	4022      	ands	r2, r4
    d170:	18c9      	adds	r1, r1, r3
    d172:	18ed      	adds	r5, r5, r3
    d174:	2a00      	cmp	r2, #0
    d176:	d005      	beq.n	d184 <memcpy+0x78>
    d178:	2300      	movs	r3, #0
    d17a:	5ccc      	ldrb	r4, [r1, r3]
    d17c:	54ec      	strb	r4, [r5, r3]
    d17e:	3301      	adds	r3, #1
    d180:	4293      	cmp	r3, r2
    d182:	d1fa      	bne.n	d17a <memcpy+0x6e>
    d184:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d186:	0005      	movs	r5, r0
    d188:	e7f6      	b.n	d178 <memcpy+0x6c>
    d18a:	001a      	movs	r2, r3
    d18c:	e7f2      	b.n	d174 <memcpy+0x68>
    d18e:	46c0      	nop			; (mov r8, r8)

0000d190 <memset>:
    d190:	b5f0      	push	{r4, r5, r6, r7, lr}
    d192:	0783      	lsls	r3, r0, #30
    d194:	d043      	beq.n	d21e <memset+0x8e>
    d196:	1e54      	subs	r4, r2, #1
    d198:	2a00      	cmp	r2, #0
    d19a:	d03f      	beq.n	d21c <memset+0x8c>
    d19c:	b2ce      	uxtb	r6, r1
    d19e:	0002      	movs	r2, r0
    d1a0:	2503      	movs	r5, #3
    d1a2:	e002      	b.n	d1aa <memset+0x1a>
    d1a4:	001a      	movs	r2, r3
    d1a6:	3c01      	subs	r4, #1
    d1a8:	d338      	bcc.n	d21c <memset+0x8c>
    d1aa:	1c53      	adds	r3, r2, #1
    d1ac:	7016      	strb	r6, [r2, #0]
    d1ae:	422b      	tst	r3, r5
    d1b0:	d1f8      	bne.n	d1a4 <memset+0x14>
    d1b2:	2c03      	cmp	r4, #3
    d1b4:	d92a      	bls.n	d20c <memset+0x7c>
    d1b6:	22ff      	movs	r2, #255	; 0xff
    d1b8:	400a      	ands	r2, r1
    d1ba:	0215      	lsls	r5, r2, #8
    d1bc:	4315      	orrs	r5, r2
    d1be:	042a      	lsls	r2, r5, #16
    d1c0:	4315      	orrs	r5, r2
    d1c2:	2c0f      	cmp	r4, #15
    d1c4:	d914      	bls.n	d1f0 <memset+0x60>
    d1c6:	0027      	movs	r7, r4
    d1c8:	001a      	movs	r2, r3
    d1ca:	3f10      	subs	r7, #16
    d1cc:	093e      	lsrs	r6, r7, #4
    d1ce:	3601      	adds	r6, #1
    d1d0:	0136      	lsls	r6, r6, #4
    d1d2:	199e      	adds	r6, r3, r6
    d1d4:	6015      	str	r5, [r2, #0]
    d1d6:	6055      	str	r5, [r2, #4]
    d1d8:	6095      	str	r5, [r2, #8]
    d1da:	60d5      	str	r5, [r2, #12]
    d1dc:	3210      	adds	r2, #16
    d1de:	4296      	cmp	r6, r2
    d1e0:	d1f8      	bne.n	d1d4 <memset+0x44>
    d1e2:	220f      	movs	r2, #15
    d1e4:	4397      	bics	r7, r2
    d1e6:	3710      	adds	r7, #16
    d1e8:	19db      	adds	r3, r3, r7
    d1ea:	4014      	ands	r4, r2
    d1ec:	2c03      	cmp	r4, #3
    d1ee:	d90d      	bls.n	d20c <memset+0x7c>
    d1f0:	001a      	movs	r2, r3
    d1f2:	1f27      	subs	r7, r4, #4
    d1f4:	08be      	lsrs	r6, r7, #2
    d1f6:	3601      	adds	r6, #1
    d1f8:	00b6      	lsls	r6, r6, #2
    d1fa:	199e      	adds	r6, r3, r6
    d1fc:	c220      	stmia	r2!, {r5}
    d1fe:	42b2      	cmp	r2, r6
    d200:	d1fc      	bne.n	d1fc <memset+0x6c>
    d202:	2203      	movs	r2, #3
    d204:	4397      	bics	r7, r2
    d206:	3704      	adds	r7, #4
    d208:	19db      	adds	r3, r3, r7
    d20a:	4014      	ands	r4, r2
    d20c:	2c00      	cmp	r4, #0
    d20e:	d005      	beq.n	d21c <memset+0x8c>
    d210:	b2c9      	uxtb	r1, r1
    d212:	191c      	adds	r4, r3, r4
    d214:	7019      	strb	r1, [r3, #0]
    d216:	3301      	adds	r3, #1
    d218:	429c      	cmp	r4, r3
    d21a:	d1fb      	bne.n	d214 <memset+0x84>
    d21c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d21e:	0014      	movs	r4, r2
    d220:	0003      	movs	r3, r0
    d222:	e7c6      	b.n	d1b2 <memset+0x22>

0000d224 <printf>:
    d224:	b40f      	push	{r0, r1, r2, r3}
    d226:	b500      	push	{lr}
    d228:	4906      	ldr	r1, [pc, #24]	; (d244 <printf+0x20>)
    d22a:	b083      	sub	sp, #12
    d22c:	ab04      	add	r3, sp, #16
    d22e:	6808      	ldr	r0, [r1, #0]
    d230:	cb04      	ldmia	r3!, {r2}
    d232:	6881      	ldr	r1, [r0, #8]
    d234:	9301      	str	r3, [sp, #4]
    d236:	f000 f96d 	bl	d514 <_vfprintf_r>
    d23a:	b003      	add	sp, #12
    d23c:	bc08      	pop	{r3}
    d23e:	b004      	add	sp, #16
    d240:	4718      	bx	r3
    d242:	46c0      	nop			; (mov r8, r8)
    d244:	20000084 	.word	0x20000084

0000d248 <_puts_r>:
    d248:	b530      	push	{r4, r5, lr}
    d24a:	0004      	movs	r4, r0
    d24c:	b089      	sub	sp, #36	; 0x24
    d24e:	0008      	movs	r0, r1
    d250:	000d      	movs	r5, r1
    d252:	f000 f92d 	bl	d4b0 <strlen>
    d256:	ab04      	add	r3, sp, #16
    d258:	4a21      	ldr	r2, [pc, #132]	; (d2e0 <_puts_r+0x98>)
    d25a:	9301      	str	r3, [sp, #4]
    d25c:	2302      	movs	r3, #2
    d25e:	9206      	str	r2, [sp, #24]
    d260:	2201      	movs	r2, #1
    d262:	9302      	str	r3, [sp, #8]
    d264:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    d266:	9005      	str	r0, [sp, #20]
    d268:	3001      	adds	r0, #1
    d26a:	9504      	str	r5, [sp, #16]
    d26c:	9207      	str	r2, [sp, #28]
    d26e:	9003      	str	r0, [sp, #12]
    d270:	68a5      	ldr	r5, [r4, #8]
    d272:	2b00      	cmp	r3, #0
    d274:	d02f      	beq.n	d2d6 <_puts_r+0x8e>
    d276:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    d278:	07db      	lsls	r3, r3, #31
    d27a:	d424      	bmi.n	d2c6 <_puts_r+0x7e>
    d27c:	230c      	movs	r3, #12
    d27e:	5eea      	ldrsh	r2, [r5, r3]
    d280:	b291      	uxth	r1, r2
    d282:	058b      	lsls	r3, r1, #22
    d284:	d51c      	bpl.n	d2c0 <_puts_r+0x78>
    d286:	2380      	movs	r3, #128	; 0x80
    d288:	019b      	lsls	r3, r3, #6
    d28a:	4219      	tst	r1, r3
    d28c:	d105      	bne.n	d29a <_puts_r+0x52>
    d28e:	4313      	orrs	r3, r2
    d290:	81ab      	strh	r3, [r5, #12]
    d292:	6e6a      	ldr	r2, [r5, #100]	; 0x64
    d294:	4b13      	ldr	r3, [pc, #76]	; (d2e4 <_puts_r+0x9c>)
    d296:	4013      	ands	r3, r2
    d298:	666b      	str	r3, [r5, #100]	; 0x64
    d29a:	0020      	movs	r0, r4
    d29c:	aa01      	add	r2, sp, #4
    d29e:	0029      	movs	r1, r5
    d2a0:	f003 f8d8 	bl	10454 <__sfvwrite_r>
    d2a4:	1e44      	subs	r4, r0, #1
    d2a6:	41a0      	sbcs	r0, r4
    d2a8:	4244      	negs	r4, r0
    d2aa:	200a      	movs	r0, #10
    d2ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    d2ae:	4304      	orrs	r4, r0
    d2b0:	07db      	lsls	r3, r3, #31
    d2b2:	d402      	bmi.n	d2ba <_puts_r+0x72>
    d2b4:	89ab      	ldrh	r3, [r5, #12]
    d2b6:	059b      	lsls	r3, r3, #22
    d2b8:	d509      	bpl.n	d2ce <_puts_r+0x86>
    d2ba:	0020      	movs	r0, r4
    d2bc:	b009      	add	sp, #36	; 0x24
    d2be:	bd30      	pop	{r4, r5, pc}
    d2c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
    d2c2:	f003 fa81 	bl	107c8 <__retarget_lock_acquire_recursive>
    d2c6:	230c      	movs	r3, #12
    d2c8:	5eea      	ldrsh	r2, [r5, r3]
    d2ca:	b291      	uxth	r1, r2
    d2cc:	e7db      	b.n	d286 <_puts_r+0x3e>
    d2ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
    d2d0:	f003 fa7c 	bl	107cc <__retarget_lock_release_recursive>
    d2d4:	e7f1      	b.n	d2ba <_puts_r+0x72>
    d2d6:	0020      	movs	r0, r4
    d2d8:	f002 ff34 	bl	10144 <__sinit>
    d2dc:	e7cb      	b.n	d276 <_puts_r+0x2e>
    d2de:	46c0      	nop			; (mov r8, r8)
    d2e0:	000123e4 	.word	0x000123e4
    d2e4:	ffffdfff 	.word	0xffffdfff

0000d2e8 <puts>:
    d2e8:	b510      	push	{r4, lr}
    d2ea:	4b03      	ldr	r3, [pc, #12]	; (d2f8 <puts+0x10>)
    d2ec:	0001      	movs	r1, r0
    d2ee:	6818      	ldr	r0, [r3, #0]
    d2f0:	f7ff ffaa 	bl	d248 <_puts_r>
    d2f4:	bd10      	pop	{r4, pc}
    d2f6:	46c0      	nop			; (mov r8, r8)
    d2f8:	20000084 	.word	0x20000084

0000d2fc <setbuf>:
    d2fc:	424a      	negs	r2, r1
    d2fe:	414a      	adcs	r2, r1
    d300:	2380      	movs	r3, #128	; 0x80
    d302:	b510      	push	{r4, lr}
    d304:	0052      	lsls	r2, r2, #1
    d306:	00db      	lsls	r3, r3, #3
    d308:	f000 f802 	bl	d310 <setvbuf>
    d30c:	bd10      	pop	{r4, pc}
    d30e:	46c0      	nop			; (mov r8, r8)

0000d310 <setvbuf>:
    d310:	b5f0      	push	{r4, r5, r6, r7, lr}
    d312:	4647      	mov	r7, r8
    d314:	46ce      	mov	lr, r9
    d316:	b580      	push	{r7, lr}
    d318:	001f      	movs	r7, r3
    d31a:	4b63      	ldr	r3, [pc, #396]	; (d4a8 <setvbuf+0x198>)
    d31c:	b083      	sub	sp, #12
    d31e:	681d      	ldr	r5, [r3, #0]
    d320:	0004      	movs	r4, r0
    d322:	4688      	mov	r8, r1
    d324:	0016      	movs	r6, r2
    d326:	2d00      	cmp	r5, #0
    d328:	d002      	beq.n	d330 <setvbuf+0x20>
    d32a:	6bab      	ldr	r3, [r5, #56]	; 0x38
    d32c:	2b00      	cmp	r3, #0
    d32e:	d066      	beq.n	d3fe <setvbuf+0xee>
    d330:	2e02      	cmp	r6, #2
    d332:	d005      	beq.n	d340 <setvbuf+0x30>
    d334:	2e01      	cmp	r6, #1
    d336:	d900      	bls.n	d33a <setvbuf+0x2a>
    d338:	e0a1      	b.n	d47e <setvbuf+0x16e>
    d33a:	2f00      	cmp	r7, #0
    d33c:	da00      	bge.n	d340 <setvbuf+0x30>
    d33e:	e09e      	b.n	d47e <setvbuf+0x16e>
    d340:	6e63      	ldr	r3, [r4, #100]	; 0x64
    d342:	07db      	lsls	r3, r3, #31
    d344:	d533      	bpl.n	d3ae <setvbuf+0x9e>
    d346:	0021      	movs	r1, r4
    d348:	0028      	movs	r0, r5
    d34a:	f002 fea1 	bl	10090 <_fflush_r>
    d34e:	6b21      	ldr	r1, [r4, #48]	; 0x30
    d350:	2900      	cmp	r1, #0
    d352:	d008      	beq.n	d366 <setvbuf+0x56>
    d354:	0023      	movs	r3, r4
    d356:	3340      	adds	r3, #64	; 0x40
    d358:	4299      	cmp	r1, r3
    d35a:	d002      	beq.n	d362 <setvbuf+0x52>
    d35c:	0028      	movs	r0, r5
    d35e:	f002 ff9b 	bl	10298 <_free_r>
    d362:	2300      	movs	r3, #0
    d364:	6323      	str	r3, [r4, #48]	; 0x30
    d366:	2300      	movs	r3, #0
    d368:	61a3      	str	r3, [r4, #24]
    d36a:	6063      	str	r3, [r4, #4]
    d36c:	220c      	movs	r2, #12
    d36e:	5ea3      	ldrsh	r3, [r4, r2]
    d370:	061a      	lsls	r2, r3, #24
    d372:	d43d      	bmi.n	d3f0 <setvbuf+0xe0>
    d374:	4a4d      	ldr	r2, [pc, #308]	; (d4ac <setvbuf+0x19c>)
    d376:	4013      	ands	r3, r2
    d378:	81a3      	strh	r3, [r4, #12]
    d37a:	2e02      	cmp	r6, #2
    d37c:	d01e      	beq.n	d3bc <setvbuf+0xac>
    d37e:	ab01      	add	r3, sp, #4
    d380:	466a      	mov	r2, sp
    d382:	0021      	movs	r1, r4
    d384:	0028      	movs	r0, r5
    d386:	f003 fa23 	bl	107d0 <__swhatbuf_r>
    d38a:	89a3      	ldrh	r3, [r4, #12]
    d38c:	4318      	orrs	r0, r3
    d38e:	81a0      	strh	r0, [r4, #12]
    d390:	2f00      	cmp	r7, #0
    d392:	d138      	bne.n	d406 <setvbuf+0xf6>
    d394:	9f00      	ldr	r7, [sp, #0]
    d396:	0038      	movs	r0, r7
    d398:	f003 fa92 	bl	108c0 <malloc>
    d39c:	4680      	mov	r8, r0
    d39e:	2800      	cmp	r0, #0
    d3a0:	d100      	bne.n	d3a4 <setvbuf+0x94>
    d3a2:	e06f      	b.n	d484 <setvbuf+0x174>
    d3a4:	2280      	movs	r2, #128	; 0x80
    d3a6:	89a3      	ldrh	r3, [r4, #12]
    d3a8:	4313      	orrs	r3, r2
    d3aa:	81a3      	strh	r3, [r4, #12]
    d3ac:	e02e      	b.n	d40c <setvbuf+0xfc>
    d3ae:	89a3      	ldrh	r3, [r4, #12]
    d3b0:	059b      	lsls	r3, r3, #22
    d3b2:	d4c8      	bmi.n	d346 <setvbuf+0x36>
    d3b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    d3b6:	f003 fa07 	bl	107c8 <__retarget_lock_acquire_recursive>
    d3ba:	e7c4      	b.n	d346 <setvbuf+0x36>
    d3bc:	2500      	movs	r5, #0
    d3be:	2202      	movs	r2, #2
    d3c0:	4313      	orrs	r3, r2
    d3c2:	2200      	movs	r2, #0
    d3c4:	60a2      	str	r2, [r4, #8]
    d3c6:	0022      	movs	r2, r4
    d3c8:	3243      	adds	r2, #67	; 0x43
    d3ca:	6022      	str	r2, [r4, #0]
    d3cc:	6122      	str	r2, [r4, #16]
    d3ce:	2201      	movs	r2, #1
    d3d0:	6e61      	ldr	r1, [r4, #100]	; 0x64
    d3d2:	81a3      	strh	r3, [r4, #12]
    d3d4:	6162      	str	r2, [r4, #20]
    d3d6:	4211      	tst	r1, r2
    d3d8:	d104      	bne.n	d3e4 <setvbuf+0xd4>
    d3da:	059b      	lsls	r3, r3, #22
    d3dc:	d402      	bmi.n	d3e4 <setvbuf+0xd4>
    d3de:	6da0      	ldr	r0, [r4, #88]	; 0x58
    d3e0:	f003 f9f4 	bl	107cc <__retarget_lock_release_recursive>
    d3e4:	0028      	movs	r0, r5
    d3e6:	b003      	add	sp, #12
    d3e8:	bc0c      	pop	{r2, r3}
    d3ea:	4690      	mov	r8, r2
    d3ec:	4699      	mov	r9, r3
    d3ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d3f0:	6921      	ldr	r1, [r4, #16]
    d3f2:	0028      	movs	r0, r5
    d3f4:	f002 ff50 	bl	10298 <_free_r>
    d3f8:	220c      	movs	r2, #12
    d3fa:	5ea3      	ldrsh	r3, [r4, r2]
    d3fc:	e7ba      	b.n	d374 <setvbuf+0x64>
    d3fe:	0028      	movs	r0, r5
    d400:	f002 fea0 	bl	10144 <__sinit>
    d404:	e794      	b.n	d330 <setvbuf+0x20>
    d406:	4643      	mov	r3, r8
    d408:	2b00      	cmp	r3, #0
    d40a:	d0c4      	beq.n	d396 <setvbuf+0x86>
    d40c:	6bab      	ldr	r3, [r5, #56]	; 0x38
    d40e:	2b00      	cmp	r3, #0
    d410:	d027      	beq.n	d462 <setvbuf+0x152>
    d412:	9b00      	ldr	r3, [sp, #0]
    d414:	429f      	cmp	r7, r3
    d416:	d02a      	beq.n	d46e <setvbuf+0x15e>
    d418:	2380      	movs	r3, #128	; 0x80
    d41a:	89a2      	ldrh	r2, [r4, #12]
    d41c:	011b      	lsls	r3, r3, #4
    d41e:	4313      	orrs	r3, r2
    d420:	b21b      	sxth	r3, r3
    d422:	81a3      	strh	r3, [r4, #12]
    d424:	2e01      	cmp	r6, #1
    d426:	d026      	beq.n	d476 <setvbuf+0x166>
    d428:	4642      	mov	r2, r8
    d42a:	6022      	str	r2, [r4, #0]
    d42c:	6122      	str	r2, [r4, #16]
    d42e:	2208      	movs	r2, #8
    d430:	b29b      	uxth	r3, r3
    d432:	6167      	str	r7, [r4, #20]
    d434:	401a      	ands	r2, r3
    d436:	d00b      	beq.n	d450 <setvbuf+0x140>
    d438:	07da      	lsls	r2, r3, #31
    d43a:	d510      	bpl.n	d45e <setvbuf+0x14e>
    d43c:	2200      	movs	r2, #0
    d43e:	2501      	movs	r5, #1
    d440:	60a2      	str	r2, [r4, #8]
    d442:	6e62      	ldr	r2, [r4, #100]	; 0x64
    d444:	427f      	negs	r7, r7
    d446:	61a7      	str	r7, [r4, #24]
    d448:	4015      	ands	r5, r2
    d44a:	d0c6      	beq.n	d3da <setvbuf+0xca>
    d44c:	2500      	movs	r5, #0
    d44e:	e7c9      	b.n	d3e4 <setvbuf+0xd4>
    d450:	60a2      	str	r2, [r4, #8]
    d452:	2501      	movs	r5, #1
    d454:	6e62      	ldr	r2, [r4, #100]	; 0x64
    d456:	4015      	ands	r5, r2
    d458:	d0bf      	beq.n	d3da <setvbuf+0xca>
    d45a:	2500      	movs	r5, #0
    d45c:	e7c2      	b.n	d3e4 <setvbuf+0xd4>
    d45e:	60a7      	str	r7, [r4, #8]
    d460:	e7f7      	b.n	d452 <setvbuf+0x142>
    d462:	0028      	movs	r0, r5
    d464:	f002 fe6e 	bl	10144 <__sinit>
    d468:	9b00      	ldr	r3, [sp, #0]
    d46a:	429f      	cmp	r7, r3
    d46c:	d1d4      	bne.n	d418 <setvbuf+0x108>
    d46e:	220c      	movs	r2, #12
    d470:	5ea3      	ldrsh	r3, [r4, r2]
    d472:	2e01      	cmp	r6, #1
    d474:	d1d8      	bne.n	d428 <setvbuf+0x118>
    d476:	2201      	movs	r2, #1
    d478:	4313      	orrs	r3, r2
    d47a:	81a3      	strh	r3, [r4, #12]
    d47c:	e7d4      	b.n	d428 <setvbuf+0x118>
    d47e:	2501      	movs	r5, #1
    d480:	426d      	negs	r5, r5
    d482:	e7af      	b.n	d3e4 <setvbuf+0xd4>
    d484:	9b00      	ldr	r3, [sp, #0]
    d486:	4699      	mov	r9, r3
    d488:	42bb      	cmp	r3, r7
    d48a:	d005      	beq.n	d498 <setvbuf+0x188>
    d48c:	0018      	movs	r0, r3
    d48e:	f003 fa17 	bl	108c0 <malloc>
    d492:	4680      	mov	r8, r0
    d494:	2800      	cmp	r0, #0
    d496:	d104      	bne.n	d4a2 <setvbuf+0x192>
    d498:	2501      	movs	r5, #1
    d49a:	220c      	movs	r2, #12
    d49c:	5ea3      	ldrsh	r3, [r4, r2]
    d49e:	426d      	negs	r5, r5
    d4a0:	e78d      	b.n	d3be <setvbuf+0xae>
    d4a2:	464f      	mov	r7, r9
    d4a4:	e77e      	b.n	d3a4 <setvbuf+0x94>
    d4a6:	46c0      	nop			; (mov r8, r8)
    d4a8:	20000084 	.word	0x20000084
    d4ac:	fffff35c 	.word	0xfffff35c

0000d4b0 <strlen>:
    d4b0:	b510      	push	{r4, lr}
    d4b2:	0783      	lsls	r3, r0, #30
    d4b4:	d025      	beq.n	d502 <strlen+0x52>
    d4b6:	7803      	ldrb	r3, [r0, #0]
    d4b8:	2b00      	cmp	r3, #0
    d4ba:	d024      	beq.n	d506 <strlen+0x56>
    d4bc:	0003      	movs	r3, r0
    d4be:	2103      	movs	r1, #3
    d4c0:	e002      	b.n	d4c8 <strlen+0x18>
    d4c2:	781a      	ldrb	r2, [r3, #0]
    d4c4:	2a00      	cmp	r2, #0
    d4c6:	d01a      	beq.n	d4fe <strlen+0x4e>
    d4c8:	3301      	adds	r3, #1
    d4ca:	420b      	tst	r3, r1
    d4cc:	d1f9      	bne.n	d4c2 <strlen+0x12>
    d4ce:	6819      	ldr	r1, [r3, #0]
    d4d0:	4a0e      	ldr	r2, [pc, #56]	; (d50c <strlen+0x5c>)
    d4d2:	4c0f      	ldr	r4, [pc, #60]	; (d510 <strlen+0x60>)
    d4d4:	188a      	adds	r2, r1, r2
    d4d6:	438a      	bics	r2, r1
    d4d8:	4222      	tst	r2, r4
    d4da:	d106      	bne.n	d4ea <strlen+0x3a>
    d4dc:	3304      	adds	r3, #4
    d4de:	6819      	ldr	r1, [r3, #0]
    d4e0:	4a0a      	ldr	r2, [pc, #40]	; (d50c <strlen+0x5c>)
    d4e2:	188a      	adds	r2, r1, r2
    d4e4:	438a      	bics	r2, r1
    d4e6:	4222      	tst	r2, r4
    d4e8:	d0f8      	beq.n	d4dc <strlen+0x2c>
    d4ea:	001a      	movs	r2, r3
    d4ec:	781b      	ldrb	r3, [r3, #0]
    d4ee:	2b00      	cmp	r3, #0
    d4f0:	d003      	beq.n	d4fa <strlen+0x4a>
    d4f2:	3201      	adds	r2, #1
    d4f4:	7811      	ldrb	r1, [r2, #0]
    d4f6:	2900      	cmp	r1, #0
    d4f8:	d1fb      	bne.n	d4f2 <strlen+0x42>
    d4fa:	1a10      	subs	r0, r2, r0
    d4fc:	bd10      	pop	{r4, pc}
    d4fe:	1a18      	subs	r0, r3, r0
    d500:	e7fc      	b.n	d4fc <strlen+0x4c>
    d502:	0003      	movs	r3, r0
    d504:	e7e3      	b.n	d4ce <strlen+0x1e>
    d506:	2000      	movs	r0, #0
    d508:	e7f8      	b.n	d4fc <strlen+0x4c>
    d50a:	46c0      	nop			; (mov r8, r8)
    d50c:	fefefeff 	.word	0xfefefeff
    d510:	80808080 	.word	0x80808080

0000d514 <_vfprintf_r>:
    d514:	b5f0      	push	{r4, r5, r6, r7, lr}
    d516:	46de      	mov	lr, fp
    d518:	464e      	mov	r6, r9
    d51a:	4645      	mov	r5, r8
    d51c:	4657      	mov	r7, sl
    d51e:	b5e0      	push	{r5, r6, r7, lr}
    d520:	b0c3      	sub	sp, #268	; 0x10c
    d522:	4689      	mov	r9, r1
    d524:	0014      	movs	r4, r2
    d526:	001d      	movs	r5, r3
    d528:	930f      	str	r3, [sp, #60]	; 0x3c
    d52a:	0006      	movs	r6, r0
    d52c:	9006      	str	r0, [sp, #24]
    d52e:	f003 f939 	bl	107a4 <_localeconv_r>
    d532:	6803      	ldr	r3, [r0, #0]
    d534:	0018      	movs	r0, r3
    d536:	9318      	str	r3, [sp, #96]	; 0x60
    d538:	f7ff ffba 	bl	d4b0 <strlen>
    d53c:	9017      	str	r0, [sp, #92]	; 0x5c
    d53e:	2e00      	cmp	r6, #0
    d540:	d004      	beq.n	d54c <_vfprintf_r+0x38>
    d542:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    d544:	9307      	str	r3, [sp, #28]
    d546:	2b00      	cmp	r3, #0
    d548:	d100      	bne.n	d54c <_vfprintf_r+0x38>
    d54a:	e0a7      	b.n	d69c <_vfprintf_r+0x188>
    d54c:	464b      	mov	r3, r9
    d54e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    d550:	07db      	lsls	r3, r3, #31
    d552:	d478      	bmi.n	d646 <_vfprintf_r+0x132>
    d554:	464b      	mov	r3, r9
    d556:	210c      	movs	r1, #12
    d558:	5e59      	ldrsh	r1, [r3, r1]
    d55a:	b28b      	uxth	r3, r1
    d55c:	059a      	lsls	r2, r3, #22
    d55e:	d56e      	bpl.n	d63e <_vfprintf_r+0x12a>
    d560:	2280      	movs	r2, #128	; 0x80
    d562:	0192      	lsls	r2, r2, #6
    d564:	4213      	tst	r3, r2
    d566:	d109      	bne.n	d57c <_vfprintf_r+0x68>
    d568:	430a      	orrs	r2, r1
    d56a:	464b      	mov	r3, r9
    d56c:	4649      	mov	r1, r9
    d56e:	819a      	strh	r2, [r3, #12]
    d570:	6e49      	ldr	r1, [r1, #100]	; 0x64
    d572:	4bcc      	ldr	r3, [pc, #816]	; (d8a4 <_vfprintf_r+0x390>)
    d574:	400b      	ands	r3, r1
    d576:	4649      	mov	r1, r9
    d578:	664b      	str	r3, [r1, #100]	; 0x64
    d57a:	b293      	uxth	r3, r2
    d57c:	071a      	lsls	r2, r3, #28
    d57e:	d567      	bpl.n	d650 <_vfprintf_r+0x13c>
    d580:	464a      	mov	r2, r9
    d582:	6912      	ldr	r2, [r2, #16]
    d584:	2a00      	cmp	r2, #0
    d586:	d063      	beq.n	d650 <_vfprintf_r+0x13c>
    d588:	221a      	movs	r2, #26
    d58a:	401a      	ands	r2, r3
    d58c:	2a0a      	cmp	r2, #10
    d58e:	d100      	bne.n	d592 <_vfprintf_r+0x7e>
    d590:	e088      	b.n	d6a4 <_vfprintf_r+0x190>
    d592:	ab32      	add	r3, sp, #200	; 0xc8
    d594:	9325      	str	r3, [sp, #148]	; 0x94
    d596:	2300      	movs	r3, #0
    d598:	46cb      	mov	fp, r9
    d59a:	af25      	add	r7, sp, #148	; 0x94
    d59c:	60bb      	str	r3, [r7, #8]
    d59e:	607b      	str	r3, [r7, #4]
    d5a0:	9407      	str	r4, [sp, #28]
    d5a2:	9314      	str	r3, [sp, #80]	; 0x50
    d5a4:	9316      	str	r3, [sp, #88]	; 0x58
    d5a6:	9315      	str	r3, [sp, #84]	; 0x54
    d5a8:	ae32      	add	r6, sp, #200	; 0xc8
    d5aa:	9319      	str	r3, [sp, #100]	; 0x64
    d5ac:	931a      	str	r3, [sp, #104]	; 0x68
    d5ae:	930a      	str	r3, [sp, #40]	; 0x28
    d5b0:	9c07      	ldr	r4, [sp, #28]
    d5b2:	7823      	ldrb	r3, [r4, #0]
    d5b4:	2b00      	cmp	r3, #0
    d5b6:	d101      	bne.n	d5bc <_vfprintf_r+0xa8>
    d5b8:	f000 fd9e 	bl	e0f8 <_vfprintf_r+0xbe4>
    d5bc:	2b25      	cmp	r3, #37	; 0x25
    d5be:	d103      	bne.n	d5c8 <_vfprintf_r+0xb4>
    d5c0:	f000 fd9a 	bl	e0f8 <_vfprintf_r+0xbe4>
    d5c4:	2b25      	cmp	r3, #37	; 0x25
    d5c6:	d003      	beq.n	d5d0 <_vfprintf_r+0xbc>
    d5c8:	3401      	adds	r4, #1
    d5ca:	7823      	ldrb	r3, [r4, #0]
    d5cc:	2b00      	cmp	r3, #0
    d5ce:	d1f9      	bne.n	d5c4 <_vfprintf_r+0xb0>
    d5d0:	9b07      	ldr	r3, [sp, #28]
    d5d2:	1ae5      	subs	r5, r4, r3
    d5d4:	d010      	beq.n	d5f8 <_vfprintf_r+0xe4>
    d5d6:	9b07      	ldr	r3, [sp, #28]
    d5d8:	6075      	str	r5, [r6, #4]
    d5da:	6033      	str	r3, [r6, #0]
    d5dc:	68bb      	ldr	r3, [r7, #8]
    d5de:	195b      	adds	r3, r3, r5
    d5e0:	60bb      	str	r3, [r7, #8]
    d5e2:	687b      	ldr	r3, [r7, #4]
    d5e4:	3301      	adds	r3, #1
    d5e6:	607b      	str	r3, [r7, #4]
    d5e8:	2b07      	cmp	r3, #7
    d5ea:	dc4c      	bgt.n	d686 <_vfprintf_r+0x172>
    d5ec:	3608      	adds	r6, #8
    d5ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d5f0:	469c      	mov	ip, r3
    d5f2:	44ac      	add	ip, r5
    d5f4:	4663      	mov	r3, ip
    d5f6:	930a      	str	r3, [sp, #40]	; 0x28
    d5f8:	7823      	ldrb	r3, [r4, #0]
    d5fa:	2b00      	cmp	r3, #0
    d5fc:	d101      	bne.n	d602 <_vfprintf_r+0xee>
    d5fe:	f000 fc99 	bl	df34 <_vfprintf_r+0xa20>
    d602:	1c63      	adds	r3, r4, #1
    d604:	9307      	str	r3, [sp, #28]
    d606:	2300      	movs	r3, #0
    d608:	aa16      	add	r2, sp, #88	; 0x58
    d60a:	77d3      	strb	r3, [r2, #31]
    d60c:	2201      	movs	r2, #1
    d60e:	4252      	negs	r2, r2
    d610:	4692      	mov	sl, r2
    d612:	2200      	movs	r2, #0
    d614:	920b      	str	r2, [sp, #44]	; 0x2c
    d616:	3220      	adds	r2, #32
    d618:	4691      	mov	r9, r2
    d61a:	3220      	adds	r2, #32
    d61c:	7863      	ldrb	r3, [r4, #1]
    d61e:	2100      	movs	r1, #0
    d620:	2000      	movs	r0, #0
    d622:	2400      	movs	r4, #0
    d624:	4694      	mov	ip, r2
    d626:	9a07      	ldr	r2, [sp, #28]
    d628:	3201      	adds	r2, #1
    d62a:	9207      	str	r2, [sp, #28]
    d62c:	001a      	movs	r2, r3
    d62e:	3a20      	subs	r2, #32
    d630:	2a58      	cmp	r2, #88	; 0x58
    d632:	d900      	bls.n	d636 <_vfprintf_r+0x122>
    d634:	e2e7      	b.n	dc06 <_vfprintf_r+0x6f2>
    d636:	4d9c      	ldr	r5, [pc, #624]	; (d8a8 <_vfprintf_r+0x394>)
    d638:	0092      	lsls	r2, r2, #2
    d63a:	58aa      	ldr	r2, [r5, r2]
    d63c:	4697      	mov	pc, r2
    d63e:	464b      	mov	r3, r9
    d640:	6d98      	ldr	r0, [r3, #88]	; 0x58
    d642:	f003 f8c1 	bl	107c8 <__retarget_lock_acquire_recursive>
    d646:	464b      	mov	r3, r9
    d648:	210c      	movs	r1, #12
    d64a:	5e59      	ldrsh	r1, [r3, r1]
    d64c:	b28b      	uxth	r3, r1
    d64e:	e787      	b.n	d560 <_vfprintf_r+0x4c>
    d650:	4649      	mov	r1, r9
    d652:	9806      	ldr	r0, [sp, #24]
    d654:	f001 fb0e 	bl	ec74 <__swsetup_r>
    d658:	464b      	mov	r3, r9
    d65a:	2800      	cmp	r0, #0
    d65c:	d03a      	beq.n	d6d4 <_vfprintf_r+0x1c0>
    d65e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    d660:	07db      	lsls	r3, r3, #31
    d662:	d405      	bmi.n	d670 <_vfprintf_r+0x15c>
    d664:	464b      	mov	r3, r9
    d666:	899b      	ldrh	r3, [r3, #12]
    d668:	059b      	lsls	r3, r3, #22
    d66a:	d401      	bmi.n	d670 <_vfprintf_r+0x15c>
    d66c:	f000 ffcf 	bl	e60e <_vfprintf_r+0x10fa>
    d670:	2301      	movs	r3, #1
    d672:	425b      	negs	r3, r3
    d674:	930a      	str	r3, [sp, #40]	; 0x28
    d676:	980a      	ldr	r0, [sp, #40]	; 0x28
    d678:	b043      	add	sp, #268	; 0x10c
    d67a:	bc3c      	pop	{r2, r3, r4, r5}
    d67c:	4690      	mov	r8, r2
    d67e:	4699      	mov	r9, r3
    d680:	46a2      	mov	sl, r4
    d682:	46ab      	mov	fp, r5
    d684:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d686:	003a      	movs	r2, r7
    d688:	4659      	mov	r1, fp
    d68a:	9806      	ldr	r0, [sp, #24]
    d68c:	f004 fa1e 	bl	11acc <__sprint_r>
    d690:	2800      	cmp	r0, #0
    d692:	d001      	beq.n	d698 <_vfprintf_r+0x184>
    d694:	f000 fcce 	bl	e034 <_vfprintf_r+0xb20>
    d698:	ae32      	add	r6, sp, #200	; 0xc8
    d69a:	e7a8      	b.n	d5ee <_vfprintf_r+0xda>
    d69c:	9806      	ldr	r0, [sp, #24]
    d69e:	f002 fd51 	bl	10144 <__sinit>
    d6a2:	e753      	b.n	d54c <_vfprintf_r+0x38>
    d6a4:	464a      	mov	r2, r9
    d6a6:	210e      	movs	r1, #14
    d6a8:	5e52      	ldrsh	r2, [r2, r1]
    d6aa:	2a00      	cmp	r2, #0
    d6ac:	da00      	bge.n	d6b0 <_vfprintf_r+0x19c>
    d6ae:	e770      	b.n	d592 <_vfprintf_r+0x7e>
    d6b0:	464a      	mov	r2, r9
    d6b2:	6e52      	ldr	r2, [r2, #100]	; 0x64
    d6b4:	07d2      	lsls	r2, r2, #31
    d6b6:	d405      	bmi.n	d6c4 <_vfprintf_r+0x1b0>
    d6b8:	059b      	lsls	r3, r3, #22
    d6ba:	d403      	bmi.n	d6c4 <_vfprintf_r+0x1b0>
    d6bc:	464b      	mov	r3, r9
    d6be:	6d98      	ldr	r0, [r3, #88]	; 0x58
    d6c0:	f003 f884 	bl	107cc <__retarget_lock_release_recursive>
    d6c4:	002b      	movs	r3, r5
    d6c6:	0022      	movs	r2, r4
    d6c8:	4649      	mov	r1, r9
    d6ca:	9806      	ldr	r0, [sp, #24]
    d6cc:	f001 fa8e 	bl	ebec <__sbprintf>
    d6d0:	900a      	str	r0, [sp, #40]	; 0x28
    d6d2:	e7d0      	b.n	d676 <_vfprintf_r+0x162>
    d6d4:	899b      	ldrh	r3, [r3, #12]
    d6d6:	e757      	b.n	d588 <_vfprintf_r+0x74>
    d6d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d6da:	920f      	str	r2, [sp, #60]	; 0x3c
    d6dc:	425b      	negs	r3, r3
    d6de:	930b      	str	r3, [sp, #44]	; 0x2c
    d6e0:	2304      	movs	r3, #4
    d6e2:	431c      	orrs	r4, r3
    d6e4:	9b07      	ldr	r3, [sp, #28]
    d6e6:	781b      	ldrb	r3, [r3, #0]
    d6e8:	e79d      	b.n	d626 <_vfprintf_r+0x112>
    d6ea:	9b07      	ldr	r3, [sp, #28]
    d6ec:	2101      	movs	r1, #1
    d6ee:	781b      	ldrb	r3, [r3, #0]
    d6f0:	202b      	movs	r0, #43	; 0x2b
    d6f2:	e798      	b.n	d626 <_vfprintf_r+0x112>
    d6f4:	9b07      	ldr	r3, [sp, #28]
    d6f6:	1c5a      	adds	r2, r3, #1
    d6f8:	781b      	ldrb	r3, [r3, #0]
    d6fa:	4690      	mov	r8, r2
    d6fc:	2b2a      	cmp	r3, #42	; 0x2a
    d6fe:	d101      	bne.n	d704 <_vfprintf_r+0x1f0>
    d700:	f001 fa38 	bl	eb74 <_vfprintf_r+0x1660>
    d704:	001a      	movs	r2, r3
    d706:	2500      	movs	r5, #0
    d708:	3a30      	subs	r2, #48	; 0x30
    d70a:	46aa      	mov	sl, r5
    d70c:	2a09      	cmp	r2, #9
    d70e:	d901      	bls.n	d714 <_vfprintf_r+0x200>
    d710:	f001 f96d 	bl	e9ee <_vfprintf_r+0x14da>
    d714:	0025      	movs	r5, r4
    d716:	4643      	mov	r3, r8
    d718:	4654      	mov	r4, sl
    d71a:	4688      	mov	r8, r1
    d71c:	4682      	mov	sl, r0
    d71e:	00a1      	lsls	r1, r4, #2
    d720:	190c      	adds	r4, r1, r4
    d722:	7818      	ldrb	r0, [r3, #0]
    d724:	0064      	lsls	r4, r4, #1
    d726:	18a4      	adds	r4, r4, r2
    d728:	0002      	movs	r2, r0
    d72a:	1c59      	adds	r1, r3, #1
    d72c:	3a30      	subs	r2, #48	; 0x30
    d72e:	000b      	movs	r3, r1
    d730:	2a09      	cmp	r2, #9
    d732:	d9f4      	bls.n	d71e <_vfprintf_r+0x20a>
    d734:	9107      	str	r1, [sp, #28]
    d736:	0003      	movs	r3, r0
    d738:	4641      	mov	r1, r8
    d73a:	4650      	mov	r0, sl
    d73c:	46a2      	mov	sl, r4
    d73e:	002c      	movs	r4, r5
    d740:	e774      	b.n	d62c <_vfprintf_r+0x118>
    d742:	9312      	str	r3, [sp, #72]	; 0x48
    d744:	2900      	cmp	r1, #0
    d746:	d001      	beq.n	d74c <_vfprintf_r+0x238>
    d748:	f001 fa2e 	bl	eba8 <_vfprintf_r+0x1694>
    d74c:	4b57      	ldr	r3, [pc, #348]	; (d8ac <_vfprintf_r+0x398>)
    d74e:	9319      	str	r3, [sp, #100]	; 0x64
    d750:	06a3      	lsls	r3, r4, #26
    d752:	d501      	bpl.n	d758 <_vfprintf_r+0x244>
    d754:	f000 fe9a 	bl	e48c <_vfprintf_r+0xf78>
    d758:	06e3      	lsls	r3, r4, #27
    d75a:	d501      	bpl.n	d760 <_vfprintf_r+0x24c>
    d75c:	f000 fd9a 	bl	e294 <_vfprintf_r+0xd80>
    d760:	0663      	lsls	r3, r4, #25
    d762:	d401      	bmi.n	d768 <_vfprintf_r+0x254>
    d764:	f000 fd96 	bl	e294 <_vfprintf_r+0xd80>
    d768:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d76a:	881a      	ldrh	r2, [r3, #0]
    d76c:	920c      	str	r2, [sp, #48]	; 0x30
    d76e:	2200      	movs	r2, #0
    d770:	3304      	adds	r3, #4
    d772:	920d      	str	r2, [sp, #52]	; 0x34
    d774:	930f      	str	r3, [sp, #60]	; 0x3c
    d776:	07e3      	lsls	r3, r4, #31
    d778:	d401      	bmi.n	d77e <_vfprintf_r+0x26a>
    d77a:	f000 fd76 	bl	e26a <_vfprintf_r+0xd56>
    d77e:	990c      	ldr	r1, [sp, #48]	; 0x30
    d780:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    d782:	000b      	movs	r3, r1
    d784:	4313      	orrs	r3, r2
    d786:	001a      	movs	r2, r3
    d788:	2302      	movs	r3, #2
    d78a:	2a00      	cmp	r2, #0
    d78c:	d008      	beq.n	d7a0 <_vfprintf_r+0x28c>
    d78e:	2030      	movs	r0, #48	; 0x30
    d790:	a91e      	add	r1, sp, #120	; 0x78
    d792:	7008      	strb	r0, [r1, #0]
    d794:	2548      	movs	r5, #72	; 0x48
    d796:	4668      	mov	r0, sp
    d798:	1940      	adds	r0, r0, r5
    d79a:	7800      	ldrb	r0, [r0, #0]
    d79c:	431c      	orrs	r4, r3
    d79e:	7048      	strb	r0, [r1, #1]
    d7a0:	2100      	movs	r1, #0
    d7a2:	4688      	mov	r8, r1
    d7a4:	a816      	add	r0, sp, #88	; 0x58
    d7a6:	77c1      	strb	r1, [r0, #31]
    d7a8:	4651      	mov	r1, sl
    d7aa:	3101      	adds	r1, #1
    d7ac:	d100      	bne.n	d7b0 <_vfprintf_r+0x29c>
    d7ae:	e0e6      	b.n	d97e <_vfprintf_r+0x46a>
    d7b0:	2180      	movs	r1, #128	; 0x80
    d7b2:	0020      	movs	r0, r4
    d7b4:	4388      	bics	r0, r1
    d7b6:	9009      	str	r0, [sp, #36]	; 0x24
    d7b8:	2a00      	cmp	r2, #0
    d7ba:	d000      	beq.n	d7be <_vfprintf_r+0x2aa>
    d7bc:	e0e3      	b.n	d986 <_vfprintf_r+0x472>
    d7be:	4652      	mov	r2, sl
    d7c0:	2a00      	cmp	r2, #0
    d7c2:	d001      	beq.n	d7c8 <_vfprintf_r+0x2b4>
    d7c4:	f000 fc38 	bl	e038 <_vfprintf_r+0xb24>
    d7c8:	2b00      	cmp	r3, #0
    d7ca:	d001      	beq.n	d7d0 <_vfprintf_r+0x2bc>
    d7cc:	f000 fd0c 	bl	e1e8 <_vfprintf_r+0xcd4>
    d7d0:	2001      	movs	r0, #1
    d7d2:	ab32      	add	r3, sp, #200	; 0xc8
    d7d4:	4020      	ands	r0, r4
    d7d6:	900e      	str	r0, [sp, #56]	; 0x38
    d7d8:	9311      	str	r3, [sp, #68]	; 0x44
    d7da:	d008      	beq.n	d7ee <_vfprintf_r+0x2da>
    d7dc:	2327      	movs	r3, #39	; 0x27
    d7de:	2130      	movs	r1, #48	; 0x30
    d7e0:	aa28      	add	r2, sp, #160	; 0xa0
    d7e2:	54d1      	strb	r1, [r2, r3]
    d7e4:	aa16      	add	r2, sp, #88	; 0x58
    d7e6:	4694      	mov	ip, r2
    d7e8:	3348      	adds	r3, #72	; 0x48
    d7ea:	4463      	add	r3, ip
    d7ec:	9311      	str	r3, [sp, #68]	; 0x44
    d7ee:	4653      	mov	r3, sl
    d7f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    d7f2:	9308      	str	r3, [sp, #32]
    d7f4:	4592      	cmp	sl, r2
    d7f6:	da00      	bge.n	d7fa <_vfprintf_r+0x2e6>
    d7f8:	9208      	str	r2, [sp, #32]
    d7fa:	2300      	movs	r3, #0
    d7fc:	9313      	str	r3, [sp, #76]	; 0x4c
    d7fe:	4643      	mov	r3, r8
    d800:	2b00      	cmp	r3, #0
    d802:	d002      	beq.n	d80a <_vfprintf_r+0x2f6>
    d804:	9b08      	ldr	r3, [sp, #32]
    d806:	3301      	adds	r3, #1
    d808:	9308      	str	r3, [sp, #32]
    d80a:	2302      	movs	r3, #2
    d80c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d80e:	401a      	ands	r2, r3
    d810:	4691      	mov	r9, r2
    d812:	d002      	beq.n	d81a <_vfprintf_r+0x306>
    d814:	9b08      	ldr	r3, [sp, #32]
    d816:	3302      	adds	r3, #2
    d818:	9308      	str	r3, [sp, #32]
    d81a:	2384      	movs	r3, #132	; 0x84
    d81c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d81e:	401a      	ands	r2, r3
    d820:	9210      	str	r2, [sp, #64]	; 0x40
    d822:	d000      	beq.n	d826 <_vfprintf_r+0x312>
    d824:	e207      	b.n	dc36 <_vfprintf_r+0x722>
    d826:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d828:	9a08      	ldr	r2, [sp, #32]
    d82a:	1a9c      	subs	r4, r3, r2
    d82c:	2c00      	cmp	r4, #0
    d82e:	dc00      	bgt.n	d832 <_vfprintf_r+0x31e>
    d830:	e201      	b.n	dc36 <_vfprintf_r+0x722>
    d832:	491f      	ldr	r1, [pc, #124]	; (d8b0 <_vfprintf_r+0x39c>)
    d834:	68ba      	ldr	r2, [r7, #8]
    d836:	687b      	ldr	r3, [r7, #4]
    d838:	4688      	mov	r8, r1
    d83a:	2c10      	cmp	r4, #16
    d83c:	dd21      	ble.n	d882 <_vfprintf_r+0x36e>
    d83e:	0031      	movs	r1, r6
    d840:	2510      	movs	r5, #16
    d842:	465e      	mov	r6, fp
    d844:	e003      	b.n	d84e <_vfprintf_r+0x33a>
    d846:	3c10      	subs	r4, #16
    d848:	3108      	adds	r1, #8
    d84a:	2c10      	cmp	r4, #16
    d84c:	dd17      	ble.n	d87e <_vfprintf_r+0x36a>
    d84e:	4640      	mov	r0, r8
    d850:	3210      	adds	r2, #16
    d852:	3301      	adds	r3, #1
    d854:	6008      	str	r0, [r1, #0]
    d856:	604d      	str	r5, [r1, #4]
    d858:	60ba      	str	r2, [r7, #8]
    d85a:	607b      	str	r3, [r7, #4]
    d85c:	2b07      	cmp	r3, #7
    d85e:	ddf2      	ble.n	d846 <_vfprintf_r+0x332>
    d860:	003a      	movs	r2, r7
    d862:	0031      	movs	r1, r6
    d864:	9806      	ldr	r0, [sp, #24]
    d866:	f004 f931 	bl	11acc <__sprint_r>
    d86a:	2800      	cmp	r0, #0
    d86c:	d001      	beq.n	d872 <_vfprintf_r+0x35e>
    d86e:	f000 fccf 	bl	e210 <_vfprintf_r+0xcfc>
    d872:	3c10      	subs	r4, #16
    d874:	68ba      	ldr	r2, [r7, #8]
    d876:	687b      	ldr	r3, [r7, #4]
    d878:	a932      	add	r1, sp, #200	; 0xc8
    d87a:	2c10      	cmp	r4, #16
    d87c:	dce7      	bgt.n	d84e <_vfprintf_r+0x33a>
    d87e:	46b3      	mov	fp, r6
    d880:	000e      	movs	r6, r1
    d882:	4641      	mov	r1, r8
    d884:	6074      	str	r4, [r6, #4]
    d886:	3301      	adds	r3, #1
    d888:	18a4      	adds	r4, r4, r2
    d88a:	6031      	str	r1, [r6, #0]
    d88c:	60bc      	str	r4, [r7, #8]
    d88e:	607b      	str	r3, [r7, #4]
    d890:	2b07      	cmp	r3, #7
    d892:	dd01      	ble.n	d898 <_vfprintf_r+0x384>
    d894:	f000 fcae 	bl	e1f4 <_vfprintf_r+0xce0>
    d898:	ab16      	add	r3, sp, #88	; 0x58
    d89a:	7fdb      	ldrb	r3, [r3, #31]
    d89c:	3608      	adds	r6, #8
    d89e:	4698      	mov	r8, r3
    d8a0:	e1ca      	b.n	dc38 <_vfprintf_r+0x724>
    d8a2:	46c0      	nop			; (mov r8, r8)
    d8a4:	ffffdfff 	.word	0xffffdfff
    d8a8:	000123e8 	.word	0x000123e8
    d8ac:	00012570 	.word	0x00012570
    d8b0:	00012590 	.word	0x00012590
    d8b4:	2200      	movs	r2, #0
    d8b6:	9d07      	ldr	r5, [sp, #28]
    d8b8:	3b30      	subs	r3, #48	; 0x30
    d8ba:	46a8      	mov	r8, r5
    d8bc:	920b      	str	r2, [sp, #44]	; 0x2c
    d8be:	001a      	movs	r2, r3
    d8c0:	9408      	str	r4, [sp, #32]
    d8c2:	002c      	movs	r4, r5
    d8c4:	4655      	mov	r5, sl
    d8c6:	4682      	mov	sl, r0
    d8c8:	4640      	mov	r0, r8
    d8ca:	4688      	mov	r8, r1
    d8cc:	0011      	movs	r1, r2
    d8ce:	2200      	movs	r2, #0
    d8d0:	0093      	lsls	r3, r2, #2
    d8d2:	189a      	adds	r2, r3, r2
    d8d4:	7803      	ldrb	r3, [r0, #0]
    d8d6:	0052      	lsls	r2, r2, #1
    d8d8:	188a      	adds	r2, r1, r2
    d8da:	0019      	movs	r1, r3
    d8dc:	3401      	adds	r4, #1
    d8de:	3930      	subs	r1, #48	; 0x30
    d8e0:	0020      	movs	r0, r4
    d8e2:	2909      	cmp	r1, #9
    d8e4:	d9f4      	bls.n	d8d0 <_vfprintf_r+0x3bc>
    d8e6:	9407      	str	r4, [sp, #28]
    d8e8:	4650      	mov	r0, sl
    d8ea:	9c08      	ldr	r4, [sp, #32]
    d8ec:	920b      	str	r2, [sp, #44]	; 0x2c
    d8ee:	4641      	mov	r1, r8
    d8f0:	46aa      	mov	sl, r5
    d8f2:	e69b      	b.n	d62c <_vfprintf_r+0x118>
    d8f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    d8f6:	9312      	str	r3, [sp, #72]	; 0x48
    d8f8:	6813      	ldr	r3, [r2, #0]
    d8fa:	2120      	movs	r1, #32
    d8fc:	9308      	str	r3, [sp, #32]
    d8fe:	466b      	mov	r3, sp
    d900:	185b      	adds	r3, r3, r1
    d902:	781b      	ldrb	r3, [r3, #0]
    d904:	ad28      	add	r5, sp, #160	; 0xa0
    d906:	702b      	strb	r3, [r5, #0]
    d908:	2300      	movs	r3, #0
    d90a:	a916      	add	r1, sp, #88	; 0x58
    d90c:	77cb      	strb	r3, [r1, #31]
    d90e:	0013      	movs	r3, r2
    d910:	3304      	adds	r3, #4
    d912:	930f      	str	r3, [sp, #60]	; 0x3c
    d914:	2300      	movs	r3, #0
    d916:	9409      	str	r4, [sp, #36]	; 0x24
    d918:	4698      	mov	r8, r3
    d91a:	3301      	adds	r3, #1
    d91c:	9308      	str	r3, [sp, #32]
    d91e:	930e      	str	r3, [sp, #56]	; 0x38
    d920:	2300      	movs	r3, #0
    d922:	9511      	str	r5, [sp, #68]	; 0x44
    d924:	469a      	mov	sl, r3
    d926:	9313      	str	r3, [sp, #76]	; 0x4c
    d928:	e76f      	b.n	d80a <_vfprintf_r+0x2f6>
    d92a:	9312      	str	r3, [sp, #72]	; 0x48
    d92c:	2900      	cmp	r1, #0
    d92e:	d001      	beq.n	d934 <_vfprintf_r+0x420>
    d930:	f001 f94d 	bl	ebce <_vfprintf_r+0x16ba>
    d934:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    d936:	06a3      	lsls	r3, r4, #26
    d938:	d501      	bpl.n	d93e <_vfprintf_r+0x42a>
    d93a:	f000 fd5a 	bl	e3f2 <_vfprintf_r+0xede>
    d93e:	06e3      	lsls	r3, r4, #27
    d940:	d501      	bpl.n	d946 <_vfprintf_r+0x432>
    d942:	f000 fcab 	bl	e29c <_vfprintf_r+0xd88>
    d946:	0663      	lsls	r3, r4, #25
    d948:	d401      	bmi.n	d94e <_vfprintf_r+0x43a>
    d94a:	f000 fca7 	bl	e29c <_vfprintf_r+0xd88>
    d94e:	2100      	movs	r1, #0
    d950:	5e53      	ldrsh	r3, [r2, r1]
    d952:	930c      	str	r3, [sp, #48]	; 0x30
    d954:	3204      	adds	r2, #4
    d956:	17db      	asrs	r3, r3, #31
    d958:	930d      	str	r3, [sp, #52]	; 0x34
    d95a:	920f      	str	r2, [sp, #60]	; 0x3c
    d95c:	2b00      	cmp	r3, #0
    d95e:	da01      	bge.n	d964 <_vfprintf_r+0x450>
    d960:	f000 fdb2 	bl	e4c8 <_vfprintf_r+0xfb4>
    d964:	990c      	ldr	r1, [sp, #48]	; 0x30
    d966:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    d968:	0008      	movs	r0, r1
    d96a:	4651      	mov	r1, sl
    d96c:	ab16      	add	r3, sp, #88	; 0x58
    d96e:	7fdb      	ldrb	r3, [r3, #31]
    d970:	4310      	orrs	r0, r2
    d972:	4698      	mov	r8, r3
    d974:	0002      	movs	r2, r0
    d976:	2301      	movs	r3, #1
    d978:	3101      	adds	r1, #1
    d97a:	d000      	beq.n	d97e <_vfprintf_r+0x46a>
    d97c:	e718      	b.n	d7b0 <_vfprintf_r+0x29c>
    d97e:	2a00      	cmp	r2, #0
    d980:	d100      	bne.n	d984 <_vfprintf_r+0x470>
    d982:	e35a      	b.n	e03a <_vfprintf_r+0xb26>
    d984:	9409      	str	r4, [sp, #36]	; 0x24
    d986:	2b01      	cmp	r3, #1
    d988:	d101      	bne.n	d98e <_vfprintf_r+0x47a>
    d98a:	f000 fc06 	bl	e19a <_vfprintf_r+0xc86>
    d98e:	2b02      	cmp	r3, #2
    d990:	d000      	beq.n	d994 <_vfprintf_r+0x480>
    d992:	e380      	b.n	e096 <_vfprintf_r+0xb82>
    d994:	9c19      	ldr	r4, [sp, #100]	; 0x64
    d996:	200f      	movs	r0, #15
    d998:	46a1      	mov	r9, r4
    d99a:	46b4      	mov	ip, r6
    d99c:	ab32      	add	r3, sp, #200	; 0xc8
    d99e:	0019      	movs	r1, r3
    d9a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d9a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d9a4:	0004      	movs	r4, r0
    d9a6:	464d      	mov	r5, r9
    d9a8:	4014      	ands	r4, r2
    d9aa:	5d2c      	ldrb	r4, [r5, r4]
    d9ac:	071e      	lsls	r6, r3, #28
    d9ae:	0915      	lsrs	r5, r2, #4
    d9b0:	3901      	subs	r1, #1
    d9b2:	432e      	orrs	r6, r5
    d9b4:	700c      	strb	r4, [r1, #0]
    d9b6:	091c      	lsrs	r4, r3, #4
    d9b8:	0023      	movs	r3, r4
    d9ba:	0034      	movs	r4, r6
    d9bc:	0032      	movs	r2, r6
    d9be:	431c      	orrs	r4, r3
    d9c0:	d1f0      	bne.n	d9a4 <_vfprintf_r+0x490>
    d9c2:	920c      	str	r2, [sp, #48]	; 0x30
    d9c4:	930d      	str	r3, [sp, #52]	; 0x34
    d9c6:	ab32      	add	r3, sp, #200	; 0xc8
    d9c8:	1a5b      	subs	r3, r3, r1
    d9ca:	9111      	str	r1, [sp, #68]	; 0x44
    d9cc:	4666      	mov	r6, ip
    d9ce:	930e      	str	r3, [sp, #56]	; 0x38
    d9d0:	e70d      	b.n	d7ee <_vfprintf_r+0x2da>
    d9d2:	4663      	mov	r3, ip
    d9d4:	431c      	orrs	r4, r3
    d9d6:	9b07      	ldr	r3, [sp, #28]
    d9d8:	781b      	ldrb	r3, [r3, #0]
    d9da:	e624      	b.n	d626 <_vfprintf_r+0x112>
    d9dc:	9b07      	ldr	r3, [sp, #28]
    d9de:	781b      	ldrb	r3, [r3, #0]
    d9e0:	2b6c      	cmp	r3, #108	; 0x6c
    d9e2:	d101      	bne.n	d9e8 <_vfprintf_r+0x4d4>
    d9e4:	f000 fe8c 	bl	e700 <_vfprintf_r+0x11ec>
    d9e8:	2210      	movs	r2, #16
    d9ea:	4314      	orrs	r4, r2
    d9ec:	e61b      	b.n	d626 <_vfprintf_r+0x112>
    d9ee:	2900      	cmp	r1, #0
    d9f0:	d001      	beq.n	d9f6 <_vfprintf_r+0x4e2>
    d9f2:	f001 f8d5 	bl	eba0 <_vfprintf_r+0x168c>
    d9f6:	06a3      	lsls	r3, r4, #26
    d9f8:	d501      	bpl.n	d9fe <_vfprintf_r+0x4ea>
    d9fa:	f000 fe76 	bl	e6ea <_vfprintf_r+0x11d6>
    d9fe:	06e3      	lsls	r3, r4, #27
    da00:	d500      	bpl.n	da04 <_vfprintf_r+0x4f0>
    da02:	e110      	b.n	dc26 <_vfprintf_r+0x712>
    da04:	0663      	lsls	r3, r4, #25
    da06:	d400      	bmi.n	da0a <_vfprintf_r+0x4f6>
    da08:	e10d      	b.n	dc26 <_vfprintf_r+0x712>
    da0a:	4669      	mov	r1, sp
    da0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    da0e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
    da10:	681a      	ldr	r2, [r3, #0]
    da12:	3304      	adds	r3, #4
    da14:	9208      	str	r2, [sp, #32]
    da16:	8011      	strh	r1, [r2, #0]
    da18:	930f      	str	r3, [sp, #60]	; 0x3c
    da1a:	e5c9      	b.n	d5b0 <_vfprintf_r+0x9c>
    da1c:	990f      	ldr	r1, [sp, #60]	; 0x3c
    da1e:	2230      	movs	r2, #48	; 0x30
    da20:	680b      	ldr	r3, [r1, #0]
    da22:	930c      	str	r3, [sp, #48]	; 0x30
    da24:	2300      	movs	r3, #0
    da26:	930d      	str	r3, [sp, #52]	; 0x34
    da28:	3302      	adds	r3, #2
    da2a:	431c      	orrs	r4, r3
    da2c:	ab1e      	add	r3, sp, #120	; 0x78
    da2e:	701a      	strb	r2, [r3, #0]
    da30:	3248      	adds	r2, #72	; 0x48
    da32:	705a      	strb	r2, [r3, #1]
    da34:	000b      	movs	r3, r1
    da36:	3304      	adds	r3, #4
    da38:	930f      	str	r3, [sp, #60]	; 0x3c
    da3a:	4bc1      	ldr	r3, [pc, #772]	; (dd40 <_vfprintf_r+0x82c>)
    da3c:	9212      	str	r2, [sp, #72]	; 0x48
    da3e:	9319      	str	r3, [sp, #100]	; 0x64
    da40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    da42:	2302      	movs	r3, #2
    da44:	e6ac      	b.n	d7a0 <_vfprintf_r+0x28c>
    da46:	464b      	mov	r3, r9
    da48:	431c      	orrs	r4, r3
    da4a:	9b07      	ldr	r3, [sp, #28]
    da4c:	781b      	ldrb	r3, [r3, #0]
    da4e:	e5ea      	b.n	d626 <_vfprintf_r+0x112>
    da50:	9312      	str	r3, [sp, #72]	; 0x48
    da52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    da54:	a916      	add	r1, sp, #88	; 0x58
    da56:	1d1d      	adds	r5, r3, #4
    da58:	681b      	ldr	r3, [r3, #0]
    da5a:	001a      	movs	r2, r3
    da5c:	9311      	str	r3, [sp, #68]	; 0x44
    da5e:	2300      	movs	r3, #0
    da60:	77cb      	strb	r3, [r1, #31]
    da62:	2a00      	cmp	r2, #0
    da64:	d101      	bne.n	da6a <_vfprintf_r+0x556>
    da66:	f000 ff01 	bl	e86c <_vfprintf_r+0x1358>
    da6a:	4653      	mov	r3, sl
    da6c:	3301      	adds	r3, #1
    da6e:	d101      	bne.n	da74 <_vfprintf_r+0x560>
    da70:	f000 fe64 	bl	e73c <_vfprintf_r+0x1228>
    da74:	4652      	mov	r2, sl
    da76:	2100      	movs	r1, #0
    da78:	9811      	ldr	r0, [sp, #68]	; 0x44
    da7a:	f003 f9df 	bl	10e3c <memchr>
    da7e:	2800      	cmp	r0, #0
    da80:	d101      	bne.n	da86 <_vfprintf_r+0x572>
    da82:	f000 ff78 	bl	e976 <_vfprintf_r+0x1462>
    da86:	9b11      	ldr	r3, [sp, #68]	; 0x44
    da88:	1ac3      	subs	r3, r0, r3
    da8a:	001a      	movs	r2, r3
    da8c:	930e      	str	r3, [sp, #56]	; 0x38
    da8e:	43db      	mvns	r3, r3
    da90:	17db      	asrs	r3, r3, #31
    da92:	401a      	ands	r2, r3
    da94:	ab16      	add	r3, sp, #88	; 0x58
    da96:	7fdb      	ldrb	r3, [r3, #31]
    da98:	9208      	str	r2, [sp, #32]
    da9a:	4698      	mov	r8, r3
    da9c:	2300      	movs	r3, #0
    da9e:	950f      	str	r5, [sp, #60]	; 0x3c
    daa0:	9409      	str	r4, [sp, #36]	; 0x24
    daa2:	469a      	mov	sl, r3
    daa4:	9313      	str	r3, [sp, #76]	; 0x4c
    daa6:	e6aa      	b.n	d7fe <_vfprintf_r+0x2ea>
    daa8:	2308      	movs	r3, #8
    daaa:	431c      	orrs	r4, r3
    daac:	9b07      	ldr	r3, [sp, #28]
    daae:	781b      	ldrb	r3, [r3, #0]
    dab0:	e5b9      	b.n	d626 <_vfprintf_r+0x112>
    dab2:	9312      	str	r3, [sp, #72]	; 0x48
    dab4:	2310      	movs	r3, #16
    dab6:	431c      	orrs	r4, r3
    dab8:	06a3      	lsls	r3, r4, #26
    daba:	d501      	bpl.n	dac0 <_vfprintf_r+0x5ac>
    dabc:	f000 fca7 	bl	e40e <_vfprintf_r+0xefa>
    dac0:	06e3      	lsls	r3, r4, #27
    dac2:	d500      	bpl.n	dac6 <_vfprintf_r+0x5b2>
    dac4:	e3ee      	b.n	e2a4 <_vfprintf_r+0xd90>
    dac6:	0663      	lsls	r3, r4, #25
    dac8:	d400      	bmi.n	dacc <_vfprintf_r+0x5b8>
    daca:	e3eb      	b.n	e2a4 <_vfprintf_r+0xd90>
    dacc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    dace:	881a      	ldrh	r2, [r3, #0]
    dad0:	920c      	str	r2, [sp, #48]	; 0x30
    dad2:	2200      	movs	r2, #0
    dad4:	3304      	adds	r3, #4
    dad6:	920d      	str	r2, [sp, #52]	; 0x34
    dad8:	930f      	str	r3, [sp, #60]	; 0x3c
    dada:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    dadc:	2300      	movs	r3, #0
    dade:	e65f      	b.n	d7a0 <_vfprintf_r+0x28c>
    dae0:	9312      	str	r3, [sp, #72]	; 0x48
    dae2:	2310      	movs	r3, #16
    dae4:	431c      	orrs	r4, r3
    dae6:	06a3      	lsls	r3, r4, #26
    dae8:	d501      	bpl.n	daee <_vfprintf_r+0x5da>
    daea:	f000 fcba 	bl	e462 <_vfprintf_r+0xf4e>
    daee:	06e3      	lsls	r3, r4, #27
    daf0:	d500      	bpl.n	daf4 <_vfprintf_r+0x5e0>
    daf2:	e3da      	b.n	e2aa <_vfprintf_r+0xd96>
    daf4:	0663      	lsls	r3, r4, #25
    daf6:	d400      	bmi.n	dafa <_vfprintf_r+0x5e6>
    daf8:	e3d7      	b.n	e2aa <_vfprintf_r+0xd96>
    dafa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    dafc:	881a      	ldrh	r2, [r3, #0]
    dafe:	920c      	str	r2, [sp, #48]	; 0x30
    db00:	2200      	movs	r2, #0
    db02:	3304      	adds	r3, #4
    db04:	920d      	str	r2, [sp, #52]	; 0x34
    db06:	930f      	str	r3, [sp, #60]	; 0x3c
    db08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    db0a:	2301      	movs	r3, #1
    db0c:	e648      	b.n	d7a0 <_vfprintf_r+0x28c>
    db0e:	9312      	str	r3, [sp, #72]	; 0x48
    db10:	2900      	cmp	r1, #0
    db12:	d001      	beq.n	db18 <_vfprintf_r+0x604>
    db14:	f001 f857 	bl	ebc6 <_vfprintf_r+0x16b2>
    db18:	4b8a      	ldr	r3, [pc, #552]	; (dd44 <_vfprintf_r+0x830>)
    db1a:	9319      	str	r3, [sp, #100]	; 0x64
    db1c:	e618      	b.n	d750 <_vfprintf_r+0x23c>
    db1e:	2301      	movs	r3, #1
    db20:	431c      	orrs	r4, r3
    db22:	9b07      	ldr	r3, [sp, #28]
    db24:	781b      	ldrb	r3, [r3, #0]
    db26:	e57e      	b.n	d626 <_vfprintf_r+0x112>
    db28:	2380      	movs	r3, #128	; 0x80
    db2a:	431c      	orrs	r4, r3
    db2c:	9b07      	ldr	r3, [sp, #28]
    db2e:	781b      	ldrb	r3, [r3, #0]
    db30:	e579      	b.n	d626 <_vfprintf_r+0x112>
    db32:	9b07      	ldr	r3, [sp, #28]
    db34:	781b      	ldrb	r3, [r3, #0]
    db36:	2800      	cmp	r0, #0
    db38:	d000      	beq.n	db3c <_vfprintf_r+0x628>
    db3a:	e574      	b.n	d626 <_vfprintf_r+0x112>
    db3c:	2101      	movs	r1, #1
    db3e:	3020      	adds	r0, #32
    db40:	e571      	b.n	d626 <_vfprintf_r+0x112>
    db42:	9312      	str	r3, [sp, #72]	; 0x48
    db44:	2900      	cmp	r1, #0
    db46:	d001      	beq.n	db4c <_vfprintf_r+0x638>
    db48:	f001 f839 	bl	ebbe <_vfprintf_r+0x16aa>
    db4c:	2207      	movs	r2, #7
    db4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    db50:	3307      	adds	r3, #7
    db52:	4393      	bics	r3, r2
    db54:	3201      	adds	r2, #1
    db56:	4694      	mov	ip, r2
    db58:	449c      	add	ip, r3
    db5a:	4662      	mov	r2, ip
    db5c:	920f      	str	r2, [sp, #60]	; 0x3c
    db5e:	681a      	ldr	r2, [r3, #0]
    db60:	9216      	str	r2, [sp, #88]	; 0x58
    db62:	685b      	ldr	r3, [r3, #4]
    db64:	2201      	movs	r2, #1
    db66:	9315      	str	r3, [sp, #84]	; 0x54
    db68:	9b15      	ldr	r3, [sp, #84]	; 0x54
    db6a:	9d16      	ldr	r5, [sp, #88]	; 0x58
    db6c:	005b      	lsls	r3, r3, #1
    db6e:	085b      	lsrs	r3, r3, #1
    db70:	4698      	mov	r8, r3
    db72:	4252      	negs	r2, r2
    db74:	4b74      	ldr	r3, [pc, #464]	; (dd48 <_vfprintf_r+0x834>)
    db76:	0028      	movs	r0, r5
    db78:	4641      	mov	r1, r8
    db7a:	f7ff f94b 	bl	ce14 <__aeabi_dcmpun>
    db7e:	2800      	cmp	r0, #0
    db80:	d001      	beq.n	db86 <_vfprintf_r+0x672>
    db82:	f000 fcb4 	bl	e4ee <_vfprintf_r+0xfda>
    db86:	2201      	movs	r2, #1
    db88:	4b6f      	ldr	r3, [pc, #444]	; (dd48 <_vfprintf_r+0x834>)
    db8a:	4252      	negs	r2, r2
    db8c:	0028      	movs	r0, r5
    db8e:	4641      	mov	r1, r8
    db90:	f7fc fdca 	bl	a728 <__aeabi_dcmple>
    db94:	2800      	cmp	r0, #0
    db96:	d001      	beq.n	db9c <_vfprintf_r+0x688>
    db98:	f000 fca9 	bl	e4ee <_vfprintf_r+0xfda>
    db9c:	2200      	movs	r2, #0
    db9e:	2300      	movs	r3, #0
    dba0:	9816      	ldr	r0, [sp, #88]	; 0x58
    dba2:	9915      	ldr	r1, [sp, #84]	; 0x54
    dba4:	f7fc fdb6 	bl	a714 <__aeabi_dcmplt>
    dba8:	2800      	cmp	r0, #0
    dbaa:	d001      	beq.n	dbb0 <_vfprintf_r+0x69c>
    dbac:	f000 fd55 	bl	e65a <_vfprintf_r+0x1146>
    dbb0:	ab16      	add	r3, sp, #88	; 0x58
    dbb2:	7fdb      	ldrb	r3, [r3, #31]
    dbb4:	4698      	mov	r8, r3
    dbb6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    dbb8:	2b47      	cmp	r3, #71	; 0x47
    dbba:	dd01      	ble.n	dbc0 <_vfprintf_r+0x6ac>
    dbbc:	f000 fdb4 	bl	e728 <_vfprintf_r+0x1214>
    dbc0:	4b62      	ldr	r3, [pc, #392]	; (dd4c <_vfprintf_r+0x838>)
    dbc2:	9311      	str	r3, [sp, #68]	; 0x44
    dbc4:	2380      	movs	r3, #128	; 0x80
    dbc6:	439c      	bics	r4, r3
    dbc8:	3b7d      	subs	r3, #125	; 0x7d
    dbca:	9308      	str	r3, [sp, #32]
    dbcc:	930e      	str	r3, [sp, #56]	; 0x38
    dbce:	2300      	movs	r3, #0
    dbd0:	9409      	str	r4, [sp, #36]	; 0x24
    dbd2:	469a      	mov	sl, r3
    dbd4:	9313      	str	r3, [sp, #76]	; 0x4c
    dbd6:	e612      	b.n	d7fe <_vfprintf_r+0x2ea>
    dbd8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    dbda:	1d1a      	adds	r2, r3, #4
    dbdc:	681b      	ldr	r3, [r3, #0]
    dbde:	930b      	str	r3, [sp, #44]	; 0x2c
    dbe0:	2b00      	cmp	r3, #0
    dbe2:	da00      	bge.n	dbe6 <_vfprintf_r+0x6d2>
    dbe4:	e578      	b.n	d6d8 <_vfprintf_r+0x1c4>
    dbe6:	9b07      	ldr	r3, [sp, #28]
    dbe8:	920f      	str	r2, [sp, #60]	; 0x3c
    dbea:	781b      	ldrb	r3, [r3, #0]
    dbec:	e51b      	b.n	d626 <_vfprintf_r+0x112>
    dbee:	9312      	str	r3, [sp, #72]	; 0x48
    dbf0:	2900      	cmp	r1, #0
    dbf2:	d001      	beq.n	dbf8 <_vfprintf_r+0x6e4>
    dbf4:	f000 ffcc 	bl	eb90 <_vfprintf_r+0x167c>
    dbf8:	2310      	movs	r3, #16
    dbfa:	431c      	orrs	r4, r3
    dbfc:	e69a      	b.n	d934 <_vfprintf_r+0x420>
    dbfe:	9312      	str	r3, [sp, #72]	; 0x48
    dc00:	e771      	b.n	dae6 <_vfprintf_r+0x5d2>
    dc02:	9312      	str	r3, [sp, #72]	; 0x48
    dc04:	e758      	b.n	dab8 <_vfprintf_r+0x5a4>
    dc06:	9312      	str	r3, [sp, #72]	; 0x48
    dc08:	2900      	cmp	r1, #0
    dc0a:	d001      	beq.n	dc10 <_vfprintf_r+0x6fc>
    dc0c:	f000 ffd3 	bl	ebb6 <_vfprintf_r+0x16a2>
    dc10:	9b12      	ldr	r3, [sp, #72]	; 0x48
    dc12:	2b00      	cmp	r3, #0
    dc14:	d100      	bne.n	dc18 <_vfprintf_r+0x704>
    dc16:	e18d      	b.n	df34 <_vfprintf_r+0xa20>
    dc18:	ad28      	add	r5, sp, #160	; 0xa0
    dc1a:	702b      	strb	r3, [r5, #0]
    dc1c:	2300      	movs	r3, #0
    dc1e:	aa16      	add	r2, sp, #88	; 0x58
    dc20:	77d3      	strb	r3, [r2, #31]
    dc22:	9409      	str	r4, [sp, #36]	; 0x24
    dc24:	e678      	b.n	d918 <_vfprintf_r+0x404>
    dc26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    dc28:	990a      	ldr	r1, [sp, #40]	; 0x28
    dc2a:	6813      	ldr	r3, [r2, #0]
    dc2c:	6019      	str	r1, [r3, #0]
    dc2e:	0013      	movs	r3, r2
    dc30:	3304      	adds	r3, #4
    dc32:	930f      	str	r3, [sp, #60]	; 0x3c
    dc34:	e4bc      	b.n	d5b0 <_vfprintf_r+0x9c>
    dc36:	68bc      	ldr	r4, [r7, #8]
    dc38:	4643      	mov	r3, r8
    dc3a:	2b00      	cmp	r3, #0
    dc3c:	d00f      	beq.n	dc5e <_vfprintf_r+0x74a>
    dc3e:	aa16      	add	r2, sp, #88	; 0x58
    dc40:	231f      	movs	r3, #31
    dc42:	4694      	mov	ip, r2
    dc44:	4463      	add	r3, ip
    dc46:	6033      	str	r3, [r6, #0]
    dc48:	2301      	movs	r3, #1
    dc4a:	6073      	str	r3, [r6, #4]
    dc4c:	687b      	ldr	r3, [r7, #4]
    dc4e:	3401      	adds	r4, #1
    dc50:	3301      	adds	r3, #1
    dc52:	60bc      	str	r4, [r7, #8]
    dc54:	607b      	str	r3, [r7, #4]
    dc56:	2b07      	cmp	r3, #7
    dc58:	dd00      	ble.n	dc5c <_vfprintf_r+0x748>
    dc5a:	e203      	b.n	e064 <_vfprintf_r+0xb50>
    dc5c:	3608      	adds	r6, #8
    dc5e:	464b      	mov	r3, r9
    dc60:	2b00      	cmp	r3, #0
    dc62:	d00c      	beq.n	dc7e <_vfprintf_r+0x76a>
    dc64:	ab1e      	add	r3, sp, #120	; 0x78
    dc66:	6033      	str	r3, [r6, #0]
    dc68:	2302      	movs	r3, #2
    dc6a:	6073      	str	r3, [r6, #4]
    dc6c:	687b      	ldr	r3, [r7, #4]
    dc6e:	3402      	adds	r4, #2
    dc70:	3301      	adds	r3, #1
    dc72:	60bc      	str	r4, [r7, #8]
    dc74:	607b      	str	r3, [r7, #4]
    dc76:	2b07      	cmp	r3, #7
    dc78:	dd00      	ble.n	dc7c <_vfprintf_r+0x768>
    dc7a:	e1fd      	b.n	e078 <_vfprintf_r+0xb64>
    dc7c:	3608      	adds	r6, #8
    dc7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    dc80:	2b80      	cmp	r3, #128	; 0x80
    dc82:	d100      	bne.n	dc86 <_vfprintf_r+0x772>
    dc84:	e173      	b.n	df6e <_vfprintf_r+0xa5a>
    dc86:	4653      	mov	r3, sl
    dc88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    dc8a:	1a9d      	subs	r5, r3, r2
    dc8c:	2d00      	cmp	r5, #0
    dc8e:	dd32      	ble.n	dcf6 <_vfprintf_r+0x7e2>
    dc90:	4a2f      	ldr	r2, [pc, #188]	; (dd50 <_vfprintf_r+0x83c>)
    dc92:	687b      	ldr	r3, [r7, #4]
    dc94:	4691      	mov	r9, r2
    dc96:	2d10      	cmp	r5, #16
    dc98:	dd22      	ble.n	dce0 <_vfprintf_r+0x7cc>
    dc9a:	2210      	movs	r2, #16
    dc9c:	4692      	mov	sl, r2
    dc9e:	0022      	movs	r2, r4
    dca0:	465c      	mov	r4, fp
    dca2:	e003      	b.n	dcac <_vfprintf_r+0x798>
    dca4:	3d10      	subs	r5, #16
    dca6:	3608      	adds	r6, #8
    dca8:	2d10      	cmp	r5, #16
    dcaa:	dd17      	ble.n	dcdc <_vfprintf_r+0x7c8>
    dcac:	4649      	mov	r1, r9
    dcae:	6031      	str	r1, [r6, #0]
    dcb0:	4651      	mov	r1, sl
    dcb2:	3210      	adds	r2, #16
    dcb4:	3301      	adds	r3, #1
    dcb6:	6071      	str	r1, [r6, #4]
    dcb8:	60ba      	str	r2, [r7, #8]
    dcba:	607b      	str	r3, [r7, #4]
    dcbc:	2b07      	cmp	r3, #7
    dcbe:	ddf1      	ble.n	dca4 <_vfprintf_r+0x790>
    dcc0:	003a      	movs	r2, r7
    dcc2:	0021      	movs	r1, r4
    dcc4:	9806      	ldr	r0, [sp, #24]
    dcc6:	f003 ff01 	bl	11acc <__sprint_r>
    dcca:	2800      	cmp	r0, #0
    dccc:	d000      	beq.n	dcd0 <_vfprintf_r+0x7bc>
    dcce:	e18a      	b.n	dfe6 <_vfprintf_r+0xad2>
    dcd0:	3d10      	subs	r5, #16
    dcd2:	68ba      	ldr	r2, [r7, #8]
    dcd4:	687b      	ldr	r3, [r7, #4]
    dcd6:	ae32      	add	r6, sp, #200	; 0xc8
    dcd8:	2d10      	cmp	r5, #16
    dcda:	dce7      	bgt.n	dcac <_vfprintf_r+0x798>
    dcdc:	46a3      	mov	fp, r4
    dcde:	0014      	movs	r4, r2
    dce0:	464a      	mov	r2, r9
    dce2:	1964      	adds	r4, r4, r5
    dce4:	3301      	adds	r3, #1
    dce6:	6032      	str	r2, [r6, #0]
    dce8:	6075      	str	r5, [r6, #4]
    dcea:	60bc      	str	r4, [r7, #8]
    dcec:	607b      	str	r3, [r7, #4]
    dcee:	2b07      	cmp	r3, #7
    dcf0:	dd00      	ble.n	dcf4 <_vfprintf_r+0x7e0>
    dcf2:	e1ad      	b.n	e050 <_vfprintf_r+0xb3c>
    dcf4:	3608      	adds	r6, #8
    dcf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    dcf8:	05db      	lsls	r3, r3, #23
    dcfa:	d500      	bpl.n	dcfe <_vfprintf_r+0x7ea>
    dcfc:	e0be      	b.n	de7c <_vfprintf_r+0x968>
    dcfe:	9b11      	ldr	r3, [sp, #68]	; 0x44
    dd00:	6033      	str	r3, [r6, #0]
    dd02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    dd04:	469c      	mov	ip, r3
    dd06:	6073      	str	r3, [r6, #4]
    dd08:	687b      	ldr	r3, [r7, #4]
    dd0a:	4464      	add	r4, ip
    dd0c:	3301      	adds	r3, #1
    dd0e:	60bc      	str	r4, [r7, #8]
    dd10:	607b      	str	r3, [r7, #4]
    dd12:	2b07      	cmp	r3, #7
    dd14:	dd00      	ble.n	dd18 <_vfprintf_r+0x804>
    dd16:	e0a6      	b.n	de66 <_vfprintf_r+0x952>
    dd18:	3608      	adds	r6, #8
    dd1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    dd1c:	075b      	lsls	r3, r3, #29
    dd1e:	d54a      	bpl.n	ddb6 <_vfprintf_r+0x8a2>
    dd20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    dd22:	9a08      	ldr	r2, [sp, #32]
    dd24:	1a9d      	subs	r5, r3, r2
    dd26:	2d00      	cmp	r5, #0
    dd28:	dd45      	ble.n	ddb6 <_vfprintf_r+0x8a2>
    dd2a:	4a0a      	ldr	r2, [pc, #40]	; (dd54 <_vfprintf_r+0x840>)
    dd2c:	687b      	ldr	r3, [r7, #4]
    dd2e:	4690      	mov	r8, r2
    dd30:	2d10      	cmp	r5, #16
    dd32:	dd2f      	ble.n	dd94 <_vfprintf_r+0x880>
    dd34:	2210      	movs	r2, #16
    dd36:	4691      	mov	r9, r2
    dd38:	0022      	movs	r2, r4
    dd3a:	465c      	mov	r4, fp
    dd3c:	e010      	b.n	dd60 <_vfprintf_r+0x84c>
    dd3e:	46c0      	nop			; (mov r8, r8)
    dd40:	00012570 	.word	0x00012570
    dd44:	0001255c 	.word	0x0001255c
    dd48:	7fefffff 	.word	0x7fefffff
    dd4c:	0001254c 	.word	0x0001254c
    dd50:	000125a0 	.word	0x000125a0
    dd54:	00012590 	.word	0x00012590
    dd58:	3d10      	subs	r5, #16
    dd5a:	3608      	adds	r6, #8
    dd5c:	2d10      	cmp	r5, #16
    dd5e:	dd17      	ble.n	dd90 <_vfprintf_r+0x87c>
    dd60:	49d1      	ldr	r1, [pc, #836]	; (e0a8 <_vfprintf_r+0xb94>)
    dd62:	3210      	adds	r2, #16
    dd64:	6031      	str	r1, [r6, #0]
    dd66:	4649      	mov	r1, r9
    dd68:	3301      	adds	r3, #1
    dd6a:	6071      	str	r1, [r6, #4]
    dd6c:	60ba      	str	r2, [r7, #8]
    dd6e:	607b      	str	r3, [r7, #4]
    dd70:	2b07      	cmp	r3, #7
    dd72:	ddf1      	ble.n	dd58 <_vfprintf_r+0x844>
    dd74:	003a      	movs	r2, r7
    dd76:	0021      	movs	r1, r4
    dd78:	9806      	ldr	r0, [sp, #24]
    dd7a:	f003 fea7 	bl	11acc <__sprint_r>
    dd7e:	2800      	cmp	r0, #0
    dd80:	d000      	beq.n	dd84 <_vfprintf_r+0x870>
    dd82:	e130      	b.n	dfe6 <_vfprintf_r+0xad2>
    dd84:	3d10      	subs	r5, #16
    dd86:	68ba      	ldr	r2, [r7, #8]
    dd88:	687b      	ldr	r3, [r7, #4]
    dd8a:	ae32      	add	r6, sp, #200	; 0xc8
    dd8c:	2d10      	cmp	r5, #16
    dd8e:	dce7      	bgt.n	dd60 <_vfprintf_r+0x84c>
    dd90:	46a3      	mov	fp, r4
    dd92:	0014      	movs	r4, r2
    dd94:	4642      	mov	r2, r8
    dd96:	1964      	adds	r4, r4, r5
    dd98:	3301      	adds	r3, #1
    dd9a:	c624      	stmia	r6!, {r2, r5}
    dd9c:	60bc      	str	r4, [r7, #8]
    dd9e:	607b      	str	r3, [r7, #4]
    dda0:	2b07      	cmp	r3, #7
    dda2:	dd08      	ble.n	ddb6 <_vfprintf_r+0x8a2>
    dda4:	003a      	movs	r2, r7
    dda6:	4659      	mov	r1, fp
    dda8:	9806      	ldr	r0, [sp, #24]
    ddaa:	f003 fe8f 	bl	11acc <__sprint_r>
    ddae:	2800      	cmp	r0, #0
    ddb0:	d000      	beq.n	ddb4 <_vfprintf_r+0x8a0>
    ddb2:	e13f      	b.n	e034 <_vfprintf_r+0xb20>
    ddb4:	68bc      	ldr	r4, [r7, #8]
    ddb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ddb8:	9908      	ldr	r1, [sp, #32]
    ddba:	428b      	cmp	r3, r1
    ddbc:	da00      	bge.n	ddc0 <_vfprintf_r+0x8ac>
    ddbe:	000b      	movs	r3, r1
    ddc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ddc2:	4694      	mov	ip, r2
    ddc4:	449c      	add	ip, r3
    ddc6:	4663      	mov	r3, ip
    ddc8:	930a      	str	r3, [sp, #40]	; 0x28
    ddca:	2c00      	cmp	r4, #0
    ddcc:	d000      	beq.n	ddd0 <_vfprintf_r+0x8bc>
    ddce:	e129      	b.n	e024 <_vfprintf_r+0xb10>
    ddd0:	2300      	movs	r3, #0
    ddd2:	ae32      	add	r6, sp, #200	; 0xc8
    ddd4:	607b      	str	r3, [r7, #4]
    ddd6:	f7ff fbeb 	bl	d5b0 <_vfprintf_r+0x9c>
    ddda:	9b14      	ldr	r3, [sp, #80]	; 0x50
    dddc:	2b01      	cmp	r3, #1
    ddde:	dc00      	bgt.n	dde2 <_vfprintf_r+0x8ce>
    dde0:	e103      	b.n	dfea <_vfprintf_r+0xad6>
    dde2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    dde4:	3401      	adds	r4, #1
    dde6:	6033      	str	r3, [r6, #0]
    dde8:	2301      	movs	r3, #1
    ddea:	6073      	str	r3, [r6, #4]
    ddec:	687b      	ldr	r3, [r7, #4]
    ddee:	60bc      	str	r4, [r7, #8]
    ddf0:	3301      	adds	r3, #1
    ddf2:	607b      	str	r3, [r7, #4]
    ddf4:	2b07      	cmp	r3, #7
    ddf6:	dd00      	ble.n	ddfa <_vfprintf_r+0x8e6>
    ddf8:	e2ef      	b.n	e3da <_vfprintf_r+0xec6>
    ddfa:	3608      	adds	r6, #8
    ddfc:	9a18      	ldr	r2, [sp, #96]	; 0x60
    ddfe:	3301      	adds	r3, #1
    de00:	6032      	str	r2, [r6, #0]
    de02:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    de04:	4698      	mov	r8, r3
    de06:	4694      	mov	ip, r2
    de08:	4464      	add	r4, ip
    de0a:	6072      	str	r2, [r6, #4]
    de0c:	60bc      	str	r4, [r7, #8]
    de0e:	607b      	str	r3, [r7, #4]
    de10:	2b07      	cmp	r3, #7
    de12:	dd00      	ble.n	de16 <_vfprintf_r+0x902>
    de14:	e318      	b.n	e448 <_vfprintf_r+0xf34>
    de16:	3608      	adds	r6, #8
    de18:	2200      	movs	r2, #0
    de1a:	2300      	movs	r3, #0
    de1c:	9816      	ldr	r0, [sp, #88]	; 0x58
    de1e:	9915      	ldr	r1, [sp, #84]	; 0x54
    de20:	f7fc fc72 	bl	a708 <__aeabi_dcmpeq>
    de24:	2800      	cmp	r0, #0
    de26:	d000      	beq.n	de2a <_vfprintf_r+0x916>
    de28:	e1f4      	b.n	e214 <_vfprintf_r+0xd00>
    de2a:	9d11      	ldr	r5, [sp, #68]	; 0x44
    de2c:	9b14      	ldr	r3, [sp, #80]	; 0x50
    de2e:	3501      	adds	r5, #1
    de30:	3b01      	subs	r3, #1
    de32:	6035      	str	r5, [r6, #0]
    de34:	6073      	str	r3, [r6, #4]
    de36:	18e4      	adds	r4, r4, r3
    de38:	2301      	movs	r3, #1
    de3a:	469c      	mov	ip, r3
    de3c:	44e0      	add	r8, ip
    de3e:	4643      	mov	r3, r8
    de40:	60bc      	str	r4, [r7, #8]
    de42:	607b      	str	r3, [r7, #4]
    de44:	2b07      	cmp	r3, #7
    de46:	dd00      	ble.n	de4a <_vfprintf_r+0x936>
    de48:	e0e0      	b.n	e00c <_vfprintf_r+0xaf8>
    de4a:	3608      	adds	r6, #8
    de4c:	ab21      	add	r3, sp, #132	; 0x84
    de4e:	6033      	str	r3, [r6, #0]
    de50:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    de52:	469c      	mov	ip, r3
    de54:	6073      	str	r3, [r6, #4]
    de56:	4643      	mov	r3, r8
    de58:	4464      	add	r4, ip
    de5a:	3301      	adds	r3, #1
    de5c:	60bc      	str	r4, [r7, #8]
    de5e:	607b      	str	r3, [r7, #4]
    de60:	2b07      	cmp	r3, #7
    de62:	dc00      	bgt.n	de66 <_vfprintf_r+0x952>
    de64:	e758      	b.n	dd18 <_vfprintf_r+0x804>
    de66:	003a      	movs	r2, r7
    de68:	4659      	mov	r1, fp
    de6a:	9806      	ldr	r0, [sp, #24]
    de6c:	f003 fe2e 	bl	11acc <__sprint_r>
    de70:	2800      	cmp	r0, #0
    de72:	d000      	beq.n	de76 <_vfprintf_r+0x962>
    de74:	e0de      	b.n	e034 <_vfprintf_r+0xb20>
    de76:	68bc      	ldr	r4, [r7, #8]
    de78:	ae32      	add	r6, sp, #200	; 0xc8
    de7a:	e74e      	b.n	dd1a <_vfprintf_r+0x806>
    de7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    de7e:	2b65      	cmp	r3, #101	; 0x65
    de80:	ddab      	ble.n	ddda <_vfprintf_r+0x8c6>
    de82:	2200      	movs	r2, #0
    de84:	2300      	movs	r3, #0
    de86:	9816      	ldr	r0, [sp, #88]	; 0x58
    de88:	9915      	ldr	r1, [sp, #84]	; 0x54
    de8a:	f7fc fc3d 	bl	a708 <__aeabi_dcmpeq>
    de8e:	2800      	cmp	r0, #0
    de90:	d100      	bne.n	de94 <_vfprintf_r+0x980>
    de92:	e134      	b.n	e0fe <_vfprintf_r+0xbea>
    de94:	4b85      	ldr	r3, [pc, #532]	; (e0ac <_vfprintf_r+0xb98>)
    de96:	3401      	adds	r4, #1
    de98:	6033      	str	r3, [r6, #0]
    de9a:	2301      	movs	r3, #1
    de9c:	6073      	str	r3, [r6, #4]
    de9e:	687b      	ldr	r3, [r7, #4]
    dea0:	60bc      	str	r4, [r7, #8]
    dea2:	3301      	adds	r3, #1
    dea4:	607b      	str	r3, [r7, #4]
    dea6:	2b07      	cmp	r3, #7
    dea8:	dd00      	ble.n	deac <_vfprintf_r+0x998>
    deaa:	e3dc      	b.n	e666 <_vfprintf_r+0x1152>
    deac:	3608      	adds	r6, #8
    deae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    deb0:	9a14      	ldr	r2, [sp, #80]	; 0x50
    deb2:	4293      	cmp	r3, r2
    deb4:	db03      	blt.n	debe <_vfprintf_r+0x9aa>
    deb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    deb8:	07db      	lsls	r3, r3, #31
    deba:	d400      	bmi.n	debe <_vfprintf_r+0x9aa>
    debc:	e3b7      	b.n	e62e <_vfprintf_r+0x111a>
    debe:	9b18      	ldr	r3, [sp, #96]	; 0x60
    dec0:	68ba      	ldr	r2, [r7, #8]
    dec2:	6033      	str	r3, [r6, #0]
    dec4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    dec6:	469c      	mov	ip, r3
    dec8:	6073      	str	r3, [r6, #4]
    deca:	687b      	ldr	r3, [r7, #4]
    decc:	4462      	add	r2, ip
    dece:	3301      	adds	r3, #1
    ded0:	0014      	movs	r4, r2
    ded2:	60ba      	str	r2, [r7, #8]
    ded4:	607b      	str	r3, [r7, #4]
    ded6:	2b07      	cmp	r3, #7
    ded8:	dd01      	ble.n	dede <_vfprintf_r+0x9ca>
    deda:	f000 fc19 	bl	e710 <_vfprintf_r+0x11fc>
    dede:	3608      	adds	r6, #8
    dee0:	9b14      	ldr	r3, [sp, #80]	; 0x50
    dee2:	1e5d      	subs	r5, r3, #1
    dee4:	2d00      	cmp	r5, #0
    dee6:	dc00      	bgt.n	deea <_vfprintf_r+0x9d6>
    dee8:	e717      	b.n	dd1a <_vfprintf_r+0x806>
    deea:	4a71      	ldr	r2, [pc, #452]	; (e0b0 <_vfprintf_r+0xb9c>)
    deec:	687b      	ldr	r3, [r7, #4]
    deee:	4691      	mov	r9, r2
    def0:	2d10      	cmp	r5, #16
    def2:	dc00      	bgt.n	def6 <_vfprintf_r+0x9e2>
    def4:	e1c3      	b.n	e27e <_vfprintf_r+0xd6a>
    def6:	2210      	movs	r2, #16
    def8:	4690      	mov	r8, r2
    defa:	0022      	movs	r2, r4
    defc:	464c      	mov	r4, r9
    defe:	46d9      	mov	r9, fp
    df00:	e004      	b.n	df0c <_vfprintf_r+0x9f8>
    df02:	3608      	adds	r6, #8
    df04:	3d10      	subs	r5, #16
    df06:	2d10      	cmp	r5, #16
    df08:	dc00      	bgt.n	df0c <_vfprintf_r+0x9f8>
    df0a:	e37c      	b.n	e606 <_vfprintf_r+0x10f2>
    df0c:	4641      	mov	r1, r8
    df0e:	3210      	adds	r2, #16
    df10:	3301      	adds	r3, #1
    df12:	6034      	str	r4, [r6, #0]
    df14:	6071      	str	r1, [r6, #4]
    df16:	60ba      	str	r2, [r7, #8]
    df18:	607b      	str	r3, [r7, #4]
    df1a:	2b07      	cmp	r3, #7
    df1c:	ddf1      	ble.n	df02 <_vfprintf_r+0x9ee>
    df1e:	003a      	movs	r2, r7
    df20:	4649      	mov	r1, r9
    df22:	9806      	ldr	r0, [sp, #24]
    df24:	f003 fdd2 	bl	11acc <__sprint_r>
    df28:	2800      	cmp	r0, #0
    df2a:	d10b      	bne.n	df44 <_vfprintf_r+0xa30>
    df2c:	68ba      	ldr	r2, [r7, #8]
    df2e:	687b      	ldr	r3, [r7, #4]
    df30:	ae32      	add	r6, sp, #200	; 0xc8
    df32:	e7e7      	b.n	df04 <_vfprintf_r+0x9f0>
    df34:	68bb      	ldr	r3, [r7, #8]
    df36:	46d9      	mov	r9, fp
    df38:	2b00      	cmp	r3, #0
    df3a:	d001      	beq.n	df40 <_vfprintf_r+0xa2c>
    df3c:	f000 fd4c 	bl	e9d8 <_vfprintf_r+0x14c4>
    df40:	2300      	movs	r3, #0
    df42:	607b      	str	r3, [r7, #4]
    df44:	464b      	mov	r3, r9
    df46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    df48:	07db      	lsls	r3, r3, #31
    df4a:	d40d      	bmi.n	df68 <_vfprintf_r+0xa54>
    df4c:	464b      	mov	r3, r9
    df4e:	899b      	ldrh	r3, [r3, #12]
    df50:	059a      	lsls	r2, r3, #22
    df52:	d505      	bpl.n	df60 <_vfprintf_r+0xa4c>
    df54:	065b      	lsls	r3, r3, #25
    df56:	d401      	bmi.n	df5c <_vfprintf_r+0xa48>
    df58:	f7ff fb8d 	bl	d676 <_vfprintf_r+0x162>
    df5c:	f7ff fb88 	bl	d670 <_vfprintf_r+0x15c>
    df60:	464b      	mov	r3, r9
    df62:	6d98      	ldr	r0, [r3, #88]	; 0x58
    df64:	f002 fc32 	bl	107cc <__retarget_lock_release_recursive>
    df68:	464b      	mov	r3, r9
    df6a:	899b      	ldrh	r3, [r3, #12]
    df6c:	e7f2      	b.n	df54 <_vfprintf_r+0xa40>
    df6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    df70:	9a08      	ldr	r2, [sp, #32]
    df72:	1a9d      	subs	r5, r3, r2
    df74:	2d00      	cmp	r5, #0
    df76:	dc00      	bgt.n	df7a <_vfprintf_r+0xa66>
    df78:	e685      	b.n	dc86 <_vfprintf_r+0x772>
    df7a:	4a4d      	ldr	r2, [pc, #308]	; (e0b0 <_vfprintf_r+0xb9c>)
    df7c:	687b      	ldr	r3, [r7, #4]
    df7e:	4691      	mov	r9, r2
    df80:	2d10      	cmp	r5, #16
    df82:	dd24      	ble.n	dfce <_vfprintf_r+0xaba>
    df84:	2210      	movs	r2, #16
    df86:	0021      	movs	r1, r4
    df88:	4690      	mov	r8, r2
    df8a:	465c      	mov	r4, fp
    df8c:	0032      	movs	r2, r6
    df8e:	464e      	mov	r6, r9
    df90:	e003      	b.n	df9a <_vfprintf_r+0xa86>
    df92:	3d10      	subs	r5, #16
    df94:	3208      	adds	r2, #8
    df96:	2d10      	cmp	r5, #16
    df98:	dd15      	ble.n	dfc6 <_vfprintf_r+0xab2>
    df9a:	4640      	mov	r0, r8
    df9c:	3110      	adds	r1, #16
    df9e:	3301      	adds	r3, #1
    dfa0:	6016      	str	r6, [r2, #0]
    dfa2:	6050      	str	r0, [r2, #4]
    dfa4:	60b9      	str	r1, [r7, #8]
    dfa6:	607b      	str	r3, [r7, #4]
    dfa8:	2b07      	cmp	r3, #7
    dfaa:	ddf2      	ble.n	df92 <_vfprintf_r+0xa7e>
    dfac:	003a      	movs	r2, r7
    dfae:	0021      	movs	r1, r4
    dfb0:	9806      	ldr	r0, [sp, #24]
    dfb2:	f003 fd8b 	bl	11acc <__sprint_r>
    dfb6:	2800      	cmp	r0, #0
    dfb8:	d115      	bne.n	dfe6 <_vfprintf_r+0xad2>
    dfba:	3d10      	subs	r5, #16
    dfbc:	68b9      	ldr	r1, [r7, #8]
    dfbe:	687b      	ldr	r3, [r7, #4]
    dfc0:	aa32      	add	r2, sp, #200	; 0xc8
    dfc2:	2d10      	cmp	r5, #16
    dfc4:	dce9      	bgt.n	df9a <_vfprintf_r+0xa86>
    dfc6:	46a3      	mov	fp, r4
    dfc8:	46b1      	mov	r9, r6
    dfca:	000c      	movs	r4, r1
    dfcc:	0016      	movs	r6, r2
    dfce:	464a      	mov	r2, r9
    dfd0:	1964      	adds	r4, r4, r5
    dfd2:	3301      	adds	r3, #1
    dfd4:	6032      	str	r2, [r6, #0]
    dfd6:	6075      	str	r5, [r6, #4]
    dfd8:	60bc      	str	r4, [r7, #8]
    dfda:	607b      	str	r3, [r7, #4]
    dfdc:	2b07      	cmp	r3, #7
    dfde:	dd00      	ble.n	dfe2 <_vfprintf_r+0xace>
    dfe0:	e263      	b.n	e4aa <_vfprintf_r+0xf96>
    dfe2:	3608      	adds	r6, #8
    dfe4:	e64f      	b.n	dc86 <_vfprintf_r+0x772>
    dfe6:	46a1      	mov	r9, r4
    dfe8:	e7ac      	b.n	df44 <_vfprintf_r+0xa30>
    dfea:	2301      	movs	r3, #1
    dfec:	9a09      	ldr	r2, [sp, #36]	; 0x24
    dfee:	4213      	tst	r3, r2
    dff0:	d000      	beq.n	dff4 <_vfprintf_r+0xae0>
    dff2:	e6f6      	b.n	dde2 <_vfprintf_r+0x8ce>
    dff4:	6073      	str	r3, [r6, #4]
    dff6:	687b      	ldr	r3, [r7, #4]
    dff8:	9a11      	ldr	r2, [sp, #68]	; 0x44
    dffa:	3301      	adds	r3, #1
    dffc:	3401      	adds	r4, #1
    dffe:	6032      	str	r2, [r6, #0]
    e000:	60bc      	str	r4, [r7, #8]
    e002:	4698      	mov	r8, r3
    e004:	607b      	str	r3, [r7, #4]
    e006:	2b07      	cmp	r3, #7
    e008:	dc00      	bgt.n	e00c <_vfprintf_r+0xaf8>
    e00a:	e71e      	b.n	de4a <_vfprintf_r+0x936>
    e00c:	003a      	movs	r2, r7
    e00e:	4659      	mov	r1, fp
    e010:	9806      	ldr	r0, [sp, #24]
    e012:	f003 fd5b 	bl	11acc <__sprint_r>
    e016:	2800      	cmp	r0, #0
    e018:	d10c      	bne.n	e034 <_vfprintf_r+0xb20>
    e01a:	687b      	ldr	r3, [r7, #4]
    e01c:	68bc      	ldr	r4, [r7, #8]
    e01e:	4698      	mov	r8, r3
    e020:	ae32      	add	r6, sp, #200	; 0xc8
    e022:	e713      	b.n	de4c <_vfprintf_r+0x938>
    e024:	003a      	movs	r2, r7
    e026:	4659      	mov	r1, fp
    e028:	9806      	ldr	r0, [sp, #24]
    e02a:	f003 fd4f 	bl	11acc <__sprint_r>
    e02e:	2800      	cmp	r0, #0
    e030:	d100      	bne.n	e034 <_vfprintf_r+0xb20>
    e032:	e6cd      	b.n	ddd0 <_vfprintf_r+0x8bc>
    e034:	46d9      	mov	r9, fp
    e036:	e785      	b.n	df44 <_vfprintf_r+0xa30>
    e038:	9c09      	ldr	r4, [sp, #36]	; 0x24
    e03a:	2b01      	cmp	r3, #1
    e03c:	d100      	bne.n	e040 <_vfprintf_r+0xb2c>
    e03e:	e148      	b.n	e2d2 <_vfprintf_r+0xdbe>
    e040:	2b02      	cmp	r3, #2
    e042:	d123      	bne.n	e08c <_vfprintf_r+0xb78>
    e044:	9409      	str	r4, [sp, #36]	; 0x24
    e046:	2300      	movs	r3, #0
    e048:	2400      	movs	r4, #0
    e04a:	930c      	str	r3, [sp, #48]	; 0x30
    e04c:	940d      	str	r4, [sp, #52]	; 0x34
    e04e:	e4a1      	b.n	d994 <_vfprintf_r+0x480>
    e050:	003a      	movs	r2, r7
    e052:	4659      	mov	r1, fp
    e054:	9806      	ldr	r0, [sp, #24]
    e056:	f003 fd39 	bl	11acc <__sprint_r>
    e05a:	2800      	cmp	r0, #0
    e05c:	d1ea      	bne.n	e034 <_vfprintf_r+0xb20>
    e05e:	68bc      	ldr	r4, [r7, #8]
    e060:	ae32      	add	r6, sp, #200	; 0xc8
    e062:	e648      	b.n	dcf6 <_vfprintf_r+0x7e2>
    e064:	003a      	movs	r2, r7
    e066:	4659      	mov	r1, fp
    e068:	9806      	ldr	r0, [sp, #24]
    e06a:	f003 fd2f 	bl	11acc <__sprint_r>
    e06e:	2800      	cmp	r0, #0
    e070:	d1e0      	bne.n	e034 <_vfprintf_r+0xb20>
    e072:	68bc      	ldr	r4, [r7, #8]
    e074:	ae32      	add	r6, sp, #200	; 0xc8
    e076:	e5f2      	b.n	dc5e <_vfprintf_r+0x74a>
    e078:	003a      	movs	r2, r7
    e07a:	4659      	mov	r1, fp
    e07c:	9806      	ldr	r0, [sp, #24]
    e07e:	f003 fd25 	bl	11acc <__sprint_r>
    e082:	2800      	cmp	r0, #0
    e084:	d1d6      	bne.n	e034 <_vfprintf_r+0xb20>
    e086:	68bc      	ldr	r4, [r7, #8]
    e088:	ae32      	add	r6, sp, #200	; 0xc8
    e08a:	e5f8      	b.n	dc7e <_vfprintf_r+0x76a>
    e08c:	9409      	str	r4, [sp, #36]	; 0x24
    e08e:	2300      	movs	r3, #0
    e090:	2400      	movs	r4, #0
    e092:	930c      	str	r3, [sp, #48]	; 0x30
    e094:	940d      	str	r4, [sp, #52]	; 0x34
    e096:	980c      	ldr	r0, [sp, #48]	; 0x30
    e098:	990d      	ldr	r1, [sp, #52]	; 0x34
    e09a:	4653      	mov	r3, sl
    e09c:	aa32      	add	r2, sp, #200	; 0xc8
    e09e:	4691      	mov	r9, r2
    e0a0:	9308      	str	r3, [sp, #32]
    e0a2:	46b2      	mov	sl, r6
    e0a4:	e007      	b.n	e0b6 <_vfprintf_r+0xba2>
    e0a6:	46c0      	nop			; (mov r8, r8)
    e0a8:	00012590 	.word	0x00012590
    e0ac:	0001258c 	.word	0x0001258c
    e0b0:	000125a0 	.word	0x000125a0
    e0b4:	46a1      	mov	r9, r4
    e0b6:	074a      	lsls	r2, r1, #29
    e0b8:	4694      	mov	ip, r2
    e0ba:	464b      	mov	r3, r9
    e0bc:	4665      	mov	r5, ip
    e0be:	1e5c      	subs	r4, r3, #1
    e0c0:	08c6      	lsrs	r6, r0, #3
    e0c2:	2307      	movs	r3, #7
    e0c4:	08ca      	lsrs	r2, r1, #3
    e0c6:	4335      	orrs	r5, r6
    e0c8:	0011      	movs	r1, r2
    e0ca:	002a      	movs	r2, r5
    e0cc:	4003      	ands	r3, r0
    e0ce:	3330      	adds	r3, #48	; 0x30
    e0d0:	7023      	strb	r3, [r4, #0]
    e0d2:	0028      	movs	r0, r5
    e0d4:	430a      	orrs	r2, r1
    e0d6:	d1ed      	bne.n	e0b4 <_vfprintf_r+0xba0>
    e0d8:	900c      	str	r0, [sp, #48]	; 0x30
    e0da:	910d      	str	r1, [sp, #52]	; 0x34
    e0dc:	9908      	ldr	r1, [sp, #32]
    e0de:	4656      	mov	r6, sl
    e0e0:	468a      	mov	sl, r1
    e0e2:	9909      	ldr	r1, [sp, #36]	; 0x24
    e0e4:	464a      	mov	r2, r9
    e0e6:	9411      	str	r4, [sp, #68]	; 0x44
    e0e8:	07c9      	lsls	r1, r1, #31
    e0ea:	d500      	bpl.n	e0ee <_vfprintf_r+0xbda>
    e0ec:	e0e0      	b.n	e2b0 <_vfprintf_r+0xd9c>
    e0ee:	ab32      	add	r3, sp, #200	; 0xc8
    e0f0:	1b1b      	subs	r3, r3, r4
    e0f2:	930e      	str	r3, [sp, #56]	; 0x38
    e0f4:	f7ff fb7b 	bl	d7ee <_vfprintf_r+0x2da>
    e0f8:	9c07      	ldr	r4, [sp, #28]
    e0fa:	f7ff fa7d 	bl	d5f8 <_vfprintf_r+0xe4>
    e0fe:	981f      	ldr	r0, [sp, #124]	; 0x7c
    e100:	2800      	cmp	r0, #0
    e102:	dc00      	bgt.n	e106 <_vfprintf_r+0xbf2>
    e104:	e2b9      	b.n	e67a <_vfprintf_r+0x1166>
    e106:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    e108:	9914      	ldr	r1, [sp, #80]	; 0x50
    e10a:	0013      	movs	r3, r2
    e10c:	4690      	mov	r8, r2
    e10e:	428b      	cmp	r3, r1
    e110:	dd00      	ble.n	e114 <_vfprintf_r+0xc00>
    e112:	4688      	mov	r8, r1
    e114:	4643      	mov	r3, r8
    e116:	2b00      	cmp	r3, #0
    e118:	dd0c      	ble.n	e134 <_vfprintf_r+0xc20>
    e11a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    e11c:	4444      	add	r4, r8
    e11e:	6033      	str	r3, [r6, #0]
    e120:	4643      	mov	r3, r8
    e122:	6073      	str	r3, [r6, #4]
    e124:	687b      	ldr	r3, [r7, #4]
    e126:	60bc      	str	r4, [r7, #8]
    e128:	3301      	adds	r3, #1
    e12a:	607b      	str	r3, [r7, #4]
    e12c:	2b07      	cmp	r3, #7
    e12e:	dd00      	ble.n	e132 <_vfprintf_r+0xc1e>
    e130:	e389      	b.n	e846 <_vfprintf_r+0x1332>
    e132:	3608      	adds	r6, #8
    e134:	4643      	mov	r3, r8
    e136:	43db      	mvns	r3, r3
    e138:	4642      	mov	r2, r8
    e13a:	17db      	asrs	r3, r3, #31
    e13c:	4013      	ands	r3, r2
    e13e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    e140:	1ad3      	subs	r3, r2, r3
    e142:	4698      	mov	r8, r3
    e144:	2b00      	cmp	r3, #0
    e146:	dc00      	bgt.n	e14a <_vfprintf_r+0xc36>
    e148:	e0eb      	b.n	e322 <_vfprintf_r+0xe0e>
    e14a:	2b10      	cmp	r3, #16
    e14c:	dc01      	bgt.n	e152 <_vfprintf_r+0xc3e>
    e14e:	f000 fcd9 	bl	eb04 <_vfprintf_r+0x15f0>
    e152:	4adc      	ldr	r2, [pc, #880]	; (e4c4 <_vfprintf_r+0xfb0>)
    e154:	687b      	ldr	r3, [r7, #4]
    e156:	4691      	mov	r9, r2
    e158:	2210      	movs	r2, #16
    e15a:	464d      	mov	r5, r9
    e15c:	4692      	mov	sl, r2
    e15e:	0022      	movs	r2, r4
    e160:	4644      	mov	r4, r8
    e162:	46d8      	mov	r8, fp
    e164:	e004      	b.n	e170 <_vfprintf_r+0xc5c>
    e166:	3608      	adds	r6, #8
    e168:	3c10      	subs	r4, #16
    e16a:	2c10      	cmp	r4, #16
    e16c:	dc00      	bgt.n	e170 <_vfprintf_r+0xc5c>
    e16e:	e0bf      	b.n	e2f0 <_vfprintf_r+0xddc>
    e170:	4651      	mov	r1, sl
    e172:	3210      	adds	r2, #16
    e174:	3301      	adds	r3, #1
    e176:	6035      	str	r5, [r6, #0]
    e178:	6071      	str	r1, [r6, #4]
    e17a:	60ba      	str	r2, [r7, #8]
    e17c:	607b      	str	r3, [r7, #4]
    e17e:	2b07      	cmp	r3, #7
    e180:	ddf1      	ble.n	e166 <_vfprintf_r+0xc52>
    e182:	003a      	movs	r2, r7
    e184:	4641      	mov	r1, r8
    e186:	9806      	ldr	r0, [sp, #24]
    e188:	f003 fca0 	bl	11acc <__sprint_r>
    e18c:	2800      	cmp	r0, #0
    e18e:	d000      	beq.n	e192 <_vfprintf_r+0xc7e>
    e190:	e3b6      	b.n	e900 <_vfprintf_r+0x13ec>
    e192:	68ba      	ldr	r2, [r7, #8]
    e194:	687b      	ldr	r3, [r7, #4]
    e196:	ae32      	add	r6, sp, #200	; 0xc8
    e198:	e7e6      	b.n	e168 <_vfprintf_r+0xc54>
    e19a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e19c:	2b00      	cmp	r3, #0
    e19e:	d100      	bne.n	e1a2 <_vfprintf_r+0xc8e>
    e1a0:	e092      	b.n	e2c8 <_vfprintf_r+0xdb4>
    e1a2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    e1a4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    e1a6:	ab32      	add	r3, sp, #200	; 0xc8
    e1a8:	46b1      	mov	r9, r6
    e1aa:	001e      	movs	r6, r3
    e1ac:	0020      	movs	r0, r4
    e1ae:	0029      	movs	r1, r5
    e1b0:	220a      	movs	r2, #10
    e1b2:	2300      	movs	r3, #0
    e1b4:	f7fc fb10 	bl	a7d8 <__aeabi_uldivmod>
    e1b8:	3e01      	subs	r6, #1
    e1ba:	3230      	adds	r2, #48	; 0x30
    e1bc:	7032      	strb	r2, [r6, #0]
    e1be:	2300      	movs	r3, #0
    e1c0:	0020      	movs	r0, r4
    e1c2:	0029      	movs	r1, r5
    e1c4:	220a      	movs	r2, #10
    e1c6:	f7fc fb07 	bl	a7d8 <__aeabi_uldivmod>
    e1ca:	0003      	movs	r3, r0
    e1cc:	0004      	movs	r4, r0
    e1ce:	000d      	movs	r5, r1
    e1d0:	430b      	orrs	r3, r1
    e1d2:	d1eb      	bne.n	e1ac <_vfprintf_r+0xc98>
    e1d4:	0032      	movs	r2, r6
    e1d6:	ab32      	add	r3, sp, #200	; 0xc8
    e1d8:	1a9b      	subs	r3, r3, r2
    e1da:	9611      	str	r6, [sp, #68]	; 0x44
    e1dc:	940c      	str	r4, [sp, #48]	; 0x30
    e1de:	950d      	str	r5, [sp, #52]	; 0x34
    e1e0:	464e      	mov	r6, r9
    e1e2:	930e      	str	r3, [sp, #56]	; 0x38
    e1e4:	f7ff fb03 	bl	d7ee <_vfprintf_r+0x2da>
    e1e8:	2300      	movs	r3, #0
    e1ea:	930e      	str	r3, [sp, #56]	; 0x38
    e1ec:	ab32      	add	r3, sp, #200	; 0xc8
    e1ee:	9311      	str	r3, [sp, #68]	; 0x44
    e1f0:	f7ff fafd 	bl	d7ee <_vfprintf_r+0x2da>
    e1f4:	003a      	movs	r2, r7
    e1f6:	4659      	mov	r1, fp
    e1f8:	9806      	ldr	r0, [sp, #24]
    e1fa:	f003 fc67 	bl	11acc <__sprint_r>
    e1fe:	2800      	cmp	r0, #0
    e200:	d000      	beq.n	e204 <_vfprintf_r+0xcf0>
    e202:	e717      	b.n	e034 <_vfprintf_r+0xb20>
    e204:	ab16      	add	r3, sp, #88	; 0x58
    e206:	7fdb      	ldrb	r3, [r3, #31]
    e208:	68bc      	ldr	r4, [r7, #8]
    e20a:	4698      	mov	r8, r3
    e20c:	ae32      	add	r6, sp, #200	; 0xc8
    e20e:	e513      	b.n	dc38 <_vfprintf_r+0x724>
    e210:	46b1      	mov	r9, r6
    e212:	e697      	b.n	df44 <_vfprintf_r+0xa30>
    e214:	9b14      	ldr	r3, [sp, #80]	; 0x50
    e216:	1e5d      	subs	r5, r3, #1
    e218:	2d00      	cmp	r5, #0
    e21a:	dc00      	bgt.n	e21e <_vfprintf_r+0xd0a>
    e21c:	e616      	b.n	de4c <_vfprintf_r+0x938>
    e21e:	4ba9      	ldr	r3, [pc, #676]	; (e4c4 <_vfprintf_r+0xfb0>)
    e220:	4699      	mov	r9, r3
    e222:	2d10      	cmp	r5, #16
    e224:	dc00      	bgt.n	e228 <_vfprintf_r+0xd14>
    e226:	e10a      	b.n	e43e <_vfprintf_r+0xf2a>
    e228:	2310      	movs	r3, #16
    e22a:	0022      	movs	r2, r4
    e22c:	469a      	mov	sl, r3
    e22e:	465c      	mov	r4, fp
    e230:	4643      	mov	r3, r8
    e232:	e004      	b.n	e23e <_vfprintf_r+0xd2a>
    e234:	3608      	adds	r6, #8
    e236:	3d10      	subs	r5, #16
    e238:	2d10      	cmp	r5, #16
    e23a:	dc00      	bgt.n	e23e <_vfprintf_r+0xd2a>
    e23c:	e0fc      	b.n	e438 <_vfprintf_r+0xf24>
    e23e:	4649      	mov	r1, r9
    e240:	6031      	str	r1, [r6, #0]
    e242:	4651      	mov	r1, sl
    e244:	3210      	adds	r2, #16
    e246:	3301      	adds	r3, #1
    e248:	6071      	str	r1, [r6, #4]
    e24a:	60ba      	str	r2, [r7, #8]
    e24c:	607b      	str	r3, [r7, #4]
    e24e:	2b07      	cmp	r3, #7
    e250:	ddf0      	ble.n	e234 <_vfprintf_r+0xd20>
    e252:	003a      	movs	r2, r7
    e254:	0021      	movs	r1, r4
    e256:	9806      	ldr	r0, [sp, #24]
    e258:	f003 fc38 	bl	11acc <__sprint_r>
    e25c:	2800      	cmp	r0, #0
    e25e:	d000      	beq.n	e262 <_vfprintf_r+0xd4e>
    e260:	e6c1      	b.n	dfe6 <_vfprintf_r+0xad2>
    e262:	68ba      	ldr	r2, [r7, #8]
    e264:	687b      	ldr	r3, [r7, #4]
    e266:	ae32      	add	r6, sp, #200	; 0xc8
    e268:	e7e5      	b.n	e236 <_vfprintf_r+0xd22>
    e26a:	990c      	ldr	r1, [sp, #48]	; 0x30
    e26c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    e26e:	0008      	movs	r0, r1
    e270:	4310      	orrs	r0, r2
    e272:	2302      	movs	r3, #2
    e274:	0002      	movs	r2, r0
    e276:	f7ff fa93 	bl	d7a0 <_vfprintf_r+0x28c>
    e27a:	46a3      	mov	fp, r4
    e27c:	0014      	movs	r4, r2
    e27e:	464a      	mov	r2, r9
    e280:	1964      	adds	r4, r4, r5
    e282:	3301      	adds	r3, #1
    e284:	6032      	str	r2, [r6, #0]
    e286:	6075      	str	r5, [r6, #4]
    e288:	60bc      	str	r4, [r7, #8]
    e28a:	607b      	str	r3, [r7, #4]
    e28c:	2b07      	cmp	r3, #7
    e28e:	dc00      	bgt.n	e292 <_vfprintf_r+0xd7e>
    e290:	e542      	b.n	dd18 <_vfprintf_r+0x804>
    e292:	e5e8      	b.n	de66 <_vfprintf_r+0x952>
    e294:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    e296:	681a      	ldr	r2, [r3, #0]
    e298:	f7ff fa68 	bl	d76c <_vfprintf_r+0x258>
    e29c:	6813      	ldr	r3, [r2, #0]
    e29e:	9308      	str	r3, [sp, #32]
    e2a0:	f7ff fb57 	bl	d952 <_vfprintf_r+0x43e>
    e2a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    e2a6:	681a      	ldr	r2, [r3, #0]
    e2a8:	e412      	b.n	dad0 <_vfprintf_r+0x5bc>
    e2aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    e2ac:	681a      	ldr	r2, [r3, #0]
    e2ae:	e426      	b.n	dafe <_vfprintf_r+0x5ea>
    e2b0:	2b30      	cmp	r3, #48	; 0x30
    e2b2:	d100      	bne.n	e2b6 <_vfprintf_r+0xda2>
    e2b4:	e23c      	b.n	e730 <_vfprintf_r+0x121c>
    e2b6:	2330      	movs	r3, #48	; 0x30
    e2b8:	3a02      	subs	r2, #2
    e2ba:	7013      	strb	r3, [r2, #0]
    e2bc:	ab32      	add	r3, sp, #200	; 0xc8
    e2be:	1a9b      	subs	r3, r3, r2
    e2c0:	930e      	str	r3, [sp, #56]	; 0x38
    e2c2:	9211      	str	r2, [sp, #68]	; 0x44
    e2c4:	f7ff fa93 	bl	d7ee <_vfprintf_r+0x2da>
    e2c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e2ca:	2b09      	cmp	r3, #9
    e2cc:	d900      	bls.n	e2d0 <_vfprintf_r+0xdbc>
    e2ce:	e768      	b.n	e1a2 <_vfprintf_r+0xc8e>
    e2d0:	9c09      	ldr	r4, [sp, #36]	; 0x24
    e2d2:	2227      	movs	r2, #39	; 0x27
    e2d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e2d6:	a928      	add	r1, sp, #160	; 0xa0
    e2d8:	3330      	adds	r3, #48	; 0x30
    e2da:	548b      	strb	r3, [r1, r2]
    e2dc:	2301      	movs	r3, #1
    e2de:	aa16      	add	r2, sp, #88	; 0x58
    e2e0:	4694      	mov	ip, r2
    e2e2:	930e      	str	r3, [sp, #56]	; 0x38
    e2e4:	336e      	adds	r3, #110	; 0x6e
    e2e6:	4463      	add	r3, ip
    e2e8:	9409      	str	r4, [sp, #36]	; 0x24
    e2ea:	9311      	str	r3, [sp, #68]	; 0x44
    e2ec:	f7ff fa7f 	bl	d7ee <_vfprintf_r+0x2da>
    e2f0:	46c3      	mov	fp, r8
    e2f2:	46a9      	mov	r9, r5
    e2f4:	46a0      	mov	r8, r4
    e2f6:	0014      	movs	r4, r2
    e2f8:	464a      	mov	r2, r9
    e2fa:	6032      	str	r2, [r6, #0]
    e2fc:	4642      	mov	r2, r8
    e2fe:	4444      	add	r4, r8
    e300:	3301      	adds	r3, #1
    e302:	6072      	str	r2, [r6, #4]
    e304:	60bc      	str	r4, [r7, #8]
    e306:	607b      	str	r3, [r7, #4]
    e308:	2b07      	cmp	r3, #7
    e30a:	dc00      	bgt.n	e30e <_vfprintf_r+0xdfa>
    e30c:	e18d      	b.n	e62a <_vfprintf_r+0x1116>
    e30e:	003a      	movs	r2, r7
    e310:	4659      	mov	r1, fp
    e312:	9806      	ldr	r0, [sp, #24]
    e314:	f003 fbda 	bl	11acc <__sprint_r>
    e318:	2800      	cmp	r0, #0
    e31a:	d000      	beq.n	e31e <_vfprintf_r+0xe0a>
    e31c:	e68a      	b.n	e034 <_vfprintf_r+0xb20>
    e31e:	68bc      	ldr	r4, [r7, #8]
    e320:	ae32      	add	r6, sp, #200	; 0xc8
    e322:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    e324:	9a14      	ldr	r2, [sp, #80]	; 0x50
    e326:	4293      	cmp	r3, r2
    e328:	db00      	blt.n	e32c <_vfprintf_r+0xe18>
    e32a:	e179      	b.n	e620 <_vfprintf_r+0x110c>
    e32c:	9a18      	ldr	r2, [sp, #96]	; 0x60
    e32e:	6032      	str	r2, [r6, #0]
    e330:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    e332:	4694      	mov	ip, r2
    e334:	6072      	str	r2, [r6, #4]
    e336:	687a      	ldr	r2, [r7, #4]
    e338:	4464      	add	r4, ip
    e33a:	3201      	adds	r2, #1
    e33c:	60bc      	str	r4, [r7, #8]
    e33e:	607a      	str	r2, [r7, #4]
    e340:	2a07      	cmp	r2, #7
    e342:	dd00      	ble.n	e346 <_vfprintf_r+0xe32>
    e344:	e176      	b.n	e634 <_vfprintf_r+0x1120>
    e346:	3608      	adds	r6, #8
    e348:	9a14      	ldr	r2, [sp, #80]	; 0x50
    e34a:	9913      	ldr	r1, [sp, #76]	; 0x4c
    e34c:	1ad3      	subs	r3, r2, r3
    e34e:	1a52      	subs	r2, r2, r1
    e350:	4690      	mov	r8, r2
    e352:	429a      	cmp	r2, r3
    e354:	dd00      	ble.n	e358 <_vfprintf_r+0xe44>
    e356:	4698      	mov	r8, r3
    e358:	4642      	mov	r2, r8
    e35a:	2a00      	cmp	r2, #0
    e35c:	dd0f      	ble.n	e37e <_vfprintf_r+0xe6a>
    e35e:	9913      	ldr	r1, [sp, #76]	; 0x4c
    e360:	9a11      	ldr	r2, [sp, #68]	; 0x44
    e362:	468c      	mov	ip, r1
    e364:	4462      	add	r2, ip
    e366:	6032      	str	r2, [r6, #0]
    e368:	4642      	mov	r2, r8
    e36a:	6072      	str	r2, [r6, #4]
    e36c:	687a      	ldr	r2, [r7, #4]
    e36e:	4444      	add	r4, r8
    e370:	3201      	adds	r2, #1
    e372:	60bc      	str	r4, [r7, #8]
    e374:	607a      	str	r2, [r7, #4]
    e376:	2a07      	cmp	r2, #7
    e378:	dd00      	ble.n	e37c <_vfprintf_r+0xe68>
    e37a:	e289      	b.n	e890 <_vfprintf_r+0x137c>
    e37c:	3608      	adds	r6, #8
    e37e:	4642      	mov	r2, r8
    e380:	43d5      	mvns	r5, r2
    e382:	17ed      	asrs	r5, r5, #31
    e384:	4015      	ands	r5, r2
    e386:	1b5d      	subs	r5, r3, r5
    e388:	2d00      	cmp	r5, #0
    e38a:	dc00      	bgt.n	e38e <_vfprintf_r+0xe7a>
    e38c:	e4c5      	b.n	dd1a <_vfprintf_r+0x806>
    e38e:	4a4d      	ldr	r2, [pc, #308]	; (e4c4 <_vfprintf_r+0xfb0>)
    e390:	687b      	ldr	r3, [r7, #4]
    e392:	4691      	mov	r9, r2
    e394:	2d10      	cmp	r5, #16
    e396:	dc00      	bgt.n	e39a <_vfprintf_r+0xe86>
    e398:	e771      	b.n	e27e <_vfprintf_r+0xd6a>
    e39a:	2210      	movs	r2, #16
    e39c:	4690      	mov	r8, r2
    e39e:	0022      	movs	r2, r4
    e3a0:	465c      	mov	r4, fp
    e3a2:	e004      	b.n	e3ae <_vfprintf_r+0xe9a>
    e3a4:	3608      	adds	r6, #8
    e3a6:	3d10      	subs	r5, #16
    e3a8:	2d10      	cmp	r5, #16
    e3aa:	dc00      	bgt.n	e3ae <_vfprintf_r+0xe9a>
    e3ac:	e765      	b.n	e27a <_vfprintf_r+0xd66>
    e3ae:	4649      	mov	r1, r9
    e3b0:	6031      	str	r1, [r6, #0]
    e3b2:	4641      	mov	r1, r8
    e3b4:	3210      	adds	r2, #16
    e3b6:	3301      	adds	r3, #1
    e3b8:	6071      	str	r1, [r6, #4]
    e3ba:	60ba      	str	r2, [r7, #8]
    e3bc:	607b      	str	r3, [r7, #4]
    e3be:	2b07      	cmp	r3, #7
    e3c0:	ddf0      	ble.n	e3a4 <_vfprintf_r+0xe90>
    e3c2:	003a      	movs	r2, r7
    e3c4:	0021      	movs	r1, r4
    e3c6:	9806      	ldr	r0, [sp, #24]
    e3c8:	f003 fb80 	bl	11acc <__sprint_r>
    e3cc:	2800      	cmp	r0, #0
    e3ce:	d000      	beq.n	e3d2 <_vfprintf_r+0xebe>
    e3d0:	e609      	b.n	dfe6 <_vfprintf_r+0xad2>
    e3d2:	68ba      	ldr	r2, [r7, #8]
    e3d4:	687b      	ldr	r3, [r7, #4]
    e3d6:	ae32      	add	r6, sp, #200	; 0xc8
    e3d8:	e7e5      	b.n	e3a6 <_vfprintf_r+0xe92>
    e3da:	003a      	movs	r2, r7
    e3dc:	4659      	mov	r1, fp
    e3de:	9806      	ldr	r0, [sp, #24]
    e3e0:	f003 fb74 	bl	11acc <__sprint_r>
    e3e4:	2800      	cmp	r0, #0
    e3e6:	d000      	beq.n	e3ea <_vfprintf_r+0xed6>
    e3e8:	e624      	b.n	e034 <_vfprintf_r+0xb20>
    e3ea:	68bc      	ldr	r4, [r7, #8]
    e3ec:	687b      	ldr	r3, [r7, #4]
    e3ee:	ae32      	add	r6, sp, #200	; 0xc8
    e3f0:	e504      	b.n	ddfc <_vfprintf_r+0x8e8>
    e3f2:	2307      	movs	r3, #7
    e3f4:	3207      	adds	r2, #7
    e3f6:	439a      	bics	r2, r3
    e3f8:	3301      	adds	r3, #1
    e3fa:	469c      	mov	ip, r3
    e3fc:	4494      	add	ip, r2
    e3fe:	4663      	mov	r3, ip
    e400:	930f      	str	r3, [sp, #60]	; 0x3c
    e402:	6853      	ldr	r3, [r2, #4]
    e404:	6812      	ldr	r2, [r2, #0]
    e406:	930d      	str	r3, [sp, #52]	; 0x34
    e408:	920c      	str	r2, [sp, #48]	; 0x30
    e40a:	f7ff faa7 	bl	d95c <_vfprintf_r+0x448>
    e40e:	2207      	movs	r2, #7
    e410:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    e412:	3307      	adds	r3, #7
    e414:	4393      	bics	r3, r2
    e416:	3201      	adds	r2, #1
    e418:	4694      	mov	ip, r2
    e41a:	449c      	add	ip, r3
    e41c:	4662      	mov	r2, ip
    e41e:	920f      	str	r2, [sp, #60]	; 0x3c
    e420:	681a      	ldr	r2, [r3, #0]
    e422:	685b      	ldr	r3, [r3, #4]
    e424:	0011      	movs	r1, r2
    e426:	001a      	movs	r2, r3
    e428:	0008      	movs	r0, r1
    e42a:	4310      	orrs	r0, r2
    e42c:	910c      	str	r1, [sp, #48]	; 0x30
    e42e:	920d      	str	r2, [sp, #52]	; 0x34
    e430:	2300      	movs	r3, #0
    e432:	0002      	movs	r2, r0
    e434:	f7ff f9b4 	bl	d7a0 <_vfprintf_r+0x28c>
    e438:	46a3      	mov	fp, r4
    e43a:	4698      	mov	r8, r3
    e43c:	0014      	movs	r4, r2
    e43e:	464b      	mov	r3, r9
    e440:	6075      	str	r5, [r6, #4]
    e442:	6033      	str	r3, [r6, #0]
    e444:	1964      	adds	r4, r4, r5
    e446:	e4f7      	b.n	de38 <_vfprintf_r+0x924>
    e448:	003a      	movs	r2, r7
    e44a:	4659      	mov	r1, fp
    e44c:	9806      	ldr	r0, [sp, #24]
    e44e:	f003 fb3d 	bl	11acc <__sprint_r>
    e452:	2800      	cmp	r0, #0
    e454:	d000      	beq.n	e458 <_vfprintf_r+0xf44>
    e456:	e5ed      	b.n	e034 <_vfprintf_r+0xb20>
    e458:	687b      	ldr	r3, [r7, #4]
    e45a:	68bc      	ldr	r4, [r7, #8]
    e45c:	4698      	mov	r8, r3
    e45e:	ae32      	add	r6, sp, #200	; 0xc8
    e460:	e4da      	b.n	de18 <_vfprintf_r+0x904>
    e462:	2207      	movs	r2, #7
    e464:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    e466:	3307      	adds	r3, #7
    e468:	4393      	bics	r3, r2
    e46a:	3201      	adds	r2, #1
    e46c:	4694      	mov	ip, r2
    e46e:	449c      	add	ip, r3
    e470:	4662      	mov	r2, ip
    e472:	920f      	str	r2, [sp, #60]	; 0x3c
    e474:	681a      	ldr	r2, [r3, #0]
    e476:	685b      	ldr	r3, [r3, #4]
    e478:	0011      	movs	r1, r2
    e47a:	001a      	movs	r2, r3
    e47c:	0008      	movs	r0, r1
    e47e:	4310      	orrs	r0, r2
    e480:	910c      	str	r1, [sp, #48]	; 0x30
    e482:	920d      	str	r2, [sp, #52]	; 0x34
    e484:	2301      	movs	r3, #1
    e486:	0002      	movs	r2, r0
    e488:	f7ff f98a 	bl	d7a0 <_vfprintf_r+0x28c>
    e48c:	2207      	movs	r2, #7
    e48e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    e490:	3307      	adds	r3, #7
    e492:	4393      	bics	r3, r2
    e494:	3201      	adds	r2, #1
    e496:	4694      	mov	ip, r2
    e498:	449c      	add	ip, r3
    e49a:	4662      	mov	r2, ip
    e49c:	920f      	str	r2, [sp, #60]	; 0x3c
    e49e:	681a      	ldr	r2, [r3, #0]
    e4a0:	685b      	ldr	r3, [r3, #4]
    e4a2:	920c      	str	r2, [sp, #48]	; 0x30
    e4a4:	930d      	str	r3, [sp, #52]	; 0x34
    e4a6:	f7ff f966 	bl	d776 <_vfprintf_r+0x262>
    e4aa:	003a      	movs	r2, r7
    e4ac:	4659      	mov	r1, fp
    e4ae:	9806      	ldr	r0, [sp, #24]
    e4b0:	f003 fb0c 	bl	11acc <__sprint_r>
    e4b4:	2800      	cmp	r0, #0
    e4b6:	d000      	beq.n	e4ba <_vfprintf_r+0xfa6>
    e4b8:	e5bc      	b.n	e034 <_vfprintf_r+0xb20>
    e4ba:	68bc      	ldr	r4, [r7, #8]
    e4bc:	ae32      	add	r6, sp, #200	; 0xc8
    e4be:	f7ff fbe2 	bl	dc86 <_vfprintf_r+0x772>
    e4c2:	46c0      	nop			; (mov r8, r8)
    e4c4:	000125a0 	.word	0x000125a0
    e4c8:	980c      	ldr	r0, [sp, #48]	; 0x30
    e4ca:	990d      	ldr	r1, [sp, #52]	; 0x34
    e4cc:	2300      	movs	r3, #0
    e4ce:	4242      	negs	r2, r0
    e4d0:	418b      	sbcs	r3, r1
    e4d2:	0011      	movs	r1, r2
    e4d4:	001a      	movs	r2, r3
    e4d6:	232d      	movs	r3, #45	; 0x2d
    e4d8:	a816      	add	r0, sp, #88	; 0x58
    e4da:	77c3      	strb	r3, [r0, #31]
    e4dc:	0008      	movs	r0, r1
    e4de:	4310      	orrs	r0, r2
    e4e0:	910c      	str	r1, [sp, #48]	; 0x30
    e4e2:	920d      	str	r2, [sp, #52]	; 0x34
    e4e4:	4698      	mov	r8, r3
    e4e6:	0002      	movs	r2, r0
    e4e8:	3b2c      	subs	r3, #44	; 0x2c
    e4ea:	f7ff f95d 	bl	d7a8 <_vfprintf_r+0x294>
    e4ee:	9916      	ldr	r1, [sp, #88]	; 0x58
    e4f0:	9d15      	ldr	r5, [sp, #84]	; 0x54
    e4f2:	000a      	movs	r2, r1
    e4f4:	0008      	movs	r0, r1
    e4f6:	002b      	movs	r3, r5
    e4f8:	0029      	movs	r1, r5
    e4fa:	f7fe fc8b 	bl	ce14 <__aeabi_dcmpun>
    e4fe:	2800      	cmp	r0, #0
    e500:	d000      	beq.n	e504 <_vfprintf_r+0xff0>
    e502:	e2c6      	b.n	ea92 <_vfprintf_r+0x157e>
    e504:	4653      	mov	r3, sl
    e506:	3301      	adds	r3, #1
    e508:	d100      	bne.n	e50c <_vfprintf_r+0xff8>
    e50a:	e09f      	b.n	e64c <_vfprintf_r+0x1138>
    e50c:	2320      	movs	r3, #32
    e50e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    e510:	439a      	bics	r2, r3
    e512:	920e      	str	r2, [sp, #56]	; 0x38
    e514:	2a47      	cmp	r2, #71	; 0x47
    e516:	d100      	bne.n	e51a <_vfprintf_r+0x1006>
    e518:	e1a1      	b.n	e85e <_vfprintf_r+0x134a>
    e51a:	2380      	movs	r3, #128	; 0x80
    e51c:	005b      	lsls	r3, r3, #1
    e51e:	4323      	orrs	r3, r4
    e520:	9309      	str	r3, [sp, #36]	; 0x24
    e522:	9b15      	ldr	r3, [sp, #84]	; 0x54
    e524:	2b00      	cmp	r3, #0
    e526:	da00      	bge.n	e52a <_vfprintf_r+0x1016>
    e528:	e1ed      	b.n	e906 <_vfprintf_r+0x13f2>
    e52a:	9a16      	ldr	r2, [sp, #88]	; 0x58
    e52c:	9308      	str	r3, [sp, #32]
    e52e:	2300      	movs	r3, #0
    e530:	4691      	mov	r9, r2
    e532:	9310      	str	r3, [sp, #64]	; 0x40
    e534:	9b12      	ldr	r3, [sp, #72]	; 0x48
    e536:	2b66      	cmp	r3, #102	; 0x66
    e538:	d100      	bne.n	e53c <_vfprintf_r+0x1028>
    e53a:	e1b8      	b.n	e8ae <_vfprintf_r+0x139a>
    e53c:	2b46      	cmp	r3, #70	; 0x46
    e53e:	d100      	bne.n	e542 <_vfprintf_r+0x102e>
    e540:	e237      	b.n	e9b2 <_vfprintf_r+0x149e>
    e542:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    e544:	9806      	ldr	r0, [sp, #24]
    e546:	3a45      	subs	r2, #69	; 0x45
    e548:	0013      	movs	r3, r2
    e54a:	4259      	negs	r1, r3
    e54c:	4159      	adcs	r1, r3
    e54e:	ab20      	add	r3, sp, #128	; 0x80
    e550:	000d      	movs	r5, r1
    e552:	9303      	str	r3, [sp, #12]
    e554:	ab1f      	add	r3, sp, #124	; 0x7c
    e556:	9302      	str	r3, [sp, #8]
    e558:	2302      	movs	r3, #2
    e55a:	aa23      	add	r2, sp, #140	; 0x8c
    e55c:	4455      	add	r5, sl
    e55e:	921b      	str	r2, [sp, #108]	; 0x6c
    e560:	9204      	str	r2, [sp, #16]
    e562:	9300      	str	r3, [sp, #0]
    e564:	9501      	str	r5, [sp, #4]
    e566:	9b08      	ldr	r3, [sp, #32]
    e568:	464a      	mov	r2, r9
    e56a:	f000 fd25 	bl	efb8 <_dtoa_r>
    e56e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    e570:	9011      	str	r0, [sp, #68]	; 0x44
    e572:	2b67      	cmp	r3, #103	; 0x67
    e574:	d000      	beq.n	e578 <_vfprintf_r+0x1064>
    e576:	e20b      	b.n	e990 <_vfprintf_r+0x147c>
    e578:	9b11      	ldr	r3, [sp, #68]	; 0x44
    e57a:	4698      	mov	r8, r3
    e57c:	44a8      	add	r8, r5
    e57e:	07e3      	lsls	r3, r4, #31
    e580:	d400      	bmi.n	e584 <_vfprintf_r+0x1070>
    e582:	e277      	b.n	ea74 <_vfprintf_r+0x1560>
    e584:	2300      	movs	r3, #0
    e586:	2200      	movs	r2, #0
    e588:	4648      	mov	r0, r9
    e58a:	9908      	ldr	r1, [sp, #32]
    e58c:	f7fc f8bc 	bl	a708 <__aeabi_dcmpeq>
    e590:	4643      	mov	r3, r8
    e592:	2800      	cmp	r0, #0
    e594:	d10a      	bne.n	e5ac <_vfprintf_r+0x1098>
    e596:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    e598:	4543      	cmp	r3, r8
    e59a:	d207      	bcs.n	e5ac <_vfprintf_r+0x1098>
    e59c:	2130      	movs	r1, #48	; 0x30
    e59e:	4640      	mov	r0, r8
    e5a0:	1c5a      	adds	r2, r3, #1
    e5a2:	9223      	str	r2, [sp, #140]	; 0x8c
    e5a4:	7019      	strb	r1, [r3, #0]
    e5a6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    e5a8:	4298      	cmp	r0, r3
    e5aa:	d8f9      	bhi.n	e5a0 <_vfprintf_r+0x108c>
    e5ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
    e5ae:	1a9b      	subs	r3, r3, r2
    e5b0:	9314      	str	r3, [sp, #80]	; 0x50
    e5b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e5b4:	2b47      	cmp	r3, #71	; 0x47
    e5b6:	d100      	bne.n	e5ba <_vfprintf_r+0x10a6>
    e5b8:	e0d0      	b.n	e75c <_vfprintf_r+0x1248>
    e5ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
    e5bc:	2b65      	cmp	r3, #101	; 0x65
    e5be:	dc00      	bgt.n	e5c2 <_vfprintf_r+0x10ae>
    e5c0:	e2d5      	b.n	eb6e <_vfprintf_r+0x165a>
    e5c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    e5c4:	2b66      	cmp	r3, #102	; 0x66
    e5c6:	d100      	bne.n	e5ca <_vfprintf_r+0x10b6>
    e5c8:	e1c6      	b.n	e958 <_vfprintf_r+0x1444>
    e5ca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    e5cc:	9313      	str	r3, [sp, #76]	; 0x4c
    e5ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
    e5d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    e5d2:	0019      	movs	r1, r3
    e5d4:	4291      	cmp	r1, r2
    e5d6:	dd00      	ble.n	e5da <_vfprintf_r+0x10c6>
    e5d8:	e1a0      	b.n	e91c <_vfprintf_r+0x1408>
    e5da:	07e3      	lsls	r3, r4, #31
    e5dc:	d500      	bpl.n	e5e0 <_vfprintf_r+0x10cc>
    e5de:	e242      	b.n	ea66 <_vfprintf_r+0x1552>
    e5e0:	43d3      	mvns	r3, r2
    e5e2:	17db      	asrs	r3, r3, #31
    e5e4:	0011      	movs	r1, r2
    e5e6:	401a      	ands	r2, r3
    e5e8:	2367      	movs	r3, #103	; 0x67
    e5ea:	9208      	str	r2, [sp, #32]
    e5ec:	910e      	str	r1, [sp, #56]	; 0x38
    e5ee:	9312      	str	r3, [sp, #72]	; 0x48
    e5f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e5f2:	2b00      	cmp	r3, #0
    e5f4:	d000      	beq.n	e5f8 <_vfprintf_r+0x10e4>
    e5f6:	e0a9      	b.n	e74c <_vfprintf_r+0x1238>
    e5f8:	ab16      	add	r3, sp, #88	; 0x58
    e5fa:	7fdb      	ldrb	r3, [r3, #31]
    e5fc:	4698      	mov	r8, r3
    e5fe:	2300      	movs	r3, #0
    e600:	469a      	mov	sl, r3
    e602:	f7ff f8fc 	bl	d7fe <_vfprintf_r+0x2ea>
    e606:	46cb      	mov	fp, r9
    e608:	46a1      	mov	r9, r4
    e60a:	0014      	movs	r4, r2
    e60c:	e637      	b.n	e27e <_vfprintf_r+0xd6a>
    e60e:	464b      	mov	r3, r9
    e610:	6d98      	ldr	r0, [r3, #88]	; 0x58
    e612:	f002 f8db 	bl	107cc <__retarget_lock_release_recursive>
    e616:	2301      	movs	r3, #1
    e618:	425b      	negs	r3, r3
    e61a:	930a      	str	r3, [sp, #40]	; 0x28
    e61c:	f7ff f82b 	bl	d676 <_vfprintf_r+0x162>
    e620:	9a09      	ldr	r2, [sp, #36]	; 0x24
    e622:	07d2      	lsls	r2, r2, #31
    e624:	d400      	bmi.n	e628 <_vfprintf_r+0x1114>
    e626:	e68f      	b.n	e348 <_vfprintf_r+0xe34>
    e628:	e680      	b.n	e32c <_vfprintf_r+0xe18>
    e62a:	3608      	adds	r6, #8
    e62c:	e679      	b.n	e322 <_vfprintf_r+0xe0e>
    e62e:	68bc      	ldr	r4, [r7, #8]
    e630:	f7ff fb73 	bl	dd1a <_vfprintf_r+0x806>
    e634:	003a      	movs	r2, r7
    e636:	4659      	mov	r1, fp
    e638:	9806      	ldr	r0, [sp, #24]
    e63a:	f003 fa47 	bl	11acc <__sprint_r>
    e63e:	2800      	cmp	r0, #0
    e640:	d000      	beq.n	e644 <_vfprintf_r+0x1130>
    e642:	e4f7      	b.n	e034 <_vfprintf_r+0xb20>
    e644:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    e646:	68bc      	ldr	r4, [r7, #8]
    e648:	ae32      	add	r6, sp, #200	; 0xc8
    e64a:	e67d      	b.n	e348 <_vfprintf_r+0xe34>
    e64c:	2320      	movs	r3, #32
    e64e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    e650:	439a      	bics	r2, r3
    e652:	3b1a      	subs	r3, #26
    e654:	920e      	str	r2, [sp, #56]	; 0x38
    e656:	469a      	mov	sl, r3
    e658:	e75f      	b.n	e51a <_vfprintf_r+0x1006>
    e65a:	232d      	movs	r3, #45	; 0x2d
    e65c:	aa16      	add	r2, sp, #88	; 0x58
    e65e:	77d3      	strb	r3, [r2, #31]
    e660:	4698      	mov	r8, r3
    e662:	f7ff faa8 	bl	dbb6 <_vfprintf_r+0x6a2>
    e666:	003a      	movs	r2, r7
    e668:	4659      	mov	r1, fp
    e66a:	9806      	ldr	r0, [sp, #24]
    e66c:	f003 fa2e 	bl	11acc <__sprint_r>
    e670:	2800      	cmp	r0, #0
    e672:	d000      	beq.n	e676 <_vfprintf_r+0x1162>
    e674:	e4de      	b.n	e034 <_vfprintf_r+0xb20>
    e676:	ae32      	add	r6, sp, #200	; 0xc8
    e678:	e419      	b.n	deae <_vfprintf_r+0x99a>
    e67a:	4be3      	ldr	r3, [pc, #908]	; (ea08 <_vfprintf_r+0x14f4>)
    e67c:	3401      	adds	r4, #1
    e67e:	6033      	str	r3, [r6, #0]
    e680:	2301      	movs	r3, #1
    e682:	6073      	str	r3, [r6, #4]
    e684:	687b      	ldr	r3, [r7, #4]
    e686:	60bc      	str	r4, [r7, #8]
    e688:	3301      	adds	r3, #1
    e68a:	607b      	str	r3, [r7, #4]
    e68c:	2b07      	cmp	r3, #7
    e68e:	dd00      	ble.n	e692 <_vfprintf_r+0x117e>
    e690:	e155      	b.n	e93e <_vfprintf_r+0x142a>
    e692:	3608      	adds	r6, #8
    e694:	2800      	cmp	r0, #0
    e696:	d107      	bne.n	e6a8 <_vfprintf_r+0x1194>
    e698:	9b14      	ldr	r3, [sp, #80]	; 0x50
    e69a:	2b00      	cmp	r3, #0
    e69c:	d104      	bne.n	e6a8 <_vfprintf_r+0x1194>
    e69e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e6a0:	07db      	lsls	r3, r3, #31
    e6a2:	d401      	bmi.n	e6a8 <_vfprintf_r+0x1194>
    e6a4:	f7ff fb39 	bl	dd1a <_vfprintf_r+0x806>
    e6a8:	9b18      	ldr	r3, [sp, #96]	; 0x60
    e6aa:	6033      	str	r3, [r6, #0]
    e6ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    e6ae:	1919      	adds	r1, r3, r4
    e6b0:	6073      	str	r3, [r6, #4]
    e6b2:	687b      	ldr	r3, [r7, #4]
    e6b4:	60b9      	str	r1, [r7, #8]
    e6b6:	3301      	adds	r3, #1
    e6b8:	607b      	str	r3, [r7, #4]
    e6ba:	2b07      	cmp	r3, #7
    e6bc:	dd00      	ble.n	e6c0 <_vfprintf_r+0x11ac>
    e6be:	e1c4      	b.n	ea4a <_vfprintf_r+0x1536>
    e6c0:	0032      	movs	r2, r6
    e6c2:	3208      	adds	r2, #8
    e6c4:	2800      	cmp	r0, #0
    e6c6:	da00      	bge.n	e6ca <_vfprintf_r+0x11b6>
    e6c8:	e195      	b.n	e9f6 <_vfprintf_r+0x14e2>
    e6ca:	9811      	ldr	r0, [sp, #68]	; 0x44
    e6cc:	3301      	adds	r3, #1
    e6ce:	6010      	str	r0, [r2, #0]
    e6d0:	9814      	ldr	r0, [sp, #80]	; 0x50
    e6d2:	607b      	str	r3, [r7, #4]
    e6d4:	1844      	adds	r4, r0, r1
    e6d6:	6050      	str	r0, [r2, #4]
    e6d8:	60bc      	str	r4, [r7, #8]
    e6da:	2b07      	cmp	r3, #7
    e6dc:	dd01      	ble.n	e6e2 <_vfprintf_r+0x11ce>
    e6de:	f7ff fbc2 	bl	de66 <_vfprintf_r+0x952>
    e6e2:	3208      	adds	r2, #8
    e6e4:	0016      	movs	r6, r2
    e6e6:	f7ff fb18 	bl	dd1a <_vfprintf_r+0x806>
    e6ea:	990f      	ldr	r1, [sp, #60]	; 0x3c
    e6ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    e6ee:	680b      	ldr	r3, [r1, #0]
    e6f0:	601a      	str	r2, [r3, #0]
    e6f2:	17d2      	asrs	r2, r2, #31
    e6f4:	605a      	str	r2, [r3, #4]
    e6f6:	000b      	movs	r3, r1
    e6f8:	3304      	adds	r3, #4
    e6fa:	930f      	str	r3, [sp, #60]	; 0x3c
    e6fc:	f7fe ff58 	bl	d5b0 <_vfprintf_r+0x9c>
    e700:	464b      	mov	r3, r9
    e702:	9a07      	ldr	r2, [sp, #28]
    e704:	431c      	orrs	r4, r3
    e706:	3201      	adds	r2, #1
    e708:	7813      	ldrb	r3, [r2, #0]
    e70a:	9207      	str	r2, [sp, #28]
    e70c:	f7fe ff8b 	bl	d626 <_vfprintf_r+0x112>
    e710:	003a      	movs	r2, r7
    e712:	4659      	mov	r1, fp
    e714:	9806      	ldr	r0, [sp, #24]
    e716:	f003 f9d9 	bl	11acc <__sprint_r>
    e71a:	2800      	cmp	r0, #0
    e71c:	d000      	beq.n	e720 <_vfprintf_r+0x120c>
    e71e:	e489      	b.n	e034 <_vfprintf_r+0xb20>
    e720:	68bc      	ldr	r4, [r7, #8]
    e722:	ae32      	add	r6, sp, #200	; 0xc8
    e724:	f7ff fbdc 	bl	dee0 <_vfprintf_r+0x9cc>
    e728:	4bb8      	ldr	r3, [pc, #736]	; (ea0c <_vfprintf_r+0x14f8>)
    e72a:	9311      	str	r3, [sp, #68]	; 0x44
    e72c:	f7ff fa4a 	bl	dbc4 <_vfprintf_r+0x6b0>
    e730:	9a11      	ldr	r2, [sp, #68]	; 0x44
    e732:	ab32      	add	r3, sp, #200	; 0xc8
    e734:	1a9b      	subs	r3, r3, r2
    e736:	930e      	str	r3, [sp, #56]	; 0x38
    e738:	f7ff f859 	bl	d7ee <_vfprintf_r+0x2da>
    e73c:	9811      	ldr	r0, [sp, #68]	; 0x44
    e73e:	f7fe feb7 	bl	d4b0 <strlen>
    e742:	0002      	movs	r2, r0
    e744:	900e      	str	r0, [sp, #56]	; 0x38
    e746:	0003      	movs	r3, r0
    e748:	f7ff f9a1 	bl	da8e <_vfprintf_r+0x57a>
    e74c:	232d      	movs	r3, #45	; 0x2d
    e74e:	aa16      	add	r2, sp, #88	; 0x58
    e750:	77d3      	strb	r3, [r2, #31]
    e752:	4698      	mov	r8, r3
    e754:	2300      	movs	r3, #0
    e756:	469a      	mov	sl, r3
    e758:	f7ff f854 	bl	d804 <_vfprintf_r+0x2f0>
    e75c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    e75e:	9313      	str	r3, [sp, #76]	; 0x4c
    e760:	1cda      	adds	r2, r3, #3
    e762:	db02      	blt.n	e76a <_vfprintf_r+0x1256>
    e764:	459a      	cmp	sl, r3
    e766:	db00      	blt.n	e76a <_vfprintf_r+0x1256>
    e768:	e731      	b.n	e5ce <_vfprintf_r+0x10ba>
    e76a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    e76c:	3b02      	subs	r3, #2
    e76e:	9312      	str	r3, [sp, #72]	; 0x48
    e770:	222c      	movs	r2, #44	; 0x2c
    e772:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    e774:	2148      	movs	r1, #72	; 0x48
    e776:	1e5d      	subs	r5, r3, #1
    e778:	ab16      	add	r3, sp, #88	; 0x58
    e77a:	189b      	adds	r3, r3, r2
    e77c:	466a      	mov	r2, sp
    e77e:	1852      	adds	r2, r2, r1
    e780:	7812      	ldrb	r2, [r2, #0]
    e782:	951f      	str	r5, [sp, #124]	; 0x7c
    e784:	701a      	strb	r2, [r3, #0]
    e786:	2d00      	cmp	r5, #0
    e788:	da00      	bge.n	e78c <_vfprintf_r+0x1278>
    e78a:	e1cb      	b.n	eb24 <_vfprintf_r+0x1610>
    e78c:	212d      	movs	r1, #45	; 0x2d
    e78e:	232b      	movs	r3, #43	; 0x2b
    e790:	aa16      	add	r2, sp, #88	; 0x58
    e792:	1852      	adds	r2, r2, r1
    e794:	7013      	strb	r3, [r2, #0]
    e796:	2d09      	cmp	r5, #9
    e798:	dc00      	bgt.n	e79c <_vfprintf_r+0x1288>
    e79a:	e16d      	b.n	ea78 <_vfprintf_r+0x1564>
    e79c:	aa16      	add	r2, sp, #88	; 0x58
    e79e:	233b      	movs	r3, #59	; 0x3b
    e7a0:	4694      	mov	ip, r2
    e7a2:	4463      	add	r3, ip
    e7a4:	469a      	mov	sl, r3
    e7a6:	46b1      	mov	r9, r6
    e7a8:	46a0      	mov	r8, r4
    e7aa:	4656      	mov	r6, sl
    e7ac:	e000      	b.n	e7b0 <_vfprintf_r+0x129c>
    e7ae:	0026      	movs	r6, r4
    e7b0:	0028      	movs	r0, r5
    e7b2:	210a      	movs	r1, #10
    e7b4:	f7fb ff92 	bl	a6dc <__aeabi_idivmod>
    e7b8:	1e74      	subs	r4, r6, #1
    e7ba:	3130      	adds	r1, #48	; 0x30
    e7bc:	7021      	strb	r1, [r4, #0]
    e7be:	0028      	movs	r0, r5
    e7c0:	210a      	movs	r1, #10
    e7c2:	f7fb fea5 	bl	a510 <__divsi3>
    e7c6:	0005      	movs	r5, r0
    e7c8:	2809      	cmp	r0, #9
    e7ca:	dcf0      	bgt.n	e7ae <_vfprintf_r+0x129a>
    e7cc:	0023      	movs	r3, r4
    e7ce:	4644      	mov	r4, r8
    e7d0:	46b0      	mov	r8, r6
    e7d2:	464e      	mov	r6, r9
    e7d4:	4699      	mov	r9, r3
    e7d6:	0003      	movs	r3, r0
    e7d8:	3330      	adds	r3, #48	; 0x30
    e7da:	b2d8      	uxtb	r0, r3
    e7dc:	4643      	mov	r3, r8
    e7de:	3b02      	subs	r3, #2
    e7e0:	7018      	strb	r0, [r3, #0]
    e7e2:	459a      	cmp	sl, r3
    e7e4:	d800      	bhi.n	e7e8 <_vfprintf_r+0x12d4>
    e7e6:	e1f6      	b.n	ebd6 <_vfprintf_r+0x16c2>
    e7e8:	4642      	mov	r2, r8
    e7ea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    e7ec:	4645      	mov	r5, r8
    e7ee:	1a99      	subs	r1, r3, r2
    e7f0:	2301      	movs	r3, #1
    e7f2:	3107      	adds	r1, #7
    e7f4:	425b      	negs	r3, r3
    e7f6:	e001      	b.n	e7fc <_vfprintf_r+0x12e8>
    e7f8:	5ce8      	ldrb	r0, [r5, r3]
    e7fa:	3301      	adds	r3, #1
    e7fc:	aa21      	add	r2, sp, #132	; 0x84
    e7fe:	18d2      	adds	r2, r2, r3
    e800:	70d0      	strb	r0, [r2, #3]
    e802:	428b      	cmp	r3, r1
    e804:	d1f8      	bne.n	e7f8 <_vfprintf_r+0x12e4>
    e806:	a916      	add	r1, sp, #88	; 0x58
    e808:	468c      	mov	ip, r1
    e80a:	222e      	movs	r2, #46	; 0x2e
    e80c:	464b      	mov	r3, r9
    e80e:	4462      	add	r2, ip
    e810:	4694      	mov	ip, r2
    e812:	1afb      	subs	r3, r7, r3
    e814:	4463      	add	r3, ip
    e816:	aa21      	add	r2, sp, #132	; 0x84
    e818:	9914      	ldr	r1, [sp, #80]	; 0x50
    e81a:	1a9b      	subs	r3, r3, r2
    e81c:	469c      	mov	ip, r3
    e81e:	000a      	movs	r2, r1
    e820:	4462      	add	r2, ip
    e822:	931a      	str	r3, [sp, #104]	; 0x68
    e824:	920e      	str	r2, [sp, #56]	; 0x38
    e826:	2901      	cmp	r1, #1
    e828:	dc00      	bgt.n	e82c <_vfprintf_r+0x1318>
    e82a:	e170      	b.n	eb0e <_vfprintf_r+0x15fa>
    e82c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    e82e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e830:	4694      	mov	ip, r2
    e832:	4463      	add	r3, ip
    e834:	001a      	movs	r2, r3
    e836:	930e      	str	r3, [sp, #56]	; 0x38
    e838:	43db      	mvns	r3, r3
    e83a:	17db      	asrs	r3, r3, #31
    e83c:	401a      	ands	r2, r3
    e83e:	2300      	movs	r3, #0
    e840:	9208      	str	r2, [sp, #32]
    e842:	9313      	str	r3, [sp, #76]	; 0x4c
    e844:	e6d4      	b.n	e5f0 <_vfprintf_r+0x10dc>
    e846:	003a      	movs	r2, r7
    e848:	4659      	mov	r1, fp
    e84a:	9806      	ldr	r0, [sp, #24]
    e84c:	f003 f93e 	bl	11acc <__sprint_r>
    e850:	2800      	cmp	r0, #0
    e852:	d001      	beq.n	e858 <_vfprintf_r+0x1344>
    e854:	f7ff fbee 	bl	e034 <_vfprintf_r+0xb20>
    e858:	68bc      	ldr	r4, [r7, #8]
    e85a:	ae32      	add	r6, sp, #200	; 0xc8
    e85c:	e46a      	b.n	e134 <_vfprintf_r+0xc20>
    e85e:	4653      	mov	r3, sl
    e860:	2b00      	cmp	r3, #0
    e862:	d000      	beq.n	e866 <_vfprintf_r+0x1352>
    e864:	e659      	b.n	e51a <_vfprintf_r+0x1006>
    e866:	3301      	adds	r3, #1
    e868:	469a      	mov	sl, r3
    e86a:	e656      	b.n	e51a <_vfprintf_r+0x1006>
    e86c:	4653      	mov	r3, sl
    e86e:	9308      	str	r3, [sp, #32]
    e870:	2b06      	cmp	r3, #6
    e872:	d901      	bls.n	e878 <_vfprintf_r+0x1364>
    e874:	2306      	movs	r3, #6
    e876:	9308      	str	r3, [sp, #32]
    e878:	9b08      	ldr	r3, [sp, #32]
    e87a:	950f      	str	r5, [sp, #60]	; 0x3c
    e87c:	930e      	str	r3, [sp, #56]	; 0x38
    e87e:	2300      	movs	r3, #0
    e880:	4698      	mov	r8, r3
    e882:	469a      	mov	sl, r3
    e884:	9313      	str	r3, [sp, #76]	; 0x4c
    e886:	4b62      	ldr	r3, [pc, #392]	; (ea10 <_vfprintf_r+0x14fc>)
    e888:	9409      	str	r4, [sp, #36]	; 0x24
    e88a:	9311      	str	r3, [sp, #68]	; 0x44
    e88c:	f7fe ffbd 	bl	d80a <_vfprintf_r+0x2f6>
    e890:	003a      	movs	r2, r7
    e892:	4659      	mov	r1, fp
    e894:	9806      	ldr	r0, [sp, #24]
    e896:	f003 f919 	bl	11acc <__sprint_r>
    e89a:	2800      	cmp	r0, #0
    e89c:	d001      	beq.n	e8a2 <_vfprintf_r+0x138e>
    e89e:	f7ff fbc9 	bl	e034 <_vfprintf_r+0xb20>
    e8a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
    e8a4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    e8a6:	68bc      	ldr	r4, [r7, #8]
    e8a8:	1a9b      	subs	r3, r3, r2
    e8aa:	ae32      	add	r6, sp, #200	; 0xc8
    e8ac:	e567      	b.n	e37e <_vfprintf_r+0xe6a>
    e8ae:	ab23      	add	r3, sp, #140	; 0x8c
    e8b0:	931b      	str	r3, [sp, #108]	; 0x6c
    e8b2:	9304      	str	r3, [sp, #16]
    e8b4:	ab20      	add	r3, sp, #128	; 0x80
    e8b6:	9303      	str	r3, [sp, #12]
    e8b8:	ab1f      	add	r3, sp, #124	; 0x7c
    e8ba:	9302      	str	r3, [sp, #8]
    e8bc:	4653      	mov	r3, sl
    e8be:	9301      	str	r3, [sp, #4]
    e8c0:	2303      	movs	r3, #3
    e8c2:	464a      	mov	r2, r9
    e8c4:	9300      	str	r3, [sp, #0]
    e8c6:	9806      	ldr	r0, [sp, #24]
    e8c8:	9b08      	ldr	r3, [sp, #32]
    e8ca:	f000 fb75 	bl	efb8 <_dtoa_r>
    e8ce:	0003      	movs	r3, r0
    e8d0:	4453      	add	r3, sl
    e8d2:	4698      	mov	r8, r3
    e8d4:	4655      	mov	r5, sl
    e8d6:	9011      	str	r0, [sp, #68]	; 0x44
    e8d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    e8da:	781b      	ldrb	r3, [r3, #0]
    e8dc:	2b30      	cmp	r3, #48	; 0x30
    e8de:	d002      	beq.n	e8e6 <_vfprintf_r+0x13d2>
    e8e0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    e8e2:	4498      	add	r8, r3
    e8e4:	e64e      	b.n	e584 <_vfprintf_r+0x1070>
    e8e6:	2200      	movs	r2, #0
    e8e8:	2300      	movs	r3, #0
    e8ea:	4648      	mov	r0, r9
    e8ec:	9908      	ldr	r1, [sp, #32]
    e8ee:	f7fb ff0b 	bl	a708 <__aeabi_dcmpeq>
    e8f2:	2800      	cmp	r0, #0
    e8f4:	d1f4      	bne.n	e8e0 <_vfprintf_r+0x13cc>
    e8f6:	2301      	movs	r3, #1
    e8f8:	1b5b      	subs	r3, r3, r5
    e8fa:	931f      	str	r3, [sp, #124]	; 0x7c
    e8fc:	4498      	add	r8, r3
    e8fe:	e641      	b.n	e584 <_vfprintf_r+0x1070>
    e900:	46c1      	mov	r9, r8
    e902:	f7ff fb1f 	bl	df44 <_vfprintf_r+0xa30>
    e906:	2280      	movs	r2, #128	; 0x80
    e908:	0612      	lsls	r2, r2, #24
    e90a:	4694      	mov	ip, r2
    e90c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    e90e:	4699      	mov	r9, r3
    e910:	9b15      	ldr	r3, [sp, #84]	; 0x54
    e912:	4463      	add	r3, ip
    e914:	9308      	str	r3, [sp, #32]
    e916:	232d      	movs	r3, #45	; 0x2d
    e918:	9310      	str	r3, [sp, #64]	; 0x40
    e91a:	e60b      	b.n	e534 <_vfprintf_r+0x1020>
    e91c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    e91e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    e920:	4694      	mov	ip, r2
    e922:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    e924:	4463      	add	r3, ip
    e926:	930e      	str	r3, [sp, #56]	; 0x38
    e928:	2a00      	cmp	r2, #0
    e92a:	dc00      	bgt.n	e92e <_vfprintf_r+0x141a>
    e92c:	e0e3      	b.n	eaf6 <_vfprintf_r+0x15e2>
    e92e:	001a      	movs	r2, r3
    e930:	43db      	mvns	r3, r3
    e932:	17db      	asrs	r3, r3, #31
    e934:	401a      	ands	r2, r3
    e936:	2367      	movs	r3, #103	; 0x67
    e938:	9208      	str	r2, [sp, #32]
    e93a:	9312      	str	r3, [sp, #72]	; 0x48
    e93c:	e658      	b.n	e5f0 <_vfprintf_r+0x10dc>
    e93e:	003a      	movs	r2, r7
    e940:	4659      	mov	r1, fp
    e942:	9806      	ldr	r0, [sp, #24]
    e944:	f003 f8c2 	bl	11acc <__sprint_r>
    e948:	2800      	cmp	r0, #0
    e94a:	d001      	beq.n	e950 <_vfprintf_r+0x143c>
    e94c:	f7ff fb72 	bl	e034 <_vfprintf_r+0xb20>
    e950:	981f      	ldr	r0, [sp, #124]	; 0x7c
    e952:	68bc      	ldr	r4, [r7, #8]
    e954:	ae32      	add	r6, sp, #200	; 0xc8
    e956:	e69d      	b.n	e694 <_vfprintf_r+0x1180>
    e958:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    e95a:	9313      	str	r3, [sp, #76]	; 0x4c
    e95c:	2b00      	cmp	r3, #0
    e95e:	dc00      	bgt.n	e962 <_vfprintf_r+0x144e>
    e960:	e0f2      	b.n	eb48 <_vfprintf_r+0x1634>
    e962:	4652      	mov	r2, sl
    e964:	2a00      	cmp	r2, #0
    e966:	d000      	beq.n	e96a <_vfprintf_r+0x1456>
    e968:	e0a0      	b.n	eaac <_vfprintf_r+0x1598>
    e96a:	07e2      	lsls	r2, r4, #31
    e96c:	d500      	bpl.n	e970 <_vfprintf_r+0x145c>
    e96e:	e09d      	b.n	eaac <_vfprintf_r+0x1598>
    e970:	9308      	str	r3, [sp, #32]
    e972:	930e      	str	r3, [sp, #56]	; 0x38
    e974:	e63c      	b.n	e5f0 <_vfprintf_r+0x10dc>
    e976:	ab16      	add	r3, sp, #88	; 0x58
    e978:	7fdb      	ldrb	r3, [r3, #31]
    e97a:	950f      	str	r5, [sp, #60]	; 0x3c
    e97c:	4698      	mov	r8, r3
    e97e:	4653      	mov	r3, sl
    e980:	9308      	str	r3, [sp, #32]
    e982:	930e      	str	r3, [sp, #56]	; 0x38
    e984:	2300      	movs	r3, #0
    e986:	9409      	str	r4, [sp, #36]	; 0x24
    e988:	469a      	mov	sl, r3
    e98a:	9313      	str	r3, [sp, #76]	; 0x4c
    e98c:	f7fe ff37 	bl	d7fe <_vfprintf_r+0x2ea>
    e990:	9b11      	ldr	r3, [sp, #68]	; 0x44
    e992:	4698      	mov	r8, r3
    e994:	9b12      	ldr	r3, [sp, #72]	; 0x48
    e996:	44a8      	add	r8, r5
    e998:	2b47      	cmp	r3, #71	; 0x47
    e99a:	d000      	beq.n	e99e <_vfprintf_r+0x148a>
    e99c:	e5f2      	b.n	e584 <_vfprintf_r+0x1070>
    e99e:	07e3      	lsls	r3, r4, #31
    e9a0:	d400      	bmi.n	e9a4 <_vfprintf_r+0x1490>
    e9a2:	e0dc      	b.n	eb5e <_vfprintf_r+0x164a>
    e9a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    e9a6:	4698      	mov	r8, r3
    e9a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    e9aa:	44a8      	add	r8, r5
    e9ac:	2b46      	cmp	r3, #70	; 0x46
    e9ae:	d093      	beq.n	e8d8 <_vfprintf_r+0x13c4>
    e9b0:	e5e8      	b.n	e584 <_vfprintf_r+0x1070>
    e9b2:	ab23      	add	r3, sp, #140	; 0x8c
    e9b4:	931b      	str	r3, [sp, #108]	; 0x6c
    e9b6:	9304      	str	r3, [sp, #16]
    e9b8:	ab20      	add	r3, sp, #128	; 0x80
    e9ba:	9303      	str	r3, [sp, #12]
    e9bc:	ab1f      	add	r3, sp, #124	; 0x7c
    e9be:	9302      	str	r3, [sp, #8]
    e9c0:	4653      	mov	r3, sl
    e9c2:	9301      	str	r3, [sp, #4]
    e9c4:	2303      	movs	r3, #3
    e9c6:	464a      	mov	r2, r9
    e9c8:	9300      	str	r3, [sp, #0]
    e9ca:	9806      	ldr	r0, [sp, #24]
    e9cc:	9b08      	ldr	r3, [sp, #32]
    e9ce:	f000 faf3 	bl	efb8 <_dtoa_r>
    e9d2:	4655      	mov	r5, sl
    e9d4:	9011      	str	r0, [sp, #68]	; 0x44
    e9d6:	e7e5      	b.n	e9a4 <_vfprintf_r+0x1490>
    e9d8:	003a      	movs	r2, r7
    e9da:	4659      	mov	r1, fp
    e9dc:	9806      	ldr	r0, [sp, #24]
    e9de:	f003 f875 	bl	11acc <__sprint_r>
    e9e2:	2800      	cmp	r0, #0
    e9e4:	d101      	bne.n	e9ea <_vfprintf_r+0x14d6>
    e9e6:	f7ff faab 	bl	df40 <_vfprintf_r+0xa2c>
    e9ea:	f7ff faab 	bl	df44 <_vfprintf_r+0xa30>
    e9ee:	4642      	mov	r2, r8
    e9f0:	9207      	str	r2, [sp, #28]
    e9f2:	f7fe fe1b 	bl	d62c <_vfprintf_r+0x118>
    e9f6:	4244      	negs	r4, r0
    e9f8:	3010      	adds	r0, #16
    e9fa:	db00      	blt.n	e9fe <_vfprintf_r+0x14ea>
    e9fc:	e0d8      	b.n	ebb0 <_vfprintf_r+0x169c>
    e9fe:	4805      	ldr	r0, [pc, #20]	; (ea14 <_vfprintf_r+0x1500>)
    ea00:	2610      	movs	r6, #16
    ea02:	0005      	movs	r5, r0
    ea04:	e00c      	b.n	ea20 <_vfprintf_r+0x150c>
    ea06:	46c0      	nop			; (mov r8, r8)
    ea08:	0001258c 	.word	0x0001258c
    ea0c:	00012550 	.word	0x00012550
    ea10:	00012584 	.word	0x00012584
    ea14:	000125a0 	.word	0x000125a0
    ea18:	3208      	adds	r2, #8
    ea1a:	3c10      	subs	r4, #16
    ea1c:	2c10      	cmp	r4, #16
    ea1e:	dd51      	ble.n	eac4 <_vfprintf_r+0x15b0>
    ea20:	3110      	adds	r1, #16
    ea22:	3301      	adds	r3, #1
    ea24:	6015      	str	r5, [r2, #0]
    ea26:	6056      	str	r6, [r2, #4]
    ea28:	60b9      	str	r1, [r7, #8]
    ea2a:	607b      	str	r3, [r7, #4]
    ea2c:	2b07      	cmp	r3, #7
    ea2e:	ddf3      	ble.n	ea18 <_vfprintf_r+0x1504>
    ea30:	003a      	movs	r2, r7
    ea32:	4659      	mov	r1, fp
    ea34:	9806      	ldr	r0, [sp, #24]
    ea36:	f003 f849 	bl	11acc <__sprint_r>
    ea3a:	2800      	cmp	r0, #0
    ea3c:	d001      	beq.n	ea42 <_vfprintf_r+0x152e>
    ea3e:	f7ff faf9 	bl	e034 <_vfprintf_r+0xb20>
    ea42:	68b9      	ldr	r1, [r7, #8]
    ea44:	687b      	ldr	r3, [r7, #4]
    ea46:	aa32      	add	r2, sp, #200	; 0xc8
    ea48:	e7e7      	b.n	ea1a <_vfprintf_r+0x1506>
    ea4a:	003a      	movs	r2, r7
    ea4c:	4659      	mov	r1, fp
    ea4e:	9806      	ldr	r0, [sp, #24]
    ea50:	f003 f83c 	bl	11acc <__sprint_r>
    ea54:	2800      	cmp	r0, #0
    ea56:	d001      	beq.n	ea5c <_vfprintf_r+0x1548>
    ea58:	f7ff faec 	bl	e034 <_vfprintf_r+0xb20>
    ea5c:	981f      	ldr	r0, [sp, #124]	; 0x7c
    ea5e:	68b9      	ldr	r1, [r7, #8]
    ea60:	687b      	ldr	r3, [r7, #4]
    ea62:	aa32      	add	r2, sp, #200	; 0xc8
    ea64:	e62e      	b.n	e6c4 <_vfprintf_r+0x11b0>
    ea66:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    ea68:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    ea6a:	4694      	mov	ip, r2
    ea6c:	4463      	add	r3, ip
    ea6e:	001a      	movs	r2, r3
    ea70:	930e      	str	r3, [sp, #56]	; 0x38
    ea72:	e75d      	b.n	e930 <_vfprintf_r+0x141c>
    ea74:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    ea76:	e599      	b.n	e5ac <_vfprintf_r+0x1098>
    ea78:	212e      	movs	r1, #46	; 0x2e
    ea7a:	2330      	movs	r3, #48	; 0x30
    ea7c:	aa16      	add	r2, sp, #88	; 0x58
    ea7e:	1852      	adds	r2, r2, r1
    ea80:	7013      	strb	r3, [r2, #0]
    ea82:	002b      	movs	r3, r5
    ea84:	aa16      	add	r2, sp, #88	; 0x58
    ea86:	3101      	adds	r1, #1
    ea88:	3330      	adds	r3, #48	; 0x30
    ea8a:	1852      	adds	r2, r2, r1
    ea8c:	7013      	strb	r3, [r2, #0]
    ea8e:	ab22      	add	r3, sp, #136	; 0x88
    ea90:	e6c1      	b.n	e816 <_vfprintf_r+0x1302>
    ea92:	9b15      	ldr	r3, [sp, #84]	; 0x54
    ea94:	2b00      	cmp	r3, #0
    ea96:	db52      	blt.n	eb3e <_vfprintf_r+0x162a>
    ea98:	ab16      	add	r3, sp, #88	; 0x58
    ea9a:	7fdb      	ldrb	r3, [r3, #31]
    ea9c:	4698      	mov	r8, r3
    ea9e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    eaa0:	2b47      	cmp	r3, #71	; 0x47
    eaa2:	dc48      	bgt.n	eb36 <_vfprintf_r+0x1622>
    eaa4:	4b4e      	ldr	r3, [pc, #312]	; (ebe0 <_vfprintf_r+0x16cc>)
    eaa6:	9311      	str	r3, [sp, #68]	; 0x44
    eaa8:	f7ff f88c 	bl	dbc4 <_vfprintf_r+0x6b0>
    eaac:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    eaae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    eab0:	4694      	mov	ip, r2
    eab2:	4463      	add	r3, ip
    eab4:	4453      	add	r3, sl
    eab6:	001a      	movs	r2, r3
    eab8:	930e      	str	r3, [sp, #56]	; 0x38
    eaba:	43db      	mvns	r3, r3
    eabc:	17db      	asrs	r3, r3, #31
    eabe:	401a      	ands	r2, r3
    eac0:	9208      	str	r2, [sp, #32]
    eac2:	e595      	b.n	e5f0 <_vfprintf_r+0x10dc>
    eac4:	46a9      	mov	r9, r5
    eac6:	4648      	mov	r0, r9
    eac8:	1909      	adds	r1, r1, r4
    eaca:	3301      	adds	r3, #1
    eacc:	6010      	str	r0, [r2, #0]
    eace:	6054      	str	r4, [r2, #4]
    ead0:	60b9      	str	r1, [r7, #8]
    ead2:	3208      	adds	r2, #8
    ead4:	607b      	str	r3, [r7, #4]
    ead6:	2b07      	cmp	r3, #7
    ead8:	dc00      	bgt.n	eadc <_vfprintf_r+0x15c8>
    eada:	e5f6      	b.n	e6ca <_vfprintf_r+0x11b6>
    eadc:	003a      	movs	r2, r7
    eade:	4659      	mov	r1, fp
    eae0:	9806      	ldr	r0, [sp, #24]
    eae2:	f002 fff3 	bl	11acc <__sprint_r>
    eae6:	2800      	cmp	r0, #0
    eae8:	d001      	beq.n	eaee <_vfprintf_r+0x15da>
    eaea:	f7ff faa3 	bl	e034 <_vfprintf_r+0xb20>
    eaee:	68b9      	ldr	r1, [r7, #8]
    eaf0:	687b      	ldr	r3, [r7, #4]
    eaf2:	aa32      	add	r2, sp, #200	; 0xc8
    eaf4:	e5e9      	b.n	e6ca <_vfprintf_r+0x11b6>
    eaf6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    eaf8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    eafa:	1a98      	subs	r0, r3, r2
    eafc:	1c43      	adds	r3, r0, #1
    eafe:	001a      	movs	r2, r3
    eb00:	930e      	str	r3, [sp, #56]	; 0x38
    eb02:	e715      	b.n	e930 <_vfprintf_r+0x141c>
    eb04:	4a37      	ldr	r2, [pc, #220]	; (ebe4 <_vfprintf_r+0x16d0>)
    eb06:	687b      	ldr	r3, [r7, #4]
    eb08:	4691      	mov	r9, r2
    eb0a:	f7ff fbf5 	bl	e2f8 <_vfprintf_r+0xde4>
    eb0e:	2301      	movs	r3, #1
    eb10:	4023      	ands	r3, r4
    eb12:	9313      	str	r3, [sp, #76]	; 0x4c
    eb14:	d000      	beq.n	eb18 <_vfprintf_r+0x1604>
    eb16:	e689      	b.n	e82c <_vfprintf_r+0x1318>
    eb18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    eb1a:	43d3      	mvns	r3, r2
    eb1c:	17db      	asrs	r3, r3, #31
    eb1e:	401a      	ands	r2, r3
    eb20:	9208      	str	r2, [sp, #32]
    eb22:	e565      	b.n	e5f0 <_vfprintf_r+0x10dc>
    eb24:	2301      	movs	r3, #1
    eb26:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    eb28:	391b      	subs	r1, #27
    eb2a:	1a9d      	subs	r5, r3, r2
    eb2c:	aa16      	add	r2, sp, #88	; 0x58
    eb2e:	332c      	adds	r3, #44	; 0x2c
    eb30:	1852      	adds	r2, r2, r1
    eb32:	7013      	strb	r3, [r2, #0]
    eb34:	e62f      	b.n	e796 <_vfprintf_r+0x1282>
    eb36:	4b2c      	ldr	r3, [pc, #176]	; (ebe8 <_vfprintf_r+0x16d4>)
    eb38:	9311      	str	r3, [sp, #68]	; 0x44
    eb3a:	f7ff f843 	bl	dbc4 <_vfprintf_r+0x6b0>
    eb3e:	232d      	movs	r3, #45	; 0x2d
    eb40:	aa16      	add	r2, sp, #88	; 0x58
    eb42:	77d3      	strb	r3, [r2, #31]
    eb44:	4698      	mov	r8, r3
    eb46:	e7aa      	b.n	ea9e <_vfprintf_r+0x158a>
    eb48:	4653      	mov	r3, sl
    eb4a:	2b00      	cmp	r3, #0
    eb4c:	d101      	bne.n	eb52 <_vfprintf_r+0x163e>
    eb4e:	07e3      	lsls	r3, r4, #31
    eb50:	d503      	bpl.n	eb5a <_vfprintf_r+0x1646>
    eb52:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    eb54:	1c58      	adds	r0, r3, #1
    eb56:	0003      	movs	r3, r0
    eb58:	e7ac      	b.n	eab4 <_vfprintf_r+0x15a0>
    eb5a:	2301      	movs	r3, #1
    eb5c:	e708      	b.n	e970 <_vfprintf_r+0x145c>
    eb5e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    eb60:	9a11      	ldr	r2, [sp, #68]	; 0x44
    eb62:	1a9b      	subs	r3, r3, r2
    eb64:	9314      	str	r3, [sp, #80]	; 0x50
    eb66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    eb68:	2b47      	cmp	r3, #71	; 0x47
    eb6a:	d100      	bne.n	eb6e <_vfprintf_r+0x165a>
    eb6c:	e5f6      	b.n	e75c <_vfprintf_r+0x1248>
    eb6e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    eb70:	9313      	str	r3, [sp, #76]	; 0x4c
    eb72:	e5fd      	b.n	e770 <_vfprintf_r+0x125c>
    eb74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    eb76:	1d1d      	adds	r5, r3, #4
    eb78:	681b      	ldr	r3, [r3, #0]
    eb7a:	46a8      	mov	r8, r5
    eb7c:	469a      	mov	sl, r3
    eb7e:	2b00      	cmp	r3, #0
    eb80:	db0a      	blt.n	eb98 <_vfprintf_r+0x1684>
    eb82:	4645      	mov	r5, r8
    eb84:	9b07      	ldr	r3, [sp, #28]
    eb86:	950f      	str	r5, [sp, #60]	; 0x3c
    eb88:	785b      	ldrb	r3, [r3, #1]
    eb8a:	9207      	str	r2, [sp, #28]
    eb8c:	f7fe fd4b 	bl	d626 <_vfprintf_r+0x112>
    eb90:	ab16      	add	r3, sp, #88	; 0x58
    eb92:	77d8      	strb	r0, [r3, #31]
    eb94:	f7ff f830 	bl	dbf8 <_vfprintf_r+0x6e4>
    eb98:	2301      	movs	r3, #1
    eb9a:	425b      	negs	r3, r3
    eb9c:	469a      	mov	sl, r3
    eb9e:	e7f0      	b.n	eb82 <_vfprintf_r+0x166e>
    eba0:	ab16      	add	r3, sp, #88	; 0x58
    eba2:	77d8      	strb	r0, [r3, #31]
    eba4:	f7fe ff27 	bl	d9f6 <_vfprintf_r+0x4e2>
    eba8:	ab16      	add	r3, sp, #88	; 0x58
    ebaa:	77d8      	strb	r0, [r3, #31]
    ebac:	f7fe fdce 	bl	d74c <_vfprintf_r+0x238>
    ebb0:	480c      	ldr	r0, [pc, #48]	; (ebe4 <_vfprintf_r+0x16d0>)
    ebb2:	4681      	mov	r9, r0
    ebb4:	e787      	b.n	eac6 <_vfprintf_r+0x15b2>
    ebb6:	ab16      	add	r3, sp, #88	; 0x58
    ebb8:	77d8      	strb	r0, [r3, #31]
    ebba:	f7ff f829 	bl	dc10 <_vfprintf_r+0x6fc>
    ebbe:	ab16      	add	r3, sp, #88	; 0x58
    ebc0:	77d8      	strb	r0, [r3, #31]
    ebc2:	f7fe ffc3 	bl	db4c <_vfprintf_r+0x638>
    ebc6:	ab16      	add	r3, sp, #88	; 0x58
    ebc8:	77d8      	strb	r0, [r3, #31]
    ebca:	f7fe ffa5 	bl	db18 <_vfprintf_r+0x604>
    ebce:	ab16      	add	r3, sp, #88	; 0x58
    ebd0:	77d8      	strb	r0, [r3, #31]
    ebd2:	f7fe feaf 	bl	d934 <_vfprintf_r+0x420>
    ebd6:	aa16      	add	r2, sp, #88	; 0x58
    ebd8:	232e      	movs	r3, #46	; 0x2e
    ebda:	4694      	mov	ip, r2
    ebdc:	4463      	add	r3, ip
    ebde:	e61a      	b.n	e816 <_vfprintf_r+0x1302>
    ebe0:	00012554 	.word	0x00012554
    ebe4:	000125a0 	.word	0x000125a0
    ebe8:	00012558 	.word	0x00012558

0000ebec <__sbprintf>:
    ebec:	b5f0      	push	{r4, r5, r6, r7, lr}
    ebee:	0015      	movs	r5, r2
    ebf0:	2202      	movs	r2, #2
    ebf2:	4c1e      	ldr	r4, [pc, #120]	; (ec6c <__sbprintf+0x80>)
    ebf4:	001f      	movs	r7, r3
    ebf6:	898b      	ldrh	r3, [r1, #12]
    ebf8:	44a5      	add	sp, r4
    ebfa:	4393      	bics	r3, r2
    ebfc:	466a      	mov	r2, sp
    ebfe:	8193      	strh	r3, [r2, #12]
    ec00:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    ec02:	0006      	movs	r6, r0
    ec04:	9319      	str	r3, [sp, #100]	; 0x64
    ec06:	89cb      	ldrh	r3, [r1, #14]
    ec08:	a816      	add	r0, sp, #88	; 0x58
    ec0a:	81d3      	strh	r3, [r2, #14]
    ec0c:	69cb      	ldr	r3, [r1, #28]
    ec0e:	000c      	movs	r4, r1
    ec10:	9307      	str	r3, [sp, #28]
    ec12:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    ec14:	9309      	str	r3, [sp, #36]	; 0x24
    ec16:	ab1a      	add	r3, sp, #104	; 0x68
    ec18:	9300      	str	r3, [sp, #0]
    ec1a:	9304      	str	r3, [sp, #16]
    ec1c:	2380      	movs	r3, #128	; 0x80
    ec1e:	00db      	lsls	r3, r3, #3
    ec20:	9302      	str	r3, [sp, #8]
    ec22:	9305      	str	r3, [sp, #20]
    ec24:	2300      	movs	r3, #0
    ec26:	9306      	str	r3, [sp, #24]
    ec28:	f001 fdca 	bl	107c0 <__retarget_lock_init_recursive>
    ec2c:	002a      	movs	r2, r5
    ec2e:	003b      	movs	r3, r7
    ec30:	4669      	mov	r1, sp
    ec32:	0030      	movs	r0, r6
    ec34:	f7fe fc6e 	bl	d514 <_vfprintf_r>
    ec38:	1e05      	subs	r5, r0, #0
    ec3a:	db05      	blt.n	ec48 <__sbprintf+0x5c>
    ec3c:	4669      	mov	r1, sp
    ec3e:	0030      	movs	r0, r6
    ec40:	f001 fa26 	bl	10090 <_fflush_r>
    ec44:	2800      	cmp	r0, #0
    ec46:	d10e      	bne.n	ec66 <__sbprintf+0x7a>
    ec48:	466b      	mov	r3, sp
    ec4a:	899b      	ldrh	r3, [r3, #12]
    ec4c:	065b      	lsls	r3, r3, #25
    ec4e:	d503      	bpl.n	ec58 <__sbprintf+0x6c>
    ec50:	2240      	movs	r2, #64	; 0x40
    ec52:	89a3      	ldrh	r3, [r4, #12]
    ec54:	4313      	orrs	r3, r2
    ec56:	81a3      	strh	r3, [r4, #12]
    ec58:	9816      	ldr	r0, [sp, #88]	; 0x58
    ec5a:	f001 fdb3 	bl	107c4 <__retarget_lock_close_recursive>
    ec5e:	0028      	movs	r0, r5
    ec60:	4b03      	ldr	r3, [pc, #12]	; (ec70 <__sbprintf+0x84>)
    ec62:	449d      	add	sp, r3
    ec64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ec66:	2501      	movs	r5, #1
    ec68:	426d      	negs	r5, r5
    ec6a:	e7ed      	b.n	ec48 <__sbprintf+0x5c>
    ec6c:	fffffb94 	.word	0xfffffb94
    ec70:	0000046c 	.word	0x0000046c

0000ec74 <__swsetup_r>:
    ec74:	4b33      	ldr	r3, [pc, #204]	; (ed44 <__swsetup_r+0xd0>)
    ec76:	b570      	push	{r4, r5, r6, lr}
    ec78:	0005      	movs	r5, r0
    ec7a:	6818      	ldr	r0, [r3, #0]
    ec7c:	000c      	movs	r4, r1
    ec7e:	2800      	cmp	r0, #0
    ec80:	d002      	beq.n	ec88 <__swsetup_r+0x14>
    ec82:	6b83      	ldr	r3, [r0, #56]	; 0x38
    ec84:	2b00      	cmp	r3, #0
    ec86:	d03c      	beq.n	ed02 <__swsetup_r+0x8e>
    ec88:	230c      	movs	r3, #12
    ec8a:	5ee2      	ldrsh	r2, [r4, r3]
    ec8c:	b293      	uxth	r3, r2
    ec8e:	0719      	lsls	r1, r3, #28
    ec90:	d50d      	bpl.n	ecae <__swsetup_r+0x3a>
    ec92:	6921      	ldr	r1, [r4, #16]
    ec94:	2900      	cmp	r1, #0
    ec96:	d015      	beq.n	ecc4 <__swsetup_r+0x50>
    ec98:	07da      	lsls	r2, r3, #31
    ec9a:	d521      	bpl.n	ece0 <__swsetup_r+0x6c>
    ec9c:	2300      	movs	r3, #0
    ec9e:	60a3      	str	r3, [r4, #8]
    eca0:	6963      	ldr	r3, [r4, #20]
    eca2:	2000      	movs	r0, #0
    eca4:	425b      	negs	r3, r3
    eca6:	61a3      	str	r3, [r4, #24]
    eca8:	2900      	cmp	r1, #0
    ecaa:	d021      	beq.n	ecf0 <__swsetup_r+0x7c>
    ecac:	bd70      	pop	{r4, r5, r6, pc}
    ecae:	06d9      	lsls	r1, r3, #27
    ecb0:	d53f      	bpl.n	ed32 <__swsetup_r+0xbe>
    ecb2:	075b      	lsls	r3, r3, #29
    ecb4:	d428      	bmi.n	ed08 <__swsetup_r+0x94>
    ecb6:	6921      	ldr	r1, [r4, #16]
    ecb8:	2308      	movs	r3, #8
    ecba:	4313      	orrs	r3, r2
    ecbc:	81a3      	strh	r3, [r4, #12]
    ecbe:	b29b      	uxth	r3, r3
    ecc0:	2900      	cmp	r1, #0
    ecc2:	d1e9      	bne.n	ec98 <__swsetup_r+0x24>
    ecc4:	22a0      	movs	r2, #160	; 0xa0
    ecc6:	2080      	movs	r0, #128	; 0x80
    ecc8:	0092      	lsls	r2, r2, #2
    ecca:	0080      	lsls	r0, r0, #2
    eccc:	401a      	ands	r2, r3
    ecce:	4282      	cmp	r2, r0
    ecd0:	d0e2      	beq.n	ec98 <__swsetup_r+0x24>
    ecd2:	0021      	movs	r1, r4
    ecd4:	0028      	movs	r0, r5
    ecd6:	f001 fdab 	bl	10830 <__smakebuf_r>
    ecda:	89a3      	ldrh	r3, [r4, #12]
    ecdc:	6921      	ldr	r1, [r4, #16]
    ecde:	e7db      	b.n	ec98 <__swsetup_r+0x24>
    ece0:	2200      	movs	r2, #0
    ece2:	079b      	lsls	r3, r3, #30
    ece4:	d400      	bmi.n	ece8 <__swsetup_r+0x74>
    ece6:	6962      	ldr	r2, [r4, #20]
    ece8:	60a2      	str	r2, [r4, #8]
    ecea:	2000      	movs	r0, #0
    ecec:	2900      	cmp	r1, #0
    ecee:	d1dd      	bne.n	ecac <__swsetup_r+0x38>
    ecf0:	220c      	movs	r2, #12
    ecf2:	5ea3      	ldrsh	r3, [r4, r2]
    ecf4:	061a      	lsls	r2, r3, #24
    ecf6:	d5d9      	bpl.n	ecac <__swsetup_r+0x38>
    ecf8:	2240      	movs	r2, #64	; 0x40
    ecfa:	4313      	orrs	r3, r2
    ecfc:	81a3      	strh	r3, [r4, #12]
    ecfe:	3801      	subs	r0, #1
    ed00:	e7d4      	b.n	ecac <__swsetup_r+0x38>
    ed02:	f001 fa1f 	bl	10144 <__sinit>
    ed06:	e7bf      	b.n	ec88 <__swsetup_r+0x14>
    ed08:	6b21      	ldr	r1, [r4, #48]	; 0x30
    ed0a:	2900      	cmp	r1, #0
    ed0c:	d00a      	beq.n	ed24 <__swsetup_r+0xb0>
    ed0e:	0023      	movs	r3, r4
    ed10:	3340      	adds	r3, #64	; 0x40
    ed12:	4299      	cmp	r1, r3
    ed14:	d004      	beq.n	ed20 <__swsetup_r+0xac>
    ed16:	0028      	movs	r0, r5
    ed18:	f001 fabe 	bl	10298 <_free_r>
    ed1c:	230c      	movs	r3, #12
    ed1e:	5ee2      	ldrsh	r2, [r4, r3]
    ed20:	2300      	movs	r3, #0
    ed22:	6323      	str	r3, [r4, #48]	; 0x30
    ed24:	2324      	movs	r3, #36	; 0x24
    ed26:	439a      	bics	r2, r3
    ed28:	2300      	movs	r3, #0
    ed2a:	6921      	ldr	r1, [r4, #16]
    ed2c:	6063      	str	r3, [r4, #4]
    ed2e:	6021      	str	r1, [r4, #0]
    ed30:	e7c2      	b.n	ecb8 <__swsetup_r+0x44>
    ed32:	2309      	movs	r3, #9
    ed34:	602b      	str	r3, [r5, #0]
    ed36:	2340      	movs	r3, #64	; 0x40
    ed38:	2001      	movs	r0, #1
    ed3a:	431a      	orrs	r2, r3
    ed3c:	81a2      	strh	r2, [r4, #12]
    ed3e:	4240      	negs	r0, r0
    ed40:	e7b4      	b.n	ecac <__swsetup_r+0x38>
    ed42:	46c0      	nop			; (mov r8, r8)
    ed44:	20000084 	.word	0x20000084

0000ed48 <__register_exitproc>:
    ed48:	b5f0      	push	{r4, r5, r6, r7, lr}
    ed4a:	464e      	mov	r6, r9
    ed4c:	4645      	mov	r5, r8
    ed4e:	46de      	mov	lr, fp
    ed50:	4657      	mov	r7, sl
    ed52:	b5e0      	push	{r5, r6, r7, lr}
    ed54:	4d36      	ldr	r5, [pc, #216]	; (ee30 <__register_exitproc+0xe8>)
    ed56:	b083      	sub	sp, #12
    ed58:	0006      	movs	r6, r0
    ed5a:	6828      	ldr	r0, [r5, #0]
    ed5c:	4698      	mov	r8, r3
    ed5e:	000f      	movs	r7, r1
    ed60:	4691      	mov	r9, r2
    ed62:	f001 fd31 	bl	107c8 <__retarget_lock_acquire_recursive>
    ed66:	4b33      	ldr	r3, [pc, #204]	; (ee34 <__register_exitproc+0xec>)
    ed68:	681c      	ldr	r4, [r3, #0]
    ed6a:	23a4      	movs	r3, #164	; 0xa4
    ed6c:	005b      	lsls	r3, r3, #1
    ed6e:	58e0      	ldr	r0, [r4, r3]
    ed70:	2800      	cmp	r0, #0
    ed72:	d052      	beq.n	ee1a <__register_exitproc+0xd2>
    ed74:	6843      	ldr	r3, [r0, #4]
    ed76:	2b1f      	cmp	r3, #31
    ed78:	dc13      	bgt.n	eda2 <__register_exitproc+0x5a>
    ed7a:	1c5a      	adds	r2, r3, #1
    ed7c:	9201      	str	r2, [sp, #4]
    ed7e:	2e00      	cmp	r6, #0
    ed80:	d128      	bne.n	edd4 <__register_exitproc+0x8c>
    ed82:	9a01      	ldr	r2, [sp, #4]
    ed84:	3302      	adds	r3, #2
    ed86:	009b      	lsls	r3, r3, #2
    ed88:	6042      	str	r2, [r0, #4]
    ed8a:	501f      	str	r7, [r3, r0]
    ed8c:	6828      	ldr	r0, [r5, #0]
    ed8e:	f001 fd1d 	bl	107cc <__retarget_lock_release_recursive>
    ed92:	2000      	movs	r0, #0
    ed94:	b003      	add	sp, #12
    ed96:	bc3c      	pop	{r2, r3, r4, r5}
    ed98:	4690      	mov	r8, r2
    ed9a:	4699      	mov	r9, r3
    ed9c:	46a2      	mov	sl, r4
    ed9e:	46ab      	mov	fp, r5
    eda0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eda2:	4b25      	ldr	r3, [pc, #148]	; (ee38 <__register_exitproc+0xf0>)
    eda4:	2b00      	cmp	r3, #0
    eda6:	d03d      	beq.n	ee24 <__register_exitproc+0xdc>
    eda8:	20c8      	movs	r0, #200	; 0xc8
    edaa:	0040      	lsls	r0, r0, #1
    edac:	f001 fd88 	bl	108c0 <malloc>
    edb0:	2800      	cmp	r0, #0
    edb2:	d037      	beq.n	ee24 <__register_exitproc+0xdc>
    edb4:	22a4      	movs	r2, #164	; 0xa4
    edb6:	2300      	movs	r3, #0
    edb8:	0052      	lsls	r2, r2, #1
    edba:	58a1      	ldr	r1, [r4, r2]
    edbc:	6043      	str	r3, [r0, #4]
    edbe:	6001      	str	r1, [r0, #0]
    edc0:	50a0      	str	r0, [r4, r2]
    edc2:	3240      	adds	r2, #64	; 0x40
    edc4:	5083      	str	r3, [r0, r2]
    edc6:	3204      	adds	r2, #4
    edc8:	5083      	str	r3, [r0, r2]
    edca:	3301      	adds	r3, #1
    edcc:	9301      	str	r3, [sp, #4]
    edce:	2300      	movs	r3, #0
    edd0:	2e00      	cmp	r6, #0
    edd2:	d0d6      	beq.n	ed82 <__register_exitproc+0x3a>
    edd4:	009a      	lsls	r2, r3, #2
    edd6:	4692      	mov	sl, r2
    edd8:	4482      	add	sl, r0
    edda:	464a      	mov	r2, r9
    eddc:	2188      	movs	r1, #136	; 0x88
    edde:	4654      	mov	r4, sl
    ede0:	5062      	str	r2, [r4, r1]
    ede2:	22c4      	movs	r2, #196	; 0xc4
    ede4:	0052      	lsls	r2, r2, #1
    ede6:	4691      	mov	r9, r2
    ede8:	4481      	add	r9, r0
    edea:	464a      	mov	r2, r9
    edec:	3987      	subs	r1, #135	; 0x87
    edee:	4099      	lsls	r1, r3
    edf0:	6812      	ldr	r2, [r2, #0]
    edf2:	468b      	mov	fp, r1
    edf4:	430a      	orrs	r2, r1
    edf6:	4694      	mov	ip, r2
    edf8:	464a      	mov	r2, r9
    edfa:	4661      	mov	r1, ip
    edfc:	6011      	str	r1, [r2, #0]
    edfe:	2284      	movs	r2, #132	; 0x84
    ee00:	4641      	mov	r1, r8
    ee02:	0052      	lsls	r2, r2, #1
    ee04:	50a1      	str	r1, [r4, r2]
    ee06:	2e02      	cmp	r6, #2
    ee08:	d1bb      	bne.n	ed82 <__register_exitproc+0x3a>
    ee0a:	0002      	movs	r2, r0
    ee0c:	465c      	mov	r4, fp
    ee0e:	328d      	adds	r2, #141	; 0x8d
    ee10:	32ff      	adds	r2, #255	; 0xff
    ee12:	6811      	ldr	r1, [r2, #0]
    ee14:	430c      	orrs	r4, r1
    ee16:	6014      	str	r4, [r2, #0]
    ee18:	e7b3      	b.n	ed82 <__register_exitproc+0x3a>
    ee1a:	0020      	movs	r0, r4
    ee1c:	304d      	adds	r0, #77	; 0x4d
    ee1e:	30ff      	adds	r0, #255	; 0xff
    ee20:	50e0      	str	r0, [r4, r3]
    ee22:	e7a7      	b.n	ed74 <__register_exitproc+0x2c>
    ee24:	6828      	ldr	r0, [r5, #0]
    ee26:	f001 fcd1 	bl	107cc <__retarget_lock_release_recursive>
    ee2a:	2001      	movs	r0, #1
    ee2c:	4240      	negs	r0, r0
    ee2e:	e7b1      	b.n	ed94 <__register_exitproc+0x4c>
    ee30:	200004b0 	.word	0x200004b0
    ee34:	000123e0 	.word	0x000123e0
    ee38:	000108c1 	.word	0x000108c1

0000ee3c <register_fini>:
    ee3c:	4b03      	ldr	r3, [pc, #12]	; (ee4c <register_fini+0x10>)
    ee3e:	b510      	push	{r4, lr}
    ee40:	2b00      	cmp	r3, #0
    ee42:	d002      	beq.n	ee4a <register_fini+0xe>
    ee44:	4802      	ldr	r0, [pc, #8]	; (ee50 <register_fini+0x14>)
    ee46:	f000 f805 	bl	ee54 <atexit>
    ee4a:	bd10      	pop	{r4, pc}
    ee4c:	00000000 	.word	0x00000000
    ee50:	000101c5 	.word	0x000101c5

0000ee54 <atexit>:
    ee54:	b510      	push	{r4, lr}
    ee56:	0001      	movs	r1, r0
    ee58:	2300      	movs	r3, #0
    ee5a:	2200      	movs	r2, #0
    ee5c:	2000      	movs	r0, #0
    ee5e:	f7ff ff73 	bl	ed48 <__register_exitproc>
    ee62:	bd10      	pop	{r4, pc}

0000ee64 <quorem>:
    ee64:	b5f0      	push	{r4, r5, r6, r7, lr}
    ee66:	4645      	mov	r5, r8
    ee68:	4680      	mov	r8, r0
    ee6a:	46de      	mov	lr, fp
    ee6c:	4657      	mov	r7, sl
    ee6e:	464e      	mov	r6, r9
    ee70:	4642      	mov	r2, r8
    ee72:	b5e0      	push	{r5, r6, r7, lr}
    ee74:	690c      	ldr	r4, [r1, #16]
    ee76:	6912      	ldr	r2, [r2, #16]
    ee78:	b085      	sub	sp, #20
    ee7a:	000b      	movs	r3, r1
    ee7c:	9102      	str	r1, [sp, #8]
    ee7e:	2000      	movs	r0, #0
    ee80:	4294      	cmp	r4, r2
    ee82:	dd00      	ble.n	ee86 <quorem+0x22>
    ee84:	e090      	b.n	efa8 <quorem+0x144>
    ee86:	2214      	movs	r2, #20
    ee88:	4694      	mov	ip, r2
    ee8a:	4463      	add	r3, ip
    ee8c:	4699      	mov	r9, r3
    ee8e:	464a      	mov	r2, r9
    ee90:	3c01      	subs	r4, #1
    ee92:	00a3      	lsls	r3, r4, #2
    ee94:	18d6      	adds	r6, r2, r3
    ee96:	2214      	movs	r2, #20
    ee98:	4442      	add	r2, r8
    ee9a:	4693      	mov	fp, r2
    ee9c:	449b      	add	fp, r3
    ee9e:	6833      	ldr	r3, [r6, #0]
    eea0:	0015      	movs	r5, r2
    eea2:	1c59      	adds	r1, r3, #1
    eea4:	465b      	mov	r3, fp
    eea6:	6818      	ldr	r0, [r3, #0]
    eea8:	9201      	str	r2, [sp, #4]
    eeaa:	f7fb faa7 	bl	a3fc <__udivsi3>
    eeae:	1e03      	subs	r3, r0, #0
    eeb0:	9000      	str	r0, [sp, #0]
    eeb2:	d042      	beq.n	ef3a <quorem+0xd6>
    eeb4:	0029      	movs	r1, r5
    eeb6:	2700      	movs	r7, #0
    eeb8:	464d      	mov	r5, r9
    eeba:	2000      	movs	r0, #0
    eebc:	46b1      	mov	r9, r6
    eebe:	46a2      	mov	sl, r4
    eec0:	003e      	movs	r6, r7
    eec2:	0004      	movs	r4, r0
    eec4:	469c      	mov	ip, r3
    eec6:	002f      	movs	r7, r5
    eec8:	0008      	movs	r0, r1
    eeca:	9503      	str	r5, [sp, #12]
    eecc:	4663      	mov	r3, ip
    eece:	cf04      	ldmia	r7!, {r2}
    eed0:	0415      	lsls	r5, r2, #16
    eed2:	0c2d      	lsrs	r5, r5, #16
    eed4:	435d      	muls	r5, r3
    eed6:	0c12      	lsrs	r2, r2, #16
    eed8:	435a      	muls	r2, r3
    eeda:	19ad      	adds	r5, r5, r6
    eedc:	0c2b      	lsrs	r3, r5, #16
    eede:	18d2      	adds	r2, r2, r3
    eee0:	6803      	ldr	r3, [r0, #0]
    eee2:	042d      	lsls	r5, r5, #16
    eee4:	0419      	lsls	r1, r3, #16
    eee6:	0c09      	lsrs	r1, r1, #16
    eee8:	1909      	adds	r1, r1, r4
    eeea:	0c16      	lsrs	r6, r2, #16
    eeec:	0c2d      	lsrs	r5, r5, #16
    eeee:	0412      	lsls	r2, r2, #16
    eef0:	1b49      	subs	r1, r1, r5
    eef2:	0c12      	lsrs	r2, r2, #16
    eef4:	0c1b      	lsrs	r3, r3, #16
    eef6:	1a9b      	subs	r3, r3, r2
    eef8:	140a      	asrs	r2, r1, #16
    eefa:	189b      	adds	r3, r3, r2
    eefc:	0409      	lsls	r1, r1, #16
    eefe:	141c      	asrs	r4, r3, #16
    ef00:	0c09      	lsrs	r1, r1, #16
    ef02:	041b      	lsls	r3, r3, #16
    ef04:	4319      	orrs	r1, r3
    ef06:	c002      	stmia	r0!, {r1}
    ef08:	45b9      	cmp	r9, r7
    ef0a:	d2df      	bcs.n	eecc <quorem+0x68>
    ef0c:	9b03      	ldr	r3, [sp, #12]
    ef0e:	464e      	mov	r6, r9
    ef10:	4699      	mov	r9, r3
    ef12:	465b      	mov	r3, fp
    ef14:	681b      	ldr	r3, [r3, #0]
    ef16:	4654      	mov	r4, sl
    ef18:	2b00      	cmp	r3, #0
    ef1a:	d10e      	bne.n	ef3a <quorem+0xd6>
    ef1c:	465b      	mov	r3, fp
    ef1e:	9a01      	ldr	r2, [sp, #4]
    ef20:	3b04      	subs	r3, #4
    ef22:	429a      	cmp	r2, r3
    ef24:	d304      	bcc.n	ef30 <quorem+0xcc>
    ef26:	e006      	b.n	ef36 <quorem+0xd2>
    ef28:	3b04      	subs	r3, #4
    ef2a:	3c01      	subs	r4, #1
    ef2c:	429a      	cmp	r2, r3
    ef2e:	d202      	bcs.n	ef36 <quorem+0xd2>
    ef30:	6819      	ldr	r1, [r3, #0]
    ef32:	2900      	cmp	r1, #0
    ef34:	d0f8      	beq.n	ef28 <quorem+0xc4>
    ef36:	4643      	mov	r3, r8
    ef38:	611c      	str	r4, [r3, #16]
    ef3a:	9902      	ldr	r1, [sp, #8]
    ef3c:	4640      	mov	r0, r8
    ef3e:	f002 fa51 	bl	113e4 <__mcmp>
    ef42:	2800      	cmp	r0, #0
    ef44:	db2f      	blt.n	efa6 <quorem+0x142>
    ef46:	464f      	mov	r7, r9
    ef48:	2000      	movs	r0, #0
    ef4a:	9b00      	ldr	r3, [sp, #0]
    ef4c:	9d01      	ldr	r5, [sp, #4]
    ef4e:	3301      	adds	r3, #1
    ef50:	9300      	str	r3, [sp, #0]
    ef52:	682b      	ldr	r3, [r5, #0]
    ef54:	cf02      	ldmia	r7!, {r1}
    ef56:	041a      	lsls	r2, r3, #16
    ef58:	0c12      	lsrs	r2, r2, #16
    ef5a:	1810      	adds	r0, r2, r0
    ef5c:	040a      	lsls	r2, r1, #16
    ef5e:	0c12      	lsrs	r2, r2, #16
    ef60:	1a82      	subs	r2, r0, r2
    ef62:	0c09      	lsrs	r1, r1, #16
    ef64:	0c1b      	lsrs	r3, r3, #16
    ef66:	1a5b      	subs	r3, r3, r1
    ef68:	1411      	asrs	r1, r2, #16
    ef6a:	185b      	adds	r3, r3, r1
    ef6c:	0412      	lsls	r2, r2, #16
    ef6e:	1418      	asrs	r0, r3, #16
    ef70:	0c12      	lsrs	r2, r2, #16
    ef72:	041b      	lsls	r3, r3, #16
    ef74:	4313      	orrs	r3, r2
    ef76:	c508      	stmia	r5!, {r3}
    ef78:	42be      	cmp	r6, r7
    ef7a:	d2ea      	bcs.n	ef52 <quorem+0xee>
    ef7c:	9901      	ldr	r1, [sp, #4]
    ef7e:	00a3      	lsls	r3, r4, #2
    ef80:	468c      	mov	ip, r1
    ef82:	4463      	add	r3, ip
    ef84:	681a      	ldr	r2, [r3, #0]
    ef86:	2a00      	cmp	r2, #0
    ef88:	d10d      	bne.n	efa6 <quorem+0x142>
    ef8a:	3b04      	subs	r3, #4
    ef8c:	000a      	movs	r2, r1
    ef8e:	4299      	cmp	r1, r3
    ef90:	d304      	bcc.n	ef9c <quorem+0x138>
    ef92:	e006      	b.n	efa2 <quorem+0x13e>
    ef94:	3b04      	subs	r3, #4
    ef96:	3c01      	subs	r4, #1
    ef98:	429a      	cmp	r2, r3
    ef9a:	d202      	bcs.n	efa2 <quorem+0x13e>
    ef9c:	6819      	ldr	r1, [r3, #0]
    ef9e:	2900      	cmp	r1, #0
    efa0:	d0f8      	beq.n	ef94 <quorem+0x130>
    efa2:	4643      	mov	r3, r8
    efa4:	611c      	str	r4, [r3, #16]
    efa6:	9800      	ldr	r0, [sp, #0]
    efa8:	b005      	add	sp, #20
    efaa:	bc3c      	pop	{r2, r3, r4, r5}
    efac:	4690      	mov	r8, r2
    efae:	4699      	mov	r9, r3
    efb0:	46a2      	mov	sl, r4
    efb2:	46ab      	mov	fp, r5
    efb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    efb6:	46c0      	nop			; (mov r8, r8)

0000efb8 <_dtoa_r>:
    efb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    efba:	4657      	mov	r7, sl
    efbc:	464e      	mov	r6, r9
    efbe:	4645      	mov	r5, r8
    efc0:	46de      	mov	lr, fp
    efc2:	b5e0      	push	{r5, r6, r7, lr}
    efc4:	6c01      	ldr	r1, [r0, #64]	; 0x40
    efc6:	b099      	sub	sp, #100	; 0x64
    efc8:	4682      	mov	sl, r0
    efca:	001d      	movs	r5, r3
    efcc:	0016      	movs	r6, r2
    efce:	001f      	movs	r7, r3
    efd0:	2900      	cmp	r1, #0
    efd2:	d009      	beq.n	efe8 <_dtoa_r+0x30>
    efd4:	2301      	movs	r3, #1
    efd6:	6c42      	ldr	r2, [r0, #68]	; 0x44
    efd8:	4093      	lsls	r3, r2
    efda:	604a      	str	r2, [r1, #4]
    efdc:	608b      	str	r3, [r1, #8]
    efde:	f001 fff5 	bl	10fcc <_Bfree>
    efe2:	2300      	movs	r3, #0
    efe4:	4652      	mov	r2, sl
    efe6:	6413      	str	r3, [r2, #64]	; 0x40
    efe8:	46b8      	mov	r8, r7
    efea:	2f00      	cmp	r7, #0
    efec:	db37      	blt.n	f05e <_dtoa_r+0xa6>
    efee:	2300      	movs	r3, #0
    eff0:	9a25      	ldr	r2, [sp, #148]	; 0x94
    eff2:	6013      	str	r3, [r2, #0]
    eff4:	4642      	mov	r2, r8
    eff6:	4bd6      	ldr	r3, [pc, #856]	; (f350 <_dtoa_r+0x398>)
    eff8:	401a      	ands	r2, r3
    effa:	429a      	cmp	r2, r3
    effc:	d018      	beq.n	f030 <_dtoa_r+0x78>
    effe:	2200      	movs	r2, #0
    f000:	2300      	movs	r3, #0
    f002:	0030      	movs	r0, r6
    f004:	0039      	movs	r1, r7
    f006:	f7fb fb7f 	bl	a708 <__aeabi_dcmpeq>
    f00a:	2800      	cmp	r0, #0
    f00c:	d02f      	beq.n	f06e <_dtoa_r+0xb6>
    f00e:	2301      	movs	r3, #1
    f010:	9a24      	ldr	r2, [sp, #144]	; 0x90
    f012:	6013      	str	r3, [r2, #0]
    f014:	9b26      	ldr	r3, [sp, #152]	; 0x98
    f016:	2b00      	cmp	r3, #0
    f018:	d100      	bne.n	f01c <_dtoa_r+0x64>
    f01a:	e22a      	b.n	f472 <_dtoa_r+0x4ba>
    f01c:	48cd      	ldr	r0, [pc, #820]	; (f354 <_dtoa_r+0x39c>)
    f01e:	6018      	str	r0, [r3, #0]
    f020:	3801      	subs	r0, #1
    f022:	b019      	add	sp, #100	; 0x64
    f024:	bc3c      	pop	{r2, r3, r4, r5}
    f026:	4690      	mov	r8, r2
    f028:	4699      	mov	r9, r3
    f02a:	46a2      	mov	sl, r4
    f02c:	46ab      	mov	fp, r5
    f02e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f030:	4bc9      	ldr	r3, [pc, #804]	; (f358 <_dtoa_r+0x3a0>)
    f032:	9a24      	ldr	r2, [sp, #144]	; 0x90
    f034:	6013      	str	r3, [r2, #0]
    f036:	2e00      	cmp	r6, #0
    f038:	d10b      	bne.n	f052 <_dtoa_r+0x9a>
    f03a:	4643      	mov	r3, r8
    f03c:	0318      	lsls	r0, r3, #12
    f03e:	d108      	bne.n	f052 <_dtoa_r+0x9a>
    f040:	9b26      	ldr	r3, [sp, #152]	; 0x98
    f042:	48c6      	ldr	r0, [pc, #792]	; (f35c <_dtoa_r+0x3a4>)
    f044:	2b00      	cmp	r3, #0
    f046:	d0ec      	beq.n	f022 <_dtoa_r+0x6a>
    f048:	0003      	movs	r3, r0
    f04a:	3308      	adds	r3, #8
    f04c:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f04e:	6013      	str	r3, [r2, #0]
    f050:	e7e7      	b.n	f022 <_dtoa_r+0x6a>
    f052:	9b26      	ldr	r3, [sp, #152]	; 0x98
    f054:	48c2      	ldr	r0, [pc, #776]	; (f360 <_dtoa_r+0x3a8>)
    f056:	2b00      	cmp	r3, #0
    f058:	d0e3      	beq.n	f022 <_dtoa_r+0x6a>
    f05a:	1cc3      	adds	r3, r0, #3
    f05c:	e7f6      	b.n	f04c <_dtoa_r+0x94>
    f05e:	2301      	movs	r3, #1
    f060:	9a25      	ldr	r2, [sp, #148]	; 0x94
    f062:	0068      	lsls	r0, r5, #1
    f064:	6013      	str	r3, [r2, #0]
    f066:	0843      	lsrs	r3, r0, #1
    f068:	4698      	mov	r8, r3
    f06a:	001f      	movs	r7, r3
    f06c:	e7c2      	b.n	eff4 <_dtoa_r+0x3c>
    f06e:	ab16      	add	r3, sp, #88	; 0x58
    f070:	9301      	str	r3, [sp, #4]
    f072:	ab17      	add	r3, sp, #92	; 0x5c
    f074:	9300      	str	r3, [sp, #0]
    f076:	0032      	movs	r2, r6
    f078:	003b      	movs	r3, r7
    f07a:	4650      	mov	r0, sl
    f07c:	f002 fa68 	bl	11550 <__d2b>
    f080:	4643      	mov	r3, r8
    f082:	4683      	mov	fp, r0
    f084:	0d1a      	lsrs	r2, r3, #20
    f086:	d100      	bne.n	f08a <_dtoa_r+0xd2>
    f088:	e1d6      	b.n	f438 <_dtoa_r+0x480>
    f08a:	033b      	lsls	r3, r7, #12
    f08c:	4cb5      	ldr	r4, [pc, #724]	; (f364 <_dtoa_r+0x3ac>)
    f08e:	0b1b      	lsrs	r3, r3, #12
    f090:	431c      	orrs	r4, r3
    f092:	4bb5      	ldr	r3, [pc, #724]	; (f368 <_dtoa_r+0x3b0>)
    f094:	0030      	movs	r0, r6
    f096:	4698      	mov	r8, r3
    f098:	9b16      	ldr	r3, [sp, #88]	; 0x58
    f09a:	0021      	movs	r1, r4
    f09c:	4699      	mov	r9, r3
    f09e:	2300      	movs	r3, #0
    f0a0:	4490      	add	r8, r2
    f0a2:	930f      	str	r3, [sp, #60]	; 0x3c
    f0a4:	2200      	movs	r2, #0
    f0a6:	4bb1      	ldr	r3, [pc, #708]	; (f36c <_dtoa_r+0x3b4>)
    f0a8:	f7fd fb9e 	bl	c7e8 <__aeabi_dsub>
    f0ac:	4ab0      	ldr	r2, [pc, #704]	; (f370 <_dtoa_r+0x3b8>)
    f0ae:	4bb1      	ldr	r3, [pc, #708]	; (f374 <_dtoa_r+0x3bc>)
    f0b0:	f7fd f91a 	bl	c2e8 <__aeabi_dmul>
    f0b4:	4ab0      	ldr	r2, [pc, #704]	; (f378 <_dtoa_r+0x3c0>)
    f0b6:	4bb1      	ldr	r3, [pc, #708]	; (f37c <_dtoa_r+0x3c4>)
    f0b8:	f7fc f9d2 	bl	b460 <__aeabi_dadd>
    f0bc:	0004      	movs	r4, r0
    f0be:	4640      	mov	r0, r8
    f0c0:	000d      	movs	r5, r1
    f0c2:	f7fd fefb 	bl	cebc <__aeabi_i2d>
    f0c6:	4aae      	ldr	r2, [pc, #696]	; (f380 <_dtoa_r+0x3c8>)
    f0c8:	4bae      	ldr	r3, [pc, #696]	; (f384 <_dtoa_r+0x3cc>)
    f0ca:	f7fd f90d 	bl	c2e8 <__aeabi_dmul>
    f0ce:	0002      	movs	r2, r0
    f0d0:	000b      	movs	r3, r1
    f0d2:	0020      	movs	r0, r4
    f0d4:	0029      	movs	r1, r5
    f0d6:	f7fc f9c3 	bl	b460 <__aeabi_dadd>
    f0da:	0004      	movs	r4, r0
    f0dc:	000d      	movs	r5, r1
    f0de:	f7fd feb9 	bl	ce54 <__aeabi_d2iz>
    f0e2:	2200      	movs	r2, #0
    f0e4:	9003      	str	r0, [sp, #12]
    f0e6:	2300      	movs	r3, #0
    f0e8:	0020      	movs	r0, r4
    f0ea:	0029      	movs	r1, r5
    f0ec:	f7fb fb12 	bl	a714 <__aeabi_dcmplt>
    f0f0:	2800      	cmp	r0, #0
    f0f2:	d000      	beq.n	f0f6 <_dtoa_r+0x13e>
    f0f4:	e2b1      	b.n	f65a <_dtoa_r+0x6a2>
    f0f6:	2301      	movs	r3, #1
    f0f8:	9c03      	ldr	r4, [sp, #12]
    f0fa:	930c      	str	r3, [sp, #48]	; 0x30
    f0fc:	2c16      	cmp	r4, #22
    f0fe:	d810      	bhi.n	f122 <_dtoa_r+0x16a>
    f100:	49a1      	ldr	r1, [pc, #644]	; (f388 <_dtoa_r+0x3d0>)
    f102:	00e3      	lsls	r3, r4, #3
    f104:	18c9      	adds	r1, r1, r3
    f106:	0032      	movs	r2, r6
    f108:	6808      	ldr	r0, [r1, #0]
    f10a:	6849      	ldr	r1, [r1, #4]
    f10c:	003b      	movs	r3, r7
    f10e:	f7fb fb15 	bl	a73c <__aeabi_dcmpgt>
    f112:	2800      	cmp	r0, #0
    f114:	d100      	bne.n	f118 <_dtoa_r+0x160>
    f116:	e31d      	b.n	f754 <_dtoa_r+0x79c>
    f118:	0023      	movs	r3, r4
    f11a:	3b01      	subs	r3, #1
    f11c:	9303      	str	r3, [sp, #12]
    f11e:	2300      	movs	r3, #0
    f120:	930c      	str	r3, [sp, #48]	; 0x30
    f122:	464b      	mov	r3, r9
    f124:	4642      	mov	r2, r8
    f126:	1a9a      	subs	r2, r3, r2
    f128:	2300      	movs	r3, #0
    f12a:	9306      	str	r3, [sp, #24]
    f12c:	0013      	movs	r3, r2
    f12e:	3b01      	subs	r3, #1
    f130:	9304      	str	r3, [sp, #16]
    f132:	d500      	bpl.n	f136 <_dtoa_r+0x17e>
    f134:	e2a1      	b.n	f67a <_dtoa_r+0x6c2>
    f136:	9b03      	ldr	r3, [sp, #12]
    f138:	2b00      	cmp	r3, #0
    f13a:	da00      	bge.n	f13e <_dtoa_r+0x186>
    f13c:	e284      	b.n	f648 <_dtoa_r+0x690>
    f13e:	469c      	mov	ip, r3
    f140:	930d      	str	r3, [sp, #52]	; 0x34
    f142:	2300      	movs	r3, #0
    f144:	9a04      	ldr	r2, [sp, #16]
    f146:	4699      	mov	r9, r3
    f148:	0011      	movs	r1, r2
    f14a:	4461      	add	r1, ip
    f14c:	9104      	str	r1, [sp, #16]
    f14e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    f150:	2b09      	cmp	r3, #9
    f152:	d900      	bls.n	f156 <_dtoa_r+0x19e>
    f154:	e18f      	b.n	f476 <_dtoa_r+0x4be>
    f156:	2401      	movs	r4, #1
    f158:	2b05      	cmp	r3, #5
    f15a:	dd02      	ble.n	f162 <_dtoa_r+0x1aa>
    f15c:	2400      	movs	r4, #0
    f15e:	3b04      	subs	r3, #4
    f160:	9322      	str	r3, [sp, #136]	; 0x88
    f162:	9b22      	ldr	r3, [sp, #136]	; 0x88
    f164:	2b03      	cmp	r3, #3
    f166:	d101      	bne.n	f16c <_dtoa_r+0x1b4>
    f168:	f000 fcce 	bl	fb08 <_dtoa_r+0xb50>
    f16c:	dc01      	bgt.n	f172 <_dtoa_r+0x1ba>
    f16e:	f000 fc92 	bl	fa96 <_dtoa_r+0xade>
    f172:	9b22      	ldr	r3, [sp, #136]	; 0x88
    f174:	2b04      	cmp	r3, #4
    f176:	d101      	bne.n	f17c <_dtoa_r+0x1c4>
    f178:	f000 fc40 	bl	f9fc <_dtoa_r+0xa44>
    f17c:	2301      	movs	r3, #1
    f17e:	930b      	str	r3, [sp, #44]	; 0x2c
    f180:	9b22      	ldr	r3, [sp, #136]	; 0x88
    f182:	2b05      	cmp	r3, #5
    f184:	d001      	beq.n	f18a <_dtoa_r+0x1d2>
    f186:	f000 fc8b 	bl	faa0 <_dtoa_r+0xae8>
    f18a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    f18c:	9b03      	ldr	r3, [sp, #12]
    f18e:	4694      	mov	ip, r2
    f190:	4463      	add	r3, ip
    f192:	930e      	str	r3, [sp, #56]	; 0x38
    f194:	3301      	adds	r3, #1
    f196:	9307      	str	r3, [sp, #28]
    f198:	1e1d      	subs	r5, r3, #0
    f19a:	dc01      	bgt.n	f1a0 <_dtoa_r+0x1e8>
    f19c:	f000 fd49 	bl	fc32 <_dtoa_r+0xc7a>
    f1a0:	9b07      	ldr	r3, [sp, #28]
    f1a2:	4698      	mov	r8, r3
    f1a4:	2300      	movs	r3, #0
    f1a6:	4652      	mov	r2, sl
    f1a8:	2100      	movs	r1, #0
    f1aa:	6453      	str	r3, [r2, #68]	; 0x44
    f1ac:	2d17      	cmp	r5, #23
    f1ae:	d90a      	bls.n	f1c6 <_dtoa_r+0x20e>
    f1b0:	2201      	movs	r2, #1
    f1b2:	3304      	adds	r3, #4
    f1b4:	005b      	lsls	r3, r3, #1
    f1b6:	0018      	movs	r0, r3
    f1b8:	3014      	adds	r0, #20
    f1ba:	0011      	movs	r1, r2
    f1bc:	3201      	adds	r2, #1
    f1be:	4285      	cmp	r5, r0
    f1c0:	d2f8      	bcs.n	f1b4 <_dtoa_r+0x1fc>
    f1c2:	4653      	mov	r3, sl
    f1c4:	6459      	str	r1, [r3, #68]	; 0x44
    f1c6:	4650      	mov	r0, sl
    f1c8:	f001 fed8 	bl	10f7c <_Balloc>
    f1cc:	4653      	mov	r3, sl
    f1ce:	6418      	str	r0, [r3, #64]	; 0x40
    f1d0:	4643      	mov	r3, r8
    f1d2:	900a      	str	r0, [sp, #40]	; 0x28
    f1d4:	2b0e      	cmp	r3, #14
    f1d6:	d900      	bls.n	f1da <_dtoa_r+0x222>
    f1d8:	e161      	b.n	f49e <_dtoa_r+0x4e6>
    f1da:	2c00      	cmp	r4, #0
    f1dc:	d100      	bne.n	f1e0 <_dtoa_r+0x228>
    f1de:	e15e      	b.n	f49e <_dtoa_r+0x4e6>
    f1e0:	9610      	str	r6, [sp, #64]	; 0x40
    f1e2:	9711      	str	r7, [sp, #68]	; 0x44
    f1e4:	9e03      	ldr	r6, [sp, #12]
    f1e6:	2e00      	cmp	r6, #0
    f1e8:	dc01      	bgt.n	f1ee <_dtoa_r+0x236>
    f1ea:	f000 fd25 	bl	fc38 <_dtoa_r+0xc80>
    f1ee:	0032      	movs	r2, r6
    f1f0:	210f      	movs	r1, #15
    f1f2:	4b65      	ldr	r3, [pc, #404]	; (f388 <_dtoa_r+0x3d0>)
    f1f4:	400a      	ands	r2, r1
    f1f6:	00d2      	lsls	r2, r2, #3
    f1f8:	189b      	adds	r3, r3, r2
    f1fa:	1136      	asrs	r6, r6, #4
    f1fc:	681c      	ldr	r4, [r3, #0]
    f1fe:	685d      	ldr	r5, [r3, #4]
    f200:	06f3      	lsls	r3, r6, #27
    f202:	d401      	bmi.n	f208 <_dtoa_r+0x250>
    f204:	f000 fcca 	bl	fb9c <_dtoa_r+0xbe4>
    f208:	4b60      	ldr	r3, [pc, #384]	; (f38c <_dtoa_r+0x3d4>)
    f20a:	400e      	ands	r6, r1
    f20c:	6a1a      	ldr	r2, [r3, #32]
    f20e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f210:	9810      	ldr	r0, [sp, #64]	; 0x40
    f212:	9911      	ldr	r1, [sp, #68]	; 0x44
    f214:	f7fc fc34 	bl	ba80 <__aeabi_ddiv>
    f218:	2303      	movs	r3, #3
    f21a:	4698      	mov	r8, r3
    f21c:	9008      	str	r0, [sp, #32]
    f21e:	9109      	str	r1, [sp, #36]	; 0x24
    f220:	2e00      	cmp	r6, #0
    f222:	d011      	beq.n	f248 <_dtoa_r+0x290>
    f224:	4f59      	ldr	r7, [pc, #356]	; (f38c <_dtoa_r+0x3d4>)
    f226:	2301      	movs	r3, #1
    f228:	4233      	tst	r3, r6
    f22a:	d009      	beq.n	f240 <_dtoa_r+0x288>
    f22c:	469c      	mov	ip, r3
    f22e:	683a      	ldr	r2, [r7, #0]
    f230:	687b      	ldr	r3, [r7, #4]
    f232:	0020      	movs	r0, r4
    f234:	0029      	movs	r1, r5
    f236:	44e0      	add	r8, ip
    f238:	f7fd f856 	bl	c2e8 <__aeabi_dmul>
    f23c:	0004      	movs	r4, r0
    f23e:	000d      	movs	r5, r1
    f240:	1076      	asrs	r6, r6, #1
    f242:	3708      	adds	r7, #8
    f244:	2e00      	cmp	r6, #0
    f246:	d1ee      	bne.n	f226 <_dtoa_r+0x26e>
    f248:	0022      	movs	r2, r4
    f24a:	9808      	ldr	r0, [sp, #32]
    f24c:	9909      	ldr	r1, [sp, #36]	; 0x24
    f24e:	002b      	movs	r3, r5
    f250:	f7fc fc16 	bl	ba80 <__aeabi_ddiv>
    f254:	0006      	movs	r6, r0
    f256:	000f      	movs	r7, r1
    f258:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f25a:	2b00      	cmp	r3, #0
    f25c:	d009      	beq.n	f272 <_dtoa_r+0x2ba>
    f25e:	2200      	movs	r2, #0
    f260:	4b40      	ldr	r3, [pc, #256]	; (f364 <_dtoa_r+0x3ac>)
    f262:	0030      	movs	r0, r6
    f264:	0039      	movs	r1, r7
    f266:	f7fb fa55 	bl	a714 <__aeabi_dcmplt>
    f26a:	2800      	cmp	r0, #0
    f26c:	d001      	beq.n	f272 <_dtoa_r+0x2ba>
    f26e:	f000 fdc2 	bl	fdf6 <_dtoa_r+0xe3e>
    f272:	4640      	mov	r0, r8
    f274:	f7fd fe22 	bl	cebc <__aeabi_i2d>
    f278:	0032      	movs	r2, r6
    f27a:	003b      	movs	r3, r7
    f27c:	f7fd f834 	bl	c2e8 <__aeabi_dmul>
    f280:	2200      	movs	r2, #0
    f282:	4b43      	ldr	r3, [pc, #268]	; (f390 <_dtoa_r+0x3d8>)
    f284:	f7fc f8ec 	bl	b460 <__aeabi_dadd>
    f288:	4a42      	ldr	r2, [pc, #264]	; (f394 <_dtoa_r+0x3dc>)
    f28a:	000b      	movs	r3, r1
    f28c:	4694      	mov	ip, r2
    f28e:	4463      	add	r3, ip
    f290:	9008      	str	r0, [sp, #32]
    f292:	9109      	str	r1, [sp, #36]	; 0x24
    f294:	9309      	str	r3, [sp, #36]	; 0x24
    f296:	9b07      	ldr	r3, [sp, #28]
    f298:	2b00      	cmp	r3, #0
    f29a:	d101      	bne.n	f2a0 <_dtoa_r+0x2e8>
    f29c:	f000 fc50 	bl	fb40 <_dtoa_r+0xb88>
    f2a0:	9b03      	ldr	r3, [sp, #12]
    f2a2:	9313      	str	r3, [sp, #76]	; 0x4c
    f2a4:	9b07      	ldr	r3, [sp, #28]
    f2a6:	9312      	str	r3, [sp, #72]	; 0x48
    f2a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f2aa:	2b00      	cmp	r3, #0
    f2ac:	d101      	bne.n	f2b2 <_dtoa_r+0x2fa>
    f2ae:	f000 fd1d 	bl	fcec <_dtoa_r+0xd34>
    f2b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    f2b4:	2000      	movs	r0, #0
    f2b6:	1e5a      	subs	r2, r3, #1
    f2b8:	4b33      	ldr	r3, [pc, #204]	; (f388 <_dtoa_r+0x3d0>)
    f2ba:	00d2      	lsls	r2, r2, #3
    f2bc:	189b      	adds	r3, r3, r2
    f2be:	681a      	ldr	r2, [r3, #0]
    f2c0:	685b      	ldr	r3, [r3, #4]
    f2c2:	4935      	ldr	r1, [pc, #212]	; (f398 <_dtoa_r+0x3e0>)
    f2c4:	f7fc fbdc 	bl	ba80 <__aeabi_ddiv>
    f2c8:	9a08      	ldr	r2, [sp, #32]
    f2ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f2cc:	f7fd fa8c 	bl	c7e8 <__aeabi_dsub>
    f2d0:	9008      	str	r0, [sp, #32]
    f2d2:	9109      	str	r1, [sp, #36]	; 0x24
    f2d4:	0039      	movs	r1, r7
    f2d6:	0030      	movs	r0, r6
    f2d8:	f7fd fdbc 	bl	ce54 <__aeabi_d2iz>
    f2dc:	0004      	movs	r4, r0
    f2de:	f7fd fded 	bl	cebc <__aeabi_i2d>
    f2e2:	0002      	movs	r2, r0
    f2e4:	000b      	movs	r3, r1
    f2e6:	0030      	movs	r0, r6
    f2e8:	0039      	movs	r1, r7
    f2ea:	f7fd fa7d 	bl	c7e8 <__aeabi_dsub>
    f2ee:	0005      	movs	r5, r0
    f2f0:	000e      	movs	r6, r1
    f2f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f2f4:	3430      	adds	r4, #48	; 0x30
    f2f6:	1c51      	adds	r1, r2, #1
    f2f8:	b2e7      	uxtb	r7, r4
    f2fa:	9114      	str	r1, [sp, #80]	; 0x50
    f2fc:	7017      	strb	r7, [r2, #0]
    f2fe:	0033      	movs	r3, r6
    f300:	9808      	ldr	r0, [sp, #32]
    f302:	9909      	ldr	r1, [sp, #36]	; 0x24
    f304:	002a      	movs	r2, r5
    f306:	f7fb fa19 	bl	a73c <__aeabi_dcmpgt>
    f30a:	2800      	cmp	r0, #0
    f30c:	d001      	beq.n	f312 <_dtoa_r+0x35a>
    f30e:	f000 fdfe 	bl	ff0e <_dtoa_r+0xf56>
    f312:	002a      	movs	r2, r5
    f314:	0033      	movs	r3, r6
    f316:	2000      	movs	r0, #0
    f318:	4912      	ldr	r1, [pc, #72]	; (f364 <_dtoa_r+0x3ac>)
    f31a:	f7fd fa65 	bl	c7e8 <__aeabi_dsub>
    f31e:	0002      	movs	r2, r0
    f320:	000b      	movs	r3, r1
    f322:	9808      	ldr	r0, [sp, #32]
    f324:	9909      	ldr	r1, [sp, #36]	; 0x24
    f326:	f7fb fa09 	bl	a73c <__aeabi_dcmpgt>
    f32a:	2800      	cmp	r0, #0
    f32c:	d001      	beq.n	f332 <_dtoa_r+0x37a>
    f32e:	f000 fde7 	bl	ff00 <_dtoa_r+0xf48>
    f332:	9b12      	ldr	r3, [sp, #72]	; 0x48
    f334:	2b01      	cmp	r3, #1
    f336:	d101      	bne.n	f33c <_dtoa_r+0x384>
    f338:	f000 fc78 	bl	fc2c <_dtoa_r+0xc74>
    f33c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f33e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    f340:	4694      	mov	ip, r2
    f342:	4463      	add	r3, ip
    f344:	4698      	mov	r8, r3
    f346:	464b      	mov	r3, r9
    f348:	9312      	str	r3, [sp, #72]	; 0x48
    f34a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    f34c:	4699      	mov	r9, r3
    f34e:	e038      	b.n	f3c2 <_dtoa_r+0x40a>
    f350:	7ff00000 	.word	0x7ff00000
    f354:	0001258d 	.word	0x0001258d
    f358:	0000270f 	.word	0x0000270f
    f35c:	000125b0 	.word	0x000125b0
    f360:	000125bc 	.word	0x000125bc
    f364:	3ff00000 	.word	0x3ff00000
    f368:	fffffc01 	.word	0xfffffc01
    f36c:	3ff80000 	.word	0x3ff80000
    f370:	636f4361 	.word	0x636f4361
    f374:	3fd287a7 	.word	0x3fd287a7
    f378:	8b60c8b3 	.word	0x8b60c8b3
    f37c:	3fc68a28 	.word	0x3fc68a28
    f380:	509f79fb 	.word	0x509f79fb
    f384:	3fd34413 	.word	0x3fd34413
    f388:	000125e8 	.word	0x000125e8
    f38c:	000125c0 	.word	0x000125c0
    f390:	401c0000 	.word	0x401c0000
    f394:	fcc00000 	.word	0xfcc00000
    f398:	3fe00000 	.word	0x3fe00000
    f39c:	002a      	movs	r2, r5
    f39e:	0033      	movs	r3, r6
    f3a0:	2000      	movs	r0, #0
    f3a2:	49b9      	ldr	r1, [pc, #740]	; (f688 <_dtoa_r+0x6d0>)
    f3a4:	f7fd fa20 	bl	c7e8 <__aeabi_dsub>
    f3a8:	9a08      	ldr	r2, [sp, #32]
    f3aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f3ac:	f7fb f9b2 	bl	a714 <__aeabi_dcmplt>
    f3b0:	2800      	cmp	r0, #0
    f3b2:	d001      	beq.n	f3b8 <_dtoa_r+0x400>
    f3b4:	f000 fd74 	bl	fea0 <_dtoa_r+0xee8>
    f3b8:	46a1      	mov	r9, r4
    f3ba:	4544      	cmp	r4, r8
    f3bc:	d101      	bne.n	f3c2 <_dtoa_r+0x40a>
    f3be:	f000 fc33 	bl	fc28 <_dtoa_r+0xc70>
    f3c2:	9808      	ldr	r0, [sp, #32]
    f3c4:	9909      	ldr	r1, [sp, #36]	; 0x24
    f3c6:	2200      	movs	r2, #0
    f3c8:	4bb0      	ldr	r3, [pc, #704]	; (f68c <_dtoa_r+0x6d4>)
    f3ca:	f7fc ff8d 	bl	c2e8 <__aeabi_dmul>
    f3ce:	2200      	movs	r2, #0
    f3d0:	4bae      	ldr	r3, [pc, #696]	; (f68c <_dtoa_r+0x6d4>)
    f3d2:	9008      	str	r0, [sp, #32]
    f3d4:	9109      	str	r1, [sp, #36]	; 0x24
    f3d6:	0028      	movs	r0, r5
    f3d8:	0031      	movs	r1, r6
    f3da:	f7fc ff85 	bl	c2e8 <__aeabi_dmul>
    f3de:	000d      	movs	r5, r1
    f3e0:	0004      	movs	r4, r0
    f3e2:	f7fd fd37 	bl	ce54 <__aeabi_d2iz>
    f3e6:	0007      	movs	r7, r0
    f3e8:	f7fd fd68 	bl	cebc <__aeabi_i2d>
    f3ec:	0002      	movs	r2, r0
    f3ee:	000b      	movs	r3, r1
    f3f0:	0020      	movs	r0, r4
    f3f2:	0029      	movs	r1, r5
    f3f4:	f7fd f9f8 	bl	c7e8 <__aeabi_dsub>
    f3f8:	464b      	mov	r3, r9
    f3fa:	3730      	adds	r7, #48	; 0x30
    f3fc:	b2ff      	uxtb	r7, r7
    f3fe:	1c5c      	adds	r4, r3, #1
    f400:	701f      	strb	r7, [r3, #0]
    f402:	9a08      	ldr	r2, [sp, #32]
    f404:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f406:	0005      	movs	r5, r0
    f408:	000e      	movs	r6, r1
    f40a:	f7fb f983 	bl	a714 <__aeabi_dcmplt>
    f40e:	2800      	cmp	r0, #0
    f410:	d0c4      	beq.n	f39c <_dtoa_r+0x3e4>
    f412:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f414:	9303      	str	r3, [sp, #12]
    f416:	4659      	mov	r1, fp
    f418:	4650      	mov	r0, sl
    f41a:	f001 fdd7 	bl	10fcc <_Bfree>
    f41e:	2300      	movs	r3, #0
    f420:	7023      	strb	r3, [r4, #0]
    f422:	9b03      	ldr	r3, [sp, #12]
    f424:	9a24      	ldr	r2, [sp, #144]	; 0x90
    f426:	3301      	adds	r3, #1
    f428:	6013      	str	r3, [r2, #0]
    f42a:	9b26      	ldr	r3, [sp, #152]	; 0x98
    f42c:	2b00      	cmp	r3, #0
    f42e:	d100      	bne.n	f432 <_dtoa_r+0x47a>
    f430:	e3a8      	b.n	fb84 <_dtoa_r+0xbcc>
    f432:	601c      	str	r4, [r3, #0]
    f434:	980a      	ldr	r0, [sp, #40]	; 0x28
    f436:	e5f4      	b.n	f022 <_dtoa_r+0x6a>
    f438:	9b16      	ldr	r3, [sp, #88]	; 0x58
    f43a:	4699      	mov	r9, r3
    f43c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    f43e:	444b      	add	r3, r9
    f440:	001c      	movs	r4, r3
    f442:	4b93      	ldr	r3, [pc, #588]	; (f690 <_dtoa_r+0x6d8>)
    f444:	18e3      	adds	r3, r4, r3
    f446:	2b20      	cmp	r3, #32
    f448:	dc00      	bgt.n	f44c <_dtoa_r+0x494>
    f44a:	e17e      	b.n	f74a <_dtoa_r+0x792>
    f44c:	0031      	movs	r1, r6
    f44e:	4a91      	ldr	r2, [pc, #580]	; (f694 <_dtoa_r+0x6dc>)
    f450:	4640      	mov	r0, r8
    f452:	18a2      	adds	r2, r4, r2
    f454:	40d1      	lsrs	r1, r2
    f456:	000a      	movs	r2, r1
    f458:	2140      	movs	r1, #64	; 0x40
    f45a:	1acb      	subs	r3, r1, r3
    f45c:	4098      	lsls	r0, r3
    f45e:	4310      	orrs	r0, r2
    f460:	f7fd fd6e 	bl	cf40 <__aeabi_ui2d>
    f464:	1e63      	subs	r3, r4, #1
    f466:	4698      	mov	r8, r3
    f468:	2301      	movs	r3, #1
    f46a:	4d8b      	ldr	r5, [pc, #556]	; (f698 <_dtoa_r+0x6e0>)
    f46c:	930f      	str	r3, [sp, #60]	; 0x3c
    f46e:	1949      	adds	r1, r1, r5
    f470:	e618      	b.n	f0a4 <_dtoa_r+0xec>
    f472:	488a      	ldr	r0, [pc, #552]	; (f69c <_dtoa_r+0x6e4>)
    f474:	e5d5      	b.n	f022 <_dtoa_r+0x6a>
    f476:	2300      	movs	r3, #0
    f478:	4652      	mov	r2, sl
    f47a:	2100      	movs	r1, #0
    f47c:	6453      	str	r3, [r2, #68]	; 0x44
    f47e:	4650      	mov	r0, sl
    f480:	f001 fd7c 	bl	10f7c <_Balloc>
    f484:	4653      	mov	r3, sl
    f486:	6418      	str	r0, [r3, #64]	; 0x40
    f488:	2301      	movs	r3, #1
    f48a:	425b      	negs	r3, r3
    f48c:	9307      	str	r3, [sp, #28]
    f48e:	930e      	str	r3, [sp, #56]	; 0x38
    f490:	3302      	adds	r3, #2
    f492:	2200      	movs	r2, #0
    f494:	930b      	str	r3, [sp, #44]	; 0x2c
    f496:	2300      	movs	r3, #0
    f498:	900a      	str	r0, [sp, #40]	; 0x28
    f49a:	9223      	str	r2, [sp, #140]	; 0x8c
    f49c:	9322      	str	r3, [sp, #136]	; 0x88
    f49e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    f4a0:	2b00      	cmp	r3, #0
    f4a2:	da00      	bge.n	f4a6 <_dtoa_r+0x4ee>
    f4a4:	e0ab      	b.n	f5fe <_dtoa_r+0x646>
    f4a6:	9a03      	ldr	r2, [sp, #12]
    f4a8:	2a0e      	cmp	r2, #14
    f4aa:	dd00      	ble.n	f4ae <_dtoa_r+0x4f6>
    f4ac:	e0a7      	b.n	f5fe <_dtoa_r+0x646>
    f4ae:	4b7c      	ldr	r3, [pc, #496]	; (f6a0 <_dtoa_r+0x6e8>)
    f4b0:	00d2      	lsls	r2, r2, #3
    f4b2:	189b      	adds	r3, r3, r2
    f4b4:	685c      	ldr	r4, [r3, #4]
    f4b6:	681b      	ldr	r3, [r3, #0]
    f4b8:	9304      	str	r3, [sp, #16]
    f4ba:	9405      	str	r4, [sp, #20]
    f4bc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    f4be:	2b00      	cmp	r3, #0
    f4c0:	da00      	bge.n	f4c4 <_dtoa_r+0x50c>
    f4c2:	e2a7      	b.n	fa14 <_dtoa_r+0xa5c>
    f4c4:	9c04      	ldr	r4, [sp, #16]
    f4c6:	9d05      	ldr	r5, [sp, #20]
    f4c8:	0030      	movs	r0, r6
    f4ca:	0022      	movs	r2, r4
    f4cc:	002b      	movs	r3, r5
    f4ce:	0039      	movs	r1, r7
    f4d0:	f7fc fad6 	bl	ba80 <__aeabi_ddiv>
    f4d4:	f7fd fcbe 	bl	ce54 <__aeabi_d2iz>
    f4d8:	4680      	mov	r8, r0
    f4da:	f7fd fcef 	bl	cebc <__aeabi_i2d>
    f4de:	0022      	movs	r2, r4
    f4e0:	002b      	movs	r3, r5
    f4e2:	f7fc ff01 	bl	c2e8 <__aeabi_dmul>
    f4e6:	0002      	movs	r2, r0
    f4e8:	000b      	movs	r3, r1
    f4ea:	0030      	movs	r0, r6
    f4ec:	0039      	movs	r1, r7
    f4ee:	f7fd f97b 	bl	c7e8 <__aeabi_dsub>
    f4f2:	4643      	mov	r3, r8
    f4f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f4f6:	3330      	adds	r3, #48	; 0x30
    f4f8:	7013      	strb	r3, [r2, #0]
    f4fa:	9b07      	ldr	r3, [sp, #28]
    f4fc:	0006      	movs	r6, r0
    f4fe:	000f      	movs	r7, r1
    f500:	1c54      	adds	r4, r2, #1
    f502:	2b01      	cmp	r3, #1
    f504:	d04e      	beq.n	f5a4 <_dtoa_r+0x5ec>
    f506:	2200      	movs	r2, #0
    f508:	4b60      	ldr	r3, [pc, #384]	; (f68c <_dtoa_r+0x6d4>)
    f50a:	f7fc feed 	bl	c2e8 <__aeabi_dmul>
    f50e:	2200      	movs	r2, #0
    f510:	2300      	movs	r3, #0
    f512:	0006      	movs	r6, r0
    f514:	000f      	movs	r7, r1
    f516:	f7fb f8f7 	bl	a708 <__aeabi_dcmpeq>
    f51a:	2800      	cmp	r0, #0
    f51c:	d000      	beq.n	f520 <_dtoa_r+0x568>
    f51e:	e77a      	b.n	f416 <_dtoa_r+0x45e>
    f520:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f522:	9a07      	ldr	r2, [sp, #28]
    f524:	1c9d      	adds	r5, r3, #2
    f526:	469c      	mov	ip, r3
    f528:	465b      	mov	r3, fp
    f52a:	9306      	str	r3, [sp, #24]
    f52c:	4653      	mov	r3, sl
    f52e:	4462      	add	r2, ip
    f530:	46aa      	mov	sl, r5
    f532:	9c04      	ldr	r4, [sp, #16]
    f534:	9d05      	ldr	r5, [sp, #20]
    f536:	4691      	mov	r9, r2
    f538:	9307      	str	r3, [sp, #28]
    f53a:	e00f      	b.n	f55c <_dtoa_r+0x5a4>
    f53c:	2200      	movs	r2, #0
    f53e:	4b53      	ldr	r3, [pc, #332]	; (f68c <_dtoa_r+0x6d4>)
    f540:	f7fc fed2 	bl	c2e8 <__aeabi_dmul>
    f544:	2301      	movs	r3, #1
    f546:	469c      	mov	ip, r3
    f548:	2200      	movs	r2, #0
    f54a:	2300      	movs	r3, #0
    f54c:	0006      	movs	r6, r0
    f54e:	000f      	movs	r7, r1
    f550:	44e2      	add	sl, ip
    f552:	f7fb f8d9 	bl	a708 <__aeabi_dcmpeq>
    f556:	2800      	cmp	r0, #0
    f558:	d000      	beq.n	f55c <_dtoa_r+0x5a4>
    f55a:	e2d9      	b.n	fb10 <_dtoa_r+0xb58>
    f55c:	0022      	movs	r2, r4
    f55e:	002b      	movs	r3, r5
    f560:	0030      	movs	r0, r6
    f562:	0039      	movs	r1, r7
    f564:	f7fc fa8c 	bl	ba80 <__aeabi_ddiv>
    f568:	f7fd fc74 	bl	ce54 <__aeabi_d2iz>
    f56c:	4680      	mov	r8, r0
    f56e:	f7fd fca5 	bl	cebc <__aeabi_i2d>
    f572:	0022      	movs	r2, r4
    f574:	002b      	movs	r3, r5
    f576:	f7fc feb7 	bl	c2e8 <__aeabi_dmul>
    f57a:	0002      	movs	r2, r0
    f57c:	000b      	movs	r3, r1
    f57e:	0030      	movs	r0, r6
    f580:	0039      	movs	r1, r7
    f582:	f7fd f931 	bl	c7e8 <__aeabi_dsub>
    f586:	4653      	mov	r3, sl
    f588:	4642      	mov	r2, r8
    f58a:	3b01      	subs	r3, #1
    f58c:	3230      	adds	r2, #48	; 0x30
    f58e:	0006      	movs	r6, r0
    f590:	000f      	movs	r7, r1
    f592:	46d3      	mov	fp, sl
    f594:	701a      	strb	r2, [r3, #0]
    f596:	45d1      	cmp	r9, sl
    f598:	d1d0      	bne.n	f53c <_dtoa_r+0x584>
    f59a:	9b06      	ldr	r3, [sp, #24]
    f59c:	4654      	mov	r4, sl
    f59e:	469b      	mov	fp, r3
    f5a0:	9b07      	ldr	r3, [sp, #28]
    f5a2:	469a      	mov	sl, r3
    f5a4:	0032      	movs	r2, r6
    f5a6:	003b      	movs	r3, r7
    f5a8:	0030      	movs	r0, r6
    f5aa:	0039      	movs	r1, r7
    f5ac:	f7fb ff58 	bl	b460 <__aeabi_dadd>
    f5b0:	0006      	movs	r6, r0
    f5b2:	000f      	movs	r7, r1
    f5b4:	0002      	movs	r2, r0
    f5b6:	000b      	movs	r3, r1
    f5b8:	9804      	ldr	r0, [sp, #16]
    f5ba:	9905      	ldr	r1, [sp, #20]
    f5bc:	f7fb f8aa 	bl	a714 <__aeabi_dcmplt>
    f5c0:	2800      	cmp	r0, #0
    f5c2:	d10c      	bne.n	f5de <_dtoa_r+0x626>
    f5c4:	9804      	ldr	r0, [sp, #16]
    f5c6:	9905      	ldr	r1, [sp, #20]
    f5c8:	0032      	movs	r2, r6
    f5ca:	003b      	movs	r3, r7
    f5cc:	f7fb f89c 	bl	a708 <__aeabi_dcmpeq>
    f5d0:	2800      	cmp	r0, #0
    f5d2:	d100      	bne.n	f5d6 <_dtoa_r+0x61e>
    f5d4:	e71f      	b.n	f416 <_dtoa_r+0x45e>
    f5d6:	4643      	mov	r3, r8
    f5d8:	07db      	lsls	r3, r3, #31
    f5da:	d400      	bmi.n	f5de <_dtoa_r+0x626>
    f5dc:	e71b      	b.n	f416 <_dtoa_r+0x45e>
    f5de:	1e65      	subs	r5, r4, #1
    f5e0:	782f      	ldrb	r7, [r5, #0]
    f5e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f5e4:	e006      	b.n	f5f4 <_dtoa_r+0x63c>
    f5e6:	429d      	cmp	r5, r3
    f5e8:	d100      	bne.n	f5ec <_dtoa_r+0x634>
    f5ea:	e351      	b.n	fc90 <_dtoa_r+0xcd8>
    f5ec:	3c02      	subs	r4, #2
    f5ee:	7827      	ldrb	r7, [r4, #0]
    f5f0:	002c      	movs	r4, r5
    f5f2:	3d01      	subs	r5, #1
    f5f4:	2f39      	cmp	r7, #57	; 0x39
    f5f6:	d0f6      	beq.n	f5e6 <_dtoa_r+0x62e>
    f5f8:	3701      	adds	r7, #1
    f5fa:	702f      	strb	r7, [r5, #0]
    f5fc:	e70b      	b.n	f416 <_dtoa_r+0x45e>
    f5fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f600:	2a00      	cmp	r2, #0
    f602:	d04f      	beq.n	f6a4 <_dtoa_r+0x6ec>
    f604:	9a22      	ldr	r2, [sp, #136]	; 0x88
    f606:	2a01      	cmp	r2, #1
    f608:	dc00      	bgt.n	f60c <_dtoa_r+0x654>
    f60a:	e22c      	b.n	fa66 <_dtoa_r+0xaae>
    f60c:	9b07      	ldr	r3, [sp, #28]
    f60e:	1e5c      	subs	r4, r3, #1
    f610:	464b      	mov	r3, r9
    f612:	45a1      	cmp	r9, r4
    f614:	da00      	bge.n	f618 <_dtoa_r+0x660>
    f616:	e2b8      	b.n	fb8a <_dtoa_r+0xbd2>
    f618:	1b1c      	subs	r4, r3, r4
    f61a:	9b07      	ldr	r3, [sp, #28]
    f61c:	2b00      	cmp	r3, #0
    f61e:	da00      	bge.n	f622 <_dtoa_r+0x66a>
    f620:	e3d4      	b.n	fdcc <_dtoa_r+0xe14>
    f622:	9b06      	ldr	r3, [sp, #24]
    f624:	9308      	str	r3, [sp, #32]
    f626:	9b07      	ldr	r3, [sp, #28]
    f628:	9a06      	ldr	r2, [sp, #24]
    f62a:	2101      	movs	r1, #1
    f62c:	4694      	mov	ip, r2
    f62e:	449c      	add	ip, r3
    f630:	4662      	mov	r2, ip
    f632:	9206      	str	r2, [sp, #24]
    f634:	9a04      	ldr	r2, [sp, #16]
    f636:	4650      	mov	r0, sl
    f638:	4694      	mov	ip, r2
    f63a:	449c      	add	ip, r3
    f63c:	4663      	mov	r3, ip
    f63e:	9304      	str	r3, [sp, #16]
    f640:	f001 fd5c 	bl	110fc <__i2b>
    f644:	4680      	mov	r8, r0
    f646:	e032      	b.n	f6ae <_dtoa_r+0x6f6>
    f648:	9a06      	ldr	r2, [sp, #24]
    f64a:	9b03      	ldr	r3, [sp, #12]
    f64c:	1ad2      	subs	r2, r2, r3
    f64e:	425b      	negs	r3, r3
    f650:	4699      	mov	r9, r3
    f652:	2300      	movs	r3, #0
    f654:	9206      	str	r2, [sp, #24]
    f656:	930d      	str	r3, [sp, #52]	; 0x34
    f658:	e579      	b.n	f14e <_dtoa_r+0x196>
    f65a:	9803      	ldr	r0, [sp, #12]
    f65c:	f7fd fc2e 	bl	cebc <__aeabi_i2d>
    f660:	000b      	movs	r3, r1
    f662:	0002      	movs	r2, r0
    f664:	0029      	movs	r1, r5
    f666:	0020      	movs	r0, r4
    f668:	f7fb f84e 	bl	a708 <__aeabi_dcmpeq>
    f66c:	0002      	movs	r2, r0
    f66e:	4250      	negs	r0, r2
    f670:	4150      	adcs	r0, r2
    f672:	9b03      	ldr	r3, [sp, #12]
    f674:	1a1b      	subs	r3, r3, r0
    f676:	9303      	str	r3, [sp, #12]
    f678:	e53d      	b.n	f0f6 <_dtoa_r+0x13e>
    f67a:	2301      	movs	r3, #1
    f67c:	1a9b      	subs	r3, r3, r2
    f67e:	9306      	str	r3, [sp, #24]
    f680:	2300      	movs	r3, #0
    f682:	9304      	str	r3, [sp, #16]
    f684:	e557      	b.n	f136 <_dtoa_r+0x17e>
    f686:	46c0      	nop			; (mov r8, r8)
    f688:	3ff00000 	.word	0x3ff00000
    f68c:	40240000 	.word	0x40240000
    f690:	00000432 	.word	0x00000432
    f694:	00000412 	.word	0x00000412
    f698:	fe100000 	.word	0xfe100000
    f69c:	0001258c 	.word	0x0001258c
    f6a0:	000125e8 	.word	0x000125e8
    f6a4:	9b06      	ldr	r3, [sp, #24]
    f6a6:	464c      	mov	r4, r9
    f6a8:	9308      	str	r3, [sp, #32]
    f6aa:	2300      	movs	r3, #0
    f6ac:	4698      	mov	r8, r3
    f6ae:	9908      	ldr	r1, [sp, #32]
    f6b0:	1e0b      	subs	r3, r1, #0
    f6b2:	dd0e      	ble.n	f6d2 <_dtoa_r+0x71a>
    f6b4:	9a04      	ldr	r2, [sp, #16]
    f6b6:	2a00      	cmp	r2, #0
    f6b8:	dd0b      	ble.n	f6d2 <_dtoa_r+0x71a>
    f6ba:	4293      	cmp	r3, r2
    f6bc:	dd00      	ble.n	f6c0 <_dtoa_r+0x708>
    f6be:	e187      	b.n	f9d0 <_dtoa_r+0xa18>
    f6c0:	9a06      	ldr	r2, [sp, #24]
    f6c2:	1ad2      	subs	r2, r2, r3
    f6c4:	9206      	str	r2, [sp, #24]
    f6c6:	9a08      	ldr	r2, [sp, #32]
    f6c8:	1ad2      	subs	r2, r2, r3
    f6ca:	9208      	str	r2, [sp, #32]
    f6cc:	9a04      	ldr	r2, [sp, #16]
    f6ce:	1ad3      	subs	r3, r2, r3
    f6d0:	9304      	str	r3, [sp, #16]
    f6d2:	464b      	mov	r3, r9
    f6d4:	2b00      	cmp	r3, #0
    f6d6:	d01a      	beq.n	f70e <_dtoa_r+0x756>
    f6d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f6da:	2b00      	cmp	r3, #0
    f6dc:	d100      	bne.n	f6e0 <_dtoa_r+0x728>
    f6de:	e1bb      	b.n	fa58 <_dtoa_r+0xaa0>
    f6e0:	2c00      	cmp	r4, #0
    f6e2:	dd10      	ble.n	f706 <_dtoa_r+0x74e>
    f6e4:	4641      	mov	r1, r8
    f6e6:	0022      	movs	r2, r4
    f6e8:	4650      	mov	r0, sl
    f6ea:	f001 fdbb 	bl	11264 <__pow5mult>
    f6ee:	465a      	mov	r2, fp
    f6f0:	0001      	movs	r1, r0
    f6f2:	4680      	mov	r8, r0
    f6f4:	4650      	mov	r0, sl
    f6f6:	f001 fd0b 	bl	11110 <__multiply>
    f6fa:	0005      	movs	r5, r0
    f6fc:	4659      	mov	r1, fp
    f6fe:	4650      	mov	r0, sl
    f700:	f001 fc64 	bl	10fcc <_Bfree>
    f704:	46ab      	mov	fp, r5
    f706:	464b      	mov	r3, r9
    f708:	1b1a      	subs	r2, r3, r4
    f70a:	d000      	beq.n	f70e <_dtoa_r+0x756>
    f70c:	e1a5      	b.n	fa5a <_dtoa_r+0xaa2>
    f70e:	2101      	movs	r1, #1
    f710:	4650      	mov	r0, sl
    f712:	f001 fcf3 	bl	110fc <__i2b>
    f716:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f718:	4681      	mov	r9, r0
    f71a:	2b00      	cmp	r3, #0
    f71c:	dd1d      	ble.n	f75a <_dtoa_r+0x7a2>
    f71e:	001a      	movs	r2, r3
    f720:	0001      	movs	r1, r0
    f722:	4650      	mov	r0, sl
    f724:	f001 fd9e 	bl	11264 <__pow5mult>
    f728:	9b22      	ldr	r3, [sp, #136]	; 0x88
    f72a:	4681      	mov	r9, r0
    f72c:	2b01      	cmp	r3, #1
    f72e:	dc00      	bgt.n	f732 <_dtoa_r+0x77a>
    f730:	e150      	b.n	f9d4 <_dtoa_r+0xa1c>
    f732:	2400      	movs	r4, #0
    f734:	464b      	mov	r3, r9
    f736:	691b      	ldr	r3, [r3, #16]
    f738:	3303      	adds	r3, #3
    f73a:	009b      	lsls	r3, r3, #2
    f73c:	444b      	add	r3, r9
    f73e:	6858      	ldr	r0, [r3, #4]
    f740:	f001 fc94 	bl	1106c <__hi0bits>
    f744:	2320      	movs	r3, #32
    f746:	1a1b      	subs	r3, r3, r0
    f748:	e010      	b.n	f76c <_dtoa_r+0x7b4>
    f74a:	2220      	movs	r2, #32
    f74c:	0030      	movs	r0, r6
    f74e:	1ad3      	subs	r3, r2, r3
    f750:	4098      	lsls	r0, r3
    f752:	e685      	b.n	f460 <_dtoa_r+0x4a8>
    f754:	2300      	movs	r3, #0
    f756:	930c      	str	r3, [sp, #48]	; 0x30
    f758:	e4e3      	b.n	f122 <_dtoa_r+0x16a>
    f75a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    f75c:	2400      	movs	r4, #0
    f75e:	2b01      	cmp	r3, #1
    f760:	dc00      	bgt.n	f764 <_dtoa_r+0x7ac>
    f762:	e18b      	b.n	fa7c <_dtoa_r+0xac4>
    f764:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    f766:	2301      	movs	r3, #1
    f768:	2a00      	cmp	r2, #0
    f76a:	d1e3      	bne.n	f734 <_dtoa_r+0x77c>
    f76c:	9904      	ldr	r1, [sp, #16]
    f76e:	201f      	movs	r0, #31
    f770:	468c      	mov	ip, r1
    f772:	4463      	add	r3, ip
    f774:	4018      	ands	r0, r3
    f776:	d100      	bne.n	f77a <_dtoa_r+0x7c2>
    f778:	e0ae      	b.n	f8d8 <_dtoa_r+0x920>
    f77a:	2320      	movs	r3, #32
    f77c:	1a1b      	subs	r3, r3, r0
    f77e:	2b04      	cmp	r3, #4
    f780:	dc00      	bgt.n	f784 <_dtoa_r+0x7cc>
    f782:	e3cc      	b.n	ff1e <_dtoa_r+0xf66>
    f784:	231c      	movs	r3, #28
    f786:	1a18      	subs	r0, r3, r0
    f788:	9b06      	ldr	r3, [sp, #24]
    f78a:	469c      	mov	ip, r3
    f78c:	4484      	add	ip, r0
    f78e:	4663      	mov	r3, ip
    f790:	9306      	str	r3, [sp, #24]
    f792:	9b08      	ldr	r3, [sp, #32]
    f794:	469c      	mov	ip, r3
    f796:	4484      	add	ip, r0
    f798:	4663      	mov	r3, ip
    f79a:	468c      	mov	ip, r1
    f79c:	4484      	add	ip, r0
    f79e:	9308      	str	r3, [sp, #32]
    f7a0:	4663      	mov	r3, ip
    f7a2:	9304      	str	r3, [sp, #16]
    f7a4:	9b06      	ldr	r3, [sp, #24]
    f7a6:	2b00      	cmp	r3, #0
    f7a8:	dd05      	ble.n	f7b6 <_dtoa_r+0x7fe>
    f7aa:	4659      	mov	r1, fp
    f7ac:	001a      	movs	r2, r3
    f7ae:	4650      	mov	r0, sl
    f7b0:	f001 fdb8 	bl	11324 <__lshift>
    f7b4:	4683      	mov	fp, r0
    f7b6:	9b04      	ldr	r3, [sp, #16]
    f7b8:	2b00      	cmp	r3, #0
    f7ba:	dd05      	ble.n	f7c8 <_dtoa_r+0x810>
    f7bc:	4649      	mov	r1, r9
    f7be:	001a      	movs	r2, r3
    f7c0:	4650      	mov	r0, sl
    f7c2:	f001 fdaf 	bl	11324 <__lshift>
    f7c6:	4681      	mov	r9, r0
    f7c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f7ca:	2b00      	cmp	r3, #0
    f7cc:	d000      	beq.n	f7d0 <_dtoa_r+0x818>
    f7ce:	e094      	b.n	f8fa <_dtoa_r+0x942>
    f7d0:	9b07      	ldr	r3, [sp, #28]
    f7d2:	2b00      	cmp	r3, #0
    f7d4:	dc00      	bgt.n	f7d8 <_dtoa_r+0x820>
    f7d6:	e175      	b.n	fac4 <_dtoa_r+0xb0c>
    f7d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f7da:	2b00      	cmp	r3, #0
    f7dc:	d100      	bne.n	f7e0 <_dtoa_r+0x828>
    f7de:	e0a6      	b.n	f92e <_dtoa_r+0x976>
    f7e0:	9b08      	ldr	r3, [sp, #32]
    f7e2:	2b00      	cmp	r3, #0
    f7e4:	dd05      	ble.n	f7f2 <_dtoa_r+0x83a>
    f7e6:	4641      	mov	r1, r8
    f7e8:	001a      	movs	r2, r3
    f7ea:	4650      	mov	r0, sl
    f7ec:	f001 fd9a 	bl	11324 <__lshift>
    f7f0:	4680      	mov	r8, r0
    f7f2:	4643      	mov	r3, r8
    f7f4:	930c      	str	r3, [sp, #48]	; 0x30
    f7f6:	2c00      	cmp	r4, #0
    f7f8:	d000      	beq.n	f7fc <_dtoa_r+0x844>
    f7fa:	e250      	b.n	fc9e <_dtoa_r+0xce6>
    f7fc:	9c07      	ldr	r4, [sp, #28]
    f7fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f800:	3c01      	subs	r4, #1
    f802:	0023      	movs	r3, r4
    f804:	4694      	mov	ip, r2
    f806:	4463      	add	r3, ip
    f808:	9308      	str	r3, [sp, #32]
    f80a:	2301      	movs	r3, #1
    f80c:	4033      	ands	r3, r6
    f80e:	9307      	str	r3, [sp, #28]
    f810:	464b      	mov	r3, r9
    f812:	9306      	str	r3, [sp, #24]
    f814:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f816:	4657      	mov	r7, sl
    f818:	4645      	mov	r5, r8
    f81a:	465e      	mov	r6, fp
    f81c:	4692      	mov	sl, r2
    f81e:	4698      	mov	r8, r3
    f820:	9b06      	ldr	r3, [sp, #24]
    f822:	0030      	movs	r0, r6
    f824:	0019      	movs	r1, r3
    f826:	4699      	mov	r9, r3
    f828:	f7ff fb1c 	bl	ee64 <quorem>
    f82c:	0003      	movs	r3, r0
    f82e:	900b      	str	r0, [sp, #44]	; 0x2c
    f830:	3330      	adds	r3, #48	; 0x30
    f832:	0029      	movs	r1, r5
    f834:	0030      	movs	r0, r6
    f836:	9304      	str	r3, [sp, #16]
    f838:	f001 fdd4 	bl	113e4 <__mcmp>
    f83c:	4649      	mov	r1, r9
    f83e:	0004      	movs	r4, r0
    f840:	4642      	mov	r2, r8
    f842:	0038      	movs	r0, r7
    f844:	f001 fde8 	bl	11418 <__mdiff>
    f848:	68c3      	ldr	r3, [r0, #12]
    f84a:	4681      	mov	r9, r0
    f84c:	2b00      	cmp	r3, #0
    f84e:	d000      	beq.n	f852 <_dtoa_r+0x89a>
    f850:	e11e      	b.n	fa90 <_dtoa_r+0xad8>
    f852:	0001      	movs	r1, r0
    f854:	0030      	movs	r0, r6
    f856:	f001 fdc5 	bl	113e4 <__mcmp>
    f85a:	4683      	mov	fp, r0
    f85c:	4649      	mov	r1, r9
    f85e:	0038      	movs	r0, r7
    f860:	f001 fbb4 	bl	10fcc <_Bfree>
    f864:	465b      	mov	r3, fp
    f866:	9a22      	ldr	r2, [sp, #136]	; 0x88
    f868:	4313      	orrs	r3, r2
    f86a:	d103      	bne.n	f874 <_dtoa_r+0x8bc>
    f86c:	9b07      	ldr	r3, [sp, #28]
    f86e:	2b00      	cmp	r3, #0
    f870:	d100      	bne.n	f874 <_dtoa_r+0x8bc>
    f872:	e306      	b.n	fe82 <_dtoa_r+0xeca>
    f874:	2c00      	cmp	r4, #0
    f876:	da00      	bge.n	f87a <_dtoa_r+0x8c2>
    f878:	e1a8      	b.n	fbcc <_dtoa_r+0xc14>
    f87a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    f87c:	431c      	orrs	r4, r3
    f87e:	d103      	bne.n	f888 <_dtoa_r+0x8d0>
    f880:	9b07      	ldr	r3, [sp, #28]
    f882:	2b00      	cmp	r3, #0
    f884:	d100      	bne.n	f888 <_dtoa_r+0x8d0>
    f886:	e1a1      	b.n	fbcc <_dtoa_r+0xc14>
    f888:	465b      	mov	r3, fp
    f88a:	2b00      	cmp	r3, #0
    f88c:	dd00      	ble.n	f890 <_dtoa_r+0x8d8>
    f88e:	e282      	b.n	fd96 <_dtoa_r+0xdde>
    f890:	4669      	mov	r1, sp
    f892:	4652      	mov	r2, sl
    f894:	4653      	mov	r3, sl
    f896:	7c09      	ldrb	r1, [r1, #16]
    f898:	1c5c      	adds	r4, r3, #1
    f89a:	7011      	strb	r1, [r2, #0]
    f89c:	9a08      	ldr	r2, [sp, #32]
    f89e:	4552      	cmp	r2, sl
    f8a0:	d100      	bne.n	f8a4 <_dtoa_r+0x8ec>
    f8a2:	e28a      	b.n	fdba <_dtoa_r+0xe02>
    f8a4:	0031      	movs	r1, r6
    f8a6:	2300      	movs	r3, #0
    f8a8:	220a      	movs	r2, #10
    f8aa:	0038      	movs	r0, r7
    f8ac:	f001 fb98 	bl	10fe0 <__multadd>
    f8b0:	2300      	movs	r3, #0
    f8b2:	0006      	movs	r6, r0
    f8b4:	220a      	movs	r2, #10
    f8b6:	0029      	movs	r1, r5
    f8b8:	0038      	movs	r0, r7
    f8ba:	4545      	cmp	r5, r8
    f8bc:	d100      	bne.n	f8c0 <_dtoa_r+0x908>
    f8be:	e0e1      	b.n	fa84 <_dtoa_r+0xacc>
    f8c0:	f001 fb8e 	bl	10fe0 <__multadd>
    f8c4:	4641      	mov	r1, r8
    f8c6:	0005      	movs	r5, r0
    f8c8:	2300      	movs	r3, #0
    f8ca:	220a      	movs	r2, #10
    f8cc:	0038      	movs	r0, r7
    f8ce:	f001 fb87 	bl	10fe0 <__multadd>
    f8d2:	46a2      	mov	sl, r4
    f8d4:	4680      	mov	r8, r0
    f8d6:	e7a3      	b.n	f820 <_dtoa_r+0x868>
    f8d8:	201c      	movs	r0, #28
    f8da:	9b06      	ldr	r3, [sp, #24]
    f8dc:	469c      	mov	ip, r3
    f8de:	4484      	add	ip, r0
    f8e0:	4663      	mov	r3, ip
    f8e2:	9306      	str	r3, [sp, #24]
    f8e4:	9b08      	ldr	r3, [sp, #32]
    f8e6:	469c      	mov	ip, r3
    f8e8:	4484      	add	ip, r0
    f8ea:	4663      	mov	r3, ip
    f8ec:	9308      	str	r3, [sp, #32]
    f8ee:	9b04      	ldr	r3, [sp, #16]
    f8f0:	469c      	mov	ip, r3
    f8f2:	4484      	add	ip, r0
    f8f4:	4663      	mov	r3, ip
    f8f6:	9304      	str	r3, [sp, #16]
    f8f8:	e754      	b.n	f7a4 <_dtoa_r+0x7ec>
    f8fa:	4649      	mov	r1, r9
    f8fc:	4658      	mov	r0, fp
    f8fe:	f001 fd71 	bl	113e4 <__mcmp>
    f902:	2800      	cmp	r0, #0
    f904:	db00      	blt.n	f908 <_dtoa_r+0x950>
    f906:	e763      	b.n	f7d0 <_dtoa_r+0x818>
    f908:	9b03      	ldr	r3, [sp, #12]
    f90a:	4659      	mov	r1, fp
    f90c:	3b01      	subs	r3, #1
    f90e:	9303      	str	r3, [sp, #12]
    f910:	220a      	movs	r2, #10
    f912:	2300      	movs	r3, #0
    f914:	4650      	mov	r0, sl
    f916:	f001 fb63 	bl	10fe0 <__multadd>
    f91a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f91c:	4683      	mov	fp, r0
    f91e:	2b00      	cmp	r3, #0
    f920:	d000      	beq.n	f924 <_dtoa_r+0x96c>
    f922:	e2ca      	b.n	feba <_dtoa_r+0xf02>
    f924:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f926:	2b00      	cmp	r3, #0
    f928:	dc00      	bgt.n	f92c <_dtoa_r+0x974>
    f92a:	e2d8      	b.n	fede <_dtoa_r+0xf26>
    f92c:	9307      	str	r3, [sp, #28]
    f92e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f930:	465d      	mov	r5, fp
    f932:	2400      	movs	r4, #0
    f934:	9f07      	ldr	r7, [sp, #28]
    f936:	469b      	mov	fp, r3
    f938:	e006      	b.n	f948 <_dtoa_r+0x990>
    f93a:	0029      	movs	r1, r5
    f93c:	2300      	movs	r3, #0
    f93e:	220a      	movs	r2, #10
    f940:	4650      	mov	r0, sl
    f942:	f001 fb4d 	bl	10fe0 <__multadd>
    f946:	0005      	movs	r5, r0
    f948:	4649      	mov	r1, r9
    f94a:	0028      	movs	r0, r5
    f94c:	f7ff fa8a 	bl	ee64 <quorem>
    f950:	465b      	mov	r3, fp
    f952:	3030      	adds	r0, #48	; 0x30
    f954:	5518      	strb	r0, [r3, r4]
    f956:	3401      	adds	r4, #1
    f958:	42bc      	cmp	r4, r7
    f95a:	dbee      	blt.n	f93a <_dtoa_r+0x982>
    f95c:	46ab      	mov	fp, r5
    f95e:	0006      	movs	r6, r0
    f960:	9c07      	ldr	r4, [sp, #28]
    f962:	2c00      	cmp	r4, #0
    f964:	dc00      	bgt.n	f968 <_dtoa_r+0x9b0>
    f966:	e237      	b.n	fdd8 <_dtoa_r+0xe20>
    f968:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f96a:	2700      	movs	r7, #0
    f96c:	469c      	mov	ip, r3
    f96e:	4464      	add	r4, ip
    f970:	4659      	mov	r1, fp
    f972:	2201      	movs	r2, #1
    f974:	4650      	mov	r0, sl
    f976:	f001 fcd5 	bl	11324 <__lshift>
    f97a:	4649      	mov	r1, r9
    f97c:	4683      	mov	fp, r0
    f97e:	f001 fd31 	bl	113e4 <__mcmp>
    f982:	2800      	cmp	r0, #0
    f984:	dc00      	bgt.n	f988 <_dtoa_r+0x9d0>
    f986:	e144      	b.n	fc12 <_dtoa_r+0xc5a>
    f988:	1e65      	subs	r5, r4, #1
    f98a:	782b      	ldrb	r3, [r5, #0]
    f98c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f98e:	e006      	b.n	f99e <_dtoa_r+0x9e6>
    f990:	4295      	cmp	r5, r2
    f992:	d100      	bne.n	f996 <_dtoa_r+0x9de>
    f994:	e0b1      	b.n	fafa <_dtoa_r+0xb42>
    f996:	3c02      	subs	r4, #2
    f998:	7823      	ldrb	r3, [r4, #0]
    f99a:	002c      	movs	r4, r5
    f99c:	3d01      	subs	r5, #1
    f99e:	2b39      	cmp	r3, #57	; 0x39
    f9a0:	d0f6      	beq.n	f990 <_dtoa_r+0x9d8>
    f9a2:	3301      	adds	r3, #1
    f9a4:	702b      	strb	r3, [r5, #0]
    f9a6:	4649      	mov	r1, r9
    f9a8:	4650      	mov	r0, sl
    f9aa:	f001 fb0f 	bl	10fcc <_Bfree>
    f9ae:	4643      	mov	r3, r8
    f9b0:	2b00      	cmp	r3, #0
    f9b2:	d100      	bne.n	f9b6 <_dtoa_r+0x9fe>
    f9b4:	e52f      	b.n	f416 <_dtoa_r+0x45e>
    f9b6:	2f00      	cmp	r7, #0
    f9b8:	d005      	beq.n	f9c6 <_dtoa_r+0xa0e>
    f9ba:	4547      	cmp	r7, r8
    f9bc:	d003      	beq.n	f9c6 <_dtoa_r+0xa0e>
    f9be:	0039      	movs	r1, r7
    f9c0:	4650      	mov	r0, sl
    f9c2:	f001 fb03 	bl	10fcc <_Bfree>
    f9c6:	4641      	mov	r1, r8
    f9c8:	4650      	mov	r0, sl
    f9ca:	f001 faff 	bl	10fcc <_Bfree>
    f9ce:	e522      	b.n	f416 <_dtoa_r+0x45e>
    f9d0:	0013      	movs	r3, r2
    f9d2:	e675      	b.n	f6c0 <_dtoa_r+0x708>
    f9d4:	2e00      	cmp	r6, #0
    f9d6:	d000      	beq.n	f9da <_dtoa_r+0xa22>
    f9d8:	e6ab      	b.n	f732 <_dtoa_r+0x77a>
    f9da:	033b      	lsls	r3, r7, #12
    f9dc:	2400      	movs	r4, #0
    f9de:	2b00      	cmp	r3, #0
    f9e0:	d000      	beq.n	f9e4 <_dtoa_r+0xa2c>
    f9e2:	e6bf      	b.n	f764 <_dtoa_r+0x7ac>
    f9e4:	4bba      	ldr	r3, [pc, #744]	; (fcd0 <_dtoa_r+0xd18>)
    f9e6:	423b      	tst	r3, r7
    f9e8:	d100      	bne.n	f9ec <_dtoa_r+0xa34>
    f9ea:	e6bb      	b.n	f764 <_dtoa_r+0x7ac>
    f9ec:	9b06      	ldr	r3, [sp, #24]
    f9ee:	3401      	adds	r4, #1
    f9f0:	3301      	adds	r3, #1
    f9f2:	9306      	str	r3, [sp, #24]
    f9f4:	9b04      	ldr	r3, [sp, #16]
    f9f6:	3301      	adds	r3, #1
    f9f8:	9304      	str	r3, [sp, #16]
    f9fa:	e6b3      	b.n	f764 <_dtoa_r+0x7ac>
    f9fc:	2301      	movs	r3, #1
    f9fe:	930b      	str	r3, [sp, #44]	; 0x2c
    fa00:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    fa02:	2b00      	cmp	r3, #0
    fa04:	dc00      	bgt.n	fa08 <_dtoa_r+0xa50>
    fa06:	e0d1      	b.n	fbac <_dtoa_r+0xbf4>
    fa08:	001d      	movs	r5, r3
    fa0a:	4698      	mov	r8, r3
    fa0c:	930e      	str	r3, [sp, #56]	; 0x38
    fa0e:	9307      	str	r3, [sp, #28]
    fa10:	f7ff fbc8 	bl	f1a4 <_dtoa_r+0x1ec>
    fa14:	9b07      	ldr	r3, [sp, #28]
    fa16:	2b00      	cmp	r3, #0
    fa18:	dd00      	ble.n	fa1c <_dtoa_r+0xa64>
    fa1a:	e553      	b.n	f4c4 <_dtoa_r+0x50c>
    fa1c:	d000      	beq.n	fa20 <_dtoa_r+0xa68>
    fa1e:	e0ad      	b.n	fb7c <_dtoa_r+0xbc4>
    fa20:	9804      	ldr	r0, [sp, #16]
    fa22:	9905      	ldr	r1, [sp, #20]
    fa24:	2200      	movs	r2, #0
    fa26:	4bab      	ldr	r3, [pc, #684]	; (fcd4 <_dtoa_r+0xd1c>)
    fa28:	f7fc fc5e 	bl	c2e8 <__aeabi_dmul>
    fa2c:	003b      	movs	r3, r7
    fa2e:	0032      	movs	r2, r6
    fa30:	f7fa fe8e 	bl	a750 <__aeabi_dcmpge>
    fa34:	2300      	movs	r3, #0
    fa36:	4699      	mov	r9, r3
    fa38:	4698      	mov	r8, r3
    fa3a:	2800      	cmp	r0, #0
    fa3c:	d055      	beq.n	faea <_dtoa_r+0xb32>
    fa3e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    fa40:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    fa42:	43db      	mvns	r3, r3
    fa44:	9303      	str	r3, [sp, #12]
    fa46:	4649      	mov	r1, r9
    fa48:	4650      	mov	r0, sl
    fa4a:	f001 fabf 	bl	10fcc <_Bfree>
    fa4e:	4643      	mov	r3, r8
    fa50:	2b00      	cmp	r3, #0
    fa52:	d100      	bne.n	fa56 <_dtoa_r+0xa9e>
    fa54:	e4df      	b.n	f416 <_dtoa_r+0x45e>
    fa56:	e7b6      	b.n	f9c6 <_dtoa_r+0xa0e>
    fa58:	464a      	mov	r2, r9
    fa5a:	4659      	mov	r1, fp
    fa5c:	4650      	mov	r0, sl
    fa5e:	f001 fc01 	bl	11264 <__pow5mult>
    fa62:	4683      	mov	fp, r0
    fa64:	e653      	b.n	f70e <_dtoa_r+0x756>
    fa66:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    fa68:	2a00      	cmp	r2, #0
    fa6a:	d100      	bne.n	fa6e <_dtoa_r+0xab6>
    fa6c:	e1b6      	b.n	fddc <_dtoa_r+0xe24>
    fa6e:	4a9a      	ldr	r2, [pc, #616]	; (fcd8 <_dtoa_r+0xd20>)
    fa70:	464c      	mov	r4, r9
    fa72:	4694      	mov	ip, r2
    fa74:	9a06      	ldr	r2, [sp, #24]
    fa76:	4463      	add	r3, ip
    fa78:	9208      	str	r2, [sp, #32]
    fa7a:	e5d5      	b.n	f628 <_dtoa_r+0x670>
    fa7c:	2e00      	cmp	r6, #0
    fa7e:	d000      	beq.n	fa82 <_dtoa_r+0xaca>
    fa80:	e670      	b.n	f764 <_dtoa_r+0x7ac>
    fa82:	e7aa      	b.n	f9da <_dtoa_r+0xa22>
    fa84:	f001 faac 	bl	10fe0 <__multadd>
    fa88:	46a2      	mov	sl, r4
    fa8a:	0005      	movs	r5, r0
    fa8c:	4680      	mov	r8, r0
    fa8e:	e6c7      	b.n	f820 <_dtoa_r+0x868>
    fa90:	2301      	movs	r3, #1
    fa92:	469b      	mov	fp, r3
    fa94:	e6e2      	b.n	f85c <_dtoa_r+0x8a4>
    fa96:	2300      	movs	r3, #0
    fa98:	930b      	str	r3, [sp, #44]	; 0x2c
    fa9a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    fa9c:	2b02      	cmp	r3, #2
    fa9e:	d0af      	beq.n	fa00 <_dtoa_r+0xa48>
    faa0:	2400      	movs	r4, #0
    faa2:	4653      	mov	r3, sl
    faa4:	0021      	movs	r1, r4
    faa6:	645c      	str	r4, [r3, #68]	; 0x44
    faa8:	4650      	mov	r0, sl
    faaa:	f001 fa67 	bl	10f7c <_Balloc>
    faae:	4653      	mov	r3, sl
    fab0:	6418      	str	r0, [r3, #64]	; 0x40
    fab2:	2301      	movs	r3, #1
    fab4:	425b      	negs	r3, r3
    fab6:	9307      	str	r3, [sp, #28]
    fab8:	930e      	str	r3, [sp, #56]	; 0x38
    faba:	3302      	adds	r3, #2
    fabc:	900a      	str	r0, [sp, #40]	; 0x28
    fabe:	9423      	str	r4, [sp, #140]	; 0x8c
    fac0:	930b      	str	r3, [sp, #44]	; 0x2c
    fac2:	e4ec      	b.n	f49e <_dtoa_r+0x4e6>
    fac4:	9b22      	ldr	r3, [sp, #136]	; 0x88
    fac6:	2b02      	cmp	r3, #2
    fac8:	dc00      	bgt.n	facc <_dtoa_r+0xb14>
    faca:	e685      	b.n	f7d8 <_dtoa_r+0x820>
    facc:	9b07      	ldr	r3, [sp, #28]
    face:	2b00      	cmp	r3, #0
    fad0:	d1b5      	bne.n	fa3e <_dtoa_r+0xa86>
    fad2:	4649      	mov	r1, r9
    fad4:	2205      	movs	r2, #5
    fad6:	4650      	mov	r0, sl
    fad8:	f001 fa82 	bl	10fe0 <__multadd>
    fadc:	4681      	mov	r9, r0
    fade:	0001      	movs	r1, r0
    fae0:	4658      	mov	r0, fp
    fae2:	f001 fc7f 	bl	113e4 <__mcmp>
    fae6:	2800      	cmp	r0, #0
    fae8:	dda9      	ble.n	fa3e <_dtoa_r+0xa86>
    faea:	2331      	movs	r3, #49	; 0x31
    faec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    faee:	7013      	strb	r3, [r2, #0]
    faf0:	9b03      	ldr	r3, [sp, #12]
    faf2:	1c54      	adds	r4, r2, #1
    faf4:	3301      	adds	r3, #1
    faf6:	9303      	str	r3, [sp, #12]
    faf8:	e7a5      	b.n	fa46 <_dtoa_r+0xa8e>
    fafa:	9b03      	ldr	r3, [sp, #12]
    fafc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    fafe:	3301      	adds	r3, #1
    fb00:	9303      	str	r3, [sp, #12]
    fb02:	2331      	movs	r3, #49	; 0x31
    fb04:	7013      	strb	r3, [r2, #0]
    fb06:	e74e      	b.n	f9a6 <_dtoa_r+0x9ee>
    fb08:	2300      	movs	r3, #0
    fb0a:	930b      	str	r3, [sp, #44]	; 0x2c
    fb0c:	f7ff fb3d 	bl	f18a <_dtoa_r+0x1d2>
    fb10:	9b06      	ldr	r3, [sp, #24]
    fb12:	465c      	mov	r4, fp
    fb14:	469b      	mov	fp, r3
    fb16:	9b07      	ldr	r3, [sp, #28]
    fb18:	469a      	mov	sl, r3
    fb1a:	e47c      	b.n	f416 <_dtoa_r+0x45e>
    fb1c:	4640      	mov	r0, r8
    fb1e:	f7fd f9cd 	bl	cebc <__aeabi_i2d>
    fb22:	0032      	movs	r2, r6
    fb24:	003b      	movs	r3, r7
    fb26:	f7fc fbdf 	bl	c2e8 <__aeabi_dmul>
    fb2a:	2200      	movs	r2, #0
    fb2c:	4b6b      	ldr	r3, [pc, #428]	; (fcdc <_dtoa_r+0xd24>)
    fb2e:	f7fb fc97 	bl	b460 <__aeabi_dadd>
    fb32:	4a6b      	ldr	r2, [pc, #428]	; (fce0 <_dtoa_r+0xd28>)
    fb34:	000b      	movs	r3, r1
    fb36:	4694      	mov	ip, r2
    fb38:	4463      	add	r3, ip
    fb3a:	9008      	str	r0, [sp, #32]
    fb3c:	9109      	str	r1, [sp, #36]	; 0x24
    fb3e:	9309      	str	r3, [sp, #36]	; 0x24
    fb40:	2200      	movs	r2, #0
    fb42:	4b64      	ldr	r3, [pc, #400]	; (fcd4 <_dtoa_r+0xd1c>)
    fb44:	0030      	movs	r0, r6
    fb46:	0039      	movs	r1, r7
    fb48:	f7fc fe4e 	bl	c7e8 <__aeabi_dsub>
    fb4c:	9e08      	ldr	r6, [sp, #32]
    fb4e:	9f09      	ldr	r7, [sp, #36]	; 0x24
    fb50:	0032      	movs	r2, r6
    fb52:	003b      	movs	r3, r7
    fb54:	0004      	movs	r4, r0
    fb56:	000d      	movs	r5, r1
    fb58:	f7fa fdf0 	bl	a73c <__aeabi_dcmpgt>
    fb5c:	2800      	cmp	r0, #0
    fb5e:	d000      	beq.n	fb62 <_dtoa_r+0xbaa>
    fb60:	e0b2      	b.n	fcc8 <_dtoa_r+0xd10>
    fb62:	2080      	movs	r0, #128	; 0x80
    fb64:	0600      	lsls	r0, r0, #24
    fb66:	4684      	mov	ip, r0
    fb68:	0039      	movs	r1, r7
    fb6a:	4461      	add	r1, ip
    fb6c:	000b      	movs	r3, r1
    fb6e:	0032      	movs	r2, r6
    fb70:	0020      	movs	r0, r4
    fb72:	0029      	movs	r1, r5
    fb74:	f7fa fdce 	bl	a714 <__aeabi_dcmplt>
    fb78:	2800      	cmp	r0, #0
    fb7a:	d057      	beq.n	fc2c <_dtoa_r+0xc74>
    fb7c:	2300      	movs	r3, #0
    fb7e:	4699      	mov	r9, r3
    fb80:	4698      	mov	r8, r3
    fb82:	e75c      	b.n	fa3e <_dtoa_r+0xa86>
    fb84:	980a      	ldr	r0, [sp, #40]	; 0x28
    fb86:	f7ff fa4c 	bl	f022 <_dtoa_r+0x6a>
    fb8a:	1ae2      	subs	r2, r4, r3
    fb8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    fb8e:	46a1      	mov	r9, r4
    fb90:	469c      	mov	ip, r3
    fb92:	4494      	add	ip, r2
    fb94:	4663      	mov	r3, ip
    fb96:	2400      	movs	r4, #0
    fb98:	930d      	str	r3, [sp, #52]	; 0x34
    fb9a:	e53e      	b.n	f61a <_dtoa_r+0x662>
    fb9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    fb9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    fba0:	9208      	str	r2, [sp, #32]
    fba2:	9309      	str	r3, [sp, #36]	; 0x24
    fba4:	2302      	movs	r3, #2
    fba6:	4698      	mov	r8, r3
    fba8:	f7ff fb3a 	bl	f220 <_dtoa_r+0x268>
    fbac:	2300      	movs	r3, #0
    fbae:	4652      	mov	r2, sl
    fbb0:	2100      	movs	r1, #0
    fbb2:	6453      	str	r3, [r2, #68]	; 0x44
    fbb4:	4650      	mov	r0, sl
    fbb6:	f001 f9e1 	bl	10f7c <_Balloc>
    fbba:	4653      	mov	r3, sl
    fbbc:	6418      	str	r0, [r3, #64]	; 0x40
    fbbe:	2301      	movs	r3, #1
    fbc0:	900a      	str	r0, [sp, #40]	; 0x28
    fbc2:	9307      	str	r3, [sp, #28]
    fbc4:	9323      	str	r3, [sp, #140]	; 0x8c
    fbc6:	930e      	str	r3, [sp, #56]	; 0x38
    fbc8:	f7ff fb07 	bl	f1da <_dtoa_r+0x222>
    fbcc:	4643      	mov	r3, r8
    fbce:	930c      	str	r3, [sp, #48]	; 0x30
    fbd0:	465b      	mov	r3, fp
    fbd2:	9a06      	ldr	r2, [sp, #24]
    fbd4:	46a8      	mov	r8, r5
    fbd6:	46b3      	mov	fp, r6
    fbd8:	4655      	mov	r5, sl
    fbda:	9e04      	ldr	r6, [sp, #16]
    fbdc:	4691      	mov	r9, r2
    fbde:	46ba      	mov	sl, r7
    fbe0:	2b00      	cmp	r3, #0
    fbe2:	dd10      	ble.n	fc06 <_dtoa_r+0xc4e>
    fbe4:	4659      	mov	r1, fp
    fbe6:	2201      	movs	r2, #1
    fbe8:	0038      	movs	r0, r7
    fbea:	f001 fb9b 	bl	11324 <__lshift>
    fbee:	4649      	mov	r1, r9
    fbf0:	4683      	mov	fp, r0
    fbf2:	f001 fbf7 	bl	113e4 <__mcmp>
    fbf6:	2800      	cmp	r0, #0
    fbf8:	dc00      	bgt.n	fbfc <_dtoa_r+0xc44>
    fbfa:	e157      	b.n	feac <_dtoa_r+0xef4>
    fbfc:	2e39      	cmp	r6, #57	; 0x39
    fbfe:	d100      	bne.n	fc02 <_dtoa_r+0xc4a>
    fc00:	e122      	b.n	fe48 <_dtoa_r+0xe90>
    fc02:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    fc04:	3631      	adds	r6, #49	; 0x31
    fc06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    fc08:	4647      	mov	r7, r8
    fc0a:	1c6c      	adds	r4, r5, #1
    fc0c:	702e      	strb	r6, [r5, #0]
    fc0e:	4698      	mov	r8, r3
    fc10:	e6c9      	b.n	f9a6 <_dtoa_r+0x9ee>
    fc12:	2800      	cmp	r0, #0
    fc14:	d103      	bne.n	fc1e <_dtoa_r+0xc66>
    fc16:	07f3      	lsls	r3, r6, #31
    fc18:	d501      	bpl.n	fc1e <_dtoa_r+0xc66>
    fc1a:	e6b5      	b.n	f988 <_dtoa_r+0x9d0>
    fc1c:	001c      	movs	r4, r3
    fc1e:	1e63      	subs	r3, r4, #1
    fc20:	781a      	ldrb	r2, [r3, #0]
    fc22:	2a30      	cmp	r2, #48	; 0x30
    fc24:	d0fa      	beq.n	fc1c <_dtoa_r+0xc64>
    fc26:	e6be      	b.n	f9a6 <_dtoa_r+0x9ee>
    fc28:	9b12      	ldr	r3, [sp, #72]	; 0x48
    fc2a:	4699      	mov	r9, r3
    fc2c:	9e10      	ldr	r6, [sp, #64]	; 0x40
    fc2e:	9f11      	ldr	r7, [sp, #68]	; 0x44
    fc30:	e435      	b.n	f49e <_dtoa_r+0x4e6>
    fc32:	2501      	movs	r5, #1
    fc34:	f7ff fab4 	bl	f1a0 <_dtoa_r+0x1e8>
    fc38:	9b03      	ldr	r3, [sp, #12]
    fc3a:	2b00      	cmp	r3, #0
    fc3c:	d100      	bne.n	fc40 <_dtoa_r+0xc88>
    fc3e:	e0d4      	b.n	fdea <_dtoa_r+0xe32>
    fc40:	9810      	ldr	r0, [sp, #64]	; 0x40
    fc42:	9911      	ldr	r1, [sp, #68]	; 0x44
    fc44:	425c      	negs	r4, r3
    fc46:	230f      	movs	r3, #15
    fc48:	4a26      	ldr	r2, [pc, #152]	; (fce4 <_dtoa_r+0xd2c>)
    fc4a:	4023      	ands	r3, r4
    fc4c:	00db      	lsls	r3, r3, #3
    fc4e:	18d3      	adds	r3, r2, r3
    fc50:	681a      	ldr	r2, [r3, #0]
    fc52:	685b      	ldr	r3, [r3, #4]
    fc54:	f7fc fb48 	bl	c2e8 <__aeabi_dmul>
    fc58:	1124      	asrs	r4, r4, #4
    fc5a:	0006      	movs	r6, r0
    fc5c:	000f      	movs	r7, r1
    fc5e:	2c00      	cmp	r4, #0
    fc60:	d100      	bne.n	fc64 <_dtoa_r+0xcac>
    fc62:	e149      	b.n	fef8 <_dtoa_r+0xf40>
    fc64:	2302      	movs	r3, #2
    fc66:	4698      	mov	r8, r3
    fc68:	4d1f      	ldr	r5, [pc, #124]	; (fce8 <_dtoa_r+0xd30>)
    fc6a:	2301      	movs	r3, #1
    fc6c:	4223      	tst	r3, r4
    fc6e:	d009      	beq.n	fc84 <_dtoa_r+0xccc>
    fc70:	469c      	mov	ip, r3
    fc72:	682a      	ldr	r2, [r5, #0]
    fc74:	686b      	ldr	r3, [r5, #4]
    fc76:	0030      	movs	r0, r6
    fc78:	0039      	movs	r1, r7
    fc7a:	44e0      	add	r8, ip
    fc7c:	f7fc fb34 	bl	c2e8 <__aeabi_dmul>
    fc80:	0006      	movs	r6, r0
    fc82:	000f      	movs	r7, r1
    fc84:	1064      	asrs	r4, r4, #1
    fc86:	3508      	adds	r5, #8
    fc88:	2c00      	cmp	r4, #0
    fc8a:	d1ee      	bne.n	fc6a <_dtoa_r+0xcb2>
    fc8c:	f7ff fae4 	bl	f258 <_dtoa_r+0x2a0>
    fc90:	9b03      	ldr	r3, [sp, #12]
    fc92:	2730      	movs	r7, #48	; 0x30
    fc94:	3301      	adds	r3, #1
    fc96:	9303      	str	r3, [sp, #12]
    fc98:	2330      	movs	r3, #48	; 0x30
    fc9a:	702b      	strb	r3, [r5, #0]
    fc9c:	e4ac      	b.n	f5f8 <_dtoa_r+0x640>
    fc9e:	6859      	ldr	r1, [r3, #4]
    fca0:	4650      	mov	r0, sl
    fca2:	f001 f96b 	bl	10f7c <_Balloc>
    fca6:	4643      	mov	r3, r8
    fca8:	4641      	mov	r1, r8
    fcaa:	0004      	movs	r4, r0
    fcac:	691b      	ldr	r3, [r3, #16]
    fcae:	310c      	adds	r1, #12
    fcb0:	1c9a      	adds	r2, r3, #2
    fcb2:	0092      	lsls	r2, r2, #2
    fcb4:	300c      	adds	r0, #12
    fcb6:	f7fd fa29 	bl	d10c <memcpy>
    fcba:	2201      	movs	r2, #1
    fcbc:	0021      	movs	r1, r4
    fcbe:	4650      	mov	r0, sl
    fcc0:	f001 fb30 	bl	11324 <__lshift>
    fcc4:	900c      	str	r0, [sp, #48]	; 0x30
    fcc6:	e599      	b.n	f7fc <_dtoa_r+0x844>
    fcc8:	2300      	movs	r3, #0
    fcca:	4699      	mov	r9, r3
    fccc:	4698      	mov	r8, r3
    fcce:	e70c      	b.n	faea <_dtoa_r+0xb32>
    fcd0:	7ff00000 	.word	0x7ff00000
    fcd4:	40140000 	.word	0x40140000
    fcd8:	00000433 	.word	0x00000433
    fcdc:	401c0000 	.word	0x401c0000
    fce0:	fcc00000 	.word	0xfcc00000
    fce4:	000125e8 	.word	0x000125e8
    fce8:	000125c0 	.word	0x000125c0
    fcec:	9b12      	ldr	r3, [sp, #72]	; 0x48
    fcee:	498f      	ldr	r1, [pc, #572]	; (ff2c <_dtoa_r+0xf74>)
    fcf0:	3b01      	subs	r3, #1
    fcf2:	00db      	lsls	r3, r3, #3
    fcf4:	18c9      	adds	r1, r1, r3
    fcf6:	6808      	ldr	r0, [r1, #0]
    fcf8:	6849      	ldr	r1, [r1, #4]
    fcfa:	9a08      	ldr	r2, [sp, #32]
    fcfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fcfe:	f7fc faf3 	bl	c2e8 <__aeabi_dmul>
    fd02:	9014      	str	r0, [sp, #80]	; 0x50
    fd04:	9115      	str	r1, [sp, #84]	; 0x54
    fd06:	0039      	movs	r1, r7
    fd08:	0030      	movs	r0, r6
    fd0a:	f7fd f8a3 	bl	ce54 <__aeabi_d2iz>
    fd0e:	0005      	movs	r5, r0
    fd10:	f7fd f8d4 	bl	cebc <__aeabi_i2d>
    fd14:	0002      	movs	r2, r0
    fd16:	000b      	movs	r3, r1
    fd18:	0030      	movs	r0, r6
    fd1a:	0039      	movs	r1, r7
    fd1c:	f7fc fd64 	bl	c7e8 <__aeabi_dsub>
    fd20:	9b12      	ldr	r3, [sp, #72]	; 0x48
    fd22:	9008      	str	r0, [sp, #32]
    fd24:	9109      	str	r1, [sp, #36]	; 0x24
    fd26:	990a      	ldr	r1, [sp, #40]	; 0x28
    fd28:	001a      	movs	r2, r3
    fd2a:	468c      	mov	ip, r1
    fd2c:	3530      	adds	r5, #48	; 0x30
    fd2e:	4462      	add	r2, ip
    fd30:	1c4c      	adds	r4, r1, #1
    fd32:	700d      	strb	r5, [r1, #0]
    fd34:	4690      	mov	r8, r2
    fd36:	2b01      	cmp	r3, #1
    fd38:	d01b      	beq.n	fd72 <_dtoa_r+0xdba>
    fd3a:	9808      	ldr	r0, [sp, #32]
    fd3c:	9909      	ldr	r1, [sp, #36]	; 0x24
    fd3e:	0025      	movs	r5, r4
    fd40:	2200      	movs	r2, #0
    fd42:	4b7b      	ldr	r3, [pc, #492]	; (ff30 <_dtoa_r+0xf78>)
    fd44:	f7fc fad0 	bl	c2e8 <__aeabi_dmul>
    fd48:	000f      	movs	r7, r1
    fd4a:	0006      	movs	r6, r0
    fd4c:	f7fd f882 	bl	ce54 <__aeabi_d2iz>
    fd50:	0004      	movs	r4, r0
    fd52:	f7fd f8b3 	bl	cebc <__aeabi_i2d>
    fd56:	3430      	adds	r4, #48	; 0x30
    fd58:	0002      	movs	r2, r0
    fd5a:	000b      	movs	r3, r1
    fd5c:	0030      	movs	r0, r6
    fd5e:	0039      	movs	r1, r7
    fd60:	f7fc fd42 	bl	c7e8 <__aeabi_dsub>
    fd64:	702c      	strb	r4, [r5, #0]
    fd66:	3501      	adds	r5, #1
    fd68:	45a8      	cmp	r8, r5
    fd6a:	d1e9      	bne.n	fd40 <_dtoa_r+0xd88>
    fd6c:	4644      	mov	r4, r8
    fd6e:	9008      	str	r0, [sp, #32]
    fd70:	9109      	str	r1, [sp, #36]	; 0x24
    fd72:	9814      	ldr	r0, [sp, #80]	; 0x50
    fd74:	9915      	ldr	r1, [sp, #84]	; 0x54
    fd76:	2200      	movs	r2, #0
    fd78:	4b6e      	ldr	r3, [pc, #440]	; (ff34 <_dtoa_r+0xf7c>)
    fd7a:	f7fb fb71 	bl	b460 <__aeabi_dadd>
    fd7e:	9a08      	ldr	r2, [sp, #32]
    fd80:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fd82:	f7fa fcc7 	bl	a714 <__aeabi_dcmplt>
    fd86:	2800      	cmp	r0, #0
    fd88:	d067      	beq.n	fe5a <_dtoa_r+0xea2>
    fd8a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    fd8c:	1e65      	subs	r5, r4, #1
    fd8e:	9303      	str	r3, [sp, #12]
    fd90:	782f      	ldrb	r7, [r5, #0]
    fd92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fd94:	e42e      	b.n	f5f4 <_dtoa_r+0x63c>
    fd96:	4643      	mov	r3, r8
    fd98:	46b3      	mov	fp, r6
    fd9a:	930c      	str	r3, [sp, #48]	; 0x30
    fd9c:	9e04      	ldr	r6, [sp, #16]
    fd9e:	9b06      	ldr	r3, [sp, #24]
    fda0:	46a8      	mov	r8, r5
    fda2:	4699      	mov	r9, r3
    fda4:	4655      	mov	r5, sl
    fda6:	46ba      	mov	sl, r7
    fda8:	2e39      	cmp	r6, #57	; 0x39
    fdaa:	d04d      	beq.n	fe48 <_dtoa_r+0xe90>
    fdac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    fdae:	3601      	adds	r6, #1
    fdb0:	4647      	mov	r7, r8
    fdb2:	1c6c      	adds	r4, r5, #1
    fdb4:	702e      	strb	r6, [r5, #0]
    fdb6:	4698      	mov	r8, r3
    fdb8:	e5f5      	b.n	f9a6 <_dtoa_r+0x9ee>
    fdba:	4642      	mov	r2, r8
    fdbc:	9b06      	ldr	r3, [sp, #24]
    fdbe:	46b3      	mov	fp, r6
    fdc0:	46ba      	mov	sl, r7
    fdc2:	9e04      	ldr	r6, [sp, #16]
    fdc4:	4699      	mov	r9, r3
    fdc6:	002f      	movs	r7, r5
    fdc8:	4690      	mov	r8, r2
    fdca:	e5d1      	b.n	f970 <_dtoa_r+0x9b8>
    fdcc:	9b06      	ldr	r3, [sp, #24]
    fdce:	9a07      	ldr	r2, [sp, #28]
    fdd0:	1a9b      	subs	r3, r3, r2
    fdd2:	9308      	str	r3, [sp, #32]
    fdd4:	2300      	movs	r3, #0
    fdd6:	e427      	b.n	f628 <_dtoa_r+0x670>
    fdd8:	2401      	movs	r4, #1
    fdda:	e5c5      	b.n	f968 <_dtoa_r+0x9b0>
    fddc:	2336      	movs	r3, #54	; 0x36
    fdde:	9a16      	ldr	r2, [sp, #88]	; 0x58
    fde0:	464c      	mov	r4, r9
    fde2:	1a9b      	subs	r3, r3, r2
    fde4:	9a06      	ldr	r2, [sp, #24]
    fde6:	9208      	str	r2, [sp, #32]
    fde8:	e41e      	b.n	f628 <_dtoa_r+0x670>
    fdea:	2302      	movs	r3, #2
    fdec:	9e10      	ldr	r6, [sp, #64]	; 0x40
    fdee:	9f11      	ldr	r7, [sp, #68]	; 0x44
    fdf0:	4698      	mov	r8, r3
    fdf2:	f7ff fa31 	bl	f258 <_dtoa_r+0x2a0>
    fdf6:	9b07      	ldr	r3, [sp, #28]
    fdf8:	2b00      	cmp	r3, #0
    fdfa:	d100      	bne.n	fdfe <_dtoa_r+0xe46>
    fdfc:	e68e      	b.n	fb1c <_dtoa_r+0xb64>
    fdfe:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    fe00:	2c00      	cmp	r4, #0
    fe02:	dc00      	bgt.n	fe06 <_dtoa_r+0xe4e>
    fe04:	e712      	b.n	fc2c <_dtoa_r+0xc74>
    fe06:	9b03      	ldr	r3, [sp, #12]
    fe08:	2200      	movs	r2, #0
    fe0a:	3b01      	subs	r3, #1
    fe0c:	9313      	str	r3, [sp, #76]	; 0x4c
    fe0e:	0030      	movs	r0, r6
    fe10:	4b47      	ldr	r3, [pc, #284]	; (ff30 <_dtoa_r+0xf78>)
    fe12:	0039      	movs	r1, r7
    fe14:	f7fc fa68 	bl	c2e8 <__aeabi_dmul>
    fe18:	0006      	movs	r6, r0
    fe1a:	4640      	mov	r0, r8
    fe1c:	000f      	movs	r7, r1
    fe1e:	3001      	adds	r0, #1
    fe20:	f7fd f84c 	bl	cebc <__aeabi_i2d>
    fe24:	0032      	movs	r2, r6
    fe26:	003b      	movs	r3, r7
    fe28:	f7fc fa5e 	bl	c2e8 <__aeabi_dmul>
    fe2c:	2200      	movs	r2, #0
    fe2e:	4b42      	ldr	r3, [pc, #264]	; (ff38 <_dtoa_r+0xf80>)
    fe30:	f7fb fb16 	bl	b460 <__aeabi_dadd>
    fe34:	4a41      	ldr	r2, [pc, #260]	; (ff3c <_dtoa_r+0xf84>)
    fe36:	000b      	movs	r3, r1
    fe38:	4694      	mov	ip, r2
    fe3a:	4463      	add	r3, ip
    fe3c:	9008      	str	r0, [sp, #32]
    fe3e:	9109      	str	r1, [sp, #36]	; 0x24
    fe40:	9412      	str	r4, [sp, #72]	; 0x48
    fe42:	9309      	str	r3, [sp, #36]	; 0x24
    fe44:	f7ff fa30 	bl	f2a8 <_dtoa_r+0x2f0>
    fe48:	2339      	movs	r3, #57	; 0x39
    fe4a:	702b      	strb	r3, [r5, #0]
    fe4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    fe4e:	4647      	mov	r7, r8
    fe50:	1c6c      	adds	r4, r5, #1
    fe52:	4698      	mov	r8, r3
    fe54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    fe56:	2339      	movs	r3, #57	; 0x39
    fe58:	e5a1      	b.n	f99e <_dtoa_r+0x9e6>
    fe5a:	9a14      	ldr	r2, [sp, #80]	; 0x50
    fe5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    fe5e:	2000      	movs	r0, #0
    fe60:	4934      	ldr	r1, [pc, #208]	; (ff34 <_dtoa_r+0xf7c>)
    fe62:	f7fc fcc1 	bl	c7e8 <__aeabi_dsub>
    fe66:	9a08      	ldr	r2, [sp, #32]
    fe68:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fe6a:	f7fa fc67 	bl	a73c <__aeabi_dcmpgt>
    fe6e:	2800      	cmp	r0, #0
    fe70:	d101      	bne.n	fe76 <_dtoa_r+0xebe>
    fe72:	e6db      	b.n	fc2c <_dtoa_r+0xc74>
    fe74:	001c      	movs	r4, r3
    fe76:	1e63      	subs	r3, r4, #1
    fe78:	781a      	ldrb	r2, [r3, #0]
    fe7a:	2a30      	cmp	r2, #48	; 0x30
    fe7c:	d0fa      	beq.n	fe74 <_dtoa_r+0xebc>
    fe7e:	f7ff fac8 	bl	f412 <_dtoa_r+0x45a>
    fe82:	4643      	mov	r3, r8
    fe84:	46b3      	mov	fp, r6
    fe86:	930c      	str	r3, [sp, #48]	; 0x30
    fe88:	9e04      	ldr	r6, [sp, #16]
    fe8a:	9b06      	ldr	r3, [sp, #24]
    fe8c:	46a8      	mov	r8, r5
    fe8e:	4699      	mov	r9, r3
    fe90:	4655      	mov	r5, sl
    fe92:	46ba      	mov	sl, r7
    fe94:	2e39      	cmp	r6, #57	; 0x39
    fe96:	d0d7      	beq.n	fe48 <_dtoa_r+0xe90>
    fe98:	2c00      	cmp	r4, #0
    fe9a:	dd00      	ble.n	fe9e <_dtoa_r+0xee6>
    fe9c:	e6b1      	b.n	fc02 <_dtoa_r+0xc4a>
    fe9e:	e6b2      	b.n	fc06 <_dtoa_r+0xc4e>
    fea0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    fea2:	464d      	mov	r5, r9
    fea4:	9203      	str	r2, [sp, #12]
    fea6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fea8:	f7ff fba4 	bl	f5f4 <_dtoa_r+0x63c>
    feac:	2800      	cmp	r0, #0
    feae:	d000      	beq.n	feb2 <_dtoa_r+0xefa>
    feb0:	e6a9      	b.n	fc06 <_dtoa_r+0xc4e>
    feb2:	07f3      	lsls	r3, r6, #31
    feb4:	d400      	bmi.n	feb8 <_dtoa_r+0xf00>
    feb6:	e6a6      	b.n	fc06 <_dtoa_r+0xc4e>
    feb8:	e6a0      	b.n	fbfc <_dtoa_r+0xc44>
    feba:	2300      	movs	r3, #0
    febc:	4641      	mov	r1, r8
    febe:	220a      	movs	r2, #10
    fec0:	4650      	mov	r0, sl
    fec2:	f001 f88d 	bl	10fe0 <__multadd>
    fec6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fec8:	4680      	mov	r8, r0
    feca:	2b00      	cmp	r3, #0
    fecc:	dd01      	ble.n	fed2 <_dtoa_r+0xf1a>
    fece:	9307      	str	r3, [sp, #28]
    fed0:	e486      	b.n	f7e0 <_dtoa_r+0x828>
    fed2:	9b22      	ldr	r3, [sp, #136]	; 0x88
    fed4:	2b02      	cmp	r3, #2
    fed6:	dc1f      	bgt.n	ff18 <_dtoa_r+0xf60>
    fed8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    feda:	9307      	str	r3, [sp, #28]
    fedc:	e480      	b.n	f7e0 <_dtoa_r+0x828>
    fede:	9b22      	ldr	r3, [sp, #136]	; 0x88
    fee0:	2b02      	cmp	r3, #2
    fee2:	dc19      	bgt.n	ff18 <_dtoa_r+0xf60>
    fee4:	4649      	mov	r1, r9
    fee6:	f7fe ffbd 	bl	ee64 <quorem>
    feea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    feec:	3030      	adds	r0, #48	; 0x30
    feee:	7018      	strb	r0, [r3, #0]
    fef0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fef2:	0006      	movs	r6, r0
    fef4:	9307      	str	r3, [sp, #28]
    fef6:	e533      	b.n	f960 <_dtoa_r+0x9a8>
    fef8:	2302      	movs	r3, #2
    fefa:	4698      	mov	r8, r3
    fefc:	f7ff f9ac 	bl	f258 <_dtoa_r+0x2a0>
    ff00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    ff02:	9c14      	ldr	r4, [sp, #80]	; 0x50
    ff04:	9303      	str	r3, [sp, #12]
    ff06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ff08:	001d      	movs	r5, r3
    ff0a:	f7ff fb73 	bl	f5f4 <_dtoa_r+0x63c>
    ff0e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    ff10:	9c14      	ldr	r4, [sp, #80]	; 0x50
    ff12:	9303      	str	r3, [sp, #12]
    ff14:	f7ff fa7f 	bl	f416 <_dtoa_r+0x45e>
    ff18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ff1a:	9307      	str	r3, [sp, #28]
    ff1c:	e5d6      	b.n	facc <_dtoa_r+0xb14>
    ff1e:	2b04      	cmp	r3, #4
    ff20:	d100      	bne.n	ff24 <_dtoa_r+0xf6c>
    ff22:	e43f      	b.n	f7a4 <_dtoa_r+0x7ec>
    ff24:	233c      	movs	r3, #60	; 0x3c
    ff26:	1a18      	subs	r0, r3, r0
    ff28:	e4d7      	b.n	f8da <_dtoa_r+0x922>
    ff2a:	46c0      	nop			; (mov r8, r8)
    ff2c:	000125e8 	.word	0x000125e8
    ff30:	40240000 	.word	0x40240000
    ff34:	3fe00000 	.word	0x3fe00000
    ff38:	401c0000 	.word	0x401c0000
    ff3c:	fcc00000 	.word	0xfcc00000

0000ff40 <__sflush_r>:
    ff40:	b5f0      	push	{r4, r5, r6, r7, lr}
    ff42:	46c6      	mov	lr, r8
    ff44:	b500      	push	{lr}
    ff46:	230c      	movs	r3, #12
    ff48:	5eca      	ldrsh	r2, [r1, r3]
    ff4a:	4680      	mov	r8, r0
    ff4c:	b293      	uxth	r3, r2
    ff4e:	000c      	movs	r4, r1
    ff50:	0719      	lsls	r1, r3, #28
    ff52:	d440      	bmi.n	ffd6 <__sflush_r+0x96>
    ff54:	2380      	movs	r3, #128	; 0x80
    ff56:	011b      	lsls	r3, r3, #4
    ff58:	4313      	orrs	r3, r2
    ff5a:	6862      	ldr	r2, [r4, #4]
    ff5c:	81a3      	strh	r3, [r4, #12]
    ff5e:	2a00      	cmp	r2, #0
    ff60:	dc00      	bgt.n	ff64 <__sflush_r+0x24>
    ff62:	e070      	b.n	10046 <__sflush_r+0x106>
    ff64:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    ff66:	2e00      	cmp	r6, #0
    ff68:	d031      	beq.n	ffce <__sflush_r+0x8e>
    ff6a:	4642      	mov	r2, r8
    ff6c:	4641      	mov	r1, r8
    ff6e:	6815      	ldr	r5, [r2, #0]
    ff70:	2200      	movs	r2, #0
    ff72:	b29b      	uxth	r3, r3
    ff74:	600a      	str	r2, [r1, #0]
    ff76:	04da      	lsls	r2, r3, #19
    ff78:	d400      	bmi.n	ff7c <__sflush_r+0x3c>
    ff7a:	e069      	b.n	10050 <__sflush_r+0x110>
    ff7c:	6d22      	ldr	r2, [r4, #80]	; 0x50
    ff7e:	075b      	lsls	r3, r3, #29
    ff80:	d506      	bpl.n	ff90 <__sflush_r+0x50>
    ff82:	6863      	ldr	r3, [r4, #4]
    ff84:	1ad2      	subs	r2, r2, r3
    ff86:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ff88:	2b00      	cmp	r3, #0
    ff8a:	d001      	beq.n	ff90 <__sflush_r+0x50>
    ff8c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    ff8e:	1ad2      	subs	r2, r2, r3
    ff90:	2300      	movs	r3, #0
    ff92:	69e1      	ldr	r1, [r4, #28]
    ff94:	4640      	mov	r0, r8
    ff96:	47b0      	blx	r6
    ff98:	1c43      	adds	r3, r0, #1
    ff9a:	d03d      	beq.n	10018 <__sflush_r+0xd8>
    ff9c:	89a3      	ldrh	r3, [r4, #12]
    ff9e:	4a3a      	ldr	r2, [pc, #232]	; (10088 <__sflush_r+0x148>)
    ffa0:	4013      	ands	r3, r2
    ffa2:	2200      	movs	r2, #0
    ffa4:	6062      	str	r2, [r4, #4]
    ffa6:	6922      	ldr	r2, [r4, #16]
    ffa8:	b21b      	sxth	r3, r3
    ffaa:	81a3      	strh	r3, [r4, #12]
    ffac:	6022      	str	r2, [r4, #0]
    ffae:	04db      	lsls	r3, r3, #19
    ffb0:	d447      	bmi.n	10042 <__sflush_r+0x102>
    ffb2:	4643      	mov	r3, r8
    ffb4:	6b21      	ldr	r1, [r4, #48]	; 0x30
    ffb6:	601d      	str	r5, [r3, #0]
    ffb8:	2900      	cmp	r1, #0
    ffba:	d008      	beq.n	ffce <__sflush_r+0x8e>
    ffbc:	0023      	movs	r3, r4
    ffbe:	3340      	adds	r3, #64	; 0x40
    ffc0:	4299      	cmp	r1, r3
    ffc2:	d002      	beq.n	ffca <__sflush_r+0x8a>
    ffc4:	4640      	mov	r0, r8
    ffc6:	f000 f967 	bl	10298 <_free_r>
    ffca:	2300      	movs	r3, #0
    ffcc:	6323      	str	r3, [r4, #48]	; 0x30
    ffce:	2000      	movs	r0, #0
    ffd0:	bc04      	pop	{r2}
    ffd2:	4690      	mov	r8, r2
    ffd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ffd6:	6926      	ldr	r6, [r4, #16]
    ffd8:	2e00      	cmp	r6, #0
    ffda:	d0f8      	beq.n	ffce <__sflush_r+0x8e>
    ffdc:	6822      	ldr	r2, [r4, #0]
    ffde:	6026      	str	r6, [r4, #0]
    ffe0:	1b95      	subs	r5, r2, r6
    ffe2:	2200      	movs	r2, #0
    ffe4:	079b      	lsls	r3, r3, #30
    ffe6:	d100      	bne.n	ffea <__sflush_r+0xaa>
    ffe8:	6962      	ldr	r2, [r4, #20]
    ffea:	60a2      	str	r2, [r4, #8]
    ffec:	2d00      	cmp	r5, #0
    ffee:	dc04      	bgt.n	fffa <__sflush_r+0xba>
    fff0:	e7ed      	b.n	ffce <__sflush_r+0x8e>
    fff2:	1836      	adds	r6, r6, r0
    fff4:	1a2d      	subs	r5, r5, r0
    fff6:	2d00      	cmp	r5, #0
    fff8:	dde9      	ble.n	ffce <__sflush_r+0x8e>
    fffa:	002b      	movs	r3, r5
    fffc:	0032      	movs	r2, r6
    fffe:	69e1      	ldr	r1, [r4, #28]
   10000:	4640      	mov	r0, r8
   10002:	6a67      	ldr	r7, [r4, #36]	; 0x24
   10004:	47b8      	blx	r7
   10006:	2800      	cmp	r0, #0
   10008:	dcf3      	bgt.n	fff2 <__sflush_r+0xb2>
   1000a:	2240      	movs	r2, #64	; 0x40
   1000c:	2001      	movs	r0, #1
   1000e:	89a3      	ldrh	r3, [r4, #12]
   10010:	4240      	negs	r0, r0
   10012:	4313      	orrs	r3, r2
   10014:	81a3      	strh	r3, [r4, #12]
   10016:	e7db      	b.n	ffd0 <__sflush_r+0x90>
   10018:	4643      	mov	r3, r8
   1001a:	6819      	ldr	r1, [r3, #0]
   1001c:	291d      	cmp	r1, #29
   1001e:	d8f4      	bhi.n	1000a <__sflush_r+0xca>
   10020:	4b1a      	ldr	r3, [pc, #104]	; (1008c <__sflush_r+0x14c>)
   10022:	2201      	movs	r2, #1
   10024:	40cb      	lsrs	r3, r1
   10026:	439a      	bics	r2, r3
   10028:	d1ef      	bne.n	1000a <__sflush_r+0xca>
   1002a:	89a3      	ldrh	r3, [r4, #12]
   1002c:	4e16      	ldr	r6, [pc, #88]	; (10088 <__sflush_r+0x148>)
   1002e:	6062      	str	r2, [r4, #4]
   10030:	4033      	ands	r3, r6
   10032:	6922      	ldr	r2, [r4, #16]
   10034:	b21b      	sxth	r3, r3
   10036:	81a3      	strh	r3, [r4, #12]
   10038:	6022      	str	r2, [r4, #0]
   1003a:	04db      	lsls	r3, r3, #19
   1003c:	d5b9      	bpl.n	ffb2 <__sflush_r+0x72>
   1003e:	2900      	cmp	r1, #0
   10040:	d1b7      	bne.n	ffb2 <__sflush_r+0x72>
   10042:	6520      	str	r0, [r4, #80]	; 0x50
   10044:	e7b5      	b.n	ffb2 <__sflush_r+0x72>
   10046:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   10048:	2a00      	cmp	r2, #0
   1004a:	dd00      	ble.n	1004e <__sflush_r+0x10e>
   1004c:	e78a      	b.n	ff64 <__sflush_r+0x24>
   1004e:	e7be      	b.n	ffce <__sflush_r+0x8e>
   10050:	2200      	movs	r2, #0
   10052:	2301      	movs	r3, #1
   10054:	69e1      	ldr	r1, [r4, #28]
   10056:	4640      	mov	r0, r8
   10058:	47b0      	blx	r6
   1005a:	0002      	movs	r2, r0
   1005c:	1c43      	adds	r3, r0, #1
   1005e:	d002      	beq.n	10066 <__sflush_r+0x126>
   10060:	89a3      	ldrh	r3, [r4, #12]
   10062:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   10064:	e78b      	b.n	ff7e <__sflush_r+0x3e>
   10066:	4643      	mov	r3, r8
   10068:	681b      	ldr	r3, [r3, #0]
   1006a:	2b00      	cmp	r3, #0
   1006c:	d0f8      	beq.n	10060 <__sflush_r+0x120>
   1006e:	2b1d      	cmp	r3, #29
   10070:	d001      	beq.n	10076 <__sflush_r+0x136>
   10072:	2b16      	cmp	r3, #22
   10074:	d103      	bne.n	1007e <__sflush_r+0x13e>
   10076:	4643      	mov	r3, r8
   10078:	2000      	movs	r0, #0
   1007a:	601d      	str	r5, [r3, #0]
   1007c:	e7a8      	b.n	ffd0 <__sflush_r+0x90>
   1007e:	2140      	movs	r1, #64	; 0x40
   10080:	89a3      	ldrh	r3, [r4, #12]
   10082:	430b      	orrs	r3, r1
   10084:	81a3      	strh	r3, [r4, #12]
   10086:	e7a3      	b.n	ffd0 <__sflush_r+0x90>
   10088:	fffff7ff 	.word	0xfffff7ff
   1008c:	20400001 	.word	0x20400001

00010090 <_fflush_r>:
   10090:	b570      	push	{r4, r5, r6, lr}
   10092:	0005      	movs	r5, r0
   10094:	000c      	movs	r4, r1
   10096:	2800      	cmp	r0, #0
   10098:	d002      	beq.n	100a0 <_fflush_r+0x10>
   1009a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1009c:	2b00      	cmp	r3, #0
   1009e:	d016      	beq.n	100ce <_fflush_r+0x3e>
   100a0:	220c      	movs	r2, #12
   100a2:	5ea3      	ldrsh	r3, [r4, r2]
   100a4:	2600      	movs	r6, #0
   100a6:	2b00      	cmp	r3, #0
   100a8:	d00f      	beq.n	100ca <_fflush_r+0x3a>
   100aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
   100ac:	07d2      	lsls	r2, r2, #31
   100ae:	d401      	bmi.n	100b4 <_fflush_r+0x24>
   100b0:	059b      	lsls	r3, r3, #22
   100b2:	d513      	bpl.n	100dc <_fflush_r+0x4c>
   100b4:	0021      	movs	r1, r4
   100b6:	0028      	movs	r0, r5
   100b8:	f7ff ff42 	bl	ff40 <__sflush_r>
   100bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
   100be:	0006      	movs	r6, r0
   100c0:	07db      	lsls	r3, r3, #31
   100c2:	d402      	bmi.n	100ca <_fflush_r+0x3a>
   100c4:	89a3      	ldrh	r3, [r4, #12]
   100c6:	059b      	lsls	r3, r3, #22
   100c8:	d504      	bpl.n	100d4 <_fflush_r+0x44>
   100ca:	0030      	movs	r0, r6
   100cc:	bd70      	pop	{r4, r5, r6, pc}
   100ce:	f000 f839 	bl	10144 <__sinit>
   100d2:	e7e5      	b.n	100a0 <_fflush_r+0x10>
   100d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   100d6:	f000 fb79 	bl	107cc <__retarget_lock_release_recursive>
   100da:	e7f6      	b.n	100ca <_fflush_r+0x3a>
   100dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   100de:	f000 fb73 	bl	107c8 <__retarget_lock_acquire_recursive>
   100e2:	e7e7      	b.n	100b4 <_fflush_r+0x24>

000100e4 <_cleanup_r>:
   100e4:	b510      	push	{r4, lr}
   100e6:	4902      	ldr	r1, [pc, #8]	; (100f0 <_cleanup_r+0xc>)
   100e8:	f000 fb36 	bl	10758 <_fwalk_reent>
   100ec:	bd10      	pop	{r4, pc}
   100ee:	46c0      	nop			; (mov r8, r8)
   100f0:	00011b85 	.word	0x00011b85

000100f4 <std.isra.0>:
   100f4:	2300      	movs	r3, #0
   100f6:	b510      	push	{r4, lr}
   100f8:	0004      	movs	r4, r0
   100fa:	6003      	str	r3, [r0, #0]
   100fc:	6043      	str	r3, [r0, #4]
   100fe:	6083      	str	r3, [r0, #8]
   10100:	8181      	strh	r1, [r0, #12]
   10102:	6643      	str	r3, [r0, #100]	; 0x64
   10104:	81c2      	strh	r2, [r0, #14]
   10106:	6103      	str	r3, [r0, #16]
   10108:	6143      	str	r3, [r0, #20]
   1010a:	6183      	str	r3, [r0, #24]
   1010c:	2208      	movs	r2, #8
   1010e:	2100      	movs	r1, #0
   10110:	305c      	adds	r0, #92	; 0x5c
   10112:	f7fd f83d 	bl	d190 <memset>
   10116:	0020      	movs	r0, r4
   10118:	4b06      	ldr	r3, [pc, #24]	; (10134 <std.isra.0+0x40>)
   1011a:	61e4      	str	r4, [r4, #28]
   1011c:	6223      	str	r3, [r4, #32]
   1011e:	4b06      	ldr	r3, [pc, #24]	; (10138 <std.isra.0+0x44>)
   10120:	3058      	adds	r0, #88	; 0x58
   10122:	6263      	str	r3, [r4, #36]	; 0x24
   10124:	4b05      	ldr	r3, [pc, #20]	; (1013c <std.isra.0+0x48>)
   10126:	62a3      	str	r3, [r4, #40]	; 0x28
   10128:	4b05      	ldr	r3, [pc, #20]	; (10140 <std.isra.0+0x4c>)
   1012a:	62e3      	str	r3, [r4, #44]	; 0x2c
   1012c:	f000 fb48 	bl	107c0 <__retarget_lock_init_recursive>
   10130:	bd10      	pop	{r4, pc}
   10132:	46c0      	nop			; (mov r8, r8)
   10134:	000119ad 	.word	0x000119ad
   10138:	000119d5 	.word	0x000119d5
   1013c:	00011a11 	.word	0x00011a11
   10140:	00011a3d 	.word	0x00011a3d

00010144 <__sinit>:
   10144:	b570      	push	{r4, r5, r6, lr}
   10146:	0004      	movs	r4, r0
   10148:	4d14      	ldr	r5, [pc, #80]	; (1019c <__sinit+0x58>)
   1014a:	0028      	movs	r0, r5
   1014c:	f000 fb3c 	bl	107c8 <__retarget_lock_acquire_recursive>
   10150:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   10152:	2b00      	cmp	r3, #0
   10154:	d11d      	bne.n	10192 <__sinit+0x4e>
   10156:	4a12      	ldr	r2, [pc, #72]	; (101a0 <__sinit+0x5c>)
   10158:	2104      	movs	r1, #4
   1015a:	63e2      	str	r2, [r4, #60]	; 0x3c
   1015c:	22b8      	movs	r2, #184	; 0xb8
   1015e:	0092      	lsls	r2, r2, #2
   10160:	50a3      	str	r3, [r4, r2]
   10162:	23b9      	movs	r3, #185	; 0xb9
   10164:	2203      	movs	r2, #3
   10166:	009b      	lsls	r3, r3, #2
   10168:	50e2      	str	r2, [r4, r3]
   1016a:	3308      	adds	r3, #8
   1016c:	18e2      	adds	r2, r4, r3
   1016e:	3b04      	subs	r3, #4
   10170:	50e2      	str	r2, [r4, r3]
   10172:	6860      	ldr	r0, [r4, #4]
   10174:	2200      	movs	r2, #0
   10176:	f7ff ffbd 	bl	100f4 <std.isra.0>
   1017a:	2201      	movs	r2, #1
   1017c:	2109      	movs	r1, #9
   1017e:	68a0      	ldr	r0, [r4, #8]
   10180:	f7ff ffb8 	bl	100f4 <std.isra.0>
   10184:	2202      	movs	r2, #2
   10186:	2112      	movs	r1, #18
   10188:	68e0      	ldr	r0, [r4, #12]
   1018a:	f7ff ffb3 	bl	100f4 <std.isra.0>
   1018e:	2301      	movs	r3, #1
   10190:	63a3      	str	r3, [r4, #56]	; 0x38
   10192:	0028      	movs	r0, r5
   10194:	f000 fb1a 	bl	107cc <__retarget_lock_release_recursive>
   10198:	bd70      	pop	{r4, r5, r6, pc}
   1019a:	46c0      	nop			; (mov r8, r8)
   1019c:	200012a0 	.word	0x200012a0
   101a0:	000100e5 	.word	0x000100e5

000101a4 <__sfp_lock_acquire>:
   101a4:	b510      	push	{r4, lr}
   101a6:	4802      	ldr	r0, [pc, #8]	; (101b0 <__sfp_lock_acquire+0xc>)
   101a8:	f000 fb0e 	bl	107c8 <__retarget_lock_acquire_recursive>
   101ac:	bd10      	pop	{r4, pc}
   101ae:	46c0      	nop			; (mov r8, r8)
   101b0:	200012b4 	.word	0x200012b4

000101b4 <__sfp_lock_release>:
   101b4:	b510      	push	{r4, lr}
   101b6:	4802      	ldr	r0, [pc, #8]	; (101c0 <__sfp_lock_release+0xc>)
   101b8:	f000 fb08 	bl	107cc <__retarget_lock_release_recursive>
   101bc:	bd10      	pop	{r4, pc}
   101be:	46c0      	nop			; (mov r8, r8)
   101c0:	200012b4 	.word	0x200012b4

000101c4 <__libc_fini_array>:
   101c4:	b570      	push	{r4, r5, r6, lr}
   101c6:	4b09      	ldr	r3, [pc, #36]	; (101ec <__libc_fini_array+0x28>)
   101c8:	4c09      	ldr	r4, [pc, #36]	; (101f0 <__libc_fini_array+0x2c>)
   101ca:	1ae4      	subs	r4, r4, r3
   101cc:	10a4      	asrs	r4, r4, #2
   101ce:	d009      	beq.n	101e4 <__libc_fini_array+0x20>
   101d0:	4a08      	ldr	r2, [pc, #32]	; (101f4 <__libc_fini_array+0x30>)
   101d2:	18a5      	adds	r5, r4, r2
   101d4:	00ad      	lsls	r5, r5, #2
   101d6:	18ed      	adds	r5, r5, r3
   101d8:	682b      	ldr	r3, [r5, #0]
   101da:	3c01      	subs	r4, #1
   101dc:	4798      	blx	r3
   101de:	3d04      	subs	r5, #4
   101e0:	2c00      	cmp	r4, #0
   101e2:	d1f9      	bne.n	101d8 <__libc_fini_array+0x14>
   101e4:	f002 fb02 	bl	127ec <_fini>
   101e8:	bd70      	pop	{r4, r5, r6, pc}
   101ea:	46c0      	nop			; (mov r8, r8)
   101ec:	000127f8 	.word	0x000127f8
   101f0:	000127fc 	.word	0x000127fc
   101f4:	3fffffff 	.word	0x3fffffff

000101f8 <_malloc_trim_r>:
   101f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   101fa:	000c      	movs	r4, r1
   101fc:	0006      	movs	r6, r0
   101fe:	f000 fead 	bl	10f5c <__malloc_lock>
   10202:	4f20      	ldr	r7, [pc, #128]	; (10284 <_malloc_trim_r+0x8c>)
   10204:	68bb      	ldr	r3, [r7, #8]
   10206:	685d      	ldr	r5, [r3, #4]
   10208:	2303      	movs	r3, #3
   1020a:	439d      	bics	r5, r3
   1020c:	4b1e      	ldr	r3, [pc, #120]	; (10288 <_malloc_trim_r+0x90>)
   1020e:	1b2c      	subs	r4, r5, r4
   10210:	469c      	mov	ip, r3
   10212:	4464      	add	r4, ip
   10214:	0b24      	lsrs	r4, r4, #12
   10216:	4b1d      	ldr	r3, [pc, #116]	; (1028c <_malloc_trim_r+0x94>)
   10218:	3c01      	subs	r4, #1
   1021a:	0324      	lsls	r4, r4, #12
   1021c:	429c      	cmp	r4, r3
   1021e:	dd07      	ble.n	10230 <_malloc_trim_r+0x38>
   10220:	2100      	movs	r1, #0
   10222:	0030      	movs	r0, r6
   10224:	f001 fbb0 	bl	11988 <_sbrk_r>
   10228:	68bb      	ldr	r3, [r7, #8]
   1022a:	195b      	adds	r3, r3, r5
   1022c:	4298      	cmp	r0, r3
   1022e:	d004      	beq.n	1023a <_malloc_trim_r+0x42>
   10230:	0030      	movs	r0, r6
   10232:	f000 fe9b 	bl	10f6c <__malloc_unlock>
   10236:	2000      	movs	r0, #0
   10238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1023a:	4261      	negs	r1, r4
   1023c:	0030      	movs	r0, r6
   1023e:	f001 fba3 	bl	11988 <_sbrk_r>
   10242:	1c43      	adds	r3, r0, #1
   10244:	d00d      	beq.n	10262 <_malloc_trim_r+0x6a>
   10246:	2201      	movs	r2, #1
   10248:	68bb      	ldr	r3, [r7, #8]
   1024a:	1b2d      	subs	r5, r5, r4
   1024c:	4315      	orrs	r5, r2
   1024e:	605d      	str	r5, [r3, #4]
   10250:	4b0f      	ldr	r3, [pc, #60]	; (10290 <_malloc_trim_r+0x98>)
   10252:	0030      	movs	r0, r6
   10254:	681a      	ldr	r2, [r3, #0]
   10256:	1b14      	subs	r4, r2, r4
   10258:	601c      	str	r4, [r3, #0]
   1025a:	f000 fe87 	bl	10f6c <__malloc_unlock>
   1025e:	2001      	movs	r0, #1
   10260:	e7ea      	b.n	10238 <_malloc_trim_r+0x40>
   10262:	2100      	movs	r1, #0
   10264:	0030      	movs	r0, r6
   10266:	f001 fb8f 	bl	11988 <_sbrk_r>
   1026a:	68ba      	ldr	r2, [r7, #8]
   1026c:	1a83      	subs	r3, r0, r2
   1026e:	2b0f      	cmp	r3, #15
   10270:	ddde      	ble.n	10230 <_malloc_trim_r+0x38>
   10272:	4908      	ldr	r1, [pc, #32]	; (10294 <_malloc_trim_r+0x9c>)
   10274:	6809      	ldr	r1, [r1, #0]
   10276:	1a40      	subs	r0, r0, r1
   10278:	4905      	ldr	r1, [pc, #20]	; (10290 <_malloc_trim_r+0x98>)
   1027a:	6008      	str	r0, [r1, #0]
   1027c:	2101      	movs	r1, #1
   1027e:	430b      	orrs	r3, r1
   10280:	6053      	str	r3, [r2, #4]
   10282:	e7d5      	b.n	10230 <_malloc_trim_r+0x38>
   10284:	200004b4 	.word	0x200004b4
   10288:	00000fef 	.word	0x00000fef
   1028c:	00000fff 	.word	0x00000fff
   10290:	20001220 	.word	0x20001220
   10294:	200008bc 	.word	0x200008bc

00010298 <_free_r>:
   10298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1029a:	0004      	movs	r4, r0
   1029c:	1e0d      	subs	r5, r1, #0
   1029e:	d03c      	beq.n	1031a <_free_r+0x82>
   102a0:	f000 fe5c 	bl	10f5c <__malloc_lock>
   102a4:	0029      	movs	r1, r5
   102a6:	3908      	subs	r1, #8
   102a8:	6848      	ldr	r0, [r1, #4]
   102aa:	2301      	movs	r3, #1
   102ac:	0005      	movs	r5, r0
   102ae:	2603      	movs	r6, #3
   102b0:	439d      	bics	r5, r3
   102b2:	194a      	adds	r2, r1, r5
   102b4:	469c      	mov	ip, r3
   102b6:	4f61      	ldr	r7, [pc, #388]	; (1043c <_free_r+0x1a4>)
   102b8:	6853      	ldr	r3, [r2, #4]
   102ba:	43b3      	bics	r3, r6
   102bc:	68be      	ldr	r6, [r7, #8]
   102be:	42b2      	cmp	r2, r6
   102c0:	d056      	beq.n	10370 <_free_r+0xd8>
   102c2:	4666      	mov	r6, ip
   102c4:	6053      	str	r3, [r2, #4]
   102c6:	4206      	tst	r6, r0
   102c8:	d10a      	bne.n	102e0 <_free_r+0x48>
   102ca:	003e      	movs	r6, r7
   102cc:	6808      	ldr	r0, [r1, #0]
   102ce:	3608      	adds	r6, #8
   102d0:	1a09      	subs	r1, r1, r0
   102d2:	182d      	adds	r5, r5, r0
   102d4:	6888      	ldr	r0, [r1, #8]
   102d6:	42b0      	cmp	r0, r6
   102d8:	d065      	beq.n	103a6 <_free_r+0x10e>
   102da:	68ce      	ldr	r6, [r1, #12]
   102dc:	60c6      	str	r6, [r0, #12]
   102de:	60b0      	str	r0, [r6, #8]
   102e0:	2001      	movs	r0, #1
   102e2:	18d6      	adds	r6, r2, r3
   102e4:	6876      	ldr	r6, [r6, #4]
   102e6:	4206      	tst	r6, r0
   102e8:	d033      	beq.n	10352 <_free_r+0xba>
   102ea:	4b55      	ldr	r3, [pc, #340]	; (10440 <_free_r+0x1a8>)
   102ec:	4328      	orrs	r0, r5
   102ee:	6048      	str	r0, [r1, #4]
   102f0:	514d      	str	r5, [r1, r5]
   102f2:	429d      	cmp	r5, r3
   102f4:	d812      	bhi.n	1031c <_free_r+0x84>
   102f6:	08ed      	lsrs	r5, r5, #3
   102f8:	3bff      	subs	r3, #255	; 0xff
   102fa:	10aa      	asrs	r2, r5, #2
   102fc:	3bff      	subs	r3, #255	; 0xff
   102fe:	4093      	lsls	r3, r2
   10300:	687a      	ldr	r2, [r7, #4]
   10302:	00ed      	lsls	r5, r5, #3
   10304:	4313      	orrs	r3, r2
   10306:	607b      	str	r3, [r7, #4]
   10308:	19ef      	adds	r7, r5, r7
   1030a:	68bb      	ldr	r3, [r7, #8]
   1030c:	60cf      	str	r7, [r1, #12]
   1030e:	608b      	str	r3, [r1, #8]
   10310:	60b9      	str	r1, [r7, #8]
   10312:	60d9      	str	r1, [r3, #12]
   10314:	0020      	movs	r0, r4
   10316:	f000 fe29 	bl	10f6c <__malloc_unlock>
   1031a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1031c:	0a68      	lsrs	r0, r5, #9
   1031e:	2804      	cmp	r0, #4
   10320:	d850      	bhi.n	103c4 <_free_r+0x12c>
   10322:	09a8      	lsrs	r0, r5, #6
   10324:	0002      	movs	r2, r0
   10326:	3039      	adds	r0, #57	; 0x39
   10328:	3238      	adds	r2, #56	; 0x38
   1032a:	00c0      	lsls	r0, r0, #3
   1032c:	1838      	adds	r0, r7, r0
   1032e:	3808      	subs	r0, #8
   10330:	6883      	ldr	r3, [r0, #8]
   10332:	2603      	movs	r6, #3
   10334:	4298      	cmp	r0, r3
   10336:	d04c      	beq.n	103d2 <_free_r+0x13a>
   10338:	685a      	ldr	r2, [r3, #4]
   1033a:	43b2      	bics	r2, r6
   1033c:	4295      	cmp	r5, r2
   1033e:	d230      	bcs.n	103a2 <_free_r+0x10a>
   10340:	689b      	ldr	r3, [r3, #8]
   10342:	4298      	cmp	r0, r3
   10344:	d1f8      	bne.n	10338 <_free_r+0xa0>
   10346:	68c3      	ldr	r3, [r0, #12]
   10348:	60cb      	str	r3, [r1, #12]
   1034a:	6088      	str	r0, [r1, #8]
   1034c:	6099      	str	r1, [r3, #8]
   1034e:	60c1      	str	r1, [r0, #12]
   10350:	e7e0      	b.n	10314 <_free_r+0x7c>
   10352:	18ed      	adds	r5, r5, r3
   10354:	4e3b      	ldr	r6, [pc, #236]	; (10444 <_free_r+0x1ac>)
   10356:	6893      	ldr	r3, [r2, #8]
   10358:	42b3      	cmp	r3, r6
   1035a:	d042      	beq.n	103e2 <_free_r+0x14a>
   1035c:	68d2      	ldr	r2, [r2, #12]
   1035e:	4328      	orrs	r0, r5
   10360:	60da      	str	r2, [r3, #12]
   10362:	6093      	str	r3, [r2, #8]
   10364:	4b36      	ldr	r3, [pc, #216]	; (10440 <_free_r+0x1a8>)
   10366:	6048      	str	r0, [r1, #4]
   10368:	514d      	str	r5, [r1, r5]
   1036a:	429d      	cmp	r5, r3
   1036c:	d8d6      	bhi.n	1031c <_free_r+0x84>
   1036e:	e7c2      	b.n	102f6 <_free_r+0x5e>
   10370:	4662      	mov	r2, ip
   10372:	18eb      	adds	r3, r5, r3
   10374:	4202      	tst	r2, r0
   10376:	d106      	bne.n	10386 <_free_r+0xee>
   10378:	680a      	ldr	r2, [r1, #0]
   1037a:	1a89      	subs	r1, r1, r2
   1037c:	6888      	ldr	r0, [r1, #8]
   1037e:	189b      	adds	r3, r3, r2
   10380:	68ca      	ldr	r2, [r1, #12]
   10382:	60c2      	str	r2, [r0, #12]
   10384:	6090      	str	r0, [r2, #8]
   10386:	2201      	movs	r2, #1
   10388:	431a      	orrs	r2, r3
   1038a:	604a      	str	r2, [r1, #4]
   1038c:	4a2e      	ldr	r2, [pc, #184]	; (10448 <_free_r+0x1b0>)
   1038e:	60b9      	str	r1, [r7, #8]
   10390:	6812      	ldr	r2, [r2, #0]
   10392:	4293      	cmp	r3, r2
   10394:	d3be      	bcc.n	10314 <_free_r+0x7c>
   10396:	4b2d      	ldr	r3, [pc, #180]	; (1044c <_free_r+0x1b4>)
   10398:	0020      	movs	r0, r4
   1039a:	6819      	ldr	r1, [r3, #0]
   1039c:	f7ff ff2c 	bl	101f8 <_malloc_trim_r>
   103a0:	e7b8      	b.n	10314 <_free_r+0x7c>
   103a2:	0018      	movs	r0, r3
   103a4:	e7cf      	b.n	10346 <_free_r+0xae>
   103a6:	4666      	mov	r6, ip
   103a8:	18d0      	adds	r0, r2, r3
   103aa:	6840      	ldr	r0, [r0, #4]
   103ac:	4230      	tst	r0, r6
   103ae:	d13f      	bne.n	10430 <_free_r+0x198>
   103b0:	6890      	ldr	r0, [r2, #8]
   103b2:	195d      	adds	r5, r3, r5
   103b4:	68d3      	ldr	r3, [r2, #12]
   103b6:	60c3      	str	r3, [r0, #12]
   103b8:	6098      	str	r0, [r3, #8]
   103ba:	4663      	mov	r3, ip
   103bc:	432b      	orrs	r3, r5
   103be:	604b      	str	r3, [r1, #4]
   103c0:	514d      	str	r5, [r1, r5]
   103c2:	e7a7      	b.n	10314 <_free_r+0x7c>
   103c4:	2814      	cmp	r0, #20
   103c6:	d814      	bhi.n	103f2 <_free_r+0x15a>
   103c8:	0002      	movs	r2, r0
   103ca:	305c      	adds	r0, #92	; 0x5c
   103cc:	325b      	adds	r2, #91	; 0x5b
   103ce:	00c0      	lsls	r0, r0, #3
   103d0:	e7ac      	b.n	1032c <_free_r+0x94>
   103d2:	2301      	movs	r3, #1
   103d4:	1092      	asrs	r2, r2, #2
   103d6:	4093      	lsls	r3, r2
   103d8:	687a      	ldr	r2, [r7, #4]
   103da:	4313      	orrs	r3, r2
   103dc:	607b      	str	r3, [r7, #4]
   103de:	0003      	movs	r3, r0
   103e0:	e7b2      	b.n	10348 <_free_r+0xb0>
   103e2:	4328      	orrs	r0, r5
   103e4:	60d9      	str	r1, [r3, #12]
   103e6:	6099      	str	r1, [r3, #8]
   103e8:	60cb      	str	r3, [r1, #12]
   103ea:	608b      	str	r3, [r1, #8]
   103ec:	6048      	str	r0, [r1, #4]
   103ee:	514d      	str	r5, [r1, r5]
   103f0:	e790      	b.n	10314 <_free_r+0x7c>
   103f2:	2854      	cmp	r0, #84	; 0x54
   103f4:	d805      	bhi.n	10402 <_free_r+0x16a>
   103f6:	0b28      	lsrs	r0, r5, #12
   103f8:	0002      	movs	r2, r0
   103fa:	306f      	adds	r0, #111	; 0x6f
   103fc:	326e      	adds	r2, #110	; 0x6e
   103fe:	00c0      	lsls	r0, r0, #3
   10400:	e794      	b.n	1032c <_free_r+0x94>
   10402:	22aa      	movs	r2, #170	; 0xaa
   10404:	0052      	lsls	r2, r2, #1
   10406:	4290      	cmp	r0, r2
   10408:	d805      	bhi.n	10416 <_free_r+0x17e>
   1040a:	0be8      	lsrs	r0, r5, #15
   1040c:	0002      	movs	r2, r0
   1040e:	3078      	adds	r0, #120	; 0x78
   10410:	3277      	adds	r2, #119	; 0x77
   10412:	00c0      	lsls	r0, r0, #3
   10414:	e78a      	b.n	1032c <_free_r+0x94>
   10416:	4a0e      	ldr	r2, [pc, #56]	; (10450 <_free_r+0x1b8>)
   10418:	4290      	cmp	r0, r2
   1041a:	d805      	bhi.n	10428 <_free_r+0x190>
   1041c:	0ca8      	lsrs	r0, r5, #18
   1041e:	0002      	movs	r2, r0
   10420:	307d      	adds	r0, #125	; 0x7d
   10422:	327c      	adds	r2, #124	; 0x7c
   10424:	00c0      	lsls	r0, r0, #3
   10426:	e781      	b.n	1032c <_free_r+0x94>
   10428:	20fe      	movs	r0, #254	; 0xfe
   1042a:	227e      	movs	r2, #126	; 0x7e
   1042c:	0080      	lsls	r0, r0, #2
   1042e:	e77d      	b.n	1032c <_free_r+0x94>
   10430:	4663      	mov	r3, ip
   10432:	432b      	orrs	r3, r5
   10434:	604b      	str	r3, [r1, #4]
   10436:	6015      	str	r5, [r2, #0]
   10438:	e76c      	b.n	10314 <_free_r+0x7c>
   1043a:	46c0      	nop			; (mov r8, r8)
   1043c:	200004b4 	.word	0x200004b4
   10440:	000001ff 	.word	0x000001ff
   10444:	200004bc 	.word	0x200004bc
   10448:	200008c0 	.word	0x200008c0
   1044c:	20001250 	.word	0x20001250
   10450:	00000554 	.word	0x00000554

00010454 <__sfvwrite_r>:
   10454:	b5f0      	push	{r4, r5, r6, r7, lr}
   10456:	464e      	mov	r6, r9
   10458:	46de      	mov	lr, fp
   1045a:	4657      	mov	r7, sl
   1045c:	4645      	mov	r5, r8
   1045e:	b5e0      	push	{r5, r6, r7, lr}
   10460:	6893      	ldr	r3, [r2, #8]
   10462:	b083      	sub	sp, #12
   10464:	9000      	str	r0, [sp, #0]
   10466:	000c      	movs	r4, r1
   10468:	0016      	movs	r6, r2
   1046a:	2b00      	cmp	r3, #0
   1046c:	d025      	beq.n	104ba <__sfvwrite_r+0x66>
   1046e:	898b      	ldrh	r3, [r1, #12]
   10470:	071a      	lsls	r2, r3, #28
   10472:	d52a      	bpl.n	104ca <__sfvwrite_r+0x76>
   10474:	690a      	ldr	r2, [r1, #16]
   10476:	2a00      	cmp	r2, #0
   10478:	d027      	beq.n	104ca <__sfvwrite_r+0x76>
   1047a:	6832      	ldr	r2, [r6, #0]
   1047c:	4693      	mov	fp, r2
   1047e:	079a      	lsls	r2, r3, #30
   10480:	d52f      	bpl.n	104e2 <__sfvwrite_r+0x8e>
   10482:	4bb2      	ldr	r3, [pc, #712]	; (1074c <__sfvwrite_r+0x2f8>)
   10484:	2700      	movs	r7, #0
   10486:	2500      	movs	r5, #0
   10488:	4698      	mov	r8, r3
   1048a:	46b1      	mov	r9, r6
   1048c:	2d00      	cmp	r5, #0
   1048e:	d100      	bne.n	10492 <__sfvwrite_r+0x3e>
   10490:	e072      	b.n	10578 <__sfvwrite_r+0x124>
   10492:	002b      	movs	r3, r5
   10494:	4545      	cmp	r5, r8
   10496:	d900      	bls.n	1049a <__sfvwrite_r+0x46>
   10498:	4bac      	ldr	r3, [pc, #688]	; (1074c <__sfvwrite_r+0x2f8>)
   1049a:	003a      	movs	r2, r7
   1049c:	69e1      	ldr	r1, [r4, #28]
   1049e:	9800      	ldr	r0, [sp, #0]
   104a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
   104a2:	47b0      	blx	r6
   104a4:	2800      	cmp	r0, #0
   104a6:	dc00      	bgt.n	104aa <__sfvwrite_r+0x56>
   104a8:	e073      	b.n	10592 <__sfvwrite_r+0x13e>
   104aa:	464b      	mov	r3, r9
   104ac:	689b      	ldr	r3, [r3, #8]
   104ae:	183f      	adds	r7, r7, r0
   104b0:	1a2d      	subs	r5, r5, r0
   104b2:	1a18      	subs	r0, r3, r0
   104b4:	464b      	mov	r3, r9
   104b6:	6098      	str	r0, [r3, #8]
   104b8:	d1e8      	bne.n	1048c <__sfvwrite_r+0x38>
   104ba:	2000      	movs	r0, #0
   104bc:	b003      	add	sp, #12
   104be:	bc3c      	pop	{r2, r3, r4, r5}
   104c0:	4690      	mov	r8, r2
   104c2:	4699      	mov	r9, r3
   104c4:	46a2      	mov	sl, r4
   104c6:	46ab      	mov	fp, r5
   104c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   104ca:	0021      	movs	r1, r4
   104cc:	9800      	ldr	r0, [sp, #0]
   104ce:	f7fe fbd1 	bl	ec74 <__swsetup_r>
   104d2:	2800      	cmp	r0, #0
   104d4:	d000      	beq.n	104d8 <__sfvwrite_r+0x84>
   104d6:	e130      	b.n	1073a <__sfvwrite_r+0x2e6>
   104d8:	6832      	ldr	r2, [r6, #0]
   104da:	89a3      	ldrh	r3, [r4, #12]
   104dc:	4693      	mov	fp, r2
   104de:	079a      	lsls	r2, r3, #30
   104e0:	d4cf      	bmi.n	10482 <__sfvwrite_r+0x2e>
   104e2:	07da      	lsls	r2, r3, #31
   104e4:	d55d      	bpl.n	105a2 <__sfvwrite_r+0x14e>
   104e6:	2300      	movs	r3, #0
   104e8:	2000      	movs	r0, #0
   104ea:	469a      	mov	sl, r3
   104ec:	2700      	movs	r7, #0
   104ee:	001d      	movs	r5, r3
   104f0:	46b1      	mov	r9, r6
   104f2:	e029      	b.n	10548 <__sfvwrite_r+0xf4>
   104f4:	2800      	cmp	r0, #0
   104f6:	d033      	beq.n	10560 <__sfvwrite_r+0x10c>
   104f8:	46a8      	mov	r8, r5
   104fa:	42bd      	cmp	r5, r7
   104fc:	d900      	bls.n	10500 <__sfvwrite_r+0xac>
   104fe:	46b8      	mov	r8, r7
   10500:	6820      	ldr	r0, [r4, #0]
   10502:	6922      	ldr	r2, [r4, #16]
   10504:	4646      	mov	r6, r8
   10506:	6963      	ldr	r3, [r4, #20]
   10508:	4290      	cmp	r0, r2
   1050a:	d907      	bls.n	1051c <__sfvwrite_r+0xc8>
   1050c:	68a2      	ldr	r2, [r4, #8]
   1050e:	4694      	mov	ip, r2
   10510:	449c      	add	ip, r3
   10512:	4662      	mov	r2, ip
   10514:	9201      	str	r2, [sp, #4]
   10516:	45e0      	cmp	r8, ip
   10518:	dd00      	ble.n	1051c <__sfvwrite_r+0xc8>
   1051a:	e0e9      	b.n	106f0 <__sfvwrite_r+0x29c>
   1051c:	4598      	cmp	r8, r3
   1051e:	da00      	bge.n	10522 <__sfvwrite_r+0xce>
   10520:	e08f      	b.n	10642 <__sfvwrite_r+0x1ee>
   10522:	6a66      	ldr	r6, [r4, #36]	; 0x24
   10524:	4652      	mov	r2, sl
   10526:	69e1      	ldr	r1, [r4, #28]
   10528:	9800      	ldr	r0, [sp, #0]
   1052a:	47b0      	blx	r6
   1052c:	1e06      	subs	r6, r0, #0
   1052e:	dd30      	ble.n	10592 <__sfvwrite_r+0x13e>
   10530:	1bad      	subs	r5, r5, r6
   10532:	2001      	movs	r0, #1
   10534:	2d00      	cmp	r5, #0
   10536:	d026      	beq.n	10586 <__sfvwrite_r+0x132>
   10538:	464b      	mov	r3, r9
   1053a:	689b      	ldr	r3, [r3, #8]
   1053c:	44b2      	add	sl, r6
   1053e:	1bbf      	subs	r7, r7, r6
   10540:	1b9e      	subs	r6, r3, r6
   10542:	464b      	mov	r3, r9
   10544:	609e      	str	r6, [r3, #8]
   10546:	d0b8      	beq.n	104ba <__sfvwrite_r+0x66>
   10548:	2f00      	cmp	r7, #0
   1054a:	d1d3      	bne.n	104f4 <__sfvwrite_r+0xa0>
   1054c:	465b      	mov	r3, fp
   1054e:	681b      	ldr	r3, [r3, #0]
   10550:	469a      	mov	sl, r3
   10552:	465b      	mov	r3, fp
   10554:	685f      	ldr	r7, [r3, #4]
   10556:	2308      	movs	r3, #8
   10558:	469c      	mov	ip, r3
   1055a:	44e3      	add	fp, ip
   1055c:	2f00      	cmp	r7, #0
   1055e:	d0f5      	beq.n	1054c <__sfvwrite_r+0xf8>
   10560:	003a      	movs	r2, r7
   10562:	210a      	movs	r1, #10
   10564:	4650      	mov	r0, sl
   10566:	f000 fc69 	bl	10e3c <memchr>
   1056a:	2800      	cmp	r0, #0
   1056c:	d100      	bne.n	10570 <__sfvwrite_r+0x11c>
   1056e:	e0e2      	b.n	10736 <__sfvwrite_r+0x2e2>
   10570:	4653      	mov	r3, sl
   10572:	3001      	adds	r0, #1
   10574:	1ac5      	subs	r5, r0, r3
   10576:	e7bf      	b.n	104f8 <__sfvwrite_r+0xa4>
   10578:	465b      	mov	r3, fp
   1057a:	681f      	ldr	r7, [r3, #0]
   1057c:	685d      	ldr	r5, [r3, #4]
   1057e:	2308      	movs	r3, #8
   10580:	469c      	mov	ip, r3
   10582:	44e3      	add	fp, ip
   10584:	e782      	b.n	1048c <__sfvwrite_r+0x38>
   10586:	0021      	movs	r1, r4
   10588:	9800      	ldr	r0, [sp, #0]
   1058a:	f7ff fd81 	bl	10090 <_fflush_r>
   1058e:	2800      	cmp	r0, #0
   10590:	d0d2      	beq.n	10538 <__sfvwrite_r+0xe4>
   10592:	220c      	movs	r2, #12
   10594:	5ea3      	ldrsh	r3, [r4, r2]
   10596:	2240      	movs	r2, #64	; 0x40
   10598:	2001      	movs	r0, #1
   1059a:	4313      	orrs	r3, r2
   1059c:	81a3      	strh	r3, [r4, #12]
   1059e:	4240      	negs	r0, r0
   105a0:	e78c      	b.n	104bc <__sfvwrite_r+0x68>
   105a2:	2200      	movs	r2, #0
   105a4:	4691      	mov	r9, r2
   105a6:	464d      	mov	r5, r9
   105a8:	2d00      	cmp	r5, #0
   105aa:	d023      	beq.n	105f4 <__sfvwrite_r+0x1a0>
   105ac:	68a2      	ldr	r2, [r4, #8]
   105ae:	4690      	mov	r8, r2
   105b0:	2280      	movs	r2, #128	; 0x80
   105b2:	0092      	lsls	r2, r2, #2
   105b4:	4213      	tst	r3, r2
   105b6:	d026      	beq.n	10606 <__sfvwrite_r+0x1b2>
   105b8:	46c2      	mov	sl, r8
   105ba:	4545      	cmp	r5, r8
   105bc:	d34d      	bcc.n	1065a <__sfvwrite_r+0x206>
   105be:	2290      	movs	r2, #144	; 0x90
   105c0:	00d2      	lsls	r2, r2, #3
   105c2:	4213      	tst	r3, r2
   105c4:	d14e      	bne.n	10664 <__sfvwrite_r+0x210>
   105c6:	002f      	movs	r7, r5
   105c8:	6820      	ldr	r0, [r4, #0]
   105ca:	4652      	mov	r2, sl
   105cc:	4649      	mov	r1, r9
   105ce:	f000 fc75 	bl	10ebc <memmove>
   105d2:	4642      	mov	r2, r8
   105d4:	68a3      	ldr	r3, [r4, #8]
   105d6:	1a98      	subs	r0, r3, r2
   105d8:	6823      	ldr	r3, [r4, #0]
   105da:	60a0      	str	r0, [r4, #8]
   105dc:	4453      	add	r3, sl
   105de:	6023      	str	r3, [r4, #0]
   105e0:	68b3      	ldr	r3, [r6, #8]
   105e2:	44b9      	add	r9, r7
   105e4:	1bed      	subs	r5, r5, r7
   105e6:	1bdf      	subs	r7, r3, r7
   105e8:	60b7      	str	r7, [r6, #8]
   105ea:	d100      	bne.n	105ee <__sfvwrite_r+0x19a>
   105ec:	e765      	b.n	104ba <__sfvwrite_r+0x66>
   105ee:	89a3      	ldrh	r3, [r4, #12]
   105f0:	2d00      	cmp	r5, #0
   105f2:	d1db      	bne.n	105ac <__sfvwrite_r+0x158>
   105f4:	465a      	mov	r2, fp
   105f6:	6812      	ldr	r2, [r2, #0]
   105f8:	4691      	mov	r9, r2
   105fa:	465a      	mov	r2, fp
   105fc:	6855      	ldr	r5, [r2, #4]
   105fe:	2208      	movs	r2, #8
   10600:	4694      	mov	ip, r2
   10602:	44e3      	add	fp, ip
   10604:	e7d0      	b.n	105a8 <__sfvwrite_r+0x154>
   10606:	6820      	ldr	r0, [r4, #0]
   10608:	6923      	ldr	r3, [r4, #16]
   1060a:	4298      	cmp	r0, r3
   1060c:	d802      	bhi.n	10614 <__sfvwrite_r+0x1c0>
   1060e:	6967      	ldr	r7, [r4, #20]
   10610:	42bd      	cmp	r5, r7
   10612:	d259      	bcs.n	106c8 <__sfvwrite_r+0x274>
   10614:	4647      	mov	r7, r8
   10616:	42af      	cmp	r7, r5
   10618:	d900      	bls.n	1061c <__sfvwrite_r+0x1c8>
   1061a:	002f      	movs	r7, r5
   1061c:	003a      	movs	r2, r7
   1061e:	4649      	mov	r1, r9
   10620:	f000 fc4c 	bl	10ebc <memmove>
   10624:	68a3      	ldr	r3, [r4, #8]
   10626:	6822      	ldr	r2, [r4, #0]
   10628:	1bdb      	subs	r3, r3, r7
   1062a:	19d2      	adds	r2, r2, r7
   1062c:	60a3      	str	r3, [r4, #8]
   1062e:	6022      	str	r2, [r4, #0]
   10630:	2b00      	cmp	r3, #0
   10632:	d1d5      	bne.n	105e0 <__sfvwrite_r+0x18c>
   10634:	0021      	movs	r1, r4
   10636:	9800      	ldr	r0, [sp, #0]
   10638:	f7ff fd2a 	bl	10090 <_fflush_r>
   1063c:	2800      	cmp	r0, #0
   1063e:	d0cf      	beq.n	105e0 <__sfvwrite_r+0x18c>
   10640:	e7a7      	b.n	10592 <__sfvwrite_r+0x13e>
   10642:	4642      	mov	r2, r8
   10644:	4651      	mov	r1, sl
   10646:	f000 fc39 	bl	10ebc <memmove>
   1064a:	4642      	mov	r2, r8
   1064c:	68a3      	ldr	r3, [r4, #8]
   1064e:	1a9b      	subs	r3, r3, r2
   10650:	60a3      	str	r3, [r4, #8]
   10652:	6823      	ldr	r3, [r4, #0]
   10654:	4443      	add	r3, r8
   10656:	6023      	str	r3, [r4, #0]
   10658:	e76a      	b.n	10530 <__sfvwrite_r+0xdc>
   1065a:	46a8      	mov	r8, r5
   1065c:	6820      	ldr	r0, [r4, #0]
   1065e:	002f      	movs	r7, r5
   10660:	46aa      	mov	sl, r5
   10662:	e7b2      	b.n	105ca <__sfvwrite_r+0x176>
   10664:	6921      	ldr	r1, [r4, #16]
   10666:	6822      	ldr	r2, [r4, #0]
   10668:	1a52      	subs	r2, r2, r1
   1066a:	4692      	mov	sl, r2
   1066c:	6962      	ldr	r2, [r4, #20]
   1066e:	0057      	lsls	r7, r2, #1
   10670:	18bf      	adds	r7, r7, r2
   10672:	0ffa      	lsrs	r2, r7, #31
   10674:	19d7      	adds	r7, r2, r7
   10676:	4652      	mov	r2, sl
   10678:	1c50      	adds	r0, r2, #1
   1067a:	107f      	asrs	r7, r7, #1
   1067c:	1940      	adds	r0, r0, r5
   1067e:	003a      	movs	r2, r7
   10680:	42b8      	cmp	r0, r7
   10682:	d901      	bls.n	10688 <__sfvwrite_r+0x234>
   10684:	0007      	movs	r7, r0
   10686:	0002      	movs	r2, r0
   10688:	055b      	lsls	r3, r3, #21
   1068a:	d542      	bpl.n	10712 <__sfvwrite_r+0x2be>
   1068c:	0011      	movs	r1, r2
   1068e:	9800      	ldr	r0, [sp, #0]
   10690:	f000 f920 	bl	108d4 <_malloc_r>
   10694:	4680      	mov	r8, r0
   10696:	1e03      	subs	r3, r0, #0
   10698:	d052      	beq.n	10740 <__sfvwrite_r+0x2ec>
   1069a:	4652      	mov	r2, sl
   1069c:	6921      	ldr	r1, [r4, #16]
   1069e:	f7fc fd35 	bl	d10c <memcpy>
   106a2:	89a3      	ldrh	r3, [r4, #12]
   106a4:	4a2a      	ldr	r2, [pc, #168]	; (10750 <__sfvwrite_r+0x2fc>)
   106a6:	4013      	ands	r3, r2
   106a8:	2280      	movs	r2, #128	; 0x80
   106aa:	4313      	orrs	r3, r2
   106ac:	81a3      	strh	r3, [r4, #12]
   106ae:	4643      	mov	r3, r8
   106b0:	4640      	mov	r0, r8
   106b2:	6123      	str	r3, [r4, #16]
   106b4:	4653      	mov	r3, sl
   106b6:	4450      	add	r0, sl
   106b8:	6167      	str	r7, [r4, #20]
   106ba:	1aff      	subs	r7, r7, r3
   106bc:	60a7      	str	r7, [r4, #8]
   106be:	6020      	str	r0, [r4, #0]
   106c0:	46a8      	mov	r8, r5
   106c2:	002f      	movs	r7, r5
   106c4:	46aa      	mov	sl, r5
   106c6:	e780      	b.n	105ca <__sfvwrite_r+0x176>
   106c8:	4b22      	ldr	r3, [pc, #136]	; (10754 <__sfvwrite_r+0x300>)
   106ca:	0028      	movs	r0, r5
   106cc:	429d      	cmp	r5, r3
   106ce:	d900      	bls.n	106d2 <__sfvwrite_r+0x27e>
   106d0:	0018      	movs	r0, r3
   106d2:	0039      	movs	r1, r7
   106d4:	f7f9 ff1c 	bl	a510 <__divsi3>
   106d8:	003b      	movs	r3, r7
   106da:	464a      	mov	r2, r9
   106dc:	4343      	muls	r3, r0
   106de:	69e1      	ldr	r1, [r4, #28]
   106e0:	9800      	ldr	r0, [sp, #0]
   106e2:	6a67      	ldr	r7, [r4, #36]	; 0x24
   106e4:	47b8      	blx	r7
   106e6:	2800      	cmp	r0, #0
   106e8:	dc00      	bgt.n	106ec <__sfvwrite_r+0x298>
   106ea:	e752      	b.n	10592 <__sfvwrite_r+0x13e>
   106ec:	0007      	movs	r7, r0
   106ee:	e777      	b.n	105e0 <__sfvwrite_r+0x18c>
   106f0:	4666      	mov	r6, ip
   106f2:	4651      	mov	r1, sl
   106f4:	f000 fbe2 	bl	10ebc <memmove>
   106f8:	46b4      	mov	ip, r6
   106fa:	6823      	ldr	r3, [r4, #0]
   106fc:	0021      	movs	r1, r4
   106fe:	4463      	add	r3, ip
   10700:	6023      	str	r3, [r4, #0]
   10702:	9800      	ldr	r0, [sp, #0]
   10704:	f7ff fcc4 	bl	10090 <_fflush_r>
   10708:	2800      	cmp	r0, #0
   1070a:	d000      	beq.n	1070e <__sfvwrite_r+0x2ba>
   1070c:	e741      	b.n	10592 <__sfvwrite_r+0x13e>
   1070e:	9e01      	ldr	r6, [sp, #4]
   10710:	e70e      	b.n	10530 <__sfvwrite_r+0xdc>
   10712:	9800      	ldr	r0, [sp, #0]
   10714:	f000 ff7a 	bl	1160c <_realloc_r>
   10718:	4680      	mov	r8, r0
   1071a:	2800      	cmp	r0, #0
   1071c:	d1c7      	bne.n	106ae <__sfvwrite_r+0x25a>
   1071e:	9d00      	ldr	r5, [sp, #0]
   10720:	6921      	ldr	r1, [r4, #16]
   10722:	0028      	movs	r0, r5
   10724:	f7ff fdb8 	bl	10298 <_free_r>
   10728:	2280      	movs	r2, #128	; 0x80
   1072a:	89a3      	ldrh	r3, [r4, #12]
   1072c:	4393      	bics	r3, r2
   1072e:	3a74      	subs	r2, #116	; 0x74
   10730:	b21b      	sxth	r3, r3
   10732:	602a      	str	r2, [r5, #0]
   10734:	e72f      	b.n	10596 <__sfvwrite_r+0x142>
   10736:	1c7d      	adds	r5, r7, #1
   10738:	e6de      	b.n	104f8 <__sfvwrite_r+0xa4>
   1073a:	2001      	movs	r0, #1
   1073c:	4240      	negs	r0, r0
   1073e:	e6bd      	b.n	104bc <__sfvwrite_r+0x68>
   10740:	9a00      	ldr	r2, [sp, #0]
   10742:	330c      	adds	r3, #12
   10744:	6013      	str	r3, [r2, #0]
   10746:	220c      	movs	r2, #12
   10748:	5ea3      	ldrsh	r3, [r4, r2]
   1074a:	e724      	b.n	10596 <__sfvwrite_r+0x142>
   1074c:	7ffffc00 	.word	0x7ffffc00
   10750:	fffffb7f 	.word	0xfffffb7f
   10754:	7fffffff 	.word	0x7fffffff

00010758 <_fwalk_reent>:
   10758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1075a:	4647      	mov	r7, r8
   1075c:	46ce      	mov	lr, r9
   1075e:	b580      	push	{r7, lr}
   10760:	27b8      	movs	r7, #184	; 0xb8
   10762:	4680      	mov	r8, r0
   10764:	00bf      	lsls	r7, r7, #2
   10766:	4447      	add	r7, r8
   10768:	4689      	mov	r9, r1
   1076a:	2600      	movs	r6, #0
   1076c:	2f00      	cmp	r7, #0
   1076e:	d014      	beq.n	1079a <_fwalk_reent+0x42>
   10770:	687b      	ldr	r3, [r7, #4]
   10772:	68bc      	ldr	r4, [r7, #8]
   10774:	1e5d      	subs	r5, r3, #1
   10776:	d40d      	bmi.n	10794 <_fwalk_reent+0x3c>
   10778:	89a3      	ldrh	r3, [r4, #12]
   1077a:	2b01      	cmp	r3, #1
   1077c:	d907      	bls.n	1078e <_fwalk_reent+0x36>
   1077e:	220e      	movs	r2, #14
   10780:	5ea3      	ldrsh	r3, [r4, r2]
   10782:	3301      	adds	r3, #1
   10784:	d003      	beq.n	1078e <_fwalk_reent+0x36>
   10786:	0021      	movs	r1, r4
   10788:	4640      	mov	r0, r8
   1078a:	47c8      	blx	r9
   1078c:	4306      	orrs	r6, r0
   1078e:	3468      	adds	r4, #104	; 0x68
   10790:	3d01      	subs	r5, #1
   10792:	d2f1      	bcs.n	10778 <_fwalk_reent+0x20>
   10794:	683f      	ldr	r7, [r7, #0]
   10796:	2f00      	cmp	r7, #0
   10798:	d1ea      	bne.n	10770 <_fwalk_reent+0x18>
   1079a:	0030      	movs	r0, r6
   1079c:	bc0c      	pop	{r2, r3}
   1079e:	4690      	mov	r8, r2
   107a0:	4699      	mov	r9, r3
   107a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000107a4 <_localeconv_r>:
   107a4:	4b04      	ldr	r3, [pc, #16]	; (107b8 <_localeconv_r+0x14>)
   107a6:	681b      	ldr	r3, [r3, #0]
   107a8:	6b58      	ldr	r0, [r3, #52]	; 0x34
   107aa:	2800      	cmp	r0, #0
   107ac:	d001      	beq.n	107b2 <_localeconv_r+0xe>
   107ae:	30f0      	adds	r0, #240	; 0xf0
   107b0:	4770      	bx	lr
   107b2:	4802      	ldr	r0, [pc, #8]	; (107bc <_localeconv_r+0x18>)
   107b4:	e7fb      	b.n	107ae <_localeconv_r+0xa>
   107b6:	46c0      	nop			; (mov r8, r8)
   107b8:	20000084 	.word	0x20000084
   107bc:	200008c4 	.word	0x200008c4

000107c0 <__retarget_lock_init_recursive>:
   107c0:	4770      	bx	lr
   107c2:	46c0      	nop			; (mov r8, r8)

000107c4 <__retarget_lock_close_recursive>:
   107c4:	4770      	bx	lr
   107c6:	46c0      	nop			; (mov r8, r8)

000107c8 <__retarget_lock_acquire_recursive>:
   107c8:	4770      	bx	lr
   107ca:	46c0      	nop			; (mov r8, r8)

000107cc <__retarget_lock_release_recursive>:
   107cc:	4770      	bx	lr
   107ce:	46c0      	nop			; (mov r8, r8)

000107d0 <__swhatbuf_r>:
   107d0:	b570      	push	{r4, r5, r6, lr}
   107d2:	000c      	movs	r4, r1
   107d4:	001e      	movs	r6, r3
   107d6:	230e      	movs	r3, #14
   107d8:	5ec9      	ldrsh	r1, [r1, r3]
   107da:	b090      	sub	sp, #64	; 0x40
   107dc:	0015      	movs	r5, r2
   107de:	2900      	cmp	r1, #0
   107e0:	db15      	blt.n	1080e <__swhatbuf_r+0x3e>
   107e2:	aa01      	add	r2, sp, #4
   107e4:	f001 faae 	bl	11d44 <_fstat_r>
   107e8:	2800      	cmp	r0, #0
   107ea:	db10      	blt.n	1080e <__swhatbuf_r+0x3e>
   107ec:	22f0      	movs	r2, #240	; 0xf0
   107ee:	9b02      	ldr	r3, [sp, #8]
   107f0:	0212      	lsls	r2, r2, #8
   107f2:	4013      	ands	r3, r2
   107f4:	4a0d      	ldr	r2, [pc, #52]	; (1082c <__swhatbuf_r+0x5c>)
   107f6:	2080      	movs	r0, #128	; 0x80
   107f8:	4694      	mov	ip, r2
   107fa:	4463      	add	r3, ip
   107fc:	425a      	negs	r2, r3
   107fe:	4153      	adcs	r3, r2
   10800:	6033      	str	r3, [r6, #0]
   10802:	2380      	movs	r3, #128	; 0x80
   10804:	00db      	lsls	r3, r3, #3
   10806:	602b      	str	r3, [r5, #0]
   10808:	0100      	lsls	r0, r0, #4
   1080a:	b010      	add	sp, #64	; 0x40
   1080c:	bd70      	pop	{r4, r5, r6, pc}
   1080e:	2300      	movs	r3, #0
   10810:	6033      	str	r3, [r6, #0]
   10812:	89a3      	ldrh	r3, [r4, #12]
   10814:	061b      	lsls	r3, r3, #24
   10816:	d503      	bpl.n	10820 <__swhatbuf_r+0x50>
   10818:	2340      	movs	r3, #64	; 0x40
   1081a:	2000      	movs	r0, #0
   1081c:	602b      	str	r3, [r5, #0]
   1081e:	e7f4      	b.n	1080a <__swhatbuf_r+0x3a>
   10820:	2380      	movs	r3, #128	; 0x80
   10822:	00db      	lsls	r3, r3, #3
   10824:	602b      	str	r3, [r5, #0]
   10826:	2000      	movs	r0, #0
   10828:	e7ef      	b.n	1080a <__swhatbuf_r+0x3a>
   1082a:	46c0      	nop			; (mov r8, r8)
   1082c:	ffffe000 	.word	0xffffe000

00010830 <__smakebuf_r>:
   10830:	b570      	push	{r4, r5, r6, lr}
   10832:	898b      	ldrh	r3, [r1, #12]
   10834:	b082      	sub	sp, #8
   10836:	0006      	movs	r6, r0
   10838:	000c      	movs	r4, r1
   1083a:	079b      	lsls	r3, r3, #30
   1083c:	d507      	bpl.n	1084e <__smakebuf_r+0x1e>
   1083e:	0023      	movs	r3, r4
   10840:	3343      	adds	r3, #67	; 0x43
   10842:	6023      	str	r3, [r4, #0]
   10844:	6123      	str	r3, [r4, #16]
   10846:	2301      	movs	r3, #1
   10848:	6163      	str	r3, [r4, #20]
   1084a:	b002      	add	sp, #8
   1084c:	bd70      	pop	{r4, r5, r6, pc}
   1084e:	ab01      	add	r3, sp, #4
   10850:	466a      	mov	r2, sp
   10852:	f7ff ffbd 	bl	107d0 <__swhatbuf_r>
   10856:	9900      	ldr	r1, [sp, #0]
   10858:	0005      	movs	r5, r0
   1085a:	0030      	movs	r0, r6
   1085c:	f000 f83a 	bl	108d4 <_malloc_r>
   10860:	2800      	cmp	r0, #0
   10862:	d01e      	beq.n	108a2 <__smakebuf_r+0x72>
   10864:	2280      	movs	r2, #128	; 0x80
   10866:	4b15      	ldr	r3, [pc, #84]	; (108bc <__smakebuf_r+0x8c>)
   10868:	63f3      	str	r3, [r6, #60]	; 0x3c
   1086a:	89a3      	ldrh	r3, [r4, #12]
   1086c:	6020      	str	r0, [r4, #0]
   1086e:	4313      	orrs	r3, r2
   10870:	9a00      	ldr	r2, [sp, #0]
   10872:	b21b      	sxth	r3, r3
   10874:	6162      	str	r2, [r4, #20]
   10876:	9a01      	ldr	r2, [sp, #4]
   10878:	81a3      	strh	r3, [r4, #12]
   1087a:	6120      	str	r0, [r4, #16]
   1087c:	2a00      	cmp	r2, #0
   1087e:	d102      	bne.n	10886 <__smakebuf_r+0x56>
   10880:	432b      	orrs	r3, r5
   10882:	81a3      	strh	r3, [r4, #12]
   10884:	e7e1      	b.n	1084a <__smakebuf_r+0x1a>
   10886:	230e      	movs	r3, #14
   10888:	5ee1      	ldrsh	r1, [r4, r3]
   1088a:	0030      	movs	r0, r6
   1088c:	f001 fa6e 	bl	11d6c <_isatty_r>
   10890:	2800      	cmp	r0, #0
   10892:	d010      	beq.n	108b6 <__smakebuf_r+0x86>
   10894:	2203      	movs	r2, #3
   10896:	89a3      	ldrh	r3, [r4, #12]
   10898:	4393      	bics	r3, r2
   1089a:	2201      	movs	r2, #1
   1089c:	4313      	orrs	r3, r2
   1089e:	b21b      	sxth	r3, r3
   108a0:	e7ee      	b.n	10880 <__smakebuf_r+0x50>
   108a2:	220c      	movs	r2, #12
   108a4:	5ea3      	ldrsh	r3, [r4, r2]
   108a6:	059a      	lsls	r2, r3, #22
   108a8:	d4cf      	bmi.n	1084a <__smakebuf_r+0x1a>
   108aa:	2203      	movs	r2, #3
   108ac:	4393      	bics	r3, r2
   108ae:	2202      	movs	r2, #2
   108b0:	4313      	orrs	r3, r2
   108b2:	81a3      	strh	r3, [r4, #12]
   108b4:	e7c3      	b.n	1083e <__smakebuf_r+0xe>
   108b6:	220c      	movs	r2, #12
   108b8:	5ea3      	ldrsh	r3, [r4, r2]
   108ba:	e7e1      	b.n	10880 <__smakebuf_r+0x50>
   108bc:	000100e5 	.word	0x000100e5

000108c0 <malloc>:
   108c0:	b510      	push	{r4, lr}
   108c2:	4b03      	ldr	r3, [pc, #12]	; (108d0 <malloc+0x10>)
   108c4:	0001      	movs	r1, r0
   108c6:	6818      	ldr	r0, [r3, #0]
   108c8:	f000 f804 	bl	108d4 <_malloc_r>
   108cc:	bd10      	pop	{r4, pc}
   108ce:	46c0      	nop			; (mov r8, r8)
   108d0:	20000084 	.word	0x20000084

000108d4 <_malloc_r>:
   108d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   108d6:	4657      	mov	r7, sl
   108d8:	4645      	mov	r5, r8
   108da:	46de      	mov	lr, fp
   108dc:	464e      	mov	r6, r9
   108de:	b5e0      	push	{r5, r6, r7, lr}
   108e0:	000d      	movs	r5, r1
   108e2:	350b      	adds	r5, #11
   108e4:	b083      	sub	sp, #12
   108e6:	0007      	movs	r7, r0
   108e8:	2d16      	cmp	r5, #22
   108ea:	d800      	bhi.n	108ee <_malloc_r+0x1a>
   108ec:	e09f      	b.n	10a2e <_malloc_r+0x15a>
   108ee:	2307      	movs	r3, #7
   108f0:	439d      	bics	r5, r3
   108f2:	d500      	bpl.n	108f6 <_malloc_r+0x22>
   108f4:	e0c4      	b.n	10a80 <_malloc_r+0x1ac>
   108f6:	42a9      	cmp	r1, r5
   108f8:	d900      	bls.n	108fc <_malloc_r+0x28>
   108fa:	e0c1      	b.n	10a80 <_malloc_r+0x1ac>
   108fc:	f000 fb2e 	bl	10f5c <__malloc_lock>
   10900:	23f8      	movs	r3, #248	; 0xf8
   10902:	33ff      	adds	r3, #255	; 0xff
   10904:	429d      	cmp	r5, r3
   10906:	d800      	bhi.n	1090a <_malloc_r+0x36>
   10908:	e28f      	b.n	10e2a <_malloc_r+0x556>
   1090a:	0a68      	lsrs	r0, r5, #9
   1090c:	d100      	bne.n	10910 <_malloc_r+0x3c>
   1090e:	e0bb      	b.n	10a88 <_malloc_r+0x1b4>
   10910:	2804      	cmp	r0, #4
   10912:	d900      	bls.n	10916 <_malloc_r+0x42>
   10914:	e162      	b.n	10bdc <_malloc_r+0x308>
   10916:	2338      	movs	r3, #56	; 0x38
   10918:	4698      	mov	r8, r3
   1091a:	09a8      	lsrs	r0, r5, #6
   1091c:	4480      	add	r8, r0
   1091e:	3039      	adds	r0, #57	; 0x39
   10920:	00c1      	lsls	r1, r0, #3
   10922:	4ed2      	ldr	r6, [pc, #840]	; (10c6c <_malloc_r+0x398>)
   10924:	1871      	adds	r1, r6, r1
   10926:	3908      	subs	r1, #8
   10928:	68cc      	ldr	r4, [r1, #12]
   1092a:	42a1      	cmp	r1, r4
   1092c:	d019      	beq.n	10962 <_malloc_r+0x8e>
   1092e:	2303      	movs	r3, #3
   10930:	6862      	ldr	r2, [r4, #4]
   10932:	439a      	bics	r2, r3
   10934:	0013      	movs	r3, r2
   10936:	1b52      	subs	r2, r2, r5
   10938:	2a0f      	cmp	r2, #15
   1093a:	dd00      	ble.n	1093e <_malloc_r+0x6a>
   1093c:	e0aa      	b.n	10a94 <_malloc_r+0x1c0>
   1093e:	2a00      	cmp	r2, #0
   10940:	db00      	blt.n	10944 <_malloc_r+0x70>
   10942:	e088      	b.n	10a56 <_malloc_r+0x182>
   10944:	2303      	movs	r3, #3
   10946:	469c      	mov	ip, r3
   10948:	e008      	b.n	1095c <_malloc_r+0x88>
   1094a:	4662      	mov	r2, ip
   1094c:	6863      	ldr	r3, [r4, #4]
   1094e:	4393      	bics	r3, r2
   10950:	1b5a      	subs	r2, r3, r5
   10952:	2a0f      	cmp	r2, #15
   10954:	dd00      	ble.n	10958 <_malloc_r+0x84>
   10956:	e09d      	b.n	10a94 <_malloc_r+0x1c0>
   10958:	2a00      	cmp	r2, #0
   1095a:	da7c      	bge.n	10a56 <_malloc_r+0x182>
   1095c:	68e4      	ldr	r4, [r4, #12]
   1095e:	42a1      	cmp	r1, r4
   10960:	d1f3      	bne.n	1094a <_malloc_r+0x76>
   10962:	0032      	movs	r2, r6
   10964:	6934      	ldr	r4, [r6, #16]
   10966:	3208      	adds	r2, #8
   10968:	4294      	cmp	r4, r2
   1096a:	d100      	bne.n	1096e <_malloc_r+0x9a>
   1096c:	e190      	b.n	10c90 <_malloc_r+0x3bc>
   1096e:	2303      	movs	r3, #3
   10970:	6861      	ldr	r1, [r4, #4]
   10972:	4399      	bics	r1, r3
   10974:	4689      	mov	r9, r1
   10976:	1b49      	subs	r1, r1, r5
   10978:	290f      	cmp	r1, #15
   1097a:	dd00      	ble.n	1097e <_malloc_r+0xaa>
   1097c:	e162      	b.n	10c44 <_malloc_r+0x370>
   1097e:	6172      	str	r2, [r6, #20]
   10980:	6132      	str	r2, [r6, #16]
   10982:	2900      	cmp	r1, #0
   10984:	db00      	blt.n	10988 <_malloc_r+0xb4>
   10986:	e087      	b.n	10a98 <_malloc_r+0x1c4>
   10988:	4ab9      	ldr	r2, [pc, #740]	; (10c70 <_malloc_r+0x39c>)
   1098a:	464b      	mov	r3, r9
   1098c:	4591      	cmp	r9, r2
   1098e:	d900      	bls.n	10992 <_malloc_r+0xbe>
   10990:	e130      	b.n	10bf4 <_malloc_r+0x320>
   10992:	08db      	lsrs	r3, r3, #3
   10994:	3aff      	subs	r2, #255	; 0xff
   10996:	1099      	asrs	r1, r3, #2
   10998:	3aff      	subs	r2, #255	; 0xff
   1099a:	408a      	lsls	r2, r1
   1099c:	00db      	lsls	r3, r3, #3
   1099e:	6871      	ldr	r1, [r6, #4]
   109a0:	199b      	adds	r3, r3, r6
   109a2:	430a      	orrs	r2, r1
   109a4:	6899      	ldr	r1, [r3, #8]
   109a6:	6072      	str	r2, [r6, #4]
   109a8:	60e3      	str	r3, [r4, #12]
   109aa:	60a1      	str	r1, [r4, #8]
   109ac:	609c      	str	r4, [r3, #8]
   109ae:	0013      	movs	r3, r2
   109b0:	60cc      	str	r4, [r1, #12]
   109b2:	2101      	movs	r1, #1
   109b4:	1082      	asrs	r2, r0, #2
   109b6:	4091      	lsls	r1, r2
   109b8:	4299      	cmp	r1, r3
   109ba:	d86f      	bhi.n	10a9c <_malloc_r+0x1c8>
   109bc:	420b      	tst	r3, r1
   109be:	d105      	bne.n	109cc <_malloc_r+0xf8>
   109c0:	2203      	movs	r2, #3
   109c2:	4390      	bics	r0, r2
   109c4:	0049      	lsls	r1, r1, #1
   109c6:	3004      	adds	r0, #4
   109c8:	420b      	tst	r3, r1
   109ca:	d0fb      	beq.n	109c4 <_malloc_r+0xf0>
   109cc:	2303      	movs	r3, #3
   109ce:	4698      	mov	r8, r3
   109d0:	00c3      	lsls	r3, r0, #3
   109d2:	4699      	mov	r9, r3
   109d4:	44b1      	add	r9, r6
   109d6:	46cc      	mov	ip, r9
   109d8:	4682      	mov	sl, r0
   109da:	4663      	mov	r3, ip
   109dc:	68dc      	ldr	r4, [r3, #12]
   109de:	45a4      	cmp	ip, r4
   109e0:	d107      	bne.n	109f2 <_malloc_r+0x11e>
   109e2:	e157      	b.n	10c94 <_malloc_r+0x3c0>
   109e4:	2a00      	cmp	r2, #0
   109e6:	db00      	blt.n	109ea <_malloc_r+0x116>
   109e8:	e166      	b.n	10cb8 <_malloc_r+0x3e4>
   109ea:	68e4      	ldr	r4, [r4, #12]
   109ec:	45a4      	cmp	ip, r4
   109ee:	d100      	bne.n	109f2 <_malloc_r+0x11e>
   109f0:	e150      	b.n	10c94 <_malloc_r+0x3c0>
   109f2:	4642      	mov	r2, r8
   109f4:	6863      	ldr	r3, [r4, #4]
   109f6:	4393      	bics	r3, r2
   109f8:	1b5a      	subs	r2, r3, r5
   109fa:	2a0f      	cmp	r2, #15
   109fc:	ddf2      	ble.n	109e4 <_malloc_r+0x110>
   109fe:	2001      	movs	r0, #1
   10a00:	4680      	mov	r8, r0
   10a02:	1961      	adds	r1, r4, r5
   10a04:	4305      	orrs	r5, r0
   10a06:	6065      	str	r5, [r4, #4]
   10a08:	68a0      	ldr	r0, [r4, #8]
   10a0a:	68e5      	ldr	r5, [r4, #12]
   10a0c:	3608      	adds	r6, #8
   10a0e:	60c5      	str	r5, [r0, #12]
   10a10:	60a8      	str	r0, [r5, #8]
   10a12:	4640      	mov	r0, r8
   10a14:	60f1      	str	r1, [r6, #12]
   10a16:	60b1      	str	r1, [r6, #8]
   10a18:	4310      	orrs	r0, r2
   10a1a:	6048      	str	r0, [r1, #4]
   10a1c:	60ce      	str	r6, [r1, #12]
   10a1e:	608e      	str	r6, [r1, #8]
   10a20:	0038      	movs	r0, r7
   10a22:	50e2      	str	r2, [r4, r3]
   10a24:	f000 faa2 	bl	10f6c <__malloc_unlock>
   10a28:	0020      	movs	r0, r4
   10a2a:	3008      	adds	r0, #8
   10a2c:	e021      	b.n	10a72 <_malloc_r+0x19e>
   10a2e:	2910      	cmp	r1, #16
   10a30:	d826      	bhi.n	10a80 <_malloc_r+0x1ac>
   10a32:	0038      	movs	r0, r7
   10a34:	f000 fa92 	bl	10f5c <__malloc_lock>
   10a38:	2510      	movs	r5, #16
   10a3a:	2318      	movs	r3, #24
   10a3c:	2002      	movs	r0, #2
   10a3e:	4e8b      	ldr	r6, [pc, #556]	; (10c6c <_malloc_r+0x398>)
   10a40:	18f3      	adds	r3, r6, r3
   10a42:	001a      	movs	r2, r3
   10a44:	685c      	ldr	r4, [r3, #4]
   10a46:	3a08      	subs	r2, #8
   10a48:	4294      	cmp	r4, r2
   10a4a:	d100      	bne.n	10a4e <_malloc_r+0x17a>
   10a4c:	e12e      	b.n	10cac <_malloc_r+0x3d8>
   10a4e:	2303      	movs	r3, #3
   10a50:	6862      	ldr	r2, [r4, #4]
   10a52:	439a      	bics	r2, r3
   10a54:	0013      	movs	r3, r2
   10a56:	68e2      	ldr	r2, [r4, #12]
   10a58:	68a1      	ldr	r1, [r4, #8]
   10a5a:	60ca      	str	r2, [r1, #12]
   10a5c:	6091      	str	r1, [r2, #8]
   10a5e:	2201      	movs	r2, #1
   10a60:	18e3      	adds	r3, r4, r3
   10a62:	6859      	ldr	r1, [r3, #4]
   10a64:	0038      	movs	r0, r7
   10a66:	430a      	orrs	r2, r1
   10a68:	605a      	str	r2, [r3, #4]
   10a6a:	f000 fa7f 	bl	10f6c <__malloc_unlock>
   10a6e:	0020      	movs	r0, r4
   10a70:	3008      	adds	r0, #8
   10a72:	b003      	add	sp, #12
   10a74:	bc3c      	pop	{r2, r3, r4, r5}
   10a76:	4690      	mov	r8, r2
   10a78:	4699      	mov	r9, r3
   10a7a:	46a2      	mov	sl, r4
   10a7c:	46ab      	mov	fp, r5
   10a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10a80:	230c      	movs	r3, #12
   10a82:	2000      	movs	r0, #0
   10a84:	603b      	str	r3, [r7, #0]
   10a86:	e7f4      	b.n	10a72 <_malloc_r+0x19e>
   10a88:	2180      	movs	r1, #128	; 0x80
   10a8a:	233f      	movs	r3, #63	; 0x3f
   10a8c:	2040      	movs	r0, #64	; 0x40
   10a8e:	0089      	lsls	r1, r1, #2
   10a90:	4698      	mov	r8, r3
   10a92:	e746      	b.n	10922 <_malloc_r+0x4e>
   10a94:	4640      	mov	r0, r8
   10a96:	e764      	b.n	10962 <_malloc_r+0x8e>
   10a98:	464b      	mov	r3, r9
   10a9a:	e7e0      	b.n	10a5e <_malloc_r+0x18a>
   10a9c:	2303      	movs	r3, #3
   10a9e:	68b4      	ldr	r4, [r6, #8]
   10aa0:	6862      	ldr	r2, [r4, #4]
   10aa2:	439a      	bics	r2, r3
   10aa4:	4690      	mov	r8, r2
   10aa6:	42aa      	cmp	r2, r5
   10aa8:	d303      	bcc.n	10ab2 <_malloc_r+0x1de>
   10aaa:	1b53      	subs	r3, r2, r5
   10aac:	2b0f      	cmp	r3, #15
   10aae:	dd00      	ble.n	10ab2 <_malloc_r+0x1de>
   10ab0:	e086      	b.n	10bc0 <_malloc_r+0x2ec>
   10ab2:	0023      	movs	r3, r4
   10ab4:	4443      	add	r3, r8
   10ab6:	4a6f      	ldr	r2, [pc, #444]	; (10c74 <_malloc_r+0x3a0>)
   10ab8:	9301      	str	r3, [sp, #4]
   10aba:	4b6f      	ldr	r3, [pc, #444]	; (10c78 <_malloc_r+0x3a4>)
   10abc:	4693      	mov	fp, r2
   10abe:	681b      	ldr	r3, [r3, #0]
   10ac0:	6812      	ldr	r2, [r2, #0]
   10ac2:	18eb      	adds	r3, r5, r3
   10ac4:	3201      	adds	r2, #1
   10ac6:	d100      	bne.n	10aca <_malloc_r+0x1f6>
   10ac8:	e168      	b.n	10d9c <_malloc_r+0x4c8>
   10aca:	4a6c      	ldr	r2, [pc, #432]	; (10c7c <_malloc_r+0x3a8>)
   10acc:	4694      	mov	ip, r2
   10ace:	4463      	add	r3, ip
   10ad0:	0b1b      	lsrs	r3, r3, #12
   10ad2:	031b      	lsls	r3, r3, #12
   10ad4:	9300      	str	r3, [sp, #0]
   10ad6:	9900      	ldr	r1, [sp, #0]
   10ad8:	0038      	movs	r0, r7
   10ada:	f000 ff55 	bl	11988 <_sbrk_r>
   10ade:	0003      	movs	r3, r0
   10ae0:	4681      	mov	r9, r0
   10ae2:	3301      	adds	r3, #1
   10ae4:	d061      	beq.n	10baa <_malloc_r+0x2d6>
   10ae6:	9b01      	ldr	r3, [sp, #4]
   10ae8:	4283      	cmp	r3, r0
   10aea:	d900      	bls.n	10aee <_malloc_r+0x21a>
   10aec:	e0ff      	b.n	10cee <_malloc_r+0x41a>
   10aee:	4b64      	ldr	r3, [pc, #400]	; (10c80 <_malloc_r+0x3ac>)
   10af0:	9a00      	ldr	r2, [sp, #0]
   10af2:	469a      	mov	sl, r3
   10af4:	681b      	ldr	r3, [r3, #0]
   10af6:	469c      	mov	ip, r3
   10af8:	4653      	mov	r3, sl
   10afa:	4462      	add	r2, ip
   10afc:	601a      	str	r2, [r3, #0]
   10afe:	9b01      	ldr	r3, [sp, #4]
   10b00:	0011      	movs	r1, r2
   10b02:	4283      	cmp	r3, r0
   10b04:	d100      	bne.n	10b08 <_malloc_r+0x234>
   10b06:	e155      	b.n	10db4 <_malloc_r+0x4e0>
   10b08:	465b      	mov	r3, fp
   10b0a:	681b      	ldr	r3, [r3, #0]
   10b0c:	3301      	adds	r3, #1
   10b0e:	d100      	bne.n	10b12 <_malloc_r+0x23e>
   10b10:	e16c      	b.n	10dec <_malloc_r+0x518>
   10b12:	464b      	mov	r3, r9
   10b14:	9a01      	ldr	r2, [sp, #4]
   10b16:	1a9b      	subs	r3, r3, r2
   10b18:	1859      	adds	r1, r3, r1
   10b1a:	4653      	mov	r3, sl
   10b1c:	6019      	str	r1, [r3, #0]
   10b1e:	2307      	movs	r3, #7
   10b20:	464a      	mov	r2, r9
   10b22:	4013      	ands	r3, r2
   10b24:	d100      	bne.n	10b28 <_malloc_r+0x254>
   10b26:	e124      	b.n	10d72 <_malloc_r+0x49e>
   10b28:	2108      	movs	r1, #8
   10b2a:	4689      	mov	r9, r1
   10b2c:	4955      	ldr	r1, [pc, #340]	; (10c84 <_malloc_r+0x3b0>)
   10b2e:	1ad2      	subs	r2, r2, r3
   10b30:	4491      	add	r9, r2
   10b32:	1acb      	subs	r3, r1, r3
   10b34:	9a00      	ldr	r2, [sp, #0]
   10b36:	0038      	movs	r0, r7
   10b38:	444a      	add	r2, r9
   10b3a:	0511      	lsls	r1, r2, #20
   10b3c:	0d09      	lsrs	r1, r1, #20
   10b3e:	1a5b      	subs	r3, r3, r1
   10b40:	0019      	movs	r1, r3
   10b42:	469b      	mov	fp, r3
   10b44:	f000 ff20 	bl	11988 <_sbrk_r>
   10b48:	1c43      	adds	r3, r0, #1
   10b4a:	d100      	bne.n	10b4e <_malloc_r+0x27a>
   10b4c:	e142      	b.n	10dd4 <_malloc_r+0x500>
   10b4e:	464b      	mov	r3, r9
   10b50:	1ac0      	subs	r0, r0, r3
   10b52:	2301      	movs	r3, #1
   10b54:	4458      	add	r0, fp
   10b56:	4318      	orrs	r0, r3
   10b58:	4653      	mov	r3, sl
   10b5a:	681b      	ldr	r3, [r3, #0]
   10b5c:	445b      	add	r3, fp
   10b5e:	0019      	movs	r1, r3
   10b60:	4653      	mov	r3, sl
   10b62:	6019      	str	r1, [r3, #0]
   10b64:	464b      	mov	r3, r9
   10b66:	60b3      	str	r3, [r6, #8]
   10b68:	6058      	str	r0, [r3, #4]
   10b6a:	42b4      	cmp	r4, r6
   10b6c:	d013      	beq.n	10b96 <_malloc_r+0x2c2>
   10b6e:	4643      	mov	r3, r8
   10b70:	2b0f      	cmp	r3, #15
   10b72:	d800      	bhi.n	10b76 <_malloc_r+0x2a2>
   10b74:	e0e8      	b.n	10d48 <_malloc_r+0x474>
   10b76:	4643      	mov	r3, r8
   10b78:	2207      	movs	r2, #7
   10b7a:	6860      	ldr	r0, [r4, #4]
   10b7c:	3b0c      	subs	r3, #12
   10b7e:	4393      	bics	r3, r2
   10b80:	3a06      	subs	r2, #6
   10b82:	4002      	ands	r2, r0
   10b84:	2005      	movs	r0, #5
   10b86:	431a      	orrs	r2, r3
   10b88:	6062      	str	r2, [r4, #4]
   10b8a:	18e2      	adds	r2, r4, r3
   10b8c:	6050      	str	r0, [r2, #4]
   10b8e:	6090      	str	r0, [r2, #8]
   10b90:	2b0f      	cmp	r3, #15
   10b92:	d900      	bls.n	10b96 <_malloc_r+0x2c2>
   10b94:	e122      	b.n	10ddc <_malloc_r+0x508>
   10b96:	4b3c      	ldr	r3, [pc, #240]	; (10c88 <_malloc_r+0x3b4>)
   10b98:	681a      	ldr	r2, [r3, #0]
   10b9a:	4291      	cmp	r1, r2
   10b9c:	d900      	bls.n	10ba0 <_malloc_r+0x2cc>
   10b9e:	6019      	str	r1, [r3, #0]
   10ba0:	4b3a      	ldr	r3, [pc, #232]	; (10c8c <_malloc_r+0x3b8>)
   10ba2:	681a      	ldr	r2, [r3, #0]
   10ba4:	4291      	cmp	r1, r2
   10ba6:	d900      	bls.n	10baa <_malloc_r+0x2d6>
   10ba8:	6019      	str	r1, [r3, #0]
   10baa:	2303      	movs	r3, #3
   10bac:	68b4      	ldr	r4, [r6, #8]
   10bae:	6862      	ldr	r2, [r4, #4]
   10bb0:	439a      	bics	r2, r3
   10bb2:	1b53      	subs	r3, r2, r5
   10bb4:	4295      	cmp	r5, r2
   10bb6:	d900      	bls.n	10bba <_malloc_r+0x2e6>
   10bb8:	e0c9      	b.n	10d4e <_malloc_r+0x47a>
   10bba:	2b0f      	cmp	r3, #15
   10bbc:	dc00      	bgt.n	10bc0 <_malloc_r+0x2ec>
   10bbe:	e0c6      	b.n	10d4e <_malloc_r+0x47a>
   10bc0:	2201      	movs	r2, #1
   10bc2:	0029      	movs	r1, r5
   10bc4:	4313      	orrs	r3, r2
   10bc6:	4311      	orrs	r1, r2
   10bc8:	1965      	adds	r5, r4, r5
   10bca:	6061      	str	r1, [r4, #4]
   10bcc:	0038      	movs	r0, r7
   10bce:	60b5      	str	r5, [r6, #8]
   10bd0:	606b      	str	r3, [r5, #4]
   10bd2:	f000 f9cb 	bl	10f6c <__malloc_unlock>
   10bd6:	0020      	movs	r0, r4
   10bd8:	3008      	adds	r0, #8
   10bda:	e74a      	b.n	10a72 <_malloc_r+0x19e>
   10bdc:	2814      	cmp	r0, #20
   10bde:	d97a      	bls.n	10cd6 <_malloc_r+0x402>
   10be0:	2854      	cmp	r0, #84	; 0x54
   10be2:	d900      	bls.n	10be6 <_malloc_r+0x312>
   10be4:	e0ba      	b.n	10d5c <_malloc_r+0x488>
   10be6:	236e      	movs	r3, #110	; 0x6e
   10be8:	4698      	mov	r8, r3
   10bea:	0b28      	lsrs	r0, r5, #12
   10bec:	4480      	add	r8, r0
   10bee:	306f      	adds	r0, #111	; 0x6f
   10bf0:	00c1      	lsls	r1, r0, #3
   10bf2:	e696      	b.n	10922 <_malloc_r+0x4e>
   10bf4:	0a5a      	lsrs	r2, r3, #9
   10bf6:	2a04      	cmp	r2, #4
   10bf8:	d973      	bls.n	10ce2 <_malloc_r+0x40e>
   10bfa:	2a14      	cmp	r2, #20
   10bfc:	d900      	bls.n	10c00 <_malloc_r+0x32c>
   10bfe:	e0d0      	b.n	10da2 <_malloc_r+0x4ce>
   10c00:	0011      	movs	r1, r2
   10c02:	325c      	adds	r2, #92	; 0x5c
   10c04:	315b      	adds	r1, #91	; 0x5b
   10c06:	00d2      	lsls	r2, r2, #3
   10c08:	2308      	movs	r3, #8
   10c0a:	425b      	negs	r3, r3
   10c0c:	469c      	mov	ip, r3
   10c0e:	18b2      	adds	r2, r6, r2
   10c10:	4494      	add	ip, r2
   10c12:	4663      	mov	r3, ip
   10c14:	689a      	ldr	r2, [r3, #8]
   10c16:	2303      	movs	r3, #3
   10c18:	4698      	mov	r8, r3
   10c1a:	4594      	cmp	ip, r2
   10c1c:	d100      	bne.n	10c20 <_malloc_r+0x34c>
   10c1e:	e0ab      	b.n	10d78 <_malloc_r+0x4a4>
   10c20:	4643      	mov	r3, r8
   10c22:	6851      	ldr	r1, [r2, #4]
   10c24:	4399      	bics	r1, r3
   10c26:	4589      	cmp	r9, r1
   10c28:	d300      	bcc.n	10c2c <_malloc_r+0x358>
   10c2a:	e095      	b.n	10d58 <_malloc_r+0x484>
   10c2c:	6892      	ldr	r2, [r2, #8]
   10c2e:	4594      	cmp	ip, r2
   10c30:	d1f6      	bne.n	10c20 <_malloc_r+0x34c>
   10c32:	4663      	mov	r3, ip
   10c34:	68da      	ldr	r2, [r3, #12]
   10c36:	6873      	ldr	r3, [r6, #4]
   10c38:	4661      	mov	r1, ip
   10c3a:	60e2      	str	r2, [r4, #12]
   10c3c:	60a1      	str	r1, [r4, #8]
   10c3e:	6094      	str	r4, [r2, #8]
   10c40:	60cc      	str	r4, [r1, #12]
   10c42:	e6b6      	b.n	109b2 <_malloc_r+0xde>
   10c44:	2301      	movs	r3, #1
   10c46:	1960      	adds	r0, r4, r5
   10c48:	431d      	orrs	r5, r3
   10c4a:	6065      	str	r5, [r4, #4]
   10c4c:	6170      	str	r0, [r6, #20]
   10c4e:	6130      	str	r0, [r6, #16]
   10c50:	60c2      	str	r2, [r0, #12]
   10c52:	6082      	str	r2, [r0, #8]
   10c54:	001a      	movs	r2, r3
   10c56:	464b      	mov	r3, r9
   10c58:	430a      	orrs	r2, r1
   10c5a:	6042      	str	r2, [r0, #4]
   10c5c:	0038      	movs	r0, r7
   10c5e:	50e1      	str	r1, [r4, r3]
   10c60:	f000 f984 	bl	10f6c <__malloc_unlock>
   10c64:	0020      	movs	r0, r4
   10c66:	3008      	adds	r0, #8
   10c68:	e703      	b.n	10a72 <_malloc_r+0x19e>
   10c6a:	46c0      	nop			; (mov r8, r8)
   10c6c:	200004b4 	.word	0x200004b4
   10c70:	000001ff 	.word	0x000001ff
   10c74:	200008bc 	.word	0x200008bc
   10c78:	20001250 	.word	0x20001250
   10c7c:	0000100f 	.word	0x0000100f
   10c80:	20001220 	.word	0x20001220
   10c84:	00001008 	.word	0x00001008
   10c88:	20001248 	.word	0x20001248
   10c8c:	2000124c 	.word	0x2000124c
   10c90:	6873      	ldr	r3, [r6, #4]
   10c92:	e68e      	b.n	109b2 <_malloc_r+0xde>
   10c94:	2308      	movs	r3, #8
   10c96:	469b      	mov	fp, r3
   10c98:	3b07      	subs	r3, #7
   10c9a:	44dc      	add	ip, fp
   10c9c:	469b      	mov	fp, r3
   10c9e:	44da      	add	sl, fp
   10ca0:	4643      	mov	r3, r8
   10ca2:	4652      	mov	r2, sl
   10ca4:	4213      	tst	r3, r2
   10ca6:	d000      	beq.n	10caa <_malloc_r+0x3d6>
   10ca8:	e697      	b.n	109da <_malloc_r+0x106>
   10caa:	e037      	b.n	10d1c <_malloc_r+0x448>
   10cac:	68dc      	ldr	r4, [r3, #12]
   10cae:	3002      	adds	r0, #2
   10cb0:	42a3      	cmp	r3, r4
   10cb2:	d100      	bne.n	10cb6 <_malloc_r+0x3e2>
   10cb4:	e655      	b.n	10962 <_malloc_r+0x8e>
   10cb6:	e6ca      	b.n	10a4e <_malloc_r+0x17a>
   10cb8:	2201      	movs	r2, #1
   10cba:	18e3      	adds	r3, r4, r3
   10cbc:	6859      	ldr	r1, [r3, #4]
   10cbe:	0038      	movs	r0, r7
   10cc0:	430a      	orrs	r2, r1
   10cc2:	605a      	str	r2, [r3, #4]
   10cc4:	68e3      	ldr	r3, [r4, #12]
   10cc6:	68a2      	ldr	r2, [r4, #8]
   10cc8:	60d3      	str	r3, [r2, #12]
   10cca:	609a      	str	r2, [r3, #8]
   10ccc:	f000 f94e 	bl	10f6c <__malloc_unlock>
   10cd0:	0020      	movs	r0, r4
   10cd2:	3008      	adds	r0, #8
   10cd4:	e6cd      	b.n	10a72 <_malloc_r+0x19e>
   10cd6:	235b      	movs	r3, #91	; 0x5b
   10cd8:	4698      	mov	r8, r3
   10cda:	4480      	add	r8, r0
   10cdc:	305c      	adds	r0, #92	; 0x5c
   10cde:	00c1      	lsls	r1, r0, #3
   10ce0:	e61f      	b.n	10922 <_malloc_r+0x4e>
   10ce2:	099a      	lsrs	r2, r3, #6
   10ce4:	0011      	movs	r1, r2
   10ce6:	3239      	adds	r2, #57	; 0x39
   10ce8:	3138      	adds	r1, #56	; 0x38
   10cea:	00d2      	lsls	r2, r2, #3
   10cec:	e78c      	b.n	10c08 <_malloc_r+0x334>
   10cee:	42b4      	cmp	r4, r6
   10cf0:	d000      	beq.n	10cf4 <_malloc_r+0x420>
   10cf2:	e75a      	b.n	10baa <_malloc_r+0x2d6>
   10cf4:	4b4f      	ldr	r3, [pc, #316]	; (10e34 <_malloc_r+0x560>)
   10cf6:	9a00      	ldr	r2, [sp, #0]
   10cf8:	469a      	mov	sl, r3
   10cfa:	681b      	ldr	r3, [r3, #0]
   10cfc:	469c      	mov	ip, r3
   10cfe:	4653      	mov	r3, sl
   10d00:	4462      	add	r2, ip
   10d02:	0011      	movs	r1, r2
   10d04:	601a      	str	r2, [r3, #0]
   10d06:	e6ff      	b.n	10b08 <_malloc_r+0x234>
   10d08:	2308      	movs	r3, #8
   10d0a:	425b      	negs	r3, r3
   10d0c:	469c      	mov	ip, r3
   10d0e:	44e1      	add	r9, ip
   10d10:	464b      	mov	r3, r9
   10d12:	689b      	ldr	r3, [r3, #8]
   10d14:	3801      	subs	r0, #1
   10d16:	4599      	cmp	r9, r3
   10d18:	d000      	beq.n	10d1c <_malloc_r+0x448>
   10d1a:	e084      	b.n	10e26 <_malloc_r+0x552>
   10d1c:	4643      	mov	r3, r8
   10d1e:	4203      	tst	r3, r0
   10d20:	d1f2      	bne.n	10d08 <_malloc_r+0x434>
   10d22:	6873      	ldr	r3, [r6, #4]
   10d24:	438b      	bics	r3, r1
   10d26:	6073      	str	r3, [r6, #4]
   10d28:	0049      	lsls	r1, r1, #1
   10d2a:	4299      	cmp	r1, r3
   10d2c:	d900      	bls.n	10d30 <_malloc_r+0x45c>
   10d2e:	e6b5      	b.n	10a9c <_malloc_r+0x1c8>
   10d30:	2900      	cmp	r1, #0
   10d32:	d100      	bne.n	10d36 <_malloc_r+0x462>
   10d34:	e6b2      	b.n	10a9c <_malloc_r+0x1c8>
   10d36:	4650      	mov	r0, sl
   10d38:	420b      	tst	r3, r1
   10d3a:	d000      	beq.n	10d3e <_malloc_r+0x46a>
   10d3c:	e648      	b.n	109d0 <_malloc_r+0xfc>
   10d3e:	0049      	lsls	r1, r1, #1
   10d40:	3004      	adds	r0, #4
   10d42:	420b      	tst	r3, r1
   10d44:	d0fb      	beq.n	10d3e <_malloc_r+0x46a>
   10d46:	e643      	b.n	109d0 <_malloc_r+0xfc>
   10d48:	2301      	movs	r3, #1
   10d4a:	464a      	mov	r2, r9
   10d4c:	6053      	str	r3, [r2, #4]
   10d4e:	0038      	movs	r0, r7
   10d50:	f000 f90c 	bl	10f6c <__malloc_unlock>
   10d54:	2000      	movs	r0, #0
   10d56:	e68c      	b.n	10a72 <_malloc_r+0x19e>
   10d58:	4694      	mov	ip, r2
   10d5a:	e76a      	b.n	10c32 <_malloc_r+0x35e>
   10d5c:	23aa      	movs	r3, #170	; 0xaa
   10d5e:	005b      	lsls	r3, r3, #1
   10d60:	4298      	cmp	r0, r3
   10d62:	d811      	bhi.n	10d88 <_malloc_r+0x4b4>
   10d64:	3bdd      	subs	r3, #221	; 0xdd
   10d66:	4698      	mov	r8, r3
   10d68:	0be8      	lsrs	r0, r5, #15
   10d6a:	4480      	add	r8, r0
   10d6c:	3078      	adds	r0, #120	; 0x78
   10d6e:	00c1      	lsls	r1, r0, #3
   10d70:	e5d7      	b.n	10922 <_malloc_r+0x4e>
   10d72:	2380      	movs	r3, #128	; 0x80
   10d74:	015b      	lsls	r3, r3, #5
   10d76:	e6dd      	b.n	10b34 <_malloc_r+0x260>
   10d78:	1089      	asrs	r1, r1, #2
   10d7a:	3b02      	subs	r3, #2
   10d7c:	408b      	lsls	r3, r1
   10d7e:	6872      	ldr	r2, [r6, #4]
   10d80:	4313      	orrs	r3, r2
   10d82:	6073      	str	r3, [r6, #4]
   10d84:	4662      	mov	r2, ip
   10d86:	e757      	b.n	10c38 <_malloc_r+0x364>
   10d88:	4b2b      	ldr	r3, [pc, #172]	; (10e38 <_malloc_r+0x564>)
   10d8a:	4298      	cmp	r0, r3
   10d8c:	d81c      	bhi.n	10dc8 <_malloc_r+0x4f4>
   10d8e:	237c      	movs	r3, #124	; 0x7c
   10d90:	4698      	mov	r8, r3
   10d92:	0ca8      	lsrs	r0, r5, #18
   10d94:	4480      	add	r8, r0
   10d96:	307d      	adds	r0, #125	; 0x7d
   10d98:	00c1      	lsls	r1, r0, #3
   10d9a:	e5c2      	b.n	10922 <_malloc_r+0x4e>
   10d9c:	3310      	adds	r3, #16
   10d9e:	9300      	str	r3, [sp, #0]
   10da0:	e699      	b.n	10ad6 <_malloc_r+0x202>
   10da2:	2a54      	cmp	r2, #84	; 0x54
   10da4:	d826      	bhi.n	10df4 <_malloc_r+0x520>
   10da6:	464b      	mov	r3, r9
   10da8:	0b1a      	lsrs	r2, r3, #12
   10daa:	0011      	movs	r1, r2
   10dac:	326f      	adds	r2, #111	; 0x6f
   10dae:	316e      	adds	r1, #110	; 0x6e
   10db0:	00d2      	lsls	r2, r2, #3
   10db2:	e729      	b.n	10c08 <_malloc_r+0x334>
   10db4:	051b      	lsls	r3, r3, #20
   10db6:	d000      	beq.n	10dba <_malloc_r+0x4e6>
   10db8:	e6a6      	b.n	10b08 <_malloc_r+0x234>
   10dba:	2001      	movs	r0, #1
   10dbc:	9b00      	ldr	r3, [sp, #0]
   10dbe:	68b2      	ldr	r2, [r6, #8]
   10dc0:	4443      	add	r3, r8
   10dc2:	4303      	orrs	r3, r0
   10dc4:	6053      	str	r3, [r2, #4]
   10dc6:	e6e6      	b.n	10b96 <_malloc_r+0x2c2>
   10dc8:	21fe      	movs	r1, #254	; 0xfe
   10dca:	237e      	movs	r3, #126	; 0x7e
   10dcc:	207f      	movs	r0, #127	; 0x7f
   10dce:	0089      	lsls	r1, r1, #2
   10dd0:	4698      	mov	r8, r3
   10dd2:	e5a6      	b.n	10922 <_malloc_r+0x4e>
   10dd4:	2300      	movs	r3, #0
   10dd6:	2001      	movs	r0, #1
   10dd8:	469b      	mov	fp, r3
   10dda:	e6bd      	b.n	10b58 <_malloc_r+0x284>
   10ddc:	0021      	movs	r1, r4
   10dde:	0038      	movs	r0, r7
   10de0:	3108      	adds	r1, #8
   10de2:	f7ff fa59 	bl	10298 <_free_r>
   10de6:	4653      	mov	r3, sl
   10de8:	6819      	ldr	r1, [r3, #0]
   10dea:	e6d4      	b.n	10b96 <_malloc_r+0x2c2>
   10dec:	465b      	mov	r3, fp
   10dee:	464a      	mov	r2, r9
   10df0:	601a      	str	r2, [r3, #0]
   10df2:	e694      	b.n	10b1e <_malloc_r+0x24a>
   10df4:	21aa      	movs	r1, #170	; 0xaa
   10df6:	0049      	lsls	r1, r1, #1
   10df8:	428a      	cmp	r2, r1
   10dfa:	d806      	bhi.n	10e0a <_malloc_r+0x536>
   10dfc:	464b      	mov	r3, r9
   10dfe:	0bda      	lsrs	r2, r3, #15
   10e00:	0011      	movs	r1, r2
   10e02:	3278      	adds	r2, #120	; 0x78
   10e04:	3177      	adds	r1, #119	; 0x77
   10e06:	00d2      	lsls	r2, r2, #3
   10e08:	e6fe      	b.n	10c08 <_malloc_r+0x334>
   10e0a:	490b      	ldr	r1, [pc, #44]	; (10e38 <_malloc_r+0x564>)
   10e0c:	428a      	cmp	r2, r1
   10e0e:	d806      	bhi.n	10e1e <_malloc_r+0x54a>
   10e10:	464b      	mov	r3, r9
   10e12:	0c9a      	lsrs	r2, r3, #18
   10e14:	0011      	movs	r1, r2
   10e16:	327d      	adds	r2, #125	; 0x7d
   10e18:	317c      	adds	r1, #124	; 0x7c
   10e1a:	00d2      	lsls	r2, r2, #3
   10e1c:	e6f4      	b.n	10c08 <_malloc_r+0x334>
   10e1e:	22fe      	movs	r2, #254	; 0xfe
   10e20:	217e      	movs	r1, #126	; 0x7e
   10e22:	0092      	lsls	r2, r2, #2
   10e24:	e6f0      	b.n	10c08 <_malloc_r+0x334>
   10e26:	6873      	ldr	r3, [r6, #4]
   10e28:	e77e      	b.n	10d28 <_malloc_r+0x454>
   10e2a:	002b      	movs	r3, r5
   10e2c:	08e8      	lsrs	r0, r5, #3
   10e2e:	3308      	adds	r3, #8
   10e30:	e605      	b.n	10a3e <_malloc_r+0x16a>
   10e32:	46c0      	nop			; (mov r8, r8)
   10e34:	20001220 	.word	0x20001220
   10e38:	00000554 	.word	0x00000554

00010e3c <memchr>:
   10e3c:	b570      	push	{r4, r5, r6, lr}
   10e3e:	b2cd      	uxtb	r5, r1
   10e40:	0783      	lsls	r3, r0, #30
   10e42:	d034      	beq.n	10eae <memchr+0x72>
   10e44:	1e54      	subs	r4, r2, #1
   10e46:	2a00      	cmp	r2, #0
   10e48:	d01b      	beq.n	10e82 <memchr+0x46>
   10e4a:	7803      	ldrb	r3, [r0, #0]
   10e4c:	42ab      	cmp	r3, r5
   10e4e:	d019      	beq.n	10e84 <memchr+0x48>
   10e50:	2203      	movs	r2, #3
   10e52:	e004      	b.n	10e5e <memchr+0x22>
   10e54:	3c01      	subs	r4, #1
   10e56:	d314      	bcc.n	10e82 <memchr+0x46>
   10e58:	7803      	ldrb	r3, [r0, #0]
   10e5a:	42ab      	cmp	r3, r5
   10e5c:	d012      	beq.n	10e84 <memchr+0x48>
   10e5e:	3001      	adds	r0, #1
   10e60:	4210      	tst	r0, r2
   10e62:	d1f7      	bne.n	10e54 <memchr+0x18>
   10e64:	2c03      	cmp	r4, #3
   10e66:	d80e      	bhi.n	10e86 <memchr+0x4a>
   10e68:	2c00      	cmp	r4, #0
   10e6a:	d00a      	beq.n	10e82 <memchr+0x46>
   10e6c:	7803      	ldrb	r3, [r0, #0]
   10e6e:	42ab      	cmp	r3, r5
   10e70:	d008      	beq.n	10e84 <memchr+0x48>
   10e72:	1904      	adds	r4, r0, r4
   10e74:	e002      	b.n	10e7c <memchr+0x40>
   10e76:	7803      	ldrb	r3, [r0, #0]
   10e78:	42ab      	cmp	r3, r5
   10e7a:	d003      	beq.n	10e84 <memchr+0x48>
   10e7c:	3001      	adds	r0, #1
   10e7e:	4284      	cmp	r4, r0
   10e80:	d1f9      	bne.n	10e76 <memchr+0x3a>
   10e82:	2000      	movs	r0, #0
   10e84:	bd70      	pop	{r4, r5, r6, pc}
   10e86:	22ff      	movs	r2, #255	; 0xff
   10e88:	060b      	lsls	r3, r1, #24
   10e8a:	0c1b      	lsrs	r3, r3, #16
   10e8c:	4011      	ands	r1, r2
   10e8e:	4319      	orrs	r1, r3
   10e90:	040b      	lsls	r3, r1, #16
   10e92:	4e08      	ldr	r6, [pc, #32]	; (10eb4 <memchr+0x78>)
   10e94:	4319      	orrs	r1, r3
   10e96:	6803      	ldr	r3, [r0, #0]
   10e98:	4a07      	ldr	r2, [pc, #28]	; (10eb8 <memchr+0x7c>)
   10e9a:	404b      	eors	r3, r1
   10e9c:	189a      	adds	r2, r3, r2
   10e9e:	439a      	bics	r2, r3
   10ea0:	4232      	tst	r2, r6
   10ea2:	d1e3      	bne.n	10e6c <memchr+0x30>
   10ea4:	3c04      	subs	r4, #4
   10ea6:	3004      	adds	r0, #4
   10ea8:	2c03      	cmp	r4, #3
   10eaa:	d8f4      	bhi.n	10e96 <memchr+0x5a>
   10eac:	e7dc      	b.n	10e68 <memchr+0x2c>
   10eae:	0014      	movs	r4, r2
   10eb0:	e7d8      	b.n	10e64 <memchr+0x28>
   10eb2:	46c0      	nop			; (mov r8, r8)
   10eb4:	80808080 	.word	0x80808080
   10eb8:	fefefeff 	.word	0xfefefeff

00010ebc <memmove>:
   10ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
   10ebe:	4288      	cmp	r0, r1
   10ec0:	d90a      	bls.n	10ed8 <memmove+0x1c>
   10ec2:	188b      	adds	r3, r1, r2
   10ec4:	4298      	cmp	r0, r3
   10ec6:	d207      	bcs.n	10ed8 <memmove+0x1c>
   10ec8:	1e53      	subs	r3, r2, #1
   10eca:	2a00      	cmp	r2, #0
   10ecc:	d003      	beq.n	10ed6 <memmove+0x1a>
   10ece:	5cca      	ldrb	r2, [r1, r3]
   10ed0:	54c2      	strb	r2, [r0, r3]
   10ed2:	3b01      	subs	r3, #1
   10ed4:	d2fb      	bcs.n	10ece <memmove+0x12>
   10ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10ed8:	0005      	movs	r5, r0
   10eda:	2a0f      	cmp	r2, #15
   10edc:	d808      	bhi.n	10ef0 <memmove+0x34>
   10ede:	2a00      	cmp	r2, #0
   10ee0:	d0f9      	beq.n	10ed6 <memmove+0x1a>
   10ee2:	2300      	movs	r3, #0
   10ee4:	5ccc      	ldrb	r4, [r1, r3]
   10ee6:	54ec      	strb	r4, [r5, r3]
   10ee8:	3301      	adds	r3, #1
   10eea:	4293      	cmp	r3, r2
   10eec:	d1fa      	bne.n	10ee4 <memmove+0x28>
   10eee:	e7f2      	b.n	10ed6 <memmove+0x1a>
   10ef0:	000b      	movs	r3, r1
   10ef2:	4303      	orrs	r3, r0
   10ef4:	079b      	lsls	r3, r3, #30
   10ef6:	d12d      	bne.n	10f54 <memmove+0x98>
   10ef8:	0015      	movs	r5, r2
   10efa:	000c      	movs	r4, r1
   10efc:	0003      	movs	r3, r0
   10efe:	3d10      	subs	r5, #16
   10f00:	092f      	lsrs	r7, r5, #4
   10f02:	3701      	adds	r7, #1
   10f04:	013f      	lsls	r7, r7, #4
   10f06:	19c7      	adds	r7, r0, r7
   10f08:	6826      	ldr	r6, [r4, #0]
   10f0a:	601e      	str	r6, [r3, #0]
   10f0c:	6866      	ldr	r6, [r4, #4]
   10f0e:	605e      	str	r6, [r3, #4]
   10f10:	68a6      	ldr	r6, [r4, #8]
   10f12:	609e      	str	r6, [r3, #8]
   10f14:	68e6      	ldr	r6, [r4, #12]
   10f16:	3410      	adds	r4, #16
   10f18:	60de      	str	r6, [r3, #12]
   10f1a:	3310      	adds	r3, #16
   10f1c:	429f      	cmp	r7, r3
   10f1e:	d1f3      	bne.n	10f08 <memmove+0x4c>
   10f20:	240f      	movs	r4, #15
   10f22:	43a5      	bics	r5, r4
   10f24:	3510      	adds	r5, #16
   10f26:	1949      	adds	r1, r1, r5
   10f28:	4014      	ands	r4, r2
   10f2a:	1945      	adds	r5, r0, r5
   10f2c:	2c03      	cmp	r4, #3
   10f2e:	d913      	bls.n	10f58 <memmove+0x9c>
   10f30:	2300      	movs	r3, #0
   10f32:	1f27      	subs	r7, r4, #4
   10f34:	08be      	lsrs	r6, r7, #2
   10f36:	3601      	adds	r6, #1
   10f38:	00b6      	lsls	r6, r6, #2
   10f3a:	58cc      	ldr	r4, [r1, r3]
   10f3c:	50ec      	str	r4, [r5, r3]
   10f3e:	3304      	adds	r3, #4
   10f40:	42b3      	cmp	r3, r6
   10f42:	d1fa      	bne.n	10f3a <memmove+0x7e>
   10f44:	2603      	movs	r6, #3
   10f46:	43b7      	bics	r7, r6
   10f48:	1d3c      	adds	r4, r7, #4
   10f4a:	1909      	adds	r1, r1, r4
   10f4c:	192d      	adds	r5, r5, r4
   10f4e:	4032      	ands	r2, r6
   10f50:	d1c7      	bne.n	10ee2 <memmove+0x26>
   10f52:	e7c0      	b.n	10ed6 <memmove+0x1a>
   10f54:	0005      	movs	r5, r0
   10f56:	e7c4      	b.n	10ee2 <memmove+0x26>
   10f58:	0022      	movs	r2, r4
   10f5a:	e7c0      	b.n	10ede <memmove+0x22>

00010f5c <__malloc_lock>:
   10f5c:	b510      	push	{r4, lr}
   10f5e:	4802      	ldr	r0, [pc, #8]	; (10f68 <__malloc_lock+0xc>)
   10f60:	f7ff fc32 	bl	107c8 <__retarget_lock_acquire_recursive>
   10f64:	bd10      	pop	{r4, pc}
   10f66:	46c0      	nop			; (mov r8, r8)
   10f68:	200012a4 	.word	0x200012a4

00010f6c <__malloc_unlock>:
   10f6c:	b510      	push	{r4, lr}
   10f6e:	4802      	ldr	r0, [pc, #8]	; (10f78 <__malloc_unlock+0xc>)
   10f70:	f7ff fc2c 	bl	107cc <__retarget_lock_release_recursive>
   10f74:	bd10      	pop	{r4, pc}
   10f76:	46c0      	nop			; (mov r8, r8)
   10f78:	200012a4 	.word	0x200012a4

00010f7c <_Balloc>:
   10f7c:	b570      	push	{r4, r5, r6, lr}
   10f7e:	0004      	movs	r4, r0
   10f80:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   10f82:	000d      	movs	r5, r1
   10f84:	2800      	cmp	r0, #0
   10f86:	d00a      	beq.n	10f9e <_Balloc+0x22>
   10f88:	00ab      	lsls	r3, r5, #2
   10f8a:	18c3      	adds	r3, r0, r3
   10f8c:	6818      	ldr	r0, [r3, #0]
   10f8e:	2800      	cmp	r0, #0
   10f90:	d00f      	beq.n	10fb2 <_Balloc+0x36>
   10f92:	6802      	ldr	r2, [r0, #0]
   10f94:	601a      	str	r2, [r3, #0]
   10f96:	2300      	movs	r3, #0
   10f98:	6103      	str	r3, [r0, #16]
   10f9a:	60c3      	str	r3, [r0, #12]
   10f9c:	bd70      	pop	{r4, r5, r6, pc}
   10f9e:	2221      	movs	r2, #33	; 0x21
   10fa0:	2104      	movs	r1, #4
   10fa2:	0020      	movs	r0, r4
   10fa4:	f000 fdb0 	bl	11b08 <_calloc_r>
   10fa8:	64e0      	str	r0, [r4, #76]	; 0x4c
   10faa:	2800      	cmp	r0, #0
   10fac:	d1ec      	bne.n	10f88 <_Balloc+0xc>
   10fae:	2000      	movs	r0, #0
   10fb0:	e7f4      	b.n	10f9c <_Balloc+0x20>
   10fb2:	2601      	movs	r6, #1
   10fb4:	40ae      	lsls	r6, r5
   10fb6:	1d72      	adds	r2, r6, #5
   10fb8:	0092      	lsls	r2, r2, #2
   10fba:	2101      	movs	r1, #1
   10fbc:	0020      	movs	r0, r4
   10fbe:	f000 fda3 	bl	11b08 <_calloc_r>
   10fc2:	2800      	cmp	r0, #0
   10fc4:	d0f3      	beq.n	10fae <_Balloc+0x32>
   10fc6:	6045      	str	r5, [r0, #4]
   10fc8:	6086      	str	r6, [r0, #8]
   10fca:	e7e4      	b.n	10f96 <_Balloc+0x1a>

00010fcc <_Bfree>:
   10fcc:	2900      	cmp	r1, #0
   10fce:	d006      	beq.n	10fde <_Bfree+0x12>
   10fd0:	684b      	ldr	r3, [r1, #4]
   10fd2:	009a      	lsls	r2, r3, #2
   10fd4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   10fd6:	189b      	adds	r3, r3, r2
   10fd8:	681a      	ldr	r2, [r3, #0]
   10fda:	600a      	str	r2, [r1, #0]
   10fdc:	6019      	str	r1, [r3, #0]
   10fde:	4770      	bx	lr

00010fe0 <__multadd>:
   10fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10fe2:	46ce      	mov	lr, r9
   10fe4:	4647      	mov	r7, r8
   10fe6:	4681      	mov	r9, r0
   10fe8:	0008      	movs	r0, r1
   10fea:	b580      	push	{r7, lr}
   10fec:	000d      	movs	r5, r1
   10fee:	690c      	ldr	r4, [r1, #16]
   10ff0:	001f      	movs	r7, r3
   10ff2:	2100      	movs	r1, #0
   10ff4:	3014      	adds	r0, #20
   10ff6:	6803      	ldr	r3, [r0, #0]
   10ff8:	3101      	adds	r1, #1
   10ffa:	041e      	lsls	r6, r3, #16
   10ffc:	0c36      	lsrs	r6, r6, #16
   10ffe:	4356      	muls	r6, r2
   11000:	0c1b      	lsrs	r3, r3, #16
   11002:	4353      	muls	r3, r2
   11004:	19f6      	adds	r6, r6, r7
   11006:	0c37      	lsrs	r7, r6, #16
   11008:	19db      	adds	r3, r3, r7
   1100a:	0436      	lsls	r6, r6, #16
   1100c:	0c1f      	lsrs	r7, r3, #16
   1100e:	0c36      	lsrs	r6, r6, #16
   11010:	041b      	lsls	r3, r3, #16
   11012:	199b      	adds	r3, r3, r6
   11014:	c008      	stmia	r0!, {r3}
   11016:	428c      	cmp	r4, r1
   11018:	dced      	bgt.n	10ff6 <__multadd+0x16>
   1101a:	2f00      	cmp	r7, #0
   1101c:	d008      	beq.n	11030 <__multadd+0x50>
   1101e:	68ab      	ldr	r3, [r5, #8]
   11020:	429c      	cmp	r4, r3
   11022:	da0a      	bge.n	1103a <__multadd+0x5a>
   11024:	1d23      	adds	r3, r4, #4
   11026:	009b      	lsls	r3, r3, #2
   11028:	18eb      	adds	r3, r5, r3
   1102a:	3401      	adds	r4, #1
   1102c:	605f      	str	r7, [r3, #4]
   1102e:	612c      	str	r4, [r5, #16]
   11030:	0028      	movs	r0, r5
   11032:	bc0c      	pop	{r2, r3}
   11034:	4690      	mov	r8, r2
   11036:	4699      	mov	r9, r3
   11038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1103a:	686b      	ldr	r3, [r5, #4]
   1103c:	4648      	mov	r0, r9
   1103e:	1c59      	adds	r1, r3, #1
   11040:	f7ff ff9c 	bl	10f7c <_Balloc>
   11044:	0029      	movs	r1, r5
   11046:	692b      	ldr	r3, [r5, #16]
   11048:	4680      	mov	r8, r0
   1104a:	1c9a      	adds	r2, r3, #2
   1104c:	0092      	lsls	r2, r2, #2
   1104e:	310c      	adds	r1, #12
   11050:	300c      	adds	r0, #12
   11052:	f7fc f85b 	bl	d10c <memcpy>
   11056:	686b      	ldr	r3, [r5, #4]
   11058:	009a      	lsls	r2, r3, #2
   1105a:	464b      	mov	r3, r9
   1105c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1105e:	189b      	adds	r3, r3, r2
   11060:	681a      	ldr	r2, [r3, #0]
   11062:	602a      	str	r2, [r5, #0]
   11064:	601d      	str	r5, [r3, #0]
   11066:	4645      	mov	r5, r8
   11068:	e7dc      	b.n	11024 <__multadd+0x44>
   1106a:	46c0      	nop			; (mov r8, r8)

0001106c <__hi0bits>:
   1106c:	0003      	movs	r3, r0
   1106e:	0c02      	lsrs	r2, r0, #16
   11070:	2000      	movs	r0, #0
   11072:	2a00      	cmp	r2, #0
   11074:	d101      	bne.n	1107a <__hi0bits+0xe>
   11076:	041b      	lsls	r3, r3, #16
   11078:	3010      	adds	r0, #16
   1107a:	0e1a      	lsrs	r2, r3, #24
   1107c:	d101      	bne.n	11082 <__hi0bits+0x16>
   1107e:	3008      	adds	r0, #8
   11080:	021b      	lsls	r3, r3, #8
   11082:	0f1a      	lsrs	r2, r3, #28
   11084:	d101      	bne.n	1108a <__hi0bits+0x1e>
   11086:	3004      	adds	r0, #4
   11088:	011b      	lsls	r3, r3, #4
   1108a:	0f9a      	lsrs	r2, r3, #30
   1108c:	d101      	bne.n	11092 <__hi0bits+0x26>
   1108e:	3002      	adds	r0, #2
   11090:	009b      	lsls	r3, r3, #2
   11092:	2b00      	cmp	r3, #0
   11094:	db03      	blt.n	1109e <__hi0bits+0x32>
   11096:	3001      	adds	r0, #1
   11098:	005b      	lsls	r3, r3, #1
   1109a:	d400      	bmi.n	1109e <__hi0bits+0x32>
   1109c:	2020      	movs	r0, #32
   1109e:	4770      	bx	lr

000110a0 <__lo0bits>:
   110a0:	6803      	ldr	r3, [r0, #0]
   110a2:	075a      	lsls	r2, r3, #29
   110a4:	d009      	beq.n	110ba <__lo0bits+0x1a>
   110a6:	2200      	movs	r2, #0
   110a8:	07d9      	lsls	r1, r3, #31
   110aa:	d404      	bmi.n	110b6 <__lo0bits+0x16>
   110ac:	079a      	lsls	r2, r3, #30
   110ae:	d420      	bmi.n	110f2 <__lo0bits+0x52>
   110b0:	2202      	movs	r2, #2
   110b2:	089b      	lsrs	r3, r3, #2
   110b4:	6003      	str	r3, [r0, #0]
   110b6:	0010      	movs	r0, r2
   110b8:	4770      	bx	lr
   110ba:	0419      	lsls	r1, r3, #16
   110bc:	2200      	movs	r2, #0
   110be:	2900      	cmp	r1, #0
   110c0:	d101      	bne.n	110c6 <__lo0bits+0x26>
   110c2:	0c1b      	lsrs	r3, r3, #16
   110c4:	3210      	adds	r2, #16
   110c6:	21ff      	movs	r1, #255	; 0xff
   110c8:	4219      	tst	r1, r3
   110ca:	d101      	bne.n	110d0 <__lo0bits+0x30>
   110cc:	3208      	adds	r2, #8
   110ce:	0a1b      	lsrs	r3, r3, #8
   110d0:	0719      	lsls	r1, r3, #28
   110d2:	d101      	bne.n	110d8 <__lo0bits+0x38>
   110d4:	3204      	adds	r2, #4
   110d6:	091b      	lsrs	r3, r3, #4
   110d8:	0799      	lsls	r1, r3, #30
   110da:	d101      	bne.n	110e0 <__lo0bits+0x40>
   110dc:	3202      	adds	r2, #2
   110de:	089b      	lsrs	r3, r3, #2
   110e0:	07d9      	lsls	r1, r3, #31
   110e2:	d404      	bmi.n	110ee <__lo0bits+0x4e>
   110e4:	085b      	lsrs	r3, r3, #1
   110e6:	d101      	bne.n	110ec <__lo0bits+0x4c>
   110e8:	2220      	movs	r2, #32
   110ea:	e7e4      	b.n	110b6 <__lo0bits+0x16>
   110ec:	3201      	adds	r2, #1
   110ee:	6003      	str	r3, [r0, #0]
   110f0:	e7e1      	b.n	110b6 <__lo0bits+0x16>
   110f2:	085b      	lsrs	r3, r3, #1
   110f4:	6003      	str	r3, [r0, #0]
   110f6:	2201      	movs	r2, #1
   110f8:	e7dd      	b.n	110b6 <__lo0bits+0x16>
   110fa:	46c0      	nop			; (mov r8, r8)

000110fc <__i2b>:
   110fc:	b510      	push	{r4, lr}
   110fe:	000c      	movs	r4, r1
   11100:	2101      	movs	r1, #1
   11102:	f7ff ff3b 	bl	10f7c <_Balloc>
   11106:	2301      	movs	r3, #1
   11108:	6144      	str	r4, [r0, #20]
   1110a:	6103      	str	r3, [r0, #16]
   1110c:	bd10      	pop	{r4, pc}
   1110e:	46c0      	nop			; (mov r8, r8)

00011110 <__multiply>:
   11110:	b5f0      	push	{r4, r5, r6, r7, lr}
   11112:	4657      	mov	r7, sl
   11114:	464e      	mov	r6, r9
   11116:	4645      	mov	r5, r8
   11118:	46de      	mov	lr, fp
   1111a:	b5e0      	push	{r5, r6, r7, lr}
   1111c:	6914      	ldr	r4, [r2, #16]
   1111e:	690e      	ldr	r6, [r1, #16]
   11120:	b085      	sub	sp, #20
   11122:	000f      	movs	r7, r1
   11124:	0015      	movs	r5, r2
   11126:	42a6      	cmp	r6, r4
   11128:	da04      	bge.n	11134 <__multiply+0x24>
   1112a:	0033      	movs	r3, r6
   1112c:	0017      	movs	r7, r2
   1112e:	0026      	movs	r6, r4
   11130:	000d      	movs	r5, r1
   11132:	001c      	movs	r4, r3
   11134:	1933      	adds	r3, r6, r4
   11136:	4698      	mov	r8, r3
   11138:	68bb      	ldr	r3, [r7, #8]
   1113a:	6879      	ldr	r1, [r7, #4]
   1113c:	4598      	cmp	r8, r3
   1113e:	dd00      	ble.n	11142 <__multiply+0x32>
   11140:	3101      	adds	r1, #1
   11142:	f7ff ff1b 	bl	10f7c <_Balloc>
   11146:	2214      	movs	r2, #20
   11148:	0003      	movs	r3, r0
   1114a:	4694      	mov	ip, r2
   1114c:	4463      	add	r3, ip
   1114e:	469b      	mov	fp, r3
   11150:	4643      	mov	r3, r8
   11152:	009b      	lsls	r3, r3, #2
   11154:	445b      	add	r3, fp
   11156:	0019      	movs	r1, r3
   11158:	9302      	str	r3, [sp, #8]
   1115a:	9003      	str	r0, [sp, #12]
   1115c:	465b      	mov	r3, fp
   1115e:	2200      	movs	r2, #0
   11160:	458b      	cmp	fp, r1
   11162:	d203      	bcs.n	1116c <__multiply+0x5c>
   11164:	9902      	ldr	r1, [sp, #8]
   11166:	c304      	stmia	r3!, {r2}
   11168:	4299      	cmp	r1, r3
   1116a:	d8fc      	bhi.n	11166 <__multiply+0x56>
   1116c:	2314      	movs	r3, #20
   1116e:	00a4      	lsls	r4, r4, #2
   11170:	469a      	mov	sl, r3
   11172:	3714      	adds	r7, #20
   11174:	0023      	movs	r3, r4
   11176:	46bc      	mov	ip, r7
   11178:	44aa      	add	sl, r5
   1117a:	00b6      	lsls	r6, r6, #2
   1117c:	4453      	add	r3, sl
   1117e:	9700      	str	r7, [sp, #0]
   11180:	44b4      	add	ip, r6
   11182:	9301      	str	r3, [sp, #4]
   11184:	459a      	cmp	sl, r3
   11186:	d24f      	bcs.n	11228 <__multiply+0x118>
   11188:	4653      	mov	r3, sl
   1118a:	681b      	ldr	r3, [r3, #0]
   1118c:	041e      	lsls	r6, r3, #16
   1118e:	0c36      	lsrs	r6, r6, #16
   11190:	d020      	beq.n	111d4 <__multiply+0xc4>
   11192:	465c      	mov	r4, fp
   11194:	2700      	movs	r7, #0
   11196:	9d00      	ldr	r5, [sp, #0]
   11198:	0021      	movs	r1, r4
   1119a:	cc08      	ldmia	r4!, {r3}
   1119c:	cd04      	ldmia	r5!, {r2}
   1119e:	4699      	mov	r9, r3
   111a0:	4648      	mov	r0, r9
   111a2:	0413      	lsls	r3, r2, #16
   111a4:	0c1b      	lsrs	r3, r3, #16
   111a6:	4373      	muls	r3, r6
   111a8:	0400      	lsls	r0, r0, #16
   111aa:	0c00      	lsrs	r0, r0, #16
   111ac:	181b      	adds	r3, r3, r0
   111ae:	19d8      	adds	r0, r3, r7
   111b0:	0c13      	lsrs	r3, r2, #16
   111b2:	464a      	mov	r2, r9
   111b4:	4373      	muls	r3, r6
   111b6:	0c12      	lsrs	r2, r2, #16
   111b8:	189b      	adds	r3, r3, r2
   111ba:	0c02      	lsrs	r2, r0, #16
   111bc:	189b      	adds	r3, r3, r2
   111be:	0402      	lsls	r2, r0, #16
   111c0:	0c1f      	lsrs	r7, r3, #16
   111c2:	0c12      	lsrs	r2, r2, #16
   111c4:	041b      	lsls	r3, r3, #16
   111c6:	4313      	orrs	r3, r2
   111c8:	600b      	str	r3, [r1, #0]
   111ca:	45ac      	cmp	ip, r5
   111cc:	d8e4      	bhi.n	11198 <__multiply+0x88>
   111ce:	4653      	mov	r3, sl
   111d0:	6027      	str	r7, [r4, #0]
   111d2:	681b      	ldr	r3, [r3, #0]
   111d4:	0c1e      	lsrs	r6, r3, #16
   111d6:	d020      	beq.n	1121a <__multiply+0x10a>
   111d8:	465b      	mov	r3, fp
   111da:	2100      	movs	r1, #0
   111dc:	681b      	ldr	r3, [r3, #0]
   111de:	465c      	mov	r4, fp
   111e0:	0018      	movs	r0, r3
   111e2:	000f      	movs	r7, r1
   111e4:	4662      	mov	r2, ip
   111e6:	9d00      	ldr	r5, [sp, #0]
   111e8:	8829      	ldrh	r1, [r5, #0]
   111ea:	0c00      	lsrs	r0, r0, #16
   111ec:	4371      	muls	r1, r6
   111ee:	1809      	adds	r1, r1, r0
   111f0:	19c9      	adds	r1, r1, r7
   111f2:	041b      	lsls	r3, r3, #16
   111f4:	0408      	lsls	r0, r1, #16
   111f6:	0c1b      	lsrs	r3, r3, #16
   111f8:	4303      	orrs	r3, r0
   111fa:	6023      	str	r3, [r4, #0]
   111fc:	cd08      	ldmia	r5!, {r3}
   111fe:	6860      	ldr	r0, [r4, #4]
   11200:	0c1b      	lsrs	r3, r3, #16
   11202:	4373      	muls	r3, r6
   11204:	0407      	lsls	r7, r0, #16
   11206:	0c3f      	lsrs	r7, r7, #16
   11208:	19db      	adds	r3, r3, r7
   1120a:	0c09      	lsrs	r1, r1, #16
   1120c:	185b      	adds	r3, r3, r1
   1120e:	0c1f      	lsrs	r7, r3, #16
   11210:	3404      	adds	r4, #4
   11212:	42aa      	cmp	r2, r5
   11214:	d8e8      	bhi.n	111e8 <__multiply+0xd8>
   11216:	4694      	mov	ip, r2
   11218:	6023      	str	r3, [r4, #0]
   1121a:	2304      	movs	r3, #4
   1121c:	4699      	mov	r9, r3
   1121e:	9b01      	ldr	r3, [sp, #4]
   11220:	44ca      	add	sl, r9
   11222:	44cb      	add	fp, r9
   11224:	4553      	cmp	r3, sl
   11226:	d8af      	bhi.n	11188 <__multiply+0x78>
   11228:	4643      	mov	r3, r8
   1122a:	2b00      	cmp	r3, #0
   1122c:	dd0e      	ble.n	1124c <__multiply+0x13c>
   1122e:	9b02      	ldr	r3, [sp, #8]
   11230:	3b04      	subs	r3, #4
   11232:	681a      	ldr	r2, [r3, #0]
   11234:	2a00      	cmp	r2, #0
   11236:	d109      	bne.n	1124c <__multiply+0x13c>
   11238:	4642      	mov	r2, r8
   1123a:	e003      	b.n	11244 <__multiply+0x134>
   1123c:	3b04      	subs	r3, #4
   1123e:	6819      	ldr	r1, [r3, #0]
   11240:	2900      	cmp	r1, #0
   11242:	d102      	bne.n	1124a <__multiply+0x13a>
   11244:	3a01      	subs	r2, #1
   11246:	2a00      	cmp	r2, #0
   11248:	d1f8      	bne.n	1123c <__multiply+0x12c>
   1124a:	4690      	mov	r8, r2
   1124c:	9b03      	ldr	r3, [sp, #12]
   1124e:	4642      	mov	r2, r8
   11250:	0018      	movs	r0, r3
   11252:	611a      	str	r2, [r3, #16]
   11254:	b005      	add	sp, #20
   11256:	bc3c      	pop	{r2, r3, r4, r5}
   11258:	4690      	mov	r8, r2
   1125a:	4699      	mov	r9, r3
   1125c:	46a2      	mov	sl, r4
   1125e:	46ab      	mov	fp, r5
   11260:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11262:	46c0      	nop			; (mov r8, r8)

00011264 <__pow5mult>:
   11264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11266:	4647      	mov	r7, r8
   11268:	46ce      	mov	lr, r9
   1126a:	2303      	movs	r3, #3
   1126c:	b580      	push	{r7, lr}
   1126e:	4680      	mov	r8, r0
   11270:	000f      	movs	r7, r1
   11272:	0014      	movs	r4, r2
   11274:	4013      	ands	r3, r2
   11276:	d13a      	bne.n	112ee <__pow5mult+0x8a>
   11278:	10a4      	asrs	r4, r4, #2
   1127a:	003e      	movs	r6, r7
   1127c:	2c00      	cmp	r4, #0
   1127e:	d025      	beq.n	112cc <__pow5mult+0x68>
   11280:	4643      	mov	r3, r8
   11282:	6c9d      	ldr	r5, [r3, #72]	; 0x48
   11284:	2d00      	cmp	r5, #0
   11286:	d03b      	beq.n	11300 <__pow5mult+0x9c>
   11288:	003e      	movs	r6, r7
   1128a:	2300      	movs	r3, #0
   1128c:	2701      	movs	r7, #1
   1128e:	4699      	mov	r9, r3
   11290:	4227      	tst	r7, r4
   11292:	d107      	bne.n	112a4 <__pow5mult+0x40>
   11294:	1064      	asrs	r4, r4, #1
   11296:	d019      	beq.n	112cc <__pow5mult+0x68>
   11298:	6828      	ldr	r0, [r5, #0]
   1129a:	2800      	cmp	r0, #0
   1129c:	d01b      	beq.n	112d6 <__pow5mult+0x72>
   1129e:	0005      	movs	r5, r0
   112a0:	4227      	tst	r7, r4
   112a2:	d0f7      	beq.n	11294 <__pow5mult+0x30>
   112a4:	002a      	movs	r2, r5
   112a6:	0031      	movs	r1, r6
   112a8:	4640      	mov	r0, r8
   112aa:	f7ff ff31 	bl	11110 <__multiply>
   112ae:	2e00      	cmp	r6, #0
   112b0:	d01b      	beq.n	112ea <__pow5mult+0x86>
   112b2:	4642      	mov	r2, r8
   112b4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
   112b6:	6873      	ldr	r3, [r6, #4]
   112b8:	4694      	mov	ip, r2
   112ba:	009b      	lsls	r3, r3, #2
   112bc:	4463      	add	r3, ip
   112be:	681a      	ldr	r2, [r3, #0]
   112c0:	1064      	asrs	r4, r4, #1
   112c2:	6032      	str	r2, [r6, #0]
   112c4:	601e      	str	r6, [r3, #0]
   112c6:	0006      	movs	r6, r0
   112c8:	2c00      	cmp	r4, #0
   112ca:	d1e5      	bne.n	11298 <__pow5mult+0x34>
   112cc:	0030      	movs	r0, r6
   112ce:	bc0c      	pop	{r2, r3}
   112d0:	4690      	mov	r8, r2
   112d2:	4699      	mov	r9, r3
   112d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   112d6:	002a      	movs	r2, r5
   112d8:	0029      	movs	r1, r5
   112da:	4640      	mov	r0, r8
   112dc:	f7ff ff18 	bl	11110 <__multiply>
   112e0:	464b      	mov	r3, r9
   112e2:	6028      	str	r0, [r5, #0]
   112e4:	6003      	str	r3, [r0, #0]
   112e6:	0005      	movs	r5, r0
   112e8:	e7da      	b.n	112a0 <__pow5mult+0x3c>
   112ea:	0006      	movs	r6, r0
   112ec:	e7d2      	b.n	11294 <__pow5mult+0x30>
   112ee:	4a0b      	ldr	r2, [pc, #44]	; (1131c <__pow5mult+0xb8>)
   112f0:	3b01      	subs	r3, #1
   112f2:	009b      	lsls	r3, r3, #2
   112f4:	589a      	ldr	r2, [r3, r2]
   112f6:	2300      	movs	r3, #0
   112f8:	f7ff fe72 	bl	10fe0 <__multadd>
   112fc:	0007      	movs	r7, r0
   112fe:	e7bb      	b.n	11278 <__pow5mult+0x14>
   11300:	2101      	movs	r1, #1
   11302:	4640      	mov	r0, r8
   11304:	f7ff fe3a 	bl	10f7c <_Balloc>
   11308:	4b05      	ldr	r3, [pc, #20]	; (11320 <__pow5mult+0xbc>)
   1130a:	0005      	movs	r5, r0
   1130c:	6143      	str	r3, [r0, #20]
   1130e:	2301      	movs	r3, #1
   11310:	6103      	str	r3, [r0, #16]
   11312:	4643      	mov	r3, r8
   11314:	6498      	str	r0, [r3, #72]	; 0x48
   11316:	2300      	movs	r3, #0
   11318:	6003      	str	r3, [r0, #0]
   1131a:	e7b5      	b.n	11288 <__pow5mult+0x24>
   1131c:	000126b0 	.word	0x000126b0
   11320:	00000271 	.word	0x00000271

00011324 <__lshift>:
   11324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11326:	464e      	mov	r6, r9
   11328:	4645      	mov	r5, r8
   1132a:	46de      	mov	lr, fp
   1132c:	4657      	mov	r7, sl
   1132e:	b5e0      	push	{r5, r6, r7, lr}
   11330:	000e      	movs	r6, r1
   11332:	6933      	ldr	r3, [r6, #16]
   11334:	1154      	asrs	r4, r2, #5
   11336:	4698      	mov	r8, r3
   11338:	44a0      	add	r8, r4
   1133a:	4643      	mov	r3, r8
   1133c:	1c5d      	adds	r5, r3, #1
   1133e:	68b3      	ldr	r3, [r6, #8]
   11340:	4683      	mov	fp, r0
   11342:	4691      	mov	r9, r2
   11344:	6849      	ldr	r1, [r1, #4]
   11346:	429d      	cmp	r5, r3
   11348:	dd03      	ble.n	11352 <__lshift+0x2e>
   1134a:	3101      	adds	r1, #1
   1134c:	005b      	lsls	r3, r3, #1
   1134e:	429d      	cmp	r5, r3
   11350:	dcfb      	bgt.n	1134a <__lshift+0x26>
   11352:	4658      	mov	r0, fp
   11354:	f7ff fe12 	bl	10f7c <_Balloc>
   11358:	0003      	movs	r3, r0
   1135a:	4684      	mov	ip, r0
   1135c:	3314      	adds	r3, #20
   1135e:	2c00      	cmp	r4, #0
   11360:	dd06      	ble.n	11370 <__lshift+0x4c>
   11362:	2100      	movs	r1, #0
   11364:	00a4      	lsls	r4, r4, #2
   11366:	001a      	movs	r2, r3
   11368:	191b      	adds	r3, r3, r4
   1136a:	c202      	stmia	r2!, {r1}
   1136c:	4293      	cmp	r3, r2
   1136e:	d1fc      	bne.n	1136a <__lshift+0x46>
   11370:	6932      	ldr	r2, [r6, #16]
   11372:	4648      	mov	r0, r9
   11374:	0097      	lsls	r7, r2, #2
   11376:	0031      	movs	r1, r6
   11378:	221f      	movs	r2, #31
   1137a:	3114      	adds	r1, #20
   1137c:	4010      	ands	r0, r2
   1137e:	19cf      	adds	r7, r1, r7
   11380:	4681      	mov	r9, r0
   11382:	2800      	cmp	r0, #0
   11384:	d025      	beq.n	113d2 <__lshift+0xae>
   11386:	2220      	movs	r2, #32
   11388:	1a12      	subs	r2, r2, r0
   1138a:	4692      	mov	sl, r2
   1138c:	2200      	movs	r2, #0
   1138e:	4648      	mov	r0, r9
   11390:	680c      	ldr	r4, [r1, #0]
   11392:	4084      	lsls	r4, r0
   11394:	4650      	mov	r0, sl
   11396:	4314      	orrs	r4, r2
   11398:	601c      	str	r4, [r3, #0]
   1139a:	c904      	ldmia	r1!, {r2}
   1139c:	3304      	adds	r3, #4
   1139e:	40c2      	lsrs	r2, r0
   113a0:	428f      	cmp	r7, r1
   113a2:	d8f4      	bhi.n	1138e <__lshift+0x6a>
   113a4:	601a      	str	r2, [r3, #0]
   113a6:	2a00      	cmp	r2, #0
   113a8:	d001      	beq.n	113ae <__lshift+0x8a>
   113aa:	4645      	mov	r5, r8
   113ac:	3502      	adds	r5, #2
   113ae:	4663      	mov	r3, ip
   113b0:	3d01      	subs	r5, #1
   113b2:	611d      	str	r5, [r3, #16]
   113b4:	6873      	ldr	r3, [r6, #4]
   113b6:	4660      	mov	r0, ip
   113b8:	009a      	lsls	r2, r3, #2
   113ba:	465b      	mov	r3, fp
   113bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   113be:	189b      	adds	r3, r3, r2
   113c0:	681a      	ldr	r2, [r3, #0]
   113c2:	6032      	str	r2, [r6, #0]
   113c4:	601e      	str	r6, [r3, #0]
   113c6:	bc3c      	pop	{r2, r3, r4, r5}
   113c8:	4690      	mov	r8, r2
   113ca:	4699      	mov	r9, r3
   113cc:	46a2      	mov	sl, r4
   113ce:	46ab      	mov	fp, r5
   113d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   113d2:	c904      	ldmia	r1!, {r2}
   113d4:	c304      	stmia	r3!, {r2}
   113d6:	428f      	cmp	r7, r1
   113d8:	d9e9      	bls.n	113ae <__lshift+0x8a>
   113da:	c904      	ldmia	r1!, {r2}
   113dc:	c304      	stmia	r3!, {r2}
   113de:	428f      	cmp	r7, r1
   113e0:	d8f7      	bhi.n	113d2 <__lshift+0xae>
   113e2:	e7e4      	b.n	113ae <__lshift+0x8a>

000113e4 <__mcmp>:
   113e4:	690a      	ldr	r2, [r1, #16]
   113e6:	6903      	ldr	r3, [r0, #16]
   113e8:	b530      	push	{r4, r5, lr}
   113ea:	0005      	movs	r5, r0
   113ec:	1a98      	subs	r0, r3, r2
   113ee:	d111      	bne.n	11414 <__mcmp+0x30>
   113f0:	0092      	lsls	r2, r2, #2
   113f2:	3514      	adds	r5, #20
   113f4:	3114      	adds	r1, #20
   113f6:	18ab      	adds	r3, r5, r2
   113f8:	1889      	adds	r1, r1, r2
   113fa:	e001      	b.n	11400 <__mcmp+0x1c>
   113fc:	429d      	cmp	r5, r3
   113fe:	d209      	bcs.n	11414 <__mcmp+0x30>
   11400:	3b04      	subs	r3, #4
   11402:	3904      	subs	r1, #4
   11404:	681c      	ldr	r4, [r3, #0]
   11406:	680a      	ldr	r2, [r1, #0]
   11408:	4294      	cmp	r4, r2
   1140a:	d0f7      	beq.n	113fc <__mcmp+0x18>
   1140c:	4294      	cmp	r4, r2
   1140e:	4180      	sbcs	r0, r0
   11410:	2201      	movs	r2, #1
   11412:	4310      	orrs	r0, r2
   11414:	bd30      	pop	{r4, r5, pc}
   11416:	46c0      	nop			; (mov r8, r8)

00011418 <__mdiff>:
   11418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1141a:	4645      	mov	r5, r8
   1141c:	46de      	mov	lr, fp
   1141e:	4657      	mov	r7, sl
   11420:	464e      	mov	r6, r9
   11422:	0014      	movs	r4, r2
   11424:	690b      	ldr	r3, [r1, #16]
   11426:	6912      	ldr	r2, [r2, #16]
   11428:	b5e0      	push	{r5, r6, r7, lr}
   1142a:	4688      	mov	r8, r1
   1142c:	1a9d      	subs	r5, r3, r2
   1142e:	d11a      	bne.n	11466 <__mdiff+0x4e>
   11430:	000f      	movs	r7, r1
   11432:	2114      	movs	r1, #20
   11434:	468c      	mov	ip, r1
   11436:	0092      	lsls	r2, r2, #2
   11438:	3714      	adds	r7, #20
   1143a:	44a4      	add	ip, r4
   1143c:	18bb      	adds	r3, r7, r2
   1143e:	4462      	add	r2, ip
   11440:	e002      	b.n	11448 <__mdiff+0x30>
   11442:	429f      	cmp	r7, r3
   11444:	d300      	bcc.n	11448 <__mdiff+0x30>
   11446:	e070      	b.n	1152a <__mdiff+0x112>
   11448:	3b04      	subs	r3, #4
   1144a:	3a04      	subs	r2, #4
   1144c:	681e      	ldr	r6, [r3, #0]
   1144e:	6811      	ldr	r1, [r2, #0]
   11450:	428e      	cmp	r6, r1
   11452:	d0f6      	beq.n	11442 <__mdiff+0x2a>
   11454:	d300      	bcc.n	11458 <__mdiff+0x40>
   11456:	e071      	b.n	1153c <__mdiff+0x124>
   11458:	4643      	mov	r3, r8
   1145a:	003e      	movs	r6, r7
   1145c:	46a0      	mov	r8, r4
   1145e:	4667      	mov	r7, ip
   11460:	001c      	movs	r4, r3
   11462:	2501      	movs	r5, #1
   11464:	e006      	b.n	11474 <__mdiff+0x5c>
   11466:	2d00      	cmp	r5, #0
   11468:	db6a      	blt.n	11540 <__mdiff+0x128>
   1146a:	4647      	mov	r7, r8
   1146c:	0026      	movs	r6, r4
   1146e:	2500      	movs	r5, #0
   11470:	3714      	adds	r7, #20
   11472:	3614      	adds	r6, #20
   11474:	4643      	mov	r3, r8
   11476:	6859      	ldr	r1, [r3, #4]
   11478:	f7ff fd80 	bl	10f7c <_Balloc>
   1147c:	4643      	mov	r3, r8
   1147e:	4681      	mov	r9, r0
   11480:	60c5      	str	r5, [r0, #12]
   11482:	6918      	ldr	r0, [r3, #16]
   11484:	464d      	mov	r5, r9
   11486:	0083      	lsls	r3, r0, #2
   11488:	469c      	mov	ip, r3
   1148a:	6923      	ldr	r3, [r4, #16]
   1148c:	44bc      	add	ip, r7
   1148e:	009b      	lsls	r3, r3, #2
   11490:	4698      	mov	r8, r3
   11492:	2300      	movs	r3, #0
   11494:	44b0      	add	r8, r6
   11496:	3514      	adds	r5, #20
   11498:	469a      	mov	sl, r3
   1149a:	e000      	b.n	1149e <__mdiff+0x86>
   1149c:	0027      	movs	r7, r4
   1149e:	ce04      	ldmia	r6!, {r2}
   114a0:	003c      	movs	r4, r7
   114a2:	4693      	mov	fp, r2
   114a4:	4659      	mov	r1, fp
   114a6:	cc08      	ldmia	r4!, {r3}
   114a8:	0409      	lsls	r1, r1, #16
   114aa:	041a      	lsls	r2, r3, #16
   114ac:	0c12      	lsrs	r2, r2, #16
   114ae:	4452      	add	r2, sl
   114b0:	0c09      	lsrs	r1, r1, #16
   114b2:	1a52      	subs	r2, r2, r1
   114b4:	0c19      	lsrs	r1, r3, #16
   114b6:	465b      	mov	r3, fp
   114b8:	0c1b      	lsrs	r3, r3, #16
   114ba:	1acb      	subs	r3, r1, r3
   114bc:	1411      	asrs	r1, r2, #16
   114be:	185b      	adds	r3, r3, r1
   114c0:	0412      	lsls	r2, r2, #16
   114c2:	1419      	asrs	r1, r3, #16
   114c4:	0c12      	lsrs	r2, r2, #16
   114c6:	041b      	lsls	r3, r3, #16
   114c8:	468a      	mov	sl, r1
   114ca:	4313      	orrs	r3, r2
   114cc:	1d29      	adds	r1, r5, #4
   114ce:	602b      	str	r3, [r5, #0]
   114d0:	000d      	movs	r5, r1
   114d2:	45b0      	cmp	r8, r6
   114d4:	d8e2      	bhi.n	1149c <__mdiff+0x84>
   114d6:	45a4      	cmp	ip, r4
   114d8:	d916      	bls.n	11508 <__mdiff+0xf0>
   114da:	cc08      	ldmia	r4!, {r3}
   114dc:	041a      	lsls	r2, r3, #16
   114de:	0c12      	lsrs	r2, r2, #16
   114e0:	4452      	add	r2, sl
   114e2:	1416      	asrs	r6, r2, #16
   114e4:	0c1b      	lsrs	r3, r3, #16
   114e6:	199b      	adds	r3, r3, r6
   114e8:	0412      	lsls	r2, r2, #16
   114ea:	141e      	asrs	r6, r3, #16
   114ec:	0c12      	lsrs	r2, r2, #16
   114ee:	041b      	lsls	r3, r3, #16
   114f0:	4313      	orrs	r3, r2
   114f2:	46b2      	mov	sl, r6
   114f4:	c508      	stmia	r5!, {r3}
   114f6:	45a4      	cmp	ip, r4
   114f8:	d8ef      	bhi.n	114da <__mdiff+0xc2>
   114fa:	4662      	mov	r2, ip
   114fc:	2403      	movs	r4, #3
   114fe:	1bd2      	subs	r2, r2, r7
   11500:	3a05      	subs	r2, #5
   11502:	43a2      	bics	r2, r4
   11504:	3204      	adds	r2, #4
   11506:	1889      	adds	r1, r1, r2
   11508:	3904      	subs	r1, #4
   1150a:	2b00      	cmp	r3, #0
   1150c:	d104      	bne.n	11518 <__mdiff+0x100>
   1150e:	3904      	subs	r1, #4
   11510:	680b      	ldr	r3, [r1, #0]
   11512:	3801      	subs	r0, #1
   11514:	2b00      	cmp	r3, #0
   11516:	d0fa      	beq.n	1150e <__mdiff+0xf6>
   11518:	464b      	mov	r3, r9
   1151a:	6118      	str	r0, [r3, #16]
   1151c:	4648      	mov	r0, r9
   1151e:	bc3c      	pop	{r2, r3, r4, r5}
   11520:	4690      	mov	r8, r2
   11522:	4699      	mov	r9, r3
   11524:	46a2      	mov	sl, r4
   11526:	46ab      	mov	fp, r5
   11528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1152a:	2100      	movs	r1, #0
   1152c:	f7ff fd26 	bl	10f7c <_Balloc>
   11530:	2301      	movs	r3, #1
   11532:	6103      	str	r3, [r0, #16]
   11534:	2300      	movs	r3, #0
   11536:	4681      	mov	r9, r0
   11538:	6143      	str	r3, [r0, #20]
   1153a:	e7ef      	b.n	1151c <__mdiff+0x104>
   1153c:	4666      	mov	r6, ip
   1153e:	e799      	b.n	11474 <__mdiff+0x5c>
   11540:	0027      	movs	r7, r4
   11542:	000e      	movs	r6, r1
   11544:	46a0      	mov	r8, r4
   11546:	3714      	adds	r7, #20
   11548:	3614      	adds	r6, #20
   1154a:	000c      	movs	r4, r1
   1154c:	2501      	movs	r5, #1
   1154e:	e791      	b.n	11474 <__mdiff+0x5c>

00011550 <__d2b>:
   11550:	b5f0      	push	{r4, r5, r6, r7, lr}
   11552:	2101      	movs	r1, #1
   11554:	001c      	movs	r4, r3
   11556:	b083      	sub	sp, #12
   11558:	9e08      	ldr	r6, [sp, #32]
   1155a:	0015      	movs	r5, r2
   1155c:	f7ff fd0e 	bl	10f7c <_Balloc>
   11560:	0323      	lsls	r3, r4, #12
   11562:	0064      	lsls	r4, r4, #1
   11564:	0007      	movs	r7, r0
   11566:	0b1b      	lsrs	r3, r3, #12
   11568:	0d64      	lsrs	r4, r4, #21
   1156a:	d002      	beq.n	11572 <__d2b+0x22>
   1156c:	2280      	movs	r2, #128	; 0x80
   1156e:	0352      	lsls	r2, r2, #13
   11570:	4313      	orrs	r3, r2
   11572:	9301      	str	r3, [sp, #4]
   11574:	2d00      	cmp	r5, #0
   11576:	d019      	beq.n	115ac <__d2b+0x5c>
   11578:	4668      	mov	r0, sp
   1157a:	9500      	str	r5, [sp, #0]
   1157c:	f7ff fd90 	bl	110a0 <__lo0bits>
   11580:	2800      	cmp	r0, #0
   11582:	d130      	bne.n	115e6 <__d2b+0x96>
   11584:	9b00      	ldr	r3, [sp, #0]
   11586:	617b      	str	r3, [r7, #20]
   11588:	9b01      	ldr	r3, [sp, #4]
   1158a:	61bb      	str	r3, [r7, #24]
   1158c:	1e5a      	subs	r2, r3, #1
   1158e:	4193      	sbcs	r3, r2
   11590:	1c5d      	adds	r5, r3, #1
   11592:	613d      	str	r5, [r7, #16]
   11594:	2c00      	cmp	r4, #0
   11596:	d014      	beq.n	115c2 <__d2b+0x72>
   11598:	4b19      	ldr	r3, [pc, #100]	; (11600 <__d2b+0xb0>)
   1159a:	469c      	mov	ip, r3
   1159c:	2335      	movs	r3, #53	; 0x35
   1159e:	4464      	add	r4, ip
   115a0:	1824      	adds	r4, r4, r0
   115a2:	1a18      	subs	r0, r3, r0
   115a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   115a6:	6034      	str	r4, [r6, #0]
   115a8:	6018      	str	r0, [r3, #0]
   115aa:	e019      	b.n	115e0 <__d2b+0x90>
   115ac:	a801      	add	r0, sp, #4
   115ae:	f7ff fd77 	bl	110a0 <__lo0bits>
   115b2:	9b01      	ldr	r3, [sp, #4]
   115b4:	3020      	adds	r0, #32
   115b6:	617b      	str	r3, [r7, #20]
   115b8:	2301      	movs	r3, #1
   115ba:	2501      	movs	r5, #1
   115bc:	613b      	str	r3, [r7, #16]
   115be:	2c00      	cmp	r4, #0
   115c0:	d1ea      	bne.n	11598 <__d2b+0x48>
   115c2:	4b10      	ldr	r3, [pc, #64]	; (11604 <__d2b+0xb4>)
   115c4:	469c      	mov	ip, r3
   115c6:	4b10      	ldr	r3, [pc, #64]	; (11608 <__d2b+0xb8>)
   115c8:	4460      	add	r0, ip
   115ca:	18eb      	adds	r3, r5, r3
   115cc:	009b      	lsls	r3, r3, #2
   115ce:	18fb      	adds	r3, r7, r3
   115d0:	6030      	str	r0, [r6, #0]
   115d2:	6958      	ldr	r0, [r3, #20]
   115d4:	f7ff fd4a 	bl	1106c <__hi0bits>
   115d8:	016b      	lsls	r3, r5, #5
   115da:	1a18      	subs	r0, r3, r0
   115dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   115de:	6018      	str	r0, [r3, #0]
   115e0:	0038      	movs	r0, r7
   115e2:	b003      	add	sp, #12
   115e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   115e6:	9b01      	ldr	r3, [sp, #4]
   115e8:	2220      	movs	r2, #32
   115ea:	0019      	movs	r1, r3
   115ec:	1a12      	subs	r2, r2, r0
   115ee:	4091      	lsls	r1, r2
   115f0:	000a      	movs	r2, r1
   115f2:	40c3      	lsrs	r3, r0
   115f4:	9900      	ldr	r1, [sp, #0]
   115f6:	9301      	str	r3, [sp, #4]
   115f8:	430a      	orrs	r2, r1
   115fa:	617a      	str	r2, [r7, #20]
   115fc:	e7c5      	b.n	1158a <__d2b+0x3a>
   115fe:	46c0      	nop			; (mov r8, r8)
   11600:	fffffbcd 	.word	0xfffffbcd
   11604:	fffffbce 	.word	0xfffffbce
   11608:	3fffffff 	.word	0x3fffffff

0001160c <_realloc_r>:
   1160c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1160e:	464e      	mov	r6, r9
   11610:	4645      	mov	r5, r8
   11612:	46de      	mov	lr, fp
   11614:	4657      	mov	r7, sl
   11616:	b5e0      	push	{r5, r6, r7, lr}
   11618:	b085      	sub	sp, #20
   1161a:	9001      	str	r0, [sp, #4]
   1161c:	000e      	movs	r6, r1
   1161e:	0015      	movs	r5, r2
   11620:	2900      	cmp	r1, #0
   11622:	d100      	bne.n	11626 <_realloc_r+0x1a>
   11624:	e09e      	b.n	11764 <_realloc_r+0x158>
   11626:	0037      	movs	r7, r6
   11628:	9801      	ldr	r0, [sp, #4]
   1162a:	3f08      	subs	r7, #8
   1162c:	f7ff fc96 	bl	10f5c <__malloc_lock>
   11630:	687a      	ldr	r2, [r7, #4]
   11632:	2303      	movs	r3, #3
   11634:	0014      	movs	r4, r2
   11636:	439c      	bics	r4, r3
   11638:	002b      	movs	r3, r5
   1163a:	330b      	adds	r3, #11
   1163c:	46b9      	mov	r9, r7
   1163e:	2b16      	cmp	r3, #22
   11640:	d847      	bhi.n	116d2 <_realloc_r+0xc6>
   11642:	2110      	movs	r1, #16
   11644:	2310      	movs	r3, #16
   11646:	4688      	mov	r8, r1
   11648:	4545      	cmp	r5, r8
   1164a:	d846      	bhi.n	116da <_realloc_r+0xce>
   1164c:	429c      	cmp	r4, r3
   1164e:	da49      	bge.n	116e4 <_realloc_r+0xd8>
   11650:	49cc      	ldr	r1, [pc, #816]	; (11984 <_realloc_r+0x378>)
   11652:	1938      	adds	r0, r7, r4
   11654:	468b      	mov	fp, r1
   11656:	6889      	ldr	r1, [r1, #8]
   11658:	9002      	str	r0, [sp, #8]
   1165a:	4288      	cmp	r0, r1
   1165c:	d100      	bne.n	11660 <_realloc_r+0x54>
   1165e:	e0c2      	b.n	117e6 <_realloc_r+0x1da>
   11660:	2101      	movs	r1, #1
   11662:	468a      	mov	sl, r1
   11664:	6840      	ldr	r0, [r0, #4]
   11666:	0001      	movs	r1, r0
   11668:	9003      	str	r0, [sp, #12]
   1166a:	4650      	mov	r0, sl
   1166c:	4381      	bics	r1, r0
   1166e:	468c      	mov	ip, r1
   11670:	9902      	ldr	r1, [sp, #8]
   11672:	468b      	mov	fp, r1
   11674:	44dc      	add	ip, fp
   11676:	4661      	mov	r1, ip
   11678:	6849      	ldr	r1, [r1, #4]
   1167a:	4201      	tst	r1, r0
   1167c:	d04d      	beq.n	1171a <_realloc_r+0x10e>
   1167e:	4210      	tst	r0, r2
   11680:	d100      	bne.n	11684 <_realloc_r+0x78>
   11682:	e0a2      	b.n	117ca <_realloc_r+0x1be>
   11684:	0029      	movs	r1, r5
   11686:	9801      	ldr	r0, [sp, #4]
   11688:	f7ff f924 	bl	108d4 <_malloc_r>
   1168c:	1e05      	subs	r5, r0, #0
   1168e:	d039      	beq.n	11704 <_realloc_r+0xf8>
   11690:	2301      	movs	r3, #1
   11692:	0002      	movs	r2, r0
   11694:	6879      	ldr	r1, [r7, #4]
   11696:	3a08      	subs	r2, #8
   11698:	4399      	bics	r1, r3
   1169a:	187f      	adds	r7, r7, r1
   1169c:	42ba      	cmp	r2, r7
   1169e:	d100      	bne.n	116a2 <_realloc_r+0x96>
   116a0:	e12e      	b.n	11900 <_realloc_r+0x2f4>
   116a2:	1f22      	subs	r2, r4, #4
   116a4:	2a24      	cmp	r2, #36	; 0x24
   116a6:	d900      	bls.n	116aa <_realloc_r+0x9e>
   116a8:	e114      	b.n	118d4 <_realloc_r+0x2c8>
   116aa:	2a13      	cmp	r2, #19
   116ac:	d900      	bls.n	116b0 <_realloc_r+0xa4>
   116ae:	e0e8      	b.n	11882 <_realloc_r+0x276>
   116b0:	0003      	movs	r3, r0
   116b2:	0032      	movs	r2, r6
   116b4:	6811      	ldr	r1, [r2, #0]
   116b6:	6019      	str	r1, [r3, #0]
   116b8:	6851      	ldr	r1, [r2, #4]
   116ba:	6059      	str	r1, [r3, #4]
   116bc:	6892      	ldr	r2, [r2, #8]
   116be:	609a      	str	r2, [r3, #8]
   116c0:	9c01      	ldr	r4, [sp, #4]
   116c2:	0031      	movs	r1, r6
   116c4:	0020      	movs	r0, r4
   116c6:	f7fe fde7 	bl	10298 <_free_r>
   116ca:	0020      	movs	r0, r4
   116cc:	f7ff fc4e 	bl	10f6c <__malloc_unlock>
   116d0:	e01b      	b.n	1170a <_realloc_r+0xfe>
   116d2:	2107      	movs	r1, #7
   116d4:	438b      	bics	r3, r1
   116d6:	4698      	mov	r8, r3
   116d8:	d5b6      	bpl.n	11648 <_realloc_r+0x3c>
   116da:	230c      	movs	r3, #12
   116dc:	9a01      	ldr	r2, [sp, #4]
   116de:	2500      	movs	r5, #0
   116e0:	6013      	str	r3, [r2, #0]
   116e2:	e012      	b.n	1170a <_realloc_r+0xfe>
   116e4:	0035      	movs	r5, r6
   116e6:	4643      	mov	r3, r8
   116e8:	1ae3      	subs	r3, r4, r3
   116ea:	2b0f      	cmp	r3, #15
   116ec:	d825      	bhi.n	1173a <_realloc_r+0x12e>
   116ee:	464b      	mov	r3, r9
   116f0:	2201      	movs	r2, #1
   116f2:	4649      	mov	r1, r9
   116f4:	685b      	ldr	r3, [r3, #4]
   116f6:	4013      	ands	r3, r2
   116f8:	4323      	orrs	r3, r4
   116fa:	604b      	str	r3, [r1, #4]
   116fc:	444c      	add	r4, r9
   116fe:	6863      	ldr	r3, [r4, #4]
   11700:	431a      	orrs	r2, r3
   11702:	6062      	str	r2, [r4, #4]
   11704:	9801      	ldr	r0, [sp, #4]
   11706:	f7ff fc31 	bl	10f6c <__malloc_unlock>
   1170a:	0028      	movs	r0, r5
   1170c:	b005      	add	sp, #20
   1170e:	bc3c      	pop	{r2, r3, r4, r5}
   11710:	4690      	mov	r8, r2
   11712:	4699      	mov	r9, r3
   11714:	46a2      	mov	sl, r4
   11716:	46ab      	mov	fp, r5
   11718:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1171a:	2103      	movs	r1, #3
   1171c:	9803      	ldr	r0, [sp, #12]
   1171e:	468c      	mov	ip, r1
   11720:	4388      	bics	r0, r1
   11722:	1821      	adds	r1, r4, r0
   11724:	468b      	mov	fp, r1
   11726:	4299      	cmp	r1, r3
   11728:	db21      	blt.n	1176e <_realloc_r+0x162>
   1172a:	9a02      	ldr	r2, [sp, #8]
   1172c:	0035      	movs	r5, r6
   1172e:	68d3      	ldr	r3, [r2, #12]
   11730:	6892      	ldr	r2, [r2, #8]
   11732:	465c      	mov	r4, fp
   11734:	60d3      	str	r3, [r2, #12]
   11736:	609a      	str	r2, [r3, #8]
   11738:	e7d5      	b.n	116e6 <_realloc_r+0xda>
   1173a:	464a      	mov	r2, r9
   1173c:	2001      	movs	r0, #1
   1173e:	4646      	mov	r6, r8
   11740:	6852      	ldr	r2, [r2, #4]
   11742:	4649      	mov	r1, r9
   11744:	4002      	ands	r2, r0
   11746:	4332      	orrs	r2, r6
   11748:	464e      	mov	r6, r9
   1174a:	4441      	add	r1, r8
   1174c:	4303      	orrs	r3, r0
   1174e:	6072      	str	r2, [r6, #4]
   11750:	444c      	add	r4, r9
   11752:	604b      	str	r3, [r1, #4]
   11754:	6863      	ldr	r3, [r4, #4]
   11756:	3108      	adds	r1, #8
   11758:	4318      	orrs	r0, r3
   1175a:	6060      	str	r0, [r4, #4]
   1175c:	9801      	ldr	r0, [sp, #4]
   1175e:	f7fe fd9b 	bl	10298 <_free_r>
   11762:	e7cf      	b.n	11704 <_realloc_r+0xf8>
   11764:	0011      	movs	r1, r2
   11766:	f7ff f8b5 	bl	108d4 <_malloc_r>
   1176a:	0005      	movs	r5, r0
   1176c:	e7cd      	b.n	1170a <_realloc_r+0xfe>
   1176e:	4651      	mov	r1, sl
   11770:	4211      	tst	r1, r2
   11772:	d000      	beq.n	11776 <_realloc_r+0x16a>
   11774:	e786      	b.n	11684 <_realloc_r+0x78>
   11776:	4661      	mov	r1, ip
   11778:	683a      	ldr	r2, [r7, #0]
   1177a:	1aba      	subs	r2, r7, r2
   1177c:	4692      	mov	sl, r2
   1177e:	6852      	ldr	r2, [r2, #4]
   11780:	438a      	bics	r2, r1
   11782:	1880      	adds	r0, r0, r2
   11784:	4683      	mov	fp, r0
   11786:	44a3      	add	fp, r4
   11788:	459b      	cmp	fp, r3
   1178a:	db26      	blt.n	117da <_realloc_r+0x1ce>
   1178c:	9a02      	ldr	r2, [sp, #8]
   1178e:	68d3      	ldr	r3, [r2, #12]
   11790:	6892      	ldr	r2, [r2, #8]
   11792:	60d3      	str	r3, [r2, #12]
   11794:	609a      	str	r2, [r3, #8]
   11796:	4653      	mov	r3, sl
   11798:	4652      	mov	r2, sl
   1179a:	4655      	mov	r5, sl
   1179c:	6892      	ldr	r2, [r2, #8]
   1179e:	68db      	ldr	r3, [r3, #12]
   117a0:	3508      	adds	r5, #8
   117a2:	60d3      	str	r3, [r2, #12]
   117a4:	609a      	str	r2, [r3, #8]
   117a6:	1f22      	subs	r2, r4, #4
   117a8:	2a24      	cmp	r2, #36	; 0x24
   117aa:	d900      	bls.n	117ae <_realloc_r+0x1a2>
   117ac:	e096      	b.n	118dc <_realloc_r+0x2d0>
   117ae:	2a13      	cmp	r2, #19
   117b0:	d972      	bls.n	11898 <_realloc_r+0x28c>
   117b2:	4653      	mov	r3, sl
   117b4:	6831      	ldr	r1, [r6, #0]
   117b6:	6099      	str	r1, [r3, #8]
   117b8:	6871      	ldr	r1, [r6, #4]
   117ba:	60d9      	str	r1, [r3, #12]
   117bc:	2a1b      	cmp	r2, #27
   117be:	d900      	bls.n	117c2 <_realloc_r+0x1b6>
   117c0:	e0a4      	b.n	1190c <_realloc_r+0x300>
   117c2:	0032      	movs	r2, r6
   117c4:	3310      	adds	r3, #16
   117c6:	3208      	adds	r2, #8
   117c8:	e068      	b.n	1189c <_realloc_r+0x290>
   117ca:	683a      	ldr	r2, [r7, #0]
   117cc:	1aba      	subs	r2, r7, r2
   117ce:	4692      	mov	sl, r2
   117d0:	4651      	mov	r1, sl
   117d2:	2203      	movs	r2, #3
   117d4:	6849      	ldr	r1, [r1, #4]
   117d6:	4391      	bics	r1, r2
   117d8:	000a      	movs	r2, r1
   117da:	4693      	mov	fp, r2
   117dc:	44a3      	add	fp, r4
   117de:	459b      	cmp	fp, r3
   117e0:	da00      	bge.n	117e4 <_realloc_r+0x1d8>
   117e2:	e74f      	b.n	11684 <_realloc_r+0x78>
   117e4:	e7d7      	b.n	11796 <_realloc_r+0x18a>
   117e6:	2003      	movs	r0, #3
   117e8:	9902      	ldr	r1, [sp, #8]
   117ea:	4684      	mov	ip, r0
   117ec:	6849      	ldr	r1, [r1, #4]
   117ee:	4381      	bics	r1, r0
   117f0:	4640      	mov	r0, r8
   117f2:	1909      	adds	r1, r1, r4
   117f4:	3010      	adds	r0, #16
   117f6:	9002      	str	r0, [sp, #8]
   117f8:	4281      	cmp	r1, r0
   117fa:	da58      	bge.n	118ae <_realloc_r+0x2a2>
   117fc:	07d2      	lsls	r2, r2, #31
   117fe:	d500      	bpl.n	11802 <_realloc_r+0x1f6>
   11800:	e740      	b.n	11684 <_realloc_r+0x78>
   11802:	4660      	mov	r0, ip
   11804:	683a      	ldr	r2, [r7, #0]
   11806:	1aba      	subs	r2, r7, r2
   11808:	4692      	mov	sl, r2
   1180a:	6852      	ldr	r2, [r2, #4]
   1180c:	4382      	bics	r2, r0
   1180e:	9802      	ldr	r0, [sp, #8]
   11810:	1851      	adds	r1, r2, r1
   11812:	9103      	str	r1, [sp, #12]
   11814:	4288      	cmp	r0, r1
   11816:	dce0      	bgt.n	117da <_realloc_r+0x1ce>
   11818:	4653      	mov	r3, sl
   1181a:	4652      	mov	r2, sl
   1181c:	4655      	mov	r5, sl
   1181e:	6892      	ldr	r2, [r2, #8]
   11820:	68db      	ldr	r3, [r3, #12]
   11822:	3508      	adds	r5, #8
   11824:	60d3      	str	r3, [r2, #12]
   11826:	609a      	str	r2, [r3, #8]
   11828:	1f22      	subs	r2, r4, #4
   1182a:	2a24      	cmp	r2, #36	; 0x24
   1182c:	d900      	bls.n	11830 <_realloc_r+0x224>
   1182e:	e08e      	b.n	1194e <_realloc_r+0x342>
   11830:	2a13      	cmp	r2, #19
   11832:	d800      	bhi.n	11836 <_realloc_r+0x22a>
   11834:	e088      	b.n	11948 <_realloc_r+0x33c>
   11836:	4653      	mov	r3, sl
   11838:	6831      	ldr	r1, [r6, #0]
   1183a:	6099      	str	r1, [r3, #8]
   1183c:	6871      	ldr	r1, [r6, #4]
   1183e:	60d9      	str	r1, [r3, #12]
   11840:	2a1b      	cmp	r2, #27
   11842:	d900      	bls.n	11846 <_realloc_r+0x23a>
   11844:	e088      	b.n	11958 <_realloc_r+0x34c>
   11846:	0032      	movs	r2, r6
   11848:	3310      	adds	r3, #16
   1184a:	3208      	adds	r2, #8
   1184c:	6811      	ldr	r1, [r2, #0]
   1184e:	6019      	str	r1, [r3, #0]
   11850:	6851      	ldr	r1, [r2, #4]
   11852:	6059      	str	r1, [r3, #4]
   11854:	6892      	ldr	r2, [r2, #8]
   11856:	609a      	str	r2, [r3, #8]
   11858:	4651      	mov	r1, sl
   1185a:	465b      	mov	r3, fp
   1185c:	4642      	mov	r2, r8
   1185e:	4441      	add	r1, r8
   11860:	6099      	str	r1, [r3, #8]
   11862:	9b03      	ldr	r3, [sp, #12]
   11864:	9801      	ldr	r0, [sp, #4]
   11866:	1a9a      	subs	r2, r3, r2
   11868:	2301      	movs	r3, #1
   1186a:	431a      	orrs	r2, r3
   1186c:	604a      	str	r2, [r1, #4]
   1186e:	4652      	mov	r2, sl
   11870:	6852      	ldr	r2, [r2, #4]
   11872:	4013      	ands	r3, r2
   11874:	4642      	mov	r2, r8
   11876:	4313      	orrs	r3, r2
   11878:	4652      	mov	r2, sl
   1187a:	6053      	str	r3, [r2, #4]
   1187c:	f7ff fb76 	bl	10f6c <__malloc_unlock>
   11880:	e743      	b.n	1170a <_realloc_r+0xfe>
   11882:	6833      	ldr	r3, [r6, #0]
   11884:	6003      	str	r3, [r0, #0]
   11886:	6873      	ldr	r3, [r6, #4]
   11888:	6043      	str	r3, [r0, #4]
   1188a:	2a1b      	cmp	r2, #27
   1188c:	d82d      	bhi.n	118ea <_realloc_r+0x2de>
   1188e:	0003      	movs	r3, r0
   11890:	0032      	movs	r2, r6
   11892:	3308      	adds	r3, #8
   11894:	3208      	adds	r2, #8
   11896:	e70d      	b.n	116b4 <_realloc_r+0xa8>
   11898:	002b      	movs	r3, r5
   1189a:	0032      	movs	r2, r6
   1189c:	6811      	ldr	r1, [r2, #0]
   1189e:	465c      	mov	r4, fp
   118a0:	6019      	str	r1, [r3, #0]
   118a2:	6851      	ldr	r1, [r2, #4]
   118a4:	46d1      	mov	r9, sl
   118a6:	6059      	str	r1, [r3, #4]
   118a8:	6892      	ldr	r2, [r2, #8]
   118aa:	609a      	str	r2, [r3, #8]
   118ac:	e71b      	b.n	116e6 <_realloc_r+0xda>
   118ae:	4643      	mov	r3, r8
   118b0:	18fa      	adds	r2, r7, r3
   118b2:	465b      	mov	r3, fp
   118b4:	609a      	str	r2, [r3, #8]
   118b6:	4643      	mov	r3, r8
   118b8:	1ac9      	subs	r1, r1, r3
   118ba:	2301      	movs	r3, #1
   118bc:	4319      	orrs	r1, r3
   118be:	6051      	str	r1, [r2, #4]
   118c0:	687a      	ldr	r2, [r7, #4]
   118c2:	9801      	ldr	r0, [sp, #4]
   118c4:	4013      	ands	r3, r2
   118c6:	4642      	mov	r2, r8
   118c8:	4313      	orrs	r3, r2
   118ca:	607b      	str	r3, [r7, #4]
   118cc:	f7ff fb4e 	bl	10f6c <__malloc_unlock>
   118d0:	0035      	movs	r5, r6
   118d2:	e71a      	b.n	1170a <_realloc_r+0xfe>
   118d4:	0031      	movs	r1, r6
   118d6:	f7ff faf1 	bl	10ebc <memmove>
   118da:	e6f1      	b.n	116c0 <_realloc_r+0xb4>
   118dc:	0031      	movs	r1, r6
   118de:	0028      	movs	r0, r5
   118e0:	f7ff faec 	bl	10ebc <memmove>
   118e4:	465c      	mov	r4, fp
   118e6:	46d1      	mov	r9, sl
   118e8:	e6fd      	b.n	116e6 <_realloc_r+0xda>
   118ea:	68b3      	ldr	r3, [r6, #8]
   118ec:	6083      	str	r3, [r0, #8]
   118ee:	68f3      	ldr	r3, [r6, #12]
   118f0:	60c3      	str	r3, [r0, #12]
   118f2:	2a24      	cmp	r2, #36	; 0x24
   118f4:	d015      	beq.n	11922 <_realloc_r+0x316>
   118f6:	0003      	movs	r3, r0
   118f8:	0032      	movs	r2, r6
   118fa:	3310      	adds	r3, #16
   118fc:	3210      	adds	r2, #16
   118fe:	e6d9      	b.n	116b4 <_realloc_r+0xa8>
   11900:	6853      	ldr	r3, [r2, #4]
   11902:	2203      	movs	r2, #3
   11904:	4393      	bics	r3, r2
   11906:	18e4      	adds	r4, r4, r3
   11908:	0035      	movs	r5, r6
   1190a:	e6ec      	b.n	116e6 <_realloc_r+0xda>
   1190c:	4653      	mov	r3, sl
   1190e:	68b1      	ldr	r1, [r6, #8]
   11910:	6119      	str	r1, [r3, #16]
   11912:	68f1      	ldr	r1, [r6, #12]
   11914:	6159      	str	r1, [r3, #20]
   11916:	2a24      	cmp	r2, #36	; 0x24
   11918:	d00c      	beq.n	11934 <_realloc_r+0x328>
   1191a:	0032      	movs	r2, r6
   1191c:	3318      	adds	r3, #24
   1191e:	3210      	adds	r2, #16
   11920:	e7bc      	b.n	1189c <_realloc_r+0x290>
   11922:	6933      	ldr	r3, [r6, #16]
   11924:	0032      	movs	r2, r6
   11926:	6103      	str	r3, [r0, #16]
   11928:	0003      	movs	r3, r0
   1192a:	6971      	ldr	r1, [r6, #20]
   1192c:	3318      	adds	r3, #24
   1192e:	3218      	adds	r2, #24
   11930:	6141      	str	r1, [r0, #20]
   11932:	e6bf      	b.n	116b4 <_realloc_r+0xa8>
   11934:	4653      	mov	r3, sl
   11936:	6932      	ldr	r2, [r6, #16]
   11938:	4651      	mov	r1, sl
   1193a:	619a      	str	r2, [r3, #24]
   1193c:	0032      	movs	r2, r6
   1193e:	6970      	ldr	r0, [r6, #20]
   11940:	3320      	adds	r3, #32
   11942:	3218      	adds	r2, #24
   11944:	61c8      	str	r0, [r1, #28]
   11946:	e7a9      	b.n	1189c <_realloc_r+0x290>
   11948:	002b      	movs	r3, r5
   1194a:	0032      	movs	r2, r6
   1194c:	e77e      	b.n	1184c <_realloc_r+0x240>
   1194e:	0031      	movs	r1, r6
   11950:	0028      	movs	r0, r5
   11952:	f7ff fab3 	bl	10ebc <memmove>
   11956:	e77f      	b.n	11858 <_realloc_r+0x24c>
   11958:	4653      	mov	r3, sl
   1195a:	68b1      	ldr	r1, [r6, #8]
   1195c:	6119      	str	r1, [r3, #16]
   1195e:	68f1      	ldr	r1, [r6, #12]
   11960:	6159      	str	r1, [r3, #20]
   11962:	2a24      	cmp	r2, #36	; 0x24
   11964:	d003      	beq.n	1196e <_realloc_r+0x362>
   11966:	0032      	movs	r2, r6
   11968:	3318      	adds	r3, #24
   1196a:	3210      	adds	r2, #16
   1196c:	e76e      	b.n	1184c <_realloc_r+0x240>
   1196e:	4653      	mov	r3, sl
   11970:	6932      	ldr	r2, [r6, #16]
   11972:	4651      	mov	r1, sl
   11974:	619a      	str	r2, [r3, #24]
   11976:	0032      	movs	r2, r6
   11978:	6970      	ldr	r0, [r6, #20]
   1197a:	3320      	adds	r3, #32
   1197c:	3218      	adds	r2, #24
   1197e:	61c8      	str	r0, [r1, #28]
   11980:	e764      	b.n	1184c <_realloc_r+0x240>
   11982:	46c0      	nop			; (mov r8, r8)
   11984:	200004b4 	.word	0x200004b4

00011988 <_sbrk_r>:
   11988:	2300      	movs	r3, #0
   1198a:	b570      	push	{r4, r5, r6, lr}
   1198c:	4c06      	ldr	r4, [pc, #24]	; (119a8 <_sbrk_r+0x20>)
   1198e:	0005      	movs	r5, r0
   11990:	0008      	movs	r0, r1
   11992:	6023      	str	r3, [r4, #0]
   11994:	f000 fb08 	bl	11fa8 <_sbrk>
   11998:	1c43      	adds	r3, r0, #1
   1199a:	d000      	beq.n	1199e <_sbrk_r+0x16>
   1199c:	bd70      	pop	{r4, r5, r6, pc}
   1199e:	6823      	ldr	r3, [r4, #0]
   119a0:	2b00      	cmp	r3, #0
   119a2:	d0fb      	beq.n	1199c <_sbrk_r+0x14>
   119a4:	602b      	str	r3, [r5, #0]
   119a6:	e7f9      	b.n	1199c <_sbrk_r+0x14>
   119a8:	200012b8 	.word	0x200012b8

000119ac <__sread>:
   119ac:	b570      	push	{r4, r5, r6, lr}
   119ae:	000c      	movs	r4, r1
   119b0:	250e      	movs	r5, #14
   119b2:	5f49      	ldrsh	r1, [r1, r5]
   119b4:	f000 fa26 	bl	11e04 <_read_r>
   119b8:	2800      	cmp	r0, #0
   119ba:	db03      	blt.n	119c4 <__sread+0x18>
   119bc:	6d23      	ldr	r3, [r4, #80]	; 0x50
   119be:	181b      	adds	r3, r3, r0
   119c0:	6523      	str	r3, [r4, #80]	; 0x50
   119c2:	bd70      	pop	{r4, r5, r6, pc}
   119c4:	89a3      	ldrh	r3, [r4, #12]
   119c6:	4a02      	ldr	r2, [pc, #8]	; (119d0 <__sread+0x24>)
   119c8:	4013      	ands	r3, r2
   119ca:	81a3      	strh	r3, [r4, #12]
   119cc:	e7f9      	b.n	119c2 <__sread+0x16>
   119ce:	46c0      	nop			; (mov r8, r8)
   119d0:	ffffefff 	.word	0xffffefff

000119d4 <__swrite>:
   119d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   119d6:	0016      	movs	r6, r2
   119d8:	001f      	movs	r7, r3
   119da:	220c      	movs	r2, #12
   119dc:	5e8b      	ldrsh	r3, [r1, r2]
   119de:	0005      	movs	r5, r0
   119e0:	000c      	movs	r4, r1
   119e2:	05da      	lsls	r2, r3, #23
   119e4:	d507      	bpl.n	119f6 <__swrite+0x22>
   119e6:	230e      	movs	r3, #14
   119e8:	5ec9      	ldrsh	r1, [r1, r3]
   119ea:	2200      	movs	r2, #0
   119ec:	2302      	movs	r3, #2
   119ee:	f000 f9df 	bl	11db0 <_lseek_r>
   119f2:	220c      	movs	r2, #12
   119f4:	5ea3      	ldrsh	r3, [r4, r2]
   119f6:	4a05      	ldr	r2, [pc, #20]	; (11a0c <__swrite+0x38>)
   119f8:	0028      	movs	r0, r5
   119fa:	4013      	ands	r3, r2
   119fc:	81a3      	strh	r3, [r4, #12]
   119fe:	0032      	movs	r2, r6
   11a00:	230e      	movs	r3, #14
   11a02:	5ee1      	ldrsh	r1, [r4, r3]
   11a04:	003b      	movs	r3, r7
   11a06:	f000 f86b 	bl	11ae0 <_write_r>
   11a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11a0c:	ffffefff 	.word	0xffffefff

00011a10 <__sseek>:
   11a10:	b570      	push	{r4, r5, r6, lr}
   11a12:	000c      	movs	r4, r1
   11a14:	250e      	movs	r5, #14
   11a16:	5f49      	ldrsh	r1, [r1, r5]
   11a18:	f000 f9ca 	bl	11db0 <_lseek_r>
   11a1c:	1c43      	adds	r3, r0, #1
   11a1e:	d006      	beq.n	11a2e <__sseek+0x1e>
   11a20:	2380      	movs	r3, #128	; 0x80
   11a22:	89a2      	ldrh	r2, [r4, #12]
   11a24:	015b      	lsls	r3, r3, #5
   11a26:	4313      	orrs	r3, r2
   11a28:	81a3      	strh	r3, [r4, #12]
   11a2a:	6520      	str	r0, [r4, #80]	; 0x50
   11a2c:	bd70      	pop	{r4, r5, r6, pc}
   11a2e:	89a3      	ldrh	r3, [r4, #12]
   11a30:	4a01      	ldr	r2, [pc, #4]	; (11a38 <__sseek+0x28>)
   11a32:	4013      	ands	r3, r2
   11a34:	81a3      	strh	r3, [r4, #12]
   11a36:	e7f9      	b.n	11a2c <__sseek+0x1c>
   11a38:	ffffefff 	.word	0xffffefff

00011a3c <__sclose>:
   11a3c:	b510      	push	{r4, lr}
   11a3e:	230e      	movs	r3, #14
   11a40:	5ec9      	ldrsh	r1, [r1, r3]
   11a42:	f000 f88d 	bl	11b60 <_close_r>
   11a46:	bd10      	pop	{r4, pc}

00011a48 <__sprint_r.part.0>:
   11a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11a4a:	464e      	mov	r6, r9
   11a4c:	4645      	mov	r5, r8
   11a4e:	46de      	mov	lr, fp
   11a50:	4657      	mov	r7, sl
   11a52:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   11a54:	b5e0      	push	{r5, r6, r7, lr}
   11a56:	4680      	mov	r8, r0
   11a58:	000e      	movs	r6, r1
   11a5a:	4691      	mov	r9, r2
   11a5c:	049b      	lsls	r3, r3, #18
   11a5e:	d531      	bpl.n	11ac4 <__sprint_r.part.0+0x7c>
   11a60:	6813      	ldr	r3, [r2, #0]
   11a62:	469a      	mov	sl, r3
   11a64:	6893      	ldr	r3, [r2, #8]
   11a66:	2b00      	cmp	r3, #0
   11a68:	d02a      	beq.n	11ac0 <__sprint_r.part.0+0x78>
   11a6a:	4652      	mov	r2, sl
   11a6c:	6852      	ldr	r2, [r2, #4]
   11a6e:	2500      	movs	r5, #0
   11a70:	4693      	mov	fp, r2
   11a72:	0897      	lsrs	r7, r2, #2
   11a74:	4652      	mov	r2, sl
   11a76:	6814      	ldr	r4, [r2, #0]
   11a78:	d104      	bne.n	11a84 <__sprint_r.part.0+0x3c>
   11a7a:	e016      	b.n	11aaa <__sprint_r.part.0+0x62>
   11a7c:	3501      	adds	r5, #1
   11a7e:	3404      	adds	r4, #4
   11a80:	42af      	cmp	r7, r5
   11a82:	d010      	beq.n	11aa6 <__sprint_r.part.0+0x5e>
   11a84:	0032      	movs	r2, r6
   11a86:	6821      	ldr	r1, [r4, #0]
   11a88:	4640      	mov	r0, r8
   11a8a:	f000 f92d 	bl	11ce8 <_fputwc_r>
   11a8e:	1c43      	adds	r3, r0, #1
   11a90:	d1f4      	bne.n	11a7c <__sprint_r.part.0+0x34>
   11a92:	464a      	mov	r2, r9
   11a94:	2300      	movs	r3, #0
   11a96:	6093      	str	r3, [r2, #8]
   11a98:	6053      	str	r3, [r2, #4]
   11a9a:	bc3c      	pop	{r2, r3, r4, r5}
   11a9c:	4690      	mov	r8, r2
   11a9e:	4699      	mov	r9, r3
   11aa0:	46a2      	mov	sl, r4
   11aa2:	46ab      	mov	fp, r5
   11aa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11aa6:	464b      	mov	r3, r9
   11aa8:	689b      	ldr	r3, [r3, #8]
   11aaa:	465a      	mov	r2, fp
   11aac:	2103      	movs	r1, #3
   11aae:	438a      	bics	r2, r1
   11ab0:	1a9b      	subs	r3, r3, r2
   11ab2:	464a      	mov	r2, r9
   11ab4:	6093      	str	r3, [r2, #8]
   11ab6:	2208      	movs	r2, #8
   11ab8:	4694      	mov	ip, r2
   11aba:	44e2      	add	sl, ip
   11abc:	2b00      	cmp	r3, #0
   11abe:	d1d4      	bne.n	11a6a <__sprint_r.part.0+0x22>
   11ac0:	2000      	movs	r0, #0
   11ac2:	e7e6      	b.n	11a92 <__sprint_r.part.0+0x4a>
   11ac4:	f7fe fcc6 	bl	10454 <__sfvwrite_r>
   11ac8:	e7e3      	b.n	11a92 <__sprint_r.part.0+0x4a>
   11aca:	46c0      	nop			; (mov r8, r8)

00011acc <__sprint_r>:
   11acc:	6893      	ldr	r3, [r2, #8]
   11ace:	b510      	push	{r4, lr}
   11ad0:	2b00      	cmp	r3, #0
   11ad2:	d002      	beq.n	11ada <__sprint_r+0xe>
   11ad4:	f7ff ffb8 	bl	11a48 <__sprint_r.part.0>
   11ad8:	bd10      	pop	{r4, pc}
   11ada:	6053      	str	r3, [r2, #4]
   11adc:	2000      	movs	r0, #0
   11ade:	e7fb      	b.n	11ad8 <__sprint_r+0xc>

00011ae0 <_write_r>:
   11ae0:	b570      	push	{r4, r5, r6, lr}
   11ae2:	0005      	movs	r5, r0
   11ae4:	0008      	movs	r0, r1
   11ae6:	0011      	movs	r1, r2
   11ae8:	2200      	movs	r2, #0
   11aea:	4c06      	ldr	r4, [pc, #24]	; (11b04 <_write_r+0x24>)
   11aec:	6022      	str	r2, [r4, #0]
   11aee:	001a      	movs	r2, r3
   11af0:	f000 fa68 	bl	11fc4 <_write>
   11af4:	1c43      	adds	r3, r0, #1
   11af6:	d000      	beq.n	11afa <_write_r+0x1a>
   11af8:	bd70      	pop	{r4, r5, r6, pc}
   11afa:	6823      	ldr	r3, [r4, #0]
   11afc:	2b00      	cmp	r3, #0
   11afe:	d0fb      	beq.n	11af8 <_write_r+0x18>
   11b00:	602b      	str	r3, [r5, #0]
   11b02:	e7f9      	b.n	11af8 <_write_r+0x18>
   11b04:	200012b8 	.word	0x200012b8

00011b08 <_calloc_r>:
   11b08:	b510      	push	{r4, lr}
   11b0a:	4351      	muls	r1, r2
   11b0c:	f7fe fee2 	bl	108d4 <_malloc_r>
   11b10:	1e04      	subs	r4, r0, #0
   11b12:	d01c      	beq.n	11b4e <_calloc_r+0x46>
   11b14:	0003      	movs	r3, r0
   11b16:	3b08      	subs	r3, #8
   11b18:	685a      	ldr	r2, [r3, #4]
   11b1a:	2303      	movs	r3, #3
   11b1c:	439a      	bics	r2, r3
   11b1e:	3a04      	subs	r2, #4
   11b20:	2a24      	cmp	r2, #36	; 0x24
   11b22:	d816      	bhi.n	11b52 <_calloc_r+0x4a>
   11b24:	0003      	movs	r3, r0
   11b26:	2a13      	cmp	r2, #19
   11b28:	d90d      	bls.n	11b46 <_calloc_r+0x3e>
   11b2a:	2100      	movs	r1, #0
   11b2c:	3308      	adds	r3, #8
   11b2e:	6001      	str	r1, [r0, #0]
   11b30:	6041      	str	r1, [r0, #4]
   11b32:	2a1b      	cmp	r2, #27
   11b34:	d907      	bls.n	11b46 <_calloc_r+0x3e>
   11b36:	6081      	str	r1, [r0, #8]
   11b38:	60c1      	str	r1, [r0, #12]
   11b3a:	2a24      	cmp	r2, #36	; 0x24
   11b3c:	d10d      	bne.n	11b5a <_calloc_r+0x52>
   11b3e:	0003      	movs	r3, r0
   11b40:	6101      	str	r1, [r0, #16]
   11b42:	3318      	adds	r3, #24
   11b44:	6141      	str	r1, [r0, #20]
   11b46:	2200      	movs	r2, #0
   11b48:	601a      	str	r2, [r3, #0]
   11b4a:	605a      	str	r2, [r3, #4]
   11b4c:	609a      	str	r2, [r3, #8]
   11b4e:	0020      	movs	r0, r4
   11b50:	bd10      	pop	{r4, pc}
   11b52:	2100      	movs	r1, #0
   11b54:	f7fb fb1c 	bl	d190 <memset>
   11b58:	e7f9      	b.n	11b4e <_calloc_r+0x46>
   11b5a:	0003      	movs	r3, r0
   11b5c:	3310      	adds	r3, #16
   11b5e:	e7f2      	b.n	11b46 <_calloc_r+0x3e>

00011b60 <_close_r>:
   11b60:	2300      	movs	r3, #0
   11b62:	b570      	push	{r4, r5, r6, lr}
   11b64:	4c06      	ldr	r4, [pc, #24]	; (11b80 <_close_r+0x20>)
   11b66:	0005      	movs	r5, r0
   11b68:	0008      	movs	r0, r1
   11b6a:	6023      	str	r3, [r4, #0]
   11b6c:	f000 f9f4 	bl	11f58 <_close>
   11b70:	1c43      	adds	r3, r0, #1
   11b72:	d000      	beq.n	11b76 <_close_r+0x16>
   11b74:	bd70      	pop	{r4, r5, r6, pc}
   11b76:	6823      	ldr	r3, [r4, #0]
   11b78:	2b00      	cmp	r3, #0
   11b7a:	d0fb      	beq.n	11b74 <_close_r+0x14>
   11b7c:	602b      	str	r3, [r5, #0]
   11b7e:	e7f9      	b.n	11b74 <_close_r+0x14>
   11b80:	200012b8 	.word	0x200012b8

00011b84 <_fclose_r>:
   11b84:	b570      	push	{r4, r5, r6, lr}
   11b86:	0005      	movs	r5, r0
   11b88:	1e0c      	subs	r4, r1, #0
   11b8a:	d040      	beq.n	11c0e <_fclose_r+0x8a>
   11b8c:	2800      	cmp	r0, #0
   11b8e:	d002      	beq.n	11b96 <_fclose_r+0x12>
   11b90:	6b83      	ldr	r3, [r0, #56]	; 0x38
   11b92:	2b00      	cmp	r3, #0
   11b94:	d03e      	beq.n	11c14 <_fclose_r+0x90>
   11b96:	2601      	movs	r6, #1
   11b98:	6e63      	ldr	r3, [r4, #100]	; 0x64
   11b9a:	4233      	tst	r3, r6
   11b9c:	d133      	bne.n	11c06 <_fclose_r+0x82>
   11b9e:	89a3      	ldrh	r3, [r4, #12]
   11ba0:	059b      	lsls	r3, r3, #22
   11ba2:	d543      	bpl.n	11c2c <_fclose_r+0xa8>
   11ba4:	0021      	movs	r1, r4
   11ba6:	0028      	movs	r0, r5
   11ba8:	f7fe f9ca 	bl	ff40 <__sflush_r>
   11bac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   11bae:	0006      	movs	r6, r0
   11bb0:	2b00      	cmp	r3, #0
   11bb2:	d004      	beq.n	11bbe <_fclose_r+0x3a>
   11bb4:	69e1      	ldr	r1, [r4, #28]
   11bb6:	0028      	movs	r0, r5
   11bb8:	4798      	blx	r3
   11bba:	2800      	cmp	r0, #0
   11bbc:	db44      	blt.n	11c48 <_fclose_r+0xc4>
   11bbe:	89a3      	ldrh	r3, [r4, #12]
   11bc0:	061b      	lsls	r3, r3, #24
   11bc2:	d42a      	bmi.n	11c1a <_fclose_r+0x96>
   11bc4:	6b21      	ldr	r1, [r4, #48]	; 0x30
   11bc6:	2900      	cmp	r1, #0
   11bc8:	d008      	beq.n	11bdc <_fclose_r+0x58>
   11bca:	0023      	movs	r3, r4
   11bcc:	3340      	adds	r3, #64	; 0x40
   11bce:	4299      	cmp	r1, r3
   11bd0:	d002      	beq.n	11bd8 <_fclose_r+0x54>
   11bd2:	0028      	movs	r0, r5
   11bd4:	f7fe fb60 	bl	10298 <_free_r>
   11bd8:	2300      	movs	r3, #0
   11bda:	6323      	str	r3, [r4, #48]	; 0x30
   11bdc:	6c61      	ldr	r1, [r4, #68]	; 0x44
   11bde:	2900      	cmp	r1, #0
   11be0:	d004      	beq.n	11bec <_fclose_r+0x68>
   11be2:	0028      	movs	r0, r5
   11be4:	f7fe fb58 	bl	10298 <_free_r>
   11be8:	2300      	movs	r3, #0
   11bea:	6463      	str	r3, [r4, #68]	; 0x44
   11bec:	f7fe fada 	bl	101a4 <__sfp_lock_acquire>
   11bf0:	2300      	movs	r3, #0
   11bf2:	81a3      	strh	r3, [r4, #12]
   11bf4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   11bf6:	07db      	lsls	r3, r3, #31
   11bf8:	d514      	bpl.n	11c24 <_fclose_r+0xa0>
   11bfa:	6da0      	ldr	r0, [r4, #88]	; 0x58
   11bfc:	f7fe fde2 	bl	107c4 <__retarget_lock_close_recursive>
   11c00:	f7fe fad8 	bl	101b4 <__sfp_lock_release>
   11c04:	e004      	b.n	11c10 <_fclose_r+0x8c>
   11c06:	220c      	movs	r2, #12
   11c08:	5ea3      	ldrsh	r3, [r4, r2]
   11c0a:	2b00      	cmp	r3, #0
   11c0c:	d1ca      	bne.n	11ba4 <_fclose_r+0x20>
   11c0e:	2600      	movs	r6, #0
   11c10:	0030      	movs	r0, r6
   11c12:	bd70      	pop	{r4, r5, r6, pc}
   11c14:	f7fe fa96 	bl	10144 <__sinit>
   11c18:	e7bd      	b.n	11b96 <_fclose_r+0x12>
   11c1a:	6921      	ldr	r1, [r4, #16]
   11c1c:	0028      	movs	r0, r5
   11c1e:	f7fe fb3b 	bl	10298 <_free_r>
   11c22:	e7cf      	b.n	11bc4 <_fclose_r+0x40>
   11c24:	6da0      	ldr	r0, [r4, #88]	; 0x58
   11c26:	f7fe fdd1 	bl	107cc <__retarget_lock_release_recursive>
   11c2a:	e7e6      	b.n	11bfa <_fclose_r+0x76>
   11c2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   11c2e:	f7fe fdcb 	bl	107c8 <__retarget_lock_acquire_recursive>
   11c32:	220c      	movs	r2, #12
   11c34:	5ea3      	ldrsh	r3, [r4, r2]
   11c36:	2b00      	cmp	r3, #0
   11c38:	d1b4      	bne.n	11ba4 <_fclose_r+0x20>
   11c3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   11c3c:	401e      	ands	r6, r3
   11c3e:	d1e6      	bne.n	11c0e <_fclose_r+0x8a>
   11c40:	6da0      	ldr	r0, [r4, #88]	; 0x58
   11c42:	f7fe fdc3 	bl	107cc <__retarget_lock_release_recursive>
   11c46:	e7e3      	b.n	11c10 <_fclose_r+0x8c>
   11c48:	2601      	movs	r6, #1
   11c4a:	4276      	negs	r6, r6
   11c4c:	e7b7      	b.n	11bbe <_fclose_r+0x3a>
   11c4e:	46c0      	nop			; (mov r8, r8)

00011c50 <__fputwc>:
   11c50:	b5f0      	push	{r4, r5, r6, r7, lr}
   11c52:	46ce      	mov	lr, r9
   11c54:	4647      	mov	r7, r8
   11c56:	b580      	push	{r7, lr}
   11c58:	b085      	sub	sp, #20
   11c5a:	4680      	mov	r8, r0
   11c5c:	4689      	mov	r9, r1
   11c5e:	0014      	movs	r4, r2
   11c60:	f000 f896 	bl	11d90 <__locale_mb_cur_max>
   11c64:	2801      	cmp	r0, #1
   11c66:	d031      	beq.n	11ccc <__fputwc+0x7c>
   11c68:	0023      	movs	r3, r4
   11c6a:	af03      	add	r7, sp, #12
   11c6c:	335c      	adds	r3, #92	; 0x5c
   11c6e:	464a      	mov	r2, r9
   11c70:	0039      	movs	r1, r7
   11c72:	4640      	mov	r0, r8
   11c74:	f000 f938 	bl	11ee8 <_wcrtomb_r>
   11c78:	0006      	movs	r6, r0
   11c7a:	1c43      	adds	r3, r0, #1
   11c7c:	d021      	beq.n	11cc2 <__fputwc+0x72>
   11c7e:	2800      	cmp	r0, #0
   11c80:	d030      	beq.n	11ce4 <__fputwc+0x94>
   11c82:	7839      	ldrb	r1, [r7, #0]
   11c84:	2500      	movs	r5, #0
   11c86:	e007      	b.n	11c98 <__fputwc+0x48>
   11c88:	6823      	ldr	r3, [r4, #0]
   11c8a:	1c5a      	adds	r2, r3, #1
   11c8c:	6022      	str	r2, [r4, #0]
   11c8e:	7019      	strb	r1, [r3, #0]
   11c90:	3501      	adds	r5, #1
   11c92:	42b5      	cmp	r5, r6
   11c94:	d226      	bcs.n	11ce4 <__fputwc+0x94>
   11c96:	5d79      	ldrb	r1, [r7, r5]
   11c98:	68a3      	ldr	r3, [r4, #8]
   11c9a:	3b01      	subs	r3, #1
   11c9c:	60a3      	str	r3, [r4, #8]
   11c9e:	2b00      	cmp	r3, #0
   11ca0:	daf2      	bge.n	11c88 <__fputwc+0x38>
   11ca2:	69a2      	ldr	r2, [r4, #24]
   11ca4:	4293      	cmp	r3, r2
   11ca6:	db01      	blt.n	11cac <__fputwc+0x5c>
   11ca8:	290a      	cmp	r1, #10
   11caa:	d1ed      	bne.n	11c88 <__fputwc+0x38>
   11cac:	0022      	movs	r2, r4
   11cae:	4640      	mov	r0, r8
   11cb0:	f000 f8bc 	bl	11e2c <__swbuf_r>
   11cb4:	1c43      	adds	r3, r0, #1
   11cb6:	d1eb      	bne.n	11c90 <__fputwc+0x40>
   11cb8:	b005      	add	sp, #20
   11cba:	bc0c      	pop	{r2, r3}
   11cbc:	4690      	mov	r8, r2
   11cbe:	4699      	mov	r9, r3
   11cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11cc2:	2240      	movs	r2, #64	; 0x40
   11cc4:	89a3      	ldrh	r3, [r4, #12]
   11cc6:	4313      	orrs	r3, r2
   11cc8:	81a3      	strh	r3, [r4, #12]
   11cca:	e7f5      	b.n	11cb8 <__fputwc+0x68>
   11ccc:	464b      	mov	r3, r9
   11cce:	3b01      	subs	r3, #1
   11cd0:	2bfe      	cmp	r3, #254	; 0xfe
   11cd2:	d8c9      	bhi.n	11c68 <__fputwc+0x18>
   11cd4:	466a      	mov	r2, sp
   11cd6:	464b      	mov	r3, r9
   11cd8:	71d3      	strb	r3, [r2, #7]
   11cda:	79d1      	ldrb	r1, [r2, #7]
   11cdc:	af03      	add	r7, sp, #12
   11cde:	7039      	strb	r1, [r7, #0]
   11ce0:	2601      	movs	r6, #1
   11ce2:	e7cf      	b.n	11c84 <__fputwc+0x34>
   11ce4:	4648      	mov	r0, r9
   11ce6:	e7e7      	b.n	11cb8 <__fputwc+0x68>

00011ce8 <_fputwc_r>:
   11ce8:	6e53      	ldr	r3, [r2, #100]	; 0x64
   11cea:	b570      	push	{r4, r5, r6, lr}
   11cec:	0005      	movs	r5, r0
   11cee:	000e      	movs	r6, r1
   11cf0:	0014      	movs	r4, r2
   11cf2:	07db      	lsls	r3, r3, #31
   11cf4:	d41e      	bmi.n	11d34 <_fputwc_r+0x4c>
   11cf6:	230c      	movs	r3, #12
   11cf8:	5ed2      	ldrsh	r2, [r2, r3]
   11cfa:	b291      	uxth	r1, r2
   11cfc:	058b      	lsls	r3, r1, #22
   11cfe:	d516      	bpl.n	11d2e <_fputwc_r+0x46>
   11d00:	2380      	movs	r3, #128	; 0x80
   11d02:	019b      	lsls	r3, r3, #6
   11d04:	4219      	tst	r1, r3
   11d06:	d104      	bne.n	11d12 <_fputwc_r+0x2a>
   11d08:	431a      	orrs	r2, r3
   11d0a:	81a2      	strh	r2, [r4, #12]
   11d0c:	6e62      	ldr	r2, [r4, #100]	; 0x64
   11d0e:	4313      	orrs	r3, r2
   11d10:	6663      	str	r3, [r4, #100]	; 0x64
   11d12:	0028      	movs	r0, r5
   11d14:	0022      	movs	r2, r4
   11d16:	0031      	movs	r1, r6
   11d18:	f7ff ff9a 	bl	11c50 <__fputwc>
   11d1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   11d1e:	0005      	movs	r5, r0
   11d20:	07db      	lsls	r3, r3, #31
   11d22:	d402      	bmi.n	11d2a <_fputwc_r+0x42>
   11d24:	89a3      	ldrh	r3, [r4, #12]
   11d26:	059b      	lsls	r3, r3, #22
   11d28:	d508      	bpl.n	11d3c <_fputwc_r+0x54>
   11d2a:	0028      	movs	r0, r5
   11d2c:	bd70      	pop	{r4, r5, r6, pc}
   11d2e:	6da0      	ldr	r0, [r4, #88]	; 0x58
   11d30:	f7fe fd4a 	bl	107c8 <__retarget_lock_acquire_recursive>
   11d34:	230c      	movs	r3, #12
   11d36:	5ee2      	ldrsh	r2, [r4, r3]
   11d38:	b291      	uxth	r1, r2
   11d3a:	e7e1      	b.n	11d00 <_fputwc_r+0x18>
   11d3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   11d3e:	f7fe fd45 	bl	107cc <__retarget_lock_release_recursive>
   11d42:	e7f2      	b.n	11d2a <_fputwc_r+0x42>

00011d44 <_fstat_r>:
   11d44:	2300      	movs	r3, #0
   11d46:	b570      	push	{r4, r5, r6, lr}
   11d48:	4c07      	ldr	r4, [pc, #28]	; (11d68 <_fstat_r+0x24>)
   11d4a:	0005      	movs	r5, r0
   11d4c:	0008      	movs	r0, r1
   11d4e:	0011      	movs	r1, r2
   11d50:	6023      	str	r3, [r4, #0]
   11d52:	f000 f909 	bl	11f68 <_fstat>
   11d56:	1c43      	adds	r3, r0, #1
   11d58:	d000      	beq.n	11d5c <_fstat_r+0x18>
   11d5a:	bd70      	pop	{r4, r5, r6, pc}
   11d5c:	6823      	ldr	r3, [r4, #0]
   11d5e:	2b00      	cmp	r3, #0
   11d60:	d0fb      	beq.n	11d5a <_fstat_r+0x16>
   11d62:	602b      	str	r3, [r5, #0]
   11d64:	e7f9      	b.n	11d5a <_fstat_r+0x16>
   11d66:	46c0      	nop			; (mov r8, r8)
   11d68:	200012b8 	.word	0x200012b8

00011d6c <_isatty_r>:
   11d6c:	2300      	movs	r3, #0
   11d6e:	b570      	push	{r4, r5, r6, lr}
   11d70:	4c06      	ldr	r4, [pc, #24]	; (11d8c <_isatty_r+0x20>)
   11d72:	0005      	movs	r5, r0
   11d74:	0008      	movs	r0, r1
   11d76:	6023      	str	r3, [r4, #0]
   11d78:	f000 f8fe 	bl	11f78 <_isatty>
   11d7c:	1c43      	adds	r3, r0, #1
   11d7e:	d000      	beq.n	11d82 <_isatty_r+0x16>
   11d80:	bd70      	pop	{r4, r5, r6, pc}
   11d82:	6823      	ldr	r3, [r4, #0]
   11d84:	2b00      	cmp	r3, #0
   11d86:	d0fb      	beq.n	11d80 <_isatty_r+0x14>
   11d88:	602b      	str	r3, [r5, #0]
   11d8a:	e7f9      	b.n	11d80 <_isatty_r+0x14>
   11d8c:	200012b8 	.word	0x200012b8

00011d90 <__locale_mb_cur_max>:
   11d90:	4b05      	ldr	r3, [pc, #20]	; (11da8 <__locale_mb_cur_max+0x18>)
   11d92:	681b      	ldr	r3, [r3, #0]
   11d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   11d96:	2b00      	cmp	r3, #0
   11d98:	d003      	beq.n	11da2 <__locale_mb_cur_max+0x12>
   11d9a:	2294      	movs	r2, #148	; 0x94
   11d9c:	0052      	lsls	r2, r2, #1
   11d9e:	5c98      	ldrb	r0, [r3, r2]
   11da0:	4770      	bx	lr
   11da2:	4b02      	ldr	r3, [pc, #8]	; (11dac <__locale_mb_cur_max+0x1c>)
   11da4:	e7f9      	b.n	11d9a <__locale_mb_cur_max+0xa>
   11da6:	46c0      	nop			; (mov r8, r8)
   11da8:	20000084 	.word	0x20000084
   11dac:	200008c4 	.word	0x200008c4

00011db0 <_lseek_r>:
   11db0:	b570      	push	{r4, r5, r6, lr}
   11db2:	0005      	movs	r5, r0
   11db4:	0008      	movs	r0, r1
   11db6:	0011      	movs	r1, r2
   11db8:	2200      	movs	r2, #0
   11dba:	4c06      	ldr	r4, [pc, #24]	; (11dd4 <_lseek_r+0x24>)
   11dbc:	6022      	str	r2, [r4, #0]
   11dbe:	001a      	movs	r2, r3
   11dc0:	f000 f8e2 	bl	11f88 <_lseek>
   11dc4:	1c43      	adds	r3, r0, #1
   11dc6:	d000      	beq.n	11dca <_lseek_r+0x1a>
   11dc8:	bd70      	pop	{r4, r5, r6, pc}
   11dca:	6823      	ldr	r3, [r4, #0]
   11dcc:	2b00      	cmp	r3, #0
   11dce:	d0fb      	beq.n	11dc8 <_lseek_r+0x18>
   11dd0:	602b      	str	r3, [r5, #0]
   11dd2:	e7f9      	b.n	11dc8 <_lseek_r+0x18>
   11dd4:	200012b8 	.word	0x200012b8

00011dd8 <__ascii_mbtowc>:
   11dd8:	b082      	sub	sp, #8
   11dda:	2900      	cmp	r1, #0
   11ddc:	d00a      	beq.n	11df4 <__ascii_mbtowc+0x1c>
   11dde:	2a00      	cmp	r2, #0
   11de0:	d00b      	beq.n	11dfa <__ascii_mbtowc+0x22>
   11de2:	2b00      	cmp	r3, #0
   11de4:	d00b      	beq.n	11dfe <__ascii_mbtowc+0x26>
   11de6:	7813      	ldrb	r3, [r2, #0]
   11de8:	600b      	str	r3, [r1, #0]
   11dea:	7810      	ldrb	r0, [r2, #0]
   11dec:	1e43      	subs	r3, r0, #1
   11dee:	4198      	sbcs	r0, r3
   11df0:	b002      	add	sp, #8
   11df2:	4770      	bx	lr
   11df4:	a901      	add	r1, sp, #4
   11df6:	2a00      	cmp	r2, #0
   11df8:	d1f3      	bne.n	11de2 <__ascii_mbtowc+0xa>
   11dfa:	2000      	movs	r0, #0
   11dfc:	e7f8      	b.n	11df0 <__ascii_mbtowc+0x18>
   11dfe:	2002      	movs	r0, #2
   11e00:	4240      	negs	r0, r0
   11e02:	e7f5      	b.n	11df0 <__ascii_mbtowc+0x18>

00011e04 <_read_r>:
   11e04:	b570      	push	{r4, r5, r6, lr}
   11e06:	0005      	movs	r5, r0
   11e08:	0008      	movs	r0, r1
   11e0a:	0011      	movs	r1, r2
   11e0c:	2200      	movs	r2, #0
   11e0e:	4c06      	ldr	r4, [pc, #24]	; (11e28 <_read_r+0x24>)
   11e10:	6022      	str	r2, [r4, #0]
   11e12:	001a      	movs	r2, r3
   11e14:	f000 f8c0 	bl	11f98 <_read>
   11e18:	1c43      	adds	r3, r0, #1
   11e1a:	d000      	beq.n	11e1e <_read_r+0x1a>
   11e1c:	bd70      	pop	{r4, r5, r6, pc}
   11e1e:	6823      	ldr	r3, [r4, #0]
   11e20:	2b00      	cmp	r3, #0
   11e22:	d0fb      	beq.n	11e1c <_read_r+0x18>
   11e24:	602b      	str	r3, [r5, #0]
   11e26:	e7f9      	b.n	11e1c <_read_r+0x18>
   11e28:	200012b8 	.word	0x200012b8

00011e2c <__swbuf_r>:
   11e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11e2e:	0006      	movs	r6, r0
   11e30:	000d      	movs	r5, r1
   11e32:	0014      	movs	r4, r2
   11e34:	2800      	cmp	r0, #0
   11e36:	d002      	beq.n	11e3e <__swbuf_r+0x12>
   11e38:	6b83      	ldr	r3, [r0, #56]	; 0x38
   11e3a:	2b00      	cmp	r3, #0
   11e3c:	d04e      	beq.n	11edc <__swbuf_r+0xb0>
   11e3e:	69a3      	ldr	r3, [r4, #24]
   11e40:	60a3      	str	r3, [r4, #8]
   11e42:	230c      	movs	r3, #12
   11e44:	5ee0      	ldrsh	r0, [r4, r3]
   11e46:	b281      	uxth	r1, r0
   11e48:	070b      	lsls	r3, r1, #28
   11e4a:	d53c      	bpl.n	11ec6 <__swbuf_r+0x9a>
   11e4c:	6923      	ldr	r3, [r4, #16]
   11e4e:	2b00      	cmp	r3, #0
   11e50:	d039      	beq.n	11ec6 <__swbuf_r+0x9a>
   11e52:	22ff      	movs	r2, #255	; 0xff
   11e54:	b2ef      	uxtb	r7, r5
   11e56:	4015      	ands	r5, r2
   11e58:	2280      	movs	r2, #128	; 0x80
   11e5a:	0192      	lsls	r2, r2, #6
   11e5c:	4211      	tst	r1, r2
   11e5e:	d015      	beq.n	11e8c <__swbuf_r+0x60>
   11e60:	6822      	ldr	r2, [r4, #0]
   11e62:	6961      	ldr	r1, [r4, #20]
   11e64:	1ad3      	subs	r3, r2, r3
   11e66:	428b      	cmp	r3, r1
   11e68:	da1b      	bge.n	11ea2 <__swbuf_r+0x76>
   11e6a:	3301      	adds	r3, #1
   11e6c:	68a1      	ldr	r1, [r4, #8]
   11e6e:	3901      	subs	r1, #1
   11e70:	60a1      	str	r1, [r4, #8]
   11e72:	1c51      	adds	r1, r2, #1
   11e74:	6021      	str	r1, [r4, #0]
   11e76:	7017      	strb	r7, [r2, #0]
   11e78:	6962      	ldr	r2, [r4, #20]
   11e7a:	429a      	cmp	r2, r3
   11e7c:	d01a      	beq.n	11eb4 <__swbuf_r+0x88>
   11e7e:	89a3      	ldrh	r3, [r4, #12]
   11e80:	07db      	lsls	r3, r3, #31
   11e82:	d501      	bpl.n	11e88 <__swbuf_r+0x5c>
   11e84:	2d0a      	cmp	r5, #10
   11e86:	d015      	beq.n	11eb4 <__swbuf_r+0x88>
   11e88:	0028      	movs	r0, r5
   11e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11e8c:	4302      	orrs	r2, r0
   11e8e:	6e61      	ldr	r1, [r4, #100]	; 0x64
   11e90:	81a2      	strh	r2, [r4, #12]
   11e92:	4a14      	ldr	r2, [pc, #80]	; (11ee4 <__swbuf_r+0xb8>)
   11e94:	400a      	ands	r2, r1
   11e96:	6662      	str	r2, [r4, #100]	; 0x64
   11e98:	6961      	ldr	r1, [r4, #20]
   11e9a:	6822      	ldr	r2, [r4, #0]
   11e9c:	1ad3      	subs	r3, r2, r3
   11e9e:	428b      	cmp	r3, r1
   11ea0:	dbe3      	blt.n	11e6a <__swbuf_r+0x3e>
   11ea2:	0021      	movs	r1, r4
   11ea4:	0030      	movs	r0, r6
   11ea6:	f7fe f8f3 	bl	10090 <_fflush_r>
   11eaa:	2800      	cmp	r0, #0
   11eac:	d108      	bne.n	11ec0 <__swbuf_r+0x94>
   11eae:	6822      	ldr	r2, [r4, #0]
   11eb0:	2301      	movs	r3, #1
   11eb2:	e7db      	b.n	11e6c <__swbuf_r+0x40>
   11eb4:	0021      	movs	r1, r4
   11eb6:	0030      	movs	r0, r6
   11eb8:	f7fe f8ea 	bl	10090 <_fflush_r>
   11ebc:	2800      	cmp	r0, #0
   11ebe:	d0e3      	beq.n	11e88 <__swbuf_r+0x5c>
   11ec0:	2501      	movs	r5, #1
   11ec2:	426d      	negs	r5, r5
   11ec4:	e7e0      	b.n	11e88 <__swbuf_r+0x5c>
   11ec6:	0021      	movs	r1, r4
   11ec8:	0030      	movs	r0, r6
   11eca:	f7fc fed3 	bl	ec74 <__swsetup_r>
   11ece:	2800      	cmp	r0, #0
   11ed0:	d1f6      	bne.n	11ec0 <__swbuf_r+0x94>
   11ed2:	230c      	movs	r3, #12
   11ed4:	5ee0      	ldrsh	r0, [r4, r3]
   11ed6:	6923      	ldr	r3, [r4, #16]
   11ed8:	b281      	uxth	r1, r0
   11eda:	e7ba      	b.n	11e52 <__swbuf_r+0x26>
   11edc:	f7fe f932 	bl	10144 <__sinit>
   11ee0:	e7ad      	b.n	11e3e <__swbuf_r+0x12>
   11ee2:	46c0      	nop			; (mov r8, r8)
   11ee4:	ffffdfff 	.word	0xffffdfff

00011ee8 <_wcrtomb_r>:
   11ee8:	b570      	push	{r4, r5, r6, lr}
   11eea:	001d      	movs	r5, r3
   11eec:	4b11      	ldr	r3, [pc, #68]	; (11f34 <_wcrtomb_r+0x4c>)
   11eee:	b084      	sub	sp, #16
   11ef0:	681b      	ldr	r3, [r3, #0]
   11ef2:	0004      	movs	r4, r0
   11ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   11ef6:	2900      	cmp	r1, #0
   11ef8:	d00e      	beq.n	11f18 <_wcrtomb_r+0x30>
   11efa:	2b00      	cmp	r3, #0
   11efc:	d016      	beq.n	11f2c <_wcrtomb_r+0x44>
   11efe:	20e0      	movs	r0, #224	; 0xe0
   11f00:	581e      	ldr	r6, [r3, r0]
   11f02:	002b      	movs	r3, r5
   11f04:	0020      	movs	r0, r4
   11f06:	47b0      	blx	r6
   11f08:	1c43      	adds	r3, r0, #1
   11f0a:	d103      	bne.n	11f14 <_wcrtomb_r+0x2c>
   11f0c:	2300      	movs	r3, #0
   11f0e:	602b      	str	r3, [r5, #0]
   11f10:	338a      	adds	r3, #138	; 0x8a
   11f12:	6023      	str	r3, [r4, #0]
   11f14:	b004      	add	sp, #16
   11f16:	bd70      	pop	{r4, r5, r6, pc}
   11f18:	2b00      	cmp	r3, #0
   11f1a:	d009      	beq.n	11f30 <_wcrtomb_r+0x48>
   11f1c:	22e0      	movs	r2, #224	; 0xe0
   11f1e:	a901      	add	r1, sp, #4
   11f20:	589e      	ldr	r6, [r3, r2]
   11f22:	0020      	movs	r0, r4
   11f24:	002b      	movs	r3, r5
   11f26:	2200      	movs	r2, #0
   11f28:	47b0      	blx	r6
   11f2a:	e7ed      	b.n	11f08 <_wcrtomb_r+0x20>
   11f2c:	4b02      	ldr	r3, [pc, #8]	; (11f38 <_wcrtomb_r+0x50>)
   11f2e:	e7e6      	b.n	11efe <_wcrtomb_r+0x16>
   11f30:	4b01      	ldr	r3, [pc, #4]	; (11f38 <_wcrtomb_r+0x50>)
   11f32:	e7f3      	b.n	11f1c <_wcrtomb_r+0x34>
   11f34:	20000084 	.word	0x20000084
   11f38:	200008c4 	.word	0x200008c4

00011f3c <__ascii_wctomb>:
   11f3c:	2900      	cmp	r1, #0
   11f3e:	d004      	beq.n	11f4a <__ascii_wctomb+0xe>
   11f40:	2aff      	cmp	r2, #255	; 0xff
   11f42:	d804      	bhi.n	11f4e <__ascii_wctomb+0x12>
   11f44:	2001      	movs	r0, #1
   11f46:	700a      	strb	r2, [r1, #0]
   11f48:	4770      	bx	lr
   11f4a:	2000      	movs	r0, #0
   11f4c:	e7fc      	b.n	11f48 <__ascii_wctomb+0xc>
   11f4e:	238a      	movs	r3, #138	; 0x8a
   11f50:	6003      	str	r3, [r0, #0]
   11f52:	2001      	movs	r0, #1
   11f54:	4240      	negs	r0, r0
   11f56:	e7f7      	b.n	11f48 <__ascii_wctomb+0xc>

00011f58 <_close>:
   11f58:	2258      	movs	r2, #88	; 0x58
   11f5a:	2001      	movs	r0, #1
   11f5c:	4b01      	ldr	r3, [pc, #4]	; (11f64 <_close+0xc>)
   11f5e:	4240      	negs	r0, r0
   11f60:	601a      	str	r2, [r3, #0]
   11f62:	4770      	bx	lr
   11f64:	200012b8 	.word	0x200012b8

00011f68 <_fstat>:
   11f68:	2258      	movs	r2, #88	; 0x58
   11f6a:	2001      	movs	r0, #1
   11f6c:	4b01      	ldr	r3, [pc, #4]	; (11f74 <_fstat+0xc>)
   11f6e:	4240      	negs	r0, r0
   11f70:	601a      	str	r2, [r3, #0]
   11f72:	4770      	bx	lr
   11f74:	200012b8 	.word	0x200012b8

00011f78 <_isatty>:
   11f78:	2258      	movs	r2, #88	; 0x58
   11f7a:	4b02      	ldr	r3, [pc, #8]	; (11f84 <_isatty+0xc>)
   11f7c:	2000      	movs	r0, #0
   11f7e:	601a      	str	r2, [r3, #0]
   11f80:	4770      	bx	lr
   11f82:	46c0      	nop			; (mov r8, r8)
   11f84:	200012b8 	.word	0x200012b8

00011f88 <_lseek>:
   11f88:	2258      	movs	r2, #88	; 0x58
   11f8a:	2001      	movs	r0, #1
   11f8c:	4b01      	ldr	r3, [pc, #4]	; (11f94 <_lseek+0xc>)
   11f8e:	4240      	negs	r0, r0
   11f90:	601a      	str	r2, [r3, #0]
   11f92:	4770      	bx	lr
   11f94:	200012b8 	.word	0x200012b8

00011f98 <_read>:
   11f98:	2258      	movs	r2, #88	; 0x58
   11f9a:	2001      	movs	r0, #1
   11f9c:	4b01      	ldr	r3, [pc, #4]	; (11fa4 <_read+0xc>)
   11f9e:	4240      	negs	r0, r0
   11fa0:	601a      	str	r2, [r3, #0]
   11fa2:	4770      	bx	lr
   11fa4:	200012b8 	.word	0x200012b8

00011fa8 <_sbrk>:
   11fa8:	4a04      	ldr	r2, [pc, #16]	; (11fbc <_sbrk+0x14>)
   11faa:	6813      	ldr	r3, [r2, #0]
   11fac:	2b00      	cmp	r3, #0
   11fae:	d003      	beq.n	11fb8 <_sbrk+0x10>
   11fb0:	1818      	adds	r0, r3, r0
   11fb2:	6010      	str	r0, [r2, #0]
   11fb4:	0018      	movs	r0, r3
   11fb6:	4770      	bx	lr
   11fb8:	4b01      	ldr	r3, [pc, #4]	; (11fc0 <_sbrk+0x18>)
   11fba:	e7f9      	b.n	11fb0 <_sbrk+0x8>
   11fbc:	20001254 	.word	0x20001254
   11fc0:	200032c0 	.word	0x200032c0

00011fc4 <_write>:
   11fc4:	2258      	movs	r2, #88	; 0x58
   11fc6:	2001      	movs	r0, #1
   11fc8:	4b01      	ldr	r3, [pc, #4]	; (11fd0 <_write+0xc>)
   11fca:	4240      	negs	r0, r0
   11fcc:	601a      	str	r2, [r3, #0]
   11fce:	4770      	bx	lr
   11fd0:	200012b8 	.word	0x200012b8
   11fd4:	0000030c 	.word	0x0000030c
   11fd8:	00000338 	.word	0x00000338
   11fdc:	00000344 	.word	0x00000344
   11fe0:	00000350 	.word	0x00000350
   11fe4:	0000035c 	.word	0x0000035c
   11fe8:	00000368 	.word	0x00000368
   11fec:	00000374 	.word	0x00000374
   11ff0:	00000380 	.word	0x00000380
   11ff4:	0000038c 	.word	0x0000038c
   11ff8:	00000398 	.word	0x00000398
   11ffc:	000003a4 	.word	0x000003a4
   12000:	000003b0 	.word	0x000003b0
   12004:	000003fc 	.word	0x000003fc
   12008:	000003fc 	.word	0x000003fc
   1200c:	000003fc 	.word	0x000003fc
   12010:	000003bc 	.word	0x000003bc
   12014:	000003c8 	.word	0x000003c8
   12018:	000003fc 	.word	0x000003fc
   1201c:	000003fc 	.word	0x000003fc
   12020:	000003fc 	.word	0x000003fc
   12024:	000003d4 	.word	0x000003d4
   12028:	000003e2 	.word	0x000003e2
   1202c:	000003ee 	.word	0x000003ee
   12030:	0000053c 	.word	0x0000053c
   12034:	00000568 	.word	0x00000568
   12038:	00000578 	.word	0x00000578
   1203c:	00000552 	.word	0x00000552
   12040:	00000552 	.word	0x00000552
   12044:	0000058c 	.word	0x0000058c
   12048:	00000552 	.word	0x00000552
   1204c:	00000552 	.word	0x00000552
   12050:	00000552 	.word	0x00000552
   12054:	00000552 	.word	0x00000552
   12058:	00000552 	.word	0x00000552
   1205c:	00000552 	.word	0x00000552
   12060:	00000552 	.word	0x00000552
   12064:	00000552 	.word	0x00000552
   12068:	00000552 	.word	0x00000552
   1206c:	00000552 	.word	0x00000552
   12070:	00000552 	.word	0x00000552
   12074:	000005c2 	.word	0x000005c2
   12078:	000005d6 	.word	0x000005d6
   1207c:	000005ea 	.word	0x000005ea
   12080:	64616552 	.word	0x64616552
   12084:	64255220 	.word	0x64255220
   12088:	00000000 	.word	0x00000000
   1208c:	3020203a 	.word	0x3020203a
   12090:	38302578 	.word	0x38302578
   12094:	000a786c 	.word	0x000a786c
   12098:	74697257 	.word	0x74697257
   1209c:	25522065 	.word	0x25522065
   120a0:	00000064 	.word	0x00000064
   120a4:	3020203a 	.word	0x3020203a
   120a8:	38302578 	.word	0x38302578
   120ac:	0009786c 	.word	0x0009786c
   120b0:	72727543 	.word	0x72727543
   120b4:	20746e65 	.word	0x20746e65
   120b8:	71657266 	.word	0x71657266
   120bc:	636e6575 	.word	0x636e6575
   120c0:	25203a65 	.word	0x25203a65
   120c4:	000a666c 	.word	0x000a666c
   120c8:	2a2a2a2a 	.word	0x2a2a2a2a
   120cc:	2a2a2a2a 	.word	0x2a2a2a2a
   120d0:	2a2a2a2a 	.word	0x2a2a2a2a
   120d4:	2a2a2a2a 	.word	0x2a2a2a2a
   120d8:	2a2a2a2a 	.word	0x2a2a2a2a
   120dc:	2a2a2a2a 	.word	0x2a2a2a2a
   120e0:	0d0a2a2a 	.word	0x0d0a2a2a
   120e4:	00000000 	.word	0x00000000
   120e8:	20746f4e 	.word	0x20746f4e
   120ec:	6b636f4c 	.word	0x6b636f4c
   120f0:	61206465 	.word	0x61206465
   120f4:	20203a74 	.word	0x20203a74
   120f8:	00666c25 	.word	0x00666c25
   120fc:	7a484d20 	.word	0x7a484d20
   12100:	00000000 	.word	0x00000000
   12104:	2a2a2a2a 	.word	0x2a2a2a2a
   12108:	2a2a2a2a 	.word	0x2a2a2a2a
   1210c:	2a2a2a2a 	.word	0x2a2a2a2a
   12110:	2a2a2a2a 	.word	0x2a2a2a2a
   12114:	2a2a2a2a 	.word	0x2a2a2a2a
   12118:	2a2a2a2a 	.word	0x2a2a2a2a
   1211c:	00002a2a 	.word	0x00002a2a
   12120:	6c6c6568 	.word	0x6c6c6568
   12124:	000d0a6f 	.word	0x000d0a6f
   12128:	682f2e2e 	.word	0x682f2e2e
   1212c:	702f6c70 	.word	0x702f6c70
   12130:	2f74726f 	.word	0x2f74726f
   12134:	5f6c7068 	.word	0x5f6c7068
   12138:	6f697067 	.word	0x6f697067
   1213c:	7361625f 	.word	0x7361625f
   12140:	00682e65 	.word	0x00682e65
   12144:	682f2e2e 	.word	0x682f2e2e
   12148:	702f6c70 	.word	0x702f6c70
   1214c:	70682f6d 	.word	0x70682f6d
   12150:	6d705f6c 	.word	0x6d705f6c
   12154:	7361625f 	.word	0x7361625f
   12158:	00682e65 	.word	0x00682e65
   1215c:	682f2e2e 	.word	0x682f2e2e
   12160:	732f6c61 	.word	0x732f6c61
   12164:	682f6372 	.word	0x682f6372
   12168:	695f6c61 	.word	0x695f6c61
   1216c:	00632e6f 	.word	0x00632e6f
   12170:	682f2e2e 	.word	0x682f2e2e
   12174:	732f6c61 	.word	0x732f6c61
   12178:	682f6372 	.word	0x682f6372
   1217c:	735f6c61 	.word	0x735f6c61
   12180:	6d5f6970 	.word	0x6d5f6970
   12184:	6e79735f 	.word	0x6e79735f
   12188:	00632e63 	.word	0x00632e63
   1218c:	682f2e2e 	.word	0x682f2e2e
   12190:	732f6c61 	.word	0x732f6c61
   12194:	682f6372 	.word	0x682f6372
   12198:	755f6c61 	.word	0x755f6c61
   1219c:	74726173 	.word	0x74726173
   121a0:	6e79735f 	.word	0x6e79735f
   121a4:	00632e63 	.word	0x00632e63
   121a8:	682f2e2e 	.word	0x682f2e2e
   121ac:	632f6c70 	.word	0x632f6c70
   121b0:	2f65726f 	.word	0x2f65726f
   121b4:	5f6c7068 	.word	0x5f6c7068
   121b8:	65726f63 	.word	0x65726f63
   121bc:	70306d5f 	.word	0x70306d5f
   121c0:	5f73756c 	.word	0x5f73756c
   121c4:	65736162 	.word	0x65736162
   121c8:	0000632e 	.word	0x0000632e
   121cc:	00002b7a 	.word	0x00002b7a
   121d0:	00002b58 	.word	0x00002b58
   121d4:	00002b36 	.word	0x00002b36
   121d8:	00002b14 	.word	0x00002b14
   121dc:	00002af2 	.word	0x00002af2
   121e0:	00002c66 	.word	0x00002c66
   121e4:	00002c44 	.word	0x00002c44
   121e8:	00002c30 	.word	0x00002c30
   121ec:	00002c12 	.word	0x00002c12
   121f0:	00002bfa 	.word	0x00002bfa
   121f4:	682f2e2e 	.word	0x682f2e2e
   121f8:	732f6c70 	.word	0x732f6c70
   121fc:	6f637265 	.word	0x6f637265
   12200:	70682f6d 	.word	0x70682f6d
   12204:	65735f6c 	.word	0x65735f6c
   12208:	6d6f6372 	.word	0x6d6f6372
   1220c:	0000632e 	.word	0x0000632e

00012210 <sercomspi_regs>:
   12210:	0020000c 00020000 00000000 01ff003b     .. .........;...
   12220:	20000c00 02000000 00000000 ff000500     ... ............
   12230:	00000101                                ....

00012234 <_usb_ep_cfgs>:
   12234:	20000cf0 00000000 00000040 20000d30     ... ....@...0.. 
   12244:	00000000 00000040 20000d70 00000000     ....@...p.. ....
   12254:	00000040 20000db0 00000000 00000040     @...... ....@...
   12264:	20000df0 00000000 00000040 20000e30     ... ....@...0.. 
   12274:	00000000 00000040 20000e70 00000000     ....@...p.. ....
   12284:	00000040 20000eb0 00000000 00000040     @...... ....@...
   12294:	00000804 00004a25 00008320 000082da     ....%J.. .......
   122a4:	00008320 000082ec 00008320 00008284      ....... .......
   122b4:	00008320 00008320 00008320 0000829c      ... ... .......
   122c4:	00008320 000082fe 752f2e2e 642f6273      ........./usb/d
   122d4:	63697665 73752f65 2e636462 00000063     evice/usbdc.c...
   122e4:	682f2e2e 752f6c61 736c6974 6372732f     ../hal/utils/src
   122f4:	6974752f 6c5f736c 2e747369 00000063     /utils_list.c...
   12304:	00676f6c 00776f70 00000000              log.pow.....

00012310 <TWO52>:
   12310:	00000000 43300000 00000000 c3300000     ......0C......0.
   12320:	0000af74 0000aec4 0000aec4 0000aec2     t...............
   12330:	0000af66 0000af66 0000af5c 0000aec2     f...f...\.......
   12340:	0000af66 0000af5c 0000af66 0000aec2     f...\...f.......
   12350:	0000af6c 0000af6c 0000af6c 0000affc     l...l...l.......
   12360:	0000bc78 0000bc5a 0000bc14 0000bb32     x...Z.......2...
   12370:	0000bc14 0000bc4c 0000bc14 0000bb32     ....L.......2...
   12380:	0000bc5a 0000bc5a 0000bc4c 0000bb32     Z...Z...L...2...
   12390:	0000bb2a 0000bb2a 0000bb2a 0000be90     *...*...*.......
   123a0:	0000c4d8 0000c398 0000c398 0000c394     ................
   123b0:	0000c4b0 0000c4b0 0000c4a2 0000c394     ................
   123c0:	0000c4b0 0000c4a2 0000c4b0 0000c394     ................
   123d0:	0000c4b8 0000c4b8 0000c4b8 0000c6bc     ................

000123e0 <_global_impure_ptr>:
   123e0:	20000088 0000000a 0000db32 0000dc06     ... ....2.......
   123f0:	0000dc06 0000db1e 0000dc06 0000dc06     ................
   12400:	0000dc06 0000dc06 0000dc06 0000dc06     ................
   12410:	0000dbd8 0000d6ea 0000dc06 0000d6e0     ................
   12420:	0000d6f4 0000dc06 0000db28 0000d8b4     ........(.......
   12430:	0000d8b4 0000d8b4 0000d8b4 0000d8b4     ................
   12440:	0000d8b4 0000d8b4 0000d8b4 0000d8b4     ................
   12450:	0000dc06 0000dc06 0000dc06 0000dc06     ................
   12460:	0000dc06 0000dc06 0000dc06 0000dc06     ................
   12470:	0000dc06 0000dc06 0000dbee 0000db42     ............B...
   12480:	0000dc06 0000db42 0000dc06 0000dc06     ....B...........
   12490:	0000dc06 0000dc06 0000daa8 0000dc06     ................
   124a0:	0000dc06 0000dab2 0000dc06 0000dc06     ................
   124b0:	0000dc06 0000dc06 0000dc06 0000dae0     ................
   124c0:	0000dc06 0000dc06 0000db0e 0000dc06     ................
   124d0:	0000dc06 0000dc06 0000dc06 0000dc06     ................
   124e0:	0000dc06 0000dc06 0000dc06 0000dc06     ................
   124f0:	0000dc06 0000d8f4 0000d92a 0000db42     ........*...B...
   12500:	0000db42 0000db42 0000d9d2 0000d92a     B...B.......*...
   12510:	0000dc06 0000dc06 0000d9dc 0000dc06     ................
   12520:	0000d9ee 0000dc02 0000da1c 0000da46     ............F...
   12530:	0000dc06 0000da50 0000dc06 0000dbfe     ....P...........
   12540:	0000dc06 0000dc06 0000d742 00464e49     ........B...INF.
   12550:	00666e69 004e414e 006e616e 33323130     inf.NAN.nan.0123
   12560:	37363534 42413938 46454443 00000000     456789ABCDEF....
   12570:	33323130 37363534 62613938 66656463     0123456789abcdef
   12580:	00000000 6c756e28 0000296c 00000030     ....(null)..0...

00012590 <blanks.7238>:
   12590:	20202020 20202020 20202020 20202020                     

000125a0 <zeroes.7239>:
   125a0:	30303030 30303030 30303030 30303030     0000000000000000
   125b0:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.

000125c0 <__mprec_bigtens>:
   125c0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   125d0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   125e0:	7f73bf3c 75154fdd                       <.s..O.u

000125e8 <__mprec_tens>:
   125e8:	00000000 3ff00000 00000000 40240000     .......?......$@
   125f8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   12608:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   12618:	00000000 412e8480 00000000 416312d0     .......A......cA
   12628:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   12638:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   12648:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   12658:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   12668:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   12678:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   12688:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   12698:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   126a8:	79d99db4 44ea7843                       ...yCx.D

000126b0 <p05.6055>:
   126b0:	00000005 00000019 0000007d 00000043     ........}...C...
   126c0:	49534f50 00000058 0000002e              POSIX.......

000126cc <_ctype_>:
   126cc:	20202000 20202020 28282020 20282828     .         ((((( 
   126dc:	20202020 20202020 20202020 20202020                     
   126ec:	10108820 10101010 10101010 10101010      ...............
   126fc:	04040410 04040404 10040404 10101010     ................
   1270c:	41411010 41414141 01010101 01010101     ..AAAAAA........
   1271c:	01010101 01010101 01010101 10101010     ................
   1272c:	42421010 42424242 02020202 02020202     ..BBBBBB........
   1273c:	02020202 02020202 02020202 10101010     ................
   1274c:	00000020 00000000 00000000 00000000      ...............
	...

000127d0 <_init>:
   127d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   127d2:	46c0      	nop			; (mov r8, r8)
   127d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   127d6:	bc08      	pop	{r3}
   127d8:	469e      	mov	lr, r3
   127da:	4770      	bx	lr

000127dc <__init_array_start>:
   127dc:	0000ee3d 	.word	0x0000ee3d

000127e0 <__frame_dummy_init_array_entry>:
   127e0:	000000dd 00000b05 00000c65              ........e...

000127ec <_fini>:
   127ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   127ee:	46c0      	nop			; (mov r8, r8)
   127f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   127f2:	bc08      	pop	{r3}
   127f4:	469e      	mov	lr, r3
   127f6:	4770      	bx	lr

000127f8 <__fini_array_start>:
   127f8:	000000b5 	.word	0x000000b5
