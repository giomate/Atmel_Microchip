
ADF_SAMD21_LIB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00012884  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00012884  00012884  00022884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000a30  20000000  0001288c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000088c  20000a30  000132c0  00030a30  2**3
                  ALLOC
  4 .stack        00002004  200012bc  00013b4c  00030a30  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00030a30  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00030a58  2**0
                  CONTENTS, READONLY
  7 .debug_info   0002dfbd  00000000  00000000  00030ab1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000041b4  00000000  00000000  0005ea6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000a5a0  00000000  00000000  00062c22  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001938  00000000  00000000  0006d1c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000017f0  00000000  00000000  0006eafa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00020cbd  00000000  00000000  000702ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001764e  00000000  00000000  00090fa7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000936b4  00000000  00000000  000a85f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000072b8  00000000  00000000  0013bcac  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .stab         0000009c  00000000  00000000  00142f64  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000014d  00000000  00000000  00143000  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	c0 32 00 20 a5 0b 00 00 a1 0b 00 00 a1 0b 00 00     .2. ............
	...
      2c:	a1 0b 00 00 00 00 00 00 00 00 00 00 a1 0b 00 00     ................
      3c:	a1 0b 00 00 a1 0b 00 00 a1 0b 00 00 a1 0b 00 00     ................
      4c:	a1 0b 00 00 a1 0b 00 00 a1 0b 00 00 a1 0b 00 00     ................
      5c:	71 73 00 00 a1 0b 00 00 a1 0b 00 00 a1 0b 00 00     qs..............
      6c:	a1 0b 00 00 a1 0b 00 00 a1 0b 00 00 a1 0b 00 00     ................
      7c:	a1 0b 00 00 a1 0b 00 00 a1 0b 00 00 a1 0b 00 00     ................
      8c:	a1 0b 00 00 a1 0b 00 00 a1 0b 00 00 a1 0b 00 00     ................
      9c:	a1 0b 00 00 a1 0b 00 00 a1 0b 00 00 a1 0b 00 00     ................
      ac:	a1 0b 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000a30 	.word	0x20000a30
      d4:	00000000 	.word	0x00000000
      d8:	0001288c 	.word	0x0001288c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000a34 	.word	0x20000a34
     108:	0001288c 	.word	0x0001288c
     10c:	0001288c 	.word	0x0001288c
     110:	00000000 	.word	0x00000000

00000114 <_Z41__static_initialization_and_destruction_0ii>:
				#else
				
				printf("**************************\n\r");
				printf("Not Locked at:  %lf",target_frequency);
				printf(" MHz\n");
				printf("**************************\n");
     114:	b510      	push	{r4, lr}
     116:	2801      	cmp	r0, #1
     118:	d000      	beq.n	11c <_Z41__static_initialization_and_destruction_0ii+0x8>
     11a:	bd10      	pop	{r4, pc}
     11c:	4b06      	ldr	r3, [pc, #24]	; (138 <_Z41__static_initialization_and_destruction_0ii+0x24>)
     11e:	4299      	cmp	r1, r3
     120:	d1fb      	bne.n	11a <_Z41__static_initialization_and_destruction_0ii+0x6>
     122:	4c06      	ldr	r4, [pc, #24]	; (13c <_Z41__static_initialization_and_destruction_0ii+0x28>)
     124:	0020      	movs	r0, r4
     126:	4b06      	ldr	r3, [pc, #24]	; (140 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
     128:	4798      	blx	r3
     12a:	4a06      	ldr	r2, [pc, #24]	; (144 <_Z41__static_initialization_and_destruction_0ii+0x30>)
     12c:	4906      	ldr	r1, [pc, #24]	; (148 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     12e:	0020      	movs	r0, r4
     130:	4b06      	ldr	r3, [pc, #24]	; (14c <_Z41__static_initialization_and_destruction_0ii+0x38>)
     132:	4798      	blx	r3
     134:	e7f1      	b.n	11a <_Z41__static_initialization_and_destruction_0ii+0x6>
     136:	46c0      	nop			; (mov r8, r8)
     138:	0000ffff 	.word	0x0000ffff
     13c:	20000a4c 	.word	0x20000a4c
     140:	00000d01 	.word	0x00000d01
     144:	20000000 	.word	0x20000000
     148:	00000d0d 	.word	0x00000d0d
     14c:	00008c5d 	.word	0x00008c5d

00000150 <_ZN14ADF5610_DriverC1Ev>:
     150:	b510      	push	{r4, lr}
     152:	4a0e      	ldr	r2, [pc, #56]	; (18c <_ZN14ADF5610_DriverC1Ev+0x3c>)
     154:	6002      	str	r2, [r0, #0]
     156:	2300      	movs	r3, #0
     158:	2192      	movs	r1, #146	; 0x92
     15a:	0049      	lsls	r1, r1, #1
		 buffer32=0;
     15c:	5043      	str	r3, [r0, r1]
		 dir=1;
     15e:	2401      	movs	r4, #1
     160:	3114      	adds	r1, #20
     162:	5044      	str	r4, [r0, r1]
		 spi_adf=&staticSPI;
     164:	490a      	ldr	r1, [pc, #40]	; (190 <_ZN14ADF5610_DriverC1Ev+0x40>)
     166:	6041      	str	r1, [r0, #4]
		 is_locked=false;
     168:	219e      	movs	r1, #158	; 0x9e
     16a:	0049      	lsls	r1, r1, #1
     16c:	5443      	strb	r3, [r0, r1]
		 upper_limit=4400;
     16e:	4909      	ldr	r1, [pc, #36]	; (194 <_ZN14ADF5610_DriverC1Ev+0x44>)
     170:	6081      	str	r1, [r0, #8]
		 lower_limit=3600;
     172:	60c2      	str	r2, [r0, #12]
		 step=(upper_limit-lower_limit)/1024.0*2;
     174:	4908      	ldr	r1, [pc, #32]	; (198 <_ZN14ADF5610_DriverC1Ev+0x48>)
     176:	2298      	movs	r2, #152	; 0x98
     178:	0052      	lsls	r2, r2, #1
     17a:	5081      	str	r1, [r0, r2]
		 target_frequency=current_frequency+step;
     17c:	4907      	ldr	r1, [pc, #28]	; (19c <_ZN14ADF5610_DriverC1Ev+0x4c>)
     17e:	3204      	adds	r2, #4
     180:	5081      	str	r1, [r0, r2]
		 pll_started=false;
     182:	2256      	movs	r2, #86	; 0x56
     184:	32ff      	adds	r2, #255	; 0xff
     186:	5483      	strb	r3, [r0, r2]
}
     188:	bd10      	pop	{r4, pc}
     18a:	46c0      	nop			; (mov r8, r8)
     18c:	45610000 	.word	0x45610000
     190:	20000a4c 	.word	0x20000a4c
     194:	45898000 	.word	0x45898000
     198:	3fc80000 	.word	0x3fc80000
     19c:	45611900 	.word	0x45611900

000001a0 <_ZN14ADF5610_DriverD1Ev>:
}
     1a0:	4770      	bx	lr
	...

000001a4 <_ZN14ADF5610_Driver13ShowRegistersEi>:
void ADF5610_Driver::ShowRegisters(int index){
     1a4:	b570      	push	{r4, r5, r6, lr}
     1a6:	0005      	movs	r5, r0
     1a8:	1e0c      	subs	r4, r1, #0
	switch (index){
     1aa:	d006      	beq.n	1ba <_ZN14ADF5610_Driver13ShowRegistersEi+0x16>
     1ac:	2900      	cmp	r1, #0
     1ae:	db0d      	blt.n	1cc <_ZN14ADF5610_Driver13ShowRegistersEi+0x28>
     1b0:	000b      	movs	r3, r1
     1b2:	3b12      	subs	r3, #18
     1b4:	2b01      	cmp	r3, #1
     1b6:	d809      	bhi.n	1cc <_ZN14ADF5610_Driver13ShowRegistersEi+0x28>
}
     1b8:	bd70      	pop	{r4, r5, r6, pc}
			  printf("Read R%d",index);
     1ba:	480e      	ldr	r0, [pc, #56]	; (1f4 <_ZN14ADF5610_Driver13ShowRegistersEi+0x50>)
     1bc:	4e0e      	ldr	r6, [pc, #56]	; (1f8 <_ZN14ADF5610_Driver13ShowRegistersEi+0x54>)
     1be:	47b0      	blx	r6
			  printf(":  0x%08lx\n" ,RegRead[index]);
     1c0:	3404      	adds	r4, #4
     1c2:	00a4      	lsls	r4, r4, #2
     1c4:	5961      	ldr	r1, [r4, r5]
     1c6:	480d      	ldr	r0, [pc, #52]	; (1fc <_ZN14ADF5610_Driver13ShowRegistersEi+0x58>)
     1c8:	47b0      	blx	r6
			  break;
     1ca:	e7f5      	b.n	1b8 <_ZN14ADF5610_Driver13ShowRegistersEi+0x14>
			  printf("Write R%d",index);
     1cc:	0021      	movs	r1, r4
     1ce:	480c      	ldr	r0, [pc, #48]	; (200 <_ZN14ADF5610_Driver13ShowRegistersEi+0x5c>)
     1d0:	4e09      	ldr	r6, [pc, #36]	; (1f8 <_ZN14ADF5610_Driver13ShowRegistersEi+0x54>)
     1d2:	47b0      	blx	r6
			  printf(":  0x%08lx\t",RegWrite[index]);
     1d4:	0023      	movs	r3, r4
     1d6:	331a      	adds	r3, #26
     1d8:	009b      	lsls	r3, r3, #2
     1da:	18eb      	adds	r3, r5, r3
     1dc:	6859      	ldr	r1, [r3, #4]
     1de:	4809      	ldr	r0, [pc, #36]	; (204 <_ZN14ADF5610_Driver13ShowRegistersEi+0x60>)
     1e0:	47b0      	blx	r6
			  printf("Read R%d",index);
     1e2:	0021      	movs	r1, r4
     1e4:	4803      	ldr	r0, [pc, #12]	; (1f4 <_ZN14ADF5610_Driver13ShowRegistersEi+0x50>)
     1e6:	47b0      	blx	r6
			  printf(":  0x%08lx\n",RegRead[index]);
     1e8:	3404      	adds	r4, #4
     1ea:	00a4      	lsls	r4, r4, #2
     1ec:	5961      	ldr	r1, [r4, r5]
     1ee:	4803      	ldr	r0, [pc, #12]	; (1fc <_ZN14ADF5610_Driver13ShowRegistersEi+0x58>)
     1f0:	47b0      	blx	r6
}
     1f2:	e7e1      	b.n	1b8 <_ZN14ADF5610_Driver13ShowRegistersEi+0x14>
     1f4:	00012108 	.word	0x00012108
     1f8:	0000d2ad 	.word	0x0000d2ad
     1fc:	00012114 	.word	0x00012114
     200:	00012120 	.word	0x00012120
     204:	0001212c 	.word	0x0001212c

00000208 <_ZN14ADF5610_Driver23ConvertU32FourByteArrayEPhm>:
void ADF5610_Driver::ConvertU32FourByteArray(uint8_t *array,uint32_t  data){
     208:	b510      	push	{r4, lr}
	for (int i =0;i<4;i++){
     20a:	2000      	movs	r0, #0
     20c:	2803      	cmp	r0, #3
     20e:	dc07      	bgt.n	220 <_ZN14ADF5610_Driver23ConvertU32FourByteArrayEPhm+0x18>
		array[i]=(uint8_t)((data>>((3-i)*8)&0xff));
     210:	2303      	movs	r3, #3
     212:	1a1b      	subs	r3, r3, r0
     214:	00db      	lsls	r3, r3, #3
     216:	0014      	movs	r4, r2
     218:	40dc      	lsrs	r4, r3
     21a:	540c      	strb	r4, [r1, r0]
	for (int i =0;i<4;i++){
     21c:	3001      	adds	r0, #1
     21e:	e7f5      	b.n	20c <_ZN14ADF5610_Driver23ConvertU32FourByteArrayEPhm+0x4>
}
     220:	bd10      	pop	{r4, pc}
	...

00000224 <_ZN14ADF5610_Driver13ReadRegistersEh>:
void ADF5610_Driver::ReadRegisters(uint8_t index) {
     224:	b570      	push	{r4, r5, r6, lr}
     226:	0004      	movs	r4, r0
     228:	000d      	movs	r5, r1
	spi_adf->SetCS(false);
     22a:	2100      	movs	r1, #0
     22c:	6840      	ldr	r0, [r0, #4]
     22e:	4e20      	ldr	r6, [pc, #128]	; (2b0 <_ZN14ADF5610_Driver13ReadRegistersEh+0x8c>)
     230:	47b0      	blx	r6
	to_send[0]=0;
     232:	2300      	movs	r3, #0
     234:	22a8      	movs	r2, #168	; 0xa8
     236:	0052      	lsls	r2, r2, #1
     238:	54a3      	strb	r3, [r4, r2]
	to_send[1]=0;
     23a:	2252      	movs	r2, #82	; 0x52
     23c:	32ff      	adds	r2, #255	; 0xff
     23e:	54a3      	strb	r3, [r4, r2]
	to_send[2]=index;
     240:	3201      	adds	r2, #1
     242:	54a5      	strb	r5, [r4, r2]
	to_send[3]=0;
     244:	2254      	movs	r2, #84	; 0x54
     246:	32ff      	adds	r2, #255	; 0xff
     248:	54a3      	strb	r3, [r4, r2]
	spi_adf->Write(to_send,4);
     24a:	0021      	movs	r1, r4
     24c:	3151      	adds	r1, #81	; 0x51
     24e:	31ff      	adds	r1, #255	; 0xff
     250:	3a50      	subs	r2, #80	; 0x50
     252:	3aff      	subs	r2, #255	; 0xff
     254:	6860      	ldr	r0, [r4, #4]
     256:	4b17      	ldr	r3, [pc, #92]	; (2b4 <_ZN14ADF5610_Driver13ReadRegistersEh+0x90>)
     258:	4798      	blx	r3
	spi_adf->SetCS(true);
     25a:	2101      	movs	r1, #1
     25c:	6860      	ldr	r0, [r4, #4]
     25e:	47b0      	blx	r6
	delay_ms(1);
     260:	2001      	movs	r0, #1
     262:	4b15      	ldr	r3, [pc, #84]	; (2b8 <_ZN14ADF5610_Driver13ReadRegistersEh+0x94>)
     264:	4798      	blx	r3
	spi_adf->SetCS(false);
     266:	2100      	movs	r1, #0
     268:	6860      	ldr	r0, [r4, #4]
     26a:	47b0      	blx	r6
	spi_adf->Read((uint8_t*)&recibido32,4);
     26c:	0021      	movs	r1, r4
     26e:	3149      	adds	r1, #73	; 0x49
     270:	31ff      	adds	r1, #255	; 0xff
     272:	2204      	movs	r2, #4
     274:	6860      	ldr	r0, [r4, #4]
     276:	4b11      	ldr	r3, [pc, #68]	; (2bc <_ZN14ADF5610_Driver13ReadRegistersEh+0x98>)
     278:	4798      	blx	r3
	RegRead[index]=((recibido32&(0x000000FF))<<24)|((recibido32&(0x0000FF00))<<8);
     27a:	23a4      	movs	r3, #164	; 0xa4
     27c:	005b      	lsls	r3, r3, #1
     27e:	58e2      	ldr	r2, [r4, r3]
     280:	0613      	lsls	r3, r2, #24
     282:	0211      	lsls	r1, r2, #8
     284:	20ff      	movs	r0, #255	; 0xff
     286:	0400      	lsls	r0, r0, #16
     288:	4001      	ands	r1, r0
     28a:	430b      	orrs	r3, r1
	RegRead[index]|=((recibido32&(0xFF000000))>>24)|((recibido32&(0x00FF0000))>>8);
     28c:	0e11      	lsrs	r1, r2, #24
     28e:	0a12      	lsrs	r2, r2, #8
     290:	20ff      	movs	r0, #255	; 0xff
     292:	0200      	lsls	r0, r0, #8
     294:	4002      	ands	r2, r0
     296:	430a      	orrs	r2, r1
     298:	4313      	orrs	r3, r2
	RegRead[index]>>=7;
     29a:	09db      	lsrs	r3, r3, #7
	bitClear(RegRead[index],24);
     29c:	4a08      	ldr	r2, [pc, #32]	; (2c0 <_ZN14ADF5610_Driver13ReadRegistersEh+0x9c>)
     29e:	4013      	ands	r3, r2
     2a0:	3504      	adds	r5, #4
     2a2:	00ad      	lsls	r5, r5, #2
     2a4:	512b      	str	r3, [r5, r4]
	spi_adf->SetCS(true);
     2a6:	6860      	ldr	r0, [r4, #4]
     2a8:	2101      	movs	r1, #1
     2aa:	47b0      	blx	r6
}
     2ac:	bd70      	pop	{r4, r5, r6, pc}
     2ae:	46c0      	nop			; (mov r8, r8)
     2b0:	00000d7d 	.word	0x00000d7d
     2b4:	00000d4d 	.word	0x00000d4d
     2b8:	00001b41 	.word	0x00001b41
     2bc:	00000d65 	.word	0x00000d65
     2c0:	feffffff 	.word	0xfeffffff

000002c4 <_ZN14ADF5610_Driver9Is_LockedEv>:
bool ADF5610_Driver::Is_Locked(void){
     2c4:	b530      	push	{r4, r5, lr}
     2c6:	b083      	sub	sp, #12
     2c8:	0005      	movs	r5, r0
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
     2ca:	a801      	add	r0, sp, #4
     2cc:	4b15      	ldr	r3, [pc, #84]	; (324 <_ZN14ADF5610_Driver9Is_LockedEv+0x60>)
     2ce:	4798      	blx	r3
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
     2d0:	23c0      	movs	r3, #192	; 0xc0
     2d2:	05db      	lsls	r3, r3, #23
     2d4:	681c      	ldr	r4, [r3, #0]
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Port *)hw)->Group[submodule_index].IN.reg;
     2d6:	4a14      	ldr	r2, [pc, #80]	; (328 <_ZN14ADF5610_Driver9Is_LockedEv+0x64>)
     2d8:	6a12      	ldr	r2, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
     2da:	691b      	ldr	r3, [r3, #16]

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT_IOBUS, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
     2dc:	4053      	eors	r3, r2
     2de:	401c      	ands	r4, r3
     2e0:	4054      	eors	r4, r2

	CRITICAL_SECTION_LEAVE();
     2e2:	a801      	add	r0, sp, #4
     2e4:	4b11      	ldr	r3, [pc, #68]	; (32c <_ZN14ADF5610_Driver9Is_LockedEv+0x68>)
     2e6:	4798      	blx	r3
	if (gpio_get_pin_level(PA06)){
     2e8:	0663      	lsls	r3, r4, #25
     2ea:	d508      	bpl.n	2fe <_ZN14ADF5610_Driver9Is_LockedEv+0x3a>
		is_locked = true;
     2ec:	2201      	movs	r2, #1
     2ee:	239e      	movs	r3, #158	; 0x9e
     2f0:	005b      	lsls	r3, r3, #1
     2f2:	54ea      	strb	r2, [r5, r3]
	return is_locked;
     2f4:	239e      	movs	r3, #158	; 0x9e
     2f6:	005b      	lsls	r3, r3, #1
     2f8:	5ce8      	ldrb	r0, [r5, r3]
}
     2fa:	b003      	add	sp, #12
     2fc:	bd30      	pop	{r4, r5, pc}
		ReadRegisters(18);
     2fe:	2112      	movs	r1, #18
     300:	0028      	movs	r0, r5
     302:	4b0b      	ldr	r3, [pc, #44]	; (330 <_ZN14ADF5610_Driver9Is_LockedEv+0x6c>)
     304:	4798      	blx	r3
		if ((bitRead(RegRead[18],1)== true)&&(bitRead(RegRead[18],2)== false))   // select lock/unlock
     306:	2306      	movs	r3, #6
     308:	6daa      	ldr	r2, [r5, #88]	; 0x58
     30a:	4013      	ands	r3, r2
     30c:	2b02      	cmp	r3, #2
     30e:	d004      	beq.n	31a <_ZN14ADF5610_Driver9Is_LockedEv+0x56>
			is_locked = false;
     310:	2200      	movs	r2, #0
     312:	239e      	movs	r3, #158	; 0x9e
     314:	005b      	lsls	r3, r3, #1
     316:	54ea      	strb	r2, [r5, r3]
     318:	e7ec      	b.n	2f4 <_ZN14ADF5610_Driver9Is_LockedEv+0x30>
			is_locked = true;
     31a:	2201      	movs	r2, #1
     31c:	333b      	adds	r3, #59	; 0x3b
     31e:	33ff      	adds	r3, #255	; 0xff
     320:	54ea      	strb	r2, [r5, r3]
     322:	e7e7      	b.n	2f4 <_ZN14ADF5610_Driver9Is_LockedEv+0x30>
     324:	00001ad5 	.word	0x00001ad5
     328:	41004400 	.word	0x41004400
     32c:	00001af7 	.word	0x00001af7
     330:	00000225 	.word	0x00000225

00000334 <_ZN14ADF5610_Driver17InitiateRegistersEv>:
  for (int i = 0; i < 23; i++) {
     334:	2300      	movs	r3, #0
     336:	e00e      	b.n	356 <_ZN14ADF5610_Driver17InitiateRegistersEv+0x22>
          RegIni[i] = 0x20;
     338:	001a      	movs	r2, r3
     33a:	3232      	adds	r2, #50	; 0x32
     33c:	0092      	lsls	r2, r2, #2
     33e:	2120      	movs	r1, #32
     340:	5011      	str	r1, [r2, r0]
    RegWrite[i]=RegIni[i];
     342:	001a      	movs	r2, r3
     344:	3232      	adds	r2, #50	; 0x32
     346:	0092      	lsls	r2, r2, #2
     348:	5811      	ldr	r1, [r2, r0]
     34a:	001a      	movs	r2, r3
     34c:	321a      	adds	r2, #26
     34e:	0092      	lsls	r2, r2, #2
     350:	1882      	adds	r2, r0, r2
     352:	6051      	str	r1, [r2, #4]
  for (int i = 0; i < 23; i++) {
     354:	3301      	adds	r3, #1
     356:	2b16      	cmp	r3, #22
     358:	dc6c      	bgt.n	434 <_ZN14ADF5610_Driver17InitiateRegistersEv+0x100>
    switch (i) {
     35a:	d865      	bhi.n	428 <_ZN14ADF5610_Driver17InitiateRegistersEv+0xf4>
     35c:	009a      	lsls	r2, r3, #2
     35e:	4936      	ldr	r1, [pc, #216]	; (438 <_ZN14ADF5610_Driver17InitiateRegistersEv+0x104>)
     360:	588a      	ldr	r2, [r1, r2]
     362:	4697      	mov	pc, r2
        RegIni[i] = 0x2;
     364:	001a      	movs	r2, r3
     366:	3232      	adds	r2, #50	; 0x32
     368:	0092      	lsls	r2, r2, #2
     36a:	2102      	movs	r1, #2
     36c:	5011      	str	r1, [r2, r0]
        break;
     36e:	e7e8      	b.n	342 <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
        RegIni[i] = 0x1;
     370:	001a      	movs	r2, r3
     372:	3232      	adds	r2, #50	; 0x32
     374:	0092      	lsls	r2, r2, #2
     376:	2101      	movs	r1, #1
     378:	5011      	str	r1, [r2, r0]
        break;
     37a:	e7e2      	b.n	342 <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
        RegIni[i] = 0x31;
     37c:	001a      	movs	r2, r3
     37e:	3232      	adds	r2, #50	; 0x32
     380:	0092      	lsls	r2, r2, #2
     382:	2131      	movs	r1, #49	; 0x31
     384:	5011      	str	r1, [r2, r0]
        break;
     386:	e7dc      	b.n	342 <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
        RegIni[i] = 0xFD70A3;
     388:	001a      	movs	r2, r3
     38a:	3232      	adds	r2, #50	; 0x32
     38c:	0092      	lsls	r2, r2, #2
     38e:	492b      	ldr	r1, [pc, #172]	; (43c <_ZN14ADF5610_Driver17InitiateRegistersEv+0x108>)
     390:	5011      	str	r1, [r2, r0]
        break;
     392:	e7d6      	b.n	342 <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
        RegIni[i] = 0x000;
     394:	001a      	movs	r2, r3
     396:	3232      	adds	r2, #50	; 0x32
     398:	0092      	lsls	r2, r2, #2
     39a:	2100      	movs	r1, #0
     39c:	5011      	str	r1, [r2, r0]
        break;
     39e:	e7d0      	b.n	342 <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
        RegIni[i] = 0x2F4A;
     3a0:	001a      	movs	r2, r3
     3a2:	3232      	adds	r2, #50	; 0x32
     3a4:	0092      	lsls	r2, r2, #2
     3a6:	4926      	ldr	r1, [pc, #152]	; (440 <_ZN14ADF5610_Driver17InitiateRegistersEv+0x10c>)
     3a8:	5011      	str	r1, [r2, r0]
        break;
     3aa:	e7ca      	b.n	342 <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
        RegIni[i] = 0x214D;
     3ac:	001a      	movs	r2, r3
     3ae:	3232      	adds	r2, #50	; 0x32
     3b0:	0092      	lsls	r2, r2, #2
     3b2:	4924      	ldr	r1, [pc, #144]	; (444 <_ZN14ADF5610_Driver17InitiateRegistersEv+0x110>)
     3b4:	5011      	str	r1, [r2, r0]
        break;
     3b6:	e7c4      	b.n	342 <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
        RegIni[i] = 0xC9BEFF;
     3b8:	001a      	movs	r2, r3
     3ba:	3232      	adds	r2, #50	; 0x32
     3bc:	0092      	lsls	r2, r2, #2
     3be:	4922      	ldr	r1, [pc, #136]	; (448 <_ZN14ADF5610_Driver17InitiateRegistersEv+0x114>)
     3c0:	5011      	str	r1, [r2, r0]
        break;
     3c2:	e7be      	b.n	342 <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
        RegIni[i] = 0x3FFF;
     3c4:	001a      	movs	r2, r3
     3c6:	3232      	adds	r2, #50	; 0x32
     3c8:	0092      	lsls	r2, r2, #2
     3ca:	4920      	ldr	r1, [pc, #128]	; (44c <_ZN14ADF5610_Driver17InitiateRegistersEv+0x118>)
     3cc:	5011      	str	r1, [r2, r0]
        break;
     3ce:	e7b8      	b.n	342 <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
        RegIni[i] = 0x2047;
     3d0:	001a      	movs	r2, r3
     3d2:	3232      	adds	r2, #50	; 0x32
     3d4:	0092      	lsls	r2, r2, #2
     3d6:	491e      	ldr	r1, [pc, #120]	; (450 <_ZN14ADF5610_Driver17InitiateRegistersEv+0x11c>)
     3d8:	5011      	str	r1, [r2, r0]
        break;
     3da:	e7b2      	b.n	342 <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
        RegIni[i] = 0xF8061;
     3dc:	001a      	movs	r2, r3
     3de:	3232      	adds	r2, #50	; 0x32
     3e0:	0092      	lsls	r2, r2, #2
     3e2:	491c      	ldr	r1, [pc, #112]	; (454 <_ZN14ADF5610_Driver17InitiateRegistersEv+0x120>)
     3e4:	5011      	str	r1, [r2, r0]
        break;
     3e6:	e7ac      	b.n	342 <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
        RegIni[i] = 0x081;
     3e8:	001a      	movs	r2, r3
     3ea:	3232      	adds	r2, #50	; 0x32
     3ec:	0092      	lsls	r2, r2, #2
     3ee:	2181      	movs	r1, #129	; 0x81
     3f0:	5011      	str	r1, [r2, r0]
        break;
     3f2:	e7a6      	b.n	342 <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
		RegIni[i] = 0x020;
     3f4:	001a      	movs	r2, r3
     3f6:	3232      	adds	r2, #50	; 0x32
     3f8:	0092      	lsls	r2, r2, #2
     3fa:	2120      	movs	r1, #32
     3fc:	5011      	str	r1, [r2, r0]
		break;
     3fe:	e7a0      	b.n	342 <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
        RegIni[i] = RegIni[5];
     400:	22dc      	movs	r2, #220	; 0xdc
     402:	5881      	ldr	r1, [r0, r2]
     404:	001a      	movs	r2, r3
     406:	3232      	adds	r2, #50	; 0x32
     408:	0092      	lsls	r2, r2, #2
     40a:	5011      	str	r1, [r2, r0]
         break;
     40c:	e799      	b.n	342 <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
       RegIni[i] = (0x01<<3)|(0x00<<7)|(0x07<<9)|(0x03<<12)|(0x01<<15);
     40e:	001a      	movs	r2, r3
     410:	3232      	adds	r2, #50	; 0x32
     412:	0092      	lsls	r2, r2, #2
     414:	4910      	ldr	r1, [pc, #64]	; (458 <_ZN14ADF5610_Driver17InitiateRegistersEv+0x124>)
     416:	5011      	str	r1, [r2, r0]
         break;
     418:	e793      	b.n	342 <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
         RegIni[i] =(0x02<<3)|(0x07<<7)|(0x00);
     41a:	001a      	movs	r2, r3
     41c:	3232      	adds	r2, #50	; 0x32
     41e:	0092      	lsls	r2, r2, #2
     420:	21e4      	movs	r1, #228	; 0xe4
     422:	0089      	lsls	r1, r1, #2
     424:	5011      	str	r1, [r2, r0]
         break;
     426:	e78c      	b.n	342 <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
        RegIni[i] = 0x0;
     428:	001a      	movs	r2, r3
     42a:	3232      	adds	r2, #50	; 0x32
     42c:	0092      	lsls	r2, r2, #2
     42e:	2100      	movs	r1, #0
     430:	5011      	str	r1, [r2, r0]
        break;
     432:	e786      	b.n	342 <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
}
     434:	4770      	bx	lr
     436:	46c0      	nop			; (mov r8, r8)
     438:	0001205c 	.word	0x0001205c
     43c:	00fd70a3 	.word	0x00fd70a3
     440:	00002f4a 	.word	0x00002f4a
     444:	0000214d 	.word	0x0000214d
     448:	00c9beff 	.word	0x00c9beff
     44c:	00003fff 	.word	0x00003fff
     450:	00002047 	.word	0x00002047
     454:	000f8061 	.word	0x000f8061
     458:	0000be08 	.word	0x0000be08

0000045c <_ZN14ADF5610_Driver16ReadAllRegistersEv>:
void ADF5610_Driver::ReadAllRegisters(){
     45c:	b570      	push	{r4, r5, r6, lr}
     45e:	0005      	movs	r5, r0
  for (int i=0; i<=19;i++){
     460:	2400      	movs	r4, #0
     462:	2c13      	cmp	r4, #19
     464:	dc05      	bgt.n	472 <_ZN14ADF5610_Driver16ReadAllRegistersEv+0x16>
    ReadRegisters((uint8_t)i);
     466:	b2e1      	uxtb	r1, r4
     468:	0028      	movs	r0, r5
     46a:	4b02      	ldr	r3, [pc, #8]	; (474 <_ZN14ADF5610_Driver16ReadAllRegistersEv+0x18>)
     46c:	4798      	blx	r3
  for (int i=0; i<=19;i++){
     46e:	3401      	adds	r4, #1
     470:	e7f7      	b.n	462 <_ZN14ADF5610_Driver16ReadAllRegistersEv+0x6>
}
     472:	bd70      	pop	{r4, r5, r6, pc}
     474:	00000225 	.word	0x00000225

00000478 <_ZN14ADF5610_Driver18CalculateVCOValuesEv>:
void ADF5610_Driver::CalculateVCOValues(void){
     478:	b5f0      	push	{r4, r5, r6, r7, lr}
     47a:	46c6      	mov	lr, r8
     47c:	b500      	push	{lr}
     47e:	b084      	sub	sp, #16
     480:	0007      	movs	r7, r0
	 aux_register=0;
     482:	2200      	movs	r2, #0
     484:	23a0      	movs	r3, #160	; 0xa0
     486:	005b      	lsls	r3, r3, #1
     488:	50c2      	str	r2, [r0, r3]
		double  fDIV=target_frequency;
     48a:	259a      	movs	r5, #154	; 0x9a
     48c:	006d      	lsls	r5, r5, #1
     48e:	4c98      	ldr	r4, [pc, #608]	; (6f0 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x278>)
     490:	5940      	ldr	r0, [r0, r5]
     492:	47a0      	blx	r4
     494:	0002      	movs	r2, r0
     496:	000b      	movs	r3, r1
		int k=floor(log((14600)/(fDIV))/log(2));
     498:	4996      	ldr	r1, [pc, #600]	; (6f4 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x27c>)
     49a:	4688      	mov	r8, r1
     49c:	2000      	movs	r0, #0
     49e:	4996      	ldr	r1, [pc, #600]	; (6f8 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x280>)
     4a0:	47c0      	blx	r8
     4a2:	4b96      	ldr	r3, [pc, #600]	; (6fc <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x284>)
     4a4:	4798      	blx	r3
     4a6:	4a96      	ldr	r2, [pc, #600]	; (700 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x288>)
     4a8:	4b96      	ldr	r3, [pc, #600]	; (704 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x28c>)
     4aa:	47c0      	blx	r8
     4ac:	4b96      	ldr	r3, [pc, #600]	; (708 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x290>)
     4ae:	4798      	blx	r3
     4b0:	4b96      	ldr	r3, [pc, #600]	; (70c <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x294>)
     4b2:	4798      	blx	r3
		uint8_t kDIV=7-(uint8_t)(k);
     4b4:	2307      	movs	r3, #7
     4b6:	9000      	str	r0, [sp, #0]
     4b8:	1a1b      	subs	r3, r3, r0
     4ba:	b2de      	uxtb	r6, r3
	  double fVCO = 7300*((target_frequency*pow(2, k))/(14600)); //VCO
     4bc:	5978      	ldr	r0, [r7, r5]
     4be:	47a0      	blx	r4
     4c0:	9002      	str	r0, [sp, #8]
     4c2:	9103      	str	r1, [sp, #12]
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
     4c4:	9800      	ldr	r0, [sp, #0]
     4c6:	4b92      	ldr	r3, [pc, #584]	; (710 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x298>)
     4c8:	4798      	blx	r3
     4ca:	0002      	movs	r2, r0
     4cc:	000b      	movs	r3, r1
     4ce:	2000      	movs	r0, #0
     4d0:	2180      	movs	r1, #128	; 0x80
     4d2:	05c9      	lsls	r1, r1, #23
     4d4:	4c8f      	ldr	r4, [pc, #572]	; (714 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x29c>)
     4d6:	47a0      	blx	r4
     4d8:	0002      	movs	r2, r0
     4da:	000b      	movs	r3, r1
     4dc:	4c8e      	ldr	r4, [pc, #568]	; (718 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x2a0>)
     4de:	9802      	ldr	r0, [sp, #8]
     4e0:	9903      	ldr	r1, [sp, #12]
     4e2:	47a0      	blx	r4
     4e4:	2200      	movs	r2, #0
     4e6:	4b84      	ldr	r3, [pc, #528]	; (6f8 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x280>)
     4e8:	47c0      	blx	r8
     4ea:	2200      	movs	r2, #0
     4ec:	4b8b      	ldr	r3, [pc, #556]	; (71c <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x2a4>)
     4ee:	47a0      	blx	r4
     4f0:	9000      	str	r0, [sp, #0]
     4f2:	9101      	str	r1, [sp, #4]
	  if (fVCO<4000){
     4f4:	2200      	movs	r2, #0
     4f6:	4b8a      	ldr	r3, [pc, #552]	; (720 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x2a8>)
     4f8:	4c8a      	ldr	r4, [pc, #552]	; (724 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x2ac>)
     4fa:	47a0      	blx	r4
     4fc:	2800      	cmp	r0, #0
     4fe:	d029      	beq.n	554 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0xdc>
		fPD = 1*fX; //Phase detector frequency
     500:	2200      	movs	r2, #0
     502:	4b89      	ldr	r3, [pc, #548]	; (728 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x2b0>)
 N = fVCO /fPD;   // Calculate N
     504:	9800      	ldr	r0, [sp, #0]
     506:	9901      	ldr	r1, [sp, #4]
     508:	4c7a      	ldr	r4, [pc, #488]	; (6f4 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x27c>)
     50a:	47a0      	blx	r4
     50c:	0004      	movs	r4, r0
     50e:	000d      	movs	r5, r1
     510:	003b      	movs	r3, r7
     512:	3371      	adds	r3, #113	; 0x71
     514:	33ff      	adds	r3, #255	; 0xff
     516:	601c      	str	r4, [r3, #0]
     518:	605d      	str	r5, [r3, #4]
  N_Int = floor(fVCO/fPD);   // N= 50 for 5 GHz   // Turn N into integer
     51a:	4b7b      	ldr	r3, [pc, #492]	; (708 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x290>)
     51c:	4798      	blx	r3
     51e:	0002      	movs	r2, r0
     520:	000b      	movs	r3, r1
     522:	0039      	movs	r1, r7
     524:	3169      	adds	r1, #105	; 0x69
     526:	31ff      	adds	r1, #255	; 0xff
     528:	600a      	str	r2, [r1, #0]
     52a:	604b      	str	r3, [r1, #4]
 F_Frac1x = (N - N_Int) * pow(2, 24);   // Calculate Frac1 (N remainder * 2^24)
     52c:	0020      	movs	r0, r4
     52e:	0029      	movs	r1, r5
     530:	4c7e      	ldr	r4, [pc, #504]	; (72c <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x2b4>)
     532:	47a0      	blx	r4
     534:	2200      	movs	r2, #0
     536:	4b7e      	ldr	r3, [pc, #504]	; (730 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x2b8>)
     538:	4c77      	ldr	r4, [pc, #476]	; (718 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x2a0>)
     53a:	47a0      	blx	r4
     53c:	003b      	movs	r3, r7
     53e:	3379      	adds	r3, #121	; 0x79
     540:	33ff      	adds	r3, #255	; 0xff
     542:	6018      	str	r0, [r3, #0]
     544:	6059      	str	r1, [r3, #4]
   F_FracN = (uint32_t)F_Frac1x;  // turn Frac1 into an integer
     546:	4b7b      	ldr	r3, [pc, #492]	; (734 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x2bc>)
     548:	4798      	blx	r3
     54a:	23c0      	movs	r3, #192	; 0xc0
     54c:	005b      	lsls	r3, r3, #1
     54e:	50f8      	str	r0, [r7, r3]
  for (int i = 0; i < 23; i++) {
     550:	2400      	movs	r4, #0
     552:	e011      	b.n	578 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x100>
		fPD = 2*fX; //Phase detector frequency
     554:	2200      	movs	r2, #0
     556:	4b78      	ldr	r3, [pc, #480]	; (738 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x2c0>)
     558:	e7d4      	b.n	504 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x8c>
        RegWrite[i] =(uint32_t)(0x00FFFFFF&((long)N_Int));  //Fixed value (Phase control not needed)
     55a:	003b      	movs	r3, r7
     55c:	3369      	adds	r3, #105	; 0x69
     55e:	33ff      	adds	r3, #255	; 0xff
     560:	6818      	ldr	r0, [r3, #0]
     562:	6859      	ldr	r1, [r3, #4]
     564:	4b69      	ldr	r3, [pc, #420]	; (70c <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x294>)
     566:	4798      	blx	r3
     568:	0200      	lsls	r0, r0, #8
     56a:	0a00      	lsrs	r0, r0, #8
     56c:	0023      	movs	r3, r4
     56e:	331a      	adds	r3, #26
     570:	009b      	lsls	r3, r3, #2
     572:	18fb      	adds	r3, r7, r3
     574:	6058      	str	r0, [r3, #4]
  for (int i = 0; i < 23; i++) {
     576:	3401      	adds	r4, #1
     578:	2c16      	cmp	r4, #22
     57a:	dd00      	ble.n	57e <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x106>
     57c:	e0b3      	b.n	6e6 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x26e>
    switch (i) {
     57e:	1ee3      	subs	r3, r4, #3
     580:	2b13      	cmp	r3, #19
     582:	d8f8      	bhi.n	576 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0xfe>
     584:	009b      	lsls	r3, r3, #2
     586:	4a6d      	ldr	r2, [pc, #436]	; (73c <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x2c4>)
     588:	58d3      	ldr	r3, [r2, r3]
     58a:	469f      	mov	pc, r3
        RegWrite[i] =(uint32_t)(0x00FFFFFF&(F_FracN));
     58c:	23c0      	movs	r3, #192	; 0xc0
     58e:	005b      	lsls	r3, r3, #1
     590:	58fa      	ldr	r2, [r7, r3]
     592:	0212      	lsls	r2, r2, #8
     594:	0a12      	lsrs	r2, r2, #8
     596:	0023      	movs	r3, r4
     598:	331a      	adds	r3, #26
     59a:	009b      	lsls	r3, r3, #2
     59c:	18fb      	adds	r3, r7, r3
     59e:	605a      	str	r2, [r3, #4]
        break;
     5a0:	e7e9      	b.n	576 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0xfe>
		 ReadRegisters((uint8_t)0x10);
     5a2:	2110      	movs	r1, #16
     5a4:	0038      	movs	r0, r7
     5a6:	4b66      	ldr	r3, [pc, #408]	; (740 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x2c8>)
     5a8:	4798      	blx	r3
		  for (int j=15;j>0;j--){
     5aa:	230f      	movs	r3, #15
     5ac:	e013      	b.n	5d6 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x15e>
				   bitWrite(RegWrite[i], j, bitRead(RegRead[0x10],j-8));
     5ae:	2101      	movs	r1, #1
     5b0:	4099      	lsls	r1, r3
     5b2:	0022      	movs	r2, r4
     5b4:	321a      	adds	r2, #26
     5b6:	0092      	lsls	r2, r2, #2
     5b8:	18ba      	adds	r2, r7, r2
     5ba:	6850      	ldr	r0, [r2, #4]
     5bc:	4388      	bics	r0, r1
     5be:	6050      	str	r0, [r2, #4]
     5c0:	e008      	b.n	5d4 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x15c>
				   bitWrite(RegWrite[i], j, 0);
     5c2:	2101      	movs	r1, #1
     5c4:	4099      	lsls	r1, r3
     5c6:	0022      	movs	r2, r4
     5c8:	321a      	adds	r2, #26
     5ca:	0092      	lsls	r2, r2, #2
     5cc:	18ba      	adds	r2, r7, r2
     5ce:	6850      	ldr	r0, [r2, #4]
     5d0:	4388      	bics	r0, r1
     5d2:	6050      	str	r0, [r2, #4]
		  for (int j=15;j>0;j--){
     5d4:	3b01      	subs	r3, #1
     5d6:	2b00      	cmp	r3, #0
     5d8:	dd12      	ble.n	600 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x188>
			   if(j>7){
     5da:	2b07      	cmp	r3, #7
     5dc:	ddf1      	ble.n	5c2 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x14a>
				   bitWrite(RegWrite[i], j, bitRead(RegRead[0x10],j-8));
     5de:	001a      	movs	r2, r3
     5e0:	3a08      	subs	r2, #8
     5e2:	6d39      	ldr	r1, [r7, #80]	; 0x50
     5e4:	40d1      	lsrs	r1, r2
     5e6:	000a      	movs	r2, r1
     5e8:	07d2      	lsls	r2, r2, #31
     5ea:	d5e0      	bpl.n	5ae <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x136>
     5ec:	2101      	movs	r1, #1
     5ee:	4099      	lsls	r1, r3
     5f0:	0022      	movs	r2, r4
     5f2:	321a      	adds	r2, #26
     5f4:	0092      	lsls	r2, r2, #2
     5f6:	18ba      	adds	r2, r7, r2
     5f8:	6850      	ldr	r0, [r2, #4]
     5fa:	4301      	orrs	r1, r0
     5fc:	6051      	str	r1, [r2, #4]
     5fe:	e7e9      	b.n	5d4 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x15c>
		   bitWrite(RegWrite[i], 13,1);
     600:	0023      	movs	r3, r4
     602:	331a      	adds	r3, #26
     604:	009b      	lsls	r3, r3, #2
     606:	18fb      	adds	r3, r7, r3
     608:	2280      	movs	r2, #128	; 0x80
     60a:	0192      	lsls	r2, r2, #6
     60c:	6859      	ldr	r1, [r3, #4]
     60e:	430a      	orrs	r2, r1
     610:	605a      	str	r2, [r3, #4]
     612:	e7b0      	b.n	576 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0xfe>
        if (fVCO<4000){
     614:	2200      	movs	r2, #0
     616:	4b42      	ldr	r3, [pc, #264]	; (720 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x2a8>)
     618:	9800      	ldr	r0, [sp, #0]
     61a:	9901      	ldr	r1, [sp, #4]
     61c:	4d41      	ldr	r5, [pc, #260]	; (724 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x2ac>)
     61e:	47a8      	blx	r5
     620:	2800      	cmp	r0, #0
     622:	d008      	beq.n	636 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x1be>
          bitWrite(RegWrite[i], 19, 0);
     624:	0023      	movs	r3, r4
     626:	331a      	adds	r3, #26
     628:	009b      	lsls	r3, r3, #2
     62a:	18fb      	adds	r3, r7, r3
     62c:	4a45      	ldr	r2, [pc, #276]	; (744 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x2cc>)
     62e:	6859      	ldr	r1, [r3, #4]
     630:	400a      	ands	r2, r1
     632:	605a      	str	r2, [r3, #4]
     634:	e79f      	b.n	576 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0xfe>
          bitWrite(RegWrite[i], 19, 1);
     636:	0023      	movs	r3, r4
     638:	331a      	adds	r3, #26
     63a:	009b      	lsls	r3, r3, #2
     63c:	18fb      	adds	r3, r7, r3
     63e:	2280      	movs	r2, #128	; 0x80
     640:	0312      	lsls	r2, r2, #12
     642:	6859      	ldr	r1, [r3, #4]
     644:	430a      	orrs	r2, r1
     646:	605a      	str	r2, [r3, #4]
     648:	e795      	b.n	576 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0xfe>
    	  aux_register=RegWrite[5];
     64a:	2380      	movs	r3, #128	; 0x80
     64c:	58fa      	ldr	r2, [r7, r3]
     64e:	33c0      	adds	r3, #192	; 0xc0
     650:	50fa      	str	r2, [r7, r3]
        RegWrite[i]=aux_register;
     652:	0023      	movs	r3, r4
     654:	331a      	adds	r3, #26
     656:	009b      	lsls	r3, r3, #2
     658:	18fb      	adds	r3, r7, r3
     65a:	605a      	str	r2, [r3, #4]
        break;
     65c:	e78b      	b.n	576 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0xfe>
        RegWrite[i]=RegIni[i];
     65e:	0023      	movs	r3, r4
     660:	3332      	adds	r3, #50	; 0x32
     662:	009b      	lsls	r3, r3, #2
     664:	59da      	ldr	r2, [r3, r7]
     666:	0023      	movs	r3, r4
     668:	331a      	adds	r3, #26
     66a:	009b      	lsls	r3, r3, #2
     66c:	18fb      	adds	r3, r7, r3
     66e:	605a      	str	r2, [r3, #4]
        break;
     670:	e781      	b.n	576 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0xfe>
    switch (i) {
     672:	2303      	movs	r3, #3
     674:	e022      	b.n	6bc <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x244>
					bitWrite(RegWrite[i], j, bitRead(VCOAdd,j-3));
     676:	1ed9      	subs	r1, r3, #3
     678:	2202      	movs	r2, #2
     67a:	410a      	asrs	r2, r1
     67c:	07d2      	lsls	r2, r2, #31
     67e:	d509      	bpl.n	694 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x21c>
     680:	2101      	movs	r1, #1
     682:	4099      	lsls	r1, r3
     684:	0022      	movs	r2, r4
     686:	321a      	adds	r2, #26
     688:	0092      	lsls	r2, r2, #2
     68a:	18ba      	adds	r2, r7, r2
     68c:	6850      	ldr	r0, [r2, #4]
     68e:	4301      	orrs	r1, r0
     690:	6051      	str	r1, [r2, #4]
     692:	e012      	b.n	6ba <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x242>
     694:	2101      	movs	r1, #1
     696:	4099      	lsls	r1, r3
     698:	0022      	movs	r2, r4
     69a:	321a      	adds	r2, #26
     69c:	0092      	lsls	r2, r2, #2
     69e:	18ba      	adds	r2, r7, r2
     6a0:	6850      	ldr	r0, [r2, #4]
     6a2:	4388      	bics	r0, r1
     6a4:	6050      	str	r0, [r2, #4]
     6a6:	e008      	b.n	6ba <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x242>
					bitWrite(RegWrite[i], j, bitRead(kDIV,j-7));
     6a8:	2101      	movs	r1, #1
     6aa:	4099      	lsls	r1, r3
     6ac:	0022      	movs	r2, r4
     6ae:	321a      	adds	r2, #26
     6b0:	0092      	lsls	r2, r2, #2
     6b2:	18ba      	adds	r2, r7, r2
     6b4:	6850      	ldr	r0, [r2, #4]
     6b6:	4388      	bics	r0, r1
     6b8:	6050      	str	r0, [r2, #4]
			for (int j=3;j<16;j++){
     6ba:	3301      	adds	r3, #1
     6bc:	2b0f      	cmp	r3, #15
     6be:	dd00      	ble.n	6c2 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x24a>
     6c0:	e759      	b.n	576 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0xfe>
				if (j<7){
     6c2:	2b06      	cmp	r3, #6
     6c4:	ddd7      	ble.n	676 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x1fe>
					bitWrite(RegWrite[i], j, bitRead(kDIV,j-7));
     6c6:	1fda      	subs	r2, r3, #7
     6c8:	0031      	movs	r1, r6
     6ca:	4111      	asrs	r1, r2
     6cc:	000a      	movs	r2, r1
     6ce:	07d2      	lsls	r2, r2, #31
     6d0:	d5ea      	bpl.n	6a8 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x230>
     6d2:	2101      	movs	r1, #1
     6d4:	4099      	lsls	r1, r3
     6d6:	0022      	movs	r2, r4
     6d8:	321a      	adds	r2, #26
     6da:	0092      	lsls	r2, r2, #2
     6dc:	18ba      	adds	r2, r7, r2
     6de:	6850      	ldr	r0, [r2, #4]
     6e0:	4301      	orrs	r1, r0
     6e2:	6051      	str	r1, [r2, #4]
     6e4:	e7e9      	b.n	6ba <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x242>
}
     6e6:	b004      	add	sp, #16
     6e8:	bc04      	pop	{r2}
     6ea:	4690      	mov	r8, r2
     6ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6ee:	46c0      	nop			; (mov r8, r8)
     6f0:	0000d039 	.word	0x0000d039
     6f4:	0000bb09 	.word	0x0000bb09
     6f8:	40cc8400 	.word	0x40cc8400
     6fc:	00008d9d 	.word	0x00008d9d
     700:	fefa39ef 	.word	0xfefa39ef
     704:	3fe62e42 	.word	0x3fe62e42
     708:	00008c6d 	.word	0x00008c6d
     70c:	0000cedd 	.word	0x0000cedd
     710:	0000cf45 	.word	0x0000cf45
     714:	00008ead 	.word	0x00008ead
     718:	0000c371 	.word	0x0000c371
     71c:	40bc8400 	.word	0x40bc8400
     720:	40af4000 	.word	0x40af4000
     724:	0000a79d 	.word	0x0000a79d
     728:	40490000 	.word	0x40490000
     72c:	0000c871 	.word	0x0000c871
     730:	41700000 	.word	0x41700000
     734:	0000a8a1 	.word	0x0000a8a1
     738:	40590000 	.word	0x40590000
     73c:	000120b8 	.word	0x000120b8
     740:	00000225 	.word	0x00000225
     744:	fff7ffff 	.word	0xfff7ffff

00000748 <_ZN14ADF5610_Driver16SetNextFrequencyEv>:
{
     748:	b510      	push	{r4, lr}
  CalculateVCOValues();
     74a:	4b01      	ldr	r3, [pc, #4]	; (750 <_ZN14ADF5610_Driver16SetNextFrequencyEv+0x8>)
     74c:	4798      	blx	r3
}
     74e:	bd10      	pop	{r4, pc}
     750:	00000479 	.word	0x00000479

00000754 <_ZN14ADF5610_Driver6usleepEl>:
	
}
#ifdef ARDUINO_AVR_UNO
#else

void ADF5610_Driver::usleep(long us){
     754:	b510      	push	{r4, lr}
     756:	0008      	movs	r0, r1
	if (us/1000>1)
     758:	4b07      	ldr	r3, [pc, #28]	; (778 <_ZN14ADF5610_Driver6usleepEl+0x24>)
     75a:	4299      	cmp	r1, r3
     75c:	dc03      	bgt.n	766 <_ZN14ADF5610_Driver6usleepEl+0x12>
	{
		delay_ms(us/1000);
	} 
	else
	{
		delay_ms(1);
     75e:	2001      	movs	r0, #1
     760:	4b06      	ldr	r3, [pc, #24]	; (77c <_ZN14ADF5610_Driver6usleepEl+0x28>)
     762:	4798      	blx	r3
	}
	
}
     764:	bd10      	pop	{r4, pc}
		delay_ms(us/1000);
     766:	21fa      	movs	r1, #250	; 0xfa
     768:	0089      	lsls	r1, r1, #2
     76a:	4b05      	ldr	r3, [pc, #20]	; (780 <_ZN14ADF5610_Driver6usleepEl+0x2c>)
     76c:	4798      	blx	r3
     76e:	b280      	uxth	r0, r0
     770:	4b02      	ldr	r3, [pc, #8]	; (77c <_ZN14ADF5610_Driver6usleepEl+0x28>)
     772:	4798      	blx	r3
     774:	e7f6      	b.n	764 <_ZN14ADF5610_Driver6usleepEl+0x10>
     776:	46c0      	nop			; (mov r8, r8)
     778:	000007cf 	.word	0x000007cf
     77c:	00001b41 	.word	0x00001b41
     780:	0000a599 	.word	0x0000a599

00000784 <_ZN14ADF5610_Driver14WriteRegistersEh>:
void  ADF5610_Driver::WriteRegisters(uint8_t index) {
     784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     786:	0004      	movs	r4, r0
     788:	000d      	movs	r5, r1
  local_index=0;
     78a:	2300      	movs	r3, #0
     78c:	22a2      	movs	r2, #162	; 0xa2
     78e:	0052      	lsls	r2, r2, #1
     790:	5483      	strb	r3, [r0, r2]
  buffer32 = 0;
     792:	3a20      	subs	r2, #32
     794:	5083      	str	r3, [r0, r2]
  if (index>19){
     796:	2913      	cmp	r1, #19
     798:	dd1a      	ble.n	7d0 <_ZN14ADF5610_Driver14WriteRegistersEh+0x4c>
    if(index>22){
     79a:	2916      	cmp	r1, #22
     79c:	dd13      	ble.n	7c6 <_ZN14ADF5610_Driver14WriteRegistersEh+0x42>
		if (index>23)
     79e:	2917      	cmp	r1, #23
     7a0:	dd0c      	ble.n	7bc <_ZN14ADF5610_Driver14WriteRegistersEh+0x38>
			if (index==24)
     7a2:	2918      	cmp	r1, #24
     7a4:	d004      	beq.n	7b0 <_ZN14ADF5610_Driver14WriteRegistersEh+0x2c>
				 local_index=3;
     7a6:	2203      	movs	r2, #3
     7a8:	23a2      	movs	r3, #162	; 0xa2
     7aa:	005b      	lsls	r3, r3, #1
     7ac:	54c2      	strb	r2, [r0, r3]
     7ae:	e012      	b.n	7d6 <_ZN14ADF5610_Driver14WriteRegistersEh+0x52>
				local_index=4;
     7b0:	3a21      	subs	r2, #33	; 0x21
     7b2:	3aff      	subs	r2, #255	; 0xff
     7b4:	23a2      	movs	r3, #162	; 0xa2
     7b6:	005b      	lsls	r3, r3, #1
     7b8:	54c2      	strb	r2, [r0, r3]
     7ba:	e00c      	b.n	7d6 <_ZN14ADF5610_Driver14WriteRegistersEh+0x52>
			 local_index=3;
     7bc:	2203      	movs	r2, #3
     7be:	23a2      	movs	r3, #162	; 0xa2
     7c0:	005b      	lsls	r3, r3, #1
     7c2:	54c2      	strb	r2, [r0, r3]
     7c4:	e007      	b.n	7d6 <_ZN14ADF5610_Driver14WriteRegistersEh+0x52>
		 local_index=5;
     7c6:	2205      	movs	r2, #5
     7c8:	23a2      	movs	r3, #162	; 0xa2
     7ca:	005b      	lsls	r3, r3, #1
     7cc:	54c2      	strb	r2, [r0, r3]
     7ce:	e002      	b.n	7d6 <_ZN14ADF5610_Driver14WriteRegistersEh+0x52>
    local_index=index;
     7d0:	23a2      	movs	r3, #162	; 0xa2
     7d2:	005b      	lsls	r3, r3, #1
     7d4:	54e1      	strb	r1, [r4, r3]
  switch (local_index){
     7d6:	23a2      	movs	r3, #162	; 0xa2
     7d8:	005b      	lsls	r3, r3, #1
     7da:	5ce3      	ldrb	r3, [r4, r3]
     7dc:	3b10      	subs	r3, #16
     7de:	b2db      	uxtb	r3, r3
     7e0:	2b03      	cmp	r3, #3
     7e2:	d800      	bhi.n	7e6 <_ZN14ADF5610_Driver14WriteRegistersEh+0x62>
}
     7e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		    spi_adf->SetCS(false);
     7e6:	2100      	movs	r1, #0
     7e8:	6860      	ldr	r0, [r4, #4]
     7ea:	4e21      	ldr	r6, [pc, #132]	; (870 <_ZN14ADF5610_Driver14WriteRegistersEh+0xec>)
     7ec:	47b0      	blx	r6
			  buffer32 =((uint32_t)local_index <<3)|(RegWrite[index]<<8);
     7ee:	23a2      	movs	r3, #162	; 0xa2
     7f0:	005b      	lsls	r3, r3, #1
     7f2:	5ce2      	ldrb	r2, [r4, r3]
     7f4:	00d2      	lsls	r2, r2, #3
     7f6:	002b      	movs	r3, r5
     7f8:	331a      	adds	r3, #26
     7fa:	009b      	lsls	r3, r3, #2
     7fc:	18e3      	adds	r3, r4, r3
     7fe:	685b      	ldr	r3, [r3, #4]
     800:	021b      	lsls	r3, r3, #8
     802:	431a      	orrs	r2, r3
     804:	2392      	movs	r3, #146	; 0x92
     806:	005b      	lsls	r3, r3, #1
     808:	50e2      	str	r2, [r4, r3]
			  ConvertU32FourByteArray(to_send,buffer32);
     80a:	0027      	movs	r7, r4
     80c:	3751      	adds	r7, #81	; 0x51
     80e:	37ff      	adds	r7, #255	; 0xff
     810:	0039      	movs	r1, r7
     812:	0020      	movs	r0, r4
     814:	4b17      	ldr	r3, [pc, #92]	; (874 <_ZN14ADF5610_Driver14WriteRegistersEh+0xf0>)
     816:	4798      	blx	r3
		          spi_adf->Write(to_send,4);
     818:	2204      	movs	r2, #4
     81a:	0039      	movs	r1, r7
     81c:	6860      	ldr	r0, [r4, #4]
     81e:	4b16      	ldr	r3, [pc, #88]	; (878 <_ZN14ADF5610_Driver14WriteRegistersEh+0xf4>)
     820:	4798      	blx	r3
			 usleep(1);
     822:	2101      	movs	r1, #1
     824:	0020      	movs	r0, r4
     826:	4b15      	ldr	r3, [pc, #84]	; (87c <_ZN14ADF5610_Driver14WriteRegistersEh+0xf8>)
     828:	4798      	blx	r3
		   spi_adf->SetCS(true);
     82a:	2101      	movs	r1, #1
     82c:	6860      	ldr	r0, [r4, #4]
     82e:	47b0      	blx	r6
		   if(!is_locked){
     830:	239e      	movs	r3, #158	; 0x9e
     832:	005b      	lsls	r3, r3, #1
     834:	5ce3      	ldrb	r3, [r4, r3]
     836:	2b00      	cmp	r3, #0
     838:	d1d4      	bne.n	7e4 <_ZN14ADF5610_Driver14WriteRegistersEh+0x60>
			   usleep(1);
     83a:	2101      	movs	r1, #1
     83c:	0020      	movs	r0, r4
     83e:	4b0f      	ldr	r3, [pc, #60]	; (87c <_ZN14ADF5610_Driver14WriteRegistersEh+0xf8>)
     840:	4798      	blx	r3
			   ReadRegisters(local_index);
     842:	26a2      	movs	r6, #162	; 0xa2
     844:	0076      	lsls	r6, r6, #1
     846:	5da1      	ldrb	r1, [r4, r6]
     848:	0020      	movs	r0, r4
     84a:	4b0d      	ldr	r3, [pc, #52]	; (880 <_ZN14ADF5610_Driver14WriteRegistersEh+0xfc>)
     84c:	4798      	blx	r3
				   if(RegRead[local_index]!=RegWrite[index]){
     84e:	5da3      	ldrb	r3, [r4, r6]
     850:	3304      	adds	r3, #4
     852:	009b      	lsls	r3, r3, #2
     854:	591a      	ldr	r2, [r3, r4]
     856:	002b      	movs	r3, r5
     858:	331a      	adds	r3, #26
     85a:	009b      	lsls	r3, r3, #2
     85c:	18e3      	adds	r3, r4, r3
     85e:	685b      	ldr	r3, [r3, #4]
     860:	429a      	cmp	r2, r3
     862:	d0bf      	beq.n	7e4 <_ZN14ADF5610_Driver14WriteRegistersEh+0x60>
							   ShowRegisters(index);
     864:	0029      	movs	r1, r5
     866:	0020      	movs	r0, r4
     868:	4b06      	ldr	r3, [pc, #24]	; (884 <_ZN14ADF5610_Driver14WriteRegistersEh+0x100>)
     86a:	4798      	blx	r3
}
     86c:	e7ba      	b.n	7e4 <_ZN14ADF5610_Driver14WriteRegistersEh+0x60>
     86e:	46c0      	nop			; (mov r8, r8)
     870:	00000d7d 	.word	0x00000d7d
     874:	00000209 	.word	0x00000209
     878:	00000d4d 	.word	0x00000d4d
     87c:	00000755 	.word	0x00000755
     880:	00000225 	.word	0x00000225
     884:	000001a5 	.word	0x000001a5

00000888 <_ZN14ADF5610_Driver25CompleteConfigurationFlowEj>:
void ADF5610_Driver::CompleteConfigurationFlow(unsigned int k){
     888:	b570      	push	{r4, r5, r6, lr}
     88a:	0005      	movs	r5, r0
     88c:	000c      	movs	r4, r1
     88e:	e00d      	b.n	8ac <_ZN14ADF5610_Driver25CompleteConfigurationFlowEj+0x24>
     890:	2616      	movs	r6, #22
      for(int j=22;j>19;j--){
     892:	2e13      	cmp	r6, #19
     894:	dd05      	ble.n	8a2 <_ZN14ADF5610_Driver25CompleteConfigurationFlowEj+0x1a>
        WriteRegisters(j);
     896:	b2f1      	uxtb	r1, r6
     898:	0028      	movs	r0, r5
     89a:	4b0d      	ldr	r3, [pc, #52]	; (8d0 <_ZN14ADF5610_Driver25CompleteConfigurationFlowEj+0x48>)
     89c:	4798      	blx	r3
      for(int j=22;j>19;j--){
     89e:	3e01      	subs	r6, #1
     8a0:	e7f7      	b.n	892 <_ZN14ADF5610_Driver25CompleteConfigurationFlowEj+0xa>
	   WriteRegisters(5);
     8a2:	2105      	movs	r1, #5
     8a4:	0028      	movs	r0, r5
     8a6:	4b0a      	ldr	r3, [pc, #40]	; (8d0 <_ZN14ADF5610_Driver25CompleteConfigurationFlowEj+0x48>)
     8a8:	4798      	blx	r3
  for (int i=k; i<20;i++){
     8aa:	3401      	adds	r4, #1
     8ac:	2c13      	cmp	r4, #19
     8ae:	dc06      	bgt.n	8be <_ZN14ADF5610_Driver25CompleteConfigurationFlowEj+0x36>
    if (i==5){
     8b0:	2c05      	cmp	r4, #5
     8b2:	d0ed      	beq.n	890 <_ZN14ADF5610_Driver25CompleteConfigurationFlowEj+0x8>
      WriteRegisters(i);
     8b4:	b2e1      	uxtb	r1, r4
     8b6:	0028      	movs	r0, r5
     8b8:	4b05      	ldr	r3, [pc, #20]	; (8d0 <_ZN14ADF5610_Driver25CompleteConfigurationFlowEj+0x48>)
     8ba:	4798      	blx	r3
     8bc:	e7f5      	b.n	8aa <_ZN14ADF5610_Driver25CompleteConfigurationFlowEj+0x22>
  WriteRegisters(3);
     8be:	2103      	movs	r1, #3
     8c0:	0028      	movs	r0, r5
     8c2:	4c03      	ldr	r4, [pc, #12]	; (8d0 <_ZN14ADF5610_Driver25CompleteConfigurationFlowEj+0x48>)
     8c4:	47a0      	blx	r4
  WriteRegisters(4);
     8c6:	2104      	movs	r1, #4
     8c8:	0028      	movs	r0, r5
     8ca:	47a0      	blx	r4
}
     8cc:	bd70      	pop	{r4, r5, r6, pc}
     8ce:	46c0      	nop			; (mov r8, r8)
     8d0:	00000785 	.word	0x00000785

000008d4 <_ZN14ADF5610_Driver7InitPLLEv>:
bool  ADF5610_Driver::InitPLL(void){
     8d4:	b570      	push	{r4, r5, r6, lr}
     8d6:	0004      	movs	r4, r0
		CompleteConfigurationFlow(0);
     8d8:	2100      	movs	r1, #0
     8da:	0020      	movs	r0, r4
     8dc:	4b0d      	ldr	r3, [pc, #52]	; (914 <_ZN14ADF5610_Driver7InitPLLEv+0x40>)
     8de:	4798      	blx	r3
		ReadAllRegisters();
     8e0:	0020      	movs	r0, r4
     8e2:	4b0d      	ldr	r3, [pc, #52]	; (918 <_ZN14ADF5610_Driver7InitPLLEv+0x44>)
     8e4:	4798      	blx	r3
		pll_started= bitRead(RegRead[1],1)&(bitRead(RegRead[1],0)==0);
     8e6:	6963      	ldr	r3, [r4, #20]
     8e8:	0859      	lsrs	r1, r3, #1
     8ea:	2201      	movs	r2, #1
     8ec:	401a      	ands	r2, r3
     8ee:	4253      	negs	r3, r2
     8f0:	4153      	adcs	r3, r2
     8f2:	400b      	ands	r3, r1
     8f4:	2556      	movs	r5, #86	; 0x56
     8f6:	35ff      	adds	r5, #255	; 0xff
     8f8:	5563      	strb	r3, [r4, r5]
		delay_ms(100);
     8fa:	2064      	movs	r0, #100	; 0x64
     8fc:	4b07      	ldr	r3, [pc, #28]	; (91c <_ZN14ADF5610_Driver7InitPLLEv+0x48>)
     8fe:	4798      	blx	r3
	}while((!Is_Locked())|((!pll_started)|false));
     900:	0020      	movs	r0, r4
     902:	4b07      	ldr	r3, [pc, #28]	; (920 <_ZN14ADF5610_Driver7InitPLLEv+0x4c>)
     904:	4798      	blx	r3
     906:	5d63      	ldrb	r3, [r4, r5]
	do{
     908:	2800      	cmp	r0, #0
     90a:	d0e5      	beq.n	8d8 <_ZN14ADF5610_Driver7InitPLLEv+0x4>
     90c:	2b00      	cmp	r3, #0
     90e:	d0e3      	beq.n	8d8 <_ZN14ADF5610_Driver7InitPLLEv+0x4>
}
     910:	0018      	movs	r0, r3
     912:	bd70      	pop	{r4, r5, r6, pc}
     914:	00000889 	.word	0x00000889
     918:	0000045d 	.word	0x0000045d
     91c:	00001b41 	.word	0x00001b41
     920:	000002c5 	.word	0x000002c5

00000924 <_ZN14ADF5610_Driver4InitEv>:
bool ADF5610_Driver::Init(void){
     924:	b570      	push	{r4, r5, r6, lr}
     926:	0004      	movs	r4, r0
	spi_adf=&staticSPI;
     928:	480d      	ldr	r0, [pc, #52]	; (960 <_ZN14ADF5610_Driver4InitEv+0x3c>)
     92a:	6060      	str	r0, [r4, #4]
	spi_adf->Init();
     92c:	4b0d      	ldr	r3, [pc, #52]	; (964 <_ZN14ADF5610_Driver4InitEv+0x40>)
     92e:	4798      	blx	r3
	memset(to_send,0,4);
     930:	0025      	movs	r5, r4
     932:	3551      	adds	r5, #81	; 0x51
     934:	35ff      	adds	r5, #255	; 0xff
     936:	2204      	movs	r2, #4
     938:	2100      	movs	r1, #0
     93a:	0028      	movs	r0, r5
     93c:	4b0a      	ldr	r3, [pc, #40]	; (968 <_ZN14ADF5610_Driver4InitEv+0x44>)
     93e:	4798      	blx	r3
	spi_adf->Write(to_send,4);
     940:	2204      	movs	r2, #4
     942:	0029      	movs	r1, r5
     944:	6860      	ldr	r0, [r4, #4]
     946:	4b09      	ldr	r3, [pc, #36]	; (96c <_ZN14ADF5610_Driver4InitEv+0x48>)
     948:	4798      	blx	r3
	spi_adf->SetCS(true);
     94a:	2101      	movs	r1, #1
     94c:	6860      	ldr	r0, [r4, #4]
     94e:	4b08      	ldr	r3, [pc, #32]	; (970 <_ZN14ADF5610_Driver4InitEv+0x4c>)
     950:	4798      	blx	r3
	 InitiateRegisters();
     952:	0020      	movs	r0, r4
     954:	4b07      	ldr	r3, [pc, #28]	; (974 <_ZN14ADF5610_Driver4InitEv+0x50>)
     956:	4798      	blx	r3
	return InitPLL();
     958:	0020      	movs	r0, r4
     95a:	4b07      	ldr	r3, [pc, #28]	; (978 <_ZN14ADF5610_Driver4InitEv+0x54>)
     95c:	4798      	blx	r3
}
     95e:	bd70      	pop	{r4, r5, r6, pc}
     960:	20000a4c 	.word	0x20000a4c
     964:	00000d25 	.word	0x00000d25
     968:	0000d219 	.word	0x0000d219
     96c:	00000d4d 	.word	0x00000d4d
     970:	00000d7d 	.word	0x00000d7d
     974:	00000335 	.word	0x00000335
     978:	000008d5 	.word	0x000008d5

0000097c <_ZN14ADF5610_Driver11WriteSubVCOEv>:
void ADF5610_Driver::WriteSubVCO(void){
     97c:	b570      	push	{r4, r5, r6, lr}
     97e:	0005      	movs	r5, r0
	WriteRegisters(22);
     980:	2116      	movs	r1, #22
     982:	4c04      	ldr	r4, [pc, #16]	; (994 <_ZN14ADF5610_Driver11WriteSubVCOEv+0x18>)
     984:	47a0      	blx	r4
	WriteRegisters(20);
     986:	2114      	movs	r1, #20
     988:	0028      	movs	r0, r5
     98a:	47a0      	blx	r4
	WriteRegisters(5);
     98c:	2105      	movs	r1, #5
     98e:	0028      	movs	r0, r5
     990:	47a0      	blx	r4
}
     992:	bd70      	pop	{r4, r5, r6, pc}
     994:	00000785 	.word	0x00000785

00000998 <_ZN14ADF5610_Driver22ShortConfigurationFlowEv>:
void ADF5610_Driver::ShortConfigurationFlow(void){
     998:	b570      	push	{r4, r5, r6, lr}
     99a:	0004      	movs	r4, r0
  WriteRegisters(8);
     99c:	2108      	movs	r1, #8
     99e:	4d06      	ldr	r5, [pc, #24]	; (9b8 <_ZN14ADF5610_Driver22ShortConfigurationFlowEv+0x20>)
     9a0:	47a8      	blx	r5
  WriteSubVCO();
     9a2:	0020      	movs	r0, r4
     9a4:	4b05      	ldr	r3, [pc, #20]	; (9bc <_ZN14ADF5610_Driver22ShortConfigurationFlowEv+0x24>)
     9a6:	4798      	blx	r3
  WriteRegisters(3);
     9a8:	2103      	movs	r1, #3
     9aa:	0020      	movs	r0, r4
     9ac:	47a8      	blx	r5
  WriteRegisters(4);
     9ae:	2104      	movs	r1, #4
     9b0:	0020      	movs	r0, r4
     9b2:	47a8      	blx	r5
}
     9b4:	bd70      	pop	{r4, r5, r6, pc}
     9b6:	46c0      	nop			; (mov r8, r8)
     9b8:	00000785 	.word	0x00000785
     9bc:	0000097d 	.word	0x0000097d

000009c0 <_ZN14ADF5610_Driver8SelfTestEh>:
bool	ADF5610_Driver::SelfTest(uint8_t cycles){
     9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     9c2:	46ce      	mov	lr, r9
     9c4:	4647      	mov	r7, r8
     9c6:	b580      	push	{r7, lr}
     9c8:	0004      	movs	r4, r0
     9ca:	4688      	mov	r8, r1
	dir=1;
     9cc:	2201      	movs	r2, #1
     9ce:	239c      	movs	r3, #156	; 0x9c
     9d0:	005b      	lsls	r3, r3, #1
     9d2:	50c2      	str	r2, [r0, r3]
	int errorCounter=0;
     9d4:	2700      	movs	r7, #0
     9d6:	e02d      	b.n	a34 <_ZN14ADF5610_Driver8SelfTestEh+0x74>
				dir=-1;
     9d8:	2201      	movs	r2, #1
     9da:	4252      	negs	r2, r2
     9dc:	3338      	adds	r3, #56	; 0x38
     9de:	33ff      	adds	r3, #255	; 0xff
     9e0:	50e2      	str	r2, [r4, r3]
			   printf("Current frequence: %lf\n",current_frequency);
     9e2:	1c28      	adds	r0, r5, #0
     9e4:	4b53      	ldr	r3, [pc, #332]	; (b34 <_ZN14ADF5610_Driver8SelfTestEh+0x174>)
     9e6:	4798      	blx	r3
     9e8:	0002      	movs	r2, r0
     9ea:	000b      	movs	r3, r1
     9ec:	4852      	ldr	r0, [pc, #328]	; (b38 <_ZN14ADF5610_Driver8SelfTestEh+0x178>)
     9ee:	4953      	ldr	r1, [pc, #332]	; (b3c <_ZN14ADF5610_Driver8SelfTestEh+0x17c>)
     9f0:	4788      	blx	r1
				target_frequency=current_frequency+(dir*step);
     9f2:	6825      	ldr	r5, [r4, #0]
     9f4:	239c      	movs	r3, #156	; 0x9c
     9f6:	005b      	lsls	r3, r3, #1
     9f8:	58e0      	ldr	r0, [r4, r3]
     9fa:	3b08      	subs	r3, #8
     9fc:	58e6      	ldr	r6, [r4, r3]
     9fe:	4b50      	ldr	r3, [pc, #320]	; (b40 <_ZN14ADF5610_Driver8SelfTestEh+0x180>)
     a00:	4798      	blx	r3
     a02:	1c31      	adds	r1, r6, #0
     a04:	4b4f      	ldr	r3, [pc, #316]	; (b44 <_ZN14ADF5610_Driver8SelfTestEh+0x184>)
     a06:	4798      	blx	r3
     a08:	1c01      	adds	r1, r0, #0
     a0a:	1c28      	adds	r0, r5, #0
     a0c:	4b4e      	ldr	r3, [pc, #312]	; (b48 <_ZN14ADF5610_Driver8SelfTestEh+0x188>)
     a0e:	4798      	blx	r3
     a10:	239a      	movs	r3, #154	; 0x9a
     a12:	005b      	lsls	r3, r3, #1
     a14:	50e0      	str	r0, [r4, r3]
				SetNextFrequency();
     a16:	0020      	movs	r0, r4
     a18:	4b4c      	ldr	r3, [pc, #304]	; (b4c <_ZN14ADF5610_Driver8SelfTestEh+0x18c>)
     a1a:	4798      	blx	r3
				ShortConfigurationFlow();
     a1c:	0020      	movs	r0, r4
     a1e:	4b4c      	ldr	r3, [pc, #304]	; (b50 <_ZN14ADF5610_Driver8SelfTestEh+0x190>)
     a20:	4798      	blx	r3
				usleep(1000);
     a22:	21fa      	movs	r1, #250	; 0xfa
     a24:	0089      	lsls	r1, r1, #2
     a26:	0020      	movs	r0, r4
     a28:	4b4a      	ldr	r3, [pc, #296]	; (b54 <_ZN14ADF5610_Driver8SelfTestEh+0x194>)
     a2a:	4798      	blx	r3
			 errorCounter=0;
     a2c:	2700      	movs	r7, #0
		 delay_ms(1);
     a2e:	2001      	movs	r0, #1
     a30:	4b49      	ldr	r3, [pc, #292]	; (b58 <_ZN14ADF5610_Driver8SelfTestEh+0x198>)
     a32:	4798      	blx	r3
	while (((lower_limit<=current_frequency)&(current_frequency<=upper_limit))&&(cycles>counter)){
     a34:	6826      	ldr	r6, [r4, #0]
     a36:	2501      	movs	r5, #1
     a38:	1c31      	adds	r1, r6, #0
     a3a:	68e0      	ldr	r0, [r4, #12]
     a3c:	4b47      	ldr	r3, [pc, #284]	; (b5c <_ZN14ADF5610_Driver8SelfTestEh+0x19c>)
     a3e:	4798      	blx	r3
     a40:	2800      	cmp	r0, #0
     a42:	d100      	bne.n	a46 <_ZN14ADF5610_Driver8SelfTestEh+0x86>
     a44:	2500      	movs	r5, #0
     a46:	b2ed      	uxtb	r5, r5
     a48:	2301      	movs	r3, #1
     a4a:	4699      	mov	r9, r3
     a4c:	68a1      	ldr	r1, [r4, #8]
     a4e:	1c30      	adds	r0, r6, #0
     a50:	4b42      	ldr	r3, [pc, #264]	; (b5c <_ZN14ADF5610_Driver8SelfTestEh+0x19c>)
     a52:	4798      	blx	r3
     a54:	2800      	cmp	r0, #0
     a56:	d101      	bne.n	a5c <_ZN14ADF5610_Driver8SelfTestEh+0x9c>
     a58:	2300      	movs	r3, #0
     a5a:	4699      	mov	r9, r3
     a5c:	464b      	mov	r3, r9
     a5e:	401d      	ands	r5, r3
     a60:	d062      	beq.n	b28 <_ZN14ADF5610_Driver8SelfTestEh+0x168>
     a62:	4643      	mov	r3, r8
     a64:	2b00      	cmp	r3, #0
     a66:	dd60      	ble.n	b2a <_ZN14ADF5610_Driver8SelfTestEh+0x16a>
		 if(Is_Locked()){
     a68:	0020      	movs	r0, r4
     a6a:	4b3d      	ldr	r3, [pc, #244]	; (b60 <_ZN14ADF5610_Driver8SelfTestEh+0x1a0>)
     a6c:	4798      	blx	r3
     a6e:	1e05      	subs	r5, r0, #0
     a70:	d02b      	beq.n	aca <_ZN14ADF5610_Driver8SelfTestEh+0x10a>
			 is_locked=true;
     a72:	2201      	movs	r2, #1
     a74:	239e      	movs	r3, #158	; 0x9e
     a76:	005b      	lsls	r3, r3, #1
     a78:	54e2      	strb	r2, [r4, r3]
			 current_frequency=target_frequency;
     a7a:	3b08      	subs	r3, #8
     a7c:	58e5      	ldr	r5, [r4, r3]
     a7e:	6025      	str	r5, [r4, #0]
			  if ((current_frequency>(upper_limit-step))&&(dir==1)){
     a80:	3b04      	subs	r3, #4
     a82:	58e6      	ldr	r6, [r4, r3]
     a84:	1c31      	adds	r1, r6, #0
     a86:	68a0      	ldr	r0, [r4, #8]
     a88:	4b36      	ldr	r3, [pc, #216]	; (b64 <_ZN14ADF5610_Driver8SelfTestEh+0x1a4>)
     a8a:	4798      	blx	r3
     a8c:	1c01      	adds	r1, r0, #0
     a8e:	1c28      	adds	r0, r5, #0
     a90:	4b35      	ldr	r3, [pc, #212]	; (b68 <_ZN14ADF5610_Driver8SelfTestEh+0x1a8>)
     a92:	4798      	blx	r3
     a94:	2800      	cmp	r0, #0
     a96:	d004      	beq.n	aa2 <_ZN14ADF5610_Driver8SelfTestEh+0xe2>
     a98:	239c      	movs	r3, #156	; 0x9c
     a9a:	005b      	lsls	r3, r3, #1
     a9c:	58e3      	ldr	r3, [r4, r3]
     a9e:	2b01      	cmp	r3, #1
     aa0:	d09a      	beq.n	9d8 <_ZN14ADF5610_Driver8SelfTestEh+0x18>
			  }else if((current_frequency<(lower_limit+step))&&(dir==-1)){
     aa2:	68e1      	ldr	r1, [r4, #12]
     aa4:	1c30      	adds	r0, r6, #0
     aa6:	4b28      	ldr	r3, [pc, #160]	; (b48 <_ZN14ADF5610_Driver8SelfTestEh+0x188>)
     aa8:	4798      	blx	r3
     aaa:	1c01      	adds	r1, r0, #0
     aac:	1c28      	adds	r0, r5, #0
     aae:	4b2f      	ldr	r3, [pc, #188]	; (b6c <_ZN14ADF5610_Driver8SelfTestEh+0x1ac>)
     ab0:	4798      	blx	r3
     ab2:	2800      	cmp	r0, #0
     ab4:	d095      	beq.n	9e2 <_ZN14ADF5610_Driver8SelfTestEh+0x22>
     ab6:	239c      	movs	r3, #156	; 0x9c
     ab8:	005b      	lsls	r3, r3, #1
     aba:	58e3      	ldr	r3, [r4, r3]
     abc:	3301      	adds	r3, #1
     abe:	d190      	bne.n	9e2 <_ZN14ADF5610_Driver8SelfTestEh+0x22>
				dir=1;
     ac0:	2201      	movs	r2, #1
     ac2:	239c      	movs	r3, #156	; 0x9c
     ac4:	005b      	lsls	r3, r3, #1
     ac6:	50e2      	str	r2, [r4, r3]
     ac8:	e78b      	b.n	9e2 <_ZN14ADF5610_Driver8SelfTestEh+0x22>
			 errorCounter++;
     aca:	3701      	adds	r7, #1
			 if(is_locked){
     acc:	239e      	movs	r3, #158	; 0x9e
     ace:	005b      	lsls	r3, r3, #1
     ad0:	5ce3      	ldrb	r3, [r4, r3]
     ad2:	2b00      	cmp	r3, #0
     ad4:	d10b      	bne.n	aee <_ZN14ADF5610_Driver8SelfTestEh+0x12e>
		   SetNextFrequency();
     ad6:	0020      	movs	r0, r4
     ad8:	4b1c      	ldr	r3, [pc, #112]	; (b4c <_ZN14ADF5610_Driver8SelfTestEh+0x18c>)
     ada:	4798      	blx	r3
		   CompleteConfigurationFlow(0);
     adc:	2100      	movs	r1, #0
     ade:	0020      	movs	r0, r4
     ae0:	4b23      	ldr	r3, [pc, #140]	; (b70 <_ZN14ADF5610_Driver8SelfTestEh+0x1b0>)
     ae2:	4798      	blx	r3
			for (int var = 1; var < 24; ++var) {
     ae4:	2301      	movs	r3, #1
     ae6:	2b17      	cmp	r3, #23
     ae8:	dc17      	bgt.n	b1a <_ZN14ADF5610_Driver8SelfTestEh+0x15a>
     aea:	3301      	adds	r3, #1
     aec:	e7fb      	b.n	ae6 <_ZN14ADF5610_Driver8SelfTestEh+0x126>
				 is_locked=false;
     aee:	2200      	movs	r2, #0
     af0:	239e      	movs	r3, #158	; 0x9e
     af2:	005b      	lsls	r3, r3, #1
     af4:	54e2      	strb	r2, [r4, r3]
				  printf("**************************\n\r");
     af6:	481f      	ldr	r0, [pc, #124]	; (b74 <_ZN14ADF5610_Driver8SelfTestEh+0x1b4>)
     af8:	4e10      	ldr	r6, [pc, #64]	; (b3c <_ZN14ADF5610_Driver8SelfTestEh+0x17c>)
     afa:	47b0      	blx	r6
				   printf("Not Locked at:  %lf",target_frequency);
     afc:	239a      	movs	r3, #154	; 0x9a
     afe:	005b      	lsls	r3, r3, #1
     b00:	58e0      	ldr	r0, [r4, r3]
     b02:	4b0c      	ldr	r3, [pc, #48]	; (b34 <_ZN14ADF5610_Driver8SelfTestEh+0x174>)
     b04:	4798      	blx	r3
     b06:	0002      	movs	r2, r0
     b08:	000b      	movs	r3, r1
     b0a:	481b      	ldr	r0, [pc, #108]	; (b78 <_ZN14ADF5610_Driver8SelfTestEh+0x1b8>)
     b0c:	47b0      	blx	r6
				   printf(" MHz\n");
     b0e:	481b      	ldr	r0, [pc, #108]	; (b7c <_ZN14ADF5610_Driver8SelfTestEh+0x1bc>)
     b10:	4e1b      	ldr	r6, [pc, #108]	; (b80 <_ZN14ADF5610_Driver8SelfTestEh+0x1c0>)
     b12:	47b0      	blx	r6
				   printf("**************************\n");
     b14:	481b      	ldr	r0, [pc, #108]	; (b84 <_ZN14ADF5610_Driver8SelfTestEh+0x1c4>)
     b16:	47b0      	blx	r6
     b18:	e7dd      	b.n	ad6 <_ZN14ADF5610_Driver8SelfTestEh+0x116>
			usleep(100000);
     b1a:	491b      	ldr	r1, [pc, #108]	; (b88 <_ZN14ADF5610_Driver8SelfTestEh+0x1c8>)
     b1c:	0020      	movs	r0, r4
     b1e:	4b0d      	ldr	r3, [pc, #52]	; (b54 <_ZN14ADF5610_Driver8SelfTestEh+0x194>)
     b20:	4798      	blx	r3
			if(errorCounter>100){
     b22:	2f64      	cmp	r7, #100	; 0x64
     b24:	dd83      	ble.n	a2e <_ZN14ADF5610_Driver8SelfTestEh+0x6e>
     b26:	e000      	b.n	b2a <_ZN14ADF5610_Driver8SelfTestEh+0x16a>
	return true;
     b28:	2501      	movs	r5, #1
}
     b2a:	0028      	movs	r0, r5
     b2c:	bc0c      	pop	{r2, r3}
     b2e:	4690      	mov	r8, r2
     b30:	4699      	mov	r9, r3
     b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     b34:	0000d039 	.word	0x0000d039
     b38:	00012138 	.word	0x00012138
     b3c:	0000d2ad 	.word	0x0000d2ad
     b40:	0000b449 	.word	0x0000b449
     b44:	0000aed1 	.word	0x0000aed1
     b48:	0000aa5d 	.word	0x0000aa5d
     b4c:	00000749 	.word	0x00000749
     b50:	00000999 	.word	0x00000999
     b54:	00000755 	.word	0x00000755
     b58:	00001b41 	.word	0x00001b41
     b5c:	0000a825 	.word	0x0000a825
     b60:	000002c5 	.word	0x000002c5
     b64:	0000b111 	.word	0x0000b111
     b68:	0000a839 	.word	0x0000a839
     b6c:	0000a811 	.word	0x0000a811
     b70:	00000889 	.word	0x00000889
     b74:	00012150 	.word	0x00012150
     b78:	00012170 	.word	0x00012170
     b7c:	00012184 	.word	0x00012184
     b80:	0000d371 	.word	0x0000d371
     b84:	0001218c 	.word	0x0001218c
     b88:	000186a0 	.word	0x000186a0

00000b8c <_GLOBAL__sub_I__ZN14ADF5610_DriverC2Ev>:
}
     b8c:	b510      	push	{r4, lr}
     b8e:	4902      	ldr	r1, [pc, #8]	; (b98 <_GLOBAL__sub_I__ZN14ADF5610_DriverC2Ev+0xc>)
     b90:	2001      	movs	r0, #1
     b92:	4b02      	ldr	r3, [pc, #8]	; (b9c <_GLOBAL__sub_I__ZN14ADF5610_DriverC2Ev+0x10>)
     b94:	4798      	blx	r3
     b96:	bd10      	pop	{r4, pc}
     b98:	0000ffff 	.word	0x0000ffff
     b9c:	00000115 	.word	0x00000115

00000ba0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     ba0:	e7fe      	b.n	ba0 <Dummy_Handler>
	...

00000ba4 <Reset_Handler>:
{
     ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     ba6:	4a23      	ldr	r2, [pc, #140]	; (c34 <Reset_Handler+0x90>)
     ba8:	4b23      	ldr	r3, [pc, #140]	; (c38 <Reset_Handler+0x94>)
     baa:	429a      	cmp	r2, r3
     bac:	d009      	beq.n	bc2 <Reset_Handler+0x1e>
     bae:	4b22      	ldr	r3, [pc, #136]	; (c38 <Reset_Handler+0x94>)
     bb0:	4a20      	ldr	r2, [pc, #128]	; (c34 <Reset_Handler+0x90>)
     bb2:	e003      	b.n	bbc <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     bb4:	6811      	ldr	r1, [r2, #0]
     bb6:	6019      	str	r1, [r3, #0]
     bb8:	3304      	adds	r3, #4
     bba:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     bbc:	491f      	ldr	r1, [pc, #124]	; (c3c <Reset_Handler+0x98>)
     bbe:	428b      	cmp	r3, r1
     bc0:	d3f8      	bcc.n	bb4 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     bc2:	4b1f      	ldr	r3, [pc, #124]	; (c40 <Reset_Handler+0x9c>)
     bc4:	e002      	b.n	bcc <Reset_Handler+0x28>
                *pDest++ = 0;
     bc6:	2200      	movs	r2, #0
     bc8:	601a      	str	r2, [r3, #0]
     bca:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     bcc:	4a1d      	ldr	r2, [pc, #116]	; (c44 <Reset_Handler+0xa0>)
     bce:	4293      	cmp	r3, r2
     bd0:	d3f9      	bcc.n	bc6 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     bd2:	4a1d      	ldr	r2, [pc, #116]	; (c48 <Reset_Handler+0xa4>)
     bd4:	21ff      	movs	r1, #255	; 0xff
     bd6:	4b1d      	ldr	r3, [pc, #116]	; (c4c <Reset_Handler+0xa8>)
     bd8:	438b      	bics	r3, r1
     bda:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     bdc:	39fd      	subs	r1, #253	; 0xfd
     bde:	2390      	movs	r3, #144	; 0x90
     be0:	005b      	lsls	r3, r3, #1
     be2:	4a1b      	ldr	r2, [pc, #108]	; (c50 <Reset_Handler+0xac>)
     be4:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     be6:	4a1b      	ldr	r2, [pc, #108]	; (c54 <Reset_Handler+0xb0>)
     be8:	78d3      	ldrb	r3, [r2, #3]
     bea:	2503      	movs	r5, #3
     bec:	43ab      	bics	r3, r5
     bee:	2402      	movs	r4, #2
     bf0:	4323      	orrs	r3, r4
     bf2:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     bf4:	78d3      	ldrb	r3, [r2, #3]
     bf6:	270c      	movs	r7, #12
     bf8:	43bb      	bics	r3, r7
     bfa:	2608      	movs	r6, #8
     bfc:	4333      	orrs	r3, r6
     bfe:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     c00:	4b15      	ldr	r3, [pc, #84]	; (c58 <Reset_Handler+0xb4>)
     c02:	7b98      	ldrb	r0, [r3, #14]
     c04:	2230      	movs	r2, #48	; 0x30
     c06:	4390      	bics	r0, r2
     c08:	2220      	movs	r2, #32
     c0a:	4310      	orrs	r0, r2
     c0c:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     c0e:	7b99      	ldrb	r1, [r3, #14]
     c10:	43b9      	bics	r1, r7
     c12:	4331      	orrs	r1, r6
     c14:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     c16:	7b9a      	ldrb	r2, [r3, #14]
     c18:	43aa      	bics	r2, r5
     c1a:	4322      	orrs	r2, r4
     c1c:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     c1e:	4a0f      	ldr	r2, [pc, #60]	; (c5c <Reset_Handler+0xb8>)
     c20:	6851      	ldr	r1, [r2, #4]
     c22:	2380      	movs	r3, #128	; 0x80
     c24:	430b      	orrs	r3, r1
     c26:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     c28:	4b0d      	ldr	r3, [pc, #52]	; (c60 <Reset_Handler+0xbc>)
     c2a:	4798      	blx	r3
        main();
     c2c:	4b0d      	ldr	r3, [pc, #52]	; (c64 <Reset_Handler+0xc0>)
     c2e:	4798      	blx	r3
     c30:	e7fe      	b.n	c30 <Reset_Handler+0x8c>
     c32:	46c0      	nop			; (mov r8, r8)
     c34:	0001288c 	.word	0x0001288c
     c38:	20000000 	.word	0x20000000
     c3c:	20000a30 	.word	0x20000a30
     c40:	20000a30 	.word	0x20000a30
     c44:	200012bc 	.word	0x200012bc
     c48:	e000ed00 	.word	0xe000ed00
     c4c:	00000000 	.word	0x00000000
     c50:	41007000 	.word	0x41007000
     c54:	41005000 	.word	0x41005000
     c58:	41004800 	.word	0x41004800
     c5c:	41004000 	.word	0x41004000
     c60:	0000d14d 	.word	0x0000d14d
     c64:	00000ca5 	.word	0x00000ca5

00000c68 <_Z41__static_initialization_and_destruction_0ii>:
	while (1) {
		adf.SelfTest(1);
		delay_ms(1000);
		adf.Init();
	}
}
     c68:	b510      	push	{r4, lr}
     c6a:	2801      	cmp	r0, #1
     c6c:	d000      	beq.n	c70 <_Z41__static_initialization_and_destruction_0ii+0x8>
     c6e:	bd10      	pop	{r4, pc}
     c70:	4b06      	ldr	r3, [pc, #24]	; (c8c <_Z41__static_initialization_and_destruction_0ii+0x24>)
     c72:	4299      	cmp	r1, r3
     c74:	d1fb      	bne.n	c6e <_Z41__static_initialization_and_destruction_0ii+0x6>
ADF5610_Driver adf;
     c76:	4c06      	ldr	r4, [pc, #24]	; (c90 <_Z41__static_initialization_and_destruction_0ii+0x28>)
     c78:	0020      	movs	r0, r4
     c7a:	4b06      	ldr	r3, [pc, #24]	; (c94 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
     c7c:	4798      	blx	r3
     c7e:	4a06      	ldr	r2, [pc, #24]	; (c98 <_Z41__static_initialization_and_destruction_0ii+0x30>)
     c80:	4906      	ldr	r1, [pc, #24]	; (c9c <_Z41__static_initialization_and_destruction_0ii+0x34>)
     c82:	0020      	movs	r0, r4
     c84:	4b06      	ldr	r3, [pc, #24]	; (ca0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     c86:	4798      	blx	r3
}
     c88:	e7f1      	b.n	c6e <_Z41__static_initialization_and_destruction_0ii+0x6>
     c8a:	46c0      	nop			; (mov r8, r8)
     c8c:	0000ffff 	.word	0x0000ffff
     c90:	20000a60 	.word	0x20000a60
     c94:	00000151 	.word	0x00000151
     c98:	20000000 	.word	0x20000000
     c9c:	000001a1 	.word	0x000001a1
     ca0:	00008c5d 	.word	0x00008c5d

00000ca4 <main>:
{
     ca4:	b510      	push	{r4, lr}
	atmel_start_init();
     ca6:	4b0a      	ldr	r3, [pc, #40]	; (cd0 <main+0x2c>)
     ca8:	4798      	blx	r3
	printf("hello\n\r");
     caa:	480a      	ldr	r0, [pc, #40]	; (cd4 <main+0x30>)
     cac:	4b0a      	ldr	r3, [pc, #40]	; (cd8 <main+0x34>)
     cae:	4798      	blx	r3
	adf.Init();
     cb0:	480a      	ldr	r0, [pc, #40]	; (cdc <main+0x38>)
     cb2:	4b0b      	ldr	r3, [pc, #44]	; (ce0 <main+0x3c>)
     cb4:	4798      	blx	r3
		adf.SelfTest(1);
     cb6:	4c09      	ldr	r4, [pc, #36]	; (cdc <main+0x38>)
     cb8:	2101      	movs	r1, #1
     cba:	0020      	movs	r0, r4
     cbc:	4b09      	ldr	r3, [pc, #36]	; (ce4 <main+0x40>)
     cbe:	4798      	blx	r3
		delay_ms(1000);
     cc0:	20fa      	movs	r0, #250	; 0xfa
     cc2:	0080      	lsls	r0, r0, #2
     cc4:	4b08      	ldr	r3, [pc, #32]	; (ce8 <main+0x44>)
     cc6:	4798      	blx	r3
		adf.Init();
     cc8:	0020      	movs	r0, r4
     cca:	4b05      	ldr	r3, [pc, #20]	; (ce0 <main+0x3c>)
     ccc:	4798      	blx	r3
     cce:	e7f2      	b.n	cb6 <main+0x12>
     cd0:	00000d95 	.word	0x00000d95
     cd4:	000121a8 	.word	0x000121a8
     cd8:	0000d2ad 	.word	0x0000d2ad
     cdc:	20000a60 	.word	0x20000a60
     ce0:	00000925 	.word	0x00000925
     ce4:	000009c1 	.word	0x000009c1
     ce8:	00001b41 	.word	0x00001b41

00000cec <_GLOBAL__sub_I_adf>:
}
     cec:	b510      	push	{r4, lr}
     cee:	4902      	ldr	r1, [pc, #8]	; (cf8 <_GLOBAL__sub_I_adf+0xc>)
     cf0:	2001      	movs	r0, #1
     cf2:	4b02      	ldr	r3, [pc, #8]	; (cfc <_GLOBAL__sub_I_adf+0x10>)
     cf4:	4798      	blx	r3
     cf6:	bd10      	pop	{r4, pc}
     cf8:	0000ffff 	.word	0x0000ffff
     cfc:	00000c69 	.word	0x00000c69

00000d00 <_ZN17SPI_Syn_Class_ADFC1Ev>:


// default constructor
SPI_Syn_Class_ADF::SPI_Syn_Class_ADF()
{
		ptrSPISync_adf=this;
     d00:	4b01      	ldr	r3, [pc, #4]	; (d08 <_ZN17SPI_Syn_Class_ADFC1Ev+0x8>)
     d02:	6018      	str	r0, [r3, #0]
//	SPI=SPI_1;
} //SPI_Syn_Class_ADF
     d04:	4770      	bx	lr
     d06:	46c0      	nop			; (mov r8, r8)
     d08:	20000be8 	.word	0x20000be8

00000d0c <_ZN17SPI_Syn_Class_ADFD1Ev>:


// default destructor
SPI_Syn_Class_ADF::~SPI_Syn_Class_ADF()
{
} //~SPI_Syn_Class_ADF
     d0c:	4770      	bx	lr
	...

00000d10 <_ZN17SPI_Syn_Class_ADF6EnableEv>:
	
}



uint8_t SPI_Syn_Class_ADF::Enable(){
     d10:	b510      	push	{r4, lr}
	spi_m_sync_enable(&SPI_ADF);
     d12:	4802      	ldr	r0, [pc, #8]	; (d1c <_ZN17SPI_Syn_Class_ADF6EnableEv+0xc>)
     d14:	4b02      	ldr	r3, [pc, #8]	; (d20 <_ZN17SPI_Syn_Class_ADF6EnableEv+0x10>)
     d16:	4798      	blx	r3
	return 0;
}
     d18:	2000      	movs	r0, #0
     d1a:	bd10      	pop	{r4, pc}
     d1c:	2000127c 	.word	0x2000127c
     d20:	00001ca9 	.word	0x00001ca9

00000d24 <_ZN17SPI_Syn_Class_ADF4InitEv>:
void SPI_Syn_Class_ADF::Init(){
     d24:	b510      	push	{r4, lr}
     d26:	0004      	movs	r4, r0
	spi_m_sync_get_io_descriptor(&SPI_ADF, &io);
     d28:	0001      	movs	r1, r0
     d2a:	310c      	adds	r1, #12
     d2c:	4804      	ldr	r0, [pc, #16]	; (d40 <_ZN17SPI_Syn_Class_ADF4InitEv+0x1c>)
     d2e:	4b05      	ldr	r3, [pc, #20]	; (d44 <_ZN17SPI_Syn_Class_ADF4InitEv+0x20>)
     d30:	4798      	blx	r3
	Enable();
     d32:	0020      	movs	r0, r4
     d34:	4b04      	ldr	r3, [pc, #16]	; (d48 <_ZN17SPI_Syn_Class_ADF4InitEv+0x24>)
     d36:	4798      	blx	r3
	ready=true;
     d38:	2301      	movs	r3, #1
     d3a:	7023      	strb	r3, [r4, #0]
}
     d3c:	bd10      	pop	{r4, pc}
     d3e:	46c0      	nop			; (mov r8, r8)
     d40:	2000127c 	.word	0x2000127c
     d44:	00001e1d 	.word	0x00001e1d
     d48:	00000d11 	.word	0x00000d11

00000d4c <_ZN17SPI_Syn_Class_ADF5WriteEPKhh>:

uint8_t  SPI_Syn_Class_ADF::Write(const uint8_t * p, uint8_t n){
     d4c:	b510      	push	{r4, lr}
     d4e:	0014      	movs	r4, r2
	ready=false;
     d50:	2300      	movs	r3, #0
     d52:	7003      	strb	r3, [r0, #0]

	io_write(io, p, (uint16_t)n);
     d54:	68c0      	ldr	r0, [r0, #12]
     d56:	b292      	uxth	r2, r2
     d58:	4b01      	ldr	r3, [pc, #4]	; (d60 <_ZN17SPI_Syn_Class_ADF5WriteEPKhh+0x14>)
     d5a:	4798      	blx	r3

	return n;
}
     d5c:	0020      	movs	r0, r4
     d5e:	bd10      	pop	{r4, pc}
     d60:	00001b79 	.word	0x00001b79

00000d64 <_ZN17SPI_Syn_Class_ADF4ReadEPhh>:
uint8_t  SPI_Syn_Class_ADF::Read(uint8_t * p, uint8_t n){
     d64:	b510      	push	{r4, lr}
     d66:	0014      	movs	r4, r2
	ready=false;
     d68:	2300      	movs	r3, #0
     d6a:	7003      	strb	r3, [r0, #0]
	io_read(io, p, (uint16_t)n);
     d6c:	68c0      	ldr	r0, [r0, #12]
     d6e:	b292      	uxth	r2, r2
     d70:	4b01      	ldr	r3, [pc, #4]	; (d78 <_ZN17SPI_Syn_Class_ADF4ReadEPhh+0x14>)
     d72:	4798      	blx	r3

	
	return n;
}
     d74:	0020      	movs	r0, r4
     d76:	bd10      	pop	{r4, pc}
     d78:	00001bcd 	.word	0x00001bcd

00000d7c <_ZN17SPI_Syn_Class_ADF5SetCSEb>:
	if (level) {
     d7c:	2900      	cmp	r1, #0
     d7e:	d104      	bne.n	d8a <_ZN17SPI_Syn_Class_ADF5SetCSEb+0xe>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d80:	2280      	movs	r2, #128	; 0x80
     d82:	23c0      	movs	r3, #192	; 0xc0
     d84:	05db      	lsls	r3, r3, #23
     d86:	615a      	str	r2, [r3, #20]
	//spi_m_sync_disable(SPI);
	
}
void SPI_Syn_Class_ADF::SetCS(bool st){
	gpio_set_pin_level(CS_ADF,st);
}
     d88:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     d8a:	2280      	movs	r2, #128	; 0x80
     d8c:	23c0      	movs	r3, #192	; 0xc0
     d8e:	05db      	lsls	r3, r3, #23
     d90:	619a      	str	r2, [r3, #24]
     d92:	e7f9      	b.n	d88 <_ZN17SPI_Syn_Class_ADF5SetCSEb+0xc>

00000d94 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     d94:	b580      	push	{r7, lr}
     d96:	af00      	add	r7, sp, #0
	system_init();
     d98:	4b04      	ldr	r3, [pc, #16]	; (dac <atmel_start_init+0x18>)
     d9a:	4798      	blx	r3
	usb_init();
     d9c:	4b04      	ldr	r3, [pc, #16]	; (db0 <atmel_start_init+0x1c>)
     d9e:	4798      	blx	r3
	stdio_redirect_init();
     da0:	4b04      	ldr	r3, [pc, #16]	; (db4 <atmel_start_init+0x20>)
     da2:	4798      	blx	r3
}
     da4:	46c0      	nop			; (mov r8, r8)
     da6:	46bd      	mov	sp, r7
     da8:	bd80      	pop	{r7, pc}
     daa:	46c0      	nop			; (mov r8, r8)
     dac:	00001a1d 	.word	0x00001a1d
     db0:	000073e9 	.word	0x000073e9
     db4:	00007385 	.word	0x00007385

00000db8 <hri_gclk_write_CLKCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
     db8:	b580      	push	{r7, lr}
     dba:	b082      	sub	sp, #8
     dbc:	af00      	add	r7, sp, #0
     dbe:	6078      	str	r0, [r7, #4]
     dc0:	000a      	movs	r2, r1
     dc2:	1cbb      	adds	r3, r7, #2
     dc4:	801a      	strh	r2, [r3, #0]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     dc6:	687b      	ldr	r3, [r7, #4]
     dc8:	1cba      	adds	r2, r7, #2
     dca:	8812      	ldrh	r2, [r2, #0]
     dcc:	805a      	strh	r2, [r3, #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     dce:	46c0      	nop			; (mov r8, r8)
     dd0:	46bd      	mov	sp, r7
     dd2:	b002      	add	sp, #8
     dd4:	bd80      	pop	{r7, pc}

00000dd6 <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     dd6:	b580      	push	{r7, lr}
     dd8:	b084      	sub	sp, #16
     dda:	af00      	add	r7, sp, #0
     ddc:	60f8      	str	r0, [r7, #12]
     dde:	607a      	str	r2, [r7, #4]
     de0:	230b      	movs	r3, #11
     de2:	18fb      	adds	r3, r7, r3
     de4:	1c0a      	adds	r2, r1, #0
     de6:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     de8:	230b      	movs	r3, #11
     dea:	18fb      	adds	r3, r7, r3
     dec:	781b      	ldrb	r3, [r3, #0]
     dee:	68fa      	ldr	r2, [r7, #12]
     df0:	01db      	lsls	r3, r3, #7
     df2:	18d3      	adds	r3, r2, r3
     df4:	3308      	adds	r3, #8
     df6:	687a      	ldr	r2, [r7, #4]
     df8:	601a      	str	r2, [r3, #0]
}
     dfa:	46c0      	nop			; (mov r8, r8)
     dfc:	46bd      	mov	sp, r7
     dfe:	b004      	add	sp, #16
     e00:	bd80      	pop	{r7, pc}

00000e02 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     e02:	b580      	push	{r7, lr}
     e04:	b084      	sub	sp, #16
     e06:	af00      	add	r7, sp, #0
     e08:	60f8      	str	r0, [r7, #12]
     e0a:	607a      	str	r2, [r7, #4]
     e0c:	230b      	movs	r3, #11
     e0e:	18fb      	adds	r3, r7, r3
     e10:	1c0a      	adds	r2, r1, #0
     e12:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     e14:	230b      	movs	r3, #11
     e16:	18fb      	adds	r3, r7, r3
     e18:	781b      	ldrb	r3, [r3, #0]
     e1a:	68fa      	ldr	r2, [r7, #12]
     e1c:	01db      	lsls	r3, r3, #7
     e1e:	18d3      	adds	r3, r2, r3
     e20:	3304      	adds	r3, #4
     e22:	687a      	ldr	r2, [r7, #4]
     e24:	601a      	str	r2, [r3, #0]
}
     e26:	46c0      	nop			; (mov r8, r8)
     e28:	46bd      	mov	sp, r7
     e2a:	b004      	add	sp, #16
     e2c:	bd80      	pop	{r7, pc}

00000e2e <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     e2e:	b580      	push	{r7, lr}
     e30:	b084      	sub	sp, #16
     e32:	af00      	add	r7, sp, #0
     e34:	60f8      	str	r0, [r7, #12]
     e36:	607a      	str	r2, [r7, #4]
     e38:	230b      	movs	r3, #11
     e3a:	18fb      	adds	r3, r7, r3
     e3c:	1c0a      	adds	r2, r1, #0
     e3e:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     e40:	230b      	movs	r3, #11
     e42:	18fb      	adds	r3, r7, r3
     e44:	781b      	ldrb	r3, [r3, #0]
     e46:	68fa      	ldr	r2, [r7, #12]
     e48:	01db      	lsls	r3, r3, #7
     e4a:	18d3      	adds	r3, r2, r3
     e4c:	3318      	adds	r3, #24
     e4e:	687a      	ldr	r2, [r7, #4]
     e50:	601a      	str	r2, [r3, #0]
}
     e52:	46c0      	nop			; (mov r8, r8)
     e54:	46bd      	mov	sp, r7
     e56:	b004      	add	sp, #16
     e58:	bd80      	pop	{r7, pc}

00000e5a <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     e5a:	b580      	push	{r7, lr}
     e5c:	b084      	sub	sp, #16
     e5e:	af00      	add	r7, sp, #0
     e60:	60f8      	str	r0, [r7, #12]
     e62:	607a      	str	r2, [r7, #4]
     e64:	230b      	movs	r3, #11
     e66:	18fb      	adds	r3, r7, r3
     e68:	1c0a      	adds	r2, r1, #0
     e6a:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e6c:	230b      	movs	r3, #11
     e6e:	18fb      	adds	r3, r7, r3
     e70:	781b      	ldrb	r3, [r3, #0]
     e72:	68fa      	ldr	r2, [r7, #12]
     e74:	01db      	lsls	r3, r3, #7
     e76:	18d3      	adds	r3, r2, r3
     e78:	3314      	adds	r3, #20
     e7a:	687a      	ldr	r2, [r7, #4]
     e7c:	601a      	str	r2, [r3, #0]
}
     e7e:	46c0      	nop			; (mov r8, r8)
     e80:	46bd      	mov	sp, r7
     e82:	b004      	add	sp, #16
     e84:	bd80      	pop	{r7, pc}

00000e86 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     e86:	b590      	push	{r4, r7, lr}
     e88:	b085      	sub	sp, #20
     e8a:	af00      	add	r7, sp, #0
     e8c:	6078      	str	r0, [r7, #4]
     e8e:	000c      	movs	r4, r1
     e90:	0010      	movs	r0, r2
     e92:	0019      	movs	r1, r3
     e94:	1cfb      	adds	r3, r7, #3
     e96:	1c22      	adds	r2, r4, #0
     e98:	701a      	strb	r2, [r3, #0]
     e9a:	1cbb      	adds	r3, r7, #2
     e9c:	1c02      	adds	r2, r0, #0
     e9e:	701a      	strb	r2, [r3, #0]
     ea0:	1c7b      	adds	r3, r7, #1
     ea2:	1c0a      	adds	r2, r1, #0
     ea4:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     ea6:	1cfb      	adds	r3, r7, #3
     ea8:	7819      	ldrb	r1, [r3, #0]
     eaa:	1cbb      	adds	r3, r7, #2
     eac:	781a      	ldrb	r2, [r3, #0]
     eae:	230f      	movs	r3, #15
     eb0:	18fb      	adds	r3, r7, r3
     eb2:	6878      	ldr	r0, [r7, #4]
     eb4:	2430      	movs	r4, #48	; 0x30
     eb6:	01c9      	lsls	r1, r1, #7
     eb8:	1841      	adds	r1, r0, r1
     eba:	188a      	adds	r2, r1, r2
     ebc:	1912      	adds	r2, r2, r4
     ebe:	7812      	ldrb	r2, [r2, #0]
     ec0:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     ec2:	230f      	movs	r3, #15
     ec4:	18fb      	adds	r3, r7, r3
     ec6:	220f      	movs	r2, #15
     ec8:	18ba      	adds	r2, r7, r2
     eca:	7812      	ldrb	r2, [r2, #0]
     ecc:	210f      	movs	r1, #15
     ece:	438a      	bics	r2, r1
     ed0:	701a      	strb	r2, [r3, #0]
	tmp |= PORT_PMUX_PMUXE(data);
     ed2:	1c7b      	adds	r3, r7, #1
     ed4:	781b      	ldrb	r3, [r3, #0]
     ed6:	220f      	movs	r2, #15
     ed8:	4013      	ands	r3, r2
     eda:	b2d9      	uxtb	r1, r3
     edc:	230f      	movs	r3, #15
     ede:	18fb      	adds	r3, r7, r3
     ee0:	220f      	movs	r2, #15
     ee2:	18ba      	adds	r2, r7, r2
     ee4:	7812      	ldrb	r2, [r2, #0]
     ee6:	430a      	orrs	r2, r1
     ee8:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     eea:	1cfb      	adds	r3, r7, #3
     eec:	781a      	ldrb	r2, [r3, #0]
     eee:	1cbb      	adds	r3, r7, #2
     ef0:	781b      	ldrb	r3, [r3, #0]
     ef2:	6879      	ldr	r1, [r7, #4]
     ef4:	2030      	movs	r0, #48	; 0x30
     ef6:	01d2      	lsls	r2, r2, #7
     ef8:	188a      	adds	r2, r1, r2
     efa:	18d3      	adds	r3, r2, r3
     efc:	181b      	adds	r3, r3, r0
     efe:	220f      	movs	r2, #15
     f00:	18ba      	adds	r2, r7, r2
     f02:	7812      	ldrb	r2, [r2, #0]
     f04:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     f06:	46c0      	nop			; (mov r8, r8)
     f08:	46bd      	mov	sp, r7
     f0a:	b005      	add	sp, #20
     f0c:	bd90      	pop	{r4, r7, pc}

00000f0e <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     f0e:	b590      	push	{r4, r7, lr}
     f10:	b085      	sub	sp, #20
     f12:	af00      	add	r7, sp, #0
     f14:	6078      	str	r0, [r7, #4]
     f16:	000c      	movs	r4, r1
     f18:	0010      	movs	r0, r2
     f1a:	0019      	movs	r1, r3
     f1c:	1cfb      	adds	r3, r7, #3
     f1e:	1c22      	adds	r2, r4, #0
     f20:	701a      	strb	r2, [r3, #0]
     f22:	1cbb      	adds	r3, r7, #2
     f24:	1c02      	adds	r2, r0, #0
     f26:	701a      	strb	r2, [r3, #0]
     f28:	1c7b      	adds	r3, r7, #1
     f2a:	1c0a      	adds	r2, r1, #0
     f2c:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     f2e:	1cfb      	adds	r3, r7, #3
     f30:	7819      	ldrb	r1, [r3, #0]
     f32:	1cbb      	adds	r3, r7, #2
     f34:	781a      	ldrb	r2, [r3, #0]
     f36:	230f      	movs	r3, #15
     f38:	18fb      	adds	r3, r7, r3
     f3a:	6878      	ldr	r0, [r7, #4]
     f3c:	2430      	movs	r4, #48	; 0x30
     f3e:	01c9      	lsls	r1, r1, #7
     f40:	1841      	adds	r1, r0, r1
     f42:	188a      	adds	r2, r1, r2
     f44:	1912      	adds	r2, r2, r4
     f46:	7812      	ldrb	r2, [r2, #0]
     f48:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     f4a:	230f      	movs	r3, #15
     f4c:	18fb      	adds	r3, r7, r3
     f4e:	220f      	movs	r2, #15
     f50:	18ba      	adds	r2, r7, r2
     f52:	7812      	ldrb	r2, [r2, #0]
     f54:	210f      	movs	r1, #15
     f56:	400a      	ands	r2, r1
     f58:	701a      	strb	r2, [r3, #0]
	tmp |= PORT_PMUX_PMUXO(data);
     f5a:	1c7b      	adds	r3, r7, #1
     f5c:	781b      	ldrb	r3, [r3, #0]
     f5e:	011b      	lsls	r3, r3, #4
     f60:	b2d9      	uxtb	r1, r3
     f62:	230f      	movs	r3, #15
     f64:	18fb      	adds	r3, r7, r3
     f66:	220f      	movs	r2, #15
     f68:	18ba      	adds	r2, r7, r2
     f6a:	7812      	ldrb	r2, [r2, #0]
     f6c:	430a      	orrs	r2, r1
     f6e:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     f70:	1cfb      	adds	r3, r7, #3
     f72:	781a      	ldrb	r2, [r3, #0]
     f74:	1cbb      	adds	r3, r7, #2
     f76:	781b      	ldrb	r3, [r3, #0]
     f78:	6879      	ldr	r1, [r7, #4]
     f7a:	2030      	movs	r0, #48	; 0x30
     f7c:	01d2      	lsls	r2, r2, #7
     f7e:	188a      	adds	r2, r1, r2
     f80:	18d3      	adds	r3, r2, r3
     f82:	181b      	adds	r3, r3, r0
     f84:	220f      	movs	r2, #15
     f86:	18ba      	adds	r2, r7, r2
     f88:	7812      	ldrb	r2, [r2, #0]
     f8a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     f8c:	46c0      	nop			; (mov r8, r8)
     f8e:	46bd      	mov	sp, r7
     f90:	b005      	add	sp, #20
     f92:	bd90      	pop	{r4, r7, pc}

00000f94 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
     f94:	b590      	push	{r4, r7, lr}
     f96:	b085      	sub	sp, #20
     f98:	af00      	add	r7, sp, #0
     f9a:	6078      	str	r0, [r7, #4]
     f9c:	000c      	movs	r4, r1
     f9e:	0010      	movs	r0, r2
     fa0:	0019      	movs	r1, r3
     fa2:	1cfb      	adds	r3, r7, #3
     fa4:	1c22      	adds	r2, r4, #0
     fa6:	701a      	strb	r2, [r3, #0]
     fa8:	1cbb      	adds	r3, r7, #2
     faa:	1c02      	adds	r2, r0, #0
     fac:	701a      	strb	r2, [r3, #0]
     fae:	1c7b      	adds	r3, r7, #1
     fb0:	1c0a      	adds	r2, r1, #0
     fb2:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     fb4:	1cfb      	adds	r3, r7, #3
     fb6:	7819      	ldrb	r1, [r3, #0]
     fb8:	1cbb      	adds	r3, r7, #2
     fba:	781a      	ldrb	r2, [r3, #0]
     fbc:	230f      	movs	r3, #15
     fbe:	18fb      	adds	r3, r7, r3
     fc0:	6878      	ldr	r0, [r7, #4]
     fc2:	2440      	movs	r4, #64	; 0x40
     fc4:	01c9      	lsls	r1, r1, #7
     fc6:	1841      	adds	r1, r0, r1
     fc8:	188a      	adds	r2, r1, r2
     fca:	1912      	adds	r2, r2, r4
     fcc:	7812      	ldrb	r2, [r2, #0]
     fce:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     fd0:	230f      	movs	r3, #15
     fd2:	18fb      	adds	r3, r7, r3
     fd4:	220f      	movs	r2, #15
     fd6:	18ba      	adds	r2, r7, r2
     fd8:	7812      	ldrb	r2, [r2, #0]
     fda:	2101      	movs	r1, #1
     fdc:	438a      	bics	r2, r1
     fde:	701a      	strb	r2, [r3, #0]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     fe0:	1c7b      	adds	r3, r7, #1
     fe2:	7819      	ldrb	r1, [r3, #0]
     fe4:	230f      	movs	r3, #15
     fe6:	18fb      	adds	r3, r7, r3
     fe8:	220f      	movs	r2, #15
     fea:	18ba      	adds	r2, r7, r2
     fec:	7812      	ldrb	r2, [r2, #0]
     fee:	430a      	orrs	r2, r1
     ff0:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ff2:	1cfb      	adds	r3, r7, #3
     ff4:	781a      	ldrb	r2, [r3, #0]
     ff6:	1cbb      	adds	r3, r7, #2
     ff8:	781b      	ldrb	r3, [r3, #0]
     ffa:	6879      	ldr	r1, [r7, #4]
     ffc:	2040      	movs	r0, #64	; 0x40
     ffe:	01d2      	lsls	r2, r2, #7
    1000:	188a      	adds	r2, r1, r2
    1002:	18d3      	adds	r3, r2, r3
    1004:	181b      	adds	r3, r3, r0
    1006:	220f      	movs	r2, #15
    1008:	18ba      	adds	r2, r7, r2
    100a:	7812      	ldrb	r2, [r2, #0]
    100c:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    100e:	46c0      	nop			; (mov r8, r8)
    1010:	46bd      	mov	sp, r7
    1012:	b005      	add	sp, #20
    1014:	bd90      	pop	{r4, r7, pc}

00001016 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    1016:	b5b0      	push	{r4, r5, r7, lr}
    1018:	b082      	sub	sp, #8
    101a:	af00      	add	r7, sp, #0
    101c:	6078      	str	r0, [r7, #4]
    101e:	0008      	movs	r0, r1
    1020:	0011      	movs	r1, r2
    1022:	1cfb      	adds	r3, r7, #3
    1024:	1c02      	adds	r2, r0, #0
    1026:	701a      	strb	r2, [r3, #0]
    1028:	1cbb      	adds	r3, r7, #2
    102a:	1c0a      	adds	r2, r1, #0
    102c:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    102e:	1cfb      	adds	r3, r7, #3
    1030:	781a      	ldrb	r2, [r3, #0]
    1032:	1cbb      	adds	r3, r7, #2
    1034:	781b      	ldrb	r3, [r3, #0]
    1036:	1cf9      	adds	r1, r7, #3
    1038:	7808      	ldrb	r0, [r1, #0]
    103a:	1cb9      	adds	r1, r7, #2
    103c:	7809      	ldrb	r1, [r1, #0]
    103e:	687c      	ldr	r4, [r7, #4]
    1040:	2540      	movs	r5, #64	; 0x40
    1042:	01c0      	lsls	r0, r0, #7
    1044:	1820      	adds	r0, r4, r0
    1046:	1841      	adds	r1, r0, r1
    1048:	1949      	adds	r1, r1, r5
    104a:	7809      	ldrb	r1, [r1, #0]
    104c:	b2c9      	uxtb	r1, r1
    104e:	2004      	movs	r0, #4
    1050:	4301      	orrs	r1, r0
    1052:	b2cc      	uxtb	r4, r1
    1054:	6879      	ldr	r1, [r7, #4]
    1056:	2040      	movs	r0, #64	; 0x40
    1058:	01d2      	lsls	r2, r2, #7
    105a:	188a      	adds	r2, r1, r2
    105c:	18d3      	adds	r3, r2, r3
    105e:	181b      	adds	r3, r3, r0
    1060:	1c22      	adds	r2, r4, #0
    1062:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1064:	46c0      	nop			; (mov r8, r8)
    1066:	46bd      	mov	sp, r7
    1068:	b002      	add	sp, #8
    106a:	bdb0      	pop	{r4, r5, r7, pc}

0000106c <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    106c:	b5b0      	push	{r4, r5, r7, lr}
    106e:	b082      	sub	sp, #8
    1070:	af00      	add	r7, sp, #0
    1072:	6078      	str	r0, [r7, #4]
    1074:	0008      	movs	r0, r1
    1076:	0011      	movs	r1, r2
    1078:	1cfb      	adds	r3, r7, #3
    107a:	1c02      	adds	r2, r0, #0
    107c:	701a      	strb	r2, [r3, #0]
    107e:	1cbb      	adds	r3, r7, #2
    1080:	1c0a      	adds	r2, r1, #0
    1082:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1084:	1cfb      	adds	r3, r7, #3
    1086:	781a      	ldrb	r2, [r3, #0]
    1088:	1cbb      	adds	r3, r7, #2
    108a:	781b      	ldrb	r3, [r3, #0]
    108c:	1cf9      	adds	r1, r7, #3
    108e:	7808      	ldrb	r0, [r1, #0]
    1090:	1cb9      	adds	r1, r7, #2
    1092:	7809      	ldrb	r1, [r1, #0]
    1094:	687c      	ldr	r4, [r7, #4]
    1096:	2540      	movs	r5, #64	; 0x40
    1098:	01c0      	lsls	r0, r0, #7
    109a:	1820      	adds	r0, r4, r0
    109c:	1841      	adds	r1, r0, r1
    109e:	1949      	adds	r1, r1, r5
    10a0:	7809      	ldrb	r1, [r1, #0]
    10a2:	b2c9      	uxtb	r1, r1
    10a4:	2004      	movs	r0, #4
    10a6:	4381      	bics	r1, r0
    10a8:	b2cc      	uxtb	r4, r1
    10aa:	6879      	ldr	r1, [r7, #4]
    10ac:	2040      	movs	r0, #64	; 0x40
    10ae:	01d2      	lsls	r2, r2, #7
    10b0:	188a      	adds	r2, r1, r2
    10b2:	18d3      	adds	r3, r2, r3
    10b4:	181b      	adds	r3, r3, r0
    10b6:	1c22      	adds	r2, r4, #0
    10b8:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    10ba:	46c0      	nop			; (mov r8, r8)
    10bc:	46bd      	mov	sp, r7
    10be:	b002      	add	sp, #8
    10c0:	bdb0      	pop	{r4, r5, r7, pc}

000010c2 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
    10c2:	b580      	push	{r7, lr}
    10c4:	b084      	sub	sp, #16
    10c6:	af00      	add	r7, sp, #0
    10c8:	60f8      	str	r0, [r7, #12]
    10ca:	607a      	str	r2, [r7, #4]
    10cc:	230b      	movs	r3, #11
    10ce:	18fb      	adds	r3, r7, r3
    10d0:	1c0a      	adds	r2, r1, #0
    10d2:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    10d4:	230b      	movs	r3, #11
    10d6:	18fb      	adds	r3, r7, r3
    10d8:	781b      	ldrb	r3, [r3, #0]
    10da:	68fa      	ldr	r2, [r7, #12]
    10dc:	01db      	lsls	r3, r3, #7
    10de:	18d3      	adds	r3, r2, r3
    10e0:	3328      	adds	r3, #40	; 0x28
    10e2:	687a      	ldr	r2, [r7, #4]
    10e4:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    10e6:	46c0      	nop			; (mov r8, r8)
    10e8:	46bd      	mov	sp, r7
    10ea:	b004      	add	sp, #16
    10ec:	bd80      	pop	{r7, pc}
	...

000010f0 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
    10f0:	b580      	push	{r7, lr}
    10f2:	b082      	sub	sp, #8
    10f4:	af00      	add	r7, sp, #0
    10f6:	6039      	str	r1, [r7, #0]
    10f8:	0011      	movs	r1, r2
    10fa:	1dfb      	adds	r3, r7, #7
    10fc:	1c02      	adds	r2, r0, #0
    10fe:	701a      	strb	r2, [r3, #0]
    1100:	1dbb      	adds	r3, r7, #6
    1102:	1c0a      	adds	r2, r1, #0
    1104:	701a      	strb	r2, [r3, #0]
	switch (direction) {
    1106:	1dbb      	adds	r3, r7, #6
    1108:	781b      	ldrb	r3, [r3, #0]
    110a:	2b01      	cmp	r3, #1
    110c:	d023      	beq.n	1156 <_gpio_set_direction+0x66>
    110e:	2b02      	cmp	r3, #2
    1110:	d03f      	beq.n	1192 <_gpio_set_direction+0xa2>
    1112:	2b00      	cmp	r3, #0
    1114:	d15d      	bne.n	11d2 <_gpio_set_direction+0xe2>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, mask);
    1116:	683a      	ldr	r2, [r7, #0]
    1118:	1dfb      	adds	r3, r7, #7
    111a:	7819      	ldrb	r1, [r3, #0]
    111c:	23c0      	movs	r3, #192	; 0xc0
    111e:	05db      	lsls	r3, r3, #23
    1120:	0018      	movs	r0, r3
    1122:	4b31      	ldr	r3, [pc, #196]	; (11e8 <_gpio_set_direction+0xf8>)
    1124:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    1126:	683b      	ldr	r3, [r7, #0]
    1128:	041b      	lsls	r3, r3, #16
    112a:	0c1b      	lsrs	r3, r3, #16
    112c:	2280      	movs	r2, #128	; 0x80
    112e:	05d2      	lsls	r2, r2, #23
    1130:	431a      	orrs	r2, r3
    1132:	1dfb      	adds	r3, r7, #7
    1134:	781b      	ldrb	r3, [r3, #0]
    1136:	482d      	ldr	r0, [pc, #180]	; (11ec <_gpio_set_direction+0xfc>)
    1138:	0019      	movs	r1, r3
    113a:	4b2d      	ldr	r3, [pc, #180]	; (11f0 <_gpio_set_direction+0x100>)
    113c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    113e:	683b      	ldr	r3, [r7, #0]
    1140:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    1142:	22c0      	movs	r2, #192	; 0xc0
    1144:	0612      	lsls	r2, r2, #24
    1146:	431a      	orrs	r2, r3
    1148:	1dfb      	adds	r3, r7, #7
    114a:	781b      	ldrb	r3, [r3, #0]
    114c:	4827      	ldr	r0, [pc, #156]	; (11ec <_gpio_set_direction+0xfc>)
    114e:	0019      	movs	r1, r3
    1150:	4b27      	ldr	r3, [pc, #156]	; (11f0 <_gpio_set_direction+0x100>)
    1152:	4798      	blx	r3
		break;
    1154:	e043      	b.n	11de <_gpio_set_direction+0xee>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, mask);
    1156:	683a      	ldr	r2, [r7, #0]
    1158:	1dfb      	adds	r3, r7, #7
    115a:	7819      	ldrb	r1, [r3, #0]
    115c:	23c0      	movs	r3, #192	; 0xc0
    115e:	05db      	lsls	r3, r3, #23
    1160:	0018      	movs	r0, r3
    1162:	4b21      	ldr	r3, [pc, #132]	; (11e8 <_gpio_set_direction+0xf8>)
    1164:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    1166:	683b      	ldr	r3, [r7, #0]
    1168:	041b      	lsls	r3, r3, #16
    116a:	0c1b      	lsrs	r3, r3, #16
    116c:	4a21      	ldr	r2, [pc, #132]	; (11f4 <_gpio_set_direction+0x104>)
    116e:	431a      	orrs	r2, r3
    1170:	1dfb      	adds	r3, r7, #7
    1172:	781b      	ldrb	r3, [r3, #0]
    1174:	481d      	ldr	r0, [pc, #116]	; (11ec <_gpio_set_direction+0xfc>)
    1176:	0019      	movs	r1, r3
    1178:	4b1d      	ldr	r3, [pc, #116]	; (11f0 <_gpio_set_direction+0x100>)
    117a:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
    117c:	683b      	ldr	r3, [r7, #0]
    117e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    1180:	4a1d      	ldr	r2, [pc, #116]	; (11f8 <_gpio_set_direction+0x108>)
    1182:	431a      	orrs	r2, r3
    1184:	1dfb      	adds	r3, r7, #7
    1186:	781b      	ldrb	r3, [r3, #0]
    1188:	4818      	ldr	r0, [pc, #96]	; (11ec <_gpio_set_direction+0xfc>)
    118a:	0019      	movs	r1, r3
    118c:	4b18      	ldr	r3, [pc, #96]	; (11f0 <_gpio_set_direction+0x100>)
    118e:	4798      	blx	r3
		break;
    1190:	e025      	b.n	11de <_gpio_set_direction+0xee>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT_IOBUS, port, mask);
    1192:	683a      	ldr	r2, [r7, #0]
    1194:	1dfb      	adds	r3, r7, #7
    1196:	7819      	ldrb	r1, [r3, #0]
    1198:	23c0      	movs	r3, #192	; 0xc0
    119a:	05db      	lsls	r3, r3, #23
    119c:	0018      	movs	r0, r3
    119e:	4b17      	ldr	r3, [pc, #92]	; (11fc <_gpio_set_direction+0x10c>)
    11a0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    11a2:	683b      	ldr	r3, [r7, #0]
    11a4:	041b      	lsls	r3, r3, #16
    11a6:	0c1b      	lsrs	r3, r3, #16
    11a8:	2280      	movs	r2, #128	; 0x80
    11aa:	05d2      	lsls	r2, r2, #23
    11ac:	431a      	orrs	r2, r3
    11ae:	1dfb      	adds	r3, r7, #7
    11b0:	781b      	ldrb	r3, [r3, #0]
    11b2:	480e      	ldr	r0, [pc, #56]	; (11ec <_gpio_set_direction+0xfc>)
    11b4:	0019      	movs	r1, r3
    11b6:	4b0e      	ldr	r3, [pc, #56]	; (11f0 <_gpio_set_direction+0x100>)
    11b8:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    11ba:	683b      	ldr	r3, [r7, #0]
    11bc:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    11be:	22c0      	movs	r2, #192	; 0xc0
    11c0:	0612      	lsls	r2, r2, #24
    11c2:	431a      	orrs	r2, r3
    11c4:	1dfb      	adds	r3, r7, #7
    11c6:	781b      	ldrb	r3, [r3, #0]
    11c8:	4808      	ldr	r0, [pc, #32]	; (11ec <_gpio_set_direction+0xfc>)
    11ca:	0019      	movs	r1, r3
    11cc:	4b08      	ldr	r3, [pc, #32]	; (11f0 <_gpio_set_direction+0x100>)
    11ce:	4798      	blx	r3
		break;
    11d0:	e005      	b.n	11de <_gpio_set_direction+0xee>

	default:
		ASSERT(false);
    11d2:	4b0b      	ldr	r3, [pc, #44]	; (1200 <_gpio_set_direction+0x110>)
    11d4:	2245      	movs	r2, #69	; 0x45
    11d6:	0019      	movs	r1, r3
    11d8:	2000      	movs	r0, #0
    11da:	4b0a      	ldr	r3, [pc, #40]	; (1204 <_gpio_set_direction+0x114>)
    11dc:	4798      	blx	r3
	}
}
    11de:	46c0      	nop			; (mov r8, r8)
    11e0:	46bd      	mov	sp, r7
    11e2:	b002      	add	sp, #8
    11e4:	bd80      	pop	{r7, pc}
    11e6:	46c0      	nop			; (mov r8, r8)
    11e8:	00000e03 	.word	0x00000e03
    11ec:	41004400 	.word	0x41004400
    11f0:	000010c3 	.word	0x000010c3
    11f4:	40020000 	.word	0x40020000
    11f8:	c0020000 	.word	0xc0020000
    11fc:	00000dd7 	.word	0x00000dd7
    1200:	000121b0 	.word	0x000121b0
    1204:	00002b25 	.word	0x00002b25

00001208 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    1208:	b580      	push	{r7, lr}
    120a:	b082      	sub	sp, #8
    120c:	af00      	add	r7, sp, #0
    120e:	6039      	str	r1, [r7, #0]
    1210:	0011      	movs	r1, r2
    1212:	1dfb      	adds	r3, r7, #7
    1214:	1c02      	adds	r2, r0, #0
    1216:	701a      	strb	r2, [r3, #0]
    1218:	1dbb      	adds	r3, r7, #6
    121a:	1c0a      	adds	r2, r1, #0
    121c:	701a      	strb	r2, [r3, #0]
	if (level) {
    121e:	1dbb      	adds	r3, r7, #6
    1220:	781b      	ldrb	r3, [r3, #0]
    1222:	2b00      	cmp	r3, #0
    1224:	d008      	beq.n	1238 <_gpio_set_level+0x30>
		hri_port_set_OUT_reg(PORT_IOBUS, port, mask);
    1226:	683a      	ldr	r2, [r7, #0]
    1228:	1dfb      	adds	r3, r7, #7
    122a:	7819      	ldrb	r1, [r3, #0]
    122c:	23c0      	movs	r3, #192	; 0xc0
    122e:	05db      	lsls	r3, r3, #23
    1230:	0018      	movs	r0, r3
    1232:	4b07      	ldr	r3, [pc, #28]	; (1250 <_gpio_set_level+0x48>)
    1234:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
	}
}
    1236:	e007      	b.n	1248 <_gpio_set_level+0x40>
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
    1238:	683a      	ldr	r2, [r7, #0]
    123a:	1dfb      	adds	r3, r7, #7
    123c:	7819      	ldrb	r1, [r3, #0]
    123e:	23c0      	movs	r3, #192	; 0xc0
    1240:	05db      	lsls	r3, r3, #23
    1242:	0018      	movs	r0, r3
    1244:	4b03      	ldr	r3, [pc, #12]	; (1254 <_gpio_set_level+0x4c>)
    1246:	4798      	blx	r3
}
    1248:	46c0      	nop			; (mov r8, r8)
    124a:	46bd      	mov	sp, r7
    124c:	b002      	add	sp, #8
    124e:	bd80      	pop	{r7, pc}
    1250:	00000e2f 	.word	0x00000e2f
    1254:	00000e5b 	.word	0x00000e5b

00001258 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
    1258:	b590      	push	{r4, r7, lr}
    125a:	b083      	sub	sp, #12
    125c:	af00      	add	r7, sp, #0
    125e:	0004      	movs	r4, r0
    1260:	0008      	movs	r0, r1
    1262:	0011      	movs	r1, r2
    1264:	1dfb      	adds	r3, r7, #7
    1266:	1c22      	adds	r2, r4, #0
    1268:	701a      	strb	r2, [r3, #0]
    126a:	1dbb      	adds	r3, r7, #6
    126c:	1c02      	adds	r2, r0, #0
    126e:	701a      	strb	r2, [r3, #0]
    1270:	1d7b      	adds	r3, r7, #5
    1272:	1c0a      	adds	r2, r1, #0
    1274:	701a      	strb	r2, [r3, #0]
	switch (pull_mode) {
    1276:	1d7b      	adds	r3, r7, #5
    1278:	781b      	ldrb	r3, [r3, #0]
    127a:	2b01      	cmp	r3, #1
    127c:	d00c      	beq.n	1298 <_gpio_set_pin_pull_mode+0x40>
    127e:	2b02      	cmp	r3, #2
    1280:	d029      	beq.n	12d6 <_gpio_set_pin_pull_mode+0x7e>
    1282:	2b00      	cmp	r3, #0
    1284:	d146      	bne.n	1314 <_gpio_set_pin_pull_mode+0xbc>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    1286:	1dbb      	adds	r3, r7, #6
    1288:	781a      	ldrb	r2, [r3, #0]
    128a:	1dfb      	adds	r3, r7, #7
    128c:	781b      	ldrb	r3, [r3, #0]
    128e:	4827      	ldr	r0, [pc, #156]	; (132c <_gpio_set_pin_pull_mode+0xd4>)
    1290:	0019      	movs	r1, r3
    1292:	4b27      	ldr	r3, [pc, #156]	; (1330 <_gpio_set_pin_pull_mode+0xd8>)
    1294:	4798      	blx	r3
		break;
    1296:	e044      	b.n	1322 <_gpio_set_pin_pull_mode+0xca>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, 1U << pin);
    1298:	1dbb      	adds	r3, r7, #6
    129a:	781b      	ldrb	r3, [r3, #0]
    129c:	2201      	movs	r2, #1
    129e:	409a      	lsls	r2, r3
    12a0:	1dfb      	adds	r3, r7, #7
    12a2:	7819      	ldrb	r1, [r3, #0]
    12a4:	23c0      	movs	r3, #192	; 0xc0
    12a6:	05db      	lsls	r3, r3, #23
    12a8:	0018      	movs	r0, r3
    12aa:	4b22      	ldr	r3, [pc, #136]	; (1334 <_gpio_set_pin_pull_mode+0xdc>)
    12ac:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    12ae:	1dbb      	adds	r3, r7, #6
    12b0:	781a      	ldrb	r2, [r3, #0]
    12b2:	1dfb      	adds	r3, r7, #7
    12b4:	781b      	ldrb	r3, [r3, #0]
    12b6:	481d      	ldr	r0, [pc, #116]	; (132c <_gpio_set_pin_pull_mode+0xd4>)
    12b8:	0019      	movs	r1, r3
    12ba:	4b1f      	ldr	r3, [pc, #124]	; (1338 <_gpio_set_pin_pull_mode+0xe0>)
    12bc:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT_IOBUS, port, 1U << pin);
    12be:	1dbb      	adds	r3, r7, #6
    12c0:	781b      	ldrb	r3, [r3, #0]
    12c2:	2201      	movs	r2, #1
    12c4:	409a      	lsls	r2, r3
    12c6:	1dfb      	adds	r3, r7, #7
    12c8:	7819      	ldrb	r1, [r3, #0]
    12ca:	23c0      	movs	r3, #192	; 0xc0
    12cc:	05db      	lsls	r3, r3, #23
    12ce:	0018      	movs	r0, r3
    12d0:	4b1a      	ldr	r3, [pc, #104]	; (133c <_gpio_set_pin_pull_mode+0xe4>)
    12d2:	4798      	blx	r3
		break;
    12d4:	e025      	b.n	1322 <_gpio_set_pin_pull_mode+0xca>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, 1U << pin);
    12d6:	1dbb      	adds	r3, r7, #6
    12d8:	781b      	ldrb	r3, [r3, #0]
    12da:	2201      	movs	r2, #1
    12dc:	409a      	lsls	r2, r3
    12de:	1dfb      	adds	r3, r7, #7
    12e0:	7819      	ldrb	r1, [r3, #0]
    12e2:	23c0      	movs	r3, #192	; 0xc0
    12e4:	05db      	lsls	r3, r3, #23
    12e6:	0018      	movs	r0, r3
    12e8:	4b12      	ldr	r3, [pc, #72]	; (1334 <_gpio_set_pin_pull_mode+0xdc>)
    12ea:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    12ec:	1dbb      	adds	r3, r7, #6
    12ee:	781a      	ldrb	r2, [r3, #0]
    12f0:	1dfb      	adds	r3, r7, #7
    12f2:	781b      	ldrb	r3, [r3, #0]
    12f4:	480d      	ldr	r0, [pc, #52]	; (132c <_gpio_set_pin_pull_mode+0xd4>)
    12f6:	0019      	movs	r1, r3
    12f8:	4b0f      	ldr	r3, [pc, #60]	; (1338 <_gpio_set_pin_pull_mode+0xe0>)
    12fa:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT_IOBUS, port, 1U << pin);
    12fc:	1dbb      	adds	r3, r7, #6
    12fe:	781b      	ldrb	r3, [r3, #0]
    1300:	2201      	movs	r2, #1
    1302:	409a      	lsls	r2, r3
    1304:	1dfb      	adds	r3, r7, #7
    1306:	7819      	ldrb	r1, [r3, #0]
    1308:	23c0      	movs	r3, #192	; 0xc0
    130a:	05db      	lsls	r3, r3, #23
    130c:	0018      	movs	r0, r3
    130e:	4b0c      	ldr	r3, [pc, #48]	; (1340 <_gpio_set_pin_pull_mode+0xe8>)
    1310:	4798      	blx	r3
		break;
    1312:	e006      	b.n	1322 <_gpio_set_pin_pull_mode+0xca>

	default:
		ASSERT(false);
    1314:	4b0b      	ldr	r3, [pc, #44]	; (1344 <_gpio_set_pin_pull_mode+0xec>)
    1316:	2288      	movs	r2, #136	; 0x88
    1318:	0019      	movs	r1, r3
    131a:	2000      	movs	r0, #0
    131c:	4b0a      	ldr	r3, [pc, #40]	; (1348 <_gpio_set_pin_pull_mode+0xf0>)
    131e:	4798      	blx	r3
		break;
    1320:	46c0      	nop			; (mov r8, r8)
	}
}
    1322:	46c0      	nop			; (mov r8, r8)
    1324:	46bd      	mov	sp, r7
    1326:	b003      	add	sp, #12
    1328:	bd90      	pop	{r4, r7, pc}
    132a:	46c0      	nop			; (mov r8, r8)
    132c:	41004400 	.word	0x41004400
    1330:	0000106d 	.word	0x0000106d
    1334:	00000e03 	.word	0x00000e03
    1338:	00001017 	.word	0x00001017
    133c:	00000e2f 	.word	0x00000e2f
    1340:	00000e5b 	.word	0x00000e5b
    1344:	000121b0 	.word	0x000121b0
    1348:	00002b25 	.word	0x00002b25

0000134c <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    134c:	b590      	push	{r4, r7, lr}
    134e:	b085      	sub	sp, #20
    1350:	af00      	add	r7, sp, #0
    1352:	6078      	str	r0, [r7, #4]
    1354:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    1356:	687b      	ldr	r3, [r7, #4]
    1358:	095a      	lsrs	r2, r3, #5
    135a:	230f      	movs	r3, #15
    135c:	18fb      	adds	r3, r7, r3
    135e:	701a      	strb	r2, [r3, #0]
	uint8_t pin  = GPIO_PIN(gpio);
    1360:	687b      	ldr	r3, [r7, #4]
    1362:	b2da      	uxtb	r2, r3
    1364:	230e      	movs	r3, #14
    1366:	18fb      	adds	r3, r7, r3
    1368:	211f      	movs	r1, #31
    136a:	400a      	ands	r2, r1
    136c:	701a      	strb	r2, [r3, #0]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    136e:	683b      	ldr	r3, [r7, #0]
    1370:	3301      	adds	r3, #1
    1372:	d10a      	bne.n	138a <_gpio_set_pin_function+0x3e>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    1374:	230e      	movs	r3, #14
    1376:	18fb      	adds	r3, r7, r3
    1378:	781a      	ldrb	r2, [r3, #0]
    137a:	230f      	movs	r3, #15
    137c:	18fb      	adds	r3, r7, r3
    137e:	7819      	ldrb	r1, [r3, #0]
    1380:	481b      	ldr	r0, [pc, #108]	; (13f0 <_gpio_set_pin_function+0xa4>)
    1382:	2300      	movs	r3, #0
    1384:	4c1b      	ldr	r4, [pc, #108]	; (13f4 <_gpio_set_pin_function+0xa8>)
    1386:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    1388:	e02e      	b.n	13e8 <_gpio_set_pin_function+0x9c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    138a:	230e      	movs	r3, #14
    138c:	18fb      	adds	r3, r7, r3
    138e:	781a      	ldrb	r2, [r3, #0]
    1390:	230f      	movs	r3, #15
    1392:	18fb      	adds	r3, r7, r3
    1394:	7819      	ldrb	r1, [r3, #0]
    1396:	4816      	ldr	r0, [pc, #88]	; (13f0 <_gpio_set_pin_function+0xa4>)
    1398:	2301      	movs	r3, #1
    139a:	4c16      	ldr	r4, [pc, #88]	; (13f4 <_gpio_set_pin_function+0xa8>)
    139c:	47a0      	blx	r4
		if (pin & 1) {
    139e:	230e      	movs	r3, #14
    13a0:	18fb      	adds	r3, r7, r3
    13a2:	781b      	ldrb	r3, [r3, #0]
    13a4:	2201      	movs	r2, #1
    13a6:	4013      	ands	r3, r2
    13a8:	d00f      	beq.n	13ca <_gpio_set_pin_function+0x7e>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    13aa:	230e      	movs	r3, #14
    13ac:	18fb      	adds	r3, r7, r3
    13ae:	781b      	ldrb	r3, [r3, #0]
    13b0:	085b      	lsrs	r3, r3, #1
    13b2:	b2da      	uxtb	r2, r3
    13b4:	683b      	ldr	r3, [r7, #0]
    13b6:	b2d8      	uxtb	r0, r3
    13b8:	230f      	movs	r3, #15
    13ba:	18fb      	adds	r3, r7, r3
    13bc:	7819      	ldrb	r1, [r3, #0]
    13be:	4c0c      	ldr	r4, [pc, #48]	; (13f0 <_gpio_set_pin_function+0xa4>)
    13c0:	0003      	movs	r3, r0
    13c2:	0020      	movs	r0, r4
    13c4:	4c0c      	ldr	r4, [pc, #48]	; (13f8 <_gpio_set_pin_function+0xac>)
    13c6:	47a0      	blx	r4
}
    13c8:	e00e      	b.n	13e8 <_gpio_set_pin_function+0x9c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    13ca:	230e      	movs	r3, #14
    13cc:	18fb      	adds	r3, r7, r3
    13ce:	781b      	ldrb	r3, [r3, #0]
    13d0:	085b      	lsrs	r3, r3, #1
    13d2:	b2da      	uxtb	r2, r3
    13d4:	683b      	ldr	r3, [r7, #0]
    13d6:	b2d8      	uxtb	r0, r3
    13d8:	230f      	movs	r3, #15
    13da:	18fb      	adds	r3, r7, r3
    13dc:	7819      	ldrb	r1, [r3, #0]
    13de:	4c04      	ldr	r4, [pc, #16]	; (13f0 <_gpio_set_pin_function+0xa4>)
    13e0:	0003      	movs	r3, r0
    13e2:	0020      	movs	r0, r4
    13e4:	4c05      	ldr	r4, [pc, #20]	; (13fc <_gpio_set_pin_function+0xb0>)
    13e6:	47a0      	blx	r4
}
    13e8:	46c0      	nop			; (mov r8, r8)
    13ea:	46bd      	mov	sp, r7
    13ec:	b005      	add	sp, #20
    13ee:	bd90      	pop	{r4, r7, pc}
    13f0:	41004400 	.word	0x41004400
    13f4:	00000f95 	.word	0x00000f95
    13f8:	00000f0f 	.word	0x00000f0f
    13fc:	00000e87 	.word	0x00000e87

00001400 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    1400:	b580      	push	{r7, lr}
    1402:	b082      	sub	sp, #8
    1404:	af00      	add	r7, sp, #0
    1406:	0002      	movs	r2, r0
    1408:	1dfb      	adds	r3, r7, #7
    140a:	701a      	strb	r2, [r3, #0]
    140c:	1dbb      	adds	r3, r7, #6
    140e:	1c0a      	adds	r2, r1, #0
    1410:	701a      	strb	r2, [r3, #0]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    1412:	1dfb      	adds	r3, r7, #7
    1414:	781b      	ldrb	r3, [r3, #0]
    1416:	095b      	lsrs	r3, r3, #5
    1418:	b2d8      	uxtb	r0, r3
    141a:	1dfb      	adds	r3, r7, #7
    141c:	781b      	ldrb	r3, [r3, #0]
    141e:	221f      	movs	r2, #31
    1420:	4013      	ands	r3, r2
    1422:	b2d9      	uxtb	r1, r3
    1424:	1dbb      	adds	r3, r7, #6
    1426:	781b      	ldrb	r3, [r3, #0]
    1428:	001a      	movs	r2, r3
    142a:	4b03      	ldr	r3, [pc, #12]	; (1438 <gpio_set_pin_pull_mode+0x38>)
    142c:	4798      	blx	r3
}
    142e:	46c0      	nop			; (mov r8, r8)
    1430:	46bd      	mov	sp, r7
    1432:	b002      	add	sp, #8
    1434:	bd80      	pop	{r7, pc}
    1436:	46c0      	nop			; (mov r8, r8)
    1438:	00001259 	.word	0x00001259

0000143c <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    143c:	b580      	push	{r7, lr}
    143e:	b082      	sub	sp, #8
    1440:	af00      	add	r7, sp, #0
    1442:	6078      	str	r0, [r7, #4]
    1444:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    1446:	683a      	ldr	r2, [r7, #0]
    1448:	687b      	ldr	r3, [r7, #4]
    144a:	0011      	movs	r1, r2
    144c:	0018      	movs	r0, r3
    144e:	4b03      	ldr	r3, [pc, #12]	; (145c <gpio_set_pin_function+0x20>)
    1450:	4798      	blx	r3
}
    1452:	46c0      	nop			; (mov r8, r8)
    1454:	46bd      	mov	sp, r7
    1456:	b002      	add	sp, #8
    1458:	bd80      	pop	{r7, pc}
    145a:	46c0      	nop			; (mov r8, r8)
    145c:	0000134d 	.word	0x0000134d

00001460 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    1460:	b580      	push	{r7, lr}
    1462:	b082      	sub	sp, #8
    1464:	af00      	add	r7, sp, #0
    1466:	0002      	movs	r2, r0
    1468:	1dfb      	adds	r3, r7, #7
    146a:	701a      	strb	r2, [r3, #0]
    146c:	1dbb      	adds	r3, r7, #6
    146e:	1c0a      	adds	r2, r1, #0
    1470:	701a      	strb	r2, [r3, #0]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    1472:	1dfb      	adds	r3, r7, #7
    1474:	781b      	ldrb	r3, [r3, #0]
    1476:	095b      	lsrs	r3, r3, #5
    1478:	b2d8      	uxtb	r0, r3
    147a:	1dfb      	adds	r3, r7, #7
    147c:	781b      	ldrb	r3, [r3, #0]
    147e:	221f      	movs	r2, #31
    1480:	4013      	ands	r3, r2
    1482:	2201      	movs	r2, #1
    1484:	409a      	lsls	r2, r3
    1486:	0011      	movs	r1, r2
    1488:	1dbb      	adds	r3, r7, #6
    148a:	781b      	ldrb	r3, [r3, #0]
    148c:	001a      	movs	r2, r3
    148e:	4b03      	ldr	r3, [pc, #12]	; (149c <gpio_set_pin_direction+0x3c>)
    1490:	4798      	blx	r3
}
    1492:	46c0      	nop			; (mov r8, r8)
    1494:	46bd      	mov	sp, r7
    1496:	b002      	add	sp, #8
    1498:	bd80      	pop	{r7, pc}
    149a:	46c0      	nop			; (mov r8, r8)
    149c:	000010f1 	.word	0x000010f1

000014a0 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    14a0:	b580      	push	{r7, lr}
    14a2:	b082      	sub	sp, #8
    14a4:	af00      	add	r7, sp, #0
    14a6:	0002      	movs	r2, r0
    14a8:	1dfb      	adds	r3, r7, #7
    14aa:	701a      	strb	r2, [r3, #0]
    14ac:	1dbb      	adds	r3, r7, #6
    14ae:	1c0a      	adds	r2, r1, #0
    14b0:	701a      	strb	r2, [r3, #0]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    14b2:	1dfb      	adds	r3, r7, #7
    14b4:	781b      	ldrb	r3, [r3, #0]
    14b6:	095b      	lsrs	r3, r3, #5
    14b8:	b2d8      	uxtb	r0, r3
    14ba:	1dfb      	adds	r3, r7, #7
    14bc:	781b      	ldrb	r3, [r3, #0]
    14be:	221f      	movs	r2, #31
    14c0:	4013      	ands	r3, r2
    14c2:	2201      	movs	r2, #1
    14c4:	409a      	lsls	r2, r3
    14c6:	0011      	movs	r1, r2
    14c8:	1dbb      	adds	r3, r7, #6
    14ca:	781b      	ldrb	r3, [r3, #0]
    14cc:	001a      	movs	r2, r3
    14ce:	4b03      	ldr	r3, [pc, #12]	; (14dc <gpio_set_pin_level+0x3c>)
    14d0:	4798      	blx	r3
}
    14d2:	46c0      	nop			; (mov r8, r8)
    14d4:	46bd      	mov	sp, r7
    14d6:	b002      	add	sp, #8
    14d8:	bd80      	pop	{r7, pc}
    14da:	46c0      	nop			; (mov r8, r8)
    14dc:	00001209 	.word	0x00001209

000014e0 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    14e0:	b580      	push	{r7, lr}
    14e2:	af00      	add	r7, sp, #0
	_init_chip();
    14e4:	4b02      	ldr	r3, [pc, #8]	; (14f0 <init_mcu+0x10>)
    14e6:	4798      	blx	r3
}
    14e8:	46c0      	nop			; (mov r8, r8)
    14ea:	46bd      	mov	sp, r7
    14ec:	bd80      	pop	{r7, pc}
    14ee:	46c0      	nop			; (mov r8, r8)
    14f0:	00002d91 	.word	0x00002d91

000014f4 <_gclk_enable_channel>:
 *
 * \param[in] channel The channel to enable clock for
 * \param[in] source The clock source for the given channel
 */
static inline void _gclk_enable_channel(const uint8_t channel, const uint8_t source)
{
    14f4:	b580      	push	{r7, lr}
    14f6:	b082      	sub	sp, #8
    14f8:	af00      	add	r7, sp, #0
    14fa:	0002      	movs	r2, r0
    14fc:	1dfb      	adds	r3, r7, #7
    14fe:	701a      	strb	r2, [r3, #0]
    1500:	1dbb      	adds	r3, r7, #6
    1502:	1c0a      	adds	r2, r1, #0
    1504:	701a      	strb	r2, [r3, #0]

	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(channel) | GCLK_CLKCTRL_GEN(source) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
    1506:	1dfb      	adds	r3, r7, #7
    1508:	781b      	ldrb	r3, [r3, #0]
    150a:	b29b      	uxth	r3, r3
    150c:	223f      	movs	r2, #63	; 0x3f
    150e:	4013      	ands	r3, r2
    1510:	b29a      	uxth	r2, r3
    1512:	1dbb      	adds	r3, r7, #6
    1514:	781b      	ldrb	r3, [r3, #0]
    1516:	b29b      	uxth	r3, r3
    1518:	021b      	lsls	r3, r3, #8
    151a:	b299      	uxth	r1, r3
    151c:	23f0      	movs	r3, #240	; 0xf0
    151e:	011b      	lsls	r3, r3, #4
    1520:	400b      	ands	r3, r1
    1522:	b29b      	uxth	r3, r3
    1524:	4313      	orrs	r3, r2
    1526:	b29b      	uxth	r3, r3
	hri_gclk_write_CLKCTRL_reg(GCLK,
    1528:	2280      	movs	r2, #128	; 0x80
    152a:	01d2      	lsls	r2, r2, #7
    152c:	4313      	orrs	r3, r2
    152e:	b29b      	uxth	r3, r3
    1530:	4a04      	ldr	r2, [pc, #16]	; (1544 <_gclk_enable_channel+0x50>)
    1532:	0019      	movs	r1, r3
    1534:	0010      	movs	r0, r2
    1536:	4b04      	ldr	r3, [pc, #16]	; (1548 <_gclk_enable_channel+0x54>)
    1538:	4798      	blx	r3
}
    153a:	46c0      	nop			; (mov r8, r8)
    153c:	46bd      	mov	sp, r7
    153e:	b002      	add	sp, #8
    1540:	bd80      	pop	{r7, pc}
    1542:	46c0      	nop			; (mov r8, r8)
    1544:	40000c00 	.word	0x40000c00
    1548:	00000db9 	.word	0x00000db9

0000154c <_pm_get_ahb_index>:
 * \param[in] module Module to get index for
 *
 * \return index of the given module if succeeds, ERR_INVALID_ARG otherwise
 */
static inline int32_t _pm_get_ahb_index(const void *const module)
{
    154c:	b580      	push	{r7, lr}
    154e:	b082      	sub	sp, #8
    1550:	af00      	add	r7, sp, #0
    1552:	6078      	str	r0, [r7, #4]
	if ((uint32_t)module == (uint32_t)PM_BUS_APBA) {
    1554:	687b      	ldr	r3, [r7, #4]
    1556:	2b01      	cmp	r3, #1
    1558:	d101      	bne.n	155e <_pm_get_ahb_index+0x12>
		return 0;
    155a:	2300      	movs	r3, #0
    155c:	e023      	b.n	15a6 <_pm_get_ahb_index+0x5a>
	} else if ((uint32_t)module == (uint32_t)PM_BUS_APBB) {
    155e:	687b      	ldr	r3, [r7, #4]
    1560:	2b02      	cmp	r3, #2
    1562:	d101      	bne.n	1568 <_pm_get_ahb_index+0x1c>
		return 1;
    1564:	2301      	movs	r3, #1
    1566:	e01e      	b.n	15a6 <_pm_get_ahb_index+0x5a>
	} else if ((uint32_t)module == (uint32_t)PM_BUS_APBC) {
    1568:	687b      	ldr	r3, [r7, #4]
    156a:	2b03      	cmp	r3, #3
    156c:	d101      	bne.n	1572 <_pm_get_ahb_index+0x26>
		return 2;
    156e:	2302      	movs	r3, #2
    1570:	e019      	b.n	15a6 <_pm_get_ahb_index+0x5a>
	}
	if ((uint32_t)module == (uint32_t)DSU) {
    1572:	687b      	ldr	r3, [r7, #4]
    1574:	4a0e      	ldr	r2, [pc, #56]	; (15b0 <_pm_get_ahb_index+0x64>)
    1576:	4293      	cmp	r3, r2
    1578:	d101      	bne.n	157e <_pm_get_ahb_index+0x32>
		return 3;
    157a:	2303      	movs	r3, #3
    157c:	e013      	b.n	15a6 <_pm_get_ahb_index+0x5a>
	} else if ((uint32_t)module == (uint32_t)NVMCTRL) {
    157e:	687b      	ldr	r3, [r7, #4]
    1580:	4a0c      	ldr	r2, [pc, #48]	; (15b4 <_pm_get_ahb_index+0x68>)
    1582:	4293      	cmp	r3, r2
    1584:	d101      	bne.n	158a <_pm_get_ahb_index+0x3e>
		return 4;
    1586:	2304      	movs	r3, #4
    1588:	e00d      	b.n	15a6 <_pm_get_ahb_index+0x5a>
	} else if ((uint32_t)module == (uint32_t)DMAC) {
    158a:	687b      	ldr	r3, [r7, #4]
    158c:	4a0a      	ldr	r2, [pc, #40]	; (15b8 <_pm_get_ahb_index+0x6c>)
    158e:	4293      	cmp	r3, r2
    1590:	d101      	bne.n	1596 <_pm_get_ahb_index+0x4a>
		return 5;
    1592:	2305      	movs	r3, #5
    1594:	e007      	b.n	15a6 <_pm_get_ahb_index+0x5a>
	}
#ifdef USB
	else if ((uint32_t)module == (uint32_t)USB) {
    1596:	687b      	ldr	r3, [r7, #4]
    1598:	4a08      	ldr	r2, [pc, #32]	; (15bc <_pm_get_ahb_index+0x70>)
    159a:	4293      	cmp	r3, r2
    159c:	d101      	bne.n	15a2 <_pm_get_ahb_index+0x56>
		return 6;
    159e:	2306      	movs	r3, #6
    15a0:	e001      	b.n	15a6 <_pm_get_ahb_index+0x5a>
	}
#endif

	return ERR_INVALID_ARG;
    15a2:	230d      	movs	r3, #13
    15a4:	425b      	negs	r3, r3
}
    15a6:	0018      	movs	r0, r3
    15a8:	46bd      	mov	sp, r7
    15aa:	b002      	add	sp, #8
    15ac:	bd80      	pop	{r7, pc}
    15ae:	46c0      	nop			; (mov r8, r8)
    15b0:	41002000 	.word	0x41002000
    15b4:	41004000 	.word	0x41004000
    15b8:	41004800 	.word	0x41004800
    15bc:	41005000 	.word	0x41005000

000015c0 <_pm_get_apbb_index>:
 * \param[in] module Module to get index for
 *
 * \return index of the given module if succeeds, ERR_INVALID_ARG otherwise
 */
static inline int32_t _pm_get_apbb_index(const void *const module)
{
    15c0:	b580      	push	{r7, lr}
    15c2:	b082      	sub	sp, #8
    15c4:	af00      	add	r7, sp, #0
    15c6:	6078      	str	r0, [r7, #4]
	if ((uint32_t)module == (uint32_t)PAC1) {
    15c8:	687a      	ldr	r2, [r7, #4]
    15ca:	2382      	movs	r3, #130	; 0x82
    15cc:	05db      	lsls	r3, r3, #23
    15ce:	429a      	cmp	r2, r3
    15d0:	d101      	bne.n	15d6 <_pm_get_apbb_index+0x16>
		return 0;
    15d2:	2300      	movs	r3, #0
    15d4:	e01f      	b.n	1616 <_pm_get_apbb_index+0x56>
	} else if ((uint32_t)module == (uint32_t)DSU) {
    15d6:	687b      	ldr	r3, [r7, #4]
    15d8:	4a11      	ldr	r2, [pc, #68]	; (1620 <_pm_get_apbb_index+0x60>)
    15da:	4293      	cmp	r3, r2
    15dc:	d101      	bne.n	15e2 <_pm_get_apbb_index+0x22>
		return 1;
    15de:	2301      	movs	r3, #1
    15e0:	e019      	b.n	1616 <_pm_get_apbb_index+0x56>
	} else if ((uint32_t)module == (uint32_t)NVMCTRL) {
    15e2:	687b      	ldr	r3, [r7, #4]
    15e4:	4a0f      	ldr	r2, [pc, #60]	; (1624 <_pm_get_apbb_index+0x64>)
    15e6:	4293      	cmp	r3, r2
    15e8:	d101      	bne.n	15ee <_pm_get_apbb_index+0x2e>
		return 2;
    15ea:	2302      	movs	r3, #2
    15ec:	e013      	b.n	1616 <_pm_get_apbb_index+0x56>
	}
	if ((uint32_t)module == (uint32_t)PORT) {
    15ee:	687b      	ldr	r3, [r7, #4]
    15f0:	4a0d      	ldr	r2, [pc, #52]	; (1628 <_pm_get_apbb_index+0x68>)
    15f2:	4293      	cmp	r3, r2
    15f4:	d101      	bne.n	15fa <_pm_get_apbb_index+0x3a>
		return 3;
    15f6:	2303      	movs	r3, #3
    15f8:	e00d      	b.n	1616 <_pm_get_apbb_index+0x56>
	} else if ((uint32_t)module == (uint32_t)DMAC) {
    15fa:	687b      	ldr	r3, [r7, #4]
    15fc:	4a0b      	ldr	r2, [pc, #44]	; (162c <_pm_get_apbb_index+0x6c>)
    15fe:	4293      	cmp	r3, r2
    1600:	d101      	bne.n	1606 <_pm_get_apbb_index+0x46>
		return 4;
    1602:	2304      	movs	r3, #4
    1604:	e007      	b.n	1616 <_pm_get_apbb_index+0x56>
	}
#ifdef USB
	else if ((uint32_t)module == (uint32_t)USB) {
    1606:	687b      	ldr	r3, [r7, #4]
    1608:	4a09      	ldr	r2, [pc, #36]	; (1630 <_pm_get_apbb_index+0x70>)
    160a:	4293      	cmp	r3, r2
    160c:	d101      	bne.n	1612 <_pm_get_apbb_index+0x52>
		return 5;
    160e:	2305      	movs	r3, #5
    1610:	e001      	b.n	1616 <_pm_get_apbb_index+0x56>
	}
#endif

	return ERR_INVALID_ARG;
    1612:	230d      	movs	r3, #13
    1614:	425b      	negs	r3, r3
}
    1616:	0018      	movs	r0, r3
    1618:	46bd      	mov	sp, r7
    161a:	b002      	add	sp, #8
    161c:	bd80      	pop	{r7, pc}
    161e:	46c0      	nop			; (mov r8, r8)
    1620:	41002000 	.word	0x41002000
    1624:	41004000 	.word	0x41004000
    1628:	41004400 	.word	0x41004400
    162c:	41004800 	.word	0x41004800
    1630:	41005000 	.word	0x41005000

00001634 <_pm_enable_bus_clock>:
 *
 * \param[in] bus A bus to enable clock on
 * \param[in] module A hardware module to enable clock for
 */
static inline void _pm_enable_bus_clock(const enum _pm_bus bus, const void *const module)
{
    1634:	b580      	push	{r7, lr}
    1636:	b084      	sub	sp, #16
    1638:	af00      	add	r7, sp, #0
    163a:	0002      	movs	r2, r0
    163c:	6039      	str	r1, [r7, #0]
    163e:	1dfb      	adds	r3, r7, #7
    1640:	701a      	strb	r2, [r3, #0]
	uint32_t peripheral = ((uint32_t)module & 0x0000ff00) >> 10;
    1642:	683b      	ldr	r3, [r7, #0]
    1644:	0a9b      	lsrs	r3, r3, #10
    1646:	223f      	movs	r2, #63	; 0x3f
    1648:	4013      	ands	r3, r2
    164a:	60fb      	str	r3, [r7, #12]

	switch (bus) {
    164c:	1dfb      	adds	r3, r7, #7
    164e:	781b      	ldrb	r3, [r3, #0]
    1650:	2b01      	cmp	r3, #1
    1652:	d01e      	beq.n	1692 <_pm_enable_bus_clock+0x5e>
    1654:	dc02      	bgt.n	165c <_pm_enable_bus_clock+0x28>
    1656:	2b00      	cmp	r3, #0
    1658:	d005      	beq.n	1666 <_pm_enable_bus_clock+0x32>
    165a:	e044      	b.n	16e6 <_pm_enable_bus_clock+0xb2>
    165c:	2b02      	cmp	r3, #2
    165e:	d022      	beq.n	16a6 <_pm_enable_bus_clock+0x72>
    1660:	2b03      	cmp	r3, #3
    1662:	d036      	beq.n	16d2 <_pm_enable_bus_clock+0x9e>
    1664:	e03f      	b.n	16e6 <_pm_enable_bus_clock+0xb2>
	case PM_BUS_AHB:
		if (_pm_get_ahb_index(module) >= 0) {
    1666:	683b      	ldr	r3, [r7, #0]
    1668:	0018      	movs	r0, r3
    166a:	4b26      	ldr	r3, [pc, #152]	; (1704 <_pm_enable_bus_clock+0xd0>)
    166c:	4798      	blx	r3
    166e:	1e03      	subs	r3, r0, #0
    1670:	db40      	blt.n	16f4 <_pm_enable_bus_clock+0xc0>
			peripheral = (uint32_t)_pm_get_ahb_index(module);
    1672:	683b      	ldr	r3, [r7, #0]
    1674:	0018      	movs	r0, r3
    1676:	4b23      	ldr	r3, [pc, #140]	; (1704 <_pm_enable_bus_clock+0xd0>)
    1678:	4798      	blx	r3
    167a:	0003      	movs	r3, r0
    167c:	60fb      	str	r3, [r7, #12]
			PM->AHBMASK.reg |= 1 << peripheral;
    167e:	4b22      	ldr	r3, [pc, #136]	; (1708 <_pm_enable_bus_clock+0xd4>)
    1680:	4a21      	ldr	r2, [pc, #132]	; (1708 <_pm_enable_bus_clock+0xd4>)
    1682:	6952      	ldr	r2, [r2, #20]
    1684:	2001      	movs	r0, #1
    1686:	68f9      	ldr	r1, [r7, #12]
    1688:	4088      	lsls	r0, r1
    168a:	0001      	movs	r1, r0
    168c:	430a      	orrs	r2, r1
    168e:	615a      	str	r2, [r3, #20]
		}
		break;
    1690:	e030      	b.n	16f4 <_pm_enable_bus_clock+0xc0>
	case PM_BUS_APBA:
		PM->APBAMASK.reg |= 1 << peripheral;
    1692:	4b1d      	ldr	r3, [pc, #116]	; (1708 <_pm_enable_bus_clock+0xd4>)
    1694:	4a1c      	ldr	r2, [pc, #112]	; (1708 <_pm_enable_bus_clock+0xd4>)
    1696:	6992      	ldr	r2, [r2, #24]
    1698:	2001      	movs	r0, #1
    169a:	68f9      	ldr	r1, [r7, #12]
    169c:	4088      	lsls	r0, r1
    169e:	0001      	movs	r1, r0
    16a0:	430a      	orrs	r2, r1
    16a2:	619a      	str	r2, [r3, #24]
		break;
    16a4:	e029      	b.n	16fa <_pm_enable_bus_clock+0xc6>
	case PM_BUS_APBB:
		if (_pm_get_apbb_index(module) >= 0) {
    16a6:	683b      	ldr	r3, [r7, #0]
    16a8:	0018      	movs	r0, r3
    16aa:	4b18      	ldr	r3, [pc, #96]	; (170c <_pm_enable_bus_clock+0xd8>)
    16ac:	4798      	blx	r3
    16ae:	1e03      	subs	r3, r0, #0
    16b0:	db22      	blt.n	16f8 <_pm_enable_bus_clock+0xc4>
			peripheral = (uint32_t)_pm_get_apbb_index(module);
    16b2:	683b      	ldr	r3, [r7, #0]
    16b4:	0018      	movs	r0, r3
    16b6:	4b15      	ldr	r3, [pc, #84]	; (170c <_pm_enable_bus_clock+0xd8>)
    16b8:	4798      	blx	r3
    16ba:	0003      	movs	r3, r0
    16bc:	60fb      	str	r3, [r7, #12]
			PM->APBBMASK.reg |= 1 << peripheral;
    16be:	4b12      	ldr	r3, [pc, #72]	; (1708 <_pm_enable_bus_clock+0xd4>)
    16c0:	4a11      	ldr	r2, [pc, #68]	; (1708 <_pm_enable_bus_clock+0xd4>)
    16c2:	69d2      	ldr	r2, [r2, #28]
    16c4:	2001      	movs	r0, #1
    16c6:	68f9      	ldr	r1, [r7, #12]
    16c8:	4088      	lsls	r0, r1
    16ca:	0001      	movs	r1, r0
    16cc:	430a      	orrs	r2, r1
    16ce:	61da      	str	r2, [r3, #28]
		}
		break;
    16d0:	e012      	b.n	16f8 <_pm_enable_bus_clock+0xc4>
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
    16d2:	4b0d      	ldr	r3, [pc, #52]	; (1708 <_pm_enable_bus_clock+0xd4>)
    16d4:	4a0c      	ldr	r2, [pc, #48]	; (1708 <_pm_enable_bus_clock+0xd4>)
    16d6:	6a12      	ldr	r2, [r2, #32]
    16d8:	2001      	movs	r0, #1
    16da:	68f9      	ldr	r1, [r7, #12]
    16dc:	4088      	lsls	r0, r1
    16de:	0001      	movs	r1, r0
    16e0:	430a      	orrs	r2, r1
    16e2:	621a      	str	r2, [r3, #32]
		break;
    16e4:	e009      	b.n	16fa <_pm_enable_bus_clock+0xc6>
	default:
		ASSERT(false);
    16e6:	4b0a      	ldr	r3, [pc, #40]	; (1710 <_pm_enable_bus_clock+0xdc>)
    16e8:	229b      	movs	r2, #155	; 0x9b
    16ea:	0019      	movs	r1, r3
    16ec:	2000      	movs	r0, #0
    16ee:	4b09      	ldr	r3, [pc, #36]	; (1714 <_pm_enable_bus_clock+0xe0>)
    16f0:	4798      	blx	r3
		break;
    16f2:	e002      	b.n	16fa <_pm_enable_bus_clock+0xc6>
		break;
    16f4:	46c0      	nop			; (mov r8, r8)
    16f6:	e000      	b.n	16fa <_pm_enable_bus_clock+0xc6>
		break;
    16f8:	46c0      	nop			; (mov r8, r8)
	}
}
    16fa:	46c0      	nop			; (mov r8, r8)
    16fc:	46bd      	mov	sp, r7
    16fe:	b004      	add	sp, #16
    1700:	bd80      	pop	{r7, pc}
    1702:	46c0      	nop			; (mov r8, r8)
    1704:	0000154d 	.word	0x0000154d
    1708:	40000400 	.word	0x40000400
    170c:	000015c1 	.word	0x000015c1
    1710:	000121cc 	.word	0x000121cc
    1714:	00002b25 	.word	0x00002b25

00001718 <SPI_ADF_PORT_init>:
struct spi_m_sync_descriptor SPI_LMX;

struct usart_sync_descriptor TARGET_IO;

void SPI_ADF_PORT_init(void)
{
    1718:	b580      	push	{r7, lr}
    171a:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PA04,
    171c:	2100      	movs	r1, #0
    171e:	2004      	movs	r0, #4
    1720:	4b13      	ldr	r3, [pc, #76]	; (1770 <SPI_ADF_PORT_init+0x58>)
    1722:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PA04, GPIO_DIRECTION_OUT);
    1724:	2102      	movs	r1, #2
    1726:	2004      	movs	r0, #4
    1728:	4b12      	ldr	r3, [pc, #72]	; (1774 <SPI_ADF_PORT_init+0x5c>)
    172a:	4798      	blx	r3

	gpio_set_pin_function(PA04, PINMUX_PA04D_SERCOM0_PAD0);
    172c:	4b12      	ldr	r3, [pc, #72]	; (1778 <SPI_ADF_PORT_init+0x60>)
    172e:	0019      	movs	r1, r3
    1730:	2004      	movs	r0, #4
    1732:	4b12      	ldr	r3, [pc, #72]	; (177c <SPI_ADF_PORT_init+0x64>)
    1734:	4798      	blx	r3

	gpio_set_pin_level(PA05,
    1736:	2100      	movs	r1, #0
    1738:	2005      	movs	r0, #5
    173a:	4b0d      	ldr	r3, [pc, #52]	; (1770 <SPI_ADF_PORT_init+0x58>)
    173c:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PA05, GPIO_DIRECTION_OUT);
    173e:	2102      	movs	r1, #2
    1740:	2005      	movs	r0, #5
    1742:	4b0c      	ldr	r3, [pc, #48]	; (1774 <SPI_ADF_PORT_init+0x5c>)
    1744:	4798      	blx	r3

	gpio_set_pin_function(PA05, PINMUX_PA05D_SERCOM0_PAD1);
    1746:	4b0e      	ldr	r3, [pc, #56]	; (1780 <SPI_ADF_PORT_init+0x68>)
    1748:	0019      	movs	r1, r3
    174a:	2005      	movs	r0, #5
    174c:	4b0b      	ldr	r3, [pc, #44]	; (177c <SPI_ADF_PORT_init+0x64>)
    174e:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA06, GPIO_DIRECTION_IN);
    1750:	2101      	movs	r1, #1
    1752:	2006      	movs	r0, #6
    1754:	4b07      	ldr	r3, [pc, #28]	; (1774 <SPI_ADF_PORT_init+0x5c>)
    1756:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA06,
    1758:	2100      	movs	r1, #0
    175a:	2006      	movs	r0, #6
    175c:	4b09      	ldr	r3, [pc, #36]	; (1784 <SPI_ADF_PORT_init+0x6c>)
    175e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA06, PINMUX_PA06D_SERCOM0_PAD2);
    1760:	4b09      	ldr	r3, [pc, #36]	; (1788 <SPI_ADF_PORT_init+0x70>)
    1762:	0019      	movs	r1, r3
    1764:	2006      	movs	r0, #6
    1766:	4b05      	ldr	r3, [pc, #20]	; (177c <SPI_ADF_PORT_init+0x64>)
    1768:	4798      	blx	r3
}
    176a:	46c0      	nop			; (mov r8, r8)
    176c:	46bd      	mov	sp, r7
    176e:	bd80      	pop	{r7, pc}
    1770:	000014a1 	.word	0x000014a1
    1774:	00001461 	.word	0x00001461
    1778:	00040003 	.word	0x00040003
    177c:	0000143d 	.word	0x0000143d
    1780:	00050003 	.word	0x00050003
    1784:	00001401 	.word	0x00001401
    1788:	00060003 	.word	0x00060003

0000178c <SPI_ADF_CLOCK_init>:

void SPI_ADF_CLOCK_init(void)
{
    178c:	b580      	push	{r7, lr}
    178e:	af00      	add	r7, sp, #0
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM0);
    1790:	4b05      	ldr	r3, [pc, #20]	; (17a8 <SPI_ADF_CLOCK_init+0x1c>)
    1792:	0019      	movs	r1, r3
    1794:	2003      	movs	r0, #3
    1796:	4b05      	ldr	r3, [pc, #20]	; (17ac <SPI_ADF_CLOCK_init+0x20>)
    1798:	4798      	blx	r3
	_gclk_enable_channel(SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC);
    179a:	2100      	movs	r1, #0
    179c:	2014      	movs	r0, #20
    179e:	4b04      	ldr	r3, [pc, #16]	; (17b0 <SPI_ADF_CLOCK_init+0x24>)
    17a0:	4798      	blx	r3
}
    17a2:	46c0      	nop			; (mov r8, r8)
    17a4:	46bd      	mov	sp, r7
    17a6:	bd80      	pop	{r7, pc}
    17a8:	42000800 	.word	0x42000800
    17ac:	00001635 	.word	0x00001635
    17b0:	000014f5 	.word	0x000014f5

000017b4 <SPI_ADF_init>:

void SPI_ADF_init(void)
{
    17b4:	b580      	push	{r7, lr}
    17b6:	af00      	add	r7, sp, #0
	SPI_ADF_CLOCK_init();
    17b8:	4b06      	ldr	r3, [pc, #24]	; (17d4 <SPI_ADF_init+0x20>)
    17ba:	4798      	blx	r3
	spi_m_sync_init(&SPI_ADF, SERCOM0);
    17bc:	4a06      	ldr	r2, [pc, #24]	; (17d8 <SPI_ADF_init+0x24>)
    17be:	4b07      	ldr	r3, [pc, #28]	; (17dc <SPI_ADF_init+0x28>)
    17c0:	0011      	movs	r1, r2
    17c2:	0018      	movs	r0, r3
    17c4:	4b06      	ldr	r3, [pc, #24]	; (17e0 <SPI_ADF_init+0x2c>)
    17c6:	4798      	blx	r3
	SPI_ADF_PORT_init();
    17c8:	4b06      	ldr	r3, [pc, #24]	; (17e4 <SPI_ADF_init+0x30>)
    17ca:	4798      	blx	r3
}
    17cc:	46c0      	nop			; (mov r8, r8)
    17ce:	46bd      	mov	sp, r7
    17d0:	bd80      	pop	{r7, pc}
    17d2:	46c0      	nop			; (mov r8, r8)
    17d4:	0000178d 	.word	0x0000178d
    17d8:	42000800 	.word	0x42000800
    17dc:	2000127c 	.word	0x2000127c
    17e0:	00001c21 	.word	0x00001c21
    17e4:	00001719 	.word	0x00001719

000017e8 <SPI_LMX_PORT_init>:

void SPI_LMX_PORT_init(void)
{
    17e8:	b580      	push	{r7, lr}
    17ea:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PA16,
    17ec:	2100      	movs	r1, #0
    17ee:	2010      	movs	r0, #16
    17f0:	4b13      	ldr	r3, [pc, #76]	; (1840 <SPI_LMX_PORT_init+0x58>)
    17f2:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PA16, GPIO_DIRECTION_OUT);
    17f4:	2102      	movs	r1, #2
    17f6:	2010      	movs	r0, #16
    17f8:	4b12      	ldr	r3, [pc, #72]	; (1844 <SPI_LMX_PORT_init+0x5c>)
    17fa:	4798      	blx	r3

	gpio_set_pin_function(PA16, PINMUX_PA16C_SERCOM1_PAD0);
    17fc:	4b12      	ldr	r3, [pc, #72]	; (1848 <SPI_LMX_PORT_init+0x60>)
    17fe:	0019      	movs	r1, r3
    1800:	2010      	movs	r0, #16
    1802:	4b12      	ldr	r3, [pc, #72]	; (184c <SPI_LMX_PORT_init+0x64>)
    1804:	4798      	blx	r3

	gpio_set_pin_level(PA17,
    1806:	2100      	movs	r1, #0
    1808:	2011      	movs	r0, #17
    180a:	4b0d      	ldr	r3, [pc, #52]	; (1840 <SPI_LMX_PORT_init+0x58>)
    180c:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PA17, GPIO_DIRECTION_OUT);
    180e:	2102      	movs	r1, #2
    1810:	2011      	movs	r0, #17
    1812:	4b0c      	ldr	r3, [pc, #48]	; (1844 <SPI_LMX_PORT_init+0x5c>)
    1814:	4798      	blx	r3

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
    1816:	4b0e      	ldr	r3, [pc, #56]	; (1850 <SPI_LMX_PORT_init+0x68>)
    1818:	0019      	movs	r1, r3
    181a:	2011      	movs	r0, #17
    181c:	4b0b      	ldr	r3, [pc, #44]	; (184c <SPI_LMX_PORT_init+0x64>)
    181e:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA18, GPIO_DIRECTION_IN);
    1820:	2101      	movs	r1, #1
    1822:	2012      	movs	r0, #18
    1824:	4b07      	ldr	r3, [pc, #28]	; (1844 <SPI_LMX_PORT_init+0x5c>)
    1826:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA18,
    1828:	2100      	movs	r1, #0
    182a:	2012      	movs	r0, #18
    182c:	4b09      	ldr	r3, [pc, #36]	; (1854 <SPI_LMX_PORT_init+0x6c>)
    182e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA18, PINMUX_PA18C_SERCOM1_PAD2);
    1830:	4b09      	ldr	r3, [pc, #36]	; (1858 <SPI_LMX_PORT_init+0x70>)
    1832:	0019      	movs	r1, r3
    1834:	2012      	movs	r0, #18
    1836:	4b05      	ldr	r3, [pc, #20]	; (184c <SPI_LMX_PORT_init+0x64>)
    1838:	4798      	blx	r3
}
    183a:	46c0      	nop			; (mov r8, r8)
    183c:	46bd      	mov	sp, r7
    183e:	bd80      	pop	{r7, pc}
    1840:	000014a1 	.word	0x000014a1
    1844:	00001461 	.word	0x00001461
    1848:	00100002 	.word	0x00100002
    184c:	0000143d 	.word	0x0000143d
    1850:	00110002 	.word	0x00110002
    1854:	00001401 	.word	0x00001401
    1858:	00120002 	.word	0x00120002

0000185c <SPI_LMX_CLOCK_init>:

void SPI_LMX_CLOCK_init(void)
{
    185c:	b580      	push	{r7, lr}
    185e:	af00      	add	r7, sp, #0
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM1);
    1860:	4b05      	ldr	r3, [pc, #20]	; (1878 <SPI_LMX_CLOCK_init+0x1c>)
    1862:	0019      	movs	r1, r3
    1864:	2003      	movs	r0, #3
    1866:	4b05      	ldr	r3, [pc, #20]	; (187c <SPI_LMX_CLOCK_init+0x20>)
    1868:	4798      	blx	r3
	_gclk_enable_channel(SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC);
    186a:	2100      	movs	r1, #0
    186c:	2015      	movs	r0, #21
    186e:	4b04      	ldr	r3, [pc, #16]	; (1880 <SPI_LMX_CLOCK_init+0x24>)
    1870:	4798      	blx	r3
}
    1872:	46c0      	nop			; (mov r8, r8)
    1874:	46bd      	mov	sp, r7
    1876:	bd80      	pop	{r7, pc}
    1878:	42000c00 	.word	0x42000c00
    187c:	00001635 	.word	0x00001635
    1880:	000014f5 	.word	0x000014f5

00001884 <SPI_LMX_init>:

void SPI_LMX_init(void)
{
    1884:	b580      	push	{r7, lr}
    1886:	af00      	add	r7, sp, #0
	SPI_LMX_CLOCK_init();
    1888:	4b06      	ldr	r3, [pc, #24]	; (18a4 <SPI_LMX_init+0x20>)
    188a:	4798      	blx	r3
	spi_m_sync_init(&SPI_LMX, SERCOM1);
    188c:	4a06      	ldr	r2, [pc, #24]	; (18a8 <SPI_LMX_init+0x24>)
    188e:	4b07      	ldr	r3, [pc, #28]	; (18ac <SPI_LMX_init+0x28>)
    1890:	0011      	movs	r1, r2
    1892:	0018      	movs	r0, r3
    1894:	4b06      	ldr	r3, [pc, #24]	; (18b0 <SPI_LMX_init+0x2c>)
    1896:	4798      	blx	r3
	SPI_LMX_PORT_init();
    1898:	4b06      	ldr	r3, [pc, #24]	; (18b4 <SPI_LMX_init+0x30>)
    189a:	4798      	blx	r3
}
    189c:	46c0      	nop			; (mov r8, r8)
    189e:	46bd      	mov	sp, r7
    18a0:	bd80      	pop	{r7, pc}
    18a2:	46c0      	nop			; (mov r8, r8)
    18a4:	0000185d 	.word	0x0000185d
    18a8:	42000c00 	.word	0x42000c00
    18ac:	20001258 	.word	0x20001258
    18b0:	00001c21 	.word	0x00001c21
    18b4:	000017e9 	.word	0x000017e9

000018b8 <TARGET_IO_PORT_init>:

void TARGET_IO_PORT_init(void)
{
    18b8:	b580      	push	{r7, lr}
    18ba:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PA22, PINMUX_PA22C_SERCOM3_PAD0);
    18bc:	4b06      	ldr	r3, [pc, #24]	; (18d8 <TARGET_IO_PORT_init+0x20>)
    18be:	0019      	movs	r1, r3
    18c0:	2016      	movs	r0, #22
    18c2:	4b06      	ldr	r3, [pc, #24]	; (18dc <TARGET_IO_PORT_init+0x24>)
    18c4:	4798      	blx	r3

	gpio_set_pin_function(PA23, PINMUX_PA23C_SERCOM3_PAD1);
    18c6:	4b06      	ldr	r3, [pc, #24]	; (18e0 <TARGET_IO_PORT_init+0x28>)
    18c8:	0019      	movs	r1, r3
    18ca:	2017      	movs	r0, #23
    18cc:	4b03      	ldr	r3, [pc, #12]	; (18dc <TARGET_IO_PORT_init+0x24>)
    18ce:	4798      	blx	r3
}
    18d0:	46c0      	nop			; (mov r8, r8)
    18d2:	46bd      	mov	sp, r7
    18d4:	bd80      	pop	{r7, pc}
    18d6:	46c0      	nop			; (mov r8, r8)
    18d8:	00160002 	.word	0x00160002
    18dc:	0000143d 	.word	0x0000143d
    18e0:	00170002 	.word	0x00170002

000018e4 <TARGET_IO_CLOCK_init>:

void TARGET_IO_CLOCK_init(void)
{
    18e4:	b580      	push	{r7, lr}
    18e6:	af00      	add	r7, sp, #0
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM3);
    18e8:	4b05      	ldr	r3, [pc, #20]	; (1900 <TARGET_IO_CLOCK_init+0x1c>)
    18ea:	0019      	movs	r1, r3
    18ec:	2003      	movs	r0, #3
    18ee:	4b05      	ldr	r3, [pc, #20]	; (1904 <TARGET_IO_CLOCK_init+0x20>)
    18f0:	4798      	blx	r3
	_gclk_enable_channel(SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC);
    18f2:	2100      	movs	r1, #0
    18f4:	2017      	movs	r0, #23
    18f6:	4b04      	ldr	r3, [pc, #16]	; (1908 <TARGET_IO_CLOCK_init+0x24>)
    18f8:	4798      	blx	r3
}
    18fa:	46c0      	nop			; (mov r8, r8)
    18fc:	46bd      	mov	sp, r7
    18fe:	bd80      	pop	{r7, pc}
    1900:	42001400 	.word	0x42001400
    1904:	00001635 	.word	0x00001635
    1908:	000014f5 	.word	0x000014f5

0000190c <TARGET_IO_init>:

void TARGET_IO_init(void)
{
    190c:	b580      	push	{r7, lr}
    190e:	af00      	add	r7, sp, #0
	TARGET_IO_CLOCK_init();
    1910:	4b06      	ldr	r3, [pc, #24]	; (192c <TARGET_IO_init+0x20>)
    1912:	4798      	blx	r3
	usart_sync_init(&TARGET_IO, SERCOM3, (void *)NULL);
    1914:	4906      	ldr	r1, [pc, #24]	; (1930 <TARGET_IO_init+0x24>)
    1916:	4b07      	ldr	r3, [pc, #28]	; (1934 <TARGET_IO_init+0x28>)
    1918:	2200      	movs	r2, #0
    191a:	0018      	movs	r0, r3
    191c:	4b06      	ldr	r3, [pc, #24]	; (1938 <TARGET_IO_init+0x2c>)
    191e:	4798      	blx	r3
	TARGET_IO_PORT_init();
    1920:	4b06      	ldr	r3, [pc, #24]	; (193c <TARGET_IO_init+0x30>)
    1922:	4798      	blx	r3
}
    1924:	46c0      	nop			; (mov r8, r8)
    1926:	46bd      	mov	sp, r7
    1928:	bd80      	pop	{r7, pc}
    192a:	46c0      	nop			; (mov r8, r8)
    192c:	000018e5 	.word	0x000018e5
    1930:	42001400 	.word	0x42001400
    1934:	20001270 	.word	0x20001270
    1938:	00001e69 	.word	0x00001e69
    193c:	000018b9 	.word	0x000018b9

00001940 <delay_driver_init>:

void delay_driver_init(void)
{
    1940:	b580      	push	{r7, lr}
    1942:	af00      	add	r7, sp, #0
	delay_init(SysTick);
    1944:	4b03      	ldr	r3, [pc, #12]	; (1954 <delay_driver_init+0x14>)
    1946:	0018      	movs	r0, r3
    1948:	4b03      	ldr	r3, [pc, #12]	; (1958 <delay_driver_init+0x18>)
    194a:	4798      	blx	r3
}
    194c:	46c0      	nop			; (mov r8, r8)
    194e:	46bd      	mov	sp, r7
    1950:	bd80      	pop	{r7, pc}
    1952:	46c0      	nop			; (mov r8, r8)
    1954:	e000e010 	.word	0xe000e010
    1958:	00001b19 	.word	0x00001b19

0000195c <USB_DEVICE_INSTANCE_PORT_init>:

void USB_DEVICE_INSTANCE_PORT_init(void)
{
    195c:	b580      	push	{r7, lr}
    195e:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    1960:	2102      	movs	r1, #2
    1962:	2018      	movs	r0, #24
    1964:	4b11      	ldr	r3, [pc, #68]	; (19ac <USB_DEVICE_INSTANCE_PORT_init+0x50>)
    1966:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    1968:	2100      	movs	r1, #0
    196a:	2018      	movs	r0, #24
    196c:	4b10      	ldr	r3, [pc, #64]	; (19b0 <USB_DEVICE_INSTANCE_PORT_init+0x54>)
    196e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    1970:	2100      	movs	r1, #0
    1972:	2018      	movs	r0, #24
    1974:	4b0f      	ldr	r3, [pc, #60]	; (19b4 <USB_DEVICE_INSTANCE_PORT_init+0x58>)
    1976:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    1978:	4b0f      	ldr	r3, [pc, #60]	; (19b8 <USB_DEVICE_INSTANCE_PORT_init+0x5c>)
    197a:	0019      	movs	r1, r3
    197c:	2018      	movs	r0, #24
    197e:	4b0f      	ldr	r3, [pc, #60]	; (19bc <USB_DEVICE_INSTANCE_PORT_init+0x60>)
    1980:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_F"> F
	                      // <GPIO_PIN_FUNCTION_G"> G
	                      // <GPIO_PIN_FUNCTION_H"> H
	                      PINMUX_PA24G_USB_DM);

	gpio_set_pin_direction(PA25,
    1982:	2102      	movs	r1, #2
    1984:	2019      	movs	r0, #25
    1986:	4b09      	ldr	r3, [pc, #36]	; (19ac <USB_DEVICE_INSTANCE_PORT_init+0x50>)
    1988:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    198a:	2100      	movs	r1, #0
    198c:	2019      	movs	r0, #25
    198e:	4b08      	ldr	r3, [pc, #32]	; (19b0 <USB_DEVICE_INSTANCE_PORT_init+0x54>)
    1990:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    1992:	2100      	movs	r1, #0
    1994:	2019      	movs	r0, #25
    1996:	4b07      	ldr	r3, [pc, #28]	; (19b4 <USB_DEVICE_INSTANCE_PORT_init+0x58>)
    1998:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    199a:	4b09      	ldr	r3, [pc, #36]	; (19c0 <USB_DEVICE_INSTANCE_PORT_init+0x64>)
    199c:	0019      	movs	r1, r3
    199e:	2019      	movs	r0, #25
    19a0:	4b06      	ldr	r3, [pc, #24]	; (19bc <USB_DEVICE_INSTANCE_PORT_init+0x60>)
    19a2:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_E"> E
	                      // <GPIO_PIN_FUNCTION_F"> F
	                      // <GPIO_PIN_FUNCTION_G"> G
	                      // <GPIO_PIN_FUNCTION_H"> H
	                      PINMUX_PA25G_USB_DP);
}
    19a4:	46c0      	nop			; (mov r8, r8)
    19a6:	46bd      	mov	sp, r7
    19a8:	bd80      	pop	{r7, pc}
    19aa:	46c0      	nop			; (mov r8, r8)
    19ac:	00001461 	.word	0x00001461
    19b0:	000014a1 	.word	0x000014a1
    19b4:	00001401 	.word	0x00001401
    19b8:	00180006 	.word	0x00180006
    19bc:	0000143d 	.word	0x0000143d
    19c0:	00190006 	.word	0x00190006

000019c4 <USB_DEVICE_INSTANCE_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void USB_DEVICE_INSTANCE_CLOCK_init(void)
{
    19c4:	b580      	push	{r7, lr}
    19c6:	af00      	add	r7, sp, #0

	_pm_enable_bus_clock(PM_BUS_APBB, USB);
    19c8:	4b08      	ldr	r3, [pc, #32]	; (19ec <USB_DEVICE_INSTANCE_CLOCK_init+0x28>)
    19ca:	0019      	movs	r1, r3
    19cc:	2002      	movs	r0, #2
    19ce:	4b08      	ldr	r3, [pc, #32]	; (19f0 <USB_DEVICE_INSTANCE_CLOCK_init+0x2c>)
    19d0:	4798      	blx	r3
	_pm_enable_bus_clock(PM_BUS_AHB, USB);
    19d2:	4b06      	ldr	r3, [pc, #24]	; (19ec <USB_DEVICE_INSTANCE_CLOCK_init+0x28>)
    19d4:	0019      	movs	r1, r3
    19d6:	2000      	movs	r0, #0
    19d8:	4b05      	ldr	r3, [pc, #20]	; (19f0 <USB_DEVICE_INSTANCE_CLOCK_init+0x2c>)
    19da:	4798      	blx	r3
	_gclk_enable_channel(USB_GCLK_ID, CONF_GCLK_USB_SRC);
    19dc:	2104      	movs	r1, #4
    19de:	2006      	movs	r0, #6
    19e0:	4b04      	ldr	r3, [pc, #16]	; (19f4 <USB_DEVICE_INSTANCE_CLOCK_init+0x30>)
    19e2:	4798      	blx	r3
}
    19e4:	46c0      	nop			; (mov r8, r8)
    19e6:	46bd      	mov	sp, r7
    19e8:	bd80      	pop	{r7, pc}
    19ea:	46c0      	nop			; (mov r8, r8)
    19ec:	41005000 	.word	0x41005000
    19f0:	00001635 	.word	0x00001635
    19f4:	000014f5 	.word	0x000014f5

000019f8 <USB_DEVICE_INSTANCE_init>:

void USB_DEVICE_INSTANCE_init(void)
{
    19f8:	b580      	push	{r7, lr}
    19fa:	af00      	add	r7, sp, #0
	USB_DEVICE_INSTANCE_CLOCK_init();
    19fc:	4b04      	ldr	r3, [pc, #16]	; (1a10 <USB_DEVICE_INSTANCE_init+0x18>)
    19fe:	4798      	blx	r3
	usb_d_init();
    1a00:	4b04      	ldr	r3, [pc, #16]	; (1a14 <USB_DEVICE_INSTANCE_init+0x1c>)
    1a02:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
    1a04:	4b04      	ldr	r3, [pc, #16]	; (1a18 <USB_DEVICE_INSTANCE_init+0x20>)
    1a06:	4798      	blx	r3
}
    1a08:	46c0      	nop			; (mov r8, r8)
    1a0a:	46bd      	mov	sp, r7
    1a0c:	bd80      	pop	{r7, pc}
    1a0e:	46c0      	nop			; (mov r8, r8)
    1a10:	000019c5 	.word	0x000019c5
    1a14:	000024ed 	.word	0x000024ed
    1a18:	0000195d 	.word	0x0000195d

00001a1c <system_init>:

void system_init(void)
{
    1a1c:	b580      	push	{r7, lr}
    1a1e:	af00      	add	r7, sp, #0
	init_mcu();
    1a20:	4b23      	ldr	r3, [pc, #140]	; (1ab0 <system_init+0x94>)
    1a22:	4798      	blx	r3

	// GPIO on PA07

	gpio_set_pin_level(CS_ADF,
    1a24:	2100      	movs	r1, #0
    1a26:	2007      	movs	r0, #7
    1a28:	4b22      	ldr	r3, [pc, #136]	; (1ab4 <system_init+0x98>)
    1a2a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CS_ADF, GPIO_DIRECTION_OUT);
    1a2c:	2102      	movs	r1, #2
    1a2e:	2007      	movs	r0, #7
    1a30:	4b21      	ldr	r3, [pc, #132]	; (1ab8 <system_init+0x9c>)
    1a32:	4798      	blx	r3

	gpio_set_pin_function(CS_ADF, GPIO_PIN_FUNCTION_OFF);
    1a34:	2301      	movs	r3, #1
    1a36:	425b      	negs	r3, r3
    1a38:	0019      	movs	r1, r3
    1a3a:	2007      	movs	r0, #7
    1a3c:	4b1f      	ldr	r3, [pc, #124]	; (1abc <system_init+0xa0>)
    1a3e:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_LMX,
    1a40:	2101      	movs	r1, #1
    1a42:	2013      	movs	r0, #19
    1a44:	4b1b      	ldr	r3, [pc, #108]	; (1ab4 <system_init+0x98>)
    1a46:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_LMX, GPIO_DIRECTION_OUT);
    1a48:	2102      	movs	r1, #2
    1a4a:	2013      	movs	r0, #19
    1a4c:	4b1a      	ldr	r3, [pc, #104]	; (1ab8 <system_init+0x9c>)
    1a4e:	4798      	blx	r3

	gpio_set_pin_function(CS_LMX, GPIO_PIN_FUNCTION_OFF);
    1a50:	2301      	movs	r3, #1
    1a52:	425b      	negs	r3, r3
    1a54:	0019      	movs	r1, r3
    1a56:	2013      	movs	r0, #19
    1a58:	4b18      	ldr	r3, [pc, #96]	; (1abc <system_init+0xa0>)
    1a5a:	4798      	blx	r3

	// GPIO on PA30

	gpio_set_pin_level(PA30,
    1a5c:	2101      	movs	r1, #1
    1a5e:	201e      	movs	r0, #30
    1a60:	4b14      	ldr	r3, [pc, #80]	; (1ab4 <system_init+0x98>)
    1a62:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(PA30, GPIO_DIRECTION_OUT);
    1a64:	2102      	movs	r1, #2
    1a66:	201e      	movs	r0, #30
    1a68:	4b13      	ldr	r3, [pc, #76]	; (1ab8 <system_init+0x9c>)
    1a6a:	4798      	blx	r3

	gpio_set_pin_function(PA30, GPIO_PIN_FUNCTION_OFF);
    1a6c:	2301      	movs	r3, #1
    1a6e:	425b      	negs	r3, r3
    1a70:	0019      	movs	r1, r3
    1a72:	201e      	movs	r0, #30
    1a74:	4b11      	ldr	r3, [pc, #68]	; (1abc <system_init+0xa0>)
    1a76:	4798      	blx	r3

	// GPIO on PB30

	gpio_set_pin_level(LED0,
    1a78:	2101      	movs	r1, #1
    1a7a:	203e      	movs	r0, #62	; 0x3e
    1a7c:	4b0d      	ldr	r3, [pc, #52]	; (1ab4 <system_init+0x98>)
    1a7e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    1a80:	2102      	movs	r1, #2
    1a82:	203e      	movs	r0, #62	; 0x3e
    1a84:	4b0c      	ldr	r3, [pc, #48]	; (1ab8 <system_init+0x9c>)
    1a86:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    1a88:	2301      	movs	r3, #1
    1a8a:	425b      	negs	r3, r3
    1a8c:	0019      	movs	r1, r3
    1a8e:	203e      	movs	r0, #62	; 0x3e
    1a90:	4b0a      	ldr	r3, [pc, #40]	; (1abc <system_init+0xa0>)
    1a92:	4798      	blx	r3

	SPI_ADF_init();
    1a94:	4b0a      	ldr	r3, [pc, #40]	; (1ac0 <system_init+0xa4>)
    1a96:	4798      	blx	r3

	SPI_LMX_init();
    1a98:	4b0a      	ldr	r3, [pc, #40]	; (1ac4 <system_init+0xa8>)
    1a9a:	4798      	blx	r3

	TARGET_IO_init();
    1a9c:	4b0a      	ldr	r3, [pc, #40]	; (1ac8 <system_init+0xac>)
    1a9e:	4798      	blx	r3

	delay_driver_init();
    1aa0:	4b0a      	ldr	r3, [pc, #40]	; (1acc <system_init+0xb0>)
    1aa2:	4798      	blx	r3

	USB_DEVICE_INSTANCE_init();
    1aa4:	4b0a      	ldr	r3, [pc, #40]	; (1ad0 <system_init+0xb4>)
    1aa6:	4798      	blx	r3
}
    1aa8:	46c0      	nop			; (mov r8, r8)
    1aaa:	46bd      	mov	sp, r7
    1aac:	bd80      	pop	{r7, pc}
    1aae:	46c0      	nop			; (mov r8, r8)
    1ab0:	000014e1 	.word	0x000014e1
    1ab4:	000014a1 	.word	0x000014a1
    1ab8:	00001461 	.word	0x00001461
    1abc:	0000143d 	.word	0x0000143d
    1ac0:	000017b5 	.word	0x000017b5
    1ac4:	00001885 	.word	0x00001885
    1ac8:	0000190d 	.word	0x0000190d
    1acc:	00001941 	.word	0x00001941
    1ad0:	000019f9 	.word	0x000019f9

00001ad4 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    1ad4:	b580      	push	{r7, lr}
    1ad6:	b084      	sub	sp, #16
    1ad8:	af00      	add	r7, sp, #0
    1ada:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1adc:	f3ef 8310 	mrs	r3, PRIMASK
    1ae0:	60fb      	str	r3, [r7, #12]
  return(result);
    1ae2:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    1ae4:	687b      	ldr	r3, [r7, #4]
    1ae6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    1ae8:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    1aea:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    1aee:	46c0      	nop			; (mov r8, r8)
    1af0:	46bd      	mov	sp, r7
    1af2:	b004      	add	sp, #16
    1af4:	bd80      	pop	{r7, pc}

00001af6 <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    1af6:	b580      	push	{r7, lr}
    1af8:	b084      	sub	sp, #16
    1afa:	af00      	add	r7, sp, #0
    1afc:	6078      	str	r0, [r7, #4]
    1afe:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    1b02:	687b      	ldr	r3, [r7, #4]
    1b04:	681b      	ldr	r3, [r3, #0]
    1b06:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    1b08:	68fb      	ldr	r3, [r7, #12]
    1b0a:	f383 8810 	msr	PRIMASK, r3
}
    1b0e:	46c0      	nop			; (mov r8, r8)
    1b10:	46bd      	mov	sp, r7
    1b12:	b004      	add	sp, #16
    1b14:	bd80      	pop	{r7, pc}
	...

00001b18 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    1b18:	b580      	push	{r7, lr}
    1b1a:	b082      	sub	sp, #8
    1b1c:	af00      	add	r7, sp, #0
    1b1e:	6078      	str	r0, [r7, #4]
	_delay_init(hardware = hw);
    1b20:	4b05      	ldr	r3, [pc, #20]	; (1b38 <delay_init+0x20>)
    1b22:	687a      	ldr	r2, [r7, #4]
    1b24:	601a      	str	r2, [r3, #0]
    1b26:	4b04      	ldr	r3, [pc, #16]	; (1b38 <delay_init+0x20>)
    1b28:	681b      	ldr	r3, [r3, #0]
    1b2a:	0018      	movs	r0, r3
    1b2c:	4b03      	ldr	r3, [pc, #12]	; (1b3c <delay_init+0x24>)
    1b2e:	4798      	blx	r3
}
    1b30:	46c0      	nop			; (mov r8, r8)
    1b32:	46bd      	mov	sp, r7
    1b34:	b002      	add	sp, #8
    1b36:	bd80      	pop	{r7, pc}
    1b38:	20000bec 	.word	0x20000bec
    1b3c:	00004529 	.word	0x00004529

00001b40 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    1b40:	b590      	push	{r4, r7, lr}
    1b42:	b083      	sub	sp, #12
    1b44:	af00      	add	r7, sp, #0
    1b46:	0002      	movs	r2, r0
    1b48:	1dbb      	adds	r3, r7, #6
    1b4a:	801a      	strh	r2, [r3, #0]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    1b4c:	4b07      	ldr	r3, [pc, #28]	; (1b6c <delay_ms+0x2c>)
    1b4e:	681c      	ldr	r4, [r3, #0]
    1b50:	1dbb      	adds	r3, r7, #6
    1b52:	881b      	ldrh	r3, [r3, #0]
    1b54:	0018      	movs	r0, r3
    1b56:	4b06      	ldr	r3, [pc, #24]	; (1b70 <delay_ms+0x30>)
    1b58:	4798      	blx	r3
    1b5a:	0003      	movs	r3, r0
    1b5c:	0019      	movs	r1, r3
    1b5e:	0020      	movs	r0, r4
    1b60:	4b04      	ldr	r3, [pc, #16]	; (1b74 <delay_ms+0x34>)
    1b62:	4798      	blx	r3
}
    1b64:	46c0      	nop			; (mov r8, r8)
    1b66:	46bd      	mov	sp, r7
    1b68:	b003      	add	sp, #12
    1b6a:	bd90      	pop	{r4, r7, pc}
    1b6c:	20000bec 	.word	0x20000bec
    1b70:	00002d41 	.word	0x00002d41
    1b74:	00004545 	.word	0x00004545

00001b78 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    1b78:	b580      	push	{r7, lr}
    1b7a:	b084      	sub	sp, #16
    1b7c:	af00      	add	r7, sp, #0
    1b7e:	60f8      	str	r0, [r7, #12]
    1b80:	60b9      	str	r1, [r7, #8]
    1b82:	1dbb      	adds	r3, r7, #6
    1b84:	801a      	strh	r2, [r3, #0]
	ASSERT(io_descr && buf);
    1b86:	68fb      	ldr	r3, [r7, #12]
    1b88:	2b00      	cmp	r3, #0
    1b8a:	d004      	beq.n	1b96 <io_write+0x1e>
    1b8c:	68bb      	ldr	r3, [r7, #8]
    1b8e:	2b00      	cmp	r3, #0
    1b90:	d001      	beq.n	1b96 <io_write+0x1e>
    1b92:	2301      	movs	r3, #1
    1b94:	e000      	b.n	1b98 <io_write+0x20>
    1b96:	2300      	movs	r3, #0
    1b98:	1c1a      	adds	r2, r3, #0
    1b9a:	2301      	movs	r3, #1
    1b9c:	4013      	ands	r3, r2
    1b9e:	b2db      	uxtb	r3, r3
    1ba0:	4908      	ldr	r1, [pc, #32]	; (1bc4 <io_write+0x4c>)
    1ba2:	2234      	movs	r2, #52	; 0x34
    1ba4:	0018      	movs	r0, r3
    1ba6:	4b08      	ldr	r3, [pc, #32]	; (1bc8 <io_write+0x50>)
    1ba8:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    1baa:	68fb      	ldr	r3, [r7, #12]
    1bac:	681b      	ldr	r3, [r3, #0]
    1bae:	1dba      	adds	r2, r7, #6
    1bb0:	8812      	ldrh	r2, [r2, #0]
    1bb2:	68b9      	ldr	r1, [r7, #8]
    1bb4:	68f8      	ldr	r0, [r7, #12]
    1bb6:	4798      	blx	r3
    1bb8:	0003      	movs	r3, r0
}
    1bba:	0018      	movs	r0, r3
    1bbc:	46bd      	mov	sp, r7
    1bbe:	b004      	add	sp, #16
    1bc0:	bd80      	pop	{r7, pc}
    1bc2:	46c0      	nop			; (mov r8, r8)
    1bc4:	000121e4 	.word	0x000121e4
    1bc8:	00002b25 	.word	0x00002b25

00001bcc <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    1bcc:	b580      	push	{r7, lr}
    1bce:	b084      	sub	sp, #16
    1bd0:	af00      	add	r7, sp, #0
    1bd2:	60f8      	str	r0, [r7, #12]
    1bd4:	60b9      	str	r1, [r7, #8]
    1bd6:	1dbb      	adds	r3, r7, #6
    1bd8:	801a      	strh	r2, [r3, #0]
	ASSERT(io_descr && buf);
    1bda:	68fb      	ldr	r3, [r7, #12]
    1bdc:	2b00      	cmp	r3, #0
    1bde:	d004      	beq.n	1bea <io_read+0x1e>
    1be0:	68bb      	ldr	r3, [r7, #8]
    1be2:	2b00      	cmp	r3, #0
    1be4:	d001      	beq.n	1bea <io_read+0x1e>
    1be6:	2301      	movs	r3, #1
    1be8:	e000      	b.n	1bec <io_read+0x20>
    1bea:	2300      	movs	r3, #0
    1bec:	1c1a      	adds	r2, r3, #0
    1bee:	2301      	movs	r3, #1
    1bf0:	4013      	ands	r3, r2
    1bf2:	b2db      	uxtb	r3, r3
    1bf4:	4908      	ldr	r1, [pc, #32]	; (1c18 <io_read+0x4c>)
    1bf6:	223d      	movs	r2, #61	; 0x3d
    1bf8:	0018      	movs	r0, r3
    1bfa:	4b08      	ldr	r3, [pc, #32]	; (1c1c <io_read+0x50>)
    1bfc:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    1bfe:	68fb      	ldr	r3, [r7, #12]
    1c00:	685b      	ldr	r3, [r3, #4]
    1c02:	1dba      	adds	r2, r7, #6
    1c04:	8812      	ldrh	r2, [r2, #0]
    1c06:	68b9      	ldr	r1, [r7, #8]
    1c08:	68f8      	ldr	r0, [r7, #12]
    1c0a:	4798      	blx	r3
    1c0c:	0003      	movs	r3, r0
}
    1c0e:	0018      	movs	r0, r3
    1c10:	46bd      	mov	sp, r7
    1c12:	b004      	add	sp, #16
    1c14:	bd80      	pop	{r7, pc}
    1c16:	46c0      	nop			; (mov r8, r8)
    1c18:	000121e4 	.word	0x000121e4
    1c1c:	00002b25 	.word	0x00002b25

00001c20 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    1c20:	b580      	push	{r7, lr}
    1c22:	b084      	sub	sp, #16
    1c24:	af00      	add	r7, sp, #0
    1c26:	6078      	str	r0, [r7, #4]
    1c28:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    1c2a:	2300      	movs	r3, #0
    1c2c:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    1c2e:	687b      	ldr	r3, [r7, #4]
    1c30:	2b00      	cmp	r3, #0
    1c32:	d004      	beq.n	1c3e <spi_m_sync_init+0x1e>
    1c34:	683b      	ldr	r3, [r7, #0]
    1c36:	2b00      	cmp	r3, #0
    1c38:	d001      	beq.n	1c3e <spi_m_sync_init+0x1e>
    1c3a:	2301      	movs	r3, #1
    1c3c:	e000      	b.n	1c40 <spi_m_sync_init+0x20>
    1c3e:	2300      	movs	r3, #0
    1c40:	1c1a      	adds	r2, r3, #0
    1c42:	2301      	movs	r3, #1
    1c44:	4013      	ands	r3, r2
    1c46:	b2db      	uxtb	r3, r3
    1c48:	4911      	ldr	r1, [pc, #68]	; (1c90 <spi_m_sync_init+0x70>)
    1c4a:	2240      	movs	r2, #64	; 0x40
    1c4c:	0018      	movs	r0, r3
    1c4e:	4b11      	ldr	r3, [pc, #68]	; (1c94 <spi_m_sync_init+0x74>)
    1c50:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    1c52:	687b      	ldr	r3, [r7, #4]
    1c54:	683a      	ldr	r2, [r7, #0]
    1c56:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    1c58:	687b      	ldr	r3, [r7, #4]
    1c5a:	3304      	adds	r3, #4
    1c5c:	683a      	ldr	r2, [r7, #0]
    1c5e:	0011      	movs	r1, r2
    1c60:	0018      	movs	r0, r3
    1c62:	4b0d      	ldr	r3, [pc, #52]	; (1c98 <spi_m_sync_init+0x78>)
    1c64:	4798      	blx	r3
    1c66:	0003      	movs	r3, r0
    1c68:	60fb      	str	r3, [r7, #12]

	if (rc < 0) {
    1c6a:	68fb      	ldr	r3, [r7, #12]
    1c6c:	2b00      	cmp	r3, #0
    1c6e:	da01      	bge.n	1c74 <spi_m_sync_init+0x54>
		return rc;
    1c70:	68fb      	ldr	r3, [r7, #12]
    1c72:	e009      	b.n	1c88 <spi_m_sync_init+0x68>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    1c74:	687b      	ldr	r3, [r7, #4]
    1c76:	4a09      	ldr	r2, [pc, #36]	; (1c9c <spi_m_sync_init+0x7c>)
    1c78:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    1c7a:	687b      	ldr	r3, [r7, #4]
    1c7c:	4a08      	ldr	r2, [pc, #32]	; (1ca0 <spi_m_sync_init+0x80>)
    1c7e:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    1c80:	687b      	ldr	r3, [r7, #4]
    1c82:	4a08      	ldr	r2, [pc, #32]	; (1ca4 <spi_m_sync_init+0x84>)
    1c84:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    1c86:	2300      	movs	r3, #0
}
    1c88:	0018      	movs	r0, r3
    1c8a:	46bd      	mov	sp, r7
    1c8c:	b004      	add	sp, #16
    1c8e:	bd80      	pop	{r7, pc}
    1c90:	000121f8 	.word	0x000121f8
    1c94:	00002b25 	.word	0x00002b25
    1c98:	00003ae9 	.word	0x00003ae9
    1c9c:	ffff8000 	.word	0xffff8000
    1ca0:	00001ce1 	.word	0x00001ce1
    1ca4:	00001d45 	.word	0x00001d45

00001ca8 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
    1ca8:	b580      	push	{r7, lr}
    1caa:	b082      	sub	sp, #8
    1cac:	af00      	add	r7, sp, #0
    1cae:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    1cb0:	687b      	ldr	r3, [r7, #4]
    1cb2:	1e5a      	subs	r2, r3, #1
    1cb4:	4193      	sbcs	r3, r2
    1cb6:	b2db      	uxtb	r3, r3
    1cb8:	4906      	ldr	r1, [pc, #24]	; (1cd4 <spi_m_sync_enable+0x2c>)
    1cba:	2257      	movs	r2, #87	; 0x57
    1cbc:	0018      	movs	r0, r3
    1cbe:	4b06      	ldr	r3, [pc, #24]	; (1cd8 <spi_m_sync_enable+0x30>)
    1cc0:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
    1cc2:	687b      	ldr	r3, [r7, #4]
    1cc4:	3304      	adds	r3, #4
    1cc6:	0018      	movs	r0, r3
    1cc8:	4b04      	ldr	r3, [pc, #16]	; (1cdc <spi_m_sync_enable+0x34>)
    1cca:	4798      	blx	r3
}
    1ccc:	46c0      	nop			; (mov r8, r8)
    1cce:	46bd      	mov	sp, r7
    1cd0:	b002      	add	sp, #8
    1cd2:	bd80      	pop	{r7, pc}
    1cd4:	000121f8 	.word	0x000121f8
    1cd8:	00002b25 	.word	0x00002b25
    1cdc:	00003c4d 	.word	0x00003c4d

00001ce0 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    1ce0:	b580      	push	{r7, lr}
    1ce2:	b088      	sub	sp, #32
    1ce4:	af00      	add	r7, sp, #0
    1ce6:	60f8      	str	r0, [r7, #12]
    1ce8:	60b9      	str	r1, [r7, #8]
    1cea:	1dbb      	adds	r3, r7, #6
    1cec:	801a      	strh	r2, [r3, #0]
	ASSERT(io);
    1cee:	68fb      	ldr	r3, [r7, #12]
    1cf0:	1e5a      	subs	r2, r3, #1
    1cf2:	4193      	sbcs	r3, r2
    1cf4:	b2db      	uxtb	r3, r3
    1cf6:	4910      	ldr	r1, [pc, #64]	; (1d38 <_spi_m_sync_io_read+0x58>)
    1cf8:	2287      	movs	r2, #135	; 0x87
    1cfa:	0018      	movs	r0, r3
    1cfc:	4b0f      	ldr	r3, [pc, #60]	; (1d3c <_spi_m_sync_io_read+0x5c>)
    1cfe:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    1d00:	68fb      	ldr	r3, [r7, #12]
    1d02:	3b0c      	subs	r3, #12
    1d04:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    1d06:	2310      	movs	r3, #16
    1d08:	18fb      	adds	r3, r7, r3
    1d0a:	68ba      	ldr	r2, [r7, #8]
    1d0c:	605a      	str	r2, [r3, #4]
	xfer.txbuf = 0;
    1d0e:	2310      	movs	r3, #16
    1d10:	18fb      	adds	r3, r7, r3
    1d12:	2200      	movs	r2, #0
    1d14:	601a      	str	r2, [r3, #0]
	xfer.size  = length;
    1d16:	1dbb      	adds	r3, r7, #6
    1d18:	881a      	ldrh	r2, [r3, #0]
    1d1a:	2310      	movs	r3, #16
    1d1c:	18fb      	adds	r3, r7, r3
    1d1e:	609a      	str	r2, [r3, #8]

	return spi_m_sync_transfer(spi, &xfer);
    1d20:	2310      	movs	r3, #16
    1d22:	18fa      	adds	r2, r7, r3
    1d24:	69fb      	ldr	r3, [r7, #28]
    1d26:	0011      	movs	r1, r2
    1d28:	0018      	movs	r0, r3
    1d2a:	4b05      	ldr	r3, [pc, #20]	; (1d40 <_spi_m_sync_io_read+0x60>)
    1d2c:	4798      	blx	r3
    1d2e:	0003      	movs	r3, r0
}
    1d30:	0018      	movs	r0, r3
    1d32:	46bd      	mov	sp, r7
    1d34:	b008      	add	sp, #32
    1d36:	bd80      	pop	{r7, pc}
    1d38:	000121f8 	.word	0x000121f8
    1d3c:	00002b25 	.word	0x00002b25
    1d40:	00001da9 	.word	0x00001da9

00001d44 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    1d44:	b580      	push	{r7, lr}
    1d46:	b088      	sub	sp, #32
    1d48:	af00      	add	r7, sp, #0
    1d4a:	60f8      	str	r0, [r7, #12]
    1d4c:	60b9      	str	r1, [r7, #8]
    1d4e:	1dbb      	adds	r3, r7, #6
    1d50:	801a      	strh	r2, [r3, #0]
	ASSERT(io);
    1d52:	68fb      	ldr	r3, [r7, #12]
    1d54:	1e5a      	subs	r2, r3, #1
    1d56:	4193      	sbcs	r3, r2
    1d58:	b2db      	uxtb	r3, r3
    1d5a:	4910      	ldr	r1, [pc, #64]	; (1d9c <_spi_m_sync_io_write+0x58>)
    1d5c:	22a3      	movs	r2, #163	; 0xa3
    1d5e:	0018      	movs	r0, r3
    1d60:	4b0f      	ldr	r3, [pc, #60]	; (1da0 <_spi_m_sync_io_write+0x5c>)
    1d62:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    1d64:	68fb      	ldr	r3, [r7, #12]
    1d66:	3b0c      	subs	r3, #12
    1d68:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    1d6a:	2310      	movs	r3, #16
    1d6c:	18fb      	adds	r3, r7, r3
    1d6e:	2200      	movs	r2, #0
    1d70:	605a      	str	r2, [r3, #4]
	xfer.txbuf = (uint8_t *)buf;
    1d72:	2310      	movs	r3, #16
    1d74:	18fb      	adds	r3, r7, r3
    1d76:	68ba      	ldr	r2, [r7, #8]
    1d78:	601a      	str	r2, [r3, #0]
	xfer.size  = length;
    1d7a:	1dbb      	adds	r3, r7, #6
    1d7c:	881a      	ldrh	r2, [r3, #0]
    1d7e:	2310      	movs	r3, #16
    1d80:	18fb      	adds	r3, r7, r3
    1d82:	609a      	str	r2, [r3, #8]

	return spi_m_sync_transfer(spi, &xfer);
    1d84:	2310      	movs	r3, #16
    1d86:	18fa      	adds	r2, r7, r3
    1d88:	69fb      	ldr	r3, [r7, #28]
    1d8a:	0011      	movs	r1, r2
    1d8c:	0018      	movs	r0, r3
    1d8e:	4b05      	ldr	r3, [pc, #20]	; (1da4 <_spi_m_sync_io_write+0x60>)
    1d90:	4798      	blx	r3
    1d92:	0003      	movs	r3, r0
}
    1d94:	0018      	movs	r0, r3
    1d96:	46bd      	mov	sp, r7
    1d98:	b008      	add	sp, #32
    1d9a:	bd80      	pop	{r7, pc}
    1d9c:	000121f8 	.word	0x000121f8
    1da0:	00002b25 	.word	0x00002b25
    1da4:	00001da9 	.word	0x00001da9

00001da8 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    1da8:	b580      	push	{r7, lr}
    1daa:	b086      	sub	sp, #24
    1dac:	af00      	add	r7, sp, #0
    1dae:	6078      	str	r0, [r7, #4]
    1db0:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    1db2:	687b      	ldr	r3, [r7, #4]
    1db4:	2b00      	cmp	r3, #0
    1db6:	d004      	beq.n	1dc2 <spi_m_sync_transfer+0x1a>
    1db8:	683b      	ldr	r3, [r7, #0]
    1dba:	2b00      	cmp	r3, #0
    1dbc:	d001      	beq.n	1dc2 <spi_m_sync_transfer+0x1a>
    1dbe:	2301      	movs	r3, #1
    1dc0:	e000      	b.n	1dc4 <spi_m_sync_transfer+0x1c>
    1dc2:	2300      	movs	r3, #0
    1dc4:	1c1a      	adds	r2, r3, #0
    1dc6:	2301      	movs	r3, #1
    1dc8:	4013      	ands	r3, r2
    1dca:	b2db      	uxtb	r3, r3
    1dcc:	4910      	ldr	r1, [pc, #64]	; (1e10 <spi_m_sync_transfer+0x68>)
    1dce:	22b3      	movs	r2, #179	; 0xb3
    1dd0:	0018      	movs	r0, r3
    1dd2:	4b10      	ldr	r3, [pc, #64]	; (1e14 <spi_m_sync_transfer+0x6c>)
    1dd4:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    1dd6:	683b      	ldr	r3, [r7, #0]
    1dd8:	681a      	ldr	r2, [r3, #0]
    1dda:	230c      	movs	r3, #12
    1ddc:	18fb      	adds	r3, r7, r3
    1dde:	601a      	str	r2, [r3, #0]
	msg.rxbuf = p_xfer->rxbuf;
    1de0:	683b      	ldr	r3, [r7, #0]
    1de2:	685a      	ldr	r2, [r3, #4]
    1de4:	230c      	movs	r3, #12
    1de6:	18fb      	adds	r3, r7, r3
    1de8:	605a      	str	r2, [r3, #4]
	msg.size  = p_xfer->size;
    1dea:	683b      	ldr	r3, [r7, #0]
    1dec:	689a      	ldr	r2, [r3, #8]
    1dee:	230c      	movs	r3, #12
    1df0:	18fb      	adds	r3, r7, r3
    1df2:	609a      	str	r2, [r3, #8]
	return _spi_m_sync_trans(&spi->dev, &msg);
    1df4:	687b      	ldr	r3, [r7, #4]
    1df6:	3304      	adds	r3, #4
    1df8:	220c      	movs	r2, #12
    1dfa:	18ba      	adds	r2, r7, r2
    1dfc:	0011      	movs	r1, r2
    1dfe:	0018      	movs	r0, r3
    1e00:	4b05      	ldr	r3, [pc, #20]	; (1e18 <spi_m_sync_transfer+0x70>)
    1e02:	4798      	blx	r3
    1e04:	0003      	movs	r3, r0
}
    1e06:	0018      	movs	r0, r3
    1e08:	46bd      	mov	sp, r7
    1e0a:	b006      	add	sp, #24
    1e0c:	bd80      	pop	{r7, pc}
    1e0e:	46c0      	nop			; (mov r8, r8)
    1e10:	000121f8 	.word	0x000121f8
    1e14:	00002b25 	.word	0x00002b25
    1e18:	00003e05 	.word	0x00003e05

00001e1c <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
    1e1c:	b580      	push	{r7, lr}
    1e1e:	b082      	sub	sp, #8
    1e20:	af00      	add	r7, sp, #0
    1e22:	6078      	str	r0, [r7, #4]
    1e24:	6039      	str	r1, [r7, #0]
	ASSERT(spi && io);
    1e26:	687b      	ldr	r3, [r7, #4]
    1e28:	2b00      	cmp	r3, #0
    1e2a:	d004      	beq.n	1e36 <spi_m_sync_get_io_descriptor+0x1a>
    1e2c:	683b      	ldr	r3, [r7, #0]
    1e2e:	2b00      	cmp	r3, #0
    1e30:	d001      	beq.n	1e36 <spi_m_sync_get_io_descriptor+0x1a>
    1e32:	2301      	movs	r3, #1
    1e34:	e000      	b.n	1e38 <spi_m_sync_get_io_descriptor+0x1c>
    1e36:	2300      	movs	r3, #0
    1e38:	1c1a      	adds	r2, r3, #0
    1e3a:	2301      	movs	r3, #1
    1e3c:	4013      	ands	r3, r2
    1e3e:	b2db      	uxtb	r3, r3
    1e40:	4907      	ldr	r1, [pc, #28]	; (1e60 <spi_m_sync_get_io_descriptor+0x44>)
    1e42:	22bd      	movs	r2, #189	; 0xbd
    1e44:	0018      	movs	r0, r3
    1e46:	4b07      	ldr	r3, [pc, #28]	; (1e64 <spi_m_sync_get_io_descriptor+0x48>)
    1e48:	4798      	blx	r3
	*io = &spi->io;
    1e4a:	687b      	ldr	r3, [r7, #4]
    1e4c:	330c      	adds	r3, #12
    1e4e:	001a      	movs	r2, r3
    1e50:	683b      	ldr	r3, [r7, #0]
    1e52:	601a      	str	r2, [r3, #0]
	return 0;
    1e54:	2300      	movs	r3, #0
}
    1e56:	0018      	movs	r0, r3
    1e58:	46bd      	mov	sp, r7
    1e5a:	b002      	add	sp, #8
    1e5c:	bd80      	pop	{r7, pc}
    1e5e:	46c0      	nop			; (mov r8, r8)
    1e60:	000121f8 	.word	0x000121f8
    1e64:	00002b25 	.word	0x00002b25

00001e68 <usart_sync_init>:

/**
 * \brief Initialize usart interface
 */
int32_t usart_sync_init(struct usart_sync_descriptor *const descr, void *const hw, void *const func)
{
    1e68:	b580      	push	{r7, lr}
    1e6a:	b086      	sub	sp, #24
    1e6c:	af00      	add	r7, sp, #0
    1e6e:	60f8      	str	r0, [r7, #12]
    1e70:	60b9      	str	r1, [r7, #8]
    1e72:	607a      	str	r2, [r7, #4]
	int32_t init_status;
	ASSERT(descr && hw);
    1e74:	68fb      	ldr	r3, [r7, #12]
    1e76:	2b00      	cmp	r3, #0
    1e78:	d004      	beq.n	1e84 <usart_sync_init+0x1c>
    1e7a:	68bb      	ldr	r3, [r7, #8]
    1e7c:	2b00      	cmp	r3, #0
    1e7e:	d001      	beq.n	1e84 <usart_sync_init+0x1c>
    1e80:	2301      	movs	r3, #1
    1e82:	e000      	b.n	1e86 <usart_sync_init+0x1e>
    1e84:	2300      	movs	r3, #0
    1e86:	1c1a      	adds	r2, r3, #0
    1e88:	2301      	movs	r3, #1
    1e8a:	4013      	ands	r3, r2
    1e8c:	b2db      	uxtb	r3, r3
    1e8e:	490f      	ldr	r1, [pc, #60]	; (1ecc <usart_sync_init+0x64>)
    1e90:	2234      	movs	r2, #52	; 0x34
    1e92:	0018      	movs	r0, r3
    1e94:	4b0e      	ldr	r3, [pc, #56]	; (1ed0 <usart_sync_init+0x68>)
    1e96:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
    1e98:	68fb      	ldr	r3, [r7, #12]
    1e9a:	3308      	adds	r3, #8
    1e9c:	68ba      	ldr	r2, [r7, #8]
    1e9e:	0011      	movs	r1, r2
    1ea0:	0018      	movs	r0, r3
    1ea2:	4b0c      	ldr	r3, [pc, #48]	; (1ed4 <usart_sync_init+0x6c>)
    1ea4:	4798      	blx	r3
    1ea6:	0003      	movs	r3, r0
    1ea8:	617b      	str	r3, [r7, #20]
	if (init_status) {
    1eaa:	697b      	ldr	r3, [r7, #20]
    1eac:	2b00      	cmp	r3, #0
    1eae:	d001      	beq.n	1eb4 <usart_sync_init+0x4c>
		return init_status;
    1eb0:	697b      	ldr	r3, [r7, #20]
    1eb2:	e006      	b.n	1ec2 <usart_sync_init+0x5a>
	}

	descr->io.read  = usart_sync_read;
    1eb4:	68fb      	ldr	r3, [r7, #12]
    1eb6:	4a08      	ldr	r2, [pc, #32]	; (1ed8 <usart_sync_init+0x70>)
    1eb8:	605a      	str	r2, [r3, #4]
	descr->io.write = usart_sync_write;
    1eba:	68fb      	ldr	r3, [r7, #12]
    1ebc:	4a07      	ldr	r2, [pc, #28]	; (1edc <usart_sync_init+0x74>)
    1ebe:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    1ec0:	2300      	movs	r3, #0
}
    1ec2:	0018      	movs	r0, r3
    1ec4:	46bd      	mov	sp, r7
    1ec6:	b006      	add	sp, #24
    1ec8:	bd80      	pop	{r7, pc}
    1eca:	46c0      	nop			; (mov r8, r8)
    1ecc:	00012214 	.word	0x00012214
    1ed0:	00002b25 	.word	0x00002b25
    1ed4:	000034c1 	.word	0x000034c1
    1ed8:	00001ff1 	.word	0x00001ff1
    1edc:	00001f1d 	.word	0x00001f1d

00001ee0 <usart_sync_enable>:

/**
 * \brief Enable usart interface
 */
int32_t usart_sync_enable(struct usart_sync_descriptor *const descr)
{
    1ee0:	b580      	push	{r7, lr}
    1ee2:	b082      	sub	sp, #8
    1ee4:	af00      	add	r7, sp, #0
    1ee6:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    1ee8:	687b      	ldr	r3, [r7, #4]
    1eea:	1e5a      	subs	r2, r3, #1
    1eec:	4193      	sbcs	r3, r2
    1eee:	b2db      	uxtb	r3, r3
    1ef0:	4907      	ldr	r1, [pc, #28]	; (1f10 <usart_sync_enable+0x30>)
    1ef2:	2253      	movs	r2, #83	; 0x53
    1ef4:	0018      	movs	r0, r3
    1ef6:	4b07      	ldr	r3, [pc, #28]	; (1f14 <usart_sync_enable+0x34>)
    1ef8:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
    1efa:	687b      	ldr	r3, [r7, #4]
    1efc:	3308      	adds	r3, #8
    1efe:	0018      	movs	r0, r3
    1f00:	4b05      	ldr	r3, [pc, #20]	; (1f18 <usart_sync_enable+0x38>)
    1f02:	4798      	blx	r3

	return ERR_NONE;
    1f04:	2300      	movs	r3, #0
}
    1f06:	0018      	movs	r0, r3
    1f08:	46bd      	mov	sp, r7
    1f0a:	b002      	add	sp, #8
    1f0c:	bd80      	pop	{r7, pc}
    1f0e:	46c0      	nop			; (mov r8, r8)
    1f10:	00012214 	.word	0x00012214
    1f14:	00002b25 	.word	0x00002b25
    1f18:	00003501 	.word	0x00003501

00001f1c <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    1f1c:	b580      	push	{r7, lr}
    1f1e:	b086      	sub	sp, #24
    1f20:	af00      	add	r7, sp, #0
    1f22:	60f8      	str	r0, [r7, #12]
    1f24:	60b9      	str	r1, [r7, #8]
    1f26:	1dbb      	adds	r3, r7, #6
    1f28:	801a      	strh	r2, [r3, #0]
	uint32_t                      offset = 0;
    1f2a:	2300      	movs	r3, #0
    1f2c:	617b      	str	r3, [r7, #20]
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);
    1f2e:	68fb      	ldr	r3, [r7, #12]
    1f30:	613b      	str	r3, [r7, #16]

	ASSERT(io_descr && buf && length);
    1f32:	68fb      	ldr	r3, [r7, #12]
    1f34:	2b00      	cmp	r3, #0
    1f36:	d008      	beq.n	1f4a <usart_sync_write+0x2e>
    1f38:	68bb      	ldr	r3, [r7, #8]
    1f3a:	2b00      	cmp	r3, #0
    1f3c:	d005      	beq.n	1f4a <usart_sync_write+0x2e>
    1f3e:	1dbb      	adds	r3, r7, #6
    1f40:	881b      	ldrh	r3, [r3, #0]
    1f42:	2b00      	cmp	r3, #0
    1f44:	d001      	beq.n	1f4a <usart_sync_write+0x2e>
    1f46:	2301      	movs	r3, #1
    1f48:	e000      	b.n	1f4c <usart_sync_write+0x30>
    1f4a:	2300      	movs	r3, #0
    1f4c:	1c1a      	adds	r2, r3, #0
    1f4e:	2301      	movs	r3, #1
    1f50:	4013      	ands	r3, r2
    1f52:	b2db      	uxtb	r3, r3
    1f54:	4921      	ldr	r1, [pc, #132]	; (1fdc <usart_sync_write+0xc0>)
    1f56:	22f1      	movs	r2, #241	; 0xf1
    1f58:	0018      	movs	r0, r3
    1f5a:	4b21      	ldr	r3, [pc, #132]	; (1fe0 <usart_sync_write+0xc4>)
    1f5c:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
    1f5e:	46c0      	nop			; (mov r8, r8)
    1f60:	693b      	ldr	r3, [r7, #16]
    1f62:	3308      	adds	r3, #8
    1f64:	0018      	movs	r0, r3
    1f66:	4b1f      	ldr	r3, [pc, #124]	; (1fe4 <usart_sync_write+0xc8>)
    1f68:	4798      	blx	r3
    1f6a:	0003      	movs	r3, r0
    1f6c:	001a      	movs	r2, r3
    1f6e:	2301      	movs	r3, #1
    1f70:	4053      	eors	r3, r2
    1f72:	b2db      	uxtb	r3, r3
    1f74:	2b00      	cmp	r3, #0
    1f76:	d1f3      	bne.n	1f60 <usart_sync_write+0x44>
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
    1f78:	693b      	ldr	r3, [r7, #16]
    1f7a:	3308      	adds	r3, #8
    1f7c:	0018      	movs	r0, r3
    1f7e:	68ba      	ldr	r2, [r7, #8]
    1f80:	697b      	ldr	r3, [r7, #20]
    1f82:	18d3      	adds	r3, r2, r3
    1f84:	781b      	ldrb	r3, [r3, #0]
    1f86:	0019      	movs	r1, r3
    1f88:	4b17      	ldr	r3, [pc, #92]	; (1fe8 <usart_sync_write+0xcc>)
    1f8a:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
    1f8c:	46c0      	nop			; (mov r8, r8)
    1f8e:	693b      	ldr	r3, [r7, #16]
    1f90:	3308      	adds	r3, #8
    1f92:	0018      	movs	r0, r3
    1f94:	4b13      	ldr	r3, [pc, #76]	; (1fe4 <usart_sync_write+0xc8>)
    1f96:	4798      	blx	r3
    1f98:	0003      	movs	r3, r0
    1f9a:	001a      	movs	r2, r3
    1f9c:	2301      	movs	r3, #1
    1f9e:	4053      	eors	r3, r2
    1fa0:	b2db      	uxtb	r3, r3
    1fa2:	2b00      	cmp	r3, #0
    1fa4:	d1f3      	bne.n	1f8e <usart_sync_write+0x72>
			;
	} while (++offset < length);
    1fa6:	697b      	ldr	r3, [r7, #20]
    1fa8:	3301      	adds	r3, #1
    1faa:	617b      	str	r3, [r7, #20]
    1fac:	1dbb      	adds	r3, r7, #6
    1fae:	881b      	ldrh	r3, [r3, #0]
    1fb0:	697a      	ldr	r2, [r7, #20]
    1fb2:	429a      	cmp	r2, r3
    1fb4:	d3e0      	bcc.n	1f78 <usart_sync_write+0x5c>
	while (!_usart_sync_is_transmit_done(&descr->device))
    1fb6:	46c0      	nop			; (mov r8, r8)
    1fb8:	693b      	ldr	r3, [r7, #16]
    1fba:	3308      	adds	r3, #8
    1fbc:	0018      	movs	r0, r3
    1fbe:	4b0b      	ldr	r3, [pc, #44]	; (1fec <usart_sync_write+0xd0>)
    1fc0:	4798      	blx	r3
    1fc2:	0003      	movs	r3, r0
    1fc4:	001a      	movs	r2, r3
    1fc6:	2301      	movs	r3, #1
    1fc8:	4053      	eors	r3, r2
    1fca:	b2db      	uxtb	r3, r3
    1fcc:	2b00      	cmp	r3, #0
    1fce:	d1f3      	bne.n	1fb8 <usart_sync_write+0x9c>
		;
	return (int32_t)offset;
    1fd0:	697b      	ldr	r3, [r7, #20]
}
    1fd2:	0018      	movs	r0, r3
    1fd4:	46bd      	mov	sp, r7
    1fd6:	b006      	add	sp, #24
    1fd8:	bd80      	pop	{r7, pc}
    1fda:	46c0      	nop			; (mov r8, r8)
    1fdc:	00012214 	.word	0x00012214
    1fe0:	00002b25 	.word	0x00002b25
    1fe4:	00003571 	.word	0x00003571
    1fe8:	00003521 	.word	0x00003521
    1fec:	00003591 	.word	0x00003591

00001ff0 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    1ff0:	b590      	push	{r4, r7, lr}
    1ff2:	b087      	sub	sp, #28
    1ff4:	af00      	add	r7, sp, #0
    1ff6:	60f8      	str	r0, [r7, #12]
    1ff8:	60b9      	str	r1, [r7, #8]
    1ffa:	1dbb      	adds	r3, r7, #6
    1ffc:	801a      	strh	r2, [r3, #0]
	uint32_t                      offset = 0;
    1ffe:	2300      	movs	r3, #0
    2000:	617b      	str	r3, [r7, #20]
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);
    2002:	68fb      	ldr	r3, [r7, #12]
    2004:	613b      	str	r3, [r7, #16]

	ASSERT(io_descr && buf && length);
    2006:	68fb      	ldr	r3, [r7, #12]
    2008:	2b00      	cmp	r3, #0
    200a:	d008      	beq.n	201e <STACK_SIZE+0x1e>
    200c:	68bb      	ldr	r3, [r7, #8]
    200e:	2b00      	cmp	r3, #0
    2010:	d005      	beq.n	201e <STACK_SIZE+0x1e>
    2012:	1dbb      	adds	r3, r7, #6
    2014:	881b      	ldrh	r3, [r3, #0]
    2016:	2b00      	cmp	r3, #0
    2018:	d001      	beq.n	201e <STACK_SIZE+0x1e>
    201a:	2301      	movs	r3, #1
    201c:	e000      	b.n	2020 <STACK_SIZE+0x20>
    201e:	2300      	movs	r3, #0
    2020:	1c1a      	adds	r2, r3, #0
    2022:	2301      	movs	r3, #1
    2024:	4013      	ands	r3, r2
    2026:	b2d8      	uxtb	r0, r3
    2028:	2386      	movs	r3, #134	; 0x86
    202a:	005a      	lsls	r2, r3, #1
    202c:	4b13      	ldr	r3, [pc, #76]	; (207c <STACK_SIZE+0x7c>)
    202e:	0019      	movs	r1, r3
    2030:	4b13      	ldr	r3, [pc, #76]	; (2080 <STACK_SIZE+0x80>)
    2032:	4798      	blx	r3
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
    2034:	46c0      	nop			; (mov r8, r8)
    2036:	693b      	ldr	r3, [r7, #16]
    2038:	3308      	adds	r3, #8
    203a:	0018      	movs	r0, r3
    203c:	4b11      	ldr	r3, [pc, #68]	; (2084 <STACK_SIZE+0x84>)
    203e:	4798      	blx	r3
    2040:	0003      	movs	r3, r0
    2042:	001a      	movs	r2, r3
    2044:	2301      	movs	r3, #1
    2046:	4053      	eors	r3, r2
    2048:	b2db      	uxtb	r3, r3
    204a:	2b00      	cmp	r3, #0
    204c:	d1f3      	bne.n	2036 <STACK_SIZE+0x36>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
    204e:	68ba      	ldr	r2, [r7, #8]
    2050:	697b      	ldr	r3, [r7, #20]
    2052:	18d4      	adds	r4, r2, r3
    2054:	693b      	ldr	r3, [r7, #16]
    2056:	3308      	adds	r3, #8
    2058:	0018      	movs	r0, r3
    205a:	4b0b      	ldr	r3, [pc, #44]	; (2088 <STACK_SIZE+0x88>)
    205c:	4798      	blx	r3
    205e:	0003      	movs	r3, r0
    2060:	7023      	strb	r3, [r4, #0]
	} while (++offset < length);
    2062:	697b      	ldr	r3, [r7, #20]
    2064:	3301      	adds	r3, #1
    2066:	617b      	str	r3, [r7, #20]
    2068:	1dbb      	adds	r3, r7, #6
    206a:	881b      	ldrh	r3, [r3, #0]
    206c:	697a      	ldr	r2, [r7, #20]
    206e:	429a      	cmp	r2, r3
    2070:	d3e0      	bcc.n	2034 <STACK_SIZE+0x34>

	return (int32_t)offset;
    2072:	697b      	ldr	r3, [r7, #20]
}
    2074:	0018      	movs	r0, r3
    2076:	46bd      	mov	sp, r7
    2078:	b007      	add	sp, #28
    207a:	bd90      	pop	{r4, r7, pc}
    207c:	00012214 	.word	0x00012214
    2080:	00002b25 	.word	0x00002b25
    2084:	000035b1 	.word	0x000035b1
    2088:	0000354d 	.word	0x0000354d

0000208c <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    208c:	b580      	push	{r7, lr}
    208e:	b084      	sub	sp, #16
    2090:	af00      	add	r7, sp, #0
    2092:	0002      	movs	r2, r0
    2094:	1dfb      	adds	r3, r7, #7
    2096:	701a      	strb	r2, [r3, #0]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2098:	230f      	movs	r3, #15
    209a:	18fb      	adds	r3, r7, r3
    209c:	2200      	movs	r2, #0
    209e:	701a      	strb	r2, [r3, #0]
    20a0:	e038      	b.n	2114 <_usb_d_find_ep+0x88>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    20a2:	230f      	movs	r3, #15
    20a4:	18fb      	adds	r3, r7, r3
    20a6:	781b      	ldrb	r3, [r3, #0]
    20a8:	b25b      	sxtb	r3, r3
    20aa:	4a20      	ldr	r2, [pc, #128]	; (212c <_usb_d_find_ep+0xa0>)
    20ac:	015b      	lsls	r3, r3, #5
    20ae:	18d3      	adds	r3, r2, r3
    20b0:	3301      	adds	r3, #1
    20b2:	781b      	ldrb	r3, [r3, #0]
    20b4:	1dfa      	adds	r2, r7, #7
    20b6:	7812      	ldrb	r2, [r2, #0]
    20b8:	429a      	cmp	r2, r3
    20ba:	d104      	bne.n	20c6 <_usb_d_find_ep+0x3a>
			return i;
    20bc:	230f      	movs	r3, #15
    20be:	18fb      	adds	r3, r7, r3
    20c0:	781b      	ldrb	r3, [r3, #0]
    20c2:	b25b      	sxtb	r3, r3
    20c4:	e02e      	b.n	2124 <_usb_d_find_ep+0x98>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    20c6:	230f      	movs	r3, #15
    20c8:	18fb      	adds	r3, r7, r3
    20ca:	2200      	movs	r2, #0
    20cc:	569a      	ldrsb	r2, [r3, r2]
    20ce:	4b17      	ldr	r3, [pc, #92]	; (212c <_usb_d_find_ep+0xa0>)
    20d0:	0152      	lsls	r2, r2, #5
    20d2:	5cd3      	ldrb	r3, [r2, r3]
    20d4:	2b00      	cmp	r3, #0
    20d6:	d113      	bne.n	2100 <_usb_d_find_ep+0x74>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    20d8:	1dfb      	adds	r3, r7, #7
    20da:	781b      	ldrb	r3, [r3, #0]
    20dc:	220f      	movs	r2, #15
    20de:	4013      	ands	r3, r2
    20e0:	220f      	movs	r2, #15
    20e2:	18ba      	adds	r2, r7, r2
    20e4:	7812      	ldrb	r2, [r2, #0]
    20e6:	b252      	sxtb	r2, r2
    20e8:	4910      	ldr	r1, [pc, #64]	; (212c <_usb_d_find_ep+0xa0>)
    20ea:	0152      	lsls	r2, r2, #5
    20ec:	188a      	adds	r2, r1, r2
    20ee:	3201      	adds	r2, #1
    20f0:	7812      	ldrb	r2, [r2, #0]
    20f2:	4293      	cmp	r3, r2
    20f4:	d104      	bne.n	2100 <_usb_d_find_ep+0x74>
			return i;
    20f6:	230f      	movs	r3, #15
    20f8:	18fb      	adds	r3, r7, r3
    20fa:	781b      	ldrb	r3, [r3, #0]
    20fc:	b25b      	sxtb	r3, r3
    20fe:	e011      	b.n	2124 <_usb_d_find_ep+0x98>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2100:	230f      	movs	r3, #15
    2102:	18fb      	adds	r3, r7, r3
    2104:	781b      	ldrb	r3, [r3, #0]
    2106:	b25b      	sxtb	r3, r3
    2108:	b2db      	uxtb	r3, r3
    210a:	3301      	adds	r3, #1
    210c:	b2da      	uxtb	r2, r3
    210e:	230f      	movs	r3, #15
    2110:	18fb      	adds	r3, r7, r3
    2112:	701a      	strb	r2, [r3, #0]
    2114:	230f      	movs	r3, #15
    2116:	18fb      	adds	r3, r7, r3
    2118:	781b      	ldrb	r3, [r3, #0]
    211a:	b25b      	sxtb	r3, r3
    211c:	2b07      	cmp	r3, #7
    211e:	ddc0      	ble.n	20a2 <_usb_d_find_ep+0x16>
		}
	}
	return -1;
    2120:	2301      	movs	r3, #1
    2122:	425b      	negs	r3, r3
}
    2124:	0018      	movs	r0, r3
    2126:	46bd      	mov	sp, r7
    2128:	b004      	add	sp, #16
    212a:	bd80      	pop	{r7, pc}
    212c:	20000bf0 	.word	0x20000bf0

00002130 <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    2130:	b580      	push	{r7, lr}
    2132:	b088      	sub	sp, #32
    2134:	af00      	add	r7, sp, #0
    2136:	60ba      	str	r2, [r7, #8]
    2138:	607b      	str	r3, [r7, #4]
    213a:	230f      	movs	r3, #15
    213c:	18fb      	adds	r3, r7, r3
    213e:	1c02      	adds	r2, r0, #0
    2140:	701a      	strb	r2, [r3, #0]
    2142:	230e      	movs	r3, #14
    2144:	18fb      	adds	r3, r7, r3
    2146:	1c0a      	adds	r2, r1, #0
    2148:	701a      	strb	r2, [r3, #0]
	struct usb_d_transfer trans
    214a:	2314      	movs	r3, #20
    214c:	18fb      	adds	r3, r7, r3
    214e:	68ba      	ldr	r2, [r7, #8]
    2150:	601a      	str	r2, [r3, #0]
    2152:	2314      	movs	r3, #20
    2154:	18fb      	adds	r3, r7, r3
    2156:	687a      	ldr	r2, [r7, #4]
    2158:	605a      	str	r2, [r3, #4]
    215a:	230e      	movs	r3, #14
    215c:	18fb      	adds	r3, r7, r3
    215e:	781b      	ldrb	r3, [r3, #0]
    2160:	2b00      	cmp	r3, #0
    2162:	d007      	beq.n	2174 <_usb_d_trans+0x44>
    2164:	230f      	movs	r3, #15
    2166:	18fb      	adds	r3, r7, r3
    2168:	781b      	ldrb	r3, [r3, #0]
    216a:	2280      	movs	r2, #128	; 0x80
    216c:	4252      	negs	r2, r2
    216e:	4313      	orrs	r3, r2
    2170:	b2db      	uxtb	r3, r3
    2172:	e005      	b.n	2180 <_usb_d_trans+0x50>
    2174:	230f      	movs	r3, #15
    2176:	18fb      	adds	r3, r7, r3
    2178:	781b      	ldrb	r3, [r3, #0]
    217a:	220f      	movs	r2, #15
    217c:	4013      	ands	r3, r2
    217e:	b2db      	uxtb	r3, r3
    2180:	2214      	movs	r2, #20
    2182:	18ba      	adds	r2, r7, r2
    2184:	7213      	strb	r3, [r2, #8]
    2186:	2314      	movs	r3, #20
    2188:	18fb      	adds	r3, r7, r3
    218a:	2228      	movs	r2, #40	; 0x28
    218c:	18ba      	adds	r2, r7, r2
    218e:	7812      	ldrb	r2, [r2, #0]
    2190:	725a      	strb	r2, [r3, #9]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    2192:	2314      	movs	r3, #20
    2194:	18fb      	adds	r3, r7, r3
    2196:	0018      	movs	r0, r3
    2198:	4b03      	ldr	r3, [pc, #12]	; (21a8 <_usb_d_trans+0x78>)
    219a:	4798      	blx	r3
    219c:	0003      	movs	r3, r0
}
    219e:	0018      	movs	r0, r3
    21a0:	46bd      	mov	sp, r7
    21a2:	b008      	add	sp, #32
    21a4:	bd80      	pop	{r7, pc}
    21a6:	46c0      	nop			; (mov r8, r8)
    21a8:	00007099 	.word	0x00007099

000021ac <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    21ac:	b580      	push	{r7, lr}
    21ae:	b084      	sub	sp, #16
    21b0:	af00      	add	r7, sp, #0
    21b2:	60f8      	str	r0, [r7, #12]
    21b4:	60b9      	str	r1, [r7, #8]
    21b6:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    21b8:	2300      	movs	r3, #0
}
    21ba:	0018      	movs	r0, r3
    21bc:	46bd      	mov	sp, r7
    21be:	b004      	add	sp, #16
    21c0:	bd80      	pop	{r7, pc}
	...

000021c4 <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    21c4:	b590      	push	{r4, r7, lr}
    21c6:	b087      	sub	sp, #28
    21c8:	af00      	add	r7, sp, #0
    21ca:	0002      	movs	r2, r0
    21cc:	1dfb      	adds	r3, r7, #7
    21ce:	701a      	strb	r2, [r3, #0]
	int8_t           ep_index = _usb_d_find_ep(ep);
    21d0:	2317      	movs	r3, #23
    21d2:	18fc      	adds	r4, r7, r3
    21d4:	1dfb      	adds	r3, r7, #7
    21d6:	781b      	ldrb	r3, [r3, #0]
    21d8:	0018      	movs	r0, r3
    21da:	4b33      	ldr	r3, [pc, #204]	; (22a8 <usb_d_cb_trans_setup+0xe4>)
    21dc:	4798      	blx	r3
    21de:	0003      	movs	r3, r0
    21e0:	7023      	strb	r3, [r4, #0]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    21e2:	2317      	movs	r3, #23
    21e4:	18fb      	adds	r3, r7, r3
    21e6:	781b      	ldrb	r3, [r3, #0]
    21e8:	b25b      	sxtb	r3, r3
    21ea:	015a      	lsls	r2, r3, #5
    21ec:	4b2f      	ldr	r3, [pc, #188]	; (22ac <usb_d_cb_trans_setup+0xe8>)
    21ee:	18d3      	adds	r3, r2, r3
    21f0:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    21f2:	693b      	ldr	r3, [r7, #16]
    21f4:	330c      	adds	r3, #12
    21f6:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    21f8:	68fa      	ldr	r2, [r7, #12]
    21fa:	1dfb      	adds	r3, r7, #7
    21fc:	781b      	ldrb	r3, [r3, #0]
    21fe:	0011      	movs	r1, r2
    2200:	0018      	movs	r0, r3
    2202:	4b2b      	ldr	r3, [pc, #172]	; (22b0 <usb_d_cb_trans_setup+0xec>)
    2204:	4798      	blx	r3
    2206:	0002      	movs	r2, r0
    2208:	230b      	movs	r3, #11
    220a:	18fb      	adds	r3, r7, r3
    220c:	701a      	strb	r2, [r3, #0]
	if (n != 8) {
    220e:	230b      	movs	r3, #11
    2210:	18fb      	adds	r3, r7, r3
    2212:	781b      	ldrb	r3, [r3, #0]
    2214:	2b08      	cmp	r3, #8
    2216:	d010      	beq.n	223a <usb_d_cb_trans_setup+0x76>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2218:	1dfb      	adds	r3, r7, #7
    221a:	781b      	ldrb	r3, [r3, #0]
    221c:	2101      	movs	r1, #1
    221e:	0018      	movs	r0, r3
    2220:	4b24      	ldr	r3, [pc, #144]	; (22b4 <usb_d_cb_trans_setup+0xf0>)
    2222:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    2224:	1dfb      	adds	r3, r7, #7
    2226:	781b      	ldrb	r3, [r3, #0]
    2228:	2280      	movs	r2, #128	; 0x80
    222a:	4252      	negs	r2, r2
    222c:	4313      	orrs	r3, r2
    222e:	b2db      	uxtb	r3, r3
    2230:	2101      	movs	r1, #1
    2232:	0018      	movs	r0, r3
    2234:	4b1f      	ldr	r3, [pc, #124]	; (22b4 <usb_d_cb_trans_setup+0xf0>)
    2236:	4798      	blx	r3
		return;
    2238:	e033      	b.n	22a2 <usb_d_cb_trans_setup+0xde>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    223a:	1dfb      	adds	r3, r7, #7
    223c:	781b      	ldrb	r3, [r3, #0]
    223e:	2100      	movs	r1, #0
    2240:	0018      	movs	r0, r3
    2242:	4b1c      	ldr	r3, [pc, #112]	; (22b4 <usb_d_cb_trans_setup+0xf0>)
    2244:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    2246:	1dfb      	adds	r3, r7, #7
    2248:	781b      	ldrb	r3, [r3, #0]
    224a:	2280      	movs	r2, #128	; 0x80
    224c:	4252      	negs	r2, r2
    224e:	4313      	orrs	r3, r2
    2250:	b2db      	uxtb	r3, r3
    2252:	2100      	movs	r1, #0
    2254:	0018      	movs	r0, r3
    2256:	4b17      	ldr	r3, [pc, #92]	; (22b4 <usb_d_cb_trans_setup+0xf0>)
    2258:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    225a:	693b      	ldr	r3, [r7, #16]
    225c:	2201      	movs	r2, #1
    225e:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    2260:	693b      	ldr	r3, [r7, #16]
    2262:	695b      	ldr	r3, [r3, #20]
    2264:	68f9      	ldr	r1, [r7, #12]
    2266:	1dfa      	adds	r2, r7, #7
    2268:	7812      	ldrb	r2, [r2, #0]
    226a:	0010      	movs	r0, r2
    226c:	4798      	blx	r3
    226e:	0003      	movs	r3, r0
    2270:	001a      	movs	r2, r3
    2272:	2301      	movs	r3, #1
    2274:	4053      	eors	r3, r2
    2276:	b2db      	uxtb	r3, r3
    2278:	2b00      	cmp	r3, #0
    227a:	d012      	beq.n	22a2 <usb_d_cb_trans_setup+0xde>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    227c:	693b      	ldr	r3, [r7, #16]
    227e:	2205      	movs	r2, #5
    2280:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2282:	1dfb      	adds	r3, r7, #7
    2284:	781b      	ldrb	r3, [r3, #0]
    2286:	2101      	movs	r1, #1
    2288:	0018      	movs	r0, r3
    228a:	4b0a      	ldr	r3, [pc, #40]	; (22b4 <usb_d_cb_trans_setup+0xf0>)
    228c:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    228e:	1dfb      	adds	r3, r7, #7
    2290:	781b      	ldrb	r3, [r3, #0]
    2292:	2280      	movs	r2, #128	; 0x80
    2294:	4252      	negs	r2, r2
    2296:	4313      	orrs	r3, r2
    2298:	b2db      	uxtb	r3, r3
    229a:	2101      	movs	r1, #1
    229c:	0018      	movs	r0, r3
    229e:	4b05      	ldr	r3, [pc, #20]	; (22b4 <usb_d_cb_trans_setup+0xf0>)
    22a0:	4798      	blx	r3
	}
}
    22a2:	46bd      	mov	sp, r7
    22a4:	b007      	add	sp, #28
    22a6:	bd90      	pop	{r4, r7, pc}
    22a8:	0000208d 	.word	0x0000208d
    22ac:	20000bf0 	.word	0x20000bf0
    22b0:	00006fc9 	.word	0x00006fc9
    22b4:	00006de5 	.word	0x00006de5

000022b8 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    22b8:	b590      	push	{r4, r7, lr}
    22ba:	b085      	sub	sp, #20
    22bc:	af00      	add	r7, sp, #0
    22be:	0002      	movs	r2, r0
    22c0:	6039      	str	r1, [r7, #0]
    22c2:	1dfb      	adds	r3, r7, #7
    22c4:	701a      	strb	r2, [r3, #0]
	int8_t           ep_index = _usb_d_find_ep(ep);
    22c6:	230f      	movs	r3, #15
    22c8:	18fc      	adds	r4, r7, r3
    22ca:	1dfb      	adds	r3, r7, #7
    22cc:	781b      	ldrb	r3, [r3, #0]
    22ce:	0018      	movs	r0, r3
    22d0:	4b0e      	ldr	r3, [pc, #56]	; (230c <usb_d_cb_trans_more+0x54>)
    22d2:	4798      	blx	r3
    22d4:	0003      	movs	r3, r0
    22d6:	7023      	strb	r3, [r4, #0]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    22d8:	230f      	movs	r3, #15
    22da:	18fb      	adds	r3, r7, r3
    22dc:	781b      	ldrb	r3, [r3, #0]
    22de:	b25b      	sxtb	r3, r3
    22e0:	015a      	lsls	r2, r3, #5
    22e2:	4b0b      	ldr	r3, [pc, #44]	; (2310 <usb_d_cb_trans_more+0x58>)
    22e4:	18d3      	adds	r3, r2, r3
    22e6:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    22e8:	68bb      	ldr	r3, [r7, #8]
    22ea:	789b      	ldrb	r3, [r3, #2]
    22ec:	2b03      	cmp	r3, #3
    22ee:	d108      	bne.n	2302 <usb_d_cb_trans_more+0x4a>
		return ept->callbacks.more(ep, transfered);
    22f0:	68bb      	ldr	r3, [r7, #8]
    22f2:	699b      	ldr	r3, [r3, #24]
    22f4:	6839      	ldr	r1, [r7, #0]
    22f6:	1dfa      	adds	r2, r7, #7
    22f8:	7812      	ldrb	r2, [r2, #0]
    22fa:	0010      	movs	r0, r2
    22fc:	4798      	blx	r3
    22fe:	0003      	movs	r3, r0
    2300:	e000      	b.n	2304 <usb_d_cb_trans_more+0x4c>
	}
	return false;
    2302:	2300      	movs	r3, #0
}
    2304:	0018      	movs	r0, r3
    2306:	46bd      	mov	sp, r7
    2308:	b005      	add	sp, #20
    230a:	bd90      	pop	{r4, r7, pc}
    230c:	0000208d 	.word	0x0000208d
    2310:	20000bf0 	.word	0x20000bf0

00002314 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    2314:	b590      	push	{r4, r7, lr}
    2316:	b087      	sub	sp, #28
    2318:	af02      	add	r7, sp, #8
    231a:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    231c:	230f      	movs	r3, #15
    231e:	18fb      	adds	r3, r7, r3
    2320:	687a      	ldr	r2, [r7, #4]
    2322:	7892      	ldrb	r2, [r2, #2]
    2324:	701a      	strb	r2, [r3, #0]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    2326:	687b      	ldr	r3, [r7, #4]
    2328:	7b1b      	ldrb	r3, [r3, #12]
    232a:	001a      	movs	r2, r3
    232c:	2380      	movs	r3, #128	; 0x80
    232e:	401a      	ands	r2, r3
    2330:	230e      	movs	r3, #14
    2332:	18fb      	adds	r3, r7, r3
    2334:	1e51      	subs	r1, r2, #1
    2336:	418a      	sbcs	r2, r1
    2338:	701a      	strb	r2, [r3, #0]

	if (state == USB_EP_S_X_DATA) {
    233a:	230f      	movs	r3, #15
    233c:	18fb      	adds	r3, r7, r3
    233e:	781b      	ldrb	r3, [r3, #0]
    2340:	2b03      	cmp	r3, #3
    2342:	d142      	bne.n	23ca <usb_d_ctrl_trans_done+0xb6>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    2344:	687b      	ldr	r3, [r7, #4]
    2346:	69db      	ldr	r3, [r3, #28]
    2348:	687a      	ldr	r2, [r7, #4]
    234a:	7850      	ldrb	r0, [r2, #1]
    234c:	687a      	ldr	r2, [r7, #4]
    234e:	320c      	adds	r2, #12
    2350:	210d      	movs	r1, #13
    2352:	187c      	adds	r4, r7, r1
    2354:	2101      	movs	r1, #1
    2356:	4798      	blx	r3
    2358:	0003      	movs	r3, r0
    235a:	7023      	strb	r3, [r4, #0]
		if (err) {
    235c:	230d      	movs	r3, #13
    235e:	18fb      	adds	r3, r7, r3
    2360:	781b      	ldrb	r3, [r3, #0]
    2362:	2b00      	cmp	r3, #0
    2364:	d018      	beq.n	2398 <usb_d_ctrl_trans_done+0x84>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    2366:	687b      	ldr	r3, [r7, #4]
    2368:	2205      	movs	r2, #5
    236a:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    236c:	687b      	ldr	r3, [r7, #4]
    236e:	2202      	movs	r2, #2
    2370:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    2372:	230e      	movs	r3, #14
    2374:	18fb      	adds	r3, r7, r3
    2376:	781b      	ldrb	r3, [r3, #0]
    2378:	2b00      	cmp	r3, #0
    237a:	d002      	beq.n	2382 <usb_d_ctrl_trans_done+0x6e>
    237c:	687b      	ldr	r3, [r7, #4]
    237e:	785b      	ldrb	r3, [r3, #1]
    2380:	e005      	b.n	238e <usb_d_ctrl_trans_done+0x7a>
    2382:	687b      	ldr	r3, [r7, #4]
    2384:	785b      	ldrb	r3, [r3, #1]
    2386:	2280      	movs	r2, #128	; 0x80
    2388:	4252      	negs	r2, r2
    238a:	4313      	orrs	r3, r2
    238c:	b2db      	uxtb	r3, r3
    238e:	2101      	movs	r1, #1
    2390:	0018      	movs	r0, r3
    2392:	4b15      	ldr	r3, [pc, #84]	; (23e8 <usb_d_ctrl_trans_done+0xd4>)
    2394:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    2396:	e023      	b.n	23e0 <usb_d_ctrl_trans_done+0xcc>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    2398:	687b      	ldr	r3, [r7, #4]
    239a:	2204      	movs	r2, #4
    239c:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    239e:	687b      	ldr	r3, [r7, #4]
    23a0:	7858      	ldrb	r0, [r3, #1]
    23a2:	230e      	movs	r3, #14
    23a4:	18fb      	adds	r3, r7, r3
    23a6:	781b      	ldrb	r3, [r3, #0]
    23a8:	1e5a      	subs	r2, r3, #1
    23aa:	4193      	sbcs	r3, r2
    23ac:	b2db      	uxtb	r3, r3
    23ae:	2201      	movs	r2, #1
    23b0:	4053      	eors	r3, r2
    23b2:	b2db      	uxtb	r3, r3
    23b4:	1c1a      	adds	r2, r3, #0
    23b6:	2301      	movs	r3, #1
    23b8:	4013      	ands	r3, r2
    23ba:	b2d9      	uxtb	r1, r3
    23bc:	2301      	movs	r3, #1
    23be:	9300      	str	r3, [sp, #0]
    23c0:	2300      	movs	r3, #0
    23c2:	2200      	movs	r2, #0
    23c4:	4c09      	ldr	r4, [pc, #36]	; (23ec <usb_d_ctrl_trans_done+0xd8>)
    23c6:	47a0      	blx	r4
}
    23c8:	e00a      	b.n	23e0 <usb_d_ctrl_trans_done+0xcc>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    23ca:	687b      	ldr	r3, [r7, #4]
    23cc:	69db      	ldr	r3, [r3, #28]
    23ce:	687a      	ldr	r2, [r7, #4]
    23d0:	7850      	ldrb	r0, [r2, #1]
    23d2:	687a      	ldr	r2, [r7, #4]
    23d4:	320c      	adds	r2, #12
    23d6:	2100      	movs	r1, #0
    23d8:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    23da:	687b      	ldr	r3, [r7, #4]
    23dc:	2202      	movs	r2, #2
    23de:	709a      	strb	r2, [r3, #2]
}
    23e0:	46c0      	nop			; (mov r8, r8)
    23e2:	46bd      	mov	sp, r7
    23e4:	b005      	add	sp, #20
    23e6:	bd90      	pop	{r4, r7, pc}
    23e8:	00006de5 	.word	0x00006de5
    23ec:	00002131 	.word	0x00002131

000023f0 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    23f0:	b590      	push	{r4, r7, lr}
    23f2:	b087      	sub	sp, #28
    23f4:	af00      	add	r7, sp, #0
    23f6:	60b9      	str	r1, [r7, #8]
    23f8:	607a      	str	r2, [r7, #4]
    23fa:	230f      	movs	r3, #15
    23fc:	18fb      	adds	r3, r7, r3
    23fe:	1c02      	adds	r2, r0, #0
    2400:	701a      	strb	r2, [r3, #0]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2402:	2317      	movs	r3, #23
    2404:	18fc      	adds	r4, r7, r3
    2406:	230f      	movs	r3, #15
    2408:	18fb      	adds	r3, r7, r3
    240a:	781b      	ldrb	r3, [r3, #0]
    240c:	0018      	movs	r0, r3
    240e:	4b33      	ldr	r3, [pc, #204]	; (24dc <_usb_d_cb_trans_done+0xec>)
    2410:	4798      	blx	r3
    2412:	0003      	movs	r3, r0
    2414:	7023      	strb	r3, [r4, #0]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2416:	2317      	movs	r3, #23
    2418:	18fb      	adds	r3, r7, r3
    241a:	781b      	ldrb	r3, [r3, #0]
    241c:	b25b      	sxtb	r3, r3
    241e:	015a      	lsls	r2, r3, #5
    2420:	4b2f      	ldr	r3, [pc, #188]	; (24e0 <_usb_d_cb_trans_done+0xf0>)
    2422:	18d3      	adds	r3, r2, r3
    2424:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    2426:	68bb      	ldr	r3, [r7, #8]
    2428:	2b00      	cmp	r3, #0
    242a:	d10f      	bne.n	244c <_usb_d_cb_trans_done+0x5c>
		ept->xfer.hdr.status = USB_XFER_DONE;
    242c:	693b      	ldr	r3, [r7, #16]
    242e:	2200      	movs	r2, #0
    2430:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2432:	693b      	ldr	r3, [r7, #16]
    2434:	781b      	ldrb	r3, [r3, #0]
    2436:	2b00      	cmp	r3, #0
    2438:	d104      	bne.n	2444 <_usb_d_cb_trans_done+0x54>
			usb_d_ctrl_trans_done(ept);
    243a:	693b      	ldr	r3, [r7, #16]
    243c:	0018      	movs	r0, r3
    243e:	4b29      	ldr	r3, [pc, #164]	; (24e4 <_usb_d_cb_trans_done+0xf4>)
    2440:	4798      	blx	r3
			return;
    2442:	e048      	b.n	24d6 <_usb_d_cb_trans_done+0xe6>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    2444:	693b      	ldr	r3, [r7, #16]
    2446:	2201      	movs	r2, #1
    2448:	709a      	strb	r2, [r3, #2]
    244a:	e03a      	b.n	24c2 <_usb_d_cb_trans_done+0xd2>
	} else if (code == USB_TRANS_STALL) {
    244c:	68bb      	ldr	r3, [r7, #8]
    244e:	2b01      	cmp	r3, #1
    2450:	d115      	bne.n	247e <_usb_d_cb_trans_done+0x8e>
		ept->xfer.hdr.status = USB_XFER_HALT;
    2452:	693b      	ldr	r3, [r7, #16]
    2454:	2202      	movs	r2, #2
    2456:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2458:	693b      	ldr	r3, [r7, #16]
    245a:	781b      	ldrb	r3, [r3, #0]
    245c:	2b00      	cmp	r3, #0
    245e:	d10a      	bne.n	2476 <_usb_d_cb_trans_done+0x86>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2460:	693b      	ldr	r3, [r7, #16]
    2462:	2202      	movs	r2, #2
    2464:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2466:	230f      	movs	r3, #15
    2468:	18fb      	adds	r3, r7, r3
    246a:	781b      	ldrb	r3, [r3, #0]
    246c:	2100      	movs	r1, #0
    246e:	0018      	movs	r0, r3
    2470:	4b1d      	ldr	r3, [pc, #116]	; (24e8 <_usb_d_cb_trans_done+0xf8>)
    2472:	4798      	blx	r3
    2474:	e025      	b.n	24c2 <_usb_d_cb_trans_done+0xd2>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    2476:	693b      	ldr	r3, [r7, #16]
    2478:	2205      	movs	r2, #5
    247a:	709a      	strb	r2, [r3, #2]
    247c:	e021      	b.n	24c2 <_usb_d_cb_trans_done+0xd2>
		}
	} else if (code == USB_TRANS_ABORT) {
    247e:	68bb      	ldr	r3, [r7, #8]
    2480:	2b02      	cmp	r3, #2
    2482:	d10e      	bne.n	24a2 <_usb_d_cb_trans_done+0xb2>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    2484:	693b      	ldr	r3, [r7, #16]
    2486:	2204      	movs	r2, #4
    2488:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    248a:	693b      	ldr	r3, [r7, #16]
    248c:	781b      	ldrb	r3, [r3, #0]
    248e:	2b00      	cmp	r3, #0
    2490:	d103      	bne.n	249a <_usb_d_cb_trans_done+0xaa>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2492:	693b      	ldr	r3, [r7, #16]
    2494:	2202      	movs	r2, #2
    2496:	709a      	strb	r2, [r3, #2]
			return;
    2498:	e01d      	b.n	24d6 <_usb_d_cb_trans_done+0xe6>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    249a:	693b      	ldr	r3, [r7, #16]
    249c:	2201      	movs	r2, #1
    249e:	709a      	strb	r2, [r3, #2]
    24a0:	e00f      	b.n	24c2 <_usb_d_cb_trans_done+0xd2>
	} else if (code == USB_TRANS_RESET) {
    24a2:	68bb      	ldr	r3, [r7, #8]
    24a4:	2b03      	cmp	r3, #3
    24a6:	d106      	bne.n	24b6 <_usb_d_cb_trans_done+0xc6>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    24a8:	693b      	ldr	r3, [r7, #16]
    24aa:	2200      	movs	r2, #0
    24ac:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    24ae:	693b      	ldr	r3, [r7, #16]
    24b0:	2205      	movs	r2, #5
    24b2:	70da      	strb	r2, [r3, #3]
    24b4:	e005      	b.n	24c2 <_usb_d_cb_trans_done+0xd2>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    24b6:	693b      	ldr	r3, [r7, #16]
    24b8:	2206      	movs	r2, #6
    24ba:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    24bc:	693b      	ldr	r3, [r7, #16]
    24be:	2206      	movs	r2, #6
    24c0:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    24c2:	693b      	ldr	r3, [r7, #16]
    24c4:	69db      	ldr	r3, [r3, #28]
    24c6:	693a      	ldr	r2, [r7, #16]
    24c8:	78d1      	ldrb	r1, [r2, #3]
    24ca:	687c      	ldr	r4, [r7, #4]
    24cc:	220f      	movs	r2, #15
    24ce:	18ba      	adds	r2, r7, r2
    24d0:	7810      	ldrb	r0, [r2, #0]
    24d2:	0022      	movs	r2, r4
    24d4:	4798      	blx	r3
}
    24d6:	46bd      	mov	sp, r7
    24d8:	b007      	add	sp, #28
    24da:	bd90      	pop	{r4, r7, pc}
    24dc:	0000208d 	.word	0x0000208d
    24e0:	20000bf0 	.word	0x20000bf0
    24e4:	00002315 	.word	0x00002315
    24e8:	00006de5 	.word	0x00006de5

000024ec <usb_d_init>:

int32_t usb_d_init(void)
{
    24ec:	b580      	push	{r7, lr}
    24ee:	b082      	sub	sp, #8
    24f0:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    24f2:	4b28      	ldr	r3, [pc, #160]	; (2594 <usb_d_init+0xa8>)
    24f4:	4798      	blx	r3
    24f6:	0003      	movs	r3, r0
    24f8:	603b      	str	r3, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    24fa:	683b      	ldr	r3, [r7, #0]
    24fc:	2b00      	cmp	r3, #0
    24fe:	da01      	bge.n	2504 <usb_d_init+0x18>
		return rc;
    2500:	683b      	ldr	r3, [r7, #0]
    2502:	e043      	b.n	258c <usb_d_init+0xa0>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    2504:	2380      	movs	r3, #128	; 0x80
    2506:	005a      	lsls	r2, r3, #1
    2508:	4b23      	ldr	r3, [pc, #140]	; (2598 <usb_d_init+0xac>)
    250a:	2100      	movs	r1, #0
    250c:	0018      	movs	r0, r3
    250e:	4b23      	ldr	r3, [pc, #140]	; (259c <usb_d_init+0xb0>)
    2510:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2512:	1dfb      	adds	r3, r7, #7
    2514:	2200      	movs	r2, #0
    2516:	701a      	strb	r2, [r3, #0]
    2518:	e024      	b.n	2564 <usb_d_init+0x78>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    251a:	1dfb      	adds	r3, r7, #7
    251c:	781b      	ldrb	r3, [r3, #0]
    251e:	4a1e      	ldr	r2, [pc, #120]	; (2598 <usb_d_init+0xac>)
    2520:	015b      	lsls	r3, r3, #5
    2522:	18d3      	adds	r3, r2, r3
    2524:	3301      	adds	r3, #1
    2526:	22ff      	movs	r2, #255	; 0xff
    2528:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    252a:	1dfb      	adds	r3, r7, #7
    252c:	781b      	ldrb	r3, [r3, #0]
    252e:	4a1a      	ldr	r2, [pc, #104]	; (2598 <usb_d_init+0xac>)
    2530:	015b      	lsls	r3, r3, #5
    2532:	18d3      	adds	r3, r2, r3
    2534:	3314      	adds	r3, #20
    2536:	4a1a      	ldr	r2, [pc, #104]	; (25a0 <usb_d_init+0xb4>)
    2538:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    253a:	1dfb      	adds	r3, r7, #7
    253c:	781b      	ldrb	r3, [r3, #0]
    253e:	4a16      	ldr	r2, [pc, #88]	; (2598 <usb_d_init+0xac>)
    2540:	015b      	lsls	r3, r3, #5
    2542:	18d3      	adds	r3, r2, r3
    2544:	3318      	adds	r3, #24
    2546:	4a16      	ldr	r2, [pc, #88]	; (25a0 <usb_d_init+0xb4>)
    2548:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    254a:	1dfb      	adds	r3, r7, #7
    254c:	781b      	ldrb	r3, [r3, #0]
    254e:	4a12      	ldr	r2, [pc, #72]	; (2598 <usb_d_init+0xac>)
    2550:	015b      	lsls	r3, r3, #5
    2552:	18d3      	adds	r3, r2, r3
    2554:	331c      	adds	r3, #28
    2556:	4a12      	ldr	r2, [pc, #72]	; (25a0 <usb_d_init+0xb4>)
    2558:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    255a:	1dfb      	adds	r3, r7, #7
    255c:	781a      	ldrb	r2, [r3, #0]
    255e:	1dfb      	adds	r3, r7, #7
    2560:	3201      	adds	r2, #1
    2562:	701a      	strb	r2, [r3, #0]
    2564:	1dfb      	adds	r3, r7, #7
    2566:	781b      	ldrb	r3, [r3, #0]
    2568:	2b07      	cmp	r3, #7
    256a:	d9d6      	bls.n	251a <usb_d_init+0x2e>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    256c:	4b0d      	ldr	r3, [pc, #52]	; (25a4 <usb_d_init+0xb8>)
    256e:	0019      	movs	r1, r3
    2570:	2000      	movs	r0, #0
    2572:	4b0d      	ldr	r3, [pc, #52]	; (25a8 <usb_d_init+0xbc>)
    2574:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    2576:	4b0d      	ldr	r3, [pc, #52]	; (25ac <usb_d_init+0xc0>)
    2578:	0019      	movs	r1, r3
    257a:	2001      	movs	r0, #1
    257c:	4b0a      	ldr	r3, [pc, #40]	; (25a8 <usb_d_init+0xbc>)
    257e:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    2580:	4b0b      	ldr	r3, [pc, #44]	; (25b0 <usb_d_init+0xc4>)
    2582:	0019      	movs	r1, r3
    2584:	2002      	movs	r0, #2
    2586:	4b08      	ldr	r3, [pc, #32]	; (25a8 <usb_d_init+0xbc>)
    2588:	4798      	blx	r3
	return ERR_NONE;
    258a:	2300      	movs	r3, #0
}
    258c:	0018      	movs	r0, r3
    258e:	46bd      	mov	sp, r7
    2590:	b002      	add	sp, #8
    2592:	bd80      	pop	{r7, pc}
    2594:	00006499 	.word	0x00006499
    2598:	20000bf0 	.word	0x20000bf0
    259c:	0000d219 	.word	0x0000d219
    25a0:	000021ad 	.word	0x000021ad
    25a4:	000021c5 	.word	0x000021c5
    25a8:	00007315 	.word	0x00007315
    25ac:	000022b9 	.word	0x000022b9
    25b0:	000023f1 	.word	0x000023f1

000025b4 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    25b4:	b580      	push	{r7, lr}
    25b6:	b082      	sub	sp, #8
    25b8:	af00      	add	r7, sp, #0
    25ba:	0002      	movs	r2, r0
    25bc:	6039      	str	r1, [r7, #0]
    25be:	1dfb      	adds	r3, r7, #7
    25c0:	701a      	strb	r2, [r3, #0]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    25c2:	683a      	ldr	r2, [r7, #0]
    25c4:	1dfb      	adds	r3, r7, #7
    25c6:	781b      	ldrb	r3, [r3, #0]
    25c8:	0011      	movs	r1, r2
    25ca:	0018      	movs	r0, r3
    25cc:	4b02      	ldr	r3, [pc, #8]	; (25d8 <usb_d_register_callback+0x24>)
    25ce:	4798      	blx	r3
}
    25d0:	46c0      	nop			; (mov r8, r8)
    25d2:	46bd      	mov	sp, r7
    25d4:	b002      	add	sp, #8
    25d6:	bd80      	pop	{r7, pc}
    25d8:	000072c9 	.word	0x000072c9

000025dc <usb_d_enable>:

int32_t usb_d_enable(void)
{
    25dc:	b580      	push	{r7, lr}
    25de:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    25e0:	4b02      	ldr	r3, [pc, #8]	; (25ec <usb_d_enable+0x10>)
    25e2:	4798      	blx	r3
    25e4:	0003      	movs	r3, r0
}
    25e6:	0018      	movs	r0, r3
    25e8:	46bd      	mov	sp, r7
    25ea:	bd80      	pop	{r7, pc}
    25ec:	000065a5 	.word	0x000065a5

000025f0 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    25f0:	b580      	push	{r7, lr}
    25f2:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    25f4:	4b02      	ldr	r3, [pc, #8]	; (2600 <usb_d_attach+0x10>)
    25f6:	4798      	blx	r3
}
    25f8:	46c0      	nop			; (mov r8, r8)
    25fa:	46bd      	mov	sp, r7
    25fc:	bd80      	pop	{r7, pc}
    25fe:	46c0      	nop			; (mov r8, r8)
    2600:	00006629 	.word	0x00006629

00002604 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    2604:	b580      	push	{r7, lr}
    2606:	b082      	sub	sp, #8
    2608:	af00      	add	r7, sp, #0
    260a:	0002      	movs	r2, r0
    260c:	1dfb      	adds	r3, r7, #7
    260e:	701a      	strb	r2, [r3, #0]
	_usb_d_dev_set_address(addr);
    2610:	1dfb      	adds	r3, r7, #7
    2612:	781b      	ldrb	r3, [r3, #0]
    2614:	0018      	movs	r0, r3
    2616:	4b03      	ldr	r3, [pc, #12]	; (2624 <usb_d_set_address+0x20>)
    2618:	4798      	blx	r3
}
    261a:	46c0      	nop			; (mov r8, r8)
    261c:	46bd      	mov	sp, r7
    261e:	b002      	add	sp, #8
    2620:	bd80      	pop	{r7, pc}
    2622:	46c0      	nop			; (mov r8, r8)
    2624:	00006645 	.word	0x00006645

00002628 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    2628:	b580      	push	{r7, lr}
    262a:	b082      	sub	sp, #8
    262c:	af00      	add	r7, sp, #0
    262e:	0002      	movs	r2, r0
    2630:	1dfb      	adds	r3, r7, #7
    2632:	701a      	strb	r2, [r3, #0]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    2634:	1dfb      	adds	r3, r7, #7
    2636:	781b      	ldrb	r3, [r3, #0]
    2638:	b29b      	uxth	r3, r3
    263a:	001a      	movs	r2, r3
    263c:	2100      	movs	r1, #0
    263e:	2000      	movs	r0, #0
    2640:	4b03      	ldr	r3, [pc, #12]	; (2650 <usb_d_ep0_init+0x28>)
    2642:	4798      	blx	r3
    2644:	0003      	movs	r3, r0
}
    2646:	0018      	movs	r0, r3
    2648:	46bd      	mov	sp, r7
    264a:	b002      	add	sp, #8
    264c:	bd80      	pop	{r7, pc}
    264e:	46c0      	nop			; (mov r8, r8)
    2650:	00002655 	.word	0x00002655

00002654 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    2654:	b590      	push	{r4, r7, lr}
    2656:	b087      	sub	sp, #28
    2658:	af00      	add	r7, sp, #0
    265a:	0004      	movs	r4, r0
    265c:	0008      	movs	r0, r1
    265e:	0011      	movs	r1, r2
    2660:	1dfb      	adds	r3, r7, #7
    2662:	1c22      	adds	r2, r4, #0
    2664:	701a      	strb	r2, [r3, #0]
    2666:	1dbb      	adds	r3, r7, #6
    2668:	1c02      	adds	r2, r0, #0
    266a:	701a      	strb	r2, [r3, #0]
    266c:	1d3b      	adds	r3, r7, #4
    266e:	1c0a      	adds	r2, r1, #0
    2670:	801a      	strh	r2, [r3, #0]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    2672:	2317      	movs	r3, #23
    2674:	18fc      	adds	r4, r7, r3
    2676:	1dfb      	adds	r3, r7, #7
    2678:	781b      	ldrb	r3, [r3, #0]
    267a:	0018      	movs	r0, r3
    267c:	4b25      	ldr	r3, [pc, #148]	; (2714 <usb_d_ep_init+0xc0>)
    267e:	4798      	blx	r3
    2680:	0003      	movs	r3, r0
    2682:	7023      	strb	r3, [r4, #0]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2684:	2317      	movs	r3, #23
    2686:	18fb      	adds	r3, r7, r3
    2688:	781b      	ldrb	r3, [r3, #0]
    268a:	b25b      	sxtb	r3, r3
    268c:	015a      	lsls	r2, r3, #5
    268e:	4b22      	ldr	r3, [pc, #136]	; (2718 <usb_d_ep_init+0xc4>)
    2690:	18d3      	adds	r3, r2, r3
    2692:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    2694:	2317      	movs	r3, #23
    2696:	18fb      	adds	r3, r7, r3
    2698:	781b      	ldrb	r3, [r3, #0]
    269a:	2b7f      	cmp	r3, #127	; 0x7f
    269c:	d802      	bhi.n	26a4 <usb_d_ep_init+0x50>
		return -USB_ERR_REDO;
    269e:	2314      	movs	r3, #20
    26a0:	425b      	negs	r3, r3
    26a2:	e032      	b.n	270a <usb_d_ep_init+0xb6>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    26a4:	2317      	movs	r3, #23
    26a6:	18fc      	adds	r4, r7, r3
    26a8:	20ff      	movs	r0, #255	; 0xff
    26aa:	4b1a      	ldr	r3, [pc, #104]	; (2714 <usb_d_ep_init+0xc0>)
    26ac:	4798      	blx	r3
    26ae:	0003      	movs	r3, r0
    26b0:	7023      	strb	r3, [r4, #0]
		if (ep_index < 0) {
    26b2:	2317      	movs	r3, #23
    26b4:	18fb      	adds	r3, r7, r3
    26b6:	781b      	ldrb	r3, [r3, #0]
    26b8:	2b7f      	cmp	r3, #127	; 0x7f
    26ba:	d902      	bls.n	26c2 <usb_d_ep_init+0x6e>
			return -USB_ERR_ALLOC_FAIL;
    26bc:	2315      	movs	r3, #21
    26be:	425b      	negs	r3, r3
    26c0:	e023      	b.n	270a <usb_d_ep_init+0xb6>
		}
		ept = &usb_d_inst.ep[ep_index];
    26c2:	2317      	movs	r3, #23
    26c4:	18fb      	adds	r3, r7, r3
    26c6:	781b      	ldrb	r3, [r3, #0]
    26c8:	b25b      	sxtb	r3, r3
    26ca:	015a      	lsls	r2, r3, #5
    26cc:	4b12      	ldr	r3, [pc, #72]	; (2718 <usb_d_ep_init+0xc4>)
    26ce:	18d3      	adds	r3, r2, r3
    26d0:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    26d2:	1d3b      	adds	r3, r7, #4
    26d4:	881a      	ldrh	r2, [r3, #0]
    26d6:	1dbb      	adds	r3, r7, #6
    26d8:	7819      	ldrb	r1, [r3, #0]
    26da:	1dfb      	adds	r3, r7, #7
    26dc:	781b      	ldrb	r3, [r3, #0]
    26de:	0018      	movs	r0, r3
    26e0:	4b0e      	ldr	r3, [pc, #56]	; (271c <usb_d_ep_init+0xc8>)
    26e2:	4798      	blx	r3
    26e4:	0003      	movs	r3, r0
    26e6:	60fb      	str	r3, [r7, #12]
	if (rc < 0) {
    26e8:	68fb      	ldr	r3, [r7, #12]
    26ea:	2b00      	cmp	r3, #0
    26ec:	da01      	bge.n	26f2 <usb_d_ep_init+0x9e>
		return rc;
    26ee:	68fb      	ldr	r3, [r7, #12]
    26f0:	e00b      	b.n	270a <usb_d_ep_init+0xb6>
	}
	ept->xfer.hdr.ep   = ep;
    26f2:	693b      	ldr	r3, [r7, #16]
    26f4:	1dfa      	adds	r2, r7, #7
    26f6:	7812      	ldrb	r2, [r2, #0]
    26f8:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    26fa:	1dbb      	adds	r3, r7, #6
    26fc:	781b      	ldrb	r3, [r3, #0]
    26fe:	2203      	movs	r2, #3
    2700:	4013      	ands	r3, r2
    2702:	b2da      	uxtb	r2, r3
    2704:	693b      	ldr	r3, [r7, #16]
    2706:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    2708:	2300      	movs	r3, #0
}
    270a:	0018      	movs	r0, r3
    270c:	46bd      	mov	sp, r7
    270e:	b007      	add	sp, #28
    2710:	bd90      	pop	{r4, r7, pc}
    2712:	46c0      	nop			; (mov r8, r8)
    2714:	0000208d 	.word	0x0000208d
    2718:	20000bf0 	.word	0x20000bf0
    271c:	0000670d 	.word	0x0000670d

00002720 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    2720:	b590      	push	{r4, r7, lr}
    2722:	b085      	sub	sp, #20
    2724:	af00      	add	r7, sp, #0
    2726:	0002      	movs	r2, r0
    2728:	1dfb      	adds	r3, r7, #7
    272a:	701a      	strb	r2, [r3, #0]
	int8_t           ep_index = _usb_d_find_ep(ep);
    272c:	230f      	movs	r3, #15
    272e:	18fc      	adds	r4, r7, r3
    2730:	1dfb      	adds	r3, r7, #7
    2732:	781b      	ldrb	r3, [r3, #0]
    2734:	0018      	movs	r0, r3
    2736:	4b0f      	ldr	r3, [pc, #60]	; (2774 <usb_d_ep_deinit+0x54>)
    2738:	4798      	blx	r3
    273a:	0003      	movs	r3, r0
    273c:	7023      	strb	r3, [r4, #0]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    273e:	230f      	movs	r3, #15
    2740:	18fb      	adds	r3, r7, r3
    2742:	781b      	ldrb	r3, [r3, #0]
    2744:	b25b      	sxtb	r3, r3
    2746:	015a      	lsls	r2, r3, #5
    2748:	4b0b      	ldr	r3, [pc, #44]	; (2778 <usb_d_ep_deinit+0x58>)
    274a:	18d3      	adds	r3, r2, r3
    274c:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    274e:	230f      	movs	r3, #15
    2750:	18fb      	adds	r3, r7, r3
    2752:	781b      	ldrb	r3, [r3, #0]
    2754:	2b7f      	cmp	r3, #127	; 0x7f
    2756:	d808      	bhi.n	276a <usb_d_ep_deinit+0x4a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    2758:	1dfb      	adds	r3, r7, #7
    275a:	781b      	ldrb	r3, [r3, #0]
    275c:	0018      	movs	r0, r3
    275e:	4b07      	ldr	r3, [pc, #28]	; (277c <usb_d_ep_deinit+0x5c>)
    2760:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    2762:	68bb      	ldr	r3, [r7, #8]
    2764:	22ff      	movs	r2, #255	; 0xff
    2766:	705a      	strb	r2, [r3, #1]
    2768:	e000      	b.n	276c <usb_d_ep_deinit+0x4c>
		return;
    276a:	46c0      	nop			; (mov r8, r8)
}
    276c:	46bd      	mov	sp, r7
    276e:	b005      	add	sp, #20
    2770:	bd90      	pop	{r4, r7, pc}
    2772:	46c0      	nop			; (mov r8, r8)
    2774:	0000208d 	.word	0x0000208d
    2778:	20000bf0 	.word	0x20000bf0
    277c:	00006889 	.word	0x00006889

00002780 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    2780:	b590      	push	{r4, r7, lr}
    2782:	b087      	sub	sp, #28
    2784:	af00      	add	r7, sp, #0
    2786:	0002      	movs	r2, r0
    2788:	1dfb      	adds	r3, r7, #7
    278a:	701a      	strb	r2, [r3, #0]
	int8_t           ep_index = _usb_d_find_ep(ep);
    278c:	2317      	movs	r3, #23
    278e:	18fc      	adds	r4, r7, r3
    2790:	1dfb      	adds	r3, r7, #7
    2792:	781b      	ldrb	r3, [r3, #0]
    2794:	0018      	movs	r0, r3
    2796:	4b17      	ldr	r3, [pc, #92]	; (27f4 <usb_d_ep_enable+0x74>)
    2798:	4798      	blx	r3
    279a:	0003      	movs	r3, r0
    279c:	7023      	strb	r3, [r4, #0]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    279e:	2317      	movs	r3, #23
    27a0:	18fb      	adds	r3, r7, r3
    27a2:	781b      	ldrb	r3, [r3, #0]
    27a4:	b25b      	sxtb	r3, r3
    27a6:	015a      	lsls	r2, r3, #5
    27a8:	4b13      	ldr	r3, [pc, #76]	; (27f8 <usb_d_ep_enable+0x78>)
    27aa:	18d3      	adds	r3, r2, r3
    27ac:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    27ae:	2317      	movs	r3, #23
    27b0:	18fb      	adds	r3, r7, r3
    27b2:	781b      	ldrb	r3, [r3, #0]
    27b4:	2b7f      	cmp	r3, #127	; 0x7f
    27b6:	d902      	bls.n	27be <usb_d_ep_enable+0x3e>
		return -USB_ERR_PARAM;
    27b8:	2312      	movs	r3, #18
    27ba:	425b      	negs	r3, r3
    27bc:	e016      	b.n	27ec <usb_d_ep_enable+0x6c>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    27be:	693b      	ldr	r3, [r7, #16]
    27c0:	781b      	ldrb	r3, [r3, #0]
    27c2:	2b00      	cmp	r3, #0
    27c4:	d101      	bne.n	27ca <usb_d_ep_enable+0x4a>
    27c6:	2202      	movs	r2, #2
    27c8:	e000      	b.n	27cc <usb_d_ep_enable+0x4c>
    27ca:	2201      	movs	r2, #1
    27cc:	693b      	ldr	r3, [r7, #16]
    27ce:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    27d0:	1dfb      	adds	r3, r7, #7
    27d2:	781b      	ldrb	r3, [r3, #0]
    27d4:	0018      	movs	r0, r3
    27d6:	4b09      	ldr	r3, [pc, #36]	; (27fc <usb_d_ep_enable+0x7c>)
    27d8:	4798      	blx	r3
    27da:	0003      	movs	r3, r0
    27dc:	60fb      	str	r3, [r7, #12]
	if (rc < 0) {
    27de:	68fb      	ldr	r3, [r7, #12]
    27e0:	2b00      	cmp	r3, #0
    27e2:	da02      	bge.n	27ea <usb_d_ep_enable+0x6a>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    27e4:	693b      	ldr	r3, [r7, #16]
    27e6:	2200      	movs	r2, #0
    27e8:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    27ea:	68fb      	ldr	r3, [r7, #12]
}
    27ec:	0018      	movs	r0, r3
    27ee:	46bd      	mov	sp, r7
    27f0:	b007      	add	sp, #28
    27f2:	bd90      	pop	{r4, r7, pc}
    27f4:	0000208d 	.word	0x0000208d
    27f8:	20000bf0 	.word	0x20000bf0
    27fc:	00006989 	.word	0x00006989

00002800 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    2800:	b5b0      	push	{r4, r5, r7, lr}
    2802:	b08c      	sub	sp, #48	; 0x30
    2804:	af02      	add	r7, sp, #8
    2806:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    2808:	687b      	ldr	r3, [r7, #4]
    280a:	7a1b      	ldrb	r3, [r3, #8]
    280c:	221f      	movs	r2, #31
    280e:	18bc      	adds	r4, r7, r2
    2810:	0018      	movs	r0, r3
    2812:	4b5e      	ldr	r3, [pc, #376]	; (298c <usb_d_ep_transfer+0x18c>)
    2814:	4798      	blx	r3
    2816:	0003      	movs	r3, r0
    2818:	7023      	strb	r3, [r4, #0]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    281a:	231f      	movs	r3, #31
    281c:	18fb      	adds	r3, r7, r3
    281e:	781b      	ldrb	r3, [r3, #0]
    2820:	b25b      	sxtb	r3, r3
    2822:	015a      	lsls	r2, r3, #5
    2824:	4b5a      	ldr	r3, [pc, #360]	; (2990 <usb_d_ep_transfer+0x190>)
    2826:	18d3      	adds	r3, r2, r3
    2828:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    282a:	687b      	ldr	r3, [r7, #4]
    282c:	7a1b      	ldrb	r3, [r3, #8]
    282e:	001a      	movs	r2, r3
    2830:	2380      	movs	r3, #128	; 0x80
    2832:	401a      	ands	r2, r3
    2834:	2327      	movs	r3, #39	; 0x27
    2836:	18fb      	adds	r3, r7, r3
    2838:	1e51      	subs	r1, r2, #1
    283a:	418a      	sbcs	r2, r1
    283c:	701a      	strb	r2, [r3, #0]
    283e:	687b      	ldr	r3, [r7, #4]
    2840:	7a5a      	ldrb	r2, [r3, #9]
    2842:	2326      	movs	r3, #38	; 0x26
    2844:	18fb      	adds	r3, r7, r3
    2846:	1e51      	subs	r1, r2, #1
    2848:	418a      	sbcs	r2, r1
    284a:	701a      	strb	r2, [r3, #0]
	uint32_t              len = xfer->size;
    284c:	687b      	ldr	r3, [r7, #4]
    284e:	685b      	ldr	r3, [r3, #4]
    2850:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    2852:	231f      	movs	r3, #31
    2854:	18fb      	adds	r3, r7, r3
    2856:	781b      	ldrb	r3, [r3, #0]
    2858:	2b7f      	cmp	r3, #127	; 0x7f
    285a:	d902      	bls.n	2862 <usb_d_ep_transfer+0x62>
		return -USB_ERR_PARAM;
    285c:	2312      	movs	r3, #18
    285e:	425b      	negs	r3, r3
    2860:	e090      	b.n	2984 <usb_d_ep_transfer+0x184>
	}

	atomic_enter_critical(&flags);
    2862:	2308      	movs	r3, #8
    2864:	18fb      	adds	r3, r7, r3
    2866:	0018      	movs	r0, r3
    2868:	4b4a      	ldr	r3, [pc, #296]	; (2994 <usb_d_ep_transfer+0x194>)
    286a:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    286c:	69bb      	ldr	r3, [r7, #24]
    286e:	789a      	ldrb	r2, [r3, #2]
    2870:	230f      	movs	r3, #15
    2872:	18fb      	adds	r3, r7, r3
    2874:	701a      	strb	r2, [r3, #0]
	if (state == USB_EP_S_IDLE) {
    2876:	230f      	movs	r3, #15
    2878:	18fb      	adds	r3, r7, r3
    287a:	781b      	ldrb	r3, [r3, #0]
    287c:	b2db      	uxtb	r3, r3
    287e:	2b01      	cmp	r3, #1
    2880:	d10c      	bne.n	289c <usb_d_ep_transfer+0x9c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    2882:	69bb      	ldr	r3, [r7, #24]
    2884:	2203      	movs	r2, #3
    2886:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    2888:	2308      	movs	r3, #8
    288a:	18fb      	adds	r3, r7, r3
    288c:	0018      	movs	r0, r3
    288e:	4b42      	ldr	r3, [pc, #264]	; (2998 <usb_d_ep_transfer+0x198>)
    2890:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2892:	69bb      	ldr	r3, [r7, #24]
    2894:	781b      	ldrb	r3, [r3, #0]
    2896:	2b00      	cmp	r3, #0
    2898:	d161      	bne.n	295e <usb_d_ep_transfer+0x15e>
    289a:	e019      	b.n	28d0 <usb_d_ep_transfer+0xd0>
		atomic_leave_critical(&flags);
    289c:	2308      	movs	r3, #8
    289e:	18fb      	adds	r3, r7, r3
    28a0:	0018      	movs	r0, r3
    28a2:	4b3d      	ldr	r3, [pc, #244]	; (2998 <usb_d_ep_transfer+0x198>)
    28a4:	4798      	blx	r3
		switch (state) {
    28a6:	230f      	movs	r3, #15
    28a8:	18fb      	adds	r3, r7, r3
    28aa:	781b      	ldrb	r3, [r3, #0]
    28ac:	b2db      	uxtb	r3, r3
    28ae:	2b05      	cmp	r3, #5
    28b0:	d004      	beq.n	28bc <usb_d_ep_transfer+0xbc>
    28b2:	2b06      	cmp	r3, #6
    28b4:	d004      	beq.n	28c0 <usb_d_ep_transfer+0xc0>
    28b6:	2b00      	cmp	r3, #0
    28b8:	d005      	beq.n	28c6 <usb_d_ep_transfer+0xc6>
    28ba:	e007      	b.n	28cc <usb_d_ep_transfer+0xcc>
			return USB_HALTED;
    28bc:	2302      	movs	r3, #2
    28be:	e061      	b.n	2984 <usb_d_ep_transfer+0x184>
			return -USB_ERROR;
    28c0:	2310      	movs	r3, #16
    28c2:	425b      	negs	r3, r3
    28c4:	e05e      	b.n	2984 <usb_d_ep_transfer+0x184>
			return -USB_ERR_FUNC;
    28c6:	2313      	movs	r3, #19
    28c8:	425b      	negs	r3, r3
    28ca:	e05b      	b.n	2984 <usb_d_ep_transfer+0x184>
			return USB_BUSY;
    28cc:	2301      	movs	r3, #1
    28ce:	e059      	b.n	2984 <usb_d_ep_transfer+0x184>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    28d0:	69bb      	ldr	r3, [r7, #24]
    28d2:	7c9b      	ldrb	r3, [r3, #18]
    28d4:	b299      	uxth	r1, r3
    28d6:	69bb      	ldr	r3, [r7, #24]
    28d8:	7cdb      	ldrb	r3, [r3, #19]
    28da:	b29b      	uxth	r3, r3
    28dc:	021b      	lsls	r3, r3, #8
    28de:	b29a      	uxth	r2, r3
    28e0:	2316      	movs	r3, #22
    28e2:	18fb      	adds	r3, r7, r3
    28e4:	188a      	adds	r2, r1, r2
    28e6:	801a      	strh	r2, [r3, #0]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    28e8:	2316      	movs	r3, #22
    28ea:	18fb      	adds	r3, r7, r3
    28ec:	881b      	ldrh	r3, [r3, #0]
    28ee:	2b00      	cmp	r3, #0
    28f0:	d10d      	bne.n	290e <usb_d_ep_transfer+0x10e>
			dir                 = true;
    28f2:	2327      	movs	r3, #39	; 0x27
    28f4:	18fb      	adds	r3, r7, r3
    28f6:	2201      	movs	r2, #1
    28f8:	701a      	strb	r2, [r3, #0]
			len                 = 0;
    28fa:	2300      	movs	r3, #0
    28fc:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    28fe:	2326      	movs	r3, #38	; 0x26
    2900:	18fb      	adds	r3, r7, r3
    2902:	2201      	movs	r2, #1
    2904:	701a      	strb	r2, [r3, #0]
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    2906:	69bb      	ldr	r3, [r7, #24]
    2908:	2204      	movs	r2, #4
    290a:	709a      	strb	r2, [r3, #2]
    290c:	e027      	b.n	295e <usb_d_ep_transfer+0x15e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    290e:	69bb      	ldr	r3, [r7, #24]
    2910:	7b1b      	ldrb	r3, [r3, #12]
    2912:	001a      	movs	r2, r3
    2914:	2380      	movs	r3, #128	; 0x80
    2916:	401a      	ands	r2, r3
    2918:	2327      	movs	r3, #39	; 0x27
    291a:	18fb      	adds	r3, r7, r3
    291c:	1e51      	subs	r1, r2, #1
    291e:	418a      	sbcs	r2, r1
    2920:	701a      	strb	r2, [r3, #0]
			/* Data length not exceed requested. */
			if (len > req_len) {
    2922:	2316      	movs	r3, #22
    2924:	18fb      	adds	r3, r7, r3
    2926:	881a      	ldrh	r2, [r3, #0]
    2928:	6a3b      	ldr	r3, [r7, #32]
    292a:	429a      	cmp	r2, r3
    292c:	d203      	bcs.n	2936 <usb_d_ep_transfer+0x136>
				len = req_len;
    292e:	2316      	movs	r3, #22
    2930:	18fb      	adds	r3, r7, r3
    2932:	881b      	ldrh	r3, [r3, #0]
    2934:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    2936:	2327      	movs	r3, #39	; 0x27
    2938:	18fb      	adds	r3, r7, r3
    293a:	781b      	ldrb	r3, [r3, #0]
    293c:	2b00      	cmp	r3, #0
    293e:	d00a      	beq.n	2956 <usb_d_ep_transfer+0x156>
				/* Setup -> In */
				zlp = (req_len > len);
    2940:	2316      	movs	r3, #22
    2942:	18fb      	adds	r3, r7, r3
    2944:	881a      	ldrh	r2, [r3, #0]
    2946:	2326      	movs	r3, #38	; 0x26
    2948:	18fb      	adds	r3, r7, r3
    294a:	6a39      	ldr	r1, [r7, #32]
    294c:	4291      	cmp	r1, r2
    294e:	4192      	sbcs	r2, r2
    2950:	4252      	negs	r2, r2
    2952:	701a      	strb	r2, [r3, #0]
    2954:	e003      	b.n	295e <usb_d_ep_transfer+0x15e>
			} else {
				zlp = false;
    2956:	2326      	movs	r3, #38	; 0x26
    2958:	18fb      	adds	r3, r7, r3
    295a:	2200      	movs	r2, #0
    295c:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    295e:	687b      	ldr	r3, [r7, #4]
    2960:	7a18      	ldrb	r0, [r3, #8]
    2962:	687b      	ldr	r3, [r7, #4]
    2964:	681c      	ldr	r4, [r3, #0]
    2966:	2326      	movs	r3, #38	; 0x26
    2968:	18fb      	adds	r3, r7, r3
    296a:	781b      	ldrb	r3, [r3, #0]
    296c:	6a3d      	ldr	r5, [r7, #32]
    296e:	2227      	movs	r2, #39	; 0x27
    2970:	18ba      	adds	r2, r7, r2
    2972:	7811      	ldrb	r1, [r2, #0]
    2974:	9300      	str	r3, [sp, #0]
    2976:	002b      	movs	r3, r5
    2978:	0022      	movs	r2, r4
    297a:	4c08      	ldr	r4, [pc, #32]	; (299c <usb_d_ep_transfer+0x19c>)
    297c:	47a0      	blx	r4
    297e:	0003      	movs	r3, r0
    2980:	613b      	str	r3, [r7, #16]
	return rc;
    2982:	693b      	ldr	r3, [r7, #16]
}
    2984:	0018      	movs	r0, r3
    2986:	46bd      	mov	sp, r7
    2988:	b00a      	add	sp, #40	; 0x28
    298a:	bdb0      	pop	{r4, r5, r7, pc}
    298c:	0000208d 	.word	0x0000208d
    2990:	20000bf0 	.word	0x20000bf0
    2994:	00001ad5 	.word	0x00001ad5
    2998:	00001af7 	.word	0x00001af7
    299c:	00002131 	.word	0x00002131

000029a0 <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    29a0:	b590      	push	{r4, r7, lr}
    29a2:	b087      	sub	sp, #28
    29a4:	af00      	add	r7, sp, #0
    29a6:	0002      	movs	r2, r0
    29a8:	1dfb      	adds	r3, r7, #7
    29aa:	701a      	strb	r2, [r3, #0]
	int8_t           ep_index = _usb_d_find_ep(ep);
    29ac:	2317      	movs	r3, #23
    29ae:	18fc      	adds	r4, r7, r3
    29b0:	1dfb      	adds	r3, r7, #7
    29b2:	781b      	ldrb	r3, [r3, #0]
    29b4:	0018      	movs	r0, r3
    29b6:	4b1d      	ldr	r3, [pc, #116]	; (2a2c <_usb_d_ep_halt_clr+0x8c>)
    29b8:	4798      	blx	r3
    29ba:	0003      	movs	r3, r0
    29bc:	7023      	strb	r3, [r4, #0]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    29be:	2317      	movs	r3, #23
    29c0:	18fb      	adds	r3, r7, r3
    29c2:	781b      	ldrb	r3, [r3, #0]
    29c4:	b25b      	sxtb	r3, r3
    29c6:	015a      	lsls	r2, r3, #5
    29c8:	4b19      	ldr	r3, [pc, #100]	; (2a30 <_usb_d_ep_halt_clr+0x90>)
    29ca:	18d3      	adds	r3, r2, r3
    29cc:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    29ce:	2317      	movs	r3, #23
    29d0:	18fb      	adds	r3, r7, r3
    29d2:	781b      	ldrb	r3, [r3, #0]
    29d4:	2b7f      	cmp	r3, #127	; 0x7f
    29d6:	d902      	bls.n	29de <_usb_d_ep_halt_clr+0x3e>
		return -USB_ERR_PARAM;
    29d8:	2312      	movs	r3, #18
    29da:	425b      	negs	r3, r3
    29dc:	e022      	b.n	2a24 <_usb_d_ep_halt_clr+0x84>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    29de:	1dfb      	adds	r3, r7, #7
    29e0:	781b      	ldrb	r3, [r3, #0]
    29e2:	2102      	movs	r1, #2
    29e4:	0018      	movs	r0, r3
    29e6:	4b13      	ldr	r3, [pc, #76]	; (2a34 <_usb_d_ep_halt_clr+0x94>)
    29e8:	4798      	blx	r3
    29ea:	1e03      	subs	r3, r0, #0
    29ec:	d019      	beq.n	2a22 <_usb_d_ep_halt_clr+0x82>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    29ee:	1dfb      	adds	r3, r7, #7
    29f0:	781b      	ldrb	r3, [r3, #0]
    29f2:	2100      	movs	r1, #0
    29f4:	0018      	movs	r0, r3
    29f6:	4b0f      	ldr	r3, [pc, #60]	; (2a34 <_usb_d_ep_halt_clr+0x94>)
    29f8:	4798      	blx	r3
    29fa:	0003      	movs	r3, r0
    29fc:	60fb      	str	r3, [r7, #12]
		if (rc < 0) {
    29fe:	68fb      	ldr	r3, [r7, #12]
    2a00:	2b00      	cmp	r3, #0
    2a02:	da01      	bge.n	2a08 <_usb_d_ep_halt_clr+0x68>
			return rc;
    2a04:	68fb      	ldr	r3, [r7, #12]
    2a06:	e00d      	b.n	2a24 <_usb_d_ep_halt_clr+0x84>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    2a08:	693b      	ldr	r3, [r7, #16]
    2a0a:	2201      	movs	r2, #1
    2a0c:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    2a0e:	693b      	ldr	r3, [r7, #16]
    2a10:	2203      	movs	r2, #3
    2a12:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    2a14:	693b      	ldr	r3, [r7, #16]
    2a16:	69db      	ldr	r3, [r3, #28]
    2a18:	1dfa      	adds	r2, r7, #7
    2a1a:	7810      	ldrb	r0, [r2, #0]
    2a1c:	2200      	movs	r2, #0
    2a1e:	2103      	movs	r1, #3
    2a20:	4798      	blx	r3
	}
	return ERR_NONE;
    2a22:	2300      	movs	r3, #0
}
    2a24:	0018      	movs	r0, r3
    2a26:	46bd      	mov	sp, r7
    2a28:	b007      	add	sp, #28
    2a2a:	bd90      	pop	{r4, r7, pc}
    2a2c:	0000208d 	.word	0x0000208d
    2a30:	20000bf0 	.word	0x20000bf0
    2a34:	00006de5 	.word	0x00006de5

00002a38 <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    2a38:	b580      	push	{r7, lr}
    2a3a:	b082      	sub	sp, #8
    2a3c:	af00      	add	r7, sp, #0
    2a3e:	0002      	movs	r2, r0
    2a40:	1dfb      	adds	r3, r7, #7
    2a42:	701a      	strb	r2, [r3, #0]
    2a44:	1dbb      	adds	r3, r7, #6
    2a46:	1c0a      	adds	r2, r1, #0
    2a48:	701a      	strb	r2, [r3, #0]
	if (ctrl == USB_EP_HALT_CLR) {
    2a4a:	1dbb      	adds	r3, r7, #6
    2a4c:	781b      	ldrb	r3, [r3, #0]
    2a4e:	2b00      	cmp	r3, #0
    2a50:	d106      	bne.n	2a60 <usb_d_ep_halt+0x28>
		return _usb_d_ep_halt_clr(ep);
    2a52:	1dfb      	adds	r3, r7, #7
    2a54:	781b      	ldrb	r3, [r3, #0]
    2a56:	0018      	movs	r0, r3
    2a58:	4b0d      	ldr	r3, [pc, #52]	; (2a90 <usb_d_ep_halt+0x58>)
    2a5a:	4798      	blx	r3
    2a5c:	0003      	movs	r3, r0
    2a5e:	e012      	b.n	2a86 <usb_d_ep_halt+0x4e>
	} else if (ctrl == USB_EP_HALT_SET) {
    2a60:	1dbb      	adds	r3, r7, #6
    2a62:	781b      	ldrb	r3, [r3, #0]
    2a64:	2b01      	cmp	r3, #1
    2a66:	d107      	bne.n	2a78 <usb_d_ep_halt+0x40>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2a68:	1dfb      	adds	r3, r7, #7
    2a6a:	781b      	ldrb	r3, [r3, #0]
    2a6c:	2101      	movs	r1, #1
    2a6e:	0018      	movs	r0, r3
    2a70:	4b08      	ldr	r3, [pc, #32]	; (2a94 <usb_d_ep_halt+0x5c>)
    2a72:	4798      	blx	r3
    2a74:	0003      	movs	r3, r0
    2a76:	e006      	b.n	2a86 <usb_d_ep_halt+0x4e>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    2a78:	1dfb      	adds	r3, r7, #7
    2a7a:	781b      	ldrb	r3, [r3, #0]
    2a7c:	2102      	movs	r1, #2
    2a7e:	0018      	movs	r0, r3
    2a80:	4b04      	ldr	r3, [pc, #16]	; (2a94 <usb_d_ep_halt+0x5c>)
    2a82:	4798      	blx	r3
    2a84:	0003      	movs	r3, r0
	}
}
    2a86:	0018      	movs	r0, r3
    2a88:	46bd      	mov	sp, r7
    2a8a:	b002      	add	sp, #8
    2a8c:	bd80      	pop	{r7, pc}
    2a8e:	46c0      	nop			; (mov r8, r8)
    2a90:	000029a1 	.word	0x000029a1
    2a94:	00006de5 	.word	0x00006de5

00002a98 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    2a98:	b590      	push	{r4, r7, lr}
    2a9a:	b087      	sub	sp, #28
    2a9c:	af00      	add	r7, sp, #0
    2a9e:	603a      	str	r2, [r7, #0]
    2aa0:	1dfb      	adds	r3, r7, #7
    2aa2:	1c02      	adds	r2, r0, #0
    2aa4:	701a      	strb	r2, [r3, #0]
    2aa6:	1dbb      	adds	r3, r7, #6
    2aa8:	1c0a      	adds	r2, r1, #0
    2aaa:	701a      	strb	r2, [r3, #0]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2aac:	2317      	movs	r3, #23
    2aae:	18fc      	adds	r4, r7, r3
    2ab0:	1dfb      	adds	r3, r7, #7
    2ab2:	781b      	ldrb	r3, [r3, #0]
    2ab4:	0018      	movs	r0, r3
    2ab6:	4b18      	ldr	r3, [pc, #96]	; (2b18 <usb_d_ep_register_callback+0x80>)
    2ab8:	4798      	blx	r3
    2aba:	0003      	movs	r3, r0
    2abc:	7023      	strb	r3, [r4, #0]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2abe:	2317      	movs	r3, #23
    2ac0:	18fb      	adds	r3, r7, r3
    2ac2:	781b      	ldrb	r3, [r3, #0]
    2ac4:	b25b      	sxtb	r3, r3
    2ac6:	015a      	lsls	r2, r3, #5
    2ac8:	4b14      	ldr	r3, [pc, #80]	; (2b1c <usb_d_ep_register_callback+0x84>)
    2aca:	18d3      	adds	r3, r2, r3
    2acc:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    2ace:	683b      	ldr	r3, [r7, #0]
    2ad0:	2b00      	cmp	r3, #0
    2ad2:	d001      	beq.n	2ad8 <usb_d_ep_register_callback+0x40>
    2ad4:	683b      	ldr	r3, [r7, #0]
    2ad6:	e000      	b.n	2ada <usb_d_ep_register_callback+0x42>
    2ad8:	4b11      	ldr	r3, [pc, #68]	; (2b20 <usb_d_ep_register_callback+0x88>)
    2ada:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    2adc:	2317      	movs	r3, #23
    2ade:	18fb      	adds	r3, r7, r3
    2ae0:	781b      	ldrb	r3, [r3, #0]
    2ae2:	2b7f      	cmp	r3, #127	; 0x7f
    2ae4:	d814      	bhi.n	2b10 <usb_d_ep_register_callback+0x78>
		return;
	}
	switch (type) {
    2ae6:	1dbb      	adds	r3, r7, #6
    2ae8:	781b      	ldrb	r3, [r3, #0]
    2aea:	2b01      	cmp	r3, #1
    2aec:	d008      	beq.n	2b00 <usb_d_ep_register_callback+0x68>
    2aee:	2b02      	cmp	r3, #2
    2af0:	d00a      	beq.n	2b08 <usb_d_ep_register_callback+0x70>
    2af2:	2b00      	cmp	r3, #0
    2af4:	d000      	beq.n	2af8 <usb_d_ep_register_callback+0x60>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    2af6:	e00c      	b.n	2b12 <usb_d_ep_register_callback+0x7a>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    2af8:	693b      	ldr	r3, [r7, #16]
    2afa:	68fa      	ldr	r2, [r7, #12]
    2afc:	615a      	str	r2, [r3, #20]
		break;
    2afe:	e008      	b.n	2b12 <usb_d_ep_register_callback+0x7a>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    2b00:	693b      	ldr	r3, [r7, #16]
    2b02:	68fa      	ldr	r2, [r7, #12]
    2b04:	619a      	str	r2, [r3, #24]
		break;
    2b06:	e004      	b.n	2b12 <usb_d_ep_register_callback+0x7a>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    2b08:	693b      	ldr	r3, [r7, #16]
    2b0a:	68fa      	ldr	r2, [r7, #12]
    2b0c:	61da      	str	r2, [r3, #28]
		break;
    2b0e:	e000      	b.n	2b12 <usb_d_ep_register_callback+0x7a>
		return;
    2b10:	46c0      	nop			; (mov r8, r8)
	}
}
    2b12:	46bd      	mov	sp, r7
    2b14:	b007      	add	sp, #28
    2b16:	bd90      	pop	{r4, r7, pc}
    2b18:	0000208d 	.word	0x0000208d
    2b1c:	20000bf0 	.word	0x20000bf0
    2b20:	000021ad 	.word	0x000021ad

00002b24 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    2b24:	b580      	push	{r7, lr}
    2b26:	b084      	sub	sp, #16
    2b28:	af00      	add	r7, sp, #0
    2b2a:	60b9      	str	r1, [r7, #8]
    2b2c:	607a      	str	r2, [r7, #4]
    2b2e:	230f      	movs	r3, #15
    2b30:	18fb      	adds	r3, r7, r3
    2b32:	1c02      	adds	r2, r0, #0
    2b34:	701a      	strb	r2, [r3, #0]
	if (!(condition)) {
    2b36:	230f      	movs	r3, #15
    2b38:	18fb      	adds	r3, r7, r3
    2b3a:	781b      	ldrb	r3, [r3, #0]
    2b3c:	2201      	movs	r2, #1
    2b3e:	4053      	eors	r3, r2
    2b40:	b2db      	uxtb	r3, r3
    2b42:	2b00      	cmp	r3, #0
    2b44:	d000      	beq.n	2b48 <assert+0x24>
		__asm("BKPT #0");
    2b46:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    2b48:	46c0      	nop			; (mov r8, r8)
    2b4a:	46bd      	mov	sp, r7
    2b4c:	b004      	add	sp, #16
    2b4e:	bd80      	pop	{r7, pc}

00002b50 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    2b50:	b590      	push	{r4, r7, lr}
    2b52:	b083      	sub	sp, #12
    2b54:	af00      	add	r7, sp, #0
    2b56:	6039      	str	r1, [r7, #0]
    2b58:	0011      	movs	r1, r2
    2b5a:	1dbb      	adds	r3, r7, #6
    2b5c:	1c02      	adds	r2, r0, #0
    2b5e:	801a      	strh	r2, [r3, #0]
    2b60:	1d7b      	adds	r3, r7, #5
    2b62:	1c0a      	adds	r2, r1, #0
    2b64:	701a      	strb	r2, [r3, #0]
	switch (power) {
    2b66:	1d7b      	adds	r3, r7, #5
    2b68:	781b      	ldrb	r3, [r3, #0]
    2b6a:	3b04      	subs	r3, #4
    2b6c:	2b04      	cmp	r3, #4
    2b6e:	d859      	bhi.n	2c24 <_get_cycles_for_us_internal+0xd4>
    2b70:	009a      	lsls	r2, r3, #2
    2b72:	4b34      	ldr	r3, [pc, #208]	; (2c44 <_get_cycles_for_us_internal+0xf4>)
    2b74:	18d3      	adds	r3, r2, r3
    2b76:	681b      	ldr	r3, [r3, #0]
    2b78:	469f      	mov	pc, r3
	case 8:
		return (us * (freq / 100000) - 1) / 10 + 1;
    2b7a:	1dbb      	adds	r3, r7, #6
    2b7c:	881c      	ldrh	r4, [r3, #0]
    2b7e:	683a      	ldr	r2, [r7, #0]
    2b80:	4b31      	ldr	r3, [pc, #196]	; (2c48 <_get_cycles_for_us_internal+0xf8>)
    2b82:	4932      	ldr	r1, [pc, #200]	; (2c4c <_get_cycles_for_us_internal+0xfc>)
    2b84:	0010      	movs	r0, r2
    2b86:	4798      	blx	r3
    2b88:	0003      	movs	r3, r0
    2b8a:	4363      	muls	r3, r4
    2b8c:	1e5a      	subs	r2, r3, #1
    2b8e:	4b2e      	ldr	r3, [pc, #184]	; (2c48 <_get_cycles_for_us_internal+0xf8>)
    2b90:	210a      	movs	r1, #10
    2b92:	0010      	movs	r0, r2
    2b94:	4798      	blx	r3
    2b96:	0003      	movs	r3, r0
    2b98:	3301      	adds	r3, #1
    2b9a:	e04e      	b.n	2c3a <_get_cycles_for_us_internal+0xea>
	case 7:
		return (us * (freq / 10000) - 1) / 100 + 1;
    2b9c:	1dbb      	adds	r3, r7, #6
    2b9e:	881c      	ldrh	r4, [r3, #0]
    2ba0:	683a      	ldr	r2, [r7, #0]
    2ba2:	4b29      	ldr	r3, [pc, #164]	; (2c48 <_get_cycles_for_us_internal+0xf8>)
    2ba4:	492a      	ldr	r1, [pc, #168]	; (2c50 <_get_cycles_for_us_internal+0x100>)
    2ba6:	0010      	movs	r0, r2
    2ba8:	4798      	blx	r3
    2baa:	0003      	movs	r3, r0
    2bac:	4363      	muls	r3, r4
    2bae:	1e5a      	subs	r2, r3, #1
    2bb0:	4b25      	ldr	r3, [pc, #148]	; (2c48 <_get_cycles_for_us_internal+0xf8>)
    2bb2:	2164      	movs	r1, #100	; 0x64
    2bb4:	0010      	movs	r0, r2
    2bb6:	4798      	blx	r3
    2bb8:	0003      	movs	r3, r0
    2bba:	3301      	adds	r3, #1
    2bbc:	e03d      	b.n	2c3a <_get_cycles_for_us_internal+0xea>
	case 6:
		return (us * (freq / 1000) - 1) / 1000 + 1;
    2bbe:	1dbb      	adds	r3, r7, #6
    2bc0:	881c      	ldrh	r4, [r3, #0]
    2bc2:	6838      	ldr	r0, [r7, #0]
    2bc4:	4b20      	ldr	r3, [pc, #128]	; (2c48 <_get_cycles_for_us_internal+0xf8>)
    2bc6:	22fa      	movs	r2, #250	; 0xfa
    2bc8:	0091      	lsls	r1, r2, #2
    2bca:	4798      	blx	r3
    2bcc:	0003      	movs	r3, r0
    2bce:	4363      	muls	r3, r4
    2bd0:	1e58      	subs	r0, r3, #1
    2bd2:	4b1d      	ldr	r3, [pc, #116]	; (2c48 <_get_cycles_for_us_internal+0xf8>)
    2bd4:	22fa      	movs	r2, #250	; 0xfa
    2bd6:	0091      	lsls	r1, r2, #2
    2bd8:	4798      	blx	r3
    2bda:	0003      	movs	r3, r0
    2bdc:	3301      	adds	r3, #1
    2bde:	e02c      	b.n	2c3a <_get_cycles_for_us_internal+0xea>
	case 5:
		return (us * (freq / 100) - 1) / 10000 + 1;
    2be0:	1dbb      	adds	r3, r7, #6
    2be2:	881c      	ldrh	r4, [r3, #0]
    2be4:	683a      	ldr	r2, [r7, #0]
    2be6:	4b18      	ldr	r3, [pc, #96]	; (2c48 <_get_cycles_for_us_internal+0xf8>)
    2be8:	2164      	movs	r1, #100	; 0x64
    2bea:	0010      	movs	r0, r2
    2bec:	4798      	blx	r3
    2bee:	0003      	movs	r3, r0
    2bf0:	4363      	muls	r3, r4
    2bf2:	1e5a      	subs	r2, r3, #1
    2bf4:	4b14      	ldr	r3, [pc, #80]	; (2c48 <_get_cycles_for_us_internal+0xf8>)
    2bf6:	4916      	ldr	r1, [pc, #88]	; (2c50 <_get_cycles_for_us_internal+0x100>)
    2bf8:	0010      	movs	r0, r2
    2bfa:	4798      	blx	r3
    2bfc:	0003      	movs	r3, r0
    2bfe:	3301      	adds	r3, #1
    2c00:	e01b      	b.n	2c3a <_get_cycles_for_us_internal+0xea>
	case 4:
		return (us * (freq / 10) - 1) / 100000 + 1;
    2c02:	1dbb      	adds	r3, r7, #6
    2c04:	881c      	ldrh	r4, [r3, #0]
    2c06:	683a      	ldr	r2, [r7, #0]
    2c08:	4b0f      	ldr	r3, [pc, #60]	; (2c48 <_get_cycles_for_us_internal+0xf8>)
    2c0a:	210a      	movs	r1, #10
    2c0c:	0010      	movs	r0, r2
    2c0e:	4798      	blx	r3
    2c10:	0003      	movs	r3, r0
    2c12:	4363      	muls	r3, r4
    2c14:	1e5a      	subs	r2, r3, #1
    2c16:	4b0c      	ldr	r3, [pc, #48]	; (2c48 <_get_cycles_for_us_internal+0xf8>)
    2c18:	490c      	ldr	r1, [pc, #48]	; (2c4c <_get_cycles_for_us_internal+0xfc>)
    2c1a:	0010      	movs	r0, r2
    2c1c:	4798      	blx	r3
    2c1e:	0003      	movs	r3, r0
    2c20:	3301      	adds	r3, #1
    2c22:	e00a      	b.n	2c3a <_get_cycles_for_us_internal+0xea>
	default:
		return (us * freq - 1) / 1000000 + 1;
    2c24:	1dbb      	adds	r3, r7, #6
    2c26:	881b      	ldrh	r3, [r3, #0]
    2c28:	683a      	ldr	r2, [r7, #0]
    2c2a:	4353      	muls	r3, r2
    2c2c:	1e5a      	subs	r2, r3, #1
    2c2e:	4b06      	ldr	r3, [pc, #24]	; (2c48 <_get_cycles_for_us_internal+0xf8>)
    2c30:	4908      	ldr	r1, [pc, #32]	; (2c54 <_get_cycles_for_us_internal+0x104>)
    2c32:	0010      	movs	r0, r2
    2c34:	4798      	blx	r3
    2c36:	0003      	movs	r3, r0
    2c38:	3301      	adds	r3, #1
	}
}
    2c3a:	0018      	movs	r0, r3
    2c3c:	46bd      	mov	sp, r7
    2c3e:	b003      	add	sp, #12
    2c40:	bd90      	pop	{r4, r7, pc}
    2c42:	46c0      	nop			; (mov r8, r8)
    2c44:	00012254 	.word	0x00012254
    2c48:	0000a485 	.word	0x0000a485
    2c4c:	000186a0 	.word	0x000186a0
    2c50:	00002710 	.word	0x00002710
    2c54:	000f4240 	.word	0x000f4240

00002c58 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    2c58:	b590      	push	{r4, r7, lr}
    2c5a:	b083      	sub	sp, #12
    2c5c:	af00      	add	r7, sp, #0
    2c5e:	6039      	str	r1, [r7, #0]
    2c60:	0011      	movs	r1, r2
    2c62:	1dbb      	adds	r3, r7, #6
    2c64:	1c02      	adds	r2, r0, #0
    2c66:	801a      	strh	r2, [r3, #0]
    2c68:	1d7b      	adds	r3, r7, #5
    2c6a:	1c0a      	adds	r2, r1, #0
    2c6c:	701a      	strb	r2, [r3, #0]
	switch (power) {
    2c6e:	1d7b      	adds	r3, r7, #5
    2c70:	781b      	ldrb	r3, [r3, #0]
    2c72:	3b04      	subs	r3, #4
    2c74:	2b04      	cmp	r3, #4
    2c76:	d84b      	bhi.n	2d10 <_get_cycles_for_ms_internal+0xb8>
    2c78:	009a      	lsls	r2, r3, #2
    2c7a:	4b2d      	ldr	r3, [pc, #180]	; (2d30 <_get_cycles_for_ms_internal+0xd8>)
    2c7c:	18d3      	adds	r3, r2, r3
    2c7e:	681b      	ldr	r3, [r3, #0]
    2c80:	469f      	mov	pc, r3
	case 8:
		return (ms * (freq / 100000)) * 100;
    2c82:	1dbb      	adds	r3, r7, #6
    2c84:	881c      	ldrh	r4, [r3, #0]
    2c86:	683a      	ldr	r2, [r7, #0]
    2c88:	4b2a      	ldr	r3, [pc, #168]	; (2d34 <_get_cycles_for_ms_internal+0xdc>)
    2c8a:	492b      	ldr	r1, [pc, #172]	; (2d38 <_get_cycles_for_ms_internal+0xe0>)
    2c8c:	0010      	movs	r0, r2
    2c8e:	4798      	blx	r3
    2c90:	0003      	movs	r3, r0
    2c92:	4363      	muls	r3, r4
    2c94:	2264      	movs	r2, #100	; 0x64
    2c96:	4353      	muls	r3, r2
    2c98:	e045      	b.n	2d26 <_get_cycles_for_ms_internal+0xce>
	case 7:
		return (ms * (freq / 10000)) * 10;
    2c9a:	1dbb      	adds	r3, r7, #6
    2c9c:	881c      	ldrh	r4, [r3, #0]
    2c9e:	683a      	ldr	r2, [r7, #0]
    2ca0:	4b24      	ldr	r3, [pc, #144]	; (2d34 <_get_cycles_for_ms_internal+0xdc>)
    2ca2:	4926      	ldr	r1, [pc, #152]	; (2d3c <_get_cycles_for_ms_internal+0xe4>)
    2ca4:	0010      	movs	r0, r2
    2ca6:	4798      	blx	r3
    2ca8:	0003      	movs	r3, r0
    2caa:	4363      	muls	r3, r4
    2cac:	001a      	movs	r2, r3
    2cae:	0013      	movs	r3, r2
    2cb0:	009b      	lsls	r3, r3, #2
    2cb2:	189b      	adds	r3, r3, r2
    2cb4:	005b      	lsls	r3, r3, #1
    2cb6:	e036      	b.n	2d26 <_get_cycles_for_ms_internal+0xce>
	case 6:
		return (ms * (freq / 1000));
    2cb8:	1dbb      	adds	r3, r7, #6
    2cba:	881c      	ldrh	r4, [r3, #0]
    2cbc:	6838      	ldr	r0, [r7, #0]
    2cbe:	4b1d      	ldr	r3, [pc, #116]	; (2d34 <_get_cycles_for_ms_internal+0xdc>)
    2cc0:	22fa      	movs	r2, #250	; 0xfa
    2cc2:	0091      	lsls	r1, r2, #2
    2cc4:	4798      	blx	r3
    2cc6:	0003      	movs	r3, r0
    2cc8:	4363      	muls	r3, r4
    2cca:	e02c      	b.n	2d26 <_get_cycles_for_ms_internal+0xce>
	case 5:
		return (ms * (freq / 100) - 1) / 10 + 1;
    2ccc:	1dbb      	adds	r3, r7, #6
    2cce:	881c      	ldrh	r4, [r3, #0]
    2cd0:	683a      	ldr	r2, [r7, #0]
    2cd2:	4b18      	ldr	r3, [pc, #96]	; (2d34 <_get_cycles_for_ms_internal+0xdc>)
    2cd4:	2164      	movs	r1, #100	; 0x64
    2cd6:	0010      	movs	r0, r2
    2cd8:	4798      	blx	r3
    2cda:	0003      	movs	r3, r0
    2cdc:	4363      	muls	r3, r4
    2cde:	1e5a      	subs	r2, r3, #1
    2ce0:	4b14      	ldr	r3, [pc, #80]	; (2d34 <_get_cycles_for_ms_internal+0xdc>)
    2ce2:	210a      	movs	r1, #10
    2ce4:	0010      	movs	r0, r2
    2ce6:	4798      	blx	r3
    2ce8:	0003      	movs	r3, r0
    2cea:	3301      	adds	r3, #1
    2cec:	e01b      	b.n	2d26 <_get_cycles_for_ms_internal+0xce>
	case 4:
		return (ms * (freq / 10) - 1) / 100 + 1;
    2cee:	1dbb      	adds	r3, r7, #6
    2cf0:	881c      	ldrh	r4, [r3, #0]
    2cf2:	683a      	ldr	r2, [r7, #0]
    2cf4:	4b0f      	ldr	r3, [pc, #60]	; (2d34 <_get_cycles_for_ms_internal+0xdc>)
    2cf6:	210a      	movs	r1, #10
    2cf8:	0010      	movs	r0, r2
    2cfa:	4798      	blx	r3
    2cfc:	0003      	movs	r3, r0
    2cfe:	4363      	muls	r3, r4
    2d00:	1e5a      	subs	r2, r3, #1
    2d02:	4b0c      	ldr	r3, [pc, #48]	; (2d34 <_get_cycles_for_ms_internal+0xdc>)
    2d04:	2164      	movs	r1, #100	; 0x64
    2d06:	0010      	movs	r0, r2
    2d08:	4798      	blx	r3
    2d0a:	0003      	movs	r3, r0
    2d0c:	3301      	adds	r3, #1
    2d0e:	e00a      	b.n	2d26 <_get_cycles_for_ms_internal+0xce>
	default:
		return (ms * freq - 1) / 1000 + 1;
    2d10:	1dbb      	adds	r3, r7, #6
    2d12:	881b      	ldrh	r3, [r3, #0]
    2d14:	683a      	ldr	r2, [r7, #0]
    2d16:	4353      	muls	r3, r2
    2d18:	1e58      	subs	r0, r3, #1
    2d1a:	4b06      	ldr	r3, [pc, #24]	; (2d34 <_get_cycles_for_ms_internal+0xdc>)
    2d1c:	22fa      	movs	r2, #250	; 0xfa
    2d1e:	0091      	lsls	r1, r2, #2
    2d20:	4798      	blx	r3
    2d22:	0003      	movs	r3, r0
    2d24:	3301      	adds	r3, #1
	}
}
    2d26:	0018      	movs	r0, r3
    2d28:	46bd      	mov	sp, r7
    2d2a:	b003      	add	sp, #12
    2d2c:	bd90      	pop	{r4, r7, pc}
    2d2e:	46c0      	nop			; (mov r8, r8)
    2d30:	00012268 	.word	0x00012268
    2d34:	0000a485 	.word	0x0000a485
    2d38:	000186a0 	.word	0x000186a0
    2d3c:	00002710 	.word	0x00002710

00002d40 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    2d40:	b580      	push	{r7, lr}
    2d42:	b082      	sub	sp, #8
    2d44:	af00      	add	r7, sp, #0
    2d46:	0002      	movs	r2, r0
    2d48:	1dbb      	adds	r3, r7, #6
    2d4a:	801a      	strh	r2, [r3, #0]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    2d4c:	4905      	ldr	r1, [pc, #20]	; (2d64 <_get_cycles_for_ms+0x24>)
    2d4e:	1dbb      	adds	r3, r7, #6
    2d50:	881b      	ldrh	r3, [r3, #0]
    2d52:	2208      	movs	r2, #8
    2d54:	0018      	movs	r0, r3
    2d56:	4b04      	ldr	r3, [pc, #16]	; (2d68 <_get_cycles_for_ms+0x28>)
    2d58:	4798      	blx	r3
    2d5a:	0003      	movs	r3, r0
}
    2d5c:	0018      	movs	r0, r3
    2d5e:	46bd      	mov	sp, r7
    2d60:	b002      	add	sp, #8
    2d62:	bd80      	pop	{r7, pc}
    2d64:	02dc7000 	.word	0x02dc7000
    2d68:	00002c59 	.word	0x00002c59

00002d6c <hri_nvmctrl_set_CTRLB_RWS_bf>:
	((Nvmctrl *)hw)->CTRLB.reg ^= NVMCTRL_CTRLB_CACHEDIS;
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
    2d6c:	b580      	push	{r7, lr}
    2d6e:	b082      	sub	sp, #8
    2d70:	af00      	add	r7, sp, #0
    2d72:	6078      	str	r0, [r7, #4]
    2d74:	6039      	str	r1, [r7, #0]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    2d76:	687b      	ldr	r3, [r7, #4]
    2d78:	685a      	ldr	r2, [r3, #4]
    2d7a:	683b      	ldr	r3, [r7, #0]
    2d7c:	005b      	lsls	r3, r3, #1
    2d7e:	211e      	movs	r1, #30
    2d80:	400b      	ands	r3, r1
    2d82:	431a      	orrs	r2, r3
    2d84:	687b      	ldr	r3, [r7, #4]
    2d86:	605a      	str	r2, [r3, #4]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    2d88:	46c0      	nop			; (mov r8, r8)
    2d8a:	46bd      	mov	sp, r7
    2d8c:	b002      	add	sp, #8
    2d8e:	bd80      	pop	{r7, pc}

00002d90 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    2d90:	b580      	push	{r7, lr}
    2d92:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    2d94:	4b08      	ldr	r3, [pc, #32]	; (2db8 <_init_chip+0x28>)
    2d96:	2100      	movs	r1, #0
    2d98:	0018      	movs	r0, r3
    2d9a:	4b08      	ldr	r3, [pc, #32]	; (2dbc <_init_chip+0x2c>)
    2d9c:	4798      	blx	r3

	_pm_init();
    2d9e:	4b08      	ldr	r3, [pc, #32]	; (2dc0 <_init_chip+0x30>)
    2da0:	4798      	blx	r3
	_sysctrl_init_sources();
    2da2:	4b08      	ldr	r3, [pc, #32]	; (2dc4 <_init_chip+0x34>)
    2da4:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
    2da6:	4b08      	ldr	r3, [pc, #32]	; (2dc8 <_init_chip+0x38>)
    2da8:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    2daa:	20ff      	movs	r0, #255	; 0xff
    2dac:	4b07      	ldr	r3, [pc, #28]	; (2dcc <_init_chip+0x3c>)
    2dae:	4798      	blx	r3
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
    2db0:	46c0      	nop			; (mov r8, r8)
    2db2:	46bd      	mov	sp, r7
    2db4:	bd80      	pop	{r7, pc}
    2db6:	46c0      	nop			; (mov r8, r8)
    2db8:	41004000 	.word	0x41004000
    2dbc:	00002d6d 	.word	0x00002d6d
    2dc0:	00003011 	.word	0x00003011
    2dc4:	00004265 	.word	0x00004265
    2dc8:	00004385 	.word	0x00004385
    2dcc:	00002e2d 	.word	0x00002e2d

00002dd0 <hri_gclk_wait_for_sync>:
{
    2dd0:	b580      	push	{r7, lr}
    2dd2:	b082      	sub	sp, #8
    2dd4:	af00      	add	r7, sp, #0
    2dd6:	6078      	str	r0, [r7, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    2dd8:	46c0      	nop			; (mov r8, r8)
    2dda:	687b      	ldr	r3, [r7, #4]
    2ddc:	785b      	ldrb	r3, [r3, #1]
    2dde:	061b      	lsls	r3, r3, #24
    2de0:	0fdb      	lsrs	r3, r3, #31
    2de2:	b2db      	uxtb	r3, r3
    2de4:	2b00      	cmp	r3, #0
    2de6:	d1f8      	bne.n	2dda <hri_gclk_wait_for_sync+0xa>
}
    2de8:	46c0      	nop			; (mov r8, r8)
    2dea:	46bd      	mov	sp, r7
    2dec:	b002      	add	sp, #8
    2dee:	bd80      	pop	{r7, pc}

00002df0 <hri_gclk_write_GENCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_GENCTRL_reg(const void *const hw, hri_gclk_genctrl_reg_t data)
{
    2df0:	b580      	push	{r7, lr}
    2df2:	b082      	sub	sp, #8
    2df4:	af00      	add	r7, sp, #0
    2df6:	6078      	str	r0, [r7, #4]
    2df8:	6039      	str	r1, [r7, #0]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENCTRL.reg = data;
    2dfa:	687b      	ldr	r3, [r7, #4]
    2dfc:	683a      	ldr	r2, [r7, #0]
    2dfe:	605a      	str	r2, [r3, #4]
	hri_gclk_wait_for_sync(hw);
    2e00:	687b      	ldr	r3, [r7, #4]
    2e02:	0018      	movs	r0, r3
    2e04:	4b02      	ldr	r3, [pc, #8]	; (2e10 <hri_gclk_write_GENCTRL_reg+0x20>)
    2e06:	4798      	blx	r3
	GCLK_CRITICAL_SECTION_LEAVE();
}
    2e08:	46c0      	nop			; (mov r8, r8)
    2e0a:	46bd      	mov	sp, r7
    2e0c:	b002      	add	sp, #8
    2e0e:	bd80      	pop	{r7, pc}
    2e10:	00002dd1 	.word	0x00002dd1

00002e14 <hri_gclk_write_GENDIV_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
    2e14:	b580      	push	{r7, lr}
    2e16:	b082      	sub	sp, #8
    2e18:	af00      	add	r7, sp, #0
    2e1a:	6078      	str	r0, [r7, #4]
    2e1c:	6039      	str	r1, [r7, #0]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
    2e1e:	687b      	ldr	r3, [r7, #4]
    2e20:	683a      	ldr	r2, [r7, #0]
    2e22:	609a      	str	r2, [r3, #8]
	GCLK_CRITICAL_SECTION_LEAVE();
}
    2e24:	46c0      	nop			; (mov r8, r8)
    2e26:	46bd      	mov	sp, r7
    2e28:	b002      	add	sp, #8
    2e2a:	bd80      	pop	{r7, pc}

00002e2c <_gclk_init_generators_by_fref>:
	        | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    2e2c:	b580      	push	{r7, lr}
    2e2e:	b082      	sub	sp, #8
    2e30:	af00      	add	r7, sp, #0
    2e32:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    2e34:	687b      	ldr	r3, [r7, #4]
    2e36:	2201      	movs	r2, #1
    2e38:	4013      	ands	r3, r2
    2e3a:	d00c      	beq.n	2e56 <_gclk_init_generators_by_fref+0x2a>
		hri_gclk_write_GENDIV_reg(GCLK, GCLK_GENDIV_DIV(CONF_GCLK_GEN_0_DIV) | GCLK_GENDIV_ID(0));
    2e3c:	2380      	movs	r3, #128	; 0x80
    2e3e:	005b      	lsls	r3, r3, #1
    2e40:	4a38      	ldr	r2, [pc, #224]	; (2f24 <_gclk_init_generators_by_fref+0xf8>)
    2e42:	0019      	movs	r1, r3
    2e44:	0010      	movs	r0, r2
    2e46:	4b38      	ldr	r3, [pc, #224]	; (2f28 <_gclk_init_generators_by_fref+0xfc>)
    2e48:	4798      	blx	r3
		hri_gclk_write_GENCTRL_reg(
    2e4a:	4a38      	ldr	r2, [pc, #224]	; (2f2c <_gclk_init_generators_by_fref+0x100>)
    2e4c:	4b35      	ldr	r3, [pc, #212]	; (2f24 <_gclk_init_generators_by_fref+0xf8>)
    2e4e:	0011      	movs	r1, r2
    2e50:	0018      	movs	r0, r3
    2e52:	4b37      	ldr	r3, [pc, #220]	; (2f30 <_gclk_init_generators_by_fref+0x104>)
    2e54:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SRC | GCLK_GENCTRL_ID(0));
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    2e56:	687b      	ldr	r3, [r7, #4]
    2e58:	2202      	movs	r2, #2
    2e5a:	4013      	ands	r3, r2
    2e5c:	d00c      	beq.n	2e78 <_gclk_init_generators_by_fref+0x4c>
		hri_gclk_write_GENDIV_reg(GCLK, GCLK_GENDIV_DIV(CONF_GCLK_GEN_1_DIV) | GCLK_GENDIV_ID(1));
    2e5e:	2302      	movs	r3, #2
    2e60:	33ff      	adds	r3, #255	; 0xff
    2e62:	4a30      	ldr	r2, [pc, #192]	; (2f24 <_gclk_init_generators_by_fref+0xf8>)
    2e64:	0019      	movs	r1, r3
    2e66:	0010      	movs	r0, r2
    2e68:	4b2f      	ldr	r3, [pc, #188]	; (2f28 <_gclk_init_generators_by_fref+0xfc>)
    2e6a:	4798      	blx	r3
		hri_gclk_write_GENCTRL_reg(
    2e6c:	4a31      	ldr	r2, [pc, #196]	; (2f34 <_gclk_init_generators_by_fref+0x108>)
    2e6e:	4b2d      	ldr	r3, [pc, #180]	; (2f24 <_gclk_init_generators_by_fref+0xf8>)
    2e70:	0011      	movs	r1, r2
    2e72:	0018      	movs	r0, r3
    2e74:	4b2e      	ldr	r3, [pc, #184]	; (2f30 <_gclk_init_generators_by_fref+0x104>)
    2e76:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SRC | GCLK_GENCTRL_ID(1));
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    2e78:	687b      	ldr	r3, [r7, #4]
    2e7a:	2204      	movs	r2, #4
    2e7c:	4013      	ands	r3, r2
    2e7e:	d00b      	beq.n	2e98 <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENDIV_reg(GCLK, GCLK_GENDIV_DIV(CONF_GCLK_GEN_2_DIV) | GCLK_GENDIV_ID(2));
    2e80:	4a2d      	ldr	r2, [pc, #180]	; (2f38 <_gclk_init_generators_by_fref+0x10c>)
    2e82:	4b28      	ldr	r3, [pc, #160]	; (2f24 <_gclk_init_generators_by_fref+0xf8>)
    2e84:	0011      	movs	r1, r2
    2e86:	0018      	movs	r0, r3
    2e88:	4b27      	ldr	r3, [pc, #156]	; (2f28 <_gclk_init_generators_by_fref+0xfc>)
    2e8a:	4798      	blx	r3
		hri_gclk_write_GENCTRL_reg(
    2e8c:	4a2b      	ldr	r2, [pc, #172]	; (2f3c <_gclk_init_generators_by_fref+0x110>)
    2e8e:	4b25      	ldr	r3, [pc, #148]	; (2f24 <_gclk_init_generators_by_fref+0xf8>)
    2e90:	0011      	movs	r1, r2
    2e92:	0018      	movs	r0, r3
    2e94:	4b26      	ldr	r3, [pc, #152]	; (2f30 <_gclk_init_generators_by_fref+0x104>)
    2e96:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    2e98:	687b      	ldr	r3, [r7, #4]
    2e9a:	2208      	movs	r2, #8
    2e9c:	4013      	ands	r3, r2
    2e9e:	d00b      	beq.n	2eb8 <_gclk_init_generators_by_fref+0x8c>
		hri_gclk_write_GENDIV_reg(GCLK, GCLK_GENDIV_DIV(CONF_GCLK_GEN_3_DIV) | GCLK_GENDIV_ID(3));
    2ea0:	4a27      	ldr	r2, [pc, #156]	; (2f40 <_gclk_init_generators_by_fref+0x114>)
    2ea2:	4b20      	ldr	r3, [pc, #128]	; (2f24 <_gclk_init_generators_by_fref+0xf8>)
    2ea4:	0011      	movs	r1, r2
    2ea6:	0018      	movs	r0, r3
    2ea8:	4b1f      	ldr	r3, [pc, #124]	; (2f28 <_gclk_init_generators_by_fref+0xfc>)
    2eaa:	4798      	blx	r3
		hri_gclk_write_GENCTRL_reg(
    2eac:	4a25      	ldr	r2, [pc, #148]	; (2f44 <_gclk_init_generators_by_fref+0x118>)
    2eae:	4b1d      	ldr	r3, [pc, #116]	; (2f24 <_gclk_init_generators_by_fref+0xf8>)
    2eb0:	0011      	movs	r1, r2
    2eb2:	0018      	movs	r0, r3
    2eb4:	4b1e      	ldr	r3, [pc, #120]	; (2f30 <_gclk_init_generators_by_fref+0x104>)
    2eb6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SRC | GCLK_GENCTRL_ID(3));
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    2eb8:	687b      	ldr	r3, [r7, #4]
    2eba:	2210      	movs	r2, #16
    2ebc:	4013      	ands	r3, r2
    2ebe:	d00c      	beq.n	2eda <_gclk_init_generators_by_fref+0xae>
		hri_gclk_write_GENDIV_reg(GCLK, GCLK_GENDIV_DIV(CONF_GCLK_GEN_4_DIV) | GCLK_GENDIV_ID(4));
    2ec0:	2382      	movs	r3, #130	; 0x82
    2ec2:	005b      	lsls	r3, r3, #1
    2ec4:	4a17      	ldr	r2, [pc, #92]	; (2f24 <_gclk_init_generators_by_fref+0xf8>)
    2ec6:	0019      	movs	r1, r3
    2ec8:	0010      	movs	r0, r2
    2eca:	4b17      	ldr	r3, [pc, #92]	; (2f28 <_gclk_init_generators_by_fref+0xfc>)
    2ecc:	4798      	blx	r3
		hri_gclk_write_GENCTRL_reg(
    2ece:	4a1e      	ldr	r2, [pc, #120]	; (2f48 <_gclk_init_generators_by_fref+0x11c>)
    2ed0:	4b14      	ldr	r3, [pc, #80]	; (2f24 <_gclk_init_generators_by_fref+0xf8>)
    2ed2:	0011      	movs	r1, r2
    2ed4:	0018      	movs	r0, r3
    2ed6:	4b16      	ldr	r3, [pc, #88]	; (2f30 <_gclk_init_generators_by_fref+0x104>)
    2ed8:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SRC | GCLK_GENCTRL_ID(4));
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    2eda:	687b      	ldr	r3, [r7, #4]
    2edc:	2220      	movs	r2, #32
    2ede:	4013      	ands	r3, r2
    2ee0:	d00b      	beq.n	2efa <_gclk_init_generators_by_fref+0xce>
		hri_gclk_write_GENDIV_reg(GCLK, GCLK_GENDIV_DIV(CONF_GCLK_GEN_5_DIV) | GCLK_GENDIV_ID(5));
    2ee2:	4a1a      	ldr	r2, [pc, #104]	; (2f4c <_gclk_init_generators_by_fref+0x120>)
    2ee4:	4b0f      	ldr	r3, [pc, #60]	; (2f24 <_gclk_init_generators_by_fref+0xf8>)
    2ee6:	0011      	movs	r1, r2
    2ee8:	0018      	movs	r0, r3
    2eea:	4b0f      	ldr	r3, [pc, #60]	; (2f28 <_gclk_init_generators_by_fref+0xfc>)
    2eec:	4798      	blx	r3
		hri_gclk_write_GENCTRL_reg(
    2eee:	4a18      	ldr	r2, [pc, #96]	; (2f50 <_gclk_init_generators_by_fref+0x124>)
    2ef0:	4b0c      	ldr	r3, [pc, #48]	; (2f24 <_gclk_init_generators_by_fref+0xf8>)
    2ef2:	0011      	movs	r1, r2
    2ef4:	0018      	movs	r0, r3
    2ef6:	4b0e      	ldr	r3, [pc, #56]	; (2f30 <_gclk_init_generators_by_fref+0x104>)
    2ef8:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SRC | GCLK_GENCTRL_ID(5));
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    2efa:	687b      	ldr	r3, [r7, #4]
    2efc:	2240      	movs	r2, #64	; 0x40
    2efe:	4013      	ands	r3, r2
    2f00:	d00c      	beq.n	2f1c <_gclk_init_generators_by_fref+0xf0>
		hri_gclk_write_GENDIV_reg(GCLK, GCLK_GENDIV_DIV(CONF_GCLK_GEN_6_DIV) | GCLK_GENDIV_ID(6));
    2f02:	2383      	movs	r3, #131	; 0x83
    2f04:	005b      	lsls	r3, r3, #1
    2f06:	4a07      	ldr	r2, [pc, #28]	; (2f24 <_gclk_init_generators_by_fref+0xf8>)
    2f08:	0019      	movs	r1, r3
    2f0a:	0010      	movs	r0, r2
    2f0c:	4b06      	ldr	r3, [pc, #24]	; (2f28 <_gclk_init_generators_by_fref+0xfc>)
    2f0e:	4798      	blx	r3
		hri_gclk_write_GENCTRL_reg(
    2f10:	4a10      	ldr	r2, [pc, #64]	; (2f54 <_gclk_init_generators_by_fref+0x128>)
    2f12:	4b04      	ldr	r3, [pc, #16]	; (2f24 <_gclk_init_generators_by_fref+0xf8>)
    2f14:	0011      	movs	r1, r2
    2f16:	0018      	movs	r0, r3
    2f18:	4b05      	ldr	r3, [pc, #20]	; (2f30 <_gclk_init_generators_by_fref+0x104>)
    2f1a:	4798      	blx	r3
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
    2f1c:	46c0      	nop			; (mov r8, r8)
    2f1e:	46bd      	mov	sp, r7
    2f20:	b002      	add	sp, #8
    2f22:	bd80      	pop	{r7, pc}
    2f24:	40000c00 	.word	0x40000c00
    2f28:	00002e15 	.word	0x00002e15
    2f2c:	00290800 	.word	0x00290800
    2f30:	00002df1 	.word	0x00002df1
    2f34:	00010601 	.word	0x00010601
    2f38:	00000402 	.word	0x00000402
    2f3c:	00210602 	.word	0x00210602
    2f40:	00000803 	.word	0x00000803
    2f44:	00290603 	.word	0x00290603
    2f48:	00090704 	.word	0x00090704
    2f4c:	00000305 	.word	0x00000305
    2f50:	00010805 	.word	0x00010805
    2f54:	00210406 	.word	0x00210406

00002f58 <hri_pm_set_CPUSEL_CPUDIV_bf>:
{
	return ((Pm *)hw)->SLEEP.reg;
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
    2f58:	b580      	push	{r7, lr}
    2f5a:	b082      	sub	sp, #8
    2f5c:	af00      	add	r7, sp, #0
    2f5e:	6078      	str	r0, [r7, #4]
    2f60:	000a      	movs	r2, r1
    2f62:	1cfb      	adds	r3, r7, #3
    2f64:	701a      	strb	r2, [r3, #0]
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
    2f66:	687b      	ldr	r3, [r7, #4]
    2f68:	7a1b      	ldrb	r3, [r3, #8]
    2f6a:	b2da      	uxtb	r2, r3
    2f6c:	1cfb      	adds	r3, r7, #3
    2f6e:	781b      	ldrb	r3, [r3, #0]
    2f70:	2107      	movs	r1, #7
    2f72:	400b      	ands	r3, r1
    2f74:	b2db      	uxtb	r3, r3
    2f76:	4313      	orrs	r3, r2
    2f78:	b2da      	uxtb	r2, r3
    2f7a:	687b      	ldr	r3, [r7, #4]
    2f7c:	721a      	strb	r2, [r3, #8]
	PM_CRITICAL_SECTION_LEAVE();
}
    2f7e:	46c0      	nop			; (mov r8, r8)
    2f80:	46bd      	mov	sp, r7
    2f82:	b002      	add	sp, #8
    2f84:	bd80      	pop	{r7, pc}

00002f86 <hri_pm_set_APBASEL_APBADIV_bf>:
{
	return ((Pm *)hw)->CPUSEL.reg;
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
    2f86:	b580      	push	{r7, lr}
    2f88:	b082      	sub	sp, #8
    2f8a:	af00      	add	r7, sp, #0
    2f8c:	6078      	str	r0, [r7, #4]
    2f8e:	000a      	movs	r2, r1
    2f90:	1cfb      	adds	r3, r7, #3
    2f92:	701a      	strb	r2, [r3, #0]
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
    2f94:	687b      	ldr	r3, [r7, #4]
    2f96:	7a5b      	ldrb	r3, [r3, #9]
    2f98:	b2da      	uxtb	r2, r3
    2f9a:	1cfb      	adds	r3, r7, #3
    2f9c:	781b      	ldrb	r3, [r3, #0]
    2f9e:	2107      	movs	r1, #7
    2fa0:	400b      	ands	r3, r1
    2fa2:	b2db      	uxtb	r3, r3
    2fa4:	4313      	orrs	r3, r2
    2fa6:	b2da      	uxtb	r2, r3
    2fa8:	687b      	ldr	r3, [r7, #4]
    2faa:	725a      	strb	r2, [r3, #9]
	PM_CRITICAL_SECTION_LEAVE();
}
    2fac:	46c0      	nop			; (mov r8, r8)
    2fae:	46bd      	mov	sp, r7
    2fb0:	b002      	add	sp, #8
    2fb2:	bd80      	pop	{r7, pc}

00002fb4 <hri_pm_set_APBBSEL_APBBDIV_bf>:
{
	return ((Pm *)hw)->APBASEL.reg;
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
    2fb4:	b580      	push	{r7, lr}
    2fb6:	b082      	sub	sp, #8
    2fb8:	af00      	add	r7, sp, #0
    2fba:	6078      	str	r0, [r7, #4]
    2fbc:	000a      	movs	r2, r1
    2fbe:	1cfb      	adds	r3, r7, #3
    2fc0:	701a      	strb	r2, [r3, #0]
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
    2fc2:	687b      	ldr	r3, [r7, #4]
    2fc4:	7a9b      	ldrb	r3, [r3, #10]
    2fc6:	b2da      	uxtb	r2, r3
    2fc8:	1cfb      	adds	r3, r7, #3
    2fca:	781b      	ldrb	r3, [r3, #0]
    2fcc:	2107      	movs	r1, #7
    2fce:	400b      	ands	r3, r1
    2fd0:	b2db      	uxtb	r3, r3
    2fd2:	4313      	orrs	r3, r2
    2fd4:	b2da      	uxtb	r2, r3
    2fd6:	687b      	ldr	r3, [r7, #4]
    2fd8:	729a      	strb	r2, [r3, #10]
	PM_CRITICAL_SECTION_LEAVE();
}
    2fda:	46c0      	nop			; (mov r8, r8)
    2fdc:	46bd      	mov	sp, r7
    2fde:	b002      	add	sp, #8
    2fe0:	bd80      	pop	{r7, pc}

00002fe2 <hri_pm_set_APBCSEL_APBCDIV_bf>:
{
	return ((Pm *)hw)->APBBSEL.reg;
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
    2fe2:	b580      	push	{r7, lr}
    2fe4:	b082      	sub	sp, #8
    2fe6:	af00      	add	r7, sp, #0
    2fe8:	6078      	str	r0, [r7, #4]
    2fea:	000a      	movs	r2, r1
    2fec:	1cfb      	adds	r3, r7, #3
    2fee:	701a      	strb	r2, [r3, #0]
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
    2ff0:	687b      	ldr	r3, [r7, #4]
    2ff2:	7adb      	ldrb	r3, [r3, #11]
    2ff4:	b2da      	uxtb	r2, r3
    2ff6:	1cfb      	adds	r3, r7, #3
    2ff8:	781b      	ldrb	r3, [r3, #0]
    2ffa:	2107      	movs	r1, #7
    2ffc:	400b      	ands	r3, r1
    2ffe:	b2db      	uxtb	r3, r3
    3000:	4313      	orrs	r3, r2
    3002:	b2da      	uxtb	r2, r3
    3004:	687b      	ldr	r3, [r7, #4]
    3006:	72da      	strb	r2, [r3, #11]
	PM_CRITICAL_SECTION_LEAVE();
}
    3008:	46c0      	nop			; (mov r8, r8)
    300a:	46bd      	mov	sp, r7
    300c:	b002      	add	sp, #8
    300e:	bd80      	pop	{r7, pc}

00003010 <_pm_init>:

/**
 * \brief Power Manager Init
 */
void _pm_init(void)
{
    3010:	b580      	push	{r7, lr}
    3012:	af00      	add	r7, sp, #0
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
    3014:	4b0b      	ldr	r3, [pc, #44]	; (3044 <_pm_init+0x34>)
    3016:	2100      	movs	r1, #0
    3018:	0018      	movs	r0, r3
    301a:	4b0b      	ldr	r3, [pc, #44]	; (3048 <_pm_init+0x38>)
    301c:	4798      	blx	r3
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
    301e:	4b09      	ldr	r3, [pc, #36]	; (3044 <_pm_init+0x34>)
    3020:	2100      	movs	r1, #0
    3022:	0018      	movs	r0, r3
    3024:	4b09      	ldr	r3, [pc, #36]	; (304c <_pm_init+0x3c>)
    3026:	4798      	blx	r3
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
    3028:	4b06      	ldr	r3, [pc, #24]	; (3044 <_pm_init+0x34>)
    302a:	2100      	movs	r1, #0
    302c:	0018      	movs	r0, r3
    302e:	4b08      	ldr	r3, [pc, #32]	; (3050 <_pm_init+0x40>)
    3030:	4798      	blx	r3
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
    3032:	4b04      	ldr	r3, [pc, #16]	; (3044 <_pm_init+0x34>)
    3034:	2100      	movs	r1, #0
    3036:	0018      	movs	r0, r3
    3038:	4b06      	ldr	r3, [pc, #24]	; (3054 <_pm_init+0x44>)
    303a:	4798      	blx	r3
}
    303c:	46c0      	nop			; (mov r8, r8)
    303e:	46bd      	mov	sp, r7
    3040:	bd80      	pop	{r7, pc}
    3042:	46c0      	nop			; (mov r8, r8)
    3044:	40000400 	.word	0x40000400
    3048:	00002f59 	.word	0x00002f59
    304c:	00002f87 	.word	0x00002f87
    3050:	00002fb5 	.word	0x00002fb5
    3054:	00002fe3 	.word	0x00002fe3

00003058 <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    3058:	b580      	push	{r7, lr}
    305a:	b082      	sub	sp, #8
    305c:	af00      	add	r7, sp, #0
    305e:	6078      	str	r0, [r7, #4]
    3060:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3062:	46c0      	nop			; (mov r8, r8)
    3064:	687b      	ldr	r3, [r7, #4]
    3066:	69db      	ldr	r3, [r3, #28]
    3068:	683a      	ldr	r2, [r7, #0]
    306a:	4013      	ands	r3, r2
    306c:	d1fa      	bne.n	3064 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    306e:	46c0      	nop			; (mov r8, r8)
    3070:	46bd      	mov	sp, r7
    3072:	b002      	add	sp, #8
    3074:	bd80      	pop	{r7, pc}

00003076 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    3076:	b580      	push	{r7, lr}
    3078:	b082      	sub	sp, #8
    307a:	af00      	add	r7, sp, #0
    307c:	6078      	str	r0, [r7, #4]
    307e:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    3080:	687b      	ldr	r3, [r7, #4]
    3082:	69db      	ldr	r3, [r3, #28]
    3084:	683a      	ldr	r2, [r7, #0]
    3086:	4013      	ands	r3, r2
    3088:	1e5a      	subs	r2, r3, #1
    308a:	4193      	sbcs	r3, r2
    308c:	b2db      	uxtb	r3, r3
}
    308e:	0018      	movs	r0, r3
    3090:	46bd      	mov	sp, r7
    3092:	b002      	add	sp, #8
    3094:	bd80      	pop	{r7, pc}

00003096 <hri_sercomusart_wait_for_sync>:

static inline void hri_sercomusart_wait_for_sync(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
    3096:	b580      	push	{r7, lr}
    3098:	b082      	sub	sp, #8
    309a:	af00      	add	r7, sp, #0
    309c:	6078      	str	r0, [r7, #4]
    309e:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    30a0:	46c0      	nop			; (mov r8, r8)
    30a2:	687b      	ldr	r3, [r7, #4]
    30a4:	69db      	ldr	r3, [r3, #28]
    30a6:	683a      	ldr	r2, [r7, #0]
    30a8:	4013      	ands	r3, r2
    30aa:	d1fa      	bne.n	30a2 <hri_sercomusart_wait_for_sync+0xc>
	};
}
    30ac:	46c0      	nop			; (mov r8, r8)
    30ae:	46bd      	mov	sp, r7
    30b0:	b002      	add	sp, #8
    30b2:	bd80      	pop	{r7, pc}

000030b4 <hri_sercomusart_is_syncing>:

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
    30b4:	b580      	push	{r7, lr}
    30b6:	b082      	sub	sp, #8
    30b8:	af00      	add	r7, sp, #0
    30ba:	6078      	str	r0, [r7, #4]
    30bc:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    30be:	687b      	ldr	r3, [r7, #4]
    30c0:	69db      	ldr	r3, [r3, #28]
    30c2:	683a      	ldr	r2, [r7, #0]
    30c4:	4013      	ands	r3, r2
    30c6:	1e5a      	subs	r2, r3, #1
    30c8:	4193      	sbcs	r3, r2
    30ca:	b2db      	uxtb	r3, r3
}
    30cc:	0018      	movs	r0, r3
    30ce:	46bd      	mov	sp, r7
    30d0:	b002      	add	sp, #8
    30d2:	bd80      	pop	{r7, pc}

000030d4 <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    30d4:	b580      	push	{r7, lr}
    30d6:	b084      	sub	sp, #16
    30d8:	af00      	add	r7, sp, #0
    30da:	6078      	str	r0, [r7, #4]
    30dc:	000a      	movs	r2, r1
    30de:	1cfb      	adds	r3, r7, #3
    30e0:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    30e2:	230f      	movs	r3, #15
    30e4:	18fb      	adds	r3, r7, r3
    30e6:	687a      	ldr	r2, [r7, #4]
    30e8:	7e12      	ldrb	r2, [r2, #24]
    30ea:	701a      	strb	r2, [r3, #0]
	tmp &= mask;
    30ec:	230f      	movs	r3, #15
    30ee:	18fb      	adds	r3, r7, r3
    30f0:	220f      	movs	r2, #15
    30f2:	18ba      	adds	r2, r7, r2
    30f4:	1cf9      	adds	r1, r7, #3
    30f6:	7812      	ldrb	r2, [r2, #0]
    30f8:	7809      	ldrb	r1, [r1, #0]
    30fa:	400a      	ands	r2, r1
    30fc:	701a      	strb	r2, [r3, #0]
	return tmp;
    30fe:	230f      	movs	r3, #15
    3100:	18fb      	adds	r3, r7, r3
    3102:	781b      	ldrb	r3, [r3, #0]
}
    3104:	0018      	movs	r0, r3
    3106:	46bd      	mov	sp, r7
    3108:	b004      	add	sp, #16
    310a:	bd80      	pop	{r7, pc}

0000310c <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    310c:	b580      	push	{r7, lr}
    310e:	b082      	sub	sp, #8
    3110:	af00      	add	r7, sp, #0
    3112:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    3114:	687b      	ldr	r3, [r7, #4]
    3116:	7e1b      	ldrb	r3, [r3, #24]
    3118:	b2db      	uxtb	r3, r3
}
    311a:	0018      	movs	r0, r3
    311c:	46bd      	mov	sp, r7
    311e:	b002      	add	sp, #8
    3120:	bd80      	pop	{r7, pc}

00003122 <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    3122:	b580      	push	{r7, lr}
    3124:	b082      	sub	sp, #8
    3126:	af00      	add	r7, sp, #0
    3128:	6078      	str	r0, [r7, #4]
    312a:	000a      	movs	r2, r1
    312c:	1cfb      	adds	r3, r7, #3
    312e:	701a      	strb	r2, [r3, #0]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    3130:	687b      	ldr	r3, [r7, #4]
    3132:	1cfa      	adds	r2, r7, #3
    3134:	7812      	ldrb	r2, [r2, #0]
    3136:	761a      	strb	r2, [r3, #24]
}
    3138:	46c0      	nop			; (mov r8, r8)
    313a:	46bd      	mov	sp, r7
    313c:	b002      	add	sp, #8
    313e:	bd80      	pop	{r7, pc}

00003140 <hri_sercomusart_get_interrupt_DRE_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
    3140:	b580      	push	{r7, lr}
    3142:	b082      	sub	sp, #8
    3144:	af00      	add	r7, sp, #0
    3146:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    3148:	687b      	ldr	r3, [r7, #4]
    314a:	7e1b      	ldrb	r3, [r3, #24]
    314c:	b2db      	uxtb	r3, r3
    314e:	001a      	movs	r2, r3
    3150:	2301      	movs	r3, #1
    3152:	4013      	ands	r3, r2
    3154:	1e5a      	subs	r2, r3, #1
    3156:	4193      	sbcs	r3, r2
    3158:	b2db      	uxtb	r3, r3
}
    315a:	0018      	movs	r0, r3
    315c:	46bd      	mov	sp, r7
    315e:	b002      	add	sp, #8
    3160:	bd80      	pop	{r7, pc}

00003162 <hri_sercomusart_get_interrupt_TXC_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
}

static inline bool hri_sercomusart_get_interrupt_TXC_bit(const void *const hw)
{
    3162:	b580      	push	{r7, lr}
    3164:	b082      	sub	sp, #8
    3166:	af00      	add	r7, sp, #0
    3168:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    316a:	687b      	ldr	r3, [r7, #4]
    316c:	7e1b      	ldrb	r3, [r3, #24]
    316e:	b2db      	uxtb	r3, r3
    3170:	085b      	lsrs	r3, r3, #1
    3172:	2201      	movs	r2, #1
    3174:	4013      	ands	r3, r2
    3176:	1e5a      	subs	r2, r3, #1
    3178:	4193      	sbcs	r3, r2
    317a:	b2db      	uxtb	r3, r3
}
    317c:	0018      	movs	r0, r3
    317e:	46bd      	mov	sp, r7
    3180:	b002      	add	sp, #8
    3182:	bd80      	pop	{r7, pc}

00003184 <hri_sercomusart_get_interrupt_RXC_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
}

static inline bool hri_sercomusart_get_interrupt_RXC_bit(const void *const hw)
{
    3184:	b580      	push	{r7, lr}
    3186:	b082      	sub	sp, #8
    3188:	af00      	add	r7, sp, #0
    318a:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    318c:	687b      	ldr	r3, [r7, #4]
    318e:	7e1b      	ldrb	r3, [r3, #24]
    3190:	b2db      	uxtb	r3, r3
    3192:	089b      	lsrs	r3, r3, #2
    3194:	2201      	movs	r2, #1
    3196:	4013      	ands	r3, r2
    3198:	1e5a      	subs	r2, r3, #1
    319a:	4193      	sbcs	r3, r2
    319c:	b2db      	uxtb	r3, r3
}
    319e:	0018      	movs	r0, r3
    31a0:	46bd      	mov	sp, r7
    31a2:	b002      	add	sp, #8
    31a4:	bd80      	pop	{r7, pc}
	...

000031a8 <hri_sercomspi_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_SPI_CTRLA_SWRST) >> SERCOM_SPI_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
    31a8:	b580      	push	{r7, lr}
    31aa:	b082      	sub	sp, #8
    31ac:	af00      	add	r7, sp, #0
    31ae:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    31b0:	687b      	ldr	r3, [r7, #4]
    31b2:	681b      	ldr	r3, [r3, #0]
    31b4:	2202      	movs	r2, #2
    31b6:	431a      	orrs	r2, r3
    31b8:	687b      	ldr	r3, [r7, #4]
    31ba:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    31bc:	687b      	ldr	r3, [r7, #4]
    31be:	2103      	movs	r1, #3
    31c0:	0018      	movs	r0, r3
    31c2:	4b03      	ldr	r3, [pc, #12]	; (31d0 <hri_sercomspi_set_CTRLA_ENABLE_bit+0x28>)
    31c4:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    31c6:	46c0      	nop			; (mov r8, r8)
    31c8:	46bd      	mov	sp, r7
    31ca:	b002      	add	sp, #8
    31cc:	bd80      	pop	{r7, pc}
    31ce:	46c0      	nop			; (mov r8, r8)
    31d0:	00003059 	.word	0x00003059

000031d4 <hri_sercomspi_get_CTRLA_ENABLE_bit>:

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    31d4:	b580      	push	{r7, lr}
    31d6:	b084      	sub	sp, #16
    31d8:	af00      	add	r7, sp, #0
    31da:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    31dc:	687b      	ldr	r3, [r7, #4]
    31de:	2103      	movs	r1, #3
    31e0:	0018      	movs	r0, r3
    31e2:	4b09      	ldr	r3, [pc, #36]	; (3208 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    31e4:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    31e6:	687b      	ldr	r3, [r7, #4]
    31e8:	681b      	ldr	r3, [r3, #0]
    31ea:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    31ec:	68fb      	ldr	r3, [r7, #12]
    31ee:	085b      	lsrs	r3, r3, #1
    31f0:	2201      	movs	r2, #1
    31f2:	4013      	ands	r3, r2
    31f4:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    31f6:	68fb      	ldr	r3, [r7, #12]
    31f8:	1e5a      	subs	r2, r3, #1
    31fa:	4193      	sbcs	r3, r2
    31fc:	b2db      	uxtb	r3, r3
}
    31fe:	0018      	movs	r0, r3
    3200:	46bd      	mov	sp, r7
    3202:	b004      	add	sp, #16
    3204:	bd80      	pop	{r7, pc}
    3206:	46c0      	nop			; (mov r8, r8)
    3208:	00003059 	.word	0x00003059

0000320c <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    320c:	b580      	push	{r7, lr}
    320e:	b082      	sub	sp, #8
    3210:	af00      	add	r7, sp, #0
    3212:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    3214:	687b      	ldr	r3, [r7, #4]
    3216:	681b      	ldr	r3, [r3, #0]
    3218:	2202      	movs	r2, #2
    321a:	4393      	bics	r3, r2
    321c:	001a      	movs	r2, r3
    321e:	687b      	ldr	r3, [r7, #4]
    3220:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    3222:	687b      	ldr	r3, [r7, #4]
    3224:	2103      	movs	r1, #3
    3226:	0018      	movs	r0, r3
    3228:	4b02      	ldr	r3, [pc, #8]	; (3234 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x28>)
    322a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    322c:	46c0      	nop			; (mov r8, r8)
    322e:	46bd      	mov	sp, r7
    3230:	b002      	add	sp, #8
    3232:	bd80      	pop	{r7, pc}
    3234:	00003059 	.word	0x00003059

00003238 <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    3238:	b580      	push	{r7, lr}
    323a:	b084      	sub	sp, #16
    323c:	af00      	add	r7, sp, #0
    323e:	6078      	str	r0, [r7, #4]
    3240:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    3242:	687b      	ldr	r3, [r7, #4]
    3244:	2103      	movs	r1, #3
    3246:	0018      	movs	r0, r3
    3248:	4b06      	ldr	r3, [pc, #24]	; (3264 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    324a:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    324c:	687b      	ldr	r3, [r7, #4]
    324e:	681b      	ldr	r3, [r3, #0]
    3250:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    3252:	68fb      	ldr	r3, [r7, #12]
    3254:	683a      	ldr	r2, [r7, #0]
    3256:	4013      	ands	r3, r2
    3258:	60fb      	str	r3, [r7, #12]
	return tmp;
    325a:	68fb      	ldr	r3, [r7, #12]
}
    325c:	0018      	movs	r0, r3
    325e:	46bd      	mov	sp, r7
    3260:	b004      	add	sp, #16
    3262:	bd80      	pop	{r7, pc}
    3264:	00003059 	.word	0x00003059

00003268 <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    3268:	b580      	push	{r7, lr}
    326a:	b082      	sub	sp, #8
    326c:	af00      	add	r7, sp, #0
    326e:	6078      	str	r0, [r7, #4]
    3270:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    3272:	687b      	ldr	r3, [r7, #4]
    3274:	683a      	ldr	r2, [r7, #0]
    3276:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    3278:	687b      	ldr	r3, [r7, #4]
    327a:	2103      	movs	r1, #3
    327c:	0018      	movs	r0, r3
    327e:	4b03      	ldr	r3, [pc, #12]	; (328c <hri_sercomspi_write_CTRLA_reg+0x24>)
    3280:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3282:	46c0      	nop			; (mov r8, r8)
    3284:	46bd      	mov	sp, r7
    3286:	b002      	add	sp, #8
    3288:	bd80      	pop	{r7, pc}
    328a:	46c0      	nop			; (mov r8, r8)
    328c:	00003059 	.word	0x00003059

00003290 <hri_sercomusart_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_USART_CTRLA_SWRST) >> SERCOM_USART_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomusart_set_CTRLA_ENABLE_bit(const void *const hw)
{
    3290:	b580      	push	{r7, lr}
    3292:	b082      	sub	sp, #8
    3294:	af00      	add	r7, sp, #0
    3296:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    3298:	687b      	ldr	r3, [r7, #4]
    329a:	681b      	ldr	r3, [r3, #0]
    329c:	2202      	movs	r2, #2
    329e:	431a      	orrs	r2, r3
    32a0:	687b      	ldr	r3, [r7, #4]
    32a2:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    32a4:	687b      	ldr	r3, [r7, #4]
    32a6:	2103      	movs	r1, #3
    32a8:	0018      	movs	r0, r3
    32aa:	4b03      	ldr	r3, [pc, #12]	; (32b8 <hri_sercomusart_set_CTRLA_ENABLE_bit+0x28>)
    32ac:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    32ae:	46c0      	nop			; (mov r8, r8)
    32b0:	46bd      	mov	sp, r7
    32b2:	b002      	add	sp, #8
    32b4:	bd80      	pop	{r7, pc}
    32b6:	46c0      	nop			; (mov r8, r8)
    32b8:	00003097 	.word	0x00003097

000032bc <hri_sercomusart_clear_CTRLA_ENABLE_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomusart_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    32bc:	b580      	push	{r7, lr}
    32be:	b082      	sub	sp, #8
    32c0:	af00      	add	r7, sp, #0
    32c2:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    32c4:	687b      	ldr	r3, [r7, #4]
    32c6:	681b      	ldr	r3, [r3, #0]
    32c8:	2202      	movs	r2, #2
    32ca:	4393      	bics	r3, r2
    32cc:	001a      	movs	r2, r3
    32ce:	687b      	ldr	r3, [r7, #4]
    32d0:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    32d2:	687b      	ldr	r3, [r7, #4]
    32d4:	2103      	movs	r1, #3
    32d6:	0018      	movs	r0, r3
    32d8:	4b02      	ldr	r3, [pc, #8]	; (32e4 <hri_sercomusart_clear_CTRLA_ENABLE_bit+0x28>)
    32da:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    32dc:	46c0      	nop			; (mov r8, r8)
    32de:	46bd      	mov	sp, r7
    32e0:	b002      	add	sp, #8
    32e2:	bd80      	pop	{r7, pc}
    32e4:	00003097 	.word	0x00003097

000032e8 <hri_sercomusart_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
    32e8:	b580      	push	{r7, lr}
    32ea:	b084      	sub	sp, #16
    32ec:	af00      	add	r7, sp, #0
    32ee:	6078      	str	r0, [r7, #4]
    32f0:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    32f2:	687b      	ldr	r3, [r7, #4]
    32f4:	2103      	movs	r1, #3
    32f6:	0018      	movs	r0, r3
    32f8:	4b06      	ldr	r3, [pc, #24]	; (3314 <hri_sercomusart_get_CTRLA_reg+0x2c>)
    32fa:	4798      	blx	r3
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    32fc:	687b      	ldr	r3, [r7, #4]
    32fe:	681b      	ldr	r3, [r3, #0]
    3300:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    3302:	68fb      	ldr	r3, [r7, #12]
    3304:	683a      	ldr	r2, [r7, #0]
    3306:	4013      	ands	r3, r2
    3308:	60fb      	str	r3, [r7, #12]
	return tmp;
    330a:	68fb      	ldr	r3, [r7, #12]
}
    330c:	0018      	movs	r0, r3
    330e:	46bd      	mov	sp, r7
    3310:	b004      	add	sp, #16
    3312:	bd80      	pop	{r7, pc}
    3314:	00003097 	.word	0x00003097

00003318 <hri_sercomusart_write_CTRLA_reg>:

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
    3318:	b580      	push	{r7, lr}
    331a:	b082      	sub	sp, #8
    331c:	af00      	add	r7, sp, #0
    331e:	6078      	str	r0, [r7, #4]
    3320:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    3322:	687b      	ldr	r3, [r7, #4]
    3324:	683a      	ldr	r2, [r7, #0]
    3326:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    3328:	687b      	ldr	r3, [r7, #4]
    332a:	2103      	movs	r1, #3
    332c:	0018      	movs	r0, r3
    332e:	4b03      	ldr	r3, [pc, #12]	; (333c <hri_sercomusart_write_CTRLA_reg+0x24>)
    3330:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3332:	46c0      	nop			; (mov r8, r8)
    3334:	46bd      	mov	sp, r7
    3336:	b002      	add	sp, #8
    3338:	bd80      	pop	{r7, pc}
    333a:	46c0      	nop			; (mov r8, r8)
    333c:	00003097 	.word	0x00003097

00003340 <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    3340:	b580      	push	{r7, lr}
    3342:	b082      	sub	sp, #8
    3344:	af00      	add	r7, sp, #0
    3346:	6078      	str	r0, [r7, #4]
    3348:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    334a:	687b      	ldr	r3, [r7, #4]
    334c:	683a      	ldr	r2, [r7, #0]
    334e:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    3350:	687b      	ldr	r3, [r7, #4]
    3352:	2107      	movs	r1, #7
    3354:	0018      	movs	r0, r3
    3356:	4b03      	ldr	r3, [pc, #12]	; (3364 <hri_sercomspi_write_CTRLB_reg+0x24>)
    3358:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    335a:	46c0      	nop			; (mov r8, r8)
    335c:	46bd      	mov	sp, r7
    335e:	b002      	add	sp, #8
    3360:	bd80      	pop	{r7, pc}
    3362:	46c0      	nop			; (mov r8, r8)
    3364:	00003059 	.word	0x00003059

00003368 <hri_sercomusart_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
    3368:	b580      	push	{r7, lr}
    336a:	b082      	sub	sp, #8
    336c:	af00      	add	r7, sp, #0
    336e:	6078      	str	r0, [r7, #4]
    3370:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    3372:	687b      	ldr	r3, [r7, #4]
    3374:	683a      	ldr	r2, [r7, #0]
    3376:	605a      	str	r2, [r3, #4]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_MASK);
    3378:	687b      	ldr	r3, [r7, #4]
    337a:	2107      	movs	r1, #7
    337c:	0018      	movs	r0, r3
    337e:	4b03      	ldr	r3, [pc, #12]	; (338c <hri_sercomusart_write_CTRLB_reg+0x24>)
    3380:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3382:	46c0      	nop			; (mov r8, r8)
    3384:	46bd      	mov	sp, r7
    3386:	b002      	add	sp, #8
    3388:	bd80      	pop	{r7, pc}
    338a:	46c0      	nop			; (mov r8, r8)
    338c:	00003097 	.word	0x00003097

00003390 <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    3390:	b580      	push	{r7, lr}
    3392:	b082      	sub	sp, #8
    3394:	af00      	add	r7, sp, #0
    3396:	6078      	str	r0, [r7, #4]
    3398:	000a      	movs	r2, r1
    339a:	1cfb      	adds	r3, r7, #3
    339c:	701a      	strb	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    339e:	687b      	ldr	r3, [r7, #4]
    33a0:	1cfa      	adds	r2, r7, #3
    33a2:	7812      	ldrb	r2, [r2, #0]
    33a4:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    33a6:	46c0      	nop			; (mov r8, r8)
    33a8:	46bd      	mov	sp, r7
    33aa:	b002      	add	sp, #8
    33ac:	bd80      	pop	{r7, pc}

000033ae <hri_sercomusart_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
    33ae:	b580      	push	{r7, lr}
    33b0:	b082      	sub	sp, #8
    33b2:	af00      	add	r7, sp, #0
    33b4:	6078      	str	r0, [r7, #4]
    33b6:	000a      	movs	r2, r1
    33b8:	1cbb      	adds	r3, r7, #2
    33ba:	801a      	strh	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    33bc:	687b      	ldr	r3, [r7, #4]
    33be:	1cba      	adds	r2, r7, #2
    33c0:	8812      	ldrh	r2, [r2, #0]
    33c2:	819a      	strh	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    33c4:	46c0      	nop			; (mov r8, r8)
    33c6:	46bd      	mov	sp, r7
    33c8:	b002      	add	sp, #8
    33ca:	bd80      	pop	{r7, pc}

000033cc <hri_sercomusart_write_RXPL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
    33cc:	b580      	push	{r7, lr}
    33ce:	b082      	sub	sp, #8
    33d0:	af00      	add	r7, sp, #0
    33d2:	6078      	str	r0, [r7, #4]
    33d4:	000a      	movs	r2, r1
    33d6:	1cfb      	adds	r3, r7, #3
    33d8:	701a      	strb	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    33da:	687b      	ldr	r3, [r7, #4]
    33dc:	1cfa      	adds	r2, r7, #3
    33de:	7812      	ldrb	r2, [r2, #0]
    33e0:	739a      	strb	r2, [r3, #14]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    33e2:	46c0      	nop			; (mov r8, r8)
    33e4:	46bd      	mov	sp, r7
    33e6:	b002      	add	sp, #8
    33e8:	bd80      	pop	{r7, pc}

000033ea <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    33ea:	b580      	push	{r7, lr}
    33ec:	b082      	sub	sp, #8
    33ee:	af00      	add	r7, sp, #0
    33f0:	6078      	str	r0, [r7, #4]
    33f2:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    33f4:	687b      	ldr	r3, [r7, #4]
    33f6:	683a      	ldr	r2, [r7, #0]
    33f8:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    33fa:	46c0      	nop			; (mov r8, r8)
    33fc:	46bd      	mov	sp, r7
    33fe:	b002      	add	sp, #8
    3400:	bd80      	pop	{r7, pc}

00003402 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    3402:	b580      	push	{r7, lr}
    3404:	b082      	sub	sp, #8
    3406:	af00      	add	r7, sp, #0
    3408:	6078      	str	r0, [r7, #4]
    340a:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    340c:	687b      	ldr	r3, [r7, #4]
    340e:	683a      	ldr	r2, [r7, #0]
    3410:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3412:	46c0      	nop			; (mov r8, r8)
    3414:	46bd      	mov	sp, r7
    3416:	b002      	add	sp, #8
    3418:	bd80      	pop	{r7, pc}

0000341a <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    341a:	b580      	push	{r7, lr}
    341c:	b082      	sub	sp, #8
    341e:	af00      	add	r7, sp, #0
    3420:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    3422:	687b      	ldr	r3, [r7, #4]
    3424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    3426:	0018      	movs	r0, r3
    3428:	46bd      	mov	sp, r7
    342a:	b002      	add	sp, #8
    342c:	bd80      	pop	{r7, pc}

0000342e <hri_sercomusart_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_DATA_reg(const void *const hw, hri_sercomusart_data_reg_t data)
{
    342e:	b580      	push	{r7, lr}
    3430:	b082      	sub	sp, #8
    3432:	af00      	add	r7, sp, #0
    3434:	6078      	str	r0, [r7, #4]
    3436:	000a      	movs	r2, r1
    3438:	1cbb      	adds	r3, r7, #2
    343a:	801a      	strh	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DATA.reg = data;
    343c:	687b      	ldr	r3, [r7, #4]
    343e:	1cba      	adds	r2, r7, #2
    3440:	8812      	ldrh	r2, [r2, #0]
    3442:	851a      	strh	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3444:	46c0      	nop			; (mov r8, r8)
    3446:	46bd      	mov	sp, r7
    3448:	b002      	add	sp, #8
    344a:	bd80      	pop	{r7, pc}

0000344c <hri_sercomusart_read_DATA_reg>:
	((Sercom *)hw)->USART.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_data_reg_t hri_sercomusart_read_DATA_reg(const void *const hw)
{
    344c:	b580      	push	{r7, lr}
    344e:	b082      	sub	sp, #8
    3450:	af00      	add	r7, sp, #0
    3452:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->USART.DATA.reg;
    3454:	687b      	ldr	r3, [r7, #4]
    3456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    3458:	b29b      	uxth	r3, r3
}
    345a:	0018      	movs	r0, r3
    345c:	46bd      	mov	sp, r7
    345e:	b002      	add	sp, #8
    3460:	bd80      	pop	{r7, pc}

00003462 <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    3462:	b580      	push	{r7, lr}
    3464:	b082      	sub	sp, #8
    3466:	af00      	add	r7, sp, #0
    3468:	6078      	str	r0, [r7, #4]
    346a:	000a      	movs	r2, r1
    346c:	1cfb      	adds	r3, r7, #3
    346e:	701a      	strb	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    3470:	687b      	ldr	r3, [r7, #4]
    3472:	1cfa      	adds	r2, r7, #3
    3474:	2130      	movs	r1, #48	; 0x30
    3476:	7812      	ldrb	r2, [r2, #0]
    3478:	545a      	strb	r2, [r3, r1]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    347a:	46c0      	nop			; (mov r8, r8)
    347c:	46bd      	mov	sp, r7
    347e:	b002      	add	sp, #8
    3480:	bd80      	pop	{r7, pc}

00003482 <hri_sercomusart_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
    3482:	b580      	push	{r7, lr}
    3484:	b082      	sub	sp, #8
    3486:	af00      	add	r7, sp, #0
    3488:	6078      	str	r0, [r7, #4]
    348a:	000a      	movs	r2, r1
    348c:	1cfb      	adds	r3, r7, #3
    348e:	701a      	strb	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    3490:	687b      	ldr	r3, [r7, #4]
    3492:	1cfa      	adds	r2, r7, #3
    3494:	2130      	movs	r1, #48	; 0x30
    3496:	7812      	ldrb	r2, [r2, #0]
    3498:	545a      	strb	r2, [r3, r1]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    349a:	46c0      	nop			; (mov r8, r8)
    349c:	46bd      	mov	sp, r7
    349e:	b002      	add	sp, #8
    34a0:	bd80      	pop	{r7, pc}

000034a2 <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    34a2:	b580      	push	{r7, lr}
    34a4:	b082      	sub	sp, #8
    34a6:	af00      	add	r7, sp, #0
    34a8:	6078      	str	r0, [r7, #4]
    34aa:	000a      	movs	r2, r1
    34ac:	1cbb      	adds	r3, r7, #2
    34ae:	801a      	strh	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    34b0:	687b      	ldr	r3, [r7, #4]
    34b2:	1cba      	adds	r2, r7, #2
    34b4:	8812      	ldrh	r2, [r2, #0]
    34b6:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    34b8:	46c0      	nop			; (mov r8, r8)
    34ba:	46bd      	mov	sp, r7
    34bc:	b002      	add	sp, #8
    34be:	bd80      	pop	{r7, pc}

000034c0 <_usart_sync_init>:

/**
 * \brief Initialize synchronous SERCOM USART
 */
int32_t _usart_sync_init(struct _usart_sync_device *const device, void *const hw)
{
    34c0:	b580      	push	{r7, lr}
    34c2:	b082      	sub	sp, #8
    34c4:	af00      	add	r7, sp, #0
    34c6:	6078      	str	r0, [r7, #4]
    34c8:	6039      	str	r1, [r7, #0]
	ASSERT(device);
    34ca:	687b      	ldr	r3, [r7, #4]
    34cc:	1e5a      	subs	r2, r3, #1
    34ce:	4193      	sbcs	r3, r2
    34d0:	b2db      	uxtb	r3, r3
    34d2:	4908      	ldr	r1, [pc, #32]	; (34f4 <_usart_sync_init+0x34>)
    34d4:	22b4      	movs	r2, #180	; 0xb4
    34d6:	0018      	movs	r0, r3
    34d8:	4b07      	ldr	r3, [pc, #28]	; (34f8 <_usart_sync_init+0x38>)
    34da:	4798      	blx	r3

	device->hw = hw;
    34dc:	687b      	ldr	r3, [r7, #4]
    34de:	683a      	ldr	r2, [r7, #0]
    34e0:	601a      	str	r2, [r3, #0]

	return _usart_init(hw);
    34e2:	683b      	ldr	r3, [r7, #0]
    34e4:	0018      	movs	r0, r3
    34e6:	4b05      	ldr	r3, [pc, #20]	; (34fc <_usart_sync_init+0x3c>)
    34e8:	4798      	blx	r3
    34ea:	0003      	movs	r3, r0
}
    34ec:	0018      	movs	r0, r3
    34ee:	46bd      	mov	sp, r7
    34f0:	b002      	add	sp, #8
    34f2:	bd80      	pop	{r7, pc}
    34f4:	0001227c 	.word	0x0001227c
    34f8:	00002b25 	.word	0x00002b25
    34fc:	00003679 	.word	0x00003679

00003500 <_usart_sync_enable>:

/**
 * \brief Enable SERCOM module
 */
void _usart_sync_enable(struct _usart_sync_device *const device)
{
    3500:	b580      	push	{r7, lr}
    3502:	b082      	sub	sp, #8
    3504:	af00      	add	r7, sp, #0
    3506:	6078      	str	r0, [r7, #4]
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    3508:	687b      	ldr	r3, [r7, #4]
    350a:	681b      	ldr	r3, [r3, #0]
    350c:	0018      	movs	r0, r3
    350e:	4b03      	ldr	r3, [pc, #12]	; (351c <_usart_sync_enable+0x1c>)
    3510:	4798      	blx	r3
}
    3512:	46c0      	nop			; (mov r8, r8)
    3514:	46bd      	mov	sp, r7
    3516:	b002      	add	sp, #8
    3518:	bd80      	pop	{r7, pc}
    351a:	46c0      	nop			; (mov r8, r8)
    351c:	00003291 	.word	0x00003291

00003520 <_usart_sync_write_byte>:

/**
 * \brief Write a byte to the given SERCOM USART instance
 */
void _usart_sync_write_byte(struct _usart_sync_device *const device, uint8_t data)
{
    3520:	b580      	push	{r7, lr}
    3522:	b082      	sub	sp, #8
    3524:	af00      	add	r7, sp, #0
    3526:	6078      	str	r0, [r7, #4]
    3528:	000a      	movs	r2, r1
    352a:	1cfb      	adds	r3, r7, #3
    352c:	701a      	strb	r2, [r3, #0]
	hri_sercomusart_write_DATA_reg(device->hw, data);
    352e:	687b      	ldr	r3, [r7, #4]
    3530:	681a      	ldr	r2, [r3, #0]
    3532:	1cfb      	adds	r3, r7, #3
    3534:	781b      	ldrb	r3, [r3, #0]
    3536:	b29b      	uxth	r3, r3
    3538:	0019      	movs	r1, r3
    353a:	0010      	movs	r0, r2
    353c:	4b02      	ldr	r3, [pc, #8]	; (3548 <_usart_sync_write_byte+0x28>)
    353e:	4798      	blx	r3
}
    3540:	46c0      	nop			; (mov r8, r8)
    3542:	46bd      	mov	sp, r7
    3544:	b002      	add	sp, #8
    3546:	bd80      	pop	{r7, pc}
    3548:	0000342f 	.word	0x0000342f

0000354c <_usart_sync_read_byte>:

/**
 * \brief Read a byte from the given SERCOM USART instance
 */
uint8_t _usart_sync_read_byte(const struct _usart_sync_device *const device)
{
    354c:	b580      	push	{r7, lr}
    354e:	b082      	sub	sp, #8
    3550:	af00      	add	r7, sp, #0
    3552:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_read_DATA_reg(device->hw);
    3554:	687b      	ldr	r3, [r7, #4]
    3556:	681b      	ldr	r3, [r3, #0]
    3558:	0018      	movs	r0, r3
    355a:	4b04      	ldr	r3, [pc, #16]	; (356c <_usart_sync_read_byte+0x20>)
    355c:	4798      	blx	r3
    355e:	0003      	movs	r3, r0
    3560:	b2db      	uxtb	r3, r3
}
    3562:	0018      	movs	r0, r3
    3564:	46bd      	mov	sp, r7
    3566:	b002      	add	sp, #8
    3568:	bd80      	pop	{r7, pc}
    356a:	46c0      	nop			; (mov r8, r8)
    356c:	0000344d 	.word	0x0000344d

00003570 <_usart_sync_is_ready_to_send>:

/**
 * \brief Check if USART is ready to send next byte
 */
bool _usart_sync_is_ready_to_send(const struct _usart_sync_device *const device)
{
    3570:	b580      	push	{r7, lr}
    3572:	b082      	sub	sp, #8
    3574:	af00      	add	r7, sp, #0
    3576:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    3578:	687b      	ldr	r3, [r7, #4]
    357a:	681b      	ldr	r3, [r3, #0]
    357c:	0018      	movs	r0, r3
    357e:	4b03      	ldr	r3, [pc, #12]	; (358c <_usart_sync_is_ready_to_send+0x1c>)
    3580:	4798      	blx	r3
    3582:	0003      	movs	r3, r0
}
    3584:	0018      	movs	r0, r3
    3586:	46bd      	mov	sp, r7
    3588:	b002      	add	sp, #8
    358a:	bd80      	pop	{r7, pc}
    358c:	00003141 	.word	0x00003141

00003590 <_usart_sync_is_transmit_done>:

/**
 * \brief Check if USART transmission complete
 */
bool _usart_sync_is_transmit_done(const struct _usart_sync_device *const device)
{
    3590:	b580      	push	{r7, lr}
    3592:	b082      	sub	sp, #8
    3594:	af00      	add	r7, sp, #0
    3596:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    3598:	687b      	ldr	r3, [r7, #4]
    359a:	681b      	ldr	r3, [r3, #0]
    359c:	0018      	movs	r0, r3
    359e:	4b03      	ldr	r3, [pc, #12]	; (35ac <_usart_sync_is_transmit_done+0x1c>)
    35a0:	4798      	blx	r3
    35a2:	0003      	movs	r3, r0
}
    35a4:	0018      	movs	r0, r3
    35a6:	46bd      	mov	sp, r7
    35a8:	b002      	add	sp, #8
    35aa:	bd80      	pop	{r7, pc}
    35ac:	00003163 	.word	0x00003163

000035b0 <_usart_sync_is_byte_received>:

/**
 * \brief Check if there is data received by USART
 */
bool _usart_sync_is_byte_received(const struct _usart_sync_device *const device)
{
    35b0:	b580      	push	{r7, lr}
    35b2:	b082      	sub	sp, #8
    35b4:	af00      	add	r7, sp, #0
    35b6:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    35b8:	687b      	ldr	r3, [r7, #4]
    35ba:	681b      	ldr	r3, [r3, #0]
    35bc:	0018      	movs	r0, r3
    35be:	4b03      	ldr	r3, [pc, #12]	; (35cc <_usart_sync_is_byte_received+0x1c>)
    35c0:	4798      	blx	r3
    35c2:	0003      	movs	r3, r0
}
    35c4:	0018      	movs	r0, r3
    35c6:	46bd      	mov	sp, r7
    35c8:	b002      	add	sp, #8
    35ca:	bd80      	pop	{r7, pc}
    35cc:	00003185 	.word	0x00003185

000035d0 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    35d0:	b580      	push	{r7, lr}
    35d2:	b082      	sub	sp, #8
    35d4:	af00      	add	r7, sp, #0
    35d6:	6078      	str	r0, [r7, #4]
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    35d8:	687b      	ldr	r3, [r7, #4]
    35da:	4a04      	ldr	r2, [pc, #16]	; (35ec <_sercom_get_hardware_index+0x1c>)
    35dc:	4694      	mov	ip, r2
    35de:	4463      	add	r3, ip
    35e0:	0a9b      	lsrs	r3, r3, #10
    35e2:	b2db      	uxtb	r3, r3
}
    35e4:	0018      	movs	r0, r3
    35e6:	46bd      	mov	sp, r7
    35e8:	b002      	add	sp, #8
    35ea:	bd80      	pop	{r7, pc}
    35ec:	bdfff800 	.word	0xbdfff800

000035f0 <_get_sercom_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static uint8_t _get_sercom_index(const void *const hw)
{
    35f0:	b590      	push	{r4, r7, lr}
    35f2:	b085      	sub	sp, #20
    35f4:	af00      	add	r7, sp, #0
    35f6:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    35f8:	230e      	movs	r3, #14
    35fa:	18fc      	adds	r4, r7, r3
    35fc:	687b      	ldr	r3, [r7, #4]
    35fe:	0018      	movs	r0, r3
    3600:	4b18      	ldr	r3, [pc, #96]	; (3664 <_get_sercom_index+0x74>)
    3602:	4798      	blx	r3
    3604:	0003      	movs	r3, r0
    3606:	7023      	strb	r3, [r4, #0]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    3608:	230f      	movs	r3, #15
    360a:	18fb      	adds	r3, r7, r3
    360c:	2200      	movs	r2, #0
    360e:	701a      	strb	r2, [r3, #0]
    3610:	e018      	b.n	3644 <_get_sercom_index+0x54>
		if (_usarts[i].number == sercom_offset) {
    3612:	230f      	movs	r3, #15
    3614:	18fb      	adds	r3, r7, r3
    3616:	781a      	ldrb	r2, [r3, #0]
    3618:	4913      	ldr	r1, [pc, #76]	; (3668 <_get_sercom_index+0x78>)
    361a:	0013      	movs	r3, r2
    361c:	009b      	lsls	r3, r3, #2
    361e:	189b      	adds	r3, r3, r2
    3620:	009b      	lsls	r3, r3, #2
    3622:	5c5b      	ldrb	r3, [r3, r1]
    3624:	220e      	movs	r2, #14
    3626:	18ba      	adds	r2, r7, r2
    3628:	7812      	ldrb	r2, [r2, #0]
    362a:	429a      	cmp	r2, r3
    362c:	d103      	bne.n	3636 <_get_sercom_index+0x46>
			return i;
    362e:	230f      	movs	r3, #15
    3630:	18fb      	adds	r3, r7, r3
    3632:	781b      	ldrb	r3, [r3, #0]
    3634:	e012      	b.n	365c <_get_sercom_index+0x6c>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    3636:	230f      	movs	r3, #15
    3638:	18fb      	adds	r3, r7, r3
    363a:	781a      	ldrb	r2, [r3, #0]
    363c:	230f      	movs	r3, #15
    363e:	18fb      	adds	r3, r7, r3
    3640:	3201      	adds	r2, #1
    3642:	701a      	strb	r2, [r3, #0]
    3644:	230f      	movs	r3, #15
    3646:	18fb      	adds	r3, r7, r3
    3648:	781b      	ldrb	r3, [r3, #0]
    364a:	2b00      	cmp	r3, #0
    364c:	d0e1      	beq.n	3612 <_get_sercom_index+0x22>
		}
	}

	ASSERT(false);
    364e:	4a07      	ldr	r2, [pc, #28]	; (366c <_get_sercom_index+0x7c>)
    3650:	4b07      	ldr	r3, [pc, #28]	; (3670 <_get_sercom_index+0x80>)
    3652:	0019      	movs	r1, r3
    3654:	2000      	movs	r0, #0
    3656:	4b07      	ldr	r3, [pc, #28]	; (3674 <_get_sercom_index+0x84>)
    3658:	4798      	blx	r3
	return 0;
    365a:	2300      	movs	r3, #0
}
    365c:	0018      	movs	r0, r3
    365e:	46bd      	mov	sp, r7
    3660:	b005      	add	sp, #20
    3662:	bd90      	pop	{r4, r7, pc}
    3664:	000035d1 	.word	0x000035d1
    3668:	20000004 	.word	0x20000004
    366c:	0000023a 	.word	0x0000023a
    3670:	0001227c 	.word	0x0001227c
    3674:	00002b25 	.word	0x00002b25

00003678 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    3678:	b590      	push	{r4, r7, lr}
    367a:	b085      	sub	sp, #20
    367c:	af00      	add	r7, sp, #0
    367e:	6078      	str	r0, [r7, #4]
	uint8_t i = _get_sercom_index(hw);
    3680:	230f      	movs	r3, #15
    3682:	18fc      	adds	r4, r7, r3
    3684:	687b      	ldr	r3, [r7, #4]
    3686:	0018      	movs	r0, r3
    3688:	4b6f      	ldr	r3, [pc, #444]	; (3848 <_usart_init+0x1d0>)
    368a:	4798      	blx	r3
    368c:	0003      	movs	r3, r0
    368e:	7023      	strb	r3, [r4, #0]

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    3690:	687b      	ldr	r3, [r7, #4]
    3692:	2101      	movs	r1, #1
    3694:	0018      	movs	r0, r3
    3696:	4b6d      	ldr	r3, [pc, #436]	; (384c <_usart_init+0x1d4>)
    3698:	4798      	blx	r3
    369a:	0003      	movs	r3, r0
    369c:	001a      	movs	r2, r3
    369e:	2301      	movs	r3, #1
    36a0:	4053      	eors	r3, r2
    36a2:	b2db      	uxtb	r3, r3
    36a4:	2b00      	cmp	r3, #0
    36a6:	d025      	beq.n	36f4 <_usart_init+0x7c>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    36a8:	230f      	movs	r3, #15
    36aa:	18fb      	adds	r3, r7, r3
    36ac:	781a      	ldrb	r2, [r3, #0]
    36ae:	4968      	ldr	r1, [pc, #416]	; (3850 <_usart_init+0x1d8>)
    36b0:	0013      	movs	r3, r2
    36b2:	009b      	lsls	r3, r3, #2
    36b4:	189b      	adds	r3, r3, r2
    36b6:	009b      	lsls	r3, r3, #2
    36b8:	18cb      	adds	r3, r1, r3
    36ba:	3304      	adds	r3, #4
    36bc:	681b      	ldr	r3, [r3, #0]
    36be:	221c      	movs	r2, #28
    36c0:	4013      	ands	r3, r2
    36c2:	60bb      	str	r3, [r7, #8]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    36c4:	687b      	ldr	r3, [r7, #4]
    36c6:	2102      	movs	r1, #2
    36c8:	0018      	movs	r0, r3
    36ca:	4b62      	ldr	r3, [pc, #392]	; (3854 <_usart_init+0x1dc>)
    36cc:	4798      	blx	r3
    36ce:	1e03      	subs	r3, r0, #0
    36d0:	d008      	beq.n	36e4 <_usart_init+0x6c>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
    36d2:	687b      	ldr	r3, [r7, #4]
    36d4:	0018      	movs	r0, r3
    36d6:	4b60      	ldr	r3, [pc, #384]	; (3858 <_usart_init+0x1e0>)
    36d8:	4798      	blx	r3
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
    36da:	687b      	ldr	r3, [r7, #4]
    36dc:	2102      	movs	r1, #2
    36de:	0018      	movs	r0, r3
    36e0:	4b5e      	ldr	r3, [pc, #376]	; (385c <_usart_init+0x1e4>)
    36e2:	4798      	blx	r3
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    36e4:	68bb      	ldr	r3, [r7, #8]
    36e6:	2201      	movs	r2, #1
    36e8:	431a      	orrs	r2, r3
    36ea:	687b      	ldr	r3, [r7, #4]
    36ec:	0011      	movs	r1, r2
    36ee:	0018      	movs	r0, r3
    36f0:	4b5b      	ldr	r3, [pc, #364]	; (3860 <_usart_init+0x1e8>)
    36f2:	4798      	blx	r3
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);
    36f4:	687b      	ldr	r3, [r7, #4]
    36f6:	2101      	movs	r1, #1
    36f8:	0018      	movs	r0, r3
    36fa:	4b58      	ldr	r3, [pc, #352]	; (385c <_usart_init+0x1e4>)
    36fc:	4798      	blx	r3

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    36fe:	230f      	movs	r3, #15
    3700:	18fb      	adds	r3, r7, r3
    3702:	781a      	ldrb	r2, [r3, #0]
    3704:	4952      	ldr	r1, [pc, #328]	; (3850 <_usart_init+0x1d8>)
    3706:	0013      	movs	r3, r2
    3708:	009b      	lsls	r3, r3, #2
    370a:	189b      	adds	r3, r3, r2
    370c:	009b      	lsls	r3, r3, #2
    370e:	18cb      	adds	r3, r1, r3
    3710:	3304      	adds	r3, #4
    3712:	681a      	ldr	r2, [r3, #0]
    3714:	687b      	ldr	r3, [r7, #4]
    3716:	0011      	movs	r1, r2
    3718:	0018      	movs	r0, r3
    371a:	4b51      	ldr	r3, [pc, #324]	; (3860 <_usart_init+0x1e8>)
    371c:	4798      	blx	r3
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    371e:	230f      	movs	r3, #15
    3720:	18fb      	adds	r3, r7, r3
    3722:	781a      	ldrb	r2, [r3, #0]
    3724:	494a      	ldr	r1, [pc, #296]	; (3850 <_usart_init+0x1d8>)
    3726:	0013      	movs	r3, r2
    3728:	009b      	lsls	r3, r3, #2
    372a:	189b      	adds	r3, r3, r2
    372c:	009b      	lsls	r3, r3, #2
    372e:	18cb      	adds	r3, r1, r3
    3730:	3308      	adds	r3, #8
    3732:	681a      	ldr	r2, [r3, #0]
    3734:	687b      	ldr	r3, [r7, #4]
    3736:	0011      	movs	r1, r2
    3738:	0018      	movs	r0, r3
    373a:	4b4a      	ldr	r3, [pc, #296]	; (3864 <_usart_init+0x1ec>)
    373c:	4798      	blx	r3
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    373e:	230f      	movs	r3, #15
    3740:	18fb      	adds	r3, r7, r3
    3742:	781a      	ldrb	r2, [r3, #0]
    3744:	4942      	ldr	r1, [pc, #264]	; (3850 <_usart_init+0x1d8>)
    3746:	0013      	movs	r3, r2
    3748:	009b      	lsls	r3, r3, #2
    374a:	189b      	adds	r3, r3, r2
    374c:	009b      	lsls	r3, r3, #2
    374e:	18cb      	adds	r3, r1, r3
    3750:	3304      	adds	r3, #4
    3752:	681a      	ldr	r2, [r3, #0]
    3754:	2380      	movs	r3, #128	; 0x80
    3756:	019b      	lsls	r3, r3, #6
    3758:	4013      	ands	r3, r2
    375a:	d10e      	bne.n	377a <_usart_init+0x102>
    375c:	230f      	movs	r3, #15
    375e:	18fb      	adds	r3, r7, r3
    3760:	781a      	ldrb	r2, [r3, #0]
    3762:	493b      	ldr	r1, [pc, #236]	; (3850 <_usart_init+0x1d8>)
    3764:	0013      	movs	r3, r2
    3766:	009b      	lsls	r3, r3, #2
    3768:	189b      	adds	r3, r3, r2
    376a:	009b      	lsls	r3, r3, #2
    376c:	18cb      	adds	r3, r1, r3
    376e:	3304      	adds	r3, #4
    3770:	681a      	ldr	r2, [r3, #0]
    3772:	23c0      	movs	r3, #192	; 0xc0
    3774:	01db      	lsls	r3, r3, #7
    3776:	4013      	ands	r3, r2
    3778:	d030      	beq.n	37dc <_usart_init+0x164>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    377a:	230f      	movs	r3, #15
    377c:	18fb      	adds	r3, r7, r3
    377e:	781a      	ldrb	r2, [r3, #0]
    3780:	4933      	ldr	r1, [pc, #204]	; (3850 <_usart_init+0x1d8>)
    3782:	0013      	movs	r3, r2
    3784:	009b      	lsls	r3, r3, #2
    3786:	189b      	adds	r3, r3, r2
    3788:	009b      	lsls	r3, r3, #2
    378a:	18cb      	adds	r3, r1, r3
    378c:	330c      	adds	r3, #12
    378e:	881b      	ldrh	r3, [r3, #0]
    3790:	04db      	lsls	r3, r3, #19
    3792:	0cdb      	lsrs	r3, r3, #19
    3794:	b299      	uxth	r1, r3
    3796:	687a      	ldr	r2, [r7, #4]
    3798:	8993      	ldrh	r3, [r2, #12]
    379a:	04c9      	lsls	r1, r1, #19
    379c:	0cc8      	lsrs	r0, r1, #19
    379e:	0b5b      	lsrs	r3, r3, #13
    37a0:	035b      	lsls	r3, r3, #13
    37a2:	1c19      	adds	r1, r3, #0
    37a4:	1c03      	adds	r3, r0, #0
    37a6:	430b      	orrs	r3, r1
    37a8:	8193      	strh	r3, [r2, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    37aa:	230f      	movs	r3, #15
    37ac:	18fb      	adds	r3, r7, r3
    37ae:	781a      	ldrb	r2, [r3, #0]
    37b0:	4927      	ldr	r1, [pc, #156]	; (3850 <_usart_init+0x1d8>)
    37b2:	0013      	movs	r3, r2
    37b4:	009b      	lsls	r3, r3, #2
    37b6:	189b      	adds	r3, r3, r2
    37b8:	009b      	lsls	r3, r3, #2
    37ba:	18cb      	adds	r3, r1, r3
    37bc:	330e      	adds	r3, #14
    37be:	781b      	ldrb	r3, [r3, #0]
    37c0:	1c1a      	adds	r2, r3, #0
    37c2:	2307      	movs	r3, #7
    37c4:	4013      	ands	r3, r2
    37c6:	b2d9      	uxtb	r1, r3
    37c8:	687a      	ldr	r2, [r7, #4]
    37ca:	8993      	ldrh	r3, [r2, #12]
    37cc:	0348      	lsls	r0, r1, #13
    37ce:	04db      	lsls	r3, r3, #19
    37d0:	0cdb      	lsrs	r3, r3, #19
    37d2:	1c19      	adds	r1, r3, #0
    37d4:	1c03      	adds	r3, r0, #0
    37d6:	430b      	orrs	r3, r1
    37d8:	8193      	strh	r3, [r2, #12]
    37da:	e00f      	b.n	37fc <_usart_init+0x184>
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    37dc:	230f      	movs	r3, #15
    37de:	18fb      	adds	r3, r7, r3
    37e0:	781a      	ldrb	r2, [r3, #0]
    37e2:	491b      	ldr	r1, [pc, #108]	; (3850 <_usart_init+0x1d8>)
    37e4:	0013      	movs	r3, r2
    37e6:	009b      	lsls	r3, r3, #2
    37e8:	189b      	adds	r3, r3, r2
    37ea:	009b      	lsls	r3, r3, #2
    37ec:	18cb      	adds	r3, r1, r3
    37ee:	330c      	adds	r3, #12
    37f0:	881a      	ldrh	r2, [r3, #0]
    37f2:	687b      	ldr	r3, [r7, #4]
    37f4:	0011      	movs	r1, r2
    37f6:	0018      	movs	r0, r3
    37f8:	4b1b      	ldr	r3, [pc, #108]	; (3868 <_usart_init+0x1f0>)
    37fa:	4798      	blx	r3
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    37fc:	230f      	movs	r3, #15
    37fe:	18fb      	adds	r3, r7, r3
    3800:	781a      	ldrb	r2, [r3, #0]
    3802:	4913      	ldr	r1, [pc, #76]	; (3850 <_usart_init+0x1d8>)
    3804:	0013      	movs	r3, r2
    3806:	009b      	lsls	r3, r3, #2
    3808:	189b      	adds	r3, r3, r2
    380a:	009b      	lsls	r3, r3, #2
    380c:	18cb      	adds	r3, r1, r3
    380e:	330f      	adds	r3, #15
    3810:	781a      	ldrb	r2, [r3, #0]
    3812:	687b      	ldr	r3, [r7, #4]
    3814:	0011      	movs	r1, r2
    3816:	0018      	movs	r0, r3
    3818:	4b14      	ldr	r3, [pc, #80]	; (386c <_usart_init+0x1f4>)
    381a:	4798      	blx	r3
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    381c:	230f      	movs	r3, #15
    381e:	18fb      	adds	r3, r7, r3
    3820:	781a      	ldrb	r2, [r3, #0]
    3822:	490b      	ldr	r1, [pc, #44]	; (3850 <_usart_init+0x1d8>)
    3824:	0013      	movs	r3, r2
    3826:	009b      	lsls	r3, r3, #2
    3828:	189b      	adds	r3, r3, r2
    382a:	009b      	lsls	r3, r3, #2
    382c:	18cb      	adds	r3, r1, r3
    382e:	3310      	adds	r3, #16
    3830:	781a      	ldrb	r2, [r3, #0]
    3832:	687b      	ldr	r3, [r7, #4]
    3834:	0011      	movs	r1, r2
    3836:	0018      	movs	r0, r3
    3838:	4b0d      	ldr	r3, [pc, #52]	; (3870 <_usart_init+0x1f8>)
    383a:	4798      	blx	r3

	return ERR_NONE;
    383c:	2300      	movs	r3, #0
}
    383e:	0018      	movs	r0, r3
    3840:	46bd      	mov	sp, r7
    3842:	b005      	add	sp, #20
    3844:	bd90      	pop	{r4, r7, pc}
    3846:	46c0      	nop			; (mov r8, r8)
    3848:	000035f1 	.word	0x000035f1
    384c:	000030b5 	.word	0x000030b5
    3850:	20000004 	.word	0x20000004
    3854:	000032e9 	.word	0x000032e9
    3858:	000032bd 	.word	0x000032bd
    385c:	00003097 	.word	0x00003097
    3860:	00003319 	.word	0x00003319
    3864:	00003369 	.word	0x00003369
    3868:	000033af 	.word	0x000033af
    386c:	000033cd 	.word	0x000033cd
    3870:	00003483 	.word	0x00003483

00003874 <_spi_sync_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
    3874:	b580      	push	{r7, lr}
    3876:	b082      	sub	sp, #8
    3878:	af00      	add	r7, sp, #0
    387a:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    387c:	687b      	ldr	r3, [r7, #4]
    387e:	2101      	movs	r1, #1
    3880:	0018      	movs	r0, r3
    3882:	4b08      	ldr	r3, [pc, #32]	; (38a4 <_spi_sync_enable+0x30>)
    3884:	4798      	blx	r3
    3886:	1e03      	subs	r3, r0, #0
    3888:	d002      	beq.n	3890 <_spi_sync_enable+0x1c>
		return ERR_BUSY;
    388a:	2304      	movs	r3, #4
    388c:	425b      	negs	r3, r3
    388e:	e004      	b.n	389a <_spi_sync_enable+0x26>
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);
    3890:	687b      	ldr	r3, [r7, #4]
    3892:	0018      	movs	r0, r3
    3894:	4b04      	ldr	r3, [pc, #16]	; (38a8 <_spi_sync_enable+0x34>)
    3896:	4798      	blx	r3

	return ERR_NONE;
    3898:	2300      	movs	r3, #0
}
    389a:	0018      	movs	r0, r3
    389c:	46bd      	mov	sp, r7
    389e:	b002      	add	sp, #8
    38a0:	bd80      	pop	{r7, pc}
    38a2:	46c0      	nop			; (mov r8, r8)
    38a4:	00003077 	.word	0x00003077
    38a8:	000031a9 	.word	0x000031a9

000038ac <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    38ac:	b580      	push	{r7, lr}
    38ae:	b082      	sub	sp, #8
    38b0:	af00      	add	r7, sp, #0
    38b2:	6078      	str	r0, [r7, #4]
    38b4:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    38b6:	687b      	ldr	r3, [r7, #4]
    38b8:	2b00      	cmp	r3, #0
    38ba:	d004      	beq.n	38c6 <_spi_load_regs_master+0x1a>
    38bc:	683b      	ldr	r3, [r7, #0]
    38be:	2b00      	cmp	r3, #0
    38c0:	d001      	beq.n	38c6 <_spi_load_regs_master+0x1a>
    38c2:	2301      	movs	r3, #1
    38c4:	e000      	b.n	38c8 <_spi_load_regs_master+0x1c>
    38c6:	2300      	movs	r3, #0
    38c8:	1c1a      	adds	r2, r3, #0
    38ca:	2301      	movs	r3, #1
    38cc:	4013      	ands	r3, r2
    38ce:	b2db      	uxtb	r3, r3
    38d0:	4a1f      	ldr	r2, [pc, #124]	; (3950 <_spi_load_regs_master+0xa4>)
    38d2:	4920      	ldr	r1, [pc, #128]	; (3954 <_spi_load_regs_master+0xa8>)
    38d4:	0018      	movs	r0, r3
    38d6:	4b20      	ldr	r3, [pc, #128]	; (3958 <_spi_load_regs_master+0xac>)
    38d8:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    38da:	683b      	ldr	r3, [r7, #0]
    38dc:	781a      	ldrb	r2, [r3, #0]
    38de:	7859      	ldrb	r1, [r3, #1]
    38e0:	0209      	lsls	r1, r1, #8
    38e2:	430a      	orrs	r2, r1
    38e4:	7899      	ldrb	r1, [r3, #2]
    38e6:	0409      	lsls	r1, r1, #16
    38e8:	430a      	orrs	r2, r1
    38ea:	78db      	ldrb	r3, [r3, #3]
    38ec:	061b      	lsls	r3, r3, #24
    38ee:	4313      	orrs	r3, r2
    38f0:	001a      	movs	r2, r3
	hri_sercomspi_write_CTRLA_reg(
    38f2:	4b1a      	ldr	r3, [pc, #104]	; (395c <_spi_load_regs_master+0xb0>)
    38f4:	401a      	ands	r2, r3
    38f6:	687b      	ldr	r3, [r7, #4]
    38f8:	0011      	movs	r1, r2
    38fa:	0018      	movs	r0, r3
    38fc:	4b18      	ldr	r3, [pc, #96]	; (3960 <_spi_load_regs_master+0xb4>)
    38fe:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    3900:	683b      	ldr	r3, [r7, #0]
    3902:	791a      	ldrb	r2, [r3, #4]
    3904:	7959      	ldrb	r1, [r3, #5]
    3906:	0209      	lsls	r1, r1, #8
    3908:	430a      	orrs	r2, r1
    390a:	7999      	ldrb	r1, [r3, #6]
    390c:	0409      	lsls	r1, r1, #16
    390e:	430a      	orrs	r2, r1
    3910:	79db      	ldrb	r3, [r3, #7]
    3912:	061b      	lsls	r3, r3, #24
    3914:	4313      	orrs	r3, r2
    3916:	001a      	movs	r2, r3
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    3918:	4b12      	ldr	r3, [pc, #72]	; (3964 <_spi_load_regs_master+0xb8>)
    391a:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(
    391c:	2280      	movs	r2, #128	; 0x80
    391e:	0292      	lsls	r2, r2, #10
    3920:	431a      	orrs	r2, r3
    3922:	687b      	ldr	r3, [r7, #4]
    3924:	0011      	movs	r1, r2
    3926:	0018      	movs	r0, r3
    3928:	4b0f      	ldr	r3, [pc, #60]	; (3968 <_spi_load_regs_master+0xbc>)
    392a:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    392c:	683b      	ldr	r3, [r7, #0]
    392e:	7b1a      	ldrb	r2, [r3, #12]
    3930:	687b      	ldr	r3, [r7, #4]
    3932:	0011      	movs	r1, r2
    3934:	0018      	movs	r0, r3
    3936:	4b0d      	ldr	r3, [pc, #52]	; (396c <_spi_load_regs_master+0xc0>)
    3938:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    393a:	683b      	ldr	r3, [r7, #0]
    393c:	7b5a      	ldrb	r2, [r3, #13]
    393e:	687b      	ldr	r3, [r7, #4]
    3940:	0011      	movs	r1, r2
    3942:	0018      	movs	r0, r3
    3944:	4b0a      	ldr	r3, [pc, #40]	; (3970 <_spi_load_regs_master+0xc4>)
    3946:	4798      	blx	r3
}
    3948:	46c0      	nop			; (mov r8, r8)
    394a:	46bd      	mov	sp, r7
    394c:	b002      	add	sp, #8
    394e:	bd80      	pop	{r7, pc}
    3950:	000008ef 	.word	0x000008ef
    3954:	0001227c 	.word	0x0001227c
    3958:	00002b25 	.word	0x00002b25
    395c:	fffffefc 	.word	0xfffffefc
    3960:	00003269 	.word	0x00003269
    3964:	fffd1dbf 	.word	0xfffd1dbf
    3968:	00003341 	.word	0x00003341
    396c:	00003391 	.word	0x00003391
    3970:	00003463 	.word	0x00003463

00003974 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    3974:	b580      	push	{r7, lr}
    3976:	b082      	sub	sp, #8
    3978:	af00      	add	r7, sp, #0
    397a:	6078      	str	r0, [r7, #4]
    397c:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    397e:	687b      	ldr	r3, [r7, #4]
    3980:	2b00      	cmp	r3, #0
    3982:	d004      	beq.n	398e <_spi_load_regs_slave+0x1a>
    3984:	683b      	ldr	r3, [r7, #0]
    3986:	2b00      	cmp	r3, #0
    3988:	d001      	beq.n	398e <_spi_load_regs_slave+0x1a>
    398a:	2301      	movs	r3, #1
    398c:	e000      	b.n	3990 <_spi_load_regs_slave+0x1c>
    398e:	2300      	movs	r3, #0
    3990:	1c1a      	adds	r2, r3, #0
    3992:	2301      	movs	r3, #1
    3994:	4013      	ands	r3, r2
    3996:	b2db      	uxtb	r3, r3
    3998:	4a29      	ldr	r2, [pc, #164]	; (3a40 <_spi_load_regs_slave+0xcc>)
    399a:	492a      	ldr	r1, [pc, #168]	; (3a44 <_spi_load_regs_slave+0xd0>)
    399c:	0018      	movs	r0, r3
    399e:	4b2a      	ldr	r3, [pc, #168]	; (3a48 <_spi_load_regs_slave+0xd4>)
    39a0:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    39a2:	683b      	ldr	r3, [r7, #0]
    39a4:	781a      	ldrb	r2, [r3, #0]
    39a6:	7859      	ldrb	r1, [r3, #1]
    39a8:	0209      	lsls	r1, r1, #8
    39aa:	430a      	orrs	r2, r1
    39ac:	7899      	ldrb	r1, [r3, #2]
    39ae:	0409      	lsls	r1, r1, #16
    39b0:	430a      	orrs	r2, r1
    39b2:	78db      	ldrb	r3, [r3, #3]
    39b4:	061b      	lsls	r3, r3, #24
    39b6:	4313      	orrs	r3, r2
    39b8:	001a      	movs	r2, r3
	hri_sercomspi_write_CTRLA_reg(
    39ba:	4b24      	ldr	r3, [pc, #144]	; (3a4c <_spi_load_regs_slave+0xd8>)
    39bc:	401a      	ands	r2, r3
    39be:	687b      	ldr	r3, [r7, #4]
    39c0:	0011      	movs	r1, r2
    39c2:	0018      	movs	r0, r3
    39c4:	4b22      	ldr	r3, [pc, #136]	; (3a50 <_spi_load_regs_slave+0xdc>)
    39c6:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    39c8:	683b      	ldr	r3, [r7, #0]
    39ca:	791a      	ldrb	r2, [r3, #4]
    39cc:	7959      	ldrb	r1, [r3, #5]
    39ce:	0209      	lsls	r1, r1, #8
    39d0:	430a      	orrs	r2, r1
    39d2:	7999      	ldrb	r1, [r3, #6]
    39d4:	0409      	lsls	r1, r1, #16
    39d6:	430a      	orrs	r2, r1
    39d8:	79db      	ldrb	r3, [r3, #7]
    39da:	061b      	lsls	r3, r3, #24
    39dc:	4313      	orrs	r3, r2
    39de:	001a      	movs	r2, r3
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    39e0:	4b1c      	ldr	r3, [pc, #112]	; (3a54 <_spi_load_regs_slave+0xe0>)
    39e2:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(hw,
    39e4:	4a1c      	ldr	r2, [pc, #112]	; (3a58 <_spi_load_regs_slave+0xe4>)
    39e6:	431a      	orrs	r2, r3
    39e8:	687b      	ldr	r3, [r7, #4]
    39ea:	0011      	movs	r1, r2
    39ec:	0018      	movs	r0, r3
    39ee:	4b1b      	ldr	r3, [pc, #108]	; (3a5c <_spi_load_regs_slave+0xe8>)
    39f0:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    39f2:	683b      	ldr	r3, [r7, #0]
    39f4:	7a1a      	ldrb	r2, [r3, #8]
    39f6:	7a59      	ldrb	r1, [r3, #9]
    39f8:	0209      	lsls	r1, r1, #8
    39fa:	430a      	orrs	r2, r1
    39fc:	7a99      	ldrb	r1, [r3, #10]
    39fe:	0409      	lsls	r1, r1, #16
    3a00:	430a      	orrs	r2, r1
    3a02:	7adb      	ldrb	r3, [r3, #11]
    3a04:	061b      	lsls	r3, r3, #24
    3a06:	4313      	orrs	r3, r2
    3a08:	001a      	movs	r2, r3
    3a0a:	687b      	ldr	r3, [r7, #4]
    3a0c:	0011      	movs	r1, r2
    3a0e:	0018      	movs	r0, r3
    3a10:	4b13      	ldr	r3, [pc, #76]	; (3a60 <_spi_load_regs_slave+0xec>)
    3a12:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    3a14:	683b      	ldr	r3, [r7, #0]
    3a16:	7b5a      	ldrb	r2, [r3, #13]
    3a18:	687b      	ldr	r3, [r7, #4]
    3a1a:	0011      	movs	r1, r2
    3a1c:	0018      	movs	r0, r3
    3a1e:	4b11      	ldr	r3, [pc, #68]	; (3a64 <_spi_load_regs_slave+0xf0>)
    3a20:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    3a22:	46c0      	nop			; (mov r8, r8)
    3a24:	2301      	movs	r3, #1
    3a26:	425a      	negs	r2, r3
    3a28:	687b      	ldr	r3, [r7, #4]
    3a2a:	0011      	movs	r1, r2
    3a2c:	0018      	movs	r0, r3
    3a2e:	4b0e      	ldr	r3, [pc, #56]	; (3a68 <_spi_load_regs_slave+0xf4>)
    3a30:	4798      	blx	r3
    3a32:	1e03      	subs	r3, r0, #0
    3a34:	d1f6      	bne.n	3a24 <_spi_load_regs_slave+0xb0>
		;
}
    3a36:	46c0      	nop			; (mov r8, r8)
    3a38:	46bd      	mov	sp, r7
    3a3a:	b002      	add	sp, #8
    3a3c:	bd80      	pop	{r7, pc}
    3a3e:	46c0      	nop			; (mov r8, r8)
    3a40:	00000903 	.word	0x00000903
    3a44:	0001227c 	.word	0x0001227c
    3a48:	00002b25 	.word	0x00002b25
    3a4c:	fffffefc 	.word	0xfffffefc
    3a50:	00003269 	.word	0x00003269
    3a54:	fffdddbf 	.word	0xfffdddbf
    3a58:	00020240 	.word	0x00020240
    3a5c:	00003341 	.word	0x00003341
    3a60:	000033eb 	.word	0x000033eb
    3a64:	00003463 	.word	0x00003463
    3a68:	00003077 	.word	0x00003077

00003a6c <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    3a6c:	b590      	push	{r4, r7, lr}
    3a6e:	b085      	sub	sp, #20
    3a70:	af00      	add	r7, sp, #0
    3a72:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    3a74:	687b      	ldr	r3, [r7, #4]
    3a76:	220e      	movs	r2, #14
    3a78:	18bc      	adds	r4, r7, r2
    3a7a:	0018      	movs	r0, r3
    3a7c:	4b18      	ldr	r3, [pc, #96]	; (3ae0 <_spi_get_regs+0x74>)
    3a7e:	4798      	blx	r3
    3a80:	0003      	movs	r3, r0
    3a82:	7023      	strb	r3, [r4, #0]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    3a84:	230f      	movs	r3, #15
    3a86:	18fb      	adds	r3, r7, r3
    3a88:	2200      	movs	r2, #0
    3a8a:	701a      	strb	r2, [r3, #0]
    3a8c:	e01e      	b.n	3acc <_spi_get_regs+0x60>
		if (sercomspi_regs[i].n == n) {
    3a8e:	230f      	movs	r3, #15
    3a90:	18fb      	adds	r3, r7, r3
    3a92:	781a      	ldrb	r2, [r3, #0]
    3a94:	4913      	ldr	r1, [pc, #76]	; (3ae4 <_spi_get_regs+0x78>)
    3a96:	0013      	movs	r3, r2
    3a98:	011b      	lsls	r3, r3, #4
    3a9a:	189b      	adds	r3, r3, r2
    3a9c:	18cb      	adds	r3, r1, r3
    3a9e:	3310      	adds	r3, #16
    3aa0:	781b      	ldrb	r3, [r3, #0]
    3aa2:	220e      	movs	r2, #14
    3aa4:	18ba      	adds	r2, r7, r2
    3aa6:	7812      	ldrb	r2, [r2, #0]
    3aa8:	429a      	cmp	r2, r3
    3aaa:	d108      	bne.n	3abe <_spi_get_regs+0x52>
			return &sercomspi_regs[i];
    3aac:	230f      	movs	r3, #15
    3aae:	18fb      	adds	r3, r7, r3
    3ab0:	781a      	ldrb	r2, [r3, #0]
    3ab2:	0013      	movs	r3, r2
    3ab4:	011b      	lsls	r3, r3, #4
    3ab6:	189b      	adds	r3, r3, r2
    3ab8:	4a0a      	ldr	r2, [pc, #40]	; (3ae4 <_spi_get_regs+0x78>)
    3aba:	189b      	adds	r3, r3, r2
    3abc:	e00c      	b.n	3ad8 <_spi_get_regs+0x6c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    3abe:	230f      	movs	r3, #15
    3ac0:	18fb      	adds	r3, r7, r3
    3ac2:	781a      	ldrb	r2, [r3, #0]
    3ac4:	230f      	movs	r3, #15
    3ac6:	18fb      	adds	r3, r7, r3
    3ac8:	3201      	adds	r2, #1
    3aca:	701a      	strb	r2, [r3, #0]
    3acc:	230f      	movs	r3, #15
    3ace:	18fb      	adds	r3, r7, r3
    3ad0:	781b      	ldrb	r3, [r3, #0]
    3ad2:	2b01      	cmp	r3, #1
    3ad4:	d9db      	bls.n	3a8e <_spi_get_regs+0x22>
		}
	}

	return NULL;
    3ad6:	2300      	movs	r3, #0
}
    3ad8:	0018      	movs	r0, r3
    3ada:	46bd      	mov	sp, r7
    3adc:	b005      	add	sp, #20
    3ade:	bd90      	pop	{r4, r7, pc}
    3ae0:	000035d1 	.word	0x000035d1
    3ae4:	00012298 	.word	0x00012298

00003ae8 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    3ae8:	b580      	push	{r7, lr}
    3aea:	b084      	sub	sp, #16
    3aec:	af00      	add	r7, sp, #0
    3aee:	6078      	str	r0, [r7, #4]
    3af0:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    3af2:	683b      	ldr	r3, [r7, #0]
    3af4:	0018      	movs	r0, r3
    3af6:	4b4a      	ldr	r3, [pc, #296]	; (3c20 <_spi_m_sync_init+0x138>)
    3af8:	4798      	blx	r3
    3afa:	0003      	movs	r3, r0
    3afc:	60fb      	str	r3, [r7, #12]

	ASSERT(dev && hw);
    3afe:	687b      	ldr	r3, [r7, #4]
    3b00:	2b00      	cmp	r3, #0
    3b02:	d004      	beq.n	3b0e <_spi_m_sync_init+0x26>
    3b04:	683b      	ldr	r3, [r7, #0]
    3b06:	2b00      	cmp	r3, #0
    3b08:	d001      	beq.n	3b0e <_spi_m_sync_init+0x26>
    3b0a:	2301      	movs	r3, #1
    3b0c:	e000      	b.n	3b10 <_spi_m_sync_init+0x28>
    3b0e:	2300      	movs	r3, #0
    3b10:	1c1a      	adds	r2, r3, #0
    3b12:	2301      	movs	r3, #1
    3b14:	4013      	ands	r3, r2
    3b16:	b2db      	uxtb	r3, r3
    3b18:	4a42      	ldr	r2, [pc, #264]	; (3c24 <_spi_m_sync_init+0x13c>)
    3b1a:	4943      	ldr	r1, [pc, #268]	; (3c28 <_spi_m_sync_init+0x140>)
    3b1c:	0018      	movs	r0, r3
    3b1e:	4b43      	ldr	r3, [pc, #268]	; (3c2c <_spi_m_sync_init+0x144>)
    3b20:	4798      	blx	r3

	if (regs == NULL) {
    3b22:	68fb      	ldr	r3, [r7, #12]
    3b24:	2b00      	cmp	r3, #0
    3b26:	d102      	bne.n	3b2e <_spi_m_sync_init+0x46>
		return ERR_INVALID_ARG;
    3b28:	230d      	movs	r3, #13
    3b2a:	425b      	negs	r3, r3
    3b2c:	e074      	b.n	3c18 <_spi_m_sync_init+0x130>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    3b2e:	683b      	ldr	r3, [r7, #0]
    3b30:	2101      	movs	r1, #1
    3b32:	0018      	movs	r0, r3
    3b34:	4b3e      	ldr	r3, [pc, #248]	; (3c30 <_spi_m_sync_init+0x148>)
    3b36:	4798      	blx	r3
    3b38:	0003      	movs	r3, r0
    3b3a:	001a      	movs	r2, r3
    3b3c:	2301      	movs	r3, #1
    3b3e:	4053      	eors	r3, r2
    3b40:	b2db      	uxtb	r3, r3
    3b42:	2b00      	cmp	r3, #0
    3b44:	d026      	beq.n	3b94 <_spi_m_sync_init+0xac>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    3b46:	68fb      	ldr	r3, [r7, #12]
    3b48:	781a      	ldrb	r2, [r3, #0]
    3b4a:	7859      	ldrb	r1, [r3, #1]
    3b4c:	0209      	lsls	r1, r1, #8
    3b4e:	430a      	orrs	r2, r1
    3b50:	7899      	ldrb	r1, [r3, #2]
    3b52:	0409      	lsls	r1, r1, #16
    3b54:	430a      	orrs	r2, r1
    3b56:	78db      	ldrb	r3, [r3, #3]
    3b58:	061b      	lsls	r3, r3, #24
    3b5a:	4313      	orrs	r3, r2
    3b5c:	001a      	movs	r2, r3
    3b5e:	231c      	movs	r3, #28
    3b60:	4013      	ands	r3, r2
    3b62:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    3b64:	683b      	ldr	r3, [r7, #0]
    3b66:	2102      	movs	r1, #2
    3b68:	0018      	movs	r0, r3
    3b6a:	4b32      	ldr	r3, [pc, #200]	; (3c34 <_spi_m_sync_init+0x14c>)
    3b6c:	4798      	blx	r3
    3b6e:	1e03      	subs	r3, r0, #0
    3b70:	d008      	beq.n	3b84 <_spi_m_sync_init+0x9c>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    3b72:	683b      	ldr	r3, [r7, #0]
    3b74:	0018      	movs	r0, r3
    3b76:	4b30      	ldr	r3, [pc, #192]	; (3c38 <_spi_m_sync_init+0x150>)
    3b78:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    3b7a:	683b      	ldr	r3, [r7, #0]
    3b7c:	2102      	movs	r1, #2
    3b7e:	0018      	movs	r0, r3
    3b80:	4b2e      	ldr	r3, [pc, #184]	; (3c3c <_spi_m_sync_init+0x154>)
    3b82:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    3b84:	68bb      	ldr	r3, [r7, #8]
    3b86:	2201      	movs	r2, #1
    3b88:	431a      	orrs	r2, r3
    3b8a:	683b      	ldr	r3, [r7, #0]
    3b8c:	0011      	movs	r1, r2
    3b8e:	0018      	movs	r0, r3
    3b90:	4b2b      	ldr	r3, [pc, #172]	; (3c40 <_spi_m_sync_init+0x158>)
    3b92:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    3b94:	683b      	ldr	r3, [r7, #0]
    3b96:	2101      	movs	r1, #1
    3b98:	0018      	movs	r0, r3
    3b9a:	4b28      	ldr	r3, [pc, #160]	; (3c3c <_spi_m_sync_init+0x154>)
    3b9c:	4798      	blx	r3

	dev->prvt = hw;
    3b9e:	687b      	ldr	r3, [r7, #4]
    3ba0:	683a      	ldr	r2, [r7, #0]
    3ba2:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    3ba4:	68fb      	ldr	r3, [r7, #12]
    3ba6:	781a      	ldrb	r2, [r3, #0]
    3ba8:	7859      	ldrb	r1, [r3, #1]
    3baa:	0209      	lsls	r1, r1, #8
    3bac:	430a      	orrs	r2, r1
    3bae:	7899      	ldrb	r1, [r3, #2]
    3bb0:	0409      	lsls	r1, r1, #16
    3bb2:	430a      	orrs	r2, r1
    3bb4:	78db      	ldrb	r3, [r3, #3]
    3bb6:	061b      	lsls	r3, r3, #24
    3bb8:	4313      	orrs	r3, r2
    3bba:	001a      	movs	r2, r3
    3bbc:	231c      	movs	r3, #28
    3bbe:	4013      	ands	r3, r2
    3bc0:	2b08      	cmp	r3, #8
    3bc2:	d106      	bne.n	3bd2 <_spi_m_sync_init+0xea>
		_spi_load_regs_slave(hw, regs);
    3bc4:	68fa      	ldr	r2, [r7, #12]
    3bc6:	683b      	ldr	r3, [r7, #0]
    3bc8:	0011      	movs	r1, r2
    3bca:	0018      	movs	r0, r3
    3bcc:	4b1d      	ldr	r3, [pc, #116]	; (3c44 <_spi_m_sync_init+0x15c>)
    3bce:	4798      	blx	r3
    3bd0:	e005      	b.n	3bde <_spi_m_sync_init+0xf6>
	} else {
		_spi_load_regs_master(hw, regs);
    3bd2:	68fa      	ldr	r2, [r7, #12]
    3bd4:	683b      	ldr	r3, [r7, #0]
    3bd6:	0011      	movs	r1, r2
    3bd8:	0018      	movs	r0, r3
    3bda:	4b1b      	ldr	r3, [pc, #108]	; (3c48 <_spi_m_sync_init+0x160>)
    3bdc:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    3bde:	68fb      	ldr	r3, [r7, #12]
    3be0:	791a      	ldrb	r2, [r3, #4]
    3be2:	7959      	ldrb	r1, [r3, #5]
    3be4:	0209      	lsls	r1, r1, #8
    3be6:	430a      	orrs	r2, r1
    3be8:	7999      	ldrb	r1, [r3, #6]
    3bea:	0409      	lsls	r1, r1, #16
    3bec:	430a      	orrs	r2, r1
    3bee:	79db      	ldrb	r3, [r3, #7]
    3bf0:	061b      	lsls	r3, r3, #24
    3bf2:	4313      	orrs	r3, r2
    3bf4:	001a      	movs	r2, r3
    3bf6:	2307      	movs	r3, #7
    3bf8:	4013      	ands	r3, r2
    3bfa:	d101      	bne.n	3c00 <_spi_m_sync_init+0x118>
    3bfc:	2201      	movs	r2, #1
    3bfe:	e000      	b.n	3c02 <_spi_m_sync_init+0x11a>
    3c00:	2202      	movs	r2, #2
    3c02:	687b      	ldr	r3, [r7, #4]
    3c04:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    3c06:	68fb      	ldr	r3, [r7, #12]
    3c08:	7b9a      	ldrb	r2, [r3, #14]
    3c0a:	7bdb      	ldrb	r3, [r3, #15]
    3c0c:	021b      	lsls	r3, r3, #8
    3c0e:	4313      	orrs	r3, r2
    3c10:	b29a      	uxth	r2, r3
    3c12:	687b      	ldr	r3, [r7, #4]
    3c14:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    3c16:	2300      	movs	r3, #0
}
    3c18:	0018      	movs	r0, r3
    3c1a:	46bd      	mov	sp, r7
    3c1c:	b004      	add	sp, #16
    3c1e:	bd80      	pop	{r7, pc}
    3c20:	00003a6d 	.word	0x00003a6d
    3c24:	00000925 	.word	0x00000925
    3c28:	0001227c 	.word	0x0001227c
    3c2c:	00002b25 	.word	0x00002b25
    3c30:	00003077 	.word	0x00003077
    3c34:	00003239 	.word	0x00003239
    3c38:	0000320d 	.word	0x0000320d
    3c3c:	00003059 	.word	0x00003059
    3c40:	00003269 	.word	0x00003269
    3c44:	00003975 	.word	0x00003975
    3c48:	000038ad 	.word	0x000038ad

00003c4c <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    3c4c:	b580      	push	{r7, lr}
    3c4e:	b082      	sub	sp, #8
    3c50:	af00      	add	r7, sp, #0
    3c52:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    3c54:	687b      	ldr	r3, [r7, #4]
    3c56:	2b00      	cmp	r3, #0
    3c58:	d005      	beq.n	3c66 <_spi_m_sync_enable+0x1a>
    3c5a:	687b      	ldr	r3, [r7, #4]
    3c5c:	681b      	ldr	r3, [r3, #0]
    3c5e:	2b00      	cmp	r3, #0
    3c60:	d001      	beq.n	3c66 <_spi_m_sync_enable+0x1a>
    3c62:	2301      	movs	r3, #1
    3c64:	e000      	b.n	3c68 <_spi_m_sync_enable+0x1c>
    3c66:	2300      	movs	r3, #0
    3c68:	1c1a      	adds	r2, r3, #0
    3c6a:	2301      	movs	r3, #1
    3c6c:	4013      	ands	r3, r2
    3c6e:	b2d8      	uxtb	r0, r3
    3c70:	2398      	movs	r3, #152	; 0x98
    3c72:	011a      	lsls	r2, r3, #4
    3c74:	4b06      	ldr	r3, [pc, #24]	; (3c90 <_spi_m_sync_enable+0x44>)
    3c76:	0019      	movs	r1, r3
    3c78:	4b06      	ldr	r3, [pc, #24]	; (3c94 <_spi_m_sync_enable+0x48>)
    3c7a:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    3c7c:	687b      	ldr	r3, [r7, #4]
    3c7e:	681b      	ldr	r3, [r3, #0]
    3c80:	0018      	movs	r0, r3
    3c82:	4b05      	ldr	r3, [pc, #20]	; (3c98 <_spi_m_sync_enable+0x4c>)
    3c84:	4798      	blx	r3
    3c86:	0003      	movs	r3, r0
}
    3c88:	0018      	movs	r0, r3
    3c8a:	46bd      	mov	sp, r7
    3c8c:	b002      	add	sp, #8
    3c8e:	bd80      	pop	{r7, pc}
    3c90:	0001227c 	.word	0x0001227c
    3c94:	00002b25 	.word	0x00002b25
    3c98:	00003875 	.word	0x00003875

00003c9c <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    3c9c:	b580      	push	{r7, lr}
    3c9e:	b082      	sub	sp, #8
    3ca0:	af00      	add	r7, sp, #0
    3ca2:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    3ca4:	46c0      	nop			; (mov r8, r8)
    3ca6:	687b      	ldr	r3, [r7, #4]
    3ca8:	2103      	movs	r1, #3
    3caa:	0018      	movs	r0, r3
    3cac:	4b06      	ldr	r3, [pc, #24]	; (3cc8 <_spi_wait_bus_idle+0x2c>)
    3cae:	4798      	blx	r3
    3cb0:	1e03      	subs	r3, r0, #0
    3cb2:	d0f8      	beq.n	3ca6 <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    3cb4:	687b      	ldr	r3, [r7, #4]
    3cb6:	2103      	movs	r1, #3
    3cb8:	0018      	movs	r0, r3
    3cba:	4b04      	ldr	r3, [pc, #16]	; (3ccc <_spi_wait_bus_idle+0x30>)
    3cbc:	4798      	blx	r3
}
    3cbe:	46c0      	nop			; (mov r8, r8)
    3cc0:	46bd      	mov	sp, r7
    3cc2:	b002      	add	sp, #8
    3cc4:	bd80      	pop	{r7, pc}
    3cc6:	46c0      	nop			; (mov r8, r8)
    3cc8:	000030d5 	.word	0x000030d5
    3ccc:	00003123 	.word	0x00003123

00003cd0 <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    3cd0:	b580      	push	{r7, lr}
    3cd2:	b086      	sub	sp, #24
    3cd4:	af00      	add	r7, sp, #0
    3cd6:	60f8      	str	r0, [r7, #12]
    3cd8:	60b9      	str	r1, [r7, #8]
    3cda:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    3cdc:	68bb      	ldr	r3, [r7, #8]
    3cde:	2204      	movs	r2, #4
    3ce0:	4013      	ands	r3, r2
    3ce2:	d101      	bne.n	3ce8 <_spi_rx_check_and_receive+0x18>
		return false;
    3ce4:	2300      	movs	r3, #0
    3ce6:	e024      	b.n	3d32 <_spi_rx_check_and_receive+0x62>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    3ce8:	68fb      	ldr	r3, [r7, #12]
    3cea:	0018      	movs	r0, r3
    3cec:	4b13      	ldr	r3, [pc, #76]	; (3d3c <_spi_rx_check_and_receive+0x6c>)
    3cee:	4798      	blx	r3
    3cf0:	0003      	movs	r3, r0
    3cf2:	617b      	str	r3, [r7, #20]

	if (ctrl->rxbuf) {
    3cf4:	687b      	ldr	r3, [r7, #4]
    3cf6:	685b      	ldr	r3, [r3, #4]
    3cf8:	2b00      	cmp	r3, #0
    3cfa:	d014      	beq.n	3d26 <_spi_rx_check_and_receive+0x56>
		*ctrl->rxbuf++ = (uint8_t)data;
    3cfc:	687b      	ldr	r3, [r7, #4]
    3cfe:	685b      	ldr	r3, [r3, #4]
    3d00:	1c59      	adds	r1, r3, #1
    3d02:	687a      	ldr	r2, [r7, #4]
    3d04:	6051      	str	r1, [r2, #4]
    3d06:	697a      	ldr	r2, [r7, #20]
    3d08:	b2d2      	uxtb	r2, r2
    3d0a:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    3d0c:	687b      	ldr	r3, [r7, #4]
    3d0e:	7c1b      	ldrb	r3, [r3, #16]
    3d10:	2b01      	cmp	r3, #1
    3d12:	d908      	bls.n	3d26 <_spi_rx_check_and_receive+0x56>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    3d14:	687b      	ldr	r3, [r7, #4]
    3d16:	685b      	ldr	r3, [r3, #4]
    3d18:	1c59      	adds	r1, r3, #1
    3d1a:	687a      	ldr	r2, [r7, #4]
    3d1c:	6051      	str	r1, [r2, #4]
    3d1e:	697a      	ldr	r2, [r7, #20]
    3d20:	0a12      	lsrs	r2, r2, #8
    3d22:	b2d2      	uxtb	r2, r2
    3d24:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    3d26:	687b      	ldr	r3, [r7, #4]
    3d28:	68db      	ldr	r3, [r3, #12]
    3d2a:	1c5a      	adds	r2, r3, #1
    3d2c:	687b      	ldr	r3, [r7, #4]
    3d2e:	60da      	str	r2, [r3, #12]

	return true;
    3d30:	2301      	movs	r3, #1
}
    3d32:	0018      	movs	r0, r3
    3d34:	46bd      	mov	sp, r7
    3d36:	b006      	add	sp, #24
    3d38:	bd80      	pop	{r7, pc}
    3d3a:	46c0      	nop			; (mov r8, r8)
    3d3c:	0000341b 	.word	0x0000341b

00003d40 <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    3d40:	b580      	push	{r7, lr}
    3d42:	b086      	sub	sp, #24
    3d44:	af00      	add	r7, sp, #0
    3d46:	60f8      	str	r0, [r7, #12]
    3d48:	60b9      	str	r1, [r7, #8]
    3d4a:	607a      	str	r2, [r7, #4]
    3d4c:	001a      	movs	r2, r3
    3d4e:	1cbb      	adds	r3, r7, #2
    3d50:	801a      	strh	r2, [r3, #0]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    3d52:	68bb      	ldr	r3, [r7, #8]
    3d54:	2201      	movs	r2, #1
    3d56:	4013      	ands	r3, r2
    3d58:	d02b      	beq.n	3db2 <_spi_tx_check_and_send+0x72>
		return;
	}

	if (ctrl->txbuf) {
    3d5a:	687b      	ldr	r3, [r7, #4]
    3d5c:	681b      	ldr	r3, [r3, #0]
    3d5e:	2b00      	cmp	r3, #0
    3d60:	d018      	beq.n	3d94 <_spi_tx_check_and_send+0x54>
		data = *ctrl->txbuf++;
    3d62:	687b      	ldr	r3, [r7, #4]
    3d64:	681b      	ldr	r3, [r3, #0]
    3d66:	1c59      	adds	r1, r3, #1
    3d68:	687a      	ldr	r2, [r7, #4]
    3d6a:	6011      	str	r1, [r2, #0]
    3d6c:	781b      	ldrb	r3, [r3, #0]
    3d6e:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    3d70:	687b      	ldr	r3, [r7, #4]
    3d72:	7c1b      	ldrb	r3, [r3, #16]
    3d74:	2b01      	cmp	r3, #1
    3d76:	d910      	bls.n	3d9a <_spi_tx_check_and_send+0x5a>
			data |= (*ctrl->txbuf) << 8;
    3d78:	687b      	ldr	r3, [r7, #4]
    3d7a:	681b      	ldr	r3, [r3, #0]
    3d7c:	781b      	ldrb	r3, [r3, #0]
    3d7e:	021b      	lsls	r3, r3, #8
    3d80:	001a      	movs	r2, r3
    3d82:	697b      	ldr	r3, [r7, #20]
    3d84:	4313      	orrs	r3, r2
    3d86:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    3d88:	687b      	ldr	r3, [r7, #4]
    3d8a:	681b      	ldr	r3, [r3, #0]
    3d8c:	1c5a      	adds	r2, r3, #1
    3d8e:	687b      	ldr	r3, [r7, #4]
    3d90:	601a      	str	r2, [r3, #0]
    3d92:	e002      	b.n	3d9a <_spi_tx_check_and_send+0x5a>
		}
	} else {
		data = dummy;
    3d94:	1cbb      	adds	r3, r7, #2
    3d96:	881b      	ldrh	r3, [r3, #0]
    3d98:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    3d9a:	687b      	ldr	r3, [r7, #4]
    3d9c:	689b      	ldr	r3, [r3, #8]
    3d9e:	1c5a      	adds	r2, r3, #1
    3da0:	687b      	ldr	r3, [r7, #4]
    3da2:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    3da4:	697a      	ldr	r2, [r7, #20]
    3da6:	68fb      	ldr	r3, [r7, #12]
    3da8:	0011      	movs	r1, r2
    3daa:	0018      	movs	r0, r3
    3dac:	4b03      	ldr	r3, [pc, #12]	; (3dbc <_spi_tx_check_and_send+0x7c>)
    3dae:	4798      	blx	r3
    3db0:	e000      	b.n	3db4 <_spi_tx_check_and_send+0x74>
		return;
    3db2:	46c0      	nop			; (mov r8, r8)
}
    3db4:	46bd      	mov	sp, r7
    3db6:	b006      	add	sp, #24
    3db8:	bd80      	pop	{r7, pc}
    3dba:	46c0      	nop			; (mov r8, r8)
    3dbc:	00003403 	.word	0x00003403

00003dc0 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    3dc0:	b580      	push	{r7, lr}
    3dc2:	b082      	sub	sp, #8
    3dc4:	af00      	add	r7, sp, #0
    3dc6:	6078      	str	r0, [r7, #4]
    3dc8:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    3dca:	687b      	ldr	r3, [r7, #4]
    3dcc:	2280      	movs	r2, #128	; 0x80
    3dce:	4013      	ands	r3, r2
    3dd0:	d00d      	beq.n	3dee <_spi_err_check+0x2e>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    3dd2:	4a09      	ldr	r2, [pc, #36]	; (3df8 <_spi_err_check+0x38>)
    3dd4:	683b      	ldr	r3, [r7, #0]
    3dd6:	0011      	movs	r1, r2
    3dd8:	0018      	movs	r0, r3
    3dda:	4b08      	ldr	r3, [pc, #32]	; (3dfc <_spi_err_check+0x3c>)
    3ddc:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    3dde:	683b      	ldr	r3, [r7, #0]
    3de0:	2180      	movs	r1, #128	; 0x80
    3de2:	0018      	movs	r0, r3
    3de4:	4b06      	ldr	r3, [pc, #24]	; (3e00 <_spi_err_check+0x40>)
    3de6:	4798      	blx	r3
		return ERR_OVERFLOW;
    3de8:	2313      	movs	r3, #19
    3dea:	425b      	negs	r3, r3
    3dec:	e000      	b.n	3df0 <_spi_err_check+0x30>
	}

	return ERR_NONE;
    3dee:	2300      	movs	r3, #0
}
    3df0:	0018      	movs	r0, r3
    3df2:	46bd      	mov	sp, r7
    3df4:	b002      	add	sp, #8
    3df6:	bd80      	pop	{r7, pc}
    3df8:	0000ffff 	.word	0x0000ffff
    3dfc:	000034a3 	.word	0x000034a3
    3e00:	00003123 	.word	0x00003123

00003e04 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    3e04:	b590      	push	{r4, r7, lr}
    3e06:	b08b      	sub	sp, #44	; 0x2c
    3e08:	af00      	add	r7, sp, #0
    3e0a:	6078      	str	r0, [r7, #4]
    3e0c:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    3e0e:	687b      	ldr	r3, [r7, #4]
    3e10:	681b      	ldr	r3, [r3, #0]
    3e12:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    3e14:	2300      	movs	r3, #0
    3e16:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    3e18:	683b      	ldr	r3, [r7, #0]
    3e1a:	681a      	ldr	r2, [r3, #0]
    3e1c:	2308      	movs	r3, #8
    3e1e:	18fb      	adds	r3, r7, r3
    3e20:	601a      	str	r2, [r3, #0]
    3e22:	683b      	ldr	r3, [r7, #0]
    3e24:	685a      	ldr	r2, [r3, #4]
    3e26:	2308      	movs	r3, #8
    3e28:	18fb      	adds	r3, r7, r3
    3e2a:	605a      	str	r2, [r3, #4]
    3e2c:	2308      	movs	r3, #8
    3e2e:	18fb      	adds	r3, r7, r3
    3e30:	2200      	movs	r2, #0
    3e32:	609a      	str	r2, [r3, #8]
    3e34:	2308      	movs	r3, #8
    3e36:	18fb      	adds	r3, r7, r3
    3e38:	2200      	movs	r2, #0
    3e3a:	60da      	str	r2, [r3, #12]
    3e3c:	687b      	ldr	r3, [r7, #4]
    3e3e:	791a      	ldrb	r2, [r3, #4]
    3e40:	2308      	movs	r3, #8
    3e42:	18fb      	adds	r3, r7, r3
    3e44:	741a      	strb	r2, [r3, #16]

	ASSERT(dev && hw);
    3e46:	687b      	ldr	r3, [r7, #4]
    3e48:	2b00      	cmp	r3, #0
    3e4a:	d004      	beq.n	3e56 <_spi_m_sync_trans+0x52>
    3e4c:	6a3b      	ldr	r3, [r7, #32]
    3e4e:	2b00      	cmp	r3, #0
    3e50:	d001      	beq.n	3e56 <_spi_m_sync_trans+0x52>
    3e52:	2301      	movs	r3, #1
    3e54:	e000      	b.n	3e58 <_spi_m_sync_trans+0x54>
    3e56:	2300      	movs	r3, #0
    3e58:	1c1a      	adds	r2, r3, #0
    3e5a:	2301      	movs	r3, #1
    3e5c:	4013      	ands	r3, r2
    3e5e:	b2db      	uxtb	r3, r3
    3e60:	4a34      	ldr	r2, [pc, #208]	; (3f34 <_spi_m_sync_trans+0x130>)
    3e62:	4935      	ldr	r1, [pc, #212]	; (3f38 <_spi_m_sync_trans+0x134>)
    3e64:	0018      	movs	r0, r3
    3e66:	4b35      	ldr	r3, [pc, #212]	; (3f3c <_spi_m_sync_trans+0x138>)
    3e68:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    3e6a:	6a3b      	ldr	r3, [r7, #32]
    3e6c:	2107      	movs	r1, #7
    3e6e:	0018      	movs	r0, r3
    3e70:	4b33      	ldr	r3, [pc, #204]	; (3f40 <_spi_m_sync_trans+0x13c>)
    3e72:	4798      	blx	r3
    3e74:	1e03      	subs	r3, r0, #0
    3e76:	d002      	beq.n	3e7e <_spi_m_sync_trans+0x7a>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    3e78:	2304      	movs	r3, #4
    3e7a:	425b      	negs	r3, r3
    3e7c:	e055      	b.n	3f2a <_spi_m_sync_trans+0x126>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    3e7e:	6a3b      	ldr	r3, [r7, #32]
    3e80:	0018      	movs	r0, r3
    3e82:	4b30      	ldr	r3, [pc, #192]	; (3f44 <_spi_m_sync_trans+0x140>)
    3e84:	4798      	blx	r3
    3e86:	0003      	movs	r3, r0
    3e88:	001a      	movs	r2, r3
    3e8a:	2301      	movs	r3, #1
    3e8c:	4053      	eors	r3, r2
    3e8e:	b2db      	uxtb	r3, r3
    3e90:	2b00      	cmp	r3, #0
    3e92:	d002      	beq.n	3e9a <_spi_m_sync_trans+0x96>
		return ERR_NOT_INITIALIZED;
    3e94:	2314      	movs	r3, #20
    3e96:	425b      	negs	r3, r3
    3e98:	e047      	b.n	3f2a <_spi_m_sync_trans+0x126>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    3e9a:	6a3b      	ldr	r3, [r7, #32]
    3e9c:	0018      	movs	r0, r3
    3e9e:	4b2a      	ldr	r3, [pc, #168]	; (3f48 <_spi_m_sync_trans+0x144>)
    3ea0:	4798      	blx	r3
    3ea2:	0003      	movs	r3, r0
    3ea4:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    3ea6:	2308      	movs	r3, #8
    3ea8:	18fa      	adds	r2, r7, r3
    3eaa:	69f9      	ldr	r1, [r7, #28]
    3eac:	6a3b      	ldr	r3, [r7, #32]
    3eae:	0018      	movs	r0, r3
    3eb0:	4b26      	ldr	r3, [pc, #152]	; (3f4c <_spi_m_sync_trans+0x148>)
    3eb2:	4798      	blx	r3
    3eb4:	0003      	movs	r3, r0
    3eb6:	001a      	movs	r2, r3
    3eb8:	2301      	movs	r3, #1
    3eba:	4053      	eors	r3, r2
    3ebc:	b2db      	uxtb	r3, r3
    3ebe:	2b00      	cmp	r3, #0
    3ec0:	d00f      	beq.n	3ee2 <_spi_m_sync_trans+0xde>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    3ec2:	2308      	movs	r3, #8
    3ec4:	18fb      	adds	r3, r7, r3
    3ec6:	68da      	ldr	r2, [r3, #12]
    3ec8:	2308      	movs	r3, #8
    3eca:	18fb      	adds	r3, r7, r3
    3ecc:	689b      	ldr	r3, [r3, #8]
    3ece:	429a      	cmp	r2, r3
    3ed0:	d307      	bcc.n	3ee2 <_spi_m_sync_trans+0xde>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    3ed2:	687b      	ldr	r3, [r7, #4]
    3ed4:	88db      	ldrh	r3, [r3, #6]
    3ed6:	2208      	movs	r2, #8
    3ed8:	18ba      	adds	r2, r7, r2
    3eda:	69f9      	ldr	r1, [r7, #28]
    3edc:	6a38      	ldr	r0, [r7, #32]
    3ede:	4c1c      	ldr	r4, [pc, #112]	; (3f50 <_spi_m_sync_trans+0x14c>)
    3ee0:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    3ee2:	6a3a      	ldr	r2, [r7, #32]
    3ee4:	69fb      	ldr	r3, [r7, #28]
    3ee6:	0011      	movs	r1, r2
    3ee8:	0018      	movs	r0, r3
    3eea:	4b1a      	ldr	r3, [pc, #104]	; (3f54 <_spi_m_sync_trans+0x150>)
    3eec:	4798      	blx	r3
    3eee:	0003      	movs	r3, r0
    3ef0:	627b      	str	r3, [r7, #36]	; 0x24

		if (rc < 0) {
    3ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3ef4:	2b00      	cmp	r3, #0
    3ef6:	db12      	blt.n	3f1e <_spi_m_sync_trans+0x11a>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    3ef8:	2308      	movs	r3, #8
    3efa:	18fb      	adds	r3, r7, r3
    3efc:	689a      	ldr	r2, [r3, #8]
    3efe:	683b      	ldr	r3, [r7, #0]
    3f00:	689b      	ldr	r3, [r3, #8]
    3f02:	429a      	cmp	r2, r3
    3f04:	d3c9      	bcc.n	3e9a <_spi_m_sync_trans+0x96>
    3f06:	2308      	movs	r3, #8
    3f08:	18fb      	adds	r3, r7, r3
    3f0a:	68da      	ldr	r2, [r3, #12]
    3f0c:	683b      	ldr	r3, [r7, #0]
    3f0e:	689b      	ldr	r3, [r3, #8]
    3f10:	429a      	cmp	r2, r3
    3f12:	d3c2      	bcc.n	3e9a <_spi_m_sync_trans+0x96>
			rc = ctrl.txcnt;
    3f14:	2308      	movs	r3, #8
    3f16:	18fb      	adds	r3, r7, r3
    3f18:	689b      	ldr	r3, [r3, #8]
    3f1a:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    3f1c:	e000      	b.n	3f20 <_spi_m_sync_trans+0x11c>
			break;
    3f1e:	46c0      	nop			; (mov r8, r8)
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    3f20:	6a3b      	ldr	r3, [r7, #32]
    3f22:	0018      	movs	r0, r3
    3f24:	4b0c      	ldr	r3, [pc, #48]	; (3f58 <_spi_m_sync_trans+0x154>)
    3f26:	4798      	blx	r3

	return rc;
    3f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    3f2a:	0018      	movs	r0, r3
    3f2c:	46bd      	mov	sp, r7
    3f2e:	b00b      	add	sp, #44	; 0x2c
    3f30:	bd90      	pop	{r4, r7, pc}
    3f32:	46c0      	nop			; (mov r8, r8)
    3f34:	00000a85 	.word	0x00000a85
    3f38:	0001227c 	.word	0x0001227c
    3f3c:	00002b25 	.word	0x00002b25
    3f40:	00003077 	.word	0x00003077
    3f44:	000031d5 	.word	0x000031d5
    3f48:	0000310d 	.word	0x0000310d
    3f4c:	00003cd1 	.word	0x00003cd1
    3f50:	00003d41 	.word	0x00003d41
    3f54:	00003dc1 	.word	0x00003dc1
    3f58:	00003c9d 	.word	0x00003c9d

00003f5c <hri_gclk_get_STATUS_SYNCBUSY_bit>:
{
    3f5c:	b580      	push	{r7, lr}
    3f5e:	b082      	sub	sp, #8
    3f60:	af00      	add	r7, sp, #0
    3f62:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
    3f64:	687b      	ldr	r3, [r7, #4]
    3f66:	785b      	ldrb	r3, [r3, #1]
    3f68:	b2db      	uxtb	r3, r3
    3f6a:	09db      	lsrs	r3, r3, #7
    3f6c:	2201      	movs	r2, #1
    3f6e:	4013      	ands	r3, r2
    3f70:	1e5a      	subs	r2, r3, #1
    3f72:	4193      	sbcs	r3, r2
    3f74:	b2db      	uxtb	r3, r3
}
    3f76:	0018      	movs	r0, r3
    3f78:	46bd      	mov	sp, r7
    3f7a:	b002      	add	sp, #8
    3f7c:	bd80      	pop	{r7, pc}

00003f7e <hri_sysctrl_get_PCLKSR_XOSC32KRDY_bit>:
{
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_XOSCRDY) >> SYSCTRL_PCLKSR_XOSCRDY_Pos;
}

static inline bool hri_sysctrl_get_PCLKSR_XOSC32KRDY_bit(const void *const hw)
{
    3f7e:	b580      	push	{r7, lr}
    3f80:	b082      	sub	sp, #8
    3f82:	af00      	add	r7, sp, #0
    3f84:	6078      	str	r0, [r7, #4]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) >> SYSCTRL_PCLKSR_XOSC32KRDY_Pos;
    3f86:	687b      	ldr	r3, [r7, #4]
    3f88:	68db      	ldr	r3, [r3, #12]
    3f8a:	085b      	lsrs	r3, r3, #1
    3f8c:	2201      	movs	r2, #1
    3f8e:	4013      	ands	r3, r2
    3f90:	1e5a      	subs	r2, r3, #1
    3f92:	4193      	sbcs	r3, r2
    3f94:	b2db      	uxtb	r3, r3
}
    3f96:	0018      	movs	r0, r3
    3f98:	46bd      	mov	sp, r7
    3f9a:	b002      	add	sp, #8
    3f9c:	bd80      	pop	{r7, pc}

00003f9e <hri_sysctrl_get_PCLKSR_OSC32KRDY_bit>:

static inline bool hri_sysctrl_get_PCLKSR_OSC32KRDY_bit(const void *const hw)
{
    3f9e:	b580      	push	{r7, lr}
    3fa0:	b082      	sub	sp, #8
    3fa2:	af00      	add	r7, sp, #0
    3fa4:	6078      	str	r0, [r7, #4]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) >> SYSCTRL_PCLKSR_OSC32KRDY_Pos;
    3fa6:	687b      	ldr	r3, [r7, #4]
    3fa8:	68db      	ldr	r3, [r3, #12]
    3faa:	089b      	lsrs	r3, r3, #2
    3fac:	2201      	movs	r2, #1
    3fae:	4013      	ands	r3, r2
    3fb0:	1e5a      	subs	r2, r3, #1
    3fb2:	4193      	sbcs	r3, r2
    3fb4:	b2db      	uxtb	r3, r3
}
    3fb6:	0018      	movs	r0, r3
    3fb8:	46bd      	mov	sp, r7
    3fba:	b002      	add	sp, #8
    3fbc:	bd80      	pop	{r7, pc}

00003fbe <hri_sysctrl_get_PCLKSR_OSC8MRDY_bit>:

static inline bool hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(const void *const hw)
{
    3fbe:	b580      	push	{r7, lr}
    3fc0:	b082      	sub	sp, #8
    3fc2:	af00      	add	r7, sp, #0
    3fc4:	6078      	str	r0, [r7, #4]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    3fc6:	687b      	ldr	r3, [r7, #4]
    3fc8:	68db      	ldr	r3, [r3, #12]
    3fca:	08db      	lsrs	r3, r3, #3
    3fcc:	2201      	movs	r2, #1
    3fce:	4013      	ands	r3, r2
    3fd0:	1e5a      	subs	r2, r3, #1
    3fd2:	4193      	sbcs	r3, r2
    3fd4:	b2db      	uxtb	r3, r3
}
    3fd6:	0018      	movs	r0, r3
    3fd8:	46bd      	mov	sp, r7
    3fda:	b002      	add	sp, #8
    3fdc:	bd80      	pop	{r7, pc}

00003fde <hri_sysctrl_get_PCLKSR_DFLLRDY_bit>:

static inline bool hri_sysctrl_get_PCLKSR_DFLLRDY_bit(const void *const hw)
{
    3fde:	b580      	push	{r7, lr}
    3fe0:	b082      	sub	sp, #8
    3fe2:	af00      	add	r7, sp, #0
    3fe4:	6078      	str	r0, [r7, #4]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    3fe6:	687b      	ldr	r3, [r7, #4]
    3fe8:	68db      	ldr	r3, [r3, #12]
    3fea:	091b      	lsrs	r3, r3, #4
    3fec:	2201      	movs	r2, #1
    3fee:	4013      	ands	r3, r2
    3ff0:	1e5a      	subs	r2, r3, #1
    3ff2:	4193      	sbcs	r3, r2
    3ff4:	b2db      	uxtb	r3, r3
}
    3ff6:	0018      	movs	r0, r3
    3ff8:	46bd      	mov	sp, r7
    3ffa:	b002      	add	sp, #8
    3ffc:	bd80      	pop	{r7, pc}

00003ffe <hri_sysctrl_get_PCLKSR_reg>:
{
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DPLLLTO) >> SYSCTRL_PCLKSR_DPLLLTO_Pos;
}

static inline hri_sysctrl_pclksr_reg_t hri_sysctrl_get_PCLKSR_reg(const void *const hw, hri_sysctrl_pclksr_reg_t mask)
{
    3ffe:	b580      	push	{r7, lr}
    4000:	b084      	sub	sp, #16
    4002:	af00      	add	r7, sp, #0
    4004:	6078      	str	r0, [r7, #4]
    4006:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    4008:	687b      	ldr	r3, [r7, #4]
    400a:	68db      	ldr	r3, [r3, #12]
    400c:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    400e:	68fb      	ldr	r3, [r7, #12]
    4010:	683a      	ldr	r2, [r7, #0]
    4012:	4013      	ands	r3, r2
    4014:	60fb      	str	r3, [r7, #12]
	return tmp;
    4016:	68fb      	ldr	r3, [r7, #12]
}
    4018:	0018      	movs	r0, r3
    401a:	46bd      	mov	sp, r7
    401c:	b004      	add	sp, #16
    401e:	bd80      	pop	{r7, pc}

00004020 <hri_sysctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Sysctrl *)hw)->PCLKSR.reg;
}

static inline bool hri_sysctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw)
{
    4020:	b580      	push	{r7, lr}
    4022:	b082      	sub	sp, #8
    4024:	af00      	add	r7, sp, #0
    4026:	6078      	str	r0, [r7, #4]
	return (((Sysctrl *)hw)->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_LOCK) >> SYSCTRL_DPLLSTATUS_LOCK_Pos;
    4028:	687b      	ldr	r3, [r7, #4]
    402a:	2250      	movs	r2, #80	; 0x50
    402c:	5c9b      	ldrb	r3, [r3, r2]
    402e:	b2db      	uxtb	r3, r3
    4030:	001a      	movs	r2, r3
    4032:	2301      	movs	r3, #1
    4034:	4013      	ands	r3, r2
    4036:	1e5a      	subs	r2, r3, #1
    4038:	4193      	sbcs	r3, r2
    403a:	b2db      	uxtb	r3, r3
}
    403c:	0018      	movs	r0, r3
    403e:	46bd      	mov	sp, r7
    4040:	b002      	add	sp, #8
    4042:	bd80      	pop	{r7, pc}

00004044 <hri_sysctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_sysctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw)
{
    4044:	b580      	push	{r7, lr}
    4046:	b082      	sub	sp, #8
    4048:	af00      	add	r7, sp, #0
    404a:	6078      	str	r0, [r7, #4]
	return (((Sysctrl *)hw)->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_CLKRDY) >> SYSCTRL_DPLLSTATUS_CLKRDY_Pos;
    404c:	687b      	ldr	r3, [r7, #4]
    404e:	2250      	movs	r2, #80	; 0x50
    4050:	5c9b      	ldrb	r3, [r3, r2]
    4052:	b2db      	uxtb	r3, r3
    4054:	085b      	lsrs	r3, r3, #1
    4056:	2201      	movs	r2, #1
    4058:	4013      	ands	r3, r2
    405a:	1e5a      	subs	r2, r3, #1
    405c:	4193      	sbcs	r3, r2
    405e:	b2db      	uxtb	r3, r3
}
    4060:	0018      	movs	r0, r3
    4062:	46bd      	mov	sp, r7
    4064:	b002      	add	sp, #8
    4066:	bd80      	pop	{r7, pc}

00004068 <hri_sysctrl_get_DPLLSTATUS_ENABLE_bit>:

static inline bool hri_sysctrl_get_DPLLSTATUS_ENABLE_bit(const void *const hw)
{
    4068:	b580      	push	{r7, lr}
    406a:	b082      	sub	sp, #8
    406c:	af00      	add	r7, sp, #0
    406e:	6078      	str	r0, [r7, #4]
	return (((Sysctrl *)hw)->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE) >> SYSCTRL_DPLLSTATUS_ENABLE_Pos;
    4070:	687b      	ldr	r3, [r7, #4]
    4072:	2250      	movs	r2, #80	; 0x50
    4074:	5c9b      	ldrb	r3, [r3, r2]
    4076:	b2db      	uxtb	r3, r3
    4078:	089b      	lsrs	r3, r3, #2
    407a:	2201      	movs	r2, #1
    407c:	4013      	ands	r3, r2
    407e:	1e5a      	subs	r2, r3, #1
    4080:	4193      	sbcs	r3, r2
    4082:	b2db      	uxtb	r3, r3
}
    4084:	0018      	movs	r0, r3
    4086:	46bd      	mov	sp, r7
    4088:	b002      	add	sp, #8
    408a:	bd80      	pop	{r7, pc}

0000408c <hri_sysctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sysctrl_write_XOSC32K_reg(const void *const hw, hri_sysctrl_xosc32k_reg_t data)
{
    408c:	b580      	push	{r7, lr}
    408e:	b082      	sub	sp, #8
    4090:	af00      	add	r7, sp, #0
    4092:	6078      	str	r0, [r7, #4]
    4094:	000a      	movs	r2, r1
    4096:	1cbb      	adds	r3, r7, #2
    4098:	801a      	strh	r2, [r3, #0]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->XOSC32K.reg = data;
    409a:	687b      	ldr	r3, [r7, #4]
    409c:	1cba      	adds	r2, r7, #2
    409e:	8812      	ldrh	r2, [r2, #0]
    40a0:	829a      	strh	r2, [r3, #20]
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    40a2:	46c0      	nop			; (mov r8, r8)
    40a4:	46bd      	mov	sp, r7
    40a6:	b002      	add	sp, #8
    40a8:	bd80      	pop	{r7, pc}

000040aa <hri_sysctrl_read_OSC32K_CALIB_bf>:
	((Sysctrl *)hw)->OSC32K.reg ^= SYSCTRL_OSC32K_CALIB(mask);
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_sysctrl_osc32k_reg_t hri_sysctrl_read_OSC32K_CALIB_bf(const void *const hw)
{
    40aa:	b580      	push	{r7, lr}
    40ac:	b084      	sub	sp, #16
    40ae:	af00      	add	r7, sp, #0
    40b0:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC32K.reg;
    40b2:	687b      	ldr	r3, [r7, #4]
    40b4:	699b      	ldr	r3, [r3, #24]
    40b6:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SYSCTRL_OSC32K_CALIB_Msk) >> SYSCTRL_OSC32K_CALIB_Pos;
    40b8:	68fb      	ldr	r3, [r7, #12]
    40ba:	0c1b      	lsrs	r3, r3, #16
    40bc:	227f      	movs	r2, #127	; 0x7f
    40be:	4013      	ands	r3, r2
    40c0:	60fb      	str	r3, [r7, #12]
	return tmp;
    40c2:	68fb      	ldr	r3, [r7, #12]
}
    40c4:	0018      	movs	r0, r3
    40c6:	46bd      	mov	sp, r7
    40c8:	b004      	add	sp, #16
    40ca:	bd80      	pop	{r7, pc}

000040cc <hri_sysctrl_write_OSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sysctrl_write_OSC32K_reg(const void *const hw, hri_sysctrl_osc32k_reg_t data)
{
    40cc:	b580      	push	{r7, lr}
    40ce:	b082      	sub	sp, #8
    40d0:	af00      	add	r7, sp, #0
    40d2:	6078      	str	r0, [r7, #4]
    40d4:	6039      	str	r1, [r7, #0]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC32K.reg = data;
    40d6:	687b      	ldr	r3, [r7, #4]
    40d8:	683a      	ldr	r2, [r7, #0]
    40da:	619a      	str	r2, [r3, #24]
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    40dc:	46c0      	nop			; (mov r8, r8)
    40de:	46bd      	mov	sp, r7
    40e0:	b002      	add	sp, #8
    40e2:	bd80      	pop	{r7, pc}

000040e4 <hri_sysctrl_read_OSCULP32K_CALIB_bf>:
	((Sysctrl *)hw)->OSCULP32K.reg ^= SYSCTRL_OSCULP32K_CALIB(mask);
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_sysctrl_osculp32k_reg_t hri_sysctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    40e4:	b580      	push	{r7, lr}
    40e6:	b084      	sub	sp, #16
    40e8:	af00      	add	r7, sp, #0
    40ea:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    40ec:	230f      	movs	r3, #15
    40ee:	18fb      	adds	r3, r7, r3
    40f0:	687a      	ldr	r2, [r7, #4]
    40f2:	7f12      	ldrb	r2, [r2, #28]
    40f4:	701a      	strb	r2, [r3, #0]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    40f6:	230f      	movs	r3, #15
    40f8:	18fb      	adds	r3, r7, r3
    40fa:	220f      	movs	r2, #15
    40fc:	18ba      	adds	r2, r7, r2
    40fe:	7812      	ldrb	r2, [r2, #0]
    4100:	211f      	movs	r1, #31
    4102:	400a      	ands	r2, r1
    4104:	701a      	strb	r2, [r3, #0]
	return tmp;
    4106:	230f      	movs	r3, #15
    4108:	18fb      	adds	r3, r7, r3
    410a:	781b      	ldrb	r3, [r3, #0]
}
    410c:	0018      	movs	r0, r3
    410e:	46bd      	mov	sp, r7
    4110:	b004      	add	sp, #16
    4112:	bd80      	pop	{r7, pc}

00004114 <hri_sysctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sysctrl_write_OSCULP32K_reg(const void *const hw, hri_sysctrl_osculp32k_reg_t data)
{
    4114:	b580      	push	{r7, lr}
    4116:	b082      	sub	sp, #8
    4118:	af00      	add	r7, sp, #0
    411a:	6078      	str	r0, [r7, #4]
    411c:	000a      	movs	r2, r1
    411e:	1cfb      	adds	r3, r7, #3
    4120:	701a      	strb	r2, [r3, #0]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    4122:	687b      	ldr	r3, [r7, #4]
    4124:	1cfa      	adds	r2, r7, #3
    4126:	7812      	ldrb	r2, [r2, #0]
    4128:	771a      	strb	r2, [r3, #28]
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    412a:	46c0      	nop			; (mov r8, r8)
    412c:	46bd      	mov	sp, r7
    412e:	b002      	add	sp, #8
    4130:	bd80      	pop	{r7, pc}

00004132 <hri_sysctrl_read_OSC8M_CALIB_bf>:
	((Sysctrl *)hw)->OSC8M.reg ^= SYSCTRL_OSC8M_CALIB(mask);
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
    4132:	b580      	push	{r7, lr}
    4134:	b084      	sub	sp, #16
    4136:	af00      	add	r7, sp, #0
    4138:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    413a:	687b      	ldr	r3, [r7, #4]
    413c:	6a1b      	ldr	r3, [r3, #32]
    413e:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SYSCTRL_OSC8M_CALIB_Msk) >> SYSCTRL_OSC8M_CALIB_Pos;
    4140:	68fb      	ldr	r3, [r7, #12]
    4142:	0c1b      	lsrs	r3, r3, #16
    4144:	051b      	lsls	r3, r3, #20
    4146:	0d1b      	lsrs	r3, r3, #20
    4148:	60fb      	str	r3, [r7, #12]
	return tmp;
    414a:	68fb      	ldr	r3, [r7, #12]
}
    414c:	0018      	movs	r0, r3
    414e:	46bd      	mov	sp, r7
    4150:	b004      	add	sp, #16
    4152:	bd80      	pop	{r7, pc}

00004154 <hri_sysctrl_read_OSC8M_FRANGE_bf>:
	((Sysctrl *)hw)->OSC8M.reg ^= SYSCTRL_OSC8M_FRANGE(mask);
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
    4154:	b580      	push	{r7, lr}
    4156:	b084      	sub	sp, #16
    4158:	af00      	add	r7, sp, #0
    415a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    415c:	687b      	ldr	r3, [r7, #4]
    415e:	6a1b      	ldr	r3, [r3, #32]
    4160:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SYSCTRL_OSC8M_FRANGE_Msk) >> SYSCTRL_OSC8M_FRANGE_Pos;
    4162:	68fb      	ldr	r3, [r7, #12]
    4164:	0f9b      	lsrs	r3, r3, #30
    4166:	60fb      	str	r3, [r7, #12]
	return tmp;
    4168:	68fb      	ldr	r3, [r7, #12]
}
    416a:	0018      	movs	r0, r3
    416c:	46bd      	mov	sp, r7
    416e:	b004      	add	sp, #16
    4170:	bd80      	pop	{r7, pc}

00004172 <hri_sysctrl_write_OSC8M_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
    4172:	b580      	push	{r7, lr}
    4174:	b082      	sub	sp, #8
    4176:	af00      	add	r7, sp, #0
    4178:	6078      	str	r0, [r7, #4]
    417a:	6039      	str	r1, [r7, #0]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    417c:	687b      	ldr	r3, [r7, #4]
    417e:	683a      	ldr	r2, [r7, #0]
    4180:	621a      	str	r2, [r3, #32]
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    4182:	46c0      	nop			; (mov r8, r8)
    4184:	46bd      	mov	sp, r7
    4186:	b002      	add	sp, #8
    4188:	bd80      	pop	{r7, pc}

0000418a <hri_sysctrl_get_DFLLCTRL_MODE_bit>:
	((Sysctrl *)hw)->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_MODE;
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sysctrl_get_DFLLCTRL_MODE_bit(const void *const hw)
{
    418a:	b580      	push	{r7, lr}
    418c:	b084      	sub	sp, #16
    418e:	af00      	add	r7, sp, #0
    4190:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
    4192:	230e      	movs	r3, #14
    4194:	18fb      	adds	r3, r7, r3
    4196:	687a      	ldr	r2, [r7, #4]
    4198:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    419a:	801a      	strh	r2, [r3, #0]
	tmp = (tmp & SYSCTRL_DFLLCTRL_MODE) >> SYSCTRL_DFLLCTRL_MODE_Pos;
    419c:	230e      	movs	r3, #14
    419e:	18fb      	adds	r3, r7, r3
    41a0:	881b      	ldrh	r3, [r3, #0]
    41a2:	089b      	lsrs	r3, r3, #2
    41a4:	b29a      	uxth	r2, r3
    41a6:	230e      	movs	r3, #14
    41a8:	18fb      	adds	r3, r7, r3
    41aa:	2101      	movs	r1, #1
    41ac:	400a      	ands	r2, r1
    41ae:	801a      	strh	r2, [r3, #0]
	return (bool)tmp;
    41b0:	230e      	movs	r3, #14
    41b2:	18fb      	adds	r3, r7, r3
    41b4:	881b      	ldrh	r3, [r3, #0]
    41b6:	1e5a      	subs	r2, r3, #1
    41b8:	4193      	sbcs	r3, r2
    41ba:	b2db      	uxtb	r3, r3
}
    41bc:	0018      	movs	r0, r3
    41be:	46bd      	mov	sp, r7
    41c0:	b004      	add	sp, #16
    41c2:	bd80      	pop	{r7, pc}

000041c4 <hri_sysctrl_write_DFLLCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
    41c4:	b580      	push	{r7, lr}
    41c6:	b082      	sub	sp, #8
    41c8:	af00      	add	r7, sp, #0
    41ca:	6078      	str	r0, [r7, #4]
    41cc:	000a      	movs	r2, r1
    41ce:	1cbb      	adds	r3, r7, #2
    41d0:	801a      	strh	r2, [r3, #0]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    41d2:	687b      	ldr	r3, [r7, #4]
    41d4:	1cba      	adds	r2, r7, #2
    41d6:	8812      	ldrh	r2, [r2, #0]
    41d8:	849a      	strh	r2, [r3, #36]	; 0x24
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    41da:	46c0      	nop			; (mov r8, r8)
    41dc:	46bd      	mov	sp, r7
    41de:	b002      	add	sp, #8
    41e0:	bd80      	pop	{r7, pc}

000041e2 <hri_sysctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sysctrl_write_DFLLVAL_reg(const void *const hw, hri_sysctrl_dfllval_reg_t data)
{
    41e2:	b580      	push	{r7, lr}
    41e4:	b082      	sub	sp, #8
    41e6:	af00      	add	r7, sp, #0
    41e8:	6078      	str	r0, [r7, #4]
    41ea:	6039      	str	r1, [r7, #0]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLVAL.reg = data;
    41ec:	687b      	ldr	r3, [r7, #4]
    41ee:	683a      	ldr	r2, [r7, #0]
    41f0:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    41f2:	46c0      	nop			; (mov r8, r8)
    41f4:	46bd      	mov	sp, r7
    41f6:	b002      	add	sp, #8
    41f8:	bd80      	pop	{r7, pc}

000041fa <hri_sysctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
    41fa:	b580      	push	{r7, lr}
    41fc:	b082      	sub	sp, #8
    41fe:	af00      	add	r7, sp, #0
    4200:	6078      	str	r0, [r7, #4]
    4202:	6039      	str	r1, [r7, #0]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
    4204:	687b      	ldr	r3, [r7, #4]
    4206:	683a      	ldr	r2, [r7, #0]
    4208:	62da      	str	r2, [r3, #44]	; 0x2c
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    420a:	46c0      	nop			; (mov r8, r8)
    420c:	46bd      	mov	sp, r7
    420e:	b002      	add	sp, #8
    4210:	bd80      	pop	{r7, pc}

00004212 <hri_sysctrl_write_DPLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sysctrl_write_DPLLCTRLA_reg(const void *const hw, hri_sysctrl_dpllctrla_reg_t data)
{
    4212:	b580      	push	{r7, lr}
    4214:	b082      	sub	sp, #8
    4216:	af00      	add	r7, sp, #0
    4218:	6078      	str	r0, [r7, #4]
    421a:	000a      	movs	r2, r1
    421c:	1cfb      	adds	r3, r7, #3
    421e:	701a      	strb	r2, [r3, #0]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DPLLCTRLA.reg = data;
    4220:	687b      	ldr	r3, [r7, #4]
    4222:	1cfa      	adds	r2, r7, #3
    4224:	2144      	movs	r1, #68	; 0x44
    4226:	7812      	ldrb	r2, [r2, #0]
    4228:	545a      	strb	r2, [r3, r1]
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    422a:	46c0      	nop			; (mov r8, r8)
    422c:	46bd      	mov	sp, r7
    422e:	b002      	add	sp, #8
    4230:	bd80      	pop	{r7, pc}

00004232 <hri_sysctrl_write_DPLLRATIO_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sysctrl_write_DPLLRATIO_reg(const void *const hw, hri_sysctrl_dpllratio_reg_t data)
{
    4232:	b580      	push	{r7, lr}
    4234:	b082      	sub	sp, #8
    4236:	af00      	add	r7, sp, #0
    4238:	6078      	str	r0, [r7, #4]
    423a:	6039      	str	r1, [r7, #0]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DPLLRATIO.reg = data;
    423c:	687b      	ldr	r3, [r7, #4]
    423e:	683a      	ldr	r2, [r7, #0]
    4240:	649a      	str	r2, [r3, #72]	; 0x48
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    4242:	46c0      	nop			; (mov r8, r8)
    4244:	46bd      	mov	sp, r7
    4246:	b002      	add	sp, #8
    4248:	bd80      	pop	{r7, pc}

0000424a <hri_sysctrl_write_DPLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sysctrl_write_DPLLCTRLB_reg(const void *const hw, hri_sysctrl_dpllctrlb_reg_t data)
{
    424a:	b580      	push	{r7, lr}
    424c:	b082      	sub	sp, #8
    424e:	af00      	add	r7, sp, #0
    4250:	6078      	str	r0, [r7, #4]
    4252:	6039      	str	r1, [r7, #0]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DPLLCTRLB.reg = data;
    4254:	687b      	ldr	r3, [r7, #4]
    4256:	683a      	ldr	r2, [r7, #0]
    4258:	64da      	str	r2, [r3, #76]	; 0x4c
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    425a:	46c0      	nop			; (mov r8, r8)
    425c:	46bd      	mov	sp, r7
    425e:	b002      	add	sp, #8
    4260:	bd80      	pop	{r7, pc}
	...

00004264 <_sysctrl_init_sources>:
 * \brief Initializes clock generators
 *
 * All GCLK generators are running when this function returns.
 */
void _sysctrl_init_sources(void)
{
    4264:	b580      	push	{r7, lr}
    4266:	b082      	sub	sp, #8
    4268:	af00      	add	r7, sp, #0
	void *   hw = (void *)SYSCTRL;
    426a:	4b39      	ldr	r3, [pc, #228]	; (4350 <_sysctrl_init_sources+0xec>)
    426c:	607b      	str	r3, [r7, #4]
	uint16_t calib;

#if CONF_XOSC32K_CONFIG == 1
	hri_sysctrl_write_XOSC32K_reg(
    426e:	687b      	ldr	r3, [r7, #4]
    4270:	2166      	movs	r1, #102	; 0x66
    4272:	0018      	movs	r0, r3
    4274:	4b37      	ldr	r3, [pc, #220]	; (4354 <_sysctrl_init_sources+0xf0>)
    4276:	4798      	blx	r3
	        | (CONF_XOSC_RUNSTDBY << SYSCTRL_XOSC_RUNSTDBY_Pos) | (CONF_XOSC_XTALEN << SYSCTRL_XOSC_XTALEN_Pos)
	        | (CONF_XOSC_ENABLE << SYSCTRL_XOSC_ENABLE_Pos));
#endif

#if CONF_OSC8M_CONFIG == 1
	calib = hri_sysctrl_read_OSC8M_CALIB_bf(hw);
    4278:	687b      	ldr	r3, [r7, #4]
    427a:	0018      	movs	r0, r3
    427c:	4b36      	ldr	r3, [pc, #216]	; (4358 <_sysctrl_init_sources+0xf4>)
    427e:	4798      	blx	r3
    4280:	0002      	movs	r2, r0
    4282:	1cbb      	adds	r3, r7, #2
    4284:	801a      	strh	r2, [r3, #0]

	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    4286:	687b      	ldr	r3, [r7, #4]
    4288:	0018      	movs	r0, r3
    428a:	4b34      	ldr	r3, [pc, #208]	; (435c <_sysctrl_init_sources+0xf8>)
    428c:	4798      	blx	r3
    428e:	0003      	movs	r3, r0
    4290:	079a      	lsls	r2, r3, #30
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    4292:	1cbb      	adds	r3, r7, #2
    4294:	881b      	ldrh	r3, [r3, #0]
    4296:	041b      	lsls	r3, r3, #16
    4298:	0019      	movs	r1, r3
    429a:	4b31      	ldr	r3, [pc, #196]	; (4360 <_sysctrl_init_sources+0xfc>)
    429c:	400b      	ands	r3, r1
#endif
	                                SYSCTRL_OSC8M_PRESC(CONF_OSC8M_PRESC)
	                                | (CONF_OSC8M_RUNSTDBY << SYSCTRL_OSC8M_RUNSTDBY_Pos)
    429e:	4313      	orrs	r3, r2
	hri_sysctrl_write_OSC8M_reg(hw,
    42a0:	2202      	movs	r2, #2
    42a2:	431a      	orrs	r2, r3
    42a4:	687b      	ldr	r3, [r7, #4]
    42a6:	0011      	movs	r1, r2
    42a8:	0018      	movs	r0, r3
    42aa:	4b2e      	ldr	r3, [pc, #184]	; (4364 <_sysctrl_init_sources+0x100>)
    42ac:	4798      	blx	r3
	                                | (CONF_OSC8M_ENABLE << SYSCTRL_OSC8M_ENABLE_Pos));
#endif

#if CONF_OSC32K_CONFIG == 1
	calib = hri_sysctrl_read_OSC32K_CALIB_bf(hw);
    42ae:	687b      	ldr	r3, [r7, #4]
    42b0:	0018      	movs	r0, r3
    42b2:	4b2d      	ldr	r3, [pc, #180]	; (4368 <_sysctrl_init_sources+0x104>)
    42b4:	4798      	blx	r3
    42b6:	0002      	movs	r2, r0
    42b8:	1cbb      	adds	r3, r7, #2
    42ba:	801a      	strh	r2, [r3, #0]
	hri_sysctrl_write_OSC32K_reg(
	    hw,
#if CONF_OSC32K_OVERWRITE_CALIBRATION == 1
	    SYSCTRL_OSC32K_CALIB(CONF_OSC32K_CALIB) |
#else
	    SYSCTRL_OSC32K_CALIB(calib) |
    42bc:	1cbb      	adds	r3, r7, #2
    42be:	881b      	ldrh	r3, [r3, #0]
    42c0:	041b      	lsls	r3, r3, #16
    42c2:	001a      	movs	r2, r3
#endif
	        (CONF_OSC32K_WRTLOCK << SYSCTRL_OSC32K_WRTLOCK_Pos) | SYSCTRL_OSC32K_STARTUP(CONF_OSC32K_STARTUP)
    42c4:	23fe      	movs	r3, #254	; 0xfe
    42c6:	03db      	lsls	r3, r3, #15
    42c8:	4013      	ands	r3, r2
	        | (CONF_OSC32K_RUNSTDBY << SYSCTRL_OSC32K_RUNSTDBY_Pos) | (CONF_OSC32K_EN1K << SYSCTRL_OSC32K_EN1K_Pos)
	        | (CONF_OSC32K_EN32K << SYSCTRL_OSC32K_EN32K_Pos) | (1 << SYSCTRL_OSC32K_ENABLE_Pos));
    42ca:	2246      	movs	r2, #70	; 0x46
    42cc:	431a      	orrs	r2, r3
	hri_sysctrl_write_OSC32K_reg(
    42ce:	687b      	ldr	r3, [r7, #4]
    42d0:	0011      	movs	r1, r2
    42d2:	0018      	movs	r0, r3
    42d4:	4b25      	ldr	r3, [pc, #148]	; (436c <_sysctrl_init_sources+0x108>)
    42d6:	4798      	blx	r3
	/* Enable OSC32K anyway since GCLK configuration may need it to sync */
	hri_sysctrl_set_OSC32K_ENABLE_bit(hw);
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_sysctrl_read_OSCULP32K_CALIB_bf(hw);
    42d8:	687b      	ldr	r3, [r7, #4]
    42da:	0018      	movs	r0, r3
    42dc:	4b24      	ldr	r3, [pc, #144]	; (4370 <_sysctrl_init_sources+0x10c>)
    42de:	4798      	blx	r3
    42e0:	0003      	movs	r3, r0
    42e2:	001a      	movs	r2, r3
    42e4:	1cbb      	adds	r3, r7, #2
    42e6:	801a      	strh	r2, [r3, #0]

	hri_sysctrl_write_OSCULP32K_reg(hw,
    42e8:	1cbb      	adds	r3, r7, #2
    42ea:	881b      	ldrh	r3, [r3, #0]
    42ec:	b2db      	uxtb	r3, r3
    42ee:	221f      	movs	r2, #31
    42f0:	4013      	ands	r3, r2
    42f2:	b2da      	uxtb	r2, r3
    42f4:	687b      	ldr	r3, [r7, #4]
    42f6:	0011      	movs	r1, r2
    42f8:	0018      	movs	r0, r3
    42fa:	4b1e      	ldr	r3, [pc, #120]	; (4374 <_sysctrl_init_sources+0x110>)
    42fc:	4798      	blx	r3
	                                    (CONF_OSC32K_WRTLOCK << SYSCTRL_OSCULP32K_WRTLOCK_Pos));
#endif

#if CONF_XOSC32K_CONFIG == 1
#if CONF_XOSC32K_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_XOSC32KRDY_bit(hw))
    42fe:	46c0      	nop			; (mov r8, r8)
    4300:	687b      	ldr	r3, [r7, #4]
    4302:	0018      	movs	r0, r3
    4304:	4b1c      	ldr	r3, [pc, #112]	; (4378 <_sysctrl_init_sources+0x114>)
    4306:	4798      	blx	r3
    4308:	0003      	movs	r3, r0
    430a:	001a      	movs	r2, r3
    430c:	2301      	movs	r3, #1
    430e:	4053      	eors	r3, r2
    4310:	b2db      	uxtb	r3, r3
    4312:	2b00      	cmp	r3, #0
    4314:	d1f4      	bne.n	4300 <_sysctrl_init_sources+0x9c>
#endif
#endif

#if CONF_OSC32K_CONFIG == 1
#if CONF_OSC32K_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC32KRDY_bit(hw))
    4316:	46c0      	nop			; (mov r8, r8)
    4318:	687b      	ldr	r3, [r7, #4]
    431a:	0018      	movs	r0, r3
    431c:	4b17      	ldr	r3, [pc, #92]	; (437c <_sysctrl_init_sources+0x118>)
    431e:	4798      	blx	r3
    4320:	0003      	movs	r3, r0
    4322:	001a      	movs	r2, r3
    4324:	2301      	movs	r3, #1
    4326:	4053      	eors	r3, r2
    4328:	b2db      	uxtb	r3, r3
    432a:	2b00      	cmp	r3, #0
    432c:	d1f4      	bne.n	4318 <_sysctrl_init_sources+0xb4>
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    432e:	46c0      	nop			; (mov r8, r8)
    4330:	687b      	ldr	r3, [r7, #4]
    4332:	0018      	movs	r0, r3
    4334:	4b12      	ldr	r3, [pc, #72]	; (4380 <_sysctrl_init_sources+0x11c>)
    4336:	4798      	blx	r3
    4338:	0003      	movs	r3, r0
    433a:	001a      	movs	r2, r3
    433c:	2301      	movs	r3, #1
    433e:	4053      	eors	r3, r2
    4340:	b2db      	uxtb	r3, r3
    4342:	2b00      	cmp	r3, #0
    4344:	d1f4      	bne.n	4330 <_sysctrl_init_sources+0xcc>
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    4346:	46c0      	nop			; (mov r8, r8)
    4348:	46bd      	mov	sp, r7
    434a:	b002      	add	sp, #8
    434c:	bd80      	pop	{r7, pc}
    434e:	46c0      	nop			; (mov r8, r8)
    4350:	40000800 	.word	0x40000800
    4354:	0000408d 	.word	0x0000408d
    4358:	00004133 	.word	0x00004133
    435c:	00004155 	.word	0x00004155
    4360:	0fff0000 	.word	0x0fff0000
    4364:	00004173 	.word	0x00004173
    4368:	000040ab 	.word	0x000040ab
    436c:	000040cd 	.word	0x000040cd
    4370:	000040e5 	.word	0x000040e5
    4374:	00004115 	.word	0x00004115
    4378:	00003f7f 	.word	0x00003f7f
    437c:	00003f9f 	.word	0x00003f9f
    4380:	00003fbf 	.word	0x00003fbf

00004384 <_sysctrl_init_referenced_generators>:

void _sysctrl_init_referenced_generators(void)
{
    4384:	b580      	push	{r7, lr}
    4386:	b084      	sub	sp, #16
    4388:	af00      	add	r7, sp, #0
	void *hw = (void *)SYSCTRL;
    438a:	4b4c      	ldr	r3, [pc, #304]	; (44bc <_sysctrl_init_referenced_generators+0x138>)
    438c:	60fb      	str	r3, [r7, #12]
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != CONF_DFLL_OPEN_LOOP_MODE
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
    438e:	68fb      	ldr	r3, [r7, #12]
    4390:	2102      	movs	r1, #2
    4392:	0018      	movs	r0, r3
    4394:	4b4a      	ldr	r3, [pc, #296]	; (44c0 <_sysctrl_init_referenced_generators+0x13c>)
    4396:	4798      	blx	r3
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    4398:	46c0      	nop			; (mov r8, r8)
    439a:	68fb      	ldr	r3, [r7, #12]
    439c:	0018      	movs	r0, r3
    439e:	4b49      	ldr	r3, [pc, #292]	; (44c4 <_sysctrl_init_referenced_generators+0x140>)
    43a0:	4798      	blx	r3
    43a2:	0003      	movs	r3, r0
    43a4:	001a      	movs	r2, r3
    43a6:	2301      	movs	r3, #1
    43a8:	4053      	eors	r3, r2
    43aa:	b2db      	uxtb	r3, r3
    43ac:	2b00      	cmp	r3, #0
    43ae:	d1f4      	bne.n	439a <_sysctrl_init_referenced_generators+0x16>
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
    43b0:	4a45      	ldr	r2, [pc, #276]	; (44c8 <_sysctrl_init_referenced_generators+0x144>)
    43b2:	68fb      	ldr	r3, [r7, #12]
    43b4:	0011      	movs	r1, r2
    43b6:	0018      	movs	r0, r3
    43b8:	4b44      	ldr	r3, [pc, #272]	; (44cc <_sysctrl_init_referenced_generators+0x148>)
    43ba:	4798      	blx	r3
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    43bc:	4b44      	ldr	r3, [pc, #272]	; (44d0 <_sysctrl_init_referenced_generators+0x14c>)
    43be:	681b      	ldr	r3, [r3, #0]
    43c0:	0e9b      	lsrs	r3, r3, #26
    43c2:	2b3f      	cmp	r3, #63	; 0x3f
    43c4:	d009      	beq.n	43da <_sysctrl_init_referenced_generators+0x56>
    43c6:	4b42      	ldr	r3, [pc, #264]	; (44d0 <_sysctrl_init_referenced_generators+0x14c>)
    43c8:	681b      	ldr	r3, [r3, #0]
    43ca:	0e9b      	lsrs	r3, r3, #26
    43cc:	029b      	lsls	r3, r3, #10
    43ce:	041b      	lsls	r3, r3, #16
    43d0:	0c1b      	lsrs	r3, r3, #16
    43d2:	2280      	movs	r2, #128	; 0x80
    43d4:	0092      	lsls	r2, r2, #2
    43d6:	4313      	orrs	r3, r2
    43d8:	e001      	b.n	43de <_sysctrl_init_referenced_generators+0x5a>
    43da:	23fc      	movs	r3, #252	; 0xfc
    43dc:	01db      	lsls	r3, r3, #7
    43de:	68fa      	ldr	r2, [r7, #12]
    43e0:	0019      	movs	r1, r3
    43e2:	0010      	movs	r0, r2
    43e4:	4b3b      	ldr	r3, [pc, #236]	; (44d4 <_sysctrl_init_referenced_generators+0x150>)
    43e6:	4798      	blx	r3

	hri_sysctrl_dfllctrl_reg_t tmp =
    43e8:	230a      	movs	r3, #10
    43ea:	18fb      	adds	r3, r7, r3
    43ec:	2293      	movs	r2, #147	; 0x93
    43ee:	0052      	lsls	r2, r2, #1
    43f0:	801a      	strh	r2, [r3, #0]
	    | (CONF_DFLL_QLDIS << SYSCTRL_DFLLCTRL_QLDIS_Pos) | (CONF_DFLL_CCDIS << SYSCTRL_DFLLCTRL_CCDIS_Pos)
	    | (CONF_DFLL_RUNSTDBY << SYSCTRL_DFLLCTRL_RUNSTDBY_Pos) | (CONF_DFLL_USBCRM << SYSCTRL_DFLLCTRL_USBCRM_Pos)
	    | (CONF_DFLL_LLAW << SYSCTRL_DFLLCTRL_LLAW_Pos) | (CONF_DFLL_STABLE << SYSCTRL_DFLLCTRL_STABLE_Pos)
	    | (CONF_DFLL_MODE << SYSCTRL_DFLLCTRL_MODE_Pos) | (CONF_DFLL_ENABLE << SYSCTRL_DFLLCTRL_ENABLE_Pos);

	hri_sysctrl_write_DFLLCTRL_reg(hw, tmp);
    43f2:	230a      	movs	r3, #10
    43f4:	18fb      	adds	r3, r7, r3
    43f6:	881a      	ldrh	r2, [r3, #0]
    43f8:	68fb      	ldr	r3, [r7, #12]
    43fa:	0011      	movs	r1, r2
    43fc:	0018      	movs	r0, r3
    43fe:	4b30      	ldr	r3, [pc, #192]	; (44c0 <_sysctrl_init_referenced_generators+0x13c>)
    4400:	4798      	blx	r3
#if CONF_DPLL_REFCLK == SYSCTRL_DPLLCTRLB_REFCLK_GCLK_Val
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(1) | GCLK_CLKCTRL_GEN(CONF_DPLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DPLLCTRLA_reg(hw,
    4402:	68fb      	ldr	r3, [r7, #12]
    4404:	2142      	movs	r1, #66	; 0x42
    4406:	0018      	movs	r0, r3
    4408:	4b33      	ldr	r3, [pc, #204]	; (44d8 <_sysctrl_init_referenced_generators+0x154>)
    440a:	4798      	blx	r3
	                                (CONF_DPLL_RUNSTDBY << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_DPLL_ENABLE << SYSCTRL_DPLLCTRLA_ENABLE_Pos));
	hri_sysctrl_write_DPLLRATIO_reg(
    440c:	4a33      	ldr	r2, [pc, #204]	; (44dc <_sysctrl_init_referenced_generators+0x158>)
    440e:	68fb      	ldr	r3, [r7, #12]
    4410:	0011      	movs	r1, r2
    4412:	0018      	movs	r0, r3
    4414:	4b32      	ldr	r3, [pc, #200]	; (44e0 <_sysctrl_init_referenced_generators+0x15c>)
    4416:	4798      	blx	r3
	    hw, SYSCTRL_DPLLRATIO_LDRFRAC(CONF_DPLL_LDRFRAC) | SYSCTRL_DPLLRATIO_LDR(CONF_DPLL_LDR));
	hri_sysctrl_write_DPLLCTRLB_reg(
    4418:	68fb      	ldr	r3, [r7, #12]
    441a:	2100      	movs	r1, #0
    441c:	0018      	movs	r0, r3
    441e:	4b31      	ldr	r3, [pc, #196]	; (44e4 <_sysctrl_init_referenced_generators+0x160>)
    4420:	4798      	blx	r3
	        | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
    4422:	68fb      	ldr	r3, [r7, #12]
    4424:	0018      	movs	r0, r3
    4426:	4b30      	ldr	r3, [pc, #192]	; (44e8 <_sysctrl_init_referenced_generators+0x164>)
    4428:	4798      	blx	r3
    442a:	1e03      	subs	r3, r0, #0
    442c:	d00d      	beq.n	444a <_sysctrl_init_referenced_generators+0xc6>

#if CONF_DFLL_USBCRM == 0
		hri_sysctrl_pclksr_reg_t status_mask
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;
#else
		hri_sysctrl_pclksr_reg_t status_mask = SYSCTRL_PCLKSR_DFLLRDY;
    442e:	2310      	movs	r3, #16
    4430:	607b      	str	r3, [r7, #4]
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
    4432:	46c0      	nop			; (mov r8, r8)
    4434:	687a      	ldr	r2, [r7, #4]
    4436:	68fb      	ldr	r3, [r7, #12]
    4438:	0011      	movs	r1, r2
    443a:	0018      	movs	r0, r3
    443c:	4b2b      	ldr	r3, [pc, #172]	; (44ec <_sysctrl_init_referenced_generators+0x168>)
    443e:	4798      	blx	r3
    4440:	0002      	movs	r2, r0
    4442:	687b      	ldr	r3, [r7, #4]
    4444:	429a      	cmp	r2, r3
    4446:	d1f5      	bne.n	4434 <_sysctrl_init_referenced_generators+0xb0>
    4448:	e00b      	b.n	4462 <_sysctrl_init_referenced_generators+0xde>
			;
	} else {
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    444a:	46c0      	nop			; (mov r8, r8)
    444c:	68fb      	ldr	r3, [r7, #12]
    444e:	0018      	movs	r0, r3
    4450:	4b1c      	ldr	r3, [pc, #112]	; (44c4 <_sysctrl_init_referenced_generators+0x140>)
    4452:	4798      	blx	r3
    4454:	0003      	movs	r3, r0
    4456:	001a      	movs	r2, r3
    4458:	2301      	movs	r3, #1
    445a:	4053      	eors	r3, r2
    445c:	b2db      	uxtb	r3, r3
    445e:	2b00      	cmp	r3, #0
    4460:	d1f4      	bne.n	444c <_sysctrl_init_referenced_generators+0xc8>
#endif
#endif

#if CONF_DPLL_CONFIG == 1
#if CONF_DPLL_ENABLE == 1
	while (!(hri_sysctrl_get_DPLLSTATUS_ENABLE_bit(hw) || hri_sysctrl_get_DPLLSTATUS_LOCK_bit(hw)
    4462:	46c0      	nop			; (mov r8, r8)
    4464:	68fb      	ldr	r3, [r7, #12]
    4466:	0018      	movs	r0, r3
    4468:	4b21      	ldr	r3, [pc, #132]	; (44f0 <_sysctrl_init_referenced_generators+0x16c>)
    446a:	4798      	blx	r3
    446c:	0003      	movs	r3, r0
    446e:	001a      	movs	r2, r3
    4470:	2301      	movs	r3, #1
    4472:	4053      	eors	r3, r2
    4474:	b2db      	uxtb	r3, r3
    4476:	2b00      	cmp	r3, #0
    4478:	d015      	beq.n	44a6 <_sysctrl_init_referenced_generators+0x122>
    447a:	68fb      	ldr	r3, [r7, #12]
    447c:	0018      	movs	r0, r3
    447e:	4b1d      	ldr	r3, [pc, #116]	; (44f4 <_sysctrl_init_referenced_generators+0x170>)
    4480:	4798      	blx	r3
    4482:	0003      	movs	r3, r0
    4484:	001a      	movs	r2, r3
    4486:	2301      	movs	r3, #1
    4488:	4053      	eors	r3, r2
    448a:	b2db      	uxtb	r3, r3
    448c:	2b00      	cmp	r3, #0
    448e:	d00a      	beq.n	44a6 <_sysctrl_init_referenced_generators+0x122>
	         || hri_sysctrl_get_DPLLSTATUS_CLKRDY_bit(hw)))
    4490:	68fb      	ldr	r3, [r7, #12]
    4492:	0018      	movs	r0, r3
    4494:	4b18      	ldr	r3, [pc, #96]	; (44f8 <_sysctrl_init_referenced_generators+0x174>)
    4496:	4798      	blx	r3
    4498:	0003      	movs	r3, r0
    449a:	001a      	movs	r2, r3
    449c:	2301      	movs	r3, #1
    449e:	4053      	eors	r3, r2
    44a0:	b2db      	uxtb	r3, r3
	while (!(hri_sysctrl_get_DPLLSTATUS_ENABLE_bit(hw) || hri_sysctrl_get_DPLLSTATUS_LOCK_bit(hw)
    44a2:	2b00      	cmp	r3, #0
    44a4:	d1de      	bne.n	4464 <_sysctrl_init_referenced_generators+0xe0>
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
    44a6:	46c0      	nop			; (mov r8, r8)
    44a8:	4b14      	ldr	r3, [pc, #80]	; (44fc <_sysctrl_init_referenced_generators+0x178>)
    44aa:	0018      	movs	r0, r3
    44ac:	4b14      	ldr	r3, [pc, #80]	; (4500 <_sysctrl_init_referenced_generators+0x17c>)
    44ae:	4798      	blx	r3
    44b0:	1e03      	subs	r3, r0, #0
    44b2:	d1f9      	bne.n	44a8 <_sysctrl_init_referenced_generators+0x124>
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    44b4:	46c0      	nop			; (mov r8, r8)
    44b6:	46bd      	mov	sp, r7
    44b8:	b004      	add	sp, #16
    44ba:	bd80      	pop	{r7, pc}
    44bc:	40000800 	.word	0x40000800
    44c0:	000041c5 	.word	0x000041c5
    44c4:	00003fdf 	.word	0x00003fdf
    44c8:	0401bb80 	.word	0x0401bb80
    44cc:	000041fb 	.word	0x000041fb
    44d0:	00806024 	.word	0x00806024
    44d4:	000041e3 	.word	0x000041e3
    44d8:	00004213 	.word	0x00004213
    44dc:	000e05b7 	.word	0x000e05b7
    44e0:	00004233 	.word	0x00004233
    44e4:	0000424b 	.word	0x0000424b
    44e8:	0000418b 	.word	0x0000418b
    44ec:	00003fff 	.word	0x00003fff
    44f0:	00004069 	.word	0x00004069
    44f4:	00004021 	.word	0x00004021
    44f8:	00004045 	.word	0x00004045
    44fc:	40000c00 	.word	0x40000c00
    4500:	00003f5d 	.word	0x00003f5d

00004504 <_system_time_init>:

/**
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
    4504:	b580      	push	{r7, lr}
    4506:	b082      	sub	sp, #8
    4508:	af00      	add	r7, sp, #0
    450a:	6078      	str	r0, [r7, #4]
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    450c:	4b04      	ldr	r3, [pc, #16]	; (4520 <_system_time_init+0x1c>)
    450e:	4a05      	ldr	r2, [pc, #20]	; (4524 <_system_time_init+0x20>)
    4510:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    4512:	4b03      	ldr	r3, [pc, #12]	; (4520 <_system_time_init+0x1c>)
    4514:	2205      	movs	r2, #5
    4516:	601a      	str	r2, [r3, #0]
	                | (1 << SysTick_CTRL_CLKSOURCE_Pos);
}
    4518:	46c0      	nop			; (mov r8, r8)
    451a:	46bd      	mov	sp, r7
    451c:	b002      	add	sp, #8
    451e:	bd80      	pop	{r7, pc}
    4520:	e000e010 	.word	0xe000e010
    4524:	00ffffff 	.word	0x00ffffff

00004528 <_delay_init>:
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
    4528:	b580      	push	{r7, lr}
    452a:	b082      	sub	sp, #8
    452c:	af00      	add	r7, sp, #0
    452e:	6078      	str	r0, [r7, #4]
	_system_time_init(hw);
    4530:	687b      	ldr	r3, [r7, #4]
    4532:	0018      	movs	r0, r3
    4534:	4b02      	ldr	r3, [pc, #8]	; (4540 <_delay_init+0x18>)
    4536:	4798      	blx	r3
}
    4538:	46c0      	nop			; (mov r8, r8)
    453a:	46bd      	mov	sp, r7
    453c:	b002      	add	sp, #8
    453e:	bd80      	pop	{r7, pc}
    4540:	00004505 	.word	0x00004505

00004544 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    4544:	b580      	push	{r7, lr}
    4546:	b084      	sub	sp, #16
    4548:	af00      	add	r7, sp, #0
    454a:	6078      	str	r0, [r7, #4]
    454c:	6039      	str	r1, [r7, #0]
	(void)hw;
	uint8_t  n   = cycles >> 24;
    454e:	683b      	ldr	r3, [r7, #0]
    4550:	0e1a      	lsrs	r2, r3, #24
    4552:	230f      	movs	r3, #15
    4554:	18fb      	adds	r3, r7, r3
    4556:	701a      	strb	r2, [r3, #0]
	uint32_t buf = cycles;
    4558:	683b      	ldr	r3, [r7, #0]
    455a:	60bb      	str	r3, [r7, #8]

	while (n--) {
    455c:	e011      	b.n	4582 <_delay_cycles+0x3e>
		SysTick->LOAD = 0xFFFFFF;
    455e:	4b16      	ldr	r3, [pc, #88]	; (45b8 <_delay_cycles+0x74>)
    4560:	4a16      	ldr	r2, [pc, #88]	; (45bc <_delay_cycles+0x78>)
    4562:	605a      	str	r2, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
    4564:	4b14      	ldr	r3, [pc, #80]	; (45b8 <_delay_cycles+0x74>)
    4566:	4a15      	ldr	r2, [pc, #84]	; (45bc <_delay_cycles+0x78>)
    4568:	609a      	str	r2, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    456a:	46c0      	nop			; (mov r8, r8)
    456c:	4b12      	ldr	r3, [pc, #72]	; (45b8 <_delay_cycles+0x74>)
    456e:	681a      	ldr	r2, [r3, #0]
    4570:	2380      	movs	r3, #128	; 0x80
    4572:	025b      	lsls	r3, r3, #9
    4574:	4013      	ands	r3, r2
    4576:	d0f9      	beq.n	456c <_delay_cycles+0x28>
			;
		buf -= 0xFFFFFF;
    4578:	68bb      	ldr	r3, [r7, #8]
    457a:	4a11      	ldr	r2, [pc, #68]	; (45c0 <_delay_cycles+0x7c>)
    457c:	4694      	mov	ip, r2
    457e:	4463      	add	r3, ip
    4580:	60bb      	str	r3, [r7, #8]
	while (n--) {
    4582:	230f      	movs	r3, #15
    4584:	18fb      	adds	r3, r7, r3
    4586:	781b      	ldrb	r3, [r3, #0]
    4588:	220f      	movs	r2, #15
    458a:	18ba      	adds	r2, r7, r2
    458c:	1e59      	subs	r1, r3, #1
    458e:	7011      	strb	r1, [r2, #0]
    4590:	2b00      	cmp	r3, #0
    4592:	d1e4      	bne.n	455e <_delay_cycles+0x1a>
	}

	SysTick->LOAD = buf;
    4594:	4b08      	ldr	r3, [pc, #32]	; (45b8 <_delay_cycles+0x74>)
    4596:	68ba      	ldr	r2, [r7, #8]
    4598:	605a      	str	r2, [r3, #4]
	SysTick->VAL  = buf;
    459a:	4b07      	ldr	r3, [pc, #28]	; (45b8 <_delay_cycles+0x74>)
    459c:	68ba      	ldr	r2, [r7, #8]
    459e:	609a      	str	r2, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    45a0:	46c0      	nop			; (mov r8, r8)
    45a2:	4b05      	ldr	r3, [pc, #20]	; (45b8 <_delay_cycles+0x74>)
    45a4:	681a      	ldr	r2, [r3, #0]
    45a6:	2380      	movs	r3, #128	; 0x80
    45a8:	025b      	lsls	r3, r3, #9
    45aa:	4013      	ands	r3, r2
    45ac:	d0f9      	beq.n	45a2 <_delay_cycles+0x5e>
		;
}
    45ae:	46c0      	nop			; (mov r8, r8)
    45b0:	46bd      	mov	sp, r7
    45b2:	b004      	add	sp, #16
    45b4:	bd80      	pop	{r7, pc}
    45b6:	46c0      	nop			; (mov r8, r8)
    45b8:	e000e010 	.word	0xe000e010
    45bc:	00ffffff 	.word	0x00ffffff
    45c0:	ff000001 	.word	0xff000001

000045c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    45c4:	b580      	push	{r7, lr}
    45c6:	b082      	sub	sp, #8
    45c8:	af00      	add	r7, sp, #0
    45ca:	0002      	movs	r2, r0
    45cc:	1dfb      	adds	r3, r7, #7
    45ce:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    45d0:	1dfb      	adds	r3, r7, #7
    45d2:	781b      	ldrb	r3, [r3, #0]
    45d4:	2b7f      	cmp	r3, #127	; 0x7f
    45d6:	d809      	bhi.n	45ec <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    45d8:	4b06      	ldr	r3, [pc, #24]	; (45f4 <__NVIC_EnableIRQ+0x30>)
    45da:	1dfa      	adds	r2, r7, #7
    45dc:	7812      	ldrb	r2, [r2, #0]
    45de:	0011      	movs	r1, r2
    45e0:	221f      	movs	r2, #31
    45e2:	400a      	ands	r2, r1
    45e4:	2101      	movs	r1, #1
    45e6:	4091      	lsls	r1, r2
    45e8:	000a      	movs	r2, r1
    45ea:	601a      	str	r2, [r3, #0]
  }
}
    45ec:	46c0      	nop			; (mov r8, r8)
    45ee:	46bd      	mov	sp, r7
    45f0:	b002      	add	sp, #8
    45f2:	bd80      	pop	{r7, pc}
    45f4:	e000e100 	.word	0xe000e100

000045f8 <hri_sysctrl_get_PCLKSR_reg>:
{
    45f8:	b580      	push	{r7, lr}
    45fa:	b084      	sub	sp, #16
    45fc:	af00      	add	r7, sp, #0
    45fe:	6078      	str	r0, [r7, #4]
    4600:	6039      	str	r1, [r7, #0]
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    4602:	687b      	ldr	r3, [r7, #4]
    4604:	68db      	ldr	r3, [r3, #12]
    4606:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    4608:	68fb      	ldr	r3, [r7, #12]
    460a:	683a      	ldr	r2, [r7, #0]
    460c:	4013      	ands	r3, r2
    460e:	60fb      	str	r3, [r7, #12]
	return tmp;
    4610:	68fb      	ldr	r3, [r7, #12]
}
    4612:	0018      	movs	r0, r3
    4614:	46bd      	mov	sp, r7
    4616:	b004      	add	sp, #16
    4618:	bd80      	pop	{r7, pc}

0000461a <hri_sysctrl_get_DPLLSTATUS_reg>:
{
    461a:	b580      	push	{r7, lr}
    461c:	b084      	sub	sp, #16
    461e:	af00      	add	r7, sp, #0
    4620:	6078      	str	r0, [r7, #4]
    4622:	000a      	movs	r2, r1
    4624:	1cfb      	adds	r3, r7, #3
    4626:	701a      	strb	r2, [r3, #0]
	tmp = ((Sysctrl *)hw)->DPLLSTATUS.reg;
    4628:	230f      	movs	r3, #15
    462a:	18fb      	adds	r3, r7, r3
    462c:	687a      	ldr	r2, [r7, #4]
    462e:	2150      	movs	r1, #80	; 0x50
    4630:	5c52      	ldrb	r2, [r2, r1]
    4632:	701a      	strb	r2, [r3, #0]
	tmp &= mask;
    4634:	230f      	movs	r3, #15
    4636:	18fb      	adds	r3, r7, r3
    4638:	220f      	movs	r2, #15
    463a:	18ba      	adds	r2, r7, r2
    463c:	1cf9      	adds	r1, r7, #3
    463e:	7812      	ldrb	r2, [r2, #0]
    4640:	7809      	ldrb	r1, [r1, #0]
    4642:	400a      	ands	r2, r1
    4644:	701a      	strb	r2, [r3, #0]
	return tmp;
    4646:	230f      	movs	r3, #15
    4648:	18fb      	adds	r3, r7, r3
    464a:	781b      	ldrb	r3, [r3, #0]
}
    464c:	0018      	movs	r0, r3
    464e:	46bd      	mov	sp, r7
    4650:	b004      	add	sp, #16
    4652:	bd80      	pop	{r7, pc}

00004654 <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    4654:	b580      	push	{r7, lr}
    4656:	b082      	sub	sp, #8
    4658:	af00      	add	r7, sp, #0
    465a:	6078      	str	r0, [r7, #4]
    465c:	000a      	movs	r2, r1
    465e:	1cfb      	adds	r3, r7, #3
    4660:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    4662:	46c0      	nop			; (mov r8, r8)
    4664:	687b      	ldr	r3, [r7, #4]
    4666:	789b      	ldrb	r3, [r3, #2]
    4668:	b2db      	uxtb	r3, r3
    466a:	1cfa      	adds	r2, r7, #3
    466c:	7812      	ldrb	r2, [r2, #0]
    466e:	4013      	ands	r3, r2
    4670:	b2db      	uxtb	r3, r3
    4672:	2b00      	cmp	r3, #0
    4674:	d1f6      	bne.n	4664 <hri_usb_wait_for_sync+0x10>
	};
}
    4676:	46c0      	nop			; (mov r8, r8)
    4678:	46bd      	mov	sp, r7
    467a:	b002      	add	sp, #8
    467c:	bd80      	pop	{r7, pc}

0000467e <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    467e:	b580      	push	{r7, lr}
    4680:	b082      	sub	sp, #8
    4682:	af00      	add	r7, sp, #0
    4684:	6078      	str	r0, [r7, #4]
    4686:	000a      	movs	r2, r1
    4688:	1cfb      	adds	r3, r7, #3
    468a:	701a      	strb	r2, [r3, #0]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    468c:	687b      	ldr	r3, [r7, #4]
    468e:	789b      	ldrb	r3, [r3, #2]
    4690:	b2db      	uxtb	r3, r3
    4692:	1cfa      	adds	r2, r7, #3
    4694:	7812      	ldrb	r2, [r2, #0]
    4696:	4013      	ands	r3, r2
    4698:	b2db      	uxtb	r3, r3
    469a:	1e5a      	subs	r2, r3, #1
    469c:	4193      	sbcs	r3, r2
    469e:	b2db      	uxtb	r3, r3
}
    46a0:	0018      	movs	r0, r3
    46a2:	46bd      	mov	sp, r7
    46a4:	b002      	add	sp, #8
    46a6:	bd80      	pop	{r7, pc}

000046a8 <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    46a8:	b580      	push	{r7, lr}
    46aa:	b084      	sub	sp, #16
    46ac:	af00      	add	r7, sp, #0
    46ae:	6078      	str	r0, [r7, #4]
    46b0:	0008      	movs	r0, r1
    46b2:	0011      	movs	r1, r2
    46b4:	1cfb      	adds	r3, r7, #3
    46b6:	1c02      	adds	r2, r0, #0
    46b8:	701a      	strb	r2, [r3, #0]
    46ba:	1cbb      	adds	r3, r7, #2
    46bc:	1c0a      	adds	r2, r1, #0
    46be:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    46c0:	1cfb      	adds	r3, r7, #3
    46c2:	781a      	ldrb	r2, [r3, #0]
    46c4:	230f      	movs	r3, #15
    46c6:	18fb      	adds	r3, r7, r3
    46c8:	6879      	ldr	r1, [r7, #4]
    46ca:	3208      	adds	r2, #8
    46cc:	0152      	lsls	r2, r2, #5
    46ce:	188a      	adds	r2, r1, r2
    46d0:	3207      	adds	r2, #7
    46d2:	7812      	ldrb	r2, [r2, #0]
    46d4:	701a      	strb	r2, [r3, #0]
	tmp &= mask;
    46d6:	230f      	movs	r3, #15
    46d8:	18fb      	adds	r3, r7, r3
    46da:	220f      	movs	r2, #15
    46dc:	18ba      	adds	r2, r7, r2
    46de:	1cb9      	adds	r1, r7, #2
    46e0:	7812      	ldrb	r2, [r2, #0]
    46e2:	7809      	ldrb	r1, [r1, #0]
    46e4:	400a      	ands	r2, r1
    46e6:	701a      	strb	r2, [r3, #0]
	return tmp;
    46e8:	230f      	movs	r3, #15
    46ea:	18fb      	adds	r3, r7, r3
    46ec:	781b      	ldrb	r3, [r3, #0]
}
    46ee:	0018      	movs	r0, r3
    46f0:	46bd      	mov	sp, r7
    46f2:	b004      	add	sp, #16
    46f4:	bd80      	pop	{r7, pc}

000046f6 <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    46f6:	b580      	push	{r7, lr}
    46f8:	b082      	sub	sp, #8
    46fa:	af00      	add	r7, sp, #0
    46fc:	6078      	str	r0, [r7, #4]
    46fe:	000a      	movs	r2, r1
    4700:	1cfb      	adds	r3, r7, #3
    4702:	701a      	strb	r2, [r3, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    4704:	1cfb      	adds	r3, r7, #3
    4706:	781b      	ldrb	r3, [r3, #0]
    4708:	687a      	ldr	r2, [r7, #4]
    470a:	3308      	adds	r3, #8
    470c:	015b      	lsls	r3, r3, #5
    470e:	18d3      	adds	r3, r2, r3
    4710:	3307      	adds	r3, #7
    4712:	781b      	ldrb	r3, [r3, #0]
    4714:	b2db      	uxtb	r3, r3
}
    4716:	0018      	movs	r0, r3
    4718:	46bd      	mov	sp, r7
    471a:	b002      	add	sp, #8
    471c:	bd80      	pop	{r7, pc}

0000471e <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    471e:	b580      	push	{r7, lr}
    4720:	b082      	sub	sp, #8
    4722:	af00      	add	r7, sp, #0
    4724:	6078      	str	r0, [r7, #4]
    4726:	0008      	movs	r0, r1
    4728:	0011      	movs	r1, r2
    472a:	1cfb      	adds	r3, r7, #3
    472c:	1c02      	adds	r2, r0, #0
    472e:	701a      	strb	r2, [r3, #0]
    4730:	1cbb      	adds	r3, r7, #2
    4732:	1c0a      	adds	r2, r1, #0
    4734:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    4736:	1cfb      	adds	r3, r7, #3
    4738:	781b      	ldrb	r3, [r3, #0]
    473a:	687a      	ldr	r2, [r7, #4]
    473c:	3308      	adds	r3, #8
    473e:	015b      	lsls	r3, r3, #5
    4740:	18d3      	adds	r3, r2, r3
    4742:	3307      	adds	r3, #7
    4744:	1cba      	adds	r2, r7, #2
    4746:	7812      	ldrb	r2, [r2, #0]
    4748:	701a      	strb	r2, [r3, #0]
}
    474a:	46c0      	nop			; (mov r8, r8)
    474c:	46bd      	mov	sp, r7
    474e:	b002      	add	sp, #8
    4750:	bd80      	pop	{r7, pc}

00004752 <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    4752:	b580      	push	{r7, lr}
    4754:	b082      	sub	sp, #8
    4756:	af00      	add	r7, sp, #0
    4758:	6078      	str	r0, [r7, #4]
    475a:	0008      	movs	r0, r1
    475c:	0011      	movs	r1, r2
    475e:	1cfb      	adds	r3, r7, #3
    4760:	1c02      	adds	r2, r0, #0
    4762:	701a      	strb	r2, [r3, #0]
    4764:	1cbb      	adds	r3, r7, #2
    4766:	1c0a      	adds	r2, r1, #0
    4768:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    476a:	1cfb      	adds	r3, r7, #3
    476c:	781b      	ldrb	r3, [r3, #0]
    476e:	687a      	ldr	r2, [r7, #4]
    4770:	3308      	adds	r3, #8
    4772:	015b      	lsls	r3, r3, #5
    4774:	18d3      	adds	r3, r2, r3
    4776:	3305      	adds	r3, #5
    4778:	1cba      	adds	r2, r7, #2
    477a:	7812      	ldrb	r2, [r2, #0]
    477c:	701a      	strb	r2, [r3, #0]
}
    477e:	46c0      	nop			; (mov r8, r8)
    4780:	46bd      	mov	sp, r7
    4782:	b002      	add	sp, #8
    4784:	bd80      	pop	{r7, pc}

00004786 <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    4786:	b580      	push	{r7, lr}
    4788:	b082      	sub	sp, #8
    478a:	af00      	add	r7, sp, #0
    478c:	6078      	str	r0, [r7, #4]
    478e:	000a      	movs	r2, r1
    4790:	1cfb      	adds	r3, r7, #3
    4792:	701a      	strb	r2, [r3, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    4794:	1cfb      	adds	r3, r7, #3
    4796:	781b      	ldrb	r3, [r3, #0]
    4798:	687a      	ldr	r2, [r7, #4]
    479a:	3308      	adds	r3, #8
    479c:	015b      	lsls	r3, r3, #5
    479e:	18d3      	adds	r3, r2, r3
    47a0:	3306      	adds	r3, #6
    47a2:	781b      	ldrb	r3, [r3, #0]
    47a4:	b2db      	uxtb	r3, r3
}
    47a6:	0018      	movs	r0, r3
    47a8:	46bd      	mov	sp, r7
    47aa:	b002      	add	sp, #8
    47ac:	bd80      	pop	{r7, pc}

000047ae <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    47ae:	b580      	push	{r7, lr}
    47b0:	b082      	sub	sp, #8
    47b2:	af00      	add	r7, sp, #0
    47b4:	6078      	str	r0, [r7, #4]
    47b6:	0008      	movs	r0, r1
    47b8:	0011      	movs	r1, r2
    47ba:	1cfb      	adds	r3, r7, #3
    47bc:	1c02      	adds	r2, r0, #0
    47be:	701a      	strb	r2, [r3, #0]
    47c0:	1cbb      	adds	r3, r7, #2
    47c2:	1c0a      	adds	r2, r1, #0
    47c4:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    47c6:	1cfb      	adds	r3, r7, #3
    47c8:	781b      	ldrb	r3, [r3, #0]
    47ca:	687a      	ldr	r2, [r7, #4]
    47cc:	3308      	adds	r3, #8
    47ce:	015b      	lsls	r3, r3, #5
    47d0:	18d3      	adds	r3, r2, r3
    47d2:	3304      	adds	r3, #4
    47d4:	1cba      	adds	r2, r7, #2
    47d6:	7812      	ldrb	r2, [r2, #0]
    47d8:	701a      	strb	r2, [r3, #0]
}
    47da:	46c0      	nop			; (mov r8, r8)
    47dc:	46bd      	mov	sp, r7
    47de:	b002      	add	sp, #8
    47e0:	bd80      	pop	{r7, pc}

000047e2 <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    47e2:	b580      	push	{r7, lr}
    47e4:	b082      	sub	sp, #8
    47e6:	af00      	add	r7, sp, #0
    47e8:	6078      	str	r0, [r7, #4]
    47ea:	000a      	movs	r2, r1
    47ec:	1cfb      	adds	r3, r7, #3
    47ee:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    47f0:	1cfb      	adds	r3, r7, #3
    47f2:	781a      	ldrb	r2, [r3, #0]
    47f4:	6879      	ldr	r1, [r7, #4]
    47f6:	2384      	movs	r3, #132	; 0x84
    47f8:	005b      	lsls	r3, r3, #1
    47fa:	0152      	lsls	r2, r2, #5
    47fc:	188a      	adds	r2, r1, r2
    47fe:	18d3      	adds	r3, r2, r3
    4800:	2210      	movs	r2, #16
    4802:	701a      	strb	r2, [r3, #0]
}
    4804:	46c0      	nop			; (mov r8, r8)
    4806:	46bd      	mov	sp, r7
    4808:	b002      	add	sp, #8
    480a:	bd80      	pop	{r7, pc}

0000480c <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    480c:	b580      	push	{r7, lr}
    480e:	b082      	sub	sp, #8
    4810:	af00      	add	r7, sp, #0
    4812:	6078      	str	r0, [r7, #4]
    4814:	0008      	movs	r0, r1
    4816:	0011      	movs	r1, r2
    4818:	1cfb      	adds	r3, r7, #3
    481a:	1c02      	adds	r2, r0, #0
    481c:	701a      	strb	r2, [r3, #0]
    481e:	1cbb      	adds	r3, r7, #2
    4820:	1c0a      	adds	r2, r1, #0
    4822:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    4824:	1cfb      	adds	r3, r7, #3
    4826:	781a      	ldrb	r2, [r3, #0]
    4828:	6879      	ldr	r1, [r7, #4]
    482a:	230a      	movs	r3, #10
    482c:	33ff      	adds	r3, #255	; 0xff
    482e:	0152      	lsls	r2, r2, #5
    4830:	188a      	adds	r2, r1, r2
    4832:	18d3      	adds	r3, r2, r3
    4834:	1cba      	adds	r2, r7, #2
    4836:	7812      	ldrb	r2, [r2, #0]
    4838:	701a      	strb	r2, [r3, #0]
}
    483a:	46c0      	nop			; (mov r8, r8)
    483c:	46bd      	mov	sp, r7
    483e:	b002      	add	sp, #8
    4840:	bd80      	pop	{r7, pc}

00004842 <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    4842:	b580      	push	{r7, lr}
    4844:	b082      	sub	sp, #8
    4846:	af00      	add	r7, sp, #0
    4848:	6078      	str	r0, [r7, #4]
    484a:	0008      	movs	r0, r1
    484c:	0011      	movs	r1, r2
    484e:	1cfb      	adds	r3, r7, #3
    4850:	1c02      	adds	r2, r0, #0
    4852:	701a      	strb	r2, [r3, #0]
    4854:	1cbb      	adds	r3, r7, #2
    4856:	1c0a      	adds	r2, r1, #0
    4858:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    485a:	1cfb      	adds	r3, r7, #3
    485c:	781a      	ldrb	r2, [r3, #0]
    485e:	6879      	ldr	r1, [r7, #4]
    4860:	2384      	movs	r3, #132	; 0x84
    4862:	005b      	lsls	r3, r3, #1
    4864:	0152      	lsls	r2, r2, #5
    4866:	188a      	adds	r2, r1, r2
    4868:	18d3      	adds	r3, r2, r3
    486a:	1cba      	adds	r2, r7, #2
    486c:	7812      	ldrb	r2, [r2, #0]
    486e:	701a      	strb	r2, [r3, #0]
}
    4870:	46c0      	nop			; (mov r8, r8)
    4872:	46bd      	mov	sp, r7
    4874:	b002      	add	sp, #8
    4876:	bd80      	pop	{r7, pc}

00004878 <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    4878:	b580      	push	{r7, lr}
    487a:	b084      	sub	sp, #16
    487c:	af00      	add	r7, sp, #0
    487e:	6078      	str	r0, [r7, #4]
    4880:	000a      	movs	r2, r1
    4882:	1cfb      	adds	r3, r7, #3
    4884:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    4886:	1cfb      	adds	r3, r7, #3
    4888:	7819      	ldrb	r1, [r3, #0]
    488a:	230f      	movs	r3, #15
    488c:	18fb      	adds	r3, r7, r3
    488e:	687a      	ldr	r2, [r7, #4]
    4890:	3108      	adds	r1, #8
    4892:	0149      	lsls	r1, r1, #5
    4894:	5c8a      	ldrb	r2, [r1, r2]
    4896:	701a      	strb	r2, [r3, #0]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    4898:	230f      	movs	r3, #15
    489a:	18fb      	adds	r3, r7, r3
    489c:	220f      	movs	r2, #15
    489e:	18ba      	adds	r2, r7, r2
    48a0:	7812      	ldrb	r2, [r2, #0]
    48a2:	2107      	movs	r1, #7
    48a4:	400a      	ands	r2, r1
    48a6:	701a      	strb	r2, [r3, #0]
	return tmp;
    48a8:	230f      	movs	r3, #15
    48aa:	18fb      	adds	r3, r7, r3
    48ac:	781b      	ldrb	r3, [r3, #0]
}
    48ae:	0018      	movs	r0, r3
    48b0:	46bd      	mov	sp, r7
    48b2:	b004      	add	sp, #16
    48b4:	bd80      	pop	{r7, pc}

000048b6 <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    48b6:	b580      	push	{r7, lr}
    48b8:	b084      	sub	sp, #16
    48ba:	af00      	add	r7, sp, #0
    48bc:	6078      	str	r0, [r7, #4]
    48be:	000a      	movs	r2, r1
    48c0:	1cfb      	adds	r3, r7, #3
    48c2:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    48c4:	1cfb      	adds	r3, r7, #3
    48c6:	7819      	ldrb	r1, [r3, #0]
    48c8:	230f      	movs	r3, #15
    48ca:	18fb      	adds	r3, r7, r3
    48cc:	687a      	ldr	r2, [r7, #4]
    48ce:	3108      	adds	r1, #8
    48d0:	0149      	lsls	r1, r1, #5
    48d2:	5c8a      	ldrb	r2, [r1, r2]
    48d4:	701a      	strb	r2, [r3, #0]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    48d6:	230f      	movs	r3, #15
    48d8:	18fb      	adds	r3, r7, r3
    48da:	781b      	ldrb	r3, [r3, #0]
    48dc:	091b      	lsrs	r3, r3, #4
    48de:	b2da      	uxtb	r2, r3
    48e0:	230f      	movs	r3, #15
    48e2:	18fb      	adds	r3, r7, r3
    48e4:	2107      	movs	r1, #7
    48e6:	400a      	ands	r2, r1
    48e8:	701a      	strb	r2, [r3, #0]
	return tmp;
    48ea:	230f      	movs	r3, #15
    48ec:	18fb      	adds	r3, r7, r3
    48ee:	781b      	ldrb	r3, [r3, #0]
}
    48f0:	0018      	movs	r0, r3
    48f2:	46bd      	mov	sp, r7
    48f4:	b004      	add	sp, #16
    48f6:	bd80      	pop	{r7, pc}

000048f8 <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    48f8:	b580      	push	{r7, lr}
    48fa:	b082      	sub	sp, #8
    48fc:	af00      	add	r7, sp, #0
    48fe:	6078      	str	r0, [r7, #4]
    4900:	0008      	movs	r0, r1
    4902:	0011      	movs	r1, r2
    4904:	1cfb      	adds	r3, r7, #3
    4906:	1c02      	adds	r2, r0, #0
    4908:	701a      	strb	r2, [r3, #0]
    490a:	1cbb      	adds	r3, r7, #2
    490c:	1c0a      	adds	r2, r1, #0
    490e:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    4910:	1cfb      	adds	r3, r7, #3
    4912:	781a      	ldrb	r2, [r3, #0]
    4914:	687b      	ldr	r3, [r7, #4]
    4916:	3208      	adds	r2, #8
    4918:	0152      	lsls	r2, r2, #5
    491a:	1cb9      	adds	r1, r7, #2
    491c:	7809      	ldrb	r1, [r1, #0]
    491e:	54d1      	strb	r1, [r2, r3]
	USB_CRITICAL_SECTION_LEAVE();
}
    4920:	46c0      	nop			; (mov r8, r8)
    4922:	46bd      	mov	sp, r7
    4924:	b002      	add	sp, #8
    4926:	bd80      	pop	{r7, pc}

00004928 <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    4928:	b580      	push	{r7, lr}
    492a:	b082      	sub	sp, #8
    492c:	af00      	add	r7, sp, #0
    492e:	6078      	str	r0, [r7, #4]
    4930:	000a      	movs	r2, r1
    4932:	1cfb      	adds	r3, r7, #3
    4934:	701a      	strb	r2, [r3, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    4936:	1cfb      	adds	r3, r7, #3
    4938:	781a      	ldrb	r2, [r3, #0]
    493a:	687b      	ldr	r3, [r7, #4]
    493c:	3208      	adds	r2, #8
    493e:	0152      	lsls	r2, r2, #5
    4940:	5cd3      	ldrb	r3, [r2, r3]
    4942:	b2db      	uxtb	r3, r3
}
    4944:	0018      	movs	r0, r3
    4946:	46bd      	mov	sp, r7
    4948:	b002      	add	sp, #8
    494a:	bd80      	pop	{r7, pc}

0000494c <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    494c:	b580      	push	{r7, lr}
    494e:	b082      	sub	sp, #8
    4950:	af00      	add	r7, sp, #0
    4952:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    4954:	687b      	ldr	r3, [r7, #4]
    4956:	8b9b      	ldrh	r3, [r3, #28]
    4958:	b29b      	uxth	r3, r3
}
    495a:	0018      	movs	r0, r3
    495c:	46bd      	mov	sp, r7
    495e:	b002      	add	sp, #8
    4960:	bd80      	pop	{r7, pc}

00004962 <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    4962:	b580      	push	{r7, lr}
    4964:	b082      	sub	sp, #8
    4966:	af00      	add	r7, sp, #0
    4968:	6078      	str	r0, [r7, #4]
    496a:	000a      	movs	r2, r1
    496c:	1cbb      	adds	r3, r7, #2
    496e:	801a      	strh	r2, [r3, #0]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    4970:	687b      	ldr	r3, [r7, #4]
    4972:	1cba      	adds	r2, r7, #2
    4974:	8812      	ldrh	r2, [r2, #0]
    4976:	839a      	strh	r2, [r3, #28]
}
    4978:	46c0      	nop			; (mov r8, r8)
    497a:	46bd      	mov	sp, r7
    497c:	b002      	add	sp, #8
    497e:	bd80      	pop	{r7, pc}

00004980 <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    4980:	b580      	push	{r7, lr}
    4982:	b082      	sub	sp, #8
    4984:	af00      	add	r7, sp, #0
    4986:	6078      	str	r0, [r7, #4]
    4988:	000a      	movs	r2, r1
    498a:	1cbb      	adds	r3, r7, #2
    498c:	801a      	strh	r2, [r3, #0]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    498e:	687b      	ldr	r3, [r7, #4]
    4990:	1cba      	adds	r2, r7, #2
    4992:	8812      	ldrh	r2, [r2, #0]
    4994:	831a      	strh	r2, [r3, #24]
}
    4996:	46c0      	nop			; (mov r8, r8)
    4998:	46bd      	mov	sp, r7
    499a:	b002      	add	sp, #8
    499c:	bd80      	pop	{r7, pc}

0000499e <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    499e:	b580      	push	{r7, lr}
    49a0:	b082      	sub	sp, #8
    49a2:	af00      	add	r7, sp, #0
    49a4:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    49a6:	687b      	ldr	r3, [r7, #4]
    49a8:	8b1b      	ldrh	r3, [r3, #24]
    49aa:	b29b      	uxth	r3, r3
}
    49ac:	0018      	movs	r0, r3
    49ae:	46bd      	mov	sp, r7
    49b0:	b002      	add	sp, #8
    49b2:	bd80      	pop	{r7, pc}

000049b4 <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    49b4:	b580      	push	{r7, lr}
    49b6:	b082      	sub	sp, #8
    49b8:	af00      	add	r7, sp, #0
    49ba:	6078      	str	r0, [r7, #4]
    49bc:	000a      	movs	r2, r1
    49be:	1cbb      	adds	r3, r7, #2
    49c0:	801a      	strh	r2, [r3, #0]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    49c2:	687b      	ldr	r3, [r7, #4]
    49c4:	1cba      	adds	r2, r7, #2
    49c6:	8812      	ldrh	r2, [r2, #0]
    49c8:	829a      	strh	r2, [r3, #20]
}
    49ca:	46c0      	nop			; (mov r8, r8)
    49cc:	46bd      	mov	sp, r7
    49ce:	b002      	add	sp, #8
    49d0:	bd80      	pop	{r7, pc}

000049d2 <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    49d2:	b580      	push	{r7, lr}
    49d4:	b084      	sub	sp, #16
    49d6:	af00      	add	r7, sp, #0
    49d8:	6078      	str	r0, [r7, #4]
    49da:	000a      	movs	r2, r1
    49dc:	1cfb      	adds	r3, r7, #3
    49de:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    49e0:	230f      	movs	r3, #15
    49e2:	18fb      	adds	r3, r7, r3
    49e4:	687a      	ldr	r2, [r7, #4]
    49e6:	7892      	ldrb	r2, [r2, #2]
    49e8:	701a      	strb	r2, [r3, #0]
	tmp &= mask;
    49ea:	230f      	movs	r3, #15
    49ec:	18fb      	adds	r3, r7, r3
    49ee:	220f      	movs	r2, #15
    49f0:	18ba      	adds	r2, r7, r2
    49f2:	1cf9      	adds	r1, r7, #3
    49f4:	7812      	ldrb	r2, [r2, #0]
    49f6:	7809      	ldrb	r1, [r1, #0]
    49f8:	400a      	ands	r2, r1
    49fa:	701a      	strb	r2, [r3, #0]
	return tmp;
    49fc:	230f      	movs	r3, #15
    49fe:	18fb      	adds	r3, r7, r3
    4a00:	781b      	ldrb	r3, [r3, #0]
}
    4a02:	0018      	movs	r0, r3
    4a04:	46bd      	mov	sp, r7
    4a06:	b004      	add	sp, #16
    4a08:	bd80      	pop	{r7, pc}
	...

00004a0c <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    4a0c:	b580      	push	{r7, lr}
    4a0e:	b082      	sub	sp, #8
    4a10:	af00      	add	r7, sp, #0
    4a12:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    4a14:	687b      	ldr	r3, [r7, #4]
    4a16:	781b      	ldrb	r3, [r3, #0]
    4a18:	b2db      	uxtb	r3, r3
    4a1a:	2202      	movs	r2, #2
    4a1c:	4393      	bics	r3, r2
    4a1e:	b2da      	uxtb	r2, r3
    4a20:	687b      	ldr	r3, [r7, #4]
    4a22:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    4a24:	687b      	ldr	r3, [r7, #4]
    4a26:	2103      	movs	r1, #3
    4a28:	0018      	movs	r0, r3
    4a2a:	4b03      	ldr	r3, [pc, #12]	; (4a38 <hri_usb_clear_CTRLA_ENABLE_bit+0x2c>)
    4a2c:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    4a2e:	46c0      	nop			; (mov r8, r8)
    4a30:	46bd      	mov	sp, r7
    4a32:	b002      	add	sp, #8
    4a34:	bd80      	pop	{r7, pc}
    4a36:	46c0      	nop			; (mov r8, r8)
    4a38:	00004655 	.word	0x00004655

00004a3c <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    4a3c:	b580      	push	{r7, lr}
    4a3e:	b084      	sub	sp, #16
    4a40:	af00      	add	r7, sp, #0
    4a42:	6078      	str	r0, [r7, #4]
    4a44:	000a      	movs	r2, r1
    4a46:	1cfb      	adds	r3, r7, #3
    4a48:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    4a4a:	687b      	ldr	r3, [r7, #4]
    4a4c:	2103      	movs	r1, #3
    4a4e:	0018      	movs	r0, r3
    4a50:	4b0b      	ldr	r3, [pc, #44]	; (4a80 <hri_usb_get_CTRLA_reg+0x44>)
    4a52:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    4a54:	230f      	movs	r3, #15
    4a56:	18fb      	adds	r3, r7, r3
    4a58:	687a      	ldr	r2, [r7, #4]
    4a5a:	7812      	ldrb	r2, [r2, #0]
    4a5c:	701a      	strb	r2, [r3, #0]
	tmp &= mask;
    4a5e:	230f      	movs	r3, #15
    4a60:	18fb      	adds	r3, r7, r3
    4a62:	220f      	movs	r2, #15
    4a64:	18ba      	adds	r2, r7, r2
    4a66:	1cf9      	adds	r1, r7, #3
    4a68:	7812      	ldrb	r2, [r2, #0]
    4a6a:	7809      	ldrb	r1, [r1, #0]
    4a6c:	400a      	ands	r2, r1
    4a6e:	701a      	strb	r2, [r3, #0]
	return tmp;
    4a70:	230f      	movs	r3, #15
    4a72:	18fb      	adds	r3, r7, r3
    4a74:	781b      	ldrb	r3, [r3, #0]
}
    4a76:	0018      	movs	r0, r3
    4a78:	46bd      	mov	sp, r7
    4a7a:	b004      	add	sp, #16
    4a7c:	bd80      	pop	{r7, pc}
    4a7e:	46c0      	nop			; (mov r8, r8)
    4a80:	00004655 	.word	0x00004655

00004a84 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    4a84:	b580      	push	{r7, lr}
    4a86:	b082      	sub	sp, #8
    4a88:	af00      	add	r7, sp, #0
    4a8a:	6078      	str	r0, [r7, #4]
    4a8c:	000a      	movs	r2, r1
    4a8e:	1cfb      	adds	r3, r7, #3
    4a90:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    4a92:	687b      	ldr	r3, [r7, #4]
    4a94:	1cfa      	adds	r2, r7, #3
    4a96:	7812      	ldrb	r2, [r2, #0]
    4a98:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    4a9a:	687b      	ldr	r3, [r7, #4]
    4a9c:	2103      	movs	r1, #3
    4a9e:	0018      	movs	r0, r3
    4aa0:	4b02      	ldr	r3, [pc, #8]	; (4aac <hri_usb_write_CTRLA_reg+0x28>)
    4aa2:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    4aa4:	46c0      	nop			; (mov r8, r8)
    4aa6:	46bd      	mov	sp, r7
    4aa8:	b002      	add	sp, #8
    4aaa:	bd80      	pop	{r7, pc}
    4aac:	00004655 	.word	0x00004655

00004ab0 <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    4ab0:	b580      	push	{r7, lr}
    4ab2:	b082      	sub	sp, #8
    4ab4:	af00      	add	r7, sp, #0
    4ab6:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    4ab8:	687b      	ldr	r3, [r7, #4]
    4aba:	2103      	movs	r1, #3
    4abc:	0018      	movs	r0, r3
    4abe:	4b04      	ldr	r3, [pc, #16]	; (4ad0 <hri_usb_read_CTRLA_reg+0x20>)
    4ac0:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    4ac2:	687b      	ldr	r3, [r7, #4]
    4ac4:	781b      	ldrb	r3, [r3, #0]
    4ac6:	b2db      	uxtb	r3, r3
}
    4ac8:	0018      	movs	r0, r3
    4aca:	46bd      	mov	sp, r7
    4acc:	b002      	add	sp, #8
    4ace:	bd80      	pop	{r7, pc}
    4ad0:	00004655 	.word	0x00004655

00004ad4 <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    4ad4:	b580      	push	{r7, lr}
    4ad6:	b082      	sub	sp, #8
    4ad8:	af00      	add	r7, sp, #0
    4ada:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    4adc:	687b      	ldr	r3, [r7, #4]
    4ade:	891b      	ldrh	r3, [r3, #8]
    4ae0:	b29b      	uxth	r3, r3
    4ae2:	2201      	movs	r2, #1
    4ae4:	4393      	bics	r3, r2
    4ae6:	b29a      	uxth	r2, r3
    4ae8:	687b      	ldr	r3, [r7, #4]
    4aea:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    4aec:	46c0      	nop			; (mov r8, r8)
    4aee:	46bd      	mov	sp, r7
    4af0:	b002      	add	sp, #8
    4af2:	bd80      	pop	{r7, pc}

00004af4 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    4af4:	b580      	push	{r7, lr}
    4af6:	b082      	sub	sp, #8
    4af8:	af00      	add	r7, sp, #0
    4afa:	6078      	str	r0, [r7, #4]
    4afc:	000a      	movs	r2, r1
    4afe:	1cbb      	adds	r3, r7, #2
    4b00:	801a      	strh	r2, [r3, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    4b02:	687b      	ldr	r3, [r7, #4]
    4b04:	1cba      	adds	r2, r7, #2
    4b06:	8812      	ldrh	r2, [r2, #0]
    4b08:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    4b0a:	46c0      	nop			; (mov r8, r8)
    4b0c:	46bd      	mov	sp, r7
    4b0e:	b002      	add	sp, #8
    4b10:	bd80      	pop	{r7, pc}

00004b12 <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    4b12:	b580      	push	{r7, lr}
    4b14:	b082      	sub	sp, #8
    4b16:	af00      	add	r7, sp, #0
    4b18:	6078      	str	r0, [r7, #4]
    4b1a:	000a      	movs	r2, r1
    4b1c:	1cfb      	adds	r3, r7, #3
    4b1e:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    4b20:	687b      	ldr	r3, [r7, #4]
    4b22:	1cfa      	adds	r2, r7, #3
    4b24:	7812      	ldrb	r2, [r2, #0]
    4b26:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    4b28:	46c0      	nop			; (mov r8, r8)
    4b2a:	46bd      	mov	sp, r7
    4b2c:	b002      	add	sp, #8
    4b2e:	bd80      	pop	{r7, pc}

00004b30 <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    4b30:	b580      	push	{r7, lr}
    4b32:	b082      	sub	sp, #8
    4b34:	af00      	add	r7, sp, #0
    4b36:	6078      	str	r0, [r7, #4]
    4b38:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    4b3a:	687b      	ldr	r3, [r7, #4]
    4b3c:	683a      	ldr	r2, [r7, #0]
    4b3e:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    4b40:	46c0      	nop			; (mov r8, r8)
    4b42:	46bd      	mov	sp, r7
    4b44:	b002      	add	sp, #8
    4b46:	bd80      	pop	{r7, pc}

00004b48 <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    4b48:	b580      	push	{r7, lr}
    4b4a:	b082      	sub	sp, #8
    4b4c:	af00      	add	r7, sp, #0
    4b4e:	6078      	str	r0, [r7, #4]
    4b50:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    4b52:	2300      	movs	r3, #0
}
    4b54:	0018      	movs	r0, r3
    4b56:	46bd      	mov	sp, r7
    4b58:	b002      	add	sp, #8
    4b5a:	bd80      	pop	{r7, pc}

00004b5c <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    4b5c:	b580      	push	{r7, lr}
    4b5e:	b084      	sub	sp, #16
    4b60:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 50
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 55
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    4b62:	4b26      	ldr	r3, [pc, #152]	; (4bfc <_usb_load_calib+0xa0>)
    4b64:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    4b66:	4b26      	ldr	r3, [pc, #152]	; (4c00 <_usb_load_calib+0xa4>)
    4b68:	681b      	ldr	r3, [r3, #0]
    4b6a:	0b5b      	lsrs	r3, r3, #13
	uint32_t pad_transn
    4b6c:	221f      	movs	r2, #31
    4b6e:	4013      	ands	r3, r2
    4b70:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    4b72:	4b23      	ldr	r3, [pc, #140]	; (4c00 <_usb_load_calib+0xa4>)
    4b74:	681b      	ldr	r3, [r3, #0]
    4b76:	0c9b      	lsrs	r3, r3, #18
	uint32_t pad_transp
    4b78:	221f      	movs	r2, #31
    4b7a:	4013      	ands	r3, r2
    4b7c:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    4b7e:	4b20      	ldr	r3, [pc, #128]	; (4c00 <_usb_load_calib+0xa4>)
    4b80:	681b      	ldr	r3, [r3, #0]
    4b82:	0ddb      	lsrs	r3, r3, #23
    4b84:	2207      	movs	r2, #7
    4b86:	4013      	ands	r3, r2
    4b88:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0x1F) {
    4b8a:	68fb      	ldr	r3, [r7, #12]
    4b8c:	2b1f      	cmp	r3, #31
    4b8e:	d101      	bne.n	4b94 <_usb_load_calib+0x38>
		pad_transn = 5;
    4b90:	2305      	movs	r3, #5
    4b92:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0x1F) {
    4b94:	68bb      	ldr	r3, [r7, #8]
    4b96:	2b1f      	cmp	r3, #31
    4b98:	d101      	bne.n	4b9e <_usb_load_calib+0x42>
		pad_transp = 29;
    4b9a:	231d      	movs	r3, #29
    4b9c:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0x7) {
    4b9e:	687b      	ldr	r3, [r7, #4]
    4ba0:	2b07      	cmp	r3, #7
    4ba2:	d101      	bne.n	4ba8 <_usb_load_calib+0x4c>
		pad_trim = 5;
    4ba4:	2305      	movs	r3, #5
    4ba6:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    4ba8:	68fb      	ldr	r3, [r7, #12]
    4baa:	b29b      	uxth	r3, r3
    4bac:	019b      	lsls	r3, r3, #6
    4bae:	b29a      	uxth	r2, r3
    4bb0:	23f8      	movs	r3, #248	; 0xf8
    4bb2:	00db      	lsls	r3, r3, #3
    4bb4:	4013      	ands	r3, r2
    4bb6:	b29a      	uxth	r2, r3
    4bb8:	68bb      	ldr	r3, [r7, #8]
    4bba:	b29b      	uxth	r3, r3
    4bbc:	211f      	movs	r1, #31
    4bbe:	400b      	ands	r3, r1
    4bc0:	b29b      	uxth	r3, r3
    4bc2:	4313      	orrs	r3, r2
    4bc4:	b29a      	uxth	r2, r3
    4bc6:	687b      	ldr	r3, [r7, #4]
    4bc8:	b29b      	uxth	r3, r3
    4bca:	031b      	lsls	r3, r3, #12
    4bcc:	b299      	uxth	r1, r3
    4bce:	23e0      	movs	r3, #224	; 0xe0
    4bd0:	01db      	lsls	r3, r3, #7
    4bd2:	400b      	ands	r3, r1
    4bd4:	b29b      	uxth	r3, r3
    4bd6:	4313      	orrs	r3, r2
    4bd8:	b29a      	uxth	r2, r3
    4bda:	683b      	ldr	r3, [r7, #0]
    4bdc:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    4bde:	683a      	ldr	r2, [r7, #0]
    4be0:	78d3      	ldrb	r3, [r2, #3]
    4be2:	2103      	movs	r1, #3
    4be4:	430b      	orrs	r3, r1
    4be6:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    4be8:	683a      	ldr	r2, [r7, #0]
    4bea:	78d3      	ldrb	r3, [r2, #3]
    4bec:	210c      	movs	r1, #12
    4bee:	430b      	orrs	r3, r1
    4bf0:	70d3      	strb	r3, [r2, #3]
}
    4bf2:	46c0      	nop			; (mov r8, r8)
    4bf4:	46bd      	mov	sp, r7
    4bf6:	b004      	add	sp, #16
    4bf8:	bd80      	pop	{r7, pc}
    4bfa:	46c0      	nop			; (mov r8, r8)
    4bfc:	41005000 	.word	0x41005000
    4c00:	00806024 	.word	0x00806024

00004c04 <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    4c04:	b580      	push	{r7, lr}
    4c06:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (SYSCTRL_DPLLSTATUS_ENABLE | SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)
	while (hri_sysctrl_get_DPLLSTATUS_reg(SYSCTRL, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    4c08:	46c0      	nop			; (mov r8, r8)
    4c0a:	4b05      	ldr	r3, [pc, #20]	; (4c20 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    4c0c:	2107      	movs	r1, #7
    4c0e:	0018      	movs	r0, r3
    4c10:	4b04      	ldr	r3, [pc, #16]	; (4c24 <_usb_d_dev_wait_dpll_rdy+0x20>)
    4c12:	4798      	blx	r3
    4c14:	0003      	movs	r3, r0
    4c16:	2b07      	cmp	r3, #7
    4c18:	d1f7      	bne.n	4c0a <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    4c1a:	46c0      	nop			; (mov r8, r8)
    4c1c:	46bd      	mov	sp, r7
    4c1e:	bd80      	pop	{r7, pc}
    4c20:	40000800 	.word	0x40000800
    4c24:	0000461b 	.word	0x0000461b

00004c28 <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    4c28:	b580      	push	{r7, lr}
    4c2a:	af00      	add	r7, sp, #0
#define DFLL_READY_FLAG (SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC)
	/* In USB recovery mode the status is not checked */
	if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    4c2c:	4b0e      	ldr	r3, [pc, #56]	; (4c68 <_usb_d_dev_wait_dfll_rdy+0x40>)
    4c2e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    4c30:	b29b      	uxth	r3, r3
    4c32:	001a      	movs	r2, r3
    4c34:	2320      	movs	r3, #32
    4c36:	4013      	ands	r3, r2
    4c38:	d109      	bne.n	4c4e <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, DFLL_READY_FLAG) != DFLL_READY_FLAG)
    4c3a:	46c0      	nop			; (mov r8, r8)
    4c3c:	4b0a      	ldr	r3, [pc, #40]	; (4c68 <_usb_d_dev_wait_dfll_rdy+0x40>)
    4c3e:	21d0      	movs	r1, #208	; 0xd0
    4c40:	0018      	movs	r0, r3
    4c42:	4b0a      	ldr	r3, [pc, #40]	; (4c6c <_usb_d_dev_wait_dfll_rdy+0x44>)
    4c44:	4798      	blx	r3
    4c46:	0003      	movs	r3, r0
    4c48:	2bd0      	cmp	r3, #208	; 0xd0
    4c4a:	d1f7      	bne.n	4c3c <_usb_d_dev_wait_dfll_rdy+0x14>
			;
	} else {
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY)
			;
	}
}
    4c4c:	e008      	b.n	4c60 <_usb_d_dev_wait_dfll_rdy+0x38>
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY)
    4c4e:	46c0      	nop			; (mov r8, r8)
    4c50:	4b05      	ldr	r3, [pc, #20]	; (4c68 <_usb_d_dev_wait_dfll_rdy+0x40>)
    4c52:	2110      	movs	r1, #16
    4c54:	0018      	movs	r0, r3
    4c56:	4b05      	ldr	r3, [pc, #20]	; (4c6c <_usb_d_dev_wait_dfll_rdy+0x44>)
    4c58:	4798      	blx	r3
    4c5a:	0003      	movs	r3, r0
    4c5c:	2b10      	cmp	r3, #16
    4c5e:	d1f7      	bne.n	4c50 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    4c60:	46c0      	nop			; (mov r8, r8)
    4c62:	46bd      	mov	sp, r7
    4c64:	bd80      	pop	{r7, pc}
    4c66:	46c0      	nop			; (mov r8, r8)
    4c68:	40000800 	.word	0x40000800
    4c6c:	000045f9 	.word	0x000045f9

00004c70 <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    4c70:	b580      	push	{r7, lr}
    4c72:	b082      	sub	sp, #8
    4c74:	af00      	add	r7, sp, #0
    4c76:	0002      	movs	r2, r0
    4c78:	1dfb      	adds	r3, r7, #7
    4c7a:	701a      	strb	r2, [r3, #0]
	if (clk_src == USB_CLK_SRC_DFLL) {
    4c7c:	1dfb      	adds	r3, r7, #7
    4c7e:	781b      	ldrb	r3, [r3, #0]
    4c80:	2b00      	cmp	r3, #0
    4c82:	d102      	bne.n	4c8a <_usb_d_dev_wait_clk_rdy+0x1a>
		_usb_d_dev_wait_dfll_rdy();
    4c84:	4b06      	ldr	r3, [pc, #24]	; (4ca0 <_usb_d_dev_wait_clk_rdy+0x30>)
    4c86:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    4c88:	e005      	b.n	4c96 <_usb_d_dev_wait_clk_rdy+0x26>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    4c8a:	1dfb      	adds	r3, r7, #7
    4c8c:	781b      	ldrb	r3, [r3, #0]
    4c8e:	2b01      	cmp	r3, #1
    4c90:	d101      	bne.n	4c96 <_usb_d_dev_wait_clk_rdy+0x26>
		_usb_d_dev_wait_dpll_rdy();
    4c92:	4b04      	ldr	r3, [pc, #16]	; (4ca4 <_usb_d_dev_wait_clk_rdy+0x34>)
    4c94:	4798      	blx	r3
}
    4c96:	46c0      	nop			; (mov r8, r8)
    4c98:	46bd      	mov	sp, r7
    4c9a:	b002      	add	sp, #8
    4c9c:	bd80      	pop	{r7, pc}
    4c9e:	46c0      	nop			; (mov r8, r8)
    4ca0:	00004c29 	.word	0x00004c29
    4ca4:	00004c05 	.word	0x00004c05

00004ca8 <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    4ca8:	b580      	push	{r7, lr}
    4caa:	b082      	sub	sp, #8
    4cac:	af00      	add	r7, sp, #0
    4cae:	0002      	movs	r2, r0
    4cb0:	6039      	str	r1, [r7, #0]
    4cb2:	1dfb      	adds	r3, r7, #7
    4cb4:	701a      	strb	r2, [r3, #0]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    4cb6:	683b      	ldr	r3, [r7, #0]
    4cb8:	b2da      	uxtb	r2, r3
    4cba:	1dfb      	adds	r3, r7, #7
    4cbc:	781b      	ldrb	r3, [r3, #0]
    4cbe:	4804      	ldr	r0, [pc, #16]	; (4cd0 <_usbd_ep_int_ack+0x28>)
    4cc0:	0019      	movs	r1, r3
    4cc2:	4b04      	ldr	r3, [pc, #16]	; (4cd4 <_usbd_ep_int_ack+0x2c>)
    4cc4:	4798      	blx	r3
}
    4cc6:	46c0      	nop			; (mov r8, r8)
    4cc8:	46bd      	mov	sp, r7
    4cca:	b002      	add	sp, #8
    4ccc:	bd80      	pop	{r7, pc}
    4cce:	46c0      	nop			; (mov r8, r8)
    4cd0:	41005000 	.word	0x41005000
    4cd4:	0000471f 	.word	0x0000471f

00004cd8 <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    4cd8:	b580      	push	{r7, lr}
    4cda:	b082      	sub	sp, #8
    4cdc:	af00      	add	r7, sp, #0
    4cde:	0002      	movs	r2, r0
    4ce0:	6039      	str	r1, [r7, #0]
    4ce2:	1dfb      	adds	r3, r7, #7
    4ce4:	701a      	strb	r2, [r3, #0]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    4ce6:	683b      	ldr	r3, [r7, #0]
    4ce8:	b2da      	uxtb	r2, r3
    4cea:	1dfb      	adds	r3, r7, #7
    4cec:	781b      	ldrb	r3, [r3, #0]
    4cee:	4804      	ldr	r0, [pc, #16]	; (4d00 <_usbd_ep_int_en+0x28>)
    4cf0:	0019      	movs	r1, r3
    4cf2:	4b04      	ldr	r3, [pc, #16]	; (4d04 <_usbd_ep_int_en+0x2c>)
    4cf4:	4798      	blx	r3
}
    4cf6:	46c0      	nop			; (mov r8, r8)
    4cf8:	46bd      	mov	sp, r7
    4cfa:	b002      	add	sp, #8
    4cfc:	bd80      	pop	{r7, pc}
    4cfe:	46c0      	nop			; (mov r8, r8)
    4d00:	41005000 	.word	0x41005000
    4d04:	0000480d 	.word	0x0000480d

00004d08 <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    4d08:	b580      	push	{r7, lr}
    4d0a:	b082      	sub	sp, #8
    4d0c:	af00      	add	r7, sp, #0
    4d0e:	0002      	movs	r2, r0
    4d10:	6039      	str	r1, [r7, #0]
    4d12:	1dfb      	adds	r3, r7, #7
    4d14:	701a      	strb	r2, [r3, #0]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    4d16:	683b      	ldr	r3, [r7, #0]
    4d18:	b2da      	uxtb	r2, r3
    4d1a:	1dfb      	adds	r3, r7, #7
    4d1c:	781b      	ldrb	r3, [r3, #0]
    4d1e:	4804      	ldr	r0, [pc, #16]	; (4d30 <_usbd_ep_int_dis+0x28>)
    4d20:	0019      	movs	r1, r3
    4d22:	4b04      	ldr	r3, [pc, #16]	; (4d34 <_usbd_ep_int_dis+0x2c>)
    4d24:	4798      	blx	r3
}
    4d26:	46c0      	nop			; (mov r8, r8)
    4d28:	46bd      	mov	sp, r7
    4d2a:	b002      	add	sp, #8
    4d2c:	bd80      	pop	{r7, pc}
    4d2e:	46c0      	nop			; (mov r8, r8)
    4d30:	41005000 	.word	0x41005000
    4d34:	00004843 	.word	0x00004843

00004d38 <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    4d38:	b580      	push	{r7, lr}
    4d3a:	b082      	sub	sp, #8
    4d3c:	af00      	add	r7, sp, #0
    4d3e:	0002      	movs	r2, r0
    4d40:	1dfb      	adds	r3, r7, #7
    4d42:	701a      	strb	r2, [r3, #0]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    4d44:	1dfb      	adds	r3, r7, #7
    4d46:	781b      	ldrb	r3, [r3, #0]
    4d48:	4a06      	ldr	r2, [pc, #24]	; (4d64 <_usbd_ep_is_ctrl+0x2c>)
    4d4a:	0019      	movs	r1, r3
    4d4c:	0010      	movs	r0, r2
    4d4e:	4b06      	ldr	r3, [pc, #24]	; (4d68 <_usbd_ep_is_ctrl+0x30>)
    4d50:	4798      	blx	r3
    4d52:	0003      	movs	r3, r0
    4d54:	3b11      	subs	r3, #17
    4d56:	425a      	negs	r2, r3
    4d58:	4153      	adcs	r3, r2
    4d5a:	b2db      	uxtb	r3, r3
}
    4d5c:	0018      	movs	r0, r3
    4d5e:	46bd      	mov	sp, r7
    4d60:	b002      	add	sp, #8
    4d62:	bd80      	pop	{r7, pc}
    4d64:	41005000 	.word	0x41005000
    4d68:	00004929 	.word	0x00004929

00004d6c <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    4d6c:	b590      	push	{r4, r7, lr}
    4d6e:	b083      	sub	sp, #12
    4d70:	af00      	add	r7, sp, #0
    4d72:	0004      	movs	r4, r0
    4d74:	0008      	movs	r0, r1
    4d76:	0011      	movs	r1, r2
    4d78:	1dfb      	adds	r3, r7, #7
    4d7a:	1c22      	adds	r2, r4, #0
    4d7c:	701a      	strb	r2, [r3, #0]
    4d7e:	1dbb      	adds	r3, r7, #6
    4d80:	1c02      	adds	r2, r0, #0
    4d82:	701a      	strb	r2, [r3, #0]
    4d84:	1d7b      	adds	r3, r7, #5
    4d86:	1c0a      	adds	r2, r1, #0
    4d88:	701a      	strb	r2, [r3, #0]
	if (st) {
    4d8a:	1d7b      	adds	r3, r7, #5
    4d8c:	781b      	ldrb	r3, [r3, #0]
    4d8e:	2b00      	cmp	r3, #0
    4d90:	d00c      	beq.n	4dac <_usbd_ep_set_stall+0x40>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    4d92:	1dbb      	adds	r3, r7, #6
    4d94:	781b      	ldrb	r3, [r3, #0]
    4d96:	2210      	movs	r2, #16
    4d98:	409a      	lsls	r2, r3
    4d9a:	0013      	movs	r3, r2
    4d9c:	b2da      	uxtb	r2, r3
    4d9e:	1dfb      	adds	r3, r7, #7
    4da0:	781b      	ldrb	r3, [r3, #0]
    4da2:	480a      	ldr	r0, [pc, #40]	; (4dcc <_usbd_ep_set_stall+0x60>)
    4da4:	0019      	movs	r1, r3
    4da6:	4b0a      	ldr	r3, [pc, #40]	; (4dd0 <_usbd_ep_set_stall+0x64>)
    4da8:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    4daa:	e00b      	b.n	4dc4 <_usbd_ep_set_stall+0x58>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    4dac:	1dbb      	adds	r3, r7, #6
    4dae:	781b      	ldrb	r3, [r3, #0]
    4db0:	2210      	movs	r2, #16
    4db2:	409a      	lsls	r2, r3
    4db4:	0013      	movs	r3, r2
    4db6:	b2da      	uxtb	r2, r3
    4db8:	1dfb      	adds	r3, r7, #7
    4dba:	781b      	ldrb	r3, [r3, #0]
    4dbc:	4803      	ldr	r0, [pc, #12]	; (4dcc <_usbd_ep_set_stall+0x60>)
    4dbe:	0019      	movs	r1, r3
    4dc0:	4b04      	ldr	r3, [pc, #16]	; (4dd4 <_usbd_ep_set_stall+0x68>)
    4dc2:	4798      	blx	r3
}
    4dc4:	46c0      	nop			; (mov r8, r8)
    4dc6:	46bd      	mov	sp, r7
    4dc8:	b003      	add	sp, #12
    4dca:	bd90      	pop	{r4, r7, pc}
    4dcc:	41005000 	.word	0x41005000
    4dd0:	00004753 	.word	0x00004753
    4dd4:	000047af 	.word	0x000047af

00004dd8 <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    4dd8:	b580      	push	{r7, lr}
    4dda:	b084      	sub	sp, #16
    4ddc:	af00      	add	r7, sp, #0
    4dde:	0002      	movs	r2, r0
    4de0:	1dfb      	adds	r3, r7, #7
    4de2:	701a      	strb	r2, [r3, #0]
    4de4:	1dbb      	adds	r3, r7, #6
    4de6:	1c0a      	adds	r2, r1, #0
    4de8:	701a      	strb	r2, [r3, #0]
	Usb *hw = USB;
    4dea:	4b0c      	ldr	r3, [pc, #48]	; (4e1c <_usbd_ep_is_stalled+0x44>)
    4dec:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    4dee:	1dfb      	adds	r3, r7, #7
    4df0:	781a      	ldrb	r2, [r3, #0]
    4df2:	68fb      	ldr	r3, [r7, #12]
    4df4:	0011      	movs	r1, r2
    4df6:	0018      	movs	r0, r3
    4df8:	4b09      	ldr	r3, [pc, #36]	; (4e20 <_usbd_ep_is_stalled+0x48>)
    4dfa:	4798      	blx	r3
    4dfc:	0003      	movs	r3, r0
    4dfe:	0019      	movs	r1, r3
    4e00:	1dbb      	adds	r3, r7, #6
    4e02:	781b      	ldrb	r3, [r3, #0]
    4e04:	2210      	movs	r2, #16
    4e06:	409a      	lsls	r2, r3
    4e08:	0013      	movs	r3, r2
    4e0a:	400b      	ands	r3, r1
    4e0c:	1e5a      	subs	r2, r3, #1
    4e0e:	4193      	sbcs	r3, r2
    4e10:	b2db      	uxtb	r3, r3
}
    4e12:	0018      	movs	r0, r3
    4e14:	46bd      	mov	sp, r7
    4e16:	b004      	add	sp, #16
    4e18:	bd80      	pop	{r7, pc}
    4e1a:	46c0      	nop			; (mov r8, r8)
    4e1c:	41005000 	.word	0x41005000
    4e20:	00004787 	.word	0x00004787

00004e24 <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    4e24:	b580      	push	{r7, lr}
    4e26:	b084      	sub	sp, #16
    4e28:	af00      	add	r7, sp, #0
    4e2a:	0002      	movs	r2, r0
    4e2c:	1dfb      	adds	r3, r7, #7
    4e2e:	701a      	strb	r2, [r3, #0]
    4e30:	1dbb      	adds	r3, r7, #6
    4e32:	1c0a      	adds	r2, r1, #0
    4e34:	701a      	strb	r2, [r3, #0]
	Usb *hw = USB;
    4e36:	4b0c      	ldr	r3, [pc, #48]	; (4e68 <_usbd_ep_is_stall_sent+0x44>)
    4e38:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    4e3a:	1dfb      	adds	r3, r7, #7
    4e3c:	781a      	ldrb	r2, [r3, #0]
    4e3e:	68fb      	ldr	r3, [r7, #12]
    4e40:	0011      	movs	r1, r2
    4e42:	0018      	movs	r0, r3
    4e44:	4b09      	ldr	r3, [pc, #36]	; (4e6c <_usbd_ep_is_stall_sent+0x48>)
    4e46:	4798      	blx	r3
    4e48:	0003      	movs	r3, r0
    4e4a:	0019      	movs	r1, r3
    4e4c:	1dbb      	adds	r3, r7, #6
    4e4e:	781b      	ldrb	r3, [r3, #0]
    4e50:	2220      	movs	r2, #32
    4e52:	409a      	lsls	r2, r3
    4e54:	0013      	movs	r3, r2
    4e56:	400b      	ands	r3, r1
    4e58:	1e5a      	subs	r2, r3, #1
    4e5a:	4193      	sbcs	r3, r2
    4e5c:	b2db      	uxtb	r3, r3
}
    4e5e:	0018      	movs	r0, r3
    4e60:	46bd      	mov	sp, r7
    4e62:	b004      	add	sp, #16
    4e64:	bd80      	pop	{r7, pc}
    4e66:	46c0      	nop			; (mov r8, r8)
    4e68:	41005000 	.word	0x41005000
    4e6c:	000046f7 	.word	0x000046f7

00004e70 <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    4e70:	b580      	push	{r7, lr}
    4e72:	b082      	sub	sp, #8
    4e74:	af00      	add	r7, sp, #0
    4e76:	0002      	movs	r2, r0
    4e78:	1dfb      	adds	r3, r7, #7
    4e7a:	701a      	strb	r2, [r3, #0]
    4e7c:	1dbb      	adds	r3, r7, #6
    4e7e:	1c0a      	adds	r2, r1, #0
    4e80:	701a      	strb	r2, [r3, #0]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    4e82:	1dbb      	adds	r3, r7, #6
    4e84:	781b      	ldrb	r3, [r3, #0]
    4e86:	2220      	movs	r2, #32
    4e88:	409a      	lsls	r2, r3
    4e8a:	1dfb      	adds	r3, r7, #7
    4e8c:	781b      	ldrb	r3, [r3, #0]
    4e8e:	0011      	movs	r1, r2
    4e90:	0018      	movs	r0, r3
    4e92:	4b03      	ldr	r3, [pc, #12]	; (4ea0 <_usbd_ep_ack_stall+0x30>)
    4e94:	4798      	blx	r3
}
    4e96:	46c0      	nop			; (mov r8, r8)
    4e98:	46bd      	mov	sp, r7
    4e9a:	b002      	add	sp, #8
    4e9c:	bd80      	pop	{r7, pc}
    4e9e:	46c0      	nop			; (mov r8, r8)
    4ea0:	00004ca9 	.word	0x00004ca9

00004ea4 <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    4ea4:	b590      	push	{r4, r7, lr}
    4ea6:	b083      	sub	sp, #12
    4ea8:	af00      	add	r7, sp, #0
    4eaa:	0004      	movs	r4, r0
    4eac:	0008      	movs	r0, r1
    4eae:	0011      	movs	r1, r2
    4eb0:	1dfb      	adds	r3, r7, #7
    4eb2:	1c22      	adds	r2, r4, #0
    4eb4:	701a      	strb	r2, [r3, #0]
    4eb6:	1dbb      	adds	r3, r7, #6
    4eb8:	1c02      	adds	r2, r0, #0
    4eba:	701a      	strb	r2, [r3, #0]
    4ebc:	1d7b      	adds	r3, r7, #5
    4ebe:	1c0a      	adds	r2, r1, #0
    4ec0:	701a      	strb	r2, [r3, #0]
	if (en) {
    4ec2:	1d7b      	adds	r3, r7, #5
    4ec4:	781b      	ldrb	r3, [r3, #0]
    4ec6:	2b00      	cmp	r3, #0
    4ec8:	d00a      	beq.n	4ee0 <_usbd_ep_int_stall_en+0x3c>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    4eca:	1dbb      	adds	r3, r7, #6
    4ecc:	781b      	ldrb	r3, [r3, #0]
    4ece:	2220      	movs	r2, #32
    4ed0:	409a      	lsls	r2, r3
    4ed2:	1dfb      	adds	r3, r7, #7
    4ed4:	781b      	ldrb	r3, [r3, #0]
    4ed6:	0011      	movs	r1, r2
    4ed8:	0018      	movs	r0, r3
    4eda:	4b08      	ldr	r3, [pc, #32]	; (4efc <_usbd_ep_int_stall_en+0x58>)
    4edc:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    4ede:	e009      	b.n	4ef4 <_usbd_ep_int_stall_en+0x50>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    4ee0:	1dbb      	adds	r3, r7, #6
    4ee2:	781b      	ldrb	r3, [r3, #0]
    4ee4:	2220      	movs	r2, #32
    4ee6:	409a      	lsls	r2, r3
    4ee8:	1dfb      	adds	r3, r7, #7
    4eea:	781b      	ldrb	r3, [r3, #0]
    4eec:	0011      	movs	r1, r2
    4eee:	0018      	movs	r0, r3
    4ef0:	4b03      	ldr	r3, [pc, #12]	; (4f00 <_usbd_ep_int_stall_en+0x5c>)
    4ef2:	4798      	blx	r3
}
    4ef4:	46c0      	nop			; (mov r8, r8)
    4ef6:	46bd      	mov	sp, r7
    4ef8:	b003      	add	sp, #12
    4efa:	bd90      	pop	{r4, r7, pc}
    4efc:	00004cd9 	.word	0x00004cd9
    4f00:	00004d09 	.word	0x00004d09

00004f04 <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    4f04:	b580      	push	{r7, lr}
    4f06:	b082      	sub	sp, #8
    4f08:	af00      	add	r7, sp, #0
    4f0a:	0002      	movs	r2, r0
    4f0c:	1dfb      	adds	r3, r7, #7
    4f0e:	701a      	strb	r2, [r3, #0]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    4f10:	1dfb      	adds	r3, r7, #7
    4f12:	781b      	ldrb	r3, [r3, #0]
    4f14:	4a04      	ldr	r2, [pc, #16]	; (4f28 <_usbd_ep_stop_setup+0x24>)
    4f16:	0019      	movs	r1, r3
    4f18:	0010      	movs	r0, r2
    4f1a:	4b04      	ldr	r3, [pc, #16]	; (4f2c <_usbd_ep_stop_setup+0x28>)
    4f1c:	4798      	blx	r3
}
    4f1e:	46c0      	nop			; (mov r8, r8)
    4f20:	46bd      	mov	sp, r7
    4f22:	b002      	add	sp, #8
    4f24:	bd80      	pop	{r7, pc}
    4f26:	46c0      	nop			; (mov r8, r8)
    4f28:	41005000 	.word	0x41005000
    4f2c:	000047e3 	.word	0x000047e3

00004f30 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    4f30:	b580      	push	{r7, lr}
    4f32:	b082      	sub	sp, #8
    4f34:	af00      	add	r7, sp, #0
    4f36:	0002      	movs	r2, r0
    4f38:	1dfb      	adds	r3, r7, #7
    4f3a:	701a      	strb	r2, [r3, #0]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    4f3c:	1dfb      	adds	r3, r7, #7
    4f3e:	781b      	ldrb	r3, [r3, #0]
    4f40:	4806      	ldr	r0, [pc, #24]	; (4f5c <_usbd_ep_is_setup+0x2c>)
    4f42:	2210      	movs	r2, #16
    4f44:	0019      	movs	r1, r3
    4f46:	4b06      	ldr	r3, [pc, #24]	; (4f60 <_usbd_ep_is_setup+0x30>)
    4f48:	4798      	blx	r3
    4f4a:	0003      	movs	r3, r0
    4f4c:	1e5a      	subs	r2, r3, #1
    4f4e:	4193      	sbcs	r3, r2
    4f50:	b2db      	uxtb	r3, r3
}
    4f52:	0018      	movs	r0, r3
    4f54:	46bd      	mov	sp, r7
    4f56:	b002      	add	sp, #8
    4f58:	bd80      	pop	{r7, pc}
    4f5a:	46c0      	nop			; (mov r8, r8)
    4f5c:	41005000 	.word	0x41005000
    4f60:	000046a9 	.word	0x000046a9

00004f64 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    4f64:	b580      	push	{r7, lr}
    4f66:	b082      	sub	sp, #8
    4f68:	af00      	add	r7, sp, #0
    4f6a:	0002      	movs	r2, r0
    4f6c:	1dfb      	adds	r3, r7, #7
    4f6e:	701a      	strb	r2, [r3, #0]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    4f70:	1dfb      	adds	r3, r7, #7
    4f72:	781b      	ldrb	r3, [r3, #0]
    4f74:	2110      	movs	r1, #16
    4f76:	0018      	movs	r0, r3
    4f78:	4b02      	ldr	r3, [pc, #8]	; (4f84 <_usbd_ep_ack_setup+0x20>)
    4f7a:	4798      	blx	r3
}
    4f7c:	46c0      	nop			; (mov r8, r8)
    4f7e:	46bd      	mov	sp, r7
    4f80:	b002      	add	sp, #8
    4f82:	bd80      	pop	{r7, pc}
    4f84:	00004ca9 	.word	0x00004ca9

00004f88 <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    4f88:	b590      	push	{r4, r7, lr}
    4f8a:	b083      	sub	sp, #12
    4f8c:	af00      	add	r7, sp, #0
    4f8e:	0004      	movs	r4, r0
    4f90:	0008      	movs	r0, r1
    4f92:	0011      	movs	r1, r2
    4f94:	1dfb      	adds	r3, r7, #7
    4f96:	1c22      	adds	r2, r4, #0
    4f98:	701a      	strb	r2, [r3, #0]
    4f9a:	1dbb      	adds	r3, r7, #6
    4f9c:	1c02      	adds	r2, r0, #0
    4f9e:	701a      	strb	r2, [r3, #0]
    4fa0:	1d7b      	adds	r3, r7, #5
    4fa2:	1c0a      	adds	r2, r1, #0
    4fa4:	701a      	strb	r2, [r3, #0]
	if (tgl) {
    4fa6:	1d7b      	adds	r3, r7, #5
    4fa8:	781b      	ldrb	r3, [r3, #0]
    4faa:	2b00      	cmp	r3, #0
    4fac:	d00c      	beq.n	4fc8 <_usbd_ep_set_toggle+0x40>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    4fae:	1dbb      	adds	r3, r7, #6
    4fb0:	781b      	ldrb	r3, [r3, #0]
    4fb2:	2201      	movs	r2, #1
    4fb4:	409a      	lsls	r2, r3
    4fb6:	0013      	movs	r3, r2
    4fb8:	b2da      	uxtb	r2, r3
    4fba:	1dfb      	adds	r3, r7, #7
    4fbc:	781b      	ldrb	r3, [r3, #0]
    4fbe:	480a      	ldr	r0, [pc, #40]	; (4fe8 <_usbd_ep_set_toggle+0x60>)
    4fc0:	0019      	movs	r1, r3
    4fc2:	4b0a      	ldr	r3, [pc, #40]	; (4fec <_usbd_ep_set_toggle+0x64>)
    4fc4:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    4fc6:	e00b      	b.n	4fe0 <_usbd_ep_set_toggle+0x58>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    4fc8:	1dbb      	adds	r3, r7, #6
    4fca:	781b      	ldrb	r3, [r3, #0]
    4fcc:	2201      	movs	r2, #1
    4fce:	409a      	lsls	r2, r3
    4fd0:	0013      	movs	r3, r2
    4fd2:	b2da      	uxtb	r2, r3
    4fd4:	1dfb      	adds	r3, r7, #7
    4fd6:	781b      	ldrb	r3, [r3, #0]
    4fd8:	4803      	ldr	r0, [pc, #12]	; (4fe8 <_usbd_ep_set_toggle+0x60>)
    4fda:	0019      	movs	r1, r3
    4fdc:	4b04      	ldr	r3, [pc, #16]	; (4ff0 <_usbd_ep_set_toggle+0x68>)
    4fde:	4798      	blx	r3
}
    4fe0:	46c0      	nop			; (mov r8, r8)
    4fe2:	46bd      	mov	sp, r7
    4fe4:	b003      	add	sp, #12
    4fe6:	bd90      	pop	{r4, r7, pc}
    4fe8:	41005000 	.word	0x41005000
    4fec:	00004753 	.word	0x00004753
    4ff0:	000047af 	.word	0x000047af

00004ff4 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    4ff4:	b580      	push	{r7, lr}
    4ff6:	b082      	sub	sp, #8
    4ff8:	af00      	add	r7, sp, #0
    4ffa:	0002      	movs	r2, r0
    4ffc:	1dfb      	adds	r3, r7, #7
    4ffe:	701a      	strb	r2, [r3, #0]
    5000:	1dbb      	adds	r3, r7, #6
    5002:	1c0a      	adds	r2, r1, #0
    5004:	701a      	strb	r2, [r3, #0]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    5006:	1dbb      	adds	r3, r7, #6
    5008:	781b      	ldrb	r3, [r3, #0]
    500a:	2201      	movs	r2, #1
    500c:	409a      	lsls	r2, r3
    500e:	1dfb      	adds	r3, r7, #7
    5010:	781b      	ldrb	r3, [r3, #0]
    5012:	0011      	movs	r1, r2
    5014:	0018      	movs	r0, r3
    5016:	4b03      	ldr	r3, [pc, #12]	; (5024 <_usbd_ep_ack_io_cpt+0x30>)
    5018:	4798      	blx	r3
}
    501a:	46c0      	nop			; (mov r8, r8)
    501c:	46bd      	mov	sp, r7
    501e:	b002      	add	sp, #8
    5020:	bd80      	pop	{r7, pc}
    5022:	46c0      	nop			; (mov r8, r8)
    5024:	00004ca9 	.word	0x00004ca9

00005028 <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    5028:	b580      	push	{r7, lr}
    502a:	b084      	sub	sp, #16
    502c:	af00      	add	r7, sp, #0
    502e:	603a      	str	r2, [r7, #0]
    5030:	1dfb      	adds	r3, r7, #7
    5032:	1c02      	adds	r2, r0, #0
    5034:	701a      	strb	r2, [r3, #0]
    5036:	1dbb      	adds	r3, r7, #6
    5038:	1c0a      	adds	r2, r1, #0
    503a:	701a      	strb	r2, [r3, #0]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    503c:	1dfb      	adds	r3, r7, #7
    503e:	781a      	ldrb	r2, [r3, #0]
    5040:	1dbb      	adds	r3, r7, #6
    5042:	781b      	ldrb	r3, [r3, #0]
    5044:	0052      	lsls	r2, r2, #1
    5046:	18d3      	adds	r3, r2, r3
    5048:	011a      	lsls	r2, r3, #4
    504a:	4b05      	ldr	r3, [pc, #20]	; (5060 <_usbd_ep_set_buf+0x38>)
    504c:	18d3      	adds	r3, r2, r3
    504e:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    5050:	68fb      	ldr	r3, [r7, #12]
    5052:	683a      	ldr	r2, [r7, #0]
    5054:	601a      	str	r2, [r3, #0]
}
    5056:	46c0      	nop			; (mov r8, r8)
    5058:	46bd      	mov	sp, r7
    505a:	b004      	add	sp, #16
    505c:	bd80      	pop	{r7, pc}
    505e:	46c0      	nop			; (mov r8, r8)
    5060:	20001058 	.word	0x20001058

00005064 <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    5064:	b590      	push	{r4, r7, lr}
    5066:	b085      	sub	sp, #20
    5068:	af00      	add	r7, sp, #0
    506a:	0004      	movs	r4, r0
    506c:	0008      	movs	r0, r1
    506e:	0011      	movs	r1, r2
    5070:	1dfb      	adds	r3, r7, #7
    5072:	1c22      	adds	r2, r4, #0
    5074:	701a      	strb	r2, [r3, #0]
    5076:	1dbb      	adds	r3, r7, #6
    5078:	1c02      	adds	r2, r0, #0
    507a:	701a      	strb	r2, [r3, #0]
    507c:	1d3b      	adds	r3, r7, #4
    507e:	1c0a      	adds	r2, r1, #0
    5080:	801a      	strh	r2, [r3, #0]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    5082:	1dfb      	adds	r3, r7, #7
    5084:	781a      	ldrb	r2, [r3, #0]
    5086:	1dbb      	adds	r3, r7, #6
    5088:	781b      	ldrb	r3, [r3, #0]
    508a:	0052      	lsls	r2, r2, #1
    508c:	18d3      	adds	r3, r2, r3
    508e:	011a      	lsls	r2, r3, #4
    5090:	4b0a      	ldr	r3, [pc, #40]	; (50bc <_usbd_ep_set_in_count+0x58>)
    5092:	18d3      	adds	r3, r2, r3
    5094:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    5096:	1d3b      	adds	r3, r7, #4
    5098:	881b      	ldrh	r3, [r3, #0]
    509a:	049b      	lsls	r3, r3, #18
    509c:	0c9b      	lsrs	r3, r3, #18
    509e:	b299      	uxth	r1, r3
    50a0:	68fb      	ldr	r3, [r7, #12]
    50a2:	685a      	ldr	r2, [r3, #4]
    50a4:	0489      	lsls	r1, r1, #18
    50a6:	0c89      	lsrs	r1, r1, #18
    50a8:	0389      	lsls	r1, r1, #14
    50aa:	4805      	ldr	r0, [pc, #20]	; (50c0 <_usbd_ep_set_in_count+0x5c>)
    50ac:	4002      	ands	r2, r0
    50ae:	430a      	orrs	r2, r1
    50b0:	605a      	str	r2, [r3, #4]
}
    50b2:	46c0      	nop			; (mov r8, r8)
    50b4:	46bd      	mov	sp, r7
    50b6:	b005      	add	sp, #20
    50b8:	bd90      	pop	{r4, r7, pc}
    50ba:	46c0      	nop			; (mov r8, r8)
    50bc:	20001058 	.word	0x20001058
    50c0:	f0003fff 	.word	0xf0003fff

000050c4 <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    50c4:	b590      	push	{r4, r7, lr}
    50c6:	b085      	sub	sp, #20
    50c8:	af00      	add	r7, sp, #0
    50ca:	0004      	movs	r4, r0
    50cc:	0008      	movs	r0, r1
    50ce:	0011      	movs	r1, r2
    50d0:	1dfb      	adds	r3, r7, #7
    50d2:	1c22      	adds	r2, r4, #0
    50d4:	701a      	strb	r2, [r3, #0]
    50d6:	1dbb      	adds	r3, r7, #6
    50d8:	1c02      	adds	r2, r0, #0
    50da:	701a      	strb	r2, [r3, #0]
    50dc:	1d3b      	adds	r3, r7, #4
    50de:	1c0a      	adds	r2, r1, #0
    50e0:	801a      	strh	r2, [r3, #0]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    50e2:	1dfb      	adds	r3, r7, #7
    50e4:	781a      	ldrb	r2, [r3, #0]
    50e6:	1dbb      	adds	r3, r7, #6
    50e8:	781b      	ldrb	r3, [r3, #0]
    50ea:	0052      	lsls	r2, r2, #1
    50ec:	18d3      	adds	r3, r2, r3
    50ee:	011a      	lsls	r2, r3, #4
    50f0:	4b09      	ldr	r3, [pc, #36]	; (5118 <_usbd_ep_set_in_size+0x54>)
    50f2:	18d3      	adds	r3, r2, r3
    50f4:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    50f6:	1d3b      	adds	r3, r7, #4
    50f8:	881b      	ldrh	r3, [r3, #0]
    50fa:	049b      	lsls	r3, r3, #18
    50fc:	0c9b      	lsrs	r3, r3, #18
    50fe:	b299      	uxth	r1, r3
    5100:	68fb      	ldr	r3, [r7, #12]
    5102:	685a      	ldr	r2, [r3, #4]
    5104:	0489      	lsls	r1, r1, #18
    5106:	0c89      	lsrs	r1, r1, #18
    5108:	0b92      	lsrs	r2, r2, #14
    510a:	0392      	lsls	r2, r2, #14
    510c:	430a      	orrs	r2, r1
    510e:	605a      	str	r2, [r3, #4]
}
    5110:	46c0      	nop			; (mov r8, r8)
    5112:	46bd      	mov	sp, r7
    5114:	b005      	add	sp, #20
    5116:	bd90      	pop	{r4, r7, pc}
    5118:	20001058 	.word	0x20001058

0000511c <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    511c:	b590      	push	{r4, r7, lr}
    511e:	b085      	sub	sp, #20
    5120:	af00      	add	r7, sp, #0
    5122:	0004      	movs	r4, r0
    5124:	0008      	movs	r0, r1
    5126:	0011      	movs	r1, r2
    5128:	1dfb      	adds	r3, r7, #7
    512a:	1c22      	adds	r2, r4, #0
    512c:	701a      	strb	r2, [r3, #0]
    512e:	1dbb      	adds	r3, r7, #6
    5130:	1c02      	adds	r2, r0, #0
    5132:	701a      	strb	r2, [r3, #0]
    5134:	1d3b      	adds	r3, r7, #4
    5136:	1c0a      	adds	r2, r1, #0
    5138:	801a      	strh	r2, [r3, #0]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    513a:	1dfb      	adds	r3, r7, #7
    513c:	781a      	ldrb	r2, [r3, #0]
    513e:	1dbb      	adds	r3, r7, #6
    5140:	781b      	ldrb	r3, [r3, #0]
    5142:	0052      	lsls	r2, r2, #1
    5144:	18d3      	adds	r3, r2, r3
    5146:	011a      	lsls	r2, r3, #4
    5148:	4b09      	ldr	r3, [pc, #36]	; (5170 <_usbd_ep_set_out_count+0x54>)
    514a:	18d3      	adds	r3, r2, r3
    514c:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    514e:	1d3b      	adds	r3, r7, #4
    5150:	881b      	ldrh	r3, [r3, #0]
    5152:	049b      	lsls	r3, r3, #18
    5154:	0c9b      	lsrs	r3, r3, #18
    5156:	b299      	uxth	r1, r3
    5158:	68fb      	ldr	r3, [r7, #12]
    515a:	685a      	ldr	r2, [r3, #4]
    515c:	0489      	lsls	r1, r1, #18
    515e:	0c89      	lsrs	r1, r1, #18
    5160:	0b92      	lsrs	r2, r2, #14
    5162:	0392      	lsls	r2, r2, #14
    5164:	430a      	orrs	r2, r1
    5166:	605a      	str	r2, [r3, #4]
}
    5168:	46c0      	nop			; (mov r8, r8)
    516a:	46bd      	mov	sp, r7
    516c:	b005      	add	sp, #20
    516e:	bd90      	pop	{r4, r7, pc}
    5170:	20001058 	.word	0x20001058

00005174 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    5174:	b590      	push	{r4, r7, lr}
    5176:	b085      	sub	sp, #20
    5178:	af00      	add	r7, sp, #0
    517a:	0004      	movs	r4, r0
    517c:	0008      	movs	r0, r1
    517e:	0011      	movs	r1, r2
    5180:	1dfb      	adds	r3, r7, #7
    5182:	1c22      	adds	r2, r4, #0
    5184:	701a      	strb	r2, [r3, #0]
    5186:	1dbb      	adds	r3, r7, #6
    5188:	1c02      	adds	r2, r0, #0
    518a:	701a      	strb	r2, [r3, #0]
    518c:	1d3b      	adds	r3, r7, #4
    518e:	1c0a      	adds	r2, r1, #0
    5190:	801a      	strh	r2, [r3, #0]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    5192:	1dfb      	adds	r3, r7, #7
    5194:	781a      	ldrb	r2, [r3, #0]
    5196:	1dbb      	adds	r3, r7, #6
    5198:	781b      	ldrb	r3, [r3, #0]
    519a:	0052      	lsls	r2, r2, #1
    519c:	18d3      	adds	r3, r2, r3
    519e:	011a      	lsls	r2, r3, #4
    51a0:	4b0a      	ldr	r3, [pc, #40]	; (51cc <_usbd_ep_set_out_size+0x58>)
    51a2:	18d3      	adds	r3, r2, r3
    51a4:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    51a6:	1d3b      	adds	r3, r7, #4
    51a8:	881b      	ldrh	r3, [r3, #0]
    51aa:	049b      	lsls	r3, r3, #18
    51ac:	0c9b      	lsrs	r3, r3, #18
    51ae:	b299      	uxth	r1, r3
    51b0:	68fb      	ldr	r3, [r7, #12]
    51b2:	685a      	ldr	r2, [r3, #4]
    51b4:	0489      	lsls	r1, r1, #18
    51b6:	0c89      	lsrs	r1, r1, #18
    51b8:	0389      	lsls	r1, r1, #14
    51ba:	4805      	ldr	r0, [pc, #20]	; (51d0 <_usbd_ep_set_out_size+0x5c>)
    51bc:	4002      	ands	r2, r0
    51be:	430a      	orrs	r2, r1
    51c0:	605a      	str	r2, [r3, #4]
}
    51c2:	46c0      	nop			; (mov r8, r8)
    51c4:	46bd      	mov	sp, r7
    51c6:	b005      	add	sp, #20
    51c8:	bd90      	pop	{r4, r7, pc}
    51ca:	46c0      	nop			; (mov r8, r8)
    51cc:	20001058 	.word	0x20001058
    51d0:	f0003fff 	.word	0xf0003fff

000051d4 <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    51d4:	b580      	push	{r7, lr}
    51d6:	b084      	sub	sp, #16
    51d8:	af00      	add	r7, sp, #0
    51da:	60ba      	str	r2, [r7, #8]
    51dc:	607b      	str	r3, [r7, #4]
    51de:	230f      	movs	r3, #15
    51e0:	18fb      	adds	r3, r7, r3
    51e2:	1c02      	adds	r2, r0, #0
    51e4:	701a      	strb	r2, [r3, #0]
    51e6:	230e      	movs	r3, #14
    51e8:	18fb      	adds	r3, r7, r3
    51ea:	1c0a      	adds	r2, r1, #0
    51ec:	701a      	strb	r2, [r3, #0]
	_usbd_ep_set_in_size(epn, bank_n, size);
    51ee:	68bb      	ldr	r3, [r7, #8]
    51f0:	b29a      	uxth	r2, r3
    51f2:	230e      	movs	r3, #14
    51f4:	18fb      	adds	r3, r7, r3
    51f6:	7819      	ldrb	r1, [r3, #0]
    51f8:	230f      	movs	r3, #15
    51fa:	18fb      	adds	r3, r7, r3
    51fc:	781b      	ldrb	r3, [r3, #0]
    51fe:	0018      	movs	r0, r3
    5200:	4b08      	ldr	r3, [pc, #32]	; (5224 <_usbd_ep_set_in_trans+0x50>)
    5202:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    5204:	687b      	ldr	r3, [r7, #4]
    5206:	b29a      	uxth	r2, r3
    5208:	230e      	movs	r3, #14
    520a:	18fb      	adds	r3, r7, r3
    520c:	7819      	ldrb	r1, [r3, #0]
    520e:	230f      	movs	r3, #15
    5210:	18fb      	adds	r3, r7, r3
    5212:	781b      	ldrb	r3, [r3, #0]
    5214:	0018      	movs	r0, r3
    5216:	4b04      	ldr	r3, [pc, #16]	; (5228 <_usbd_ep_set_in_trans+0x54>)
    5218:	4798      	blx	r3
}
    521a:	46c0      	nop			; (mov r8, r8)
    521c:	46bd      	mov	sp, r7
    521e:	b004      	add	sp, #16
    5220:	bd80      	pop	{r7, pc}
    5222:	46c0      	nop			; (mov r8, r8)
    5224:	000050c5 	.word	0x000050c5
    5228:	00005065 	.word	0x00005065

0000522c <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    522c:	b580      	push	{r7, lr}
    522e:	b084      	sub	sp, #16
    5230:	af00      	add	r7, sp, #0
    5232:	60ba      	str	r2, [r7, #8]
    5234:	607b      	str	r3, [r7, #4]
    5236:	230f      	movs	r3, #15
    5238:	18fb      	adds	r3, r7, r3
    523a:	1c02      	adds	r2, r0, #0
    523c:	701a      	strb	r2, [r3, #0]
    523e:	230e      	movs	r3, #14
    5240:	18fb      	adds	r3, r7, r3
    5242:	1c0a      	adds	r2, r1, #0
    5244:	701a      	strb	r2, [r3, #0]
	_usbd_ep_set_out_size(epn, bank_n, size);
    5246:	68bb      	ldr	r3, [r7, #8]
    5248:	b29a      	uxth	r2, r3
    524a:	230e      	movs	r3, #14
    524c:	18fb      	adds	r3, r7, r3
    524e:	7819      	ldrb	r1, [r3, #0]
    5250:	230f      	movs	r3, #15
    5252:	18fb      	adds	r3, r7, r3
    5254:	781b      	ldrb	r3, [r3, #0]
    5256:	0018      	movs	r0, r3
    5258:	4b08      	ldr	r3, [pc, #32]	; (527c <_usbd_ep_set_out_trans+0x50>)
    525a:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    525c:	687b      	ldr	r3, [r7, #4]
    525e:	b29a      	uxth	r2, r3
    5260:	230e      	movs	r3, #14
    5262:	18fb      	adds	r3, r7, r3
    5264:	7819      	ldrb	r1, [r3, #0]
    5266:	230f      	movs	r3, #15
    5268:	18fb      	adds	r3, r7, r3
    526a:	781b      	ldrb	r3, [r3, #0]
    526c:	0018      	movs	r0, r3
    526e:	4b04      	ldr	r3, [pc, #16]	; (5280 <_usbd_ep_set_out_trans+0x54>)
    5270:	4798      	blx	r3
}
    5272:	46c0      	nop			; (mov r8, r8)
    5274:	46bd      	mov	sp, r7
    5276:	b004      	add	sp, #16
    5278:	bd80      	pop	{r7, pc}
    527a:	46c0      	nop			; (mov r8, r8)
    527c:	00005175 	.word	0x00005175
    5280:	0000511d 	.word	0x0000511d

00005284 <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    5284:	b580      	push	{r7, lr}
    5286:	b084      	sub	sp, #16
    5288:	af00      	add	r7, sp, #0
    528a:	0002      	movs	r2, r0
    528c:	1dfb      	adds	r3, r7, #7
    528e:	701a      	strb	r2, [r3, #0]
    5290:	1dbb      	adds	r3, r7, #6
    5292:	1c0a      	adds	r2, r1, #0
    5294:	701a      	strb	r2, [r3, #0]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    5296:	1dfb      	adds	r3, r7, #7
    5298:	781a      	ldrb	r2, [r3, #0]
    529a:	1dbb      	adds	r3, r7, #6
    529c:	781b      	ldrb	r3, [r3, #0]
    529e:	0052      	lsls	r2, r2, #1
    52a0:	18d3      	adds	r3, r2, r3
    52a2:	011a      	lsls	r2, r3, #4
    52a4:	4b04      	ldr	r3, [pc, #16]	; (52b8 <_usbd_ep_clear_bank_status+0x34>)
    52a6:	18d3      	adds	r3, r2, r3
    52a8:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    52aa:	68fb      	ldr	r3, [r7, #12]
    52ac:	2200      	movs	r2, #0
    52ae:	729a      	strb	r2, [r3, #10]
}
    52b0:	46c0      	nop			; (mov r8, r8)
    52b2:	46bd      	mov	sp, r7
    52b4:	b004      	add	sp, #16
    52b6:	bd80      	pop	{r7, pc}
    52b8:	20001058 	.word	0x20001058

000052bc <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    52bc:	b590      	push	{r4, r7, lr}
    52be:	b083      	sub	sp, #12
    52c0:	af00      	add	r7, sp, #0
    52c2:	0004      	movs	r4, r0
    52c4:	0008      	movs	r0, r1
    52c6:	0011      	movs	r1, r2
    52c8:	1dfb      	adds	r3, r7, #7
    52ca:	1c22      	adds	r2, r4, #0
    52cc:	701a      	strb	r2, [r3, #0]
    52ce:	1dbb      	adds	r3, r7, #6
    52d0:	1c02      	adds	r2, r0, #0
    52d2:	701a      	strb	r2, [r3, #0]
    52d4:	1d7b      	adds	r3, r7, #5
    52d6:	1c0a      	adds	r2, r1, #0
    52d8:	701a      	strb	r2, [r3, #0]
	if (rdy) {
    52da:	1d7b      	adds	r3, r7, #5
    52dc:	781b      	ldrb	r3, [r3, #0]
    52de:	2b00      	cmp	r3, #0
    52e0:	d00c      	beq.n	52fc <_usbd_ep_set_in_rdy+0x40>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    52e2:	1dbb      	adds	r3, r7, #6
    52e4:	781b      	ldrb	r3, [r3, #0]
    52e6:	2240      	movs	r2, #64	; 0x40
    52e8:	409a      	lsls	r2, r3
    52ea:	0013      	movs	r3, r2
    52ec:	b2da      	uxtb	r2, r3
    52ee:	1dfb      	adds	r3, r7, #7
    52f0:	781b      	ldrb	r3, [r3, #0]
    52f2:	480a      	ldr	r0, [pc, #40]	; (531c <_usbd_ep_set_in_rdy+0x60>)
    52f4:	0019      	movs	r1, r3
    52f6:	4b0a      	ldr	r3, [pc, #40]	; (5320 <_usbd_ep_set_in_rdy+0x64>)
    52f8:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    52fa:	e00b      	b.n	5314 <_usbd_ep_set_in_rdy+0x58>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    52fc:	1dbb      	adds	r3, r7, #6
    52fe:	781b      	ldrb	r3, [r3, #0]
    5300:	2240      	movs	r2, #64	; 0x40
    5302:	409a      	lsls	r2, r3
    5304:	0013      	movs	r3, r2
    5306:	b2da      	uxtb	r2, r3
    5308:	1dfb      	adds	r3, r7, #7
    530a:	781b      	ldrb	r3, [r3, #0]
    530c:	4803      	ldr	r0, [pc, #12]	; (531c <_usbd_ep_set_in_rdy+0x60>)
    530e:	0019      	movs	r1, r3
    5310:	4b04      	ldr	r3, [pc, #16]	; (5324 <_usbd_ep_set_in_rdy+0x68>)
    5312:	4798      	blx	r3
}
    5314:	46c0      	nop			; (mov r8, r8)
    5316:	46bd      	mov	sp, r7
    5318:	b003      	add	sp, #12
    531a:	bd90      	pop	{r4, r7, pc}
    531c:	41005000 	.word	0x41005000
    5320:	00004753 	.word	0x00004753
    5324:	000047af 	.word	0x000047af

00005328 <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    5328:	b590      	push	{r4, r7, lr}
    532a:	b083      	sub	sp, #12
    532c:	af00      	add	r7, sp, #0
    532e:	0004      	movs	r4, r0
    5330:	0008      	movs	r0, r1
    5332:	0011      	movs	r1, r2
    5334:	1dfb      	adds	r3, r7, #7
    5336:	1c22      	adds	r2, r4, #0
    5338:	701a      	strb	r2, [r3, #0]
    533a:	1dbb      	adds	r3, r7, #6
    533c:	1c02      	adds	r2, r0, #0
    533e:	701a      	strb	r2, [r3, #0]
    5340:	1d7b      	adds	r3, r7, #5
    5342:	1c0a      	adds	r2, r1, #0
    5344:	701a      	strb	r2, [r3, #0]
	if (rdy) {
    5346:	1d7b      	adds	r3, r7, #5
    5348:	781b      	ldrb	r3, [r3, #0]
    534a:	2b00      	cmp	r3, #0
    534c:	d00c      	beq.n	5368 <_usbd_ep_set_out_rdy+0x40>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    534e:	1dbb      	adds	r3, r7, #6
    5350:	781b      	ldrb	r3, [r3, #0]
    5352:	2240      	movs	r2, #64	; 0x40
    5354:	409a      	lsls	r2, r3
    5356:	0013      	movs	r3, r2
    5358:	b2da      	uxtb	r2, r3
    535a:	1dfb      	adds	r3, r7, #7
    535c:	781b      	ldrb	r3, [r3, #0]
    535e:	480a      	ldr	r0, [pc, #40]	; (5388 <_usbd_ep_set_out_rdy+0x60>)
    5360:	0019      	movs	r1, r3
    5362:	4b0a      	ldr	r3, [pc, #40]	; (538c <_usbd_ep_set_out_rdy+0x64>)
    5364:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    5366:	e00b      	b.n	5380 <_usbd_ep_set_out_rdy+0x58>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    5368:	1dbb      	adds	r3, r7, #6
    536a:	781b      	ldrb	r3, [r3, #0]
    536c:	2240      	movs	r2, #64	; 0x40
    536e:	409a      	lsls	r2, r3
    5370:	0013      	movs	r3, r2
    5372:	b2da      	uxtb	r2, r3
    5374:	1dfb      	adds	r3, r7, #7
    5376:	781b      	ldrb	r3, [r3, #0]
    5378:	4803      	ldr	r0, [pc, #12]	; (5388 <_usbd_ep_set_out_rdy+0x60>)
    537a:	0019      	movs	r1, r3
    537c:	4b04      	ldr	r3, [pc, #16]	; (5390 <_usbd_ep_set_out_rdy+0x68>)
    537e:	4798      	blx	r3
}
    5380:	46c0      	nop			; (mov r8, r8)
    5382:	46bd      	mov	sp, r7
    5384:	b003      	add	sp, #12
    5386:	bd90      	pop	{r4, r7, pc}
    5388:	41005000 	.word	0x41005000
    538c:	000047af 	.word	0x000047af
    5390:	00004753 	.word	0x00004753

00005394 <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    5394:	b580      	push	{r7, lr}
    5396:	b082      	sub	sp, #8
    5398:	af00      	add	r7, sp, #0
    539a:	0002      	movs	r2, r0
    539c:	1dbb      	adds	r3, r7, #6
    539e:	801a      	strh	r2, [r3, #0]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    53a0:	1dbb      	adds	r3, r7, #6
    53a2:	881a      	ldrh	r2, [r3, #0]
    53a4:	2380      	movs	r3, #128	; 0x80
    53a6:	009b      	lsls	r3, r3, #2
    53a8:	429a      	cmp	r2, r3
    53aa:	d827      	bhi.n	53fc <_usbd_ep_pcksize_size+0x68>
    53ac:	1dbb      	adds	r3, r7, #6
    53ae:	881a      	ldrh	r2, [r3, #0]
    53b0:	2380      	movs	r3, #128	; 0x80
    53b2:	005b      	lsls	r3, r3, #1
    53b4:	429a      	cmp	r2, r3
    53b6:	d81f      	bhi.n	53f8 <_usbd_ep_pcksize_size+0x64>
    53b8:	1dbb      	adds	r3, r7, #6
    53ba:	881b      	ldrh	r3, [r3, #0]
    53bc:	2b80      	cmp	r3, #128	; 0x80
    53be:	d819      	bhi.n	53f4 <_usbd_ep_pcksize_size+0x60>
    53c0:	1dbb      	adds	r3, r7, #6
    53c2:	881b      	ldrh	r3, [r3, #0]
    53c4:	2b40      	cmp	r3, #64	; 0x40
    53c6:	d813      	bhi.n	53f0 <_usbd_ep_pcksize_size+0x5c>
    53c8:	1dbb      	adds	r3, r7, #6
    53ca:	881b      	ldrh	r3, [r3, #0]
    53cc:	2b20      	cmp	r3, #32
    53ce:	d80d      	bhi.n	53ec <_usbd_ep_pcksize_size+0x58>
    53d0:	1dbb      	adds	r3, r7, #6
    53d2:	881b      	ldrh	r3, [r3, #0]
    53d4:	2b10      	cmp	r3, #16
    53d6:	d807      	bhi.n	53e8 <_usbd_ep_pcksize_size+0x54>
    53d8:	1dbb      	adds	r3, r7, #6
    53da:	881b      	ldrh	r3, [r3, #0]
    53dc:	2208      	movs	r2, #8
    53de:	429a      	cmp	r2, r3
    53e0:	419b      	sbcs	r3, r3
    53e2:	425b      	negs	r3, r3
    53e4:	b2db      	uxtb	r3, r3
    53e6:	e00a      	b.n	53fe <_usbd_ep_pcksize_size+0x6a>
    53e8:	2302      	movs	r3, #2
    53ea:	e008      	b.n	53fe <_usbd_ep_pcksize_size+0x6a>
    53ec:	2303      	movs	r3, #3
    53ee:	e006      	b.n	53fe <_usbd_ep_pcksize_size+0x6a>
    53f0:	2304      	movs	r3, #4
    53f2:	e004      	b.n	53fe <_usbd_ep_pcksize_size+0x6a>
    53f4:	2305      	movs	r3, #5
    53f6:	e002      	b.n	53fe <_usbd_ep_pcksize_size+0x6a>
    53f8:	2306      	movs	r3, #6
    53fa:	e000      	b.n	53fe <_usbd_ep_pcksize_size+0x6a>
    53fc:	2307      	movs	r3, #7
}
    53fe:	0018      	movs	r0, r3
    5400:	46bd      	mov	sp, r7
    5402:	b002      	add	sp, #8
    5404:	bd80      	pop	{r7, pc}
	...

00005408 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    5408:	b580      	push	{r7, lr}
    540a:	b084      	sub	sp, #16
    540c:	af00      	add	r7, sp, #0
    540e:	0002      	movs	r2, r0
    5410:	1dfb      	adds	r3, r7, #7
    5412:	701a      	strb	r2, [r3, #0]
    5414:	1dbb      	adds	r3, r7, #6
    5416:	1c0a      	adds	r2, r1, #0
    5418:	701a      	strb	r2, [r3, #0]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    541a:	1dfb      	adds	r3, r7, #7
    541c:	781b      	ldrb	r3, [r3, #0]
    541e:	2b00      	cmp	r3, #0
    5420:	d00b      	beq.n	543a <_usb_d_dev_ept+0x32>
    5422:	1dbb      	adds	r3, r7, #6
    5424:	781b      	ldrb	r3, [r3, #0]
    5426:	2b00      	cmp	r3, #0
    5428:	d004      	beq.n	5434 <_usb_d_dev_ept+0x2c>
    542a:	1dfb      	adds	r3, r7, #7
    542c:	781b      	ldrb	r3, [r3, #0]
    542e:	3307      	adds	r3, #7
    5430:	b2db      	uxtb	r3, r3
    5432:	e003      	b.n	543c <_usb_d_dev_ept+0x34>
    5434:	1dfb      	adds	r3, r7, #7
    5436:	781b      	ldrb	r3, [r3, #0]
    5438:	e000      	b.n	543c <_usb_d_dev_ept+0x34>
    543a:	2300      	movs	r3, #0
    543c:	220f      	movs	r2, #15
    543e:	18ba      	adds	r2, r7, r2
    5440:	7013      	strb	r3, [r2, #0]
	return &dev_inst.ep[ep_index];
    5442:	230f      	movs	r3, #15
    5444:	18fb      	adds	r3, r7, r3
    5446:	781a      	ldrb	r2, [r3, #0]
    5448:	0013      	movs	r3, r2
    544a:	009b      	lsls	r3, r3, #2
    544c:	189b      	adds	r3, r3, r2
    544e:	009b      	lsls	r3, r3, #2
    5450:	3310      	adds	r3, #16
    5452:	001a      	movs	r2, r3
    5454:	4b03      	ldr	r3, [pc, #12]	; (5464 <_usb_d_dev_ept+0x5c>)
    5456:	18d3      	adds	r3, r2, r3
    5458:	3304      	adds	r3, #4
}
    545a:	0018      	movs	r0, r3
    545c:	46bd      	mov	sp, r7
    545e:	b004      	add	sp, #16
    5460:	bd80      	pop	{r7, pc}
    5462:	46c0      	nop			; (mov r8, r8)
    5464:	20000ef0 	.word	0x20000ef0

00005468 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    5468:	b580      	push	{r7, lr}
    546a:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    546c:	4b05      	ldr	r3, [pc, #20]	; (5484 <_usb_d_dev_sof+0x1c>)
    546e:	2104      	movs	r1, #4
    5470:	0018      	movs	r0, r3
    5472:	4b05      	ldr	r3, [pc, #20]	; (5488 <_usb_d_dev_sof+0x20>)
    5474:	4798      	blx	r3
	dev_inst.callbacks.sof();
    5476:	4b05      	ldr	r3, [pc, #20]	; (548c <_usb_d_dev_sof+0x24>)
    5478:	681b      	ldr	r3, [r3, #0]
    547a:	4798      	blx	r3
}
    547c:	46c0      	nop			; (mov r8, r8)
    547e:	46bd      	mov	sp, r7
    5480:	bd80      	pop	{r7, pc}
    5482:	46c0      	nop			; (mov r8, r8)
    5484:	41005000 	.word	0x41005000
    5488:	00004963 	.word	0x00004963
    548c:	20000ef0 	.word	0x20000ef0

00005490 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    5490:	b580      	push	{r7, lr}
    5492:	b084      	sub	sp, #16
    5494:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    5496:	2300      	movs	r3, #0
    5498:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    549a:	4a22      	ldr	r2, [pc, #136]	; (5524 <_usb_d_dev_lpmsusp+0x94>)
    549c:	4b22      	ldr	r3, [pc, #136]	; (5528 <_usb_d_dev_lpmsusp+0x98>)
    549e:	0011      	movs	r1, r2
    54a0:	0018      	movs	r0, r3
    54a2:	4b22      	ldr	r3, [pc, #136]	; (552c <_usb_d_dev_lpmsusp+0x9c>)
    54a4:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    54a6:	4a1f      	ldr	r2, [pc, #124]	; (5524 <_usb_d_dev_lpmsusp+0x94>)
    54a8:	4b1f      	ldr	r3, [pc, #124]	; (5528 <_usb_d_dev_lpmsusp+0x98>)
    54aa:	0011      	movs	r1, r2
    54ac:	0018      	movs	r0, r3
    54ae:	4b20      	ldr	r3, [pc, #128]	; (5530 <_usb_d_dev_lpmsusp+0xa0>)
    54b0:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    54b2:	4b1d      	ldr	r3, [pc, #116]	; (5528 <_usb_d_dev_lpmsusp+0x98>)
    54b4:	2170      	movs	r1, #112	; 0x70
    54b6:	0018      	movs	r0, r3
    54b8:	4b1e      	ldr	r3, [pc, #120]	; (5534 <_usb_d_dev_lpmsusp+0xa4>)
    54ba:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    54bc:	230f      	movs	r3, #15
    54be:	18fb      	adds	r3, r7, r3
    54c0:	2200      	movs	r2, #0
    54c2:	701a      	strb	r2, [r3, #0]
    54c4:	e01e      	b.n	5504 <_usb_d_dev_lpmsusp+0x74>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    54c6:	230f      	movs	r3, #15
    54c8:	18fb      	adds	r3, r7, r3
    54ca:	781b      	ldrb	r3, [r3, #0]
    54cc:	015a      	lsls	r2, r3, #5
    54ce:	4b1a      	ldr	r3, [pc, #104]	; (5538 <_usb_d_dev_lpmsusp+0xa8>)
    54d0:	18d3      	adds	r3, r2, r3
    54d2:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    54d4:	687b      	ldr	r3, [r7, #4]
    54d6:	891b      	ldrh	r3, [r3, #8]
    54d8:	071b      	lsls	r3, r3, #28
    54da:	0f1b      	lsrs	r3, r3, #28
    54dc:	b2db      	uxtb	r3, r3
    54de:	2b03      	cmp	r3, #3
    54e0:	d109      	bne.n	54f6 <_usb_d_dev_lpmsusp+0x66>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    54e2:	687b      	ldr	r3, [r7, #4]
    54e4:	891b      	ldrh	r3, [r3, #8]
    54e6:	045b      	lsls	r3, r3, #17
    54e8:	0d5b      	lsrs	r3, r3, #21
    54ea:	b29b      	uxth	r3, r3
    54ec:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    54ee:	687b      	ldr	r3, [r7, #4]
    54f0:	2200      	movs	r2, #0
    54f2:	811a      	strh	r2, [r3, #8]
			break;
    54f4:	e00b      	b.n	550e <_usb_d_dev_lpmsusp+0x7e>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    54f6:	230f      	movs	r3, #15
    54f8:	18fb      	adds	r3, r7, r3
    54fa:	781a      	ldrb	r2, [r3, #0]
    54fc:	230f      	movs	r3, #15
    54fe:	18fb      	adds	r3, r7, r3
    5500:	3201      	adds	r2, #1
    5502:	701a      	strb	r2, [r3, #0]
    5504:	230f      	movs	r3, #15
    5506:	18fb      	adds	r3, r7, r3
    5508:	781b      	ldrb	r3, [r3, #0]
    550a:	2b06      	cmp	r3, #6
    550c:	d9db      	bls.n	54c6 <_usb_d_dev_lpmsusp+0x36>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    550e:	4b0b      	ldr	r3, [pc, #44]	; (553c <_usb_d_dev_lpmsusp+0xac>)
    5510:	685b      	ldr	r3, [r3, #4]
    5512:	68ba      	ldr	r2, [r7, #8]
    5514:	0011      	movs	r1, r2
    5516:	2003      	movs	r0, #3
    5518:	4798      	blx	r3
}
    551a:	46c0      	nop			; (mov r8, r8)
    551c:	46bd      	mov	sp, r7
    551e:	b004      	add	sp, #16
    5520:	bd80      	pop	{r7, pc}
    5522:	46c0      	nop			; (mov r8, r8)
    5524:	00000201 	.word	0x00000201
    5528:	41005000 	.word	0x41005000
    552c:	00004963 	.word	0x00004963
    5530:	000049b5 	.word	0x000049b5
    5534:	00004981 	.word	0x00004981
    5538:	20001058 	.word	0x20001058
    553c:	20000ef0 	.word	0x20000ef0

00005540 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    5540:	b580      	push	{r7, lr}
    5542:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    5544:	4b06      	ldr	r3, [pc, #24]	; (5560 <_usb_d_dev_ramerr+0x20>)
    5546:	2180      	movs	r1, #128	; 0x80
    5548:	0018      	movs	r0, r3
    554a:	4b06      	ldr	r3, [pc, #24]	; (5564 <_usb_d_dev_ramerr+0x24>)
    554c:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    554e:	4b06      	ldr	r3, [pc, #24]	; (5568 <_usb_d_dev_ramerr+0x28>)
    5550:	685b      	ldr	r3, [r3, #4]
    5552:	2100      	movs	r1, #0
    5554:	2005      	movs	r0, #5
    5556:	4798      	blx	r3
}
    5558:	46c0      	nop			; (mov r8, r8)
    555a:	46bd      	mov	sp, r7
    555c:	bd80      	pop	{r7, pc}
    555e:	46c0      	nop			; (mov r8, r8)
    5560:	41005000 	.word	0x41005000
    5564:	00004963 	.word	0x00004963
    5568:	20000ef0 	.word	0x20000ef0

0000556c <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    556c:	b580      	push	{r7, lr}
    556e:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    5570:	4b0d      	ldr	r3, [pc, #52]	; (55a8 <_usb_d_dev_wakeup+0x3c>)
    5572:	2170      	movs	r1, #112	; 0x70
    5574:	0018      	movs	r0, r3
    5576:	4b0d      	ldr	r3, [pc, #52]	; (55ac <_usb_d_dev_wakeup+0x40>)
    5578:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    557a:	4b0b      	ldr	r3, [pc, #44]	; (55a8 <_usb_d_dev_wakeup+0x3c>)
    557c:	2170      	movs	r1, #112	; 0x70
    557e:	0018      	movs	r0, r3
    5580:	4b0b      	ldr	r3, [pc, #44]	; (55b0 <_usb_d_dev_wakeup+0x44>)
    5582:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    5584:	4a0b      	ldr	r2, [pc, #44]	; (55b4 <_usb_d_dev_wakeup+0x48>)
    5586:	4b08      	ldr	r3, [pc, #32]	; (55a8 <_usb_d_dev_wakeup+0x3c>)
    5588:	0011      	movs	r1, r2
    558a:	0018      	movs	r0, r3
    558c:	4b0a      	ldr	r3, [pc, #40]	; (55b8 <_usb_d_dev_wakeup+0x4c>)
    558e:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    5590:	2000      	movs	r0, #0
    5592:	4b0a      	ldr	r3, [pc, #40]	; (55bc <_usb_d_dev_wakeup+0x50>)
    5594:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    5596:	4b0a      	ldr	r3, [pc, #40]	; (55c0 <_usb_d_dev_wakeup+0x54>)
    5598:	685b      	ldr	r3, [r3, #4]
    559a:	2100      	movs	r1, #0
    559c:	2002      	movs	r0, #2
    559e:	4798      	blx	r3
}
    55a0:	46c0      	nop			; (mov r8, r8)
    55a2:	46bd      	mov	sp, r7
    55a4:	bd80      	pop	{r7, pc}
    55a6:	46c0      	nop			; (mov r8, r8)
    55a8:	41005000 	.word	0x41005000
    55ac:	00004963 	.word	0x00004963
    55b0:	000049b5 	.word	0x000049b5
    55b4:	00000201 	.word	0x00000201
    55b8:	00004981 	.word	0x00004981
    55bc:	00004c71 	.word	0x00004c71
    55c0:	20000ef0 	.word	0x20000ef0

000055c4 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    55c4:	b580      	push	{r7, lr}
    55c6:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    55c8:	4b0f      	ldr	r3, [pc, #60]	; (5608 <_usb_d_dev_reset+0x44>)
    55ca:	2200      	movs	r2, #0
    55cc:	2100      	movs	r1, #0
    55ce:	0018      	movs	r0, r3
    55d0:	4b0e      	ldr	r3, [pc, #56]	; (560c <_usb_d_dev_reset+0x48>)
    55d2:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    55d4:	4b0c      	ldr	r3, [pc, #48]	; (5608 <_usb_d_dev_reset+0x44>)
    55d6:	2108      	movs	r1, #8
    55d8:	0018      	movs	r0, r3
    55da:	4b0d      	ldr	r3, [pc, #52]	; (5610 <_usb_d_dev_reset+0x4c>)
    55dc:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    55de:	4b0a      	ldr	r3, [pc, #40]	; (5608 <_usb_d_dev_reset+0x44>)
    55e0:	2170      	movs	r1, #112	; 0x70
    55e2:	0018      	movs	r0, r3
    55e4:	4b0b      	ldr	r3, [pc, #44]	; (5614 <_usb_d_dev_reset+0x50>)
    55e6:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    55e8:	4a0b      	ldr	r2, [pc, #44]	; (5618 <_usb_d_dev_reset+0x54>)
    55ea:	4b07      	ldr	r3, [pc, #28]	; (5608 <_usb_d_dev_reset+0x44>)
    55ec:	0011      	movs	r1, r2
    55ee:	0018      	movs	r0, r3
    55f0:	4b0a      	ldr	r3, [pc, #40]	; (561c <_usb_d_dev_reset+0x58>)
    55f2:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    55f4:	4b0a      	ldr	r3, [pc, #40]	; (5620 <_usb_d_dev_reset+0x5c>)
    55f6:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    55f8:	4b0a      	ldr	r3, [pc, #40]	; (5624 <_usb_d_dev_reset+0x60>)
    55fa:	685b      	ldr	r3, [r3, #4]
    55fc:	2100      	movs	r1, #0
    55fe:	2001      	movs	r0, #1
    5600:	4798      	blx	r3
}
    5602:	46c0      	nop			; (mov r8, r8)
    5604:	46bd      	mov	sp, r7
    5606:	bd80      	pop	{r7, pc}
    5608:	41005000 	.word	0x41005000
    560c:	000048f9 	.word	0x000048f9
    5610:	00004963 	.word	0x00004963
    5614:	000049b5 	.word	0x000049b5
    5618:	00000201 	.word	0x00000201
    561c:	00004981 	.word	0x00004981
    5620:	00006405 	.word	0x00006405
    5624:	20000ef0 	.word	0x20000ef0

00005628 <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    5628:	b580      	push	{r7, lr}
    562a:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    562c:	4a0c      	ldr	r2, [pc, #48]	; (5660 <_usb_d_dev_suspend+0x38>)
    562e:	4b0d      	ldr	r3, [pc, #52]	; (5664 <_usb_d_dev_suspend+0x3c>)
    5630:	0011      	movs	r1, r2
    5632:	0018      	movs	r0, r3
    5634:	4b0c      	ldr	r3, [pc, #48]	; (5668 <_usb_d_dev_suspend+0x40>)
    5636:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    5638:	4a09      	ldr	r2, [pc, #36]	; (5660 <_usb_d_dev_suspend+0x38>)
    563a:	4b0a      	ldr	r3, [pc, #40]	; (5664 <_usb_d_dev_suspend+0x3c>)
    563c:	0011      	movs	r1, r2
    563e:	0018      	movs	r0, r3
    5640:	4b0a      	ldr	r3, [pc, #40]	; (566c <_usb_d_dev_suspend+0x44>)
    5642:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    5644:	4b07      	ldr	r3, [pc, #28]	; (5664 <_usb_d_dev_suspend+0x3c>)
    5646:	2170      	movs	r1, #112	; 0x70
    5648:	0018      	movs	r0, r3
    564a:	4b09      	ldr	r3, [pc, #36]	; (5670 <_usb_d_dev_suspend+0x48>)
    564c:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    564e:	4b09      	ldr	r3, [pc, #36]	; (5674 <_usb_d_dev_suspend+0x4c>)
    5650:	685b      	ldr	r3, [r3, #4]
    5652:	2100      	movs	r1, #0
    5654:	2004      	movs	r0, #4
    5656:	4798      	blx	r3
}
    5658:	46c0      	nop			; (mov r8, r8)
    565a:	46bd      	mov	sp, r7
    565c:	bd80      	pop	{r7, pc}
    565e:	46c0      	nop			; (mov r8, r8)
    5660:	00000201 	.word	0x00000201
    5664:	41005000 	.word	0x41005000
    5668:	00004963 	.word	0x00004963
    566c:	000049b5 	.word	0x000049b5
    5670:	00004981 	.word	0x00004981
    5674:	20000ef0 	.word	0x20000ef0

00005678 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    5678:	b590      	push	{r4, r7, lr}
    567a:	b083      	sub	sp, #12
    567c:	af00      	add	r7, sp, #0
	bool     rc    = true;
    567e:	1dfb      	adds	r3, r7, #7
    5680:	2201      	movs	r2, #1
    5682:	701a      	strb	r2, [r3, #0]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    5684:	1d3c      	adds	r4, r7, #4
    5686:	4b26      	ldr	r3, [pc, #152]	; (5720 <_usb_d_dev_handle_nep+0xa8>)
    5688:	0018      	movs	r0, r3
    568a:	4b26      	ldr	r3, [pc, #152]	; (5724 <_usb_d_dev_handle_nep+0xac>)
    568c:	4798      	blx	r3
    568e:	0003      	movs	r3, r0
    5690:	8023      	strh	r3, [r4, #0]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    5692:	4b23      	ldr	r3, [pc, #140]	; (5720 <_usb_d_dev_handle_nep+0xa8>)
    5694:	0018      	movs	r0, r3
    5696:	4b24      	ldr	r3, [pc, #144]	; (5728 <_usb_d_dev_handle_nep+0xb0>)
    5698:	4798      	blx	r3
    569a:	0003      	movs	r3, r0
    569c:	0019      	movs	r1, r3
    569e:	1d3b      	adds	r3, r7, #4
    56a0:	1d3a      	adds	r2, r7, #4
    56a2:	8812      	ldrh	r2, [r2, #0]
    56a4:	400a      	ands	r2, r1
    56a6:	801a      	strh	r2, [r3, #0]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    56a8:	1d3b      	adds	r3, r7, #4
    56aa:	881b      	ldrh	r3, [r3, #0]
    56ac:	2204      	movs	r2, #4
    56ae:	4013      	ands	r3, r2
    56b0:	d003      	beq.n	56ba <_usb_d_dev_handle_nep+0x42>
		_usb_d_dev_sof();
    56b2:	4b1e      	ldr	r3, [pc, #120]	; (572c <_usb_d_dev_handle_nep+0xb4>)
    56b4:	4798      	blx	r3
		return true;
    56b6:	2301      	movs	r3, #1
    56b8:	e02d      	b.n	5716 <_usb_d_dev_handle_nep+0x9e>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    56ba:	1d3b      	adds	r3, r7, #4
    56bc:	881a      	ldrh	r2, [r3, #0]
    56be:	2380      	movs	r3, #128	; 0x80
    56c0:	009b      	lsls	r3, r3, #2
    56c2:	4013      	ands	r3, r2
    56c4:	d002      	beq.n	56cc <_usb_d_dev_handle_nep+0x54>
		_usb_d_dev_lpmsusp();
    56c6:	4b1a      	ldr	r3, [pc, #104]	; (5730 <_usb_d_dev_handle_nep+0xb8>)
    56c8:	4798      	blx	r3
    56ca:	e022      	b.n	5712 <_usb_d_dev_handle_nep+0x9a>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    56cc:	1d3b      	adds	r3, r7, #4
    56ce:	881b      	ldrh	r3, [r3, #0]
    56d0:	2280      	movs	r2, #128	; 0x80
    56d2:	4013      	ands	r3, r2
    56d4:	d002      	beq.n	56dc <_usb_d_dev_handle_nep+0x64>
		_usb_d_dev_ramerr();
    56d6:	4b17      	ldr	r3, [pc, #92]	; (5734 <_usb_d_dev_handle_nep+0xbc>)
    56d8:	4798      	blx	r3
    56da:	e01a      	b.n	5712 <_usb_d_dev_handle_nep+0x9a>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    56dc:	1d3b      	adds	r3, r7, #4
    56de:	881b      	ldrh	r3, [r3, #0]
    56e0:	2270      	movs	r2, #112	; 0x70
    56e2:	4013      	ands	r3, r2
    56e4:	d002      	beq.n	56ec <_usb_d_dev_handle_nep+0x74>
		_usb_d_dev_wakeup();
    56e6:	4b14      	ldr	r3, [pc, #80]	; (5738 <_usb_d_dev_handle_nep+0xc0>)
    56e8:	4798      	blx	r3
    56ea:	e012      	b.n	5712 <_usb_d_dev_handle_nep+0x9a>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    56ec:	1d3b      	adds	r3, r7, #4
    56ee:	881b      	ldrh	r3, [r3, #0]
    56f0:	2208      	movs	r2, #8
    56f2:	4013      	ands	r3, r2
    56f4:	d002      	beq.n	56fc <_usb_d_dev_handle_nep+0x84>
		_usb_d_dev_reset();
    56f6:	4b11      	ldr	r3, [pc, #68]	; (573c <_usb_d_dev_handle_nep+0xc4>)
    56f8:	4798      	blx	r3
    56fa:	e00a      	b.n	5712 <_usb_d_dev_handle_nep+0x9a>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    56fc:	1d3b      	adds	r3, r7, #4
    56fe:	881b      	ldrh	r3, [r3, #0]
    5700:	2201      	movs	r2, #1
    5702:	4013      	ands	r3, r2
    5704:	d002      	beq.n	570c <_usb_d_dev_handle_nep+0x94>
		_usb_d_dev_suspend();
    5706:	4b0e      	ldr	r3, [pc, #56]	; (5740 <_usb_d_dev_handle_nep+0xc8>)
    5708:	4798      	blx	r3
    570a:	e002      	b.n	5712 <_usb_d_dev_handle_nep+0x9a>
	} else {
		rc = false;
    570c:	1dfb      	adds	r3, r7, #7
    570e:	2200      	movs	r2, #0
    5710:	701a      	strb	r2, [r3, #0]
	}
	return rc;
    5712:	1dfb      	adds	r3, r7, #7
    5714:	781b      	ldrb	r3, [r3, #0]
}
    5716:	0018      	movs	r0, r3
    5718:	46bd      	mov	sp, r7
    571a:	b003      	add	sp, #12
    571c:	bd90      	pop	{r4, r7, pc}
    571e:	46c0      	nop			; (mov r8, r8)
    5720:	41005000 	.word	0x41005000
    5724:	0000494d 	.word	0x0000494d
    5728:	0000499f 	.word	0x0000499f
    572c:	00005469 	.word	0x00005469
    5730:	00005491 	.word	0x00005491
    5734:	00005541 	.word	0x00005541
    5738:	0000556d 	.word	0x0000556d
    573c:	000055c5 	.word	0x000055c5
    5740:	00005629 	.word	0x00005629

00005744 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    5744:	b590      	push	{r4, r7, lr}
    5746:	b089      	sub	sp, #36	; 0x24
    5748:	af00      	add	r7, sp, #0
    574a:	6078      	str	r0, [r7, #4]
    574c:	000a      	movs	r2, r1
    574e:	1cfb      	adds	r3, r7, #3
    5750:	701a      	strb	r2, [r3, #0]
	Usb *              hw          = USB;
    5752:	4b98      	ldr	r3, [pc, #608]	; (59b4 <_usb_d_dev_in_next+0x270>)
    5754:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    5756:	687b      	ldr	r3, [r7, #4]
    5758:	7c9a      	ldrb	r2, [r3, #18]
    575a:	2317      	movs	r3, #23
    575c:	18fb      	adds	r3, r7, r3
    575e:	210f      	movs	r1, #15
    5760:	400a      	ands	r2, r1
    5762:	701a      	strb	r2, [r3, #0]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    5764:	2317      	movs	r3, #23
    5766:	18fb      	adds	r3, r7, r3
    5768:	781b      	ldrb	r3, [r3, #0]
    576a:	015a      	lsls	r2, r3, #5
    576c:	4b92      	ldr	r3, [pc, #584]	; (59b8 <_usb_d_dev_in_next+0x274>)
    576e:	18d3      	adds	r3, r2, r3
    5770:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    5772:	1cfb      	adds	r3, r7, #3
    5774:	781b      	ldrb	r3, [r3, #0]
    5776:	2b00      	cmp	r3, #0
    5778:	d007      	beq.n	578a <_usb_d_dev_in_next+0x46>
    577a:	693b      	ldr	r3, [r7, #16]
    577c:	3310      	adds	r3, #16
    577e:	685b      	ldr	r3, [r3, #4]
    5780:	049b      	lsls	r3, r3, #18
    5782:	0c9b      	lsrs	r3, r3, #18
    5784:	b29b      	uxth	r3, r3
    5786:	001a      	movs	r2, r3
    5788:	e000      	b.n	578c <_usb_d_dev_in_next+0x48>
    578a:	2200      	movs	r2, #0
    578c:	230e      	movs	r3, #14
    578e:	18fb      	adds	r3, r7, r3
    5790:	801a      	strh	r2, [r3, #0]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    5792:	687b      	ldr	r3, [r7, #4]
    5794:	8a1b      	ldrh	r3, [r3, #16]
    5796:	4a89      	ldr	r2, [pc, #548]	; (59bc <_usb_d_dev_in_next+0x278>)
    5798:	4293      	cmp	r3, r2
    579a:	d103      	bne.n	57a4 <_usb_d_dev_in_next+0x60>
    579c:	687b      	ldr	r3, [r7, #4]
    579e:	8a1b      	ldrh	r3, [r3, #16]
    57a0:	b21b      	sxth	r3, r3
    57a2:	e004      	b.n	57ae <_usb_d_dev_in_next+0x6a>
    57a4:	687b      	ldr	r3, [r7, #4]
    57a6:	8a1b      	ldrh	r3, [r3, #16]
    57a8:	3b01      	subs	r3, #1
    57aa:	b29b      	uxth	r3, r3
    57ac:	b21b      	sxth	r3, r3
    57ae:	220e      	movs	r2, #14
    57b0:	18ba      	adds	r2, r7, r2
    57b2:	2100      	movs	r1, #0
    57b4:	5e52      	ldrsh	r2, [r2, r1]
    57b6:	4013      	ands	r3, r2
    57b8:	b21a      	sxth	r2, r3
    57ba:	230c      	movs	r3, #12
    57bc:	18fb      	adds	r3, r7, r3
    57be:	801a      	strh	r2, [r3, #0]
	uint8_t            inten    = 0;
    57c0:	231d      	movs	r3, #29
    57c2:	18fb      	adds	r3, r7, r3
    57c4:	2200      	movs	r2, #0
    57c6:	701a      	strb	r2, [r3, #0]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    57c8:	687b      	ldr	r3, [r7, #4]
    57ca:	7cdb      	ldrb	r3, [r3, #19]
    57cc:	2207      	movs	r2, #7
    57ce:	4013      	ands	r3, r2
    57d0:	b2da      	uxtb	r2, r3
    57d2:	230b      	movs	r3, #11
    57d4:	18fb      	adds	r3, r7, r3
    57d6:	3a01      	subs	r2, #1
    57d8:	4251      	negs	r1, r2
    57da:	414a      	adcs	r2, r1
    57dc:	701a      	strb	r2, [r3, #0]

	if (isr) {
    57de:	1cfb      	adds	r3, r7, #3
    57e0:	781b      	ldrb	r3, [r3, #0]
    57e2:	2b00      	cmp	r3, #0
    57e4:	d006      	beq.n	57f4 <_usb_d_dev_in_next+0xb0>
		_usbd_ep_ack_io_cpt(epn, 1);
    57e6:	2317      	movs	r3, #23
    57e8:	18fb      	adds	r3, r7, r3
    57ea:	781b      	ldrb	r3, [r3, #0]
    57ec:	2101      	movs	r1, #1
    57ee:	0018      	movs	r0, r3
    57f0:	4b73      	ldr	r3, [pc, #460]	; (59c0 <_usb_d_dev_in_next+0x27c>)
    57f2:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    57f4:	687b      	ldr	r3, [r7, #4]
    57f6:	689a      	ldr	r2, [r3, #8]
    57f8:	230e      	movs	r3, #14
    57fa:	18fb      	adds	r3, r7, r3
    57fc:	881b      	ldrh	r3, [r3, #0]
    57fe:	18d2      	adds	r2, r2, r3
    5800:	687b      	ldr	r3, [r7, #4]
    5802:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    5804:	687b      	ldr	r3, [r7, #4]
    5806:	689a      	ldr	r2, [r3, #8]
    5808:	687b      	ldr	r3, [r7, #4]
    580a:	685b      	ldr	r3, [r3, #4]
    580c:	429a      	cmp	r2, r3
    580e:	d258      	bcs.n	58c2 <_usb_d_dev_in_next+0x17e>
		trans_next = ept->trans_size - ept->trans_count;
    5810:	687b      	ldr	r3, [r7, #4]
    5812:	685b      	ldr	r3, [r3, #4]
    5814:	b299      	uxth	r1, r3
    5816:	687b      	ldr	r3, [r7, #4]
    5818:	689b      	ldr	r3, [r3, #8]
    581a:	b29a      	uxth	r2, r3
    581c:	231e      	movs	r3, #30
    581e:	18fb      	adds	r3, r7, r3
    5820:	1a8a      	subs	r2, r1, r2
    5822:	801a      	strh	r2, [r3, #0]
		if (ept->flags.bits.use_cache) {
    5824:	687b      	ldr	r3, [r7, #4]
    5826:	7cdb      	ldrb	r3, [r3, #19]
    5828:	2220      	movs	r2, #32
    582a:	4013      	ands	r3, r2
    582c:	b2db      	uxtb	r3, r3
    582e:	2b00      	cmp	r3, #0
    5830:	d023      	beq.n	587a <_usb_d_dev_in_next+0x136>
			if (trans_next > ept->size) {
    5832:	687b      	ldr	r3, [r7, #4]
    5834:	8a1b      	ldrh	r3, [r3, #16]
    5836:	221e      	movs	r2, #30
    5838:	18ba      	adds	r2, r7, r2
    583a:	8812      	ldrh	r2, [r2, #0]
    583c:	429a      	cmp	r2, r3
    583e:	d904      	bls.n	584a <_usb_d_dev_in_next+0x106>
				trans_next = ept->size;
    5840:	231e      	movs	r3, #30
    5842:	18fb      	adds	r3, r7, r3
    5844:	687a      	ldr	r2, [r7, #4]
    5846:	8a12      	ldrh	r2, [r2, #16]
    5848:	801a      	strh	r2, [r3, #0]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    584a:	687b      	ldr	r3, [r7, #4]
    584c:	68d8      	ldr	r0, [r3, #12]
    584e:	687b      	ldr	r3, [r7, #4]
    5850:	681a      	ldr	r2, [r3, #0]
    5852:	687b      	ldr	r3, [r7, #4]
    5854:	689b      	ldr	r3, [r3, #8]
    5856:	18d1      	adds	r1, r2, r3
    5858:	231e      	movs	r3, #30
    585a:	18fb      	adds	r3, r7, r3
    585c:	881b      	ldrh	r3, [r3, #0]
    585e:	001a      	movs	r2, r3
    5860:	4b58      	ldr	r3, [pc, #352]	; (59c4 <_usb_d_dev_in_next+0x280>)
    5862:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    5864:	687b      	ldr	r3, [r7, #4]
    5866:	68db      	ldr	r3, [r3, #12]
    5868:	001a      	movs	r2, r3
    586a:	2317      	movs	r3, #23
    586c:	18fb      	adds	r3, r7, r3
    586e:	781b      	ldrb	r3, [r3, #0]
    5870:	2101      	movs	r1, #1
    5872:	0018      	movs	r0, r3
    5874:	4b54      	ldr	r3, [pc, #336]	; (59c8 <_usb_d_dev_in_next+0x284>)
    5876:	4798      	blx	r3
    5878:	e018      	b.n	58ac <_usb_d_dev_in_next+0x168>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    587a:	231e      	movs	r3, #30
    587c:	18fb      	adds	r3, r7, r3
    587e:	881a      	ldrh	r2, [r3, #0]
    5880:	2380      	movs	r3, #128	; 0x80
    5882:	019b      	lsls	r3, r3, #6
    5884:	429a      	cmp	r2, r3
    5886:	d904      	bls.n	5892 <_usb_d_dev_in_next+0x14e>
				trans_next = USB_D_DEV_TRANS_MAX;
    5888:	231e      	movs	r3, #30
    588a:	18fb      	adds	r3, r7, r3
    588c:	2280      	movs	r2, #128	; 0x80
    588e:	0192      	lsls	r2, r2, #6
    5890:	801a      	strh	r2, [r3, #0]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    5892:	687b      	ldr	r3, [r7, #4]
    5894:	681a      	ldr	r2, [r3, #0]
    5896:	687b      	ldr	r3, [r7, #4]
    5898:	689b      	ldr	r3, [r3, #8]
    589a:	18d3      	adds	r3, r2, r3
    589c:	001a      	movs	r2, r3
    589e:	2317      	movs	r3, #23
    58a0:	18fb      	adds	r3, r7, r3
    58a2:	781b      	ldrb	r3, [r3, #0]
    58a4:	2101      	movs	r1, #1
    58a6:	0018      	movs	r0, r3
    58a8:	4b47      	ldr	r3, [pc, #284]	; (59c8 <_usb_d_dev_in_next+0x284>)
    58aa:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    58ac:	231e      	movs	r3, #30
    58ae:	18fb      	adds	r3, r7, r3
    58b0:	881a      	ldrh	r2, [r3, #0]
    58b2:	2317      	movs	r3, #23
    58b4:	18fb      	adds	r3, r7, r3
    58b6:	7818      	ldrb	r0, [r3, #0]
    58b8:	2300      	movs	r3, #0
    58ba:	2101      	movs	r1, #1
    58bc:	4c43      	ldr	r4, [pc, #268]	; (59cc <_usb_d_dev_in_next+0x288>)
    58be:	47a0      	blx	r4
		goto _in_tx_exec;
    58c0:	e04b      	b.n	595a <_usb_d_dev_in_next+0x216>
	} else if (ept->flags.bits.need_zlp) {
    58c2:	687b      	ldr	r3, [r7, #4]
    58c4:	7cdb      	ldrb	r3, [r3, #19]
    58c6:	2210      	movs	r2, #16
    58c8:	4013      	ands	r3, r2
    58ca:	b2db      	uxtb	r3, r3
    58cc:	2b00      	cmp	r3, #0
    58ce:	d00d      	beq.n	58ec <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.need_zlp = 0;
    58d0:	687b      	ldr	r3, [r7, #4]
    58d2:	7cda      	ldrb	r2, [r3, #19]
    58d4:	2110      	movs	r1, #16
    58d6:	438a      	bics	r2, r1
    58d8:	74da      	strb	r2, [r3, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    58da:	2317      	movs	r3, #23
    58dc:	18fb      	adds	r3, r7, r3
    58de:	7818      	ldrb	r0, [r3, #0]
    58e0:	2300      	movs	r3, #0
    58e2:	2200      	movs	r2, #0
    58e4:	2101      	movs	r1, #1
    58e6:	4c39      	ldr	r4, [pc, #228]	; (59cc <_usb_d_dev_in_next+0x288>)
    58e8:	47a0      	blx	r4
		goto _in_tx_exec;
    58ea:	e036      	b.n	595a <_usb_d_dev_in_next+0x216>
	}
	/* Complete. */
	if (is_ctrl) {
    58ec:	230b      	movs	r3, #11
    58ee:	18fb      	adds	r3, r7, r3
    58f0:	781b      	ldrb	r3, [r3, #0]
    58f2:	2b00      	cmp	r3, #0
    58f4:	d008      	beq.n	5908 <_usb_d_dev_in_next+0x1c4>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    58f6:	2317      	movs	r3, #23
    58f8:	18fb      	adds	r3, r7, r3
    58fa:	7819      	ldrb	r1, [r3, #0]
    58fc:	69bb      	ldr	r3, [r7, #24]
    58fe:	224b      	movs	r2, #75	; 0x4b
    5900:	0018      	movs	r0, r3
    5902:	4b33      	ldr	r3, [pc, #204]	; (59d0 <_usb_d_dev_in_next+0x28c>)
    5904:	4798      	blx	r3
    5906:	e007      	b.n	5918 <_usb_d_dev_in_next+0x1d4>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    5908:	2317      	movs	r3, #23
    590a:	18fb      	adds	r3, r7, r3
    590c:	7819      	ldrb	r1, [r3, #0]
    590e:	69bb      	ldr	r3, [r7, #24]
    5910:	224a      	movs	r2, #74	; 0x4a
    5912:	0018      	movs	r0, r3
    5914:	4b2e      	ldr	r3, [pc, #184]	; (59d0 <_usb_d_dev_in_next+0x28c>)
    5916:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    5918:	687b      	ldr	r3, [r7, #4]
    591a:	8a1b      	ldrh	r3, [r3, #16]
    591c:	220c      	movs	r2, #12
    591e:	18ba      	adds	r2, r7, r2
    5920:	8812      	ldrh	r2, [r2, #0]
    5922:	429a      	cmp	r2, r3
    5924:	d113      	bne.n	594e <_usb_d_dev_in_next+0x20a>
		ept->flags.bits.is_busy = 0;
    5926:	687b      	ldr	r3, [r7, #4]
    5928:	7cda      	ldrb	r2, [r3, #19]
    592a:	2140      	movs	r1, #64	; 0x40
    592c:	438a      	bics	r2, r1
    592e:	74da      	strb	r2, [r3, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    5930:	4b28      	ldr	r3, [pc, #160]	; (59d4 <_usb_d_dev_in_next+0x290>)
    5932:	68da      	ldr	r2, [r3, #12]
    5934:	687b      	ldr	r3, [r7, #4]
    5936:	7c98      	ldrb	r0, [r3, #18]
    5938:	687b      	ldr	r3, [r7, #4]
    593a:	689b      	ldr	r3, [r3, #8]
    593c:	0019      	movs	r1, r3
    593e:	4790      	blx	r2
    5940:	1e03      	subs	r3, r0, #0
    5942:	d132      	bne.n	59aa <_usb_d_dev_in_next+0x266>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    5944:	687b      	ldr	r3, [r7, #4]
    5946:	7cda      	ldrb	r2, [r3, #19]
    5948:	2140      	movs	r1, #64	; 0x40
    594a:	430a      	orrs	r2, r1
    594c:	74da      	strb	r2, [r3, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    594e:	687b      	ldr	r3, [r7, #4]
    5950:	2100      	movs	r1, #0
    5952:	0018      	movs	r0, r3
    5954:	4b20      	ldr	r3, [pc, #128]	; (59d8 <_usb_d_dev_in_next+0x294>)
    5956:	4798      	blx	r3
	return;
    5958:	e028      	b.n	59ac <_usb_d_dev_in_next+0x268>

_in_tx_exec:
	if (!isr) {
    595a:	1cfb      	adds	r3, r7, #3
    595c:	781b      	ldrb	r3, [r3, #0]
    595e:	2201      	movs	r2, #1
    5960:	4053      	eors	r3, r2
    5962:	b2db      	uxtb	r3, r3
    5964:	2b00      	cmp	r3, #0
    5966:	d017      	beq.n	5998 <_usb_d_dev_in_next+0x254>
		if (is_ctrl) {
    5968:	230b      	movs	r3, #11
    596a:	18fb      	adds	r3, r7, r3
    596c:	781b      	ldrb	r3, [r3, #0]
    596e:	2b00      	cmp	r3, #0
    5970:	d004      	beq.n	597c <_usb_d_dev_in_next+0x238>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    5972:	231d      	movs	r3, #29
    5974:	18fb      	adds	r3, r7, r3
    5976:	224e      	movs	r2, #78	; 0x4e
    5978:	701a      	strb	r2, [r3, #0]
    597a:	e003      	b.n	5984 <_usb_d_dev_in_next+0x240>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    597c:	231d      	movs	r3, #29
    597e:	18fb      	adds	r3, r7, r3
    5980:	224a      	movs	r2, #74	; 0x4a
    5982:	701a      	strb	r2, [r3, #0]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    5984:	231d      	movs	r3, #29
    5986:	18fb      	adds	r3, r7, r3
    5988:	781a      	ldrb	r2, [r3, #0]
    598a:	2317      	movs	r3, #23
    598c:	18fb      	adds	r3, r7, r3
    598e:	7819      	ldrb	r1, [r3, #0]
    5990:	69bb      	ldr	r3, [r7, #24]
    5992:	0018      	movs	r0, r3
    5994:	4b11      	ldr	r3, [pc, #68]	; (59dc <_usb_d_dev_in_next+0x298>)
    5996:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    5998:	2317      	movs	r3, #23
    599a:	18fb      	adds	r3, r7, r3
    599c:	781b      	ldrb	r3, [r3, #0]
    599e:	2201      	movs	r2, #1
    59a0:	2101      	movs	r1, #1
    59a2:	0018      	movs	r0, r3
    59a4:	4b0e      	ldr	r3, [pc, #56]	; (59e0 <_usb_d_dev_in_next+0x29c>)
    59a6:	4798      	blx	r3
    59a8:	e000      	b.n	59ac <_usb_d_dev_in_next+0x268>
			return;
    59aa:	46c0      	nop			; (mov r8, r8)
}
    59ac:	46bd      	mov	sp, r7
    59ae:	b009      	add	sp, #36	; 0x24
    59b0:	bd90      	pop	{r4, r7, pc}
    59b2:	46c0      	nop			; (mov r8, r8)
    59b4:	41005000 	.word	0x41005000
    59b8:	20001058 	.word	0x20001058
    59bc:	000003ff 	.word	0x000003ff
    59c0:	00004ff5 	.word	0x00004ff5
    59c4:	0000d195 	.word	0x0000d195
    59c8:	00005029 	.word	0x00005029
    59cc:	000051d5 	.word	0x000051d5
    59d0:	00004843 	.word	0x00004843
    59d4:	20000ef0 	.word	0x20000ef0
    59d8:	00006ea9 	.word	0x00006ea9
    59dc:	0000480d 	.word	0x0000480d
    59e0:	000052bd 	.word	0x000052bd

000059e4 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    59e4:	b590      	push	{r4, r7, lr}
    59e6:	b08b      	sub	sp, #44	; 0x2c
    59e8:	af00      	add	r7, sp, #0
    59ea:	6078      	str	r0, [r7, #4]
    59ec:	000a      	movs	r2, r1
    59ee:	1cfb      	adds	r3, r7, #3
    59f0:	701a      	strb	r2, [r3, #0]
	Usb *              hw         = USB;
    59f2:	4bc7      	ldr	r3, [pc, #796]	; (5d10 <_usb_d_dev_out_next+0x32c>)
    59f4:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    59f6:	687b      	ldr	r3, [r7, #4]
    59f8:	7c9a      	ldrb	r2, [r3, #18]
    59fa:	231f      	movs	r3, #31
    59fc:	18fb      	adds	r3, r7, r3
    59fe:	210f      	movs	r1, #15
    5a00:	400a      	ands	r2, r1
    5a02:	701a      	strb	r2, [r3, #0]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    5a04:	231f      	movs	r3, #31
    5a06:	18fb      	adds	r3, r7, r3
    5a08:	781b      	ldrb	r3, [r3, #0]
    5a0a:	015a      	lsls	r2, r3, #5
    5a0c:	4bc1      	ldr	r3, [pc, #772]	; (5d14 <_usb_d_dev_out_next+0x330>)
    5a0e:	18d3      	adds	r3, r2, r3
    5a10:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    5a12:	1cfb      	adds	r3, r7, #3
    5a14:	781b      	ldrb	r3, [r3, #0]
    5a16:	2b00      	cmp	r3, #0
    5a18:	d006      	beq.n	5a28 <_usb_d_dev_out_next+0x44>
    5a1a:	69bb      	ldr	r3, [r7, #24]
    5a1c:	685b      	ldr	r3, [r3, #4]
    5a1e:	011b      	lsls	r3, r3, #4
    5a20:	0c9b      	lsrs	r3, r3, #18
    5a22:	b29b      	uxth	r3, r3
    5a24:	001a      	movs	r2, r3
    5a26:	e000      	b.n	5a2a <_usb_d_dev_out_next+0x46>
    5a28:	2200      	movs	r2, #0
    5a2a:	2316      	movs	r3, #22
    5a2c:	18fb      	adds	r3, r7, r3
    5a2e:	801a      	strh	r2, [r3, #0]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    5a30:	1cfb      	adds	r3, r7, #3
    5a32:	781b      	ldrb	r3, [r3, #0]
    5a34:	2b00      	cmp	r3, #0
    5a36:	d006      	beq.n	5a46 <_usb_d_dev_out_next+0x62>
    5a38:	69bb      	ldr	r3, [r7, #24]
    5a3a:	685b      	ldr	r3, [r3, #4]
    5a3c:	049b      	lsls	r3, r3, #18
    5a3e:	0c9b      	lsrs	r3, r3, #18
    5a40:	b29b      	uxth	r3, r3
    5a42:	001a      	movs	r2, r3
    5a44:	e000      	b.n	5a48 <_usb_d_dev_out_next+0x64>
    5a46:	2200      	movs	r2, #0
    5a48:	2314      	movs	r3, #20
    5a4a:	18fb      	adds	r3, r7, r3
    5a4c:	801a      	strh	r2, [r3, #0]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    5a4e:	687b      	ldr	r3, [r7, #4]
    5a50:	8a1b      	ldrh	r3, [r3, #16]
    5a52:	4ab1      	ldr	r2, [pc, #708]	; (5d18 <_usb_d_dev_out_next+0x334>)
    5a54:	4293      	cmp	r3, r2
    5a56:	d004      	beq.n	5a62 <_usb_d_dev_out_next+0x7e>
    5a58:	687b      	ldr	r3, [r7, #4]
    5a5a:	8a1b      	ldrh	r3, [r3, #16]
    5a5c:	3b01      	subs	r3, #1
    5a5e:	b29a      	uxth	r2, r3
    5a60:	e000      	b.n	5a64 <_usb_d_dev_out_next+0x80>
    5a62:	4aad      	ldr	r2, [pc, #692]	; (5d18 <_usb_d_dev_out_next+0x334>)
    5a64:	2312      	movs	r3, #18
    5a66:	18fb      	adds	r3, r7, r3
    5a68:	801a      	strh	r2, [r3, #0]
	uint16_t           last_pkt   = last_trans & size_mask;
    5a6a:	2310      	movs	r3, #16
    5a6c:	18fb      	adds	r3, r7, r3
    5a6e:	2214      	movs	r2, #20
    5a70:	18ba      	adds	r2, r7, r2
    5a72:	2112      	movs	r1, #18
    5a74:	1879      	adds	r1, r7, r1
    5a76:	8812      	ldrh	r2, [r2, #0]
    5a78:	8809      	ldrh	r1, [r1, #0]
    5a7a:	400a      	ands	r2, r1
    5a7c:	801a      	strh	r2, [r3, #0]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    5a7e:	687b      	ldr	r3, [r7, #4]
    5a80:	7cdb      	ldrb	r3, [r3, #19]
    5a82:	2207      	movs	r2, #7
    5a84:	4013      	ands	r3, r2
    5a86:	b2da      	uxtb	r2, r3
    5a88:	230f      	movs	r3, #15
    5a8a:	18fb      	adds	r3, r7, r3
    5a8c:	3a01      	subs	r2, #1
    5a8e:	4251      	negs	r1, r2
    5a90:	414a      	adcs	r2, r1
    5a92:	701a      	strb	r2, [r3, #0]

	if (isr) {
    5a94:	1cfb      	adds	r3, r7, #3
    5a96:	781b      	ldrb	r3, [r3, #0]
    5a98:	2b00      	cmp	r3, #0
    5a9a:	d006      	beq.n	5aaa <_usb_d_dev_out_next+0xc6>
		_usbd_ep_ack_io_cpt(epn, 0);
    5a9c:	231f      	movs	r3, #31
    5a9e:	18fb      	adds	r3, r7, r3
    5aa0:	781b      	ldrb	r3, [r3, #0]
    5aa2:	2100      	movs	r1, #0
    5aa4:	0018      	movs	r0, r3
    5aa6:	4b9d      	ldr	r3, [pc, #628]	; (5d1c <_usb_d_dev_out_next+0x338>)
    5aa8:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    5aaa:	687b      	ldr	r3, [r7, #4]
    5aac:	7cdb      	ldrb	r3, [r3, #19]
    5aae:	2220      	movs	r2, #32
    5ab0:	4013      	ands	r3, r2
    5ab2:	b2db      	uxtb	r3, r3
    5ab4:	2b00      	cmp	r3, #0
    5ab6:	d026      	beq.n	5b06 <_usb_d_dev_out_next+0x122>
    5ab8:	687b      	ldr	r3, [r7, #4]
    5aba:	685b      	ldr	r3, [r3, #4]
    5abc:	2b00      	cmp	r3, #0
    5abe:	d022      	beq.n	5b06 <_usb_d_dev_out_next+0x122>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    5ac0:	687b      	ldr	r3, [r7, #4]
    5ac2:	685b      	ldr	r3, [r3, #4]
    5ac4:	b299      	uxth	r1, r3
    5ac6:	687b      	ldr	r3, [r7, #4]
    5ac8:	689b      	ldr	r3, [r3, #8]
    5aca:	b29a      	uxth	r2, r3
    5acc:	230c      	movs	r3, #12
    5ace:	18fb      	adds	r3, r7, r3
    5ad0:	1a8a      	subs	r2, r1, r2
    5ad2:	801a      	strh	r2, [r3, #0]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    5ad4:	687b      	ldr	r3, [r7, #4]
    5ad6:	681a      	ldr	r2, [r3, #0]
    5ad8:	687b      	ldr	r3, [r7, #4]
    5ada:	689b      	ldr	r3, [r3, #8]
    5adc:	18d0      	adds	r0, r2, r3
    5ade:	687b      	ldr	r3, [r7, #4]
    5ae0:	68d9      	ldr	r1, [r3, #12]
    5ae2:	230c      	movs	r3, #12
    5ae4:	18fa      	adds	r2, r7, r3
    5ae6:	2310      	movs	r3, #16
    5ae8:	18fb      	adds	r3, r7, r3
    5aea:	8812      	ldrh	r2, [r2, #0]
    5aec:	881b      	ldrh	r3, [r3, #0]
    5aee:	429a      	cmp	r2, r3
    5af0:	d903      	bls.n	5afa <_usb_d_dev_out_next+0x116>
    5af2:	2310      	movs	r3, #16
    5af4:	18fb      	adds	r3, r7, r3
    5af6:	881b      	ldrh	r3, [r3, #0]
    5af8:	e002      	b.n	5b00 <_usb_d_dev_out_next+0x11c>
    5afa:	230c      	movs	r3, #12
    5afc:	18fb      	adds	r3, r7, r3
    5afe:	881b      	ldrh	r3, [r3, #0]
    5b00:	001a      	movs	r2, r3
    5b02:	4b87      	ldr	r3, [pc, #540]	; (5d20 <_usb_d_dev_out_next+0x33c>)
    5b04:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    5b06:	687b      	ldr	r3, [r7, #4]
    5b08:	685b      	ldr	r3, [r3, #4]
    5b0a:	2b00      	cmp	r3, #0
    5b0c:	d125      	bne.n	5b5a <_usb_d_dev_out_next+0x176>
    5b0e:	687b      	ldr	r3, [r7, #4]
    5b10:	7cdb      	ldrb	r3, [r3, #19]
    5b12:	2210      	movs	r2, #16
    5b14:	4013      	ands	r3, r2
    5b16:	b2db      	uxtb	r3, r3
    5b18:	2b00      	cmp	r3, #0
    5b1a:	d01e      	beq.n	5b5a <_usb_d_dev_out_next+0x176>
		ept->flags.bits.need_zlp  = 0;
    5b1c:	687b      	ldr	r3, [r7, #4]
    5b1e:	7cda      	ldrb	r2, [r3, #19]
    5b20:	2110      	movs	r1, #16
    5b22:	438a      	bics	r2, r1
    5b24:	74da      	strb	r2, [r3, #19]
		ept->flags.bits.use_cache = 1;
    5b26:	687b      	ldr	r3, [r7, #4]
    5b28:	7cda      	ldrb	r2, [r3, #19]
    5b2a:	2120      	movs	r1, #32
    5b2c:	430a      	orrs	r2, r1
    5b2e:	74da      	strb	r2, [r3, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    5b30:	687b      	ldr	r3, [r7, #4]
    5b32:	68db      	ldr	r3, [r3, #12]
    5b34:	001a      	movs	r2, r3
    5b36:	231f      	movs	r3, #31
    5b38:	18fb      	adds	r3, r7, r3
    5b3a:	781b      	ldrb	r3, [r3, #0]
    5b3c:	2100      	movs	r1, #0
    5b3e:	0018      	movs	r0, r3
    5b40:	4b78      	ldr	r3, [pc, #480]	; (5d24 <_usb_d_dev_out_next+0x340>)
    5b42:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    5b44:	687b      	ldr	r3, [r7, #4]
    5b46:	8a1b      	ldrh	r3, [r3, #16]
    5b48:	001a      	movs	r2, r3
    5b4a:	231f      	movs	r3, #31
    5b4c:	18fb      	adds	r3, r7, r3
    5b4e:	7818      	ldrb	r0, [r3, #0]
    5b50:	2300      	movs	r3, #0
    5b52:	2100      	movs	r1, #0
    5b54:	4c74      	ldr	r4, [pc, #464]	; (5d28 <_usb_d_dev_out_next+0x344>)
    5b56:	47a0      	blx	r4
		goto _out_rx_exec;
    5b58:	e0c2      	b.n	5ce0 <_usb_d_dev_out_next+0x2fc>
	} else if (isr && last_pkt < ept->size) {
    5b5a:	1cfb      	adds	r3, r7, #3
    5b5c:	781b      	ldrb	r3, [r3, #0]
    5b5e:	2b00      	cmp	r3, #0
    5b60:	d014      	beq.n	5b8c <_usb_d_dev_out_next+0x1a8>
    5b62:	687b      	ldr	r3, [r7, #4]
    5b64:	8a1b      	ldrh	r3, [r3, #16]
    5b66:	2210      	movs	r2, #16
    5b68:	18ba      	adds	r2, r7, r2
    5b6a:	8812      	ldrh	r2, [r2, #0]
    5b6c:	429a      	cmp	r2, r3
    5b6e:	d20d      	bcs.n	5b8c <_usb_d_dev_out_next+0x1a8>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    5b70:	687b      	ldr	r3, [r7, #4]
    5b72:	7cda      	ldrb	r2, [r3, #19]
    5b74:	2110      	movs	r1, #16
    5b76:	438a      	bics	r2, r1
    5b78:	74da      	strb	r2, [r3, #19]
		ept->trans_count += last_trans;
    5b7a:	687b      	ldr	r3, [r7, #4]
    5b7c:	689a      	ldr	r2, [r3, #8]
    5b7e:	2314      	movs	r3, #20
    5b80:	18fb      	adds	r3, r7, r3
    5b82:	881b      	ldrh	r3, [r3, #0]
    5b84:	18d2      	adds	r2, r2, r3
    5b86:	687b      	ldr	r3, [r7, #4]
    5b88:	609a      	str	r2, [r3, #8]
    5b8a:	e07e      	b.n	5c8a <_usb_d_dev_out_next+0x2a6>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    5b8c:	687b      	ldr	r3, [r7, #4]
    5b8e:	689a      	ldr	r2, [r3, #8]
    5b90:	2316      	movs	r3, #22
    5b92:	18fb      	adds	r3, r7, r3
    5b94:	881b      	ldrh	r3, [r3, #0]
    5b96:	18d2      	adds	r2, r2, r3
    5b98:	687b      	ldr	r3, [r7, #4]
    5b9a:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    5b9c:	687b      	ldr	r3, [r7, #4]
    5b9e:	689a      	ldr	r2, [r3, #8]
    5ba0:	687b      	ldr	r3, [r7, #4]
    5ba2:	685b      	ldr	r3, [r3, #4]
    5ba4:	429a      	cmp	r2, r3
    5ba6:	d300      	bcc.n	5baa <_usb_d_dev_out_next+0x1c6>
    5ba8:	e06f      	b.n	5c8a <_usb_d_dev_out_next+0x2a6>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    5baa:	687b      	ldr	r3, [r7, #4]
    5bac:	685b      	ldr	r3, [r3, #4]
    5bae:	b299      	uxth	r1, r3
    5bb0:	687b      	ldr	r3, [r7, #4]
    5bb2:	689b      	ldr	r3, [r3, #8]
    5bb4:	b29a      	uxth	r2, r3
    5bb6:	2326      	movs	r3, #38	; 0x26
    5bb8:	18fb      	adds	r3, r7, r3
    5bba:	1a8a      	subs	r2, r1, r2
    5bbc:	801a      	strh	r2, [r3, #0]
			if (ept->flags.bits.use_cache) {
    5bbe:	687b      	ldr	r3, [r7, #4]
    5bc0:	7cdb      	ldrb	r3, [r3, #19]
    5bc2:	2220      	movs	r2, #32
    5bc4:	4013      	ands	r3, r2
    5bc6:	b2db      	uxtb	r3, r3
    5bc8:	2b00      	cmp	r3, #0
    5bca:	d016      	beq.n	5bfa <_usb_d_dev_out_next+0x216>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    5bcc:	687b      	ldr	r3, [r7, #4]
    5bce:	8a1b      	ldrh	r3, [r3, #16]
    5bd0:	2226      	movs	r2, #38	; 0x26
    5bd2:	18ba      	adds	r2, r7, r2
    5bd4:	8812      	ldrh	r2, [r2, #0]
    5bd6:	429a      	cmp	r2, r3
    5bd8:	d904      	bls.n	5be4 <_usb_d_dev_out_next+0x200>
					trans_next = ept->size;
    5bda:	2326      	movs	r3, #38	; 0x26
    5bdc:	18fb      	adds	r3, r7, r3
    5bde:	687a      	ldr	r2, [r7, #4]
    5be0:	8a12      	ldrh	r2, [r2, #16]
    5be2:	801a      	strh	r2, [r3, #0]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    5be4:	687b      	ldr	r3, [r7, #4]
    5be6:	68db      	ldr	r3, [r3, #12]
    5be8:	001a      	movs	r2, r3
    5bea:	231f      	movs	r3, #31
    5bec:	18fb      	adds	r3, r7, r3
    5bee:	781b      	ldrb	r3, [r3, #0]
    5bf0:	2100      	movs	r1, #0
    5bf2:	0018      	movs	r0, r3
    5bf4:	4b4b      	ldr	r3, [pc, #300]	; (5d24 <_usb_d_dev_out_next+0x340>)
    5bf6:	4798      	blx	r3
    5bf8:	e03c      	b.n	5c74 <_usb_d_dev_out_next+0x290>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    5bfa:	687b      	ldr	r3, [r7, #4]
    5bfc:	8a1b      	ldrh	r3, [r3, #16]
    5bfe:	2226      	movs	r2, #38	; 0x26
    5c00:	18ba      	adds	r2, r7, r2
    5c02:	8812      	ldrh	r2, [r2, #0]
    5c04:	429a      	cmp	r2, r3
    5c06:	d91c      	bls.n	5c42 <_usb_d_dev_out_next+0x25e>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    5c08:	2326      	movs	r3, #38	; 0x26
    5c0a:	18fb      	adds	r3, r7, r3
    5c0c:	881a      	ldrh	r2, [r3, #0]
    5c0e:	2380      	movs	r3, #128	; 0x80
    5c10:	019b      	lsls	r3, r3, #6
    5c12:	429a      	cmp	r2, r3
    5c14:	d905      	bls.n	5c22 <_usb_d_dev_out_next+0x23e>
						trans_next = USB_D_DEV_TRANS_MAX;
    5c16:	2326      	movs	r3, #38	; 0x26
    5c18:	18fb      	adds	r3, r7, r3
    5c1a:	2280      	movs	r2, #128	; 0x80
    5c1c:	0192      	lsls	r2, r2, #6
    5c1e:	801a      	strh	r2, [r3, #0]
    5c20:	e01b      	b.n	5c5a <_usb_d_dev_out_next+0x276>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    5c22:	2326      	movs	r3, #38	; 0x26
    5c24:	18fb      	adds	r3, r7, r3
    5c26:	2212      	movs	r2, #18
    5c28:	18ba      	adds	r2, r7, r2
    5c2a:	881b      	ldrh	r3, [r3, #0]
    5c2c:	8812      	ldrh	r2, [r2, #0]
    5c2e:	4013      	ands	r3, r2
    5c30:	b29a      	uxth	r2, r3
    5c32:	2326      	movs	r3, #38	; 0x26
    5c34:	18fb      	adds	r3, r7, r3
    5c36:	2126      	movs	r1, #38	; 0x26
    5c38:	1879      	adds	r1, r7, r1
    5c3a:	8809      	ldrh	r1, [r1, #0]
    5c3c:	1a8a      	subs	r2, r1, r2
    5c3e:	801a      	strh	r2, [r3, #0]
    5c40:	e00b      	b.n	5c5a <_usb_d_dev_out_next+0x276>
					}
				} else if (trans_next < ept->size) {
    5c42:	687b      	ldr	r3, [r7, #4]
    5c44:	8a1b      	ldrh	r3, [r3, #16]
    5c46:	2226      	movs	r2, #38	; 0x26
    5c48:	18ba      	adds	r2, r7, r2
    5c4a:	8812      	ldrh	r2, [r2, #0]
    5c4c:	429a      	cmp	r2, r3
    5c4e:	d204      	bcs.n	5c5a <_usb_d_dev_out_next+0x276>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    5c50:	687b      	ldr	r3, [r7, #4]
    5c52:	7cda      	ldrb	r2, [r3, #19]
    5c54:	2120      	movs	r1, #32
    5c56:	430a      	orrs	r2, r1
    5c58:	74da      	strb	r2, [r3, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    5c5a:	687b      	ldr	r3, [r7, #4]
    5c5c:	681a      	ldr	r2, [r3, #0]
    5c5e:	687b      	ldr	r3, [r7, #4]
    5c60:	689b      	ldr	r3, [r3, #8]
    5c62:	18d3      	adds	r3, r2, r3
    5c64:	001a      	movs	r2, r3
    5c66:	231f      	movs	r3, #31
    5c68:	18fb      	adds	r3, r7, r3
    5c6a:	781b      	ldrb	r3, [r3, #0]
    5c6c:	2100      	movs	r1, #0
    5c6e:	0018      	movs	r0, r3
    5c70:	4b2c      	ldr	r3, [pc, #176]	; (5d24 <_usb_d_dev_out_next+0x340>)
    5c72:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    5c74:	2326      	movs	r3, #38	; 0x26
    5c76:	18fb      	adds	r3, r7, r3
    5c78:	881a      	ldrh	r2, [r3, #0]
    5c7a:	231f      	movs	r3, #31
    5c7c:	18fb      	adds	r3, r7, r3
    5c7e:	7818      	ldrb	r0, [r3, #0]
    5c80:	2300      	movs	r3, #0
    5c82:	2100      	movs	r1, #0
    5c84:	4c28      	ldr	r4, [pc, #160]	; (5d28 <_usb_d_dev_out_next+0x344>)
    5c86:	47a0      	blx	r4
			goto _out_rx_exec;
    5c88:	e02a      	b.n	5ce0 <_usb_d_dev_out_next+0x2fc>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    5c8a:	230f      	movs	r3, #15
    5c8c:	18fb      	adds	r3, r7, r3
    5c8e:	781b      	ldrb	r3, [r3, #0]
    5c90:	2b00      	cmp	r3, #0
    5c92:	d008      	beq.n	5ca6 <_usb_d_dev_out_next+0x2c2>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    5c94:	231f      	movs	r3, #31
    5c96:	18fb      	adds	r3, r7, r3
    5c98:	7819      	ldrb	r1, [r3, #0]
    5c9a:	6a3b      	ldr	r3, [r7, #32]
    5c9c:	222d      	movs	r2, #45	; 0x2d
    5c9e:	0018      	movs	r0, r3
    5ca0:	4b22      	ldr	r3, [pc, #136]	; (5d2c <_usb_d_dev_out_next+0x348>)
    5ca2:	4798      	blx	r3
    5ca4:	e007      	b.n	5cb6 <_usb_d_dev_out_next+0x2d2>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    5ca6:	231f      	movs	r3, #31
    5ca8:	18fb      	adds	r3, r7, r3
    5caa:	7819      	ldrb	r1, [r3, #0]
    5cac:	6a3b      	ldr	r3, [r7, #32]
    5cae:	2225      	movs	r2, #37	; 0x25
    5cb0:	0018      	movs	r0, r3
    5cb2:	4b1e      	ldr	r3, [pc, #120]	; (5d2c <_usb_d_dev_out_next+0x348>)
    5cb4:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    5cb6:	231f      	movs	r3, #31
    5cb8:	18fb      	adds	r3, r7, r3
    5cba:	781b      	ldrb	r3, [r3, #0]
    5cbc:	2b00      	cmp	r3, #0
    5cbe:	d109      	bne.n	5cd4 <_usb_d_dev_out_next+0x2f0>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    5cc0:	687b      	ldr	r3, [r7, #4]
    5cc2:	68db      	ldr	r3, [r3, #12]
    5cc4:	001a      	movs	r2, r3
    5cc6:	231f      	movs	r3, #31
    5cc8:	18fb      	adds	r3, r7, r3
    5cca:	781b      	ldrb	r3, [r3, #0]
    5ccc:	2100      	movs	r1, #0
    5cce:	0018      	movs	r0, r3
    5cd0:	4b14      	ldr	r3, [pc, #80]	; (5d24 <_usb_d_dev_out_next+0x340>)
    5cd2:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    5cd4:	687b      	ldr	r3, [r7, #4]
    5cd6:	2100      	movs	r1, #0
    5cd8:	0018      	movs	r0, r3
    5cda:	4b15      	ldr	r3, [pc, #84]	; (5d30 <_usb_d_dev_out_next+0x34c>)
    5cdc:	4798      	blx	r3
	return;
    5cde:	e041      	b.n	5d64 <_usb_d_dev_out_next+0x380>

_out_rx_exec:
	if (!isr) {
    5ce0:	1cfb      	adds	r3, r7, #3
    5ce2:	781b      	ldrb	r3, [r3, #0]
    5ce4:	2201      	movs	r2, #1
    5ce6:	4053      	eors	r3, r2
    5ce8:	b2db      	uxtb	r3, r3
    5cea:	2b00      	cmp	r3, #0
    5cec:	d032      	beq.n	5d54 <_usb_d_dev_out_next+0x370>
		if (is_ctrl) {
    5cee:	230f      	movs	r3, #15
    5cf0:	18fb      	adds	r3, r7, r3
    5cf2:	781b      	ldrb	r3, [r3, #0]
    5cf4:	2b00      	cmp	r3, #0
    5cf6:	d01f      	beq.n	5d38 <_usb_d_dev_out_next+0x354>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    5cf8:	231f      	movs	r3, #31
    5cfa:	18fb      	adds	r3, r7, r3
    5cfc:	781b      	ldrb	r3, [r3, #0]
    5cfe:	2101      	movs	r1, #1
    5d00:	0018      	movs	r0, r3
    5d02:	4b0c      	ldr	r3, [pc, #48]	; (5d34 <_usb_d_dev_out_next+0x350>)
    5d04:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    5d06:	2325      	movs	r3, #37	; 0x25
    5d08:	18fb      	adds	r3, r7, r3
    5d0a:	222d      	movs	r2, #45	; 0x2d
    5d0c:	701a      	strb	r2, [r3, #0]
    5d0e:	e017      	b.n	5d40 <_usb_d_dev_out_next+0x35c>
    5d10:	41005000 	.word	0x41005000
    5d14:	20001058 	.word	0x20001058
    5d18:	000003ff 	.word	0x000003ff
    5d1c:	00004ff5 	.word	0x00004ff5
    5d20:	0000d195 	.word	0x0000d195
    5d24:	00005029 	.word	0x00005029
    5d28:	0000522d 	.word	0x0000522d
    5d2c:	00004843 	.word	0x00004843
    5d30:	00006ea9 	.word	0x00006ea9
    5d34:	00005285 	.word	0x00005285
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    5d38:	2325      	movs	r3, #37	; 0x25
    5d3a:	18fb      	adds	r3, r7, r3
    5d3c:	2225      	movs	r2, #37	; 0x25
    5d3e:	701a      	strb	r2, [r3, #0]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    5d40:	2325      	movs	r3, #37	; 0x25
    5d42:	18fb      	adds	r3, r7, r3
    5d44:	781a      	ldrb	r2, [r3, #0]
    5d46:	231f      	movs	r3, #31
    5d48:	18fb      	adds	r3, r7, r3
    5d4a:	7819      	ldrb	r1, [r3, #0]
    5d4c:	6a3b      	ldr	r3, [r7, #32]
    5d4e:	0018      	movs	r0, r3
    5d50:	4b06      	ldr	r3, [pc, #24]	; (5d6c <_usb_d_dev_out_next+0x388>)
    5d52:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    5d54:	231f      	movs	r3, #31
    5d56:	18fb      	adds	r3, r7, r3
    5d58:	781b      	ldrb	r3, [r3, #0]
    5d5a:	2201      	movs	r2, #1
    5d5c:	2100      	movs	r1, #0
    5d5e:	0018      	movs	r0, r3
    5d60:	4b03      	ldr	r3, [pc, #12]	; (5d70 <_usb_d_dev_out_next+0x38c>)
    5d62:	4798      	blx	r3
}
    5d64:	46bd      	mov	sp, r7
    5d66:	b00b      	add	sp, #44	; 0x2c
    5d68:	bd90      	pop	{r4, r7, pc}
    5d6a:	46c0      	nop			; (mov r8, r8)
    5d6c:	0000480d 	.word	0x0000480d
    5d70:	00005329 	.word	0x00005329

00005d74 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    5d74:	b580      	push	{r7, lr}
    5d76:	b084      	sub	sp, #16
    5d78:	af00      	add	r7, sp, #0
    5d7a:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    5d7c:	687b      	ldr	r3, [r7, #4]
    5d7e:	7c9a      	ldrb	r2, [r3, #18]
    5d80:	230f      	movs	r3, #15
    5d82:	18fb      	adds	r3, r7, r3
    5d84:	210f      	movs	r1, #15
    5d86:	400a      	ands	r2, r1
    5d88:	701a      	strb	r2, [r3, #0]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    5d8a:	687b      	ldr	r3, [r7, #4]
    5d8c:	7cdb      	ldrb	r3, [r3, #19]
    5d8e:	2207      	movs	r2, #7
    5d90:	4013      	ands	r3, r2
    5d92:	b2da      	uxtb	r2, r3
    5d94:	230e      	movs	r3, #14
    5d96:	18fb      	adds	r3, r7, r3
    5d98:	3a01      	subs	r2, #1
    5d9a:	4251      	negs	r1, r2
    5d9c:	414a      	adcs	r2, r1
    5d9e:	701a      	strb	r2, [r3, #0]

	if (!is_ctrl) {
    5da0:	230e      	movs	r3, #14
    5da2:	18fb      	adds	r3, r7, r3
    5da4:	781b      	ldrb	r3, [r3, #0]
    5da6:	2201      	movs	r2, #1
    5da8:	4053      	eors	r3, r2
    5daa:	b2db      	uxtb	r3, r3
    5dac:	2b00      	cmp	r3, #0
    5dae:	d00c      	beq.n	5dca <_usb_d_dev_handle_setup+0x56>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    5db0:	230f      	movs	r3, #15
    5db2:	18fb      	adds	r3, r7, r3
    5db4:	781b      	ldrb	r3, [r3, #0]
    5db6:	0018      	movs	r0, r3
    5db8:	4b27      	ldr	r3, [pc, #156]	; (5e58 <_usb_d_dev_handle_setup+0xe4>)
    5dba:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    5dbc:	230f      	movs	r3, #15
    5dbe:	18fb      	adds	r3, r7, r3
    5dc0:	781b      	ldrb	r3, [r3, #0]
    5dc2:	0018      	movs	r0, r3
    5dc4:	4b25      	ldr	r3, [pc, #148]	; (5e5c <_usb_d_dev_handle_setup+0xe8>)
    5dc6:	4798      	blx	r3
		return;
    5dc8:	e042      	b.n	5e50 <_usb_d_dev_handle_setup+0xdc>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    5dca:	687b      	ldr	r3, [r7, #4]
    5dcc:	7cdb      	ldrb	r3, [r3, #19]
    5dce:	2240      	movs	r2, #64	; 0x40
    5dd0:	4013      	ands	r3, r2
    5dd2:	b2db      	uxtb	r3, r3
    5dd4:	2b00      	cmp	r3, #0
    5dd6:	d014      	beq.n	5e02 <_usb_d_dev_handle_setup+0x8e>
		ept->flags.bits.is_busy = 0;
    5dd8:	687b      	ldr	r3, [r7, #4]
    5dda:	7cda      	ldrb	r2, [r3, #19]
    5ddc:	2140      	movs	r1, #64	; 0x40
    5dde:	438a      	bics	r2, r1
    5de0:	74da      	strb	r2, [r3, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    5de2:	230f      	movs	r3, #15
    5de4:	18fb      	adds	r3, r7, r3
    5de6:	781b      	ldrb	r3, [r3, #0]
    5de8:	2200      	movs	r2, #0
    5dea:	2101      	movs	r1, #1
    5dec:	0018      	movs	r0, r3
    5dee:	4b1c      	ldr	r3, [pc, #112]	; (5e60 <_usb_d_dev_handle_setup+0xec>)
    5df0:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    5df2:	230f      	movs	r3, #15
    5df4:	18fb      	adds	r3, r7, r3
    5df6:	781b      	ldrb	r3, [r3, #0]
    5df8:	2200      	movs	r2, #0
    5dfa:	2100      	movs	r1, #0
    5dfc:	0018      	movs	r0, r3
    5dfe:	4b19      	ldr	r3, [pc, #100]	; (5e64 <_usb_d_dev_handle_setup+0xf0>)
    5e00:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    5e02:	687b      	ldr	r3, [r7, #4]
    5e04:	7cda      	ldrb	r2, [r3, #19]
    5e06:	2108      	movs	r1, #8
    5e08:	438a      	bics	r2, r1
    5e0a:	74da      	strb	r2, [r3, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    5e0c:	230f      	movs	r3, #15
    5e0e:	18fb      	adds	r3, r7, r3
    5e10:	781b      	ldrb	r3, [r3, #0]
    5e12:	2100      	movs	r1, #0
    5e14:	0018      	movs	r0, r3
    5e16:	4b14      	ldr	r3, [pc, #80]	; (5e68 <_usb_d_dev_handle_setup+0xf4>)
    5e18:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    5e1a:	230f      	movs	r3, #15
    5e1c:	18fb      	adds	r3, r7, r3
    5e1e:	781b      	ldrb	r3, [r3, #0]
    5e20:	2101      	movs	r1, #1
    5e22:	0018      	movs	r0, r3
    5e24:	4b10      	ldr	r3, [pc, #64]	; (5e68 <_usb_d_dev_handle_setup+0xf4>)
    5e26:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    5e28:	230f      	movs	r3, #15
    5e2a:	18fb      	adds	r3, r7, r3
    5e2c:	781b      	ldrb	r3, [r3, #0]
    5e2e:	216f      	movs	r1, #111	; 0x6f
    5e30:	0018      	movs	r0, r3
    5e32:	4b0e      	ldr	r3, [pc, #56]	; (5e6c <_usb_d_dev_handle_setup+0xf8>)
    5e34:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    5e36:	230f      	movs	r3, #15
    5e38:	18fb      	adds	r3, r7, r3
    5e3a:	781b      	ldrb	r3, [r3, #0]
    5e3c:	216f      	movs	r1, #111	; 0x6f
    5e3e:	0018      	movs	r0, r3
    5e40:	4b0b      	ldr	r3, [pc, #44]	; (5e70 <_usb_d_dev_handle_setup+0xfc>)
    5e42:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    5e44:	4b0b      	ldr	r3, [pc, #44]	; (5e74 <_usb_d_dev_handle_setup+0x100>)
    5e46:	689b      	ldr	r3, [r3, #8]
    5e48:	687a      	ldr	r2, [r7, #4]
    5e4a:	7c92      	ldrb	r2, [r2, #18]
    5e4c:	0010      	movs	r0, r2
    5e4e:	4798      	blx	r3
}
    5e50:	46bd      	mov	sp, r7
    5e52:	b004      	add	sp, #16
    5e54:	bd80      	pop	{r7, pc}
    5e56:	46c0      	nop			; (mov r8, r8)
    5e58:	00004f65 	.word	0x00004f65
    5e5c:	00004f05 	.word	0x00004f05
    5e60:	000052bd 	.word	0x000052bd
    5e64:	00005329 	.word	0x00005329
    5e68:	00005285 	.word	0x00005285
    5e6c:	00004ca9 	.word	0x00004ca9
    5e70:	00004d09 	.word	0x00004d09
    5e74:	20000ef0 	.word	0x20000ef0

00005e78 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    5e78:	b590      	push	{r4, r7, lr}
    5e7a:	b085      	sub	sp, #20
    5e7c:	af00      	add	r7, sp, #0
    5e7e:	6078      	str	r0, [r7, #4]
    5e80:	000a      	movs	r2, r1
    5e82:	1cfb      	adds	r3, r7, #3
    5e84:	701a      	strb	r2, [r3, #0]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    5e86:	687b      	ldr	r3, [r7, #4]
    5e88:	7c9a      	ldrb	r2, [r3, #18]
    5e8a:	230f      	movs	r3, #15
    5e8c:	18fb      	adds	r3, r7, r3
    5e8e:	210f      	movs	r1, #15
    5e90:	400a      	ands	r2, r1
    5e92:	701a      	strb	r2, [r3, #0]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    5e94:	1cfb      	adds	r3, r7, #3
    5e96:	7819      	ldrb	r1, [r3, #0]
    5e98:	230f      	movs	r3, #15
    5e9a:	18fb      	adds	r3, r7, r3
    5e9c:	781b      	ldrb	r3, [r3, #0]
    5e9e:	2200      	movs	r2, #0
    5ea0:	0018      	movs	r0, r3
    5ea2:	4b07      	ldr	r3, [pc, #28]	; (5ec0 <_usb_d_dev_handle_stall+0x48>)
    5ea4:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    5ea6:	4b07      	ldr	r3, [pc, #28]	; (5ec4 <_usb_d_dev_handle_stall+0x4c>)
    5ea8:	691c      	ldr	r4, [r3, #16]
    5eaa:	687b      	ldr	r3, [r7, #4]
    5eac:	7c98      	ldrb	r0, [r3, #18]
    5eae:	687b      	ldr	r3, [r7, #4]
    5eb0:	689b      	ldr	r3, [r3, #8]
    5eb2:	001a      	movs	r2, r3
    5eb4:	2101      	movs	r1, #1
    5eb6:	47a0      	blx	r4
}
    5eb8:	46c0      	nop			; (mov r8, r8)
    5eba:	46bd      	mov	sp, r7
    5ebc:	b005      	add	sp, #20
    5ebe:	bd90      	pop	{r4, r7, pc}
    5ec0:	00004ea5 	.word	0x00004ea5
    5ec4:	20000ef0 	.word	0x20000ef0

00005ec8 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    5ec8:	b580      	push	{r7, lr}
    5eca:	b088      	sub	sp, #32
    5ecc:	af00      	add	r7, sp, #0
    5ece:	6078      	str	r0, [r7, #4]
    5ed0:	000a      	movs	r2, r1
    5ed2:	1cfb      	adds	r3, r7, #3
    5ed4:	701a      	strb	r2, [r3, #0]
	Usb *              hw      = USB;
    5ed6:	4b78      	ldr	r3, [pc, #480]	; (60b8 <_usb_d_dev_handle_trfail+0x1f0>)
    5ed8:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    5eda:	687b      	ldr	r3, [r7, #4]
    5edc:	7c9a      	ldrb	r2, [r3, #18]
    5ede:	231b      	movs	r3, #27
    5ee0:	18fb      	adds	r3, r7, r3
    5ee2:	210f      	movs	r1, #15
    5ee4:	400a      	ands	r2, r1
    5ee6:	701a      	strb	r2, [r3, #0]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    5ee8:	2310      	movs	r3, #16
    5eea:	18fb      	adds	r3, r7, r3
    5eec:	4a73      	ldr	r2, [pc, #460]	; (60bc <_usb_d_dev_handle_trfail+0x1f4>)
    5eee:	8812      	ldrh	r2, [r2, #0]
    5ef0:	801a      	strh	r2, [r3, #0]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    5ef2:	231b      	movs	r3, #27
    5ef4:	18fb      	adds	r3, r7, r3
    5ef6:	781b      	ldrb	r3, [r3, #0]
    5ef8:	015a      	lsls	r2, r3, #5
    5efa:	4b71      	ldr	r3, [pc, #452]	; (60c0 <_usb_d_dev_handle_trfail+0x1f8>)
    5efc:	18d3      	adds	r3, r2, r3
    5efe:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    5f00:	1cfb      	adds	r3, r7, #3
    5f02:	781b      	ldrb	r3, [r3, #0]
    5f04:	2b00      	cmp	r3, #0
    5f06:	d00a      	beq.n	5f1e <_usb_d_dev_handle_trfail+0x56>
    5f08:	231b      	movs	r3, #27
    5f0a:	18fb      	adds	r3, r7, r3
    5f0c:	781a      	ldrb	r2, [r3, #0]
    5f0e:	69fb      	ldr	r3, [r7, #28]
    5f10:	0011      	movs	r1, r2
    5f12:	0018      	movs	r0, r3
    5f14:	4b6b      	ldr	r3, [pc, #428]	; (60c4 <_usb_d_dev_handle_trfail+0x1fc>)
    5f16:	4798      	blx	r3
    5f18:	0003      	movs	r3, r0
    5f1a:	001a      	movs	r2, r3
    5f1c:	e009      	b.n	5f32 <_usb_d_dev_handle_trfail+0x6a>
    5f1e:	231b      	movs	r3, #27
    5f20:	18fb      	adds	r3, r7, r3
    5f22:	781a      	ldrb	r2, [r3, #0]
    5f24:	69fb      	ldr	r3, [r7, #28]
    5f26:	0011      	movs	r1, r2
    5f28:	0018      	movs	r0, r3
    5f2a:	4b67      	ldr	r3, [pc, #412]	; (60c8 <_usb_d_dev_handle_trfail+0x200>)
    5f2c:	4798      	blx	r3
    5f2e:	0003      	movs	r3, r0
    5f30:	001a      	movs	r2, r3
    5f32:	2313      	movs	r3, #19
    5f34:	18fb      	adds	r3, r7, r3
    5f36:	701a      	strb	r2, [r3, #0]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    5f38:	687b      	ldr	r3, [r7, #4]
    5f3a:	7cdb      	ldrb	r3, [r3, #19]
    5f3c:	2207      	movs	r2, #7
    5f3e:	4013      	ands	r3, r2
    5f40:	b2da      	uxtb	r2, r3
    5f42:	2312      	movs	r3, #18
    5f44:	18fb      	adds	r3, r7, r3
    5f46:	3a01      	subs	r2, #1
    5f48:	4251      	negs	r1, r2
    5f4a:	414a      	adcs	r2, r1
    5f4c:	701a      	strb	r2, [r3, #0]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    5f4e:	1cfb      	adds	r3, r7, #3
    5f50:	781b      	ldrb	r3, [r3, #0]
    5f52:	011b      	lsls	r3, r3, #4
    5f54:	697a      	ldr	r2, [r7, #20]
    5f56:	18d3      	adds	r3, r2, r3
    5f58:	7a9b      	ldrb	r3, [r3, #10]
    5f5a:	b2da      	uxtb	r2, r3
    5f5c:	230c      	movs	r3, #12
    5f5e:	18fb      	adds	r3, r7, r3
    5f60:	701a      	strb	r2, [r3, #0]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    5f62:	2313      	movs	r3, #19
    5f64:	18fb      	adds	r3, r7, r3
    5f66:	781b      	ldrb	r3, [r3, #0]
    5f68:	2b02      	cmp	r3, #2
    5f6a:	d133      	bne.n	5fd4 <_usb_d_dev_handle_trfail+0x10c>
    5f6c:	230c      	movs	r3, #12
    5f6e:	18fb      	adds	r3, r7, r3
    5f70:	781b      	ldrb	r3, [r3, #0]
    5f72:	2201      	movs	r2, #1
    5f74:	4013      	ands	r3, r2
    5f76:	b2db      	uxtb	r3, r3
    5f78:	2b00      	cmp	r3, #0
    5f7a:	d02b      	beq.n	5fd4 <_usb_d_dev_handle_trfail+0x10c>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    5f7c:	1cfb      	adds	r3, r7, #3
    5f7e:	781b      	ldrb	r3, [r3, #0]
    5f80:	011b      	lsls	r3, r3, #4
    5f82:	697a      	ldr	r2, [r7, #20]
    5f84:	18d2      	adds	r2, r2, r3
    5f86:	7a93      	ldrb	r3, [r2, #10]
    5f88:	2101      	movs	r1, #1
    5f8a:	438b      	bics	r3, r1
    5f8c:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    5f8e:	1cfb      	adds	r3, r7, #3
    5f90:	781b      	ldrb	r3, [r3, #0]
    5f92:	2210      	movs	r2, #16
    5f94:	18ba      	adds	r2, r7, r2
    5f96:	5cd2      	ldrb	r2, [r2, r3]
    5f98:	231b      	movs	r3, #27
    5f9a:	18fb      	adds	r3, r7, r3
    5f9c:	7819      	ldrb	r1, [r3, #0]
    5f9e:	69fb      	ldr	r3, [r7, #28]
    5fa0:	0018      	movs	r0, r3
    5fa2:	4b4a      	ldr	r3, [pc, #296]	; (60cc <_usb_d_dev_handle_trfail+0x204>)
    5fa4:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    5fa6:	1cfb      	adds	r3, r7, #3
    5fa8:	781b      	ldrb	r3, [r3, #0]
    5faa:	2210      	movs	r2, #16
    5fac:	18ba      	adds	r2, r7, r2
    5fae:	5cd2      	ldrb	r2, [r2, r3]
    5fb0:	231b      	movs	r3, #27
    5fb2:	18fb      	adds	r3, r7, r3
    5fb4:	7819      	ldrb	r1, [r3, #0]
    5fb6:	69fb      	ldr	r3, [r7, #28]
    5fb8:	0018      	movs	r0, r3
    5fba:	4b45      	ldr	r3, [pc, #276]	; (60d0 <_usb_d_dev_handle_trfail+0x208>)
    5fbc:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    5fbe:	1cfb      	adds	r3, r7, #3
    5fc0:	781b      	ldrb	r3, [r3, #0]
    5fc2:	1e5a      	subs	r2, r3, #1
    5fc4:	4193      	sbcs	r3, r2
    5fc6:	b2d9      	uxtb	r1, r3
    5fc8:	687b      	ldr	r3, [r7, #4]
    5fca:	2204      	movs	r2, #4
    5fcc:	0018      	movs	r0, r3
    5fce:	4b41      	ldr	r3, [pc, #260]	; (60d4 <_usb_d_dev_handle_trfail+0x20c>)
    5fd0:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    5fd2:	e06d      	b.n	60b0 <_usb_d_dev_handle_trfail+0x1e8>
	} else if (st.bit.ERRORFLOW) {
    5fd4:	230c      	movs	r3, #12
    5fd6:	18fb      	adds	r3, r7, r3
    5fd8:	781b      	ldrb	r3, [r3, #0]
    5fda:	2202      	movs	r2, #2
    5fdc:	4013      	ands	r3, r2
    5fde:	b2db      	uxtb	r3, r3
    5fe0:	2b00      	cmp	r3, #0
    5fe2:	d044      	beq.n	606e <_usb_d_dev_handle_trfail+0x1a6>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    5fe4:	1cfb      	adds	r3, r7, #3
    5fe6:	781b      	ldrb	r3, [r3, #0]
    5fe8:	011b      	lsls	r3, r3, #4
    5fea:	697a      	ldr	r2, [r7, #20]
    5fec:	18d2      	adds	r2, r2, r3
    5fee:	7a93      	ldrb	r3, [r2, #10]
    5ff0:	2102      	movs	r1, #2
    5ff2:	438b      	bics	r3, r1
    5ff4:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    5ff6:	1cfb      	adds	r3, r7, #3
    5ff8:	781b      	ldrb	r3, [r3, #0]
    5ffa:	2210      	movs	r2, #16
    5ffc:	18ba      	adds	r2, r7, r2
    5ffe:	5cd2      	ldrb	r2, [r2, r3]
    6000:	231b      	movs	r3, #27
    6002:	18fb      	adds	r3, r7, r3
    6004:	7819      	ldrb	r1, [r3, #0]
    6006:	69fb      	ldr	r3, [r7, #28]
    6008:	0018      	movs	r0, r3
    600a:	4b30      	ldr	r3, [pc, #192]	; (60cc <_usb_d_dev_handle_trfail+0x204>)
    600c:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    600e:	1cfb      	adds	r3, r7, #3
    6010:	781b      	ldrb	r3, [r3, #0]
    6012:	2210      	movs	r2, #16
    6014:	18ba      	adds	r2, r7, r2
    6016:	5cd2      	ldrb	r2, [r2, r3]
    6018:	231b      	movs	r3, #27
    601a:	18fb      	adds	r3, r7, r3
    601c:	7819      	ldrb	r1, [r3, #0]
    601e:	69fb      	ldr	r3, [r7, #28]
    6020:	0018      	movs	r0, r3
    6022:	4b2b      	ldr	r3, [pc, #172]	; (60d0 <_usb_d_dev_handle_trfail+0x208>)
    6024:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    6026:	2312      	movs	r3, #18
    6028:	18fb      	adds	r3, r7, r3
    602a:	781b      	ldrb	r3, [r3, #0]
    602c:	2b00      	cmp	r3, #0
    602e:	d03f      	beq.n	60b0 <_usb_d_dev_handle_trfail+0x1e8>
    6030:	687b      	ldr	r3, [r7, #4]
    6032:	7cdb      	ldrb	r3, [r3, #19]
    6034:	2240      	movs	r2, #64	; 0x40
    6036:	4013      	ands	r3, r2
    6038:	b2db      	uxtb	r3, r3
    603a:	2b00      	cmp	r3, #0
    603c:	d038      	beq.n	60b0 <_usb_d_dev_handle_trfail+0x1e8>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    603e:	687b      	ldr	r3, [r7, #4]
    6040:	7cdb      	ldrb	r3, [r3, #19]
    6042:	061b      	lsls	r3, r3, #24
    6044:	0fdb      	lsrs	r3, r3, #31
    6046:	b2db      	uxtb	r3, r3
    6048:	001a      	movs	r2, r3
    604a:	1cfb      	adds	r3, r7, #3
    604c:	781b      	ldrb	r3, [r3, #0]
    604e:	4293      	cmp	r3, r2
    6050:	d02e      	beq.n	60b0 <_usb_d_dev_handle_trfail+0x1e8>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    6052:	687b      	ldr	r3, [r7, #4]
    6054:	7cdb      	ldrb	r3, [r3, #19]
    6056:	061b      	lsls	r3, r3, #24
    6058:	0fdb      	lsrs	r3, r3, #31
    605a:	b2db      	uxtb	r3, r3
    605c:	1e5a      	subs	r2, r3, #1
    605e:	4193      	sbcs	r3, r2
    6060:	b2d9      	uxtb	r1, r3
    6062:	687b      	ldr	r3, [r7, #4]
    6064:	2200      	movs	r2, #0
    6066:	0018      	movs	r0, r3
    6068:	4b1a      	ldr	r3, [pc, #104]	; (60d4 <_usb_d_dev_handle_trfail+0x20c>)
    606a:	4798      	blx	r3
}
    606c:	e020      	b.n	60b0 <_usb_d_dev_handle_trfail+0x1e8>
		_usbd_ep_clear_bank_status(epn, bank_n);
    606e:	1cfb      	adds	r3, r7, #3
    6070:	781a      	ldrb	r2, [r3, #0]
    6072:	231b      	movs	r3, #27
    6074:	18fb      	adds	r3, r7, r3
    6076:	781b      	ldrb	r3, [r3, #0]
    6078:	0011      	movs	r1, r2
    607a:	0018      	movs	r0, r3
    607c:	4b16      	ldr	r3, [pc, #88]	; (60d8 <_usb_d_dev_handle_trfail+0x210>)
    607e:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    6080:	1cfb      	adds	r3, r7, #3
    6082:	781b      	ldrb	r3, [r3, #0]
    6084:	2210      	movs	r2, #16
    6086:	18ba      	adds	r2, r7, r2
    6088:	5cd2      	ldrb	r2, [r2, r3]
    608a:	231b      	movs	r3, #27
    608c:	18fb      	adds	r3, r7, r3
    608e:	7819      	ldrb	r1, [r3, #0]
    6090:	69fb      	ldr	r3, [r7, #28]
    6092:	0018      	movs	r0, r3
    6094:	4b0d      	ldr	r3, [pc, #52]	; (60cc <_usb_d_dev_handle_trfail+0x204>)
    6096:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    6098:	1cfb      	adds	r3, r7, #3
    609a:	781b      	ldrb	r3, [r3, #0]
    609c:	2210      	movs	r2, #16
    609e:	18ba      	adds	r2, r7, r2
    60a0:	5cd2      	ldrb	r2, [r2, r3]
    60a2:	231b      	movs	r3, #27
    60a4:	18fb      	adds	r3, r7, r3
    60a6:	7819      	ldrb	r1, [r3, #0]
    60a8:	69fb      	ldr	r3, [r7, #28]
    60aa:	0018      	movs	r0, r3
    60ac:	4b08      	ldr	r3, [pc, #32]	; (60d0 <_usb_d_dev_handle_trfail+0x208>)
    60ae:	4798      	blx	r3
}
    60b0:	46c0      	nop			; (mov r8, r8)
    60b2:	46bd      	mov	sp, r7
    60b4:	b008      	add	sp, #32
    60b6:	bd80      	pop	{r7, pc}
    60b8:	41005000 	.word	0x41005000
    60bc:	0001231c 	.word	0x0001231c
    60c0:	20001058 	.word	0x20001058
    60c4:	000048b7 	.word	0x000048b7
    60c8:	00004879 	.word	0x00004879
    60cc:	0000471f 	.word	0x0000471f
    60d0:	00004843 	.word	0x00004843
    60d4:	00006ef5 	.word	0x00006ef5
    60d8:	00005285 	.word	0x00005285

000060dc <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    60dc:	b580      	push	{r7, lr}
    60de:	b082      	sub	sp, #8
    60e0:	af00      	add	r7, sp, #0
    60e2:	6078      	str	r0, [r7, #4]
    60e4:	000a      	movs	r2, r1
    60e6:	1cfb      	adds	r3, r7, #3
    60e8:	701a      	strb	r2, [r3, #0]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    60ea:	1cfb      	adds	r3, r7, #3
    60ec:	781b      	ldrb	r3, [r3, #0]
    60ee:	2210      	movs	r2, #16
    60f0:	4013      	ands	r3, r2
    60f2:	d004      	beq.n	60fe <_usb_d_dev_trans_setup_isr+0x22>
		_usb_d_dev_handle_setup(ept);
    60f4:	687b      	ldr	r3, [r7, #4]
    60f6:	0018      	movs	r0, r3
    60f8:	4b0d      	ldr	r3, [pc, #52]	; (6130 <_usb_d_dev_trans_setup_isr+0x54>)
    60fa:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    60fc:	e014      	b.n	6128 <_usb_d_dev_trans_setup_isr+0x4c>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    60fe:	1cfb      	adds	r3, r7, #3
    6100:	781b      	ldrb	r3, [r3, #0]
    6102:	2240      	movs	r2, #64	; 0x40
    6104:	4013      	ands	r3, r2
    6106:	d005      	beq.n	6114 <_usb_d_dev_trans_setup_isr+0x38>
		_usb_d_dev_handle_stall(ept, 1);
    6108:	687b      	ldr	r3, [r7, #4]
    610a:	2101      	movs	r1, #1
    610c:	0018      	movs	r0, r3
    610e:	4b09      	ldr	r3, [pc, #36]	; (6134 <_usb_d_dev_trans_setup_isr+0x58>)
    6110:	4798      	blx	r3
}
    6112:	e009      	b.n	6128 <_usb_d_dev_trans_setup_isr+0x4c>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    6114:	1cfb      	adds	r3, r7, #3
    6116:	781b      	ldrb	r3, [r3, #0]
    6118:	2220      	movs	r2, #32
    611a:	4013      	ands	r3, r2
    611c:	d004      	beq.n	6128 <_usb_d_dev_trans_setup_isr+0x4c>
		_usb_d_dev_handle_stall(ept, 0);
    611e:	687b      	ldr	r3, [r7, #4]
    6120:	2100      	movs	r1, #0
    6122:	0018      	movs	r0, r3
    6124:	4b03      	ldr	r3, [pc, #12]	; (6134 <_usb_d_dev_trans_setup_isr+0x58>)
    6126:	4798      	blx	r3
}
    6128:	46c0      	nop			; (mov r8, r8)
    612a:	46bd      	mov	sp, r7
    612c:	b002      	add	sp, #8
    612e:	bd80      	pop	{r7, pc}
    6130:	00005d75 	.word	0x00005d75
    6134:	00005e79 	.word	0x00005e79

00006138 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    6138:	b580      	push	{r7, lr}
    613a:	b082      	sub	sp, #8
    613c:	af00      	add	r7, sp, #0
    613e:	6078      	str	r0, [r7, #4]
    6140:	000a      	movs	r2, r1
    6142:	1cfb      	adds	r3, r7, #3
    6144:	701a      	strb	r2, [r3, #0]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    6146:	1cfb      	adds	r3, r7, #3
    6148:	781b      	ldrb	r3, [r3, #0]
    614a:	2240      	movs	r2, #64	; 0x40
    614c:	4013      	ands	r3, r2
    614e:	d005      	beq.n	615c <_usb_d_dev_trans_in_isr+0x24>
		_usb_d_dev_handle_stall(ept, 1);
    6150:	687b      	ldr	r3, [r7, #4]
    6152:	2101      	movs	r1, #1
    6154:	0018      	movs	r0, r3
    6156:	4b1c      	ldr	r3, [pc, #112]	; (61c8 <_usb_d_dev_trans_in_isr+0x90>)
    6158:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    615a:	e030      	b.n	61be <_usb_d_dev_trans_in_isr+0x86>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    615c:	1cfb      	adds	r3, r7, #3
    615e:	781b      	ldrb	r3, [r3, #0]
    6160:	2208      	movs	r2, #8
    6162:	4013      	ands	r3, r2
    6164:	d005      	beq.n	6172 <_usb_d_dev_trans_in_isr+0x3a>
		_usb_d_dev_handle_trfail(ept, 1);
    6166:	687b      	ldr	r3, [r7, #4]
    6168:	2101      	movs	r1, #1
    616a:	0018      	movs	r0, r3
    616c:	4b17      	ldr	r3, [pc, #92]	; (61cc <_usb_d_dev_trans_in_isr+0x94>)
    616e:	4798      	blx	r3
}
    6170:	e025      	b.n	61be <_usb_d_dev_trans_in_isr+0x86>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    6172:	1cfb      	adds	r3, r7, #3
    6174:	781b      	ldrb	r3, [r3, #0]
    6176:	2202      	movs	r2, #2
    6178:	4013      	ands	r3, r2
    617a:	d005      	beq.n	6188 <_usb_d_dev_trans_in_isr+0x50>
		_usb_d_dev_in_next(ept, true);
    617c:	687b      	ldr	r3, [r7, #4]
    617e:	2101      	movs	r1, #1
    6180:	0018      	movs	r0, r3
    6182:	4b13      	ldr	r3, [pc, #76]	; (61d0 <_usb_d_dev_trans_in_isr+0x98>)
    6184:	4798      	blx	r3
}
    6186:	e01a      	b.n	61be <_usb_d_dev_trans_in_isr+0x86>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    6188:	687b      	ldr	r3, [r7, #4]
    618a:	7cdb      	ldrb	r3, [r3, #19]
    618c:	2207      	movs	r2, #7
    618e:	4013      	ands	r3, r2
    6190:	b2db      	uxtb	r3, r3
    6192:	2b01      	cmp	r3, #1
    6194:	d113      	bne.n	61be <_usb_d_dev_trans_in_isr+0x86>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    6196:	1cfb      	adds	r3, r7, #3
    6198:	781b      	ldrb	r3, [r3, #0]
    619a:	2204      	movs	r2, #4
    619c:	4013      	ands	r3, r2
    619e:	d005      	beq.n	61ac <_usb_d_dev_trans_in_isr+0x74>
			_usb_d_dev_handle_trfail(ept, 0);
    61a0:	687b      	ldr	r3, [r7, #4]
    61a2:	2100      	movs	r1, #0
    61a4:	0018      	movs	r0, r3
    61a6:	4b09      	ldr	r3, [pc, #36]	; (61cc <_usb_d_dev_trans_in_isr+0x94>)
    61a8:	4798      	blx	r3
}
    61aa:	e008      	b.n	61be <_usb_d_dev_trans_in_isr+0x86>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    61ac:	1cfb      	adds	r3, r7, #3
    61ae:	781b      	ldrb	r3, [r3, #0]
    61b0:	2210      	movs	r2, #16
    61b2:	4013      	ands	r3, r2
    61b4:	d003      	beq.n	61be <_usb_d_dev_trans_in_isr+0x86>
			_usb_d_dev_handle_setup(ept);
    61b6:	687b      	ldr	r3, [r7, #4]
    61b8:	0018      	movs	r0, r3
    61ba:	4b06      	ldr	r3, [pc, #24]	; (61d4 <_usb_d_dev_trans_in_isr+0x9c>)
    61bc:	4798      	blx	r3
}
    61be:	46c0      	nop			; (mov r8, r8)
    61c0:	46bd      	mov	sp, r7
    61c2:	b002      	add	sp, #8
    61c4:	bd80      	pop	{r7, pc}
    61c6:	46c0      	nop			; (mov r8, r8)
    61c8:	00005e79 	.word	0x00005e79
    61cc:	00005ec9 	.word	0x00005ec9
    61d0:	00005745 	.word	0x00005745
    61d4:	00005d75 	.word	0x00005d75

000061d8 <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    61d8:	b580      	push	{r7, lr}
    61da:	b082      	sub	sp, #8
    61dc:	af00      	add	r7, sp, #0
    61de:	6078      	str	r0, [r7, #4]
    61e0:	000a      	movs	r2, r1
    61e2:	1cfb      	adds	r3, r7, #3
    61e4:	701a      	strb	r2, [r3, #0]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    61e6:	1cfb      	adds	r3, r7, #3
    61e8:	781b      	ldrb	r3, [r3, #0]
    61ea:	2220      	movs	r2, #32
    61ec:	4013      	ands	r3, r2
    61ee:	d005      	beq.n	61fc <_usb_d_dev_trans_out_isr+0x24>
		_usb_d_dev_handle_stall(ept, 0);
    61f0:	687b      	ldr	r3, [r7, #4]
    61f2:	2100      	movs	r1, #0
    61f4:	0018      	movs	r0, r3
    61f6:	4b1c      	ldr	r3, [pc, #112]	; (6268 <_usb_d_dev_trans_out_isr+0x90>)
    61f8:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    61fa:	e030      	b.n	625e <_usb_d_dev_trans_out_isr+0x86>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    61fc:	1cfb      	adds	r3, r7, #3
    61fe:	781b      	ldrb	r3, [r3, #0]
    6200:	2204      	movs	r2, #4
    6202:	4013      	ands	r3, r2
    6204:	d005      	beq.n	6212 <_usb_d_dev_trans_out_isr+0x3a>
		_usb_d_dev_handle_trfail(ept, 0);
    6206:	687b      	ldr	r3, [r7, #4]
    6208:	2100      	movs	r1, #0
    620a:	0018      	movs	r0, r3
    620c:	4b17      	ldr	r3, [pc, #92]	; (626c <_usb_d_dev_trans_out_isr+0x94>)
    620e:	4798      	blx	r3
}
    6210:	e025      	b.n	625e <_usb_d_dev_trans_out_isr+0x86>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    6212:	1cfb      	adds	r3, r7, #3
    6214:	781b      	ldrb	r3, [r3, #0]
    6216:	2201      	movs	r2, #1
    6218:	4013      	ands	r3, r2
    621a:	d005      	beq.n	6228 <_usb_d_dev_trans_out_isr+0x50>
		_usb_d_dev_out_next(ept, true);
    621c:	687b      	ldr	r3, [r7, #4]
    621e:	2101      	movs	r1, #1
    6220:	0018      	movs	r0, r3
    6222:	4b13      	ldr	r3, [pc, #76]	; (6270 <_usb_d_dev_trans_out_isr+0x98>)
    6224:	4798      	blx	r3
}
    6226:	e01a      	b.n	625e <_usb_d_dev_trans_out_isr+0x86>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    6228:	687b      	ldr	r3, [r7, #4]
    622a:	7cdb      	ldrb	r3, [r3, #19]
    622c:	2207      	movs	r2, #7
    622e:	4013      	ands	r3, r2
    6230:	b2db      	uxtb	r3, r3
    6232:	2b01      	cmp	r3, #1
    6234:	d113      	bne.n	625e <_usb_d_dev_trans_out_isr+0x86>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    6236:	1cfb      	adds	r3, r7, #3
    6238:	781b      	ldrb	r3, [r3, #0]
    623a:	2208      	movs	r2, #8
    623c:	4013      	ands	r3, r2
    623e:	d005      	beq.n	624c <_usb_d_dev_trans_out_isr+0x74>
			_usb_d_dev_handle_trfail(ept, 1);
    6240:	687b      	ldr	r3, [r7, #4]
    6242:	2101      	movs	r1, #1
    6244:	0018      	movs	r0, r3
    6246:	4b09      	ldr	r3, [pc, #36]	; (626c <_usb_d_dev_trans_out_isr+0x94>)
    6248:	4798      	blx	r3
}
    624a:	e008      	b.n	625e <_usb_d_dev_trans_out_isr+0x86>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    624c:	1cfb      	adds	r3, r7, #3
    624e:	781b      	ldrb	r3, [r3, #0]
    6250:	2210      	movs	r2, #16
    6252:	4013      	ands	r3, r2
    6254:	d003      	beq.n	625e <_usb_d_dev_trans_out_isr+0x86>
			_usb_d_dev_handle_setup(ept);
    6256:	687b      	ldr	r3, [r7, #4]
    6258:	0018      	movs	r0, r3
    625a:	4b06      	ldr	r3, [pc, #24]	; (6274 <_usb_d_dev_trans_out_isr+0x9c>)
    625c:	4798      	blx	r3
}
    625e:	46c0      	nop			; (mov r8, r8)
    6260:	46bd      	mov	sp, r7
    6262:	b002      	add	sp, #8
    6264:	bd80      	pop	{r7, pc}
    6266:	46c0      	nop			; (mov r8, r8)
    6268:	00005e79 	.word	0x00005e79
    626c:	00005ec9 	.word	0x00005ec9
    6270:	000059e5 	.word	0x000059e5
    6274:	00005d75 	.word	0x00005d75

00006278 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    6278:	b580      	push	{r7, lr}
    627a:	b084      	sub	sp, #16
    627c:	af00      	add	r7, sp, #0
    627e:	6078      	str	r0, [r7, #4]
    6280:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    6282:	4b37      	ldr	r3, [pc, #220]	; (6360 <_usb_d_dev_handle_eps+0xe8>)
    6284:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    6286:	683b      	ldr	r3, [r7, #0]
    6288:	7c9a      	ldrb	r2, [r3, #18]
    628a:	230b      	movs	r3, #11
    628c:	18fb      	adds	r3, r7, r3
    628e:	210f      	movs	r1, #15
    6290:	400a      	ands	r2, r1
    6292:	701a      	strb	r2, [r3, #0]

	if (!(epint & (1u << epn))) {
    6294:	230b      	movs	r3, #11
    6296:	18fb      	adds	r3, r7, r3
    6298:	781b      	ldrb	r3, [r3, #0]
    629a:	2201      	movs	r2, #1
    629c:	409a      	lsls	r2, r3
    629e:	0013      	movs	r3, r2
    62a0:	687a      	ldr	r2, [r7, #4]
    62a2:	4013      	ands	r3, r2
    62a4:	d057      	beq.n	6356 <_usb_d_dev_handle_eps+0xde>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    62a6:	230b      	movs	r3, #11
    62a8:	18fb      	adds	r3, r7, r3
    62aa:	781a      	ldrb	r2, [r3, #0]
    62ac:	230a      	movs	r3, #10
    62ae:	18fb      	adds	r3, r7, r3
    62b0:	68f9      	ldr	r1, [r7, #12]
    62b2:	3208      	adds	r2, #8
    62b4:	0152      	lsls	r2, r2, #5
    62b6:	188a      	adds	r2, r1, r2
    62b8:	3207      	adds	r2, #7
    62ba:	7812      	ldrb	r2, [r2, #0]
    62bc:	701a      	strb	r2, [r3, #0]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    62be:	230b      	movs	r3, #11
    62c0:	18fb      	adds	r3, r7, r3
    62c2:	7819      	ldrb	r1, [r3, #0]
    62c4:	2309      	movs	r3, #9
    62c6:	18fb      	adds	r3, r7, r3
    62c8:	68f8      	ldr	r0, [r7, #12]
    62ca:	220a      	movs	r2, #10
    62cc:	32ff      	adds	r2, #255	; 0xff
    62ce:	0149      	lsls	r1, r1, #5
    62d0:	1841      	adds	r1, r0, r1
    62d2:	188a      	adds	r2, r1, r2
    62d4:	7812      	ldrb	r2, [r2, #0]
    62d6:	701a      	strb	r2, [r3, #0]
	flags &= mask;
    62d8:	230a      	movs	r3, #10
    62da:	18fb      	adds	r3, r7, r3
    62dc:	220a      	movs	r2, #10
    62de:	18ba      	adds	r2, r7, r2
    62e0:	2109      	movs	r1, #9
    62e2:	1879      	adds	r1, r7, r1
    62e4:	7812      	ldrb	r2, [r2, #0]
    62e6:	7809      	ldrb	r1, [r1, #0]
    62e8:	400a      	ands	r2, r1
    62ea:	701a      	strb	r2, [r3, #0]
	if (flags) {
    62ec:	230a      	movs	r3, #10
    62ee:	18fb      	adds	r3, r7, r3
    62f0:	781b      	ldrb	r3, [r3, #0]
    62f2:	2b00      	cmp	r3, #0
    62f4:	d030      	beq.n	6358 <_usb_d_dev_handle_eps+0xe0>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    62f6:	683b      	ldr	r3, [r7, #0]
    62f8:	7cdb      	ldrb	r3, [r3, #19]
    62fa:	2207      	movs	r2, #7
    62fc:	4013      	ands	r3, r2
    62fe:	b2db      	uxtb	r3, r3
    6300:	2b01      	cmp	r3, #1
    6302:	d10f      	bne.n	6324 <_usb_d_dev_handle_eps+0xac>
    6304:	683b      	ldr	r3, [r7, #0]
    6306:	7cdb      	ldrb	r3, [r3, #19]
    6308:	2240      	movs	r2, #64	; 0x40
    630a:	4013      	ands	r3, r2
    630c:	b2db      	uxtb	r3, r3
    630e:	2b00      	cmp	r3, #0
    6310:	d108      	bne.n	6324 <_usb_d_dev_handle_eps+0xac>
			_usb_d_dev_trans_setup_isr(ept, flags);
    6312:	230a      	movs	r3, #10
    6314:	18fb      	adds	r3, r7, r3
    6316:	781a      	ldrb	r2, [r3, #0]
    6318:	683b      	ldr	r3, [r7, #0]
    631a:	0011      	movs	r1, r2
    631c:	0018      	movs	r0, r3
    631e:	4b11      	ldr	r3, [pc, #68]	; (6364 <_usb_d_dev_handle_eps+0xec>)
    6320:	4798      	blx	r3
    6322:	e019      	b.n	6358 <_usb_d_dev_handle_eps+0xe0>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    6324:	683b      	ldr	r3, [r7, #0]
    6326:	7cdb      	ldrb	r3, [r3, #19]
    6328:	227f      	movs	r2, #127	; 0x7f
    632a:	4393      	bics	r3, r2
    632c:	b2db      	uxtb	r3, r3
    632e:	2b00      	cmp	r3, #0
    6330:	d008      	beq.n	6344 <_usb_d_dev_handle_eps+0xcc>
			_usb_d_dev_trans_in_isr(ept, flags);
    6332:	230a      	movs	r3, #10
    6334:	18fb      	adds	r3, r7, r3
    6336:	781a      	ldrb	r2, [r3, #0]
    6338:	683b      	ldr	r3, [r7, #0]
    633a:	0011      	movs	r1, r2
    633c:	0018      	movs	r0, r3
    633e:	4b0a      	ldr	r3, [pc, #40]	; (6368 <_usb_d_dev_handle_eps+0xf0>)
    6340:	4798      	blx	r3
    6342:	e009      	b.n	6358 <_usb_d_dev_handle_eps+0xe0>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    6344:	230a      	movs	r3, #10
    6346:	18fb      	adds	r3, r7, r3
    6348:	781a      	ldrb	r2, [r3, #0]
    634a:	683b      	ldr	r3, [r7, #0]
    634c:	0011      	movs	r1, r2
    634e:	0018      	movs	r0, r3
    6350:	4b06      	ldr	r3, [pc, #24]	; (636c <_usb_d_dev_handle_eps+0xf4>)
    6352:	4798      	blx	r3
    6354:	e000      	b.n	6358 <_usb_d_dev_handle_eps+0xe0>
		return;
    6356:	46c0      	nop			; (mov r8, r8)
		}
	}
}
    6358:	46bd      	mov	sp, r7
    635a:	b004      	add	sp, #16
    635c:	bd80      	pop	{r7, pc}
    635e:	46c0      	nop			; (mov r8, r8)
    6360:	41005000 	.word	0x41005000
    6364:	000060dd 	.word	0x000060dd
    6368:	00006139 	.word	0x00006139
    636c:	000061d9 	.word	0x000061d9

00006370 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    6370:	b580      	push	{r7, lr}
    6372:	b084      	sub	sp, #16
    6374:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    6376:	4b1f      	ldr	r3, [pc, #124]	; (63f4 <_usb_d_dev_handler+0x84>)
    6378:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    637a:	1dbb      	adds	r3, r7, #6
    637c:	68ba      	ldr	r2, [r7, #8]
    637e:	8c12      	ldrh	r2, [r2, #32]
    6380:	801a      	strh	r2, [r3, #0]
	if (0 == epint) {
    6382:	1dbb      	adds	r3, r7, #6
    6384:	881b      	ldrh	r3, [r3, #0]
    6386:	2b00      	cmp	r3, #0
    6388:	d103      	bne.n	6392 <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    638a:	4b1b      	ldr	r3, [pc, #108]	; (63f8 <_usb_d_dev_handler+0x88>)
    638c:	4798      	blx	r3
    638e:	1e03      	subs	r3, r0, #0
    6390:	d12b      	bne.n	63ea <_usb_d_dev_handler+0x7a>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    6392:	230f      	movs	r3, #15
    6394:	18fb      	adds	r3, r7, r3
    6396:	2200      	movs	r2, #0
    6398:	701a      	strb	r2, [r3, #0]
    639a:	e020      	b.n	63de <_usb_d_dev_handler+0x6e>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    639c:	230f      	movs	r3, #15
    639e:	18fb      	adds	r3, r7, r3
    63a0:	781a      	ldrb	r2, [r3, #0]
    63a2:	0013      	movs	r3, r2
    63a4:	009b      	lsls	r3, r3, #2
    63a6:	189b      	adds	r3, r3, r2
    63a8:	009b      	lsls	r3, r3, #2
    63aa:	3310      	adds	r3, #16
    63ac:	001a      	movs	r2, r3
    63ae:	4b13      	ldr	r3, [pc, #76]	; (63fc <_usb_d_dev_handler+0x8c>)
    63b0:	18d3      	adds	r3, r2, r3
    63b2:	3304      	adds	r3, #4
    63b4:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    63b6:	683b      	ldr	r3, [r7, #0]
    63b8:	7c9b      	ldrb	r3, [r3, #18]
    63ba:	2bff      	cmp	r3, #255	; 0xff
    63bc:	d007      	beq.n	63ce <_usb_d_dev_handler+0x5e>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    63be:	1dbb      	adds	r3, r7, #6
    63c0:	881b      	ldrh	r3, [r3, #0]
    63c2:	683a      	ldr	r2, [r7, #0]
    63c4:	0011      	movs	r1, r2
    63c6:	0018      	movs	r0, r3
    63c8:	4b0d      	ldr	r3, [pc, #52]	; (6400 <_usb_d_dev_handler+0x90>)
    63ca:	4798      	blx	r3
    63cc:	e000      	b.n	63d0 <_usb_d_dev_handler+0x60>
			continue;
    63ce:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < USB_D_N_EP; i++) {
    63d0:	230f      	movs	r3, #15
    63d2:	18fb      	adds	r3, r7, r3
    63d4:	781a      	ldrb	r2, [r3, #0]
    63d6:	230f      	movs	r3, #15
    63d8:	18fb      	adds	r3, r7, r3
    63da:	3201      	adds	r2, #1
    63dc:	701a      	strb	r2, [r3, #0]
    63de:	230f      	movs	r3, #15
    63e0:	18fb      	adds	r3, r7, r3
    63e2:	781b      	ldrb	r3, [r3, #0]
    63e4:	2b10      	cmp	r3, #16
    63e6:	d9d9      	bls.n	639c <_usb_d_dev_handler+0x2c>
    63e8:	e000      	b.n	63ec <_usb_d_dev_handler+0x7c>
			return;
    63ea:	46c0      	nop			; (mov r8, r8)
	}
}
    63ec:	46bd      	mov	sp, r7
    63ee:	b004      	add	sp, #16
    63f0:	bd80      	pop	{r7, pc}
    63f2:	46c0      	nop			; (mov r8, r8)
    63f4:	41005000 	.word	0x41005000
    63f8:	00005679 	.word	0x00005679
    63fc:	20000ef0 	.word	0x20000ef0
    6400:	00006279 	.word	0x00006279

00006404 <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    6404:	b580      	push	{r7, lr}
    6406:	b082      	sub	sp, #8
    6408:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    640a:	1dfb      	adds	r3, r7, #7
    640c:	2200      	movs	r2, #0
    640e:	701a      	strb	r2, [r3, #0]
    6410:	e02b      	b.n	646a <_usb_d_dev_reset_epts+0x66>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    6412:	1dfb      	adds	r3, r7, #7
    6414:	781a      	ldrb	r2, [r3, #0]
    6416:	0013      	movs	r3, r2
    6418:	009b      	lsls	r3, r3, #2
    641a:	189b      	adds	r3, r3, r2
    641c:	009b      	lsls	r3, r3, #2
    641e:	3310      	adds	r3, #16
    6420:	001a      	movs	r2, r3
    6422:	4b19      	ldr	r3, [pc, #100]	; (6488 <_usb_d_dev_reset_epts+0x84>)
    6424:	18d3      	adds	r3, r2, r3
    6426:	3304      	adds	r3, #4
    6428:	2103      	movs	r1, #3
    642a:	0018      	movs	r0, r3
    642c:	4b17      	ldr	r3, [pc, #92]	; (648c <_usb_d_dev_reset_epts+0x88>)
    642e:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    6430:	1dfb      	adds	r3, r7, #7
    6432:	781a      	ldrb	r2, [r3, #0]
    6434:	4914      	ldr	r1, [pc, #80]	; (6488 <_usb_d_dev_reset_epts+0x84>)
    6436:	2026      	movs	r0, #38	; 0x26
    6438:	0013      	movs	r3, r2
    643a:	009b      	lsls	r3, r3, #2
    643c:	189b      	adds	r3, r3, r2
    643e:	009b      	lsls	r3, r3, #2
    6440:	18cb      	adds	r3, r1, r3
    6442:	181b      	adds	r3, r3, r0
    6444:	22ff      	movs	r2, #255	; 0xff
    6446:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    6448:	1dfb      	adds	r3, r7, #7
    644a:	781a      	ldrb	r2, [r3, #0]
    644c:	490e      	ldr	r1, [pc, #56]	; (6488 <_usb_d_dev_reset_epts+0x84>)
    644e:	2027      	movs	r0, #39	; 0x27
    6450:	0013      	movs	r3, r2
    6452:	009b      	lsls	r3, r3, #2
    6454:	189b      	adds	r3, r3, r2
    6456:	009b      	lsls	r3, r3, #2
    6458:	18cb      	adds	r3, r1, r3
    645a:	181b      	adds	r3, r3, r0
    645c:	2200      	movs	r2, #0
    645e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    6460:	1dfb      	adds	r3, r7, #7
    6462:	781a      	ldrb	r2, [r3, #0]
    6464:	1dfb      	adds	r3, r7, #7
    6466:	3201      	adds	r2, #1
    6468:	701a      	strb	r2, [r3, #0]
    646a:	1dfb      	adds	r3, r7, #7
    646c:	781b      	ldrb	r3, [r3, #0]
    646e:	2b10      	cmp	r3, #16
    6470:	d9cf      	bls.n	6412 <_usb_d_dev_reset_epts+0xe>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    6472:	2380      	movs	r3, #128	; 0x80
    6474:	005a      	lsls	r2, r3, #1
    6476:	4b06      	ldr	r3, [pc, #24]	; (6490 <_usb_d_dev_reset_epts+0x8c>)
    6478:	2100      	movs	r1, #0
    647a:	0018      	movs	r0, r3
    647c:	4b05      	ldr	r3, [pc, #20]	; (6494 <_usb_d_dev_reset_epts+0x90>)
    647e:	4798      	blx	r3
}
    6480:	46c0      	nop			; (mov r8, r8)
    6482:	46bd      	mov	sp, r7
    6484:	b002      	add	sp, #8
    6486:	bd80      	pop	{r7, pc}
    6488:	20000ef0 	.word	0x20000ef0
    648c:	00006ea9 	.word	0x00006ea9
    6490:	20001058 	.word	0x20001058
    6494:	0000d219 	.word	0x0000d219

00006498 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    6498:	b580      	push	{r7, lr}
    649a:	b084      	sub	sp, #16
    649c:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    649e:	4b34      	ldr	r3, [pc, #208]	; (6570 <_usb_d_dev_init+0xd8>)
    64a0:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    64a2:	230b      	movs	r3, #11
    64a4:	18fb      	adds	r3, r7, r3
    64a6:	2201      	movs	r2, #1
    64a8:	701a      	strb	r2, [r3, #0]
	const uint8_t spdconf[4] = {
    64aa:	1d3b      	adds	r3, r7, #4
    64ac:	2204      	movs	r2, #4
    64ae:	701a      	strb	r2, [r3, #0]
    64b0:	1d3b      	adds	r3, r7, #4
    64b2:	2200      	movs	r2, #0
    64b4:	705a      	strb	r2, [r3, #1]
    64b6:	1d3b      	adds	r3, r7, #4
    64b8:	2200      	movs	r2, #0
    64ba:	709a      	strb	r2, [r3, #2]
    64bc:	1d3b      	adds	r3, r7, #4
    64be:	2200      	movs	r2, #0
    64c0:	70da      	strb	r2, [r3, #3]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    64c2:	68fb      	ldr	r3, [r7, #12]
    64c4:	2101      	movs	r1, #1
    64c6:	0018      	movs	r0, r3
    64c8:	4b2a      	ldr	r3, [pc, #168]	; (6574 <_usb_d_dev_init+0xdc>)
    64ca:	4798      	blx	r3
    64cc:	0003      	movs	r3, r0
    64ce:	001a      	movs	r2, r3
    64d0:	2301      	movs	r3, #1
    64d2:	4053      	eors	r3, r2
    64d4:	b2db      	uxtb	r3, r3
    64d6:	2b00      	cmp	r3, #0
    64d8:	d014      	beq.n	6504 <_usb_d_dev_init+0x6c>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    64da:	68fb      	ldr	r3, [r7, #12]
    64dc:	2102      	movs	r1, #2
    64de:	0018      	movs	r0, r3
    64e0:	4b25      	ldr	r3, [pc, #148]	; (6578 <_usb_d_dev_init+0xe0>)
    64e2:	4798      	blx	r3
    64e4:	1e03      	subs	r3, r0, #0
    64e6:	d008      	beq.n	64fa <_usb_d_dev_init+0x62>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    64e8:	68fb      	ldr	r3, [r7, #12]
    64ea:	0018      	movs	r0, r3
    64ec:	4b23      	ldr	r3, [pc, #140]	; (657c <_usb_d_dev_init+0xe4>)
    64ee:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    64f0:	68fb      	ldr	r3, [r7, #12]
    64f2:	2102      	movs	r1, #2
    64f4:	0018      	movs	r0, r3
    64f6:	4b22      	ldr	r3, [pc, #136]	; (6580 <_usb_d_dev_init+0xe8>)
    64f8:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    64fa:	68fb      	ldr	r3, [r7, #12]
    64fc:	2101      	movs	r1, #1
    64fe:	0018      	movs	r0, r3
    6500:	4b20      	ldr	r3, [pc, #128]	; (6584 <_usb_d_dev_init+0xec>)
    6502:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    6504:	68fb      	ldr	r3, [r7, #12]
    6506:	2101      	movs	r1, #1
    6508:	0018      	movs	r0, r3
    650a:	4b1d      	ldr	r3, [pc, #116]	; (6580 <_usb_d_dev_init+0xe8>)
    650c:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    650e:	4b1e      	ldr	r3, [pc, #120]	; (6588 <_usb_d_dev_init+0xf0>)
    6510:	4a1e      	ldr	r2, [pc, #120]	; (658c <_usb_d_dev_init+0xf4>)
    6512:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    6514:	4b1c      	ldr	r3, [pc, #112]	; (6588 <_usb_d_dev_init+0xf0>)
    6516:	4a1d      	ldr	r2, [pc, #116]	; (658c <_usb_d_dev_init+0xf4>)
    6518:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    651a:	4b1b      	ldr	r3, [pc, #108]	; (6588 <_usb_d_dev_init+0xf0>)
    651c:	4a1b      	ldr	r2, [pc, #108]	; (658c <_usb_d_dev_init+0xf4>)
    651e:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    6520:	4b19      	ldr	r3, [pc, #100]	; (6588 <_usb_d_dev_init+0xf0>)
    6522:	4a1a      	ldr	r2, [pc, #104]	; (658c <_usb_d_dev_init+0xf4>)
    6524:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    6526:	4b18      	ldr	r3, [pc, #96]	; (6588 <_usb_d_dev_init+0xf0>)
    6528:	4a18      	ldr	r2, [pc, #96]	; (658c <_usb_d_dev_init+0xf4>)
    652a:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    652c:	4b18      	ldr	r3, [pc, #96]	; (6590 <_usb_d_dev_init+0xf8>)
    652e:	4798      	blx	r3

	_usb_load_calib();
    6530:	4b18      	ldr	r3, [pc, #96]	; (6594 <_usb_d_dev_init+0xfc>)
    6532:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    6534:	68fb      	ldr	r3, [r7, #12]
    6536:	2104      	movs	r1, #4
    6538:	0018      	movs	r0, r3
    653a:	4b12      	ldr	r3, [pc, #72]	; (6584 <_usb_d_dev_init+0xec>)
    653c:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    653e:	4a16      	ldr	r2, [pc, #88]	; (6598 <_usb_d_dev_init+0x100>)
    6540:	68fb      	ldr	r3, [r7, #12]
    6542:	0011      	movs	r1, r2
    6544:	0018      	movs	r0, r3
    6546:	4b15      	ldr	r3, [pc, #84]	; (659c <_usb_d_dev_init+0x104>)
    6548:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    654a:	230b      	movs	r3, #11
    654c:	18fb      	adds	r3, r7, r3
    654e:	781b      	ldrb	r3, [r3, #0]
    6550:	1d3a      	adds	r2, r7, #4
    6552:	5cd3      	ldrb	r3, [r2, r3]
    6554:	2201      	movs	r2, #1
    6556:	4313      	orrs	r3, r2
    6558:	b2db      	uxtb	r3, r3
    655a:	b29a      	uxth	r2, r3
    655c:	68fb      	ldr	r3, [r7, #12]
    655e:	0011      	movs	r1, r2
    6560:	0018      	movs	r0, r3
    6562:	4b0f      	ldr	r3, [pc, #60]	; (65a0 <_usb_d_dev_init+0x108>)
    6564:	4798      	blx	r3

	return ERR_NONE;
    6566:	2300      	movs	r3, #0
}
    6568:	0018      	movs	r0, r3
    656a:	46bd      	mov	sp, r7
    656c:	b004      	add	sp, #16
    656e:	bd80      	pop	{r7, pc}
    6570:	41005000 	.word	0x41005000
    6574:	0000467f 	.word	0x0000467f
    6578:	00004a3d 	.word	0x00004a3d
    657c:	00004a0d 	.word	0x00004a0d
    6580:	00004655 	.word	0x00004655
    6584:	00004a85 	.word	0x00004a85
    6588:	20000ef0 	.word	0x20000ef0
    658c:	00004b49 	.word	0x00004b49
    6590:	00006405 	.word	0x00006405
    6594:	00004b5d 	.word	0x00004b5d
    6598:	20001058 	.word	0x20001058
    659c:	00004b31 	.word	0x00004b31
    65a0:	00004af5 	.word	0x00004af5

000065a4 <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_IRQn);
	NVIC_ClearPendingIRQ(USB_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    65a4:	b590      	push	{r4, r7, lr}
    65a6:	b083      	sub	sp, #12
    65a8:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    65aa:	4b18      	ldr	r3, [pc, #96]	; (660c <_usb_d_dev_enable+0x68>)
    65ac:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    65ae:	687b      	ldr	r3, [r7, #4]
    65b0:	2103      	movs	r1, #3
    65b2:	0018      	movs	r0, r3
    65b4:	4b16      	ldr	r3, [pc, #88]	; (6610 <_usb_d_dev_enable+0x6c>)
    65b6:	4798      	blx	r3
    65b8:	1e03      	subs	r3, r0, #0
    65ba:	d002      	beq.n	65c2 <_usb_d_dev_enable+0x1e>
		return -USB_ERR_DENIED;
    65bc:	2311      	movs	r3, #17
    65be:	425b      	negs	r3, r3
    65c0:	e01f      	b.n	6602 <_usb_d_dev_enable+0x5e>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    65c2:	1cfc      	adds	r4, r7, #3
    65c4:	687b      	ldr	r3, [r7, #4]
    65c6:	0018      	movs	r0, r3
    65c8:	4b12      	ldr	r3, [pc, #72]	; (6614 <_usb_d_dev_enable+0x70>)
    65ca:	4798      	blx	r3
    65cc:	0003      	movs	r3, r0
    65ce:	7023      	strb	r3, [r4, #0]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    65d0:	1cfb      	adds	r3, r7, #3
    65d2:	781b      	ldrb	r3, [r3, #0]
    65d4:	2202      	movs	r2, #2
    65d6:	4013      	ands	r3, r2
    65d8:	d109      	bne.n	65ee <_usb_d_dev_enable+0x4a>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    65da:	1cfb      	adds	r3, r7, #3
    65dc:	781b      	ldrb	r3, [r3, #0]
    65de:	2202      	movs	r2, #2
    65e0:	4313      	orrs	r3, r2
    65e2:	b2da      	uxtb	r2, r3
    65e4:	687b      	ldr	r3, [r7, #4]
    65e6:	0011      	movs	r1, r2
    65e8:	0018      	movs	r0, r3
    65ea:	4b0b      	ldr	r3, [pc, #44]	; (6618 <_usb_d_dev_enable+0x74>)
    65ec:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_IRQn);
    65ee:	2007      	movs	r0, #7
    65f0:	4b0a      	ldr	r3, [pc, #40]	; (661c <_usb_d_dev_enable+0x78>)
    65f2:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    65f4:	4a0a      	ldr	r2, [pc, #40]	; (6620 <_usb_d_dev_enable+0x7c>)
    65f6:	687b      	ldr	r3, [r7, #4]
    65f8:	0011      	movs	r1, r2
    65fa:	0018      	movs	r0, r3
    65fc:	4b09      	ldr	r3, [pc, #36]	; (6624 <_usb_d_dev_enable+0x80>)
    65fe:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    6600:	2300      	movs	r3, #0
}
    6602:	0018      	movs	r0, r3
    6604:	46bd      	mov	sp, r7
    6606:	b003      	add	sp, #12
    6608:	bd90      	pop	{r4, r7, pc}
    660a:	46c0      	nop			; (mov r8, r8)
    660c:	41005000 	.word	0x41005000
    6610:	000049d3 	.word	0x000049d3
    6614:	00004ab1 	.word	0x00004ab1
    6618:	00004a85 	.word	0x00004a85
    661c:	000045c5 	.word	0x000045c5
    6620:	0000028d 	.word	0x0000028d
    6624:	00004981 	.word	0x00004981

00006628 <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    6628:	b580      	push	{r7, lr}
    662a:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    662c:	4b03      	ldr	r3, [pc, #12]	; (663c <_usb_d_dev_attach+0x14>)
    662e:	0018      	movs	r0, r3
    6630:	4b03      	ldr	r3, [pc, #12]	; (6640 <_usb_d_dev_attach+0x18>)
    6632:	4798      	blx	r3
}
    6634:	46c0      	nop			; (mov r8, r8)
    6636:	46bd      	mov	sp, r7
    6638:	bd80      	pop	{r7, pc}
    663a:	46c0      	nop			; (mov r8, r8)
    663c:	41005000 	.word	0x41005000
    6640:	00004ad5 	.word	0x00004ad5

00006644 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    6644:	b580      	push	{r7, lr}
    6646:	b082      	sub	sp, #8
    6648:	af00      	add	r7, sp, #0
    664a:	0002      	movs	r2, r0
    664c:	1dfb      	adds	r3, r7, #7
    664e:	701a      	strb	r2, [r3, #0]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    6650:	1dfb      	adds	r3, r7, #7
    6652:	781b      	ldrb	r3, [r3, #0]
    6654:	2280      	movs	r2, #128	; 0x80
    6656:	4252      	negs	r2, r2
    6658:	4313      	orrs	r3, r2
    665a:	b2db      	uxtb	r3, r3
    665c:	4a04      	ldr	r2, [pc, #16]	; (6670 <_usb_d_dev_set_address+0x2c>)
    665e:	0019      	movs	r1, r3
    6660:	0010      	movs	r0, r2
    6662:	4b04      	ldr	r3, [pc, #16]	; (6674 <_usb_d_dev_set_address+0x30>)
    6664:	4798      	blx	r3
}
    6666:	46c0      	nop			; (mov r8, r8)
    6668:	46bd      	mov	sp, r7
    666a:	b002      	add	sp, #8
    666c:	bd80      	pop	{r7, pc}
    666e:	46c0      	nop			; (mov r8, r8)
    6670:	41005000 	.word	0x41005000
    6674:	00004b13 	.word	0x00004b13

00006678 <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    6678:	b590      	push	{r4, r7, lr}
    667a:	b085      	sub	sp, #20
    667c:	af00      	add	r7, sp, #0
    667e:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    6680:	4b1c      	ldr	r3, [pc, #112]	; (66f4 <_usb_d_dev_trans_setup+0x7c>)
    6682:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    6684:	687b      	ldr	r3, [r7, #4]
    6686:	7c9a      	ldrb	r2, [r3, #18]
    6688:	230b      	movs	r3, #11
    668a:	18fb      	adds	r3, r7, r3
    668c:	210f      	movs	r1, #15
    668e:	400a      	ands	r2, r1
    6690:	701a      	strb	r2, [r3, #0]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    6692:	687b      	ldr	r3, [r7, #4]
    6694:	68db      	ldr	r3, [r3, #12]
    6696:	001a      	movs	r2, r3
    6698:	230b      	movs	r3, #11
    669a:	18fb      	adds	r3, r7, r3
    669c:	781b      	ldrb	r3, [r3, #0]
    669e:	2100      	movs	r1, #0
    66a0:	0018      	movs	r0, r3
    66a2:	4b15      	ldr	r3, [pc, #84]	; (66f8 <_usb_d_dev_trans_setup+0x80>)
    66a4:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    66a6:	687b      	ldr	r3, [r7, #4]
    66a8:	8a1b      	ldrh	r3, [r3, #16]
    66aa:	001a      	movs	r2, r3
    66ac:	230b      	movs	r3, #11
    66ae:	18fb      	adds	r3, r7, r3
    66b0:	7818      	ldrb	r0, [r3, #0]
    66b2:	2300      	movs	r3, #0
    66b4:	2100      	movs	r1, #0
    66b6:	4c11      	ldr	r4, [pc, #68]	; (66fc <_usb_d_dev_trans_setup+0x84>)
    66b8:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    66ba:	230b      	movs	r3, #11
    66bc:	18fb      	adds	r3, r7, r3
    66be:	7819      	ldrb	r1, [r3, #0]
    66c0:	68fb      	ldr	r3, [r7, #12]
    66c2:	22b0      	movs	r2, #176	; 0xb0
    66c4:	0018      	movs	r0, r3
    66c6:	4b0e      	ldr	r3, [pc, #56]	; (6700 <_usb_d_dev_trans_setup+0x88>)
    66c8:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    66ca:	230b      	movs	r3, #11
    66cc:	18fb      	adds	r3, r7, r3
    66ce:	781b      	ldrb	r3, [r3, #0]
    66d0:	2200      	movs	r2, #0
    66d2:	2100      	movs	r1, #0
    66d4:	0018      	movs	r0, r3
    66d6:	4b0b      	ldr	r3, [pc, #44]	; (6704 <_usb_d_dev_trans_setup+0x8c>)
    66d8:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    66da:	230b      	movs	r3, #11
    66dc:	18fb      	adds	r3, r7, r3
    66de:	7819      	ldrb	r1, [r3, #0]
    66e0:	68fb      	ldr	r3, [r7, #12]
    66e2:	2210      	movs	r2, #16
    66e4:	0018      	movs	r0, r3
    66e6:	4b08      	ldr	r3, [pc, #32]	; (6708 <_usb_d_dev_trans_setup+0x90>)
    66e8:	4798      	blx	r3
}
    66ea:	46c0      	nop			; (mov r8, r8)
    66ec:	46bd      	mov	sp, r7
    66ee:	b005      	add	sp, #20
    66f0:	bd90      	pop	{r4, r7, pc}
    66f2:	46c0      	nop			; (mov r8, r8)
    66f4:	41005000 	.word	0x41005000
    66f8:	00005029 	.word	0x00005029
    66fc:	0000522d 	.word	0x0000522d
    6700:	000047af 	.word	0x000047af
    6704:	00005329 	.word	0x00005329
    6708:	0000480d 	.word	0x0000480d

0000670c <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    670c:	b590      	push	{r4, r7, lr}
    670e:	b089      	sub	sp, #36	; 0x24
    6710:	af00      	add	r7, sp, #0
    6712:	0004      	movs	r4, r0
    6714:	0008      	movs	r0, r1
    6716:	0011      	movs	r1, r2
    6718:	1dfb      	adds	r3, r7, #7
    671a:	1c22      	adds	r2, r4, #0
    671c:	701a      	strb	r2, [r3, #0]
    671e:	1dbb      	adds	r3, r7, #6
    6720:	1c02      	adds	r2, r0, #0
    6722:	701a      	strb	r2, [r3, #0]
    6724:	1d3b      	adds	r3, r7, #4
    6726:	1c0a      	adds	r2, r1, #0
    6728:	801a      	strh	r2, [r3, #0]
	uint8_t               epn = USB_EP_GET_N(ep);
    672a:	231f      	movs	r3, #31
    672c:	18fb      	adds	r3, r7, r3
    672e:	1dfa      	adds	r2, r7, #7
    6730:	7812      	ldrb	r2, [r2, #0]
    6732:	210f      	movs	r1, #15
    6734:	400a      	ands	r2, r1
    6736:	701a      	strb	r2, [r3, #0]
	bool                  dir = USB_EP_GET_DIR(ep);
    6738:	1dfb      	adds	r3, r7, #7
    673a:	781b      	ldrb	r3, [r3, #0]
    673c:	2280      	movs	r2, #128	; 0x80
    673e:	401a      	ands	r2, r3
    6740:	231e      	movs	r3, #30
    6742:	18fb      	adds	r3, r7, r3
    6744:	1e51      	subs	r1, r2, #1
    6746:	418a      	sbcs	r2, r1
    6748:	701a      	strb	r2, [r3, #0]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    674a:	231e      	movs	r3, #30
    674c:	18fb      	adds	r3, r7, r3
    674e:	781a      	ldrb	r2, [r3, #0]
    6750:	231f      	movs	r3, #31
    6752:	18fb      	adds	r3, r7, r3
    6754:	781b      	ldrb	r3, [r3, #0]
    6756:	0011      	movs	r1, r2
    6758:	0018      	movs	r0, r3
    675a:	4b49      	ldr	r3, [pc, #292]	; (6880 <_usb_d_dev_ep_init+0x174>)
    675c:	4798      	blx	r3
    675e:	0003      	movs	r3, r0
    6760:	61bb      	str	r3, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    6762:	2317      	movs	r3, #23
    6764:	18fb      	adds	r3, r7, r3
    6766:	1dba      	adds	r2, r7, #6
    6768:	7812      	ldrb	r2, [r2, #0]
    676a:	2103      	movs	r1, #3
    676c:	400a      	ands	r2, r1
    676e:	701a      	strb	r2, [r3, #0]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    6770:	231f      	movs	r3, #31
    6772:	18fb      	adds	r3, r7, r3
    6774:	781a      	ldrb	r2, [r3, #0]
    6776:	0013      	movs	r3, r2
    6778:	005b      	lsls	r3, r3, #1
    677a:	189b      	adds	r3, r3, r2
    677c:	009b      	lsls	r3, r3, #2
    677e:	4a41      	ldr	r2, [pc, #260]	; (6884 <_usb_d_dev_ep_init+0x178>)
    6780:	189b      	adds	r3, r3, r2
    6782:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    6784:	231f      	movs	r3, #31
    6786:	18fb      	adds	r3, r7, r3
    6788:	781b      	ldrb	r3, [r3, #0]
    678a:	2b07      	cmp	r3, #7
    678c:	d902      	bls.n	6794 <_usb_d_dev_ep_init+0x88>
		return -USB_ERR_PARAM;
    678e:	2312      	movs	r3, #18
    6790:	425b      	negs	r3, r3
    6792:	e070      	b.n	6876 <_usb_d_dev_ep_init+0x16a>
	}
	if (ept->ep != 0xFF) {
    6794:	69bb      	ldr	r3, [r7, #24]
    6796:	7c9b      	ldrb	r3, [r3, #18]
    6798:	2bff      	cmp	r3, #255	; 0xff
    679a:	d002      	beq.n	67a2 <_usb_d_dev_ep_init+0x96>
		return -USB_ERR_REDO;
    679c:	2314      	movs	r3, #20
    679e:	425b      	negs	r3, r3
    67a0:	e069      	b.n	6876 <_usb_d_dev_ep_init+0x16a>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    67a2:	2317      	movs	r3, #23
    67a4:	18fb      	adds	r3, r7, r3
    67a6:	781b      	ldrb	r3, [r3, #0]
    67a8:	2b00      	cmp	r3, #0
    67aa:	d123      	bne.n	67f4 <_usb_d_dev_ep_init+0xe8>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    67ac:	231e      	movs	r3, #30
    67ae:	18fb      	adds	r3, r7, r3
    67b0:	781b      	ldrb	r3, [r3, #0]
    67b2:	1e5a      	subs	r2, r3, #1
    67b4:	4193      	sbcs	r3, r2
    67b6:	b2db      	uxtb	r3, r3
    67b8:	2201      	movs	r2, #1
    67ba:	4053      	eors	r3, r2
    67bc:	b2db      	uxtb	r3, r3
    67be:	1c1a      	adds	r2, r3, #0
    67c0:	2301      	movs	r3, #1
    67c2:	4013      	ands	r3, r2
    67c4:	b2da      	uxtb	r2, r3
    67c6:	231f      	movs	r3, #31
    67c8:	18fb      	adds	r3, r7, r3
    67ca:	781b      	ldrb	r3, [r3, #0]
    67cc:	0011      	movs	r1, r2
    67ce:	0018      	movs	r0, r3
    67d0:	4b2b      	ldr	r3, [pc, #172]	; (6880 <_usb_d_dev_ep_init+0x174>)
    67d2:	4798      	blx	r3
    67d4:	0003      	movs	r3, r0
    67d6:	60fb      	str	r3, [r7, #12]
		if (ept_in->ep != 0xFF) {
    67d8:	68fb      	ldr	r3, [r7, #12]
    67da:	7c9b      	ldrb	r3, [r3, #18]
    67dc:	2bff      	cmp	r3, #255	; 0xff
    67de:	d002      	beq.n	67e6 <_usb_d_dev_ep_init+0xda>
			return -USB_ERR_REDO;
    67e0:	2314      	movs	r3, #20
    67e2:	425b      	negs	r3, r3
    67e4:	e047      	b.n	6876 <_usb_d_dev_ep_init+0x16a>
		}
		if (pcfg->cache == NULL) {
    67e6:	693b      	ldr	r3, [r7, #16]
    67e8:	681b      	ldr	r3, [r3, #0]
    67ea:	2b00      	cmp	r3, #0
    67ec:	d102      	bne.n	67f4 <_usb_d_dev_ep_init+0xe8>
			return -USB_ERR_FUNC;
    67ee:	2313      	movs	r3, #19
    67f0:	425b      	negs	r3, r3
    67f2:	e040      	b.n	6876 <_usb_d_dev_ep_init+0x16a>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    67f4:	231e      	movs	r3, #30
    67f6:	18fb      	adds	r3, r7, r3
    67f8:	781b      	ldrb	r3, [r3, #0]
    67fa:	2b00      	cmp	r3, #0
    67fc:	d005      	beq.n	680a <_usb_d_dev_ep_init+0xfe>
    67fe:	693b      	ldr	r3, [r7, #16]
    6800:	685b      	ldr	r3, [r3, #4]
    6802:	1e5a      	subs	r2, r3, #1
    6804:	4193      	sbcs	r3, r2
    6806:	b2db      	uxtb	r3, r3
    6808:	e004      	b.n	6814 <_usb_d_dev_ep_init+0x108>
    680a:	693b      	ldr	r3, [r7, #16]
    680c:	681b      	ldr	r3, [r3, #0]
    680e:	1e5a      	subs	r2, r3, #1
    6810:	4193      	sbcs	r3, r2
    6812:	b2db      	uxtb	r3, r3
    6814:	2b00      	cmp	r3, #0
    6816:	d012      	beq.n	683e <_usb_d_dev_ep_init+0x132>
    6818:	231e      	movs	r3, #30
    681a:	18fb      	adds	r3, r7, r3
    681c:	781b      	ldrb	r3, [r3, #0]
    681e:	2b00      	cmp	r3, #0
    6820:	d003      	beq.n	682a <_usb_d_dev_ep_init+0x11e>
    6822:	693b      	ldr	r3, [r7, #16]
    6824:	895b      	ldrh	r3, [r3, #10]
    6826:	001a      	movs	r2, r3
    6828:	e002      	b.n	6830 <_usb_d_dev_ep_init+0x124>
    682a:	693b      	ldr	r3, [r7, #16]
    682c:	891b      	ldrh	r3, [r3, #8]
    682e:	001a      	movs	r2, r3
    6830:	1d3b      	adds	r3, r7, #4
    6832:	881b      	ldrh	r3, [r3, #0]
    6834:	429a      	cmp	r2, r3
    6836:	da02      	bge.n	683e <_usb_d_dev_ep_init+0x132>
		return -USB_ERR_FUNC;
    6838:	2313      	movs	r3, #19
    683a:	425b      	negs	r3, r3
    683c:	e01b      	b.n	6876 <_usb_d_dev_ep_init+0x16a>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    683e:	231e      	movs	r3, #30
    6840:	18fb      	adds	r3, r7, r3
    6842:	781b      	ldrb	r3, [r3, #0]
    6844:	2b00      	cmp	r3, #0
    6846:	d002      	beq.n	684e <_usb_d_dev_ep_init+0x142>
    6848:	693b      	ldr	r3, [r7, #16]
    684a:	685a      	ldr	r2, [r3, #4]
    684c:	e001      	b.n	6852 <_usb_d_dev_ep_init+0x146>
    684e:	693b      	ldr	r3, [r7, #16]
    6850:	681a      	ldr	r2, [r3, #0]
    6852:	69bb      	ldr	r3, [r7, #24]
    6854:	60da      	str	r2, [r3, #12]
	ept->size     = max_pkt_siz;
    6856:	69bb      	ldr	r3, [r7, #24]
    6858:	1d3a      	adds	r2, r7, #4
    685a:	8812      	ldrh	r2, [r2, #0]
    685c:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    685e:	2317      	movs	r3, #23
    6860:	18fb      	adds	r3, r7, r3
    6862:	781b      	ldrb	r3, [r3, #0]
    6864:	3301      	adds	r3, #1
    6866:	b2da      	uxtb	r2, r3
    6868:	69bb      	ldr	r3, [r7, #24]
    686a:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    686c:	69bb      	ldr	r3, [r7, #24]
    686e:	1dfa      	adds	r2, r7, #7
    6870:	7812      	ldrb	r2, [r2, #0]
    6872:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    6874:	2300      	movs	r3, #0
}
    6876:	0018      	movs	r0, r3
    6878:	46bd      	mov	sp, r7
    687a:	b009      	add	sp, #36	; 0x24
    687c:	bd90      	pop	{r4, r7, pc}
    687e:	46c0      	nop			; (mov r8, r8)
    6880:	00005409 	.word	0x00005409
    6884:	000122bc 	.word	0x000122bc

00006888 <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    6888:	b580      	push	{r7, lr}
    688a:	b086      	sub	sp, #24
    688c:	af00      	add	r7, sp, #0
    688e:	0002      	movs	r2, r0
    6890:	1dfb      	adds	r3, r7, #7
    6892:	701a      	strb	r2, [r3, #0]
	Usb *                 hw  = USB;
    6894:	4b39      	ldr	r3, [pc, #228]	; (697c <_usb_d_dev_ep_deinit+0xf4>)
    6896:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    6898:	2313      	movs	r3, #19
    689a:	18fb      	adds	r3, r7, r3
    689c:	1dfa      	adds	r2, r7, #7
    689e:	7812      	ldrb	r2, [r2, #0]
    68a0:	210f      	movs	r1, #15
    68a2:	400a      	ands	r2, r1
    68a4:	701a      	strb	r2, [r3, #0]
	bool                  dir = USB_EP_GET_DIR(ep);
    68a6:	1dfb      	adds	r3, r7, #7
    68a8:	781b      	ldrb	r3, [r3, #0]
    68aa:	2280      	movs	r2, #128	; 0x80
    68ac:	401a      	ands	r2, r3
    68ae:	2312      	movs	r3, #18
    68b0:	18fb      	adds	r3, r7, r3
    68b2:	1e51      	subs	r1, r2, #1
    68b4:	418a      	sbcs	r2, r1
    68b6:	701a      	strb	r2, [r3, #0]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    68b8:	2312      	movs	r3, #18
    68ba:	18fb      	adds	r3, r7, r3
    68bc:	781a      	ldrb	r2, [r3, #0]
    68be:	2313      	movs	r3, #19
    68c0:	18fb      	adds	r3, r7, r3
    68c2:	781b      	ldrb	r3, [r3, #0]
    68c4:	0011      	movs	r1, r2
    68c6:	0018      	movs	r0, r3
    68c8:	4b2d      	ldr	r3, [pc, #180]	; (6980 <_usb_d_dev_ep_deinit+0xf8>)
    68ca:	4798      	blx	r3
    68cc:	0003      	movs	r3, r0
    68ce:	60fb      	str	r3, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    68d0:	2313      	movs	r3, #19
    68d2:	18fb      	adds	r3, r7, r3
    68d4:	781b      	ldrb	r3, [r3, #0]
    68d6:	2b07      	cmp	r3, #7
    68d8:	d84b      	bhi.n	6972 <_usb_d_dev_ep_deinit+0xea>
    68da:	68fb      	ldr	r3, [r7, #12]
    68dc:	7c9b      	ldrb	r3, [r3, #18]
    68de:	2bff      	cmp	r3, #255	; 0xff
    68e0:	d047      	beq.n	6972 <_usb_d_dev_ep_deinit+0xea>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    68e2:	2312      	movs	r3, #18
    68e4:	18fb      	adds	r3, r7, r3
    68e6:	7819      	ldrb	r1, [r3, #0]
    68e8:	68fb      	ldr	r3, [r7, #12]
    68ea:	2203      	movs	r2, #3
    68ec:	0018      	movs	r0, r3
    68ee:	4b25      	ldr	r3, [pc, #148]	; (6984 <_usb_d_dev_ep_deinit+0xfc>)
    68f0:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    68f2:	68fb      	ldr	r3, [r7, #12]
    68f4:	7cdb      	ldrb	r3, [r3, #19]
    68f6:	2207      	movs	r2, #7
    68f8:	4013      	ands	r3, r2
    68fa:	b2db      	uxtb	r3, r3
    68fc:	2b01      	cmp	r3, #1
    68fe:	d107      	bne.n	6910 <_usb_d_dev_ep_deinit+0x88>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    6900:	1dfb      	adds	r3, r7, #7
    6902:	781a      	ldrb	r2, [r3, #0]
    6904:	697b      	ldr	r3, [r7, #20]
    6906:	3208      	adds	r2, #8
    6908:	0152      	lsls	r2, r2, #5
    690a:	2100      	movs	r1, #0
    690c:	54d1      	strb	r1, [r2, r3]
    690e:	e029      	b.n	6964 <_usb_d_dev_ep_deinit+0xdc>
	} else if (USB_EP_GET_DIR(ep)) {
    6910:	1dfb      	adds	r3, r7, #7
    6912:	781b      	ldrb	r3, [r3, #0]
    6914:	b25b      	sxtb	r3, r3
    6916:	2b00      	cmp	r3, #0
    6918:	da14      	bge.n	6944 <_usb_d_dev_ep_deinit+0xbc>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    691a:	1dfb      	adds	r3, r7, #7
    691c:	781b      	ldrb	r3, [r3, #0]
    691e:	220f      	movs	r2, #15
    6920:	401a      	ands	r2, r3
    6922:	1dfb      	adds	r3, r7, #7
    6924:	781b      	ldrb	r3, [r3, #0]
    6926:	210f      	movs	r1, #15
    6928:	4019      	ands	r1, r3
    692a:	697b      	ldr	r3, [r7, #20]
    692c:	3108      	adds	r1, #8
    692e:	0149      	lsls	r1, r1, #5
    6930:	5ccb      	ldrb	r3, [r1, r3]
    6932:	b2db      	uxtb	r3, r3
    6934:	2170      	movs	r1, #112	; 0x70
    6936:	438b      	bics	r3, r1
    6938:	b2d9      	uxtb	r1, r3
    693a:	697b      	ldr	r3, [r7, #20]
    693c:	3208      	adds	r2, #8
    693e:	0152      	lsls	r2, r2, #5
    6940:	54d1      	strb	r1, [r2, r3]
    6942:	e00f      	b.n	6964 <_usb_d_dev_ep_deinit+0xdc>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    6944:	1dfb      	adds	r3, r7, #7
    6946:	781a      	ldrb	r2, [r3, #0]
    6948:	1dfb      	adds	r3, r7, #7
    694a:	7819      	ldrb	r1, [r3, #0]
    694c:	697b      	ldr	r3, [r7, #20]
    694e:	3108      	adds	r1, #8
    6950:	0149      	lsls	r1, r1, #5
    6952:	5ccb      	ldrb	r3, [r1, r3]
    6954:	b2db      	uxtb	r3, r3
    6956:	2107      	movs	r1, #7
    6958:	438b      	bics	r3, r1
    695a:	b2d9      	uxtb	r1, r3
    695c:	697b      	ldr	r3, [r7, #20]
    695e:	3208      	adds	r2, #8
    6960:	0152      	lsls	r2, r2, #5
    6962:	54d1      	strb	r1, [r2, r3]
	}
	ept->flags.u8 = 0;
    6964:	68fb      	ldr	r3, [r7, #12]
    6966:	2200      	movs	r2, #0
    6968:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    696a:	68fb      	ldr	r3, [r7, #12]
    696c:	22ff      	movs	r2, #255	; 0xff
    696e:	749a      	strb	r2, [r3, #18]
    6970:	e000      	b.n	6974 <_usb_d_dev_ep_deinit+0xec>
		return;
    6972:	46c0      	nop			; (mov r8, r8)
}
    6974:	46bd      	mov	sp, r7
    6976:	b006      	add	sp, #24
    6978:	bd80      	pop	{r7, pc}
    697a:	46c0      	nop			; (mov r8, r8)
    697c:	41005000 	.word	0x41005000
    6980:	00005409 	.word	0x00005409
    6984:	00006ef5 	.word	0x00006ef5

00006988 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    6988:	b5b0      	push	{r4, r5, r7, lr}
    698a:	b088      	sub	sp, #32
    698c:	af00      	add	r7, sp, #0
    698e:	0002      	movs	r2, r0
    6990:	1dfb      	adds	r3, r7, #7
    6992:	701a      	strb	r2, [r3, #0]
	Usb *                 hw    = USB;
    6994:	4b9c      	ldr	r3, [pc, #624]	; (6c08 <_usb_d_dev_ep_enable+0x280>)
    6996:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    6998:	231b      	movs	r3, #27
    699a:	18fb      	adds	r3, r7, r3
    699c:	1dfa      	adds	r2, r7, #7
    699e:	7812      	ldrb	r2, [r2, #0]
    69a0:	210f      	movs	r1, #15
    69a2:	400a      	ands	r2, r1
    69a4:	701a      	strb	r2, [r3, #0]
	bool                  dir   = USB_EP_GET_DIR(ep);
    69a6:	1dfb      	adds	r3, r7, #7
    69a8:	781b      	ldrb	r3, [r3, #0]
    69aa:	2280      	movs	r2, #128	; 0x80
    69ac:	401a      	ands	r2, r3
    69ae:	231a      	movs	r3, #26
    69b0:	18fb      	adds	r3, r7, r3
    69b2:	1e51      	subs	r1, r2, #1
    69b4:	418a      	sbcs	r2, r1
    69b6:	701a      	strb	r2, [r3, #0]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    69b8:	231a      	movs	r3, #26
    69ba:	18fb      	adds	r3, r7, r3
    69bc:	781a      	ldrb	r2, [r3, #0]
    69be:	231b      	movs	r3, #27
    69c0:	18fb      	adds	r3, r7, r3
    69c2:	781b      	ldrb	r3, [r3, #0]
    69c4:	0011      	movs	r1, r2
    69c6:	0018      	movs	r0, r3
    69c8:	4b90      	ldr	r3, [pc, #576]	; (6c0c <_usb_d_dev_ep_enable+0x284>)
    69ca:	4798      	blx	r3
    69cc:	0003      	movs	r3, r0
    69ce:	617b      	str	r3, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    69d0:	2313      	movs	r3, #19
    69d2:	18fc      	adds	r4, r7, r3
    69d4:	231b      	movs	r3, #27
    69d6:	18fb      	adds	r3, r7, r3
    69d8:	781a      	ldrb	r2, [r3, #0]
    69da:	69fb      	ldr	r3, [r7, #28]
    69dc:	0011      	movs	r1, r2
    69de:	0018      	movs	r0, r3
    69e0:	4b8b      	ldr	r3, [pc, #556]	; (6c10 <_usb_d_dev_ep_enable+0x288>)
    69e2:	4798      	blx	r3
    69e4:	0003      	movs	r3, r0
    69e6:	7023      	strb	r3, [r4, #0]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    69e8:	231b      	movs	r3, #27
    69ea:	18fb      	adds	r3, r7, r3
    69ec:	781b      	ldrb	r3, [r3, #0]
    69ee:	2b07      	cmp	r3, #7
    69f0:	d803      	bhi.n	69fa <_usb_d_dev_ep_enable+0x72>
    69f2:	697b      	ldr	r3, [r7, #20]
    69f4:	7c9b      	ldrb	r3, [r3, #18]
    69f6:	2bff      	cmp	r3, #255	; 0xff
    69f8:	d102      	bne.n	6a00 <_usb_d_dev_ep_enable+0x78>
		return -USB_ERR_PARAM;
    69fa:	2312      	movs	r3, #18
    69fc:	425b      	negs	r3, r3
    69fe:	e0fe      	b.n	6bfe <_usb_d_dev_ep_enable+0x276>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    6a00:	231b      	movs	r3, #27
    6a02:	18fb      	adds	r3, r7, r3
    6a04:	781b      	ldrb	r3, [r3, #0]
    6a06:	015a      	lsls	r2, r3, #5
    6a08:	4b82      	ldr	r3, [pc, #520]	; (6c14 <_usb_d_dev_ep_enable+0x28c>)
    6a0a:	18d3      	adds	r3, r2, r3
    6a0c:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    6a0e:	697b      	ldr	r3, [r7, #20]
    6a10:	7cdb      	ldrb	r3, [r3, #19]
    6a12:	2207      	movs	r2, #7
    6a14:	4013      	ands	r3, r2
    6a16:	b2db      	uxtb	r3, r3
    6a18:	2b01      	cmp	r3, #1
    6a1a:	d15d      	bne.n	6ad8 <_usb_d_dev_ep_enable+0x150>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    6a1c:	2313      	movs	r3, #19
    6a1e:	18fb      	adds	r3, r7, r3
    6a20:	781b      	ldrb	r3, [r3, #0]
    6a22:	2277      	movs	r2, #119	; 0x77
    6a24:	4013      	ands	r3, r2
    6a26:	d002      	beq.n	6a2e <_usb_d_dev_ep_enable+0xa6>
			return -USB_ERR_REDO;
    6a28:	2314      	movs	r3, #20
    6a2a:	425b      	negs	r3, r3
    6a2c:	e0e7      	b.n	6bfe <_usb_d_dev_ep_enable+0x276>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    6a2e:	231b      	movs	r3, #27
    6a30:	18fb      	adds	r3, r7, r3
    6a32:	7819      	ldrb	r1, [r3, #0]
    6a34:	69fb      	ldr	r3, [r7, #28]
    6a36:	2211      	movs	r2, #17
    6a38:	0018      	movs	r0, r3
    6a3a:	4b77      	ldr	r3, [pc, #476]	; (6c18 <_usb_d_dev_ep_enable+0x290>)
    6a3c:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    6a3e:	697b      	ldr	r3, [r7, #20]
    6a40:	8a1b      	ldrh	r3, [r3, #16]
    6a42:	039b      	lsls	r3, r3, #14
    6a44:	001a      	movs	r2, r3
    6a46:	4b75      	ldr	r3, [pc, #468]	; (6c1c <_usb_d_dev_ep_enable+0x294>)
    6a48:	401a      	ands	r2, r3
    6a4a:	0014      	movs	r4, r2
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    6a4c:	697b      	ldr	r3, [r7, #20]
    6a4e:	8a1b      	ldrh	r3, [r3, #16]
    6a50:	0018      	movs	r0, r3
    6a52:	4b73      	ldr	r3, [pc, #460]	; (6c20 <_usb_d_dev_ep_enable+0x298>)
    6a54:	4798      	blx	r3
    6a56:	0003      	movs	r3, r0
    6a58:	071b      	lsls	r3, r3, #28
    6a5a:	001a      	movs	r2, r3
    6a5c:	23e0      	movs	r3, #224	; 0xe0
    6a5e:	05db      	lsls	r3, r3, #23
    6a60:	4013      	ands	r3, r2
    6a62:	0022      	movs	r2, r4
    6a64:	431a      	orrs	r2, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    6a66:	68fb      	ldr	r3, [r7, #12]
    6a68:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    6a6a:	68fb      	ldr	r3, [r7, #12]
    6a6c:	3310      	adds	r3, #16
    6a6e:	001c      	movs	r4, r3
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    6a70:	697b      	ldr	r3, [r7, #20]
    6a72:	8a1b      	ldrh	r3, [r3, #16]
    6a74:	049b      	lsls	r3, r3, #18
    6a76:	0c9d      	lsrs	r5, r3, #18
    6a78:	697b      	ldr	r3, [r7, #20]
    6a7a:	8a1b      	ldrh	r3, [r3, #16]
    6a7c:	0018      	movs	r0, r3
    6a7e:	4b68      	ldr	r3, [pc, #416]	; (6c20 <_usb_d_dev_ep_enable+0x298>)
    6a80:	4798      	blx	r3
    6a82:	0003      	movs	r3, r0
    6a84:	071b      	lsls	r3, r3, #28
    6a86:	001a      	movs	r2, r3
    6a88:	23e0      	movs	r3, #224	; 0xe0
    6a8a:	05db      	lsls	r3, r3, #23
    6a8c:	4013      	ands	r3, r2
    6a8e:	432b      	orrs	r3, r5
    6a90:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    6a92:	231b      	movs	r3, #27
    6a94:	18fb      	adds	r3, r7, r3
    6a96:	781b      	ldrb	r3, [r3, #0]
    6a98:	2200      	movs	r2, #0
    6a9a:	2100      	movs	r1, #0
    6a9c:	0018      	movs	r0, r3
    6a9e:	4b61      	ldr	r3, [pc, #388]	; (6c24 <_usb_d_dev_ep_enable+0x29c>)
    6aa0:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    6aa2:	231b      	movs	r3, #27
    6aa4:	18fb      	adds	r3, r7, r3
    6aa6:	781b      	ldrb	r3, [r3, #0]
    6aa8:	2200      	movs	r2, #0
    6aaa:	2101      	movs	r1, #1
    6aac:	0018      	movs	r0, r3
    6aae:	4b5e      	ldr	r3, [pc, #376]	; (6c28 <_usb_d_dev_ep_enable+0x2a0>)
    6ab0:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    6ab2:	231b      	movs	r3, #27
    6ab4:	18fb      	adds	r3, r7, r3
    6ab6:	781b      	ldrb	r3, [r3, #0]
    6ab8:	2100      	movs	r1, #0
    6aba:	0018      	movs	r0, r3
    6abc:	4b5b      	ldr	r3, [pc, #364]	; (6c2c <_usb_d_dev_ep_enable+0x2a4>)
    6abe:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    6ac0:	231b      	movs	r3, #27
    6ac2:	18fb      	adds	r3, r7, r3
    6ac4:	781b      	ldrb	r3, [r3, #0]
    6ac6:	2101      	movs	r1, #1
    6ac8:	0018      	movs	r0, r3
    6aca:	4b58      	ldr	r3, [pc, #352]	; (6c2c <_usb_d_dev_ep_enable+0x2a4>)
    6acc:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    6ace:	697b      	ldr	r3, [r7, #20]
    6ad0:	0018      	movs	r0, r3
    6ad2:	4b57      	ldr	r3, [pc, #348]	; (6c30 <_usb_d_dev_ep_enable+0x2a8>)
    6ad4:	4798      	blx	r3
    6ad6:	e091      	b.n	6bfc <_usb_d_dev_ep_enable+0x274>

	} else if (dir) {
    6ad8:	231a      	movs	r3, #26
    6ada:	18fb      	adds	r3, r7, r3
    6adc:	781b      	ldrb	r3, [r3, #0]
    6ade:	2b00      	cmp	r3, #0
    6ae0:	d047      	beq.n	6b72 <_usb_d_dev_ep_enable+0x1ea>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    6ae2:	2313      	movs	r3, #19
    6ae4:	18fb      	adds	r3, r7, r3
    6ae6:	781b      	ldrb	r3, [r3, #0]
    6ae8:	2270      	movs	r2, #112	; 0x70
    6aea:	4013      	ands	r3, r2
    6aec:	d002      	beq.n	6af4 <_usb_d_dev_ep_enable+0x16c>
			return -USB_ERR_REDO;
    6aee:	2314      	movs	r3, #20
    6af0:	425b      	negs	r3, r3
    6af2:	e084      	b.n	6bfe <_usb_d_dev_ep_enable+0x276>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    6af4:	697b      	ldr	r3, [r7, #20]
    6af6:	7cdb      	ldrb	r3, [r3, #19]
    6af8:	075b      	lsls	r3, r3, #29
    6afa:	0f5b      	lsrs	r3, r3, #29
    6afc:	b2db      	uxtb	r3, r3
    6afe:	011b      	lsls	r3, r3, #4
    6b00:	b2db      	uxtb	r3, r3
    6b02:	2270      	movs	r2, #112	; 0x70
    6b04:	4013      	ands	r3, r2
    6b06:	b2d9      	uxtb	r1, r3
    6b08:	2313      	movs	r3, #19
    6b0a:	18fb      	adds	r3, r7, r3
    6b0c:	2213      	movs	r2, #19
    6b0e:	18ba      	adds	r2, r7, r2
    6b10:	7812      	ldrb	r2, [r2, #0]
    6b12:	430a      	orrs	r2, r1
    6b14:	701a      	strb	r2, [r3, #0]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    6b16:	2313      	movs	r3, #19
    6b18:	18fb      	adds	r3, r7, r3
    6b1a:	781a      	ldrb	r2, [r3, #0]
    6b1c:	231b      	movs	r3, #27
    6b1e:	18fb      	adds	r3, r7, r3
    6b20:	7819      	ldrb	r1, [r3, #0]
    6b22:	69fb      	ldr	r3, [r7, #28]
    6b24:	0018      	movs	r0, r3
    6b26:	4b3c      	ldr	r3, [pc, #240]	; (6c18 <_usb_d_dev_ep_enable+0x290>)
    6b28:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    6b2a:	68fb      	ldr	r3, [r7, #12]
    6b2c:	3310      	adds	r3, #16
    6b2e:	001c      	movs	r4, r3
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    6b30:	697b      	ldr	r3, [r7, #20]
    6b32:	8a1b      	ldrh	r3, [r3, #16]
    6b34:	049b      	lsls	r3, r3, #18
    6b36:	0c9d      	lsrs	r5, r3, #18
    6b38:	697b      	ldr	r3, [r7, #20]
    6b3a:	8a1b      	ldrh	r3, [r3, #16]
    6b3c:	0018      	movs	r0, r3
    6b3e:	4b38      	ldr	r3, [pc, #224]	; (6c20 <_usb_d_dev_ep_enable+0x298>)
    6b40:	4798      	blx	r3
    6b42:	0003      	movs	r3, r0
    6b44:	071b      	lsls	r3, r3, #28
    6b46:	001a      	movs	r2, r3
    6b48:	23e0      	movs	r3, #224	; 0xe0
    6b4a:	05db      	lsls	r3, r3, #23
    6b4c:	4013      	ands	r3, r2
    6b4e:	432b      	orrs	r3, r5
    6b50:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    6b52:	231b      	movs	r3, #27
    6b54:	18fb      	adds	r3, r7, r3
    6b56:	781b      	ldrb	r3, [r3, #0]
    6b58:	2200      	movs	r2, #0
    6b5a:	2101      	movs	r1, #1
    6b5c:	0018      	movs	r0, r3
    6b5e:	4b32      	ldr	r3, [pc, #200]	; (6c28 <_usb_d_dev_ep_enable+0x2a0>)
    6b60:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    6b62:	231b      	movs	r3, #27
    6b64:	18fb      	adds	r3, r7, r3
    6b66:	781b      	ldrb	r3, [r3, #0]
    6b68:	2101      	movs	r1, #1
    6b6a:	0018      	movs	r0, r3
    6b6c:	4b2f      	ldr	r3, [pc, #188]	; (6c2c <_usb_d_dev_ep_enable+0x2a4>)
    6b6e:	4798      	blx	r3
    6b70:	e044      	b.n	6bfc <_usb_d_dev_ep_enable+0x274>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    6b72:	2313      	movs	r3, #19
    6b74:	18fb      	adds	r3, r7, r3
    6b76:	781b      	ldrb	r3, [r3, #0]
    6b78:	2207      	movs	r2, #7
    6b7a:	4013      	ands	r3, r2
    6b7c:	d002      	beq.n	6b84 <_usb_d_dev_ep_enable+0x1fc>
			return -USB_ERR_REDO;
    6b7e:	2314      	movs	r3, #20
    6b80:	425b      	negs	r3, r3
    6b82:	e03c      	b.n	6bfe <_usb_d_dev_ep_enable+0x276>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    6b84:	697b      	ldr	r3, [r7, #20]
    6b86:	7cdb      	ldrb	r3, [r3, #19]
    6b88:	075b      	lsls	r3, r3, #29
    6b8a:	0f5b      	lsrs	r3, r3, #29
    6b8c:	b2db      	uxtb	r3, r3
    6b8e:	0019      	movs	r1, r3
    6b90:	2313      	movs	r3, #19
    6b92:	18fb      	adds	r3, r7, r3
    6b94:	2213      	movs	r2, #19
    6b96:	18ba      	adds	r2, r7, r2
    6b98:	7812      	ldrb	r2, [r2, #0]
    6b9a:	430a      	orrs	r2, r1
    6b9c:	701a      	strb	r2, [r3, #0]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    6b9e:	2313      	movs	r3, #19
    6ba0:	18fb      	adds	r3, r7, r3
    6ba2:	781a      	ldrb	r2, [r3, #0]
    6ba4:	231b      	movs	r3, #27
    6ba6:	18fb      	adds	r3, r7, r3
    6ba8:	7819      	ldrb	r1, [r3, #0]
    6baa:	69fb      	ldr	r3, [r7, #28]
    6bac:	0018      	movs	r0, r3
    6bae:	4b1a      	ldr	r3, [pc, #104]	; (6c18 <_usb_d_dev_ep_enable+0x290>)
    6bb0:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    6bb2:	697b      	ldr	r3, [r7, #20]
    6bb4:	8a1b      	ldrh	r3, [r3, #16]
    6bb6:	039b      	lsls	r3, r3, #14
    6bb8:	001a      	movs	r2, r3
    6bba:	4b18      	ldr	r3, [pc, #96]	; (6c1c <_usb_d_dev_ep_enable+0x294>)
    6bbc:	401a      	ands	r2, r3
    6bbe:	0014      	movs	r4, r2
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    6bc0:	697b      	ldr	r3, [r7, #20]
    6bc2:	8a1b      	ldrh	r3, [r3, #16]
    6bc4:	0018      	movs	r0, r3
    6bc6:	4b16      	ldr	r3, [pc, #88]	; (6c20 <_usb_d_dev_ep_enable+0x298>)
    6bc8:	4798      	blx	r3
    6bca:	0003      	movs	r3, r0
    6bcc:	071b      	lsls	r3, r3, #28
    6bce:	001a      	movs	r2, r3
    6bd0:	23e0      	movs	r3, #224	; 0xe0
    6bd2:	05db      	lsls	r3, r3, #23
    6bd4:	4013      	ands	r3, r2
    6bd6:	0022      	movs	r2, r4
    6bd8:	431a      	orrs	r2, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    6bda:	68fb      	ldr	r3, [r7, #12]
    6bdc:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    6bde:	231b      	movs	r3, #27
    6be0:	18fb      	adds	r3, r7, r3
    6be2:	781b      	ldrb	r3, [r3, #0]
    6be4:	2200      	movs	r2, #0
    6be6:	2100      	movs	r1, #0
    6be8:	0018      	movs	r0, r3
    6bea:	4b0e      	ldr	r3, [pc, #56]	; (6c24 <_usb_d_dev_ep_enable+0x29c>)
    6bec:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    6bee:	231b      	movs	r3, #27
    6bf0:	18fb      	adds	r3, r7, r3
    6bf2:	781b      	ldrb	r3, [r3, #0]
    6bf4:	2100      	movs	r1, #0
    6bf6:	0018      	movs	r0, r3
    6bf8:	4b0c      	ldr	r3, [pc, #48]	; (6c2c <_usb_d_dev_ep_enable+0x2a4>)
    6bfa:	4798      	blx	r3
	}

	return USB_OK;
    6bfc:	2300      	movs	r3, #0
}
    6bfe:	0018      	movs	r0, r3
    6c00:	46bd      	mov	sp, r7
    6c02:	b008      	add	sp, #32
    6c04:	bdb0      	pop	{r4, r5, r7, pc}
    6c06:	46c0      	nop			; (mov r8, r8)
    6c08:	41005000 	.word	0x41005000
    6c0c:	00005409 	.word	0x00005409
    6c10:	00004929 	.word	0x00004929
    6c14:	20001058 	.word	0x20001058
    6c18:	000048f9 	.word	0x000048f9
    6c1c:	0fffc000 	.word	0x0fffc000
    6c20:	00005395 	.word	0x00005395
    6c24:	00005329 	.word	0x00005329
    6c28:	000052bd 	.word	0x000052bd
    6c2c:	00005285 	.word	0x00005285
    6c30:	00006679 	.word	0x00006679

00006c34 <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    6c34:	b580      	push	{r7, lr}
    6c36:	b084      	sub	sp, #16
    6c38:	af00      	add	r7, sp, #0
    6c3a:	6078      	str	r0, [r7, #4]
    6c3c:	000a      	movs	r2, r1
    6c3e:	1cfb      	adds	r3, r7, #3
    6c40:	701a      	strb	r2, [r3, #0]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    6c42:	687b      	ldr	r3, [r7, #4]
    6c44:	7c9a      	ldrb	r2, [r3, #18]
    6c46:	230f      	movs	r3, #15
    6c48:	18fb      	adds	r3, r7, r3
    6c4a:	210f      	movs	r1, #15
    6c4c:	400a      	ands	r2, r1
    6c4e:	701a      	strb	r2, [r3, #0]
	return _usbd_ep_is_stalled(epn, dir);
    6c50:	1cfb      	adds	r3, r7, #3
    6c52:	781a      	ldrb	r2, [r3, #0]
    6c54:	230f      	movs	r3, #15
    6c56:	18fb      	adds	r3, r7, r3
    6c58:	781b      	ldrb	r3, [r3, #0]
    6c5a:	0011      	movs	r1, r2
    6c5c:	0018      	movs	r0, r3
    6c5e:	4b03      	ldr	r3, [pc, #12]	; (6c6c <_usb_d_dev_ep_stall_get+0x38>)
    6c60:	4798      	blx	r3
    6c62:	0003      	movs	r3, r0
}
    6c64:	0018      	movs	r0, r3
    6c66:	46bd      	mov	sp, r7
    6c68:	b004      	add	sp, #16
    6c6a:	bd80      	pop	{r7, pc}
    6c6c:	00004dd9 	.word	0x00004dd9

00006c70 <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    6c70:	b580      	push	{r7, lr}
    6c72:	b084      	sub	sp, #16
    6c74:	af00      	add	r7, sp, #0
    6c76:	6078      	str	r0, [r7, #4]
    6c78:	000a      	movs	r2, r1
    6c7a:	1cfb      	adds	r3, r7, #3
    6c7c:	701a      	strb	r2, [r3, #0]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    6c7e:	687b      	ldr	r3, [r7, #4]
    6c80:	7c9a      	ldrb	r2, [r3, #18]
    6c82:	230f      	movs	r3, #15
    6c84:	18fb      	adds	r3, r7, r3
    6c86:	210f      	movs	r1, #15
    6c88:	400a      	ands	r2, r1
    6c8a:	701a      	strb	r2, [r3, #0]
	_usbd_ep_set_stall(epn, dir, true);
    6c8c:	1cfb      	adds	r3, r7, #3
    6c8e:	7819      	ldrb	r1, [r3, #0]
    6c90:	230f      	movs	r3, #15
    6c92:	18fb      	adds	r3, r7, r3
    6c94:	781b      	ldrb	r3, [r3, #0]
    6c96:	2201      	movs	r2, #1
    6c98:	0018      	movs	r0, r3
    6c9a:	4b0b      	ldr	r3, [pc, #44]	; (6cc8 <_usb_d_dev_ep_stall_set+0x58>)
    6c9c:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    6c9e:	1cfb      	adds	r3, r7, #3
    6ca0:	781b      	ldrb	r3, [r3, #0]
    6ca2:	2220      	movs	r2, #32
    6ca4:	409a      	lsls	r2, r3
    6ca6:	230f      	movs	r3, #15
    6ca8:	18fb      	adds	r3, r7, r3
    6caa:	781b      	ldrb	r3, [r3, #0]
    6cac:	0011      	movs	r1, r2
    6cae:	0018      	movs	r0, r3
    6cb0:	4b06      	ldr	r3, [pc, #24]	; (6ccc <_usb_d_dev_ep_stall_set+0x5c>)
    6cb2:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    6cb4:	687b      	ldr	r3, [r7, #4]
    6cb6:	7cda      	ldrb	r2, [r3, #19]
    6cb8:	2108      	movs	r1, #8
    6cba:	430a      	orrs	r2, r1
    6cbc:	74da      	strb	r2, [r3, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    6cbe:	2300      	movs	r3, #0
}
    6cc0:	0018      	movs	r0, r3
    6cc2:	46bd      	mov	sp, r7
    6cc4:	b004      	add	sp, #16
    6cc6:	bd80      	pop	{r7, pc}
    6cc8:	00004d6d 	.word	0x00004d6d
    6ccc:	00004cd9 	.word	0x00004cd9

00006cd0 <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    6cd0:	b590      	push	{r4, r7, lr}
    6cd2:	b085      	sub	sp, #20
    6cd4:	af00      	add	r7, sp, #0
    6cd6:	6078      	str	r0, [r7, #4]
    6cd8:	000a      	movs	r2, r1
    6cda:	1cfb      	adds	r3, r7, #3
    6cdc:	701a      	strb	r2, [r3, #0]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    6cde:	687b      	ldr	r3, [r7, #4]
    6ce0:	7c9a      	ldrb	r2, [r3, #18]
    6ce2:	230f      	movs	r3, #15
    6ce4:	18fb      	adds	r3, r7, r3
    6ce6:	210f      	movs	r1, #15
    6ce8:	400a      	ands	r2, r1
    6cea:	701a      	strb	r2, [r3, #0]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    6cec:	1cfb      	adds	r3, r7, #3
    6cee:	781a      	ldrb	r2, [r3, #0]
    6cf0:	230e      	movs	r3, #14
    6cf2:	18fc      	adds	r4, r7, r3
    6cf4:	230f      	movs	r3, #15
    6cf6:	18fb      	adds	r3, r7, r3
    6cf8:	781b      	ldrb	r3, [r3, #0]
    6cfa:	0011      	movs	r1, r2
    6cfc:	0018      	movs	r0, r3
    6cfe:	4b31      	ldr	r3, [pc, #196]	; (6dc4 <_usb_d_dev_ep_stall_clr+0xf4>)
    6d00:	4798      	blx	r3
    6d02:	0003      	movs	r3, r0
    6d04:	7023      	strb	r3, [r4, #0]
	if (!is_stalled) {
    6d06:	230e      	movs	r3, #14
    6d08:	18fb      	adds	r3, r7, r3
    6d0a:	781b      	ldrb	r3, [r3, #0]
    6d0c:	2201      	movs	r2, #1
    6d0e:	4053      	eors	r3, r2
    6d10:	b2db      	uxtb	r3, r3
    6d12:	2b00      	cmp	r3, #0
    6d14:	d001      	beq.n	6d1a <_usb_d_dev_ep_stall_clr+0x4a>
		return ERR_NONE;
    6d16:	2300      	movs	r3, #0
    6d18:	e050      	b.n	6dbc <_usb_d_dev_ep_stall_clr+0xec>
	}
	_usbd_ep_set_stall(epn, dir, false);
    6d1a:	1cfb      	adds	r3, r7, #3
    6d1c:	7819      	ldrb	r1, [r3, #0]
    6d1e:	230f      	movs	r3, #15
    6d20:	18fb      	adds	r3, r7, r3
    6d22:	781b      	ldrb	r3, [r3, #0]
    6d24:	2200      	movs	r2, #0
    6d26:	0018      	movs	r0, r3
    6d28:	4b27      	ldr	r3, [pc, #156]	; (6dc8 <_usb_d_dev_ep_stall_clr+0xf8>)
    6d2a:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    6d2c:	1cfb      	adds	r3, r7, #3
    6d2e:	781b      	ldrb	r3, [r3, #0]
    6d30:	2220      	movs	r2, #32
    6d32:	409a      	lsls	r2, r3
    6d34:	230f      	movs	r3, #15
    6d36:	18fb      	adds	r3, r7, r3
    6d38:	781b      	ldrb	r3, [r3, #0]
    6d3a:	0011      	movs	r1, r2
    6d3c:	0018      	movs	r0, r3
    6d3e:	4b23      	ldr	r3, [pc, #140]	; (6dcc <_usb_d_dev_ep_stall_clr+0xfc>)
    6d40:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    6d42:	1cfb      	adds	r3, r7, #3
    6d44:	781a      	ldrb	r2, [r3, #0]
    6d46:	230f      	movs	r3, #15
    6d48:	18fb      	adds	r3, r7, r3
    6d4a:	781b      	ldrb	r3, [r3, #0]
    6d4c:	0011      	movs	r1, r2
    6d4e:	0018      	movs	r0, r3
    6d50:	4b1f      	ldr	r3, [pc, #124]	; (6dd0 <_usb_d_dev_ep_stall_clr+0x100>)
    6d52:	4798      	blx	r3
    6d54:	1e03      	subs	r3, r0, #0
    6d56:	d011      	beq.n	6d7c <_usb_d_dev_ep_stall_clr+0xac>
		_usbd_ep_ack_stall(epn, dir);
    6d58:	1cfb      	adds	r3, r7, #3
    6d5a:	781a      	ldrb	r2, [r3, #0]
    6d5c:	230f      	movs	r3, #15
    6d5e:	18fb      	adds	r3, r7, r3
    6d60:	781b      	ldrb	r3, [r3, #0]
    6d62:	0011      	movs	r1, r2
    6d64:	0018      	movs	r0, r3
    6d66:	4b1b      	ldr	r3, [pc, #108]	; (6dd4 <_usb_d_dev_ep_stall_clr+0x104>)
    6d68:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    6d6a:	1cfb      	adds	r3, r7, #3
    6d6c:	7819      	ldrb	r1, [r3, #0]
    6d6e:	230f      	movs	r3, #15
    6d70:	18fb      	adds	r3, r7, r3
    6d72:	781b      	ldrb	r3, [r3, #0]
    6d74:	2200      	movs	r2, #0
    6d76:	0018      	movs	r0, r3
    6d78:	4b17      	ldr	r3, [pc, #92]	; (6dd8 <_usb_d_dev_ep_stall_clr+0x108>)
    6d7a:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    6d7c:	687b      	ldr	r3, [r7, #4]
    6d7e:	7cdb      	ldrb	r3, [r3, #19]
    6d80:	2207      	movs	r2, #7
    6d82:	4013      	ands	r3, r2
    6d84:	b2db      	uxtb	r3, r3
    6d86:	2b01      	cmp	r3, #1
    6d88:	d112      	bne.n	6db0 <_usb_d_dev_ep_stall_clr+0xe0>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    6d8a:	230f      	movs	r3, #15
    6d8c:	18fb      	adds	r3, r7, r3
    6d8e:	781b      	ldrb	r3, [r3, #0]
    6d90:	4a12      	ldr	r2, [pc, #72]	; (6ddc <_usb_d_dev_ep_stall_clr+0x10c>)
    6d92:	0019      	movs	r1, r3
    6d94:	0010      	movs	r0, r2
    6d96:	4b12      	ldr	r3, [pc, #72]	; (6de0 <_usb_d_dev_ep_stall_clr+0x110>)
    6d98:	4798      	blx	r3
    6d9a:	0003      	movs	r3, r0
    6d9c:	001a      	movs	r2, r3
    6d9e:	2330      	movs	r3, #48	; 0x30
    6da0:	4013      	ands	r3, r2
    6da2:	d10a      	bne.n	6dba <_usb_d_dev_ep_stall_clr+0xea>
			ept->flags.bits.is_stalled = 0;
    6da4:	687b      	ldr	r3, [r7, #4]
    6da6:	7cda      	ldrb	r2, [r3, #19]
    6da8:	2108      	movs	r1, #8
    6daa:	438a      	bics	r2, r1
    6dac:	74da      	strb	r2, [r3, #19]
    6dae:	e004      	b.n	6dba <_usb_d_dev_ep_stall_clr+0xea>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    6db0:	687b      	ldr	r3, [r7, #4]
    6db2:	7cda      	ldrb	r2, [r3, #19]
    6db4:	2108      	movs	r1, #8
    6db6:	438a      	bics	r2, r1
    6db8:	74da      	strb	r2, [r3, #19]
	}
	return ERR_NONE;
    6dba:	2300      	movs	r3, #0
}
    6dbc:	0018      	movs	r0, r3
    6dbe:	46bd      	mov	sp, r7
    6dc0:	b005      	add	sp, #20
    6dc2:	bd90      	pop	{r4, r7, pc}
    6dc4:	00004dd9 	.word	0x00004dd9
    6dc8:	00004d6d 	.word	0x00004d6d
    6dcc:	00004d09 	.word	0x00004d09
    6dd0:	00004e25 	.word	0x00004e25
    6dd4:	00004e71 	.word	0x00004e71
    6dd8:	00004f89 	.word	0x00004f89
    6ddc:	41005000 	.word	0x41005000
    6de0:	00004787 	.word	0x00004787

00006de4 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    6de4:	b580      	push	{r7, lr}
    6de6:	b086      	sub	sp, #24
    6de8:	af00      	add	r7, sp, #0
    6dea:	0002      	movs	r2, r0
    6dec:	1dfb      	adds	r3, r7, #7
    6dee:	701a      	strb	r2, [r3, #0]
    6df0:	1dbb      	adds	r3, r7, #6
    6df2:	1c0a      	adds	r2, r1, #0
    6df4:	701a      	strb	r2, [r3, #0]
	uint8_t               epn = USB_EP_GET_N(ep);
    6df6:	2313      	movs	r3, #19
    6df8:	18fb      	adds	r3, r7, r3
    6dfa:	1dfa      	adds	r2, r7, #7
    6dfc:	7812      	ldrb	r2, [r2, #0]
    6dfe:	210f      	movs	r1, #15
    6e00:	400a      	ands	r2, r1
    6e02:	701a      	strb	r2, [r3, #0]
	bool                  dir = USB_EP_GET_DIR(ep);
    6e04:	1dfb      	adds	r3, r7, #7
    6e06:	781b      	ldrb	r3, [r3, #0]
    6e08:	2280      	movs	r2, #128	; 0x80
    6e0a:	401a      	ands	r2, r3
    6e0c:	2312      	movs	r3, #18
    6e0e:	18fb      	adds	r3, r7, r3
    6e10:	1e51      	subs	r1, r2, #1
    6e12:	418a      	sbcs	r2, r1
    6e14:	701a      	strb	r2, [r3, #0]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    6e16:	2312      	movs	r3, #18
    6e18:	18fb      	adds	r3, r7, r3
    6e1a:	781a      	ldrb	r2, [r3, #0]
    6e1c:	2313      	movs	r3, #19
    6e1e:	18fb      	adds	r3, r7, r3
    6e20:	781b      	ldrb	r3, [r3, #0]
    6e22:	0011      	movs	r1, r2
    6e24:	0018      	movs	r0, r3
    6e26:	4b1c      	ldr	r3, [pc, #112]	; (6e98 <_usb_d_dev_ep_stall+0xb4>)
    6e28:	4798      	blx	r3
    6e2a:	0003      	movs	r3, r0
    6e2c:	60fb      	str	r3, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    6e2e:	2313      	movs	r3, #19
    6e30:	18fb      	adds	r3, r7, r3
    6e32:	781b      	ldrb	r3, [r3, #0]
    6e34:	2b07      	cmp	r3, #7
    6e36:	d902      	bls.n	6e3e <_usb_d_dev_ep_stall+0x5a>
		return -USB_ERR_PARAM;
    6e38:	2312      	movs	r3, #18
    6e3a:	425b      	negs	r3, r3
    6e3c:	e028      	b.n	6e90 <_usb_d_dev_ep_stall+0xac>
	}

	if (USB_EP_STALL_SET == ctrl) {
    6e3e:	1dbb      	adds	r3, r7, #6
    6e40:	781b      	ldrb	r3, [r3, #0]
    6e42:	2b01      	cmp	r3, #1
    6e44:	d10a      	bne.n	6e5c <_usb_d_dev_ep_stall+0x78>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    6e46:	2312      	movs	r3, #18
    6e48:	18fb      	adds	r3, r7, r3
    6e4a:	781a      	ldrb	r2, [r3, #0]
    6e4c:	68fb      	ldr	r3, [r7, #12]
    6e4e:	0011      	movs	r1, r2
    6e50:	0018      	movs	r0, r3
    6e52:	4b12      	ldr	r3, [pc, #72]	; (6e9c <_usb_d_dev_ep_stall+0xb8>)
    6e54:	4798      	blx	r3
    6e56:	0003      	movs	r3, r0
    6e58:	617b      	str	r3, [r7, #20]
    6e5a:	e018      	b.n	6e8e <_usb_d_dev_ep_stall+0xaa>
	} else if (USB_EP_STALL_CLR == ctrl) {
    6e5c:	1dbb      	adds	r3, r7, #6
    6e5e:	781b      	ldrb	r3, [r3, #0]
    6e60:	2b00      	cmp	r3, #0
    6e62:	d10a      	bne.n	6e7a <_usb_d_dev_ep_stall+0x96>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    6e64:	2312      	movs	r3, #18
    6e66:	18fb      	adds	r3, r7, r3
    6e68:	781a      	ldrb	r2, [r3, #0]
    6e6a:	68fb      	ldr	r3, [r7, #12]
    6e6c:	0011      	movs	r1, r2
    6e6e:	0018      	movs	r0, r3
    6e70:	4b0b      	ldr	r3, [pc, #44]	; (6ea0 <_usb_d_dev_ep_stall+0xbc>)
    6e72:	4798      	blx	r3
    6e74:	0003      	movs	r3, r0
    6e76:	617b      	str	r3, [r7, #20]
    6e78:	e009      	b.n	6e8e <_usb_d_dev_ep_stall+0xaa>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    6e7a:	2312      	movs	r3, #18
    6e7c:	18fb      	adds	r3, r7, r3
    6e7e:	781a      	ldrb	r2, [r3, #0]
    6e80:	68fb      	ldr	r3, [r7, #12]
    6e82:	0011      	movs	r1, r2
    6e84:	0018      	movs	r0, r3
    6e86:	4b07      	ldr	r3, [pc, #28]	; (6ea4 <_usb_d_dev_ep_stall+0xc0>)
    6e88:	4798      	blx	r3
    6e8a:	0003      	movs	r3, r0
    6e8c:	617b      	str	r3, [r7, #20]
	}
	return rc;
    6e8e:	697b      	ldr	r3, [r7, #20]
}
    6e90:	0018      	movs	r0, r3
    6e92:	46bd      	mov	sp, r7
    6e94:	b006      	add	sp, #24
    6e96:	bd80      	pop	{r7, pc}
    6e98:	00005409 	.word	0x00005409
    6e9c:	00006c71 	.word	0x00006c71
    6ea0:	00006cd1 	.word	0x00006cd1
    6ea4:	00006c35 	.word	0x00006c35

00006ea8 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    6ea8:	b590      	push	{r4, r7, lr}
    6eaa:	b083      	sub	sp, #12
    6eac:	af00      	add	r7, sp, #0
    6eae:	6078      	str	r0, [r7, #4]
    6eb0:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    6eb2:	687b      	ldr	r3, [r7, #4]
    6eb4:	7c9b      	ldrb	r3, [r3, #18]
    6eb6:	2bff      	cmp	r3, #255	; 0xff
    6eb8:	d015      	beq.n	6ee6 <_usb_d_dev_trans_done+0x3e>
    6eba:	687b      	ldr	r3, [r7, #4]
    6ebc:	7cdb      	ldrb	r3, [r3, #19]
    6ebe:	2240      	movs	r2, #64	; 0x40
    6ec0:	4013      	ands	r3, r2
    6ec2:	b2db      	uxtb	r3, r3
    6ec4:	2b00      	cmp	r3, #0
    6ec6:	d00e      	beq.n	6ee6 <_usb_d_dev_trans_done+0x3e>
		return;
	}
	ept->flags.bits.is_busy = 0;
    6ec8:	687b      	ldr	r3, [r7, #4]
    6eca:	7cda      	ldrb	r2, [r3, #19]
    6ecc:	2140      	movs	r1, #64	; 0x40
    6ece:	438a      	bics	r2, r1
    6ed0:	74da      	strb	r2, [r3, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    6ed2:	4b07      	ldr	r3, [pc, #28]	; (6ef0 <_usb_d_dev_trans_done+0x48>)
    6ed4:	691c      	ldr	r4, [r3, #16]
    6ed6:	687b      	ldr	r3, [r7, #4]
    6ed8:	7c98      	ldrb	r0, [r3, #18]
    6eda:	687b      	ldr	r3, [r7, #4]
    6edc:	689a      	ldr	r2, [r3, #8]
    6ede:	683b      	ldr	r3, [r7, #0]
    6ee0:	0019      	movs	r1, r3
    6ee2:	47a0      	blx	r4
    6ee4:	e000      	b.n	6ee8 <_usb_d_dev_trans_done+0x40>
		return;
    6ee6:	46c0      	nop			; (mov r8, r8)
}
    6ee8:	46bd      	mov	sp, r7
    6eea:	b003      	add	sp, #12
    6eec:	bd90      	pop	{r4, r7, pc}
    6eee:	46c0      	nop			; (mov r8, r8)
    6ef0:	20000ef0 	.word	0x20000ef0

00006ef4 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    6ef4:	b580      	push	{r7, lr}
    6ef6:	b086      	sub	sp, #24
    6ef8:	af00      	add	r7, sp, #0
    6efa:	60f8      	str	r0, [r7, #12]
    6efc:	607a      	str	r2, [r7, #4]
    6efe:	230b      	movs	r3, #11
    6f00:	18fb      	adds	r3, r7, r3
    6f02:	1c0a      	adds	r2, r1, #0
    6f04:	701a      	strb	r2, [r3, #0]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    6f06:	68fb      	ldr	r3, [r7, #12]
    6f08:	7c9a      	ldrb	r2, [r3, #18]
    6f0a:	2317      	movs	r3, #23
    6f0c:	18fb      	adds	r3, r7, r3
    6f0e:	210f      	movs	r1, #15
    6f10:	400a      	ands	r2, r1
    6f12:	701a      	strb	r2, [r3, #0]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    6f14:	2314      	movs	r3, #20
    6f16:	18fb      	adds	r3, r7, r3
    6f18:	4a25      	ldr	r2, [pc, #148]	; (6fb0 <_usb_d_dev_trans_stop+0xbc>)
    6f1a:	8812      	ldrh	r2, [r2, #0]
    6f1c:	801a      	strh	r2, [r3, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    6f1e:	68fb      	ldr	r3, [r7, #12]
    6f20:	7c9b      	ldrb	r3, [r3, #18]
    6f22:	2bff      	cmp	r3, #255	; 0xff
    6f24:	d03f      	beq.n	6fa6 <_usb_d_dev_trans_stop+0xb2>
    6f26:	68fb      	ldr	r3, [r7, #12]
    6f28:	7cdb      	ldrb	r3, [r3, #19]
    6f2a:	2240      	movs	r2, #64	; 0x40
    6f2c:	4013      	ands	r3, r2
    6f2e:	b2db      	uxtb	r3, r3
    6f30:	2b00      	cmp	r3, #0
    6f32:	d038      	beq.n	6fa6 <_usb_d_dev_trans_stop+0xb2>
		return;
	}
	/* Stop transfer */
	if (dir) {
    6f34:	230b      	movs	r3, #11
    6f36:	18fb      	adds	r3, r7, r3
    6f38:	781b      	ldrb	r3, [r3, #0]
    6f3a:	2b00      	cmp	r3, #0
    6f3c:	d008      	beq.n	6f50 <_usb_d_dev_trans_stop+0x5c>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    6f3e:	2317      	movs	r3, #23
    6f40:	18fb      	adds	r3, r7, r3
    6f42:	781b      	ldrb	r3, [r3, #0]
    6f44:	2200      	movs	r2, #0
    6f46:	2101      	movs	r1, #1
    6f48:	0018      	movs	r0, r3
    6f4a:	4b1a      	ldr	r3, [pc, #104]	; (6fb4 <_usb_d_dev_trans_stop+0xc0>)
    6f4c:	4798      	blx	r3
    6f4e:	e007      	b.n	6f60 <_usb_d_dev_trans_stop+0x6c>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    6f50:	2317      	movs	r3, #23
    6f52:	18fb      	adds	r3, r7, r3
    6f54:	781b      	ldrb	r3, [r3, #0]
    6f56:	2200      	movs	r2, #0
    6f58:	2100      	movs	r1, #0
    6f5a:	0018      	movs	r0, r3
    6f5c:	4b16      	ldr	r3, [pc, #88]	; (6fb8 <_usb_d_dev_trans_stop+0xc4>)
    6f5e:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    6f60:	230b      	movs	r3, #11
    6f62:	18fb      	adds	r3, r7, r3
    6f64:	781b      	ldrb	r3, [r3, #0]
    6f66:	2214      	movs	r2, #20
    6f68:	18ba      	adds	r2, r7, r2
    6f6a:	5cd3      	ldrb	r3, [r2, r3]
    6f6c:	001a      	movs	r2, r3
    6f6e:	2317      	movs	r3, #23
    6f70:	18fb      	adds	r3, r7, r3
    6f72:	781b      	ldrb	r3, [r3, #0]
    6f74:	0011      	movs	r1, r2
    6f76:	0018      	movs	r0, r3
    6f78:	4b10      	ldr	r3, [pc, #64]	; (6fbc <_usb_d_dev_trans_stop+0xc8>)
    6f7a:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    6f7c:	230b      	movs	r3, #11
    6f7e:	18fb      	adds	r3, r7, r3
    6f80:	781b      	ldrb	r3, [r3, #0]
    6f82:	2214      	movs	r2, #20
    6f84:	18ba      	adds	r2, r7, r2
    6f86:	5cd3      	ldrb	r3, [r2, r3]
    6f88:	001a      	movs	r2, r3
    6f8a:	2317      	movs	r3, #23
    6f8c:	18fb      	adds	r3, r7, r3
    6f8e:	781b      	ldrb	r3, [r3, #0]
    6f90:	0011      	movs	r1, r2
    6f92:	0018      	movs	r0, r3
    6f94:	4b0a      	ldr	r3, [pc, #40]	; (6fc0 <_usb_d_dev_trans_stop+0xcc>)
    6f96:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    6f98:	687a      	ldr	r2, [r7, #4]
    6f9a:	68fb      	ldr	r3, [r7, #12]
    6f9c:	0011      	movs	r1, r2
    6f9e:	0018      	movs	r0, r3
    6fa0:	4b08      	ldr	r3, [pc, #32]	; (6fc4 <_usb_d_dev_trans_stop+0xd0>)
    6fa2:	4798      	blx	r3
    6fa4:	e000      	b.n	6fa8 <_usb_d_dev_trans_stop+0xb4>
		return;
    6fa6:	46c0      	nop			; (mov r8, r8)
}
    6fa8:	46bd      	mov	sp, r7
    6faa:	b006      	add	sp, #24
    6fac:	bd80      	pop	{r7, pc}
    6fae:	46c0      	nop			; (mov r8, r8)
    6fb0:	00012320 	.word	0x00012320
    6fb4:	000052bd 	.word	0x000052bd
    6fb8:	00005329 	.word	0x00005329
    6fbc:	00004ca9 	.word	0x00004ca9
    6fc0:	00004d09 	.word	0x00004d09
    6fc4:	00006ea9 	.word	0x00006ea9

00006fc8 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    6fc8:	b580      	push	{r7, lr}
    6fca:	b086      	sub	sp, #24
    6fcc:	af00      	add	r7, sp, #0
    6fce:	0002      	movs	r2, r0
    6fd0:	6039      	str	r1, [r7, #0]
    6fd2:	1dfb      	adds	r3, r7, #7
    6fd4:	701a      	strb	r2, [r3, #0]
	uint8_t            epn   = USB_EP_GET_N(ep);
    6fd6:	2317      	movs	r3, #23
    6fd8:	18fb      	adds	r3, r7, r3
    6fda:	1dfa      	adds	r2, r7, #7
    6fdc:	7812      	ldrb	r2, [r2, #0]
    6fde:	210f      	movs	r1, #15
    6fe0:	400a      	ands	r2, r1
    6fe2:	701a      	strb	r2, [r3, #0]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    6fe4:	2317      	movs	r3, #23
    6fe6:	18fb      	adds	r3, r7, r3
    6fe8:	781b      	ldrb	r3, [r3, #0]
    6fea:	015a      	lsls	r2, r3, #5
    6fec:	4b25      	ldr	r3, [pc, #148]	; (7084 <_usb_d_dev_ep_read_req+0xbc>)
    6fee:	18d3      	adds	r3, r2, r3
    6ff0:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    6ff2:	693b      	ldr	r3, [r7, #16]
    6ff4:	681b      	ldr	r3, [r3, #0]
    6ff6:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    6ff8:	693b      	ldr	r3, [r7, #16]
    6ffa:	685b      	ldr	r3, [r3, #4]
    6ffc:	049b      	lsls	r3, r3, #18
    6ffe:	0c9b      	lsrs	r3, r3, #18
    7000:	b29a      	uxth	r2, r3
    7002:	230a      	movs	r3, #10
    7004:	18fb      	adds	r3, r7, r3
    7006:	801a      	strh	r2, [r3, #0]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    7008:	2317      	movs	r3, #23
    700a:	18fb      	adds	r3, r7, r3
    700c:	781b      	ldrb	r3, [r3, #0]
    700e:	2b07      	cmp	r3, #7
    7010:	d802      	bhi.n	7018 <_usb_d_dev_ep_read_req+0x50>
    7012:	683b      	ldr	r3, [r7, #0]
    7014:	2b00      	cmp	r3, #0
    7016:	d102      	bne.n	701e <_usb_d_dev_ep_read_req+0x56>
		return -USB_ERR_PARAM;
    7018:	2312      	movs	r3, #18
    701a:	425b      	negs	r3, r3
    701c:	e02d      	b.n	707a <_usb_d_dev_ep_read_req+0xb2>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    701e:	2317      	movs	r3, #23
    7020:	18fb      	adds	r3, r7, r3
    7022:	781b      	ldrb	r3, [r3, #0]
    7024:	0018      	movs	r0, r3
    7026:	4b18      	ldr	r3, [pc, #96]	; (7088 <_usb_d_dev_ep_read_req+0xc0>)
    7028:	4798      	blx	r3
    702a:	0003      	movs	r3, r0
    702c:	001a      	movs	r2, r3
    702e:	2301      	movs	r3, #1
    7030:	4053      	eors	r3, r2
    7032:	b2db      	uxtb	r3, r3
    7034:	2b00      	cmp	r3, #0
    7036:	d002      	beq.n	703e <_usb_d_dev_ep_read_req+0x76>
		return -USB_ERR_FUNC;
    7038:	2313      	movs	r3, #19
    703a:	425b      	negs	r3, r3
    703c:	e01d      	b.n	707a <_usb_d_dev_ep_read_req+0xb2>
	}
	if (!_usbd_ep_is_setup(epn)) {
    703e:	2317      	movs	r3, #23
    7040:	18fb      	adds	r3, r7, r3
    7042:	781b      	ldrb	r3, [r3, #0]
    7044:	0018      	movs	r0, r3
    7046:	4b11      	ldr	r3, [pc, #68]	; (708c <_usb_d_dev_ep_read_req+0xc4>)
    7048:	4798      	blx	r3
    704a:	0003      	movs	r3, r0
    704c:	001a      	movs	r2, r3
    704e:	2301      	movs	r3, #1
    7050:	4053      	eors	r3, r2
    7052:	b2db      	uxtb	r3, r3
    7054:	2b00      	cmp	r3, #0
    7056:	d001      	beq.n	705c <_usb_d_dev_ep_read_req+0x94>
		return ERR_NONE;
    7058:	2300      	movs	r3, #0
    705a:	e00e      	b.n	707a <_usb_d_dev_ep_read_req+0xb2>
	}
	memcpy(req_buf, (void *)addr, 8);
    705c:	68f9      	ldr	r1, [r7, #12]
    705e:	683b      	ldr	r3, [r7, #0]
    7060:	2208      	movs	r2, #8
    7062:	0018      	movs	r0, r3
    7064:	4b0a      	ldr	r3, [pc, #40]	; (7090 <_usb_d_dev_ep_read_req+0xc8>)
    7066:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    7068:	2317      	movs	r3, #23
    706a:	18fb      	adds	r3, r7, r3
    706c:	781b      	ldrb	r3, [r3, #0]
    706e:	0018      	movs	r0, r3
    7070:	4b08      	ldr	r3, [pc, #32]	; (7094 <_usb_d_dev_ep_read_req+0xcc>)
    7072:	4798      	blx	r3

	return bytes;
    7074:	230a      	movs	r3, #10
    7076:	18fb      	adds	r3, r7, r3
    7078:	881b      	ldrh	r3, [r3, #0]
}
    707a:	0018      	movs	r0, r3
    707c:	46bd      	mov	sp, r7
    707e:	b006      	add	sp, #24
    7080:	bd80      	pop	{r7, pc}
    7082:	46c0      	nop			; (mov r8, r8)
    7084:	20001058 	.word	0x20001058
    7088:	00004d39 	.word	0x00004d39
    708c:	00004f31 	.word	0x00004f31
    7090:	0000d195 	.word	0x0000d195
    7094:	00004f65 	.word	0x00004f65

00007098 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    7098:	b580      	push	{r7, lr}
    709a:	b086      	sub	sp, #24
    709c:	af00      	add	r7, sp, #0
    709e:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    70a0:	687b      	ldr	r3, [r7, #4]
    70a2:	7a1a      	ldrb	r2, [r3, #8]
    70a4:	2316      	movs	r3, #22
    70a6:	18fb      	adds	r3, r7, r3
    70a8:	210f      	movs	r1, #15
    70aa:	400a      	ands	r2, r1
    70ac:	701a      	strb	r2, [r3, #0]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    70ae:	687b      	ldr	r3, [r7, #4]
    70b0:	7a1b      	ldrb	r3, [r3, #8]
    70b2:	001a      	movs	r2, r3
    70b4:	2380      	movs	r3, #128	; 0x80
    70b6:	401a      	ands	r2, r3
    70b8:	2315      	movs	r3, #21
    70ba:	18fb      	adds	r3, r7, r3
    70bc:	1e51      	subs	r1, r2, #1
    70be:	418a      	sbcs	r2, r1
    70c0:	701a      	strb	r2, [r3, #0]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    70c2:	2315      	movs	r3, #21
    70c4:	18fb      	adds	r3, r7, r3
    70c6:	781a      	ldrb	r2, [r3, #0]
    70c8:	2316      	movs	r3, #22
    70ca:	18fb      	adds	r3, r7, r3
    70cc:	781b      	ldrb	r3, [r3, #0]
    70ce:	0011      	movs	r1, r2
    70d0:	0018      	movs	r0, r3
    70d2:	4b75      	ldr	r3, [pc, #468]	; (72a8 <_usb_d_dev_ep_trans+0x210>)
    70d4:	4798      	blx	r3
    70d6:	0003      	movs	r3, r0
    70d8:	613b      	str	r3, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    70da:	693b      	ldr	r3, [r7, #16]
    70dc:	8a1b      	ldrh	r3, [r3, #16]
    70de:	4a73      	ldr	r2, [pc, #460]	; (72ac <_usb_d_dev_ep_trans+0x214>)
    70e0:	4293      	cmp	r3, r2
    70e2:	d004      	beq.n	70ee <_usb_d_dev_ep_trans+0x56>
    70e4:	693b      	ldr	r3, [r7, #16]
    70e6:	8a1b      	ldrh	r3, [r3, #16]
    70e8:	3b01      	subs	r3, #1
    70ea:	b29a      	uxth	r2, r3
    70ec:	e000      	b.n	70f0 <_usb_d_dev_ep_trans+0x58>
    70ee:	4a6f      	ldr	r2, [pc, #444]	; (72ac <_usb_d_dev_ep_trans+0x214>)
    70f0:	230e      	movs	r3, #14
    70f2:	18fb      	adds	r3, r7, r3
    70f4:	801a      	strh	r2, [r3, #0]
	bool     size_n_aligned = (trans->size & size_mask);
    70f6:	687b      	ldr	r3, [r7, #4]
    70f8:	685b      	ldr	r3, [r3, #4]
    70fa:	220e      	movs	r2, #14
    70fc:	18ba      	adds	r2, r7, r2
    70fe:	8812      	ldrh	r2, [r2, #0]
    7100:	401a      	ands	r2, r3
    7102:	230d      	movs	r3, #13
    7104:	18fb      	adds	r3, r7, r3
    7106:	1e51      	subs	r1, r2, #1
    7108:	418a      	sbcs	r2, r1
    710a:	701a      	strb	r2, [r3, #0]

	bool use_cache = false;
    710c:	2317      	movs	r3, #23
    710e:	18fb      	adds	r3, r7, r3
    7110:	2200      	movs	r2, #0
    7112:	701a      	strb	r2, [r3, #0]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    7114:	2316      	movs	r3, #22
    7116:	18fb      	adds	r3, r7, r3
    7118:	781b      	ldrb	r3, [r3, #0]
    711a:	2b07      	cmp	r3, #7
    711c:	d902      	bls.n	7124 <_usb_d_dev_ep_trans+0x8c>
		return -USB_ERR_PARAM;
    711e:	2312      	movs	r3, #18
    7120:	425b      	negs	r3, r3
    7122:	e0bc      	b.n	729e <_usb_d_dev_ep_trans+0x206>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    7124:	687b      	ldr	r3, [r7, #4]
    7126:	681b      	ldr	r3, [r3, #0]
    7128:	001a      	movs	r2, r3
    712a:	4b61      	ldr	r3, [pc, #388]	; (72b0 <_usb_d_dev_ep_trans+0x218>)
    712c:	429a      	cmp	r2, r3
    712e:	d91c      	bls.n	716a <_usb_d_dev_ep_trans+0xd2>
    7130:	687b      	ldr	r3, [r7, #4]
    7132:	681b      	ldr	r3, [r3, #0]
    7134:	001a      	movs	r2, r3
    7136:	687b      	ldr	r3, [r7, #4]
    7138:	685b      	ldr	r3, [r3, #4]
    713a:	18d3      	adds	r3, r2, r3
    713c:	4a5d      	ldr	r2, [pc, #372]	; (72b4 <_usb_d_dev_ep_trans+0x21c>)
    713e:	4293      	cmp	r3, r2
    7140:	d813      	bhi.n	716a <_usb_d_dev_ep_trans+0xd2>
    7142:	687b      	ldr	r3, [r7, #4]
    7144:	681b      	ldr	r3, [r3, #0]
    7146:	001a      	movs	r2, r3
    7148:	2303      	movs	r3, #3
    714a:	4013      	ands	r3, r2
    714c:	d10d      	bne.n	716a <_usb_d_dev_ep_trans+0xd2>
	    || (!dir && (trans->size < ept->size))) {
    714e:	2315      	movs	r3, #21
    7150:	18fb      	adds	r3, r7, r3
    7152:	781b      	ldrb	r3, [r3, #0]
    7154:	2201      	movs	r2, #1
    7156:	4053      	eors	r3, r2
    7158:	b2db      	uxtb	r3, r3
    715a:	2b00      	cmp	r3, #0
    715c:	d010      	beq.n	7180 <_usb_d_dev_ep_trans+0xe8>
    715e:	687b      	ldr	r3, [r7, #4]
    7160:	685b      	ldr	r3, [r3, #4]
    7162:	693a      	ldr	r2, [r7, #16]
    7164:	8a12      	ldrh	r2, [r2, #16]
    7166:	4293      	cmp	r3, r2
    7168:	d20a      	bcs.n	7180 <_usb_d_dev_ep_trans+0xe8>
		if (!ept->cache) {
    716a:	693b      	ldr	r3, [r7, #16]
    716c:	68db      	ldr	r3, [r3, #12]
    716e:	2b00      	cmp	r3, #0
    7170:	d102      	bne.n	7178 <_usb_d_dev_ep_trans+0xe0>
			return -USB_ERR_FUNC;
    7172:	2313      	movs	r3, #19
    7174:	425b      	negs	r3, r3
    7176:	e092      	b.n	729e <_usb_d_dev_ep_trans+0x206>
		}
		/* Use cache all the time. */
		use_cache = true;
    7178:	2317      	movs	r3, #23
    717a:	18fb      	adds	r3, r7, r3
    717c:	2201      	movs	r2, #1
    717e:	701a      	strb	r2, [r3, #0]
	}
	if (!dir && size_n_aligned) {
    7180:	2315      	movs	r3, #21
    7182:	18fb      	adds	r3, r7, r3
    7184:	781b      	ldrb	r3, [r3, #0]
    7186:	2201      	movs	r2, #1
    7188:	4053      	eors	r3, r2
    718a:	b2db      	uxtb	r3, r3
    718c:	2b00      	cmp	r3, #0
    718e:	d00b      	beq.n	71a8 <_usb_d_dev_ep_trans+0x110>
    7190:	230d      	movs	r3, #13
    7192:	18fb      	adds	r3, r7, r3
    7194:	781b      	ldrb	r3, [r3, #0]
    7196:	2b00      	cmp	r3, #0
    7198:	d006      	beq.n	71a8 <_usb_d_dev_ep_trans+0x110>
		if (!ept->cache) {
    719a:	693b      	ldr	r3, [r7, #16]
    719c:	68db      	ldr	r3, [r3, #12]
    719e:	2b00      	cmp	r3, #0
    71a0:	d102      	bne.n	71a8 <_usb_d_dev_ep_trans+0x110>
			return -USB_ERR_PARAM;
    71a2:	2312      	movs	r3, #18
    71a4:	425b      	negs	r3, r3
    71a6:	e07a      	b.n	729e <_usb_d_dev_ep_trans+0x206>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    71a8:	693b      	ldr	r3, [r7, #16]
    71aa:	7cdb      	ldrb	r3, [r3, #19]
    71ac:	2208      	movs	r2, #8
    71ae:	4013      	ands	r3, r2
    71b0:	b2db      	uxtb	r3, r3
    71b2:	2b00      	cmp	r3, #0
    71b4:	d001      	beq.n	71ba <_usb_d_dev_ep_trans+0x122>
		return USB_HALTED;
    71b6:	2302      	movs	r3, #2
    71b8:	e071      	b.n	729e <_usb_d_dev_ep_trans+0x206>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    71ba:	2308      	movs	r3, #8
    71bc:	18fb      	adds	r3, r7, r3
    71be:	0018      	movs	r0, r3
    71c0:	4b3d      	ldr	r3, [pc, #244]	; (72b8 <_usb_d_dev_ep_trans+0x220>)
    71c2:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    71c4:	693b      	ldr	r3, [r7, #16]
    71c6:	7cdb      	ldrb	r3, [r3, #19]
    71c8:	2240      	movs	r2, #64	; 0x40
    71ca:	4013      	ands	r3, r2
    71cc:	b2db      	uxtb	r3, r3
    71ce:	2b00      	cmp	r3, #0
    71d0:	d006      	beq.n	71e0 <_usb_d_dev_ep_trans+0x148>
		atomic_leave_critical(&flags);
    71d2:	2308      	movs	r3, #8
    71d4:	18fb      	adds	r3, r7, r3
    71d6:	0018      	movs	r0, r3
    71d8:	4b38      	ldr	r3, [pc, #224]	; (72bc <_usb_d_dev_ep_trans+0x224>)
    71da:	4798      	blx	r3
		return USB_BUSY;
    71dc:	2301      	movs	r3, #1
    71de:	e05e      	b.n	729e <_usb_d_dev_ep_trans+0x206>
	}
	ept->flags.bits.is_busy = 1;
    71e0:	693b      	ldr	r3, [r7, #16]
    71e2:	7cda      	ldrb	r2, [r3, #19]
    71e4:	2140      	movs	r1, #64	; 0x40
    71e6:	430a      	orrs	r2, r1
    71e8:	74da      	strb	r2, [r3, #19]
	atomic_leave_critical(&flags);
    71ea:	2308      	movs	r3, #8
    71ec:	18fb      	adds	r3, r7, r3
    71ee:	0018      	movs	r0, r3
    71f0:	4b32      	ldr	r3, [pc, #200]	; (72bc <_usb_d_dev_ep_trans+0x224>)
    71f2:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    71f4:	687b      	ldr	r3, [r7, #4]
    71f6:	681a      	ldr	r2, [r3, #0]
    71f8:	693b      	ldr	r3, [r7, #16]
    71fa:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    71fc:	687b      	ldr	r3, [r7, #4]
    71fe:	685a      	ldr	r2, [r3, #4]
    7200:	693b      	ldr	r3, [r7, #16]
    7202:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    7204:	693b      	ldr	r3, [r7, #16]
    7206:	2200      	movs	r2, #0
    7208:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    720a:	693b      	ldr	r3, [r7, #16]
    720c:	2215      	movs	r2, #21
    720e:	18ba      	adds	r2, r7, r2
    7210:	7812      	ldrb	r2, [r2, #0]
    7212:	01d0      	lsls	r0, r2, #7
    7214:	7cda      	ldrb	r2, [r3, #19]
    7216:	217f      	movs	r1, #127	; 0x7f
    7218:	400a      	ands	r2, r1
    721a:	1c11      	adds	r1, r2, #0
    721c:	1c02      	adds	r2, r0, #0
    721e:	430a      	orrs	r2, r1
    7220:	74da      	strb	r2, [r3, #19]
	ept->flags.bits.use_cache = use_cache;
    7222:	693b      	ldr	r3, [r7, #16]
    7224:	2217      	movs	r2, #23
    7226:	18ba      	adds	r2, r7, r2
    7228:	7812      	ldrb	r2, [r2, #0]
    722a:	2101      	movs	r1, #1
    722c:	400a      	ands	r2, r1
    722e:	0150      	lsls	r0, r2, #5
    7230:	7cda      	ldrb	r2, [r3, #19]
    7232:	2120      	movs	r1, #32
    7234:	438a      	bics	r2, r1
    7236:	1c11      	adds	r1, r2, #0
    7238:	1c02      	adds	r2, r0, #0
    723a:	430a      	orrs	r2, r1
    723c:	74da      	strb	r2, [r3, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    723e:	687b      	ldr	r3, [r7, #4]
    7240:	7a5b      	ldrb	r3, [r3, #9]
    7242:	2b00      	cmp	r3, #0
    7244:	d009      	beq.n	725a <_usb_d_dev_ep_trans+0x1c2>
    7246:	230d      	movs	r3, #13
    7248:	18fb      	adds	r3, r7, r3
    724a:	781b      	ldrb	r3, [r3, #0]
    724c:	2201      	movs	r2, #1
    724e:	4053      	eors	r3, r2
    7250:	b2db      	uxtb	r3, r3
    7252:	2b00      	cmp	r3, #0
    7254:	d001      	beq.n	725a <_usb_d_dev_ep_trans+0x1c2>
    7256:	2301      	movs	r3, #1
    7258:	e000      	b.n	725c <_usb_d_dev_ep_trans+0x1c4>
    725a:	2300      	movs	r3, #0
    725c:	b2db      	uxtb	r3, r3
    725e:	1c1a      	adds	r2, r3, #0
    7260:	2301      	movs	r3, #1
    7262:	4013      	ands	r3, r2
    7264:	b2da      	uxtb	r2, r3
    7266:	693b      	ldr	r3, [r7, #16]
    7268:	2101      	movs	r1, #1
    726a:	400a      	ands	r2, r1
    726c:	0110      	lsls	r0, r2, #4
    726e:	7cda      	ldrb	r2, [r3, #19]
    7270:	2110      	movs	r1, #16
    7272:	438a      	bics	r2, r1
    7274:	1c11      	adds	r1, r2, #0
    7276:	1c02      	adds	r2, r0, #0
    7278:	430a      	orrs	r2, r1
    727a:	74da      	strb	r2, [r3, #19]

	if (dir) {
    727c:	2315      	movs	r3, #21
    727e:	18fb      	adds	r3, r7, r3
    7280:	781b      	ldrb	r3, [r3, #0]
    7282:	2b00      	cmp	r3, #0
    7284:	d005      	beq.n	7292 <_usb_d_dev_ep_trans+0x1fa>
		_usb_d_dev_in_next(ept, false);
    7286:	693b      	ldr	r3, [r7, #16]
    7288:	2100      	movs	r1, #0
    728a:	0018      	movs	r0, r3
    728c:	4b0c      	ldr	r3, [pc, #48]	; (72c0 <_usb_d_dev_ep_trans+0x228>)
    728e:	4798      	blx	r3
    7290:	e004      	b.n	729c <_usb_d_dev_ep_trans+0x204>
	} else {
		_usb_d_dev_out_next(ept, false);
    7292:	693b      	ldr	r3, [r7, #16]
    7294:	2100      	movs	r1, #0
    7296:	0018      	movs	r0, r3
    7298:	4b0a      	ldr	r3, [pc, #40]	; (72c4 <_usb_d_dev_ep_trans+0x22c>)
    729a:	4798      	blx	r3
	}

	return ERR_NONE;
    729c:	2300      	movs	r3, #0
}
    729e:	0018      	movs	r0, r3
    72a0:	46bd      	mov	sp, r7
    72a2:	b006      	add	sp, #24
    72a4:	bd80      	pop	{r7, pc}
    72a6:	46c0      	nop			; (mov r8, r8)
    72a8:	00005409 	.word	0x00005409
    72ac:	000003ff 	.word	0x000003ff
    72b0:	1fffffff 	.word	0x1fffffff
    72b4:	20007fff 	.word	0x20007fff
    72b8:	00001ad5 	.word	0x00001ad5
    72bc:	00001af7 	.word	0x00001af7
    72c0:	00005745 	.word	0x00005745
    72c4:	000059e5 	.word	0x000059e5

000072c8 <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    72c8:	b580      	push	{r7, lr}
    72ca:	b084      	sub	sp, #16
    72cc:	af00      	add	r7, sp, #0
    72ce:	0002      	movs	r2, r0
    72d0:	6039      	str	r1, [r7, #0]
    72d2:	1dfb      	adds	r3, r7, #7
    72d4:	701a      	strb	r2, [r3, #0]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    72d6:	683b      	ldr	r3, [r7, #0]
    72d8:	2b00      	cmp	r3, #0
    72da:	d001      	beq.n	72e0 <_usb_d_dev_register_callback+0x18>
    72dc:	683b      	ldr	r3, [r7, #0]
    72de:	e000      	b.n	72e2 <_usb_d_dev_register_callback+0x1a>
    72e0:	4b0a      	ldr	r3, [pc, #40]	; (730c <_usb_d_dev_register_callback+0x44>)
    72e2:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    72e4:	1dfb      	adds	r3, r7, #7
    72e6:	781b      	ldrb	r3, [r3, #0]
    72e8:	2b01      	cmp	r3, #1
    72ea:	d103      	bne.n	72f4 <_usb_d_dev_register_callback+0x2c>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    72ec:	4b08      	ldr	r3, [pc, #32]	; (7310 <_usb_d_dev_register_callback+0x48>)
    72ee:	68fa      	ldr	r2, [r7, #12]
    72f0:	605a      	str	r2, [r3, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    72f2:	e006      	b.n	7302 <_usb_d_dev_register_callback+0x3a>
	} else if (type == USB_D_CB_SOF) {
    72f4:	1dfb      	adds	r3, r7, #7
    72f6:	781b      	ldrb	r3, [r3, #0]
    72f8:	2b00      	cmp	r3, #0
    72fa:	d102      	bne.n	7302 <_usb_d_dev_register_callback+0x3a>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    72fc:	4b04      	ldr	r3, [pc, #16]	; (7310 <_usb_d_dev_register_callback+0x48>)
    72fe:	68fa      	ldr	r2, [r7, #12]
    7300:	601a      	str	r2, [r3, #0]
}
    7302:	46c0      	nop			; (mov r8, r8)
    7304:	46bd      	mov	sp, r7
    7306:	b004      	add	sp, #16
    7308:	bd80      	pop	{r7, pc}
    730a:	46c0      	nop			; (mov r8, r8)
    730c:	00004b49 	.word	0x00004b49
    7310:	20000ef0 	.word	0x20000ef0

00007314 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    7314:	b580      	push	{r7, lr}
    7316:	b084      	sub	sp, #16
    7318:	af00      	add	r7, sp, #0
    731a:	0002      	movs	r2, r0
    731c:	6039      	str	r1, [r7, #0]
    731e:	1dfb      	adds	r3, r7, #7
    7320:	701a      	strb	r2, [r3, #0]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    7322:	683b      	ldr	r3, [r7, #0]
    7324:	2b00      	cmp	r3, #0
    7326:	d001      	beq.n	732c <_usb_d_dev_register_ep_callback+0x18>
    7328:	683b      	ldr	r3, [r7, #0]
    732a:	e000      	b.n	732e <_usb_d_dev_register_ep_callback+0x1a>
    732c:	4b0e      	ldr	r3, [pc, #56]	; (7368 <_usb_d_dev_register_ep_callback+0x54>)
    732e:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    7330:	1dfb      	adds	r3, r7, #7
    7332:	781b      	ldrb	r3, [r3, #0]
    7334:	2b00      	cmp	r3, #0
    7336:	d103      	bne.n	7340 <_usb_d_dev_register_ep_callback+0x2c>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    7338:	4b0c      	ldr	r3, [pc, #48]	; (736c <_usb_d_dev_register_ep_callback+0x58>)
    733a:	68fa      	ldr	r2, [r7, #12]
    733c:	609a      	str	r2, [r3, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    733e:	e00e      	b.n	735e <_usb_d_dev_register_ep_callback+0x4a>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    7340:	1dfb      	adds	r3, r7, #7
    7342:	781b      	ldrb	r3, [r3, #0]
    7344:	2b01      	cmp	r3, #1
    7346:	d103      	bne.n	7350 <_usb_d_dev_register_ep_callback+0x3c>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    7348:	4b08      	ldr	r3, [pc, #32]	; (736c <_usb_d_dev_register_ep_callback+0x58>)
    734a:	68fa      	ldr	r2, [r7, #12]
    734c:	60da      	str	r2, [r3, #12]
}
    734e:	e006      	b.n	735e <_usb_d_dev_register_ep_callback+0x4a>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    7350:	1dfb      	adds	r3, r7, #7
    7352:	781b      	ldrb	r3, [r3, #0]
    7354:	2b02      	cmp	r3, #2
    7356:	d102      	bne.n	735e <_usb_d_dev_register_ep_callback+0x4a>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    7358:	4b04      	ldr	r3, [pc, #16]	; (736c <_usb_d_dev_register_ep_callback+0x58>)
    735a:	68fa      	ldr	r2, [r7, #12]
    735c:	611a      	str	r2, [r3, #16]
}
    735e:	46c0      	nop			; (mov r8, r8)
    7360:	46bd      	mov	sp, r7
    7362:	b004      	add	sp, #16
    7364:	bd80      	pop	{r7, pc}
    7366:	46c0      	nop			; (mov r8, r8)
    7368:	00004b49 	.word	0x00004b49
    736c:	20000ef0 	.word	0x20000ef0

00007370 <USB_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_Handler(void)
{
    7370:	b580      	push	{r7, lr}
    7372:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    7374:	4b02      	ldr	r3, [pc, #8]	; (7380 <USB_Handler+0x10>)
    7376:	4798      	blx	r3
}
    7378:	46c0      	nop			; (mov r8, r8)
    737a:	46bd      	mov	sp, r7
    737c:	bd80      	pop	{r7, pc}
    737e:	46c0      	nop			; (mov r8, r8)
    7380:	00006371 	.word	0x00006371

00007384 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    7384:	b580      	push	{r7, lr}
    7386:	af00      	add	r7, sp, #0

	usart_sync_enable(&TARGET_IO);
    7388:	4b05      	ldr	r3, [pc, #20]	; (73a0 <stdio_redirect_init+0x1c>)
    738a:	0018      	movs	r0, r3
    738c:	4b05      	ldr	r3, [pc, #20]	; (73a4 <stdio_redirect_init+0x20>)
    738e:	4798      	blx	r3
	stdio_io_init(&TARGET_IO.io);
    7390:	4b03      	ldr	r3, [pc, #12]	; (73a0 <stdio_redirect_init+0x1c>)
    7392:	0018      	movs	r0, r3
    7394:	4b04      	ldr	r3, [pc, #16]	; (73a8 <stdio_redirect_init+0x24>)
    7396:	4798      	blx	r3
}
    7398:	46c0      	nop			; (mov r8, r8)
    739a:	46bd      	mov	sp, r7
    739c:	bd80      	pop	{r7, pc}
    739e:	46c0      	nop			; (mov r8, r8)
    73a0:	20001270 	.word	0x20001270
    73a4:	00001ee1 	.word	0x00001ee1
    73a8:	000073fd 	.word	0x000073fd

000073ac <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    73ac:	b580      	push	{r7, lr}
    73ae:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    73b0:	4b07      	ldr	r3, [pc, #28]	; (73d0 <cdc_device_acm_init+0x24>)
    73b2:	0018      	movs	r0, r3
    73b4:	4b07      	ldr	r3, [pc, #28]	; (73d4 <cdc_device_acm_init+0x28>)
    73b6:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    73b8:	4b07      	ldr	r3, [pc, #28]	; (73d8 <cdc_device_acm_init+0x2c>)
    73ba:	4798      	blx	r3

	usbdc_start(single_desc);
    73bc:	4b07      	ldr	r3, [pc, #28]	; (73dc <cdc_device_acm_init+0x30>)
    73be:	0018      	movs	r0, r3
    73c0:	4b07      	ldr	r3, [pc, #28]	; (73e0 <cdc_device_acm_init+0x34>)
    73c2:	4798      	blx	r3
	usbdc_attach();
    73c4:	4b07      	ldr	r3, [pc, #28]	; (73e4 <cdc_device_acm_init+0x38>)
    73c6:	4798      	blx	r3
}
    73c8:	46c0      	nop			; (mov r8, r8)
    73ca:	46bd      	mov	sp, r7
    73cc:	bd80      	pop	{r7, pc}
    73ce:	46c0      	nop			; (mov r8, r8)
    73d0:	20001198 	.word	0x20001198
    73d4:	000087cd 	.word	0x000087cd
    73d8:	000079b5 	.word	0x000079b5
    73dc:	20000070 	.word	0x20000070
    73e0:	00008871 	.word	0x00008871
    73e4:	000088c1 	.word	0x000088c1

000073e8 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    73e8:	b580      	push	{r7, lr}
    73ea:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    73ec:	4b02      	ldr	r3, [pc, #8]	; (73f8 <usb_init+0x10>)
    73ee:	4798      	blx	r3
}
    73f0:	46c0      	nop			; (mov r8, r8)
    73f2:	46bd      	mov	sp, r7
    73f4:	bd80      	pop	{r7, pc}
    73f6:	46c0      	nop			; (mov r8, r8)
    73f8:	000073ad 	.word	0x000073ad

000073fc <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    73fc:	b580      	push	{r7, lr}
    73fe:	b082      	sub	sp, #8
    7400:	af00      	add	r7, sp, #0
    7402:	6078      	str	r0, [r7, #4]
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    7404:	4b0a      	ldr	r3, [pc, #40]	; (7430 <stdio_io_init+0x34>)
    7406:	681b      	ldr	r3, [r3, #0]
    7408:	689b      	ldr	r3, [r3, #8]
    740a:	2100      	movs	r1, #0
    740c:	0018      	movs	r0, r3
    740e:	4b09      	ldr	r3, [pc, #36]	; (7434 <stdio_io_init+0x38>)
    7410:	4798      	blx	r3
	setbuf(stdin, NULL);
    7412:	4b07      	ldr	r3, [pc, #28]	; (7430 <stdio_io_init+0x34>)
    7414:	681b      	ldr	r3, [r3, #0]
    7416:	685b      	ldr	r3, [r3, #4]
    7418:	2100      	movs	r1, #0
    741a:	0018      	movs	r0, r3
    741c:	4b05      	ldr	r3, [pc, #20]	; (7434 <stdio_io_init+0x38>)
    741e:	4798      	blx	r3
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    7420:	4b05      	ldr	r3, [pc, #20]	; (7438 <stdio_io_init+0x3c>)
    7422:	687a      	ldr	r2, [r7, #4]
    7424:	601a      	str	r2, [r3, #0]
}
    7426:	46c0      	nop			; (mov r8, r8)
    7428:	46bd      	mov	sp, r7
    742a:	b002      	add	sp, #8
    742c:	bd80      	pop	{r7, pc}
    742e:	46c0      	nop			; (mov r8, r8)
    7430:	20000084 	.word	0x20000084
    7434:	0000d385 	.word	0x0000d385
    7438:	200011d8 	.word	0x200011d8

0000743c <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    743c:	b580      	push	{r7, lr}
    743e:	b082      	sub	sp, #8
    7440:	af00      	add	r7, sp, #0
    7442:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    7444:	687b      	ldr	r3, [r7, #4]
    7446:	781b      	ldrb	r3, [r3, #0]
    7448:	b29a      	uxth	r2, r3
    744a:	687b      	ldr	r3, [r7, #4]
    744c:	3301      	adds	r3, #1
    744e:	781b      	ldrb	r3, [r3, #0]
    7450:	b29b      	uxth	r3, r3
    7452:	021b      	lsls	r3, r3, #8
    7454:	b29b      	uxth	r3, r3
    7456:	18d3      	adds	r3, r2, r3
    7458:	b29b      	uxth	r3, r3
}
    745a:	0018      	movs	r0, r3
    745c:	46bd      	mov	sp, r7
    745e:	b002      	add	sp, #8
    7460:	bd80      	pop	{r7, pc}

00007462 <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    7462:	b580      	push	{r7, lr}
    7464:	b082      	sub	sp, #8
    7466:	af00      	add	r7, sp, #0
    7468:	6078      	str	r0, [r7, #4]
	return desc[0];
    746a:	687b      	ldr	r3, [r7, #4]
    746c:	781b      	ldrb	r3, [r3, #0]
}
    746e:	0018      	movs	r0, r3
    7470:	46bd      	mov	sp, r7
    7472:	b002      	add	sp, #8
    7474:	bd80      	pop	{r7, pc}
	...

00007478 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    7478:	b580      	push	{r7, lr}
    747a:	b082      	sub	sp, #8
    747c:	af00      	add	r7, sp, #0
    747e:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    7480:	687b      	ldr	r3, [r7, #4]
    7482:	0018      	movs	r0, r3
    7484:	4b04      	ldr	r3, [pc, #16]	; (7498 <usb_desc_next+0x20>)
    7486:	4798      	blx	r3
    7488:	0003      	movs	r3, r0
    748a:	001a      	movs	r2, r3
    748c:	687b      	ldr	r3, [r7, #4]
    748e:	189b      	adds	r3, r3, r2
}
    7490:	0018      	movs	r0, r3
    7492:	46bd      	mov	sp, r7
    7494:	b002      	add	sp, #8
    7496:	bd80      	pop	{r7, pc}
    7498:	00007463 	.word	0x00007463

0000749c <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    749c:	b580      	push	{r7, lr}
    749e:	b08c      	sub	sp, #48	; 0x30
    74a0:	af00      	add	r7, sp, #0
    74a2:	6078      	str	r0, [r7, #4]
    74a4:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    74a6:	687b      	ldr	r3, [r7, #4]
    74a8:	689b      	ldr	r3, [r3, #8]
    74aa:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    74ac:	683b      	ldr	r3, [r7, #0]
    74ae:	681b      	ldr	r3, [r3, #0]
    74b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    74b2:	2327      	movs	r3, #39	; 0x27
    74b4:	18fb      	adds	r3, r7, r3
    74b6:	2200      	movs	r2, #0
    74b8:	701a      	strb	r2, [r3, #0]
    74ba:	e0b7      	b.n	762c <cdcdf_acm_enable+0x190>
		if (NULL == ifc) {
    74bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    74be:	2b00      	cmp	r3, #0
    74c0:	d102      	bne.n	74c8 <cdcdf_acm_enable+0x2c>
			return ERR_NOT_FOUND;
    74c2:	230a      	movs	r3, #10
    74c4:	425b      	negs	r3, r3
    74c6:	e0bb      	b.n	7640 <cdcdf_acm_enable+0x1a4>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    74c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    74ca:	789a      	ldrb	r2, [r3, #2]
    74cc:	230c      	movs	r3, #12
    74ce:	18fb      	adds	r3, r7, r3
    74d0:	709a      	strb	r2, [r3, #2]
		ifc_desc.bInterfaceClass  = ifc[5];
    74d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    74d4:	795a      	ldrb	r2, [r3, #5]
    74d6:	230c      	movs	r3, #12
    74d8:	18fb      	adds	r3, r7, r3
    74da:	715a      	strb	r2, [r3, #5]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    74dc:	230c      	movs	r3, #12
    74de:	18fb      	adds	r3, r7, r3
    74e0:	795b      	ldrb	r3, [r3, #5]
    74e2:	2b02      	cmp	r3, #2
    74e4:	d004      	beq.n	74f0 <cdcdf_acm_enable+0x54>
    74e6:	230c      	movs	r3, #12
    74e8:	18fb      	adds	r3, r7, r3
    74ea:	795b      	ldrb	r3, [r3, #5]
    74ec:	2b0a      	cmp	r3, #10
    74ee:	d129      	bne.n	7544 <cdcdf_acm_enable+0xa8>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    74f0:	2327      	movs	r3, #39	; 0x27
    74f2:	18fb      	adds	r3, r7, r3
    74f4:	781b      	ldrb	r3, [r3, #0]
    74f6:	6a3a      	ldr	r2, [r7, #32]
    74f8:	5cd2      	ldrb	r2, [r2, r3]
    74fa:	230c      	movs	r3, #12
    74fc:	18fb      	adds	r3, r7, r3
    74fe:	789b      	ldrb	r3, [r3, #2]
    7500:	429a      	cmp	r2, r3
    7502:	d102      	bne.n	750a <cdcdf_acm_enable+0x6e>
				return ERR_ALREADY_INITIALIZED;
    7504:	2312      	movs	r3, #18
    7506:	425b      	negs	r3, r3
    7508:	e09a      	b.n	7640 <cdcdf_acm_enable+0x1a4>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    750a:	2327      	movs	r3, #39	; 0x27
    750c:	18fb      	adds	r3, r7, r3
    750e:	781b      	ldrb	r3, [r3, #0]
    7510:	6a3a      	ldr	r2, [r7, #32]
    7512:	5cd3      	ldrb	r3, [r2, r3]
    7514:	2bff      	cmp	r3, #255	; 0xff
    7516:	d002      	beq.n	751e <cdcdf_acm_enable+0x82>
				return ERR_NO_RESOURCE;
    7518:	231c      	movs	r3, #28
    751a:	425b      	negs	r3, r3
    751c:	e090      	b.n	7640 <cdcdf_acm_enable+0x1a4>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    751e:	2327      	movs	r3, #39	; 0x27
    7520:	18fb      	adds	r3, r7, r3
    7522:	781b      	ldrb	r3, [r3, #0]
    7524:	220c      	movs	r2, #12
    7526:	18ba      	adds	r2, r7, r2
    7528:	7891      	ldrb	r1, [r2, #2]
    752a:	6a3a      	ldr	r2, [r7, #32]
    752c:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    752e:	46c0      	nop			; (mov r8, r8)
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    7530:	683b      	ldr	r3, [r7, #0]
    7532:	6859      	ldr	r1, [r3, #4]
    7534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7536:	2205      	movs	r2, #5
    7538:	0018      	movs	r0, r3
    753a:	4b43      	ldr	r3, [pc, #268]	; (7648 <cdcdf_acm_enable+0x1ac>)
    753c:	4798      	blx	r3
    753e:	0003      	movs	r3, r0
    7540:	62bb      	str	r3, [r7, #40]	; 0x28
		while (NULL != ep) {
    7542:	e05c      	b.n	75fe <cdcdf_acm_enable+0x162>
			return ERR_NOT_FOUND;
    7544:	230a      	movs	r3, #10
    7546:	425b      	negs	r3, r3
    7548:	e07a      	b.n	7640 <cdcdf_acm_enable+0x1a4>
			ep_desc.bEndpointAddress = ep[2];
    754a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    754c:	789a      	ldrb	r2, [r3, #2]
    754e:	2318      	movs	r3, #24
    7550:	18fb      	adds	r3, r7, r3
    7552:	709a      	strb	r2, [r3, #2]
			ep_desc.bmAttributes     = ep[3];
    7554:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7556:	78da      	ldrb	r2, [r3, #3]
    7558:	2318      	movs	r3, #24
    755a:	18fb      	adds	r3, r7, r3
    755c:	70da      	strb	r2, [r3, #3]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    755e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7560:	3304      	adds	r3, #4
    7562:	0018      	movs	r0, r3
    7564:	4b39      	ldr	r3, [pc, #228]	; (764c <cdcdf_acm_enable+0x1b0>)
    7566:	4798      	blx	r3
    7568:	0003      	movs	r3, r0
    756a:	001a      	movs	r2, r3
    756c:	2318      	movs	r3, #24
    756e:	18fb      	adds	r3, r7, r3
    7570:	809a      	strh	r2, [r3, #4]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    7572:	2318      	movs	r3, #24
    7574:	18fb      	adds	r3, r7, r3
    7576:	7898      	ldrb	r0, [r3, #2]
    7578:	2318      	movs	r3, #24
    757a:	18fb      	adds	r3, r7, r3
    757c:	78d9      	ldrb	r1, [r3, #3]
    757e:	2318      	movs	r3, #24
    7580:	18fb      	adds	r3, r7, r3
    7582:	889b      	ldrh	r3, [r3, #4]
    7584:	001a      	movs	r2, r3
    7586:	4b32      	ldr	r3, [pc, #200]	; (7650 <cdcdf_acm_enable+0x1b4>)
    7588:	4798      	blx	r3
    758a:	1e03      	subs	r3, r0, #0
    758c:	d002      	beq.n	7594 <cdcdf_acm_enable+0xf8>
				return ERR_NOT_INITIALIZED;
    758e:	2314      	movs	r3, #20
    7590:	425b      	negs	r3, r3
    7592:	e055      	b.n	7640 <cdcdf_acm_enable+0x1a4>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    7594:	2318      	movs	r3, #24
    7596:	18fb      	adds	r3, r7, r3
    7598:	789b      	ldrb	r3, [r3, #2]
    759a:	b25b      	sxtb	r3, r3
    759c:	2b00      	cmp	r3, #0
    759e:	da13      	bge.n	75c8 <cdcdf_acm_enable+0x12c>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    75a0:	2327      	movs	r3, #39	; 0x27
    75a2:	18fb      	adds	r3, r7, r3
    75a4:	781b      	ldrb	r3, [r3, #0]
    75a6:	2218      	movs	r2, #24
    75a8:	18ba      	adds	r2, r7, r2
    75aa:	7891      	ldrb	r1, [r2, #2]
    75ac:	6a3a      	ldr	r2, [r7, #32]
    75ae:	18d3      	adds	r3, r2, r3
    75b0:	1c0a      	adds	r2, r1, #0
    75b2:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    75b4:	2327      	movs	r3, #39	; 0x27
    75b6:	18fb      	adds	r3, r7, r3
    75b8:	781b      	ldrb	r3, [r3, #0]
    75ba:	6a3a      	ldr	r2, [r7, #32]
    75bc:	18d3      	adds	r3, r2, r3
    75be:	789b      	ldrb	r3, [r3, #2]
    75c0:	0018      	movs	r0, r3
    75c2:	4b24      	ldr	r3, [pc, #144]	; (7654 <cdcdf_acm_enable+0x1b8>)
    75c4:	4798      	blx	r3
    75c6:	e009      	b.n	75dc <cdcdf_acm_enable+0x140>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    75c8:	2318      	movs	r3, #24
    75ca:	18fb      	adds	r3, r7, r3
    75cc:	789a      	ldrb	r2, [r3, #2]
    75ce:	6a3b      	ldr	r3, [r7, #32]
    75d0:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    75d2:	6a3b      	ldr	r3, [r7, #32]
    75d4:	791b      	ldrb	r3, [r3, #4]
    75d6:	0018      	movs	r0, r3
    75d8:	4b1e      	ldr	r3, [pc, #120]	; (7654 <cdcdf_acm_enable+0x1b8>)
    75da:	4798      	blx	r3
			}
			desc->sod = ep;
    75dc:	683b      	ldr	r3, [r7, #0]
    75de:	6aba      	ldr	r2, [r7, #40]	; 0x28
    75e0:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    75e2:	683b      	ldr	r3, [r7, #0]
    75e4:	681b      	ldr	r3, [r3, #0]
    75e6:	0018      	movs	r0, r3
    75e8:	4b1b      	ldr	r3, [pc, #108]	; (7658 <cdcdf_acm_enable+0x1bc>)
    75ea:	4798      	blx	r3
    75ec:	0002      	movs	r2, r0
    75ee:	683b      	ldr	r3, [r7, #0]
    75f0:	685b      	ldr	r3, [r3, #4]
    75f2:	0019      	movs	r1, r3
    75f4:	0010      	movs	r0, r2
    75f6:	4b19      	ldr	r3, [pc, #100]	; (765c <cdcdf_acm_enable+0x1c0>)
    75f8:	4798      	blx	r3
    75fa:	0003      	movs	r3, r0
    75fc:	62bb      	str	r3, [r7, #40]	; 0x28
		while (NULL != ep) {
    75fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7600:	2b00      	cmp	r3, #0
    7602:	d1a2      	bne.n	754a <cdcdf_acm_enable+0xae>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    7604:	683b      	ldr	r3, [r7, #0]
    7606:	681b      	ldr	r3, [r3, #0]
    7608:	0018      	movs	r0, r3
    760a:	4b13      	ldr	r3, [pc, #76]	; (7658 <cdcdf_acm_enable+0x1bc>)
    760c:	4798      	blx	r3
    760e:	683b      	ldr	r3, [r7, #0]
    7610:	685b      	ldr	r3, [r3, #4]
    7612:	2204      	movs	r2, #4
    7614:	0019      	movs	r1, r3
    7616:	4b0c      	ldr	r3, [pc, #48]	; (7648 <cdcdf_acm_enable+0x1ac>)
    7618:	4798      	blx	r3
    761a:	0003      	movs	r3, r0
    761c:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    761e:	2327      	movs	r3, #39	; 0x27
    7620:	18fb      	adds	r3, r7, r3
    7622:	781a      	ldrb	r2, [r3, #0]
    7624:	2327      	movs	r3, #39	; 0x27
    7626:	18fb      	adds	r3, r7, r3
    7628:	3201      	adds	r2, #1
    762a:	701a      	strb	r2, [r3, #0]
    762c:	2327      	movs	r3, #39	; 0x27
    762e:	18fb      	adds	r3, r7, r3
    7630:	781b      	ldrb	r3, [r3, #0]
    7632:	2b01      	cmp	r3, #1
    7634:	d800      	bhi.n	7638 <cdcdf_acm_enable+0x19c>
    7636:	e741      	b.n	74bc <cdcdf_acm_enable+0x20>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    7638:	4b09      	ldr	r3, [pc, #36]	; (7660 <cdcdf_acm_enable+0x1c4>)
    763a:	2201      	movs	r2, #1
    763c:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    763e:	2300      	movs	r3, #0
}
    7640:	0018      	movs	r0, r3
    7642:	46bd      	mov	sp, r7
    7644:	b00c      	add	sp, #48	; 0x30
    7646:	bd80      	pop	{r7, pc}
    7648:	000089c5 	.word	0x000089c5
    764c:	0000743d 	.word	0x0000743d
    7650:	00002655 	.word	0x00002655
    7654:	00002781 	.word	0x00002781
    7658:	00007479 	.word	0x00007479
    765c:	00008a29 	.word	0x00008a29
    7660:	200011e8 	.word	0x200011e8

00007664 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    7664:	b580      	push	{r7, lr}
    7666:	b088      	sub	sp, #32
    7668:	af00      	add	r7, sp, #0
    766a:	6078      	str	r0, [r7, #4]
    766c:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    766e:	687b      	ldr	r3, [r7, #4]
    7670:	689b      	ldr	r3, [r3, #8]
    7672:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    7674:	683b      	ldr	r3, [r7, #0]
    7676:	2b00      	cmp	r3, #0
    7678:	d012      	beq.n	76a0 <cdcdf_acm_disable+0x3c>
		ifc_desc.bInterfaceClass = desc->sod[5];
    767a:	683b      	ldr	r3, [r7, #0]
    767c:	681b      	ldr	r3, [r3, #0]
    767e:	795a      	ldrb	r2, [r3, #5]
    7680:	230c      	movs	r3, #12
    7682:	18fb      	adds	r3, r7, r3
    7684:	715a      	strb	r2, [r3, #5]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    7686:	230c      	movs	r3, #12
    7688:	18fb      	adds	r3, r7, r3
    768a:	795b      	ldrb	r3, [r3, #5]
    768c:	2b02      	cmp	r3, #2
    768e:	d007      	beq.n	76a0 <cdcdf_acm_disable+0x3c>
    7690:	230c      	movs	r3, #12
    7692:	18fb      	adds	r3, r7, r3
    7694:	795b      	ldrb	r3, [r3, #5]
    7696:	2b0a      	cmp	r3, #10
    7698:	d002      	beq.n	76a0 <cdcdf_acm_disable+0x3c>
			return ERR_NOT_FOUND;
    769a:	230a      	movs	r3, #10
    769c:	425b      	negs	r3, r3
    769e:	e047      	b.n	7730 <cdcdf_acm_disable+0xcc>
		}
	}

	for (i = 0; i < 2; i++) {
    76a0:	231f      	movs	r3, #31
    76a2:	18fb      	adds	r3, r7, r3
    76a4:	2200      	movs	r2, #0
    76a6:	701a      	strb	r2, [r3, #0]
    76a8:	e02d      	b.n	7706 <cdcdf_acm_disable+0xa2>
		if (func_data->func_iface[i] == 0xFF) {
    76aa:	231f      	movs	r3, #31
    76ac:	18fb      	adds	r3, r7, r3
    76ae:	781b      	ldrb	r3, [r3, #0]
    76b0:	69ba      	ldr	r2, [r7, #24]
    76b2:	5cd3      	ldrb	r3, [r2, r3]
    76b4:	2bff      	cmp	r3, #255	; 0xff
    76b6:	d01e      	beq.n	76f6 <cdcdf_acm_disable+0x92>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    76b8:	231f      	movs	r3, #31
    76ba:	18fb      	adds	r3, r7, r3
    76bc:	781b      	ldrb	r3, [r3, #0]
    76be:	69ba      	ldr	r2, [r7, #24]
    76c0:	21ff      	movs	r1, #255	; 0xff
    76c2:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    76c4:	231f      	movs	r3, #31
    76c6:	18fb      	adds	r3, r7, r3
    76c8:	781b      	ldrb	r3, [r3, #0]
    76ca:	69ba      	ldr	r2, [r7, #24]
    76cc:	18d3      	adds	r3, r2, r3
    76ce:	789b      	ldrb	r3, [r3, #2]
    76d0:	2bff      	cmp	r3, #255	; 0xff
    76d2:	d011      	beq.n	76f8 <cdcdf_acm_disable+0x94>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    76d4:	231f      	movs	r3, #31
    76d6:	18fb      	adds	r3, r7, r3
    76d8:	781b      	ldrb	r3, [r3, #0]
    76da:	69ba      	ldr	r2, [r7, #24]
    76dc:	18d3      	adds	r3, r2, r3
    76de:	789b      	ldrb	r3, [r3, #2]
    76e0:	0018      	movs	r0, r3
    76e2:	4b15      	ldr	r3, [pc, #84]	; (7738 <cdcdf_acm_disable+0xd4>)
    76e4:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    76e6:	231f      	movs	r3, #31
    76e8:	18fb      	adds	r3, r7, r3
    76ea:	781b      	ldrb	r3, [r3, #0]
    76ec:	69ba      	ldr	r2, [r7, #24]
    76ee:	18d3      	adds	r3, r2, r3
    76f0:	22ff      	movs	r2, #255	; 0xff
    76f2:	709a      	strb	r2, [r3, #2]
    76f4:	e000      	b.n	76f8 <cdcdf_acm_disable+0x94>
			continue;
    76f6:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < 2; i++) {
    76f8:	231f      	movs	r3, #31
    76fa:	18fb      	adds	r3, r7, r3
    76fc:	781a      	ldrb	r2, [r3, #0]
    76fe:	231f      	movs	r3, #31
    7700:	18fb      	adds	r3, r7, r3
    7702:	3201      	adds	r2, #1
    7704:	701a      	strb	r2, [r3, #0]
    7706:	231f      	movs	r3, #31
    7708:	18fb      	adds	r3, r7, r3
    770a:	781b      	ldrb	r3, [r3, #0]
    770c:	2b01      	cmp	r3, #1
    770e:	d9cc      	bls.n	76aa <cdcdf_acm_disable+0x46>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    7710:	69bb      	ldr	r3, [r7, #24]
    7712:	791b      	ldrb	r3, [r3, #4]
    7714:	2bff      	cmp	r3, #255	; 0xff
    7716:	d007      	beq.n	7728 <cdcdf_acm_disable+0xc4>
		usb_d_ep_deinit(func_data->func_ep_out);
    7718:	69bb      	ldr	r3, [r7, #24]
    771a:	791b      	ldrb	r3, [r3, #4]
    771c:	0018      	movs	r0, r3
    771e:	4b06      	ldr	r3, [pc, #24]	; (7738 <cdcdf_acm_disable+0xd4>)
    7720:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    7722:	69bb      	ldr	r3, [r7, #24]
    7724:	22ff      	movs	r2, #255	; 0xff
    7726:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    7728:	4b04      	ldr	r3, [pc, #16]	; (773c <cdcdf_acm_disable+0xd8>)
    772a:	2200      	movs	r2, #0
    772c:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    772e:	2300      	movs	r3, #0
}
    7730:	0018      	movs	r0, r3
    7732:	46bd      	mov	sp, r7
    7734:	b008      	add	sp, #32
    7736:	bd80      	pop	{r7, pc}
    7738:	00002721 	.word	0x00002721
    773c:	200011e8 	.word	0x200011e8

00007740 <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    7740:	b580      	push	{r7, lr}
    7742:	b084      	sub	sp, #16
    7744:	af00      	add	r7, sp, #0
    7746:	60f8      	str	r0, [r7, #12]
    7748:	607a      	str	r2, [r7, #4]
    774a:	230b      	movs	r3, #11
    774c:	18fb      	adds	r3, r7, r3
    774e:	1c0a      	adds	r2, r1, #0
    7750:	701a      	strb	r2, [r3, #0]
	switch (ctrl) {
    7752:	230b      	movs	r3, #11
    7754:	18fb      	adds	r3, r7, r3
    7756:	781b      	ldrb	r3, [r3, #0]
    7758:	2b01      	cmp	r3, #1
    775a:	d00b      	beq.n	7774 <cdcdf_acm_ctrl+0x34>
    775c:	2b02      	cmp	r3, #2
    775e:	d011      	beq.n	7784 <cdcdf_acm_ctrl+0x44>
    7760:	2b00      	cmp	r3, #0
    7762:	d112      	bne.n	778a <cdcdf_acm_ctrl+0x4a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    7764:	687a      	ldr	r2, [r7, #4]
    7766:	68fb      	ldr	r3, [r7, #12]
    7768:	0011      	movs	r1, r2
    776a:	0018      	movs	r0, r3
    776c:	4b0a      	ldr	r3, [pc, #40]	; (7798 <cdcdf_acm_ctrl+0x58>)
    776e:	4798      	blx	r3
    7770:	0003      	movs	r3, r0
    7772:	e00c      	b.n	778e <cdcdf_acm_ctrl+0x4e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    7774:	687a      	ldr	r2, [r7, #4]
    7776:	68fb      	ldr	r3, [r7, #12]
    7778:	0011      	movs	r1, r2
    777a:	0018      	movs	r0, r3
    777c:	4b07      	ldr	r3, [pc, #28]	; (779c <cdcdf_acm_ctrl+0x5c>)
    777e:	4798      	blx	r3
    7780:	0003      	movs	r3, r0
    7782:	e004      	b.n	778e <cdcdf_acm_ctrl+0x4e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    7784:	231b      	movs	r3, #27
    7786:	425b      	negs	r3, r3
    7788:	e001      	b.n	778e <cdcdf_acm_ctrl+0x4e>

	default:
		return ERR_INVALID_ARG;
    778a:	230d      	movs	r3, #13
    778c:	425b      	negs	r3, r3
	}
}
    778e:	0018      	movs	r0, r3
    7790:	46bd      	mov	sp, r7
    7792:	b004      	add	sp, #16
    7794:	bd80      	pop	{r7, pc}
    7796:	46c0      	nop			; (mov r8, r8)
    7798:	0000749d 	.word	0x0000749d
    779c:	00007665 	.word	0x00007665

000077a0 <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    77a0:	b590      	push	{r4, r7, lr}
    77a2:	b087      	sub	sp, #28
    77a4:	af00      	add	r7, sp, #0
    77a6:	6039      	str	r1, [r7, #0]
    77a8:	0011      	movs	r1, r2
    77aa:	1dfb      	adds	r3, r7, #7
    77ac:	1c02      	adds	r2, r0, #0
    77ae:	701a      	strb	r2, [r3, #0]
    77b0:	1dbb      	adds	r3, r7, #6
    77b2:	1c0a      	adds	r2, r1, #0
    77b4:	701a      	strb	r2, [r3, #0]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    77b6:	2316      	movs	r3, #22
    77b8:	18fa      	adds	r2, r7, r3
    77ba:	683b      	ldr	r3, [r7, #0]
    77bc:	7999      	ldrb	r1, [r3, #6]
    77be:	79db      	ldrb	r3, [r3, #7]
    77c0:	021b      	lsls	r3, r3, #8
    77c2:	430b      	orrs	r3, r1
    77c4:	8013      	strh	r3, [r2, #0]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    77c6:	4b2f      	ldr	r3, [pc, #188]	; (7884 <cdcdf_acm_set_req+0xe4>)
    77c8:	4798      	blx	r3
    77ca:	0003      	movs	r3, r0
    77cc:	613b      	str	r3, [r7, #16]

	switch (req->bRequest) {
    77ce:	683b      	ldr	r3, [r7, #0]
    77d0:	785b      	ldrb	r3, [r3, #1]
    77d2:	2b20      	cmp	r3, #32
    77d4:	d002      	beq.n	77dc <cdcdf_acm_set_req+0x3c>
    77d6:	2b22      	cmp	r3, #34	; 0x22
    77d8:	d037      	beq.n	784a <cdcdf_acm_set_req+0xaa>
    77da:	e04c      	b.n	7876 <cdcdf_acm_set_req+0xd6>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    77dc:	2316      	movs	r3, #22
    77de:	18fb      	adds	r3, r7, r3
    77e0:	881b      	ldrh	r3, [r3, #0]
    77e2:	2b07      	cmp	r3, #7
    77e4:	d002      	beq.n	77ec <cdcdf_acm_set_req+0x4c>
			return ERR_INVALID_DATA;
    77e6:	2301      	movs	r3, #1
    77e8:	425b      	negs	r3, r3
    77ea:	e046      	b.n	787a <cdcdf_acm_set_req+0xda>
		}
		if (USB_SETUP_STAGE == stage) {
    77ec:	1dbb      	adds	r3, r7, #6
    77ee:	781b      	ldrb	r3, [r3, #0]
    77f0:	2b00      	cmp	r3, #0
    77f2:	d10a      	bne.n	780a <cdcdf_acm_set_req+0x6a>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    77f4:	2316      	movs	r3, #22
    77f6:	18fb      	adds	r3, r7, r3
    77f8:	881a      	ldrh	r2, [r3, #0]
    77fa:	6939      	ldr	r1, [r7, #16]
    77fc:	1dfb      	adds	r3, r7, #7
    77fe:	7818      	ldrb	r0, [r3, #0]
    7800:	2300      	movs	r3, #0
    7802:	4c21      	ldr	r4, [pc, #132]	; (7888 <cdcdf_acm_set_req+0xe8>)
    7804:	47a0      	blx	r4
    7806:	0003      	movs	r3, r0
    7808:	e037      	b.n	787a <cdcdf_acm_set_req+0xda>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    780a:	2308      	movs	r3, #8
    780c:	18fa      	adds	r2, r7, r3
    780e:	693b      	ldr	r3, [r7, #16]
    7810:	0010      	movs	r0, r2
    7812:	0019      	movs	r1, r3
    7814:	2307      	movs	r3, #7
    7816:	001a      	movs	r2, r3
    7818:	4b1c      	ldr	r3, [pc, #112]	; (788c <cdcdf_acm_set_req+0xec>)
    781a:	4798      	blx	r3
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    781c:	4b1c      	ldr	r3, [pc, #112]	; (7890 <cdcdf_acm_set_req+0xf0>)
    781e:	681b      	ldr	r3, [r3, #0]
    7820:	2b00      	cmp	r3, #0
    7822:	d007      	beq.n	7834 <cdcdf_acm_set_req+0x94>
    7824:	4b1a      	ldr	r3, [pc, #104]	; (7890 <cdcdf_acm_set_req+0xf0>)
    7826:	681b      	ldr	r3, [r3, #0]
    7828:	2208      	movs	r2, #8
    782a:	18ba      	adds	r2, r7, r2
    782c:	0010      	movs	r0, r2
    782e:	4798      	blx	r3
    7830:	1e03      	subs	r3, r0, #0
    7832:	d008      	beq.n	7846 <cdcdf_acm_set_req+0xa6>
				usbd_cdc_line_coding = line_coding_tmp;
    7834:	4b17      	ldr	r3, [pc, #92]	; (7894 <cdcdf_acm_set_req+0xf4>)
    7836:	2208      	movs	r2, #8
    7838:	18ba      	adds	r2, r7, r2
    783a:	6811      	ldr	r1, [r2, #0]
    783c:	6019      	str	r1, [r3, #0]
    783e:	8891      	ldrh	r1, [r2, #4]
    7840:	8099      	strh	r1, [r3, #4]
    7842:	7992      	ldrb	r2, [r2, #6]
    7844:	719a      	strb	r2, [r3, #6]
			}
			return ERR_NONE;
    7846:	2300      	movs	r3, #0
    7848:	e017      	b.n	787a <cdcdf_acm_set_req+0xda>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    784a:	2300      	movs	r3, #0
    784c:	2200      	movs	r2, #0
    784e:	2100      	movs	r1, #0
    7850:	2000      	movs	r0, #0
    7852:	4c0d      	ldr	r4, [pc, #52]	; (7888 <cdcdf_acm_set_req+0xe8>)
    7854:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    7856:	4b10      	ldr	r3, [pc, #64]	; (7898 <cdcdf_acm_set_req+0xf8>)
    7858:	681b      	ldr	r3, [r3, #0]
    785a:	2b00      	cmp	r3, #0
    785c:	d009      	beq.n	7872 <cdcdf_acm_set_req+0xd2>
			cdcdf_acm_notify_state(req->wValue);
    785e:	4b0e      	ldr	r3, [pc, #56]	; (7898 <cdcdf_acm_set_req+0xf8>)
    7860:	681a      	ldr	r2, [r3, #0]
    7862:	683b      	ldr	r3, [r7, #0]
    7864:	7899      	ldrb	r1, [r3, #2]
    7866:	78db      	ldrb	r3, [r3, #3]
    7868:	021b      	lsls	r3, r3, #8
    786a:	430b      	orrs	r3, r1
    786c:	b29b      	uxth	r3, r3
    786e:	0018      	movs	r0, r3
    7870:	4790      	blx	r2
		}
		return ERR_NONE;
    7872:	2300      	movs	r3, #0
    7874:	e001      	b.n	787a <cdcdf_acm_set_req+0xda>
	default:
		return ERR_INVALID_ARG;
    7876:	230d      	movs	r3, #13
    7878:	425b      	negs	r3, r3
	}
}
    787a:	0018      	movs	r0, r3
    787c:	46bd      	mov	sp, r7
    787e:	b007      	add	sp, #28
    7880:	bd90      	pop	{r4, r7, pc}
    7882:	46c0      	nop			; (mov r8, r8)
    7884:	000088d5 	.word	0x000088d5
    7888:	0000870d 	.word	0x0000870d
    788c:	0000d195 	.word	0x0000d195
    7890:	200011fc 	.word	0x200011fc
    7894:	200011f0 	.word	0x200011f0
    7898:	200011f8 	.word	0x200011f8

0000789c <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    789c:	b590      	push	{r4, r7, lr}
    789e:	b085      	sub	sp, #20
    78a0:	af00      	add	r7, sp, #0
    78a2:	6039      	str	r1, [r7, #0]
    78a4:	0011      	movs	r1, r2
    78a6:	1dfb      	adds	r3, r7, #7
    78a8:	1c02      	adds	r2, r0, #0
    78aa:	701a      	strb	r2, [r3, #0]
    78ac:	1dbb      	adds	r3, r7, #6
    78ae:	1c0a      	adds	r2, r1, #0
    78b0:	701a      	strb	r2, [r3, #0]
	uint16_t len = req->wLength;
    78b2:	230e      	movs	r3, #14
    78b4:	18fa      	adds	r2, r7, r3
    78b6:	683b      	ldr	r3, [r7, #0]
    78b8:	7999      	ldrb	r1, [r3, #6]
    78ba:	79db      	ldrb	r3, [r3, #7]
    78bc:	021b      	lsls	r3, r3, #8
    78be:	430b      	orrs	r3, r1
    78c0:	8013      	strh	r3, [r2, #0]

	if (USB_DATA_STAGE == stage) {
    78c2:	1dbb      	adds	r3, r7, #6
    78c4:	781b      	ldrb	r3, [r3, #0]
    78c6:	2b01      	cmp	r3, #1
    78c8:	d101      	bne.n	78ce <cdcdf_acm_get_req+0x32>
		return ERR_NONE;
    78ca:	2300      	movs	r3, #0
    78cc:	e018      	b.n	7900 <cdcdf_acm_get_req+0x64>
	}

	switch (req->bRequest) {
    78ce:	683b      	ldr	r3, [r7, #0]
    78d0:	785b      	ldrb	r3, [r3, #1]
    78d2:	2b21      	cmp	r3, #33	; 0x21
    78d4:	d112      	bne.n	78fc <cdcdf_acm_get_req+0x60>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    78d6:	230e      	movs	r3, #14
    78d8:	18fb      	adds	r3, r7, r3
    78da:	881b      	ldrh	r3, [r3, #0]
    78dc:	2b07      	cmp	r3, #7
    78de:	d002      	beq.n	78e6 <cdcdf_acm_get_req+0x4a>
			return ERR_INVALID_DATA;
    78e0:	2301      	movs	r3, #1
    78e2:	425b      	negs	r3, r3
    78e4:	e00c      	b.n	7900 <cdcdf_acm_get_req+0x64>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    78e6:	230e      	movs	r3, #14
    78e8:	18fb      	adds	r3, r7, r3
    78ea:	881a      	ldrh	r2, [r3, #0]
    78ec:	4906      	ldr	r1, [pc, #24]	; (7908 <cdcdf_acm_get_req+0x6c>)
    78ee:	1dfb      	adds	r3, r7, #7
    78f0:	7818      	ldrb	r0, [r3, #0]
    78f2:	2300      	movs	r3, #0
    78f4:	4c05      	ldr	r4, [pc, #20]	; (790c <cdcdf_acm_get_req+0x70>)
    78f6:	47a0      	blx	r4
    78f8:	0003      	movs	r3, r0
    78fa:	e001      	b.n	7900 <cdcdf_acm_get_req+0x64>
	default:
		return ERR_INVALID_ARG;
    78fc:	230d      	movs	r3, #13
    78fe:	425b      	negs	r3, r3
	}
}
    7900:	0018      	movs	r0, r3
    7902:	46bd      	mov	sp, r7
    7904:	b005      	add	sp, #20
    7906:	bd90      	pop	{r4, r7, pc}
    7908:	200011f0 	.word	0x200011f0
    790c:	0000870d 	.word	0x0000870d

00007910 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    7910:	b580      	push	{r7, lr}
    7912:	b082      	sub	sp, #8
    7914:	af00      	add	r7, sp, #0
    7916:	6039      	str	r1, [r7, #0]
    7918:	0011      	movs	r1, r2
    791a:	1dfb      	adds	r3, r7, #7
    791c:	1c02      	adds	r2, r0, #0
    791e:	701a      	strb	r2, [r3, #0]
    7920:	1dbb      	adds	r3, r7, #6
    7922:	1c0a      	adds	r2, r1, #0
    7924:	701a      	strb	r2, [r3, #0]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    7926:	683b      	ldr	r3, [r7, #0]
    7928:	781b      	ldrb	r3, [r3, #0]
    792a:	095b      	lsrs	r3, r3, #5
    792c:	b2db      	uxtb	r3, r3
    792e:	001a      	movs	r2, r3
    7930:	2303      	movs	r3, #3
    7932:	4013      	ands	r3, r2
    7934:	2b01      	cmp	r3, #1
    7936:	d002      	beq.n	793e <cdcdf_acm_req+0x2e>
		return ERR_NOT_FOUND;
    7938:	230a      	movs	r3, #10
    793a:	425b      	negs	r3, r3
    793c:	e030      	b.n	79a0 <cdcdf_acm_req+0x90>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    793e:	683b      	ldr	r3, [r7, #0]
    7940:	791a      	ldrb	r2, [r3, #4]
    7942:	795b      	ldrb	r3, [r3, #5]
    7944:	021b      	lsls	r3, r3, #8
    7946:	4313      	orrs	r3, r2
    7948:	b29a      	uxth	r2, r3
    794a:	4b17      	ldr	r3, [pc, #92]	; (79a8 <cdcdf_acm_req+0x98>)
    794c:	781b      	ldrb	r3, [r3, #0]
    794e:	b29b      	uxth	r3, r3
    7950:	429a      	cmp	r2, r3
    7952:	d00a      	beq.n	796a <cdcdf_acm_req+0x5a>
    7954:	683b      	ldr	r3, [r7, #0]
    7956:	791a      	ldrb	r2, [r3, #4]
    7958:	795b      	ldrb	r3, [r3, #5]
    795a:	021b      	lsls	r3, r3, #8
    795c:	4313      	orrs	r3, r2
    795e:	b29a      	uxth	r2, r3
    7960:	4b11      	ldr	r3, [pc, #68]	; (79a8 <cdcdf_acm_req+0x98>)
    7962:	785b      	ldrb	r3, [r3, #1]
    7964:	b29b      	uxth	r3, r3
    7966:	429a      	cmp	r2, r3
    7968:	d118      	bne.n	799c <cdcdf_acm_req+0x8c>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    796a:	683b      	ldr	r3, [r7, #0]
    796c:	781b      	ldrb	r3, [r3, #0]
    796e:	b25b      	sxtb	r3, r3
    7970:	2b00      	cmp	r3, #0
    7972:	da09      	bge.n	7988 <cdcdf_acm_req+0x78>
			return cdcdf_acm_get_req(ep, req, stage);
    7974:	1dbb      	adds	r3, r7, #6
    7976:	781a      	ldrb	r2, [r3, #0]
    7978:	6839      	ldr	r1, [r7, #0]
    797a:	1dfb      	adds	r3, r7, #7
    797c:	781b      	ldrb	r3, [r3, #0]
    797e:	0018      	movs	r0, r3
    7980:	4b0a      	ldr	r3, [pc, #40]	; (79ac <cdcdf_acm_req+0x9c>)
    7982:	4798      	blx	r3
    7984:	0003      	movs	r3, r0
    7986:	e00b      	b.n	79a0 <cdcdf_acm_req+0x90>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    7988:	1dbb      	adds	r3, r7, #6
    798a:	781a      	ldrb	r2, [r3, #0]
    798c:	6839      	ldr	r1, [r7, #0]
    798e:	1dfb      	adds	r3, r7, #7
    7990:	781b      	ldrb	r3, [r3, #0]
    7992:	0018      	movs	r0, r3
    7994:	4b06      	ldr	r3, [pc, #24]	; (79b0 <cdcdf_acm_req+0xa0>)
    7996:	4798      	blx	r3
    7998:	0003      	movs	r3, r0
    799a:	e001      	b.n	79a0 <cdcdf_acm_req+0x90>
		}
	} else {
		return ERR_NOT_FOUND;
    799c:	230a      	movs	r3, #10
    799e:	425b      	negs	r3, r3
	}
}
    79a0:	0018      	movs	r0, r3
    79a2:	46bd      	mov	sp, r7
    79a4:	b002      	add	sp, #8
    79a6:	bd80      	pop	{r7, pc}
    79a8:	200011e8 	.word	0x200011e8
    79ac:	0000789d 	.word	0x0000789d
    79b0:	000077a1 	.word	0x000077a1

000079b4 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    79b4:	b580      	push	{r7, lr}
    79b6:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    79b8:	4b0d      	ldr	r3, [pc, #52]	; (79f0 <cdcdf_acm_init+0x3c>)
    79ba:	4798      	blx	r3
    79bc:	0003      	movs	r3, r0
    79be:	2b01      	cmp	r3, #1
    79c0:	d902      	bls.n	79c8 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    79c2:	2311      	movs	r3, #17
    79c4:	425b      	negs	r3, r3
    79c6:	e00f      	b.n	79e8 <cdcdf_acm_init+0x34>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    79c8:	4b0a      	ldr	r3, [pc, #40]	; (79f4 <cdcdf_acm_init+0x40>)
    79ca:	4a0b      	ldr	r2, [pc, #44]	; (79f8 <cdcdf_acm_init+0x44>)
    79cc:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    79ce:	4b09      	ldr	r3, [pc, #36]	; (79f4 <cdcdf_acm_init+0x40>)
    79d0:	4a0a      	ldr	r2, [pc, #40]	; (79fc <cdcdf_acm_init+0x48>)
    79d2:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    79d4:	4b07      	ldr	r3, [pc, #28]	; (79f4 <cdcdf_acm_init+0x40>)
    79d6:	0018      	movs	r0, r3
    79d8:	4b09      	ldr	r3, [pc, #36]	; (7a00 <cdcdf_acm_init+0x4c>)
    79da:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    79dc:	4b09      	ldr	r3, [pc, #36]	; (7a04 <cdcdf_acm_init+0x50>)
    79de:	0019      	movs	r1, r3
    79e0:	2001      	movs	r0, #1
    79e2:	4b09      	ldr	r3, [pc, #36]	; (7a08 <cdcdf_acm_init+0x54>)
    79e4:	4798      	blx	r3
	return ERR_NONE;
    79e6:	2300      	movs	r3, #0
}
    79e8:	0018      	movs	r0, r3
    79ea:	46bd      	mov	sp, r7
    79ec:	bd80      	pop	{r7, pc}
    79ee:	46c0      	nop			; (mov r8, r8)
    79f0:	000088e9 	.word	0x000088e9
    79f4:	200011dc 	.word	0x200011dc
    79f8:	00007741 	.word	0x00007741
    79fc:	200011e8 	.word	0x200011e8
    7a00:	0000884d 	.word	0x0000884d
    7a04:	20000078 	.word	0x20000078
    7a08:	00008769 	.word	0x00008769

00007a0c <usb_get_u16>:
{
    7a0c:	b580      	push	{r7, lr}
    7a0e:	b082      	sub	sp, #8
    7a10:	af00      	add	r7, sp, #0
    7a12:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    7a14:	687b      	ldr	r3, [r7, #4]
    7a16:	781b      	ldrb	r3, [r3, #0]
    7a18:	b29a      	uxth	r2, r3
    7a1a:	687b      	ldr	r3, [r7, #4]
    7a1c:	3301      	adds	r3, #1
    7a1e:	781b      	ldrb	r3, [r3, #0]
    7a20:	b29b      	uxth	r3, r3
    7a22:	021b      	lsls	r3, r3, #8
    7a24:	b29b      	uxth	r3, r3
    7a26:	18d3      	adds	r3, r2, r3
    7a28:	b29b      	uxth	r3, r3
}
    7a2a:	0018      	movs	r0, r3
    7a2c:	46bd      	mov	sp, r7
    7a2e:	b002      	add	sp, #8
    7a30:	bd80      	pop	{r7, pc}

00007a32 <usb_desc_len>:
{
    7a32:	b580      	push	{r7, lr}
    7a34:	b082      	sub	sp, #8
    7a36:	af00      	add	r7, sp, #0
    7a38:	6078      	str	r0, [r7, #4]
	return desc[0];
    7a3a:	687b      	ldr	r3, [r7, #4]
    7a3c:	781b      	ldrb	r3, [r3, #0]
}
    7a3e:	0018      	movs	r0, r3
    7a40:	46bd      	mov	sp, r7
    7a42:	b002      	add	sp, #8
    7a44:	bd80      	pop	{r7, pc}
	...

00007a48 <usb_desc_next>:
{
    7a48:	b580      	push	{r7, lr}
    7a4a:	b082      	sub	sp, #8
    7a4c:	af00      	add	r7, sp, #0
    7a4e:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    7a50:	687b      	ldr	r3, [r7, #4]
    7a52:	0018      	movs	r0, r3
    7a54:	4b04      	ldr	r3, [pc, #16]	; (7a68 <usb_desc_next+0x20>)
    7a56:	4798      	blx	r3
    7a58:	0003      	movs	r3, r0
    7a5a:	001a      	movs	r2, r3
    7a5c:	687b      	ldr	r3, [r7, #4]
    7a5e:	189b      	adds	r3, r3, r2
}
    7a60:	0018      	movs	r0, r3
    7a62:	46bd      	mov	sp, r7
    7a64:	b002      	add	sp, #8
    7a66:	bd80      	pop	{r7, pc}
    7a68:	00007a33 	.word	0x00007a33

00007a6c <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    7a6c:	b580      	push	{r7, lr}
    7a6e:	b082      	sub	sp, #8
    7a70:	af00      	add	r7, sp, #0
    7a72:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    7a74:	687b      	ldr	r3, [r7, #4]
    7a76:	3302      	adds	r3, #2
    7a78:	0018      	movs	r0, r3
    7a7a:	4b03      	ldr	r3, [pc, #12]	; (7a88 <usb_cfg_desc_total_len+0x1c>)
    7a7c:	4798      	blx	r3
    7a7e:	0003      	movs	r3, r0
}
    7a80:	0018      	movs	r0, r3
    7a82:	46bd      	mov	sp, r7
    7a84:	b002      	add	sp, #8
    7a86:	bd80      	pop	{r7, pc}
    7a88:	00007a0d 	.word	0x00007a0d

00007a8c <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    7a8c:	b590      	push	{r4, r7, lr}
    7a8e:	b085      	sub	sp, #20
    7a90:	af00      	add	r7, sp, #0
    7a92:	0002      	movs	r2, r0
    7a94:	6039      	str	r1, [r7, #0]
    7a96:	1dfb      	adds	r3, r7, #7
    7a98:	701a      	strb	r2, [r3, #0]
	uint8_t *dev_desc = NULL;
    7a9a:	2300      	movs	r3, #0
    7a9c:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    7a9e:	230a      	movs	r3, #10
    7aa0:	18fa      	adds	r2, r7, r3
    7aa2:	683b      	ldr	r3, [r7, #0]
    7aa4:	7999      	ldrb	r1, [r3, #6]
    7aa6:	79db      	ldrb	r3, [r3, #7]
    7aa8:	021b      	lsls	r3, r3, #8
    7aaa:	430b      	orrs	r3, r1
    7aac:	8013      	strh	r3, [r2, #0]
	if (length > 0x12) {
    7aae:	230a      	movs	r3, #10
    7ab0:	18fb      	adds	r3, r7, r3
    7ab2:	881b      	ldrh	r3, [r3, #0]
    7ab4:	2b12      	cmp	r3, #18
    7ab6:	d903      	bls.n	7ac0 <usbdc_get_dev_desc+0x34>
		length = 0x12;
    7ab8:	230a      	movs	r3, #10
    7aba:	18fb      	adds	r3, r7, r3
    7abc:	2212      	movs	r2, #18
    7abe:	801a      	strh	r2, [r3, #0]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    7ac0:	68fb      	ldr	r3, [r7, #12]
    7ac2:	2b00      	cmp	r3, #0
    7ac4:	d10b      	bne.n	7ade <usbdc_get_dev_desc+0x52>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    7ac6:	4b11      	ldr	r3, [pc, #68]	; (7b0c <usbdc_get_dev_desc+0x80>)
    7ac8:	681b      	ldr	r3, [r3, #0]
    7aca:	6818      	ldr	r0, [r3, #0]
    7acc:	4b0f      	ldr	r3, [pc, #60]	; (7b0c <usbdc_get_dev_desc+0x80>)
    7ace:	681b      	ldr	r3, [r3, #0]
    7ad0:	685b      	ldr	r3, [r3, #4]
    7ad2:	2201      	movs	r2, #1
    7ad4:	0019      	movs	r1, r3
    7ad6:	4b0e      	ldr	r3, [pc, #56]	; (7b10 <usbdc_get_dev_desc+0x84>)
    7ad8:	4798      	blx	r3
    7ada:	0003      	movs	r3, r0
    7adc:	60fb      	str	r3, [r7, #12]
	}
	if (!dev_desc) {
    7ade:	68fb      	ldr	r3, [r7, #12]
    7ae0:	2b00      	cmp	r3, #0
    7ae2:	d101      	bne.n	7ae8 <usbdc_get_dev_desc+0x5c>
		return false;
    7ae4:	2300      	movs	r3, #0
    7ae6:	e00d      	b.n	7b04 <usbdc_get_dev_desc+0x78>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    7ae8:	230a      	movs	r3, #10
    7aea:	18fb      	adds	r3, r7, r3
    7aec:	881a      	ldrh	r2, [r3, #0]
    7aee:	68f9      	ldr	r1, [r7, #12]
    7af0:	1dfb      	adds	r3, r7, #7
    7af2:	7818      	ldrb	r0, [r3, #0]
    7af4:	2300      	movs	r3, #0
    7af6:	4c07      	ldr	r4, [pc, #28]	; (7b14 <usbdc_get_dev_desc+0x88>)
    7af8:	47a0      	blx	r4
    7afa:	1e03      	subs	r3, r0, #0
    7afc:	d001      	beq.n	7b02 <usbdc_get_dev_desc+0x76>
		return false;
    7afe:	2300      	movs	r3, #0
    7b00:	e000      	b.n	7b04 <usbdc_get_dev_desc+0x78>
	}
	return true;
    7b02:	2301      	movs	r3, #1
}
    7b04:	0018      	movs	r0, r3
    7b06:	46bd      	mov	sp, r7
    7b08:	b005      	add	sp, #20
    7b0a:	bd90      	pop	{r4, r7, pc}
    7b0c:	20001200 	.word	0x20001200
    7b10:	000089c5 	.word	0x000089c5
    7b14:	0000870d 	.word	0x0000870d

00007b18 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    7b18:	b590      	push	{r4, r7, lr}
    7b1a:	b087      	sub	sp, #28
    7b1c:	af00      	add	r7, sp, #0
    7b1e:	0002      	movs	r2, r0
    7b20:	6039      	str	r1, [r7, #0]
    7b22:	1dfb      	adds	r3, r7, #7
    7b24:	701a      	strb	r2, [r3, #0]
	uint8_t *cfg_desc = NULL;
    7b26:	2300      	movs	r3, #0
    7b28:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    7b2a:	2312      	movs	r3, #18
    7b2c:	18fa      	adds	r2, r7, r3
    7b2e:	683b      	ldr	r3, [r7, #0]
    7b30:	7999      	ldrb	r1, [r3, #6]
    7b32:	79db      	ldrb	r3, [r3, #7]
    7b34:	021b      	lsls	r3, r3, #8
    7b36:	430b      	orrs	r3, r1
    7b38:	8013      	strh	r3, [r2, #0]
	uint8_t  index    = req->wValue & 0x00FF;
    7b3a:	683b      	ldr	r3, [r7, #0]
    7b3c:	789a      	ldrb	r2, [r3, #2]
    7b3e:	78db      	ldrb	r3, [r3, #3]
    7b40:	021b      	lsls	r3, r3, #8
    7b42:	4313      	orrs	r3, r2
    7b44:	b29a      	uxth	r2, r3
    7b46:	2310      	movs	r3, #16
    7b48:	18fb      	adds	r3, r7, r3
    7b4a:	701a      	strb	r2, [r3, #0]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    7b4c:	2312      	movs	r3, #18
    7b4e:	18fb      	adds	r3, r7, r3
    7b50:	881b      	ldrh	r3, [r3, #0]
    7b52:	4a28      	ldr	r2, [pc, #160]	; (7bf4 <usbdc_get_cfg_desc+0xdc>)
    7b54:	7f12      	ldrb	r2, [r2, #28]
    7b56:	3a01      	subs	r2, #1
    7b58:	401a      	ands	r2, r3
    7b5a:	2311      	movs	r3, #17
    7b5c:	18fb      	adds	r3, r7, r3
    7b5e:	4251      	negs	r1, r2
    7b60:	414a      	adcs	r2, r1
    7b62:	701a      	strb	r2, [r3, #0]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    7b64:	697b      	ldr	r3, [r7, #20]
    7b66:	2b00      	cmp	r3, #0
    7b68:	d10f      	bne.n	7b8a <usbdc_get_cfg_desc+0x72>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    7b6a:	4b22      	ldr	r3, [pc, #136]	; (7bf4 <usbdc_get_cfg_desc+0xdc>)
    7b6c:	681b      	ldr	r3, [r3, #0]
    7b6e:	6818      	ldr	r0, [r3, #0]
    7b70:	4b20      	ldr	r3, [pc, #128]	; (7bf4 <usbdc_get_cfg_desc+0xdc>)
    7b72:	681b      	ldr	r3, [r3, #0]
    7b74:	6859      	ldr	r1, [r3, #4]
    7b76:	2310      	movs	r3, #16
    7b78:	18fb      	adds	r3, r7, r3
    7b7a:	781b      	ldrb	r3, [r3, #0]
    7b7c:	3301      	adds	r3, #1
    7b7e:	b2db      	uxtb	r3, r3
    7b80:	001a      	movs	r2, r3
    7b82:	4b1d      	ldr	r3, [pc, #116]	; (7bf8 <usbdc_get_cfg_desc+0xe0>)
    7b84:	4798      	blx	r3
    7b86:	0003      	movs	r3, r0
    7b88:	617b      	str	r3, [r7, #20]
	}
	if (NULL == cfg_desc) {
    7b8a:	697b      	ldr	r3, [r7, #20]
    7b8c:	2b00      	cmp	r3, #0
    7b8e:	d101      	bne.n	7b94 <usbdc_get_cfg_desc+0x7c>
		return false;
    7b90:	2300      	movs	r3, #0
    7b92:	e02b      	b.n	7bec <usbdc_get_cfg_desc+0xd4>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    7b94:	230e      	movs	r3, #14
    7b96:	18fc      	adds	r4, r7, r3
    7b98:	697b      	ldr	r3, [r7, #20]
    7b9a:	0018      	movs	r0, r3
    7b9c:	4b17      	ldr	r3, [pc, #92]	; (7bfc <usbdc_get_cfg_desc+0xe4>)
    7b9e:	4798      	blx	r3
    7ba0:	0003      	movs	r3, r0
    7ba2:	8023      	strh	r3, [r4, #0]
	if (length <= total_len) {
    7ba4:	2312      	movs	r3, #18
    7ba6:	18fa      	adds	r2, r7, r3
    7ba8:	230e      	movs	r3, #14
    7baa:	18fb      	adds	r3, r7, r3
    7bac:	8812      	ldrh	r2, [r2, #0]
    7bae:	881b      	ldrh	r3, [r3, #0]
    7bb0:	429a      	cmp	r2, r3
    7bb2:	d804      	bhi.n	7bbe <usbdc_get_cfg_desc+0xa6>
		need_zlp = false;
    7bb4:	2311      	movs	r3, #17
    7bb6:	18fb      	adds	r3, r7, r3
    7bb8:	2200      	movs	r2, #0
    7bba:	701a      	strb	r2, [r3, #0]
    7bbc:	e005      	b.n	7bca <usbdc_get_cfg_desc+0xb2>
	} else {
		length = total_len;
    7bbe:	2312      	movs	r3, #18
    7bc0:	18fb      	adds	r3, r7, r3
    7bc2:	220e      	movs	r2, #14
    7bc4:	18ba      	adds	r2, r7, r2
    7bc6:	8812      	ldrh	r2, [r2, #0]
    7bc8:	801a      	strh	r2, [r3, #0]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    7bca:	2312      	movs	r3, #18
    7bcc:	18fb      	adds	r3, r7, r3
    7bce:	881a      	ldrh	r2, [r3, #0]
    7bd0:	2311      	movs	r3, #17
    7bd2:	18fb      	adds	r3, r7, r3
    7bd4:	781c      	ldrb	r4, [r3, #0]
    7bd6:	6979      	ldr	r1, [r7, #20]
    7bd8:	1dfb      	adds	r3, r7, #7
    7bda:	7818      	ldrb	r0, [r3, #0]
    7bdc:	0023      	movs	r3, r4
    7bde:	4c08      	ldr	r4, [pc, #32]	; (7c00 <usbdc_get_cfg_desc+0xe8>)
    7be0:	47a0      	blx	r4
    7be2:	1e03      	subs	r3, r0, #0
    7be4:	d001      	beq.n	7bea <usbdc_get_cfg_desc+0xd2>
		return false;
    7be6:	2300      	movs	r3, #0
    7be8:	e000      	b.n	7bec <usbdc_get_cfg_desc+0xd4>
	}
	return true;
    7bea:	2301      	movs	r3, #1
}
    7bec:	0018      	movs	r0, r3
    7bee:	46bd      	mov	sp, r7
    7bf0:	b007      	add	sp, #28
    7bf2:	bd90      	pop	{r4, r7, pc}
    7bf4:	20001200 	.word	0x20001200
    7bf8:	00008a95 	.word	0x00008a95
    7bfc:	00007a6d 	.word	0x00007a6d
    7c00:	0000870d 	.word	0x0000870d

00007c04 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    7c04:	b590      	push	{r4, r7, lr}
    7c06:	b085      	sub	sp, #20
    7c08:	af00      	add	r7, sp, #0
    7c0a:	0002      	movs	r2, r0
    7c0c:	6039      	str	r1, [r7, #0]
    7c0e:	1dfb      	adds	r3, r7, #7
    7c10:	701a      	strb	r2, [r3, #0]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    7c12:	230e      	movs	r3, #14
    7c14:	18fa      	adds	r2, r7, r3
    7c16:	683b      	ldr	r3, [r7, #0]
    7c18:	7999      	ldrb	r1, [r3, #6]
    7c1a:	79db      	ldrb	r3, [r3, #7]
    7c1c:	021b      	lsls	r3, r3, #8
    7c1e:	430b      	orrs	r3, r1
    7c20:	8013      	strh	r3, [r2, #0]
	uint8_t  index    = req->wValue & 0x00FF;
    7c22:	683b      	ldr	r3, [r7, #0]
    7c24:	789a      	ldrb	r2, [r3, #2]
    7c26:	78db      	ldrb	r3, [r3, #3]
    7c28:	021b      	lsls	r3, r3, #8
    7c2a:	4313      	orrs	r3, r2
    7c2c:	b29a      	uxth	r2, r3
    7c2e:	230c      	movs	r3, #12
    7c30:	18fb      	adds	r3, r7, r3
    7c32:	701a      	strb	r2, [r3, #0]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    7c34:	230e      	movs	r3, #14
    7c36:	18fb      	adds	r3, r7, r3
    7c38:	881b      	ldrh	r3, [r3, #0]
    7c3a:	4a21      	ldr	r2, [pc, #132]	; (7cc0 <usbdc_get_str_desc+0xbc>)
    7c3c:	7f12      	ldrb	r2, [r2, #28]
    7c3e:	3a01      	subs	r2, #1
    7c40:	401a      	ands	r2, r3
    7c42:	230d      	movs	r3, #13
    7c44:	18fb      	adds	r3, r7, r3
    7c46:	4251      	negs	r1, r2
    7c48:	414a      	adcs	r2, r1
    7c4a:	701a      	strb	r2, [r3, #0]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    7c4c:	4b1c      	ldr	r3, [pc, #112]	; (7cc0 <usbdc_get_str_desc+0xbc>)
    7c4e:	681b      	ldr	r3, [r3, #0]
    7c50:	6818      	ldr	r0, [r3, #0]
    7c52:	4b1b      	ldr	r3, [pc, #108]	; (7cc0 <usbdc_get_str_desc+0xbc>)
    7c54:	681b      	ldr	r3, [r3, #0]
    7c56:	6859      	ldr	r1, [r3, #4]
    7c58:	230c      	movs	r3, #12
    7c5a:	18fb      	adds	r3, r7, r3
    7c5c:	781b      	ldrb	r3, [r3, #0]
    7c5e:	001a      	movs	r2, r3
    7c60:	4b18      	ldr	r3, [pc, #96]	; (7cc4 <usbdc_get_str_desc+0xc0>)
    7c62:	4798      	blx	r3
    7c64:	0003      	movs	r3, r0
    7c66:	60bb      	str	r3, [r7, #8]
	if (NULL == str_desc) {
    7c68:	68bb      	ldr	r3, [r7, #8]
    7c6a:	2b00      	cmp	r3, #0
    7c6c:	d101      	bne.n	7c72 <usbdc_get_str_desc+0x6e>
		return false;
    7c6e:	2300      	movs	r3, #0
    7c70:	e022      	b.n	7cb8 <usbdc_get_str_desc+0xb4>
	}
	if (length <= str_desc[0]) {
    7c72:	68bb      	ldr	r3, [r7, #8]
    7c74:	781b      	ldrb	r3, [r3, #0]
    7c76:	b29b      	uxth	r3, r3
    7c78:	220e      	movs	r2, #14
    7c7a:	18ba      	adds	r2, r7, r2
    7c7c:	8812      	ldrh	r2, [r2, #0]
    7c7e:	429a      	cmp	r2, r3
    7c80:	d804      	bhi.n	7c8c <usbdc_get_str_desc+0x88>
		need_zlp = false;
    7c82:	230d      	movs	r3, #13
    7c84:	18fb      	adds	r3, r7, r3
    7c86:	2200      	movs	r2, #0
    7c88:	701a      	strb	r2, [r3, #0]
    7c8a:	e004      	b.n	7c96 <usbdc_get_str_desc+0x92>
	} else {
		length = str_desc[0];
    7c8c:	68bb      	ldr	r3, [r7, #8]
    7c8e:	781a      	ldrb	r2, [r3, #0]
    7c90:	230e      	movs	r3, #14
    7c92:	18fb      	adds	r3, r7, r3
    7c94:	801a      	strh	r2, [r3, #0]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    7c96:	230e      	movs	r3, #14
    7c98:	18fb      	adds	r3, r7, r3
    7c9a:	881a      	ldrh	r2, [r3, #0]
    7c9c:	230d      	movs	r3, #13
    7c9e:	18fb      	adds	r3, r7, r3
    7ca0:	781c      	ldrb	r4, [r3, #0]
    7ca2:	68b9      	ldr	r1, [r7, #8]
    7ca4:	1dfb      	adds	r3, r7, #7
    7ca6:	7818      	ldrb	r0, [r3, #0]
    7ca8:	0023      	movs	r3, r4
    7caa:	4c07      	ldr	r4, [pc, #28]	; (7cc8 <usbdc_get_str_desc+0xc4>)
    7cac:	47a0      	blx	r4
    7cae:	1e03      	subs	r3, r0, #0
    7cb0:	d001      	beq.n	7cb6 <usbdc_get_str_desc+0xb2>
		return false;
    7cb2:	2300      	movs	r3, #0
    7cb4:	e000      	b.n	7cb8 <usbdc_get_str_desc+0xb4>
	}
	return true;
    7cb6:	2301      	movs	r3, #1
}
    7cb8:	0018      	movs	r0, r3
    7cba:	46bd      	mov	sp, r7
    7cbc:	b005      	add	sp, #20
    7cbe:	bd90      	pop	{r4, r7, pc}
    7cc0:	20001200 	.word	0x20001200
    7cc4:	00008b19 	.word	0x00008b19
    7cc8:	0000870d 	.word	0x0000870d

00007ccc <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    7ccc:	b580      	push	{r7, lr}
    7cce:	b084      	sub	sp, #16
    7cd0:	af00      	add	r7, sp, #0
    7cd2:	0002      	movs	r2, r0
    7cd4:	6039      	str	r1, [r7, #0]
    7cd6:	1dfb      	adds	r3, r7, #7
    7cd8:	701a      	strb	r2, [r3, #0]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    7cda:	683b      	ldr	r3, [r7, #0]
    7cdc:	789a      	ldrb	r2, [r3, #2]
    7cde:	78db      	ldrb	r3, [r3, #3]
    7ce0:	021b      	lsls	r3, r3, #8
    7ce2:	4313      	orrs	r3, r2
    7ce4:	b29b      	uxth	r3, r3
    7ce6:	0a1b      	lsrs	r3, r3, #8
    7ce8:	b29a      	uxth	r2, r3
    7cea:	230f      	movs	r3, #15
    7cec:	18fb      	adds	r3, r7, r3
    7cee:	701a      	strb	r2, [r3, #0]
	switch (type) {
    7cf0:	230f      	movs	r3, #15
    7cf2:	18fb      	adds	r3, r7, r3
    7cf4:	781b      	ldrb	r3, [r3, #0]
    7cf6:	2b02      	cmp	r3, #2
    7cf8:	d00f      	beq.n	7d1a <usbdc_get_desc_req+0x4e>
    7cfa:	2b03      	cmp	r3, #3
    7cfc:	d016      	beq.n	7d2c <usbdc_get_desc_req+0x60>
    7cfe:	2b01      	cmp	r3, #1
    7d00:	d002      	beq.n	7d08 <usbdc_get_desc_req+0x3c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    7d02:	46c0      	nop			; (mov r8, r8)
	}
	return false;
    7d04:	2300      	movs	r3, #0
    7d06:	e019      	b.n	7d3c <usbdc_get_desc_req+0x70>
		return usbdc_get_dev_desc(ep, req);
    7d08:	683a      	ldr	r2, [r7, #0]
    7d0a:	1dfb      	adds	r3, r7, #7
    7d0c:	781b      	ldrb	r3, [r3, #0]
    7d0e:	0011      	movs	r1, r2
    7d10:	0018      	movs	r0, r3
    7d12:	4b0c      	ldr	r3, [pc, #48]	; (7d44 <usbdc_get_desc_req+0x78>)
    7d14:	4798      	blx	r3
    7d16:	0003      	movs	r3, r0
    7d18:	e010      	b.n	7d3c <usbdc_get_desc_req+0x70>
		return usbdc_get_cfg_desc(ep, req);
    7d1a:	683a      	ldr	r2, [r7, #0]
    7d1c:	1dfb      	adds	r3, r7, #7
    7d1e:	781b      	ldrb	r3, [r3, #0]
    7d20:	0011      	movs	r1, r2
    7d22:	0018      	movs	r0, r3
    7d24:	4b08      	ldr	r3, [pc, #32]	; (7d48 <usbdc_get_desc_req+0x7c>)
    7d26:	4798      	blx	r3
    7d28:	0003      	movs	r3, r0
    7d2a:	e007      	b.n	7d3c <usbdc_get_desc_req+0x70>
		return usbdc_get_str_desc(ep, req);
    7d2c:	683a      	ldr	r2, [r7, #0]
    7d2e:	1dfb      	adds	r3, r7, #7
    7d30:	781b      	ldrb	r3, [r3, #0]
    7d32:	0011      	movs	r1, r2
    7d34:	0018      	movs	r0, r3
    7d36:	4b05      	ldr	r3, [pc, #20]	; (7d4c <usbdc_get_desc_req+0x80>)
    7d38:	4798      	blx	r3
    7d3a:	0003      	movs	r3, r0
}
    7d3c:	0018      	movs	r0, r3
    7d3e:	46bd      	mov	sp, r7
    7d40:	b004      	add	sp, #16
    7d42:	bd80      	pop	{r7, pc}
    7d44:	00007a8d 	.word	0x00007a8d
    7d48:	00007b19 	.word	0x00007b19
    7d4c:	00007c05 	.word	0x00007c05

00007d50 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    7d50:	b590      	push	{r4, r7, lr}
    7d52:	b085      	sub	sp, #20
    7d54:	af00      	add	r7, sp, #0
    7d56:	0002      	movs	r2, r0
    7d58:	6039      	str	r1, [r7, #0]
    7d5a:	1dfb      	adds	r3, r7, #7
    7d5c:	701a      	strb	r2, [r3, #0]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    7d5e:	683b      	ldr	r3, [r7, #0]
    7d60:	781b      	ldrb	r3, [r3, #0]
    7d62:	001a      	movs	r2, r3
    7d64:	231f      	movs	r3, #31
    7d66:	4013      	ands	r3, r2
    7d68:	d41e      	bmi.n	7da8 <usbdc_get_status_req+0x58>
    7d6a:	2b01      	cmp	r3, #1
    7d6c:	dd02      	ble.n	7d74 <usbdc_get_status_req+0x24>
    7d6e:	2b02      	cmp	r3, #2
    7d70:	d003      	beq.n	7d7a <usbdc_get_status_req+0x2a>
    7d72:	e019      	b.n	7da8 <usbdc_get_status_req+0x58>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    7d74:	2300      	movs	r3, #0
    7d76:	60fb      	str	r3, [r7, #12]
		break;
    7d78:	e018      	b.n	7dac <usbdc_get_status_req+0x5c>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    7d7a:	683b      	ldr	r3, [r7, #0]
    7d7c:	791a      	ldrb	r2, [r3, #4]
    7d7e:	795b      	ldrb	r3, [r3, #5]
    7d80:	021b      	lsls	r3, r3, #8
    7d82:	4313      	orrs	r3, r2
    7d84:	b29b      	uxth	r3, r3
    7d86:	b2db      	uxtb	r3, r3
    7d88:	2102      	movs	r1, #2
    7d8a:	0018      	movs	r0, r3
    7d8c:	4b12      	ldr	r3, [pc, #72]	; (7dd8 <usbdc_get_status_req+0x88>)
    7d8e:	4798      	blx	r3
    7d90:	0003      	movs	r3, r0
    7d92:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    7d94:	68fb      	ldr	r3, [r7, #12]
    7d96:	2b00      	cmp	r3, #0
    7d98:	da01      	bge.n	7d9e <usbdc_get_status_req+0x4e>
			return false;
    7d9a:	2300      	movs	r3, #0
    7d9c:	e017      	b.n	7dce <usbdc_get_status_req+0x7e>
		}
		st = st & 0x1;
    7d9e:	68fb      	ldr	r3, [r7, #12]
    7da0:	2201      	movs	r2, #1
    7da2:	4013      	ands	r3, r2
    7da4:	60fb      	str	r3, [r7, #12]
		break;
    7da6:	e001      	b.n	7dac <usbdc_get_status_req+0x5c>
	default:
		return false;
    7da8:	2300      	movs	r3, #0
    7daa:	e010      	b.n	7dce <usbdc_get_status_req+0x7e>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    7dac:	4b0b      	ldr	r3, [pc, #44]	; (7ddc <usbdc_get_status_req+0x8c>)
    7dae:	695b      	ldr	r3, [r3, #20]
    7db0:	220c      	movs	r2, #12
    7db2:	18b9      	adds	r1, r7, r2
    7db4:	2202      	movs	r2, #2
    7db6:	0018      	movs	r0, r3
    7db8:	4b09      	ldr	r3, [pc, #36]	; (7de0 <usbdc_get_status_req+0x90>)
    7dba:	4798      	blx	r3
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    7dbc:	4b07      	ldr	r3, [pc, #28]	; (7ddc <usbdc_get_status_req+0x8c>)
    7dbe:	6959      	ldr	r1, [r3, #20]
    7dc0:	1dfb      	adds	r3, r7, #7
    7dc2:	7818      	ldrb	r0, [r3, #0]
    7dc4:	2300      	movs	r3, #0
    7dc6:	2202      	movs	r2, #2
    7dc8:	4c06      	ldr	r4, [pc, #24]	; (7de4 <usbdc_get_status_req+0x94>)
    7dca:	47a0      	blx	r4
	return true;
    7dcc:	2301      	movs	r3, #1
}
    7dce:	0018      	movs	r0, r3
    7dd0:	46bd      	mov	sp, r7
    7dd2:	b005      	add	sp, #20
    7dd4:	bd90      	pop	{r4, r7, pc}
    7dd6:	46c0      	nop			; (mov r8, r8)
    7dd8:	00002a39 	.word	0x00002a39
    7ddc:	20001200 	.word	0x20001200
    7de0:	0000d195 	.word	0x0000d195
    7de4:	0000870d 	.word	0x0000870d

00007de8 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    7de8:	b590      	push	{r4, r7, lr}
    7dea:	b085      	sub	sp, #20
    7dec:	af00      	add	r7, sp, #0
    7dee:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    7df0:	4b21      	ldr	r3, [pc, #132]	; (7e78 <usbdc_get_interface+0x90>)
    7df2:	691b      	ldr	r3, [r3, #16]
    7df4:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    7df6:	4b20      	ldr	r3, [pc, #128]	; (7e78 <usbdc_get_interface+0x90>)
    7df8:	7f5b      	ldrb	r3, [r3, #29]
    7dfa:	0019      	movs	r1, r3
    7dfc:	687b      	ldr	r3, [r7, #4]
    7dfe:	791a      	ldrb	r2, [r3, #4]
    7e00:	795b      	ldrb	r3, [r3, #5]
    7e02:	021b      	lsls	r3, r3, #8
    7e04:	4313      	orrs	r3, r2
    7e06:	b29b      	uxth	r3, r3
    7e08:	4119      	asrs	r1, r3
    7e0a:	000b      	movs	r3, r1
    7e0c:	2201      	movs	r2, #1
    7e0e:	4013      	ands	r3, r2
    7e10:	d129      	bne.n	7e66 <usbdc_get_interface+0x7e>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    7e12:	4b19      	ldr	r3, [pc, #100]	; (7e78 <usbdc_get_interface+0x90>)
    7e14:	695b      	ldr	r3, [r3, #20]
    7e16:	2200      	movs	r2, #0
    7e18:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    7e1a:	4b17      	ldr	r3, [pc, #92]	; (7e78 <usbdc_get_interface+0x90>)
    7e1c:	6959      	ldr	r1, [r3, #20]
    7e1e:	2300      	movs	r3, #0
    7e20:	2201      	movs	r2, #1
    7e22:	2000      	movs	r0, #0
    7e24:	4c15      	ldr	r4, [pc, #84]	; (7e7c <usbdc_get_interface+0x94>)
    7e26:	47a0      	blx	r4
		return true;
    7e28:	2301      	movs	r3, #1
    7e2a:	e020      	b.n	7e6e <usbdc_get_interface+0x86>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    7e2c:	68fb      	ldr	r3, [r7, #12]
    7e2e:	685b      	ldr	r3, [r3, #4]
    7e30:	687a      	ldr	r2, [r7, #4]
    7e32:	68f8      	ldr	r0, [r7, #12]
    7e34:	2102      	movs	r1, #2
    7e36:	4798      	blx	r3
    7e38:	0003      	movs	r3, r0
    7e3a:	60bb      	str	r3, [r7, #8]
    7e3c:	68bb      	ldr	r3, [r7, #8]
    7e3e:	2b00      	cmp	r3, #0
    7e40:	da03      	bge.n	7e4a <usbdc_get_interface+0x62>
			func = func->next;
    7e42:	68fb      	ldr	r3, [r7, #12]
    7e44:	681b      	ldr	r3, [r3, #0]
    7e46:	60fb      	str	r3, [r7, #12]
    7e48:	e00d      	b.n	7e66 <usbdc_get_interface+0x7e>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    7e4a:	4b0b      	ldr	r3, [pc, #44]	; (7e78 <usbdc_get_interface+0x90>)
    7e4c:	695b      	ldr	r3, [r3, #20]
    7e4e:	68ba      	ldr	r2, [r7, #8]
    7e50:	b2d2      	uxtb	r2, r2
    7e52:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    7e54:	4b08      	ldr	r3, [pc, #32]	; (7e78 <usbdc_get_interface+0x90>)
    7e56:	6959      	ldr	r1, [r3, #20]
    7e58:	2300      	movs	r3, #0
    7e5a:	2201      	movs	r2, #1
    7e5c:	2000      	movs	r0, #0
    7e5e:	4c07      	ldr	r4, [pc, #28]	; (7e7c <usbdc_get_interface+0x94>)
    7e60:	47a0      	blx	r4
			return true;
    7e62:	2301      	movs	r3, #1
    7e64:	e003      	b.n	7e6e <usbdc_get_interface+0x86>
	while (NULL != func) {
    7e66:	68fb      	ldr	r3, [r7, #12]
    7e68:	2b00      	cmp	r3, #0
    7e6a:	d1df      	bne.n	7e2c <usbdc_get_interface+0x44>
		}
	}
	return false;
    7e6c:	2300      	movs	r3, #0
}
    7e6e:	0018      	movs	r0, r3
    7e70:	46bd      	mov	sp, r7
    7e72:	b005      	add	sp, #20
    7e74:	bd90      	pop	{r4, r7, pc}
    7e76:	46c0      	nop			; (mov r8, r8)
    7e78:	20001200 	.word	0x20001200
    7e7c:	0000870d 	.word	0x0000870d

00007e80 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    7e80:	b590      	push	{r4, r7, lr}
    7e82:	b083      	sub	sp, #12
    7e84:	af00      	add	r7, sp, #0
    7e86:	0002      	movs	r2, r0
    7e88:	6039      	str	r1, [r7, #0]
    7e8a:	1dfb      	adds	r3, r7, #7
    7e8c:	701a      	strb	r2, [r3, #0]
	switch (req->bRequest) {
    7e8e:	683b      	ldr	r3, [r7, #0]
    7e90:	785b      	ldrb	r3, [r3, #1]
    7e92:	2b06      	cmp	r3, #6
    7e94:	d008      	beq.n	7ea8 <usbdc_get_req+0x28>
    7e96:	dc02      	bgt.n	7e9e <usbdc_get_req+0x1e>
    7e98:	2b00      	cmp	r3, #0
    7e9a:	d01d      	beq.n	7ed8 <usbdc_get_req+0x58>
    7e9c:	e02b      	b.n	7ef6 <usbdc_get_req+0x76>
    7e9e:	2b08      	cmp	r3, #8
    7ea0:	d00b      	beq.n	7eba <usbdc_get_req+0x3a>
    7ea2:	2b0a      	cmp	r3, #10
    7ea4:	d021      	beq.n	7eea <usbdc_get_req+0x6a>
    7ea6:	e026      	b.n	7ef6 <usbdc_get_req+0x76>
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    7ea8:	683a      	ldr	r2, [r7, #0]
    7eaa:	1dfb      	adds	r3, r7, #7
    7eac:	781b      	ldrb	r3, [r3, #0]
    7eae:	0011      	movs	r1, r2
    7eb0:	0018      	movs	r0, r3
    7eb2:	4b13      	ldr	r3, [pc, #76]	; (7f00 <usbdc_get_req+0x80>)
    7eb4:	4798      	blx	r3
    7eb6:	0003      	movs	r3, r0
    7eb8:	e01e      	b.n	7ef8 <usbdc_get_req+0x78>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    7eba:	4b12      	ldr	r3, [pc, #72]	; (7f04 <usbdc_get_req+0x84>)
    7ebc:	695b      	ldr	r3, [r3, #20]
    7ebe:	4a11      	ldr	r2, [pc, #68]	; (7f04 <usbdc_get_req+0x84>)
    7ec0:	7ed2      	ldrb	r2, [r2, #27]
    7ec2:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    7ec4:	4b0f      	ldr	r3, [pc, #60]	; (7f04 <usbdc_get_req+0x84>)
    7ec6:	6959      	ldr	r1, [r3, #20]
    7ec8:	1dfb      	adds	r3, r7, #7
    7eca:	7818      	ldrb	r0, [r3, #0]
    7ecc:	2300      	movs	r3, #0
    7ece:	2201      	movs	r2, #1
    7ed0:	4c0d      	ldr	r4, [pc, #52]	; (7f08 <usbdc_get_req+0x88>)
    7ed2:	47a0      	blx	r4
		return true;
    7ed4:	2301      	movs	r3, #1
    7ed6:	e00f      	b.n	7ef8 <usbdc_get_req+0x78>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    7ed8:	683a      	ldr	r2, [r7, #0]
    7eda:	1dfb      	adds	r3, r7, #7
    7edc:	781b      	ldrb	r3, [r3, #0]
    7ede:	0011      	movs	r1, r2
    7ee0:	0018      	movs	r0, r3
    7ee2:	4b0a      	ldr	r3, [pc, #40]	; (7f0c <usbdc_get_req+0x8c>)
    7ee4:	4798      	blx	r3
    7ee6:	0003      	movs	r3, r0
    7ee8:	e006      	b.n	7ef8 <usbdc_get_req+0x78>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    7eea:	683b      	ldr	r3, [r7, #0]
    7eec:	0018      	movs	r0, r3
    7eee:	4b08      	ldr	r3, [pc, #32]	; (7f10 <usbdc_get_req+0x90>)
    7ef0:	4798      	blx	r3
    7ef2:	0003      	movs	r3, r0
    7ef4:	e000      	b.n	7ef8 <usbdc_get_req+0x78>
	default:
		return false;
    7ef6:	2300      	movs	r3, #0
	}
}
    7ef8:	0018      	movs	r0, r3
    7efa:	46bd      	mov	sp, r7
    7efc:	b003      	add	sp, #12
    7efe:	bd90      	pop	{r4, r7, pc}
    7f00:	00007ccd 	.word	0x00007ccd
    7f04:	20001200 	.word	0x20001200
    7f08:	0000870d 	.word	0x0000870d
    7f0c:	00007d51 	.word	0x00007d51
    7f10:	00007de9 	.word	0x00007de9

00007f14 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    7f14:	b590      	push	{r4, r7, lr}
    7f16:	b083      	sub	sp, #12
    7f18:	af00      	add	r7, sp, #0
    7f1a:	0002      	movs	r2, r0
    7f1c:	6039      	str	r1, [r7, #0]
    7f1e:	1dfb      	adds	r3, r7, #7
    7f20:	701a      	strb	r2, [r3, #0]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    7f22:	683b      	ldr	r3, [r7, #0]
    7f24:	781b      	ldrb	r3, [r3, #0]
    7f26:	001a      	movs	r2, r3
    7f28:	231f      	movs	r3, #31
    7f2a:	4013      	ands	r3, r2
    7f2c:	2b02      	cmp	r3, #2
    7f2e:	d11d      	bne.n	7f6c <usbdc_clear_ftr_req+0x58>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    7f30:	683b      	ldr	r3, [r7, #0]
    7f32:	799a      	ldrb	r2, [r3, #6]
    7f34:	79db      	ldrb	r3, [r3, #7]
    7f36:	021b      	lsls	r3, r3, #8
    7f38:	4313      	orrs	r3, r2
    7f3a:	b29b      	uxth	r3, r3
    7f3c:	2b00      	cmp	r3, #0
    7f3e:	d001      	beq.n	7f44 <usbdc_clear_ftr_req+0x30>
			return false;
    7f40:	2300      	movs	r3, #0
    7f42:	e014      	b.n	7f6e <usbdc_clear_ftr_req+0x5a>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    7f44:	683b      	ldr	r3, [r7, #0]
    7f46:	791a      	ldrb	r2, [r3, #4]
    7f48:	795b      	ldrb	r3, [r3, #5]
    7f4a:	021b      	lsls	r3, r3, #8
    7f4c:	4313      	orrs	r3, r2
    7f4e:	b29b      	uxth	r3, r3
    7f50:	b2db      	uxtb	r3, r3
    7f52:	2100      	movs	r1, #0
    7f54:	0018      	movs	r0, r3
    7f56:	4b08      	ldr	r3, [pc, #32]	; (7f78 <usbdc_clear_ftr_req+0x64>)
    7f58:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    7f5a:	1dfb      	adds	r3, r7, #7
    7f5c:	7818      	ldrb	r0, [r3, #0]
    7f5e:	2301      	movs	r3, #1
    7f60:	2200      	movs	r2, #0
    7f62:	2100      	movs	r1, #0
    7f64:	4c05      	ldr	r4, [pc, #20]	; (7f7c <usbdc_clear_ftr_req+0x68>)
    7f66:	47a0      	blx	r4
		return true;
    7f68:	2301      	movs	r3, #1
    7f6a:	e000      	b.n	7f6e <usbdc_clear_ftr_req+0x5a>
	default:
		return false;
    7f6c:	2300      	movs	r3, #0
	}
}
    7f6e:	0018      	movs	r0, r3
    7f70:	46bd      	mov	sp, r7
    7f72:	b003      	add	sp, #12
    7f74:	bd90      	pop	{r4, r7, pc}
    7f76:	46c0      	nop			; (mov r8, r8)
    7f78:	00002a39 	.word	0x00002a39
    7f7c:	0000870d 	.word	0x0000870d

00007f80 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    7f80:	b590      	push	{r4, r7, lr}
    7f82:	b083      	sub	sp, #12
    7f84:	af00      	add	r7, sp, #0
    7f86:	0002      	movs	r2, r0
    7f88:	6039      	str	r1, [r7, #0]
    7f8a:	1dfb      	adds	r3, r7, #7
    7f8c:	701a      	strb	r2, [r3, #0]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    7f8e:	683b      	ldr	r3, [r7, #0]
    7f90:	781b      	ldrb	r3, [r3, #0]
    7f92:	001a      	movs	r2, r3
    7f94:	231f      	movs	r3, #31
    7f96:	4013      	ands	r3, r2
    7f98:	2b02      	cmp	r3, #2
    7f9a:	d11d      	bne.n	7fd8 <usbdc_set_ftr_req+0x58>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    7f9c:	683b      	ldr	r3, [r7, #0]
    7f9e:	799a      	ldrb	r2, [r3, #6]
    7fa0:	79db      	ldrb	r3, [r3, #7]
    7fa2:	021b      	lsls	r3, r3, #8
    7fa4:	4313      	orrs	r3, r2
    7fa6:	b29b      	uxth	r3, r3
    7fa8:	2b00      	cmp	r3, #0
    7faa:	d001      	beq.n	7fb0 <usbdc_set_ftr_req+0x30>
			return false;
    7fac:	2300      	movs	r3, #0
    7fae:	e014      	b.n	7fda <usbdc_set_ftr_req+0x5a>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    7fb0:	683b      	ldr	r3, [r7, #0]
    7fb2:	791a      	ldrb	r2, [r3, #4]
    7fb4:	795b      	ldrb	r3, [r3, #5]
    7fb6:	021b      	lsls	r3, r3, #8
    7fb8:	4313      	orrs	r3, r2
    7fba:	b29b      	uxth	r3, r3
    7fbc:	b2db      	uxtb	r3, r3
    7fbe:	2101      	movs	r1, #1
    7fc0:	0018      	movs	r0, r3
    7fc2:	4b08      	ldr	r3, [pc, #32]	; (7fe4 <usbdc_set_ftr_req+0x64>)
    7fc4:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    7fc6:	1dfb      	adds	r3, r7, #7
    7fc8:	7818      	ldrb	r0, [r3, #0]
    7fca:	2301      	movs	r3, #1
    7fcc:	2200      	movs	r2, #0
    7fce:	2100      	movs	r1, #0
    7fd0:	4c05      	ldr	r4, [pc, #20]	; (7fe8 <usbdc_set_ftr_req+0x68>)
    7fd2:	47a0      	blx	r4
		return true;
    7fd4:	2301      	movs	r3, #1
    7fd6:	e000      	b.n	7fda <usbdc_set_ftr_req+0x5a>
	default:
		return false;
    7fd8:	2300      	movs	r3, #0
	}
}
    7fda:	0018      	movs	r0, r3
    7fdc:	46bd      	mov	sp, r7
    7fde:	b003      	add	sp, #12
    7fe0:	bd90      	pop	{r4, r7, pc}
    7fe2:	46c0      	nop			; (mov r8, r8)
    7fe4:	00002a39 	.word	0x00002a39
    7fe8:	0000870d 	.word	0x0000870d

00007fec <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    7fec:	b580      	push	{r7, lr}
    7fee:	b082      	sub	sp, #8
    7ff0:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    7ff2:	4b0a      	ldr	r3, [pc, #40]	; (801c <usbdc_unconfig+0x30>)
    7ff4:	691b      	ldr	r3, [r3, #16]
    7ff6:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    7ff8:	e008      	b.n	800c <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    7ffa:	687b      	ldr	r3, [r7, #4]
    7ffc:	685b      	ldr	r3, [r3, #4]
    7ffe:	6878      	ldr	r0, [r7, #4]
    8000:	2200      	movs	r2, #0
    8002:	2101      	movs	r1, #1
    8004:	4798      	blx	r3
		func = func->next;
    8006:	687b      	ldr	r3, [r7, #4]
    8008:	681b      	ldr	r3, [r3, #0]
    800a:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    800c:	687b      	ldr	r3, [r7, #4]
    800e:	2b00      	cmp	r3, #0
    8010:	d1f3      	bne.n	7ffa <usbdc_unconfig+0xe>
	}
}
    8012:	46c0      	nop			; (mov r8, r8)
    8014:	46bd      	mov	sp, r7
    8016:	b002      	add	sp, #8
    8018:	bd80      	pop	{r7, pc}
    801a:	46c0      	nop			; (mov r8, r8)
    801c:	20001200 	.word	0x20001200

00008020 <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    8020:	b590      	push	{r4, r7, lr}
    8022:	b089      	sub	sp, #36	; 0x24
    8024:	af00      	add	r7, sp, #0
    8026:	0002      	movs	r2, r0
    8028:	1dfb      	adds	r3, r7, #7
    802a:	701a      	strb	r2, [r3, #0]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    802c:	2300      	movs	r3, #0
    802e:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    8030:	2317      	movs	r3, #23
    8032:	18fb      	adds	r3, r7, r3
    8034:	22ff      	movs	r2, #255	; 0xff
    8036:	701a      	strb	r2, [r3, #0]

	if (cfg_value == 0) {
    8038:	1dfb      	adds	r3, r7, #7
    803a:	781b      	ldrb	r3, [r3, #0]
    803c:	2b00      	cmp	r3, #0
    803e:	d103      	bne.n	8048 <usbdc_set_config+0x28>
		usbdc_unconfig();
    8040:	4b3e      	ldr	r3, [pc, #248]	; (813c <usbdc_set_config+0x11c>)
    8042:	4798      	blx	r3
		return true;
    8044:	2301      	movs	r3, #1
    8046:	e075      	b.n	8134 <usbdc_set_config+0x114>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    8048:	69bb      	ldr	r3, [r7, #24]
    804a:	2b00      	cmp	r3, #0
    804c:	d10c      	bne.n	8068 <usbdc_set_config+0x48>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    804e:	4b3c      	ldr	r3, [pc, #240]	; (8140 <usbdc_set_config+0x120>)
    8050:	681b      	ldr	r3, [r3, #0]
    8052:	6818      	ldr	r0, [r3, #0]
    8054:	4b3a      	ldr	r3, [pc, #232]	; (8140 <usbdc_set_config+0x120>)
    8056:	681b      	ldr	r3, [r3, #0]
    8058:	6859      	ldr	r1, [r3, #4]
    805a:	1dfb      	adds	r3, r7, #7
    805c:	781b      	ldrb	r3, [r3, #0]
    805e:	001a      	movs	r2, r3
    8060:	4b38      	ldr	r3, [pc, #224]	; (8144 <usbdc_set_config+0x124>)
    8062:	4798      	blx	r3
    8064:	0003      	movs	r3, r0
    8066:	61bb      	str	r3, [r7, #24]
	}
	if (NULL == cfg_desc) {
    8068:	69bb      	ldr	r3, [r7, #24]
    806a:	2b00      	cmp	r3, #0
    806c:	d101      	bne.n	8072 <usbdc_set_config+0x52>
		return false;
    806e:	2300      	movs	r3, #0
    8070:	e060      	b.n	8134 <usbdc_set_config+0x114>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    8072:	2314      	movs	r3, #20
    8074:	18fc      	adds	r4, r7, r3
    8076:	69bb      	ldr	r3, [r7, #24]
    8078:	0018      	movs	r0, r3
    807a:	4b33      	ldr	r3, [pc, #204]	; (8148 <usbdc_set_config+0x128>)
    807c:	4798      	blx	r3
    807e:	0003      	movs	r3, r0
    8080:	8023      	strh	r3, [r4, #0]
	desc.eod  = cfg_desc + total_len;
    8082:	2314      	movs	r3, #20
    8084:	18fb      	adds	r3, r7, r3
    8086:	881b      	ldrh	r3, [r3, #0]
    8088:	69ba      	ldr	r2, [r7, #24]
    808a:	18d2      	adds	r2, r2, r3
    808c:	230c      	movs	r3, #12
    808e:	18fb      	adds	r3, r7, r3
    8090:	605a      	str	r2, [r3, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    8092:	230c      	movs	r3, #12
    8094:	18fb      	adds	r3, r7, r3
    8096:	6859      	ldr	r1, [r3, #4]
    8098:	69bb      	ldr	r3, [r7, #24]
    809a:	2204      	movs	r2, #4
    809c:	0018      	movs	r0, r3
    809e:	4b2b      	ldr	r3, [pc, #172]	; (814c <usbdc_set_config+0x12c>)
    80a0:	4798      	blx	r3
    80a2:	0002      	movs	r2, r0
    80a4:	230c      	movs	r3, #12
    80a6:	18fb      	adds	r3, r7, r3
    80a8:	601a      	str	r2, [r3, #0]

	while (NULL != desc.sod) {
    80aa:	e03d      	b.n	8128 <usbdc_set_config+0x108>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    80ac:	230c      	movs	r3, #12
    80ae:	18fb      	adds	r3, r7, r3
    80b0:	681b      	ldr	r3, [r3, #0]
    80b2:	3302      	adds	r3, #2
    80b4:	781b      	ldrb	r3, [r3, #0]
    80b6:	2217      	movs	r2, #23
    80b8:	18ba      	adds	r2, r7, r2
    80ba:	7812      	ldrb	r2, [r2, #0]
    80bc:	429a      	cmp	r2, r3
    80be:	d01b      	beq.n	80f8 <usbdc_set_config+0xd8>
			last_iface = desc.sod[2];
    80c0:	230c      	movs	r3, #12
    80c2:	18fb      	adds	r3, r7, r3
    80c4:	681a      	ldr	r2, [r3, #0]
    80c6:	2317      	movs	r3, #23
    80c8:	18fb      	adds	r3, r7, r3
    80ca:	7892      	ldrb	r2, [r2, #2]
    80cc:	701a      	strb	r2, [r3, #0]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    80ce:	4b1c      	ldr	r3, [pc, #112]	; (8140 <usbdc_set_config+0x120>)
    80d0:	691b      	ldr	r3, [r3, #16]
    80d2:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    80d4:	e00b      	b.n	80ee <usbdc_set_config+0xce>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    80d6:	69fb      	ldr	r3, [r7, #28]
    80d8:	685b      	ldr	r3, [r3, #4]
    80da:	220c      	movs	r2, #12
    80dc:	18ba      	adds	r2, r7, r2
    80de:	69f8      	ldr	r0, [r7, #28]
    80e0:	2100      	movs	r1, #0
    80e2:	4798      	blx	r3
    80e4:	1e03      	subs	r3, r0, #0
    80e6:	d006      	beq.n	80f6 <usbdc_set_config+0xd6>
					func = func->next;
    80e8:	69fb      	ldr	r3, [r7, #28]
    80ea:	681b      	ldr	r3, [r3, #0]
    80ec:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    80ee:	69fb      	ldr	r3, [r7, #28]
    80f0:	2b00      	cmp	r3, #0
    80f2:	d1f0      	bne.n	80d6 <usbdc_set_config+0xb6>
    80f4:	e000      	b.n	80f8 <usbdc_set_config+0xd8>
				} else {
					break;
    80f6:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    80f8:	230c      	movs	r3, #12
    80fa:	18fb      	adds	r3, r7, r3
    80fc:	681b      	ldr	r3, [r3, #0]
    80fe:	0018      	movs	r0, r3
    8100:	4b13      	ldr	r3, [pc, #76]	; (8150 <usbdc_set_config+0x130>)
    8102:	4798      	blx	r3
    8104:	0002      	movs	r2, r0
    8106:	230c      	movs	r3, #12
    8108:	18fb      	adds	r3, r7, r3
    810a:	601a      	str	r2, [r3, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    810c:	230c      	movs	r3, #12
    810e:	18fb      	adds	r3, r7, r3
    8110:	6818      	ldr	r0, [r3, #0]
    8112:	230c      	movs	r3, #12
    8114:	18fb      	adds	r3, r7, r3
    8116:	685b      	ldr	r3, [r3, #4]
    8118:	2204      	movs	r2, #4
    811a:	0019      	movs	r1, r3
    811c:	4b0b      	ldr	r3, [pc, #44]	; (814c <usbdc_set_config+0x12c>)
    811e:	4798      	blx	r3
    8120:	0002      	movs	r2, r0
    8122:	230c      	movs	r3, #12
    8124:	18fb      	adds	r3, r7, r3
    8126:	601a      	str	r2, [r3, #0]
	while (NULL != desc.sod) {
    8128:	230c      	movs	r3, #12
    812a:	18fb      	adds	r3, r7, r3
    812c:	681b      	ldr	r3, [r3, #0]
    812e:	2b00      	cmp	r3, #0
    8130:	d1bc      	bne.n	80ac <usbdc_set_config+0x8c>
	}
	return true;
    8132:	2301      	movs	r3, #1
}
    8134:	0018      	movs	r0, r3
    8136:	46bd      	mov	sp, r7
    8138:	b009      	add	sp, #36	; 0x24
    813a:	bd90      	pop	{r4, r7, pc}
    813c:	00007fed 	.word	0x00007fed
    8140:	20001200 	.word	0x20001200
    8144:	00008a95 	.word	0x00008a95
    8148:	00007a6d 	.word	0x00007a6d
    814c:	000089c5 	.word	0x000089c5
    8150:	00007a49 	.word	0x00007a49

00008154 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    8154:	b580      	push	{r7, lr}
    8156:	b082      	sub	sp, #8
    8158:	af00      	add	r7, sp, #0
    815a:	0002      	movs	r2, r0
    815c:	1dfb      	adds	r3, r7, #7
    815e:	701a      	strb	r2, [r3, #0]
	usb_d_set_address(addr);
    8160:	1dfb      	adds	r3, r7, #7
    8162:	781b      	ldrb	r3, [r3, #0]
    8164:	0018      	movs	r0, r3
    8166:	4b03      	ldr	r3, [pc, #12]	; (8174 <usbdc_set_address+0x20>)
    8168:	4798      	blx	r3
}
    816a:	46c0      	nop			; (mov r8, r8)
    816c:	46bd      	mov	sp, r7
    816e:	b002      	add	sp, #8
    8170:	bd80      	pop	{r7, pc}
    8172:	46c0      	nop			; (mov r8, r8)
    8174:	00002605 	.word	0x00002605

00008178 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    8178:	b590      	push	{r4, r7, lr}
    817a:	b087      	sub	sp, #28
    817c:	af00      	add	r7, sp, #0
    817e:	0002      	movs	r2, r0
    8180:	1dbb      	adds	r3, r7, #6
    8182:	801a      	strh	r2, [r3, #0]
    8184:	1d3b      	adds	r3, r7, #4
    8186:	1c0a      	adds	r2, r1, #0
    8188:	801a      	strh	r2, [r3, #0]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    818a:	2300      	movs	r3, #0
    818c:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    818e:	693b      	ldr	r3, [r7, #16]
    8190:	2b00      	cmp	r3, #0
    8192:	d10c      	bne.n	81ae <usbdc_set_interface+0x36>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    8194:	4b4f      	ldr	r3, [pc, #316]	; (82d4 <usbdc_set_interface+0x15c>)
    8196:	681b      	ldr	r3, [r3, #0]
    8198:	6818      	ldr	r0, [r3, #0]
    819a:	4b4e      	ldr	r3, [pc, #312]	; (82d4 <usbdc_set_interface+0x15c>)
    819c:	681b      	ldr	r3, [r3, #0]
    819e:	6859      	ldr	r1, [r3, #4]
    81a0:	4b4c      	ldr	r3, [pc, #304]	; (82d4 <usbdc_set_interface+0x15c>)
    81a2:	7edb      	ldrb	r3, [r3, #27]
    81a4:	001a      	movs	r2, r3
    81a6:	4b4c      	ldr	r3, [pc, #304]	; (82d8 <usbdc_set_interface+0x160>)
    81a8:	4798      	blx	r3
    81aa:	0003      	movs	r3, r0
    81ac:	613b      	str	r3, [r7, #16]
	}
	if (NULL == ifc) {
    81ae:	693b      	ldr	r3, [r7, #16]
    81b0:	2b00      	cmp	r3, #0
    81b2:	d101      	bne.n	81b8 <usbdc_set_interface+0x40>
		return false;
    81b4:	2300      	movs	r3, #0
    81b6:	e088      	b.n	82ca <usbdc_set_interface+0x152>
	}
	desc.sod = ifc;
    81b8:	2308      	movs	r3, #8
    81ba:	18fb      	adds	r3, r7, r3
    81bc:	693a      	ldr	r2, [r7, #16]
    81be:	601a      	str	r2, [r3, #0]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    81c0:	693b      	ldr	r3, [r7, #16]
    81c2:	0018      	movs	r0, r3
    81c4:	4b45      	ldr	r3, [pc, #276]	; (82dc <usbdc_set_interface+0x164>)
    81c6:	4798      	blx	r3
    81c8:	0003      	movs	r3, r0
    81ca:	001a      	movs	r2, r3
    81cc:	693b      	ldr	r3, [r7, #16]
    81ce:	189a      	adds	r2, r3, r2
    81d0:	2308      	movs	r3, #8
    81d2:	18fb      	adds	r3, r7, r3
    81d4:	605a      	str	r2, [r3, #4]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    81d6:	2308      	movs	r3, #8
    81d8:	18fb      	adds	r3, r7, r3
    81da:	6818      	ldr	r0, [r3, #0]
    81dc:	2308      	movs	r3, #8
    81de:	18fb      	adds	r3, r7, r3
    81e0:	685b      	ldr	r3, [r3, #4]
    81e2:	2204      	movs	r2, #4
    81e4:	0019      	movs	r1, r3
    81e6:	4b3e      	ldr	r3, [pc, #248]	; (82e0 <usbdc_set_interface+0x168>)
    81e8:	4798      	blx	r3
    81ea:	0003      	movs	r3, r0
    81ec:	613b      	str	r3, [r7, #16]
    81ee:	693b      	ldr	r3, [r7, #16]
    81f0:	2b00      	cmp	r3, #0
    81f2:	d11c      	bne.n	822e <usbdc_set_interface+0xb6>
		return false;
    81f4:	2300      	movs	r3, #0
    81f6:	e068      	b.n	82ca <usbdc_set_interface+0x152>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    81f8:	2308      	movs	r3, #8
    81fa:	18fb      	adds	r3, r7, r3
    81fc:	681b      	ldr	r3, [r3, #0]
    81fe:	0018      	movs	r0, r3
    8200:	4b38      	ldr	r3, [pc, #224]	; (82e4 <usbdc_set_interface+0x16c>)
    8202:	4798      	blx	r3
    8204:	0002      	movs	r2, r0
    8206:	2308      	movs	r3, #8
    8208:	18fb      	adds	r3, r7, r3
    820a:	601a      	str	r2, [r3, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    820c:	2308      	movs	r3, #8
    820e:	18fb      	adds	r3, r7, r3
    8210:	6818      	ldr	r0, [r3, #0]
    8212:	2308      	movs	r3, #8
    8214:	18fb      	adds	r3, r7, r3
    8216:	685b      	ldr	r3, [r3, #4]
    8218:	2204      	movs	r2, #4
    821a:	0019      	movs	r1, r3
    821c:	4b30      	ldr	r3, [pc, #192]	; (82e0 <usbdc_set_interface+0x168>)
    821e:	4798      	blx	r3
    8220:	0003      	movs	r3, r0
    8222:	613b      	str	r3, [r7, #16]
		if (NULL == ifc) {
    8224:	693b      	ldr	r3, [r7, #16]
    8226:	2b00      	cmp	r3, #0
    8228:	d101      	bne.n	822e <usbdc_set_interface+0xb6>
			return false;
    822a:	2300      	movs	r3, #0
    822c:	e04d      	b.n	82ca <usbdc_set_interface+0x152>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    822e:	693b      	ldr	r3, [r7, #16]
    8230:	3302      	adds	r3, #2
    8232:	781b      	ldrb	r3, [r3, #0]
    8234:	b29b      	uxth	r3, r3
    8236:	1d3a      	adds	r2, r7, #4
    8238:	8812      	ldrh	r2, [r2, #0]
    823a:	429a      	cmp	r2, r3
    823c:	d1dc      	bne.n	81f8 <usbdc_set_interface+0x80>
    823e:	693b      	ldr	r3, [r7, #16]
    8240:	3303      	adds	r3, #3
    8242:	781b      	ldrb	r3, [r3, #0]
    8244:	b29b      	uxth	r3, r3
    8246:	1dba      	adds	r2, r7, #6
    8248:	8812      	ldrh	r2, [r2, #0]
    824a:	429a      	cmp	r2, r3
    824c:	d1d4      	bne.n	81f8 <usbdc_set_interface+0x80>
		}
	}

	desc.sod = ifc;
    824e:	2308      	movs	r3, #8
    8250:	18fb      	adds	r3, r7, r3
    8252:	693a      	ldr	r2, [r7, #16]
    8254:	601a      	str	r2, [r3, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    8256:	4b1f      	ldr	r3, [pc, #124]	; (82d4 <usbdc_set_interface+0x15c>)
    8258:	691b      	ldr	r3, [r3, #16]
    825a:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    825c:	e031      	b.n	82c2 <usbdc_set_interface+0x14a>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    825e:	697b      	ldr	r3, [r7, #20]
    8260:	685b      	ldr	r3, [r3, #4]
    8262:	2208      	movs	r2, #8
    8264:	18ba      	adds	r2, r7, r2
    8266:	6978      	ldr	r0, [r7, #20]
    8268:	2101      	movs	r1, #1
    826a:	4798      	blx	r3
    826c:	1e03      	subs	r3, r0, #0
    826e:	d003      	beq.n	8278 <usbdc_set_interface+0x100>
			func = func->next;
    8270:	697b      	ldr	r3, [r7, #20]
    8272:	681b      	ldr	r3, [r3, #0]
    8274:	617b      	str	r3, [r7, #20]
    8276:	e024      	b.n	82c2 <usbdc_set_interface+0x14a>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    8278:	697b      	ldr	r3, [r7, #20]
    827a:	685b      	ldr	r3, [r3, #4]
    827c:	2208      	movs	r2, #8
    827e:	18ba      	adds	r2, r7, r2
    8280:	6978      	ldr	r0, [r7, #20]
    8282:	2100      	movs	r1, #0
    8284:	4798      	blx	r3
    8286:	1e03      	subs	r3, r0, #0
    8288:	d119      	bne.n	82be <usbdc_set_interface+0x146>
			if (alt_set) {
    828a:	1dbb      	adds	r3, r7, #6
    828c:	881b      	ldrh	r3, [r3, #0]
    828e:	2b00      	cmp	r3, #0
    8290:	d00d      	beq.n	82ae <usbdc_set_interface+0x136>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    8292:	4b10      	ldr	r3, [pc, #64]	; (82d4 <usbdc_set_interface+0x15c>)
    8294:	7f5b      	ldrb	r3, [r3, #29]
    8296:	b25a      	sxtb	r2, r3
    8298:	1d3b      	adds	r3, r7, #4
    829a:	881b      	ldrh	r3, [r3, #0]
    829c:	2101      	movs	r1, #1
    829e:	4099      	lsls	r1, r3
    82a0:	000b      	movs	r3, r1
    82a2:	b25b      	sxtb	r3, r3
    82a4:	4313      	orrs	r3, r2
    82a6:	b25b      	sxtb	r3, r3
    82a8:	b2da      	uxtb	r2, r3
    82aa:	4b0a      	ldr	r3, [pc, #40]	; (82d4 <usbdc_set_interface+0x15c>)
    82ac:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    82ae:	2300      	movs	r3, #0
    82b0:	2200      	movs	r2, #0
    82b2:	2100      	movs	r1, #0
    82b4:	2000      	movs	r0, #0
    82b6:	4c0c      	ldr	r4, [pc, #48]	; (82e8 <usbdc_set_interface+0x170>)
    82b8:	47a0      	blx	r4
			return true;
    82ba:	2301      	movs	r3, #1
    82bc:	e005      	b.n	82ca <usbdc_set_interface+0x152>
		} else {
			return false;
    82be:	2300      	movs	r3, #0
    82c0:	e003      	b.n	82ca <usbdc_set_interface+0x152>
	while (NULL != func) {
    82c2:	697b      	ldr	r3, [r7, #20]
    82c4:	2b00      	cmp	r3, #0
    82c6:	d1ca      	bne.n	825e <usbdc_set_interface+0xe6>
		}
	}

	return false;
    82c8:	2300      	movs	r3, #0
}
    82ca:	0018      	movs	r0, r3
    82cc:	46bd      	mov	sp, r7
    82ce:	b007      	add	sp, #28
    82d0:	bd90      	pop	{r4, r7, pc}
    82d2:	46c0      	nop			; (mov r8, r8)
    82d4:	20001200 	.word	0x20001200
    82d8:	00008a95 	.word	0x00008a95
    82dc:	00007a6d 	.word	0x00007a6d
    82e0:	000089c5 	.word	0x000089c5
    82e4:	00007a49 	.word	0x00007a49
    82e8:	0000870d 	.word	0x0000870d

000082ec <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    82ec:	b590      	push	{r4, r7, lr}
    82ee:	b083      	sub	sp, #12
    82f0:	af00      	add	r7, sp, #0
    82f2:	0002      	movs	r2, r0
    82f4:	6039      	str	r1, [r7, #0]
    82f6:	1dfb      	adds	r3, r7, #7
    82f8:	701a      	strb	r2, [r3, #0]
	switch (req->bRequest) {
    82fa:	683b      	ldr	r3, [r7, #0]
    82fc:	785b      	ldrb	r3, [r3, #1]
    82fe:	2b0b      	cmp	r3, #11
    8300:	d852      	bhi.n	83a8 <usbdc_set_req+0xbc>
    8302:	009a      	lsls	r2, r3, #2
    8304:	4b2b      	ldr	r3, [pc, #172]	; (83b4 <usbdc_set_req+0xc8>)
    8306:	18d3      	adds	r3, r2, r3
    8308:	681b      	ldr	r3, [r3, #0]
    830a:	469f      	mov	pc, r3
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    830c:	1dfb      	adds	r3, r7, #7
    830e:	7818      	ldrb	r0, [r3, #0]
    8310:	2301      	movs	r3, #1
    8312:	2200      	movs	r2, #0
    8314:	2100      	movs	r1, #0
    8316:	4c28      	ldr	r4, [pc, #160]	; (83b8 <usbdc_set_req+0xcc>)
    8318:	47a0      	blx	r4
    831a:	0003      	movs	r3, r0
    831c:	425a      	negs	r2, r3
    831e:	4153      	adcs	r3, r2
    8320:	b2db      	uxtb	r3, r3
    8322:	e042      	b.n	83aa <usbdc_set_req+0xbe>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    8324:	683b      	ldr	r3, [r7, #0]
    8326:	789a      	ldrb	r2, [r3, #2]
    8328:	78db      	ldrb	r3, [r3, #3]
    832a:	021b      	lsls	r3, r3, #8
    832c:	4313      	orrs	r3, r2
    832e:	b29b      	uxth	r3, r3
    8330:	b2db      	uxtb	r3, r3
    8332:	0018      	movs	r0, r3
    8334:	4b21      	ldr	r3, [pc, #132]	; (83bc <usbdc_set_req+0xd0>)
    8336:	4798      	blx	r3
    8338:	0003      	movs	r3, r0
    833a:	001a      	movs	r2, r3
    833c:	2301      	movs	r3, #1
    833e:	4053      	eors	r3, r2
    8340:	b2db      	uxtb	r3, r3
    8342:	2b00      	cmp	r3, #0
    8344:	d001      	beq.n	834a <usbdc_set_req+0x5e>
			return false;
    8346:	2300      	movs	r3, #0
    8348:	e02f      	b.n	83aa <usbdc_set_req+0xbe>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    834a:	1dfb      	adds	r3, r7, #7
    834c:	7818      	ldrb	r0, [r3, #0]
    834e:	2301      	movs	r3, #1
    8350:	2200      	movs	r2, #0
    8352:	2100      	movs	r1, #0
    8354:	4c18      	ldr	r4, [pc, #96]	; (83b8 <usbdc_set_req+0xcc>)
    8356:	47a0      	blx	r4
    8358:	0003      	movs	r3, r0
    835a:	425a      	negs	r2, r3
    835c:	4153      	adcs	r3, r2
    835e:	b2db      	uxtb	r3, r3
    8360:	e023      	b.n	83aa <usbdc_set_req+0xbe>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    8362:	683a      	ldr	r2, [r7, #0]
    8364:	1dfb      	adds	r3, r7, #7
    8366:	781b      	ldrb	r3, [r3, #0]
    8368:	0011      	movs	r1, r2
    836a:	0018      	movs	r0, r3
    836c:	4b14      	ldr	r3, [pc, #80]	; (83c0 <usbdc_set_req+0xd4>)
    836e:	4798      	blx	r3
    8370:	0003      	movs	r3, r0
    8372:	e01a      	b.n	83aa <usbdc_set_req+0xbe>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    8374:	683a      	ldr	r2, [r7, #0]
    8376:	1dfb      	adds	r3, r7, #7
    8378:	781b      	ldrb	r3, [r3, #0]
    837a:	0011      	movs	r1, r2
    837c:	0018      	movs	r0, r3
    837e:	4b11      	ldr	r3, [pc, #68]	; (83c4 <usbdc_set_req+0xd8>)
    8380:	4798      	blx	r3
    8382:	0003      	movs	r3, r0
    8384:	e011      	b.n	83aa <usbdc_set_req+0xbe>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    8386:	683b      	ldr	r3, [r7, #0]
    8388:	789a      	ldrb	r2, [r3, #2]
    838a:	78db      	ldrb	r3, [r3, #3]
    838c:	021b      	lsls	r3, r3, #8
    838e:	4313      	orrs	r3, r2
    8390:	b298      	uxth	r0, r3
    8392:	683b      	ldr	r3, [r7, #0]
    8394:	791a      	ldrb	r2, [r3, #4]
    8396:	795b      	ldrb	r3, [r3, #5]
    8398:	021b      	lsls	r3, r3, #8
    839a:	4313      	orrs	r3, r2
    839c:	b29b      	uxth	r3, r3
    839e:	0019      	movs	r1, r3
    83a0:	4b09      	ldr	r3, [pc, #36]	; (83c8 <usbdc_set_req+0xdc>)
    83a2:	4798      	blx	r3
    83a4:	0003      	movs	r3, r0
    83a6:	e000      	b.n	83aa <usbdc_set_req+0xbe>
	default:
		return false;
    83a8:	2300      	movs	r3, #0
	}
}
    83aa:	0018      	movs	r0, r3
    83ac:	46bd      	mov	sp, r7
    83ae:	b003      	add	sp, #12
    83b0:	bd90      	pop	{r4, r7, pc}
    83b2:	46c0      	nop			; (mov r8, r8)
    83b4:	00012324 	.word	0x00012324
    83b8:	0000870d 	.word	0x0000870d
    83bc:	00008021 	.word	0x00008021
    83c0:	00007f15 	.word	0x00007f15
    83c4:	00007f81 	.word	0x00007f81
    83c8:	00008179 	.word	0x00008179

000083cc <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    83cc:	b580      	push	{r7, lr}
    83ce:	b082      	sub	sp, #8
    83d0:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    83d2:	4b0a      	ldr	r3, [pc, #40]	; (83fc <usbdc_sof_notify+0x30>)
    83d4:	685b      	ldr	r3, [r3, #4]
    83d6:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    83d8:	e009      	b.n	83ee <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    83da:	687b      	ldr	r3, [r7, #4]
    83dc:	685b      	ldr	r3, [r3, #4]
    83de:	2b00      	cmp	r3, #0
    83e0:	d002      	beq.n	83e8 <usbdc_sof_notify+0x1c>
			sof->cb();
    83e2:	687b      	ldr	r3, [r7, #4]
    83e4:	685b      	ldr	r3, [r3, #4]
    83e6:	4798      	blx	r3
		}
		sof = sof->next;
    83e8:	687b      	ldr	r3, [r7, #4]
    83ea:	681b      	ldr	r3, [r3, #0]
    83ec:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    83ee:	687b      	ldr	r3, [r7, #4]
    83f0:	2b00      	cmp	r3, #0
    83f2:	d1f2      	bne.n	83da <usbdc_sof_notify+0xe>
	}
}
    83f4:	46c0      	nop			; (mov r8, r8)
    83f6:	46bd      	mov	sp, r7
    83f8:	b002      	add	sp, #8
    83fa:	bd80      	pop	{r7, pc}
    83fc:	20001200 	.word	0x20001200

00008400 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    8400:	b580      	push	{r7, lr}
    8402:	b084      	sub	sp, #16
    8404:	af00      	add	r7, sp, #0
    8406:	0002      	movs	r2, r0
    8408:	6039      	str	r1, [r7, #0]
    840a:	1dfb      	adds	r3, r7, #7
    840c:	701a      	strb	r2, [r3, #0]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    840e:	4b0c      	ldr	r3, [pc, #48]	; (8440 <usbdc_change_notify+0x40>)
    8410:	68db      	ldr	r3, [r3, #12]
    8412:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    8414:	e00d      	b.n	8432 <usbdc_change_notify+0x32>
		if (NULL != cg->cb) {
    8416:	68fb      	ldr	r3, [r7, #12]
    8418:	685b      	ldr	r3, [r3, #4]
    841a:	2b00      	cmp	r3, #0
    841c:	d006      	beq.n	842c <usbdc_change_notify+0x2c>
			cg->cb(change, value);
    841e:	68fb      	ldr	r3, [r7, #12]
    8420:	685b      	ldr	r3, [r3, #4]
    8422:	6839      	ldr	r1, [r7, #0]
    8424:	1dfa      	adds	r2, r7, #7
    8426:	7812      	ldrb	r2, [r2, #0]
    8428:	0010      	movs	r0, r2
    842a:	4798      	blx	r3
		}
		cg = cg->next;
    842c:	68fb      	ldr	r3, [r7, #12]
    842e:	681b      	ldr	r3, [r3, #0]
    8430:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    8432:	68fb      	ldr	r3, [r7, #12]
    8434:	2b00      	cmp	r3, #0
    8436:	d1ee      	bne.n	8416 <usbdc_change_notify+0x16>
	}
}
    8438:	46c0      	nop			; (mov r8, r8)
    843a:	46bd      	mov	sp, r7
    843c:	b004      	add	sp, #16
    843e:	bd80      	pop	{r7, pc}
    8440:	20001200 	.word	0x20001200

00008444 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    8444:	b590      	push	{r4, r7, lr}
    8446:	b085      	sub	sp, #20
    8448:	af00      	add	r7, sp, #0
    844a:	6039      	str	r1, [r7, #0]
    844c:	0011      	movs	r1, r2
    844e:	1dfb      	adds	r3, r7, #7
    8450:	1c02      	adds	r2, r0, #0
    8452:	701a      	strb	r2, [r3, #0]
    8454:	1dbb      	adds	r3, r7, #6
    8456:	1c0a      	adds	r2, r1, #0
    8458:	701a      	strb	r2, [r3, #0]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    845a:	4b14      	ldr	r3, [pc, #80]	; (84ac <usbdc_request_handler+0x68>)
    845c:	689b      	ldr	r3, [r3, #8]
    845e:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    8460:	e01c      	b.n	849c <usbdc_request_handler+0x58>
		if (NULL != h->cb) {
    8462:	68fb      	ldr	r3, [r7, #12]
    8464:	685b      	ldr	r3, [r3, #4]
    8466:	2b00      	cmp	r3, #0
    8468:	d015      	beq.n	8496 <usbdc_request_handler+0x52>
			rc = h->cb(ep, req, stage);
    846a:	68fb      	ldr	r3, [r7, #12]
    846c:	685b      	ldr	r3, [r3, #4]
    846e:	1dba      	adds	r2, r7, #6
    8470:	7814      	ldrb	r4, [r2, #0]
    8472:	6839      	ldr	r1, [r7, #0]
    8474:	1dfa      	adds	r2, r7, #7
    8476:	7810      	ldrb	r0, [r2, #0]
    8478:	0022      	movs	r2, r4
    847a:	4798      	blx	r3
    847c:	0003      	movs	r3, r0
    847e:	60bb      	str	r3, [r7, #8]
			if (0 == rc) {
    8480:	68bb      	ldr	r3, [r7, #8]
    8482:	2b00      	cmp	r3, #0
    8484:	d101      	bne.n	848a <usbdc_request_handler+0x46>
				return true;
    8486:	2301      	movs	r3, #1
    8488:	e00c      	b.n	84a4 <usbdc_request_handler+0x60>
			} else if (ERR_NOT_FOUND != rc) {
    848a:	68bb      	ldr	r3, [r7, #8]
    848c:	330a      	adds	r3, #10
    848e:	d002      	beq.n	8496 <usbdc_request_handler+0x52>
				return -1;
    8490:	2301      	movs	r3, #1
    8492:	425b      	negs	r3, r3
    8494:	e006      	b.n	84a4 <usbdc_request_handler+0x60>
			}
		}
		h = h->next;
    8496:	68fb      	ldr	r3, [r7, #12]
    8498:	681b      	ldr	r3, [r3, #0]
    849a:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    849c:	68fb      	ldr	r3, [r7, #12]
    849e:	2b00      	cmp	r3, #0
    84a0:	d1df      	bne.n	8462 <usbdc_request_handler+0x1e>
	}
	return false;
    84a2:	2300      	movs	r3, #0
}
    84a4:	0018      	movs	r0, r3
    84a6:	46bd      	mov	sp, r7
    84a8:	b005      	add	sp, #20
    84aa:	bd90      	pop	{r4, r7, pc}
    84ac:	20001200 	.word	0x20001200

000084b0 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    84b0:	b580      	push	{r7, lr}
    84b2:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    84b4:	4b02      	ldr	r3, [pc, #8]	; (84c0 <usbd_sof_cb+0x10>)
    84b6:	4798      	blx	r3
}
    84b8:	46c0      	nop			; (mov r8, r8)
    84ba:	46bd      	mov	sp, r7
    84bc:	bd80      	pop	{r7, pc}
    84be:	46c0      	nop			; (mov r8, r8)
    84c0:	000083cd 	.word	0x000083cd

000084c4 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    84c4:	b580      	push	{r7, lr}
    84c6:	b082      	sub	sp, #8
    84c8:	af00      	add	r7, sp, #0
    84ca:	0002      	movs	r2, r0
    84cc:	6039      	str	r1, [r7, #0]
    84ce:	1dfb      	adds	r3, r7, #7
    84d0:	701a      	strb	r2, [r3, #0]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    84d2:	6839      	ldr	r1, [r7, #0]
    84d4:	1dfb      	adds	r3, r7, #7
    84d6:	781b      	ldrb	r3, [r3, #0]
    84d8:	2200      	movs	r2, #0
    84da:	0018      	movs	r0, r3
    84dc:	4b16      	ldr	r3, [pc, #88]	; (8538 <usbdc_cb_ctl_req+0x74>)
    84de:	4798      	blx	r3
    84e0:	0003      	movs	r3, r0
    84e2:	1c5a      	adds	r2, r3, #1
    84e4:	d00b      	beq.n	84fe <usbdc_cb_ctl_req+0x3a>
    84e6:	2b01      	cmp	r3, #1
    84e8:	d007      	beq.n	84fa <usbdc_cb_ctl_req+0x36>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    84ea:	46c0      	nop			; (mov r8, r8)
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    84ec:	683b      	ldr	r3, [r7, #0]
    84ee:	781b      	ldrb	r3, [r3, #0]
    84f0:	001a      	movs	r2, r3
    84f2:	23e0      	movs	r3, #224	; 0xe0
    84f4:	4013      	ands	r3, r2
    84f6:	d007      	beq.n	8508 <usbdc_cb_ctl_req+0x44>
    84f8:	e003      	b.n	8502 <usbdc_cb_ctl_req+0x3e>
		return true;
    84fa:	2301      	movs	r3, #1
    84fc:	e017      	b.n	852e <usbdc_cb_ctl_req+0x6a>
		return false;
    84fe:	2300      	movs	r3, #0
    8500:	e015      	b.n	852e <usbdc_cb_ctl_req+0x6a>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    8502:	2b80      	cmp	r3, #128	; 0x80
    8504:	d009      	beq.n	851a <usbdc_cb_ctl_req+0x56>
    8506:	e011      	b.n	852c <usbdc_cb_ctl_req+0x68>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    8508:	683a      	ldr	r2, [r7, #0]
    850a:	1dfb      	adds	r3, r7, #7
    850c:	781b      	ldrb	r3, [r3, #0]
    850e:	0011      	movs	r1, r2
    8510:	0018      	movs	r0, r3
    8512:	4b0a      	ldr	r3, [pc, #40]	; (853c <usbdc_cb_ctl_req+0x78>)
    8514:	4798      	blx	r3
    8516:	0003      	movs	r3, r0
    8518:	e009      	b.n	852e <usbdc_cb_ctl_req+0x6a>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    851a:	683a      	ldr	r2, [r7, #0]
    851c:	1dfb      	adds	r3, r7, #7
    851e:	781b      	ldrb	r3, [r3, #0]
    8520:	0011      	movs	r1, r2
    8522:	0018      	movs	r0, r3
    8524:	4b06      	ldr	r3, [pc, #24]	; (8540 <usbdc_cb_ctl_req+0x7c>)
    8526:	4798      	blx	r3
    8528:	0003      	movs	r3, r0
    852a:	e000      	b.n	852e <usbdc_cb_ctl_req+0x6a>
	default:
		return false;
    852c:	2300      	movs	r3, #0
	}
}
    852e:	0018      	movs	r0, r3
    8530:	46bd      	mov	sp, r7
    8532:	b002      	add	sp, #8
    8534:	bd80      	pop	{r7, pc}
    8536:	46c0      	nop			; (mov r8, r8)
    8538:	00008445 	.word	0x00008445
    853c:	000082ed 	.word	0x000082ed
    8540:	00007e81 	.word	0x00007e81

00008544 <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    8544:	b580      	push	{r7, lr}
    8546:	b082      	sub	sp, #8
    8548:	af00      	add	r7, sp, #0
    854a:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    854c:	687b      	ldr	r3, [r7, #4]
    854e:	781b      	ldrb	r3, [r3, #0]
    8550:	2b00      	cmp	r3, #0
    8552:	d141      	bne.n	85d8 <usbdc_ctrl_status_end+0x94>
		return;
	}
	switch (req->bRequest) {
    8554:	687b      	ldr	r3, [r7, #4]
    8556:	785b      	ldrb	r3, [r3, #1]
    8558:	2b05      	cmp	r3, #5
    855a:	d01f      	beq.n	859c <usbdc_ctrl_status_end+0x58>
    855c:	2b09      	cmp	r3, #9
    855e:	d000      	beq.n	8562 <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    8560:	e03b      	b.n	85da <usbdc_ctrl_status_end+0x96>
		usbdc.cfg_value = req->wValue;
    8562:	687b      	ldr	r3, [r7, #4]
    8564:	789a      	ldrb	r2, [r3, #2]
    8566:	78db      	ldrb	r3, [r3, #3]
    8568:	021b      	lsls	r3, r3, #8
    856a:	4313      	orrs	r3, r2
    856c:	b29b      	uxth	r3, r3
    856e:	b2da      	uxtb	r2, r3
    8570:	4b1b      	ldr	r3, [pc, #108]	; (85e0 <usbdc_ctrl_status_end+0x9c>)
    8572:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    8574:	687b      	ldr	r3, [r7, #4]
    8576:	789a      	ldrb	r2, [r3, #2]
    8578:	78db      	ldrb	r3, [r3, #3]
    857a:	021b      	lsls	r3, r3, #8
    857c:	4313      	orrs	r3, r2
    857e:	b29b      	uxth	r3, r3
    8580:	2b00      	cmp	r3, #0
    8582:	d001      	beq.n	8588 <usbdc_ctrl_status_end+0x44>
    8584:	2204      	movs	r2, #4
    8586:	e000      	b.n	858a <usbdc_ctrl_status_end+0x46>
    8588:	2203      	movs	r2, #3
    858a:	4b15      	ldr	r3, [pc, #84]	; (85e0 <usbdc_ctrl_status_end+0x9c>)
    858c:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    858e:	4b14      	ldr	r3, [pc, #80]	; (85e0 <usbdc_ctrl_status_end+0x9c>)
    8590:	7e9b      	ldrb	r3, [r3, #26]
    8592:	0019      	movs	r1, r3
    8594:	2001      	movs	r0, #1
    8596:	4b13      	ldr	r3, [pc, #76]	; (85e4 <usbdc_ctrl_status_end+0xa0>)
    8598:	4798      	blx	r3
		break;
    859a:	e01e      	b.n	85da <usbdc_ctrl_status_end+0x96>
		usbdc_set_address(req->wValue);
    859c:	687b      	ldr	r3, [r7, #4]
    859e:	789a      	ldrb	r2, [r3, #2]
    85a0:	78db      	ldrb	r3, [r3, #3]
    85a2:	021b      	lsls	r3, r3, #8
    85a4:	4313      	orrs	r3, r2
    85a6:	b29b      	uxth	r3, r3
    85a8:	b2db      	uxtb	r3, r3
    85aa:	0018      	movs	r0, r3
    85ac:	4b0e      	ldr	r3, [pc, #56]	; (85e8 <usbdc_ctrl_status_end+0xa4>)
    85ae:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    85b0:	687b      	ldr	r3, [r7, #4]
    85b2:	789a      	ldrb	r2, [r3, #2]
    85b4:	78db      	ldrb	r3, [r3, #3]
    85b6:	021b      	lsls	r3, r3, #8
    85b8:	4313      	orrs	r3, r2
    85ba:	b29b      	uxth	r3, r3
    85bc:	2b00      	cmp	r3, #0
    85be:	d001      	beq.n	85c4 <usbdc_ctrl_status_end+0x80>
    85c0:	2203      	movs	r2, #3
    85c2:	e000      	b.n	85c6 <usbdc_ctrl_status_end+0x82>
    85c4:	2202      	movs	r2, #2
    85c6:	4b06      	ldr	r3, [pc, #24]	; (85e0 <usbdc_ctrl_status_end+0x9c>)
    85c8:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    85ca:	4b05      	ldr	r3, [pc, #20]	; (85e0 <usbdc_ctrl_status_end+0x9c>)
    85cc:	7e9b      	ldrb	r3, [r3, #26]
    85ce:	0019      	movs	r1, r3
    85d0:	2001      	movs	r0, #1
    85d2:	4b04      	ldr	r3, [pc, #16]	; (85e4 <usbdc_ctrl_status_end+0xa0>)
    85d4:	4798      	blx	r3
		break;
    85d6:	e000      	b.n	85da <usbdc_ctrl_status_end+0x96>
		return;
    85d8:	46c0      	nop			; (mov r8, r8)
	}
}
    85da:	46bd      	mov	sp, r7
    85dc:	b002      	add	sp, #8
    85de:	bd80      	pop	{r7, pc}
    85e0:	20001200 	.word	0x20001200
    85e4:	00008401 	.word	0x00008401
    85e8:	00008155 	.word	0x00008155

000085ec <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    85ec:	b580      	push	{r7, lr}
    85ee:	b082      	sub	sp, #8
    85f0:	af00      	add	r7, sp, #0
    85f2:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    85f4:	687b      	ldr	r3, [r7, #4]
    85f6:	2201      	movs	r2, #1
    85f8:	0019      	movs	r1, r3
    85fa:	2000      	movs	r0, #0
    85fc:	4b03      	ldr	r3, [pc, #12]	; (860c <usbdc_ctrl_data_end+0x20>)
    85fe:	4798      	blx	r3
	return false;
    8600:	2300      	movs	r3, #0
}
    8602:	0018      	movs	r0, r3
    8604:	46bd      	mov	sp, r7
    8606:	b002      	add	sp, #8
    8608:	bd80      	pop	{r7, pc}
    860a:	46c0      	nop			; (mov r8, r8)
    860c:	00008445 	.word	0x00008445

00008610 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    8610:	b580      	push	{r7, lr}
    8612:	b082      	sub	sp, #8
    8614:	af00      	add	r7, sp, #0
    8616:	603a      	str	r2, [r7, #0]
    8618:	1dfb      	adds	r3, r7, #7
    861a:	1c02      	adds	r2, r0, #0
    861c:	701a      	strb	r2, [r3, #0]
    861e:	1dbb      	adds	r3, r7, #6
    8620:	1c0a      	adds	r2, r1, #0
    8622:	701a      	strb	r2, [r3, #0]
	(void)ep;

	switch (code) {
    8624:	1dbb      	adds	r3, r7, #6
    8626:	781b      	ldrb	r3, [r3, #0]
    8628:	2b00      	cmp	r3, #0
    862a:	d002      	beq.n	8632 <usbdc_cb_ctl_done+0x22>
    862c:	2b01      	cmp	r3, #1
    862e:	d005      	beq.n	863c <usbdc_cb_ctl_done+0x2c>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    8630:	e00a      	b.n	8648 <usbdc_cb_ctl_done+0x38>
		usbdc_ctrl_status_end(req);
    8632:	683b      	ldr	r3, [r7, #0]
    8634:	0018      	movs	r0, r3
    8636:	4b07      	ldr	r3, [pc, #28]	; (8654 <usbdc_cb_ctl_done+0x44>)
    8638:	4798      	blx	r3
		break;
    863a:	e005      	b.n	8648 <usbdc_cb_ctl_done+0x38>
		return usbdc_ctrl_data_end(req);
    863c:	683b      	ldr	r3, [r7, #0]
    863e:	0018      	movs	r0, r3
    8640:	4b05      	ldr	r3, [pc, #20]	; (8658 <usbdc_cb_ctl_done+0x48>)
    8642:	4798      	blx	r3
    8644:	0003      	movs	r3, r0
    8646:	e000      	b.n	864a <usbdc_cb_ctl_done+0x3a>
	}
	return false;
    8648:	2300      	movs	r3, #0
}
    864a:	0018      	movs	r0, r3
    864c:	46bd      	mov	sp, r7
    864e:	b002      	add	sp, #8
    8650:	bd80      	pop	{r7, pc}
    8652:	46c0      	nop			; (mov r8, r8)
    8654:	00008545 	.word	0x00008545
    8658:	000085ed 	.word	0x000085ed

0000865c <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    865c:	b580      	push	{r7, lr}
    865e:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    8660:	4b12      	ldr	r3, [pc, #72]	; (86ac <usbdc_reset+0x50>)
    8662:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    8664:	4b12      	ldr	r3, [pc, #72]	; (86b0 <usbdc_reset+0x54>)
    8666:	2202      	movs	r2, #2
    8668:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    866a:	4b11      	ldr	r3, [pc, #68]	; (86b0 <usbdc_reset+0x54>)
    866c:	2200      	movs	r2, #0
    866e:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    8670:	4b0f      	ldr	r3, [pc, #60]	; (86b0 <usbdc_reset+0x54>)
    8672:	2200      	movs	r2, #0
    8674:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    8676:	2000      	movs	r0, #0
    8678:	4b0e      	ldr	r3, [pc, #56]	; (86b4 <usbdc_reset+0x58>)
    867a:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    867c:	4b0c      	ldr	r3, [pc, #48]	; (86b0 <usbdc_reset+0x54>)
    867e:	7f1b      	ldrb	r3, [r3, #28]
    8680:	0018      	movs	r0, r3
    8682:	4b0d      	ldr	r3, [pc, #52]	; (86b8 <usbdc_reset+0x5c>)
    8684:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    8686:	4b0d      	ldr	r3, [pc, #52]	; (86bc <usbdc_reset+0x60>)
    8688:	001a      	movs	r2, r3
    868a:	2100      	movs	r1, #0
    868c:	2000      	movs	r0, #0
    868e:	4b0c      	ldr	r3, [pc, #48]	; (86c0 <usbdc_reset+0x64>)
    8690:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    8692:	4b0c      	ldr	r3, [pc, #48]	; (86c4 <usbdc_reset+0x68>)
    8694:	001a      	movs	r2, r3
    8696:	2102      	movs	r1, #2
    8698:	2000      	movs	r0, #0
    869a:	4b09      	ldr	r3, [pc, #36]	; (86c0 <usbdc_reset+0x64>)
    869c:	4798      	blx	r3
	usb_d_ep_enable(0);
    869e:	2000      	movs	r0, #0
    86a0:	4b09      	ldr	r3, [pc, #36]	; (86c8 <usbdc_reset+0x6c>)
    86a2:	4798      	blx	r3
}
    86a4:	46c0      	nop			; (mov r8, r8)
    86a6:	46bd      	mov	sp, r7
    86a8:	bd80      	pop	{r7, pc}
    86aa:	46c0      	nop			; (mov r8, r8)
    86ac:	00007fed 	.word	0x00007fed
    86b0:	20001200 	.word	0x20001200
    86b4:	00002721 	.word	0x00002721
    86b8:	00002629 	.word	0x00002629
    86bc:	000084c5 	.word	0x000084c5
    86c0:	00002a99 	.word	0x00002a99
    86c4:	00008611 	.word	0x00008611
    86c8:	00002781 	.word	0x00002781

000086cc <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    86cc:	b580      	push	{r7, lr}
    86ce:	b082      	sub	sp, #8
    86d0:	af00      	add	r7, sp, #0
    86d2:	0002      	movs	r2, r0
    86d4:	6039      	str	r1, [r7, #0]
    86d6:	1dfb      	adds	r3, r7, #7
    86d8:	701a      	strb	r2, [r3, #0]
	(void)param;

	switch (ev) {
    86da:	1dfb      	adds	r3, r7, #7
    86dc:	781b      	ldrb	r3, [r3, #0]
    86de:	2b00      	cmp	r3, #0
    86e0:	d002      	beq.n	86e8 <usbd_event_cb+0x1c>
    86e2:	2b01      	cmp	r3, #1
    86e4:	d006      	beq.n	86f4 <usbd_event_cb+0x28>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    86e6:	e008      	b.n	86fa <usbd_event_cb+0x2e>
		usbdc_change_notify(USBDC_C_CONN, param);
    86e8:	683b      	ldr	r3, [r7, #0]
    86ea:	0019      	movs	r1, r3
    86ec:	2000      	movs	r0, #0
    86ee:	4b05      	ldr	r3, [pc, #20]	; (8704 <usbd_event_cb+0x38>)
    86f0:	4798      	blx	r3
		break;
    86f2:	e002      	b.n	86fa <usbd_event_cb+0x2e>
		usbdc_reset();
    86f4:	4b04      	ldr	r3, [pc, #16]	; (8708 <usbd_event_cb+0x3c>)
    86f6:	4798      	blx	r3
		break;
    86f8:	46c0      	nop			; (mov r8, r8)
	}
}
    86fa:	46c0      	nop			; (mov r8, r8)
    86fc:	46bd      	mov	sp, r7
    86fe:	b002      	add	sp, #8
    8700:	bd80      	pop	{r7, pc}
    8702:	46c0      	nop			; (mov r8, r8)
    8704:	00008401 	.word	0x00008401
    8708:	0000865d 	.word	0x0000865d

0000870c <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    870c:	b580      	push	{r7, lr}
    870e:	b088      	sub	sp, #32
    8710:	af00      	add	r7, sp, #0
    8712:	60b9      	str	r1, [r7, #8]
    8714:	607a      	str	r2, [r7, #4]
    8716:	0019      	movs	r1, r3
    8718:	230f      	movs	r3, #15
    871a:	18fb      	adds	r3, r7, r3
    871c:	1c02      	adds	r2, r0, #0
    871e:	701a      	strb	r2, [r3, #0]
    8720:	230e      	movs	r3, #14
    8722:	18fb      	adds	r3, r7, r3
    8724:	1c0a      	adds	r2, r1, #0
    8726:	701a      	strb	r2, [r3, #0]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    8728:	2314      	movs	r3, #20
    872a:	18fb      	adds	r3, r7, r3
    872c:	68ba      	ldr	r2, [r7, #8]
    872e:	601a      	str	r2, [r3, #0]
    8730:	2314      	movs	r3, #20
    8732:	18fb      	adds	r3, r7, r3
    8734:	687a      	ldr	r2, [r7, #4]
    8736:	605a      	str	r2, [r3, #4]
    8738:	2314      	movs	r3, #20
    873a:	18fb      	adds	r3, r7, r3
    873c:	220f      	movs	r2, #15
    873e:	18ba      	adds	r2, r7, r2
    8740:	7812      	ldrb	r2, [r2, #0]
    8742:	721a      	strb	r2, [r3, #8]
    8744:	230e      	movs	r3, #14
    8746:	18fb      	adds	r3, r7, r3
    8748:	781a      	ldrb	r2, [r3, #0]
    874a:	2314      	movs	r3, #20
    874c:	18fb      	adds	r3, r7, r3
    874e:	725a      	strb	r2, [r3, #9]
	return usb_d_ep_transfer(&xfer);
    8750:	2314      	movs	r3, #20
    8752:	18fb      	adds	r3, r7, r3
    8754:	0018      	movs	r0, r3
    8756:	4b03      	ldr	r3, [pc, #12]	; (8764 <usbdc_xfer+0x58>)
    8758:	4798      	blx	r3
    875a:	0003      	movs	r3, r0
}
    875c:	0018      	movs	r0, r3
    875e:	46bd      	mov	sp, r7
    8760:	b008      	add	sp, #32
    8762:	bd80      	pop	{r7, pc}
    8764:	00002801 	.word	0x00002801

00008768 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    8768:	b580      	push	{r7, lr}
    876a:	b082      	sub	sp, #8
    876c:	af00      	add	r7, sp, #0
    876e:	0002      	movs	r2, r0
    8770:	6039      	str	r1, [r7, #0]
    8772:	1dfb      	adds	r3, r7, #7
    8774:	701a      	strb	r2, [r3, #0]
	switch (type) {
    8776:	1dfb      	adds	r3, r7, #7
    8778:	781b      	ldrb	r3, [r3, #0]
    877a:	2b01      	cmp	r3, #1
    877c:	d00b      	beq.n	8796 <usbdc_register_handler+0x2e>
    877e:	2b02      	cmp	r3, #2
    8780:	d010      	beq.n	87a4 <usbdc_register_handler+0x3c>
    8782:	2b00      	cmp	r3, #0
    8784:	d000      	beq.n	8788 <usbdc_register_handler+0x20>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
    8786:	e014      	b.n	87b2 <usbdc_register_handler+0x4a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    8788:	683a      	ldr	r2, [r7, #0]
    878a:	4b0c      	ldr	r3, [pc, #48]	; (87bc <usbdc_register_handler+0x54>)
    878c:	0011      	movs	r1, r2
    878e:	0018      	movs	r0, r3
    8790:	4b0b      	ldr	r3, [pc, #44]	; (87c0 <usbdc_register_handler+0x58>)
    8792:	4798      	blx	r3
		break;
    8794:	e00d      	b.n	87b2 <usbdc_register_handler+0x4a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    8796:	683a      	ldr	r2, [r7, #0]
    8798:	4b0a      	ldr	r3, [pc, #40]	; (87c4 <usbdc_register_handler+0x5c>)
    879a:	0011      	movs	r1, r2
    879c:	0018      	movs	r0, r3
    879e:	4b08      	ldr	r3, [pc, #32]	; (87c0 <usbdc_register_handler+0x58>)
    87a0:	4798      	blx	r3
		break;
    87a2:	e006      	b.n	87b2 <usbdc_register_handler+0x4a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    87a4:	683a      	ldr	r2, [r7, #0]
    87a6:	4b08      	ldr	r3, [pc, #32]	; (87c8 <usbdc_register_handler+0x60>)
    87a8:	0011      	movs	r1, r2
    87aa:	0018      	movs	r0, r3
    87ac:	4b04      	ldr	r3, [pc, #16]	; (87c0 <usbdc_register_handler+0x58>)
    87ae:	4798      	blx	r3
		break;
    87b0:	46c0      	nop			; (mov r8, r8)
	}
}
    87b2:	46c0      	nop			; (mov r8, r8)
    87b4:	46bd      	mov	sp, r7
    87b6:	b002      	add	sp, #8
    87b8:	bd80      	pop	{r7, pc}
    87ba:	46c0      	nop			; (mov r8, r8)
    87bc:	20001204 	.word	0x20001204
    87c0:	00008bdd 	.word	0x00008bdd
    87c4:	20001208 	.word	0x20001208
    87c8:	2000120c 	.word	0x2000120c

000087cc <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    87cc:	b580      	push	{r7, lr}
    87ce:	b084      	sub	sp, #16
    87d0:	af00      	add	r7, sp, #0
    87d2:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
    87d4:	687b      	ldr	r3, [r7, #4]
    87d6:	1e5a      	subs	r2, r3, #1
    87d8:	4193      	sbcs	r3, r2
    87da:	b2db      	uxtb	r3, r3
    87dc:	4a12      	ldr	r2, [pc, #72]	; (8828 <usbdc_init+0x5c>)
    87de:	4913      	ldr	r1, [pc, #76]	; (882c <usbdc_init+0x60>)
    87e0:	0018      	movs	r0, r3
    87e2:	4b13      	ldr	r3, [pc, #76]	; (8830 <usbdc_init+0x64>)
    87e4:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    87e6:	4b13      	ldr	r3, [pc, #76]	; (8834 <usbdc_init+0x68>)
    87e8:	4798      	blx	r3
    87ea:	0003      	movs	r3, r0
    87ec:	60fb      	str	r3, [r7, #12]
	if (rc < 0) {
    87ee:	68fb      	ldr	r3, [r7, #12]
    87f0:	2b00      	cmp	r3, #0
    87f2:	da01      	bge.n	87f8 <usbdc_init+0x2c>
		return rc;
    87f4:	68fb      	ldr	r3, [r7, #12]
    87f6:	e013      	b.n	8820 <usbdc_init+0x54>
	}

	memset(&usbdc, 0, sizeof(usbdc));
    87f8:	4b0f      	ldr	r3, [pc, #60]	; (8838 <usbdc_init+0x6c>)
    87fa:	2220      	movs	r2, #32
    87fc:	2100      	movs	r1, #0
    87fe:	0018      	movs	r0, r3
    8800:	4b0e      	ldr	r3, [pc, #56]	; (883c <usbdc_init+0x70>)
    8802:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    8804:	4b0c      	ldr	r3, [pc, #48]	; (8838 <usbdc_init+0x6c>)
    8806:	687a      	ldr	r2, [r7, #4]
    8808:	615a      	str	r2, [r3, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    880a:	4b0d      	ldr	r3, [pc, #52]	; (8840 <usbdc_init+0x74>)
    880c:	0019      	movs	r1, r3
    880e:	2000      	movs	r0, #0
    8810:	4b0c      	ldr	r3, [pc, #48]	; (8844 <usbdc_init+0x78>)
    8812:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    8814:	4b0c      	ldr	r3, [pc, #48]	; (8848 <usbdc_init+0x7c>)
    8816:	0019      	movs	r1, r3
    8818:	2001      	movs	r0, #1
    881a:	4b0a      	ldr	r3, [pc, #40]	; (8844 <usbdc_init+0x78>)
    881c:	4798      	blx	r3

	return 0;
    881e:	2300      	movs	r3, #0
}
    8820:	0018      	movs	r0, r3
    8822:	46bd      	mov	sp, r7
    8824:	b004      	add	sp, #16
    8826:	bd80      	pop	{r7, pc}
    8828:	00000355 	.word	0x00000355
    882c:	00012354 	.word	0x00012354
    8830:	00002b25 	.word	0x00002b25
    8834:	000024ed 	.word	0x000024ed
    8838:	20001200 	.word	0x20001200
    883c:	0000d219 	.word	0x0000d219
    8840:	000084b1 	.word	0x000084b1
    8844:	000025b5 	.word	0x000025b5
    8848:	000086cd 	.word	0x000086cd

0000884c <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    884c:	b580      	push	{r7, lr}
    884e:	b082      	sub	sp, #8
    8850:	af00      	add	r7, sp, #0
    8852:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
    8854:	687a      	ldr	r2, [r7, #4]
    8856:	4b04      	ldr	r3, [pc, #16]	; (8868 <usbdc_register_function+0x1c>)
    8858:	0011      	movs	r1, r2
    885a:	0018      	movs	r0, r3
    885c:	4b03      	ldr	r3, [pc, #12]	; (886c <usbdc_register_function+0x20>)
    885e:	4798      	blx	r3
}
    8860:	46c0      	nop			; (mov r8, r8)
    8862:	46bd      	mov	sp, r7
    8864:	b002      	add	sp, #8
    8866:	bd80      	pop	{r7, pc}
    8868:	20001210 	.word	0x20001210
    886c:	00008bdd 	.word	0x00008bdd

00008870 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    8870:	b580      	push	{r7, lr}
    8872:	b082      	sub	sp, #8
    8874:	af00      	add	r7, sp, #0
    8876:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
    8878:	4b0f      	ldr	r3, [pc, #60]	; (88b8 <usbdc_start+0x48>)
    887a:	7e9b      	ldrb	r3, [r3, #26]
    887c:	2b00      	cmp	r3, #0
    887e:	d002      	beq.n	8886 <usbdc_start+0x16>
		return ERR_BUSY;
    8880:	2304      	movs	r3, #4
    8882:	425b      	negs	r3, r3
    8884:	e013      	b.n	88ae <usbdc_start+0x3e>
	}

	if (desces) {
    8886:	687b      	ldr	r3, [r7, #4]
    8888:	2b00      	cmp	r3, #0
    888a:	d00e      	beq.n	88aa <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
    888c:	4b0a      	ldr	r3, [pc, #40]	; (88b8 <usbdc_start+0x48>)
    888e:	687a      	ldr	r2, [r7, #4]
    8890:	601a      	str	r2, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    8892:	687b      	ldr	r3, [r7, #4]
    8894:	681b      	ldr	r3, [r3, #0]
    8896:	79da      	ldrb	r2, [r3, #7]
    8898:	4b07      	ldr	r3, [pc, #28]	; (88b8 <usbdc_start+0x48>)
    889a:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    889c:	4b06      	ldr	r3, [pc, #24]	; (88b8 <usbdc_start+0x48>)
    889e:	2201      	movs	r2, #1
    88a0:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    88a2:	4b06      	ldr	r3, [pc, #24]	; (88bc <usbdc_start+0x4c>)
    88a4:	4798      	blx	r3
	return ERR_NONE;
    88a6:	2300      	movs	r3, #0
    88a8:	e001      	b.n	88ae <usbdc_start+0x3e>
		return ERR_BAD_DATA;
    88aa:	2309      	movs	r3, #9
    88ac:	425b      	negs	r3, r3
}
    88ae:	0018      	movs	r0, r3
    88b0:	46bd      	mov	sp, r7
    88b2:	b002      	add	sp, #8
    88b4:	bd80      	pop	{r7, pc}
    88b6:	46c0      	nop			; (mov r8, r8)
    88b8:	20001200 	.word	0x20001200
    88bc:	000025dd 	.word	0x000025dd

000088c0 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    88c0:	b580      	push	{r7, lr}
    88c2:	af00      	add	r7, sp, #0
	usb_d_attach();
    88c4:	4b02      	ldr	r3, [pc, #8]	; (88d0 <usbdc_attach+0x10>)
    88c6:	4798      	blx	r3
}
    88c8:	46c0      	nop			; (mov r8, r8)
    88ca:	46bd      	mov	sp, r7
    88cc:	bd80      	pop	{r7, pc}
    88ce:	46c0      	nop			; (mov r8, r8)
    88d0:	000025f1 	.word	0x000025f1

000088d4 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
    88d4:	b580      	push	{r7, lr}
    88d6:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
    88d8:	4b02      	ldr	r3, [pc, #8]	; (88e4 <usbdc_get_ctrl_buffer+0x10>)
    88da:	695b      	ldr	r3, [r3, #20]
}
    88dc:	0018      	movs	r0, r3
    88de:	46bd      	mov	sp, r7
    88e0:	bd80      	pop	{r7, pc}
    88e2:	46c0      	nop			; (mov r8, r8)
    88e4:	20001200 	.word	0x20001200

000088e8 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
    88e8:	b580      	push	{r7, lr}
    88ea:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
    88ec:	4b06      	ldr	r3, [pc, #24]	; (8908 <usbdc_get_state+0x20>)
    88ee:	7e9b      	ldrb	r3, [r3, #26]
    88f0:	001a      	movs	r2, r3
    88f2:	2310      	movs	r3, #16
    88f4:	4013      	ands	r3, r2
    88f6:	d001      	beq.n	88fc <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
    88f8:	2310      	movs	r3, #16
    88fa:	e001      	b.n	8900 <usbdc_get_state+0x18>
	}
	return usbdc.state;
    88fc:	4b02      	ldr	r3, [pc, #8]	; (8908 <usbdc_get_state+0x20>)
    88fe:	7e9b      	ldrb	r3, [r3, #26]
}
    8900:	0018      	movs	r0, r3
    8902:	46bd      	mov	sp, r7
    8904:	bd80      	pop	{r7, pc}
    8906:	46c0      	nop			; (mov r8, r8)
    8908:	20001200 	.word	0x20001200

0000890c <usb_get_u16>:
{
    890c:	b580      	push	{r7, lr}
    890e:	b082      	sub	sp, #8
    8910:	af00      	add	r7, sp, #0
    8912:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    8914:	687b      	ldr	r3, [r7, #4]
    8916:	781b      	ldrb	r3, [r3, #0]
    8918:	b29a      	uxth	r2, r3
    891a:	687b      	ldr	r3, [r7, #4]
    891c:	3301      	adds	r3, #1
    891e:	781b      	ldrb	r3, [r3, #0]
    8920:	b29b      	uxth	r3, r3
    8922:	021b      	lsls	r3, r3, #8
    8924:	b29b      	uxth	r3, r3
    8926:	18d3      	adds	r3, r2, r3
    8928:	b29b      	uxth	r3, r3
}
    892a:	0018      	movs	r0, r3
    892c:	46bd      	mov	sp, r7
    892e:	b002      	add	sp, #8
    8930:	bd80      	pop	{r7, pc}

00008932 <usb_desc_len>:
{
    8932:	b580      	push	{r7, lr}
    8934:	b082      	sub	sp, #8
    8936:	af00      	add	r7, sp, #0
    8938:	6078      	str	r0, [r7, #4]
	return desc[0];
    893a:	687b      	ldr	r3, [r7, #4]
    893c:	781b      	ldrb	r3, [r3, #0]
}
    893e:	0018      	movs	r0, r3
    8940:	46bd      	mov	sp, r7
    8942:	b002      	add	sp, #8
    8944:	bd80      	pop	{r7, pc}

00008946 <usb_desc_type>:
{
    8946:	b580      	push	{r7, lr}
    8948:	b082      	sub	sp, #8
    894a:	af00      	add	r7, sp, #0
    894c:	6078      	str	r0, [r7, #4]
	return desc[1];
    894e:	687b      	ldr	r3, [r7, #4]
    8950:	3301      	adds	r3, #1
    8952:	781b      	ldrb	r3, [r3, #0]
}
    8954:	0018      	movs	r0, r3
    8956:	46bd      	mov	sp, r7
    8958:	b002      	add	sp, #8
    895a:	bd80      	pop	{r7, pc}

0000895c <usb_desc_next>:
{
    895c:	b580      	push	{r7, lr}
    895e:	b082      	sub	sp, #8
    8960:	af00      	add	r7, sp, #0
    8962:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    8964:	687b      	ldr	r3, [r7, #4]
    8966:	0018      	movs	r0, r3
    8968:	4b04      	ldr	r3, [pc, #16]	; (897c <usb_desc_next+0x20>)
    896a:	4798      	blx	r3
    896c:	0003      	movs	r3, r0
    896e:	001a      	movs	r2, r3
    8970:	687b      	ldr	r3, [r7, #4]
    8972:	189b      	adds	r3, r3, r2
}
    8974:	0018      	movs	r0, r3
    8976:	46bd      	mov	sp, r7
    8978:	b002      	add	sp, #8
    897a:	bd80      	pop	{r7, pc}
    897c:	00008933 	.word	0x00008933

00008980 <usb_cfg_desc_total_len>:
{
    8980:	b580      	push	{r7, lr}
    8982:	b082      	sub	sp, #8
    8984:	af00      	add	r7, sp, #0
    8986:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    8988:	687b      	ldr	r3, [r7, #4]
    898a:	3302      	adds	r3, #2
    898c:	0018      	movs	r0, r3
    898e:	4b03      	ldr	r3, [pc, #12]	; (899c <usb_cfg_desc_total_len+0x1c>)
    8990:	4798      	blx	r3
    8992:	0003      	movs	r3, r0
}
    8994:	0018      	movs	r0, r3
    8996:	46bd      	mov	sp, r7
    8998:	b002      	add	sp, #8
    899a:	bd80      	pop	{r7, pc}
    899c:	0000890d 	.word	0x0000890d

000089a0 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
    89a0:	b580      	push	{r7, lr}
    89a2:	b082      	sub	sp, #8
    89a4:	af00      	add	r7, sp, #0
    89a6:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    89a8:	687b      	ldr	r3, [r7, #4]
    89aa:	0018      	movs	r0, r3
    89ac:	4b04      	ldr	r3, [pc, #16]	; (89c0 <usb_cfg_desc_next+0x20>)
    89ae:	4798      	blx	r3
    89b0:	0003      	movs	r3, r0
    89b2:	001a      	movs	r2, r3
    89b4:	687b      	ldr	r3, [r7, #4]
    89b6:	189b      	adds	r3, r3, r2
}
    89b8:	0018      	movs	r0, r3
    89ba:	46bd      	mov	sp, r7
    89bc:	b002      	add	sp, #8
    89be:	bd80      	pop	{r7, pc}
    89c0:	00008981 	.word	0x00008981

000089c4 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    89c4:	b580      	push	{r7, lr}
    89c6:	b084      	sub	sp, #16
    89c8:	af00      	add	r7, sp, #0
    89ca:	60f8      	str	r0, [r7, #12]
    89cc:	60b9      	str	r1, [r7, #8]
    89ce:	1dfb      	adds	r3, r7, #7
    89d0:	701a      	strb	r2, [r3, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    89d2:	e01a      	b.n	8a0a <usb_find_desc+0x46>
		_desc_len_check();
    89d4:	68fb      	ldr	r3, [r7, #12]
    89d6:	0018      	movs	r0, r3
    89d8:	4b10      	ldr	r3, [pc, #64]	; (8a1c <usb_find_desc+0x58>)
    89da:	4798      	blx	r3
    89dc:	0003      	movs	r3, r0
    89de:	2b01      	cmp	r3, #1
    89e0:	d801      	bhi.n	89e6 <usb_find_desc+0x22>
    89e2:	2300      	movs	r3, #0
    89e4:	e016      	b.n	8a14 <usb_find_desc+0x50>
		if (type == usb_desc_type(desc)) {
    89e6:	68fb      	ldr	r3, [r7, #12]
    89e8:	0018      	movs	r0, r3
    89ea:	4b0d      	ldr	r3, [pc, #52]	; (8a20 <usb_find_desc+0x5c>)
    89ec:	4798      	blx	r3
    89ee:	0003      	movs	r3, r0
    89f0:	001a      	movs	r2, r3
    89f2:	1dfb      	adds	r3, r7, #7
    89f4:	781b      	ldrb	r3, [r3, #0]
    89f6:	4293      	cmp	r3, r2
    89f8:	d101      	bne.n	89fe <usb_find_desc+0x3a>
			return desc;
    89fa:	68fb      	ldr	r3, [r7, #12]
    89fc:	e00a      	b.n	8a14 <usb_find_desc+0x50>
		}
		desc = usb_desc_next(desc);
    89fe:	68fb      	ldr	r3, [r7, #12]
    8a00:	0018      	movs	r0, r3
    8a02:	4b08      	ldr	r3, [pc, #32]	; (8a24 <usb_find_desc+0x60>)
    8a04:	4798      	blx	r3
    8a06:	0003      	movs	r3, r0
    8a08:	60fb      	str	r3, [r7, #12]
	while (desc < eof) {
    8a0a:	68fa      	ldr	r2, [r7, #12]
    8a0c:	68bb      	ldr	r3, [r7, #8]
    8a0e:	429a      	cmp	r2, r3
    8a10:	d3e0      	bcc.n	89d4 <usb_find_desc+0x10>
	}
	return NULL;
    8a12:	2300      	movs	r3, #0
}
    8a14:	0018      	movs	r0, r3
    8a16:	46bd      	mov	sp, r7
    8a18:	b004      	add	sp, #16
    8a1a:	bd80      	pop	{r7, pc}
    8a1c:	00008933 	.word	0x00008933
    8a20:	00008947 	.word	0x00008947
    8a24:	0000895d 	.word	0x0000895d

00008a28 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
    8a28:	b580      	push	{r7, lr}
    8a2a:	b082      	sub	sp, #8
    8a2c:	af00      	add	r7, sp, #0
    8a2e:	6078      	str	r0, [r7, #4]
    8a30:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    8a32:	e01e      	b.n	8a72 <usb_find_ep_desc+0x4a>
		_desc_len_check();
    8a34:	687b      	ldr	r3, [r7, #4]
    8a36:	0018      	movs	r0, r3
    8a38:	4b13      	ldr	r3, [pc, #76]	; (8a88 <usb_find_ep_desc+0x60>)
    8a3a:	4798      	blx	r3
    8a3c:	0003      	movs	r3, r0
    8a3e:	2b01      	cmp	r3, #1
    8a40:	d801      	bhi.n	8a46 <usb_find_ep_desc+0x1e>
    8a42:	2300      	movs	r3, #0
    8a44:	e01c      	b.n	8a80 <usb_find_ep_desc+0x58>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    8a46:	687b      	ldr	r3, [r7, #4]
    8a48:	0018      	movs	r0, r3
    8a4a:	4b10      	ldr	r3, [pc, #64]	; (8a8c <usb_find_ep_desc+0x64>)
    8a4c:	4798      	blx	r3
    8a4e:	0003      	movs	r3, r0
    8a50:	2b04      	cmp	r3, #4
    8a52:	d013      	beq.n	8a7c <usb_find_ep_desc+0x54>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    8a54:	687b      	ldr	r3, [r7, #4]
    8a56:	0018      	movs	r0, r3
    8a58:	4b0c      	ldr	r3, [pc, #48]	; (8a8c <usb_find_ep_desc+0x64>)
    8a5a:	4798      	blx	r3
    8a5c:	0003      	movs	r3, r0
    8a5e:	2b05      	cmp	r3, #5
    8a60:	d101      	bne.n	8a66 <usb_find_ep_desc+0x3e>
			return desc;
    8a62:	687b      	ldr	r3, [r7, #4]
    8a64:	e00c      	b.n	8a80 <usb_find_ep_desc+0x58>
		}
		desc = usb_desc_next(desc);
    8a66:	687b      	ldr	r3, [r7, #4]
    8a68:	0018      	movs	r0, r3
    8a6a:	4b09      	ldr	r3, [pc, #36]	; (8a90 <usb_find_ep_desc+0x68>)
    8a6c:	4798      	blx	r3
    8a6e:	0003      	movs	r3, r0
    8a70:	607b      	str	r3, [r7, #4]
	while (desc < eof) {
    8a72:	687a      	ldr	r2, [r7, #4]
    8a74:	683b      	ldr	r3, [r7, #0]
    8a76:	429a      	cmp	r2, r3
    8a78:	d3dc      	bcc.n	8a34 <usb_find_ep_desc+0xc>
    8a7a:	e000      	b.n	8a7e <usb_find_ep_desc+0x56>
			break;
    8a7c:	46c0      	nop			; (mov r8, r8)
	}
	return NULL;
    8a7e:	2300      	movs	r3, #0
}
    8a80:	0018      	movs	r0, r3
    8a82:	46bd      	mov	sp, r7
    8a84:	b002      	add	sp, #8
    8a86:	bd80      	pop	{r7, pc}
    8a88:	00008933 	.word	0x00008933
    8a8c:	00008947 	.word	0x00008947
    8a90:	0000895d 	.word	0x0000895d

00008a94 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    8a94:	b580      	push	{r7, lr}
    8a96:	b084      	sub	sp, #16
    8a98:	af00      	add	r7, sp, #0
    8a9a:	60f8      	str	r0, [r7, #12]
    8a9c:	60b9      	str	r1, [r7, #8]
    8a9e:	1dfb      	adds	r3, r7, #7
    8aa0:	701a      	strb	r2, [r3, #0]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    8aa2:	68b9      	ldr	r1, [r7, #8]
    8aa4:	68fb      	ldr	r3, [r7, #12]
    8aa6:	2202      	movs	r2, #2
    8aa8:	0018      	movs	r0, r3
    8aaa:	4b18      	ldr	r3, [pc, #96]	; (8b0c <usb_find_cfg_desc+0x78>)
    8aac:	4798      	blx	r3
    8aae:	0003      	movs	r3, r0
    8ab0:	60fb      	str	r3, [r7, #12]
	if (!desc) {
    8ab2:	68fb      	ldr	r3, [r7, #12]
    8ab4:	2b00      	cmp	r3, #0
    8ab6:	d11e      	bne.n	8af6 <usb_find_cfg_desc+0x62>
		return NULL;
    8ab8:	2300      	movs	r3, #0
    8aba:	e023      	b.n	8b04 <usb_find_cfg_desc+0x70>
	}
	while (desc < eof) {
		_desc_len_check();
    8abc:	68fb      	ldr	r3, [r7, #12]
    8abe:	0018      	movs	r0, r3
    8ac0:	4b13      	ldr	r3, [pc, #76]	; (8b10 <usb_find_cfg_desc+0x7c>)
    8ac2:	4798      	blx	r3
    8ac4:	0003      	movs	r3, r0
    8ac6:	2b01      	cmp	r3, #1
    8ac8:	d801      	bhi.n	8ace <usb_find_cfg_desc+0x3a>
    8aca:	2300      	movs	r3, #0
    8acc:	e01a      	b.n	8b04 <usb_find_cfg_desc+0x70>
		if (desc[1] != USB_DT_CONFIG) {
    8ace:	68fb      	ldr	r3, [r7, #12]
    8ad0:	3301      	adds	r3, #1
    8ad2:	781b      	ldrb	r3, [r3, #0]
    8ad4:	2b02      	cmp	r3, #2
    8ad6:	d113      	bne.n	8b00 <usb_find_cfg_desc+0x6c>
			break;
		}
		if (desc[5] == cfg_value) {
    8ad8:	68fb      	ldr	r3, [r7, #12]
    8ada:	3305      	adds	r3, #5
    8adc:	781b      	ldrb	r3, [r3, #0]
    8ade:	1dfa      	adds	r2, r7, #7
    8ae0:	7812      	ldrb	r2, [r2, #0]
    8ae2:	429a      	cmp	r2, r3
    8ae4:	d101      	bne.n	8aea <usb_find_cfg_desc+0x56>
			return desc;
    8ae6:	68fb      	ldr	r3, [r7, #12]
    8ae8:	e00c      	b.n	8b04 <usb_find_cfg_desc+0x70>
		}
		desc = usb_cfg_desc_next(desc);
    8aea:	68fb      	ldr	r3, [r7, #12]
    8aec:	0018      	movs	r0, r3
    8aee:	4b09      	ldr	r3, [pc, #36]	; (8b14 <usb_find_cfg_desc+0x80>)
    8af0:	4798      	blx	r3
    8af2:	0003      	movs	r3, r0
    8af4:	60fb      	str	r3, [r7, #12]
	while (desc < eof) {
    8af6:	68fa      	ldr	r2, [r7, #12]
    8af8:	68bb      	ldr	r3, [r7, #8]
    8afa:	429a      	cmp	r2, r3
    8afc:	d3de      	bcc.n	8abc <usb_find_cfg_desc+0x28>
    8afe:	e000      	b.n	8b02 <usb_find_cfg_desc+0x6e>
			break;
    8b00:	46c0      	nop			; (mov r8, r8)
	}
	return NULL;
    8b02:	2300      	movs	r3, #0
}
    8b04:	0018      	movs	r0, r3
    8b06:	46bd      	mov	sp, r7
    8b08:	b004      	add	sp, #16
    8b0a:	bd80      	pop	{r7, pc}
    8b0c:	000089c5 	.word	0x000089c5
    8b10:	00008933 	.word	0x00008933
    8b14:	000089a1 	.word	0x000089a1

00008b18 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    8b18:	b580      	push	{r7, lr}
    8b1a:	b086      	sub	sp, #24
    8b1c:	af00      	add	r7, sp, #0
    8b1e:	60f8      	str	r0, [r7, #12]
    8b20:	60b9      	str	r1, [r7, #8]
    8b22:	1dfb      	adds	r3, r7, #7
    8b24:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    8b26:	2317      	movs	r3, #23
    8b28:	18fb      	adds	r3, r7, r3
    8b2a:	2200      	movs	r2, #0
    8b2c:	701a      	strb	r2, [r3, #0]
    8b2e:	e02c      	b.n	8b8a <usb_find_str_desc+0x72>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    8b30:	68b9      	ldr	r1, [r7, #8]
    8b32:	68fb      	ldr	r3, [r7, #12]
    8b34:	2203      	movs	r2, #3
    8b36:	0018      	movs	r0, r3
    8b38:	4b18      	ldr	r3, [pc, #96]	; (8b9c <usb_find_str_desc+0x84>)
    8b3a:	4798      	blx	r3
    8b3c:	0003      	movs	r3, r0
    8b3e:	60fb      	str	r3, [r7, #12]
		if (desc) {
    8b40:	68fb      	ldr	r3, [r7, #12]
    8b42:	2b00      	cmp	r3, #0
    8b44:	d01f      	beq.n	8b86 <usb_find_str_desc+0x6e>
			_desc_len_check();
    8b46:	68fb      	ldr	r3, [r7, #12]
    8b48:	0018      	movs	r0, r3
    8b4a:	4b15      	ldr	r3, [pc, #84]	; (8ba0 <usb_find_str_desc+0x88>)
    8b4c:	4798      	blx	r3
    8b4e:	0003      	movs	r3, r0
    8b50:	2b01      	cmp	r3, #1
    8b52:	d801      	bhi.n	8b58 <usb_find_str_desc+0x40>
    8b54:	2300      	movs	r3, #0
    8b56:	e01d      	b.n	8b94 <usb_find_str_desc+0x7c>
			if (i == str_index) {
    8b58:	2317      	movs	r3, #23
    8b5a:	18fa      	adds	r2, r7, r3
    8b5c:	1dfb      	adds	r3, r7, #7
    8b5e:	7812      	ldrb	r2, [r2, #0]
    8b60:	781b      	ldrb	r3, [r3, #0]
    8b62:	429a      	cmp	r2, r3
    8b64:	d101      	bne.n	8b6a <usb_find_str_desc+0x52>
				return desc;
    8b66:	68fb      	ldr	r3, [r7, #12]
    8b68:	e014      	b.n	8b94 <usb_find_str_desc+0x7c>
			}
			i++;
    8b6a:	2317      	movs	r3, #23
    8b6c:	18fb      	adds	r3, r7, r3
    8b6e:	781a      	ldrb	r2, [r3, #0]
    8b70:	2317      	movs	r3, #23
    8b72:	18fb      	adds	r3, r7, r3
    8b74:	3201      	adds	r2, #1
    8b76:	701a      	strb	r2, [r3, #0]
			desc = usb_desc_next(desc);
    8b78:	68fb      	ldr	r3, [r7, #12]
    8b7a:	0018      	movs	r0, r3
    8b7c:	4b09      	ldr	r3, [pc, #36]	; (8ba4 <usb_find_str_desc+0x8c>)
    8b7e:	4798      	blx	r3
    8b80:	0003      	movs	r3, r0
    8b82:	60fb      	str	r3, [r7, #12]
    8b84:	e001      	b.n	8b8a <usb_find_str_desc+0x72>
		} else {
			return NULL;
    8b86:	2300      	movs	r3, #0
    8b88:	e004      	b.n	8b94 <usb_find_str_desc+0x7c>
	for (i = 0; desc < eof;) {
    8b8a:	68fa      	ldr	r2, [r7, #12]
    8b8c:	68bb      	ldr	r3, [r7, #8]
    8b8e:	429a      	cmp	r2, r3
    8b90:	d3ce      	bcc.n	8b30 <usb_find_str_desc+0x18>
		}
	}
	return NULL;
    8b92:	2300      	movs	r3, #0
}
    8b94:	0018      	movs	r0, r3
    8b96:	46bd      	mov	sp, r7
    8b98:	b006      	add	sp, #24
    8b9a:	bd80      	pop	{r7, pc}
    8b9c:	000089c5 	.word	0x000089c5
    8ba0:	00008933 	.word	0x00008933
    8ba4:	0000895d 	.word	0x0000895d

00008ba8 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    8ba8:	b580      	push	{r7, lr}
    8baa:	b084      	sub	sp, #16
    8bac:	af00      	add	r7, sp, #0
    8bae:	6078      	str	r0, [r7, #4]
    8bb0:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    8bb2:	687b      	ldr	r3, [r7, #4]
    8bb4:	681b      	ldr	r3, [r3, #0]
    8bb6:	60fb      	str	r3, [r7, #12]
    8bb8:	e008      	b.n	8bcc <is_list_element+0x24>
		if (it == element) {
    8bba:	68fa      	ldr	r2, [r7, #12]
    8bbc:	683b      	ldr	r3, [r7, #0]
    8bbe:	429a      	cmp	r2, r3
    8bc0:	d101      	bne.n	8bc6 <is_list_element+0x1e>
			return true;
    8bc2:	2301      	movs	r3, #1
    8bc4:	e006      	b.n	8bd4 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    8bc6:	68fb      	ldr	r3, [r7, #12]
    8bc8:	681b      	ldr	r3, [r3, #0]
    8bca:	60fb      	str	r3, [r7, #12]
    8bcc:	68fb      	ldr	r3, [r7, #12]
    8bce:	2b00      	cmp	r3, #0
    8bd0:	d1f3      	bne.n	8bba <is_list_element+0x12>
		}
	}

	return false;
    8bd2:	2300      	movs	r3, #0
}
    8bd4:	0018      	movs	r0, r3
    8bd6:	46bd      	mov	sp, r7
    8bd8:	b004      	add	sp, #16
    8bda:	bd80      	pop	{r7, pc}

00008bdc <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    8bdc:	b580      	push	{r7, lr}
    8bde:	b084      	sub	sp, #16
    8be0:	af00      	add	r7, sp, #0
    8be2:	6078      	str	r0, [r7, #4]
    8be4:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    8be6:	687b      	ldr	r3, [r7, #4]
    8be8:	681b      	ldr	r3, [r3, #0]
    8bea:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    8bec:	683a      	ldr	r2, [r7, #0]
    8bee:	687b      	ldr	r3, [r7, #4]
    8bf0:	0011      	movs	r1, r2
    8bf2:	0018      	movs	r0, r3
    8bf4:	4b16      	ldr	r3, [pc, #88]	; (8c50 <list_insert_at_end+0x74>)
    8bf6:	4798      	blx	r3
    8bf8:	0003      	movs	r3, r0
    8bfa:	1e5a      	subs	r2, r3, #1
    8bfc:	4193      	sbcs	r3, r2
    8bfe:	b2db      	uxtb	r3, r3
    8c00:	2201      	movs	r2, #1
    8c02:	4053      	eors	r3, r2
    8c04:	b2db      	uxtb	r3, r3
    8c06:	1c1a      	adds	r2, r3, #0
    8c08:	2301      	movs	r3, #1
    8c0a:	4013      	ands	r3, r2
    8c0c:	b2db      	uxtb	r3, r3
    8c0e:	4911      	ldr	r1, [pc, #68]	; (8c54 <list_insert_at_end+0x78>)
    8c10:	224f      	movs	r2, #79	; 0x4f
    8c12:	0018      	movs	r0, r3
    8c14:	4b10      	ldr	r3, [pc, #64]	; (8c58 <list_insert_at_end+0x7c>)
    8c16:	4798      	blx	r3

	if (!list->head) {
    8c18:	687b      	ldr	r3, [r7, #4]
    8c1a:	681b      	ldr	r3, [r3, #0]
    8c1c:	2b00      	cmp	r3, #0
    8c1e:	d109      	bne.n	8c34 <list_insert_at_end+0x58>
		list->head                             = (struct list_element *)element;
    8c20:	687b      	ldr	r3, [r7, #4]
    8c22:	683a      	ldr	r2, [r7, #0]
    8c24:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    8c26:	683b      	ldr	r3, [r7, #0]
    8c28:	2200      	movs	r2, #0
    8c2a:	601a      	str	r2, [r3, #0]
		return;
    8c2c:	e00c      	b.n	8c48 <list_insert_at_end+0x6c>
	}

	while (it->next) {
		it = it->next;
    8c2e:	68fb      	ldr	r3, [r7, #12]
    8c30:	681b      	ldr	r3, [r3, #0]
    8c32:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    8c34:	68fb      	ldr	r3, [r7, #12]
    8c36:	681b      	ldr	r3, [r3, #0]
    8c38:	2b00      	cmp	r3, #0
    8c3a:	d1f8      	bne.n	8c2e <list_insert_at_end+0x52>
	}
	it->next                               = (struct list_element *)element;
    8c3c:	68fb      	ldr	r3, [r7, #12]
    8c3e:	683a      	ldr	r2, [r7, #0]
    8c40:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    8c42:	683b      	ldr	r3, [r7, #0]
    8c44:	2200      	movs	r2, #0
    8c46:	601a      	str	r2, [r3, #0]
}
    8c48:	46bd      	mov	sp, r7
    8c4a:	b004      	add	sp, #16
    8c4c:	bd80      	pop	{r7, pc}
    8c4e:	46c0      	nop			; (mov r8, r8)
    8c50:	00008ba9 	.word	0x00008ba9
    8c54:	0001236c 	.word	0x0001236c
    8c58:	00002b25 	.word	0x00002b25

00008c5c <__aeabi_atexit>:
    8c5c:	000b      	movs	r3, r1
    8c5e:	b510      	push	{r4, lr}
    8c60:	0001      	movs	r1, r0
    8c62:	0018      	movs	r0, r3
    8c64:	f004 fa64 	bl	d130 <__cxa_atexit>
    8c68:	bd10      	pop	{r4, pc}
    8c6a:	46c0      	nop			; (mov r8, r8)

00008c6c <floor>:
    8c6c:	4a45      	ldr	r2, [pc, #276]	; (8d84 <floor+0x118>)
    8c6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8c70:	4657      	mov	r7, sl
    8c72:	4692      	mov	sl, r2
    8c74:	004b      	lsls	r3, r1, #1
    8c76:	0d5b      	lsrs	r3, r3, #21
    8c78:	449a      	add	sl, r3
    8c7a:	464e      	mov	r6, r9
    8c7c:	4645      	mov	r5, r8
    8c7e:	46de      	mov	lr, fp
    8c80:	4652      	mov	r2, sl
    8c82:	b5e0      	push	{r5, r6, r7, lr}
    8c84:	000c      	movs	r4, r1
    8c86:	0005      	movs	r5, r0
    8c88:	000e      	movs	r6, r1
    8c8a:	4689      	mov	r9, r1
    8c8c:	0007      	movs	r7, r0
    8c8e:	2a13      	cmp	r2, #19
    8c90:	dc22      	bgt.n	8cd8 <floor+0x6c>
    8c92:	2a00      	cmp	r2, #0
    8c94:	db47      	blt.n	8d26 <floor+0xba>
    8c96:	4652      	mov	r2, sl
    8c98:	4b3b      	ldr	r3, [pc, #236]	; (8d88 <floor+0x11c>)
    8c9a:	4113      	asrs	r3, r2
    8c9c:	4698      	mov	r8, r3
    8c9e:	000b      	movs	r3, r1
    8ca0:	4642      	mov	r2, r8
    8ca2:	4013      	ands	r3, r2
    8ca4:	4303      	orrs	r3, r0
    8ca6:	d011      	beq.n	8ccc <floor+0x60>
    8ca8:	4a38      	ldr	r2, [pc, #224]	; (8d8c <floor+0x120>)
    8caa:	4b39      	ldr	r3, [pc, #228]	; (8d90 <floor+0x124>)
    8cac:	f002 fc1c 	bl	b4e8 <__aeabi_dadd>
    8cb0:	2200      	movs	r2, #0
    8cb2:	2300      	movs	r3, #0
    8cb4:	f001 fd86 	bl	a7c4 <__aeabi_dcmpgt>
    8cb8:	2800      	cmp	r0, #0
    8cba:	d005      	beq.n	8cc8 <floor+0x5c>
    8cbc:	2c00      	cmp	r4, #0
    8cbe:	db41      	blt.n	8d44 <floor+0xd8>
    8cc0:	464e      	mov	r6, r9
    8cc2:	4643      	mov	r3, r8
    8cc4:	2700      	movs	r7, #0
    8cc6:	439e      	bics	r6, r3
    8cc8:	0038      	movs	r0, r7
    8cca:	0031      	movs	r1, r6
    8ccc:	bc3c      	pop	{r2, r3, r4, r5}
    8cce:	4690      	mov	r8, r2
    8cd0:	4699      	mov	r9, r3
    8cd2:	46a2      	mov	sl, r4
    8cd4:	46ab      	mov	fp, r5
    8cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8cd8:	4652      	mov	r2, sl
    8cda:	2a33      	cmp	r2, #51	; 0x33
    8cdc:	dd08      	ble.n	8cf0 <floor+0x84>
    8cde:	2380      	movs	r3, #128	; 0x80
    8ce0:	00db      	lsls	r3, r3, #3
    8ce2:	459a      	cmp	sl, r3
    8ce4:	d1f2      	bne.n	8ccc <floor+0x60>
    8ce6:	0002      	movs	r2, r0
    8ce8:	000b      	movs	r3, r1
    8cea:	f002 fbfd 	bl	b4e8 <__aeabi_dadd>
    8cee:	e7ed      	b.n	8ccc <floor+0x60>
    8cf0:	4a28      	ldr	r2, [pc, #160]	; (8d94 <floor+0x128>)
    8cf2:	4694      	mov	ip, r2
    8cf4:	2201      	movs	r2, #1
    8cf6:	4463      	add	r3, ip
    8cf8:	4252      	negs	r2, r2
    8cfa:	40da      	lsrs	r2, r3
    8cfc:	4693      	mov	fp, r2
    8cfe:	4202      	tst	r2, r0
    8d00:	d0e4      	beq.n	8ccc <floor+0x60>
    8d02:	4a22      	ldr	r2, [pc, #136]	; (8d8c <floor+0x120>)
    8d04:	4b22      	ldr	r3, [pc, #136]	; (8d90 <floor+0x124>)
    8d06:	f002 fbef 	bl	b4e8 <__aeabi_dadd>
    8d0a:	2200      	movs	r2, #0
    8d0c:	2300      	movs	r3, #0
    8d0e:	f001 fd59 	bl	a7c4 <__aeabi_dcmpgt>
    8d12:	2800      	cmp	r0, #0
    8d14:	d0d8      	beq.n	8cc8 <floor+0x5c>
    8d16:	2c00      	cmp	r4, #0
    8d18:	db1a      	blt.n	8d50 <floor+0xe4>
    8d1a:	465b      	mov	r3, fp
    8d1c:	464e      	mov	r6, r9
    8d1e:	439f      	bics	r7, r3
    8d20:	0038      	movs	r0, r7
    8d22:	0031      	movs	r1, r6
    8d24:	e7d2      	b.n	8ccc <floor+0x60>
    8d26:	4a19      	ldr	r2, [pc, #100]	; (8d8c <floor+0x120>)
    8d28:	4b19      	ldr	r3, [pc, #100]	; (8d90 <floor+0x124>)
    8d2a:	f002 fbdd 	bl	b4e8 <__aeabi_dadd>
    8d2e:	2200      	movs	r2, #0
    8d30:	2300      	movs	r3, #0
    8d32:	f001 fd47 	bl	a7c4 <__aeabi_dcmpgt>
    8d36:	2800      	cmp	r0, #0
    8d38:	d0c6      	beq.n	8cc8 <floor+0x5c>
    8d3a:	2c00      	cmp	r4, #0
    8d3c:	db16      	blt.n	8d6c <floor+0x100>
    8d3e:	2700      	movs	r7, #0
    8d40:	2600      	movs	r6, #0
    8d42:	e7c1      	b.n	8cc8 <floor+0x5c>
    8d44:	2380      	movs	r3, #128	; 0x80
    8d46:	4652      	mov	r2, sl
    8d48:	035b      	lsls	r3, r3, #13
    8d4a:	4113      	asrs	r3, r2
    8d4c:	4499      	add	r9, r3
    8d4e:	e7b7      	b.n	8cc0 <floor+0x54>
    8d50:	4653      	mov	r3, sl
    8d52:	2b14      	cmp	r3, #20
    8d54:	d012      	beq.n	8d7c <floor+0x110>
    8d56:	2334      	movs	r3, #52	; 0x34
    8d58:	4652      	mov	r2, sl
    8d5a:	2701      	movs	r7, #1
    8d5c:	1a9b      	subs	r3, r3, r2
    8d5e:	409f      	lsls	r7, r3
    8d60:	197f      	adds	r7, r7, r5
    8d62:	42af      	cmp	r7, r5
    8d64:	419b      	sbcs	r3, r3
    8d66:	425b      	negs	r3, r3
    8d68:	4499      	add	r9, r3
    8d6a:	e7d6      	b.n	8d1a <floor+0xae>
    8d6c:	0064      	lsls	r4, r4, #1
    8d6e:	0864      	lsrs	r4, r4, #1
    8d70:	4325      	orrs	r5, r4
    8d72:	2700      	movs	r7, #0
    8d74:	2d00      	cmp	r5, #0
    8d76:	d0a7      	beq.n	8cc8 <floor+0x5c>
    8d78:	4e07      	ldr	r6, [pc, #28]	; (8d98 <floor+0x12c>)
    8d7a:	e7a5      	b.n	8cc8 <floor+0x5c>
    8d7c:	3b13      	subs	r3, #19
    8d7e:	469c      	mov	ip, r3
    8d80:	44e1      	add	r9, ip
    8d82:	e7ca      	b.n	8d1a <floor+0xae>
    8d84:	fffffc01 	.word	0xfffffc01
    8d88:	000fffff 	.word	0x000fffff
    8d8c:	8800759c 	.word	0x8800759c
    8d90:	7e37e43c 	.word	0x7e37e43c
    8d94:	fffffbed 	.word	0xfffffbed
    8d98:	bff00000 	.word	0xbff00000

00008d9c <log>:
    8d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    8d9e:	46c6      	mov	lr, r8
    8da0:	b500      	push	{lr}
    8da2:	b08c      	sub	sp, #48	; 0x30
    8da4:	0004      	movs	r4, r0
    8da6:	000d      	movs	r5, r1
    8da8:	f000 fa2c 	bl	9204 <__ieee754_log>
    8dac:	4b3a      	ldr	r3, [pc, #232]	; (8e98 <log+0xfc>)
    8dae:	0006      	movs	r6, r0
    8db0:	781b      	ldrb	r3, [r3, #0]
    8db2:	000f      	movs	r7, r1
    8db4:	b25b      	sxtb	r3, r3
    8db6:	4698      	mov	r8, r3
    8db8:	3301      	adds	r3, #1
    8dba:	d00f      	beq.n	8ddc <log+0x40>
    8dbc:	0022      	movs	r2, r4
    8dbe:	002b      	movs	r3, r5
    8dc0:	0020      	movs	r0, r4
    8dc2:	0029      	movs	r1, r5
    8dc4:	f004 f86a 	bl	ce9c <__aeabi_dcmpun>
    8dc8:	2800      	cmp	r0, #0
    8dca:	d107      	bne.n	8ddc <log+0x40>
    8dcc:	2200      	movs	r2, #0
    8dce:	2300      	movs	r3, #0
    8dd0:	0020      	movs	r0, r4
    8dd2:	0029      	movs	r1, r5
    8dd4:	f001 fcf6 	bl	a7c4 <__aeabi_dcmpgt>
    8dd8:	2800      	cmp	r0, #0
    8dda:	d005      	beq.n	8de8 <log+0x4c>
    8ddc:	0030      	movs	r0, r6
    8dde:	0039      	movs	r1, r7
    8de0:	b00c      	add	sp, #48	; 0x30
    8de2:	bc04      	pop	{r2}
    8de4:	4690      	mov	r8, r2
    8de6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8de8:	4b2c      	ldr	r3, [pc, #176]	; (8e9c <log+0x100>)
    8dea:	900a      	str	r0, [sp, #40]	; 0x28
    8dec:	9303      	str	r3, [sp, #12]
    8dee:	4643      	mov	r3, r8
    8df0:	9404      	str	r4, [sp, #16]
    8df2:	9505      	str	r5, [sp, #20]
    8df4:	9406      	str	r4, [sp, #24]
    8df6:	9507      	str	r5, [sp, #28]
    8df8:	2b00      	cmp	r3, #0
    8dfa:	d11a      	bne.n	8e32 <log+0x96>
    8dfc:	22e0      	movs	r2, #224	; 0xe0
    8dfe:	4b28      	ldr	r3, [pc, #160]	; (8ea0 <log+0x104>)
    8e00:	0612      	lsls	r2, r2, #24
    8e02:	9208      	str	r2, [sp, #32]
    8e04:	9309      	str	r3, [sp, #36]	; 0x24
    8e06:	0020      	movs	r0, r4
    8e08:	2200      	movs	r2, #0
    8e0a:	2300      	movs	r3, #0
    8e0c:	0029      	movs	r1, r5
    8e0e:	f001 fcbf 	bl	a790 <__aeabi_dcmpeq>
    8e12:	2800      	cmp	r0, #0
    8e14:	d038      	beq.n	8e88 <log+0xec>
    8e16:	2302      	movs	r3, #2
    8e18:	9302      	str	r3, [sp, #8]
    8e1a:	a802      	add	r0, sp, #8
    8e1c:	f001 fa18 	bl	a250 <matherr>
    8e20:	2800      	cmp	r0, #0
    8e22:	d017      	beq.n	8e54 <log+0xb8>
    8e24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8e26:	9301      	str	r3, [sp, #4]
    8e28:	2b00      	cmp	r3, #0
    8e2a:	d118      	bne.n	8e5e <log+0xc2>
    8e2c:	9e08      	ldr	r6, [sp, #32]
    8e2e:	9f09      	ldr	r7, [sp, #36]	; 0x24
    8e30:	e7d4      	b.n	8ddc <log+0x40>
    8e32:	2200      	movs	r2, #0
    8e34:	4b1b      	ldr	r3, [pc, #108]	; (8ea4 <log+0x108>)
    8e36:	0020      	movs	r0, r4
    8e38:	9208      	str	r2, [sp, #32]
    8e3a:	9309      	str	r3, [sp, #36]	; 0x24
    8e3c:	0029      	movs	r1, r5
    8e3e:	2200      	movs	r2, #0
    8e40:	2300      	movs	r3, #0
    8e42:	f001 fca5 	bl	a790 <__aeabi_dcmpeq>
    8e46:	2800      	cmp	r0, #0
    8e48:	d00f      	beq.n	8e6a <log+0xce>
    8e4a:	2302      	movs	r3, #2
    8e4c:	9302      	str	r3, [sp, #8]
    8e4e:	4643      	mov	r3, r8
    8e50:	2b02      	cmp	r3, #2
    8e52:	d1e2      	bne.n	8e1a <log+0x7e>
    8e54:	f004 f974 	bl	d140 <__errno>
    8e58:	2322      	movs	r3, #34	; 0x22
    8e5a:	6003      	str	r3, [r0, #0]
    8e5c:	e7e2      	b.n	8e24 <log+0x88>
    8e5e:	f004 f96f 	bl	d140 <__errno>
    8e62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8e64:	9301      	str	r3, [sp, #4]
    8e66:	6003      	str	r3, [r0, #0]
    8e68:	e7e0      	b.n	8e2c <log+0x90>
    8e6a:	2301      	movs	r3, #1
    8e6c:	9302      	str	r3, [sp, #8]
    8e6e:	4643      	mov	r3, r8
    8e70:	2b02      	cmp	r3, #2
    8e72:	d10b      	bne.n	8e8c <log+0xf0>
    8e74:	f004 f964 	bl	d140 <__errno>
    8e78:	2321      	movs	r3, #33	; 0x21
    8e7a:	6003      	str	r3, [r0, #0]
    8e7c:	480a      	ldr	r0, [pc, #40]	; (8ea8 <log+0x10c>)
    8e7e:	f001 f9e9 	bl	a254 <nan>
    8e82:	9008      	str	r0, [sp, #32]
    8e84:	9109      	str	r1, [sp, #36]	; 0x24
    8e86:	e7cd      	b.n	8e24 <log+0x88>
    8e88:	2301      	movs	r3, #1
    8e8a:	9302      	str	r3, [sp, #8]
    8e8c:	a802      	add	r0, sp, #8
    8e8e:	f001 f9df 	bl	a250 <matherr>
    8e92:	2800      	cmp	r0, #0
    8e94:	d1f2      	bne.n	8e7c <log+0xe0>
    8e96:	e7ed      	b.n	8e74 <log+0xd8>
    8e98:	20000080 	.word	0x20000080
    8e9c:	0001238c 	.word	0x0001238c
    8ea0:	c7efffff 	.word	0xc7efffff
    8ea4:	fff00000 	.word	0xfff00000
    8ea8:	0001216c 	.word	0x0001216c

00008eac <pow>:
    8eac:	b5f0      	push	{r4, r5, r6, r7, lr}
    8eae:	4657      	mov	r7, sl
    8eb0:	464e      	mov	r6, r9
    8eb2:	46de      	mov	lr, fp
    8eb4:	4645      	mov	r5, r8
    8eb6:	b5e0      	push	{r5, r6, r7, lr}
    8eb8:	b08f      	sub	sp, #60	; 0x3c
    8eba:	001d      	movs	r5, r3
    8ebc:	0006      	movs	r6, r0
    8ebe:	000f      	movs	r7, r1
    8ec0:	0014      	movs	r4, r2
    8ec2:	f000 fba1 	bl	9608 <__ieee754_pow>
    8ec6:	4bc7      	ldr	r3, [pc, #796]	; (91e4 <pow+0x338>)
    8ec8:	9000      	str	r0, [sp, #0]
    8eca:	9101      	str	r1, [sp, #4]
    8ecc:	469a      	mov	sl, r3
    8ece:	781b      	ldrb	r3, [r3, #0]
    8ed0:	b25b      	sxtb	r3, r3
    8ed2:	4699      	mov	r9, r3
    8ed4:	3301      	adds	r3, #1
    8ed6:	d03e      	beq.n	8f56 <pow+0xaa>
    8ed8:	0022      	movs	r2, r4
    8eda:	002b      	movs	r3, r5
    8edc:	0020      	movs	r0, r4
    8ede:	0029      	movs	r1, r5
    8ee0:	f003 ffdc 	bl	ce9c <__aeabi_dcmpun>
    8ee4:	4683      	mov	fp, r0
    8ee6:	2800      	cmp	r0, #0
    8ee8:	d135      	bne.n	8f56 <pow+0xaa>
    8eea:	0032      	movs	r2, r6
    8eec:	003b      	movs	r3, r7
    8eee:	0030      	movs	r0, r6
    8ef0:	0039      	movs	r1, r7
    8ef2:	f003 ffd3 	bl	ce9c <__aeabi_dcmpun>
    8ef6:	2200      	movs	r2, #0
    8ef8:	9003      	str	r0, [sp, #12]
    8efa:	2800      	cmp	r0, #0
    8efc:	d000      	beq.n	8f00 <pow+0x54>
    8efe:	e0b6      	b.n	906e <pow+0x1c2>
    8f00:	2300      	movs	r3, #0
    8f02:	0030      	movs	r0, r6
    8f04:	0039      	movs	r1, r7
    8f06:	f001 fc43 	bl	a790 <__aeabi_dcmpeq>
    8f0a:	2800      	cmp	r0, #0
    8f0c:	d02c      	beq.n	8f68 <pow+0xbc>
    8f0e:	2200      	movs	r2, #0
    8f10:	2300      	movs	r3, #0
    8f12:	0020      	movs	r0, r4
    8f14:	0029      	movs	r1, r5
    8f16:	f001 fc3b 	bl	a790 <__aeabi_dcmpeq>
    8f1a:	4683      	mov	fp, r0
    8f1c:	2800      	cmp	r0, #0
    8f1e:	d100      	bne.n	8f22 <pow+0x76>
    8f20:	e077      	b.n	9012 <pow+0x166>
    8f22:	ab04      	add	r3, sp, #16
    8f24:	4698      	mov	r8, r3
    8f26:	2301      	movs	r3, #1
    8f28:	4642      	mov	r2, r8
    8f2a:	9304      	str	r3, [sp, #16]
    8f2c:	4bae      	ldr	r3, [pc, #696]	; (91e8 <pow+0x33c>)
    8f2e:	6053      	str	r3, [r2, #4]
    8f30:	4643      	mov	r3, r8
    8f32:	9a03      	ldr	r2, [sp, #12]
    8f34:	611c      	str	r4, [r3, #16]
    8f36:	615d      	str	r5, [r3, #20]
    8f38:	621a      	str	r2, [r3, #32]
    8f3a:	609e      	str	r6, [r3, #8]
    8f3c:	60df      	str	r7, [r3, #12]
    8f3e:	4642      	mov	r2, r8
    8f40:	2300      	movs	r3, #0
    8f42:	2400      	movs	r4, #0
    8f44:	6193      	str	r3, [r2, #24]
    8f46:	61d4      	str	r4, [r2, #28]
    8f48:	464b      	mov	r3, r9
    8f4a:	2b00      	cmp	r3, #0
    8f4c:	d04d      	beq.n	8fea <pow+0x13e>
    8f4e:	2300      	movs	r3, #0
    8f50:	4ca6      	ldr	r4, [pc, #664]	; (91ec <pow+0x340>)
    8f52:	9300      	str	r3, [sp, #0]
    8f54:	9401      	str	r4, [sp, #4]
    8f56:	9800      	ldr	r0, [sp, #0]
    8f58:	9901      	ldr	r1, [sp, #4]
    8f5a:	b00f      	add	sp, #60	; 0x3c
    8f5c:	bc3c      	pop	{r2, r3, r4, r5}
    8f5e:	4690      	mov	r8, r2
    8f60:	4699      	mov	r9, r3
    8f62:	46a2      	mov	sl, r4
    8f64:	46ab      	mov	fp, r5
    8f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8f68:	9800      	ldr	r0, [sp, #0]
    8f6a:	9901      	ldr	r1, [sp, #4]
    8f6c:	f001 f966 	bl	a23c <finite>
    8f70:	4681      	mov	r9, r0
    8f72:	2800      	cmp	r0, #0
    8f74:	d100      	bne.n	8f78 <pow+0xcc>
    8f76:	e09b      	b.n	90b0 <pow+0x204>
    8f78:	9800      	ldr	r0, [sp, #0]
    8f7a:	9901      	ldr	r1, [sp, #4]
    8f7c:	2200      	movs	r2, #0
    8f7e:	2300      	movs	r3, #0
    8f80:	f001 fc06 	bl	a790 <__aeabi_dcmpeq>
    8f84:	2800      	cmp	r0, #0
    8f86:	d0e6      	beq.n	8f56 <pow+0xaa>
    8f88:	0030      	movs	r0, r6
    8f8a:	0039      	movs	r1, r7
    8f8c:	f001 f956 	bl	a23c <finite>
    8f90:	2800      	cmp	r0, #0
    8f92:	d0e0      	beq.n	8f56 <pow+0xaa>
    8f94:	0020      	movs	r0, r4
    8f96:	0029      	movs	r1, r5
    8f98:	f001 f950 	bl	a23c <finite>
    8f9c:	2800      	cmp	r0, #0
    8f9e:	d0da      	beq.n	8f56 <pow+0xaa>
    8fa0:	ab04      	add	r3, sp, #16
    8fa2:	4698      	mov	r8, r3
    8fa4:	2304      	movs	r3, #4
    8fa6:	4642      	mov	r2, r8
    8fa8:	9304      	str	r3, [sp, #16]
    8faa:	4b8f      	ldr	r3, [pc, #572]	; (91e8 <pow+0x33c>)
    8fac:	6114      	str	r4, [r2, #16]
    8fae:	6155      	str	r5, [r2, #20]
    8fb0:	6053      	str	r3, [r2, #4]
    8fb2:	2300      	movs	r3, #0
    8fb4:	2400      	movs	r4, #0
    8fb6:	6213      	str	r3, [r2, #32]
    8fb8:	2300      	movs	r3, #0
    8fba:	6193      	str	r3, [r2, #24]
    8fbc:	61d4      	str	r4, [r2, #28]
    8fbe:	4653      	mov	r3, sl
    8fc0:	781b      	ldrb	r3, [r3, #0]
    8fc2:	6096      	str	r6, [r2, #8]
    8fc4:	60d7      	str	r7, [r2, #12]
    8fc6:	b25b      	sxtb	r3, r3
    8fc8:	2b02      	cmp	r3, #2
    8fca:	d004      	beq.n	8fd6 <pow+0x12a>
    8fcc:	4640      	mov	r0, r8
    8fce:	f001 f93f 	bl	a250 <matherr>
    8fd2:	2800      	cmp	r0, #0
    8fd4:	d10e      	bne.n	8ff4 <pow+0x148>
    8fd6:	f004 f8b3 	bl	d140 <__errno>
    8fda:	2322      	movs	r3, #34	; 0x22
    8fdc:	6003      	str	r3, [r0, #0]
    8fde:	e009      	b.n	8ff4 <pow+0x148>
    8fe0:	4642      	mov	r2, r8
    8fe2:	2300      	movs	r3, #0
    8fe4:	2400      	movs	r4, #0
    8fe6:	6193      	str	r3, [r2, #24]
    8fe8:	61d4      	str	r4, [r2, #28]
    8fea:	4640      	mov	r0, r8
    8fec:	f001 f930 	bl	a250 <matherr>
    8ff0:	2800      	cmp	r0, #0
    8ff2:	d037      	beq.n	9064 <pow+0x1b8>
    8ff4:	4643      	mov	r3, r8
    8ff6:	6a1b      	ldr	r3, [r3, #32]
    8ff8:	2b00      	cmp	r3, #0
    8ffa:	d004      	beq.n	9006 <pow+0x15a>
    8ffc:	f004 f8a0 	bl	d140 <__errno>
    9000:	4643      	mov	r3, r8
    9002:	6a1b      	ldr	r3, [r3, #32]
    9004:	6003      	str	r3, [r0, #0]
    9006:	4643      	mov	r3, r8
    9008:	69dc      	ldr	r4, [r3, #28]
    900a:	699b      	ldr	r3, [r3, #24]
    900c:	9300      	str	r3, [sp, #0]
    900e:	9401      	str	r4, [sp, #4]
    9010:	e7a1      	b.n	8f56 <pow+0xaa>
    9012:	0020      	movs	r0, r4
    9014:	0029      	movs	r1, r5
    9016:	f001 f911 	bl	a23c <finite>
    901a:	2800      	cmp	r0, #0
    901c:	d09b      	beq.n	8f56 <pow+0xaa>
    901e:	2200      	movs	r2, #0
    9020:	2300      	movs	r3, #0
    9022:	0020      	movs	r0, r4
    9024:	0029      	movs	r1, r5
    9026:	f001 fbb9 	bl	a79c <__aeabi_dcmplt>
    902a:	2800      	cmp	r0, #0
    902c:	d100      	bne.n	9030 <pow+0x184>
    902e:	e792      	b.n	8f56 <pow+0xaa>
    9030:	ab04      	add	r3, sp, #16
    9032:	4698      	mov	r8, r3
    9034:	2301      	movs	r3, #1
    9036:	4642      	mov	r2, r8
    9038:	9304      	str	r3, [sp, #16]
    903a:	4b6b      	ldr	r3, [pc, #428]	; (91e8 <pow+0x33c>)
    903c:	6053      	str	r3, [r2, #4]
    903e:	4643      	mov	r3, r8
    9040:	465a      	mov	r2, fp
    9042:	609e      	str	r6, [r3, #8]
    9044:	60df      	str	r7, [r3, #12]
    9046:	621a      	str	r2, [r3, #32]
    9048:	611c      	str	r4, [r3, #16]
    904a:	615d      	str	r5, [r3, #20]
    904c:	4653      	mov	r3, sl
    904e:	781b      	ldrb	r3, [r3, #0]
    9050:	b25b      	sxtb	r3, r3
    9052:	2b00      	cmp	r3, #0
    9054:	d0c4      	beq.n	8fe0 <pow+0x134>
    9056:	2000      	movs	r0, #0
    9058:	4642      	mov	r2, r8
    905a:	4965      	ldr	r1, [pc, #404]	; (91f0 <pow+0x344>)
    905c:	6190      	str	r0, [r2, #24]
    905e:	61d1      	str	r1, [r2, #28]
    9060:	2b02      	cmp	r3, #2
    9062:	d1c2      	bne.n	8fea <pow+0x13e>
    9064:	f004 f86c 	bl	d140 <__errno>
    9068:	2321      	movs	r3, #33	; 0x21
    906a:	6003      	str	r3, [r0, #0]
    906c:	e7c2      	b.n	8ff4 <pow+0x148>
    906e:	2300      	movs	r3, #0
    9070:	0020      	movs	r0, r4
    9072:	0029      	movs	r1, r5
    9074:	f001 fb8c 	bl	a790 <__aeabi_dcmpeq>
    9078:	2800      	cmp	r0, #0
    907a:	d100      	bne.n	907e <pow+0x1d2>
    907c:	e76b      	b.n	8f56 <pow+0xaa>
    907e:	ab04      	add	r3, sp, #16
    9080:	4698      	mov	r8, r3
    9082:	2301      	movs	r3, #1
    9084:	4642      	mov	r2, r8
    9086:	9304      	str	r3, [sp, #16]
    9088:	4b57      	ldr	r3, [pc, #348]	; (91e8 <pow+0x33c>)
    908a:	4641      	mov	r1, r8
    908c:	6053      	str	r3, [r2, #4]
    908e:	4643      	mov	r3, r8
    9090:	465a      	mov	r2, fp
    9092:	621a      	str	r2, [r3, #32]
    9094:	2200      	movs	r2, #0
    9096:	609e      	str	r6, [r3, #8]
    9098:	60df      	str	r7, [r3, #12]
    909a:	611c      	str	r4, [r3, #16]
    909c:	615d      	str	r5, [r3, #20]
    909e:	4b53      	ldr	r3, [pc, #332]	; (91ec <pow+0x340>)
    90a0:	618a      	str	r2, [r1, #24]
    90a2:	61cb      	str	r3, [r1, #28]
    90a4:	9200      	str	r2, [sp, #0]
    90a6:	9301      	str	r3, [sp, #4]
    90a8:	464b      	mov	r3, r9
    90aa:	2b02      	cmp	r3, #2
    90ac:	d19d      	bne.n	8fea <pow+0x13e>
    90ae:	e752      	b.n	8f56 <pow+0xaa>
    90b0:	0030      	movs	r0, r6
    90b2:	0039      	movs	r1, r7
    90b4:	f001 f8c2 	bl	a23c <finite>
    90b8:	2800      	cmp	r0, #0
    90ba:	d100      	bne.n	90be <pow+0x212>
    90bc:	e75c      	b.n	8f78 <pow+0xcc>
    90be:	0020      	movs	r0, r4
    90c0:	0029      	movs	r1, r5
    90c2:	f001 f8bb 	bl	a23c <finite>
    90c6:	2800      	cmp	r0, #0
    90c8:	d100      	bne.n	90cc <pow+0x220>
    90ca:	e755      	b.n	8f78 <pow+0xcc>
    90cc:	9800      	ldr	r0, [sp, #0]
    90ce:	9901      	ldr	r1, [sp, #4]
    90d0:	000b      	movs	r3, r1
    90d2:	0002      	movs	r2, r0
    90d4:	f003 fee2 	bl	ce9c <__aeabi_dcmpun>
    90d8:	ab04      	add	r3, sp, #16
    90da:	4698      	mov	r8, r3
    90dc:	2800      	cmp	r0, #0
    90de:	d161      	bne.n	91a4 <pow+0x2f8>
    90e0:	2303      	movs	r3, #3
    90e2:	4642      	mov	r2, r8
    90e4:	9304      	str	r3, [sp, #16]
    90e6:	4b40      	ldr	r3, [pc, #256]	; (91e8 <pow+0x33c>)
    90e8:	6210      	str	r0, [r2, #32]
    90ea:	6053      	str	r3, [r2, #4]
    90ec:	4653      	mov	r3, sl
    90ee:	781b      	ldrb	r3, [r3, #0]
    90f0:	6096      	str	r6, [r2, #8]
    90f2:	60d7      	str	r7, [r2, #12]
    90f4:	b25b      	sxtb	r3, r3
    90f6:	6114      	str	r4, [r2, #16]
    90f8:	6155      	str	r5, [r2, #20]
    90fa:	4699      	mov	r9, r3
    90fc:	2b00      	cmp	r3, #0
    90fe:	d12f      	bne.n	9160 <pow+0x2b4>
    9100:	22e0      	movs	r2, #224	; 0xe0
    9102:	4641      	mov	r1, r8
    9104:	4b3b      	ldr	r3, [pc, #236]	; (91f4 <pow+0x348>)
    9106:	0612      	lsls	r2, r2, #24
    9108:	618a      	str	r2, [r1, #24]
    910a:	61cb      	str	r3, [r1, #28]
    910c:	0030      	movs	r0, r6
    910e:	2200      	movs	r2, #0
    9110:	2300      	movs	r3, #0
    9112:	0039      	movs	r1, r7
    9114:	f001 fb42 	bl	a79c <__aeabi_dcmplt>
    9118:	2800      	cmp	r0, #0
    911a:	d100      	bne.n	911e <pow+0x272>
    911c:	e756      	b.n	8fcc <pow+0x120>
    911e:	2200      	movs	r2, #0
    9120:	4b35      	ldr	r3, [pc, #212]	; (91f8 <pow+0x34c>)
    9122:	0020      	movs	r0, r4
    9124:	0029      	movs	r1, r5
    9126:	f003 f923 	bl	c370 <__aeabi_dmul>
    912a:	0004      	movs	r4, r0
    912c:	000d      	movs	r5, r1
    912e:	f001 f897 	bl	a260 <rint>
    9132:	0002      	movs	r2, r0
    9134:	000b      	movs	r3, r1
    9136:	0020      	movs	r0, r4
    9138:	0029      	movs	r1, r5
    913a:	f001 fb29 	bl	a790 <__aeabi_dcmpeq>
    913e:	2800      	cmp	r0, #0
    9140:	d105      	bne.n	914e <pow+0x2a2>
    9142:	22e0      	movs	r2, #224	; 0xe0
    9144:	4b2d      	ldr	r3, [pc, #180]	; (91fc <pow+0x350>)
    9146:	0612      	lsls	r2, r2, #24
    9148:	4641      	mov	r1, r8
    914a:	618a      	str	r2, [r1, #24]
    914c:	61cb      	str	r3, [r1, #28]
    914e:	4653      	mov	r3, sl
    9150:	781b      	ldrb	r3, [r3, #0]
    9152:	b25b      	sxtb	r3, r3
    9154:	4699      	mov	r9, r3
    9156:	464b      	mov	r3, r9
    9158:	2b02      	cmp	r3, #2
    915a:	d000      	beq.n	915e <pow+0x2b2>
    915c:	e736      	b.n	8fcc <pow+0x120>
    915e:	e73a      	b.n	8fd6 <pow+0x12a>
    9160:	2200      	movs	r2, #0
    9162:	4641      	mov	r1, r8
    9164:	4b26      	ldr	r3, [pc, #152]	; (9200 <pow+0x354>)
    9166:	0030      	movs	r0, r6
    9168:	618a      	str	r2, [r1, #24]
    916a:	61cb      	str	r3, [r1, #28]
    916c:	2200      	movs	r2, #0
    916e:	2300      	movs	r3, #0
    9170:	0039      	movs	r1, r7
    9172:	f001 fb13 	bl	a79c <__aeabi_dcmplt>
    9176:	2800      	cmp	r0, #0
    9178:	d0ed      	beq.n	9156 <pow+0x2aa>
    917a:	2200      	movs	r2, #0
    917c:	4b1e      	ldr	r3, [pc, #120]	; (91f8 <pow+0x34c>)
    917e:	0020      	movs	r0, r4
    9180:	0029      	movs	r1, r5
    9182:	f003 f8f5 	bl	c370 <__aeabi_dmul>
    9186:	0004      	movs	r4, r0
    9188:	000d      	movs	r5, r1
    918a:	f001 f869 	bl	a260 <rint>
    918e:	0002      	movs	r2, r0
    9190:	000b      	movs	r3, r1
    9192:	0020      	movs	r0, r4
    9194:	0029      	movs	r1, r5
    9196:	f001 fafb 	bl	a790 <__aeabi_dcmpeq>
    919a:	2800      	cmp	r0, #0
    919c:	d1d7      	bne.n	914e <pow+0x2a2>
    919e:	2200      	movs	r2, #0
    91a0:	4b13      	ldr	r3, [pc, #76]	; (91f0 <pow+0x344>)
    91a2:	e7d1      	b.n	9148 <pow+0x29c>
    91a4:	2301      	movs	r3, #1
    91a6:	4642      	mov	r2, r8
    91a8:	9304      	str	r3, [sp, #16]
    91aa:	4b0f      	ldr	r3, [pc, #60]	; (91e8 <pow+0x33c>)
    91ac:	6053      	str	r3, [r2, #4]
    91ae:	4643      	mov	r3, r8
    91b0:	464a      	mov	r2, r9
    91b2:	611c      	str	r4, [r3, #16]
    91b4:	615d      	str	r5, [r3, #20]
    91b6:	621a      	str	r2, [r3, #32]
    91b8:	609e      	str	r6, [r3, #8]
    91ba:	60df      	str	r7, [r3, #12]
    91bc:	2400      	movs	r4, #0
    91be:	4653      	mov	r3, sl
    91c0:	571c      	ldrsb	r4, [r3, r4]
    91c2:	2c00      	cmp	r4, #0
    91c4:	d100      	bne.n	91c8 <pow+0x31c>
    91c6:	e70b      	b.n	8fe0 <pow+0x134>
    91c8:	2300      	movs	r3, #0
    91ca:	2200      	movs	r2, #0
    91cc:	0019      	movs	r1, r3
    91ce:	0010      	movs	r0, r2
    91d0:	f002 fc9a 	bl	bb08 <__aeabi_ddiv>
    91d4:	4643      	mov	r3, r8
    91d6:	6198      	str	r0, [r3, #24]
    91d8:	61d9      	str	r1, [r3, #28]
    91da:	2c02      	cmp	r4, #2
    91dc:	d100      	bne.n	91e0 <pow+0x334>
    91de:	e741      	b.n	9064 <pow+0x1b8>
    91e0:	e703      	b.n	8fea <pow+0x13e>
    91e2:	46c0      	nop			; (mov r8, r8)
    91e4:	20000080 	.word	0x20000080
    91e8:	00012390 	.word	0x00012390
    91ec:	3ff00000 	.word	0x3ff00000
    91f0:	fff00000 	.word	0xfff00000
    91f4:	47efffff 	.word	0x47efffff
    91f8:	3fe00000 	.word	0x3fe00000
    91fc:	c7efffff 	.word	0xc7efffff
    9200:	7ff00000 	.word	0x7ff00000

00009204 <__ieee754_log>:
    9204:	b5f0      	push	{r4, r5, r6, r7, lr}
    9206:	46d6      	mov	lr, sl
    9208:	464f      	mov	r7, r9
    920a:	4646      	mov	r6, r8
    920c:	b5c0      	push	{r6, r7, lr}
    920e:	4ada      	ldr	r2, [pc, #872]	; (9578 <__ieee754_log+0x374>)
    9210:	b088      	sub	sp, #32
    9212:	000b      	movs	r3, r1
    9214:	4291      	cmp	r1, r2
    9216:	dc55      	bgt.n	92c4 <__ieee754_log+0xc0>
    9218:	004a      	lsls	r2, r1, #1
    921a:	0852      	lsrs	r2, r2, #1
    921c:	4302      	orrs	r2, r0
    921e:	d100      	bne.n	9222 <__ieee754_log+0x1e>
    9220:	e0ef      	b.n	9402 <__ieee754_log+0x1fe>
    9222:	2900      	cmp	r1, #0
    9224:	da00      	bge.n	9228 <__ieee754_log+0x24>
    9226:	e179      	b.n	951c <__ieee754_log+0x318>
    9228:	4bd4      	ldr	r3, [pc, #848]	; (957c <__ieee754_log+0x378>)
    922a:	2200      	movs	r2, #0
    922c:	f003 f8a0 	bl	c370 <__aeabi_dmul>
    9230:	2536      	movs	r5, #54	; 0x36
    9232:	4cd3      	ldr	r4, [pc, #844]	; (9580 <__ieee754_log+0x37c>)
    9234:	000b      	movs	r3, r1
    9236:	426d      	negs	r5, r5
    9238:	42a3      	cmp	r3, r4
    923a:	dc47      	bgt.n	92cc <__ieee754_log+0xc8>
    923c:	151a      	asrs	r2, r3, #20
    923e:	4cd1      	ldr	r4, [pc, #836]	; (9584 <__ieee754_log+0x380>)
    9240:	031b      	lsls	r3, r3, #12
    9242:	0b1b      	lsrs	r3, r3, #12
    9244:	4698      	mov	r8, r3
    9246:	46a4      	mov	ip, r4
    9248:	2480      	movs	r4, #128	; 0x80
    924a:	4bcf      	ldr	r3, [pc, #828]	; (9588 <__ieee754_log+0x384>)
    924c:	0364      	lsls	r4, r4, #13
    924e:	4443      	add	r3, r8
    9250:	4023      	ands	r3, r4
    9252:	4cce      	ldr	r4, [pc, #824]	; (958c <__ieee754_log+0x388>)
    9254:	4462      	add	r2, ip
    9256:	1952      	adds	r2, r2, r5
    9258:	405c      	eors	r4, r3
    925a:	4645      	mov	r5, r8
    925c:	151b      	asrs	r3, r3, #20
    925e:	4699      	mov	r9, r3
    9260:	4325      	orrs	r5, r4
    9262:	4bca      	ldr	r3, [pc, #808]	; (958c <__ieee754_log+0x388>)
    9264:	0029      	movs	r1, r5
    9266:	4491      	add	r9, r2
    9268:	2200      	movs	r2, #0
    926a:	f003 fb01 	bl	c870 <__aeabi_dsub>
    926e:	4643      	mov	r3, r8
    9270:	3302      	adds	r3, #2
    9272:	031b      	lsls	r3, r3, #12
    9274:	0006      	movs	r6, r0
    9276:	000f      	movs	r7, r1
    9278:	0b1b      	lsrs	r3, r3, #12
    927a:	2200      	movs	r2, #0
    927c:	2b02      	cmp	r3, #2
    927e:	dc2f      	bgt.n	92e0 <__ieee754_log+0xdc>
    9280:	2300      	movs	r3, #0
    9282:	f001 fa85 	bl	a790 <__aeabi_dcmpeq>
    9286:	2800      	cmp	r0, #0
    9288:	d100      	bne.n	928c <__ieee754_log+0x88>
    928a:	e0c1      	b.n	9410 <__ieee754_log+0x20c>
    928c:	464b      	mov	r3, r9
    928e:	2b00      	cmp	r3, #0
    9290:	d100      	bne.n	9294 <__ieee754_log+0x90>
    9292:	e14c      	b.n	952e <__ieee754_log+0x32a>
    9294:	4648      	mov	r0, r9
    9296:	f003 fe55 	bl	cf44 <__aeabi_i2d>
    929a:	4abd      	ldr	r2, [pc, #756]	; (9590 <__ieee754_log+0x38c>)
    929c:	4bbd      	ldr	r3, [pc, #756]	; (9594 <__ieee754_log+0x390>)
    929e:	0004      	movs	r4, r0
    92a0:	000d      	movs	r5, r1
    92a2:	f003 f865 	bl	c370 <__aeabi_dmul>
    92a6:	4abc      	ldr	r2, [pc, #752]	; (9598 <__ieee754_log+0x394>)
    92a8:	0006      	movs	r6, r0
    92aa:	000f      	movs	r7, r1
    92ac:	4bbb      	ldr	r3, [pc, #748]	; (959c <__ieee754_log+0x398>)
    92ae:	0020      	movs	r0, r4
    92b0:	0029      	movs	r1, r5
    92b2:	f003 f85d 	bl	c370 <__aeabi_dmul>
    92b6:	0002      	movs	r2, r0
    92b8:	000b      	movs	r3, r1
    92ba:	0030      	movs	r0, r6
    92bc:	0039      	movs	r1, r7
    92be:	f002 f913 	bl	b4e8 <__aeabi_dadd>
    92c2:	e007      	b.n	92d4 <__ieee754_log+0xd0>
    92c4:	4cae      	ldr	r4, [pc, #696]	; (9580 <__ieee754_log+0x37c>)
    92c6:	2500      	movs	r5, #0
    92c8:	42a3      	cmp	r3, r4
    92ca:	ddb7      	ble.n	923c <__ieee754_log+0x38>
    92cc:	0002      	movs	r2, r0
    92ce:	000b      	movs	r3, r1
    92d0:	f002 f90a 	bl	b4e8 <__aeabi_dadd>
    92d4:	b008      	add	sp, #32
    92d6:	bc1c      	pop	{r2, r3, r4}
    92d8:	4690      	mov	r8, r2
    92da:	4699      	mov	r9, r3
    92dc:	46a2      	mov	sl, r4
    92de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    92e0:	2380      	movs	r3, #128	; 0x80
    92e2:	05db      	lsls	r3, r3, #23
    92e4:	f002 f900 	bl	b4e8 <__aeabi_dadd>
    92e8:	0002      	movs	r2, r0
    92ea:	000b      	movs	r3, r1
    92ec:	0030      	movs	r0, r6
    92ee:	0039      	movs	r1, r7
    92f0:	f002 fc0a 	bl	bb08 <__aeabi_ddiv>
    92f4:	0004      	movs	r4, r0
    92f6:	4648      	mov	r0, r9
    92f8:	000d      	movs	r5, r1
    92fa:	f003 fe23 	bl	cf44 <__aeabi_i2d>
    92fe:	0022      	movs	r2, r4
    9300:	9002      	str	r0, [sp, #8]
    9302:	9103      	str	r1, [sp, #12]
    9304:	002b      	movs	r3, r5
    9306:	0020      	movs	r0, r4
    9308:	0029      	movs	r1, r5
    930a:	9404      	str	r4, [sp, #16]
    930c:	9505      	str	r5, [sp, #20]
    930e:	f003 f82f 	bl	c370 <__aeabi_dmul>
    9312:	0004      	movs	r4, r0
    9314:	000d      	movs	r5, r1
    9316:	4ba2      	ldr	r3, [pc, #648]	; (95a0 <__ieee754_log+0x39c>)
    9318:	0002      	movs	r2, r0
    931a:	4443      	add	r3, r8
    931c:	469a      	mov	sl, r3
    931e:	000b      	movs	r3, r1
    9320:	9400      	str	r4, [sp, #0]
    9322:	9501      	str	r5, [sp, #4]
    9324:	f003 f824 	bl	c370 <__aeabi_dmul>
    9328:	0004      	movs	r4, r0
    932a:	000d      	movs	r5, r1
    932c:	4a9d      	ldr	r2, [pc, #628]	; (95a4 <__ieee754_log+0x3a0>)
    932e:	4b9e      	ldr	r3, [pc, #632]	; (95a8 <__ieee754_log+0x3a4>)
    9330:	f003 f81e 	bl	c370 <__aeabi_dmul>
    9334:	4a9d      	ldr	r2, [pc, #628]	; (95ac <__ieee754_log+0x3a8>)
    9336:	4b9e      	ldr	r3, [pc, #632]	; (95b0 <__ieee754_log+0x3ac>)
    9338:	f002 f8d6 	bl	b4e8 <__aeabi_dadd>
    933c:	0022      	movs	r2, r4
    933e:	002b      	movs	r3, r5
    9340:	f003 f816 	bl	c370 <__aeabi_dmul>
    9344:	4a9b      	ldr	r2, [pc, #620]	; (95b4 <__ieee754_log+0x3b0>)
    9346:	4b9c      	ldr	r3, [pc, #624]	; (95b8 <__ieee754_log+0x3b4>)
    9348:	f002 f8ce 	bl	b4e8 <__aeabi_dadd>
    934c:	0022      	movs	r2, r4
    934e:	002b      	movs	r3, r5
    9350:	f003 f80e 	bl	c370 <__aeabi_dmul>
    9354:	4a99      	ldr	r2, [pc, #612]	; (95bc <__ieee754_log+0x3b8>)
    9356:	4b9a      	ldr	r3, [pc, #616]	; (95c0 <__ieee754_log+0x3bc>)
    9358:	f002 f8c6 	bl	b4e8 <__aeabi_dadd>
    935c:	9a00      	ldr	r2, [sp, #0]
    935e:	9b01      	ldr	r3, [sp, #4]
    9360:	f003 f806 	bl	c370 <__aeabi_dmul>
    9364:	4a97      	ldr	r2, [pc, #604]	; (95c4 <__ieee754_log+0x3c0>)
    9366:	9000      	str	r0, [sp, #0]
    9368:	9101      	str	r1, [sp, #4]
    936a:	4b97      	ldr	r3, [pc, #604]	; (95c8 <__ieee754_log+0x3c4>)
    936c:	0020      	movs	r0, r4
    936e:	0029      	movs	r1, r5
    9370:	f002 fffe 	bl	c370 <__aeabi_dmul>
    9374:	4a95      	ldr	r2, [pc, #596]	; (95cc <__ieee754_log+0x3c8>)
    9376:	4b96      	ldr	r3, [pc, #600]	; (95d0 <__ieee754_log+0x3cc>)
    9378:	f002 f8b6 	bl	b4e8 <__aeabi_dadd>
    937c:	0022      	movs	r2, r4
    937e:	002b      	movs	r3, r5
    9380:	f002 fff6 	bl	c370 <__aeabi_dmul>
    9384:	4a93      	ldr	r2, [pc, #588]	; (95d4 <__ieee754_log+0x3d0>)
    9386:	4b94      	ldr	r3, [pc, #592]	; (95d8 <__ieee754_log+0x3d4>)
    9388:	f002 f8ae 	bl	b4e8 <__aeabi_dadd>
    938c:	0022      	movs	r2, r4
    938e:	002b      	movs	r3, r5
    9390:	f002 ffee 	bl	c370 <__aeabi_dmul>
    9394:	000b      	movs	r3, r1
    9396:	0002      	movs	r2, r0
    9398:	9800      	ldr	r0, [sp, #0]
    939a:	9901      	ldr	r1, [sp, #4]
    939c:	f002 f8a4 	bl	b4e8 <__aeabi_dadd>
    93a0:	000d      	movs	r5, r1
    93a2:	4641      	mov	r1, r8
    93a4:	4b8d      	ldr	r3, [pc, #564]	; (95dc <__ieee754_log+0x3d8>)
    93a6:	0004      	movs	r4, r0
    93a8:	1a5b      	subs	r3, r3, r1
    93aa:	4651      	mov	r1, sl
    93ac:	430b      	orrs	r3, r1
    93ae:	2b00      	cmp	r3, #0
    93b0:	dd54      	ble.n	945c <__ieee754_log+0x258>
    93b2:	2200      	movs	r2, #0
    93b4:	4b8a      	ldr	r3, [pc, #552]	; (95e0 <__ieee754_log+0x3dc>)
    93b6:	0030      	movs	r0, r6
    93b8:	0039      	movs	r1, r7
    93ba:	f002 ffd9 	bl	c370 <__aeabi_dmul>
    93be:	0032      	movs	r2, r6
    93c0:	003b      	movs	r3, r7
    93c2:	f002 ffd5 	bl	c370 <__aeabi_dmul>
    93c6:	464b      	mov	r3, r9
    93c8:	000a      	movs	r2, r1
    93ca:	0001      	movs	r1, r0
    93cc:	9100      	str	r1, [sp, #0]
    93ce:	9201      	str	r2, [sp, #4]
    93d0:	2b00      	cmp	r3, #0
    93d2:	d172      	bne.n	94ba <__ieee754_log+0x2b6>
    93d4:	0013      	movs	r3, r2
    93d6:	0029      	movs	r1, r5
    93d8:	0002      	movs	r2, r0
    93da:	0020      	movs	r0, r4
    93dc:	f002 f884 	bl	b4e8 <__aeabi_dadd>
    93e0:	9a04      	ldr	r2, [sp, #16]
    93e2:	9b05      	ldr	r3, [sp, #20]
    93e4:	f002 ffc4 	bl	c370 <__aeabi_dmul>
    93e8:	0002      	movs	r2, r0
    93ea:	000b      	movs	r3, r1
    93ec:	9800      	ldr	r0, [sp, #0]
    93ee:	9901      	ldr	r1, [sp, #4]
    93f0:	f003 fa3e 	bl	c870 <__aeabi_dsub>
    93f4:	0002      	movs	r2, r0
    93f6:	000b      	movs	r3, r1
    93f8:	0030      	movs	r0, r6
    93fa:	0039      	movs	r1, r7
    93fc:	f003 fa38 	bl	c870 <__aeabi_dsub>
    9400:	e768      	b.n	92d4 <__ieee754_log+0xd0>
    9402:	2200      	movs	r2, #0
    9404:	2300      	movs	r3, #0
    9406:	2000      	movs	r0, #0
    9408:	4976      	ldr	r1, [pc, #472]	; (95e4 <__ieee754_log+0x3e0>)
    940a:	f002 fb7d 	bl	bb08 <__aeabi_ddiv>
    940e:	e761      	b.n	92d4 <__ieee754_log+0xd0>
    9410:	4a75      	ldr	r2, [pc, #468]	; (95e8 <__ieee754_log+0x3e4>)
    9412:	4b76      	ldr	r3, [pc, #472]	; (95ec <__ieee754_log+0x3e8>)
    9414:	0030      	movs	r0, r6
    9416:	0039      	movs	r1, r7
    9418:	f002 ffaa 	bl	c370 <__aeabi_dmul>
    941c:	0002      	movs	r2, r0
    941e:	000b      	movs	r3, r1
    9420:	2000      	movs	r0, #0
    9422:	496f      	ldr	r1, [pc, #444]	; (95e0 <__ieee754_log+0x3dc>)
    9424:	f003 fa24 	bl	c870 <__aeabi_dsub>
    9428:	0032      	movs	r2, r6
    942a:	0004      	movs	r4, r0
    942c:	000d      	movs	r5, r1
    942e:	003b      	movs	r3, r7
    9430:	0030      	movs	r0, r6
    9432:	0039      	movs	r1, r7
    9434:	f002 ff9c 	bl	c370 <__aeabi_dmul>
    9438:	000b      	movs	r3, r1
    943a:	0002      	movs	r2, r0
    943c:	0029      	movs	r1, r5
    943e:	0020      	movs	r0, r4
    9440:	f002 ff96 	bl	c370 <__aeabi_dmul>
    9444:	464b      	mov	r3, r9
    9446:	0004      	movs	r4, r0
    9448:	000d      	movs	r5, r1
    944a:	2b00      	cmp	r3, #0
    944c:	d172      	bne.n	9534 <__ieee754_log+0x330>
    944e:	0002      	movs	r2, r0
    9450:	000b      	movs	r3, r1
    9452:	0030      	movs	r0, r6
    9454:	0039      	movs	r1, r7
    9456:	f003 fa0b 	bl	c870 <__aeabi_dsub>
    945a:	e73b      	b.n	92d4 <__ieee754_log+0xd0>
    945c:	464b      	mov	r3, r9
    945e:	2b00      	cmp	r3, #0
    9460:	d100      	bne.n	9464 <__ieee754_log+0x260>
    9462:	e0c5      	b.n	95f0 <__ieee754_log+0x3ec>
    9464:	9802      	ldr	r0, [sp, #8]
    9466:	9903      	ldr	r1, [sp, #12]
    9468:	4a49      	ldr	r2, [pc, #292]	; (9590 <__ieee754_log+0x38c>)
    946a:	4b4a      	ldr	r3, [pc, #296]	; (9594 <__ieee754_log+0x390>)
    946c:	f002 ff80 	bl	c370 <__aeabi_dmul>
    9470:	0022      	movs	r2, r4
    9472:	9000      	str	r0, [sp, #0]
    9474:	9101      	str	r1, [sp, #4]
    9476:	002b      	movs	r3, r5
    9478:	0030      	movs	r0, r6
    947a:	0039      	movs	r1, r7
    947c:	f003 f9f8 	bl	c870 <__aeabi_dsub>
    9480:	9a04      	ldr	r2, [sp, #16]
    9482:	9b05      	ldr	r3, [sp, #20]
    9484:	f002 ff74 	bl	c370 <__aeabi_dmul>
    9488:	4a43      	ldr	r2, [pc, #268]	; (9598 <__ieee754_log+0x394>)
    948a:	0004      	movs	r4, r0
    948c:	000d      	movs	r5, r1
    948e:	9802      	ldr	r0, [sp, #8]
    9490:	9903      	ldr	r1, [sp, #12]
    9492:	4b42      	ldr	r3, [pc, #264]	; (959c <__ieee754_log+0x398>)
    9494:	f002 ff6c 	bl	c370 <__aeabi_dmul>
    9498:	0002      	movs	r2, r0
    949a:	000b      	movs	r3, r1
    949c:	0020      	movs	r0, r4
    949e:	0029      	movs	r1, r5
    94a0:	f003 f9e6 	bl	c870 <__aeabi_dsub>
    94a4:	0032      	movs	r2, r6
    94a6:	003b      	movs	r3, r7
    94a8:	f003 f9e2 	bl	c870 <__aeabi_dsub>
    94ac:	0002      	movs	r2, r0
    94ae:	000b      	movs	r3, r1
    94b0:	9800      	ldr	r0, [sp, #0]
    94b2:	9901      	ldr	r1, [sp, #4]
    94b4:	f003 f9dc 	bl	c870 <__aeabi_dsub>
    94b8:	e70c      	b.n	92d4 <__ieee754_log+0xd0>
    94ba:	4a35      	ldr	r2, [pc, #212]	; (9590 <__ieee754_log+0x38c>)
    94bc:	4b35      	ldr	r3, [pc, #212]	; (9594 <__ieee754_log+0x390>)
    94be:	9802      	ldr	r0, [sp, #8]
    94c0:	9903      	ldr	r1, [sp, #12]
    94c2:	f002 ff55 	bl	c370 <__aeabi_dmul>
    94c6:	9a00      	ldr	r2, [sp, #0]
    94c8:	9b01      	ldr	r3, [sp, #4]
    94ca:	9006      	str	r0, [sp, #24]
    94cc:	9107      	str	r1, [sp, #28]
    94ce:	0020      	movs	r0, r4
    94d0:	0029      	movs	r1, r5
    94d2:	f002 f809 	bl	b4e8 <__aeabi_dadd>
    94d6:	9a04      	ldr	r2, [sp, #16]
    94d8:	9b05      	ldr	r3, [sp, #20]
    94da:	f002 ff49 	bl	c370 <__aeabi_dmul>
    94de:	4a2e      	ldr	r2, [pc, #184]	; (9598 <__ieee754_log+0x394>)
    94e0:	0004      	movs	r4, r0
    94e2:	000d      	movs	r5, r1
    94e4:	9802      	ldr	r0, [sp, #8]
    94e6:	9903      	ldr	r1, [sp, #12]
    94e8:	4b2c      	ldr	r3, [pc, #176]	; (959c <__ieee754_log+0x398>)
    94ea:	f002 ff41 	bl	c370 <__aeabi_dmul>
    94ee:	0002      	movs	r2, r0
    94f0:	000b      	movs	r3, r1
    94f2:	0020      	movs	r0, r4
    94f4:	0029      	movs	r1, r5
    94f6:	f001 fff7 	bl	b4e8 <__aeabi_dadd>
    94fa:	0002      	movs	r2, r0
    94fc:	000b      	movs	r3, r1
    94fe:	9800      	ldr	r0, [sp, #0]
    9500:	9901      	ldr	r1, [sp, #4]
    9502:	f003 f9b5 	bl	c870 <__aeabi_dsub>
    9506:	0032      	movs	r2, r6
    9508:	003b      	movs	r3, r7
    950a:	f003 f9b1 	bl	c870 <__aeabi_dsub>
    950e:	0002      	movs	r2, r0
    9510:	000b      	movs	r3, r1
    9512:	9806      	ldr	r0, [sp, #24]
    9514:	9907      	ldr	r1, [sp, #28]
    9516:	f003 f9ab 	bl	c870 <__aeabi_dsub>
    951a:	e6db      	b.n	92d4 <__ieee754_log+0xd0>
    951c:	0002      	movs	r2, r0
    951e:	000b      	movs	r3, r1
    9520:	f003 f9a6 	bl	c870 <__aeabi_dsub>
    9524:	2200      	movs	r2, #0
    9526:	2300      	movs	r3, #0
    9528:	f002 faee 	bl	bb08 <__aeabi_ddiv>
    952c:	e6d2      	b.n	92d4 <__ieee754_log+0xd0>
    952e:	2000      	movs	r0, #0
    9530:	2100      	movs	r1, #0
    9532:	e6cf      	b.n	92d4 <__ieee754_log+0xd0>
    9534:	4648      	mov	r0, r9
    9536:	f003 fd05 	bl	cf44 <__aeabi_i2d>
    953a:	4a15      	ldr	r2, [pc, #84]	; (9590 <__ieee754_log+0x38c>)
    953c:	4b15      	ldr	r3, [pc, #84]	; (9594 <__ieee754_log+0x390>)
    953e:	9000      	str	r0, [sp, #0]
    9540:	9101      	str	r1, [sp, #4]
    9542:	f002 ff15 	bl	c370 <__aeabi_dmul>
    9546:	4a14      	ldr	r2, [pc, #80]	; (9598 <__ieee754_log+0x394>)
    9548:	9002      	str	r0, [sp, #8]
    954a:	9103      	str	r1, [sp, #12]
    954c:	9800      	ldr	r0, [sp, #0]
    954e:	9901      	ldr	r1, [sp, #4]
    9550:	4b12      	ldr	r3, [pc, #72]	; (959c <__ieee754_log+0x398>)
    9552:	f002 ff0d 	bl	c370 <__aeabi_dmul>
    9556:	0002      	movs	r2, r0
    9558:	000b      	movs	r3, r1
    955a:	0020      	movs	r0, r4
    955c:	0029      	movs	r1, r5
    955e:	f003 f987 	bl	c870 <__aeabi_dsub>
    9562:	0032      	movs	r2, r6
    9564:	003b      	movs	r3, r7
    9566:	f003 f983 	bl	c870 <__aeabi_dsub>
    956a:	0002      	movs	r2, r0
    956c:	000b      	movs	r3, r1
    956e:	9802      	ldr	r0, [sp, #8]
    9570:	9903      	ldr	r1, [sp, #12]
    9572:	f003 f97d 	bl	c870 <__aeabi_dsub>
    9576:	e6ad      	b.n	92d4 <__ieee754_log+0xd0>
    9578:	000fffff 	.word	0x000fffff
    957c:	43500000 	.word	0x43500000
    9580:	7fefffff 	.word	0x7fefffff
    9584:	fffffc01 	.word	0xfffffc01
    9588:	00095f64 	.word	0x00095f64
    958c:	3ff00000 	.word	0x3ff00000
    9590:	fee00000 	.word	0xfee00000
    9594:	3fe62e42 	.word	0x3fe62e42
    9598:	35793c76 	.word	0x35793c76
    959c:	3dea39ef 	.word	0x3dea39ef
    95a0:	fff9eb86 	.word	0xfff9eb86
    95a4:	df3e5244 	.word	0xdf3e5244
    95a8:	3fc2f112 	.word	0x3fc2f112
    95ac:	96cb03de 	.word	0x96cb03de
    95b0:	3fc74664 	.word	0x3fc74664
    95b4:	94229359 	.word	0x94229359
    95b8:	3fd24924 	.word	0x3fd24924
    95bc:	55555593 	.word	0x55555593
    95c0:	3fe55555 	.word	0x3fe55555
    95c4:	d078c69f 	.word	0xd078c69f
    95c8:	3fc39a09 	.word	0x3fc39a09
    95cc:	1d8e78af 	.word	0x1d8e78af
    95d0:	3fcc71c5 	.word	0x3fcc71c5
    95d4:	9997fa04 	.word	0x9997fa04
    95d8:	3fd99999 	.word	0x3fd99999
    95dc:	0006b851 	.word	0x0006b851
    95e0:	3fe00000 	.word	0x3fe00000
    95e4:	c3500000 	.word	0xc3500000
    95e8:	55555555 	.word	0x55555555
    95ec:	3fd55555 	.word	0x3fd55555
    95f0:	0022      	movs	r2, r4
    95f2:	002b      	movs	r3, r5
    95f4:	0030      	movs	r0, r6
    95f6:	0039      	movs	r1, r7
    95f8:	f003 f93a 	bl	c870 <__aeabi_dsub>
    95fc:	9a04      	ldr	r2, [sp, #16]
    95fe:	9b05      	ldr	r3, [sp, #20]
    9600:	f002 feb6 	bl	c370 <__aeabi_dmul>
    9604:	e6f6      	b.n	93f4 <__ieee754_log+0x1f0>
    9606:	46c0      	nop			; (mov r8, r8)

00009608 <__ieee754_pow>:
    9608:	b5f0      	push	{r4, r5, r6, r7, lr}
    960a:	4657      	mov	r7, sl
    960c:	464e      	mov	r6, r9
    960e:	4645      	mov	r5, r8
    9610:	46de      	mov	lr, fp
    9612:	001c      	movs	r4, r3
    9614:	0013      	movs	r3, r2
    9616:	b5e0      	push	{r5, r6, r7, lr}
    9618:	0065      	lsls	r5, r4, #1
    961a:	b091      	sub	sp, #68	; 0x44
    961c:	086d      	lsrs	r5, r5, #1
    961e:	9300      	str	r3, [sp, #0]
    9620:	9401      	str	r4, [sp, #4]
    9622:	0007      	movs	r7, r0
    9624:	000e      	movs	r6, r1
    9626:	4680      	mov	r8, r0
    9628:	4689      	mov	r9, r1
    962a:	46a2      	mov	sl, r4
    962c:	432b      	orrs	r3, r5
    962e:	d031      	beq.n	9694 <__ieee754_pow+0x8c>
    9630:	4b67      	ldr	r3, [pc, #412]	; (97d0 <__ieee754_pow+0x1c8>)
    9632:	0074      	lsls	r4, r6, #1
    9634:	0864      	lsrs	r4, r4, #1
    9636:	429c      	cmp	r4, r3
    9638:	dc27      	bgt.n	968a <__ieee754_pow+0x82>
    963a:	d024      	beq.n	9686 <__ieee754_pow+0x7e>
    963c:	429d      	cmp	r5, r3
    963e:	dc24      	bgt.n	968a <__ieee754_pow+0x82>
    9640:	4b63      	ldr	r3, [pc, #396]	; (97d0 <__ieee754_pow+0x1c8>)
    9642:	429d      	cmp	r5, r3
    9644:	d100      	bne.n	9648 <__ieee754_pow+0x40>
    9646:	e081      	b.n	974c <__ieee754_pow+0x144>
    9648:	2300      	movs	r3, #0
    964a:	469b      	mov	fp, r3
    964c:	464b      	mov	r3, r9
    964e:	2b00      	cmp	r3, #0
    9650:	da00      	bge.n	9654 <__ieee754_pow+0x4c>
    9652:	e07f      	b.n	9754 <__ieee754_pow+0x14c>
    9654:	2a00      	cmp	r2, #0
    9656:	d12c      	bne.n	96b2 <__ieee754_pow+0xaa>
    9658:	4b5d      	ldr	r3, [pc, #372]	; (97d0 <__ieee754_pow+0x1c8>)
    965a:	429d      	cmp	r5, r3
    965c:	d100      	bne.n	9660 <__ieee754_pow+0x58>
    965e:	e097      	b.n	9790 <__ieee754_pow+0x188>
    9660:	4b5c      	ldr	r3, [pc, #368]	; (97d4 <__ieee754_pow+0x1cc>)
    9662:	429d      	cmp	r5, r3
    9664:	d066      	beq.n	9734 <__ieee754_pow+0x12c>
    9666:	2380      	movs	r3, #128	; 0x80
    9668:	05db      	lsls	r3, r3, #23
    966a:	459a      	cmp	sl, r3
    966c:	d100      	bne.n	9670 <__ieee754_pow+0x68>
    966e:	e3b9      	b.n	9de4 <__ieee754_pow+0x7dc>
    9670:	4b59      	ldr	r3, [pc, #356]	; (97d8 <__ieee754_pow+0x1d0>)
    9672:	459a      	cmp	sl, r3
    9674:	d11d      	bne.n	96b2 <__ieee754_pow+0xaa>
    9676:	464b      	mov	r3, r9
    9678:	2b00      	cmp	r3, #0
    967a:	db1a      	blt.n	96b2 <__ieee754_pow+0xaa>
    967c:	0038      	movs	r0, r7
    967e:	0031      	movs	r1, r6
    9680:	f000 fcf8 	bl	a074 <__ieee754_sqrt>
    9684:	e008      	b.n	9698 <__ieee754_pow+0x90>
    9686:	2800      	cmp	r0, #0
    9688:	d00d      	beq.n	96a6 <__ieee754_pow+0x9e>
    968a:	4b54      	ldr	r3, [pc, #336]	; (97dc <__ieee754_pow+0x1d4>)
    968c:	469c      	mov	ip, r3
    968e:	4464      	add	r4, ip
    9690:	4327      	orrs	r7, r4
    9692:	d10a      	bne.n	96aa <__ieee754_pow+0xa2>
    9694:	2000      	movs	r0, #0
    9696:	494f      	ldr	r1, [pc, #316]	; (97d4 <__ieee754_pow+0x1cc>)
    9698:	b011      	add	sp, #68	; 0x44
    969a:	bc3c      	pop	{r2, r3, r4, r5}
    969c:	4690      	mov	r8, r2
    969e:	4699      	mov	r9, r3
    96a0:	46a2      	mov	sl, r4
    96a2:	46ab      	mov	fp, r5
    96a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    96a6:	42a5      	cmp	r5, r4
    96a8:	ddca      	ble.n	9640 <__ieee754_pow+0x38>
    96aa:	484d      	ldr	r0, [pc, #308]	; (97e0 <__ieee754_pow+0x1d8>)
    96ac:	f000 fdd2 	bl	a254 <nan>
    96b0:	e7f2      	b.n	9698 <__ieee754_pow+0x90>
    96b2:	0038      	movs	r0, r7
    96b4:	0031      	movs	r1, r6
    96b6:	f000 fdbd 	bl	a234 <fabs>
    96ba:	4643      	mov	r3, r8
    96bc:	2b00      	cmp	r3, #0
    96be:	d11d      	bne.n	96fc <__ieee754_pow+0xf4>
    96c0:	2c00      	cmp	r4, #0
    96c2:	d004      	beq.n	96ce <__ieee754_pow+0xc6>
    96c4:	4a43      	ldr	r2, [pc, #268]	; (97d4 <__ieee754_pow+0x1cc>)
    96c6:	00b3      	lsls	r3, r6, #2
    96c8:	089b      	lsrs	r3, r3, #2
    96ca:	4293      	cmp	r3, r2
    96cc:	d116      	bne.n	96fc <__ieee754_pow+0xf4>
    96ce:	4653      	mov	r3, sl
    96d0:	2b00      	cmp	r3, #0
    96d2:	da00      	bge.n	96d6 <__ieee754_pow+0xce>
    96d4:	e3c5      	b.n	9e62 <__ieee754_pow+0x85a>
    96d6:	464b      	mov	r3, r9
    96d8:	2b00      	cmp	r3, #0
    96da:	dadd      	bge.n	9698 <__ieee754_pow+0x90>
    96dc:	4b3f      	ldr	r3, [pc, #252]	; (97dc <__ieee754_pow+0x1d4>)
    96de:	469c      	mov	ip, r3
    96e0:	465b      	mov	r3, fp
    96e2:	4464      	add	r4, ip
    96e4:	431c      	orrs	r4, r3
    96e6:	d101      	bne.n	96ec <__ieee754_pow+0xe4>
    96e8:	f000 fc53 	bl	9f92 <__ieee754_pow+0x98a>
    96ec:	465b      	mov	r3, fp
    96ee:	2b01      	cmp	r3, #1
    96f0:	d1d2      	bne.n	9698 <__ieee754_pow+0x90>
    96f2:	2480      	movs	r4, #128	; 0x80
    96f4:	0624      	lsls	r4, r4, #24
    96f6:	190b      	adds	r3, r1, r4
    96f8:	0019      	movs	r1, r3
    96fa:	e7cd      	b.n	9698 <__ieee754_pow+0x90>
    96fc:	0ff3      	lsrs	r3, r6, #31
    96fe:	3b01      	subs	r3, #1
    9700:	4698      	mov	r8, r3
    9702:	465b      	mov	r3, fp
    9704:	4642      	mov	r2, r8
    9706:	4313      	orrs	r3, r2
    9708:	d057      	beq.n	97ba <__ieee754_pow+0x1b2>
    970a:	4b36      	ldr	r3, [pc, #216]	; (97e4 <__ieee754_pow+0x1dc>)
    970c:	429d      	cmp	r5, r3
    970e:	dd77      	ble.n	9800 <__ieee754_pow+0x1f8>
    9710:	4b35      	ldr	r3, [pc, #212]	; (97e8 <__ieee754_pow+0x1e0>)
    9712:	429d      	cmp	r5, r3
    9714:	dc00      	bgt.n	9718 <__ieee754_pow+0x110>
    9716:	e3b1      	b.n	9e7c <__ieee754_pow+0x874>
    9718:	4b34      	ldr	r3, [pc, #208]	; (97ec <__ieee754_pow+0x1e4>)
    971a:	429c      	cmp	r4, r3
    971c:	dc00      	bgt.n	9720 <__ieee754_pow+0x118>
    971e:	e3a8      	b.n	9e72 <__ieee754_pow+0x86a>
    9720:	4653      	mov	r3, sl
    9722:	2b00      	cmp	r3, #0
    9724:	dd43      	ble.n	97ae <__ieee754_pow+0x1a6>
    9726:	4a32      	ldr	r2, [pc, #200]	; (97f0 <__ieee754_pow+0x1e8>)
    9728:	4b32      	ldr	r3, [pc, #200]	; (97f4 <__ieee754_pow+0x1ec>)
    972a:	0010      	movs	r0, r2
    972c:	0019      	movs	r1, r3
    972e:	f002 fe1f 	bl	c370 <__aeabi_dmul>
    9732:	e7b1      	b.n	9698 <__ieee754_pow+0x90>
    9734:	4653      	mov	r3, sl
    9736:	0038      	movs	r0, r7
    9738:	0031      	movs	r1, r6
    973a:	2b00      	cmp	r3, #0
    973c:	daac      	bge.n	9698 <__ieee754_pow+0x90>
    973e:	003a      	movs	r2, r7
    9740:	0033      	movs	r3, r6
    9742:	2000      	movs	r0, #0
    9744:	4923      	ldr	r1, [pc, #140]	; (97d4 <__ieee754_pow+0x1cc>)
    9746:	f002 f9df 	bl	bb08 <__aeabi_ddiv>
    974a:	e7a5      	b.n	9698 <__ieee754_pow+0x90>
    974c:	2a00      	cmp	r2, #0
    974e:	d100      	bne.n	9752 <__ieee754_pow+0x14a>
    9750:	e77a      	b.n	9648 <__ieee754_pow+0x40>
    9752:	e79a      	b.n	968a <__ieee754_pow+0x82>
    9754:	4b28      	ldr	r3, [pc, #160]	; (97f8 <__ieee754_pow+0x1f0>)
    9756:	429d      	cmp	r5, r3
    9758:	dc2c      	bgt.n	97b4 <__ieee754_pow+0x1ac>
    975a:	4b24      	ldr	r3, [pc, #144]	; (97ec <__ieee754_pow+0x1e4>)
    975c:	429d      	cmp	r5, r3
    975e:	dc00      	bgt.n	9762 <__ieee754_pow+0x15a>
    9760:	e778      	b.n	9654 <__ieee754_pow+0x4c>
    9762:	4926      	ldr	r1, [pc, #152]	; (97fc <__ieee754_pow+0x1f4>)
    9764:	152b      	asrs	r3, r5, #20
    9766:	468c      	mov	ip, r1
    9768:	4463      	add	r3, ip
    976a:	2b14      	cmp	r3, #20
    976c:	dc01      	bgt.n	9772 <__ieee754_pow+0x16a>
    976e:	f000 fbf3 	bl	9f58 <__ieee754_pow+0x950>
    9772:	2134      	movs	r1, #52	; 0x34
    9774:	1acb      	subs	r3, r1, r3
    9776:	9900      	ldr	r1, [sp, #0]
    9778:	40d9      	lsrs	r1, r3
    977a:	0008      	movs	r0, r1
    977c:	4098      	lsls	r0, r3
    977e:	4282      	cmp	r2, r0
    9780:	d000      	beq.n	9784 <__ieee754_pow+0x17c>
    9782:	e767      	b.n	9654 <__ieee754_pow+0x4c>
    9784:	2301      	movs	r3, #1
    9786:	4019      	ands	r1, r3
    9788:	3301      	adds	r3, #1
    978a:	1a5b      	subs	r3, r3, r1
    978c:	469b      	mov	fp, r3
    978e:	e761      	b.n	9654 <__ieee754_pow+0x4c>
    9790:	4b12      	ldr	r3, [pc, #72]	; (97dc <__ieee754_pow+0x1d4>)
    9792:	18e3      	adds	r3, r4, r3
    9794:	431f      	orrs	r7, r3
    9796:	d100      	bne.n	979a <__ieee754_pow+0x192>
    9798:	e77c      	b.n	9694 <__ieee754_pow+0x8c>
    979a:	4b14      	ldr	r3, [pc, #80]	; (97ec <__ieee754_pow+0x1e4>)
    979c:	429c      	cmp	r4, r3
    979e:	dc00      	bgt.n	97a2 <__ieee754_pow+0x19a>
    97a0:	e327      	b.n	9df2 <__ieee754_pow+0x7ea>
    97a2:	9800      	ldr	r0, [sp, #0]
    97a4:	9901      	ldr	r1, [sp, #4]
    97a6:	4653      	mov	r3, sl
    97a8:	2b00      	cmp	r3, #0
    97aa:	db00      	blt.n	97ae <__ieee754_pow+0x1a6>
    97ac:	e774      	b.n	9698 <__ieee754_pow+0x90>
    97ae:	2000      	movs	r0, #0
    97b0:	2100      	movs	r1, #0
    97b2:	e771      	b.n	9698 <__ieee754_pow+0x90>
    97b4:	2302      	movs	r3, #2
    97b6:	469b      	mov	fp, r3
    97b8:	e74c      	b.n	9654 <__ieee754_pow+0x4c>
    97ba:	003a      	movs	r2, r7
    97bc:	0033      	movs	r3, r6
    97be:	0038      	movs	r0, r7
    97c0:	0031      	movs	r1, r6
    97c2:	f003 f855 	bl	c870 <__aeabi_dsub>
    97c6:	0002      	movs	r2, r0
    97c8:	000b      	movs	r3, r1
    97ca:	f002 f99d 	bl	bb08 <__aeabi_ddiv>
    97ce:	e763      	b.n	9698 <__ieee754_pow+0x90>
    97d0:	7ff00000 	.word	0x7ff00000
    97d4:	3ff00000 	.word	0x3ff00000
    97d8:	3fe00000 	.word	0x3fe00000
    97dc:	c0100000 	.word	0xc0100000
    97e0:	0001216c 	.word	0x0001216c
    97e4:	41e00000 	.word	0x41e00000
    97e8:	43f00000 	.word	0x43f00000
    97ec:	3fefffff 	.word	0x3fefffff
    97f0:	8800759c 	.word	0x8800759c
    97f4:	7e37e43c 	.word	0x7e37e43c
    97f8:	433fffff 	.word	0x433fffff
    97fc:	fffffc01 	.word	0xfffffc01
    9800:	4be9      	ldr	r3, [pc, #932]	; (9ba8 <__ieee754_pow+0x5a0>)
    9802:	2200      	movs	r2, #0
    9804:	429c      	cmp	r4, r3
    9806:	dc06      	bgt.n	9816 <__ieee754_pow+0x20e>
    9808:	2200      	movs	r2, #0
    980a:	4be8      	ldr	r3, [pc, #928]	; (9bac <__ieee754_pow+0x5a4>)
    980c:	f002 fdb0 	bl	c370 <__aeabi_dmul>
    9810:	2235      	movs	r2, #53	; 0x35
    9812:	000c      	movs	r4, r1
    9814:	4252      	negs	r2, r2
    9816:	4de6      	ldr	r5, [pc, #920]	; (9bb0 <__ieee754_pow+0x5a8>)
    9818:	1523      	asrs	r3, r4, #20
    981a:	46ac      	mov	ip, r5
    981c:	4463      	add	r3, ip
    981e:	4699      	mov	r9, r3
    9820:	0324      	lsls	r4, r4, #12
    9822:	4de4      	ldr	r5, [pc, #912]	; (9bb4 <__ieee754_pow+0x5ac>)
    9824:	4be4      	ldr	r3, [pc, #912]	; (9bb8 <__ieee754_pow+0x5b0>)
    9826:	0b24      	lsrs	r4, r4, #12
    9828:	4491      	add	r9, r2
    982a:	4325      	orrs	r5, r4
    982c:	429c      	cmp	r4, r3
    982e:	dd09      	ble.n	9844 <__ieee754_pow+0x23c>
    9830:	4be2      	ldr	r3, [pc, #904]	; (9bbc <__ieee754_pow+0x5b4>)
    9832:	429c      	cmp	r4, r3
    9834:	dc00      	bgt.n	9838 <__ieee754_pow+0x230>
    9836:	e3b6      	b.n	9fa6 <__ieee754_pow+0x99e>
    9838:	2301      	movs	r3, #1
    983a:	469c      	mov	ip, r3
    983c:	4be0      	ldr	r3, [pc, #896]	; (9bc0 <__ieee754_pow+0x5b8>)
    983e:	44e1      	add	r9, ip
    9840:	469c      	mov	ip, r3
    9842:	4465      	add	r5, ip
    9844:	2300      	movs	r3, #0
    9846:	2400      	movs	r4, #0
    9848:	2200      	movs	r2, #0
    984a:	9308      	str	r3, [sp, #32]
    984c:	9409      	str	r4, [sp, #36]	; 0x24
    984e:	930c      	str	r3, [sp, #48]	; 0x30
    9850:	940d      	str	r4, [sp, #52]	; 0x34
    9852:	2400      	movs	r4, #0
    9854:	4bd7      	ldr	r3, [pc, #860]	; (9bb4 <__ieee754_pow+0x5ac>)
    9856:	9206      	str	r2, [sp, #24]
    9858:	9307      	str	r3, [sp, #28]
    985a:	9a06      	ldr	r2, [sp, #24]
    985c:	9b07      	ldr	r3, [sp, #28]
    985e:	0029      	movs	r1, r5
    9860:	900a      	str	r0, [sp, #40]	; 0x28
    9862:	910b      	str	r1, [sp, #44]	; 0x2c
    9864:	f003 f804 	bl	c870 <__aeabi_dsub>
    9868:	9a06      	ldr	r2, [sp, #24]
    986a:	9b07      	ldr	r3, [sp, #28]
    986c:	0006      	movs	r6, r0
    986e:	000f      	movs	r7, r1
    9870:	980a      	ldr	r0, [sp, #40]	; 0x28
    9872:	990b      	ldr	r1, [sp, #44]	; 0x2c
    9874:	f001 fe38 	bl	b4e8 <__aeabi_dadd>
    9878:	0002      	movs	r2, r0
    987a:	000b      	movs	r3, r1
    987c:	2000      	movs	r0, #0
    987e:	49cd      	ldr	r1, [pc, #820]	; (9bb4 <__ieee754_pow+0x5ac>)
    9880:	f002 f942 	bl	bb08 <__aeabi_ddiv>
    9884:	000a      	movs	r2, r1
    9886:	0001      	movs	r1, r0
    9888:	0013      	movs	r3, r2
    988a:	910e      	str	r1, [sp, #56]	; 0x38
    988c:	920f      	str	r2, [sp, #60]	; 0x3c
    988e:	0002      	movs	r2, r0
    9890:	0039      	movs	r1, r7
    9892:	0030      	movs	r0, r6
    9894:	f002 fd6c 	bl	c370 <__aeabi_dmul>
    9898:	000a      	movs	r2, r1
    989a:	0001      	movs	r1, r0
    989c:	2080      	movs	r0, #128	; 0x80
    989e:	9104      	str	r1, [sp, #16]
    98a0:	9205      	str	r2, [sp, #20]
    98a2:	0013      	movs	r3, r2
    98a4:	2200      	movs	r2, #0
    98a6:	1069      	asrs	r1, r5, #1
    98a8:	2580      	movs	r5, #128	; 0x80
    98aa:	0300      	lsls	r0, r0, #12
    98ac:	4684      	mov	ip, r0
    98ae:	9202      	str	r2, [sp, #8]
    98b0:	9303      	str	r3, [sp, #12]
    98b2:	2200      	movs	r2, #0
    98b4:	05ad      	lsls	r5, r5, #22
    98b6:	430d      	orrs	r5, r1
    98b8:	4465      	add	r5, ip
    98ba:	192b      	adds	r3, r5, r4
    98bc:	9802      	ldr	r0, [sp, #8]
    98be:	9903      	ldr	r1, [sp, #12]
    98c0:	0014      	movs	r4, r2
    98c2:	001d      	movs	r5, r3
    98c4:	f002 fd54 	bl	c370 <__aeabi_dmul>
    98c8:	0002      	movs	r2, r0
    98ca:	000b      	movs	r3, r1
    98cc:	0030      	movs	r0, r6
    98ce:	0039      	movs	r1, r7
    98d0:	f002 ffce 	bl	c870 <__aeabi_dsub>
    98d4:	9a06      	ldr	r2, [sp, #24]
    98d6:	9b07      	ldr	r3, [sp, #28]
    98d8:	0006      	movs	r6, r0
    98da:	000f      	movs	r7, r1
    98dc:	0020      	movs	r0, r4
    98de:	0029      	movs	r1, r5
    98e0:	f002 ffc6 	bl	c870 <__aeabi_dsub>
    98e4:	0002      	movs	r2, r0
    98e6:	000b      	movs	r3, r1
    98e8:	980a      	ldr	r0, [sp, #40]	; 0x28
    98ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
    98ec:	f002 ffc0 	bl	c870 <__aeabi_dsub>
    98f0:	9a02      	ldr	r2, [sp, #8]
    98f2:	9b03      	ldr	r3, [sp, #12]
    98f4:	f002 fd3c 	bl	c370 <__aeabi_dmul>
    98f8:	0002      	movs	r2, r0
    98fa:	000b      	movs	r3, r1
    98fc:	0030      	movs	r0, r6
    98fe:	0039      	movs	r1, r7
    9900:	f002 ffb6 	bl	c870 <__aeabi_dsub>
    9904:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    9906:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9908:	f002 fd32 	bl	c370 <__aeabi_dmul>
    990c:	9d04      	ldr	r5, [sp, #16]
    990e:	9e05      	ldr	r6, [sp, #20]
    9910:	9006      	str	r0, [sp, #24]
    9912:	9107      	str	r1, [sp, #28]
    9914:	002a      	movs	r2, r5
    9916:	0033      	movs	r3, r6
    9918:	0028      	movs	r0, r5
    991a:	0031      	movs	r1, r6
    991c:	f002 fd28 	bl	c370 <__aeabi_dmul>
    9920:	0006      	movs	r6, r0
    9922:	000f      	movs	r7, r1
    9924:	4aa7      	ldr	r2, [pc, #668]	; (9bc4 <__ieee754_pow+0x5bc>)
    9926:	4ba8      	ldr	r3, [pc, #672]	; (9bc8 <__ieee754_pow+0x5c0>)
    9928:	f002 fd22 	bl	c370 <__aeabi_dmul>
    992c:	4aa7      	ldr	r2, [pc, #668]	; (9bcc <__ieee754_pow+0x5c4>)
    992e:	4ba8      	ldr	r3, [pc, #672]	; (9bd0 <__ieee754_pow+0x5c8>)
    9930:	f001 fdda 	bl	b4e8 <__aeabi_dadd>
    9934:	0032      	movs	r2, r6
    9936:	003b      	movs	r3, r7
    9938:	f002 fd1a 	bl	c370 <__aeabi_dmul>
    993c:	4aa5      	ldr	r2, [pc, #660]	; (9bd4 <__ieee754_pow+0x5cc>)
    993e:	4ba6      	ldr	r3, [pc, #664]	; (9bd8 <__ieee754_pow+0x5d0>)
    9940:	f001 fdd2 	bl	b4e8 <__aeabi_dadd>
    9944:	0032      	movs	r2, r6
    9946:	003b      	movs	r3, r7
    9948:	f002 fd12 	bl	c370 <__aeabi_dmul>
    994c:	4aa3      	ldr	r2, [pc, #652]	; (9bdc <__ieee754_pow+0x5d4>)
    994e:	4ba4      	ldr	r3, [pc, #656]	; (9be0 <__ieee754_pow+0x5d8>)
    9950:	f001 fdca 	bl	b4e8 <__aeabi_dadd>
    9954:	0032      	movs	r2, r6
    9956:	003b      	movs	r3, r7
    9958:	f002 fd0a 	bl	c370 <__aeabi_dmul>
    995c:	4aa1      	ldr	r2, [pc, #644]	; (9be4 <__ieee754_pow+0x5dc>)
    995e:	4ba2      	ldr	r3, [pc, #648]	; (9be8 <__ieee754_pow+0x5e0>)
    9960:	f001 fdc2 	bl	b4e8 <__aeabi_dadd>
    9964:	0032      	movs	r2, r6
    9966:	003b      	movs	r3, r7
    9968:	f002 fd02 	bl	c370 <__aeabi_dmul>
    996c:	4a9f      	ldr	r2, [pc, #636]	; (9bec <__ieee754_pow+0x5e4>)
    996e:	4ba0      	ldr	r3, [pc, #640]	; (9bf0 <__ieee754_pow+0x5e8>)
    9970:	f001 fdba 	bl	b4e8 <__aeabi_dadd>
    9974:	0032      	movs	r2, r6
    9976:	0004      	movs	r4, r0
    9978:	000d      	movs	r5, r1
    997a:	003b      	movs	r3, r7
    997c:	0030      	movs	r0, r6
    997e:	0039      	movs	r1, r7
    9980:	f002 fcf6 	bl	c370 <__aeabi_dmul>
    9984:	0002      	movs	r2, r0
    9986:	000b      	movs	r3, r1
    9988:	0020      	movs	r0, r4
    998a:	0029      	movs	r1, r5
    998c:	f002 fcf0 	bl	c370 <__aeabi_dmul>
    9990:	9e02      	ldr	r6, [sp, #8]
    9992:	9f03      	ldr	r7, [sp, #12]
    9994:	0004      	movs	r4, r0
    9996:	000d      	movs	r5, r1
    9998:	9804      	ldr	r0, [sp, #16]
    999a:	9905      	ldr	r1, [sp, #20]
    999c:	0032      	movs	r2, r6
    999e:	003b      	movs	r3, r7
    99a0:	f001 fda2 	bl	b4e8 <__aeabi_dadd>
    99a4:	9a06      	ldr	r2, [sp, #24]
    99a6:	9b07      	ldr	r3, [sp, #28]
    99a8:	f002 fce2 	bl	c370 <__aeabi_dmul>
    99ac:	0022      	movs	r2, r4
    99ae:	002b      	movs	r3, r5
    99b0:	f001 fd9a 	bl	b4e8 <__aeabi_dadd>
    99b4:	0032      	movs	r2, r6
    99b6:	900a      	str	r0, [sp, #40]	; 0x28
    99b8:	910b      	str	r1, [sp, #44]	; 0x2c
    99ba:	003b      	movs	r3, r7
    99bc:	0030      	movs	r0, r6
    99be:	0039      	movs	r1, r7
    99c0:	9602      	str	r6, [sp, #8]
    99c2:	9703      	str	r7, [sp, #12]
    99c4:	f002 fcd4 	bl	c370 <__aeabi_dmul>
    99c8:	2200      	movs	r2, #0
    99ca:	4b8a      	ldr	r3, [pc, #552]	; (9bf4 <__ieee754_pow+0x5ec>)
    99cc:	0004      	movs	r4, r0
    99ce:	000d      	movs	r5, r1
    99d0:	f001 fd8a 	bl	b4e8 <__aeabi_dadd>
    99d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    99d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    99d8:	f001 fd86 	bl	b4e8 <__aeabi_dadd>
    99dc:	2600      	movs	r6, #0
    99de:	000f      	movs	r7, r1
    99e0:	0032      	movs	r2, r6
    99e2:	000b      	movs	r3, r1
    99e4:	9802      	ldr	r0, [sp, #8]
    99e6:	9903      	ldr	r1, [sp, #12]
    99e8:	f002 fcc2 	bl	c370 <__aeabi_dmul>
    99ec:	2200      	movs	r2, #0
    99ee:	9002      	str	r0, [sp, #8]
    99f0:	9103      	str	r1, [sp, #12]
    99f2:	4b80      	ldr	r3, [pc, #512]	; (9bf4 <__ieee754_pow+0x5ec>)
    99f4:	0030      	movs	r0, r6
    99f6:	0039      	movs	r1, r7
    99f8:	f002 ff3a 	bl	c870 <__aeabi_dsub>
    99fc:	0022      	movs	r2, r4
    99fe:	002b      	movs	r3, r5
    9a00:	f002 ff36 	bl	c870 <__aeabi_dsub>
    9a04:	0002      	movs	r2, r0
    9a06:	000b      	movs	r3, r1
    9a08:	980a      	ldr	r0, [sp, #40]	; 0x28
    9a0a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    9a0c:	f002 ff30 	bl	c870 <__aeabi_dsub>
    9a10:	9a04      	ldr	r2, [sp, #16]
    9a12:	9b05      	ldr	r3, [sp, #20]
    9a14:	f002 fcac 	bl	c370 <__aeabi_dmul>
    9a18:	0032      	movs	r2, r6
    9a1a:	0004      	movs	r4, r0
    9a1c:	000d      	movs	r5, r1
    9a1e:	9806      	ldr	r0, [sp, #24]
    9a20:	9907      	ldr	r1, [sp, #28]
    9a22:	003b      	movs	r3, r7
    9a24:	f002 fca4 	bl	c370 <__aeabi_dmul>
    9a28:	0002      	movs	r2, r0
    9a2a:	000b      	movs	r3, r1
    9a2c:	0020      	movs	r0, r4
    9a2e:	0029      	movs	r1, r5
    9a30:	f001 fd5a 	bl	b4e8 <__aeabi_dadd>
    9a34:	0004      	movs	r4, r0
    9a36:	000d      	movs	r5, r1
    9a38:	0002      	movs	r2, r0
    9a3a:	000b      	movs	r3, r1
    9a3c:	9802      	ldr	r0, [sp, #8]
    9a3e:	9903      	ldr	r1, [sp, #12]
    9a40:	f001 fd52 	bl	b4e8 <__aeabi_dadd>
    9a44:	2600      	movs	r6, #0
    9a46:	22e0      	movs	r2, #224	; 0xe0
    9a48:	4b6b      	ldr	r3, [pc, #428]	; (9bf8 <__ieee754_pow+0x5f0>)
    9a4a:	0612      	lsls	r2, r2, #24
    9a4c:	0030      	movs	r0, r6
    9a4e:	000f      	movs	r7, r1
    9a50:	f002 fc8e 	bl	c370 <__aeabi_dmul>
    9a54:	9a02      	ldr	r2, [sp, #8]
    9a56:	9b03      	ldr	r3, [sp, #12]
    9a58:	9004      	str	r0, [sp, #16]
    9a5a:	9105      	str	r1, [sp, #20]
    9a5c:	0030      	movs	r0, r6
    9a5e:	0039      	movs	r1, r7
    9a60:	f002 ff06 	bl	c870 <__aeabi_dsub>
    9a64:	0002      	movs	r2, r0
    9a66:	000b      	movs	r3, r1
    9a68:	0020      	movs	r0, r4
    9a6a:	0029      	movs	r1, r5
    9a6c:	f002 ff00 	bl	c870 <__aeabi_dsub>
    9a70:	4a62      	ldr	r2, [pc, #392]	; (9bfc <__ieee754_pow+0x5f4>)
    9a72:	4b61      	ldr	r3, [pc, #388]	; (9bf8 <__ieee754_pow+0x5f0>)
    9a74:	f002 fc7c 	bl	c370 <__aeabi_dmul>
    9a78:	4a61      	ldr	r2, [pc, #388]	; (9c00 <__ieee754_pow+0x5f8>)
    9a7a:	0004      	movs	r4, r0
    9a7c:	000d      	movs	r5, r1
    9a7e:	4b61      	ldr	r3, [pc, #388]	; (9c04 <__ieee754_pow+0x5fc>)
    9a80:	0030      	movs	r0, r6
    9a82:	0039      	movs	r1, r7
    9a84:	f002 fc74 	bl	c370 <__aeabi_dmul>
    9a88:	0002      	movs	r2, r0
    9a8a:	000b      	movs	r3, r1
    9a8c:	0020      	movs	r0, r4
    9a8e:	0029      	movs	r1, r5
    9a90:	f001 fd2a 	bl	b4e8 <__aeabi_dadd>
    9a94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9a96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9a98:	f001 fd26 	bl	b4e8 <__aeabi_dadd>
    9a9c:	0006      	movs	r6, r0
    9a9e:	4648      	mov	r0, r9
    9aa0:	000f      	movs	r7, r1
    9aa2:	f003 fa4f 	bl	cf44 <__aeabi_i2d>
    9aa6:	0004      	movs	r4, r0
    9aa8:	000d      	movs	r5, r1
    9aaa:	9804      	ldr	r0, [sp, #16]
    9aac:	9905      	ldr	r1, [sp, #20]
    9aae:	0032      	movs	r2, r6
    9ab0:	003b      	movs	r3, r7
    9ab2:	f001 fd19 	bl	b4e8 <__aeabi_dadd>
    9ab6:	9a08      	ldr	r2, [sp, #32]
    9ab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9aba:	f001 fd15 	bl	b4e8 <__aeabi_dadd>
    9abe:	0022      	movs	r2, r4
    9ac0:	002b      	movs	r3, r5
    9ac2:	f001 fd11 	bl	b4e8 <__aeabi_dadd>
    9ac6:	2000      	movs	r0, #0
    9ac8:	0022      	movs	r2, r4
    9aca:	002b      	movs	r3, r5
    9acc:	9002      	str	r0, [sp, #8]
    9ace:	9103      	str	r1, [sp, #12]
    9ad0:	f002 fece 	bl	c870 <__aeabi_dsub>
    9ad4:	9a08      	ldr	r2, [sp, #32]
    9ad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9ad8:	f002 feca 	bl	c870 <__aeabi_dsub>
    9adc:	9a04      	ldr	r2, [sp, #16]
    9ade:	9b05      	ldr	r3, [sp, #20]
    9ae0:	f002 fec6 	bl	c870 <__aeabi_dsub>
    9ae4:	0002      	movs	r2, r0
    9ae6:	000b      	movs	r3, r1
    9ae8:	0030      	movs	r0, r6
    9aea:	0039      	movs	r1, r7
    9aec:	f002 fec0 	bl	c870 <__aeabi_dsub>
    9af0:	9004      	str	r0, [sp, #16]
    9af2:	9105      	str	r1, [sp, #20]
    9af4:	465b      	mov	r3, fp
    9af6:	4642      	mov	r2, r8
    9af8:	3b01      	subs	r3, #1
    9afa:	4313      	orrs	r3, r2
    9afc:	d100      	bne.n	9b00 <__ieee754_pow+0x4f8>
    9afe:	e1ab      	b.n	9e58 <__ieee754_pow+0x850>
    9b00:	2300      	movs	r3, #0
    9b02:	4c2c      	ldr	r4, [pc, #176]	; (9bb4 <__ieee754_pow+0x5ac>)
    9b04:	9306      	str	r3, [sp, #24]
    9b06:	9407      	str	r4, [sp, #28]
    9b08:	9800      	ldr	r0, [sp, #0]
    9b0a:	9901      	ldr	r1, [sp, #4]
    9b0c:	2600      	movs	r6, #0
    9b0e:	000b      	movs	r3, r1
    9b10:	0032      	movs	r2, r6
    9b12:	000f      	movs	r7, r1
    9b14:	f002 feac 	bl	c870 <__aeabi_dsub>
    9b18:	9a02      	ldr	r2, [sp, #8]
    9b1a:	9b03      	ldr	r3, [sp, #12]
    9b1c:	f002 fc28 	bl	c370 <__aeabi_dmul>
    9b20:	9a00      	ldr	r2, [sp, #0]
    9b22:	9b01      	ldr	r3, [sp, #4]
    9b24:	0004      	movs	r4, r0
    9b26:	000d      	movs	r5, r1
    9b28:	9804      	ldr	r0, [sp, #16]
    9b2a:	9905      	ldr	r1, [sp, #20]
    9b2c:	f002 fc20 	bl	c370 <__aeabi_dmul>
    9b30:	0002      	movs	r2, r0
    9b32:	000b      	movs	r3, r1
    9b34:	0020      	movs	r0, r4
    9b36:	0029      	movs	r1, r5
    9b38:	f001 fcd6 	bl	b4e8 <__aeabi_dadd>
    9b3c:	0004      	movs	r4, r0
    9b3e:	000d      	movs	r5, r1
    9b40:	9802      	ldr	r0, [sp, #8]
    9b42:	9903      	ldr	r1, [sp, #12]
    9b44:	0032      	movs	r2, r6
    9b46:	003b      	movs	r3, r7
    9b48:	9400      	str	r4, [sp, #0]
    9b4a:	9501      	str	r5, [sp, #4]
    9b4c:	f002 fc10 	bl	c370 <__aeabi_dmul>
    9b50:	0002      	movs	r2, r0
    9b52:	000b      	movs	r3, r1
    9b54:	0006      	movs	r6, r0
    9b56:	000f      	movs	r7, r1
    9b58:	0020      	movs	r0, r4
    9b5a:	0029      	movs	r1, r5
    9b5c:	f001 fcc4 	bl	b4e8 <__aeabi_dadd>
    9b60:	4b29      	ldr	r3, [pc, #164]	; (9c08 <__ieee754_pow+0x600>)
    9b62:	0004      	movs	r4, r0
    9b64:	000d      	movs	r5, r1
    9b66:	0002      	movs	r2, r0
    9b68:	468b      	mov	fp, r1
    9b6a:	4299      	cmp	r1, r3
    9b6c:	dc00      	bgt.n	9b70 <__ieee754_pow+0x568>
    9b6e:	e14f      	b.n	9e10 <__ieee754_pow+0x808>
    9b70:	4b26      	ldr	r3, [pc, #152]	; (9c0c <__ieee754_pow+0x604>)
    9b72:	18cb      	adds	r3, r1, r3
    9b74:	4303      	orrs	r3, r0
    9b76:	d000      	beq.n	9b7a <__ieee754_pow+0x572>
    9b78:	e1e2      	b.n	9f40 <__ieee754_pow+0x938>
    9b7a:	9800      	ldr	r0, [sp, #0]
    9b7c:	9901      	ldr	r1, [sp, #4]
    9b7e:	4a24      	ldr	r2, [pc, #144]	; (9c10 <__ieee754_pow+0x608>)
    9b80:	4b24      	ldr	r3, [pc, #144]	; (9c14 <__ieee754_pow+0x60c>)
    9b82:	f001 fcb1 	bl	b4e8 <__aeabi_dadd>
    9b86:	0032      	movs	r2, r6
    9b88:	9002      	str	r0, [sp, #8]
    9b8a:	9103      	str	r1, [sp, #12]
    9b8c:	003b      	movs	r3, r7
    9b8e:	0020      	movs	r0, r4
    9b90:	0029      	movs	r1, r5
    9b92:	f002 fe6d 	bl	c870 <__aeabi_dsub>
    9b96:	0002      	movs	r2, r0
    9b98:	000b      	movs	r3, r1
    9b9a:	9802      	ldr	r0, [sp, #8]
    9b9c:	9903      	ldr	r1, [sp, #12]
    9b9e:	f000 fe11 	bl	a7c4 <__aeabi_dcmpgt>
    9ba2:	46aa      	mov	sl, r5
    9ba4:	e038      	b.n	9c18 <__ieee754_pow+0x610>
    9ba6:	46c0      	nop			; (mov r8, r8)
    9ba8:	000fffff 	.word	0x000fffff
    9bac:	43400000 	.word	0x43400000
    9bb0:	fffffc01 	.word	0xfffffc01
    9bb4:	3ff00000 	.word	0x3ff00000
    9bb8:	0003988e 	.word	0x0003988e
    9bbc:	000bb679 	.word	0x000bb679
    9bc0:	fff00000 	.word	0xfff00000
    9bc4:	4a454eef 	.word	0x4a454eef
    9bc8:	3fca7e28 	.word	0x3fca7e28
    9bcc:	93c9db65 	.word	0x93c9db65
    9bd0:	3fcd864a 	.word	0x3fcd864a
    9bd4:	a91d4101 	.word	0xa91d4101
    9bd8:	3fd17460 	.word	0x3fd17460
    9bdc:	518f264d 	.word	0x518f264d
    9be0:	3fd55555 	.word	0x3fd55555
    9be4:	db6fabff 	.word	0xdb6fabff
    9be8:	3fdb6db6 	.word	0x3fdb6db6
    9bec:	33333303 	.word	0x33333303
    9bf0:	3fe33333 	.word	0x3fe33333
    9bf4:	40080000 	.word	0x40080000
    9bf8:	3feec709 	.word	0x3feec709
    9bfc:	dc3a03fd 	.word	0xdc3a03fd
    9c00:	145b01f5 	.word	0x145b01f5
    9c04:	be3e2fe0 	.word	0xbe3e2fe0
    9c08:	408fffff 	.word	0x408fffff
    9c0c:	bf700000 	.word	0xbf700000
    9c10:	652b82fe 	.word	0x652b82fe
    9c14:	3c971547 	.word	0x3c971547
    9c18:	2800      	cmp	r0, #0
    9c1a:	d000      	beq.n	9c1e <__ieee754_pow+0x616>
    9c1c:	e190      	b.n	9f40 <__ieee754_pow+0x938>
    9c1e:	4aec      	ldr	r2, [pc, #944]	; (9fd0 <__ieee754_pow+0x9c8>)
    9c20:	4653      	mov	r3, sl
    9c22:	4694      	mov	ip, r2
    9c24:	2280      	movs	r2, #128	; 0x80
    9c26:	0352      	lsls	r2, r2, #13
    9c28:	0011      	movs	r1, r2
    9c2a:	151b      	asrs	r3, r3, #20
    9c2c:	4463      	add	r3, ip
    9c2e:	4119      	asrs	r1, r3
    9c30:	000b      	movs	r3, r1
    9c32:	4690      	mov	r8, r2
    9c34:	4ae7      	ldr	r2, [pc, #924]	; (9fd4 <__ieee754_pow+0x9cc>)
    9c36:	445b      	add	r3, fp
    9c38:	4694      	mov	ip, r2
    9c3a:	005c      	lsls	r4, r3, #1
    9c3c:	0d64      	lsrs	r4, r4, #21
    9c3e:	4de6      	ldr	r5, [pc, #920]	; (9fd8 <__ieee754_pow+0x9d0>)
    9c40:	4464      	add	r4, ip
    9c42:	4125      	asrs	r5, r4
    9c44:	001a      	movs	r2, r3
    9c46:	43aa      	bics	r2, r5
    9c48:	0011      	movs	r1, r2
    9c4a:	4642      	mov	r2, r8
    9c4c:	031b      	lsls	r3, r3, #12
    9c4e:	0b1b      	lsrs	r3, r3, #12
    9c50:	4313      	orrs	r3, r2
    9c52:	2214      	movs	r2, #20
    9c54:	1b14      	subs	r4, r2, r4
    9c56:	4123      	asrs	r3, r4
    9c58:	4699      	mov	r9, r3
    9c5a:	465b      	mov	r3, fp
    9c5c:	2000      	movs	r0, #0
    9c5e:	2b00      	cmp	r3, #0
    9c60:	da00      	bge.n	9c64 <__ieee754_pow+0x65c>
    9c62:	e1b0      	b.n	9fc6 <__ieee754_pow+0x9be>
    9c64:	0002      	movs	r2, r0
    9c66:	000b      	movs	r3, r1
    9c68:	0030      	movs	r0, r6
    9c6a:	0039      	movs	r1, r7
    9c6c:	f002 fe00 	bl	c870 <__aeabi_dsub>
    9c70:	000b      	movs	r3, r1
    9c72:	0002      	movs	r2, r0
    9c74:	0006      	movs	r6, r0
    9c76:	000f      	movs	r7, r1
    9c78:	9800      	ldr	r0, [sp, #0]
    9c7a:	9901      	ldr	r1, [sp, #4]
    9c7c:	f001 fc34 	bl	b4e8 <__aeabi_dadd>
    9c80:	464b      	mov	r3, r9
    9c82:	051b      	lsls	r3, r3, #20
    9c84:	000d      	movs	r5, r1
    9c86:	4698      	mov	r8, r3
    9c88:	2400      	movs	r4, #0
    9c8a:	2200      	movs	r2, #0
    9c8c:	4bd3      	ldr	r3, [pc, #844]	; (9fdc <__ieee754_pow+0x9d4>)
    9c8e:	0020      	movs	r0, r4
    9c90:	0029      	movs	r1, r5
    9c92:	f002 fb6d 	bl	c370 <__aeabi_dmul>
    9c96:	0032      	movs	r2, r6
    9c98:	9002      	str	r0, [sp, #8]
    9c9a:	9103      	str	r1, [sp, #12]
    9c9c:	003b      	movs	r3, r7
    9c9e:	0020      	movs	r0, r4
    9ca0:	0029      	movs	r1, r5
    9ca2:	f002 fde5 	bl	c870 <__aeabi_dsub>
    9ca6:	0002      	movs	r2, r0
    9ca8:	000b      	movs	r3, r1
    9caa:	9800      	ldr	r0, [sp, #0]
    9cac:	9901      	ldr	r1, [sp, #4]
    9cae:	f002 fddf 	bl	c870 <__aeabi_dsub>
    9cb2:	4acb      	ldr	r2, [pc, #812]	; (9fe0 <__ieee754_pow+0x9d8>)
    9cb4:	4bcb      	ldr	r3, [pc, #812]	; (9fe4 <__ieee754_pow+0x9dc>)
    9cb6:	f002 fb5b 	bl	c370 <__aeabi_dmul>
    9cba:	4acb      	ldr	r2, [pc, #812]	; (9fe8 <__ieee754_pow+0x9e0>)
    9cbc:	0006      	movs	r6, r0
    9cbe:	000f      	movs	r7, r1
    9cc0:	4bca      	ldr	r3, [pc, #808]	; (9fec <__ieee754_pow+0x9e4>)
    9cc2:	0020      	movs	r0, r4
    9cc4:	0029      	movs	r1, r5
    9cc6:	f002 fb53 	bl	c370 <__aeabi_dmul>
    9cca:	0002      	movs	r2, r0
    9ccc:	000b      	movs	r3, r1
    9cce:	0030      	movs	r0, r6
    9cd0:	0039      	movs	r1, r7
    9cd2:	f001 fc09 	bl	b4e8 <__aeabi_dadd>
    9cd6:	0004      	movs	r4, r0
    9cd8:	000d      	movs	r5, r1
    9cda:	0002      	movs	r2, r0
    9cdc:	000b      	movs	r3, r1
    9cde:	9802      	ldr	r0, [sp, #8]
    9ce0:	9903      	ldr	r1, [sp, #12]
    9ce2:	f001 fc01 	bl	b4e8 <__aeabi_dadd>
    9ce6:	9a02      	ldr	r2, [sp, #8]
    9ce8:	9b03      	ldr	r3, [sp, #12]
    9cea:	0006      	movs	r6, r0
    9cec:	000f      	movs	r7, r1
    9cee:	f002 fdbf 	bl	c870 <__aeabi_dsub>
    9cf2:	0002      	movs	r2, r0
    9cf4:	000b      	movs	r3, r1
    9cf6:	0020      	movs	r0, r4
    9cf8:	0029      	movs	r1, r5
    9cfa:	f002 fdb9 	bl	c870 <__aeabi_dsub>
    9cfe:	0032      	movs	r2, r6
    9d00:	9000      	str	r0, [sp, #0]
    9d02:	9101      	str	r1, [sp, #4]
    9d04:	003b      	movs	r3, r7
    9d06:	0030      	movs	r0, r6
    9d08:	0039      	movs	r1, r7
    9d0a:	f002 fb31 	bl	c370 <__aeabi_dmul>
    9d0e:	0004      	movs	r4, r0
    9d10:	000d      	movs	r5, r1
    9d12:	4ab7      	ldr	r2, [pc, #732]	; (9ff0 <__ieee754_pow+0x9e8>)
    9d14:	4bb7      	ldr	r3, [pc, #732]	; (9ff4 <__ieee754_pow+0x9ec>)
    9d16:	f002 fb2b 	bl	c370 <__aeabi_dmul>
    9d1a:	4ab7      	ldr	r2, [pc, #732]	; (9ff8 <__ieee754_pow+0x9f0>)
    9d1c:	4bb7      	ldr	r3, [pc, #732]	; (9ffc <__ieee754_pow+0x9f4>)
    9d1e:	f002 fda7 	bl	c870 <__aeabi_dsub>
    9d22:	0022      	movs	r2, r4
    9d24:	002b      	movs	r3, r5
    9d26:	f002 fb23 	bl	c370 <__aeabi_dmul>
    9d2a:	4ab5      	ldr	r2, [pc, #724]	; (a000 <__ieee754_pow+0x9f8>)
    9d2c:	4bb5      	ldr	r3, [pc, #724]	; (a004 <__ieee754_pow+0x9fc>)
    9d2e:	f001 fbdb 	bl	b4e8 <__aeabi_dadd>
    9d32:	0022      	movs	r2, r4
    9d34:	002b      	movs	r3, r5
    9d36:	f002 fb1b 	bl	c370 <__aeabi_dmul>
    9d3a:	4ab3      	ldr	r2, [pc, #716]	; (a008 <__ieee754_pow+0xa00>)
    9d3c:	4bb3      	ldr	r3, [pc, #716]	; (a00c <__ieee754_pow+0xa04>)
    9d3e:	f002 fd97 	bl	c870 <__aeabi_dsub>
    9d42:	0022      	movs	r2, r4
    9d44:	002b      	movs	r3, r5
    9d46:	f002 fb13 	bl	c370 <__aeabi_dmul>
    9d4a:	4ab1      	ldr	r2, [pc, #708]	; (a010 <__ieee754_pow+0xa08>)
    9d4c:	4bb1      	ldr	r3, [pc, #708]	; (a014 <__ieee754_pow+0xa0c>)
    9d4e:	f001 fbcb 	bl	b4e8 <__aeabi_dadd>
    9d52:	0022      	movs	r2, r4
    9d54:	002b      	movs	r3, r5
    9d56:	f002 fb0b 	bl	c370 <__aeabi_dmul>
    9d5a:	0002      	movs	r2, r0
    9d5c:	000b      	movs	r3, r1
    9d5e:	0030      	movs	r0, r6
    9d60:	0039      	movs	r1, r7
    9d62:	f002 fd85 	bl	c870 <__aeabi_dsub>
    9d66:	0004      	movs	r4, r0
    9d68:	000d      	movs	r5, r1
    9d6a:	0002      	movs	r2, r0
    9d6c:	000b      	movs	r3, r1
    9d6e:	0030      	movs	r0, r6
    9d70:	0039      	movs	r1, r7
    9d72:	f002 fafd 	bl	c370 <__aeabi_dmul>
    9d76:	2380      	movs	r3, #128	; 0x80
    9d78:	9002      	str	r0, [sp, #8]
    9d7a:	9103      	str	r1, [sp, #12]
    9d7c:	2200      	movs	r2, #0
    9d7e:	05db      	lsls	r3, r3, #23
    9d80:	0020      	movs	r0, r4
    9d82:	0029      	movs	r1, r5
    9d84:	f002 fd74 	bl	c870 <__aeabi_dsub>
    9d88:	0002      	movs	r2, r0
    9d8a:	000b      	movs	r3, r1
    9d8c:	9802      	ldr	r0, [sp, #8]
    9d8e:	9903      	ldr	r1, [sp, #12]
    9d90:	f001 feba 	bl	bb08 <__aeabi_ddiv>
    9d94:	9a00      	ldr	r2, [sp, #0]
    9d96:	9b01      	ldr	r3, [sp, #4]
    9d98:	0004      	movs	r4, r0
    9d9a:	000d      	movs	r5, r1
    9d9c:	0030      	movs	r0, r6
    9d9e:	0039      	movs	r1, r7
    9da0:	f002 fae6 	bl	c370 <__aeabi_dmul>
    9da4:	9a00      	ldr	r2, [sp, #0]
    9da6:	9b01      	ldr	r3, [sp, #4]
    9da8:	f001 fb9e 	bl	b4e8 <__aeabi_dadd>
    9dac:	0002      	movs	r2, r0
    9dae:	000b      	movs	r3, r1
    9db0:	0020      	movs	r0, r4
    9db2:	0029      	movs	r1, r5
    9db4:	f002 fd5c 	bl	c870 <__aeabi_dsub>
    9db8:	0032      	movs	r2, r6
    9dba:	003b      	movs	r3, r7
    9dbc:	f002 fd58 	bl	c870 <__aeabi_dsub>
    9dc0:	0002      	movs	r2, r0
    9dc2:	000b      	movs	r3, r1
    9dc4:	2000      	movs	r0, #0
    9dc6:	4994      	ldr	r1, [pc, #592]	; (a018 <__ieee754_pow+0xa10>)
    9dc8:	f002 fd52 	bl	c870 <__aeabi_dsub>
    9dcc:	4643      	mov	r3, r8
    9dce:	185b      	adds	r3, r3, r1
    9dd0:	151a      	asrs	r2, r3, #20
    9dd2:	2a00      	cmp	r2, #0
    9dd4:	dc00      	bgt.n	9dd8 <__ieee754_pow+0x7d0>
    9dd6:	e149      	b.n	a06c <__ieee754_pow+0xa64>
    9dd8:	0019      	movs	r1, r3
    9dda:	9a06      	ldr	r2, [sp, #24]
    9ddc:	9b07      	ldr	r3, [sp, #28]
    9dde:	f002 fac7 	bl	c370 <__aeabi_dmul>
    9de2:	e459      	b.n	9698 <__ieee754_pow+0x90>
    9de4:	003a      	movs	r2, r7
    9de6:	0033      	movs	r3, r6
    9de8:	0038      	movs	r0, r7
    9dea:	0031      	movs	r1, r6
    9dec:	f002 fac0 	bl	c370 <__aeabi_dmul>
    9df0:	e452      	b.n	9698 <__ieee754_pow+0x90>
    9df2:	4653      	mov	r3, sl
    9df4:	2b00      	cmp	r3, #0
    9df6:	db00      	blt.n	9dfa <__ieee754_pow+0x7f2>
    9df8:	e4d9      	b.n	97ae <__ieee754_pow+0x1a6>
    9dfa:	9c00      	ldr	r4, [sp, #0]
    9dfc:	9d01      	ldr	r5, [sp, #4]
    9dfe:	2280      	movs	r2, #128	; 0x80
    9e00:	0612      	lsls	r2, r2, #24
    9e02:	002b      	movs	r3, r5
    9e04:	4694      	mov	ip, r2
    9e06:	4463      	add	r3, ip
    9e08:	0020      	movs	r0, r4
    9e0a:	0019      	movs	r1, r3
    9e0c:	f7ff fc44 	bl	9698 <__ieee754_pow+0x90>
    9e10:	004b      	lsls	r3, r1, #1
    9e12:	085b      	lsrs	r3, r3, #1
    9e14:	469a      	mov	sl, r3
    9e16:	4b81      	ldr	r3, [pc, #516]	; (a01c <__ieee754_pow+0xa14>)
    9e18:	459a      	cmp	sl, r3
    9e1a:	dc00      	bgt.n	9e1e <__ieee754_pow+0x816>
    9e1c:	e0b1      	b.n	9f82 <__ieee754_pow+0x97a>
    9e1e:	4b80      	ldr	r3, [pc, #512]	; (a020 <__ieee754_pow+0xa18>)
    9e20:	445b      	add	r3, fp
    9e22:	431a      	orrs	r2, r3
    9e24:	d10c      	bne.n	9e40 <__ieee754_pow+0x838>
    9e26:	0032      	movs	r2, r6
    9e28:	003b      	movs	r3, r7
    9e2a:	f002 fd21 	bl	c870 <__aeabi_dsub>
    9e2e:	0002      	movs	r2, r0
    9e30:	000b      	movs	r3, r1
    9e32:	9800      	ldr	r0, [sp, #0]
    9e34:	9901      	ldr	r1, [sp, #4]
    9e36:	f000 fcbb 	bl	a7b0 <__aeabi_dcmple>
    9e3a:	2800      	cmp	r0, #0
    9e3c:	d100      	bne.n	9e40 <__ieee754_pow+0x838>
    9e3e:	e6ee      	b.n	9c1e <__ieee754_pow+0x616>
    9e40:	9806      	ldr	r0, [sp, #24]
    9e42:	9907      	ldr	r1, [sp, #28]
    9e44:	4a77      	ldr	r2, [pc, #476]	; (a024 <__ieee754_pow+0xa1c>)
    9e46:	4b78      	ldr	r3, [pc, #480]	; (a028 <__ieee754_pow+0xa20>)
    9e48:	f002 fa92 	bl	c370 <__aeabi_dmul>
    9e4c:	4a75      	ldr	r2, [pc, #468]	; (a024 <__ieee754_pow+0xa1c>)
    9e4e:	4b76      	ldr	r3, [pc, #472]	; (a028 <__ieee754_pow+0xa20>)
    9e50:	f002 fa8e 	bl	c370 <__aeabi_dmul>
    9e54:	f7ff fc20 	bl	9698 <__ieee754_pow+0x90>
    9e58:	2300      	movs	r3, #0
    9e5a:	4c74      	ldr	r4, [pc, #464]	; (a02c <__ieee754_pow+0xa24>)
    9e5c:	9306      	str	r3, [sp, #24]
    9e5e:	9407      	str	r4, [sp, #28]
    9e60:	e652      	b.n	9b08 <__ieee754_pow+0x500>
    9e62:	0002      	movs	r2, r0
    9e64:	000b      	movs	r3, r1
    9e66:	2000      	movs	r0, #0
    9e68:	496b      	ldr	r1, [pc, #428]	; (a018 <__ieee754_pow+0xa10>)
    9e6a:	f001 fe4d 	bl	bb08 <__aeabi_ddiv>
    9e6e:	f7ff fc32 	bl	96d6 <__ieee754_pow+0xce>
    9e72:	4653      	mov	r3, sl
    9e74:	2b00      	cmp	r3, #0
    9e76:	db00      	blt.n	9e7a <__ieee754_pow+0x872>
    9e78:	e499      	b.n	97ae <__ieee754_pow+0x1a6>
    9e7a:	e454      	b.n	9726 <__ieee754_pow+0x11e>
    9e7c:	4b6c      	ldr	r3, [pc, #432]	; (a030 <__ieee754_pow+0xa28>)
    9e7e:	429c      	cmp	r4, r3
    9e80:	ddf7      	ble.n	9e72 <__ieee754_pow+0x86a>
    9e82:	4b65      	ldr	r3, [pc, #404]	; (a018 <__ieee754_pow+0xa10>)
    9e84:	429c      	cmp	r4, r3
    9e86:	dd00      	ble.n	9e8a <__ieee754_pow+0x882>
    9e88:	e44a      	b.n	9720 <__ieee754_pow+0x118>
    9e8a:	2200      	movs	r2, #0
    9e8c:	4b62      	ldr	r3, [pc, #392]	; (a018 <__ieee754_pow+0xa10>)
    9e8e:	f002 fcef 	bl	c870 <__aeabi_dsub>
    9e92:	22c0      	movs	r2, #192	; 0xc0
    9e94:	4b67      	ldr	r3, [pc, #412]	; (a034 <__ieee754_pow+0xa2c>)
    9e96:	05d2      	lsls	r2, r2, #23
    9e98:	0004      	movs	r4, r0
    9e9a:	000d      	movs	r5, r1
    9e9c:	f002 fa68 	bl	c370 <__aeabi_dmul>
    9ea0:	4a65      	ldr	r2, [pc, #404]	; (a038 <__ieee754_pow+0xa30>)
    9ea2:	0006      	movs	r6, r0
    9ea4:	000f      	movs	r7, r1
    9ea6:	4b65      	ldr	r3, [pc, #404]	; (a03c <__ieee754_pow+0xa34>)
    9ea8:	0020      	movs	r0, r4
    9eaa:	0029      	movs	r1, r5
    9eac:	f002 fa60 	bl	c370 <__aeabi_dmul>
    9eb0:	2200      	movs	r2, #0
    9eb2:	9002      	str	r0, [sp, #8]
    9eb4:	9103      	str	r1, [sp, #12]
    9eb6:	4b62      	ldr	r3, [pc, #392]	; (a040 <__ieee754_pow+0xa38>)
    9eb8:	0020      	movs	r0, r4
    9eba:	0029      	movs	r1, r5
    9ebc:	f002 fa58 	bl	c370 <__aeabi_dmul>
    9ec0:	0002      	movs	r2, r0
    9ec2:	000b      	movs	r3, r1
    9ec4:	485f      	ldr	r0, [pc, #380]	; (a044 <__ieee754_pow+0xa3c>)
    9ec6:	4960      	ldr	r1, [pc, #384]	; (a048 <__ieee754_pow+0xa40>)
    9ec8:	f002 fcd2 	bl	c870 <__aeabi_dsub>
    9ecc:	0022      	movs	r2, r4
    9ece:	002b      	movs	r3, r5
    9ed0:	f002 fa4e 	bl	c370 <__aeabi_dmul>
    9ed4:	0002      	movs	r2, r0
    9ed6:	000b      	movs	r3, r1
    9ed8:	2000      	movs	r0, #0
    9eda:	495c      	ldr	r1, [pc, #368]	; (a04c <__ieee754_pow+0xa44>)
    9edc:	f002 fcc8 	bl	c870 <__aeabi_dsub>
    9ee0:	0022      	movs	r2, r4
    9ee2:	9004      	str	r0, [sp, #16]
    9ee4:	9105      	str	r1, [sp, #20]
    9ee6:	002b      	movs	r3, r5
    9ee8:	0020      	movs	r0, r4
    9eea:	0029      	movs	r1, r5
    9eec:	f002 fa40 	bl	c370 <__aeabi_dmul>
    9ef0:	0002      	movs	r2, r0
    9ef2:	000b      	movs	r3, r1
    9ef4:	9804      	ldr	r0, [sp, #16]
    9ef6:	9905      	ldr	r1, [sp, #20]
    9ef8:	f002 fa3a 	bl	c370 <__aeabi_dmul>
    9efc:	4a54      	ldr	r2, [pc, #336]	; (a050 <__ieee754_pow+0xa48>)
    9efe:	4b4d      	ldr	r3, [pc, #308]	; (a034 <__ieee754_pow+0xa2c>)
    9f00:	f002 fa36 	bl	c370 <__aeabi_dmul>
    9f04:	0002      	movs	r2, r0
    9f06:	000b      	movs	r3, r1
    9f08:	9802      	ldr	r0, [sp, #8]
    9f0a:	9903      	ldr	r1, [sp, #12]
    9f0c:	f002 fcb0 	bl	c870 <__aeabi_dsub>
    9f10:	0002      	movs	r2, r0
    9f12:	000b      	movs	r3, r1
    9f14:	0004      	movs	r4, r0
    9f16:	000d      	movs	r5, r1
    9f18:	0030      	movs	r0, r6
    9f1a:	0039      	movs	r1, r7
    9f1c:	f001 fae4 	bl	b4e8 <__aeabi_dadd>
    9f20:	2000      	movs	r0, #0
    9f22:	0032      	movs	r2, r6
    9f24:	003b      	movs	r3, r7
    9f26:	9002      	str	r0, [sp, #8]
    9f28:	9103      	str	r1, [sp, #12]
    9f2a:	f002 fca1 	bl	c870 <__aeabi_dsub>
    9f2e:	0002      	movs	r2, r0
    9f30:	000b      	movs	r3, r1
    9f32:	0020      	movs	r0, r4
    9f34:	0029      	movs	r1, r5
    9f36:	f002 fc9b 	bl	c870 <__aeabi_dsub>
    9f3a:	9004      	str	r0, [sp, #16]
    9f3c:	9105      	str	r1, [sp, #20]
    9f3e:	e5d9      	b.n	9af4 <__ieee754_pow+0x4ec>
    9f40:	4a44      	ldr	r2, [pc, #272]	; (a054 <__ieee754_pow+0xa4c>)
    9f42:	4b45      	ldr	r3, [pc, #276]	; (a058 <__ieee754_pow+0xa50>)
    9f44:	9806      	ldr	r0, [sp, #24]
    9f46:	9907      	ldr	r1, [sp, #28]
    9f48:	f002 fa12 	bl	c370 <__aeabi_dmul>
    9f4c:	4a41      	ldr	r2, [pc, #260]	; (a054 <__ieee754_pow+0xa4c>)
    9f4e:	4b42      	ldr	r3, [pc, #264]	; (a058 <__ieee754_pow+0xa50>)
    9f50:	f002 fa0e 	bl	c370 <__aeabi_dmul>
    9f54:	f7ff fba0 	bl	9698 <__ieee754_pow+0x90>
    9f58:	2a00      	cmp	r2, #0
    9f5a:	d001      	beq.n	9f60 <__ieee754_pow+0x958>
    9f5c:	f7ff fba9 	bl	96b2 <__ieee754_pow+0xaa>
    9f60:	3214      	adds	r2, #20
    9f62:	1ad3      	subs	r3, r2, r3
    9f64:	002a      	movs	r2, r5
    9f66:	411a      	asrs	r2, r3
    9f68:	0011      	movs	r1, r2
    9f6a:	4099      	lsls	r1, r3
    9f6c:	428d      	cmp	r5, r1
    9f6e:	d001      	beq.n	9f74 <__ieee754_pow+0x96c>
    9f70:	f7ff fb76 	bl	9660 <__ieee754_pow+0x58>
    9f74:	2301      	movs	r3, #1
    9f76:	401a      	ands	r2, r3
    9f78:	18db      	adds	r3, r3, r3
    9f7a:	1a9b      	subs	r3, r3, r2
    9f7c:	469b      	mov	fp, r3
    9f7e:	f7ff fb6f 	bl	9660 <__ieee754_pow+0x58>
    9f82:	2200      	movs	r2, #0
    9f84:	4b31      	ldr	r3, [pc, #196]	; (a04c <__ieee754_pow+0xa44>)
    9f86:	4690      	mov	r8, r2
    9f88:	4691      	mov	r9, r2
    9f8a:	459a      	cmp	sl, r3
    9f8c:	dc00      	bgt.n	9f90 <__ieee754_pow+0x988>
    9f8e:	e67b      	b.n	9c88 <__ieee754_pow+0x680>
    9f90:	e645      	b.n	9c1e <__ieee754_pow+0x616>
    9f92:	0002      	movs	r2, r0
    9f94:	000b      	movs	r3, r1
    9f96:	f002 fc6b 	bl	c870 <__aeabi_dsub>
    9f9a:	0002      	movs	r2, r0
    9f9c:	000b      	movs	r3, r1
    9f9e:	f001 fdb3 	bl	bb08 <__aeabi_ddiv>
    9fa2:	f7ff fb79 	bl	9698 <__ieee754_pow+0x90>
    9fa6:	2380      	movs	r3, #128	; 0x80
    9fa8:	4c2c      	ldr	r4, [pc, #176]	; (a05c <__ieee754_pow+0xa54>)
    9faa:	05db      	lsls	r3, r3, #23
    9fac:	9308      	str	r3, [sp, #32]
    9fae:	9409      	str	r4, [sp, #36]	; 0x24
    9fb0:	4b2b      	ldr	r3, [pc, #172]	; (a060 <__ieee754_pow+0xa58>)
    9fb2:	4c2c      	ldr	r4, [pc, #176]	; (a064 <__ieee754_pow+0xa5c>)
    9fb4:	2200      	movs	r2, #0
    9fb6:	930c      	str	r3, [sp, #48]	; 0x30
    9fb8:	940d      	str	r4, [sp, #52]	; 0x34
    9fba:	2480      	movs	r4, #128	; 0x80
    9fbc:	4b2a      	ldr	r3, [pc, #168]	; (a068 <__ieee754_pow+0xa60>)
    9fbe:	02e4      	lsls	r4, r4, #11
    9fc0:	9206      	str	r2, [sp, #24]
    9fc2:	9307      	str	r3, [sp, #28]
    9fc4:	e449      	b.n	985a <__ieee754_pow+0x252>
    9fc6:	464b      	mov	r3, r9
    9fc8:	425b      	negs	r3, r3
    9fca:	4699      	mov	r9, r3
    9fcc:	e64a      	b.n	9c64 <__ieee754_pow+0x65c>
    9fce:	46c0      	nop			; (mov r8, r8)
    9fd0:	fffffc02 	.word	0xfffffc02
    9fd4:	fffffc01 	.word	0xfffffc01
    9fd8:	000fffff 	.word	0x000fffff
    9fdc:	3fe62e43 	.word	0x3fe62e43
    9fe0:	fefa39ef 	.word	0xfefa39ef
    9fe4:	3fe62e42 	.word	0x3fe62e42
    9fe8:	0ca86c39 	.word	0x0ca86c39
    9fec:	be205c61 	.word	0xbe205c61
    9ff0:	72bea4d0 	.word	0x72bea4d0
    9ff4:	3e663769 	.word	0x3e663769
    9ff8:	c5d26bf1 	.word	0xc5d26bf1
    9ffc:	3ebbbd41 	.word	0x3ebbbd41
    a000:	af25de2c 	.word	0xaf25de2c
    a004:	3f11566a 	.word	0x3f11566a
    a008:	16bebd93 	.word	0x16bebd93
    a00c:	3f66c16c 	.word	0x3f66c16c
    a010:	5555553e 	.word	0x5555553e
    a014:	3fc55555 	.word	0x3fc55555
    a018:	3ff00000 	.word	0x3ff00000
    a01c:	4090cbff 	.word	0x4090cbff
    a020:	3f6f3400 	.word	0x3f6f3400
    a024:	c2f8f359 	.word	0xc2f8f359
    a028:	01a56e1f 	.word	0x01a56e1f
    a02c:	bff00000 	.word	0xbff00000
    a030:	3feffffe 	.word	0x3feffffe
    a034:	3ff71547 	.word	0x3ff71547
    a038:	f85ddf44 	.word	0xf85ddf44
    a03c:	3e54ae0b 	.word	0x3e54ae0b
    a040:	3fd00000 	.word	0x3fd00000
    a044:	55555555 	.word	0x55555555
    a048:	3fd55555 	.word	0x3fd55555
    a04c:	3fe00000 	.word	0x3fe00000
    a050:	652b82fe 	.word	0x652b82fe
    a054:	8800759c 	.word	0x8800759c
    a058:	7e37e43c 	.word	0x7e37e43c
    a05c:	3fe2b803 	.word	0x3fe2b803
    a060:	43cfd006 	.word	0x43cfd006
    a064:	3e4cfdeb 	.word	0x3e4cfdeb
    a068:	3ff80000 	.word	0x3ff80000
    a06c:	464a      	mov	r2, r9
    a06e:	f000 f999 	bl	a3a4 <scalbn>
    a072:	e6b2      	b.n	9dda <__ieee754_pow+0x7d2>

0000a074 <__ieee754_sqrt>:
    a074:	4b6c      	ldr	r3, [pc, #432]	; (a228 <__ieee754_sqrt+0x1b4>)
    a076:	b5f0      	push	{r4, r5, r6, r7, lr}
    a078:	000a      	movs	r2, r1
    a07a:	4646      	mov	r6, r8
    a07c:	000d      	movs	r5, r1
    a07e:	46d6      	mov	lr, sl
    a080:	464f      	mov	r7, r9
    a082:	0019      	movs	r1, r3
    a084:	b5c0      	push	{r6, r7, lr}
    a086:	0004      	movs	r4, r0
    a088:	0006      	movs	r6, r0
    a08a:	4029      	ands	r1, r5
    a08c:	4299      	cmp	r1, r3
    a08e:	d100      	bne.n	a092 <__ieee754_sqrt+0x1e>
    a090:	e0a7      	b.n	a1e2 <__ieee754_sqrt+0x16e>
    a092:	2d00      	cmp	r5, #0
    a094:	dc00      	bgt.n	a098 <__ieee754_sqrt+0x24>
    a096:	e081      	b.n	a19c <__ieee754_sqrt+0x128>
    a098:	152f      	asrs	r7, r5, #20
    a09a:	d100      	bne.n	a09e <__ieee754_sqrt+0x2a>
    a09c:	e08e      	b.n	a1bc <__ieee754_sqrt+0x148>
    a09e:	4b63      	ldr	r3, [pc, #396]	; (a22c <__ieee754_sqrt+0x1b8>)
    a0a0:	0312      	lsls	r2, r2, #12
    a0a2:	469c      	mov	ip, r3
    a0a4:	2380      	movs	r3, #128	; 0x80
    a0a6:	0b12      	lsrs	r2, r2, #12
    a0a8:	035b      	lsls	r3, r3, #13
    a0aa:	4467      	add	r7, ip
    a0ac:	431a      	orrs	r2, r3
    a0ae:	07fb      	lsls	r3, r7, #31
    a0b0:	d468      	bmi.n	a184 <__ieee754_sqrt+0x110>
    a0b2:	107b      	asrs	r3, r7, #1
    a0b4:	469c      	mov	ip, r3
    a0b6:	0fe3      	lsrs	r3, r4, #31
    a0b8:	189b      	adds	r3, r3, r2
    a0ba:	189b      	adds	r3, r3, r2
    a0bc:	2280      	movs	r2, #128	; 0x80
    a0be:	2116      	movs	r1, #22
    a0c0:	2600      	movs	r6, #0
    a0c2:	2500      	movs	r5, #0
    a0c4:	0064      	lsls	r4, r4, #1
    a0c6:	0392      	lsls	r2, r2, #14
    a0c8:	18a8      	adds	r0, r5, r2
    a0ca:	4298      	cmp	r0, r3
    a0cc:	dc02      	bgt.n	a0d4 <__ieee754_sqrt+0x60>
    a0ce:	1885      	adds	r5, r0, r2
    a0d0:	1a1b      	subs	r3, r3, r0
    a0d2:	18b6      	adds	r6, r6, r2
    a0d4:	0fe0      	lsrs	r0, r4, #31
    a0d6:	005b      	lsls	r3, r3, #1
    a0d8:	3901      	subs	r1, #1
    a0da:	181b      	adds	r3, r3, r0
    a0dc:	0064      	lsls	r4, r4, #1
    a0de:	0852      	lsrs	r2, r2, #1
    a0e0:	2900      	cmp	r1, #0
    a0e2:	d1f1      	bne.n	a0c8 <__ieee754_sqrt+0x54>
    a0e4:	2200      	movs	r2, #0
    a0e6:	4692      	mov	sl, r2
    a0e8:	4690      	mov	r8, r2
    a0ea:	2280      	movs	r2, #128	; 0x80
    a0ec:	2020      	movs	r0, #32
    a0ee:	0612      	lsls	r2, r2, #24
    a0f0:	e009      	b.n	a106 <__ieee754_sqrt+0x92>
    a0f2:	42ab      	cmp	r3, r5
    a0f4:	d038      	beq.n	a168 <__ieee754_sqrt+0xf4>
    a0f6:	0fe1      	lsrs	r1, r4, #31
    a0f8:	18c9      	adds	r1, r1, r3
    a0fa:	3801      	subs	r0, #1
    a0fc:	18cb      	adds	r3, r1, r3
    a0fe:	0064      	lsls	r4, r4, #1
    a100:	0852      	lsrs	r2, r2, #1
    a102:	2800      	cmp	r0, #0
    a104:	d018      	beq.n	a138 <__ieee754_sqrt+0xc4>
    a106:	4641      	mov	r1, r8
    a108:	1851      	adds	r1, r2, r1
    a10a:	42ab      	cmp	r3, r5
    a10c:	ddf1      	ble.n	a0f2 <__ieee754_sqrt+0x7e>
    a10e:	188f      	adds	r7, r1, r2
    a110:	46b8      	mov	r8, r7
    a112:	46a9      	mov	r9, r5
    a114:	2900      	cmp	r1, #0
    a116:	db30      	blt.n	a17a <__ieee754_sqrt+0x106>
    a118:	1b5b      	subs	r3, r3, r5
    a11a:	428c      	cmp	r4, r1
    a11c:	41ad      	sbcs	r5, r5
    a11e:	426d      	negs	r5, r5
    a120:	1b5b      	subs	r3, r3, r5
    a122:	1a64      	subs	r4, r4, r1
    a124:	0fe1      	lsrs	r1, r4, #31
    a126:	18c9      	adds	r1, r1, r3
    a128:	3801      	subs	r0, #1
    a12a:	4492      	add	sl, r2
    a12c:	464d      	mov	r5, r9
    a12e:	18cb      	adds	r3, r1, r3
    a130:	0064      	lsls	r4, r4, #1
    a132:	0852      	lsrs	r2, r2, #1
    a134:	2800      	cmp	r0, #0
    a136:	d1e6      	bne.n	a106 <__ieee754_sqrt+0x92>
    a138:	4323      	orrs	r3, r4
    a13a:	d128      	bne.n	a18e <__ieee754_sqrt+0x11a>
    a13c:	4653      	mov	r3, sl
    a13e:	085b      	lsrs	r3, r3, #1
    a140:	493b      	ldr	r1, [pc, #236]	; (a230 <__ieee754_sqrt+0x1bc>)
    a142:	1072      	asrs	r2, r6, #1
    a144:	4688      	mov	r8, r1
    a146:	4442      	add	r2, r8
    a148:	07f1      	lsls	r1, r6, #31
    a14a:	d502      	bpl.n	a152 <__ieee754_sqrt+0xde>
    a14c:	2180      	movs	r1, #128	; 0x80
    a14e:	0609      	lsls	r1, r1, #24
    a150:	430b      	orrs	r3, r1
    a152:	4661      	mov	r1, ip
    a154:	001e      	movs	r6, r3
    a156:	050f      	lsls	r7, r1, #20
    a158:	18bd      	adds	r5, r7, r2
    a15a:	0030      	movs	r0, r6
    a15c:	0029      	movs	r1, r5
    a15e:	bc1c      	pop	{r2, r3, r4}
    a160:	4690      	mov	r8, r2
    a162:	4699      	mov	r9, r3
    a164:	46a2      	mov	sl, r4
    a166:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a168:	42a1      	cmp	r1, r4
    a16a:	d8c4      	bhi.n	a0f6 <__ieee754_sqrt+0x82>
    a16c:	188f      	adds	r7, r1, r2
    a16e:	46b8      	mov	r8, r7
    a170:	2900      	cmp	r1, #0
    a172:	db42      	blt.n	a1fa <__ieee754_sqrt+0x186>
    a174:	4699      	mov	r9, r3
    a176:	2300      	movs	r3, #0
    a178:	e7d3      	b.n	a122 <__ieee754_sqrt+0xae>
    a17a:	2f00      	cmp	r7, #0
    a17c:	db2f      	blt.n	a1de <__ieee754_sqrt+0x16a>
    a17e:	1c6f      	adds	r7, r5, #1
    a180:	46b9      	mov	r9, r7
    a182:	e7c9      	b.n	a118 <__ieee754_sqrt+0xa4>
    a184:	0fe1      	lsrs	r1, r4, #31
    a186:	0052      	lsls	r2, r2, #1
    a188:	188a      	adds	r2, r1, r2
    a18a:	0064      	lsls	r4, r4, #1
    a18c:	e791      	b.n	a0b2 <__ieee754_sqrt+0x3e>
    a18e:	4653      	mov	r3, sl
    a190:	3301      	adds	r3, #1
    a192:	d035      	beq.n	a200 <__ieee754_sqrt+0x18c>
    a194:	4653      	mov	r3, sl
    a196:	3301      	adds	r3, #1
    a198:	085b      	lsrs	r3, r3, #1
    a19a:	e7d1      	b.n	a140 <__ieee754_sqrt+0xcc>
    a19c:	006b      	lsls	r3, r5, #1
    a19e:	085b      	lsrs	r3, r3, #1
    a1a0:	4303      	orrs	r3, r0
    a1a2:	d0da      	beq.n	a15a <__ieee754_sqrt+0xe6>
    a1a4:	2700      	movs	r7, #0
    a1a6:	2d00      	cmp	r5, #0
    a1a8:	d132      	bne.n	a210 <__ieee754_sqrt+0x19c>
    a1aa:	0ae2      	lsrs	r2, r4, #11
    a1ac:	3f15      	subs	r7, #21
    a1ae:	0564      	lsls	r4, r4, #21
    a1b0:	2a00      	cmp	r2, #0
    a1b2:	d0fa      	beq.n	a1aa <__ieee754_sqrt+0x136>
    a1b4:	2380      	movs	r3, #128	; 0x80
    a1b6:	035b      	lsls	r3, r3, #13
    a1b8:	421a      	tst	r2, r3
    a1ba:	d124      	bne.n	a206 <__ieee754_sqrt+0x192>
    a1bc:	2080      	movs	r0, #128	; 0x80
    a1be:	2300      	movs	r3, #0
    a1c0:	0340      	lsls	r0, r0, #13
    a1c2:	e000      	b.n	a1c6 <__ieee754_sqrt+0x152>
    a1c4:	000b      	movs	r3, r1
    a1c6:	0052      	lsls	r2, r2, #1
    a1c8:	1c59      	adds	r1, r3, #1
    a1ca:	4202      	tst	r2, r0
    a1cc:	d0fa      	beq.n	a1c4 <__ieee754_sqrt+0x150>
    a1ce:	2020      	movs	r0, #32
    a1d0:	1a40      	subs	r0, r0, r1
    a1d2:	1aff      	subs	r7, r7, r3
    a1d4:	0023      	movs	r3, r4
    a1d6:	40c3      	lsrs	r3, r0
    a1d8:	408c      	lsls	r4, r1
    a1da:	431a      	orrs	r2, r3
    a1dc:	e75f      	b.n	a09e <__ieee754_sqrt+0x2a>
    a1de:	46a9      	mov	r9, r5
    a1e0:	e79a      	b.n	a118 <__ieee754_sqrt+0xa4>
    a1e2:	002b      	movs	r3, r5
    a1e4:	0002      	movs	r2, r0
    a1e6:	0029      	movs	r1, r5
    a1e8:	f002 f8c2 	bl	c370 <__aeabi_dmul>
    a1ec:	0032      	movs	r2, r6
    a1ee:	002b      	movs	r3, r5
    a1f0:	f001 f97a 	bl	b4e8 <__aeabi_dadd>
    a1f4:	0006      	movs	r6, r0
    a1f6:	000d      	movs	r5, r1
    a1f8:	e7af      	b.n	a15a <__ieee754_sqrt+0xe6>
    a1fa:	2f00      	cmp	r7, #0
    a1fc:	dabf      	bge.n	a17e <__ieee754_sqrt+0x10a>
    a1fe:	e7b9      	b.n	a174 <__ieee754_sqrt+0x100>
    a200:	3601      	adds	r6, #1
    a202:	2300      	movs	r3, #0
    a204:	e79c      	b.n	a140 <__ieee754_sqrt+0xcc>
    a206:	2301      	movs	r3, #1
    a208:	2100      	movs	r1, #0
    a20a:	2020      	movs	r0, #32
    a20c:	425b      	negs	r3, r3
    a20e:	e7e0      	b.n	a1d2 <__ieee754_sqrt+0x15e>
    a210:	002b      	movs	r3, r5
    a212:	0002      	movs	r2, r0
    a214:	0029      	movs	r1, r5
    a216:	f002 fb2b 	bl	c870 <__aeabi_dsub>
    a21a:	0002      	movs	r2, r0
    a21c:	000b      	movs	r3, r1
    a21e:	f001 fc73 	bl	bb08 <__aeabi_ddiv>
    a222:	0006      	movs	r6, r0
    a224:	000d      	movs	r5, r1
    a226:	e798      	b.n	a15a <__ieee754_sqrt+0xe6>
    a228:	7ff00000 	.word	0x7ff00000
    a22c:	fffffc01 	.word	0xfffffc01
    a230:	3fe00000 	.word	0x3fe00000

0000a234 <fabs>:
    a234:	0049      	lsls	r1, r1, #1
    a236:	084b      	lsrs	r3, r1, #1
    a238:	0019      	movs	r1, r3
    a23a:	4770      	bx	lr

0000a23c <finite>:
    a23c:	4b03      	ldr	r3, [pc, #12]	; (a24c <finite+0x10>)
    a23e:	0048      	lsls	r0, r1, #1
    a240:	469c      	mov	ip, r3
    a242:	0840      	lsrs	r0, r0, #1
    a244:	4460      	add	r0, ip
    a246:	0fc0      	lsrs	r0, r0, #31
    a248:	4770      	bx	lr
    a24a:	46c0      	nop			; (mov r8, r8)
    a24c:	80100000 	.word	0x80100000

0000a250 <matherr>:
    a250:	2000      	movs	r0, #0
    a252:	4770      	bx	lr

0000a254 <nan>:
    a254:	2000      	movs	r0, #0
    a256:	4901      	ldr	r1, [pc, #4]	; (a25c <nan+0x8>)
    a258:	4770      	bx	lr
    a25a:	46c0      	nop			; (mov r8, r8)
    a25c:	7ff80000 	.word	0x7ff80000

0000a260 <rint>:
    a260:	b5f0      	push	{r4, r5, r6, r7, lr}
    a262:	46c6      	mov	lr, r8
    a264:	b500      	push	{lr}
    a266:	0fcb      	lsrs	r3, r1, #31
    a268:	4698      	mov	r8, r3
    a26a:	4c4a      	ldr	r4, [pc, #296]	; (a394 <rint+0x134>)
    a26c:	004b      	lsls	r3, r1, #1
    a26e:	0d5b      	lsrs	r3, r3, #21
    a270:	191e      	adds	r6, r3, r4
    a272:	b082      	sub	sp, #8
    a274:	0007      	movs	r7, r0
    a276:	000a      	movs	r2, r1
    a278:	2e13      	cmp	r6, #19
    a27a:	dc35      	bgt.n	a2e8 <rint+0x88>
    a27c:	2e00      	cmp	r6, #0
    a27e:	db57      	blt.n	a330 <rint+0xd0>
    a280:	4b45      	ldr	r3, [pc, #276]	; (a398 <rint+0x138>)
    a282:	0004      	movs	r4, r0
    a284:	4133      	asrs	r3, r6
    a286:	001f      	movs	r7, r3
    a288:	400f      	ands	r7, r1
    a28a:	4307      	orrs	r7, r0
    a28c:	000d      	movs	r5, r1
    a28e:	2f00      	cmp	r7, #0
    a290:	d024      	beq.n	a2dc <rint+0x7c>
    a292:	085b      	lsrs	r3, r3, #1
    a294:	001c      	movs	r4, r3
    a296:	400c      	ands	r4, r1
    a298:	4320      	orrs	r0, r4
    a29a:	2700      	movs	r7, #0
    a29c:	2800      	cmp	r0, #0
    a29e:	d007      	beq.n	a2b0 <rint+0x50>
    a2a0:	2e13      	cmp	r6, #19
    a2a2:	d100      	bne.n	a2a6 <rint+0x46>
    a2a4:	e073      	b.n	a38e <rint+0x12e>
    a2a6:	2280      	movs	r2, #128	; 0x80
    a2a8:	02d2      	lsls	r2, r2, #11
    a2aa:	4132      	asrs	r2, r6
    a2ac:	4399      	bics	r1, r3
    a2ae:	430a      	orrs	r2, r1
    a2b0:	4643      	mov	r3, r8
    a2b2:	00de      	lsls	r6, r3, #3
    a2b4:	4b39      	ldr	r3, [pc, #228]	; (a39c <rint+0x13c>)
    a2b6:	0011      	movs	r1, r2
    a2b8:	199e      	adds	r6, r3, r6
    a2ba:	6834      	ldr	r4, [r6, #0]
    a2bc:	6875      	ldr	r5, [r6, #4]
    a2be:	0038      	movs	r0, r7
    a2c0:	0022      	movs	r2, r4
    a2c2:	002b      	movs	r3, r5
    a2c4:	f001 f910 	bl	b4e8 <__aeabi_dadd>
    a2c8:	9000      	str	r0, [sp, #0]
    a2ca:	9101      	str	r1, [sp, #4]
    a2cc:	9800      	ldr	r0, [sp, #0]
    a2ce:	9901      	ldr	r1, [sp, #4]
    a2d0:	0022      	movs	r2, r4
    a2d2:	002b      	movs	r3, r5
    a2d4:	f002 facc 	bl	c870 <__aeabi_dsub>
    a2d8:	0004      	movs	r4, r0
    a2da:	000d      	movs	r5, r1
    a2dc:	0020      	movs	r0, r4
    a2de:	0029      	movs	r1, r5
    a2e0:	b002      	add	sp, #8
    a2e2:	bc04      	pop	{r2}
    a2e4:	4690      	mov	r8, r2
    a2e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a2e8:	2e33      	cmp	r6, #51	; 0x33
    a2ea:	dd0c      	ble.n	a306 <rint+0xa6>
    a2ec:	2380      	movs	r3, #128	; 0x80
    a2ee:	0004      	movs	r4, r0
    a2f0:	00db      	lsls	r3, r3, #3
    a2f2:	000d      	movs	r5, r1
    a2f4:	429e      	cmp	r6, r3
    a2f6:	d1f1      	bne.n	a2dc <rint+0x7c>
    a2f8:	0002      	movs	r2, r0
    a2fa:	000b      	movs	r3, r1
    a2fc:	f001 f8f4 	bl	b4e8 <__aeabi_dadd>
    a300:	0004      	movs	r4, r0
    a302:	000d      	movs	r5, r1
    a304:	e7ea      	b.n	a2dc <rint+0x7c>
    a306:	4c26      	ldr	r4, [pc, #152]	; (a3a0 <rint+0x140>)
    a308:	000d      	movs	r5, r1
    a30a:	46a4      	mov	ip, r4
    a30c:	2401      	movs	r4, #1
    a30e:	4463      	add	r3, ip
    a310:	4264      	negs	r4, r4
    a312:	40dc      	lsrs	r4, r3
    a314:	46a4      	mov	ip, r4
    a316:	4661      	mov	r1, ip
    a318:	0004      	movs	r4, r0
    a31a:	4201      	tst	r1, r0
    a31c:	d0de      	beq.n	a2dc <rint+0x7c>
    a31e:	0849      	lsrs	r1, r1, #1
    a320:	4201      	tst	r1, r0
    a322:	d0c5      	beq.n	a2b0 <rint+0x50>
    a324:	2780      	movs	r7, #128	; 0x80
    a326:	05ff      	lsls	r7, r7, #23
    a328:	411f      	asrs	r7, r3
    a32a:	4388      	bics	r0, r1
    a32c:	4307      	orrs	r7, r0
    a32e:	e7bf      	b.n	a2b0 <rint+0x50>
    a330:	004b      	lsls	r3, r1, #1
    a332:	085b      	lsrs	r3, r3, #1
    a334:	4303      	orrs	r3, r0
    a336:	0004      	movs	r4, r0
    a338:	000d      	movs	r5, r1
    a33a:	2b00      	cmp	r3, #0
    a33c:	d0ce      	beq.n	a2dc <rint+0x7c>
    a33e:	030b      	lsls	r3, r1, #12
    a340:	0b1b      	lsrs	r3, r3, #12
    a342:	4303      	orrs	r3, r0
    a344:	001a      	movs	r2, r3
    a346:	425b      	negs	r3, r3
    a348:	4313      	orrs	r3, r2
    a34a:	2280      	movs	r2, #128	; 0x80
    a34c:	0b1b      	lsrs	r3, r3, #12
    a34e:	0312      	lsls	r2, r2, #12
    a350:	4013      	ands	r3, r2
    a352:	0c4a      	lsrs	r2, r1, #17
    a354:	0452      	lsls	r2, r2, #17
    a356:	4313      	orrs	r3, r2
    a358:	0019      	movs	r1, r3
    a35a:	4643      	mov	r3, r8
    a35c:	00da      	lsls	r2, r3, #3
    a35e:	4b0f      	ldr	r3, [pc, #60]	; (a39c <rint+0x13c>)
    a360:	189b      	adds	r3, r3, r2
    a362:	681c      	ldr	r4, [r3, #0]
    a364:	685d      	ldr	r5, [r3, #4]
    a366:	0022      	movs	r2, r4
    a368:	002b      	movs	r3, r5
    a36a:	f001 f8bd 	bl	b4e8 <__aeabi_dadd>
    a36e:	9000      	str	r0, [sp, #0]
    a370:	9101      	str	r1, [sp, #4]
    a372:	9800      	ldr	r0, [sp, #0]
    a374:	9901      	ldr	r1, [sp, #4]
    a376:	0022      	movs	r2, r4
    a378:	002b      	movs	r3, r5
    a37a:	f002 fa79 	bl	c870 <__aeabi_dsub>
    a37e:	4642      	mov	r2, r8
    a380:	004b      	lsls	r3, r1, #1
    a382:	085b      	lsrs	r3, r3, #1
    a384:	07d6      	lsls	r6, r2, #31
    a386:	4333      	orrs	r3, r6
    a388:	0004      	movs	r4, r0
    a38a:	001d      	movs	r5, r3
    a38c:	e7a6      	b.n	a2dc <rint+0x7c>
    a38e:	2780      	movs	r7, #128	; 0x80
    a390:	063f      	lsls	r7, r7, #24
    a392:	e788      	b.n	a2a6 <rint+0x46>
    a394:	fffffc01 	.word	0xfffffc01
    a398:	000fffff 	.word	0x000fffff
    a39c:	00012398 	.word	0x00012398
    a3a0:	fffffbed 	.word	0xfffffbed

0000a3a4 <scalbn>:
    a3a4:	004b      	lsls	r3, r1, #1
    a3a6:	b570      	push	{r4, r5, r6, lr}
    a3a8:	0d5b      	lsrs	r3, r3, #21
    a3aa:	0014      	movs	r4, r2
    a3ac:	000a      	movs	r2, r1
    a3ae:	2b00      	cmp	r3, #0
    a3b0:	d11a      	bne.n	a3e8 <scalbn+0x44>
    a3b2:	004b      	lsls	r3, r1, #1
    a3b4:	085b      	lsrs	r3, r3, #1
    a3b6:	4303      	orrs	r3, r0
    a3b8:	d015      	beq.n	a3e6 <scalbn+0x42>
    a3ba:	2200      	movs	r2, #0
    a3bc:	4b22      	ldr	r3, [pc, #136]	; (a448 <scalbn+0xa4>)
    a3be:	f001 ffd7 	bl	c370 <__aeabi_dmul>
    a3c2:	4b22      	ldr	r3, [pc, #136]	; (a44c <scalbn+0xa8>)
    a3c4:	000a      	movs	r2, r1
    a3c6:	429c      	cmp	r4, r3
    a3c8:	db22      	blt.n	a410 <scalbn+0x6c>
    a3ca:	004b      	lsls	r3, r1, #1
    a3cc:	0d5b      	lsrs	r3, r3, #21
    a3ce:	3b36      	subs	r3, #54	; 0x36
    a3d0:	4d1f      	ldr	r5, [pc, #124]	; (a450 <scalbn+0xac>)
    a3d2:	18e3      	adds	r3, r4, r3
    a3d4:	42ab      	cmp	r3, r5
    a3d6:	dc20      	bgt.n	a41a <scalbn+0x76>
    a3d8:	2b00      	cmp	r3, #0
    a3da:	dd0d      	ble.n	a3f8 <scalbn+0x54>
    a3dc:	4c1d      	ldr	r4, [pc, #116]	; (a454 <scalbn+0xb0>)
    a3de:	051b      	lsls	r3, r3, #20
    a3e0:	4022      	ands	r2, r4
    a3e2:	431a      	orrs	r2, r3
    a3e4:	0011      	movs	r1, r2
    a3e6:	bd70      	pop	{r4, r5, r6, pc}
    a3e8:	4d1b      	ldr	r5, [pc, #108]	; (a458 <scalbn+0xb4>)
    a3ea:	42ab      	cmp	r3, r5
    a3ec:	d1f0      	bne.n	a3d0 <scalbn+0x2c>
    a3ee:	0002      	movs	r2, r0
    a3f0:	000b      	movs	r3, r1
    a3f2:	f001 f879 	bl	b4e8 <__aeabi_dadd>
    a3f6:	e7f6      	b.n	a3e6 <scalbn+0x42>
    a3f8:	001d      	movs	r5, r3
    a3fa:	3535      	adds	r5, #53	; 0x35
    a3fc:	da18      	bge.n	a430 <scalbn+0x8c>
    a3fe:	4b17      	ldr	r3, [pc, #92]	; (a45c <scalbn+0xb8>)
    a400:	0002      	movs	r2, r0
    a402:	429c      	cmp	r4, r3
    a404:	dc0a      	bgt.n	a41c <scalbn+0x78>
    a406:	000b      	movs	r3, r1
    a408:	4815      	ldr	r0, [pc, #84]	; (a460 <scalbn+0xbc>)
    a40a:	4916      	ldr	r1, [pc, #88]	; (a464 <scalbn+0xc0>)
    a40c:	f000 f832 	bl	a474 <copysign>
    a410:	4a13      	ldr	r2, [pc, #76]	; (a460 <scalbn+0xbc>)
    a412:	4b14      	ldr	r3, [pc, #80]	; (a464 <scalbn+0xc0>)
    a414:	f001 ffac 	bl	c370 <__aeabi_dmul>
    a418:	e7e5      	b.n	a3e6 <scalbn+0x42>
    a41a:	0002      	movs	r2, r0
    a41c:	000b      	movs	r3, r1
    a41e:	4812      	ldr	r0, [pc, #72]	; (a468 <scalbn+0xc4>)
    a420:	4912      	ldr	r1, [pc, #72]	; (a46c <scalbn+0xc8>)
    a422:	f000 f827 	bl	a474 <copysign>
    a426:	4a10      	ldr	r2, [pc, #64]	; (a468 <scalbn+0xc4>)
    a428:	4b10      	ldr	r3, [pc, #64]	; (a46c <scalbn+0xc8>)
    a42a:	f001 ffa1 	bl	c370 <__aeabi_dmul>
    a42e:	e7da      	b.n	a3e6 <scalbn+0x42>
    a430:	4c08      	ldr	r4, [pc, #32]	; (a454 <scalbn+0xb0>)
    a432:	3336      	adds	r3, #54	; 0x36
    a434:	4022      	ands	r2, r4
    a436:	051b      	lsls	r3, r3, #20
    a438:	4313      	orrs	r3, r2
    a43a:	0019      	movs	r1, r3
    a43c:	2200      	movs	r2, #0
    a43e:	4b0c      	ldr	r3, [pc, #48]	; (a470 <scalbn+0xcc>)
    a440:	f001 ff96 	bl	c370 <__aeabi_dmul>
    a444:	e7cf      	b.n	a3e6 <scalbn+0x42>
    a446:	46c0      	nop			; (mov r8, r8)
    a448:	43500000 	.word	0x43500000
    a44c:	ffff3cb0 	.word	0xffff3cb0
    a450:	000007fe 	.word	0x000007fe
    a454:	800fffff 	.word	0x800fffff
    a458:	000007ff 	.word	0x000007ff
    a45c:	0000c350 	.word	0x0000c350
    a460:	c2f8f359 	.word	0xc2f8f359
    a464:	01a56e1f 	.word	0x01a56e1f
    a468:	8800759c 	.word	0x8800759c
    a46c:	7e37e43c 	.word	0x7e37e43c
    a470:	3c900000 	.word	0x3c900000

0000a474 <copysign>:
    a474:	b530      	push	{r4, r5, lr}
    a476:	004a      	lsls	r2, r1, #1
    a478:	0fdb      	lsrs	r3, r3, #31
    a47a:	07db      	lsls	r3, r3, #31
    a47c:	0852      	lsrs	r2, r2, #1
    a47e:	431a      	orrs	r2, r3
    a480:	0011      	movs	r1, r2
    a482:	bd30      	pop	{r4, r5, pc}

0000a484 <__udivsi3>:
    a484:	2200      	movs	r2, #0
    a486:	0843      	lsrs	r3, r0, #1
    a488:	428b      	cmp	r3, r1
    a48a:	d374      	bcc.n	a576 <__udivsi3+0xf2>
    a48c:	0903      	lsrs	r3, r0, #4
    a48e:	428b      	cmp	r3, r1
    a490:	d35f      	bcc.n	a552 <__udivsi3+0xce>
    a492:	0a03      	lsrs	r3, r0, #8
    a494:	428b      	cmp	r3, r1
    a496:	d344      	bcc.n	a522 <__udivsi3+0x9e>
    a498:	0b03      	lsrs	r3, r0, #12
    a49a:	428b      	cmp	r3, r1
    a49c:	d328      	bcc.n	a4f0 <__udivsi3+0x6c>
    a49e:	0c03      	lsrs	r3, r0, #16
    a4a0:	428b      	cmp	r3, r1
    a4a2:	d30d      	bcc.n	a4c0 <__udivsi3+0x3c>
    a4a4:	22ff      	movs	r2, #255	; 0xff
    a4a6:	0209      	lsls	r1, r1, #8
    a4a8:	ba12      	rev	r2, r2
    a4aa:	0c03      	lsrs	r3, r0, #16
    a4ac:	428b      	cmp	r3, r1
    a4ae:	d302      	bcc.n	a4b6 <__udivsi3+0x32>
    a4b0:	1212      	asrs	r2, r2, #8
    a4b2:	0209      	lsls	r1, r1, #8
    a4b4:	d065      	beq.n	a582 <__udivsi3+0xfe>
    a4b6:	0b03      	lsrs	r3, r0, #12
    a4b8:	428b      	cmp	r3, r1
    a4ba:	d319      	bcc.n	a4f0 <__udivsi3+0x6c>
    a4bc:	e000      	b.n	a4c0 <__udivsi3+0x3c>
    a4be:	0a09      	lsrs	r1, r1, #8
    a4c0:	0bc3      	lsrs	r3, r0, #15
    a4c2:	428b      	cmp	r3, r1
    a4c4:	d301      	bcc.n	a4ca <__udivsi3+0x46>
    a4c6:	03cb      	lsls	r3, r1, #15
    a4c8:	1ac0      	subs	r0, r0, r3
    a4ca:	4152      	adcs	r2, r2
    a4cc:	0b83      	lsrs	r3, r0, #14
    a4ce:	428b      	cmp	r3, r1
    a4d0:	d301      	bcc.n	a4d6 <__udivsi3+0x52>
    a4d2:	038b      	lsls	r3, r1, #14
    a4d4:	1ac0      	subs	r0, r0, r3
    a4d6:	4152      	adcs	r2, r2
    a4d8:	0b43      	lsrs	r3, r0, #13
    a4da:	428b      	cmp	r3, r1
    a4dc:	d301      	bcc.n	a4e2 <__udivsi3+0x5e>
    a4de:	034b      	lsls	r3, r1, #13
    a4e0:	1ac0      	subs	r0, r0, r3
    a4e2:	4152      	adcs	r2, r2
    a4e4:	0b03      	lsrs	r3, r0, #12
    a4e6:	428b      	cmp	r3, r1
    a4e8:	d301      	bcc.n	a4ee <__udivsi3+0x6a>
    a4ea:	030b      	lsls	r3, r1, #12
    a4ec:	1ac0      	subs	r0, r0, r3
    a4ee:	4152      	adcs	r2, r2
    a4f0:	0ac3      	lsrs	r3, r0, #11
    a4f2:	428b      	cmp	r3, r1
    a4f4:	d301      	bcc.n	a4fa <__udivsi3+0x76>
    a4f6:	02cb      	lsls	r3, r1, #11
    a4f8:	1ac0      	subs	r0, r0, r3
    a4fa:	4152      	adcs	r2, r2
    a4fc:	0a83      	lsrs	r3, r0, #10
    a4fe:	428b      	cmp	r3, r1
    a500:	d301      	bcc.n	a506 <__udivsi3+0x82>
    a502:	028b      	lsls	r3, r1, #10
    a504:	1ac0      	subs	r0, r0, r3
    a506:	4152      	adcs	r2, r2
    a508:	0a43      	lsrs	r3, r0, #9
    a50a:	428b      	cmp	r3, r1
    a50c:	d301      	bcc.n	a512 <__udivsi3+0x8e>
    a50e:	024b      	lsls	r3, r1, #9
    a510:	1ac0      	subs	r0, r0, r3
    a512:	4152      	adcs	r2, r2
    a514:	0a03      	lsrs	r3, r0, #8
    a516:	428b      	cmp	r3, r1
    a518:	d301      	bcc.n	a51e <__udivsi3+0x9a>
    a51a:	020b      	lsls	r3, r1, #8
    a51c:	1ac0      	subs	r0, r0, r3
    a51e:	4152      	adcs	r2, r2
    a520:	d2cd      	bcs.n	a4be <__udivsi3+0x3a>
    a522:	09c3      	lsrs	r3, r0, #7
    a524:	428b      	cmp	r3, r1
    a526:	d301      	bcc.n	a52c <__udivsi3+0xa8>
    a528:	01cb      	lsls	r3, r1, #7
    a52a:	1ac0      	subs	r0, r0, r3
    a52c:	4152      	adcs	r2, r2
    a52e:	0983      	lsrs	r3, r0, #6
    a530:	428b      	cmp	r3, r1
    a532:	d301      	bcc.n	a538 <__udivsi3+0xb4>
    a534:	018b      	lsls	r3, r1, #6
    a536:	1ac0      	subs	r0, r0, r3
    a538:	4152      	adcs	r2, r2
    a53a:	0943      	lsrs	r3, r0, #5
    a53c:	428b      	cmp	r3, r1
    a53e:	d301      	bcc.n	a544 <__udivsi3+0xc0>
    a540:	014b      	lsls	r3, r1, #5
    a542:	1ac0      	subs	r0, r0, r3
    a544:	4152      	adcs	r2, r2
    a546:	0903      	lsrs	r3, r0, #4
    a548:	428b      	cmp	r3, r1
    a54a:	d301      	bcc.n	a550 <__udivsi3+0xcc>
    a54c:	010b      	lsls	r3, r1, #4
    a54e:	1ac0      	subs	r0, r0, r3
    a550:	4152      	adcs	r2, r2
    a552:	08c3      	lsrs	r3, r0, #3
    a554:	428b      	cmp	r3, r1
    a556:	d301      	bcc.n	a55c <__udivsi3+0xd8>
    a558:	00cb      	lsls	r3, r1, #3
    a55a:	1ac0      	subs	r0, r0, r3
    a55c:	4152      	adcs	r2, r2
    a55e:	0883      	lsrs	r3, r0, #2
    a560:	428b      	cmp	r3, r1
    a562:	d301      	bcc.n	a568 <__udivsi3+0xe4>
    a564:	008b      	lsls	r3, r1, #2
    a566:	1ac0      	subs	r0, r0, r3
    a568:	4152      	adcs	r2, r2
    a56a:	0843      	lsrs	r3, r0, #1
    a56c:	428b      	cmp	r3, r1
    a56e:	d301      	bcc.n	a574 <__udivsi3+0xf0>
    a570:	004b      	lsls	r3, r1, #1
    a572:	1ac0      	subs	r0, r0, r3
    a574:	4152      	adcs	r2, r2
    a576:	1a41      	subs	r1, r0, r1
    a578:	d200      	bcs.n	a57c <__udivsi3+0xf8>
    a57a:	4601      	mov	r1, r0
    a57c:	4152      	adcs	r2, r2
    a57e:	4610      	mov	r0, r2
    a580:	4770      	bx	lr
    a582:	e7ff      	b.n	a584 <__udivsi3+0x100>
    a584:	b501      	push	{r0, lr}
    a586:	2000      	movs	r0, #0
    a588:	f000 f8f0 	bl	a76c <__aeabi_idiv0>
    a58c:	bd02      	pop	{r1, pc}
    a58e:	46c0      	nop			; (mov r8, r8)

0000a590 <__aeabi_uidivmod>:
    a590:	2900      	cmp	r1, #0
    a592:	d0f7      	beq.n	a584 <__udivsi3+0x100>
    a594:	e776      	b.n	a484 <__udivsi3>
    a596:	4770      	bx	lr

0000a598 <__divsi3>:
    a598:	4603      	mov	r3, r0
    a59a:	430b      	orrs	r3, r1
    a59c:	d47f      	bmi.n	a69e <__divsi3+0x106>
    a59e:	2200      	movs	r2, #0
    a5a0:	0843      	lsrs	r3, r0, #1
    a5a2:	428b      	cmp	r3, r1
    a5a4:	d374      	bcc.n	a690 <__divsi3+0xf8>
    a5a6:	0903      	lsrs	r3, r0, #4
    a5a8:	428b      	cmp	r3, r1
    a5aa:	d35f      	bcc.n	a66c <__divsi3+0xd4>
    a5ac:	0a03      	lsrs	r3, r0, #8
    a5ae:	428b      	cmp	r3, r1
    a5b0:	d344      	bcc.n	a63c <__divsi3+0xa4>
    a5b2:	0b03      	lsrs	r3, r0, #12
    a5b4:	428b      	cmp	r3, r1
    a5b6:	d328      	bcc.n	a60a <__divsi3+0x72>
    a5b8:	0c03      	lsrs	r3, r0, #16
    a5ba:	428b      	cmp	r3, r1
    a5bc:	d30d      	bcc.n	a5da <__divsi3+0x42>
    a5be:	22ff      	movs	r2, #255	; 0xff
    a5c0:	0209      	lsls	r1, r1, #8
    a5c2:	ba12      	rev	r2, r2
    a5c4:	0c03      	lsrs	r3, r0, #16
    a5c6:	428b      	cmp	r3, r1
    a5c8:	d302      	bcc.n	a5d0 <__divsi3+0x38>
    a5ca:	1212      	asrs	r2, r2, #8
    a5cc:	0209      	lsls	r1, r1, #8
    a5ce:	d065      	beq.n	a69c <__divsi3+0x104>
    a5d0:	0b03      	lsrs	r3, r0, #12
    a5d2:	428b      	cmp	r3, r1
    a5d4:	d319      	bcc.n	a60a <__divsi3+0x72>
    a5d6:	e000      	b.n	a5da <__divsi3+0x42>
    a5d8:	0a09      	lsrs	r1, r1, #8
    a5da:	0bc3      	lsrs	r3, r0, #15
    a5dc:	428b      	cmp	r3, r1
    a5de:	d301      	bcc.n	a5e4 <__divsi3+0x4c>
    a5e0:	03cb      	lsls	r3, r1, #15
    a5e2:	1ac0      	subs	r0, r0, r3
    a5e4:	4152      	adcs	r2, r2
    a5e6:	0b83      	lsrs	r3, r0, #14
    a5e8:	428b      	cmp	r3, r1
    a5ea:	d301      	bcc.n	a5f0 <__divsi3+0x58>
    a5ec:	038b      	lsls	r3, r1, #14
    a5ee:	1ac0      	subs	r0, r0, r3
    a5f0:	4152      	adcs	r2, r2
    a5f2:	0b43      	lsrs	r3, r0, #13
    a5f4:	428b      	cmp	r3, r1
    a5f6:	d301      	bcc.n	a5fc <__divsi3+0x64>
    a5f8:	034b      	lsls	r3, r1, #13
    a5fa:	1ac0      	subs	r0, r0, r3
    a5fc:	4152      	adcs	r2, r2
    a5fe:	0b03      	lsrs	r3, r0, #12
    a600:	428b      	cmp	r3, r1
    a602:	d301      	bcc.n	a608 <__divsi3+0x70>
    a604:	030b      	lsls	r3, r1, #12
    a606:	1ac0      	subs	r0, r0, r3
    a608:	4152      	adcs	r2, r2
    a60a:	0ac3      	lsrs	r3, r0, #11
    a60c:	428b      	cmp	r3, r1
    a60e:	d301      	bcc.n	a614 <__divsi3+0x7c>
    a610:	02cb      	lsls	r3, r1, #11
    a612:	1ac0      	subs	r0, r0, r3
    a614:	4152      	adcs	r2, r2
    a616:	0a83      	lsrs	r3, r0, #10
    a618:	428b      	cmp	r3, r1
    a61a:	d301      	bcc.n	a620 <__divsi3+0x88>
    a61c:	028b      	lsls	r3, r1, #10
    a61e:	1ac0      	subs	r0, r0, r3
    a620:	4152      	adcs	r2, r2
    a622:	0a43      	lsrs	r3, r0, #9
    a624:	428b      	cmp	r3, r1
    a626:	d301      	bcc.n	a62c <__divsi3+0x94>
    a628:	024b      	lsls	r3, r1, #9
    a62a:	1ac0      	subs	r0, r0, r3
    a62c:	4152      	adcs	r2, r2
    a62e:	0a03      	lsrs	r3, r0, #8
    a630:	428b      	cmp	r3, r1
    a632:	d301      	bcc.n	a638 <__divsi3+0xa0>
    a634:	020b      	lsls	r3, r1, #8
    a636:	1ac0      	subs	r0, r0, r3
    a638:	4152      	adcs	r2, r2
    a63a:	d2cd      	bcs.n	a5d8 <__divsi3+0x40>
    a63c:	09c3      	lsrs	r3, r0, #7
    a63e:	428b      	cmp	r3, r1
    a640:	d301      	bcc.n	a646 <__divsi3+0xae>
    a642:	01cb      	lsls	r3, r1, #7
    a644:	1ac0      	subs	r0, r0, r3
    a646:	4152      	adcs	r2, r2
    a648:	0983      	lsrs	r3, r0, #6
    a64a:	428b      	cmp	r3, r1
    a64c:	d301      	bcc.n	a652 <__divsi3+0xba>
    a64e:	018b      	lsls	r3, r1, #6
    a650:	1ac0      	subs	r0, r0, r3
    a652:	4152      	adcs	r2, r2
    a654:	0943      	lsrs	r3, r0, #5
    a656:	428b      	cmp	r3, r1
    a658:	d301      	bcc.n	a65e <__divsi3+0xc6>
    a65a:	014b      	lsls	r3, r1, #5
    a65c:	1ac0      	subs	r0, r0, r3
    a65e:	4152      	adcs	r2, r2
    a660:	0903      	lsrs	r3, r0, #4
    a662:	428b      	cmp	r3, r1
    a664:	d301      	bcc.n	a66a <__divsi3+0xd2>
    a666:	010b      	lsls	r3, r1, #4
    a668:	1ac0      	subs	r0, r0, r3
    a66a:	4152      	adcs	r2, r2
    a66c:	08c3      	lsrs	r3, r0, #3
    a66e:	428b      	cmp	r3, r1
    a670:	d301      	bcc.n	a676 <__divsi3+0xde>
    a672:	00cb      	lsls	r3, r1, #3
    a674:	1ac0      	subs	r0, r0, r3
    a676:	4152      	adcs	r2, r2
    a678:	0883      	lsrs	r3, r0, #2
    a67a:	428b      	cmp	r3, r1
    a67c:	d301      	bcc.n	a682 <__divsi3+0xea>
    a67e:	008b      	lsls	r3, r1, #2
    a680:	1ac0      	subs	r0, r0, r3
    a682:	4152      	adcs	r2, r2
    a684:	0843      	lsrs	r3, r0, #1
    a686:	428b      	cmp	r3, r1
    a688:	d301      	bcc.n	a68e <__divsi3+0xf6>
    a68a:	004b      	lsls	r3, r1, #1
    a68c:	1ac0      	subs	r0, r0, r3
    a68e:	4152      	adcs	r2, r2
    a690:	1a41      	subs	r1, r0, r1
    a692:	d200      	bcs.n	a696 <__divsi3+0xfe>
    a694:	4601      	mov	r1, r0
    a696:	4152      	adcs	r2, r2
    a698:	4610      	mov	r0, r2
    a69a:	4770      	bx	lr
    a69c:	e05d      	b.n	a75a <__divsi3+0x1c2>
    a69e:	0fca      	lsrs	r2, r1, #31
    a6a0:	d000      	beq.n	a6a4 <__divsi3+0x10c>
    a6a2:	4249      	negs	r1, r1
    a6a4:	1003      	asrs	r3, r0, #32
    a6a6:	d300      	bcc.n	a6aa <__divsi3+0x112>
    a6a8:	4240      	negs	r0, r0
    a6aa:	4053      	eors	r3, r2
    a6ac:	2200      	movs	r2, #0
    a6ae:	469c      	mov	ip, r3
    a6b0:	0903      	lsrs	r3, r0, #4
    a6b2:	428b      	cmp	r3, r1
    a6b4:	d32d      	bcc.n	a712 <__divsi3+0x17a>
    a6b6:	0a03      	lsrs	r3, r0, #8
    a6b8:	428b      	cmp	r3, r1
    a6ba:	d312      	bcc.n	a6e2 <__divsi3+0x14a>
    a6bc:	22fc      	movs	r2, #252	; 0xfc
    a6be:	0189      	lsls	r1, r1, #6
    a6c0:	ba12      	rev	r2, r2
    a6c2:	0a03      	lsrs	r3, r0, #8
    a6c4:	428b      	cmp	r3, r1
    a6c6:	d30c      	bcc.n	a6e2 <__divsi3+0x14a>
    a6c8:	0189      	lsls	r1, r1, #6
    a6ca:	1192      	asrs	r2, r2, #6
    a6cc:	428b      	cmp	r3, r1
    a6ce:	d308      	bcc.n	a6e2 <__divsi3+0x14a>
    a6d0:	0189      	lsls	r1, r1, #6
    a6d2:	1192      	asrs	r2, r2, #6
    a6d4:	428b      	cmp	r3, r1
    a6d6:	d304      	bcc.n	a6e2 <__divsi3+0x14a>
    a6d8:	0189      	lsls	r1, r1, #6
    a6da:	d03a      	beq.n	a752 <__divsi3+0x1ba>
    a6dc:	1192      	asrs	r2, r2, #6
    a6de:	e000      	b.n	a6e2 <__divsi3+0x14a>
    a6e0:	0989      	lsrs	r1, r1, #6
    a6e2:	09c3      	lsrs	r3, r0, #7
    a6e4:	428b      	cmp	r3, r1
    a6e6:	d301      	bcc.n	a6ec <__divsi3+0x154>
    a6e8:	01cb      	lsls	r3, r1, #7
    a6ea:	1ac0      	subs	r0, r0, r3
    a6ec:	4152      	adcs	r2, r2
    a6ee:	0983      	lsrs	r3, r0, #6
    a6f0:	428b      	cmp	r3, r1
    a6f2:	d301      	bcc.n	a6f8 <__divsi3+0x160>
    a6f4:	018b      	lsls	r3, r1, #6
    a6f6:	1ac0      	subs	r0, r0, r3
    a6f8:	4152      	adcs	r2, r2
    a6fa:	0943      	lsrs	r3, r0, #5
    a6fc:	428b      	cmp	r3, r1
    a6fe:	d301      	bcc.n	a704 <__divsi3+0x16c>
    a700:	014b      	lsls	r3, r1, #5
    a702:	1ac0      	subs	r0, r0, r3
    a704:	4152      	adcs	r2, r2
    a706:	0903      	lsrs	r3, r0, #4
    a708:	428b      	cmp	r3, r1
    a70a:	d301      	bcc.n	a710 <__divsi3+0x178>
    a70c:	010b      	lsls	r3, r1, #4
    a70e:	1ac0      	subs	r0, r0, r3
    a710:	4152      	adcs	r2, r2
    a712:	08c3      	lsrs	r3, r0, #3
    a714:	428b      	cmp	r3, r1
    a716:	d301      	bcc.n	a71c <__divsi3+0x184>
    a718:	00cb      	lsls	r3, r1, #3
    a71a:	1ac0      	subs	r0, r0, r3
    a71c:	4152      	adcs	r2, r2
    a71e:	0883      	lsrs	r3, r0, #2
    a720:	428b      	cmp	r3, r1
    a722:	d301      	bcc.n	a728 <__divsi3+0x190>
    a724:	008b      	lsls	r3, r1, #2
    a726:	1ac0      	subs	r0, r0, r3
    a728:	4152      	adcs	r2, r2
    a72a:	d2d9      	bcs.n	a6e0 <__divsi3+0x148>
    a72c:	0843      	lsrs	r3, r0, #1
    a72e:	428b      	cmp	r3, r1
    a730:	d301      	bcc.n	a736 <__divsi3+0x19e>
    a732:	004b      	lsls	r3, r1, #1
    a734:	1ac0      	subs	r0, r0, r3
    a736:	4152      	adcs	r2, r2
    a738:	1a41      	subs	r1, r0, r1
    a73a:	d200      	bcs.n	a73e <__divsi3+0x1a6>
    a73c:	4601      	mov	r1, r0
    a73e:	4663      	mov	r3, ip
    a740:	4152      	adcs	r2, r2
    a742:	105b      	asrs	r3, r3, #1
    a744:	4610      	mov	r0, r2
    a746:	d301      	bcc.n	a74c <__divsi3+0x1b4>
    a748:	4240      	negs	r0, r0
    a74a:	2b00      	cmp	r3, #0
    a74c:	d500      	bpl.n	a750 <__divsi3+0x1b8>
    a74e:	4249      	negs	r1, r1
    a750:	4770      	bx	lr
    a752:	4663      	mov	r3, ip
    a754:	105b      	asrs	r3, r3, #1
    a756:	d300      	bcc.n	a75a <__divsi3+0x1c2>
    a758:	4240      	negs	r0, r0
    a75a:	b501      	push	{r0, lr}
    a75c:	2000      	movs	r0, #0
    a75e:	f000 f805 	bl	a76c <__aeabi_idiv0>
    a762:	bd02      	pop	{r1, pc}

0000a764 <__aeabi_idivmod>:
    a764:	2900      	cmp	r1, #0
    a766:	d0f8      	beq.n	a75a <__divsi3+0x1c2>
    a768:	e716      	b.n	a598 <__divsi3>
    a76a:	4770      	bx	lr

0000a76c <__aeabi_idiv0>:
    a76c:	4770      	bx	lr
    a76e:	46c0      	nop			; (mov r8, r8)

0000a770 <__aeabi_cdrcmple>:
    a770:	4684      	mov	ip, r0
    a772:	1c10      	adds	r0, r2, #0
    a774:	4662      	mov	r2, ip
    a776:	468c      	mov	ip, r1
    a778:	1c19      	adds	r1, r3, #0
    a77a:	4663      	mov	r3, ip
    a77c:	e000      	b.n	a780 <__aeabi_cdcmpeq>
    a77e:	46c0      	nop			; (mov r8, r8)

0000a780 <__aeabi_cdcmpeq>:
    a780:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    a782:	f001 fd93 	bl	c2ac <__ledf2>
    a786:	2800      	cmp	r0, #0
    a788:	d401      	bmi.n	a78e <__aeabi_cdcmpeq+0xe>
    a78a:	2100      	movs	r1, #0
    a78c:	42c8      	cmn	r0, r1
    a78e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0000a790 <__aeabi_dcmpeq>:
    a790:	b510      	push	{r4, lr}
    a792:	f001 fced 	bl	c170 <__eqdf2>
    a796:	4240      	negs	r0, r0
    a798:	3001      	adds	r0, #1
    a79a:	bd10      	pop	{r4, pc}

0000a79c <__aeabi_dcmplt>:
    a79c:	b510      	push	{r4, lr}
    a79e:	f001 fd85 	bl	c2ac <__ledf2>
    a7a2:	2800      	cmp	r0, #0
    a7a4:	db01      	blt.n	a7aa <__aeabi_dcmplt+0xe>
    a7a6:	2000      	movs	r0, #0
    a7a8:	bd10      	pop	{r4, pc}
    a7aa:	2001      	movs	r0, #1
    a7ac:	bd10      	pop	{r4, pc}
    a7ae:	46c0      	nop			; (mov r8, r8)

0000a7b0 <__aeabi_dcmple>:
    a7b0:	b510      	push	{r4, lr}
    a7b2:	f001 fd7b 	bl	c2ac <__ledf2>
    a7b6:	2800      	cmp	r0, #0
    a7b8:	dd01      	ble.n	a7be <__aeabi_dcmple+0xe>
    a7ba:	2000      	movs	r0, #0
    a7bc:	bd10      	pop	{r4, pc}
    a7be:	2001      	movs	r0, #1
    a7c0:	bd10      	pop	{r4, pc}
    a7c2:	46c0      	nop			; (mov r8, r8)

0000a7c4 <__aeabi_dcmpgt>:
    a7c4:	b510      	push	{r4, lr}
    a7c6:	f001 fd0d 	bl	c1e4 <__gedf2>
    a7ca:	2800      	cmp	r0, #0
    a7cc:	dc01      	bgt.n	a7d2 <__aeabi_dcmpgt+0xe>
    a7ce:	2000      	movs	r0, #0
    a7d0:	bd10      	pop	{r4, pc}
    a7d2:	2001      	movs	r0, #1
    a7d4:	bd10      	pop	{r4, pc}
    a7d6:	46c0      	nop			; (mov r8, r8)

0000a7d8 <__aeabi_dcmpge>:
    a7d8:	b510      	push	{r4, lr}
    a7da:	f001 fd03 	bl	c1e4 <__gedf2>
    a7de:	2800      	cmp	r0, #0
    a7e0:	da01      	bge.n	a7e6 <__aeabi_dcmpge+0xe>
    a7e2:	2000      	movs	r0, #0
    a7e4:	bd10      	pop	{r4, pc}
    a7e6:	2001      	movs	r0, #1
    a7e8:	bd10      	pop	{r4, pc}
    a7ea:	46c0      	nop			; (mov r8, r8)

0000a7ec <__aeabi_cfrcmple>:
    a7ec:	4684      	mov	ip, r0
    a7ee:	1c08      	adds	r0, r1, #0
    a7f0:	4661      	mov	r1, ip
    a7f2:	e7ff      	b.n	a7f4 <__aeabi_cfcmpeq>

0000a7f4 <__aeabi_cfcmpeq>:
    a7f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    a7f6:	f000 fb29 	bl	ae4c <__lesf2>
    a7fa:	2800      	cmp	r0, #0
    a7fc:	d401      	bmi.n	a802 <__aeabi_cfcmpeq+0xe>
    a7fe:	2100      	movs	r1, #0
    a800:	42c8      	cmn	r0, r1
    a802:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0000a804 <__aeabi_fcmpeq>:
    a804:	b510      	push	{r4, lr}
    a806:	f000 fabb 	bl	ad80 <__eqsf2>
    a80a:	4240      	negs	r0, r0
    a80c:	3001      	adds	r0, #1
    a80e:	bd10      	pop	{r4, pc}

0000a810 <__aeabi_fcmplt>:
    a810:	b510      	push	{r4, lr}
    a812:	f000 fb1b 	bl	ae4c <__lesf2>
    a816:	2800      	cmp	r0, #0
    a818:	db01      	blt.n	a81e <__aeabi_fcmplt+0xe>
    a81a:	2000      	movs	r0, #0
    a81c:	bd10      	pop	{r4, pc}
    a81e:	2001      	movs	r0, #1
    a820:	bd10      	pop	{r4, pc}
    a822:	46c0      	nop			; (mov r8, r8)

0000a824 <__aeabi_fcmple>:
    a824:	b510      	push	{r4, lr}
    a826:	f000 fb11 	bl	ae4c <__lesf2>
    a82a:	2800      	cmp	r0, #0
    a82c:	dd01      	ble.n	a832 <__aeabi_fcmple+0xe>
    a82e:	2000      	movs	r0, #0
    a830:	bd10      	pop	{r4, pc}
    a832:	2001      	movs	r0, #1
    a834:	bd10      	pop	{r4, pc}
    a836:	46c0      	nop			; (mov r8, r8)

0000a838 <__aeabi_fcmpgt>:
    a838:	b510      	push	{r4, lr}
    a83a:	f000 fac7 	bl	adcc <__gesf2>
    a83e:	2800      	cmp	r0, #0
    a840:	dc01      	bgt.n	a846 <__aeabi_fcmpgt+0xe>
    a842:	2000      	movs	r0, #0
    a844:	bd10      	pop	{r4, pc}
    a846:	2001      	movs	r0, #1
    a848:	bd10      	pop	{r4, pc}
    a84a:	46c0      	nop			; (mov r8, r8)

0000a84c <__aeabi_fcmpge>:
    a84c:	b510      	push	{r4, lr}
    a84e:	f000 fabd 	bl	adcc <__gesf2>
    a852:	2800      	cmp	r0, #0
    a854:	da01      	bge.n	a85a <__aeabi_fcmpge+0xe>
    a856:	2000      	movs	r0, #0
    a858:	bd10      	pop	{r4, pc}
    a85a:	2001      	movs	r0, #1
    a85c:	bd10      	pop	{r4, pc}
    a85e:	46c0      	nop			; (mov r8, r8)

0000a860 <__aeabi_uldivmod>:
    a860:	2b00      	cmp	r3, #0
    a862:	d111      	bne.n	a888 <__aeabi_uldivmod+0x28>
    a864:	2a00      	cmp	r2, #0
    a866:	d10f      	bne.n	a888 <__aeabi_uldivmod+0x28>
    a868:	2900      	cmp	r1, #0
    a86a:	d100      	bne.n	a86e <__aeabi_uldivmod+0xe>
    a86c:	2800      	cmp	r0, #0
    a86e:	d002      	beq.n	a876 <__aeabi_uldivmod+0x16>
    a870:	2100      	movs	r1, #0
    a872:	43c9      	mvns	r1, r1
    a874:	1c08      	adds	r0, r1, #0
    a876:	b407      	push	{r0, r1, r2}
    a878:	4802      	ldr	r0, [pc, #8]	; (a884 <__aeabi_uldivmod+0x24>)
    a87a:	a102      	add	r1, pc, #8	; (adr r1, a884 <__aeabi_uldivmod+0x24>)
    a87c:	1840      	adds	r0, r0, r1
    a87e:	9002      	str	r0, [sp, #8]
    a880:	bd03      	pop	{r0, r1, pc}
    a882:	46c0      	nop			; (mov r8, r8)
    a884:	fffffee9 	.word	0xfffffee9
    a888:	b403      	push	{r0, r1}
    a88a:	4668      	mov	r0, sp
    a88c:	b501      	push	{r0, lr}
    a88e:	9802      	ldr	r0, [sp, #8]
    a890:	f000 f824 	bl	a8dc <__udivmoddi4>
    a894:	9b01      	ldr	r3, [sp, #4]
    a896:	469e      	mov	lr, r3
    a898:	b002      	add	sp, #8
    a89a:	bc0c      	pop	{r2, r3}
    a89c:	4770      	bx	lr
    a89e:	46c0      	nop			; (mov r8, r8)

0000a8a0 <__aeabi_d2uiz>:
    a8a0:	b570      	push	{r4, r5, r6, lr}
    a8a2:	2200      	movs	r2, #0
    a8a4:	4b0c      	ldr	r3, [pc, #48]	; (a8d8 <__aeabi_d2uiz+0x38>)
    a8a6:	0004      	movs	r4, r0
    a8a8:	000d      	movs	r5, r1
    a8aa:	f7ff ff95 	bl	a7d8 <__aeabi_dcmpge>
    a8ae:	2800      	cmp	r0, #0
    a8b0:	d104      	bne.n	a8bc <__aeabi_d2uiz+0x1c>
    a8b2:	0020      	movs	r0, r4
    a8b4:	0029      	movs	r1, r5
    a8b6:	f002 fb11 	bl	cedc <__aeabi_d2iz>
    a8ba:	bd70      	pop	{r4, r5, r6, pc}
    a8bc:	4b06      	ldr	r3, [pc, #24]	; (a8d8 <__aeabi_d2uiz+0x38>)
    a8be:	2200      	movs	r2, #0
    a8c0:	0020      	movs	r0, r4
    a8c2:	0029      	movs	r1, r5
    a8c4:	f001 ffd4 	bl	c870 <__aeabi_dsub>
    a8c8:	f002 fb08 	bl	cedc <__aeabi_d2iz>
    a8cc:	2380      	movs	r3, #128	; 0x80
    a8ce:	061b      	lsls	r3, r3, #24
    a8d0:	469c      	mov	ip, r3
    a8d2:	4460      	add	r0, ip
    a8d4:	e7f1      	b.n	a8ba <__aeabi_d2uiz+0x1a>
    a8d6:	46c0      	nop			; (mov r8, r8)
    a8d8:	41e00000 	.word	0x41e00000

0000a8dc <__udivmoddi4>:
    a8dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    a8de:	4657      	mov	r7, sl
    a8e0:	464e      	mov	r6, r9
    a8e2:	4645      	mov	r5, r8
    a8e4:	46de      	mov	lr, fp
    a8e6:	b5e0      	push	{r5, r6, r7, lr}
    a8e8:	0004      	movs	r4, r0
    a8ea:	b083      	sub	sp, #12
    a8ec:	000d      	movs	r5, r1
    a8ee:	4692      	mov	sl, r2
    a8f0:	4699      	mov	r9, r3
    a8f2:	428b      	cmp	r3, r1
    a8f4:	d82f      	bhi.n	a956 <__udivmoddi4+0x7a>
    a8f6:	d02c      	beq.n	a952 <__udivmoddi4+0x76>
    a8f8:	4649      	mov	r1, r9
    a8fa:	4650      	mov	r0, sl
    a8fc:	f002 fc0c 	bl	d118 <__clzdi2>
    a900:	0029      	movs	r1, r5
    a902:	0006      	movs	r6, r0
    a904:	0020      	movs	r0, r4
    a906:	f002 fc07 	bl	d118 <__clzdi2>
    a90a:	1a33      	subs	r3, r6, r0
    a90c:	4698      	mov	r8, r3
    a90e:	3b20      	subs	r3, #32
    a910:	469b      	mov	fp, r3
    a912:	d500      	bpl.n	a916 <__udivmoddi4+0x3a>
    a914:	e074      	b.n	aa00 <__udivmoddi4+0x124>
    a916:	4653      	mov	r3, sl
    a918:	465a      	mov	r2, fp
    a91a:	4093      	lsls	r3, r2
    a91c:	001f      	movs	r7, r3
    a91e:	4653      	mov	r3, sl
    a920:	4642      	mov	r2, r8
    a922:	4093      	lsls	r3, r2
    a924:	001e      	movs	r6, r3
    a926:	42af      	cmp	r7, r5
    a928:	d829      	bhi.n	a97e <__udivmoddi4+0xa2>
    a92a:	d026      	beq.n	a97a <__udivmoddi4+0x9e>
    a92c:	465b      	mov	r3, fp
    a92e:	1ba4      	subs	r4, r4, r6
    a930:	41bd      	sbcs	r5, r7
    a932:	2b00      	cmp	r3, #0
    a934:	da00      	bge.n	a938 <__udivmoddi4+0x5c>
    a936:	e079      	b.n	aa2c <__udivmoddi4+0x150>
    a938:	2200      	movs	r2, #0
    a93a:	2300      	movs	r3, #0
    a93c:	9200      	str	r2, [sp, #0]
    a93e:	9301      	str	r3, [sp, #4]
    a940:	2301      	movs	r3, #1
    a942:	465a      	mov	r2, fp
    a944:	4093      	lsls	r3, r2
    a946:	9301      	str	r3, [sp, #4]
    a948:	2301      	movs	r3, #1
    a94a:	4642      	mov	r2, r8
    a94c:	4093      	lsls	r3, r2
    a94e:	9300      	str	r3, [sp, #0]
    a950:	e019      	b.n	a986 <__udivmoddi4+0xaa>
    a952:	4282      	cmp	r2, r0
    a954:	d9d0      	bls.n	a8f8 <__udivmoddi4+0x1c>
    a956:	2200      	movs	r2, #0
    a958:	2300      	movs	r3, #0
    a95a:	9200      	str	r2, [sp, #0]
    a95c:	9301      	str	r3, [sp, #4]
    a95e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a960:	2b00      	cmp	r3, #0
    a962:	d001      	beq.n	a968 <__udivmoddi4+0x8c>
    a964:	601c      	str	r4, [r3, #0]
    a966:	605d      	str	r5, [r3, #4]
    a968:	9800      	ldr	r0, [sp, #0]
    a96a:	9901      	ldr	r1, [sp, #4]
    a96c:	b003      	add	sp, #12
    a96e:	bc3c      	pop	{r2, r3, r4, r5}
    a970:	4690      	mov	r8, r2
    a972:	4699      	mov	r9, r3
    a974:	46a2      	mov	sl, r4
    a976:	46ab      	mov	fp, r5
    a978:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a97a:	42a3      	cmp	r3, r4
    a97c:	d9d6      	bls.n	a92c <__udivmoddi4+0x50>
    a97e:	2200      	movs	r2, #0
    a980:	2300      	movs	r3, #0
    a982:	9200      	str	r2, [sp, #0]
    a984:	9301      	str	r3, [sp, #4]
    a986:	4643      	mov	r3, r8
    a988:	2b00      	cmp	r3, #0
    a98a:	d0e8      	beq.n	a95e <__udivmoddi4+0x82>
    a98c:	07fb      	lsls	r3, r7, #31
    a98e:	0872      	lsrs	r2, r6, #1
    a990:	431a      	orrs	r2, r3
    a992:	4646      	mov	r6, r8
    a994:	087b      	lsrs	r3, r7, #1
    a996:	e00e      	b.n	a9b6 <__udivmoddi4+0xda>
    a998:	42ab      	cmp	r3, r5
    a99a:	d101      	bne.n	a9a0 <__udivmoddi4+0xc4>
    a99c:	42a2      	cmp	r2, r4
    a99e:	d80c      	bhi.n	a9ba <__udivmoddi4+0xde>
    a9a0:	1aa4      	subs	r4, r4, r2
    a9a2:	419d      	sbcs	r5, r3
    a9a4:	2001      	movs	r0, #1
    a9a6:	1924      	adds	r4, r4, r4
    a9a8:	416d      	adcs	r5, r5
    a9aa:	2100      	movs	r1, #0
    a9ac:	3e01      	subs	r6, #1
    a9ae:	1824      	adds	r4, r4, r0
    a9b0:	414d      	adcs	r5, r1
    a9b2:	2e00      	cmp	r6, #0
    a9b4:	d006      	beq.n	a9c4 <__udivmoddi4+0xe8>
    a9b6:	42ab      	cmp	r3, r5
    a9b8:	d9ee      	bls.n	a998 <__udivmoddi4+0xbc>
    a9ba:	3e01      	subs	r6, #1
    a9bc:	1924      	adds	r4, r4, r4
    a9be:	416d      	adcs	r5, r5
    a9c0:	2e00      	cmp	r6, #0
    a9c2:	d1f8      	bne.n	a9b6 <__udivmoddi4+0xda>
    a9c4:	465b      	mov	r3, fp
    a9c6:	9800      	ldr	r0, [sp, #0]
    a9c8:	9901      	ldr	r1, [sp, #4]
    a9ca:	1900      	adds	r0, r0, r4
    a9cc:	4169      	adcs	r1, r5
    a9ce:	2b00      	cmp	r3, #0
    a9d0:	db22      	blt.n	aa18 <__udivmoddi4+0x13c>
    a9d2:	002b      	movs	r3, r5
    a9d4:	465a      	mov	r2, fp
    a9d6:	40d3      	lsrs	r3, r2
    a9d8:	002a      	movs	r2, r5
    a9da:	4644      	mov	r4, r8
    a9dc:	40e2      	lsrs	r2, r4
    a9de:	001c      	movs	r4, r3
    a9e0:	465b      	mov	r3, fp
    a9e2:	0015      	movs	r5, r2
    a9e4:	2b00      	cmp	r3, #0
    a9e6:	db2c      	blt.n	aa42 <__udivmoddi4+0x166>
    a9e8:	0026      	movs	r6, r4
    a9ea:	409e      	lsls	r6, r3
    a9ec:	0033      	movs	r3, r6
    a9ee:	0026      	movs	r6, r4
    a9f0:	4647      	mov	r7, r8
    a9f2:	40be      	lsls	r6, r7
    a9f4:	0032      	movs	r2, r6
    a9f6:	1a80      	subs	r0, r0, r2
    a9f8:	4199      	sbcs	r1, r3
    a9fa:	9000      	str	r0, [sp, #0]
    a9fc:	9101      	str	r1, [sp, #4]
    a9fe:	e7ae      	b.n	a95e <__udivmoddi4+0x82>
    aa00:	4642      	mov	r2, r8
    aa02:	2320      	movs	r3, #32
    aa04:	1a9b      	subs	r3, r3, r2
    aa06:	4652      	mov	r2, sl
    aa08:	40da      	lsrs	r2, r3
    aa0a:	4641      	mov	r1, r8
    aa0c:	0013      	movs	r3, r2
    aa0e:	464a      	mov	r2, r9
    aa10:	408a      	lsls	r2, r1
    aa12:	0017      	movs	r7, r2
    aa14:	431f      	orrs	r7, r3
    aa16:	e782      	b.n	a91e <__udivmoddi4+0x42>
    aa18:	4642      	mov	r2, r8
    aa1a:	2320      	movs	r3, #32
    aa1c:	1a9b      	subs	r3, r3, r2
    aa1e:	002a      	movs	r2, r5
    aa20:	4646      	mov	r6, r8
    aa22:	409a      	lsls	r2, r3
    aa24:	0023      	movs	r3, r4
    aa26:	40f3      	lsrs	r3, r6
    aa28:	4313      	orrs	r3, r2
    aa2a:	e7d5      	b.n	a9d8 <__udivmoddi4+0xfc>
    aa2c:	4642      	mov	r2, r8
    aa2e:	2320      	movs	r3, #32
    aa30:	2100      	movs	r1, #0
    aa32:	1a9b      	subs	r3, r3, r2
    aa34:	2200      	movs	r2, #0
    aa36:	9100      	str	r1, [sp, #0]
    aa38:	9201      	str	r2, [sp, #4]
    aa3a:	2201      	movs	r2, #1
    aa3c:	40da      	lsrs	r2, r3
    aa3e:	9201      	str	r2, [sp, #4]
    aa40:	e782      	b.n	a948 <__udivmoddi4+0x6c>
    aa42:	4642      	mov	r2, r8
    aa44:	2320      	movs	r3, #32
    aa46:	0026      	movs	r6, r4
    aa48:	1a9b      	subs	r3, r3, r2
    aa4a:	40de      	lsrs	r6, r3
    aa4c:	002f      	movs	r7, r5
    aa4e:	46b4      	mov	ip, r6
    aa50:	4097      	lsls	r7, r2
    aa52:	4666      	mov	r6, ip
    aa54:	003b      	movs	r3, r7
    aa56:	4333      	orrs	r3, r6
    aa58:	e7c9      	b.n	a9ee <__udivmoddi4+0x112>
    aa5a:	46c0      	nop			; (mov r8, r8)

0000aa5c <__aeabi_fadd>:
    aa5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    aa5e:	46c6      	mov	lr, r8
    aa60:	024e      	lsls	r6, r1, #9
    aa62:	0247      	lsls	r7, r0, #9
    aa64:	0a76      	lsrs	r6, r6, #9
    aa66:	0a7b      	lsrs	r3, r7, #9
    aa68:	0044      	lsls	r4, r0, #1
    aa6a:	0fc5      	lsrs	r5, r0, #31
    aa6c:	00f7      	lsls	r7, r6, #3
    aa6e:	0048      	lsls	r0, r1, #1
    aa70:	4698      	mov	r8, r3
    aa72:	b500      	push	{lr}
    aa74:	0e24      	lsrs	r4, r4, #24
    aa76:	002a      	movs	r2, r5
    aa78:	00db      	lsls	r3, r3, #3
    aa7a:	0e00      	lsrs	r0, r0, #24
    aa7c:	0fc9      	lsrs	r1, r1, #31
    aa7e:	46bc      	mov	ip, r7
    aa80:	428d      	cmp	r5, r1
    aa82:	d067      	beq.n	ab54 <__aeabi_fadd+0xf8>
    aa84:	1a22      	subs	r2, r4, r0
    aa86:	2a00      	cmp	r2, #0
    aa88:	dc00      	bgt.n	aa8c <__aeabi_fadd+0x30>
    aa8a:	e0a5      	b.n	abd8 <__aeabi_fadd+0x17c>
    aa8c:	2800      	cmp	r0, #0
    aa8e:	d13a      	bne.n	ab06 <__aeabi_fadd+0xaa>
    aa90:	2f00      	cmp	r7, #0
    aa92:	d100      	bne.n	aa96 <__aeabi_fadd+0x3a>
    aa94:	e093      	b.n	abbe <__aeabi_fadd+0x162>
    aa96:	1e51      	subs	r1, r2, #1
    aa98:	2900      	cmp	r1, #0
    aa9a:	d000      	beq.n	aa9e <__aeabi_fadd+0x42>
    aa9c:	e0bc      	b.n	ac18 <__aeabi_fadd+0x1bc>
    aa9e:	2401      	movs	r4, #1
    aaa0:	1bdb      	subs	r3, r3, r7
    aaa2:	015a      	lsls	r2, r3, #5
    aaa4:	d546      	bpl.n	ab34 <__aeabi_fadd+0xd8>
    aaa6:	019b      	lsls	r3, r3, #6
    aaa8:	099e      	lsrs	r6, r3, #6
    aaaa:	0030      	movs	r0, r6
    aaac:	f002 fb16 	bl	d0dc <__clzsi2>
    aab0:	3805      	subs	r0, #5
    aab2:	4086      	lsls	r6, r0
    aab4:	4284      	cmp	r4, r0
    aab6:	dd00      	ble.n	aaba <__aeabi_fadd+0x5e>
    aab8:	e09d      	b.n	abf6 <__aeabi_fadd+0x19a>
    aaba:	1b04      	subs	r4, r0, r4
    aabc:	0032      	movs	r2, r6
    aabe:	2020      	movs	r0, #32
    aac0:	3401      	adds	r4, #1
    aac2:	40e2      	lsrs	r2, r4
    aac4:	1b04      	subs	r4, r0, r4
    aac6:	40a6      	lsls	r6, r4
    aac8:	0033      	movs	r3, r6
    aaca:	1e5e      	subs	r6, r3, #1
    aacc:	41b3      	sbcs	r3, r6
    aace:	2400      	movs	r4, #0
    aad0:	4313      	orrs	r3, r2
    aad2:	075a      	lsls	r2, r3, #29
    aad4:	d004      	beq.n	aae0 <__aeabi_fadd+0x84>
    aad6:	220f      	movs	r2, #15
    aad8:	401a      	ands	r2, r3
    aada:	2a04      	cmp	r2, #4
    aadc:	d000      	beq.n	aae0 <__aeabi_fadd+0x84>
    aade:	3304      	adds	r3, #4
    aae0:	015a      	lsls	r2, r3, #5
    aae2:	d529      	bpl.n	ab38 <__aeabi_fadd+0xdc>
    aae4:	3401      	adds	r4, #1
    aae6:	2cff      	cmp	r4, #255	; 0xff
    aae8:	d100      	bne.n	aaec <__aeabi_fadd+0x90>
    aaea:	e081      	b.n	abf0 <__aeabi_fadd+0x194>
    aaec:	002a      	movs	r2, r5
    aaee:	019b      	lsls	r3, r3, #6
    aaf0:	0a5b      	lsrs	r3, r3, #9
    aaf2:	b2e4      	uxtb	r4, r4
    aaf4:	025b      	lsls	r3, r3, #9
    aaf6:	05e4      	lsls	r4, r4, #23
    aaf8:	0a58      	lsrs	r0, r3, #9
    aafa:	07d2      	lsls	r2, r2, #31
    aafc:	4320      	orrs	r0, r4
    aafe:	4310      	orrs	r0, r2
    ab00:	bc04      	pop	{r2}
    ab02:	4690      	mov	r8, r2
    ab04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ab06:	2cff      	cmp	r4, #255	; 0xff
    ab08:	d0e3      	beq.n	aad2 <__aeabi_fadd+0x76>
    ab0a:	2180      	movs	r1, #128	; 0x80
    ab0c:	0038      	movs	r0, r7
    ab0e:	04c9      	lsls	r1, r1, #19
    ab10:	4308      	orrs	r0, r1
    ab12:	4684      	mov	ip, r0
    ab14:	2a1b      	cmp	r2, #27
    ab16:	dd00      	ble.n	ab1a <__aeabi_fadd+0xbe>
    ab18:	e082      	b.n	ac20 <__aeabi_fadd+0x1c4>
    ab1a:	2020      	movs	r0, #32
    ab1c:	4661      	mov	r1, ip
    ab1e:	40d1      	lsrs	r1, r2
    ab20:	1a82      	subs	r2, r0, r2
    ab22:	4660      	mov	r0, ip
    ab24:	4090      	lsls	r0, r2
    ab26:	0002      	movs	r2, r0
    ab28:	1e50      	subs	r0, r2, #1
    ab2a:	4182      	sbcs	r2, r0
    ab2c:	430a      	orrs	r2, r1
    ab2e:	1a9b      	subs	r3, r3, r2
    ab30:	015a      	lsls	r2, r3, #5
    ab32:	d4b8      	bmi.n	aaa6 <__aeabi_fadd+0x4a>
    ab34:	075a      	lsls	r2, r3, #29
    ab36:	d1ce      	bne.n	aad6 <__aeabi_fadd+0x7a>
    ab38:	08de      	lsrs	r6, r3, #3
    ab3a:	002a      	movs	r2, r5
    ab3c:	2cff      	cmp	r4, #255	; 0xff
    ab3e:	d13a      	bne.n	abb6 <__aeabi_fadd+0x15a>
    ab40:	2e00      	cmp	r6, #0
    ab42:	d100      	bne.n	ab46 <__aeabi_fadd+0xea>
    ab44:	e0ae      	b.n	aca4 <__aeabi_fadd+0x248>
    ab46:	2380      	movs	r3, #128	; 0x80
    ab48:	03db      	lsls	r3, r3, #15
    ab4a:	4333      	orrs	r3, r6
    ab4c:	025b      	lsls	r3, r3, #9
    ab4e:	0a5b      	lsrs	r3, r3, #9
    ab50:	24ff      	movs	r4, #255	; 0xff
    ab52:	e7cf      	b.n	aaf4 <__aeabi_fadd+0x98>
    ab54:	1a21      	subs	r1, r4, r0
    ab56:	2900      	cmp	r1, #0
    ab58:	dd52      	ble.n	ac00 <__aeabi_fadd+0x1a4>
    ab5a:	2800      	cmp	r0, #0
    ab5c:	d031      	beq.n	abc2 <__aeabi_fadd+0x166>
    ab5e:	2cff      	cmp	r4, #255	; 0xff
    ab60:	d0b7      	beq.n	aad2 <__aeabi_fadd+0x76>
    ab62:	2080      	movs	r0, #128	; 0x80
    ab64:	003e      	movs	r6, r7
    ab66:	04c0      	lsls	r0, r0, #19
    ab68:	4306      	orrs	r6, r0
    ab6a:	46b4      	mov	ip, r6
    ab6c:	291b      	cmp	r1, #27
    ab6e:	dd00      	ble.n	ab72 <__aeabi_fadd+0x116>
    ab70:	e0aa      	b.n	acc8 <__aeabi_fadd+0x26c>
    ab72:	2620      	movs	r6, #32
    ab74:	4660      	mov	r0, ip
    ab76:	40c8      	lsrs	r0, r1
    ab78:	1a71      	subs	r1, r6, r1
    ab7a:	4666      	mov	r6, ip
    ab7c:	408e      	lsls	r6, r1
    ab7e:	0031      	movs	r1, r6
    ab80:	1e4e      	subs	r6, r1, #1
    ab82:	41b1      	sbcs	r1, r6
    ab84:	4301      	orrs	r1, r0
    ab86:	185b      	adds	r3, r3, r1
    ab88:	0159      	lsls	r1, r3, #5
    ab8a:	d5d3      	bpl.n	ab34 <__aeabi_fadd+0xd8>
    ab8c:	3401      	adds	r4, #1
    ab8e:	2cff      	cmp	r4, #255	; 0xff
    ab90:	d100      	bne.n	ab94 <__aeabi_fadd+0x138>
    ab92:	e087      	b.n	aca4 <__aeabi_fadd+0x248>
    ab94:	2201      	movs	r2, #1
    ab96:	4978      	ldr	r1, [pc, #480]	; (ad78 <__aeabi_fadd+0x31c>)
    ab98:	401a      	ands	r2, r3
    ab9a:	085b      	lsrs	r3, r3, #1
    ab9c:	400b      	ands	r3, r1
    ab9e:	4313      	orrs	r3, r2
    aba0:	e797      	b.n	aad2 <__aeabi_fadd+0x76>
    aba2:	2c00      	cmp	r4, #0
    aba4:	d000      	beq.n	aba8 <__aeabi_fadd+0x14c>
    aba6:	e0a7      	b.n	acf8 <__aeabi_fadd+0x29c>
    aba8:	2b00      	cmp	r3, #0
    abaa:	d000      	beq.n	abae <__aeabi_fadd+0x152>
    abac:	e0b6      	b.n	ad1c <__aeabi_fadd+0x2c0>
    abae:	1e3b      	subs	r3, r7, #0
    abb0:	d162      	bne.n	ac78 <__aeabi_fadd+0x21c>
    abb2:	2600      	movs	r6, #0
    abb4:	2200      	movs	r2, #0
    abb6:	0273      	lsls	r3, r6, #9
    abb8:	0a5b      	lsrs	r3, r3, #9
    abba:	b2e4      	uxtb	r4, r4
    abbc:	e79a      	b.n	aaf4 <__aeabi_fadd+0x98>
    abbe:	0014      	movs	r4, r2
    abc0:	e787      	b.n	aad2 <__aeabi_fadd+0x76>
    abc2:	2f00      	cmp	r7, #0
    abc4:	d04d      	beq.n	ac62 <__aeabi_fadd+0x206>
    abc6:	1e48      	subs	r0, r1, #1
    abc8:	2800      	cmp	r0, #0
    abca:	d157      	bne.n	ac7c <__aeabi_fadd+0x220>
    abcc:	4463      	add	r3, ip
    abce:	2401      	movs	r4, #1
    abd0:	015a      	lsls	r2, r3, #5
    abd2:	d5af      	bpl.n	ab34 <__aeabi_fadd+0xd8>
    abd4:	2402      	movs	r4, #2
    abd6:	e7dd      	b.n	ab94 <__aeabi_fadd+0x138>
    abd8:	2a00      	cmp	r2, #0
    abda:	d124      	bne.n	ac26 <__aeabi_fadd+0x1ca>
    abdc:	1c62      	adds	r2, r4, #1
    abde:	b2d2      	uxtb	r2, r2
    abe0:	2a01      	cmp	r2, #1
    abe2:	ddde      	ble.n	aba2 <__aeabi_fadd+0x146>
    abe4:	1bde      	subs	r6, r3, r7
    abe6:	0172      	lsls	r2, r6, #5
    abe8:	d535      	bpl.n	ac56 <__aeabi_fadd+0x1fa>
    abea:	1afe      	subs	r6, r7, r3
    abec:	000d      	movs	r5, r1
    abee:	e75c      	b.n	aaaa <__aeabi_fadd+0x4e>
    abf0:	002a      	movs	r2, r5
    abf2:	2300      	movs	r3, #0
    abf4:	e77e      	b.n	aaf4 <__aeabi_fadd+0x98>
    abf6:	0033      	movs	r3, r6
    abf8:	4a60      	ldr	r2, [pc, #384]	; (ad7c <__aeabi_fadd+0x320>)
    abfa:	1a24      	subs	r4, r4, r0
    abfc:	4013      	ands	r3, r2
    abfe:	e768      	b.n	aad2 <__aeabi_fadd+0x76>
    ac00:	2900      	cmp	r1, #0
    ac02:	d163      	bne.n	accc <__aeabi_fadd+0x270>
    ac04:	1c61      	adds	r1, r4, #1
    ac06:	b2c8      	uxtb	r0, r1
    ac08:	2801      	cmp	r0, #1
    ac0a:	dd4e      	ble.n	acaa <__aeabi_fadd+0x24e>
    ac0c:	29ff      	cmp	r1, #255	; 0xff
    ac0e:	d049      	beq.n	aca4 <__aeabi_fadd+0x248>
    ac10:	4463      	add	r3, ip
    ac12:	085b      	lsrs	r3, r3, #1
    ac14:	000c      	movs	r4, r1
    ac16:	e75c      	b.n	aad2 <__aeabi_fadd+0x76>
    ac18:	2aff      	cmp	r2, #255	; 0xff
    ac1a:	d041      	beq.n	aca0 <__aeabi_fadd+0x244>
    ac1c:	000a      	movs	r2, r1
    ac1e:	e779      	b.n	ab14 <__aeabi_fadd+0xb8>
    ac20:	2201      	movs	r2, #1
    ac22:	1a9b      	subs	r3, r3, r2
    ac24:	e784      	b.n	ab30 <__aeabi_fadd+0xd4>
    ac26:	2c00      	cmp	r4, #0
    ac28:	d01d      	beq.n	ac66 <__aeabi_fadd+0x20a>
    ac2a:	28ff      	cmp	r0, #255	; 0xff
    ac2c:	d022      	beq.n	ac74 <__aeabi_fadd+0x218>
    ac2e:	2480      	movs	r4, #128	; 0x80
    ac30:	04e4      	lsls	r4, r4, #19
    ac32:	4252      	negs	r2, r2
    ac34:	4323      	orrs	r3, r4
    ac36:	2a1b      	cmp	r2, #27
    ac38:	dd00      	ble.n	ac3c <__aeabi_fadd+0x1e0>
    ac3a:	e08a      	b.n	ad52 <__aeabi_fadd+0x2f6>
    ac3c:	001c      	movs	r4, r3
    ac3e:	2520      	movs	r5, #32
    ac40:	40d4      	lsrs	r4, r2
    ac42:	1aaa      	subs	r2, r5, r2
    ac44:	4093      	lsls	r3, r2
    ac46:	1e5a      	subs	r2, r3, #1
    ac48:	4193      	sbcs	r3, r2
    ac4a:	4323      	orrs	r3, r4
    ac4c:	4662      	mov	r2, ip
    ac4e:	0004      	movs	r4, r0
    ac50:	1ad3      	subs	r3, r2, r3
    ac52:	000d      	movs	r5, r1
    ac54:	e725      	b.n	aaa2 <__aeabi_fadd+0x46>
    ac56:	2e00      	cmp	r6, #0
    ac58:	d000      	beq.n	ac5c <__aeabi_fadd+0x200>
    ac5a:	e726      	b.n	aaaa <__aeabi_fadd+0x4e>
    ac5c:	2200      	movs	r2, #0
    ac5e:	2400      	movs	r4, #0
    ac60:	e7a9      	b.n	abb6 <__aeabi_fadd+0x15a>
    ac62:	000c      	movs	r4, r1
    ac64:	e735      	b.n	aad2 <__aeabi_fadd+0x76>
    ac66:	2b00      	cmp	r3, #0
    ac68:	d04d      	beq.n	ad06 <__aeabi_fadd+0x2aa>
    ac6a:	43d2      	mvns	r2, r2
    ac6c:	2a00      	cmp	r2, #0
    ac6e:	d0ed      	beq.n	ac4c <__aeabi_fadd+0x1f0>
    ac70:	28ff      	cmp	r0, #255	; 0xff
    ac72:	d1e0      	bne.n	ac36 <__aeabi_fadd+0x1da>
    ac74:	4663      	mov	r3, ip
    ac76:	24ff      	movs	r4, #255	; 0xff
    ac78:	000d      	movs	r5, r1
    ac7a:	e72a      	b.n	aad2 <__aeabi_fadd+0x76>
    ac7c:	29ff      	cmp	r1, #255	; 0xff
    ac7e:	d00f      	beq.n	aca0 <__aeabi_fadd+0x244>
    ac80:	0001      	movs	r1, r0
    ac82:	e773      	b.n	ab6c <__aeabi_fadd+0x110>
    ac84:	2b00      	cmp	r3, #0
    ac86:	d061      	beq.n	ad4c <__aeabi_fadd+0x2f0>
    ac88:	24ff      	movs	r4, #255	; 0xff
    ac8a:	2f00      	cmp	r7, #0
    ac8c:	d100      	bne.n	ac90 <__aeabi_fadd+0x234>
    ac8e:	e720      	b.n	aad2 <__aeabi_fadd+0x76>
    ac90:	2280      	movs	r2, #128	; 0x80
    ac92:	4641      	mov	r1, r8
    ac94:	03d2      	lsls	r2, r2, #15
    ac96:	4211      	tst	r1, r2
    ac98:	d002      	beq.n	aca0 <__aeabi_fadd+0x244>
    ac9a:	4216      	tst	r6, r2
    ac9c:	d100      	bne.n	aca0 <__aeabi_fadd+0x244>
    ac9e:	003b      	movs	r3, r7
    aca0:	24ff      	movs	r4, #255	; 0xff
    aca2:	e716      	b.n	aad2 <__aeabi_fadd+0x76>
    aca4:	24ff      	movs	r4, #255	; 0xff
    aca6:	2300      	movs	r3, #0
    aca8:	e724      	b.n	aaf4 <__aeabi_fadd+0x98>
    acaa:	2c00      	cmp	r4, #0
    acac:	d1ea      	bne.n	ac84 <__aeabi_fadd+0x228>
    acae:	2b00      	cmp	r3, #0
    acb0:	d058      	beq.n	ad64 <__aeabi_fadd+0x308>
    acb2:	2f00      	cmp	r7, #0
    acb4:	d100      	bne.n	acb8 <__aeabi_fadd+0x25c>
    acb6:	e70c      	b.n	aad2 <__aeabi_fadd+0x76>
    acb8:	4463      	add	r3, ip
    acba:	015a      	lsls	r2, r3, #5
    acbc:	d400      	bmi.n	acc0 <__aeabi_fadd+0x264>
    acbe:	e739      	b.n	ab34 <__aeabi_fadd+0xd8>
    acc0:	4a2e      	ldr	r2, [pc, #184]	; (ad7c <__aeabi_fadd+0x320>)
    acc2:	000c      	movs	r4, r1
    acc4:	4013      	ands	r3, r2
    acc6:	e704      	b.n	aad2 <__aeabi_fadd+0x76>
    acc8:	2101      	movs	r1, #1
    acca:	e75c      	b.n	ab86 <__aeabi_fadd+0x12a>
    accc:	2c00      	cmp	r4, #0
    acce:	d11e      	bne.n	ad0e <__aeabi_fadd+0x2b2>
    acd0:	2b00      	cmp	r3, #0
    acd2:	d040      	beq.n	ad56 <__aeabi_fadd+0x2fa>
    acd4:	43c9      	mvns	r1, r1
    acd6:	2900      	cmp	r1, #0
    acd8:	d00b      	beq.n	acf2 <__aeabi_fadd+0x296>
    acda:	28ff      	cmp	r0, #255	; 0xff
    acdc:	d036      	beq.n	ad4c <__aeabi_fadd+0x2f0>
    acde:	291b      	cmp	r1, #27
    ace0:	dc47      	bgt.n	ad72 <__aeabi_fadd+0x316>
    ace2:	001c      	movs	r4, r3
    ace4:	2620      	movs	r6, #32
    ace6:	40cc      	lsrs	r4, r1
    ace8:	1a71      	subs	r1, r6, r1
    acea:	408b      	lsls	r3, r1
    acec:	1e59      	subs	r1, r3, #1
    acee:	418b      	sbcs	r3, r1
    acf0:	4323      	orrs	r3, r4
    acf2:	4463      	add	r3, ip
    acf4:	0004      	movs	r4, r0
    acf6:	e747      	b.n	ab88 <__aeabi_fadd+0x12c>
    acf8:	2b00      	cmp	r3, #0
    acfa:	d118      	bne.n	ad2e <__aeabi_fadd+0x2d2>
    acfc:	1e3b      	subs	r3, r7, #0
    acfe:	d02d      	beq.n	ad5c <__aeabi_fadd+0x300>
    ad00:	000d      	movs	r5, r1
    ad02:	24ff      	movs	r4, #255	; 0xff
    ad04:	e6e5      	b.n	aad2 <__aeabi_fadd+0x76>
    ad06:	003b      	movs	r3, r7
    ad08:	0004      	movs	r4, r0
    ad0a:	000d      	movs	r5, r1
    ad0c:	e6e1      	b.n	aad2 <__aeabi_fadd+0x76>
    ad0e:	28ff      	cmp	r0, #255	; 0xff
    ad10:	d01c      	beq.n	ad4c <__aeabi_fadd+0x2f0>
    ad12:	2480      	movs	r4, #128	; 0x80
    ad14:	04e4      	lsls	r4, r4, #19
    ad16:	4249      	negs	r1, r1
    ad18:	4323      	orrs	r3, r4
    ad1a:	e7e0      	b.n	acde <__aeabi_fadd+0x282>
    ad1c:	2f00      	cmp	r7, #0
    ad1e:	d100      	bne.n	ad22 <__aeabi_fadd+0x2c6>
    ad20:	e6d7      	b.n	aad2 <__aeabi_fadd+0x76>
    ad22:	1bde      	subs	r6, r3, r7
    ad24:	0172      	lsls	r2, r6, #5
    ad26:	d51f      	bpl.n	ad68 <__aeabi_fadd+0x30c>
    ad28:	1afb      	subs	r3, r7, r3
    ad2a:	000d      	movs	r5, r1
    ad2c:	e6d1      	b.n	aad2 <__aeabi_fadd+0x76>
    ad2e:	24ff      	movs	r4, #255	; 0xff
    ad30:	2f00      	cmp	r7, #0
    ad32:	d100      	bne.n	ad36 <__aeabi_fadd+0x2da>
    ad34:	e6cd      	b.n	aad2 <__aeabi_fadd+0x76>
    ad36:	2280      	movs	r2, #128	; 0x80
    ad38:	4640      	mov	r0, r8
    ad3a:	03d2      	lsls	r2, r2, #15
    ad3c:	4210      	tst	r0, r2
    ad3e:	d0af      	beq.n	aca0 <__aeabi_fadd+0x244>
    ad40:	4216      	tst	r6, r2
    ad42:	d1ad      	bne.n	aca0 <__aeabi_fadd+0x244>
    ad44:	003b      	movs	r3, r7
    ad46:	000d      	movs	r5, r1
    ad48:	24ff      	movs	r4, #255	; 0xff
    ad4a:	e6c2      	b.n	aad2 <__aeabi_fadd+0x76>
    ad4c:	4663      	mov	r3, ip
    ad4e:	24ff      	movs	r4, #255	; 0xff
    ad50:	e6bf      	b.n	aad2 <__aeabi_fadd+0x76>
    ad52:	2301      	movs	r3, #1
    ad54:	e77a      	b.n	ac4c <__aeabi_fadd+0x1f0>
    ad56:	003b      	movs	r3, r7
    ad58:	0004      	movs	r4, r0
    ad5a:	e6ba      	b.n	aad2 <__aeabi_fadd+0x76>
    ad5c:	2680      	movs	r6, #128	; 0x80
    ad5e:	2200      	movs	r2, #0
    ad60:	03f6      	lsls	r6, r6, #15
    ad62:	e6f0      	b.n	ab46 <__aeabi_fadd+0xea>
    ad64:	003b      	movs	r3, r7
    ad66:	e6b4      	b.n	aad2 <__aeabi_fadd+0x76>
    ad68:	1e33      	subs	r3, r6, #0
    ad6a:	d000      	beq.n	ad6e <__aeabi_fadd+0x312>
    ad6c:	e6e2      	b.n	ab34 <__aeabi_fadd+0xd8>
    ad6e:	2200      	movs	r2, #0
    ad70:	e721      	b.n	abb6 <__aeabi_fadd+0x15a>
    ad72:	2301      	movs	r3, #1
    ad74:	e7bd      	b.n	acf2 <__aeabi_fadd+0x296>
    ad76:	46c0      	nop			; (mov r8, r8)
    ad78:	7dffffff 	.word	0x7dffffff
    ad7c:	fbffffff 	.word	0xfbffffff

0000ad80 <__eqsf2>:
    ad80:	b570      	push	{r4, r5, r6, lr}
    ad82:	0042      	lsls	r2, r0, #1
    ad84:	0245      	lsls	r5, r0, #9
    ad86:	024e      	lsls	r6, r1, #9
    ad88:	004c      	lsls	r4, r1, #1
    ad8a:	0fc3      	lsrs	r3, r0, #31
    ad8c:	0a6d      	lsrs	r5, r5, #9
    ad8e:	0e12      	lsrs	r2, r2, #24
    ad90:	0a76      	lsrs	r6, r6, #9
    ad92:	0e24      	lsrs	r4, r4, #24
    ad94:	0fc9      	lsrs	r1, r1, #31
    ad96:	2001      	movs	r0, #1
    ad98:	2aff      	cmp	r2, #255	; 0xff
    ad9a:	d006      	beq.n	adaa <__eqsf2+0x2a>
    ad9c:	2cff      	cmp	r4, #255	; 0xff
    ad9e:	d003      	beq.n	ada8 <__eqsf2+0x28>
    ada0:	42a2      	cmp	r2, r4
    ada2:	d101      	bne.n	ada8 <__eqsf2+0x28>
    ada4:	42b5      	cmp	r5, r6
    ada6:	d006      	beq.n	adb6 <__eqsf2+0x36>
    ada8:	bd70      	pop	{r4, r5, r6, pc}
    adaa:	2d00      	cmp	r5, #0
    adac:	d1fc      	bne.n	ada8 <__eqsf2+0x28>
    adae:	2cff      	cmp	r4, #255	; 0xff
    adb0:	d1fa      	bne.n	ada8 <__eqsf2+0x28>
    adb2:	2e00      	cmp	r6, #0
    adb4:	d1f8      	bne.n	ada8 <__eqsf2+0x28>
    adb6:	428b      	cmp	r3, r1
    adb8:	d006      	beq.n	adc8 <__eqsf2+0x48>
    adba:	2001      	movs	r0, #1
    adbc:	2a00      	cmp	r2, #0
    adbe:	d1f3      	bne.n	ada8 <__eqsf2+0x28>
    adc0:	0028      	movs	r0, r5
    adc2:	1e45      	subs	r5, r0, #1
    adc4:	41a8      	sbcs	r0, r5
    adc6:	e7ef      	b.n	ada8 <__eqsf2+0x28>
    adc8:	2000      	movs	r0, #0
    adca:	e7ed      	b.n	ada8 <__eqsf2+0x28>

0000adcc <__gesf2>:
    adcc:	b5f0      	push	{r4, r5, r6, r7, lr}
    adce:	0042      	lsls	r2, r0, #1
    add0:	0245      	lsls	r5, r0, #9
    add2:	024c      	lsls	r4, r1, #9
    add4:	0fc3      	lsrs	r3, r0, #31
    add6:	0048      	lsls	r0, r1, #1
    add8:	0a6d      	lsrs	r5, r5, #9
    adda:	0e12      	lsrs	r2, r2, #24
    addc:	0a64      	lsrs	r4, r4, #9
    adde:	0e00      	lsrs	r0, r0, #24
    ade0:	0fc9      	lsrs	r1, r1, #31
    ade2:	2aff      	cmp	r2, #255	; 0xff
    ade4:	d01e      	beq.n	ae24 <__gesf2+0x58>
    ade6:	28ff      	cmp	r0, #255	; 0xff
    ade8:	d021      	beq.n	ae2e <__gesf2+0x62>
    adea:	2a00      	cmp	r2, #0
    adec:	d10a      	bne.n	ae04 <__gesf2+0x38>
    adee:	426e      	negs	r6, r5
    adf0:	416e      	adcs	r6, r5
    adf2:	b2f6      	uxtb	r6, r6
    adf4:	2800      	cmp	r0, #0
    adf6:	d10f      	bne.n	ae18 <__gesf2+0x4c>
    adf8:	2c00      	cmp	r4, #0
    adfa:	d10d      	bne.n	ae18 <__gesf2+0x4c>
    adfc:	2000      	movs	r0, #0
    adfe:	2d00      	cmp	r5, #0
    ae00:	d009      	beq.n	ae16 <__gesf2+0x4a>
    ae02:	e005      	b.n	ae10 <__gesf2+0x44>
    ae04:	2800      	cmp	r0, #0
    ae06:	d101      	bne.n	ae0c <__gesf2+0x40>
    ae08:	2c00      	cmp	r4, #0
    ae0a:	d001      	beq.n	ae10 <__gesf2+0x44>
    ae0c:	428b      	cmp	r3, r1
    ae0e:	d011      	beq.n	ae34 <__gesf2+0x68>
    ae10:	2101      	movs	r1, #1
    ae12:	4258      	negs	r0, r3
    ae14:	4308      	orrs	r0, r1
    ae16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ae18:	2e00      	cmp	r6, #0
    ae1a:	d0f7      	beq.n	ae0c <__gesf2+0x40>
    ae1c:	2001      	movs	r0, #1
    ae1e:	3901      	subs	r1, #1
    ae20:	4308      	orrs	r0, r1
    ae22:	e7f8      	b.n	ae16 <__gesf2+0x4a>
    ae24:	2d00      	cmp	r5, #0
    ae26:	d0de      	beq.n	ade6 <__gesf2+0x1a>
    ae28:	2002      	movs	r0, #2
    ae2a:	4240      	negs	r0, r0
    ae2c:	e7f3      	b.n	ae16 <__gesf2+0x4a>
    ae2e:	2c00      	cmp	r4, #0
    ae30:	d0db      	beq.n	adea <__gesf2+0x1e>
    ae32:	e7f9      	b.n	ae28 <__gesf2+0x5c>
    ae34:	4282      	cmp	r2, r0
    ae36:	dceb      	bgt.n	ae10 <__gesf2+0x44>
    ae38:	db04      	blt.n	ae44 <__gesf2+0x78>
    ae3a:	42a5      	cmp	r5, r4
    ae3c:	d8e8      	bhi.n	ae10 <__gesf2+0x44>
    ae3e:	2000      	movs	r0, #0
    ae40:	42a5      	cmp	r5, r4
    ae42:	d2e8      	bcs.n	ae16 <__gesf2+0x4a>
    ae44:	2101      	movs	r1, #1
    ae46:	1e58      	subs	r0, r3, #1
    ae48:	4308      	orrs	r0, r1
    ae4a:	e7e4      	b.n	ae16 <__gesf2+0x4a>

0000ae4c <__lesf2>:
    ae4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ae4e:	0042      	lsls	r2, r0, #1
    ae50:	024d      	lsls	r5, r1, #9
    ae52:	004c      	lsls	r4, r1, #1
    ae54:	0246      	lsls	r6, r0, #9
    ae56:	0a76      	lsrs	r6, r6, #9
    ae58:	0e12      	lsrs	r2, r2, #24
    ae5a:	0fc3      	lsrs	r3, r0, #31
    ae5c:	0a6d      	lsrs	r5, r5, #9
    ae5e:	0e24      	lsrs	r4, r4, #24
    ae60:	0fc9      	lsrs	r1, r1, #31
    ae62:	2aff      	cmp	r2, #255	; 0xff
    ae64:	d016      	beq.n	ae94 <__lesf2+0x48>
    ae66:	2cff      	cmp	r4, #255	; 0xff
    ae68:	d018      	beq.n	ae9c <__lesf2+0x50>
    ae6a:	2a00      	cmp	r2, #0
    ae6c:	d10a      	bne.n	ae84 <__lesf2+0x38>
    ae6e:	4270      	negs	r0, r6
    ae70:	4170      	adcs	r0, r6
    ae72:	b2c0      	uxtb	r0, r0
    ae74:	2c00      	cmp	r4, #0
    ae76:	d015      	beq.n	aea4 <__lesf2+0x58>
    ae78:	2800      	cmp	r0, #0
    ae7a:	d005      	beq.n	ae88 <__lesf2+0x3c>
    ae7c:	2001      	movs	r0, #1
    ae7e:	3901      	subs	r1, #1
    ae80:	4308      	orrs	r0, r1
    ae82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ae84:	2c00      	cmp	r4, #0
    ae86:	d013      	beq.n	aeb0 <__lesf2+0x64>
    ae88:	4299      	cmp	r1, r3
    ae8a:	d014      	beq.n	aeb6 <__lesf2+0x6a>
    ae8c:	2001      	movs	r0, #1
    ae8e:	425b      	negs	r3, r3
    ae90:	4318      	orrs	r0, r3
    ae92:	e7f6      	b.n	ae82 <__lesf2+0x36>
    ae94:	2002      	movs	r0, #2
    ae96:	2e00      	cmp	r6, #0
    ae98:	d1f3      	bne.n	ae82 <__lesf2+0x36>
    ae9a:	e7e4      	b.n	ae66 <__lesf2+0x1a>
    ae9c:	2002      	movs	r0, #2
    ae9e:	2d00      	cmp	r5, #0
    aea0:	d1ef      	bne.n	ae82 <__lesf2+0x36>
    aea2:	e7e2      	b.n	ae6a <__lesf2+0x1e>
    aea4:	2d00      	cmp	r5, #0
    aea6:	d1e7      	bne.n	ae78 <__lesf2+0x2c>
    aea8:	2000      	movs	r0, #0
    aeaa:	2e00      	cmp	r6, #0
    aeac:	d0e9      	beq.n	ae82 <__lesf2+0x36>
    aeae:	e7ed      	b.n	ae8c <__lesf2+0x40>
    aeb0:	2d00      	cmp	r5, #0
    aeb2:	d1e9      	bne.n	ae88 <__lesf2+0x3c>
    aeb4:	e7ea      	b.n	ae8c <__lesf2+0x40>
    aeb6:	42a2      	cmp	r2, r4
    aeb8:	dc06      	bgt.n	aec8 <__lesf2+0x7c>
    aeba:	dbdf      	blt.n	ae7c <__lesf2+0x30>
    aebc:	42ae      	cmp	r6, r5
    aebe:	d803      	bhi.n	aec8 <__lesf2+0x7c>
    aec0:	2000      	movs	r0, #0
    aec2:	42ae      	cmp	r6, r5
    aec4:	d3da      	bcc.n	ae7c <__lesf2+0x30>
    aec6:	e7dc      	b.n	ae82 <__lesf2+0x36>
    aec8:	2001      	movs	r0, #1
    aeca:	4249      	negs	r1, r1
    aecc:	4308      	orrs	r0, r1
    aece:	e7d8      	b.n	ae82 <__lesf2+0x36>

0000aed0 <__aeabi_fmul>:
    aed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    aed2:	4657      	mov	r7, sl
    aed4:	464e      	mov	r6, r9
    aed6:	4645      	mov	r5, r8
    aed8:	46de      	mov	lr, fp
    aeda:	b5e0      	push	{r5, r6, r7, lr}
    aedc:	0247      	lsls	r7, r0, #9
    aede:	0046      	lsls	r6, r0, #1
    aee0:	4688      	mov	r8, r1
    aee2:	0a7f      	lsrs	r7, r7, #9
    aee4:	0e36      	lsrs	r6, r6, #24
    aee6:	0fc4      	lsrs	r4, r0, #31
    aee8:	2e00      	cmp	r6, #0
    aeea:	d047      	beq.n	af7c <__aeabi_fmul+0xac>
    aeec:	2eff      	cmp	r6, #255	; 0xff
    aeee:	d024      	beq.n	af3a <__aeabi_fmul+0x6a>
    aef0:	00fb      	lsls	r3, r7, #3
    aef2:	2780      	movs	r7, #128	; 0x80
    aef4:	04ff      	lsls	r7, r7, #19
    aef6:	431f      	orrs	r7, r3
    aef8:	2300      	movs	r3, #0
    aefa:	4699      	mov	r9, r3
    aefc:	469a      	mov	sl, r3
    aefe:	3e7f      	subs	r6, #127	; 0x7f
    af00:	4643      	mov	r3, r8
    af02:	025d      	lsls	r5, r3, #9
    af04:	0058      	lsls	r0, r3, #1
    af06:	0fdb      	lsrs	r3, r3, #31
    af08:	0a6d      	lsrs	r5, r5, #9
    af0a:	0e00      	lsrs	r0, r0, #24
    af0c:	4698      	mov	r8, r3
    af0e:	d043      	beq.n	af98 <__aeabi_fmul+0xc8>
    af10:	28ff      	cmp	r0, #255	; 0xff
    af12:	d03b      	beq.n	af8c <__aeabi_fmul+0xbc>
    af14:	00eb      	lsls	r3, r5, #3
    af16:	2580      	movs	r5, #128	; 0x80
    af18:	2200      	movs	r2, #0
    af1a:	04ed      	lsls	r5, r5, #19
    af1c:	431d      	orrs	r5, r3
    af1e:	387f      	subs	r0, #127	; 0x7f
    af20:	1836      	adds	r6, r6, r0
    af22:	1c73      	adds	r3, r6, #1
    af24:	4641      	mov	r1, r8
    af26:	469b      	mov	fp, r3
    af28:	464b      	mov	r3, r9
    af2a:	4061      	eors	r1, r4
    af2c:	4313      	orrs	r3, r2
    af2e:	2b0f      	cmp	r3, #15
    af30:	d864      	bhi.n	affc <__aeabi_fmul+0x12c>
    af32:	4875      	ldr	r0, [pc, #468]	; (b108 <__aeabi_fmul+0x238>)
    af34:	009b      	lsls	r3, r3, #2
    af36:	58c3      	ldr	r3, [r0, r3]
    af38:	469f      	mov	pc, r3
    af3a:	2f00      	cmp	r7, #0
    af3c:	d142      	bne.n	afc4 <__aeabi_fmul+0xf4>
    af3e:	2308      	movs	r3, #8
    af40:	4699      	mov	r9, r3
    af42:	3b06      	subs	r3, #6
    af44:	26ff      	movs	r6, #255	; 0xff
    af46:	469a      	mov	sl, r3
    af48:	e7da      	b.n	af00 <__aeabi_fmul+0x30>
    af4a:	4641      	mov	r1, r8
    af4c:	2a02      	cmp	r2, #2
    af4e:	d028      	beq.n	afa2 <__aeabi_fmul+0xd2>
    af50:	2a03      	cmp	r2, #3
    af52:	d100      	bne.n	af56 <__aeabi_fmul+0x86>
    af54:	e0ce      	b.n	b0f4 <__aeabi_fmul+0x224>
    af56:	2a01      	cmp	r2, #1
    af58:	d000      	beq.n	af5c <__aeabi_fmul+0x8c>
    af5a:	e0ac      	b.n	b0b6 <__aeabi_fmul+0x1e6>
    af5c:	4011      	ands	r1, r2
    af5e:	2000      	movs	r0, #0
    af60:	2200      	movs	r2, #0
    af62:	b2cc      	uxtb	r4, r1
    af64:	0240      	lsls	r0, r0, #9
    af66:	05d2      	lsls	r2, r2, #23
    af68:	0a40      	lsrs	r0, r0, #9
    af6a:	07e4      	lsls	r4, r4, #31
    af6c:	4310      	orrs	r0, r2
    af6e:	4320      	orrs	r0, r4
    af70:	bc3c      	pop	{r2, r3, r4, r5}
    af72:	4690      	mov	r8, r2
    af74:	4699      	mov	r9, r3
    af76:	46a2      	mov	sl, r4
    af78:	46ab      	mov	fp, r5
    af7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    af7c:	2f00      	cmp	r7, #0
    af7e:	d115      	bne.n	afac <__aeabi_fmul+0xdc>
    af80:	2304      	movs	r3, #4
    af82:	4699      	mov	r9, r3
    af84:	3b03      	subs	r3, #3
    af86:	2600      	movs	r6, #0
    af88:	469a      	mov	sl, r3
    af8a:	e7b9      	b.n	af00 <__aeabi_fmul+0x30>
    af8c:	20ff      	movs	r0, #255	; 0xff
    af8e:	2202      	movs	r2, #2
    af90:	2d00      	cmp	r5, #0
    af92:	d0c5      	beq.n	af20 <__aeabi_fmul+0x50>
    af94:	2203      	movs	r2, #3
    af96:	e7c3      	b.n	af20 <__aeabi_fmul+0x50>
    af98:	2d00      	cmp	r5, #0
    af9a:	d119      	bne.n	afd0 <__aeabi_fmul+0x100>
    af9c:	2000      	movs	r0, #0
    af9e:	2201      	movs	r2, #1
    afa0:	e7be      	b.n	af20 <__aeabi_fmul+0x50>
    afa2:	2401      	movs	r4, #1
    afa4:	22ff      	movs	r2, #255	; 0xff
    afa6:	400c      	ands	r4, r1
    afa8:	2000      	movs	r0, #0
    afaa:	e7db      	b.n	af64 <__aeabi_fmul+0x94>
    afac:	0038      	movs	r0, r7
    afae:	f002 f895 	bl	d0dc <__clzsi2>
    afb2:	2676      	movs	r6, #118	; 0x76
    afb4:	1f43      	subs	r3, r0, #5
    afb6:	409f      	lsls	r7, r3
    afb8:	2300      	movs	r3, #0
    afba:	4276      	negs	r6, r6
    afbc:	1a36      	subs	r6, r6, r0
    afbe:	4699      	mov	r9, r3
    afc0:	469a      	mov	sl, r3
    afc2:	e79d      	b.n	af00 <__aeabi_fmul+0x30>
    afc4:	230c      	movs	r3, #12
    afc6:	4699      	mov	r9, r3
    afc8:	3b09      	subs	r3, #9
    afca:	26ff      	movs	r6, #255	; 0xff
    afcc:	469a      	mov	sl, r3
    afce:	e797      	b.n	af00 <__aeabi_fmul+0x30>
    afd0:	0028      	movs	r0, r5
    afd2:	f002 f883 	bl	d0dc <__clzsi2>
    afd6:	1f43      	subs	r3, r0, #5
    afd8:	409d      	lsls	r5, r3
    afda:	2376      	movs	r3, #118	; 0x76
    afdc:	425b      	negs	r3, r3
    afde:	1a18      	subs	r0, r3, r0
    afe0:	2200      	movs	r2, #0
    afe2:	e79d      	b.n	af20 <__aeabi_fmul+0x50>
    afe4:	2080      	movs	r0, #128	; 0x80
    afe6:	2400      	movs	r4, #0
    afe8:	03c0      	lsls	r0, r0, #15
    afea:	22ff      	movs	r2, #255	; 0xff
    afec:	e7ba      	b.n	af64 <__aeabi_fmul+0x94>
    afee:	003d      	movs	r5, r7
    aff0:	4652      	mov	r2, sl
    aff2:	e7ab      	b.n	af4c <__aeabi_fmul+0x7c>
    aff4:	003d      	movs	r5, r7
    aff6:	0021      	movs	r1, r4
    aff8:	4652      	mov	r2, sl
    affa:	e7a7      	b.n	af4c <__aeabi_fmul+0x7c>
    affc:	0c3b      	lsrs	r3, r7, #16
    affe:	469c      	mov	ip, r3
    b000:	042a      	lsls	r2, r5, #16
    b002:	0c12      	lsrs	r2, r2, #16
    b004:	0c2b      	lsrs	r3, r5, #16
    b006:	0014      	movs	r4, r2
    b008:	4660      	mov	r0, ip
    b00a:	4665      	mov	r5, ip
    b00c:	043f      	lsls	r7, r7, #16
    b00e:	0c3f      	lsrs	r7, r7, #16
    b010:	437c      	muls	r4, r7
    b012:	4342      	muls	r2, r0
    b014:	435d      	muls	r5, r3
    b016:	437b      	muls	r3, r7
    b018:	0c27      	lsrs	r7, r4, #16
    b01a:	189b      	adds	r3, r3, r2
    b01c:	18ff      	adds	r7, r7, r3
    b01e:	42ba      	cmp	r2, r7
    b020:	d903      	bls.n	b02a <__aeabi_fmul+0x15a>
    b022:	2380      	movs	r3, #128	; 0x80
    b024:	025b      	lsls	r3, r3, #9
    b026:	469c      	mov	ip, r3
    b028:	4465      	add	r5, ip
    b02a:	0424      	lsls	r4, r4, #16
    b02c:	043a      	lsls	r2, r7, #16
    b02e:	0c24      	lsrs	r4, r4, #16
    b030:	1912      	adds	r2, r2, r4
    b032:	0193      	lsls	r3, r2, #6
    b034:	1e5c      	subs	r4, r3, #1
    b036:	41a3      	sbcs	r3, r4
    b038:	0c3f      	lsrs	r7, r7, #16
    b03a:	0e92      	lsrs	r2, r2, #26
    b03c:	197d      	adds	r5, r7, r5
    b03e:	431a      	orrs	r2, r3
    b040:	01ad      	lsls	r5, r5, #6
    b042:	4315      	orrs	r5, r2
    b044:	012b      	lsls	r3, r5, #4
    b046:	d504      	bpl.n	b052 <__aeabi_fmul+0x182>
    b048:	2301      	movs	r3, #1
    b04a:	465e      	mov	r6, fp
    b04c:	086a      	lsrs	r2, r5, #1
    b04e:	401d      	ands	r5, r3
    b050:	4315      	orrs	r5, r2
    b052:	0032      	movs	r2, r6
    b054:	327f      	adds	r2, #127	; 0x7f
    b056:	2a00      	cmp	r2, #0
    b058:	dd25      	ble.n	b0a6 <__aeabi_fmul+0x1d6>
    b05a:	076b      	lsls	r3, r5, #29
    b05c:	d004      	beq.n	b068 <__aeabi_fmul+0x198>
    b05e:	230f      	movs	r3, #15
    b060:	402b      	ands	r3, r5
    b062:	2b04      	cmp	r3, #4
    b064:	d000      	beq.n	b068 <__aeabi_fmul+0x198>
    b066:	3504      	adds	r5, #4
    b068:	012b      	lsls	r3, r5, #4
    b06a:	d503      	bpl.n	b074 <__aeabi_fmul+0x1a4>
    b06c:	0032      	movs	r2, r6
    b06e:	4b27      	ldr	r3, [pc, #156]	; (b10c <__aeabi_fmul+0x23c>)
    b070:	3280      	adds	r2, #128	; 0x80
    b072:	401d      	ands	r5, r3
    b074:	2afe      	cmp	r2, #254	; 0xfe
    b076:	dc94      	bgt.n	afa2 <__aeabi_fmul+0xd2>
    b078:	2401      	movs	r4, #1
    b07a:	01a8      	lsls	r0, r5, #6
    b07c:	0a40      	lsrs	r0, r0, #9
    b07e:	b2d2      	uxtb	r2, r2
    b080:	400c      	ands	r4, r1
    b082:	e76f      	b.n	af64 <__aeabi_fmul+0x94>
    b084:	2080      	movs	r0, #128	; 0x80
    b086:	03c0      	lsls	r0, r0, #15
    b088:	4207      	tst	r7, r0
    b08a:	d007      	beq.n	b09c <__aeabi_fmul+0x1cc>
    b08c:	4205      	tst	r5, r0
    b08e:	d105      	bne.n	b09c <__aeabi_fmul+0x1cc>
    b090:	4328      	orrs	r0, r5
    b092:	0240      	lsls	r0, r0, #9
    b094:	0a40      	lsrs	r0, r0, #9
    b096:	4644      	mov	r4, r8
    b098:	22ff      	movs	r2, #255	; 0xff
    b09a:	e763      	b.n	af64 <__aeabi_fmul+0x94>
    b09c:	4338      	orrs	r0, r7
    b09e:	0240      	lsls	r0, r0, #9
    b0a0:	0a40      	lsrs	r0, r0, #9
    b0a2:	22ff      	movs	r2, #255	; 0xff
    b0a4:	e75e      	b.n	af64 <__aeabi_fmul+0x94>
    b0a6:	2401      	movs	r4, #1
    b0a8:	1aa3      	subs	r3, r4, r2
    b0aa:	2b1b      	cmp	r3, #27
    b0ac:	dd05      	ble.n	b0ba <__aeabi_fmul+0x1ea>
    b0ae:	400c      	ands	r4, r1
    b0b0:	2200      	movs	r2, #0
    b0b2:	2000      	movs	r0, #0
    b0b4:	e756      	b.n	af64 <__aeabi_fmul+0x94>
    b0b6:	465e      	mov	r6, fp
    b0b8:	e7cb      	b.n	b052 <__aeabi_fmul+0x182>
    b0ba:	002a      	movs	r2, r5
    b0bc:	2020      	movs	r0, #32
    b0be:	40da      	lsrs	r2, r3
    b0c0:	1ac3      	subs	r3, r0, r3
    b0c2:	409d      	lsls	r5, r3
    b0c4:	002b      	movs	r3, r5
    b0c6:	1e5d      	subs	r5, r3, #1
    b0c8:	41ab      	sbcs	r3, r5
    b0ca:	4313      	orrs	r3, r2
    b0cc:	075a      	lsls	r2, r3, #29
    b0ce:	d004      	beq.n	b0da <__aeabi_fmul+0x20a>
    b0d0:	220f      	movs	r2, #15
    b0d2:	401a      	ands	r2, r3
    b0d4:	2a04      	cmp	r2, #4
    b0d6:	d000      	beq.n	b0da <__aeabi_fmul+0x20a>
    b0d8:	3304      	adds	r3, #4
    b0da:	015a      	lsls	r2, r3, #5
    b0dc:	d504      	bpl.n	b0e8 <__aeabi_fmul+0x218>
    b0de:	2401      	movs	r4, #1
    b0e0:	2201      	movs	r2, #1
    b0e2:	400c      	ands	r4, r1
    b0e4:	2000      	movs	r0, #0
    b0e6:	e73d      	b.n	af64 <__aeabi_fmul+0x94>
    b0e8:	2401      	movs	r4, #1
    b0ea:	019b      	lsls	r3, r3, #6
    b0ec:	0a58      	lsrs	r0, r3, #9
    b0ee:	400c      	ands	r4, r1
    b0f0:	2200      	movs	r2, #0
    b0f2:	e737      	b.n	af64 <__aeabi_fmul+0x94>
    b0f4:	2080      	movs	r0, #128	; 0x80
    b0f6:	2401      	movs	r4, #1
    b0f8:	03c0      	lsls	r0, r0, #15
    b0fa:	4328      	orrs	r0, r5
    b0fc:	0240      	lsls	r0, r0, #9
    b0fe:	0a40      	lsrs	r0, r0, #9
    b100:	400c      	ands	r4, r1
    b102:	22ff      	movs	r2, #255	; 0xff
    b104:	e72e      	b.n	af64 <__aeabi_fmul+0x94>
    b106:	46c0      	nop			; (mov r8, r8)
    b108:	000123a8 	.word	0x000123a8
    b10c:	f7ffffff 	.word	0xf7ffffff

0000b110 <__aeabi_fsub>:
    b110:	b5f0      	push	{r4, r5, r6, r7, lr}
    b112:	464f      	mov	r7, r9
    b114:	46d6      	mov	lr, sl
    b116:	4646      	mov	r6, r8
    b118:	0044      	lsls	r4, r0, #1
    b11a:	b5c0      	push	{r6, r7, lr}
    b11c:	0fc2      	lsrs	r2, r0, #31
    b11e:	0247      	lsls	r7, r0, #9
    b120:	0248      	lsls	r0, r1, #9
    b122:	0a40      	lsrs	r0, r0, #9
    b124:	4684      	mov	ip, r0
    b126:	4666      	mov	r6, ip
    b128:	0a7b      	lsrs	r3, r7, #9
    b12a:	0048      	lsls	r0, r1, #1
    b12c:	0fc9      	lsrs	r1, r1, #31
    b12e:	469a      	mov	sl, r3
    b130:	0e24      	lsrs	r4, r4, #24
    b132:	0015      	movs	r5, r2
    b134:	00db      	lsls	r3, r3, #3
    b136:	0e00      	lsrs	r0, r0, #24
    b138:	4689      	mov	r9, r1
    b13a:	00f6      	lsls	r6, r6, #3
    b13c:	28ff      	cmp	r0, #255	; 0xff
    b13e:	d100      	bne.n	b142 <__aeabi_fsub+0x32>
    b140:	e08f      	b.n	b262 <__aeabi_fsub+0x152>
    b142:	2101      	movs	r1, #1
    b144:	464f      	mov	r7, r9
    b146:	404f      	eors	r7, r1
    b148:	0039      	movs	r1, r7
    b14a:	4291      	cmp	r1, r2
    b14c:	d066      	beq.n	b21c <__aeabi_fsub+0x10c>
    b14e:	1a22      	subs	r2, r4, r0
    b150:	2a00      	cmp	r2, #0
    b152:	dc00      	bgt.n	b156 <__aeabi_fsub+0x46>
    b154:	e09d      	b.n	b292 <__aeabi_fsub+0x182>
    b156:	2800      	cmp	r0, #0
    b158:	d13d      	bne.n	b1d6 <__aeabi_fsub+0xc6>
    b15a:	2e00      	cmp	r6, #0
    b15c:	d100      	bne.n	b160 <__aeabi_fsub+0x50>
    b15e:	e08b      	b.n	b278 <__aeabi_fsub+0x168>
    b160:	1e51      	subs	r1, r2, #1
    b162:	2900      	cmp	r1, #0
    b164:	d000      	beq.n	b168 <__aeabi_fsub+0x58>
    b166:	e0b5      	b.n	b2d4 <__aeabi_fsub+0x1c4>
    b168:	2401      	movs	r4, #1
    b16a:	1b9b      	subs	r3, r3, r6
    b16c:	015a      	lsls	r2, r3, #5
    b16e:	d544      	bpl.n	b1fa <__aeabi_fsub+0xea>
    b170:	019b      	lsls	r3, r3, #6
    b172:	099f      	lsrs	r7, r3, #6
    b174:	0038      	movs	r0, r7
    b176:	f001 ffb1 	bl	d0dc <__clzsi2>
    b17a:	3805      	subs	r0, #5
    b17c:	4087      	lsls	r7, r0
    b17e:	4284      	cmp	r4, r0
    b180:	dd00      	ble.n	b184 <__aeabi_fsub+0x74>
    b182:	e096      	b.n	b2b2 <__aeabi_fsub+0x1a2>
    b184:	1b04      	subs	r4, r0, r4
    b186:	003a      	movs	r2, r7
    b188:	2020      	movs	r0, #32
    b18a:	3401      	adds	r4, #1
    b18c:	40e2      	lsrs	r2, r4
    b18e:	1b04      	subs	r4, r0, r4
    b190:	40a7      	lsls	r7, r4
    b192:	003b      	movs	r3, r7
    b194:	1e5f      	subs	r7, r3, #1
    b196:	41bb      	sbcs	r3, r7
    b198:	2400      	movs	r4, #0
    b19a:	4313      	orrs	r3, r2
    b19c:	075a      	lsls	r2, r3, #29
    b19e:	d004      	beq.n	b1aa <__aeabi_fsub+0x9a>
    b1a0:	220f      	movs	r2, #15
    b1a2:	401a      	ands	r2, r3
    b1a4:	2a04      	cmp	r2, #4
    b1a6:	d000      	beq.n	b1aa <__aeabi_fsub+0x9a>
    b1a8:	3304      	adds	r3, #4
    b1aa:	015a      	lsls	r2, r3, #5
    b1ac:	d527      	bpl.n	b1fe <__aeabi_fsub+0xee>
    b1ae:	3401      	adds	r4, #1
    b1b0:	2cff      	cmp	r4, #255	; 0xff
    b1b2:	d100      	bne.n	b1b6 <__aeabi_fsub+0xa6>
    b1b4:	e079      	b.n	b2aa <__aeabi_fsub+0x19a>
    b1b6:	2201      	movs	r2, #1
    b1b8:	019b      	lsls	r3, r3, #6
    b1ba:	0a5b      	lsrs	r3, r3, #9
    b1bc:	b2e4      	uxtb	r4, r4
    b1be:	402a      	ands	r2, r5
    b1c0:	025b      	lsls	r3, r3, #9
    b1c2:	05e4      	lsls	r4, r4, #23
    b1c4:	0a58      	lsrs	r0, r3, #9
    b1c6:	07d2      	lsls	r2, r2, #31
    b1c8:	4320      	orrs	r0, r4
    b1ca:	4310      	orrs	r0, r2
    b1cc:	bc1c      	pop	{r2, r3, r4}
    b1ce:	4690      	mov	r8, r2
    b1d0:	4699      	mov	r9, r3
    b1d2:	46a2      	mov	sl, r4
    b1d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b1d6:	2cff      	cmp	r4, #255	; 0xff
    b1d8:	d0e0      	beq.n	b19c <__aeabi_fsub+0x8c>
    b1da:	2180      	movs	r1, #128	; 0x80
    b1dc:	04c9      	lsls	r1, r1, #19
    b1de:	430e      	orrs	r6, r1
    b1e0:	2a1b      	cmp	r2, #27
    b1e2:	dc7b      	bgt.n	b2dc <__aeabi_fsub+0x1cc>
    b1e4:	0031      	movs	r1, r6
    b1e6:	2020      	movs	r0, #32
    b1e8:	40d1      	lsrs	r1, r2
    b1ea:	1a82      	subs	r2, r0, r2
    b1ec:	4096      	lsls	r6, r2
    b1ee:	1e72      	subs	r2, r6, #1
    b1f0:	4196      	sbcs	r6, r2
    b1f2:	430e      	orrs	r6, r1
    b1f4:	1b9b      	subs	r3, r3, r6
    b1f6:	015a      	lsls	r2, r3, #5
    b1f8:	d4ba      	bmi.n	b170 <__aeabi_fsub+0x60>
    b1fa:	075a      	lsls	r2, r3, #29
    b1fc:	d1d0      	bne.n	b1a0 <__aeabi_fsub+0x90>
    b1fe:	2201      	movs	r2, #1
    b200:	08df      	lsrs	r7, r3, #3
    b202:	402a      	ands	r2, r5
    b204:	2cff      	cmp	r4, #255	; 0xff
    b206:	d133      	bne.n	b270 <__aeabi_fsub+0x160>
    b208:	2f00      	cmp	r7, #0
    b20a:	d100      	bne.n	b20e <__aeabi_fsub+0xfe>
    b20c:	e0a8      	b.n	b360 <__aeabi_fsub+0x250>
    b20e:	2380      	movs	r3, #128	; 0x80
    b210:	03db      	lsls	r3, r3, #15
    b212:	433b      	orrs	r3, r7
    b214:	025b      	lsls	r3, r3, #9
    b216:	0a5b      	lsrs	r3, r3, #9
    b218:	24ff      	movs	r4, #255	; 0xff
    b21a:	e7d1      	b.n	b1c0 <__aeabi_fsub+0xb0>
    b21c:	1a21      	subs	r1, r4, r0
    b21e:	2900      	cmp	r1, #0
    b220:	dd4c      	ble.n	b2bc <__aeabi_fsub+0x1ac>
    b222:	2800      	cmp	r0, #0
    b224:	d02a      	beq.n	b27c <__aeabi_fsub+0x16c>
    b226:	2cff      	cmp	r4, #255	; 0xff
    b228:	d0b8      	beq.n	b19c <__aeabi_fsub+0x8c>
    b22a:	2080      	movs	r0, #128	; 0x80
    b22c:	04c0      	lsls	r0, r0, #19
    b22e:	4306      	orrs	r6, r0
    b230:	291b      	cmp	r1, #27
    b232:	dd00      	ble.n	b236 <__aeabi_fsub+0x126>
    b234:	e0af      	b.n	b396 <__aeabi_fsub+0x286>
    b236:	0030      	movs	r0, r6
    b238:	2720      	movs	r7, #32
    b23a:	40c8      	lsrs	r0, r1
    b23c:	1a79      	subs	r1, r7, r1
    b23e:	408e      	lsls	r6, r1
    b240:	1e71      	subs	r1, r6, #1
    b242:	418e      	sbcs	r6, r1
    b244:	4306      	orrs	r6, r0
    b246:	199b      	adds	r3, r3, r6
    b248:	0159      	lsls	r1, r3, #5
    b24a:	d5d6      	bpl.n	b1fa <__aeabi_fsub+0xea>
    b24c:	3401      	adds	r4, #1
    b24e:	2cff      	cmp	r4, #255	; 0xff
    b250:	d100      	bne.n	b254 <__aeabi_fsub+0x144>
    b252:	e085      	b.n	b360 <__aeabi_fsub+0x250>
    b254:	2201      	movs	r2, #1
    b256:	497a      	ldr	r1, [pc, #488]	; (b440 <__aeabi_fsub+0x330>)
    b258:	401a      	ands	r2, r3
    b25a:	085b      	lsrs	r3, r3, #1
    b25c:	400b      	ands	r3, r1
    b25e:	4313      	orrs	r3, r2
    b260:	e79c      	b.n	b19c <__aeabi_fsub+0x8c>
    b262:	2e00      	cmp	r6, #0
    b264:	d000      	beq.n	b268 <__aeabi_fsub+0x158>
    b266:	e770      	b.n	b14a <__aeabi_fsub+0x3a>
    b268:	e76b      	b.n	b142 <__aeabi_fsub+0x32>
    b26a:	1e3b      	subs	r3, r7, #0
    b26c:	d1c5      	bne.n	b1fa <__aeabi_fsub+0xea>
    b26e:	2200      	movs	r2, #0
    b270:	027b      	lsls	r3, r7, #9
    b272:	0a5b      	lsrs	r3, r3, #9
    b274:	b2e4      	uxtb	r4, r4
    b276:	e7a3      	b.n	b1c0 <__aeabi_fsub+0xb0>
    b278:	0014      	movs	r4, r2
    b27a:	e78f      	b.n	b19c <__aeabi_fsub+0x8c>
    b27c:	2e00      	cmp	r6, #0
    b27e:	d04d      	beq.n	b31c <__aeabi_fsub+0x20c>
    b280:	1e48      	subs	r0, r1, #1
    b282:	2800      	cmp	r0, #0
    b284:	d157      	bne.n	b336 <__aeabi_fsub+0x226>
    b286:	199b      	adds	r3, r3, r6
    b288:	2401      	movs	r4, #1
    b28a:	015a      	lsls	r2, r3, #5
    b28c:	d5b5      	bpl.n	b1fa <__aeabi_fsub+0xea>
    b28e:	2402      	movs	r4, #2
    b290:	e7e0      	b.n	b254 <__aeabi_fsub+0x144>
    b292:	2a00      	cmp	r2, #0
    b294:	d125      	bne.n	b2e2 <__aeabi_fsub+0x1d2>
    b296:	1c62      	adds	r2, r4, #1
    b298:	b2d2      	uxtb	r2, r2
    b29a:	2a01      	cmp	r2, #1
    b29c:	dd72      	ble.n	b384 <__aeabi_fsub+0x274>
    b29e:	1b9f      	subs	r7, r3, r6
    b2a0:	017a      	lsls	r2, r7, #5
    b2a2:	d535      	bpl.n	b310 <__aeabi_fsub+0x200>
    b2a4:	1af7      	subs	r7, r6, r3
    b2a6:	000d      	movs	r5, r1
    b2a8:	e764      	b.n	b174 <__aeabi_fsub+0x64>
    b2aa:	2201      	movs	r2, #1
    b2ac:	2300      	movs	r3, #0
    b2ae:	402a      	ands	r2, r5
    b2b0:	e786      	b.n	b1c0 <__aeabi_fsub+0xb0>
    b2b2:	003b      	movs	r3, r7
    b2b4:	4a63      	ldr	r2, [pc, #396]	; (b444 <__aeabi_fsub+0x334>)
    b2b6:	1a24      	subs	r4, r4, r0
    b2b8:	4013      	ands	r3, r2
    b2ba:	e76f      	b.n	b19c <__aeabi_fsub+0x8c>
    b2bc:	2900      	cmp	r1, #0
    b2be:	d16c      	bne.n	b39a <__aeabi_fsub+0x28a>
    b2c0:	1c61      	adds	r1, r4, #1
    b2c2:	b2c8      	uxtb	r0, r1
    b2c4:	2801      	cmp	r0, #1
    b2c6:	dd4e      	ble.n	b366 <__aeabi_fsub+0x256>
    b2c8:	29ff      	cmp	r1, #255	; 0xff
    b2ca:	d049      	beq.n	b360 <__aeabi_fsub+0x250>
    b2cc:	199b      	adds	r3, r3, r6
    b2ce:	085b      	lsrs	r3, r3, #1
    b2d0:	000c      	movs	r4, r1
    b2d2:	e763      	b.n	b19c <__aeabi_fsub+0x8c>
    b2d4:	2aff      	cmp	r2, #255	; 0xff
    b2d6:	d041      	beq.n	b35c <__aeabi_fsub+0x24c>
    b2d8:	000a      	movs	r2, r1
    b2da:	e781      	b.n	b1e0 <__aeabi_fsub+0xd0>
    b2dc:	2601      	movs	r6, #1
    b2de:	1b9b      	subs	r3, r3, r6
    b2e0:	e789      	b.n	b1f6 <__aeabi_fsub+0xe6>
    b2e2:	2c00      	cmp	r4, #0
    b2e4:	d01c      	beq.n	b320 <__aeabi_fsub+0x210>
    b2e6:	28ff      	cmp	r0, #255	; 0xff
    b2e8:	d021      	beq.n	b32e <__aeabi_fsub+0x21e>
    b2ea:	2480      	movs	r4, #128	; 0x80
    b2ec:	04e4      	lsls	r4, r4, #19
    b2ee:	4252      	negs	r2, r2
    b2f0:	4323      	orrs	r3, r4
    b2f2:	2a1b      	cmp	r2, #27
    b2f4:	dd00      	ble.n	b2f8 <__aeabi_fsub+0x1e8>
    b2f6:	e096      	b.n	b426 <__aeabi_fsub+0x316>
    b2f8:	001c      	movs	r4, r3
    b2fa:	2520      	movs	r5, #32
    b2fc:	40d4      	lsrs	r4, r2
    b2fe:	1aaa      	subs	r2, r5, r2
    b300:	4093      	lsls	r3, r2
    b302:	1e5a      	subs	r2, r3, #1
    b304:	4193      	sbcs	r3, r2
    b306:	4323      	orrs	r3, r4
    b308:	1af3      	subs	r3, r6, r3
    b30a:	0004      	movs	r4, r0
    b30c:	000d      	movs	r5, r1
    b30e:	e72d      	b.n	b16c <__aeabi_fsub+0x5c>
    b310:	2f00      	cmp	r7, #0
    b312:	d000      	beq.n	b316 <__aeabi_fsub+0x206>
    b314:	e72e      	b.n	b174 <__aeabi_fsub+0x64>
    b316:	2200      	movs	r2, #0
    b318:	2400      	movs	r4, #0
    b31a:	e7a9      	b.n	b270 <__aeabi_fsub+0x160>
    b31c:	000c      	movs	r4, r1
    b31e:	e73d      	b.n	b19c <__aeabi_fsub+0x8c>
    b320:	2b00      	cmp	r3, #0
    b322:	d058      	beq.n	b3d6 <__aeabi_fsub+0x2c6>
    b324:	43d2      	mvns	r2, r2
    b326:	2a00      	cmp	r2, #0
    b328:	d0ee      	beq.n	b308 <__aeabi_fsub+0x1f8>
    b32a:	28ff      	cmp	r0, #255	; 0xff
    b32c:	d1e1      	bne.n	b2f2 <__aeabi_fsub+0x1e2>
    b32e:	0033      	movs	r3, r6
    b330:	24ff      	movs	r4, #255	; 0xff
    b332:	000d      	movs	r5, r1
    b334:	e732      	b.n	b19c <__aeabi_fsub+0x8c>
    b336:	29ff      	cmp	r1, #255	; 0xff
    b338:	d010      	beq.n	b35c <__aeabi_fsub+0x24c>
    b33a:	0001      	movs	r1, r0
    b33c:	e778      	b.n	b230 <__aeabi_fsub+0x120>
    b33e:	2b00      	cmp	r3, #0
    b340:	d06e      	beq.n	b420 <__aeabi_fsub+0x310>
    b342:	24ff      	movs	r4, #255	; 0xff
    b344:	2e00      	cmp	r6, #0
    b346:	d100      	bne.n	b34a <__aeabi_fsub+0x23a>
    b348:	e728      	b.n	b19c <__aeabi_fsub+0x8c>
    b34a:	2280      	movs	r2, #128	; 0x80
    b34c:	4651      	mov	r1, sl
    b34e:	03d2      	lsls	r2, r2, #15
    b350:	4211      	tst	r1, r2
    b352:	d003      	beq.n	b35c <__aeabi_fsub+0x24c>
    b354:	4661      	mov	r1, ip
    b356:	4211      	tst	r1, r2
    b358:	d100      	bne.n	b35c <__aeabi_fsub+0x24c>
    b35a:	0033      	movs	r3, r6
    b35c:	24ff      	movs	r4, #255	; 0xff
    b35e:	e71d      	b.n	b19c <__aeabi_fsub+0x8c>
    b360:	24ff      	movs	r4, #255	; 0xff
    b362:	2300      	movs	r3, #0
    b364:	e72c      	b.n	b1c0 <__aeabi_fsub+0xb0>
    b366:	2c00      	cmp	r4, #0
    b368:	d1e9      	bne.n	b33e <__aeabi_fsub+0x22e>
    b36a:	2b00      	cmp	r3, #0
    b36c:	d063      	beq.n	b436 <__aeabi_fsub+0x326>
    b36e:	2e00      	cmp	r6, #0
    b370:	d100      	bne.n	b374 <__aeabi_fsub+0x264>
    b372:	e713      	b.n	b19c <__aeabi_fsub+0x8c>
    b374:	199b      	adds	r3, r3, r6
    b376:	015a      	lsls	r2, r3, #5
    b378:	d400      	bmi.n	b37c <__aeabi_fsub+0x26c>
    b37a:	e73e      	b.n	b1fa <__aeabi_fsub+0xea>
    b37c:	4a31      	ldr	r2, [pc, #196]	; (b444 <__aeabi_fsub+0x334>)
    b37e:	000c      	movs	r4, r1
    b380:	4013      	ands	r3, r2
    b382:	e70b      	b.n	b19c <__aeabi_fsub+0x8c>
    b384:	2c00      	cmp	r4, #0
    b386:	d11e      	bne.n	b3c6 <__aeabi_fsub+0x2b6>
    b388:	2b00      	cmp	r3, #0
    b38a:	d12f      	bne.n	b3ec <__aeabi_fsub+0x2dc>
    b38c:	2e00      	cmp	r6, #0
    b38e:	d04f      	beq.n	b430 <__aeabi_fsub+0x320>
    b390:	0033      	movs	r3, r6
    b392:	000d      	movs	r5, r1
    b394:	e702      	b.n	b19c <__aeabi_fsub+0x8c>
    b396:	2601      	movs	r6, #1
    b398:	e755      	b.n	b246 <__aeabi_fsub+0x136>
    b39a:	2c00      	cmp	r4, #0
    b39c:	d11f      	bne.n	b3de <__aeabi_fsub+0x2ce>
    b39e:	2b00      	cmp	r3, #0
    b3a0:	d043      	beq.n	b42a <__aeabi_fsub+0x31a>
    b3a2:	43c9      	mvns	r1, r1
    b3a4:	2900      	cmp	r1, #0
    b3a6:	d00b      	beq.n	b3c0 <__aeabi_fsub+0x2b0>
    b3a8:	28ff      	cmp	r0, #255	; 0xff
    b3aa:	d039      	beq.n	b420 <__aeabi_fsub+0x310>
    b3ac:	291b      	cmp	r1, #27
    b3ae:	dc44      	bgt.n	b43a <__aeabi_fsub+0x32a>
    b3b0:	001c      	movs	r4, r3
    b3b2:	2720      	movs	r7, #32
    b3b4:	40cc      	lsrs	r4, r1
    b3b6:	1a79      	subs	r1, r7, r1
    b3b8:	408b      	lsls	r3, r1
    b3ba:	1e59      	subs	r1, r3, #1
    b3bc:	418b      	sbcs	r3, r1
    b3be:	4323      	orrs	r3, r4
    b3c0:	199b      	adds	r3, r3, r6
    b3c2:	0004      	movs	r4, r0
    b3c4:	e740      	b.n	b248 <__aeabi_fsub+0x138>
    b3c6:	2b00      	cmp	r3, #0
    b3c8:	d11a      	bne.n	b400 <__aeabi_fsub+0x2f0>
    b3ca:	2e00      	cmp	r6, #0
    b3cc:	d124      	bne.n	b418 <__aeabi_fsub+0x308>
    b3ce:	2780      	movs	r7, #128	; 0x80
    b3d0:	2200      	movs	r2, #0
    b3d2:	03ff      	lsls	r7, r7, #15
    b3d4:	e71b      	b.n	b20e <__aeabi_fsub+0xfe>
    b3d6:	0033      	movs	r3, r6
    b3d8:	0004      	movs	r4, r0
    b3da:	000d      	movs	r5, r1
    b3dc:	e6de      	b.n	b19c <__aeabi_fsub+0x8c>
    b3de:	28ff      	cmp	r0, #255	; 0xff
    b3e0:	d01e      	beq.n	b420 <__aeabi_fsub+0x310>
    b3e2:	2480      	movs	r4, #128	; 0x80
    b3e4:	04e4      	lsls	r4, r4, #19
    b3e6:	4249      	negs	r1, r1
    b3e8:	4323      	orrs	r3, r4
    b3ea:	e7df      	b.n	b3ac <__aeabi_fsub+0x29c>
    b3ec:	2e00      	cmp	r6, #0
    b3ee:	d100      	bne.n	b3f2 <__aeabi_fsub+0x2e2>
    b3f0:	e6d4      	b.n	b19c <__aeabi_fsub+0x8c>
    b3f2:	1b9f      	subs	r7, r3, r6
    b3f4:	017a      	lsls	r2, r7, #5
    b3f6:	d400      	bmi.n	b3fa <__aeabi_fsub+0x2ea>
    b3f8:	e737      	b.n	b26a <__aeabi_fsub+0x15a>
    b3fa:	1af3      	subs	r3, r6, r3
    b3fc:	000d      	movs	r5, r1
    b3fe:	e6cd      	b.n	b19c <__aeabi_fsub+0x8c>
    b400:	24ff      	movs	r4, #255	; 0xff
    b402:	2e00      	cmp	r6, #0
    b404:	d100      	bne.n	b408 <__aeabi_fsub+0x2f8>
    b406:	e6c9      	b.n	b19c <__aeabi_fsub+0x8c>
    b408:	2280      	movs	r2, #128	; 0x80
    b40a:	4650      	mov	r0, sl
    b40c:	03d2      	lsls	r2, r2, #15
    b40e:	4210      	tst	r0, r2
    b410:	d0a4      	beq.n	b35c <__aeabi_fsub+0x24c>
    b412:	4660      	mov	r0, ip
    b414:	4210      	tst	r0, r2
    b416:	d1a1      	bne.n	b35c <__aeabi_fsub+0x24c>
    b418:	0033      	movs	r3, r6
    b41a:	000d      	movs	r5, r1
    b41c:	24ff      	movs	r4, #255	; 0xff
    b41e:	e6bd      	b.n	b19c <__aeabi_fsub+0x8c>
    b420:	0033      	movs	r3, r6
    b422:	24ff      	movs	r4, #255	; 0xff
    b424:	e6ba      	b.n	b19c <__aeabi_fsub+0x8c>
    b426:	2301      	movs	r3, #1
    b428:	e76e      	b.n	b308 <__aeabi_fsub+0x1f8>
    b42a:	0033      	movs	r3, r6
    b42c:	0004      	movs	r4, r0
    b42e:	e6b5      	b.n	b19c <__aeabi_fsub+0x8c>
    b430:	2700      	movs	r7, #0
    b432:	2200      	movs	r2, #0
    b434:	e71c      	b.n	b270 <__aeabi_fsub+0x160>
    b436:	0033      	movs	r3, r6
    b438:	e6b0      	b.n	b19c <__aeabi_fsub+0x8c>
    b43a:	2301      	movs	r3, #1
    b43c:	e7c0      	b.n	b3c0 <__aeabi_fsub+0x2b0>
    b43e:	46c0      	nop			; (mov r8, r8)
    b440:	7dffffff 	.word	0x7dffffff
    b444:	fbffffff 	.word	0xfbffffff

0000b448 <__aeabi_i2f>:
    b448:	b570      	push	{r4, r5, r6, lr}
    b44a:	2800      	cmp	r0, #0
    b44c:	d030      	beq.n	b4b0 <__aeabi_i2f+0x68>
    b44e:	17c3      	asrs	r3, r0, #31
    b450:	18c4      	adds	r4, r0, r3
    b452:	405c      	eors	r4, r3
    b454:	0fc5      	lsrs	r5, r0, #31
    b456:	0020      	movs	r0, r4
    b458:	f001 fe40 	bl	d0dc <__clzsi2>
    b45c:	239e      	movs	r3, #158	; 0x9e
    b45e:	1a1b      	subs	r3, r3, r0
    b460:	2b96      	cmp	r3, #150	; 0x96
    b462:	dc0d      	bgt.n	b480 <__aeabi_i2f+0x38>
    b464:	2296      	movs	r2, #150	; 0x96
    b466:	1ad2      	subs	r2, r2, r3
    b468:	4094      	lsls	r4, r2
    b46a:	002a      	movs	r2, r5
    b46c:	0264      	lsls	r4, r4, #9
    b46e:	0a64      	lsrs	r4, r4, #9
    b470:	b2db      	uxtb	r3, r3
    b472:	0264      	lsls	r4, r4, #9
    b474:	05db      	lsls	r3, r3, #23
    b476:	0a60      	lsrs	r0, r4, #9
    b478:	07d2      	lsls	r2, r2, #31
    b47a:	4318      	orrs	r0, r3
    b47c:	4310      	orrs	r0, r2
    b47e:	bd70      	pop	{r4, r5, r6, pc}
    b480:	2b99      	cmp	r3, #153	; 0x99
    b482:	dc19      	bgt.n	b4b8 <__aeabi_i2f+0x70>
    b484:	2299      	movs	r2, #153	; 0x99
    b486:	1ad2      	subs	r2, r2, r3
    b488:	2a00      	cmp	r2, #0
    b48a:	dd29      	ble.n	b4e0 <__aeabi_i2f+0x98>
    b48c:	4094      	lsls	r4, r2
    b48e:	0022      	movs	r2, r4
    b490:	4c14      	ldr	r4, [pc, #80]	; (b4e4 <__aeabi_i2f+0x9c>)
    b492:	4014      	ands	r4, r2
    b494:	0751      	lsls	r1, r2, #29
    b496:	d004      	beq.n	b4a2 <__aeabi_i2f+0x5a>
    b498:	210f      	movs	r1, #15
    b49a:	400a      	ands	r2, r1
    b49c:	2a04      	cmp	r2, #4
    b49e:	d000      	beq.n	b4a2 <__aeabi_i2f+0x5a>
    b4a0:	3404      	adds	r4, #4
    b4a2:	0162      	lsls	r2, r4, #5
    b4a4:	d413      	bmi.n	b4ce <__aeabi_i2f+0x86>
    b4a6:	01a4      	lsls	r4, r4, #6
    b4a8:	0a64      	lsrs	r4, r4, #9
    b4aa:	b2db      	uxtb	r3, r3
    b4ac:	002a      	movs	r2, r5
    b4ae:	e7e0      	b.n	b472 <__aeabi_i2f+0x2a>
    b4b0:	2200      	movs	r2, #0
    b4b2:	2300      	movs	r3, #0
    b4b4:	2400      	movs	r4, #0
    b4b6:	e7dc      	b.n	b472 <__aeabi_i2f+0x2a>
    b4b8:	2205      	movs	r2, #5
    b4ba:	0021      	movs	r1, r4
    b4bc:	1a12      	subs	r2, r2, r0
    b4be:	40d1      	lsrs	r1, r2
    b4c0:	22b9      	movs	r2, #185	; 0xb9
    b4c2:	1ad2      	subs	r2, r2, r3
    b4c4:	4094      	lsls	r4, r2
    b4c6:	1e62      	subs	r2, r4, #1
    b4c8:	4194      	sbcs	r4, r2
    b4ca:	430c      	orrs	r4, r1
    b4cc:	e7da      	b.n	b484 <__aeabi_i2f+0x3c>
    b4ce:	4b05      	ldr	r3, [pc, #20]	; (b4e4 <__aeabi_i2f+0x9c>)
    b4d0:	002a      	movs	r2, r5
    b4d2:	401c      	ands	r4, r3
    b4d4:	239f      	movs	r3, #159	; 0x9f
    b4d6:	01a4      	lsls	r4, r4, #6
    b4d8:	1a1b      	subs	r3, r3, r0
    b4da:	0a64      	lsrs	r4, r4, #9
    b4dc:	b2db      	uxtb	r3, r3
    b4de:	e7c8      	b.n	b472 <__aeabi_i2f+0x2a>
    b4e0:	0022      	movs	r2, r4
    b4e2:	e7d5      	b.n	b490 <__aeabi_i2f+0x48>
    b4e4:	fbffffff 	.word	0xfbffffff

0000b4e8 <__aeabi_dadd>:
    b4e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b4ea:	4645      	mov	r5, r8
    b4ec:	46de      	mov	lr, fp
    b4ee:	4657      	mov	r7, sl
    b4f0:	464e      	mov	r6, r9
    b4f2:	030c      	lsls	r4, r1, #12
    b4f4:	b5e0      	push	{r5, r6, r7, lr}
    b4f6:	004e      	lsls	r6, r1, #1
    b4f8:	0fc9      	lsrs	r1, r1, #31
    b4fa:	4688      	mov	r8, r1
    b4fc:	000d      	movs	r5, r1
    b4fe:	0a61      	lsrs	r1, r4, #9
    b500:	0f44      	lsrs	r4, r0, #29
    b502:	430c      	orrs	r4, r1
    b504:	00c7      	lsls	r7, r0, #3
    b506:	0319      	lsls	r1, r3, #12
    b508:	0058      	lsls	r0, r3, #1
    b50a:	0fdb      	lsrs	r3, r3, #31
    b50c:	469b      	mov	fp, r3
    b50e:	0a4b      	lsrs	r3, r1, #9
    b510:	0f51      	lsrs	r1, r2, #29
    b512:	430b      	orrs	r3, r1
    b514:	0d76      	lsrs	r6, r6, #21
    b516:	0d40      	lsrs	r0, r0, #21
    b518:	0019      	movs	r1, r3
    b51a:	00d2      	lsls	r2, r2, #3
    b51c:	45d8      	cmp	r8, fp
    b51e:	d100      	bne.n	b522 <__aeabi_dadd+0x3a>
    b520:	e0ae      	b.n	b680 <__aeabi_dadd+0x198>
    b522:	1a35      	subs	r5, r6, r0
    b524:	2d00      	cmp	r5, #0
    b526:	dc00      	bgt.n	b52a <__aeabi_dadd+0x42>
    b528:	e0f6      	b.n	b718 <__aeabi_dadd+0x230>
    b52a:	2800      	cmp	r0, #0
    b52c:	d10f      	bne.n	b54e <__aeabi_dadd+0x66>
    b52e:	4313      	orrs	r3, r2
    b530:	d100      	bne.n	b534 <__aeabi_dadd+0x4c>
    b532:	e0db      	b.n	b6ec <__aeabi_dadd+0x204>
    b534:	1e6b      	subs	r3, r5, #1
    b536:	2b00      	cmp	r3, #0
    b538:	d000      	beq.n	b53c <__aeabi_dadd+0x54>
    b53a:	e137      	b.n	b7ac <__aeabi_dadd+0x2c4>
    b53c:	1aba      	subs	r2, r7, r2
    b53e:	4297      	cmp	r7, r2
    b540:	41bf      	sbcs	r7, r7
    b542:	1a64      	subs	r4, r4, r1
    b544:	427f      	negs	r7, r7
    b546:	1be4      	subs	r4, r4, r7
    b548:	2601      	movs	r6, #1
    b54a:	0017      	movs	r7, r2
    b54c:	e024      	b.n	b598 <__aeabi_dadd+0xb0>
    b54e:	4bc6      	ldr	r3, [pc, #792]	; (b868 <__aeabi_dadd+0x380>)
    b550:	429e      	cmp	r6, r3
    b552:	d04d      	beq.n	b5f0 <__aeabi_dadd+0x108>
    b554:	2380      	movs	r3, #128	; 0x80
    b556:	041b      	lsls	r3, r3, #16
    b558:	4319      	orrs	r1, r3
    b55a:	2d38      	cmp	r5, #56	; 0x38
    b55c:	dd00      	ble.n	b560 <__aeabi_dadd+0x78>
    b55e:	e107      	b.n	b770 <__aeabi_dadd+0x288>
    b560:	2d1f      	cmp	r5, #31
    b562:	dd00      	ble.n	b566 <__aeabi_dadd+0x7e>
    b564:	e138      	b.n	b7d8 <__aeabi_dadd+0x2f0>
    b566:	2020      	movs	r0, #32
    b568:	1b43      	subs	r3, r0, r5
    b56a:	469a      	mov	sl, r3
    b56c:	000b      	movs	r3, r1
    b56e:	4650      	mov	r0, sl
    b570:	4083      	lsls	r3, r0
    b572:	4699      	mov	r9, r3
    b574:	0013      	movs	r3, r2
    b576:	4648      	mov	r0, r9
    b578:	40eb      	lsrs	r3, r5
    b57a:	4318      	orrs	r0, r3
    b57c:	0003      	movs	r3, r0
    b57e:	4650      	mov	r0, sl
    b580:	4082      	lsls	r2, r0
    b582:	1e50      	subs	r0, r2, #1
    b584:	4182      	sbcs	r2, r0
    b586:	40e9      	lsrs	r1, r5
    b588:	431a      	orrs	r2, r3
    b58a:	1aba      	subs	r2, r7, r2
    b58c:	1a61      	subs	r1, r4, r1
    b58e:	4297      	cmp	r7, r2
    b590:	41a4      	sbcs	r4, r4
    b592:	0017      	movs	r7, r2
    b594:	4264      	negs	r4, r4
    b596:	1b0c      	subs	r4, r1, r4
    b598:	0223      	lsls	r3, r4, #8
    b59a:	d562      	bpl.n	b662 <__aeabi_dadd+0x17a>
    b59c:	0264      	lsls	r4, r4, #9
    b59e:	0a65      	lsrs	r5, r4, #9
    b5a0:	2d00      	cmp	r5, #0
    b5a2:	d100      	bne.n	b5a6 <__aeabi_dadd+0xbe>
    b5a4:	e0df      	b.n	b766 <__aeabi_dadd+0x27e>
    b5a6:	0028      	movs	r0, r5
    b5a8:	f001 fd98 	bl	d0dc <__clzsi2>
    b5ac:	0003      	movs	r3, r0
    b5ae:	3b08      	subs	r3, #8
    b5b0:	2b1f      	cmp	r3, #31
    b5b2:	dd00      	ble.n	b5b6 <__aeabi_dadd+0xce>
    b5b4:	e0d2      	b.n	b75c <__aeabi_dadd+0x274>
    b5b6:	2220      	movs	r2, #32
    b5b8:	003c      	movs	r4, r7
    b5ba:	1ad2      	subs	r2, r2, r3
    b5bc:	409d      	lsls	r5, r3
    b5be:	40d4      	lsrs	r4, r2
    b5c0:	409f      	lsls	r7, r3
    b5c2:	4325      	orrs	r5, r4
    b5c4:	429e      	cmp	r6, r3
    b5c6:	dd00      	ble.n	b5ca <__aeabi_dadd+0xe2>
    b5c8:	e0c4      	b.n	b754 <__aeabi_dadd+0x26c>
    b5ca:	1b9e      	subs	r6, r3, r6
    b5cc:	1c73      	adds	r3, r6, #1
    b5ce:	2b1f      	cmp	r3, #31
    b5d0:	dd00      	ble.n	b5d4 <__aeabi_dadd+0xec>
    b5d2:	e0f1      	b.n	b7b8 <__aeabi_dadd+0x2d0>
    b5d4:	2220      	movs	r2, #32
    b5d6:	0038      	movs	r0, r7
    b5d8:	0029      	movs	r1, r5
    b5da:	1ad2      	subs	r2, r2, r3
    b5dc:	40d8      	lsrs	r0, r3
    b5de:	4091      	lsls	r1, r2
    b5e0:	4097      	lsls	r7, r2
    b5e2:	002c      	movs	r4, r5
    b5e4:	4301      	orrs	r1, r0
    b5e6:	1e78      	subs	r0, r7, #1
    b5e8:	4187      	sbcs	r7, r0
    b5ea:	40dc      	lsrs	r4, r3
    b5ec:	2600      	movs	r6, #0
    b5ee:	430f      	orrs	r7, r1
    b5f0:	077b      	lsls	r3, r7, #29
    b5f2:	d009      	beq.n	b608 <__aeabi_dadd+0x120>
    b5f4:	230f      	movs	r3, #15
    b5f6:	403b      	ands	r3, r7
    b5f8:	2b04      	cmp	r3, #4
    b5fa:	d005      	beq.n	b608 <__aeabi_dadd+0x120>
    b5fc:	1d3b      	adds	r3, r7, #4
    b5fe:	42bb      	cmp	r3, r7
    b600:	41bf      	sbcs	r7, r7
    b602:	427f      	negs	r7, r7
    b604:	19e4      	adds	r4, r4, r7
    b606:	001f      	movs	r7, r3
    b608:	0223      	lsls	r3, r4, #8
    b60a:	d52c      	bpl.n	b666 <__aeabi_dadd+0x17e>
    b60c:	4b96      	ldr	r3, [pc, #600]	; (b868 <__aeabi_dadd+0x380>)
    b60e:	3601      	adds	r6, #1
    b610:	429e      	cmp	r6, r3
    b612:	d100      	bne.n	b616 <__aeabi_dadd+0x12e>
    b614:	e09a      	b.n	b74c <__aeabi_dadd+0x264>
    b616:	4645      	mov	r5, r8
    b618:	4b94      	ldr	r3, [pc, #592]	; (b86c <__aeabi_dadd+0x384>)
    b61a:	08ff      	lsrs	r7, r7, #3
    b61c:	401c      	ands	r4, r3
    b61e:	0760      	lsls	r0, r4, #29
    b620:	0576      	lsls	r6, r6, #21
    b622:	0264      	lsls	r4, r4, #9
    b624:	4307      	orrs	r7, r0
    b626:	0b24      	lsrs	r4, r4, #12
    b628:	0d76      	lsrs	r6, r6, #21
    b62a:	2100      	movs	r1, #0
    b62c:	0324      	lsls	r4, r4, #12
    b62e:	0b23      	lsrs	r3, r4, #12
    b630:	0d0c      	lsrs	r4, r1, #20
    b632:	4a8f      	ldr	r2, [pc, #572]	; (b870 <__aeabi_dadd+0x388>)
    b634:	0524      	lsls	r4, r4, #20
    b636:	431c      	orrs	r4, r3
    b638:	4014      	ands	r4, r2
    b63a:	0533      	lsls	r3, r6, #20
    b63c:	4323      	orrs	r3, r4
    b63e:	005b      	lsls	r3, r3, #1
    b640:	07ed      	lsls	r5, r5, #31
    b642:	085b      	lsrs	r3, r3, #1
    b644:	432b      	orrs	r3, r5
    b646:	0038      	movs	r0, r7
    b648:	0019      	movs	r1, r3
    b64a:	bc3c      	pop	{r2, r3, r4, r5}
    b64c:	4690      	mov	r8, r2
    b64e:	4699      	mov	r9, r3
    b650:	46a2      	mov	sl, r4
    b652:	46ab      	mov	fp, r5
    b654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b656:	4664      	mov	r4, ip
    b658:	4304      	orrs	r4, r0
    b65a:	d100      	bne.n	b65e <__aeabi_dadd+0x176>
    b65c:	e211      	b.n	ba82 <__aeabi_dadd+0x59a>
    b65e:	0004      	movs	r4, r0
    b660:	4667      	mov	r7, ip
    b662:	077b      	lsls	r3, r7, #29
    b664:	d1c6      	bne.n	b5f4 <__aeabi_dadd+0x10c>
    b666:	4645      	mov	r5, r8
    b668:	0760      	lsls	r0, r4, #29
    b66a:	08ff      	lsrs	r7, r7, #3
    b66c:	4307      	orrs	r7, r0
    b66e:	08e4      	lsrs	r4, r4, #3
    b670:	4b7d      	ldr	r3, [pc, #500]	; (b868 <__aeabi_dadd+0x380>)
    b672:	429e      	cmp	r6, r3
    b674:	d030      	beq.n	b6d8 <__aeabi_dadd+0x1f0>
    b676:	0324      	lsls	r4, r4, #12
    b678:	0576      	lsls	r6, r6, #21
    b67a:	0b24      	lsrs	r4, r4, #12
    b67c:	0d76      	lsrs	r6, r6, #21
    b67e:	e7d4      	b.n	b62a <__aeabi_dadd+0x142>
    b680:	1a33      	subs	r3, r6, r0
    b682:	469a      	mov	sl, r3
    b684:	2b00      	cmp	r3, #0
    b686:	dd78      	ble.n	b77a <__aeabi_dadd+0x292>
    b688:	2800      	cmp	r0, #0
    b68a:	d031      	beq.n	b6f0 <__aeabi_dadd+0x208>
    b68c:	4876      	ldr	r0, [pc, #472]	; (b868 <__aeabi_dadd+0x380>)
    b68e:	4286      	cmp	r6, r0
    b690:	d0ae      	beq.n	b5f0 <__aeabi_dadd+0x108>
    b692:	2080      	movs	r0, #128	; 0x80
    b694:	0400      	lsls	r0, r0, #16
    b696:	4301      	orrs	r1, r0
    b698:	4653      	mov	r3, sl
    b69a:	2b38      	cmp	r3, #56	; 0x38
    b69c:	dc00      	bgt.n	b6a0 <__aeabi_dadd+0x1b8>
    b69e:	e0e9      	b.n	b874 <__aeabi_dadd+0x38c>
    b6a0:	430a      	orrs	r2, r1
    b6a2:	1e51      	subs	r1, r2, #1
    b6a4:	418a      	sbcs	r2, r1
    b6a6:	2100      	movs	r1, #0
    b6a8:	19d2      	adds	r2, r2, r7
    b6aa:	42ba      	cmp	r2, r7
    b6ac:	41bf      	sbcs	r7, r7
    b6ae:	1909      	adds	r1, r1, r4
    b6b0:	427c      	negs	r4, r7
    b6b2:	0017      	movs	r7, r2
    b6b4:	190c      	adds	r4, r1, r4
    b6b6:	0223      	lsls	r3, r4, #8
    b6b8:	d5d3      	bpl.n	b662 <__aeabi_dadd+0x17a>
    b6ba:	4b6b      	ldr	r3, [pc, #428]	; (b868 <__aeabi_dadd+0x380>)
    b6bc:	3601      	adds	r6, #1
    b6be:	429e      	cmp	r6, r3
    b6c0:	d100      	bne.n	b6c4 <__aeabi_dadd+0x1dc>
    b6c2:	e13a      	b.n	b93a <__aeabi_dadd+0x452>
    b6c4:	2001      	movs	r0, #1
    b6c6:	4b69      	ldr	r3, [pc, #420]	; (b86c <__aeabi_dadd+0x384>)
    b6c8:	401c      	ands	r4, r3
    b6ca:	087b      	lsrs	r3, r7, #1
    b6cc:	4007      	ands	r7, r0
    b6ce:	431f      	orrs	r7, r3
    b6d0:	07e0      	lsls	r0, r4, #31
    b6d2:	4307      	orrs	r7, r0
    b6d4:	0864      	lsrs	r4, r4, #1
    b6d6:	e78b      	b.n	b5f0 <__aeabi_dadd+0x108>
    b6d8:	0023      	movs	r3, r4
    b6da:	433b      	orrs	r3, r7
    b6dc:	d100      	bne.n	b6e0 <__aeabi_dadd+0x1f8>
    b6de:	e1cb      	b.n	ba78 <__aeabi_dadd+0x590>
    b6e0:	2280      	movs	r2, #128	; 0x80
    b6e2:	0312      	lsls	r2, r2, #12
    b6e4:	4314      	orrs	r4, r2
    b6e6:	0324      	lsls	r4, r4, #12
    b6e8:	0b24      	lsrs	r4, r4, #12
    b6ea:	e79e      	b.n	b62a <__aeabi_dadd+0x142>
    b6ec:	002e      	movs	r6, r5
    b6ee:	e77f      	b.n	b5f0 <__aeabi_dadd+0x108>
    b6f0:	0008      	movs	r0, r1
    b6f2:	4310      	orrs	r0, r2
    b6f4:	d100      	bne.n	b6f8 <__aeabi_dadd+0x210>
    b6f6:	e0b4      	b.n	b862 <__aeabi_dadd+0x37a>
    b6f8:	1e58      	subs	r0, r3, #1
    b6fa:	2800      	cmp	r0, #0
    b6fc:	d000      	beq.n	b700 <__aeabi_dadd+0x218>
    b6fe:	e0de      	b.n	b8be <__aeabi_dadd+0x3d6>
    b700:	18ba      	adds	r2, r7, r2
    b702:	42ba      	cmp	r2, r7
    b704:	419b      	sbcs	r3, r3
    b706:	1864      	adds	r4, r4, r1
    b708:	425b      	negs	r3, r3
    b70a:	18e4      	adds	r4, r4, r3
    b70c:	0017      	movs	r7, r2
    b70e:	2601      	movs	r6, #1
    b710:	0223      	lsls	r3, r4, #8
    b712:	d5a6      	bpl.n	b662 <__aeabi_dadd+0x17a>
    b714:	2602      	movs	r6, #2
    b716:	e7d5      	b.n	b6c4 <__aeabi_dadd+0x1dc>
    b718:	2d00      	cmp	r5, #0
    b71a:	d16e      	bne.n	b7fa <__aeabi_dadd+0x312>
    b71c:	1c70      	adds	r0, r6, #1
    b71e:	0540      	lsls	r0, r0, #21
    b720:	0d40      	lsrs	r0, r0, #21
    b722:	2801      	cmp	r0, #1
    b724:	dc00      	bgt.n	b728 <__aeabi_dadd+0x240>
    b726:	e0f9      	b.n	b91c <__aeabi_dadd+0x434>
    b728:	1ab8      	subs	r0, r7, r2
    b72a:	4684      	mov	ip, r0
    b72c:	4287      	cmp	r7, r0
    b72e:	4180      	sbcs	r0, r0
    b730:	1ae5      	subs	r5, r4, r3
    b732:	4240      	negs	r0, r0
    b734:	1a2d      	subs	r5, r5, r0
    b736:	0228      	lsls	r0, r5, #8
    b738:	d400      	bmi.n	b73c <__aeabi_dadd+0x254>
    b73a:	e089      	b.n	b850 <__aeabi_dadd+0x368>
    b73c:	1bd7      	subs	r7, r2, r7
    b73e:	42ba      	cmp	r2, r7
    b740:	4192      	sbcs	r2, r2
    b742:	1b1c      	subs	r4, r3, r4
    b744:	4252      	negs	r2, r2
    b746:	1aa5      	subs	r5, r4, r2
    b748:	46d8      	mov	r8, fp
    b74a:	e729      	b.n	b5a0 <__aeabi_dadd+0xb8>
    b74c:	4645      	mov	r5, r8
    b74e:	2400      	movs	r4, #0
    b750:	2700      	movs	r7, #0
    b752:	e76a      	b.n	b62a <__aeabi_dadd+0x142>
    b754:	4c45      	ldr	r4, [pc, #276]	; (b86c <__aeabi_dadd+0x384>)
    b756:	1af6      	subs	r6, r6, r3
    b758:	402c      	ands	r4, r5
    b75a:	e749      	b.n	b5f0 <__aeabi_dadd+0x108>
    b75c:	003d      	movs	r5, r7
    b75e:	3828      	subs	r0, #40	; 0x28
    b760:	4085      	lsls	r5, r0
    b762:	2700      	movs	r7, #0
    b764:	e72e      	b.n	b5c4 <__aeabi_dadd+0xdc>
    b766:	0038      	movs	r0, r7
    b768:	f001 fcb8 	bl	d0dc <__clzsi2>
    b76c:	3020      	adds	r0, #32
    b76e:	e71d      	b.n	b5ac <__aeabi_dadd+0xc4>
    b770:	430a      	orrs	r2, r1
    b772:	1e51      	subs	r1, r2, #1
    b774:	418a      	sbcs	r2, r1
    b776:	2100      	movs	r1, #0
    b778:	e707      	b.n	b58a <__aeabi_dadd+0xa2>
    b77a:	2b00      	cmp	r3, #0
    b77c:	d000      	beq.n	b780 <__aeabi_dadd+0x298>
    b77e:	e0f3      	b.n	b968 <__aeabi_dadd+0x480>
    b780:	1c70      	adds	r0, r6, #1
    b782:	0543      	lsls	r3, r0, #21
    b784:	0d5b      	lsrs	r3, r3, #21
    b786:	2b01      	cmp	r3, #1
    b788:	dc00      	bgt.n	b78c <__aeabi_dadd+0x2a4>
    b78a:	e0ad      	b.n	b8e8 <__aeabi_dadd+0x400>
    b78c:	4b36      	ldr	r3, [pc, #216]	; (b868 <__aeabi_dadd+0x380>)
    b78e:	4298      	cmp	r0, r3
    b790:	d100      	bne.n	b794 <__aeabi_dadd+0x2ac>
    b792:	e0d1      	b.n	b938 <__aeabi_dadd+0x450>
    b794:	18ba      	adds	r2, r7, r2
    b796:	42ba      	cmp	r2, r7
    b798:	41bf      	sbcs	r7, r7
    b79a:	1864      	adds	r4, r4, r1
    b79c:	427f      	negs	r7, r7
    b79e:	19e4      	adds	r4, r4, r7
    b7a0:	07e7      	lsls	r7, r4, #31
    b7a2:	0852      	lsrs	r2, r2, #1
    b7a4:	4317      	orrs	r7, r2
    b7a6:	0864      	lsrs	r4, r4, #1
    b7a8:	0006      	movs	r6, r0
    b7aa:	e721      	b.n	b5f0 <__aeabi_dadd+0x108>
    b7ac:	482e      	ldr	r0, [pc, #184]	; (b868 <__aeabi_dadd+0x380>)
    b7ae:	4285      	cmp	r5, r0
    b7b0:	d100      	bne.n	b7b4 <__aeabi_dadd+0x2cc>
    b7b2:	e093      	b.n	b8dc <__aeabi_dadd+0x3f4>
    b7b4:	001d      	movs	r5, r3
    b7b6:	e6d0      	b.n	b55a <__aeabi_dadd+0x72>
    b7b8:	0029      	movs	r1, r5
    b7ba:	3e1f      	subs	r6, #31
    b7bc:	40f1      	lsrs	r1, r6
    b7be:	2b20      	cmp	r3, #32
    b7c0:	d100      	bne.n	b7c4 <__aeabi_dadd+0x2dc>
    b7c2:	e08d      	b.n	b8e0 <__aeabi_dadd+0x3f8>
    b7c4:	2240      	movs	r2, #64	; 0x40
    b7c6:	1ad3      	subs	r3, r2, r3
    b7c8:	409d      	lsls	r5, r3
    b7ca:	432f      	orrs	r7, r5
    b7cc:	1e7d      	subs	r5, r7, #1
    b7ce:	41af      	sbcs	r7, r5
    b7d0:	2400      	movs	r4, #0
    b7d2:	430f      	orrs	r7, r1
    b7d4:	2600      	movs	r6, #0
    b7d6:	e744      	b.n	b662 <__aeabi_dadd+0x17a>
    b7d8:	002b      	movs	r3, r5
    b7da:	0008      	movs	r0, r1
    b7dc:	3b20      	subs	r3, #32
    b7de:	40d8      	lsrs	r0, r3
    b7e0:	0003      	movs	r3, r0
    b7e2:	2d20      	cmp	r5, #32
    b7e4:	d100      	bne.n	b7e8 <__aeabi_dadd+0x300>
    b7e6:	e07d      	b.n	b8e4 <__aeabi_dadd+0x3fc>
    b7e8:	2040      	movs	r0, #64	; 0x40
    b7ea:	1b45      	subs	r5, r0, r5
    b7ec:	40a9      	lsls	r1, r5
    b7ee:	430a      	orrs	r2, r1
    b7f0:	1e51      	subs	r1, r2, #1
    b7f2:	418a      	sbcs	r2, r1
    b7f4:	2100      	movs	r1, #0
    b7f6:	431a      	orrs	r2, r3
    b7f8:	e6c7      	b.n	b58a <__aeabi_dadd+0xa2>
    b7fa:	2e00      	cmp	r6, #0
    b7fc:	d050      	beq.n	b8a0 <__aeabi_dadd+0x3b8>
    b7fe:	4e1a      	ldr	r6, [pc, #104]	; (b868 <__aeabi_dadd+0x380>)
    b800:	42b0      	cmp	r0, r6
    b802:	d057      	beq.n	b8b4 <__aeabi_dadd+0x3cc>
    b804:	2680      	movs	r6, #128	; 0x80
    b806:	426b      	negs	r3, r5
    b808:	4699      	mov	r9, r3
    b80a:	0436      	lsls	r6, r6, #16
    b80c:	4334      	orrs	r4, r6
    b80e:	464b      	mov	r3, r9
    b810:	2b38      	cmp	r3, #56	; 0x38
    b812:	dd00      	ble.n	b816 <__aeabi_dadd+0x32e>
    b814:	e0d6      	b.n	b9c4 <__aeabi_dadd+0x4dc>
    b816:	2b1f      	cmp	r3, #31
    b818:	dd00      	ble.n	b81c <__aeabi_dadd+0x334>
    b81a:	e135      	b.n	ba88 <__aeabi_dadd+0x5a0>
    b81c:	2620      	movs	r6, #32
    b81e:	1af5      	subs	r5, r6, r3
    b820:	0026      	movs	r6, r4
    b822:	40ae      	lsls	r6, r5
    b824:	46b2      	mov	sl, r6
    b826:	003e      	movs	r6, r7
    b828:	40de      	lsrs	r6, r3
    b82a:	46ac      	mov	ip, r5
    b82c:	0035      	movs	r5, r6
    b82e:	4656      	mov	r6, sl
    b830:	432e      	orrs	r6, r5
    b832:	4665      	mov	r5, ip
    b834:	40af      	lsls	r7, r5
    b836:	1e7d      	subs	r5, r7, #1
    b838:	41af      	sbcs	r7, r5
    b83a:	40dc      	lsrs	r4, r3
    b83c:	4337      	orrs	r7, r6
    b83e:	1bd7      	subs	r7, r2, r7
    b840:	42ba      	cmp	r2, r7
    b842:	4192      	sbcs	r2, r2
    b844:	1b0c      	subs	r4, r1, r4
    b846:	4252      	negs	r2, r2
    b848:	1aa4      	subs	r4, r4, r2
    b84a:	0006      	movs	r6, r0
    b84c:	46d8      	mov	r8, fp
    b84e:	e6a3      	b.n	b598 <__aeabi_dadd+0xb0>
    b850:	4664      	mov	r4, ip
    b852:	4667      	mov	r7, ip
    b854:	432c      	orrs	r4, r5
    b856:	d000      	beq.n	b85a <__aeabi_dadd+0x372>
    b858:	e6a2      	b.n	b5a0 <__aeabi_dadd+0xb8>
    b85a:	2500      	movs	r5, #0
    b85c:	2600      	movs	r6, #0
    b85e:	2700      	movs	r7, #0
    b860:	e706      	b.n	b670 <__aeabi_dadd+0x188>
    b862:	001e      	movs	r6, r3
    b864:	e6c4      	b.n	b5f0 <__aeabi_dadd+0x108>
    b866:	46c0      	nop			; (mov r8, r8)
    b868:	000007ff 	.word	0x000007ff
    b86c:	ff7fffff 	.word	0xff7fffff
    b870:	800fffff 	.word	0x800fffff
    b874:	2b1f      	cmp	r3, #31
    b876:	dc63      	bgt.n	b940 <__aeabi_dadd+0x458>
    b878:	2020      	movs	r0, #32
    b87a:	1ac3      	subs	r3, r0, r3
    b87c:	0008      	movs	r0, r1
    b87e:	4098      	lsls	r0, r3
    b880:	469c      	mov	ip, r3
    b882:	4683      	mov	fp, r0
    b884:	4653      	mov	r3, sl
    b886:	0010      	movs	r0, r2
    b888:	40d8      	lsrs	r0, r3
    b88a:	0003      	movs	r3, r0
    b88c:	4658      	mov	r0, fp
    b88e:	4318      	orrs	r0, r3
    b890:	4663      	mov	r3, ip
    b892:	409a      	lsls	r2, r3
    b894:	1e53      	subs	r3, r2, #1
    b896:	419a      	sbcs	r2, r3
    b898:	4653      	mov	r3, sl
    b89a:	4302      	orrs	r2, r0
    b89c:	40d9      	lsrs	r1, r3
    b89e:	e703      	b.n	b6a8 <__aeabi_dadd+0x1c0>
    b8a0:	0026      	movs	r6, r4
    b8a2:	433e      	orrs	r6, r7
    b8a4:	d006      	beq.n	b8b4 <__aeabi_dadd+0x3cc>
    b8a6:	43eb      	mvns	r3, r5
    b8a8:	4699      	mov	r9, r3
    b8aa:	2b00      	cmp	r3, #0
    b8ac:	d0c7      	beq.n	b83e <__aeabi_dadd+0x356>
    b8ae:	4e94      	ldr	r6, [pc, #592]	; (bb00 <__aeabi_dadd+0x618>)
    b8b0:	42b0      	cmp	r0, r6
    b8b2:	d1ac      	bne.n	b80e <__aeabi_dadd+0x326>
    b8b4:	000c      	movs	r4, r1
    b8b6:	0017      	movs	r7, r2
    b8b8:	0006      	movs	r6, r0
    b8ba:	46d8      	mov	r8, fp
    b8bc:	e698      	b.n	b5f0 <__aeabi_dadd+0x108>
    b8be:	4b90      	ldr	r3, [pc, #576]	; (bb00 <__aeabi_dadd+0x618>)
    b8c0:	459a      	cmp	sl, r3
    b8c2:	d00b      	beq.n	b8dc <__aeabi_dadd+0x3f4>
    b8c4:	4682      	mov	sl, r0
    b8c6:	e6e7      	b.n	b698 <__aeabi_dadd+0x1b0>
    b8c8:	2800      	cmp	r0, #0
    b8ca:	d000      	beq.n	b8ce <__aeabi_dadd+0x3e6>
    b8cc:	e09e      	b.n	ba0c <__aeabi_dadd+0x524>
    b8ce:	0018      	movs	r0, r3
    b8d0:	4310      	orrs	r0, r2
    b8d2:	d100      	bne.n	b8d6 <__aeabi_dadd+0x3ee>
    b8d4:	e0e9      	b.n	baaa <__aeabi_dadd+0x5c2>
    b8d6:	001c      	movs	r4, r3
    b8d8:	0017      	movs	r7, r2
    b8da:	46d8      	mov	r8, fp
    b8dc:	4e88      	ldr	r6, [pc, #544]	; (bb00 <__aeabi_dadd+0x618>)
    b8de:	e687      	b.n	b5f0 <__aeabi_dadd+0x108>
    b8e0:	2500      	movs	r5, #0
    b8e2:	e772      	b.n	b7ca <__aeabi_dadd+0x2e2>
    b8e4:	2100      	movs	r1, #0
    b8e6:	e782      	b.n	b7ee <__aeabi_dadd+0x306>
    b8e8:	0023      	movs	r3, r4
    b8ea:	433b      	orrs	r3, r7
    b8ec:	2e00      	cmp	r6, #0
    b8ee:	d000      	beq.n	b8f2 <__aeabi_dadd+0x40a>
    b8f0:	e0ab      	b.n	ba4a <__aeabi_dadd+0x562>
    b8f2:	2b00      	cmp	r3, #0
    b8f4:	d100      	bne.n	b8f8 <__aeabi_dadd+0x410>
    b8f6:	e0e7      	b.n	bac8 <__aeabi_dadd+0x5e0>
    b8f8:	000b      	movs	r3, r1
    b8fa:	4313      	orrs	r3, r2
    b8fc:	d100      	bne.n	b900 <__aeabi_dadd+0x418>
    b8fe:	e677      	b.n	b5f0 <__aeabi_dadd+0x108>
    b900:	18ba      	adds	r2, r7, r2
    b902:	42ba      	cmp	r2, r7
    b904:	41bf      	sbcs	r7, r7
    b906:	1864      	adds	r4, r4, r1
    b908:	427f      	negs	r7, r7
    b90a:	19e4      	adds	r4, r4, r7
    b90c:	0223      	lsls	r3, r4, #8
    b90e:	d400      	bmi.n	b912 <__aeabi_dadd+0x42a>
    b910:	e0f2      	b.n	baf8 <__aeabi_dadd+0x610>
    b912:	4b7c      	ldr	r3, [pc, #496]	; (bb04 <__aeabi_dadd+0x61c>)
    b914:	0017      	movs	r7, r2
    b916:	401c      	ands	r4, r3
    b918:	0006      	movs	r6, r0
    b91a:	e669      	b.n	b5f0 <__aeabi_dadd+0x108>
    b91c:	0020      	movs	r0, r4
    b91e:	4338      	orrs	r0, r7
    b920:	2e00      	cmp	r6, #0
    b922:	d1d1      	bne.n	b8c8 <__aeabi_dadd+0x3e0>
    b924:	2800      	cmp	r0, #0
    b926:	d15b      	bne.n	b9e0 <__aeabi_dadd+0x4f8>
    b928:	001c      	movs	r4, r3
    b92a:	4314      	orrs	r4, r2
    b92c:	d100      	bne.n	b930 <__aeabi_dadd+0x448>
    b92e:	e0a8      	b.n	ba82 <__aeabi_dadd+0x59a>
    b930:	001c      	movs	r4, r3
    b932:	0017      	movs	r7, r2
    b934:	46d8      	mov	r8, fp
    b936:	e65b      	b.n	b5f0 <__aeabi_dadd+0x108>
    b938:	0006      	movs	r6, r0
    b93a:	2400      	movs	r4, #0
    b93c:	2700      	movs	r7, #0
    b93e:	e697      	b.n	b670 <__aeabi_dadd+0x188>
    b940:	4650      	mov	r0, sl
    b942:	000b      	movs	r3, r1
    b944:	3820      	subs	r0, #32
    b946:	40c3      	lsrs	r3, r0
    b948:	4699      	mov	r9, r3
    b94a:	4653      	mov	r3, sl
    b94c:	2b20      	cmp	r3, #32
    b94e:	d100      	bne.n	b952 <__aeabi_dadd+0x46a>
    b950:	e095      	b.n	ba7e <__aeabi_dadd+0x596>
    b952:	2340      	movs	r3, #64	; 0x40
    b954:	4650      	mov	r0, sl
    b956:	1a1b      	subs	r3, r3, r0
    b958:	4099      	lsls	r1, r3
    b95a:	430a      	orrs	r2, r1
    b95c:	1e51      	subs	r1, r2, #1
    b95e:	418a      	sbcs	r2, r1
    b960:	464b      	mov	r3, r9
    b962:	2100      	movs	r1, #0
    b964:	431a      	orrs	r2, r3
    b966:	e69f      	b.n	b6a8 <__aeabi_dadd+0x1c0>
    b968:	2e00      	cmp	r6, #0
    b96a:	d130      	bne.n	b9ce <__aeabi_dadd+0x4e6>
    b96c:	0026      	movs	r6, r4
    b96e:	433e      	orrs	r6, r7
    b970:	d067      	beq.n	ba42 <__aeabi_dadd+0x55a>
    b972:	43db      	mvns	r3, r3
    b974:	469a      	mov	sl, r3
    b976:	2b00      	cmp	r3, #0
    b978:	d01c      	beq.n	b9b4 <__aeabi_dadd+0x4cc>
    b97a:	4e61      	ldr	r6, [pc, #388]	; (bb00 <__aeabi_dadd+0x618>)
    b97c:	42b0      	cmp	r0, r6
    b97e:	d060      	beq.n	ba42 <__aeabi_dadd+0x55a>
    b980:	4653      	mov	r3, sl
    b982:	2b38      	cmp	r3, #56	; 0x38
    b984:	dd00      	ble.n	b988 <__aeabi_dadd+0x4a0>
    b986:	e096      	b.n	bab6 <__aeabi_dadd+0x5ce>
    b988:	2b1f      	cmp	r3, #31
    b98a:	dd00      	ble.n	b98e <__aeabi_dadd+0x4a6>
    b98c:	e09f      	b.n	bace <__aeabi_dadd+0x5e6>
    b98e:	2620      	movs	r6, #32
    b990:	1af3      	subs	r3, r6, r3
    b992:	0026      	movs	r6, r4
    b994:	409e      	lsls	r6, r3
    b996:	469c      	mov	ip, r3
    b998:	46b3      	mov	fp, r6
    b99a:	4653      	mov	r3, sl
    b99c:	003e      	movs	r6, r7
    b99e:	40de      	lsrs	r6, r3
    b9a0:	0033      	movs	r3, r6
    b9a2:	465e      	mov	r6, fp
    b9a4:	431e      	orrs	r6, r3
    b9a6:	4663      	mov	r3, ip
    b9a8:	409f      	lsls	r7, r3
    b9aa:	1e7b      	subs	r3, r7, #1
    b9ac:	419f      	sbcs	r7, r3
    b9ae:	4653      	mov	r3, sl
    b9b0:	40dc      	lsrs	r4, r3
    b9b2:	4337      	orrs	r7, r6
    b9b4:	18bf      	adds	r7, r7, r2
    b9b6:	4297      	cmp	r7, r2
    b9b8:	4192      	sbcs	r2, r2
    b9ba:	1864      	adds	r4, r4, r1
    b9bc:	4252      	negs	r2, r2
    b9be:	18a4      	adds	r4, r4, r2
    b9c0:	0006      	movs	r6, r0
    b9c2:	e678      	b.n	b6b6 <__aeabi_dadd+0x1ce>
    b9c4:	4327      	orrs	r7, r4
    b9c6:	1e7c      	subs	r4, r7, #1
    b9c8:	41a7      	sbcs	r7, r4
    b9ca:	2400      	movs	r4, #0
    b9cc:	e737      	b.n	b83e <__aeabi_dadd+0x356>
    b9ce:	4e4c      	ldr	r6, [pc, #304]	; (bb00 <__aeabi_dadd+0x618>)
    b9d0:	42b0      	cmp	r0, r6
    b9d2:	d036      	beq.n	ba42 <__aeabi_dadd+0x55a>
    b9d4:	2680      	movs	r6, #128	; 0x80
    b9d6:	425b      	negs	r3, r3
    b9d8:	0436      	lsls	r6, r6, #16
    b9da:	469a      	mov	sl, r3
    b9dc:	4334      	orrs	r4, r6
    b9de:	e7cf      	b.n	b980 <__aeabi_dadd+0x498>
    b9e0:	0018      	movs	r0, r3
    b9e2:	4310      	orrs	r0, r2
    b9e4:	d100      	bne.n	b9e8 <__aeabi_dadd+0x500>
    b9e6:	e603      	b.n	b5f0 <__aeabi_dadd+0x108>
    b9e8:	1ab8      	subs	r0, r7, r2
    b9ea:	4684      	mov	ip, r0
    b9ec:	4567      	cmp	r7, ip
    b9ee:	41ad      	sbcs	r5, r5
    b9f0:	1ae0      	subs	r0, r4, r3
    b9f2:	426d      	negs	r5, r5
    b9f4:	1b40      	subs	r0, r0, r5
    b9f6:	0205      	lsls	r5, r0, #8
    b9f8:	d400      	bmi.n	b9fc <__aeabi_dadd+0x514>
    b9fa:	e62c      	b.n	b656 <__aeabi_dadd+0x16e>
    b9fc:	1bd7      	subs	r7, r2, r7
    b9fe:	42ba      	cmp	r2, r7
    ba00:	4192      	sbcs	r2, r2
    ba02:	1b1c      	subs	r4, r3, r4
    ba04:	4252      	negs	r2, r2
    ba06:	1aa4      	subs	r4, r4, r2
    ba08:	46d8      	mov	r8, fp
    ba0a:	e5f1      	b.n	b5f0 <__aeabi_dadd+0x108>
    ba0c:	0018      	movs	r0, r3
    ba0e:	4310      	orrs	r0, r2
    ba10:	d100      	bne.n	ba14 <__aeabi_dadd+0x52c>
    ba12:	e763      	b.n	b8dc <__aeabi_dadd+0x3f4>
    ba14:	08f8      	lsrs	r0, r7, #3
    ba16:	0767      	lsls	r7, r4, #29
    ba18:	4307      	orrs	r7, r0
    ba1a:	2080      	movs	r0, #128	; 0x80
    ba1c:	08e4      	lsrs	r4, r4, #3
    ba1e:	0300      	lsls	r0, r0, #12
    ba20:	4204      	tst	r4, r0
    ba22:	d008      	beq.n	ba36 <__aeabi_dadd+0x54e>
    ba24:	08dd      	lsrs	r5, r3, #3
    ba26:	4205      	tst	r5, r0
    ba28:	d105      	bne.n	ba36 <__aeabi_dadd+0x54e>
    ba2a:	08d2      	lsrs	r2, r2, #3
    ba2c:	0759      	lsls	r1, r3, #29
    ba2e:	4311      	orrs	r1, r2
    ba30:	000f      	movs	r7, r1
    ba32:	002c      	movs	r4, r5
    ba34:	46d8      	mov	r8, fp
    ba36:	0f7b      	lsrs	r3, r7, #29
    ba38:	00e4      	lsls	r4, r4, #3
    ba3a:	431c      	orrs	r4, r3
    ba3c:	00ff      	lsls	r7, r7, #3
    ba3e:	4e30      	ldr	r6, [pc, #192]	; (bb00 <__aeabi_dadd+0x618>)
    ba40:	e5d6      	b.n	b5f0 <__aeabi_dadd+0x108>
    ba42:	000c      	movs	r4, r1
    ba44:	0017      	movs	r7, r2
    ba46:	0006      	movs	r6, r0
    ba48:	e5d2      	b.n	b5f0 <__aeabi_dadd+0x108>
    ba4a:	2b00      	cmp	r3, #0
    ba4c:	d038      	beq.n	bac0 <__aeabi_dadd+0x5d8>
    ba4e:	000b      	movs	r3, r1
    ba50:	4313      	orrs	r3, r2
    ba52:	d100      	bne.n	ba56 <__aeabi_dadd+0x56e>
    ba54:	e742      	b.n	b8dc <__aeabi_dadd+0x3f4>
    ba56:	08f8      	lsrs	r0, r7, #3
    ba58:	0767      	lsls	r7, r4, #29
    ba5a:	4307      	orrs	r7, r0
    ba5c:	2080      	movs	r0, #128	; 0x80
    ba5e:	08e4      	lsrs	r4, r4, #3
    ba60:	0300      	lsls	r0, r0, #12
    ba62:	4204      	tst	r4, r0
    ba64:	d0e7      	beq.n	ba36 <__aeabi_dadd+0x54e>
    ba66:	08cb      	lsrs	r3, r1, #3
    ba68:	4203      	tst	r3, r0
    ba6a:	d1e4      	bne.n	ba36 <__aeabi_dadd+0x54e>
    ba6c:	08d2      	lsrs	r2, r2, #3
    ba6e:	0749      	lsls	r1, r1, #29
    ba70:	4311      	orrs	r1, r2
    ba72:	000f      	movs	r7, r1
    ba74:	001c      	movs	r4, r3
    ba76:	e7de      	b.n	ba36 <__aeabi_dadd+0x54e>
    ba78:	2700      	movs	r7, #0
    ba7a:	2400      	movs	r4, #0
    ba7c:	e5d5      	b.n	b62a <__aeabi_dadd+0x142>
    ba7e:	2100      	movs	r1, #0
    ba80:	e76b      	b.n	b95a <__aeabi_dadd+0x472>
    ba82:	2500      	movs	r5, #0
    ba84:	2700      	movs	r7, #0
    ba86:	e5f3      	b.n	b670 <__aeabi_dadd+0x188>
    ba88:	464e      	mov	r6, r9
    ba8a:	0025      	movs	r5, r4
    ba8c:	3e20      	subs	r6, #32
    ba8e:	40f5      	lsrs	r5, r6
    ba90:	464b      	mov	r3, r9
    ba92:	002e      	movs	r6, r5
    ba94:	2b20      	cmp	r3, #32
    ba96:	d02d      	beq.n	baf4 <__aeabi_dadd+0x60c>
    ba98:	2540      	movs	r5, #64	; 0x40
    ba9a:	1aed      	subs	r5, r5, r3
    ba9c:	40ac      	lsls	r4, r5
    ba9e:	4327      	orrs	r7, r4
    baa0:	1e7c      	subs	r4, r7, #1
    baa2:	41a7      	sbcs	r7, r4
    baa4:	2400      	movs	r4, #0
    baa6:	4337      	orrs	r7, r6
    baa8:	e6c9      	b.n	b83e <__aeabi_dadd+0x356>
    baaa:	2480      	movs	r4, #128	; 0x80
    baac:	2500      	movs	r5, #0
    baae:	0324      	lsls	r4, r4, #12
    bab0:	4e13      	ldr	r6, [pc, #76]	; (bb00 <__aeabi_dadd+0x618>)
    bab2:	2700      	movs	r7, #0
    bab4:	e5dc      	b.n	b670 <__aeabi_dadd+0x188>
    bab6:	4327      	orrs	r7, r4
    bab8:	1e7c      	subs	r4, r7, #1
    baba:	41a7      	sbcs	r7, r4
    babc:	2400      	movs	r4, #0
    babe:	e779      	b.n	b9b4 <__aeabi_dadd+0x4cc>
    bac0:	000c      	movs	r4, r1
    bac2:	0017      	movs	r7, r2
    bac4:	4e0e      	ldr	r6, [pc, #56]	; (bb00 <__aeabi_dadd+0x618>)
    bac6:	e593      	b.n	b5f0 <__aeabi_dadd+0x108>
    bac8:	000c      	movs	r4, r1
    baca:	0017      	movs	r7, r2
    bacc:	e590      	b.n	b5f0 <__aeabi_dadd+0x108>
    bace:	4656      	mov	r6, sl
    bad0:	0023      	movs	r3, r4
    bad2:	3e20      	subs	r6, #32
    bad4:	40f3      	lsrs	r3, r6
    bad6:	4699      	mov	r9, r3
    bad8:	4653      	mov	r3, sl
    bada:	2b20      	cmp	r3, #32
    badc:	d00e      	beq.n	bafc <__aeabi_dadd+0x614>
    bade:	2340      	movs	r3, #64	; 0x40
    bae0:	4656      	mov	r6, sl
    bae2:	1b9b      	subs	r3, r3, r6
    bae4:	409c      	lsls	r4, r3
    bae6:	4327      	orrs	r7, r4
    bae8:	1e7c      	subs	r4, r7, #1
    baea:	41a7      	sbcs	r7, r4
    baec:	464b      	mov	r3, r9
    baee:	2400      	movs	r4, #0
    baf0:	431f      	orrs	r7, r3
    baf2:	e75f      	b.n	b9b4 <__aeabi_dadd+0x4cc>
    baf4:	2400      	movs	r4, #0
    baf6:	e7d2      	b.n	ba9e <__aeabi_dadd+0x5b6>
    baf8:	0017      	movs	r7, r2
    bafa:	e5b2      	b.n	b662 <__aeabi_dadd+0x17a>
    bafc:	2400      	movs	r4, #0
    bafe:	e7f2      	b.n	bae6 <__aeabi_dadd+0x5fe>
    bb00:	000007ff 	.word	0x000007ff
    bb04:	ff7fffff 	.word	0xff7fffff

0000bb08 <__aeabi_ddiv>:
    bb08:	b5f0      	push	{r4, r5, r6, r7, lr}
    bb0a:	4657      	mov	r7, sl
    bb0c:	4645      	mov	r5, r8
    bb0e:	46de      	mov	lr, fp
    bb10:	464e      	mov	r6, r9
    bb12:	b5e0      	push	{r5, r6, r7, lr}
    bb14:	004c      	lsls	r4, r1, #1
    bb16:	030e      	lsls	r6, r1, #12
    bb18:	b087      	sub	sp, #28
    bb1a:	4683      	mov	fp, r0
    bb1c:	4692      	mov	sl, r2
    bb1e:	001d      	movs	r5, r3
    bb20:	4680      	mov	r8, r0
    bb22:	0b36      	lsrs	r6, r6, #12
    bb24:	0d64      	lsrs	r4, r4, #21
    bb26:	0fcf      	lsrs	r7, r1, #31
    bb28:	2c00      	cmp	r4, #0
    bb2a:	d04f      	beq.n	bbcc <__aeabi_ddiv+0xc4>
    bb2c:	4b6f      	ldr	r3, [pc, #444]	; (bcec <__aeabi_ddiv+0x1e4>)
    bb2e:	429c      	cmp	r4, r3
    bb30:	d035      	beq.n	bb9e <__aeabi_ddiv+0x96>
    bb32:	2380      	movs	r3, #128	; 0x80
    bb34:	0f42      	lsrs	r2, r0, #29
    bb36:	041b      	lsls	r3, r3, #16
    bb38:	00f6      	lsls	r6, r6, #3
    bb3a:	4313      	orrs	r3, r2
    bb3c:	4333      	orrs	r3, r6
    bb3e:	4699      	mov	r9, r3
    bb40:	00c3      	lsls	r3, r0, #3
    bb42:	4698      	mov	r8, r3
    bb44:	4b6a      	ldr	r3, [pc, #424]	; (bcf0 <__aeabi_ddiv+0x1e8>)
    bb46:	2600      	movs	r6, #0
    bb48:	469c      	mov	ip, r3
    bb4a:	2300      	movs	r3, #0
    bb4c:	4464      	add	r4, ip
    bb4e:	9303      	str	r3, [sp, #12]
    bb50:	032b      	lsls	r3, r5, #12
    bb52:	0b1b      	lsrs	r3, r3, #12
    bb54:	469b      	mov	fp, r3
    bb56:	006b      	lsls	r3, r5, #1
    bb58:	0fed      	lsrs	r5, r5, #31
    bb5a:	4650      	mov	r0, sl
    bb5c:	0d5b      	lsrs	r3, r3, #21
    bb5e:	9501      	str	r5, [sp, #4]
    bb60:	d05e      	beq.n	bc20 <__aeabi_ddiv+0x118>
    bb62:	4a62      	ldr	r2, [pc, #392]	; (bcec <__aeabi_ddiv+0x1e4>)
    bb64:	4293      	cmp	r3, r2
    bb66:	d053      	beq.n	bc10 <__aeabi_ddiv+0x108>
    bb68:	465a      	mov	r2, fp
    bb6a:	00d1      	lsls	r1, r2, #3
    bb6c:	2280      	movs	r2, #128	; 0x80
    bb6e:	0f40      	lsrs	r0, r0, #29
    bb70:	0412      	lsls	r2, r2, #16
    bb72:	4302      	orrs	r2, r0
    bb74:	430a      	orrs	r2, r1
    bb76:	4693      	mov	fp, r2
    bb78:	4652      	mov	r2, sl
    bb7a:	00d1      	lsls	r1, r2, #3
    bb7c:	4a5c      	ldr	r2, [pc, #368]	; (bcf0 <__aeabi_ddiv+0x1e8>)
    bb7e:	4694      	mov	ip, r2
    bb80:	2200      	movs	r2, #0
    bb82:	4463      	add	r3, ip
    bb84:	0038      	movs	r0, r7
    bb86:	4068      	eors	r0, r5
    bb88:	4684      	mov	ip, r0
    bb8a:	9002      	str	r0, [sp, #8]
    bb8c:	1ae4      	subs	r4, r4, r3
    bb8e:	4316      	orrs	r6, r2
    bb90:	2e0f      	cmp	r6, #15
    bb92:	d900      	bls.n	bb96 <__aeabi_ddiv+0x8e>
    bb94:	e0b4      	b.n	bd00 <__aeabi_ddiv+0x1f8>
    bb96:	4b57      	ldr	r3, [pc, #348]	; (bcf4 <__aeabi_ddiv+0x1ec>)
    bb98:	00b6      	lsls	r6, r6, #2
    bb9a:	599b      	ldr	r3, [r3, r6]
    bb9c:	469f      	mov	pc, r3
    bb9e:	0003      	movs	r3, r0
    bba0:	4333      	orrs	r3, r6
    bba2:	4699      	mov	r9, r3
    bba4:	d16c      	bne.n	bc80 <__aeabi_ddiv+0x178>
    bba6:	2300      	movs	r3, #0
    bba8:	4698      	mov	r8, r3
    bbaa:	3302      	adds	r3, #2
    bbac:	2608      	movs	r6, #8
    bbae:	9303      	str	r3, [sp, #12]
    bbb0:	e7ce      	b.n	bb50 <__aeabi_ddiv+0x48>
    bbb2:	46cb      	mov	fp, r9
    bbb4:	4641      	mov	r1, r8
    bbb6:	9a03      	ldr	r2, [sp, #12]
    bbb8:	9701      	str	r7, [sp, #4]
    bbba:	2a02      	cmp	r2, #2
    bbbc:	d165      	bne.n	bc8a <__aeabi_ddiv+0x182>
    bbbe:	9b01      	ldr	r3, [sp, #4]
    bbc0:	4c4a      	ldr	r4, [pc, #296]	; (bcec <__aeabi_ddiv+0x1e4>)
    bbc2:	469c      	mov	ip, r3
    bbc4:	2300      	movs	r3, #0
    bbc6:	2200      	movs	r2, #0
    bbc8:	4698      	mov	r8, r3
    bbca:	e06b      	b.n	bca4 <__aeabi_ddiv+0x19c>
    bbcc:	0003      	movs	r3, r0
    bbce:	4333      	orrs	r3, r6
    bbd0:	4699      	mov	r9, r3
    bbd2:	d04e      	beq.n	bc72 <__aeabi_ddiv+0x16a>
    bbd4:	2e00      	cmp	r6, #0
    bbd6:	d100      	bne.n	bbda <__aeabi_ddiv+0xd2>
    bbd8:	e1bc      	b.n	bf54 <__aeabi_ddiv+0x44c>
    bbda:	0030      	movs	r0, r6
    bbdc:	f001 fa7e 	bl	d0dc <__clzsi2>
    bbe0:	0003      	movs	r3, r0
    bbe2:	3b0b      	subs	r3, #11
    bbe4:	2b1c      	cmp	r3, #28
    bbe6:	dd00      	ble.n	bbea <__aeabi_ddiv+0xe2>
    bbe8:	e1ac      	b.n	bf44 <__aeabi_ddiv+0x43c>
    bbea:	221d      	movs	r2, #29
    bbec:	1ad3      	subs	r3, r2, r3
    bbee:	465a      	mov	r2, fp
    bbf0:	0001      	movs	r1, r0
    bbf2:	40da      	lsrs	r2, r3
    bbf4:	3908      	subs	r1, #8
    bbf6:	408e      	lsls	r6, r1
    bbf8:	0013      	movs	r3, r2
    bbfa:	4333      	orrs	r3, r6
    bbfc:	4699      	mov	r9, r3
    bbfe:	465b      	mov	r3, fp
    bc00:	408b      	lsls	r3, r1
    bc02:	4698      	mov	r8, r3
    bc04:	2300      	movs	r3, #0
    bc06:	4c3c      	ldr	r4, [pc, #240]	; (bcf8 <__aeabi_ddiv+0x1f0>)
    bc08:	2600      	movs	r6, #0
    bc0a:	1a24      	subs	r4, r4, r0
    bc0c:	9303      	str	r3, [sp, #12]
    bc0e:	e79f      	b.n	bb50 <__aeabi_ddiv+0x48>
    bc10:	4651      	mov	r1, sl
    bc12:	465a      	mov	r2, fp
    bc14:	4311      	orrs	r1, r2
    bc16:	d129      	bne.n	bc6c <__aeabi_ddiv+0x164>
    bc18:	2200      	movs	r2, #0
    bc1a:	4693      	mov	fp, r2
    bc1c:	3202      	adds	r2, #2
    bc1e:	e7b1      	b.n	bb84 <__aeabi_ddiv+0x7c>
    bc20:	4659      	mov	r1, fp
    bc22:	4301      	orrs	r1, r0
    bc24:	d01e      	beq.n	bc64 <__aeabi_ddiv+0x15c>
    bc26:	465b      	mov	r3, fp
    bc28:	2b00      	cmp	r3, #0
    bc2a:	d100      	bne.n	bc2e <__aeabi_ddiv+0x126>
    bc2c:	e19e      	b.n	bf6c <__aeabi_ddiv+0x464>
    bc2e:	4658      	mov	r0, fp
    bc30:	f001 fa54 	bl	d0dc <__clzsi2>
    bc34:	0003      	movs	r3, r0
    bc36:	3b0b      	subs	r3, #11
    bc38:	2b1c      	cmp	r3, #28
    bc3a:	dd00      	ble.n	bc3e <__aeabi_ddiv+0x136>
    bc3c:	e18f      	b.n	bf5e <__aeabi_ddiv+0x456>
    bc3e:	0002      	movs	r2, r0
    bc40:	4659      	mov	r1, fp
    bc42:	3a08      	subs	r2, #8
    bc44:	4091      	lsls	r1, r2
    bc46:	468b      	mov	fp, r1
    bc48:	211d      	movs	r1, #29
    bc4a:	1acb      	subs	r3, r1, r3
    bc4c:	4651      	mov	r1, sl
    bc4e:	40d9      	lsrs	r1, r3
    bc50:	000b      	movs	r3, r1
    bc52:	4659      	mov	r1, fp
    bc54:	430b      	orrs	r3, r1
    bc56:	4651      	mov	r1, sl
    bc58:	469b      	mov	fp, r3
    bc5a:	4091      	lsls	r1, r2
    bc5c:	4b26      	ldr	r3, [pc, #152]	; (bcf8 <__aeabi_ddiv+0x1f0>)
    bc5e:	2200      	movs	r2, #0
    bc60:	1a1b      	subs	r3, r3, r0
    bc62:	e78f      	b.n	bb84 <__aeabi_ddiv+0x7c>
    bc64:	2300      	movs	r3, #0
    bc66:	2201      	movs	r2, #1
    bc68:	469b      	mov	fp, r3
    bc6a:	e78b      	b.n	bb84 <__aeabi_ddiv+0x7c>
    bc6c:	4651      	mov	r1, sl
    bc6e:	2203      	movs	r2, #3
    bc70:	e788      	b.n	bb84 <__aeabi_ddiv+0x7c>
    bc72:	2300      	movs	r3, #0
    bc74:	4698      	mov	r8, r3
    bc76:	3301      	adds	r3, #1
    bc78:	2604      	movs	r6, #4
    bc7a:	2400      	movs	r4, #0
    bc7c:	9303      	str	r3, [sp, #12]
    bc7e:	e767      	b.n	bb50 <__aeabi_ddiv+0x48>
    bc80:	2303      	movs	r3, #3
    bc82:	46b1      	mov	r9, r6
    bc84:	9303      	str	r3, [sp, #12]
    bc86:	260c      	movs	r6, #12
    bc88:	e762      	b.n	bb50 <__aeabi_ddiv+0x48>
    bc8a:	2a03      	cmp	r2, #3
    bc8c:	d100      	bne.n	bc90 <__aeabi_ddiv+0x188>
    bc8e:	e25c      	b.n	c14a <__aeabi_ddiv+0x642>
    bc90:	9b01      	ldr	r3, [sp, #4]
    bc92:	2a01      	cmp	r2, #1
    bc94:	d000      	beq.n	bc98 <__aeabi_ddiv+0x190>
    bc96:	e1e4      	b.n	c062 <__aeabi_ddiv+0x55a>
    bc98:	4013      	ands	r3, r2
    bc9a:	469c      	mov	ip, r3
    bc9c:	2300      	movs	r3, #0
    bc9e:	2400      	movs	r4, #0
    bca0:	2200      	movs	r2, #0
    bca2:	4698      	mov	r8, r3
    bca4:	2100      	movs	r1, #0
    bca6:	0312      	lsls	r2, r2, #12
    bca8:	0b13      	lsrs	r3, r2, #12
    bcaa:	0d0a      	lsrs	r2, r1, #20
    bcac:	0512      	lsls	r2, r2, #20
    bcae:	431a      	orrs	r2, r3
    bcb0:	0523      	lsls	r3, r4, #20
    bcb2:	4c12      	ldr	r4, [pc, #72]	; (bcfc <__aeabi_ddiv+0x1f4>)
    bcb4:	4640      	mov	r0, r8
    bcb6:	4022      	ands	r2, r4
    bcb8:	4313      	orrs	r3, r2
    bcba:	4662      	mov	r2, ip
    bcbc:	005b      	lsls	r3, r3, #1
    bcbe:	07d2      	lsls	r2, r2, #31
    bcc0:	085b      	lsrs	r3, r3, #1
    bcc2:	4313      	orrs	r3, r2
    bcc4:	0019      	movs	r1, r3
    bcc6:	b007      	add	sp, #28
    bcc8:	bc3c      	pop	{r2, r3, r4, r5}
    bcca:	4690      	mov	r8, r2
    bccc:	4699      	mov	r9, r3
    bcce:	46a2      	mov	sl, r4
    bcd0:	46ab      	mov	fp, r5
    bcd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bcd4:	2300      	movs	r3, #0
    bcd6:	2280      	movs	r2, #128	; 0x80
    bcd8:	469c      	mov	ip, r3
    bcda:	0312      	lsls	r2, r2, #12
    bcdc:	4698      	mov	r8, r3
    bcde:	4c03      	ldr	r4, [pc, #12]	; (bcec <__aeabi_ddiv+0x1e4>)
    bce0:	e7e0      	b.n	bca4 <__aeabi_ddiv+0x19c>
    bce2:	2300      	movs	r3, #0
    bce4:	4c01      	ldr	r4, [pc, #4]	; (bcec <__aeabi_ddiv+0x1e4>)
    bce6:	2200      	movs	r2, #0
    bce8:	4698      	mov	r8, r3
    bcea:	e7db      	b.n	bca4 <__aeabi_ddiv+0x19c>
    bcec:	000007ff 	.word	0x000007ff
    bcf0:	fffffc01 	.word	0xfffffc01
    bcf4:	000123e8 	.word	0x000123e8
    bcf8:	fffffc0d 	.word	0xfffffc0d
    bcfc:	800fffff 	.word	0x800fffff
    bd00:	45d9      	cmp	r9, fp
    bd02:	d900      	bls.n	bd06 <__aeabi_ddiv+0x1fe>
    bd04:	e139      	b.n	bf7a <__aeabi_ddiv+0x472>
    bd06:	d100      	bne.n	bd0a <__aeabi_ddiv+0x202>
    bd08:	e134      	b.n	bf74 <__aeabi_ddiv+0x46c>
    bd0a:	2300      	movs	r3, #0
    bd0c:	4646      	mov	r6, r8
    bd0e:	464d      	mov	r5, r9
    bd10:	469a      	mov	sl, r3
    bd12:	3c01      	subs	r4, #1
    bd14:	465b      	mov	r3, fp
    bd16:	0e0a      	lsrs	r2, r1, #24
    bd18:	021b      	lsls	r3, r3, #8
    bd1a:	431a      	orrs	r2, r3
    bd1c:	020b      	lsls	r3, r1, #8
    bd1e:	0c17      	lsrs	r7, r2, #16
    bd20:	9303      	str	r3, [sp, #12]
    bd22:	0413      	lsls	r3, r2, #16
    bd24:	0c1b      	lsrs	r3, r3, #16
    bd26:	0039      	movs	r1, r7
    bd28:	0028      	movs	r0, r5
    bd2a:	4690      	mov	r8, r2
    bd2c:	9301      	str	r3, [sp, #4]
    bd2e:	f7fe fba9 	bl	a484 <__udivsi3>
    bd32:	0002      	movs	r2, r0
    bd34:	9b01      	ldr	r3, [sp, #4]
    bd36:	4683      	mov	fp, r0
    bd38:	435a      	muls	r2, r3
    bd3a:	0028      	movs	r0, r5
    bd3c:	0039      	movs	r1, r7
    bd3e:	4691      	mov	r9, r2
    bd40:	f7fe fc26 	bl	a590 <__aeabi_uidivmod>
    bd44:	0c35      	lsrs	r5, r6, #16
    bd46:	0409      	lsls	r1, r1, #16
    bd48:	430d      	orrs	r5, r1
    bd4a:	45a9      	cmp	r9, r5
    bd4c:	d90d      	bls.n	bd6a <__aeabi_ddiv+0x262>
    bd4e:	465b      	mov	r3, fp
    bd50:	4445      	add	r5, r8
    bd52:	3b01      	subs	r3, #1
    bd54:	45a8      	cmp	r8, r5
    bd56:	d900      	bls.n	bd5a <__aeabi_ddiv+0x252>
    bd58:	e13a      	b.n	bfd0 <__aeabi_ddiv+0x4c8>
    bd5a:	45a9      	cmp	r9, r5
    bd5c:	d800      	bhi.n	bd60 <__aeabi_ddiv+0x258>
    bd5e:	e137      	b.n	bfd0 <__aeabi_ddiv+0x4c8>
    bd60:	2302      	movs	r3, #2
    bd62:	425b      	negs	r3, r3
    bd64:	469c      	mov	ip, r3
    bd66:	4445      	add	r5, r8
    bd68:	44e3      	add	fp, ip
    bd6a:	464b      	mov	r3, r9
    bd6c:	1aeb      	subs	r3, r5, r3
    bd6e:	0039      	movs	r1, r7
    bd70:	0018      	movs	r0, r3
    bd72:	9304      	str	r3, [sp, #16]
    bd74:	f7fe fb86 	bl	a484 <__udivsi3>
    bd78:	9b01      	ldr	r3, [sp, #4]
    bd7a:	0005      	movs	r5, r0
    bd7c:	4343      	muls	r3, r0
    bd7e:	0039      	movs	r1, r7
    bd80:	9804      	ldr	r0, [sp, #16]
    bd82:	4699      	mov	r9, r3
    bd84:	f7fe fc04 	bl	a590 <__aeabi_uidivmod>
    bd88:	0433      	lsls	r3, r6, #16
    bd8a:	0409      	lsls	r1, r1, #16
    bd8c:	0c1b      	lsrs	r3, r3, #16
    bd8e:	430b      	orrs	r3, r1
    bd90:	4599      	cmp	r9, r3
    bd92:	d909      	bls.n	bda8 <__aeabi_ddiv+0x2a0>
    bd94:	4443      	add	r3, r8
    bd96:	1e6a      	subs	r2, r5, #1
    bd98:	4598      	cmp	r8, r3
    bd9a:	d900      	bls.n	bd9e <__aeabi_ddiv+0x296>
    bd9c:	e11a      	b.n	bfd4 <__aeabi_ddiv+0x4cc>
    bd9e:	4599      	cmp	r9, r3
    bda0:	d800      	bhi.n	bda4 <__aeabi_ddiv+0x29c>
    bda2:	e117      	b.n	bfd4 <__aeabi_ddiv+0x4cc>
    bda4:	3d02      	subs	r5, #2
    bda6:	4443      	add	r3, r8
    bda8:	464a      	mov	r2, r9
    bdaa:	1a9b      	subs	r3, r3, r2
    bdac:	465a      	mov	r2, fp
    bdae:	0412      	lsls	r2, r2, #16
    bdb0:	432a      	orrs	r2, r5
    bdb2:	9903      	ldr	r1, [sp, #12]
    bdb4:	4693      	mov	fp, r2
    bdb6:	0c10      	lsrs	r0, r2, #16
    bdb8:	0c0a      	lsrs	r2, r1, #16
    bdba:	4691      	mov	r9, r2
    bdbc:	0409      	lsls	r1, r1, #16
    bdbe:	465a      	mov	r2, fp
    bdc0:	0c09      	lsrs	r1, r1, #16
    bdc2:	464e      	mov	r6, r9
    bdc4:	000d      	movs	r5, r1
    bdc6:	0412      	lsls	r2, r2, #16
    bdc8:	0c12      	lsrs	r2, r2, #16
    bdca:	4345      	muls	r5, r0
    bdcc:	9105      	str	r1, [sp, #20]
    bdce:	4351      	muls	r1, r2
    bdd0:	4372      	muls	r2, r6
    bdd2:	4370      	muls	r0, r6
    bdd4:	1952      	adds	r2, r2, r5
    bdd6:	0c0e      	lsrs	r6, r1, #16
    bdd8:	18b2      	adds	r2, r6, r2
    bdda:	4295      	cmp	r5, r2
    bddc:	d903      	bls.n	bde6 <__aeabi_ddiv+0x2de>
    bdde:	2580      	movs	r5, #128	; 0x80
    bde0:	026d      	lsls	r5, r5, #9
    bde2:	46ac      	mov	ip, r5
    bde4:	4460      	add	r0, ip
    bde6:	0c15      	lsrs	r5, r2, #16
    bde8:	0409      	lsls	r1, r1, #16
    bdea:	0412      	lsls	r2, r2, #16
    bdec:	0c09      	lsrs	r1, r1, #16
    bdee:	1828      	adds	r0, r5, r0
    bdf0:	1852      	adds	r2, r2, r1
    bdf2:	4283      	cmp	r3, r0
    bdf4:	d200      	bcs.n	bdf8 <__aeabi_ddiv+0x2f0>
    bdf6:	e0ce      	b.n	bf96 <__aeabi_ddiv+0x48e>
    bdf8:	d100      	bne.n	bdfc <__aeabi_ddiv+0x2f4>
    bdfa:	e0c8      	b.n	bf8e <__aeabi_ddiv+0x486>
    bdfc:	1a1d      	subs	r5, r3, r0
    bdfe:	4653      	mov	r3, sl
    be00:	1a9e      	subs	r6, r3, r2
    be02:	45b2      	cmp	sl, r6
    be04:	4192      	sbcs	r2, r2
    be06:	4252      	negs	r2, r2
    be08:	1aab      	subs	r3, r5, r2
    be0a:	469a      	mov	sl, r3
    be0c:	4598      	cmp	r8, r3
    be0e:	d100      	bne.n	be12 <__aeabi_ddiv+0x30a>
    be10:	e117      	b.n	c042 <__aeabi_ddiv+0x53a>
    be12:	0039      	movs	r1, r7
    be14:	0018      	movs	r0, r3
    be16:	f7fe fb35 	bl	a484 <__udivsi3>
    be1a:	9b01      	ldr	r3, [sp, #4]
    be1c:	0005      	movs	r5, r0
    be1e:	4343      	muls	r3, r0
    be20:	0039      	movs	r1, r7
    be22:	4650      	mov	r0, sl
    be24:	9304      	str	r3, [sp, #16]
    be26:	f7fe fbb3 	bl	a590 <__aeabi_uidivmod>
    be2a:	9804      	ldr	r0, [sp, #16]
    be2c:	040b      	lsls	r3, r1, #16
    be2e:	0c31      	lsrs	r1, r6, #16
    be30:	4319      	orrs	r1, r3
    be32:	4288      	cmp	r0, r1
    be34:	d909      	bls.n	be4a <__aeabi_ddiv+0x342>
    be36:	4441      	add	r1, r8
    be38:	1e6b      	subs	r3, r5, #1
    be3a:	4588      	cmp	r8, r1
    be3c:	d900      	bls.n	be40 <__aeabi_ddiv+0x338>
    be3e:	e107      	b.n	c050 <__aeabi_ddiv+0x548>
    be40:	4288      	cmp	r0, r1
    be42:	d800      	bhi.n	be46 <__aeabi_ddiv+0x33e>
    be44:	e104      	b.n	c050 <__aeabi_ddiv+0x548>
    be46:	3d02      	subs	r5, #2
    be48:	4441      	add	r1, r8
    be4a:	9b04      	ldr	r3, [sp, #16]
    be4c:	1acb      	subs	r3, r1, r3
    be4e:	0018      	movs	r0, r3
    be50:	0039      	movs	r1, r7
    be52:	9304      	str	r3, [sp, #16]
    be54:	f7fe fb16 	bl	a484 <__udivsi3>
    be58:	9b01      	ldr	r3, [sp, #4]
    be5a:	4682      	mov	sl, r0
    be5c:	4343      	muls	r3, r0
    be5e:	0039      	movs	r1, r7
    be60:	9804      	ldr	r0, [sp, #16]
    be62:	9301      	str	r3, [sp, #4]
    be64:	f7fe fb94 	bl	a590 <__aeabi_uidivmod>
    be68:	9801      	ldr	r0, [sp, #4]
    be6a:	040b      	lsls	r3, r1, #16
    be6c:	0431      	lsls	r1, r6, #16
    be6e:	0c09      	lsrs	r1, r1, #16
    be70:	4319      	orrs	r1, r3
    be72:	4288      	cmp	r0, r1
    be74:	d90d      	bls.n	be92 <__aeabi_ddiv+0x38a>
    be76:	4653      	mov	r3, sl
    be78:	4441      	add	r1, r8
    be7a:	3b01      	subs	r3, #1
    be7c:	4588      	cmp	r8, r1
    be7e:	d900      	bls.n	be82 <__aeabi_ddiv+0x37a>
    be80:	e0e8      	b.n	c054 <__aeabi_ddiv+0x54c>
    be82:	4288      	cmp	r0, r1
    be84:	d800      	bhi.n	be88 <__aeabi_ddiv+0x380>
    be86:	e0e5      	b.n	c054 <__aeabi_ddiv+0x54c>
    be88:	2302      	movs	r3, #2
    be8a:	425b      	negs	r3, r3
    be8c:	469c      	mov	ip, r3
    be8e:	4441      	add	r1, r8
    be90:	44e2      	add	sl, ip
    be92:	9b01      	ldr	r3, [sp, #4]
    be94:	042d      	lsls	r5, r5, #16
    be96:	1ace      	subs	r6, r1, r3
    be98:	4651      	mov	r1, sl
    be9a:	4329      	orrs	r1, r5
    be9c:	9d05      	ldr	r5, [sp, #20]
    be9e:	464f      	mov	r7, r9
    bea0:	002a      	movs	r2, r5
    bea2:	040b      	lsls	r3, r1, #16
    bea4:	0c08      	lsrs	r0, r1, #16
    bea6:	0c1b      	lsrs	r3, r3, #16
    bea8:	435a      	muls	r2, r3
    beaa:	4345      	muls	r5, r0
    beac:	437b      	muls	r3, r7
    beae:	4378      	muls	r0, r7
    beb0:	195b      	adds	r3, r3, r5
    beb2:	0c17      	lsrs	r7, r2, #16
    beb4:	18fb      	adds	r3, r7, r3
    beb6:	429d      	cmp	r5, r3
    beb8:	d903      	bls.n	bec2 <__aeabi_ddiv+0x3ba>
    beba:	2580      	movs	r5, #128	; 0x80
    bebc:	026d      	lsls	r5, r5, #9
    bebe:	46ac      	mov	ip, r5
    bec0:	4460      	add	r0, ip
    bec2:	0c1d      	lsrs	r5, r3, #16
    bec4:	0412      	lsls	r2, r2, #16
    bec6:	041b      	lsls	r3, r3, #16
    bec8:	0c12      	lsrs	r2, r2, #16
    beca:	1828      	adds	r0, r5, r0
    becc:	189b      	adds	r3, r3, r2
    bece:	4286      	cmp	r6, r0
    bed0:	d200      	bcs.n	bed4 <__aeabi_ddiv+0x3cc>
    bed2:	e093      	b.n	bffc <__aeabi_ddiv+0x4f4>
    bed4:	d100      	bne.n	bed8 <__aeabi_ddiv+0x3d0>
    bed6:	e08e      	b.n	bff6 <__aeabi_ddiv+0x4ee>
    bed8:	2301      	movs	r3, #1
    beda:	4319      	orrs	r1, r3
    bedc:	4ba0      	ldr	r3, [pc, #640]	; (c160 <__aeabi_ddiv+0x658>)
    bede:	18e3      	adds	r3, r4, r3
    bee0:	2b00      	cmp	r3, #0
    bee2:	dc00      	bgt.n	bee6 <__aeabi_ddiv+0x3de>
    bee4:	e099      	b.n	c01a <__aeabi_ddiv+0x512>
    bee6:	074a      	lsls	r2, r1, #29
    bee8:	d000      	beq.n	beec <__aeabi_ddiv+0x3e4>
    beea:	e09e      	b.n	c02a <__aeabi_ddiv+0x522>
    beec:	465a      	mov	r2, fp
    beee:	01d2      	lsls	r2, r2, #7
    bef0:	d506      	bpl.n	bf00 <__aeabi_ddiv+0x3f8>
    bef2:	465a      	mov	r2, fp
    bef4:	4b9b      	ldr	r3, [pc, #620]	; (c164 <__aeabi_ddiv+0x65c>)
    bef6:	401a      	ands	r2, r3
    bef8:	2380      	movs	r3, #128	; 0x80
    befa:	4693      	mov	fp, r2
    befc:	00db      	lsls	r3, r3, #3
    befe:	18e3      	adds	r3, r4, r3
    bf00:	4a99      	ldr	r2, [pc, #612]	; (c168 <__aeabi_ddiv+0x660>)
    bf02:	4293      	cmp	r3, r2
    bf04:	dd68      	ble.n	bfd8 <__aeabi_ddiv+0x4d0>
    bf06:	2301      	movs	r3, #1
    bf08:	9a02      	ldr	r2, [sp, #8]
    bf0a:	4c98      	ldr	r4, [pc, #608]	; (c16c <__aeabi_ddiv+0x664>)
    bf0c:	401a      	ands	r2, r3
    bf0e:	2300      	movs	r3, #0
    bf10:	4694      	mov	ip, r2
    bf12:	4698      	mov	r8, r3
    bf14:	2200      	movs	r2, #0
    bf16:	e6c5      	b.n	bca4 <__aeabi_ddiv+0x19c>
    bf18:	2280      	movs	r2, #128	; 0x80
    bf1a:	464b      	mov	r3, r9
    bf1c:	0312      	lsls	r2, r2, #12
    bf1e:	4213      	tst	r3, r2
    bf20:	d00a      	beq.n	bf38 <__aeabi_ddiv+0x430>
    bf22:	465b      	mov	r3, fp
    bf24:	4213      	tst	r3, r2
    bf26:	d106      	bne.n	bf36 <__aeabi_ddiv+0x42e>
    bf28:	431a      	orrs	r2, r3
    bf2a:	0312      	lsls	r2, r2, #12
    bf2c:	0b12      	lsrs	r2, r2, #12
    bf2e:	46ac      	mov	ip, r5
    bf30:	4688      	mov	r8, r1
    bf32:	4c8e      	ldr	r4, [pc, #568]	; (c16c <__aeabi_ddiv+0x664>)
    bf34:	e6b6      	b.n	bca4 <__aeabi_ddiv+0x19c>
    bf36:	464b      	mov	r3, r9
    bf38:	431a      	orrs	r2, r3
    bf3a:	0312      	lsls	r2, r2, #12
    bf3c:	0b12      	lsrs	r2, r2, #12
    bf3e:	46bc      	mov	ip, r7
    bf40:	4c8a      	ldr	r4, [pc, #552]	; (c16c <__aeabi_ddiv+0x664>)
    bf42:	e6af      	b.n	bca4 <__aeabi_ddiv+0x19c>
    bf44:	0003      	movs	r3, r0
    bf46:	465a      	mov	r2, fp
    bf48:	3b28      	subs	r3, #40	; 0x28
    bf4a:	409a      	lsls	r2, r3
    bf4c:	2300      	movs	r3, #0
    bf4e:	4691      	mov	r9, r2
    bf50:	4698      	mov	r8, r3
    bf52:	e657      	b.n	bc04 <__aeabi_ddiv+0xfc>
    bf54:	4658      	mov	r0, fp
    bf56:	f001 f8c1 	bl	d0dc <__clzsi2>
    bf5a:	3020      	adds	r0, #32
    bf5c:	e640      	b.n	bbe0 <__aeabi_ddiv+0xd8>
    bf5e:	0003      	movs	r3, r0
    bf60:	4652      	mov	r2, sl
    bf62:	3b28      	subs	r3, #40	; 0x28
    bf64:	409a      	lsls	r2, r3
    bf66:	2100      	movs	r1, #0
    bf68:	4693      	mov	fp, r2
    bf6a:	e677      	b.n	bc5c <__aeabi_ddiv+0x154>
    bf6c:	f001 f8b6 	bl	d0dc <__clzsi2>
    bf70:	3020      	adds	r0, #32
    bf72:	e65f      	b.n	bc34 <__aeabi_ddiv+0x12c>
    bf74:	4588      	cmp	r8, r1
    bf76:	d200      	bcs.n	bf7a <__aeabi_ddiv+0x472>
    bf78:	e6c7      	b.n	bd0a <__aeabi_ddiv+0x202>
    bf7a:	464b      	mov	r3, r9
    bf7c:	07de      	lsls	r6, r3, #31
    bf7e:	085d      	lsrs	r5, r3, #1
    bf80:	4643      	mov	r3, r8
    bf82:	085b      	lsrs	r3, r3, #1
    bf84:	431e      	orrs	r6, r3
    bf86:	4643      	mov	r3, r8
    bf88:	07db      	lsls	r3, r3, #31
    bf8a:	469a      	mov	sl, r3
    bf8c:	e6c2      	b.n	bd14 <__aeabi_ddiv+0x20c>
    bf8e:	2500      	movs	r5, #0
    bf90:	4592      	cmp	sl, r2
    bf92:	d300      	bcc.n	bf96 <__aeabi_ddiv+0x48e>
    bf94:	e733      	b.n	bdfe <__aeabi_ddiv+0x2f6>
    bf96:	9e03      	ldr	r6, [sp, #12]
    bf98:	4659      	mov	r1, fp
    bf9a:	46b4      	mov	ip, r6
    bf9c:	44e2      	add	sl, ip
    bf9e:	45b2      	cmp	sl, r6
    bfa0:	41ad      	sbcs	r5, r5
    bfa2:	426d      	negs	r5, r5
    bfa4:	4445      	add	r5, r8
    bfa6:	18eb      	adds	r3, r5, r3
    bfa8:	3901      	subs	r1, #1
    bfaa:	4598      	cmp	r8, r3
    bfac:	d207      	bcs.n	bfbe <__aeabi_ddiv+0x4b6>
    bfae:	4298      	cmp	r0, r3
    bfb0:	d900      	bls.n	bfb4 <__aeabi_ddiv+0x4ac>
    bfb2:	e07f      	b.n	c0b4 <__aeabi_ddiv+0x5ac>
    bfb4:	d100      	bne.n	bfb8 <__aeabi_ddiv+0x4b0>
    bfb6:	e0bc      	b.n	c132 <__aeabi_ddiv+0x62a>
    bfb8:	1a1d      	subs	r5, r3, r0
    bfba:	468b      	mov	fp, r1
    bfbc:	e71f      	b.n	bdfe <__aeabi_ddiv+0x2f6>
    bfbe:	4598      	cmp	r8, r3
    bfc0:	d1fa      	bne.n	bfb8 <__aeabi_ddiv+0x4b0>
    bfc2:	9d03      	ldr	r5, [sp, #12]
    bfc4:	4555      	cmp	r5, sl
    bfc6:	d9f2      	bls.n	bfae <__aeabi_ddiv+0x4a6>
    bfc8:	4643      	mov	r3, r8
    bfca:	468b      	mov	fp, r1
    bfcc:	1a1d      	subs	r5, r3, r0
    bfce:	e716      	b.n	bdfe <__aeabi_ddiv+0x2f6>
    bfd0:	469b      	mov	fp, r3
    bfd2:	e6ca      	b.n	bd6a <__aeabi_ddiv+0x262>
    bfd4:	0015      	movs	r5, r2
    bfd6:	e6e7      	b.n	bda8 <__aeabi_ddiv+0x2a0>
    bfd8:	465a      	mov	r2, fp
    bfda:	08c9      	lsrs	r1, r1, #3
    bfdc:	0752      	lsls	r2, r2, #29
    bfde:	430a      	orrs	r2, r1
    bfe0:	055b      	lsls	r3, r3, #21
    bfe2:	4690      	mov	r8, r2
    bfe4:	0d5c      	lsrs	r4, r3, #21
    bfe6:	465a      	mov	r2, fp
    bfe8:	2301      	movs	r3, #1
    bfea:	9902      	ldr	r1, [sp, #8]
    bfec:	0252      	lsls	r2, r2, #9
    bfee:	4019      	ands	r1, r3
    bff0:	0b12      	lsrs	r2, r2, #12
    bff2:	468c      	mov	ip, r1
    bff4:	e656      	b.n	bca4 <__aeabi_ddiv+0x19c>
    bff6:	2b00      	cmp	r3, #0
    bff8:	d100      	bne.n	bffc <__aeabi_ddiv+0x4f4>
    bffa:	e76f      	b.n	bedc <__aeabi_ddiv+0x3d4>
    bffc:	4446      	add	r6, r8
    bffe:	1e4a      	subs	r2, r1, #1
    c000:	45b0      	cmp	r8, r6
    c002:	d929      	bls.n	c058 <__aeabi_ddiv+0x550>
    c004:	0011      	movs	r1, r2
    c006:	4286      	cmp	r6, r0
    c008:	d000      	beq.n	c00c <__aeabi_ddiv+0x504>
    c00a:	e765      	b.n	bed8 <__aeabi_ddiv+0x3d0>
    c00c:	9a03      	ldr	r2, [sp, #12]
    c00e:	4293      	cmp	r3, r2
    c010:	d000      	beq.n	c014 <__aeabi_ddiv+0x50c>
    c012:	e761      	b.n	bed8 <__aeabi_ddiv+0x3d0>
    c014:	e762      	b.n	bedc <__aeabi_ddiv+0x3d4>
    c016:	2101      	movs	r1, #1
    c018:	4249      	negs	r1, r1
    c01a:	2001      	movs	r0, #1
    c01c:	1ac2      	subs	r2, r0, r3
    c01e:	2a38      	cmp	r2, #56	; 0x38
    c020:	dd21      	ble.n	c066 <__aeabi_ddiv+0x55e>
    c022:	9b02      	ldr	r3, [sp, #8]
    c024:	4003      	ands	r3, r0
    c026:	469c      	mov	ip, r3
    c028:	e638      	b.n	bc9c <__aeabi_ddiv+0x194>
    c02a:	220f      	movs	r2, #15
    c02c:	400a      	ands	r2, r1
    c02e:	2a04      	cmp	r2, #4
    c030:	d100      	bne.n	c034 <__aeabi_ddiv+0x52c>
    c032:	e75b      	b.n	beec <__aeabi_ddiv+0x3e4>
    c034:	000a      	movs	r2, r1
    c036:	1d11      	adds	r1, r2, #4
    c038:	4291      	cmp	r1, r2
    c03a:	4192      	sbcs	r2, r2
    c03c:	4252      	negs	r2, r2
    c03e:	4493      	add	fp, r2
    c040:	e754      	b.n	beec <__aeabi_ddiv+0x3e4>
    c042:	4b47      	ldr	r3, [pc, #284]	; (c160 <__aeabi_ddiv+0x658>)
    c044:	18e3      	adds	r3, r4, r3
    c046:	2b00      	cmp	r3, #0
    c048:	dde5      	ble.n	c016 <__aeabi_ddiv+0x50e>
    c04a:	2201      	movs	r2, #1
    c04c:	4252      	negs	r2, r2
    c04e:	e7f2      	b.n	c036 <__aeabi_ddiv+0x52e>
    c050:	001d      	movs	r5, r3
    c052:	e6fa      	b.n	be4a <__aeabi_ddiv+0x342>
    c054:	469a      	mov	sl, r3
    c056:	e71c      	b.n	be92 <__aeabi_ddiv+0x38a>
    c058:	42b0      	cmp	r0, r6
    c05a:	d839      	bhi.n	c0d0 <__aeabi_ddiv+0x5c8>
    c05c:	d06e      	beq.n	c13c <__aeabi_ddiv+0x634>
    c05e:	0011      	movs	r1, r2
    c060:	e73a      	b.n	bed8 <__aeabi_ddiv+0x3d0>
    c062:	9302      	str	r3, [sp, #8]
    c064:	e73a      	b.n	bedc <__aeabi_ddiv+0x3d4>
    c066:	2a1f      	cmp	r2, #31
    c068:	dc3c      	bgt.n	c0e4 <__aeabi_ddiv+0x5dc>
    c06a:	2320      	movs	r3, #32
    c06c:	1a9b      	subs	r3, r3, r2
    c06e:	000c      	movs	r4, r1
    c070:	4658      	mov	r0, fp
    c072:	4099      	lsls	r1, r3
    c074:	4098      	lsls	r0, r3
    c076:	1e4b      	subs	r3, r1, #1
    c078:	4199      	sbcs	r1, r3
    c07a:	465b      	mov	r3, fp
    c07c:	40d4      	lsrs	r4, r2
    c07e:	40d3      	lsrs	r3, r2
    c080:	4320      	orrs	r0, r4
    c082:	4308      	orrs	r0, r1
    c084:	001a      	movs	r2, r3
    c086:	0743      	lsls	r3, r0, #29
    c088:	d009      	beq.n	c09e <__aeabi_ddiv+0x596>
    c08a:	230f      	movs	r3, #15
    c08c:	4003      	ands	r3, r0
    c08e:	2b04      	cmp	r3, #4
    c090:	d005      	beq.n	c09e <__aeabi_ddiv+0x596>
    c092:	0001      	movs	r1, r0
    c094:	1d08      	adds	r0, r1, #4
    c096:	4288      	cmp	r0, r1
    c098:	419b      	sbcs	r3, r3
    c09a:	425b      	negs	r3, r3
    c09c:	18d2      	adds	r2, r2, r3
    c09e:	0213      	lsls	r3, r2, #8
    c0a0:	d53a      	bpl.n	c118 <__aeabi_ddiv+0x610>
    c0a2:	2301      	movs	r3, #1
    c0a4:	9a02      	ldr	r2, [sp, #8]
    c0a6:	2401      	movs	r4, #1
    c0a8:	401a      	ands	r2, r3
    c0aa:	2300      	movs	r3, #0
    c0ac:	4694      	mov	ip, r2
    c0ae:	4698      	mov	r8, r3
    c0b0:	2200      	movs	r2, #0
    c0b2:	e5f7      	b.n	bca4 <__aeabi_ddiv+0x19c>
    c0b4:	2102      	movs	r1, #2
    c0b6:	4249      	negs	r1, r1
    c0b8:	468c      	mov	ip, r1
    c0ba:	9d03      	ldr	r5, [sp, #12]
    c0bc:	44e3      	add	fp, ip
    c0be:	46ac      	mov	ip, r5
    c0c0:	44e2      	add	sl, ip
    c0c2:	45aa      	cmp	sl, r5
    c0c4:	41ad      	sbcs	r5, r5
    c0c6:	426d      	negs	r5, r5
    c0c8:	4445      	add	r5, r8
    c0ca:	18ed      	adds	r5, r5, r3
    c0cc:	1a2d      	subs	r5, r5, r0
    c0ce:	e696      	b.n	bdfe <__aeabi_ddiv+0x2f6>
    c0d0:	1e8a      	subs	r2, r1, #2
    c0d2:	9903      	ldr	r1, [sp, #12]
    c0d4:	004d      	lsls	r5, r1, #1
    c0d6:	428d      	cmp	r5, r1
    c0d8:	4189      	sbcs	r1, r1
    c0da:	4249      	negs	r1, r1
    c0dc:	4441      	add	r1, r8
    c0de:	1876      	adds	r6, r6, r1
    c0e0:	9503      	str	r5, [sp, #12]
    c0e2:	e78f      	b.n	c004 <__aeabi_ddiv+0x4fc>
    c0e4:	201f      	movs	r0, #31
    c0e6:	4240      	negs	r0, r0
    c0e8:	1ac3      	subs	r3, r0, r3
    c0ea:	4658      	mov	r0, fp
    c0ec:	40d8      	lsrs	r0, r3
    c0ee:	0003      	movs	r3, r0
    c0f0:	2a20      	cmp	r2, #32
    c0f2:	d028      	beq.n	c146 <__aeabi_ddiv+0x63e>
    c0f4:	2040      	movs	r0, #64	; 0x40
    c0f6:	465d      	mov	r5, fp
    c0f8:	1a82      	subs	r2, r0, r2
    c0fa:	4095      	lsls	r5, r2
    c0fc:	4329      	orrs	r1, r5
    c0fe:	1e4a      	subs	r2, r1, #1
    c100:	4191      	sbcs	r1, r2
    c102:	4319      	orrs	r1, r3
    c104:	2307      	movs	r3, #7
    c106:	2200      	movs	r2, #0
    c108:	400b      	ands	r3, r1
    c10a:	d009      	beq.n	c120 <__aeabi_ddiv+0x618>
    c10c:	230f      	movs	r3, #15
    c10e:	2200      	movs	r2, #0
    c110:	400b      	ands	r3, r1
    c112:	0008      	movs	r0, r1
    c114:	2b04      	cmp	r3, #4
    c116:	d1bd      	bne.n	c094 <__aeabi_ddiv+0x58c>
    c118:	0001      	movs	r1, r0
    c11a:	0753      	lsls	r3, r2, #29
    c11c:	0252      	lsls	r2, r2, #9
    c11e:	0b12      	lsrs	r2, r2, #12
    c120:	08c9      	lsrs	r1, r1, #3
    c122:	4319      	orrs	r1, r3
    c124:	2301      	movs	r3, #1
    c126:	4688      	mov	r8, r1
    c128:	9902      	ldr	r1, [sp, #8]
    c12a:	2400      	movs	r4, #0
    c12c:	4019      	ands	r1, r3
    c12e:	468c      	mov	ip, r1
    c130:	e5b8      	b.n	bca4 <__aeabi_ddiv+0x19c>
    c132:	4552      	cmp	r2, sl
    c134:	d8be      	bhi.n	c0b4 <__aeabi_ddiv+0x5ac>
    c136:	468b      	mov	fp, r1
    c138:	2500      	movs	r5, #0
    c13a:	e660      	b.n	bdfe <__aeabi_ddiv+0x2f6>
    c13c:	9d03      	ldr	r5, [sp, #12]
    c13e:	429d      	cmp	r5, r3
    c140:	d3c6      	bcc.n	c0d0 <__aeabi_ddiv+0x5c8>
    c142:	0011      	movs	r1, r2
    c144:	e762      	b.n	c00c <__aeabi_ddiv+0x504>
    c146:	2500      	movs	r5, #0
    c148:	e7d8      	b.n	c0fc <__aeabi_ddiv+0x5f4>
    c14a:	2280      	movs	r2, #128	; 0x80
    c14c:	465b      	mov	r3, fp
    c14e:	0312      	lsls	r2, r2, #12
    c150:	431a      	orrs	r2, r3
    c152:	9b01      	ldr	r3, [sp, #4]
    c154:	0312      	lsls	r2, r2, #12
    c156:	0b12      	lsrs	r2, r2, #12
    c158:	469c      	mov	ip, r3
    c15a:	4688      	mov	r8, r1
    c15c:	4c03      	ldr	r4, [pc, #12]	; (c16c <__aeabi_ddiv+0x664>)
    c15e:	e5a1      	b.n	bca4 <__aeabi_ddiv+0x19c>
    c160:	000003ff 	.word	0x000003ff
    c164:	feffffff 	.word	0xfeffffff
    c168:	000007fe 	.word	0x000007fe
    c16c:	000007ff 	.word	0x000007ff

0000c170 <__eqdf2>:
    c170:	b5f0      	push	{r4, r5, r6, r7, lr}
    c172:	464f      	mov	r7, r9
    c174:	4646      	mov	r6, r8
    c176:	46d6      	mov	lr, sl
    c178:	005c      	lsls	r4, r3, #1
    c17a:	b5c0      	push	{r6, r7, lr}
    c17c:	031f      	lsls	r7, r3, #12
    c17e:	0fdb      	lsrs	r3, r3, #31
    c180:	469a      	mov	sl, r3
    c182:	4b17      	ldr	r3, [pc, #92]	; (c1e0 <__eqdf2+0x70>)
    c184:	030e      	lsls	r6, r1, #12
    c186:	004d      	lsls	r5, r1, #1
    c188:	4684      	mov	ip, r0
    c18a:	4680      	mov	r8, r0
    c18c:	0b36      	lsrs	r6, r6, #12
    c18e:	0d6d      	lsrs	r5, r5, #21
    c190:	0fc9      	lsrs	r1, r1, #31
    c192:	4691      	mov	r9, r2
    c194:	0b3f      	lsrs	r7, r7, #12
    c196:	0d64      	lsrs	r4, r4, #21
    c198:	2001      	movs	r0, #1
    c19a:	429d      	cmp	r5, r3
    c19c:	d008      	beq.n	c1b0 <__eqdf2+0x40>
    c19e:	429c      	cmp	r4, r3
    c1a0:	d001      	beq.n	c1a6 <__eqdf2+0x36>
    c1a2:	42a5      	cmp	r5, r4
    c1a4:	d00b      	beq.n	c1be <__eqdf2+0x4e>
    c1a6:	bc1c      	pop	{r2, r3, r4}
    c1a8:	4690      	mov	r8, r2
    c1aa:	4699      	mov	r9, r3
    c1ac:	46a2      	mov	sl, r4
    c1ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c1b0:	4663      	mov	r3, ip
    c1b2:	4333      	orrs	r3, r6
    c1b4:	d1f7      	bne.n	c1a6 <__eqdf2+0x36>
    c1b6:	42ac      	cmp	r4, r5
    c1b8:	d1f5      	bne.n	c1a6 <__eqdf2+0x36>
    c1ba:	433a      	orrs	r2, r7
    c1bc:	d1f3      	bne.n	c1a6 <__eqdf2+0x36>
    c1be:	2001      	movs	r0, #1
    c1c0:	42be      	cmp	r6, r7
    c1c2:	d1f0      	bne.n	c1a6 <__eqdf2+0x36>
    c1c4:	45c8      	cmp	r8, r9
    c1c6:	d1ee      	bne.n	c1a6 <__eqdf2+0x36>
    c1c8:	4551      	cmp	r1, sl
    c1ca:	d007      	beq.n	c1dc <__eqdf2+0x6c>
    c1cc:	2d00      	cmp	r5, #0
    c1ce:	d1ea      	bne.n	c1a6 <__eqdf2+0x36>
    c1d0:	4663      	mov	r3, ip
    c1d2:	431e      	orrs	r6, r3
    c1d4:	0030      	movs	r0, r6
    c1d6:	1e46      	subs	r6, r0, #1
    c1d8:	41b0      	sbcs	r0, r6
    c1da:	e7e4      	b.n	c1a6 <__eqdf2+0x36>
    c1dc:	2000      	movs	r0, #0
    c1de:	e7e2      	b.n	c1a6 <__eqdf2+0x36>
    c1e0:	000007ff 	.word	0x000007ff

0000c1e4 <__gedf2>:
    c1e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    c1e6:	4645      	mov	r5, r8
    c1e8:	46de      	mov	lr, fp
    c1ea:	4657      	mov	r7, sl
    c1ec:	464e      	mov	r6, r9
    c1ee:	b5e0      	push	{r5, r6, r7, lr}
    c1f0:	031f      	lsls	r7, r3, #12
    c1f2:	0b3d      	lsrs	r5, r7, #12
    c1f4:	4f2c      	ldr	r7, [pc, #176]	; (c2a8 <__gedf2+0xc4>)
    c1f6:	030e      	lsls	r6, r1, #12
    c1f8:	004c      	lsls	r4, r1, #1
    c1fa:	46ab      	mov	fp, r5
    c1fc:	005d      	lsls	r5, r3, #1
    c1fe:	4684      	mov	ip, r0
    c200:	0b36      	lsrs	r6, r6, #12
    c202:	0d64      	lsrs	r4, r4, #21
    c204:	0fc9      	lsrs	r1, r1, #31
    c206:	4690      	mov	r8, r2
    c208:	0d6d      	lsrs	r5, r5, #21
    c20a:	0fdb      	lsrs	r3, r3, #31
    c20c:	42bc      	cmp	r4, r7
    c20e:	d02a      	beq.n	c266 <__gedf2+0x82>
    c210:	4f25      	ldr	r7, [pc, #148]	; (c2a8 <__gedf2+0xc4>)
    c212:	42bd      	cmp	r5, r7
    c214:	d02d      	beq.n	c272 <__gedf2+0x8e>
    c216:	2c00      	cmp	r4, #0
    c218:	d10f      	bne.n	c23a <__gedf2+0x56>
    c21a:	4330      	orrs	r0, r6
    c21c:	0007      	movs	r7, r0
    c21e:	4681      	mov	r9, r0
    c220:	4278      	negs	r0, r7
    c222:	4178      	adcs	r0, r7
    c224:	b2c0      	uxtb	r0, r0
    c226:	2d00      	cmp	r5, #0
    c228:	d117      	bne.n	c25a <__gedf2+0x76>
    c22a:	465f      	mov	r7, fp
    c22c:	433a      	orrs	r2, r7
    c22e:	d114      	bne.n	c25a <__gedf2+0x76>
    c230:	464b      	mov	r3, r9
    c232:	2000      	movs	r0, #0
    c234:	2b00      	cmp	r3, #0
    c236:	d00a      	beq.n	c24e <__gedf2+0x6a>
    c238:	e006      	b.n	c248 <__gedf2+0x64>
    c23a:	2d00      	cmp	r5, #0
    c23c:	d102      	bne.n	c244 <__gedf2+0x60>
    c23e:	4658      	mov	r0, fp
    c240:	4302      	orrs	r2, r0
    c242:	d001      	beq.n	c248 <__gedf2+0x64>
    c244:	4299      	cmp	r1, r3
    c246:	d018      	beq.n	c27a <__gedf2+0x96>
    c248:	4248      	negs	r0, r1
    c24a:	2101      	movs	r1, #1
    c24c:	4308      	orrs	r0, r1
    c24e:	bc3c      	pop	{r2, r3, r4, r5}
    c250:	4690      	mov	r8, r2
    c252:	4699      	mov	r9, r3
    c254:	46a2      	mov	sl, r4
    c256:	46ab      	mov	fp, r5
    c258:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c25a:	2800      	cmp	r0, #0
    c25c:	d0f2      	beq.n	c244 <__gedf2+0x60>
    c25e:	2001      	movs	r0, #1
    c260:	3b01      	subs	r3, #1
    c262:	4318      	orrs	r0, r3
    c264:	e7f3      	b.n	c24e <__gedf2+0x6a>
    c266:	0037      	movs	r7, r6
    c268:	4307      	orrs	r7, r0
    c26a:	d0d1      	beq.n	c210 <__gedf2+0x2c>
    c26c:	2002      	movs	r0, #2
    c26e:	4240      	negs	r0, r0
    c270:	e7ed      	b.n	c24e <__gedf2+0x6a>
    c272:	465f      	mov	r7, fp
    c274:	4317      	orrs	r7, r2
    c276:	d0ce      	beq.n	c216 <__gedf2+0x32>
    c278:	e7f8      	b.n	c26c <__gedf2+0x88>
    c27a:	42ac      	cmp	r4, r5
    c27c:	dce4      	bgt.n	c248 <__gedf2+0x64>
    c27e:	da03      	bge.n	c288 <__gedf2+0xa4>
    c280:	1e48      	subs	r0, r1, #1
    c282:	2101      	movs	r1, #1
    c284:	4308      	orrs	r0, r1
    c286:	e7e2      	b.n	c24e <__gedf2+0x6a>
    c288:	455e      	cmp	r6, fp
    c28a:	d8dd      	bhi.n	c248 <__gedf2+0x64>
    c28c:	d006      	beq.n	c29c <__gedf2+0xb8>
    c28e:	2000      	movs	r0, #0
    c290:	455e      	cmp	r6, fp
    c292:	d2dc      	bcs.n	c24e <__gedf2+0x6a>
    c294:	2301      	movs	r3, #1
    c296:	1e48      	subs	r0, r1, #1
    c298:	4318      	orrs	r0, r3
    c29a:	e7d8      	b.n	c24e <__gedf2+0x6a>
    c29c:	45c4      	cmp	ip, r8
    c29e:	d8d3      	bhi.n	c248 <__gedf2+0x64>
    c2a0:	2000      	movs	r0, #0
    c2a2:	45c4      	cmp	ip, r8
    c2a4:	d3f6      	bcc.n	c294 <__gedf2+0xb0>
    c2a6:	e7d2      	b.n	c24e <__gedf2+0x6a>
    c2a8:	000007ff 	.word	0x000007ff

0000c2ac <__ledf2>:
    c2ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    c2ae:	464e      	mov	r6, r9
    c2b0:	4645      	mov	r5, r8
    c2b2:	46de      	mov	lr, fp
    c2b4:	4657      	mov	r7, sl
    c2b6:	005c      	lsls	r4, r3, #1
    c2b8:	b5e0      	push	{r5, r6, r7, lr}
    c2ba:	031f      	lsls	r7, r3, #12
    c2bc:	0fdb      	lsrs	r3, r3, #31
    c2be:	4699      	mov	r9, r3
    c2c0:	4b2a      	ldr	r3, [pc, #168]	; (c36c <__ledf2+0xc0>)
    c2c2:	030e      	lsls	r6, r1, #12
    c2c4:	004d      	lsls	r5, r1, #1
    c2c6:	0fc9      	lsrs	r1, r1, #31
    c2c8:	4684      	mov	ip, r0
    c2ca:	0b36      	lsrs	r6, r6, #12
    c2cc:	0d6d      	lsrs	r5, r5, #21
    c2ce:	468b      	mov	fp, r1
    c2d0:	4690      	mov	r8, r2
    c2d2:	0b3f      	lsrs	r7, r7, #12
    c2d4:	0d64      	lsrs	r4, r4, #21
    c2d6:	429d      	cmp	r5, r3
    c2d8:	d020      	beq.n	c31c <__ledf2+0x70>
    c2da:	4b24      	ldr	r3, [pc, #144]	; (c36c <__ledf2+0xc0>)
    c2dc:	429c      	cmp	r4, r3
    c2de:	d022      	beq.n	c326 <__ledf2+0x7a>
    c2e0:	2d00      	cmp	r5, #0
    c2e2:	d112      	bne.n	c30a <__ledf2+0x5e>
    c2e4:	4330      	orrs	r0, r6
    c2e6:	4243      	negs	r3, r0
    c2e8:	4143      	adcs	r3, r0
    c2ea:	b2db      	uxtb	r3, r3
    c2ec:	2c00      	cmp	r4, #0
    c2ee:	d01f      	beq.n	c330 <__ledf2+0x84>
    c2f0:	2b00      	cmp	r3, #0
    c2f2:	d00c      	beq.n	c30e <__ledf2+0x62>
    c2f4:	464b      	mov	r3, r9
    c2f6:	2001      	movs	r0, #1
    c2f8:	3b01      	subs	r3, #1
    c2fa:	4303      	orrs	r3, r0
    c2fc:	0018      	movs	r0, r3
    c2fe:	bc3c      	pop	{r2, r3, r4, r5}
    c300:	4690      	mov	r8, r2
    c302:	4699      	mov	r9, r3
    c304:	46a2      	mov	sl, r4
    c306:	46ab      	mov	fp, r5
    c308:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c30a:	2c00      	cmp	r4, #0
    c30c:	d016      	beq.n	c33c <__ledf2+0x90>
    c30e:	45cb      	cmp	fp, r9
    c310:	d017      	beq.n	c342 <__ledf2+0x96>
    c312:	465b      	mov	r3, fp
    c314:	4259      	negs	r1, r3
    c316:	2301      	movs	r3, #1
    c318:	430b      	orrs	r3, r1
    c31a:	e7ef      	b.n	c2fc <__ledf2+0x50>
    c31c:	0031      	movs	r1, r6
    c31e:	2302      	movs	r3, #2
    c320:	4301      	orrs	r1, r0
    c322:	d1eb      	bne.n	c2fc <__ledf2+0x50>
    c324:	e7d9      	b.n	c2da <__ledf2+0x2e>
    c326:	0039      	movs	r1, r7
    c328:	2302      	movs	r3, #2
    c32a:	4311      	orrs	r1, r2
    c32c:	d1e6      	bne.n	c2fc <__ledf2+0x50>
    c32e:	e7d7      	b.n	c2e0 <__ledf2+0x34>
    c330:	433a      	orrs	r2, r7
    c332:	d1dd      	bne.n	c2f0 <__ledf2+0x44>
    c334:	2300      	movs	r3, #0
    c336:	2800      	cmp	r0, #0
    c338:	d0e0      	beq.n	c2fc <__ledf2+0x50>
    c33a:	e7ea      	b.n	c312 <__ledf2+0x66>
    c33c:	433a      	orrs	r2, r7
    c33e:	d1e6      	bne.n	c30e <__ledf2+0x62>
    c340:	e7e7      	b.n	c312 <__ledf2+0x66>
    c342:	42a5      	cmp	r5, r4
    c344:	dce5      	bgt.n	c312 <__ledf2+0x66>
    c346:	db05      	blt.n	c354 <__ledf2+0xa8>
    c348:	42be      	cmp	r6, r7
    c34a:	d8e2      	bhi.n	c312 <__ledf2+0x66>
    c34c:	d007      	beq.n	c35e <__ledf2+0xb2>
    c34e:	2300      	movs	r3, #0
    c350:	42be      	cmp	r6, r7
    c352:	d2d3      	bcs.n	c2fc <__ledf2+0x50>
    c354:	4659      	mov	r1, fp
    c356:	2301      	movs	r3, #1
    c358:	3901      	subs	r1, #1
    c35a:	430b      	orrs	r3, r1
    c35c:	e7ce      	b.n	c2fc <__ledf2+0x50>
    c35e:	45c4      	cmp	ip, r8
    c360:	d8d7      	bhi.n	c312 <__ledf2+0x66>
    c362:	2300      	movs	r3, #0
    c364:	45c4      	cmp	ip, r8
    c366:	d3f5      	bcc.n	c354 <__ledf2+0xa8>
    c368:	e7c8      	b.n	c2fc <__ledf2+0x50>
    c36a:	46c0      	nop			; (mov r8, r8)
    c36c:	000007ff 	.word	0x000007ff

0000c370 <__aeabi_dmul>:
    c370:	b5f0      	push	{r4, r5, r6, r7, lr}
    c372:	4657      	mov	r7, sl
    c374:	4645      	mov	r5, r8
    c376:	46de      	mov	lr, fp
    c378:	464e      	mov	r6, r9
    c37a:	b5e0      	push	{r5, r6, r7, lr}
    c37c:	030c      	lsls	r4, r1, #12
    c37e:	4698      	mov	r8, r3
    c380:	004e      	lsls	r6, r1, #1
    c382:	0b23      	lsrs	r3, r4, #12
    c384:	b087      	sub	sp, #28
    c386:	0007      	movs	r7, r0
    c388:	4692      	mov	sl, r2
    c38a:	469b      	mov	fp, r3
    c38c:	0d76      	lsrs	r6, r6, #21
    c38e:	0fcd      	lsrs	r5, r1, #31
    c390:	2e00      	cmp	r6, #0
    c392:	d06b      	beq.n	c46c <__aeabi_dmul+0xfc>
    c394:	4b6d      	ldr	r3, [pc, #436]	; (c54c <__aeabi_dmul+0x1dc>)
    c396:	429e      	cmp	r6, r3
    c398:	d035      	beq.n	c406 <__aeabi_dmul+0x96>
    c39a:	2480      	movs	r4, #128	; 0x80
    c39c:	465b      	mov	r3, fp
    c39e:	0f42      	lsrs	r2, r0, #29
    c3a0:	0424      	lsls	r4, r4, #16
    c3a2:	00db      	lsls	r3, r3, #3
    c3a4:	4314      	orrs	r4, r2
    c3a6:	431c      	orrs	r4, r3
    c3a8:	00c3      	lsls	r3, r0, #3
    c3aa:	4699      	mov	r9, r3
    c3ac:	4b68      	ldr	r3, [pc, #416]	; (c550 <__aeabi_dmul+0x1e0>)
    c3ae:	46a3      	mov	fp, r4
    c3b0:	469c      	mov	ip, r3
    c3b2:	2300      	movs	r3, #0
    c3b4:	2700      	movs	r7, #0
    c3b6:	4466      	add	r6, ip
    c3b8:	9302      	str	r3, [sp, #8]
    c3ba:	4643      	mov	r3, r8
    c3bc:	031c      	lsls	r4, r3, #12
    c3be:	005a      	lsls	r2, r3, #1
    c3c0:	0fdb      	lsrs	r3, r3, #31
    c3c2:	4650      	mov	r0, sl
    c3c4:	0b24      	lsrs	r4, r4, #12
    c3c6:	0d52      	lsrs	r2, r2, #21
    c3c8:	4698      	mov	r8, r3
    c3ca:	d100      	bne.n	c3ce <__aeabi_dmul+0x5e>
    c3cc:	e076      	b.n	c4bc <__aeabi_dmul+0x14c>
    c3ce:	4b5f      	ldr	r3, [pc, #380]	; (c54c <__aeabi_dmul+0x1dc>)
    c3d0:	429a      	cmp	r2, r3
    c3d2:	d06d      	beq.n	c4b0 <__aeabi_dmul+0x140>
    c3d4:	2380      	movs	r3, #128	; 0x80
    c3d6:	0f41      	lsrs	r1, r0, #29
    c3d8:	041b      	lsls	r3, r3, #16
    c3da:	430b      	orrs	r3, r1
    c3dc:	495c      	ldr	r1, [pc, #368]	; (c550 <__aeabi_dmul+0x1e0>)
    c3de:	00e4      	lsls	r4, r4, #3
    c3e0:	468c      	mov	ip, r1
    c3e2:	431c      	orrs	r4, r3
    c3e4:	00c3      	lsls	r3, r0, #3
    c3e6:	2000      	movs	r0, #0
    c3e8:	4462      	add	r2, ip
    c3ea:	4641      	mov	r1, r8
    c3ec:	18b6      	adds	r6, r6, r2
    c3ee:	4069      	eors	r1, r5
    c3f0:	1c72      	adds	r2, r6, #1
    c3f2:	9101      	str	r1, [sp, #4]
    c3f4:	4694      	mov	ip, r2
    c3f6:	4307      	orrs	r7, r0
    c3f8:	2f0f      	cmp	r7, #15
    c3fa:	d900      	bls.n	c3fe <__aeabi_dmul+0x8e>
    c3fc:	e0b0      	b.n	c560 <__aeabi_dmul+0x1f0>
    c3fe:	4a55      	ldr	r2, [pc, #340]	; (c554 <__aeabi_dmul+0x1e4>)
    c400:	00bf      	lsls	r7, r7, #2
    c402:	59d2      	ldr	r2, [r2, r7]
    c404:	4697      	mov	pc, r2
    c406:	465b      	mov	r3, fp
    c408:	4303      	orrs	r3, r0
    c40a:	4699      	mov	r9, r3
    c40c:	d000      	beq.n	c410 <__aeabi_dmul+0xa0>
    c40e:	e087      	b.n	c520 <__aeabi_dmul+0x1b0>
    c410:	2300      	movs	r3, #0
    c412:	469b      	mov	fp, r3
    c414:	3302      	adds	r3, #2
    c416:	2708      	movs	r7, #8
    c418:	9302      	str	r3, [sp, #8]
    c41a:	e7ce      	b.n	c3ba <__aeabi_dmul+0x4a>
    c41c:	4642      	mov	r2, r8
    c41e:	9201      	str	r2, [sp, #4]
    c420:	2802      	cmp	r0, #2
    c422:	d067      	beq.n	c4f4 <__aeabi_dmul+0x184>
    c424:	2803      	cmp	r0, #3
    c426:	d100      	bne.n	c42a <__aeabi_dmul+0xba>
    c428:	e20e      	b.n	c848 <__aeabi_dmul+0x4d8>
    c42a:	2801      	cmp	r0, #1
    c42c:	d000      	beq.n	c430 <__aeabi_dmul+0xc0>
    c42e:	e162      	b.n	c6f6 <__aeabi_dmul+0x386>
    c430:	2300      	movs	r3, #0
    c432:	2400      	movs	r4, #0
    c434:	2200      	movs	r2, #0
    c436:	4699      	mov	r9, r3
    c438:	9901      	ldr	r1, [sp, #4]
    c43a:	4001      	ands	r1, r0
    c43c:	b2cd      	uxtb	r5, r1
    c43e:	2100      	movs	r1, #0
    c440:	0312      	lsls	r2, r2, #12
    c442:	0d0b      	lsrs	r3, r1, #20
    c444:	0b12      	lsrs	r2, r2, #12
    c446:	051b      	lsls	r3, r3, #20
    c448:	4313      	orrs	r3, r2
    c44a:	4a43      	ldr	r2, [pc, #268]	; (c558 <__aeabi_dmul+0x1e8>)
    c44c:	0524      	lsls	r4, r4, #20
    c44e:	4013      	ands	r3, r2
    c450:	431c      	orrs	r4, r3
    c452:	0064      	lsls	r4, r4, #1
    c454:	07ed      	lsls	r5, r5, #31
    c456:	0864      	lsrs	r4, r4, #1
    c458:	432c      	orrs	r4, r5
    c45a:	4648      	mov	r0, r9
    c45c:	0021      	movs	r1, r4
    c45e:	b007      	add	sp, #28
    c460:	bc3c      	pop	{r2, r3, r4, r5}
    c462:	4690      	mov	r8, r2
    c464:	4699      	mov	r9, r3
    c466:	46a2      	mov	sl, r4
    c468:	46ab      	mov	fp, r5
    c46a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c46c:	4303      	orrs	r3, r0
    c46e:	4699      	mov	r9, r3
    c470:	d04f      	beq.n	c512 <__aeabi_dmul+0x1a2>
    c472:	465b      	mov	r3, fp
    c474:	2b00      	cmp	r3, #0
    c476:	d100      	bne.n	c47a <__aeabi_dmul+0x10a>
    c478:	e189      	b.n	c78e <__aeabi_dmul+0x41e>
    c47a:	4658      	mov	r0, fp
    c47c:	f000 fe2e 	bl	d0dc <__clzsi2>
    c480:	0003      	movs	r3, r0
    c482:	3b0b      	subs	r3, #11
    c484:	2b1c      	cmp	r3, #28
    c486:	dd00      	ble.n	c48a <__aeabi_dmul+0x11a>
    c488:	e17a      	b.n	c780 <__aeabi_dmul+0x410>
    c48a:	221d      	movs	r2, #29
    c48c:	1ad3      	subs	r3, r2, r3
    c48e:	003a      	movs	r2, r7
    c490:	0001      	movs	r1, r0
    c492:	465c      	mov	r4, fp
    c494:	40da      	lsrs	r2, r3
    c496:	3908      	subs	r1, #8
    c498:	408c      	lsls	r4, r1
    c49a:	0013      	movs	r3, r2
    c49c:	408f      	lsls	r7, r1
    c49e:	4323      	orrs	r3, r4
    c4a0:	469b      	mov	fp, r3
    c4a2:	46b9      	mov	r9, r7
    c4a4:	2300      	movs	r3, #0
    c4a6:	4e2d      	ldr	r6, [pc, #180]	; (c55c <__aeabi_dmul+0x1ec>)
    c4a8:	2700      	movs	r7, #0
    c4aa:	1a36      	subs	r6, r6, r0
    c4ac:	9302      	str	r3, [sp, #8]
    c4ae:	e784      	b.n	c3ba <__aeabi_dmul+0x4a>
    c4b0:	4653      	mov	r3, sl
    c4b2:	4323      	orrs	r3, r4
    c4b4:	d12a      	bne.n	c50c <__aeabi_dmul+0x19c>
    c4b6:	2400      	movs	r4, #0
    c4b8:	2002      	movs	r0, #2
    c4ba:	e796      	b.n	c3ea <__aeabi_dmul+0x7a>
    c4bc:	4653      	mov	r3, sl
    c4be:	4323      	orrs	r3, r4
    c4c0:	d020      	beq.n	c504 <__aeabi_dmul+0x194>
    c4c2:	2c00      	cmp	r4, #0
    c4c4:	d100      	bne.n	c4c8 <__aeabi_dmul+0x158>
    c4c6:	e157      	b.n	c778 <__aeabi_dmul+0x408>
    c4c8:	0020      	movs	r0, r4
    c4ca:	f000 fe07 	bl	d0dc <__clzsi2>
    c4ce:	0003      	movs	r3, r0
    c4d0:	3b0b      	subs	r3, #11
    c4d2:	2b1c      	cmp	r3, #28
    c4d4:	dd00      	ble.n	c4d8 <__aeabi_dmul+0x168>
    c4d6:	e149      	b.n	c76c <__aeabi_dmul+0x3fc>
    c4d8:	211d      	movs	r1, #29
    c4da:	1acb      	subs	r3, r1, r3
    c4dc:	4651      	mov	r1, sl
    c4de:	0002      	movs	r2, r0
    c4e0:	40d9      	lsrs	r1, r3
    c4e2:	4653      	mov	r3, sl
    c4e4:	3a08      	subs	r2, #8
    c4e6:	4094      	lsls	r4, r2
    c4e8:	4093      	lsls	r3, r2
    c4ea:	430c      	orrs	r4, r1
    c4ec:	4a1b      	ldr	r2, [pc, #108]	; (c55c <__aeabi_dmul+0x1ec>)
    c4ee:	1a12      	subs	r2, r2, r0
    c4f0:	2000      	movs	r0, #0
    c4f2:	e77a      	b.n	c3ea <__aeabi_dmul+0x7a>
    c4f4:	2501      	movs	r5, #1
    c4f6:	9b01      	ldr	r3, [sp, #4]
    c4f8:	4c14      	ldr	r4, [pc, #80]	; (c54c <__aeabi_dmul+0x1dc>)
    c4fa:	401d      	ands	r5, r3
    c4fc:	2300      	movs	r3, #0
    c4fe:	2200      	movs	r2, #0
    c500:	4699      	mov	r9, r3
    c502:	e79c      	b.n	c43e <__aeabi_dmul+0xce>
    c504:	2400      	movs	r4, #0
    c506:	2200      	movs	r2, #0
    c508:	2001      	movs	r0, #1
    c50a:	e76e      	b.n	c3ea <__aeabi_dmul+0x7a>
    c50c:	4653      	mov	r3, sl
    c50e:	2003      	movs	r0, #3
    c510:	e76b      	b.n	c3ea <__aeabi_dmul+0x7a>
    c512:	2300      	movs	r3, #0
    c514:	469b      	mov	fp, r3
    c516:	3301      	adds	r3, #1
    c518:	2704      	movs	r7, #4
    c51a:	2600      	movs	r6, #0
    c51c:	9302      	str	r3, [sp, #8]
    c51e:	e74c      	b.n	c3ba <__aeabi_dmul+0x4a>
    c520:	2303      	movs	r3, #3
    c522:	4681      	mov	r9, r0
    c524:	270c      	movs	r7, #12
    c526:	9302      	str	r3, [sp, #8]
    c528:	e747      	b.n	c3ba <__aeabi_dmul+0x4a>
    c52a:	2280      	movs	r2, #128	; 0x80
    c52c:	2300      	movs	r3, #0
    c52e:	2500      	movs	r5, #0
    c530:	0312      	lsls	r2, r2, #12
    c532:	4699      	mov	r9, r3
    c534:	4c05      	ldr	r4, [pc, #20]	; (c54c <__aeabi_dmul+0x1dc>)
    c536:	e782      	b.n	c43e <__aeabi_dmul+0xce>
    c538:	465c      	mov	r4, fp
    c53a:	464b      	mov	r3, r9
    c53c:	9802      	ldr	r0, [sp, #8]
    c53e:	e76f      	b.n	c420 <__aeabi_dmul+0xb0>
    c540:	465c      	mov	r4, fp
    c542:	464b      	mov	r3, r9
    c544:	9501      	str	r5, [sp, #4]
    c546:	9802      	ldr	r0, [sp, #8]
    c548:	e76a      	b.n	c420 <__aeabi_dmul+0xb0>
    c54a:	46c0      	nop			; (mov r8, r8)
    c54c:	000007ff 	.word	0x000007ff
    c550:	fffffc01 	.word	0xfffffc01
    c554:	00012428 	.word	0x00012428
    c558:	800fffff 	.word	0x800fffff
    c55c:	fffffc0d 	.word	0xfffffc0d
    c560:	464a      	mov	r2, r9
    c562:	4649      	mov	r1, r9
    c564:	0c17      	lsrs	r7, r2, #16
    c566:	0c1a      	lsrs	r2, r3, #16
    c568:	041b      	lsls	r3, r3, #16
    c56a:	0c1b      	lsrs	r3, r3, #16
    c56c:	0408      	lsls	r0, r1, #16
    c56e:	0019      	movs	r1, r3
    c570:	0c00      	lsrs	r0, r0, #16
    c572:	4341      	muls	r1, r0
    c574:	0015      	movs	r5, r2
    c576:	4688      	mov	r8, r1
    c578:	0019      	movs	r1, r3
    c57a:	437d      	muls	r5, r7
    c57c:	4379      	muls	r1, r7
    c57e:	9503      	str	r5, [sp, #12]
    c580:	4689      	mov	r9, r1
    c582:	0029      	movs	r1, r5
    c584:	0015      	movs	r5, r2
    c586:	4345      	muls	r5, r0
    c588:	444d      	add	r5, r9
    c58a:	9502      	str	r5, [sp, #8]
    c58c:	4645      	mov	r5, r8
    c58e:	0c2d      	lsrs	r5, r5, #16
    c590:	46aa      	mov	sl, r5
    c592:	9d02      	ldr	r5, [sp, #8]
    c594:	4455      	add	r5, sl
    c596:	45a9      	cmp	r9, r5
    c598:	d906      	bls.n	c5a8 <__aeabi_dmul+0x238>
    c59a:	468a      	mov	sl, r1
    c59c:	2180      	movs	r1, #128	; 0x80
    c59e:	0249      	lsls	r1, r1, #9
    c5a0:	4689      	mov	r9, r1
    c5a2:	44ca      	add	sl, r9
    c5a4:	4651      	mov	r1, sl
    c5a6:	9103      	str	r1, [sp, #12]
    c5a8:	0c29      	lsrs	r1, r5, #16
    c5aa:	9104      	str	r1, [sp, #16]
    c5ac:	4641      	mov	r1, r8
    c5ae:	0409      	lsls	r1, r1, #16
    c5b0:	042d      	lsls	r5, r5, #16
    c5b2:	0c09      	lsrs	r1, r1, #16
    c5b4:	4688      	mov	r8, r1
    c5b6:	0029      	movs	r1, r5
    c5b8:	0c25      	lsrs	r5, r4, #16
    c5ba:	0424      	lsls	r4, r4, #16
    c5bc:	4441      	add	r1, r8
    c5be:	0c24      	lsrs	r4, r4, #16
    c5c0:	9105      	str	r1, [sp, #20]
    c5c2:	0021      	movs	r1, r4
    c5c4:	4341      	muls	r1, r0
    c5c6:	4688      	mov	r8, r1
    c5c8:	0021      	movs	r1, r4
    c5ca:	4379      	muls	r1, r7
    c5cc:	468a      	mov	sl, r1
    c5ce:	4368      	muls	r0, r5
    c5d0:	4641      	mov	r1, r8
    c5d2:	4450      	add	r0, sl
    c5d4:	4681      	mov	r9, r0
    c5d6:	0c08      	lsrs	r0, r1, #16
    c5d8:	4448      	add	r0, r9
    c5da:	436f      	muls	r7, r5
    c5dc:	4582      	cmp	sl, r0
    c5de:	d903      	bls.n	c5e8 <__aeabi_dmul+0x278>
    c5e0:	2180      	movs	r1, #128	; 0x80
    c5e2:	0249      	lsls	r1, r1, #9
    c5e4:	4689      	mov	r9, r1
    c5e6:	444f      	add	r7, r9
    c5e8:	0c01      	lsrs	r1, r0, #16
    c5ea:	4689      	mov	r9, r1
    c5ec:	0039      	movs	r1, r7
    c5ee:	4449      	add	r1, r9
    c5f0:	9102      	str	r1, [sp, #8]
    c5f2:	4641      	mov	r1, r8
    c5f4:	040f      	lsls	r7, r1, #16
    c5f6:	9904      	ldr	r1, [sp, #16]
    c5f8:	0c3f      	lsrs	r7, r7, #16
    c5fa:	4688      	mov	r8, r1
    c5fc:	0400      	lsls	r0, r0, #16
    c5fe:	19c0      	adds	r0, r0, r7
    c600:	4480      	add	r8, r0
    c602:	4641      	mov	r1, r8
    c604:	9104      	str	r1, [sp, #16]
    c606:	4659      	mov	r1, fp
    c608:	0c0f      	lsrs	r7, r1, #16
    c60a:	0409      	lsls	r1, r1, #16
    c60c:	0c09      	lsrs	r1, r1, #16
    c60e:	4688      	mov	r8, r1
    c610:	4359      	muls	r1, r3
    c612:	468a      	mov	sl, r1
    c614:	0039      	movs	r1, r7
    c616:	4351      	muls	r1, r2
    c618:	4689      	mov	r9, r1
    c61a:	4641      	mov	r1, r8
    c61c:	434a      	muls	r2, r1
    c61e:	4651      	mov	r1, sl
    c620:	0c09      	lsrs	r1, r1, #16
    c622:	468b      	mov	fp, r1
    c624:	437b      	muls	r3, r7
    c626:	18d2      	adds	r2, r2, r3
    c628:	445a      	add	r2, fp
    c62a:	4293      	cmp	r3, r2
    c62c:	d903      	bls.n	c636 <__aeabi_dmul+0x2c6>
    c62e:	2380      	movs	r3, #128	; 0x80
    c630:	025b      	lsls	r3, r3, #9
    c632:	469b      	mov	fp, r3
    c634:	44d9      	add	r9, fp
    c636:	4651      	mov	r1, sl
    c638:	0409      	lsls	r1, r1, #16
    c63a:	0c09      	lsrs	r1, r1, #16
    c63c:	468a      	mov	sl, r1
    c63e:	4641      	mov	r1, r8
    c640:	4361      	muls	r1, r4
    c642:	437c      	muls	r4, r7
    c644:	0c13      	lsrs	r3, r2, #16
    c646:	0412      	lsls	r2, r2, #16
    c648:	444b      	add	r3, r9
    c64a:	4452      	add	r2, sl
    c64c:	46a1      	mov	r9, r4
    c64e:	468a      	mov	sl, r1
    c650:	003c      	movs	r4, r7
    c652:	4641      	mov	r1, r8
    c654:	436c      	muls	r4, r5
    c656:	434d      	muls	r5, r1
    c658:	4651      	mov	r1, sl
    c65a:	444d      	add	r5, r9
    c65c:	0c0f      	lsrs	r7, r1, #16
    c65e:	197d      	adds	r5, r7, r5
    c660:	45a9      	cmp	r9, r5
    c662:	d903      	bls.n	c66c <__aeabi_dmul+0x2fc>
    c664:	2180      	movs	r1, #128	; 0x80
    c666:	0249      	lsls	r1, r1, #9
    c668:	4688      	mov	r8, r1
    c66a:	4444      	add	r4, r8
    c66c:	9f04      	ldr	r7, [sp, #16]
    c66e:	9903      	ldr	r1, [sp, #12]
    c670:	46b8      	mov	r8, r7
    c672:	4441      	add	r1, r8
    c674:	468b      	mov	fp, r1
    c676:	4583      	cmp	fp, r0
    c678:	4180      	sbcs	r0, r0
    c67a:	4241      	negs	r1, r0
    c67c:	4688      	mov	r8, r1
    c67e:	4651      	mov	r1, sl
    c680:	0408      	lsls	r0, r1, #16
    c682:	042f      	lsls	r7, r5, #16
    c684:	0c00      	lsrs	r0, r0, #16
    c686:	183f      	adds	r7, r7, r0
    c688:	4658      	mov	r0, fp
    c68a:	9902      	ldr	r1, [sp, #8]
    c68c:	1810      	adds	r0, r2, r0
    c68e:	4689      	mov	r9, r1
    c690:	4290      	cmp	r0, r2
    c692:	4192      	sbcs	r2, r2
    c694:	444f      	add	r7, r9
    c696:	46ba      	mov	sl, r7
    c698:	4252      	negs	r2, r2
    c69a:	4699      	mov	r9, r3
    c69c:	4693      	mov	fp, r2
    c69e:	44c2      	add	sl, r8
    c6a0:	44d1      	add	r9, sl
    c6a2:	44cb      	add	fp, r9
    c6a4:	428f      	cmp	r7, r1
    c6a6:	41bf      	sbcs	r7, r7
    c6a8:	45c2      	cmp	sl, r8
    c6aa:	4189      	sbcs	r1, r1
    c6ac:	4599      	cmp	r9, r3
    c6ae:	419b      	sbcs	r3, r3
    c6b0:	4593      	cmp	fp, r2
    c6b2:	4192      	sbcs	r2, r2
    c6b4:	427f      	negs	r7, r7
    c6b6:	4249      	negs	r1, r1
    c6b8:	0c2d      	lsrs	r5, r5, #16
    c6ba:	4252      	negs	r2, r2
    c6bc:	430f      	orrs	r7, r1
    c6be:	425b      	negs	r3, r3
    c6c0:	4313      	orrs	r3, r2
    c6c2:	197f      	adds	r7, r7, r5
    c6c4:	18ff      	adds	r7, r7, r3
    c6c6:	465b      	mov	r3, fp
    c6c8:	193c      	adds	r4, r7, r4
    c6ca:	0ddb      	lsrs	r3, r3, #23
    c6cc:	9a05      	ldr	r2, [sp, #20]
    c6ce:	0264      	lsls	r4, r4, #9
    c6d0:	431c      	orrs	r4, r3
    c6d2:	0243      	lsls	r3, r0, #9
    c6d4:	4313      	orrs	r3, r2
    c6d6:	1e5d      	subs	r5, r3, #1
    c6d8:	41ab      	sbcs	r3, r5
    c6da:	465a      	mov	r2, fp
    c6dc:	0dc0      	lsrs	r0, r0, #23
    c6de:	4303      	orrs	r3, r0
    c6e0:	0252      	lsls	r2, r2, #9
    c6e2:	4313      	orrs	r3, r2
    c6e4:	01e2      	lsls	r2, r4, #7
    c6e6:	d556      	bpl.n	c796 <__aeabi_dmul+0x426>
    c6e8:	2001      	movs	r0, #1
    c6ea:	085a      	lsrs	r2, r3, #1
    c6ec:	4003      	ands	r3, r0
    c6ee:	4313      	orrs	r3, r2
    c6f0:	07e2      	lsls	r2, r4, #31
    c6f2:	4313      	orrs	r3, r2
    c6f4:	0864      	lsrs	r4, r4, #1
    c6f6:	485a      	ldr	r0, [pc, #360]	; (c860 <__aeabi_dmul+0x4f0>)
    c6f8:	4460      	add	r0, ip
    c6fa:	2800      	cmp	r0, #0
    c6fc:	dd4d      	ble.n	c79a <__aeabi_dmul+0x42a>
    c6fe:	075a      	lsls	r2, r3, #29
    c700:	d009      	beq.n	c716 <__aeabi_dmul+0x3a6>
    c702:	220f      	movs	r2, #15
    c704:	401a      	ands	r2, r3
    c706:	2a04      	cmp	r2, #4
    c708:	d005      	beq.n	c716 <__aeabi_dmul+0x3a6>
    c70a:	1d1a      	adds	r2, r3, #4
    c70c:	429a      	cmp	r2, r3
    c70e:	419b      	sbcs	r3, r3
    c710:	425b      	negs	r3, r3
    c712:	18e4      	adds	r4, r4, r3
    c714:	0013      	movs	r3, r2
    c716:	01e2      	lsls	r2, r4, #7
    c718:	d504      	bpl.n	c724 <__aeabi_dmul+0x3b4>
    c71a:	2080      	movs	r0, #128	; 0x80
    c71c:	4a51      	ldr	r2, [pc, #324]	; (c864 <__aeabi_dmul+0x4f4>)
    c71e:	00c0      	lsls	r0, r0, #3
    c720:	4014      	ands	r4, r2
    c722:	4460      	add	r0, ip
    c724:	4a50      	ldr	r2, [pc, #320]	; (c868 <__aeabi_dmul+0x4f8>)
    c726:	4290      	cmp	r0, r2
    c728:	dd00      	ble.n	c72c <__aeabi_dmul+0x3bc>
    c72a:	e6e3      	b.n	c4f4 <__aeabi_dmul+0x184>
    c72c:	2501      	movs	r5, #1
    c72e:	08db      	lsrs	r3, r3, #3
    c730:	0762      	lsls	r2, r4, #29
    c732:	431a      	orrs	r2, r3
    c734:	0264      	lsls	r4, r4, #9
    c736:	9b01      	ldr	r3, [sp, #4]
    c738:	4691      	mov	r9, r2
    c73a:	0b22      	lsrs	r2, r4, #12
    c73c:	0544      	lsls	r4, r0, #21
    c73e:	0d64      	lsrs	r4, r4, #21
    c740:	401d      	ands	r5, r3
    c742:	e67c      	b.n	c43e <__aeabi_dmul+0xce>
    c744:	2280      	movs	r2, #128	; 0x80
    c746:	4659      	mov	r1, fp
    c748:	0312      	lsls	r2, r2, #12
    c74a:	4211      	tst	r1, r2
    c74c:	d008      	beq.n	c760 <__aeabi_dmul+0x3f0>
    c74e:	4214      	tst	r4, r2
    c750:	d106      	bne.n	c760 <__aeabi_dmul+0x3f0>
    c752:	4322      	orrs	r2, r4
    c754:	0312      	lsls	r2, r2, #12
    c756:	0b12      	lsrs	r2, r2, #12
    c758:	4645      	mov	r5, r8
    c75a:	4699      	mov	r9, r3
    c75c:	4c43      	ldr	r4, [pc, #268]	; (c86c <__aeabi_dmul+0x4fc>)
    c75e:	e66e      	b.n	c43e <__aeabi_dmul+0xce>
    c760:	465b      	mov	r3, fp
    c762:	431a      	orrs	r2, r3
    c764:	0312      	lsls	r2, r2, #12
    c766:	0b12      	lsrs	r2, r2, #12
    c768:	4c40      	ldr	r4, [pc, #256]	; (c86c <__aeabi_dmul+0x4fc>)
    c76a:	e668      	b.n	c43e <__aeabi_dmul+0xce>
    c76c:	0003      	movs	r3, r0
    c76e:	4654      	mov	r4, sl
    c770:	3b28      	subs	r3, #40	; 0x28
    c772:	409c      	lsls	r4, r3
    c774:	2300      	movs	r3, #0
    c776:	e6b9      	b.n	c4ec <__aeabi_dmul+0x17c>
    c778:	f000 fcb0 	bl	d0dc <__clzsi2>
    c77c:	3020      	adds	r0, #32
    c77e:	e6a6      	b.n	c4ce <__aeabi_dmul+0x15e>
    c780:	0003      	movs	r3, r0
    c782:	3b28      	subs	r3, #40	; 0x28
    c784:	409f      	lsls	r7, r3
    c786:	2300      	movs	r3, #0
    c788:	46bb      	mov	fp, r7
    c78a:	4699      	mov	r9, r3
    c78c:	e68a      	b.n	c4a4 <__aeabi_dmul+0x134>
    c78e:	f000 fca5 	bl	d0dc <__clzsi2>
    c792:	3020      	adds	r0, #32
    c794:	e674      	b.n	c480 <__aeabi_dmul+0x110>
    c796:	46b4      	mov	ip, r6
    c798:	e7ad      	b.n	c6f6 <__aeabi_dmul+0x386>
    c79a:	2501      	movs	r5, #1
    c79c:	1a2a      	subs	r2, r5, r0
    c79e:	2a38      	cmp	r2, #56	; 0x38
    c7a0:	dd06      	ble.n	c7b0 <__aeabi_dmul+0x440>
    c7a2:	9b01      	ldr	r3, [sp, #4]
    c7a4:	2400      	movs	r4, #0
    c7a6:	401d      	ands	r5, r3
    c7a8:	2300      	movs	r3, #0
    c7aa:	2200      	movs	r2, #0
    c7ac:	4699      	mov	r9, r3
    c7ae:	e646      	b.n	c43e <__aeabi_dmul+0xce>
    c7b0:	2a1f      	cmp	r2, #31
    c7b2:	dc21      	bgt.n	c7f8 <__aeabi_dmul+0x488>
    c7b4:	2520      	movs	r5, #32
    c7b6:	0020      	movs	r0, r4
    c7b8:	1aad      	subs	r5, r5, r2
    c7ba:	001e      	movs	r6, r3
    c7bc:	40ab      	lsls	r3, r5
    c7be:	40a8      	lsls	r0, r5
    c7c0:	40d6      	lsrs	r6, r2
    c7c2:	1e5d      	subs	r5, r3, #1
    c7c4:	41ab      	sbcs	r3, r5
    c7c6:	4330      	orrs	r0, r6
    c7c8:	4318      	orrs	r0, r3
    c7ca:	40d4      	lsrs	r4, r2
    c7cc:	0743      	lsls	r3, r0, #29
    c7ce:	d009      	beq.n	c7e4 <__aeabi_dmul+0x474>
    c7d0:	230f      	movs	r3, #15
    c7d2:	4003      	ands	r3, r0
    c7d4:	2b04      	cmp	r3, #4
    c7d6:	d005      	beq.n	c7e4 <__aeabi_dmul+0x474>
    c7d8:	0003      	movs	r3, r0
    c7da:	1d18      	adds	r0, r3, #4
    c7dc:	4298      	cmp	r0, r3
    c7de:	419b      	sbcs	r3, r3
    c7e0:	425b      	negs	r3, r3
    c7e2:	18e4      	adds	r4, r4, r3
    c7e4:	0223      	lsls	r3, r4, #8
    c7e6:	d521      	bpl.n	c82c <__aeabi_dmul+0x4bc>
    c7e8:	2501      	movs	r5, #1
    c7ea:	9b01      	ldr	r3, [sp, #4]
    c7ec:	2401      	movs	r4, #1
    c7ee:	401d      	ands	r5, r3
    c7f0:	2300      	movs	r3, #0
    c7f2:	2200      	movs	r2, #0
    c7f4:	4699      	mov	r9, r3
    c7f6:	e622      	b.n	c43e <__aeabi_dmul+0xce>
    c7f8:	251f      	movs	r5, #31
    c7fa:	0021      	movs	r1, r4
    c7fc:	426d      	negs	r5, r5
    c7fe:	1a28      	subs	r0, r5, r0
    c800:	40c1      	lsrs	r1, r0
    c802:	0008      	movs	r0, r1
    c804:	2a20      	cmp	r2, #32
    c806:	d01d      	beq.n	c844 <__aeabi_dmul+0x4d4>
    c808:	355f      	adds	r5, #95	; 0x5f
    c80a:	1aaa      	subs	r2, r5, r2
    c80c:	4094      	lsls	r4, r2
    c80e:	4323      	orrs	r3, r4
    c810:	1e5c      	subs	r4, r3, #1
    c812:	41a3      	sbcs	r3, r4
    c814:	2507      	movs	r5, #7
    c816:	4303      	orrs	r3, r0
    c818:	401d      	ands	r5, r3
    c81a:	2200      	movs	r2, #0
    c81c:	2d00      	cmp	r5, #0
    c81e:	d009      	beq.n	c834 <__aeabi_dmul+0x4c4>
    c820:	220f      	movs	r2, #15
    c822:	2400      	movs	r4, #0
    c824:	401a      	ands	r2, r3
    c826:	0018      	movs	r0, r3
    c828:	2a04      	cmp	r2, #4
    c82a:	d1d6      	bne.n	c7da <__aeabi_dmul+0x46a>
    c82c:	0003      	movs	r3, r0
    c82e:	0765      	lsls	r5, r4, #29
    c830:	0264      	lsls	r4, r4, #9
    c832:	0b22      	lsrs	r2, r4, #12
    c834:	08db      	lsrs	r3, r3, #3
    c836:	432b      	orrs	r3, r5
    c838:	2501      	movs	r5, #1
    c83a:	4699      	mov	r9, r3
    c83c:	9b01      	ldr	r3, [sp, #4]
    c83e:	2400      	movs	r4, #0
    c840:	401d      	ands	r5, r3
    c842:	e5fc      	b.n	c43e <__aeabi_dmul+0xce>
    c844:	2400      	movs	r4, #0
    c846:	e7e2      	b.n	c80e <__aeabi_dmul+0x49e>
    c848:	2280      	movs	r2, #128	; 0x80
    c84a:	2501      	movs	r5, #1
    c84c:	0312      	lsls	r2, r2, #12
    c84e:	4322      	orrs	r2, r4
    c850:	9901      	ldr	r1, [sp, #4]
    c852:	0312      	lsls	r2, r2, #12
    c854:	0b12      	lsrs	r2, r2, #12
    c856:	400d      	ands	r5, r1
    c858:	4699      	mov	r9, r3
    c85a:	4c04      	ldr	r4, [pc, #16]	; (c86c <__aeabi_dmul+0x4fc>)
    c85c:	e5ef      	b.n	c43e <__aeabi_dmul+0xce>
    c85e:	46c0      	nop			; (mov r8, r8)
    c860:	000003ff 	.word	0x000003ff
    c864:	feffffff 	.word	0xfeffffff
    c868:	000007fe 	.word	0x000007fe
    c86c:	000007ff 	.word	0x000007ff

0000c870 <__aeabi_dsub>:
    c870:	b5f0      	push	{r4, r5, r6, r7, lr}
    c872:	4646      	mov	r6, r8
    c874:	46d6      	mov	lr, sl
    c876:	464f      	mov	r7, r9
    c878:	030c      	lsls	r4, r1, #12
    c87a:	b5c0      	push	{r6, r7, lr}
    c87c:	0fcd      	lsrs	r5, r1, #31
    c87e:	004e      	lsls	r6, r1, #1
    c880:	0a61      	lsrs	r1, r4, #9
    c882:	0f44      	lsrs	r4, r0, #29
    c884:	430c      	orrs	r4, r1
    c886:	00c1      	lsls	r1, r0, #3
    c888:	0058      	lsls	r0, r3, #1
    c88a:	0d40      	lsrs	r0, r0, #21
    c88c:	4684      	mov	ip, r0
    c88e:	468a      	mov	sl, r1
    c890:	000f      	movs	r7, r1
    c892:	0319      	lsls	r1, r3, #12
    c894:	0f50      	lsrs	r0, r2, #29
    c896:	0a49      	lsrs	r1, r1, #9
    c898:	4301      	orrs	r1, r0
    c89a:	48c6      	ldr	r0, [pc, #792]	; (cbb4 <__aeabi_dsub+0x344>)
    c89c:	0d76      	lsrs	r6, r6, #21
    c89e:	46a8      	mov	r8, r5
    c8a0:	0fdb      	lsrs	r3, r3, #31
    c8a2:	00d2      	lsls	r2, r2, #3
    c8a4:	4584      	cmp	ip, r0
    c8a6:	d100      	bne.n	c8aa <__aeabi_dsub+0x3a>
    c8a8:	e0d8      	b.n	ca5c <__aeabi_dsub+0x1ec>
    c8aa:	2001      	movs	r0, #1
    c8ac:	4043      	eors	r3, r0
    c8ae:	42ab      	cmp	r3, r5
    c8b0:	d100      	bne.n	c8b4 <__aeabi_dsub+0x44>
    c8b2:	e0a6      	b.n	ca02 <__aeabi_dsub+0x192>
    c8b4:	4660      	mov	r0, ip
    c8b6:	1a35      	subs	r5, r6, r0
    c8b8:	2d00      	cmp	r5, #0
    c8ba:	dc00      	bgt.n	c8be <__aeabi_dsub+0x4e>
    c8bc:	e105      	b.n	caca <__aeabi_dsub+0x25a>
    c8be:	2800      	cmp	r0, #0
    c8c0:	d110      	bne.n	c8e4 <__aeabi_dsub+0x74>
    c8c2:	000b      	movs	r3, r1
    c8c4:	4313      	orrs	r3, r2
    c8c6:	d100      	bne.n	c8ca <__aeabi_dsub+0x5a>
    c8c8:	e0d7      	b.n	ca7a <__aeabi_dsub+0x20a>
    c8ca:	1e6b      	subs	r3, r5, #1
    c8cc:	2b00      	cmp	r3, #0
    c8ce:	d000      	beq.n	c8d2 <__aeabi_dsub+0x62>
    c8d0:	e14b      	b.n	cb6a <__aeabi_dsub+0x2fa>
    c8d2:	4653      	mov	r3, sl
    c8d4:	1a9f      	subs	r7, r3, r2
    c8d6:	45ba      	cmp	sl, r7
    c8d8:	4180      	sbcs	r0, r0
    c8da:	1a64      	subs	r4, r4, r1
    c8dc:	4240      	negs	r0, r0
    c8de:	1a24      	subs	r4, r4, r0
    c8e0:	2601      	movs	r6, #1
    c8e2:	e01e      	b.n	c922 <__aeabi_dsub+0xb2>
    c8e4:	4bb3      	ldr	r3, [pc, #716]	; (cbb4 <__aeabi_dsub+0x344>)
    c8e6:	429e      	cmp	r6, r3
    c8e8:	d048      	beq.n	c97c <__aeabi_dsub+0x10c>
    c8ea:	2380      	movs	r3, #128	; 0x80
    c8ec:	041b      	lsls	r3, r3, #16
    c8ee:	4319      	orrs	r1, r3
    c8f0:	2d38      	cmp	r5, #56	; 0x38
    c8f2:	dd00      	ble.n	c8f6 <__aeabi_dsub+0x86>
    c8f4:	e119      	b.n	cb2a <__aeabi_dsub+0x2ba>
    c8f6:	2d1f      	cmp	r5, #31
    c8f8:	dd00      	ble.n	c8fc <__aeabi_dsub+0x8c>
    c8fa:	e14c      	b.n	cb96 <__aeabi_dsub+0x326>
    c8fc:	2320      	movs	r3, #32
    c8fe:	000f      	movs	r7, r1
    c900:	1b5b      	subs	r3, r3, r5
    c902:	0010      	movs	r0, r2
    c904:	409a      	lsls	r2, r3
    c906:	409f      	lsls	r7, r3
    c908:	40e8      	lsrs	r0, r5
    c90a:	1e53      	subs	r3, r2, #1
    c90c:	419a      	sbcs	r2, r3
    c90e:	40e9      	lsrs	r1, r5
    c910:	4307      	orrs	r7, r0
    c912:	4317      	orrs	r7, r2
    c914:	4653      	mov	r3, sl
    c916:	1bdf      	subs	r7, r3, r7
    c918:	1a61      	subs	r1, r4, r1
    c91a:	45ba      	cmp	sl, r7
    c91c:	41a4      	sbcs	r4, r4
    c91e:	4264      	negs	r4, r4
    c920:	1b0c      	subs	r4, r1, r4
    c922:	0223      	lsls	r3, r4, #8
    c924:	d400      	bmi.n	c928 <__aeabi_dsub+0xb8>
    c926:	e0c5      	b.n	cab4 <__aeabi_dsub+0x244>
    c928:	0264      	lsls	r4, r4, #9
    c92a:	0a65      	lsrs	r5, r4, #9
    c92c:	2d00      	cmp	r5, #0
    c92e:	d100      	bne.n	c932 <__aeabi_dsub+0xc2>
    c930:	e0f6      	b.n	cb20 <__aeabi_dsub+0x2b0>
    c932:	0028      	movs	r0, r5
    c934:	f000 fbd2 	bl	d0dc <__clzsi2>
    c938:	0003      	movs	r3, r0
    c93a:	3b08      	subs	r3, #8
    c93c:	2b1f      	cmp	r3, #31
    c93e:	dd00      	ble.n	c942 <__aeabi_dsub+0xd2>
    c940:	e0e9      	b.n	cb16 <__aeabi_dsub+0x2a6>
    c942:	2220      	movs	r2, #32
    c944:	003c      	movs	r4, r7
    c946:	1ad2      	subs	r2, r2, r3
    c948:	409d      	lsls	r5, r3
    c94a:	40d4      	lsrs	r4, r2
    c94c:	409f      	lsls	r7, r3
    c94e:	4325      	orrs	r5, r4
    c950:	429e      	cmp	r6, r3
    c952:	dd00      	ble.n	c956 <__aeabi_dsub+0xe6>
    c954:	e0db      	b.n	cb0e <__aeabi_dsub+0x29e>
    c956:	1b9e      	subs	r6, r3, r6
    c958:	1c73      	adds	r3, r6, #1
    c95a:	2b1f      	cmp	r3, #31
    c95c:	dd00      	ble.n	c960 <__aeabi_dsub+0xf0>
    c95e:	e10a      	b.n	cb76 <__aeabi_dsub+0x306>
    c960:	2220      	movs	r2, #32
    c962:	0038      	movs	r0, r7
    c964:	1ad2      	subs	r2, r2, r3
    c966:	0029      	movs	r1, r5
    c968:	4097      	lsls	r7, r2
    c96a:	002c      	movs	r4, r5
    c96c:	4091      	lsls	r1, r2
    c96e:	40d8      	lsrs	r0, r3
    c970:	1e7a      	subs	r2, r7, #1
    c972:	4197      	sbcs	r7, r2
    c974:	40dc      	lsrs	r4, r3
    c976:	2600      	movs	r6, #0
    c978:	4301      	orrs	r1, r0
    c97a:	430f      	orrs	r7, r1
    c97c:	077b      	lsls	r3, r7, #29
    c97e:	d009      	beq.n	c994 <__aeabi_dsub+0x124>
    c980:	230f      	movs	r3, #15
    c982:	403b      	ands	r3, r7
    c984:	2b04      	cmp	r3, #4
    c986:	d005      	beq.n	c994 <__aeabi_dsub+0x124>
    c988:	1d3b      	adds	r3, r7, #4
    c98a:	42bb      	cmp	r3, r7
    c98c:	41bf      	sbcs	r7, r7
    c98e:	427f      	negs	r7, r7
    c990:	19e4      	adds	r4, r4, r7
    c992:	001f      	movs	r7, r3
    c994:	0223      	lsls	r3, r4, #8
    c996:	d525      	bpl.n	c9e4 <__aeabi_dsub+0x174>
    c998:	4b86      	ldr	r3, [pc, #536]	; (cbb4 <__aeabi_dsub+0x344>)
    c99a:	3601      	adds	r6, #1
    c99c:	429e      	cmp	r6, r3
    c99e:	d100      	bne.n	c9a2 <__aeabi_dsub+0x132>
    c9a0:	e0af      	b.n	cb02 <__aeabi_dsub+0x292>
    c9a2:	4b85      	ldr	r3, [pc, #532]	; (cbb8 <__aeabi_dsub+0x348>)
    c9a4:	2501      	movs	r5, #1
    c9a6:	401c      	ands	r4, r3
    c9a8:	4643      	mov	r3, r8
    c9aa:	0762      	lsls	r2, r4, #29
    c9ac:	08ff      	lsrs	r7, r7, #3
    c9ae:	0264      	lsls	r4, r4, #9
    c9b0:	0576      	lsls	r6, r6, #21
    c9b2:	4317      	orrs	r7, r2
    c9b4:	0b24      	lsrs	r4, r4, #12
    c9b6:	0d76      	lsrs	r6, r6, #21
    c9b8:	401d      	ands	r5, r3
    c9ba:	2100      	movs	r1, #0
    c9bc:	0324      	lsls	r4, r4, #12
    c9be:	0b23      	lsrs	r3, r4, #12
    c9c0:	0d0c      	lsrs	r4, r1, #20
    c9c2:	4a7e      	ldr	r2, [pc, #504]	; (cbbc <__aeabi_dsub+0x34c>)
    c9c4:	0524      	lsls	r4, r4, #20
    c9c6:	431c      	orrs	r4, r3
    c9c8:	4014      	ands	r4, r2
    c9ca:	0533      	lsls	r3, r6, #20
    c9cc:	4323      	orrs	r3, r4
    c9ce:	005b      	lsls	r3, r3, #1
    c9d0:	07ed      	lsls	r5, r5, #31
    c9d2:	085b      	lsrs	r3, r3, #1
    c9d4:	432b      	orrs	r3, r5
    c9d6:	0038      	movs	r0, r7
    c9d8:	0019      	movs	r1, r3
    c9da:	bc1c      	pop	{r2, r3, r4}
    c9dc:	4690      	mov	r8, r2
    c9de:	4699      	mov	r9, r3
    c9e0:	46a2      	mov	sl, r4
    c9e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c9e4:	2501      	movs	r5, #1
    c9e6:	4643      	mov	r3, r8
    c9e8:	0762      	lsls	r2, r4, #29
    c9ea:	08ff      	lsrs	r7, r7, #3
    c9ec:	4317      	orrs	r7, r2
    c9ee:	08e4      	lsrs	r4, r4, #3
    c9f0:	401d      	ands	r5, r3
    c9f2:	4b70      	ldr	r3, [pc, #448]	; (cbb4 <__aeabi_dsub+0x344>)
    c9f4:	429e      	cmp	r6, r3
    c9f6:	d036      	beq.n	ca66 <__aeabi_dsub+0x1f6>
    c9f8:	0324      	lsls	r4, r4, #12
    c9fa:	0576      	lsls	r6, r6, #21
    c9fc:	0b24      	lsrs	r4, r4, #12
    c9fe:	0d76      	lsrs	r6, r6, #21
    ca00:	e7db      	b.n	c9ba <__aeabi_dsub+0x14a>
    ca02:	4663      	mov	r3, ip
    ca04:	1af3      	subs	r3, r6, r3
    ca06:	2b00      	cmp	r3, #0
    ca08:	dc00      	bgt.n	ca0c <__aeabi_dsub+0x19c>
    ca0a:	e094      	b.n	cb36 <__aeabi_dsub+0x2c6>
    ca0c:	4660      	mov	r0, ip
    ca0e:	2800      	cmp	r0, #0
    ca10:	d035      	beq.n	ca7e <__aeabi_dsub+0x20e>
    ca12:	4868      	ldr	r0, [pc, #416]	; (cbb4 <__aeabi_dsub+0x344>)
    ca14:	4286      	cmp	r6, r0
    ca16:	d0b1      	beq.n	c97c <__aeabi_dsub+0x10c>
    ca18:	2780      	movs	r7, #128	; 0x80
    ca1a:	043f      	lsls	r7, r7, #16
    ca1c:	4339      	orrs	r1, r7
    ca1e:	2b38      	cmp	r3, #56	; 0x38
    ca20:	dc00      	bgt.n	ca24 <__aeabi_dsub+0x1b4>
    ca22:	e0fd      	b.n	cc20 <__aeabi_dsub+0x3b0>
    ca24:	430a      	orrs	r2, r1
    ca26:	0017      	movs	r7, r2
    ca28:	2100      	movs	r1, #0
    ca2a:	1e7a      	subs	r2, r7, #1
    ca2c:	4197      	sbcs	r7, r2
    ca2e:	4457      	add	r7, sl
    ca30:	4557      	cmp	r7, sl
    ca32:	4180      	sbcs	r0, r0
    ca34:	1909      	adds	r1, r1, r4
    ca36:	4244      	negs	r4, r0
    ca38:	190c      	adds	r4, r1, r4
    ca3a:	0223      	lsls	r3, r4, #8
    ca3c:	d53a      	bpl.n	cab4 <__aeabi_dsub+0x244>
    ca3e:	4b5d      	ldr	r3, [pc, #372]	; (cbb4 <__aeabi_dsub+0x344>)
    ca40:	3601      	adds	r6, #1
    ca42:	429e      	cmp	r6, r3
    ca44:	d100      	bne.n	ca48 <__aeabi_dsub+0x1d8>
    ca46:	e14b      	b.n	cce0 <__aeabi_dsub+0x470>
    ca48:	2201      	movs	r2, #1
    ca4a:	4b5b      	ldr	r3, [pc, #364]	; (cbb8 <__aeabi_dsub+0x348>)
    ca4c:	401c      	ands	r4, r3
    ca4e:	087b      	lsrs	r3, r7, #1
    ca50:	4017      	ands	r7, r2
    ca52:	431f      	orrs	r7, r3
    ca54:	07e2      	lsls	r2, r4, #31
    ca56:	4317      	orrs	r7, r2
    ca58:	0864      	lsrs	r4, r4, #1
    ca5a:	e78f      	b.n	c97c <__aeabi_dsub+0x10c>
    ca5c:	0008      	movs	r0, r1
    ca5e:	4310      	orrs	r0, r2
    ca60:	d000      	beq.n	ca64 <__aeabi_dsub+0x1f4>
    ca62:	e724      	b.n	c8ae <__aeabi_dsub+0x3e>
    ca64:	e721      	b.n	c8aa <__aeabi_dsub+0x3a>
    ca66:	0023      	movs	r3, r4
    ca68:	433b      	orrs	r3, r7
    ca6a:	d100      	bne.n	ca6e <__aeabi_dsub+0x1fe>
    ca6c:	e1b9      	b.n	cde2 <__aeabi_dsub+0x572>
    ca6e:	2280      	movs	r2, #128	; 0x80
    ca70:	0312      	lsls	r2, r2, #12
    ca72:	4314      	orrs	r4, r2
    ca74:	0324      	lsls	r4, r4, #12
    ca76:	0b24      	lsrs	r4, r4, #12
    ca78:	e79f      	b.n	c9ba <__aeabi_dsub+0x14a>
    ca7a:	002e      	movs	r6, r5
    ca7c:	e77e      	b.n	c97c <__aeabi_dsub+0x10c>
    ca7e:	0008      	movs	r0, r1
    ca80:	4310      	orrs	r0, r2
    ca82:	d100      	bne.n	ca86 <__aeabi_dsub+0x216>
    ca84:	e0ca      	b.n	cc1c <__aeabi_dsub+0x3ac>
    ca86:	1e58      	subs	r0, r3, #1
    ca88:	4684      	mov	ip, r0
    ca8a:	2800      	cmp	r0, #0
    ca8c:	d000      	beq.n	ca90 <__aeabi_dsub+0x220>
    ca8e:	e0e7      	b.n	cc60 <__aeabi_dsub+0x3f0>
    ca90:	4452      	add	r2, sl
    ca92:	4552      	cmp	r2, sl
    ca94:	4180      	sbcs	r0, r0
    ca96:	1864      	adds	r4, r4, r1
    ca98:	4240      	negs	r0, r0
    ca9a:	1824      	adds	r4, r4, r0
    ca9c:	0017      	movs	r7, r2
    ca9e:	2601      	movs	r6, #1
    caa0:	0223      	lsls	r3, r4, #8
    caa2:	d507      	bpl.n	cab4 <__aeabi_dsub+0x244>
    caa4:	2602      	movs	r6, #2
    caa6:	e7cf      	b.n	ca48 <__aeabi_dsub+0x1d8>
    caa8:	4664      	mov	r4, ip
    caaa:	432c      	orrs	r4, r5
    caac:	d100      	bne.n	cab0 <__aeabi_dsub+0x240>
    caae:	e1b3      	b.n	ce18 <__aeabi_dsub+0x5a8>
    cab0:	002c      	movs	r4, r5
    cab2:	4667      	mov	r7, ip
    cab4:	077b      	lsls	r3, r7, #29
    cab6:	d000      	beq.n	caba <__aeabi_dsub+0x24a>
    cab8:	e762      	b.n	c980 <__aeabi_dsub+0x110>
    caba:	0763      	lsls	r3, r4, #29
    cabc:	08ff      	lsrs	r7, r7, #3
    cabe:	431f      	orrs	r7, r3
    cac0:	2501      	movs	r5, #1
    cac2:	4643      	mov	r3, r8
    cac4:	08e4      	lsrs	r4, r4, #3
    cac6:	401d      	ands	r5, r3
    cac8:	e793      	b.n	c9f2 <__aeabi_dsub+0x182>
    caca:	2d00      	cmp	r5, #0
    cacc:	d178      	bne.n	cbc0 <__aeabi_dsub+0x350>
    cace:	1c75      	adds	r5, r6, #1
    cad0:	056d      	lsls	r5, r5, #21
    cad2:	0d6d      	lsrs	r5, r5, #21
    cad4:	2d01      	cmp	r5, #1
    cad6:	dc00      	bgt.n	cada <__aeabi_dsub+0x26a>
    cad8:	e0f2      	b.n	ccc0 <__aeabi_dsub+0x450>
    cada:	4650      	mov	r0, sl
    cadc:	1a80      	subs	r0, r0, r2
    cade:	4582      	cmp	sl, r0
    cae0:	41bf      	sbcs	r7, r7
    cae2:	1a65      	subs	r5, r4, r1
    cae4:	427f      	negs	r7, r7
    cae6:	1bed      	subs	r5, r5, r7
    cae8:	4684      	mov	ip, r0
    caea:	0228      	lsls	r0, r5, #8
    caec:	d400      	bmi.n	caf0 <__aeabi_dsub+0x280>
    caee:	e08c      	b.n	cc0a <__aeabi_dsub+0x39a>
    caf0:	4650      	mov	r0, sl
    caf2:	1a17      	subs	r7, r2, r0
    caf4:	42ba      	cmp	r2, r7
    caf6:	4192      	sbcs	r2, r2
    caf8:	1b0c      	subs	r4, r1, r4
    cafa:	4255      	negs	r5, r2
    cafc:	1b65      	subs	r5, r4, r5
    cafe:	4698      	mov	r8, r3
    cb00:	e714      	b.n	c92c <__aeabi_dsub+0xbc>
    cb02:	2501      	movs	r5, #1
    cb04:	4643      	mov	r3, r8
    cb06:	2400      	movs	r4, #0
    cb08:	401d      	ands	r5, r3
    cb0a:	2700      	movs	r7, #0
    cb0c:	e755      	b.n	c9ba <__aeabi_dsub+0x14a>
    cb0e:	4c2a      	ldr	r4, [pc, #168]	; (cbb8 <__aeabi_dsub+0x348>)
    cb10:	1af6      	subs	r6, r6, r3
    cb12:	402c      	ands	r4, r5
    cb14:	e732      	b.n	c97c <__aeabi_dsub+0x10c>
    cb16:	003d      	movs	r5, r7
    cb18:	3828      	subs	r0, #40	; 0x28
    cb1a:	4085      	lsls	r5, r0
    cb1c:	2700      	movs	r7, #0
    cb1e:	e717      	b.n	c950 <__aeabi_dsub+0xe0>
    cb20:	0038      	movs	r0, r7
    cb22:	f000 fadb 	bl	d0dc <__clzsi2>
    cb26:	3020      	adds	r0, #32
    cb28:	e706      	b.n	c938 <__aeabi_dsub+0xc8>
    cb2a:	430a      	orrs	r2, r1
    cb2c:	0017      	movs	r7, r2
    cb2e:	2100      	movs	r1, #0
    cb30:	1e7a      	subs	r2, r7, #1
    cb32:	4197      	sbcs	r7, r2
    cb34:	e6ee      	b.n	c914 <__aeabi_dsub+0xa4>
    cb36:	2b00      	cmp	r3, #0
    cb38:	d000      	beq.n	cb3c <__aeabi_dsub+0x2cc>
    cb3a:	e0e5      	b.n	cd08 <__aeabi_dsub+0x498>
    cb3c:	1c73      	adds	r3, r6, #1
    cb3e:	469c      	mov	ip, r3
    cb40:	055b      	lsls	r3, r3, #21
    cb42:	0d5b      	lsrs	r3, r3, #21
    cb44:	2b01      	cmp	r3, #1
    cb46:	dc00      	bgt.n	cb4a <__aeabi_dsub+0x2da>
    cb48:	e09f      	b.n	cc8a <__aeabi_dsub+0x41a>
    cb4a:	4b1a      	ldr	r3, [pc, #104]	; (cbb4 <__aeabi_dsub+0x344>)
    cb4c:	459c      	cmp	ip, r3
    cb4e:	d100      	bne.n	cb52 <__aeabi_dsub+0x2e2>
    cb50:	e0c5      	b.n	ccde <__aeabi_dsub+0x46e>
    cb52:	4452      	add	r2, sl
    cb54:	4552      	cmp	r2, sl
    cb56:	4180      	sbcs	r0, r0
    cb58:	1864      	adds	r4, r4, r1
    cb5a:	4240      	negs	r0, r0
    cb5c:	1824      	adds	r4, r4, r0
    cb5e:	07e7      	lsls	r7, r4, #31
    cb60:	0852      	lsrs	r2, r2, #1
    cb62:	4317      	orrs	r7, r2
    cb64:	0864      	lsrs	r4, r4, #1
    cb66:	4666      	mov	r6, ip
    cb68:	e708      	b.n	c97c <__aeabi_dsub+0x10c>
    cb6a:	4812      	ldr	r0, [pc, #72]	; (cbb4 <__aeabi_dsub+0x344>)
    cb6c:	4285      	cmp	r5, r0
    cb6e:	d100      	bne.n	cb72 <__aeabi_dsub+0x302>
    cb70:	e085      	b.n	cc7e <__aeabi_dsub+0x40e>
    cb72:	001d      	movs	r5, r3
    cb74:	e6bc      	b.n	c8f0 <__aeabi_dsub+0x80>
    cb76:	0029      	movs	r1, r5
    cb78:	3e1f      	subs	r6, #31
    cb7a:	40f1      	lsrs	r1, r6
    cb7c:	2b20      	cmp	r3, #32
    cb7e:	d100      	bne.n	cb82 <__aeabi_dsub+0x312>
    cb80:	e07f      	b.n	cc82 <__aeabi_dsub+0x412>
    cb82:	2240      	movs	r2, #64	; 0x40
    cb84:	1ad3      	subs	r3, r2, r3
    cb86:	409d      	lsls	r5, r3
    cb88:	432f      	orrs	r7, r5
    cb8a:	1e7d      	subs	r5, r7, #1
    cb8c:	41af      	sbcs	r7, r5
    cb8e:	2400      	movs	r4, #0
    cb90:	430f      	orrs	r7, r1
    cb92:	2600      	movs	r6, #0
    cb94:	e78e      	b.n	cab4 <__aeabi_dsub+0x244>
    cb96:	002b      	movs	r3, r5
    cb98:	000f      	movs	r7, r1
    cb9a:	3b20      	subs	r3, #32
    cb9c:	40df      	lsrs	r7, r3
    cb9e:	2d20      	cmp	r5, #32
    cba0:	d071      	beq.n	cc86 <__aeabi_dsub+0x416>
    cba2:	2340      	movs	r3, #64	; 0x40
    cba4:	1b5d      	subs	r5, r3, r5
    cba6:	40a9      	lsls	r1, r5
    cba8:	430a      	orrs	r2, r1
    cbaa:	1e51      	subs	r1, r2, #1
    cbac:	418a      	sbcs	r2, r1
    cbae:	2100      	movs	r1, #0
    cbb0:	4317      	orrs	r7, r2
    cbb2:	e6af      	b.n	c914 <__aeabi_dsub+0xa4>
    cbb4:	000007ff 	.word	0x000007ff
    cbb8:	ff7fffff 	.word	0xff7fffff
    cbbc:	800fffff 	.word	0x800fffff
    cbc0:	2e00      	cmp	r6, #0
    cbc2:	d03e      	beq.n	cc42 <__aeabi_dsub+0x3d2>
    cbc4:	4eb3      	ldr	r6, [pc, #716]	; (ce94 <__aeabi_dsub+0x624>)
    cbc6:	45b4      	cmp	ip, r6
    cbc8:	d045      	beq.n	cc56 <__aeabi_dsub+0x3e6>
    cbca:	2680      	movs	r6, #128	; 0x80
    cbcc:	0436      	lsls	r6, r6, #16
    cbce:	426d      	negs	r5, r5
    cbd0:	4334      	orrs	r4, r6
    cbd2:	2d38      	cmp	r5, #56	; 0x38
    cbd4:	dd00      	ble.n	cbd8 <__aeabi_dsub+0x368>
    cbd6:	e0a8      	b.n	cd2a <__aeabi_dsub+0x4ba>
    cbd8:	2d1f      	cmp	r5, #31
    cbda:	dd00      	ble.n	cbde <__aeabi_dsub+0x36e>
    cbdc:	e11f      	b.n	ce1e <__aeabi_dsub+0x5ae>
    cbde:	2620      	movs	r6, #32
    cbe0:	0027      	movs	r7, r4
    cbe2:	4650      	mov	r0, sl
    cbe4:	1b76      	subs	r6, r6, r5
    cbe6:	40b7      	lsls	r7, r6
    cbe8:	40e8      	lsrs	r0, r5
    cbea:	4307      	orrs	r7, r0
    cbec:	4650      	mov	r0, sl
    cbee:	40b0      	lsls	r0, r6
    cbf0:	1e46      	subs	r6, r0, #1
    cbf2:	41b0      	sbcs	r0, r6
    cbf4:	40ec      	lsrs	r4, r5
    cbf6:	4338      	orrs	r0, r7
    cbf8:	1a17      	subs	r7, r2, r0
    cbfa:	42ba      	cmp	r2, r7
    cbfc:	4192      	sbcs	r2, r2
    cbfe:	1b0c      	subs	r4, r1, r4
    cc00:	4252      	negs	r2, r2
    cc02:	1aa4      	subs	r4, r4, r2
    cc04:	4666      	mov	r6, ip
    cc06:	4698      	mov	r8, r3
    cc08:	e68b      	b.n	c922 <__aeabi_dsub+0xb2>
    cc0a:	4664      	mov	r4, ip
    cc0c:	4667      	mov	r7, ip
    cc0e:	432c      	orrs	r4, r5
    cc10:	d000      	beq.n	cc14 <__aeabi_dsub+0x3a4>
    cc12:	e68b      	b.n	c92c <__aeabi_dsub+0xbc>
    cc14:	2500      	movs	r5, #0
    cc16:	2600      	movs	r6, #0
    cc18:	2700      	movs	r7, #0
    cc1a:	e6ea      	b.n	c9f2 <__aeabi_dsub+0x182>
    cc1c:	001e      	movs	r6, r3
    cc1e:	e6ad      	b.n	c97c <__aeabi_dsub+0x10c>
    cc20:	2b1f      	cmp	r3, #31
    cc22:	dc60      	bgt.n	cce6 <__aeabi_dsub+0x476>
    cc24:	2720      	movs	r7, #32
    cc26:	1af8      	subs	r0, r7, r3
    cc28:	000f      	movs	r7, r1
    cc2a:	4684      	mov	ip, r0
    cc2c:	4087      	lsls	r7, r0
    cc2e:	0010      	movs	r0, r2
    cc30:	40d8      	lsrs	r0, r3
    cc32:	4307      	orrs	r7, r0
    cc34:	4660      	mov	r0, ip
    cc36:	4082      	lsls	r2, r0
    cc38:	1e50      	subs	r0, r2, #1
    cc3a:	4182      	sbcs	r2, r0
    cc3c:	40d9      	lsrs	r1, r3
    cc3e:	4317      	orrs	r7, r2
    cc40:	e6f5      	b.n	ca2e <__aeabi_dsub+0x1be>
    cc42:	0026      	movs	r6, r4
    cc44:	4650      	mov	r0, sl
    cc46:	4306      	orrs	r6, r0
    cc48:	d005      	beq.n	cc56 <__aeabi_dsub+0x3e6>
    cc4a:	43ed      	mvns	r5, r5
    cc4c:	2d00      	cmp	r5, #0
    cc4e:	d0d3      	beq.n	cbf8 <__aeabi_dsub+0x388>
    cc50:	4e90      	ldr	r6, [pc, #576]	; (ce94 <__aeabi_dsub+0x624>)
    cc52:	45b4      	cmp	ip, r6
    cc54:	d1bd      	bne.n	cbd2 <__aeabi_dsub+0x362>
    cc56:	000c      	movs	r4, r1
    cc58:	0017      	movs	r7, r2
    cc5a:	4666      	mov	r6, ip
    cc5c:	4698      	mov	r8, r3
    cc5e:	e68d      	b.n	c97c <__aeabi_dsub+0x10c>
    cc60:	488c      	ldr	r0, [pc, #560]	; (ce94 <__aeabi_dsub+0x624>)
    cc62:	4283      	cmp	r3, r0
    cc64:	d00b      	beq.n	cc7e <__aeabi_dsub+0x40e>
    cc66:	4663      	mov	r3, ip
    cc68:	e6d9      	b.n	ca1e <__aeabi_dsub+0x1ae>
    cc6a:	2d00      	cmp	r5, #0
    cc6c:	d000      	beq.n	cc70 <__aeabi_dsub+0x400>
    cc6e:	e096      	b.n	cd9e <__aeabi_dsub+0x52e>
    cc70:	0008      	movs	r0, r1
    cc72:	4310      	orrs	r0, r2
    cc74:	d100      	bne.n	cc78 <__aeabi_dsub+0x408>
    cc76:	e0e2      	b.n	ce3e <__aeabi_dsub+0x5ce>
    cc78:	000c      	movs	r4, r1
    cc7a:	0017      	movs	r7, r2
    cc7c:	4698      	mov	r8, r3
    cc7e:	4e85      	ldr	r6, [pc, #532]	; (ce94 <__aeabi_dsub+0x624>)
    cc80:	e67c      	b.n	c97c <__aeabi_dsub+0x10c>
    cc82:	2500      	movs	r5, #0
    cc84:	e780      	b.n	cb88 <__aeabi_dsub+0x318>
    cc86:	2100      	movs	r1, #0
    cc88:	e78e      	b.n	cba8 <__aeabi_dsub+0x338>
    cc8a:	0023      	movs	r3, r4
    cc8c:	4650      	mov	r0, sl
    cc8e:	4303      	orrs	r3, r0
    cc90:	2e00      	cmp	r6, #0
    cc92:	d000      	beq.n	cc96 <__aeabi_dsub+0x426>
    cc94:	e0a8      	b.n	cde8 <__aeabi_dsub+0x578>
    cc96:	2b00      	cmp	r3, #0
    cc98:	d100      	bne.n	cc9c <__aeabi_dsub+0x42c>
    cc9a:	e0de      	b.n	ce5a <__aeabi_dsub+0x5ea>
    cc9c:	000b      	movs	r3, r1
    cc9e:	4313      	orrs	r3, r2
    cca0:	d100      	bne.n	cca4 <__aeabi_dsub+0x434>
    cca2:	e66b      	b.n	c97c <__aeabi_dsub+0x10c>
    cca4:	4452      	add	r2, sl
    cca6:	4552      	cmp	r2, sl
    cca8:	4180      	sbcs	r0, r0
    ccaa:	1864      	adds	r4, r4, r1
    ccac:	4240      	negs	r0, r0
    ccae:	1824      	adds	r4, r4, r0
    ccb0:	0017      	movs	r7, r2
    ccb2:	0223      	lsls	r3, r4, #8
    ccb4:	d400      	bmi.n	ccb8 <__aeabi_dsub+0x448>
    ccb6:	e6fd      	b.n	cab4 <__aeabi_dsub+0x244>
    ccb8:	4b77      	ldr	r3, [pc, #476]	; (ce98 <__aeabi_dsub+0x628>)
    ccba:	4666      	mov	r6, ip
    ccbc:	401c      	ands	r4, r3
    ccbe:	e65d      	b.n	c97c <__aeabi_dsub+0x10c>
    ccc0:	0025      	movs	r5, r4
    ccc2:	4650      	mov	r0, sl
    ccc4:	4305      	orrs	r5, r0
    ccc6:	2e00      	cmp	r6, #0
    ccc8:	d1cf      	bne.n	cc6a <__aeabi_dsub+0x3fa>
    ccca:	2d00      	cmp	r5, #0
    cccc:	d14f      	bne.n	cd6e <__aeabi_dsub+0x4fe>
    ccce:	000c      	movs	r4, r1
    ccd0:	4314      	orrs	r4, r2
    ccd2:	d100      	bne.n	ccd6 <__aeabi_dsub+0x466>
    ccd4:	e0a0      	b.n	ce18 <__aeabi_dsub+0x5a8>
    ccd6:	000c      	movs	r4, r1
    ccd8:	0017      	movs	r7, r2
    ccda:	4698      	mov	r8, r3
    ccdc:	e64e      	b.n	c97c <__aeabi_dsub+0x10c>
    ccde:	4666      	mov	r6, ip
    cce0:	2400      	movs	r4, #0
    cce2:	2700      	movs	r7, #0
    cce4:	e685      	b.n	c9f2 <__aeabi_dsub+0x182>
    cce6:	001f      	movs	r7, r3
    cce8:	0008      	movs	r0, r1
    ccea:	3f20      	subs	r7, #32
    ccec:	40f8      	lsrs	r0, r7
    ccee:	0007      	movs	r7, r0
    ccf0:	2b20      	cmp	r3, #32
    ccf2:	d100      	bne.n	ccf6 <__aeabi_dsub+0x486>
    ccf4:	e08e      	b.n	ce14 <__aeabi_dsub+0x5a4>
    ccf6:	2040      	movs	r0, #64	; 0x40
    ccf8:	1ac3      	subs	r3, r0, r3
    ccfa:	4099      	lsls	r1, r3
    ccfc:	430a      	orrs	r2, r1
    ccfe:	1e51      	subs	r1, r2, #1
    cd00:	418a      	sbcs	r2, r1
    cd02:	2100      	movs	r1, #0
    cd04:	4317      	orrs	r7, r2
    cd06:	e692      	b.n	ca2e <__aeabi_dsub+0x1be>
    cd08:	2e00      	cmp	r6, #0
    cd0a:	d114      	bne.n	cd36 <__aeabi_dsub+0x4c6>
    cd0c:	0026      	movs	r6, r4
    cd0e:	4650      	mov	r0, sl
    cd10:	4306      	orrs	r6, r0
    cd12:	d062      	beq.n	cdda <__aeabi_dsub+0x56a>
    cd14:	43db      	mvns	r3, r3
    cd16:	2b00      	cmp	r3, #0
    cd18:	d15c      	bne.n	cdd4 <__aeabi_dsub+0x564>
    cd1a:	1887      	adds	r7, r0, r2
    cd1c:	4297      	cmp	r7, r2
    cd1e:	4192      	sbcs	r2, r2
    cd20:	1864      	adds	r4, r4, r1
    cd22:	4252      	negs	r2, r2
    cd24:	18a4      	adds	r4, r4, r2
    cd26:	4666      	mov	r6, ip
    cd28:	e687      	b.n	ca3a <__aeabi_dsub+0x1ca>
    cd2a:	4650      	mov	r0, sl
    cd2c:	4320      	orrs	r0, r4
    cd2e:	1e44      	subs	r4, r0, #1
    cd30:	41a0      	sbcs	r0, r4
    cd32:	2400      	movs	r4, #0
    cd34:	e760      	b.n	cbf8 <__aeabi_dsub+0x388>
    cd36:	4e57      	ldr	r6, [pc, #348]	; (ce94 <__aeabi_dsub+0x624>)
    cd38:	45b4      	cmp	ip, r6
    cd3a:	d04e      	beq.n	cdda <__aeabi_dsub+0x56a>
    cd3c:	2680      	movs	r6, #128	; 0x80
    cd3e:	0436      	lsls	r6, r6, #16
    cd40:	425b      	negs	r3, r3
    cd42:	4334      	orrs	r4, r6
    cd44:	2b38      	cmp	r3, #56	; 0x38
    cd46:	dd00      	ble.n	cd4a <__aeabi_dsub+0x4da>
    cd48:	e07f      	b.n	ce4a <__aeabi_dsub+0x5da>
    cd4a:	2b1f      	cmp	r3, #31
    cd4c:	dd00      	ble.n	cd50 <__aeabi_dsub+0x4e0>
    cd4e:	e08b      	b.n	ce68 <__aeabi_dsub+0x5f8>
    cd50:	2620      	movs	r6, #32
    cd52:	0027      	movs	r7, r4
    cd54:	4650      	mov	r0, sl
    cd56:	1af6      	subs	r6, r6, r3
    cd58:	40b7      	lsls	r7, r6
    cd5a:	40d8      	lsrs	r0, r3
    cd5c:	4307      	orrs	r7, r0
    cd5e:	4650      	mov	r0, sl
    cd60:	40b0      	lsls	r0, r6
    cd62:	1e46      	subs	r6, r0, #1
    cd64:	41b0      	sbcs	r0, r6
    cd66:	4307      	orrs	r7, r0
    cd68:	40dc      	lsrs	r4, r3
    cd6a:	18bf      	adds	r7, r7, r2
    cd6c:	e7d6      	b.n	cd1c <__aeabi_dsub+0x4ac>
    cd6e:	000d      	movs	r5, r1
    cd70:	4315      	orrs	r5, r2
    cd72:	d100      	bne.n	cd76 <__aeabi_dsub+0x506>
    cd74:	e602      	b.n	c97c <__aeabi_dsub+0x10c>
    cd76:	4650      	mov	r0, sl
    cd78:	1a80      	subs	r0, r0, r2
    cd7a:	4582      	cmp	sl, r0
    cd7c:	41bf      	sbcs	r7, r7
    cd7e:	1a65      	subs	r5, r4, r1
    cd80:	427f      	negs	r7, r7
    cd82:	1bed      	subs	r5, r5, r7
    cd84:	4684      	mov	ip, r0
    cd86:	0228      	lsls	r0, r5, #8
    cd88:	d400      	bmi.n	cd8c <__aeabi_dsub+0x51c>
    cd8a:	e68d      	b.n	caa8 <__aeabi_dsub+0x238>
    cd8c:	4650      	mov	r0, sl
    cd8e:	1a17      	subs	r7, r2, r0
    cd90:	42ba      	cmp	r2, r7
    cd92:	4192      	sbcs	r2, r2
    cd94:	1b0c      	subs	r4, r1, r4
    cd96:	4252      	negs	r2, r2
    cd98:	1aa4      	subs	r4, r4, r2
    cd9a:	4698      	mov	r8, r3
    cd9c:	e5ee      	b.n	c97c <__aeabi_dsub+0x10c>
    cd9e:	000d      	movs	r5, r1
    cda0:	4315      	orrs	r5, r2
    cda2:	d100      	bne.n	cda6 <__aeabi_dsub+0x536>
    cda4:	e76b      	b.n	cc7e <__aeabi_dsub+0x40e>
    cda6:	4650      	mov	r0, sl
    cda8:	0767      	lsls	r7, r4, #29
    cdaa:	08c0      	lsrs	r0, r0, #3
    cdac:	4307      	orrs	r7, r0
    cdae:	2080      	movs	r0, #128	; 0x80
    cdb0:	08e4      	lsrs	r4, r4, #3
    cdb2:	0300      	lsls	r0, r0, #12
    cdb4:	4204      	tst	r4, r0
    cdb6:	d007      	beq.n	cdc8 <__aeabi_dsub+0x558>
    cdb8:	08cd      	lsrs	r5, r1, #3
    cdba:	4205      	tst	r5, r0
    cdbc:	d104      	bne.n	cdc8 <__aeabi_dsub+0x558>
    cdbe:	002c      	movs	r4, r5
    cdc0:	4698      	mov	r8, r3
    cdc2:	08d7      	lsrs	r7, r2, #3
    cdc4:	0749      	lsls	r1, r1, #29
    cdc6:	430f      	orrs	r7, r1
    cdc8:	0f7b      	lsrs	r3, r7, #29
    cdca:	00e4      	lsls	r4, r4, #3
    cdcc:	431c      	orrs	r4, r3
    cdce:	00ff      	lsls	r7, r7, #3
    cdd0:	4e30      	ldr	r6, [pc, #192]	; (ce94 <__aeabi_dsub+0x624>)
    cdd2:	e5d3      	b.n	c97c <__aeabi_dsub+0x10c>
    cdd4:	4e2f      	ldr	r6, [pc, #188]	; (ce94 <__aeabi_dsub+0x624>)
    cdd6:	45b4      	cmp	ip, r6
    cdd8:	d1b4      	bne.n	cd44 <__aeabi_dsub+0x4d4>
    cdda:	000c      	movs	r4, r1
    cddc:	0017      	movs	r7, r2
    cdde:	4666      	mov	r6, ip
    cde0:	e5cc      	b.n	c97c <__aeabi_dsub+0x10c>
    cde2:	2700      	movs	r7, #0
    cde4:	2400      	movs	r4, #0
    cde6:	e5e8      	b.n	c9ba <__aeabi_dsub+0x14a>
    cde8:	2b00      	cmp	r3, #0
    cdea:	d039      	beq.n	ce60 <__aeabi_dsub+0x5f0>
    cdec:	000b      	movs	r3, r1
    cdee:	4313      	orrs	r3, r2
    cdf0:	d100      	bne.n	cdf4 <__aeabi_dsub+0x584>
    cdf2:	e744      	b.n	cc7e <__aeabi_dsub+0x40e>
    cdf4:	08c0      	lsrs	r0, r0, #3
    cdf6:	0767      	lsls	r7, r4, #29
    cdf8:	4307      	orrs	r7, r0
    cdfa:	2080      	movs	r0, #128	; 0x80
    cdfc:	08e4      	lsrs	r4, r4, #3
    cdfe:	0300      	lsls	r0, r0, #12
    ce00:	4204      	tst	r4, r0
    ce02:	d0e1      	beq.n	cdc8 <__aeabi_dsub+0x558>
    ce04:	08cb      	lsrs	r3, r1, #3
    ce06:	4203      	tst	r3, r0
    ce08:	d1de      	bne.n	cdc8 <__aeabi_dsub+0x558>
    ce0a:	08d7      	lsrs	r7, r2, #3
    ce0c:	0749      	lsls	r1, r1, #29
    ce0e:	430f      	orrs	r7, r1
    ce10:	001c      	movs	r4, r3
    ce12:	e7d9      	b.n	cdc8 <__aeabi_dsub+0x558>
    ce14:	2100      	movs	r1, #0
    ce16:	e771      	b.n	ccfc <__aeabi_dsub+0x48c>
    ce18:	2500      	movs	r5, #0
    ce1a:	2700      	movs	r7, #0
    ce1c:	e5e9      	b.n	c9f2 <__aeabi_dsub+0x182>
    ce1e:	002e      	movs	r6, r5
    ce20:	0027      	movs	r7, r4
    ce22:	3e20      	subs	r6, #32
    ce24:	40f7      	lsrs	r7, r6
    ce26:	2d20      	cmp	r5, #32
    ce28:	d02f      	beq.n	ce8a <__aeabi_dsub+0x61a>
    ce2a:	2640      	movs	r6, #64	; 0x40
    ce2c:	1b75      	subs	r5, r6, r5
    ce2e:	40ac      	lsls	r4, r5
    ce30:	4650      	mov	r0, sl
    ce32:	4320      	orrs	r0, r4
    ce34:	1e44      	subs	r4, r0, #1
    ce36:	41a0      	sbcs	r0, r4
    ce38:	2400      	movs	r4, #0
    ce3a:	4338      	orrs	r0, r7
    ce3c:	e6dc      	b.n	cbf8 <__aeabi_dsub+0x388>
    ce3e:	2480      	movs	r4, #128	; 0x80
    ce40:	2500      	movs	r5, #0
    ce42:	0324      	lsls	r4, r4, #12
    ce44:	4e13      	ldr	r6, [pc, #76]	; (ce94 <__aeabi_dsub+0x624>)
    ce46:	2700      	movs	r7, #0
    ce48:	e5d3      	b.n	c9f2 <__aeabi_dsub+0x182>
    ce4a:	4650      	mov	r0, sl
    ce4c:	4320      	orrs	r0, r4
    ce4e:	0007      	movs	r7, r0
    ce50:	1e78      	subs	r0, r7, #1
    ce52:	4187      	sbcs	r7, r0
    ce54:	2400      	movs	r4, #0
    ce56:	18bf      	adds	r7, r7, r2
    ce58:	e760      	b.n	cd1c <__aeabi_dsub+0x4ac>
    ce5a:	000c      	movs	r4, r1
    ce5c:	0017      	movs	r7, r2
    ce5e:	e58d      	b.n	c97c <__aeabi_dsub+0x10c>
    ce60:	000c      	movs	r4, r1
    ce62:	0017      	movs	r7, r2
    ce64:	4e0b      	ldr	r6, [pc, #44]	; (ce94 <__aeabi_dsub+0x624>)
    ce66:	e589      	b.n	c97c <__aeabi_dsub+0x10c>
    ce68:	001e      	movs	r6, r3
    ce6a:	0027      	movs	r7, r4
    ce6c:	3e20      	subs	r6, #32
    ce6e:	40f7      	lsrs	r7, r6
    ce70:	2b20      	cmp	r3, #32
    ce72:	d00c      	beq.n	ce8e <__aeabi_dsub+0x61e>
    ce74:	2640      	movs	r6, #64	; 0x40
    ce76:	1af3      	subs	r3, r6, r3
    ce78:	409c      	lsls	r4, r3
    ce7a:	4650      	mov	r0, sl
    ce7c:	4320      	orrs	r0, r4
    ce7e:	1e44      	subs	r4, r0, #1
    ce80:	41a0      	sbcs	r0, r4
    ce82:	4307      	orrs	r7, r0
    ce84:	2400      	movs	r4, #0
    ce86:	18bf      	adds	r7, r7, r2
    ce88:	e748      	b.n	cd1c <__aeabi_dsub+0x4ac>
    ce8a:	2400      	movs	r4, #0
    ce8c:	e7d0      	b.n	ce30 <__aeabi_dsub+0x5c0>
    ce8e:	2400      	movs	r4, #0
    ce90:	e7f3      	b.n	ce7a <__aeabi_dsub+0x60a>
    ce92:	46c0      	nop			; (mov r8, r8)
    ce94:	000007ff 	.word	0x000007ff
    ce98:	ff7fffff 	.word	0xff7fffff

0000ce9c <__aeabi_dcmpun>:
    ce9c:	b570      	push	{r4, r5, r6, lr}
    ce9e:	4e0e      	ldr	r6, [pc, #56]	; (ced8 <__aeabi_dcmpun+0x3c>)
    cea0:	030d      	lsls	r5, r1, #12
    cea2:	031c      	lsls	r4, r3, #12
    cea4:	0049      	lsls	r1, r1, #1
    cea6:	005b      	lsls	r3, r3, #1
    cea8:	0b2d      	lsrs	r5, r5, #12
    ceaa:	0d49      	lsrs	r1, r1, #21
    ceac:	0b24      	lsrs	r4, r4, #12
    ceae:	0d5b      	lsrs	r3, r3, #21
    ceb0:	42b1      	cmp	r1, r6
    ceb2:	d004      	beq.n	cebe <__aeabi_dcmpun+0x22>
    ceb4:	4908      	ldr	r1, [pc, #32]	; (ced8 <__aeabi_dcmpun+0x3c>)
    ceb6:	2000      	movs	r0, #0
    ceb8:	428b      	cmp	r3, r1
    ceba:	d008      	beq.n	cece <__aeabi_dcmpun+0x32>
    cebc:	bd70      	pop	{r4, r5, r6, pc}
    cebe:	4305      	orrs	r5, r0
    cec0:	2001      	movs	r0, #1
    cec2:	2d00      	cmp	r5, #0
    cec4:	d1fa      	bne.n	cebc <__aeabi_dcmpun+0x20>
    cec6:	4904      	ldr	r1, [pc, #16]	; (ced8 <__aeabi_dcmpun+0x3c>)
    cec8:	2000      	movs	r0, #0
    ceca:	428b      	cmp	r3, r1
    cecc:	d1f6      	bne.n	cebc <__aeabi_dcmpun+0x20>
    cece:	4314      	orrs	r4, r2
    ced0:	0020      	movs	r0, r4
    ced2:	1e44      	subs	r4, r0, #1
    ced4:	41a0      	sbcs	r0, r4
    ced6:	e7f1      	b.n	cebc <__aeabi_dcmpun+0x20>
    ced8:	000007ff 	.word	0x000007ff

0000cedc <__aeabi_d2iz>:
    cedc:	b530      	push	{r4, r5, lr}
    cede:	4d13      	ldr	r5, [pc, #76]	; (cf2c <__aeabi_d2iz+0x50>)
    cee0:	030a      	lsls	r2, r1, #12
    cee2:	004b      	lsls	r3, r1, #1
    cee4:	0b12      	lsrs	r2, r2, #12
    cee6:	0d5b      	lsrs	r3, r3, #21
    cee8:	0fc9      	lsrs	r1, r1, #31
    ceea:	2400      	movs	r4, #0
    ceec:	42ab      	cmp	r3, r5
    ceee:	dd10      	ble.n	cf12 <__aeabi_d2iz+0x36>
    cef0:	4c0f      	ldr	r4, [pc, #60]	; (cf30 <__aeabi_d2iz+0x54>)
    cef2:	42a3      	cmp	r3, r4
    cef4:	dc0f      	bgt.n	cf16 <__aeabi_d2iz+0x3a>
    cef6:	2480      	movs	r4, #128	; 0x80
    cef8:	4d0e      	ldr	r5, [pc, #56]	; (cf34 <__aeabi_d2iz+0x58>)
    cefa:	0364      	lsls	r4, r4, #13
    cefc:	4322      	orrs	r2, r4
    cefe:	1aed      	subs	r5, r5, r3
    cf00:	2d1f      	cmp	r5, #31
    cf02:	dd0b      	ble.n	cf1c <__aeabi_d2iz+0x40>
    cf04:	480c      	ldr	r0, [pc, #48]	; (cf38 <__aeabi_d2iz+0x5c>)
    cf06:	1ac3      	subs	r3, r0, r3
    cf08:	40da      	lsrs	r2, r3
    cf0a:	4254      	negs	r4, r2
    cf0c:	2900      	cmp	r1, #0
    cf0e:	d100      	bne.n	cf12 <__aeabi_d2iz+0x36>
    cf10:	0014      	movs	r4, r2
    cf12:	0020      	movs	r0, r4
    cf14:	bd30      	pop	{r4, r5, pc}
    cf16:	4b09      	ldr	r3, [pc, #36]	; (cf3c <__aeabi_d2iz+0x60>)
    cf18:	18cc      	adds	r4, r1, r3
    cf1a:	e7fa      	b.n	cf12 <__aeabi_d2iz+0x36>
    cf1c:	4c08      	ldr	r4, [pc, #32]	; (cf40 <__aeabi_d2iz+0x64>)
    cf1e:	40e8      	lsrs	r0, r5
    cf20:	46a4      	mov	ip, r4
    cf22:	4463      	add	r3, ip
    cf24:	409a      	lsls	r2, r3
    cf26:	4302      	orrs	r2, r0
    cf28:	e7ef      	b.n	cf0a <__aeabi_d2iz+0x2e>
    cf2a:	46c0      	nop			; (mov r8, r8)
    cf2c:	000003fe 	.word	0x000003fe
    cf30:	0000041d 	.word	0x0000041d
    cf34:	00000433 	.word	0x00000433
    cf38:	00000413 	.word	0x00000413
    cf3c:	7fffffff 	.word	0x7fffffff
    cf40:	fffffbed 	.word	0xfffffbed

0000cf44 <__aeabi_i2d>:
    cf44:	b570      	push	{r4, r5, r6, lr}
    cf46:	2800      	cmp	r0, #0
    cf48:	d030      	beq.n	cfac <__aeabi_i2d+0x68>
    cf4a:	17c3      	asrs	r3, r0, #31
    cf4c:	18c4      	adds	r4, r0, r3
    cf4e:	405c      	eors	r4, r3
    cf50:	0fc5      	lsrs	r5, r0, #31
    cf52:	0020      	movs	r0, r4
    cf54:	f000 f8c2 	bl	d0dc <__clzsi2>
    cf58:	4b17      	ldr	r3, [pc, #92]	; (cfb8 <__aeabi_i2d+0x74>)
    cf5a:	4a18      	ldr	r2, [pc, #96]	; (cfbc <__aeabi_i2d+0x78>)
    cf5c:	1a1b      	subs	r3, r3, r0
    cf5e:	1ad2      	subs	r2, r2, r3
    cf60:	2a1f      	cmp	r2, #31
    cf62:	dd18      	ble.n	cf96 <__aeabi_i2d+0x52>
    cf64:	4a16      	ldr	r2, [pc, #88]	; (cfc0 <__aeabi_i2d+0x7c>)
    cf66:	1ad2      	subs	r2, r2, r3
    cf68:	4094      	lsls	r4, r2
    cf6a:	2200      	movs	r2, #0
    cf6c:	0324      	lsls	r4, r4, #12
    cf6e:	055b      	lsls	r3, r3, #21
    cf70:	0b24      	lsrs	r4, r4, #12
    cf72:	0d5b      	lsrs	r3, r3, #21
    cf74:	2100      	movs	r1, #0
    cf76:	0010      	movs	r0, r2
    cf78:	0324      	lsls	r4, r4, #12
    cf7a:	0d0a      	lsrs	r2, r1, #20
    cf7c:	0b24      	lsrs	r4, r4, #12
    cf7e:	0512      	lsls	r2, r2, #20
    cf80:	4322      	orrs	r2, r4
    cf82:	4c10      	ldr	r4, [pc, #64]	; (cfc4 <__aeabi_i2d+0x80>)
    cf84:	051b      	lsls	r3, r3, #20
    cf86:	4022      	ands	r2, r4
    cf88:	4313      	orrs	r3, r2
    cf8a:	005b      	lsls	r3, r3, #1
    cf8c:	07ed      	lsls	r5, r5, #31
    cf8e:	085b      	lsrs	r3, r3, #1
    cf90:	432b      	orrs	r3, r5
    cf92:	0019      	movs	r1, r3
    cf94:	bd70      	pop	{r4, r5, r6, pc}
    cf96:	0021      	movs	r1, r4
    cf98:	4091      	lsls	r1, r2
    cf9a:	000a      	movs	r2, r1
    cf9c:	210b      	movs	r1, #11
    cf9e:	1a08      	subs	r0, r1, r0
    cfa0:	40c4      	lsrs	r4, r0
    cfa2:	055b      	lsls	r3, r3, #21
    cfa4:	0324      	lsls	r4, r4, #12
    cfa6:	0b24      	lsrs	r4, r4, #12
    cfa8:	0d5b      	lsrs	r3, r3, #21
    cfaa:	e7e3      	b.n	cf74 <__aeabi_i2d+0x30>
    cfac:	2500      	movs	r5, #0
    cfae:	2300      	movs	r3, #0
    cfb0:	2400      	movs	r4, #0
    cfb2:	2200      	movs	r2, #0
    cfb4:	e7de      	b.n	cf74 <__aeabi_i2d+0x30>
    cfb6:	46c0      	nop			; (mov r8, r8)
    cfb8:	0000041e 	.word	0x0000041e
    cfbc:	00000433 	.word	0x00000433
    cfc0:	00000413 	.word	0x00000413
    cfc4:	800fffff 	.word	0x800fffff

0000cfc8 <__aeabi_ui2d>:
    cfc8:	b510      	push	{r4, lr}
    cfca:	1e04      	subs	r4, r0, #0
    cfcc:	d028      	beq.n	d020 <__aeabi_ui2d+0x58>
    cfce:	f000 f885 	bl	d0dc <__clzsi2>
    cfd2:	4b15      	ldr	r3, [pc, #84]	; (d028 <__aeabi_ui2d+0x60>)
    cfd4:	4a15      	ldr	r2, [pc, #84]	; (d02c <__aeabi_ui2d+0x64>)
    cfd6:	1a1b      	subs	r3, r3, r0
    cfd8:	1ad2      	subs	r2, r2, r3
    cfda:	2a1f      	cmp	r2, #31
    cfdc:	dd15      	ble.n	d00a <__aeabi_ui2d+0x42>
    cfde:	4a14      	ldr	r2, [pc, #80]	; (d030 <__aeabi_ui2d+0x68>)
    cfe0:	1ad2      	subs	r2, r2, r3
    cfe2:	4094      	lsls	r4, r2
    cfe4:	2200      	movs	r2, #0
    cfe6:	0324      	lsls	r4, r4, #12
    cfe8:	055b      	lsls	r3, r3, #21
    cfea:	0b24      	lsrs	r4, r4, #12
    cfec:	0d5b      	lsrs	r3, r3, #21
    cfee:	2100      	movs	r1, #0
    cff0:	0010      	movs	r0, r2
    cff2:	0324      	lsls	r4, r4, #12
    cff4:	0d0a      	lsrs	r2, r1, #20
    cff6:	0b24      	lsrs	r4, r4, #12
    cff8:	0512      	lsls	r2, r2, #20
    cffa:	4322      	orrs	r2, r4
    cffc:	4c0d      	ldr	r4, [pc, #52]	; (d034 <__aeabi_ui2d+0x6c>)
    cffe:	051b      	lsls	r3, r3, #20
    d000:	4022      	ands	r2, r4
    d002:	4313      	orrs	r3, r2
    d004:	005b      	lsls	r3, r3, #1
    d006:	0859      	lsrs	r1, r3, #1
    d008:	bd10      	pop	{r4, pc}
    d00a:	0021      	movs	r1, r4
    d00c:	4091      	lsls	r1, r2
    d00e:	000a      	movs	r2, r1
    d010:	210b      	movs	r1, #11
    d012:	1a08      	subs	r0, r1, r0
    d014:	40c4      	lsrs	r4, r0
    d016:	055b      	lsls	r3, r3, #21
    d018:	0324      	lsls	r4, r4, #12
    d01a:	0b24      	lsrs	r4, r4, #12
    d01c:	0d5b      	lsrs	r3, r3, #21
    d01e:	e7e6      	b.n	cfee <__aeabi_ui2d+0x26>
    d020:	2300      	movs	r3, #0
    d022:	2400      	movs	r4, #0
    d024:	2200      	movs	r2, #0
    d026:	e7e2      	b.n	cfee <__aeabi_ui2d+0x26>
    d028:	0000041e 	.word	0x0000041e
    d02c:	00000433 	.word	0x00000433
    d030:	00000413 	.word	0x00000413
    d034:	800fffff 	.word	0x800fffff

0000d038 <__aeabi_f2d>:
    d038:	0041      	lsls	r1, r0, #1
    d03a:	0e09      	lsrs	r1, r1, #24
    d03c:	1c4b      	adds	r3, r1, #1
    d03e:	b570      	push	{r4, r5, r6, lr}
    d040:	b2db      	uxtb	r3, r3
    d042:	0246      	lsls	r6, r0, #9
    d044:	0a75      	lsrs	r5, r6, #9
    d046:	0fc4      	lsrs	r4, r0, #31
    d048:	2b01      	cmp	r3, #1
    d04a:	dd14      	ble.n	d076 <__aeabi_f2d+0x3e>
    d04c:	23e0      	movs	r3, #224	; 0xe0
    d04e:	009b      	lsls	r3, r3, #2
    d050:	076d      	lsls	r5, r5, #29
    d052:	0b36      	lsrs	r6, r6, #12
    d054:	18cb      	adds	r3, r1, r3
    d056:	2100      	movs	r1, #0
    d058:	0d0a      	lsrs	r2, r1, #20
    d05a:	0028      	movs	r0, r5
    d05c:	0512      	lsls	r2, r2, #20
    d05e:	4d1c      	ldr	r5, [pc, #112]	; (d0d0 <__aeabi_f2d+0x98>)
    d060:	4332      	orrs	r2, r6
    d062:	055b      	lsls	r3, r3, #21
    d064:	402a      	ands	r2, r5
    d066:	085b      	lsrs	r3, r3, #1
    d068:	4313      	orrs	r3, r2
    d06a:	005b      	lsls	r3, r3, #1
    d06c:	07e4      	lsls	r4, r4, #31
    d06e:	085b      	lsrs	r3, r3, #1
    d070:	4323      	orrs	r3, r4
    d072:	0019      	movs	r1, r3
    d074:	bd70      	pop	{r4, r5, r6, pc}
    d076:	2900      	cmp	r1, #0
    d078:	d114      	bne.n	d0a4 <__aeabi_f2d+0x6c>
    d07a:	2d00      	cmp	r5, #0
    d07c:	d01e      	beq.n	d0bc <__aeabi_f2d+0x84>
    d07e:	0028      	movs	r0, r5
    d080:	f000 f82c 	bl	d0dc <__clzsi2>
    d084:	280a      	cmp	r0, #10
    d086:	dc1c      	bgt.n	d0c2 <__aeabi_f2d+0x8a>
    d088:	230b      	movs	r3, #11
    d08a:	002a      	movs	r2, r5
    d08c:	1a1b      	subs	r3, r3, r0
    d08e:	40da      	lsrs	r2, r3
    d090:	0003      	movs	r3, r0
    d092:	3315      	adds	r3, #21
    d094:	409d      	lsls	r5, r3
    d096:	4b0f      	ldr	r3, [pc, #60]	; (d0d4 <__aeabi_f2d+0x9c>)
    d098:	0312      	lsls	r2, r2, #12
    d09a:	1a1b      	subs	r3, r3, r0
    d09c:	055b      	lsls	r3, r3, #21
    d09e:	0b16      	lsrs	r6, r2, #12
    d0a0:	0d5b      	lsrs	r3, r3, #21
    d0a2:	e7d8      	b.n	d056 <__aeabi_f2d+0x1e>
    d0a4:	2d00      	cmp	r5, #0
    d0a6:	d006      	beq.n	d0b6 <__aeabi_f2d+0x7e>
    d0a8:	0b32      	lsrs	r2, r6, #12
    d0aa:	2680      	movs	r6, #128	; 0x80
    d0ac:	0336      	lsls	r6, r6, #12
    d0ae:	076d      	lsls	r5, r5, #29
    d0b0:	4316      	orrs	r6, r2
    d0b2:	4b09      	ldr	r3, [pc, #36]	; (d0d8 <__aeabi_f2d+0xa0>)
    d0b4:	e7cf      	b.n	d056 <__aeabi_f2d+0x1e>
    d0b6:	4b08      	ldr	r3, [pc, #32]	; (d0d8 <__aeabi_f2d+0xa0>)
    d0b8:	2600      	movs	r6, #0
    d0ba:	e7cc      	b.n	d056 <__aeabi_f2d+0x1e>
    d0bc:	2300      	movs	r3, #0
    d0be:	2600      	movs	r6, #0
    d0c0:	e7c9      	b.n	d056 <__aeabi_f2d+0x1e>
    d0c2:	0003      	movs	r3, r0
    d0c4:	002a      	movs	r2, r5
    d0c6:	3b0b      	subs	r3, #11
    d0c8:	409a      	lsls	r2, r3
    d0ca:	2500      	movs	r5, #0
    d0cc:	e7e3      	b.n	d096 <__aeabi_f2d+0x5e>
    d0ce:	46c0      	nop			; (mov r8, r8)
    d0d0:	800fffff 	.word	0x800fffff
    d0d4:	00000389 	.word	0x00000389
    d0d8:	000007ff 	.word	0x000007ff

0000d0dc <__clzsi2>:
    d0dc:	211c      	movs	r1, #28
    d0de:	2301      	movs	r3, #1
    d0e0:	041b      	lsls	r3, r3, #16
    d0e2:	4298      	cmp	r0, r3
    d0e4:	d301      	bcc.n	d0ea <__clzsi2+0xe>
    d0e6:	0c00      	lsrs	r0, r0, #16
    d0e8:	3910      	subs	r1, #16
    d0ea:	0a1b      	lsrs	r3, r3, #8
    d0ec:	4298      	cmp	r0, r3
    d0ee:	d301      	bcc.n	d0f4 <__clzsi2+0x18>
    d0f0:	0a00      	lsrs	r0, r0, #8
    d0f2:	3908      	subs	r1, #8
    d0f4:	091b      	lsrs	r3, r3, #4
    d0f6:	4298      	cmp	r0, r3
    d0f8:	d301      	bcc.n	d0fe <__clzsi2+0x22>
    d0fa:	0900      	lsrs	r0, r0, #4
    d0fc:	3904      	subs	r1, #4
    d0fe:	a202      	add	r2, pc, #8	; (adr r2, d108 <__clzsi2+0x2c>)
    d100:	5c10      	ldrb	r0, [r2, r0]
    d102:	1840      	adds	r0, r0, r1
    d104:	4770      	bx	lr
    d106:	46c0      	nop			; (mov r8, r8)
    d108:	02020304 	.word	0x02020304
    d10c:	01010101 	.word	0x01010101
	...

0000d118 <__clzdi2>:
    d118:	b510      	push	{r4, lr}
    d11a:	2900      	cmp	r1, #0
    d11c:	d103      	bne.n	d126 <__clzdi2+0xe>
    d11e:	f7ff ffdd 	bl	d0dc <__clzsi2>
    d122:	3020      	adds	r0, #32
    d124:	e002      	b.n	d12c <__clzdi2+0x14>
    d126:	1c08      	adds	r0, r1, #0
    d128:	f7ff ffd8 	bl	d0dc <__clzsi2>
    d12c:	bd10      	pop	{r4, pc}
    d12e:	46c0      	nop			; (mov r8, r8)

0000d130 <__cxa_atexit>:
    d130:	b510      	push	{r4, lr}
    d132:	0013      	movs	r3, r2
    d134:	000a      	movs	r2, r1
    d136:	0001      	movs	r1, r0
    d138:	2002      	movs	r0, #2
    d13a:	f001 fe49 	bl	edd0 <__register_exitproc>
    d13e:	bd10      	pop	{r4, pc}

0000d140 <__errno>:
    d140:	4b01      	ldr	r3, [pc, #4]	; (d148 <__errno+0x8>)
    d142:	6818      	ldr	r0, [r3, #0]
    d144:	4770      	bx	lr
    d146:	46c0      	nop			; (mov r8, r8)
    d148:	20000084 	.word	0x20000084

0000d14c <__libc_init_array>:
    d14c:	b570      	push	{r4, r5, r6, lr}
    d14e:	4e0d      	ldr	r6, [pc, #52]	; (d184 <__libc_init_array+0x38>)
    d150:	4d0d      	ldr	r5, [pc, #52]	; (d188 <__libc_init_array+0x3c>)
    d152:	2400      	movs	r4, #0
    d154:	1bad      	subs	r5, r5, r6
    d156:	10ad      	asrs	r5, r5, #2
    d158:	d005      	beq.n	d166 <__libc_init_array+0x1a>
    d15a:	00a3      	lsls	r3, r4, #2
    d15c:	58f3      	ldr	r3, [r6, r3]
    d15e:	3401      	adds	r4, #1
    d160:	4798      	blx	r3
    d162:	42a5      	cmp	r5, r4
    d164:	d1f9      	bne.n	d15a <__libc_init_array+0xe>
    d166:	f005 fb77 	bl	12858 <_init>
    d16a:	4e08      	ldr	r6, [pc, #32]	; (d18c <__libc_init_array+0x40>)
    d16c:	4d08      	ldr	r5, [pc, #32]	; (d190 <__libc_init_array+0x44>)
    d16e:	2400      	movs	r4, #0
    d170:	1bad      	subs	r5, r5, r6
    d172:	10ad      	asrs	r5, r5, #2
    d174:	d005      	beq.n	d182 <__libc_init_array+0x36>
    d176:	00a3      	lsls	r3, r4, #2
    d178:	58f3      	ldr	r3, [r6, r3]
    d17a:	3401      	adds	r4, #1
    d17c:	4798      	blx	r3
    d17e:	42a5      	cmp	r5, r4
    d180:	d1f9      	bne.n	d176 <__libc_init_array+0x2a>
    d182:	bd70      	pop	{r4, r5, r6, pc}
    d184:	00012864 	.word	0x00012864
    d188:	00012864 	.word	0x00012864
    d18c:	00012864 	.word	0x00012864
    d190:	00012874 	.word	0x00012874

0000d194 <memcpy>:
    d194:	b5f0      	push	{r4, r5, r6, r7, lr}
    d196:	0005      	movs	r5, r0
    d198:	2a0f      	cmp	r2, #15
    d19a:	d92f      	bls.n	d1fc <memcpy+0x68>
    d19c:	000b      	movs	r3, r1
    d19e:	4303      	orrs	r3, r0
    d1a0:	079b      	lsls	r3, r3, #30
    d1a2:	d134      	bne.n	d20e <memcpy+0x7a>
    d1a4:	0016      	movs	r6, r2
    d1a6:	000c      	movs	r4, r1
    d1a8:	0003      	movs	r3, r0
    d1aa:	3e10      	subs	r6, #16
    d1ac:	0935      	lsrs	r5, r6, #4
    d1ae:	3501      	adds	r5, #1
    d1b0:	012d      	lsls	r5, r5, #4
    d1b2:	1945      	adds	r5, r0, r5
    d1b4:	6827      	ldr	r7, [r4, #0]
    d1b6:	601f      	str	r7, [r3, #0]
    d1b8:	6867      	ldr	r7, [r4, #4]
    d1ba:	605f      	str	r7, [r3, #4]
    d1bc:	68a7      	ldr	r7, [r4, #8]
    d1be:	609f      	str	r7, [r3, #8]
    d1c0:	68e7      	ldr	r7, [r4, #12]
    d1c2:	3410      	adds	r4, #16
    d1c4:	60df      	str	r7, [r3, #12]
    d1c6:	3310      	adds	r3, #16
    d1c8:	429d      	cmp	r5, r3
    d1ca:	d1f3      	bne.n	d1b4 <memcpy+0x20>
    d1cc:	230f      	movs	r3, #15
    d1ce:	439e      	bics	r6, r3
    d1d0:	3610      	adds	r6, #16
    d1d2:	1985      	adds	r5, r0, r6
    d1d4:	1989      	adds	r1, r1, r6
    d1d6:	4013      	ands	r3, r2
    d1d8:	2b03      	cmp	r3, #3
    d1da:	d91a      	bls.n	d212 <memcpy+0x7e>
    d1dc:	1f1e      	subs	r6, r3, #4
    d1de:	2300      	movs	r3, #0
    d1e0:	08b4      	lsrs	r4, r6, #2
    d1e2:	3401      	adds	r4, #1
    d1e4:	00a4      	lsls	r4, r4, #2
    d1e6:	58cf      	ldr	r7, [r1, r3]
    d1e8:	50ef      	str	r7, [r5, r3]
    d1ea:	3304      	adds	r3, #4
    d1ec:	42a3      	cmp	r3, r4
    d1ee:	d1fa      	bne.n	d1e6 <memcpy+0x52>
    d1f0:	2403      	movs	r4, #3
    d1f2:	43a6      	bics	r6, r4
    d1f4:	1d33      	adds	r3, r6, #4
    d1f6:	4022      	ands	r2, r4
    d1f8:	18c9      	adds	r1, r1, r3
    d1fa:	18ed      	adds	r5, r5, r3
    d1fc:	2a00      	cmp	r2, #0
    d1fe:	d005      	beq.n	d20c <memcpy+0x78>
    d200:	2300      	movs	r3, #0
    d202:	5ccc      	ldrb	r4, [r1, r3]
    d204:	54ec      	strb	r4, [r5, r3]
    d206:	3301      	adds	r3, #1
    d208:	4293      	cmp	r3, r2
    d20a:	d1fa      	bne.n	d202 <memcpy+0x6e>
    d20c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d20e:	0005      	movs	r5, r0
    d210:	e7f6      	b.n	d200 <memcpy+0x6c>
    d212:	001a      	movs	r2, r3
    d214:	e7f2      	b.n	d1fc <memcpy+0x68>
    d216:	46c0      	nop			; (mov r8, r8)

0000d218 <memset>:
    d218:	b5f0      	push	{r4, r5, r6, r7, lr}
    d21a:	0783      	lsls	r3, r0, #30
    d21c:	d043      	beq.n	d2a6 <memset+0x8e>
    d21e:	1e54      	subs	r4, r2, #1
    d220:	2a00      	cmp	r2, #0
    d222:	d03f      	beq.n	d2a4 <memset+0x8c>
    d224:	b2ce      	uxtb	r6, r1
    d226:	0002      	movs	r2, r0
    d228:	2503      	movs	r5, #3
    d22a:	e002      	b.n	d232 <memset+0x1a>
    d22c:	001a      	movs	r2, r3
    d22e:	3c01      	subs	r4, #1
    d230:	d338      	bcc.n	d2a4 <memset+0x8c>
    d232:	1c53      	adds	r3, r2, #1
    d234:	7016      	strb	r6, [r2, #0]
    d236:	422b      	tst	r3, r5
    d238:	d1f8      	bne.n	d22c <memset+0x14>
    d23a:	2c03      	cmp	r4, #3
    d23c:	d92a      	bls.n	d294 <memset+0x7c>
    d23e:	22ff      	movs	r2, #255	; 0xff
    d240:	400a      	ands	r2, r1
    d242:	0215      	lsls	r5, r2, #8
    d244:	4315      	orrs	r5, r2
    d246:	042a      	lsls	r2, r5, #16
    d248:	4315      	orrs	r5, r2
    d24a:	2c0f      	cmp	r4, #15
    d24c:	d914      	bls.n	d278 <memset+0x60>
    d24e:	0027      	movs	r7, r4
    d250:	001a      	movs	r2, r3
    d252:	3f10      	subs	r7, #16
    d254:	093e      	lsrs	r6, r7, #4
    d256:	3601      	adds	r6, #1
    d258:	0136      	lsls	r6, r6, #4
    d25a:	199e      	adds	r6, r3, r6
    d25c:	6015      	str	r5, [r2, #0]
    d25e:	6055      	str	r5, [r2, #4]
    d260:	6095      	str	r5, [r2, #8]
    d262:	60d5      	str	r5, [r2, #12]
    d264:	3210      	adds	r2, #16
    d266:	4296      	cmp	r6, r2
    d268:	d1f8      	bne.n	d25c <memset+0x44>
    d26a:	220f      	movs	r2, #15
    d26c:	4397      	bics	r7, r2
    d26e:	3710      	adds	r7, #16
    d270:	19db      	adds	r3, r3, r7
    d272:	4014      	ands	r4, r2
    d274:	2c03      	cmp	r4, #3
    d276:	d90d      	bls.n	d294 <memset+0x7c>
    d278:	001a      	movs	r2, r3
    d27a:	1f27      	subs	r7, r4, #4
    d27c:	08be      	lsrs	r6, r7, #2
    d27e:	3601      	adds	r6, #1
    d280:	00b6      	lsls	r6, r6, #2
    d282:	199e      	adds	r6, r3, r6
    d284:	c220      	stmia	r2!, {r5}
    d286:	42b2      	cmp	r2, r6
    d288:	d1fc      	bne.n	d284 <memset+0x6c>
    d28a:	2203      	movs	r2, #3
    d28c:	4397      	bics	r7, r2
    d28e:	3704      	adds	r7, #4
    d290:	19db      	adds	r3, r3, r7
    d292:	4014      	ands	r4, r2
    d294:	2c00      	cmp	r4, #0
    d296:	d005      	beq.n	d2a4 <memset+0x8c>
    d298:	b2c9      	uxtb	r1, r1
    d29a:	191c      	adds	r4, r3, r4
    d29c:	7019      	strb	r1, [r3, #0]
    d29e:	3301      	adds	r3, #1
    d2a0:	429c      	cmp	r4, r3
    d2a2:	d1fb      	bne.n	d29c <memset+0x84>
    d2a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d2a6:	0014      	movs	r4, r2
    d2a8:	0003      	movs	r3, r0
    d2aa:	e7c6      	b.n	d23a <memset+0x22>

0000d2ac <printf>:
    d2ac:	b40f      	push	{r0, r1, r2, r3}
    d2ae:	b500      	push	{lr}
    d2b0:	4906      	ldr	r1, [pc, #24]	; (d2cc <printf+0x20>)
    d2b2:	b083      	sub	sp, #12
    d2b4:	ab04      	add	r3, sp, #16
    d2b6:	6808      	ldr	r0, [r1, #0]
    d2b8:	cb04      	ldmia	r3!, {r2}
    d2ba:	6881      	ldr	r1, [r0, #8]
    d2bc:	9301      	str	r3, [sp, #4]
    d2be:	f000 f96d 	bl	d59c <_vfprintf_r>
    d2c2:	b003      	add	sp, #12
    d2c4:	bc08      	pop	{r3}
    d2c6:	b004      	add	sp, #16
    d2c8:	4718      	bx	r3
    d2ca:	46c0      	nop			; (mov r8, r8)
    d2cc:	20000084 	.word	0x20000084

0000d2d0 <_puts_r>:
    d2d0:	b530      	push	{r4, r5, lr}
    d2d2:	0004      	movs	r4, r0
    d2d4:	b089      	sub	sp, #36	; 0x24
    d2d6:	0008      	movs	r0, r1
    d2d8:	000d      	movs	r5, r1
    d2da:	f000 f92d 	bl	d538 <strlen>
    d2de:	ab04      	add	r3, sp, #16
    d2e0:	4a21      	ldr	r2, [pc, #132]	; (d368 <_puts_r+0x98>)
    d2e2:	9301      	str	r3, [sp, #4]
    d2e4:	2302      	movs	r3, #2
    d2e6:	9206      	str	r2, [sp, #24]
    d2e8:	2201      	movs	r2, #1
    d2ea:	9302      	str	r3, [sp, #8]
    d2ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    d2ee:	9005      	str	r0, [sp, #20]
    d2f0:	3001      	adds	r0, #1
    d2f2:	9504      	str	r5, [sp, #16]
    d2f4:	9207      	str	r2, [sp, #28]
    d2f6:	9003      	str	r0, [sp, #12]
    d2f8:	68a5      	ldr	r5, [r4, #8]
    d2fa:	2b00      	cmp	r3, #0
    d2fc:	d02f      	beq.n	d35e <_puts_r+0x8e>
    d2fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    d300:	07db      	lsls	r3, r3, #31
    d302:	d424      	bmi.n	d34e <_puts_r+0x7e>
    d304:	230c      	movs	r3, #12
    d306:	5eea      	ldrsh	r2, [r5, r3]
    d308:	b291      	uxth	r1, r2
    d30a:	058b      	lsls	r3, r1, #22
    d30c:	d51c      	bpl.n	d348 <_puts_r+0x78>
    d30e:	2380      	movs	r3, #128	; 0x80
    d310:	019b      	lsls	r3, r3, #6
    d312:	4219      	tst	r1, r3
    d314:	d105      	bne.n	d322 <_puts_r+0x52>
    d316:	4313      	orrs	r3, r2
    d318:	81ab      	strh	r3, [r5, #12]
    d31a:	6e6a      	ldr	r2, [r5, #100]	; 0x64
    d31c:	4b13      	ldr	r3, [pc, #76]	; (d36c <_puts_r+0x9c>)
    d31e:	4013      	ands	r3, r2
    d320:	666b      	str	r3, [r5, #100]	; 0x64
    d322:	0020      	movs	r0, r4
    d324:	aa01      	add	r2, sp, #4
    d326:	0029      	movs	r1, r5
    d328:	f003 f8d8 	bl	104dc <__sfvwrite_r>
    d32c:	1e44      	subs	r4, r0, #1
    d32e:	41a0      	sbcs	r0, r4
    d330:	4244      	negs	r4, r0
    d332:	200a      	movs	r0, #10
    d334:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    d336:	4304      	orrs	r4, r0
    d338:	07db      	lsls	r3, r3, #31
    d33a:	d402      	bmi.n	d342 <_puts_r+0x72>
    d33c:	89ab      	ldrh	r3, [r5, #12]
    d33e:	059b      	lsls	r3, r3, #22
    d340:	d509      	bpl.n	d356 <_puts_r+0x86>
    d342:	0020      	movs	r0, r4
    d344:	b009      	add	sp, #36	; 0x24
    d346:	bd30      	pop	{r4, r5, pc}
    d348:	6da8      	ldr	r0, [r5, #88]	; 0x58
    d34a:	f003 fa81 	bl	10850 <__retarget_lock_acquire_recursive>
    d34e:	230c      	movs	r3, #12
    d350:	5eea      	ldrsh	r2, [r5, r3]
    d352:	b291      	uxth	r1, r2
    d354:	e7db      	b.n	d30e <_puts_r+0x3e>
    d356:	6da8      	ldr	r0, [r5, #88]	; 0x58
    d358:	f003 fa7c 	bl	10854 <__retarget_lock_release_recursive>
    d35c:	e7f1      	b.n	d342 <_puts_r+0x72>
    d35e:	0020      	movs	r0, r4
    d360:	f002 ff34 	bl	101cc <__sinit>
    d364:	e7cb      	b.n	d2fe <_puts_r+0x2e>
    d366:	46c0      	nop			; (mov r8, r8)
    d368:	0001246c 	.word	0x0001246c
    d36c:	ffffdfff 	.word	0xffffdfff

0000d370 <puts>:
    d370:	b510      	push	{r4, lr}
    d372:	4b03      	ldr	r3, [pc, #12]	; (d380 <puts+0x10>)
    d374:	0001      	movs	r1, r0
    d376:	6818      	ldr	r0, [r3, #0]
    d378:	f7ff ffaa 	bl	d2d0 <_puts_r>
    d37c:	bd10      	pop	{r4, pc}
    d37e:	46c0      	nop			; (mov r8, r8)
    d380:	20000084 	.word	0x20000084

0000d384 <setbuf>:
    d384:	424a      	negs	r2, r1
    d386:	414a      	adcs	r2, r1
    d388:	2380      	movs	r3, #128	; 0x80
    d38a:	b510      	push	{r4, lr}
    d38c:	0052      	lsls	r2, r2, #1
    d38e:	00db      	lsls	r3, r3, #3
    d390:	f000 f802 	bl	d398 <setvbuf>
    d394:	bd10      	pop	{r4, pc}
    d396:	46c0      	nop			; (mov r8, r8)

0000d398 <setvbuf>:
    d398:	b5f0      	push	{r4, r5, r6, r7, lr}
    d39a:	4647      	mov	r7, r8
    d39c:	46ce      	mov	lr, r9
    d39e:	b580      	push	{r7, lr}
    d3a0:	001f      	movs	r7, r3
    d3a2:	4b63      	ldr	r3, [pc, #396]	; (d530 <setvbuf+0x198>)
    d3a4:	b083      	sub	sp, #12
    d3a6:	681d      	ldr	r5, [r3, #0]
    d3a8:	0004      	movs	r4, r0
    d3aa:	4688      	mov	r8, r1
    d3ac:	0016      	movs	r6, r2
    d3ae:	2d00      	cmp	r5, #0
    d3b0:	d002      	beq.n	d3b8 <setvbuf+0x20>
    d3b2:	6bab      	ldr	r3, [r5, #56]	; 0x38
    d3b4:	2b00      	cmp	r3, #0
    d3b6:	d066      	beq.n	d486 <setvbuf+0xee>
    d3b8:	2e02      	cmp	r6, #2
    d3ba:	d005      	beq.n	d3c8 <setvbuf+0x30>
    d3bc:	2e01      	cmp	r6, #1
    d3be:	d900      	bls.n	d3c2 <setvbuf+0x2a>
    d3c0:	e0a1      	b.n	d506 <setvbuf+0x16e>
    d3c2:	2f00      	cmp	r7, #0
    d3c4:	da00      	bge.n	d3c8 <setvbuf+0x30>
    d3c6:	e09e      	b.n	d506 <setvbuf+0x16e>
    d3c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
    d3ca:	07db      	lsls	r3, r3, #31
    d3cc:	d533      	bpl.n	d436 <setvbuf+0x9e>
    d3ce:	0021      	movs	r1, r4
    d3d0:	0028      	movs	r0, r5
    d3d2:	f002 fea1 	bl	10118 <_fflush_r>
    d3d6:	6b21      	ldr	r1, [r4, #48]	; 0x30
    d3d8:	2900      	cmp	r1, #0
    d3da:	d008      	beq.n	d3ee <setvbuf+0x56>
    d3dc:	0023      	movs	r3, r4
    d3de:	3340      	adds	r3, #64	; 0x40
    d3e0:	4299      	cmp	r1, r3
    d3e2:	d002      	beq.n	d3ea <setvbuf+0x52>
    d3e4:	0028      	movs	r0, r5
    d3e6:	f002 ff9b 	bl	10320 <_free_r>
    d3ea:	2300      	movs	r3, #0
    d3ec:	6323      	str	r3, [r4, #48]	; 0x30
    d3ee:	2300      	movs	r3, #0
    d3f0:	61a3      	str	r3, [r4, #24]
    d3f2:	6063      	str	r3, [r4, #4]
    d3f4:	220c      	movs	r2, #12
    d3f6:	5ea3      	ldrsh	r3, [r4, r2]
    d3f8:	061a      	lsls	r2, r3, #24
    d3fa:	d43d      	bmi.n	d478 <setvbuf+0xe0>
    d3fc:	4a4d      	ldr	r2, [pc, #308]	; (d534 <setvbuf+0x19c>)
    d3fe:	4013      	ands	r3, r2
    d400:	81a3      	strh	r3, [r4, #12]
    d402:	2e02      	cmp	r6, #2
    d404:	d01e      	beq.n	d444 <setvbuf+0xac>
    d406:	ab01      	add	r3, sp, #4
    d408:	466a      	mov	r2, sp
    d40a:	0021      	movs	r1, r4
    d40c:	0028      	movs	r0, r5
    d40e:	f003 fa23 	bl	10858 <__swhatbuf_r>
    d412:	89a3      	ldrh	r3, [r4, #12]
    d414:	4318      	orrs	r0, r3
    d416:	81a0      	strh	r0, [r4, #12]
    d418:	2f00      	cmp	r7, #0
    d41a:	d138      	bne.n	d48e <setvbuf+0xf6>
    d41c:	9f00      	ldr	r7, [sp, #0]
    d41e:	0038      	movs	r0, r7
    d420:	f003 fa92 	bl	10948 <malloc>
    d424:	4680      	mov	r8, r0
    d426:	2800      	cmp	r0, #0
    d428:	d100      	bne.n	d42c <setvbuf+0x94>
    d42a:	e06f      	b.n	d50c <setvbuf+0x174>
    d42c:	2280      	movs	r2, #128	; 0x80
    d42e:	89a3      	ldrh	r3, [r4, #12]
    d430:	4313      	orrs	r3, r2
    d432:	81a3      	strh	r3, [r4, #12]
    d434:	e02e      	b.n	d494 <setvbuf+0xfc>
    d436:	89a3      	ldrh	r3, [r4, #12]
    d438:	059b      	lsls	r3, r3, #22
    d43a:	d4c8      	bmi.n	d3ce <setvbuf+0x36>
    d43c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    d43e:	f003 fa07 	bl	10850 <__retarget_lock_acquire_recursive>
    d442:	e7c4      	b.n	d3ce <setvbuf+0x36>
    d444:	2500      	movs	r5, #0
    d446:	2202      	movs	r2, #2
    d448:	4313      	orrs	r3, r2
    d44a:	2200      	movs	r2, #0
    d44c:	60a2      	str	r2, [r4, #8]
    d44e:	0022      	movs	r2, r4
    d450:	3243      	adds	r2, #67	; 0x43
    d452:	6022      	str	r2, [r4, #0]
    d454:	6122      	str	r2, [r4, #16]
    d456:	2201      	movs	r2, #1
    d458:	6e61      	ldr	r1, [r4, #100]	; 0x64
    d45a:	81a3      	strh	r3, [r4, #12]
    d45c:	6162      	str	r2, [r4, #20]
    d45e:	4211      	tst	r1, r2
    d460:	d104      	bne.n	d46c <setvbuf+0xd4>
    d462:	059b      	lsls	r3, r3, #22
    d464:	d402      	bmi.n	d46c <setvbuf+0xd4>
    d466:	6da0      	ldr	r0, [r4, #88]	; 0x58
    d468:	f003 f9f4 	bl	10854 <__retarget_lock_release_recursive>
    d46c:	0028      	movs	r0, r5
    d46e:	b003      	add	sp, #12
    d470:	bc0c      	pop	{r2, r3}
    d472:	4690      	mov	r8, r2
    d474:	4699      	mov	r9, r3
    d476:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d478:	6921      	ldr	r1, [r4, #16]
    d47a:	0028      	movs	r0, r5
    d47c:	f002 ff50 	bl	10320 <_free_r>
    d480:	220c      	movs	r2, #12
    d482:	5ea3      	ldrsh	r3, [r4, r2]
    d484:	e7ba      	b.n	d3fc <setvbuf+0x64>
    d486:	0028      	movs	r0, r5
    d488:	f002 fea0 	bl	101cc <__sinit>
    d48c:	e794      	b.n	d3b8 <setvbuf+0x20>
    d48e:	4643      	mov	r3, r8
    d490:	2b00      	cmp	r3, #0
    d492:	d0c4      	beq.n	d41e <setvbuf+0x86>
    d494:	6bab      	ldr	r3, [r5, #56]	; 0x38
    d496:	2b00      	cmp	r3, #0
    d498:	d027      	beq.n	d4ea <setvbuf+0x152>
    d49a:	9b00      	ldr	r3, [sp, #0]
    d49c:	429f      	cmp	r7, r3
    d49e:	d02a      	beq.n	d4f6 <setvbuf+0x15e>
    d4a0:	2380      	movs	r3, #128	; 0x80
    d4a2:	89a2      	ldrh	r2, [r4, #12]
    d4a4:	011b      	lsls	r3, r3, #4
    d4a6:	4313      	orrs	r3, r2
    d4a8:	b21b      	sxth	r3, r3
    d4aa:	81a3      	strh	r3, [r4, #12]
    d4ac:	2e01      	cmp	r6, #1
    d4ae:	d026      	beq.n	d4fe <setvbuf+0x166>
    d4b0:	4642      	mov	r2, r8
    d4b2:	6022      	str	r2, [r4, #0]
    d4b4:	6122      	str	r2, [r4, #16]
    d4b6:	2208      	movs	r2, #8
    d4b8:	b29b      	uxth	r3, r3
    d4ba:	6167      	str	r7, [r4, #20]
    d4bc:	401a      	ands	r2, r3
    d4be:	d00b      	beq.n	d4d8 <setvbuf+0x140>
    d4c0:	07da      	lsls	r2, r3, #31
    d4c2:	d510      	bpl.n	d4e6 <setvbuf+0x14e>
    d4c4:	2200      	movs	r2, #0
    d4c6:	2501      	movs	r5, #1
    d4c8:	60a2      	str	r2, [r4, #8]
    d4ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
    d4cc:	427f      	negs	r7, r7
    d4ce:	61a7      	str	r7, [r4, #24]
    d4d0:	4015      	ands	r5, r2
    d4d2:	d0c6      	beq.n	d462 <setvbuf+0xca>
    d4d4:	2500      	movs	r5, #0
    d4d6:	e7c9      	b.n	d46c <setvbuf+0xd4>
    d4d8:	60a2      	str	r2, [r4, #8]
    d4da:	2501      	movs	r5, #1
    d4dc:	6e62      	ldr	r2, [r4, #100]	; 0x64
    d4de:	4015      	ands	r5, r2
    d4e0:	d0bf      	beq.n	d462 <setvbuf+0xca>
    d4e2:	2500      	movs	r5, #0
    d4e4:	e7c2      	b.n	d46c <setvbuf+0xd4>
    d4e6:	60a7      	str	r7, [r4, #8]
    d4e8:	e7f7      	b.n	d4da <setvbuf+0x142>
    d4ea:	0028      	movs	r0, r5
    d4ec:	f002 fe6e 	bl	101cc <__sinit>
    d4f0:	9b00      	ldr	r3, [sp, #0]
    d4f2:	429f      	cmp	r7, r3
    d4f4:	d1d4      	bne.n	d4a0 <setvbuf+0x108>
    d4f6:	220c      	movs	r2, #12
    d4f8:	5ea3      	ldrsh	r3, [r4, r2]
    d4fa:	2e01      	cmp	r6, #1
    d4fc:	d1d8      	bne.n	d4b0 <setvbuf+0x118>
    d4fe:	2201      	movs	r2, #1
    d500:	4313      	orrs	r3, r2
    d502:	81a3      	strh	r3, [r4, #12]
    d504:	e7d4      	b.n	d4b0 <setvbuf+0x118>
    d506:	2501      	movs	r5, #1
    d508:	426d      	negs	r5, r5
    d50a:	e7af      	b.n	d46c <setvbuf+0xd4>
    d50c:	9b00      	ldr	r3, [sp, #0]
    d50e:	4699      	mov	r9, r3
    d510:	42bb      	cmp	r3, r7
    d512:	d005      	beq.n	d520 <setvbuf+0x188>
    d514:	0018      	movs	r0, r3
    d516:	f003 fa17 	bl	10948 <malloc>
    d51a:	4680      	mov	r8, r0
    d51c:	2800      	cmp	r0, #0
    d51e:	d104      	bne.n	d52a <setvbuf+0x192>
    d520:	2501      	movs	r5, #1
    d522:	220c      	movs	r2, #12
    d524:	5ea3      	ldrsh	r3, [r4, r2]
    d526:	426d      	negs	r5, r5
    d528:	e78d      	b.n	d446 <setvbuf+0xae>
    d52a:	464f      	mov	r7, r9
    d52c:	e77e      	b.n	d42c <setvbuf+0x94>
    d52e:	46c0      	nop			; (mov r8, r8)
    d530:	20000084 	.word	0x20000084
    d534:	fffff35c 	.word	0xfffff35c

0000d538 <strlen>:
    d538:	b510      	push	{r4, lr}
    d53a:	0783      	lsls	r3, r0, #30
    d53c:	d025      	beq.n	d58a <strlen+0x52>
    d53e:	7803      	ldrb	r3, [r0, #0]
    d540:	2b00      	cmp	r3, #0
    d542:	d024      	beq.n	d58e <strlen+0x56>
    d544:	0003      	movs	r3, r0
    d546:	2103      	movs	r1, #3
    d548:	e002      	b.n	d550 <strlen+0x18>
    d54a:	781a      	ldrb	r2, [r3, #0]
    d54c:	2a00      	cmp	r2, #0
    d54e:	d01a      	beq.n	d586 <strlen+0x4e>
    d550:	3301      	adds	r3, #1
    d552:	420b      	tst	r3, r1
    d554:	d1f9      	bne.n	d54a <strlen+0x12>
    d556:	6819      	ldr	r1, [r3, #0]
    d558:	4a0e      	ldr	r2, [pc, #56]	; (d594 <strlen+0x5c>)
    d55a:	4c0f      	ldr	r4, [pc, #60]	; (d598 <strlen+0x60>)
    d55c:	188a      	adds	r2, r1, r2
    d55e:	438a      	bics	r2, r1
    d560:	4222      	tst	r2, r4
    d562:	d106      	bne.n	d572 <strlen+0x3a>
    d564:	3304      	adds	r3, #4
    d566:	6819      	ldr	r1, [r3, #0]
    d568:	4a0a      	ldr	r2, [pc, #40]	; (d594 <strlen+0x5c>)
    d56a:	188a      	adds	r2, r1, r2
    d56c:	438a      	bics	r2, r1
    d56e:	4222      	tst	r2, r4
    d570:	d0f8      	beq.n	d564 <strlen+0x2c>
    d572:	001a      	movs	r2, r3
    d574:	781b      	ldrb	r3, [r3, #0]
    d576:	2b00      	cmp	r3, #0
    d578:	d003      	beq.n	d582 <strlen+0x4a>
    d57a:	3201      	adds	r2, #1
    d57c:	7811      	ldrb	r1, [r2, #0]
    d57e:	2900      	cmp	r1, #0
    d580:	d1fb      	bne.n	d57a <strlen+0x42>
    d582:	1a10      	subs	r0, r2, r0
    d584:	bd10      	pop	{r4, pc}
    d586:	1a18      	subs	r0, r3, r0
    d588:	e7fc      	b.n	d584 <strlen+0x4c>
    d58a:	0003      	movs	r3, r0
    d58c:	e7e3      	b.n	d556 <strlen+0x1e>
    d58e:	2000      	movs	r0, #0
    d590:	e7f8      	b.n	d584 <strlen+0x4c>
    d592:	46c0      	nop			; (mov r8, r8)
    d594:	fefefeff 	.word	0xfefefeff
    d598:	80808080 	.word	0x80808080

0000d59c <_vfprintf_r>:
    d59c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d59e:	46de      	mov	lr, fp
    d5a0:	464e      	mov	r6, r9
    d5a2:	4645      	mov	r5, r8
    d5a4:	4657      	mov	r7, sl
    d5a6:	b5e0      	push	{r5, r6, r7, lr}
    d5a8:	b0c3      	sub	sp, #268	; 0x10c
    d5aa:	4689      	mov	r9, r1
    d5ac:	0014      	movs	r4, r2
    d5ae:	001d      	movs	r5, r3
    d5b0:	930f      	str	r3, [sp, #60]	; 0x3c
    d5b2:	0006      	movs	r6, r0
    d5b4:	9006      	str	r0, [sp, #24]
    d5b6:	f003 f939 	bl	1082c <_localeconv_r>
    d5ba:	6803      	ldr	r3, [r0, #0]
    d5bc:	0018      	movs	r0, r3
    d5be:	9318      	str	r3, [sp, #96]	; 0x60
    d5c0:	f7ff ffba 	bl	d538 <strlen>
    d5c4:	9017      	str	r0, [sp, #92]	; 0x5c
    d5c6:	2e00      	cmp	r6, #0
    d5c8:	d004      	beq.n	d5d4 <_vfprintf_r+0x38>
    d5ca:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    d5cc:	9307      	str	r3, [sp, #28]
    d5ce:	2b00      	cmp	r3, #0
    d5d0:	d100      	bne.n	d5d4 <_vfprintf_r+0x38>
    d5d2:	e0a7      	b.n	d724 <_vfprintf_r+0x188>
    d5d4:	464b      	mov	r3, r9
    d5d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    d5d8:	07db      	lsls	r3, r3, #31
    d5da:	d478      	bmi.n	d6ce <_vfprintf_r+0x132>
    d5dc:	464b      	mov	r3, r9
    d5de:	210c      	movs	r1, #12
    d5e0:	5e59      	ldrsh	r1, [r3, r1]
    d5e2:	b28b      	uxth	r3, r1
    d5e4:	059a      	lsls	r2, r3, #22
    d5e6:	d56e      	bpl.n	d6c6 <_vfprintf_r+0x12a>
    d5e8:	2280      	movs	r2, #128	; 0x80
    d5ea:	0192      	lsls	r2, r2, #6
    d5ec:	4213      	tst	r3, r2
    d5ee:	d109      	bne.n	d604 <_vfprintf_r+0x68>
    d5f0:	430a      	orrs	r2, r1
    d5f2:	464b      	mov	r3, r9
    d5f4:	4649      	mov	r1, r9
    d5f6:	819a      	strh	r2, [r3, #12]
    d5f8:	6e49      	ldr	r1, [r1, #100]	; 0x64
    d5fa:	4bcc      	ldr	r3, [pc, #816]	; (d92c <_vfprintf_r+0x390>)
    d5fc:	400b      	ands	r3, r1
    d5fe:	4649      	mov	r1, r9
    d600:	664b      	str	r3, [r1, #100]	; 0x64
    d602:	b293      	uxth	r3, r2
    d604:	071a      	lsls	r2, r3, #28
    d606:	d567      	bpl.n	d6d8 <_vfprintf_r+0x13c>
    d608:	464a      	mov	r2, r9
    d60a:	6912      	ldr	r2, [r2, #16]
    d60c:	2a00      	cmp	r2, #0
    d60e:	d063      	beq.n	d6d8 <_vfprintf_r+0x13c>
    d610:	221a      	movs	r2, #26
    d612:	401a      	ands	r2, r3
    d614:	2a0a      	cmp	r2, #10
    d616:	d100      	bne.n	d61a <_vfprintf_r+0x7e>
    d618:	e088      	b.n	d72c <_vfprintf_r+0x190>
    d61a:	ab32      	add	r3, sp, #200	; 0xc8
    d61c:	9325      	str	r3, [sp, #148]	; 0x94
    d61e:	2300      	movs	r3, #0
    d620:	46cb      	mov	fp, r9
    d622:	af25      	add	r7, sp, #148	; 0x94
    d624:	60bb      	str	r3, [r7, #8]
    d626:	607b      	str	r3, [r7, #4]
    d628:	9407      	str	r4, [sp, #28]
    d62a:	9314      	str	r3, [sp, #80]	; 0x50
    d62c:	9316      	str	r3, [sp, #88]	; 0x58
    d62e:	9315      	str	r3, [sp, #84]	; 0x54
    d630:	ae32      	add	r6, sp, #200	; 0xc8
    d632:	9319      	str	r3, [sp, #100]	; 0x64
    d634:	931a      	str	r3, [sp, #104]	; 0x68
    d636:	930a      	str	r3, [sp, #40]	; 0x28
    d638:	9c07      	ldr	r4, [sp, #28]
    d63a:	7823      	ldrb	r3, [r4, #0]
    d63c:	2b00      	cmp	r3, #0
    d63e:	d101      	bne.n	d644 <_vfprintf_r+0xa8>
    d640:	f000 fd9e 	bl	e180 <_vfprintf_r+0xbe4>
    d644:	2b25      	cmp	r3, #37	; 0x25
    d646:	d103      	bne.n	d650 <_vfprintf_r+0xb4>
    d648:	f000 fd9a 	bl	e180 <_vfprintf_r+0xbe4>
    d64c:	2b25      	cmp	r3, #37	; 0x25
    d64e:	d003      	beq.n	d658 <_vfprintf_r+0xbc>
    d650:	3401      	adds	r4, #1
    d652:	7823      	ldrb	r3, [r4, #0]
    d654:	2b00      	cmp	r3, #0
    d656:	d1f9      	bne.n	d64c <_vfprintf_r+0xb0>
    d658:	9b07      	ldr	r3, [sp, #28]
    d65a:	1ae5      	subs	r5, r4, r3
    d65c:	d010      	beq.n	d680 <_vfprintf_r+0xe4>
    d65e:	9b07      	ldr	r3, [sp, #28]
    d660:	6075      	str	r5, [r6, #4]
    d662:	6033      	str	r3, [r6, #0]
    d664:	68bb      	ldr	r3, [r7, #8]
    d666:	195b      	adds	r3, r3, r5
    d668:	60bb      	str	r3, [r7, #8]
    d66a:	687b      	ldr	r3, [r7, #4]
    d66c:	3301      	adds	r3, #1
    d66e:	607b      	str	r3, [r7, #4]
    d670:	2b07      	cmp	r3, #7
    d672:	dc4c      	bgt.n	d70e <_vfprintf_r+0x172>
    d674:	3608      	adds	r6, #8
    d676:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d678:	469c      	mov	ip, r3
    d67a:	44ac      	add	ip, r5
    d67c:	4663      	mov	r3, ip
    d67e:	930a      	str	r3, [sp, #40]	; 0x28
    d680:	7823      	ldrb	r3, [r4, #0]
    d682:	2b00      	cmp	r3, #0
    d684:	d101      	bne.n	d68a <_vfprintf_r+0xee>
    d686:	f000 fc99 	bl	dfbc <_vfprintf_r+0xa20>
    d68a:	1c63      	adds	r3, r4, #1
    d68c:	9307      	str	r3, [sp, #28]
    d68e:	2300      	movs	r3, #0
    d690:	aa16      	add	r2, sp, #88	; 0x58
    d692:	77d3      	strb	r3, [r2, #31]
    d694:	2201      	movs	r2, #1
    d696:	4252      	negs	r2, r2
    d698:	4692      	mov	sl, r2
    d69a:	2200      	movs	r2, #0
    d69c:	920b      	str	r2, [sp, #44]	; 0x2c
    d69e:	3220      	adds	r2, #32
    d6a0:	4691      	mov	r9, r2
    d6a2:	3220      	adds	r2, #32
    d6a4:	7863      	ldrb	r3, [r4, #1]
    d6a6:	2100      	movs	r1, #0
    d6a8:	2000      	movs	r0, #0
    d6aa:	2400      	movs	r4, #0
    d6ac:	4694      	mov	ip, r2
    d6ae:	9a07      	ldr	r2, [sp, #28]
    d6b0:	3201      	adds	r2, #1
    d6b2:	9207      	str	r2, [sp, #28]
    d6b4:	001a      	movs	r2, r3
    d6b6:	3a20      	subs	r2, #32
    d6b8:	2a58      	cmp	r2, #88	; 0x58
    d6ba:	d900      	bls.n	d6be <_vfprintf_r+0x122>
    d6bc:	e2e7      	b.n	dc8e <_vfprintf_r+0x6f2>
    d6be:	4d9c      	ldr	r5, [pc, #624]	; (d930 <_vfprintf_r+0x394>)
    d6c0:	0092      	lsls	r2, r2, #2
    d6c2:	58aa      	ldr	r2, [r5, r2]
    d6c4:	4697      	mov	pc, r2
    d6c6:	464b      	mov	r3, r9
    d6c8:	6d98      	ldr	r0, [r3, #88]	; 0x58
    d6ca:	f003 f8c1 	bl	10850 <__retarget_lock_acquire_recursive>
    d6ce:	464b      	mov	r3, r9
    d6d0:	210c      	movs	r1, #12
    d6d2:	5e59      	ldrsh	r1, [r3, r1]
    d6d4:	b28b      	uxth	r3, r1
    d6d6:	e787      	b.n	d5e8 <_vfprintf_r+0x4c>
    d6d8:	4649      	mov	r1, r9
    d6da:	9806      	ldr	r0, [sp, #24]
    d6dc:	f001 fb0e 	bl	ecfc <__swsetup_r>
    d6e0:	464b      	mov	r3, r9
    d6e2:	2800      	cmp	r0, #0
    d6e4:	d03a      	beq.n	d75c <_vfprintf_r+0x1c0>
    d6e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    d6e8:	07db      	lsls	r3, r3, #31
    d6ea:	d405      	bmi.n	d6f8 <_vfprintf_r+0x15c>
    d6ec:	464b      	mov	r3, r9
    d6ee:	899b      	ldrh	r3, [r3, #12]
    d6f0:	059b      	lsls	r3, r3, #22
    d6f2:	d401      	bmi.n	d6f8 <_vfprintf_r+0x15c>
    d6f4:	f000 ffcf 	bl	e696 <_vfprintf_r+0x10fa>
    d6f8:	2301      	movs	r3, #1
    d6fa:	425b      	negs	r3, r3
    d6fc:	930a      	str	r3, [sp, #40]	; 0x28
    d6fe:	980a      	ldr	r0, [sp, #40]	; 0x28
    d700:	b043      	add	sp, #268	; 0x10c
    d702:	bc3c      	pop	{r2, r3, r4, r5}
    d704:	4690      	mov	r8, r2
    d706:	4699      	mov	r9, r3
    d708:	46a2      	mov	sl, r4
    d70a:	46ab      	mov	fp, r5
    d70c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d70e:	003a      	movs	r2, r7
    d710:	4659      	mov	r1, fp
    d712:	9806      	ldr	r0, [sp, #24]
    d714:	f004 fa1e 	bl	11b54 <__sprint_r>
    d718:	2800      	cmp	r0, #0
    d71a:	d001      	beq.n	d720 <_vfprintf_r+0x184>
    d71c:	f000 fcce 	bl	e0bc <_vfprintf_r+0xb20>
    d720:	ae32      	add	r6, sp, #200	; 0xc8
    d722:	e7a8      	b.n	d676 <_vfprintf_r+0xda>
    d724:	9806      	ldr	r0, [sp, #24]
    d726:	f002 fd51 	bl	101cc <__sinit>
    d72a:	e753      	b.n	d5d4 <_vfprintf_r+0x38>
    d72c:	464a      	mov	r2, r9
    d72e:	210e      	movs	r1, #14
    d730:	5e52      	ldrsh	r2, [r2, r1]
    d732:	2a00      	cmp	r2, #0
    d734:	da00      	bge.n	d738 <_vfprintf_r+0x19c>
    d736:	e770      	b.n	d61a <_vfprintf_r+0x7e>
    d738:	464a      	mov	r2, r9
    d73a:	6e52      	ldr	r2, [r2, #100]	; 0x64
    d73c:	07d2      	lsls	r2, r2, #31
    d73e:	d405      	bmi.n	d74c <_vfprintf_r+0x1b0>
    d740:	059b      	lsls	r3, r3, #22
    d742:	d403      	bmi.n	d74c <_vfprintf_r+0x1b0>
    d744:	464b      	mov	r3, r9
    d746:	6d98      	ldr	r0, [r3, #88]	; 0x58
    d748:	f003 f884 	bl	10854 <__retarget_lock_release_recursive>
    d74c:	002b      	movs	r3, r5
    d74e:	0022      	movs	r2, r4
    d750:	4649      	mov	r1, r9
    d752:	9806      	ldr	r0, [sp, #24]
    d754:	f001 fa8e 	bl	ec74 <__sbprintf>
    d758:	900a      	str	r0, [sp, #40]	; 0x28
    d75a:	e7d0      	b.n	d6fe <_vfprintf_r+0x162>
    d75c:	899b      	ldrh	r3, [r3, #12]
    d75e:	e757      	b.n	d610 <_vfprintf_r+0x74>
    d760:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d762:	920f      	str	r2, [sp, #60]	; 0x3c
    d764:	425b      	negs	r3, r3
    d766:	930b      	str	r3, [sp, #44]	; 0x2c
    d768:	2304      	movs	r3, #4
    d76a:	431c      	orrs	r4, r3
    d76c:	9b07      	ldr	r3, [sp, #28]
    d76e:	781b      	ldrb	r3, [r3, #0]
    d770:	e79d      	b.n	d6ae <_vfprintf_r+0x112>
    d772:	9b07      	ldr	r3, [sp, #28]
    d774:	2101      	movs	r1, #1
    d776:	781b      	ldrb	r3, [r3, #0]
    d778:	202b      	movs	r0, #43	; 0x2b
    d77a:	e798      	b.n	d6ae <_vfprintf_r+0x112>
    d77c:	9b07      	ldr	r3, [sp, #28]
    d77e:	1c5a      	adds	r2, r3, #1
    d780:	781b      	ldrb	r3, [r3, #0]
    d782:	4690      	mov	r8, r2
    d784:	2b2a      	cmp	r3, #42	; 0x2a
    d786:	d101      	bne.n	d78c <_vfprintf_r+0x1f0>
    d788:	f001 fa38 	bl	ebfc <_vfprintf_r+0x1660>
    d78c:	001a      	movs	r2, r3
    d78e:	2500      	movs	r5, #0
    d790:	3a30      	subs	r2, #48	; 0x30
    d792:	46aa      	mov	sl, r5
    d794:	2a09      	cmp	r2, #9
    d796:	d901      	bls.n	d79c <_vfprintf_r+0x200>
    d798:	f001 f96d 	bl	ea76 <_vfprintf_r+0x14da>
    d79c:	0025      	movs	r5, r4
    d79e:	4643      	mov	r3, r8
    d7a0:	4654      	mov	r4, sl
    d7a2:	4688      	mov	r8, r1
    d7a4:	4682      	mov	sl, r0
    d7a6:	00a1      	lsls	r1, r4, #2
    d7a8:	190c      	adds	r4, r1, r4
    d7aa:	7818      	ldrb	r0, [r3, #0]
    d7ac:	0064      	lsls	r4, r4, #1
    d7ae:	18a4      	adds	r4, r4, r2
    d7b0:	0002      	movs	r2, r0
    d7b2:	1c59      	adds	r1, r3, #1
    d7b4:	3a30      	subs	r2, #48	; 0x30
    d7b6:	000b      	movs	r3, r1
    d7b8:	2a09      	cmp	r2, #9
    d7ba:	d9f4      	bls.n	d7a6 <_vfprintf_r+0x20a>
    d7bc:	9107      	str	r1, [sp, #28]
    d7be:	0003      	movs	r3, r0
    d7c0:	4641      	mov	r1, r8
    d7c2:	4650      	mov	r0, sl
    d7c4:	46a2      	mov	sl, r4
    d7c6:	002c      	movs	r4, r5
    d7c8:	e774      	b.n	d6b4 <_vfprintf_r+0x118>
    d7ca:	9312      	str	r3, [sp, #72]	; 0x48
    d7cc:	2900      	cmp	r1, #0
    d7ce:	d001      	beq.n	d7d4 <_vfprintf_r+0x238>
    d7d0:	f001 fa2e 	bl	ec30 <_vfprintf_r+0x1694>
    d7d4:	4b57      	ldr	r3, [pc, #348]	; (d934 <_vfprintf_r+0x398>)
    d7d6:	9319      	str	r3, [sp, #100]	; 0x64
    d7d8:	06a3      	lsls	r3, r4, #26
    d7da:	d501      	bpl.n	d7e0 <_vfprintf_r+0x244>
    d7dc:	f000 fe9a 	bl	e514 <_vfprintf_r+0xf78>
    d7e0:	06e3      	lsls	r3, r4, #27
    d7e2:	d501      	bpl.n	d7e8 <_vfprintf_r+0x24c>
    d7e4:	f000 fd9a 	bl	e31c <_vfprintf_r+0xd80>
    d7e8:	0663      	lsls	r3, r4, #25
    d7ea:	d401      	bmi.n	d7f0 <_vfprintf_r+0x254>
    d7ec:	f000 fd96 	bl	e31c <_vfprintf_r+0xd80>
    d7f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d7f2:	881a      	ldrh	r2, [r3, #0]
    d7f4:	920c      	str	r2, [sp, #48]	; 0x30
    d7f6:	2200      	movs	r2, #0
    d7f8:	3304      	adds	r3, #4
    d7fa:	920d      	str	r2, [sp, #52]	; 0x34
    d7fc:	930f      	str	r3, [sp, #60]	; 0x3c
    d7fe:	07e3      	lsls	r3, r4, #31
    d800:	d401      	bmi.n	d806 <_vfprintf_r+0x26a>
    d802:	f000 fd76 	bl	e2f2 <_vfprintf_r+0xd56>
    d806:	990c      	ldr	r1, [sp, #48]	; 0x30
    d808:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    d80a:	000b      	movs	r3, r1
    d80c:	4313      	orrs	r3, r2
    d80e:	001a      	movs	r2, r3
    d810:	2302      	movs	r3, #2
    d812:	2a00      	cmp	r2, #0
    d814:	d008      	beq.n	d828 <_vfprintf_r+0x28c>
    d816:	2030      	movs	r0, #48	; 0x30
    d818:	a91e      	add	r1, sp, #120	; 0x78
    d81a:	7008      	strb	r0, [r1, #0]
    d81c:	2548      	movs	r5, #72	; 0x48
    d81e:	4668      	mov	r0, sp
    d820:	1940      	adds	r0, r0, r5
    d822:	7800      	ldrb	r0, [r0, #0]
    d824:	431c      	orrs	r4, r3
    d826:	7048      	strb	r0, [r1, #1]
    d828:	2100      	movs	r1, #0
    d82a:	4688      	mov	r8, r1
    d82c:	a816      	add	r0, sp, #88	; 0x58
    d82e:	77c1      	strb	r1, [r0, #31]
    d830:	4651      	mov	r1, sl
    d832:	3101      	adds	r1, #1
    d834:	d100      	bne.n	d838 <_vfprintf_r+0x29c>
    d836:	e0e6      	b.n	da06 <_vfprintf_r+0x46a>
    d838:	2180      	movs	r1, #128	; 0x80
    d83a:	0020      	movs	r0, r4
    d83c:	4388      	bics	r0, r1
    d83e:	9009      	str	r0, [sp, #36]	; 0x24
    d840:	2a00      	cmp	r2, #0
    d842:	d000      	beq.n	d846 <_vfprintf_r+0x2aa>
    d844:	e0e3      	b.n	da0e <_vfprintf_r+0x472>
    d846:	4652      	mov	r2, sl
    d848:	2a00      	cmp	r2, #0
    d84a:	d001      	beq.n	d850 <_vfprintf_r+0x2b4>
    d84c:	f000 fc38 	bl	e0c0 <_vfprintf_r+0xb24>
    d850:	2b00      	cmp	r3, #0
    d852:	d001      	beq.n	d858 <_vfprintf_r+0x2bc>
    d854:	f000 fd0c 	bl	e270 <_vfprintf_r+0xcd4>
    d858:	2001      	movs	r0, #1
    d85a:	ab32      	add	r3, sp, #200	; 0xc8
    d85c:	4020      	ands	r0, r4
    d85e:	900e      	str	r0, [sp, #56]	; 0x38
    d860:	9311      	str	r3, [sp, #68]	; 0x44
    d862:	d008      	beq.n	d876 <_vfprintf_r+0x2da>
    d864:	2327      	movs	r3, #39	; 0x27
    d866:	2130      	movs	r1, #48	; 0x30
    d868:	aa28      	add	r2, sp, #160	; 0xa0
    d86a:	54d1      	strb	r1, [r2, r3]
    d86c:	aa16      	add	r2, sp, #88	; 0x58
    d86e:	4694      	mov	ip, r2
    d870:	3348      	adds	r3, #72	; 0x48
    d872:	4463      	add	r3, ip
    d874:	9311      	str	r3, [sp, #68]	; 0x44
    d876:	4653      	mov	r3, sl
    d878:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    d87a:	9308      	str	r3, [sp, #32]
    d87c:	4592      	cmp	sl, r2
    d87e:	da00      	bge.n	d882 <_vfprintf_r+0x2e6>
    d880:	9208      	str	r2, [sp, #32]
    d882:	2300      	movs	r3, #0
    d884:	9313      	str	r3, [sp, #76]	; 0x4c
    d886:	4643      	mov	r3, r8
    d888:	2b00      	cmp	r3, #0
    d88a:	d002      	beq.n	d892 <_vfprintf_r+0x2f6>
    d88c:	9b08      	ldr	r3, [sp, #32]
    d88e:	3301      	adds	r3, #1
    d890:	9308      	str	r3, [sp, #32]
    d892:	2302      	movs	r3, #2
    d894:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d896:	401a      	ands	r2, r3
    d898:	4691      	mov	r9, r2
    d89a:	d002      	beq.n	d8a2 <_vfprintf_r+0x306>
    d89c:	9b08      	ldr	r3, [sp, #32]
    d89e:	3302      	adds	r3, #2
    d8a0:	9308      	str	r3, [sp, #32]
    d8a2:	2384      	movs	r3, #132	; 0x84
    d8a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d8a6:	401a      	ands	r2, r3
    d8a8:	9210      	str	r2, [sp, #64]	; 0x40
    d8aa:	d000      	beq.n	d8ae <_vfprintf_r+0x312>
    d8ac:	e207      	b.n	dcbe <_vfprintf_r+0x722>
    d8ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d8b0:	9a08      	ldr	r2, [sp, #32]
    d8b2:	1a9c      	subs	r4, r3, r2
    d8b4:	2c00      	cmp	r4, #0
    d8b6:	dc00      	bgt.n	d8ba <_vfprintf_r+0x31e>
    d8b8:	e201      	b.n	dcbe <_vfprintf_r+0x722>
    d8ba:	491f      	ldr	r1, [pc, #124]	; (d938 <_vfprintf_r+0x39c>)
    d8bc:	68ba      	ldr	r2, [r7, #8]
    d8be:	687b      	ldr	r3, [r7, #4]
    d8c0:	4688      	mov	r8, r1
    d8c2:	2c10      	cmp	r4, #16
    d8c4:	dd21      	ble.n	d90a <_vfprintf_r+0x36e>
    d8c6:	0031      	movs	r1, r6
    d8c8:	2510      	movs	r5, #16
    d8ca:	465e      	mov	r6, fp
    d8cc:	e003      	b.n	d8d6 <_vfprintf_r+0x33a>
    d8ce:	3c10      	subs	r4, #16
    d8d0:	3108      	adds	r1, #8
    d8d2:	2c10      	cmp	r4, #16
    d8d4:	dd17      	ble.n	d906 <_vfprintf_r+0x36a>
    d8d6:	4640      	mov	r0, r8
    d8d8:	3210      	adds	r2, #16
    d8da:	3301      	adds	r3, #1
    d8dc:	6008      	str	r0, [r1, #0]
    d8de:	604d      	str	r5, [r1, #4]
    d8e0:	60ba      	str	r2, [r7, #8]
    d8e2:	607b      	str	r3, [r7, #4]
    d8e4:	2b07      	cmp	r3, #7
    d8e6:	ddf2      	ble.n	d8ce <_vfprintf_r+0x332>
    d8e8:	003a      	movs	r2, r7
    d8ea:	0031      	movs	r1, r6
    d8ec:	9806      	ldr	r0, [sp, #24]
    d8ee:	f004 f931 	bl	11b54 <__sprint_r>
    d8f2:	2800      	cmp	r0, #0
    d8f4:	d001      	beq.n	d8fa <_vfprintf_r+0x35e>
    d8f6:	f000 fccf 	bl	e298 <_vfprintf_r+0xcfc>
    d8fa:	3c10      	subs	r4, #16
    d8fc:	68ba      	ldr	r2, [r7, #8]
    d8fe:	687b      	ldr	r3, [r7, #4]
    d900:	a932      	add	r1, sp, #200	; 0xc8
    d902:	2c10      	cmp	r4, #16
    d904:	dce7      	bgt.n	d8d6 <_vfprintf_r+0x33a>
    d906:	46b3      	mov	fp, r6
    d908:	000e      	movs	r6, r1
    d90a:	4641      	mov	r1, r8
    d90c:	6074      	str	r4, [r6, #4]
    d90e:	3301      	adds	r3, #1
    d910:	18a4      	adds	r4, r4, r2
    d912:	6031      	str	r1, [r6, #0]
    d914:	60bc      	str	r4, [r7, #8]
    d916:	607b      	str	r3, [r7, #4]
    d918:	2b07      	cmp	r3, #7
    d91a:	dd01      	ble.n	d920 <_vfprintf_r+0x384>
    d91c:	f000 fcae 	bl	e27c <_vfprintf_r+0xce0>
    d920:	ab16      	add	r3, sp, #88	; 0x58
    d922:	7fdb      	ldrb	r3, [r3, #31]
    d924:	3608      	adds	r6, #8
    d926:	4698      	mov	r8, r3
    d928:	e1ca      	b.n	dcc0 <_vfprintf_r+0x724>
    d92a:	46c0      	nop			; (mov r8, r8)
    d92c:	ffffdfff 	.word	0xffffdfff
    d930:	00012470 	.word	0x00012470
    d934:	000125f8 	.word	0x000125f8
    d938:	00012618 	.word	0x00012618
    d93c:	2200      	movs	r2, #0
    d93e:	9d07      	ldr	r5, [sp, #28]
    d940:	3b30      	subs	r3, #48	; 0x30
    d942:	46a8      	mov	r8, r5
    d944:	920b      	str	r2, [sp, #44]	; 0x2c
    d946:	001a      	movs	r2, r3
    d948:	9408      	str	r4, [sp, #32]
    d94a:	002c      	movs	r4, r5
    d94c:	4655      	mov	r5, sl
    d94e:	4682      	mov	sl, r0
    d950:	4640      	mov	r0, r8
    d952:	4688      	mov	r8, r1
    d954:	0011      	movs	r1, r2
    d956:	2200      	movs	r2, #0
    d958:	0093      	lsls	r3, r2, #2
    d95a:	189a      	adds	r2, r3, r2
    d95c:	7803      	ldrb	r3, [r0, #0]
    d95e:	0052      	lsls	r2, r2, #1
    d960:	188a      	adds	r2, r1, r2
    d962:	0019      	movs	r1, r3
    d964:	3401      	adds	r4, #1
    d966:	3930      	subs	r1, #48	; 0x30
    d968:	0020      	movs	r0, r4
    d96a:	2909      	cmp	r1, #9
    d96c:	d9f4      	bls.n	d958 <_vfprintf_r+0x3bc>
    d96e:	9407      	str	r4, [sp, #28]
    d970:	4650      	mov	r0, sl
    d972:	9c08      	ldr	r4, [sp, #32]
    d974:	920b      	str	r2, [sp, #44]	; 0x2c
    d976:	4641      	mov	r1, r8
    d978:	46aa      	mov	sl, r5
    d97a:	e69b      	b.n	d6b4 <_vfprintf_r+0x118>
    d97c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    d97e:	9312      	str	r3, [sp, #72]	; 0x48
    d980:	6813      	ldr	r3, [r2, #0]
    d982:	2120      	movs	r1, #32
    d984:	9308      	str	r3, [sp, #32]
    d986:	466b      	mov	r3, sp
    d988:	185b      	adds	r3, r3, r1
    d98a:	781b      	ldrb	r3, [r3, #0]
    d98c:	ad28      	add	r5, sp, #160	; 0xa0
    d98e:	702b      	strb	r3, [r5, #0]
    d990:	2300      	movs	r3, #0
    d992:	a916      	add	r1, sp, #88	; 0x58
    d994:	77cb      	strb	r3, [r1, #31]
    d996:	0013      	movs	r3, r2
    d998:	3304      	adds	r3, #4
    d99a:	930f      	str	r3, [sp, #60]	; 0x3c
    d99c:	2300      	movs	r3, #0
    d99e:	9409      	str	r4, [sp, #36]	; 0x24
    d9a0:	4698      	mov	r8, r3
    d9a2:	3301      	adds	r3, #1
    d9a4:	9308      	str	r3, [sp, #32]
    d9a6:	930e      	str	r3, [sp, #56]	; 0x38
    d9a8:	2300      	movs	r3, #0
    d9aa:	9511      	str	r5, [sp, #68]	; 0x44
    d9ac:	469a      	mov	sl, r3
    d9ae:	9313      	str	r3, [sp, #76]	; 0x4c
    d9b0:	e76f      	b.n	d892 <_vfprintf_r+0x2f6>
    d9b2:	9312      	str	r3, [sp, #72]	; 0x48
    d9b4:	2900      	cmp	r1, #0
    d9b6:	d001      	beq.n	d9bc <_vfprintf_r+0x420>
    d9b8:	f001 f94d 	bl	ec56 <_vfprintf_r+0x16ba>
    d9bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    d9be:	06a3      	lsls	r3, r4, #26
    d9c0:	d501      	bpl.n	d9c6 <_vfprintf_r+0x42a>
    d9c2:	f000 fd5a 	bl	e47a <_vfprintf_r+0xede>
    d9c6:	06e3      	lsls	r3, r4, #27
    d9c8:	d501      	bpl.n	d9ce <_vfprintf_r+0x432>
    d9ca:	f000 fcab 	bl	e324 <_vfprintf_r+0xd88>
    d9ce:	0663      	lsls	r3, r4, #25
    d9d0:	d401      	bmi.n	d9d6 <_vfprintf_r+0x43a>
    d9d2:	f000 fca7 	bl	e324 <_vfprintf_r+0xd88>
    d9d6:	2100      	movs	r1, #0
    d9d8:	5e53      	ldrsh	r3, [r2, r1]
    d9da:	930c      	str	r3, [sp, #48]	; 0x30
    d9dc:	3204      	adds	r2, #4
    d9de:	17db      	asrs	r3, r3, #31
    d9e0:	930d      	str	r3, [sp, #52]	; 0x34
    d9e2:	920f      	str	r2, [sp, #60]	; 0x3c
    d9e4:	2b00      	cmp	r3, #0
    d9e6:	da01      	bge.n	d9ec <_vfprintf_r+0x450>
    d9e8:	f000 fdb2 	bl	e550 <_vfprintf_r+0xfb4>
    d9ec:	990c      	ldr	r1, [sp, #48]	; 0x30
    d9ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    d9f0:	0008      	movs	r0, r1
    d9f2:	4651      	mov	r1, sl
    d9f4:	ab16      	add	r3, sp, #88	; 0x58
    d9f6:	7fdb      	ldrb	r3, [r3, #31]
    d9f8:	4310      	orrs	r0, r2
    d9fa:	4698      	mov	r8, r3
    d9fc:	0002      	movs	r2, r0
    d9fe:	2301      	movs	r3, #1
    da00:	3101      	adds	r1, #1
    da02:	d000      	beq.n	da06 <_vfprintf_r+0x46a>
    da04:	e718      	b.n	d838 <_vfprintf_r+0x29c>
    da06:	2a00      	cmp	r2, #0
    da08:	d100      	bne.n	da0c <_vfprintf_r+0x470>
    da0a:	e35a      	b.n	e0c2 <_vfprintf_r+0xb26>
    da0c:	9409      	str	r4, [sp, #36]	; 0x24
    da0e:	2b01      	cmp	r3, #1
    da10:	d101      	bne.n	da16 <_vfprintf_r+0x47a>
    da12:	f000 fc06 	bl	e222 <_vfprintf_r+0xc86>
    da16:	2b02      	cmp	r3, #2
    da18:	d000      	beq.n	da1c <_vfprintf_r+0x480>
    da1a:	e380      	b.n	e11e <_vfprintf_r+0xb82>
    da1c:	9c19      	ldr	r4, [sp, #100]	; 0x64
    da1e:	200f      	movs	r0, #15
    da20:	46a1      	mov	r9, r4
    da22:	46b4      	mov	ip, r6
    da24:	ab32      	add	r3, sp, #200	; 0xc8
    da26:	0019      	movs	r1, r3
    da28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    da2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    da2c:	0004      	movs	r4, r0
    da2e:	464d      	mov	r5, r9
    da30:	4014      	ands	r4, r2
    da32:	5d2c      	ldrb	r4, [r5, r4]
    da34:	071e      	lsls	r6, r3, #28
    da36:	0915      	lsrs	r5, r2, #4
    da38:	3901      	subs	r1, #1
    da3a:	432e      	orrs	r6, r5
    da3c:	700c      	strb	r4, [r1, #0]
    da3e:	091c      	lsrs	r4, r3, #4
    da40:	0023      	movs	r3, r4
    da42:	0034      	movs	r4, r6
    da44:	0032      	movs	r2, r6
    da46:	431c      	orrs	r4, r3
    da48:	d1f0      	bne.n	da2c <_vfprintf_r+0x490>
    da4a:	920c      	str	r2, [sp, #48]	; 0x30
    da4c:	930d      	str	r3, [sp, #52]	; 0x34
    da4e:	ab32      	add	r3, sp, #200	; 0xc8
    da50:	1a5b      	subs	r3, r3, r1
    da52:	9111      	str	r1, [sp, #68]	; 0x44
    da54:	4666      	mov	r6, ip
    da56:	930e      	str	r3, [sp, #56]	; 0x38
    da58:	e70d      	b.n	d876 <_vfprintf_r+0x2da>
    da5a:	4663      	mov	r3, ip
    da5c:	431c      	orrs	r4, r3
    da5e:	9b07      	ldr	r3, [sp, #28]
    da60:	781b      	ldrb	r3, [r3, #0]
    da62:	e624      	b.n	d6ae <_vfprintf_r+0x112>
    da64:	9b07      	ldr	r3, [sp, #28]
    da66:	781b      	ldrb	r3, [r3, #0]
    da68:	2b6c      	cmp	r3, #108	; 0x6c
    da6a:	d101      	bne.n	da70 <_vfprintf_r+0x4d4>
    da6c:	f000 fe8c 	bl	e788 <_vfprintf_r+0x11ec>
    da70:	2210      	movs	r2, #16
    da72:	4314      	orrs	r4, r2
    da74:	e61b      	b.n	d6ae <_vfprintf_r+0x112>
    da76:	2900      	cmp	r1, #0
    da78:	d001      	beq.n	da7e <_vfprintf_r+0x4e2>
    da7a:	f001 f8d5 	bl	ec28 <_vfprintf_r+0x168c>
    da7e:	06a3      	lsls	r3, r4, #26
    da80:	d501      	bpl.n	da86 <_vfprintf_r+0x4ea>
    da82:	f000 fe76 	bl	e772 <_vfprintf_r+0x11d6>
    da86:	06e3      	lsls	r3, r4, #27
    da88:	d500      	bpl.n	da8c <_vfprintf_r+0x4f0>
    da8a:	e110      	b.n	dcae <_vfprintf_r+0x712>
    da8c:	0663      	lsls	r3, r4, #25
    da8e:	d400      	bmi.n	da92 <_vfprintf_r+0x4f6>
    da90:	e10d      	b.n	dcae <_vfprintf_r+0x712>
    da92:	4669      	mov	r1, sp
    da94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    da96:	8d09      	ldrh	r1, [r1, #40]	; 0x28
    da98:	681a      	ldr	r2, [r3, #0]
    da9a:	3304      	adds	r3, #4
    da9c:	9208      	str	r2, [sp, #32]
    da9e:	8011      	strh	r1, [r2, #0]
    daa0:	930f      	str	r3, [sp, #60]	; 0x3c
    daa2:	e5c9      	b.n	d638 <_vfprintf_r+0x9c>
    daa4:	990f      	ldr	r1, [sp, #60]	; 0x3c
    daa6:	2230      	movs	r2, #48	; 0x30
    daa8:	680b      	ldr	r3, [r1, #0]
    daaa:	930c      	str	r3, [sp, #48]	; 0x30
    daac:	2300      	movs	r3, #0
    daae:	930d      	str	r3, [sp, #52]	; 0x34
    dab0:	3302      	adds	r3, #2
    dab2:	431c      	orrs	r4, r3
    dab4:	ab1e      	add	r3, sp, #120	; 0x78
    dab6:	701a      	strb	r2, [r3, #0]
    dab8:	3248      	adds	r2, #72	; 0x48
    daba:	705a      	strb	r2, [r3, #1]
    dabc:	000b      	movs	r3, r1
    dabe:	3304      	adds	r3, #4
    dac0:	930f      	str	r3, [sp, #60]	; 0x3c
    dac2:	4bc1      	ldr	r3, [pc, #772]	; (ddc8 <_vfprintf_r+0x82c>)
    dac4:	9212      	str	r2, [sp, #72]	; 0x48
    dac6:	9319      	str	r3, [sp, #100]	; 0x64
    dac8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    daca:	2302      	movs	r3, #2
    dacc:	e6ac      	b.n	d828 <_vfprintf_r+0x28c>
    dace:	464b      	mov	r3, r9
    dad0:	431c      	orrs	r4, r3
    dad2:	9b07      	ldr	r3, [sp, #28]
    dad4:	781b      	ldrb	r3, [r3, #0]
    dad6:	e5ea      	b.n	d6ae <_vfprintf_r+0x112>
    dad8:	9312      	str	r3, [sp, #72]	; 0x48
    dada:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    dadc:	a916      	add	r1, sp, #88	; 0x58
    dade:	1d1d      	adds	r5, r3, #4
    dae0:	681b      	ldr	r3, [r3, #0]
    dae2:	001a      	movs	r2, r3
    dae4:	9311      	str	r3, [sp, #68]	; 0x44
    dae6:	2300      	movs	r3, #0
    dae8:	77cb      	strb	r3, [r1, #31]
    daea:	2a00      	cmp	r2, #0
    daec:	d101      	bne.n	daf2 <_vfprintf_r+0x556>
    daee:	f000 ff01 	bl	e8f4 <_vfprintf_r+0x1358>
    daf2:	4653      	mov	r3, sl
    daf4:	3301      	adds	r3, #1
    daf6:	d101      	bne.n	dafc <_vfprintf_r+0x560>
    daf8:	f000 fe64 	bl	e7c4 <_vfprintf_r+0x1228>
    dafc:	4652      	mov	r2, sl
    dafe:	2100      	movs	r1, #0
    db00:	9811      	ldr	r0, [sp, #68]	; 0x44
    db02:	f003 f9df 	bl	10ec4 <memchr>
    db06:	2800      	cmp	r0, #0
    db08:	d101      	bne.n	db0e <_vfprintf_r+0x572>
    db0a:	f000 ff78 	bl	e9fe <_vfprintf_r+0x1462>
    db0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    db10:	1ac3      	subs	r3, r0, r3
    db12:	001a      	movs	r2, r3
    db14:	930e      	str	r3, [sp, #56]	; 0x38
    db16:	43db      	mvns	r3, r3
    db18:	17db      	asrs	r3, r3, #31
    db1a:	401a      	ands	r2, r3
    db1c:	ab16      	add	r3, sp, #88	; 0x58
    db1e:	7fdb      	ldrb	r3, [r3, #31]
    db20:	9208      	str	r2, [sp, #32]
    db22:	4698      	mov	r8, r3
    db24:	2300      	movs	r3, #0
    db26:	950f      	str	r5, [sp, #60]	; 0x3c
    db28:	9409      	str	r4, [sp, #36]	; 0x24
    db2a:	469a      	mov	sl, r3
    db2c:	9313      	str	r3, [sp, #76]	; 0x4c
    db2e:	e6aa      	b.n	d886 <_vfprintf_r+0x2ea>
    db30:	2308      	movs	r3, #8
    db32:	431c      	orrs	r4, r3
    db34:	9b07      	ldr	r3, [sp, #28]
    db36:	781b      	ldrb	r3, [r3, #0]
    db38:	e5b9      	b.n	d6ae <_vfprintf_r+0x112>
    db3a:	9312      	str	r3, [sp, #72]	; 0x48
    db3c:	2310      	movs	r3, #16
    db3e:	431c      	orrs	r4, r3
    db40:	06a3      	lsls	r3, r4, #26
    db42:	d501      	bpl.n	db48 <_vfprintf_r+0x5ac>
    db44:	f000 fca7 	bl	e496 <_vfprintf_r+0xefa>
    db48:	06e3      	lsls	r3, r4, #27
    db4a:	d500      	bpl.n	db4e <_vfprintf_r+0x5b2>
    db4c:	e3ee      	b.n	e32c <_vfprintf_r+0xd90>
    db4e:	0663      	lsls	r3, r4, #25
    db50:	d400      	bmi.n	db54 <_vfprintf_r+0x5b8>
    db52:	e3eb      	b.n	e32c <_vfprintf_r+0xd90>
    db54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    db56:	881a      	ldrh	r2, [r3, #0]
    db58:	920c      	str	r2, [sp, #48]	; 0x30
    db5a:	2200      	movs	r2, #0
    db5c:	3304      	adds	r3, #4
    db5e:	920d      	str	r2, [sp, #52]	; 0x34
    db60:	930f      	str	r3, [sp, #60]	; 0x3c
    db62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    db64:	2300      	movs	r3, #0
    db66:	e65f      	b.n	d828 <_vfprintf_r+0x28c>
    db68:	9312      	str	r3, [sp, #72]	; 0x48
    db6a:	2310      	movs	r3, #16
    db6c:	431c      	orrs	r4, r3
    db6e:	06a3      	lsls	r3, r4, #26
    db70:	d501      	bpl.n	db76 <_vfprintf_r+0x5da>
    db72:	f000 fcba 	bl	e4ea <_vfprintf_r+0xf4e>
    db76:	06e3      	lsls	r3, r4, #27
    db78:	d500      	bpl.n	db7c <_vfprintf_r+0x5e0>
    db7a:	e3da      	b.n	e332 <_vfprintf_r+0xd96>
    db7c:	0663      	lsls	r3, r4, #25
    db7e:	d400      	bmi.n	db82 <_vfprintf_r+0x5e6>
    db80:	e3d7      	b.n	e332 <_vfprintf_r+0xd96>
    db82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    db84:	881a      	ldrh	r2, [r3, #0]
    db86:	920c      	str	r2, [sp, #48]	; 0x30
    db88:	2200      	movs	r2, #0
    db8a:	3304      	adds	r3, #4
    db8c:	920d      	str	r2, [sp, #52]	; 0x34
    db8e:	930f      	str	r3, [sp, #60]	; 0x3c
    db90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    db92:	2301      	movs	r3, #1
    db94:	e648      	b.n	d828 <_vfprintf_r+0x28c>
    db96:	9312      	str	r3, [sp, #72]	; 0x48
    db98:	2900      	cmp	r1, #0
    db9a:	d001      	beq.n	dba0 <_vfprintf_r+0x604>
    db9c:	f001 f857 	bl	ec4e <_vfprintf_r+0x16b2>
    dba0:	4b8a      	ldr	r3, [pc, #552]	; (ddcc <_vfprintf_r+0x830>)
    dba2:	9319      	str	r3, [sp, #100]	; 0x64
    dba4:	e618      	b.n	d7d8 <_vfprintf_r+0x23c>
    dba6:	2301      	movs	r3, #1
    dba8:	431c      	orrs	r4, r3
    dbaa:	9b07      	ldr	r3, [sp, #28]
    dbac:	781b      	ldrb	r3, [r3, #0]
    dbae:	e57e      	b.n	d6ae <_vfprintf_r+0x112>
    dbb0:	2380      	movs	r3, #128	; 0x80
    dbb2:	431c      	orrs	r4, r3
    dbb4:	9b07      	ldr	r3, [sp, #28]
    dbb6:	781b      	ldrb	r3, [r3, #0]
    dbb8:	e579      	b.n	d6ae <_vfprintf_r+0x112>
    dbba:	9b07      	ldr	r3, [sp, #28]
    dbbc:	781b      	ldrb	r3, [r3, #0]
    dbbe:	2800      	cmp	r0, #0
    dbc0:	d000      	beq.n	dbc4 <_vfprintf_r+0x628>
    dbc2:	e574      	b.n	d6ae <_vfprintf_r+0x112>
    dbc4:	2101      	movs	r1, #1
    dbc6:	3020      	adds	r0, #32
    dbc8:	e571      	b.n	d6ae <_vfprintf_r+0x112>
    dbca:	9312      	str	r3, [sp, #72]	; 0x48
    dbcc:	2900      	cmp	r1, #0
    dbce:	d001      	beq.n	dbd4 <_vfprintf_r+0x638>
    dbd0:	f001 f839 	bl	ec46 <_vfprintf_r+0x16aa>
    dbd4:	2207      	movs	r2, #7
    dbd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    dbd8:	3307      	adds	r3, #7
    dbda:	4393      	bics	r3, r2
    dbdc:	3201      	adds	r2, #1
    dbde:	4694      	mov	ip, r2
    dbe0:	449c      	add	ip, r3
    dbe2:	4662      	mov	r2, ip
    dbe4:	920f      	str	r2, [sp, #60]	; 0x3c
    dbe6:	681a      	ldr	r2, [r3, #0]
    dbe8:	9216      	str	r2, [sp, #88]	; 0x58
    dbea:	685b      	ldr	r3, [r3, #4]
    dbec:	2201      	movs	r2, #1
    dbee:	9315      	str	r3, [sp, #84]	; 0x54
    dbf0:	9b15      	ldr	r3, [sp, #84]	; 0x54
    dbf2:	9d16      	ldr	r5, [sp, #88]	; 0x58
    dbf4:	005b      	lsls	r3, r3, #1
    dbf6:	085b      	lsrs	r3, r3, #1
    dbf8:	4698      	mov	r8, r3
    dbfa:	4252      	negs	r2, r2
    dbfc:	4b74      	ldr	r3, [pc, #464]	; (ddd0 <_vfprintf_r+0x834>)
    dbfe:	0028      	movs	r0, r5
    dc00:	4641      	mov	r1, r8
    dc02:	f7ff f94b 	bl	ce9c <__aeabi_dcmpun>
    dc06:	2800      	cmp	r0, #0
    dc08:	d001      	beq.n	dc0e <_vfprintf_r+0x672>
    dc0a:	f000 fcb4 	bl	e576 <_vfprintf_r+0xfda>
    dc0e:	2201      	movs	r2, #1
    dc10:	4b6f      	ldr	r3, [pc, #444]	; (ddd0 <_vfprintf_r+0x834>)
    dc12:	4252      	negs	r2, r2
    dc14:	0028      	movs	r0, r5
    dc16:	4641      	mov	r1, r8
    dc18:	f7fc fdca 	bl	a7b0 <__aeabi_dcmple>
    dc1c:	2800      	cmp	r0, #0
    dc1e:	d001      	beq.n	dc24 <_vfprintf_r+0x688>
    dc20:	f000 fca9 	bl	e576 <_vfprintf_r+0xfda>
    dc24:	2200      	movs	r2, #0
    dc26:	2300      	movs	r3, #0
    dc28:	9816      	ldr	r0, [sp, #88]	; 0x58
    dc2a:	9915      	ldr	r1, [sp, #84]	; 0x54
    dc2c:	f7fc fdb6 	bl	a79c <__aeabi_dcmplt>
    dc30:	2800      	cmp	r0, #0
    dc32:	d001      	beq.n	dc38 <_vfprintf_r+0x69c>
    dc34:	f000 fd55 	bl	e6e2 <_vfprintf_r+0x1146>
    dc38:	ab16      	add	r3, sp, #88	; 0x58
    dc3a:	7fdb      	ldrb	r3, [r3, #31]
    dc3c:	4698      	mov	r8, r3
    dc3e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    dc40:	2b47      	cmp	r3, #71	; 0x47
    dc42:	dd01      	ble.n	dc48 <_vfprintf_r+0x6ac>
    dc44:	f000 fdb4 	bl	e7b0 <_vfprintf_r+0x1214>
    dc48:	4b62      	ldr	r3, [pc, #392]	; (ddd4 <_vfprintf_r+0x838>)
    dc4a:	9311      	str	r3, [sp, #68]	; 0x44
    dc4c:	2380      	movs	r3, #128	; 0x80
    dc4e:	439c      	bics	r4, r3
    dc50:	3b7d      	subs	r3, #125	; 0x7d
    dc52:	9308      	str	r3, [sp, #32]
    dc54:	930e      	str	r3, [sp, #56]	; 0x38
    dc56:	2300      	movs	r3, #0
    dc58:	9409      	str	r4, [sp, #36]	; 0x24
    dc5a:	469a      	mov	sl, r3
    dc5c:	9313      	str	r3, [sp, #76]	; 0x4c
    dc5e:	e612      	b.n	d886 <_vfprintf_r+0x2ea>
    dc60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    dc62:	1d1a      	adds	r2, r3, #4
    dc64:	681b      	ldr	r3, [r3, #0]
    dc66:	930b      	str	r3, [sp, #44]	; 0x2c
    dc68:	2b00      	cmp	r3, #0
    dc6a:	da00      	bge.n	dc6e <_vfprintf_r+0x6d2>
    dc6c:	e578      	b.n	d760 <_vfprintf_r+0x1c4>
    dc6e:	9b07      	ldr	r3, [sp, #28]
    dc70:	920f      	str	r2, [sp, #60]	; 0x3c
    dc72:	781b      	ldrb	r3, [r3, #0]
    dc74:	e51b      	b.n	d6ae <_vfprintf_r+0x112>
    dc76:	9312      	str	r3, [sp, #72]	; 0x48
    dc78:	2900      	cmp	r1, #0
    dc7a:	d001      	beq.n	dc80 <_vfprintf_r+0x6e4>
    dc7c:	f000 ffcc 	bl	ec18 <_vfprintf_r+0x167c>
    dc80:	2310      	movs	r3, #16
    dc82:	431c      	orrs	r4, r3
    dc84:	e69a      	b.n	d9bc <_vfprintf_r+0x420>
    dc86:	9312      	str	r3, [sp, #72]	; 0x48
    dc88:	e771      	b.n	db6e <_vfprintf_r+0x5d2>
    dc8a:	9312      	str	r3, [sp, #72]	; 0x48
    dc8c:	e758      	b.n	db40 <_vfprintf_r+0x5a4>
    dc8e:	9312      	str	r3, [sp, #72]	; 0x48
    dc90:	2900      	cmp	r1, #0
    dc92:	d001      	beq.n	dc98 <_vfprintf_r+0x6fc>
    dc94:	f000 ffd3 	bl	ec3e <_vfprintf_r+0x16a2>
    dc98:	9b12      	ldr	r3, [sp, #72]	; 0x48
    dc9a:	2b00      	cmp	r3, #0
    dc9c:	d100      	bne.n	dca0 <_vfprintf_r+0x704>
    dc9e:	e18d      	b.n	dfbc <_vfprintf_r+0xa20>
    dca0:	ad28      	add	r5, sp, #160	; 0xa0
    dca2:	702b      	strb	r3, [r5, #0]
    dca4:	2300      	movs	r3, #0
    dca6:	aa16      	add	r2, sp, #88	; 0x58
    dca8:	77d3      	strb	r3, [r2, #31]
    dcaa:	9409      	str	r4, [sp, #36]	; 0x24
    dcac:	e678      	b.n	d9a0 <_vfprintf_r+0x404>
    dcae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    dcb0:	990a      	ldr	r1, [sp, #40]	; 0x28
    dcb2:	6813      	ldr	r3, [r2, #0]
    dcb4:	6019      	str	r1, [r3, #0]
    dcb6:	0013      	movs	r3, r2
    dcb8:	3304      	adds	r3, #4
    dcba:	930f      	str	r3, [sp, #60]	; 0x3c
    dcbc:	e4bc      	b.n	d638 <_vfprintf_r+0x9c>
    dcbe:	68bc      	ldr	r4, [r7, #8]
    dcc0:	4643      	mov	r3, r8
    dcc2:	2b00      	cmp	r3, #0
    dcc4:	d00f      	beq.n	dce6 <_vfprintf_r+0x74a>
    dcc6:	aa16      	add	r2, sp, #88	; 0x58
    dcc8:	231f      	movs	r3, #31
    dcca:	4694      	mov	ip, r2
    dccc:	4463      	add	r3, ip
    dcce:	6033      	str	r3, [r6, #0]
    dcd0:	2301      	movs	r3, #1
    dcd2:	6073      	str	r3, [r6, #4]
    dcd4:	687b      	ldr	r3, [r7, #4]
    dcd6:	3401      	adds	r4, #1
    dcd8:	3301      	adds	r3, #1
    dcda:	60bc      	str	r4, [r7, #8]
    dcdc:	607b      	str	r3, [r7, #4]
    dcde:	2b07      	cmp	r3, #7
    dce0:	dd00      	ble.n	dce4 <_vfprintf_r+0x748>
    dce2:	e203      	b.n	e0ec <_vfprintf_r+0xb50>
    dce4:	3608      	adds	r6, #8
    dce6:	464b      	mov	r3, r9
    dce8:	2b00      	cmp	r3, #0
    dcea:	d00c      	beq.n	dd06 <_vfprintf_r+0x76a>
    dcec:	ab1e      	add	r3, sp, #120	; 0x78
    dcee:	6033      	str	r3, [r6, #0]
    dcf0:	2302      	movs	r3, #2
    dcf2:	6073      	str	r3, [r6, #4]
    dcf4:	687b      	ldr	r3, [r7, #4]
    dcf6:	3402      	adds	r4, #2
    dcf8:	3301      	adds	r3, #1
    dcfa:	60bc      	str	r4, [r7, #8]
    dcfc:	607b      	str	r3, [r7, #4]
    dcfe:	2b07      	cmp	r3, #7
    dd00:	dd00      	ble.n	dd04 <_vfprintf_r+0x768>
    dd02:	e1fd      	b.n	e100 <_vfprintf_r+0xb64>
    dd04:	3608      	adds	r6, #8
    dd06:	9b10      	ldr	r3, [sp, #64]	; 0x40
    dd08:	2b80      	cmp	r3, #128	; 0x80
    dd0a:	d100      	bne.n	dd0e <_vfprintf_r+0x772>
    dd0c:	e173      	b.n	dff6 <_vfprintf_r+0xa5a>
    dd0e:	4653      	mov	r3, sl
    dd10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    dd12:	1a9d      	subs	r5, r3, r2
    dd14:	2d00      	cmp	r5, #0
    dd16:	dd32      	ble.n	dd7e <_vfprintf_r+0x7e2>
    dd18:	4a2f      	ldr	r2, [pc, #188]	; (ddd8 <_vfprintf_r+0x83c>)
    dd1a:	687b      	ldr	r3, [r7, #4]
    dd1c:	4691      	mov	r9, r2
    dd1e:	2d10      	cmp	r5, #16
    dd20:	dd22      	ble.n	dd68 <_vfprintf_r+0x7cc>
    dd22:	2210      	movs	r2, #16
    dd24:	4692      	mov	sl, r2
    dd26:	0022      	movs	r2, r4
    dd28:	465c      	mov	r4, fp
    dd2a:	e003      	b.n	dd34 <_vfprintf_r+0x798>
    dd2c:	3d10      	subs	r5, #16
    dd2e:	3608      	adds	r6, #8
    dd30:	2d10      	cmp	r5, #16
    dd32:	dd17      	ble.n	dd64 <_vfprintf_r+0x7c8>
    dd34:	4649      	mov	r1, r9
    dd36:	6031      	str	r1, [r6, #0]
    dd38:	4651      	mov	r1, sl
    dd3a:	3210      	adds	r2, #16
    dd3c:	3301      	adds	r3, #1
    dd3e:	6071      	str	r1, [r6, #4]
    dd40:	60ba      	str	r2, [r7, #8]
    dd42:	607b      	str	r3, [r7, #4]
    dd44:	2b07      	cmp	r3, #7
    dd46:	ddf1      	ble.n	dd2c <_vfprintf_r+0x790>
    dd48:	003a      	movs	r2, r7
    dd4a:	0021      	movs	r1, r4
    dd4c:	9806      	ldr	r0, [sp, #24]
    dd4e:	f003 ff01 	bl	11b54 <__sprint_r>
    dd52:	2800      	cmp	r0, #0
    dd54:	d000      	beq.n	dd58 <_vfprintf_r+0x7bc>
    dd56:	e18a      	b.n	e06e <_vfprintf_r+0xad2>
    dd58:	3d10      	subs	r5, #16
    dd5a:	68ba      	ldr	r2, [r7, #8]
    dd5c:	687b      	ldr	r3, [r7, #4]
    dd5e:	ae32      	add	r6, sp, #200	; 0xc8
    dd60:	2d10      	cmp	r5, #16
    dd62:	dce7      	bgt.n	dd34 <_vfprintf_r+0x798>
    dd64:	46a3      	mov	fp, r4
    dd66:	0014      	movs	r4, r2
    dd68:	464a      	mov	r2, r9
    dd6a:	1964      	adds	r4, r4, r5
    dd6c:	3301      	adds	r3, #1
    dd6e:	6032      	str	r2, [r6, #0]
    dd70:	6075      	str	r5, [r6, #4]
    dd72:	60bc      	str	r4, [r7, #8]
    dd74:	607b      	str	r3, [r7, #4]
    dd76:	2b07      	cmp	r3, #7
    dd78:	dd00      	ble.n	dd7c <_vfprintf_r+0x7e0>
    dd7a:	e1ad      	b.n	e0d8 <_vfprintf_r+0xb3c>
    dd7c:	3608      	adds	r6, #8
    dd7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    dd80:	05db      	lsls	r3, r3, #23
    dd82:	d500      	bpl.n	dd86 <_vfprintf_r+0x7ea>
    dd84:	e0be      	b.n	df04 <_vfprintf_r+0x968>
    dd86:	9b11      	ldr	r3, [sp, #68]	; 0x44
    dd88:	6033      	str	r3, [r6, #0]
    dd8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    dd8c:	469c      	mov	ip, r3
    dd8e:	6073      	str	r3, [r6, #4]
    dd90:	687b      	ldr	r3, [r7, #4]
    dd92:	4464      	add	r4, ip
    dd94:	3301      	adds	r3, #1
    dd96:	60bc      	str	r4, [r7, #8]
    dd98:	607b      	str	r3, [r7, #4]
    dd9a:	2b07      	cmp	r3, #7
    dd9c:	dd00      	ble.n	dda0 <_vfprintf_r+0x804>
    dd9e:	e0a6      	b.n	deee <_vfprintf_r+0x952>
    dda0:	3608      	adds	r6, #8
    dda2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    dda4:	075b      	lsls	r3, r3, #29
    dda6:	d54a      	bpl.n	de3e <_vfprintf_r+0x8a2>
    dda8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ddaa:	9a08      	ldr	r2, [sp, #32]
    ddac:	1a9d      	subs	r5, r3, r2
    ddae:	2d00      	cmp	r5, #0
    ddb0:	dd45      	ble.n	de3e <_vfprintf_r+0x8a2>
    ddb2:	4a0a      	ldr	r2, [pc, #40]	; (dddc <_vfprintf_r+0x840>)
    ddb4:	687b      	ldr	r3, [r7, #4]
    ddb6:	4690      	mov	r8, r2
    ddb8:	2d10      	cmp	r5, #16
    ddba:	dd2f      	ble.n	de1c <_vfprintf_r+0x880>
    ddbc:	2210      	movs	r2, #16
    ddbe:	4691      	mov	r9, r2
    ddc0:	0022      	movs	r2, r4
    ddc2:	465c      	mov	r4, fp
    ddc4:	e010      	b.n	dde8 <_vfprintf_r+0x84c>
    ddc6:	46c0      	nop			; (mov r8, r8)
    ddc8:	000125f8 	.word	0x000125f8
    ddcc:	000125e4 	.word	0x000125e4
    ddd0:	7fefffff 	.word	0x7fefffff
    ddd4:	000125d4 	.word	0x000125d4
    ddd8:	00012628 	.word	0x00012628
    dddc:	00012618 	.word	0x00012618
    dde0:	3d10      	subs	r5, #16
    dde2:	3608      	adds	r6, #8
    dde4:	2d10      	cmp	r5, #16
    dde6:	dd17      	ble.n	de18 <_vfprintf_r+0x87c>
    dde8:	49d1      	ldr	r1, [pc, #836]	; (e130 <_vfprintf_r+0xb94>)
    ddea:	3210      	adds	r2, #16
    ddec:	6031      	str	r1, [r6, #0]
    ddee:	4649      	mov	r1, r9
    ddf0:	3301      	adds	r3, #1
    ddf2:	6071      	str	r1, [r6, #4]
    ddf4:	60ba      	str	r2, [r7, #8]
    ddf6:	607b      	str	r3, [r7, #4]
    ddf8:	2b07      	cmp	r3, #7
    ddfa:	ddf1      	ble.n	dde0 <_vfprintf_r+0x844>
    ddfc:	003a      	movs	r2, r7
    ddfe:	0021      	movs	r1, r4
    de00:	9806      	ldr	r0, [sp, #24]
    de02:	f003 fea7 	bl	11b54 <__sprint_r>
    de06:	2800      	cmp	r0, #0
    de08:	d000      	beq.n	de0c <_vfprintf_r+0x870>
    de0a:	e130      	b.n	e06e <_vfprintf_r+0xad2>
    de0c:	3d10      	subs	r5, #16
    de0e:	68ba      	ldr	r2, [r7, #8]
    de10:	687b      	ldr	r3, [r7, #4]
    de12:	ae32      	add	r6, sp, #200	; 0xc8
    de14:	2d10      	cmp	r5, #16
    de16:	dce7      	bgt.n	dde8 <_vfprintf_r+0x84c>
    de18:	46a3      	mov	fp, r4
    de1a:	0014      	movs	r4, r2
    de1c:	4642      	mov	r2, r8
    de1e:	1964      	adds	r4, r4, r5
    de20:	3301      	adds	r3, #1
    de22:	c624      	stmia	r6!, {r2, r5}
    de24:	60bc      	str	r4, [r7, #8]
    de26:	607b      	str	r3, [r7, #4]
    de28:	2b07      	cmp	r3, #7
    de2a:	dd08      	ble.n	de3e <_vfprintf_r+0x8a2>
    de2c:	003a      	movs	r2, r7
    de2e:	4659      	mov	r1, fp
    de30:	9806      	ldr	r0, [sp, #24]
    de32:	f003 fe8f 	bl	11b54 <__sprint_r>
    de36:	2800      	cmp	r0, #0
    de38:	d000      	beq.n	de3c <_vfprintf_r+0x8a0>
    de3a:	e13f      	b.n	e0bc <_vfprintf_r+0xb20>
    de3c:	68bc      	ldr	r4, [r7, #8]
    de3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    de40:	9908      	ldr	r1, [sp, #32]
    de42:	428b      	cmp	r3, r1
    de44:	da00      	bge.n	de48 <_vfprintf_r+0x8ac>
    de46:	000b      	movs	r3, r1
    de48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    de4a:	4694      	mov	ip, r2
    de4c:	449c      	add	ip, r3
    de4e:	4663      	mov	r3, ip
    de50:	930a      	str	r3, [sp, #40]	; 0x28
    de52:	2c00      	cmp	r4, #0
    de54:	d000      	beq.n	de58 <_vfprintf_r+0x8bc>
    de56:	e129      	b.n	e0ac <_vfprintf_r+0xb10>
    de58:	2300      	movs	r3, #0
    de5a:	ae32      	add	r6, sp, #200	; 0xc8
    de5c:	607b      	str	r3, [r7, #4]
    de5e:	f7ff fbeb 	bl	d638 <_vfprintf_r+0x9c>
    de62:	9b14      	ldr	r3, [sp, #80]	; 0x50
    de64:	2b01      	cmp	r3, #1
    de66:	dc00      	bgt.n	de6a <_vfprintf_r+0x8ce>
    de68:	e103      	b.n	e072 <_vfprintf_r+0xad6>
    de6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    de6c:	3401      	adds	r4, #1
    de6e:	6033      	str	r3, [r6, #0]
    de70:	2301      	movs	r3, #1
    de72:	6073      	str	r3, [r6, #4]
    de74:	687b      	ldr	r3, [r7, #4]
    de76:	60bc      	str	r4, [r7, #8]
    de78:	3301      	adds	r3, #1
    de7a:	607b      	str	r3, [r7, #4]
    de7c:	2b07      	cmp	r3, #7
    de7e:	dd00      	ble.n	de82 <_vfprintf_r+0x8e6>
    de80:	e2ef      	b.n	e462 <_vfprintf_r+0xec6>
    de82:	3608      	adds	r6, #8
    de84:	9a18      	ldr	r2, [sp, #96]	; 0x60
    de86:	3301      	adds	r3, #1
    de88:	6032      	str	r2, [r6, #0]
    de8a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    de8c:	4698      	mov	r8, r3
    de8e:	4694      	mov	ip, r2
    de90:	4464      	add	r4, ip
    de92:	6072      	str	r2, [r6, #4]
    de94:	60bc      	str	r4, [r7, #8]
    de96:	607b      	str	r3, [r7, #4]
    de98:	2b07      	cmp	r3, #7
    de9a:	dd00      	ble.n	de9e <_vfprintf_r+0x902>
    de9c:	e318      	b.n	e4d0 <_vfprintf_r+0xf34>
    de9e:	3608      	adds	r6, #8
    dea0:	2200      	movs	r2, #0
    dea2:	2300      	movs	r3, #0
    dea4:	9816      	ldr	r0, [sp, #88]	; 0x58
    dea6:	9915      	ldr	r1, [sp, #84]	; 0x54
    dea8:	f7fc fc72 	bl	a790 <__aeabi_dcmpeq>
    deac:	2800      	cmp	r0, #0
    deae:	d000      	beq.n	deb2 <_vfprintf_r+0x916>
    deb0:	e1f4      	b.n	e29c <_vfprintf_r+0xd00>
    deb2:	9d11      	ldr	r5, [sp, #68]	; 0x44
    deb4:	9b14      	ldr	r3, [sp, #80]	; 0x50
    deb6:	3501      	adds	r5, #1
    deb8:	3b01      	subs	r3, #1
    deba:	6035      	str	r5, [r6, #0]
    debc:	6073      	str	r3, [r6, #4]
    debe:	18e4      	adds	r4, r4, r3
    dec0:	2301      	movs	r3, #1
    dec2:	469c      	mov	ip, r3
    dec4:	44e0      	add	r8, ip
    dec6:	4643      	mov	r3, r8
    dec8:	60bc      	str	r4, [r7, #8]
    deca:	607b      	str	r3, [r7, #4]
    decc:	2b07      	cmp	r3, #7
    dece:	dd00      	ble.n	ded2 <_vfprintf_r+0x936>
    ded0:	e0e0      	b.n	e094 <_vfprintf_r+0xaf8>
    ded2:	3608      	adds	r6, #8
    ded4:	ab21      	add	r3, sp, #132	; 0x84
    ded6:	6033      	str	r3, [r6, #0]
    ded8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    deda:	469c      	mov	ip, r3
    dedc:	6073      	str	r3, [r6, #4]
    dede:	4643      	mov	r3, r8
    dee0:	4464      	add	r4, ip
    dee2:	3301      	adds	r3, #1
    dee4:	60bc      	str	r4, [r7, #8]
    dee6:	607b      	str	r3, [r7, #4]
    dee8:	2b07      	cmp	r3, #7
    deea:	dc00      	bgt.n	deee <_vfprintf_r+0x952>
    deec:	e758      	b.n	dda0 <_vfprintf_r+0x804>
    deee:	003a      	movs	r2, r7
    def0:	4659      	mov	r1, fp
    def2:	9806      	ldr	r0, [sp, #24]
    def4:	f003 fe2e 	bl	11b54 <__sprint_r>
    def8:	2800      	cmp	r0, #0
    defa:	d000      	beq.n	defe <_vfprintf_r+0x962>
    defc:	e0de      	b.n	e0bc <_vfprintf_r+0xb20>
    defe:	68bc      	ldr	r4, [r7, #8]
    df00:	ae32      	add	r6, sp, #200	; 0xc8
    df02:	e74e      	b.n	dda2 <_vfprintf_r+0x806>
    df04:	9b12      	ldr	r3, [sp, #72]	; 0x48
    df06:	2b65      	cmp	r3, #101	; 0x65
    df08:	ddab      	ble.n	de62 <_vfprintf_r+0x8c6>
    df0a:	2200      	movs	r2, #0
    df0c:	2300      	movs	r3, #0
    df0e:	9816      	ldr	r0, [sp, #88]	; 0x58
    df10:	9915      	ldr	r1, [sp, #84]	; 0x54
    df12:	f7fc fc3d 	bl	a790 <__aeabi_dcmpeq>
    df16:	2800      	cmp	r0, #0
    df18:	d100      	bne.n	df1c <_vfprintf_r+0x980>
    df1a:	e134      	b.n	e186 <_vfprintf_r+0xbea>
    df1c:	4b85      	ldr	r3, [pc, #532]	; (e134 <_vfprintf_r+0xb98>)
    df1e:	3401      	adds	r4, #1
    df20:	6033      	str	r3, [r6, #0]
    df22:	2301      	movs	r3, #1
    df24:	6073      	str	r3, [r6, #4]
    df26:	687b      	ldr	r3, [r7, #4]
    df28:	60bc      	str	r4, [r7, #8]
    df2a:	3301      	adds	r3, #1
    df2c:	607b      	str	r3, [r7, #4]
    df2e:	2b07      	cmp	r3, #7
    df30:	dd00      	ble.n	df34 <_vfprintf_r+0x998>
    df32:	e3dc      	b.n	e6ee <_vfprintf_r+0x1152>
    df34:	3608      	adds	r6, #8
    df36:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    df38:	9a14      	ldr	r2, [sp, #80]	; 0x50
    df3a:	4293      	cmp	r3, r2
    df3c:	db03      	blt.n	df46 <_vfprintf_r+0x9aa>
    df3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    df40:	07db      	lsls	r3, r3, #31
    df42:	d400      	bmi.n	df46 <_vfprintf_r+0x9aa>
    df44:	e3b7      	b.n	e6b6 <_vfprintf_r+0x111a>
    df46:	9b18      	ldr	r3, [sp, #96]	; 0x60
    df48:	68ba      	ldr	r2, [r7, #8]
    df4a:	6033      	str	r3, [r6, #0]
    df4c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    df4e:	469c      	mov	ip, r3
    df50:	6073      	str	r3, [r6, #4]
    df52:	687b      	ldr	r3, [r7, #4]
    df54:	4462      	add	r2, ip
    df56:	3301      	adds	r3, #1
    df58:	0014      	movs	r4, r2
    df5a:	60ba      	str	r2, [r7, #8]
    df5c:	607b      	str	r3, [r7, #4]
    df5e:	2b07      	cmp	r3, #7
    df60:	dd01      	ble.n	df66 <_vfprintf_r+0x9ca>
    df62:	f000 fc19 	bl	e798 <_vfprintf_r+0x11fc>
    df66:	3608      	adds	r6, #8
    df68:	9b14      	ldr	r3, [sp, #80]	; 0x50
    df6a:	1e5d      	subs	r5, r3, #1
    df6c:	2d00      	cmp	r5, #0
    df6e:	dc00      	bgt.n	df72 <_vfprintf_r+0x9d6>
    df70:	e717      	b.n	dda2 <_vfprintf_r+0x806>
    df72:	4a71      	ldr	r2, [pc, #452]	; (e138 <_vfprintf_r+0xb9c>)
    df74:	687b      	ldr	r3, [r7, #4]
    df76:	4691      	mov	r9, r2
    df78:	2d10      	cmp	r5, #16
    df7a:	dc00      	bgt.n	df7e <_vfprintf_r+0x9e2>
    df7c:	e1c3      	b.n	e306 <_vfprintf_r+0xd6a>
    df7e:	2210      	movs	r2, #16
    df80:	4690      	mov	r8, r2
    df82:	0022      	movs	r2, r4
    df84:	464c      	mov	r4, r9
    df86:	46d9      	mov	r9, fp
    df88:	e004      	b.n	df94 <_vfprintf_r+0x9f8>
    df8a:	3608      	adds	r6, #8
    df8c:	3d10      	subs	r5, #16
    df8e:	2d10      	cmp	r5, #16
    df90:	dc00      	bgt.n	df94 <_vfprintf_r+0x9f8>
    df92:	e37c      	b.n	e68e <_vfprintf_r+0x10f2>
    df94:	4641      	mov	r1, r8
    df96:	3210      	adds	r2, #16
    df98:	3301      	adds	r3, #1
    df9a:	6034      	str	r4, [r6, #0]
    df9c:	6071      	str	r1, [r6, #4]
    df9e:	60ba      	str	r2, [r7, #8]
    dfa0:	607b      	str	r3, [r7, #4]
    dfa2:	2b07      	cmp	r3, #7
    dfa4:	ddf1      	ble.n	df8a <_vfprintf_r+0x9ee>
    dfa6:	003a      	movs	r2, r7
    dfa8:	4649      	mov	r1, r9
    dfaa:	9806      	ldr	r0, [sp, #24]
    dfac:	f003 fdd2 	bl	11b54 <__sprint_r>
    dfb0:	2800      	cmp	r0, #0
    dfb2:	d10b      	bne.n	dfcc <_vfprintf_r+0xa30>
    dfb4:	68ba      	ldr	r2, [r7, #8]
    dfb6:	687b      	ldr	r3, [r7, #4]
    dfb8:	ae32      	add	r6, sp, #200	; 0xc8
    dfba:	e7e7      	b.n	df8c <_vfprintf_r+0x9f0>
    dfbc:	68bb      	ldr	r3, [r7, #8]
    dfbe:	46d9      	mov	r9, fp
    dfc0:	2b00      	cmp	r3, #0
    dfc2:	d001      	beq.n	dfc8 <_vfprintf_r+0xa2c>
    dfc4:	f000 fd4c 	bl	ea60 <_vfprintf_r+0x14c4>
    dfc8:	2300      	movs	r3, #0
    dfca:	607b      	str	r3, [r7, #4]
    dfcc:	464b      	mov	r3, r9
    dfce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    dfd0:	07db      	lsls	r3, r3, #31
    dfd2:	d40d      	bmi.n	dff0 <_vfprintf_r+0xa54>
    dfd4:	464b      	mov	r3, r9
    dfd6:	899b      	ldrh	r3, [r3, #12]
    dfd8:	059a      	lsls	r2, r3, #22
    dfda:	d505      	bpl.n	dfe8 <_vfprintf_r+0xa4c>
    dfdc:	065b      	lsls	r3, r3, #25
    dfde:	d401      	bmi.n	dfe4 <_vfprintf_r+0xa48>
    dfe0:	f7ff fb8d 	bl	d6fe <_vfprintf_r+0x162>
    dfe4:	f7ff fb88 	bl	d6f8 <_vfprintf_r+0x15c>
    dfe8:	464b      	mov	r3, r9
    dfea:	6d98      	ldr	r0, [r3, #88]	; 0x58
    dfec:	f002 fc32 	bl	10854 <__retarget_lock_release_recursive>
    dff0:	464b      	mov	r3, r9
    dff2:	899b      	ldrh	r3, [r3, #12]
    dff4:	e7f2      	b.n	dfdc <_vfprintf_r+0xa40>
    dff6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    dff8:	9a08      	ldr	r2, [sp, #32]
    dffa:	1a9d      	subs	r5, r3, r2
    dffc:	2d00      	cmp	r5, #0
    dffe:	dc00      	bgt.n	e002 <_vfprintf_r+0xa66>
    e000:	e685      	b.n	dd0e <_vfprintf_r+0x772>
    e002:	4a4d      	ldr	r2, [pc, #308]	; (e138 <_vfprintf_r+0xb9c>)
    e004:	687b      	ldr	r3, [r7, #4]
    e006:	4691      	mov	r9, r2
    e008:	2d10      	cmp	r5, #16
    e00a:	dd24      	ble.n	e056 <_vfprintf_r+0xaba>
    e00c:	2210      	movs	r2, #16
    e00e:	0021      	movs	r1, r4
    e010:	4690      	mov	r8, r2
    e012:	465c      	mov	r4, fp
    e014:	0032      	movs	r2, r6
    e016:	464e      	mov	r6, r9
    e018:	e003      	b.n	e022 <_vfprintf_r+0xa86>
    e01a:	3d10      	subs	r5, #16
    e01c:	3208      	adds	r2, #8
    e01e:	2d10      	cmp	r5, #16
    e020:	dd15      	ble.n	e04e <_vfprintf_r+0xab2>
    e022:	4640      	mov	r0, r8
    e024:	3110      	adds	r1, #16
    e026:	3301      	adds	r3, #1
    e028:	6016      	str	r6, [r2, #0]
    e02a:	6050      	str	r0, [r2, #4]
    e02c:	60b9      	str	r1, [r7, #8]
    e02e:	607b      	str	r3, [r7, #4]
    e030:	2b07      	cmp	r3, #7
    e032:	ddf2      	ble.n	e01a <_vfprintf_r+0xa7e>
    e034:	003a      	movs	r2, r7
    e036:	0021      	movs	r1, r4
    e038:	9806      	ldr	r0, [sp, #24]
    e03a:	f003 fd8b 	bl	11b54 <__sprint_r>
    e03e:	2800      	cmp	r0, #0
    e040:	d115      	bne.n	e06e <_vfprintf_r+0xad2>
    e042:	3d10      	subs	r5, #16
    e044:	68b9      	ldr	r1, [r7, #8]
    e046:	687b      	ldr	r3, [r7, #4]
    e048:	aa32      	add	r2, sp, #200	; 0xc8
    e04a:	2d10      	cmp	r5, #16
    e04c:	dce9      	bgt.n	e022 <_vfprintf_r+0xa86>
    e04e:	46a3      	mov	fp, r4
    e050:	46b1      	mov	r9, r6
    e052:	000c      	movs	r4, r1
    e054:	0016      	movs	r6, r2
    e056:	464a      	mov	r2, r9
    e058:	1964      	adds	r4, r4, r5
    e05a:	3301      	adds	r3, #1
    e05c:	6032      	str	r2, [r6, #0]
    e05e:	6075      	str	r5, [r6, #4]
    e060:	60bc      	str	r4, [r7, #8]
    e062:	607b      	str	r3, [r7, #4]
    e064:	2b07      	cmp	r3, #7
    e066:	dd00      	ble.n	e06a <_vfprintf_r+0xace>
    e068:	e263      	b.n	e532 <_vfprintf_r+0xf96>
    e06a:	3608      	adds	r6, #8
    e06c:	e64f      	b.n	dd0e <_vfprintf_r+0x772>
    e06e:	46a1      	mov	r9, r4
    e070:	e7ac      	b.n	dfcc <_vfprintf_r+0xa30>
    e072:	2301      	movs	r3, #1
    e074:	9a09      	ldr	r2, [sp, #36]	; 0x24
    e076:	4213      	tst	r3, r2
    e078:	d000      	beq.n	e07c <_vfprintf_r+0xae0>
    e07a:	e6f6      	b.n	de6a <_vfprintf_r+0x8ce>
    e07c:	6073      	str	r3, [r6, #4]
    e07e:	687b      	ldr	r3, [r7, #4]
    e080:	9a11      	ldr	r2, [sp, #68]	; 0x44
    e082:	3301      	adds	r3, #1
    e084:	3401      	adds	r4, #1
    e086:	6032      	str	r2, [r6, #0]
    e088:	60bc      	str	r4, [r7, #8]
    e08a:	4698      	mov	r8, r3
    e08c:	607b      	str	r3, [r7, #4]
    e08e:	2b07      	cmp	r3, #7
    e090:	dc00      	bgt.n	e094 <_vfprintf_r+0xaf8>
    e092:	e71e      	b.n	ded2 <_vfprintf_r+0x936>
    e094:	003a      	movs	r2, r7
    e096:	4659      	mov	r1, fp
    e098:	9806      	ldr	r0, [sp, #24]
    e09a:	f003 fd5b 	bl	11b54 <__sprint_r>
    e09e:	2800      	cmp	r0, #0
    e0a0:	d10c      	bne.n	e0bc <_vfprintf_r+0xb20>
    e0a2:	687b      	ldr	r3, [r7, #4]
    e0a4:	68bc      	ldr	r4, [r7, #8]
    e0a6:	4698      	mov	r8, r3
    e0a8:	ae32      	add	r6, sp, #200	; 0xc8
    e0aa:	e713      	b.n	ded4 <_vfprintf_r+0x938>
    e0ac:	003a      	movs	r2, r7
    e0ae:	4659      	mov	r1, fp
    e0b0:	9806      	ldr	r0, [sp, #24]
    e0b2:	f003 fd4f 	bl	11b54 <__sprint_r>
    e0b6:	2800      	cmp	r0, #0
    e0b8:	d100      	bne.n	e0bc <_vfprintf_r+0xb20>
    e0ba:	e6cd      	b.n	de58 <_vfprintf_r+0x8bc>
    e0bc:	46d9      	mov	r9, fp
    e0be:	e785      	b.n	dfcc <_vfprintf_r+0xa30>
    e0c0:	9c09      	ldr	r4, [sp, #36]	; 0x24
    e0c2:	2b01      	cmp	r3, #1
    e0c4:	d100      	bne.n	e0c8 <_vfprintf_r+0xb2c>
    e0c6:	e148      	b.n	e35a <_vfprintf_r+0xdbe>
    e0c8:	2b02      	cmp	r3, #2
    e0ca:	d123      	bne.n	e114 <_vfprintf_r+0xb78>
    e0cc:	9409      	str	r4, [sp, #36]	; 0x24
    e0ce:	2300      	movs	r3, #0
    e0d0:	2400      	movs	r4, #0
    e0d2:	930c      	str	r3, [sp, #48]	; 0x30
    e0d4:	940d      	str	r4, [sp, #52]	; 0x34
    e0d6:	e4a1      	b.n	da1c <_vfprintf_r+0x480>
    e0d8:	003a      	movs	r2, r7
    e0da:	4659      	mov	r1, fp
    e0dc:	9806      	ldr	r0, [sp, #24]
    e0de:	f003 fd39 	bl	11b54 <__sprint_r>
    e0e2:	2800      	cmp	r0, #0
    e0e4:	d1ea      	bne.n	e0bc <_vfprintf_r+0xb20>
    e0e6:	68bc      	ldr	r4, [r7, #8]
    e0e8:	ae32      	add	r6, sp, #200	; 0xc8
    e0ea:	e648      	b.n	dd7e <_vfprintf_r+0x7e2>
    e0ec:	003a      	movs	r2, r7
    e0ee:	4659      	mov	r1, fp
    e0f0:	9806      	ldr	r0, [sp, #24]
    e0f2:	f003 fd2f 	bl	11b54 <__sprint_r>
    e0f6:	2800      	cmp	r0, #0
    e0f8:	d1e0      	bne.n	e0bc <_vfprintf_r+0xb20>
    e0fa:	68bc      	ldr	r4, [r7, #8]
    e0fc:	ae32      	add	r6, sp, #200	; 0xc8
    e0fe:	e5f2      	b.n	dce6 <_vfprintf_r+0x74a>
    e100:	003a      	movs	r2, r7
    e102:	4659      	mov	r1, fp
    e104:	9806      	ldr	r0, [sp, #24]
    e106:	f003 fd25 	bl	11b54 <__sprint_r>
    e10a:	2800      	cmp	r0, #0
    e10c:	d1d6      	bne.n	e0bc <_vfprintf_r+0xb20>
    e10e:	68bc      	ldr	r4, [r7, #8]
    e110:	ae32      	add	r6, sp, #200	; 0xc8
    e112:	e5f8      	b.n	dd06 <_vfprintf_r+0x76a>
    e114:	9409      	str	r4, [sp, #36]	; 0x24
    e116:	2300      	movs	r3, #0
    e118:	2400      	movs	r4, #0
    e11a:	930c      	str	r3, [sp, #48]	; 0x30
    e11c:	940d      	str	r4, [sp, #52]	; 0x34
    e11e:	980c      	ldr	r0, [sp, #48]	; 0x30
    e120:	990d      	ldr	r1, [sp, #52]	; 0x34
    e122:	4653      	mov	r3, sl
    e124:	aa32      	add	r2, sp, #200	; 0xc8
    e126:	4691      	mov	r9, r2
    e128:	9308      	str	r3, [sp, #32]
    e12a:	46b2      	mov	sl, r6
    e12c:	e007      	b.n	e13e <_vfprintf_r+0xba2>
    e12e:	46c0      	nop			; (mov r8, r8)
    e130:	00012618 	.word	0x00012618
    e134:	00012614 	.word	0x00012614
    e138:	00012628 	.word	0x00012628
    e13c:	46a1      	mov	r9, r4
    e13e:	074a      	lsls	r2, r1, #29
    e140:	4694      	mov	ip, r2
    e142:	464b      	mov	r3, r9
    e144:	4665      	mov	r5, ip
    e146:	1e5c      	subs	r4, r3, #1
    e148:	08c6      	lsrs	r6, r0, #3
    e14a:	2307      	movs	r3, #7
    e14c:	08ca      	lsrs	r2, r1, #3
    e14e:	4335      	orrs	r5, r6
    e150:	0011      	movs	r1, r2
    e152:	002a      	movs	r2, r5
    e154:	4003      	ands	r3, r0
    e156:	3330      	adds	r3, #48	; 0x30
    e158:	7023      	strb	r3, [r4, #0]
    e15a:	0028      	movs	r0, r5
    e15c:	430a      	orrs	r2, r1
    e15e:	d1ed      	bne.n	e13c <_vfprintf_r+0xba0>
    e160:	900c      	str	r0, [sp, #48]	; 0x30
    e162:	910d      	str	r1, [sp, #52]	; 0x34
    e164:	9908      	ldr	r1, [sp, #32]
    e166:	4656      	mov	r6, sl
    e168:	468a      	mov	sl, r1
    e16a:	9909      	ldr	r1, [sp, #36]	; 0x24
    e16c:	464a      	mov	r2, r9
    e16e:	9411      	str	r4, [sp, #68]	; 0x44
    e170:	07c9      	lsls	r1, r1, #31
    e172:	d500      	bpl.n	e176 <_vfprintf_r+0xbda>
    e174:	e0e0      	b.n	e338 <_vfprintf_r+0xd9c>
    e176:	ab32      	add	r3, sp, #200	; 0xc8
    e178:	1b1b      	subs	r3, r3, r4
    e17a:	930e      	str	r3, [sp, #56]	; 0x38
    e17c:	f7ff fb7b 	bl	d876 <_vfprintf_r+0x2da>
    e180:	9c07      	ldr	r4, [sp, #28]
    e182:	f7ff fa7d 	bl	d680 <_vfprintf_r+0xe4>
    e186:	981f      	ldr	r0, [sp, #124]	; 0x7c
    e188:	2800      	cmp	r0, #0
    e18a:	dc00      	bgt.n	e18e <_vfprintf_r+0xbf2>
    e18c:	e2b9      	b.n	e702 <_vfprintf_r+0x1166>
    e18e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    e190:	9914      	ldr	r1, [sp, #80]	; 0x50
    e192:	0013      	movs	r3, r2
    e194:	4690      	mov	r8, r2
    e196:	428b      	cmp	r3, r1
    e198:	dd00      	ble.n	e19c <_vfprintf_r+0xc00>
    e19a:	4688      	mov	r8, r1
    e19c:	4643      	mov	r3, r8
    e19e:	2b00      	cmp	r3, #0
    e1a0:	dd0c      	ble.n	e1bc <_vfprintf_r+0xc20>
    e1a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    e1a4:	4444      	add	r4, r8
    e1a6:	6033      	str	r3, [r6, #0]
    e1a8:	4643      	mov	r3, r8
    e1aa:	6073      	str	r3, [r6, #4]
    e1ac:	687b      	ldr	r3, [r7, #4]
    e1ae:	60bc      	str	r4, [r7, #8]
    e1b0:	3301      	adds	r3, #1
    e1b2:	607b      	str	r3, [r7, #4]
    e1b4:	2b07      	cmp	r3, #7
    e1b6:	dd00      	ble.n	e1ba <_vfprintf_r+0xc1e>
    e1b8:	e389      	b.n	e8ce <_vfprintf_r+0x1332>
    e1ba:	3608      	adds	r6, #8
    e1bc:	4643      	mov	r3, r8
    e1be:	43db      	mvns	r3, r3
    e1c0:	4642      	mov	r2, r8
    e1c2:	17db      	asrs	r3, r3, #31
    e1c4:	4013      	ands	r3, r2
    e1c6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    e1c8:	1ad3      	subs	r3, r2, r3
    e1ca:	4698      	mov	r8, r3
    e1cc:	2b00      	cmp	r3, #0
    e1ce:	dc00      	bgt.n	e1d2 <_vfprintf_r+0xc36>
    e1d0:	e0eb      	b.n	e3aa <_vfprintf_r+0xe0e>
    e1d2:	2b10      	cmp	r3, #16
    e1d4:	dc01      	bgt.n	e1da <_vfprintf_r+0xc3e>
    e1d6:	f000 fcd9 	bl	eb8c <_vfprintf_r+0x15f0>
    e1da:	4adc      	ldr	r2, [pc, #880]	; (e54c <_vfprintf_r+0xfb0>)
    e1dc:	687b      	ldr	r3, [r7, #4]
    e1de:	4691      	mov	r9, r2
    e1e0:	2210      	movs	r2, #16
    e1e2:	464d      	mov	r5, r9
    e1e4:	4692      	mov	sl, r2
    e1e6:	0022      	movs	r2, r4
    e1e8:	4644      	mov	r4, r8
    e1ea:	46d8      	mov	r8, fp
    e1ec:	e004      	b.n	e1f8 <_vfprintf_r+0xc5c>
    e1ee:	3608      	adds	r6, #8
    e1f0:	3c10      	subs	r4, #16
    e1f2:	2c10      	cmp	r4, #16
    e1f4:	dc00      	bgt.n	e1f8 <_vfprintf_r+0xc5c>
    e1f6:	e0bf      	b.n	e378 <_vfprintf_r+0xddc>
    e1f8:	4651      	mov	r1, sl
    e1fa:	3210      	adds	r2, #16
    e1fc:	3301      	adds	r3, #1
    e1fe:	6035      	str	r5, [r6, #0]
    e200:	6071      	str	r1, [r6, #4]
    e202:	60ba      	str	r2, [r7, #8]
    e204:	607b      	str	r3, [r7, #4]
    e206:	2b07      	cmp	r3, #7
    e208:	ddf1      	ble.n	e1ee <_vfprintf_r+0xc52>
    e20a:	003a      	movs	r2, r7
    e20c:	4641      	mov	r1, r8
    e20e:	9806      	ldr	r0, [sp, #24]
    e210:	f003 fca0 	bl	11b54 <__sprint_r>
    e214:	2800      	cmp	r0, #0
    e216:	d000      	beq.n	e21a <_vfprintf_r+0xc7e>
    e218:	e3b6      	b.n	e988 <_vfprintf_r+0x13ec>
    e21a:	68ba      	ldr	r2, [r7, #8]
    e21c:	687b      	ldr	r3, [r7, #4]
    e21e:	ae32      	add	r6, sp, #200	; 0xc8
    e220:	e7e6      	b.n	e1f0 <_vfprintf_r+0xc54>
    e222:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e224:	2b00      	cmp	r3, #0
    e226:	d100      	bne.n	e22a <_vfprintf_r+0xc8e>
    e228:	e092      	b.n	e350 <_vfprintf_r+0xdb4>
    e22a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    e22c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    e22e:	ab32      	add	r3, sp, #200	; 0xc8
    e230:	46b1      	mov	r9, r6
    e232:	001e      	movs	r6, r3
    e234:	0020      	movs	r0, r4
    e236:	0029      	movs	r1, r5
    e238:	220a      	movs	r2, #10
    e23a:	2300      	movs	r3, #0
    e23c:	f7fc fb10 	bl	a860 <__aeabi_uldivmod>
    e240:	3e01      	subs	r6, #1
    e242:	3230      	adds	r2, #48	; 0x30
    e244:	7032      	strb	r2, [r6, #0]
    e246:	2300      	movs	r3, #0
    e248:	0020      	movs	r0, r4
    e24a:	0029      	movs	r1, r5
    e24c:	220a      	movs	r2, #10
    e24e:	f7fc fb07 	bl	a860 <__aeabi_uldivmod>
    e252:	0003      	movs	r3, r0
    e254:	0004      	movs	r4, r0
    e256:	000d      	movs	r5, r1
    e258:	430b      	orrs	r3, r1
    e25a:	d1eb      	bne.n	e234 <_vfprintf_r+0xc98>
    e25c:	0032      	movs	r2, r6
    e25e:	ab32      	add	r3, sp, #200	; 0xc8
    e260:	1a9b      	subs	r3, r3, r2
    e262:	9611      	str	r6, [sp, #68]	; 0x44
    e264:	940c      	str	r4, [sp, #48]	; 0x30
    e266:	950d      	str	r5, [sp, #52]	; 0x34
    e268:	464e      	mov	r6, r9
    e26a:	930e      	str	r3, [sp, #56]	; 0x38
    e26c:	f7ff fb03 	bl	d876 <_vfprintf_r+0x2da>
    e270:	2300      	movs	r3, #0
    e272:	930e      	str	r3, [sp, #56]	; 0x38
    e274:	ab32      	add	r3, sp, #200	; 0xc8
    e276:	9311      	str	r3, [sp, #68]	; 0x44
    e278:	f7ff fafd 	bl	d876 <_vfprintf_r+0x2da>
    e27c:	003a      	movs	r2, r7
    e27e:	4659      	mov	r1, fp
    e280:	9806      	ldr	r0, [sp, #24]
    e282:	f003 fc67 	bl	11b54 <__sprint_r>
    e286:	2800      	cmp	r0, #0
    e288:	d000      	beq.n	e28c <_vfprintf_r+0xcf0>
    e28a:	e717      	b.n	e0bc <_vfprintf_r+0xb20>
    e28c:	ab16      	add	r3, sp, #88	; 0x58
    e28e:	7fdb      	ldrb	r3, [r3, #31]
    e290:	68bc      	ldr	r4, [r7, #8]
    e292:	4698      	mov	r8, r3
    e294:	ae32      	add	r6, sp, #200	; 0xc8
    e296:	e513      	b.n	dcc0 <_vfprintf_r+0x724>
    e298:	46b1      	mov	r9, r6
    e29a:	e697      	b.n	dfcc <_vfprintf_r+0xa30>
    e29c:	9b14      	ldr	r3, [sp, #80]	; 0x50
    e29e:	1e5d      	subs	r5, r3, #1
    e2a0:	2d00      	cmp	r5, #0
    e2a2:	dc00      	bgt.n	e2a6 <_vfprintf_r+0xd0a>
    e2a4:	e616      	b.n	ded4 <_vfprintf_r+0x938>
    e2a6:	4ba9      	ldr	r3, [pc, #676]	; (e54c <_vfprintf_r+0xfb0>)
    e2a8:	4699      	mov	r9, r3
    e2aa:	2d10      	cmp	r5, #16
    e2ac:	dc00      	bgt.n	e2b0 <_vfprintf_r+0xd14>
    e2ae:	e10a      	b.n	e4c6 <_vfprintf_r+0xf2a>
    e2b0:	2310      	movs	r3, #16
    e2b2:	0022      	movs	r2, r4
    e2b4:	469a      	mov	sl, r3
    e2b6:	465c      	mov	r4, fp
    e2b8:	4643      	mov	r3, r8
    e2ba:	e004      	b.n	e2c6 <_vfprintf_r+0xd2a>
    e2bc:	3608      	adds	r6, #8
    e2be:	3d10      	subs	r5, #16
    e2c0:	2d10      	cmp	r5, #16
    e2c2:	dc00      	bgt.n	e2c6 <_vfprintf_r+0xd2a>
    e2c4:	e0fc      	b.n	e4c0 <_vfprintf_r+0xf24>
    e2c6:	4649      	mov	r1, r9
    e2c8:	6031      	str	r1, [r6, #0]
    e2ca:	4651      	mov	r1, sl
    e2cc:	3210      	adds	r2, #16
    e2ce:	3301      	adds	r3, #1
    e2d0:	6071      	str	r1, [r6, #4]
    e2d2:	60ba      	str	r2, [r7, #8]
    e2d4:	607b      	str	r3, [r7, #4]
    e2d6:	2b07      	cmp	r3, #7
    e2d8:	ddf0      	ble.n	e2bc <_vfprintf_r+0xd20>
    e2da:	003a      	movs	r2, r7
    e2dc:	0021      	movs	r1, r4
    e2de:	9806      	ldr	r0, [sp, #24]
    e2e0:	f003 fc38 	bl	11b54 <__sprint_r>
    e2e4:	2800      	cmp	r0, #0
    e2e6:	d000      	beq.n	e2ea <_vfprintf_r+0xd4e>
    e2e8:	e6c1      	b.n	e06e <_vfprintf_r+0xad2>
    e2ea:	68ba      	ldr	r2, [r7, #8]
    e2ec:	687b      	ldr	r3, [r7, #4]
    e2ee:	ae32      	add	r6, sp, #200	; 0xc8
    e2f0:	e7e5      	b.n	e2be <_vfprintf_r+0xd22>
    e2f2:	990c      	ldr	r1, [sp, #48]	; 0x30
    e2f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    e2f6:	0008      	movs	r0, r1
    e2f8:	4310      	orrs	r0, r2
    e2fa:	2302      	movs	r3, #2
    e2fc:	0002      	movs	r2, r0
    e2fe:	f7ff fa93 	bl	d828 <_vfprintf_r+0x28c>
    e302:	46a3      	mov	fp, r4
    e304:	0014      	movs	r4, r2
    e306:	464a      	mov	r2, r9
    e308:	1964      	adds	r4, r4, r5
    e30a:	3301      	adds	r3, #1
    e30c:	6032      	str	r2, [r6, #0]
    e30e:	6075      	str	r5, [r6, #4]
    e310:	60bc      	str	r4, [r7, #8]
    e312:	607b      	str	r3, [r7, #4]
    e314:	2b07      	cmp	r3, #7
    e316:	dc00      	bgt.n	e31a <_vfprintf_r+0xd7e>
    e318:	e542      	b.n	dda0 <_vfprintf_r+0x804>
    e31a:	e5e8      	b.n	deee <_vfprintf_r+0x952>
    e31c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    e31e:	681a      	ldr	r2, [r3, #0]
    e320:	f7ff fa68 	bl	d7f4 <_vfprintf_r+0x258>
    e324:	6813      	ldr	r3, [r2, #0]
    e326:	9308      	str	r3, [sp, #32]
    e328:	f7ff fb57 	bl	d9da <_vfprintf_r+0x43e>
    e32c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    e32e:	681a      	ldr	r2, [r3, #0]
    e330:	e412      	b.n	db58 <_vfprintf_r+0x5bc>
    e332:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    e334:	681a      	ldr	r2, [r3, #0]
    e336:	e426      	b.n	db86 <_vfprintf_r+0x5ea>
    e338:	2b30      	cmp	r3, #48	; 0x30
    e33a:	d100      	bne.n	e33e <_vfprintf_r+0xda2>
    e33c:	e23c      	b.n	e7b8 <_vfprintf_r+0x121c>
    e33e:	2330      	movs	r3, #48	; 0x30
    e340:	3a02      	subs	r2, #2
    e342:	7013      	strb	r3, [r2, #0]
    e344:	ab32      	add	r3, sp, #200	; 0xc8
    e346:	1a9b      	subs	r3, r3, r2
    e348:	930e      	str	r3, [sp, #56]	; 0x38
    e34a:	9211      	str	r2, [sp, #68]	; 0x44
    e34c:	f7ff fa93 	bl	d876 <_vfprintf_r+0x2da>
    e350:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e352:	2b09      	cmp	r3, #9
    e354:	d900      	bls.n	e358 <_vfprintf_r+0xdbc>
    e356:	e768      	b.n	e22a <_vfprintf_r+0xc8e>
    e358:	9c09      	ldr	r4, [sp, #36]	; 0x24
    e35a:	2227      	movs	r2, #39	; 0x27
    e35c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e35e:	a928      	add	r1, sp, #160	; 0xa0
    e360:	3330      	adds	r3, #48	; 0x30
    e362:	548b      	strb	r3, [r1, r2]
    e364:	2301      	movs	r3, #1
    e366:	aa16      	add	r2, sp, #88	; 0x58
    e368:	4694      	mov	ip, r2
    e36a:	930e      	str	r3, [sp, #56]	; 0x38
    e36c:	336e      	adds	r3, #110	; 0x6e
    e36e:	4463      	add	r3, ip
    e370:	9409      	str	r4, [sp, #36]	; 0x24
    e372:	9311      	str	r3, [sp, #68]	; 0x44
    e374:	f7ff fa7f 	bl	d876 <_vfprintf_r+0x2da>
    e378:	46c3      	mov	fp, r8
    e37a:	46a9      	mov	r9, r5
    e37c:	46a0      	mov	r8, r4
    e37e:	0014      	movs	r4, r2
    e380:	464a      	mov	r2, r9
    e382:	6032      	str	r2, [r6, #0]
    e384:	4642      	mov	r2, r8
    e386:	4444      	add	r4, r8
    e388:	3301      	adds	r3, #1
    e38a:	6072      	str	r2, [r6, #4]
    e38c:	60bc      	str	r4, [r7, #8]
    e38e:	607b      	str	r3, [r7, #4]
    e390:	2b07      	cmp	r3, #7
    e392:	dc00      	bgt.n	e396 <_vfprintf_r+0xdfa>
    e394:	e18d      	b.n	e6b2 <_vfprintf_r+0x1116>
    e396:	003a      	movs	r2, r7
    e398:	4659      	mov	r1, fp
    e39a:	9806      	ldr	r0, [sp, #24]
    e39c:	f003 fbda 	bl	11b54 <__sprint_r>
    e3a0:	2800      	cmp	r0, #0
    e3a2:	d000      	beq.n	e3a6 <_vfprintf_r+0xe0a>
    e3a4:	e68a      	b.n	e0bc <_vfprintf_r+0xb20>
    e3a6:	68bc      	ldr	r4, [r7, #8]
    e3a8:	ae32      	add	r6, sp, #200	; 0xc8
    e3aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    e3ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
    e3ae:	4293      	cmp	r3, r2
    e3b0:	db00      	blt.n	e3b4 <_vfprintf_r+0xe18>
    e3b2:	e179      	b.n	e6a8 <_vfprintf_r+0x110c>
    e3b4:	9a18      	ldr	r2, [sp, #96]	; 0x60
    e3b6:	6032      	str	r2, [r6, #0]
    e3b8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    e3ba:	4694      	mov	ip, r2
    e3bc:	6072      	str	r2, [r6, #4]
    e3be:	687a      	ldr	r2, [r7, #4]
    e3c0:	4464      	add	r4, ip
    e3c2:	3201      	adds	r2, #1
    e3c4:	60bc      	str	r4, [r7, #8]
    e3c6:	607a      	str	r2, [r7, #4]
    e3c8:	2a07      	cmp	r2, #7
    e3ca:	dd00      	ble.n	e3ce <_vfprintf_r+0xe32>
    e3cc:	e176      	b.n	e6bc <_vfprintf_r+0x1120>
    e3ce:	3608      	adds	r6, #8
    e3d0:	9a14      	ldr	r2, [sp, #80]	; 0x50
    e3d2:	9913      	ldr	r1, [sp, #76]	; 0x4c
    e3d4:	1ad3      	subs	r3, r2, r3
    e3d6:	1a52      	subs	r2, r2, r1
    e3d8:	4690      	mov	r8, r2
    e3da:	429a      	cmp	r2, r3
    e3dc:	dd00      	ble.n	e3e0 <_vfprintf_r+0xe44>
    e3de:	4698      	mov	r8, r3
    e3e0:	4642      	mov	r2, r8
    e3e2:	2a00      	cmp	r2, #0
    e3e4:	dd0f      	ble.n	e406 <_vfprintf_r+0xe6a>
    e3e6:	9913      	ldr	r1, [sp, #76]	; 0x4c
    e3e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
    e3ea:	468c      	mov	ip, r1
    e3ec:	4462      	add	r2, ip
    e3ee:	6032      	str	r2, [r6, #0]
    e3f0:	4642      	mov	r2, r8
    e3f2:	6072      	str	r2, [r6, #4]
    e3f4:	687a      	ldr	r2, [r7, #4]
    e3f6:	4444      	add	r4, r8
    e3f8:	3201      	adds	r2, #1
    e3fa:	60bc      	str	r4, [r7, #8]
    e3fc:	607a      	str	r2, [r7, #4]
    e3fe:	2a07      	cmp	r2, #7
    e400:	dd00      	ble.n	e404 <_vfprintf_r+0xe68>
    e402:	e289      	b.n	e918 <_vfprintf_r+0x137c>
    e404:	3608      	adds	r6, #8
    e406:	4642      	mov	r2, r8
    e408:	43d5      	mvns	r5, r2
    e40a:	17ed      	asrs	r5, r5, #31
    e40c:	4015      	ands	r5, r2
    e40e:	1b5d      	subs	r5, r3, r5
    e410:	2d00      	cmp	r5, #0
    e412:	dc00      	bgt.n	e416 <_vfprintf_r+0xe7a>
    e414:	e4c5      	b.n	dda2 <_vfprintf_r+0x806>
    e416:	4a4d      	ldr	r2, [pc, #308]	; (e54c <_vfprintf_r+0xfb0>)
    e418:	687b      	ldr	r3, [r7, #4]
    e41a:	4691      	mov	r9, r2
    e41c:	2d10      	cmp	r5, #16
    e41e:	dc00      	bgt.n	e422 <_vfprintf_r+0xe86>
    e420:	e771      	b.n	e306 <_vfprintf_r+0xd6a>
    e422:	2210      	movs	r2, #16
    e424:	4690      	mov	r8, r2
    e426:	0022      	movs	r2, r4
    e428:	465c      	mov	r4, fp
    e42a:	e004      	b.n	e436 <_vfprintf_r+0xe9a>
    e42c:	3608      	adds	r6, #8
    e42e:	3d10      	subs	r5, #16
    e430:	2d10      	cmp	r5, #16
    e432:	dc00      	bgt.n	e436 <_vfprintf_r+0xe9a>
    e434:	e765      	b.n	e302 <_vfprintf_r+0xd66>
    e436:	4649      	mov	r1, r9
    e438:	6031      	str	r1, [r6, #0]
    e43a:	4641      	mov	r1, r8
    e43c:	3210      	adds	r2, #16
    e43e:	3301      	adds	r3, #1
    e440:	6071      	str	r1, [r6, #4]
    e442:	60ba      	str	r2, [r7, #8]
    e444:	607b      	str	r3, [r7, #4]
    e446:	2b07      	cmp	r3, #7
    e448:	ddf0      	ble.n	e42c <_vfprintf_r+0xe90>
    e44a:	003a      	movs	r2, r7
    e44c:	0021      	movs	r1, r4
    e44e:	9806      	ldr	r0, [sp, #24]
    e450:	f003 fb80 	bl	11b54 <__sprint_r>
    e454:	2800      	cmp	r0, #0
    e456:	d000      	beq.n	e45a <_vfprintf_r+0xebe>
    e458:	e609      	b.n	e06e <_vfprintf_r+0xad2>
    e45a:	68ba      	ldr	r2, [r7, #8]
    e45c:	687b      	ldr	r3, [r7, #4]
    e45e:	ae32      	add	r6, sp, #200	; 0xc8
    e460:	e7e5      	b.n	e42e <_vfprintf_r+0xe92>
    e462:	003a      	movs	r2, r7
    e464:	4659      	mov	r1, fp
    e466:	9806      	ldr	r0, [sp, #24]
    e468:	f003 fb74 	bl	11b54 <__sprint_r>
    e46c:	2800      	cmp	r0, #0
    e46e:	d000      	beq.n	e472 <_vfprintf_r+0xed6>
    e470:	e624      	b.n	e0bc <_vfprintf_r+0xb20>
    e472:	68bc      	ldr	r4, [r7, #8]
    e474:	687b      	ldr	r3, [r7, #4]
    e476:	ae32      	add	r6, sp, #200	; 0xc8
    e478:	e504      	b.n	de84 <_vfprintf_r+0x8e8>
    e47a:	2307      	movs	r3, #7
    e47c:	3207      	adds	r2, #7
    e47e:	439a      	bics	r2, r3
    e480:	3301      	adds	r3, #1
    e482:	469c      	mov	ip, r3
    e484:	4494      	add	ip, r2
    e486:	4663      	mov	r3, ip
    e488:	930f      	str	r3, [sp, #60]	; 0x3c
    e48a:	6853      	ldr	r3, [r2, #4]
    e48c:	6812      	ldr	r2, [r2, #0]
    e48e:	930d      	str	r3, [sp, #52]	; 0x34
    e490:	920c      	str	r2, [sp, #48]	; 0x30
    e492:	f7ff faa7 	bl	d9e4 <_vfprintf_r+0x448>
    e496:	2207      	movs	r2, #7
    e498:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    e49a:	3307      	adds	r3, #7
    e49c:	4393      	bics	r3, r2
    e49e:	3201      	adds	r2, #1
    e4a0:	4694      	mov	ip, r2
    e4a2:	449c      	add	ip, r3
    e4a4:	4662      	mov	r2, ip
    e4a6:	920f      	str	r2, [sp, #60]	; 0x3c
    e4a8:	681a      	ldr	r2, [r3, #0]
    e4aa:	685b      	ldr	r3, [r3, #4]
    e4ac:	0011      	movs	r1, r2
    e4ae:	001a      	movs	r2, r3
    e4b0:	0008      	movs	r0, r1
    e4b2:	4310      	orrs	r0, r2
    e4b4:	910c      	str	r1, [sp, #48]	; 0x30
    e4b6:	920d      	str	r2, [sp, #52]	; 0x34
    e4b8:	2300      	movs	r3, #0
    e4ba:	0002      	movs	r2, r0
    e4bc:	f7ff f9b4 	bl	d828 <_vfprintf_r+0x28c>
    e4c0:	46a3      	mov	fp, r4
    e4c2:	4698      	mov	r8, r3
    e4c4:	0014      	movs	r4, r2
    e4c6:	464b      	mov	r3, r9
    e4c8:	6075      	str	r5, [r6, #4]
    e4ca:	6033      	str	r3, [r6, #0]
    e4cc:	1964      	adds	r4, r4, r5
    e4ce:	e4f7      	b.n	dec0 <_vfprintf_r+0x924>
    e4d0:	003a      	movs	r2, r7
    e4d2:	4659      	mov	r1, fp
    e4d4:	9806      	ldr	r0, [sp, #24]
    e4d6:	f003 fb3d 	bl	11b54 <__sprint_r>
    e4da:	2800      	cmp	r0, #0
    e4dc:	d000      	beq.n	e4e0 <_vfprintf_r+0xf44>
    e4de:	e5ed      	b.n	e0bc <_vfprintf_r+0xb20>
    e4e0:	687b      	ldr	r3, [r7, #4]
    e4e2:	68bc      	ldr	r4, [r7, #8]
    e4e4:	4698      	mov	r8, r3
    e4e6:	ae32      	add	r6, sp, #200	; 0xc8
    e4e8:	e4da      	b.n	dea0 <_vfprintf_r+0x904>
    e4ea:	2207      	movs	r2, #7
    e4ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    e4ee:	3307      	adds	r3, #7
    e4f0:	4393      	bics	r3, r2
    e4f2:	3201      	adds	r2, #1
    e4f4:	4694      	mov	ip, r2
    e4f6:	449c      	add	ip, r3
    e4f8:	4662      	mov	r2, ip
    e4fa:	920f      	str	r2, [sp, #60]	; 0x3c
    e4fc:	681a      	ldr	r2, [r3, #0]
    e4fe:	685b      	ldr	r3, [r3, #4]
    e500:	0011      	movs	r1, r2
    e502:	001a      	movs	r2, r3
    e504:	0008      	movs	r0, r1
    e506:	4310      	orrs	r0, r2
    e508:	910c      	str	r1, [sp, #48]	; 0x30
    e50a:	920d      	str	r2, [sp, #52]	; 0x34
    e50c:	2301      	movs	r3, #1
    e50e:	0002      	movs	r2, r0
    e510:	f7ff f98a 	bl	d828 <_vfprintf_r+0x28c>
    e514:	2207      	movs	r2, #7
    e516:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    e518:	3307      	adds	r3, #7
    e51a:	4393      	bics	r3, r2
    e51c:	3201      	adds	r2, #1
    e51e:	4694      	mov	ip, r2
    e520:	449c      	add	ip, r3
    e522:	4662      	mov	r2, ip
    e524:	920f      	str	r2, [sp, #60]	; 0x3c
    e526:	681a      	ldr	r2, [r3, #0]
    e528:	685b      	ldr	r3, [r3, #4]
    e52a:	920c      	str	r2, [sp, #48]	; 0x30
    e52c:	930d      	str	r3, [sp, #52]	; 0x34
    e52e:	f7ff f966 	bl	d7fe <_vfprintf_r+0x262>
    e532:	003a      	movs	r2, r7
    e534:	4659      	mov	r1, fp
    e536:	9806      	ldr	r0, [sp, #24]
    e538:	f003 fb0c 	bl	11b54 <__sprint_r>
    e53c:	2800      	cmp	r0, #0
    e53e:	d000      	beq.n	e542 <_vfprintf_r+0xfa6>
    e540:	e5bc      	b.n	e0bc <_vfprintf_r+0xb20>
    e542:	68bc      	ldr	r4, [r7, #8]
    e544:	ae32      	add	r6, sp, #200	; 0xc8
    e546:	f7ff fbe2 	bl	dd0e <_vfprintf_r+0x772>
    e54a:	46c0      	nop			; (mov r8, r8)
    e54c:	00012628 	.word	0x00012628
    e550:	980c      	ldr	r0, [sp, #48]	; 0x30
    e552:	990d      	ldr	r1, [sp, #52]	; 0x34
    e554:	2300      	movs	r3, #0
    e556:	4242      	negs	r2, r0
    e558:	418b      	sbcs	r3, r1
    e55a:	0011      	movs	r1, r2
    e55c:	001a      	movs	r2, r3
    e55e:	232d      	movs	r3, #45	; 0x2d
    e560:	a816      	add	r0, sp, #88	; 0x58
    e562:	77c3      	strb	r3, [r0, #31]
    e564:	0008      	movs	r0, r1
    e566:	4310      	orrs	r0, r2
    e568:	910c      	str	r1, [sp, #48]	; 0x30
    e56a:	920d      	str	r2, [sp, #52]	; 0x34
    e56c:	4698      	mov	r8, r3
    e56e:	0002      	movs	r2, r0
    e570:	3b2c      	subs	r3, #44	; 0x2c
    e572:	f7ff f95d 	bl	d830 <_vfprintf_r+0x294>
    e576:	9916      	ldr	r1, [sp, #88]	; 0x58
    e578:	9d15      	ldr	r5, [sp, #84]	; 0x54
    e57a:	000a      	movs	r2, r1
    e57c:	0008      	movs	r0, r1
    e57e:	002b      	movs	r3, r5
    e580:	0029      	movs	r1, r5
    e582:	f7fe fc8b 	bl	ce9c <__aeabi_dcmpun>
    e586:	2800      	cmp	r0, #0
    e588:	d000      	beq.n	e58c <_vfprintf_r+0xff0>
    e58a:	e2c6      	b.n	eb1a <_vfprintf_r+0x157e>
    e58c:	4653      	mov	r3, sl
    e58e:	3301      	adds	r3, #1
    e590:	d100      	bne.n	e594 <_vfprintf_r+0xff8>
    e592:	e09f      	b.n	e6d4 <_vfprintf_r+0x1138>
    e594:	2320      	movs	r3, #32
    e596:	9a12      	ldr	r2, [sp, #72]	; 0x48
    e598:	439a      	bics	r2, r3
    e59a:	920e      	str	r2, [sp, #56]	; 0x38
    e59c:	2a47      	cmp	r2, #71	; 0x47
    e59e:	d100      	bne.n	e5a2 <_vfprintf_r+0x1006>
    e5a0:	e1a1      	b.n	e8e6 <_vfprintf_r+0x134a>
    e5a2:	2380      	movs	r3, #128	; 0x80
    e5a4:	005b      	lsls	r3, r3, #1
    e5a6:	4323      	orrs	r3, r4
    e5a8:	9309      	str	r3, [sp, #36]	; 0x24
    e5aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
    e5ac:	2b00      	cmp	r3, #0
    e5ae:	da00      	bge.n	e5b2 <_vfprintf_r+0x1016>
    e5b0:	e1ed      	b.n	e98e <_vfprintf_r+0x13f2>
    e5b2:	9a16      	ldr	r2, [sp, #88]	; 0x58
    e5b4:	9308      	str	r3, [sp, #32]
    e5b6:	2300      	movs	r3, #0
    e5b8:	4691      	mov	r9, r2
    e5ba:	9310      	str	r3, [sp, #64]	; 0x40
    e5bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
    e5be:	2b66      	cmp	r3, #102	; 0x66
    e5c0:	d100      	bne.n	e5c4 <_vfprintf_r+0x1028>
    e5c2:	e1b8      	b.n	e936 <_vfprintf_r+0x139a>
    e5c4:	2b46      	cmp	r3, #70	; 0x46
    e5c6:	d100      	bne.n	e5ca <_vfprintf_r+0x102e>
    e5c8:	e237      	b.n	ea3a <_vfprintf_r+0x149e>
    e5ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    e5cc:	9806      	ldr	r0, [sp, #24]
    e5ce:	3a45      	subs	r2, #69	; 0x45
    e5d0:	0013      	movs	r3, r2
    e5d2:	4259      	negs	r1, r3
    e5d4:	4159      	adcs	r1, r3
    e5d6:	ab20      	add	r3, sp, #128	; 0x80
    e5d8:	000d      	movs	r5, r1
    e5da:	9303      	str	r3, [sp, #12]
    e5dc:	ab1f      	add	r3, sp, #124	; 0x7c
    e5de:	9302      	str	r3, [sp, #8]
    e5e0:	2302      	movs	r3, #2
    e5e2:	aa23      	add	r2, sp, #140	; 0x8c
    e5e4:	4455      	add	r5, sl
    e5e6:	921b      	str	r2, [sp, #108]	; 0x6c
    e5e8:	9204      	str	r2, [sp, #16]
    e5ea:	9300      	str	r3, [sp, #0]
    e5ec:	9501      	str	r5, [sp, #4]
    e5ee:	9b08      	ldr	r3, [sp, #32]
    e5f0:	464a      	mov	r2, r9
    e5f2:	f000 fd25 	bl	f040 <_dtoa_r>
    e5f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    e5f8:	9011      	str	r0, [sp, #68]	; 0x44
    e5fa:	2b67      	cmp	r3, #103	; 0x67
    e5fc:	d000      	beq.n	e600 <_vfprintf_r+0x1064>
    e5fe:	e20b      	b.n	ea18 <_vfprintf_r+0x147c>
    e600:	9b11      	ldr	r3, [sp, #68]	; 0x44
    e602:	4698      	mov	r8, r3
    e604:	44a8      	add	r8, r5
    e606:	07e3      	lsls	r3, r4, #31
    e608:	d400      	bmi.n	e60c <_vfprintf_r+0x1070>
    e60a:	e277      	b.n	eafc <_vfprintf_r+0x1560>
    e60c:	2300      	movs	r3, #0
    e60e:	2200      	movs	r2, #0
    e610:	4648      	mov	r0, r9
    e612:	9908      	ldr	r1, [sp, #32]
    e614:	f7fc f8bc 	bl	a790 <__aeabi_dcmpeq>
    e618:	4643      	mov	r3, r8
    e61a:	2800      	cmp	r0, #0
    e61c:	d10a      	bne.n	e634 <_vfprintf_r+0x1098>
    e61e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    e620:	4543      	cmp	r3, r8
    e622:	d207      	bcs.n	e634 <_vfprintf_r+0x1098>
    e624:	2130      	movs	r1, #48	; 0x30
    e626:	4640      	mov	r0, r8
    e628:	1c5a      	adds	r2, r3, #1
    e62a:	9223      	str	r2, [sp, #140]	; 0x8c
    e62c:	7019      	strb	r1, [r3, #0]
    e62e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    e630:	4298      	cmp	r0, r3
    e632:	d8f9      	bhi.n	e628 <_vfprintf_r+0x108c>
    e634:	9a11      	ldr	r2, [sp, #68]	; 0x44
    e636:	1a9b      	subs	r3, r3, r2
    e638:	9314      	str	r3, [sp, #80]	; 0x50
    e63a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e63c:	2b47      	cmp	r3, #71	; 0x47
    e63e:	d100      	bne.n	e642 <_vfprintf_r+0x10a6>
    e640:	e0d0      	b.n	e7e4 <_vfprintf_r+0x1248>
    e642:	9b12      	ldr	r3, [sp, #72]	; 0x48
    e644:	2b65      	cmp	r3, #101	; 0x65
    e646:	dc00      	bgt.n	e64a <_vfprintf_r+0x10ae>
    e648:	e2d5      	b.n	ebf6 <_vfprintf_r+0x165a>
    e64a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    e64c:	2b66      	cmp	r3, #102	; 0x66
    e64e:	d100      	bne.n	e652 <_vfprintf_r+0x10b6>
    e650:	e1c6      	b.n	e9e0 <_vfprintf_r+0x1444>
    e652:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    e654:	9313      	str	r3, [sp, #76]	; 0x4c
    e656:	9b14      	ldr	r3, [sp, #80]	; 0x50
    e658:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    e65a:	0019      	movs	r1, r3
    e65c:	4291      	cmp	r1, r2
    e65e:	dd00      	ble.n	e662 <_vfprintf_r+0x10c6>
    e660:	e1a0      	b.n	e9a4 <_vfprintf_r+0x1408>
    e662:	07e3      	lsls	r3, r4, #31
    e664:	d500      	bpl.n	e668 <_vfprintf_r+0x10cc>
    e666:	e242      	b.n	eaee <_vfprintf_r+0x1552>
    e668:	43d3      	mvns	r3, r2
    e66a:	17db      	asrs	r3, r3, #31
    e66c:	0011      	movs	r1, r2
    e66e:	401a      	ands	r2, r3
    e670:	2367      	movs	r3, #103	; 0x67
    e672:	9208      	str	r2, [sp, #32]
    e674:	910e      	str	r1, [sp, #56]	; 0x38
    e676:	9312      	str	r3, [sp, #72]	; 0x48
    e678:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e67a:	2b00      	cmp	r3, #0
    e67c:	d000      	beq.n	e680 <_vfprintf_r+0x10e4>
    e67e:	e0a9      	b.n	e7d4 <_vfprintf_r+0x1238>
    e680:	ab16      	add	r3, sp, #88	; 0x58
    e682:	7fdb      	ldrb	r3, [r3, #31]
    e684:	4698      	mov	r8, r3
    e686:	2300      	movs	r3, #0
    e688:	469a      	mov	sl, r3
    e68a:	f7ff f8fc 	bl	d886 <_vfprintf_r+0x2ea>
    e68e:	46cb      	mov	fp, r9
    e690:	46a1      	mov	r9, r4
    e692:	0014      	movs	r4, r2
    e694:	e637      	b.n	e306 <_vfprintf_r+0xd6a>
    e696:	464b      	mov	r3, r9
    e698:	6d98      	ldr	r0, [r3, #88]	; 0x58
    e69a:	f002 f8db 	bl	10854 <__retarget_lock_release_recursive>
    e69e:	2301      	movs	r3, #1
    e6a0:	425b      	negs	r3, r3
    e6a2:	930a      	str	r3, [sp, #40]	; 0x28
    e6a4:	f7ff f82b 	bl	d6fe <_vfprintf_r+0x162>
    e6a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    e6aa:	07d2      	lsls	r2, r2, #31
    e6ac:	d400      	bmi.n	e6b0 <_vfprintf_r+0x1114>
    e6ae:	e68f      	b.n	e3d0 <_vfprintf_r+0xe34>
    e6b0:	e680      	b.n	e3b4 <_vfprintf_r+0xe18>
    e6b2:	3608      	adds	r6, #8
    e6b4:	e679      	b.n	e3aa <_vfprintf_r+0xe0e>
    e6b6:	68bc      	ldr	r4, [r7, #8]
    e6b8:	f7ff fb73 	bl	dda2 <_vfprintf_r+0x806>
    e6bc:	003a      	movs	r2, r7
    e6be:	4659      	mov	r1, fp
    e6c0:	9806      	ldr	r0, [sp, #24]
    e6c2:	f003 fa47 	bl	11b54 <__sprint_r>
    e6c6:	2800      	cmp	r0, #0
    e6c8:	d000      	beq.n	e6cc <_vfprintf_r+0x1130>
    e6ca:	e4f7      	b.n	e0bc <_vfprintf_r+0xb20>
    e6cc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    e6ce:	68bc      	ldr	r4, [r7, #8]
    e6d0:	ae32      	add	r6, sp, #200	; 0xc8
    e6d2:	e67d      	b.n	e3d0 <_vfprintf_r+0xe34>
    e6d4:	2320      	movs	r3, #32
    e6d6:	9a12      	ldr	r2, [sp, #72]	; 0x48
    e6d8:	439a      	bics	r2, r3
    e6da:	3b1a      	subs	r3, #26
    e6dc:	920e      	str	r2, [sp, #56]	; 0x38
    e6de:	469a      	mov	sl, r3
    e6e0:	e75f      	b.n	e5a2 <_vfprintf_r+0x1006>
    e6e2:	232d      	movs	r3, #45	; 0x2d
    e6e4:	aa16      	add	r2, sp, #88	; 0x58
    e6e6:	77d3      	strb	r3, [r2, #31]
    e6e8:	4698      	mov	r8, r3
    e6ea:	f7ff faa8 	bl	dc3e <_vfprintf_r+0x6a2>
    e6ee:	003a      	movs	r2, r7
    e6f0:	4659      	mov	r1, fp
    e6f2:	9806      	ldr	r0, [sp, #24]
    e6f4:	f003 fa2e 	bl	11b54 <__sprint_r>
    e6f8:	2800      	cmp	r0, #0
    e6fa:	d000      	beq.n	e6fe <_vfprintf_r+0x1162>
    e6fc:	e4de      	b.n	e0bc <_vfprintf_r+0xb20>
    e6fe:	ae32      	add	r6, sp, #200	; 0xc8
    e700:	e419      	b.n	df36 <_vfprintf_r+0x99a>
    e702:	4be3      	ldr	r3, [pc, #908]	; (ea90 <_vfprintf_r+0x14f4>)
    e704:	3401      	adds	r4, #1
    e706:	6033      	str	r3, [r6, #0]
    e708:	2301      	movs	r3, #1
    e70a:	6073      	str	r3, [r6, #4]
    e70c:	687b      	ldr	r3, [r7, #4]
    e70e:	60bc      	str	r4, [r7, #8]
    e710:	3301      	adds	r3, #1
    e712:	607b      	str	r3, [r7, #4]
    e714:	2b07      	cmp	r3, #7
    e716:	dd00      	ble.n	e71a <_vfprintf_r+0x117e>
    e718:	e155      	b.n	e9c6 <_vfprintf_r+0x142a>
    e71a:	3608      	adds	r6, #8
    e71c:	2800      	cmp	r0, #0
    e71e:	d107      	bne.n	e730 <_vfprintf_r+0x1194>
    e720:	9b14      	ldr	r3, [sp, #80]	; 0x50
    e722:	2b00      	cmp	r3, #0
    e724:	d104      	bne.n	e730 <_vfprintf_r+0x1194>
    e726:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e728:	07db      	lsls	r3, r3, #31
    e72a:	d401      	bmi.n	e730 <_vfprintf_r+0x1194>
    e72c:	f7ff fb39 	bl	dda2 <_vfprintf_r+0x806>
    e730:	9b18      	ldr	r3, [sp, #96]	; 0x60
    e732:	6033      	str	r3, [r6, #0]
    e734:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    e736:	1919      	adds	r1, r3, r4
    e738:	6073      	str	r3, [r6, #4]
    e73a:	687b      	ldr	r3, [r7, #4]
    e73c:	60b9      	str	r1, [r7, #8]
    e73e:	3301      	adds	r3, #1
    e740:	607b      	str	r3, [r7, #4]
    e742:	2b07      	cmp	r3, #7
    e744:	dd00      	ble.n	e748 <_vfprintf_r+0x11ac>
    e746:	e1c4      	b.n	ead2 <_vfprintf_r+0x1536>
    e748:	0032      	movs	r2, r6
    e74a:	3208      	adds	r2, #8
    e74c:	2800      	cmp	r0, #0
    e74e:	da00      	bge.n	e752 <_vfprintf_r+0x11b6>
    e750:	e195      	b.n	ea7e <_vfprintf_r+0x14e2>
    e752:	9811      	ldr	r0, [sp, #68]	; 0x44
    e754:	3301      	adds	r3, #1
    e756:	6010      	str	r0, [r2, #0]
    e758:	9814      	ldr	r0, [sp, #80]	; 0x50
    e75a:	607b      	str	r3, [r7, #4]
    e75c:	1844      	adds	r4, r0, r1
    e75e:	6050      	str	r0, [r2, #4]
    e760:	60bc      	str	r4, [r7, #8]
    e762:	2b07      	cmp	r3, #7
    e764:	dd01      	ble.n	e76a <_vfprintf_r+0x11ce>
    e766:	f7ff fbc2 	bl	deee <_vfprintf_r+0x952>
    e76a:	3208      	adds	r2, #8
    e76c:	0016      	movs	r6, r2
    e76e:	f7ff fb18 	bl	dda2 <_vfprintf_r+0x806>
    e772:	990f      	ldr	r1, [sp, #60]	; 0x3c
    e774:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    e776:	680b      	ldr	r3, [r1, #0]
    e778:	601a      	str	r2, [r3, #0]
    e77a:	17d2      	asrs	r2, r2, #31
    e77c:	605a      	str	r2, [r3, #4]
    e77e:	000b      	movs	r3, r1
    e780:	3304      	adds	r3, #4
    e782:	930f      	str	r3, [sp, #60]	; 0x3c
    e784:	f7fe ff58 	bl	d638 <_vfprintf_r+0x9c>
    e788:	464b      	mov	r3, r9
    e78a:	9a07      	ldr	r2, [sp, #28]
    e78c:	431c      	orrs	r4, r3
    e78e:	3201      	adds	r2, #1
    e790:	7813      	ldrb	r3, [r2, #0]
    e792:	9207      	str	r2, [sp, #28]
    e794:	f7fe ff8b 	bl	d6ae <_vfprintf_r+0x112>
    e798:	003a      	movs	r2, r7
    e79a:	4659      	mov	r1, fp
    e79c:	9806      	ldr	r0, [sp, #24]
    e79e:	f003 f9d9 	bl	11b54 <__sprint_r>
    e7a2:	2800      	cmp	r0, #0
    e7a4:	d000      	beq.n	e7a8 <_vfprintf_r+0x120c>
    e7a6:	e489      	b.n	e0bc <_vfprintf_r+0xb20>
    e7a8:	68bc      	ldr	r4, [r7, #8]
    e7aa:	ae32      	add	r6, sp, #200	; 0xc8
    e7ac:	f7ff fbdc 	bl	df68 <_vfprintf_r+0x9cc>
    e7b0:	4bb8      	ldr	r3, [pc, #736]	; (ea94 <_vfprintf_r+0x14f8>)
    e7b2:	9311      	str	r3, [sp, #68]	; 0x44
    e7b4:	f7ff fa4a 	bl	dc4c <_vfprintf_r+0x6b0>
    e7b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
    e7ba:	ab32      	add	r3, sp, #200	; 0xc8
    e7bc:	1a9b      	subs	r3, r3, r2
    e7be:	930e      	str	r3, [sp, #56]	; 0x38
    e7c0:	f7ff f859 	bl	d876 <_vfprintf_r+0x2da>
    e7c4:	9811      	ldr	r0, [sp, #68]	; 0x44
    e7c6:	f7fe feb7 	bl	d538 <strlen>
    e7ca:	0002      	movs	r2, r0
    e7cc:	900e      	str	r0, [sp, #56]	; 0x38
    e7ce:	0003      	movs	r3, r0
    e7d0:	f7ff f9a1 	bl	db16 <_vfprintf_r+0x57a>
    e7d4:	232d      	movs	r3, #45	; 0x2d
    e7d6:	aa16      	add	r2, sp, #88	; 0x58
    e7d8:	77d3      	strb	r3, [r2, #31]
    e7da:	4698      	mov	r8, r3
    e7dc:	2300      	movs	r3, #0
    e7de:	469a      	mov	sl, r3
    e7e0:	f7ff f854 	bl	d88c <_vfprintf_r+0x2f0>
    e7e4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    e7e6:	9313      	str	r3, [sp, #76]	; 0x4c
    e7e8:	1cda      	adds	r2, r3, #3
    e7ea:	db02      	blt.n	e7f2 <_vfprintf_r+0x1256>
    e7ec:	459a      	cmp	sl, r3
    e7ee:	db00      	blt.n	e7f2 <_vfprintf_r+0x1256>
    e7f0:	e731      	b.n	e656 <_vfprintf_r+0x10ba>
    e7f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    e7f4:	3b02      	subs	r3, #2
    e7f6:	9312      	str	r3, [sp, #72]	; 0x48
    e7f8:	222c      	movs	r2, #44	; 0x2c
    e7fa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    e7fc:	2148      	movs	r1, #72	; 0x48
    e7fe:	1e5d      	subs	r5, r3, #1
    e800:	ab16      	add	r3, sp, #88	; 0x58
    e802:	189b      	adds	r3, r3, r2
    e804:	466a      	mov	r2, sp
    e806:	1852      	adds	r2, r2, r1
    e808:	7812      	ldrb	r2, [r2, #0]
    e80a:	951f      	str	r5, [sp, #124]	; 0x7c
    e80c:	701a      	strb	r2, [r3, #0]
    e80e:	2d00      	cmp	r5, #0
    e810:	da00      	bge.n	e814 <_vfprintf_r+0x1278>
    e812:	e1cb      	b.n	ebac <_vfprintf_r+0x1610>
    e814:	212d      	movs	r1, #45	; 0x2d
    e816:	232b      	movs	r3, #43	; 0x2b
    e818:	aa16      	add	r2, sp, #88	; 0x58
    e81a:	1852      	adds	r2, r2, r1
    e81c:	7013      	strb	r3, [r2, #0]
    e81e:	2d09      	cmp	r5, #9
    e820:	dc00      	bgt.n	e824 <_vfprintf_r+0x1288>
    e822:	e16d      	b.n	eb00 <_vfprintf_r+0x1564>
    e824:	aa16      	add	r2, sp, #88	; 0x58
    e826:	233b      	movs	r3, #59	; 0x3b
    e828:	4694      	mov	ip, r2
    e82a:	4463      	add	r3, ip
    e82c:	469a      	mov	sl, r3
    e82e:	46b1      	mov	r9, r6
    e830:	46a0      	mov	r8, r4
    e832:	4656      	mov	r6, sl
    e834:	e000      	b.n	e838 <_vfprintf_r+0x129c>
    e836:	0026      	movs	r6, r4
    e838:	0028      	movs	r0, r5
    e83a:	210a      	movs	r1, #10
    e83c:	f7fb ff92 	bl	a764 <__aeabi_idivmod>
    e840:	1e74      	subs	r4, r6, #1
    e842:	3130      	adds	r1, #48	; 0x30
    e844:	7021      	strb	r1, [r4, #0]
    e846:	0028      	movs	r0, r5
    e848:	210a      	movs	r1, #10
    e84a:	f7fb fea5 	bl	a598 <__divsi3>
    e84e:	0005      	movs	r5, r0
    e850:	2809      	cmp	r0, #9
    e852:	dcf0      	bgt.n	e836 <_vfprintf_r+0x129a>
    e854:	0023      	movs	r3, r4
    e856:	4644      	mov	r4, r8
    e858:	46b0      	mov	r8, r6
    e85a:	464e      	mov	r6, r9
    e85c:	4699      	mov	r9, r3
    e85e:	0003      	movs	r3, r0
    e860:	3330      	adds	r3, #48	; 0x30
    e862:	b2d8      	uxtb	r0, r3
    e864:	4643      	mov	r3, r8
    e866:	3b02      	subs	r3, #2
    e868:	7018      	strb	r0, [r3, #0]
    e86a:	459a      	cmp	sl, r3
    e86c:	d800      	bhi.n	e870 <_vfprintf_r+0x12d4>
    e86e:	e1f6      	b.n	ec5e <_vfprintf_r+0x16c2>
    e870:	4642      	mov	r2, r8
    e872:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    e874:	4645      	mov	r5, r8
    e876:	1a99      	subs	r1, r3, r2
    e878:	2301      	movs	r3, #1
    e87a:	3107      	adds	r1, #7
    e87c:	425b      	negs	r3, r3
    e87e:	e001      	b.n	e884 <_vfprintf_r+0x12e8>
    e880:	5ce8      	ldrb	r0, [r5, r3]
    e882:	3301      	adds	r3, #1
    e884:	aa21      	add	r2, sp, #132	; 0x84
    e886:	18d2      	adds	r2, r2, r3
    e888:	70d0      	strb	r0, [r2, #3]
    e88a:	428b      	cmp	r3, r1
    e88c:	d1f8      	bne.n	e880 <_vfprintf_r+0x12e4>
    e88e:	a916      	add	r1, sp, #88	; 0x58
    e890:	468c      	mov	ip, r1
    e892:	222e      	movs	r2, #46	; 0x2e
    e894:	464b      	mov	r3, r9
    e896:	4462      	add	r2, ip
    e898:	4694      	mov	ip, r2
    e89a:	1afb      	subs	r3, r7, r3
    e89c:	4463      	add	r3, ip
    e89e:	aa21      	add	r2, sp, #132	; 0x84
    e8a0:	9914      	ldr	r1, [sp, #80]	; 0x50
    e8a2:	1a9b      	subs	r3, r3, r2
    e8a4:	469c      	mov	ip, r3
    e8a6:	000a      	movs	r2, r1
    e8a8:	4462      	add	r2, ip
    e8aa:	931a      	str	r3, [sp, #104]	; 0x68
    e8ac:	920e      	str	r2, [sp, #56]	; 0x38
    e8ae:	2901      	cmp	r1, #1
    e8b0:	dc00      	bgt.n	e8b4 <_vfprintf_r+0x1318>
    e8b2:	e170      	b.n	eb96 <_vfprintf_r+0x15fa>
    e8b4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    e8b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e8b8:	4694      	mov	ip, r2
    e8ba:	4463      	add	r3, ip
    e8bc:	001a      	movs	r2, r3
    e8be:	930e      	str	r3, [sp, #56]	; 0x38
    e8c0:	43db      	mvns	r3, r3
    e8c2:	17db      	asrs	r3, r3, #31
    e8c4:	401a      	ands	r2, r3
    e8c6:	2300      	movs	r3, #0
    e8c8:	9208      	str	r2, [sp, #32]
    e8ca:	9313      	str	r3, [sp, #76]	; 0x4c
    e8cc:	e6d4      	b.n	e678 <_vfprintf_r+0x10dc>
    e8ce:	003a      	movs	r2, r7
    e8d0:	4659      	mov	r1, fp
    e8d2:	9806      	ldr	r0, [sp, #24]
    e8d4:	f003 f93e 	bl	11b54 <__sprint_r>
    e8d8:	2800      	cmp	r0, #0
    e8da:	d001      	beq.n	e8e0 <_vfprintf_r+0x1344>
    e8dc:	f7ff fbee 	bl	e0bc <_vfprintf_r+0xb20>
    e8e0:	68bc      	ldr	r4, [r7, #8]
    e8e2:	ae32      	add	r6, sp, #200	; 0xc8
    e8e4:	e46a      	b.n	e1bc <_vfprintf_r+0xc20>
    e8e6:	4653      	mov	r3, sl
    e8e8:	2b00      	cmp	r3, #0
    e8ea:	d000      	beq.n	e8ee <_vfprintf_r+0x1352>
    e8ec:	e659      	b.n	e5a2 <_vfprintf_r+0x1006>
    e8ee:	3301      	adds	r3, #1
    e8f0:	469a      	mov	sl, r3
    e8f2:	e656      	b.n	e5a2 <_vfprintf_r+0x1006>
    e8f4:	4653      	mov	r3, sl
    e8f6:	9308      	str	r3, [sp, #32]
    e8f8:	2b06      	cmp	r3, #6
    e8fa:	d901      	bls.n	e900 <_vfprintf_r+0x1364>
    e8fc:	2306      	movs	r3, #6
    e8fe:	9308      	str	r3, [sp, #32]
    e900:	9b08      	ldr	r3, [sp, #32]
    e902:	950f      	str	r5, [sp, #60]	; 0x3c
    e904:	930e      	str	r3, [sp, #56]	; 0x38
    e906:	2300      	movs	r3, #0
    e908:	4698      	mov	r8, r3
    e90a:	469a      	mov	sl, r3
    e90c:	9313      	str	r3, [sp, #76]	; 0x4c
    e90e:	4b62      	ldr	r3, [pc, #392]	; (ea98 <_vfprintf_r+0x14fc>)
    e910:	9409      	str	r4, [sp, #36]	; 0x24
    e912:	9311      	str	r3, [sp, #68]	; 0x44
    e914:	f7fe ffbd 	bl	d892 <_vfprintf_r+0x2f6>
    e918:	003a      	movs	r2, r7
    e91a:	4659      	mov	r1, fp
    e91c:	9806      	ldr	r0, [sp, #24]
    e91e:	f003 f919 	bl	11b54 <__sprint_r>
    e922:	2800      	cmp	r0, #0
    e924:	d001      	beq.n	e92a <_vfprintf_r+0x138e>
    e926:	f7ff fbc9 	bl	e0bc <_vfprintf_r+0xb20>
    e92a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    e92c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    e92e:	68bc      	ldr	r4, [r7, #8]
    e930:	1a9b      	subs	r3, r3, r2
    e932:	ae32      	add	r6, sp, #200	; 0xc8
    e934:	e567      	b.n	e406 <_vfprintf_r+0xe6a>
    e936:	ab23      	add	r3, sp, #140	; 0x8c
    e938:	931b      	str	r3, [sp, #108]	; 0x6c
    e93a:	9304      	str	r3, [sp, #16]
    e93c:	ab20      	add	r3, sp, #128	; 0x80
    e93e:	9303      	str	r3, [sp, #12]
    e940:	ab1f      	add	r3, sp, #124	; 0x7c
    e942:	9302      	str	r3, [sp, #8]
    e944:	4653      	mov	r3, sl
    e946:	9301      	str	r3, [sp, #4]
    e948:	2303      	movs	r3, #3
    e94a:	464a      	mov	r2, r9
    e94c:	9300      	str	r3, [sp, #0]
    e94e:	9806      	ldr	r0, [sp, #24]
    e950:	9b08      	ldr	r3, [sp, #32]
    e952:	f000 fb75 	bl	f040 <_dtoa_r>
    e956:	0003      	movs	r3, r0
    e958:	4453      	add	r3, sl
    e95a:	4698      	mov	r8, r3
    e95c:	4655      	mov	r5, sl
    e95e:	9011      	str	r0, [sp, #68]	; 0x44
    e960:	9b11      	ldr	r3, [sp, #68]	; 0x44
    e962:	781b      	ldrb	r3, [r3, #0]
    e964:	2b30      	cmp	r3, #48	; 0x30
    e966:	d002      	beq.n	e96e <_vfprintf_r+0x13d2>
    e968:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    e96a:	4498      	add	r8, r3
    e96c:	e64e      	b.n	e60c <_vfprintf_r+0x1070>
    e96e:	2200      	movs	r2, #0
    e970:	2300      	movs	r3, #0
    e972:	4648      	mov	r0, r9
    e974:	9908      	ldr	r1, [sp, #32]
    e976:	f7fb ff0b 	bl	a790 <__aeabi_dcmpeq>
    e97a:	2800      	cmp	r0, #0
    e97c:	d1f4      	bne.n	e968 <_vfprintf_r+0x13cc>
    e97e:	2301      	movs	r3, #1
    e980:	1b5b      	subs	r3, r3, r5
    e982:	931f      	str	r3, [sp, #124]	; 0x7c
    e984:	4498      	add	r8, r3
    e986:	e641      	b.n	e60c <_vfprintf_r+0x1070>
    e988:	46c1      	mov	r9, r8
    e98a:	f7ff fb1f 	bl	dfcc <_vfprintf_r+0xa30>
    e98e:	2280      	movs	r2, #128	; 0x80
    e990:	0612      	lsls	r2, r2, #24
    e992:	4694      	mov	ip, r2
    e994:	9b16      	ldr	r3, [sp, #88]	; 0x58
    e996:	4699      	mov	r9, r3
    e998:	9b15      	ldr	r3, [sp, #84]	; 0x54
    e99a:	4463      	add	r3, ip
    e99c:	9308      	str	r3, [sp, #32]
    e99e:	232d      	movs	r3, #45	; 0x2d
    e9a0:	9310      	str	r3, [sp, #64]	; 0x40
    e9a2:	e60b      	b.n	e5bc <_vfprintf_r+0x1020>
    e9a4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    e9a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
    e9a8:	4694      	mov	ip, r2
    e9aa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    e9ac:	4463      	add	r3, ip
    e9ae:	930e      	str	r3, [sp, #56]	; 0x38
    e9b0:	2a00      	cmp	r2, #0
    e9b2:	dc00      	bgt.n	e9b6 <_vfprintf_r+0x141a>
    e9b4:	e0e3      	b.n	eb7e <_vfprintf_r+0x15e2>
    e9b6:	001a      	movs	r2, r3
    e9b8:	43db      	mvns	r3, r3
    e9ba:	17db      	asrs	r3, r3, #31
    e9bc:	401a      	ands	r2, r3
    e9be:	2367      	movs	r3, #103	; 0x67
    e9c0:	9208      	str	r2, [sp, #32]
    e9c2:	9312      	str	r3, [sp, #72]	; 0x48
    e9c4:	e658      	b.n	e678 <_vfprintf_r+0x10dc>
    e9c6:	003a      	movs	r2, r7
    e9c8:	4659      	mov	r1, fp
    e9ca:	9806      	ldr	r0, [sp, #24]
    e9cc:	f003 f8c2 	bl	11b54 <__sprint_r>
    e9d0:	2800      	cmp	r0, #0
    e9d2:	d001      	beq.n	e9d8 <_vfprintf_r+0x143c>
    e9d4:	f7ff fb72 	bl	e0bc <_vfprintf_r+0xb20>
    e9d8:	981f      	ldr	r0, [sp, #124]	; 0x7c
    e9da:	68bc      	ldr	r4, [r7, #8]
    e9dc:	ae32      	add	r6, sp, #200	; 0xc8
    e9de:	e69d      	b.n	e71c <_vfprintf_r+0x1180>
    e9e0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    e9e2:	9313      	str	r3, [sp, #76]	; 0x4c
    e9e4:	2b00      	cmp	r3, #0
    e9e6:	dc00      	bgt.n	e9ea <_vfprintf_r+0x144e>
    e9e8:	e0f2      	b.n	ebd0 <_vfprintf_r+0x1634>
    e9ea:	4652      	mov	r2, sl
    e9ec:	2a00      	cmp	r2, #0
    e9ee:	d000      	beq.n	e9f2 <_vfprintf_r+0x1456>
    e9f0:	e0a0      	b.n	eb34 <_vfprintf_r+0x1598>
    e9f2:	07e2      	lsls	r2, r4, #31
    e9f4:	d500      	bpl.n	e9f8 <_vfprintf_r+0x145c>
    e9f6:	e09d      	b.n	eb34 <_vfprintf_r+0x1598>
    e9f8:	9308      	str	r3, [sp, #32]
    e9fa:	930e      	str	r3, [sp, #56]	; 0x38
    e9fc:	e63c      	b.n	e678 <_vfprintf_r+0x10dc>
    e9fe:	ab16      	add	r3, sp, #88	; 0x58
    ea00:	7fdb      	ldrb	r3, [r3, #31]
    ea02:	950f      	str	r5, [sp, #60]	; 0x3c
    ea04:	4698      	mov	r8, r3
    ea06:	4653      	mov	r3, sl
    ea08:	9308      	str	r3, [sp, #32]
    ea0a:	930e      	str	r3, [sp, #56]	; 0x38
    ea0c:	2300      	movs	r3, #0
    ea0e:	9409      	str	r4, [sp, #36]	; 0x24
    ea10:	469a      	mov	sl, r3
    ea12:	9313      	str	r3, [sp, #76]	; 0x4c
    ea14:	f7fe ff37 	bl	d886 <_vfprintf_r+0x2ea>
    ea18:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ea1a:	4698      	mov	r8, r3
    ea1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ea1e:	44a8      	add	r8, r5
    ea20:	2b47      	cmp	r3, #71	; 0x47
    ea22:	d000      	beq.n	ea26 <_vfprintf_r+0x148a>
    ea24:	e5f2      	b.n	e60c <_vfprintf_r+0x1070>
    ea26:	07e3      	lsls	r3, r4, #31
    ea28:	d400      	bmi.n	ea2c <_vfprintf_r+0x1490>
    ea2a:	e0dc      	b.n	ebe6 <_vfprintf_r+0x164a>
    ea2c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ea2e:	4698      	mov	r8, r3
    ea30:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ea32:	44a8      	add	r8, r5
    ea34:	2b46      	cmp	r3, #70	; 0x46
    ea36:	d093      	beq.n	e960 <_vfprintf_r+0x13c4>
    ea38:	e5e8      	b.n	e60c <_vfprintf_r+0x1070>
    ea3a:	ab23      	add	r3, sp, #140	; 0x8c
    ea3c:	931b      	str	r3, [sp, #108]	; 0x6c
    ea3e:	9304      	str	r3, [sp, #16]
    ea40:	ab20      	add	r3, sp, #128	; 0x80
    ea42:	9303      	str	r3, [sp, #12]
    ea44:	ab1f      	add	r3, sp, #124	; 0x7c
    ea46:	9302      	str	r3, [sp, #8]
    ea48:	4653      	mov	r3, sl
    ea4a:	9301      	str	r3, [sp, #4]
    ea4c:	2303      	movs	r3, #3
    ea4e:	464a      	mov	r2, r9
    ea50:	9300      	str	r3, [sp, #0]
    ea52:	9806      	ldr	r0, [sp, #24]
    ea54:	9b08      	ldr	r3, [sp, #32]
    ea56:	f000 faf3 	bl	f040 <_dtoa_r>
    ea5a:	4655      	mov	r5, sl
    ea5c:	9011      	str	r0, [sp, #68]	; 0x44
    ea5e:	e7e5      	b.n	ea2c <_vfprintf_r+0x1490>
    ea60:	003a      	movs	r2, r7
    ea62:	4659      	mov	r1, fp
    ea64:	9806      	ldr	r0, [sp, #24]
    ea66:	f003 f875 	bl	11b54 <__sprint_r>
    ea6a:	2800      	cmp	r0, #0
    ea6c:	d101      	bne.n	ea72 <_vfprintf_r+0x14d6>
    ea6e:	f7ff faab 	bl	dfc8 <_vfprintf_r+0xa2c>
    ea72:	f7ff faab 	bl	dfcc <_vfprintf_r+0xa30>
    ea76:	4642      	mov	r2, r8
    ea78:	9207      	str	r2, [sp, #28]
    ea7a:	f7fe fe1b 	bl	d6b4 <_vfprintf_r+0x118>
    ea7e:	4244      	negs	r4, r0
    ea80:	3010      	adds	r0, #16
    ea82:	db00      	blt.n	ea86 <_vfprintf_r+0x14ea>
    ea84:	e0d8      	b.n	ec38 <_vfprintf_r+0x169c>
    ea86:	4805      	ldr	r0, [pc, #20]	; (ea9c <_vfprintf_r+0x1500>)
    ea88:	2610      	movs	r6, #16
    ea8a:	0005      	movs	r5, r0
    ea8c:	e00c      	b.n	eaa8 <_vfprintf_r+0x150c>
    ea8e:	46c0      	nop			; (mov r8, r8)
    ea90:	00012614 	.word	0x00012614
    ea94:	000125d8 	.word	0x000125d8
    ea98:	0001260c 	.word	0x0001260c
    ea9c:	00012628 	.word	0x00012628
    eaa0:	3208      	adds	r2, #8
    eaa2:	3c10      	subs	r4, #16
    eaa4:	2c10      	cmp	r4, #16
    eaa6:	dd51      	ble.n	eb4c <_vfprintf_r+0x15b0>
    eaa8:	3110      	adds	r1, #16
    eaaa:	3301      	adds	r3, #1
    eaac:	6015      	str	r5, [r2, #0]
    eaae:	6056      	str	r6, [r2, #4]
    eab0:	60b9      	str	r1, [r7, #8]
    eab2:	607b      	str	r3, [r7, #4]
    eab4:	2b07      	cmp	r3, #7
    eab6:	ddf3      	ble.n	eaa0 <_vfprintf_r+0x1504>
    eab8:	003a      	movs	r2, r7
    eaba:	4659      	mov	r1, fp
    eabc:	9806      	ldr	r0, [sp, #24]
    eabe:	f003 f849 	bl	11b54 <__sprint_r>
    eac2:	2800      	cmp	r0, #0
    eac4:	d001      	beq.n	eaca <_vfprintf_r+0x152e>
    eac6:	f7ff faf9 	bl	e0bc <_vfprintf_r+0xb20>
    eaca:	68b9      	ldr	r1, [r7, #8]
    eacc:	687b      	ldr	r3, [r7, #4]
    eace:	aa32      	add	r2, sp, #200	; 0xc8
    ead0:	e7e7      	b.n	eaa2 <_vfprintf_r+0x1506>
    ead2:	003a      	movs	r2, r7
    ead4:	4659      	mov	r1, fp
    ead6:	9806      	ldr	r0, [sp, #24]
    ead8:	f003 f83c 	bl	11b54 <__sprint_r>
    eadc:	2800      	cmp	r0, #0
    eade:	d001      	beq.n	eae4 <_vfprintf_r+0x1548>
    eae0:	f7ff faec 	bl	e0bc <_vfprintf_r+0xb20>
    eae4:	981f      	ldr	r0, [sp, #124]	; 0x7c
    eae6:	68b9      	ldr	r1, [r7, #8]
    eae8:	687b      	ldr	r3, [r7, #4]
    eaea:	aa32      	add	r2, sp, #200	; 0xc8
    eaec:	e62e      	b.n	e74c <_vfprintf_r+0x11b0>
    eaee:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    eaf0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    eaf2:	4694      	mov	ip, r2
    eaf4:	4463      	add	r3, ip
    eaf6:	001a      	movs	r2, r3
    eaf8:	930e      	str	r3, [sp, #56]	; 0x38
    eafa:	e75d      	b.n	e9b8 <_vfprintf_r+0x141c>
    eafc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    eafe:	e599      	b.n	e634 <_vfprintf_r+0x1098>
    eb00:	212e      	movs	r1, #46	; 0x2e
    eb02:	2330      	movs	r3, #48	; 0x30
    eb04:	aa16      	add	r2, sp, #88	; 0x58
    eb06:	1852      	adds	r2, r2, r1
    eb08:	7013      	strb	r3, [r2, #0]
    eb0a:	002b      	movs	r3, r5
    eb0c:	aa16      	add	r2, sp, #88	; 0x58
    eb0e:	3101      	adds	r1, #1
    eb10:	3330      	adds	r3, #48	; 0x30
    eb12:	1852      	adds	r2, r2, r1
    eb14:	7013      	strb	r3, [r2, #0]
    eb16:	ab22      	add	r3, sp, #136	; 0x88
    eb18:	e6c1      	b.n	e89e <_vfprintf_r+0x1302>
    eb1a:	9b15      	ldr	r3, [sp, #84]	; 0x54
    eb1c:	2b00      	cmp	r3, #0
    eb1e:	db52      	blt.n	ebc6 <_vfprintf_r+0x162a>
    eb20:	ab16      	add	r3, sp, #88	; 0x58
    eb22:	7fdb      	ldrb	r3, [r3, #31]
    eb24:	4698      	mov	r8, r3
    eb26:	9b12      	ldr	r3, [sp, #72]	; 0x48
    eb28:	2b47      	cmp	r3, #71	; 0x47
    eb2a:	dc48      	bgt.n	ebbe <_vfprintf_r+0x1622>
    eb2c:	4b4e      	ldr	r3, [pc, #312]	; (ec68 <_vfprintf_r+0x16cc>)
    eb2e:	9311      	str	r3, [sp, #68]	; 0x44
    eb30:	f7ff f88c 	bl	dc4c <_vfprintf_r+0x6b0>
    eb34:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    eb36:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    eb38:	4694      	mov	ip, r2
    eb3a:	4463      	add	r3, ip
    eb3c:	4453      	add	r3, sl
    eb3e:	001a      	movs	r2, r3
    eb40:	930e      	str	r3, [sp, #56]	; 0x38
    eb42:	43db      	mvns	r3, r3
    eb44:	17db      	asrs	r3, r3, #31
    eb46:	401a      	ands	r2, r3
    eb48:	9208      	str	r2, [sp, #32]
    eb4a:	e595      	b.n	e678 <_vfprintf_r+0x10dc>
    eb4c:	46a9      	mov	r9, r5
    eb4e:	4648      	mov	r0, r9
    eb50:	1909      	adds	r1, r1, r4
    eb52:	3301      	adds	r3, #1
    eb54:	6010      	str	r0, [r2, #0]
    eb56:	6054      	str	r4, [r2, #4]
    eb58:	60b9      	str	r1, [r7, #8]
    eb5a:	3208      	adds	r2, #8
    eb5c:	607b      	str	r3, [r7, #4]
    eb5e:	2b07      	cmp	r3, #7
    eb60:	dc00      	bgt.n	eb64 <_vfprintf_r+0x15c8>
    eb62:	e5f6      	b.n	e752 <_vfprintf_r+0x11b6>
    eb64:	003a      	movs	r2, r7
    eb66:	4659      	mov	r1, fp
    eb68:	9806      	ldr	r0, [sp, #24]
    eb6a:	f002 fff3 	bl	11b54 <__sprint_r>
    eb6e:	2800      	cmp	r0, #0
    eb70:	d001      	beq.n	eb76 <_vfprintf_r+0x15da>
    eb72:	f7ff faa3 	bl	e0bc <_vfprintf_r+0xb20>
    eb76:	68b9      	ldr	r1, [r7, #8]
    eb78:	687b      	ldr	r3, [r7, #4]
    eb7a:	aa32      	add	r2, sp, #200	; 0xc8
    eb7c:	e5e9      	b.n	e752 <_vfprintf_r+0x11b6>
    eb7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    eb80:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    eb82:	1a98      	subs	r0, r3, r2
    eb84:	1c43      	adds	r3, r0, #1
    eb86:	001a      	movs	r2, r3
    eb88:	930e      	str	r3, [sp, #56]	; 0x38
    eb8a:	e715      	b.n	e9b8 <_vfprintf_r+0x141c>
    eb8c:	4a37      	ldr	r2, [pc, #220]	; (ec6c <_vfprintf_r+0x16d0>)
    eb8e:	687b      	ldr	r3, [r7, #4]
    eb90:	4691      	mov	r9, r2
    eb92:	f7ff fbf5 	bl	e380 <_vfprintf_r+0xde4>
    eb96:	2301      	movs	r3, #1
    eb98:	4023      	ands	r3, r4
    eb9a:	9313      	str	r3, [sp, #76]	; 0x4c
    eb9c:	d000      	beq.n	eba0 <_vfprintf_r+0x1604>
    eb9e:	e689      	b.n	e8b4 <_vfprintf_r+0x1318>
    eba0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    eba2:	43d3      	mvns	r3, r2
    eba4:	17db      	asrs	r3, r3, #31
    eba6:	401a      	ands	r2, r3
    eba8:	9208      	str	r2, [sp, #32]
    ebaa:	e565      	b.n	e678 <_vfprintf_r+0x10dc>
    ebac:	2301      	movs	r3, #1
    ebae:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    ebb0:	391b      	subs	r1, #27
    ebb2:	1a9d      	subs	r5, r3, r2
    ebb4:	aa16      	add	r2, sp, #88	; 0x58
    ebb6:	332c      	adds	r3, #44	; 0x2c
    ebb8:	1852      	adds	r2, r2, r1
    ebba:	7013      	strb	r3, [r2, #0]
    ebbc:	e62f      	b.n	e81e <_vfprintf_r+0x1282>
    ebbe:	4b2c      	ldr	r3, [pc, #176]	; (ec70 <_vfprintf_r+0x16d4>)
    ebc0:	9311      	str	r3, [sp, #68]	; 0x44
    ebc2:	f7ff f843 	bl	dc4c <_vfprintf_r+0x6b0>
    ebc6:	232d      	movs	r3, #45	; 0x2d
    ebc8:	aa16      	add	r2, sp, #88	; 0x58
    ebca:	77d3      	strb	r3, [r2, #31]
    ebcc:	4698      	mov	r8, r3
    ebce:	e7aa      	b.n	eb26 <_vfprintf_r+0x158a>
    ebd0:	4653      	mov	r3, sl
    ebd2:	2b00      	cmp	r3, #0
    ebd4:	d101      	bne.n	ebda <_vfprintf_r+0x163e>
    ebd6:	07e3      	lsls	r3, r4, #31
    ebd8:	d503      	bpl.n	ebe2 <_vfprintf_r+0x1646>
    ebda:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    ebdc:	1c58      	adds	r0, r3, #1
    ebde:	0003      	movs	r3, r0
    ebe0:	e7ac      	b.n	eb3c <_vfprintf_r+0x15a0>
    ebe2:	2301      	movs	r3, #1
    ebe4:	e708      	b.n	e9f8 <_vfprintf_r+0x145c>
    ebe6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    ebe8:	9a11      	ldr	r2, [sp, #68]	; 0x44
    ebea:	1a9b      	subs	r3, r3, r2
    ebec:	9314      	str	r3, [sp, #80]	; 0x50
    ebee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ebf0:	2b47      	cmp	r3, #71	; 0x47
    ebf2:	d100      	bne.n	ebf6 <_vfprintf_r+0x165a>
    ebf4:	e5f6      	b.n	e7e4 <_vfprintf_r+0x1248>
    ebf6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    ebf8:	9313      	str	r3, [sp, #76]	; 0x4c
    ebfa:	e5fd      	b.n	e7f8 <_vfprintf_r+0x125c>
    ebfc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ebfe:	1d1d      	adds	r5, r3, #4
    ec00:	681b      	ldr	r3, [r3, #0]
    ec02:	46a8      	mov	r8, r5
    ec04:	469a      	mov	sl, r3
    ec06:	2b00      	cmp	r3, #0
    ec08:	db0a      	blt.n	ec20 <_vfprintf_r+0x1684>
    ec0a:	4645      	mov	r5, r8
    ec0c:	9b07      	ldr	r3, [sp, #28]
    ec0e:	950f      	str	r5, [sp, #60]	; 0x3c
    ec10:	785b      	ldrb	r3, [r3, #1]
    ec12:	9207      	str	r2, [sp, #28]
    ec14:	f7fe fd4b 	bl	d6ae <_vfprintf_r+0x112>
    ec18:	ab16      	add	r3, sp, #88	; 0x58
    ec1a:	77d8      	strb	r0, [r3, #31]
    ec1c:	f7ff f830 	bl	dc80 <_vfprintf_r+0x6e4>
    ec20:	2301      	movs	r3, #1
    ec22:	425b      	negs	r3, r3
    ec24:	469a      	mov	sl, r3
    ec26:	e7f0      	b.n	ec0a <_vfprintf_r+0x166e>
    ec28:	ab16      	add	r3, sp, #88	; 0x58
    ec2a:	77d8      	strb	r0, [r3, #31]
    ec2c:	f7fe ff27 	bl	da7e <_vfprintf_r+0x4e2>
    ec30:	ab16      	add	r3, sp, #88	; 0x58
    ec32:	77d8      	strb	r0, [r3, #31]
    ec34:	f7fe fdce 	bl	d7d4 <_vfprintf_r+0x238>
    ec38:	480c      	ldr	r0, [pc, #48]	; (ec6c <_vfprintf_r+0x16d0>)
    ec3a:	4681      	mov	r9, r0
    ec3c:	e787      	b.n	eb4e <_vfprintf_r+0x15b2>
    ec3e:	ab16      	add	r3, sp, #88	; 0x58
    ec40:	77d8      	strb	r0, [r3, #31]
    ec42:	f7ff f829 	bl	dc98 <_vfprintf_r+0x6fc>
    ec46:	ab16      	add	r3, sp, #88	; 0x58
    ec48:	77d8      	strb	r0, [r3, #31]
    ec4a:	f7fe ffc3 	bl	dbd4 <_vfprintf_r+0x638>
    ec4e:	ab16      	add	r3, sp, #88	; 0x58
    ec50:	77d8      	strb	r0, [r3, #31]
    ec52:	f7fe ffa5 	bl	dba0 <_vfprintf_r+0x604>
    ec56:	ab16      	add	r3, sp, #88	; 0x58
    ec58:	77d8      	strb	r0, [r3, #31]
    ec5a:	f7fe feaf 	bl	d9bc <_vfprintf_r+0x420>
    ec5e:	aa16      	add	r2, sp, #88	; 0x58
    ec60:	232e      	movs	r3, #46	; 0x2e
    ec62:	4694      	mov	ip, r2
    ec64:	4463      	add	r3, ip
    ec66:	e61a      	b.n	e89e <_vfprintf_r+0x1302>
    ec68:	000125dc 	.word	0x000125dc
    ec6c:	00012628 	.word	0x00012628
    ec70:	000125e0 	.word	0x000125e0

0000ec74 <__sbprintf>:
    ec74:	b5f0      	push	{r4, r5, r6, r7, lr}
    ec76:	0015      	movs	r5, r2
    ec78:	2202      	movs	r2, #2
    ec7a:	4c1e      	ldr	r4, [pc, #120]	; (ecf4 <__sbprintf+0x80>)
    ec7c:	001f      	movs	r7, r3
    ec7e:	898b      	ldrh	r3, [r1, #12]
    ec80:	44a5      	add	sp, r4
    ec82:	4393      	bics	r3, r2
    ec84:	466a      	mov	r2, sp
    ec86:	8193      	strh	r3, [r2, #12]
    ec88:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    ec8a:	0006      	movs	r6, r0
    ec8c:	9319      	str	r3, [sp, #100]	; 0x64
    ec8e:	89cb      	ldrh	r3, [r1, #14]
    ec90:	a816      	add	r0, sp, #88	; 0x58
    ec92:	81d3      	strh	r3, [r2, #14]
    ec94:	69cb      	ldr	r3, [r1, #28]
    ec96:	000c      	movs	r4, r1
    ec98:	9307      	str	r3, [sp, #28]
    ec9a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    ec9c:	9309      	str	r3, [sp, #36]	; 0x24
    ec9e:	ab1a      	add	r3, sp, #104	; 0x68
    eca0:	9300      	str	r3, [sp, #0]
    eca2:	9304      	str	r3, [sp, #16]
    eca4:	2380      	movs	r3, #128	; 0x80
    eca6:	00db      	lsls	r3, r3, #3
    eca8:	9302      	str	r3, [sp, #8]
    ecaa:	9305      	str	r3, [sp, #20]
    ecac:	2300      	movs	r3, #0
    ecae:	9306      	str	r3, [sp, #24]
    ecb0:	f001 fdca 	bl	10848 <__retarget_lock_init_recursive>
    ecb4:	002a      	movs	r2, r5
    ecb6:	003b      	movs	r3, r7
    ecb8:	4669      	mov	r1, sp
    ecba:	0030      	movs	r0, r6
    ecbc:	f7fe fc6e 	bl	d59c <_vfprintf_r>
    ecc0:	1e05      	subs	r5, r0, #0
    ecc2:	db05      	blt.n	ecd0 <__sbprintf+0x5c>
    ecc4:	4669      	mov	r1, sp
    ecc6:	0030      	movs	r0, r6
    ecc8:	f001 fa26 	bl	10118 <_fflush_r>
    eccc:	2800      	cmp	r0, #0
    ecce:	d10e      	bne.n	ecee <__sbprintf+0x7a>
    ecd0:	466b      	mov	r3, sp
    ecd2:	899b      	ldrh	r3, [r3, #12]
    ecd4:	065b      	lsls	r3, r3, #25
    ecd6:	d503      	bpl.n	ece0 <__sbprintf+0x6c>
    ecd8:	2240      	movs	r2, #64	; 0x40
    ecda:	89a3      	ldrh	r3, [r4, #12]
    ecdc:	4313      	orrs	r3, r2
    ecde:	81a3      	strh	r3, [r4, #12]
    ece0:	9816      	ldr	r0, [sp, #88]	; 0x58
    ece2:	f001 fdb3 	bl	1084c <__retarget_lock_close_recursive>
    ece6:	0028      	movs	r0, r5
    ece8:	4b03      	ldr	r3, [pc, #12]	; (ecf8 <__sbprintf+0x84>)
    ecea:	449d      	add	sp, r3
    ecec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ecee:	2501      	movs	r5, #1
    ecf0:	426d      	negs	r5, r5
    ecf2:	e7ed      	b.n	ecd0 <__sbprintf+0x5c>
    ecf4:	fffffb94 	.word	0xfffffb94
    ecf8:	0000046c 	.word	0x0000046c

0000ecfc <__swsetup_r>:
    ecfc:	4b33      	ldr	r3, [pc, #204]	; (edcc <__swsetup_r+0xd0>)
    ecfe:	b570      	push	{r4, r5, r6, lr}
    ed00:	0005      	movs	r5, r0
    ed02:	6818      	ldr	r0, [r3, #0]
    ed04:	000c      	movs	r4, r1
    ed06:	2800      	cmp	r0, #0
    ed08:	d002      	beq.n	ed10 <__swsetup_r+0x14>
    ed0a:	6b83      	ldr	r3, [r0, #56]	; 0x38
    ed0c:	2b00      	cmp	r3, #0
    ed0e:	d03c      	beq.n	ed8a <__swsetup_r+0x8e>
    ed10:	230c      	movs	r3, #12
    ed12:	5ee2      	ldrsh	r2, [r4, r3]
    ed14:	b293      	uxth	r3, r2
    ed16:	0719      	lsls	r1, r3, #28
    ed18:	d50d      	bpl.n	ed36 <__swsetup_r+0x3a>
    ed1a:	6921      	ldr	r1, [r4, #16]
    ed1c:	2900      	cmp	r1, #0
    ed1e:	d015      	beq.n	ed4c <__swsetup_r+0x50>
    ed20:	07da      	lsls	r2, r3, #31
    ed22:	d521      	bpl.n	ed68 <__swsetup_r+0x6c>
    ed24:	2300      	movs	r3, #0
    ed26:	60a3      	str	r3, [r4, #8]
    ed28:	6963      	ldr	r3, [r4, #20]
    ed2a:	2000      	movs	r0, #0
    ed2c:	425b      	negs	r3, r3
    ed2e:	61a3      	str	r3, [r4, #24]
    ed30:	2900      	cmp	r1, #0
    ed32:	d021      	beq.n	ed78 <__swsetup_r+0x7c>
    ed34:	bd70      	pop	{r4, r5, r6, pc}
    ed36:	06d9      	lsls	r1, r3, #27
    ed38:	d53f      	bpl.n	edba <__swsetup_r+0xbe>
    ed3a:	075b      	lsls	r3, r3, #29
    ed3c:	d428      	bmi.n	ed90 <__swsetup_r+0x94>
    ed3e:	6921      	ldr	r1, [r4, #16]
    ed40:	2308      	movs	r3, #8
    ed42:	4313      	orrs	r3, r2
    ed44:	81a3      	strh	r3, [r4, #12]
    ed46:	b29b      	uxth	r3, r3
    ed48:	2900      	cmp	r1, #0
    ed4a:	d1e9      	bne.n	ed20 <__swsetup_r+0x24>
    ed4c:	22a0      	movs	r2, #160	; 0xa0
    ed4e:	2080      	movs	r0, #128	; 0x80
    ed50:	0092      	lsls	r2, r2, #2
    ed52:	0080      	lsls	r0, r0, #2
    ed54:	401a      	ands	r2, r3
    ed56:	4282      	cmp	r2, r0
    ed58:	d0e2      	beq.n	ed20 <__swsetup_r+0x24>
    ed5a:	0021      	movs	r1, r4
    ed5c:	0028      	movs	r0, r5
    ed5e:	f001 fdab 	bl	108b8 <__smakebuf_r>
    ed62:	89a3      	ldrh	r3, [r4, #12]
    ed64:	6921      	ldr	r1, [r4, #16]
    ed66:	e7db      	b.n	ed20 <__swsetup_r+0x24>
    ed68:	2200      	movs	r2, #0
    ed6a:	079b      	lsls	r3, r3, #30
    ed6c:	d400      	bmi.n	ed70 <__swsetup_r+0x74>
    ed6e:	6962      	ldr	r2, [r4, #20]
    ed70:	60a2      	str	r2, [r4, #8]
    ed72:	2000      	movs	r0, #0
    ed74:	2900      	cmp	r1, #0
    ed76:	d1dd      	bne.n	ed34 <__swsetup_r+0x38>
    ed78:	220c      	movs	r2, #12
    ed7a:	5ea3      	ldrsh	r3, [r4, r2]
    ed7c:	061a      	lsls	r2, r3, #24
    ed7e:	d5d9      	bpl.n	ed34 <__swsetup_r+0x38>
    ed80:	2240      	movs	r2, #64	; 0x40
    ed82:	4313      	orrs	r3, r2
    ed84:	81a3      	strh	r3, [r4, #12]
    ed86:	3801      	subs	r0, #1
    ed88:	e7d4      	b.n	ed34 <__swsetup_r+0x38>
    ed8a:	f001 fa1f 	bl	101cc <__sinit>
    ed8e:	e7bf      	b.n	ed10 <__swsetup_r+0x14>
    ed90:	6b21      	ldr	r1, [r4, #48]	; 0x30
    ed92:	2900      	cmp	r1, #0
    ed94:	d00a      	beq.n	edac <__swsetup_r+0xb0>
    ed96:	0023      	movs	r3, r4
    ed98:	3340      	adds	r3, #64	; 0x40
    ed9a:	4299      	cmp	r1, r3
    ed9c:	d004      	beq.n	eda8 <__swsetup_r+0xac>
    ed9e:	0028      	movs	r0, r5
    eda0:	f001 fabe 	bl	10320 <_free_r>
    eda4:	230c      	movs	r3, #12
    eda6:	5ee2      	ldrsh	r2, [r4, r3]
    eda8:	2300      	movs	r3, #0
    edaa:	6323      	str	r3, [r4, #48]	; 0x30
    edac:	2324      	movs	r3, #36	; 0x24
    edae:	439a      	bics	r2, r3
    edb0:	2300      	movs	r3, #0
    edb2:	6921      	ldr	r1, [r4, #16]
    edb4:	6063      	str	r3, [r4, #4]
    edb6:	6021      	str	r1, [r4, #0]
    edb8:	e7c2      	b.n	ed40 <__swsetup_r+0x44>
    edba:	2309      	movs	r3, #9
    edbc:	602b      	str	r3, [r5, #0]
    edbe:	2340      	movs	r3, #64	; 0x40
    edc0:	2001      	movs	r0, #1
    edc2:	431a      	orrs	r2, r3
    edc4:	81a2      	strh	r2, [r4, #12]
    edc6:	4240      	negs	r0, r0
    edc8:	e7b4      	b.n	ed34 <__swsetup_r+0x38>
    edca:	46c0      	nop			; (mov r8, r8)
    edcc:	20000084 	.word	0x20000084

0000edd0 <__register_exitproc>:
    edd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    edd2:	464e      	mov	r6, r9
    edd4:	4645      	mov	r5, r8
    edd6:	46de      	mov	lr, fp
    edd8:	4657      	mov	r7, sl
    edda:	b5e0      	push	{r5, r6, r7, lr}
    eddc:	4d36      	ldr	r5, [pc, #216]	; (eeb8 <__register_exitproc+0xe8>)
    edde:	b083      	sub	sp, #12
    ede0:	0006      	movs	r6, r0
    ede2:	6828      	ldr	r0, [r5, #0]
    ede4:	4698      	mov	r8, r3
    ede6:	000f      	movs	r7, r1
    ede8:	4691      	mov	r9, r2
    edea:	f001 fd31 	bl	10850 <__retarget_lock_acquire_recursive>
    edee:	4b33      	ldr	r3, [pc, #204]	; (eebc <__register_exitproc+0xec>)
    edf0:	681c      	ldr	r4, [r3, #0]
    edf2:	23a4      	movs	r3, #164	; 0xa4
    edf4:	005b      	lsls	r3, r3, #1
    edf6:	58e0      	ldr	r0, [r4, r3]
    edf8:	2800      	cmp	r0, #0
    edfa:	d052      	beq.n	eea2 <__register_exitproc+0xd2>
    edfc:	6843      	ldr	r3, [r0, #4]
    edfe:	2b1f      	cmp	r3, #31
    ee00:	dc13      	bgt.n	ee2a <__register_exitproc+0x5a>
    ee02:	1c5a      	adds	r2, r3, #1
    ee04:	9201      	str	r2, [sp, #4]
    ee06:	2e00      	cmp	r6, #0
    ee08:	d128      	bne.n	ee5c <__register_exitproc+0x8c>
    ee0a:	9a01      	ldr	r2, [sp, #4]
    ee0c:	3302      	adds	r3, #2
    ee0e:	009b      	lsls	r3, r3, #2
    ee10:	6042      	str	r2, [r0, #4]
    ee12:	501f      	str	r7, [r3, r0]
    ee14:	6828      	ldr	r0, [r5, #0]
    ee16:	f001 fd1d 	bl	10854 <__retarget_lock_release_recursive>
    ee1a:	2000      	movs	r0, #0
    ee1c:	b003      	add	sp, #12
    ee1e:	bc3c      	pop	{r2, r3, r4, r5}
    ee20:	4690      	mov	r8, r2
    ee22:	4699      	mov	r9, r3
    ee24:	46a2      	mov	sl, r4
    ee26:	46ab      	mov	fp, r5
    ee28:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ee2a:	4b25      	ldr	r3, [pc, #148]	; (eec0 <__register_exitproc+0xf0>)
    ee2c:	2b00      	cmp	r3, #0
    ee2e:	d03d      	beq.n	eeac <__register_exitproc+0xdc>
    ee30:	20c8      	movs	r0, #200	; 0xc8
    ee32:	0040      	lsls	r0, r0, #1
    ee34:	f001 fd88 	bl	10948 <malloc>
    ee38:	2800      	cmp	r0, #0
    ee3a:	d037      	beq.n	eeac <__register_exitproc+0xdc>
    ee3c:	22a4      	movs	r2, #164	; 0xa4
    ee3e:	2300      	movs	r3, #0
    ee40:	0052      	lsls	r2, r2, #1
    ee42:	58a1      	ldr	r1, [r4, r2]
    ee44:	6043      	str	r3, [r0, #4]
    ee46:	6001      	str	r1, [r0, #0]
    ee48:	50a0      	str	r0, [r4, r2]
    ee4a:	3240      	adds	r2, #64	; 0x40
    ee4c:	5083      	str	r3, [r0, r2]
    ee4e:	3204      	adds	r2, #4
    ee50:	5083      	str	r3, [r0, r2]
    ee52:	3301      	adds	r3, #1
    ee54:	9301      	str	r3, [sp, #4]
    ee56:	2300      	movs	r3, #0
    ee58:	2e00      	cmp	r6, #0
    ee5a:	d0d6      	beq.n	ee0a <__register_exitproc+0x3a>
    ee5c:	009a      	lsls	r2, r3, #2
    ee5e:	4692      	mov	sl, r2
    ee60:	4482      	add	sl, r0
    ee62:	464a      	mov	r2, r9
    ee64:	2188      	movs	r1, #136	; 0x88
    ee66:	4654      	mov	r4, sl
    ee68:	5062      	str	r2, [r4, r1]
    ee6a:	22c4      	movs	r2, #196	; 0xc4
    ee6c:	0052      	lsls	r2, r2, #1
    ee6e:	4691      	mov	r9, r2
    ee70:	4481      	add	r9, r0
    ee72:	464a      	mov	r2, r9
    ee74:	3987      	subs	r1, #135	; 0x87
    ee76:	4099      	lsls	r1, r3
    ee78:	6812      	ldr	r2, [r2, #0]
    ee7a:	468b      	mov	fp, r1
    ee7c:	430a      	orrs	r2, r1
    ee7e:	4694      	mov	ip, r2
    ee80:	464a      	mov	r2, r9
    ee82:	4661      	mov	r1, ip
    ee84:	6011      	str	r1, [r2, #0]
    ee86:	2284      	movs	r2, #132	; 0x84
    ee88:	4641      	mov	r1, r8
    ee8a:	0052      	lsls	r2, r2, #1
    ee8c:	50a1      	str	r1, [r4, r2]
    ee8e:	2e02      	cmp	r6, #2
    ee90:	d1bb      	bne.n	ee0a <__register_exitproc+0x3a>
    ee92:	0002      	movs	r2, r0
    ee94:	465c      	mov	r4, fp
    ee96:	328d      	adds	r2, #141	; 0x8d
    ee98:	32ff      	adds	r2, #255	; 0xff
    ee9a:	6811      	ldr	r1, [r2, #0]
    ee9c:	430c      	orrs	r4, r1
    ee9e:	6014      	str	r4, [r2, #0]
    eea0:	e7b3      	b.n	ee0a <__register_exitproc+0x3a>
    eea2:	0020      	movs	r0, r4
    eea4:	304d      	adds	r0, #77	; 0x4d
    eea6:	30ff      	adds	r0, #255	; 0xff
    eea8:	50e0      	str	r0, [r4, r3]
    eeaa:	e7a7      	b.n	edfc <__register_exitproc+0x2c>
    eeac:	6828      	ldr	r0, [r5, #0]
    eeae:	f001 fcd1 	bl	10854 <__retarget_lock_release_recursive>
    eeb2:	2001      	movs	r0, #1
    eeb4:	4240      	negs	r0, r0
    eeb6:	e7b1      	b.n	ee1c <__register_exitproc+0x4c>
    eeb8:	200004b0 	.word	0x200004b0
    eebc:	00012468 	.word	0x00012468
    eec0:	00010949 	.word	0x00010949

0000eec4 <register_fini>:
    eec4:	4b03      	ldr	r3, [pc, #12]	; (eed4 <register_fini+0x10>)
    eec6:	b510      	push	{r4, lr}
    eec8:	2b00      	cmp	r3, #0
    eeca:	d002      	beq.n	eed2 <register_fini+0xe>
    eecc:	4802      	ldr	r0, [pc, #8]	; (eed8 <register_fini+0x14>)
    eece:	f000 f805 	bl	eedc <atexit>
    eed2:	bd10      	pop	{r4, pc}
    eed4:	00000000 	.word	0x00000000
    eed8:	0001024d 	.word	0x0001024d

0000eedc <atexit>:
    eedc:	b510      	push	{r4, lr}
    eede:	0001      	movs	r1, r0
    eee0:	2300      	movs	r3, #0
    eee2:	2200      	movs	r2, #0
    eee4:	2000      	movs	r0, #0
    eee6:	f7ff ff73 	bl	edd0 <__register_exitproc>
    eeea:	bd10      	pop	{r4, pc}

0000eeec <quorem>:
    eeec:	b5f0      	push	{r4, r5, r6, r7, lr}
    eeee:	4645      	mov	r5, r8
    eef0:	4680      	mov	r8, r0
    eef2:	46de      	mov	lr, fp
    eef4:	4657      	mov	r7, sl
    eef6:	464e      	mov	r6, r9
    eef8:	4642      	mov	r2, r8
    eefa:	b5e0      	push	{r5, r6, r7, lr}
    eefc:	690c      	ldr	r4, [r1, #16]
    eefe:	6912      	ldr	r2, [r2, #16]
    ef00:	b085      	sub	sp, #20
    ef02:	000b      	movs	r3, r1
    ef04:	9102      	str	r1, [sp, #8]
    ef06:	2000      	movs	r0, #0
    ef08:	4294      	cmp	r4, r2
    ef0a:	dd00      	ble.n	ef0e <quorem+0x22>
    ef0c:	e090      	b.n	f030 <quorem+0x144>
    ef0e:	2214      	movs	r2, #20
    ef10:	4694      	mov	ip, r2
    ef12:	4463      	add	r3, ip
    ef14:	4699      	mov	r9, r3
    ef16:	464a      	mov	r2, r9
    ef18:	3c01      	subs	r4, #1
    ef1a:	00a3      	lsls	r3, r4, #2
    ef1c:	18d6      	adds	r6, r2, r3
    ef1e:	2214      	movs	r2, #20
    ef20:	4442      	add	r2, r8
    ef22:	4693      	mov	fp, r2
    ef24:	449b      	add	fp, r3
    ef26:	6833      	ldr	r3, [r6, #0]
    ef28:	0015      	movs	r5, r2
    ef2a:	1c59      	adds	r1, r3, #1
    ef2c:	465b      	mov	r3, fp
    ef2e:	6818      	ldr	r0, [r3, #0]
    ef30:	9201      	str	r2, [sp, #4]
    ef32:	f7fb faa7 	bl	a484 <__udivsi3>
    ef36:	1e03      	subs	r3, r0, #0
    ef38:	9000      	str	r0, [sp, #0]
    ef3a:	d042      	beq.n	efc2 <quorem+0xd6>
    ef3c:	0029      	movs	r1, r5
    ef3e:	2700      	movs	r7, #0
    ef40:	464d      	mov	r5, r9
    ef42:	2000      	movs	r0, #0
    ef44:	46b1      	mov	r9, r6
    ef46:	46a2      	mov	sl, r4
    ef48:	003e      	movs	r6, r7
    ef4a:	0004      	movs	r4, r0
    ef4c:	469c      	mov	ip, r3
    ef4e:	002f      	movs	r7, r5
    ef50:	0008      	movs	r0, r1
    ef52:	9503      	str	r5, [sp, #12]
    ef54:	4663      	mov	r3, ip
    ef56:	cf04      	ldmia	r7!, {r2}
    ef58:	0415      	lsls	r5, r2, #16
    ef5a:	0c2d      	lsrs	r5, r5, #16
    ef5c:	435d      	muls	r5, r3
    ef5e:	0c12      	lsrs	r2, r2, #16
    ef60:	435a      	muls	r2, r3
    ef62:	19ad      	adds	r5, r5, r6
    ef64:	0c2b      	lsrs	r3, r5, #16
    ef66:	18d2      	adds	r2, r2, r3
    ef68:	6803      	ldr	r3, [r0, #0]
    ef6a:	042d      	lsls	r5, r5, #16
    ef6c:	0419      	lsls	r1, r3, #16
    ef6e:	0c09      	lsrs	r1, r1, #16
    ef70:	1909      	adds	r1, r1, r4
    ef72:	0c16      	lsrs	r6, r2, #16
    ef74:	0c2d      	lsrs	r5, r5, #16
    ef76:	0412      	lsls	r2, r2, #16
    ef78:	1b49      	subs	r1, r1, r5
    ef7a:	0c12      	lsrs	r2, r2, #16
    ef7c:	0c1b      	lsrs	r3, r3, #16
    ef7e:	1a9b      	subs	r3, r3, r2
    ef80:	140a      	asrs	r2, r1, #16
    ef82:	189b      	adds	r3, r3, r2
    ef84:	0409      	lsls	r1, r1, #16
    ef86:	141c      	asrs	r4, r3, #16
    ef88:	0c09      	lsrs	r1, r1, #16
    ef8a:	041b      	lsls	r3, r3, #16
    ef8c:	4319      	orrs	r1, r3
    ef8e:	c002      	stmia	r0!, {r1}
    ef90:	45b9      	cmp	r9, r7
    ef92:	d2df      	bcs.n	ef54 <quorem+0x68>
    ef94:	9b03      	ldr	r3, [sp, #12]
    ef96:	464e      	mov	r6, r9
    ef98:	4699      	mov	r9, r3
    ef9a:	465b      	mov	r3, fp
    ef9c:	681b      	ldr	r3, [r3, #0]
    ef9e:	4654      	mov	r4, sl
    efa0:	2b00      	cmp	r3, #0
    efa2:	d10e      	bne.n	efc2 <quorem+0xd6>
    efa4:	465b      	mov	r3, fp
    efa6:	9a01      	ldr	r2, [sp, #4]
    efa8:	3b04      	subs	r3, #4
    efaa:	429a      	cmp	r2, r3
    efac:	d304      	bcc.n	efb8 <quorem+0xcc>
    efae:	e006      	b.n	efbe <quorem+0xd2>
    efb0:	3b04      	subs	r3, #4
    efb2:	3c01      	subs	r4, #1
    efb4:	429a      	cmp	r2, r3
    efb6:	d202      	bcs.n	efbe <quorem+0xd2>
    efb8:	6819      	ldr	r1, [r3, #0]
    efba:	2900      	cmp	r1, #0
    efbc:	d0f8      	beq.n	efb0 <quorem+0xc4>
    efbe:	4643      	mov	r3, r8
    efc0:	611c      	str	r4, [r3, #16]
    efc2:	9902      	ldr	r1, [sp, #8]
    efc4:	4640      	mov	r0, r8
    efc6:	f002 fa51 	bl	1146c <__mcmp>
    efca:	2800      	cmp	r0, #0
    efcc:	db2f      	blt.n	f02e <quorem+0x142>
    efce:	464f      	mov	r7, r9
    efd0:	2000      	movs	r0, #0
    efd2:	9b00      	ldr	r3, [sp, #0]
    efd4:	9d01      	ldr	r5, [sp, #4]
    efd6:	3301      	adds	r3, #1
    efd8:	9300      	str	r3, [sp, #0]
    efda:	682b      	ldr	r3, [r5, #0]
    efdc:	cf02      	ldmia	r7!, {r1}
    efde:	041a      	lsls	r2, r3, #16
    efe0:	0c12      	lsrs	r2, r2, #16
    efe2:	1810      	adds	r0, r2, r0
    efe4:	040a      	lsls	r2, r1, #16
    efe6:	0c12      	lsrs	r2, r2, #16
    efe8:	1a82      	subs	r2, r0, r2
    efea:	0c09      	lsrs	r1, r1, #16
    efec:	0c1b      	lsrs	r3, r3, #16
    efee:	1a5b      	subs	r3, r3, r1
    eff0:	1411      	asrs	r1, r2, #16
    eff2:	185b      	adds	r3, r3, r1
    eff4:	0412      	lsls	r2, r2, #16
    eff6:	1418      	asrs	r0, r3, #16
    eff8:	0c12      	lsrs	r2, r2, #16
    effa:	041b      	lsls	r3, r3, #16
    effc:	4313      	orrs	r3, r2
    effe:	c508      	stmia	r5!, {r3}
    f000:	42be      	cmp	r6, r7
    f002:	d2ea      	bcs.n	efda <quorem+0xee>
    f004:	9901      	ldr	r1, [sp, #4]
    f006:	00a3      	lsls	r3, r4, #2
    f008:	468c      	mov	ip, r1
    f00a:	4463      	add	r3, ip
    f00c:	681a      	ldr	r2, [r3, #0]
    f00e:	2a00      	cmp	r2, #0
    f010:	d10d      	bne.n	f02e <quorem+0x142>
    f012:	3b04      	subs	r3, #4
    f014:	000a      	movs	r2, r1
    f016:	4299      	cmp	r1, r3
    f018:	d304      	bcc.n	f024 <quorem+0x138>
    f01a:	e006      	b.n	f02a <quorem+0x13e>
    f01c:	3b04      	subs	r3, #4
    f01e:	3c01      	subs	r4, #1
    f020:	429a      	cmp	r2, r3
    f022:	d202      	bcs.n	f02a <quorem+0x13e>
    f024:	6819      	ldr	r1, [r3, #0]
    f026:	2900      	cmp	r1, #0
    f028:	d0f8      	beq.n	f01c <quorem+0x130>
    f02a:	4643      	mov	r3, r8
    f02c:	611c      	str	r4, [r3, #16]
    f02e:	9800      	ldr	r0, [sp, #0]
    f030:	b005      	add	sp, #20
    f032:	bc3c      	pop	{r2, r3, r4, r5}
    f034:	4690      	mov	r8, r2
    f036:	4699      	mov	r9, r3
    f038:	46a2      	mov	sl, r4
    f03a:	46ab      	mov	fp, r5
    f03c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f03e:	46c0      	nop			; (mov r8, r8)

0000f040 <_dtoa_r>:
    f040:	b5f0      	push	{r4, r5, r6, r7, lr}
    f042:	4657      	mov	r7, sl
    f044:	464e      	mov	r6, r9
    f046:	4645      	mov	r5, r8
    f048:	46de      	mov	lr, fp
    f04a:	b5e0      	push	{r5, r6, r7, lr}
    f04c:	6c01      	ldr	r1, [r0, #64]	; 0x40
    f04e:	b099      	sub	sp, #100	; 0x64
    f050:	4682      	mov	sl, r0
    f052:	001d      	movs	r5, r3
    f054:	0016      	movs	r6, r2
    f056:	001f      	movs	r7, r3
    f058:	2900      	cmp	r1, #0
    f05a:	d009      	beq.n	f070 <_dtoa_r+0x30>
    f05c:	2301      	movs	r3, #1
    f05e:	6c42      	ldr	r2, [r0, #68]	; 0x44
    f060:	4093      	lsls	r3, r2
    f062:	604a      	str	r2, [r1, #4]
    f064:	608b      	str	r3, [r1, #8]
    f066:	f001 fff5 	bl	11054 <_Bfree>
    f06a:	2300      	movs	r3, #0
    f06c:	4652      	mov	r2, sl
    f06e:	6413      	str	r3, [r2, #64]	; 0x40
    f070:	46b8      	mov	r8, r7
    f072:	2f00      	cmp	r7, #0
    f074:	db37      	blt.n	f0e6 <_dtoa_r+0xa6>
    f076:	2300      	movs	r3, #0
    f078:	9a25      	ldr	r2, [sp, #148]	; 0x94
    f07a:	6013      	str	r3, [r2, #0]
    f07c:	4642      	mov	r2, r8
    f07e:	4bd6      	ldr	r3, [pc, #856]	; (f3d8 <_dtoa_r+0x398>)
    f080:	401a      	ands	r2, r3
    f082:	429a      	cmp	r2, r3
    f084:	d018      	beq.n	f0b8 <_dtoa_r+0x78>
    f086:	2200      	movs	r2, #0
    f088:	2300      	movs	r3, #0
    f08a:	0030      	movs	r0, r6
    f08c:	0039      	movs	r1, r7
    f08e:	f7fb fb7f 	bl	a790 <__aeabi_dcmpeq>
    f092:	2800      	cmp	r0, #0
    f094:	d02f      	beq.n	f0f6 <_dtoa_r+0xb6>
    f096:	2301      	movs	r3, #1
    f098:	9a24      	ldr	r2, [sp, #144]	; 0x90
    f09a:	6013      	str	r3, [r2, #0]
    f09c:	9b26      	ldr	r3, [sp, #152]	; 0x98
    f09e:	2b00      	cmp	r3, #0
    f0a0:	d100      	bne.n	f0a4 <_dtoa_r+0x64>
    f0a2:	e22a      	b.n	f4fa <_dtoa_r+0x4ba>
    f0a4:	48cd      	ldr	r0, [pc, #820]	; (f3dc <_dtoa_r+0x39c>)
    f0a6:	6018      	str	r0, [r3, #0]
    f0a8:	3801      	subs	r0, #1
    f0aa:	b019      	add	sp, #100	; 0x64
    f0ac:	bc3c      	pop	{r2, r3, r4, r5}
    f0ae:	4690      	mov	r8, r2
    f0b0:	4699      	mov	r9, r3
    f0b2:	46a2      	mov	sl, r4
    f0b4:	46ab      	mov	fp, r5
    f0b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f0b8:	4bc9      	ldr	r3, [pc, #804]	; (f3e0 <_dtoa_r+0x3a0>)
    f0ba:	9a24      	ldr	r2, [sp, #144]	; 0x90
    f0bc:	6013      	str	r3, [r2, #0]
    f0be:	2e00      	cmp	r6, #0
    f0c0:	d10b      	bne.n	f0da <_dtoa_r+0x9a>
    f0c2:	4643      	mov	r3, r8
    f0c4:	0318      	lsls	r0, r3, #12
    f0c6:	d108      	bne.n	f0da <_dtoa_r+0x9a>
    f0c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
    f0ca:	48c6      	ldr	r0, [pc, #792]	; (f3e4 <_dtoa_r+0x3a4>)
    f0cc:	2b00      	cmp	r3, #0
    f0ce:	d0ec      	beq.n	f0aa <_dtoa_r+0x6a>
    f0d0:	0003      	movs	r3, r0
    f0d2:	3308      	adds	r3, #8
    f0d4:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f0d6:	6013      	str	r3, [r2, #0]
    f0d8:	e7e7      	b.n	f0aa <_dtoa_r+0x6a>
    f0da:	9b26      	ldr	r3, [sp, #152]	; 0x98
    f0dc:	48c2      	ldr	r0, [pc, #776]	; (f3e8 <_dtoa_r+0x3a8>)
    f0de:	2b00      	cmp	r3, #0
    f0e0:	d0e3      	beq.n	f0aa <_dtoa_r+0x6a>
    f0e2:	1cc3      	adds	r3, r0, #3
    f0e4:	e7f6      	b.n	f0d4 <_dtoa_r+0x94>
    f0e6:	2301      	movs	r3, #1
    f0e8:	9a25      	ldr	r2, [sp, #148]	; 0x94
    f0ea:	0068      	lsls	r0, r5, #1
    f0ec:	6013      	str	r3, [r2, #0]
    f0ee:	0843      	lsrs	r3, r0, #1
    f0f0:	4698      	mov	r8, r3
    f0f2:	001f      	movs	r7, r3
    f0f4:	e7c2      	b.n	f07c <_dtoa_r+0x3c>
    f0f6:	ab16      	add	r3, sp, #88	; 0x58
    f0f8:	9301      	str	r3, [sp, #4]
    f0fa:	ab17      	add	r3, sp, #92	; 0x5c
    f0fc:	9300      	str	r3, [sp, #0]
    f0fe:	0032      	movs	r2, r6
    f100:	003b      	movs	r3, r7
    f102:	4650      	mov	r0, sl
    f104:	f002 fa68 	bl	115d8 <__d2b>
    f108:	4643      	mov	r3, r8
    f10a:	4683      	mov	fp, r0
    f10c:	0d1a      	lsrs	r2, r3, #20
    f10e:	d100      	bne.n	f112 <_dtoa_r+0xd2>
    f110:	e1d6      	b.n	f4c0 <_dtoa_r+0x480>
    f112:	033b      	lsls	r3, r7, #12
    f114:	4cb5      	ldr	r4, [pc, #724]	; (f3ec <_dtoa_r+0x3ac>)
    f116:	0b1b      	lsrs	r3, r3, #12
    f118:	431c      	orrs	r4, r3
    f11a:	4bb5      	ldr	r3, [pc, #724]	; (f3f0 <_dtoa_r+0x3b0>)
    f11c:	0030      	movs	r0, r6
    f11e:	4698      	mov	r8, r3
    f120:	9b16      	ldr	r3, [sp, #88]	; 0x58
    f122:	0021      	movs	r1, r4
    f124:	4699      	mov	r9, r3
    f126:	2300      	movs	r3, #0
    f128:	4490      	add	r8, r2
    f12a:	930f      	str	r3, [sp, #60]	; 0x3c
    f12c:	2200      	movs	r2, #0
    f12e:	4bb1      	ldr	r3, [pc, #708]	; (f3f4 <_dtoa_r+0x3b4>)
    f130:	f7fd fb9e 	bl	c870 <__aeabi_dsub>
    f134:	4ab0      	ldr	r2, [pc, #704]	; (f3f8 <_dtoa_r+0x3b8>)
    f136:	4bb1      	ldr	r3, [pc, #708]	; (f3fc <_dtoa_r+0x3bc>)
    f138:	f7fd f91a 	bl	c370 <__aeabi_dmul>
    f13c:	4ab0      	ldr	r2, [pc, #704]	; (f400 <_dtoa_r+0x3c0>)
    f13e:	4bb1      	ldr	r3, [pc, #708]	; (f404 <_dtoa_r+0x3c4>)
    f140:	f7fc f9d2 	bl	b4e8 <__aeabi_dadd>
    f144:	0004      	movs	r4, r0
    f146:	4640      	mov	r0, r8
    f148:	000d      	movs	r5, r1
    f14a:	f7fd fefb 	bl	cf44 <__aeabi_i2d>
    f14e:	4aae      	ldr	r2, [pc, #696]	; (f408 <_dtoa_r+0x3c8>)
    f150:	4bae      	ldr	r3, [pc, #696]	; (f40c <_dtoa_r+0x3cc>)
    f152:	f7fd f90d 	bl	c370 <__aeabi_dmul>
    f156:	0002      	movs	r2, r0
    f158:	000b      	movs	r3, r1
    f15a:	0020      	movs	r0, r4
    f15c:	0029      	movs	r1, r5
    f15e:	f7fc f9c3 	bl	b4e8 <__aeabi_dadd>
    f162:	0004      	movs	r4, r0
    f164:	000d      	movs	r5, r1
    f166:	f7fd feb9 	bl	cedc <__aeabi_d2iz>
    f16a:	2200      	movs	r2, #0
    f16c:	9003      	str	r0, [sp, #12]
    f16e:	2300      	movs	r3, #0
    f170:	0020      	movs	r0, r4
    f172:	0029      	movs	r1, r5
    f174:	f7fb fb12 	bl	a79c <__aeabi_dcmplt>
    f178:	2800      	cmp	r0, #0
    f17a:	d000      	beq.n	f17e <_dtoa_r+0x13e>
    f17c:	e2b1      	b.n	f6e2 <_dtoa_r+0x6a2>
    f17e:	2301      	movs	r3, #1
    f180:	9c03      	ldr	r4, [sp, #12]
    f182:	930c      	str	r3, [sp, #48]	; 0x30
    f184:	2c16      	cmp	r4, #22
    f186:	d810      	bhi.n	f1aa <_dtoa_r+0x16a>
    f188:	49a1      	ldr	r1, [pc, #644]	; (f410 <_dtoa_r+0x3d0>)
    f18a:	00e3      	lsls	r3, r4, #3
    f18c:	18c9      	adds	r1, r1, r3
    f18e:	0032      	movs	r2, r6
    f190:	6808      	ldr	r0, [r1, #0]
    f192:	6849      	ldr	r1, [r1, #4]
    f194:	003b      	movs	r3, r7
    f196:	f7fb fb15 	bl	a7c4 <__aeabi_dcmpgt>
    f19a:	2800      	cmp	r0, #0
    f19c:	d100      	bne.n	f1a0 <_dtoa_r+0x160>
    f19e:	e31d      	b.n	f7dc <_dtoa_r+0x79c>
    f1a0:	0023      	movs	r3, r4
    f1a2:	3b01      	subs	r3, #1
    f1a4:	9303      	str	r3, [sp, #12]
    f1a6:	2300      	movs	r3, #0
    f1a8:	930c      	str	r3, [sp, #48]	; 0x30
    f1aa:	464b      	mov	r3, r9
    f1ac:	4642      	mov	r2, r8
    f1ae:	1a9a      	subs	r2, r3, r2
    f1b0:	2300      	movs	r3, #0
    f1b2:	9306      	str	r3, [sp, #24]
    f1b4:	0013      	movs	r3, r2
    f1b6:	3b01      	subs	r3, #1
    f1b8:	9304      	str	r3, [sp, #16]
    f1ba:	d500      	bpl.n	f1be <_dtoa_r+0x17e>
    f1bc:	e2a1      	b.n	f702 <_dtoa_r+0x6c2>
    f1be:	9b03      	ldr	r3, [sp, #12]
    f1c0:	2b00      	cmp	r3, #0
    f1c2:	da00      	bge.n	f1c6 <_dtoa_r+0x186>
    f1c4:	e284      	b.n	f6d0 <_dtoa_r+0x690>
    f1c6:	469c      	mov	ip, r3
    f1c8:	930d      	str	r3, [sp, #52]	; 0x34
    f1ca:	2300      	movs	r3, #0
    f1cc:	9a04      	ldr	r2, [sp, #16]
    f1ce:	4699      	mov	r9, r3
    f1d0:	0011      	movs	r1, r2
    f1d2:	4461      	add	r1, ip
    f1d4:	9104      	str	r1, [sp, #16]
    f1d6:	9b22      	ldr	r3, [sp, #136]	; 0x88
    f1d8:	2b09      	cmp	r3, #9
    f1da:	d900      	bls.n	f1de <_dtoa_r+0x19e>
    f1dc:	e18f      	b.n	f4fe <_dtoa_r+0x4be>
    f1de:	2401      	movs	r4, #1
    f1e0:	2b05      	cmp	r3, #5
    f1e2:	dd02      	ble.n	f1ea <_dtoa_r+0x1aa>
    f1e4:	2400      	movs	r4, #0
    f1e6:	3b04      	subs	r3, #4
    f1e8:	9322      	str	r3, [sp, #136]	; 0x88
    f1ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
    f1ec:	2b03      	cmp	r3, #3
    f1ee:	d101      	bne.n	f1f4 <_dtoa_r+0x1b4>
    f1f0:	f000 fcce 	bl	fb90 <_dtoa_r+0xb50>
    f1f4:	dc01      	bgt.n	f1fa <_dtoa_r+0x1ba>
    f1f6:	f000 fc92 	bl	fb1e <_dtoa_r+0xade>
    f1fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
    f1fc:	2b04      	cmp	r3, #4
    f1fe:	d101      	bne.n	f204 <_dtoa_r+0x1c4>
    f200:	f000 fc40 	bl	fa84 <_dtoa_r+0xa44>
    f204:	2301      	movs	r3, #1
    f206:	930b      	str	r3, [sp, #44]	; 0x2c
    f208:	9b22      	ldr	r3, [sp, #136]	; 0x88
    f20a:	2b05      	cmp	r3, #5
    f20c:	d001      	beq.n	f212 <_dtoa_r+0x1d2>
    f20e:	f000 fc8b 	bl	fb28 <_dtoa_r+0xae8>
    f212:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    f214:	9b03      	ldr	r3, [sp, #12]
    f216:	4694      	mov	ip, r2
    f218:	4463      	add	r3, ip
    f21a:	930e      	str	r3, [sp, #56]	; 0x38
    f21c:	3301      	adds	r3, #1
    f21e:	9307      	str	r3, [sp, #28]
    f220:	1e1d      	subs	r5, r3, #0
    f222:	dc01      	bgt.n	f228 <_dtoa_r+0x1e8>
    f224:	f000 fd49 	bl	fcba <_dtoa_r+0xc7a>
    f228:	9b07      	ldr	r3, [sp, #28]
    f22a:	4698      	mov	r8, r3
    f22c:	2300      	movs	r3, #0
    f22e:	4652      	mov	r2, sl
    f230:	2100      	movs	r1, #0
    f232:	6453      	str	r3, [r2, #68]	; 0x44
    f234:	2d17      	cmp	r5, #23
    f236:	d90a      	bls.n	f24e <_dtoa_r+0x20e>
    f238:	2201      	movs	r2, #1
    f23a:	3304      	adds	r3, #4
    f23c:	005b      	lsls	r3, r3, #1
    f23e:	0018      	movs	r0, r3
    f240:	3014      	adds	r0, #20
    f242:	0011      	movs	r1, r2
    f244:	3201      	adds	r2, #1
    f246:	4285      	cmp	r5, r0
    f248:	d2f8      	bcs.n	f23c <_dtoa_r+0x1fc>
    f24a:	4653      	mov	r3, sl
    f24c:	6459      	str	r1, [r3, #68]	; 0x44
    f24e:	4650      	mov	r0, sl
    f250:	f001 fed8 	bl	11004 <_Balloc>
    f254:	4653      	mov	r3, sl
    f256:	6418      	str	r0, [r3, #64]	; 0x40
    f258:	4643      	mov	r3, r8
    f25a:	900a      	str	r0, [sp, #40]	; 0x28
    f25c:	2b0e      	cmp	r3, #14
    f25e:	d900      	bls.n	f262 <_dtoa_r+0x222>
    f260:	e161      	b.n	f526 <_dtoa_r+0x4e6>
    f262:	2c00      	cmp	r4, #0
    f264:	d100      	bne.n	f268 <_dtoa_r+0x228>
    f266:	e15e      	b.n	f526 <_dtoa_r+0x4e6>
    f268:	9610      	str	r6, [sp, #64]	; 0x40
    f26a:	9711      	str	r7, [sp, #68]	; 0x44
    f26c:	9e03      	ldr	r6, [sp, #12]
    f26e:	2e00      	cmp	r6, #0
    f270:	dc01      	bgt.n	f276 <_dtoa_r+0x236>
    f272:	f000 fd25 	bl	fcc0 <_dtoa_r+0xc80>
    f276:	0032      	movs	r2, r6
    f278:	210f      	movs	r1, #15
    f27a:	4b65      	ldr	r3, [pc, #404]	; (f410 <_dtoa_r+0x3d0>)
    f27c:	400a      	ands	r2, r1
    f27e:	00d2      	lsls	r2, r2, #3
    f280:	189b      	adds	r3, r3, r2
    f282:	1136      	asrs	r6, r6, #4
    f284:	681c      	ldr	r4, [r3, #0]
    f286:	685d      	ldr	r5, [r3, #4]
    f288:	06f3      	lsls	r3, r6, #27
    f28a:	d401      	bmi.n	f290 <_dtoa_r+0x250>
    f28c:	f000 fcca 	bl	fc24 <_dtoa_r+0xbe4>
    f290:	4b60      	ldr	r3, [pc, #384]	; (f414 <_dtoa_r+0x3d4>)
    f292:	400e      	ands	r6, r1
    f294:	6a1a      	ldr	r2, [r3, #32]
    f296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f298:	9810      	ldr	r0, [sp, #64]	; 0x40
    f29a:	9911      	ldr	r1, [sp, #68]	; 0x44
    f29c:	f7fc fc34 	bl	bb08 <__aeabi_ddiv>
    f2a0:	2303      	movs	r3, #3
    f2a2:	4698      	mov	r8, r3
    f2a4:	9008      	str	r0, [sp, #32]
    f2a6:	9109      	str	r1, [sp, #36]	; 0x24
    f2a8:	2e00      	cmp	r6, #0
    f2aa:	d011      	beq.n	f2d0 <_dtoa_r+0x290>
    f2ac:	4f59      	ldr	r7, [pc, #356]	; (f414 <_dtoa_r+0x3d4>)
    f2ae:	2301      	movs	r3, #1
    f2b0:	4233      	tst	r3, r6
    f2b2:	d009      	beq.n	f2c8 <_dtoa_r+0x288>
    f2b4:	469c      	mov	ip, r3
    f2b6:	683a      	ldr	r2, [r7, #0]
    f2b8:	687b      	ldr	r3, [r7, #4]
    f2ba:	0020      	movs	r0, r4
    f2bc:	0029      	movs	r1, r5
    f2be:	44e0      	add	r8, ip
    f2c0:	f7fd f856 	bl	c370 <__aeabi_dmul>
    f2c4:	0004      	movs	r4, r0
    f2c6:	000d      	movs	r5, r1
    f2c8:	1076      	asrs	r6, r6, #1
    f2ca:	3708      	adds	r7, #8
    f2cc:	2e00      	cmp	r6, #0
    f2ce:	d1ee      	bne.n	f2ae <_dtoa_r+0x26e>
    f2d0:	0022      	movs	r2, r4
    f2d2:	9808      	ldr	r0, [sp, #32]
    f2d4:	9909      	ldr	r1, [sp, #36]	; 0x24
    f2d6:	002b      	movs	r3, r5
    f2d8:	f7fc fc16 	bl	bb08 <__aeabi_ddiv>
    f2dc:	0006      	movs	r6, r0
    f2de:	000f      	movs	r7, r1
    f2e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f2e2:	2b00      	cmp	r3, #0
    f2e4:	d009      	beq.n	f2fa <_dtoa_r+0x2ba>
    f2e6:	2200      	movs	r2, #0
    f2e8:	4b40      	ldr	r3, [pc, #256]	; (f3ec <_dtoa_r+0x3ac>)
    f2ea:	0030      	movs	r0, r6
    f2ec:	0039      	movs	r1, r7
    f2ee:	f7fb fa55 	bl	a79c <__aeabi_dcmplt>
    f2f2:	2800      	cmp	r0, #0
    f2f4:	d001      	beq.n	f2fa <_dtoa_r+0x2ba>
    f2f6:	f000 fdc2 	bl	fe7e <_dtoa_r+0xe3e>
    f2fa:	4640      	mov	r0, r8
    f2fc:	f7fd fe22 	bl	cf44 <__aeabi_i2d>
    f300:	0032      	movs	r2, r6
    f302:	003b      	movs	r3, r7
    f304:	f7fd f834 	bl	c370 <__aeabi_dmul>
    f308:	2200      	movs	r2, #0
    f30a:	4b43      	ldr	r3, [pc, #268]	; (f418 <_dtoa_r+0x3d8>)
    f30c:	f7fc f8ec 	bl	b4e8 <__aeabi_dadd>
    f310:	4a42      	ldr	r2, [pc, #264]	; (f41c <_dtoa_r+0x3dc>)
    f312:	000b      	movs	r3, r1
    f314:	4694      	mov	ip, r2
    f316:	4463      	add	r3, ip
    f318:	9008      	str	r0, [sp, #32]
    f31a:	9109      	str	r1, [sp, #36]	; 0x24
    f31c:	9309      	str	r3, [sp, #36]	; 0x24
    f31e:	9b07      	ldr	r3, [sp, #28]
    f320:	2b00      	cmp	r3, #0
    f322:	d101      	bne.n	f328 <_dtoa_r+0x2e8>
    f324:	f000 fc50 	bl	fbc8 <_dtoa_r+0xb88>
    f328:	9b03      	ldr	r3, [sp, #12]
    f32a:	9313      	str	r3, [sp, #76]	; 0x4c
    f32c:	9b07      	ldr	r3, [sp, #28]
    f32e:	9312      	str	r3, [sp, #72]	; 0x48
    f330:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f332:	2b00      	cmp	r3, #0
    f334:	d101      	bne.n	f33a <_dtoa_r+0x2fa>
    f336:	f000 fd1d 	bl	fd74 <_dtoa_r+0xd34>
    f33a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    f33c:	2000      	movs	r0, #0
    f33e:	1e5a      	subs	r2, r3, #1
    f340:	4b33      	ldr	r3, [pc, #204]	; (f410 <_dtoa_r+0x3d0>)
    f342:	00d2      	lsls	r2, r2, #3
    f344:	189b      	adds	r3, r3, r2
    f346:	681a      	ldr	r2, [r3, #0]
    f348:	685b      	ldr	r3, [r3, #4]
    f34a:	4935      	ldr	r1, [pc, #212]	; (f420 <_dtoa_r+0x3e0>)
    f34c:	f7fc fbdc 	bl	bb08 <__aeabi_ddiv>
    f350:	9a08      	ldr	r2, [sp, #32]
    f352:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f354:	f7fd fa8c 	bl	c870 <__aeabi_dsub>
    f358:	9008      	str	r0, [sp, #32]
    f35a:	9109      	str	r1, [sp, #36]	; 0x24
    f35c:	0039      	movs	r1, r7
    f35e:	0030      	movs	r0, r6
    f360:	f7fd fdbc 	bl	cedc <__aeabi_d2iz>
    f364:	0004      	movs	r4, r0
    f366:	f7fd fded 	bl	cf44 <__aeabi_i2d>
    f36a:	0002      	movs	r2, r0
    f36c:	000b      	movs	r3, r1
    f36e:	0030      	movs	r0, r6
    f370:	0039      	movs	r1, r7
    f372:	f7fd fa7d 	bl	c870 <__aeabi_dsub>
    f376:	0005      	movs	r5, r0
    f378:	000e      	movs	r6, r1
    f37a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f37c:	3430      	adds	r4, #48	; 0x30
    f37e:	1c51      	adds	r1, r2, #1
    f380:	b2e7      	uxtb	r7, r4
    f382:	9114      	str	r1, [sp, #80]	; 0x50
    f384:	7017      	strb	r7, [r2, #0]
    f386:	0033      	movs	r3, r6
    f388:	9808      	ldr	r0, [sp, #32]
    f38a:	9909      	ldr	r1, [sp, #36]	; 0x24
    f38c:	002a      	movs	r2, r5
    f38e:	f7fb fa19 	bl	a7c4 <__aeabi_dcmpgt>
    f392:	2800      	cmp	r0, #0
    f394:	d001      	beq.n	f39a <_dtoa_r+0x35a>
    f396:	f000 fdfe 	bl	ff96 <_dtoa_r+0xf56>
    f39a:	002a      	movs	r2, r5
    f39c:	0033      	movs	r3, r6
    f39e:	2000      	movs	r0, #0
    f3a0:	4912      	ldr	r1, [pc, #72]	; (f3ec <_dtoa_r+0x3ac>)
    f3a2:	f7fd fa65 	bl	c870 <__aeabi_dsub>
    f3a6:	0002      	movs	r2, r0
    f3a8:	000b      	movs	r3, r1
    f3aa:	9808      	ldr	r0, [sp, #32]
    f3ac:	9909      	ldr	r1, [sp, #36]	; 0x24
    f3ae:	f7fb fa09 	bl	a7c4 <__aeabi_dcmpgt>
    f3b2:	2800      	cmp	r0, #0
    f3b4:	d001      	beq.n	f3ba <_dtoa_r+0x37a>
    f3b6:	f000 fde7 	bl	ff88 <_dtoa_r+0xf48>
    f3ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
    f3bc:	2b01      	cmp	r3, #1
    f3be:	d101      	bne.n	f3c4 <_dtoa_r+0x384>
    f3c0:	f000 fc78 	bl	fcb4 <_dtoa_r+0xc74>
    f3c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f3c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    f3c8:	4694      	mov	ip, r2
    f3ca:	4463      	add	r3, ip
    f3cc:	4698      	mov	r8, r3
    f3ce:	464b      	mov	r3, r9
    f3d0:	9312      	str	r3, [sp, #72]	; 0x48
    f3d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
    f3d4:	4699      	mov	r9, r3
    f3d6:	e038      	b.n	f44a <_dtoa_r+0x40a>
    f3d8:	7ff00000 	.word	0x7ff00000
    f3dc:	00012615 	.word	0x00012615
    f3e0:	0000270f 	.word	0x0000270f
    f3e4:	00012638 	.word	0x00012638
    f3e8:	00012644 	.word	0x00012644
    f3ec:	3ff00000 	.word	0x3ff00000
    f3f0:	fffffc01 	.word	0xfffffc01
    f3f4:	3ff80000 	.word	0x3ff80000
    f3f8:	636f4361 	.word	0x636f4361
    f3fc:	3fd287a7 	.word	0x3fd287a7
    f400:	8b60c8b3 	.word	0x8b60c8b3
    f404:	3fc68a28 	.word	0x3fc68a28
    f408:	509f79fb 	.word	0x509f79fb
    f40c:	3fd34413 	.word	0x3fd34413
    f410:	00012670 	.word	0x00012670
    f414:	00012648 	.word	0x00012648
    f418:	401c0000 	.word	0x401c0000
    f41c:	fcc00000 	.word	0xfcc00000
    f420:	3fe00000 	.word	0x3fe00000
    f424:	002a      	movs	r2, r5
    f426:	0033      	movs	r3, r6
    f428:	2000      	movs	r0, #0
    f42a:	49b9      	ldr	r1, [pc, #740]	; (f710 <_dtoa_r+0x6d0>)
    f42c:	f7fd fa20 	bl	c870 <__aeabi_dsub>
    f430:	9a08      	ldr	r2, [sp, #32]
    f432:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f434:	f7fb f9b2 	bl	a79c <__aeabi_dcmplt>
    f438:	2800      	cmp	r0, #0
    f43a:	d001      	beq.n	f440 <_dtoa_r+0x400>
    f43c:	f000 fd74 	bl	ff28 <_dtoa_r+0xee8>
    f440:	46a1      	mov	r9, r4
    f442:	4544      	cmp	r4, r8
    f444:	d101      	bne.n	f44a <_dtoa_r+0x40a>
    f446:	f000 fc33 	bl	fcb0 <_dtoa_r+0xc70>
    f44a:	9808      	ldr	r0, [sp, #32]
    f44c:	9909      	ldr	r1, [sp, #36]	; 0x24
    f44e:	2200      	movs	r2, #0
    f450:	4bb0      	ldr	r3, [pc, #704]	; (f714 <_dtoa_r+0x6d4>)
    f452:	f7fc ff8d 	bl	c370 <__aeabi_dmul>
    f456:	2200      	movs	r2, #0
    f458:	4bae      	ldr	r3, [pc, #696]	; (f714 <_dtoa_r+0x6d4>)
    f45a:	9008      	str	r0, [sp, #32]
    f45c:	9109      	str	r1, [sp, #36]	; 0x24
    f45e:	0028      	movs	r0, r5
    f460:	0031      	movs	r1, r6
    f462:	f7fc ff85 	bl	c370 <__aeabi_dmul>
    f466:	000d      	movs	r5, r1
    f468:	0004      	movs	r4, r0
    f46a:	f7fd fd37 	bl	cedc <__aeabi_d2iz>
    f46e:	0007      	movs	r7, r0
    f470:	f7fd fd68 	bl	cf44 <__aeabi_i2d>
    f474:	0002      	movs	r2, r0
    f476:	000b      	movs	r3, r1
    f478:	0020      	movs	r0, r4
    f47a:	0029      	movs	r1, r5
    f47c:	f7fd f9f8 	bl	c870 <__aeabi_dsub>
    f480:	464b      	mov	r3, r9
    f482:	3730      	adds	r7, #48	; 0x30
    f484:	b2ff      	uxtb	r7, r7
    f486:	1c5c      	adds	r4, r3, #1
    f488:	701f      	strb	r7, [r3, #0]
    f48a:	9a08      	ldr	r2, [sp, #32]
    f48c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f48e:	0005      	movs	r5, r0
    f490:	000e      	movs	r6, r1
    f492:	f7fb f983 	bl	a79c <__aeabi_dcmplt>
    f496:	2800      	cmp	r0, #0
    f498:	d0c4      	beq.n	f424 <_dtoa_r+0x3e4>
    f49a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f49c:	9303      	str	r3, [sp, #12]
    f49e:	4659      	mov	r1, fp
    f4a0:	4650      	mov	r0, sl
    f4a2:	f001 fdd7 	bl	11054 <_Bfree>
    f4a6:	2300      	movs	r3, #0
    f4a8:	7023      	strb	r3, [r4, #0]
    f4aa:	9b03      	ldr	r3, [sp, #12]
    f4ac:	9a24      	ldr	r2, [sp, #144]	; 0x90
    f4ae:	3301      	adds	r3, #1
    f4b0:	6013      	str	r3, [r2, #0]
    f4b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
    f4b4:	2b00      	cmp	r3, #0
    f4b6:	d100      	bne.n	f4ba <_dtoa_r+0x47a>
    f4b8:	e3a8      	b.n	fc0c <_dtoa_r+0xbcc>
    f4ba:	601c      	str	r4, [r3, #0]
    f4bc:	980a      	ldr	r0, [sp, #40]	; 0x28
    f4be:	e5f4      	b.n	f0aa <_dtoa_r+0x6a>
    f4c0:	9b16      	ldr	r3, [sp, #88]	; 0x58
    f4c2:	4699      	mov	r9, r3
    f4c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    f4c6:	444b      	add	r3, r9
    f4c8:	001c      	movs	r4, r3
    f4ca:	4b93      	ldr	r3, [pc, #588]	; (f718 <_dtoa_r+0x6d8>)
    f4cc:	18e3      	adds	r3, r4, r3
    f4ce:	2b20      	cmp	r3, #32
    f4d0:	dc00      	bgt.n	f4d4 <_dtoa_r+0x494>
    f4d2:	e17e      	b.n	f7d2 <_dtoa_r+0x792>
    f4d4:	0031      	movs	r1, r6
    f4d6:	4a91      	ldr	r2, [pc, #580]	; (f71c <_dtoa_r+0x6dc>)
    f4d8:	4640      	mov	r0, r8
    f4da:	18a2      	adds	r2, r4, r2
    f4dc:	40d1      	lsrs	r1, r2
    f4de:	000a      	movs	r2, r1
    f4e0:	2140      	movs	r1, #64	; 0x40
    f4e2:	1acb      	subs	r3, r1, r3
    f4e4:	4098      	lsls	r0, r3
    f4e6:	4310      	orrs	r0, r2
    f4e8:	f7fd fd6e 	bl	cfc8 <__aeabi_ui2d>
    f4ec:	1e63      	subs	r3, r4, #1
    f4ee:	4698      	mov	r8, r3
    f4f0:	2301      	movs	r3, #1
    f4f2:	4d8b      	ldr	r5, [pc, #556]	; (f720 <_dtoa_r+0x6e0>)
    f4f4:	930f      	str	r3, [sp, #60]	; 0x3c
    f4f6:	1949      	adds	r1, r1, r5
    f4f8:	e618      	b.n	f12c <_dtoa_r+0xec>
    f4fa:	488a      	ldr	r0, [pc, #552]	; (f724 <_dtoa_r+0x6e4>)
    f4fc:	e5d5      	b.n	f0aa <_dtoa_r+0x6a>
    f4fe:	2300      	movs	r3, #0
    f500:	4652      	mov	r2, sl
    f502:	2100      	movs	r1, #0
    f504:	6453      	str	r3, [r2, #68]	; 0x44
    f506:	4650      	mov	r0, sl
    f508:	f001 fd7c 	bl	11004 <_Balloc>
    f50c:	4653      	mov	r3, sl
    f50e:	6418      	str	r0, [r3, #64]	; 0x40
    f510:	2301      	movs	r3, #1
    f512:	425b      	negs	r3, r3
    f514:	9307      	str	r3, [sp, #28]
    f516:	930e      	str	r3, [sp, #56]	; 0x38
    f518:	3302      	adds	r3, #2
    f51a:	2200      	movs	r2, #0
    f51c:	930b      	str	r3, [sp, #44]	; 0x2c
    f51e:	2300      	movs	r3, #0
    f520:	900a      	str	r0, [sp, #40]	; 0x28
    f522:	9223      	str	r2, [sp, #140]	; 0x8c
    f524:	9322      	str	r3, [sp, #136]	; 0x88
    f526:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    f528:	2b00      	cmp	r3, #0
    f52a:	da00      	bge.n	f52e <_dtoa_r+0x4ee>
    f52c:	e0ab      	b.n	f686 <_dtoa_r+0x646>
    f52e:	9a03      	ldr	r2, [sp, #12]
    f530:	2a0e      	cmp	r2, #14
    f532:	dd00      	ble.n	f536 <_dtoa_r+0x4f6>
    f534:	e0a7      	b.n	f686 <_dtoa_r+0x646>
    f536:	4b7c      	ldr	r3, [pc, #496]	; (f728 <_dtoa_r+0x6e8>)
    f538:	00d2      	lsls	r2, r2, #3
    f53a:	189b      	adds	r3, r3, r2
    f53c:	685c      	ldr	r4, [r3, #4]
    f53e:	681b      	ldr	r3, [r3, #0]
    f540:	9304      	str	r3, [sp, #16]
    f542:	9405      	str	r4, [sp, #20]
    f544:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    f546:	2b00      	cmp	r3, #0
    f548:	da00      	bge.n	f54c <_dtoa_r+0x50c>
    f54a:	e2a7      	b.n	fa9c <_dtoa_r+0xa5c>
    f54c:	9c04      	ldr	r4, [sp, #16]
    f54e:	9d05      	ldr	r5, [sp, #20]
    f550:	0030      	movs	r0, r6
    f552:	0022      	movs	r2, r4
    f554:	002b      	movs	r3, r5
    f556:	0039      	movs	r1, r7
    f558:	f7fc fad6 	bl	bb08 <__aeabi_ddiv>
    f55c:	f7fd fcbe 	bl	cedc <__aeabi_d2iz>
    f560:	4680      	mov	r8, r0
    f562:	f7fd fcef 	bl	cf44 <__aeabi_i2d>
    f566:	0022      	movs	r2, r4
    f568:	002b      	movs	r3, r5
    f56a:	f7fc ff01 	bl	c370 <__aeabi_dmul>
    f56e:	0002      	movs	r2, r0
    f570:	000b      	movs	r3, r1
    f572:	0030      	movs	r0, r6
    f574:	0039      	movs	r1, r7
    f576:	f7fd f97b 	bl	c870 <__aeabi_dsub>
    f57a:	4643      	mov	r3, r8
    f57c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f57e:	3330      	adds	r3, #48	; 0x30
    f580:	7013      	strb	r3, [r2, #0]
    f582:	9b07      	ldr	r3, [sp, #28]
    f584:	0006      	movs	r6, r0
    f586:	000f      	movs	r7, r1
    f588:	1c54      	adds	r4, r2, #1
    f58a:	2b01      	cmp	r3, #1
    f58c:	d04e      	beq.n	f62c <_dtoa_r+0x5ec>
    f58e:	2200      	movs	r2, #0
    f590:	4b60      	ldr	r3, [pc, #384]	; (f714 <_dtoa_r+0x6d4>)
    f592:	f7fc feed 	bl	c370 <__aeabi_dmul>
    f596:	2200      	movs	r2, #0
    f598:	2300      	movs	r3, #0
    f59a:	0006      	movs	r6, r0
    f59c:	000f      	movs	r7, r1
    f59e:	f7fb f8f7 	bl	a790 <__aeabi_dcmpeq>
    f5a2:	2800      	cmp	r0, #0
    f5a4:	d000      	beq.n	f5a8 <_dtoa_r+0x568>
    f5a6:	e77a      	b.n	f49e <_dtoa_r+0x45e>
    f5a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f5aa:	9a07      	ldr	r2, [sp, #28]
    f5ac:	1c9d      	adds	r5, r3, #2
    f5ae:	469c      	mov	ip, r3
    f5b0:	465b      	mov	r3, fp
    f5b2:	9306      	str	r3, [sp, #24]
    f5b4:	4653      	mov	r3, sl
    f5b6:	4462      	add	r2, ip
    f5b8:	46aa      	mov	sl, r5
    f5ba:	9c04      	ldr	r4, [sp, #16]
    f5bc:	9d05      	ldr	r5, [sp, #20]
    f5be:	4691      	mov	r9, r2
    f5c0:	9307      	str	r3, [sp, #28]
    f5c2:	e00f      	b.n	f5e4 <_dtoa_r+0x5a4>
    f5c4:	2200      	movs	r2, #0
    f5c6:	4b53      	ldr	r3, [pc, #332]	; (f714 <_dtoa_r+0x6d4>)
    f5c8:	f7fc fed2 	bl	c370 <__aeabi_dmul>
    f5cc:	2301      	movs	r3, #1
    f5ce:	469c      	mov	ip, r3
    f5d0:	2200      	movs	r2, #0
    f5d2:	2300      	movs	r3, #0
    f5d4:	0006      	movs	r6, r0
    f5d6:	000f      	movs	r7, r1
    f5d8:	44e2      	add	sl, ip
    f5da:	f7fb f8d9 	bl	a790 <__aeabi_dcmpeq>
    f5de:	2800      	cmp	r0, #0
    f5e0:	d000      	beq.n	f5e4 <_dtoa_r+0x5a4>
    f5e2:	e2d9      	b.n	fb98 <_dtoa_r+0xb58>
    f5e4:	0022      	movs	r2, r4
    f5e6:	002b      	movs	r3, r5
    f5e8:	0030      	movs	r0, r6
    f5ea:	0039      	movs	r1, r7
    f5ec:	f7fc fa8c 	bl	bb08 <__aeabi_ddiv>
    f5f0:	f7fd fc74 	bl	cedc <__aeabi_d2iz>
    f5f4:	4680      	mov	r8, r0
    f5f6:	f7fd fca5 	bl	cf44 <__aeabi_i2d>
    f5fa:	0022      	movs	r2, r4
    f5fc:	002b      	movs	r3, r5
    f5fe:	f7fc feb7 	bl	c370 <__aeabi_dmul>
    f602:	0002      	movs	r2, r0
    f604:	000b      	movs	r3, r1
    f606:	0030      	movs	r0, r6
    f608:	0039      	movs	r1, r7
    f60a:	f7fd f931 	bl	c870 <__aeabi_dsub>
    f60e:	4653      	mov	r3, sl
    f610:	4642      	mov	r2, r8
    f612:	3b01      	subs	r3, #1
    f614:	3230      	adds	r2, #48	; 0x30
    f616:	0006      	movs	r6, r0
    f618:	000f      	movs	r7, r1
    f61a:	46d3      	mov	fp, sl
    f61c:	701a      	strb	r2, [r3, #0]
    f61e:	45d1      	cmp	r9, sl
    f620:	d1d0      	bne.n	f5c4 <_dtoa_r+0x584>
    f622:	9b06      	ldr	r3, [sp, #24]
    f624:	4654      	mov	r4, sl
    f626:	469b      	mov	fp, r3
    f628:	9b07      	ldr	r3, [sp, #28]
    f62a:	469a      	mov	sl, r3
    f62c:	0032      	movs	r2, r6
    f62e:	003b      	movs	r3, r7
    f630:	0030      	movs	r0, r6
    f632:	0039      	movs	r1, r7
    f634:	f7fb ff58 	bl	b4e8 <__aeabi_dadd>
    f638:	0006      	movs	r6, r0
    f63a:	000f      	movs	r7, r1
    f63c:	0002      	movs	r2, r0
    f63e:	000b      	movs	r3, r1
    f640:	9804      	ldr	r0, [sp, #16]
    f642:	9905      	ldr	r1, [sp, #20]
    f644:	f7fb f8aa 	bl	a79c <__aeabi_dcmplt>
    f648:	2800      	cmp	r0, #0
    f64a:	d10c      	bne.n	f666 <_dtoa_r+0x626>
    f64c:	9804      	ldr	r0, [sp, #16]
    f64e:	9905      	ldr	r1, [sp, #20]
    f650:	0032      	movs	r2, r6
    f652:	003b      	movs	r3, r7
    f654:	f7fb f89c 	bl	a790 <__aeabi_dcmpeq>
    f658:	2800      	cmp	r0, #0
    f65a:	d100      	bne.n	f65e <_dtoa_r+0x61e>
    f65c:	e71f      	b.n	f49e <_dtoa_r+0x45e>
    f65e:	4643      	mov	r3, r8
    f660:	07db      	lsls	r3, r3, #31
    f662:	d400      	bmi.n	f666 <_dtoa_r+0x626>
    f664:	e71b      	b.n	f49e <_dtoa_r+0x45e>
    f666:	1e65      	subs	r5, r4, #1
    f668:	782f      	ldrb	r7, [r5, #0]
    f66a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f66c:	e006      	b.n	f67c <_dtoa_r+0x63c>
    f66e:	429d      	cmp	r5, r3
    f670:	d100      	bne.n	f674 <_dtoa_r+0x634>
    f672:	e351      	b.n	fd18 <_dtoa_r+0xcd8>
    f674:	3c02      	subs	r4, #2
    f676:	7827      	ldrb	r7, [r4, #0]
    f678:	002c      	movs	r4, r5
    f67a:	3d01      	subs	r5, #1
    f67c:	2f39      	cmp	r7, #57	; 0x39
    f67e:	d0f6      	beq.n	f66e <_dtoa_r+0x62e>
    f680:	3701      	adds	r7, #1
    f682:	702f      	strb	r7, [r5, #0]
    f684:	e70b      	b.n	f49e <_dtoa_r+0x45e>
    f686:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f688:	2a00      	cmp	r2, #0
    f68a:	d04f      	beq.n	f72c <_dtoa_r+0x6ec>
    f68c:	9a22      	ldr	r2, [sp, #136]	; 0x88
    f68e:	2a01      	cmp	r2, #1
    f690:	dc00      	bgt.n	f694 <_dtoa_r+0x654>
    f692:	e22c      	b.n	faee <_dtoa_r+0xaae>
    f694:	9b07      	ldr	r3, [sp, #28]
    f696:	1e5c      	subs	r4, r3, #1
    f698:	464b      	mov	r3, r9
    f69a:	45a1      	cmp	r9, r4
    f69c:	da00      	bge.n	f6a0 <_dtoa_r+0x660>
    f69e:	e2b8      	b.n	fc12 <_dtoa_r+0xbd2>
    f6a0:	1b1c      	subs	r4, r3, r4
    f6a2:	9b07      	ldr	r3, [sp, #28]
    f6a4:	2b00      	cmp	r3, #0
    f6a6:	da00      	bge.n	f6aa <_dtoa_r+0x66a>
    f6a8:	e3d4      	b.n	fe54 <_dtoa_r+0xe14>
    f6aa:	9b06      	ldr	r3, [sp, #24]
    f6ac:	9308      	str	r3, [sp, #32]
    f6ae:	9b07      	ldr	r3, [sp, #28]
    f6b0:	9a06      	ldr	r2, [sp, #24]
    f6b2:	2101      	movs	r1, #1
    f6b4:	4694      	mov	ip, r2
    f6b6:	449c      	add	ip, r3
    f6b8:	4662      	mov	r2, ip
    f6ba:	9206      	str	r2, [sp, #24]
    f6bc:	9a04      	ldr	r2, [sp, #16]
    f6be:	4650      	mov	r0, sl
    f6c0:	4694      	mov	ip, r2
    f6c2:	449c      	add	ip, r3
    f6c4:	4663      	mov	r3, ip
    f6c6:	9304      	str	r3, [sp, #16]
    f6c8:	f001 fd5c 	bl	11184 <__i2b>
    f6cc:	4680      	mov	r8, r0
    f6ce:	e032      	b.n	f736 <_dtoa_r+0x6f6>
    f6d0:	9a06      	ldr	r2, [sp, #24]
    f6d2:	9b03      	ldr	r3, [sp, #12]
    f6d4:	1ad2      	subs	r2, r2, r3
    f6d6:	425b      	negs	r3, r3
    f6d8:	4699      	mov	r9, r3
    f6da:	2300      	movs	r3, #0
    f6dc:	9206      	str	r2, [sp, #24]
    f6de:	930d      	str	r3, [sp, #52]	; 0x34
    f6e0:	e579      	b.n	f1d6 <_dtoa_r+0x196>
    f6e2:	9803      	ldr	r0, [sp, #12]
    f6e4:	f7fd fc2e 	bl	cf44 <__aeabi_i2d>
    f6e8:	000b      	movs	r3, r1
    f6ea:	0002      	movs	r2, r0
    f6ec:	0029      	movs	r1, r5
    f6ee:	0020      	movs	r0, r4
    f6f0:	f7fb f84e 	bl	a790 <__aeabi_dcmpeq>
    f6f4:	0002      	movs	r2, r0
    f6f6:	4250      	negs	r0, r2
    f6f8:	4150      	adcs	r0, r2
    f6fa:	9b03      	ldr	r3, [sp, #12]
    f6fc:	1a1b      	subs	r3, r3, r0
    f6fe:	9303      	str	r3, [sp, #12]
    f700:	e53d      	b.n	f17e <_dtoa_r+0x13e>
    f702:	2301      	movs	r3, #1
    f704:	1a9b      	subs	r3, r3, r2
    f706:	9306      	str	r3, [sp, #24]
    f708:	2300      	movs	r3, #0
    f70a:	9304      	str	r3, [sp, #16]
    f70c:	e557      	b.n	f1be <_dtoa_r+0x17e>
    f70e:	46c0      	nop			; (mov r8, r8)
    f710:	3ff00000 	.word	0x3ff00000
    f714:	40240000 	.word	0x40240000
    f718:	00000432 	.word	0x00000432
    f71c:	00000412 	.word	0x00000412
    f720:	fe100000 	.word	0xfe100000
    f724:	00012614 	.word	0x00012614
    f728:	00012670 	.word	0x00012670
    f72c:	9b06      	ldr	r3, [sp, #24]
    f72e:	464c      	mov	r4, r9
    f730:	9308      	str	r3, [sp, #32]
    f732:	2300      	movs	r3, #0
    f734:	4698      	mov	r8, r3
    f736:	9908      	ldr	r1, [sp, #32]
    f738:	1e0b      	subs	r3, r1, #0
    f73a:	dd0e      	ble.n	f75a <_dtoa_r+0x71a>
    f73c:	9a04      	ldr	r2, [sp, #16]
    f73e:	2a00      	cmp	r2, #0
    f740:	dd0b      	ble.n	f75a <_dtoa_r+0x71a>
    f742:	4293      	cmp	r3, r2
    f744:	dd00      	ble.n	f748 <_dtoa_r+0x708>
    f746:	e187      	b.n	fa58 <_dtoa_r+0xa18>
    f748:	9a06      	ldr	r2, [sp, #24]
    f74a:	1ad2      	subs	r2, r2, r3
    f74c:	9206      	str	r2, [sp, #24]
    f74e:	9a08      	ldr	r2, [sp, #32]
    f750:	1ad2      	subs	r2, r2, r3
    f752:	9208      	str	r2, [sp, #32]
    f754:	9a04      	ldr	r2, [sp, #16]
    f756:	1ad3      	subs	r3, r2, r3
    f758:	9304      	str	r3, [sp, #16]
    f75a:	464b      	mov	r3, r9
    f75c:	2b00      	cmp	r3, #0
    f75e:	d01a      	beq.n	f796 <_dtoa_r+0x756>
    f760:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f762:	2b00      	cmp	r3, #0
    f764:	d100      	bne.n	f768 <_dtoa_r+0x728>
    f766:	e1bb      	b.n	fae0 <_dtoa_r+0xaa0>
    f768:	2c00      	cmp	r4, #0
    f76a:	dd10      	ble.n	f78e <_dtoa_r+0x74e>
    f76c:	4641      	mov	r1, r8
    f76e:	0022      	movs	r2, r4
    f770:	4650      	mov	r0, sl
    f772:	f001 fdbb 	bl	112ec <__pow5mult>
    f776:	465a      	mov	r2, fp
    f778:	0001      	movs	r1, r0
    f77a:	4680      	mov	r8, r0
    f77c:	4650      	mov	r0, sl
    f77e:	f001 fd0b 	bl	11198 <__multiply>
    f782:	0005      	movs	r5, r0
    f784:	4659      	mov	r1, fp
    f786:	4650      	mov	r0, sl
    f788:	f001 fc64 	bl	11054 <_Bfree>
    f78c:	46ab      	mov	fp, r5
    f78e:	464b      	mov	r3, r9
    f790:	1b1a      	subs	r2, r3, r4
    f792:	d000      	beq.n	f796 <_dtoa_r+0x756>
    f794:	e1a5      	b.n	fae2 <_dtoa_r+0xaa2>
    f796:	2101      	movs	r1, #1
    f798:	4650      	mov	r0, sl
    f79a:	f001 fcf3 	bl	11184 <__i2b>
    f79e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f7a0:	4681      	mov	r9, r0
    f7a2:	2b00      	cmp	r3, #0
    f7a4:	dd1d      	ble.n	f7e2 <_dtoa_r+0x7a2>
    f7a6:	001a      	movs	r2, r3
    f7a8:	0001      	movs	r1, r0
    f7aa:	4650      	mov	r0, sl
    f7ac:	f001 fd9e 	bl	112ec <__pow5mult>
    f7b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
    f7b2:	4681      	mov	r9, r0
    f7b4:	2b01      	cmp	r3, #1
    f7b6:	dc00      	bgt.n	f7ba <_dtoa_r+0x77a>
    f7b8:	e150      	b.n	fa5c <_dtoa_r+0xa1c>
    f7ba:	2400      	movs	r4, #0
    f7bc:	464b      	mov	r3, r9
    f7be:	691b      	ldr	r3, [r3, #16]
    f7c0:	3303      	adds	r3, #3
    f7c2:	009b      	lsls	r3, r3, #2
    f7c4:	444b      	add	r3, r9
    f7c6:	6858      	ldr	r0, [r3, #4]
    f7c8:	f001 fc94 	bl	110f4 <__hi0bits>
    f7cc:	2320      	movs	r3, #32
    f7ce:	1a1b      	subs	r3, r3, r0
    f7d0:	e010      	b.n	f7f4 <_dtoa_r+0x7b4>
    f7d2:	2220      	movs	r2, #32
    f7d4:	0030      	movs	r0, r6
    f7d6:	1ad3      	subs	r3, r2, r3
    f7d8:	4098      	lsls	r0, r3
    f7da:	e685      	b.n	f4e8 <_dtoa_r+0x4a8>
    f7dc:	2300      	movs	r3, #0
    f7de:	930c      	str	r3, [sp, #48]	; 0x30
    f7e0:	e4e3      	b.n	f1aa <_dtoa_r+0x16a>
    f7e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
    f7e4:	2400      	movs	r4, #0
    f7e6:	2b01      	cmp	r3, #1
    f7e8:	dc00      	bgt.n	f7ec <_dtoa_r+0x7ac>
    f7ea:	e18b      	b.n	fb04 <_dtoa_r+0xac4>
    f7ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    f7ee:	2301      	movs	r3, #1
    f7f0:	2a00      	cmp	r2, #0
    f7f2:	d1e3      	bne.n	f7bc <_dtoa_r+0x77c>
    f7f4:	9904      	ldr	r1, [sp, #16]
    f7f6:	201f      	movs	r0, #31
    f7f8:	468c      	mov	ip, r1
    f7fa:	4463      	add	r3, ip
    f7fc:	4018      	ands	r0, r3
    f7fe:	d100      	bne.n	f802 <_dtoa_r+0x7c2>
    f800:	e0ae      	b.n	f960 <_dtoa_r+0x920>
    f802:	2320      	movs	r3, #32
    f804:	1a1b      	subs	r3, r3, r0
    f806:	2b04      	cmp	r3, #4
    f808:	dc00      	bgt.n	f80c <_dtoa_r+0x7cc>
    f80a:	e3cc      	b.n	ffa6 <_dtoa_r+0xf66>
    f80c:	231c      	movs	r3, #28
    f80e:	1a18      	subs	r0, r3, r0
    f810:	9b06      	ldr	r3, [sp, #24]
    f812:	469c      	mov	ip, r3
    f814:	4484      	add	ip, r0
    f816:	4663      	mov	r3, ip
    f818:	9306      	str	r3, [sp, #24]
    f81a:	9b08      	ldr	r3, [sp, #32]
    f81c:	469c      	mov	ip, r3
    f81e:	4484      	add	ip, r0
    f820:	4663      	mov	r3, ip
    f822:	468c      	mov	ip, r1
    f824:	4484      	add	ip, r0
    f826:	9308      	str	r3, [sp, #32]
    f828:	4663      	mov	r3, ip
    f82a:	9304      	str	r3, [sp, #16]
    f82c:	9b06      	ldr	r3, [sp, #24]
    f82e:	2b00      	cmp	r3, #0
    f830:	dd05      	ble.n	f83e <_dtoa_r+0x7fe>
    f832:	4659      	mov	r1, fp
    f834:	001a      	movs	r2, r3
    f836:	4650      	mov	r0, sl
    f838:	f001 fdb8 	bl	113ac <__lshift>
    f83c:	4683      	mov	fp, r0
    f83e:	9b04      	ldr	r3, [sp, #16]
    f840:	2b00      	cmp	r3, #0
    f842:	dd05      	ble.n	f850 <_dtoa_r+0x810>
    f844:	4649      	mov	r1, r9
    f846:	001a      	movs	r2, r3
    f848:	4650      	mov	r0, sl
    f84a:	f001 fdaf 	bl	113ac <__lshift>
    f84e:	4681      	mov	r9, r0
    f850:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f852:	2b00      	cmp	r3, #0
    f854:	d000      	beq.n	f858 <_dtoa_r+0x818>
    f856:	e094      	b.n	f982 <_dtoa_r+0x942>
    f858:	9b07      	ldr	r3, [sp, #28]
    f85a:	2b00      	cmp	r3, #0
    f85c:	dc00      	bgt.n	f860 <_dtoa_r+0x820>
    f85e:	e175      	b.n	fb4c <_dtoa_r+0xb0c>
    f860:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f862:	2b00      	cmp	r3, #0
    f864:	d100      	bne.n	f868 <_dtoa_r+0x828>
    f866:	e0a6      	b.n	f9b6 <_dtoa_r+0x976>
    f868:	9b08      	ldr	r3, [sp, #32]
    f86a:	2b00      	cmp	r3, #0
    f86c:	dd05      	ble.n	f87a <_dtoa_r+0x83a>
    f86e:	4641      	mov	r1, r8
    f870:	001a      	movs	r2, r3
    f872:	4650      	mov	r0, sl
    f874:	f001 fd9a 	bl	113ac <__lshift>
    f878:	4680      	mov	r8, r0
    f87a:	4643      	mov	r3, r8
    f87c:	930c      	str	r3, [sp, #48]	; 0x30
    f87e:	2c00      	cmp	r4, #0
    f880:	d000      	beq.n	f884 <_dtoa_r+0x844>
    f882:	e250      	b.n	fd26 <_dtoa_r+0xce6>
    f884:	9c07      	ldr	r4, [sp, #28]
    f886:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f888:	3c01      	subs	r4, #1
    f88a:	0023      	movs	r3, r4
    f88c:	4694      	mov	ip, r2
    f88e:	4463      	add	r3, ip
    f890:	9308      	str	r3, [sp, #32]
    f892:	2301      	movs	r3, #1
    f894:	4033      	ands	r3, r6
    f896:	9307      	str	r3, [sp, #28]
    f898:	464b      	mov	r3, r9
    f89a:	9306      	str	r3, [sp, #24]
    f89c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f89e:	4657      	mov	r7, sl
    f8a0:	4645      	mov	r5, r8
    f8a2:	465e      	mov	r6, fp
    f8a4:	4692      	mov	sl, r2
    f8a6:	4698      	mov	r8, r3
    f8a8:	9b06      	ldr	r3, [sp, #24]
    f8aa:	0030      	movs	r0, r6
    f8ac:	0019      	movs	r1, r3
    f8ae:	4699      	mov	r9, r3
    f8b0:	f7ff fb1c 	bl	eeec <quorem>
    f8b4:	0003      	movs	r3, r0
    f8b6:	900b      	str	r0, [sp, #44]	; 0x2c
    f8b8:	3330      	adds	r3, #48	; 0x30
    f8ba:	0029      	movs	r1, r5
    f8bc:	0030      	movs	r0, r6
    f8be:	9304      	str	r3, [sp, #16]
    f8c0:	f001 fdd4 	bl	1146c <__mcmp>
    f8c4:	4649      	mov	r1, r9
    f8c6:	0004      	movs	r4, r0
    f8c8:	4642      	mov	r2, r8
    f8ca:	0038      	movs	r0, r7
    f8cc:	f001 fde8 	bl	114a0 <__mdiff>
    f8d0:	68c3      	ldr	r3, [r0, #12]
    f8d2:	4681      	mov	r9, r0
    f8d4:	2b00      	cmp	r3, #0
    f8d6:	d000      	beq.n	f8da <_dtoa_r+0x89a>
    f8d8:	e11e      	b.n	fb18 <_dtoa_r+0xad8>
    f8da:	0001      	movs	r1, r0
    f8dc:	0030      	movs	r0, r6
    f8de:	f001 fdc5 	bl	1146c <__mcmp>
    f8e2:	4683      	mov	fp, r0
    f8e4:	4649      	mov	r1, r9
    f8e6:	0038      	movs	r0, r7
    f8e8:	f001 fbb4 	bl	11054 <_Bfree>
    f8ec:	465b      	mov	r3, fp
    f8ee:	9a22      	ldr	r2, [sp, #136]	; 0x88
    f8f0:	4313      	orrs	r3, r2
    f8f2:	d103      	bne.n	f8fc <_dtoa_r+0x8bc>
    f8f4:	9b07      	ldr	r3, [sp, #28]
    f8f6:	2b00      	cmp	r3, #0
    f8f8:	d100      	bne.n	f8fc <_dtoa_r+0x8bc>
    f8fa:	e306      	b.n	ff0a <_dtoa_r+0xeca>
    f8fc:	2c00      	cmp	r4, #0
    f8fe:	da00      	bge.n	f902 <_dtoa_r+0x8c2>
    f900:	e1a8      	b.n	fc54 <_dtoa_r+0xc14>
    f902:	9b22      	ldr	r3, [sp, #136]	; 0x88
    f904:	431c      	orrs	r4, r3
    f906:	d103      	bne.n	f910 <_dtoa_r+0x8d0>
    f908:	9b07      	ldr	r3, [sp, #28]
    f90a:	2b00      	cmp	r3, #0
    f90c:	d100      	bne.n	f910 <_dtoa_r+0x8d0>
    f90e:	e1a1      	b.n	fc54 <_dtoa_r+0xc14>
    f910:	465b      	mov	r3, fp
    f912:	2b00      	cmp	r3, #0
    f914:	dd00      	ble.n	f918 <_dtoa_r+0x8d8>
    f916:	e282      	b.n	fe1e <_dtoa_r+0xdde>
    f918:	4669      	mov	r1, sp
    f91a:	4652      	mov	r2, sl
    f91c:	4653      	mov	r3, sl
    f91e:	7c09      	ldrb	r1, [r1, #16]
    f920:	1c5c      	adds	r4, r3, #1
    f922:	7011      	strb	r1, [r2, #0]
    f924:	9a08      	ldr	r2, [sp, #32]
    f926:	4552      	cmp	r2, sl
    f928:	d100      	bne.n	f92c <_dtoa_r+0x8ec>
    f92a:	e28a      	b.n	fe42 <_dtoa_r+0xe02>
    f92c:	0031      	movs	r1, r6
    f92e:	2300      	movs	r3, #0
    f930:	220a      	movs	r2, #10
    f932:	0038      	movs	r0, r7
    f934:	f001 fb98 	bl	11068 <__multadd>
    f938:	2300      	movs	r3, #0
    f93a:	0006      	movs	r6, r0
    f93c:	220a      	movs	r2, #10
    f93e:	0029      	movs	r1, r5
    f940:	0038      	movs	r0, r7
    f942:	4545      	cmp	r5, r8
    f944:	d100      	bne.n	f948 <_dtoa_r+0x908>
    f946:	e0e1      	b.n	fb0c <_dtoa_r+0xacc>
    f948:	f001 fb8e 	bl	11068 <__multadd>
    f94c:	4641      	mov	r1, r8
    f94e:	0005      	movs	r5, r0
    f950:	2300      	movs	r3, #0
    f952:	220a      	movs	r2, #10
    f954:	0038      	movs	r0, r7
    f956:	f001 fb87 	bl	11068 <__multadd>
    f95a:	46a2      	mov	sl, r4
    f95c:	4680      	mov	r8, r0
    f95e:	e7a3      	b.n	f8a8 <_dtoa_r+0x868>
    f960:	201c      	movs	r0, #28
    f962:	9b06      	ldr	r3, [sp, #24]
    f964:	469c      	mov	ip, r3
    f966:	4484      	add	ip, r0
    f968:	4663      	mov	r3, ip
    f96a:	9306      	str	r3, [sp, #24]
    f96c:	9b08      	ldr	r3, [sp, #32]
    f96e:	469c      	mov	ip, r3
    f970:	4484      	add	ip, r0
    f972:	4663      	mov	r3, ip
    f974:	9308      	str	r3, [sp, #32]
    f976:	9b04      	ldr	r3, [sp, #16]
    f978:	469c      	mov	ip, r3
    f97a:	4484      	add	ip, r0
    f97c:	4663      	mov	r3, ip
    f97e:	9304      	str	r3, [sp, #16]
    f980:	e754      	b.n	f82c <_dtoa_r+0x7ec>
    f982:	4649      	mov	r1, r9
    f984:	4658      	mov	r0, fp
    f986:	f001 fd71 	bl	1146c <__mcmp>
    f98a:	2800      	cmp	r0, #0
    f98c:	db00      	blt.n	f990 <_dtoa_r+0x950>
    f98e:	e763      	b.n	f858 <_dtoa_r+0x818>
    f990:	9b03      	ldr	r3, [sp, #12]
    f992:	4659      	mov	r1, fp
    f994:	3b01      	subs	r3, #1
    f996:	9303      	str	r3, [sp, #12]
    f998:	220a      	movs	r2, #10
    f99a:	2300      	movs	r3, #0
    f99c:	4650      	mov	r0, sl
    f99e:	f001 fb63 	bl	11068 <__multadd>
    f9a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f9a4:	4683      	mov	fp, r0
    f9a6:	2b00      	cmp	r3, #0
    f9a8:	d000      	beq.n	f9ac <_dtoa_r+0x96c>
    f9aa:	e2ca      	b.n	ff42 <_dtoa_r+0xf02>
    f9ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f9ae:	2b00      	cmp	r3, #0
    f9b0:	dc00      	bgt.n	f9b4 <_dtoa_r+0x974>
    f9b2:	e2d8      	b.n	ff66 <_dtoa_r+0xf26>
    f9b4:	9307      	str	r3, [sp, #28]
    f9b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f9b8:	465d      	mov	r5, fp
    f9ba:	2400      	movs	r4, #0
    f9bc:	9f07      	ldr	r7, [sp, #28]
    f9be:	469b      	mov	fp, r3
    f9c0:	e006      	b.n	f9d0 <_dtoa_r+0x990>
    f9c2:	0029      	movs	r1, r5
    f9c4:	2300      	movs	r3, #0
    f9c6:	220a      	movs	r2, #10
    f9c8:	4650      	mov	r0, sl
    f9ca:	f001 fb4d 	bl	11068 <__multadd>
    f9ce:	0005      	movs	r5, r0
    f9d0:	4649      	mov	r1, r9
    f9d2:	0028      	movs	r0, r5
    f9d4:	f7ff fa8a 	bl	eeec <quorem>
    f9d8:	465b      	mov	r3, fp
    f9da:	3030      	adds	r0, #48	; 0x30
    f9dc:	5518      	strb	r0, [r3, r4]
    f9de:	3401      	adds	r4, #1
    f9e0:	42bc      	cmp	r4, r7
    f9e2:	dbee      	blt.n	f9c2 <_dtoa_r+0x982>
    f9e4:	46ab      	mov	fp, r5
    f9e6:	0006      	movs	r6, r0
    f9e8:	9c07      	ldr	r4, [sp, #28]
    f9ea:	2c00      	cmp	r4, #0
    f9ec:	dc00      	bgt.n	f9f0 <_dtoa_r+0x9b0>
    f9ee:	e237      	b.n	fe60 <_dtoa_r+0xe20>
    f9f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f9f2:	2700      	movs	r7, #0
    f9f4:	469c      	mov	ip, r3
    f9f6:	4464      	add	r4, ip
    f9f8:	4659      	mov	r1, fp
    f9fa:	2201      	movs	r2, #1
    f9fc:	4650      	mov	r0, sl
    f9fe:	f001 fcd5 	bl	113ac <__lshift>
    fa02:	4649      	mov	r1, r9
    fa04:	4683      	mov	fp, r0
    fa06:	f001 fd31 	bl	1146c <__mcmp>
    fa0a:	2800      	cmp	r0, #0
    fa0c:	dc00      	bgt.n	fa10 <_dtoa_r+0x9d0>
    fa0e:	e144      	b.n	fc9a <_dtoa_r+0xc5a>
    fa10:	1e65      	subs	r5, r4, #1
    fa12:	782b      	ldrb	r3, [r5, #0]
    fa14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    fa16:	e006      	b.n	fa26 <_dtoa_r+0x9e6>
    fa18:	4295      	cmp	r5, r2
    fa1a:	d100      	bne.n	fa1e <_dtoa_r+0x9de>
    fa1c:	e0b1      	b.n	fb82 <_dtoa_r+0xb42>
    fa1e:	3c02      	subs	r4, #2
    fa20:	7823      	ldrb	r3, [r4, #0]
    fa22:	002c      	movs	r4, r5
    fa24:	3d01      	subs	r5, #1
    fa26:	2b39      	cmp	r3, #57	; 0x39
    fa28:	d0f6      	beq.n	fa18 <_dtoa_r+0x9d8>
    fa2a:	3301      	adds	r3, #1
    fa2c:	702b      	strb	r3, [r5, #0]
    fa2e:	4649      	mov	r1, r9
    fa30:	4650      	mov	r0, sl
    fa32:	f001 fb0f 	bl	11054 <_Bfree>
    fa36:	4643      	mov	r3, r8
    fa38:	2b00      	cmp	r3, #0
    fa3a:	d100      	bne.n	fa3e <_dtoa_r+0x9fe>
    fa3c:	e52f      	b.n	f49e <_dtoa_r+0x45e>
    fa3e:	2f00      	cmp	r7, #0
    fa40:	d005      	beq.n	fa4e <_dtoa_r+0xa0e>
    fa42:	4547      	cmp	r7, r8
    fa44:	d003      	beq.n	fa4e <_dtoa_r+0xa0e>
    fa46:	0039      	movs	r1, r7
    fa48:	4650      	mov	r0, sl
    fa4a:	f001 fb03 	bl	11054 <_Bfree>
    fa4e:	4641      	mov	r1, r8
    fa50:	4650      	mov	r0, sl
    fa52:	f001 faff 	bl	11054 <_Bfree>
    fa56:	e522      	b.n	f49e <_dtoa_r+0x45e>
    fa58:	0013      	movs	r3, r2
    fa5a:	e675      	b.n	f748 <_dtoa_r+0x708>
    fa5c:	2e00      	cmp	r6, #0
    fa5e:	d000      	beq.n	fa62 <_dtoa_r+0xa22>
    fa60:	e6ab      	b.n	f7ba <_dtoa_r+0x77a>
    fa62:	033b      	lsls	r3, r7, #12
    fa64:	2400      	movs	r4, #0
    fa66:	2b00      	cmp	r3, #0
    fa68:	d000      	beq.n	fa6c <_dtoa_r+0xa2c>
    fa6a:	e6bf      	b.n	f7ec <_dtoa_r+0x7ac>
    fa6c:	4bba      	ldr	r3, [pc, #744]	; (fd58 <_dtoa_r+0xd18>)
    fa6e:	423b      	tst	r3, r7
    fa70:	d100      	bne.n	fa74 <_dtoa_r+0xa34>
    fa72:	e6bb      	b.n	f7ec <_dtoa_r+0x7ac>
    fa74:	9b06      	ldr	r3, [sp, #24]
    fa76:	3401      	adds	r4, #1
    fa78:	3301      	adds	r3, #1
    fa7a:	9306      	str	r3, [sp, #24]
    fa7c:	9b04      	ldr	r3, [sp, #16]
    fa7e:	3301      	adds	r3, #1
    fa80:	9304      	str	r3, [sp, #16]
    fa82:	e6b3      	b.n	f7ec <_dtoa_r+0x7ac>
    fa84:	2301      	movs	r3, #1
    fa86:	930b      	str	r3, [sp, #44]	; 0x2c
    fa88:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    fa8a:	2b00      	cmp	r3, #0
    fa8c:	dc00      	bgt.n	fa90 <_dtoa_r+0xa50>
    fa8e:	e0d1      	b.n	fc34 <_dtoa_r+0xbf4>
    fa90:	001d      	movs	r5, r3
    fa92:	4698      	mov	r8, r3
    fa94:	930e      	str	r3, [sp, #56]	; 0x38
    fa96:	9307      	str	r3, [sp, #28]
    fa98:	f7ff fbc8 	bl	f22c <_dtoa_r+0x1ec>
    fa9c:	9b07      	ldr	r3, [sp, #28]
    fa9e:	2b00      	cmp	r3, #0
    faa0:	dd00      	ble.n	faa4 <_dtoa_r+0xa64>
    faa2:	e553      	b.n	f54c <_dtoa_r+0x50c>
    faa4:	d000      	beq.n	faa8 <_dtoa_r+0xa68>
    faa6:	e0ad      	b.n	fc04 <_dtoa_r+0xbc4>
    faa8:	9804      	ldr	r0, [sp, #16]
    faaa:	9905      	ldr	r1, [sp, #20]
    faac:	2200      	movs	r2, #0
    faae:	4bab      	ldr	r3, [pc, #684]	; (fd5c <_dtoa_r+0xd1c>)
    fab0:	f7fc fc5e 	bl	c370 <__aeabi_dmul>
    fab4:	003b      	movs	r3, r7
    fab6:	0032      	movs	r2, r6
    fab8:	f7fa fe8e 	bl	a7d8 <__aeabi_dcmpge>
    fabc:	2300      	movs	r3, #0
    fabe:	4699      	mov	r9, r3
    fac0:	4698      	mov	r8, r3
    fac2:	2800      	cmp	r0, #0
    fac4:	d055      	beq.n	fb72 <_dtoa_r+0xb32>
    fac6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    fac8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    faca:	43db      	mvns	r3, r3
    facc:	9303      	str	r3, [sp, #12]
    face:	4649      	mov	r1, r9
    fad0:	4650      	mov	r0, sl
    fad2:	f001 fabf 	bl	11054 <_Bfree>
    fad6:	4643      	mov	r3, r8
    fad8:	2b00      	cmp	r3, #0
    fada:	d100      	bne.n	fade <_dtoa_r+0xa9e>
    fadc:	e4df      	b.n	f49e <_dtoa_r+0x45e>
    fade:	e7b6      	b.n	fa4e <_dtoa_r+0xa0e>
    fae0:	464a      	mov	r2, r9
    fae2:	4659      	mov	r1, fp
    fae4:	4650      	mov	r0, sl
    fae6:	f001 fc01 	bl	112ec <__pow5mult>
    faea:	4683      	mov	fp, r0
    faec:	e653      	b.n	f796 <_dtoa_r+0x756>
    faee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    faf0:	2a00      	cmp	r2, #0
    faf2:	d100      	bne.n	faf6 <_dtoa_r+0xab6>
    faf4:	e1b6      	b.n	fe64 <_dtoa_r+0xe24>
    faf6:	4a9a      	ldr	r2, [pc, #616]	; (fd60 <_dtoa_r+0xd20>)
    faf8:	464c      	mov	r4, r9
    fafa:	4694      	mov	ip, r2
    fafc:	9a06      	ldr	r2, [sp, #24]
    fafe:	4463      	add	r3, ip
    fb00:	9208      	str	r2, [sp, #32]
    fb02:	e5d5      	b.n	f6b0 <_dtoa_r+0x670>
    fb04:	2e00      	cmp	r6, #0
    fb06:	d000      	beq.n	fb0a <_dtoa_r+0xaca>
    fb08:	e670      	b.n	f7ec <_dtoa_r+0x7ac>
    fb0a:	e7aa      	b.n	fa62 <_dtoa_r+0xa22>
    fb0c:	f001 faac 	bl	11068 <__multadd>
    fb10:	46a2      	mov	sl, r4
    fb12:	0005      	movs	r5, r0
    fb14:	4680      	mov	r8, r0
    fb16:	e6c7      	b.n	f8a8 <_dtoa_r+0x868>
    fb18:	2301      	movs	r3, #1
    fb1a:	469b      	mov	fp, r3
    fb1c:	e6e2      	b.n	f8e4 <_dtoa_r+0x8a4>
    fb1e:	2300      	movs	r3, #0
    fb20:	930b      	str	r3, [sp, #44]	; 0x2c
    fb22:	9b22      	ldr	r3, [sp, #136]	; 0x88
    fb24:	2b02      	cmp	r3, #2
    fb26:	d0af      	beq.n	fa88 <_dtoa_r+0xa48>
    fb28:	2400      	movs	r4, #0
    fb2a:	4653      	mov	r3, sl
    fb2c:	0021      	movs	r1, r4
    fb2e:	645c      	str	r4, [r3, #68]	; 0x44
    fb30:	4650      	mov	r0, sl
    fb32:	f001 fa67 	bl	11004 <_Balloc>
    fb36:	4653      	mov	r3, sl
    fb38:	6418      	str	r0, [r3, #64]	; 0x40
    fb3a:	2301      	movs	r3, #1
    fb3c:	425b      	negs	r3, r3
    fb3e:	9307      	str	r3, [sp, #28]
    fb40:	930e      	str	r3, [sp, #56]	; 0x38
    fb42:	3302      	adds	r3, #2
    fb44:	900a      	str	r0, [sp, #40]	; 0x28
    fb46:	9423      	str	r4, [sp, #140]	; 0x8c
    fb48:	930b      	str	r3, [sp, #44]	; 0x2c
    fb4a:	e4ec      	b.n	f526 <_dtoa_r+0x4e6>
    fb4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    fb4e:	2b02      	cmp	r3, #2
    fb50:	dc00      	bgt.n	fb54 <_dtoa_r+0xb14>
    fb52:	e685      	b.n	f860 <_dtoa_r+0x820>
    fb54:	9b07      	ldr	r3, [sp, #28]
    fb56:	2b00      	cmp	r3, #0
    fb58:	d1b5      	bne.n	fac6 <_dtoa_r+0xa86>
    fb5a:	4649      	mov	r1, r9
    fb5c:	2205      	movs	r2, #5
    fb5e:	4650      	mov	r0, sl
    fb60:	f001 fa82 	bl	11068 <__multadd>
    fb64:	4681      	mov	r9, r0
    fb66:	0001      	movs	r1, r0
    fb68:	4658      	mov	r0, fp
    fb6a:	f001 fc7f 	bl	1146c <__mcmp>
    fb6e:	2800      	cmp	r0, #0
    fb70:	dda9      	ble.n	fac6 <_dtoa_r+0xa86>
    fb72:	2331      	movs	r3, #49	; 0x31
    fb74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    fb76:	7013      	strb	r3, [r2, #0]
    fb78:	9b03      	ldr	r3, [sp, #12]
    fb7a:	1c54      	adds	r4, r2, #1
    fb7c:	3301      	adds	r3, #1
    fb7e:	9303      	str	r3, [sp, #12]
    fb80:	e7a5      	b.n	face <_dtoa_r+0xa8e>
    fb82:	9b03      	ldr	r3, [sp, #12]
    fb84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    fb86:	3301      	adds	r3, #1
    fb88:	9303      	str	r3, [sp, #12]
    fb8a:	2331      	movs	r3, #49	; 0x31
    fb8c:	7013      	strb	r3, [r2, #0]
    fb8e:	e74e      	b.n	fa2e <_dtoa_r+0x9ee>
    fb90:	2300      	movs	r3, #0
    fb92:	930b      	str	r3, [sp, #44]	; 0x2c
    fb94:	f7ff fb3d 	bl	f212 <_dtoa_r+0x1d2>
    fb98:	9b06      	ldr	r3, [sp, #24]
    fb9a:	465c      	mov	r4, fp
    fb9c:	469b      	mov	fp, r3
    fb9e:	9b07      	ldr	r3, [sp, #28]
    fba0:	469a      	mov	sl, r3
    fba2:	e47c      	b.n	f49e <_dtoa_r+0x45e>
    fba4:	4640      	mov	r0, r8
    fba6:	f7fd f9cd 	bl	cf44 <__aeabi_i2d>
    fbaa:	0032      	movs	r2, r6
    fbac:	003b      	movs	r3, r7
    fbae:	f7fc fbdf 	bl	c370 <__aeabi_dmul>
    fbb2:	2200      	movs	r2, #0
    fbb4:	4b6b      	ldr	r3, [pc, #428]	; (fd64 <_dtoa_r+0xd24>)
    fbb6:	f7fb fc97 	bl	b4e8 <__aeabi_dadd>
    fbba:	4a6b      	ldr	r2, [pc, #428]	; (fd68 <_dtoa_r+0xd28>)
    fbbc:	000b      	movs	r3, r1
    fbbe:	4694      	mov	ip, r2
    fbc0:	4463      	add	r3, ip
    fbc2:	9008      	str	r0, [sp, #32]
    fbc4:	9109      	str	r1, [sp, #36]	; 0x24
    fbc6:	9309      	str	r3, [sp, #36]	; 0x24
    fbc8:	2200      	movs	r2, #0
    fbca:	4b64      	ldr	r3, [pc, #400]	; (fd5c <_dtoa_r+0xd1c>)
    fbcc:	0030      	movs	r0, r6
    fbce:	0039      	movs	r1, r7
    fbd0:	f7fc fe4e 	bl	c870 <__aeabi_dsub>
    fbd4:	9e08      	ldr	r6, [sp, #32]
    fbd6:	9f09      	ldr	r7, [sp, #36]	; 0x24
    fbd8:	0032      	movs	r2, r6
    fbda:	003b      	movs	r3, r7
    fbdc:	0004      	movs	r4, r0
    fbde:	000d      	movs	r5, r1
    fbe0:	f7fa fdf0 	bl	a7c4 <__aeabi_dcmpgt>
    fbe4:	2800      	cmp	r0, #0
    fbe6:	d000      	beq.n	fbea <_dtoa_r+0xbaa>
    fbe8:	e0b2      	b.n	fd50 <_dtoa_r+0xd10>
    fbea:	2080      	movs	r0, #128	; 0x80
    fbec:	0600      	lsls	r0, r0, #24
    fbee:	4684      	mov	ip, r0
    fbf0:	0039      	movs	r1, r7
    fbf2:	4461      	add	r1, ip
    fbf4:	000b      	movs	r3, r1
    fbf6:	0032      	movs	r2, r6
    fbf8:	0020      	movs	r0, r4
    fbfa:	0029      	movs	r1, r5
    fbfc:	f7fa fdce 	bl	a79c <__aeabi_dcmplt>
    fc00:	2800      	cmp	r0, #0
    fc02:	d057      	beq.n	fcb4 <_dtoa_r+0xc74>
    fc04:	2300      	movs	r3, #0
    fc06:	4699      	mov	r9, r3
    fc08:	4698      	mov	r8, r3
    fc0a:	e75c      	b.n	fac6 <_dtoa_r+0xa86>
    fc0c:	980a      	ldr	r0, [sp, #40]	; 0x28
    fc0e:	f7ff fa4c 	bl	f0aa <_dtoa_r+0x6a>
    fc12:	1ae2      	subs	r2, r4, r3
    fc14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    fc16:	46a1      	mov	r9, r4
    fc18:	469c      	mov	ip, r3
    fc1a:	4494      	add	ip, r2
    fc1c:	4663      	mov	r3, ip
    fc1e:	2400      	movs	r4, #0
    fc20:	930d      	str	r3, [sp, #52]	; 0x34
    fc22:	e53e      	b.n	f6a2 <_dtoa_r+0x662>
    fc24:	9a10      	ldr	r2, [sp, #64]	; 0x40
    fc26:	9b11      	ldr	r3, [sp, #68]	; 0x44
    fc28:	9208      	str	r2, [sp, #32]
    fc2a:	9309      	str	r3, [sp, #36]	; 0x24
    fc2c:	2302      	movs	r3, #2
    fc2e:	4698      	mov	r8, r3
    fc30:	f7ff fb3a 	bl	f2a8 <_dtoa_r+0x268>
    fc34:	2300      	movs	r3, #0
    fc36:	4652      	mov	r2, sl
    fc38:	2100      	movs	r1, #0
    fc3a:	6453      	str	r3, [r2, #68]	; 0x44
    fc3c:	4650      	mov	r0, sl
    fc3e:	f001 f9e1 	bl	11004 <_Balloc>
    fc42:	4653      	mov	r3, sl
    fc44:	6418      	str	r0, [r3, #64]	; 0x40
    fc46:	2301      	movs	r3, #1
    fc48:	900a      	str	r0, [sp, #40]	; 0x28
    fc4a:	9307      	str	r3, [sp, #28]
    fc4c:	9323      	str	r3, [sp, #140]	; 0x8c
    fc4e:	930e      	str	r3, [sp, #56]	; 0x38
    fc50:	f7ff fb07 	bl	f262 <_dtoa_r+0x222>
    fc54:	4643      	mov	r3, r8
    fc56:	930c      	str	r3, [sp, #48]	; 0x30
    fc58:	465b      	mov	r3, fp
    fc5a:	9a06      	ldr	r2, [sp, #24]
    fc5c:	46a8      	mov	r8, r5
    fc5e:	46b3      	mov	fp, r6
    fc60:	4655      	mov	r5, sl
    fc62:	9e04      	ldr	r6, [sp, #16]
    fc64:	4691      	mov	r9, r2
    fc66:	46ba      	mov	sl, r7
    fc68:	2b00      	cmp	r3, #0
    fc6a:	dd10      	ble.n	fc8e <_dtoa_r+0xc4e>
    fc6c:	4659      	mov	r1, fp
    fc6e:	2201      	movs	r2, #1
    fc70:	0038      	movs	r0, r7
    fc72:	f001 fb9b 	bl	113ac <__lshift>
    fc76:	4649      	mov	r1, r9
    fc78:	4683      	mov	fp, r0
    fc7a:	f001 fbf7 	bl	1146c <__mcmp>
    fc7e:	2800      	cmp	r0, #0
    fc80:	dc00      	bgt.n	fc84 <_dtoa_r+0xc44>
    fc82:	e157      	b.n	ff34 <_dtoa_r+0xef4>
    fc84:	2e39      	cmp	r6, #57	; 0x39
    fc86:	d100      	bne.n	fc8a <_dtoa_r+0xc4a>
    fc88:	e122      	b.n	fed0 <_dtoa_r+0xe90>
    fc8a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    fc8c:	3631      	adds	r6, #49	; 0x31
    fc8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    fc90:	4647      	mov	r7, r8
    fc92:	1c6c      	adds	r4, r5, #1
    fc94:	702e      	strb	r6, [r5, #0]
    fc96:	4698      	mov	r8, r3
    fc98:	e6c9      	b.n	fa2e <_dtoa_r+0x9ee>
    fc9a:	2800      	cmp	r0, #0
    fc9c:	d103      	bne.n	fca6 <_dtoa_r+0xc66>
    fc9e:	07f3      	lsls	r3, r6, #31
    fca0:	d501      	bpl.n	fca6 <_dtoa_r+0xc66>
    fca2:	e6b5      	b.n	fa10 <_dtoa_r+0x9d0>
    fca4:	001c      	movs	r4, r3
    fca6:	1e63      	subs	r3, r4, #1
    fca8:	781a      	ldrb	r2, [r3, #0]
    fcaa:	2a30      	cmp	r2, #48	; 0x30
    fcac:	d0fa      	beq.n	fca4 <_dtoa_r+0xc64>
    fcae:	e6be      	b.n	fa2e <_dtoa_r+0x9ee>
    fcb0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    fcb2:	4699      	mov	r9, r3
    fcb4:	9e10      	ldr	r6, [sp, #64]	; 0x40
    fcb6:	9f11      	ldr	r7, [sp, #68]	; 0x44
    fcb8:	e435      	b.n	f526 <_dtoa_r+0x4e6>
    fcba:	2501      	movs	r5, #1
    fcbc:	f7ff fab4 	bl	f228 <_dtoa_r+0x1e8>
    fcc0:	9b03      	ldr	r3, [sp, #12]
    fcc2:	2b00      	cmp	r3, #0
    fcc4:	d100      	bne.n	fcc8 <_dtoa_r+0xc88>
    fcc6:	e0d4      	b.n	fe72 <_dtoa_r+0xe32>
    fcc8:	9810      	ldr	r0, [sp, #64]	; 0x40
    fcca:	9911      	ldr	r1, [sp, #68]	; 0x44
    fccc:	425c      	negs	r4, r3
    fcce:	230f      	movs	r3, #15
    fcd0:	4a26      	ldr	r2, [pc, #152]	; (fd6c <_dtoa_r+0xd2c>)
    fcd2:	4023      	ands	r3, r4
    fcd4:	00db      	lsls	r3, r3, #3
    fcd6:	18d3      	adds	r3, r2, r3
    fcd8:	681a      	ldr	r2, [r3, #0]
    fcda:	685b      	ldr	r3, [r3, #4]
    fcdc:	f7fc fb48 	bl	c370 <__aeabi_dmul>
    fce0:	1124      	asrs	r4, r4, #4
    fce2:	0006      	movs	r6, r0
    fce4:	000f      	movs	r7, r1
    fce6:	2c00      	cmp	r4, #0
    fce8:	d100      	bne.n	fcec <_dtoa_r+0xcac>
    fcea:	e149      	b.n	ff80 <_dtoa_r+0xf40>
    fcec:	2302      	movs	r3, #2
    fcee:	4698      	mov	r8, r3
    fcf0:	4d1f      	ldr	r5, [pc, #124]	; (fd70 <_dtoa_r+0xd30>)
    fcf2:	2301      	movs	r3, #1
    fcf4:	4223      	tst	r3, r4
    fcf6:	d009      	beq.n	fd0c <_dtoa_r+0xccc>
    fcf8:	469c      	mov	ip, r3
    fcfa:	682a      	ldr	r2, [r5, #0]
    fcfc:	686b      	ldr	r3, [r5, #4]
    fcfe:	0030      	movs	r0, r6
    fd00:	0039      	movs	r1, r7
    fd02:	44e0      	add	r8, ip
    fd04:	f7fc fb34 	bl	c370 <__aeabi_dmul>
    fd08:	0006      	movs	r6, r0
    fd0a:	000f      	movs	r7, r1
    fd0c:	1064      	asrs	r4, r4, #1
    fd0e:	3508      	adds	r5, #8
    fd10:	2c00      	cmp	r4, #0
    fd12:	d1ee      	bne.n	fcf2 <_dtoa_r+0xcb2>
    fd14:	f7ff fae4 	bl	f2e0 <_dtoa_r+0x2a0>
    fd18:	9b03      	ldr	r3, [sp, #12]
    fd1a:	2730      	movs	r7, #48	; 0x30
    fd1c:	3301      	adds	r3, #1
    fd1e:	9303      	str	r3, [sp, #12]
    fd20:	2330      	movs	r3, #48	; 0x30
    fd22:	702b      	strb	r3, [r5, #0]
    fd24:	e4ac      	b.n	f680 <_dtoa_r+0x640>
    fd26:	6859      	ldr	r1, [r3, #4]
    fd28:	4650      	mov	r0, sl
    fd2a:	f001 f96b 	bl	11004 <_Balloc>
    fd2e:	4643      	mov	r3, r8
    fd30:	4641      	mov	r1, r8
    fd32:	0004      	movs	r4, r0
    fd34:	691b      	ldr	r3, [r3, #16]
    fd36:	310c      	adds	r1, #12
    fd38:	1c9a      	adds	r2, r3, #2
    fd3a:	0092      	lsls	r2, r2, #2
    fd3c:	300c      	adds	r0, #12
    fd3e:	f7fd fa29 	bl	d194 <memcpy>
    fd42:	2201      	movs	r2, #1
    fd44:	0021      	movs	r1, r4
    fd46:	4650      	mov	r0, sl
    fd48:	f001 fb30 	bl	113ac <__lshift>
    fd4c:	900c      	str	r0, [sp, #48]	; 0x30
    fd4e:	e599      	b.n	f884 <_dtoa_r+0x844>
    fd50:	2300      	movs	r3, #0
    fd52:	4699      	mov	r9, r3
    fd54:	4698      	mov	r8, r3
    fd56:	e70c      	b.n	fb72 <_dtoa_r+0xb32>
    fd58:	7ff00000 	.word	0x7ff00000
    fd5c:	40140000 	.word	0x40140000
    fd60:	00000433 	.word	0x00000433
    fd64:	401c0000 	.word	0x401c0000
    fd68:	fcc00000 	.word	0xfcc00000
    fd6c:	00012670 	.word	0x00012670
    fd70:	00012648 	.word	0x00012648
    fd74:	9b12      	ldr	r3, [sp, #72]	; 0x48
    fd76:	498f      	ldr	r1, [pc, #572]	; (ffb4 <_dtoa_r+0xf74>)
    fd78:	3b01      	subs	r3, #1
    fd7a:	00db      	lsls	r3, r3, #3
    fd7c:	18c9      	adds	r1, r1, r3
    fd7e:	6808      	ldr	r0, [r1, #0]
    fd80:	6849      	ldr	r1, [r1, #4]
    fd82:	9a08      	ldr	r2, [sp, #32]
    fd84:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fd86:	f7fc faf3 	bl	c370 <__aeabi_dmul>
    fd8a:	9014      	str	r0, [sp, #80]	; 0x50
    fd8c:	9115      	str	r1, [sp, #84]	; 0x54
    fd8e:	0039      	movs	r1, r7
    fd90:	0030      	movs	r0, r6
    fd92:	f7fd f8a3 	bl	cedc <__aeabi_d2iz>
    fd96:	0005      	movs	r5, r0
    fd98:	f7fd f8d4 	bl	cf44 <__aeabi_i2d>
    fd9c:	0002      	movs	r2, r0
    fd9e:	000b      	movs	r3, r1
    fda0:	0030      	movs	r0, r6
    fda2:	0039      	movs	r1, r7
    fda4:	f7fc fd64 	bl	c870 <__aeabi_dsub>
    fda8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    fdaa:	9008      	str	r0, [sp, #32]
    fdac:	9109      	str	r1, [sp, #36]	; 0x24
    fdae:	990a      	ldr	r1, [sp, #40]	; 0x28
    fdb0:	001a      	movs	r2, r3
    fdb2:	468c      	mov	ip, r1
    fdb4:	3530      	adds	r5, #48	; 0x30
    fdb6:	4462      	add	r2, ip
    fdb8:	1c4c      	adds	r4, r1, #1
    fdba:	700d      	strb	r5, [r1, #0]
    fdbc:	4690      	mov	r8, r2
    fdbe:	2b01      	cmp	r3, #1
    fdc0:	d01b      	beq.n	fdfa <_dtoa_r+0xdba>
    fdc2:	9808      	ldr	r0, [sp, #32]
    fdc4:	9909      	ldr	r1, [sp, #36]	; 0x24
    fdc6:	0025      	movs	r5, r4
    fdc8:	2200      	movs	r2, #0
    fdca:	4b7b      	ldr	r3, [pc, #492]	; (ffb8 <_dtoa_r+0xf78>)
    fdcc:	f7fc fad0 	bl	c370 <__aeabi_dmul>
    fdd0:	000f      	movs	r7, r1
    fdd2:	0006      	movs	r6, r0
    fdd4:	f7fd f882 	bl	cedc <__aeabi_d2iz>
    fdd8:	0004      	movs	r4, r0
    fdda:	f7fd f8b3 	bl	cf44 <__aeabi_i2d>
    fdde:	3430      	adds	r4, #48	; 0x30
    fde0:	0002      	movs	r2, r0
    fde2:	000b      	movs	r3, r1
    fde4:	0030      	movs	r0, r6
    fde6:	0039      	movs	r1, r7
    fde8:	f7fc fd42 	bl	c870 <__aeabi_dsub>
    fdec:	702c      	strb	r4, [r5, #0]
    fdee:	3501      	adds	r5, #1
    fdf0:	45a8      	cmp	r8, r5
    fdf2:	d1e9      	bne.n	fdc8 <_dtoa_r+0xd88>
    fdf4:	4644      	mov	r4, r8
    fdf6:	9008      	str	r0, [sp, #32]
    fdf8:	9109      	str	r1, [sp, #36]	; 0x24
    fdfa:	9814      	ldr	r0, [sp, #80]	; 0x50
    fdfc:	9915      	ldr	r1, [sp, #84]	; 0x54
    fdfe:	2200      	movs	r2, #0
    fe00:	4b6e      	ldr	r3, [pc, #440]	; (ffbc <_dtoa_r+0xf7c>)
    fe02:	f7fb fb71 	bl	b4e8 <__aeabi_dadd>
    fe06:	9a08      	ldr	r2, [sp, #32]
    fe08:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fe0a:	f7fa fcc7 	bl	a79c <__aeabi_dcmplt>
    fe0e:	2800      	cmp	r0, #0
    fe10:	d067      	beq.n	fee2 <_dtoa_r+0xea2>
    fe12:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    fe14:	1e65      	subs	r5, r4, #1
    fe16:	9303      	str	r3, [sp, #12]
    fe18:	782f      	ldrb	r7, [r5, #0]
    fe1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fe1c:	e42e      	b.n	f67c <_dtoa_r+0x63c>
    fe1e:	4643      	mov	r3, r8
    fe20:	46b3      	mov	fp, r6
    fe22:	930c      	str	r3, [sp, #48]	; 0x30
    fe24:	9e04      	ldr	r6, [sp, #16]
    fe26:	9b06      	ldr	r3, [sp, #24]
    fe28:	46a8      	mov	r8, r5
    fe2a:	4699      	mov	r9, r3
    fe2c:	4655      	mov	r5, sl
    fe2e:	46ba      	mov	sl, r7
    fe30:	2e39      	cmp	r6, #57	; 0x39
    fe32:	d04d      	beq.n	fed0 <_dtoa_r+0xe90>
    fe34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    fe36:	3601      	adds	r6, #1
    fe38:	4647      	mov	r7, r8
    fe3a:	1c6c      	adds	r4, r5, #1
    fe3c:	702e      	strb	r6, [r5, #0]
    fe3e:	4698      	mov	r8, r3
    fe40:	e5f5      	b.n	fa2e <_dtoa_r+0x9ee>
    fe42:	4642      	mov	r2, r8
    fe44:	9b06      	ldr	r3, [sp, #24]
    fe46:	46b3      	mov	fp, r6
    fe48:	46ba      	mov	sl, r7
    fe4a:	9e04      	ldr	r6, [sp, #16]
    fe4c:	4699      	mov	r9, r3
    fe4e:	002f      	movs	r7, r5
    fe50:	4690      	mov	r8, r2
    fe52:	e5d1      	b.n	f9f8 <_dtoa_r+0x9b8>
    fe54:	9b06      	ldr	r3, [sp, #24]
    fe56:	9a07      	ldr	r2, [sp, #28]
    fe58:	1a9b      	subs	r3, r3, r2
    fe5a:	9308      	str	r3, [sp, #32]
    fe5c:	2300      	movs	r3, #0
    fe5e:	e427      	b.n	f6b0 <_dtoa_r+0x670>
    fe60:	2401      	movs	r4, #1
    fe62:	e5c5      	b.n	f9f0 <_dtoa_r+0x9b0>
    fe64:	2336      	movs	r3, #54	; 0x36
    fe66:	9a16      	ldr	r2, [sp, #88]	; 0x58
    fe68:	464c      	mov	r4, r9
    fe6a:	1a9b      	subs	r3, r3, r2
    fe6c:	9a06      	ldr	r2, [sp, #24]
    fe6e:	9208      	str	r2, [sp, #32]
    fe70:	e41e      	b.n	f6b0 <_dtoa_r+0x670>
    fe72:	2302      	movs	r3, #2
    fe74:	9e10      	ldr	r6, [sp, #64]	; 0x40
    fe76:	9f11      	ldr	r7, [sp, #68]	; 0x44
    fe78:	4698      	mov	r8, r3
    fe7a:	f7ff fa31 	bl	f2e0 <_dtoa_r+0x2a0>
    fe7e:	9b07      	ldr	r3, [sp, #28]
    fe80:	2b00      	cmp	r3, #0
    fe82:	d100      	bne.n	fe86 <_dtoa_r+0xe46>
    fe84:	e68e      	b.n	fba4 <_dtoa_r+0xb64>
    fe86:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    fe88:	2c00      	cmp	r4, #0
    fe8a:	dc00      	bgt.n	fe8e <_dtoa_r+0xe4e>
    fe8c:	e712      	b.n	fcb4 <_dtoa_r+0xc74>
    fe8e:	9b03      	ldr	r3, [sp, #12]
    fe90:	2200      	movs	r2, #0
    fe92:	3b01      	subs	r3, #1
    fe94:	9313      	str	r3, [sp, #76]	; 0x4c
    fe96:	0030      	movs	r0, r6
    fe98:	4b47      	ldr	r3, [pc, #284]	; (ffb8 <_dtoa_r+0xf78>)
    fe9a:	0039      	movs	r1, r7
    fe9c:	f7fc fa68 	bl	c370 <__aeabi_dmul>
    fea0:	0006      	movs	r6, r0
    fea2:	4640      	mov	r0, r8
    fea4:	000f      	movs	r7, r1
    fea6:	3001      	adds	r0, #1
    fea8:	f7fd f84c 	bl	cf44 <__aeabi_i2d>
    feac:	0032      	movs	r2, r6
    feae:	003b      	movs	r3, r7
    feb0:	f7fc fa5e 	bl	c370 <__aeabi_dmul>
    feb4:	2200      	movs	r2, #0
    feb6:	4b42      	ldr	r3, [pc, #264]	; (ffc0 <_dtoa_r+0xf80>)
    feb8:	f7fb fb16 	bl	b4e8 <__aeabi_dadd>
    febc:	4a41      	ldr	r2, [pc, #260]	; (ffc4 <_dtoa_r+0xf84>)
    febe:	000b      	movs	r3, r1
    fec0:	4694      	mov	ip, r2
    fec2:	4463      	add	r3, ip
    fec4:	9008      	str	r0, [sp, #32]
    fec6:	9109      	str	r1, [sp, #36]	; 0x24
    fec8:	9412      	str	r4, [sp, #72]	; 0x48
    feca:	9309      	str	r3, [sp, #36]	; 0x24
    fecc:	f7ff fa30 	bl	f330 <_dtoa_r+0x2f0>
    fed0:	2339      	movs	r3, #57	; 0x39
    fed2:	702b      	strb	r3, [r5, #0]
    fed4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    fed6:	4647      	mov	r7, r8
    fed8:	1c6c      	adds	r4, r5, #1
    feda:	4698      	mov	r8, r3
    fedc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    fede:	2339      	movs	r3, #57	; 0x39
    fee0:	e5a1      	b.n	fa26 <_dtoa_r+0x9e6>
    fee2:	9a14      	ldr	r2, [sp, #80]	; 0x50
    fee4:	9b15      	ldr	r3, [sp, #84]	; 0x54
    fee6:	2000      	movs	r0, #0
    fee8:	4934      	ldr	r1, [pc, #208]	; (ffbc <_dtoa_r+0xf7c>)
    feea:	f7fc fcc1 	bl	c870 <__aeabi_dsub>
    feee:	9a08      	ldr	r2, [sp, #32]
    fef0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fef2:	f7fa fc67 	bl	a7c4 <__aeabi_dcmpgt>
    fef6:	2800      	cmp	r0, #0
    fef8:	d101      	bne.n	fefe <_dtoa_r+0xebe>
    fefa:	e6db      	b.n	fcb4 <_dtoa_r+0xc74>
    fefc:	001c      	movs	r4, r3
    fefe:	1e63      	subs	r3, r4, #1
    ff00:	781a      	ldrb	r2, [r3, #0]
    ff02:	2a30      	cmp	r2, #48	; 0x30
    ff04:	d0fa      	beq.n	fefc <_dtoa_r+0xebc>
    ff06:	f7ff fac8 	bl	f49a <_dtoa_r+0x45a>
    ff0a:	4643      	mov	r3, r8
    ff0c:	46b3      	mov	fp, r6
    ff0e:	930c      	str	r3, [sp, #48]	; 0x30
    ff10:	9e04      	ldr	r6, [sp, #16]
    ff12:	9b06      	ldr	r3, [sp, #24]
    ff14:	46a8      	mov	r8, r5
    ff16:	4699      	mov	r9, r3
    ff18:	4655      	mov	r5, sl
    ff1a:	46ba      	mov	sl, r7
    ff1c:	2e39      	cmp	r6, #57	; 0x39
    ff1e:	d0d7      	beq.n	fed0 <_dtoa_r+0xe90>
    ff20:	2c00      	cmp	r4, #0
    ff22:	dd00      	ble.n	ff26 <_dtoa_r+0xee6>
    ff24:	e6b1      	b.n	fc8a <_dtoa_r+0xc4a>
    ff26:	e6b2      	b.n	fc8e <_dtoa_r+0xc4e>
    ff28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    ff2a:	464d      	mov	r5, r9
    ff2c:	9203      	str	r2, [sp, #12]
    ff2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ff30:	f7ff fba4 	bl	f67c <_dtoa_r+0x63c>
    ff34:	2800      	cmp	r0, #0
    ff36:	d000      	beq.n	ff3a <_dtoa_r+0xefa>
    ff38:	e6a9      	b.n	fc8e <_dtoa_r+0xc4e>
    ff3a:	07f3      	lsls	r3, r6, #31
    ff3c:	d400      	bmi.n	ff40 <_dtoa_r+0xf00>
    ff3e:	e6a6      	b.n	fc8e <_dtoa_r+0xc4e>
    ff40:	e6a0      	b.n	fc84 <_dtoa_r+0xc44>
    ff42:	2300      	movs	r3, #0
    ff44:	4641      	mov	r1, r8
    ff46:	220a      	movs	r2, #10
    ff48:	4650      	mov	r0, sl
    ff4a:	f001 f88d 	bl	11068 <__multadd>
    ff4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ff50:	4680      	mov	r8, r0
    ff52:	2b00      	cmp	r3, #0
    ff54:	dd01      	ble.n	ff5a <_dtoa_r+0xf1a>
    ff56:	9307      	str	r3, [sp, #28]
    ff58:	e486      	b.n	f868 <_dtoa_r+0x828>
    ff5a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ff5c:	2b02      	cmp	r3, #2
    ff5e:	dc1f      	bgt.n	ffa0 <_dtoa_r+0xf60>
    ff60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ff62:	9307      	str	r3, [sp, #28]
    ff64:	e480      	b.n	f868 <_dtoa_r+0x828>
    ff66:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ff68:	2b02      	cmp	r3, #2
    ff6a:	dc19      	bgt.n	ffa0 <_dtoa_r+0xf60>
    ff6c:	4649      	mov	r1, r9
    ff6e:	f7fe ffbd 	bl	eeec <quorem>
    ff72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ff74:	3030      	adds	r0, #48	; 0x30
    ff76:	7018      	strb	r0, [r3, #0]
    ff78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ff7a:	0006      	movs	r6, r0
    ff7c:	9307      	str	r3, [sp, #28]
    ff7e:	e533      	b.n	f9e8 <_dtoa_r+0x9a8>
    ff80:	2302      	movs	r3, #2
    ff82:	4698      	mov	r8, r3
    ff84:	f7ff f9ac 	bl	f2e0 <_dtoa_r+0x2a0>
    ff88:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    ff8a:	9c14      	ldr	r4, [sp, #80]	; 0x50
    ff8c:	9303      	str	r3, [sp, #12]
    ff8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ff90:	001d      	movs	r5, r3
    ff92:	f7ff fb73 	bl	f67c <_dtoa_r+0x63c>
    ff96:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    ff98:	9c14      	ldr	r4, [sp, #80]	; 0x50
    ff9a:	9303      	str	r3, [sp, #12]
    ff9c:	f7ff fa7f 	bl	f49e <_dtoa_r+0x45e>
    ffa0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ffa2:	9307      	str	r3, [sp, #28]
    ffa4:	e5d6      	b.n	fb54 <_dtoa_r+0xb14>
    ffa6:	2b04      	cmp	r3, #4
    ffa8:	d100      	bne.n	ffac <_dtoa_r+0xf6c>
    ffaa:	e43f      	b.n	f82c <_dtoa_r+0x7ec>
    ffac:	233c      	movs	r3, #60	; 0x3c
    ffae:	1a18      	subs	r0, r3, r0
    ffb0:	e4d7      	b.n	f962 <_dtoa_r+0x922>
    ffb2:	46c0      	nop			; (mov r8, r8)
    ffb4:	00012670 	.word	0x00012670
    ffb8:	40240000 	.word	0x40240000
    ffbc:	3fe00000 	.word	0x3fe00000
    ffc0:	401c0000 	.word	0x401c0000
    ffc4:	fcc00000 	.word	0xfcc00000

0000ffc8 <__sflush_r>:
    ffc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    ffca:	46c6      	mov	lr, r8
    ffcc:	b500      	push	{lr}
    ffce:	230c      	movs	r3, #12
    ffd0:	5eca      	ldrsh	r2, [r1, r3]
    ffd2:	4680      	mov	r8, r0
    ffd4:	b293      	uxth	r3, r2
    ffd6:	000c      	movs	r4, r1
    ffd8:	0719      	lsls	r1, r3, #28
    ffda:	d440      	bmi.n	1005e <__sflush_r+0x96>
    ffdc:	2380      	movs	r3, #128	; 0x80
    ffde:	011b      	lsls	r3, r3, #4
    ffe0:	4313      	orrs	r3, r2
    ffe2:	6862      	ldr	r2, [r4, #4]
    ffe4:	81a3      	strh	r3, [r4, #12]
    ffe6:	2a00      	cmp	r2, #0
    ffe8:	dc00      	bgt.n	ffec <__sflush_r+0x24>
    ffea:	e070      	b.n	100ce <__sflush_r+0x106>
    ffec:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    ffee:	2e00      	cmp	r6, #0
    fff0:	d031      	beq.n	10056 <__sflush_r+0x8e>
    fff2:	4642      	mov	r2, r8
    fff4:	4641      	mov	r1, r8
    fff6:	6815      	ldr	r5, [r2, #0]
    fff8:	2200      	movs	r2, #0
    fffa:	b29b      	uxth	r3, r3
    fffc:	600a      	str	r2, [r1, #0]
    fffe:	04da      	lsls	r2, r3, #19
   10000:	d400      	bmi.n	10004 <__sflush_r+0x3c>
   10002:	e069      	b.n	100d8 <__sflush_r+0x110>
   10004:	6d22      	ldr	r2, [r4, #80]	; 0x50
   10006:	075b      	lsls	r3, r3, #29
   10008:	d506      	bpl.n	10018 <__sflush_r+0x50>
   1000a:	6863      	ldr	r3, [r4, #4]
   1000c:	1ad2      	subs	r2, r2, r3
   1000e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   10010:	2b00      	cmp	r3, #0
   10012:	d001      	beq.n	10018 <__sflush_r+0x50>
   10014:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   10016:	1ad2      	subs	r2, r2, r3
   10018:	2300      	movs	r3, #0
   1001a:	69e1      	ldr	r1, [r4, #28]
   1001c:	4640      	mov	r0, r8
   1001e:	47b0      	blx	r6
   10020:	1c43      	adds	r3, r0, #1
   10022:	d03d      	beq.n	100a0 <__sflush_r+0xd8>
   10024:	89a3      	ldrh	r3, [r4, #12]
   10026:	4a3a      	ldr	r2, [pc, #232]	; (10110 <__sflush_r+0x148>)
   10028:	4013      	ands	r3, r2
   1002a:	2200      	movs	r2, #0
   1002c:	6062      	str	r2, [r4, #4]
   1002e:	6922      	ldr	r2, [r4, #16]
   10030:	b21b      	sxth	r3, r3
   10032:	81a3      	strh	r3, [r4, #12]
   10034:	6022      	str	r2, [r4, #0]
   10036:	04db      	lsls	r3, r3, #19
   10038:	d447      	bmi.n	100ca <__sflush_r+0x102>
   1003a:	4643      	mov	r3, r8
   1003c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1003e:	601d      	str	r5, [r3, #0]
   10040:	2900      	cmp	r1, #0
   10042:	d008      	beq.n	10056 <__sflush_r+0x8e>
   10044:	0023      	movs	r3, r4
   10046:	3340      	adds	r3, #64	; 0x40
   10048:	4299      	cmp	r1, r3
   1004a:	d002      	beq.n	10052 <__sflush_r+0x8a>
   1004c:	4640      	mov	r0, r8
   1004e:	f000 f967 	bl	10320 <_free_r>
   10052:	2300      	movs	r3, #0
   10054:	6323      	str	r3, [r4, #48]	; 0x30
   10056:	2000      	movs	r0, #0
   10058:	bc04      	pop	{r2}
   1005a:	4690      	mov	r8, r2
   1005c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1005e:	6926      	ldr	r6, [r4, #16]
   10060:	2e00      	cmp	r6, #0
   10062:	d0f8      	beq.n	10056 <__sflush_r+0x8e>
   10064:	6822      	ldr	r2, [r4, #0]
   10066:	6026      	str	r6, [r4, #0]
   10068:	1b95      	subs	r5, r2, r6
   1006a:	2200      	movs	r2, #0
   1006c:	079b      	lsls	r3, r3, #30
   1006e:	d100      	bne.n	10072 <__sflush_r+0xaa>
   10070:	6962      	ldr	r2, [r4, #20]
   10072:	60a2      	str	r2, [r4, #8]
   10074:	2d00      	cmp	r5, #0
   10076:	dc04      	bgt.n	10082 <__sflush_r+0xba>
   10078:	e7ed      	b.n	10056 <__sflush_r+0x8e>
   1007a:	1836      	adds	r6, r6, r0
   1007c:	1a2d      	subs	r5, r5, r0
   1007e:	2d00      	cmp	r5, #0
   10080:	dde9      	ble.n	10056 <__sflush_r+0x8e>
   10082:	002b      	movs	r3, r5
   10084:	0032      	movs	r2, r6
   10086:	69e1      	ldr	r1, [r4, #28]
   10088:	4640      	mov	r0, r8
   1008a:	6a67      	ldr	r7, [r4, #36]	; 0x24
   1008c:	47b8      	blx	r7
   1008e:	2800      	cmp	r0, #0
   10090:	dcf3      	bgt.n	1007a <__sflush_r+0xb2>
   10092:	2240      	movs	r2, #64	; 0x40
   10094:	2001      	movs	r0, #1
   10096:	89a3      	ldrh	r3, [r4, #12]
   10098:	4240      	negs	r0, r0
   1009a:	4313      	orrs	r3, r2
   1009c:	81a3      	strh	r3, [r4, #12]
   1009e:	e7db      	b.n	10058 <__sflush_r+0x90>
   100a0:	4643      	mov	r3, r8
   100a2:	6819      	ldr	r1, [r3, #0]
   100a4:	291d      	cmp	r1, #29
   100a6:	d8f4      	bhi.n	10092 <__sflush_r+0xca>
   100a8:	4b1a      	ldr	r3, [pc, #104]	; (10114 <__sflush_r+0x14c>)
   100aa:	2201      	movs	r2, #1
   100ac:	40cb      	lsrs	r3, r1
   100ae:	439a      	bics	r2, r3
   100b0:	d1ef      	bne.n	10092 <__sflush_r+0xca>
   100b2:	89a3      	ldrh	r3, [r4, #12]
   100b4:	4e16      	ldr	r6, [pc, #88]	; (10110 <__sflush_r+0x148>)
   100b6:	6062      	str	r2, [r4, #4]
   100b8:	4033      	ands	r3, r6
   100ba:	6922      	ldr	r2, [r4, #16]
   100bc:	b21b      	sxth	r3, r3
   100be:	81a3      	strh	r3, [r4, #12]
   100c0:	6022      	str	r2, [r4, #0]
   100c2:	04db      	lsls	r3, r3, #19
   100c4:	d5b9      	bpl.n	1003a <__sflush_r+0x72>
   100c6:	2900      	cmp	r1, #0
   100c8:	d1b7      	bne.n	1003a <__sflush_r+0x72>
   100ca:	6520      	str	r0, [r4, #80]	; 0x50
   100cc:	e7b5      	b.n	1003a <__sflush_r+0x72>
   100ce:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   100d0:	2a00      	cmp	r2, #0
   100d2:	dd00      	ble.n	100d6 <__sflush_r+0x10e>
   100d4:	e78a      	b.n	ffec <__sflush_r+0x24>
   100d6:	e7be      	b.n	10056 <__sflush_r+0x8e>
   100d8:	2200      	movs	r2, #0
   100da:	2301      	movs	r3, #1
   100dc:	69e1      	ldr	r1, [r4, #28]
   100de:	4640      	mov	r0, r8
   100e0:	47b0      	blx	r6
   100e2:	0002      	movs	r2, r0
   100e4:	1c43      	adds	r3, r0, #1
   100e6:	d002      	beq.n	100ee <__sflush_r+0x126>
   100e8:	89a3      	ldrh	r3, [r4, #12]
   100ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   100ec:	e78b      	b.n	10006 <__sflush_r+0x3e>
   100ee:	4643      	mov	r3, r8
   100f0:	681b      	ldr	r3, [r3, #0]
   100f2:	2b00      	cmp	r3, #0
   100f4:	d0f8      	beq.n	100e8 <__sflush_r+0x120>
   100f6:	2b1d      	cmp	r3, #29
   100f8:	d001      	beq.n	100fe <__sflush_r+0x136>
   100fa:	2b16      	cmp	r3, #22
   100fc:	d103      	bne.n	10106 <__sflush_r+0x13e>
   100fe:	4643      	mov	r3, r8
   10100:	2000      	movs	r0, #0
   10102:	601d      	str	r5, [r3, #0]
   10104:	e7a8      	b.n	10058 <__sflush_r+0x90>
   10106:	2140      	movs	r1, #64	; 0x40
   10108:	89a3      	ldrh	r3, [r4, #12]
   1010a:	430b      	orrs	r3, r1
   1010c:	81a3      	strh	r3, [r4, #12]
   1010e:	e7a3      	b.n	10058 <__sflush_r+0x90>
   10110:	fffff7ff 	.word	0xfffff7ff
   10114:	20400001 	.word	0x20400001

00010118 <_fflush_r>:
   10118:	b570      	push	{r4, r5, r6, lr}
   1011a:	0005      	movs	r5, r0
   1011c:	000c      	movs	r4, r1
   1011e:	2800      	cmp	r0, #0
   10120:	d002      	beq.n	10128 <_fflush_r+0x10>
   10122:	6b83      	ldr	r3, [r0, #56]	; 0x38
   10124:	2b00      	cmp	r3, #0
   10126:	d016      	beq.n	10156 <_fflush_r+0x3e>
   10128:	220c      	movs	r2, #12
   1012a:	5ea3      	ldrsh	r3, [r4, r2]
   1012c:	2600      	movs	r6, #0
   1012e:	2b00      	cmp	r3, #0
   10130:	d00f      	beq.n	10152 <_fflush_r+0x3a>
   10132:	6e62      	ldr	r2, [r4, #100]	; 0x64
   10134:	07d2      	lsls	r2, r2, #31
   10136:	d401      	bmi.n	1013c <_fflush_r+0x24>
   10138:	059b      	lsls	r3, r3, #22
   1013a:	d513      	bpl.n	10164 <_fflush_r+0x4c>
   1013c:	0021      	movs	r1, r4
   1013e:	0028      	movs	r0, r5
   10140:	f7ff ff42 	bl	ffc8 <__sflush_r>
   10144:	6e63      	ldr	r3, [r4, #100]	; 0x64
   10146:	0006      	movs	r6, r0
   10148:	07db      	lsls	r3, r3, #31
   1014a:	d402      	bmi.n	10152 <_fflush_r+0x3a>
   1014c:	89a3      	ldrh	r3, [r4, #12]
   1014e:	059b      	lsls	r3, r3, #22
   10150:	d504      	bpl.n	1015c <_fflush_r+0x44>
   10152:	0030      	movs	r0, r6
   10154:	bd70      	pop	{r4, r5, r6, pc}
   10156:	f000 f839 	bl	101cc <__sinit>
   1015a:	e7e5      	b.n	10128 <_fflush_r+0x10>
   1015c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1015e:	f000 fb79 	bl	10854 <__retarget_lock_release_recursive>
   10162:	e7f6      	b.n	10152 <_fflush_r+0x3a>
   10164:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10166:	f000 fb73 	bl	10850 <__retarget_lock_acquire_recursive>
   1016a:	e7e7      	b.n	1013c <_fflush_r+0x24>

0001016c <_cleanup_r>:
   1016c:	b510      	push	{r4, lr}
   1016e:	4902      	ldr	r1, [pc, #8]	; (10178 <_cleanup_r+0xc>)
   10170:	f000 fb36 	bl	107e0 <_fwalk_reent>
   10174:	bd10      	pop	{r4, pc}
   10176:	46c0      	nop			; (mov r8, r8)
   10178:	00011c0d 	.word	0x00011c0d

0001017c <std.isra.0>:
   1017c:	2300      	movs	r3, #0
   1017e:	b510      	push	{r4, lr}
   10180:	0004      	movs	r4, r0
   10182:	6003      	str	r3, [r0, #0]
   10184:	6043      	str	r3, [r0, #4]
   10186:	6083      	str	r3, [r0, #8]
   10188:	8181      	strh	r1, [r0, #12]
   1018a:	6643      	str	r3, [r0, #100]	; 0x64
   1018c:	81c2      	strh	r2, [r0, #14]
   1018e:	6103      	str	r3, [r0, #16]
   10190:	6143      	str	r3, [r0, #20]
   10192:	6183      	str	r3, [r0, #24]
   10194:	2208      	movs	r2, #8
   10196:	2100      	movs	r1, #0
   10198:	305c      	adds	r0, #92	; 0x5c
   1019a:	f7fd f83d 	bl	d218 <memset>
   1019e:	0020      	movs	r0, r4
   101a0:	4b06      	ldr	r3, [pc, #24]	; (101bc <std.isra.0+0x40>)
   101a2:	61e4      	str	r4, [r4, #28]
   101a4:	6223      	str	r3, [r4, #32]
   101a6:	4b06      	ldr	r3, [pc, #24]	; (101c0 <std.isra.0+0x44>)
   101a8:	3058      	adds	r0, #88	; 0x58
   101aa:	6263      	str	r3, [r4, #36]	; 0x24
   101ac:	4b05      	ldr	r3, [pc, #20]	; (101c4 <std.isra.0+0x48>)
   101ae:	62a3      	str	r3, [r4, #40]	; 0x28
   101b0:	4b05      	ldr	r3, [pc, #20]	; (101c8 <std.isra.0+0x4c>)
   101b2:	62e3      	str	r3, [r4, #44]	; 0x2c
   101b4:	f000 fb48 	bl	10848 <__retarget_lock_init_recursive>
   101b8:	bd10      	pop	{r4, pc}
   101ba:	46c0      	nop			; (mov r8, r8)
   101bc:	00011a35 	.word	0x00011a35
   101c0:	00011a5d 	.word	0x00011a5d
   101c4:	00011a99 	.word	0x00011a99
   101c8:	00011ac5 	.word	0x00011ac5

000101cc <__sinit>:
   101cc:	b570      	push	{r4, r5, r6, lr}
   101ce:	0004      	movs	r4, r0
   101d0:	4d14      	ldr	r5, [pc, #80]	; (10224 <__sinit+0x58>)
   101d2:	0028      	movs	r0, r5
   101d4:	f000 fb3c 	bl	10850 <__retarget_lock_acquire_recursive>
   101d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   101da:	2b00      	cmp	r3, #0
   101dc:	d11d      	bne.n	1021a <__sinit+0x4e>
   101de:	4a12      	ldr	r2, [pc, #72]	; (10228 <__sinit+0x5c>)
   101e0:	2104      	movs	r1, #4
   101e2:	63e2      	str	r2, [r4, #60]	; 0x3c
   101e4:	22b8      	movs	r2, #184	; 0xb8
   101e6:	0092      	lsls	r2, r2, #2
   101e8:	50a3      	str	r3, [r4, r2]
   101ea:	23b9      	movs	r3, #185	; 0xb9
   101ec:	2203      	movs	r2, #3
   101ee:	009b      	lsls	r3, r3, #2
   101f0:	50e2      	str	r2, [r4, r3]
   101f2:	3308      	adds	r3, #8
   101f4:	18e2      	adds	r2, r4, r3
   101f6:	3b04      	subs	r3, #4
   101f8:	50e2      	str	r2, [r4, r3]
   101fa:	6860      	ldr	r0, [r4, #4]
   101fc:	2200      	movs	r2, #0
   101fe:	f7ff ffbd 	bl	1017c <std.isra.0>
   10202:	2201      	movs	r2, #1
   10204:	2109      	movs	r1, #9
   10206:	68a0      	ldr	r0, [r4, #8]
   10208:	f7ff ffb8 	bl	1017c <std.isra.0>
   1020c:	2202      	movs	r2, #2
   1020e:	2112      	movs	r1, #18
   10210:	68e0      	ldr	r0, [r4, #12]
   10212:	f7ff ffb3 	bl	1017c <std.isra.0>
   10216:	2301      	movs	r3, #1
   10218:	63a3      	str	r3, [r4, #56]	; 0x38
   1021a:	0028      	movs	r0, r5
   1021c:	f000 fb1a 	bl	10854 <__retarget_lock_release_recursive>
   10220:	bd70      	pop	{r4, r5, r6, pc}
   10222:	46c0      	nop			; (mov r8, r8)
   10224:	200012a0 	.word	0x200012a0
   10228:	0001016d 	.word	0x0001016d

0001022c <__sfp_lock_acquire>:
   1022c:	b510      	push	{r4, lr}
   1022e:	4802      	ldr	r0, [pc, #8]	; (10238 <__sfp_lock_acquire+0xc>)
   10230:	f000 fb0e 	bl	10850 <__retarget_lock_acquire_recursive>
   10234:	bd10      	pop	{r4, pc}
   10236:	46c0      	nop			; (mov r8, r8)
   10238:	200012b4 	.word	0x200012b4

0001023c <__sfp_lock_release>:
   1023c:	b510      	push	{r4, lr}
   1023e:	4802      	ldr	r0, [pc, #8]	; (10248 <__sfp_lock_release+0xc>)
   10240:	f000 fb08 	bl	10854 <__retarget_lock_release_recursive>
   10244:	bd10      	pop	{r4, pc}
   10246:	46c0      	nop			; (mov r8, r8)
   10248:	200012b4 	.word	0x200012b4

0001024c <__libc_fini_array>:
   1024c:	b570      	push	{r4, r5, r6, lr}
   1024e:	4b09      	ldr	r3, [pc, #36]	; (10274 <__libc_fini_array+0x28>)
   10250:	4c09      	ldr	r4, [pc, #36]	; (10278 <__libc_fini_array+0x2c>)
   10252:	1ae4      	subs	r4, r4, r3
   10254:	10a4      	asrs	r4, r4, #2
   10256:	d009      	beq.n	1026c <__libc_fini_array+0x20>
   10258:	4a08      	ldr	r2, [pc, #32]	; (1027c <__libc_fini_array+0x30>)
   1025a:	18a5      	adds	r5, r4, r2
   1025c:	00ad      	lsls	r5, r5, #2
   1025e:	18ed      	adds	r5, r5, r3
   10260:	682b      	ldr	r3, [r5, #0]
   10262:	3c01      	subs	r4, #1
   10264:	4798      	blx	r3
   10266:	3d04      	subs	r5, #4
   10268:	2c00      	cmp	r4, #0
   1026a:	d1f9      	bne.n	10260 <__libc_fini_array+0x14>
   1026c:	f002 fb02 	bl	12874 <_fini>
   10270:	bd70      	pop	{r4, r5, r6, pc}
   10272:	46c0      	nop			; (mov r8, r8)
   10274:	00012880 	.word	0x00012880
   10278:	00012884 	.word	0x00012884
   1027c:	3fffffff 	.word	0x3fffffff

00010280 <_malloc_trim_r>:
   10280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10282:	000c      	movs	r4, r1
   10284:	0006      	movs	r6, r0
   10286:	f000 fead 	bl	10fe4 <__malloc_lock>
   1028a:	4f20      	ldr	r7, [pc, #128]	; (1030c <_malloc_trim_r+0x8c>)
   1028c:	68bb      	ldr	r3, [r7, #8]
   1028e:	685d      	ldr	r5, [r3, #4]
   10290:	2303      	movs	r3, #3
   10292:	439d      	bics	r5, r3
   10294:	4b1e      	ldr	r3, [pc, #120]	; (10310 <_malloc_trim_r+0x90>)
   10296:	1b2c      	subs	r4, r5, r4
   10298:	469c      	mov	ip, r3
   1029a:	4464      	add	r4, ip
   1029c:	0b24      	lsrs	r4, r4, #12
   1029e:	4b1d      	ldr	r3, [pc, #116]	; (10314 <_malloc_trim_r+0x94>)
   102a0:	3c01      	subs	r4, #1
   102a2:	0324      	lsls	r4, r4, #12
   102a4:	429c      	cmp	r4, r3
   102a6:	dd07      	ble.n	102b8 <_malloc_trim_r+0x38>
   102a8:	2100      	movs	r1, #0
   102aa:	0030      	movs	r0, r6
   102ac:	f001 fbb0 	bl	11a10 <_sbrk_r>
   102b0:	68bb      	ldr	r3, [r7, #8]
   102b2:	195b      	adds	r3, r3, r5
   102b4:	4298      	cmp	r0, r3
   102b6:	d004      	beq.n	102c2 <_malloc_trim_r+0x42>
   102b8:	0030      	movs	r0, r6
   102ba:	f000 fe9b 	bl	10ff4 <__malloc_unlock>
   102be:	2000      	movs	r0, #0
   102c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   102c2:	4261      	negs	r1, r4
   102c4:	0030      	movs	r0, r6
   102c6:	f001 fba3 	bl	11a10 <_sbrk_r>
   102ca:	1c43      	adds	r3, r0, #1
   102cc:	d00d      	beq.n	102ea <_malloc_trim_r+0x6a>
   102ce:	2201      	movs	r2, #1
   102d0:	68bb      	ldr	r3, [r7, #8]
   102d2:	1b2d      	subs	r5, r5, r4
   102d4:	4315      	orrs	r5, r2
   102d6:	605d      	str	r5, [r3, #4]
   102d8:	4b0f      	ldr	r3, [pc, #60]	; (10318 <_malloc_trim_r+0x98>)
   102da:	0030      	movs	r0, r6
   102dc:	681a      	ldr	r2, [r3, #0]
   102de:	1b14      	subs	r4, r2, r4
   102e0:	601c      	str	r4, [r3, #0]
   102e2:	f000 fe87 	bl	10ff4 <__malloc_unlock>
   102e6:	2001      	movs	r0, #1
   102e8:	e7ea      	b.n	102c0 <_malloc_trim_r+0x40>
   102ea:	2100      	movs	r1, #0
   102ec:	0030      	movs	r0, r6
   102ee:	f001 fb8f 	bl	11a10 <_sbrk_r>
   102f2:	68ba      	ldr	r2, [r7, #8]
   102f4:	1a83      	subs	r3, r0, r2
   102f6:	2b0f      	cmp	r3, #15
   102f8:	ddde      	ble.n	102b8 <_malloc_trim_r+0x38>
   102fa:	4908      	ldr	r1, [pc, #32]	; (1031c <_malloc_trim_r+0x9c>)
   102fc:	6809      	ldr	r1, [r1, #0]
   102fe:	1a40      	subs	r0, r0, r1
   10300:	4905      	ldr	r1, [pc, #20]	; (10318 <_malloc_trim_r+0x98>)
   10302:	6008      	str	r0, [r1, #0]
   10304:	2101      	movs	r1, #1
   10306:	430b      	orrs	r3, r1
   10308:	6053      	str	r3, [r2, #4]
   1030a:	e7d5      	b.n	102b8 <_malloc_trim_r+0x38>
   1030c:	200004b4 	.word	0x200004b4
   10310:	00000fef 	.word	0x00000fef
   10314:	00000fff 	.word	0x00000fff
   10318:	20001220 	.word	0x20001220
   1031c:	200008bc 	.word	0x200008bc

00010320 <_free_r>:
   10320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10322:	0004      	movs	r4, r0
   10324:	1e0d      	subs	r5, r1, #0
   10326:	d03c      	beq.n	103a2 <_free_r+0x82>
   10328:	f000 fe5c 	bl	10fe4 <__malloc_lock>
   1032c:	0029      	movs	r1, r5
   1032e:	3908      	subs	r1, #8
   10330:	6848      	ldr	r0, [r1, #4]
   10332:	2301      	movs	r3, #1
   10334:	0005      	movs	r5, r0
   10336:	2603      	movs	r6, #3
   10338:	439d      	bics	r5, r3
   1033a:	194a      	adds	r2, r1, r5
   1033c:	469c      	mov	ip, r3
   1033e:	4f61      	ldr	r7, [pc, #388]	; (104c4 <_free_r+0x1a4>)
   10340:	6853      	ldr	r3, [r2, #4]
   10342:	43b3      	bics	r3, r6
   10344:	68be      	ldr	r6, [r7, #8]
   10346:	42b2      	cmp	r2, r6
   10348:	d056      	beq.n	103f8 <_free_r+0xd8>
   1034a:	4666      	mov	r6, ip
   1034c:	6053      	str	r3, [r2, #4]
   1034e:	4206      	tst	r6, r0
   10350:	d10a      	bne.n	10368 <_free_r+0x48>
   10352:	003e      	movs	r6, r7
   10354:	6808      	ldr	r0, [r1, #0]
   10356:	3608      	adds	r6, #8
   10358:	1a09      	subs	r1, r1, r0
   1035a:	182d      	adds	r5, r5, r0
   1035c:	6888      	ldr	r0, [r1, #8]
   1035e:	42b0      	cmp	r0, r6
   10360:	d065      	beq.n	1042e <_free_r+0x10e>
   10362:	68ce      	ldr	r6, [r1, #12]
   10364:	60c6      	str	r6, [r0, #12]
   10366:	60b0      	str	r0, [r6, #8]
   10368:	2001      	movs	r0, #1
   1036a:	18d6      	adds	r6, r2, r3
   1036c:	6876      	ldr	r6, [r6, #4]
   1036e:	4206      	tst	r6, r0
   10370:	d033      	beq.n	103da <_free_r+0xba>
   10372:	4b55      	ldr	r3, [pc, #340]	; (104c8 <_free_r+0x1a8>)
   10374:	4328      	orrs	r0, r5
   10376:	6048      	str	r0, [r1, #4]
   10378:	514d      	str	r5, [r1, r5]
   1037a:	429d      	cmp	r5, r3
   1037c:	d812      	bhi.n	103a4 <_free_r+0x84>
   1037e:	08ed      	lsrs	r5, r5, #3
   10380:	3bff      	subs	r3, #255	; 0xff
   10382:	10aa      	asrs	r2, r5, #2
   10384:	3bff      	subs	r3, #255	; 0xff
   10386:	4093      	lsls	r3, r2
   10388:	687a      	ldr	r2, [r7, #4]
   1038a:	00ed      	lsls	r5, r5, #3
   1038c:	4313      	orrs	r3, r2
   1038e:	607b      	str	r3, [r7, #4]
   10390:	19ef      	adds	r7, r5, r7
   10392:	68bb      	ldr	r3, [r7, #8]
   10394:	60cf      	str	r7, [r1, #12]
   10396:	608b      	str	r3, [r1, #8]
   10398:	60b9      	str	r1, [r7, #8]
   1039a:	60d9      	str	r1, [r3, #12]
   1039c:	0020      	movs	r0, r4
   1039e:	f000 fe29 	bl	10ff4 <__malloc_unlock>
   103a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   103a4:	0a68      	lsrs	r0, r5, #9
   103a6:	2804      	cmp	r0, #4
   103a8:	d850      	bhi.n	1044c <_free_r+0x12c>
   103aa:	09a8      	lsrs	r0, r5, #6
   103ac:	0002      	movs	r2, r0
   103ae:	3039      	adds	r0, #57	; 0x39
   103b0:	3238      	adds	r2, #56	; 0x38
   103b2:	00c0      	lsls	r0, r0, #3
   103b4:	1838      	adds	r0, r7, r0
   103b6:	3808      	subs	r0, #8
   103b8:	6883      	ldr	r3, [r0, #8]
   103ba:	2603      	movs	r6, #3
   103bc:	4298      	cmp	r0, r3
   103be:	d04c      	beq.n	1045a <_free_r+0x13a>
   103c0:	685a      	ldr	r2, [r3, #4]
   103c2:	43b2      	bics	r2, r6
   103c4:	4295      	cmp	r5, r2
   103c6:	d230      	bcs.n	1042a <_free_r+0x10a>
   103c8:	689b      	ldr	r3, [r3, #8]
   103ca:	4298      	cmp	r0, r3
   103cc:	d1f8      	bne.n	103c0 <_free_r+0xa0>
   103ce:	68c3      	ldr	r3, [r0, #12]
   103d0:	60cb      	str	r3, [r1, #12]
   103d2:	6088      	str	r0, [r1, #8]
   103d4:	6099      	str	r1, [r3, #8]
   103d6:	60c1      	str	r1, [r0, #12]
   103d8:	e7e0      	b.n	1039c <_free_r+0x7c>
   103da:	18ed      	adds	r5, r5, r3
   103dc:	4e3b      	ldr	r6, [pc, #236]	; (104cc <_free_r+0x1ac>)
   103de:	6893      	ldr	r3, [r2, #8]
   103e0:	42b3      	cmp	r3, r6
   103e2:	d042      	beq.n	1046a <_free_r+0x14a>
   103e4:	68d2      	ldr	r2, [r2, #12]
   103e6:	4328      	orrs	r0, r5
   103e8:	60da      	str	r2, [r3, #12]
   103ea:	6093      	str	r3, [r2, #8]
   103ec:	4b36      	ldr	r3, [pc, #216]	; (104c8 <_free_r+0x1a8>)
   103ee:	6048      	str	r0, [r1, #4]
   103f0:	514d      	str	r5, [r1, r5]
   103f2:	429d      	cmp	r5, r3
   103f4:	d8d6      	bhi.n	103a4 <_free_r+0x84>
   103f6:	e7c2      	b.n	1037e <_free_r+0x5e>
   103f8:	4662      	mov	r2, ip
   103fa:	18eb      	adds	r3, r5, r3
   103fc:	4202      	tst	r2, r0
   103fe:	d106      	bne.n	1040e <_free_r+0xee>
   10400:	680a      	ldr	r2, [r1, #0]
   10402:	1a89      	subs	r1, r1, r2
   10404:	6888      	ldr	r0, [r1, #8]
   10406:	189b      	adds	r3, r3, r2
   10408:	68ca      	ldr	r2, [r1, #12]
   1040a:	60c2      	str	r2, [r0, #12]
   1040c:	6090      	str	r0, [r2, #8]
   1040e:	2201      	movs	r2, #1
   10410:	431a      	orrs	r2, r3
   10412:	604a      	str	r2, [r1, #4]
   10414:	4a2e      	ldr	r2, [pc, #184]	; (104d0 <_free_r+0x1b0>)
   10416:	60b9      	str	r1, [r7, #8]
   10418:	6812      	ldr	r2, [r2, #0]
   1041a:	4293      	cmp	r3, r2
   1041c:	d3be      	bcc.n	1039c <_free_r+0x7c>
   1041e:	4b2d      	ldr	r3, [pc, #180]	; (104d4 <_free_r+0x1b4>)
   10420:	0020      	movs	r0, r4
   10422:	6819      	ldr	r1, [r3, #0]
   10424:	f7ff ff2c 	bl	10280 <_malloc_trim_r>
   10428:	e7b8      	b.n	1039c <_free_r+0x7c>
   1042a:	0018      	movs	r0, r3
   1042c:	e7cf      	b.n	103ce <_free_r+0xae>
   1042e:	4666      	mov	r6, ip
   10430:	18d0      	adds	r0, r2, r3
   10432:	6840      	ldr	r0, [r0, #4]
   10434:	4230      	tst	r0, r6
   10436:	d13f      	bne.n	104b8 <_free_r+0x198>
   10438:	6890      	ldr	r0, [r2, #8]
   1043a:	195d      	adds	r5, r3, r5
   1043c:	68d3      	ldr	r3, [r2, #12]
   1043e:	60c3      	str	r3, [r0, #12]
   10440:	6098      	str	r0, [r3, #8]
   10442:	4663      	mov	r3, ip
   10444:	432b      	orrs	r3, r5
   10446:	604b      	str	r3, [r1, #4]
   10448:	514d      	str	r5, [r1, r5]
   1044a:	e7a7      	b.n	1039c <_free_r+0x7c>
   1044c:	2814      	cmp	r0, #20
   1044e:	d814      	bhi.n	1047a <_free_r+0x15a>
   10450:	0002      	movs	r2, r0
   10452:	305c      	adds	r0, #92	; 0x5c
   10454:	325b      	adds	r2, #91	; 0x5b
   10456:	00c0      	lsls	r0, r0, #3
   10458:	e7ac      	b.n	103b4 <_free_r+0x94>
   1045a:	2301      	movs	r3, #1
   1045c:	1092      	asrs	r2, r2, #2
   1045e:	4093      	lsls	r3, r2
   10460:	687a      	ldr	r2, [r7, #4]
   10462:	4313      	orrs	r3, r2
   10464:	607b      	str	r3, [r7, #4]
   10466:	0003      	movs	r3, r0
   10468:	e7b2      	b.n	103d0 <_free_r+0xb0>
   1046a:	4328      	orrs	r0, r5
   1046c:	60d9      	str	r1, [r3, #12]
   1046e:	6099      	str	r1, [r3, #8]
   10470:	60cb      	str	r3, [r1, #12]
   10472:	608b      	str	r3, [r1, #8]
   10474:	6048      	str	r0, [r1, #4]
   10476:	514d      	str	r5, [r1, r5]
   10478:	e790      	b.n	1039c <_free_r+0x7c>
   1047a:	2854      	cmp	r0, #84	; 0x54
   1047c:	d805      	bhi.n	1048a <_free_r+0x16a>
   1047e:	0b28      	lsrs	r0, r5, #12
   10480:	0002      	movs	r2, r0
   10482:	306f      	adds	r0, #111	; 0x6f
   10484:	326e      	adds	r2, #110	; 0x6e
   10486:	00c0      	lsls	r0, r0, #3
   10488:	e794      	b.n	103b4 <_free_r+0x94>
   1048a:	22aa      	movs	r2, #170	; 0xaa
   1048c:	0052      	lsls	r2, r2, #1
   1048e:	4290      	cmp	r0, r2
   10490:	d805      	bhi.n	1049e <_free_r+0x17e>
   10492:	0be8      	lsrs	r0, r5, #15
   10494:	0002      	movs	r2, r0
   10496:	3078      	adds	r0, #120	; 0x78
   10498:	3277      	adds	r2, #119	; 0x77
   1049a:	00c0      	lsls	r0, r0, #3
   1049c:	e78a      	b.n	103b4 <_free_r+0x94>
   1049e:	4a0e      	ldr	r2, [pc, #56]	; (104d8 <_free_r+0x1b8>)
   104a0:	4290      	cmp	r0, r2
   104a2:	d805      	bhi.n	104b0 <_free_r+0x190>
   104a4:	0ca8      	lsrs	r0, r5, #18
   104a6:	0002      	movs	r2, r0
   104a8:	307d      	adds	r0, #125	; 0x7d
   104aa:	327c      	adds	r2, #124	; 0x7c
   104ac:	00c0      	lsls	r0, r0, #3
   104ae:	e781      	b.n	103b4 <_free_r+0x94>
   104b0:	20fe      	movs	r0, #254	; 0xfe
   104b2:	227e      	movs	r2, #126	; 0x7e
   104b4:	0080      	lsls	r0, r0, #2
   104b6:	e77d      	b.n	103b4 <_free_r+0x94>
   104b8:	4663      	mov	r3, ip
   104ba:	432b      	orrs	r3, r5
   104bc:	604b      	str	r3, [r1, #4]
   104be:	6015      	str	r5, [r2, #0]
   104c0:	e76c      	b.n	1039c <_free_r+0x7c>
   104c2:	46c0      	nop			; (mov r8, r8)
   104c4:	200004b4 	.word	0x200004b4
   104c8:	000001ff 	.word	0x000001ff
   104cc:	200004bc 	.word	0x200004bc
   104d0:	200008c0 	.word	0x200008c0
   104d4:	20001250 	.word	0x20001250
   104d8:	00000554 	.word	0x00000554

000104dc <__sfvwrite_r>:
   104dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   104de:	464e      	mov	r6, r9
   104e0:	46de      	mov	lr, fp
   104e2:	4657      	mov	r7, sl
   104e4:	4645      	mov	r5, r8
   104e6:	b5e0      	push	{r5, r6, r7, lr}
   104e8:	6893      	ldr	r3, [r2, #8]
   104ea:	b083      	sub	sp, #12
   104ec:	9000      	str	r0, [sp, #0]
   104ee:	000c      	movs	r4, r1
   104f0:	0016      	movs	r6, r2
   104f2:	2b00      	cmp	r3, #0
   104f4:	d025      	beq.n	10542 <__sfvwrite_r+0x66>
   104f6:	898b      	ldrh	r3, [r1, #12]
   104f8:	071a      	lsls	r2, r3, #28
   104fa:	d52a      	bpl.n	10552 <__sfvwrite_r+0x76>
   104fc:	690a      	ldr	r2, [r1, #16]
   104fe:	2a00      	cmp	r2, #0
   10500:	d027      	beq.n	10552 <__sfvwrite_r+0x76>
   10502:	6832      	ldr	r2, [r6, #0]
   10504:	4693      	mov	fp, r2
   10506:	079a      	lsls	r2, r3, #30
   10508:	d52f      	bpl.n	1056a <__sfvwrite_r+0x8e>
   1050a:	4bb2      	ldr	r3, [pc, #712]	; (107d4 <__sfvwrite_r+0x2f8>)
   1050c:	2700      	movs	r7, #0
   1050e:	2500      	movs	r5, #0
   10510:	4698      	mov	r8, r3
   10512:	46b1      	mov	r9, r6
   10514:	2d00      	cmp	r5, #0
   10516:	d100      	bne.n	1051a <__sfvwrite_r+0x3e>
   10518:	e072      	b.n	10600 <__sfvwrite_r+0x124>
   1051a:	002b      	movs	r3, r5
   1051c:	4545      	cmp	r5, r8
   1051e:	d900      	bls.n	10522 <__sfvwrite_r+0x46>
   10520:	4bac      	ldr	r3, [pc, #688]	; (107d4 <__sfvwrite_r+0x2f8>)
   10522:	003a      	movs	r2, r7
   10524:	69e1      	ldr	r1, [r4, #28]
   10526:	9800      	ldr	r0, [sp, #0]
   10528:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1052a:	47b0      	blx	r6
   1052c:	2800      	cmp	r0, #0
   1052e:	dc00      	bgt.n	10532 <__sfvwrite_r+0x56>
   10530:	e073      	b.n	1061a <__sfvwrite_r+0x13e>
   10532:	464b      	mov	r3, r9
   10534:	689b      	ldr	r3, [r3, #8]
   10536:	183f      	adds	r7, r7, r0
   10538:	1a2d      	subs	r5, r5, r0
   1053a:	1a18      	subs	r0, r3, r0
   1053c:	464b      	mov	r3, r9
   1053e:	6098      	str	r0, [r3, #8]
   10540:	d1e8      	bne.n	10514 <__sfvwrite_r+0x38>
   10542:	2000      	movs	r0, #0
   10544:	b003      	add	sp, #12
   10546:	bc3c      	pop	{r2, r3, r4, r5}
   10548:	4690      	mov	r8, r2
   1054a:	4699      	mov	r9, r3
   1054c:	46a2      	mov	sl, r4
   1054e:	46ab      	mov	fp, r5
   10550:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10552:	0021      	movs	r1, r4
   10554:	9800      	ldr	r0, [sp, #0]
   10556:	f7fe fbd1 	bl	ecfc <__swsetup_r>
   1055a:	2800      	cmp	r0, #0
   1055c:	d000      	beq.n	10560 <__sfvwrite_r+0x84>
   1055e:	e130      	b.n	107c2 <__sfvwrite_r+0x2e6>
   10560:	6832      	ldr	r2, [r6, #0]
   10562:	89a3      	ldrh	r3, [r4, #12]
   10564:	4693      	mov	fp, r2
   10566:	079a      	lsls	r2, r3, #30
   10568:	d4cf      	bmi.n	1050a <__sfvwrite_r+0x2e>
   1056a:	07da      	lsls	r2, r3, #31
   1056c:	d55d      	bpl.n	1062a <__sfvwrite_r+0x14e>
   1056e:	2300      	movs	r3, #0
   10570:	2000      	movs	r0, #0
   10572:	469a      	mov	sl, r3
   10574:	2700      	movs	r7, #0
   10576:	001d      	movs	r5, r3
   10578:	46b1      	mov	r9, r6
   1057a:	e029      	b.n	105d0 <__sfvwrite_r+0xf4>
   1057c:	2800      	cmp	r0, #0
   1057e:	d033      	beq.n	105e8 <__sfvwrite_r+0x10c>
   10580:	46a8      	mov	r8, r5
   10582:	42bd      	cmp	r5, r7
   10584:	d900      	bls.n	10588 <__sfvwrite_r+0xac>
   10586:	46b8      	mov	r8, r7
   10588:	6820      	ldr	r0, [r4, #0]
   1058a:	6922      	ldr	r2, [r4, #16]
   1058c:	4646      	mov	r6, r8
   1058e:	6963      	ldr	r3, [r4, #20]
   10590:	4290      	cmp	r0, r2
   10592:	d907      	bls.n	105a4 <__sfvwrite_r+0xc8>
   10594:	68a2      	ldr	r2, [r4, #8]
   10596:	4694      	mov	ip, r2
   10598:	449c      	add	ip, r3
   1059a:	4662      	mov	r2, ip
   1059c:	9201      	str	r2, [sp, #4]
   1059e:	45e0      	cmp	r8, ip
   105a0:	dd00      	ble.n	105a4 <__sfvwrite_r+0xc8>
   105a2:	e0e9      	b.n	10778 <__sfvwrite_r+0x29c>
   105a4:	4598      	cmp	r8, r3
   105a6:	da00      	bge.n	105aa <__sfvwrite_r+0xce>
   105a8:	e08f      	b.n	106ca <__sfvwrite_r+0x1ee>
   105aa:	6a66      	ldr	r6, [r4, #36]	; 0x24
   105ac:	4652      	mov	r2, sl
   105ae:	69e1      	ldr	r1, [r4, #28]
   105b0:	9800      	ldr	r0, [sp, #0]
   105b2:	47b0      	blx	r6
   105b4:	1e06      	subs	r6, r0, #0
   105b6:	dd30      	ble.n	1061a <__sfvwrite_r+0x13e>
   105b8:	1bad      	subs	r5, r5, r6
   105ba:	2001      	movs	r0, #1
   105bc:	2d00      	cmp	r5, #0
   105be:	d026      	beq.n	1060e <__sfvwrite_r+0x132>
   105c0:	464b      	mov	r3, r9
   105c2:	689b      	ldr	r3, [r3, #8]
   105c4:	44b2      	add	sl, r6
   105c6:	1bbf      	subs	r7, r7, r6
   105c8:	1b9e      	subs	r6, r3, r6
   105ca:	464b      	mov	r3, r9
   105cc:	609e      	str	r6, [r3, #8]
   105ce:	d0b8      	beq.n	10542 <__sfvwrite_r+0x66>
   105d0:	2f00      	cmp	r7, #0
   105d2:	d1d3      	bne.n	1057c <__sfvwrite_r+0xa0>
   105d4:	465b      	mov	r3, fp
   105d6:	681b      	ldr	r3, [r3, #0]
   105d8:	469a      	mov	sl, r3
   105da:	465b      	mov	r3, fp
   105dc:	685f      	ldr	r7, [r3, #4]
   105de:	2308      	movs	r3, #8
   105e0:	469c      	mov	ip, r3
   105e2:	44e3      	add	fp, ip
   105e4:	2f00      	cmp	r7, #0
   105e6:	d0f5      	beq.n	105d4 <__sfvwrite_r+0xf8>
   105e8:	003a      	movs	r2, r7
   105ea:	210a      	movs	r1, #10
   105ec:	4650      	mov	r0, sl
   105ee:	f000 fc69 	bl	10ec4 <memchr>
   105f2:	2800      	cmp	r0, #0
   105f4:	d100      	bne.n	105f8 <__sfvwrite_r+0x11c>
   105f6:	e0e2      	b.n	107be <__sfvwrite_r+0x2e2>
   105f8:	4653      	mov	r3, sl
   105fa:	3001      	adds	r0, #1
   105fc:	1ac5      	subs	r5, r0, r3
   105fe:	e7bf      	b.n	10580 <__sfvwrite_r+0xa4>
   10600:	465b      	mov	r3, fp
   10602:	681f      	ldr	r7, [r3, #0]
   10604:	685d      	ldr	r5, [r3, #4]
   10606:	2308      	movs	r3, #8
   10608:	469c      	mov	ip, r3
   1060a:	44e3      	add	fp, ip
   1060c:	e782      	b.n	10514 <__sfvwrite_r+0x38>
   1060e:	0021      	movs	r1, r4
   10610:	9800      	ldr	r0, [sp, #0]
   10612:	f7ff fd81 	bl	10118 <_fflush_r>
   10616:	2800      	cmp	r0, #0
   10618:	d0d2      	beq.n	105c0 <__sfvwrite_r+0xe4>
   1061a:	220c      	movs	r2, #12
   1061c:	5ea3      	ldrsh	r3, [r4, r2]
   1061e:	2240      	movs	r2, #64	; 0x40
   10620:	2001      	movs	r0, #1
   10622:	4313      	orrs	r3, r2
   10624:	81a3      	strh	r3, [r4, #12]
   10626:	4240      	negs	r0, r0
   10628:	e78c      	b.n	10544 <__sfvwrite_r+0x68>
   1062a:	2200      	movs	r2, #0
   1062c:	4691      	mov	r9, r2
   1062e:	464d      	mov	r5, r9
   10630:	2d00      	cmp	r5, #0
   10632:	d023      	beq.n	1067c <__sfvwrite_r+0x1a0>
   10634:	68a2      	ldr	r2, [r4, #8]
   10636:	4690      	mov	r8, r2
   10638:	2280      	movs	r2, #128	; 0x80
   1063a:	0092      	lsls	r2, r2, #2
   1063c:	4213      	tst	r3, r2
   1063e:	d026      	beq.n	1068e <__sfvwrite_r+0x1b2>
   10640:	46c2      	mov	sl, r8
   10642:	4545      	cmp	r5, r8
   10644:	d34d      	bcc.n	106e2 <__sfvwrite_r+0x206>
   10646:	2290      	movs	r2, #144	; 0x90
   10648:	00d2      	lsls	r2, r2, #3
   1064a:	4213      	tst	r3, r2
   1064c:	d14e      	bne.n	106ec <__sfvwrite_r+0x210>
   1064e:	002f      	movs	r7, r5
   10650:	6820      	ldr	r0, [r4, #0]
   10652:	4652      	mov	r2, sl
   10654:	4649      	mov	r1, r9
   10656:	f000 fc75 	bl	10f44 <memmove>
   1065a:	4642      	mov	r2, r8
   1065c:	68a3      	ldr	r3, [r4, #8]
   1065e:	1a98      	subs	r0, r3, r2
   10660:	6823      	ldr	r3, [r4, #0]
   10662:	60a0      	str	r0, [r4, #8]
   10664:	4453      	add	r3, sl
   10666:	6023      	str	r3, [r4, #0]
   10668:	68b3      	ldr	r3, [r6, #8]
   1066a:	44b9      	add	r9, r7
   1066c:	1bed      	subs	r5, r5, r7
   1066e:	1bdf      	subs	r7, r3, r7
   10670:	60b7      	str	r7, [r6, #8]
   10672:	d100      	bne.n	10676 <__sfvwrite_r+0x19a>
   10674:	e765      	b.n	10542 <__sfvwrite_r+0x66>
   10676:	89a3      	ldrh	r3, [r4, #12]
   10678:	2d00      	cmp	r5, #0
   1067a:	d1db      	bne.n	10634 <__sfvwrite_r+0x158>
   1067c:	465a      	mov	r2, fp
   1067e:	6812      	ldr	r2, [r2, #0]
   10680:	4691      	mov	r9, r2
   10682:	465a      	mov	r2, fp
   10684:	6855      	ldr	r5, [r2, #4]
   10686:	2208      	movs	r2, #8
   10688:	4694      	mov	ip, r2
   1068a:	44e3      	add	fp, ip
   1068c:	e7d0      	b.n	10630 <__sfvwrite_r+0x154>
   1068e:	6820      	ldr	r0, [r4, #0]
   10690:	6923      	ldr	r3, [r4, #16]
   10692:	4298      	cmp	r0, r3
   10694:	d802      	bhi.n	1069c <__sfvwrite_r+0x1c0>
   10696:	6967      	ldr	r7, [r4, #20]
   10698:	42bd      	cmp	r5, r7
   1069a:	d259      	bcs.n	10750 <__sfvwrite_r+0x274>
   1069c:	4647      	mov	r7, r8
   1069e:	42af      	cmp	r7, r5
   106a0:	d900      	bls.n	106a4 <__sfvwrite_r+0x1c8>
   106a2:	002f      	movs	r7, r5
   106a4:	003a      	movs	r2, r7
   106a6:	4649      	mov	r1, r9
   106a8:	f000 fc4c 	bl	10f44 <memmove>
   106ac:	68a3      	ldr	r3, [r4, #8]
   106ae:	6822      	ldr	r2, [r4, #0]
   106b0:	1bdb      	subs	r3, r3, r7
   106b2:	19d2      	adds	r2, r2, r7
   106b4:	60a3      	str	r3, [r4, #8]
   106b6:	6022      	str	r2, [r4, #0]
   106b8:	2b00      	cmp	r3, #0
   106ba:	d1d5      	bne.n	10668 <__sfvwrite_r+0x18c>
   106bc:	0021      	movs	r1, r4
   106be:	9800      	ldr	r0, [sp, #0]
   106c0:	f7ff fd2a 	bl	10118 <_fflush_r>
   106c4:	2800      	cmp	r0, #0
   106c6:	d0cf      	beq.n	10668 <__sfvwrite_r+0x18c>
   106c8:	e7a7      	b.n	1061a <__sfvwrite_r+0x13e>
   106ca:	4642      	mov	r2, r8
   106cc:	4651      	mov	r1, sl
   106ce:	f000 fc39 	bl	10f44 <memmove>
   106d2:	4642      	mov	r2, r8
   106d4:	68a3      	ldr	r3, [r4, #8]
   106d6:	1a9b      	subs	r3, r3, r2
   106d8:	60a3      	str	r3, [r4, #8]
   106da:	6823      	ldr	r3, [r4, #0]
   106dc:	4443      	add	r3, r8
   106de:	6023      	str	r3, [r4, #0]
   106e0:	e76a      	b.n	105b8 <__sfvwrite_r+0xdc>
   106e2:	46a8      	mov	r8, r5
   106e4:	6820      	ldr	r0, [r4, #0]
   106e6:	002f      	movs	r7, r5
   106e8:	46aa      	mov	sl, r5
   106ea:	e7b2      	b.n	10652 <__sfvwrite_r+0x176>
   106ec:	6921      	ldr	r1, [r4, #16]
   106ee:	6822      	ldr	r2, [r4, #0]
   106f0:	1a52      	subs	r2, r2, r1
   106f2:	4692      	mov	sl, r2
   106f4:	6962      	ldr	r2, [r4, #20]
   106f6:	0057      	lsls	r7, r2, #1
   106f8:	18bf      	adds	r7, r7, r2
   106fa:	0ffa      	lsrs	r2, r7, #31
   106fc:	19d7      	adds	r7, r2, r7
   106fe:	4652      	mov	r2, sl
   10700:	1c50      	adds	r0, r2, #1
   10702:	107f      	asrs	r7, r7, #1
   10704:	1940      	adds	r0, r0, r5
   10706:	003a      	movs	r2, r7
   10708:	42b8      	cmp	r0, r7
   1070a:	d901      	bls.n	10710 <__sfvwrite_r+0x234>
   1070c:	0007      	movs	r7, r0
   1070e:	0002      	movs	r2, r0
   10710:	055b      	lsls	r3, r3, #21
   10712:	d542      	bpl.n	1079a <__sfvwrite_r+0x2be>
   10714:	0011      	movs	r1, r2
   10716:	9800      	ldr	r0, [sp, #0]
   10718:	f000 f920 	bl	1095c <_malloc_r>
   1071c:	4680      	mov	r8, r0
   1071e:	1e03      	subs	r3, r0, #0
   10720:	d052      	beq.n	107c8 <__sfvwrite_r+0x2ec>
   10722:	4652      	mov	r2, sl
   10724:	6921      	ldr	r1, [r4, #16]
   10726:	f7fc fd35 	bl	d194 <memcpy>
   1072a:	89a3      	ldrh	r3, [r4, #12]
   1072c:	4a2a      	ldr	r2, [pc, #168]	; (107d8 <__sfvwrite_r+0x2fc>)
   1072e:	4013      	ands	r3, r2
   10730:	2280      	movs	r2, #128	; 0x80
   10732:	4313      	orrs	r3, r2
   10734:	81a3      	strh	r3, [r4, #12]
   10736:	4643      	mov	r3, r8
   10738:	4640      	mov	r0, r8
   1073a:	6123      	str	r3, [r4, #16]
   1073c:	4653      	mov	r3, sl
   1073e:	4450      	add	r0, sl
   10740:	6167      	str	r7, [r4, #20]
   10742:	1aff      	subs	r7, r7, r3
   10744:	60a7      	str	r7, [r4, #8]
   10746:	6020      	str	r0, [r4, #0]
   10748:	46a8      	mov	r8, r5
   1074a:	002f      	movs	r7, r5
   1074c:	46aa      	mov	sl, r5
   1074e:	e780      	b.n	10652 <__sfvwrite_r+0x176>
   10750:	4b22      	ldr	r3, [pc, #136]	; (107dc <__sfvwrite_r+0x300>)
   10752:	0028      	movs	r0, r5
   10754:	429d      	cmp	r5, r3
   10756:	d900      	bls.n	1075a <__sfvwrite_r+0x27e>
   10758:	0018      	movs	r0, r3
   1075a:	0039      	movs	r1, r7
   1075c:	f7f9 ff1c 	bl	a598 <__divsi3>
   10760:	003b      	movs	r3, r7
   10762:	464a      	mov	r2, r9
   10764:	4343      	muls	r3, r0
   10766:	69e1      	ldr	r1, [r4, #28]
   10768:	9800      	ldr	r0, [sp, #0]
   1076a:	6a67      	ldr	r7, [r4, #36]	; 0x24
   1076c:	47b8      	blx	r7
   1076e:	2800      	cmp	r0, #0
   10770:	dc00      	bgt.n	10774 <__sfvwrite_r+0x298>
   10772:	e752      	b.n	1061a <__sfvwrite_r+0x13e>
   10774:	0007      	movs	r7, r0
   10776:	e777      	b.n	10668 <__sfvwrite_r+0x18c>
   10778:	4666      	mov	r6, ip
   1077a:	4651      	mov	r1, sl
   1077c:	f000 fbe2 	bl	10f44 <memmove>
   10780:	46b4      	mov	ip, r6
   10782:	6823      	ldr	r3, [r4, #0]
   10784:	0021      	movs	r1, r4
   10786:	4463      	add	r3, ip
   10788:	6023      	str	r3, [r4, #0]
   1078a:	9800      	ldr	r0, [sp, #0]
   1078c:	f7ff fcc4 	bl	10118 <_fflush_r>
   10790:	2800      	cmp	r0, #0
   10792:	d000      	beq.n	10796 <__sfvwrite_r+0x2ba>
   10794:	e741      	b.n	1061a <__sfvwrite_r+0x13e>
   10796:	9e01      	ldr	r6, [sp, #4]
   10798:	e70e      	b.n	105b8 <__sfvwrite_r+0xdc>
   1079a:	9800      	ldr	r0, [sp, #0]
   1079c:	f000 ff7a 	bl	11694 <_realloc_r>
   107a0:	4680      	mov	r8, r0
   107a2:	2800      	cmp	r0, #0
   107a4:	d1c7      	bne.n	10736 <__sfvwrite_r+0x25a>
   107a6:	9d00      	ldr	r5, [sp, #0]
   107a8:	6921      	ldr	r1, [r4, #16]
   107aa:	0028      	movs	r0, r5
   107ac:	f7ff fdb8 	bl	10320 <_free_r>
   107b0:	2280      	movs	r2, #128	; 0x80
   107b2:	89a3      	ldrh	r3, [r4, #12]
   107b4:	4393      	bics	r3, r2
   107b6:	3a74      	subs	r2, #116	; 0x74
   107b8:	b21b      	sxth	r3, r3
   107ba:	602a      	str	r2, [r5, #0]
   107bc:	e72f      	b.n	1061e <__sfvwrite_r+0x142>
   107be:	1c7d      	adds	r5, r7, #1
   107c0:	e6de      	b.n	10580 <__sfvwrite_r+0xa4>
   107c2:	2001      	movs	r0, #1
   107c4:	4240      	negs	r0, r0
   107c6:	e6bd      	b.n	10544 <__sfvwrite_r+0x68>
   107c8:	9a00      	ldr	r2, [sp, #0]
   107ca:	330c      	adds	r3, #12
   107cc:	6013      	str	r3, [r2, #0]
   107ce:	220c      	movs	r2, #12
   107d0:	5ea3      	ldrsh	r3, [r4, r2]
   107d2:	e724      	b.n	1061e <__sfvwrite_r+0x142>
   107d4:	7ffffc00 	.word	0x7ffffc00
   107d8:	fffffb7f 	.word	0xfffffb7f
   107dc:	7fffffff 	.word	0x7fffffff

000107e0 <_fwalk_reent>:
   107e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   107e2:	4647      	mov	r7, r8
   107e4:	46ce      	mov	lr, r9
   107e6:	b580      	push	{r7, lr}
   107e8:	27b8      	movs	r7, #184	; 0xb8
   107ea:	4680      	mov	r8, r0
   107ec:	00bf      	lsls	r7, r7, #2
   107ee:	4447      	add	r7, r8
   107f0:	4689      	mov	r9, r1
   107f2:	2600      	movs	r6, #0
   107f4:	2f00      	cmp	r7, #0
   107f6:	d014      	beq.n	10822 <_fwalk_reent+0x42>
   107f8:	687b      	ldr	r3, [r7, #4]
   107fa:	68bc      	ldr	r4, [r7, #8]
   107fc:	1e5d      	subs	r5, r3, #1
   107fe:	d40d      	bmi.n	1081c <_fwalk_reent+0x3c>
   10800:	89a3      	ldrh	r3, [r4, #12]
   10802:	2b01      	cmp	r3, #1
   10804:	d907      	bls.n	10816 <_fwalk_reent+0x36>
   10806:	220e      	movs	r2, #14
   10808:	5ea3      	ldrsh	r3, [r4, r2]
   1080a:	3301      	adds	r3, #1
   1080c:	d003      	beq.n	10816 <_fwalk_reent+0x36>
   1080e:	0021      	movs	r1, r4
   10810:	4640      	mov	r0, r8
   10812:	47c8      	blx	r9
   10814:	4306      	orrs	r6, r0
   10816:	3468      	adds	r4, #104	; 0x68
   10818:	3d01      	subs	r5, #1
   1081a:	d2f1      	bcs.n	10800 <_fwalk_reent+0x20>
   1081c:	683f      	ldr	r7, [r7, #0]
   1081e:	2f00      	cmp	r7, #0
   10820:	d1ea      	bne.n	107f8 <_fwalk_reent+0x18>
   10822:	0030      	movs	r0, r6
   10824:	bc0c      	pop	{r2, r3}
   10826:	4690      	mov	r8, r2
   10828:	4699      	mov	r9, r3
   1082a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001082c <_localeconv_r>:
   1082c:	4b04      	ldr	r3, [pc, #16]	; (10840 <_localeconv_r+0x14>)
   1082e:	681b      	ldr	r3, [r3, #0]
   10830:	6b58      	ldr	r0, [r3, #52]	; 0x34
   10832:	2800      	cmp	r0, #0
   10834:	d001      	beq.n	1083a <_localeconv_r+0xe>
   10836:	30f0      	adds	r0, #240	; 0xf0
   10838:	4770      	bx	lr
   1083a:	4802      	ldr	r0, [pc, #8]	; (10844 <_localeconv_r+0x18>)
   1083c:	e7fb      	b.n	10836 <_localeconv_r+0xa>
   1083e:	46c0      	nop			; (mov r8, r8)
   10840:	20000084 	.word	0x20000084
   10844:	200008c4 	.word	0x200008c4

00010848 <__retarget_lock_init_recursive>:
   10848:	4770      	bx	lr
   1084a:	46c0      	nop			; (mov r8, r8)

0001084c <__retarget_lock_close_recursive>:
   1084c:	4770      	bx	lr
   1084e:	46c0      	nop			; (mov r8, r8)

00010850 <__retarget_lock_acquire_recursive>:
   10850:	4770      	bx	lr
   10852:	46c0      	nop			; (mov r8, r8)

00010854 <__retarget_lock_release_recursive>:
   10854:	4770      	bx	lr
   10856:	46c0      	nop			; (mov r8, r8)

00010858 <__swhatbuf_r>:
   10858:	b570      	push	{r4, r5, r6, lr}
   1085a:	000c      	movs	r4, r1
   1085c:	001e      	movs	r6, r3
   1085e:	230e      	movs	r3, #14
   10860:	5ec9      	ldrsh	r1, [r1, r3]
   10862:	b090      	sub	sp, #64	; 0x40
   10864:	0015      	movs	r5, r2
   10866:	2900      	cmp	r1, #0
   10868:	db15      	blt.n	10896 <__swhatbuf_r+0x3e>
   1086a:	aa01      	add	r2, sp, #4
   1086c:	f001 faae 	bl	11dcc <_fstat_r>
   10870:	2800      	cmp	r0, #0
   10872:	db10      	blt.n	10896 <__swhatbuf_r+0x3e>
   10874:	22f0      	movs	r2, #240	; 0xf0
   10876:	9b02      	ldr	r3, [sp, #8]
   10878:	0212      	lsls	r2, r2, #8
   1087a:	4013      	ands	r3, r2
   1087c:	4a0d      	ldr	r2, [pc, #52]	; (108b4 <__swhatbuf_r+0x5c>)
   1087e:	2080      	movs	r0, #128	; 0x80
   10880:	4694      	mov	ip, r2
   10882:	4463      	add	r3, ip
   10884:	425a      	negs	r2, r3
   10886:	4153      	adcs	r3, r2
   10888:	6033      	str	r3, [r6, #0]
   1088a:	2380      	movs	r3, #128	; 0x80
   1088c:	00db      	lsls	r3, r3, #3
   1088e:	602b      	str	r3, [r5, #0]
   10890:	0100      	lsls	r0, r0, #4
   10892:	b010      	add	sp, #64	; 0x40
   10894:	bd70      	pop	{r4, r5, r6, pc}
   10896:	2300      	movs	r3, #0
   10898:	6033      	str	r3, [r6, #0]
   1089a:	89a3      	ldrh	r3, [r4, #12]
   1089c:	061b      	lsls	r3, r3, #24
   1089e:	d503      	bpl.n	108a8 <__swhatbuf_r+0x50>
   108a0:	2340      	movs	r3, #64	; 0x40
   108a2:	2000      	movs	r0, #0
   108a4:	602b      	str	r3, [r5, #0]
   108a6:	e7f4      	b.n	10892 <__swhatbuf_r+0x3a>
   108a8:	2380      	movs	r3, #128	; 0x80
   108aa:	00db      	lsls	r3, r3, #3
   108ac:	602b      	str	r3, [r5, #0]
   108ae:	2000      	movs	r0, #0
   108b0:	e7ef      	b.n	10892 <__swhatbuf_r+0x3a>
   108b2:	46c0      	nop			; (mov r8, r8)
   108b4:	ffffe000 	.word	0xffffe000

000108b8 <__smakebuf_r>:
   108b8:	b570      	push	{r4, r5, r6, lr}
   108ba:	898b      	ldrh	r3, [r1, #12]
   108bc:	b082      	sub	sp, #8
   108be:	0006      	movs	r6, r0
   108c0:	000c      	movs	r4, r1
   108c2:	079b      	lsls	r3, r3, #30
   108c4:	d507      	bpl.n	108d6 <__smakebuf_r+0x1e>
   108c6:	0023      	movs	r3, r4
   108c8:	3343      	adds	r3, #67	; 0x43
   108ca:	6023      	str	r3, [r4, #0]
   108cc:	6123      	str	r3, [r4, #16]
   108ce:	2301      	movs	r3, #1
   108d0:	6163      	str	r3, [r4, #20]
   108d2:	b002      	add	sp, #8
   108d4:	bd70      	pop	{r4, r5, r6, pc}
   108d6:	ab01      	add	r3, sp, #4
   108d8:	466a      	mov	r2, sp
   108da:	f7ff ffbd 	bl	10858 <__swhatbuf_r>
   108de:	9900      	ldr	r1, [sp, #0]
   108e0:	0005      	movs	r5, r0
   108e2:	0030      	movs	r0, r6
   108e4:	f000 f83a 	bl	1095c <_malloc_r>
   108e8:	2800      	cmp	r0, #0
   108ea:	d01e      	beq.n	1092a <__smakebuf_r+0x72>
   108ec:	2280      	movs	r2, #128	; 0x80
   108ee:	4b15      	ldr	r3, [pc, #84]	; (10944 <__smakebuf_r+0x8c>)
   108f0:	63f3      	str	r3, [r6, #60]	; 0x3c
   108f2:	89a3      	ldrh	r3, [r4, #12]
   108f4:	6020      	str	r0, [r4, #0]
   108f6:	4313      	orrs	r3, r2
   108f8:	9a00      	ldr	r2, [sp, #0]
   108fa:	b21b      	sxth	r3, r3
   108fc:	6162      	str	r2, [r4, #20]
   108fe:	9a01      	ldr	r2, [sp, #4]
   10900:	81a3      	strh	r3, [r4, #12]
   10902:	6120      	str	r0, [r4, #16]
   10904:	2a00      	cmp	r2, #0
   10906:	d102      	bne.n	1090e <__smakebuf_r+0x56>
   10908:	432b      	orrs	r3, r5
   1090a:	81a3      	strh	r3, [r4, #12]
   1090c:	e7e1      	b.n	108d2 <__smakebuf_r+0x1a>
   1090e:	230e      	movs	r3, #14
   10910:	5ee1      	ldrsh	r1, [r4, r3]
   10912:	0030      	movs	r0, r6
   10914:	f001 fa6e 	bl	11df4 <_isatty_r>
   10918:	2800      	cmp	r0, #0
   1091a:	d010      	beq.n	1093e <__smakebuf_r+0x86>
   1091c:	2203      	movs	r2, #3
   1091e:	89a3      	ldrh	r3, [r4, #12]
   10920:	4393      	bics	r3, r2
   10922:	2201      	movs	r2, #1
   10924:	4313      	orrs	r3, r2
   10926:	b21b      	sxth	r3, r3
   10928:	e7ee      	b.n	10908 <__smakebuf_r+0x50>
   1092a:	220c      	movs	r2, #12
   1092c:	5ea3      	ldrsh	r3, [r4, r2]
   1092e:	059a      	lsls	r2, r3, #22
   10930:	d4cf      	bmi.n	108d2 <__smakebuf_r+0x1a>
   10932:	2203      	movs	r2, #3
   10934:	4393      	bics	r3, r2
   10936:	2202      	movs	r2, #2
   10938:	4313      	orrs	r3, r2
   1093a:	81a3      	strh	r3, [r4, #12]
   1093c:	e7c3      	b.n	108c6 <__smakebuf_r+0xe>
   1093e:	220c      	movs	r2, #12
   10940:	5ea3      	ldrsh	r3, [r4, r2]
   10942:	e7e1      	b.n	10908 <__smakebuf_r+0x50>
   10944:	0001016d 	.word	0x0001016d

00010948 <malloc>:
   10948:	b510      	push	{r4, lr}
   1094a:	4b03      	ldr	r3, [pc, #12]	; (10958 <malloc+0x10>)
   1094c:	0001      	movs	r1, r0
   1094e:	6818      	ldr	r0, [r3, #0]
   10950:	f000 f804 	bl	1095c <_malloc_r>
   10954:	bd10      	pop	{r4, pc}
   10956:	46c0      	nop			; (mov r8, r8)
   10958:	20000084 	.word	0x20000084

0001095c <_malloc_r>:
   1095c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1095e:	4657      	mov	r7, sl
   10960:	4645      	mov	r5, r8
   10962:	46de      	mov	lr, fp
   10964:	464e      	mov	r6, r9
   10966:	b5e0      	push	{r5, r6, r7, lr}
   10968:	000d      	movs	r5, r1
   1096a:	350b      	adds	r5, #11
   1096c:	b083      	sub	sp, #12
   1096e:	0007      	movs	r7, r0
   10970:	2d16      	cmp	r5, #22
   10972:	d800      	bhi.n	10976 <_malloc_r+0x1a>
   10974:	e09f      	b.n	10ab6 <_malloc_r+0x15a>
   10976:	2307      	movs	r3, #7
   10978:	439d      	bics	r5, r3
   1097a:	d500      	bpl.n	1097e <_malloc_r+0x22>
   1097c:	e0c4      	b.n	10b08 <_malloc_r+0x1ac>
   1097e:	42a9      	cmp	r1, r5
   10980:	d900      	bls.n	10984 <_malloc_r+0x28>
   10982:	e0c1      	b.n	10b08 <_malloc_r+0x1ac>
   10984:	f000 fb2e 	bl	10fe4 <__malloc_lock>
   10988:	23f8      	movs	r3, #248	; 0xf8
   1098a:	33ff      	adds	r3, #255	; 0xff
   1098c:	429d      	cmp	r5, r3
   1098e:	d800      	bhi.n	10992 <_malloc_r+0x36>
   10990:	e28f      	b.n	10eb2 <_malloc_r+0x556>
   10992:	0a68      	lsrs	r0, r5, #9
   10994:	d100      	bne.n	10998 <_malloc_r+0x3c>
   10996:	e0bb      	b.n	10b10 <_malloc_r+0x1b4>
   10998:	2804      	cmp	r0, #4
   1099a:	d900      	bls.n	1099e <_malloc_r+0x42>
   1099c:	e162      	b.n	10c64 <_malloc_r+0x308>
   1099e:	2338      	movs	r3, #56	; 0x38
   109a0:	4698      	mov	r8, r3
   109a2:	09a8      	lsrs	r0, r5, #6
   109a4:	4480      	add	r8, r0
   109a6:	3039      	adds	r0, #57	; 0x39
   109a8:	00c1      	lsls	r1, r0, #3
   109aa:	4ed2      	ldr	r6, [pc, #840]	; (10cf4 <_malloc_r+0x398>)
   109ac:	1871      	adds	r1, r6, r1
   109ae:	3908      	subs	r1, #8
   109b0:	68cc      	ldr	r4, [r1, #12]
   109b2:	42a1      	cmp	r1, r4
   109b4:	d019      	beq.n	109ea <_malloc_r+0x8e>
   109b6:	2303      	movs	r3, #3
   109b8:	6862      	ldr	r2, [r4, #4]
   109ba:	439a      	bics	r2, r3
   109bc:	0013      	movs	r3, r2
   109be:	1b52      	subs	r2, r2, r5
   109c0:	2a0f      	cmp	r2, #15
   109c2:	dd00      	ble.n	109c6 <_malloc_r+0x6a>
   109c4:	e0aa      	b.n	10b1c <_malloc_r+0x1c0>
   109c6:	2a00      	cmp	r2, #0
   109c8:	db00      	blt.n	109cc <_malloc_r+0x70>
   109ca:	e088      	b.n	10ade <_malloc_r+0x182>
   109cc:	2303      	movs	r3, #3
   109ce:	469c      	mov	ip, r3
   109d0:	e008      	b.n	109e4 <_malloc_r+0x88>
   109d2:	4662      	mov	r2, ip
   109d4:	6863      	ldr	r3, [r4, #4]
   109d6:	4393      	bics	r3, r2
   109d8:	1b5a      	subs	r2, r3, r5
   109da:	2a0f      	cmp	r2, #15
   109dc:	dd00      	ble.n	109e0 <_malloc_r+0x84>
   109de:	e09d      	b.n	10b1c <_malloc_r+0x1c0>
   109e0:	2a00      	cmp	r2, #0
   109e2:	da7c      	bge.n	10ade <_malloc_r+0x182>
   109e4:	68e4      	ldr	r4, [r4, #12]
   109e6:	42a1      	cmp	r1, r4
   109e8:	d1f3      	bne.n	109d2 <_malloc_r+0x76>
   109ea:	0032      	movs	r2, r6
   109ec:	6934      	ldr	r4, [r6, #16]
   109ee:	3208      	adds	r2, #8
   109f0:	4294      	cmp	r4, r2
   109f2:	d100      	bne.n	109f6 <_malloc_r+0x9a>
   109f4:	e190      	b.n	10d18 <_malloc_r+0x3bc>
   109f6:	2303      	movs	r3, #3
   109f8:	6861      	ldr	r1, [r4, #4]
   109fa:	4399      	bics	r1, r3
   109fc:	4689      	mov	r9, r1
   109fe:	1b49      	subs	r1, r1, r5
   10a00:	290f      	cmp	r1, #15
   10a02:	dd00      	ble.n	10a06 <_malloc_r+0xaa>
   10a04:	e162      	b.n	10ccc <_malloc_r+0x370>
   10a06:	6172      	str	r2, [r6, #20]
   10a08:	6132      	str	r2, [r6, #16]
   10a0a:	2900      	cmp	r1, #0
   10a0c:	db00      	blt.n	10a10 <_malloc_r+0xb4>
   10a0e:	e087      	b.n	10b20 <_malloc_r+0x1c4>
   10a10:	4ab9      	ldr	r2, [pc, #740]	; (10cf8 <_malloc_r+0x39c>)
   10a12:	464b      	mov	r3, r9
   10a14:	4591      	cmp	r9, r2
   10a16:	d900      	bls.n	10a1a <_malloc_r+0xbe>
   10a18:	e130      	b.n	10c7c <_malloc_r+0x320>
   10a1a:	08db      	lsrs	r3, r3, #3
   10a1c:	3aff      	subs	r2, #255	; 0xff
   10a1e:	1099      	asrs	r1, r3, #2
   10a20:	3aff      	subs	r2, #255	; 0xff
   10a22:	408a      	lsls	r2, r1
   10a24:	00db      	lsls	r3, r3, #3
   10a26:	6871      	ldr	r1, [r6, #4]
   10a28:	199b      	adds	r3, r3, r6
   10a2a:	430a      	orrs	r2, r1
   10a2c:	6899      	ldr	r1, [r3, #8]
   10a2e:	6072      	str	r2, [r6, #4]
   10a30:	60e3      	str	r3, [r4, #12]
   10a32:	60a1      	str	r1, [r4, #8]
   10a34:	609c      	str	r4, [r3, #8]
   10a36:	0013      	movs	r3, r2
   10a38:	60cc      	str	r4, [r1, #12]
   10a3a:	2101      	movs	r1, #1
   10a3c:	1082      	asrs	r2, r0, #2
   10a3e:	4091      	lsls	r1, r2
   10a40:	4299      	cmp	r1, r3
   10a42:	d86f      	bhi.n	10b24 <_malloc_r+0x1c8>
   10a44:	420b      	tst	r3, r1
   10a46:	d105      	bne.n	10a54 <_malloc_r+0xf8>
   10a48:	2203      	movs	r2, #3
   10a4a:	4390      	bics	r0, r2
   10a4c:	0049      	lsls	r1, r1, #1
   10a4e:	3004      	adds	r0, #4
   10a50:	420b      	tst	r3, r1
   10a52:	d0fb      	beq.n	10a4c <_malloc_r+0xf0>
   10a54:	2303      	movs	r3, #3
   10a56:	4698      	mov	r8, r3
   10a58:	00c3      	lsls	r3, r0, #3
   10a5a:	4699      	mov	r9, r3
   10a5c:	44b1      	add	r9, r6
   10a5e:	46cc      	mov	ip, r9
   10a60:	4682      	mov	sl, r0
   10a62:	4663      	mov	r3, ip
   10a64:	68dc      	ldr	r4, [r3, #12]
   10a66:	45a4      	cmp	ip, r4
   10a68:	d107      	bne.n	10a7a <_malloc_r+0x11e>
   10a6a:	e157      	b.n	10d1c <_malloc_r+0x3c0>
   10a6c:	2a00      	cmp	r2, #0
   10a6e:	db00      	blt.n	10a72 <_malloc_r+0x116>
   10a70:	e166      	b.n	10d40 <_malloc_r+0x3e4>
   10a72:	68e4      	ldr	r4, [r4, #12]
   10a74:	45a4      	cmp	ip, r4
   10a76:	d100      	bne.n	10a7a <_malloc_r+0x11e>
   10a78:	e150      	b.n	10d1c <_malloc_r+0x3c0>
   10a7a:	4642      	mov	r2, r8
   10a7c:	6863      	ldr	r3, [r4, #4]
   10a7e:	4393      	bics	r3, r2
   10a80:	1b5a      	subs	r2, r3, r5
   10a82:	2a0f      	cmp	r2, #15
   10a84:	ddf2      	ble.n	10a6c <_malloc_r+0x110>
   10a86:	2001      	movs	r0, #1
   10a88:	4680      	mov	r8, r0
   10a8a:	1961      	adds	r1, r4, r5
   10a8c:	4305      	orrs	r5, r0
   10a8e:	6065      	str	r5, [r4, #4]
   10a90:	68a0      	ldr	r0, [r4, #8]
   10a92:	68e5      	ldr	r5, [r4, #12]
   10a94:	3608      	adds	r6, #8
   10a96:	60c5      	str	r5, [r0, #12]
   10a98:	60a8      	str	r0, [r5, #8]
   10a9a:	4640      	mov	r0, r8
   10a9c:	60f1      	str	r1, [r6, #12]
   10a9e:	60b1      	str	r1, [r6, #8]
   10aa0:	4310      	orrs	r0, r2
   10aa2:	6048      	str	r0, [r1, #4]
   10aa4:	60ce      	str	r6, [r1, #12]
   10aa6:	608e      	str	r6, [r1, #8]
   10aa8:	0038      	movs	r0, r7
   10aaa:	50e2      	str	r2, [r4, r3]
   10aac:	f000 faa2 	bl	10ff4 <__malloc_unlock>
   10ab0:	0020      	movs	r0, r4
   10ab2:	3008      	adds	r0, #8
   10ab4:	e021      	b.n	10afa <_malloc_r+0x19e>
   10ab6:	2910      	cmp	r1, #16
   10ab8:	d826      	bhi.n	10b08 <_malloc_r+0x1ac>
   10aba:	0038      	movs	r0, r7
   10abc:	f000 fa92 	bl	10fe4 <__malloc_lock>
   10ac0:	2510      	movs	r5, #16
   10ac2:	2318      	movs	r3, #24
   10ac4:	2002      	movs	r0, #2
   10ac6:	4e8b      	ldr	r6, [pc, #556]	; (10cf4 <_malloc_r+0x398>)
   10ac8:	18f3      	adds	r3, r6, r3
   10aca:	001a      	movs	r2, r3
   10acc:	685c      	ldr	r4, [r3, #4]
   10ace:	3a08      	subs	r2, #8
   10ad0:	4294      	cmp	r4, r2
   10ad2:	d100      	bne.n	10ad6 <_malloc_r+0x17a>
   10ad4:	e12e      	b.n	10d34 <_malloc_r+0x3d8>
   10ad6:	2303      	movs	r3, #3
   10ad8:	6862      	ldr	r2, [r4, #4]
   10ada:	439a      	bics	r2, r3
   10adc:	0013      	movs	r3, r2
   10ade:	68e2      	ldr	r2, [r4, #12]
   10ae0:	68a1      	ldr	r1, [r4, #8]
   10ae2:	60ca      	str	r2, [r1, #12]
   10ae4:	6091      	str	r1, [r2, #8]
   10ae6:	2201      	movs	r2, #1
   10ae8:	18e3      	adds	r3, r4, r3
   10aea:	6859      	ldr	r1, [r3, #4]
   10aec:	0038      	movs	r0, r7
   10aee:	430a      	orrs	r2, r1
   10af0:	605a      	str	r2, [r3, #4]
   10af2:	f000 fa7f 	bl	10ff4 <__malloc_unlock>
   10af6:	0020      	movs	r0, r4
   10af8:	3008      	adds	r0, #8
   10afa:	b003      	add	sp, #12
   10afc:	bc3c      	pop	{r2, r3, r4, r5}
   10afe:	4690      	mov	r8, r2
   10b00:	4699      	mov	r9, r3
   10b02:	46a2      	mov	sl, r4
   10b04:	46ab      	mov	fp, r5
   10b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10b08:	230c      	movs	r3, #12
   10b0a:	2000      	movs	r0, #0
   10b0c:	603b      	str	r3, [r7, #0]
   10b0e:	e7f4      	b.n	10afa <_malloc_r+0x19e>
   10b10:	2180      	movs	r1, #128	; 0x80
   10b12:	233f      	movs	r3, #63	; 0x3f
   10b14:	2040      	movs	r0, #64	; 0x40
   10b16:	0089      	lsls	r1, r1, #2
   10b18:	4698      	mov	r8, r3
   10b1a:	e746      	b.n	109aa <_malloc_r+0x4e>
   10b1c:	4640      	mov	r0, r8
   10b1e:	e764      	b.n	109ea <_malloc_r+0x8e>
   10b20:	464b      	mov	r3, r9
   10b22:	e7e0      	b.n	10ae6 <_malloc_r+0x18a>
   10b24:	2303      	movs	r3, #3
   10b26:	68b4      	ldr	r4, [r6, #8]
   10b28:	6862      	ldr	r2, [r4, #4]
   10b2a:	439a      	bics	r2, r3
   10b2c:	4690      	mov	r8, r2
   10b2e:	42aa      	cmp	r2, r5
   10b30:	d303      	bcc.n	10b3a <_malloc_r+0x1de>
   10b32:	1b53      	subs	r3, r2, r5
   10b34:	2b0f      	cmp	r3, #15
   10b36:	dd00      	ble.n	10b3a <_malloc_r+0x1de>
   10b38:	e086      	b.n	10c48 <_malloc_r+0x2ec>
   10b3a:	0023      	movs	r3, r4
   10b3c:	4443      	add	r3, r8
   10b3e:	4a6f      	ldr	r2, [pc, #444]	; (10cfc <_malloc_r+0x3a0>)
   10b40:	9301      	str	r3, [sp, #4]
   10b42:	4b6f      	ldr	r3, [pc, #444]	; (10d00 <_malloc_r+0x3a4>)
   10b44:	4693      	mov	fp, r2
   10b46:	681b      	ldr	r3, [r3, #0]
   10b48:	6812      	ldr	r2, [r2, #0]
   10b4a:	18eb      	adds	r3, r5, r3
   10b4c:	3201      	adds	r2, #1
   10b4e:	d100      	bne.n	10b52 <_malloc_r+0x1f6>
   10b50:	e168      	b.n	10e24 <_malloc_r+0x4c8>
   10b52:	4a6c      	ldr	r2, [pc, #432]	; (10d04 <_malloc_r+0x3a8>)
   10b54:	4694      	mov	ip, r2
   10b56:	4463      	add	r3, ip
   10b58:	0b1b      	lsrs	r3, r3, #12
   10b5a:	031b      	lsls	r3, r3, #12
   10b5c:	9300      	str	r3, [sp, #0]
   10b5e:	9900      	ldr	r1, [sp, #0]
   10b60:	0038      	movs	r0, r7
   10b62:	f000 ff55 	bl	11a10 <_sbrk_r>
   10b66:	0003      	movs	r3, r0
   10b68:	4681      	mov	r9, r0
   10b6a:	3301      	adds	r3, #1
   10b6c:	d061      	beq.n	10c32 <_malloc_r+0x2d6>
   10b6e:	9b01      	ldr	r3, [sp, #4]
   10b70:	4283      	cmp	r3, r0
   10b72:	d900      	bls.n	10b76 <_malloc_r+0x21a>
   10b74:	e0ff      	b.n	10d76 <_malloc_r+0x41a>
   10b76:	4b64      	ldr	r3, [pc, #400]	; (10d08 <_malloc_r+0x3ac>)
   10b78:	9a00      	ldr	r2, [sp, #0]
   10b7a:	469a      	mov	sl, r3
   10b7c:	681b      	ldr	r3, [r3, #0]
   10b7e:	469c      	mov	ip, r3
   10b80:	4653      	mov	r3, sl
   10b82:	4462      	add	r2, ip
   10b84:	601a      	str	r2, [r3, #0]
   10b86:	9b01      	ldr	r3, [sp, #4]
   10b88:	0011      	movs	r1, r2
   10b8a:	4283      	cmp	r3, r0
   10b8c:	d100      	bne.n	10b90 <_malloc_r+0x234>
   10b8e:	e155      	b.n	10e3c <_malloc_r+0x4e0>
   10b90:	465b      	mov	r3, fp
   10b92:	681b      	ldr	r3, [r3, #0]
   10b94:	3301      	adds	r3, #1
   10b96:	d100      	bne.n	10b9a <_malloc_r+0x23e>
   10b98:	e16c      	b.n	10e74 <_malloc_r+0x518>
   10b9a:	464b      	mov	r3, r9
   10b9c:	9a01      	ldr	r2, [sp, #4]
   10b9e:	1a9b      	subs	r3, r3, r2
   10ba0:	1859      	adds	r1, r3, r1
   10ba2:	4653      	mov	r3, sl
   10ba4:	6019      	str	r1, [r3, #0]
   10ba6:	2307      	movs	r3, #7
   10ba8:	464a      	mov	r2, r9
   10baa:	4013      	ands	r3, r2
   10bac:	d100      	bne.n	10bb0 <_malloc_r+0x254>
   10bae:	e124      	b.n	10dfa <_malloc_r+0x49e>
   10bb0:	2108      	movs	r1, #8
   10bb2:	4689      	mov	r9, r1
   10bb4:	4955      	ldr	r1, [pc, #340]	; (10d0c <_malloc_r+0x3b0>)
   10bb6:	1ad2      	subs	r2, r2, r3
   10bb8:	4491      	add	r9, r2
   10bba:	1acb      	subs	r3, r1, r3
   10bbc:	9a00      	ldr	r2, [sp, #0]
   10bbe:	0038      	movs	r0, r7
   10bc0:	444a      	add	r2, r9
   10bc2:	0511      	lsls	r1, r2, #20
   10bc4:	0d09      	lsrs	r1, r1, #20
   10bc6:	1a5b      	subs	r3, r3, r1
   10bc8:	0019      	movs	r1, r3
   10bca:	469b      	mov	fp, r3
   10bcc:	f000 ff20 	bl	11a10 <_sbrk_r>
   10bd0:	1c43      	adds	r3, r0, #1
   10bd2:	d100      	bne.n	10bd6 <_malloc_r+0x27a>
   10bd4:	e142      	b.n	10e5c <_malloc_r+0x500>
   10bd6:	464b      	mov	r3, r9
   10bd8:	1ac0      	subs	r0, r0, r3
   10bda:	2301      	movs	r3, #1
   10bdc:	4458      	add	r0, fp
   10bde:	4318      	orrs	r0, r3
   10be0:	4653      	mov	r3, sl
   10be2:	681b      	ldr	r3, [r3, #0]
   10be4:	445b      	add	r3, fp
   10be6:	0019      	movs	r1, r3
   10be8:	4653      	mov	r3, sl
   10bea:	6019      	str	r1, [r3, #0]
   10bec:	464b      	mov	r3, r9
   10bee:	60b3      	str	r3, [r6, #8]
   10bf0:	6058      	str	r0, [r3, #4]
   10bf2:	42b4      	cmp	r4, r6
   10bf4:	d013      	beq.n	10c1e <_malloc_r+0x2c2>
   10bf6:	4643      	mov	r3, r8
   10bf8:	2b0f      	cmp	r3, #15
   10bfa:	d800      	bhi.n	10bfe <_malloc_r+0x2a2>
   10bfc:	e0e8      	b.n	10dd0 <_malloc_r+0x474>
   10bfe:	4643      	mov	r3, r8
   10c00:	2207      	movs	r2, #7
   10c02:	6860      	ldr	r0, [r4, #4]
   10c04:	3b0c      	subs	r3, #12
   10c06:	4393      	bics	r3, r2
   10c08:	3a06      	subs	r2, #6
   10c0a:	4002      	ands	r2, r0
   10c0c:	2005      	movs	r0, #5
   10c0e:	431a      	orrs	r2, r3
   10c10:	6062      	str	r2, [r4, #4]
   10c12:	18e2      	adds	r2, r4, r3
   10c14:	6050      	str	r0, [r2, #4]
   10c16:	6090      	str	r0, [r2, #8]
   10c18:	2b0f      	cmp	r3, #15
   10c1a:	d900      	bls.n	10c1e <_malloc_r+0x2c2>
   10c1c:	e122      	b.n	10e64 <_malloc_r+0x508>
   10c1e:	4b3c      	ldr	r3, [pc, #240]	; (10d10 <_malloc_r+0x3b4>)
   10c20:	681a      	ldr	r2, [r3, #0]
   10c22:	4291      	cmp	r1, r2
   10c24:	d900      	bls.n	10c28 <_malloc_r+0x2cc>
   10c26:	6019      	str	r1, [r3, #0]
   10c28:	4b3a      	ldr	r3, [pc, #232]	; (10d14 <_malloc_r+0x3b8>)
   10c2a:	681a      	ldr	r2, [r3, #0]
   10c2c:	4291      	cmp	r1, r2
   10c2e:	d900      	bls.n	10c32 <_malloc_r+0x2d6>
   10c30:	6019      	str	r1, [r3, #0]
   10c32:	2303      	movs	r3, #3
   10c34:	68b4      	ldr	r4, [r6, #8]
   10c36:	6862      	ldr	r2, [r4, #4]
   10c38:	439a      	bics	r2, r3
   10c3a:	1b53      	subs	r3, r2, r5
   10c3c:	4295      	cmp	r5, r2
   10c3e:	d900      	bls.n	10c42 <_malloc_r+0x2e6>
   10c40:	e0c9      	b.n	10dd6 <_malloc_r+0x47a>
   10c42:	2b0f      	cmp	r3, #15
   10c44:	dc00      	bgt.n	10c48 <_malloc_r+0x2ec>
   10c46:	e0c6      	b.n	10dd6 <_malloc_r+0x47a>
   10c48:	2201      	movs	r2, #1
   10c4a:	0029      	movs	r1, r5
   10c4c:	4313      	orrs	r3, r2
   10c4e:	4311      	orrs	r1, r2
   10c50:	1965      	adds	r5, r4, r5
   10c52:	6061      	str	r1, [r4, #4]
   10c54:	0038      	movs	r0, r7
   10c56:	60b5      	str	r5, [r6, #8]
   10c58:	606b      	str	r3, [r5, #4]
   10c5a:	f000 f9cb 	bl	10ff4 <__malloc_unlock>
   10c5e:	0020      	movs	r0, r4
   10c60:	3008      	adds	r0, #8
   10c62:	e74a      	b.n	10afa <_malloc_r+0x19e>
   10c64:	2814      	cmp	r0, #20
   10c66:	d97a      	bls.n	10d5e <_malloc_r+0x402>
   10c68:	2854      	cmp	r0, #84	; 0x54
   10c6a:	d900      	bls.n	10c6e <_malloc_r+0x312>
   10c6c:	e0ba      	b.n	10de4 <_malloc_r+0x488>
   10c6e:	236e      	movs	r3, #110	; 0x6e
   10c70:	4698      	mov	r8, r3
   10c72:	0b28      	lsrs	r0, r5, #12
   10c74:	4480      	add	r8, r0
   10c76:	306f      	adds	r0, #111	; 0x6f
   10c78:	00c1      	lsls	r1, r0, #3
   10c7a:	e696      	b.n	109aa <_malloc_r+0x4e>
   10c7c:	0a5a      	lsrs	r2, r3, #9
   10c7e:	2a04      	cmp	r2, #4
   10c80:	d973      	bls.n	10d6a <_malloc_r+0x40e>
   10c82:	2a14      	cmp	r2, #20
   10c84:	d900      	bls.n	10c88 <_malloc_r+0x32c>
   10c86:	e0d0      	b.n	10e2a <_malloc_r+0x4ce>
   10c88:	0011      	movs	r1, r2
   10c8a:	325c      	adds	r2, #92	; 0x5c
   10c8c:	315b      	adds	r1, #91	; 0x5b
   10c8e:	00d2      	lsls	r2, r2, #3
   10c90:	2308      	movs	r3, #8
   10c92:	425b      	negs	r3, r3
   10c94:	469c      	mov	ip, r3
   10c96:	18b2      	adds	r2, r6, r2
   10c98:	4494      	add	ip, r2
   10c9a:	4663      	mov	r3, ip
   10c9c:	689a      	ldr	r2, [r3, #8]
   10c9e:	2303      	movs	r3, #3
   10ca0:	4698      	mov	r8, r3
   10ca2:	4594      	cmp	ip, r2
   10ca4:	d100      	bne.n	10ca8 <_malloc_r+0x34c>
   10ca6:	e0ab      	b.n	10e00 <_malloc_r+0x4a4>
   10ca8:	4643      	mov	r3, r8
   10caa:	6851      	ldr	r1, [r2, #4]
   10cac:	4399      	bics	r1, r3
   10cae:	4589      	cmp	r9, r1
   10cb0:	d300      	bcc.n	10cb4 <_malloc_r+0x358>
   10cb2:	e095      	b.n	10de0 <_malloc_r+0x484>
   10cb4:	6892      	ldr	r2, [r2, #8]
   10cb6:	4594      	cmp	ip, r2
   10cb8:	d1f6      	bne.n	10ca8 <_malloc_r+0x34c>
   10cba:	4663      	mov	r3, ip
   10cbc:	68da      	ldr	r2, [r3, #12]
   10cbe:	6873      	ldr	r3, [r6, #4]
   10cc0:	4661      	mov	r1, ip
   10cc2:	60e2      	str	r2, [r4, #12]
   10cc4:	60a1      	str	r1, [r4, #8]
   10cc6:	6094      	str	r4, [r2, #8]
   10cc8:	60cc      	str	r4, [r1, #12]
   10cca:	e6b6      	b.n	10a3a <_malloc_r+0xde>
   10ccc:	2301      	movs	r3, #1
   10cce:	1960      	adds	r0, r4, r5
   10cd0:	431d      	orrs	r5, r3
   10cd2:	6065      	str	r5, [r4, #4]
   10cd4:	6170      	str	r0, [r6, #20]
   10cd6:	6130      	str	r0, [r6, #16]
   10cd8:	60c2      	str	r2, [r0, #12]
   10cda:	6082      	str	r2, [r0, #8]
   10cdc:	001a      	movs	r2, r3
   10cde:	464b      	mov	r3, r9
   10ce0:	430a      	orrs	r2, r1
   10ce2:	6042      	str	r2, [r0, #4]
   10ce4:	0038      	movs	r0, r7
   10ce6:	50e1      	str	r1, [r4, r3]
   10ce8:	f000 f984 	bl	10ff4 <__malloc_unlock>
   10cec:	0020      	movs	r0, r4
   10cee:	3008      	adds	r0, #8
   10cf0:	e703      	b.n	10afa <_malloc_r+0x19e>
   10cf2:	46c0      	nop			; (mov r8, r8)
   10cf4:	200004b4 	.word	0x200004b4
   10cf8:	000001ff 	.word	0x000001ff
   10cfc:	200008bc 	.word	0x200008bc
   10d00:	20001250 	.word	0x20001250
   10d04:	0000100f 	.word	0x0000100f
   10d08:	20001220 	.word	0x20001220
   10d0c:	00001008 	.word	0x00001008
   10d10:	20001248 	.word	0x20001248
   10d14:	2000124c 	.word	0x2000124c
   10d18:	6873      	ldr	r3, [r6, #4]
   10d1a:	e68e      	b.n	10a3a <_malloc_r+0xde>
   10d1c:	2308      	movs	r3, #8
   10d1e:	469b      	mov	fp, r3
   10d20:	3b07      	subs	r3, #7
   10d22:	44dc      	add	ip, fp
   10d24:	469b      	mov	fp, r3
   10d26:	44da      	add	sl, fp
   10d28:	4643      	mov	r3, r8
   10d2a:	4652      	mov	r2, sl
   10d2c:	4213      	tst	r3, r2
   10d2e:	d000      	beq.n	10d32 <_malloc_r+0x3d6>
   10d30:	e697      	b.n	10a62 <_malloc_r+0x106>
   10d32:	e037      	b.n	10da4 <_malloc_r+0x448>
   10d34:	68dc      	ldr	r4, [r3, #12]
   10d36:	3002      	adds	r0, #2
   10d38:	42a3      	cmp	r3, r4
   10d3a:	d100      	bne.n	10d3e <_malloc_r+0x3e2>
   10d3c:	e655      	b.n	109ea <_malloc_r+0x8e>
   10d3e:	e6ca      	b.n	10ad6 <_malloc_r+0x17a>
   10d40:	2201      	movs	r2, #1
   10d42:	18e3      	adds	r3, r4, r3
   10d44:	6859      	ldr	r1, [r3, #4]
   10d46:	0038      	movs	r0, r7
   10d48:	430a      	orrs	r2, r1
   10d4a:	605a      	str	r2, [r3, #4]
   10d4c:	68e3      	ldr	r3, [r4, #12]
   10d4e:	68a2      	ldr	r2, [r4, #8]
   10d50:	60d3      	str	r3, [r2, #12]
   10d52:	609a      	str	r2, [r3, #8]
   10d54:	f000 f94e 	bl	10ff4 <__malloc_unlock>
   10d58:	0020      	movs	r0, r4
   10d5a:	3008      	adds	r0, #8
   10d5c:	e6cd      	b.n	10afa <_malloc_r+0x19e>
   10d5e:	235b      	movs	r3, #91	; 0x5b
   10d60:	4698      	mov	r8, r3
   10d62:	4480      	add	r8, r0
   10d64:	305c      	adds	r0, #92	; 0x5c
   10d66:	00c1      	lsls	r1, r0, #3
   10d68:	e61f      	b.n	109aa <_malloc_r+0x4e>
   10d6a:	099a      	lsrs	r2, r3, #6
   10d6c:	0011      	movs	r1, r2
   10d6e:	3239      	adds	r2, #57	; 0x39
   10d70:	3138      	adds	r1, #56	; 0x38
   10d72:	00d2      	lsls	r2, r2, #3
   10d74:	e78c      	b.n	10c90 <_malloc_r+0x334>
   10d76:	42b4      	cmp	r4, r6
   10d78:	d000      	beq.n	10d7c <_malloc_r+0x420>
   10d7a:	e75a      	b.n	10c32 <_malloc_r+0x2d6>
   10d7c:	4b4f      	ldr	r3, [pc, #316]	; (10ebc <_malloc_r+0x560>)
   10d7e:	9a00      	ldr	r2, [sp, #0]
   10d80:	469a      	mov	sl, r3
   10d82:	681b      	ldr	r3, [r3, #0]
   10d84:	469c      	mov	ip, r3
   10d86:	4653      	mov	r3, sl
   10d88:	4462      	add	r2, ip
   10d8a:	0011      	movs	r1, r2
   10d8c:	601a      	str	r2, [r3, #0]
   10d8e:	e6ff      	b.n	10b90 <_malloc_r+0x234>
   10d90:	2308      	movs	r3, #8
   10d92:	425b      	negs	r3, r3
   10d94:	469c      	mov	ip, r3
   10d96:	44e1      	add	r9, ip
   10d98:	464b      	mov	r3, r9
   10d9a:	689b      	ldr	r3, [r3, #8]
   10d9c:	3801      	subs	r0, #1
   10d9e:	4599      	cmp	r9, r3
   10da0:	d000      	beq.n	10da4 <_malloc_r+0x448>
   10da2:	e084      	b.n	10eae <_malloc_r+0x552>
   10da4:	4643      	mov	r3, r8
   10da6:	4203      	tst	r3, r0
   10da8:	d1f2      	bne.n	10d90 <_malloc_r+0x434>
   10daa:	6873      	ldr	r3, [r6, #4]
   10dac:	438b      	bics	r3, r1
   10dae:	6073      	str	r3, [r6, #4]
   10db0:	0049      	lsls	r1, r1, #1
   10db2:	4299      	cmp	r1, r3
   10db4:	d900      	bls.n	10db8 <_malloc_r+0x45c>
   10db6:	e6b5      	b.n	10b24 <_malloc_r+0x1c8>
   10db8:	2900      	cmp	r1, #0
   10dba:	d100      	bne.n	10dbe <_malloc_r+0x462>
   10dbc:	e6b2      	b.n	10b24 <_malloc_r+0x1c8>
   10dbe:	4650      	mov	r0, sl
   10dc0:	420b      	tst	r3, r1
   10dc2:	d000      	beq.n	10dc6 <_malloc_r+0x46a>
   10dc4:	e648      	b.n	10a58 <_malloc_r+0xfc>
   10dc6:	0049      	lsls	r1, r1, #1
   10dc8:	3004      	adds	r0, #4
   10dca:	420b      	tst	r3, r1
   10dcc:	d0fb      	beq.n	10dc6 <_malloc_r+0x46a>
   10dce:	e643      	b.n	10a58 <_malloc_r+0xfc>
   10dd0:	2301      	movs	r3, #1
   10dd2:	464a      	mov	r2, r9
   10dd4:	6053      	str	r3, [r2, #4]
   10dd6:	0038      	movs	r0, r7
   10dd8:	f000 f90c 	bl	10ff4 <__malloc_unlock>
   10ddc:	2000      	movs	r0, #0
   10dde:	e68c      	b.n	10afa <_malloc_r+0x19e>
   10de0:	4694      	mov	ip, r2
   10de2:	e76a      	b.n	10cba <_malloc_r+0x35e>
   10de4:	23aa      	movs	r3, #170	; 0xaa
   10de6:	005b      	lsls	r3, r3, #1
   10de8:	4298      	cmp	r0, r3
   10dea:	d811      	bhi.n	10e10 <_malloc_r+0x4b4>
   10dec:	3bdd      	subs	r3, #221	; 0xdd
   10dee:	4698      	mov	r8, r3
   10df0:	0be8      	lsrs	r0, r5, #15
   10df2:	4480      	add	r8, r0
   10df4:	3078      	adds	r0, #120	; 0x78
   10df6:	00c1      	lsls	r1, r0, #3
   10df8:	e5d7      	b.n	109aa <_malloc_r+0x4e>
   10dfa:	2380      	movs	r3, #128	; 0x80
   10dfc:	015b      	lsls	r3, r3, #5
   10dfe:	e6dd      	b.n	10bbc <_malloc_r+0x260>
   10e00:	1089      	asrs	r1, r1, #2
   10e02:	3b02      	subs	r3, #2
   10e04:	408b      	lsls	r3, r1
   10e06:	6872      	ldr	r2, [r6, #4]
   10e08:	4313      	orrs	r3, r2
   10e0a:	6073      	str	r3, [r6, #4]
   10e0c:	4662      	mov	r2, ip
   10e0e:	e757      	b.n	10cc0 <_malloc_r+0x364>
   10e10:	4b2b      	ldr	r3, [pc, #172]	; (10ec0 <_malloc_r+0x564>)
   10e12:	4298      	cmp	r0, r3
   10e14:	d81c      	bhi.n	10e50 <_malloc_r+0x4f4>
   10e16:	237c      	movs	r3, #124	; 0x7c
   10e18:	4698      	mov	r8, r3
   10e1a:	0ca8      	lsrs	r0, r5, #18
   10e1c:	4480      	add	r8, r0
   10e1e:	307d      	adds	r0, #125	; 0x7d
   10e20:	00c1      	lsls	r1, r0, #3
   10e22:	e5c2      	b.n	109aa <_malloc_r+0x4e>
   10e24:	3310      	adds	r3, #16
   10e26:	9300      	str	r3, [sp, #0]
   10e28:	e699      	b.n	10b5e <_malloc_r+0x202>
   10e2a:	2a54      	cmp	r2, #84	; 0x54
   10e2c:	d826      	bhi.n	10e7c <_malloc_r+0x520>
   10e2e:	464b      	mov	r3, r9
   10e30:	0b1a      	lsrs	r2, r3, #12
   10e32:	0011      	movs	r1, r2
   10e34:	326f      	adds	r2, #111	; 0x6f
   10e36:	316e      	adds	r1, #110	; 0x6e
   10e38:	00d2      	lsls	r2, r2, #3
   10e3a:	e729      	b.n	10c90 <_malloc_r+0x334>
   10e3c:	051b      	lsls	r3, r3, #20
   10e3e:	d000      	beq.n	10e42 <_malloc_r+0x4e6>
   10e40:	e6a6      	b.n	10b90 <_malloc_r+0x234>
   10e42:	2001      	movs	r0, #1
   10e44:	9b00      	ldr	r3, [sp, #0]
   10e46:	68b2      	ldr	r2, [r6, #8]
   10e48:	4443      	add	r3, r8
   10e4a:	4303      	orrs	r3, r0
   10e4c:	6053      	str	r3, [r2, #4]
   10e4e:	e6e6      	b.n	10c1e <_malloc_r+0x2c2>
   10e50:	21fe      	movs	r1, #254	; 0xfe
   10e52:	237e      	movs	r3, #126	; 0x7e
   10e54:	207f      	movs	r0, #127	; 0x7f
   10e56:	0089      	lsls	r1, r1, #2
   10e58:	4698      	mov	r8, r3
   10e5a:	e5a6      	b.n	109aa <_malloc_r+0x4e>
   10e5c:	2300      	movs	r3, #0
   10e5e:	2001      	movs	r0, #1
   10e60:	469b      	mov	fp, r3
   10e62:	e6bd      	b.n	10be0 <_malloc_r+0x284>
   10e64:	0021      	movs	r1, r4
   10e66:	0038      	movs	r0, r7
   10e68:	3108      	adds	r1, #8
   10e6a:	f7ff fa59 	bl	10320 <_free_r>
   10e6e:	4653      	mov	r3, sl
   10e70:	6819      	ldr	r1, [r3, #0]
   10e72:	e6d4      	b.n	10c1e <_malloc_r+0x2c2>
   10e74:	465b      	mov	r3, fp
   10e76:	464a      	mov	r2, r9
   10e78:	601a      	str	r2, [r3, #0]
   10e7a:	e694      	b.n	10ba6 <_malloc_r+0x24a>
   10e7c:	21aa      	movs	r1, #170	; 0xaa
   10e7e:	0049      	lsls	r1, r1, #1
   10e80:	428a      	cmp	r2, r1
   10e82:	d806      	bhi.n	10e92 <_malloc_r+0x536>
   10e84:	464b      	mov	r3, r9
   10e86:	0bda      	lsrs	r2, r3, #15
   10e88:	0011      	movs	r1, r2
   10e8a:	3278      	adds	r2, #120	; 0x78
   10e8c:	3177      	adds	r1, #119	; 0x77
   10e8e:	00d2      	lsls	r2, r2, #3
   10e90:	e6fe      	b.n	10c90 <_malloc_r+0x334>
   10e92:	490b      	ldr	r1, [pc, #44]	; (10ec0 <_malloc_r+0x564>)
   10e94:	428a      	cmp	r2, r1
   10e96:	d806      	bhi.n	10ea6 <_malloc_r+0x54a>
   10e98:	464b      	mov	r3, r9
   10e9a:	0c9a      	lsrs	r2, r3, #18
   10e9c:	0011      	movs	r1, r2
   10e9e:	327d      	adds	r2, #125	; 0x7d
   10ea0:	317c      	adds	r1, #124	; 0x7c
   10ea2:	00d2      	lsls	r2, r2, #3
   10ea4:	e6f4      	b.n	10c90 <_malloc_r+0x334>
   10ea6:	22fe      	movs	r2, #254	; 0xfe
   10ea8:	217e      	movs	r1, #126	; 0x7e
   10eaa:	0092      	lsls	r2, r2, #2
   10eac:	e6f0      	b.n	10c90 <_malloc_r+0x334>
   10eae:	6873      	ldr	r3, [r6, #4]
   10eb0:	e77e      	b.n	10db0 <_malloc_r+0x454>
   10eb2:	002b      	movs	r3, r5
   10eb4:	08e8      	lsrs	r0, r5, #3
   10eb6:	3308      	adds	r3, #8
   10eb8:	e605      	b.n	10ac6 <_malloc_r+0x16a>
   10eba:	46c0      	nop			; (mov r8, r8)
   10ebc:	20001220 	.word	0x20001220
   10ec0:	00000554 	.word	0x00000554

00010ec4 <memchr>:
   10ec4:	b570      	push	{r4, r5, r6, lr}
   10ec6:	b2cd      	uxtb	r5, r1
   10ec8:	0783      	lsls	r3, r0, #30
   10eca:	d034      	beq.n	10f36 <memchr+0x72>
   10ecc:	1e54      	subs	r4, r2, #1
   10ece:	2a00      	cmp	r2, #0
   10ed0:	d01b      	beq.n	10f0a <memchr+0x46>
   10ed2:	7803      	ldrb	r3, [r0, #0]
   10ed4:	42ab      	cmp	r3, r5
   10ed6:	d019      	beq.n	10f0c <memchr+0x48>
   10ed8:	2203      	movs	r2, #3
   10eda:	e004      	b.n	10ee6 <memchr+0x22>
   10edc:	3c01      	subs	r4, #1
   10ede:	d314      	bcc.n	10f0a <memchr+0x46>
   10ee0:	7803      	ldrb	r3, [r0, #0]
   10ee2:	42ab      	cmp	r3, r5
   10ee4:	d012      	beq.n	10f0c <memchr+0x48>
   10ee6:	3001      	adds	r0, #1
   10ee8:	4210      	tst	r0, r2
   10eea:	d1f7      	bne.n	10edc <memchr+0x18>
   10eec:	2c03      	cmp	r4, #3
   10eee:	d80e      	bhi.n	10f0e <memchr+0x4a>
   10ef0:	2c00      	cmp	r4, #0
   10ef2:	d00a      	beq.n	10f0a <memchr+0x46>
   10ef4:	7803      	ldrb	r3, [r0, #0]
   10ef6:	42ab      	cmp	r3, r5
   10ef8:	d008      	beq.n	10f0c <memchr+0x48>
   10efa:	1904      	adds	r4, r0, r4
   10efc:	e002      	b.n	10f04 <memchr+0x40>
   10efe:	7803      	ldrb	r3, [r0, #0]
   10f00:	42ab      	cmp	r3, r5
   10f02:	d003      	beq.n	10f0c <memchr+0x48>
   10f04:	3001      	adds	r0, #1
   10f06:	4284      	cmp	r4, r0
   10f08:	d1f9      	bne.n	10efe <memchr+0x3a>
   10f0a:	2000      	movs	r0, #0
   10f0c:	bd70      	pop	{r4, r5, r6, pc}
   10f0e:	22ff      	movs	r2, #255	; 0xff
   10f10:	060b      	lsls	r3, r1, #24
   10f12:	0c1b      	lsrs	r3, r3, #16
   10f14:	4011      	ands	r1, r2
   10f16:	4319      	orrs	r1, r3
   10f18:	040b      	lsls	r3, r1, #16
   10f1a:	4e08      	ldr	r6, [pc, #32]	; (10f3c <memchr+0x78>)
   10f1c:	4319      	orrs	r1, r3
   10f1e:	6803      	ldr	r3, [r0, #0]
   10f20:	4a07      	ldr	r2, [pc, #28]	; (10f40 <memchr+0x7c>)
   10f22:	404b      	eors	r3, r1
   10f24:	189a      	adds	r2, r3, r2
   10f26:	439a      	bics	r2, r3
   10f28:	4232      	tst	r2, r6
   10f2a:	d1e3      	bne.n	10ef4 <memchr+0x30>
   10f2c:	3c04      	subs	r4, #4
   10f2e:	3004      	adds	r0, #4
   10f30:	2c03      	cmp	r4, #3
   10f32:	d8f4      	bhi.n	10f1e <memchr+0x5a>
   10f34:	e7dc      	b.n	10ef0 <memchr+0x2c>
   10f36:	0014      	movs	r4, r2
   10f38:	e7d8      	b.n	10eec <memchr+0x28>
   10f3a:	46c0      	nop			; (mov r8, r8)
   10f3c:	80808080 	.word	0x80808080
   10f40:	fefefeff 	.word	0xfefefeff

00010f44 <memmove>:
   10f44:	b5f0      	push	{r4, r5, r6, r7, lr}
   10f46:	4288      	cmp	r0, r1
   10f48:	d90a      	bls.n	10f60 <memmove+0x1c>
   10f4a:	188b      	adds	r3, r1, r2
   10f4c:	4298      	cmp	r0, r3
   10f4e:	d207      	bcs.n	10f60 <memmove+0x1c>
   10f50:	1e53      	subs	r3, r2, #1
   10f52:	2a00      	cmp	r2, #0
   10f54:	d003      	beq.n	10f5e <memmove+0x1a>
   10f56:	5cca      	ldrb	r2, [r1, r3]
   10f58:	54c2      	strb	r2, [r0, r3]
   10f5a:	3b01      	subs	r3, #1
   10f5c:	d2fb      	bcs.n	10f56 <memmove+0x12>
   10f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10f60:	0005      	movs	r5, r0
   10f62:	2a0f      	cmp	r2, #15
   10f64:	d808      	bhi.n	10f78 <memmove+0x34>
   10f66:	2a00      	cmp	r2, #0
   10f68:	d0f9      	beq.n	10f5e <memmove+0x1a>
   10f6a:	2300      	movs	r3, #0
   10f6c:	5ccc      	ldrb	r4, [r1, r3]
   10f6e:	54ec      	strb	r4, [r5, r3]
   10f70:	3301      	adds	r3, #1
   10f72:	4293      	cmp	r3, r2
   10f74:	d1fa      	bne.n	10f6c <memmove+0x28>
   10f76:	e7f2      	b.n	10f5e <memmove+0x1a>
   10f78:	000b      	movs	r3, r1
   10f7a:	4303      	orrs	r3, r0
   10f7c:	079b      	lsls	r3, r3, #30
   10f7e:	d12d      	bne.n	10fdc <memmove+0x98>
   10f80:	0015      	movs	r5, r2
   10f82:	000c      	movs	r4, r1
   10f84:	0003      	movs	r3, r0
   10f86:	3d10      	subs	r5, #16
   10f88:	092f      	lsrs	r7, r5, #4
   10f8a:	3701      	adds	r7, #1
   10f8c:	013f      	lsls	r7, r7, #4
   10f8e:	19c7      	adds	r7, r0, r7
   10f90:	6826      	ldr	r6, [r4, #0]
   10f92:	601e      	str	r6, [r3, #0]
   10f94:	6866      	ldr	r6, [r4, #4]
   10f96:	605e      	str	r6, [r3, #4]
   10f98:	68a6      	ldr	r6, [r4, #8]
   10f9a:	609e      	str	r6, [r3, #8]
   10f9c:	68e6      	ldr	r6, [r4, #12]
   10f9e:	3410      	adds	r4, #16
   10fa0:	60de      	str	r6, [r3, #12]
   10fa2:	3310      	adds	r3, #16
   10fa4:	429f      	cmp	r7, r3
   10fa6:	d1f3      	bne.n	10f90 <memmove+0x4c>
   10fa8:	240f      	movs	r4, #15
   10faa:	43a5      	bics	r5, r4
   10fac:	3510      	adds	r5, #16
   10fae:	1949      	adds	r1, r1, r5
   10fb0:	4014      	ands	r4, r2
   10fb2:	1945      	adds	r5, r0, r5
   10fb4:	2c03      	cmp	r4, #3
   10fb6:	d913      	bls.n	10fe0 <memmove+0x9c>
   10fb8:	2300      	movs	r3, #0
   10fba:	1f27      	subs	r7, r4, #4
   10fbc:	08be      	lsrs	r6, r7, #2
   10fbe:	3601      	adds	r6, #1
   10fc0:	00b6      	lsls	r6, r6, #2
   10fc2:	58cc      	ldr	r4, [r1, r3]
   10fc4:	50ec      	str	r4, [r5, r3]
   10fc6:	3304      	adds	r3, #4
   10fc8:	42b3      	cmp	r3, r6
   10fca:	d1fa      	bne.n	10fc2 <memmove+0x7e>
   10fcc:	2603      	movs	r6, #3
   10fce:	43b7      	bics	r7, r6
   10fd0:	1d3c      	adds	r4, r7, #4
   10fd2:	1909      	adds	r1, r1, r4
   10fd4:	192d      	adds	r5, r5, r4
   10fd6:	4032      	ands	r2, r6
   10fd8:	d1c7      	bne.n	10f6a <memmove+0x26>
   10fda:	e7c0      	b.n	10f5e <memmove+0x1a>
   10fdc:	0005      	movs	r5, r0
   10fde:	e7c4      	b.n	10f6a <memmove+0x26>
   10fe0:	0022      	movs	r2, r4
   10fe2:	e7c0      	b.n	10f66 <memmove+0x22>

00010fe4 <__malloc_lock>:
   10fe4:	b510      	push	{r4, lr}
   10fe6:	4802      	ldr	r0, [pc, #8]	; (10ff0 <__malloc_lock+0xc>)
   10fe8:	f7ff fc32 	bl	10850 <__retarget_lock_acquire_recursive>
   10fec:	bd10      	pop	{r4, pc}
   10fee:	46c0      	nop			; (mov r8, r8)
   10ff0:	200012a4 	.word	0x200012a4

00010ff4 <__malloc_unlock>:
   10ff4:	b510      	push	{r4, lr}
   10ff6:	4802      	ldr	r0, [pc, #8]	; (11000 <__malloc_unlock+0xc>)
   10ff8:	f7ff fc2c 	bl	10854 <__retarget_lock_release_recursive>
   10ffc:	bd10      	pop	{r4, pc}
   10ffe:	46c0      	nop			; (mov r8, r8)
   11000:	200012a4 	.word	0x200012a4

00011004 <_Balloc>:
   11004:	b570      	push	{r4, r5, r6, lr}
   11006:	0004      	movs	r4, r0
   11008:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   1100a:	000d      	movs	r5, r1
   1100c:	2800      	cmp	r0, #0
   1100e:	d00a      	beq.n	11026 <_Balloc+0x22>
   11010:	00ab      	lsls	r3, r5, #2
   11012:	18c3      	adds	r3, r0, r3
   11014:	6818      	ldr	r0, [r3, #0]
   11016:	2800      	cmp	r0, #0
   11018:	d00f      	beq.n	1103a <_Balloc+0x36>
   1101a:	6802      	ldr	r2, [r0, #0]
   1101c:	601a      	str	r2, [r3, #0]
   1101e:	2300      	movs	r3, #0
   11020:	6103      	str	r3, [r0, #16]
   11022:	60c3      	str	r3, [r0, #12]
   11024:	bd70      	pop	{r4, r5, r6, pc}
   11026:	2221      	movs	r2, #33	; 0x21
   11028:	2104      	movs	r1, #4
   1102a:	0020      	movs	r0, r4
   1102c:	f000 fdb0 	bl	11b90 <_calloc_r>
   11030:	64e0      	str	r0, [r4, #76]	; 0x4c
   11032:	2800      	cmp	r0, #0
   11034:	d1ec      	bne.n	11010 <_Balloc+0xc>
   11036:	2000      	movs	r0, #0
   11038:	e7f4      	b.n	11024 <_Balloc+0x20>
   1103a:	2601      	movs	r6, #1
   1103c:	40ae      	lsls	r6, r5
   1103e:	1d72      	adds	r2, r6, #5
   11040:	0092      	lsls	r2, r2, #2
   11042:	2101      	movs	r1, #1
   11044:	0020      	movs	r0, r4
   11046:	f000 fda3 	bl	11b90 <_calloc_r>
   1104a:	2800      	cmp	r0, #0
   1104c:	d0f3      	beq.n	11036 <_Balloc+0x32>
   1104e:	6045      	str	r5, [r0, #4]
   11050:	6086      	str	r6, [r0, #8]
   11052:	e7e4      	b.n	1101e <_Balloc+0x1a>

00011054 <_Bfree>:
   11054:	2900      	cmp	r1, #0
   11056:	d006      	beq.n	11066 <_Bfree+0x12>
   11058:	684b      	ldr	r3, [r1, #4]
   1105a:	009a      	lsls	r2, r3, #2
   1105c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   1105e:	189b      	adds	r3, r3, r2
   11060:	681a      	ldr	r2, [r3, #0]
   11062:	600a      	str	r2, [r1, #0]
   11064:	6019      	str	r1, [r3, #0]
   11066:	4770      	bx	lr

00011068 <__multadd>:
   11068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1106a:	46ce      	mov	lr, r9
   1106c:	4647      	mov	r7, r8
   1106e:	4681      	mov	r9, r0
   11070:	0008      	movs	r0, r1
   11072:	b580      	push	{r7, lr}
   11074:	000d      	movs	r5, r1
   11076:	690c      	ldr	r4, [r1, #16]
   11078:	001f      	movs	r7, r3
   1107a:	2100      	movs	r1, #0
   1107c:	3014      	adds	r0, #20
   1107e:	6803      	ldr	r3, [r0, #0]
   11080:	3101      	adds	r1, #1
   11082:	041e      	lsls	r6, r3, #16
   11084:	0c36      	lsrs	r6, r6, #16
   11086:	4356      	muls	r6, r2
   11088:	0c1b      	lsrs	r3, r3, #16
   1108a:	4353      	muls	r3, r2
   1108c:	19f6      	adds	r6, r6, r7
   1108e:	0c37      	lsrs	r7, r6, #16
   11090:	19db      	adds	r3, r3, r7
   11092:	0436      	lsls	r6, r6, #16
   11094:	0c1f      	lsrs	r7, r3, #16
   11096:	0c36      	lsrs	r6, r6, #16
   11098:	041b      	lsls	r3, r3, #16
   1109a:	199b      	adds	r3, r3, r6
   1109c:	c008      	stmia	r0!, {r3}
   1109e:	428c      	cmp	r4, r1
   110a0:	dced      	bgt.n	1107e <__multadd+0x16>
   110a2:	2f00      	cmp	r7, #0
   110a4:	d008      	beq.n	110b8 <__multadd+0x50>
   110a6:	68ab      	ldr	r3, [r5, #8]
   110a8:	429c      	cmp	r4, r3
   110aa:	da0a      	bge.n	110c2 <__multadd+0x5a>
   110ac:	1d23      	adds	r3, r4, #4
   110ae:	009b      	lsls	r3, r3, #2
   110b0:	18eb      	adds	r3, r5, r3
   110b2:	3401      	adds	r4, #1
   110b4:	605f      	str	r7, [r3, #4]
   110b6:	612c      	str	r4, [r5, #16]
   110b8:	0028      	movs	r0, r5
   110ba:	bc0c      	pop	{r2, r3}
   110bc:	4690      	mov	r8, r2
   110be:	4699      	mov	r9, r3
   110c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   110c2:	686b      	ldr	r3, [r5, #4]
   110c4:	4648      	mov	r0, r9
   110c6:	1c59      	adds	r1, r3, #1
   110c8:	f7ff ff9c 	bl	11004 <_Balloc>
   110cc:	0029      	movs	r1, r5
   110ce:	692b      	ldr	r3, [r5, #16]
   110d0:	4680      	mov	r8, r0
   110d2:	1c9a      	adds	r2, r3, #2
   110d4:	0092      	lsls	r2, r2, #2
   110d6:	310c      	adds	r1, #12
   110d8:	300c      	adds	r0, #12
   110da:	f7fc f85b 	bl	d194 <memcpy>
   110de:	686b      	ldr	r3, [r5, #4]
   110e0:	009a      	lsls	r2, r3, #2
   110e2:	464b      	mov	r3, r9
   110e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   110e6:	189b      	adds	r3, r3, r2
   110e8:	681a      	ldr	r2, [r3, #0]
   110ea:	602a      	str	r2, [r5, #0]
   110ec:	601d      	str	r5, [r3, #0]
   110ee:	4645      	mov	r5, r8
   110f0:	e7dc      	b.n	110ac <__multadd+0x44>
   110f2:	46c0      	nop			; (mov r8, r8)

000110f4 <__hi0bits>:
   110f4:	0003      	movs	r3, r0
   110f6:	0c02      	lsrs	r2, r0, #16
   110f8:	2000      	movs	r0, #0
   110fa:	2a00      	cmp	r2, #0
   110fc:	d101      	bne.n	11102 <__hi0bits+0xe>
   110fe:	041b      	lsls	r3, r3, #16
   11100:	3010      	adds	r0, #16
   11102:	0e1a      	lsrs	r2, r3, #24
   11104:	d101      	bne.n	1110a <__hi0bits+0x16>
   11106:	3008      	adds	r0, #8
   11108:	021b      	lsls	r3, r3, #8
   1110a:	0f1a      	lsrs	r2, r3, #28
   1110c:	d101      	bne.n	11112 <__hi0bits+0x1e>
   1110e:	3004      	adds	r0, #4
   11110:	011b      	lsls	r3, r3, #4
   11112:	0f9a      	lsrs	r2, r3, #30
   11114:	d101      	bne.n	1111a <__hi0bits+0x26>
   11116:	3002      	adds	r0, #2
   11118:	009b      	lsls	r3, r3, #2
   1111a:	2b00      	cmp	r3, #0
   1111c:	db03      	blt.n	11126 <__hi0bits+0x32>
   1111e:	3001      	adds	r0, #1
   11120:	005b      	lsls	r3, r3, #1
   11122:	d400      	bmi.n	11126 <__hi0bits+0x32>
   11124:	2020      	movs	r0, #32
   11126:	4770      	bx	lr

00011128 <__lo0bits>:
   11128:	6803      	ldr	r3, [r0, #0]
   1112a:	075a      	lsls	r2, r3, #29
   1112c:	d009      	beq.n	11142 <__lo0bits+0x1a>
   1112e:	2200      	movs	r2, #0
   11130:	07d9      	lsls	r1, r3, #31
   11132:	d404      	bmi.n	1113e <__lo0bits+0x16>
   11134:	079a      	lsls	r2, r3, #30
   11136:	d420      	bmi.n	1117a <__lo0bits+0x52>
   11138:	2202      	movs	r2, #2
   1113a:	089b      	lsrs	r3, r3, #2
   1113c:	6003      	str	r3, [r0, #0]
   1113e:	0010      	movs	r0, r2
   11140:	4770      	bx	lr
   11142:	0419      	lsls	r1, r3, #16
   11144:	2200      	movs	r2, #0
   11146:	2900      	cmp	r1, #0
   11148:	d101      	bne.n	1114e <__lo0bits+0x26>
   1114a:	0c1b      	lsrs	r3, r3, #16
   1114c:	3210      	adds	r2, #16
   1114e:	21ff      	movs	r1, #255	; 0xff
   11150:	4219      	tst	r1, r3
   11152:	d101      	bne.n	11158 <__lo0bits+0x30>
   11154:	3208      	adds	r2, #8
   11156:	0a1b      	lsrs	r3, r3, #8
   11158:	0719      	lsls	r1, r3, #28
   1115a:	d101      	bne.n	11160 <__lo0bits+0x38>
   1115c:	3204      	adds	r2, #4
   1115e:	091b      	lsrs	r3, r3, #4
   11160:	0799      	lsls	r1, r3, #30
   11162:	d101      	bne.n	11168 <__lo0bits+0x40>
   11164:	3202      	adds	r2, #2
   11166:	089b      	lsrs	r3, r3, #2
   11168:	07d9      	lsls	r1, r3, #31
   1116a:	d404      	bmi.n	11176 <__lo0bits+0x4e>
   1116c:	085b      	lsrs	r3, r3, #1
   1116e:	d101      	bne.n	11174 <__lo0bits+0x4c>
   11170:	2220      	movs	r2, #32
   11172:	e7e4      	b.n	1113e <__lo0bits+0x16>
   11174:	3201      	adds	r2, #1
   11176:	6003      	str	r3, [r0, #0]
   11178:	e7e1      	b.n	1113e <__lo0bits+0x16>
   1117a:	085b      	lsrs	r3, r3, #1
   1117c:	6003      	str	r3, [r0, #0]
   1117e:	2201      	movs	r2, #1
   11180:	e7dd      	b.n	1113e <__lo0bits+0x16>
   11182:	46c0      	nop			; (mov r8, r8)

00011184 <__i2b>:
   11184:	b510      	push	{r4, lr}
   11186:	000c      	movs	r4, r1
   11188:	2101      	movs	r1, #1
   1118a:	f7ff ff3b 	bl	11004 <_Balloc>
   1118e:	2301      	movs	r3, #1
   11190:	6144      	str	r4, [r0, #20]
   11192:	6103      	str	r3, [r0, #16]
   11194:	bd10      	pop	{r4, pc}
   11196:	46c0      	nop			; (mov r8, r8)

00011198 <__multiply>:
   11198:	b5f0      	push	{r4, r5, r6, r7, lr}
   1119a:	4657      	mov	r7, sl
   1119c:	464e      	mov	r6, r9
   1119e:	4645      	mov	r5, r8
   111a0:	46de      	mov	lr, fp
   111a2:	b5e0      	push	{r5, r6, r7, lr}
   111a4:	6914      	ldr	r4, [r2, #16]
   111a6:	690e      	ldr	r6, [r1, #16]
   111a8:	b085      	sub	sp, #20
   111aa:	000f      	movs	r7, r1
   111ac:	0015      	movs	r5, r2
   111ae:	42a6      	cmp	r6, r4
   111b0:	da04      	bge.n	111bc <__multiply+0x24>
   111b2:	0033      	movs	r3, r6
   111b4:	0017      	movs	r7, r2
   111b6:	0026      	movs	r6, r4
   111b8:	000d      	movs	r5, r1
   111ba:	001c      	movs	r4, r3
   111bc:	1933      	adds	r3, r6, r4
   111be:	4698      	mov	r8, r3
   111c0:	68bb      	ldr	r3, [r7, #8]
   111c2:	6879      	ldr	r1, [r7, #4]
   111c4:	4598      	cmp	r8, r3
   111c6:	dd00      	ble.n	111ca <__multiply+0x32>
   111c8:	3101      	adds	r1, #1
   111ca:	f7ff ff1b 	bl	11004 <_Balloc>
   111ce:	2214      	movs	r2, #20
   111d0:	0003      	movs	r3, r0
   111d2:	4694      	mov	ip, r2
   111d4:	4463      	add	r3, ip
   111d6:	469b      	mov	fp, r3
   111d8:	4643      	mov	r3, r8
   111da:	009b      	lsls	r3, r3, #2
   111dc:	445b      	add	r3, fp
   111de:	0019      	movs	r1, r3
   111e0:	9302      	str	r3, [sp, #8]
   111e2:	9003      	str	r0, [sp, #12]
   111e4:	465b      	mov	r3, fp
   111e6:	2200      	movs	r2, #0
   111e8:	458b      	cmp	fp, r1
   111ea:	d203      	bcs.n	111f4 <__multiply+0x5c>
   111ec:	9902      	ldr	r1, [sp, #8]
   111ee:	c304      	stmia	r3!, {r2}
   111f0:	4299      	cmp	r1, r3
   111f2:	d8fc      	bhi.n	111ee <__multiply+0x56>
   111f4:	2314      	movs	r3, #20
   111f6:	00a4      	lsls	r4, r4, #2
   111f8:	469a      	mov	sl, r3
   111fa:	3714      	adds	r7, #20
   111fc:	0023      	movs	r3, r4
   111fe:	46bc      	mov	ip, r7
   11200:	44aa      	add	sl, r5
   11202:	00b6      	lsls	r6, r6, #2
   11204:	4453      	add	r3, sl
   11206:	9700      	str	r7, [sp, #0]
   11208:	44b4      	add	ip, r6
   1120a:	9301      	str	r3, [sp, #4]
   1120c:	459a      	cmp	sl, r3
   1120e:	d24f      	bcs.n	112b0 <__multiply+0x118>
   11210:	4653      	mov	r3, sl
   11212:	681b      	ldr	r3, [r3, #0]
   11214:	041e      	lsls	r6, r3, #16
   11216:	0c36      	lsrs	r6, r6, #16
   11218:	d020      	beq.n	1125c <__multiply+0xc4>
   1121a:	465c      	mov	r4, fp
   1121c:	2700      	movs	r7, #0
   1121e:	9d00      	ldr	r5, [sp, #0]
   11220:	0021      	movs	r1, r4
   11222:	cc08      	ldmia	r4!, {r3}
   11224:	cd04      	ldmia	r5!, {r2}
   11226:	4699      	mov	r9, r3
   11228:	4648      	mov	r0, r9
   1122a:	0413      	lsls	r3, r2, #16
   1122c:	0c1b      	lsrs	r3, r3, #16
   1122e:	4373      	muls	r3, r6
   11230:	0400      	lsls	r0, r0, #16
   11232:	0c00      	lsrs	r0, r0, #16
   11234:	181b      	adds	r3, r3, r0
   11236:	19d8      	adds	r0, r3, r7
   11238:	0c13      	lsrs	r3, r2, #16
   1123a:	464a      	mov	r2, r9
   1123c:	4373      	muls	r3, r6
   1123e:	0c12      	lsrs	r2, r2, #16
   11240:	189b      	adds	r3, r3, r2
   11242:	0c02      	lsrs	r2, r0, #16
   11244:	189b      	adds	r3, r3, r2
   11246:	0402      	lsls	r2, r0, #16
   11248:	0c1f      	lsrs	r7, r3, #16
   1124a:	0c12      	lsrs	r2, r2, #16
   1124c:	041b      	lsls	r3, r3, #16
   1124e:	4313      	orrs	r3, r2
   11250:	600b      	str	r3, [r1, #0]
   11252:	45ac      	cmp	ip, r5
   11254:	d8e4      	bhi.n	11220 <__multiply+0x88>
   11256:	4653      	mov	r3, sl
   11258:	6027      	str	r7, [r4, #0]
   1125a:	681b      	ldr	r3, [r3, #0]
   1125c:	0c1e      	lsrs	r6, r3, #16
   1125e:	d020      	beq.n	112a2 <__multiply+0x10a>
   11260:	465b      	mov	r3, fp
   11262:	2100      	movs	r1, #0
   11264:	681b      	ldr	r3, [r3, #0]
   11266:	465c      	mov	r4, fp
   11268:	0018      	movs	r0, r3
   1126a:	000f      	movs	r7, r1
   1126c:	4662      	mov	r2, ip
   1126e:	9d00      	ldr	r5, [sp, #0]
   11270:	8829      	ldrh	r1, [r5, #0]
   11272:	0c00      	lsrs	r0, r0, #16
   11274:	4371      	muls	r1, r6
   11276:	1809      	adds	r1, r1, r0
   11278:	19c9      	adds	r1, r1, r7
   1127a:	041b      	lsls	r3, r3, #16
   1127c:	0408      	lsls	r0, r1, #16
   1127e:	0c1b      	lsrs	r3, r3, #16
   11280:	4303      	orrs	r3, r0
   11282:	6023      	str	r3, [r4, #0]
   11284:	cd08      	ldmia	r5!, {r3}
   11286:	6860      	ldr	r0, [r4, #4]
   11288:	0c1b      	lsrs	r3, r3, #16
   1128a:	4373      	muls	r3, r6
   1128c:	0407      	lsls	r7, r0, #16
   1128e:	0c3f      	lsrs	r7, r7, #16
   11290:	19db      	adds	r3, r3, r7
   11292:	0c09      	lsrs	r1, r1, #16
   11294:	185b      	adds	r3, r3, r1
   11296:	0c1f      	lsrs	r7, r3, #16
   11298:	3404      	adds	r4, #4
   1129a:	42aa      	cmp	r2, r5
   1129c:	d8e8      	bhi.n	11270 <__multiply+0xd8>
   1129e:	4694      	mov	ip, r2
   112a0:	6023      	str	r3, [r4, #0]
   112a2:	2304      	movs	r3, #4
   112a4:	4699      	mov	r9, r3
   112a6:	9b01      	ldr	r3, [sp, #4]
   112a8:	44ca      	add	sl, r9
   112aa:	44cb      	add	fp, r9
   112ac:	4553      	cmp	r3, sl
   112ae:	d8af      	bhi.n	11210 <__multiply+0x78>
   112b0:	4643      	mov	r3, r8
   112b2:	2b00      	cmp	r3, #0
   112b4:	dd0e      	ble.n	112d4 <__multiply+0x13c>
   112b6:	9b02      	ldr	r3, [sp, #8]
   112b8:	3b04      	subs	r3, #4
   112ba:	681a      	ldr	r2, [r3, #0]
   112bc:	2a00      	cmp	r2, #0
   112be:	d109      	bne.n	112d4 <__multiply+0x13c>
   112c0:	4642      	mov	r2, r8
   112c2:	e003      	b.n	112cc <__multiply+0x134>
   112c4:	3b04      	subs	r3, #4
   112c6:	6819      	ldr	r1, [r3, #0]
   112c8:	2900      	cmp	r1, #0
   112ca:	d102      	bne.n	112d2 <__multiply+0x13a>
   112cc:	3a01      	subs	r2, #1
   112ce:	2a00      	cmp	r2, #0
   112d0:	d1f8      	bne.n	112c4 <__multiply+0x12c>
   112d2:	4690      	mov	r8, r2
   112d4:	9b03      	ldr	r3, [sp, #12]
   112d6:	4642      	mov	r2, r8
   112d8:	0018      	movs	r0, r3
   112da:	611a      	str	r2, [r3, #16]
   112dc:	b005      	add	sp, #20
   112de:	bc3c      	pop	{r2, r3, r4, r5}
   112e0:	4690      	mov	r8, r2
   112e2:	4699      	mov	r9, r3
   112e4:	46a2      	mov	sl, r4
   112e6:	46ab      	mov	fp, r5
   112e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   112ea:	46c0      	nop			; (mov r8, r8)

000112ec <__pow5mult>:
   112ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   112ee:	4647      	mov	r7, r8
   112f0:	46ce      	mov	lr, r9
   112f2:	2303      	movs	r3, #3
   112f4:	b580      	push	{r7, lr}
   112f6:	4680      	mov	r8, r0
   112f8:	000f      	movs	r7, r1
   112fa:	0014      	movs	r4, r2
   112fc:	4013      	ands	r3, r2
   112fe:	d13a      	bne.n	11376 <__pow5mult+0x8a>
   11300:	10a4      	asrs	r4, r4, #2
   11302:	003e      	movs	r6, r7
   11304:	2c00      	cmp	r4, #0
   11306:	d025      	beq.n	11354 <__pow5mult+0x68>
   11308:	4643      	mov	r3, r8
   1130a:	6c9d      	ldr	r5, [r3, #72]	; 0x48
   1130c:	2d00      	cmp	r5, #0
   1130e:	d03b      	beq.n	11388 <__pow5mult+0x9c>
   11310:	003e      	movs	r6, r7
   11312:	2300      	movs	r3, #0
   11314:	2701      	movs	r7, #1
   11316:	4699      	mov	r9, r3
   11318:	4227      	tst	r7, r4
   1131a:	d107      	bne.n	1132c <__pow5mult+0x40>
   1131c:	1064      	asrs	r4, r4, #1
   1131e:	d019      	beq.n	11354 <__pow5mult+0x68>
   11320:	6828      	ldr	r0, [r5, #0]
   11322:	2800      	cmp	r0, #0
   11324:	d01b      	beq.n	1135e <__pow5mult+0x72>
   11326:	0005      	movs	r5, r0
   11328:	4227      	tst	r7, r4
   1132a:	d0f7      	beq.n	1131c <__pow5mult+0x30>
   1132c:	002a      	movs	r2, r5
   1132e:	0031      	movs	r1, r6
   11330:	4640      	mov	r0, r8
   11332:	f7ff ff31 	bl	11198 <__multiply>
   11336:	2e00      	cmp	r6, #0
   11338:	d01b      	beq.n	11372 <__pow5mult+0x86>
   1133a:	4642      	mov	r2, r8
   1133c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
   1133e:	6873      	ldr	r3, [r6, #4]
   11340:	4694      	mov	ip, r2
   11342:	009b      	lsls	r3, r3, #2
   11344:	4463      	add	r3, ip
   11346:	681a      	ldr	r2, [r3, #0]
   11348:	1064      	asrs	r4, r4, #1
   1134a:	6032      	str	r2, [r6, #0]
   1134c:	601e      	str	r6, [r3, #0]
   1134e:	0006      	movs	r6, r0
   11350:	2c00      	cmp	r4, #0
   11352:	d1e5      	bne.n	11320 <__pow5mult+0x34>
   11354:	0030      	movs	r0, r6
   11356:	bc0c      	pop	{r2, r3}
   11358:	4690      	mov	r8, r2
   1135a:	4699      	mov	r9, r3
   1135c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1135e:	002a      	movs	r2, r5
   11360:	0029      	movs	r1, r5
   11362:	4640      	mov	r0, r8
   11364:	f7ff ff18 	bl	11198 <__multiply>
   11368:	464b      	mov	r3, r9
   1136a:	6028      	str	r0, [r5, #0]
   1136c:	6003      	str	r3, [r0, #0]
   1136e:	0005      	movs	r5, r0
   11370:	e7da      	b.n	11328 <__pow5mult+0x3c>
   11372:	0006      	movs	r6, r0
   11374:	e7d2      	b.n	1131c <__pow5mult+0x30>
   11376:	4a0b      	ldr	r2, [pc, #44]	; (113a4 <__pow5mult+0xb8>)
   11378:	3b01      	subs	r3, #1
   1137a:	009b      	lsls	r3, r3, #2
   1137c:	589a      	ldr	r2, [r3, r2]
   1137e:	2300      	movs	r3, #0
   11380:	f7ff fe72 	bl	11068 <__multadd>
   11384:	0007      	movs	r7, r0
   11386:	e7bb      	b.n	11300 <__pow5mult+0x14>
   11388:	2101      	movs	r1, #1
   1138a:	4640      	mov	r0, r8
   1138c:	f7ff fe3a 	bl	11004 <_Balloc>
   11390:	4b05      	ldr	r3, [pc, #20]	; (113a8 <__pow5mult+0xbc>)
   11392:	0005      	movs	r5, r0
   11394:	6143      	str	r3, [r0, #20]
   11396:	2301      	movs	r3, #1
   11398:	6103      	str	r3, [r0, #16]
   1139a:	4643      	mov	r3, r8
   1139c:	6498      	str	r0, [r3, #72]	; 0x48
   1139e:	2300      	movs	r3, #0
   113a0:	6003      	str	r3, [r0, #0]
   113a2:	e7b5      	b.n	11310 <__pow5mult+0x24>
   113a4:	00012738 	.word	0x00012738
   113a8:	00000271 	.word	0x00000271

000113ac <__lshift>:
   113ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   113ae:	464e      	mov	r6, r9
   113b0:	4645      	mov	r5, r8
   113b2:	46de      	mov	lr, fp
   113b4:	4657      	mov	r7, sl
   113b6:	b5e0      	push	{r5, r6, r7, lr}
   113b8:	000e      	movs	r6, r1
   113ba:	6933      	ldr	r3, [r6, #16]
   113bc:	1154      	asrs	r4, r2, #5
   113be:	4698      	mov	r8, r3
   113c0:	44a0      	add	r8, r4
   113c2:	4643      	mov	r3, r8
   113c4:	1c5d      	adds	r5, r3, #1
   113c6:	68b3      	ldr	r3, [r6, #8]
   113c8:	4683      	mov	fp, r0
   113ca:	4691      	mov	r9, r2
   113cc:	6849      	ldr	r1, [r1, #4]
   113ce:	429d      	cmp	r5, r3
   113d0:	dd03      	ble.n	113da <__lshift+0x2e>
   113d2:	3101      	adds	r1, #1
   113d4:	005b      	lsls	r3, r3, #1
   113d6:	429d      	cmp	r5, r3
   113d8:	dcfb      	bgt.n	113d2 <__lshift+0x26>
   113da:	4658      	mov	r0, fp
   113dc:	f7ff fe12 	bl	11004 <_Balloc>
   113e0:	0003      	movs	r3, r0
   113e2:	4684      	mov	ip, r0
   113e4:	3314      	adds	r3, #20
   113e6:	2c00      	cmp	r4, #0
   113e8:	dd06      	ble.n	113f8 <__lshift+0x4c>
   113ea:	2100      	movs	r1, #0
   113ec:	00a4      	lsls	r4, r4, #2
   113ee:	001a      	movs	r2, r3
   113f0:	191b      	adds	r3, r3, r4
   113f2:	c202      	stmia	r2!, {r1}
   113f4:	4293      	cmp	r3, r2
   113f6:	d1fc      	bne.n	113f2 <__lshift+0x46>
   113f8:	6932      	ldr	r2, [r6, #16]
   113fa:	4648      	mov	r0, r9
   113fc:	0097      	lsls	r7, r2, #2
   113fe:	0031      	movs	r1, r6
   11400:	221f      	movs	r2, #31
   11402:	3114      	adds	r1, #20
   11404:	4010      	ands	r0, r2
   11406:	19cf      	adds	r7, r1, r7
   11408:	4681      	mov	r9, r0
   1140a:	2800      	cmp	r0, #0
   1140c:	d025      	beq.n	1145a <__lshift+0xae>
   1140e:	2220      	movs	r2, #32
   11410:	1a12      	subs	r2, r2, r0
   11412:	4692      	mov	sl, r2
   11414:	2200      	movs	r2, #0
   11416:	4648      	mov	r0, r9
   11418:	680c      	ldr	r4, [r1, #0]
   1141a:	4084      	lsls	r4, r0
   1141c:	4650      	mov	r0, sl
   1141e:	4314      	orrs	r4, r2
   11420:	601c      	str	r4, [r3, #0]
   11422:	c904      	ldmia	r1!, {r2}
   11424:	3304      	adds	r3, #4
   11426:	40c2      	lsrs	r2, r0
   11428:	428f      	cmp	r7, r1
   1142a:	d8f4      	bhi.n	11416 <__lshift+0x6a>
   1142c:	601a      	str	r2, [r3, #0]
   1142e:	2a00      	cmp	r2, #0
   11430:	d001      	beq.n	11436 <__lshift+0x8a>
   11432:	4645      	mov	r5, r8
   11434:	3502      	adds	r5, #2
   11436:	4663      	mov	r3, ip
   11438:	3d01      	subs	r5, #1
   1143a:	611d      	str	r5, [r3, #16]
   1143c:	6873      	ldr	r3, [r6, #4]
   1143e:	4660      	mov	r0, ip
   11440:	009a      	lsls	r2, r3, #2
   11442:	465b      	mov	r3, fp
   11444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   11446:	189b      	adds	r3, r3, r2
   11448:	681a      	ldr	r2, [r3, #0]
   1144a:	6032      	str	r2, [r6, #0]
   1144c:	601e      	str	r6, [r3, #0]
   1144e:	bc3c      	pop	{r2, r3, r4, r5}
   11450:	4690      	mov	r8, r2
   11452:	4699      	mov	r9, r3
   11454:	46a2      	mov	sl, r4
   11456:	46ab      	mov	fp, r5
   11458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1145a:	c904      	ldmia	r1!, {r2}
   1145c:	c304      	stmia	r3!, {r2}
   1145e:	428f      	cmp	r7, r1
   11460:	d9e9      	bls.n	11436 <__lshift+0x8a>
   11462:	c904      	ldmia	r1!, {r2}
   11464:	c304      	stmia	r3!, {r2}
   11466:	428f      	cmp	r7, r1
   11468:	d8f7      	bhi.n	1145a <__lshift+0xae>
   1146a:	e7e4      	b.n	11436 <__lshift+0x8a>

0001146c <__mcmp>:
   1146c:	690a      	ldr	r2, [r1, #16]
   1146e:	6903      	ldr	r3, [r0, #16]
   11470:	b530      	push	{r4, r5, lr}
   11472:	0005      	movs	r5, r0
   11474:	1a98      	subs	r0, r3, r2
   11476:	d111      	bne.n	1149c <__mcmp+0x30>
   11478:	0092      	lsls	r2, r2, #2
   1147a:	3514      	adds	r5, #20
   1147c:	3114      	adds	r1, #20
   1147e:	18ab      	adds	r3, r5, r2
   11480:	1889      	adds	r1, r1, r2
   11482:	e001      	b.n	11488 <__mcmp+0x1c>
   11484:	429d      	cmp	r5, r3
   11486:	d209      	bcs.n	1149c <__mcmp+0x30>
   11488:	3b04      	subs	r3, #4
   1148a:	3904      	subs	r1, #4
   1148c:	681c      	ldr	r4, [r3, #0]
   1148e:	680a      	ldr	r2, [r1, #0]
   11490:	4294      	cmp	r4, r2
   11492:	d0f7      	beq.n	11484 <__mcmp+0x18>
   11494:	4294      	cmp	r4, r2
   11496:	4180      	sbcs	r0, r0
   11498:	2201      	movs	r2, #1
   1149a:	4310      	orrs	r0, r2
   1149c:	bd30      	pop	{r4, r5, pc}
   1149e:	46c0      	nop			; (mov r8, r8)

000114a0 <__mdiff>:
   114a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   114a2:	4645      	mov	r5, r8
   114a4:	46de      	mov	lr, fp
   114a6:	4657      	mov	r7, sl
   114a8:	464e      	mov	r6, r9
   114aa:	0014      	movs	r4, r2
   114ac:	690b      	ldr	r3, [r1, #16]
   114ae:	6912      	ldr	r2, [r2, #16]
   114b0:	b5e0      	push	{r5, r6, r7, lr}
   114b2:	4688      	mov	r8, r1
   114b4:	1a9d      	subs	r5, r3, r2
   114b6:	d11a      	bne.n	114ee <__mdiff+0x4e>
   114b8:	000f      	movs	r7, r1
   114ba:	2114      	movs	r1, #20
   114bc:	468c      	mov	ip, r1
   114be:	0092      	lsls	r2, r2, #2
   114c0:	3714      	adds	r7, #20
   114c2:	44a4      	add	ip, r4
   114c4:	18bb      	adds	r3, r7, r2
   114c6:	4462      	add	r2, ip
   114c8:	e002      	b.n	114d0 <__mdiff+0x30>
   114ca:	429f      	cmp	r7, r3
   114cc:	d300      	bcc.n	114d0 <__mdiff+0x30>
   114ce:	e070      	b.n	115b2 <__mdiff+0x112>
   114d0:	3b04      	subs	r3, #4
   114d2:	3a04      	subs	r2, #4
   114d4:	681e      	ldr	r6, [r3, #0]
   114d6:	6811      	ldr	r1, [r2, #0]
   114d8:	428e      	cmp	r6, r1
   114da:	d0f6      	beq.n	114ca <__mdiff+0x2a>
   114dc:	d300      	bcc.n	114e0 <__mdiff+0x40>
   114de:	e071      	b.n	115c4 <__mdiff+0x124>
   114e0:	4643      	mov	r3, r8
   114e2:	003e      	movs	r6, r7
   114e4:	46a0      	mov	r8, r4
   114e6:	4667      	mov	r7, ip
   114e8:	001c      	movs	r4, r3
   114ea:	2501      	movs	r5, #1
   114ec:	e006      	b.n	114fc <__mdiff+0x5c>
   114ee:	2d00      	cmp	r5, #0
   114f0:	db6a      	blt.n	115c8 <__mdiff+0x128>
   114f2:	4647      	mov	r7, r8
   114f4:	0026      	movs	r6, r4
   114f6:	2500      	movs	r5, #0
   114f8:	3714      	adds	r7, #20
   114fa:	3614      	adds	r6, #20
   114fc:	4643      	mov	r3, r8
   114fe:	6859      	ldr	r1, [r3, #4]
   11500:	f7ff fd80 	bl	11004 <_Balloc>
   11504:	4643      	mov	r3, r8
   11506:	4681      	mov	r9, r0
   11508:	60c5      	str	r5, [r0, #12]
   1150a:	6918      	ldr	r0, [r3, #16]
   1150c:	464d      	mov	r5, r9
   1150e:	0083      	lsls	r3, r0, #2
   11510:	469c      	mov	ip, r3
   11512:	6923      	ldr	r3, [r4, #16]
   11514:	44bc      	add	ip, r7
   11516:	009b      	lsls	r3, r3, #2
   11518:	4698      	mov	r8, r3
   1151a:	2300      	movs	r3, #0
   1151c:	44b0      	add	r8, r6
   1151e:	3514      	adds	r5, #20
   11520:	469a      	mov	sl, r3
   11522:	e000      	b.n	11526 <__mdiff+0x86>
   11524:	0027      	movs	r7, r4
   11526:	ce04      	ldmia	r6!, {r2}
   11528:	003c      	movs	r4, r7
   1152a:	4693      	mov	fp, r2
   1152c:	4659      	mov	r1, fp
   1152e:	cc08      	ldmia	r4!, {r3}
   11530:	0409      	lsls	r1, r1, #16
   11532:	041a      	lsls	r2, r3, #16
   11534:	0c12      	lsrs	r2, r2, #16
   11536:	4452      	add	r2, sl
   11538:	0c09      	lsrs	r1, r1, #16
   1153a:	1a52      	subs	r2, r2, r1
   1153c:	0c19      	lsrs	r1, r3, #16
   1153e:	465b      	mov	r3, fp
   11540:	0c1b      	lsrs	r3, r3, #16
   11542:	1acb      	subs	r3, r1, r3
   11544:	1411      	asrs	r1, r2, #16
   11546:	185b      	adds	r3, r3, r1
   11548:	0412      	lsls	r2, r2, #16
   1154a:	1419      	asrs	r1, r3, #16
   1154c:	0c12      	lsrs	r2, r2, #16
   1154e:	041b      	lsls	r3, r3, #16
   11550:	468a      	mov	sl, r1
   11552:	4313      	orrs	r3, r2
   11554:	1d29      	adds	r1, r5, #4
   11556:	602b      	str	r3, [r5, #0]
   11558:	000d      	movs	r5, r1
   1155a:	45b0      	cmp	r8, r6
   1155c:	d8e2      	bhi.n	11524 <__mdiff+0x84>
   1155e:	45a4      	cmp	ip, r4
   11560:	d916      	bls.n	11590 <__mdiff+0xf0>
   11562:	cc08      	ldmia	r4!, {r3}
   11564:	041a      	lsls	r2, r3, #16
   11566:	0c12      	lsrs	r2, r2, #16
   11568:	4452      	add	r2, sl
   1156a:	1416      	asrs	r6, r2, #16
   1156c:	0c1b      	lsrs	r3, r3, #16
   1156e:	199b      	adds	r3, r3, r6
   11570:	0412      	lsls	r2, r2, #16
   11572:	141e      	asrs	r6, r3, #16
   11574:	0c12      	lsrs	r2, r2, #16
   11576:	041b      	lsls	r3, r3, #16
   11578:	4313      	orrs	r3, r2
   1157a:	46b2      	mov	sl, r6
   1157c:	c508      	stmia	r5!, {r3}
   1157e:	45a4      	cmp	ip, r4
   11580:	d8ef      	bhi.n	11562 <__mdiff+0xc2>
   11582:	4662      	mov	r2, ip
   11584:	2403      	movs	r4, #3
   11586:	1bd2      	subs	r2, r2, r7
   11588:	3a05      	subs	r2, #5
   1158a:	43a2      	bics	r2, r4
   1158c:	3204      	adds	r2, #4
   1158e:	1889      	adds	r1, r1, r2
   11590:	3904      	subs	r1, #4
   11592:	2b00      	cmp	r3, #0
   11594:	d104      	bne.n	115a0 <__mdiff+0x100>
   11596:	3904      	subs	r1, #4
   11598:	680b      	ldr	r3, [r1, #0]
   1159a:	3801      	subs	r0, #1
   1159c:	2b00      	cmp	r3, #0
   1159e:	d0fa      	beq.n	11596 <__mdiff+0xf6>
   115a0:	464b      	mov	r3, r9
   115a2:	6118      	str	r0, [r3, #16]
   115a4:	4648      	mov	r0, r9
   115a6:	bc3c      	pop	{r2, r3, r4, r5}
   115a8:	4690      	mov	r8, r2
   115aa:	4699      	mov	r9, r3
   115ac:	46a2      	mov	sl, r4
   115ae:	46ab      	mov	fp, r5
   115b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   115b2:	2100      	movs	r1, #0
   115b4:	f7ff fd26 	bl	11004 <_Balloc>
   115b8:	2301      	movs	r3, #1
   115ba:	6103      	str	r3, [r0, #16]
   115bc:	2300      	movs	r3, #0
   115be:	4681      	mov	r9, r0
   115c0:	6143      	str	r3, [r0, #20]
   115c2:	e7ef      	b.n	115a4 <__mdiff+0x104>
   115c4:	4666      	mov	r6, ip
   115c6:	e799      	b.n	114fc <__mdiff+0x5c>
   115c8:	0027      	movs	r7, r4
   115ca:	000e      	movs	r6, r1
   115cc:	46a0      	mov	r8, r4
   115ce:	3714      	adds	r7, #20
   115d0:	3614      	adds	r6, #20
   115d2:	000c      	movs	r4, r1
   115d4:	2501      	movs	r5, #1
   115d6:	e791      	b.n	114fc <__mdiff+0x5c>

000115d8 <__d2b>:
   115d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   115da:	2101      	movs	r1, #1
   115dc:	001c      	movs	r4, r3
   115de:	b083      	sub	sp, #12
   115e0:	9e08      	ldr	r6, [sp, #32]
   115e2:	0015      	movs	r5, r2
   115e4:	f7ff fd0e 	bl	11004 <_Balloc>
   115e8:	0323      	lsls	r3, r4, #12
   115ea:	0064      	lsls	r4, r4, #1
   115ec:	0007      	movs	r7, r0
   115ee:	0b1b      	lsrs	r3, r3, #12
   115f0:	0d64      	lsrs	r4, r4, #21
   115f2:	d002      	beq.n	115fa <__d2b+0x22>
   115f4:	2280      	movs	r2, #128	; 0x80
   115f6:	0352      	lsls	r2, r2, #13
   115f8:	4313      	orrs	r3, r2
   115fa:	9301      	str	r3, [sp, #4]
   115fc:	2d00      	cmp	r5, #0
   115fe:	d019      	beq.n	11634 <__d2b+0x5c>
   11600:	4668      	mov	r0, sp
   11602:	9500      	str	r5, [sp, #0]
   11604:	f7ff fd90 	bl	11128 <__lo0bits>
   11608:	2800      	cmp	r0, #0
   1160a:	d130      	bne.n	1166e <__d2b+0x96>
   1160c:	9b00      	ldr	r3, [sp, #0]
   1160e:	617b      	str	r3, [r7, #20]
   11610:	9b01      	ldr	r3, [sp, #4]
   11612:	61bb      	str	r3, [r7, #24]
   11614:	1e5a      	subs	r2, r3, #1
   11616:	4193      	sbcs	r3, r2
   11618:	1c5d      	adds	r5, r3, #1
   1161a:	613d      	str	r5, [r7, #16]
   1161c:	2c00      	cmp	r4, #0
   1161e:	d014      	beq.n	1164a <__d2b+0x72>
   11620:	4b19      	ldr	r3, [pc, #100]	; (11688 <__d2b+0xb0>)
   11622:	469c      	mov	ip, r3
   11624:	2335      	movs	r3, #53	; 0x35
   11626:	4464      	add	r4, ip
   11628:	1824      	adds	r4, r4, r0
   1162a:	1a18      	subs	r0, r3, r0
   1162c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1162e:	6034      	str	r4, [r6, #0]
   11630:	6018      	str	r0, [r3, #0]
   11632:	e019      	b.n	11668 <__d2b+0x90>
   11634:	a801      	add	r0, sp, #4
   11636:	f7ff fd77 	bl	11128 <__lo0bits>
   1163a:	9b01      	ldr	r3, [sp, #4]
   1163c:	3020      	adds	r0, #32
   1163e:	617b      	str	r3, [r7, #20]
   11640:	2301      	movs	r3, #1
   11642:	2501      	movs	r5, #1
   11644:	613b      	str	r3, [r7, #16]
   11646:	2c00      	cmp	r4, #0
   11648:	d1ea      	bne.n	11620 <__d2b+0x48>
   1164a:	4b10      	ldr	r3, [pc, #64]	; (1168c <__d2b+0xb4>)
   1164c:	469c      	mov	ip, r3
   1164e:	4b10      	ldr	r3, [pc, #64]	; (11690 <__d2b+0xb8>)
   11650:	4460      	add	r0, ip
   11652:	18eb      	adds	r3, r5, r3
   11654:	009b      	lsls	r3, r3, #2
   11656:	18fb      	adds	r3, r7, r3
   11658:	6030      	str	r0, [r6, #0]
   1165a:	6958      	ldr	r0, [r3, #20]
   1165c:	f7ff fd4a 	bl	110f4 <__hi0bits>
   11660:	016b      	lsls	r3, r5, #5
   11662:	1a18      	subs	r0, r3, r0
   11664:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11666:	6018      	str	r0, [r3, #0]
   11668:	0038      	movs	r0, r7
   1166a:	b003      	add	sp, #12
   1166c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1166e:	9b01      	ldr	r3, [sp, #4]
   11670:	2220      	movs	r2, #32
   11672:	0019      	movs	r1, r3
   11674:	1a12      	subs	r2, r2, r0
   11676:	4091      	lsls	r1, r2
   11678:	000a      	movs	r2, r1
   1167a:	40c3      	lsrs	r3, r0
   1167c:	9900      	ldr	r1, [sp, #0]
   1167e:	9301      	str	r3, [sp, #4]
   11680:	430a      	orrs	r2, r1
   11682:	617a      	str	r2, [r7, #20]
   11684:	e7c5      	b.n	11612 <__d2b+0x3a>
   11686:	46c0      	nop			; (mov r8, r8)
   11688:	fffffbcd 	.word	0xfffffbcd
   1168c:	fffffbce 	.word	0xfffffbce
   11690:	3fffffff 	.word	0x3fffffff

00011694 <_realloc_r>:
   11694:	b5f0      	push	{r4, r5, r6, r7, lr}
   11696:	464e      	mov	r6, r9
   11698:	4645      	mov	r5, r8
   1169a:	46de      	mov	lr, fp
   1169c:	4657      	mov	r7, sl
   1169e:	b5e0      	push	{r5, r6, r7, lr}
   116a0:	b085      	sub	sp, #20
   116a2:	9001      	str	r0, [sp, #4]
   116a4:	000e      	movs	r6, r1
   116a6:	0015      	movs	r5, r2
   116a8:	2900      	cmp	r1, #0
   116aa:	d100      	bne.n	116ae <_realloc_r+0x1a>
   116ac:	e09e      	b.n	117ec <_realloc_r+0x158>
   116ae:	0037      	movs	r7, r6
   116b0:	9801      	ldr	r0, [sp, #4]
   116b2:	3f08      	subs	r7, #8
   116b4:	f7ff fc96 	bl	10fe4 <__malloc_lock>
   116b8:	687a      	ldr	r2, [r7, #4]
   116ba:	2303      	movs	r3, #3
   116bc:	0014      	movs	r4, r2
   116be:	439c      	bics	r4, r3
   116c0:	002b      	movs	r3, r5
   116c2:	330b      	adds	r3, #11
   116c4:	46b9      	mov	r9, r7
   116c6:	2b16      	cmp	r3, #22
   116c8:	d847      	bhi.n	1175a <_realloc_r+0xc6>
   116ca:	2110      	movs	r1, #16
   116cc:	2310      	movs	r3, #16
   116ce:	4688      	mov	r8, r1
   116d0:	4545      	cmp	r5, r8
   116d2:	d846      	bhi.n	11762 <_realloc_r+0xce>
   116d4:	429c      	cmp	r4, r3
   116d6:	da49      	bge.n	1176c <_realloc_r+0xd8>
   116d8:	49cc      	ldr	r1, [pc, #816]	; (11a0c <_realloc_r+0x378>)
   116da:	1938      	adds	r0, r7, r4
   116dc:	468b      	mov	fp, r1
   116de:	6889      	ldr	r1, [r1, #8]
   116e0:	9002      	str	r0, [sp, #8]
   116e2:	4288      	cmp	r0, r1
   116e4:	d100      	bne.n	116e8 <_realloc_r+0x54>
   116e6:	e0c2      	b.n	1186e <_realloc_r+0x1da>
   116e8:	2101      	movs	r1, #1
   116ea:	468a      	mov	sl, r1
   116ec:	6840      	ldr	r0, [r0, #4]
   116ee:	0001      	movs	r1, r0
   116f0:	9003      	str	r0, [sp, #12]
   116f2:	4650      	mov	r0, sl
   116f4:	4381      	bics	r1, r0
   116f6:	468c      	mov	ip, r1
   116f8:	9902      	ldr	r1, [sp, #8]
   116fa:	468b      	mov	fp, r1
   116fc:	44dc      	add	ip, fp
   116fe:	4661      	mov	r1, ip
   11700:	6849      	ldr	r1, [r1, #4]
   11702:	4201      	tst	r1, r0
   11704:	d04d      	beq.n	117a2 <_realloc_r+0x10e>
   11706:	4210      	tst	r0, r2
   11708:	d100      	bne.n	1170c <_realloc_r+0x78>
   1170a:	e0a2      	b.n	11852 <_realloc_r+0x1be>
   1170c:	0029      	movs	r1, r5
   1170e:	9801      	ldr	r0, [sp, #4]
   11710:	f7ff f924 	bl	1095c <_malloc_r>
   11714:	1e05      	subs	r5, r0, #0
   11716:	d039      	beq.n	1178c <_realloc_r+0xf8>
   11718:	2301      	movs	r3, #1
   1171a:	0002      	movs	r2, r0
   1171c:	6879      	ldr	r1, [r7, #4]
   1171e:	3a08      	subs	r2, #8
   11720:	4399      	bics	r1, r3
   11722:	187f      	adds	r7, r7, r1
   11724:	42ba      	cmp	r2, r7
   11726:	d100      	bne.n	1172a <_realloc_r+0x96>
   11728:	e12e      	b.n	11988 <_realloc_r+0x2f4>
   1172a:	1f22      	subs	r2, r4, #4
   1172c:	2a24      	cmp	r2, #36	; 0x24
   1172e:	d900      	bls.n	11732 <_realloc_r+0x9e>
   11730:	e114      	b.n	1195c <_realloc_r+0x2c8>
   11732:	2a13      	cmp	r2, #19
   11734:	d900      	bls.n	11738 <_realloc_r+0xa4>
   11736:	e0e8      	b.n	1190a <_realloc_r+0x276>
   11738:	0003      	movs	r3, r0
   1173a:	0032      	movs	r2, r6
   1173c:	6811      	ldr	r1, [r2, #0]
   1173e:	6019      	str	r1, [r3, #0]
   11740:	6851      	ldr	r1, [r2, #4]
   11742:	6059      	str	r1, [r3, #4]
   11744:	6892      	ldr	r2, [r2, #8]
   11746:	609a      	str	r2, [r3, #8]
   11748:	9c01      	ldr	r4, [sp, #4]
   1174a:	0031      	movs	r1, r6
   1174c:	0020      	movs	r0, r4
   1174e:	f7fe fde7 	bl	10320 <_free_r>
   11752:	0020      	movs	r0, r4
   11754:	f7ff fc4e 	bl	10ff4 <__malloc_unlock>
   11758:	e01b      	b.n	11792 <_realloc_r+0xfe>
   1175a:	2107      	movs	r1, #7
   1175c:	438b      	bics	r3, r1
   1175e:	4698      	mov	r8, r3
   11760:	d5b6      	bpl.n	116d0 <_realloc_r+0x3c>
   11762:	230c      	movs	r3, #12
   11764:	9a01      	ldr	r2, [sp, #4]
   11766:	2500      	movs	r5, #0
   11768:	6013      	str	r3, [r2, #0]
   1176a:	e012      	b.n	11792 <_realloc_r+0xfe>
   1176c:	0035      	movs	r5, r6
   1176e:	4643      	mov	r3, r8
   11770:	1ae3      	subs	r3, r4, r3
   11772:	2b0f      	cmp	r3, #15
   11774:	d825      	bhi.n	117c2 <_realloc_r+0x12e>
   11776:	464b      	mov	r3, r9
   11778:	2201      	movs	r2, #1
   1177a:	4649      	mov	r1, r9
   1177c:	685b      	ldr	r3, [r3, #4]
   1177e:	4013      	ands	r3, r2
   11780:	4323      	orrs	r3, r4
   11782:	604b      	str	r3, [r1, #4]
   11784:	444c      	add	r4, r9
   11786:	6863      	ldr	r3, [r4, #4]
   11788:	431a      	orrs	r2, r3
   1178a:	6062      	str	r2, [r4, #4]
   1178c:	9801      	ldr	r0, [sp, #4]
   1178e:	f7ff fc31 	bl	10ff4 <__malloc_unlock>
   11792:	0028      	movs	r0, r5
   11794:	b005      	add	sp, #20
   11796:	bc3c      	pop	{r2, r3, r4, r5}
   11798:	4690      	mov	r8, r2
   1179a:	4699      	mov	r9, r3
   1179c:	46a2      	mov	sl, r4
   1179e:	46ab      	mov	fp, r5
   117a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   117a2:	2103      	movs	r1, #3
   117a4:	9803      	ldr	r0, [sp, #12]
   117a6:	468c      	mov	ip, r1
   117a8:	4388      	bics	r0, r1
   117aa:	1821      	adds	r1, r4, r0
   117ac:	468b      	mov	fp, r1
   117ae:	4299      	cmp	r1, r3
   117b0:	db21      	blt.n	117f6 <_realloc_r+0x162>
   117b2:	9a02      	ldr	r2, [sp, #8]
   117b4:	0035      	movs	r5, r6
   117b6:	68d3      	ldr	r3, [r2, #12]
   117b8:	6892      	ldr	r2, [r2, #8]
   117ba:	465c      	mov	r4, fp
   117bc:	60d3      	str	r3, [r2, #12]
   117be:	609a      	str	r2, [r3, #8]
   117c0:	e7d5      	b.n	1176e <_realloc_r+0xda>
   117c2:	464a      	mov	r2, r9
   117c4:	2001      	movs	r0, #1
   117c6:	4646      	mov	r6, r8
   117c8:	6852      	ldr	r2, [r2, #4]
   117ca:	4649      	mov	r1, r9
   117cc:	4002      	ands	r2, r0
   117ce:	4332      	orrs	r2, r6
   117d0:	464e      	mov	r6, r9
   117d2:	4441      	add	r1, r8
   117d4:	4303      	orrs	r3, r0
   117d6:	6072      	str	r2, [r6, #4]
   117d8:	444c      	add	r4, r9
   117da:	604b      	str	r3, [r1, #4]
   117dc:	6863      	ldr	r3, [r4, #4]
   117de:	3108      	adds	r1, #8
   117e0:	4318      	orrs	r0, r3
   117e2:	6060      	str	r0, [r4, #4]
   117e4:	9801      	ldr	r0, [sp, #4]
   117e6:	f7fe fd9b 	bl	10320 <_free_r>
   117ea:	e7cf      	b.n	1178c <_realloc_r+0xf8>
   117ec:	0011      	movs	r1, r2
   117ee:	f7ff f8b5 	bl	1095c <_malloc_r>
   117f2:	0005      	movs	r5, r0
   117f4:	e7cd      	b.n	11792 <_realloc_r+0xfe>
   117f6:	4651      	mov	r1, sl
   117f8:	4211      	tst	r1, r2
   117fa:	d000      	beq.n	117fe <_realloc_r+0x16a>
   117fc:	e786      	b.n	1170c <_realloc_r+0x78>
   117fe:	4661      	mov	r1, ip
   11800:	683a      	ldr	r2, [r7, #0]
   11802:	1aba      	subs	r2, r7, r2
   11804:	4692      	mov	sl, r2
   11806:	6852      	ldr	r2, [r2, #4]
   11808:	438a      	bics	r2, r1
   1180a:	1880      	adds	r0, r0, r2
   1180c:	4683      	mov	fp, r0
   1180e:	44a3      	add	fp, r4
   11810:	459b      	cmp	fp, r3
   11812:	db26      	blt.n	11862 <_realloc_r+0x1ce>
   11814:	9a02      	ldr	r2, [sp, #8]
   11816:	68d3      	ldr	r3, [r2, #12]
   11818:	6892      	ldr	r2, [r2, #8]
   1181a:	60d3      	str	r3, [r2, #12]
   1181c:	609a      	str	r2, [r3, #8]
   1181e:	4653      	mov	r3, sl
   11820:	4652      	mov	r2, sl
   11822:	4655      	mov	r5, sl
   11824:	6892      	ldr	r2, [r2, #8]
   11826:	68db      	ldr	r3, [r3, #12]
   11828:	3508      	adds	r5, #8
   1182a:	60d3      	str	r3, [r2, #12]
   1182c:	609a      	str	r2, [r3, #8]
   1182e:	1f22      	subs	r2, r4, #4
   11830:	2a24      	cmp	r2, #36	; 0x24
   11832:	d900      	bls.n	11836 <_realloc_r+0x1a2>
   11834:	e096      	b.n	11964 <_realloc_r+0x2d0>
   11836:	2a13      	cmp	r2, #19
   11838:	d972      	bls.n	11920 <_realloc_r+0x28c>
   1183a:	4653      	mov	r3, sl
   1183c:	6831      	ldr	r1, [r6, #0]
   1183e:	6099      	str	r1, [r3, #8]
   11840:	6871      	ldr	r1, [r6, #4]
   11842:	60d9      	str	r1, [r3, #12]
   11844:	2a1b      	cmp	r2, #27
   11846:	d900      	bls.n	1184a <_realloc_r+0x1b6>
   11848:	e0a4      	b.n	11994 <_realloc_r+0x300>
   1184a:	0032      	movs	r2, r6
   1184c:	3310      	adds	r3, #16
   1184e:	3208      	adds	r2, #8
   11850:	e068      	b.n	11924 <_realloc_r+0x290>
   11852:	683a      	ldr	r2, [r7, #0]
   11854:	1aba      	subs	r2, r7, r2
   11856:	4692      	mov	sl, r2
   11858:	4651      	mov	r1, sl
   1185a:	2203      	movs	r2, #3
   1185c:	6849      	ldr	r1, [r1, #4]
   1185e:	4391      	bics	r1, r2
   11860:	000a      	movs	r2, r1
   11862:	4693      	mov	fp, r2
   11864:	44a3      	add	fp, r4
   11866:	459b      	cmp	fp, r3
   11868:	da00      	bge.n	1186c <_realloc_r+0x1d8>
   1186a:	e74f      	b.n	1170c <_realloc_r+0x78>
   1186c:	e7d7      	b.n	1181e <_realloc_r+0x18a>
   1186e:	2003      	movs	r0, #3
   11870:	9902      	ldr	r1, [sp, #8]
   11872:	4684      	mov	ip, r0
   11874:	6849      	ldr	r1, [r1, #4]
   11876:	4381      	bics	r1, r0
   11878:	4640      	mov	r0, r8
   1187a:	1909      	adds	r1, r1, r4
   1187c:	3010      	adds	r0, #16
   1187e:	9002      	str	r0, [sp, #8]
   11880:	4281      	cmp	r1, r0
   11882:	da58      	bge.n	11936 <_realloc_r+0x2a2>
   11884:	07d2      	lsls	r2, r2, #31
   11886:	d500      	bpl.n	1188a <_realloc_r+0x1f6>
   11888:	e740      	b.n	1170c <_realloc_r+0x78>
   1188a:	4660      	mov	r0, ip
   1188c:	683a      	ldr	r2, [r7, #0]
   1188e:	1aba      	subs	r2, r7, r2
   11890:	4692      	mov	sl, r2
   11892:	6852      	ldr	r2, [r2, #4]
   11894:	4382      	bics	r2, r0
   11896:	9802      	ldr	r0, [sp, #8]
   11898:	1851      	adds	r1, r2, r1
   1189a:	9103      	str	r1, [sp, #12]
   1189c:	4288      	cmp	r0, r1
   1189e:	dce0      	bgt.n	11862 <_realloc_r+0x1ce>
   118a0:	4653      	mov	r3, sl
   118a2:	4652      	mov	r2, sl
   118a4:	4655      	mov	r5, sl
   118a6:	6892      	ldr	r2, [r2, #8]
   118a8:	68db      	ldr	r3, [r3, #12]
   118aa:	3508      	adds	r5, #8
   118ac:	60d3      	str	r3, [r2, #12]
   118ae:	609a      	str	r2, [r3, #8]
   118b0:	1f22      	subs	r2, r4, #4
   118b2:	2a24      	cmp	r2, #36	; 0x24
   118b4:	d900      	bls.n	118b8 <_realloc_r+0x224>
   118b6:	e08e      	b.n	119d6 <_realloc_r+0x342>
   118b8:	2a13      	cmp	r2, #19
   118ba:	d800      	bhi.n	118be <_realloc_r+0x22a>
   118bc:	e088      	b.n	119d0 <_realloc_r+0x33c>
   118be:	4653      	mov	r3, sl
   118c0:	6831      	ldr	r1, [r6, #0]
   118c2:	6099      	str	r1, [r3, #8]
   118c4:	6871      	ldr	r1, [r6, #4]
   118c6:	60d9      	str	r1, [r3, #12]
   118c8:	2a1b      	cmp	r2, #27
   118ca:	d900      	bls.n	118ce <_realloc_r+0x23a>
   118cc:	e088      	b.n	119e0 <_realloc_r+0x34c>
   118ce:	0032      	movs	r2, r6
   118d0:	3310      	adds	r3, #16
   118d2:	3208      	adds	r2, #8
   118d4:	6811      	ldr	r1, [r2, #0]
   118d6:	6019      	str	r1, [r3, #0]
   118d8:	6851      	ldr	r1, [r2, #4]
   118da:	6059      	str	r1, [r3, #4]
   118dc:	6892      	ldr	r2, [r2, #8]
   118de:	609a      	str	r2, [r3, #8]
   118e0:	4651      	mov	r1, sl
   118e2:	465b      	mov	r3, fp
   118e4:	4642      	mov	r2, r8
   118e6:	4441      	add	r1, r8
   118e8:	6099      	str	r1, [r3, #8]
   118ea:	9b03      	ldr	r3, [sp, #12]
   118ec:	9801      	ldr	r0, [sp, #4]
   118ee:	1a9a      	subs	r2, r3, r2
   118f0:	2301      	movs	r3, #1
   118f2:	431a      	orrs	r2, r3
   118f4:	604a      	str	r2, [r1, #4]
   118f6:	4652      	mov	r2, sl
   118f8:	6852      	ldr	r2, [r2, #4]
   118fa:	4013      	ands	r3, r2
   118fc:	4642      	mov	r2, r8
   118fe:	4313      	orrs	r3, r2
   11900:	4652      	mov	r2, sl
   11902:	6053      	str	r3, [r2, #4]
   11904:	f7ff fb76 	bl	10ff4 <__malloc_unlock>
   11908:	e743      	b.n	11792 <_realloc_r+0xfe>
   1190a:	6833      	ldr	r3, [r6, #0]
   1190c:	6003      	str	r3, [r0, #0]
   1190e:	6873      	ldr	r3, [r6, #4]
   11910:	6043      	str	r3, [r0, #4]
   11912:	2a1b      	cmp	r2, #27
   11914:	d82d      	bhi.n	11972 <_realloc_r+0x2de>
   11916:	0003      	movs	r3, r0
   11918:	0032      	movs	r2, r6
   1191a:	3308      	adds	r3, #8
   1191c:	3208      	adds	r2, #8
   1191e:	e70d      	b.n	1173c <_realloc_r+0xa8>
   11920:	002b      	movs	r3, r5
   11922:	0032      	movs	r2, r6
   11924:	6811      	ldr	r1, [r2, #0]
   11926:	465c      	mov	r4, fp
   11928:	6019      	str	r1, [r3, #0]
   1192a:	6851      	ldr	r1, [r2, #4]
   1192c:	46d1      	mov	r9, sl
   1192e:	6059      	str	r1, [r3, #4]
   11930:	6892      	ldr	r2, [r2, #8]
   11932:	609a      	str	r2, [r3, #8]
   11934:	e71b      	b.n	1176e <_realloc_r+0xda>
   11936:	4643      	mov	r3, r8
   11938:	18fa      	adds	r2, r7, r3
   1193a:	465b      	mov	r3, fp
   1193c:	609a      	str	r2, [r3, #8]
   1193e:	4643      	mov	r3, r8
   11940:	1ac9      	subs	r1, r1, r3
   11942:	2301      	movs	r3, #1
   11944:	4319      	orrs	r1, r3
   11946:	6051      	str	r1, [r2, #4]
   11948:	687a      	ldr	r2, [r7, #4]
   1194a:	9801      	ldr	r0, [sp, #4]
   1194c:	4013      	ands	r3, r2
   1194e:	4642      	mov	r2, r8
   11950:	4313      	orrs	r3, r2
   11952:	607b      	str	r3, [r7, #4]
   11954:	f7ff fb4e 	bl	10ff4 <__malloc_unlock>
   11958:	0035      	movs	r5, r6
   1195a:	e71a      	b.n	11792 <_realloc_r+0xfe>
   1195c:	0031      	movs	r1, r6
   1195e:	f7ff faf1 	bl	10f44 <memmove>
   11962:	e6f1      	b.n	11748 <_realloc_r+0xb4>
   11964:	0031      	movs	r1, r6
   11966:	0028      	movs	r0, r5
   11968:	f7ff faec 	bl	10f44 <memmove>
   1196c:	465c      	mov	r4, fp
   1196e:	46d1      	mov	r9, sl
   11970:	e6fd      	b.n	1176e <_realloc_r+0xda>
   11972:	68b3      	ldr	r3, [r6, #8]
   11974:	6083      	str	r3, [r0, #8]
   11976:	68f3      	ldr	r3, [r6, #12]
   11978:	60c3      	str	r3, [r0, #12]
   1197a:	2a24      	cmp	r2, #36	; 0x24
   1197c:	d015      	beq.n	119aa <_realloc_r+0x316>
   1197e:	0003      	movs	r3, r0
   11980:	0032      	movs	r2, r6
   11982:	3310      	adds	r3, #16
   11984:	3210      	adds	r2, #16
   11986:	e6d9      	b.n	1173c <_realloc_r+0xa8>
   11988:	6853      	ldr	r3, [r2, #4]
   1198a:	2203      	movs	r2, #3
   1198c:	4393      	bics	r3, r2
   1198e:	18e4      	adds	r4, r4, r3
   11990:	0035      	movs	r5, r6
   11992:	e6ec      	b.n	1176e <_realloc_r+0xda>
   11994:	4653      	mov	r3, sl
   11996:	68b1      	ldr	r1, [r6, #8]
   11998:	6119      	str	r1, [r3, #16]
   1199a:	68f1      	ldr	r1, [r6, #12]
   1199c:	6159      	str	r1, [r3, #20]
   1199e:	2a24      	cmp	r2, #36	; 0x24
   119a0:	d00c      	beq.n	119bc <_realloc_r+0x328>
   119a2:	0032      	movs	r2, r6
   119a4:	3318      	adds	r3, #24
   119a6:	3210      	adds	r2, #16
   119a8:	e7bc      	b.n	11924 <_realloc_r+0x290>
   119aa:	6933      	ldr	r3, [r6, #16]
   119ac:	0032      	movs	r2, r6
   119ae:	6103      	str	r3, [r0, #16]
   119b0:	0003      	movs	r3, r0
   119b2:	6971      	ldr	r1, [r6, #20]
   119b4:	3318      	adds	r3, #24
   119b6:	3218      	adds	r2, #24
   119b8:	6141      	str	r1, [r0, #20]
   119ba:	e6bf      	b.n	1173c <_realloc_r+0xa8>
   119bc:	4653      	mov	r3, sl
   119be:	6932      	ldr	r2, [r6, #16]
   119c0:	4651      	mov	r1, sl
   119c2:	619a      	str	r2, [r3, #24]
   119c4:	0032      	movs	r2, r6
   119c6:	6970      	ldr	r0, [r6, #20]
   119c8:	3320      	adds	r3, #32
   119ca:	3218      	adds	r2, #24
   119cc:	61c8      	str	r0, [r1, #28]
   119ce:	e7a9      	b.n	11924 <_realloc_r+0x290>
   119d0:	002b      	movs	r3, r5
   119d2:	0032      	movs	r2, r6
   119d4:	e77e      	b.n	118d4 <_realloc_r+0x240>
   119d6:	0031      	movs	r1, r6
   119d8:	0028      	movs	r0, r5
   119da:	f7ff fab3 	bl	10f44 <memmove>
   119de:	e77f      	b.n	118e0 <_realloc_r+0x24c>
   119e0:	4653      	mov	r3, sl
   119e2:	68b1      	ldr	r1, [r6, #8]
   119e4:	6119      	str	r1, [r3, #16]
   119e6:	68f1      	ldr	r1, [r6, #12]
   119e8:	6159      	str	r1, [r3, #20]
   119ea:	2a24      	cmp	r2, #36	; 0x24
   119ec:	d003      	beq.n	119f6 <_realloc_r+0x362>
   119ee:	0032      	movs	r2, r6
   119f0:	3318      	adds	r3, #24
   119f2:	3210      	adds	r2, #16
   119f4:	e76e      	b.n	118d4 <_realloc_r+0x240>
   119f6:	4653      	mov	r3, sl
   119f8:	6932      	ldr	r2, [r6, #16]
   119fa:	4651      	mov	r1, sl
   119fc:	619a      	str	r2, [r3, #24]
   119fe:	0032      	movs	r2, r6
   11a00:	6970      	ldr	r0, [r6, #20]
   11a02:	3320      	adds	r3, #32
   11a04:	3218      	adds	r2, #24
   11a06:	61c8      	str	r0, [r1, #28]
   11a08:	e764      	b.n	118d4 <_realloc_r+0x240>
   11a0a:	46c0      	nop			; (mov r8, r8)
   11a0c:	200004b4 	.word	0x200004b4

00011a10 <_sbrk_r>:
   11a10:	2300      	movs	r3, #0
   11a12:	b570      	push	{r4, r5, r6, lr}
   11a14:	4c06      	ldr	r4, [pc, #24]	; (11a30 <_sbrk_r+0x20>)
   11a16:	0005      	movs	r5, r0
   11a18:	0008      	movs	r0, r1
   11a1a:	6023      	str	r3, [r4, #0]
   11a1c:	f000 fb08 	bl	12030 <_sbrk>
   11a20:	1c43      	adds	r3, r0, #1
   11a22:	d000      	beq.n	11a26 <_sbrk_r+0x16>
   11a24:	bd70      	pop	{r4, r5, r6, pc}
   11a26:	6823      	ldr	r3, [r4, #0]
   11a28:	2b00      	cmp	r3, #0
   11a2a:	d0fb      	beq.n	11a24 <_sbrk_r+0x14>
   11a2c:	602b      	str	r3, [r5, #0]
   11a2e:	e7f9      	b.n	11a24 <_sbrk_r+0x14>
   11a30:	200012b8 	.word	0x200012b8

00011a34 <__sread>:
   11a34:	b570      	push	{r4, r5, r6, lr}
   11a36:	000c      	movs	r4, r1
   11a38:	250e      	movs	r5, #14
   11a3a:	5f49      	ldrsh	r1, [r1, r5]
   11a3c:	f000 fa26 	bl	11e8c <_read_r>
   11a40:	2800      	cmp	r0, #0
   11a42:	db03      	blt.n	11a4c <__sread+0x18>
   11a44:	6d23      	ldr	r3, [r4, #80]	; 0x50
   11a46:	181b      	adds	r3, r3, r0
   11a48:	6523      	str	r3, [r4, #80]	; 0x50
   11a4a:	bd70      	pop	{r4, r5, r6, pc}
   11a4c:	89a3      	ldrh	r3, [r4, #12]
   11a4e:	4a02      	ldr	r2, [pc, #8]	; (11a58 <__sread+0x24>)
   11a50:	4013      	ands	r3, r2
   11a52:	81a3      	strh	r3, [r4, #12]
   11a54:	e7f9      	b.n	11a4a <__sread+0x16>
   11a56:	46c0      	nop			; (mov r8, r8)
   11a58:	ffffefff 	.word	0xffffefff

00011a5c <__swrite>:
   11a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11a5e:	0016      	movs	r6, r2
   11a60:	001f      	movs	r7, r3
   11a62:	220c      	movs	r2, #12
   11a64:	5e8b      	ldrsh	r3, [r1, r2]
   11a66:	0005      	movs	r5, r0
   11a68:	000c      	movs	r4, r1
   11a6a:	05da      	lsls	r2, r3, #23
   11a6c:	d507      	bpl.n	11a7e <__swrite+0x22>
   11a6e:	230e      	movs	r3, #14
   11a70:	5ec9      	ldrsh	r1, [r1, r3]
   11a72:	2200      	movs	r2, #0
   11a74:	2302      	movs	r3, #2
   11a76:	f000 f9df 	bl	11e38 <_lseek_r>
   11a7a:	220c      	movs	r2, #12
   11a7c:	5ea3      	ldrsh	r3, [r4, r2]
   11a7e:	4a05      	ldr	r2, [pc, #20]	; (11a94 <__swrite+0x38>)
   11a80:	0028      	movs	r0, r5
   11a82:	4013      	ands	r3, r2
   11a84:	81a3      	strh	r3, [r4, #12]
   11a86:	0032      	movs	r2, r6
   11a88:	230e      	movs	r3, #14
   11a8a:	5ee1      	ldrsh	r1, [r4, r3]
   11a8c:	003b      	movs	r3, r7
   11a8e:	f000 f86b 	bl	11b68 <_write_r>
   11a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11a94:	ffffefff 	.word	0xffffefff

00011a98 <__sseek>:
   11a98:	b570      	push	{r4, r5, r6, lr}
   11a9a:	000c      	movs	r4, r1
   11a9c:	250e      	movs	r5, #14
   11a9e:	5f49      	ldrsh	r1, [r1, r5]
   11aa0:	f000 f9ca 	bl	11e38 <_lseek_r>
   11aa4:	1c43      	adds	r3, r0, #1
   11aa6:	d006      	beq.n	11ab6 <__sseek+0x1e>
   11aa8:	2380      	movs	r3, #128	; 0x80
   11aaa:	89a2      	ldrh	r2, [r4, #12]
   11aac:	015b      	lsls	r3, r3, #5
   11aae:	4313      	orrs	r3, r2
   11ab0:	81a3      	strh	r3, [r4, #12]
   11ab2:	6520      	str	r0, [r4, #80]	; 0x50
   11ab4:	bd70      	pop	{r4, r5, r6, pc}
   11ab6:	89a3      	ldrh	r3, [r4, #12]
   11ab8:	4a01      	ldr	r2, [pc, #4]	; (11ac0 <__sseek+0x28>)
   11aba:	4013      	ands	r3, r2
   11abc:	81a3      	strh	r3, [r4, #12]
   11abe:	e7f9      	b.n	11ab4 <__sseek+0x1c>
   11ac0:	ffffefff 	.word	0xffffefff

00011ac4 <__sclose>:
   11ac4:	b510      	push	{r4, lr}
   11ac6:	230e      	movs	r3, #14
   11ac8:	5ec9      	ldrsh	r1, [r1, r3]
   11aca:	f000 f88d 	bl	11be8 <_close_r>
   11ace:	bd10      	pop	{r4, pc}

00011ad0 <__sprint_r.part.0>:
   11ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11ad2:	464e      	mov	r6, r9
   11ad4:	4645      	mov	r5, r8
   11ad6:	46de      	mov	lr, fp
   11ad8:	4657      	mov	r7, sl
   11ada:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   11adc:	b5e0      	push	{r5, r6, r7, lr}
   11ade:	4680      	mov	r8, r0
   11ae0:	000e      	movs	r6, r1
   11ae2:	4691      	mov	r9, r2
   11ae4:	049b      	lsls	r3, r3, #18
   11ae6:	d531      	bpl.n	11b4c <__sprint_r.part.0+0x7c>
   11ae8:	6813      	ldr	r3, [r2, #0]
   11aea:	469a      	mov	sl, r3
   11aec:	6893      	ldr	r3, [r2, #8]
   11aee:	2b00      	cmp	r3, #0
   11af0:	d02a      	beq.n	11b48 <__sprint_r.part.0+0x78>
   11af2:	4652      	mov	r2, sl
   11af4:	6852      	ldr	r2, [r2, #4]
   11af6:	2500      	movs	r5, #0
   11af8:	4693      	mov	fp, r2
   11afa:	0897      	lsrs	r7, r2, #2
   11afc:	4652      	mov	r2, sl
   11afe:	6814      	ldr	r4, [r2, #0]
   11b00:	d104      	bne.n	11b0c <__sprint_r.part.0+0x3c>
   11b02:	e016      	b.n	11b32 <__sprint_r.part.0+0x62>
   11b04:	3501      	adds	r5, #1
   11b06:	3404      	adds	r4, #4
   11b08:	42af      	cmp	r7, r5
   11b0a:	d010      	beq.n	11b2e <__sprint_r.part.0+0x5e>
   11b0c:	0032      	movs	r2, r6
   11b0e:	6821      	ldr	r1, [r4, #0]
   11b10:	4640      	mov	r0, r8
   11b12:	f000 f92d 	bl	11d70 <_fputwc_r>
   11b16:	1c43      	adds	r3, r0, #1
   11b18:	d1f4      	bne.n	11b04 <__sprint_r.part.0+0x34>
   11b1a:	464a      	mov	r2, r9
   11b1c:	2300      	movs	r3, #0
   11b1e:	6093      	str	r3, [r2, #8]
   11b20:	6053      	str	r3, [r2, #4]
   11b22:	bc3c      	pop	{r2, r3, r4, r5}
   11b24:	4690      	mov	r8, r2
   11b26:	4699      	mov	r9, r3
   11b28:	46a2      	mov	sl, r4
   11b2a:	46ab      	mov	fp, r5
   11b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11b2e:	464b      	mov	r3, r9
   11b30:	689b      	ldr	r3, [r3, #8]
   11b32:	465a      	mov	r2, fp
   11b34:	2103      	movs	r1, #3
   11b36:	438a      	bics	r2, r1
   11b38:	1a9b      	subs	r3, r3, r2
   11b3a:	464a      	mov	r2, r9
   11b3c:	6093      	str	r3, [r2, #8]
   11b3e:	2208      	movs	r2, #8
   11b40:	4694      	mov	ip, r2
   11b42:	44e2      	add	sl, ip
   11b44:	2b00      	cmp	r3, #0
   11b46:	d1d4      	bne.n	11af2 <__sprint_r.part.0+0x22>
   11b48:	2000      	movs	r0, #0
   11b4a:	e7e6      	b.n	11b1a <__sprint_r.part.0+0x4a>
   11b4c:	f7fe fcc6 	bl	104dc <__sfvwrite_r>
   11b50:	e7e3      	b.n	11b1a <__sprint_r.part.0+0x4a>
   11b52:	46c0      	nop			; (mov r8, r8)

00011b54 <__sprint_r>:
   11b54:	6893      	ldr	r3, [r2, #8]
   11b56:	b510      	push	{r4, lr}
   11b58:	2b00      	cmp	r3, #0
   11b5a:	d002      	beq.n	11b62 <__sprint_r+0xe>
   11b5c:	f7ff ffb8 	bl	11ad0 <__sprint_r.part.0>
   11b60:	bd10      	pop	{r4, pc}
   11b62:	6053      	str	r3, [r2, #4]
   11b64:	2000      	movs	r0, #0
   11b66:	e7fb      	b.n	11b60 <__sprint_r+0xc>

00011b68 <_write_r>:
   11b68:	b570      	push	{r4, r5, r6, lr}
   11b6a:	0005      	movs	r5, r0
   11b6c:	0008      	movs	r0, r1
   11b6e:	0011      	movs	r1, r2
   11b70:	2200      	movs	r2, #0
   11b72:	4c06      	ldr	r4, [pc, #24]	; (11b8c <_write_r+0x24>)
   11b74:	6022      	str	r2, [r4, #0]
   11b76:	001a      	movs	r2, r3
   11b78:	f000 fa68 	bl	1204c <_write>
   11b7c:	1c43      	adds	r3, r0, #1
   11b7e:	d000      	beq.n	11b82 <_write_r+0x1a>
   11b80:	bd70      	pop	{r4, r5, r6, pc}
   11b82:	6823      	ldr	r3, [r4, #0]
   11b84:	2b00      	cmp	r3, #0
   11b86:	d0fb      	beq.n	11b80 <_write_r+0x18>
   11b88:	602b      	str	r3, [r5, #0]
   11b8a:	e7f9      	b.n	11b80 <_write_r+0x18>
   11b8c:	200012b8 	.word	0x200012b8

00011b90 <_calloc_r>:
   11b90:	b510      	push	{r4, lr}
   11b92:	4351      	muls	r1, r2
   11b94:	f7fe fee2 	bl	1095c <_malloc_r>
   11b98:	1e04      	subs	r4, r0, #0
   11b9a:	d01c      	beq.n	11bd6 <_calloc_r+0x46>
   11b9c:	0003      	movs	r3, r0
   11b9e:	3b08      	subs	r3, #8
   11ba0:	685a      	ldr	r2, [r3, #4]
   11ba2:	2303      	movs	r3, #3
   11ba4:	439a      	bics	r2, r3
   11ba6:	3a04      	subs	r2, #4
   11ba8:	2a24      	cmp	r2, #36	; 0x24
   11baa:	d816      	bhi.n	11bda <_calloc_r+0x4a>
   11bac:	0003      	movs	r3, r0
   11bae:	2a13      	cmp	r2, #19
   11bb0:	d90d      	bls.n	11bce <_calloc_r+0x3e>
   11bb2:	2100      	movs	r1, #0
   11bb4:	3308      	adds	r3, #8
   11bb6:	6001      	str	r1, [r0, #0]
   11bb8:	6041      	str	r1, [r0, #4]
   11bba:	2a1b      	cmp	r2, #27
   11bbc:	d907      	bls.n	11bce <_calloc_r+0x3e>
   11bbe:	6081      	str	r1, [r0, #8]
   11bc0:	60c1      	str	r1, [r0, #12]
   11bc2:	2a24      	cmp	r2, #36	; 0x24
   11bc4:	d10d      	bne.n	11be2 <_calloc_r+0x52>
   11bc6:	0003      	movs	r3, r0
   11bc8:	6101      	str	r1, [r0, #16]
   11bca:	3318      	adds	r3, #24
   11bcc:	6141      	str	r1, [r0, #20]
   11bce:	2200      	movs	r2, #0
   11bd0:	601a      	str	r2, [r3, #0]
   11bd2:	605a      	str	r2, [r3, #4]
   11bd4:	609a      	str	r2, [r3, #8]
   11bd6:	0020      	movs	r0, r4
   11bd8:	bd10      	pop	{r4, pc}
   11bda:	2100      	movs	r1, #0
   11bdc:	f7fb fb1c 	bl	d218 <memset>
   11be0:	e7f9      	b.n	11bd6 <_calloc_r+0x46>
   11be2:	0003      	movs	r3, r0
   11be4:	3310      	adds	r3, #16
   11be6:	e7f2      	b.n	11bce <_calloc_r+0x3e>

00011be8 <_close_r>:
   11be8:	2300      	movs	r3, #0
   11bea:	b570      	push	{r4, r5, r6, lr}
   11bec:	4c06      	ldr	r4, [pc, #24]	; (11c08 <_close_r+0x20>)
   11bee:	0005      	movs	r5, r0
   11bf0:	0008      	movs	r0, r1
   11bf2:	6023      	str	r3, [r4, #0]
   11bf4:	f000 f9f4 	bl	11fe0 <_close>
   11bf8:	1c43      	adds	r3, r0, #1
   11bfa:	d000      	beq.n	11bfe <_close_r+0x16>
   11bfc:	bd70      	pop	{r4, r5, r6, pc}
   11bfe:	6823      	ldr	r3, [r4, #0]
   11c00:	2b00      	cmp	r3, #0
   11c02:	d0fb      	beq.n	11bfc <_close_r+0x14>
   11c04:	602b      	str	r3, [r5, #0]
   11c06:	e7f9      	b.n	11bfc <_close_r+0x14>
   11c08:	200012b8 	.word	0x200012b8

00011c0c <_fclose_r>:
   11c0c:	b570      	push	{r4, r5, r6, lr}
   11c0e:	0005      	movs	r5, r0
   11c10:	1e0c      	subs	r4, r1, #0
   11c12:	d040      	beq.n	11c96 <_fclose_r+0x8a>
   11c14:	2800      	cmp	r0, #0
   11c16:	d002      	beq.n	11c1e <_fclose_r+0x12>
   11c18:	6b83      	ldr	r3, [r0, #56]	; 0x38
   11c1a:	2b00      	cmp	r3, #0
   11c1c:	d03e      	beq.n	11c9c <_fclose_r+0x90>
   11c1e:	2601      	movs	r6, #1
   11c20:	6e63      	ldr	r3, [r4, #100]	; 0x64
   11c22:	4233      	tst	r3, r6
   11c24:	d133      	bne.n	11c8e <_fclose_r+0x82>
   11c26:	89a3      	ldrh	r3, [r4, #12]
   11c28:	059b      	lsls	r3, r3, #22
   11c2a:	d543      	bpl.n	11cb4 <_fclose_r+0xa8>
   11c2c:	0021      	movs	r1, r4
   11c2e:	0028      	movs	r0, r5
   11c30:	f7fe f9ca 	bl	ffc8 <__sflush_r>
   11c34:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   11c36:	0006      	movs	r6, r0
   11c38:	2b00      	cmp	r3, #0
   11c3a:	d004      	beq.n	11c46 <_fclose_r+0x3a>
   11c3c:	69e1      	ldr	r1, [r4, #28]
   11c3e:	0028      	movs	r0, r5
   11c40:	4798      	blx	r3
   11c42:	2800      	cmp	r0, #0
   11c44:	db44      	blt.n	11cd0 <_fclose_r+0xc4>
   11c46:	89a3      	ldrh	r3, [r4, #12]
   11c48:	061b      	lsls	r3, r3, #24
   11c4a:	d42a      	bmi.n	11ca2 <_fclose_r+0x96>
   11c4c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   11c4e:	2900      	cmp	r1, #0
   11c50:	d008      	beq.n	11c64 <_fclose_r+0x58>
   11c52:	0023      	movs	r3, r4
   11c54:	3340      	adds	r3, #64	; 0x40
   11c56:	4299      	cmp	r1, r3
   11c58:	d002      	beq.n	11c60 <_fclose_r+0x54>
   11c5a:	0028      	movs	r0, r5
   11c5c:	f7fe fb60 	bl	10320 <_free_r>
   11c60:	2300      	movs	r3, #0
   11c62:	6323      	str	r3, [r4, #48]	; 0x30
   11c64:	6c61      	ldr	r1, [r4, #68]	; 0x44
   11c66:	2900      	cmp	r1, #0
   11c68:	d004      	beq.n	11c74 <_fclose_r+0x68>
   11c6a:	0028      	movs	r0, r5
   11c6c:	f7fe fb58 	bl	10320 <_free_r>
   11c70:	2300      	movs	r3, #0
   11c72:	6463      	str	r3, [r4, #68]	; 0x44
   11c74:	f7fe fada 	bl	1022c <__sfp_lock_acquire>
   11c78:	2300      	movs	r3, #0
   11c7a:	81a3      	strh	r3, [r4, #12]
   11c7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   11c7e:	07db      	lsls	r3, r3, #31
   11c80:	d514      	bpl.n	11cac <_fclose_r+0xa0>
   11c82:	6da0      	ldr	r0, [r4, #88]	; 0x58
   11c84:	f7fe fde2 	bl	1084c <__retarget_lock_close_recursive>
   11c88:	f7fe fad8 	bl	1023c <__sfp_lock_release>
   11c8c:	e004      	b.n	11c98 <_fclose_r+0x8c>
   11c8e:	220c      	movs	r2, #12
   11c90:	5ea3      	ldrsh	r3, [r4, r2]
   11c92:	2b00      	cmp	r3, #0
   11c94:	d1ca      	bne.n	11c2c <_fclose_r+0x20>
   11c96:	2600      	movs	r6, #0
   11c98:	0030      	movs	r0, r6
   11c9a:	bd70      	pop	{r4, r5, r6, pc}
   11c9c:	f7fe fa96 	bl	101cc <__sinit>
   11ca0:	e7bd      	b.n	11c1e <_fclose_r+0x12>
   11ca2:	6921      	ldr	r1, [r4, #16]
   11ca4:	0028      	movs	r0, r5
   11ca6:	f7fe fb3b 	bl	10320 <_free_r>
   11caa:	e7cf      	b.n	11c4c <_fclose_r+0x40>
   11cac:	6da0      	ldr	r0, [r4, #88]	; 0x58
   11cae:	f7fe fdd1 	bl	10854 <__retarget_lock_release_recursive>
   11cb2:	e7e6      	b.n	11c82 <_fclose_r+0x76>
   11cb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   11cb6:	f7fe fdcb 	bl	10850 <__retarget_lock_acquire_recursive>
   11cba:	220c      	movs	r2, #12
   11cbc:	5ea3      	ldrsh	r3, [r4, r2]
   11cbe:	2b00      	cmp	r3, #0
   11cc0:	d1b4      	bne.n	11c2c <_fclose_r+0x20>
   11cc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
   11cc4:	401e      	ands	r6, r3
   11cc6:	d1e6      	bne.n	11c96 <_fclose_r+0x8a>
   11cc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   11cca:	f7fe fdc3 	bl	10854 <__retarget_lock_release_recursive>
   11cce:	e7e3      	b.n	11c98 <_fclose_r+0x8c>
   11cd0:	2601      	movs	r6, #1
   11cd2:	4276      	negs	r6, r6
   11cd4:	e7b7      	b.n	11c46 <_fclose_r+0x3a>
   11cd6:	46c0      	nop			; (mov r8, r8)

00011cd8 <__fputwc>:
   11cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
   11cda:	46ce      	mov	lr, r9
   11cdc:	4647      	mov	r7, r8
   11cde:	b580      	push	{r7, lr}
   11ce0:	b085      	sub	sp, #20
   11ce2:	4680      	mov	r8, r0
   11ce4:	4689      	mov	r9, r1
   11ce6:	0014      	movs	r4, r2
   11ce8:	f000 f896 	bl	11e18 <__locale_mb_cur_max>
   11cec:	2801      	cmp	r0, #1
   11cee:	d031      	beq.n	11d54 <__fputwc+0x7c>
   11cf0:	0023      	movs	r3, r4
   11cf2:	af03      	add	r7, sp, #12
   11cf4:	335c      	adds	r3, #92	; 0x5c
   11cf6:	464a      	mov	r2, r9
   11cf8:	0039      	movs	r1, r7
   11cfa:	4640      	mov	r0, r8
   11cfc:	f000 f938 	bl	11f70 <_wcrtomb_r>
   11d00:	0006      	movs	r6, r0
   11d02:	1c43      	adds	r3, r0, #1
   11d04:	d021      	beq.n	11d4a <__fputwc+0x72>
   11d06:	2800      	cmp	r0, #0
   11d08:	d030      	beq.n	11d6c <__fputwc+0x94>
   11d0a:	7839      	ldrb	r1, [r7, #0]
   11d0c:	2500      	movs	r5, #0
   11d0e:	e007      	b.n	11d20 <__fputwc+0x48>
   11d10:	6823      	ldr	r3, [r4, #0]
   11d12:	1c5a      	adds	r2, r3, #1
   11d14:	6022      	str	r2, [r4, #0]
   11d16:	7019      	strb	r1, [r3, #0]
   11d18:	3501      	adds	r5, #1
   11d1a:	42b5      	cmp	r5, r6
   11d1c:	d226      	bcs.n	11d6c <__fputwc+0x94>
   11d1e:	5d79      	ldrb	r1, [r7, r5]
   11d20:	68a3      	ldr	r3, [r4, #8]
   11d22:	3b01      	subs	r3, #1
   11d24:	60a3      	str	r3, [r4, #8]
   11d26:	2b00      	cmp	r3, #0
   11d28:	daf2      	bge.n	11d10 <__fputwc+0x38>
   11d2a:	69a2      	ldr	r2, [r4, #24]
   11d2c:	4293      	cmp	r3, r2
   11d2e:	db01      	blt.n	11d34 <__fputwc+0x5c>
   11d30:	290a      	cmp	r1, #10
   11d32:	d1ed      	bne.n	11d10 <__fputwc+0x38>
   11d34:	0022      	movs	r2, r4
   11d36:	4640      	mov	r0, r8
   11d38:	f000 f8bc 	bl	11eb4 <__swbuf_r>
   11d3c:	1c43      	adds	r3, r0, #1
   11d3e:	d1eb      	bne.n	11d18 <__fputwc+0x40>
   11d40:	b005      	add	sp, #20
   11d42:	bc0c      	pop	{r2, r3}
   11d44:	4690      	mov	r8, r2
   11d46:	4699      	mov	r9, r3
   11d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11d4a:	2240      	movs	r2, #64	; 0x40
   11d4c:	89a3      	ldrh	r3, [r4, #12]
   11d4e:	4313      	orrs	r3, r2
   11d50:	81a3      	strh	r3, [r4, #12]
   11d52:	e7f5      	b.n	11d40 <__fputwc+0x68>
   11d54:	464b      	mov	r3, r9
   11d56:	3b01      	subs	r3, #1
   11d58:	2bfe      	cmp	r3, #254	; 0xfe
   11d5a:	d8c9      	bhi.n	11cf0 <__fputwc+0x18>
   11d5c:	466a      	mov	r2, sp
   11d5e:	464b      	mov	r3, r9
   11d60:	71d3      	strb	r3, [r2, #7]
   11d62:	79d1      	ldrb	r1, [r2, #7]
   11d64:	af03      	add	r7, sp, #12
   11d66:	7039      	strb	r1, [r7, #0]
   11d68:	2601      	movs	r6, #1
   11d6a:	e7cf      	b.n	11d0c <__fputwc+0x34>
   11d6c:	4648      	mov	r0, r9
   11d6e:	e7e7      	b.n	11d40 <__fputwc+0x68>

00011d70 <_fputwc_r>:
   11d70:	6e53      	ldr	r3, [r2, #100]	; 0x64
   11d72:	b570      	push	{r4, r5, r6, lr}
   11d74:	0005      	movs	r5, r0
   11d76:	000e      	movs	r6, r1
   11d78:	0014      	movs	r4, r2
   11d7a:	07db      	lsls	r3, r3, #31
   11d7c:	d41e      	bmi.n	11dbc <_fputwc_r+0x4c>
   11d7e:	230c      	movs	r3, #12
   11d80:	5ed2      	ldrsh	r2, [r2, r3]
   11d82:	b291      	uxth	r1, r2
   11d84:	058b      	lsls	r3, r1, #22
   11d86:	d516      	bpl.n	11db6 <_fputwc_r+0x46>
   11d88:	2380      	movs	r3, #128	; 0x80
   11d8a:	019b      	lsls	r3, r3, #6
   11d8c:	4219      	tst	r1, r3
   11d8e:	d104      	bne.n	11d9a <_fputwc_r+0x2a>
   11d90:	431a      	orrs	r2, r3
   11d92:	81a2      	strh	r2, [r4, #12]
   11d94:	6e62      	ldr	r2, [r4, #100]	; 0x64
   11d96:	4313      	orrs	r3, r2
   11d98:	6663      	str	r3, [r4, #100]	; 0x64
   11d9a:	0028      	movs	r0, r5
   11d9c:	0022      	movs	r2, r4
   11d9e:	0031      	movs	r1, r6
   11da0:	f7ff ff9a 	bl	11cd8 <__fputwc>
   11da4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   11da6:	0005      	movs	r5, r0
   11da8:	07db      	lsls	r3, r3, #31
   11daa:	d402      	bmi.n	11db2 <_fputwc_r+0x42>
   11dac:	89a3      	ldrh	r3, [r4, #12]
   11dae:	059b      	lsls	r3, r3, #22
   11db0:	d508      	bpl.n	11dc4 <_fputwc_r+0x54>
   11db2:	0028      	movs	r0, r5
   11db4:	bd70      	pop	{r4, r5, r6, pc}
   11db6:	6da0      	ldr	r0, [r4, #88]	; 0x58
   11db8:	f7fe fd4a 	bl	10850 <__retarget_lock_acquire_recursive>
   11dbc:	230c      	movs	r3, #12
   11dbe:	5ee2      	ldrsh	r2, [r4, r3]
   11dc0:	b291      	uxth	r1, r2
   11dc2:	e7e1      	b.n	11d88 <_fputwc_r+0x18>
   11dc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   11dc6:	f7fe fd45 	bl	10854 <__retarget_lock_release_recursive>
   11dca:	e7f2      	b.n	11db2 <_fputwc_r+0x42>

00011dcc <_fstat_r>:
   11dcc:	2300      	movs	r3, #0
   11dce:	b570      	push	{r4, r5, r6, lr}
   11dd0:	4c07      	ldr	r4, [pc, #28]	; (11df0 <_fstat_r+0x24>)
   11dd2:	0005      	movs	r5, r0
   11dd4:	0008      	movs	r0, r1
   11dd6:	0011      	movs	r1, r2
   11dd8:	6023      	str	r3, [r4, #0]
   11dda:	f000 f909 	bl	11ff0 <_fstat>
   11dde:	1c43      	adds	r3, r0, #1
   11de0:	d000      	beq.n	11de4 <_fstat_r+0x18>
   11de2:	bd70      	pop	{r4, r5, r6, pc}
   11de4:	6823      	ldr	r3, [r4, #0]
   11de6:	2b00      	cmp	r3, #0
   11de8:	d0fb      	beq.n	11de2 <_fstat_r+0x16>
   11dea:	602b      	str	r3, [r5, #0]
   11dec:	e7f9      	b.n	11de2 <_fstat_r+0x16>
   11dee:	46c0      	nop			; (mov r8, r8)
   11df0:	200012b8 	.word	0x200012b8

00011df4 <_isatty_r>:
   11df4:	2300      	movs	r3, #0
   11df6:	b570      	push	{r4, r5, r6, lr}
   11df8:	4c06      	ldr	r4, [pc, #24]	; (11e14 <_isatty_r+0x20>)
   11dfa:	0005      	movs	r5, r0
   11dfc:	0008      	movs	r0, r1
   11dfe:	6023      	str	r3, [r4, #0]
   11e00:	f000 f8fe 	bl	12000 <_isatty>
   11e04:	1c43      	adds	r3, r0, #1
   11e06:	d000      	beq.n	11e0a <_isatty_r+0x16>
   11e08:	bd70      	pop	{r4, r5, r6, pc}
   11e0a:	6823      	ldr	r3, [r4, #0]
   11e0c:	2b00      	cmp	r3, #0
   11e0e:	d0fb      	beq.n	11e08 <_isatty_r+0x14>
   11e10:	602b      	str	r3, [r5, #0]
   11e12:	e7f9      	b.n	11e08 <_isatty_r+0x14>
   11e14:	200012b8 	.word	0x200012b8

00011e18 <__locale_mb_cur_max>:
   11e18:	4b05      	ldr	r3, [pc, #20]	; (11e30 <__locale_mb_cur_max+0x18>)
   11e1a:	681b      	ldr	r3, [r3, #0]
   11e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   11e1e:	2b00      	cmp	r3, #0
   11e20:	d003      	beq.n	11e2a <__locale_mb_cur_max+0x12>
   11e22:	2294      	movs	r2, #148	; 0x94
   11e24:	0052      	lsls	r2, r2, #1
   11e26:	5c98      	ldrb	r0, [r3, r2]
   11e28:	4770      	bx	lr
   11e2a:	4b02      	ldr	r3, [pc, #8]	; (11e34 <__locale_mb_cur_max+0x1c>)
   11e2c:	e7f9      	b.n	11e22 <__locale_mb_cur_max+0xa>
   11e2e:	46c0      	nop			; (mov r8, r8)
   11e30:	20000084 	.word	0x20000084
   11e34:	200008c4 	.word	0x200008c4

00011e38 <_lseek_r>:
   11e38:	b570      	push	{r4, r5, r6, lr}
   11e3a:	0005      	movs	r5, r0
   11e3c:	0008      	movs	r0, r1
   11e3e:	0011      	movs	r1, r2
   11e40:	2200      	movs	r2, #0
   11e42:	4c06      	ldr	r4, [pc, #24]	; (11e5c <_lseek_r+0x24>)
   11e44:	6022      	str	r2, [r4, #0]
   11e46:	001a      	movs	r2, r3
   11e48:	f000 f8e2 	bl	12010 <_lseek>
   11e4c:	1c43      	adds	r3, r0, #1
   11e4e:	d000      	beq.n	11e52 <_lseek_r+0x1a>
   11e50:	bd70      	pop	{r4, r5, r6, pc}
   11e52:	6823      	ldr	r3, [r4, #0]
   11e54:	2b00      	cmp	r3, #0
   11e56:	d0fb      	beq.n	11e50 <_lseek_r+0x18>
   11e58:	602b      	str	r3, [r5, #0]
   11e5a:	e7f9      	b.n	11e50 <_lseek_r+0x18>
   11e5c:	200012b8 	.word	0x200012b8

00011e60 <__ascii_mbtowc>:
   11e60:	b082      	sub	sp, #8
   11e62:	2900      	cmp	r1, #0
   11e64:	d00a      	beq.n	11e7c <__ascii_mbtowc+0x1c>
   11e66:	2a00      	cmp	r2, #0
   11e68:	d00b      	beq.n	11e82 <__ascii_mbtowc+0x22>
   11e6a:	2b00      	cmp	r3, #0
   11e6c:	d00b      	beq.n	11e86 <__ascii_mbtowc+0x26>
   11e6e:	7813      	ldrb	r3, [r2, #0]
   11e70:	600b      	str	r3, [r1, #0]
   11e72:	7810      	ldrb	r0, [r2, #0]
   11e74:	1e43      	subs	r3, r0, #1
   11e76:	4198      	sbcs	r0, r3
   11e78:	b002      	add	sp, #8
   11e7a:	4770      	bx	lr
   11e7c:	a901      	add	r1, sp, #4
   11e7e:	2a00      	cmp	r2, #0
   11e80:	d1f3      	bne.n	11e6a <__ascii_mbtowc+0xa>
   11e82:	2000      	movs	r0, #0
   11e84:	e7f8      	b.n	11e78 <__ascii_mbtowc+0x18>
   11e86:	2002      	movs	r0, #2
   11e88:	4240      	negs	r0, r0
   11e8a:	e7f5      	b.n	11e78 <__ascii_mbtowc+0x18>

00011e8c <_read_r>:
   11e8c:	b570      	push	{r4, r5, r6, lr}
   11e8e:	0005      	movs	r5, r0
   11e90:	0008      	movs	r0, r1
   11e92:	0011      	movs	r1, r2
   11e94:	2200      	movs	r2, #0
   11e96:	4c06      	ldr	r4, [pc, #24]	; (11eb0 <_read_r+0x24>)
   11e98:	6022      	str	r2, [r4, #0]
   11e9a:	001a      	movs	r2, r3
   11e9c:	f000 f8c0 	bl	12020 <_read>
   11ea0:	1c43      	adds	r3, r0, #1
   11ea2:	d000      	beq.n	11ea6 <_read_r+0x1a>
   11ea4:	bd70      	pop	{r4, r5, r6, pc}
   11ea6:	6823      	ldr	r3, [r4, #0]
   11ea8:	2b00      	cmp	r3, #0
   11eaa:	d0fb      	beq.n	11ea4 <_read_r+0x18>
   11eac:	602b      	str	r3, [r5, #0]
   11eae:	e7f9      	b.n	11ea4 <_read_r+0x18>
   11eb0:	200012b8 	.word	0x200012b8

00011eb4 <__swbuf_r>:
   11eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11eb6:	0006      	movs	r6, r0
   11eb8:	000d      	movs	r5, r1
   11eba:	0014      	movs	r4, r2
   11ebc:	2800      	cmp	r0, #0
   11ebe:	d002      	beq.n	11ec6 <__swbuf_r+0x12>
   11ec0:	6b83      	ldr	r3, [r0, #56]	; 0x38
   11ec2:	2b00      	cmp	r3, #0
   11ec4:	d04e      	beq.n	11f64 <__swbuf_r+0xb0>
   11ec6:	69a3      	ldr	r3, [r4, #24]
   11ec8:	60a3      	str	r3, [r4, #8]
   11eca:	230c      	movs	r3, #12
   11ecc:	5ee0      	ldrsh	r0, [r4, r3]
   11ece:	b281      	uxth	r1, r0
   11ed0:	070b      	lsls	r3, r1, #28
   11ed2:	d53c      	bpl.n	11f4e <__swbuf_r+0x9a>
   11ed4:	6923      	ldr	r3, [r4, #16]
   11ed6:	2b00      	cmp	r3, #0
   11ed8:	d039      	beq.n	11f4e <__swbuf_r+0x9a>
   11eda:	22ff      	movs	r2, #255	; 0xff
   11edc:	b2ef      	uxtb	r7, r5
   11ede:	4015      	ands	r5, r2
   11ee0:	2280      	movs	r2, #128	; 0x80
   11ee2:	0192      	lsls	r2, r2, #6
   11ee4:	4211      	tst	r1, r2
   11ee6:	d015      	beq.n	11f14 <__swbuf_r+0x60>
   11ee8:	6822      	ldr	r2, [r4, #0]
   11eea:	6961      	ldr	r1, [r4, #20]
   11eec:	1ad3      	subs	r3, r2, r3
   11eee:	428b      	cmp	r3, r1
   11ef0:	da1b      	bge.n	11f2a <__swbuf_r+0x76>
   11ef2:	3301      	adds	r3, #1
   11ef4:	68a1      	ldr	r1, [r4, #8]
   11ef6:	3901      	subs	r1, #1
   11ef8:	60a1      	str	r1, [r4, #8]
   11efa:	1c51      	adds	r1, r2, #1
   11efc:	6021      	str	r1, [r4, #0]
   11efe:	7017      	strb	r7, [r2, #0]
   11f00:	6962      	ldr	r2, [r4, #20]
   11f02:	429a      	cmp	r2, r3
   11f04:	d01a      	beq.n	11f3c <__swbuf_r+0x88>
   11f06:	89a3      	ldrh	r3, [r4, #12]
   11f08:	07db      	lsls	r3, r3, #31
   11f0a:	d501      	bpl.n	11f10 <__swbuf_r+0x5c>
   11f0c:	2d0a      	cmp	r5, #10
   11f0e:	d015      	beq.n	11f3c <__swbuf_r+0x88>
   11f10:	0028      	movs	r0, r5
   11f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11f14:	4302      	orrs	r2, r0
   11f16:	6e61      	ldr	r1, [r4, #100]	; 0x64
   11f18:	81a2      	strh	r2, [r4, #12]
   11f1a:	4a14      	ldr	r2, [pc, #80]	; (11f6c <__swbuf_r+0xb8>)
   11f1c:	400a      	ands	r2, r1
   11f1e:	6662      	str	r2, [r4, #100]	; 0x64
   11f20:	6961      	ldr	r1, [r4, #20]
   11f22:	6822      	ldr	r2, [r4, #0]
   11f24:	1ad3      	subs	r3, r2, r3
   11f26:	428b      	cmp	r3, r1
   11f28:	dbe3      	blt.n	11ef2 <__swbuf_r+0x3e>
   11f2a:	0021      	movs	r1, r4
   11f2c:	0030      	movs	r0, r6
   11f2e:	f7fe f8f3 	bl	10118 <_fflush_r>
   11f32:	2800      	cmp	r0, #0
   11f34:	d108      	bne.n	11f48 <__swbuf_r+0x94>
   11f36:	6822      	ldr	r2, [r4, #0]
   11f38:	2301      	movs	r3, #1
   11f3a:	e7db      	b.n	11ef4 <__swbuf_r+0x40>
   11f3c:	0021      	movs	r1, r4
   11f3e:	0030      	movs	r0, r6
   11f40:	f7fe f8ea 	bl	10118 <_fflush_r>
   11f44:	2800      	cmp	r0, #0
   11f46:	d0e3      	beq.n	11f10 <__swbuf_r+0x5c>
   11f48:	2501      	movs	r5, #1
   11f4a:	426d      	negs	r5, r5
   11f4c:	e7e0      	b.n	11f10 <__swbuf_r+0x5c>
   11f4e:	0021      	movs	r1, r4
   11f50:	0030      	movs	r0, r6
   11f52:	f7fc fed3 	bl	ecfc <__swsetup_r>
   11f56:	2800      	cmp	r0, #0
   11f58:	d1f6      	bne.n	11f48 <__swbuf_r+0x94>
   11f5a:	230c      	movs	r3, #12
   11f5c:	5ee0      	ldrsh	r0, [r4, r3]
   11f5e:	6923      	ldr	r3, [r4, #16]
   11f60:	b281      	uxth	r1, r0
   11f62:	e7ba      	b.n	11eda <__swbuf_r+0x26>
   11f64:	f7fe f932 	bl	101cc <__sinit>
   11f68:	e7ad      	b.n	11ec6 <__swbuf_r+0x12>
   11f6a:	46c0      	nop			; (mov r8, r8)
   11f6c:	ffffdfff 	.word	0xffffdfff

00011f70 <_wcrtomb_r>:
   11f70:	b570      	push	{r4, r5, r6, lr}
   11f72:	001d      	movs	r5, r3
   11f74:	4b11      	ldr	r3, [pc, #68]	; (11fbc <_wcrtomb_r+0x4c>)
   11f76:	b084      	sub	sp, #16
   11f78:	681b      	ldr	r3, [r3, #0]
   11f7a:	0004      	movs	r4, r0
   11f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   11f7e:	2900      	cmp	r1, #0
   11f80:	d00e      	beq.n	11fa0 <_wcrtomb_r+0x30>
   11f82:	2b00      	cmp	r3, #0
   11f84:	d016      	beq.n	11fb4 <_wcrtomb_r+0x44>
   11f86:	20e0      	movs	r0, #224	; 0xe0
   11f88:	581e      	ldr	r6, [r3, r0]
   11f8a:	002b      	movs	r3, r5
   11f8c:	0020      	movs	r0, r4
   11f8e:	47b0      	blx	r6
   11f90:	1c43      	adds	r3, r0, #1
   11f92:	d103      	bne.n	11f9c <_wcrtomb_r+0x2c>
   11f94:	2300      	movs	r3, #0
   11f96:	602b      	str	r3, [r5, #0]
   11f98:	338a      	adds	r3, #138	; 0x8a
   11f9a:	6023      	str	r3, [r4, #0]
   11f9c:	b004      	add	sp, #16
   11f9e:	bd70      	pop	{r4, r5, r6, pc}
   11fa0:	2b00      	cmp	r3, #0
   11fa2:	d009      	beq.n	11fb8 <_wcrtomb_r+0x48>
   11fa4:	22e0      	movs	r2, #224	; 0xe0
   11fa6:	a901      	add	r1, sp, #4
   11fa8:	589e      	ldr	r6, [r3, r2]
   11faa:	0020      	movs	r0, r4
   11fac:	002b      	movs	r3, r5
   11fae:	2200      	movs	r2, #0
   11fb0:	47b0      	blx	r6
   11fb2:	e7ed      	b.n	11f90 <_wcrtomb_r+0x20>
   11fb4:	4b02      	ldr	r3, [pc, #8]	; (11fc0 <_wcrtomb_r+0x50>)
   11fb6:	e7e6      	b.n	11f86 <_wcrtomb_r+0x16>
   11fb8:	4b01      	ldr	r3, [pc, #4]	; (11fc0 <_wcrtomb_r+0x50>)
   11fba:	e7f3      	b.n	11fa4 <_wcrtomb_r+0x34>
   11fbc:	20000084 	.word	0x20000084
   11fc0:	200008c4 	.word	0x200008c4

00011fc4 <__ascii_wctomb>:
   11fc4:	2900      	cmp	r1, #0
   11fc6:	d004      	beq.n	11fd2 <__ascii_wctomb+0xe>
   11fc8:	2aff      	cmp	r2, #255	; 0xff
   11fca:	d804      	bhi.n	11fd6 <__ascii_wctomb+0x12>
   11fcc:	2001      	movs	r0, #1
   11fce:	700a      	strb	r2, [r1, #0]
   11fd0:	4770      	bx	lr
   11fd2:	2000      	movs	r0, #0
   11fd4:	e7fc      	b.n	11fd0 <__ascii_wctomb+0xc>
   11fd6:	238a      	movs	r3, #138	; 0x8a
   11fd8:	6003      	str	r3, [r0, #0]
   11fda:	2001      	movs	r0, #1
   11fdc:	4240      	negs	r0, r0
   11fde:	e7f7      	b.n	11fd0 <__ascii_wctomb+0xc>

00011fe0 <_close>:
   11fe0:	2258      	movs	r2, #88	; 0x58
   11fe2:	2001      	movs	r0, #1
   11fe4:	4b01      	ldr	r3, [pc, #4]	; (11fec <_close+0xc>)
   11fe6:	4240      	negs	r0, r0
   11fe8:	601a      	str	r2, [r3, #0]
   11fea:	4770      	bx	lr
   11fec:	200012b8 	.word	0x200012b8

00011ff0 <_fstat>:
   11ff0:	2258      	movs	r2, #88	; 0x58
   11ff2:	2001      	movs	r0, #1
   11ff4:	4b01      	ldr	r3, [pc, #4]	; (11ffc <_fstat+0xc>)
   11ff6:	4240      	negs	r0, r0
   11ff8:	601a      	str	r2, [r3, #0]
   11ffa:	4770      	bx	lr
   11ffc:	200012b8 	.word	0x200012b8

00012000 <_isatty>:
   12000:	2258      	movs	r2, #88	; 0x58
   12002:	4b02      	ldr	r3, [pc, #8]	; (1200c <_isatty+0xc>)
   12004:	2000      	movs	r0, #0
   12006:	601a      	str	r2, [r3, #0]
   12008:	4770      	bx	lr
   1200a:	46c0      	nop			; (mov r8, r8)
   1200c:	200012b8 	.word	0x200012b8

00012010 <_lseek>:
   12010:	2258      	movs	r2, #88	; 0x58
   12012:	2001      	movs	r0, #1
   12014:	4b01      	ldr	r3, [pc, #4]	; (1201c <_lseek+0xc>)
   12016:	4240      	negs	r0, r0
   12018:	601a      	str	r2, [r3, #0]
   1201a:	4770      	bx	lr
   1201c:	200012b8 	.word	0x200012b8

00012020 <_read>:
   12020:	2258      	movs	r2, #88	; 0x58
   12022:	2001      	movs	r0, #1
   12024:	4b01      	ldr	r3, [pc, #4]	; (1202c <_read+0xc>)
   12026:	4240      	negs	r0, r0
   12028:	601a      	str	r2, [r3, #0]
   1202a:	4770      	bx	lr
   1202c:	200012b8 	.word	0x200012b8

00012030 <_sbrk>:
   12030:	4a04      	ldr	r2, [pc, #16]	; (12044 <_sbrk+0x14>)
   12032:	6813      	ldr	r3, [r2, #0]
   12034:	2b00      	cmp	r3, #0
   12036:	d003      	beq.n	12040 <_sbrk+0x10>
   12038:	1818      	adds	r0, r3, r0
   1203a:	6010      	str	r0, [r2, #0]
   1203c:	0018      	movs	r0, r3
   1203e:	4770      	bx	lr
   12040:	4b01      	ldr	r3, [pc, #4]	; (12048 <_sbrk+0x18>)
   12042:	e7f9      	b.n	12038 <_sbrk+0x8>
   12044:	20001254 	.word	0x20001254
   12048:	200032c0 	.word	0x200032c0

0001204c <_write>:
   1204c:	2258      	movs	r2, #88	; 0x58
   1204e:	2001      	movs	r0, #1
   12050:	4b01      	ldr	r3, [pc, #4]	; (12058 <_write+0xc>)
   12052:	4240      	negs	r0, r0
   12054:	601a      	str	r2, [r3, #0]
   12056:	4770      	bx	lr
   12058:	200012b8 	.word	0x200012b8
   1205c:	00000338 	.word	0x00000338
   12060:	00000364 	.word	0x00000364
   12064:	00000370 	.word	0x00000370
   12068:	0000037c 	.word	0x0000037c
   1206c:	00000388 	.word	0x00000388
   12070:	00000394 	.word	0x00000394
   12074:	000003a0 	.word	0x000003a0
   12078:	000003ac 	.word	0x000003ac
   1207c:	000003b8 	.word	0x000003b8
   12080:	000003c4 	.word	0x000003c4
   12084:	000003d0 	.word	0x000003d0
   12088:	000003dc 	.word	0x000003dc
   1208c:	00000428 	.word	0x00000428
   12090:	00000428 	.word	0x00000428
   12094:	00000428 	.word	0x00000428
   12098:	000003e8 	.word	0x000003e8
   1209c:	000003f4 	.word	0x000003f4
   120a0:	00000428 	.word	0x00000428
   120a4:	00000428 	.word	0x00000428
   120a8:	00000428 	.word	0x00000428
   120ac:	00000400 	.word	0x00000400
   120b0:	0000040e 	.word	0x0000040e
   120b4:	0000041a 	.word	0x0000041a
   120b8:	0000055a 	.word	0x0000055a
   120bc:	0000058c 	.word	0x0000058c
   120c0:	000005a2 	.word	0x000005a2
   120c4:	00000576 	.word	0x00000576
   120c8:	00000576 	.word	0x00000576
   120cc:	00000614 	.word	0x00000614
   120d0:	00000576 	.word	0x00000576
   120d4:	00000576 	.word	0x00000576
   120d8:	00000576 	.word	0x00000576
   120dc:	00000576 	.word	0x00000576
   120e0:	00000576 	.word	0x00000576
   120e4:	00000576 	.word	0x00000576
   120e8:	00000576 	.word	0x00000576
   120ec:	00000576 	.word	0x00000576
   120f0:	00000576 	.word	0x00000576
   120f4:	00000576 	.word	0x00000576
   120f8:	00000576 	.word	0x00000576
   120fc:	0000064a 	.word	0x0000064a
   12100:	0000065e 	.word	0x0000065e
   12104:	00000672 	.word	0x00000672
   12108:	64616552 	.word	0x64616552
   1210c:	64255220 	.word	0x64255220
   12110:	00000000 	.word	0x00000000
   12114:	3020203a 	.word	0x3020203a
   12118:	38302578 	.word	0x38302578
   1211c:	000a786c 	.word	0x000a786c
   12120:	74697257 	.word	0x74697257
   12124:	25522065 	.word	0x25522065
   12128:	00000064 	.word	0x00000064
   1212c:	3020203a 	.word	0x3020203a
   12130:	38302578 	.word	0x38302578
   12134:	0009786c 	.word	0x0009786c
   12138:	72727543 	.word	0x72727543
   1213c:	20746e65 	.word	0x20746e65
   12140:	71657266 	.word	0x71657266
   12144:	636e6575 	.word	0x636e6575
   12148:	25203a65 	.word	0x25203a65
   1214c:	000a666c 	.word	0x000a666c
   12150:	2a2a2a2a 	.word	0x2a2a2a2a
   12154:	2a2a2a2a 	.word	0x2a2a2a2a
   12158:	2a2a2a2a 	.word	0x2a2a2a2a
   1215c:	2a2a2a2a 	.word	0x2a2a2a2a
   12160:	2a2a2a2a 	.word	0x2a2a2a2a
   12164:	2a2a2a2a 	.word	0x2a2a2a2a
   12168:	0d0a2a2a 	.word	0x0d0a2a2a
   1216c:	00000000 	.word	0x00000000
   12170:	20746f4e 	.word	0x20746f4e
   12174:	6b636f4c 	.word	0x6b636f4c
   12178:	61206465 	.word	0x61206465
   1217c:	20203a74 	.word	0x20203a74
   12180:	00666c25 	.word	0x00666c25
   12184:	7a484d20 	.word	0x7a484d20
   12188:	00000000 	.word	0x00000000
   1218c:	2a2a2a2a 	.word	0x2a2a2a2a
   12190:	2a2a2a2a 	.word	0x2a2a2a2a
   12194:	2a2a2a2a 	.word	0x2a2a2a2a
   12198:	2a2a2a2a 	.word	0x2a2a2a2a
   1219c:	2a2a2a2a 	.word	0x2a2a2a2a
   121a0:	2a2a2a2a 	.word	0x2a2a2a2a
   121a4:	00002a2a 	.word	0x00002a2a
   121a8:	6c6c6568 	.word	0x6c6c6568
   121ac:	000d0a6f 	.word	0x000d0a6f
   121b0:	682f2e2e 	.word	0x682f2e2e
   121b4:	702f6c70 	.word	0x702f6c70
   121b8:	2f74726f 	.word	0x2f74726f
   121bc:	5f6c7068 	.word	0x5f6c7068
   121c0:	6f697067 	.word	0x6f697067
   121c4:	7361625f 	.word	0x7361625f
   121c8:	00682e65 	.word	0x00682e65
   121cc:	682f2e2e 	.word	0x682f2e2e
   121d0:	702f6c70 	.word	0x702f6c70
   121d4:	70682f6d 	.word	0x70682f6d
   121d8:	6d705f6c 	.word	0x6d705f6c
   121dc:	7361625f 	.word	0x7361625f
   121e0:	00682e65 	.word	0x00682e65
   121e4:	682f2e2e 	.word	0x682f2e2e
   121e8:	732f6c61 	.word	0x732f6c61
   121ec:	682f6372 	.word	0x682f6372
   121f0:	695f6c61 	.word	0x695f6c61
   121f4:	00632e6f 	.word	0x00632e6f
   121f8:	682f2e2e 	.word	0x682f2e2e
   121fc:	732f6c61 	.word	0x732f6c61
   12200:	682f6372 	.word	0x682f6372
   12204:	735f6c61 	.word	0x735f6c61
   12208:	6d5f6970 	.word	0x6d5f6970
   1220c:	6e79735f 	.word	0x6e79735f
   12210:	00632e63 	.word	0x00632e63
   12214:	682f2e2e 	.word	0x682f2e2e
   12218:	732f6c61 	.word	0x732f6c61
   1221c:	682f6372 	.word	0x682f6372
   12220:	755f6c61 	.word	0x755f6c61
   12224:	74726173 	.word	0x74726173
   12228:	6e79735f 	.word	0x6e79735f
   1222c:	00632e63 	.word	0x00632e63
   12230:	682f2e2e 	.word	0x682f2e2e
   12234:	632f6c70 	.word	0x632f6c70
   12238:	2f65726f 	.word	0x2f65726f
   1223c:	5f6c7068 	.word	0x5f6c7068
   12240:	65726f63 	.word	0x65726f63
   12244:	70306d5f 	.word	0x70306d5f
   12248:	5f73756c 	.word	0x5f73756c
   1224c:	65736162 	.word	0x65736162
   12250:	0000632e 	.word	0x0000632e
   12254:	00002c02 	.word	0x00002c02
   12258:	00002be0 	.word	0x00002be0
   1225c:	00002bbe 	.word	0x00002bbe
   12260:	00002b9c 	.word	0x00002b9c
   12264:	00002b7a 	.word	0x00002b7a
   12268:	00002cee 	.word	0x00002cee
   1226c:	00002ccc 	.word	0x00002ccc
   12270:	00002cb8 	.word	0x00002cb8
   12274:	00002c9a 	.word	0x00002c9a
   12278:	00002c82 	.word	0x00002c82
   1227c:	682f2e2e 	.word	0x682f2e2e
   12280:	732f6c70 	.word	0x732f6c70
   12284:	6f637265 	.word	0x6f637265
   12288:	70682f6d 	.word	0x70682f6d
   1228c:	65735f6c 	.word	0x65735f6c
   12290:	6d6f6372 	.word	0x6d6f6372
   12294:	0000632e 	.word	0x0000632e

00012298 <sercomspi_regs>:
   12298:	0020000c 00020000 00000000 01ff003b     .. .........;...
   122a8:	20000c00 02000000 00000000 ff000500     ... ............
   122b8:	00000101                                ....

000122bc <_usb_ep_cfgs>:
   122bc:	20000cf0 00000000 00000040 20000d30     ... ....@...0.. 
   122cc:	00000000 00000040 20000d70 00000000     ....@...p.. ....
   122dc:	00000040 20000db0 00000000 00000040     @...... ....@...
   122ec:	20000df0 00000000 00000040 20000e30     ... ....@...0.. 
   122fc:	00000000 00000040 20000e70 00000000     ....@...p.. ....
   1230c:	00000040 20000eb0 00000000 00000040     @...... ....@...
   1231c:	00000804 00004a25 000083a8 00008362     ....%J......b...
   1232c:	000083a8 00008374 000083a8 0000830c     ....t...........
   1233c:	000083a8 000083a8 000083a8 00008324     ............$...
   1234c:	000083a8 00008386 752f2e2e 642f6273     ........../usb/d
   1235c:	63697665 73752f65 2e636462 00000063     evice/usbdc.c...
   1236c:	682f2e2e 752f6c61 736c6974 6372732f     ../hal/utils/src
   1237c:	6974752f 6c5f736c 2e747369 00000063     /utils_list.c...
   1238c:	00676f6c 00776f70 00000000              log.pow.....

00012398 <TWO52>:
   12398:	00000000 43300000 00000000 c3300000     ......0C......0.
   123a8:	0000affc 0000af4c 0000af4c 0000af4a     ....L...L...J...
   123b8:	0000afee 0000afee 0000afe4 0000af4a     ............J...
   123c8:	0000afee 0000afe4 0000afee 0000af4a     ............J...
   123d8:	0000aff4 0000aff4 0000aff4 0000b084     ................
   123e8:	0000bd00 0000bce2 0000bc9c 0000bbba     ................
   123f8:	0000bc9c 0000bcd4 0000bc9c 0000bbba     ................
   12408:	0000bce2 0000bce2 0000bcd4 0000bbba     ................
   12418:	0000bbb2 0000bbb2 0000bbb2 0000bf18     ................
   12428:	0000c560 0000c420 0000c420 0000c41c     `... ... .......
   12438:	0000c538 0000c538 0000c52a 0000c41c     8...8...*.......
   12448:	0000c538 0000c52a 0000c538 0000c41c     8...*...8.......
   12458:	0000c540 0000c540 0000c540 0000c744     @...@...@...D...

00012468 <_global_impure_ptr>:
   12468:	20000088 0000000a 0000dbba 0000dc8e     ... ............
   12478:	0000dc8e 0000dba6 0000dc8e 0000dc8e     ................
   12488:	0000dc8e 0000dc8e 0000dc8e 0000dc8e     ................
   12498:	0000dc60 0000d772 0000dc8e 0000d768     `...r.......h...
   124a8:	0000d77c 0000dc8e 0000dbb0 0000d93c     |...........<...
   124b8:	0000d93c 0000d93c 0000d93c 0000d93c     <...<...<...<...
   124c8:	0000d93c 0000d93c 0000d93c 0000d93c     <...<...<...<...
   124d8:	0000dc8e 0000dc8e 0000dc8e 0000dc8e     ................
   124e8:	0000dc8e 0000dc8e 0000dc8e 0000dc8e     ................
   124f8:	0000dc8e 0000dc8e 0000dc76 0000dbca     ........v.......
   12508:	0000dc8e 0000dbca 0000dc8e 0000dc8e     ................
   12518:	0000dc8e 0000dc8e 0000db30 0000dc8e     ........0.......
   12528:	0000dc8e 0000db3a 0000dc8e 0000dc8e     ....:...........
   12538:	0000dc8e 0000dc8e 0000dc8e 0000db68     ............h...
   12548:	0000dc8e 0000dc8e 0000db96 0000dc8e     ................
   12558:	0000dc8e 0000dc8e 0000dc8e 0000dc8e     ................
   12568:	0000dc8e 0000dc8e 0000dc8e 0000dc8e     ................
   12578:	0000dc8e 0000d97c 0000d9b2 0000dbca     ....|...........
   12588:	0000dbca 0000dbca 0000da5a 0000d9b2     ........Z.......
   12598:	0000dc8e 0000dc8e 0000da64 0000dc8e     ........d.......
   125a8:	0000da76 0000dc8a 0000daa4 0000dace     v...............
   125b8:	0000dc8e 0000dad8 0000dc8e 0000dc86     ................
   125c8:	0000dc8e 0000dc8e 0000d7ca 00464e49     ............INF.
   125d8:	00666e69 004e414e 006e616e 33323130     inf.NAN.nan.0123
   125e8:	37363534 42413938 46454443 00000000     456789ABCDEF....
   125f8:	33323130 37363534 62613938 66656463     0123456789abcdef
   12608:	00000000 6c756e28 0000296c 00000030     ....(null)..0...

00012618 <blanks.7238>:
   12618:	20202020 20202020 20202020 20202020                     

00012628 <zeroes.7239>:
   12628:	30303030 30303030 30303030 30303030     0000000000000000
   12638:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.

00012648 <__mprec_bigtens>:
   12648:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   12658:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   12668:	7f73bf3c 75154fdd                       <.s..O.u

00012670 <__mprec_tens>:
   12670:	00000000 3ff00000 00000000 40240000     .......?......$@
   12680:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   12690:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   126a0:	00000000 412e8480 00000000 416312d0     .......A......cA
   126b0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   126c0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   126d0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   126e0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   126f0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   12700:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   12710:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   12720:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   12730:	79d99db4 44ea7843                       ...yCx.D

00012738 <p05.6055>:
   12738:	00000005 00000019 0000007d 00000043     ........}...C...
   12748:	49534f50 00000058 0000002e              POSIX.......

00012754 <_ctype_>:
   12754:	20202000 20202020 28282020 20282828     .         ((((( 
   12764:	20202020 20202020 20202020 20202020                     
   12774:	10108820 10101010 10101010 10101010      ...............
   12784:	04040410 04040404 10040404 10101010     ................
   12794:	41411010 41414141 01010101 01010101     ..AAAAAA........
   127a4:	01010101 01010101 01010101 10101010     ................
   127b4:	42421010 42424242 02020202 02020202     ..BBBBBB........
   127c4:	02020202 02020202 02020202 10101010     ................
   127d4:	00000020 00000000 00000000 00000000      ...............
	...

00012858 <_init>:
   12858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1285a:	46c0      	nop			; (mov r8, r8)
   1285c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1285e:	bc08      	pop	{r3}
   12860:	469e      	mov	lr, r3
   12862:	4770      	bx	lr

00012864 <__init_array_start>:
   12864:	0000eec5 	.word	0x0000eec5

00012868 <__frame_dummy_init_array_entry>:
   12868:	000000dd 00000b8d 00000ced              ............

00012874 <_fini>:
   12874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12876:	46c0      	nop			; (mov r8, r8)
   12878:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1287a:	bc08      	pop	{r3}
   1287c:	469e      	mov	lr, r3
   1287e:	4770      	bx	lr

00012880 <__fini_array_start>:
   12880:	000000b5 	.word	0x000000b5
