
AVR_CURIOSITY_BSP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00804000  00000c16  00000caa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c16  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00804018  00804018  00000cc2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000cc2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000480  00000000  00000000  00000d60  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000835d  00000000  00000000  000011e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003e73  00000000  00000000  0000953d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001fe4  00000000  00000000  0000d3b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007c4  00000000  00000000  0000f394  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000055ac  00000000  00000000  0000fb58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e8d  00000000  00000000  00015104  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000360  00000000  00000000  00015f91  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
   4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
   8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
   c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  10:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  14:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__vector_5>
  18:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  1c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  20:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  24:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  28:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  2c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  30:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  34:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  38:	0c 94 bc 00 	jmp	0x178	; 0x178 <__vector_14>
  3c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  40:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  44:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__vector_17>
  48:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  4c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  50:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  54:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  58:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  5c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  60:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  64:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  68:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  6c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  70:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__vector_28>
  74:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  78:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  7c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__vector_31>
  80:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  84:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  88:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  8c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  90:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  94:	0c 94 8a 02 	jmp	0x514	; 0x514 <__vector_37>
  98:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  9c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  ac:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  bc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  cc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d0:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__vector_52>
  d4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  dc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  ec:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  f0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	df e7       	ldi	r29, 0x7F	; 127
  fe:	de bf       	out	0x3e, r29	; 62

00000100 <__do_copy_data>:
 100:	10 e4       	ldi	r17, 0x40	; 64
 102:	a0 e0       	ldi	r26, 0x00	; 0
 104:	b0 e4       	ldi	r27, 0x40	; 64
 106:	e6 e1       	ldi	r30, 0x16	; 22
 108:	fc e0       	ldi	r31, 0x0C	; 12
 10a:	00 e0       	ldi	r16, 0x00	; 0
 10c:	0b bf       	out	0x3b, r16	; 59
 10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x14>
 110:	07 90       	elpm	r0, Z+
 112:	0d 92       	st	X+, r0
 114:	a8 31       	cpi	r26, 0x18	; 24
 116:	b1 07       	cpc	r27, r17
 118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0x10>

0000011a <__do_clear_bss>:
 11a:	20 e4       	ldi	r18, 0x40	; 64
 11c:	a8 e1       	ldi	r26, 0x18	; 24
 11e:	b0 e4       	ldi	r27, 0x40	; 64
 120:	01 c0       	rjmp	.+2      	; 0x124 <.do_clear_bss_start>

00000122 <.do_clear_bss_loop>:
 122:	1d 92       	st	X+, r1

00000124 <.do_clear_bss_start>:
 124:	a6 32       	cpi	r26, 0x26	; 38
 126:	b2 07       	cpc	r27, r18
 128:	e1 f7       	brne	.-8      	; 0x122 <.do_clear_bss_loop>
 12a:	0e 94 05 01 	call	0x20a	; 0x20a <main>
 12e:	0c 94 09 06 	jmp	0xc12	; 0xc12 <_exit>

00000132 <__bad_interrupt>:
 132:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000136 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
 136:	0e 94 03 02 	call	0x406	; 0x406 <system_init>
 13a:	08 95       	ret

0000013c <__vector_28>:

#include <driver_init.h>
#include <compiler.h>

ISR(ZCD0_ZCD_vect)
{
 13c:	1f 92       	push	r1
 13e:	0f 92       	push	r0
 140:	0f b6       	in	r0, 0x3f	; 63
 142:	0f 92       	push	r0
 144:	11 24       	eor	r1, r1
 146:	8f 93       	push	r24
	/* Insert your ZCD interrupt handling code here */

	ZCD0.STATUS = ZCD_CROSSIF_bm;
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	80 93 c3 06 	sts	0x06C3, r24	; 0x8006c3 <__TEXT_REGION_LENGTH__+0x7e06c3>
}
 14e:	8f 91       	pop	r24
 150:	0f 90       	pop	r0
 152:	0f be       	out	0x3f, r0	; 63
 154:	0f 90       	pop	r0
 156:	1f 90       	pop	r1
 158:	18 95       	reti

0000015a <__vector_52>:

ISR(ZCD1_ZCD_vect)
{
 15a:	1f 92       	push	r1
 15c:	0f 92       	push	r0
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	0f 92       	push	r0
 162:	11 24       	eor	r1, r1
 164:	8f 93       	push	r24
	/* Insert your ZCD interrupt handling code here */

	ZCD1.STATUS = ZCD_CROSSIF_bm;
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	80 93 cb 06 	sts	0x06CB, r24	; 0x8006cb <__TEXT_REGION_LENGTH__+0x7e06cb>
}
 16c:	8f 91       	pop	r24
 16e:	0f 90       	pop	r0
 170:	0f be       	out	0x3f, r0	; 63
 172:	0f 90       	pop	r0
 174:	1f 90       	pop	r1
 176:	18 95       	reti

00000178 <__vector_14>:



ISR(TCB0_INT_vect)
{
 178:	1f 92       	push	r1
 17a:	0f 92       	push	r0
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	0f 92       	push	r0
 180:	11 24       	eor	r1, r1
 182:	8f 93       	push	r24

	TCB0.INTFLAGS = TCB_CAPT_bm;
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	80 93 06 0b 	sts	0x0B06, r24	; 0x800b06 <__TEXT_REGION_LENGTH__+0x7e0b06>
}
 18a:	8f 91       	pop	r24
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

00000196 <__vector_31>:

ISR(TCB2_INT_vect)
{
 196:	1f 92       	push	r1
 198:	0f 92       	push	r0
 19a:	0f b6       	in	r0, 0x3f	; 63
 19c:	0f 92       	push	r0
 19e:	11 24       	eor	r1, r1
 1a0:	8f 93       	push	r24

	TCB2.INTFLAGS = TCB_CAPT_bm;
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	80 93 26 0b 	sts	0x0B26, r24	; 0x800b26 <__TEXT_REGION_LENGTH__+0x7e0b26>
}
 1a8:	8f 91       	pop	r24
 1aa:	0f 90       	pop	r0
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	0f 90       	pop	r0
 1b0:	1f 90       	pop	r1
 1b2:	18 95       	reti

000001b4 <__vector_17>:

ISR(TCD0_TRIG_vect)
{
 1b4:	1f 92       	push	r1
 1b6:	0f 92       	push	r0
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	0f 92       	push	r0
 1bc:	11 24       	eor	r1, r1
 1be:	8f 93       	push	r24
	/* Insert your TCD TRIGA interrupt handling code here */

	/* Insert your TCD TRIGB interrupt handling code here */

	/* TRIGA and TRIGB interrupt flags have to be cleared manually */
	TCD0.INTFLAGS = TCD_TRIGA_bm | TCD_TRIGB_bm;
 1c0:	8c e0       	ldi	r24, 0x0C	; 12
 1c2:	80 93 8d 0b 	sts	0x0B8D, r24	; 0x800b8d <__TEXT_REGION_LENGTH__+0x7e0b8d>
}
 1c6:	8f 91       	pop	r24
 1c8:	0f 90       	pop	r0
 1ca:	0f be       	out	0x3f, r0	; 63
 1cc:	0f 90       	pop	r0
 1ce:	1f 90       	pop	r1
 1d0:	18 95       	reti

000001d2 <RTC_enable>:
#include "stdio.h"

void RTC_enable(void)
{
	// Wait for RTC CTRLA to be unsynchronized
	while (RTC.STATUS & RTC_CTRLABUSY_bm) {
 1d2:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
 1d6:	80 fd       	sbrc	r24, 0
 1d8:	fc cf       	rjmp	.-8      	; 0x1d2 <RTC_enable>
	}

	// Enable RTC
	RTC.CTRLA |= RTC_RTCEN_bm;
 1da:	e0 e4       	ldi	r30, 0x40	; 64
 1dc:	f1 e0       	ldi	r31, 0x01	; 1
 1de:	80 81       	ld	r24, Z
 1e0:	81 60       	ori	r24, 0x01	; 1
 1e2:	80 83       	st	Z, r24
 1e4:	08 95       	ret

000001e6 <__vector_5>:
}

ISR(RTC_CNT_vect)
{
 1e6:	1f 92       	push	r1
 1e8:	0f 92       	push	r0
 1ea:	0f b6       	in	r0, 0x3f	; 63
 1ec:	0f 92       	push	r0
 1ee:	11 24       	eor	r1, r1
 1f0:	8f 93       	push	r24
 *
 * \param[in] pin       The pin number within port
 */
static inline void PORTB_toggle_pin_level(const uint8_t pin)
{
	VPORTB.IN |= 1 << pin;
 1f2:	86 b1       	in	r24, 0x06	; 6
 1f4:	88 60       	ori	r24, 0x08	; 8
 1f6:	86 b9       	out	0x06, r24	; 6
	/* Toggle LED0 */
	LED0_toggle_level();

	/* Overflow interrupt flag has to be cleared manually */
	RTC.INTFLAGS = RTC_OVF_bm;
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x7e0143>
}
 1fe:	8f 91       	pop	r24
 200:	0f 90       	pop	r0
 202:	0f be       	out	0x3f, r0	; 63
 204:	0f 90       	pop	r0
 206:	1f 90       	pop	r1
 208:	18 95       	reti

0000020a <main>:

int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
 20a:	0e 94 9b 00 	call	0x136	; 0x136 <atmel_start_init>
	RTC_enable();
 20e:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <RTC_enable>
	printf("hello \n\r");
 212:	8e e0       	ldi	r24, 0x0E	; 14
 214:	90 e4       	ldi	r25, 0x40	; 64
 216:	9f 93       	push	r25
 218:	8f 93       	push	r24
 21a:	0e 94 41 03 	call	0x682	; 0x682 <printf>
 21e:	0f 90       	pop	r0
 220:	0f 90       	pop	r0
	while (1)
	{
		asm("nop");
 222:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 224:	2f ef       	ldi	r18, 0xFF	; 255
 226:	8d e3       	ldi	r24, 0x3D	; 61
 228:	99 e4       	ldi	r25, 0x49	; 73
 22a:	21 50       	subi	r18, 0x01	; 1
 22c:	80 40       	sbci	r24, 0x00	; 0
 22e:	90 40       	sbci	r25, 0x00	; 0
 230:	e1 f7       	brne	.-8      	; 0x22a <main+0x20>
 232:	00 c0       	rjmp	.+0      	; 0x234 <main+0x2a>
 234:	00 00       	nop
		_delay_ms(1000);
		asm("nop");
 236:	00 00       	nop
 238:	f4 cf       	rjmp	.-24     	; 0x222 <main+0x18>

0000023a <BOD_init>:
int8_t BOD_init()
{

	// ccp_write_io((void*)&(BOD.CTRLA),BOD_SLEEP_DIS_gc /* Disabled */);

	BOD.INTCTRL = 0 << BOD_VLMIE_bp        /* voltage level monitor interrrupt enable: disabled */
 23a:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
	              | BOD_VLMCFG_FALLING_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
 23e:	80 e0       	ldi	r24, 0x00	; 0
 240:	08 95       	ret

00000242 <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
 242:	45 e8       	ldi	r20, 0x85	; 133
 244:	68 ed       	ldi	r22, 0xD8	; 216
 246:	8c e7       	ldi	r24, 0x7C	; 124
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	0e 94 5d 02 	call	0x4ba	; 0x4ba <protected_write_io>
 24e:	41 e8       	ldi	r20, 0x81	; 129
 250:	68 ed       	ldi	r22, 0xD8	; 216
 252:	80 e7       	ldi	r24, 0x70	; 112
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	0e 94 5d 02 	call	0x4ba	; 0x4ba <protected_write_io>
 25a:	4c e0       	ldi	r20, 0x0C	; 12
 25c:	68 ed       	ldi	r22, 0xD8	; 216
 25e:	80 e8       	ldi	r24, 0x80	; 128
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	0e 94 5d 02 	call	0x4ba	; 0x4ba <protected_write_io>
 266:	44 e2       	ldi	r20, 0x24	; 36
 268:	68 ed       	ldi	r22, 0xD8	; 216
 26a:	88 e6       	ldi	r24, 0x68	; 104
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	0e 94 5d 02 	call	0x4ba	; 0x4ba <protected_write_io>

	// ccp_write_io((void*)&(CLKCTRL.MCLKCTRLA),CLKCTRL_CLKSEL_OSCHF_gc /* Internal high-frequency oscillator */
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	/* wait for PLL to start */
	while (!(CLKCTRL.MCLKSTATUS & CLKCTRL_PLLS_bm))
 272:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
 276:	85 ff       	sbrs	r24, 5
 278:	fc cf       	rjmp	.-8      	; 0x272 <CLKCTRL_init+0x30>
		;

	return 0;
}
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	08 95       	ret

0000027e <CPUINT_init>:

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	ENABLE_INTERRUPTS();
 27e:	78 94       	sei

	return 0;
}
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	08 95       	ret

00000284 <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 284:	80 e0       	ldi	r24, 0x00	; 0
 286:	08 c0       	rjmp	.+16     	; 0x298 <mcu_init+0x14>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 288:	e8 2f       	mov	r30, r24
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	e0 5f       	subi	r30, 0xF0	; 240
 28e:	fb 4f       	sbci	r31, 0xFB	; 251
 290:	90 81       	ld	r25, Z
 292:	98 60       	ori	r25, 0x08	; 8
 294:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 296:	8f 5f       	subi	r24, 0xFF	; 255
 298:	88 30       	cpi	r24, 0x08	; 8
 29a:	b0 f3       	brcs	.-20     	; 0x288 <mcu_init+0x4>
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	08 c0       	rjmp	.+16     	; 0x2b0 <mcu_init+0x2c>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 2a0:	e8 2f       	mov	r30, r24
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	e0 5d       	subi	r30, 0xD0	; 208
 2a6:	fb 4f       	sbci	r31, 0xFB	; 251
 2a8:	90 81       	ld	r25, Z
 2aa:	98 60       	ori	r25, 0x08	; 8
 2ac:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 2ae:	8f 5f       	subi	r24, 0xFF	; 255
 2b0:	88 30       	cpi	r24, 0x08	; 8
 2b2:	b0 f3       	brcs	.-20     	; 0x2a0 <mcu_init+0x1c>
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	08 c0       	rjmp	.+16     	; 0x2c8 <mcu_init+0x44>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 2b8:	e8 2f       	mov	r30, r24
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	e0 5b       	subi	r30, 0xB0	; 176
 2be:	fb 4f       	sbci	r31, 0xFB	; 251
 2c0:	90 81       	ld	r25, Z
 2c2:	98 60       	ori	r25, 0x08	; 8
 2c4:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 2c6:	8f 5f       	subi	r24, 0xFF	; 255
 2c8:	88 30       	cpi	r24, 0x08	; 8
 2ca:	b0 f3       	brcs	.-20     	; 0x2b8 <mcu_init+0x34>
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	08 c0       	rjmp	.+16     	; 0x2e0 <mcu_init+0x5c>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 2d0:	e8 2f       	mov	r30, r24
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	e0 59       	subi	r30, 0x90	; 144
 2d6:	fb 4f       	sbci	r31, 0xFB	; 251
 2d8:	90 81       	ld	r25, Z
 2da:	98 60       	ori	r25, 0x08	; 8
 2dc:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 2de:	8f 5f       	subi	r24, 0xFF	; 255
 2e0:	88 30       	cpi	r24, 0x08	; 8
 2e2:	b0 f3       	brcs	.-20     	; 0x2d0 <mcu_init+0x4c>
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	08 c0       	rjmp	.+16     	; 0x2f8 <mcu_init+0x74>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 2e8:	e8 2f       	mov	r30, r24
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	e0 57       	subi	r30, 0x70	; 112
 2ee:	fb 4f       	sbci	r31, 0xFB	; 251
 2f0:	90 81       	ld	r25, Z
 2f2:	98 60       	ori	r25, 0x08	; 8
 2f4:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 2f6:	8f 5f       	subi	r24, 0xFF	; 255
 2f8:	88 30       	cpi	r24, 0x08	; 8
 2fa:	b0 f3       	brcs	.-20     	; 0x2e8 <mcu_init+0x64>
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	08 c0       	rjmp	.+16     	; 0x310 <mcu_init+0x8c>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 300:	e8 2f       	mov	r30, r24
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	e0 55       	subi	r30, 0x50	; 80
 306:	fb 4f       	sbci	r31, 0xFB	; 251
 308:	90 81       	ld	r25, Z
 30a:	98 60       	ori	r25, 0x08	; 8
 30c:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 30e:	8f 5f       	subi	r24, 0xFF	; 255
 310:	88 30       	cpi	r24, 0x08	; 8
 312:	b0 f3       	brcs	.-20     	; 0x300 <mcu_init+0x7c>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
 314:	08 95       	ret

00000316 <OPERATIONAL_AMPLIFIER_0_initialization>:
 */
static inline void PORTD_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
 316:	e7 e7       	ldi	r30, 0x77	; 119
 318:	f4 e0       	ldi	r31, 0x04	; 4
 31a:	80 81       	ld	r24, Z
 31c:	88 7f       	andi	r24, 0xF8	; 248
 31e:	84 60       	ori	r24, 0x04	; 4
 320:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 322:	80 81       	ld	r24, Z
 324:	87 7f       	andi	r24, 0xF7	; 247
 326:	80 83       	st	Z, r24
 */
static inline void PORTD_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
 328:	e5 e7       	ldi	r30, 0x75	; 117
 32a:	f4 e0       	ldi	r31, 0x04	; 4
 32c:	80 81       	ld	r24, Z
 32e:	88 7f       	andi	r24, 0xF8	; 248
 330:	84 60       	ori	r24, 0x04	; 4
 332:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 334:	80 81       	ld	r24, Z
 336:	87 7f       	andi	r24, 0xF7	; 247
 338:	80 83       	st	Z, r24
	// Disable digital input buffer
	PD5_set_isc(PORT_ISC_INPUT_DISABLE_gc);
	// Disable pull-up resistor
	PD5_set_pull_mode(PORT_PULL_OFF);

	OPERATIONAL_AMPLIFIER_0_init();
 33a:	0e 94 4d 02 	call	0x49a	; 0x49a <OPERATIONAL_AMPLIFIER_0_init>
 33e:	08 95       	ret

00000340 <USART_0_initialization>:
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
 340:	84 b1       	in	r24, 0x04	; 4
 342:	8d 7f       	andi	r24, 0xFD	; 253
 344:	84 b9       	out	0x04, r24	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 346:	e1 e3       	ldi	r30, 0x31	; 49
 348:	f4 e0       	ldi	r31, 0x04	; 4
 34a:	80 81       	ld	r24, Z
 34c:	87 7f       	andi	r24, 0xF7	; 247
 34e:	80 83       	st	Z, r24
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
 350:	85 b1       	in	r24, 0x05	; 5
 352:	8e 7f       	andi	r24, 0xFE	; 254
 354:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
 356:	84 b1       	in	r24, 0x04	; 4
 358:	81 60       	ori	r24, 0x01	; 1
 35a:	84 b9       	out	0x04, r24	; 4
	    // <true"> High
	    false);

	PB0_set_dir(PORT_DIR_OUT);

	USART_0_init();
 35c:	0e 94 15 03 	call	0x62a	; 0x62a <USART_0_init>
 360:	08 95       	ret

00000362 <EVENT_SYSTEM_0_initialization>:
}

void EVENT_SYSTEM_0_initialization(void)
{

	EVENT_SYSTEM_0_init();
 362:	0e 94 3c 02 	call	0x478	; 0x478 <EVENT_SYSTEM_0_init>
 366:	08 95       	ret

00000368 <ZCD_Rising_initialization>:
 */
static inline void PORTD_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
 368:	e1 e7       	ldi	r30, 0x71	; 113
 36a:	f4 e0       	ldi	r31, 0x04	; 4
 36c:	80 81       	ld	r24, Z
 36e:	88 7f       	andi	r24, 0xF8	; 248
 370:	84 60       	ori	r24, 0x04	; 4
 372:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 374:	80 81       	ld	r24, Z
 376:	87 7f       	andi	r24, 0xF7	; 247
 378:	80 83       	st	Z, r24
	// Disable digital input buffer
	PD1_set_isc(PORT_ISC_INPUT_DISABLE_gc);
	// Disable pull-up resistor
	PD1_set_pull_mode(PORT_PULL_OFF);

	ZCD_Rising_init();
 37a:	0e 94 31 03 	call	0x662	; 0x662 <ZCD_Rising_init>
 37e:	08 95       	ret

00000380 <ZCD_Falling_initialization>:
 */
static inline void PORTE_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTE + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
 380:	e3 e9       	ldi	r30, 0x93	; 147
 382:	f4 e0       	ldi	r31, 0x04	; 4
 384:	80 81       	ld	r24, Z
 386:	88 7f       	andi	r24, 0xF8	; 248
 388:	84 60       	ori	r24, 0x04	; 4
 38a:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTE + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 38c:	80 81       	ld	r24, Z
 38e:	87 7f       	andi	r24, 0xF7	; 247
 390:	80 83       	st	Z, r24
	// Disable digital input buffer
	PE3_set_isc(PORT_ISC_INPUT_DISABLE_gc);
	// Disable pull-up resistor
	PE3_set_pull_mode(PORT_PULL_OFF);

	ZCD_Falling_init();
 392:	0e 94 39 03 	call	0x672	; 0x672 <ZCD_Falling_init>
 396:	08 95       	ret

00000398 <SPI_ADF_initialization>:
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
 398:	80 b1       	in	r24, 0x00	; 0
 39a:	8f 7d       	andi	r24, 0xDF	; 223
 39c:	80 b9       	out	0x00, r24	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 39e:	e5 e1       	ldi	r30, 0x15	; 21
 3a0:	f4 e0       	ldi	r31, 0x04	; 4
 3a2:	80 81       	ld	r24, Z
 3a4:	87 7f       	andi	r24, 0xF7	; 247
 3a6:	80 83       	st	Z, r24
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
 3a8:	81 b1       	in	r24, 0x01	; 1
 3aa:	8f 7e       	andi	r24, 0xEF	; 239
 3ac:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 3ae:	80 b1       	in	r24, 0x00	; 0
 3b0:	80 61       	ori	r24, 0x10	; 16
 3b2:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
 3b4:	81 b1       	in	r24, 0x01	; 1
 3b6:	8f 7b       	andi	r24, 0xBF	; 191
 3b8:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 3ba:	80 b1       	in	r24, 0x00	; 0
 3bc:	80 64       	ori	r24, 0x40	; 64
 3be:	80 b9       	out	0x00, r24	; 0
	    // <true"> High
	    false);

	PA6_set_dir(PORT_DIR_OUT);

	SPI_ADF_init();
 3c0:	0e 94 75 02 	call	0x4ea	; 0x4ea <SPI_ADF_init>
 3c4:	08 95       	ret

000003c6 <SPI_LMX_initialization>:
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
 3c6:	88 b1       	in	r24, 0x08	; 8
 3c8:	8d 7f       	andi	r24, 0xFD	; 253
 3ca:	88 b9       	out	0x08, r24	; 8
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 3cc:	e1 e5       	ldi	r30, 0x51	; 81
 3ce:	f4 e0       	ldi	r31, 0x04	; 4
 3d0:	80 81       	ld	r24, Z
 3d2:	87 7f       	andi	r24, 0xF7	; 247
 3d4:	80 83       	st	Z, r24
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
 3d6:	89 b1       	in	r24, 0x09	; 9
 3d8:	8e 7f       	andi	r24, 0xFE	; 254
 3da:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
 3dc:	88 b1       	in	r24, 0x08	; 8
 3de:	81 60       	ori	r24, 0x01	; 1
 3e0:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
 3e2:	89 b1       	in	r24, 0x09	; 9
 3e4:	8b 7f       	andi	r24, 0xFB	; 251
 3e6:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
 3e8:	88 b1       	in	r24, 0x08	; 8
 3ea:	84 60       	ori	r24, 0x04	; 4
 3ec:	88 b9       	out	0x08, r24	; 8
	    // <true"> High
	    false);

	PC2_set_dir(PORT_DIR_OUT);

	SPI_LMX_init();
 3ee:	0e 94 7e 02 	call	0x4fc	; 0x4fc <SPI_LMX_init>
 3f2:	08 95       	ret

000003f4 <TIMER_RISING_initialization>:
}

void TIMER_RISING_initialization(void)
{

	TIMER_RISING_init();
 3f4:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <TIMER_RISING_init>
 3f8:	08 95       	ret

000003fa <TIMER_Falling_initialization>:
}

void TIMER_Falling_initialization(void)
{

	TIMER_Falling_init();
 3fa:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <TIMER_Falling_init>
 3fe:	08 95       	ret

00000400 <TIMER_C_initialization>:
}

void TIMER_C_initialization(void)
{

	TIMER_C_init();
 400:	0e 94 ff 02 	call	0x5fe	; 0x5fe <TIMER_C_init>
 404:	08 95       	ret

00000406 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
 406:	0e 94 42 01 	call	0x284	; 0x284 <mcu_init>
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
 40a:	81 b1       	in	r24, 0x01	; 1
 40c:	8f 77       	andi	r24, 0x7F	; 127
 40e:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 410:	80 b1       	in	r24, 0x00	; 0
 412:	80 68       	ori	r24, 0x80	; 128
 414:	80 b9       	out	0x00, r24	; 0
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
 416:	85 b1       	in	r24, 0x05	; 5
 418:	87 7f       	andi	r24, 0xF7	; 247
 41a:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
 41c:	84 b1       	in	r24, 0x04	; 4
 41e:	88 60       	ori	r24, 0x08	; 8
 420:	84 b9       	out	0x04, r24	; 4
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
 422:	89 b1       	in	r24, 0x09	; 9
 424:	88 60       	ori	r24, 0x08	; 8
 426:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
 428:	88 b1       	in	r24, 0x08	; 8
 42a:	88 60       	ori	r24, 0x08	; 8
 42c:	88 b9       	out	0x08, r24	; 8
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
	} else {
		VPORTD.OUT &= ~(1 << pin);
 42e:	8d b1       	in	r24, 0x0d	; 13
 430:	8b 7f       	andi	r24, 0xFB	; 251
 432:	8d b9       	out	0x0d, r24	; 13
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
 434:	8c b1       	in	r24, 0x0c	; 12
 436:	84 60       	ori	r24, 0x04	; 4
 438:	8c b9       	out	0x0c, r24	; 12
	    // <true"> High
	    false);

	LTC_ENABLE_set_dir(PORT_DIR_OUT);

	OPERATIONAL_AMPLIFIER_0_initialization();
 43a:	0e 94 8b 01 	call	0x316	; 0x316 <OPERATIONAL_AMPLIFIER_0_initialization>

	CLKCTRL_init();
 43e:	0e 94 21 01 	call	0x242	; 0x242 <CLKCTRL_init>

	USART_0_initialization();
 442:	0e 94 a0 01 	call	0x340	; 0x340 <USART_0_initialization>

	EVENT_SYSTEM_0_initialization();
 446:	0e 94 b1 01 	call	0x362	; 0x362 <EVENT_SYSTEM_0_initialization>

	SLPCTRL_init();
 44a:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SLPCTRL_init>

	CPUINT_init();
 44e:	0e 94 3f 01 	call	0x27e	; 0x27e <CPUINT_init>

	ZCD_Rising_initialization();
 452:	0e 94 b4 01 	call	0x368	; 0x368 <ZCD_Rising_initialization>

	ZCD_Falling_initialization();
 456:	0e 94 c0 01 	call	0x380	; 0x380 <ZCD_Falling_initialization>

	SPI_ADF_initialization();
 45a:	0e 94 cc 01 	call	0x398	; 0x398 <SPI_ADF_initialization>

	SPI_LMX_initialization();
 45e:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <SPI_LMX_initialization>

	RTC_0_init();
 462:	0e 94 62 02 	call	0x4c4	; 0x4c4 <RTC_0_init>

	TIMER_RISING_initialization();
 466:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <TIMER_RISING_initialization>

	TIMER_Falling_initialization();
 46a:	0e 94 fd 01 	call	0x3fa	; 0x3fa <TIMER_Falling_initialization>

	TIMER_C_initialization();
 46e:	0e 94 00 02 	call	0x400	; 0x400 <TIMER_C_initialization>

	BOD_init();
 472:	0e 94 1d 01 	call	0x23a	; 0x23a <BOD_init>
 476:	08 95       	ret

00000478 <EVENT_SYSTEM_0_init>:
 * \return Initialization status.
 */
int8_t EVENT_SYSTEM_0_init()
{

	EVSYS.CHANNEL0 = EVSYS_CHANNEL0_ZCD0_gc; /* Zero Cross Detect 0 out */
 478:	e0 e0       	ldi	r30, 0x00	; 0
 47a:	f2 e0       	ldi	r31, 0x02	; 2
 47c:	80 e3       	ldi	r24, 0x30	; 48
 47e:	80 8b       	std	Z+16, r24	; 0x10

	EVSYS.CHANNEL1 = EVSYS_CHANNEL1_ZCD1_gc; /* Zero Cross Detect 1 out */
 480:	81 e3       	ldi	r24, 0x31	; 49
 482:	81 8b       	std	Z+17, r24	; 0x11

	// EVSYS.USERTCA1CNTA = EVSYS_USER_OFF_gc; /* Off */

	// EVSYS.USERTCA1CNTB = EVSYS_USER_OFF_gc; /* Off */

	EVSYS.USERTCB0CAPT = EVSYS_USER_CHANNEL0_gc; /* Connect user to event channel 0 */
 484:	91 e0       	ldi	r25, 0x01	; 1
 486:	96 af       	std	Z+62, r25	; 0x3e

	// EVSYS.USERTCB1CAPT = EVSYS_USER_OFF_gc; /* Off */

	// EVSYS.USERTCB1COUNT = EVSYS_USER_OFF_gc; /* Off */

	EVSYS.USERTCB2CAPT = EVSYS_USER_CHANNEL1_gc; /* Connect user to event channel 1 */
 488:	82 e0       	ldi	r24, 0x02	; 2
 48a:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <__TEXT_REGION_LENGTH__+0x7e0242>

	// EVSYS.USERTCB3CAPT = EVSYS_USER_OFF_gc; /* Off */

	// EVSYS.USERTCB3COUNT = EVSYS_USER_OFF_gc; /* Off */

	EVSYS.USERTCD0INPUTA = EVSYS_USER_CHANNEL0_gc; /* Connect user to event channel 0 */
 48e:	90 93 48 02 	sts	0x0248, r25	; 0x800248 <__TEXT_REGION_LENGTH__+0x7e0248>

	EVSYS.USERTCD0INPUTB = EVSYS_USER_CHANNEL1_gc; /* Connect user to event channel 1 */
 492:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <__TEXT_REGION_LENGTH__+0x7e0249>
	// EVSYS.USEROPAMP2DUMP = EVSYS_USER_OFF_gc; /* Off */

	// EVSYS.USEROPAMP2DISABLE = EVSYS_USER_OFF_gc; /* Off */

	return 0;
}
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	08 95       	ret

0000049a <OPERATIONAL_AMPLIFIER_0_init>:
 * \return Initialization status.
 */
int8_t OPERATIONAL_AMPLIFIER_0_init()
{

	OPAMP.CTRLA = 1 << OPAMP_ENABLE_bp; /* OPAMP Peripheral Enable: enabled */
 49a:	e0 e0       	ldi	r30, 0x00	; 0
 49c:	f7 e0       	ldi	r31, 0x07	; 7
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	80 83       	st	Z, r24

	// OPAMP.DBGCTRL = 0 << OPAMP_DBGRUN_bp; /* Run in Debug mode: disabled */

	OPAMP.TIMEBASE = OPAMP_TIMEBASE_VALUE << OPAMP_TIMEBASE_gp;
 4a2:	87 e1       	ldi	r24, 0x17	; 23
 4a4:	82 83       	std	Z+2, r24	; 0x02

	// OPAMP.PWRCTRL = OPAMP_PWRCTRL_IRSEL_FULL_gc; /* Full Input Range */

	OPAMP.OP1SETTLE = 0x7f << OPAMP_SETTLE_gp; /* Setting: 0x7f */
 4a6:	8f e7       	ldi	r24, 0x7F	; 127
 4a8:	84 8f       	std	Z+28, r24	; 0x1c

	OPAMP.OP1CTRLA = 1 << OPAMP_ALWAYSON_bp             /* Always ON: enabled */
 4aa:	85 e8       	ldi	r24, 0x85	; 133
 4ac:	80 8f       	std	Z+24, r24	; 0x18
	                 | 0 << OPAMP_EVENTEN_bp            /* Event Enable: disabled */
	                 | OPAMP_OP1CTRLA_OUTMODE_NORMAL_gc /* Output Driver in Normal Mode */
	                 | 1 << OPAMP_RUNSTBY_bp;           /* Run is standby mode: enabled */

	OPAMP.OP1RESMUX = OPAMP_OP1RESMUX_MUXTOP_OUT_gc     /* OPn output */
 4ae:	89 ee       	ldi	r24, 0xE9	; 233
 4b0:	82 8f       	std	Z+26, r24	; 0x1a
	                  | OPAMP_OP1RESMUX_MUXBOT_INN_gc   /* Negative input pin for OPn */
	                  | OPAMP_OP1RESMUX_MUXWIP_WIP7_gc; /* R1 = 1R, R2 = 15R, R2/R1 = 15 */

	OPAMP.OP1INMUX = OPAMP_OP1INMUX_MUXPOS_VDDDIV2_gc /* VDD/2 */
 4b2:	84 e1       	ldi	r24, 0x14	; 20
 4b4:	83 8f       	std	Z+27, r24	; 0x1b
	                 | OPAMP_OP1INMUX_MUXNEG_WIP_gc;  /* Wiper from OPn's resistor ladder */

	return 0;
}
 4b6:	80 e0       	ldi	r24, 0x00	; 0
 4b8:	08 95       	ret

000004ba <protected_write_io>:
	PUBLIC_FUNCTION(protected_write_io)

#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
 4ba:	1b be       	out	0x3b, r1	; 59
#endif
	movw    r30, r24                // Load addr into Z
 4bc:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
 4be:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
 4c0:	40 83       	st	Z, r20
	ret                             // Return to caller
 4c2:	08 95       	ret

000004c4 <RTC_0_init>:
 * \return Initialization status.
 */
int8_t RTC_0_init()
{

	while (RTC.STATUS > 0) { /* Wait for all register to be synchronized */
 4c4:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
 4c8:	81 11       	cpse	r24, r1
 4ca:	fc cf       	rjmp	.-8      	; 0x4c4 <RTC_0_init>

	// RTC.CMP = 0x0; /* Compare: 0x0 */

	// RTC.CNT = 0x0; /* Counter: 0x0 */

	RTC.CTRLA = RTC_PRESCALER_DIV32_gc  /* 32 */
 4cc:	e0 e4       	ldi	r30, 0x40	; 64
 4ce:	f1 e0       	ldi	r31, 0x01	; 1
 4d0:	88 ea       	ldi	r24, 0xA8	; 168
 4d2:	80 83       	st	Z, r24
	            | 0 << RTC_RTCEN_bp     /* Enable: disabled */
	            | 1 << RTC_RUNSTDBY_bp; /* Run In Standby: enabled */

	RTC.PER = 0x1ff; /* Period: 0x1ff */
 4d4:	8f ef       	ldi	r24, 0xFF	; 255
 4d6:	91 e0       	ldi	r25, 0x01	; 1
 4d8:	82 87       	std	Z+10, r24	; 0x0a
 4da:	93 87       	std	Z+11, r25	; 0x0b

	RTC.CLKSEL = RTC_CLKSEL_OSC32K_gc; /* Internal 32.768 kHz oscillator */
 4dc:	17 82       	std	Z+7, r1	; 0x07

	// RTC.DBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	RTC.INTCTRL = 0 << RTC_CMP_bp    /* Compare Match Interrupt enable: disabled */
 4de:	81 e0       	ldi	r24, 0x01	; 1
 4e0:	82 83       	std	Z+2, r24	; 0x02
	// RTC.PITDBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	// RTC.PITINTCTRL = 0 << RTC_PI_bp; /* Periodic Interrupt: disabled */

	return 0;
}
 4e2:	80 e0       	ldi	r24, 0x00	; 0
 4e4:	08 95       	ret

000004e6 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
 4e6:	80 e0       	ldi	r24, 0x00	; 0
 4e8:	08 95       	ret

000004ea <SPI_ADF_init>:
                 after the previous one (i.e. data transfer phase
                 after control/command phase).
*/
void SPI_LMX_register_callback(spi_transfer_done_cb_t f)
{
	SPI_LMX_desc.cb = f;
 4ea:	e0 e4       	ldi	r30, 0x40	; 64
 4ec:	f9 e0       	ldi	r31, 0x09	; 9
 4ee:	81 e2       	ldi	r24, 0x21	; 33
 4f0:	80 83       	st	Z, r24
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	82 83       	std	Z+2, r24	; 0x02
 4f6:	10 92 1f 40 	sts	0x401F, r1	; 0x80401f <SPI_ADF_desc>
 4fa:	08 95       	ret

000004fc <SPI_LMX_init>:
 4fc:	e0 e6       	ldi	r30, 0x60	; 96
 4fe:	f9 e0       	ldi	r31, 0x09	; 9
 500:	81 e2       	ldi	r24, 0x21	; 33
 502:	80 83       	st	Z, r24
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	82 83       	std	Z+2, r24	; 0x02
 508:	e8 e1       	ldi	r30, 0x18	; 24
 50a:	f0 e4       	ldi	r31, 0x40	; 64
 50c:	10 82       	st	Z, r1
 50e:	15 82       	std	Z+5, r1	; 0x05
 510:	16 82       	std	Z+6, r1	; 0x06
 512:	08 95       	ret

00000514 <__vector_37>:
}

ISR(SPI1_INT_vect)
{
 514:	1f 92       	push	r1
 516:	0f 92       	push	r0
 518:	0f b6       	in	r0, 0x3f	; 63
 51a:	0f 92       	push	r0
 51c:	11 24       	eor	r1, r1
 51e:	0b b6       	in	r0, 0x3b	; 59
 520:	0f 92       	push	r0
 522:	2f 93       	push	r18
 524:	3f 93       	push	r19
 526:	4f 93       	push	r20
 528:	5f 93       	push	r21
 52a:	6f 93       	push	r22
 52c:	7f 93       	push	r23
 52e:	8f 93       	push	r24
 530:	9f 93       	push	r25
 532:	af 93       	push	r26
 534:	bf 93       	push	r27
 536:	ef 93       	push	r30
 538:	ff 93       	push	r31
	/* SPI_LMX_desc.data points to array element
	   to write the received data to. The data to be transmitted
	   is in the next array element.
	*/
	uint8_t rdata = SPI1.DATA;
 53a:	e0 e6       	ldi	r30, 0x60	; 96
 53c:	f9 e0       	ldi	r31, 0x09	; 9
 53e:	94 81       	ldd	r25, Z+4	; 0x04
	uint8_t wdata = 0;

	SPI1.INTFLAGS = SPI_RXCIF_bm;
 540:	80 e8       	ldi	r24, 0x80	; 128
 542:	83 83       	std	Z+3, r24	; 0x03

	if (SPI_LMX_desc.type != SPI_WRITE) {
 544:	80 91 1c 40 	lds	r24, 0x401C	; 0x80401c <__data_end+0x4>
 548:	82 30       	cpi	r24, 0x02	; 2
 54a:	29 f0       	breq	.+10     	; 0x556 <__vector_37+0x42>
		*SPI_LMX_desc.data = rdata;
 54c:	e0 91 19 40 	lds	r30, 0x4019	; 0x804019 <__data_end+0x1>
 550:	f0 91 1a 40 	lds	r31, 0x401A	; 0x80401a <__data_end+0x2>
 554:	90 83       	st	Z, r25
	}

	SPI_LMX_desc.data++;
 556:	e8 e1       	ldi	r30, 0x18	; 24
 558:	f0 e4       	ldi	r31, 0x40	; 64
 55a:	a1 81       	ldd	r26, Z+1	; 0x01
 55c:	b2 81       	ldd	r27, Z+2	; 0x02
 55e:	9d 01       	movw	r18, r26
 560:	2f 5f       	subi	r18, 0xFF	; 255
 562:	3f 4f       	sbci	r19, 0xFF	; 255
 564:	21 83       	std	Z+1, r18	; 0x01
 566:	32 83       	std	Z+2, r19	; 0x02

	if (SPI_LMX_desc.type != SPI_READ)
 568:	81 30       	cpi	r24, 0x01	; 1
 56a:	19 f0       	breq	.+6      	; 0x572 <__vector_37+0x5e>
		wdata = *SPI_LMX_desc.data;
 56c:	11 96       	adiw	r26, 0x01	; 1
 56e:	9c 91       	ld	r25, X
 570:	01 c0       	rjmp	.+2      	; 0x574 <__vector_37+0x60>
	/* SPI_LMX_desc.data points to array element
	   to write the received data to. The data to be transmitted
	   is in the next array element.
	*/
	uint8_t rdata = SPI1.DATA;
	uint8_t wdata = 0;
 572:	90 e0       	ldi	r25, 0x00	; 0
	SPI_LMX_desc.data++;

	if (SPI_LMX_desc.type != SPI_READ)
		wdata = *SPI_LMX_desc.data;

	SPI_LMX_desc.size--;
 574:	e8 e1       	ldi	r30, 0x18	; 24
 576:	f0 e4       	ldi	r31, 0x40	; 64
 578:	83 81       	ldd	r24, Z+3	; 0x03
 57a:	81 50       	subi	r24, 0x01	; 1
 57c:	83 83       	std	Z+3, r24	; 0x03
	// if more bytes to be transferred
	if (SPI_LMX_desc.size != 0) {
 57e:	88 23       	and	r24, r24
 580:	19 f0       	breq	.+6      	; 0x588 <__vector_37+0x74>
		// more data to send, send a byte
		SPI1.DATA = wdata;
 582:	90 93 64 09 	sts	0x0964, r25	; 0x800964 <__TEXT_REGION_LENGTH__+0x7e0964>
 586:	0a c0       	rjmp	.+20     	; 0x59c <__vector_37+0x88>
	}

	// if last byte has been transferred, update status
	// and optionally call callback
	else {
		SPI_LMX_desc.status = SPI_DONE;
 588:	e8 e1       	ldi	r30, 0x18	; 24
 58a:	f0 e4       	ldi	r31, 0x40	; 64
 58c:	83 e0       	ldi	r24, 0x03	; 3
 58e:	80 83       	st	Z, r24
		if (SPI_LMX_desc.cb != NULL) {
 590:	05 80       	ldd	r0, Z+5	; 0x05
 592:	f6 81       	ldd	r31, Z+6	; 0x06
 594:	e0 2d       	mov	r30, r0
 596:	30 97       	sbiw	r30, 0x00	; 0
 598:	09 f0       	breq	.+2      	; 0x59c <__vector_37+0x88>
			SPI_LMX_desc.cb();
 59a:	09 95       	icall
		}
	}
}
 59c:	ff 91       	pop	r31
 59e:	ef 91       	pop	r30
 5a0:	bf 91       	pop	r27
 5a2:	af 91       	pop	r26
 5a4:	9f 91       	pop	r25
 5a6:	8f 91       	pop	r24
 5a8:	7f 91       	pop	r23
 5aa:	6f 91       	pop	r22
 5ac:	5f 91       	pop	r21
 5ae:	4f 91       	pop	r20
 5b0:	3f 91       	pop	r19
 5b2:	2f 91       	pop	r18
 5b4:	0f 90       	pop	r0
 5b6:	0b be       	out	0x3b, r0	; 59
 5b8:	0f 90       	pop	r0
 5ba:	0f be       	out	0x3f, r0	; 63
 5bc:	0f 90       	pop	r0
 5be:	1f 90       	pop	r1
 5c0:	18 95       	reti

000005c2 <TIMER_RISING_init>:
 * \return Initialization status.
 */
int8_t TIMER_RISING_init()
{

	TCB0.CCMP = 0xffff; /* Compare or Capture: 0xffff */
 5c2:	e0 e0       	ldi	r30, 0x00	; 0
 5c4:	fb e0       	ldi	r31, 0x0B	; 11
 5c6:	8f ef       	ldi	r24, 0xFF	; 255
 5c8:	9f ef       	ldi	r25, 0xFF	; 255
 5ca:	84 87       	std	Z+12, r24	; 0x0c
 5cc:	95 87       	std	Z+13, r25	; 0x0d

	TCB0.CNT = 0xffff; /* Count: 0xffff */
 5ce:	82 87       	std	Z+10, r24	; 0x0a
 5d0:	93 87       	std	Z+11, r25	; 0x0b

	TCB0.CTRLB = 1 << TCB_ASYNC_bp      /* Asynchronous Enable: enabled */
 5d2:	83 e4       	ldi	r24, 0x43	; 67
 5d4:	81 83       	std	Z+1, r24	; 0x01
	             | 0 << TCB_CCMPEN_bp   /* Pin Output Enable: disabled */
	             | 0 << TCB_CCMPINIT_bp /* Pin Initial State: disabled */
	             | TCB_CNTMODE_FRQ_gc;  /* Input Capture Frequency measurement */

	TCB0.DBGCTRL = 1 << TCB_DBGRUN_bp; /* Debug Run: enabled */
 5d6:	81 e0       	ldi	r24, 0x01	; 1
 5d8:	80 87       	std	Z+8, r24	; 0x08

	TCB0.EVCTRL = 1 << TCB_CAPTEI_bp    /* Event Input Enable: enabled */
 5da:	84 83       	std	Z+4, r24	; 0x04
	              | 0 << TCB_EDGE_bp    /* Event Edge: disabled */
	              | 0 << TCB_FILTER_bp; /* Input Capture Noise Cancellation Filter: disabled */

	TCB0.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
 5dc:	85 83       	std	Z+5, r24	; 0x05
	               | 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */

	TCB0.CTRLA = TCB_CLKSEL_DIV1_gc     /* CLK_PER */
 5de:	81 e4       	ldi	r24, 0x41	; 65
 5e0:	80 83       	st	Z, r24
	             | 1 << TCB_RUNSTDBY_bp /* Run Standby: enabled */
	             | 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
	             | 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */

	return 0;
}
 5e2:	80 e0       	ldi	r24, 0x00	; 0
 5e4:	08 95       	ret

000005e6 <TIMER_Falling_init>:

	// TCB2.CCMP = 0x0; /* Compare or Capture: 0x0 */

	// TCB2.CNT = 0x0; /* Count: 0x0 */

	TCB2.CTRLB = 1 << TCB_ASYNC_bp      /* Asynchronous Enable: enabled */
 5e6:	e0 e2       	ldi	r30, 0x20	; 32
 5e8:	fb e0       	ldi	r31, 0x0B	; 11
 5ea:	83 e4       	ldi	r24, 0x43	; 67
 5ec:	81 83       	std	Z+1, r24	; 0x01
	             | 0 << TCB_CCMPEN_bp   /* Pin Output Enable: disabled */
	             | 0 << TCB_CCMPINIT_bp /* Pin Initial State: disabled */
	             | TCB_CNTMODE_FRQ_gc;  /* Input Capture Frequency measurement */

	TCB2.DBGCTRL = 1 << TCB_DBGRUN_bp; /* Debug Run: enabled */
 5ee:	81 e0       	ldi	r24, 0x01	; 1
 5f0:	80 87       	std	Z+8, r24	; 0x08

	TCB2.EVCTRL = 1 << TCB_CAPTEI_bp    /* Event Input Enable: enabled */
 5f2:	84 83       	std	Z+4, r24	; 0x04
	              | 0 << TCB_EDGE_bp    /* Event Edge: disabled */
	              | 0 << TCB_FILTER_bp; /* Input Capture Noise Cancellation Filter: disabled */

	TCB2.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
 5f4:	85 83       	std	Z+5, r24	; 0x05
	               | 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */

	TCB2.CTRLA = TCB_CLKSEL_DIV1_gc     /* CLK_PER */
 5f6:	81 e4       	ldi	r24, 0x41	; 65
 5f8:	80 83       	st	Z, r24
	             | 1 << TCB_RUNSTDBY_bp /* Run Standby: enabled */
	             | 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
	             | 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */

	return 0;
}
 5fa:	80 e0       	ldi	r24, 0x00	; 0
 5fc:	08 95       	ret

000005fe <TIMER_C_init>:
int8_t TIMER_C_init()
{

	// Enable Protected register, peripheral must be disabled (ENABLE=0, in TCD.CTRLA).

	TCD0.CMPASET = 4095; /* Compare A Set: 4095 */
 5fe:	e0 e8       	ldi	r30, 0x80	; 128
 600:	fb e0       	ldi	r31, 0x0B	; 11
 602:	8f ef       	ldi	r24, 0xFF	; 255
 604:	9f e0       	ldi	r25, 0x0F	; 15
 606:	80 a7       	std	Z+40, r24	; 0x28
 608:	91 a7       	std	Z+41, r25	; 0x29

	// TCD0.CMPACLR = 0; /* Compare A Clear: 0 */

	TCD0.CMPBSET = 4095; /* Compare B Set: 4095 */
 60a:	84 a7       	std	Z+44, r24	; 0x2c
 60c:	95 a7       	std	Z+45, r25	; 0x2d
	//		 | TCD_DLYTRIG_CMPASET_gc; /* Compare A set */

	// TCD0.DLYVAL = 0 << TCD_DLYVAL_gp; /* Delay value: 0 */

	TCD0.EVCTRLA
	    = TCD_CFG_NEITHER_gc      /* Neither Filter nor Asynchronous Event is enabled */
 60e:	85 e1       	ldi	r24, 0x15	; 21
 610:	80 87       	std	Z+8, r24	; 0x08
	      | TCD_ACTION_CAPTURE_gc /* Event trigger a fault and capture */
	      | TCD_EDGE_RISE_HIGH_gc /* The rising edge or high level of event generates retrigger or fault action */
	      | 1 << TCD_TRIGEI_bp;   /* Trigger event enable: enabled */

	TCD0.EVCTRLB
	    = TCD_CFG_NEITHER_gc      /* Neither Filter nor Asynchronous Event is enabled */
 612:	81 87       	std	Z+9, r24	; 0x09

	// TCD0.INPUTCTRLA = TCD_INPUTMODE_NONE_gc; /* Input has no actions */

	// TCD0.INPUTCTRLB = TCD_INPUTMODE_NONE_gc; /* Input has no actions */

	TCD0.INTCTRL = 0 << TCD_OVF_bp      /* Overflow interrupt enable: disabled */
 614:	8c e0       	ldi	r24, 0x0C	; 12
 616:	84 87       	std	Z+12, r24	; 0x0c
	               | 1 << TCD_TRIGA_bp  /* Trigger A interrupt enable: enabled */
	               | 1 << TCD_TRIGB_bp; /* Trigger B interrupt enable: enabled */

	while ((TCD0.STATUS & TCD_ENRDY_bm) == 0)
 618:	80 91 8e 0b 	lds	r24, 0x0B8E	; 0x800b8e <__TEXT_REGION_LENGTH__+0x7e0b8e>
 61c:	80 ff       	sbrs	r24, 0
 61e:	fc cf       	rjmp	.-8      	; 0x618 <TIMER_C_init+0x1a>
		; // Wait for Enable Ready to be high.

	TCD0.CTRLA = 1 << TCD_ENABLE_bp      /* Enable: enabled */
 620:	81 e2       	ldi	r24, 0x21	; 33
 622:	80 93 80 0b 	sts	0x0B80, r24	; 0x800b80 <__TEXT_REGION_LENGTH__+0x7e0b80>
	             | TCD_CLKSEL_PLL_gc     /*  */
	             | TCD_CNTPRES_DIV1_gc   /* Sync clock divided by 1 */
	             | TCD_SYNCPRES_DIV1_gc; /*  */

	return 0;
}
 626:	80 e0       	ldi	r24, 0x00	; 0
 628:	08 95       	ret

0000062a <USART_0_init>:
uint8_t USART_0_read()
{
	while (!(USART3.STATUS & USART_RXCIF_bm))
		;
	return USART3.RXDATAL;
}
 62a:	e0 e6       	ldi	r30, 0x60	; 96
 62c:	f8 e0       	ldi	r31, 0x08	; 8
 62e:	81 e4       	ldi	r24, 0x41	; 65
 630:	93 e0       	ldi	r25, 0x03	; 3
 632:	80 87       	std	Z+8, r24	; 0x08
 634:	91 87       	std	Z+9, r25	; 0x09
 636:	80 ec       	ldi	r24, 0xC0	; 192
 638:	86 83       	std	Z+6, r24	; 0x06
 63a:	80 e0       	ldi	r24, 0x00	; 0
 63c:	90 e4       	ldi	r25, 0x40	; 64
 63e:	80 93 22 40 	sts	0x4022, r24	; 0x804022 <__iob+0x2>
 642:	90 93 23 40 	sts	0x4023, r25	; 0x804023 <__iob+0x3>
 646:	80 e0       	ldi	r24, 0x00	; 0
 648:	08 95       	ret

0000064a <USART_0_write>:
 *
 * \return Nothing
 */
void USART_0_write(const uint8_t data)
{
	while (!(USART3.STATUS & USART_DREIF_bm))
 64a:	90 91 64 08 	lds	r25, 0x0864	; 0x800864 <__TEXT_REGION_LENGTH__+0x7e0864>
 64e:	95 ff       	sbrs	r25, 5
 650:	fc cf       	rjmp	.-8      	; 0x64a <USART_0_write>
		;
	USART3.TXDATAL = data;
 652:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <__TEXT_REGION_LENGTH__+0x7e0862>
 656:	08 95       	ret

00000658 <USART_0_printCHAR>:

#if defined(__GNUC__)

int USART_0_printCHAR(char character, FILE *stream)
{
	USART_0_write(character);
 658:	0e 94 25 03 	call	0x64a	; 0x64a <USART_0_write>
	return 0;
}
 65c:	80 e0       	ldi	r24, 0x00	; 0
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	08 95       	ret

00000662 <ZCD_Rising_init>:
 * \return Initialization status.
 */
int8_t ZCD_Rising_init()
{

	ZCD0.CTRLA = 1 << ZCD_ENABLE_bp     /* Setting: enabled */
 662:	e0 ec       	ldi	r30, 0xC0	; 192
 664:	f6 e0       	ldi	r31, 0x06	; 6
 666:	81 e8       	ldi	r24, 0x81	; 129
 668:	80 83       	st	Z, r24
	             | 0 << ZCD_OUTEN_bp    /* Setting: disabled */
	             | 1 << ZCD_RUNSTDBY_bp /* Setting: enabled */
	             | 0 << ZCD_INVERT_bp;  /* Setting: disabled */

	ZCD0.INTCTRL = ZCD_INTMODE_RISING_gc; /* Interrupt on rising input signal */
 66a:	81 e0       	ldi	r24, 0x01	; 1
 66c:	82 83       	std	Z+2, r24	; 0x02

	return 0;
}
 66e:	80 e0       	ldi	r24, 0x00	; 0
 670:	08 95       	ret

00000672 <ZCD_Falling_init>:
 * \return Initialization status.
 */
int8_t ZCD_Falling_init()
{

	ZCD1.CTRLA = 1 << ZCD_ENABLE_bp     /* Setting: enabled */
 672:	e8 ec       	ldi	r30, 0xC8	; 200
 674:	f6 e0       	ldi	r31, 0x06	; 6
 676:	81 e8       	ldi	r24, 0x81	; 129
 678:	80 83       	st	Z, r24
	             | 0 << ZCD_OUTEN_bp    /* Setting: disabled */
	             | 1 << ZCD_RUNSTDBY_bp /* Setting: enabled */
	             | 0 << ZCD_INVERT_bp;  /* Setting: disabled */

	ZCD1.INTCTRL = ZCD_INTMODE_FALLING_gc; /* Interrupt on falling input signal */
 67a:	82 e0       	ldi	r24, 0x02	; 2
 67c:	82 83       	std	Z+2, r24	; 0x02

	return 0;
}
 67e:	80 e0       	ldi	r24, 0x00	; 0
 680:	08 95       	ret

00000682 <printf>:
 682:	cf 93       	push	r28
 684:	df 93       	push	r29
 686:	cd b7       	in	r28, 0x3d	; 61
 688:	de b7       	in	r29, 0x3e	; 62
 68a:	ae 01       	movw	r20, r28
 68c:	4b 5f       	subi	r20, 0xFB	; 251
 68e:	5f 4f       	sbci	r21, 0xFF	; 255
 690:	fa 01       	movw	r30, r20
 692:	61 91       	ld	r22, Z+
 694:	71 91       	ld	r23, Z+
 696:	af 01       	movw	r20, r30
 698:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <__iob+0x2>
 69c:	90 91 23 40 	lds	r25, 0x4023	; 0x804023 <__iob+0x3>
 6a0:	0e 94 55 03 	call	0x6aa	; 0x6aa <vfprintf>
 6a4:	df 91       	pop	r29
 6a6:	cf 91       	pop	r28
 6a8:	08 95       	ret

000006aa <vfprintf>:
 6aa:	2f 92       	push	r2
 6ac:	3f 92       	push	r3
 6ae:	4f 92       	push	r4
 6b0:	5f 92       	push	r5
 6b2:	6f 92       	push	r6
 6b4:	7f 92       	push	r7
 6b6:	8f 92       	push	r8
 6b8:	9f 92       	push	r9
 6ba:	af 92       	push	r10
 6bc:	bf 92       	push	r11
 6be:	cf 92       	push	r12
 6c0:	df 92       	push	r13
 6c2:	ef 92       	push	r14
 6c4:	ff 92       	push	r15
 6c6:	0f 93       	push	r16
 6c8:	1f 93       	push	r17
 6ca:	cf 93       	push	r28
 6cc:	df 93       	push	r29
 6ce:	cd b7       	in	r28, 0x3d	; 61
 6d0:	de b7       	in	r29, 0x3e	; 62
 6d2:	2b 97       	sbiw	r28, 0x0b	; 11
 6d4:	cd bf       	out	0x3d, r28	; 61
 6d6:	de bf       	out	0x3e, r29	; 62
 6d8:	6c 01       	movw	r12, r24
 6da:	7b 01       	movw	r14, r22
 6dc:	8a 01       	movw	r16, r20
 6de:	fc 01       	movw	r30, r24
 6e0:	16 82       	std	Z+6, r1	; 0x06
 6e2:	17 82       	std	Z+7, r1	; 0x07
 6e4:	83 81       	ldd	r24, Z+3	; 0x03
 6e6:	81 ff       	sbrs	r24, 1
 6e8:	cc c1       	rjmp	.+920    	; 0xa82 <vfprintf+0x3d8>
 6ea:	ce 01       	movw	r24, r28
 6ec:	01 96       	adiw	r24, 0x01	; 1
 6ee:	3c 01       	movw	r6, r24
 6f0:	f6 01       	movw	r30, r12
 6f2:	93 81       	ldd	r25, Z+3	; 0x03
 6f4:	f7 01       	movw	r30, r14
 6f6:	93 fd       	sbrc	r25, 3
 6f8:	85 91       	lpm	r24, Z+
 6fa:	93 ff       	sbrs	r25, 3
 6fc:	81 91       	ld	r24, Z+
 6fe:	7f 01       	movw	r14, r30
 700:	88 23       	and	r24, r24
 702:	09 f4       	brne	.+2      	; 0x706 <vfprintf+0x5c>
 704:	ba c1       	rjmp	.+884    	; 0xa7a <vfprintf+0x3d0>
 706:	85 32       	cpi	r24, 0x25	; 37
 708:	39 f4       	brne	.+14     	; 0x718 <vfprintf+0x6e>
 70a:	93 fd       	sbrc	r25, 3
 70c:	85 91       	lpm	r24, Z+
 70e:	93 ff       	sbrs	r25, 3
 710:	81 91       	ld	r24, Z+
 712:	7f 01       	movw	r14, r30
 714:	85 32       	cpi	r24, 0x25	; 37
 716:	29 f4       	brne	.+10     	; 0x722 <vfprintf+0x78>
 718:	b6 01       	movw	r22, r12
 71a:	90 e0       	ldi	r25, 0x00	; 0
 71c:	0e 94 6f 05 	call	0xade	; 0xade <fputc>
 720:	e7 cf       	rjmp	.-50     	; 0x6f0 <vfprintf+0x46>
 722:	91 2c       	mov	r9, r1
 724:	21 2c       	mov	r2, r1
 726:	31 2c       	mov	r3, r1
 728:	ff e1       	ldi	r31, 0x1F	; 31
 72a:	f3 15       	cp	r31, r3
 72c:	d8 f0       	brcs	.+54     	; 0x764 <vfprintf+0xba>
 72e:	8b 32       	cpi	r24, 0x2B	; 43
 730:	79 f0       	breq	.+30     	; 0x750 <vfprintf+0xa6>
 732:	38 f4       	brcc	.+14     	; 0x742 <vfprintf+0x98>
 734:	80 32       	cpi	r24, 0x20	; 32
 736:	79 f0       	breq	.+30     	; 0x756 <vfprintf+0xac>
 738:	83 32       	cpi	r24, 0x23	; 35
 73a:	a1 f4       	brne	.+40     	; 0x764 <vfprintf+0xba>
 73c:	23 2d       	mov	r18, r3
 73e:	20 61       	ori	r18, 0x10	; 16
 740:	1d c0       	rjmp	.+58     	; 0x77c <vfprintf+0xd2>
 742:	8d 32       	cpi	r24, 0x2D	; 45
 744:	61 f0       	breq	.+24     	; 0x75e <vfprintf+0xb4>
 746:	80 33       	cpi	r24, 0x30	; 48
 748:	69 f4       	brne	.+26     	; 0x764 <vfprintf+0xba>
 74a:	23 2d       	mov	r18, r3
 74c:	21 60       	ori	r18, 0x01	; 1
 74e:	16 c0       	rjmp	.+44     	; 0x77c <vfprintf+0xd2>
 750:	83 2d       	mov	r24, r3
 752:	82 60       	ori	r24, 0x02	; 2
 754:	38 2e       	mov	r3, r24
 756:	e3 2d       	mov	r30, r3
 758:	e4 60       	ori	r30, 0x04	; 4
 75a:	3e 2e       	mov	r3, r30
 75c:	2a c0       	rjmp	.+84     	; 0x7b2 <vfprintf+0x108>
 75e:	f3 2d       	mov	r31, r3
 760:	f8 60       	ori	r31, 0x08	; 8
 762:	1d c0       	rjmp	.+58     	; 0x79e <vfprintf+0xf4>
 764:	37 fc       	sbrc	r3, 7
 766:	2d c0       	rjmp	.+90     	; 0x7c2 <vfprintf+0x118>
 768:	20 ed       	ldi	r18, 0xD0	; 208
 76a:	28 0f       	add	r18, r24
 76c:	2a 30       	cpi	r18, 0x0A	; 10
 76e:	40 f0       	brcs	.+16     	; 0x780 <vfprintf+0xd6>
 770:	8e 32       	cpi	r24, 0x2E	; 46
 772:	b9 f4       	brne	.+46     	; 0x7a2 <vfprintf+0xf8>
 774:	36 fc       	sbrc	r3, 6
 776:	81 c1       	rjmp	.+770    	; 0xa7a <vfprintf+0x3d0>
 778:	23 2d       	mov	r18, r3
 77a:	20 64       	ori	r18, 0x40	; 64
 77c:	32 2e       	mov	r3, r18
 77e:	19 c0       	rjmp	.+50     	; 0x7b2 <vfprintf+0x108>
 780:	36 fe       	sbrs	r3, 6
 782:	06 c0       	rjmp	.+12     	; 0x790 <vfprintf+0xe6>
 784:	8a e0       	ldi	r24, 0x0A	; 10
 786:	98 9e       	mul	r9, r24
 788:	20 0d       	add	r18, r0
 78a:	11 24       	eor	r1, r1
 78c:	92 2e       	mov	r9, r18
 78e:	11 c0       	rjmp	.+34     	; 0x7b2 <vfprintf+0x108>
 790:	ea e0       	ldi	r30, 0x0A	; 10
 792:	2e 9e       	mul	r2, r30
 794:	20 0d       	add	r18, r0
 796:	11 24       	eor	r1, r1
 798:	22 2e       	mov	r2, r18
 79a:	f3 2d       	mov	r31, r3
 79c:	f0 62       	ori	r31, 0x20	; 32
 79e:	3f 2e       	mov	r3, r31
 7a0:	08 c0       	rjmp	.+16     	; 0x7b2 <vfprintf+0x108>
 7a2:	8c 36       	cpi	r24, 0x6C	; 108
 7a4:	21 f4       	brne	.+8      	; 0x7ae <vfprintf+0x104>
 7a6:	83 2d       	mov	r24, r3
 7a8:	80 68       	ori	r24, 0x80	; 128
 7aa:	38 2e       	mov	r3, r24
 7ac:	02 c0       	rjmp	.+4      	; 0x7b2 <vfprintf+0x108>
 7ae:	88 36       	cpi	r24, 0x68	; 104
 7b0:	41 f4       	brne	.+16     	; 0x7c2 <vfprintf+0x118>
 7b2:	f7 01       	movw	r30, r14
 7b4:	93 fd       	sbrc	r25, 3
 7b6:	85 91       	lpm	r24, Z+
 7b8:	93 ff       	sbrs	r25, 3
 7ba:	81 91       	ld	r24, Z+
 7bc:	7f 01       	movw	r14, r30
 7be:	81 11       	cpse	r24, r1
 7c0:	b3 cf       	rjmp	.-154    	; 0x728 <vfprintf+0x7e>
 7c2:	98 2f       	mov	r25, r24
 7c4:	9f 7d       	andi	r25, 0xDF	; 223
 7c6:	95 54       	subi	r25, 0x45	; 69
 7c8:	93 30       	cpi	r25, 0x03	; 3
 7ca:	28 f4       	brcc	.+10     	; 0x7d6 <vfprintf+0x12c>
 7cc:	0c 5f       	subi	r16, 0xFC	; 252
 7ce:	1f 4f       	sbci	r17, 0xFF	; 255
 7d0:	9f e3       	ldi	r25, 0x3F	; 63
 7d2:	99 83       	std	Y+1, r25	; 0x01
 7d4:	0d c0       	rjmp	.+26     	; 0x7f0 <vfprintf+0x146>
 7d6:	83 36       	cpi	r24, 0x63	; 99
 7d8:	31 f0       	breq	.+12     	; 0x7e6 <vfprintf+0x13c>
 7da:	83 37       	cpi	r24, 0x73	; 115
 7dc:	71 f0       	breq	.+28     	; 0x7fa <vfprintf+0x150>
 7de:	83 35       	cpi	r24, 0x53	; 83
 7e0:	09 f0       	breq	.+2      	; 0x7e4 <vfprintf+0x13a>
 7e2:	59 c0       	rjmp	.+178    	; 0x896 <vfprintf+0x1ec>
 7e4:	21 c0       	rjmp	.+66     	; 0x828 <vfprintf+0x17e>
 7e6:	f8 01       	movw	r30, r16
 7e8:	80 81       	ld	r24, Z
 7ea:	89 83       	std	Y+1, r24	; 0x01
 7ec:	0e 5f       	subi	r16, 0xFE	; 254
 7ee:	1f 4f       	sbci	r17, 0xFF	; 255
 7f0:	88 24       	eor	r8, r8
 7f2:	83 94       	inc	r8
 7f4:	91 2c       	mov	r9, r1
 7f6:	53 01       	movw	r10, r6
 7f8:	13 c0       	rjmp	.+38     	; 0x820 <vfprintf+0x176>
 7fa:	28 01       	movw	r4, r16
 7fc:	f2 e0       	ldi	r31, 0x02	; 2
 7fe:	4f 0e       	add	r4, r31
 800:	51 1c       	adc	r5, r1
 802:	f8 01       	movw	r30, r16
 804:	a0 80       	ld	r10, Z
 806:	b1 80       	ldd	r11, Z+1	; 0x01
 808:	36 fe       	sbrs	r3, 6
 80a:	03 c0       	rjmp	.+6      	; 0x812 <vfprintf+0x168>
 80c:	69 2d       	mov	r22, r9
 80e:	70 e0       	ldi	r23, 0x00	; 0
 810:	02 c0       	rjmp	.+4      	; 0x816 <vfprintf+0x16c>
 812:	6f ef       	ldi	r22, 0xFF	; 255
 814:	7f ef       	ldi	r23, 0xFF	; 255
 816:	c5 01       	movw	r24, r10
 818:	0e 94 64 05 	call	0xac8	; 0xac8 <strnlen>
 81c:	4c 01       	movw	r8, r24
 81e:	82 01       	movw	r16, r4
 820:	f3 2d       	mov	r31, r3
 822:	ff 77       	andi	r31, 0x7F	; 127
 824:	3f 2e       	mov	r3, r31
 826:	16 c0       	rjmp	.+44     	; 0x854 <vfprintf+0x1aa>
 828:	28 01       	movw	r4, r16
 82a:	22 e0       	ldi	r18, 0x02	; 2
 82c:	42 0e       	add	r4, r18
 82e:	51 1c       	adc	r5, r1
 830:	f8 01       	movw	r30, r16
 832:	a0 80       	ld	r10, Z
 834:	b1 80       	ldd	r11, Z+1	; 0x01
 836:	36 fe       	sbrs	r3, 6
 838:	03 c0       	rjmp	.+6      	; 0x840 <vfprintf+0x196>
 83a:	69 2d       	mov	r22, r9
 83c:	70 e0       	ldi	r23, 0x00	; 0
 83e:	02 c0       	rjmp	.+4      	; 0x844 <vfprintf+0x19a>
 840:	6f ef       	ldi	r22, 0xFF	; 255
 842:	7f ef       	ldi	r23, 0xFF	; 255
 844:	c5 01       	movw	r24, r10
 846:	0e 94 59 05 	call	0xab2	; 0xab2 <strnlen_P>
 84a:	4c 01       	movw	r8, r24
 84c:	f3 2d       	mov	r31, r3
 84e:	f0 68       	ori	r31, 0x80	; 128
 850:	3f 2e       	mov	r3, r31
 852:	82 01       	movw	r16, r4
 854:	33 fc       	sbrc	r3, 3
 856:	1b c0       	rjmp	.+54     	; 0x88e <vfprintf+0x1e4>
 858:	82 2d       	mov	r24, r2
 85a:	90 e0       	ldi	r25, 0x00	; 0
 85c:	88 16       	cp	r8, r24
 85e:	99 06       	cpc	r9, r25
 860:	b0 f4       	brcc	.+44     	; 0x88e <vfprintf+0x1e4>
 862:	b6 01       	movw	r22, r12
 864:	80 e2       	ldi	r24, 0x20	; 32
 866:	90 e0       	ldi	r25, 0x00	; 0
 868:	0e 94 6f 05 	call	0xade	; 0xade <fputc>
 86c:	2a 94       	dec	r2
 86e:	f4 cf       	rjmp	.-24     	; 0x858 <vfprintf+0x1ae>
 870:	f5 01       	movw	r30, r10
 872:	37 fc       	sbrc	r3, 7
 874:	85 91       	lpm	r24, Z+
 876:	37 fe       	sbrs	r3, 7
 878:	81 91       	ld	r24, Z+
 87a:	5f 01       	movw	r10, r30
 87c:	b6 01       	movw	r22, r12
 87e:	90 e0       	ldi	r25, 0x00	; 0
 880:	0e 94 6f 05 	call	0xade	; 0xade <fputc>
 884:	21 10       	cpse	r2, r1
 886:	2a 94       	dec	r2
 888:	21 e0       	ldi	r18, 0x01	; 1
 88a:	82 1a       	sub	r8, r18
 88c:	91 08       	sbc	r9, r1
 88e:	81 14       	cp	r8, r1
 890:	91 04       	cpc	r9, r1
 892:	71 f7       	brne	.-36     	; 0x870 <vfprintf+0x1c6>
 894:	e8 c0       	rjmp	.+464    	; 0xa66 <vfprintf+0x3bc>
 896:	84 36       	cpi	r24, 0x64	; 100
 898:	11 f0       	breq	.+4      	; 0x89e <vfprintf+0x1f4>
 89a:	89 36       	cpi	r24, 0x69	; 105
 89c:	41 f5       	brne	.+80     	; 0x8ee <vfprintf+0x244>
 89e:	f8 01       	movw	r30, r16
 8a0:	37 fe       	sbrs	r3, 7
 8a2:	07 c0       	rjmp	.+14     	; 0x8b2 <vfprintf+0x208>
 8a4:	60 81       	ld	r22, Z
 8a6:	71 81       	ldd	r23, Z+1	; 0x01
 8a8:	82 81       	ldd	r24, Z+2	; 0x02
 8aa:	93 81       	ldd	r25, Z+3	; 0x03
 8ac:	0c 5f       	subi	r16, 0xFC	; 252
 8ae:	1f 4f       	sbci	r17, 0xFF	; 255
 8b0:	08 c0       	rjmp	.+16     	; 0x8c2 <vfprintf+0x218>
 8b2:	60 81       	ld	r22, Z
 8b4:	71 81       	ldd	r23, Z+1	; 0x01
 8b6:	07 2e       	mov	r0, r23
 8b8:	00 0c       	add	r0, r0
 8ba:	88 0b       	sbc	r24, r24
 8bc:	99 0b       	sbc	r25, r25
 8be:	0e 5f       	subi	r16, 0xFE	; 254
 8c0:	1f 4f       	sbci	r17, 0xFF	; 255
 8c2:	f3 2d       	mov	r31, r3
 8c4:	ff 76       	andi	r31, 0x6F	; 111
 8c6:	3f 2e       	mov	r3, r31
 8c8:	97 ff       	sbrs	r25, 7
 8ca:	09 c0       	rjmp	.+18     	; 0x8de <vfprintf+0x234>
 8cc:	90 95       	com	r25
 8ce:	80 95       	com	r24
 8d0:	70 95       	com	r23
 8d2:	61 95       	neg	r22
 8d4:	7f 4f       	sbci	r23, 0xFF	; 255
 8d6:	8f 4f       	sbci	r24, 0xFF	; 255
 8d8:	9f 4f       	sbci	r25, 0xFF	; 255
 8da:	f0 68       	ori	r31, 0x80	; 128
 8dc:	3f 2e       	mov	r3, r31
 8de:	2a e0       	ldi	r18, 0x0A	; 10
 8e0:	30 e0       	ldi	r19, 0x00	; 0
 8e2:	a3 01       	movw	r20, r6
 8e4:	0e 94 ab 05 	call	0xb56	; 0xb56 <__ultoa_invert>
 8e8:	88 2e       	mov	r8, r24
 8ea:	86 18       	sub	r8, r6
 8ec:	45 c0       	rjmp	.+138    	; 0x978 <vfprintf+0x2ce>
 8ee:	85 37       	cpi	r24, 0x75	; 117
 8f0:	31 f4       	brne	.+12     	; 0x8fe <vfprintf+0x254>
 8f2:	23 2d       	mov	r18, r3
 8f4:	2f 7e       	andi	r18, 0xEF	; 239
 8f6:	b2 2e       	mov	r11, r18
 8f8:	2a e0       	ldi	r18, 0x0A	; 10
 8fa:	30 e0       	ldi	r19, 0x00	; 0
 8fc:	25 c0       	rjmp	.+74     	; 0x948 <vfprintf+0x29e>
 8fe:	93 2d       	mov	r25, r3
 900:	99 7f       	andi	r25, 0xF9	; 249
 902:	b9 2e       	mov	r11, r25
 904:	8f 36       	cpi	r24, 0x6F	; 111
 906:	c1 f0       	breq	.+48     	; 0x938 <vfprintf+0x28e>
 908:	18 f4       	brcc	.+6      	; 0x910 <vfprintf+0x266>
 90a:	88 35       	cpi	r24, 0x58	; 88
 90c:	79 f0       	breq	.+30     	; 0x92c <vfprintf+0x282>
 90e:	b5 c0       	rjmp	.+362    	; 0xa7a <vfprintf+0x3d0>
 910:	80 37       	cpi	r24, 0x70	; 112
 912:	19 f0       	breq	.+6      	; 0x91a <vfprintf+0x270>
 914:	88 37       	cpi	r24, 0x78	; 120
 916:	21 f0       	breq	.+8      	; 0x920 <vfprintf+0x276>
 918:	b0 c0       	rjmp	.+352    	; 0xa7a <vfprintf+0x3d0>
 91a:	e9 2f       	mov	r30, r25
 91c:	e0 61       	ori	r30, 0x10	; 16
 91e:	be 2e       	mov	r11, r30
 920:	b4 fe       	sbrs	r11, 4
 922:	0d c0       	rjmp	.+26     	; 0x93e <vfprintf+0x294>
 924:	fb 2d       	mov	r31, r11
 926:	f4 60       	ori	r31, 0x04	; 4
 928:	bf 2e       	mov	r11, r31
 92a:	09 c0       	rjmp	.+18     	; 0x93e <vfprintf+0x294>
 92c:	34 fe       	sbrs	r3, 4
 92e:	0a c0       	rjmp	.+20     	; 0x944 <vfprintf+0x29a>
 930:	29 2f       	mov	r18, r25
 932:	26 60       	ori	r18, 0x06	; 6
 934:	b2 2e       	mov	r11, r18
 936:	06 c0       	rjmp	.+12     	; 0x944 <vfprintf+0x29a>
 938:	28 e0       	ldi	r18, 0x08	; 8
 93a:	30 e0       	ldi	r19, 0x00	; 0
 93c:	05 c0       	rjmp	.+10     	; 0x948 <vfprintf+0x29e>
 93e:	20 e1       	ldi	r18, 0x10	; 16
 940:	30 e0       	ldi	r19, 0x00	; 0
 942:	02 c0       	rjmp	.+4      	; 0x948 <vfprintf+0x29e>
 944:	20 e1       	ldi	r18, 0x10	; 16
 946:	32 e0       	ldi	r19, 0x02	; 2
 948:	f8 01       	movw	r30, r16
 94a:	b7 fe       	sbrs	r11, 7
 94c:	07 c0       	rjmp	.+14     	; 0x95c <vfprintf+0x2b2>
 94e:	60 81       	ld	r22, Z
 950:	71 81       	ldd	r23, Z+1	; 0x01
 952:	82 81       	ldd	r24, Z+2	; 0x02
 954:	93 81       	ldd	r25, Z+3	; 0x03
 956:	0c 5f       	subi	r16, 0xFC	; 252
 958:	1f 4f       	sbci	r17, 0xFF	; 255
 95a:	06 c0       	rjmp	.+12     	; 0x968 <vfprintf+0x2be>
 95c:	60 81       	ld	r22, Z
 95e:	71 81       	ldd	r23, Z+1	; 0x01
 960:	80 e0       	ldi	r24, 0x00	; 0
 962:	90 e0       	ldi	r25, 0x00	; 0
 964:	0e 5f       	subi	r16, 0xFE	; 254
 966:	1f 4f       	sbci	r17, 0xFF	; 255
 968:	a3 01       	movw	r20, r6
 96a:	0e 94 ab 05 	call	0xb56	; 0xb56 <__ultoa_invert>
 96e:	88 2e       	mov	r8, r24
 970:	86 18       	sub	r8, r6
 972:	fb 2d       	mov	r31, r11
 974:	ff 77       	andi	r31, 0x7F	; 127
 976:	3f 2e       	mov	r3, r31
 978:	36 fe       	sbrs	r3, 6
 97a:	0d c0       	rjmp	.+26     	; 0x996 <vfprintf+0x2ec>
 97c:	23 2d       	mov	r18, r3
 97e:	2e 7f       	andi	r18, 0xFE	; 254
 980:	a2 2e       	mov	r10, r18
 982:	89 14       	cp	r8, r9
 984:	58 f4       	brcc	.+22     	; 0x99c <vfprintf+0x2f2>
 986:	34 fe       	sbrs	r3, 4
 988:	0b c0       	rjmp	.+22     	; 0x9a0 <vfprintf+0x2f6>
 98a:	32 fc       	sbrc	r3, 2
 98c:	09 c0       	rjmp	.+18     	; 0x9a0 <vfprintf+0x2f6>
 98e:	83 2d       	mov	r24, r3
 990:	8e 7e       	andi	r24, 0xEE	; 238
 992:	a8 2e       	mov	r10, r24
 994:	05 c0       	rjmp	.+10     	; 0x9a0 <vfprintf+0x2f6>
 996:	b8 2c       	mov	r11, r8
 998:	a3 2c       	mov	r10, r3
 99a:	03 c0       	rjmp	.+6      	; 0x9a2 <vfprintf+0x2f8>
 99c:	b8 2c       	mov	r11, r8
 99e:	01 c0       	rjmp	.+2      	; 0x9a2 <vfprintf+0x2f8>
 9a0:	b9 2c       	mov	r11, r9
 9a2:	a4 fe       	sbrs	r10, 4
 9a4:	0f c0       	rjmp	.+30     	; 0x9c4 <vfprintf+0x31a>
 9a6:	fe 01       	movw	r30, r28
 9a8:	e8 0d       	add	r30, r8
 9aa:	f1 1d       	adc	r31, r1
 9ac:	80 81       	ld	r24, Z
 9ae:	80 33       	cpi	r24, 0x30	; 48
 9b0:	21 f4       	brne	.+8      	; 0x9ba <vfprintf+0x310>
 9b2:	9a 2d       	mov	r25, r10
 9b4:	99 7e       	andi	r25, 0xE9	; 233
 9b6:	a9 2e       	mov	r10, r25
 9b8:	09 c0       	rjmp	.+18     	; 0x9cc <vfprintf+0x322>
 9ba:	a2 fe       	sbrs	r10, 2
 9bc:	06 c0       	rjmp	.+12     	; 0x9ca <vfprintf+0x320>
 9be:	b3 94       	inc	r11
 9c0:	b3 94       	inc	r11
 9c2:	04 c0       	rjmp	.+8      	; 0x9cc <vfprintf+0x322>
 9c4:	8a 2d       	mov	r24, r10
 9c6:	86 78       	andi	r24, 0x86	; 134
 9c8:	09 f0       	breq	.+2      	; 0x9cc <vfprintf+0x322>
 9ca:	b3 94       	inc	r11
 9cc:	a3 fc       	sbrc	r10, 3
 9ce:	11 c0       	rjmp	.+34     	; 0x9f2 <vfprintf+0x348>
 9d0:	a0 fe       	sbrs	r10, 0
 9d2:	06 c0       	rjmp	.+12     	; 0x9e0 <vfprintf+0x336>
 9d4:	b2 14       	cp	r11, r2
 9d6:	88 f4       	brcc	.+34     	; 0x9fa <vfprintf+0x350>
 9d8:	28 0c       	add	r2, r8
 9da:	92 2c       	mov	r9, r2
 9dc:	9b 18       	sub	r9, r11
 9de:	0e c0       	rjmp	.+28     	; 0x9fc <vfprintf+0x352>
 9e0:	b2 14       	cp	r11, r2
 9e2:	60 f4       	brcc	.+24     	; 0x9fc <vfprintf+0x352>
 9e4:	b6 01       	movw	r22, r12
 9e6:	80 e2       	ldi	r24, 0x20	; 32
 9e8:	90 e0       	ldi	r25, 0x00	; 0
 9ea:	0e 94 6f 05 	call	0xade	; 0xade <fputc>
 9ee:	b3 94       	inc	r11
 9f0:	f7 cf       	rjmp	.-18     	; 0x9e0 <vfprintf+0x336>
 9f2:	b2 14       	cp	r11, r2
 9f4:	18 f4       	brcc	.+6      	; 0x9fc <vfprintf+0x352>
 9f6:	2b 18       	sub	r2, r11
 9f8:	02 c0       	rjmp	.+4      	; 0x9fe <vfprintf+0x354>
 9fa:	98 2c       	mov	r9, r8
 9fc:	21 2c       	mov	r2, r1
 9fe:	a4 fe       	sbrs	r10, 4
 a00:	10 c0       	rjmp	.+32     	; 0xa22 <vfprintf+0x378>
 a02:	b6 01       	movw	r22, r12
 a04:	80 e3       	ldi	r24, 0x30	; 48
 a06:	90 e0       	ldi	r25, 0x00	; 0
 a08:	0e 94 6f 05 	call	0xade	; 0xade <fputc>
 a0c:	a2 fe       	sbrs	r10, 2
 a0e:	17 c0       	rjmp	.+46     	; 0xa3e <vfprintf+0x394>
 a10:	a1 fc       	sbrc	r10, 1
 a12:	03 c0       	rjmp	.+6      	; 0xa1a <vfprintf+0x370>
 a14:	88 e7       	ldi	r24, 0x78	; 120
 a16:	90 e0       	ldi	r25, 0x00	; 0
 a18:	02 c0       	rjmp	.+4      	; 0xa1e <vfprintf+0x374>
 a1a:	88 e5       	ldi	r24, 0x58	; 88
 a1c:	90 e0       	ldi	r25, 0x00	; 0
 a1e:	b6 01       	movw	r22, r12
 a20:	0c c0       	rjmp	.+24     	; 0xa3a <vfprintf+0x390>
 a22:	8a 2d       	mov	r24, r10
 a24:	86 78       	andi	r24, 0x86	; 134
 a26:	59 f0       	breq	.+22     	; 0xa3e <vfprintf+0x394>
 a28:	a1 fe       	sbrs	r10, 1
 a2a:	02 c0       	rjmp	.+4      	; 0xa30 <vfprintf+0x386>
 a2c:	8b e2       	ldi	r24, 0x2B	; 43
 a2e:	01 c0       	rjmp	.+2      	; 0xa32 <vfprintf+0x388>
 a30:	80 e2       	ldi	r24, 0x20	; 32
 a32:	a7 fc       	sbrc	r10, 7
 a34:	8d e2       	ldi	r24, 0x2D	; 45
 a36:	b6 01       	movw	r22, r12
 a38:	90 e0       	ldi	r25, 0x00	; 0
 a3a:	0e 94 6f 05 	call	0xade	; 0xade <fputc>
 a3e:	89 14       	cp	r8, r9
 a40:	38 f4       	brcc	.+14     	; 0xa50 <vfprintf+0x3a6>
 a42:	b6 01       	movw	r22, r12
 a44:	80 e3       	ldi	r24, 0x30	; 48
 a46:	90 e0       	ldi	r25, 0x00	; 0
 a48:	0e 94 6f 05 	call	0xade	; 0xade <fputc>
 a4c:	9a 94       	dec	r9
 a4e:	f7 cf       	rjmp	.-18     	; 0xa3e <vfprintf+0x394>
 a50:	8a 94       	dec	r8
 a52:	f3 01       	movw	r30, r6
 a54:	e8 0d       	add	r30, r8
 a56:	f1 1d       	adc	r31, r1
 a58:	80 81       	ld	r24, Z
 a5a:	b6 01       	movw	r22, r12
 a5c:	90 e0       	ldi	r25, 0x00	; 0
 a5e:	0e 94 6f 05 	call	0xade	; 0xade <fputc>
 a62:	81 10       	cpse	r8, r1
 a64:	f5 cf       	rjmp	.-22     	; 0xa50 <vfprintf+0x3a6>
 a66:	22 20       	and	r2, r2
 a68:	09 f4       	brne	.+2      	; 0xa6c <vfprintf+0x3c2>
 a6a:	42 ce       	rjmp	.-892    	; 0x6f0 <vfprintf+0x46>
 a6c:	b6 01       	movw	r22, r12
 a6e:	80 e2       	ldi	r24, 0x20	; 32
 a70:	90 e0       	ldi	r25, 0x00	; 0
 a72:	0e 94 6f 05 	call	0xade	; 0xade <fputc>
 a76:	2a 94       	dec	r2
 a78:	f6 cf       	rjmp	.-20     	; 0xa66 <vfprintf+0x3bc>
 a7a:	f6 01       	movw	r30, r12
 a7c:	86 81       	ldd	r24, Z+6	; 0x06
 a7e:	97 81       	ldd	r25, Z+7	; 0x07
 a80:	02 c0       	rjmp	.+4      	; 0xa86 <vfprintf+0x3dc>
 a82:	8f ef       	ldi	r24, 0xFF	; 255
 a84:	9f ef       	ldi	r25, 0xFF	; 255
 a86:	2b 96       	adiw	r28, 0x0b	; 11
 a88:	cd bf       	out	0x3d, r28	; 61
 a8a:	de bf       	out	0x3e, r29	; 62
 a8c:	df 91       	pop	r29
 a8e:	cf 91       	pop	r28
 a90:	1f 91       	pop	r17
 a92:	0f 91       	pop	r16
 a94:	ff 90       	pop	r15
 a96:	ef 90       	pop	r14
 a98:	df 90       	pop	r13
 a9a:	cf 90       	pop	r12
 a9c:	bf 90       	pop	r11
 a9e:	af 90       	pop	r10
 aa0:	9f 90       	pop	r9
 aa2:	8f 90       	pop	r8
 aa4:	7f 90       	pop	r7
 aa6:	6f 90       	pop	r6
 aa8:	5f 90       	pop	r5
 aaa:	4f 90       	pop	r4
 aac:	3f 90       	pop	r3
 aae:	2f 90       	pop	r2
 ab0:	08 95       	ret

00000ab2 <strnlen_P>:
 ab2:	fc 01       	movw	r30, r24
 ab4:	05 90       	lpm	r0, Z+
 ab6:	61 50       	subi	r22, 0x01	; 1
 ab8:	70 40       	sbci	r23, 0x00	; 0
 aba:	01 10       	cpse	r0, r1
 abc:	d8 f7       	brcc	.-10     	; 0xab4 <strnlen_P+0x2>
 abe:	80 95       	com	r24
 ac0:	90 95       	com	r25
 ac2:	8e 0f       	add	r24, r30
 ac4:	9f 1f       	adc	r25, r31
 ac6:	08 95       	ret

00000ac8 <strnlen>:
 ac8:	fc 01       	movw	r30, r24
 aca:	61 50       	subi	r22, 0x01	; 1
 acc:	70 40       	sbci	r23, 0x00	; 0
 ace:	01 90       	ld	r0, Z+
 ad0:	01 10       	cpse	r0, r1
 ad2:	d8 f7       	brcc	.-10     	; 0xaca <strnlen+0x2>
 ad4:	80 95       	com	r24
 ad6:	90 95       	com	r25
 ad8:	8e 0f       	add	r24, r30
 ada:	9f 1f       	adc	r25, r31
 adc:	08 95       	ret

00000ade <fputc>:
 ade:	0f 93       	push	r16
 ae0:	1f 93       	push	r17
 ae2:	cf 93       	push	r28
 ae4:	df 93       	push	r29
 ae6:	fb 01       	movw	r30, r22
 ae8:	23 81       	ldd	r18, Z+3	; 0x03
 aea:	21 fd       	sbrc	r18, 1
 aec:	03 c0       	rjmp	.+6      	; 0xaf4 <fputc+0x16>
 aee:	8f ef       	ldi	r24, 0xFF	; 255
 af0:	9f ef       	ldi	r25, 0xFF	; 255
 af2:	2c c0       	rjmp	.+88     	; 0xb4c <fputc+0x6e>
 af4:	22 ff       	sbrs	r18, 2
 af6:	16 c0       	rjmp	.+44     	; 0xb24 <fputc+0x46>
 af8:	46 81       	ldd	r20, Z+6	; 0x06
 afa:	57 81       	ldd	r21, Z+7	; 0x07
 afc:	24 81       	ldd	r18, Z+4	; 0x04
 afe:	35 81       	ldd	r19, Z+5	; 0x05
 b00:	42 17       	cp	r20, r18
 b02:	53 07       	cpc	r21, r19
 b04:	44 f4       	brge	.+16     	; 0xb16 <fputc+0x38>
 b06:	a0 81       	ld	r26, Z
 b08:	b1 81       	ldd	r27, Z+1	; 0x01
 b0a:	9d 01       	movw	r18, r26
 b0c:	2f 5f       	subi	r18, 0xFF	; 255
 b0e:	3f 4f       	sbci	r19, 0xFF	; 255
 b10:	20 83       	st	Z, r18
 b12:	31 83       	std	Z+1, r19	; 0x01
 b14:	8c 93       	st	X, r24
 b16:	26 81       	ldd	r18, Z+6	; 0x06
 b18:	37 81       	ldd	r19, Z+7	; 0x07
 b1a:	2f 5f       	subi	r18, 0xFF	; 255
 b1c:	3f 4f       	sbci	r19, 0xFF	; 255
 b1e:	26 83       	std	Z+6, r18	; 0x06
 b20:	37 83       	std	Z+7, r19	; 0x07
 b22:	14 c0       	rjmp	.+40     	; 0xb4c <fputc+0x6e>
 b24:	8b 01       	movw	r16, r22
 b26:	ec 01       	movw	r28, r24
 b28:	fb 01       	movw	r30, r22
 b2a:	00 84       	ldd	r0, Z+8	; 0x08
 b2c:	f1 85       	ldd	r31, Z+9	; 0x09
 b2e:	e0 2d       	mov	r30, r0
 b30:	09 95       	icall
 b32:	89 2b       	or	r24, r25
 b34:	e1 f6       	brne	.-72     	; 0xaee <fputc+0x10>
 b36:	d8 01       	movw	r26, r16
 b38:	16 96       	adiw	r26, 0x06	; 6
 b3a:	8d 91       	ld	r24, X+
 b3c:	9c 91       	ld	r25, X
 b3e:	17 97       	sbiw	r26, 0x07	; 7
 b40:	01 96       	adiw	r24, 0x01	; 1
 b42:	16 96       	adiw	r26, 0x06	; 6
 b44:	8d 93       	st	X+, r24
 b46:	9c 93       	st	X, r25
 b48:	17 97       	sbiw	r26, 0x07	; 7
 b4a:	ce 01       	movw	r24, r28
 b4c:	df 91       	pop	r29
 b4e:	cf 91       	pop	r28
 b50:	1f 91       	pop	r17
 b52:	0f 91       	pop	r16
 b54:	08 95       	ret

00000b56 <__ultoa_invert>:
 b56:	fa 01       	movw	r30, r20
 b58:	aa 27       	eor	r26, r26
 b5a:	28 30       	cpi	r18, 0x08	; 8
 b5c:	51 f1       	breq	.+84     	; 0xbb2 <__ultoa_invert+0x5c>
 b5e:	20 31       	cpi	r18, 0x10	; 16
 b60:	81 f1       	breq	.+96     	; 0xbc2 <__ultoa_invert+0x6c>
 b62:	e8 94       	clt
 b64:	6f 93       	push	r22
 b66:	6e 7f       	andi	r22, 0xFE	; 254
 b68:	6e 5f       	subi	r22, 0xFE	; 254
 b6a:	7f 4f       	sbci	r23, 0xFF	; 255
 b6c:	8f 4f       	sbci	r24, 0xFF	; 255
 b6e:	9f 4f       	sbci	r25, 0xFF	; 255
 b70:	af 4f       	sbci	r26, 0xFF	; 255
 b72:	b1 e0       	ldi	r27, 0x01	; 1
 b74:	3e d0       	rcall	.+124    	; 0xbf2 <__ultoa_invert+0x9c>
 b76:	b4 e0       	ldi	r27, 0x04	; 4
 b78:	3c d0       	rcall	.+120    	; 0xbf2 <__ultoa_invert+0x9c>
 b7a:	67 0f       	add	r22, r23
 b7c:	78 1f       	adc	r23, r24
 b7e:	89 1f       	adc	r24, r25
 b80:	9a 1f       	adc	r25, r26
 b82:	a1 1d       	adc	r26, r1
 b84:	68 0f       	add	r22, r24
 b86:	79 1f       	adc	r23, r25
 b88:	8a 1f       	adc	r24, r26
 b8a:	91 1d       	adc	r25, r1
 b8c:	a1 1d       	adc	r26, r1
 b8e:	6a 0f       	add	r22, r26
 b90:	71 1d       	adc	r23, r1
 b92:	81 1d       	adc	r24, r1
 b94:	91 1d       	adc	r25, r1
 b96:	a1 1d       	adc	r26, r1
 b98:	20 d0       	rcall	.+64     	; 0xbda <__ultoa_invert+0x84>
 b9a:	09 f4       	brne	.+2      	; 0xb9e <__ultoa_invert+0x48>
 b9c:	68 94       	set
 b9e:	3f 91       	pop	r19
 ba0:	2a e0       	ldi	r18, 0x0A	; 10
 ba2:	26 9f       	mul	r18, r22
 ba4:	11 24       	eor	r1, r1
 ba6:	30 19       	sub	r19, r0
 ba8:	30 5d       	subi	r19, 0xD0	; 208
 baa:	31 93       	st	Z+, r19
 bac:	de f6       	brtc	.-74     	; 0xb64 <__ultoa_invert+0xe>
 bae:	cf 01       	movw	r24, r30
 bb0:	08 95       	ret
 bb2:	46 2f       	mov	r20, r22
 bb4:	47 70       	andi	r20, 0x07	; 7
 bb6:	40 5d       	subi	r20, 0xD0	; 208
 bb8:	41 93       	st	Z+, r20
 bba:	b3 e0       	ldi	r27, 0x03	; 3
 bbc:	0f d0       	rcall	.+30     	; 0xbdc <__ultoa_invert+0x86>
 bbe:	c9 f7       	brne	.-14     	; 0xbb2 <__ultoa_invert+0x5c>
 bc0:	f6 cf       	rjmp	.-20     	; 0xbae <__ultoa_invert+0x58>
 bc2:	46 2f       	mov	r20, r22
 bc4:	4f 70       	andi	r20, 0x0F	; 15
 bc6:	40 5d       	subi	r20, 0xD0	; 208
 bc8:	4a 33       	cpi	r20, 0x3A	; 58
 bca:	18 f0       	brcs	.+6      	; 0xbd2 <__ultoa_invert+0x7c>
 bcc:	49 5d       	subi	r20, 0xD9	; 217
 bce:	31 fd       	sbrc	r19, 1
 bd0:	40 52       	subi	r20, 0x20	; 32
 bd2:	41 93       	st	Z+, r20
 bd4:	02 d0       	rcall	.+4      	; 0xbda <__ultoa_invert+0x84>
 bd6:	a9 f7       	brne	.-22     	; 0xbc2 <__ultoa_invert+0x6c>
 bd8:	ea cf       	rjmp	.-44     	; 0xbae <__ultoa_invert+0x58>
 bda:	b4 e0       	ldi	r27, 0x04	; 4
 bdc:	a6 95       	lsr	r26
 bde:	97 95       	ror	r25
 be0:	87 95       	ror	r24
 be2:	77 95       	ror	r23
 be4:	67 95       	ror	r22
 be6:	ba 95       	dec	r27
 be8:	c9 f7       	brne	.-14     	; 0xbdc <__ultoa_invert+0x86>
 bea:	00 97       	sbiw	r24, 0x00	; 0
 bec:	61 05       	cpc	r22, r1
 bee:	71 05       	cpc	r23, r1
 bf0:	08 95       	ret
 bf2:	9b 01       	movw	r18, r22
 bf4:	ac 01       	movw	r20, r24
 bf6:	0a 2e       	mov	r0, r26
 bf8:	06 94       	lsr	r0
 bfa:	57 95       	ror	r21
 bfc:	47 95       	ror	r20
 bfe:	37 95       	ror	r19
 c00:	27 95       	ror	r18
 c02:	ba 95       	dec	r27
 c04:	c9 f7       	brne	.-14     	; 0xbf8 <__ultoa_invert+0xa2>
 c06:	62 0f       	add	r22, r18
 c08:	73 1f       	adc	r23, r19
 c0a:	84 1f       	adc	r24, r20
 c0c:	95 1f       	adc	r25, r21
 c0e:	a0 1d       	adc	r26, r0
 c10:	08 95       	ret

00000c12 <_exit>:
 c12:	f8 94       	cli

00000c14 <__stop_program>:
 c14:	ff cf       	rjmp	.-2      	; 0xc14 <__stop_program>
