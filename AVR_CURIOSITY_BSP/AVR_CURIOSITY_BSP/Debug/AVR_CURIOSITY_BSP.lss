
AVR_CURIOSITY_BSP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00804000  000004f6  0000058a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  0080400e  0080400e  00000598  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000598  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000350  00000000  00000000  00000608  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000074f1  00000000  00000000  00000958  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003c91  00000000  00000000  00007e49  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a41  00000000  00000000  0000bada  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000050c  00000000  00000000  0000d51c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000041f0  00000000  00000000  0000da28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ac2  00000000  00000000  00011c18  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  000126da  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
   4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
   8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
   c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  10:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  14:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__vector_5>
  18:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  1c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  20:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  24:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  28:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  2c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  30:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  34:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  38:	0c 94 bc 00 	jmp	0x178	; 0x178 <__vector_14>
  3c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  40:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  44:	0c 94 cb 00 	jmp	0x196	; 0x196 <__vector_17>
  48:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  4c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  50:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  54:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  58:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  5c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  60:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  64:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  68:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  6c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  70:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__vector_28>
  74:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  78:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  7c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  80:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  84:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  88:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  8c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  90:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  94:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  98:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  9c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  ac:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  bc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  cc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d0:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__vector_52>
  d4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  dc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  ec:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  f0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	df e7       	ldi	r29, 0x7F	; 127
  fe:	de bf       	out	0x3e, r29	; 62

00000100 <__do_copy_data>:
 100:	10 e4       	ldi	r17, 0x40	; 64
 102:	a0 e0       	ldi	r26, 0x00	; 0
 104:	b0 e4       	ldi	r27, 0x40	; 64
 106:	e6 ef       	ldi	r30, 0xF6	; 246
 108:	f4 e0       	ldi	r31, 0x04	; 4
 10a:	00 e0       	ldi	r16, 0x00	; 0
 10c:	0b bf       	out	0x3b, r16	; 59
 10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x14>
 110:	07 90       	elpm	r0, Z+
 112:	0d 92       	st	X+, r0
 114:	ae 30       	cpi	r26, 0x0E	; 14
 116:	b1 07       	cpc	r27, r17
 118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0x10>

0000011a <__do_clear_bss>:
 11a:	20 e4       	ldi	r18, 0x40	; 64
 11c:	ae e0       	ldi	r26, 0x0E	; 14
 11e:	b0 e4       	ldi	r27, 0x40	; 64
 120:	01 c0       	rjmp	.+2      	; 0x124 <.do_clear_bss_start>

00000122 <.do_clear_bss_loop>:
 122:	1d 92       	st	X+, r1

00000124 <.do_clear_bss_start>:
 124:	a6 31       	cpi	r26, 0x16	; 22
 126:	b2 07       	cpc	r27, r18
 128:	e1 f7       	brne	.-8      	; 0x122 <.do_clear_bss_loop>
 12a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <main>
 12e:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <_exit>

00000132 <__bad_interrupt>:
 132:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000136 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
 136:	0e 94 c5 01 	call	0x38a	; 0x38a <system_init>
 13a:	08 95       	ret

0000013c <__vector_28>:

#include <driver_init.h>
#include <compiler.h>

ISR(ZCD0_ZCD_vect)
{
 13c:	1f 92       	push	r1
 13e:	0f 92       	push	r0
 140:	0f b6       	in	r0, 0x3f	; 63
 142:	0f 92       	push	r0
 144:	11 24       	eor	r1, r1
 146:	8f 93       	push	r24
	/* Insert your ZCD interrupt handling code here */

	ZCD0.STATUS = ZCD_CROSSIF_bm;
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	80 93 c3 06 	sts	0x06C3, r24	; 0x8006c3 <__TEXT_REGION_LENGTH__+0x7e06c3>
}
 14e:	8f 91       	pop	r24
 150:	0f 90       	pop	r0
 152:	0f be       	out	0x3f, r0	; 63
 154:	0f 90       	pop	r0
 156:	1f 90       	pop	r1
 158:	18 95       	reti

0000015a <__vector_52>:

ISR(ZCD1_ZCD_vect)
{
 15a:	1f 92       	push	r1
 15c:	0f 92       	push	r0
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	0f 92       	push	r0
 162:	11 24       	eor	r1, r1
 164:	8f 93       	push	r24
	/* Insert your ZCD interrupt handling code here */

	ZCD1.STATUS = ZCD_CROSSIF_bm;
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	80 93 cb 06 	sts	0x06CB, r24	; 0x8006cb <__TEXT_REGION_LENGTH__+0x7e06cb>
}
 16c:	8f 91       	pop	r24
 16e:	0f 90       	pop	r0
 170:	0f be       	out	0x3f, r0	; 63
 172:	0f 90       	pop	r0
 174:	1f 90       	pop	r1
 176:	18 95       	reti

00000178 <__vector_14>:

ISR(TCB0_INT_vect)
{
 178:	1f 92       	push	r1
 17a:	0f 92       	push	r0
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	0f 92       	push	r0
 180:	11 24       	eor	r1, r1
 182:	8f 93       	push	r24

	TCB0.INTFLAGS = TCB_CAPT_bm;
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	80 93 06 0b 	sts	0x0B06, r24	; 0x800b06 <__TEXT_REGION_LENGTH__+0x7e0b06>
}
 18a:	8f 91       	pop	r24
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

00000196 <__vector_17>:

ISR(TCD0_TRIG_vect)
{
 196:	1f 92       	push	r1
 198:	0f 92       	push	r0
 19a:	0f b6       	in	r0, 0x3f	; 63
 19c:	0f 92       	push	r0
 19e:	11 24       	eor	r1, r1
 1a0:	8f 93       	push	r24
	/* Insert your TCD TRIGA interrupt handling code here */

	/* Insert your TCD TRIGB interrupt handling code here */

	/* TRIGA and TRIGB interrupt flags have to be cleared manually */
	TCD0.INTFLAGS = TCD_TRIGA_bm | TCD_TRIGB_bm;
 1a2:	8c e0       	ldi	r24, 0x0C	; 12
 1a4:	80 93 8d 0b 	sts	0x0B8D, r24	; 0x800b8d <__TEXT_REGION_LENGTH__+0x7e0b8d>
}
 1a8:	8f 91       	pop	r24
 1aa:	0f 90       	pop	r0
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	0f 90       	pop	r0
 1b0:	1f 90       	pop	r1
 1b2:	18 95       	reti

000001b4 <RTC_enable>:
//#include "dac_application.h"
//#include "usart_application.h"
void RTC_enable(void)
{
	// Wait for RTC CTRLA to be unsynchronized
	while (RTC.STATUS & RTC_CTRLABUSY_bm) {
 1b4:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
 1b8:	80 fd       	sbrc	r24, 0
 1ba:	fc cf       	rjmp	.-8      	; 0x1b4 <RTC_enable>
	}

	// Enable RTC
	RTC.CTRLA |= RTC_RTCEN_bm;
 1bc:	e0 e4       	ldi	r30, 0x40	; 64
 1be:	f1 e0       	ldi	r31, 0x01	; 1
 1c0:	80 81       	ld	r24, Z
 1c2:	81 60       	ori	r24, 0x01	; 1
 1c4:	80 83       	st	Z, r24
 1c6:	08 95       	ret

000001c8 <__vector_5>:
}

ISR(RTC_CNT_vect)
{
 1c8:	1f 92       	push	r1
 1ca:	0f 92       	push	r0
 1cc:	0f b6       	in	r0, 0x3f	; 63
 1ce:	0f 92       	push	r0
 1d0:	11 24       	eor	r1, r1
 1d2:	8f 93       	push	r24
 *
 * \param[in] pin       The pin number within port
 */
static inline void PORTB_toggle_pin_level(const uint8_t pin)
{
	VPORTB.IN |= 1 << pin;
 1d4:	86 b1       	in	r24, 0x06	; 6
 1d6:	88 60       	ori	r24, 0x08	; 8
 1d8:	86 b9       	out	0x06, r24	; 6
	/* Toggle LED0 */
	LED0_toggle_level();

	/* Overflow interrupt flag has to be cleared manually */
	RTC.INTFLAGS = RTC_OVF_bm;
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x7e0143>
}
 1e0:	8f 91       	pop	r24
 1e2:	0f 90       	pop	r0
 1e4:	0f be       	out	0x3f, r0	; 63
 1e6:	0f 90       	pop	r0
 1e8:	1f 90       	pop	r1
 1ea:	18 95       	reti

000001ec <main>:

int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
 1ec:	0e 94 9b 00 	call	0x136	; 0x136 <atmel_start_init>

	/* Enable the timer used to trigger a new ADC measurement */
//	ADC0_SampleTimer_enable();

	/* RTC is used to Blink LED at 0.5s = PER (511) / (32768 / 32) */
	RTC_enable();
 1f0:	0e 94 da 00 	call	0x1b4	; 0x1b4 <RTC_enable>

	/* Enables global interrupts */
	sei();
 1f4:	78 94       	sei
 1f6:	ff cf       	rjmp	.-2      	; 0x1f6 <main+0xa>

000001f8 <BOD_init>:
int8_t BOD_init()
{

	// ccp_write_io((void*)&(BOD.CTRLA),BOD_SLEEP_DIS_gc /* Disabled */);

	BOD.INTCTRL = 0 << BOD_VLMIE_bp        /* voltage level monitor interrrupt enable: disabled */
 1f8:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
	              | BOD_VLMCFG_FALLING_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	08 95       	ret

00000200 <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
 200:	45 e8       	ldi	r20, 0x85	; 133
 202:	68 ed       	ldi	r22, 0xD8	; 216
 204:	8c e7       	ldi	r24, 0x7C	; 124
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	0e 94 03 02 	call	0x406	; 0x406 <protected_write_io>
 20c:	41 e8       	ldi	r20, 0x81	; 129
 20e:	68 ed       	ldi	r22, 0xD8	; 216
 210:	80 e7       	ldi	r24, 0x70	; 112
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	0e 94 03 02 	call	0x406	; 0x406 <protected_write_io>
 218:	4c e0       	ldi	r20, 0x0C	; 12
 21a:	68 ed       	ldi	r22, 0xD8	; 216
 21c:	80 e8       	ldi	r24, 0x80	; 128
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	0e 94 03 02 	call	0x406	; 0x406 <protected_write_io>
 224:	44 e2       	ldi	r20, 0x24	; 36
 226:	68 ed       	ldi	r22, 0xD8	; 216
 228:	88 e6       	ldi	r24, 0x68	; 104
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	0e 94 03 02 	call	0x406	; 0x406 <protected_write_io>
	// ccp_write_io((void*)&(CLKCTRL.MCLKCTRLA),CLKCTRL_CLKSEL_OSCHF_gc /* Internal high-frequency oscillator */
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);


	return 0;
}
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	08 95       	ret

00000234 <CPUINT_init>:
	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
}
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	08 95       	ret

00000238 <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	08 c0       	rjmp	.+16     	; 0x24c <mcu_init+0x14>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 23c:	e8 2f       	mov	r30, r24
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	e0 5f       	subi	r30, 0xF0	; 240
 242:	fb 4f       	sbci	r31, 0xFB	; 251
 244:	90 81       	ld	r25, Z
 246:	98 60       	ori	r25, 0x08	; 8
 248:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 24a:	8f 5f       	subi	r24, 0xFF	; 255
 24c:	88 30       	cpi	r24, 0x08	; 8
 24e:	b0 f3       	brcs	.-20     	; 0x23c <mcu_init+0x4>
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	08 c0       	rjmp	.+16     	; 0x264 <mcu_init+0x2c>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 254:	e8 2f       	mov	r30, r24
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	e0 5d       	subi	r30, 0xD0	; 208
 25a:	fb 4f       	sbci	r31, 0xFB	; 251
 25c:	90 81       	ld	r25, Z
 25e:	98 60       	ori	r25, 0x08	; 8
 260:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 262:	8f 5f       	subi	r24, 0xFF	; 255
 264:	88 30       	cpi	r24, 0x08	; 8
 266:	b0 f3       	brcs	.-20     	; 0x254 <mcu_init+0x1c>
 268:	80 e0       	ldi	r24, 0x00	; 0
 26a:	08 c0       	rjmp	.+16     	; 0x27c <mcu_init+0x44>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 26c:	e8 2f       	mov	r30, r24
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	e0 5b       	subi	r30, 0xB0	; 176
 272:	fb 4f       	sbci	r31, 0xFB	; 251
 274:	90 81       	ld	r25, Z
 276:	98 60       	ori	r25, 0x08	; 8
 278:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 27a:	8f 5f       	subi	r24, 0xFF	; 255
 27c:	88 30       	cpi	r24, 0x08	; 8
 27e:	b0 f3       	brcs	.-20     	; 0x26c <mcu_init+0x34>
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	08 c0       	rjmp	.+16     	; 0x294 <mcu_init+0x5c>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 284:	e8 2f       	mov	r30, r24
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	e0 59       	subi	r30, 0x90	; 144
 28a:	fb 4f       	sbci	r31, 0xFB	; 251
 28c:	90 81       	ld	r25, Z
 28e:	98 60       	ori	r25, 0x08	; 8
 290:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 292:	8f 5f       	subi	r24, 0xFF	; 255
 294:	88 30       	cpi	r24, 0x08	; 8
 296:	b0 f3       	brcs	.-20     	; 0x284 <mcu_init+0x4c>
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	08 c0       	rjmp	.+16     	; 0x2ac <mcu_init+0x74>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 29c:	e8 2f       	mov	r30, r24
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	e0 57       	subi	r30, 0x70	; 112
 2a2:	fb 4f       	sbci	r31, 0xFB	; 251
 2a4:	90 81       	ld	r25, Z
 2a6:	98 60       	ori	r25, 0x08	; 8
 2a8:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 2aa:	8f 5f       	subi	r24, 0xFF	; 255
 2ac:	88 30       	cpi	r24, 0x08	; 8
 2ae:	b0 f3       	brcs	.-20     	; 0x29c <mcu_init+0x64>
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	08 c0       	rjmp	.+16     	; 0x2c4 <mcu_init+0x8c>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 2b4:	e8 2f       	mov	r30, r24
 2b6:	f0 e0       	ldi	r31, 0x00	; 0
 2b8:	e0 55       	subi	r30, 0x50	; 80
 2ba:	fb 4f       	sbci	r31, 0xFB	; 251
 2bc:	90 81       	ld	r25, Z
 2be:	98 60       	ori	r25, 0x08	; 8
 2c0:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 2c2:	8f 5f       	subi	r24, 0xFF	; 255
 2c4:	88 30       	cpi	r24, 0x08	; 8
 2c6:	b0 f3       	brcs	.-20     	; 0x2b4 <mcu_init+0x7c>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
 2c8:	08 95       	ret

000002ca <USART_0_initialization>:
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
 2ca:	84 b1       	in	r24, 0x04	; 4
 2cc:	8d 7f       	andi	r24, 0xFD	; 253
 2ce:	84 b9       	out	0x04, r24	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 2d0:	e1 e3       	ldi	r30, 0x31	; 49
 2d2:	f4 e0       	ldi	r31, 0x04	; 4
 2d4:	80 81       	ld	r24, Z
 2d6:	87 7f       	andi	r24, 0xF7	; 247
 2d8:	80 83       	st	Z, r24
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
 2da:	85 b1       	in	r24, 0x05	; 5
 2dc:	8e 7f       	andi	r24, 0xFE	; 254
 2de:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
 2e0:	84 b1       	in	r24, 0x04	; 4
 2e2:	81 60       	ori	r24, 0x01	; 1
 2e4:	84 b9       	out	0x04, r24	; 4
	    // <true"> High
	    false);

	PB0_set_dir(PORT_DIR_OUT);

	USART_0_init();
 2e6:	0e 94 4e 02 	call	0x49c	; 0x49c <USART_0_init>
 2ea:	08 95       	ret

000002ec <EVENT_SYSTEM_0_initialization>:
}

void EVENT_SYSTEM_0_initialization(void)
{

	EVENT_SYSTEM_0_init();
 2ec:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <EVENT_SYSTEM_0_init>
 2f0:	08 95       	ret

000002f2 <ZCD_Rising_initialization>:
 */
static inline void PORTD_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
 2f2:	e1 e7       	ldi	r30, 0x71	; 113
 2f4:	f4 e0       	ldi	r31, 0x04	; 4
 2f6:	80 81       	ld	r24, Z
 2f8:	88 7f       	andi	r24, 0xF8	; 248
 2fa:	84 60       	ori	r24, 0x04	; 4
 2fc:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 2fe:	80 81       	ld	r24, Z
 300:	87 7f       	andi	r24, 0xF7	; 247
 302:	80 83       	st	Z, r24
	// Disable digital input buffer
	PD1_set_isc(PORT_ISC_INPUT_DISABLE_gc);
	// Disable pull-up resistor
	PD1_set_pull_mode(PORT_PULL_OFF);

	ZCD_Rising_init();
 304:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <ZCD_Rising_init>
 308:	08 95       	ret

0000030a <ZCD_Falling_initialization>:
 */
static inline void PORTE_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTE + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
 30a:	e3 e9       	ldi	r30, 0x93	; 147
 30c:	f4 e0       	ldi	r31, 0x04	; 4
 30e:	80 81       	ld	r24, Z
 310:	88 7f       	andi	r24, 0xF8	; 248
 312:	84 60       	ori	r24, 0x04	; 4
 314:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTE + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 316:	80 81       	ld	r24, Z
 318:	87 7f       	andi	r24, 0xF7	; 247
 31a:	80 83       	st	Z, r24
	// Disable digital input buffer
	PE3_set_isc(PORT_ISC_INPUT_DISABLE_gc);
	// Disable pull-up resistor
	PE3_set_pull_mode(PORT_PULL_OFF);

	ZCD_Falling_init();
 31c:	0e 94 71 02 	call	0x4e2	; 0x4e2 <ZCD_Falling_init>
 320:	08 95       	ret

00000322 <SPI_ADF_initialization>:
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
 322:	80 b1       	in	r24, 0x00	; 0
 324:	8f 7d       	andi	r24, 0xDF	; 223
 326:	80 b9       	out	0x00, r24	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 328:	e5 e1       	ldi	r30, 0x15	; 21
 32a:	f4 e0       	ldi	r31, 0x04	; 4
 32c:	80 81       	ld	r24, Z
 32e:	87 7f       	andi	r24, 0xF7	; 247
 330:	80 83       	st	Z, r24
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
 332:	81 b1       	in	r24, 0x01	; 1
 334:	8f 7e       	andi	r24, 0xEF	; 239
 336:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 338:	80 b1       	in	r24, 0x00	; 0
 33a:	80 61       	ori	r24, 0x10	; 16
 33c:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
 33e:	81 b1       	in	r24, 0x01	; 1
 340:	8f 7b       	andi	r24, 0xBF	; 191
 342:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 344:	80 b1       	in	r24, 0x00	; 0
 346:	80 64       	ori	r24, 0x40	; 64
 348:	80 b9       	out	0x00, r24	; 0
	    // <true"> High
	    false);

	PA6_set_dir(PORT_DIR_OUT);

	SPI_ADF_init();
 34a:	0e 94 1b 02 	call	0x436	; 0x436 <SPI_ADF_init>
 34e:	08 95       	ret

00000350 <SPI_LMX_initialization>:
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
 350:	88 b1       	in	r24, 0x08	; 8
 352:	8d 7f       	andi	r24, 0xFD	; 253
 354:	88 b9       	out	0x08, r24	; 8
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 356:	e1 e5       	ldi	r30, 0x51	; 81
 358:	f4 e0       	ldi	r31, 0x04	; 4
 35a:	80 81       	ld	r24, Z
 35c:	87 7f       	andi	r24, 0xF7	; 247
 35e:	80 83       	st	Z, r24
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
 360:	89 b1       	in	r24, 0x09	; 9
 362:	8e 7f       	andi	r24, 0xFE	; 254
 364:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
 366:	88 b1       	in	r24, 0x08	; 8
 368:	81 60       	ori	r24, 0x01	; 1
 36a:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
 36c:	89 b1       	in	r24, 0x09	; 9
 36e:	8b 7f       	andi	r24, 0xFB	; 251
 370:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
 372:	88 b1       	in	r24, 0x08	; 8
 374:	84 60       	ori	r24, 0x04	; 4
 376:	88 b9       	out	0x08, r24	; 8
	    // <true"> High
	    false);

	PC2_set_dir(PORT_DIR_OUT);

	SPI_LMX_init();
 378:	0e 94 24 02 	call	0x448	; 0x448 <SPI_LMX_init>
 37c:	08 95       	ret

0000037e <TIMER_B_initialization>:
}

void TIMER_B_initialization(void)
{

	TIMER_B_init();
 37e:	0e 94 2d 02 	call	0x45a	; 0x45a <TIMER_B_init>
 382:	08 95       	ret

00000384 <TIMER_C_initialization>:
}

void TIMER_C_initialization(void)
{

	TIMER_C_init();
 384:	0e 94 38 02 	call	0x470	; 0x470 <TIMER_C_init>
 388:	08 95       	ret

0000038a <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
 38a:	0e 94 1c 01 	call	0x238	; 0x238 <mcu_init>
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
 38e:	81 b1       	in	r24, 0x01	; 1
 390:	8f 77       	andi	r24, 0x7F	; 127
 392:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 394:	80 b1       	in	r24, 0x00	; 0
 396:	80 68       	ori	r24, 0x80	; 128
 398:	80 b9       	out	0x00, r24	; 0
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
 39a:	85 b1       	in	r24, 0x05	; 5
 39c:	87 7f       	andi	r24, 0xF7	; 247
 39e:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
 3a0:	84 b1       	in	r24, 0x04	; 4
 3a2:	88 60       	ori	r24, 0x08	; 8
 3a4:	84 b9       	out	0x04, r24	; 4
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
 3a6:	89 b1       	in	r24, 0x09	; 9
 3a8:	88 60       	ori	r24, 0x08	; 8
 3aa:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
 3ac:	88 b1       	in	r24, 0x08	; 8
 3ae:	88 60       	ori	r24, 0x08	; 8
 3b0:	88 b9       	out	0x08, r24	; 8
	    // <true"> High
	    true);

	CS_LMX_set_dir(PORT_DIR_OUT);

	CLKCTRL_init();
 3b2:	0e 94 00 01 	call	0x200	; 0x200 <CLKCTRL_init>

	USART_0_initialization();
 3b6:	0e 94 65 01 	call	0x2ca	; 0x2ca <USART_0_initialization>

	EVENT_SYSTEM_0_initialization();
 3ba:	0e 94 76 01 	call	0x2ec	; 0x2ec <EVENT_SYSTEM_0_initialization>

	SLPCTRL_init();
 3be:	0e 94 19 02 	call	0x432	; 0x432 <SLPCTRL_init>

	CPUINT_init();
 3c2:	0e 94 1a 01 	call	0x234	; 0x234 <CPUINT_init>

	ZCD_Rising_initialization();
 3c6:	0e 94 79 01 	call	0x2f2	; 0x2f2 <ZCD_Rising_initialization>

	ZCD_Falling_initialization();
 3ca:	0e 94 85 01 	call	0x30a	; 0x30a <ZCD_Falling_initialization>

	SPI_ADF_initialization();
 3ce:	0e 94 91 01 	call	0x322	; 0x322 <SPI_ADF_initialization>

	SPI_LMX_initialization();
 3d2:	0e 94 a8 01 	call	0x350	; 0x350 <SPI_LMX_initialization>

	RTC_0_init();
 3d6:	0e 94 08 02 	call	0x410	; 0x410 <RTC_0_init>

	TIMER_B_initialization();
 3da:	0e 94 bf 01 	call	0x37e	; 0x37e <TIMER_B_initialization>

	TIMER_C_initialization();
 3de:	0e 94 c2 01 	call	0x384	; 0x384 <TIMER_C_initialization>

	BOD_init();
 3e2:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <BOD_init>
 3e6:	08 95       	ret

000003e8 <EVENT_SYSTEM_0_init>:
 * \return Initialization status.
 */
int8_t EVENT_SYSTEM_0_init()
{

	EVSYS.CHANNEL0 = EVSYS_CHANNEL0_ZCD0_gc; /* Zero Cross Detect 0 out */
 3e8:	e0 e0       	ldi	r30, 0x00	; 0
 3ea:	f2 e0       	ldi	r31, 0x02	; 2
 3ec:	80 e3       	ldi	r24, 0x30	; 48
 3ee:	80 8b       	std	Z+16, r24	; 0x10

	EVSYS.CHANNEL1 = EVSYS_CHANNEL1_ZCD1_gc; /* Zero Cross Detect 1 out */
 3f0:	81 e3       	ldi	r24, 0x31	; 49
 3f2:	81 8b       	std	Z+17, r24	; 0x11

	// EVSYS.USERTCA1CNTA = EVSYS_USER_OFF_gc; /* Off */

	// EVSYS.USERTCA1CNTB = EVSYS_USER_OFF_gc; /* Off */

	EVSYS.USERTCB0CAPT = EVSYS_USER_CHANNEL0_gc; /* Connect user to event channel 0 */
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	86 af       	std	Z+62, r24	; 0x3e

	// EVSYS.USERTCB3CAPT = EVSYS_USER_OFF_gc; /* Off */

	// EVSYS.USERTCB3COUNT = EVSYS_USER_OFF_gc; /* Off */

	EVSYS.USERTCD0INPUTA = EVSYS_USER_CHANNEL0_gc; /* Connect user to event channel 0 */
 3f8:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <__TEXT_REGION_LENGTH__+0x7e0248>

	EVSYS.USERTCD0INPUTB = EVSYS_USER_CHANNEL1_gc; /* Connect user to event channel 1 */
 3fc:	82 e0       	ldi	r24, 0x02	; 2
 3fe:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <__TEXT_REGION_LENGTH__+0x7e0249>
	// EVSYS.USEROPAMP2DUMP = EVSYS_USER_OFF_gc; /* Off */

	// EVSYS.USEROPAMP2DISABLE = EVSYS_USER_OFF_gc; /* Off */

	return 0;
}
 402:	80 e0       	ldi	r24, 0x00	; 0
 404:	08 95       	ret

00000406 <protected_write_io>:
	PUBLIC_FUNCTION(protected_write_io)

#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
 406:	1b be       	out	0x3b, r1	; 59
#endif
	movw    r30, r24                // Load addr into Z
 408:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
 40a:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
 40c:	40 83       	st	Z, r20
	ret                             // Return to caller
 40e:	08 95       	ret

00000410 <RTC_0_init>:
 * \return Initialization status.
 */
int8_t RTC_0_init()
{

	while (RTC.STATUS > 0) { /* Wait for all register to be synchronized */
 410:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
 414:	81 11       	cpse	r24, r1
 416:	fc cf       	rjmp	.-8      	; 0x410 <RTC_0_init>

	// RTC.CMP = 0x0; /* Compare: 0x0 */

	// RTC.CNT = 0x0; /* Counter: 0x0 */

	RTC.CTRLA = RTC_PRESCALER_DIV32_gc  /* 32 */
 418:	e0 e4       	ldi	r30, 0x40	; 64
 41a:	f1 e0       	ldi	r31, 0x01	; 1
 41c:	88 ea       	ldi	r24, 0xA8	; 168
 41e:	80 83       	st	Z, r24
	            | 0 << RTC_RTCEN_bp     /* Enable: disabled */
	            | 1 << RTC_RUNSTDBY_bp; /* Run In Standby: enabled */

	RTC.PER = 0x1ff; /* Period: 0x1ff */
 420:	8f ef       	ldi	r24, 0xFF	; 255
 422:	91 e0       	ldi	r25, 0x01	; 1
 424:	82 87       	std	Z+10, r24	; 0x0a
 426:	93 87       	std	Z+11, r25	; 0x0b

	RTC.CLKSEL = RTC_CLKSEL_OSC32K_gc; /* Internal 32.768 kHz oscillator */
 428:	17 82       	std	Z+7, r1	; 0x07

	// RTC.DBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	RTC.INTCTRL = 0 << RTC_CMP_bp    /* Compare Match Interrupt enable: disabled */
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	82 83       	std	Z+2, r24	; 0x02
	// RTC.PITDBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	// RTC.PITINTCTRL = 0 << RTC_PI_bp; /* Periodic Interrupt: disabled */

	return 0;
}
 42e:	80 e0       	ldi	r24, 0x00	; 0
 430:	08 95       	ret

00000432 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
 432:	80 e0       	ldi	r24, 0x00	; 0
 434:	08 95       	ret

00000436 <SPI_ADF_init>:
		while (!(SPI0.INTFLAGS & SPI_RXCIF_bm))
			;
		*b = SPI0.DATA;
		b++;
	}
}
 436:	e0 e4       	ldi	r30, 0x40	; 64
 438:	f9 e0       	ldi	r31, 0x09	; 9
 43a:	81 e2       	ldi	r24, 0x21	; 33
 43c:	80 83       	st	Z, r24
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	82 83       	std	Z+2, r24	; 0x02
 442:	10 92 0f 40 	sts	0x400F, r1	; 0x80400f <SPI_ADF_desc>
 446:	08 95       	ret

00000448 <SPI_LMX_init>:
 * \retval 1 the SPI init was not successful
 */
void SPI_LMX_init()
{

	SPI1.CTRLA = 0 << SPI_CLK2X_bp    /* Enable Double Speed: disabled */
 448:	e0 e6       	ldi	r30, 0x60	; 96
 44a:	f9 e0       	ldi	r31, 0x09	; 9
 44c:	81 e2       	ldi	r24, 0x21	; 33
 44e:	80 83       	st	Z, r24
	// SPI1.CTRLB = 0 << SPI_BUFEN_bp /* Buffer Mode Enable: disabled */
	//		 | 0 << SPI_BUFWR_bp /* Buffer Write Mode: disabled */
	//		 | SPI_MODE_0_gc /* SPI Mode 0 */
	//		 | 0 << SPI_SSD_bp; /* Slave Select Disable: disabled */

	SPI1.INTCTRL = 0 << SPI_DREIE_bp    /* Data Register Empty Interrupt Enable: disabled */
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	82 83       	std	Z+2, r24	; 0x02
	               | 1 << SPI_IE_bp     /* Interrupt Enable: enabled */
	               | 0 << SPI_RXCIE_bp  /* Receive Complete Interrupt Enable: disabled */
	               | 0 << SPI_SSIE_bp   /* Slave Select Trigger Interrupt Enable: disabled */
	               | 0 << SPI_TXCIE_bp; /* Transfer Complete Interrupt Enable: disabled */

	SPI_LMX_desc.status = SPI_FREE;
 454:	10 92 0e 40 	sts	0x400E, r1	; 0x80400e <__data_end>
 458:	08 95       	ret

0000045a <TIMER_B_init>:

	// TCB0.CCMP = 0x0; /* Compare or Capture: 0x0 */

	// TCB0.CNT = 0x0; /* Count: 0x0 */

	TCB0.CTRLB = 0 << TCB_ASYNC_bp      /* Asynchronous Enable: disabled */
 45a:	e0 e0       	ldi	r30, 0x00	; 0
 45c:	fb e0       	ldi	r31, 0x0B	; 11
 45e:	83 e0       	ldi	r24, 0x03	; 3
 460:	81 83       	std	Z+1, r24	; 0x01
	             | 0 << TCB_CCMPINIT_bp /* Pin Initial State: disabled */
	             | TCB_CNTMODE_FRQ_gc;  /* Input Capture Frequency measurement */

	// TCB0.DBGCTRL = 0 << TCB_DBGRUN_bp; /* Debug Run: disabled */

	TCB0.EVCTRL = 1 << TCB_CAPTEI_bp    /* Event Input Enable: enabled */
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	84 83       	std	Z+4, r24	; 0x04
	              | 0 << TCB_EDGE_bp    /* Event Edge: disabled */
	              | 0 << TCB_FILTER_bp; /* Input Capture Noise Cancellation Filter: disabled */

	TCB0.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
 466:	85 83       	std	Z+5, r24	; 0x05
	               | 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */

	TCB0.CTRLA = TCB_CLKSEL_DIV1_gc     /* CLK_PER */
 468:	81 e4       	ldi	r24, 0x41	; 65
 46a:	80 83       	st	Z, r24
	             | 1 << TCB_RUNSTDBY_bp /* Run Standby: enabled */
	             | 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
	             | 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */

	return 0;
}
 46c:	80 e0       	ldi	r24, 0x00	; 0
 46e:	08 95       	ret

00000470 <TIMER_C_init>:
int8_t TIMER_C_init()
{

	// Enable Protected register, peripheral must be disabled (ENABLE=0, in TCD.CTRLA).

	TCD0.CMPASET = 4095; /* Compare A Set: 4095 */
 470:	e0 e8       	ldi	r30, 0x80	; 128
 472:	fb e0       	ldi	r31, 0x0B	; 11
 474:	8f ef       	ldi	r24, 0xFF	; 255
 476:	9f e0       	ldi	r25, 0x0F	; 15
 478:	80 a7       	std	Z+40, r24	; 0x28
 47a:	91 a7       	std	Z+41, r25	; 0x29

	// TCD0.CMPACLR = 0; /* Compare A Clear: 0 */

	TCD0.CMPBSET = 4095; /* Compare B Set: 4095 */
 47c:	84 a7       	std	Z+44, r24	; 0x2c
 47e:	95 a7       	std	Z+45, r25	; 0x2d
	//		 | TCD_DLYTRIG_CMPASET_gc; /* Compare A set */

	// TCD0.DLYVAL = 0 << TCD_DLYVAL_gp; /* Delay value: 0 */

	TCD0.EVCTRLA
	    = TCD_CFG_NEITHER_gc      /* Neither Filter nor Asynchronous Event is enabled */
 480:	85 e1       	ldi	r24, 0x15	; 21
 482:	80 87       	std	Z+8, r24	; 0x08
	      | TCD_ACTION_CAPTURE_gc /* Event trigger a fault and capture */
	      | TCD_EDGE_RISE_HIGH_gc /* The rising edge or high level of event generates retrigger or fault action */
	      | 1 << TCD_TRIGEI_bp;   /* Trigger event enable: enabled */

	TCD0.EVCTRLB
	    = TCD_CFG_NEITHER_gc      /* Neither Filter nor Asynchronous Event is enabled */
 484:	81 87       	std	Z+9, r24	; 0x09

	// TCD0.INPUTCTRLA = TCD_INPUTMODE_NONE_gc; /* Input has no actions */

	// TCD0.INPUTCTRLB = TCD_INPUTMODE_NONE_gc; /* Input has no actions */

	TCD0.INTCTRL = 0 << TCD_OVF_bp      /* Overflow interrupt enable: disabled */
 486:	8c e0       	ldi	r24, 0x0C	; 12
 488:	84 87       	std	Z+12, r24	; 0x0c
	               | 1 << TCD_TRIGA_bp  /* Trigger A interrupt enable: enabled */
	               | 1 << TCD_TRIGB_bp; /* Trigger B interrupt enable: enabled */

	while ((TCD0.STATUS & TCD_ENRDY_bm) == 0)
 48a:	80 91 8e 0b 	lds	r24, 0x0B8E	; 0x800b8e <__TEXT_REGION_LENGTH__+0x7e0b8e>
 48e:	80 ff       	sbrs	r24, 0
 490:	fc cf       	rjmp	.-8      	; 0x48a <TIMER_C_init+0x1a>
		; // Wait for Enable Ready to be high.

	TCD0.CTRLA = 1 << TCD_ENABLE_bp      /* Enable: enabled */
 492:	81 e2       	ldi	r24, 0x21	; 33
 494:	80 93 80 0b 	sts	0x0B80, r24	; 0x800b80 <__TEXT_REGION_LENGTH__+0x7e0b80>
	             | TCD_CLKSEL_PLL_gc     /*  */
	             | TCD_CNTPRES_DIV1_gc   /* Sync clock divided by 1 */
	             | TCD_SYNCPRES_DIV1_gc; /*  */

	return 0;
}
 498:	80 e0       	ldi	r24, 0x00	; 0
 49a:	08 95       	ret

0000049c <USART_0_init>:
uint8_t USART_0_read()
{
	while (!(USART3.STATUS & USART_RXCIF_bm))
		;
	return USART3.RXDATAL;
}
 49c:	e0 e6       	ldi	r30, 0x60	; 96
 49e:	f8 e0       	ldi	r31, 0x08	; 8
 4a0:	81 e4       	ldi	r24, 0x41	; 65
 4a2:	93 e0       	ldi	r25, 0x03	; 3
 4a4:	80 87       	std	Z+8, r24	; 0x08
 4a6:	91 87       	std	Z+9, r25	; 0x09
 4a8:	80 ec       	ldi	r24, 0xC0	; 192
 4aa:	86 83       	std	Z+6, r24	; 0x06
 4ac:	80 e0       	ldi	r24, 0x00	; 0
 4ae:	90 e4       	ldi	r25, 0x40	; 64
 4b0:	80 93 12 40 	sts	0x4012, r24	; 0x804012 <__iob+0x2>
 4b4:	90 93 13 40 	sts	0x4013, r25	; 0x804013 <__iob+0x3>
 4b8:	80 e0       	ldi	r24, 0x00	; 0
 4ba:	08 95       	ret

000004bc <USART_0_write>:
 *
 * \return Nothing
 */
void USART_0_write(const uint8_t data)
{
	while (!(USART3.STATUS & USART_DREIF_bm))
 4bc:	90 91 64 08 	lds	r25, 0x0864	; 0x800864 <__TEXT_REGION_LENGTH__+0x7e0864>
 4c0:	95 ff       	sbrs	r25, 5
 4c2:	fc cf       	rjmp	.-8      	; 0x4bc <USART_0_write>
		;
	USART3.TXDATAL = data;
 4c4:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <__TEXT_REGION_LENGTH__+0x7e0862>
 4c8:	08 95       	ret

000004ca <USART_0_printCHAR>:

#if defined(__GNUC__)

int USART_0_printCHAR(char character, FILE *stream)
{
	USART_0_write(character);
 4ca:	0e 94 5e 02 	call	0x4bc	; 0x4bc <USART_0_write>
	return 0;
}
 4ce:	80 e0       	ldi	r24, 0x00	; 0
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	08 95       	ret

000004d4 <ZCD_Rising_init>:
 * \return Initialization status.
 */
int8_t ZCD_Rising_init()
{

	ZCD0.CTRLA = 1 << ZCD_ENABLE_bp     /* Setting: enabled */
 4d4:	e0 ec       	ldi	r30, 0xC0	; 192
 4d6:	f6 e0       	ldi	r31, 0x06	; 6
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	80 83       	st	Z, r24
	             | 0 << ZCD_OUTEN_bp    /* Setting: disabled */
	             | 0 << ZCD_RUNSTDBY_bp /* Setting: disabled */
	             | 0 << ZCD_INVERT_bp;  /* Setting: disabled */

	ZCD0.INTCTRL = ZCD_INTMODE_RISING_gc; /* Interrupt on rising input signal */
 4dc:	82 83       	std	Z+2, r24	; 0x02

	return 0;
}
 4de:	80 e0       	ldi	r24, 0x00	; 0
 4e0:	08 95       	ret

000004e2 <ZCD_Falling_init>:
 * \return Initialization status.
 */
int8_t ZCD_Falling_init()
{

	ZCD1.CTRLA = 1 << ZCD_ENABLE_bp     /* Setting: enabled */
 4e2:	e8 ec       	ldi	r30, 0xC8	; 200
 4e4:	f6 e0       	ldi	r31, 0x06	; 6
 4e6:	81 e0       	ldi	r24, 0x01	; 1
 4e8:	80 83       	st	Z, r24
	             | 0 << ZCD_OUTEN_bp    /* Setting: disabled */
	             | 0 << ZCD_RUNSTDBY_bp /* Setting: disabled */
	             | 0 << ZCD_INVERT_bp;  /* Setting: disabled */

	ZCD1.INTCTRL = ZCD_INTMODE_FALLING_gc; /* Interrupt on falling input signal */
 4ea:	82 e0       	ldi	r24, 0x02	; 2
 4ec:	82 83       	std	Z+2, r24	; 0x02

	return 0;
}
 4ee:	80 e0       	ldi	r24, 0x00	; 0
 4f0:	08 95       	ret

000004f2 <_exit>:
 4f2:	f8 94       	cli

000004f4 <__stop_program>:
 4f4:	ff cf       	rjmp	.-2      	; 0x4f4 <__stop_program>
