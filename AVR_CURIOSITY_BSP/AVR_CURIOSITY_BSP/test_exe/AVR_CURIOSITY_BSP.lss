
AVR_CURIOSITY_BSP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00804000  00000660  000006f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000660  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  0080400e  0080400e  00000702  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000702  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000734  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000480  00000000  00000000  00000778  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000842b  00000000  00000000  00000bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003df9  00000000  00000000  00009023  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001f4b  00000000  00000000  0000ce1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007b8  00000000  00000000  0000ed68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000554e  00000000  00000000  0000f520  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e33  00000000  00000000  00014a6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000360  00000000  00000000  000158a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
   4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
   8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
   c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  10:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  14:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__vector_5>
  18:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  1c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  20:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  24:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  28:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  2c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  30:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  34:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  38:	0c 94 bc 00 	jmp	0x178	; 0x178 <__vector_14>
  3c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  40:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  44:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__vector_17>
  48:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  4c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  50:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  54:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  58:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  5c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  60:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  64:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  68:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  6c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  70:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__vector_28>
  74:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  78:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  7c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__vector_31>
  80:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  84:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  88:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  8c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  90:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  94:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__vector_37>
  98:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  9c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  ac:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  bc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  cc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d0:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__vector_52>
  d4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  dc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  ec:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  f0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	df e7       	ldi	r29, 0x7F	; 127
  fe:	de bf       	out	0x3e, r29	; 62

00000100 <__do_copy_data>:
 100:	10 e4       	ldi	r17, 0x40	; 64
 102:	a0 e0       	ldi	r26, 0x00	; 0
 104:	b0 e4       	ldi	r27, 0x40	; 64
 106:	e0 e6       	ldi	r30, 0x60	; 96
 108:	f6 e0       	ldi	r31, 0x06	; 6
 10a:	00 e0       	ldi	r16, 0x00	; 0
 10c:	0b bf       	out	0x3b, r16	; 59
 10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x14>
 110:	07 90       	elpm	r0, Z+
 112:	0d 92       	st	X+, r0
 114:	ae 30       	cpi	r26, 0x0E	; 14
 116:	b1 07       	cpc	r27, r17
 118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0x10>

0000011a <__do_clear_bss>:
 11a:	20 e4       	ldi	r18, 0x40	; 64
 11c:	ae e0       	ldi	r26, 0x0E	; 14
 11e:	b0 e4       	ldi	r27, 0x40	; 64
 120:	01 c0       	rjmp	.+2      	; 0x124 <.do_clear_bss_start>

00000122 <.do_clear_bss_loop>:
 122:	1d 92       	st	X+, r1

00000124 <.do_clear_bss_start>:
 124:	ac 31       	cpi	r26, 0x1C	; 28
 126:	b2 07       	cpc	r27, r18
 128:	e1 f7       	brne	.-8      	; 0x122 <.do_clear_bss_loop>
 12a:	0e 94 05 01 	call	0x20a	; 0x20a <main>
 12e:	0c 94 2e 03 	jmp	0x65c	; 0x65c <_exit>

00000132 <__bad_interrupt>:
 132:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000136 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
 136:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <system_init>
 13a:	08 95       	ret

0000013c <__vector_28>:

#include <driver_init.h>
#include <compiler.h>

ISR(ZCD0_ZCD_vect)
{
 13c:	1f 92       	push	r1
 13e:	0f 92       	push	r0
 140:	0f b6       	in	r0, 0x3f	; 63
 142:	0f 92       	push	r0
 144:	11 24       	eor	r1, r1
 146:	8f 93       	push	r24
	/* Insert your ZCD interrupt handling code here */

	ZCD0.STATUS = ZCD_CROSSIF_bm;
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	80 93 c3 06 	sts	0x06C3, r24	; 0x8006c3 <__TEXT_REGION_LENGTH__+0x7e06c3>
}
 14e:	8f 91       	pop	r24
 150:	0f 90       	pop	r0
 152:	0f be       	out	0x3f, r0	; 63
 154:	0f 90       	pop	r0
 156:	1f 90       	pop	r1
 158:	18 95       	reti

0000015a <__vector_52>:

ISR(ZCD1_ZCD_vect)
{
 15a:	1f 92       	push	r1
 15c:	0f 92       	push	r0
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	0f 92       	push	r0
 162:	11 24       	eor	r1, r1
 164:	8f 93       	push	r24
	/* Insert your ZCD interrupt handling code here */

	ZCD1.STATUS = ZCD_CROSSIF_bm;
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	80 93 cb 06 	sts	0x06CB, r24	; 0x8006cb <__TEXT_REGION_LENGTH__+0x7e06cb>
}
 16c:	8f 91       	pop	r24
 16e:	0f 90       	pop	r0
 170:	0f be       	out	0x3f, r0	; 63
 172:	0f 90       	pop	r0
 174:	1f 90       	pop	r1
 176:	18 95       	reti

00000178 <__vector_14>:



ISR(TCB0_INT_vect)
{
 178:	1f 92       	push	r1
 17a:	0f 92       	push	r0
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	0f 92       	push	r0
 180:	11 24       	eor	r1, r1
 182:	8f 93       	push	r24

	TCB0.INTFLAGS = TCB_CAPT_bm;
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	80 93 06 0b 	sts	0x0B06, r24	; 0x800b06 <__TEXT_REGION_LENGTH__+0x7e0b06>
}
 18a:	8f 91       	pop	r24
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

00000196 <__vector_31>:

ISR(TCB2_INT_vect)
{
 196:	1f 92       	push	r1
 198:	0f 92       	push	r0
 19a:	0f b6       	in	r0, 0x3f	; 63
 19c:	0f 92       	push	r0
 19e:	11 24       	eor	r1, r1
 1a0:	8f 93       	push	r24

	TCB2.INTFLAGS = TCB_CAPT_bm;
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	80 93 26 0b 	sts	0x0B26, r24	; 0x800b26 <__TEXT_REGION_LENGTH__+0x7e0b26>
}
 1a8:	8f 91       	pop	r24
 1aa:	0f 90       	pop	r0
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	0f 90       	pop	r0
 1b0:	1f 90       	pop	r1
 1b2:	18 95       	reti

000001b4 <__vector_17>:

ISR(TCD0_TRIG_vect)
{
 1b4:	1f 92       	push	r1
 1b6:	0f 92       	push	r0
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	0f 92       	push	r0
 1bc:	11 24       	eor	r1, r1
 1be:	8f 93       	push	r24
	/* Insert your TCD TRIGA interrupt handling code here */

	/* Insert your TCD TRIGB interrupt handling code here */

	/* TRIGA and TRIGB interrupt flags have to be cleared manually */
	TCD0.INTFLAGS = TCD_TRIGA_bm | TCD_TRIGB_bm;
 1c0:	8c e0       	ldi	r24, 0x0C	; 12
 1c2:	80 93 8d 0b 	sts	0x0B8D, r24	; 0x800b8d <__TEXT_REGION_LENGTH__+0x7e0b8d>
}
 1c6:	8f 91       	pop	r24
 1c8:	0f 90       	pop	r0
 1ca:	0f be       	out	0x3f, r0	; 63
 1cc:	0f 90       	pop	r0
 1ce:	1f 90       	pop	r1
 1d0:	18 95       	reti

000001d2 <RTC_enable>:
//#include "dac_application.h"
//#include "usart_application.h"
void RTC_enable(void)
{
	// Wait for RTC CTRLA to be unsynchronized
	while (RTC.STATUS & RTC_CTRLABUSY_bm) {
 1d2:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
 1d6:	80 fd       	sbrc	r24, 0
 1d8:	fc cf       	rjmp	.-8      	; 0x1d2 <RTC_enable>
	}

	// Enable RTC
	RTC.CTRLA |= RTC_RTCEN_bm;
 1da:	e0 e4       	ldi	r30, 0x40	; 64
 1dc:	f1 e0       	ldi	r31, 0x01	; 1
 1de:	80 81       	ld	r24, Z
 1e0:	81 60       	ori	r24, 0x01	; 1
 1e2:	80 83       	st	Z, r24
 1e4:	08 95       	ret

000001e6 <__vector_5>:
}

ISR(RTC_CNT_vect)
{
 1e6:	1f 92       	push	r1
 1e8:	0f 92       	push	r0
 1ea:	0f b6       	in	r0, 0x3f	; 63
 1ec:	0f 92       	push	r0
 1ee:	11 24       	eor	r1, r1
 1f0:	8f 93       	push	r24
 *
 * \param[in] pin       The pin number within port
 */
static inline void PORTB_toggle_pin_level(const uint8_t pin)
{
	VPORTB.IN |= 1 << pin;
 1f2:	86 b1       	in	r24, 0x06	; 6
 1f4:	88 60       	ori	r24, 0x08	; 8
 1f6:	86 b9       	out	0x06, r24	; 6
	/* Toggle LED0 */
	LED0_toggle_level();

	/* Overflow interrupt flag has to be cleared manually */
	RTC.INTFLAGS = RTC_OVF_bm;
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x7e0143>
}
 1fe:	8f 91       	pop	r24
 200:	0f 90       	pop	r0
 202:	0f be       	out	0x3f, r0	; 63
 204:	0f 90       	pop	r0
 206:	1f 90       	pop	r1
 208:	18 95       	reti

0000020a <main>:

int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
 20a:	0e 94 9b 00 	call	0x136	; 0x136 <atmel_start_init>

	/* Enable the timer used to trigger a new ADC measurement */
//	ADC0_SampleTimer_enable();

	/* RTC is used to Blink LED at 0.5s = PER (511) / (32768 / 32) */
	RTC_enable();
 20e:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <RTC_enable>
 212:	ff cf       	rjmp	.-2      	; 0x212 <main+0x8>

00000214 <BOD_init>:
int8_t BOD_init()
{

	// ccp_write_io((void*)&(BOD.CTRLA),BOD_SLEEP_DIS_gc /* Disabled */);

	BOD.INTCTRL = 0 << BOD_VLMIE_bp        /* voltage level monitor interrrupt enable: disabled */
 214:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
	              | BOD_VLMCFG_FALLING_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	08 95       	ret

0000021c <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
 21c:	45 e8       	ldi	r20, 0x85	; 133
 21e:	68 ed       	ldi	r22, 0xD8	; 216
 220:	8c e7       	ldi	r24, 0x7C	; 124
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	0e 94 46 02 	call	0x48c	; 0x48c <protected_write_io>
 228:	41 e8       	ldi	r20, 0x81	; 129
 22a:	68 ed       	ldi	r22, 0xD8	; 216
 22c:	80 e7       	ldi	r24, 0x70	; 112
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	0e 94 46 02 	call	0x48c	; 0x48c <protected_write_io>
 234:	4c e0       	ldi	r20, 0x0C	; 12
 236:	68 ed       	ldi	r22, 0xD8	; 216
 238:	80 e8       	ldi	r24, 0x80	; 128
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 46 02 	call	0x48c	; 0x48c <protected_write_io>
 240:	44 e2       	ldi	r20, 0x24	; 36
 242:	68 ed       	ldi	r22, 0xD8	; 216
 244:	88 e6       	ldi	r24, 0x68	; 104
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	0e 94 46 02 	call	0x48c	; 0x48c <protected_write_io>
	/* wait for PLL to start 
	while (!(CLKCTRL.MCLKSTATUS & CLKCTRL_PLLS_bm))
		;*/

	return 0;
}
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	08 95       	ret

00000250 <CPUINT_init>:

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	ENABLE_INTERRUPTS();
 250:	78 94       	sei

	return 0;
}
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	08 95       	ret

00000256 <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	08 c0       	rjmp	.+16     	; 0x26a <mcu_init+0x14>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 25a:	e8 2f       	mov	r30, r24
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	e0 5f       	subi	r30, 0xF0	; 240
 260:	fb 4f       	sbci	r31, 0xFB	; 251
 262:	90 81       	ld	r25, Z
 264:	98 60       	ori	r25, 0x08	; 8
 266:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 268:	8f 5f       	subi	r24, 0xFF	; 255
 26a:	88 30       	cpi	r24, 0x08	; 8
 26c:	b0 f3       	brcs	.-20     	; 0x25a <mcu_init+0x4>
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	08 c0       	rjmp	.+16     	; 0x282 <mcu_init+0x2c>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 272:	e8 2f       	mov	r30, r24
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	e0 5d       	subi	r30, 0xD0	; 208
 278:	fb 4f       	sbci	r31, 0xFB	; 251
 27a:	90 81       	ld	r25, Z
 27c:	98 60       	ori	r25, 0x08	; 8
 27e:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 280:	8f 5f       	subi	r24, 0xFF	; 255
 282:	88 30       	cpi	r24, 0x08	; 8
 284:	b0 f3       	brcs	.-20     	; 0x272 <mcu_init+0x1c>
 286:	80 e0       	ldi	r24, 0x00	; 0
 288:	08 c0       	rjmp	.+16     	; 0x29a <mcu_init+0x44>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 28a:	e8 2f       	mov	r30, r24
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	e0 5b       	subi	r30, 0xB0	; 176
 290:	fb 4f       	sbci	r31, 0xFB	; 251
 292:	90 81       	ld	r25, Z
 294:	98 60       	ori	r25, 0x08	; 8
 296:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 298:	8f 5f       	subi	r24, 0xFF	; 255
 29a:	88 30       	cpi	r24, 0x08	; 8
 29c:	b0 f3       	brcs	.-20     	; 0x28a <mcu_init+0x34>
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	08 c0       	rjmp	.+16     	; 0x2b2 <mcu_init+0x5c>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 2a2:	e8 2f       	mov	r30, r24
 2a4:	f0 e0       	ldi	r31, 0x00	; 0
 2a6:	e0 59       	subi	r30, 0x90	; 144
 2a8:	fb 4f       	sbci	r31, 0xFB	; 251
 2aa:	90 81       	ld	r25, Z
 2ac:	98 60       	ori	r25, 0x08	; 8
 2ae:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 2b0:	8f 5f       	subi	r24, 0xFF	; 255
 2b2:	88 30       	cpi	r24, 0x08	; 8
 2b4:	b0 f3       	brcs	.-20     	; 0x2a2 <mcu_init+0x4c>
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	08 c0       	rjmp	.+16     	; 0x2ca <mcu_init+0x74>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 2ba:	e8 2f       	mov	r30, r24
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	e0 57       	subi	r30, 0x70	; 112
 2c0:	fb 4f       	sbci	r31, 0xFB	; 251
 2c2:	90 81       	ld	r25, Z
 2c4:	98 60       	ori	r25, 0x08	; 8
 2c6:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 2c8:	8f 5f       	subi	r24, 0xFF	; 255
 2ca:	88 30       	cpi	r24, 0x08	; 8
 2cc:	b0 f3       	brcs	.-20     	; 0x2ba <mcu_init+0x64>
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	08 c0       	rjmp	.+16     	; 0x2e2 <mcu_init+0x8c>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 2d2:	e8 2f       	mov	r30, r24
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	e0 55       	subi	r30, 0x50	; 80
 2d8:	fb 4f       	sbci	r31, 0xFB	; 251
 2da:	90 81       	ld	r25, Z
 2dc:	98 60       	ori	r25, 0x08	; 8
 2de:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 2e0:	8f 5f       	subi	r24, 0xFF	; 255
 2e2:	88 30       	cpi	r24, 0x08	; 8
 2e4:	b0 f3       	brcs	.-20     	; 0x2d2 <mcu_init+0x7c>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
 2e6:	08 95       	ret

000002e8 <OPERATIONAL_AMPLIFIER_0_initialization>:
 */
static inline void PORTD_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
 2e8:	e7 e7       	ldi	r30, 0x77	; 119
 2ea:	f4 e0       	ldi	r31, 0x04	; 4
 2ec:	80 81       	ld	r24, Z
 2ee:	88 7f       	andi	r24, 0xF8	; 248
 2f0:	84 60       	ori	r24, 0x04	; 4
 2f2:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 2f4:	80 81       	ld	r24, Z
 2f6:	87 7f       	andi	r24, 0xF7	; 247
 2f8:	80 83       	st	Z, r24
 */
static inline void PORTD_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
 2fa:	e5 e7       	ldi	r30, 0x75	; 117
 2fc:	f4 e0       	ldi	r31, 0x04	; 4
 2fe:	80 81       	ld	r24, Z
 300:	88 7f       	andi	r24, 0xF8	; 248
 302:	84 60       	ori	r24, 0x04	; 4
 304:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 306:	80 81       	ld	r24, Z
 308:	87 7f       	andi	r24, 0xF7	; 247
 30a:	80 83       	st	Z, r24
	// Disable digital input buffer
	PD5_set_isc(PORT_ISC_INPUT_DISABLE_gc);
	// Disable pull-up resistor
	PD5_set_pull_mode(PORT_PULL_OFF);

	OPERATIONAL_AMPLIFIER_0_init();
 30c:	0e 94 36 02 	call	0x46c	; 0x46c <OPERATIONAL_AMPLIFIER_0_init>
 310:	08 95       	ret

00000312 <USART_0_initialization>:
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
 312:	84 b1       	in	r24, 0x04	; 4
 314:	8d 7f       	andi	r24, 0xFD	; 253
 316:	84 b9       	out	0x04, r24	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 318:	e1 e3       	ldi	r30, 0x31	; 49
 31a:	f4 e0       	ldi	r31, 0x04	; 4
 31c:	80 81       	ld	r24, Z
 31e:	87 7f       	andi	r24, 0xF7	; 247
 320:	80 83       	st	Z, r24
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
 322:	85 b1       	in	r24, 0x05	; 5
 324:	8e 7f       	andi	r24, 0xFE	; 254
 326:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
 328:	84 b1       	in	r24, 0x04	; 4
 32a:	81 60       	ori	r24, 0x01	; 1
 32c:	84 b9       	out	0x04, r24	; 4
	    // <true"> High
	    false);

	PB0_set_dir(PORT_DIR_OUT);

	USART_0_init();
 32e:	0e 94 02 03 	call	0x604	; 0x604 <USART_0_init>
 332:	08 95       	ret

00000334 <EVENT_SYSTEM_0_initialization>:
}

void EVENT_SYSTEM_0_initialization(void)
{

	EVENT_SYSTEM_0_init();
 334:	0e 94 25 02 	call	0x44a	; 0x44a <EVENT_SYSTEM_0_init>
 338:	08 95       	ret

0000033a <ZCD_Rising_initialization>:
 */
static inline void PORTD_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
 33a:	e1 e7       	ldi	r30, 0x71	; 113
 33c:	f4 e0       	ldi	r31, 0x04	; 4
 33e:	80 81       	ld	r24, Z
 340:	88 7f       	andi	r24, 0xF8	; 248
 342:	84 60       	ori	r24, 0x04	; 4
 344:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 346:	80 81       	ld	r24, Z
 348:	87 7f       	andi	r24, 0xF7	; 247
 34a:	80 83       	st	Z, r24
	// Disable digital input buffer
	PD1_set_isc(PORT_ISC_INPUT_DISABLE_gc);
	// Disable pull-up resistor
	PD1_set_pull_mode(PORT_PULL_OFF);

	ZCD_Rising_init();
 34c:	0e 94 1e 03 	call	0x63c	; 0x63c <ZCD_Rising_init>
 350:	08 95       	ret

00000352 <ZCD_Falling_initialization>:
 */
static inline void PORTE_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTE + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
 352:	e3 e9       	ldi	r30, 0x93	; 147
 354:	f4 e0       	ldi	r31, 0x04	; 4
 356:	80 81       	ld	r24, Z
 358:	88 7f       	andi	r24, 0xF8	; 248
 35a:	84 60       	ori	r24, 0x04	; 4
 35c:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTE + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 35e:	80 81       	ld	r24, Z
 360:	87 7f       	andi	r24, 0xF7	; 247
 362:	80 83       	st	Z, r24
	// Disable digital input buffer
	PE3_set_isc(PORT_ISC_INPUT_DISABLE_gc);
	// Disable pull-up resistor
	PE3_set_pull_mode(PORT_PULL_OFF);

	ZCD_Falling_init();
 364:	0e 94 26 03 	call	0x64c	; 0x64c <ZCD_Falling_init>
 368:	08 95       	ret

0000036a <SPI_ADF_initialization>:
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
 36a:	80 b1       	in	r24, 0x00	; 0
 36c:	8f 7d       	andi	r24, 0xDF	; 223
 36e:	80 b9       	out	0x00, r24	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 370:	e5 e1       	ldi	r30, 0x15	; 21
 372:	f4 e0       	ldi	r31, 0x04	; 4
 374:	80 81       	ld	r24, Z
 376:	87 7f       	andi	r24, 0xF7	; 247
 378:	80 83       	st	Z, r24
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
 37a:	81 b1       	in	r24, 0x01	; 1
 37c:	8f 7e       	andi	r24, 0xEF	; 239
 37e:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 380:	80 b1       	in	r24, 0x00	; 0
 382:	80 61       	ori	r24, 0x10	; 16
 384:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
 386:	81 b1       	in	r24, 0x01	; 1
 388:	8f 7b       	andi	r24, 0xBF	; 191
 38a:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 38c:	80 b1       	in	r24, 0x00	; 0
 38e:	80 64       	ori	r24, 0x40	; 64
 390:	80 b9       	out	0x00, r24	; 0
	    // <true"> High
	    false);

	PA6_set_dir(PORT_DIR_OUT);

	SPI_ADF_init();
 392:	0e 94 5e 02 	call	0x4bc	; 0x4bc <SPI_ADF_init>
 396:	08 95       	ret

00000398 <SPI_LMX_initialization>:
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
 398:	88 b1       	in	r24, 0x08	; 8
 39a:	8d 7f       	andi	r24, 0xFD	; 253
 39c:	88 b9       	out	0x08, r24	; 8
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 39e:	e1 e5       	ldi	r30, 0x51	; 81
 3a0:	f4 e0       	ldi	r31, 0x04	; 4
 3a2:	80 81       	ld	r24, Z
 3a4:	87 7f       	andi	r24, 0xF7	; 247
 3a6:	80 83       	st	Z, r24
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
 3a8:	89 b1       	in	r24, 0x09	; 9
 3aa:	8e 7f       	andi	r24, 0xFE	; 254
 3ac:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
 3ae:	88 b1       	in	r24, 0x08	; 8
 3b0:	81 60       	ori	r24, 0x01	; 1
 3b2:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
 3b4:	89 b1       	in	r24, 0x09	; 9
 3b6:	8b 7f       	andi	r24, 0xFB	; 251
 3b8:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
 3ba:	88 b1       	in	r24, 0x08	; 8
 3bc:	84 60       	ori	r24, 0x04	; 4
 3be:	88 b9       	out	0x08, r24	; 8
	    // <true"> High
	    false);

	PC2_set_dir(PORT_DIR_OUT);

	SPI_LMX_init();
 3c0:	0e 94 67 02 	call	0x4ce	; 0x4ce <SPI_LMX_init>
 3c4:	08 95       	ret

000003c6 <TIMER_RISING_initialization>:
}

void TIMER_RISING_initialization(void)
{

	TIMER_RISING_init();
 3c6:	0e 94 ca 02 	call	0x594	; 0x594 <TIMER_RISING_init>
 3ca:	08 95       	ret

000003cc <TIMER_Falling_initialization>:
}

void TIMER_Falling_initialization(void)
{

	TIMER_Falling_init();
 3cc:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <TIMER_Falling_init>
 3d0:	08 95       	ret

000003d2 <TIMER_C_initialization>:
}

void TIMER_C_initialization(void)
{

	TIMER_C_init();
 3d2:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <TIMER_C_init>
 3d6:	08 95       	ret

000003d8 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
 3d8:	0e 94 2b 01 	call	0x256	; 0x256 <mcu_init>
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
 3dc:	81 b1       	in	r24, 0x01	; 1
 3de:	8f 77       	andi	r24, 0x7F	; 127
 3e0:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 3e2:	80 b1       	in	r24, 0x00	; 0
 3e4:	80 68       	ori	r24, 0x80	; 128
 3e6:	80 b9       	out	0x00, r24	; 0
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
 3e8:	85 b1       	in	r24, 0x05	; 5
 3ea:	87 7f       	andi	r24, 0xF7	; 247
 3ec:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
 3ee:	84 b1       	in	r24, 0x04	; 4
 3f0:	88 60       	ori	r24, 0x08	; 8
 3f2:	84 b9       	out	0x04, r24	; 4
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
 3f4:	89 b1       	in	r24, 0x09	; 9
 3f6:	88 60       	ori	r24, 0x08	; 8
 3f8:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
 3fa:	88 b1       	in	r24, 0x08	; 8
 3fc:	88 60       	ori	r24, 0x08	; 8
 3fe:	88 b9       	out	0x08, r24	; 8
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
	} else {
		VPORTD.OUT &= ~(1 << pin);
 400:	8d b1       	in	r24, 0x0d	; 13
 402:	8b 7f       	andi	r24, 0xFB	; 251
 404:	8d b9       	out	0x0d, r24	; 13
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
 406:	8c b1       	in	r24, 0x0c	; 12
 408:	84 60       	ori	r24, 0x04	; 4
 40a:	8c b9       	out	0x0c, r24	; 12
	    // <true"> High
	    false);

	LTC_ENABLE_set_dir(PORT_DIR_OUT);

	OPERATIONAL_AMPLIFIER_0_initialization();
 40c:	0e 94 74 01 	call	0x2e8	; 0x2e8 <OPERATIONAL_AMPLIFIER_0_initialization>

	CLKCTRL_init();
 410:	0e 94 0e 01 	call	0x21c	; 0x21c <CLKCTRL_init>

	USART_0_initialization();
 414:	0e 94 89 01 	call	0x312	; 0x312 <USART_0_initialization>

	EVENT_SYSTEM_0_initialization();
 418:	0e 94 9a 01 	call	0x334	; 0x334 <EVENT_SYSTEM_0_initialization>

	SLPCTRL_init();
 41c:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <SLPCTRL_init>

	CPUINT_init();
 420:	0e 94 28 01 	call	0x250	; 0x250 <CPUINT_init>

	ZCD_Rising_initialization();
 424:	0e 94 9d 01 	call	0x33a	; 0x33a <ZCD_Rising_initialization>

	ZCD_Falling_initialization();
 428:	0e 94 a9 01 	call	0x352	; 0x352 <ZCD_Falling_initialization>

	SPI_ADF_initialization();
 42c:	0e 94 b5 01 	call	0x36a	; 0x36a <SPI_ADF_initialization>

	SPI_LMX_initialization();
 430:	0e 94 cc 01 	call	0x398	; 0x398 <SPI_LMX_initialization>

	RTC_0_init();
 434:	0e 94 4b 02 	call	0x496	; 0x496 <RTC_0_init>

	TIMER_RISING_initialization();
 438:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <TIMER_RISING_initialization>

	TIMER_Falling_initialization();
 43c:	0e 94 e6 01 	call	0x3cc	; 0x3cc <TIMER_Falling_initialization>

	TIMER_C_initialization();
 440:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <TIMER_C_initialization>

	BOD_init();
 444:	0e 94 0a 01 	call	0x214	; 0x214 <BOD_init>
 448:	08 95       	ret

0000044a <EVENT_SYSTEM_0_init>:
 * \return Initialization status.
 */
int8_t EVENT_SYSTEM_0_init()
{

	EVSYS.CHANNEL0 = EVSYS_CHANNEL0_ZCD0_gc; /* Zero Cross Detect 0 out */
 44a:	e0 e0       	ldi	r30, 0x00	; 0
 44c:	f2 e0       	ldi	r31, 0x02	; 2
 44e:	80 e3       	ldi	r24, 0x30	; 48
 450:	80 8b       	std	Z+16, r24	; 0x10

	EVSYS.CHANNEL1 = EVSYS_CHANNEL1_ZCD1_gc; /* Zero Cross Detect 1 out */
 452:	81 e3       	ldi	r24, 0x31	; 49
 454:	81 8b       	std	Z+17, r24	; 0x11

	// EVSYS.USERTCA1CNTA = EVSYS_USER_OFF_gc; /* Off */

	// EVSYS.USERTCA1CNTB = EVSYS_USER_OFF_gc; /* Off */

	EVSYS.USERTCB0CAPT = EVSYS_USER_CHANNEL0_gc; /* Connect user to event channel 0 */
 456:	91 e0       	ldi	r25, 0x01	; 1
 458:	96 af       	std	Z+62, r25	; 0x3e

	// EVSYS.USERTCB1CAPT = EVSYS_USER_OFF_gc; /* Off */

	// EVSYS.USERTCB1COUNT = EVSYS_USER_OFF_gc; /* Off */

	EVSYS.USERTCB2CAPT = EVSYS_USER_CHANNEL1_gc; /* Connect user to event channel 1 */
 45a:	82 e0       	ldi	r24, 0x02	; 2
 45c:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <__TEXT_REGION_LENGTH__+0x7e0242>

	// EVSYS.USERTCB3CAPT = EVSYS_USER_OFF_gc; /* Off */

	// EVSYS.USERTCB3COUNT = EVSYS_USER_OFF_gc; /* Off */

	EVSYS.USERTCD0INPUTA = EVSYS_USER_CHANNEL0_gc; /* Connect user to event channel 0 */
 460:	90 93 48 02 	sts	0x0248, r25	; 0x800248 <__TEXT_REGION_LENGTH__+0x7e0248>

	EVSYS.USERTCD0INPUTB = EVSYS_USER_CHANNEL1_gc; /* Connect user to event channel 1 */
 464:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <__TEXT_REGION_LENGTH__+0x7e0249>
	// EVSYS.USEROPAMP2DUMP = EVSYS_USER_OFF_gc; /* Off */

	// EVSYS.USEROPAMP2DISABLE = EVSYS_USER_OFF_gc; /* Off */

	return 0;
}
 468:	80 e0       	ldi	r24, 0x00	; 0
 46a:	08 95       	ret

0000046c <OPERATIONAL_AMPLIFIER_0_init>:
 * \return Initialization status.
 */
int8_t OPERATIONAL_AMPLIFIER_0_init()
{

	OPAMP.CTRLA = 1 << OPAMP_ENABLE_bp; /* OPAMP Peripheral Enable: enabled */
 46c:	e0 e0       	ldi	r30, 0x00	; 0
 46e:	f7 e0       	ldi	r31, 0x07	; 7
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	80 83       	st	Z, r24

	// OPAMP.DBGCTRL = 0 << OPAMP_DBGRUN_bp; /* Run in Debug mode: disabled */

	OPAMP.TIMEBASE = OPAMP_TIMEBASE_VALUE << OPAMP_TIMEBASE_gp;
 474:	87 e1       	ldi	r24, 0x17	; 23
 476:	82 83       	std	Z+2, r24	; 0x02

	// OPAMP.PWRCTRL = OPAMP_PWRCTRL_IRSEL_FULL_gc; /* Full Input Range */

	OPAMP.OP1SETTLE = 0x7f << OPAMP_SETTLE_gp; /* Setting: 0x7f */
 478:	8f e7       	ldi	r24, 0x7F	; 127
 47a:	84 8f       	std	Z+28, r24	; 0x1c

	OPAMP.OP1CTRLA = 1 << OPAMP_ALWAYSON_bp             /* Always ON: enabled */
 47c:	85 e8       	ldi	r24, 0x85	; 133
 47e:	80 8f       	std	Z+24, r24	; 0x18
	                 | 0 << OPAMP_EVENTEN_bp            /* Event Enable: disabled */
	                 | OPAMP_OP1CTRLA_OUTMODE_NORMAL_gc /* Output Driver in Normal Mode */
	                 | 1 << OPAMP_RUNSTBY_bp;           /* Run is standby mode: enabled */

	OPAMP.OP1RESMUX = OPAMP_OP1RESMUX_MUXTOP_OUT_gc     /* OPn output */
 480:	89 ee       	ldi	r24, 0xE9	; 233
 482:	82 8f       	std	Z+26, r24	; 0x1a
	                  | OPAMP_OP1RESMUX_MUXBOT_INN_gc   /* Negative input pin for OPn */
	                  | OPAMP_OP1RESMUX_MUXWIP_WIP7_gc; /* R1 = 1R, R2 = 15R, R2/R1 = 15 */

	OPAMP.OP1INMUX = OPAMP_OP1INMUX_MUXPOS_VDDDIV2_gc /* VDD/2 */
 484:	84 e1       	ldi	r24, 0x14	; 20
 486:	83 8f       	std	Z+27, r24	; 0x1b
	                 | OPAMP_OP1INMUX_MUXNEG_WIP_gc;  /* Wiper from OPn's resistor ladder */

	return 0;
}
 488:	80 e0       	ldi	r24, 0x00	; 0
 48a:	08 95       	ret

0000048c <protected_write_io>:
	PUBLIC_FUNCTION(protected_write_io)

#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
 48c:	1b be       	out	0x3b, r1	; 59
#endif
	movw    r30, r24                // Load addr into Z
 48e:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
 490:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
 492:	40 83       	st	Z, r20
	ret                             // Return to caller
 494:	08 95       	ret

00000496 <RTC_0_init>:
 * \return Initialization status.
 */
int8_t RTC_0_init()
{

	while (RTC.STATUS > 0) { /* Wait for all register to be synchronized */
 496:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
 49a:	81 11       	cpse	r24, r1
 49c:	fc cf       	rjmp	.-8      	; 0x496 <RTC_0_init>

	// RTC.CMP = 0x0; /* Compare: 0x0 */

	// RTC.CNT = 0x0; /* Counter: 0x0 */

	RTC.CTRLA = RTC_PRESCALER_DIV32_gc  /* 32 */
 49e:	e0 e4       	ldi	r30, 0x40	; 64
 4a0:	f1 e0       	ldi	r31, 0x01	; 1
 4a2:	88 ea       	ldi	r24, 0xA8	; 168
 4a4:	80 83       	st	Z, r24
	            | 0 << RTC_RTCEN_bp     /* Enable: disabled */
	            | 1 << RTC_RUNSTDBY_bp; /* Run In Standby: enabled */

	RTC.PER = 0x1ff; /* Period: 0x1ff */
 4a6:	8f ef       	ldi	r24, 0xFF	; 255
 4a8:	91 e0       	ldi	r25, 0x01	; 1
 4aa:	82 87       	std	Z+10, r24	; 0x0a
 4ac:	93 87       	std	Z+11, r25	; 0x0b

	RTC.CLKSEL = RTC_CLKSEL_OSC32K_gc; /* Internal 32.768 kHz oscillator */
 4ae:	17 82       	std	Z+7, r1	; 0x07

	// RTC.DBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	RTC.INTCTRL = 0 << RTC_CMP_bp    /* Compare Match Interrupt enable: disabled */
 4b0:	81 e0       	ldi	r24, 0x01	; 1
 4b2:	82 83       	std	Z+2, r24	; 0x02
	// RTC.PITDBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	// RTC.PITINTCTRL = 0 << RTC_PI_bp; /* Periodic Interrupt: disabled */

	return 0;
}
 4b4:	80 e0       	ldi	r24, 0x00	; 0
 4b6:	08 95       	ret

000004b8 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
 4b8:	80 e0       	ldi	r24, 0x00	; 0
 4ba:	08 95       	ret

000004bc <SPI_ADF_init>:
                 after the previous one (i.e. data transfer phase
                 after control/command phase).
*/
void SPI_LMX_register_callback(spi_transfer_done_cb_t f)
{
	SPI_LMX_desc.cb = f;
 4bc:	e0 e4       	ldi	r30, 0x40	; 64
 4be:	f9 e0       	ldi	r31, 0x09	; 9
 4c0:	81 e2       	ldi	r24, 0x21	; 33
 4c2:	80 83       	st	Z, r24
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	82 83       	std	Z+2, r24	; 0x02
 4c8:	10 92 15 40 	sts	0x4015, r1	; 0x804015 <SPI_ADF_desc>
 4cc:	08 95       	ret

000004ce <SPI_LMX_init>:
 4ce:	e0 e6       	ldi	r30, 0x60	; 96
 4d0:	f9 e0       	ldi	r31, 0x09	; 9
 4d2:	81 e2       	ldi	r24, 0x21	; 33
 4d4:	80 83       	st	Z, r24
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	82 83       	std	Z+2, r24	; 0x02
 4da:	ee e0       	ldi	r30, 0x0E	; 14
 4dc:	f0 e4       	ldi	r31, 0x40	; 64
 4de:	10 82       	st	Z, r1
 4e0:	15 82       	std	Z+5, r1	; 0x05
 4e2:	16 82       	std	Z+6, r1	; 0x06
 4e4:	08 95       	ret

000004e6 <__vector_37>:
}

ISR(SPI1_INT_vect)
{
 4e6:	1f 92       	push	r1
 4e8:	0f 92       	push	r0
 4ea:	0f b6       	in	r0, 0x3f	; 63
 4ec:	0f 92       	push	r0
 4ee:	11 24       	eor	r1, r1
 4f0:	0b b6       	in	r0, 0x3b	; 59
 4f2:	0f 92       	push	r0
 4f4:	2f 93       	push	r18
 4f6:	3f 93       	push	r19
 4f8:	4f 93       	push	r20
 4fa:	5f 93       	push	r21
 4fc:	6f 93       	push	r22
 4fe:	7f 93       	push	r23
 500:	8f 93       	push	r24
 502:	9f 93       	push	r25
 504:	af 93       	push	r26
 506:	bf 93       	push	r27
 508:	ef 93       	push	r30
 50a:	ff 93       	push	r31
	/* SPI_LMX_desc.data points to array element
	   to write the received data to. The data to be transmitted
	   is in the next array element.
	*/
	uint8_t rdata = SPI1.DATA;
 50c:	e0 e6       	ldi	r30, 0x60	; 96
 50e:	f9 e0       	ldi	r31, 0x09	; 9
 510:	94 81       	ldd	r25, Z+4	; 0x04
	uint8_t wdata = 0;

	SPI1.INTFLAGS = SPI_RXCIF_bm;
 512:	80 e8       	ldi	r24, 0x80	; 128
 514:	83 83       	std	Z+3, r24	; 0x03

	if (SPI_LMX_desc.type != SPI_WRITE) {
 516:	80 91 12 40 	lds	r24, 0x4012	; 0x804012 <__data_end+0x4>
 51a:	82 30       	cpi	r24, 0x02	; 2
 51c:	29 f0       	breq	.+10     	; 0x528 <__vector_37+0x42>
		*SPI_LMX_desc.data = rdata;
 51e:	e0 91 0f 40 	lds	r30, 0x400F	; 0x80400f <__data_end+0x1>
 522:	f0 91 10 40 	lds	r31, 0x4010	; 0x804010 <__data_end+0x2>
 526:	90 83       	st	Z, r25
	}

	SPI_LMX_desc.data++;
 528:	ee e0       	ldi	r30, 0x0E	; 14
 52a:	f0 e4       	ldi	r31, 0x40	; 64
 52c:	a1 81       	ldd	r26, Z+1	; 0x01
 52e:	b2 81       	ldd	r27, Z+2	; 0x02
 530:	9d 01       	movw	r18, r26
 532:	2f 5f       	subi	r18, 0xFF	; 255
 534:	3f 4f       	sbci	r19, 0xFF	; 255
 536:	21 83       	std	Z+1, r18	; 0x01
 538:	32 83       	std	Z+2, r19	; 0x02

	if (SPI_LMX_desc.type != SPI_READ)
 53a:	81 30       	cpi	r24, 0x01	; 1
 53c:	19 f0       	breq	.+6      	; 0x544 <__vector_37+0x5e>
		wdata = *SPI_LMX_desc.data;
 53e:	11 96       	adiw	r26, 0x01	; 1
 540:	9c 91       	ld	r25, X
 542:	01 c0       	rjmp	.+2      	; 0x546 <__vector_37+0x60>
	/* SPI_LMX_desc.data points to array element
	   to write the received data to. The data to be transmitted
	   is in the next array element.
	*/
	uint8_t rdata = SPI1.DATA;
	uint8_t wdata = 0;
 544:	90 e0       	ldi	r25, 0x00	; 0
	SPI_LMX_desc.data++;

	if (SPI_LMX_desc.type != SPI_READ)
		wdata = *SPI_LMX_desc.data;

	SPI_LMX_desc.size--;
 546:	ee e0       	ldi	r30, 0x0E	; 14
 548:	f0 e4       	ldi	r31, 0x40	; 64
 54a:	83 81       	ldd	r24, Z+3	; 0x03
 54c:	81 50       	subi	r24, 0x01	; 1
 54e:	83 83       	std	Z+3, r24	; 0x03
	// if more bytes to be transferred
	if (SPI_LMX_desc.size != 0) {
 550:	88 23       	and	r24, r24
 552:	19 f0       	breq	.+6      	; 0x55a <__vector_37+0x74>
		// more data to send, send a byte
		SPI1.DATA = wdata;
 554:	90 93 64 09 	sts	0x0964, r25	; 0x800964 <__TEXT_REGION_LENGTH__+0x7e0964>
 558:	0a c0       	rjmp	.+20     	; 0x56e <__vector_37+0x88>
	}

	// if last byte has been transferred, update status
	// and optionally call callback
	else {
		SPI_LMX_desc.status = SPI_DONE;
 55a:	ee e0       	ldi	r30, 0x0E	; 14
 55c:	f0 e4       	ldi	r31, 0x40	; 64
 55e:	83 e0       	ldi	r24, 0x03	; 3
 560:	80 83       	st	Z, r24
		if (SPI_LMX_desc.cb != NULL) {
 562:	05 80       	ldd	r0, Z+5	; 0x05
 564:	f6 81       	ldd	r31, Z+6	; 0x06
 566:	e0 2d       	mov	r30, r0
 568:	30 97       	sbiw	r30, 0x00	; 0
 56a:	09 f0       	breq	.+2      	; 0x56e <__vector_37+0x88>
			SPI_LMX_desc.cb();
 56c:	09 95       	icall
		}
	}
}
 56e:	ff 91       	pop	r31
 570:	ef 91       	pop	r30
 572:	bf 91       	pop	r27
 574:	af 91       	pop	r26
 576:	9f 91       	pop	r25
 578:	8f 91       	pop	r24
 57a:	7f 91       	pop	r23
 57c:	6f 91       	pop	r22
 57e:	5f 91       	pop	r21
 580:	4f 91       	pop	r20
 582:	3f 91       	pop	r19
 584:	2f 91       	pop	r18
 586:	0f 90       	pop	r0
 588:	0b be       	out	0x3b, r0	; 59
 58a:	0f 90       	pop	r0
 58c:	0f be       	out	0x3f, r0	; 63
 58e:	0f 90       	pop	r0
 590:	1f 90       	pop	r1
 592:	18 95       	reti

00000594 <TIMER_RISING_init>:
 * \return Initialization status.
 */
int8_t TIMER_RISING_init()
{

	TCB0.CCMP = 0xffff; /* Compare or Capture: 0xffff */
 594:	e0 e0       	ldi	r30, 0x00	; 0
 596:	fb e0       	ldi	r31, 0x0B	; 11
 598:	8f ef       	ldi	r24, 0xFF	; 255
 59a:	9f ef       	ldi	r25, 0xFF	; 255
 59c:	84 87       	std	Z+12, r24	; 0x0c
 59e:	95 87       	std	Z+13, r25	; 0x0d

	TCB0.CNT = 0xffff; /* Count: 0xffff */
 5a0:	82 87       	std	Z+10, r24	; 0x0a
 5a2:	93 87       	std	Z+11, r25	; 0x0b

	TCB0.CTRLB = 1 << TCB_ASYNC_bp      /* Asynchronous Enable: enabled */
 5a4:	83 e4       	ldi	r24, 0x43	; 67
 5a6:	81 83       	std	Z+1, r24	; 0x01
	             | 0 << TCB_CCMPEN_bp   /* Pin Output Enable: disabled */
	             | 0 << TCB_CCMPINIT_bp /* Pin Initial State: disabled */
	             | TCB_CNTMODE_FRQ_gc;  /* Input Capture Frequency measurement */

	TCB0.DBGCTRL = 1 << TCB_DBGRUN_bp; /* Debug Run: enabled */
 5a8:	81 e0       	ldi	r24, 0x01	; 1
 5aa:	80 87       	std	Z+8, r24	; 0x08

	TCB0.EVCTRL = 1 << TCB_CAPTEI_bp    /* Event Input Enable: enabled */
 5ac:	84 83       	std	Z+4, r24	; 0x04
	              | 0 << TCB_EDGE_bp    /* Event Edge: disabled */
	              | 0 << TCB_FILTER_bp; /* Input Capture Noise Cancellation Filter: disabled */

	TCB0.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
 5ae:	85 83       	std	Z+5, r24	; 0x05
	               | 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */

	TCB0.CTRLA = TCB_CLKSEL_DIV1_gc     /* CLK_PER */
 5b0:	81 e4       	ldi	r24, 0x41	; 65
 5b2:	80 83       	st	Z, r24
	             | 1 << TCB_RUNSTDBY_bp /* Run Standby: enabled */
	             | 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
	             | 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */

	return 0;
}
 5b4:	80 e0       	ldi	r24, 0x00	; 0
 5b6:	08 95       	ret

000005b8 <TIMER_Falling_init>:

	// TCB2.CCMP = 0x0; /* Compare or Capture: 0x0 */

	// TCB2.CNT = 0x0; /* Count: 0x0 */

	TCB2.CTRLB = 1 << TCB_ASYNC_bp      /* Asynchronous Enable: enabled */
 5b8:	e0 e2       	ldi	r30, 0x20	; 32
 5ba:	fb e0       	ldi	r31, 0x0B	; 11
 5bc:	83 e4       	ldi	r24, 0x43	; 67
 5be:	81 83       	std	Z+1, r24	; 0x01
	             | 0 << TCB_CCMPEN_bp   /* Pin Output Enable: disabled */
	             | 0 << TCB_CCMPINIT_bp /* Pin Initial State: disabled */
	             | TCB_CNTMODE_FRQ_gc;  /* Input Capture Frequency measurement */

	TCB2.DBGCTRL = 1 << TCB_DBGRUN_bp; /* Debug Run: enabled */
 5c0:	81 e0       	ldi	r24, 0x01	; 1
 5c2:	80 87       	std	Z+8, r24	; 0x08

	TCB2.EVCTRL = 1 << TCB_CAPTEI_bp    /* Event Input Enable: enabled */
 5c4:	84 83       	std	Z+4, r24	; 0x04
	              | 0 << TCB_EDGE_bp    /* Event Edge: disabled */
	              | 0 << TCB_FILTER_bp; /* Input Capture Noise Cancellation Filter: disabled */

	TCB2.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
 5c6:	85 83       	std	Z+5, r24	; 0x05
	               | 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */

	TCB2.CTRLA = TCB_CLKSEL_DIV1_gc     /* CLK_PER */
 5c8:	81 e4       	ldi	r24, 0x41	; 65
 5ca:	80 83       	st	Z, r24
	             | 1 << TCB_RUNSTDBY_bp /* Run Standby: enabled */
	             | 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
	             | 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */

	return 0;
}
 5cc:	80 e0       	ldi	r24, 0x00	; 0
 5ce:	08 95       	ret

000005d0 <TIMER_C_init>:
int8_t TIMER_C_init()
{

	// Enable Protected register, peripheral must be disabled (ENABLE=0, in TCD.CTRLA).

	TCD0.CMPASET = 4095; /* Compare A Set: 4095 */
 5d0:	e0 e8       	ldi	r30, 0x80	; 128
 5d2:	fb e0       	ldi	r31, 0x0B	; 11
 5d4:	8f ef       	ldi	r24, 0xFF	; 255
 5d6:	9f e0       	ldi	r25, 0x0F	; 15
 5d8:	80 a7       	std	Z+40, r24	; 0x28
 5da:	91 a7       	std	Z+41, r25	; 0x29

	// TCD0.CMPACLR = 0; /* Compare A Clear: 0 */

	TCD0.CMPBSET = 4095; /* Compare B Set: 4095 */
 5dc:	84 a7       	std	Z+44, r24	; 0x2c
 5de:	95 a7       	std	Z+45, r25	; 0x2d
	//		 | TCD_DLYTRIG_CMPASET_gc; /* Compare A set */

	// TCD0.DLYVAL = 0 << TCD_DLYVAL_gp; /* Delay value: 0 */

	TCD0.EVCTRLA
	    = TCD_CFG_NEITHER_gc      /* Neither Filter nor Asynchronous Event is enabled */
 5e0:	85 e1       	ldi	r24, 0x15	; 21
 5e2:	80 87       	std	Z+8, r24	; 0x08
	      | TCD_ACTION_CAPTURE_gc /* Event trigger a fault and capture */
	      | TCD_EDGE_RISE_HIGH_gc /* The rising edge or high level of event generates retrigger or fault action */
	      | 1 << TCD_TRIGEI_bp;   /* Trigger event enable: enabled */

	TCD0.EVCTRLB
	    = TCD_CFG_NEITHER_gc      /* Neither Filter nor Asynchronous Event is enabled */
 5e4:	81 87       	std	Z+9, r24	; 0x09

	// TCD0.INPUTCTRLA = TCD_INPUTMODE_NONE_gc; /* Input has no actions */

	// TCD0.INPUTCTRLB = TCD_INPUTMODE_NONE_gc; /* Input has no actions */

	TCD0.INTCTRL = 0 << TCD_OVF_bp      /* Overflow interrupt enable: disabled */
 5e6:	8c e0       	ldi	r24, 0x0C	; 12
 5e8:	84 87       	std	Z+12, r24	; 0x0c
	               | 1 << TCD_TRIGA_bp  /* Trigger A interrupt enable: enabled */
	               | 1 << TCD_TRIGB_bp; /* Trigger B interrupt enable: enabled */

	while ((TCD0.STATUS & TCD_ENRDY_bm) == 0)
 5ea:	80 91 8e 0b 	lds	r24, 0x0B8E	; 0x800b8e <__TEXT_REGION_LENGTH__+0x7e0b8e>
 5ee:	80 ff       	sbrs	r24, 0
 5f0:	fc cf       	rjmp	.-8      	; 0x5ea <TIMER_C_init+0x1a>
		; // Wait for Enable Ready to be high.

	TCD0.CTRLA = 1 << TCD_ENABLE_bp      /* Enable: enabled */
 5f2:	81 e2       	ldi	r24, 0x21	; 33
 5f4:	80 93 80 0b 	sts	0x0B80, r24	; 0x800b80 <__TEXT_REGION_LENGTH__+0x7e0b80>
	             | TCD_CLKSEL_PLL_gc     /*  */
	             | TCD_CNTPRES_DIV1_gc   /* Sync clock divided by 1 */
	             | TCD_SYNCPRES_DIV1_gc; /*  */
				 
	while (!(CLKCTRL.MCLKSTATUS & CLKCTRL_PLLS_bm));
 5f8:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
 5fc:	85 ff       	sbrs	r24, 5
 5fe:	fc cf       	rjmp	.-8      	; 0x5f8 <TIMER_C_init+0x28>

	return 0;
}
 600:	80 e0       	ldi	r24, 0x00	; 0
 602:	08 95       	ret

00000604 <USART_0_init>:
uint8_t USART_0_read()
{
	while (!(USART3.STATUS & USART_RXCIF_bm))
		;
	return USART3.RXDATAL;
}
 604:	e0 e6       	ldi	r30, 0x60	; 96
 606:	f8 e0       	ldi	r31, 0x08	; 8
 608:	81 e4       	ldi	r24, 0x41	; 65
 60a:	93 e0       	ldi	r25, 0x03	; 3
 60c:	80 87       	std	Z+8, r24	; 0x08
 60e:	91 87       	std	Z+9, r25	; 0x09
 610:	80 ec       	ldi	r24, 0xC0	; 192
 612:	86 83       	std	Z+6, r24	; 0x06
 614:	80 e0       	ldi	r24, 0x00	; 0
 616:	90 e4       	ldi	r25, 0x40	; 64
 618:	80 93 18 40 	sts	0x4018, r24	; 0x804018 <__iob+0x2>
 61c:	90 93 19 40 	sts	0x4019, r25	; 0x804019 <__iob+0x3>
 620:	80 e0       	ldi	r24, 0x00	; 0
 622:	08 95       	ret

00000624 <USART_0_write>:
 *
 * \return Nothing
 */
void USART_0_write(const uint8_t data)
{
	while (!(USART3.STATUS & USART_DREIF_bm))
 624:	90 91 64 08 	lds	r25, 0x0864	; 0x800864 <__TEXT_REGION_LENGTH__+0x7e0864>
 628:	95 ff       	sbrs	r25, 5
 62a:	fc cf       	rjmp	.-8      	; 0x624 <USART_0_write>
		;
	USART3.TXDATAL = data;
 62c:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <__TEXT_REGION_LENGTH__+0x7e0862>
 630:	08 95       	ret

00000632 <USART_0_printCHAR>:

#if defined(__GNUC__)

int USART_0_printCHAR(char character, FILE *stream)
{
	USART_0_write(character);
 632:	0e 94 12 03 	call	0x624	; 0x624 <USART_0_write>
	return 0;
}
 636:	80 e0       	ldi	r24, 0x00	; 0
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	08 95       	ret

0000063c <ZCD_Rising_init>:
 * \return Initialization status.
 */
int8_t ZCD_Rising_init()
{

	ZCD0.CTRLA = 1 << ZCD_ENABLE_bp     /* Setting: enabled */
 63c:	e0 ec       	ldi	r30, 0xC0	; 192
 63e:	f6 e0       	ldi	r31, 0x06	; 6
 640:	81 e8       	ldi	r24, 0x81	; 129
 642:	80 83       	st	Z, r24
	             | 0 << ZCD_OUTEN_bp    /* Setting: disabled */
	             | 1 << ZCD_RUNSTDBY_bp /* Setting: enabled */
	             | 0 << ZCD_INVERT_bp;  /* Setting: disabled */

	ZCD0.INTCTRL = ZCD_INTMODE_RISING_gc; /* Interrupt on rising input signal */
 644:	81 e0       	ldi	r24, 0x01	; 1
 646:	82 83       	std	Z+2, r24	; 0x02

	return 0;
}
 648:	80 e0       	ldi	r24, 0x00	; 0
 64a:	08 95       	ret

0000064c <ZCD_Falling_init>:
 * \return Initialization status.
 */
int8_t ZCD_Falling_init()
{

	ZCD1.CTRLA = 1 << ZCD_ENABLE_bp     /* Setting: enabled */
 64c:	e8 ec       	ldi	r30, 0xC8	; 200
 64e:	f6 e0       	ldi	r31, 0x06	; 6
 650:	81 e8       	ldi	r24, 0x81	; 129
 652:	80 83       	st	Z, r24
	             | 0 << ZCD_OUTEN_bp    /* Setting: disabled */
	             | 1 << ZCD_RUNSTDBY_bp /* Setting: enabled */
	             | 0 << ZCD_INVERT_bp;  /* Setting: disabled */

	ZCD1.INTCTRL = ZCD_INTMODE_FALLING_gc; /* Interrupt on falling input signal */
 654:	82 e0       	ldi	r24, 0x02	; 2
 656:	82 83       	std	Z+2, r24	; 0x02

	return 0;
}
 658:	80 e0       	ldi	r24, 0x00	; 0
 65a:	08 95       	ret

0000065c <_exit>:
 65c:	f8 94       	cli

0000065e <__stop_program>:
 65e:	ff cf       	rjmp	.-2      	; 0x65e <__stop_program>
