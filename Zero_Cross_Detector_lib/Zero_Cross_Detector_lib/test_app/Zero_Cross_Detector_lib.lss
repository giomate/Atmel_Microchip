
Zero_Cross_Detector_lib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000072  00804000  00001ada  00001b6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ada  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000074  00804072  00804072  00001be0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001be0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c3c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000608  00000000  00000000  00001c80  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a7d5  00000000  00000000  00002288  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004703  00000000  00000000  0000ca5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002ced  00000000  00000000  00011160  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e30  00000000  00000000  00013e50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006134  00000000  00000000  00014c80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001b57  00000000  00000000  0001adb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004b8  00000000  00000000  0001c90b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__dtors_end>
       4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
       8:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
       c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      10:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      14:	0c 94 1e 02 	jmp	0x43c	; 0x43c <__vector_5>
      18:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      1c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      20:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      24:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      28:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      2c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      30:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      34:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      38:	0c 94 06 06 	jmp	0xc0c	; 0xc0c <__vector_14>
      3c:	0c 94 7b 06 	jmp	0xcf6	; 0xcf6 <__vector_15>
      40:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      44:	0c 94 f0 06 	jmp	0xde0	; 0xde0 <__vector_17>
      48:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      4c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      50:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      54:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      58:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      5c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      60:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      64:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      68:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      6c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      70:	0c 94 9c 05 	jmp	0xb38	; 0xb38 <__vector_28>
      74:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      78:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      7c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      80:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      84:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      88:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      8c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      90:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      94:	0c 94 45 04 	jmp	0x88a	; 0x88a <__vector_37>
      98:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      9c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      a0:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      a4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      a8:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      ac:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      b0:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      b4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      b8:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      bc:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      c0:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      c4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      c8:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      cc:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      d0:	0c 94 d1 05 	jmp	0xba2	; 0xba2 <__vector_52>
      d4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      d8:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      dc:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      e0:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      e4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      e8:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      ec:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      f0:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>

000000f4 <__ctors_start>:
      f4:	15 04       	cpc	r1, r5

000000f6 <__ctors_end>:
      f6:	22 04       	cpc	r2, r2

000000f8 <__dtors_end>:
      f8:	11 24       	eor	r1, r1
      fa:	1f be       	out	0x3f, r1	; 63
      fc:	cf ef       	ldi	r28, 0xFF	; 255
      fe:	cd bf       	out	0x3d, r28	; 61
     100:	df e7       	ldi	r29, 0x7F	; 127
     102:	de bf       	out	0x3e, r29	; 62

00000104 <__do_copy_data>:
     104:	10 e4       	ldi	r17, 0x40	; 64
     106:	a0 e0       	ldi	r26, 0x00	; 0
     108:	b0 e4       	ldi	r27, 0x40	; 64
     10a:	ea ed       	ldi	r30, 0xDA	; 218
     10c:	fa e1       	ldi	r31, 0x1A	; 26
     10e:	00 e0       	ldi	r16, 0x00	; 0
     110:	0b bf       	out	0x3b, r16	; 59
     112:	02 c0       	rjmp	.+4      	; 0x118 <__do_copy_data+0x14>
     114:	07 90       	elpm	r0, Z+
     116:	0d 92       	st	X+, r0
     118:	a2 37       	cpi	r26, 0x72	; 114
     11a:	b1 07       	cpc	r27, r17
     11c:	d9 f7       	brne	.-10     	; 0x114 <__do_copy_data+0x10>

0000011e <__do_clear_bss>:
     11e:	20 e4       	ldi	r18, 0x40	; 64
     120:	a2 e7       	ldi	r26, 0x72	; 114
     122:	b0 e4       	ldi	r27, 0x40	; 64
     124:	01 c0       	rjmp	.+2      	; 0x128 <.do_clear_bss_start>

00000126 <.do_clear_bss_loop>:
     126:	1d 92       	st	X+, r1

00000128 <.do_clear_bss_start>:
     128:	a6 3e       	cpi	r26, 0xE6	; 230
     12a:	b2 07       	cpc	r27, r18
     12c:	e1 f7       	brne	.-8      	; 0x126 <.do_clear_bss_loop>

0000012e <__do_global_ctors>:
     12e:	10 e0       	ldi	r17, 0x00	; 0
     130:	cb e7       	ldi	r28, 0x7B	; 123
     132:	d0 e0       	ldi	r29, 0x00	; 0
     134:	04 c0       	rjmp	.+8      	; 0x13e <__do_global_ctors+0x10>
     136:	21 97       	sbiw	r28, 0x01	; 1
     138:	fe 01       	movw	r30, r28
     13a:	0e 94 8f 0a 	call	0x151e	; 0x151e <__tablejump2__>
     13e:	ca 37       	cpi	r28, 0x7A	; 122
     140:	d1 07       	cpc	r29, r17
     142:	c9 f7       	brne	.-14     	; 0x136 <__do_global_ctors+0x8>
     144:	0e 94 56 02 	call	0x4ac	; 0x4ac <main>
     148:	0c 94 60 0d 	jmp	0x1ac0	; 0x1ac0 <__do_global_dtors>

0000014c <__bad_interrupt>:
     14c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000150 <_ZN19FREQUENCY_ESTIMATORC1Ev>:
	
		
	}
	current_frequency=(uint32_t)(24000000/(average_counter));
	return current_frequency;
}
     150:	cf 93       	push	r28
     152:	df 93       	push	r29
     154:	00 d0       	rcall	.+0      	; 0x156 <_ZN19FREQUENCY_ESTIMATORC1Ev+0x6>
     156:	cd b7       	in	r28, 0x3d	; 61
     158:	de b7       	in	r29, 0x3e	; 62
     15a:	89 83       	std	Y+1, r24	; 0x01
     15c:	9a 83       	std	Y+2, r25	; 0x02
     15e:	89 81       	ldd	r24, Y+1	; 0x01
     160:	9a 81       	ldd	r25, Y+2	; 0x02
     162:	fc 01       	movw	r30, r24
     164:	12 8a       	std	Z+18, r1	; 0x12
     166:	29 81       	ldd	r18, Y+1	; 0x01
     168:	3a 81       	ldd	r19, Y+2	; 0x02
     16a:	81 e0       	ldi	r24, 0x01	; 1
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	a0 e0       	ldi	r26, 0x00	; 0
     170:	b0 e0       	ldi	r27, 0x00	; 0
     172:	f9 01       	movw	r30, r18
     174:	82 87       	std	Z+10, r24	; 0x0a
     176:	93 87       	std	Z+11, r25	; 0x0b
     178:	a4 87       	std	Z+12, r26	; 0x0c
     17a:	b5 87       	std	Z+13, r27	; 0x0d
     17c:	00 00       	nop
     17e:	0f 90       	pop	r0
     180:	0f 90       	pop	r0
     182:	df 91       	pop	r29
     184:	cf 91       	pop	r28
     186:	08 95       	ret

00000188 <_ZN19FREQUENCY_ESTIMATORD1Ev>:
     188:	cf 93       	push	r28
     18a:	df 93       	push	r29
     18c:	00 d0       	rcall	.+0      	; 0x18e <_ZN19FREQUENCY_ESTIMATORD1Ev+0x6>
     18e:	cd b7       	in	r28, 0x3d	; 61
     190:	de b7       	in	r29, 0x3e	; 62
     192:	89 83       	std	Y+1, r24	; 0x01
     194:	9a 83       	std	Y+2, r25	; 0x02
     196:	00 00       	nop
     198:	0f 90       	pop	r0
     19a:	0f 90       	pop	r0
     19c:	df 91       	pop	r29
     19e:	cf 91       	pop	r28
     1a0:	08 95       	ret

000001a2 <_ZN19FREQUENCY_ESTIMATOR22OnCapture_Frequecy_OutEv>:
uint32_t FREQUENCY_ESTIMATOR::OnCapture_Frequecy_Out(void){
     1a2:	cf 93       	push	r28
     1a4:	df 93       	push	r29
     1a6:	00 d0       	rcall	.+0      	; 0x1a8 <_ZN19FREQUENCY_ESTIMATOR22OnCapture_Frequecy_OutEv+0x6>
     1a8:	cd b7       	in	r28, 0x3d	; 61
     1aa:	de b7       	in	r29, 0x3e	; 62
     1ac:	89 83       	std	Y+1, r24	; 0x01
     1ae:	9a 83       	std	Y+2, r25	; 0x02
		capture_timer_falling=*timer_fall;
     1b0:	89 81       	ldd	r24, Y+1	; 0x01
     1b2:	9a 81       	ldd	r25, Y+2	; 0x02
     1b4:	fc 01       	movw	r30, r24
     1b6:	80 81       	ld	r24, Z
     1b8:	91 81       	ldd	r25, Z+1	; 0x01
     1ba:	fc 01       	movw	r30, r24
     1bc:	20 81       	ld	r18, Z
     1be:	31 81       	ldd	r19, Z+1	; 0x01
     1c0:	89 81       	ldd	r24, Y+1	; 0x01
     1c2:	9a 81       	ldd	r25, Y+2	; 0x02
     1c4:	fc 01       	movw	r30, r24
     1c6:	24 83       	std	Z+4, r18	; 0x04
     1c8:	35 83       	std	Z+5, r19	; 0x05
		capture_timer_rising=*timer_rise;
     1ca:	89 81       	ldd	r24, Y+1	; 0x01
     1cc:	9a 81       	ldd	r25, Y+2	; 0x02
     1ce:	fc 01       	movw	r30, r24
     1d0:	82 81       	ldd	r24, Z+2	; 0x02
     1d2:	93 81       	ldd	r25, Z+3	; 0x03
     1d4:	fc 01       	movw	r30, r24
     1d6:	20 81       	ld	r18, Z
     1d8:	31 81       	ldd	r19, Z+1	; 0x01
     1da:	89 81       	ldd	r24, Y+1	; 0x01
     1dc:	9a 81       	ldd	r25, Y+2	; 0x02
     1de:	fc 01       	movw	r30, r24
     1e0:	26 83       	std	Z+6, r18	; 0x06
     1e2:	37 83       	std	Z+7, r19	; 0x07
	if ((tako->got_value_r&tako->got_value_f)&(capture_timer_rising>0)&(capture_timer_falling>0))
     1e4:	80 91 cc 40 	lds	r24, 0x40CC	; 0x8040cc <tako>
     1e8:	90 91 cd 40 	lds	r25, 0x40CD	; 0x8040cd <tako+0x1>
     1ec:	fc 01       	movw	r30, r24
     1ee:	86 89       	ldd	r24, Z+22	; 0x16
     1f0:	28 2f       	mov	r18, r24
     1f2:	30 e0       	ldi	r19, 0x00	; 0
     1f4:	80 91 cc 40 	lds	r24, 0x40CC	; 0x8040cc <tako>
     1f8:	90 91 cd 40 	lds	r25, 0x40CD	; 0x8040cd <tako+0x1>
     1fc:	fc 01       	movw	r30, r24
     1fe:	87 89       	ldd	r24, Z+23	; 0x17
     200:	88 2f       	mov	r24, r24
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	28 23       	and	r18, r24
     206:	39 23       	and	r19, r25
     208:	89 81       	ldd	r24, Y+1	; 0x01
     20a:	9a 81       	ldd	r25, Y+2	; 0x02
     20c:	fc 01       	movw	r30, r24
     20e:	86 81       	ldd	r24, Z+6	; 0x06
     210:	97 81       	ldd	r25, Z+7	; 0x07
     212:	41 e0       	ldi	r20, 0x01	; 1
     214:	89 2b       	or	r24, r25
     216:	09 f4       	brne	.+2      	; 0x21a <__EEPROM_REGION_LENGTH__+0x1a>
     218:	40 e0       	ldi	r20, 0x00	; 0
     21a:	84 2f       	mov	r24, r20
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	28 23       	and	r18, r24
     220:	39 23       	and	r19, r25
     222:	89 81       	ldd	r24, Y+1	; 0x01
     224:	9a 81       	ldd	r25, Y+2	; 0x02
     226:	fc 01       	movw	r30, r24
     228:	84 81       	ldd	r24, Z+4	; 0x04
     22a:	95 81       	ldd	r25, Z+5	; 0x05
     22c:	41 e0       	ldi	r20, 0x01	; 1
     22e:	89 2b       	or	r24, r25
     230:	09 f4       	brne	.+2      	; 0x234 <__EEPROM_REGION_LENGTH__+0x34>
     232:	40 e0       	ldi	r20, 0x00	; 0
     234:	84 2f       	mov	r24, r20
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	82 23       	and	r24, r18
     23a:	93 23       	and	r25, r19
     23c:	21 e0       	ldi	r18, 0x01	; 1
     23e:	89 2b       	or	r24, r25
     240:	09 f4       	brne	.+2      	; 0x244 <__EEPROM_REGION_LENGTH__+0x44>
     242:	20 e0       	ldi	r18, 0x00	; 0
     244:	22 23       	and	r18, r18
     246:	a9 f1       	breq	.+106    	; 0x2b2 <__EEPROM_REGION_LENGTH__+0xb2>
	{
		min_capture=capture_timer_rising<capture_timer_falling?capture_timer_rising:capture_timer_falling;
     248:	89 81       	ldd	r24, Y+1	; 0x01
     24a:	9a 81       	ldd	r25, Y+2	; 0x02
     24c:	fc 01       	movw	r30, r24
     24e:	26 81       	ldd	r18, Z+6	; 0x06
     250:	37 81       	ldd	r19, Z+7	; 0x07
     252:	89 81       	ldd	r24, Y+1	; 0x01
     254:	9a 81       	ldd	r25, Y+2	; 0x02
     256:	fc 01       	movw	r30, r24
     258:	84 81       	ldd	r24, Z+4	; 0x04
     25a:	95 81       	ldd	r25, Z+5	; 0x05
     25c:	28 17       	cp	r18, r24
     25e:	39 07       	cpc	r19, r25
     260:	30 f4       	brcc	.+12     	; 0x26e <__EEPROM_REGION_LENGTH__+0x6e>
     262:	89 81       	ldd	r24, Y+1	; 0x01
     264:	9a 81       	ldd	r25, Y+2	; 0x02
     266:	fc 01       	movw	r30, r24
     268:	86 81       	ldd	r24, Z+6	; 0x06
     26a:	97 81       	ldd	r25, Z+7	; 0x07
     26c:	05 c0       	rjmp	.+10     	; 0x278 <__EEPROM_REGION_LENGTH__+0x78>
     26e:	89 81       	ldd	r24, Y+1	; 0x01
     270:	9a 81       	ldd	r25, Y+2	; 0x02
     272:	fc 01       	movw	r30, r24
     274:	84 81       	ldd	r24, Z+4	; 0x04
     276:	95 81       	ldd	r25, Z+5	; 0x05
     278:	29 81       	ldd	r18, Y+1	; 0x01
     27a:	3a 81       	ldd	r19, Y+2	; 0x02
     27c:	f9 01       	movw	r30, r18
     27e:	80 87       	std	Z+8, r24	; 0x08
     280:	91 87       	std	Z+9, r25	; 0x09
		if (min_capture>0)
     282:	89 81       	ldd	r24, Y+1	; 0x01
     284:	9a 81       	ldd	r25, Y+2	; 0x02
     286:	fc 01       	movw	r30, r24
     288:	80 85       	ldd	r24, Z+8	; 0x08
     28a:	91 85       	ldd	r25, Z+9	; 0x09
     28c:	89 2b       	or	r24, r25
     28e:	09 f4       	brne	.+2      	; 0x292 <__EEPROM_REGION_LENGTH__+0x92>
     290:	65 c0       	rjmp	.+202    	; 0x35c <__EEPROM_REGION_LENGTH__+0x15c>
		{
			average_counter=min_capture;
     292:	89 81       	ldd	r24, Y+1	; 0x01
     294:	9a 81       	ldd	r25, Y+2	; 0x02
     296:	fc 01       	movw	r30, r24
     298:	80 85       	ldd	r24, Z+8	; 0x08
     29a:	91 85       	ldd	r25, Z+9	; 0x09
     29c:	cc 01       	movw	r24, r24
     29e:	a0 e0       	ldi	r26, 0x00	; 0
     2a0:	b0 e0       	ldi	r27, 0x00	; 0
     2a2:	29 81       	ldd	r18, Y+1	; 0x01
     2a4:	3a 81       	ldd	r19, Y+2	; 0x02
     2a6:	f9 01       	movw	r30, r18
     2a8:	82 87       	std	Z+10, r24	; 0x0a
     2aa:	93 87       	std	Z+11, r25	; 0x0b
     2ac:	a4 87       	std	Z+12, r26	; 0x0c
     2ae:	b5 87       	std	Z+13, r27	; 0x0d
     2b0:	55 c0       	rjmp	.+170    	; 0x35c <__EEPROM_REGION_LENGTH__+0x15c>
		}
		
	}
	else
	{
		if ((tako->got_value_r)&(capture_timer_rising>0))
     2b2:	80 91 cc 40 	lds	r24, 0x40CC	; 0x8040cc <tako>
     2b6:	90 91 cd 40 	lds	r25, 0x40CD	; 0x8040cd <tako+0x1>
     2ba:	fc 01       	movw	r30, r24
     2bc:	86 89       	ldd	r24, Z+22	; 0x16
     2be:	28 2f       	mov	r18, r24
     2c0:	30 e0       	ldi	r19, 0x00	; 0
     2c2:	89 81       	ldd	r24, Y+1	; 0x01
     2c4:	9a 81       	ldd	r25, Y+2	; 0x02
     2c6:	fc 01       	movw	r30, r24
     2c8:	86 81       	ldd	r24, Z+6	; 0x06
     2ca:	97 81       	ldd	r25, Z+7	; 0x07
     2cc:	41 e0       	ldi	r20, 0x01	; 1
     2ce:	89 2b       	or	r24, r25
     2d0:	09 f4       	brne	.+2      	; 0x2d4 <__EEPROM_REGION_LENGTH__+0xd4>
     2d2:	40 e0       	ldi	r20, 0x00	; 0
     2d4:	84 2f       	mov	r24, r20
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	82 23       	and	r24, r18
     2da:	93 23       	and	r25, r19
     2dc:	21 e0       	ldi	r18, 0x01	; 1
     2de:	89 2b       	or	r24, r25
     2e0:	09 f4       	brne	.+2      	; 0x2e4 <__EEPROM_REGION_LENGTH__+0xe4>
     2e2:	20 e0       	ldi	r18, 0x00	; 0
     2e4:	22 23       	and	r18, r18
     2e6:	81 f0       	breq	.+32     	; 0x308 <__EEPROM_REGION_LENGTH__+0x108>
		{
			average_counter=capture_timer_rising;
     2e8:	89 81       	ldd	r24, Y+1	; 0x01
     2ea:	9a 81       	ldd	r25, Y+2	; 0x02
     2ec:	fc 01       	movw	r30, r24
     2ee:	86 81       	ldd	r24, Z+6	; 0x06
     2f0:	97 81       	ldd	r25, Z+7	; 0x07
     2f2:	cc 01       	movw	r24, r24
     2f4:	a0 e0       	ldi	r26, 0x00	; 0
     2f6:	b0 e0       	ldi	r27, 0x00	; 0
     2f8:	29 81       	ldd	r18, Y+1	; 0x01
     2fa:	3a 81       	ldd	r19, Y+2	; 0x02
     2fc:	f9 01       	movw	r30, r18
     2fe:	82 87       	std	Z+10, r24	; 0x0a
     300:	93 87       	std	Z+11, r25	; 0x0b
     302:	a4 87       	std	Z+12, r26	; 0x0c
     304:	b5 87       	std	Z+13, r27	; 0x0d
     306:	2a c0       	rjmp	.+84     	; 0x35c <__EEPROM_REGION_LENGTH__+0x15c>
		} 
		else
		{
			if ((tako->got_value_f)&(capture_timer_falling>0))
     308:	80 91 cc 40 	lds	r24, 0x40CC	; 0x8040cc <tako>
     30c:	90 91 cd 40 	lds	r25, 0x40CD	; 0x8040cd <tako+0x1>
     310:	fc 01       	movw	r30, r24
     312:	87 89       	ldd	r24, Z+23	; 0x17
     314:	28 2f       	mov	r18, r24
     316:	30 e0       	ldi	r19, 0x00	; 0
     318:	89 81       	ldd	r24, Y+1	; 0x01
     31a:	9a 81       	ldd	r25, Y+2	; 0x02
     31c:	fc 01       	movw	r30, r24
     31e:	84 81       	ldd	r24, Z+4	; 0x04
     320:	95 81       	ldd	r25, Z+5	; 0x05
     322:	41 e0       	ldi	r20, 0x01	; 1
     324:	89 2b       	or	r24, r25
     326:	09 f4       	brne	.+2      	; 0x32a <__EEPROM_REGION_LENGTH__+0x12a>
     328:	40 e0       	ldi	r20, 0x00	; 0
     32a:	84 2f       	mov	r24, r20
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	82 23       	and	r24, r18
     330:	93 23       	and	r25, r19
     332:	21 e0       	ldi	r18, 0x01	; 1
     334:	89 2b       	or	r24, r25
     336:	09 f4       	brne	.+2      	; 0x33a <__EEPROM_REGION_LENGTH__+0x13a>
     338:	20 e0       	ldi	r18, 0x00	; 0
     33a:	22 23       	and	r18, r18
     33c:	79 f0       	breq	.+30     	; 0x35c <__EEPROM_REGION_LENGTH__+0x15c>
			{
				average_counter=capture_timer_falling;
     33e:	89 81       	ldd	r24, Y+1	; 0x01
     340:	9a 81       	ldd	r25, Y+2	; 0x02
     342:	fc 01       	movw	r30, r24
     344:	84 81       	ldd	r24, Z+4	; 0x04
     346:	95 81       	ldd	r25, Z+5	; 0x05
     348:	cc 01       	movw	r24, r24
     34a:	a0 e0       	ldi	r26, 0x00	; 0
     34c:	b0 e0       	ldi	r27, 0x00	; 0
     34e:	29 81       	ldd	r18, Y+1	; 0x01
     350:	3a 81       	ldd	r19, Y+2	; 0x02
     352:	f9 01       	movw	r30, r18
     354:	82 87       	std	Z+10, r24	; 0x0a
     356:	93 87       	std	Z+11, r25	; 0x0b
     358:	a4 87       	std	Z+12, r26	; 0x0c
     35a:	b5 87       	std	Z+13, r27	; 0x0d
			{
			//	average_counter=1;
			}
		}
	}
	current_frequency=(uint32_t)(24000000/(average_counter));
     35c:	89 81       	ldd	r24, Y+1	; 0x01
     35e:	9a 81       	ldd	r25, Y+2	; 0x02
     360:	fc 01       	movw	r30, r24
     362:	22 85       	ldd	r18, Z+10	; 0x0a
     364:	33 85       	ldd	r19, Z+11	; 0x0b
     366:	44 85       	ldd	r20, Z+12	; 0x0c
     368:	55 85       	ldd	r21, Z+13	; 0x0d
     36a:	80 e0       	ldi	r24, 0x00	; 0
     36c:	96 e3       	ldi	r25, 0x36	; 54
     36e:	ae e6       	ldi	r26, 0x6E	; 110
     370:	b1 e0       	ldi	r27, 0x01	; 1
     372:	bc 01       	movw	r22, r24
     374:	cd 01       	movw	r24, r26
     376:	0e 94 4e 0a 	call	0x149c	; 0x149c <__udivmodsi4>
     37a:	da 01       	movw	r26, r20
     37c:	c9 01       	movw	r24, r18
     37e:	29 81       	ldd	r18, Y+1	; 0x01
     380:	3a 81       	ldd	r19, Y+2	; 0x02
     382:	f9 01       	movw	r30, r18
     384:	86 87       	std	Z+14, r24	; 0x0e
     386:	97 87       	std	Z+15, r25	; 0x0f
     388:	a0 8b       	std	Z+16, r26	; 0x10
     38a:	b1 8b       	std	Z+17, r27	; 0x11
	return current_frequency;	
     38c:	89 81       	ldd	r24, Y+1	; 0x01
     38e:	9a 81       	ldd	r25, Y+2	; 0x02
     390:	fc 01       	movw	r30, r24
     392:	86 85       	ldd	r24, Z+14	; 0x0e
     394:	97 85       	ldd	r25, Z+15	; 0x0f
     396:	a0 89       	ldd	r26, Z+16	; 0x10
     398:	b1 89       	ldd	r27, Z+17	; 0x11
     39a:	bc 01       	movw	r22, r24
     39c:	cd 01       	movw	r24, r26
     39e:	0f 90       	pop	r0
     3a0:	0f 90       	pop	r0
     3a2:	df 91       	pop	r29
     3a4:	cf 91       	pop	r28
     3a6:	08 95       	ret

000003a8 <PORTB_toggle_pin_level>:
 * Toggle the pin levels on pins defined by bit mask
 *
 * \param[in] pin       The pin number within port
 */
static inline void PORTB_toggle_pin_level(const uint8_t pin)
{
     3a8:	cf 93       	push	r28
     3aa:	df 93       	push	r29
     3ac:	1f 92       	push	r1
     3ae:	cd b7       	in	r28, 0x3d	; 61
     3b0:	de b7       	in	r29, 0x3e	; 62
     3b2:	89 83       	std	Y+1, r24	; 0x01
	VPORTB.IN |= 1 << pin;
     3b4:	84 e0       	ldi	r24, 0x04	; 4
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	24 e0       	ldi	r18, 0x04	; 4
     3ba:	30 e0       	ldi	r19, 0x00	; 0
     3bc:	f9 01       	movw	r30, r18
     3be:	22 81       	ldd	r18, Z+2	; 0x02
     3c0:	62 2f       	mov	r22, r18
     3c2:	29 81       	ldd	r18, Y+1	; 0x01
     3c4:	42 2f       	mov	r20, r18
     3c6:	50 e0       	ldi	r21, 0x00	; 0
     3c8:	21 e0       	ldi	r18, 0x01	; 1
     3ca:	30 e0       	ldi	r19, 0x00	; 0
     3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <PORTB_toggle_pin_level+0x2a>
     3ce:	22 0f       	add	r18, r18
     3d0:	33 1f       	adc	r19, r19
     3d2:	4a 95       	dec	r20
     3d4:	e2 f7       	brpl	.-8      	; 0x3ce <PORTB_toggle_pin_level+0x26>
     3d6:	26 2b       	or	r18, r22
     3d8:	fc 01       	movw	r30, r24
     3da:	22 83       	std	Z+2, r18	; 0x02
}
     3dc:	00 00       	nop
     3de:	0f 90       	pop	r0
     3e0:	df 91       	pop	r29
     3e2:	cf 91       	pop	r28
     3e4:	08 95       	ret

000003e6 <LED0_toggle_level>:
 * \brief Toggle output level on LED0
 *
 * Toggle the pin level
 */
static inline void LED0_toggle_level()
{
     3e6:	cf 93       	push	r28
     3e8:	df 93       	push	r29
     3ea:	cd b7       	in	r28, 0x3d	; 61
     3ec:	de b7       	in	r29, 0x3e	; 62
	PORTB_toggle_pin_level(3);
     3ee:	83 e0       	ldi	r24, 0x03	; 3
     3f0:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <PORTB_toggle_pin_level>
}
     3f4:	00 00       	nop
     3f6:	df 91       	pop	r29
     3f8:	cf 91       	pop	r28
     3fa:	08 95       	ret

000003fc <_Z10RTC_enablev>:
static SPI_SLAVE_CLASS post_static;



void RTC_enable(void)
{
     3fc:	cf 93       	push	r28
     3fe:	df 93       	push	r29
     400:	cd b7       	in	r28, 0x3d	; 61
     402:	de b7       	in	r29, 0x3e	; 62
	// Wait for RTC CTRLA to be unsynchronized
	while (RTC.STATUS & RTC_CTRLABUSY_bm) {
     404:	80 e4       	ldi	r24, 0x40	; 64
     406:	91 e0       	ldi	r25, 0x01	; 1
     408:	fc 01       	movw	r30, r24
     40a:	81 81       	ldd	r24, Z+1	; 0x01
     40c:	88 2f       	mov	r24, r24
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	81 70       	andi	r24, 0x01	; 1
     412:	99 27       	eor	r25, r25
     414:	21 e0       	ldi	r18, 0x01	; 1
     416:	89 2b       	or	r24, r25
     418:	09 f4       	brne	.+2      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     41a:	20 e0       	ldi	r18, 0x00	; 0
     41c:	22 23       	and	r18, r18
     41e:	09 f0       	breq	.+2      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     420:	f1 cf       	rjmp	.-30     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
	}

	// Enable RTC
	RTC.CTRLA |= RTC_RTCEN_bm;
     422:	80 e4       	ldi	r24, 0x40	; 64
     424:	91 e0       	ldi	r25, 0x01	; 1
     426:	20 e4       	ldi	r18, 0x40	; 64
     428:	31 e0       	ldi	r19, 0x01	; 1
     42a:	f9 01       	movw	r30, r18
     42c:	20 81       	ld	r18, Z
     42e:	21 60       	ori	r18, 0x01	; 1
     430:	fc 01       	movw	r30, r24
     432:	20 83       	st	Z, r18
}
     434:	00 00       	nop
     436:	df 91       	pop	r29
     438:	cf 91       	pop	r28
     43a:	08 95       	ret

0000043c <__vector_5>:

ISR(RTC_CNT_vect)
{
     43c:	1f 92       	push	r1
     43e:	0f 92       	push	r0
     440:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     444:	0f 92       	push	r0
     446:	11 24       	eor	r1, r1
     448:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     44c:	0f 92       	push	r0
     44e:	2f 93       	push	r18
     450:	3f 93       	push	r19
     452:	4f 93       	push	r20
     454:	5f 93       	push	r21
     456:	6f 93       	push	r22
     458:	7f 93       	push	r23
     45a:	8f 93       	push	r24
     45c:	9f 93       	push	r25
     45e:	af 93       	push	r26
     460:	bf 93       	push	r27
     462:	ef 93       	push	r30
     464:	ff 93       	push	r31
     466:	cf 93       	push	r28
     468:	df 93       	push	r29
     46a:	cd b7       	in	r28, 0x3d	; 61
     46c:	de b7       	in	r29, 0x3e	; 62
	/* Toggle LED0 */
	LED0_toggle_level();
     46e:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <LED0_toggle_level>

	/* Overflow interrupt flag has to be cleared manually */
	RTC.INTFLAGS = RTC_OVF_bm;
     472:	80 e4       	ldi	r24, 0x40	; 64
     474:	91 e0       	ldi	r25, 0x01	; 1
     476:	21 e0       	ldi	r18, 0x01	; 1
     478:	fc 01       	movw	r30, r24
     47a:	23 83       	std	Z+3, r18	; 0x03
}
     47c:	00 00       	nop
     47e:	df 91       	pop	r29
     480:	cf 91       	pop	r28
     482:	ff 91       	pop	r31
     484:	ef 91       	pop	r30
     486:	bf 91       	pop	r27
     488:	af 91       	pop	r26
     48a:	9f 91       	pop	r25
     48c:	8f 91       	pop	r24
     48e:	7f 91       	pop	r23
     490:	6f 91       	pop	r22
     492:	5f 91       	pop	r21
     494:	4f 91       	pop	r20
     496:	3f 91       	pop	r19
     498:	2f 91       	pop	r18
     49a:	0f 90       	pop	r0
     49c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     4a0:	0f 90       	pop	r0
     4a2:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     4a6:	0f 90       	pop	r0
     4a8:	1f 90       	pop	r1
     4aa:	18 95       	reti

000004ac <main>:

int main(void)
{
     4ac:	cf 93       	push	r28
     4ae:	df 93       	push	r29
     4b0:	cd b7       	in	r28, 0x3d	; 61
     4b2:	de b7       	in	r29, 0x3e	; 62
     4b4:	62 97       	sbiw	r28, 0x12	; 18
     4b6:	cd bf       	out	0x3d, r28	; 61
     4b8:	de bf       	out	0x3e, r29	; 62
	uint16_t counter_printf=0;
     4ba:	19 82       	std	Y+1, r1	; 0x01
     4bc:	1a 82       	std	Y+2, r1	; 0x02
	uint32_t last_frequency_b=0;
     4be:	1b 82       	std	Y+3, r1	; 0x03
     4c0:	1c 82       	std	Y+4, r1	; 0x04
     4c2:	1d 82       	std	Y+5, r1	; 0x05
     4c4:	1e 82       	std	Y+6, r1	; 0x06
	uint32_t last_frequency_c=0;
     4c6:	1f 82       	std	Y+7, r1	; 0x07
     4c8:	18 86       	std	Y+8, r1	; 0x08
     4ca:	19 86       	std	Y+9, r1	; 0x09
     4cc:	1a 86       	std	Y+10, r1	; 0x0a
		uint32_t current_frequency_b=0;
     4ce:	1b 86       	std	Y+11, r1	; 0x0b
     4d0:	1c 86       	std	Y+12, r1	; 0x0c
     4d2:	1d 86       	std	Y+13, r1	; 0x0d
     4d4:	1e 86       	std	Y+14, r1	; 0x0e
		uint32_t current_frequency_c=0;
     4d6:	1f 86       	std	Y+15, r1	; 0x0f
     4d8:	18 8a       	std	Y+16, r1	; 0x10
     4da:	19 8a       	std	Y+17, r1	; 0x11
     4dc:	1a 8a       	std	Y+18, r1	; 0x12
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
     4de:	0e 94 8c 08 	call	0x1118	; 0x1118 <atmel_start_init>
	RTC_enable();
     4e2:	0e 94 fe 01 	call	0x3fc	; 0x3fc <_Z10RTC_enablev>
	tako=&tako_static;
     4e6:	82 e7       	ldi	r24, 0x72	; 114
     4e8:	90 e4       	ldi	r25, 0x40	; 64
     4ea:	80 93 cc 40 	sts	0x40CC, r24	; 0x8040cc <tako>
     4ee:	90 93 cd 40 	sts	0x40CD, r25	; 0x8040cd <tako+0x1>
	post=&post_static;
     4f2:	8c e9       	ldi	r24, 0x9C	; 156
     4f4:	90 e4       	ldi	r25, 0x40	; 64
     4f6:	80 93 ca 40 	sts	0x40CA, r24	; 0x8040ca <post>
     4fa:	90 93 cb 40 	sts	0x40CB, r25	; 0x8040cb <post+0x1>
	tako->Init();
     4fe:	80 91 cc 40 	lds	r24, 0x40CC	; 0x8040cc <tako>
     502:	90 91 cd 40 	lds	r25, 0x40CD	; 0x8040cd <tako+0x1>
     506:	0e 94 7f 07 	call	0xefe	; 0xefe <_ZN18Zero_Cross_Counter4InitEv>
	post->Init();
     50a:	80 91 ca 40 	lds	r24, 0x40CA	; 0x8040ca <post>
     50e:	90 91 cb 40 	lds	r25, 0x40CB	; 0x8040cb <post+0x1>
     512:	0e 94 1b 05 	call	0xa36	; 0xa36 <_ZN15SPI_SLAVE_CLASS4InitEv>
	post->frequency_array=tako->last_frequency;
     516:	80 91 ca 40 	lds	r24, 0x40CA	; 0x8040ca <post>
     51a:	90 91 cb 40 	lds	r25, 0x40CB	; 0x8040cb <post+0x1>
     51e:	20 91 cc 40 	lds	r18, 0x40CC	; 0x8040cc <tako>
     522:	30 91 cd 40 	lds	r19, 0x40CD	; 0x8040cd <tako+0x1>
     526:	f9 01       	movw	r30, r18
     528:	24 8d       	ldd	r18, Z+28	; 0x1c
     52a:	35 8d       	ldd	r19, Z+29	; 0x1d
     52c:	fc 01       	movw	r30, r24
     52e:	27 83       	std	Z+7, r18	; 0x07
     530:	30 87       	std	Z+8, r19	; 0x08
	ENABLE_INTERRUPTS();
     532:	78 94       	sei
	//asm("nop");
	printf("hello\n\r");
     534:	8e e0       	ldi	r24, 0x0E	; 14
     536:	90 e4       	ldi	r25, 0x40	; 64
     538:	89 2f       	mov	r24, r25
     53a:	8f 93       	push	r24
     53c:	8e e0       	ldi	r24, 0x0E	; 14
     53e:	90 e4       	ldi	r25, 0x40	; 64
     540:	8f 93       	push	r24
     542:	0e 94 98 0a 	call	0x1530	; 0x1530 <printf>
     546:	0f 90       	pop	r0
     548:	0f 90       	pop	r0
	/* Replace with your application code */
	while (1) {
		current_frequency_c=(uint32_t)(24000000/(tako->capture_timer_fall));
     54a:	80 91 cc 40 	lds	r24, 0x40CC	; 0x8040cc <tako>
     54e:	90 91 cd 40 	lds	r25, 0x40CD	; 0x8040cd <tako+0x1>
     552:	fc 01       	movw	r30, r24
     554:	80 8d       	ldd	r24, Z+24	; 0x18
     556:	91 8d       	ldd	r25, Z+25	; 0x19
     558:	9c 01       	movw	r18, r24
     55a:	40 e0       	ldi	r20, 0x00	; 0
     55c:	50 e0       	ldi	r21, 0x00	; 0
     55e:	80 e0       	ldi	r24, 0x00	; 0
     560:	96 e3       	ldi	r25, 0x36	; 54
     562:	ae e6       	ldi	r26, 0x6E	; 110
     564:	b1 e0       	ldi	r27, 0x01	; 1
     566:	bc 01       	movw	r22, r24
     568:	cd 01       	movw	r24, r26
     56a:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__divmodsi4>
     56e:	da 01       	movw	r26, r20
     570:	c9 01       	movw	r24, r18
     572:	8f 87       	std	Y+15, r24	; 0x0f
     574:	98 8b       	std	Y+16, r25	; 0x10
     576:	a9 8b       	std	Y+17, r26	; 0x11
     578:	ba 8b       	std	Y+18, r27	; 0x12
		if (last_frequency_c!=current_frequency_c)
     57a:	2f 81       	ldd	r18, Y+7	; 0x07
     57c:	38 85       	ldd	r19, Y+8	; 0x08
     57e:	49 85       	ldd	r20, Y+9	; 0x09
     580:	5a 85       	ldd	r21, Y+10	; 0x0a
     582:	8f 85       	ldd	r24, Y+15	; 0x0f
     584:	98 89       	ldd	r25, Y+16	; 0x10
     586:	a9 89       	ldd	r26, Y+17	; 0x11
     588:	ba 89       	ldd	r27, Y+18	; 0x12
     58a:	28 17       	cp	r18, r24
     58c:	39 07       	cpc	r19, r25
     58e:	4a 07       	cpc	r20, r26
     590:	5b 07       	cpc	r21, r27
     592:	a1 f1       	breq	.+104    	; 0x5fc <main+0x150>
		{
			if (tako->capture_timer_fall>0)
     594:	80 91 cc 40 	lds	r24, 0x40CC	; 0x8040cc <tako>
     598:	90 91 cd 40 	lds	r25, 0x40CD	; 0x8040cd <tako+0x1>
     59c:	fc 01       	movw	r30, r24
     59e:	80 8d       	ldd	r24, Z+24	; 0x18
     5a0:	91 8d       	ldd	r25, Z+25	; 0x19
     5a2:	21 e0       	ldi	r18, 0x01	; 1
     5a4:	89 2b       	or	r24, r25
     5a6:	09 f4       	brne	.+2      	; 0x5aa <main+0xfe>
     5a8:	20 e0       	ldi	r18, 0x00	; 0
     5aa:	22 23       	and	r18, r18
     5ac:	39 f1       	breq	.+78     	; 0x5fc <main+0x150>
			{
				last_frequency_c=current_frequency_c;
     5ae:	8f 85       	ldd	r24, Y+15	; 0x0f
     5b0:	98 89       	ldd	r25, Y+16	; 0x10
     5b2:	a9 89       	ldd	r26, Y+17	; 0x11
     5b4:	ba 89       	ldd	r27, Y+18	; 0x12
     5b6:	8f 83       	std	Y+7, r24	; 0x07
     5b8:	98 87       	std	Y+8, r25	; 0x08
     5ba:	a9 87       	std	Y+9, r26	; 0x09
     5bc:	ba 87       	std	Y+10, r27	; 0x0a
					//tako.Set_Last_Frequency(last_frequency_c);
					if (tako->full_wave)
     5be:	80 91 cc 40 	lds	r24, 0x40CC	; 0x8040cc <tako>
     5c2:	90 91 cd 40 	lds	r25, 0x40CD	; 0x8040cd <tako+0x1>
     5c6:	fc 01       	movw	r30, r24
     5c8:	82 a1       	ldd	r24, Z+34	; 0x22
     5ca:	88 23       	and	r24, r24
     5cc:	b9 f0       	breq	.+46     	; 0x5fc <main+0x150>
					{
						printf("Counter Full_Wave Fall : %lu \n\r", current_frequency_c);
     5ce:	8a 89       	ldd	r24, Y+18	; 0x12
     5d0:	8f 93       	push	r24
     5d2:	89 89       	ldd	r24, Y+17	; 0x11
     5d4:	8f 93       	push	r24
     5d6:	88 89       	ldd	r24, Y+16	; 0x10
     5d8:	8f 93       	push	r24
     5da:	8f 85       	ldd	r24, Y+15	; 0x0f
     5dc:	8f 93       	push	r24
     5de:	86 e1       	ldi	r24, 0x16	; 22
     5e0:	90 e4       	ldi	r25, 0x40	; 64
     5e2:	89 2f       	mov	r24, r25
     5e4:	8f 93       	push	r24
     5e6:	86 e1       	ldi	r24, 0x16	; 22
     5e8:	90 e4       	ldi	r25, 0x40	; 64
     5ea:	8f 93       	push	r24
     5ec:	0e 94 98 0a 	call	0x1530	; 0x1530 <printf>
     5f0:	0f 90       	pop	r0
     5f2:	0f 90       	pop	r0
     5f4:	0f 90       	pop	r0
     5f6:	0f 90       	pop	r0
     5f8:	0f 90       	pop	r0
     5fa:	0f 90       	pop	r0
		} 
		else
		{
			
		}
		current_frequency_b=(uint32_t)(24000000/(tako->capture_timer_rise));
     5fc:	80 91 cc 40 	lds	r24, 0x40CC	; 0x8040cc <tako>
     600:	90 91 cd 40 	lds	r25, 0x40CD	; 0x8040cd <tako+0x1>
     604:	fc 01       	movw	r30, r24
     606:	82 8d       	ldd	r24, Z+26	; 0x1a
     608:	93 8d       	ldd	r25, Z+27	; 0x1b
     60a:	9c 01       	movw	r18, r24
     60c:	40 e0       	ldi	r20, 0x00	; 0
     60e:	50 e0       	ldi	r21, 0x00	; 0
     610:	80 e0       	ldi	r24, 0x00	; 0
     612:	96 e3       	ldi	r25, 0x36	; 54
     614:	ae e6       	ldi	r26, 0x6E	; 110
     616:	b1 e0       	ldi	r27, 0x01	; 1
     618:	bc 01       	movw	r22, r24
     61a:	cd 01       	movw	r24, r26
     61c:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__divmodsi4>
     620:	da 01       	movw	r26, r20
     622:	c9 01       	movw	r24, r18
     624:	8b 87       	std	Y+11, r24	; 0x0b
     626:	9c 87       	std	Y+12, r25	; 0x0c
     628:	ad 87       	std	Y+13, r26	; 0x0d
     62a:	be 87       	std	Y+14, r27	; 0x0e
		if (last_frequency_b!=current_frequency_b)
     62c:	2b 81       	ldd	r18, Y+3	; 0x03
     62e:	3c 81       	ldd	r19, Y+4	; 0x04
     630:	4d 81       	ldd	r20, Y+5	; 0x05
     632:	5e 81       	ldd	r21, Y+6	; 0x06
     634:	8b 85       	ldd	r24, Y+11	; 0x0b
     636:	9c 85       	ldd	r25, Y+12	; 0x0c
     638:	ad 85       	ldd	r26, Y+13	; 0x0d
     63a:	be 85       	ldd	r27, Y+14	; 0x0e
     63c:	28 17       	cp	r18, r24
     63e:	39 07       	cpc	r19, r25
     640:	4a 07       	cpc	r20, r26
     642:	5b 07       	cpc	r21, r27
     644:	a1 f1       	breq	.+104    	; 0x6ae <main+0x202>
		{
			if (tako->capture_timer_rise>0)
     646:	80 91 cc 40 	lds	r24, 0x40CC	; 0x8040cc <tako>
     64a:	90 91 cd 40 	lds	r25, 0x40CD	; 0x8040cd <tako+0x1>
     64e:	fc 01       	movw	r30, r24
     650:	82 8d       	ldd	r24, Z+26	; 0x1a
     652:	93 8d       	ldd	r25, Z+27	; 0x1b
     654:	21 e0       	ldi	r18, 0x01	; 1
     656:	89 2b       	or	r24, r25
     658:	09 f4       	brne	.+2      	; 0x65c <main+0x1b0>
     65a:	20 e0       	ldi	r18, 0x00	; 0
     65c:	22 23       	and	r18, r18
     65e:	39 f1       	breq	.+78     	; 0x6ae <main+0x202>
			{
				last_frequency_b=current_frequency_b;
     660:	8b 85       	ldd	r24, Y+11	; 0x0b
     662:	9c 85       	ldd	r25, Y+12	; 0x0c
     664:	ad 85       	ldd	r26, Y+13	; 0x0d
     666:	be 85       	ldd	r27, Y+14	; 0x0e
     668:	8b 83       	std	Y+3, r24	; 0x03
     66a:	9c 83       	std	Y+4, r25	; 0x04
     66c:	ad 83       	std	Y+5, r26	; 0x05
     66e:	be 83       	std	Y+6, r27	; 0x06
				//tako.Set_Last_Frequency(last_frequency_b);
				if (tako->full_wave)
     670:	80 91 cc 40 	lds	r24, 0x40CC	; 0x8040cc <tako>
     674:	90 91 cd 40 	lds	r25, 0x40CD	; 0x8040cd <tako+0x1>
     678:	fc 01       	movw	r30, r24
     67a:	82 a1       	ldd	r24, Z+34	; 0x22
     67c:	88 23       	and	r24, r24
     67e:	b9 f0       	breq	.+46     	; 0x6ae <main+0x202>
				{
					printf("Counter Full-Wave Rise : %lu \n\r", current_frequency_b);
     680:	8e 85       	ldd	r24, Y+14	; 0x0e
     682:	8f 93       	push	r24
     684:	8d 85       	ldd	r24, Y+13	; 0x0d
     686:	8f 93       	push	r24
     688:	8c 85       	ldd	r24, Y+12	; 0x0c
     68a:	8f 93       	push	r24
     68c:	8b 85       	ldd	r24, Y+11	; 0x0b
     68e:	8f 93       	push	r24
     690:	86 e3       	ldi	r24, 0x36	; 54
     692:	90 e4       	ldi	r25, 0x40	; 64
     694:	89 2f       	mov	r24, r25
     696:	8f 93       	push	r24
     698:	86 e3       	ldi	r24, 0x36	; 54
     69a:	90 e4       	ldi	r25, 0x40	; 64
     69c:	8f 93       	push	r24
     69e:	0e 94 98 0a 	call	0x1530	; 0x1530 <printf>
     6a2:	0f 90       	pop	r0
     6a4:	0f 90       	pop	r0
     6a6:	0f 90       	pop	r0
     6a8:	0f 90       	pop	r0
     6aa:	0f 90       	pop	r0
     6ac:	0f 90       	pop	r0
			
		}
		else
		{
		}
		tako->Set_Last_Capture_Frequency();
     6ae:	80 91 cc 40 	lds	r24, 0x40CC	; 0x8040cc <tako>
     6b2:	90 91 cd 40 	lds	r25, 0x40CD	; 0x8040cd <tako+0x1>
     6b6:	0e 94 12 08 	call	0x1024	; 0x1024 <_ZN18Zero_Cross_Counter26Set_Last_Capture_FrequencyEv>
		if ((*tako->timer_rise>0)&(tako->got_value_r))
     6ba:	80 91 cc 40 	lds	r24, 0x40CC	; 0x8040cc <tako>
     6be:	90 91 cd 40 	lds	r25, 0x40CD	; 0x8040cd <tako+0x1>
     6c2:	fc 01       	movw	r30, r24
     6c4:	82 81       	ldd	r24, Z+2	; 0x02
     6c6:	93 81       	ldd	r25, Z+3	; 0x03
     6c8:	fc 01       	movw	r30, r24
     6ca:	80 81       	ld	r24, Z
     6cc:	91 81       	ldd	r25, Z+1	; 0x01
     6ce:	21 e0       	ldi	r18, 0x01	; 1
     6d0:	89 2b       	or	r24, r25
     6d2:	09 f4       	brne	.+2      	; 0x6d6 <main+0x22a>
     6d4:	20 e0       	ldi	r18, 0x00	; 0
     6d6:	22 2f       	mov	r18, r18
     6d8:	30 e0       	ldi	r19, 0x00	; 0
     6da:	80 91 cc 40 	lds	r24, 0x40CC	; 0x8040cc <tako>
     6de:	90 91 cd 40 	lds	r25, 0x40CD	; 0x8040cd <tako+0x1>
     6e2:	fc 01       	movw	r30, r24
     6e4:	86 89       	ldd	r24, Z+22	; 0x16
     6e6:	88 2f       	mov	r24, r24
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	82 23       	and	r24, r18
     6ec:	93 23       	and	r25, r19
     6ee:	21 e0       	ldi	r18, 0x01	; 1
     6f0:	89 2b       	or	r24, r25
     6f2:	09 f4       	brne	.+2      	; 0x6f6 <main+0x24a>
     6f4:	20 e0       	ldi	r18, 0x00	; 0
     6f6:	22 23       	and	r18, r18
     6f8:	31 f0       	breq	.+12     	; 0x706 <main+0x25a>
		{
		//	printf("Raw capture rise : %u \n\r", *tako->timer_rise);
			tako->got_value_r=false;
     6fa:	80 91 cc 40 	lds	r24, 0x40CC	; 0x8040cc <tako>
     6fe:	90 91 cd 40 	lds	r25, 0x40CD	; 0x8040cd <tako+0x1>
     702:	fc 01       	movw	r30, r24
     704:	16 8a       	std	Z+22, r1	; 0x16
		}
		if ((*tako->timer_fall>0)&(tako->got_value_f))
     706:	80 91 cc 40 	lds	r24, 0x40CC	; 0x8040cc <tako>
     70a:	90 91 cd 40 	lds	r25, 0x40CD	; 0x8040cd <tako+0x1>
     70e:	fc 01       	movw	r30, r24
     710:	80 81       	ld	r24, Z
     712:	91 81       	ldd	r25, Z+1	; 0x01
     714:	fc 01       	movw	r30, r24
     716:	80 81       	ld	r24, Z
     718:	91 81       	ldd	r25, Z+1	; 0x01
     71a:	21 e0       	ldi	r18, 0x01	; 1
     71c:	89 2b       	or	r24, r25
     71e:	09 f4       	brne	.+2      	; 0x722 <main+0x276>
     720:	20 e0       	ldi	r18, 0x00	; 0
     722:	22 2f       	mov	r18, r18
     724:	30 e0       	ldi	r19, 0x00	; 0
     726:	80 91 cc 40 	lds	r24, 0x40CC	; 0x8040cc <tako>
     72a:	90 91 cd 40 	lds	r25, 0x40CD	; 0x8040cd <tako+0x1>
     72e:	fc 01       	movw	r30, r24
     730:	87 89       	ldd	r24, Z+23	; 0x17
     732:	88 2f       	mov	r24, r24
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	82 23       	and	r24, r18
     738:	93 23       	and	r25, r19
     73a:	21 e0       	ldi	r18, 0x01	; 1
     73c:	89 2b       	or	r24, r25
     73e:	09 f4       	brne	.+2      	; 0x742 <main+0x296>
     740:	20 e0       	ldi	r18, 0x00	; 0
     742:	22 23       	and	r18, r18
     744:	31 f0       	breq	.+12     	; 0x752 <main+0x2a6>
		{
		//	printf("Raw capture fall : %u \n\r", *tako->timer_fall);
			tako->got_value_f=false;
     746:	80 91 cc 40 	lds	r24, 0x40CC	; 0x8040cc <tako>
     74a:	90 91 cd 40 	lds	r25, 0x40CD	; 0x8040cd <tako+0x1>
     74e:	fc 01       	movw	r30, r24
     750:	17 8a       	std	Z+23, r1	; 0x17
		}
		if (counter_printf==0)
     752:	89 81       	ldd	r24, Y+1	; 0x01
     754:	9a 81       	ldd	r25, Y+2	; 0x02
     756:	89 2b       	or	r24, r25
     758:	89 f5       	brne	.+98     	; 0x7bc <main+0x310>
		{
			if (tako->frequency_out<24000000)
     75a:	80 91 cc 40 	lds	r24, 0x40CC	; 0x8040cc <tako>
     75e:	90 91 cd 40 	lds	r25, 0x40CD	; 0x8040cd <tako+0x1>
     762:	fc 01       	movw	r30, r24
     764:	86 8d       	ldd	r24, Z+30	; 0x1e
     766:	97 8d       	ldd	r25, Z+31	; 0x1f
     768:	a0 a1       	ldd	r26, Z+32	; 0x20
     76a:	b1 a1       	ldd	r27, Z+33	; 0x21
     76c:	21 e0       	ldi	r18, 0x01	; 1
     76e:	81 15       	cp	r24, r1
     770:	96 43       	sbci	r25, 0x36	; 54
     772:	ae 46       	sbci	r26, 0x6E	; 110
     774:	b1 40       	sbci	r27, 0x01	; 1
     776:	08 f0       	brcs	.+2      	; 0x77a <main+0x2ce>
     778:	20 e0       	ldi	r18, 0x00	; 0
     77a:	22 23       	and	r18, r18
     77c:	f9 f0       	breq	.+62     	; 0x7bc <main+0x310>
			{
				printf("Last Frequency OUT : %lu \n\r", tako->frequency_out);
     77e:	80 91 cc 40 	lds	r24, 0x40CC	; 0x8040cc <tako>
     782:	90 91 cd 40 	lds	r25, 0x40CD	; 0x8040cd <tako+0x1>
     786:	fc 01       	movw	r30, r24
     788:	86 8d       	ldd	r24, Z+30	; 0x1e
     78a:	97 8d       	ldd	r25, Z+31	; 0x1f
     78c:	a0 a1       	ldd	r26, Z+32	; 0x20
     78e:	b1 a1       	ldd	r27, Z+33	; 0x21
     790:	2b 2f       	mov	r18, r27
     792:	2f 93       	push	r18
     794:	2a 2f       	mov	r18, r26
     796:	2f 93       	push	r18
     798:	29 2f       	mov	r18, r25
     79a:	2f 93       	push	r18
     79c:	8f 93       	push	r24
     79e:	86 e5       	ldi	r24, 0x56	; 86
     7a0:	90 e4       	ldi	r25, 0x40	; 64
     7a2:	89 2f       	mov	r24, r25
     7a4:	8f 93       	push	r24
     7a6:	86 e5       	ldi	r24, 0x56	; 86
     7a8:	90 e4       	ldi	r25, 0x40	; 64
     7aa:	8f 93       	push	r24
     7ac:	0e 94 98 0a 	call	0x1530	; 0x1530 <printf>
     7b0:	0f 90       	pop	r0
     7b2:	0f 90       	pop	r0
     7b4:	0f 90       	pop	r0
     7b6:	0f 90       	pop	r0
     7b8:	0f 90       	pop	r0
     7ba:	0f 90       	pop	r0
			
		} 
		else
		{
		}
		counter_printf++;
     7bc:	89 81       	ldd	r24, Y+1	; 0x01
     7be:	9a 81       	ldd	r25, Y+2	; 0x02
     7c0:	01 96       	adiw	r24, 0x01	; 1
     7c2:	89 83       	std	Y+1, r24	; 0x01
     7c4:	9a 83       	std	Y+2, r25	; 0x02
	post->frequency_array=tako->last_frequency;
	ENABLE_INTERRUPTS();
	//asm("nop");
	printf("hello\n\r");
	/* Replace with your application code */
	while (1) {
     7c6:	c1 ce       	rjmp	.-638    	; 0x54a <main+0x9e>

000007c8 <_Z41__static_initialization_and_destruction_0ii>:
		//post.Check_Command();
		
		
			
	}
}
     7c8:	cf 93       	push	r28
     7ca:	df 93       	push	r29
     7cc:	00 d0       	rcall	.+0      	; 0x7ce <_Z41__static_initialization_and_destruction_0ii+0x6>
     7ce:	00 d0       	rcall	.+0      	; 0x7d0 <_Z41__static_initialization_and_destruction_0ii+0x8>
     7d0:	cd b7       	in	r28, 0x3d	; 61
     7d2:	de b7       	in	r29, 0x3e	; 62
     7d4:	89 83       	std	Y+1, r24	; 0x01
     7d6:	9a 83       	std	Y+2, r25	; 0x02
     7d8:	6b 83       	std	Y+3, r22	; 0x03
     7da:	7c 83       	std	Y+4, r23	; 0x04
     7dc:	89 81       	ldd	r24, Y+1	; 0x01
     7de:	9a 81       	ldd	r25, Y+2	; 0x02
     7e0:	01 97       	sbiw	r24, 0x01	; 1
     7e2:	61 f4       	brne	.+24     	; 0x7fc <_Z41__static_initialization_and_destruction_0ii+0x34>
     7e4:	8b 81       	ldd	r24, Y+3	; 0x03
     7e6:	9c 81       	ldd	r25, Y+4	; 0x04
     7e8:	01 96       	adiw	r24, 0x01	; 1
     7ea:	41 f4       	brne	.+16     	; 0x7fc <_Z41__static_initialization_and_destruction_0ii+0x34>

#include <usart_basic.h>

#include "Zero_Cross_Counter.h"
#include "SPI_SLAVE_CLASS.h"
static Zero_Cross_Counter tako_static;
     7ec:	82 e7       	ldi	r24, 0x72	; 114
     7ee:	90 e4       	ldi	r25, 0x40	; 64
     7f0:	0e 94 35 07 	call	0xe6a	; 0xe6a <_ZN18Zero_Cross_CounterC1Ev>
static SPI_SLAVE_CLASS post_static;
     7f4:	8c e9       	ldi	r24, 0x9C	; 156
     7f6:	90 e4       	ldi	r25, 0x40	; 64
     7f8:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <_ZN15SPI_SLAVE_CLASSC1Ev>
     7fc:	89 81       	ldd	r24, Y+1	; 0x01
     7fe:	9a 81       	ldd	r25, Y+2	; 0x02
     800:	89 2b       	or	r24, r25
     802:	61 f4       	brne	.+24     	; 0x81c <_Z41__static_initialization_and_destruction_0ii+0x54>
     804:	8b 81       	ldd	r24, Y+3	; 0x03
     806:	9c 81       	ldd	r25, Y+4	; 0x04
     808:	01 96       	adiw	r24, 0x01	; 1
     80a:	41 f4       	brne	.+16     	; 0x81c <_Z41__static_initialization_and_destruction_0ii+0x54>
     80c:	8c e9       	ldi	r24, 0x9C	; 156
     80e:	90 e4       	ldi	r25, 0x40	; 64
     810:	0e 94 0e 05 	call	0xa1c	; 0xa1c <_ZN15SPI_SLAVE_CLASSD1Ev>

#include <usart_basic.h>

#include "Zero_Cross_Counter.h"
#include "SPI_SLAVE_CLASS.h"
static Zero_Cross_Counter tako_static;
     814:	82 e7       	ldi	r24, 0x72	; 114
     816:	90 e4       	ldi	r25, 0x40	; 64
     818:	0e 94 6e 07 	call	0xedc	; 0xedc <_ZN18Zero_Cross_CounterD1Ev>
		//post.Check_Command();
		
		
			
	}
}
     81c:	00 00       	nop
     81e:	24 96       	adiw	r28, 0x04	; 4
     820:	cd bf       	out	0x3d, r28	; 61
     822:	de bf       	out	0x3e, r29	; 62
     824:	df 91       	pop	r29
     826:	cf 91       	pop	r28
     828:	08 95       	ret

0000082a <_GLOBAL__sub_I__Z10RTC_enablev>:
     82a:	cf 93       	push	r28
     82c:	df 93       	push	r29
     82e:	cd b7       	in	r28, 0x3d	; 61
     830:	de b7       	in	r29, 0x3e	; 62
     832:	6f ef       	ldi	r22, 0xFF	; 255
     834:	7f ef       	ldi	r23, 0xFF	; 255
     836:	81 e0       	ldi	r24, 0x01	; 1
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <_Z41__static_initialization_and_destruction_0ii>
     83e:	df 91       	pop	r29
     840:	cf 91       	pop	r28
     842:	08 95       	ret

00000844 <_GLOBAL__sub_D__Z10RTC_enablev>:
     844:	cf 93       	push	r28
     846:	df 93       	push	r29
     848:	cd b7       	in	r28, 0x3d	; 61
     84a:	de b7       	in	r29, 0x3e	; 62
     84c:	6f ef       	ldi	r22, 0xFF	; 255
     84e:	7f ef       	ldi	r23, 0xFF	; 255
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <_Z41__static_initialization_and_destruction_0ii>
     858:	df 91       	pop	r29
     85a:	cf 91       	pop	r28
     85c:	08 95       	ret

0000085e <_ZL17SPI_Transfer_Donev>:
}

void SPI_SLAVE_CLASS::Read_Data(){
	 rdata = SPI1.DATA;
	 command=rdata;
}
     85e:	cf 93       	push	r28
     860:	df 93       	push	r29
     862:	cd b7       	in	r28, 0x3d	; 61
     864:	de b7       	in	r29, 0x3e	; 62
     866:	80 91 ca 40 	lds	r24, 0x40CA	; 0x8040ca <post>
     86a:	90 91 cb 40 	lds	r25, 0x40CB	; 0x8040cb <post+0x1>
     86e:	21 e0       	ldi	r18, 0x01	; 1
     870:	fc 01       	movw	r30, r24
     872:	20 83       	st	Z, r18
     874:	80 91 ca 40 	lds	r24, 0x40CA	; 0x8040ca <post>
     878:	90 91 cb 40 	lds	r25, 0x40CB	; 0x8040cb <post+0x1>
     87c:	21 e0       	ldi	r18, 0x01	; 1
     87e:	fc 01       	movw	r30, r24
     880:	26 83       	std	Z+6, r18	; 0x06
     882:	00 00       	nop
     884:	df 91       	pop	r29
     886:	cf 91       	pop	r28
     888:	08 95       	ret

0000088a <__vector_37>:
     88a:	1f 92       	push	r1
     88c:	0f 92       	push	r0
     88e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     892:	0f 92       	push	r0
     894:	11 24       	eor	r1, r1
     896:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     89a:	0f 92       	push	r0
     89c:	2f 93       	push	r18
     89e:	3f 93       	push	r19
     8a0:	4f 93       	push	r20
     8a2:	5f 93       	push	r21
     8a4:	6f 93       	push	r22
     8a6:	7f 93       	push	r23
     8a8:	8f 93       	push	r24
     8aa:	9f 93       	push	r25
     8ac:	af 93       	push	r26
     8ae:	bf 93       	push	r27
     8b0:	ef 93       	push	r30
     8b2:	ff 93       	push	r31
     8b4:	cf 93       	push	r28
     8b6:	df 93       	push	r29
     8b8:	00 d0       	rcall	.+0      	; 0x8ba <__vector_37+0x30>
     8ba:	cd b7       	in	r28, 0x3d	; 61
     8bc:	de b7       	in	r29, 0x3e	; 62
     8be:	80 e6       	ldi	r24, 0x60	; 96
     8c0:	99 e0       	ldi	r25, 0x09	; 9
     8c2:	fc 01       	movw	r30, r24
     8c4:	84 81       	ldd	r24, Z+4	; 0x04
     8c6:	89 83       	std	Y+1, r24	; 0x01
     8c8:	1a 82       	std	Y+2, r1	; 0x02
     8ca:	80 e6       	ldi	r24, 0x60	; 96
     8cc:	99 e0       	ldi	r25, 0x09	; 9
     8ce:	20 e8       	ldi	r18, 0x80	; 128
     8d0:	fc 01       	movw	r30, r24
     8d2:	23 83       	std	Z+3, r18	; 0x03
     8d4:	80 91 ca 40 	lds	r24, 0x40CA	; 0x8040ca <post>
     8d8:	90 91 cb 40 	lds	r25, 0x40CB	; 0x8040cb <post+0x1>
     8dc:	fc 01       	movw	r30, r24
     8de:	86 81       	ldd	r24, Z+6	; 0x06
     8e0:	82 30       	cpi	r24, 0x02	; 2
     8e2:	01 f1       	breq	.+64     	; 0x924 <__vector_37+0x9a>
     8e4:	89 81       	ldd	r24, Y+1	; 0x01
     8e6:	81 30       	cpi	r24, 0x01	; 1
     8e8:	b1 f4       	brne	.+44     	; 0x916 <__vector_37+0x8c>
     8ea:	80 91 ca 40 	lds	r24, 0x40CA	; 0x8040ca <post>
     8ee:	90 91 cb 40 	lds	r25, 0x40CB	; 0x8040cb <post+0x1>
     8f2:	fc 01       	movw	r30, r24
     8f4:	10 82       	st	Z, r1
     8f6:	80 91 ca 40 	lds	r24, 0x40CA	; 0x8040ca <post>
     8fa:	90 91 cb 40 	lds	r25, 0x40CB	; 0x8040cb <post+0x1>
     8fe:	fc 01       	movw	r30, r24
     900:	27 81       	ldd	r18, Z+7	; 0x07
     902:	30 85       	ldd	r19, Z+8	; 0x08
     904:	80 91 ca 40 	lds	r24, 0x40CA	; 0x8040ca <post>
     908:	90 91 cb 40 	lds	r25, 0x40CB	; 0x8040cb <post+0x1>
     90c:	44 e0       	ldi	r20, 0x04	; 4
     90e:	b9 01       	movw	r22, r18
     910:	0e 94 30 05 	call	0xa60	; 0xa60 <_ZN15SPI_SLAVE_CLASS10Write_DataEPhh>
     914:	45 c0       	rjmp	.+138    	; 0x9a0 <__vector_37+0x116>
     916:	80 91 ca 40 	lds	r24, 0x40CA	; 0x8040ca <post>
     91a:	90 91 cb 40 	lds	r25, 0x40CB	; 0x8040cb <post+0x1>
     91e:	fc 01       	movw	r30, r24
     920:	11 82       	std	Z+1, r1	; 0x01
     922:	3e c0       	rjmp	.+124    	; 0x9a0 <__vector_37+0x116>
     924:	80 91 ca 40 	lds	r24, 0x40CA	; 0x8040ca <post>
     928:	90 91 cb 40 	lds	r25, 0x40CB	; 0x8040cb <post+0x1>
     92c:	fc 01       	movw	r30, r24
     92e:	86 81       	ldd	r24, Z+6	; 0x06
     930:	81 30       	cpi	r24, 0x01	; 1
     932:	b1 f1       	breq	.+108    	; 0x9a0 <__vector_37+0x116>
     934:	80 91 ca 40 	lds	r24, 0x40CA	; 0x8040ca <post>
     938:	90 91 cb 40 	lds	r25, 0x40CB	; 0x8040cb <post+0x1>
     93c:	fc 01       	movw	r30, r24
     93e:	23 81       	ldd	r18, Z+3	; 0x03
     940:	34 81       	ldd	r19, Z+4	; 0x04
     942:	2f 5f       	subi	r18, 0xFF	; 255
     944:	3f 4f       	sbci	r19, 0xFF	; 255
     946:	fc 01       	movw	r30, r24
     948:	23 83       	std	Z+3, r18	; 0x03
     94a:	34 83       	std	Z+4, r19	; 0x04
     94c:	80 91 ca 40 	lds	r24, 0x40CA	; 0x8040ca <post>
     950:	90 91 cb 40 	lds	r25, 0x40CB	; 0x8040cb <post+0x1>
     954:	fc 01       	movw	r30, r24
     956:	83 81       	ldd	r24, Z+3	; 0x03
     958:	94 81       	ldd	r25, Z+4	; 0x04
     95a:	fc 01       	movw	r30, r24
     95c:	80 81       	ld	r24, Z
     95e:	8a 83       	std	Y+2, r24	; 0x02
     960:	80 91 ca 40 	lds	r24, 0x40CA	; 0x8040ca <post>
     964:	90 91 cb 40 	lds	r25, 0x40CB	; 0x8040cb <post+0x1>
     968:	fc 01       	movw	r30, r24
     96a:	25 81       	ldd	r18, Z+5	; 0x05
     96c:	21 50       	subi	r18, 0x01	; 1
     96e:	fc 01       	movw	r30, r24
     970:	25 83       	std	Z+5, r18	; 0x05
     972:	80 91 ca 40 	lds	r24, 0x40CA	; 0x8040ca <post>
     976:	90 91 cb 40 	lds	r25, 0x40CB	; 0x8040cb <post+0x1>
     97a:	fc 01       	movw	r30, r24
     97c:	85 81       	ldd	r24, Z+5	; 0x05
     97e:	88 23       	and	r24, r24
     980:	31 f0       	breq	.+12     	; 0x98e <__vector_37+0x104>
     982:	80 e6       	ldi	r24, 0x60	; 96
     984:	99 e0       	ldi	r25, 0x09	; 9
     986:	2a 81       	ldd	r18, Y+2	; 0x02
     988:	fc 01       	movw	r30, r24
     98a:	24 83       	std	Z+4, r18	; 0x04
     98c:	09 c0       	rjmp	.+18     	; 0x9a0 <__vector_37+0x116>
     98e:	80 91 ca 40 	lds	r24, 0x40CA	; 0x8040ca <post>
     992:	90 91 cb 40 	lds	r25, 0x40CB	; 0x8040cb <post+0x1>
     996:	23 e0       	ldi	r18, 0x03	; 3
     998:	fc 01       	movw	r30, r24
     99a:	22 83       	std	Z+2, r18	; 0x02
     99c:	0e 94 2f 04 	call	0x85e	; 0x85e <_ZL17SPI_Transfer_Donev>
     9a0:	00 00       	nop
     9a2:	0f 90       	pop	r0
     9a4:	0f 90       	pop	r0
     9a6:	df 91       	pop	r29
     9a8:	cf 91       	pop	r28
     9aa:	ff 91       	pop	r31
     9ac:	ef 91       	pop	r30
     9ae:	bf 91       	pop	r27
     9b0:	af 91       	pop	r26
     9b2:	9f 91       	pop	r25
     9b4:	8f 91       	pop	r24
     9b6:	7f 91       	pop	r23
     9b8:	6f 91       	pop	r22
     9ba:	5f 91       	pop	r21
     9bc:	4f 91       	pop	r20
     9be:	3f 91       	pop	r19
     9c0:	2f 91       	pop	r18
     9c2:	0f 90       	pop	r0
     9c4:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     9c8:	0f 90       	pop	r0
     9ca:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     9ce:	0f 90       	pop	r0
     9d0:	1f 90       	pop	r1
     9d2:	18 95       	reti

000009d4 <_ZN15SPI_SLAVE_CLASSC1Ev>:
     9d4:	cf 93       	push	r28
     9d6:	df 93       	push	r29
     9d8:	00 d0       	rcall	.+0      	; 0x9da <_ZN15SPI_SLAVE_CLASSC1Ev+0x6>
     9da:	cd b7       	in	r28, 0x3d	; 61
     9dc:	de b7       	in	r29, 0x3e	; 62
     9de:	89 83       	std	Y+1, r24	; 0x01
     9e0:	9a 83       	std	Y+2, r25	; 0x02
     9e2:	89 81       	ldd	r24, Y+1	; 0x01
     9e4:	9a 81       	ldd	r25, Y+2	; 0x02
     9e6:	fc 01       	movw	r30, r24
     9e8:	10 82       	st	Z, r1
     9ea:	89 81       	ldd	r24, Y+1	; 0x01
     9ec:	9a 81       	ldd	r25, Y+2	; 0x02
     9ee:	2a eb       	ldi	r18, 0xBA	; 186
     9f0:	30 e4       	ldi	r19, 0x40	; 64
     9f2:	fc 01       	movw	r30, r24
     9f4:	21 87       	std	Z+9, r18	; 0x09
     9f6:	32 87       	std	Z+10, r19	; 0x0a
     9f8:	89 81       	ldd	r24, Y+1	; 0x01
     9fa:	9a 81       	ldd	r25, Y+2	; 0x02
     9fc:	2a ea       	ldi	r18, 0xAA	; 170
     9fe:	30 e4       	ldi	r19, 0x40	; 64
     a00:	fc 01       	movw	r30, r24
     a02:	23 87       	std	Z+11, r18	; 0x0b
     a04:	34 87       	std	Z+12, r19	; 0x0c
     a06:	89 81       	ldd	r24, Y+1	; 0x01
     a08:	9a 81       	ldd	r25, Y+2	; 0x02
     a0a:	21 e0       	ldi	r18, 0x01	; 1
     a0c:	fc 01       	movw	r30, r24
     a0e:	26 83       	std	Z+6, r18	; 0x06
     a10:	00 00       	nop
     a12:	0f 90       	pop	r0
     a14:	0f 90       	pop	r0
     a16:	df 91       	pop	r29
     a18:	cf 91       	pop	r28
     a1a:	08 95       	ret

00000a1c <_ZN15SPI_SLAVE_CLASSD1Ev>:
     a1c:	cf 93       	push	r28
     a1e:	df 93       	push	r29
     a20:	00 d0       	rcall	.+0      	; 0xa22 <_ZN15SPI_SLAVE_CLASSD1Ev+0x6>
     a22:	cd b7       	in	r28, 0x3d	; 61
     a24:	de b7       	in	r29, 0x3e	; 62
     a26:	89 83       	std	Y+1, r24	; 0x01
     a28:	9a 83       	std	Y+2, r25	; 0x02
     a2a:	00 00       	nop
     a2c:	0f 90       	pop	r0
     a2e:	0f 90       	pop	r0
     a30:	df 91       	pop	r29
     a32:	cf 91       	pop	r28
     a34:	08 95       	ret

00000a36 <_ZN15SPI_SLAVE_CLASS4InitEv>:
     a36:	cf 93       	push	r28
     a38:	df 93       	push	r29
     a3a:	00 d0       	rcall	.+0      	; 0xa3c <_ZN15SPI_SLAVE_CLASS4InitEv+0x6>
     a3c:	cd b7       	in	r28, 0x3d	; 61
     a3e:	de b7       	in	r29, 0x3e	; 62
     a40:	89 83       	std	Y+1, r24	; 0x01
     a42:	9a 83       	std	Y+2, r25	; 0x02
     a44:	89 81       	ldd	r24, Y+1	; 0x01
     a46:	9a 81       	ldd	r25, Y+2	; 0x02
     a48:	0e 94 68 05 	call	0xad0	; 0xad0 <_ZN15SPI_SLAVE_CLASS12SPI_ZCD_initEv>
     a4c:	89 81       	ldd	r24, Y+1	; 0x01
     a4e:	9a 81       	ldd	r25, Y+2	; 0x02
     a50:	0e 94 86 05 	call	0xb0c	; 0xb0c <_ZN15SPI_SLAVE_CLASS14SPI_ZCD_enableEv>
     a54:	00 00       	nop
     a56:	0f 90       	pop	r0
     a58:	0f 90       	pop	r0
     a5a:	df 91       	pop	r29
     a5c:	cf 91       	pop	r28
     a5e:	08 95       	ret

00000a60 <_ZN15SPI_SLAVE_CLASS10Write_DataEPhh>:

void SPI_SLAVE_CLASS::Write_Data(uint8_t *block, uint8_t sz){
     a60:	cf 93       	push	r28
     a62:	df 93       	push	r29
     a64:	cd b7       	in	r28, 0x3d	; 61
     a66:	de b7       	in	r29, 0x3e	; 62
     a68:	25 97       	sbiw	r28, 0x05	; 5
     a6a:	cd bf       	out	0x3d, r28	; 61
     a6c:	de bf       	out	0x3e, r29	; 62
     a6e:	89 83       	std	Y+1, r24	; 0x01
     a70:	9a 83       	std	Y+2, r25	; 0x02
     a72:	6b 83       	std	Y+3, r22	; 0x03
     a74:	7c 83       	std	Y+4, r23	; 0x04
     a76:	4d 83       	std	Y+5, r20	; 0x05
	if (block!=NULL)
     a78:	8b 81       	ldd	r24, Y+3	; 0x03
     a7a:	9c 81       	ldd	r25, Y+4	; 0x04
     a7c:	89 2b       	or	r24, r25
     a7e:	09 f1       	breq	.+66     	; 0xac2 <_ZN15SPI_SLAVE_CLASS10Write_DataEPhh+0x62>
	{
		data  = (uint8_t *)block;
     a80:	89 81       	ldd	r24, Y+1	; 0x01
     a82:	9a 81       	ldd	r25, Y+2	; 0x02
     a84:	2b 81       	ldd	r18, Y+3	; 0x03
     a86:	3c 81       	ldd	r19, Y+4	; 0x04
     a88:	fc 01       	movw	r30, r24
     a8a:	23 83       	std	Z+3, r18	; 0x03
     a8c:	34 83       	std	Z+4, r19	; 0x04
		size_message   = sz;
     a8e:	89 81       	ldd	r24, Y+1	; 0x01
     a90:	9a 81       	ldd	r25, Y+2	; 0x02
     a92:	2d 81       	ldd	r18, Y+5	; 0x05
     a94:	fc 01       	movw	r30, r24
     a96:	25 83       	std	Z+5, r18	; 0x05
		type   = SPI_WRITE;
     a98:	89 81       	ldd	r24, Y+1	; 0x01
     a9a:	9a 81       	ldd	r25, Y+2	; 0x02
     a9c:	22 e0       	ldi	r18, 0x02	; 2
     a9e:	fc 01       	movw	r30, r24
     aa0:	26 83       	std	Z+6, r18	; 0x06
		status = SPI_BUSY;
     aa2:	89 81       	ldd	r24, Y+1	; 0x01
     aa4:	9a 81       	ldd	r25, Y+2	; 0x02
     aa6:	22 e0       	ldi	r18, 0x02	; 2
     aa8:	fc 01       	movw	r30, r24
     aaa:	22 83       	std	Z+2, r18	; 0x02

		SPI1.DATA = *data;
     aac:	80 e6       	ldi	r24, 0x60	; 96
     aae:	99 e0       	ldi	r25, 0x09	; 9
     ab0:	29 81       	ldd	r18, Y+1	; 0x01
     ab2:	3a 81       	ldd	r19, Y+2	; 0x02
     ab4:	f9 01       	movw	r30, r18
     ab6:	23 81       	ldd	r18, Z+3	; 0x03
     ab8:	34 81       	ldd	r19, Z+4	; 0x04
     aba:	f9 01       	movw	r30, r18
     abc:	20 81       	ld	r18, Z
     abe:	fc 01       	movw	r30, r24
     ac0:	24 83       	std	Z+4, r18	; 0x04
	}
	
}
     ac2:	00 00       	nop
     ac4:	25 96       	adiw	r28, 0x05	; 5
     ac6:	cd bf       	out	0x3d, r28	; 61
     ac8:	de bf       	out	0x3e, r29	; 62
     aca:	df 91       	pop	r29
     acc:	cf 91       	pop	r28
     ace:	08 95       	ret

00000ad0 <_ZN15SPI_SLAVE_CLASS12SPI_ZCD_initEv>:

void SPI_SLAVE_CLASS::SPI_ZCD_init()
{
     ad0:	cf 93       	push	r28
     ad2:	df 93       	push	r29
     ad4:	00 d0       	rcall	.+0      	; 0xad6 <_ZN15SPI_SLAVE_CLASS12SPI_ZCD_initEv+0x6>
     ad6:	cd b7       	in	r28, 0x3d	; 61
     ad8:	de b7       	in	r29, 0x3e	; 62
     ada:	89 83       	std	Y+1, r24	; 0x01
     adc:	9a 83       	std	Y+2, r25	; 0x02

	SPI1.CTRLA = 0 << SPI_CLK2X_bp    /* Enable Double Speed: disabled */
     ade:	80 e6       	ldi	r24, 0x60	; 96
     ae0:	99 e0       	ldi	r25, 0x09	; 9
	| 0 << SPI_DORD_bp   /* Data Order Setting: disabled */
	| 0 << SPI_ENABLE_bp /* Enable Module: enabled */
	| 0 << SPI_MASTER_bp /* SPI module in slave mode */
	| SPI_PRESC_DIV4_gc; /* System Clock / 4 */
     ae2:	fc 01       	movw	r30, r24
     ae4:	10 82       	st	Z, r1

	 SPI1.CTRLB = 0 << SPI_BUFEN_bp /* Buffer Mode Enable: disabled */
     ae6:	80 e6       	ldi	r24, 0x60	; 96
     ae8:	99 e0       	ldi	r25, 0x09	; 9
			 | 0 << SPI_BUFWR_bp /* Buffer Write Mode: disabled */
			 | SPI_MODE_0_gc /* SPI Mode 0 */
			 | 0 << SPI_SSD_bp; /* Slave Select Disable: disabled */
     aea:	fc 01       	movw	r30, r24
     aec:	11 82       	std	Z+1, r1	; 0x01

	SPI1.INTCTRL = 0 << SPI_DREIE_bp    /* Data Register Empty Interrupt Enable: enabled */
     aee:	80 e6       	ldi	r24, 0x60	; 96
     af0:	99 e0       	ldi	r25, 0x09	; 9
	| 1 << SPI_IE_bp     /* Interrupt Enable: enabled */
	| 0 << SPI_RXCIE_bp  /* Receive Complete Interrupt Enable: enabled */
	| 0 << SPI_SSIE_bp   /* Slave Select Trigger Interrupt Enable: disabled */
	| 0 << SPI_TXCIE_bp; /* Transfer Complete Interrupt Enable: enabled */
     af2:	21 e0       	ldi	r18, 0x01	; 1
     af4:	fc 01       	movw	r30, r24
     af6:	22 83       	std	Z+2, r18	; 0x02

	status = SPI_FREE;
     af8:	89 81       	ldd	r24, Y+1	; 0x01
     afa:	9a 81       	ldd	r25, Y+2	; 0x02
     afc:	fc 01       	movw	r30, r24
     afe:	12 82       	std	Z+2, r1	; 0x02
}
     b00:	00 00       	nop
     b02:	0f 90       	pop	r0
     b04:	0f 90       	pop	r0
     b06:	df 91       	pop	r29
     b08:	cf 91       	pop	r28
     b0a:	08 95       	ret

00000b0c <_ZN15SPI_SLAVE_CLASS14SPI_ZCD_enableEv>:
 * 2. Enables the SPI module by setting the enable-bit in the SPI control register
 *
 * \return Nothing
 */
void SPI_SLAVE_CLASS::SPI_ZCD_enable()
{
     b0c:	cf 93       	push	r28
     b0e:	df 93       	push	r29
     b10:	00 d0       	rcall	.+0      	; 0xb12 <_ZN15SPI_SLAVE_CLASS14SPI_ZCD_enableEv+0x6>
     b12:	cd b7       	in	r28, 0x3d	; 61
     b14:	de b7       	in	r29, 0x3e	; 62
     b16:	89 83       	std	Y+1, r24	; 0x01
     b18:	9a 83       	std	Y+2, r25	; 0x02
	SPI1.CTRLA |= SPI_ENABLE_bm;
     b1a:	80 e6       	ldi	r24, 0x60	; 96
     b1c:	99 e0       	ldi	r25, 0x09	; 9
     b1e:	20 e6       	ldi	r18, 0x60	; 96
     b20:	39 e0       	ldi	r19, 0x09	; 9
     b22:	f9 01       	movw	r30, r18
     b24:	20 81       	ld	r18, Z
     b26:	21 60       	ori	r18, 0x01	; 1
     b28:	fc 01       	movw	r30, r24
     b2a:	20 83       	st	Z, r18
}
     b2c:	00 00       	nop
     b2e:	0f 90       	pop	r0
     b30:	0f 90       	pop	r0
     b32:	df 91       	pop	r29
     b34:	cf 91       	pop	r28
     b36:	08 95       	ret

00000b38 <__vector_28>:
		local_value=(lf>>((3-i)*8))&0xff;
		last_frequency[i]=((uint8_t)local_value&0xff);
	}
	//memcpy((void*)last_frequency,(void*)&lf,4);
	
}
     b38:	1f 92       	push	r1
     b3a:	0f 92       	push	r0
     b3c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     b40:	0f 92       	push	r0
     b42:	11 24       	eor	r1, r1
     b44:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     b48:	0f 92       	push	r0
     b4a:	2f 93       	push	r18
     b4c:	8f 93       	push	r24
     b4e:	9f 93       	push	r25
     b50:	ef 93       	push	r30
     b52:	ff 93       	push	r31
     b54:	cf 93       	push	r28
     b56:	df 93       	push	r29
     b58:	cd b7       	in	r28, 0x3d	; 61
     b5a:	de b7       	in	r29, 0x3e	; 62
     b5c:	80 91 cc 40 	lds	r24, 0x40CC	; 0x8040cc <tako>
     b60:	90 91 cd 40 	lds	r25, 0x40CD	; 0x8040cd <tako+0x1>
     b64:	21 e0       	ldi	r18, 0x01	; 1
     b66:	fc 01       	movw	r30, r24
     b68:	23 8b       	std	Z+19, r18	; 0x13
     b6a:	80 91 cc 40 	lds	r24, 0x40CC	; 0x8040cc <tako>
     b6e:	90 91 cd 40 	lds	r25, 0x40CD	; 0x8040cd <tako+0x1>
     b72:	fc 01       	movw	r30, r24
     b74:	15 8a       	std	Z+21, r1	; 0x15
     b76:	80 ec       	ldi	r24, 0xC0	; 192
     b78:	96 e0       	ldi	r25, 0x06	; 6
     b7a:	21 e0       	ldi	r18, 0x01	; 1
     b7c:	fc 01       	movw	r30, r24
     b7e:	23 83       	std	Z+3, r18	; 0x03
     b80:	00 00       	nop
     b82:	df 91       	pop	r29
     b84:	cf 91       	pop	r28
     b86:	ff 91       	pop	r31
     b88:	ef 91       	pop	r30
     b8a:	9f 91       	pop	r25
     b8c:	8f 91       	pop	r24
     b8e:	2f 91       	pop	r18
     b90:	0f 90       	pop	r0
     b92:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     b96:	0f 90       	pop	r0
     b98:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     b9c:	0f 90       	pop	r0
     b9e:	1f 90       	pop	r1
     ba0:	18 95       	reti

00000ba2 <__vector_52>:
     ba2:	1f 92       	push	r1
     ba4:	0f 92       	push	r0
     ba6:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     baa:	0f 92       	push	r0
     bac:	11 24       	eor	r1, r1
     bae:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     bb2:	0f 92       	push	r0
     bb4:	2f 93       	push	r18
     bb6:	8f 93       	push	r24
     bb8:	9f 93       	push	r25
     bba:	ef 93       	push	r30
     bbc:	ff 93       	push	r31
     bbe:	cf 93       	push	r28
     bc0:	df 93       	push	r29
     bc2:	cd b7       	in	r28, 0x3d	; 61
     bc4:	de b7       	in	r29, 0x3e	; 62
     bc6:	80 91 cc 40 	lds	r24, 0x40CC	; 0x8040cc <tako>
     bca:	90 91 cd 40 	lds	r25, 0x40CD	; 0x8040cd <tako+0x1>
     bce:	21 e0       	ldi	r18, 0x01	; 1
     bd0:	fc 01       	movw	r30, r24
     bd2:	25 8b       	std	Z+21, r18	; 0x15
     bd4:	80 91 cc 40 	lds	r24, 0x40CC	; 0x8040cc <tako>
     bd8:	90 91 cd 40 	lds	r25, 0x40CD	; 0x8040cd <tako+0x1>
     bdc:	fc 01       	movw	r30, r24
     bde:	13 8a       	std	Z+19, r1	; 0x13
     be0:	88 ec       	ldi	r24, 0xC8	; 200
     be2:	96 e0       	ldi	r25, 0x06	; 6
     be4:	21 e0       	ldi	r18, 0x01	; 1
     be6:	fc 01       	movw	r30, r24
     be8:	23 83       	std	Z+3, r18	; 0x03
     bea:	00 00       	nop
     bec:	df 91       	pop	r29
     bee:	cf 91       	pop	r28
     bf0:	ff 91       	pop	r31
     bf2:	ef 91       	pop	r30
     bf4:	9f 91       	pop	r25
     bf6:	8f 91       	pop	r24
     bf8:	2f 91       	pop	r18
     bfa:	0f 90       	pop	r0
     bfc:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     c00:	0f 90       	pop	r0
     c02:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     c06:	0f 90       	pop	r0
     c08:	1f 90       	pop	r1
     c0a:	18 95       	reti

00000c0c <__vector_14>:
     c0c:	1f 92       	push	r1
     c0e:	0f 92       	push	r0
     c10:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     c14:	0f 92       	push	r0
     c16:	11 24       	eor	r1, r1
     c18:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     c1c:	0f 92       	push	r0
     c1e:	2f 93       	push	r18
     c20:	3f 93       	push	r19
     c22:	4f 93       	push	r20
     c24:	5f 93       	push	r21
     c26:	6f 93       	push	r22
     c28:	7f 93       	push	r23
     c2a:	8f 93       	push	r24
     c2c:	9f 93       	push	r25
     c2e:	af 93       	push	r26
     c30:	bf 93       	push	r27
     c32:	ef 93       	push	r30
     c34:	ff 93       	push	r31
     c36:	cf 93       	push	r28
     c38:	df 93       	push	r29
     c3a:	cd b7       	in	r28, 0x3d	; 61
     c3c:	de b7       	in	r29, 0x3e	; 62
     c3e:	80 e0       	ldi	r24, 0x00	; 0
     c40:	9b e0       	ldi	r25, 0x0B	; 11
     c42:	fc 01       	movw	r30, r24
     c44:	82 85       	ldd	r24, Z+10	; 0x0a
     c46:	93 85       	ldd	r25, Z+11	; 0x0b
     c48:	80 93 ce 40 	sts	0x40CE, r24	; 0x8040ce <_ZL27capture_static_value_rising>
     c4c:	90 93 cf 40 	sts	0x40CF, r25	; 0x8040cf <_ZL27capture_static_value_rising+0x1>
     c50:	80 91 ce 40 	lds	r24, 0x40CE	; 0x8040ce <_ZL27capture_static_value_rising>
     c54:	90 91 cf 40 	lds	r25, 0x40CF	; 0x8040cf <_ZL27capture_static_value_rising+0x1>
     c58:	89 2b       	or	r24, r25
     c5a:	e1 f0       	breq	.+56     	; 0xc94 <__vector_14+0x88>
     c5c:	80 91 cc 40 	lds	r24, 0x40CC	; 0x8040cc <tako>
     c60:	90 91 cd 40 	lds	r25, 0x40CD	; 0x8040cd <tako+0x1>
     c64:	fc 01       	movw	r30, r24
     c66:	85 89       	ldd	r24, Z+21	; 0x15
     c68:	88 23       	and	r24, r24
     c6a:	71 f0       	breq	.+28     	; 0xc88 <__vector_14+0x7c>
     c6c:	80 91 cc 40 	lds	r24, 0x40CC	; 0x8040cc <tako>
     c70:	90 91 cd 40 	lds	r25, 0x40CD	; 0x8040cd <tako+0x1>
     c74:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <_ZN18Zero_Cross_Counter22CaptureCounterB_RisingEv>
     c78:	80 91 cc 40 	lds	r24, 0x40CC	; 0x8040cc <tako>
     c7c:	90 91 cd 40 	lds	r25, 0x40CD	; 0x8040cd <tako+0x1>
     c80:	21 e0       	ldi	r18, 0x01	; 1
     c82:	fc 01       	movw	r30, r24
     c84:	22 a3       	std	Z+34, r18	; 0x22
     c86:	06 c0       	rjmp	.+12     	; 0xc94 <__vector_14+0x88>
     c88:	80 91 cc 40 	lds	r24, 0x40CC	; 0x8040cc <tako>
     c8c:	90 91 cd 40 	lds	r25, 0x40CD	; 0x8040cd <tako+0x1>
     c90:	fc 01       	movw	r30, r24
     c92:	12 a2       	std	Z+34, r1	; 0x22
     c94:	80 91 cc 40 	lds	r24, 0x40CC	; 0x8040cc <tako>
     c98:	90 91 cd 40 	lds	r25, 0x40CD	; 0x8040cd <tako+0x1>
     c9c:	21 e0       	ldi	r18, 0x01	; 1
     c9e:	fc 01       	movw	r30, r24
     ca0:	26 8b       	std	Z+22, r18	; 0x16
     ca2:	80 91 cc 40 	lds	r24, 0x40CC	; 0x8040cc <tako>
     ca6:	90 91 cd 40 	lds	r25, 0x40CD	; 0x8040cd <tako+0x1>
     caa:	21 e0       	ldi	r18, 0x01	; 1
     cac:	fc 01       	movw	r30, r24
     cae:	23 8b       	std	Z+19, r18	; 0x13
     cb0:	80 91 cc 40 	lds	r24, 0x40CC	; 0x8040cc <tako>
     cb4:	90 91 cd 40 	lds	r25, 0x40CD	; 0x8040cd <tako+0x1>
     cb8:	fc 01       	movw	r30, r24
     cba:	15 8a       	std	Z+21, r1	; 0x15
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	9b e0       	ldi	r25, 0x0B	; 11
     cc0:	21 e0       	ldi	r18, 0x01	; 1
     cc2:	fc 01       	movw	r30, r24
     cc4:	26 83       	std	Z+6, r18	; 0x06
     cc6:	00 00       	nop
     cc8:	df 91       	pop	r29
     cca:	cf 91       	pop	r28
     ccc:	ff 91       	pop	r31
     cce:	ef 91       	pop	r30
     cd0:	bf 91       	pop	r27
     cd2:	af 91       	pop	r26
     cd4:	9f 91       	pop	r25
     cd6:	8f 91       	pop	r24
     cd8:	7f 91       	pop	r23
     cda:	6f 91       	pop	r22
     cdc:	5f 91       	pop	r21
     cde:	4f 91       	pop	r20
     ce0:	3f 91       	pop	r19
     ce2:	2f 91       	pop	r18
     ce4:	0f 90       	pop	r0
     ce6:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     cea:	0f 90       	pop	r0
     cec:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     cf0:	0f 90       	pop	r0
     cf2:	1f 90       	pop	r1
     cf4:	18 95       	reti

00000cf6 <__vector_15>:
     cf6:	1f 92       	push	r1
     cf8:	0f 92       	push	r0
     cfa:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     cfe:	0f 92       	push	r0
     d00:	11 24       	eor	r1, r1
     d02:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     d06:	0f 92       	push	r0
     d08:	2f 93       	push	r18
     d0a:	3f 93       	push	r19
     d0c:	4f 93       	push	r20
     d0e:	5f 93       	push	r21
     d10:	6f 93       	push	r22
     d12:	7f 93       	push	r23
     d14:	8f 93       	push	r24
     d16:	9f 93       	push	r25
     d18:	af 93       	push	r26
     d1a:	bf 93       	push	r27
     d1c:	ef 93       	push	r30
     d1e:	ff 93       	push	r31
     d20:	cf 93       	push	r28
     d22:	df 93       	push	r29
     d24:	cd b7       	in	r28, 0x3d	; 61
     d26:	de b7       	in	r29, 0x3e	; 62
     d28:	80 e1       	ldi	r24, 0x10	; 16
     d2a:	9b e0       	ldi	r25, 0x0B	; 11
     d2c:	fc 01       	movw	r30, r24
     d2e:	82 85       	ldd	r24, Z+10	; 0x0a
     d30:	93 85       	ldd	r25, Z+11	; 0x0b
     d32:	80 93 d0 40 	sts	0x40D0, r24	; 0x8040d0 <_ZL28capture_static_value_falling>
     d36:	90 93 d1 40 	sts	0x40D1, r25	; 0x8040d1 <_ZL28capture_static_value_falling+0x1>
     d3a:	80 91 d0 40 	lds	r24, 0x40D0	; 0x8040d0 <_ZL28capture_static_value_falling>
     d3e:	90 91 d1 40 	lds	r25, 0x40D1	; 0x8040d1 <_ZL28capture_static_value_falling+0x1>
     d42:	89 2b       	or	r24, r25
     d44:	e1 f0       	breq	.+56     	; 0xd7e <__vector_15+0x88>
     d46:	80 91 cc 40 	lds	r24, 0x40CC	; 0x8040cc <tako>
     d4a:	90 91 cd 40 	lds	r25, 0x40CD	; 0x8040cd <tako+0x1>
     d4e:	fc 01       	movw	r30, r24
     d50:	83 89       	ldd	r24, Z+19	; 0x13
     d52:	88 23       	and	r24, r24
     d54:	71 f0       	breq	.+28     	; 0xd72 <__vector_15+0x7c>
     d56:	80 91 cc 40 	lds	r24, 0x40CC	; 0x8040cc <tako>
     d5a:	90 91 cd 40 	lds	r25, 0x40CD	; 0x8040cd <tako+0x1>
     d5e:	0e 94 fa 07 	call	0xff4	; 0xff4 <_ZN18Zero_Cross_Counter23CaptureCounterB_FallingEv>
     d62:	80 91 cc 40 	lds	r24, 0x40CC	; 0x8040cc <tako>
     d66:	90 91 cd 40 	lds	r25, 0x40CD	; 0x8040cd <tako+0x1>
     d6a:	21 e0       	ldi	r18, 0x01	; 1
     d6c:	fc 01       	movw	r30, r24
     d6e:	22 a3       	std	Z+34, r18	; 0x22
     d70:	06 c0       	rjmp	.+12     	; 0xd7e <__vector_15+0x88>
     d72:	80 91 cc 40 	lds	r24, 0x40CC	; 0x8040cc <tako>
     d76:	90 91 cd 40 	lds	r25, 0x40CD	; 0x8040cd <tako+0x1>
     d7a:	fc 01       	movw	r30, r24
     d7c:	12 a2       	std	Z+34, r1	; 0x22
     d7e:	80 91 cc 40 	lds	r24, 0x40CC	; 0x8040cc <tako>
     d82:	90 91 cd 40 	lds	r25, 0x40CD	; 0x8040cd <tako+0x1>
     d86:	21 e0       	ldi	r18, 0x01	; 1
     d88:	fc 01       	movw	r30, r24
     d8a:	27 8b       	std	Z+23, r18	; 0x17
     d8c:	80 91 cc 40 	lds	r24, 0x40CC	; 0x8040cc <tako>
     d90:	90 91 cd 40 	lds	r25, 0x40CD	; 0x8040cd <tako+0x1>
     d94:	21 e0       	ldi	r18, 0x01	; 1
     d96:	fc 01       	movw	r30, r24
     d98:	25 8b       	std	Z+21, r18	; 0x15
     d9a:	80 91 cc 40 	lds	r24, 0x40CC	; 0x8040cc <tako>
     d9e:	90 91 cd 40 	lds	r25, 0x40CD	; 0x8040cd <tako+0x1>
     da2:	fc 01       	movw	r30, r24
     da4:	13 8a       	std	Z+19, r1	; 0x13
     da6:	80 e1       	ldi	r24, 0x10	; 16
     da8:	9b e0       	ldi	r25, 0x0B	; 11
     daa:	21 e0       	ldi	r18, 0x01	; 1
     dac:	fc 01       	movw	r30, r24
     dae:	26 83       	std	Z+6, r18	; 0x06
     db0:	00 00       	nop
     db2:	df 91       	pop	r29
     db4:	cf 91       	pop	r28
     db6:	ff 91       	pop	r31
     db8:	ef 91       	pop	r30
     dba:	bf 91       	pop	r27
     dbc:	af 91       	pop	r26
     dbe:	9f 91       	pop	r25
     dc0:	8f 91       	pop	r24
     dc2:	7f 91       	pop	r23
     dc4:	6f 91       	pop	r22
     dc6:	5f 91       	pop	r21
     dc8:	4f 91       	pop	r20
     dca:	3f 91       	pop	r19
     dcc:	2f 91       	pop	r18
     dce:	0f 90       	pop	r0
     dd0:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     dd4:	0f 90       	pop	r0
     dd6:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     dda:	0f 90       	pop	r0
     ddc:	1f 90       	pop	r1
     dde:	18 95       	reti

00000de0 <__vector_17>:
     de0:	1f 92       	push	r1
     de2:	0f 92       	push	r0
     de4:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     de8:	0f 92       	push	r0
     dea:	11 24       	eor	r1, r1
     dec:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     df0:	0f 92       	push	r0
     df2:	2f 93       	push	r18
     df4:	3f 93       	push	r19
     df6:	4f 93       	push	r20
     df8:	5f 93       	push	r21
     dfa:	6f 93       	push	r22
     dfc:	7f 93       	push	r23
     dfe:	8f 93       	push	r24
     e00:	9f 93       	push	r25
     e02:	af 93       	push	r26
     e04:	bf 93       	push	r27
     e06:	ef 93       	push	r30
     e08:	ff 93       	push	r31
     e0a:	cf 93       	push	r28
     e0c:	df 93       	push	r29
     e0e:	cd b7       	in	r28, 0x3d	; 61
     e10:	de b7       	in	r29, 0x3e	; 62
     e12:	82 ea       	ldi	r24, 0xA2	; 162
     e14:	9b e0       	ldi	r25, 0x0B	; 11
     e16:	fc 01       	movw	r30, r24
     e18:	80 81       	ld	r24, Z
     e1a:	91 81       	ldd	r25, Z+1	; 0x01
     e1c:	80 93 d2 40 	sts	0x40D2, r24	; 0x8040d2 <_ZL18capture_value_tc_a>
     e20:	90 93 d3 40 	sts	0x40D3, r25	; 0x8040d3 <_ZL18capture_value_tc_a+0x1>
     e24:	80 91 cc 40 	lds	r24, 0x40CC	; 0x8040cc <tako>
     e28:	90 91 cd 40 	lds	r25, 0x40CD	; 0x8040cd <tako+0x1>
     e2c:	0e 94 8c 07 	call	0xf18	; 0xf18 <_ZN18Zero_Cross_Counter15CaptureCounterCEv>
     e30:	80 e8       	ldi	r24, 0x80	; 128
     e32:	9b e0       	ldi	r25, 0x0B	; 11
     e34:	2c e0       	ldi	r18, 0x0C	; 12
     e36:	fc 01       	movw	r30, r24
     e38:	25 87       	std	Z+13, r18	; 0x0d
     e3a:	00 00       	nop
     e3c:	df 91       	pop	r29
     e3e:	cf 91       	pop	r28
     e40:	ff 91       	pop	r31
     e42:	ef 91       	pop	r30
     e44:	bf 91       	pop	r27
     e46:	af 91       	pop	r26
     e48:	9f 91       	pop	r25
     e4a:	8f 91       	pop	r24
     e4c:	7f 91       	pop	r23
     e4e:	6f 91       	pop	r22
     e50:	5f 91       	pop	r21
     e52:	4f 91       	pop	r20
     e54:	3f 91       	pop	r19
     e56:	2f 91       	pop	r18
     e58:	0f 90       	pop	r0
     e5a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     e5e:	0f 90       	pop	r0
     e60:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     e64:	0f 90       	pop	r0
     e66:	1f 90       	pop	r1
     e68:	18 95       	reti

00000e6a <_ZN18Zero_Cross_CounterC1Ev>:
     e6a:	cf 93       	push	r28
     e6c:	df 93       	push	r29
     e6e:	00 d0       	rcall	.+0      	; 0xe70 <_ZN18Zero_Cross_CounterC1Ev+0x6>
     e70:	cd b7       	in	r28, 0x3d	; 61
     e72:	de b7       	in	r29, 0x3e	; 62
     e74:	89 83       	std	Y+1, r24	; 0x01
     e76:	9a 83       	std	Y+2, r25	; 0x02
     e78:	89 81       	ldd	r24, Y+1	; 0x01
     e7a:	9a 81       	ldd	r25, Y+2	; 0x02
     e7c:	0e 94 a8 00 	call	0x150	; 0x150 <_ZN19FREQUENCY_ESTIMATORC1Ev>
     e80:	89 81       	ldd	r24, Y+1	; 0x01
     e82:	9a 81       	ldd	r25, Y+2	; 0x02
     e84:	24 ed       	ldi	r18, 0xD4	; 212
     e86:	30 e4       	ldi	r19, 0x40	; 64
     e88:	fc 01       	movw	r30, r24
     e8a:	24 8f       	std	Z+28, r18	; 0x1c
     e8c:	35 8f       	std	Z+29, r19	; 0x1d
     e8e:	89 81       	ldd	r24, Y+1	; 0x01
     e90:	9a 81       	ldd	r25, Y+2	; 0x02
     e92:	20 ed       	ldi	r18, 0xD0	; 208
     e94:	30 e4       	ldi	r19, 0x40	; 64
     e96:	fc 01       	movw	r30, r24
     e98:	20 83       	st	Z, r18
     e9a:	31 83       	std	Z+1, r19	; 0x01
     e9c:	89 81       	ldd	r24, Y+1	; 0x01
     e9e:	9a 81       	ldd	r25, Y+2	; 0x02
     ea0:	2e ec       	ldi	r18, 0xCE	; 206
     ea2:	30 e4       	ldi	r19, 0x40	; 64
     ea4:	fc 01       	movw	r30, r24
     ea6:	22 83       	std	Z+2, r18	; 0x02
     ea8:	33 83       	std	Z+3, r19	; 0x03
     eaa:	89 81       	ldd	r24, Y+1	; 0x01
     eac:	9a 81       	ldd	r25, Y+2	; 0x02
     eae:	21 e0       	ldi	r18, 0x01	; 1
     eb0:	fc 01       	movw	r30, r24
     eb2:	25 8b       	std	Z+21, r18	; 0x15
     eb4:	89 81       	ldd	r24, Y+1	; 0x01
     eb6:	9a 81       	ldd	r25, Y+2	; 0x02
     eb8:	21 e0       	ldi	r18, 0x01	; 1
     eba:	fc 01       	movw	r30, r24
     ebc:	23 8b       	std	Z+19, r18	; 0x13
     ebe:	80 91 ca 40 	lds	r24, 0x40CA	; 0x8040ca <post>
     ec2:	90 91 cb 40 	lds	r25, 0x40CB	; 0x8040cb <post+0x1>
     ec6:	24 ed       	ldi	r18, 0xD4	; 212
     ec8:	30 e4       	ldi	r19, 0x40	; 64
     eca:	fc 01       	movw	r30, r24
     ecc:	27 83       	std	Z+7, r18	; 0x07
     ece:	30 87       	std	Z+8, r19	; 0x08
     ed0:	00 00       	nop
     ed2:	0f 90       	pop	r0
     ed4:	0f 90       	pop	r0
     ed6:	df 91       	pop	r29
     ed8:	cf 91       	pop	r28
     eda:	08 95       	ret

00000edc <_ZN18Zero_Cross_CounterD1Ev>:
     edc:	cf 93       	push	r28
     ede:	df 93       	push	r29
     ee0:	00 d0       	rcall	.+0      	; 0xee2 <_ZN18Zero_Cross_CounterD1Ev+0x6>
     ee2:	cd b7       	in	r28, 0x3d	; 61
     ee4:	de b7       	in	r29, 0x3e	; 62
     ee6:	89 83       	std	Y+1, r24	; 0x01
     ee8:	9a 83       	std	Y+2, r25	; 0x02
     eea:	89 81       	ldd	r24, Y+1	; 0x01
     eec:	9a 81       	ldd	r25, Y+2	; 0x02
     eee:	0e 94 c4 00 	call	0x188	; 0x188 <_ZN19FREQUENCY_ESTIMATORD1Ev>
     ef2:	00 00       	nop
     ef4:	0f 90       	pop	r0
     ef6:	0f 90       	pop	r0
     ef8:	df 91       	pop	r29
     efa:	cf 91       	pop	r28
     efc:	08 95       	ret

00000efe <_ZN18Zero_Cross_Counter4InitEv>:
     efe:	cf 93       	push	r28
     f00:	df 93       	push	r29
     f02:	00 d0       	rcall	.+0      	; 0xf04 <_ZN18Zero_Cross_Counter4InitEv+0x6>
     f04:	cd b7       	in	r28, 0x3d	; 61
     f06:	de b7       	in	r29, 0x3e	; 62
     f08:	89 83       	std	Y+1, r24	; 0x01
     f0a:	9a 83       	std	Y+2, r25	; 0x02
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	0f 90       	pop	r0
     f10:	0f 90       	pop	r0
     f12:	df 91       	pop	r29
     f14:	cf 91       	pop	r28
     f16:	08 95       	ret

00000f18 <_ZN18Zero_Cross_Counter15CaptureCounterCEv>:
     f18:	cf 93       	push	r28
     f1a:	df 93       	push	r29
     f1c:	00 d0       	rcall	.+0      	; 0xf1e <_ZN18Zero_Cross_Counter15CaptureCounterCEv+0x6>
     f1e:	cd b7       	in	r28, 0x3d	; 61
     f20:	de b7       	in	r29, 0x3e	; 62
     f22:	89 83       	std	Y+1, r24	; 0x01
     f24:	9a 83       	std	Y+2, r25	; 0x02
     f26:	89 81       	ldd	r24, Y+1	; 0x01
     f28:	9a 81       	ldd	r25, Y+2	; 0x02
     f2a:	fc 01       	movw	r30, r24
     f2c:	87 a1       	ldd	r24, Z+39	; 0x27
     f2e:	88 23       	and	r24, r24
     f30:	99 f0       	breq	.+38     	; 0xf58 <_ZN18Zero_Cross_Counter15CaptureCounterCEv+0x40>
     f32:	80 e8       	ldi	r24, 0x80	; 128
     f34:	9b e0       	ldi	r25, 0x0B	; 11
     f36:	fc 01       	movw	r30, r24
     f38:	22 a1       	ldd	r18, Z+34	; 0x22
     f3a:	33 a1       	ldd	r19, Z+35	; 0x23
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
     f3e:	9a 81       	ldd	r25, Y+2	; 0x02
     f40:	fc 01       	movw	r30, r24
     f42:	23 a3       	std	Z+35, r18	; 0x23
     f44:	34 a3       	std	Z+36, r19	; 0x24
     f46:	89 81       	ldd	r24, Y+1	; 0x01
     f48:	9a 81       	ldd	r25, Y+2	; 0x02
     f4a:	fc 01       	movw	r30, r24
     f4c:	83 a1       	ldd	r24, Z+35	; 0x23
     f4e:	94 a1       	ldd	r25, Z+36	; 0x24
     f50:	89 2b       	or	r24, r25
     f52:	f1 f0       	breq	.+60     	; 0xf90 <_ZN18Zero_Cross_Counter15CaptureCounterCEv+0x78>
     f54:	00 00       	nop
     f56:	1c c0       	rjmp	.+56     	; 0xf90 <_ZN18Zero_Cross_Counter15CaptureCounterCEv+0x78>
     f58:	80 e8       	ldi	r24, 0x80	; 128
     f5a:	9b e0       	ldi	r25, 0x0B	; 11
     f5c:	fc 01       	movw	r30, r24
     f5e:	22 a1       	ldd	r18, Z+34	; 0x22
     f60:	33 a1       	ldd	r19, Z+35	; 0x23
     f62:	89 81       	ldd	r24, Y+1	; 0x01
     f64:	9a 81       	ldd	r25, Y+2	; 0x02
     f66:	fc 01       	movw	r30, r24
     f68:	25 a3       	std	Z+37, r18	; 0x25
     f6a:	36 a3       	std	Z+38, r19	; 0x26
     f6c:	80 e8       	ldi	r24, 0x80	; 128
     f6e:	9b e0       	ldi	r25, 0x0B	; 11
     f70:	fc 01       	movw	r30, r24
     f72:	22 a1       	ldd	r18, Z+34	; 0x22
     f74:	33 a1       	ldd	r19, Z+35	; 0x23
     f76:	89 81       	ldd	r24, Y+1	; 0x01
     f78:	9a 81       	ldd	r25, Y+2	; 0x02
     f7a:	fc 01       	movw	r30, r24
     f7c:	25 a3       	std	Z+37, r18	; 0x25
     f7e:	36 a3       	std	Z+38, r19	; 0x26
     f80:	89 81       	ldd	r24, Y+1	; 0x01
     f82:	9a 81       	ldd	r25, Y+2	; 0x02
     f84:	fc 01       	movw	r30, r24
     f86:	85 a1       	ldd	r24, Z+37	; 0x25
     f88:	96 a1       	ldd	r25, Z+38	; 0x26
     f8a:	89 2b       	or	r24, r25
     f8c:	09 f0       	breq	.+2      	; 0xf90 <_ZN18Zero_Cross_Counter15CaptureCounterCEv+0x78>
     f8e:	00 00       	nop
     f90:	80 e8       	ldi	r24, 0x80	; 128
     f92:	9b e0       	ldi	r25, 0x0B	; 11
     f94:	24 e0       	ldi	r18, 0x04	; 4
     f96:	fc 01       	movw	r30, r24
     f98:	24 83       	std	Z+4, r18	; 0x04
     f9a:	89 81       	ldd	r24, Y+1	; 0x01
     f9c:	9a 81       	ldd	r25, Y+2	; 0x02
     f9e:	fc 01       	movw	r30, r24
     fa0:	97 a1       	ldd	r25, Z+39	; 0x27
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	29 2f       	mov	r18, r25
     fa6:	28 27       	eor	r18, r24
     fa8:	89 81       	ldd	r24, Y+1	; 0x01
     faa:	9a 81       	ldd	r25, Y+2	; 0x02
     fac:	fc 01       	movw	r30, r24
     fae:	27 a3       	std	Z+39, r18	; 0x27
     fb0:	89 81       	ldd	r24, Y+1	; 0x01
     fb2:	9a 81       	ldd	r25, Y+2	; 0x02
     fb4:	fc 01       	movw	r30, r24
     fb6:	13 8a       	std	Z+19, r1	; 0x13
     fb8:	00 00       	nop
     fba:	0f 90       	pop	r0
     fbc:	0f 90       	pop	r0
     fbe:	df 91       	pop	r29
     fc0:	cf 91       	pop	r28
     fc2:	08 95       	ret

00000fc4 <_ZN18Zero_Cross_Counter22CaptureCounterB_RisingEv>:
     fc4:	cf 93       	push	r28
     fc6:	df 93       	push	r29
     fc8:	00 d0       	rcall	.+0      	; 0xfca <_ZN18Zero_Cross_Counter22CaptureCounterB_RisingEv+0x6>
     fca:	cd b7       	in	r28, 0x3d	; 61
     fcc:	de b7       	in	r29, 0x3e	; 62
     fce:	89 83       	std	Y+1, r24	; 0x01
     fd0:	9a 83       	std	Y+2, r25	; 0x02
     fd2:	80 91 cc 40 	lds	r24, 0x40CC	; 0x8040cc <tako>
     fd6:	90 91 cd 40 	lds	r25, 0x40CD	; 0x8040cd <tako+0x1>
     fda:	20 91 ce 40 	lds	r18, 0x40CE	; 0x8040ce <_ZL27capture_static_value_rising>
     fde:	30 91 cf 40 	lds	r19, 0x40CF	; 0x8040cf <_ZL27capture_static_value_rising+0x1>
     fe2:	fc 01       	movw	r30, r24
     fe4:	22 8f       	std	Z+26, r18	; 0x1a
     fe6:	33 8f       	std	Z+27, r19	; 0x1b
     fe8:	00 00       	nop
     fea:	0f 90       	pop	r0
     fec:	0f 90       	pop	r0
     fee:	df 91       	pop	r29
     ff0:	cf 91       	pop	r28
     ff2:	08 95       	ret

00000ff4 <_ZN18Zero_Cross_Counter23CaptureCounterB_FallingEv>:
     ff4:	cf 93       	push	r28
     ff6:	df 93       	push	r29
     ff8:	00 d0       	rcall	.+0      	; 0xffa <_ZN18Zero_Cross_Counter23CaptureCounterB_FallingEv+0x6>
     ffa:	cd b7       	in	r28, 0x3d	; 61
     ffc:	de b7       	in	r29, 0x3e	; 62
     ffe:	89 83       	std	Y+1, r24	; 0x01
    1000:	9a 83       	std	Y+2, r25	; 0x02
    1002:	80 91 cc 40 	lds	r24, 0x40CC	; 0x8040cc <tako>
    1006:	90 91 cd 40 	lds	r25, 0x40CD	; 0x8040cd <tako+0x1>
    100a:	20 91 d0 40 	lds	r18, 0x40D0	; 0x8040d0 <_ZL28capture_static_value_falling>
    100e:	30 91 d1 40 	lds	r19, 0x40D1	; 0x8040d1 <_ZL28capture_static_value_falling+0x1>
    1012:	fc 01       	movw	r30, r24
    1014:	20 8f       	std	Z+24, r18	; 0x18
    1016:	31 8f       	std	Z+25, r19	; 0x19
    1018:	00 00       	nop
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	df 91       	pop	r29
    1020:	cf 91       	pop	r28
    1022:	08 95       	ret

00001024 <_ZN18Zero_Cross_Counter26Set_Last_Capture_FrequencyEv>:
void Zero_Cross_Counter::Set_Last_Capture_Frequency(void){
    1024:	0f 93       	push	r16
    1026:	1f 93       	push	r17
    1028:	cf 93       	push	r28
    102a:	df 93       	push	r29
    102c:	cd b7       	in	r28, 0x3d	; 61
    102e:	de b7       	in	r29, 0x3e	; 62
    1030:	2c 97       	sbiw	r28, 0x0c	; 12
    1032:	cd bf       	out	0x3d, r28	; 61
    1034:	de bf       	out	0x3e, r29	; 62
    1036:	8b 87       	std	Y+11, r24	; 0x0b
    1038:	9c 87       	std	Y+12, r25	; 0x0c
	uint32_t local_value;
	tako->frequency_out=OnCapture_Frequecy_Out();
    103a:	00 91 cc 40 	lds	r16, 0x40CC	; 0x8040cc <tako>
    103e:	10 91 cd 40 	lds	r17, 0x40CD	; 0x8040cd <tako+0x1>
    1042:	8b 85       	ldd	r24, Y+11	; 0x0b
    1044:	9c 85       	ldd	r25, Y+12	; 0x0c
    1046:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <_ZN19FREQUENCY_ESTIMATOR22OnCapture_Frequecy_OutEv>
    104a:	dc 01       	movw	r26, r24
    104c:	cb 01       	movw	r24, r22
    104e:	f8 01       	movw	r30, r16
    1050:	86 8f       	std	Z+30, r24	; 0x1e
    1052:	97 8f       	std	Z+31, r25	; 0x1f
    1054:	a0 a3       	std	Z+32, r26	; 0x20
    1056:	b1 a3       	std	Z+33, r27	; 0x21
	uint32_t	dummy_frequency=frequency_out;
    1058:	8b 85       	ldd	r24, Y+11	; 0x0b
    105a:	9c 85       	ldd	r25, Y+12	; 0x0c
    105c:	fc 01       	movw	r30, r24
    105e:	86 8d       	ldd	r24, Z+30	; 0x1e
    1060:	97 8d       	ldd	r25, Z+31	; 0x1f
    1062:	a0 a1       	ldd	r26, Z+32	; 0x20
    1064:	b1 a1       	ldd	r27, Z+33	; 0x21
    1066:	8b 83       	std	Y+3, r24	; 0x03
    1068:	9c 83       	std	Y+4, r25	; 0x04
    106a:	ad 83       	std	Y+5, r26	; 0x05
    106c:	be 83       	std	Y+6, r27	; 0x06
	for (int i = 0; i < 4; i++)
    106e:	19 82       	std	Y+1, r1	; 0x01
    1070:	1a 82       	std	Y+2, r1	; 0x02
    1072:	89 81       	ldd	r24, Y+1	; 0x01
    1074:	9a 81       	ldd	r25, Y+2	; 0x02
    1076:	04 97       	sbiw	r24, 0x04	; 4
    1078:	0c f0       	brlt	.+2      	; 0x107c <_ZN18Zero_Cross_Counter26Set_Last_Capture_FrequencyEv+0x58>
    107a:	45 c0       	rjmp	.+138    	; 0x1106 <_ZN18Zero_Cross_Counter26Set_Last_Capture_FrequencyEv+0xe2>
	{
		local_value=(dummy_frequency>>((3-i)*8))&0xff;
    107c:	23 e0       	ldi	r18, 0x03	; 3
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	89 81       	ldd	r24, Y+1	; 0x01
    1082:	9a 81       	ldd	r25, Y+2	; 0x02
    1084:	a9 01       	movw	r20, r18
    1086:	48 1b       	sub	r20, r24
    1088:	59 0b       	sbc	r21, r25
    108a:	ca 01       	movw	r24, r20
    108c:	9c 01       	movw	r18, r24
    108e:	22 0f       	add	r18, r18
    1090:	33 1f       	adc	r19, r19
    1092:	22 0f       	add	r18, r18
    1094:	33 1f       	adc	r19, r19
    1096:	22 0f       	add	r18, r18
    1098:	33 1f       	adc	r19, r19
    109a:	8b 81       	ldd	r24, Y+3	; 0x03
    109c:	9c 81       	ldd	r25, Y+4	; 0x04
    109e:	ad 81       	ldd	r26, Y+5	; 0x05
    10a0:	be 81       	ldd	r27, Y+6	; 0x06
    10a2:	04 c0       	rjmp	.+8      	; 0x10ac <_ZN18Zero_Cross_Counter26Set_Last_Capture_FrequencyEv+0x88>
    10a4:	b6 95       	lsr	r27
    10a6:	a7 95       	ror	r26
    10a8:	97 95       	ror	r25
    10aa:	87 95       	ror	r24
    10ac:	2a 95       	dec	r18
    10ae:	d2 f7       	brpl	.-12     	; 0x10a4 <_ZN18Zero_Cross_Counter26Set_Last_Capture_FrequencyEv+0x80>
    10b0:	99 27       	eor	r25, r25
    10b2:	aa 27       	eor	r26, r26
    10b4:	bb 27       	eor	r27, r27
    10b6:	8f 83       	std	Y+7, r24	; 0x07
    10b8:	98 87       	std	Y+8, r25	; 0x08
    10ba:	a9 87       	std	Y+9, r26	; 0x09
    10bc:	ba 87       	std	Y+10, r27	; 0x0a
		if (i==0)
    10be:	89 81       	ldd	r24, Y+1	; 0x01
    10c0:	9a 81       	ldd	r25, Y+2	; 0x02
    10c2:	89 2b       	or	r24, r25
    10c4:	71 f4       	brne	.+28     	; 0x10e2 <_ZN18Zero_Cross_Counter26Set_Last_Capture_FrequencyEv+0xbe>
		{
			last_frequency[i]=(0xa0)|((uint8_t)local_value&0xff);
    10c6:	8b 85       	ldd	r24, Y+11	; 0x0b
    10c8:	9c 85       	ldd	r25, Y+12	; 0x0c
    10ca:	fc 01       	movw	r30, r24
    10cc:	24 8d       	ldd	r18, Z+28	; 0x1c
    10ce:	35 8d       	ldd	r19, Z+29	; 0x1d
    10d0:	89 81       	ldd	r24, Y+1	; 0x01
    10d2:	9a 81       	ldd	r25, Y+2	; 0x02
    10d4:	82 0f       	add	r24, r18
    10d6:	93 1f       	adc	r25, r19
    10d8:	2f 81       	ldd	r18, Y+7	; 0x07
    10da:	20 6a       	ori	r18, 0xA0	; 160
    10dc:	fc 01       	movw	r30, r24
    10de:	20 83       	st	Z, r18
    10e0:	0c c0       	rjmp	.+24     	; 0x10fa <_ZN18Zero_Cross_Counter26Set_Last_Capture_FrequencyEv+0xd6>
		} 
		else
		{
			last_frequency[i]=((uint8_t)local_value&0xff);
    10e2:	8b 85       	ldd	r24, Y+11	; 0x0b
    10e4:	9c 85       	ldd	r25, Y+12	; 0x0c
    10e6:	fc 01       	movw	r30, r24
    10e8:	24 8d       	ldd	r18, Z+28	; 0x1c
    10ea:	35 8d       	ldd	r19, Z+29	; 0x1d
    10ec:	89 81       	ldd	r24, Y+1	; 0x01
    10ee:	9a 81       	ldd	r25, Y+2	; 0x02
    10f0:	82 0f       	add	r24, r18
    10f2:	93 1f       	adc	r25, r19
    10f4:	2f 81       	ldd	r18, Y+7	; 0x07
    10f6:	fc 01       	movw	r30, r24
    10f8:	20 83       	st	Z, r18
}
void Zero_Cross_Counter::Set_Last_Capture_Frequency(void){
	uint32_t local_value;
	tako->frequency_out=OnCapture_Frequecy_Out();
	uint32_t	dummy_frequency=frequency_out;
	for (int i = 0; i < 4; i++)
    10fa:	89 81       	ldd	r24, Y+1	; 0x01
    10fc:	9a 81       	ldd	r25, Y+2	; 0x02
    10fe:	01 96       	adiw	r24, 0x01	; 1
    1100:	89 83       	std	Y+1, r24	; 0x01
    1102:	9a 83       	std	Y+2, r25	; 0x02
    1104:	b6 cf       	rjmp	.-148    	; 0x1072 <_ZN18Zero_Cross_Counter26Set_Last_Capture_FrequencyEv+0x4e>
		}
		
	}
	//memcpy((void*)last_frequency,(void*)&lf,4);
	
}
    1106:	00 00       	nop
    1108:	2c 96       	adiw	r28, 0x0c	; 12
    110a:	cd bf       	out	0x3d, r28	; 61
    110c:	de bf       	out	0x3e, r29	; 62
    110e:	df 91       	pop	r29
    1110:	cf 91       	pop	r28
    1112:	1f 91       	pop	r17
    1114:	0f 91       	pop	r16
    1116:	08 95       	ret

00001118 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
    1118:	0e 94 64 09 	call	0x12c8	; 0x12c8 <system_init>
    111c:	08 95       	ret

0000111e <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
    111e:	80 e0       	ldi	r24, 0x00	; 0
    1120:	08 c0       	rjmp	.+16     	; 0x1132 <mcu_init+0x14>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    1122:	e8 2f       	mov	r30, r24
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	e0 5f       	subi	r30, 0xF0	; 240
    1128:	fb 4f       	sbci	r31, 0xFB	; 251
    112a:	90 81       	ld	r25, Z
    112c:	98 60       	ori	r25, 0x08	; 8
    112e:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
    1130:	8f 5f       	subi	r24, 0xFF	; 255
    1132:	88 30       	cpi	r24, 0x08	; 8
    1134:	b0 f3       	brcs	.-20     	; 0x1122 <mcu_init+0x4>
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	08 c0       	rjmp	.+16     	; 0x114a <mcu_init+0x2c>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    113a:	e8 2f       	mov	r30, r24
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	e0 5d       	subi	r30, 0xD0	; 208
    1140:	fb 4f       	sbci	r31, 0xFB	; 251
    1142:	90 81       	ld	r25, Z
    1144:	98 60       	ori	r25, 0x08	; 8
    1146:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    1148:	8f 5f       	subi	r24, 0xFF	; 255
    114a:	88 30       	cpi	r24, 0x08	; 8
    114c:	b0 f3       	brcs	.-20     	; 0x113a <mcu_init+0x1c>
    114e:	80 e0       	ldi	r24, 0x00	; 0
    1150:	08 c0       	rjmp	.+16     	; 0x1162 <mcu_init+0x44>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    1152:	e8 2f       	mov	r30, r24
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	e0 5b       	subi	r30, 0xB0	; 176
    1158:	fb 4f       	sbci	r31, 0xFB	; 251
    115a:	90 81       	ld	r25, Z
    115c:	98 60       	ori	r25, 0x08	; 8
    115e:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    1160:	8f 5f       	subi	r24, 0xFF	; 255
    1162:	88 30       	cpi	r24, 0x08	; 8
    1164:	b0 f3       	brcs	.-20     	; 0x1152 <mcu_init+0x34>
    1166:	80 e0       	ldi	r24, 0x00	; 0
    1168:	08 c0       	rjmp	.+16     	; 0x117a <mcu_init+0x5c>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    116a:	e8 2f       	mov	r30, r24
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	e0 59       	subi	r30, 0x90	; 144
    1170:	fb 4f       	sbci	r31, 0xFB	; 251
    1172:	90 81       	ld	r25, Z
    1174:	98 60       	ori	r25, 0x08	; 8
    1176:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    1178:	8f 5f       	subi	r24, 0xFF	; 255
    117a:	88 30       	cpi	r24, 0x08	; 8
    117c:	b0 f3       	brcs	.-20     	; 0x116a <mcu_init+0x4c>
    117e:	80 e0       	ldi	r24, 0x00	; 0
    1180:	08 c0       	rjmp	.+16     	; 0x1192 <mcu_init+0x74>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    1182:	e8 2f       	mov	r30, r24
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	e0 57       	subi	r30, 0x70	; 112
    1188:	fb 4f       	sbci	r31, 0xFB	; 251
    118a:	90 81       	ld	r25, Z
    118c:	98 60       	ori	r25, 0x08	; 8
    118e:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    1190:	8f 5f       	subi	r24, 0xFF	; 255
    1192:	88 30       	cpi	r24, 0x08	; 8
    1194:	b0 f3       	brcs	.-20     	; 0x1182 <mcu_init+0x64>
    1196:	80 e0       	ldi	r24, 0x00	; 0
    1198:	08 c0       	rjmp	.+16     	; 0x11aa <mcu_init+0x8c>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    119a:	e8 2f       	mov	r30, r24
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	e0 55       	subi	r30, 0x50	; 80
    11a0:	fb 4f       	sbci	r31, 0xFB	; 251
    11a2:	90 81       	ld	r25, Z
    11a4:	98 60       	ori	r25, 0x08	; 8
    11a6:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    11a8:	8f 5f       	subi	r24, 0xFF	; 255
    11aa:	88 30       	cpi	r24, 0x08	; 8
    11ac:	b0 f3       	brcs	.-20     	; 0x119a <mcu_init+0x7c>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
    11ae:	08 95       	ret

000011b0 <OPERATIONAL_AMPLIFIER_0_initialization>:
 */
static inline void PORTD_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    11b0:	e7 e7       	ldi	r30, 0x77	; 119
    11b2:	f4 e0       	ldi	r31, 0x04	; 4
    11b4:	80 81       	ld	r24, Z
    11b6:	88 7f       	andi	r24, 0xF8	; 248
    11b8:	84 60       	ori	r24, 0x04	; 4
    11ba:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    11bc:	80 81       	ld	r24, Z
    11be:	87 7f       	andi	r24, 0xF7	; 247
    11c0:	80 83       	st	Z, r24
 */
static inline void PORTD_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    11c2:	e5 e7       	ldi	r30, 0x75	; 117
    11c4:	f4 e0       	ldi	r31, 0x04	; 4
    11c6:	80 81       	ld	r24, Z
    11c8:	88 7f       	andi	r24, 0xF8	; 248
    11ca:	84 60       	ori	r24, 0x04	; 4
    11cc:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    11ce:	80 81       	ld	r24, Z
    11d0:	87 7f       	andi	r24, 0xF7	; 247
    11d2:	80 83       	st	Z, r24
	// Disable digital input buffer
	PD5_set_isc(PORT_ISC_INPUT_DISABLE_gc);
	// Disable pull-up resistor
	PD5_set_pull_mode(PORT_PULL_OFF);

	OPERATIONAL_AMPLIFIER_0_init();
    11d4:	0e 94 a0 09 	call	0x1340	; 0x1340 <OPERATIONAL_AMPLIFIER_0_init>
    11d8:	08 95       	ret

000011da <USART_0_initialization>:
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
    11da:	84 b1       	in	r24, 0x04	; 4
    11dc:	8d 7f       	andi	r24, 0xFD	; 253
    11de:	84 b9       	out	0x04, r24	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    11e0:	e1 e3       	ldi	r30, 0x31	; 49
    11e2:	f4 e0       	ldi	r31, 0x04	; 4
    11e4:	80 81       	ld	r24, Z
    11e6:	87 7f       	andi	r24, 0xF7	; 247
    11e8:	80 83       	st	Z, r24
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
    11ea:	85 b1       	in	r24, 0x05	; 5
    11ec:	8e 7f       	andi	r24, 0xFE	; 254
    11ee:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    11f0:	84 b1       	in	r24, 0x04	; 4
    11f2:	81 60       	ori	r24, 0x01	; 1
    11f4:	84 b9       	out	0x04, r24	; 4
	    // <true"> High
	    false);

	PB0_set_dir(PORT_DIR_OUT);

	USART_0_init();
    11f6:	0e 94 06 0a 	call	0x140c	; 0x140c <USART_0_init>
    11fa:	08 95       	ret

000011fc <EVENT_SYSTEM_0_initialization>:
}

void EVENT_SYSTEM_0_initialization(void)
{

	EVENT_SYSTEM_0_init();
    11fc:	0e 94 8d 09 	call	0x131a	; 0x131a <EVENT_SYSTEM_0_init>
    1200:	08 95       	ret

00001202 <ZCD_RISING_initialization>:
 */
static inline void PORTD_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    1202:	e1 e7       	ldi	r30, 0x71	; 113
    1204:	f4 e0       	ldi	r31, 0x04	; 4
    1206:	80 81       	ld	r24, Z
    1208:	88 7f       	andi	r24, 0xF8	; 248
    120a:	84 60       	ori	r24, 0x04	; 4
    120c:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    120e:	80 81       	ld	r24, Z
    1210:	87 7f       	andi	r24, 0xF7	; 247
    1212:	80 83       	st	Z, r24
	// Disable digital input buffer
	PD1_set_isc(PORT_ISC_INPUT_DISABLE_gc);
	// Disable pull-up resistor
	PD1_set_pull_mode(PORT_PULL_OFF);

	ZCD_RISING_init();
    1214:	0e 94 27 0a 	call	0x144e	; 0x144e <ZCD_RISING_init>
    1218:	08 95       	ret

0000121a <ZCD_FALLING_initialization>:
 */
static inline void PORTE_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTE + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    121a:	e3 e9       	ldi	r30, 0x93	; 147
    121c:	f4 e0       	ldi	r31, 0x04	; 4
    121e:	80 81       	ld	r24, Z
    1220:	88 7f       	andi	r24, 0xF8	; 248
    1222:	84 60       	ori	r24, 0x04	; 4
    1224:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTE + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    1226:	80 81       	ld	r24, Z
    1228:	87 7f       	andi	r24, 0xF7	; 247
    122a:	80 83       	st	Z, r24
	// Disable digital input buffer
	PE3_set_isc(PORT_ISC_INPUT_DISABLE_gc);
	// Disable pull-up resistor
	PE3_set_pull_mode(PORT_PULL_OFF);

	ZCD_FALLING_init();
    122c:	0e 94 2e 0a 	call	0x145c	; 0x145c <ZCD_FALLING_init>
    1230:	08 95       	ret

00001232 <SPI_REFERENCE_initialization>:
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    1232:	81 b1       	in	r24, 0x01	; 1
    1234:	8f 7d       	andi	r24, 0xDF	; 223
    1236:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    1238:	80 b1       	in	r24, 0x00	; 0
    123a:	80 62       	ori	r24, 0x20	; 32
    123c:	80 b9       	out	0x00, r24	; 0
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
    123e:	80 b1       	in	r24, 0x00	; 0
    1240:	8f 7e       	andi	r24, 0xEF	; 239
    1242:	80 b9       	out	0x00, r24	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    1244:	e4 e1       	ldi	r30, 0x14	; 20
    1246:	f4 e0       	ldi	r31, 0x04	; 4
    1248:	80 81       	ld	r24, Z
    124a:	87 7f       	andi	r24, 0xF7	; 247
    124c:	80 83       	st	Z, r24
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
    124e:	80 b1       	in	r24, 0x00	; 0
    1250:	8f 7b       	andi	r24, 0xBF	; 191
    1252:	80 b9       	out	0x00, r24	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    1254:	e6 e1       	ldi	r30, 0x16	; 22
    1256:	f4 e0       	ldi	r31, 0x04	; 4
    1258:	80 81       	ld	r24, Z
    125a:	87 7f       	andi	r24, 0xF7	; 247
    125c:	80 83       	st	Z, r24
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
    125e:	80 b1       	in	r24, 0x00	; 0
    1260:	8f 77       	andi	r24, 0x7F	; 127
    1262:	80 b9       	out	0x00, r24	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    1264:	e7 e1       	ldi	r30, 0x17	; 23
    1266:	f4 e0       	ldi	r31, 0x04	; 4
    1268:	80 81       	ld	r24, Z
    126a:	87 7f       	andi	r24, 0xF7	; 247
    126c:	80 83       	st	Z, r24
	    // <id> pad_pull_config
	    // <PORT_PULL_OFF"> Off
	    // <PORT_PULL_UP"> Pull-up
	    PORT_PULL_OFF);

	SPI_REFERENCE_init();
    126e:	0e 94 c5 09 	call	0x138a	; 0x138a <SPI_REFERENCE_init>
    1272:	08 95       	ret

00001274 <SPI_ZCD_initialization>:
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
    1274:	89 b1       	in	r24, 0x09	; 9
    1276:	8d 7f       	andi	r24, 0xFD	; 253
    1278:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
    127a:	88 b1       	in	r24, 0x08	; 8
    127c:	82 60       	ori	r24, 0x02	; 2
    127e:	88 b9       	out	0x08, r24	; 8
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
    1280:	88 b1       	in	r24, 0x08	; 8
    1282:	8e 7f       	andi	r24, 0xFE	; 254
    1284:	88 b9       	out	0x08, r24	; 8
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    1286:	e0 e5       	ldi	r30, 0x50	; 80
    1288:	f4 e0       	ldi	r31, 0x04	; 4
    128a:	80 81       	ld	r24, Z
    128c:	87 7f       	andi	r24, 0xF7	; 247
    128e:	80 83       	st	Z, r24
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
    1290:	88 b1       	in	r24, 0x08	; 8
    1292:	8b 7f       	andi	r24, 0xFB	; 251
    1294:	88 b9       	out	0x08, r24	; 8
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    1296:	e2 e5       	ldi	r30, 0x52	; 82
    1298:	f4 e0       	ldi	r31, 0x04	; 4
    129a:	80 81       	ld	r24, Z
    129c:	87 7f       	andi	r24, 0xF7	; 247
    129e:	80 83       	st	Z, r24
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
    12a0:	88 b1       	in	r24, 0x08	; 8
    12a2:	87 7f       	andi	r24, 0xF7	; 247
    12a4:	88 b9       	out	0x08, r24	; 8
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    12a6:	e3 e5       	ldi	r30, 0x53	; 83
    12a8:	f4 e0       	ldi	r31, 0x04	; 4
    12aa:	80 81       	ld	r24, Z
    12ac:	87 7f       	andi	r24, 0xF7	; 247
    12ae:	80 83       	st	Z, r24
	    // <id> pad_pull_config
	    // <PORT_PULL_OFF"> Off
	    // <PORT_PULL_UP"> Pull-up
	    PORT_PULL_OFF);

	SPI_ZCD_init();
    12b0:	0e 94 cd 09 	call	0x139a	; 0x139a <SPI_ZCD_init>
    12b4:	08 95       	ret

000012b6 <TIMER_RISING_initialization>:
}

void TIMER_RISING_initialization(void)
{

	TIMER_RISING_init();
    12b6:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <TIMER_RISING_init>
    12ba:	08 95       	ret

000012bc <TIMER_FALLING_initialization>:
}

void TIMER_FALLING_initialization(void)
{

	TIMER_FALLING_init();
    12bc:	0e 94 e5 09 	call	0x13ca	; 0x13ca <TIMER_FALLING_init>
    12c0:	08 95       	ret

000012c2 <TIMER_0_initialization>:
}

void TIMER_0_initialization(void)
{

	TIMER_0_init();
    12c2:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <TIMER_0_init>
    12c6:	08 95       	ret

000012c8 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
    12c8:	0e 94 8f 08 	call	0x111e	; 0x111e <mcu_init>
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
    12cc:	85 b1       	in	r24, 0x05	; 5
    12ce:	87 7f       	andi	r24, 0xF7	; 247
    12d0:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    12d2:	84 b1       	in	r24, 0x04	; 4
    12d4:	88 60       	ori	r24, 0x08	; 8
    12d6:	84 b9       	out	0x04, r24	; 4
	    // <true"> High
	    false);

	LED0_set_dir(PORT_DIR_OUT);

	OPERATIONAL_AMPLIFIER_0_initialization();
    12d8:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <OPERATIONAL_AMPLIFIER_0_initialization>

	CLKCTRL_init();
    12dc:	0e 94 39 0a 	call	0x1472	; 0x1472 <CLKCTRL_init>

	USART_0_initialization();
    12e0:	0e 94 ed 08 	call	0x11da	; 0x11da <USART_0_initialization>

	EVENT_SYSTEM_0_initialization();
    12e4:	0e 94 fe 08 	call	0x11fc	; 0x11fc <EVENT_SYSTEM_0_initialization>

	SLPCTRL_init();
    12e8:	0e 94 c3 09 	call	0x1386	; 0x1386 <SLPCTRL_init>

	CPUINT_init();
    12ec:	0e 94 47 0a 	call	0x148e	; 0x148e <CPUINT_init>

	ZCD_RISING_initialization();
    12f0:	0e 94 01 09 	call	0x1202	; 0x1202 <ZCD_RISING_initialization>

	ZCD_FALLING_initialization();
    12f4:	0e 94 0d 09 	call	0x121a	; 0x121a <ZCD_FALLING_initialization>

	SPI_REFERENCE_initialization();
    12f8:	0e 94 19 09 	call	0x1232	; 0x1232 <SPI_REFERENCE_initialization>

	SPI_ZCD_initialization();
    12fc:	0e 94 3a 09 	call	0x1274	; 0x1274 <SPI_ZCD_initialization>

	RTC_0_init();
    1300:	0e 94 b2 09 	call	0x1364	; 0x1364 <RTC_0_init>

	TIMER_RISING_initialization();
    1304:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <TIMER_RISING_initialization>

	TIMER_FALLING_initialization();
    1308:	0e 94 5e 09 	call	0x12bc	; 0x12bc <TIMER_FALLING_initialization>

	TIMER_0_initialization();
    130c:	0e 94 61 09 	call	0x12c2	; 0x12c2 <TIMER_0_initialization>

	VREF_0_init();
    1310:	0e 94 22 0a 	call	0x1444	; 0x1444 <VREF_0_init>

	BOD_init();
    1314:	0e 94 35 0a 	call	0x146a	; 0x146a <BOD_init>
    1318:	08 95       	ret

0000131a <EVENT_SYSTEM_0_init>:
 * \return Initialization status.
 */
int8_t EVENT_SYSTEM_0_init()
{

	EVSYS.CHANNEL0 = EVSYS_CHANNEL0_ZCD0_gc; /* Zero Cross Detect 0 out */
    131a:	e0 e0       	ldi	r30, 0x00	; 0
    131c:	f2 e0       	ldi	r31, 0x02	; 2
    131e:	80 e3       	ldi	r24, 0x30	; 48
    1320:	80 8b       	std	Z+16, r24	; 0x10

	EVSYS.CHANNEL1 = EVSYS_CHANNEL1_ZCD1_gc; /* Zero Cross Detect 1 out */
    1322:	81 e3       	ldi	r24, 0x31	; 49
    1324:	81 8b       	std	Z+17, r24	; 0x11

	// EVSYS.USERTCA1CNTA = EVSYS_USER_OFF_gc; /* Off */

	// EVSYS.USERTCA1CNTB = EVSYS_USER_OFF_gc; /* Off */

	EVSYS.USERTCB0CAPT = EVSYS_USER_CHANNEL0_gc; /* Connect user to event channel 0 */
    1326:	91 e0       	ldi	r25, 0x01	; 1
    1328:	96 af       	std	Z+62, r25	; 0x3e

	// EVSYS.USERTCB0COUNT = EVSYS_USER_OFF_gc; /* Off */

	EVSYS.USERTCB1CAPT = EVSYS_USER_CHANNEL1_gc; /* Connect user to event channel 1 */
    132a:	82 e0       	ldi	r24, 0x02	; 2
    132c:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <__TEXT_REGION_LENGTH__+0x7e0240>

	// EVSYS.USERTCB2CAPT = EVSYS_USER_OFF_gc; /* Off */

	// EVSYS.USERTCB2COUNT = EVSYS_USER_OFF_gc; /* Off */

	EVSYS.USERTCB3CAPT = EVSYS_USER_CHANNEL1_gc; /* Connect user to event channel 1 */
    1330:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <__TEXT_REGION_LENGTH__+0x7e0244>

	// EVSYS.USERTCB3COUNT = EVSYS_USER_OFF_gc; /* Off */

	EVSYS.USERTCD0INPUTA = EVSYS_USER_CHANNEL0_gc; /* Connect user to event channel 0 */
    1334:	90 93 48 02 	sts	0x0248, r25	; 0x800248 <__TEXT_REGION_LENGTH__+0x7e0248>

	EVSYS.USERTCD0INPUTB = EVSYS_USER_CHANNEL1_gc; /* Connect user to event channel 1 */
    1338:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <__TEXT_REGION_LENGTH__+0x7e0249>
	// EVSYS.USEROPAMP2DUMP = EVSYS_USER_OFF_gc; /* Off */

	// EVSYS.USEROPAMP2DISABLE = EVSYS_USER_OFF_gc; /* Off */

	return 0;
}
    133c:	80 e0       	ldi	r24, 0x00	; 0
    133e:	08 95       	ret

00001340 <OPERATIONAL_AMPLIFIER_0_init>:
 * \return Initialization status.
 */
int8_t OPERATIONAL_AMPLIFIER_0_init()
{

	OPAMP.CTRLA = 1 << OPAMP_ENABLE_bp; /* OPAMP Peripheral Enable: enabled */
    1340:	e0 e0       	ldi	r30, 0x00	; 0
    1342:	f7 e0       	ldi	r31, 0x07	; 7
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	80 83       	st	Z, r24

	OPAMP.DBGCTRL = 1 << OPAMP_DBGRUN_bp; /* Run in Debug mode: enabled */
    1348:	81 83       	std	Z+1, r24	; 0x01

	OPAMP.TIMEBASE = OPAMP_TIMEBASE_VALUE << OPAMP_TIMEBASE_gp;
    134a:	87 e1       	ldi	r24, 0x17	; 23
    134c:	82 83       	std	Z+2, r24	; 0x02

	 OPAMP.PWRCTRL = OPAMP_PWRCTRL_IRSEL_FULL_gc; /* Full Input Range */
    134e:	17 86       	std	Z+15, r1	; 0x0f

	OPAMP.OP1SETTLE = 0x7f << OPAMP_SETTLE_gp; /* Setting: 0x7f */
    1350:	8f e7       	ldi	r24, 0x7F	; 127
    1352:	84 8f       	std	Z+28, r24	; 0x1c

	OPAMP.OP1CTRLA = 1 << OPAMP_ALWAYSON_bp             /* Always ON: enabled */
    1354:	85 e0       	ldi	r24, 0x05	; 5
    1356:	80 8f       	std	Z+24, r24	; 0x18
	                 | 0 << OPAMP_EVENTEN_bp            /* Event Enable: disabled */
	                 | OPAMP_OP1CTRLA_OUTMODE_NORMAL_gc /* Output Driver in Normal Mode */
	                 | 0 << OPAMP_RUNSTBY_bp;           /* Run is standby mode: disabled */

	OPAMP.OP1RESMUX = OPAMP_OP1RESMUX_MUXTOP_OUT_gc     /* OPn output */
    1358:	89 ee       	ldi	r24, 0xE9	; 233
    135a:	82 8f       	std	Z+26, r24	; 0x1a
	                  | OPAMP_OP1RESMUX_MUXBOT_INN_gc   /* Negative input pin for OPn */
	                  | OPAMP_OP1RESMUX_MUXWIP_WIP7_gc; /* R1 = 1R, R2 = 15R, R2/R1 = 15 */

	OPAMP.OP1INMUX = OPAMP_OP1INMUX_MUXPOS_VDDDIV2_gc /* VDD/2 */
    135c:	84 e1       	ldi	r24, 0x14	; 20
    135e:	83 8f       	std	Z+27, r24	; 0x1b
	                 | OPAMP_OP1INMUX_MUXNEG_WIP_gc;  /* Wiper from OPn's resistor ladder */

	return 0;
}
    1360:	80 e0       	ldi	r24, 0x00	; 0
    1362:	08 95       	ret

00001364 <RTC_0_init>:
 * \return Initialization status.
 */
int8_t RTC_0_init()
{

	while (RTC.STATUS > 0) { /* Wait for all register to be synchronized */
    1364:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    1368:	81 11       	cpse	r24, r1
    136a:	fc cf       	rjmp	.-8      	; 0x1364 <RTC_0_init>

	// RTC.CMP = 0x0; /* Compare: 0x0 */

	// RTC.CNT = 0x0; /* Counter: 0x0 */

	RTC.CTRLA = RTC_PRESCALER_DIV32_gc  /* 32 */
    136c:	e0 e4       	ldi	r30, 0x40	; 64
    136e:	f1 e0       	ldi	r31, 0x01	; 1
    1370:	88 ea       	ldi	r24, 0xA8	; 168
    1372:	80 83       	st	Z, r24
	            | 0 << RTC_RTCEN_bp     /* Enable: disabled */
	            | 1 << RTC_RUNSTDBY_bp; /* Run In Standby: enabled */

	RTC.PER = 0x1ff; /* Period: 0x1ff */
    1374:	8f ef       	ldi	r24, 0xFF	; 255
    1376:	91 e0       	ldi	r25, 0x01	; 1
    1378:	82 87       	std	Z+10, r24	; 0x0a
    137a:	93 87       	std	Z+11, r25	; 0x0b

	RTC.CLKSEL = RTC_CLKSEL_OSC32K_gc; /* Internal 32.768 kHz oscillator */
    137c:	17 82       	std	Z+7, r1	; 0x07

	// RTC.DBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	RTC.INTCTRL = 0 << RTC_CMP_bp    /* Compare Match Interrupt enable: disabled */
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	82 83       	std	Z+2, r24	; 0x02
	// RTC.PITDBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	// RTC.PITINTCTRL = 0 << RTC_PI_bp; /* Periodic Interrupt: disabled */

	return 0;
}
    1382:	80 e0       	ldi	r24, 0x00	; 0
    1384:	08 95       	ret

00001386 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
    1386:	80 e0       	ldi	r24, 0x00	; 0
    1388:	08 95       	ret

0000138a <SPI_REFERENCE_init>:
		while (!(SPI0.INTFLAGS & SPI_RXCIF_bm))
			;
		*b = SPI0.DATA;
		b++;
	}
}
    138a:	e0 e4       	ldi	r30, 0x40	; 64
    138c:	f9 e0       	ldi	r31, 0x09	; 9
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	80 83       	st	Z, r24
    1392:	82 83       	std	Z+2, r24	; 0x02
    1394:	10 92 df 40 	sts	0x40DF, r1	; 0x8040df <SPI_REFERENCE_desc>
    1398:	08 95       	ret

0000139a <SPI_ZCD_init>:
 * \retval 1 the SPI init was not successful
 */
void SPI_ZCD_init()
{

	SPI1.CTRLA = 0 << SPI_CLK2X_bp    /* Enable Double Speed: disabled */
    139a:	e0 e6       	ldi	r30, 0x60	; 96
    139c:	f9 e0       	ldi	r31, 0x09	; 9
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	80 83       	st	Z, r24
	// SPI1.CTRLB = 0 << SPI_BUFEN_bp /* Buffer Mode Enable: disabled */
	//		 | 0 << SPI_BUFWR_bp /* Buffer Write Mode: disabled */
	//		 | SPI_MODE_0_gc /* SPI Mode 0 */
	//		 | 0 << SPI_SSD_bp; /* Slave Select Disable: disabled */

	SPI1.INTCTRL = 1 << SPI_DREIE_bp    /* Data Register Empty Interrupt Enable: enabled */
    13a2:	81 ee       	ldi	r24, 0xE1	; 225
    13a4:	82 83       	std	Z+2, r24	; 0x02
	               | 1 << SPI_IE_bp     /* Interrupt Enable: enabled */
	               | 1 << SPI_RXCIE_bp  /* Receive Complete Interrupt Enable: enabled */
	               | 0 << SPI_SSIE_bp   /* Slave Select Trigger Interrupt Enable: disabled */
	               | 1 << SPI_TXCIE_bp; /* Transfer Complete Interrupt Enable: enabled */

	SPI_ZCD_desc.status = SPI_FREE;
    13a6:	e8 ed       	ldi	r30, 0xD8	; 216
    13a8:	f0 e4       	ldi	r31, 0x40	; 64
    13aa:	10 82       	st	Z, r1
	SPI_ZCD_desc.cb     = NULL;
    13ac:	15 82       	std	Z+5, r1	; 0x05
    13ae:	16 82       	std	Z+6, r1	; 0x06
    13b0:	08 95       	ret

000013b2 <TIMER_RISING_init>:

	// TCB0.CCMP = 0x0; /* Compare or Capture: 0x0 */

	// TCB0.CNT = 0x0; /* Count: 0x0 */

	TCB0.CTRLB = 1 << TCB_ASYNC_bp      /* Asynchronous Enable: enabled */
    13b2:	e0 e0       	ldi	r30, 0x00	; 0
    13b4:	fb e0       	ldi	r31, 0x0B	; 11
    13b6:	83 e4       	ldi	r24, 0x43	; 67
    13b8:	81 83       	std	Z+1, r24	; 0x01
	             | 0 << TCB_CCMPEN_bp   /* Pin Output Enable: disabled */
	             | 0 << TCB_CCMPINIT_bp /* Pin Initial State: disabled */
	             | TCB_CNTMODE_FRQ_gc;  /* Input Capture Frequency measurement */

	TCB0.DBGCTRL = 1 << TCB_DBGRUN_bp; /* Debug Run: enabled */
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	80 87       	std	Z+8, r24	; 0x08

	TCB0.EVCTRL = 1 << TCB_CAPTEI_bp    /* Event Input Enable: enabled */
    13be:	84 83       	std	Z+4, r24	; 0x04
	              | 0 << TCB_EDGE_bp    /* Event Edge: disabled */
	              | 0 << TCB_FILTER_bp; /* Input Capture Noise Cancellation Filter: disabled */

	TCB0.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
    13c0:	85 83       	std	Z+5, r24	; 0x05
	               | 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */

	TCB0.CTRLA = TCB_CLKSEL_DIV1_gc     /* CLK_PER */
    13c2:	81 e1       	ldi	r24, 0x11	; 17
    13c4:	80 83       	st	Z, r24
	             | 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
	             | 1 << TCB_SYNCUPD_bp  /* Synchronize Update: enabled */
	             | 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */

	return 0;
}
    13c6:	80 e0       	ldi	r24, 0x00	; 0
    13c8:	08 95       	ret

000013ca <TIMER_FALLING_init>:

	// TCB1.CCMP = 0x0; /* Compare or Capture: 0x0 */

	// TCB1.CNT = 0x0; /* Count: 0x0 */

	TCB1.CTRLB = 1 << TCB_ASYNC_bp      /* Asynchronous Enable: enabled */
    13ca:	e0 e1       	ldi	r30, 0x10	; 16
    13cc:	fb e0       	ldi	r31, 0x0B	; 11
    13ce:	83 e4       	ldi	r24, 0x43	; 67
    13d0:	81 83       	std	Z+1, r24	; 0x01
	             | 0 << TCB_CCMPEN_bp   /* Pin Output Enable: disabled */
	             | 0 << TCB_CCMPINIT_bp /* Pin Initial State: disabled */
	             | TCB_CNTMODE_FRQ_gc;  /* Input Capture Frequency measurement */

	TCB1.DBGCTRL = 1 << TCB_DBGRUN_bp; /* Debug Run: enabled */
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	80 87       	std	Z+8, r24	; 0x08

	TCB1.EVCTRL = 1 << TCB_CAPTEI_bp    /* Event Input Enable: enabled */
    13d6:	84 83       	std	Z+4, r24	; 0x04
	              | 0 << TCB_EDGE_bp    /* Event Edge: disabled */
	              | 0 << TCB_FILTER_bp; /* Input Capture Noise Cancellation Filter: disabled */

	TCB1.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
    13d8:	85 83       	std	Z+5, r24	; 0x05
	               | 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */

	TCB1.CTRLA = TCB_CLKSEL_DIV1_gc     /* CLK_PER */
    13da:	81 e1       	ldi	r24, 0x11	; 17
    13dc:	80 83       	st	Z, r24
	             | 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
	             | 1 << TCB_SYNCUPD_bp  /* Synchronize Update: enabled */
	             | 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */

	return 0;
}
    13de:	80 e0       	ldi	r24, 0x00	; 0
    13e0:	08 95       	ret

000013e2 <TIMER_0_init>:
int8_t TIMER_0_init()
{

	// Enable Protected register, peripheral must be disabled (ENABLE=0, in TCD.CTRLA).

	TCD0.CMPASET = 4095; /* Compare A Set: 4095 */
    13e2:	e0 e8       	ldi	r30, 0x80	; 128
    13e4:	fb e0       	ldi	r31, 0x0B	; 11
    13e6:	8f ef       	ldi	r24, 0xFF	; 255
    13e8:	9f e0       	ldi	r25, 0x0F	; 15
    13ea:	80 a7       	std	Z+40, r24	; 0x28
    13ec:	91 a7       	std	Z+41, r25	; 0x29
	//		 | TCD_DLYTRIG_CMPASET_gc; /* Compare A set */

	// TCD0.DLYVAL = 0 << TCD_DLYVAL_gp; /* Delay value: 0 */

	TCD0.EVCTRLA
	    = TCD_CFG_FILTER_gc       /* Input Capture Noise Cancellation Filter enabled */
    13ee:	85 e5       	ldi	r24, 0x55	; 85
    13f0:	80 87       	std	Z+8, r24	; 0x08
	      | TCD_ACTION_CAPTURE_gc /* Event trigger a fault and capture */
	      | TCD_EDGE_RISE_HIGH_gc /* The rising edge or high level of event generates retrigger or fault action */
	      | 1 << TCD_TRIGEI_bp;   /* Trigger event enable: enabled */

	TCD0.EVCTRLB
	    = TCD_CFG_NEITHER_gc      /* Neither Filter nor Asynchronous Event is enabled */
    13f2:	84 e1       	ldi	r24, 0x14	; 20
    13f4:	81 87       	std	Z+9, r24	; 0x09

	// TCD0.INPUTCTRLA = TCD_INPUTMODE_NONE_gc; /* Input has no actions */

	// TCD0.INPUTCTRLB = TCD_INPUTMODE_NONE_gc; /* Input has no actions */

	TCD0.INTCTRL = 0 << TCD_OVF_bp      /* Overflow interrupt enable: disabled */
    13f6:	84 e0       	ldi	r24, 0x04	; 4
    13f8:	84 87       	std	Z+12, r24	; 0x0c
	               | 1 << TCD_TRIGA_bp  /* Trigger A interrupt enable: enabled */
	               | 0 << TCD_TRIGB_bp; /* Trigger B interrupt enable: disabled */

	while ((TCD0.STATUS & TCD_ENRDY_bm) == 0)
    13fa:	80 91 8e 0b 	lds	r24, 0x0B8E	; 0x800b8e <__TEXT_REGION_LENGTH__+0x7e0b8e>
    13fe:	80 ff       	sbrs	r24, 0
    1400:	fc cf       	rjmp	.-8      	; 0x13fa <TIMER_0_init+0x18>
		; // Wait for Enable Ready to be high.

	TCD0.CTRLA = 1 << TCD_ENABLE_bp      /* Enable: enabled */
    1402:	81 e2       	ldi	r24, 0x21	; 33
    1404:	80 93 80 0b 	sts	0x0B80, r24	; 0x800b80 <__TEXT_REGION_LENGTH__+0x7e0b80>
	             | TCD_CLKSEL_PLL_gc     /*  */
	             | TCD_CNTPRES_DIV1_gc   /* Sync clock divided by 1 */
	             | TCD_SYNCPRES_DIV1_gc; /*  */

	return 0;
}
    1408:	80 e0       	ldi	r24, 0x00	; 0
    140a:	08 95       	ret

0000140c <USART_0_init>:
uint8_t USART_0_read()
{
	while (!(USART3.STATUS & USART_RXCIF_bm))
		;
	return USART3.RXDATAL;
}
    140c:	e0 e6       	ldi	r30, 0x60	; 96
    140e:	f8 e0       	ldi	r31, 0x08	; 8
    1410:	81 e4       	ldi	r24, 0x41	; 65
    1412:	93 e0       	ldi	r25, 0x03	; 3
    1414:	80 87       	std	Z+8, r24	; 0x08
    1416:	91 87       	std	Z+9, r25	; 0x09
    1418:	80 ec       	ldi	r24, 0xC0	; 192
    141a:	86 83       	std	Z+6, r24	; 0x06
    141c:	80 e0       	ldi	r24, 0x00	; 0
    141e:	90 e4       	ldi	r25, 0x40	; 64
    1420:	80 93 e2 40 	sts	0x40E2, r24	; 0x8040e2 <__iob+0x2>
    1424:	90 93 e3 40 	sts	0x40E3, r25	; 0x8040e3 <__iob+0x3>
    1428:	80 e0       	ldi	r24, 0x00	; 0
    142a:	08 95       	ret

0000142c <USART_0_write>:
 *
 * \return Nothing
 */
void USART_0_write(const uint8_t data)
{
	while (!(USART3.STATUS & USART_DREIF_bm))
    142c:	90 91 64 08 	lds	r25, 0x0864	; 0x800864 <__TEXT_REGION_LENGTH__+0x7e0864>
    1430:	95 ff       	sbrs	r25, 5
    1432:	fc cf       	rjmp	.-8      	; 0x142c <USART_0_write>
		;
	USART3.TXDATAL = data;
    1434:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <__TEXT_REGION_LENGTH__+0x7e0862>
    1438:	08 95       	ret

0000143a <USART_0_printCHAR>:

#if defined(__GNUC__)

int USART_0_printCHAR(char character, FILE *stream)
{
	USART_0_write(character);
    143a:	0e 94 16 0a 	call	0x142c	; 0x142c <USART_0_write>
	return 0;
}
    143e:	80 e0       	ldi	r24, 0x00	; 0
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	08 95       	ret

00001444 <VREF_0_init>:
	//		 | VREF_REFSEL_1V024_gc; /* Internal 1.024V reference */

	// VREF.DAC0REF = 0 << VREF_ALWAYSON_bp /* Enable reference always ON for DAC0: disabled */
	//		 | VREF_REFSEL_1V024_gc; /* Internal 1.024V reference */

	VREF.ACREF = 1 << VREF_ALWAYSON_bp /* Enable reference always ON for AC: enabled */
    1444:	85 e8       	ldi	r24, 0x85	; 133
    1446:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
	             | VREF_REFSEL_VDD_gc; /* VDD as reference */

	return 0;
}
    144a:	80 e0       	ldi	r24, 0x00	; 0
    144c:	08 95       	ret

0000144e <ZCD_RISING_init>:
 * \return Initialization status.
 */
int8_t ZCD_RISING_init()
{

	ZCD0.CTRLA = 1 << ZCD_ENABLE_bp     /* Setting: enabled */
    144e:	e0 ec       	ldi	r30, 0xC0	; 192
    1450:	f6 e0       	ldi	r31, 0x06	; 6
    1452:	81 e4       	ldi	r24, 0x41	; 65
    1454:	80 83       	st	Z, r24
	             | 1 << ZCD_OUTEN_bp    /* Setting: enabled */
	             | 0 << ZCD_RUNSTDBY_bp /* Setting: disabled */
	             | 0 << ZCD_INVERT_bp;  /* Setting: disabled */

	 ZCD0.INTCTRL = ZCD_INTMODE_NONE_gc; /* No interrupt */
    1456:	12 82       	std	Z+2, r1	; 0x02
	// ZCD0.INTCTRL =  ZCD_INTMODE_RISING_gc; /* No interrupt */
	return 0;
}
    1458:	80 e0       	ldi	r24, 0x00	; 0
    145a:	08 95       	ret

0000145c <ZCD_FALLING_init>:
 * \return Initialization status.
 */
int8_t ZCD_FALLING_init()
{

	ZCD1.CTRLA = 1 << ZCD_ENABLE_bp     /* Setting: enabled */
    145c:	e8 ec       	ldi	r30, 0xC8	; 200
    145e:	f6 e0       	ldi	r31, 0x06	; 6
    1460:	89 e4       	ldi	r24, 0x49	; 73
    1462:	80 83       	st	Z, r24
	             | 1 << ZCD_OUTEN_bp    /* Setting: enabled */
	             | 0 << ZCD_RUNSTDBY_bp /* Setting: disabled */
	             | 1 << ZCD_INVERT_bp;  /* Setting: enabled */

	 ZCD1.INTCTRL = ZCD_INTMODE_NONE_gc; /* No interrupt */
    1464:	12 82       	std	Z+2, r1	; 0x02
//	 ZCD1.INTCTRL = ZCD_INTMODE_FALLING_gc; /* No interrupt */
	return 0;
}
    1466:	80 e0       	ldi	r24, 0x00	; 0
    1468:	08 95       	ret

0000146a <BOD_init>:
int8_t BOD_init()
{

	// ccp_write_io((void*)&(BOD.CTRLA),BOD_SLEEP_DIS_gc /* Disabled */);

	BOD.INTCTRL = 0 << BOD_VLMIE_bp        /* voltage level monitor interrrupt enable: disabled */
    146a:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
	              | BOD_VLMCFG_FALLING_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
    146e:	80 e0       	ldi	r24, 0x00	; 0
    1470:	08 95       	ret

00001472 <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
    1472:	41 e8       	ldi	r20, 0x81	; 129
    1474:	68 ed       	ldi	r22, 0xD8	; 216
    1476:	80 e7       	ldi	r24, 0x70	; 112
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	0e 94 49 0a 	call	0x1492	; 0x1492 <protected_write_io>
    147e:	44 e2       	ldi	r20, 0x24	; 36
    1480:	68 ed       	ldi	r22, 0xD8	; 216
    1482:	88 e6       	ldi	r24, 0x68	; 104
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	0e 94 49 0a 	call	0x1492	; 0x1492 <protected_write_io>
	/* wait for PLL to start 
	while (!(CLKCTRL.MCLKSTATUS & CLKCTRL_PLLS_bm))
		;*/

	return 0;
}
    148a:	80 e0       	ldi	r24, 0x00	; 0
    148c:	08 95       	ret

0000148e <CPUINT_init>:
	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
}
    148e:	80 e0       	ldi	r24, 0x00	; 0
    1490:	08 95       	ret

00001492 <protected_write_io>:
	PUBLIC_FUNCTION(protected_write_io)

#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
    1492:	1b be       	out	0x3b, r1	; 59
#endif
	movw    r30, r24                // Load addr into Z
    1494:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
    1496:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
    1498:	40 83       	st	Z, r20
	ret                             // Return to caller
    149a:	08 95       	ret

0000149c <__udivmodsi4>:
    149c:	a1 e2       	ldi	r26, 0x21	; 33
    149e:	1a 2e       	mov	r1, r26
    14a0:	aa 1b       	sub	r26, r26
    14a2:	bb 1b       	sub	r27, r27
    14a4:	fd 01       	movw	r30, r26
    14a6:	0d c0       	rjmp	.+26     	; 0x14c2 <__udivmodsi4_ep>

000014a8 <__udivmodsi4_loop>:
    14a8:	aa 1f       	adc	r26, r26
    14aa:	bb 1f       	adc	r27, r27
    14ac:	ee 1f       	adc	r30, r30
    14ae:	ff 1f       	adc	r31, r31
    14b0:	a2 17       	cp	r26, r18
    14b2:	b3 07       	cpc	r27, r19
    14b4:	e4 07       	cpc	r30, r20
    14b6:	f5 07       	cpc	r31, r21
    14b8:	20 f0       	brcs	.+8      	; 0x14c2 <__udivmodsi4_ep>
    14ba:	a2 1b       	sub	r26, r18
    14bc:	b3 0b       	sbc	r27, r19
    14be:	e4 0b       	sbc	r30, r20
    14c0:	f5 0b       	sbc	r31, r21

000014c2 <__udivmodsi4_ep>:
    14c2:	66 1f       	adc	r22, r22
    14c4:	77 1f       	adc	r23, r23
    14c6:	88 1f       	adc	r24, r24
    14c8:	99 1f       	adc	r25, r25
    14ca:	1a 94       	dec	r1
    14cc:	69 f7       	brne	.-38     	; 0x14a8 <__udivmodsi4_loop>
    14ce:	60 95       	com	r22
    14d0:	70 95       	com	r23
    14d2:	80 95       	com	r24
    14d4:	90 95       	com	r25
    14d6:	9b 01       	movw	r18, r22
    14d8:	ac 01       	movw	r20, r24
    14da:	bd 01       	movw	r22, r26
    14dc:	cf 01       	movw	r24, r30
    14de:	08 95       	ret

000014e0 <__divmodsi4>:
    14e0:	05 2e       	mov	r0, r21
    14e2:	97 fb       	bst	r25, 7
    14e4:	1e f4       	brtc	.+6      	; 0x14ec <__divmodsi4+0xc>
    14e6:	00 94       	com	r0
    14e8:	0e 94 87 0a 	call	0x150e	; 0x150e <__negsi2>
    14ec:	57 fd       	sbrc	r21, 7
    14ee:	07 d0       	rcall	.+14     	; 0x14fe <__divmodsi4_neg2>
    14f0:	0e 94 4e 0a 	call	0x149c	; 0x149c <__udivmodsi4>
    14f4:	07 fc       	sbrc	r0, 7
    14f6:	03 d0       	rcall	.+6      	; 0x14fe <__divmodsi4_neg2>
    14f8:	4e f4       	brtc	.+18     	; 0x150c <__divmodsi4_exit>
    14fa:	0c 94 87 0a 	jmp	0x150e	; 0x150e <__negsi2>

000014fe <__divmodsi4_neg2>:
    14fe:	50 95       	com	r21
    1500:	40 95       	com	r20
    1502:	30 95       	com	r19
    1504:	21 95       	neg	r18
    1506:	3f 4f       	sbci	r19, 0xFF	; 255
    1508:	4f 4f       	sbci	r20, 0xFF	; 255
    150a:	5f 4f       	sbci	r21, 0xFF	; 255

0000150c <__divmodsi4_exit>:
    150c:	08 95       	ret

0000150e <__negsi2>:
    150e:	90 95       	com	r25
    1510:	80 95       	com	r24
    1512:	70 95       	com	r23
    1514:	61 95       	neg	r22
    1516:	7f 4f       	sbci	r23, 0xFF	; 255
    1518:	8f 4f       	sbci	r24, 0xFF	; 255
    151a:	9f 4f       	sbci	r25, 0xFF	; 255
    151c:	08 95       	ret

0000151e <__tablejump2__>:
    151e:	ee 0f       	add	r30, r30
    1520:	ff 1f       	adc	r31, r31
    1522:	00 24       	eor	r0, r0
    1524:	00 1c       	adc	r0, r0
    1526:	0b be       	out	0x3b, r0	; 59
    1528:	07 90       	elpm	r0, Z+
    152a:	f6 91       	elpm	r31, Z
    152c:	e0 2d       	mov	r30, r0
    152e:	09 94       	ijmp

00001530 <printf>:
    1530:	cf 93       	push	r28
    1532:	df 93       	push	r29
    1534:	cd b7       	in	r28, 0x3d	; 61
    1536:	de b7       	in	r29, 0x3e	; 62
    1538:	ae 01       	movw	r20, r28
    153a:	4b 5f       	subi	r20, 0xFB	; 251
    153c:	5f 4f       	sbci	r21, 0xFF	; 255
    153e:	fa 01       	movw	r30, r20
    1540:	61 91       	ld	r22, Z+
    1542:	71 91       	ld	r23, Z+
    1544:	af 01       	movw	r20, r30
    1546:	80 91 e2 40 	lds	r24, 0x40E2	; 0x8040e2 <__iob+0x2>
    154a:	90 91 e3 40 	lds	r25, 0x40E3	; 0x8040e3 <__iob+0x3>
    154e:	0e 94 ac 0a 	call	0x1558	; 0x1558 <vfprintf>
    1552:	df 91       	pop	r29
    1554:	cf 91       	pop	r28
    1556:	08 95       	ret

00001558 <vfprintf>:
    1558:	2f 92       	push	r2
    155a:	3f 92       	push	r3
    155c:	4f 92       	push	r4
    155e:	5f 92       	push	r5
    1560:	6f 92       	push	r6
    1562:	7f 92       	push	r7
    1564:	8f 92       	push	r8
    1566:	9f 92       	push	r9
    1568:	af 92       	push	r10
    156a:	bf 92       	push	r11
    156c:	cf 92       	push	r12
    156e:	df 92       	push	r13
    1570:	ef 92       	push	r14
    1572:	ff 92       	push	r15
    1574:	0f 93       	push	r16
    1576:	1f 93       	push	r17
    1578:	cf 93       	push	r28
    157a:	df 93       	push	r29
    157c:	cd b7       	in	r28, 0x3d	; 61
    157e:	de b7       	in	r29, 0x3e	; 62
    1580:	2b 97       	sbiw	r28, 0x0b	; 11
    1582:	cd bf       	out	0x3d, r28	; 61
    1584:	de bf       	out	0x3e, r29	; 62
    1586:	6c 01       	movw	r12, r24
    1588:	7b 01       	movw	r14, r22
    158a:	8a 01       	movw	r16, r20
    158c:	fc 01       	movw	r30, r24
    158e:	16 82       	std	Z+6, r1	; 0x06
    1590:	17 82       	std	Z+7, r1	; 0x07
    1592:	83 81       	ldd	r24, Z+3	; 0x03
    1594:	81 ff       	sbrs	r24, 1
    1596:	cc c1       	rjmp	.+920    	; 0x1930 <vfprintf+0x3d8>
    1598:	ce 01       	movw	r24, r28
    159a:	01 96       	adiw	r24, 0x01	; 1
    159c:	3c 01       	movw	r6, r24
    159e:	f6 01       	movw	r30, r12
    15a0:	93 81       	ldd	r25, Z+3	; 0x03
    15a2:	f7 01       	movw	r30, r14
    15a4:	93 fd       	sbrc	r25, 3
    15a6:	85 91       	lpm	r24, Z+
    15a8:	93 ff       	sbrs	r25, 3
    15aa:	81 91       	ld	r24, Z+
    15ac:	7f 01       	movw	r14, r30
    15ae:	88 23       	and	r24, r24
    15b0:	09 f4       	brne	.+2      	; 0x15b4 <vfprintf+0x5c>
    15b2:	ba c1       	rjmp	.+884    	; 0x1928 <vfprintf+0x3d0>
    15b4:	85 32       	cpi	r24, 0x25	; 37
    15b6:	39 f4       	brne	.+14     	; 0x15c6 <vfprintf+0x6e>
    15b8:	93 fd       	sbrc	r25, 3
    15ba:	85 91       	lpm	r24, Z+
    15bc:	93 ff       	sbrs	r25, 3
    15be:	81 91       	ld	r24, Z+
    15c0:	7f 01       	movw	r14, r30
    15c2:	85 32       	cpi	r24, 0x25	; 37
    15c4:	29 f4       	brne	.+10     	; 0x15d0 <vfprintf+0x78>
    15c6:	b6 01       	movw	r22, r12
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	0e 94 c6 0c 	call	0x198c	; 0x198c <fputc>
    15ce:	e7 cf       	rjmp	.-50     	; 0x159e <vfprintf+0x46>
    15d0:	91 2c       	mov	r9, r1
    15d2:	21 2c       	mov	r2, r1
    15d4:	31 2c       	mov	r3, r1
    15d6:	ff e1       	ldi	r31, 0x1F	; 31
    15d8:	f3 15       	cp	r31, r3
    15da:	d8 f0       	brcs	.+54     	; 0x1612 <vfprintf+0xba>
    15dc:	8b 32       	cpi	r24, 0x2B	; 43
    15de:	79 f0       	breq	.+30     	; 0x15fe <vfprintf+0xa6>
    15e0:	38 f4       	brcc	.+14     	; 0x15f0 <vfprintf+0x98>
    15e2:	80 32       	cpi	r24, 0x20	; 32
    15e4:	79 f0       	breq	.+30     	; 0x1604 <vfprintf+0xac>
    15e6:	83 32       	cpi	r24, 0x23	; 35
    15e8:	a1 f4       	brne	.+40     	; 0x1612 <vfprintf+0xba>
    15ea:	23 2d       	mov	r18, r3
    15ec:	20 61       	ori	r18, 0x10	; 16
    15ee:	1d c0       	rjmp	.+58     	; 0x162a <vfprintf+0xd2>
    15f0:	8d 32       	cpi	r24, 0x2D	; 45
    15f2:	61 f0       	breq	.+24     	; 0x160c <vfprintf+0xb4>
    15f4:	80 33       	cpi	r24, 0x30	; 48
    15f6:	69 f4       	brne	.+26     	; 0x1612 <vfprintf+0xba>
    15f8:	23 2d       	mov	r18, r3
    15fa:	21 60       	ori	r18, 0x01	; 1
    15fc:	16 c0       	rjmp	.+44     	; 0x162a <vfprintf+0xd2>
    15fe:	83 2d       	mov	r24, r3
    1600:	82 60       	ori	r24, 0x02	; 2
    1602:	38 2e       	mov	r3, r24
    1604:	e3 2d       	mov	r30, r3
    1606:	e4 60       	ori	r30, 0x04	; 4
    1608:	3e 2e       	mov	r3, r30
    160a:	2a c0       	rjmp	.+84     	; 0x1660 <vfprintf+0x108>
    160c:	f3 2d       	mov	r31, r3
    160e:	f8 60       	ori	r31, 0x08	; 8
    1610:	1d c0       	rjmp	.+58     	; 0x164c <vfprintf+0xf4>
    1612:	37 fc       	sbrc	r3, 7
    1614:	2d c0       	rjmp	.+90     	; 0x1670 <vfprintf+0x118>
    1616:	20 ed       	ldi	r18, 0xD0	; 208
    1618:	28 0f       	add	r18, r24
    161a:	2a 30       	cpi	r18, 0x0A	; 10
    161c:	40 f0       	brcs	.+16     	; 0x162e <vfprintf+0xd6>
    161e:	8e 32       	cpi	r24, 0x2E	; 46
    1620:	b9 f4       	brne	.+46     	; 0x1650 <vfprintf+0xf8>
    1622:	36 fc       	sbrc	r3, 6
    1624:	81 c1       	rjmp	.+770    	; 0x1928 <vfprintf+0x3d0>
    1626:	23 2d       	mov	r18, r3
    1628:	20 64       	ori	r18, 0x40	; 64
    162a:	32 2e       	mov	r3, r18
    162c:	19 c0       	rjmp	.+50     	; 0x1660 <vfprintf+0x108>
    162e:	36 fe       	sbrs	r3, 6
    1630:	06 c0       	rjmp	.+12     	; 0x163e <vfprintf+0xe6>
    1632:	8a e0       	ldi	r24, 0x0A	; 10
    1634:	98 9e       	mul	r9, r24
    1636:	20 0d       	add	r18, r0
    1638:	11 24       	eor	r1, r1
    163a:	92 2e       	mov	r9, r18
    163c:	11 c0       	rjmp	.+34     	; 0x1660 <vfprintf+0x108>
    163e:	ea e0       	ldi	r30, 0x0A	; 10
    1640:	2e 9e       	mul	r2, r30
    1642:	20 0d       	add	r18, r0
    1644:	11 24       	eor	r1, r1
    1646:	22 2e       	mov	r2, r18
    1648:	f3 2d       	mov	r31, r3
    164a:	f0 62       	ori	r31, 0x20	; 32
    164c:	3f 2e       	mov	r3, r31
    164e:	08 c0       	rjmp	.+16     	; 0x1660 <vfprintf+0x108>
    1650:	8c 36       	cpi	r24, 0x6C	; 108
    1652:	21 f4       	brne	.+8      	; 0x165c <vfprintf+0x104>
    1654:	83 2d       	mov	r24, r3
    1656:	80 68       	ori	r24, 0x80	; 128
    1658:	38 2e       	mov	r3, r24
    165a:	02 c0       	rjmp	.+4      	; 0x1660 <vfprintf+0x108>
    165c:	88 36       	cpi	r24, 0x68	; 104
    165e:	41 f4       	brne	.+16     	; 0x1670 <vfprintf+0x118>
    1660:	f7 01       	movw	r30, r14
    1662:	93 fd       	sbrc	r25, 3
    1664:	85 91       	lpm	r24, Z+
    1666:	93 ff       	sbrs	r25, 3
    1668:	81 91       	ld	r24, Z+
    166a:	7f 01       	movw	r14, r30
    166c:	81 11       	cpse	r24, r1
    166e:	b3 cf       	rjmp	.-154    	; 0x15d6 <vfprintf+0x7e>
    1670:	98 2f       	mov	r25, r24
    1672:	9f 7d       	andi	r25, 0xDF	; 223
    1674:	95 54       	subi	r25, 0x45	; 69
    1676:	93 30       	cpi	r25, 0x03	; 3
    1678:	28 f4       	brcc	.+10     	; 0x1684 <vfprintf+0x12c>
    167a:	0c 5f       	subi	r16, 0xFC	; 252
    167c:	1f 4f       	sbci	r17, 0xFF	; 255
    167e:	9f e3       	ldi	r25, 0x3F	; 63
    1680:	99 83       	std	Y+1, r25	; 0x01
    1682:	0d c0       	rjmp	.+26     	; 0x169e <vfprintf+0x146>
    1684:	83 36       	cpi	r24, 0x63	; 99
    1686:	31 f0       	breq	.+12     	; 0x1694 <vfprintf+0x13c>
    1688:	83 37       	cpi	r24, 0x73	; 115
    168a:	71 f0       	breq	.+28     	; 0x16a8 <vfprintf+0x150>
    168c:	83 35       	cpi	r24, 0x53	; 83
    168e:	09 f0       	breq	.+2      	; 0x1692 <vfprintf+0x13a>
    1690:	59 c0       	rjmp	.+178    	; 0x1744 <vfprintf+0x1ec>
    1692:	21 c0       	rjmp	.+66     	; 0x16d6 <vfprintf+0x17e>
    1694:	f8 01       	movw	r30, r16
    1696:	80 81       	ld	r24, Z
    1698:	89 83       	std	Y+1, r24	; 0x01
    169a:	0e 5f       	subi	r16, 0xFE	; 254
    169c:	1f 4f       	sbci	r17, 0xFF	; 255
    169e:	88 24       	eor	r8, r8
    16a0:	83 94       	inc	r8
    16a2:	91 2c       	mov	r9, r1
    16a4:	53 01       	movw	r10, r6
    16a6:	13 c0       	rjmp	.+38     	; 0x16ce <vfprintf+0x176>
    16a8:	28 01       	movw	r4, r16
    16aa:	f2 e0       	ldi	r31, 0x02	; 2
    16ac:	4f 0e       	add	r4, r31
    16ae:	51 1c       	adc	r5, r1
    16b0:	f8 01       	movw	r30, r16
    16b2:	a0 80       	ld	r10, Z
    16b4:	b1 80       	ldd	r11, Z+1	; 0x01
    16b6:	36 fe       	sbrs	r3, 6
    16b8:	03 c0       	rjmp	.+6      	; 0x16c0 <vfprintf+0x168>
    16ba:	69 2d       	mov	r22, r9
    16bc:	70 e0       	ldi	r23, 0x00	; 0
    16be:	02 c0       	rjmp	.+4      	; 0x16c4 <vfprintf+0x16c>
    16c0:	6f ef       	ldi	r22, 0xFF	; 255
    16c2:	7f ef       	ldi	r23, 0xFF	; 255
    16c4:	c5 01       	movw	r24, r10
    16c6:	0e 94 bb 0c 	call	0x1976	; 0x1976 <strnlen>
    16ca:	4c 01       	movw	r8, r24
    16cc:	82 01       	movw	r16, r4
    16ce:	f3 2d       	mov	r31, r3
    16d0:	ff 77       	andi	r31, 0x7F	; 127
    16d2:	3f 2e       	mov	r3, r31
    16d4:	16 c0       	rjmp	.+44     	; 0x1702 <vfprintf+0x1aa>
    16d6:	28 01       	movw	r4, r16
    16d8:	22 e0       	ldi	r18, 0x02	; 2
    16da:	42 0e       	add	r4, r18
    16dc:	51 1c       	adc	r5, r1
    16de:	f8 01       	movw	r30, r16
    16e0:	a0 80       	ld	r10, Z
    16e2:	b1 80       	ldd	r11, Z+1	; 0x01
    16e4:	36 fe       	sbrs	r3, 6
    16e6:	03 c0       	rjmp	.+6      	; 0x16ee <vfprintf+0x196>
    16e8:	69 2d       	mov	r22, r9
    16ea:	70 e0       	ldi	r23, 0x00	; 0
    16ec:	02 c0       	rjmp	.+4      	; 0x16f2 <vfprintf+0x19a>
    16ee:	6f ef       	ldi	r22, 0xFF	; 255
    16f0:	7f ef       	ldi	r23, 0xFF	; 255
    16f2:	c5 01       	movw	r24, r10
    16f4:	0e 94 b0 0c 	call	0x1960	; 0x1960 <strnlen_P>
    16f8:	4c 01       	movw	r8, r24
    16fa:	f3 2d       	mov	r31, r3
    16fc:	f0 68       	ori	r31, 0x80	; 128
    16fe:	3f 2e       	mov	r3, r31
    1700:	82 01       	movw	r16, r4
    1702:	33 fc       	sbrc	r3, 3
    1704:	1b c0       	rjmp	.+54     	; 0x173c <vfprintf+0x1e4>
    1706:	82 2d       	mov	r24, r2
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	88 16       	cp	r8, r24
    170c:	99 06       	cpc	r9, r25
    170e:	b0 f4       	brcc	.+44     	; 0x173c <vfprintf+0x1e4>
    1710:	b6 01       	movw	r22, r12
    1712:	80 e2       	ldi	r24, 0x20	; 32
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	0e 94 c6 0c 	call	0x198c	; 0x198c <fputc>
    171a:	2a 94       	dec	r2
    171c:	f4 cf       	rjmp	.-24     	; 0x1706 <vfprintf+0x1ae>
    171e:	f5 01       	movw	r30, r10
    1720:	37 fc       	sbrc	r3, 7
    1722:	85 91       	lpm	r24, Z+
    1724:	37 fe       	sbrs	r3, 7
    1726:	81 91       	ld	r24, Z+
    1728:	5f 01       	movw	r10, r30
    172a:	b6 01       	movw	r22, r12
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	0e 94 c6 0c 	call	0x198c	; 0x198c <fputc>
    1732:	21 10       	cpse	r2, r1
    1734:	2a 94       	dec	r2
    1736:	21 e0       	ldi	r18, 0x01	; 1
    1738:	82 1a       	sub	r8, r18
    173a:	91 08       	sbc	r9, r1
    173c:	81 14       	cp	r8, r1
    173e:	91 04       	cpc	r9, r1
    1740:	71 f7       	brne	.-36     	; 0x171e <vfprintf+0x1c6>
    1742:	e8 c0       	rjmp	.+464    	; 0x1914 <vfprintf+0x3bc>
    1744:	84 36       	cpi	r24, 0x64	; 100
    1746:	11 f0       	breq	.+4      	; 0x174c <vfprintf+0x1f4>
    1748:	89 36       	cpi	r24, 0x69	; 105
    174a:	41 f5       	brne	.+80     	; 0x179c <vfprintf+0x244>
    174c:	f8 01       	movw	r30, r16
    174e:	37 fe       	sbrs	r3, 7
    1750:	07 c0       	rjmp	.+14     	; 0x1760 <vfprintf+0x208>
    1752:	60 81       	ld	r22, Z
    1754:	71 81       	ldd	r23, Z+1	; 0x01
    1756:	82 81       	ldd	r24, Z+2	; 0x02
    1758:	93 81       	ldd	r25, Z+3	; 0x03
    175a:	0c 5f       	subi	r16, 0xFC	; 252
    175c:	1f 4f       	sbci	r17, 0xFF	; 255
    175e:	08 c0       	rjmp	.+16     	; 0x1770 <vfprintf+0x218>
    1760:	60 81       	ld	r22, Z
    1762:	71 81       	ldd	r23, Z+1	; 0x01
    1764:	07 2e       	mov	r0, r23
    1766:	00 0c       	add	r0, r0
    1768:	88 0b       	sbc	r24, r24
    176a:	99 0b       	sbc	r25, r25
    176c:	0e 5f       	subi	r16, 0xFE	; 254
    176e:	1f 4f       	sbci	r17, 0xFF	; 255
    1770:	f3 2d       	mov	r31, r3
    1772:	ff 76       	andi	r31, 0x6F	; 111
    1774:	3f 2e       	mov	r3, r31
    1776:	97 ff       	sbrs	r25, 7
    1778:	09 c0       	rjmp	.+18     	; 0x178c <vfprintf+0x234>
    177a:	90 95       	com	r25
    177c:	80 95       	com	r24
    177e:	70 95       	com	r23
    1780:	61 95       	neg	r22
    1782:	7f 4f       	sbci	r23, 0xFF	; 255
    1784:	8f 4f       	sbci	r24, 0xFF	; 255
    1786:	9f 4f       	sbci	r25, 0xFF	; 255
    1788:	f0 68       	ori	r31, 0x80	; 128
    178a:	3f 2e       	mov	r3, r31
    178c:	2a e0       	ldi	r18, 0x0A	; 10
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	a3 01       	movw	r20, r6
    1792:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <__ultoa_invert>
    1796:	88 2e       	mov	r8, r24
    1798:	86 18       	sub	r8, r6
    179a:	45 c0       	rjmp	.+138    	; 0x1826 <vfprintf+0x2ce>
    179c:	85 37       	cpi	r24, 0x75	; 117
    179e:	31 f4       	brne	.+12     	; 0x17ac <vfprintf+0x254>
    17a0:	23 2d       	mov	r18, r3
    17a2:	2f 7e       	andi	r18, 0xEF	; 239
    17a4:	b2 2e       	mov	r11, r18
    17a6:	2a e0       	ldi	r18, 0x0A	; 10
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	25 c0       	rjmp	.+74     	; 0x17f6 <vfprintf+0x29e>
    17ac:	93 2d       	mov	r25, r3
    17ae:	99 7f       	andi	r25, 0xF9	; 249
    17b0:	b9 2e       	mov	r11, r25
    17b2:	8f 36       	cpi	r24, 0x6F	; 111
    17b4:	c1 f0       	breq	.+48     	; 0x17e6 <vfprintf+0x28e>
    17b6:	18 f4       	brcc	.+6      	; 0x17be <vfprintf+0x266>
    17b8:	88 35       	cpi	r24, 0x58	; 88
    17ba:	79 f0       	breq	.+30     	; 0x17da <vfprintf+0x282>
    17bc:	b5 c0       	rjmp	.+362    	; 0x1928 <vfprintf+0x3d0>
    17be:	80 37       	cpi	r24, 0x70	; 112
    17c0:	19 f0       	breq	.+6      	; 0x17c8 <vfprintf+0x270>
    17c2:	88 37       	cpi	r24, 0x78	; 120
    17c4:	21 f0       	breq	.+8      	; 0x17ce <vfprintf+0x276>
    17c6:	b0 c0       	rjmp	.+352    	; 0x1928 <vfprintf+0x3d0>
    17c8:	e9 2f       	mov	r30, r25
    17ca:	e0 61       	ori	r30, 0x10	; 16
    17cc:	be 2e       	mov	r11, r30
    17ce:	b4 fe       	sbrs	r11, 4
    17d0:	0d c0       	rjmp	.+26     	; 0x17ec <vfprintf+0x294>
    17d2:	fb 2d       	mov	r31, r11
    17d4:	f4 60       	ori	r31, 0x04	; 4
    17d6:	bf 2e       	mov	r11, r31
    17d8:	09 c0       	rjmp	.+18     	; 0x17ec <vfprintf+0x294>
    17da:	34 fe       	sbrs	r3, 4
    17dc:	0a c0       	rjmp	.+20     	; 0x17f2 <vfprintf+0x29a>
    17de:	29 2f       	mov	r18, r25
    17e0:	26 60       	ori	r18, 0x06	; 6
    17e2:	b2 2e       	mov	r11, r18
    17e4:	06 c0       	rjmp	.+12     	; 0x17f2 <vfprintf+0x29a>
    17e6:	28 e0       	ldi	r18, 0x08	; 8
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	05 c0       	rjmp	.+10     	; 0x17f6 <vfprintf+0x29e>
    17ec:	20 e1       	ldi	r18, 0x10	; 16
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	02 c0       	rjmp	.+4      	; 0x17f6 <vfprintf+0x29e>
    17f2:	20 e1       	ldi	r18, 0x10	; 16
    17f4:	32 e0       	ldi	r19, 0x02	; 2
    17f6:	f8 01       	movw	r30, r16
    17f8:	b7 fe       	sbrs	r11, 7
    17fa:	07 c0       	rjmp	.+14     	; 0x180a <vfprintf+0x2b2>
    17fc:	60 81       	ld	r22, Z
    17fe:	71 81       	ldd	r23, Z+1	; 0x01
    1800:	82 81       	ldd	r24, Z+2	; 0x02
    1802:	93 81       	ldd	r25, Z+3	; 0x03
    1804:	0c 5f       	subi	r16, 0xFC	; 252
    1806:	1f 4f       	sbci	r17, 0xFF	; 255
    1808:	06 c0       	rjmp	.+12     	; 0x1816 <vfprintf+0x2be>
    180a:	60 81       	ld	r22, Z
    180c:	71 81       	ldd	r23, Z+1	; 0x01
    180e:	80 e0       	ldi	r24, 0x00	; 0
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	0e 5f       	subi	r16, 0xFE	; 254
    1814:	1f 4f       	sbci	r17, 0xFF	; 255
    1816:	a3 01       	movw	r20, r6
    1818:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <__ultoa_invert>
    181c:	88 2e       	mov	r8, r24
    181e:	86 18       	sub	r8, r6
    1820:	fb 2d       	mov	r31, r11
    1822:	ff 77       	andi	r31, 0x7F	; 127
    1824:	3f 2e       	mov	r3, r31
    1826:	36 fe       	sbrs	r3, 6
    1828:	0d c0       	rjmp	.+26     	; 0x1844 <vfprintf+0x2ec>
    182a:	23 2d       	mov	r18, r3
    182c:	2e 7f       	andi	r18, 0xFE	; 254
    182e:	a2 2e       	mov	r10, r18
    1830:	89 14       	cp	r8, r9
    1832:	58 f4       	brcc	.+22     	; 0x184a <vfprintf+0x2f2>
    1834:	34 fe       	sbrs	r3, 4
    1836:	0b c0       	rjmp	.+22     	; 0x184e <vfprintf+0x2f6>
    1838:	32 fc       	sbrc	r3, 2
    183a:	09 c0       	rjmp	.+18     	; 0x184e <vfprintf+0x2f6>
    183c:	83 2d       	mov	r24, r3
    183e:	8e 7e       	andi	r24, 0xEE	; 238
    1840:	a8 2e       	mov	r10, r24
    1842:	05 c0       	rjmp	.+10     	; 0x184e <vfprintf+0x2f6>
    1844:	b8 2c       	mov	r11, r8
    1846:	a3 2c       	mov	r10, r3
    1848:	03 c0       	rjmp	.+6      	; 0x1850 <vfprintf+0x2f8>
    184a:	b8 2c       	mov	r11, r8
    184c:	01 c0       	rjmp	.+2      	; 0x1850 <vfprintf+0x2f8>
    184e:	b9 2c       	mov	r11, r9
    1850:	a4 fe       	sbrs	r10, 4
    1852:	0f c0       	rjmp	.+30     	; 0x1872 <vfprintf+0x31a>
    1854:	fe 01       	movw	r30, r28
    1856:	e8 0d       	add	r30, r8
    1858:	f1 1d       	adc	r31, r1
    185a:	80 81       	ld	r24, Z
    185c:	80 33       	cpi	r24, 0x30	; 48
    185e:	21 f4       	brne	.+8      	; 0x1868 <vfprintf+0x310>
    1860:	9a 2d       	mov	r25, r10
    1862:	99 7e       	andi	r25, 0xE9	; 233
    1864:	a9 2e       	mov	r10, r25
    1866:	09 c0       	rjmp	.+18     	; 0x187a <vfprintf+0x322>
    1868:	a2 fe       	sbrs	r10, 2
    186a:	06 c0       	rjmp	.+12     	; 0x1878 <vfprintf+0x320>
    186c:	b3 94       	inc	r11
    186e:	b3 94       	inc	r11
    1870:	04 c0       	rjmp	.+8      	; 0x187a <vfprintf+0x322>
    1872:	8a 2d       	mov	r24, r10
    1874:	86 78       	andi	r24, 0x86	; 134
    1876:	09 f0       	breq	.+2      	; 0x187a <vfprintf+0x322>
    1878:	b3 94       	inc	r11
    187a:	a3 fc       	sbrc	r10, 3
    187c:	11 c0       	rjmp	.+34     	; 0x18a0 <vfprintf+0x348>
    187e:	a0 fe       	sbrs	r10, 0
    1880:	06 c0       	rjmp	.+12     	; 0x188e <vfprintf+0x336>
    1882:	b2 14       	cp	r11, r2
    1884:	88 f4       	brcc	.+34     	; 0x18a8 <vfprintf+0x350>
    1886:	28 0c       	add	r2, r8
    1888:	92 2c       	mov	r9, r2
    188a:	9b 18       	sub	r9, r11
    188c:	0e c0       	rjmp	.+28     	; 0x18aa <vfprintf+0x352>
    188e:	b2 14       	cp	r11, r2
    1890:	60 f4       	brcc	.+24     	; 0x18aa <vfprintf+0x352>
    1892:	b6 01       	movw	r22, r12
    1894:	80 e2       	ldi	r24, 0x20	; 32
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	0e 94 c6 0c 	call	0x198c	; 0x198c <fputc>
    189c:	b3 94       	inc	r11
    189e:	f7 cf       	rjmp	.-18     	; 0x188e <vfprintf+0x336>
    18a0:	b2 14       	cp	r11, r2
    18a2:	18 f4       	brcc	.+6      	; 0x18aa <vfprintf+0x352>
    18a4:	2b 18       	sub	r2, r11
    18a6:	02 c0       	rjmp	.+4      	; 0x18ac <vfprintf+0x354>
    18a8:	98 2c       	mov	r9, r8
    18aa:	21 2c       	mov	r2, r1
    18ac:	a4 fe       	sbrs	r10, 4
    18ae:	10 c0       	rjmp	.+32     	; 0x18d0 <vfprintf+0x378>
    18b0:	b6 01       	movw	r22, r12
    18b2:	80 e3       	ldi	r24, 0x30	; 48
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	0e 94 c6 0c 	call	0x198c	; 0x198c <fputc>
    18ba:	a2 fe       	sbrs	r10, 2
    18bc:	17 c0       	rjmp	.+46     	; 0x18ec <vfprintf+0x394>
    18be:	a1 fc       	sbrc	r10, 1
    18c0:	03 c0       	rjmp	.+6      	; 0x18c8 <vfprintf+0x370>
    18c2:	88 e7       	ldi	r24, 0x78	; 120
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	02 c0       	rjmp	.+4      	; 0x18cc <vfprintf+0x374>
    18c8:	88 e5       	ldi	r24, 0x58	; 88
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	b6 01       	movw	r22, r12
    18ce:	0c c0       	rjmp	.+24     	; 0x18e8 <vfprintf+0x390>
    18d0:	8a 2d       	mov	r24, r10
    18d2:	86 78       	andi	r24, 0x86	; 134
    18d4:	59 f0       	breq	.+22     	; 0x18ec <vfprintf+0x394>
    18d6:	a1 fe       	sbrs	r10, 1
    18d8:	02 c0       	rjmp	.+4      	; 0x18de <vfprintf+0x386>
    18da:	8b e2       	ldi	r24, 0x2B	; 43
    18dc:	01 c0       	rjmp	.+2      	; 0x18e0 <vfprintf+0x388>
    18de:	80 e2       	ldi	r24, 0x20	; 32
    18e0:	a7 fc       	sbrc	r10, 7
    18e2:	8d e2       	ldi	r24, 0x2D	; 45
    18e4:	b6 01       	movw	r22, r12
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	0e 94 c6 0c 	call	0x198c	; 0x198c <fputc>
    18ec:	89 14       	cp	r8, r9
    18ee:	38 f4       	brcc	.+14     	; 0x18fe <vfprintf+0x3a6>
    18f0:	b6 01       	movw	r22, r12
    18f2:	80 e3       	ldi	r24, 0x30	; 48
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	0e 94 c6 0c 	call	0x198c	; 0x198c <fputc>
    18fa:	9a 94       	dec	r9
    18fc:	f7 cf       	rjmp	.-18     	; 0x18ec <vfprintf+0x394>
    18fe:	8a 94       	dec	r8
    1900:	f3 01       	movw	r30, r6
    1902:	e8 0d       	add	r30, r8
    1904:	f1 1d       	adc	r31, r1
    1906:	80 81       	ld	r24, Z
    1908:	b6 01       	movw	r22, r12
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	0e 94 c6 0c 	call	0x198c	; 0x198c <fputc>
    1910:	81 10       	cpse	r8, r1
    1912:	f5 cf       	rjmp	.-22     	; 0x18fe <vfprintf+0x3a6>
    1914:	22 20       	and	r2, r2
    1916:	09 f4       	brne	.+2      	; 0x191a <vfprintf+0x3c2>
    1918:	42 ce       	rjmp	.-892    	; 0x159e <vfprintf+0x46>
    191a:	b6 01       	movw	r22, r12
    191c:	80 e2       	ldi	r24, 0x20	; 32
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	0e 94 c6 0c 	call	0x198c	; 0x198c <fputc>
    1924:	2a 94       	dec	r2
    1926:	f6 cf       	rjmp	.-20     	; 0x1914 <vfprintf+0x3bc>
    1928:	f6 01       	movw	r30, r12
    192a:	86 81       	ldd	r24, Z+6	; 0x06
    192c:	97 81       	ldd	r25, Z+7	; 0x07
    192e:	02 c0       	rjmp	.+4      	; 0x1934 <vfprintf+0x3dc>
    1930:	8f ef       	ldi	r24, 0xFF	; 255
    1932:	9f ef       	ldi	r25, 0xFF	; 255
    1934:	2b 96       	adiw	r28, 0x0b	; 11
    1936:	cd bf       	out	0x3d, r28	; 61
    1938:	de bf       	out	0x3e, r29	; 62
    193a:	df 91       	pop	r29
    193c:	cf 91       	pop	r28
    193e:	1f 91       	pop	r17
    1940:	0f 91       	pop	r16
    1942:	ff 90       	pop	r15
    1944:	ef 90       	pop	r14
    1946:	df 90       	pop	r13
    1948:	cf 90       	pop	r12
    194a:	bf 90       	pop	r11
    194c:	af 90       	pop	r10
    194e:	9f 90       	pop	r9
    1950:	8f 90       	pop	r8
    1952:	7f 90       	pop	r7
    1954:	6f 90       	pop	r6
    1956:	5f 90       	pop	r5
    1958:	4f 90       	pop	r4
    195a:	3f 90       	pop	r3
    195c:	2f 90       	pop	r2
    195e:	08 95       	ret

00001960 <strnlen_P>:
    1960:	fc 01       	movw	r30, r24
    1962:	05 90       	lpm	r0, Z+
    1964:	61 50       	subi	r22, 0x01	; 1
    1966:	70 40       	sbci	r23, 0x00	; 0
    1968:	01 10       	cpse	r0, r1
    196a:	d8 f7       	brcc	.-10     	; 0x1962 <strnlen_P+0x2>
    196c:	80 95       	com	r24
    196e:	90 95       	com	r25
    1970:	8e 0f       	add	r24, r30
    1972:	9f 1f       	adc	r25, r31
    1974:	08 95       	ret

00001976 <strnlen>:
    1976:	fc 01       	movw	r30, r24
    1978:	61 50       	subi	r22, 0x01	; 1
    197a:	70 40       	sbci	r23, 0x00	; 0
    197c:	01 90       	ld	r0, Z+
    197e:	01 10       	cpse	r0, r1
    1980:	d8 f7       	brcc	.-10     	; 0x1978 <strnlen+0x2>
    1982:	80 95       	com	r24
    1984:	90 95       	com	r25
    1986:	8e 0f       	add	r24, r30
    1988:	9f 1f       	adc	r25, r31
    198a:	08 95       	ret

0000198c <fputc>:
    198c:	0f 93       	push	r16
    198e:	1f 93       	push	r17
    1990:	cf 93       	push	r28
    1992:	df 93       	push	r29
    1994:	fb 01       	movw	r30, r22
    1996:	23 81       	ldd	r18, Z+3	; 0x03
    1998:	21 fd       	sbrc	r18, 1
    199a:	03 c0       	rjmp	.+6      	; 0x19a2 <fputc+0x16>
    199c:	8f ef       	ldi	r24, 0xFF	; 255
    199e:	9f ef       	ldi	r25, 0xFF	; 255
    19a0:	2c c0       	rjmp	.+88     	; 0x19fa <fputc+0x6e>
    19a2:	22 ff       	sbrs	r18, 2
    19a4:	16 c0       	rjmp	.+44     	; 0x19d2 <fputc+0x46>
    19a6:	46 81       	ldd	r20, Z+6	; 0x06
    19a8:	57 81       	ldd	r21, Z+7	; 0x07
    19aa:	24 81       	ldd	r18, Z+4	; 0x04
    19ac:	35 81       	ldd	r19, Z+5	; 0x05
    19ae:	42 17       	cp	r20, r18
    19b0:	53 07       	cpc	r21, r19
    19b2:	44 f4       	brge	.+16     	; 0x19c4 <fputc+0x38>
    19b4:	a0 81       	ld	r26, Z
    19b6:	b1 81       	ldd	r27, Z+1	; 0x01
    19b8:	9d 01       	movw	r18, r26
    19ba:	2f 5f       	subi	r18, 0xFF	; 255
    19bc:	3f 4f       	sbci	r19, 0xFF	; 255
    19be:	20 83       	st	Z, r18
    19c0:	31 83       	std	Z+1, r19	; 0x01
    19c2:	8c 93       	st	X, r24
    19c4:	26 81       	ldd	r18, Z+6	; 0x06
    19c6:	37 81       	ldd	r19, Z+7	; 0x07
    19c8:	2f 5f       	subi	r18, 0xFF	; 255
    19ca:	3f 4f       	sbci	r19, 0xFF	; 255
    19cc:	26 83       	std	Z+6, r18	; 0x06
    19ce:	37 83       	std	Z+7, r19	; 0x07
    19d0:	14 c0       	rjmp	.+40     	; 0x19fa <fputc+0x6e>
    19d2:	8b 01       	movw	r16, r22
    19d4:	ec 01       	movw	r28, r24
    19d6:	fb 01       	movw	r30, r22
    19d8:	00 84       	ldd	r0, Z+8	; 0x08
    19da:	f1 85       	ldd	r31, Z+9	; 0x09
    19dc:	e0 2d       	mov	r30, r0
    19de:	09 95       	icall
    19e0:	89 2b       	or	r24, r25
    19e2:	e1 f6       	brne	.-72     	; 0x199c <fputc+0x10>
    19e4:	d8 01       	movw	r26, r16
    19e6:	16 96       	adiw	r26, 0x06	; 6
    19e8:	8d 91       	ld	r24, X+
    19ea:	9c 91       	ld	r25, X
    19ec:	17 97       	sbiw	r26, 0x07	; 7
    19ee:	01 96       	adiw	r24, 0x01	; 1
    19f0:	16 96       	adiw	r26, 0x06	; 6
    19f2:	8d 93       	st	X+, r24
    19f4:	9c 93       	st	X, r25
    19f6:	17 97       	sbiw	r26, 0x07	; 7
    19f8:	ce 01       	movw	r24, r28
    19fa:	df 91       	pop	r29
    19fc:	cf 91       	pop	r28
    19fe:	1f 91       	pop	r17
    1a00:	0f 91       	pop	r16
    1a02:	08 95       	ret

00001a04 <__ultoa_invert>:
    1a04:	fa 01       	movw	r30, r20
    1a06:	aa 27       	eor	r26, r26
    1a08:	28 30       	cpi	r18, 0x08	; 8
    1a0a:	51 f1       	breq	.+84     	; 0x1a60 <__ultoa_invert+0x5c>
    1a0c:	20 31       	cpi	r18, 0x10	; 16
    1a0e:	81 f1       	breq	.+96     	; 0x1a70 <__ultoa_invert+0x6c>
    1a10:	e8 94       	clt
    1a12:	6f 93       	push	r22
    1a14:	6e 7f       	andi	r22, 0xFE	; 254
    1a16:	6e 5f       	subi	r22, 0xFE	; 254
    1a18:	7f 4f       	sbci	r23, 0xFF	; 255
    1a1a:	8f 4f       	sbci	r24, 0xFF	; 255
    1a1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a1e:	af 4f       	sbci	r26, 0xFF	; 255
    1a20:	b1 e0       	ldi	r27, 0x01	; 1
    1a22:	3e d0       	rcall	.+124    	; 0x1aa0 <__ultoa_invert+0x9c>
    1a24:	b4 e0       	ldi	r27, 0x04	; 4
    1a26:	3c d0       	rcall	.+120    	; 0x1aa0 <__ultoa_invert+0x9c>
    1a28:	67 0f       	add	r22, r23
    1a2a:	78 1f       	adc	r23, r24
    1a2c:	89 1f       	adc	r24, r25
    1a2e:	9a 1f       	adc	r25, r26
    1a30:	a1 1d       	adc	r26, r1
    1a32:	68 0f       	add	r22, r24
    1a34:	79 1f       	adc	r23, r25
    1a36:	8a 1f       	adc	r24, r26
    1a38:	91 1d       	adc	r25, r1
    1a3a:	a1 1d       	adc	r26, r1
    1a3c:	6a 0f       	add	r22, r26
    1a3e:	71 1d       	adc	r23, r1
    1a40:	81 1d       	adc	r24, r1
    1a42:	91 1d       	adc	r25, r1
    1a44:	a1 1d       	adc	r26, r1
    1a46:	20 d0       	rcall	.+64     	; 0x1a88 <__ultoa_invert+0x84>
    1a48:	09 f4       	brne	.+2      	; 0x1a4c <__ultoa_invert+0x48>
    1a4a:	68 94       	set
    1a4c:	3f 91       	pop	r19
    1a4e:	2a e0       	ldi	r18, 0x0A	; 10
    1a50:	26 9f       	mul	r18, r22
    1a52:	11 24       	eor	r1, r1
    1a54:	30 19       	sub	r19, r0
    1a56:	30 5d       	subi	r19, 0xD0	; 208
    1a58:	31 93       	st	Z+, r19
    1a5a:	de f6       	brtc	.-74     	; 0x1a12 <__ultoa_invert+0xe>
    1a5c:	cf 01       	movw	r24, r30
    1a5e:	08 95       	ret
    1a60:	46 2f       	mov	r20, r22
    1a62:	47 70       	andi	r20, 0x07	; 7
    1a64:	40 5d       	subi	r20, 0xD0	; 208
    1a66:	41 93       	st	Z+, r20
    1a68:	b3 e0       	ldi	r27, 0x03	; 3
    1a6a:	0f d0       	rcall	.+30     	; 0x1a8a <__ultoa_invert+0x86>
    1a6c:	c9 f7       	brne	.-14     	; 0x1a60 <__ultoa_invert+0x5c>
    1a6e:	f6 cf       	rjmp	.-20     	; 0x1a5c <__ultoa_invert+0x58>
    1a70:	46 2f       	mov	r20, r22
    1a72:	4f 70       	andi	r20, 0x0F	; 15
    1a74:	40 5d       	subi	r20, 0xD0	; 208
    1a76:	4a 33       	cpi	r20, 0x3A	; 58
    1a78:	18 f0       	brcs	.+6      	; 0x1a80 <__ultoa_invert+0x7c>
    1a7a:	49 5d       	subi	r20, 0xD9	; 217
    1a7c:	31 fd       	sbrc	r19, 1
    1a7e:	40 52       	subi	r20, 0x20	; 32
    1a80:	41 93       	st	Z+, r20
    1a82:	02 d0       	rcall	.+4      	; 0x1a88 <__ultoa_invert+0x84>
    1a84:	a9 f7       	brne	.-22     	; 0x1a70 <__ultoa_invert+0x6c>
    1a86:	ea cf       	rjmp	.-44     	; 0x1a5c <__ultoa_invert+0x58>
    1a88:	b4 e0       	ldi	r27, 0x04	; 4
    1a8a:	a6 95       	lsr	r26
    1a8c:	97 95       	ror	r25
    1a8e:	87 95       	ror	r24
    1a90:	77 95       	ror	r23
    1a92:	67 95       	ror	r22
    1a94:	ba 95       	dec	r27
    1a96:	c9 f7       	brne	.-14     	; 0x1a8a <__ultoa_invert+0x86>
    1a98:	00 97       	sbiw	r24, 0x00	; 0
    1a9a:	61 05       	cpc	r22, r1
    1a9c:	71 05       	cpc	r23, r1
    1a9e:	08 95       	ret
    1aa0:	9b 01       	movw	r18, r22
    1aa2:	ac 01       	movw	r20, r24
    1aa4:	0a 2e       	mov	r0, r26
    1aa6:	06 94       	lsr	r0
    1aa8:	57 95       	ror	r21
    1aaa:	47 95       	ror	r20
    1aac:	37 95       	ror	r19
    1aae:	27 95       	ror	r18
    1ab0:	ba 95       	dec	r27
    1ab2:	c9 f7       	brne	.-14     	; 0x1aa6 <__ultoa_invert+0xa2>
    1ab4:	62 0f       	add	r22, r18
    1ab6:	73 1f       	adc	r23, r19
    1ab8:	84 1f       	adc	r24, r20
    1aba:	95 1f       	adc	r25, r21
    1abc:	a0 1d       	adc	r26, r0
    1abe:	08 95       	ret

00001ac0 <__do_global_dtors>:
    1ac0:	10 e0       	ldi	r17, 0x00	; 0
    1ac2:	cb e7       	ldi	r28, 0x7B	; 123
    1ac4:	d0 e0       	ldi	r29, 0x00	; 0
    1ac6:	04 c0       	rjmp	.+8      	; 0x1ad0 <__do_global_dtors+0x10>
    1ac8:	fe 01       	movw	r30, r28
    1aca:	0e 94 8f 0a 	call	0x151e	; 0x151e <__tablejump2__>
    1ace:	21 96       	adiw	r28, 0x01	; 1
    1ad0:	cc 37       	cpi	r28, 0x7C	; 124
    1ad2:	d1 07       	cpc	r29, r17
    1ad4:	c9 f7       	brne	.-14     	; 0x1ac8 <__do_global_dtors+0x8>
    1ad6:	f8 94       	cli

00001ad8 <__stop_program>:
    1ad8:	ff cf       	rjmp	.-2      	; 0x1ad8 <__stop_program>
