
Zero_Cross_Detector_lib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000068  00804000  00001af4  00001b88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001af4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000074  00804068  00804068  00001bf0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001bf0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c4c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000608  00000000  00000000  00001c90  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a7d5  00000000  00000000  00002298  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004703  00000000  00000000  0000ca6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002cf3  00000000  00000000  00011170  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e30  00000000  00000000  00013e64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006134  00000000  00000000  00014c94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001b57  00000000  00000000  0001adc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004b8  00000000  00000000  0001c91f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__dtors_end>
       4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
       8:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
       c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      10:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      14:	0c 94 2b 02 	jmp	0x456	; 0x456 <__vector_5>
      18:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      1c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      20:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      24:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      28:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      2c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      30:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      34:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      38:	0c 94 13 06 	jmp	0xc26	; 0xc26 <__vector_14>
      3c:	0c 94 88 06 	jmp	0xd10	; 0xd10 <__vector_15>
      40:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      44:	0c 94 fd 06 	jmp	0xdfa	; 0xdfa <__vector_17>
      48:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      4c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      50:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      54:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      58:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      5c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      60:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      64:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      68:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      6c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      70:	0c 94 a9 05 	jmp	0xb52	; 0xb52 <__vector_28>
      74:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      78:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      7c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      80:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      84:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      88:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      8c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      90:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      94:	0c 94 52 04 	jmp	0x8a4	; 0x8a4 <__vector_37>
      98:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      9c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      a0:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      a4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      a8:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      ac:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      b0:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      b4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      b8:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      bc:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      c0:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      c4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      c8:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      cc:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      d0:	0c 94 de 05 	jmp	0xbbc	; 0xbbc <__vector_52>
      d4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      d8:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      dc:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      e0:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      e4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      e8:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      ec:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      f0:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>

000000f4 <__ctors_start>:
      f4:	22 04       	cpc	r2, r2

000000f6 <__ctors_end>:
      f6:	2f 04       	cpc	r2, r15

000000f8 <__dtors_end>:
      f8:	11 24       	eor	r1, r1
      fa:	1f be       	out	0x3f, r1	; 63
      fc:	cf ef       	ldi	r28, 0xFF	; 255
      fe:	cd bf       	out	0x3d, r28	; 61
     100:	df e7       	ldi	r29, 0x7F	; 127
     102:	de bf       	out	0x3e, r29	; 62

00000104 <__do_copy_data>:
     104:	10 e4       	ldi	r17, 0x40	; 64
     106:	a0 e0       	ldi	r26, 0x00	; 0
     108:	b0 e4       	ldi	r27, 0x40	; 64
     10a:	e4 ef       	ldi	r30, 0xF4	; 244
     10c:	fa e1       	ldi	r31, 0x1A	; 26
     10e:	00 e0       	ldi	r16, 0x00	; 0
     110:	0b bf       	out	0x3b, r16	; 59
     112:	02 c0       	rjmp	.+4      	; 0x118 <__do_copy_data+0x14>
     114:	07 90       	elpm	r0, Z+
     116:	0d 92       	st	X+, r0
     118:	a8 36       	cpi	r26, 0x68	; 104
     11a:	b1 07       	cpc	r27, r17
     11c:	d9 f7       	brne	.-10     	; 0x114 <__do_copy_data+0x10>

0000011e <__do_clear_bss>:
     11e:	20 e4       	ldi	r18, 0x40	; 64
     120:	a8 e6       	ldi	r26, 0x68	; 104
     122:	b0 e4       	ldi	r27, 0x40	; 64
     124:	01 c0       	rjmp	.+2      	; 0x128 <.do_clear_bss_start>

00000126 <.do_clear_bss_loop>:
     126:	1d 92       	st	X+, r1

00000128 <.do_clear_bss_start>:
     128:	ac 3d       	cpi	r26, 0xDC	; 220
     12a:	b2 07       	cpc	r27, r18
     12c:	e1 f7       	brne	.-8      	; 0x126 <.do_clear_bss_loop>

0000012e <__do_global_ctors>:
     12e:	10 e0       	ldi	r17, 0x00	; 0
     130:	cb e7       	ldi	r28, 0x7B	; 123
     132:	d0 e0       	ldi	r29, 0x00	; 0
     134:	04 c0       	rjmp	.+8      	; 0x13e <__do_global_ctors+0x10>
     136:	21 97       	sbiw	r28, 0x01	; 1
     138:	fe 01       	movw	r30, r28
     13a:	0e 94 9c 0a 	call	0x1538	; 0x1538 <__tablejump2__>
     13e:	ca 37       	cpi	r28, 0x7A	; 122
     140:	d1 07       	cpc	r29, r17
     142:	c9 f7       	brne	.-14     	; 0x136 <__do_global_ctors+0x8>
     144:	0e 94 63 02 	call	0x4c6	; 0x4c6 <main>
     148:	0c 94 6d 0d 	jmp	0x1ada	; 0x1ada <__do_global_dtors>

0000014c <__bad_interrupt>:
     14c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000150 <_ZN19FREQUENCY_ESTIMATORC1Ev>:
	
		
	}
	current_frequency=(uint32_t)(24000000/(average_counter));
	return current_frequency;
}
     150:	cf 93       	push	r28
     152:	df 93       	push	r29
     154:	00 d0       	rcall	.+0      	; 0x156 <_ZN19FREQUENCY_ESTIMATORC1Ev+0x6>
     156:	cd b7       	in	r28, 0x3d	; 61
     158:	de b7       	in	r29, 0x3e	; 62
     15a:	89 83       	std	Y+1, r24	; 0x01
     15c:	9a 83       	std	Y+2, r25	; 0x02
     15e:	89 81       	ldd	r24, Y+1	; 0x01
     160:	9a 81       	ldd	r25, Y+2	; 0x02
     162:	fc 01       	movw	r30, r24
     164:	12 8a       	std	Z+18, r1	; 0x12
     166:	00 00       	nop
     168:	0f 90       	pop	r0
     16a:	0f 90       	pop	r0
     16c:	df 91       	pop	r29
     16e:	cf 91       	pop	r28
     170:	08 95       	ret

00000172 <_ZN19FREQUENCY_ESTIMATORD1Ev>:
     172:	cf 93       	push	r28
     174:	df 93       	push	r29
     176:	00 d0       	rcall	.+0      	; 0x178 <_ZN19FREQUENCY_ESTIMATORD1Ev+0x6>
     178:	cd b7       	in	r28, 0x3d	; 61
     17a:	de b7       	in	r29, 0x3e	; 62
     17c:	89 83       	std	Y+1, r24	; 0x01
     17e:	9a 83       	std	Y+2, r25	; 0x02
     180:	00 00       	nop
     182:	0f 90       	pop	r0
     184:	0f 90       	pop	r0
     186:	df 91       	pop	r29
     188:	cf 91       	pop	r28
     18a:	08 95       	ret

0000018c <_ZN19FREQUENCY_ESTIMATOR22OnCapture_Frequecy_OutEv>:
uint32_t FREQUENCY_ESTIMATOR::OnCapture_Frequecy_Out(void){
     18c:	cf 93       	push	r28
     18e:	df 93       	push	r29
     190:	00 d0       	rcall	.+0      	; 0x192 <_ZN19FREQUENCY_ESTIMATOR22OnCapture_Frequecy_OutEv+0x6>
     192:	cd b7       	in	r28, 0x3d	; 61
     194:	de b7       	in	r29, 0x3e	; 62
     196:	89 83       	std	Y+1, r24	; 0x01
     198:	9a 83       	std	Y+2, r25	; 0x02
		capture_timer_falling=*timer_fall;
     19a:	89 81       	ldd	r24, Y+1	; 0x01
     19c:	9a 81       	ldd	r25, Y+2	; 0x02
     19e:	fc 01       	movw	r30, r24
     1a0:	80 81       	ld	r24, Z
     1a2:	91 81       	ldd	r25, Z+1	; 0x01
     1a4:	fc 01       	movw	r30, r24
     1a6:	20 81       	ld	r18, Z
     1a8:	31 81       	ldd	r19, Z+1	; 0x01
     1aa:	89 81       	ldd	r24, Y+1	; 0x01
     1ac:	9a 81       	ldd	r25, Y+2	; 0x02
     1ae:	fc 01       	movw	r30, r24
     1b0:	24 83       	std	Z+4, r18	; 0x04
     1b2:	35 83       	std	Z+5, r19	; 0x05
		capture_timer_rising=*timer_rise;
     1b4:	89 81       	ldd	r24, Y+1	; 0x01
     1b6:	9a 81       	ldd	r25, Y+2	; 0x02
     1b8:	fc 01       	movw	r30, r24
     1ba:	82 81       	ldd	r24, Z+2	; 0x02
     1bc:	93 81       	ldd	r25, Z+3	; 0x03
     1be:	fc 01       	movw	r30, r24
     1c0:	20 81       	ld	r18, Z
     1c2:	31 81       	ldd	r19, Z+1	; 0x01
     1c4:	89 81       	ldd	r24, Y+1	; 0x01
     1c6:	9a 81       	ldd	r25, Y+2	; 0x02
     1c8:	fc 01       	movw	r30, r24
     1ca:	26 83       	std	Z+6, r18	; 0x06
     1cc:	37 83       	std	Z+7, r19	; 0x07
	if ((tako->got_value_r&tako->got_value_f)&(capture_timer_rising>0)&(capture_timer_falling>0))
     1ce:	80 91 c2 40 	lds	r24, 0x40C2	; 0x8040c2 <tako>
     1d2:	90 91 c3 40 	lds	r25, 0x40C3	; 0x8040c3 <tako+0x1>
     1d6:	fc 01       	movw	r30, r24
     1d8:	86 89       	ldd	r24, Z+22	; 0x16
     1da:	28 2f       	mov	r18, r24
     1dc:	30 e0       	ldi	r19, 0x00	; 0
     1de:	80 91 c2 40 	lds	r24, 0x40C2	; 0x8040c2 <tako>
     1e2:	90 91 c3 40 	lds	r25, 0x40C3	; 0x8040c3 <tako+0x1>
     1e6:	fc 01       	movw	r30, r24
     1e8:	87 89       	ldd	r24, Z+23	; 0x17
     1ea:	88 2f       	mov	r24, r24
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	28 23       	and	r18, r24
     1f0:	39 23       	and	r19, r25
     1f2:	89 81       	ldd	r24, Y+1	; 0x01
     1f4:	9a 81       	ldd	r25, Y+2	; 0x02
     1f6:	fc 01       	movw	r30, r24
     1f8:	86 81       	ldd	r24, Z+6	; 0x06
     1fa:	97 81       	ldd	r25, Z+7	; 0x07
     1fc:	41 e0       	ldi	r20, 0x01	; 1
     1fe:	89 2b       	or	r24, r25
     200:	09 f4       	brne	.+2      	; 0x204 <__EEPROM_REGION_LENGTH__+0x4>
     202:	40 e0       	ldi	r20, 0x00	; 0
     204:	84 2f       	mov	r24, r20
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	28 23       	and	r18, r24
     20a:	39 23       	and	r19, r25
     20c:	89 81       	ldd	r24, Y+1	; 0x01
     20e:	9a 81       	ldd	r25, Y+2	; 0x02
     210:	fc 01       	movw	r30, r24
     212:	84 81       	ldd	r24, Z+4	; 0x04
     214:	95 81       	ldd	r25, Z+5	; 0x05
     216:	41 e0       	ldi	r20, 0x01	; 1
     218:	89 2b       	or	r24, r25
     21a:	09 f4       	brne	.+2      	; 0x21e <__EEPROM_REGION_LENGTH__+0x1e>
     21c:	40 e0       	ldi	r20, 0x00	; 0
     21e:	84 2f       	mov	r24, r20
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	82 23       	and	r24, r18
     224:	93 23       	and	r25, r19
     226:	21 e0       	ldi	r18, 0x01	; 1
     228:	89 2b       	or	r24, r25
     22a:	09 f4       	brne	.+2      	; 0x22e <__EEPROM_REGION_LENGTH__+0x2e>
     22c:	20 e0       	ldi	r18, 0x00	; 0
     22e:	22 23       	and	r18, r18
     230:	09 f4       	brne	.+2      	; 0x234 <__EEPROM_REGION_LENGTH__+0x34>
     232:	40 c0       	rjmp	.+128    	; 0x2b4 <__EEPROM_REGION_LENGTH__+0xb4>
	{
		min_capture=capture_timer_rising<capture_timer_falling?capture_timer_rising:capture_timer_falling;
     234:	89 81       	ldd	r24, Y+1	; 0x01
     236:	9a 81       	ldd	r25, Y+2	; 0x02
     238:	fc 01       	movw	r30, r24
     23a:	26 81       	ldd	r18, Z+6	; 0x06
     23c:	37 81       	ldd	r19, Z+7	; 0x07
     23e:	89 81       	ldd	r24, Y+1	; 0x01
     240:	9a 81       	ldd	r25, Y+2	; 0x02
     242:	fc 01       	movw	r30, r24
     244:	84 81       	ldd	r24, Z+4	; 0x04
     246:	95 81       	ldd	r25, Z+5	; 0x05
     248:	28 17       	cp	r18, r24
     24a:	39 07       	cpc	r19, r25
     24c:	30 f4       	brcc	.+12     	; 0x25a <__EEPROM_REGION_LENGTH__+0x5a>
     24e:	89 81       	ldd	r24, Y+1	; 0x01
     250:	9a 81       	ldd	r25, Y+2	; 0x02
     252:	fc 01       	movw	r30, r24
     254:	86 81       	ldd	r24, Z+6	; 0x06
     256:	97 81       	ldd	r25, Z+7	; 0x07
     258:	05 c0       	rjmp	.+10     	; 0x264 <__EEPROM_REGION_LENGTH__+0x64>
     25a:	89 81       	ldd	r24, Y+1	; 0x01
     25c:	9a 81       	ldd	r25, Y+2	; 0x02
     25e:	fc 01       	movw	r30, r24
     260:	84 81       	ldd	r24, Z+4	; 0x04
     262:	95 81       	ldd	r25, Z+5	; 0x05
     264:	29 81       	ldd	r18, Y+1	; 0x01
     266:	3a 81       	ldd	r19, Y+2	; 0x02
     268:	f9 01       	movw	r30, r18
     26a:	80 87       	std	Z+8, r24	; 0x08
     26c:	91 87       	std	Z+9, r25	; 0x09
		if (min_capture>0)
     26e:	89 81       	ldd	r24, Y+1	; 0x01
     270:	9a 81       	ldd	r25, Y+2	; 0x02
     272:	fc 01       	movw	r30, r24
     274:	80 85       	ldd	r24, Z+8	; 0x08
     276:	91 85       	ldd	r25, Z+9	; 0x09
     278:	89 2b       	or	r24, r25
     27a:	81 f0       	breq	.+32     	; 0x29c <__EEPROM_REGION_LENGTH__+0x9c>
		{
			average_counter=min_capture;
     27c:	89 81       	ldd	r24, Y+1	; 0x01
     27e:	9a 81       	ldd	r25, Y+2	; 0x02
     280:	fc 01       	movw	r30, r24
     282:	80 85       	ldd	r24, Z+8	; 0x08
     284:	91 85       	ldd	r25, Z+9	; 0x09
     286:	cc 01       	movw	r24, r24
     288:	a0 e0       	ldi	r26, 0x00	; 0
     28a:	b0 e0       	ldi	r27, 0x00	; 0
     28c:	29 81       	ldd	r18, Y+1	; 0x01
     28e:	3a 81       	ldd	r19, Y+2	; 0x02
     290:	f9 01       	movw	r30, r18
     292:	82 87       	std	Z+10, r24	; 0x0a
     294:	93 87       	std	Z+11, r25	; 0x0b
     296:	a4 87       	std	Z+12, r26	; 0x0c
     298:	b5 87       	std	Z+13, r27	; 0x0d
     29a:	6d c0       	rjmp	.+218    	; 0x376 <__EEPROM_REGION_LENGTH__+0x176>
		} 
		else
		{
			average_counter=2;
     29c:	29 81       	ldd	r18, Y+1	; 0x01
     29e:	3a 81       	ldd	r19, Y+2	; 0x02
     2a0:	82 e0       	ldi	r24, 0x02	; 2
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	a0 e0       	ldi	r26, 0x00	; 0
     2a6:	b0 e0       	ldi	r27, 0x00	; 0
     2a8:	f9 01       	movw	r30, r18
     2aa:	82 87       	std	Z+10, r24	; 0x0a
     2ac:	93 87       	std	Z+11, r25	; 0x0b
     2ae:	a4 87       	std	Z+12, r26	; 0x0c
     2b0:	b5 87       	std	Z+13, r27	; 0x0d
     2b2:	61 c0       	rjmp	.+194    	; 0x376 <__EEPROM_REGION_LENGTH__+0x176>
		}
		
	}
	else
	{
		if ((tako->got_value_r)&(capture_timer_rising>0))
     2b4:	80 91 c2 40 	lds	r24, 0x40C2	; 0x8040c2 <tako>
     2b8:	90 91 c3 40 	lds	r25, 0x40C3	; 0x8040c3 <tako+0x1>
     2bc:	fc 01       	movw	r30, r24
     2be:	86 89       	ldd	r24, Z+22	; 0x16
     2c0:	28 2f       	mov	r18, r24
     2c2:	30 e0       	ldi	r19, 0x00	; 0
     2c4:	89 81       	ldd	r24, Y+1	; 0x01
     2c6:	9a 81       	ldd	r25, Y+2	; 0x02
     2c8:	fc 01       	movw	r30, r24
     2ca:	86 81       	ldd	r24, Z+6	; 0x06
     2cc:	97 81       	ldd	r25, Z+7	; 0x07
     2ce:	41 e0       	ldi	r20, 0x01	; 1
     2d0:	89 2b       	or	r24, r25
     2d2:	09 f4       	brne	.+2      	; 0x2d6 <__EEPROM_REGION_LENGTH__+0xd6>
     2d4:	40 e0       	ldi	r20, 0x00	; 0
     2d6:	84 2f       	mov	r24, r20
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	82 23       	and	r24, r18
     2dc:	93 23       	and	r25, r19
     2de:	21 e0       	ldi	r18, 0x01	; 1
     2e0:	89 2b       	or	r24, r25
     2e2:	09 f4       	brne	.+2      	; 0x2e6 <__EEPROM_REGION_LENGTH__+0xe6>
     2e4:	20 e0       	ldi	r18, 0x00	; 0
     2e6:	22 23       	and	r18, r18
     2e8:	81 f0       	breq	.+32     	; 0x30a <__EEPROM_REGION_LENGTH__+0x10a>
		{
			average_counter=capture_timer_rising;
     2ea:	89 81       	ldd	r24, Y+1	; 0x01
     2ec:	9a 81       	ldd	r25, Y+2	; 0x02
     2ee:	fc 01       	movw	r30, r24
     2f0:	86 81       	ldd	r24, Z+6	; 0x06
     2f2:	97 81       	ldd	r25, Z+7	; 0x07
     2f4:	cc 01       	movw	r24, r24
     2f6:	a0 e0       	ldi	r26, 0x00	; 0
     2f8:	b0 e0       	ldi	r27, 0x00	; 0
     2fa:	29 81       	ldd	r18, Y+1	; 0x01
     2fc:	3a 81       	ldd	r19, Y+2	; 0x02
     2fe:	f9 01       	movw	r30, r18
     300:	82 87       	std	Z+10, r24	; 0x0a
     302:	93 87       	std	Z+11, r25	; 0x0b
     304:	a4 87       	std	Z+12, r26	; 0x0c
     306:	b5 87       	std	Z+13, r27	; 0x0d
     308:	36 c0       	rjmp	.+108    	; 0x376 <__EEPROM_REGION_LENGTH__+0x176>
		} 
		else
		{
			if ((tako->got_value_f)&(capture_timer_falling>0))
     30a:	80 91 c2 40 	lds	r24, 0x40C2	; 0x8040c2 <tako>
     30e:	90 91 c3 40 	lds	r25, 0x40C3	; 0x8040c3 <tako+0x1>
     312:	fc 01       	movw	r30, r24
     314:	87 89       	ldd	r24, Z+23	; 0x17
     316:	28 2f       	mov	r18, r24
     318:	30 e0       	ldi	r19, 0x00	; 0
     31a:	89 81       	ldd	r24, Y+1	; 0x01
     31c:	9a 81       	ldd	r25, Y+2	; 0x02
     31e:	fc 01       	movw	r30, r24
     320:	84 81       	ldd	r24, Z+4	; 0x04
     322:	95 81       	ldd	r25, Z+5	; 0x05
     324:	41 e0       	ldi	r20, 0x01	; 1
     326:	89 2b       	or	r24, r25
     328:	09 f4       	brne	.+2      	; 0x32c <__EEPROM_REGION_LENGTH__+0x12c>
     32a:	40 e0       	ldi	r20, 0x00	; 0
     32c:	84 2f       	mov	r24, r20
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	82 23       	and	r24, r18
     332:	93 23       	and	r25, r19
     334:	21 e0       	ldi	r18, 0x01	; 1
     336:	89 2b       	or	r24, r25
     338:	09 f4       	brne	.+2      	; 0x33c <__EEPROM_REGION_LENGTH__+0x13c>
     33a:	20 e0       	ldi	r18, 0x00	; 0
     33c:	22 23       	and	r18, r18
     33e:	81 f0       	breq	.+32     	; 0x360 <__EEPROM_REGION_LENGTH__+0x160>
			{
				average_counter=capture_timer_falling;
     340:	89 81       	ldd	r24, Y+1	; 0x01
     342:	9a 81       	ldd	r25, Y+2	; 0x02
     344:	fc 01       	movw	r30, r24
     346:	84 81       	ldd	r24, Z+4	; 0x04
     348:	95 81       	ldd	r25, Z+5	; 0x05
     34a:	cc 01       	movw	r24, r24
     34c:	a0 e0       	ldi	r26, 0x00	; 0
     34e:	b0 e0       	ldi	r27, 0x00	; 0
     350:	29 81       	ldd	r18, Y+1	; 0x01
     352:	3a 81       	ldd	r19, Y+2	; 0x02
     354:	f9 01       	movw	r30, r18
     356:	82 87       	std	Z+10, r24	; 0x0a
     358:	93 87       	std	Z+11, r25	; 0x0b
     35a:	a4 87       	std	Z+12, r26	; 0x0c
     35c:	b5 87       	std	Z+13, r27	; 0x0d
     35e:	0b c0       	rjmp	.+22     	; 0x376 <__EEPROM_REGION_LENGTH__+0x176>
			} 
			else
			{
				average_counter=1;
     360:	29 81       	ldd	r18, Y+1	; 0x01
     362:	3a 81       	ldd	r19, Y+2	; 0x02
     364:	81 e0       	ldi	r24, 0x01	; 1
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	a0 e0       	ldi	r26, 0x00	; 0
     36a:	b0 e0       	ldi	r27, 0x00	; 0
     36c:	f9 01       	movw	r30, r18
     36e:	82 87       	std	Z+10, r24	; 0x0a
     370:	93 87       	std	Z+11, r25	; 0x0b
     372:	a4 87       	std	Z+12, r26	; 0x0c
     374:	b5 87       	std	Z+13, r27	; 0x0d
			}
		}
	}
	current_frequency=(uint32_t)(24000000/(average_counter));
     376:	89 81       	ldd	r24, Y+1	; 0x01
     378:	9a 81       	ldd	r25, Y+2	; 0x02
     37a:	fc 01       	movw	r30, r24
     37c:	22 85       	ldd	r18, Z+10	; 0x0a
     37e:	33 85       	ldd	r19, Z+11	; 0x0b
     380:	44 85       	ldd	r20, Z+12	; 0x0c
     382:	55 85       	ldd	r21, Z+13	; 0x0d
     384:	80 e0       	ldi	r24, 0x00	; 0
     386:	96 e3       	ldi	r25, 0x36	; 54
     388:	ae e6       	ldi	r26, 0x6E	; 110
     38a:	b1 e0       	ldi	r27, 0x01	; 1
     38c:	bc 01       	movw	r22, r24
     38e:	cd 01       	movw	r24, r26
     390:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__udivmodsi4>
     394:	da 01       	movw	r26, r20
     396:	c9 01       	movw	r24, r18
     398:	29 81       	ldd	r18, Y+1	; 0x01
     39a:	3a 81       	ldd	r19, Y+2	; 0x02
     39c:	f9 01       	movw	r30, r18
     39e:	86 87       	std	Z+14, r24	; 0x0e
     3a0:	97 87       	std	Z+15, r25	; 0x0f
     3a2:	a0 8b       	std	Z+16, r26	; 0x10
     3a4:	b1 8b       	std	Z+17, r27	; 0x11
	return current_frequency;	
     3a6:	89 81       	ldd	r24, Y+1	; 0x01
     3a8:	9a 81       	ldd	r25, Y+2	; 0x02
     3aa:	fc 01       	movw	r30, r24
     3ac:	86 85       	ldd	r24, Z+14	; 0x0e
     3ae:	97 85       	ldd	r25, Z+15	; 0x0f
     3b0:	a0 89       	ldd	r26, Z+16	; 0x10
     3b2:	b1 89       	ldd	r27, Z+17	; 0x11
     3b4:	bc 01       	movw	r22, r24
     3b6:	cd 01       	movw	r24, r26
     3b8:	0f 90       	pop	r0
     3ba:	0f 90       	pop	r0
     3bc:	df 91       	pop	r29
     3be:	cf 91       	pop	r28
     3c0:	08 95       	ret

000003c2 <PORTB_toggle_pin_level>:
 * Toggle the pin levels on pins defined by bit mask
 *
 * \param[in] pin       The pin number within port
 */
static inline void PORTB_toggle_pin_level(const uint8_t pin)
{
     3c2:	cf 93       	push	r28
     3c4:	df 93       	push	r29
     3c6:	1f 92       	push	r1
     3c8:	cd b7       	in	r28, 0x3d	; 61
     3ca:	de b7       	in	r29, 0x3e	; 62
     3cc:	89 83       	std	Y+1, r24	; 0x01
	VPORTB.IN |= 1 << pin;
     3ce:	84 e0       	ldi	r24, 0x04	; 4
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	24 e0       	ldi	r18, 0x04	; 4
     3d4:	30 e0       	ldi	r19, 0x00	; 0
     3d6:	f9 01       	movw	r30, r18
     3d8:	22 81       	ldd	r18, Z+2	; 0x02
     3da:	62 2f       	mov	r22, r18
     3dc:	29 81       	ldd	r18, Y+1	; 0x01
     3de:	42 2f       	mov	r20, r18
     3e0:	50 e0       	ldi	r21, 0x00	; 0
     3e2:	21 e0       	ldi	r18, 0x01	; 1
     3e4:	30 e0       	ldi	r19, 0x00	; 0
     3e6:	02 c0       	rjmp	.+4      	; 0x3ec <PORTB_toggle_pin_level+0x2a>
     3e8:	22 0f       	add	r18, r18
     3ea:	33 1f       	adc	r19, r19
     3ec:	4a 95       	dec	r20
     3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <PORTB_toggle_pin_level+0x26>
     3f0:	26 2b       	or	r18, r22
     3f2:	fc 01       	movw	r30, r24
     3f4:	22 83       	std	Z+2, r18	; 0x02
}
     3f6:	00 00       	nop
     3f8:	0f 90       	pop	r0
     3fa:	df 91       	pop	r29
     3fc:	cf 91       	pop	r28
     3fe:	08 95       	ret

00000400 <LED0_toggle_level>:
 * \brief Toggle output level on LED0
 *
 * Toggle the pin level
 */
static inline void LED0_toggle_level()
{
     400:	cf 93       	push	r28
     402:	df 93       	push	r29
     404:	cd b7       	in	r28, 0x3d	; 61
     406:	de b7       	in	r29, 0x3e	; 62
	PORTB_toggle_pin_level(3);
     408:	83 e0       	ldi	r24, 0x03	; 3
     40a:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <PORTB_toggle_pin_level>
}
     40e:	00 00       	nop
     410:	df 91       	pop	r29
     412:	cf 91       	pop	r28
     414:	08 95       	ret

00000416 <_Z10RTC_enablev>:
static SPI_SLAVE_CLASS post_static;



void RTC_enable(void)
{
     416:	cf 93       	push	r28
     418:	df 93       	push	r29
     41a:	cd b7       	in	r28, 0x3d	; 61
     41c:	de b7       	in	r29, 0x3e	; 62
	// Wait for RTC CTRLA to be unsynchronized
	while (RTC.STATUS & RTC_CTRLABUSY_bm) {
     41e:	80 e4       	ldi	r24, 0x40	; 64
     420:	91 e0       	ldi	r25, 0x01	; 1
     422:	fc 01       	movw	r30, r24
     424:	81 81       	ldd	r24, Z+1	; 0x01
     426:	88 2f       	mov	r24, r24
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	81 70       	andi	r24, 0x01	; 1
     42c:	99 27       	eor	r25, r25
     42e:	21 e0       	ldi	r18, 0x01	; 1
     430:	89 2b       	or	r24, r25
     432:	09 f4       	brne	.+2      	; 0x436 <_Z10RTC_enablev+0x20>
     434:	20 e0       	ldi	r18, 0x00	; 0
     436:	22 23       	and	r18, r18
     438:	09 f0       	breq	.+2      	; 0x43c <_Z10RTC_enablev+0x26>
     43a:	f1 cf       	rjmp	.-30     	; 0x41e <_Z10RTC_enablev+0x8>
	}

	// Enable RTC
	RTC.CTRLA |= RTC_RTCEN_bm;
     43c:	80 e4       	ldi	r24, 0x40	; 64
     43e:	91 e0       	ldi	r25, 0x01	; 1
     440:	20 e4       	ldi	r18, 0x40	; 64
     442:	31 e0       	ldi	r19, 0x01	; 1
     444:	f9 01       	movw	r30, r18
     446:	20 81       	ld	r18, Z
     448:	21 60       	ori	r18, 0x01	; 1
     44a:	fc 01       	movw	r30, r24
     44c:	20 83       	st	Z, r18
}
     44e:	00 00       	nop
     450:	df 91       	pop	r29
     452:	cf 91       	pop	r28
     454:	08 95       	ret

00000456 <__vector_5>:

ISR(RTC_CNT_vect)
{
     456:	1f 92       	push	r1
     458:	0f 92       	push	r0
     45a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     45e:	0f 92       	push	r0
     460:	11 24       	eor	r1, r1
     462:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     466:	0f 92       	push	r0
     468:	2f 93       	push	r18
     46a:	3f 93       	push	r19
     46c:	4f 93       	push	r20
     46e:	5f 93       	push	r21
     470:	6f 93       	push	r22
     472:	7f 93       	push	r23
     474:	8f 93       	push	r24
     476:	9f 93       	push	r25
     478:	af 93       	push	r26
     47a:	bf 93       	push	r27
     47c:	ef 93       	push	r30
     47e:	ff 93       	push	r31
     480:	cf 93       	push	r28
     482:	df 93       	push	r29
     484:	cd b7       	in	r28, 0x3d	; 61
     486:	de b7       	in	r29, 0x3e	; 62
	/* Toggle LED0 */
	LED0_toggle_level();
     488:	0e 94 00 02 	call	0x400	; 0x400 <LED0_toggle_level>

	/* Overflow interrupt flag has to be cleared manually */
	RTC.INTFLAGS = RTC_OVF_bm;
     48c:	80 e4       	ldi	r24, 0x40	; 64
     48e:	91 e0       	ldi	r25, 0x01	; 1
     490:	21 e0       	ldi	r18, 0x01	; 1
     492:	fc 01       	movw	r30, r24
     494:	23 83       	std	Z+3, r18	; 0x03
}
     496:	00 00       	nop
     498:	df 91       	pop	r29
     49a:	cf 91       	pop	r28
     49c:	ff 91       	pop	r31
     49e:	ef 91       	pop	r30
     4a0:	bf 91       	pop	r27
     4a2:	af 91       	pop	r26
     4a4:	9f 91       	pop	r25
     4a6:	8f 91       	pop	r24
     4a8:	7f 91       	pop	r23
     4aa:	6f 91       	pop	r22
     4ac:	5f 91       	pop	r21
     4ae:	4f 91       	pop	r20
     4b0:	3f 91       	pop	r19
     4b2:	2f 91       	pop	r18
     4b4:	0f 90       	pop	r0
     4b6:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     4ba:	0f 90       	pop	r0
     4bc:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     4c0:	0f 90       	pop	r0
     4c2:	1f 90       	pop	r1
     4c4:	18 95       	reti

000004c6 <main>:

int main(void)
{
     4c6:	cf 93       	push	r28
     4c8:	df 93       	push	r29
     4ca:	cd b7       	in	r28, 0x3d	; 61
     4cc:	de b7       	in	r29, 0x3e	; 62
     4ce:	62 97       	sbiw	r28, 0x12	; 18
     4d0:	cd bf       	out	0x3d, r28	; 61
     4d2:	de bf       	out	0x3e, r29	; 62
	uint16_t counter_printf=0;
     4d4:	19 82       	std	Y+1, r1	; 0x01
     4d6:	1a 82       	std	Y+2, r1	; 0x02
	uint32_t last_frequency_b=0;
     4d8:	1b 82       	std	Y+3, r1	; 0x03
     4da:	1c 82       	std	Y+4, r1	; 0x04
     4dc:	1d 82       	std	Y+5, r1	; 0x05
     4de:	1e 82       	std	Y+6, r1	; 0x06
	uint32_t last_frequency_c=0;
     4e0:	1f 82       	std	Y+7, r1	; 0x07
     4e2:	18 86       	std	Y+8, r1	; 0x08
     4e4:	19 86       	std	Y+9, r1	; 0x09
     4e6:	1a 86       	std	Y+10, r1	; 0x0a
		uint32_t current_frequency_b=0;
     4e8:	1b 86       	std	Y+11, r1	; 0x0b
     4ea:	1c 86       	std	Y+12, r1	; 0x0c
     4ec:	1d 86       	std	Y+13, r1	; 0x0d
     4ee:	1e 86       	std	Y+14, r1	; 0x0e
		uint32_t current_frequency_c=0;
     4f0:	1f 86       	std	Y+15, r1	; 0x0f
     4f2:	18 8a       	std	Y+16, r1	; 0x10
     4f4:	19 8a       	std	Y+17, r1	; 0x11
     4f6:	1a 8a       	std	Y+18, r1	; 0x12
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
     4f8:	0e 94 99 08 	call	0x1132	; 0x1132 <atmel_start_init>
	RTC_enable();
     4fc:	0e 94 0b 02 	call	0x416	; 0x416 <_Z10RTC_enablev>
	tako=&tako_static;
     500:	88 e6       	ldi	r24, 0x68	; 104
     502:	90 e4       	ldi	r25, 0x40	; 64
     504:	80 93 c2 40 	sts	0x40C2, r24	; 0x8040c2 <tako>
     508:	90 93 c3 40 	sts	0x40C3, r25	; 0x8040c3 <tako+0x1>
	post=&post_static;
     50c:	82 e9       	ldi	r24, 0x92	; 146
     50e:	90 e4       	ldi	r25, 0x40	; 64
     510:	80 93 c0 40 	sts	0x40C0, r24	; 0x8040c0 <post>
     514:	90 93 c1 40 	sts	0x40C1, r25	; 0x8040c1 <post+0x1>
	tako->Init();
     518:	80 91 c2 40 	lds	r24, 0x40C2	; 0x8040c2 <tako>
     51c:	90 91 c3 40 	lds	r25, 0x40C3	; 0x8040c3 <tako+0x1>
     520:	0e 94 8c 07 	call	0xf18	; 0xf18 <_ZN18Zero_Cross_Counter4InitEv>
	post->Init();
     524:	80 91 c0 40 	lds	r24, 0x40C0	; 0x8040c0 <post>
     528:	90 91 c1 40 	lds	r25, 0x40C1	; 0x8040c1 <post+0x1>
     52c:	0e 94 28 05 	call	0xa50	; 0xa50 <_ZN15SPI_SLAVE_CLASS4InitEv>
	post->frequency_array=tako->last_frequency;
     530:	80 91 c0 40 	lds	r24, 0x40C0	; 0x8040c0 <post>
     534:	90 91 c1 40 	lds	r25, 0x40C1	; 0x8040c1 <post+0x1>
     538:	20 91 c2 40 	lds	r18, 0x40C2	; 0x8040c2 <tako>
     53c:	30 91 c3 40 	lds	r19, 0x40C3	; 0x8040c3 <tako+0x1>
     540:	f9 01       	movw	r30, r18
     542:	24 8d       	ldd	r18, Z+28	; 0x1c
     544:	35 8d       	ldd	r19, Z+29	; 0x1d
     546:	fc 01       	movw	r30, r24
     548:	27 83       	std	Z+7, r18	; 0x07
     54a:	30 87       	std	Z+8, r19	; 0x08
	ENABLE_INTERRUPTS();
     54c:	78 94       	sei
	//asm("nop");
	printf("hello\n\r");
     54e:	8e e0       	ldi	r24, 0x0E	; 14
     550:	90 e4       	ldi	r25, 0x40	; 64
     552:	89 2f       	mov	r24, r25
     554:	8f 93       	push	r24
     556:	8e e0       	ldi	r24, 0x0E	; 14
     558:	90 e4       	ldi	r25, 0x40	; 64
     55a:	8f 93       	push	r24
     55c:	0e 94 a5 0a 	call	0x154a	; 0x154a <printf>
     560:	0f 90       	pop	r0
     562:	0f 90       	pop	r0
	/* Replace with your application code */
	while (1) {
		current_frequency_c=(uint32_t)(24000000/(tako->capture_timer_fall));
     564:	80 91 c2 40 	lds	r24, 0x40C2	; 0x8040c2 <tako>
     568:	90 91 c3 40 	lds	r25, 0x40C3	; 0x8040c3 <tako+0x1>
     56c:	fc 01       	movw	r30, r24
     56e:	80 8d       	ldd	r24, Z+24	; 0x18
     570:	91 8d       	ldd	r25, Z+25	; 0x19
     572:	9c 01       	movw	r18, r24
     574:	40 e0       	ldi	r20, 0x00	; 0
     576:	50 e0       	ldi	r21, 0x00	; 0
     578:	80 e0       	ldi	r24, 0x00	; 0
     57a:	96 e3       	ldi	r25, 0x36	; 54
     57c:	ae e6       	ldi	r26, 0x6E	; 110
     57e:	b1 e0       	ldi	r27, 0x01	; 1
     580:	bc 01       	movw	r22, r24
     582:	cd 01       	movw	r24, r26
     584:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <__divmodsi4>
     588:	da 01       	movw	r26, r20
     58a:	c9 01       	movw	r24, r18
     58c:	8f 87       	std	Y+15, r24	; 0x0f
     58e:	98 8b       	std	Y+16, r25	; 0x10
     590:	a9 8b       	std	Y+17, r26	; 0x11
     592:	ba 8b       	std	Y+18, r27	; 0x12
		if (last_frequency_c!=current_frequency_c)
     594:	2f 81       	ldd	r18, Y+7	; 0x07
     596:	38 85       	ldd	r19, Y+8	; 0x08
     598:	49 85       	ldd	r20, Y+9	; 0x09
     59a:	5a 85       	ldd	r21, Y+10	; 0x0a
     59c:	8f 85       	ldd	r24, Y+15	; 0x0f
     59e:	98 89       	ldd	r25, Y+16	; 0x10
     5a0:	a9 89       	ldd	r26, Y+17	; 0x11
     5a2:	ba 89       	ldd	r27, Y+18	; 0x12
     5a4:	28 17       	cp	r18, r24
     5a6:	39 07       	cpc	r19, r25
     5a8:	4a 07       	cpc	r20, r26
     5aa:	5b 07       	cpc	r21, r27
     5ac:	a1 f1       	breq	.+104    	; 0x616 <main+0x150>
		{
			if (tako->capture_timer_fall>0)
     5ae:	80 91 c2 40 	lds	r24, 0x40C2	; 0x8040c2 <tako>
     5b2:	90 91 c3 40 	lds	r25, 0x40C3	; 0x8040c3 <tako+0x1>
     5b6:	fc 01       	movw	r30, r24
     5b8:	80 8d       	ldd	r24, Z+24	; 0x18
     5ba:	91 8d       	ldd	r25, Z+25	; 0x19
     5bc:	21 e0       	ldi	r18, 0x01	; 1
     5be:	89 2b       	or	r24, r25
     5c0:	09 f4       	brne	.+2      	; 0x5c4 <main+0xfe>
     5c2:	20 e0       	ldi	r18, 0x00	; 0
     5c4:	22 23       	and	r18, r18
     5c6:	39 f1       	breq	.+78     	; 0x616 <main+0x150>
			{
				last_frequency_c=current_frequency_c;
     5c8:	8f 85       	ldd	r24, Y+15	; 0x0f
     5ca:	98 89       	ldd	r25, Y+16	; 0x10
     5cc:	a9 89       	ldd	r26, Y+17	; 0x11
     5ce:	ba 89       	ldd	r27, Y+18	; 0x12
     5d0:	8f 83       	std	Y+7, r24	; 0x07
     5d2:	98 87       	std	Y+8, r25	; 0x08
     5d4:	a9 87       	std	Y+9, r26	; 0x09
     5d6:	ba 87       	std	Y+10, r27	; 0x0a
					//tako.Set_Last_Frequency(last_frequency_c);
					if (tako->full_wave)
     5d8:	80 91 c2 40 	lds	r24, 0x40C2	; 0x8040c2 <tako>
     5dc:	90 91 c3 40 	lds	r25, 0x40C3	; 0x8040c3 <tako+0x1>
     5e0:	fc 01       	movw	r30, r24
     5e2:	82 a1       	ldd	r24, Z+34	; 0x22
     5e4:	88 23       	and	r24, r24
     5e6:	b9 f0       	breq	.+46     	; 0x616 <main+0x150>
					{
						printf("Counter fall : %lu \n\r", current_frequency_c);
     5e8:	8a 89       	ldd	r24, Y+18	; 0x12
     5ea:	8f 93       	push	r24
     5ec:	89 89       	ldd	r24, Y+17	; 0x11
     5ee:	8f 93       	push	r24
     5f0:	88 89       	ldd	r24, Y+16	; 0x10
     5f2:	8f 93       	push	r24
     5f4:	8f 85       	ldd	r24, Y+15	; 0x0f
     5f6:	8f 93       	push	r24
     5f8:	86 e1       	ldi	r24, 0x16	; 22
     5fa:	90 e4       	ldi	r25, 0x40	; 64
     5fc:	89 2f       	mov	r24, r25
     5fe:	8f 93       	push	r24
     600:	86 e1       	ldi	r24, 0x16	; 22
     602:	90 e4       	ldi	r25, 0x40	; 64
     604:	8f 93       	push	r24
     606:	0e 94 a5 0a 	call	0x154a	; 0x154a <printf>
     60a:	0f 90       	pop	r0
     60c:	0f 90       	pop	r0
     60e:	0f 90       	pop	r0
     610:	0f 90       	pop	r0
     612:	0f 90       	pop	r0
     614:	0f 90       	pop	r0
		} 
		else
		{
			
		}
		current_frequency_b=(uint32_t)(24000000/(tako->capture_timer_rise));
     616:	80 91 c2 40 	lds	r24, 0x40C2	; 0x8040c2 <tako>
     61a:	90 91 c3 40 	lds	r25, 0x40C3	; 0x8040c3 <tako+0x1>
     61e:	fc 01       	movw	r30, r24
     620:	82 8d       	ldd	r24, Z+26	; 0x1a
     622:	93 8d       	ldd	r25, Z+27	; 0x1b
     624:	9c 01       	movw	r18, r24
     626:	40 e0       	ldi	r20, 0x00	; 0
     628:	50 e0       	ldi	r21, 0x00	; 0
     62a:	80 e0       	ldi	r24, 0x00	; 0
     62c:	96 e3       	ldi	r25, 0x36	; 54
     62e:	ae e6       	ldi	r26, 0x6E	; 110
     630:	b1 e0       	ldi	r27, 0x01	; 1
     632:	bc 01       	movw	r22, r24
     634:	cd 01       	movw	r24, r26
     636:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <__divmodsi4>
     63a:	da 01       	movw	r26, r20
     63c:	c9 01       	movw	r24, r18
     63e:	8b 87       	std	Y+11, r24	; 0x0b
     640:	9c 87       	std	Y+12, r25	; 0x0c
     642:	ad 87       	std	Y+13, r26	; 0x0d
     644:	be 87       	std	Y+14, r27	; 0x0e
		if (last_frequency_b!=current_frequency_b)
     646:	2b 81       	ldd	r18, Y+3	; 0x03
     648:	3c 81       	ldd	r19, Y+4	; 0x04
     64a:	4d 81       	ldd	r20, Y+5	; 0x05
     64c:	5e 81       	ldd	r21, Y+6	; 0x06
     64e:	8b 85       	ldd	r24, Y+11	; 0x0b
     650:	9c 85       	ldd	r25, Y+12	; 0x0c
     652:	ad 85       	ldd	r26, Y+13	; 0x0d
     654:	be 85       	ldd	r27, Y+14	; 0x0e
     656:	28 17       	cp	r18, r24
     658:	39 07       	cpc	r19, r25
     65a:	4a 07       	cpc	r20, r26
     65c:	5b 07       	cpc	r21, r27
     65e:	a1 f1       	breq	.+104    	; 0x6c8 <main+0x202>
		{
			if (tako->capture_timer_rise>0)
     660:	80 91 c2 40 	lds	r24, 0x40C2	; 0x8040c2 <tako>
     664:	90 91 c3 40 	lds	r25, 0x40C3	; 0x8040c3 <tako+0x1>
     668:	fc 01       	movw	r30, r24
     66a:	82 8d       	ldd	r24, Z+26	; 0x1a
     66c:	93 8d       	ldd	r25, Z+27	; 0x1b
     66e:	21 e0       	ldi	r18, 0x01	; 1
     670:	89 2b       	or	r24, r25
     672:	09 f4       	brne	.+2      	; 0x676 <main+0x1b0>
     674:	20 e0       	ldi	r18, 0x00	; 0
     676:	22 23       	and	r18, r18
     678:	39 f1       	breq	.+78     	; 0x6c8 <main+0x202>
			{
				last_frequency_b=current_frequency_b;
     67a:	8b 85       	ldd	r24, Y+11	; 0x0b
     67c:	9c 85       	ldd	r25, Y+12	; 0x0c
     67e:	ad 85       	ldd	r26, Y+13	; 0x0d
     680:	be 85       	ldd	r27, Y+14	; 0x0e
     682:	8b 83       	std	Y+3, r24	; 0x03
     684:	9c 83       	std	Y+4, r25	; 0x04
     686:	ad 83       	std	Y+5, r26	; 0x05
     688:	be 83       	std	Y+6, r27	; 0x06
				//tako.Set_Last_Frequency(last_frequency_b);
				if (tako->full_wave)
     68a:	80 91 c2 40 	lds	r24, 0x40C2	; 0x8040c2 <tako>
     68e:	90 91 c3 40 	lds	r25, 0x40C3	; 0x8040c3 <tako+0x1>
     692:	fc 01       	movw	r30, r24
     694:	82 a1       	ldd	r24, Z+34	; 0x22
     696:	88 23       	and	r24, r24
     698:	b9 f0       	breq	.+46     	; 0x6c8 <main+0x202>
				{
					printf("Counter Full WaveRise : %lu \n\r", current_frequency_b);
     69a:	8e 85       	ldd	r24, Y+14	; 0x0e
     69c:	8f 93       	push	r24
     69e:	8d 85       	ldd	r24, Y+13	; 0x0d
     6a0:	8f 93       	push	r24
     6a2:	8c 85       	ldd	r24, Y+12	; 0x0c
     6a4:	8f 93       	push	r24
     6a6:	8b 85       	ldd	r24, Y+11	; 0x0b
     6a8:	8f 93       	push	r24
     6aa:	8c e2       	ldi	r24, 0x2C	; 44
     6ac:	90 e4       	ldi	r25, 0x40	; 64
     6ae:	89 2f       	mov	r24, r25
     6b0:	8f 93       	push	r24
     6b2:	8c e2       	ldi	r24, 0x2C	; 44
     6b4:	90 e4       	ldi	r25, 0x40	; 64
     6b6:	8f 93       	push	r24
     6b8:	0e 94 a5 0a 	call	0x154a	; 0x154a <printf>
     6bc:	0f 90       	pop	r0
     6be:	0f 90       	pop	r0
     6c0:	0f 90       	pop	r0
     6c2:	0f 90       	pop	r0
     6c4:	0f 90       	pop	r0
     6c6:	0f 90       	pop	r0
			
		}
		else
		{
		}
		tako->Set_Last_Capture_Frequency();
     6c8:	80 91 c2 40 	lds	r24, 0x40C2	; 0x8040c2 <tako>
     6cc:	90 91 c3 40 	lds	r25, 0x40C3	; 0x8040c3 <tako+0x1>
     6d0:	0e 94 1f 08 	call	0x103e	; 0x103e <_ZN18Zero_Cross_Counter26Set_Last_Capture_FrequencyEv>
		if ((*tako->timer_rise>0)&(tako->got_value_r))
     6d4:	80 91 c2 40 	lds	r24, 0x40C2	; 0x8040c2 <tako>
     6d8:	90 91 c3 40 	lds	r25, 0x40C3	; 0x8040c3 <tako+0x1>
     6dc:	fc 01       	movw	r30, r24
     6de:	82 81       	ldd	r24, Z+2	; 0x02
     6e0:	93 81       	ldd	r25, Z+3	; 0x03
     6e2:	fc 01       	movw	r30, r24
     6e4:	80 81       	ld	r24, Z
     6e6:	91 81       	ldd	r25, Z+1	; 0x01
     6e8:	21 e0       	ldi	r18, 0x01	; 1
     6ea:	89 2b       	or	r24, r25
     6ec:	09 f4       	brne	.+2      	; 0x6f0 <main+0x22a>
     6ee:	20 e0       	ldi	r18, 0x00	; 0
     6f0:	22 2f       	mov	r18, r18
     6f2:	30 e0       	ldi	r19, 0x00	; 0
     6f4:	80 91 c2 40 	lds	r24, 0x40C2	; 0x8040c2 <tako>
     6f8:	90 91 c3 40 	lds	r25, 0x40C3	; 0x8040c3 <tako+0x1>
     6fc:	fc 01       	movw	r30, r24
     6fe:	86 89       	ldd	r24, Z+22	; 0x16
     700:	88 2f       	mov	r24, r24
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	82 23       	and	r24, r18
     706:	93 23       	and	r25, r19
     708:	21 e0       	ldi	r18, 0x01	; 1
     70a:	89 2b       	or	r24, r25
     70c:	09 f4       	brne	.+2      	; 0x710 <main+0x24a>
     70e:	20 e0       	ldi	r18, 0x00	; 0
     710:	22 23       	and	r18, r18
     712:	31 f0       	breq	.+12     	; 0x720 <main+0x25a>
		{
		//	printf("Raw capture rise : %u \n\r", *tako->timer_rise);
			tako->got_value_r=false;
     714:	80 91 c2 40 	lds	r24, 0x40C2	; 0x8040c2 <tako>
     718:	90 91 c3 40 	lds	r25, 0x40C3	; 0x8040c3 <tako+0x1>
     71c:	fc 01       	movw	r30, r24
     71e:	16 8a       	std	Z+22, r1	; 0x16
		}
		if ((*tako->timer_fall>0)&(tako->got_value_f))
     720:	80 91 c2 40 	lds	r24, 0x40C2	; 0x8040c2 <tako>
     724:	90 91 c3 40 	lds	r25, 0x40C3	; 0x8040c3 <tako+0x1>
     728:	fc 01       	movw	r30, r24
     72a:	80 81       	ld	r24, Z
     72c:	91 81       	ldd	r25, Z+1	; 0x01
     72e:	fc 01       	movw	r30, r24
     730:	80 81       	ld	r24, Z
     732:	91 81       	ldd	r25, Z+1	; 0x01
     734:	21 e0       	ldi	r18, 0x01	; 1
     736:	89 2b       	or	r24, r25
     738:	09 f4       	brne	.+2      	; 0x73c <main+0x276>
     73a:	20 e0       	ldi	r18, 0x00	; 0
     73c:	22 2f       	mov	r18, r18
     73e:	30 e0       	ldi	r19, 0x00	; 0
     740:	80 91 c2 40 	lds	r24, 0x40C2	; 0x8040c2 <tako>
     744:	90 91 c3 40 	lds	r25, 0x40C3	; 0x8040c3 <tako+0x1>
     748:	fc 01       	movw	r30, r24
     74a:	87 89       	ldd	r24, Z+23	; 0x17
     74c:	88 2f       	mov	r24, r24
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	82 23       	and	r24, r18
     752:	93 23       	and	r25, r19
     754:	21 e0       	ldi	r18, 0x01	; 1
     756:	89 2b       	or	r24, r25
     758:	09 f4       	brne	.+2      	; 0x75c <main+0x296>
     75a:	20 e0       	ldi	r18, 0x00	; 0
     75c:	22 23       	and	r18, r18
     75e:	31 f0       	breq	.+12     	; 0x76c <main+0x2a6>
		{
		//	printf("Raw capture fall : %u \n\r", *tako->timer_fall);
			tako->got_value_f=false;
     760:	80 91 c2 40 	lds	r24, 0x40C2	; 0x8040c2 <tako>
     764:	90 91 c3 40 	lds	r25, 0x40C3	; 0x8040c3 <tako+0x1>
     768:	fc 01       	movw	r30, r24
     76a:	17 8a       	std	Z+23, r1	; 0x17
		}
		if (counter_printf==0)
     76c:	89 81       	ldd	r24, Y+1	; 0x01
     76e:	9a 81       	ldd	r25, Y+2	; 0x02
     770:	89 2b       	or	r24, r25
     772:	89 f5       	brne	.+98     	; 0x7d6 <main+0x310>
		{
			if (tako->frequency_out<24000000)
     774:	80 91 c2 40 	lds	r24, 0x40C2	; 0x8040c2 <tako>
     778:	90 91 c3 40 	lds	r25, 0x40C3	; 0x8040c3 <tako+0x1>
     77c:	fc 01       	movw	r30, r24
     77e:	86 8d       	ldd	r24, Z+30	; 0x1e
     780:	97 8d       	ldd	r25, Z+31	; 0x1f
     782:	a0 a1       	ldd	r26, Z+32	; 0x20
     784:	b1 a1       	ldd	r27, Z+33	; 0x21
     786:	21 e0       	ldi	r18, 0x01	; 1
     788:	81 15       	cp	r24, r1
     78a:	96 43       	sbci	r25, 0x36	; 54
     78c:	ae 46       	sbci	r26, 0x6E	; 110
     78e:	b1 40       	sbci	r27, 0x01	; 1
     790:	08 f0       	brcs	.+2      	; 0x794 <main+0x2ce>
     792:	20 e0       	ldi	r18, 0x00	; 0
     794:	22 23       	and	r18, r18
     796:	f9 f0       	breq	.+62     	; 0x7d6 <main+0x310>
			{
				printf("Last Frequency OUT : %lu \n\r", tako->frequency_out);
     798:	80 91 c2 40 	lds	r24, 0x40C2	; 0x8040c2 <tako>
     79c:	90 91 c3 40 	lds	r25, 0x40C3	; 0x8040c3 <tako+0x1>
     7a0:	fc 01       	movw	r30, r24
     7a2:	86 8d       	ldd	r24, Z+30	; 0x1e
     7a4:	97 8d       	ldd	r25, Z+31	; 0x1f
     7a6:	a0 a1       	ldd	r26, Z+32	; 0x20
     7a8:	b1 a1       	ldd	r27, Z+33	; 0x21
     7aa:	2b 2f       	mov	r18, r27
     7ac:	2f 93       	push	r18
     7ae:	2a 2f       	mov	r18, r26
     7b0:	2f 93       	push	r18
     7b2:	29 2f       	mov	r18, r25
     7b4:	2f 93       	push	r18
     7b6:	8f 93       	push	r24
     7b8:	8b e4       	ldi	r24, 0x4B	; 75
     7ba:	90 e4       	ldi	r25, 0x40	; 64
     7bc:	89 2f       	mov	r24, r25
     7be:	8f 93       	push	r24
     7c0:	8b e4       	ldi	r24, 0x4B	; 75
     7c2:	90 e4       	ldi	r25, 0x40	; 64
     7c4:	8f 93       	push	r24
     7c6:	0e 94 a5 0a 	call	0x154a	; 0x154a <printf>
     7ca:	0f 90       	pop	r0
     7cc:	0f 90       	pop	r0
     7ce:	0f 90       	pop	r0
     7d0:	0f 90       	pop	r0
     7d2:	0f 90       	pop	r0
     7d4:	0f 90       	pop	r0
			
		} 
		else
		{
		}
		counter_printf++;
     7d6:	89 81       	ldd	r24, Y+1	; 0x01
     7d8:	9a 81       	ldd	r25, Y+2	; 0x02
     7da:	01 96       	adiw	r24, 0x01	; 1
     7dc:	89 83       	std	Y+1, r24	; 0x01
     7de:	9a 83       	std	Y+2, r25	; 0x02
	post->frequency_array=tako->last_frequency;
	ENABLE_INTERRUPTS();
	//asm("nop");
	printf("hello\n\r");
	/* Replace with your application code */
	while (1) {
     7e0:	c1 ce       	rjmp	.-638    	; 0x564 <main+0x9e>

000007e2 <_Z41__static_initialization_and_destruction_0ii>:
		//post.Check_Command();
		
		
			
	}
}
     7e2:	cf 93       	push	r28
     7e4:	df 93       	push	r29
     7e6:	00 d0       	rcall	.+0      	; 0x7e8 <_Z41__static_initialization_and_destruction_0ii+0x6>
     7e8:	00 d0       	rcall	.+0      	; 0x7ea <_Z41__static_initialization_and_destruction_0ii+0x8>
     7ea:	cd b7       	in	r28, 0x3d	; 61
     7ec:	de b7       	in	r29, 0x3e	; 62
     7ee:	89 83       	std	Y+1, r24	; 0x01
     7f0:	9a 83       	std	Y+2, r25	; 0x02
     7f2:	6b 83       	std	Y+3, r22	; 0x03
     7f4:	7c 83       	std	Y+4, r23	; 0x04
     7f6:	89 81       	ldd	r24, Y+1	; 0x01
     7f8:	9a 81       	ldd	r25, Y+2	; 0x02
     7fa:	01 97       	sbiw	r24, 0x01	; 1
     7fc:	61 f4       	brne	.+24     	; 0x816 <_Z41__static_initialization_and_destruction_0ii+0x34>
     7fe:	8b 81       	ldd	r24, Y+3	; 0x03
     800:	9c 81       	ldd	r25, Y+4	; 0x04
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	41 f4       	brne	.+16     	; 0x816 <_Z41__static_initialization_and_destruction_0ii+0x34>

#include <usart_basic.h>

#include "Zero_Cross_Counter.h"
#include "SPI_SLAVE_CLASS.h"
static Zero_Cross_Counter tako_static;
     806:	88 e6       	ldi	r24, 0x68	; 104
     808:	90 e4       	ldi	r25, 0x40	; 64
     80a:	0e 94 42 07 	call	0xe84	; 0xe84 <_ZN18Zero_Cross_CounterC1Ev>
static SPI_SLAVE_CLASS post_static;
     80e:	82 e9       	ldi	r24, 0x92	; 146
     810:	90 e4       	ldi	r25, 0x40	; 64
     812:	0e 94 f7 04 	call	0x9ee	; 0x9ee <_ZN15SPI_SLAVE_CLASSC1Ev>
     816:	89 81       	ldd	r24, Y+1	; 0x01
     818:	9a 81       	ldd	r25, Y+2	; 0x02
     81a:	89 2b       	or	r24, r25
     81c:	61 f4       	brne	.+24     	; 0x836 <_Z41__static_initialization_and_destruction_0ii+0x54>
     81e:	8b 81       	ldd	r24, Y+3	; 0x03
     820:	9c 81       	ldd	r25, Y+4	; 0x04
     822:	01 96       	adiw	r24, 0x01	; 1
     824:	41 f4       	brne	.+16     	; 0x836 <_Z41__static_initialization_and_destruction_0ii+0x54>
     826:	82 e9       	ldi	r24, 0x92	; 146
     828:	90 e4       	ldi	r25, 0x40	; 64
     82a:	0e 94 1b 05 	call	0xa36	; 0xa36 <_ZN15SPI_SLAVE_CLASSD1Ev>

#include <usart_basic.h>

#include "Zero_Cross_Counter.h"
#include "SPI_SLAVE_CLASS.h"
static Zero_Cross_Counter tako_static;
     82e:	88 e6       	ldi	r24, 0x68	; 104
     830:	90 e4       	ldi	r25, 0x40	; 64
     832:	0e 94 7b 07 	call	0xef6	; 0xef6 <_ZN18Zero_Cross_CounterD1Ev>
		//post.Check_Command();
		
		
			
	}
}
     836:	00 00       	nop
     838:	24 96       	adiw	r28, 0x04	; 4
     83a:	cd bf       	out	0x3d, r28	; 61
     83c:	de bf       	out	0x3e, r29	; 62
     83e:	df 91       	pop	r29
     840:	cf 91       	pop	r28
     842:	08 95       	ret

00000844 <_GLOBAL__sub_I__Z10RTC_enablev>:
     844:	cf 93       	push	r28
     846:	df 93       	push	r29
     848:	cd b7       	in	r28, 0x3d	; 61
     84a:	de b7       	in	r29, 0x3e	; 62
     84c:	6f ef       	ldi	r22, 0xFF	; 255
     84e:	7f ef       	ldi	r23, 0xFF	; 255
     850:	81 e0       	ldi	r24, 0x01	; 1
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <_Z41__static_initialization_and_destruction_0ii>
     858:	df 91       	pop	r29
     85a:	cf 91       	pop	r28
     85c:	08 95       	ret

0000085e <_GLOBAL__sub_D__Z10RTC_enablev>:
     85e:	cf 93       	push	r28
     860:	df 93       	push	r29
     862:	cd b7       	in	r28, 0x3d	; 61
     864:	de b7       	in	r29, 0x3e	; 62
     866:	6f ef       	ldi	r22, 0xFF	; 255
     868:	7f ef       	ldi	r23, 0xFF	; 255
     86a:	80 e0       	ldi	r24, 0x00	; 0
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <_Z41__static_initialization_and_destruction_0ii>
     872:	df 91       	pop	r29
     874:	cf 91       	pop	r28
     876:	08 95       	ret

00000878 <_ZL17SPI_Transfer_Donev>:
}

void SPI_SLAVE_CLASS::Read_Data(){
	 rdata = SPI1.DATA;
	 command=rdata;
}
     878:	cf 93       	push	r28
     87a:	df 93       	push	r29
     87c:	cd b7       	in	r28, 0x3d	; 61
     87e:	de b7       	in	r29, 0x3e	; 62
     880:	80 91 c0 40 	lds	r24, 0x40C0	; 0x8040c0 <post>
     884:	90 91 c1 40 	lds	r25, 0x40C1	; 0x8040c1 <post+0x1>
     888:	21 e0       	ldi	r18, 0x01	; 1
     88a:	fc 01       	movw	r30, r24
     88c:	20 83       	st	Z, r18
     88e:	80 91 c0 40 	lds	r24, 0x40C0	; 0x8040c0 <post>
     892:	90 91 c1 40 	lds	r25, 0x40C1	; 0x8040c1 <post+0x1>
     896:	21 e0       	ldi	r18, 0x01	; 1
     898:	fc 01       	movw	r30, r24
     89a:	26 83       	std	Z+6, r18	; 0x06
     89c:	00 00       	nop
     89e:	df 91       	pop	r29
     8a0:	cf 91       	pop	r28
     8a2:	08 95       	ret

000008a4 <__vector_37>:
     8a4:	1f 92       	push	r1
     8a6:	0f 92       	push	r0
     8a8:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     8ac:	0f 92       	push	r0
     8ae:	11 24       	eor	r1, r1
     8b0:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     8b4:	0f 92       	push	r0
     8b6:	2f 93       	push	r18
     8b8:	3f 93       	push	r19
     8ba:	4f 93       	push	r20
     8bc:	5f 93       	push	r21
     8be:	6f 93       	push	r22
     8c0:	7f 93       	push	r23
     8c2:	8f 93       	push	r24
     8c4:	9f 93       	push	r25
     8c6:	af 93       	push	r26
     8c8:	bf 93       	push	r27
     8ca:	ef 93       	push	r30
     8cc:	ff 93       	push	r31
     8ce:	cf 93       	push	r28
     8d0:	df 93       	push	r29
     8d2:	00 d0       	rcall	.+0      	; 0x8d4 <__vector_37+0x30>
     8d4:	cd b7       	in	r28, 0x3d	; 61
     8d6:	de b7       	in	r29, 0x3e	; 62
     8d8:	80 e6       	ldi	r24, 0x60	; 96
     8da:	99 e0       	ldi	r25, 0x09	; 9
     8dc:	fc 01       	movw	r30, r24
     8de:	84 81       	ldd	r24, Z+4	; 0x04
     8e0:	89 83       	std	Y+1, r24	; 0x01
     8e2:	1a 82       	std	Y+2, r1	; 0x02
     8e4:	80 e6       	ldi	r24, 0x60	; 96
     8e6:	99 e0       	ldi	r25, 0x09	; 9
     8e8:	20 e8       	ldi	r18, 0x80	; 128
     8ea:	fc 01       	movw	r30, r24
     8ec:	23 83       	std	Z+3, r18	; 0x03
     8ee:	80 91 c0 40 	lds	r24, 0x40C0	; 0x8040c0 <post>
     8f2:	90 91 c1 40 	lds	r25, 0x40C1	; 0x8040c1 <post+0x1>
     8f6:	fc 01       	movw	r30, r24
     8f8:	86 81       	ldd	r24, Z+6	; 0x06
     8fa:	82 30       	cpi	r24, 0x02	; 2
     8fc:	01 f1       	breq	.+64     	; 0x93e <__vector_37+0x9a>
     8fe:	89 81       	ldd	r24, Y+1	; 0x01
     900:	81 30       	cpi	r24, 0x01	; 1
     902:	b1 f4       	brne	.+44     	; 0x930 <__vector_37+0x8c>
     904:	80 91 c0 40 	lds	r24, 0x40C0	; 0x8040c0 <post>
     908:	90 91 c1 40 	lds	r25, 0x40C1	; 0x8040c1 <post+0x1>
     90c:	fc 01       	movw	r30, r24
     90e:	10 82       	st	Z, r1
     910:	80 91 c0 40 	lds	r24, 0x40C0	; 0x8040c0 <post>
     914:	90 91 c1 40 	lds	r25, 0x40C1	; 0x8040c1 <post+0x1>
     918:	fc 01       	movw	r30, r24
     91a:	27 81       	ldd	r18, Z+7	; 0x07
     91c:	30 85       	ldd	r19, Z+8	; 0x08
     91e:	80 91 c0 40 	lds	r24, 0x40C0	; 0x8040c0 <post>
     922:	90 91 c1 40 	lds	r25, 0x40C1	; 0x8040c1 <post+0x1>
     926:	44 e0       	ldi	r20, 0x04	; 4
     928:	b9 01       	movw	r22, r18
     92a:	0e 94 3d 05 	call	0xa7a	; 0xa7a <_ZN15SPI_SLAVE_CLASS10Write_DataEPhh>
     92e:	45 c0       	rjmp	.+138    	; 0x9ba <__vector_37+0x116>
     930:	80 91 c0 40 	lds	r24, 0x40C0	; 0x8040c0 <post>
     934:	90 91 c1 40 	lds	r25, 0x40C1	; 0x8040c1 <post+0x1>
     938:	fc 01       	movw	r30, r24
     93a:	11 82       	std	Z+1, r1	; 0x01
     93c:	3e c0       	rjmp	.+124    	; 0x9ba <__vector_37+0x116>
     93e:	80 91 c0 40 	lds	r24, 0x40C0	; 0x8040c0 <post>
     942:	90 91 c1 40 	lds	r25, 0x40C1	; 0x8040c1 <post+0x1>
     946:	fc 01       	movw	r30, r24
     948:	86 81       	ldd	r24, Z+6	; 0x06
     94a:	81 30       	cpi	r24, 0x01	; 1
     94c:	b1 f1       	breq	.+108    	; 0x9ba <__vector_37+0x116>
     94e:	80 91 c0 40 	lds	r24, 0x40C0	; 0x8040c0 <post>
     952:	90 91 c1 40 	lds	r25, 0x40C1	; 0x8040c1 <post+0x1>
     956:	fc 01       	movw	r30, r24
     958:	23 81       	ldd	r18, Z+3	; 0x03
     95a:	34 81       	ldd	r19, Z+4	; 0x04
     95c:	2f 5f       	subi	r18, 0xFF	; 255
     95e:	3f 4f       	sbci	r19, 0xFF	; 255
     960:	fc 01       	movw	r30, r24
     962:	23 83       	std	Z+3, r18	; 0x03
     964:	34 83       	std	Z+4, r19	; 0x04
     966:	80 91 c0 40 	lds	r24, 0x40C0	; 0x8040c0 <post>
     96a:	90 91 c1 40 	lds	r25, 0x40C1	; 0x8040c1 <post+0x1>
     96e:	fc 01       	movw	r30, r24
     970:	83 81       	ldd	r24, Z+3	; 0x03
     972:	94 81       	ldd	r25, Z+4	; 0x04
     974:	fc 01       	movw	r30, r24
     976:	80 81       	ld	r24, Z
     978:	8a 83       	std	Y+2, r24	; 0x02
     97a:	80 91 c0 40 	lds	r24, 0x40C0	; 0x8040c0 <post>
     97e:	90 91 c1 40 	lds	r25, 0x40C1	; 0x8040c1 <post+0x1>
     982:	fc 01       	movw	r30, r24
     984:	25 81       	ldd	r18, Z+5	; 0x05
     986:	21 50       	subi	r18, 0x01	; 1
     988:	fc 01       	movw	r30, r24
     98a:	25 83       	std	Z+5, r18	; 0x05
     98c:	80 91 c0 40 	lds	r24, 0x40C0	; 0x8040c0 <post>
     990:	90 91 c1 40 	lds	r25, 0x40C1	; 0x8040c1 <post+0x1>
     994:	fc 01       	movw	r30, r24
     996:	85 81       	ldd	r24, Z+5	; 0x05
     998:	88 23       	and	r24, r24
     99a:	31 f0       	breq	.+12     	; 0x9a8 <__vector_37+0x104>
     99c:	80 e6       	ldi	r24, 0x60	; 96
     99e:	99 e0       	ldi	r25, 0x09	; 9
     9a0:	2a 81       	ldd	r18, Y+2	; 0x02
     9a2:	fc 01       	movw	r30, r24
     9a4:	24 83       	std	Z+4, r18	; 0x04
     9a6:	09 c0       	rjmp	.+18     	; 0x9ba <__vector_37+0x116>
     9a8:	80 91 c0 40 	lds	r24, 0x40C0	; 0x8040c0 <post>
     9ac:	90 91 c1 40 	lds	r25, 0x40C1	; 0x8040c1 <post+0x1>
     9b0:	23 e0       	ldi	r18, 0x03	; 3
     9b2:	fc 01       	movw	r30, r24
     9b4:	22 83       	std	Z+2, r18	; 0x02
     9b6:	0e 94 3c 04 	call	0x878	; 0x878 <_ZL17SPI_Transfer_Donev>
     9ba:	00 00       	nop
     9bc:	0f 90       	pop	r0
     9be:	0f 90       	pop	r0
     9c0:	df 91       	pop	r29
     9c2:	cf 91       	pop	r28
     9c4:	ff 91       	pop	r31
     9c6:	ef 91       	pop	r30
     9c8:	bf 91       	pop	r27
     9ca:	af 91       	pop	r26
     9cc:	9f 91       	pop	r25
     9ce:	8f 91       	pop	r24
     9d0:	7f 91       	pop	r23
     9d2:	6f 91       	pop	r22
     9d4:	5f 91       	pop	r21
     9d6:	4f 91       	pop	r20
     9d8:	3f 91       	pop	r19
     9da:	2f 91       	pop	r18
     9dc:	0f 90       	pop	r0
     9de:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     9e2:	0f 90       	pop	r0
     9e4:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     9e8:	0f 90       	pop	r0
     9ea:	1f 90       	pop	r1
     9ec:	18 95       	reti

000009ee <_ZN15SPI_SLAVE_CLASSC1Ev>:
     9ee:	cf 93       	push	r28
     9f0:	df 93       	push	r29
     9f2:	00 d0       	rcall	.+0      	; 0x9f4 <_ZN15SPI_SLAVE_CLASSC1Ev+0x6>
     9f4:	cd b7       	in	r28, 0x3d	; 61
     9f6:	de b7       	in	r29, 0x3e	; 62
     9f8:	89 83       	std	Y+1, r24	; 0x01
     9fa:	9a 83       	std	Y+2, r25	; 0x02
     9fc:	89 81       	ldd	r24, Y+1	; 0x01
     9fe:	9a 81       	ldd	r25, Y+2	; 0x02
     a00:	fc 01       	movw	r30, r24
     a02:	10 82       	st	Z, r1
     a04:	89 81       	ldd	r24, Y+1	; 0x01
     a06:	9a 81       	ldd	r25, Y+2	; 0x02
     a08:	20 eb       	ldi	r18, 0xB0	; 176
     a0a:	30 e4       	ldi	r19, 0x40	; 64
     a0c:	fc 01       	movw	r30, r24
     a0e:	21 87       	std	Z+9, r18	; 0x09
     a10:	32 87       	std	Z+10, r19	; 0x0a
     a12:	89 81       	ldd	r24, Y+1	; 0x01
     a14:	9a 81       	ldd	r25, Y+2	; 0x02
     a16:	20 ea       	ldi	r18, 0xA0	; 160
     a18:	30 e4       	ldi	r19, 0x40	; 64
     a1a:	fc 01       	movw	r30, r24
     a1c:	23 87       	std	Z+11, r18	; 0x0b
     a1e:	34 87       	std	Z+12, r19	; 0x0c
     a20:	89 81       	ldd	r24, Y+1	; 0x01
     a22:	9a 81       	ldd	r25, Y+2	; 0x02
     a24:	21 e0       	ldi	r18, 0x01	; 1
     a26:	fc 01       	movw	r30, r24
     a28:	26 83       	std	Z+6, r18	; 0x06
     a2a:	00 00       	nop
     a2c:	0f 90       	pop	r0
     a2e:	0f 90       	pop	r0
     a30:	df 91       	pop	r29
     a32:	cf 91       	pop	r28
     a34:	08 95       	ret

00000a36 <_ZN15SPI_SLAVE_CLASSD1Ev>:
     a36:	cf 93       	push	r28
     a38:	df 93       	push	r29
     a3a:	00 d0       	rcall	.+0      	; 0xa3c <_ZN15SPI_SLAVE_CLASSD1Ev+0x6>
     a3c:	cd b7       	in	r28, 0x3d	; 61
     a3e:	de b7       	in	r29, 0x3e	; 62
     a40:	89 83       	std	Y+1, r24	; 0x01
     a42:	9a 83       	std	Y+2, r25	; 0x02
     a44:	00 00       	nop
     a46:	0f 90       	pop	r0
     a48:	0f 90       	pop	r0
     a4a:	df 91       	pop	r29
     a4c:	cf 91       	pop	r28
     a4e:	08 95       	ret

00000a50 <_ZN15SPI_SLAVE_CLASS4InitEv>:
     a50:	cf 93       	push	r28
     a52:	df 93       	push	r29
     a54:	00 d0       	rcall	.+0      	; 0xa56 <_ZN15SPI_SLAVE_CLASS4InitEv+0x6>
     a56:	cd b7       	in	r28, 0x3d	; 61
     a58:	de b7       	in	r29, 0x3e	; 62
     a5a:	89 83       	std	Y+1, r24	; 0x01
     a5c:	9a 83       	std	Y+2, r25	; 0x02
     a5e:	89 81       	ldd	r24, Y+1	; 0x01
     a60:	9a 81       	ldd	r25, Y+2	; 0x02
     a62:	0e 94 75 05 	call	0xaea	; 0xaea <_ZN15SPI_SLAVE_CLASS12SPI_ZCD_initEv>
     a66:	89 81       	ldd	r24, Y+1	; 0x01
     a68:	9a 81       	ldd	r25, Y+2	; 0x02
     a6a:	0e 94 93 05 	call	0xb26	; 0xb26 <_ZN15SPI_SLAVE_CLASS14SPI_ZCD_enableEv>
     a6e:	00 00       	nop
     a70:	0f 90       	pop	r0
     a72:	0f 90       	pop	r0
     a74:	df 91       	pop	r29
     a76:	cf 91       	pop	r28
     a78:	08 95       	ret

00000a7a <_ZN15SPI_SLAVE_CLASS10Write_DataEPhh>:

void SPI_SLAVE_CLASS::Write_Data(uint8_t *block, uint8_t sz){
     a7a:	cf 93       	push	r28
     a7c:	df 93       	push	r29
     a7e:	cd b7       	in	r28, 0x3d	; 61
     a80:	de b7       	in	r29, 0x3e	; 62
     a82:	25 97       	sbiw	r28, 0x05	; 5
     a84:	cd bf       	out	0x3d, r28	; 61
     a86:	de bf       	out	0x3e, r29	; 62
     a88:	89 83       	std	Y+1, r24	; 0x01
     a8a:	9a 83       	std	Y+2, r25	; 0x02
     a8c:	6b 83       	std	Y+3, r22	; 0x03
     a8e:	7c 83       	std	Y+4, r23	; 0x04
     a90:	4d 83       	std	Y+5, r20	; 0x05
	if (block!=NULL)
     a92:	8b 81       	ldd	r24, Y+3	; 0x03
     a94:	9c 81       	ldd	r25, Y+4	; 0x04
     a96:	89 2b       	or	r24, r25
     a98:	09 f1       	breq	.+66     	; 0xadc <_ZN15SPI_SLAVE_CLASS10Write_DataEPhh+0x62>
	{
		data  = (uint8_t *)block;
     a9a:	89 81       	ldd	r24, Y+1	; 0x01
     a9c:	9a 81       	ldd	r25, Y+2	; 0x02
     a9e:	2b 81       	ldd	r18, Y+3	; 0x03
     aa0:	3c 81       	ldd	r19, Y+4	; 0x04
     aa2:	fc 01       	movw	r30, r24
     aa4:	23 83       	std	Z+3, r18	; 0x03
     aa6:	34 83       	std	Z+4, r19	; 0x04
		size_message   = sz;
     aa8:	89 81       	ldd	r24, Y+1	; 0x01
     aaa:	9a 81       	ldd	r25, Y+2	; 0x02
     aac:	2d 81       	ldd	r18, Y+5	; 0x05
     aae:	fc 01       	movw	r30, r24
     ab0:	25 83       	std	Z+5, r18	; 0x05
		type   = SPI_WRITE;
     ab2:	89 81       	ldd	r24, Y+1	; 0x01
     ab4:	9a 81       	ldd	r25, Y+2	; 0x02
     ab6:	22 e0       	ldi	r18, 0x02	; 2
     ab8:	fc 01       	movw	r30, r24
     aba:	26 83       	std	Z+6, r18	; 0x06
		status = SPI_BUSY;
     abc:	89 81       	ldd	r24, Y+1	; 0x01
     abe:	9a 81       	ldd	r25, Y+2	; 0x02
     ac0:	22 e0       	ldi	r18, 0x02	; 2
     ac2:	fc 01       	movw	r30, r24
     ac4:	22 83       	std	Z+2, r18	; 0x02

		SPI1.DATA = *data;
     ac6:	80 e6       	ldi	r24, 0x60	; 96
     ac8:	99 e0       	ldi	r25, 0x09	; 9
     aca:	29 81       	ldd	r18, Y+1	; 0x01
     acc:	3a 81       	ldd	r19, Y+2	; 0x02
     ace:	f9 01       	movw	r30, r18
     ad0:	23 81       	ldd	r18, Z+3	; 0x03
     ad2:	34 81       	ldd	r19, Z+4	; 0x04
     ad4:	f9 01       	movw	r30, r18
     ad6:	20 81       	ld	r18, Z
     ad8:	fc 01       	movw	r30, r24
     ada:	24 83       	std	Z+4, r18	; 0x04
	}
	
}
     adc:	00 00       	nop
     ade:	25 96       	adiw	r28, 0x05	; 5
     ae0:	cd bf       	out	0x3d, r28	; 61
     ae2:	de bf       	out	0x3e, r29	; 62
     ae4:	df 91       	pop	r29
     ae6:	cf 91       	pop	r28
     ae8:	08 95       	ret

00000aea <_ZN15SPI_SLAVE_CLASS12SPI_ZCD_initEv>:

void SPI_SLAVE_CLASS::SPI_ZCD_init()
{
     aea:	cf 93       	push	r28
     aec:	df 93       	push	r29
     aee:	00 d0       	rcall	.+0      	; 0xaf0 <_ZN15SPI_SLAVE_CLASS12SPI_ZCD_initEv+0x6>
     af0:	cd b7       	in	r28, 0x3d	; 61
     af2:	de b7       	in	r29, 0x3e	; 62
     af4:	89 83       	std	Y+1, r24	; 0x01
     af6:	9a 83       	std	Y+2, r25	; 0x02

	SPI1.CTRLA = 0 << SPI_CLK2X_bp    /* Enable Double Speed: disabled */
     af8:	80 e6       	ldi	r24, 0x60	; 96
     afa:	99 e0       	ldi	r25, 0x09	; 9
	| 0 << SPI_DORD_bp   /* Data Order Setting: disabled */
	| 0 << SPI_ENABLE_bp /* Enable Module: enabled */
	| 0 << SPI_MASTER_bp /* SPI module in slave mode */
	| SPI_PRESC_DIV4_gc; /* System Clock / 4 */
     afc:	fc 01       	movw	r30, r24
     afe:	10 82       	st	Z, r1

	 SPI1.CTRLB = 0 << SPI_BUFEN_bp /* Buffer Mode Enable: disabled */
     b00:	80 e6       	ldi	r24, 0x60	; 96
     b02:	99 e0       	ldi	r25, 0x09	; 9
			 | 0 << SPI_BUFWR_bp /* Buffer Write Mode: disabled */
			 | SPI_MODE_0_gc /* SPI Mode 0 */
			 | 0 << SPI_SSD_bp; /* Slave Select Disable: disabled */
     b04:	fc 01       	movw	r30, r24
     b06:	11 82       	std	Z+1, r1	; 0x01

	SPI1.INTCTRL = 0 << SPI_DREIE_bp    /* Data Register Empty Interrupt Enable: enabled */
     b08:	80 e6       	ldi	r24, 0x60	; 96
     b0a:	99 e0       	ldi	r25, 0x09	; 9
	| 1 << SPI_IE_bp     /* Interrupt Enable: enabled */
	| 0 << SPI_RXCIE_bp  /* Receive Complete Interrupt Enable: enabled */
	| 0 << SPI_SSIE_bp   /* Slave Select Trigger Interrupt Enable: disabled */
	| 0 << SPI_TXCIE_bp; /* Transfer Complete Interrupt Enable: enabled */
     b0c:	21 e0       	ldi	r18, 0x01	; 1
     b0e:	fc 01       	movw	r30, r24
     b10:	22 83       	std	Z+2, r18	; 0x02

	status = SPI_FREE;
     b12:	89 81       	ldd	r24, Y+1	; 0x01
     b14:	9a 81       	ldd	r25, Y+2	; 0x02
     b16:	fc 01       	movw	r30, r24
     b18:	12 82       	std	Z+2, r1	; 0x02
}
     b1a:	00 00       	nop
     b1c:	0f 90       	pop	r0
     b1e:	0f 90       	pop	r0
     b20:	df 91       	pop	r29
     b22:	cf 91       	pop	r28
     b24:	08 95       	ret

00000b26 <_ZN15SPI_SLAVE_CLASS14SPI_ZCD_enableEv>:
 * 2. Enables the SPI module by setting the enable-bit in the SPI control register
 *
 * \return Nothing
 */
void SPI_SLAVE_CLASS::SPI_ZCD_enable()
{
     b26:	cf 93       	push	r28
     b28:	df 93       	push	r29
     b2a:	00 d0       	rcall	.+0      	; 0xb2c <_ZN15SPI_SLAVE_CLASS14SPI_ZCD_enableEv+0x6>
     b2c:	cd b7       	in	r28, 0x3d	; 61
     b2e:	de b7       	in	r29, 0x3e	; 62
     b30:	89 83       	std	Y+1, r24	; 0x01
     b32:	9a 83       	std	Y+2, r25	; 0x02
	SPI1.CTRLA |= SPI_ENABLE_bm;
     b34:	80 e6       	ldi	r24, 0x60	; 96
     b36:	99 e0       	ldi	r25, 0x09	; 9
     b38:	20 e6       	ldi	r18, 0x60	; 96
     b3a:	39 e0       	ldi	r19, 0x09	; 9
     b3c:	f9 01       	movw	r30, r18
     b3e:	20 81       	ld	r18, Z
     b40:	21 60       	ori	r18, 0x01	; 1
     b42:	fc 01       	movw	r30, r24
     b44:	20 83       	st	Z, r18
}
     b46:	00 00       	nop
     b48:	0f 90       	pop	r0
     b4a:	0f 90       	pop	r0
     b4c:	df 91       	pop	r29
     b4e:	cf 91       	pop	r28
     b50:	08 95       	ret

00000b52 <__vector_28>:
		local_value=(lf>>((3-i)*8))&0xff;
		last_frequency[i]=((uint8_t)local_value&0xff);
	}
	//memcpy((void*)last_frequency,(void*)&lf,4);
	
}
     b52:	1f 92       	push	r1
     b54:	0f 92       	push	r0
     b56:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     b5a:	0f 92       	push	r0
     b5c:	11 24       	eor	r1, r1
     b5e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     b62:	0f 92       	push	r0
     b64:	2f 93       	push	r18
     b66:	8f 93       	push	r24
     b68:	9f 93       	push	r25
     b6a:	ef 93       	push	r30
     b6c:	ff 93       	push	r31
     b6e:	cf 93       	push	r28
     b70:	df 93       	push	r29
     b72:	cd b7       	in	r28, 0x3d	; 61
     b74:	de b7       	in	r29, 0x3e	; 62
     b76:	80 91 c2 40 	lds	r24, 0x40C2	; 0x8040c2 <tako>
     b7a:	90 91 c3 40 	lds	r25, 0x40C3	; 0x8040c3 <tako+0x1>
     b7e:	21 e0       	ldi	r18, 0x01	; 1
     b80:	fc 01       	movw	r30, r24
     b82:	23 8b       	std	Z+19, r18	; 0x13
     b84:	80 91 c2 40 	lds	r24, 0x40C2	; 0x8040c2 <tako>
     b88:	90 91 c3 40 	lds	r25, 0x40C3	; 0x8040c3 <tako+0x1>
     b8c:	fc 01       	movw	r30, r24
     b8e:	15 8a       	std	Z+21, r1	; 0x15
     b90:	80 ec       	ldi	r24, 0xC0	; 192
     b92:	96 e0       	ldi	r25, 0x06	; 6
     b94:	21 e0       	ldi	r18, 0x01	; 1
     b96:	fc 01       	movw	r30, r24
     b98:	23 83       	std	Z+3, r18	; 0x03
     b9a:	00 00       	nop
     b9c:	df 91       	pop	r29
     b9e:	cf 91       	pop	r28
     ba0:	ff 91       	pop	r31
     ba2:	ef 91       	pop	r30
     ba4:	9f 91       	pop	r25
     ba6:	8f 91       	pop	r24
     ba8:	2f 91       	pop	r18
     baa:	0f 90       	pop	r0
     bac:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     bb0:	0f 90       	pop	r0
     bb2:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     bb6:	0f 90       	pop	r0
     bb8:	1f 90       	pop	r1
     bba:	18 95       	reti

00000bbc <__vector_52>:
     bbc:	1f 92       	push	r1
     bbe:	0f 92       	push	r0
     bc0:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     bc4:	0f 92       	push	r0
     bc6:	11 24       	eor	r1, r1
     bc8:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     bcc:	0f 92       	push	r0
     bce:	2f 93       	push	r18
     bd0:	8f 93       	push	r24
     bd2:	9f 93       	push	r25
     bd4:	ef 93       	push	r30
     bd6:	ff 93       	push	r31
     bd8:	cf 93       	push	r28
     bda:	df 93       	push	r29
     bdc:	cd b7       	in	r28, 0x3d	; 61
     bde:	de b7       	in	r29, 0x3e	; 62
     be0:	80 91 c2 40 	lds	r24, 0x40C2	; 0x8040c2 <tako>
     be4:	90 91 c3 40 	lds	r25, 0x40C3	; 0x8040c3 <tako+0x1>
     be8:	21 e0       	ldi	r18, 0x01	; 1
     bea:	fc 01       	movw	r30, r24
     bec:	25 8b       	std	Z+21, r18	; 0x15
     bee:	80 91 c2 40 	lds	r24, 0x40C2	; 0x8040c2 <tako>
     bf2:	90 91 c3 40 	lds	r25, 0x40C3	; 0x8040c3 <tako+0x1>
     bf6:	fc 01       	movw	r30, r24
     bf8:	13 8a       	std	Z+19, r1	; 0x13
     bfa:	88 ec       	ldi	r24, 0xC8	; 200
     bfc:	96 e0       	ldi	r25, 0x06	; 6
     bfe:	21 e0       	ldi	r18, 0x01	; 1
     c00:	fc 01       	movw	r30, r24
     c02:	23 83       	std	Z+3, r18	; 0x03
     c04:	00 00       	nop
     c06:	df 91       	pop	r29
     c08:	cf 91       	pop	r28
     c0a:	ff 91       	pop	r31
     c0c:	ef 91       	pop	r30
     c0e:	9f 91       	pop	r25
     c10:	8f 91       	pop	r24
     c12:	2f 91       	pop	r18
     c14:	0f 90       	pop	r0
     c16:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     c1a:	0f 90       	pop	r0
     c1c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     c20:	0f 90       	pop	r0
     c22:	1f 90       	pop	r1
     c24:	18 95       	reti

00000c26 <__vector_14>:
     c26:	1f 92       	push	r1
     c28:	0f 92       	push	r0
     c2a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     c2e:	0f 92       	push	r0
     c30:	11 24       	eor	r1, r1
     c32:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     c36:	0f 92       	push	r0
     c38:	2f 93       	push	r18
     c3a:	3f 93       	push	r19
     c3c:	4f 93       	push	r20
     c3e:	5f 93       	push	r21
     c40:	6f 93       	push	r22
     c42:	7f 93       	push	r23
     c44:	8f 93       	push	r24
     c46:	9f 93       	push	r25
     c48:	af 93       	push	r26
     c4a:	bf 93       	push	r27
     c4c:	ef 93       	push	r30
     c4e:	ff 93       	push	r31
     c50:	cf 93       	push	r28
     c52:	df 93       	push	r29
     c54:	cd b7       	in	r28, 0x3d	; 61
     c56:	de b7       	in	r29, 0x3e	; 62
     c58:	80 e0       	ldi	r24, 0x00	; 0
     c5a:	9b e0       	ldi	r25, 0x0B	; 11
     c5c:	fc 01       	movw	r30, r24
     c5e:	82 85       	ldd	r24, Z+10	; 0x0a
     c60:	93 85       	ldd	r25, Z+11	; 0x0b
     c62:	80 93 c4 40 	sts	0x40C4, r24	; 0x8040c4 <_ZL27capture_static_value_rising>
     c66:	90 93 c5 40 	sts	0x40C5, r25	; 0x8040c5 <_ZL27capture_static_value_rising+0x1>
     c6a:	80 91 c4 40 	lds	r24, 0x40C4	; 0x8040c4 <_ZL27capture_static_value_rising>
     c6e:	90 91 c5 40 	lds	r25, 0x40C5	; 0x8040c5 <_ZL27capture_static_value_rising+0x1>
     c72:	89 2b       	or	r24, r25
     c74:	e1 f0       	breq	.+56     	; 0xcae <__vector_14+0x88>
     c76:	80 91 c2 40 	lds	r24, 0x40C2	; 0x8040c2 <tako>
     c7a:	90 91 c3 40 	lds	r25, 0x40C3	; 0x8040c3 <tako+0x1>
     c7e:	fc 01       	movw	r30, r24
     c80:	85 89       	ldd	r24, Z+21	; 0x15
     c82:	88 23       	and	r24, r24
     c84:	71 f0       	breq	.+28     	; 0xca2 <__vector_14+0x7c>
     c86:	80 91 c2 40 	lds	r24, 0x40C2	; 0x8040c2 <tako>
     c8a:	90 91 c3 40 	lds	r25, 0x40C3	; 0x8040c3 <tako+0x1>
     c8e:	0e 94 ef 07 	call	0xfde	; 0xfde <_ZN18Zero_Cross_Counter22CaptureCounterB_RisingEv>
     c92:	80 91 c2 40 	lds	r24, 0x40C2	; 0x8040c2 <tako>
     c96:	90 91 c3 40 	lds	r25, 0x40C3	; 0x8040c3 <tako+0x1>
     c9a:	21 e0       	ldi	r18, 0x01	; 1
     c9c:	fc 01       	movw	r30, r24
     c9e:	22 a3       	std	Z+34, r18	; 0x22
     ca0:	06 c0       	rjmp	.+12     	; 0xcae <__vector_14+0x88>
     ca2:	80 91 c2 40 	lds	r24, 0x40C2	; 0x8040c2 <tako>
     ca6:	90 91 c3 40 	lds	r25, 0x40C3	; 0x8040c3 <tako+0x1>
     caa:	fc 01       	movw	r30, r24
     cac:	12 a2       	std	Z+34, r1	; 0x22
     cae:	80 91 c2 40 	lds	r24, 0x40C2	; 0x8040c2 <tako>
     cb2:	90 91 c3 40 	lds	r25, 0x40C3	; 0x8040c3 <tako+0x1>
     cb6:	21 e0       	ldi	r18, 0x01	; 1
     cb8:	fc 01       	movw	r30, r24
     cba:	26 8b       	std	Z+22, r18	; 0x16
     cbc:	80 91 c2 40 	lds	r24, 0x40C2	; 0x8040c2 <tako>
     cc0:	90 91 c3 40 	lds	r25, 0x40C3	; 0x8040c3 <tako+0x1>
     cc4:	21 e0       	ldi	r18, 0x01	; 1
     cc6:	fc 01       	movw	r30, r24
     cc8:	23 8b       	std	Z+19, r18	; 0x13
     cca:	80 91 c2 40 	lds	r24, 0x40C2	; 0x8040c2 <tako>
     cce:	90 91 c3 40 	lds	r25, 0x40C3	; 0x8040c3 <tako+0x1>
     cd2:	fc 01       	movw	r30, r24
     cd4:	15 8a       	std	Z+21, r1	; 0x15
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	9b e0       	ldi	r25, 0x0B	; 11
     cda:	21 e0       	ldi	r18, 0x01	; 1
     cdc:	fc 01       	movw	r30, r24
     cde:	26 83       	std	Z+6, r18	; 0x06
     ce0:	00 00       	nop
     ce2:	df 91       	pop	r29
     ce4:	cf 91       	pop	r28
     ce6:	ff 91       	pop	r31
     ce8:	ef 91       	pop	r30
     cea:	bf 91       	pop	r27
     cec:	af 91       	pop	r26
     cee:	9f 91       	pop	r25
     cf0:	8f 91       	pop	r24
     cf2:	7f 91       	pop	r23
     cf4:	6f 91       	pop	r22
     cf6:	5f 91       	pop	r21
     cf8:	4f 91       	pop	r20
     cfa:	3f 91       	pop	r19
     cfc:	2f 91       	pop	r18
     cfe:	0f 90       	pop	r0
     d00:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     d04:	0f 90       	pop	r0
     d06:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     d0a:	0f 90       	pop	r0
     d0c:	1f 90       	pop	r1
     d0e:	18 95       	reti

00000d10 <__vector_15>:
     d10:	1f 92       	push	r1
     d12:	0f 92       	push	r0
     d14:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     d18:	0f 92       	push	r0
     d1a:	11 24       	eor	r1, r1
     d1c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     d20:	0f 92       	push	r0
     d22:	2f 93       	push	r18
     d24:	3f 93       	push	r19
     d26:	4f 93       	push	r20
     d28:	5f 93       	push	r21
     d2a:	6f 93       	push	r22
     d2c:	7f 93       	push	r23
     d2e:	8f 93       	push	r24
     d30:	9f 93       	push	r25
     d32:	af 93       	push	r26
     d34:	bf 93       	push	r27
     d36:	ef 93       	push	r30
     d38:	ff 93       	push	r31
     d3a:	cf 93       	push	r28
     d3c:	df 93       	push	r29
     d3e:	cd b7       	in	r28, 0x3d	; 61
     d40:	de b7       	in	r29, 0x3e	; 62
     d42:	80 e1       	ldi	r24, 0x10	; 16
     d44:	9b e0       	ldi	r25, 0x0B	; 11
     d46:	fc 01       	movw	r30, r24
     d48:	82 85       	ldd	r24, Z+10	; 0x0a
     d4a:	93 85       	ldd	r25, Z+11	; 0x0b
     d4c:	80 93 c6 40 	sts	0x40C6, r24	; 0x8040c6 <_ZL28capture_static_value_falling>
     d50:	90 93 c7 40 	sts	0x40C7, r25	; 0x8040c7 <_ZL28capture_static_value_falling+0x1>
     d54:	80 91 c6 40 	lds	r24, 0x40C6	; 0x8040c6 <_ZL28capture_static_value_falling>
     d58:	90 91 c7 40 	lds	r25, 0x40C7	; 0x8040c7 <_ZL28capture_static_value_falling+0x1>
     d5c:	89 2b       	or	r24, r25
     d5e:	e1 f0       	breq	.+56     	; 0xd98 <__vector_15+0x88>
     d60:	80 91 c2 40 	lds	r24, 0x40C2	; 0x8040c2 <tako>
     d64:	90 91 c3 40 	lds	r25, 0x40C3	; 0x8040c3 <tako+0x1>
     d68:	fc 01       	movw	r30, r24
     d6a:	83 89       	ldd	r24, Z+19	; 0x13
     d6c:	88 23       	and	r24, r24
     d6e:	71 f0       	breq	.+28     	; 0xd8c <__vector_15+0x7c>
     d70:	80 91 c2 40 	lds	r24, 0x40C2	; 0x8040c2 <tako>
     d74:	90 91 c3 40 	lds	r25, 0x40C3	; 0x8040c3 <tako+0x1>
     d78:	0e 94 07 08 	call	0x100e	; 0x100e <_ZN18Zero_Cross_Counter23CaptureCounterB_FallingEv>
     d7c:	80 91 c2 40 	lds	r24, 0x40C2	; 0x8040c2 <tako>
     d80:	90 91 c3 40 	lds	r25, 0x40C3	; 0x8040c3 <tako+0x1>
     d84:	21 e0       	ldi	r18, 0x01	; 1
     d86:	fc 01       	movw	r30, r24
     d88:	22 a3       	std	Z+34, r18	; 0x22
     d8a:	06 c0       	rjmp	.+12     	; 0xd98 <__vector_15+0x88>
     d8c:	80 91 c2 40 	lds	r24, 0x40C2	; 0x8040c2 <tako>
     d90:	90 91 c3 40 	lds	r25, 0x40C3	; 0x8040c3 <tako+0x1>
     d94:	fc 01       	movw	r30, r24
     d96:	12 a2       	std	Z+34, r1	; 0x22
     d98:	80 91 c2 40 	lds	r24, 0x40C2	; 0x8040c2 <tako>
     d9c:	90 91 c3 40 	lds	r25, 0x40C3	; 0x8040c3 <tako+0x1>
     da0:	21 e0       	ldi	r18, 0x01	; 1
     da2:	fc 01       	movw	r30, r24
     da4:	27 8b       	std	Z+23, r18	; 0x17
     da6:	80 91 c2 40 	lds	r24, 0x40C2	; 0x8040c2 <tako>
     daa:	90 91 c3 40 	lds	r25, 0x40C3	; 0x8040c3 <tako+0x1>
     dae:	21 e0       	ldi	r18, 0x01	; 1
     db0:	fc 01       	movw	r30, r24
     db2:	25 8b       	std	Z+21, r18	; 0x15
     db4:	80 91 c2 40 	lds	r24, 0x40C2	; 0x8040c2 <tako>
     db8:	90 91 c3 40 	lds	r25, 0x40C3	; 0x8040c3 <tako+0x1>
     dbc:	fc 01       	movw	r30, r24
     dbe:	13 8a       	std	Z+19, r1	; 0x13
     dc0:	80 e1       	ldi	r24, 0x10	; 16
     dc2:	9b e0       	ldi	r25, 0x0B	; 11
     dc4:	21 e0       	ldi	r18, 0x01	; 1
     dc6:	fc 01       	movw	r30, r24
     dc8:	26 83       	std	Z+6, r18	; 0x06
     dca:	00 00       	nop
     dcc:	df 91       	pop	r29
     dce:	cf 91       	pop	r28
     dd0:	ff 91       	pop	r31
     dd2:	ef 91       	pop	r30
     dd4:	bf 91       	pop	r27
     dd6:	af 91       	pop	r26
     dd8:	9f 91       	pop	r25
     dda:	8f 91       	pop	r24
     ddc:	7f 91       	pop	r23
     dde:	6f 91       	pop	r22
     de0:	5f 91       	pop	r21
     de2:	4f 91       	pop	r20
     de4:	3f 91       	pop	r19
     de6:	2f 91       	pop	r18
     de8:	0f 90       	pop	r0
     dea:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     dee:	0f 90       	pop	r0
     df0:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     df4:	0f 90       	pop	r0
     df6:	1f 90       	pop	r1
     df8:	18 95       	reti

00000dfa <__vector_17>:
     dfa:	1f 92       	push	r1
     dfc:	0f 92       	push	r0
     dfe:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     e02:	0f 92       	push	r0
     e04:	11 24       	eor	r1, r1
     e06:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     e0a:	0f 92       	push	r0
     e0c:	2f 93       	push	r18
     e0e:	3f 93       	push	r19
     e10:	4f 93       	push	r20
     e12:	5f 93       	push	r21
     e14:	6f 93       	push	r22
     e16:	7f 93       	push	r23
     e18:	8f 93       	push	r24
     e1a:	9f 93       	push	r25
     e1c:	af 93       	push	r26
     e1e:	bf 93       	push	r27
     e20:	ef 93       	push	r30
     e22:	ff 93       	push	r31
     e24:	cf 93       	push	r28
     e26:	df 93       	push	r29
     e28:	cd b7       	in	r28, 0x3d	; 61
     e2a:	de b7       	in	r29, 0x3e	; 62
     e2c:	82 ea       	ldi	r24, 0xA2	; 162
     e2e:	9b e0       	ldi	r25, 0x0B	; 11
     e30:	fc 01       	movw	r30, r24
     e32:	80 81       	ld	r24, Z
     e34:	91 81       	ldd	r25, Z+1	; 0x01
     e36:	80 93 c8 40 	sts	0x40C8, r24	; 0x8040c8 <_ZL18capture_value_tc_a>
     e3a:	90 93 c9 40 	sts	0x40C9, r25	; 0x8040c9 <_ZL18capture_value_tc_a+0x1>
     e3e:	80 91 c2 40 	lds	r24, 0x40C2	; 0x8040c2 <tako>
     e42:	90 91 c3 40 	lds	r25, 0x40C3	; 0x8040c3 <tako+0x1>
     e46:	0e 94 99 07 	call	0xf32	; 0xf32 <_ZN18Zero_Cross_Counter15CaptureCounterCEv>
     e4a:	80 e8       	ldi	r24, 0x80	; 128
     e4c:	9b e0       	ldi	r25, 0x0B	; 11
     e4e:	2c e0       	ldi	r18, 0x0C	; 12
     e50:	fc 01       	movw	r30, r24
     e52:	25 87       	std	Z+13, r18	; 0x0d
     e54:	00 00       	nop
     e56:	df 91       	pop	r29
     e58:	cf 91       	pop	r28
     e5a:	ff 91       	pop	r31
     e5c:	ef 91       	pop	r30
     e5e:	bf 91       	pop	r27
     e60:	af 91       	pop	r26
     e62:	9f 91       	pop	r25
     e64:	8f 91       	pop	r24
     e66:	7f 91       	pop	r23
     e68:	6f 91       	pop	r22
     e6a:	5f 91       	pop	r21
     e6c:	4f 91       	pop	r20
     e6e:	3f 91       	pop	r19
     e70:	2f 91       	pop	r18
     e72:	0f 90       	pop	r0
     e74:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     e78:	0f 90       	pop	r0
     e7a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     e7e:	0f 90       	pop	r0
     e80:	1f 90       	pop	r1
     e82:	18 95       	reti

00000e84 <_ZN18Zero_Cross_CounterC1Ev>:
     e84:	cf 93       	push	r28
     e86:	df 93       	push	r29
     e88:	00 d0       	rcall	.+0      	; 0xe8a <_ZN18Zero_Cross_CounterC1Ev+0x6>
     e8a:	cd b7       	in	r28, 0x3d	; 61
     e8c:	de b7       	in	r29, 0x3e	; 62
     e8e:	89 83       	std	Y+1, r24	; 0x01
     e90:	9a 83       	std	Y+2, r25	; 0x02
     e92:	89 81       	ldd	r24, Y+1	; 0x01
     e94:	9a 81       	ldd	r25, Y+2	; 0x02
     e96:	0e 94 a8 00 	call	0x150	; 0x150 <_ZN19FREQUENCY_ESTIMATORC1Ev>
     e9a:	89 81       	ldd	r24, Y+1	; 0x01
     e9c:	9a 81       	ldd	r25, Y+2	; 0x02
     e9e:	2a ec       	ldi	r18, 0xCA	; 202
     ea0:	30 e4       	ldi	r19, 0x40	; 64
     ea2:	fc 01       	movw	r30, r24
     ea4:	24 8f       	std	Z+28, r18	; 0x1c
     ea6:	35 8f       	std	Z+29, r19	; 0x1d
     ea8:	89 81       	ldd	r24, Y+1	; 0x01
     eaa:	9a 81       	ldd	r25, Y+2	; 0x02
     eac:	26 ec       	ldi	r18, 0xC6	; 198
     eae:	30 e4       	ldi	r19, 0x40	; 64
     eb0:	fc 01       	movw	r30, r24
     eb2:	20 83       	st	Z, r18
     eb4:	31 83       	std	Z+1, r19	; 0x01
     eb6:	89 81       	ldd	r24, Y+1	; 0x01
     eb8:	9a 81       	ldd	r25, Y+2	; 0x02
     eba:	24 ec       	ldi	r18, 0xC4	; 196
     ebc:	30 e4       	ldi	r19, 0x40	; 64
     ebe:	fc 01       	movw	r30, r24
     ec0:	22 83       	std	Z+2, r18	; 0x02
     ec2:	33 83       	std	Z+3, r19	; 0x03
     ec4:	89 81       	ldd	r24, Y+1	; 0x01
     ec6:	9a 81       	ldd	r25, Y+2	; 0x02
     ec8:	21 e0       	ldi	r18, 0x01	; 1
     eca:	fc 01       	movw	r30, r24
     ecc:	25 8b       	std	Z+21, r18	; 0x15
     ece:	89 81       	ldd	r24, Y+1	; 0x01
     ed0:	9a 81       	ldd	r25, Y+2	; 0x02
     ed2:	21 e0       	ldi	r18, 0x01	; 1
     ed4:	fc 01       	movw	r30, r24
     ed6:	23 8b       	std	Z+19, r18	; 0x13
     ed8:	80 91 c0 40 	lds	r24, 0x40C0	; 0x8040c0 <post>
     edc:	90 91 c1 40 	lds	r25, 0x40C1	; 0x8040c1 <post+0x1>
     ee0:	2a ec       	ldi	r18, 0xCA	; 202
     ee2:	30 e4       	ldi	r19, 0x40	; 64
     ee4:	fc 01       	movw	r30, r24
     ee6:	27 83       	std	Z+7, r18	; 0x07
     ee8:	30 87       	std	Z+8, r19	; 0x08
     eea:	00 00       	nop
     eec:	0f 90       	pop	r0
     eee:	0f 90       	pop	r0
     ef0:	df 91       	pop	r29
     ef2:	cf 91       	pop	r28
     ef4:	08 95       	ret

00000ef6 <_ZN18Zero_Cross_CounterD1Ev>:
     ef6:	cf 93       	push	r28
     ef8:	df 93       	push	r29
     efa:	00 d0       	rcall	.+0      	; 0xefc <_ZN18Zero_Cross_CounterD1Ev+0x6>
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	89 83       	std	Y+1, r24	; 0x01
     f02:	9a 83       	std	Y+2, r25	; 0x02
     f04:	89 81       	ldd	r24, Y+1	; 0x01
     f06:	9a 81       	ldd	r25, Y+2	; 0x02
     f08:	0e 94 b9 00 	call	0x172	; 0x172 <_ZN19FREQUENCY_ESTIMATORD1Ev>
     f0c:	00 00       	nop
     f0e:	0f 90       	pop	r0
     f10:	0f 90       	pop	r0
     f12:	df 91       	pop	r29
     f14:	cf 91       	pop	r28
     f16:	08 95       	ret

00000f18 <_ZN18Zero_Cross_Counter4InitEv>:
     f18:	cf 93       	push	r28
     f1a:	df 93       	push	r29
     f1c:	00 d0       	rcall	.+0      	; 0xf1e <_ZN18Zero_Cross_Counter4InitEv+0x6>
     f1e:	cd b7       	in	r28, 0x3d	; 61
     f20:	de b7       	in	r29, 0x3e	; 62
     f22:	89 83       	std	Y+1, r24	; 0x01
     f24:	9a 83       	std	Y+2, r25	; 0x02
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	0f 90       	pop	r0
     f2a:	0f 90       	pop	r0
     f2c:	df 91       	pop	r29
     f2e:	cf 91       	pop	r28
     f30:	08 95       	ret

00000f32 <_ZN18Zero_Cross_Counter15CaptureCounterCEv>:
     f32:	cf 93       	push	r28
     f34:	df 93       	push	r29
     f36:	00 d0       	rcall	.+0      	; 0xf38 <_ZN18Zero_Cross_Counter15CaptureCounterCEv+0x6>
     f38:	cd b7       	in	r28, 0x3d	; 61
     f3a:	de b7       	in	r29, 0x3e	; 62
     f3c:	89 83       	std	Y+1, r24	; 0x01
     f3e:	9a 83       	std	Y+2, r25	; 0x02
     f40:	89 81       	ldd	r24, Y+1	; 0x01
     f42:	9a 81       	ldd	r25, Y+2	; 0x02
     f44:	fc 01       	movw	r30, r24
     f46:	87 a1       	ldd	r24, Z+39	; 0x27
     f48:	88 23       	and	r24, r24
     f4a:	99 f0       	breq	.+38     	; 0xf72 <_ZN18Zero_Cross_Counter15CaptureCounterCEv+0x40>
     f4c:	80 e8       	ldi	r24, 0x80	; 128
     f4e:	9b e0       	ldi	r25, 0x0B	; 11
     f50:	fc 01       	movw	r30, r24
     f52:	22 a1       	ldd	r18, Z+34	; 0x22
     f54:	33 a1       	ldd	r19, Z+35	; 0x23
     f56:	89 81       	ldd	r24, Y+1	; 0x01
     f58:	9a 81       	ldd	r25, Y+2	; 0x02
     f5a:	fc 01       	movw	r30, r24
     f5c:	23 a3       	std	Z+35, r18	; 0x23
     f5e:	34 a3       	std	Z+36, r19	; 0x24
     f60:	89 81       	ldd	r24, Y+1	; 0x01
     f62:	9a 81       	ldd	r25, Y+2	; 0x02
     f64:	fc 01       	movw	r30, r24
     f66:	83 a1       	ldd	r24, Z+35	; 0x23
     f68:	94 a1       	ldd	r25, Z+36	; 0x24
     f6a:	89 2b       	or	r24, r25
     f6c:	f1 f0       	breq	.+60     	; 0xfaa <_ZN18Zero_Cross_Counter15CaptureCounterCEv+0x78>
     f6e:	00 00       	nop
     f70:	1c c0       	rjmp	.+56     	; 0xfaa <_ZN18Zero_Cross_Counter15CaptureCounterCEv+0x78>
     f72:	80 e8       	ldi	r24, 0x80	; 128
     f74:	9b e0       	ldi	r25, 0x0B	; 11
     f76:	fc 01       	movw	r30, r24
     f78:	22 a1       	ldd	r18, Z+34	; 0x22
     f7a:	33 a1       	ldd	r19, Z+35	; 0x23
     f7c:	89 81       	ldd	r24, Y+1	; 0x01
     f7e:	9a 81       	ldd	r25, Y+2	; 0x02
     f80:	fc 01       	movw	r30, r24
     f82:	25 a3       	std	Z+37, r18	; 0x25
     f84:	36 a3       	std	Z+38, r19	; 0x26
     f86:	80 e8       	ldi	r24, 0x80	; 128
     f88:	9b e0       	ldi	r25, 0x0B	; 11
     f8a:	fc 01       	movw	r30, r24
     f8c:	22 a1       	ldd	r18, Z+34	; 0x22
     f8e:	33 a1       	ldd	r19, Z+35	; 0x23
     f90:	89 81       	ldd	r24, Y+1	; 0x01
     f92:	9a 81       	ldd	r25, Y+2	; 0x02
     f94:	fc 01       	movw	r30, r24
     f96:	25 a3       	std	Z+37, r18	; 0x25
     f98:	36 a3       	std	Z+38, r19	; 0x26
     f9a:	89 81       	ldd	r24, Y+1	; 0x01
     f9c:	9a 81       	ldd	r25, Y+2	; 0x02
     f9e:	fc 01       	movw	r30, r24
     fa0:	85 a1       	ldd	r24, Z+37	; 0x25
     fa2:	96 a1       	ldd	r25, Z+38	; 0x26
     fa4:	89 2b       	or	r24, r25
     fa6:	09 f0       	breq	.+2      	; 0xfaa <_ZN18Zero_Cross_Counter15CaptureCounterCEv+0x78>
     fa8:	00 00       	nop
     faa:	80 e8       	ldi	r24, 0x80	; 128
     fac:	9b e0       	ldi	r25, 0x0B	; 11
     fae:	24 e0       	ldi	r18, 0x04	; 4
     fb0:	fc 01       	movw	r30, r24
     fb2:	24 83       	std	Z+4, r18	; 0x04
     fb4:	89 81       	ldd	r24, Y+1	; 0x01
     fb6:	9a 81       	ldd	r25, Y+2	; 0x02
     fb8:	fc 01       	movw	r30, r24
     fba:	97 a1       	ldd	r25, Z+39	; 0x27
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	29 2f       	mov	r18, r25
     fc0:	28 27       	eor	r18, r24
     fc2:	89 81       	ldd	r24, Y+1	; 0x01
     fc4:	9a 81       	ldd	r25, Y+2	; 0x02
     fc6:	fc 01       	movw	r30, r24
     fc8:	27 a3       	std	Z+39, r18	; 0x27
     fca:	89 81       	ldd	r24, Y+1	; 0x01
     fcc:	9a 81       	ldd	r25, Y+2	; 0x02
     fce:	fc 01       	movw	r30, r24
     fd0:	13 8a       	std	Z+19, r1	; 0x13
     fd2:	00 00       	nop
     fd4:	0f 90       	pop	r0
     fd6:	0f 90       	pop	r0
     fd8:	df 91       	pop	r29
     fda:	cf 91       	pop	r28
     fdc:	08 95       	ret

00000fde <_ZN18Zero_Cross_Counter22CaptureCounterB_RisingEv>:
     fde:	cf 93       	push	r28
     fe0:	df 93       	push	r29
     fe2:	00 d0       	rcall	.+0      	; 0xfe4 <_ZN18Zero_Cross_Counter22CaptureCounterB_RisingEv+0x6>
     fe4:	cd b7       	in	r28, 0x3d	; 61
     fe6:	de b7       	in	r29, 0x3e	; 62
     fe8:	89 83       	std	Y+1, r24	; 0x01
     fea:	9a 83       	std	Y+2, r25	; 0x02
     fec:	80 91 c2 40 	lds	r24, 0x40C2	; 0x8040c2 <tako>
     ff0:	90 91 c3 40 	lds	r25, 0x40C3	; 0x8040c3 <tako+0x1>
     ff4:	20 91 c4 40 	lds	r18, 0x40C4	; 0x8040c4 <_ZL27capture_static_value_rising>
     ff8:	30 91 c5 40 	lds	r19, 0x40C5	; 0x8040c5 <_ZL27capture_static_value_rising+0x1>
     ffc:	fc 01       	movw	r30, r24
     ffe:	22 8f       	std	Z+26, r18	; 0x1a
    1000:	33 8f       	std	Z+27, r19	; 0x1b
    1002:	00 00       	nop
    1004:	0f 90       	pop	r0
    1006:	0f 90       	pop	r0
    1008:	df 91       	pop	r29
    100a:	cf 91       	pop	r28
    100c:	08 95       	ret

0000100e <_ZN18Zero_Cross_Counter23CaptureCounterB_FallingEv>:
    100e:	cf 93       	push	r28
    1010:	df 93       	push	r29
    1012:	00 d0       	rcall	.+0      	; 0x1014 <_ZN18Zero_Cross_Counter23CaptureCounterB_FallingEv+0x6>
    1014:	cd b7       	in	r28, 0x3d	; 61
    1016:	de b7       	in	r29, 0x3e	; 62
    1018:	89 83       	std	Y+1, r24	; 0x01
    101a:	9a 83       	std	Y+2, r25	; 0x02
    101c:	80 91 c2 40 	lds	r24, 0x40C2	; 0x8040c2 <tako>
    1020:	90 91 c3 40 	lds	r25, 0x40C3	; 0x8040c3 <tako+0x1>
    1024:	20 91 c6 40 	lds	r18, 0x40C6	; 0x8040c6 <_ZL28capture_static_value_falling>
    1028:	30 91 c7 40 	lds	r19, 0x40C7	; 0x8040c7 <_ZL28capture_static_value_falling+0x1>
    102c:	fc 01       	movw	r30, r24
    102e:	20 8f       	std	Z+24, r18	; 0x18
    1030:	31 8f       	std	Z+25, r19	; 0x19
    1032:	00 00       	nop
    1034:	0f 90       	pop	r0
    1036:	0f 90       	pop	r0
    1038:	df 91       	pop	r29
    103a:	cf 91       	pop	r28
    103c:	08 95       	ret

0000103e <_ZN18Zero_Cross_Counter26Set_Last_Capture_FrequencyEv>:
void Zero_Cross_Counter::Set_Last_Capture_Frequency(void){
    103e:	0f 93       	push	r16
    1040:	1f 93       	push	r17
    1042:	cf 93       	push	r28
    1044:	df 93       	push	r29
    1046:	cd b7       	in	r28, 0x3d	; 61
    1048:	de b7       	in	r29, 0x3e	; 62
    104a:	2c 97       	sbiw	r28, 0x0c	; 12
    104c:	cd bf       	out	0x3d, r28	; 61
    104e:	de bf       	out	0x3e, r29	; 62
    1050:	8b 87       	std	Y+11, r24	; 0x0b
    1052:	9c 87       	std	Y+12, r25	; 0x0c
	uint32_t local_value;
	tako->frequency_out=OnCapture_Frequecy_Out();
    1054:	00 91 c2 40 	lds	r16, 0x40C2	; 0x8040c2 <tako>
    1058:	10 91 c3 40 	lds	r17, 0x40C3	; 0x8040c3 <tako+0x1>
    105c:	8b 85       	ldd	r24, Y+11	; 0x0b
    105e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1060:	0e 94 c6 00 	call	0x18c	; 0x18c <_ZN19FREQUENCY_ESTIMATOR22OnCapture_Frequecy_OutEv>
    1064:	dc 01       	movw	r26, r24
    1066:	cb 01       	movw	r24, r22
    1068:	f8 01       	movw	r30, r16
    106a:	86 8f       	std	Z+30, r24	; 0x1e
    106c:	97 8f       	std	Z+31, r25	; 0x1f
    106e:	a0 a3       	std	Z+32, r26	; 0x20
    1070:	b1 a3       	std	Z+33, r27	; 0x21
	uint32_t	dummy_frequency=frequency_out;
    1072:	8b 85       	ldd	r24, Y+11	; 0x0b
    1074:	9c 85       	ldd	r25, Y+12	; 0x0c
    1076:	fc 01       	movw	r30, r24
    1078:	86 8d       	ldd	r24, Z+30	; 0x1e
    107a:	97 8d       	ldd	r25, Z+31	; 0x1f
    107c:	a0 a1       	ldd	r26, Z+32	; 0x20
    107e:	b1 a1       	ldd	r27, Z+33	; 0x21
    1080:	8b 83       	std	Y+3, r24	; 0x03
    1082:	9c 83       	std	Y+4, r25	; 0x04
    1084:	ad 83       	std	Y+5, r26	; 0x05
    1086:	be 83       	std	Y+6, r27	; 0x06
	for (int i = 0; i < 4; i++)
    1088:	19 82       	std	Y+1, r1	; 0x01
    108a:	1a 82       	std	Y+2, r1	; 0x02
    108c:	89 81       	ldd	r24, Y+1	; 0x01
    108e:	9a 81       	ldd	r25, Y+2	; 0x02
    1090:	04 97       	sbiw	r24, 0x04	; 4
    1092:	0c f0       	brlt	.+2      	; 0x1096 <_ZN18Zero_Cross_Counter26Set_Last_Capture_FrequencyEv+0x58>
    1094:	45 c0       	rjmp	.+138    	; 0x1120 <_ZN18Zero_Cross_Counter26Set_Last_Capture_FrequencyEv+0xe2>
	{
		local_value=(dummy_frequency>>((3-i)*8))&0xff;
    1096:	23 e0       	ldi	r18, 0x03	; 3
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	89 81       	ldd	r24, Y+1	; 0x01
    109c:	9a 81       	ldd	r25, Y+2	; 0x02
    109e:	a9 01       	movw	r20, r18
    10a0:	48 1b       	sub	r20, r24
    10a2:	59 0b       	sbc	r21, r25
    10a4:	ca 01       	movw	r24, r20
    10a6:	9c 01       	movw	r18, r24
    10a8:	22 0f       	add	r18, r18
    10aa:	33 1f       	adc	r19, r19
    10ac:	22 0f       	add	r18, r18
    10ae:	33 1f       	adc	r19, r19
    10b0:	22 0f       	add	r18, r18
    10b2:	33 1f       	adc	r19, r19
    10b4:	8b 81       	ldd	r24, Y+3	; 0x03
    10b6:	9c 81       	ldd	r25, Y+4	; 0x04
    10b8:	ad 81       	ldd	r26, Y+5	; 0x05
    10ba:	be 81       	ldd	r27, Y+6	; 0x06
    10bc:	04 c0       	rjmp	.+8      	; 0x10c6 <_ZN18Zero_Cross_Counter26Set_Last_Capture_FrequencyEv+0x88>
    10be:	b6 95       	lsr	r27
    10c0:	a7 95       	ror	r26
    10c2:	97 95       	ror	r25
    10c4:	87 95       	ror	r24
    10c6:	2a 95       	dec	r18
    10c8:	d2 f7       	brpl	.-12     	; 0x10be <_ZN18Zero_Cross_Counter26Set_Last_Capture_FrequencyEv+0x80>
    10ca:	99 27       	eor	r25, r25
    10cc:	aa 27       	eor	r26, r26
    10ce:	bb 27       	eor	r27, r27
    10d0:	8f 83       	std	Y+7, r24	; 0x07
    10d2:	98 87       	std	Y+8, r25	; 0x08
    10d4:	a9 87       	std	Y+9, r26	; 0x09
    10d6:	ba 87       	std	Y+10, r27	; 0x0a
		if (i==0)
    10d8:	89 81       	ldd	r24, Y+1	; 0x01
    10da:	9a 81       	ldd	r25, Y+2	; 0x02
    10dc:	89 2b       	or	r24, r25
    10de:	71 f4       	brne	.+28     	; 0x10fc <_ZN18Zero_Cross_Counter26Set_Last_Capture_FrequencyEv+0xbe>
		{
			last_frequency[i]=(0xa0)|((uint8_t)local_value&0xff);
    10e0:	8b 85       	ldd	r24, Y+11	; 0x0b
    10e2:	9c 85       	ldd	r25, Y+12	; 0x0c
    10e4:	fc 01       	movw	r30, r24
    10e6:	24 8d       	ldd	r18, Z+28	; 0x1c
    10e8:	35 8d       	ldd	r19, Z+29	; 0x1d
    10ea:	89 81       	ldd	r24, Y+1	; 0x01
    10ec:	9a 81       	ldd	r25, Y+2	; 0x02
    10ee:	82 0f       	add	r24, r18
    10f0:	93 1f       	adc	r25, r19
    10f2:	2f 81       	ldd	r18, Y+7	; 0x07
    10f4:	20 6a       	ori	r18, 0xA0	; 160
    10f6:	fc 01       	movw	r30, r24
    10f8:	20 83       	st	Z, r18
    10fa:	0c c0       	rjmp	.+24     	; 0x1114 <_ZN18Zero_Cross_Counter26Set_Last_Capture_FrequencyEv+0xd6>
		} 
		else
		{
			last_frequency[i]=((uint8_t)local_value&0xff);
    10fc:	8b 85       	ldd	r24, Y+11	; 0x0b
    10fe:	9c 85       	ldd	r25, Y+12	; 0x0c
    1100:	fc 01       	movw	r30, r24
    1102:	24 8d       	ldd	r18, Z+28	; 0x1c
    1104:	35 8d       	ldd	r19, Z+29	; 0x1d
    1106:	89 81       	ldd	r24, Y+1	; 0x01
    1108:	9a 81       	ldd	r25, Y+2	; 0x02
    110a:	82 0f       	add	r24, r18
    110c:	93 1f       	adc	r25, r19
    110e:	2f 81       	ldd	r18, Y+7	; 0x07
    1110:	fc 01       	movw	r30, r24
    1112:	20 83       	st	Z, r18
}
void Zero_Cross_Counter::Set_Last_Capture_Frequency(void){
	uint32_t local_value;
	tako->frequency_out=OnCapture_Frequecy_Out();
	uint32_t	dummy_frequency=frequency_out;
	for (int i = 0; i < 4; i++)
    1114:	89 81       	ldd	r24, Y+1	; 0x01
    1116:	9a 81       	ldd	r25, Y+2	; 0x02
    1118:	01 96       	adiw	r24, 0x01	; 1
    111a:	89 83       	std	Y+1, r24	; 0x01
    111c:	9a 83       	std	Y+2, r25	; 0x02
    111e:	b6 cf       	rjmp	.-148    	; 0x108c <_ZN18Zero_Cross_Counter26Set_Last_Capture_FrequencyEv+0x4e>
		}
		
	}
	//memcpy((void*)last_frequency,(void*)&lf,4);
	
}
    1120:	00 00       	nop
    1122:	2c 96       	adiw	r28, 0x0c	; 12
    1124:	cd bf       	out	0x3d, r28	; 61
    1126:	de bf       	out	0x3e, r29	; 62
    1128:	df 91       	pop	r29
    112a:	cf 91       	pop	r28
    112c:	1f 91       	pop	r17
    112e:	0f 91       	pop	r16
    1130:	08 95       	ret

00001132 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
    1132:	0e 94 71 09 	call	0x12e2	; 0x12e2 <system_init>
    1136:	08 95       	ret

00001138 <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
    1138:	80 e0       	ldi	r24, 0x00	; 0
    113a:	08 c0       	rjmp	.+16     	; 0x114c <mcu_init+0x14>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    113c:	e8 2f       	mov	r30, r24
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	e0 5f       	subi	r30, 0xF0	; 240
    1142:	fb 4f       	sbci	r31, 0xFB	; 251
    1144:	90 81       	ld	r25, Z
    1146:	98 60       	ori	r25, 0x08	; 8
    1148:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
    114a:	8f 5f       	subi	r24, 0xFF	; 255
    114c:	88 30       	cpi	r24, 0x08	; 8
    114e:	b0 f3       	brcs	.-20     	; 0x113c <mcu_init+0x4>
    1150:	80 e0       	ldi	r24, 0x00	; 0
    1152:	08 c0       	rjmp	.+16     	; 0x1164 <mcu_init+0x2c>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    1154:	e8 2f       	mov	r30, r24
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	e0 5d       	subi	r30, 0xD0	; 208
    115a:	fb 4f       	sbci	r31, 0xFB	; 251
    115c:	90 81       	ld	r25, Z
    115e:	98 60       	ori	r25, 0x08	; 8
    1160:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    1162:	8f 5f       	subi	r24, 0xFF	; 255
    1164:	88 30       	cpi	r24, 0x08	; 8
    1166:	b0 f3       	brcs	.-20     	; 0x1154 <mcu_init+0x1c>
    1168:	80 e0       	ldi	r24, 0x00	; 0
    116a:	08 c0       	rjmp	.+16     	; 0x117c <mcu_init+0x44>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    116c:	e8 2f       	mov	r30, r24
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	e0 5b       	subi	r30, 0xB0	; 176
    1172:	fb 4f       	sbci	r31, 0xFB	; 251
    1174:	90 81       	ld	r25, Z
    1176:	98 60       	ori	r25, 0x08	; 8
    1178:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    117a:	8f 5f       	subi	r24, 0xFF	; 255
    117c:	88 30       	cpi	r24, 0x08	; 8
    117e:	b0 f3       	brcs	.-20     	; 0x116c <mcu_init+0x34>
    1180:	80 e0       	ldi	r24, 0x00	; 0
    1182:	08 c0       	rjmp	.+16     	; 0x1194 <mcu_init+0x5c>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    1184:	e8 2f       	mov	r30, r24
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	e0 59       	subi	r30, 0x90	; 144
    118a:	fb 4f       	sbci	r31, 0xFB	; 251
    118c:	90 81       	ld	r25, Z
    118e:	98 60       	ori	r25, 0x08	; 8
    1190:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    1192:	8f 5f       	subi	r24, 0xFF	; 255
    1194:	88 30       	cpi	r24, 0x08	; 8
    1196:	b0 f3       	brcs	.-20     	; 0x1184 <mcu_init+0x4c>
    1198:	80 e0       	ldi	r24, 0x00	; 0
    119a:	08 c0       	rjmp	.+16     	; 0x11ac <mcu_init+0x74>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    119c:	e8 2f       	mov	r30, r24
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	e0 57       	subi	r30, 0x70	; 112
    11a2:	fb 4f       	sbci	r31, 0xFB	; 251
    11a4:	90 81       	ld	r25, Z
    11a6:	98 60       	ori	r25, 0x08	; 8
    11a8:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    11aa:	8f 5f       	subi	r24, 0xFF	; 255
    11ac:	88 30       	cpi	r24, 0x08	; 8
    11ae:	b0 f3       	brcs	.-20     	; 0x119c <mcu_init+0x64>
    11b0:	80 e0       	ldi	r24, 0x00	; 0
    11b2:	08 c0       	rjmp	.+16     	; 0x11c4 <mcu_init+0x8c>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    11b4:	e8 2f       	mov	r30, r24
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	e0 55       	subi	r30, 0x50	; 80
    11ba:	fb 4f       	sbci	r31, 0xFB	; 251
    11bc:	90 81       	ld	r25, Z
    11be:	98 60       	ori	r25, 0x08	; 8
    11c0:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    11c2:	8f 5f       	subi	r24, 0xFF	; 255
    11c4:	88 30       	cpi	r24, 0x08	; 8
    11c6:	b0 f3       	brcs	.-20     	; 0x11b4 <mcu_init+0x7c>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
    11c8:	08 95       	ret

000011ca <OPERATIONAL_AMPLIFIER_0_initialization>:
 */
static inline void PORTD_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    11ca:	e7 e7       	ldi	r30, 0x77	; 119
    11cc:	f4 e0       	ldi	r31, 0x04	; 4
    11ce:	80 81       	ld	r24, Z
    11d0:	88 7f       	andi	r24, 0xF8	; 248
    11d2:	84 60       	ori	r24, 0x04	; 4
    11d4:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    11d6:	80 81       	ld	r24, Z
    11d8:	87 7f       	andi	r24, 0xF7	; 247
    11da:	80 83       	st	Z, r24
 */
static inline void PORTD_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    11dc:	e5 e7       	ldi	r30, 0x75	; 117
    11de:	f4 e0       	ldi	r31, 0x04	; 4
    11e0:	80 81       	ld	r24, Z
    11e2:	88 7f       	andi	r24, 0xF8	; 248
    11e4:	84 60       	ori	r24, 0x04	; 4
    11e6:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    11e8:	80 81       	ld	r24, Z
    11ea:	87 7f       	andi	r24, 0xF7	; 247
    11ec:	80 83       	st	Z, r24
	// Disable digital input buffer
	PD5_set_isc(PORT_ISC_INPUT_DISABLE_gc);
	// Disable pull-up resistor
	PD5_set_pull_mode(PORT_PULL_OFF);

	OPERATIONAL_AMPLIFIER_0_init();
    11ee:	0e 94 ad 09 	call	0x135a	; 0x135a <OPERATIONAL_AMPLIFIER_0_init>
    11f2:	08 95       	ret

000011f4 <USART_0_initialization>:
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
    11f4:	84 b1       	in	r24, 0x04	; 4
    11f6:	8d 7f       	andi	r24, 0xFD	; 253
    11f8:	84 b9       	out	0x04, r24	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    11fa:	e1 e3       	ldi	r30, 0x31	; 49
    11fc:	f4 e0       	ldi	r31, 0x04	; 4
    11fe:	80 81       	ld	r24, Z
    1200:	87 7f       	andi	r24, 0xF7	; 247
    1202:	80 83       	st	Z, r24
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
    1204:	85 b1       	in	r24, 0x05	; 5
    1206:	8e 7f       	andi	r24, 0xFE	; 254
    1208:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    120a:	84 b1       	in	r24, 0x04	; 4
    120c:	81 60       	ori	r24, 0x01	; 1
    120e:	84 b9       	out	0x04, r24	; 4
	    // <true"> High
	    false);

	PB0_set_dir(PORT_DIR_OUT);

	USART_0_init();
    1210:	0e 94 13 0a 	call	0x1426	; 0x1426 <USART_0_init>
    1214:	08 95       	ret

00001216 <EVENT_SYSTEM_0_initialization>:
}

void EVENT_SYSTEM_0_initialization(void)
{

	EVENT_SYSTEM_0_init();
    1216:	0e 94 9a 09 	call	0x1334	; 0x1334 <EVENT_SYSTEM_0_init>
    121a:	08 95       	ret

0000121c <ZCD_RISING_initialization>:
 */
static inline void PORTD_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    121c:	e1 e7       	ldi	r30, 0x71	; 113
    121e:	f4 e0       	ldi	r31, 0x04	; 4
    1220:	80 81       	ld	r24, Z
    1222:	88 7f       	andi	r24, 0xF8	; 248
    1224:	84 60       	ori	r24, 0x04	; 4
    1226:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    1228:	80 81       	ld	r24, Z
    122a:	87 7f       	andi	r24, 0xF7	; 247
    122c:	80 83       	st	Z, r24
	// Disable digital input buffer
	PD1_set_isc(PORT_ISC_INPUT_DISABLE_gc);
	// Disable pull-up resistor
	PD1_set_pull_mode(PORT_PULL_OFF);

	ZCD_RISING_init();
    122e:	0e 94 34 0a 	call	0x1468	; 0x1468 <ZCD_RISING_init>
    1232:	08 95       	ret

00001234 <ZCD_FALLING_initialization>:
 */
static inline void PORTE_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTE + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    1234:	e3 e9       	ldi	r30, 0x93	; 147
    1236:	f4 e0       	ldi	r31, 0x04	; 4
    1238:	80 81       	ld	r24, Z
    123a:	88 7f       	andi	r24, 0xF8	; 248
    123c:	84 60       	ori	r24, 0x04	; 4
    123e:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTE + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    1240:	80 81       	ld	r24, Z
    1242:	87 7f       	andi	r24, 0xF7	; 247
    1244:	80 83       	st	Z, r24
	// Disable digital input buffer
	PE3_set_isc(PORT_ISC_INPUT_DISABLE_gc);
	// Disable pull-up resistor
	PE3_set_pull_mode(PORT_PULL_OFF);

	ZCD_FALLING_init();
    1246:	0e 94 3b 0a 	call	0x1476	; 0x1476 <ZCD_FALLING_init>
    124a:	08 95       	ret

0000124c <SPI_REFERENCE_initialization>:
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    124c:	81 b1       	in	r24, 0x01	; 1
    124e:	8f 7d       	andi	r24, 0xDF	; 223
    1250:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    1252:	80 b1       	in	r24, 0x00	; 0
    1254:	80 62       	ori	r24, 0x20	; 32
    1256:	80 b9       	out	0x00, r24	; 0
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
    1258:	80 b1       	in	r24, 0x00	; 0
    125a:	8f 7e       	andi	r24, 0xEF	; 239
    125c:	80 b9       	out	0x00, r24	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    125e:	e4 e1       	ldi	r30, 0x14	; 20
    1260:	f4 e0       	ldi	r31, 0x04	; 4
    1262:	80 81       	ld	r24, Z
    1264:	87 7f       	andi	r24, 0xF7	; 247
    1266:	80 83       	st	Z, r24
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
    1268:	80 b1       	in	r24, 0x00	; 0
    126a:	8f 7b       	andi	r24, 0xBF	; 191
    126c:	80 b9       	out	0x00, r24	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    126e:	e6 e1       	ldi	r30, 0x16	; 22
    1270:	f4 e0       	ldi	r31, 0x04	; 4
    1272:	80 81       	ld	r24, Z
    1274:	87 7f       	andi	r24, 0xF7	; 247
    1276:	80 83       	st	Z, r24
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
    1278:	80 b1       	in	r24, 0x00	; 0
    127a:	8f 77       	andi	r24, 0x7F	; 127
    127c:	80 b9       	out	0x00, r24	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    127e:	e7 e1       	ldi	r30, 0x17	; 23
    1280:	f4 e0       	ldi	r31, 0x04	; 4
    1282:	80 81       	ld	r24, Z
    1284:	87 7f       	andi	r24, 0xF7	; 247
    1286:	80 83       	st	Z, r24
	    // <id> pad_pull_config
	    // <PORT_PULL_OFF"> Off
	    // <PORT_PULL_UP"> Pull-up
	    PORT_PULL_OFF);

	SPI_REFERENCE_init();
    1288:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <SPI_REFERENCE_init>
    128c:	08 95       	ret

0000128e <SPI_ZCD_initialization>:
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
    128e:	89 b1       	in	r24, 0x09	; 9
    1290:	8d 7f       	andi	r24, 0xFD	; 253
    1292:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
    1294:	88 b1       	in	r24, 0x08	; 8
    1296:	82 60       	ori	r24, 0x02	; 2
    1298:	88 b9       	out	0x08, r24	; 8
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
    129a:	88 b1       	in	r24, 0x08	; 8
    129c:	8e 7f       	andi	r24, 0xFE	; 254
    129e:	88 b9       	out	0x08, r24	; 8
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    12a0:	e0 e5       	ldi	r30, 0x50	; 80
    12a2:	f4 e0       	ldi	r31, 0x04	; 4
    12a4:	80 81       	ld	r24, Z
    12a6:	87 7f       	andi	r24, 0xF7	; 247
    12a8:	80 83       	st	Z, r24
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
    12aa:	88 b1       	in	r24, 0x08	; 8
    12ac:	8b 7f       	andi	r24, 0xFB	; 251
    12ae:	88 b9       	out	0x08, r24	; 8
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    12b0:	e2 e5       	ldi	r30, 0x52	; 82
    12b2:	f4 e0       	ldi	r31, 0x04	; 4
    12b4:	80 81       	ld	r24, Z
    12b6:	87 7f       	andi	r24, 0xF7	; 247
    12b8:	80 83       	st	Z, r24
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
    12ba:	88 b1       	in	r24, 0x08	; 8
    12bc:	87 7f       	andi	r24, 0xF7	; 247
    12be:	88 b9       	out	0x08, r24	; 8
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    12c0:	e3 e5       	ldi	r30, 0x53	; 83
    12c2:	f4 e0       	ldi	r31, 0x04	; 4
    12c4:	80 81       	ld	r24, Z
    12c6:	87 7f       	andi	r24, 0xF7	; 247
    12c8:	80 83       	st	Z, r24
	    // <id> pad_pull_config
	    // <PORT_PULL_OFF"> Off
	    // <PORT_PULL_UP"> Pull-up
	    PORT_PULL_OFF);

	SPI_ZCD_init();
    12ca:	0e 94 da 09 	call	0x13b4	; 0x13b4 <SPI_ZCD_init>
    12ce:	08 95       	ret

000012d0 <TIMER_RISING_initialization>:
}

void TIMER_RISING_initialization(void)
{

	TIMER_RISING_init();
    12d0:	0e 94 e6 09 	call	0x13cc	; 0x13cc <TIMER_RISING_init>
    12d4:	08 95       	ret

000012d6 <TIMER_FALLING_initialization>:
}

void TIMER_FALLING_initialization(void)
{

	TIMER_FALLING_init();
    12d6:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <TIMER_FALLING_init>
    12da:	08 95       	ret

000012dc <TIMER_0_initialization>:
}

void TIMER_0_initialization(void)
{

	TIMER_0_init();
    12dc:	0e 94 fe 09 	call	0x13fc	; 0x13fc <TIMER_0_init>
    12e0:	08 95       	ret

000012e2 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
    12e2:	0e 94 9c 08 	call	0x1138	; 0x1138 <mcu_init>
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
    12e6:	85 b1       	in	r24, 0x05	; 5
    12e8:	87 7f       	andi	r24, 0xF7	; 247
    12ea:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    12ec:	84 b1       	in	r24, 0x04	; 4
    12ee:	88 60       	ori	r24, 0x08	; 8
    12f0:	84 b9       	out	0x04, r24	; 4
	    // <true"> High
	    false);

	LED0_set_dir(PORT_DIR_OUT);

	OPERATIONAL_AMPLIFIER_0_initialization();
    12f2:	0e 94 e5 08 	call	0x11ca	; 0x11ca <OPERATIONAL_AMPLIFIER_0_initialization>

	CLKCTRL_init();
    12f6:	0e 94 46 0a 	call	0x148c	; 0x148c <CLKCTRL_init>

	USART_0_initialization();
    12fa:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <USART_0_initialization>

	EVENT_SYSTEM_0_initialization();
    12fe:	0e 94 0b 09 	call	0x1216	; 0x1216 <EVENT_SYSTEM_0_initialization>

	SLPCTRL_init();
    1302:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <SLPCTRL_init>

	CPUINT_init();
    1306:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <CPUINT_init>

	ZCD_RISING_initialization();
    130a:	0e 94 0e 09 	call	0x121c	; 0x121c <ZCD_RISING_initialization>

	ZCD_FALLING_initialization();
    130e:	0e 94 1a 09 	call	0x1234	; 0x1234 <ZCD_FALLING_initialization>

	SPI_REFERENCE_initialization();
    1312:	0e 94 26 09 	call	0x124c	; 0x124c <SPI_REFERENCE_initialization>

	SPI_ZCD_initialization();
    1316:	0e 94 47 09 	call	0x128e	; 0x128e <SPI_ZCD_initialization>

	RTC_0_init();
    131a:	0e 94 bf 09 	call	0x137e	; 0x137e <RTC_0_init>

	TIMER_RISING_initialization();
    131e:	0e 94 68 09 	call	0x12d0	; 0x12d0 <TIMER_RISING_initialization>

	TIMER_FALLING_initialization();
    1322:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <TIMER_FALLING_initialization>

	TIMER_0_initialization();
    1326:	0e 94 6e 09 	call	0x12dc	; 0x12dc <TIMER_0_initialization>

	VREF_0_init();
    132a:	0e 94 2f 0a 	call	0x145e	; 0x145e <VREF_0_init>

	BOD_init();
    132e:	0e 94 42 0a 	call	0x1484	; 0x1484 <BOD_init>
    1332:	08 95       	ret

00001334 <EVENT_SYSTEM_0_init>:
 * \return Initialization status.
 */
int8_t EVENT_SYSTEM_0_init()
{

	EVSYS.CHANNEL0 = EVSYS_CHANNEL0_ZCD0_gc; /* Zero Cross Detect 0 out */
    1334:	e0 e0       	ldi	r30, 0x00	; 0
    1336:	f2 e0       	ldi	r31, 0x02	; 2
    1338:	80 e3       	ldi	r24, 0x30	; 48
    133a:	80 8b       	std	Z+16, r24	; 0x10

	EVSYS.CHANNEL1 = EVSYS_CHANNEL1_ZCD1_gc; /* Zero Cross Detect 1 out */
    133c:	81 e3       	ldi	r24, 0x31	; 49
    133e:	81 8b       	std	Z+17, r24	; 0x11

	// EVSYS.USERTCA1CNTA = EVSYS_USER_OFF_gc; /* Off */

	// EVSYS.USERTCA1CNTB = EVSYS_USER_OFF_gc; /* Off */

	EVSYS.USERTCB0CAPT = EVSYS_USER_CHANNEL0_gc; /* Connect user to event channel 0 */
    1340:	91 e0       	ldi	r25, 0x01	; 1
    1342:	96 af       	std	Z+62, r25	; 0x3e

	// EVSYS.USERTCB0COUNT = EVSYS_USER_OFF_gc; /* Off */

	EVSYS.USERTCB1CAPT = EVSYS_USER_CHANNEL1_gc; /* Connect user to event channel 1 */
    1344:	82 e0       	ldi	r24, 0x02	; 2
    1346:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <__TEXT_REGION_LENGTH__+0x7e0240>

	// EVSYS.USERTCB2CAPT = EVSYS_USER_OFF_gc; /* Off */

	// EVSYS.USERTCB2COUNT = EVSYS_USER_OFF_gc; /* Off */

	EVSYS.USERTCB3CAPT = EVSYS_USER_CHANNEL1_gc; /* Connect user to event channel 1 */
    134a:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <__TEXT_REGION_LENGTH__+0x7e0244>

	// EVSYS.USERTCB3COUNT = EVSYS_USER_OFF_gc; /* Off */

	EVSYS.USERTCD0INPUTA = EVSYS_USER_CHANNEL0_gc; /* Connect user to event channel 0 */
    134e:	90 93 48 02 	sts	0x0248, r25	; 0x800248 <__TEXT_REGION_LENGTH__+0x7e0248>

	EVSYS.USERTCD0INPUTB = EVSYS_USER_CHANNEL1_gc; /* Connect user to event channel 1 */
    1352:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <__TEXT_REGION_LENGTH__+0x7e0249>
	// EVSYS.USEROPAMP2DUMP = EVSYS_USER_OFF_gc; /* Off */

	// EVSYS.USEROPAMP2DISABLE = EVSYS_USER_OFF_gc; /* Off */

	return 0;
}
    1356:	80 e0       	ldi	r24, 0x00	; 0
    1358:	08 95       	ret

0000135a <OPERATIONAL_AMPLIFIER_0_init>:
 * \return Initialization status.
 */
int8_t OPERATIONAL_AMPLIFIER_0_init()
{

	OPAMP.CTRLA = 1 << OPAMP_ENABLE_bp; /* OPAMP Peripheral Enable: enabled */
    135a:	e0 e0       	ldi	r30, 0x00	; 0
    135c:	f7 e0       	ldi	r31, 0x07	; 7
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	80 83       	st	Z, r24

	OPAMP.DBGCTRL = 1 << OPAMP_DBGRUN_bp; /* Run in Debug mode: enabled */
    1362:	81 83       	std	Z+1, r24	; 0x01

	OPAMP.TIMEBASE = OPAMP_TIMEBASE_VALUE << OPAMP_TIMEBASE_gp;
    1364:	87 e1       	ldi	r24, 0x17	; 23
    1366:	82 83       	std	Z+2, r24	; 0x02

	 OPAMP.PWRCTRL = OPAMP_PWRCTRL_IRSEL_FULL_gc; /* Full Input Range */
    1368:	17 86       	std	Z+15, r1	; 0x0f

	OPAMP.OP1SETTLE = 0x7f << OPAMP_SETTLE_gp; /* Setting: 0x7f */
    136a:	8f e7       	ldi	r24, 0x7F	; 127
    136c:	84 8f       	std	Z+28, r24	; 0x1c

	OPAMP.OP1CTRLA = 1 << OPAMP_ALWAYSON_bp             /* Always ON: enabled */
    136e:	85 e0       	ldi	r24, 0x05	; 5
    1370:	80 8f       	std	Z+24, r24	; 0x18
	                 | 0 << OPAMP_EVENTEN_bp            /* Event Enable: disabled */
	                 | OPAMP_OP1CTRLA_OUTMODE_NORMAL_gc /* Output Driver in Normal Mode */
	                 | 0 << OPAMP_RUNSTBY_bp;           /* Run is standby mode: disabled */

	OPAMP.OP1RESMUX = OPAMP_OP1RESMUX_MUXTOP_OUT_gc     /* OPn output */
    1372:	89 ee       	ldi	r24, 0xE9	; 233
    1374:	82 8f       	std	Z+26, r24	; 0x1a
	                  | OPAMP_OP1RESMUX_MUXBOT_INN_gc   /* Negative input pin for OPn */
	                  | OPAMP_OP1RESMUX_MUXWIP_WIP7_gc; /* R1 = 1R, R2 = 15R, R2/R1 = 15 */

	OPAMP.OP1INMUX = OPAMP_OP1INMUX_MUXPOS_VDDDIV2_gc /* VDD/2 */
    1376:	84 e1       	ldi	r24, 0x14	; 20
    1378:	83 8f       	std	Z+27, r24	; 0x1b
	                 | OPAMP_OP1INMUX_MUXNEG_WIP_gc;  /* Wiper from OPn's resistor ladder */

	return 0;
}
    137a:	80 e0       	ldi	r24, 0x00	; 0
    137c:	08 95       	ret

0000137e <RTC_0_init>:
 * \return Initialization status.
 */
int8_t RTC_0_init()
{

	while (RTC.STATUS > 0) { /* Wait for all register to be synchronized */
    137e:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    1382:	81 11       	cpse	r24, r1
    1384:	fc cf       	rjmp	.-8      	; 0x137e <RTC_0_init>

	// RTC.CMP = 0x0; /* Compare: 0x0 */

	// RTC.CNT = 0x0; /* Counter: 0x0 */

	RTC.CTRLA = RTC_PRESCALER_DIV32_gc  /* 32 */
    1386:	e0 e4       	ldi	r30, 0x40	; 64
    1388:	f1 e0       	ldi	r31, 0x01	; 1
    138a:	88 ea       	ldi	r24, 0xA8	; 168
    138c:	80 83       	st	Z, r24
	            | 0 << RTC_RTCEN_bp     /* Enable: disabled */
	            | 1 << RTC_RUNSTDBY_bp; /* Run In Standby: enabled */

	RTC.PER = 0x1ff; /* Period: 0x1ff */
    138e:	8f ef       	ldi	r24, 0xFF	; 255
    1390:	91 e0       	ldi	r25, 0x01	; 1
    1392:	82 87       	std	Z+10, r24	; 0x0a
    1394:	93 87       	std	Z+11, r25	; 0x0b

	RTC.CLKSEL = RTC_CLKSEL_OSC32K_gc; /* Internal 32.768 kHz oscillator */
    1396:	17 82       	std	Z+7, r1	; 0x07

	// RTC.DBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	RTC.INTCTRL = 0 << RTC_CMP_bp    /* Compare Match Interrupt enable: disabled */
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	82 83       	std	Z+2, r24	; 0x02
	// RTC.PITDBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	// RTC.PITINTCTRL = 0 << RTC_PI_bp; /* Periodic Interrupt: disabled */

	return 0;
}
    139c:	80 e0       	ldi	r24, 0x00	; 0
    139e:	08 95       	ret

000013a0 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
    13a0:	80 e0       	ldi	r24, 0x00	; 0
    13a2:	08 95       	ret

000013a4 <SPI_REFERENCE_init>:
		while (!(SPI0.INTFLAGS & SPI_RXCIF_bm))
			;
		*b = SPI0.DATA;
		b++;
	}
}
    13a4:	e0 e4       	ldi	r30, 0x40	; 64
    13a6:	f9 e0       	ldi	r31, 0x09	; 9
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	80 83       	st	Z, r24
    13ac:	82 83       	std	Z+2, r24	; 0x02
    13ae:	10 92 d5 40 	sts	0x40D5, r1	; 0x8040d5 <SPI_REFERENCE_desc>
    13b2:	08 95       	ret

000013b4 <SPI_ZCD_init>:
 * \retval 1 the SPI init was not successful
 */
void SPI_ZCD_init()
{

	SPI1.CTRLA = 0 << SPI_CLK2X_bp    /* Enable Double Speed: disabled */
    13b4:	e0 e6       	ldi	r30, 0x60	; 96
    13b6:	f9 e0       	ldi	r31, 0x09	; 9
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	80 83       	st	Z, r24
	// SPI1.CTRLB = 0 << SPI_BUFEN_bp /* Buffer Mode Enable: disabled */
	//		 | 0 << SPI_BUFWR_bp /* Buffer Write Mode: disabled */
	//		 | SPI_MODE_0_gc /* SPI Mode 0 */
	//		 | 0 << SPI_SSD_bp; /* Slave Select Disable: disabled */

	SPI1.INTCTRL = 1 << SPI_DREIE_bp    /* Data Register Empty Interrupt Enable: enabled */
    13bc:	81 ee       	ldi	r24, 0xE1	; 225
    13be:	82 83       	std	Z+2, r24	; 0x02
	               | 1 << SPI_IE_bp     /* Interrupt Enable: enabled */
	               | 1 << SPI_RXCIE_bp  /* Receive Complete Interrupt Enable: enabled */
	               | 0 << SPI_SSIE_bp   /* Slave Select Trigger Interrupt Enable: disabled */
	               | 1 << SPI_TXCIE_bp; /* Transfer Complete Interrupt Enable: enabled */

	SPI_ZCD_desc.status = SPI_FREE;
    13c0:	ee ec       	ldi	r30, 0xCE	; 206
    13c2:	f0 e4       	ldi	r31, 0x40	; 64
    13c4:	10 82       	st	Z, r1
	SPI_ZCD_desc.cb     = NULL;
    13c6:	15 82       	std	Z+5, r1	; 0x05
    13c8:	16 82       	std	Z+6, r1	; 0x06
    13ca:	08 95       	ret

000013cc <TIMER_RISING_init>:

	// TCB0.CCMP = 0x0; /* Compare or Capture: 0x0 */

	// TCB0.CNT = 0x0; /* Count: 0x0 */

	TCB0.CTRLB = 1 << TCB_ASYNC_bp      /* Asynchronous Enable: enabled */
    13cc:	e0 e0       	ldi	r30, 0x00	; 0
    13ce:	fb e0       	ldi	r31, 0x0B	; 11
    13d0:	83 e4       	ldi	r24, 0x43	; 67
    13d2:	81 83       	std	Z+1, r24	; 0x01
	             | 0 << TCB_CCMPEN_bp   /* Pin Output Enable: disabled */
	             | 0 << TCB_CCMPINIT_bp /* Pin Initial State: disabled */
	             | TCB_CNTMODE_FRQ_gc;  /* Input Capture Frequency measurement */

	TCB0.DBGCTRL = 1 << TCB_DBGRUN_bp; /* Debug Run: enabled */
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	80 87       	std	Z+8, r24	; 0x08

	TCB0.EVCTRL = 1 << TCB_CAPTEI_bp    /* Event Input Enable: enabled */
    13d8:	84 83       	std	Z+4, r24	; 0x04
	              | 0 << TCB_EDGE_bp    /* Event Edge: disabled */
	              | 0 << TCB_FILTER_bp; /* Input Capture Noise Cancellation Filter: disabled */

	TCB0.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
    13da:	85 83       	std	Z+5, r24	; 0x05
	               | 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */

	TCB0.CTRLA = TCB_CLKSEL_DIV1_gc     /* CLK_PER */
    13dc:	81 e1       	ldi	r24, 0x11	; 17
    13de:	80 83       	st	Z, r24
	             | 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
	             | 1 << TCB_SYNCUPD_bp  /* Synchronize Update: enabled */
	             | 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */

	return 0;
}
    13e0:	80 e0       	ldi	r24, 0x00	; 0
    13e2:	08 95       	ret

000013e4 <TIMER_FALLING_init>:

	// TCB1.CCMP = 0x0; /* Compare or Capture: 0x0 */

	// TCB1.CNT = 0x0; /* Count: 0x0 */

	TCB1.CTRLB = 1 << TCB_ASYNC_bp      /* Asynchronous Enable: enabled */
    13e4:	e0 e1       	ldi	r30, 0x10	; 16
    13e6:	fb e0       	ldi	r31, 0x0B	; 11
    13e8:	83 e4       	ldi	r24, 0x43	; 67
    13ea:	81 83       	std	Z+1, r24	; 0x01
	             | 0 << TCB_CCMPEN_bp   /* Pin Output Enable: disabled */
	             | 0 << TCB_CCMPINIT_bp /* Pin Initial State: disabled */
	             | TCB_CNTMODE_FRQ_gc;  /* Input Capture Frequency measurement */

	TCB1.DBGCTRL = 1 << TCB_DBGRUN_bp; /* Debug Run: enabled */
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	80 87       	std	Z+8, r24	; 0x08

	TCB1.EVCTRL = 1 << TCB_CAPTEI_bp    /* Event Input Enable: enabled */
    13f0:	84 83       	std	Z+4, r24	; 0x04
	              | 0 << TCB_EDGE_bp    /* Event Edge: disabled */
	              | 0 << TCB_FILTER_bp; /* Input Capture Noise Cancellation Filter: disabled */

	TCB1.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
    13f2:	85 83       	std	Z+5, r24	; 0x05
	               | 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */

	TCB1.CTRLA = TCB_CLKSEL_DIV1_gc     /* CLK_PER */
    13f4:	81 e1       	ldi	r24, 0x11	; 17
    13f6:	80 83       	st	Z, r24
	             | 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
	             | 1 << TCB_SYNCUPD_bp  /* Synchronize Update: enabled */
	             | 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */

	return 0;
}
    13f8:	80 e0       	ldi	r24, 0x00	; 0
    13fa:	08 95       	ret

000013fc <TIMER_0_init>:
int8_t TIMER_0_init()
{

	// Enable Protected register, peripheral must be disabled (ENABLE=0, in TCD.CTRLA).

	TCD0.CMPASET = 4095; /* Compare A Set: 4095 */
    13fc:	e0 e8       	ldi	r30, 0x80	; 128
    13fe:	fb e0       	ldi	r31, 0x0B	; 11
    1400:	8f ef       	ldi	r24, 0xFF	; 255
    1402:	9f e0       	ldi	r25, 0x0F	; 15
    1404:	80 a7       	std	Z+40, r24	; 0x28
    1406:	91 a7       	std	Z+41, r25	; 0x29
	//		 | TCD_DLYTRIG_CMPASET_gc; /* Compare A set */

	// TCD0.DLYVAL = 0 << TCD_DLYVAL_gp; /* Delay value: 0 */

	TCD0.EVCTRLA
	    = TCD_CFG_FILTER_gc       /* Input Capture Noise Cancellation Filter enabled */
    1408:	85 e5       	ldi	r24, 0x55	; 85
    140a:	80 87       	std	Z+8, r24	; 0x08
	      | TCD_ACTION_CAPTURE_gc /* Event trigger a fault and capture */
	      | TCD_EDGE_RISE_HIGH_gc /* The rising edge or high level of event generates retrigger or fault action */
	      | 1 << TCD_TRIGEI_bp;   /* Trigger event enable: enabled */

	TCD0.EVCTRLB
	    = TCD_CFG_NEITHER_gc      /* Neither Filter nor Asynchronous Event is enabled */
    140c:	84 e1       	ldi	r24, 0x14	; 20
    140e:	81 87       	std	Z+9, r24	; 0x09

	// TCD0.INPUTCTRLA = TCD_INPUTMODE_NONE_gc; /* Input has no actions */

	// TCD0.INPUTCTRLB = TCD_INPUTMODE_NONE_gc; /* Input has no actions */

	TCD0.INTCTRL = 0 << TCD_OVF_bp      /* Overflow interrupt enable: disabled */
    1410:	84 e0       	ldi	r24, 0x04	; 4
    1412:	84 87       	std	Z+12, r24	; 0x0c
	               | 1 << TCD_TRIGA_bp  /* Trigger A interrupt enable: enabled */
	               | 0 << TCD_TRIGB_bp; /* Trigger B interrupt enable: disabled */

	while ((TCD0.STATUS & TCD_ENRDY_bm) == 0)
    1414:	80 91 8e 0b 	lds	r24, 0x0B8E	; 0x800b8e <__TEXT_REGION_LENGTH__+0x7e0b8e>
    1418:	80 ff       	sbrs	r24, 0
    141a:	fc cf       	rjmp	.-8      	; 0x1414 <TIMER_0_init+0x18>
		; // Wait for Enable Ready to be high.

	TCD0.CTRLA = 1 << TCD_ENABLE_bp      /* Enable: enabled */
    141c:	81 e2       	ldi	r24, 0x21	; 33
    141e:	80 93 80 0b 	sts	0x0B80, r24	; 0x800b80 <__TEXT_REGION_LENGTH__+0x7e0b80>
	             | TCD_CLKSEL_PLL_gc     /*  */
	             | TCD_CNTPRES_DIV1_gc   /* Sync clock divided by 1 */
	             | TCD_SYNCPRES_DIV1_gc; /*  */

	return 0;
}
    1422:	80 e0       	ldi	r24, 0x00	; 0
    1424:	08 95       	ret

00001426 <USART_0_init>:
uint8_t USART_0_read()
{
	while (!(USART3.STATUS & USART_RXCIF_bm))
		;
	return USART3.RXDATAL;
}
    1426:	e0 e6       	ldi	r30, 0x60	; 96
    1428:	f8 e0       	ldi	r31, 0x08	; 8
    142a:	81 e4       	ldi	r24, 0x41	; 65
    142c:	93 e0       	ldi	r25, 0x03	; 3
    142e:	80 87       	std	Z+8, r24	; 0x08
    1430:	91 87       	std	Z+9, r25	; 0x09
    1432:	80 ec       	ldi	r24, 0xC0	; 192
    1434:	86 83       	std	Z+6, r24	; 0x06
    1436:	80 e0       	ldi	r24, 0x00	; 0
    1438:	90 e4       	ldi	r25, 0x40	; 64
    143a:	80 93 d8 40 	sts	0x40D8, r24	; 0x8040d8 <__iob+0x2>
    143e:	90 93 d9 40 	sts	0x40D9, r25	; 0x8040d9 <__iob+0x3>
    1442:	80 e0       	ldi	r24, 0x00	; 0
    1444:	08 95       	ret

00001446 <USART_0_write>:
 *
 * \return Nothing
 */
void USART_0_write(const uint8_t data)
{
	while (!(USART3.STATUS & USART_DREIF_bm))
    1446:	90 91 64 08 	lds	r25, 0x0864	; 0x800864 <__TEXT_REGION_LENGTH__+0x7e0864>
    144a:	95 ff       	sbrs	r25, 5
    144c:	fc cf       	rjmp	.-8      	; 0x1446 <USART_0_write>
		;
	USART3.TXDATAL = data;
    144e:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <__TEXT_REGION_LENGTH__+0x7e0862>
    1452:	08 95       	ret

00001454 <USART_0_printCHAR>:

#if defined(__GNUC__)

int USART_0_printCHAR(char character, FILE *stream)
{
	USART_0_write(character);
    1454:	0e 94 23 0a 	call	0x1446	; 0x1446 <USART_0_write>
	return 0;
}
    1458:	80 e0       	ldi	r24, 0x00	; 0
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	08 95       	ret

0000145e <VREF_0_init>:
	//		 | VREF_REFSEL_1V024_gc; /* Internal 1.024V reference */

	// VREF.DAC0REF = 0 << VREF_ALWAYSON_bp /* Enable reference always ON for DAC0: disabled */
	//		 | VREF_REFSEL_1V024_gc; /* Internal 1.024V reference */

	VREF.ACREF = 1 << VREF_ALWAYSON_bp /* Enable reference always ON for AC: enabled */
    145e:	85 e8       	ldi	r24, 0x85	; 133
    1460:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
	             | VREF_REFSEL_VDD_gc; /* VDD as reference */

	return 0;
}
    1464:	80 e0       	ldi	r24, 0x00	; 0
    1466:	08 95       	ret

00001468 <ZCD_RISING_init>:
 * \return Initialization status.
 */
int8_t ZCD_RISING_init()
{

	ZCD0.CTRLA = 1 << ZCD_ENABLE_bp     /* Setting: enabled */
    1468:	e0 ec       	ldi	r30, 0xC0	; 192
    146a:	f6 e0       	ldi	r31, 0x06	; 6
    146c:	81 e4       	ldi	r24, 0x41	; 65
    146e:	80 83       	st	Z, r24
	             | 1 << ZCD_OUTEN_bp    /* Setting: enabled */
	             | 0 << ZCD_RUNSTDBY_bp /* Setting: disabled */
	             | 0 << ZCD_INVERT_bp;  /* Setting: disabled */

	 ZCD0.INTCTRL = ZCD_INTMODE_NONE_gc; /* No interrupt */
    1470:	12 82       	std	Z+2, r1	; 0x02
	// ZCD0.INTCTRL =  ZCD_INTMODE_RISING_gc; /* No interrupt */
	return 0;
}
    1472:	80 e0       	ldi	r24, 0x00	; 0
    1474:	08 95       	ret

00001476 <ZCD_FALLING_init>:
 * \return Initialization status.
 */
int8_t ZCD_FALLING_init()
{

	ZCD1.CTRLA = 1 << ZCD_ENABLE_bp     /* Setting: enabled */
    1476:	e8 ec       	ldi	r30, 0xC8	; 200
    1478:	f6 e0       	ldi	r31, 0x06	; 6
    147a:	89 e4       	ldi	r24, 0x49	; 73
    147c:	80 83       	st	Z, r24
	             | 1 << ZCD_OUTEN_bp    /* Setting: enabled */
	             | 0 << ZCD_RUNSTDBY_bp /* Setting: disabled */
	             | 1 << ZCD_INVERT_bp;  /* Setting: enabled */

	 ZCD1.INTCTRL = ZCD_INTMODE_NONE_gc; /* No interrupt */
    147e:	12 82       	std	Z+2, r1	; 0x02
//	 ZCD1.INTCTRL = ZCD_INTMODE_FALLING_gc; /* No interrupt */
	return 0;
}
    1480:	80 e0       	ldi	r24, 0x00	; 0
    1482:	08 95       	ret

00001484 <BOD_init>:
int8_t BOD_init()
{

	// ccp_write_io((void*)&(BOD.CTRLA),BOD_SLEEP_DIS_gc /* Disabled */);

	BOD.INTCTRL = 0 << BOD_VLMIE_bp        /* voltage level monitor interrrupt enable: disabled */
    1484:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
	              | BOD_VLMCFG_FALLING_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
    1488:	80 e0       	ldi	r24, 0x00	; 0
    148a:	08 95       	ret

0000148c <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
    148c:	41 e8       	ldi	r20, 0x81	; 129
    148e:	68 ed       	ldi	r22, 0xD8	; 216
    1490:	80 e7       	ldi	r24, 0x70	; 112
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	0e 94 56 0a 	call	0x14ac	; 0x14ac <protected_write_io>
    1498:	44 e2       	ldi	r20, 0x24	; 36
    149a:	68 ed       	ldi	r22, 0xD8	; 216
    149c:	88 e6       	ldi	r24, 0x68	; 104
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	0e 94 56 0a 	call	0x14ac	; 0x14ac <protected_write_io>
	/* wait for PLL to start 
	while (!(CLKCTRL.MCLKSTATUS & CLKCTRL_PLLS_bm))
		;*/

	return 0;
}
    14a4:	80 e0       	ldi	r24, 0x00	; 0
    14a6:	08 95       	ret

000014a8 <CPUINT_init>:
	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
}
    14a8:	80 e0       	ldi	r24, 0x00	; 0
    14aa:	08 95       	ret

000014ac <protected_write_io>:
	PUBLIC_FUNCTION(protected_write_io)

#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
    14ac:	1b be       	out	0x3b, r1	; 59
#endif
	movw    r30, r24                // Load addr into Z
    14ae:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
    14b0:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
    14b2:	40 83       	st	Z, r20
	ret                             // Return to caller
    14b4:	08 95       	ret

000014b6 <__udivmodsi4>:
    14b6:	a1 e2       	ldi	r26, 0x21	; 33
    14b8:	1a 2e       	mov	r1, r26
    14ba:	aa 1b       	sub	r26, r26
    14bc:	bb 1b       	sub	r27, r27
    14be:	fd 01       	movw	r30, r26
    14c0:	0d c0       	rjmp	.+26     	; 0x14dc <__udivmodsi4_ep>

000014c2 <__udivmodsi4_loop>:
    14c2:	aa 1f       	adc	r26, r26
    14c4:	bb 1f       	adc	r27, r27
    14c6:	ee 1f       	adc	r30, r30
    14c8:	ff 1f       	adc	r31, r31
    14ca:	a2 17       	cp	r26, r18
    14cc:	b3 07       	cpc	r27, r19
    14ce:	e4 07       	cpc	r30, r20
    14d0:	f5 07       	cpc	r31, r21
    14d2:	20 f0       	brcs	.+8      	; 0x14dc <__udivmodsi4_ep>
    14d4:	a2 1b       	sub	r26, r18
    14d6:	b3 0b       	sbc	r27, r19
    14d8:	e4 0b       	sbc	r30, r20
    14da:	f5 0b       	sbc	r31, r21

000014dc <__udivmodsi4_ep>:
    14dc:	66 1f       	adc	r22, r22
    14de:	77 1f       	adc	r23, r23
    14e0:	88 1f       	adc	r24, r24
    14e2:	99 1f       	adc	r25, r25
    14e4:	1a 94       	dec	r1
    14e6:	69 f7       	brne	.-38     	; 0x14c2 <__udivmodsi4_loop>
    14e8:	60 95       	com	r22
    14ea:	70 95       	com	r23
    14ec:	80 95       	com	r24
    14ee:	90 95       	com	r25
    14f0:	9b 01       	movw	r18, r22
    14f2:	ac 01       	movw	r20, r24
    14f4:	bd 01       	movw	r22, r26
    14f6:	cf 01       	movw	r24, r30
    14f8:	08 95       	ret

000014fa <__divmodsi4>:
    14fa:	05 2e       	mov	r0, r21
    14fc:	97 fb       	bst	r25, 7
    14fe:	1e f4       	brtc	.+6      	; 0x1506 <__divmodsi4+0xc>
    1500:	00 94       	com	r0
    1502:	0e 94 94 0a 	call	0x1528	; 0x1528 <__negsi2>
    1506:	57 fd       	sbrc	r21, 7
    1508:	07 d0       	rcall	.+14     	; 0x1518 <__divmodsi4_neg2>
    150a:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__udivmodsi4>
    150e:	07 fc       	sbrc	r0, 7
    1510:	03 d0       	rcall	.+6      	; 0x1518 <__divmodsi4_neg2>
    1512:	4e f4       	brtc	.+18     	; 0x1526 <__divmodsi4_exit>
    1514:	0c 94 94 0a 	jmp	0x1528	; 0x1528 <__negsi2>

00001518 <__divmodsi4_neg2>:
    1518:	50 95       	com	r21
    151a:	40 95       	com	r20
    151c:	30 95       	com	r19
    151e:	21 95       	neg	r18
    1520:	3f 4f       	sbci	r19, 0xFF	; 255
    1522:	4f 4f       	sbci	r20, 0xFF	; 255
    1524:	5f 4f       	sbci	r21, 0xFF	; 255

00001526 <__divmodsi4_exit>:
    1526:	08 95       	ret

00001528 <__negsi2>:
    1528:	90 95       	com	r25
    152a:	80 95       	com	r24
    152c:	70 95       	com	r23
    152e:	61 95       	neg	r22
    1530:	7f 4f       	sbci	r23, 0xFF	; 255
    1532:	8f 4f       	sbci	r24, 0xFF	; 255
    1534:	9f 4f       	sbci	r25, 0xFF	; 255
    1536:	08 95       	ret

00001538 <__tablejump2__>:
    1538:	ee 0f       	add	r30, r30
    153a:	ff 1f       	adc	r31, r31
    153c:	00 24       	eor	r0, r0
    153e:	00 1c       	adc	r0, r0
    1540:	0b be       	out	0x3b, r0	; 59
    1542:	07 90       	elpm	r0, Z+
    1544:	f6 91       	elpm	r31, Z
    1546:	e0 2d       	mov	r30, r0
    1548:	09 94       	ijmp

0000154a <printf>:
    154a:	cf 93       	push	r28
    154c:	df 93       	push	r29
    154e:	cd b7       	in	r28, 0x3d	; 61
    1550:	de b7       	in	r29, 0x3e	; 62
    1552:	ae 01       	movw	r20, r28
    1554:	4b 5f       	subi	r20, 0xFB	; 251
    1556:	5f 4f       	sbci	r21, 0xFF	; 255
    1558:	fa 01       	movw	r30, r20
    155a:	61 91       	ld	r22, Z+
    155c:	71 91       	ld	r23, Z+
    155e:	af 01       	movw	r20, r30
    1560:	80 91 d8 40 	lds	r24, 0x40D8	; 0x8040d8 <__iob+0x2>
    1564:	90 91 d9 40 	lds	r25, 0x40D9	; 0x8040d9 <__iob+0x3>
    1568:	0e 94 b9 0a 	call	0x1572	; 0x1572 <vfprintf>
    156c:	df 91       	pop	r29
    156e:	cf 91       	pop	r28
    1570:	08 95       	ret

00001572 <vfprintf>:
    1572:	2f 92       	push	r2
    1574:	3f 92       	push	r3
    1576:	4f 92       	push	r4
    1578:	5f 92       	push	r5
    157a:	6f 92       	push	r6
    157c:	7f 92       	push	r7
    157e:	8f 92       	push	r8
    1580:	9f 92       	push	r9
    1582:	af 92       	push	r10
    1584:	bf 92       	push	r11
    1586:	cf 92       	push	r12
    1588:	df 92       	push	r13
    158a:	ef 92       	push	r14
    158c:	ff 92       	push	r15
    158e:	0f 93       	push	r16
    1590:	1f 93       	push	r17
    1592:	cf 93       	push	r28
    1594:	df 93       	push	r29
    1596:	cd b7       	in	r28, 0x3d	; 61
    1598:	de b7       	in	r29, 0x3e	; 62
    159a:	2b 97       	sbiw	r28, 0x0b	; 11
    159c:	cd bf       	out	0x3d, r28	; 61
    159e:	de bf       	out	0x3e, r29	; 62
    15a0:	6c 01       	movw	r12, r24
    15a2:	7b 01       	movw	r14, r22
    15a4:	8a 01       	movw	r16, r20
    15a6:	fc 01       	movw	r30, r24
    15a8:	16 82       	std	Z+6, r1	; 0x06
    15aa:	17 82       	std	Z+7, r1	; 0x07
    15ac:	83 81       	ldd	r24, Z+3	; 0x03
    15ae:	81 ff       	sbrs	r24, 1
    15b0:	cc c1       	rjmp	.+920    	; 0x194a <vfprintf+0x3d8>
    15b2:	ce 01       	movw	r24, r28
    15b4:	01 96       	adiw	r24, 0x01	; 1
    15b6:	3c 01       	movw	r6, r24
    15b8:	f6 01       	movw	r30, r12
    15ba:	93 81       	ldd	r25, Z+3	; 0x03
    15bc:	f7 01       	movw	r30, r14
    15be:	93 fd       	sbrc	r25, 3
    15c0:	85 91       	lpm	r24, Z+
    15c2:	93 ff       	sbrs	r25, 3
    15c4:	81 91       	ld	r24, Z+
    15c6:	7f 01       	movw	r14, r30
    15c8:	88 23       	and	r24, r24
    15ca:	09 f4       	brne	.+2      	; 0x15ce <vfprintf+0x5c>
    15cc:	ba c1       	rjmp	.+884    	; 0x1942 <vfprintf+0x3d0>
    15ce:	85 32       	cpi	r24, 0x25	; 37
    15d0:	39 f4       	brne	.+14     	; 0x15e0 <vfprintf+0x6e>
    15d2:	93 fd       	sbrc	r25, 3
    15d4:	85 91       	lpm	r24, Z+
    15d6:	93 ff       	sbrs	r25, 3
    15d8:	81 91       	ld	r24, Z+
    15da:	7f 01       	movw	r14, r30
    15dc:	85 32       	cpi	r24, 0x25	; 37
    15de:	29 f4       	brne	.+10     	; 0x15ea <vfprintf+0x78>
    15e0:	b6 01       	movw	r22, r12
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <fputc>
    15e8:	e7 cf       	rjmp	.-50     	; 0x15b8 <vfprintf+0x46>
    15ea:	91 2c       	mov	r9, r1
    15ec:	21 2c       	mov	r2, r1
    15ee:	31 2c       	mov	r3, r1
    15f0:	ff e1       	ldi	r31, 0x1F	; 31
    15f2:	f3 15       	cp	r31, r3
    15f4:	d8 f0       	brcs	.+54     	; 0x162c <vfprintf+0xba>
    15f6:	8b 32       	cpi	r24, 0x2B	; 43
    15f8:	79 f0       	breq	.+30     	; 0x1618 <vfprintf+0xa6>
    15fa:	38 f4       	brcc	.+14     	; 0x160a <vfprintf+0x98>
    15fc:	80 32       	cpi	r24, 0x20	; 32
    15fe:	79 f0       	breq	.+30     	; 0x161e <vfprintf+0xac>
    1600:	83 32       	cpi	r24, 0x23	; 35
    1602:	a1 f4       	brne	.+40     	; 0x162c <vfprintf+0xba>
    1604:	23 2d       	mov	r18, r3
    1606:	20 61       	ori	r18, 0x10	; 16
    1608:	1d c0       	rjmp	.+58     	; 0x1644 <vfprintf+0xd2>
    160a:	8d 32       	cpi	r24, 0x2D	; 45
    160c:	61 f0       	breq	.+24     	; 0x1626 <vfprintf+0xb4>
    160e:	80 33       	cpi	r24, 0x30	; 48
    1610:	69 f4       	brne	.+26     	; 0x162c <vfprintf+0xba>
    1612:	23 2d       	mov	r18, r3
    1614:	21 60       	ori	r18, 0x01	; 1
    1616:	16 c0       	rjmp	.+44     	; 0x1644 <vfprintf+0xd2>
    1618:	83 2d       	mov	r24, r3
    161a:	82 60       	ori	r24, 0x02	; 2
    161c:	38 2e       	mov	r3, r24
    161e:	e3 2d       	mov	r30, r3
    1620:	e4 60       	ori	r30, 0x04	; 4
    1622:	3e 2e       	mov	r3, r30
    1624:	2a c0       	rjmp	.+84     	; 0x167a <vfprintf+0x108>
    1626:	f3 2d       	mov	r31, r3
    1628:	f8 60       	ori	r31, 0x08	; 8
    162a:	1d c0       	rjmp	.+58     	; 0x1666 <vfprintf+0xf4>
    162c:	37 fc       	sbrc	r3, 7
    162e:	2d c0       	rjmp	.+90     	; 0x168a <vfprintf+0x118>
    1630:	20 ed       	ldi	r18, 0xD0	; 208
    1632:	28 0f       	add	r18, r24
    1634:	2a 30       	cpi	r18, 0x0A	; 10
    1636:	40 f0       	brcs	.+16     	; 0x1648 <vfprintf+0xd6>
    1638:	8e 32       	cpi	r24, 0x2E	; 46
    163a:	b9 f4       	brne	.+46     	; 0x166a <vfprintf+0xf8>
    163c:	36 fc       	sbrc	r3, 6
    163e:	81 c1       	rjmp	.+770    	; 0x1942 <vfprintf+0x3d0>
    1640:	23 2d       	mov	r18, r3
    1642:	20 64       	ori	r18, 0x40	; 64
    1644:	32 2e       	mov	r3, r18
    1646:	19 c0       	rjmp	.+50     	; 0x167a <vfprintf+0x108>
    1648:	36 fe       	sbrs	r3, 6
    164a:	06 c0       	rjmp	.+12     	; 0x1658 <vfprintf+0xe6>
    164c:	8a e0       	ldi	r24, 0x0A	; 10
    164e:	98 9e       	mul	r9, r24
    1650:	20 0d       	add	r18, r0
    1652:	11 24       	eor	r1, r1
    1654:	92 2e       	mov	r9, r18
    1656:	11 c0       	rjmp	.+34     	; 0x167a <vfprintf+0x108>
    1658:	ea e0       	ldi	r30, 0x0A	; 10
    165a:	2e 9e       	mul	r2, r30
    165c:	20 0d       	add	r18, r0
    165e:	11 24       	eor	r1, r1
    1660:	22 2e       	mov	r2, r18
    1662:	f3 2d       	mov	r31, r3
    1664:	f0 62       	ori	r31, 0x20	; 32
    1666:	3f 2e       	mov	r3, r31
    1668:	08 c0       	rjmp	.+16     	; 0x167a <vfprintf+0x108>
    166a:	8c 36       	cpi	r24, 0x6C	; 108
    166c:	21 f4       	brne	.+8      	; 0x1676 <vfprintf+0x104>
    166e:	83 2d       	mov	r24, r3
    1670:	80 68       	ori	r24, 0x80	; 128
    1672:	38 2e       	mov	r3, r24
    1674:	02 c0       	rjmp	.+4      	; 0x167a <vfprintf+0x108>
    1676:	88 36       	cpi	r24, 0x68	; 104
    1678:	41 f4       	brne	.+16     	; 0x168a <vfprintf+0x118>
    167a:	f7 01       	movw	r30, r14
    167c:	93 fd       	sbrc	r25, 3
    167e:	85 91       	lpm	r24, Z+
    1680:	93 ff       	sbrs	r25, 3
    1682:	81 91       	ld	r24, Z+
    1684:	7f 01       	movw	r14, r30
    1686:	81 11       	cpse	r24, r1
    1688:	b3 cf       	rjmp	.-154    	; 0x15f0 <vfprintf+0x7e>
    168a:	98 2f       	mov	r25, r24
    168c:	9f 7d       	andi	r25, 0xDF	; 223
    168e:	95 54       	subi	r25, 0x45	; 69
    1690:	93 30       	cpi	r25, 0x03	; 3
    1692:	28 f4       	brcc	.+10     	; 0x169e <vfprintf+0x12c>
    1694:	0c 5f       	subi	r16, 0xFC	; 252
    1696:	1f 4f       	sbci	r17, 0xFF	; 255
    1698:	9f e3       	ldi	r25, 0x3F	; 63
    169a:	99 83       	std	Y+1, r25	; 0x01
    169c:	0d c0       	rjmp	.+26     	; 0x16b8 <vfprintf+0x146>
    169e:	83 36       	cpi	r24, 0x63	; 99
    16a0:	31 f0       	breq	.+12     	; 0x16ae <vfprintf+0x13c>
    16a2:	83 37       	cpi	r24, 0x73	; 115
    16a4:	71 f0       	breq	.+28     	; 0x16c2 <vfprintf+0x150>
    16a6:	83 35       	cpi	r24, 0x53	; 83
    16a8:	09 f0       	breq	.+2      	; 0x16ac <vfprintf+0x13a>
    16aa:	59 c0       	rjmp	.+178    	; 0x175e <vfprintf+0x1ec>
    16ac:	21 c0       	rjmp	.+66     	; 0x16f0 <vfprintf+0x17e>
    16ae:	f8 01       	movw	r30, r16
    16b0:	80 81       	ld	r24, Z
    16b2:	89 83       	std	Y+1, r24	; 0x01
    16b4:	0e 5f       	subi	r16, 0xFE	; 254
    16b6:	1f 4f       	sbci	r17, 0xFF	; 255
    16b8:	88 24       	eor	r8, r8
    16ba:	83 94       	inc	r8
    16bc:	91 2c       	mov	r9, r1
    16be:	53 01       	movw	r10, r6
    16c0:	13 c0       	rjmp	.+38     	; 0x16e8 <vfprintf+0x176>
    16c2:	28 01       	movw	r4, r16
    16c4:	f2 e0       	ldi	r31, 0x02	; 2
    16c6:	4f 0e       	add	r4, r31
    16c8:	51 1c       	adc	r5, r1
    16ca:	f8 01       	movw	r30, r16
    16cc:	a0 80       	ld	r10, Z
    16ce:	b1 80       	ldd	r11, Z+1	; 0x01
    16d0:	36 fe       	sbrs	r3, 6
    16d2:	03 c0       	rjmp	.+6      	; 0x16da <vfprintf+0x168>
    16d4:	69 2d       	mov	r22, r9
    16d6:	70 e0       	ldi	r23, 0x00	; 0
    16d8:	02 c0       	rjmp	.+4      	; 0x16de <vfprintf+0x16c>
    16da:	6f ef       	ldi	r22, 0xFF	; 255
    16dc:	7f ef       	ldi	r23, 0xFF	; 255
    16de:	c5 01       	movw	r24, r10
    16e0:	0e 94 c8 0c 	call	0x1990	; 0x1990 <strnlen>
    16e4:	4c 01       	movw	r8, r24
    16e6:	82 01       	movw	r16, r4
    16e8:	f3 2d       	mov	r31, r3
    16ea:	ff 77       	andi	r31, 0x7F	; 127
    16ec:	3f 2e       	mov	r3, r31
    16ee:	16 c0       	rjmp	.+44     	; 0x171c <vfprintf+0x1aa>
    16f0:	28 01       	movw	r4, r16
    16f2:	22 e0       	ldi	r18, 0x02	; 2
    16f4:	42 0e       	add	r4, r18
    16f6:	51 1c       	adc	r5, r1
    16f8:	f8 01       	movw	r30, r16
    16fa:	a0 80       	ld	r10, Z
    16fc:	b1 80       	ldd	r11, Z+1	; 0x01
    16fe:	36 fe       	sbrs	r3, 6
    1700:	03 c0       	rjmp	.+6      	; 0x1708 <vfprintf+0x196>
    1702:	69 2d       	mov	r22, r9
    1704:	70 e0       	ldi	r23, 0x00	; 0
    1706:	02 c0       	rjmp	.+4      	; 0x170c <vfprintf+0x19a>
    1708:	6f ef       	ldi	r22, 0xFF	; 255
    170a:	7f ef       	ldi	r23, 0xFF	; 255
    170c:	c5 01       	movw	r24, r10
    170e:	0e 94 bd 0c 	call	0x197a	; 0x197a <strnlen_P>
    1712:	4c 01       	movw	r8, r24
    1714:	f3 2d       	mov	r31, r3
    1716:	f0 68       	ori	r31, 0x80	; 128
    1718:	3f 2e       	mov	r3, r31
    171a:	82 01       	movw	r16, r4
    171c:	33 fc       	sbrc	r3, 3
    171e:	1b c0       	rjmp	.+54     	; 0x1756 <vfprintf+0x1e4>
    1720:	82 2d       	mov	r24, r2
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	88 16       	cp	r8, r24
    1726:	99 06       	cpc	r9, r25
    1728:	b0 f4       	brcc	.+44     	; 0x1756 <vfprintf+0x1e4>
    172a:	b6 01       	movw	r22, r12
    172c:	80 e2       	ldi	r24, 0x20	; 32
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <fputc>
    1734:	2a 94       	dec	r2
    1736:	f4 cf       	rjmp	.-24     	; 0x1720 <vfprintf+0x1ae>
    1738:	f5 01       	movw	r30, r10
    173a:	37 fc       	sbrc	r3, 7
    173c:	85 91       	lpm	r24, Z+
    173e:	37 fe       	sbrs	r3, 7
    1740:	81 91       	ld	r24, Z+
    1742:	5f 01       	movw	r10, r30
    1744:	b6 01       	movw	r22, r12
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <fputc>
    174c:	21 10       	cpse	r2, r1
    174e:	2a 94       	dec	r2
    1750:	21 e0       	ldi	r18, 0x01	; 1
    1752:	82 1a       	sub	r8, r18
    1754:	91 08       	sbc	r9, r1
    1756:	81 14       	cp	r8, r1
    1758:	91 04       	cpc	r9, r1
    175a:	71 f7       	brne	.-36     	; 0x1738 <vfprintf+0x1c6>
    175c:	e8 c0       	rjmp	.+464    	; 0x192e <vfprintf+0x3bc>
    175e:	84 36       	cpi	r24, 0x64	; 100
    1760:	11 f0       	breq	.+4      	; 0x1766 <vfprintf+0x1f4>
    1762:	89 36       	cpi	r24, 0x69	; 105
    1764:	41 f5       	brne	.+80     	; 0x17b6 <vfprintf+0x244>
    1766:	f8 01       	movw	r30, r16
    1768:	37 fe       	sbrs	r3, 7
    176a:	07 c0       	rjmp	.+14     	; 0x177a <vfprintf+0x208>
    176c:	60 81       	ld	r22, Z
    176e:	71 81       	ldd	r23, Z+1	; 0x01
    1770:	82 81       	ldd	r24, Z+2	; 0x02
    1772:	93 81       	ldd	r25, Z+3	; 0x03
    1774:	0c 5f       	subi	r16, 0xFC	; 252
    1776:	1f 4f       	sbci	r17, 0xFF	; 255
    1778:	08 c0       	rjmp	.+16     	; 0x178a <vfprintf+0x218>
    177a:	60 81       	ld	r22, Z
    177c:	71 81       	ldd	r23, Z+1	; 0x01
    177e:	07 2e       	mov	r0, r23
    1780:	00 0c       	add	r0, r0
    1782:	88 0b       	sbc	r24, r24
    1784:	99 0b       	sbc	r25, r25
    1786:	0e 5f       	subi	r16, 0xFE	; 254
    1788:	1f 4f       	sbci	r17, 0xFF	; 255
    178a:	f3 2d       	mov	r31, r3
    178c:	ff 76       	andi	r31, 0x6F	; 111
    178e:	3f 2e       	mov	r3, r31
    1790:	97 ff       	sbrs	r25, 7
    1792:	09 c0       	rjmp	.+18     	; 0x17a6 <vfprintf+0x234>
    1794:	90 95       	com	r25
    1796:	80 95       	com	r24
    1798:	70 95       	com	r23
    179a:	61 95       	neg	r22
    179c:	7f 4f       	sbci	r23, 0xFF	; 255
    179e:	8f 4f       	sbci	r24, 0xFF	; 255
    17a0:	9f 4f       	sbci	r25, 0xFF	; 255
    17a2:	f0 68       	ori	r31, 0x80	; 128
    17a4:	3f 2e       	mov	r3, r31
    17a6:	2a e0       	ldi	r18, 0x0A	; 10
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	a3 01       	movw	r20, r6
    17ac:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <__ultoa_invert>
    17b0:	88 2e       	mov	r8, r24
    17b2:	86 18       	sub	r8, r6
    17b4:	45 c0       	rjmp	.+138    	; 0x1840 <vfprintf+0x2ce>
    17b6:	85 37       	cpi	r24, 0x75	; 117
    17b8:	31 f4       	brne	.+12     	; 0x17c6 <vfprintf+0x254>
    17ba:	23 2d       	mov	r18, r3
    17bc:	2f 7e       	andi	r18, 0xEF	; 239
    17be:	b2 2e       	mov	r11, r18
    17c0:	2a e0       	ldi	r18, 0x0A	; 10
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	25 c0       	rjmp	.+74     	; 0x1810 <vfprintf+0x29e>
    17c6:	93 2d       	mov	r25, r3
    17c8:	99 7f       	andi	r25, 0xF9	; 249
    17ca:	b9 2e       	mov	r11, r25
    17cc:	8f 36       	cpi	r24, 0x6F	; 111
    17ce:	c1 f0       	breq	.+48     	; 0x1800 <vfprintf+0x28e>
    17d0:	18 f4       	brcc	.+6      	; 0x17d8 <vfprintf+0x266>
    17d2:	88 35       	cpi	r24, 0x58	; 88
    17d4:	79 f0       	breq	.+30     	; 0x17f4 <vfprintf+0x282>
    17d6:	b5 c0       	rjmp	.+362    	; 0x1942 <vfprintf+0x3d0>
    17d8:	80 37       	cpi	r24, 0x70	; 112
    17da:	19 f0       	breq	.+6      	; 0x17e2 <vfprintf+0x270>
    17dc:	88 37       	cpi	r24, 0x78	; 120
    17de:	21 f0       	breq	.+8      	; 0x17e8 <vfprintf+0x276>
    17e0:	b0 c0       	rjmp	.+352    	; 0x1942 <vfprintf+0x3d0>
    17e2:	e9 2f       	mov	r30, r25
    17e4:	e0 61       	ori	r30, 0x10	; 16
    17e6:	be 2e       	mov	r11, r30
    17e8:	b4 fe       	sbrs	r11, 4
    17ea:	0d c0       	rjmp	.+26     	; 0x1806 <vfprintf+0x294>
    17ec:	fb 2d       	mov	r31, r11
    17ee:	f4 60       	ori	r31, 0x04	; 4
    17f0:	bf 2e       	mov	r11, r31
    17f2:	09 c0       	rjmp	.+18     	; 0x1806 <vfprintf+0x294>
    17f4:	34 fe       	sbrs	r3, 4
    17f6:	0a c0       	rjmp	.+20     	; 0x180c <vfprintf+0x29a>
    17f8:	29 2f       	mov	r18, r25
    17fa:	26 60       	ori	r18, 0x06	; 6
    17fc:	b2 2e       	mov	r11, r18
    17fe:	06 c0       	rjmp	.+12     	; 0x180c <vfprintf+0x29a>
    1800:	28 e0       	ldi	r18, 0x08	; 8
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	05 c0       	rjmp	.+10     	; 0x1810 <vfprintf+0x29e>
    1806:	20 e1       	ldi	r18, 0x10	; 16
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	02 c0       	rjmp	.+4      	; 0x1810 <vfprintf+0x29e>
    180c:	20 e1       	ldi	r18, 0x10	; 16
    180e:	32 e0       	ldi	r19, 0x02	; 2
    1810:	f8 01       	movw	r30, r16
    1812:	b7 fe       	sbrs	r11, 7
    1814:	07 c0       	rjmp	.+14     	; 0x1824 <vfprintf+0x2b2>
    1816:	60 81       	ld	r22, Z
    1818:	71 81       	ldd	r23, Z+1	; 0x01
    181a:	82 81       	ldd	r24, Z+2	; 0x02
    181c:	93 81       	ldd	r25, Z+3	; 0x03
    181e:	0c 5f       	subi	r16, 0xFC	; 252
    1820:	1f 4f       	sbci	r17, 0xFF	; 255
    1822:	06 c0       	rjmp	.+12     	; 0x1830 <vfprintf+0x2be>
    1824:	60 81       	ld	r22, Z
    1826:	71 81       	ldd	r23, Z+1	; 0x01
    1828:	80 e0       	ldi	r24, 0x00	; 0
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	0e 5f       	subi	r16, 0xFE	; 254
    182e:	1f 4f       	sbci	r17, 0xFF	; 255
    1830:	a3 01       	movw	r20, r6
    1832:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <__ultoa_invert>
    1836:	88 2e       	mov	r8, r24
    1838:	86 18       	sub	r8, r6
    183a:	fb 2d       	mov	r31, r11
    183c:	ff 77       	andi	r31, 0x7F	; 127
    183e:	3f 2e       	mov	r3, r31
    1840:	36 fe       	sbrs	r3, 6
    1842:	0d c0       	rjmp	.+26     	; 0x185e <vfprintf+0x2ec>
    1844:	23 2d       	mov	r18, r3
    1846:	2e 7f       	andi	r18, 0xFE	; 254
    1848:	a2 2e       	mov	r10, r18
    184a:	89 14       	cp	r8, r9
    184c:	58 f4       	brcc	.+22     	; 0x1864 <vfprintf+0x2f2>
    184e:	34 fe       	sbrs	r3, 4
    1850:	0b c0       	rjmp	.+22     	; 0x1868 <vfprintf+0x2f6>
    1852:	32 fc       	sbrc	r3, 2
    1854:	09 c0       	rjmp	.+18     	; 0x1868 <vfprintf+0x2f6>
    1856:	83 2d       	mov	r24, r3
    1858:	8e 7e       	andi	r24, 0xEE	; 238
    185a:	a8 2e       	mov	r10, r24
    185c:	05 c0       	rjmp	.+10     	; 0x1868 <vfprintf+0x2f6>
    185e:	b8 2c       	mov	r11, r8
    1860:	a3 2c       	mov	r10, r3
    1862:	03 c0       	rjmp	.+6      	; 0x186a <vfprintf+0x2f8>
    1864:	b8 2c       	mov	r11, r8
    1866:	01 c0       	rjmp	.+2      	; 0x186a <vfprintf+0x2f8>
    1868:	b9 2c       	mov	r11, r9
    186a:	a4 fe       	sbrs	r10, 4
    186c:	0f c0       	rjmp	.+30     	; 0x188c <vfprintf+0x31a>
    186e:	fe 01       	movw	r30, r28
    1870:	e8 0d       	add	r30, r8
    1872:	f1 1d       	adc	r31, r1
    1874:	80 81       	ld	r24, Z
    1876:	80 33       	cpi	r24, 0x30	; 48
    1878:	21 f4       	brne	.+8      	; 0x1882 <vfprintf+0x310>
    187a:	9a 2d       	mov	r25, r10
    187c:	99 7e       	andi	r25, 0xE9	; 233
    187e:	a9 2e       	mov	r10, r25
    1880:	09 c0       	rjmp	.+18     	; 0x1894 <vfprintf+0x322>
    1882:	a2 fe       	sbrs	r10, 2
    1884:	06 c0       	rjmp	.+12     	; 0x1892 <vfprintf+0x320>
    1886:	b3 94       	inc	r11
    1888:	b3 94       	inc	r11
    188a:	04 c0       	rjmp	.+8      	; 0x1894 <vfprintf+0x322>
    188c:	8a 2d       	mov	r24, r10
    188e:	86 78       	andi	r24, 0x86	; 134
    1890:	09 f0       	breq	.+2      	; 0x1894 <vfprintf+0x322>
    1892:	b3 94       	inc	r11
    1894:	a3 fc       	sbrc	r10, 3
    1896:	11 c0       	rjmp	.+34     	; 0x18ba <vfprintf+0x348>
    1898:	a0 fe       	sbrs	r10, 0
    189a:	06 c0       	rjmp	.+12     	; 0x18a8 <vfprintf+0x336>
    189c:	b2 14       	cp	r11, r2
    189e:	88 f4       	brcc	.+34     	; 0x18c2 <vfprintf+0x350>
    18a0:	28 0c       	add	r2, r8
    18a2:	92 2c       	mov	r9, r2
    18a4:	9b 18       	sub	r9, r11
    18a6:	0e c0       	rjmp	.+28     	; 0x18c4 <vfprintf+0x352>
    18a8:	b2 14       	cp	r11, r2
    18aa:	60 f4       	brcc	.+24     	; 0x18c4 <vfprintf+0x352>
    18ac:	b6 01       	movw	r22, r12
    18ae:	80 e2       	ldi	r24, 0x20	; 32
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <fputc>
    18b6:	b3 94       	inc	r11
    18b8:	f7 cf       	rjmp	.-18     	; 0x18a8 <vfprintf+0x336>
    18ba:	b2 14       	cp	r11, r2
    18bc:	18 f4       	brcc	.+6      	; 0x18c4 <vfprintf+0x352>
    18be:	2b 18       	sub	r2, r11
    18c0:	02 c0       	rjmp	.+4      	; 0x18c6 <vfprintf+0x354>
    18c2:	98 2c       	mov	r9, r8
    18c4:	21 2c       	mov	r2, r1
    18c6:	a4 fe       	sbrs	r10, 4
    18c8:	10 c0       	rjmp	.+32     	; 0x18ea <vfprintf+0x378>
    18ca:	b6 01       	movw	r22, r12
    18cc:	80 e3       	ldi	r24, 0x30	; 48
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <fputc>
    18d4:	a2 fe       	sbrs	r10, 2
    18d6:	17 c0       	rjmp	.+46     	; 0x1906 <vfprintf+0x394>
    18d8:	a1 fc       	sbrc	r10, 1
    18da:	03 c0       	rjmp	.+6      	; 0x18e2 <vfprintf+0x370>
    18dc:	88 e7       	ldi	r24, 0x78	; 120
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	02 c0       	rjmp	.+4      	; 0x18e6 <vfprintf+0x374>
    18e2:	88 e5       	ldi	r24, 0x58	; 88
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	b6 01       	movw	r22, r12
    18e8:	0c c0       	rjmp	.+24     	; 0x1902 <vfprintf+0x390>
    18ea:	8a 2d       	mov	r24, r10
    18ec:	86 78       	andi	r24, 0x86	; 134
    18ee:	59 f0       	breq	.+22     	; 0x1906 <vfprintf+0x394>
    18f0:	a1 fe       	sbrs	r10, 1
    18f2:	02 c0       	rjmp	.+4      	; 0x18f8 <vfprintf+0x386>
    18f4:	8b e2       	ldi	r24, 0x2B	; 43
    18f6:	01 c0       	rjmp	.+2      	; 0x18fa <vfprintf+0x388>
    18f8:	80 e2       	ldi	r24, 0x20	; 32
    18fa:	a7 fc       	sbrc	r10, 7
    18fc:	8d e2       	ldi	r24, 0x2D	; 45
    18fe:	b6 01       	movw	r22, r12
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <fputc>
    1906:	89 14       	cp	r8, r9
    1908:	38 f4       	brcc	.+14     	; 0x1918 <vfprintf+0x3a6>
    190a:	b6 01       	movw	r22, r12
    190c:	80 e3       	ldi	r24, 0x30	; 48
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <fputc>
    1914:	9a 94       	dec	r9
    1916:	f7 cf       	rjmp	.-18     	; 0x1906 <vfprintf+0x394>
    1918:	8a 94       	dec	r8
    191a:	f3 01       	movw	r30, r6
    191c:	e8 0d       	add	r30, r8
    191e:	f1 1d       	adc	r31, r1
    1920:	80 81       	ld	r24, Z
    1922:	b6 01       	movw	r22, r12
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <fputc>
    192a:	81 10       	cpse	r8, r1
    192c:	f5 cf       	rjmp	.-22     	; 0x1918 <vfprintf+0x3a6>
    192e:	22 20       	and	r2, r2
    1930:	09 f4       	brne	.+2      	; 0x1934 <vfprintf+0x3c2>
    1932:	42 ce       	rjmp	.-892    	; 0x15b8 <vfprintf+0x46>
    1934:	b6 01       	movw	r22, r12
    1936:	80 e2       	ldi	r24, 0x20	; 32
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <fputc>
    193e:	2a 94       	dec	r2
    1940:	f6 cf       	rjmp	.-20     	; 0x192e <vfprintf+0x3bc>
    1942:	f6 01       	movw	r30, r12
    1944:	86 81       	ldd	r24, Z+6	; 0x06
    1946:	97 81       	ldd	r25, Z+7	; 0x07
    1948:	02 c0       	rjmp	.+4      	; 0x194e <vfprintf+0x3dc>
    194a:	8f ef       	ldi	r24, 0xFF	; 255
    194c:	9f ef       	ldi	r25, 0xFF	; 255
    194e:	2b 96       	adiw	r28, 0x0b	; 11
    1950:	cd bf       	out	0x3d, r28	; 61
    1952:	de bf       	out	0x3e, r29	; 62
    1954:	df 91       	pop	r29
    1956:	cf 91       	pop	r28
    1958:	1f 91       	pop	r17
    195a:	0f 91       	pop	r16
    195c:	ff 90       	pop	r15
    195e:	ef 90       	pop	r14
    1960:	df 90       	pop	r13
    1962:	cf 90       	pop	r12
    1964:	bf 90       	pop	r11
    1966:	af 90       	pop	r10
    1968:	9f 90       	pop	r9
    196a:	8f 90       	pop	r8
    196c:	7f 90       	pop	r7
    196e:	6f 90       	pop	r6
    1970:	5f 90       	pop	r5
    1972:	4f 90       	pop	r4
    1974:	3f 90       	pop	r3
    1976:	2f 90       	pop	r2
    1978:	08 95       	ret

0000197a <strnlen_P>:
    197a:	fc 01       	movw	r30, r24
    197c:	05 90       	lpm	r0, Z+
    197e:	61 50       	subi	r22, 0x01	; 1
    1980:	70 40       	sbci	r23, 0x00	; 0
    1982:	01 10       	cpse	r0, r1
    1984:	d8 f7       	brcc	.-10     	; 0x197c <strnlen_P+0x2>
    1986:	80 95       	com	r24
    1988:	90 95       	com	r25
    198a:	8e 0f       	add	r24, r30
    198c:	9f 1f       	adc	r25, r31
    198e:	08 95       	ret

00001990 <strnlen>:
    1990:	fc 01       	movw	r30, r24
    1992:	61 50       	subi	r22, 0x01	; 1
    1994:	70 40       	sbci	r23, 0x00	; 0
    1996:	01 90       	ld	r0, Z+
    1998:	01 10       	cpse	r0, r1
    199a:	d8 f7       	brcc	.-10     	; 0x1992 <strnlen+0x2>
    199c:	80 95       	com	r24
    199e:	90 95       	com	r25
    19a0:	8e 0f       	add	r24, r30
    19a2:	9f 1f       	adc	r25, r31
    19a4:	08 95       	ret

000019a6 <fputc>:
    19a6:	0f 93       	push	r16
    19a8:	1f 93       	push	r17
    19aa:	cf 93       	push	r28
    19ac:	df 93       	push	r29
    19ae:	fb 01       	movw	r30, r22
    19b0:	23 81       	ldd	r18, Z+3	; 0x03
    19b2:	21 fd       	sbrc	r18, 1
    19b4:	03 c0       	rjmp	.+6      	; 0x19bc <fputc+0x16>
    19b6:	8f ef       	ldi	r24, 0xFF	; 255
    19b8:	9f ef       	ldi	r25, 0xFF	; 255
    19ba:	2c c0       	rjmp	.+88     	; 0x1a14 <fputc+0x6e>
    19bc:	22 ff       	sbrs	r18, 2
    19be:	16 c0       	rjmp	.+44     	; 0x19ec <fputc+0x46>
    19c0:	46 81       	ldd	r20, Z+6	; 0x06
    19c2:	57 81       	ldd	r21, Z+7	; 0x07
    19c4:	24 81       	ldd	r18, Z+4	; 0x04
    19c6:	35 81       	ldd	r19, Z+5	; 0x05
    19c8:	42 17       	cp	r20, r18
    19ca:	53 07       	cpc	r21, r19
    19cc:	44 f4       	brge	.+16     	; 0x19de <fputc+0x38>
    19ce:	a0 81       	ld	r26, Z
    19d0:	b1 81       	ldd	r27, Z+1	; 0x01
    19d2:	9d 01       	movw	r18, r26
    19d4:	2f 5f       	subi	r18, 0xFF	; 255
    19d6:	3f 4f       	sbci	r19, 0xFF	; 255
    19d8:	20 83       	st	Z, r18
    19da:	31 83       	std	Z+1, r19	; 0x01
    19dc:	8c 93       	st	X, r24
    19de:	26 81       	ldd	r18, Z+6	; 0x06
    19e0:	37 81       	ldd	r19, Z+7	; 0x07
    19e2:	2f 5f       	subi	r18, 0xFF	; 255
    19e4:	3f 4f       	sbci	r19, 0xFF	; 255
    19e6:	26 83       	std	Z+6, r18	; 0x06
    19e8:	37 83       	std	Z+7, r19	; 0x07
    19ea:	14 c0       	rjmp	.+40     	; 0x1a14 <fputc+0x6e>
    19ec:	8b 01       	movw	r16, r22
    19ee:	ec 01       	movw	r28, r24
    19f0:	fb 01       	movw	r30, r22
    19f2:	00 84       	ldd	r0, Z+8	; 0x08
    19f4:	f1 85       	ldd	r31, Z+9	; 0x09
    19f6:	e0 2d       	mov	r30, r0
    19f8:	09 95       	icall
    19fa:	89 2b       	or	r24, r25
    19fc:	e1 f6       	brne	.-72     	; 0x19b6 <fputc+0x10>
    19fe:	d8 01       	movw	r26, r16
    1a00:	16 96       	adiw	r26, 0x06	; 6
    1a02:	8d 91       	ld	r24, X+
    1a04:	9c 91       	ld	r25, X
    1a06:	17 97       	sbiw	r26, 0x07	; 7
    1a08:	01 96       	adiw	r24, 0x01	; 1
    1a0a:	16 96       	adiw	r26, 0x06	; 6
    1a0c:	8d 93       	st	X+, r24
    1a0e:	9c 93       	st	X, r25
    1a10:	17 97       	sbiw	r26, 0x07	; 7
    1a12:	ce 01       	movw	r24, r28
    1a14:	df 91       	pop	r29
    1a16:	cf 91       	pop	r28
    1a18:	1f 91       	pop	r17
    1a1a:	0f 91       	pop	r16
    1a1c:	08 95       	ret

00001a1e <__ultoa_invert>:
    1a1e:	fa 01       	movw	r30, r20
    1a20:	aa 27       	eor	r26, r26
    1a22:	28 30       	cpi	r18, 0x08	; 8
    1a24:	51 f1       	breq	.+84     	; 0x1a7a <__ultoa_invert+0x5c>
    1a26:	20 31       	cpi	r18, 0x10	; 16
    1a28:	81 f1       	breq	.+96     	; 0x1a8a <__ultoa_invert+0x6c>
    1a2a:	e8 94       	clt
    1a2c:	6f 93       	push	r22
    1a2e:	6e 7f       	andi	r22, 0xFE	; 254
    1a30:	6e 5f       	subi	r22, 0xFE	; 254
    1a32:	7f 4f       	sbci	r23, 0xFF	; 255
    1a34:	8f 4f       	sbci	r24, 0xFF	; 255
    1a36:	9f 4f       	sbci	r25, 0xFF	; 255
    1a38:	af 4f       	sbci	r26, 0xFF	; 255
    1a3a:	b1 e0       	ldi	r27, 0x01	; 1
    1a3c:	3e d0       	rcall	.+124    	; 0x1aba <__ultoa_invert+0x9c>
    1a3e:	b4 e0       	ldi	r27, 0x04	; 4
    1a40:	3c d0       	rcall	.+120    	; 0x1aba <__ultoa_invert+0x9c>
    1a42:	67 0f       	add	r22, r23
    1a44:	78 1f       	adc	r23, r24
    1a46:	89 1f       	adc	r24, r25
    1a48:	9a 1f       	adc	r25, r26
    1a4a:	a1 1d       	adc	r26, r1
    1a4c:	68 0f       	add	r22, r24
    1a4e:	79 1f       	adc	r23, r25
    1a50:	8a 1f       	adc	r24, r26
    1a52:	91 1d       	adc	r25, r1
    1a54:	a1 1d       	adc	r26, r1
    1a56:	6a 0f       	add	r22, r26
    1a58:	71 1d       	adc	r23, r1
    1a5a:	81 1d       	adc	r24, r1
    1a5c:	91 1d       	adc	r25, r1
    1a5e:	a1 1d       	adc	r26, r1
    1a60:	20 d0       	rcall	.+64     	; 0x1aa2 <__ultoa_invert+0x84>
    1a62:	09 f4       	brne	.+2      	; 0x1a66 <__ultoa_invert+0x48>
    1a64:	68 94       	set
    1a66:	3f 91       	pop	r19
    1a68:	2a e0       	ldi	r18, 0x0A	; 10
    1a6a:	26 9f       	mul	r18, r22
    1a6c:	11 24       	eor	r1, r1
    1a6e:	30 19       	sub	r19, r0
    1a70:	30 5d       	subi	r19, 0xD0	; 208
    1a72:	31 93       	st	Z+, r19
    1a74:	de f6       	brtc	.-74     	; 0x1a2c <__ultoa_invert+0xe>
    1a76:	cf 01       	movw	r24, r30
    1a78:	08 95       	ret
    1a7a:	46 2f       	mov	r20, r22
    1a7c:	47 70       	andi	r20, 0x07	; 7
    1a7e:	40 5d       	subi	r20, 0xD0	; 208
    1a80:	41 93       	st	Z+, r20
    1a82:	b3 e0       	ldi	r27, 0x03	; 3
    1a84:	0f d0       	rcall	.+30     	; 0x1aa4 <__ultoa_invert+0x86>
    1a86:	c9 f7       	brne	.-14     	; 0x1a7a <__ultoa_invert+0x5c>
    1a88:	f6 cf       	rjmp	.-20     	; 0x1a76 <__ultoa_invert+0x58>
    1a8a:	46 2f       	mov	r20, r22
    1a8c:	4f 70       	andi	r20, 0x0F	; 15
    1a8e:	40 5d       	subi	r20, 0xD0	; 208
    1a90:	4a 33       	cpi	r20, 0x3A	; 58
    1a92:	18 f0       	brcs	.+6      	; 0x1a9a <__ultoa_invert+0x7c>
    1a94:	49 5d       	subi	r20, 0xD9	; 217
    1a96:	31 fd       	sbrc	r19, 1
    1a98:	40 52       	subi	r20, 0x20	; 32
    1a9a:	41 93       	st	Z+, r20
    1a9c:	02 d0       	rcall	.+4      	; 0x1aa2 <__ultoa_invert+0x84>
    1a9e:	a9 f7       	brne	.-22     	; 0x1a8a <__ultoa_invert+0x6c>
    1aa0:	ea cf       	rjmp	.-44     	; 0x1a76 <__ultoa_invert+0x58>
    1aa2:	b4 e0       	ldi	r27, 0x04	; 4
    1aa4:	a6 95       	lsr	r26
    1aa6:	97 95       	ror	r25
    1aa8:	87 95       	ror	r24
    1aaa:	77 95       	ror	r23
    1aac:	67 95       	ror	r22
    1aae:	ba 95       	dec	r27
    1ab0:	c9 f7       	brne	.-14     	; 0x1aa4 <__ultoa_invert+0x86>
    1ab2:	00 97       	sbiw	r24, 0x00	; 0
    1ab4:	61 05       	cpc	r22, r1
    1ab6:	71 05       	cpc	r23, r1
    1ab8:	08 95       	ret
    1aba:	9b 01       	movw	r18, r22
    1abc:	ac 01       	movw	r20, r24
    1abe:	0a 2e       	mov	r0, r26
    1ac0:	06 94       	lsr	r0
    1ac2:	57 95       	ror	r21
    1ac4:	47 95       	ror	r20
    1ac6:	37 95       	ror	r19
    1ac8:	27 95       	ror	r18
    1aca:	ba 95       	dec	r27
    1acc:	c9 f7       	brne	.-14     	; 0x1ac0 <__ultoa_invert+0xa2>
    1ace:	62 0f       	add	r22, r18
    1ad0:	73 1f       	adc	r23, r19
    1ad2:	84 1f       	adc	r24, r20
    1ad4:	95 1f       	adc	r25, r21
    1ad6:	a0 1d       	adc	r26, r0
    1ad8:	08 95       	ret

00001ada <__do_global_dtors>:
    1ada:	10 e0       	ldi	r17, 0x00	; 0
    1adc:	cb e7       	ldi	r28, 0x7B	; 123
    1ade:	d0 e0       	ldi	r29, 0x00	; 0
    1ae0:	04 c0       	rjmp	.+8      	; 0x1aea <__do_global_dtors+0x10>
    1ae2:	fe 01       	movw	r30, r28
    1ae4:	0e 94 9c 0a 	call	0x1538	; 0x1538 <__tablejump2__>
    1ae8:	21 96       	adiw	r28, 0x01	; 1
    1aea:	cc 37       	cpi	r28, 0x7C	; 124
    1aec:	d1 07       	cpc	r29, r17
    1aee:	c9 f7       	brne	.-14     	; 0x1ae2 <__do_global_dtors+0x8>
    1af0:	f8 94       	cli

00001af2 <__stop_program>:
    1af2:	ff cf       	rjmp	.-2      	; 0x1af2 <__stop_program>
