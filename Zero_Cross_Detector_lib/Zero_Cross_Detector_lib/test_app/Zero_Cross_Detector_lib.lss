
Zero_Cross_Detector_lib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00804000  000016f0  00001784  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008a  0080403c  0080403c  000017c0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000017c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000181c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005f8  00000000  00000000  00001860  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00009a28  00000000  00000000  00001e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000454d  00000000  00000000  0000b880  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002a5f  00000000  00000000  0000fdcd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e30  00000000  00000000  0001282c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005e31  00000000  00000000  0001365c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001b52  00000000  00000000  0001948d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004b8  00000000  00000000  0001afdf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 80 00 	jmp	0x100	; 0x100 <__dtors_end>
       4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
       8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
       c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      10:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      14:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__vector_5>
      18:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      1c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      20:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      24:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      28:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      2c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      30:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      34:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      38:	0c 94 7c 04 	jmp	0x8f8	; 0x8f8 <__vector_14>
      3c:	0c 94 c1 04 	jmp	0x982	; 0x982 <__vector_15>
      40:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      44:	0c 94 06 05 	jmp	0xa0c	; 0xa0c <__vector_17>
      48:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      4c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      50:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      54:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      58:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      5c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      60:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      64:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      68:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      6c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      70:	0c 94 12 04 	jmp	0x824	; 0x824 <__vector_28>
      74:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      78:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      7c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      80:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      84:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      88:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      8c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      90:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      94:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__vector_37>
      98:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      9c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      a0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      a4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      a8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      ac:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      b0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      b4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      b8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      bc:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      c0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      c4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      c8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      cc:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      d0:	0c 94 47 04 	jmp	0x88e	; 0x88e <__vector_52>
      d4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      d8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      dc:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      e0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      e4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      e8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      ec:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      f0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>

000000f4 <__ctors_start>:
      f4:	3b 02       	muls	r19, r27
      f6:	f8 03       	fmulsu	r23, r16
      f8:	82 06       	cpc	r8, r18

000000fa <__ctors_end>:
      fa:	48 02       	muls	r20, r24
      fc:	05 04       	cpc	r0, r5
      fe:	8f 06       	cpc	r8, r31

00000100 <__dtors_end>:
     100:	11 24       	eor	r1, r1
     102:	1f be       	out	0x3f, r1	; 63
     104:	cf ef       	ldi	r28, 0xFF	; 255
     106:	cd bf       	out	0x3d, r28	; 61
     108:	df e7       	ldi	r29, 0x7F	; 127
     10a:	de bf       	out	0x3e, r29	; 62

0000010c <__do_copy_data>:
     10c:	10 e4       	ldi	r17, 0x40	; 64
     10e:	a0 e0       	ldi	r26, 0x00	; 0
     110:	b0 e4       	ldi	r27, 0x40	; 64
     112:	e0 ef       	ldi	r30, 0xF0	; 240
     114:	f6 e1       	ldi	r31, 0x16	; 22
     116:	00 e0       	ldi	r16, 0x00	; 0
     118:	0b bf       	out	0x3b, r16	; 59
     11a:	02 c0       	rjmp	.+4      	; 0x120 <__do_copy_data+0x14>
     11c:	07 90       	elpm	r0, Z+
     11e:	0d 92       	st	X+, r0
     120:	ac 33       	cpi	r26, 0x3C	; 60
     122:	b1 07       	cpc	r27, r17
     124:	d9 f7       	brne	.-10     	; 0x11c <__do_copy_data+0x10>

00000126 <__do_clear_bss>:
     126:	20 e4       	ldi	r18, 0x40	; 64
     128:	ac e3       	ldi	r26, 0x3C	; 60
     12a:	b0 e4       	ldi	r27, 0x40	; 64
     12c:	01 c0       	rjmp	.+2      	; 0x130 <.do_clear_bss_start>

0000012e <.do_clear_bss_loop>:
     12e:	1d 92       	st	X+, r1

00000130 <.do_clear_bss_start>:
     130:	a6 3c       	cpi	r26, 0xC6	; 198
     132:	b2 07       	cpc	r27, r18
     134:	e1 f7       	brne	.-8      	; 0x12e <.do_clear_bss_loop>

00000136 <__do_global_ctors>:
     136:	10 e0       	ldi	r17, 0x00	; 0
     138:	cd e7       	ldi	r28, 0x7D	; 125
     13a:	d0 e0       	ldi	r29, 0x00	; 0
     13c:	04 c0       	rjmp	.+8      	; 0x146 <__do_global_ctors+0x10>
     13e:	21 97       	sbiw	r28, 0x01	; 1
     140:	fe 01       	movw	r30, r28
     142:	0e 94 9a 08 	call	0x1134	; 0x1134 <__tablejump2__>
     146:	ca 37       	cpi	r28, 0x7A	; 122
     148:	d1 07       	cpc	r29, r17
     14a:	c9 f7       	brne	.-14     	; 0x13e <__do_global_ctors+0x8>
     14c:	0e 94 2e 01 	call	0x25c	; 0x25c <main>
     150:	0c 94 6b 0b 	jmp	0x16d6	; 0x16d6 <__do_global_dtors>

00000154 <__bad_interrupt>:
     154:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000158 <PORTB_toggle_pin_level>:
 * Toggle the pin levels on pins defined by bit mask
 *
 * \param[in] pin       The pin number within port
 */
static inline void PORTB_toggle_pin_level(const uint8_t pin)
{
     158:	cf 93       	push	r28
     15a:	df 93       	push	r29
     15c:	1f 92       	push	r1
     15e:	cd b7       	in	r28, 0x3d	; 61
     160:	de b7       	in	r29, 0x3e	; 62
     162:	89 83       	std	Y+1, r24	; 0x01
	VPORTB.IN |= 1 << pin;
     164:	84 e0       	ldi	r24, 0x04	; 4
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	24 e0       	ldi	r18, 0x04	; 4
     16a:	30 e0       	ldi	r19, 0x00	; 0
     16c:	f9 01       	movw	r30, r18
     16e:	22 81       	ldd	r18, Z+2	; 0x02
     170:	62 2f       	mov	r22, r18
     172:	29 81       	ldd	r18, Y+1	; 0x01
     174:	42 2f       	mov	r20, r18
     176:	50 e0       	ldi	r21, 0x00	; 0
     178:	21 e0       	ldi	r18, 0x01	; 1
     17a:	30 e0       	ldi	r19, 0x00	; 0
     17c:	02 c0       	rjmp	.+4      	; 0x182 <PORTB_toggle_pin_level+0x2a>
     17e:	22 0f       	add	r18, r18
     180:	33 1f       	adc	r19, r19
     182:	4a 95       	dec	r20
     184:	e2 f7       	brpl	.-8      	; 0x17e <PORTB_toggle_pin_level+0x26>
     186:	26 2b       	or	r18, r22
     188:	fc 01       	movw	r30, r24
     18a:	22 83       	std	Z+2, r18	; 0x02
}
     18c:	00 00       	nop
     18e:	0f 90       	pop	r0
     190:	df 91       	pop	r29
     192:	cf 91       	pop	r28
     194:	08 95       	ret

00000196 <LED0_toggle_level>:
 * \brief Toggle output level on LED0
 *
 * Toggle the pin level
 */
static inline void LED0_toggle_level()
{
     196:	cf 93       	push	r28
     198:	df 93       	push	r29
     19a:	cd b7       	in	r28, 0x3d	; 61
     19c:	de b7       	in	r29, 0x3e	; 62
	PORTB_toggle_pin_level(3);
     19e:	83 e0       	ldi	r24, 0x03	; 3
     1a0:	0e 94 ac 00 	call	0x158	; 0x158 <PORTB_toggle_pin_level>
}
     1a4:	00 00       	nop
     1a6:	df 91       	pop	r29
     1a8:	cf 91       	pop	r28
     1aa:	08 95       	ret

000001ac <_Z10RTC_enablev>:




void RTC_enable(void)
{
     1ac:	cf 93       	push	r28
     1ae:	df 93       	push	r29
     1b0:	cd b7       	in	r28, 0x3d	; 61
     1b2:	de b7       	in	r29, 0x3e	; 62
	// Wait for RTC CTRLA to be unsynchronized
	while (RTC.STATUS & RTC_CTRLABUSY_bm) {
     1b4:	80 e4       	ldi	r24, 0x40	; 64
     1b6:	91 e0       	ldi	r25, 0x01	; 1
     1b8:	fc 01       	movw	r30, r24
     1ba:	81 81       	ldd	r24, Z+1	; 0x01
     1bc:	88 2f       	mov	r24, r24
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	81 70       	andi	r24, 0x01	; 1
     1c2:	99 27       	eor	r25, r25
     1c4:	21 e0       	ldi	r18, 0x01	; 1
     1c6:	89 2b       	or	r24, r25
     1c8:	09 f4       	brne	.+2      	; 0x1cc <_Z10RTC_enablev+0x20>
     1ca:	20 e0       	ldi	r18, 0x00	; 0
     1cc:	22 23       	and	r18, r18
     1ce:	09 f0       	breq	.+2      	; 0x1d2 <_Z10RTC_enablev+0x26>
     1d0:	f1 cf       	rjmp	.-30     	; 0x1b4 <_Z10RTC_enablev+0x8>
	}

	// Enable RTC
	RTC.CTRLA |= RTC_RTCEN_bm;
     1d2:	80 e4       	ldi	r24, 0x40	; 64
     1d4:	91 e0       	ldi	r25, 0x01	; 1
     1d6:	20 e4       	ldi	r18, 0x40	; 64
     1d8:	31 e0       	ldi	r19, 0x01	; 1
     1da:	f9 01       	movw	r30, r18
     1dc:	20 81       	ld	r18, Z
     1de:	21 60       	ori	r18, 0x01	; 1
     1e0:	fc 01       	movw	r30, r24
     1e2:	20 83       	st	Z, r18
}
     1e4:	00 00       	nop
     1e6:	df 91       	pop	r29
     1e8:	cf 91       	pop	r28
     1ea:	08 95       	ret

000001ec <__vector_5>:

ISR(RTC_CNT_vect)
{
     1ec:	1f 92       	push	r1
     1ee:	0f 92       	push	r0
     1f0:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     1f4:	0f 92       	push	r0
     1f6:	11 24       	eor	r1, r1
     1f8:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     1fc:	0f 92       	push	r0
     1fe:	2f 93       	push	r18
     200:	3f 93       	push	r19
     202:	4f 93       	push	r20
     204:	5f 93       	push	r21
     206:	6f 93       	push	r22
     208:	7f 93       	push	r23
     20a:	8f 93       	push	r24
     20c:	9f 93       	push	r25
     20e:	af 93       	push	r26
     210:	bf 93       	push	r27
     212:	ef 93       	push	r30
     214:	ff 93       	push	r31
     216:	cf 93       	push	r28
     218:	df 93       	push	r29
     21a:	cd b7       	in	r28, 0x3d	; 61
     21c:	de b7       	in	r29, 0x3e	; 62
	/* Toggle LED0 */
	LED0_toggle_level();
     21e:	0e 94 cb 00 	call	0x196	; 0x196 <LED0_toggle_level>

	/* Overflow interrupt flag has to be cleared manually */
	RTC.INTFLAGS = RTC_OVF_bm;
     222:	80 e4       	ldi	r24, 0x40	; 64
     224:	91 e0       	ldi	r25, 0x01	; 1
     226:	21 e0       	ldi	r18, 0x01	; 1
     228:	fc 01       	movw	r30, r24
     22a:	23 83       	std	Z+3, r18	; 0x03
}
     22c:	00 00       	nop
     22e:	df 91       	pop	r29
     230:	cf 91       	pop	r28
     232:	ff 91       	pop	r31
     234:	ef 91       	pop	r30
     236:	bf 91       	pop	r27
     238:	af 91       	pop	r26
     23a:	9f 91       	pop	r25
     23c:	8f 91       	pop	r24
     23e:	7f 91       	pop	r23
     240:	6f 91       	pop	r22
     242:	5f 91       	pop	r21
     244:	4f 91       	pop	r20
     246:	3f 91       	pop	r19
     248:	2f 91       	pop	r18
     24a:	0f 90       	pop	r0
     24c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     250:	0f 90       	pop	r0
     252:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     256:	0f 90       	pop	r0
     258:	1f 90       	pop	r1
     25a:	18 95       	reti

0000025c <main>:

int main(void)
{
     25c:	cf 93       	push	r28
     25e:	df 93       	push	r29
     260:	cd b7       	in	r28, 0x3d	; 61
     262:	de b7       	in	r29, 0x3e	; 62
     264:	60 97       	sbiw	r28, 0x10	; 16
     266:	cd bf       	out	0x3d, r28	; 61
     268:	de bf       	out	0x3e, r29	; 62
	uint32_t last_frequency_b=0;
     26a:	19 82       	std	Y+1, r1	; 0x01
     26c:	1a 82       	std	Y+2, r1	; 0x02
     26e:	1b 82       	std	Y+3, r1	; 0x03
     270:	1c 82       	std	Y+4, r1	; 0x04
	uint32_t last_frequency_c=0;
     272:	1d 82       	std	Y+5, r1	; 0x05
     274:	1e 82       	std	Y+6, r1	; 0x06
     276:	1f 82       	std	Y+7, r1	; 0x07
     278:	18 86       	std	Y+8, r1	; 0x08
		uint32_t current_frequency_b=0;
     27a:	19 86       	std	Y+9, r1	; 0x09
     27c:	1a 86       	std	Y+10, r1	; 0x0a
     27e:	1b 86       	std	Y+11, r1	; 0x0b
     280:	1c 86       	std	Y+12, r1	; 0x0c
		uint32_t current_frequency_c=0;
     282:	1d 86       	std	Y+13, r1	; 0x0d
     284:	1e 86       	std	Y+14, r1	; 0x0e
     286:	1f 86       	std	Y+15, r1	; 0x0f
     288:	18 8a       	std	Y+16, r1	; 0x10
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
     28a:	0e 94 9c 06 	call	0xd38	; 0xd38 <atmel_start_init>
	RTC_enable();
     28e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_Z10RTC_enablev>
	
	tako.Init();
     292:	8c e3       	ldi	r24, 0x3C	; 60
     294:	90 e4       	ldi	r25, 0x40	; 64
     296:	0e 94 72 05 	call	0xae4	; 0xae4 <_ZN18Zero_Cross_Counter4InitEv>
	post.Init();
     29a:	8e e4       	ldi	r24, 0x4E	; 78
     29c:	90 e4       	ldi	r25, 0x40	; 64
     29e:	0e 94 44 03 	call	0x688	; 0x688 <_ZN15SPI_SLAVE_CLASS4InitEv>
	ENABLE_INTERRUPTS();
     2a2:	78 94       	sei
	//asm("nop");
	printf("hello\n\r");
     2a4:	8e e0       	ldi	r24, 0x0E	; 14
     2a6:	90 e4       	ldi	r25, 0x40	; 64
     2a8:	89 2f       	mov	r24, r25
     2aa:	8f 93       	push	r24
     2ac:	8e e0       	ldi	r24, 0x0E	; 14
     2ae:	90 e4       	ldi	r25, 0x40	; 64
     2b0:	8f 93       	push	r24
     2b2:	0e 94 a3 08 	call	0x1146	; 0x1146 <printf>
     2b6:	0f 90       	pop	r0
     2b8:	0f 90       	pop	r0
	/* Replace with your application code */
	while (1) {
		current_frequency_c=(uint32_t)(24000000/(tako.capture_timer_fall));
     2ba:	80 91 3f 40 	lds	r24, 0x403F	; 0x80403f <__data_end+0x3>
     2be:	90 91 40 40 	lds	r25, 0x4040	; 0x804040 <__data_end+0x4>
     2c2:	9c 01       	movw	r18, r24
     2c4:	40 e0       	ldi	r20, 0x00	; 0
     2c6:	50 e0       	ldi	r21, 0x00	; 0
     2c8:	80 e0       	ldi	r24, 0x00	; 0
     2ca:	96 e3       	ldi	r25, 0x36	; 54
     2cc:	ae e6       	ldi	r26, 0x6E	; 110
     2ce:	b1 e0       	ldi	r27, 0x01	; 1
     2d0:	bc 01       	movw	r22, r24
     2d2:	cd 01       	movw	r24, r26
     2d4:	0e 94 59 08 	call	0x10b2	; 0x10b2 <__divmodsi4>
     2d8:	da 01       	movw	r26, r20
     2da:	c9 01       	movw	r24, r18
     2dc:	8d 87       	std	Y+13, r24	; 0x0d
     2de:	9e 87       	std	Y+14, r25	; 0x0e
     2e0:	af 87       	std	Y+15, r26	; 0x0f
     2e2:	b8 8b       	std	Y+16, r27	; 0x10
		if (last_frequency_c!=current_frequency_c)
     2e4:	2d 81       	ldd	r18, Y+5	; 0x05
     2e6:	3e 81       	ldd	r19, Y+6	; 0x06
     2e8:	4f 81       	ldd	r20, Y+7	; 0x07
     2ea:	58 85       	ldd	r21, Y+8	; 0x08
     2ec:	8d 85       	ldd	r24, Y+13	; 0x0d
     2ee:	9e 85       	ldd	r25, Y+14	; 0x0e
     2f0:	af 85       	ldd	r26, Y+15	; 0x0f
     2f2:	b8 89       	ldd	r27, Y+16	; 0x10
     2f4:	28 17       	cp	r18, r24
     2f6:	39 07       	cpc	r19, r25
     2f8:	4a 07       	cpc	r20, r26
     2fa:	5b 07       	cpc	r21, r27
     2fc:	99 f1       	breq	.+102    	; 0x364 <main+0x108>
		{
			if (tako.capture_timer_fall>0)
     2fe:	80 91 3f 40 	lds	r24, 0x403F	; 0x80403f <__data_end+0x3>
     302:	90 91 40 40 	lds	r25, 0x4040	; 0x804040 <__data_end+0x4>
     306:	21 e0       	ldi	r18, 0x01	; 1
     308:	89 2b       	or	r24, r25
     30a:	09 f4       	brne	.+2      	; 0x30e <main+0xb2>
     30c:	20 e0       	ldi	r18, 0x00	; 0
     30e:	22 23       	and	r18, r18
     310:	49 f1       	breq	.+82     	; 0x364 <main+0x108>
			{
				last_frequency_c=current_frequency_c;
     312:	8d 85       	ldd	r24, Y+13	; 0x0d
     314:	9e 85       	ldd	r25, Y+14	; 0x0e
     316:	af 85       	ldd	r26, Y+15	; 0x0f
     318:	b8 89       	ldd	r27, Y+16	; 0x10
     31a:	8d 83       	std	Y+5, r24	; 0x05
     31c:	9e 83       	std	Y+6, r25	; 0x06
     31e:	af 83       	std	Y+7, r26	; 0x07
     320:	b8 87       	std	Y+8, r27	; 0x08
					tako.Set_Last_Frequency(last_frequency_c);
     322:	8d 81       	ldd	r24, Y+5	; 0x05
     324:	9e 81       	ldd	r25, Y+6	; 0x06
     326:	af 81       	ldd	r26, Y+7	; 0x07
     328:	b8 85       	ldd	r27, Y+8	; 0x08
     32a:	ac 01       	movw	r20, r24
     32c:	bd 01       	movw	r22, r26
     32e:	8c e3       	ldi	r24, 0x3C	; 60
     330:	90 e4       	ldi	r25, 0x40	; 64
     332:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN18Zero_Cross_Counter18Set_Last_FrequencyEm>
				printf("Counter C : %lu \n\r", current_frequency_c);
     336:	88 89       	ldd	r24, Y+16	; 0x10
     338:	8f 93       	push	r24
     33a:	8f 85       	ldd	r24, Y+15	; 0x0f
     33c:	8f 93       	push	r24
     33e:	8e 85       	ldd	r24, Y+14	; 0x0e
     340:	8f 93       	push	r24
     342:	8d 85       	ldd	r24, Y+13	; 0x0d
     344:	8f 93       	push	r24
     346:	86 e1       	ldi	r24, 0x16	; 22
     348:	90 e4       	ldi	r25, 0x40	; 64
     34a:	89 2f       	mov	r24, r25
     34c:	8f 93       	push	r24
     34e:	86 e1       	ldi	r24, 0x16	; 22
     350:	90 e4       	ldi	r25, 0x40	; 64
     352:	8f 93       	push	r24
     354:	0e 94 a3 08 	call	0x1146	; 0x1146 <printf>
     358:	0f 90       	pop	r0
     35a:	0f 90       	pop	r0
     35c:	0f 90       	pop	r0
     35e:	0f 90       	pop	r0
     360:	0f 90       	pop	r0
     362:	0f 90       	pop	r0
		} 
		else
		{
			
		}
		current_frequency_b=(uint32_t)(24000000/(tako.capture_timer_rise));
     364:	80 91 41 40 	lds	r24, 0x4041	; 0x804041 <__data_end+0x5>
     368:	90 91 42 40 	lds	r25, 0x4042	; 0x804042 <__data_end+0x6>
     36c:	9c 01       	movw	r18, r24
     36e:	40 e0       	ldi	r20, 0x00	; 0
     370:	50 e0       	ldi	r21, 0x00	; 0
     372:	80 e0       	ldi	r24, 0x00	; 0
     374:	96 e3       	ldi	r25, 0x36	; 54
     376:	ae e6       	ldi	r26, 0x6E	; 110
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	bc 01       	movw	r22, r24
     37c:	cd 01       	movw	r24, r26
     37e:	0e 94 59 08 	call	0x10b2	; 0x10b2 <__divmodsi4>
     382:	da 01       	movw	r26, r20
     384:	c9 01       	movw	r24, r18
     386:	89 87       	std	Y+9, r24	; 0x09
     388:	9a 87       	std	Y+10, r25	; 0x0a
     38a:	ab 87       	std	Y+11, r26	; 0x0b
     38c:	bc 87       	std	Y+12, r27	; 0x0c
		if (last_frequency_b!=current_frequency_b)
     38e:	29 81       	ldd	r18, Y+1	; 0x01
     390:	3a 81       	ldd	r19, Y+2	; 0x02
     392:	4b 81       	ldd	r20, Y+3	; 0x03
     394:	5c 81       	ldd	r21, Y+4	; 0x04
     396:	89 85       	ldd	r24, Y+9	; 0x09
     398:	9a 85       	ldd	r25, Y+10	; 0x0a
     39a:	ab 85       	ldd	r26, Y+11	; 0x0b
     39c:	bc 85       	ldd	r27, Y+12	; 0x0c
     39e:	28 17       	cp	r18, r24
     3a0:	39 07       	cpc	r19, r25
     3a2:	4a 07       	cpc	r20, r26
     3a4:	5b 07       	cpc	r21, r27
     3a6:	09 f4       	brne	.+2      	; 0x3aa <main+0x14e>
     3a8:	88 cf       	rjmp	.-240    	; 0x2ba <main+0x5e>
		{
			if (tako.capture_timer_rise>0)
     3aa:	80 91 41 40 	lds	r24, 0x4041	; 0x804041 <__data_end+0x5>
     3ae:	90 91 42 40 	lds	r25, 0x4042	; 0x804042 <__data_end+0x6>
     3b2:	21 e0       	ldi	r18, 0x01	; 1
     3b4:	89 2b       	or	r24, r25
     3b6:	09 f4       	brne	.+2      	; 0x3ba <main+0x15e>
     3b8:	20 e0       	ldi	r18, 0x00	; 0
     3ba:	22 23       	and	r18, r18
     3bc:	09 f4       	brne	.+2      	; 0x3c0 <main+0x164>
     3be:	7d cf       	rjmp	.-262    	; 0x2ba <main+0x5e>
			{
				last_frequency_b=current_frequency_b;
     3c0:	89 85       	ldd	r24, Y+9	; 0x09
     3c2:	9a 85       	ldd	r25, Y+10	; 0x0a
     3c4:	ab 85       	ldd	r26, Y+11	; 0x0b
     3c6:	bc 85       	ldd	r27, Y+12	; 0x0c
     3c8:	89 83       	std	Y+1, r24	; 0x01
     3ca:	9a 83       	std	Y+2, r25	; 0x02
     3cc:	ab 83       	std	Y+3, r26	; 0x03
     3ce:	bc 83       	std	Y+4, r27	; 0x04
				tako.Set_Last_Frequency(last_frequency_b);
     3d0:	89 81       	ldd	r24, Y+1	; 0x01
     3d2:	9a 81       	ldd	r25, Y+2	; 0x02
     3d4:	ab 81       	ldd	r26, Y+3	; 0x03
     3d6:	bc 81       	ldd	r27, Y+4	; 0x04
     3d8:	ac 01       	movw	r20, r24
     3da:	bd 01       	movw	r22, r26
     3dc:	8c e3       	ldi	r24, 0x3C	; 60
     3de:	90 e4       	ldi	r25, 0x40	; 64
     3e0:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN18Zero_Cross_Counter18Set_Last_FrequencyEm>
				printf("Counter B : %lu \n\r", current_frequency_b);
     3e4:	8c 85       	ldd	r24, Y+12	; 0x0c
     3e6:	8f 93       	push	r24
     3e8:	8b 85       	ldd	r24, Y+11	; 0x0b
     3ea:	8f 93       	push	r24
     3ec:	8a 85       	ldd	r24, Y+10	; 0x0a
     3ee:	8f 93       	push	r24
     3f0:	89 85       	ldd	r24, Y+9	; 0x09
     3f2:	8f 93       	push	r24
     3f4:	89 e2       	ldi	r24, 0x29	; 41
     3f6:	90 e4       	ldi	r25, 0x40	; 64
     3f8:	89 2f       	mov	r24, r25
     3fa:	8f 93       	push	r24
     3fc:	89 e2       	ldi	r24, 0x29	; 41
     3fe:	90 e4       	ldi	r25, 0x40	; 64
     400:	8f 93       	push	r24
     402:	0e 94 a3 08 	call	0x1146	; 0x1146 <printf>
     406:	0f 90       	pop	r0
     408:	0f 90       	pop	r0
     40a:	0f 90       	pop	r0
     40c:	0f 90       	pop	r0
     40e:	0f 90       	pop	r0
     410:	0f 90       	pop	r0
	post.Init();
	ENABLE_INTERRUPTS();
	//asm("nop");
	printf("hello\n\r");
	/* Replace with your application code */
	while (1) {
     412:	53 cf       	rjmp	.-346    	; 0x2ba <main+0x5e>

00000414 <_Z41__static_initialization_and_destruction_0ii>:
		//post.Check_Command();
		
		
			
	}
}
     414:	cf 93       	push	r28
     416:	df 93       	push	r29
     418:	00 d0       	rcall	.+0      	; 0x41a <_Z41__static_initialization_and_destruction_0ii+0x6>
     41a:	00 d0       	rcall	.+0      	; 0x41c <_Z41__static_initialization_and_destruction_0ii+0x8>
     41c:	cd b7       	in	r28, 0x3d	; 61
     41e:	de b7       	in	r29, 0x3e	; 62
     420:	89 83       	std	Y+1, r24	; 0x01
     422:	9a 83       	std	Y+2, r25	; 0x02
     424:	6b 83       	std	Y+3, r22	; 0x03
     426:	7c 83       	std	Y+4, r23	; 0x04
     428:	89 81       	ldd	r24, Y+1	; 0x01
     42a:	9a 81       	ldd	r25, Y+2	; 0x02
     42c:	01 97       	sbiw	r24, 0x01	; 1
     42e:	61 f4       	brne	.+24     	; 0x448 <_Z41__static_initialization_and_destruction_0ii+0x34>
     430:	8b 81       	ldd	r24, Y+3	; 0x03
     432:	9c 81       	ldd	r25, Y+4	; 0x04
     434:	01 96       	adiw	r24, 0x01	; 1
     436:	41 f4       	brne	.+16     	; 0x448 <_Z41__static_initialization_and_destruction_0ii+0x34>
	Zero_Cross_Counter& operator=( const Zero_Cross_Counter &c );
	void ZCD_RISING_Init(void);
	uint8_t TIMER_RISING_Init();
}; //Zero_Cross_Counter

static Zero_Cross_Counter tako;
     438:	8c e3       	ldi	r24, 0x3C	; 60
     43a:	90 e4       	ldi	r25, 0x40	; 64
     43c:	0e 94 4b 05 	call	0xa96	; 0xa96 <_ZN18Zero_Cross_CounterC1Ev>
	void SPI_ZCD_enable();
	void SPI_ZCD_disable();

}; //SPI_SLAVE_CLASS

static SPI_SLAVE_CLASS post;
     440:	8e e4       	ldi	r24, 0x4E	; 78
     442:	90 e4       	ldi	r25, 0x40	; 64
     444:	0e 94 0d 03 	call	0x61a	; 0x61a <_ZN15SPI_SLAVE_CLASSC1Ev>
     448:	89 81       	ldd	r24, Y+1	; 0x01
     44a:	9a 81       	ldd	r25, Y+2	; 0x02
     44c:	89 2b       	or	r24, r25
     44e:	61 f4       	brne	.+24     	; 0x468 <_Z41__static_initialization_and_destruction_0ii+0x54>
     450:	8b 81       	ldd	r24, Y+3	; 0x03
     452:	9c 81       	ldd	r25, Y+4	; 0x04
     454:	01 96       	adiw	r24, 0x01	; 1
     456:	41 f4       	brne	.+16     	; 0x468 <_Z41__static_initialization_and_destruction_0ii+0x54>
     458:	8e e4       	ldi	r24, 0x4E	; 78
     45a:	90 e4       	ldi	r25, 0x40	; 64
     45c:	0e 94 37 03 	call	0x66e	; 0x66e <_ZN15SPI_SLAVE_CLASSD1Ev>
     460:	8c e3       	ldi	r24, 0x3C	; 60
     462:	90 e4       	ldi	r25, 0x40	; 64
     464:	0e 94 65 05 	call	0xaca	; 0xaca <_ZN18Zero_Cross_CounterD1Ev>
     468:	00 00       	nop
     46a:	24 96       	adiw	r28, 0x04	; 4
     46c:	cd bf       	out	0x3d, r28	; 61
     46e:	de bf       	out	0x3e, r29	; 62
     470:	df 91       	pop	r29
     472:	cf 91       	pop	r28
     474:	08 95       	ret

00000476 <_GLOBAL__sub_I__Z10RTC_enablev>:
     476:	cf 93       	push	r28
     478:	df 93       	push	r29
     47a:	cd b7       	in	r28, 0x3d	; 61
     47c:	de b7       	in	r29, 0x3e	; 62
     47e:	6f ef       	ldi	r22, 0xFF	; 255
     480:	7f ef       	ldi	r23, 0xFF	; 255
     482:	81 e0       	ldi	r24, 0x01	; 1
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	0e 94 0a 02 	call	0x414	; 0x414 <_Z41__static_initialization_and_destruction_0ii>
     48a:	df 91       	pop	r29
     48c:	cf 91       	pop	r28
     48e:	08 95       	ret

00000490 <_GLOBAL__sub_D__Z10RTC_enablev>:
     490:	cf 93       	push	r28
     492:	df 93       	push	r29
     494:	cd b7       	in	r28, 0x3d	; 61
     496:	de b7       	in	r29, 0x3e	; 62
     498:	6f ef       	ldi	r22, 0xFF	; 255
     49a:	7f ef       	ldi	r23, 0xFF	; 255
     49c:	80 e0       	ldi	r24, 0x00	; 0
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	0e 94 0a 02 	call	0x414	; 0x414 <_Z41__static_initialization_and_destruction_0ii>
     4a4:	df 91       	pop	r29
     4a6:	cf 91       	pop	r28
     4a8:	08 95       	ret

000004aa <_ZL17SPI_Transfer_Donev>:
			SPI_ZCD_write_block(tako.last_frequency, 4);
		}
	}
	
	
     4aa:	cf 93       	push	r28
     4ac:	df 93       	push	r29
     4ae:	cd b7       	in	r28, 0x3d	; 61
     4b0:	de b7       	in	r29, 0x3e	; 62
     4b2:	80 91 98 40 	lds	r24, 0x4098	; 0x804098 <ptrSPI_Slave>
     4b6:	90 91 99 40 	lds	r25, 0x4099	; 0x804099 <ptrSPI_Slave+0x1>
     4ba:	21 e0       	ldi	r18, 0x01	; 1
     4bc:	fc 01       	movw	r30, r24
     4be:	20 83       	st	Z, r18
     4c0:	80 91 98 40 	lds	r24, 0x4098	; 0x804098 <ptrSPI_Slave>
     4c4:	90 91 99 40 	lds	r25, 0x4099	; 0x804099 <ptrSPI_Slave+0x1>
     4c8:	21 e0       	ldi	r18, 0x01	; 1
     4ca:	fc 01       	movw	r30, r24
     4cc:	26 83       	std	Z+6, r18	; 0x06
     4ce:	00 00       	nop
     4d0:	df 91       	pop	r29
     4d2:	cf 91       	pop	r28
     4d4:	08 95       	ret

000004d6 <__vector_37>:
     4d6:	1f 92       	push	r1
     4d8:	0f 92       	push	r0
     4da:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     4de:	0f 92       	push	r0
     4e0:	11 24       	eor	r1, r1
     4e2:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     4e6:	0f 92       	push	r0
     4e8:	2f 93       	push	r18
     4ea:	3f 93       	push	r19
     4ec:	4f 93       	push	r20
     4ee:	5f 93       	push	r21
     4f0:	6f 93       	push	r22
     4f2:	7f 93       	push	r23
     4f4:	8f 93       	push	r24
     4f6:	9f 93       	push	r25
     4f8:	af 93       	push	r26
     4fa:	bf 93       	push	r27
     4fc:	ef 93       	push	r30
     4fe:	ff 93       	push	r31
     500:	cf 93       	push	r28
     502:	df 93       	push	r29
     504:	00 d0       	rcall	.+0      	; 0x506 <__vector_37+0x30>
     506:	cd b7       	in	r28, 0x3d	; 61
     508:	de b7       	in	r29, 0x3e	; 62
     50a:	80 e6       	ldi	r24, 0x60	; 96
     50c:	99 e0       	ldi	r25, 0x09	; 9
     50e:	fc 01       	movw	r30, r24
     510:	84 81       	ldd	r24, Z+4	; 0x04
     512:	89 83       	std	Y+1, r24	; 0x01
     514:	1a 82       	std	Y+2, r1	; 0x02
     516:	80 e6       	ldi	r24, 0x60	; 96
     518:	99 e0       	ldi	r25, 0x09	; 9
     51a:	20 e8       	ldi	r18, 0x80	; 128
     51c:	fc 01       	movw	r30, r24
     51e:	23 83       	std	Z+3, r18	; 0x03
     520:	80 91 98 40 	lds	r24, 0x4098	; 0x804098 <ptrSPI_Slave>
     524:	90 91 99 40 	lds	r25, 0x4099	; 0x804099 <ptrSPI_Slave+0x1>
     528:	fc 01       	movw	r30, r24
     52a:	86 81       	ldd	r24, Z+6	; 0x06
     52c:	82 30       	cpi	r24, 0x02	; 2
     52e:	e9 f0       	breq	.+58     	; 0x56a <__vector_37+0x94>
     530:	89 81       	ldd	r24, Y+1	; 0x01
     532:	81 30       	cpi	r24, 0x01	; 1
     534:	99 f4       	brne	.+38     	; 0x55c <__vector_37+0x86>
     536:	80 91 98 40 	lds	r24, 0x4098	; 0x804098 <ptrSPI_Slave>
     53a:	90 91 99 40 	lds	r25, 0x4099	; 0x804099 <ptrSPI_Slave+0x1>
     53e:	fc 01       	movw	r30, r24
     540:	10 82       	st	Z, r1
     542:	20 91 6d 40 	lds	r18, 0x406D	; 0x80406d <_ZL4tako+0x7>
     546:	30 91 6e 40 	lds	r19, 0x406E	; 0x80406e <_ZL4tako+0x8>
     54a:	80 91 98 40 	lds	r24, 0x4098	; 0x804098 <ptrSPI_Slave>
     54e:	90 91 99 40 	lds	r25, 0x4099	; 0x804099 <ptrSPI_Slave+0x1>
     552:	44 e0       	ldi	r20, 0x04	; 4
     554:	b9 01       	movw	r22, r18
     556:	0e 94 5f 03 	call	0x6be	; 0x6be <_ZN15SPI_SLAVE_CLASS10Write_DataEPhh>
     55a:	45 c0       	rjmp	.+138    	; 0x5e6 <__vector_37+0x110>
     55c:	80 91 98 40 	lds	r24, 0x4098	; 0x804098 <ptrSPI_Slave>
     560:	90 91 99 40 	lds	r25, 0x4099	; 0x804099 <ptrSPI_Slave+0x1>
     564:	fc 01       	movw	r30, r24
     566:	11 82       	std	Z+1, r1	; 0x01
     568:	3e c0       	rjmp	.+124    	; 0x5e6 <__vector_37+0x110>
     56a:	80 91 98 40 	lds	r24, 0x4098	; 0x804098 <ptrSPI_Slave>
     56e:	90 91 99 40 	lds	r25, 0x4099	; 0x804099 <ptrSPI_Slave+0x1>
     572:	fc 01       	movw	r30, r24
     574:	86 81       	ldd	r24, Z+6	; 0x06
     576:	81 30       	cpi	r24, 0x01	; 1
     578:	b1 f1       	breq	.+108    	; 0x5e6 <__vector_37+0x110>
     57a:	80 91 98 40 	lds	r24, 0x4098	; 0x804098 <ptrSPI_Slave>
     57e:	90 91 99 40 	lds	r25, 0x4099	; 0x804099 <ptrSPI_Slave+0x1>
     582:	fc 01       	movw	r30, r24
     584:	23 81       	ldd	r18, Z+3	; 0x03
     586:	34 81       	ldd	r19, Z+4	; 0x04
     588:	2f 5f       	subi	r18, 0xFF	; 255
     58a:	3f 4f       	sbci	r19, 0xFF	; 255
     58c:	fc 01       	movw	r30, r24
     58e:	23 83       	std	Z+3, r18	; 0x03
     590:	34 83       	std	Z+4, r19	; 0x04
     592:	80 91 98 40 	lds	r24, 0x4098	; 0x804098 <ptrSPI_Slave>
     596:	90 91 99 40 	lds	r25, 0x4099	; 0x804099 <ptrSPI_Slave+0x1>
     59a:	fc 01       	movw	r30, r24
     59c:	83 81       	ldd	r24, Z+3	; 0x03
     59e:	94 81       	ldd	r25, Z+4	; 0x04
     5a0:	fc 01       	movw	r30, r24
     5a2:	80 81       	ld	r24, Z
     5a4:	8a 83       	std	Y+2, r24	; 0x02
     5a6:	80 91 98 40 	lds	r24, 0x4098	; 0x804098 <ptrSPI_Slave>
     5aa:	90 91 99 40 	lds	r25, 0x4099	; 0x804099 <ptrSPI_Slave+0x1>
     5ae:	fc 01       	movw	r30, r24
     5b0:	25 81       	ldd	r18, Z+5	; 0x05
     5b2:	21 50       	subi	r18, 0x01	; 1
     5b4:	fc 01       	movw	r30, r24
     5b6:	25 83       	std	Z+5, r18	; 0x05
     5b8:	80 91 98 40 	lds	r24, 0x4098	; 0x804098 <ptrSPI_Slave>
     5bc:	90 91 99 40 	lds	r25, 0x4099	; 0x804099 <ptrSPI_Slave+0x1>
     5c0:	fc 01       	movw	r30, r24
     5c2:	85 81       	ldd	r24, Z+5	; 0x05
     5c4:	88 23       	and	r24, r24
     5c6:	31 f0       	breq	.+12     	; 0x5d4 <__vector_37+0xfe>
     5c8:	80 e6       	ldi	r24, 0x60	; 96
     5ca:	99 e0       	ldi	r25, 0x09	; 9
     5cc:	2a 81       	ldd	r18, Y+2	; 0x02
     5ce:	fc 01       	movw	r30, r24
     5d0:	24 83       	std	Z+4, r18	; 0x04
     5d2:	09 c0       	rjmp	.+18     	; 0x5e6 <__vector_37+0x110>
     5d4:	80 91 98 40 	lds	r24, 0x4098	; 0x804098 <ptrSPI_Slave>
     5d8:	90 91 99 40 	lds	r25, 0x4099	; 0x804099 <ptrSPI_Slave+0x1>
     5dc:	23 e0       	ldi	r18, 0x03	; 3
     5de:	fc 01       	movw	r30, r24
     5e0:	22 83       	std	Z+2, r18	; 0x02
     5e2:	0e 94 55 02 	call	0x4aa	; 0x4aa <_ZL17SPI_Transfer_Donev>
     5e6:	00 00       	nop
     5e8:	0f 90       	pop	r0
     5ea:	0f 90       	pop	r0
     5ec:	df 91       	pop	r29
     5ee:	cf 91       	pop	r28
     5f0:	ff 91       	pop	r31
     5f2:	ef 91       	pop	r30
     5f4:	bf 91       	pop	r27
     5f6:	af 91       	pop	r26
     5f8:	9f 91       	pop	r25
     5fa:	8f 91       	pop	r24
     5fc:	7f 91       	pop	r23
     5fe:	6f 91       	pop	r22
     600:	5f 91       	pop	r21
     602:	4f 91       	pop	r20
     604:	3f 91       	pop	r19
     606:	2f 91       	pop	r18
     608:	0f 90       	pop	r0
     60a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     60e:	0f 90       	pop	r0
     610:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     614:	0f 90       	pop	r0
     616:	1f 90       	pop	r1
     618:	18 95       	reti

0000061a <_ZN15SPI_SLAVE_CLASSC1Ev>:
     61a:	cf 93       	push	r28
     61c:	df 93       	push	r29
     61e:	00 d0       	rcall	.+0      	; 0x620 <_ZN15SPI_SLAVE_CLASSC1Ev+0x6>
     620:	cd b7       	in	r28, 0x3d	; 61
     622:	de b7       	in	r29, 0x3e	; 62
     624:	89 83       	std	Y+1, r24	; 0x01
     626:	9a 83       	std	Y+2, r25	; 0x02
     628:	89 81       	ldd	r24, Y+1	; 0x01
     62a:	9a 81       	ldd	r25, Y+2	; 0x02
     62c:	80 93 98 40 	sts	0x4098, r24	; 0x804098 <ptrSPI_Slave>
     630:	90 93 99 40 	sts	0x4099, r25	; 0x804099 <ptrSPI_Slave+0x1>
     634:	89 81       	ldd	r24, Y+1	; 0x01
     636:	9a 81       	ldd	r25, Y+2	; 0x02
     638:	fc 01       	movw	r30, r24
     63a:	10 82       	st	Z, r1
     63c:	89 81       	ldd	r24, Y+1	; 0x01
     63e:	9a 81       	ldd	r25, Y+2	; 0x02
     640:	28 e8       	ldi	r18, 0x88	; 136
     642:	30 e4       	ldi	r19, 0x40	; 64
     644:	fc 01       	movw	r30, r24
     646:	27 83       	std	Z+7, r18	; 0x07
     648:	30 87       	std	Z+8, r19	; 0x08
     64a:	89 81       	ldd	r24, Y+1	; 0x01
     64c:	9a 81       	ldd	r25, Y+2	; 0x02
     64e:	28 e7       	ldi	r18, 0x78	; 120
     650:	30 e4       	ldi	r19, 0x40	; 64
     652:	fc 01       	movw	r30, r24
     654:	21 87       	std	Z+9, r18	; 0x09
     656:	32 87       	std	Z+10, r19	; 0x0a
     658:	89 81       	ldd	r24, Y+1	; 0x01
     65a:	9a 81       	ldd	r25, Y+2	; 0x02
     65c:	21 e0       	ldi	r18, 0x01	; 1
     65e:	fc 01       	movw	r30, r24
     660:	26 83       	std	Z+6, r18	; 0x06
     662:	00 00       	nop
     664:	0f 90       	pop	r0
     666:	0f 90       	pop	r0
     668:	df 91       	pop	r29
     66a:	cf 91       	pop	r28
     66c:	08 95       	ret

0000066e <_ZN15SPI_SLAVE_CLASSD1Ev>:
     66e:	cf 93       	push	r28
     670:	df 93       	push	r29
     672:	00 d0       	rcall	.+0      	; 0x674 <_ZN15SPI_SLAVE_CLASSD1Ev+0x6>
     674:	cd b7       	in	r28, 0x3d	; 61
     676:	de b7       	in	r29, 0x3e	; 62
     678:	89 83       	std	Y+1, r24	; 0x01
     67a:	9a 83       	std	Y+2, r25	; 0x02
     67c:	00 00       	nop
     67e:	0f 90       	pop	r0
     680:	0f 90       	pop	r0
     682:	df 91       	pop	r29
     684:	cf 91       	pop	r28
     686:	08 95       	ret

00000688 <_ZN15SPI_SLAVE_CLASS4InitEv>:
     688:	cf 93       	push	r28
     68a:	df 93       	push	r29
     68c:	00 d0       	rcall	.+0      	; 0x68e <_ZN15SPI_SLAVE_CLASS4InitEv+0x6>
     68e:	cd b7       	in	r28, 0x3d	; 61
     690:	de b7       	in	r29, 0x3e	; 62
     692:	89 83       	std	Y+1, r24	; 0x01
     694:	9a 83       	std	Y+2, r25	; 0x02
     696:	89 81       	ldd	r24, Y+1	; 0x01
     698:	9a 81       	ldd	r25, Y+2	; 0x02
     69a:	80 93 98 40 	sts	0x4098, r24	; 0x804098 <ptrSPI_Slave>
     69e:	90 93 99 40 	sts	0x4099, r25	; 0x804099 <ptrSPI_Slave+0x1>
     6a2:	89 81       	ldd	r24, Y+1	; 0x01
     6a4:	9a 81       	ldd	r25, Y+2	; 0x02
     6a6:	0e 94 93 03 	call	0x726	; 0x726 <_ZN15SPI_SLAVE_CLASS12SPI_ZCD_initEv>
     6aa:	89 81       	ldd	r24, Y+1	; 0x01
     6ac:	9a 81       	ldd	r25, Y+2	; 0x02
     6ae:	0e 94 b1 03 	call	0x762	; 0x762 <_ZN15SPI_SLAVE_CLASS14SPI_ZCD_enableEv>
     6b2:	00 00       	nop
     6b4:	0f 90       	pop	r0
     6b6:	0f 90       	pop	r0
     6b8:	df 91       	pop	r29
     6ba:	cf 91       	pop	r28
     6bc:	08 95       	ret

000006be <_ZN15SPI_SLAVE_CLASS10Write_DataEPhh>:
     6be:	cf 93       	push	r28
     6c0:	df 93       	push	r29
     6c2:	cd b7       	in	r28, 0x3d	; 61
     6c4:	de b7       	in	r29, 0x3e	; 62
     6c6:	25 97       	sbiw	r28, 0x05	; 5
     6c8:	cd bf       	out	0x3d, r28	; 61
     6ca:	de bf       	out	0x3e, r29	; 62
     6cc:	89 83       	std	Y+1, r24	; 0x01
     6ce:	9a 83       	std	Y+2, r25	; 0x02
     6d0:	6b 83       	std	Y+3, r22	; 0x03
     6d2:	7c 83       	std	Y+4, r23	; 0x04
     6d4:	4d 83       	std	Y+5, r20	; 0x05
     6d6:	89 81       	ldd	r24, Y+1	; 0x01
     6d8:	9a 81       	ldd	r25, Y+2	; 0x02
     6da:	2b 81       	ldd	r18, Y+3	; 0x03
     6dc:	3c 81       	ldd	r19, Y+4	; 0x04
     6de:	fc 01       	movw	r30, r24
     6e0:	23 83       	std	Z+3, r18	; 0x03
     6e2:	34 83       	std	Z+4, r19	; 0x04
     6e4:	89 81       	ldd	r24, Y+1	; 0x01
     6e6:	9a 81       	ldd	r25, Y+2	; 0x02
     6e8:	2d 81       	ldd	r18, Y+5	; 0x05
     6ea:	fc 01       	movw	r30, r24
     6ec:	25 83       	std	Z+5, r18	; 0x05
     6ee:	89 81       	ldd	r24, Y+1	; 0x01
     6f0:	9a 81       	ldd	r25, Y+2	; 0x02
     6f2:	22 e0       	ldi	r18, 0x02	; 2
     6f4:	fc 01       	movw	r30, r24
     6f6:	26 83       	std	Z+6, r18	; 0x06
     6f8:	89 81       	ldd	r24, Y+1	; 0x01
     6fa:	9a 81       	ldd	r25, Y+2	; 0x02
     6fc:	22 e0       	ldi	r18, 0x02	; 2
     6fe:	fc 01       	movw	r30, r24
     700:	22 83       	std	Z+2, r18	; 0x02
     702:	80 e6       	ldi	r24, 0x60	; 96
     704:	99 e0       	ldi	r25, 0x09	; 9
     706:	29 81       	ldd	r18, Y+1	; 0x01
     708:	3a 81       	ldd	r19, Y+2	; 0x02
     70a:	f9 01       	movw	r30, r18
     70c:	23 81       	ldd	r18, Z+3	; 0x03
     70e:	34 81       	ldd	r19, Z+4	; 0x04
     710:	f9 01       	movw	r30, r18
     712:	20 81       	ld	r18, Z
     714:	fc 01       	movw	r30, r24
     716:	24 83       	std	Z+4, r18	; 0x04
     718:	00 00       	nop
     71a:	25 96       	adiw	r28, 0x05	; 5
     71c:	cd bf       	out	0x3d, r28	; 61
     71e:	de bf       	out	0x3e, r29	; 62
     720:	df 91       	pop	r29
     722:	cf 91       	pop	r28
     724:	08 95       	ret

00000726 <_ZN15SPI_SLAVE_CLASS12SPI_ZCD_initEv>:
     726:	cf 93       	push	r28
     728:	df 93       	push	r29
     72a:	00 d0       	rcall	.+0      	; 0x72c <_ZN15SPI_SLAVE_CLASS12SPI_ZCD_initEv+0x6>
     72c:	cd b7       	in	r28, 0x3d	; 61
     72e:	de b7       	in	r29, 0x3e	; 62
     730:	89 83       	std	Y+1, r24	; 0x01
     732:	9a 83       	std	Y+2, r25	; 0x02
     734:	80 e6       	ldi	r24, 0x60	; 96
     736:	99 e0       	ldi	r25, 0x09	; 9
     738:	fc 01       	movw	r30, r24
     73a:	10 82       	st	Z, r1
     73c:	80 e6       	ldi	r24, 0x60	; 96
     73e:	99 e0       	ldi	r25, 0x09	; 9
     740:	fc 01       	movw	r30, r24
     742:	11 82       	std	Z+1, r1	; 0x01
     744:	80 e6       	ldi	r24, 0x60	; 96
     746:	99 e0       	ldi	r25, 0x09	; 9
     748:	21 e0       	ldi	r18, 0x01	; 1
     74a:	fc 01       	movw	r30, r24
     74c:	22 83       	std	Z+2, r18	; 0x02
     74e:	89 81       	ldd	r24, Y+1	; 0x01
     750:	9a 81       	ldd	r25, Y+2	; 0x02
     752:	fc 01       	movw	r30, r24
     754:	12 82       	std	Z+2, r1	; 0x02
     756:	00 00       	nop
     758:	0f 90       	pop	r0
     75a:	0f 90       	pop	r0
     75c:	df 91       	pop	r29
     75e:	cf 91       	pop	r28
     760:	08 95       	ret

00000762 <_ZN15SPI_SLAVE_CLASS14SPI_ZCD_enableEv>:
     762:	cf 93       	push	r28
     764:	df 93       	push	r29
     766:	00 d0       	rcall	.+0      	; 0x768 <_ZN15SPI_SLAVE_CLASS14SPI_ZCD_enableEv+0x6>
     768:	cd b7       	in	r28, 0x3d	; 61
     76a:	de b7       	in	r29, 0x3e	; 62
     76c:	89 83       	std	Y+1, r24	; 0x01
     76e:	9a 83       	std	Y+2, r25	; 0x02
     770:	80 e6       	ldi	r24, 0x60	; 96
     772:	99 e0       	ldi	r25, 0x09	; 9
     774:	20 e6       	ldi	r18, 0x60	; 96
     776:	39 e0       	ldi	r19, 0x09	; 9
     778:	f9 01       	movw	r30, r18
     77a:	20 81       	ld	r18, Z
     77c:	21 60       	ori	r18, 0x01	; 1
     77e:	fc 01       	movw	r30, r24
     780:	20 83       	st	Z, r18
     782:	00 00       	nop
     784:	0f 90       	pop	r0
     786:	0f 90       	pop	r0
     788:	df 91       	pop	r29
     78a:	cf 91       	pop	r28
     78c:	08 95       	ret

0000078e <_Z41__static_initialization_and_destruction_0ii>:
     78e:	cf 93       	push	r28
     790:	df 93       	push	r29
     792:	00 d0       	rcall	.+0      	; 0x794 <_Z41__static_initialization_and_destruction_0ii+0x6>
     794:	00 d0       	rcall	.+0      	; 0x796 <_Z41__static_initialization_and_destruction_0ii+0x8>
     796:	cd b7       	in	r28, 0x3d	; 61
     798:	de b7       	in	r29, 0x3e	; 62
     79a:	89 83       	std	Y+1, r24	; 0x01
     79c:	9a 83       	std	Y+2, r25	; 0x02
     79e:	6b 83       	std	Y+3, r22	; 0x03
     7a0:	7c 83       	std	Y+4, r23	; 0x04
     7a2:	89 81       	ldd	r24, Y+1	; 0x01
     7a4:	9a 81       	ldd	r25, Y+2	; 0x02
     7a6:	01 97       	sbiw	r24, 0x01	; 1
     7a8:	61 f4       	brne	.+24     	; 0x7c2 <_Z41__static_initialization_and_destruction_0ii+0x34>
     7aa:	8b 81       	ldd	r24, Y+3	; 0x03
     7ac:	9c 81       	ldd	r25, Y+4	; 0x04
     7ae:	01 96       	adiw	r24, 0x01	; 1
     7b0:	41 f4       	brne	.+16     	; 0x7c2 <_Z41__static_initialization_and_destruction_0ii+0x34>
     7b2:	8a e5       	ldi	r24, 0x5A	; 90
     7b4:	90 e4       	ldi	r25, 0x40	; 64
     7b6:	0e 94 0d 03 	call	0x61a	; 0x61a <_ZN15SPI_SLAVE_CLASSC1Ev>
     7ba:	86 e6       	ldi	r24, 0x66	; 102
     7bc:	90 e4       	ldi	r25, 0x40	; 64
     7be:	0e 94 4b 05 	call	0xa96	; 0xa96 <_ZN18Zero_Cross_CounterC1Ev>
     7c2:	89 81       	ldd	r24, Y+1	; 0x01
     7c4:	9a 81       	ldd	r25, Y+2	; 0x02
     7c6:	89 2b       	or	r24, r25
     7c8:	61 f4       	brne	.+24     	; 0x7e2 <_Z41__static_initialization_and_destruction_0ii+0x54>
     7ca:	8b 81       	ldd	r24, Y+3	; 0x03
     7cc:	9c 81       	ldd	r25, Y+4	; 0x04
     7ce:	01 96       	adiw	r24, 0x01	; 1
     7d0:	41 f4       	brne	.+16     	; 0x7e2 <_Z41__static_initialization_and_destruction_0ii+0x54>
     7d2:	86 e6       	ldi	r24, 0x66	; 102
     7d4:	90 e4       	ldi	r25, 0x40	; 64
     7d6:	0e 94 65 05 	call	0xaca	; 0xaca <_ZN18Zero_Cross_CounterD1Ev>
     7da:	8a e5       	ldi	r24, 0x5A	; 90
     7dc:	90 e4       	ldi	r25, 0x40	; 64
     7de:	0e 94 37 03 	call	0x66e	; 0x66e <_ZN15SPI_SLAVE_CLASSD1Ev>
     7e2:	00 00       	nop
     7e4:	24 96       	adiw	r28, 0x04	; 4
     7e6:	cd bf       	out	0x3d, r28	; 61
     7e8:	de bf       	out	0x3e, r29	; 62
     7ea:	df 91       	pop	r29
     7ec:	cf 91       	pop	r28
     7ee:	08 95       	ret

000007f0 <_GLOBAL__sub_I_ptrSPI_Slave>:
     7f0:	cf 93       	push	r28
     7f2:	df 93       	push	r29
     7f4:	cd b7       	in	r28, 0x3d	; 61
     7f6:	de b7       	in	r29, 0x3e	; 62
     7f8:	6f ef       	ldi	r22, 0xFF	; 255
     7fa:	7f ef       	ldi	r23, 0xFF	; 255
     7fc:	81 e0       	ldi	r24, 0x01	; 1
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	0e 94 c7 03 	call	0x78e	; 0x78e <_Z41__static_initialization_and_destruction_0ii>
     804:	df 91       	pop	r29
     806:	cf 91       	pop	r28
     808:	08 95       	ret

0000080a <_GLOBAL__sub_D_ptrSPI_Slave>:
     80a:	cf 93       	push	r28
     80c:	df 93       	push	r29
     80e:	cd b7       	in	r28, 0x3d	; 61
     810:	de b7       	in	r29, 0x3e	; 62
     812:	6f ef       	ldi	r22, 0xFF	; 255
     814:	7f ef       	ldi	r23, 0xFF	; 255
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	0e 94 c7 03 	call	0x78e	; 0x78e <_Z41__static_initialization_and_destruction_0ii>
     81e:	df 91       	pop	r29
     820:	cf 91       	pop	r28
     822:	08 95       	ret

00000824 <__vector_28>:
	| 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
	| 1 << TCB_SYNCUPD_bp  /* Synchronize Update: enabled */
	| 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */

	return 0;
}
     824:	1f 92       	push	r1
     826:	0f 92       	push	r0
     828:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     82c:	0f 92       	push	r0
     82e:	11 24       	eor	r1, r1
     830:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     834:	0f 92       	push	r0
     836:	2f 93       	push	r18
     838:	8f 93       	push	r24
     83a:	9f 93       	push	r25
     83c:	ef 93       	push	r30
     83e:	ff 93       	push	r31
     840:	cf 93       	push	r28
     842:	df 93       	push	r29
     844:	cd b7       	in	r28, 0x3d	; 61
     846:	de b7       	in	r29, 0x3e	; 62
     848:	80 91 ac 40 	lds	r24, 0x40AC	; 0x8040ac <ptr_zero_cross_handler>
     84c:	90 91 ad 40 	lds	r25, 0x40AD	; 0x8040ad <ptr_zero_cross_handler+0x1>
     850:	21 e0       	ldi	r18, 0x01	; 1
     852:	fc 01       	movw	r30, r24
     854:	20 83       	st	Z, r18
     856:	80 91 ac 40 	lds	r24, 0x40AC	; 0x8040ac <ptr_zero_cross_handler>
     85a:	90 91 ad 40 	lds	r25, 0x40AD	; 0x8040ad <ptr_zero_cross_handler+0x1>
     85e:	fc 01       	movw	r30, r24
     860:	12 82       	std	Z+2, r1	; 0x02
     862:	80 ec       	ldi	r24, 0xC0	; 192
     864:	96 e0       	ldi	r25, 0x06	; 6
     866:	21 e0       	ldi	r18, 0x01	; 1
     868:	fc 01       	movw	r30, r24
     86a:	23 83       	std	Z+3, r18	; 0x03
     86c:	00 00       	nop
     86e:	df 91       	pop	r29
     870:	cf 91       	pop	r28
     872:	ff 91       	pop	r31
     874:	ef 91       	pop	r30
     876:	9f 91       	pop	r25
     878:	8f 91       	pop	r24
     87a:	2f 91       	pop	r18
     87c:	0f 90       	pop	r0
     87e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     882:	0f 90       	pop	r0
     884:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     888:	0f 90       	pop	r0
     88a:	1f 90       	pop	r1
     88c:	18 95       	reti

0000088e <__vector_52>:
     88e:	1f 92       	push	r1
     890:	0f 92       	push	r0
     892:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     896:	0f 92       	push	r0
     898:	11 24       	eor	r1, r1
     89a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     89e:	0f 92       	push	r0
     8a0:	2f 93       	push	r18
     8a2:	8f 93       	push	r24
     8a4:	9f 93       	push	r25
     8a6:	ef 93       	push	r30
     8a8:	ff 93       	push	r31
     8aa:	cf 93       	push	r28
     8ac:	df 93       	push	r29
     8ae:	cd b7       	in	r28, 0x3d	; 61
     8b0:	de b7       	in	r29, 0x3e	; 62
     8b2:	80 91 ac 40 	lds	r24, 0x40AC	; 0x8040ac <ptr_zero_cross_handler>
     8b6:	90 91 ad 40 	lds	r25, 0x40AD	; 0x8040ad <ptr_zero_cross_handler+0x1>
     8ba:	21 e0       	ldi	r18, 0x01	; 1
     8bc:	fc 01       	movw	r30, r24
     8be:	22 83       	std	Z+2, r18	; 0x02
     8c0:	80 91 ac 40 	lds	r24, 0x40AC	; 0x8040ac <ptr_zero_cross_handler>
     8c4:	90 91 ad 40 	lds	r25, 0x40AD	; 0x8040ad <ptr_zero_cross_handler+0x1>
     8c8:	fc 01       	movw	r30, r24
     8ca:	10 82       	st	Z, r1
     8cc:	88 ec       	ldi	r24, 0xC8	; 200
     8ce:	96 e0       	ldi	r25, 0x06	; 6
     8d0:	21 e0       	ldi	r18, 0x01	; 1
     8d2:	fc 01       	movw	r30, r24
     8d4:	23 83       	std	Z+3, r18	; 0x03
     8d6:	00 00       	nop
     8d8:	df 91       	pop	r29
     8da:	cf 91       	pop	r28
     8dc:	ff 91       	pop	r31
     8de:	ef 91       	pop	r30
     8e0:	9f 91       	pop	r25
     8e2:	8f 91       	pop	r24
     8e4:	2f 91       	pop	r18
     8e6:	0f 90       	pop	r0
     8e8:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     8ec:	0f 90       	pop	r0
     8ee:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     8f2:	0f 90       	pop	r0
     8f4:	1f 90       	pop	r1
     8f6:	18 95       	reti

000008f8 <__vector_14>:
     8f8:	1f 92       	push	r1
     8fa:	0f 92       	push	r0
     8fc:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     900:	0f 92       	push	r0
     902:	11 24       	eor	r1, r1
     904:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     908:	0f 92       	push	r0
     90a:	2f 93       	push	r18
     90c:	3f 93       	push	r19
     90e:	4f 93       	push	r20
     910:	5f 93       	push	r21
     912:	6f 93       	push	r22
     914:	7f 93       	push	r23
     916:	8f 93       	push	r24
     918:	9f 93       	push	r25
     91a:	af 93       	push	r26
     91c:	bf 93       	push	r27
     91e:	ef 93       	push	r30
     920:	ff 93       	push	r31
     922:	cf 93       	push	r28
     924:	df 93       	push	r29
     926:	cd b7       	in	r28, 0x3d	; 61
     928:	de b7       	in	r29, 0x3e	; 62
     92a:	80 e0       	ldi	r24, 0x00	; 0
     92c:	9b e0       	ldi	r25, 0x0B	; 11
     92e:	fc 01       	movw	r30, r24
     930:	82 85       	ldd	r24, Z+10	; 0x0a
     932:	93 85       	ldd	r25, Z+11	; 0x0b
     934:	80 93 ae 40 	sts	0x40AE, r24	; 0x8040ae <_ZL20capture_value_rising>
     938:	90 93 af 40 	sts	0x40AF, r25	; 0x8040af <_ZL20capture_value_rising+0x1>
     93c:	80 91 ac 40 	lds	r24, 0x40AC	; 0x8040ac <ptr_zero_cross_handler>
     940:	90 91 ad 40 	lds	r25, 0x40AD	; 0x8040ad <ptr_zero_cross_handler+0x1>
     944:	0e 94 d5 05 	call	0xbaa	; 0xbaa <_ZN18Zero_Cross_Counter22CaptureCounterB_RisingEv>
     948:	80 e0       	ldi	r24, 0x00	; 0
     94a:	9b e0       	ldi	r25, 0x0B	; 11
     94c:	21 e0       	ldi	r18, 0x01	; 1
     94e:	fc 01       	movw	r30, r24
     950:	26 83       	std	Z+6, r18	; 0x06
     952:	00 00       	nop
     954:	df 91       	pop	r29
     956:	cf 91       	pop	r28
     958:	ff 91       	pop	r31
     95a:	ef 91       	pop	r30
     95c:	bf 91       	pop	r27
     95e:	af 91       	pop	r26
     960:	9f 91       	pop	r25
     962:	8f 91       	pop	r24
     964:	7f 91       	pop	r23
     966:	6f 91       	pop	r22
     968:	5f 91       	pop	r21
     96a:	4f 91       	pop	r20
     96c:	3f 91       	pop	r19
     96e:	2f 91       	pop	r18
     970:	0f 90       	pop	r0
     972:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     976:	0f 90       	pop	r0
     978:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     97c:	0f 90       	pop	r0
     97e:	1f 90       	pop	r1
     980:	18 95       	reti

00000982 <__vector_15>:
     982:	1f 92       	push	r1
     984:	0f 92       	push	r0
     986:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     98a:	0f 92       	push	r0
     98c:	11 24       	eor	r1, r1
     98e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     992:	0f 92       	push	r0
     994:	2f 93       	push	r18
     996:	3f 93       	push	r19
     998:	4f 93       	push	r20
     99a:	5f 93       	push	r21
     99c:	6f 93       	push	r22
     99e:	7f 93       	push	r23
     9a0:	8f 93       	push	r24
     9a2:	9f 93       	push	r25
     9a4:	af 93       	push	r26
     9a6:	bf 93       	push	r27
     9a8:	ef 93       	push	r30
     9aa:	ff 93       	push	r31
     9ac:	cf 93       	push	r28
     9ae:	df 93       	push	r29
     9b0:	cd b7       	in	r28, 0x3d	; 61
     9b2:	de b7       	in	r29, 0x3e	; 62
     9b4:	80 e1       	ldi	r24, 0x10	; 16
     9b6:	9b e0       	ldi	r25, 0x0B	; 11
     9b8:	fc 01       	movw	r30, r24
     9ba:	82 85       	ldd	r24, Z+10	; 0x0a
     9bc:	93 85       	ldd	r25, Z+11	; 0x0b
     9be:	80 93 b0 40 	sts	0x40B0, r24	; 0x8040b0 <_ZL21capture_value_falling>
     9c2:	90 93 b1 40 	sts	0x40B1, r25	; 0x8040b1 <_ZL21capture_value_falling+0x1>
     9c6:	80 91 ac 40 	lds	r24, 0x40AC	; 0x8040ac <ptr_zero_cross_handler>
     9ca:	90 91 ad 40 	lds	r25, 0x40AD	; 0x8040ad <ptr_zero_cross_handler+0x1>
     9ce:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <_ZN18Zero_Cross_Counter23CaptureCounterB_FallingEv>
     9d2:	80 e1       	ldi	r24, 0x10	; 16
     9d4:	9b e0       	ldi	r25, 0x0B	; 11
     9d6:	21 e0       	ldi	r18, 0x01	; 1
     9d8:	fc 01       	movw	r30, r24
     9da:	26 83       	std	Z+6, r18	; 0x06
     9dc:	00 00       	nop
     9de:	df 91       	pop	r29
     9e0:	cf 91       	pop	r28
     9e2:	ff 91       	pop	r31
     9e4:	ef 91       	pop	r30
     9e6:	bf 91       	pop	r27
     9e8:	af 91       	pop	r26
     9ea:	9f 91       	pop	r25
     9ec:	8f 91       	pop	r24
     9ee:	7f 91       	pop	r23
     9f0:	6f 91       	pop	r22
     9f2:	5f 91       	pop	r21
     9f4:	4f 91       	pop	r20
     9f6:	3f 91       	pop	r19
     9f8:	2f 91       	pop	r18
     9fa:	0f 90       	pop	r0
     9fc:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     a00:	0f 90       	pop	r0
     a02:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     a06:	0f 90       	pop	r0
     a08:	1f 90       	pop	r1
     a0a:	18 95       	reti

00000a0c <__vector_17>:
     a0c:	1f 92       	push	r1
     a0e:	0f 92       	push	r0
     a10:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     a14:	0f 92       	push	r0
     a16:	11 24       	eor	r1, r1
     a18:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     a1c:	0f 92       	push	r0
     a1e:	2f 93       	push	r18
     a20:	3f 93       	push	r19
     a22:	4f 93       	push	r20
     a24:	5f 93       	push	r21
     a26:	6f 93       	push	r22
     a28:	7f 93       	push	r23
     a2a:	8f 93       	push	r24
     a2c:	9f 93       	push	r25
     a2e:	af 93       	push	r26
     a30:	bf 93       	push	r27
     a32:	ef 93       	push	r30
     a34:	ff 93       	push	r31
     a36:	cf 93       	push	r28
     a38:	df 93       	push	r29
     a3a:	cd b7       	in	r28, 0x3d	; 61
     a3c:	de b7       	in	r29, 0x3e	; 62
     a3e:	82 ea       	ldi	r24, 0xA2	; 162
     a40:	9b e0       	ldi	r25, 0x0B	; 11
     a42:	fc 01       	movw	r30, r24
     a44:	80 81       	ld	r24, Z
     a46:	91 81       	ldd	r25, Z+1	; 0x01
     a48:	80 93 b2 40 	sts	0x40B2, r24	; 0x8040b2 <_ZL18capture_value_tc_a>
     a4c:	90 93 b3 40 	sts	0x40B3, r25	; 0x8040b3 <_ZL18capture_value_tc_a+0x1>
     a50:	80 91 ac 40 	lds	r24, 0x40AC	; 0x8040ac <ptr_zero_cross_handler>
     a54:	90 91 ad 40 	lds	r25, 0x40AD	; 0x8040ad <ptr_zero_cross_handler+0x1>
     a58:	0e 94 7f 05 	call	0xafe	; 0xafe <_ZN18Zero_Cross_Counter15CaptureCounterCEv>
     a5c:	80 e8       	ldi	r24, 0x80	; 128
     a5e:	9b e0       	ldi	r25, 0x0B	; 11
     a60:	2c e0       	ldi	r18, 0x0C	; 12
     a62:	fc 01       	movw	r30, r24
     a64:	25 87       	std	Z+13, r18	; 0x0d
     a66:	00 00       	nop
     a68:	df 91       	pop	r29
     a6a:	cf 91       	pop	r28
     a6c:	ff 91       	pop	r31
     a6e:	ef 91       	pop	r30
     a70:	bf 91       	pop	r27
     a72:	af 91       	pop	r26
     a74:	9f 91       	pop	r25
     a76:	8f 91       	pop	r24
     a78:	7f 91       	pop	r23
     a7a:	6f 91       	pop	r22
     a7c:	5f 91       	pop	r21
     a7e:	4f 91       	pop	r20
     a80:	3f 91       	pop	r19
     a82:	2f 91       	pop	r18
     a84:	0f 90       	pop	r0
     a86:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     a8a:	0f 90       	pop	r0
     a8c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     a90:	0f 90       	pop	r0
     a92:	1f 90       	pop	r1
     a94:	18 95       	reti

00000a96 <_ZN18Zero_Cross_CounterC1Ev>:
     a96:	cf 93       	push	r28
     a98:	df 93       	push	r29
     a9a:	00 d0       	rcall	.+0      	; 0xa9c <_ZN18Zero_Cross_CounterC1Ev+0x6>
     a9c:	cd b7       	in	r28, 0x3d	; 61
     a9e:	de b7       	in	r29, 0x3e	; 62
     aa0:	89 83       	std	Y+1, r24	; 0x01
     aa2:	9a 83       	std	Y+2, r25	; 0x02
     aa4:	89 81       	ldd	r24, Y+1	; 0x01
     aa6:	9a 81       	ldd	r25, Y+2	; 0x02
     aa8:	80 93 ac 40 	sts	0x40AC, r24	; 0x8040ac <ptr_zero_cross_handler>
     aac:	90 93 ad 40 	sts	0x40AD, r25	; 0x8040ad <ptr_zero_cross_handler+0x1>
     ab0:	89 81       	ldd	r24, Y+1	; 0x01
     ab2:	9a 81       	ldd	r25, Y+2	; 0x02
     ab4:	24 eb       	ldi	r18, 0xB4	; 180
     ab6:	30 e4       	ldi	r19, 0x40	; 64
     ab8:	fc 01       	movw	r30, r24
     aba:	27 83       	std	Z+7, r18	; 0x07
     abc:	30 87       	std	Z+8, r19	; 0x08
     abe:	00 00       	nop
     ac0:	0f 90       	pop	r0
     ac2:	0f 90       	pop	r0
     ac4:	df 91       	pop	r29
     ac6:	cf 91       	pop	r28
     ac8:	08 95       	ret

00000aca <_ZN18Zero_Cross_CounterD1Ev>:
     aca:	cf 93       	push	r28
     acc:	df 93       	push	r29
     ace:	00 d0       	rcall	.+0      	; 0xad0 <_ZN18Zero_Cross_CounterD1Ev+0x6>
     ad0:	cd b7       	in	r28, 0x3d	; 61
     ad2:	de b7       	in	r29, 0x3e	; 62
     ad4:	89 83       	std	Y+1, r24	; 0x01
     ad6:	9a 83       	std	Y+2, r25	; 0x02
     ad8:	00 00       	nop
     ada:	0f 90       	pop	r0
     adc:	0f 90       	pop	r0
     ade:	df 91       	pop	r29
     ae0:	cf 91       	pop	r28
     ae2:	08 95       	ret

00000ae4 <_ZN18Zero_Cross_Counter4InitEv>:
     ae4:	cf 93       	push	r28
     ae6:	df 93       	push	r29
     ae8:	00 d0       	rcall	.+0      	; 0xaea <_ZN18Zero_Cross_Counter4InitEv+0x6>
     aea:	cd b7       	in	r28, 0x3d	; 61
     aec:	de b7       	in	r29, 0x3e	; 62
     aee:	89 83       	std	Y+1, r24	; 0x01
     af0:	9a 83       	std	Y+2, r25	; 0x02
     af2:	81 e0       	ldi	r24, 0x01	; 1
     af4:	0f 90       	pop	r0
     af6:	0f 90       	pop	r0
     af8:	df 91       	pop	r29
     afa:	cf 91       	pop	r28
     afc:	08 95       	ret

00000afe <_ZN18Zero_Cross_Counter15CaptureCounterCEv>:

void Zero_Cross_Counter::CaptureCounterC(void){
     afe:	cf 93       	push	r28
     b00:	df 93       	push	r29
     b02:	00 d0       	rcall	.+0      	; 0xb04 <_ZN18Zero_Cross_Counter15CaptureCounterCEv+0x6>
     b04:	cd b7       	in	r28, 0x3d	; 61
     b06:	de b7       	in	r29, 0x3e	; 62
     b08:	89 83       	std	Y+1, r24	; 0x01
     b0a:	9a 83       	std	Y+2, r25	; 0x02
	if (toogle_bit)
     b0c:	89 81       	ldd	r24, Y+1	; 0x01
     b0e:	9a 81       	ldd	r25, Y+2	; 0x02
     b10:	fc 01       	movw	r30, r24
     b12:	81 89       	ldd	r24, Z+17	; 0x11
     b14:	88 23       	and	r24, r24
     b16:	99 f0       	breq	.+38     	; 0xb3e <_ZN18Zero_Cross_Counter15CaptureCounterCEv+0x40>
	{
	//	TCD0.CTRLE=TCD_SCAPTUREA_bm;
	//	while ((TCD0.STATUS & TCD_ENRDY_bm) == 0)
	//	; // Wait for Enable Ready to be high.
		capture_timer_tc_a=TCD0.CAPTUREA;
     b18:	80 e8       	ldi	r24, 0x80	; 128
     b1a:	9b e0       	ldi	r25, 0x0B	; 11
     b1c:	fc 01       	movw	r30, r24
     b1e:	22 a1       	ldd	r18, Z+34	; 0x22
     b20:	33 a1       	ldd	r19, Z+35	; 0x23
     b22:	89 81       	ldd	r24, Y+1	; 0x01
     b24:	9a 81       	ldd	r25, Y+2	; 0x02
     b26:	fc 01       	movw	r30, r24
     b28:	25 87       	std	Z+13, r18	; 0x0d
     b2a:	36 87       	std	Z+14, r19	; 0x0e
		if (capture_timer_tc_a>0)
     b2c:	89 81       	ldd	r24, Y+1	; 0x01
     b2e:	9a 81       	ldd	r25, Y+2	; 0x02
     b30:	fc 01       	movw	r30, r24
     b32:	85 85       	ldd	r24, Z+13	; 0x0d
     b34:	96 85       	ldd	r25, Z+14	; 0x0e
     b36:	89 2b       	or	r24, r25
     b38:	f1 f0       	breq	.+60     	; 0xb76 <_ZN18Zero_Cross_Counter15CaptureCounterCEv+0x78>
		{
			asm("nop");
     b3a:	00 00       	nop
     b3c:	1c c0       	rjmp	.+56     	; 0xb76 <_ZN18Zero_Cross_Counter15CaptureCounterCEv+0x78>
	else
	{
	//		TCD0.CTRLE=TCD_SCAPTUREB_bm;
	//		while ((TCD0.STATUS & TCD_ENRDY_bm) == 0)
	//		; // Wait for Enable Ready to be high.
		capture_timer_tc_b=TCD0.CAPTUREA;
     b3e:	80 e8       	ldi	r24, 0x80	; 128
     b40:	9b e0       	ldi	r25, 0x0B	; 11
     b42:	fc 01       	movw	r30, r24
     b44:	22 a1       	ldd	r18, Z+34	; 0x22
     b46:	33 a1       	ldd	r19, Z+35	; 0x23
     b48:	89 81       	ldd	r24, Y+1	; 0x01
     b4a:	9a 81       	ldd	r25, Y+2	; 0x02
     b4c:	fc 01       	movw	r30, r24
     b4e:	27 87       	std	Z+15, r18	; 0x0f
     b50:	30 8b       	std	Z+16, r19	; 0x10
				capture_timer_tc_b=TCD0.CAPTUREA;
     b52:	80 e8       	ldi	r24, 0x80	; 128
     b54:	9b e0       	ldi	r25, 0x0B	; 11
     b56:	fc 01       	movw	r30, r24
     b58:	22 a1       	ldd	r18, Z+34	; 0x22
     b5a:	33 a1       	ldd	r19, Z+35	; 0x23
     b5c:	89 81       	ldd	r24, Y+1	; 0x01
     b5e:	9a 81       	ldd	r25, Y+2	; 0x02
     b60:	fc 01       	movw	r30, r24
     b62:	27 87       	std	Z+15, r18	; 0x0f
     b64:	30 8b       	std	Z+16, r19	; 0x10
				if (capture_timer_tc_b>0)
     b66:	89 81       	ldd	r24, Y+1	; 0x01
     b68:	9a 81       	ldd	r25, Y+2	; 0x02
     b6a:	fc 01       	movw	r30, r24
     b6c:	87 85       	ldd	r24, Z+15	; 0x0f
     b6e:	90 89       	ldd	r25, Z+16	; 0x10
     b70:	89 2b       	or	r24, r25
     b72:	09 f0       	breq	.+2      	; 0xb76 <_ZN18Zero_Cross_Counter15CaptureCounterCEv+0x78>
				{
					asm("nop");
     b74:	00 00       	nop
				}
		
	}
	TCD0.CTRLE=TCD_RESTART_bm;
     b76:	80 e8       	ldi	r24, 0x80	; 128
     b78:	9b e0       	ldi	r25, 0x0B	; 11
     b7a:	24 e0       	ldi	r18, 0x04	; 4
     b7c:	fc 01       	movw	r30, r24
     b7e:	24 83       	std	Z+4, r18	; 0x04
	toogle_bit=!toogle_bit;
     b80:	89 81       	ldd	r24, Y+1	; 0x01
     b82:	9a 81       	ldd	r25, Y+2	; 0x02
     b84:	fc 01       	movw	r30, r24
     b86:	91 89       	ldd	r25, Z+17	; 0x11
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	29 2f       	mov	r18, r25
     b8c:	28 27       	eor	r18, r24
     b8e:	89 81       	ldd	r24, Y+1	; 0x01
     b90:	9a 81       	ldd	r25, Y+2	; 0x02
     b92:	fc 01       	movw	r30, r24
     b94:	21 8b       	std	Z+17, r18	; 0x11
	leading_edge=false;
     b96:	89 81       	ldd	r24, Y+1	; 0x01
     b98:	9a 81       	ldd	r25, Y+2	; 0x02
     b9a:	fc 01       	movw	r30, r24
     b9c:	10 82       	st	Z, r1
}
     b9e:	00 00       	nop
     ba0:	0f 90       	pop	r0
     ba2:	0f 90       	pop	r0
     ba4:	df 91       	pop	r29
     ba6:	cf 91       	pop	r28
     ba8:	08 95       	ret

00000baa <_ZN18Zero_Cross_Counter22CaptureCounterB_RisingEv>:
void Zero_Cross_Counter::CaptureCounterB_Rising(void){
     baa:	cf 93       	push	r28
     bac:	df 93       	push	r29
     bae:	00 d0       	rcall	.+0      	; 0xbb0 <_ZN18Zero_Cross_Counter22CaptureCounterB_RisingEv+0x6>
     bb0:	cd b7       	in	r28, 0x3d	; 61
     bb2:	de b7       	in	r29, 0x3e	; 62
     bb4:	89 83       	std	Y+1, r24	; 0x01
     bb6:	9a 83       	std	Y+2, r25	; 0x02
	capture_timer_rise= capture_value_rising;
     bb8:	20 91 ae 40 	lds	r18, 0x40AE	; 0x8040ae <_ZL20capture_value_rising>
     bbc:	30 91 af 40 	lds	r19, 0x40AF	; 0x8040af <_ZL20capture_value_rising+0x1>
     bc0:	89 81       	ldd	r24, Y+1	; 0x01
     bc2:	9a 81       	ldd	r25, Y+2	; 0x02
     bc4:	fc 01       	movw	r30, r24
     bc6:	25 83       	std	Z+5, r18	; 0x05
     bc8:	36 83       	std	Z+6, r19	; 0x06
}
     bca:	00 00       	nop
     bcc:	0f 90       	pop	r0
     bce:	0f 90       	pop	r0
     bd0:	df 91       	pop	r29
     bd2:	cf 91       	pop	r28
     bd4:	08 95       	ret

00000bd6 <_ZN18Zero_Cross_Counter23CaptureCounterB_FallingEv>:
void Zero_Cross_Counter::CaptureCounterB_Falling(void){
     bd6:	cf 93       	push	r28
     bd8:	df 93       	push	r29
     bda:	00 d0       	rcall	.+0      	; 0xbdc <_ZN18Zero_Cross_Counter23CaptureCounterB_FallingEv+0x6>
     bdc:	cd b7       	in	r28, 0x3d	; 61
     bde:	de b7       	in	r29, 0x3e	; 62
     be0:	89 83       	std	Y+1, r24	; 0x01
     be2:	9a 83       	std	Y+2, r25	; 0x02
	capture_timer_fall= capture_value_falling;
     be4:	20 91 b0 40 	lds	r18, 0x40B0	; 0x8040b0 <_ZL21capture_value_falling>
     be8:	30 91 b1 40 	lds	r19, 0x40B1	; 0x8040b1 <_ZL21capture_value_falling+0x1>
     bec:	89 81       	ldd	r24, Y+1	; 0x01
     bee:	9a 81       	ldd	r25, Y+2	; 0x02
     bf0:	fc 01       	movw	r30, r24
     bf2:	23 83       	std	Z+3, r18	; 0x03
     bf4:	34 83       	std	Z+4, r19	; 0x04
}
     bf6:	00 00       	nop
     bf8:	0f 90       	pop	r0
     bfa:	0f 90       	pop	r0
     bfc:	df 91       	pop	r29
     bfe:	cf 91       	pop	r28
     c00:	08 95       	ret

00000c02 <_ZN18Zero_Cross_Counter18Set_Last_FrequencyEm>:

void Zero_Cross_Counter::Set_Last_Frequency(uint32_t lf){
     c02:	cf 93       	push	r28
     c04:	df 93       	push	r29
     c06:	cd b7       	in	r28, 0x3d	; 61
     c08:	de b7       	in	r29, 0x3e	; 62
     c0a:	2c 97       	sbiw	r28, 0x0c	; 12
     c0c:	cd bf       	out	0x3d, r28	; 61
     c0e:	de bf       	out	0x3e, r29	; 62
     c10:	8f 83       	std	Y+7, r24	; 0x07
     c12:	98 87       	std	Y+8, r25	; 0x08
     c14:	49 87       	std	Y+9, r20	; 0x09
     c16:	5a 87       	std	Y+10, r21	; 0x0a
     c18:	6b 87       	std	Y+11, r22	; 0x0b
     c1a:	7c 87       	std	Y+12, r23	; 0x0c
	uint32_t local_value;
	frequency_out=lf;
     c1c:	2f 81       	ldd	r18, Y+7	; 0x07
     c1e:	38 85       	ldd	r19, Y+8	; 0x08
     c20:	89 85       	ldd	r24, Y+9	; 0x09
     c22:	9a 85       	ldd	r25, Y+10	; 0x0a
     c24:	ab 85       	ldd	r26, Y+11	; 0x0b
     c26:	bc 85       	ldd	r27, Y+12	; 0x0c
     c28:	f9 01       	movw	r30, r18
     c2a:	81 87       	std	Z+9, r24	; 0x09
     c2c:	92 87       	std	Z+10, r25	; 0x0a
     c2e:	a3 87       	std	Z+11, r26	; 0x0b
     c30:	b4 87       	std	Z+12, r27	; 0x0c
	for (int i = 0; i < 4; i++)
     c32:	19 82       	std	Y+1, r1	; 0x01
     c34:	1a 82       	std	Y+2, r1	; 0x02
     c36:	89 81       	ldd	r24, Y+1	; 0x01
     c38:	9a 81       	ldd	r25, Y+2	; 0x02
     c3a:	04 97       	sbiw	r24, 0x04	; 4
     c3c:	9c f5       	brge	.+102    	; 0xca4 <_ZN18Zero_Cross_Counter18Set_Last_FrequencyEm+0xa2>
	{
		local_value=(lf>>((3-i)*8))&0xff;
     c3e:	23 e0       	ldi	r18, 0x03	; 3
     c40:	30 e0       	ldi	r19, 0x00	; 0
     c42:	89 81       	ldd	r24, Y+1	; 0x01
     c44:	9a 81       	ldd	r25, Y+2	; 0x02
     c46:	a9 01       	movw	r20, r18
     c48:	48 1b       	sub	r20, r24
     c4a:	59 0b       	sbc	r21, r25
     c4c:	ca 01       	movw	r24, r20
     c4e:	9c 01       	movw	r18, r24
     c50:	22 0f       	add	r18, r18
     c52:	33 1f       	adc	r19, r19
     c54:	22 0f       	add	r18, r18
     c56:	33 1f       	adc	r19, r19
     c58:	22 0f       	add	r18, r18
     c5a:	33 1f       	adc	r19, r19
     c5c:	89 85       	ldd	r24, Y+9	; 0x09
     c5e:	9a 85       	ldd	r25, Y+10	; 0x0a
     c60:	ab 85       	ldd	r26, Y+11	; 0x0b
     c62:	bc 85       	ldd	r27, Y+12	; 0x0c
     c64:	04 c0       	rjmp	.+8      	; 0xc6e <_ZN18Zero_Cross_Counter18Set_Last_FrequencyEm+0x6c>
     c66:	b6 95       	lsr	r27
     c68:	a7 95       	ror	r26
     c6a:	97 95       	ror	r25
     c6c:	87 95       	ror	r24
     c6e:	2a 95       	dec	r18
     c70:	d2 f7       	brpl	.-12     	; 0xc66 <_ZN18Zero_Cross_Counter18Set_Last_FrequencyEm+0x64>
     c72:	99 27       	eor	r25, r25
     c74:	aa 27       	eor	r26, r26
     c76:	bb 27       	eor	r27, r27
     c78:	8b 83       	std	Y+3, r24	; 0x03
     c7a:	9c 83       	std	Y+4, r25	; 0x04
     c7c:	ad 83       	std	Y+5, r26	; 0x05
     c7e:	be 83       	std	Y+6, r27	; 0x06
		last_frequency[i]=((uint8_t)local_value&0xff);
     c80:	8f 81       	ldd	r24, Y+7	; 0x07
     c82:	98 85       	ldd	r25, Y+8	; 0x08
     c84:	fc 01       	movw	r30, r24
     c86:	27 81       	ldd	r18, Z+7	; 0x07
     c88:	30 85       	ldd	r19, Z+8	; 0x08
     c8a:	89 81       	ldd	r24, Y+1	; 0x01
     c8c:	9a 81       	ldd	r25, Y+2	; 0x02
     c8e:	82 0f       	add	r24, r18
     c90:	93 1f       	adc	r25, r19
     c92:	2b 81       	ldd	r18, Y+3	; 0x03
     c94:	fc 01       	movw	r30, r24
     c96:	20 83       	st	Z, r18
}

void Zero_Cross_Counter::Set_Last_Frequency(uint32_t lf){
	uint32_t local_value;
	frequency_out=lf;
	for (int i = 0; i < 4; i++)
     c98:	89 81       	ldd	r24, Y+1	; 0x01
     c9a:	9a 81       	ldd	r25, Y+2	; 0x02
     c9c:	01 96       	adiw	r24, 0x01	; 1
     c9e:	89 83       	std	Y+1, r24	; 0x01
     ca0:	9a 83       	std	Y+2, r25	; 0x02
     ca2:	c9 cf       	rjmp	.-110    	; 0xc36 <_ZN18Zero_Cross_Counter18Set_Last_FrequencyEm+0x34>
		local_value=(lf>>((3-i)*8))&0xff;
		last_frequency[i]=((uint8_t)local_value&0xff);
	}
	//memcpy((void*)last_frequency,(void*)&lf,4);
	
     ca4:	00 00       	nop
     ca6:	2c 96       	adiw	r28, 0x0c	; 12
     ca8:	cd bf       	out	0x3d, r28	; 61
     caa:	de bf       	out	0x3e, r29	; 62
     cac:	df 91       	pop	r29
     cae:	cf 91       	pop	r28
     cb0:	08 95       	ret

00000cb2 <_Z41__static_initialization_and_destruction_0ii>:
     cb2:	cf 93       	push	r28
     cb4:	df 93       	push	r29
     cb6:	00 d0       	rcall	.+0      	; 0xcb8 <_Z41__static_initialization_and_destruction_0ii+0x6>
     cb8:	00 d0       	rcall	.+0      	; 0xcba <_Z41__static_initialization_and_destruction_0ii+0x8>
     cba:	cd b7       	in	r28, 0x3d	; 61
     cbc:	de b7       	in	r29, 0x3e	; 62
     cbe:	89 83       	std	Y+1, r24	; 0x01
     cc0:	9a 83       	std	Y+2, r25	; 0x02
     cc2:	6b 83       	std	Y+3, r22	; 0x03
     cc4:	7c 83       	std	Y+4, r23	; 0x04
     cc6:	89 81       	ldd	r24, Y+1	; 0x01
     cc8:	9a 81       	ldd	r25, Y+2	; 0x02
     cca:	01 97       	sbiw	r24, 0x01	; 1
     ccc:	41 f4       	brne	.+16     	; 0xcde <_Z41__static_initialization_and_destruction_0ii+0x2c>
     cce:	8b 81       	ldd	r24, Y+3	; 0x03
     cd0:	9c 81       	ldd	r25, Y+4	; 0x04
     cd2:	01 96       	adiw	r24, 0x01	; 1
     cd4:	21 f4       	brne	.+8      	; 0xcde <_Z41__static_initialization_and_destruction_0ii+0x2c>
     cd6:	8a e9       	ldi	r24, 0x9A	; 154
     cd8:	90 e4       	ldi	r25, 0x40	; 64
     cda:	0e 94 4b 05 	call	0xa96	; 0xa96 <_ZN18Zero_Cross_CounterC1Ev>
     cde:	89 81       	ldd	r24, Y+1	; 0x01
     ce0:	9a 81       	ldd	r25, Y+2	; 0x02
     ce2:	89 2b       	or	r24, r25
     ce4:	41 f4       	brne	.+16     	; 0xcf6 <_Z41__static_initialization_and_destruction_0ii+0x44>
     ce6:	8b 81       	ldd	r24, Y+3	; 0x03
     ce8:	9c 81       	ldd	r25, Y+4	; 0x04
     cea:	01 96       	adiw	r24, 0x01	; 1
     cec:	21 f4       	brne	.+8      	; 0xcf6 <_Z41__static_initialization_and_destruction_0ii+0x44>
     cee:	8a e9       	ldi	r24, 0x9A	; 154
     cf0:	90 e4       	ldi	r25, 0x40	; 64
     cf2:	0e 94 65 05 	call	0xaca	; 0xaca <_ZN18Zero_Cross_CounterD1Ev>
     cf6:	00 00       	nop
     cf8:	24 96       	adiw	r28, 0x04	; 4
     cfa:	cd bf       	out	0x3d, r28	; 61
     cfc:	de bf       	out	0x3e, r29	; 62
     cfe:	df 91       	pop	r29
     d00:	cf 91       	pop	r28
     d02:	08 95       	ret

00000d04 <_GLOBAL__sub_I_ptr_zero_cross_handler>:
     d04:	cf 93       	push	r28
     d06:	df 93       	push	r29
     d08:	cd b7       	in	r28, 0x3d	; 61
     d0a:	de b7       	in	r29, 0x3e	; 62
     d0c:	6f ef       	ldi	r22, 0xFF	; 255
     d0e:	7f ef       	ldi	r23, 0xFF	; 255
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	0e 94 59 06 	call	0xcb2	; 0xcb2 <_Z41__static_initialization_and_destruction_0ii>
     d18:	df 91       	pop	r29
     d1a:	cf 91       	pop	r28
     d1c:	08 95       	ret

00000d1e <_GLOBAL__sub_D_ptr_zero_cross_handler>:
     d1e:	cf 93       	push	r28
     d20:	df 93       	push	r29
     d22:	cd b7       	in	r28, 0x3d	; 61
     d24:	de b7       	in	r29, 0x3e	; 62
     d26:	6f ef       	ldi	r22, 0xFF	; 255
     d28:	7f ef       	ldi	r23, 0xFF	; 255
     d2a:	80 e0       	ldi	r24, 0x00	; 0
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	0e 94 59 06 	call	0xcb2	; 0xcb2 <_Z41__static_initialization_and_destruction_0ii>
     d32:	df 91       	pop	r29
     d34:	cf 91       	pop	r28
     d36:	08 95       	ret

00000d38 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
     d38:	0e 94 74 07 	call	0xee8	; 0xee8 <system_init>
     d3c:	08 95       	ret

00000d3e <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
     d3e:	80 e0       	ldi	r24, 0x00	; 0
     d40:	08 c0       	rjmp	.+16     	; 0xd52 <mcu_init+0x14>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     d42:	e8 2f       	mov	r30, r24
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	e0 5f       	subi	r30, 0xF0	; 240
     d48:	fb 4f       	sbci	r31, 0xFB	; 251
     d4a:	90 81       	ld	r25, Z
     d4c:	98 60       	ori	r25, 0x08	; 8
     d4e:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
     d50:	8f 5f       	subi	r24, 0xFF	; 255
     d52:	88 30       	cpi	r24, 0x08	; 8
     d54:	b0 f3       	brcs	.-20     	; 0xd42 <mcu_init+0x4>
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	08 c0       	rjmp	.+16     	; 0xd6a <mcu_init+0x2c>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     d5a:	e8 2f       	mov	r30, r24
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	e0 5d       	subi	r30, 0xD0	; 208
     d60:	fb 4f       	sbci	r31, 0xFB	; 251
     d62:	90 81       	ld	r25, Z
     d64:	98 60       	ori	r25, 0x08	; 8
     d66:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     d68:	8f 5f       	subi	r24, 0xFF	; 255
     d6a:	88 30       	cpi	r24, 0x08	; 8
     d6c:	b0 f3       	brcs	.-20     	; 0xd5a <mcu_init+0x1c>
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	08 c0       	rjmp	.+16     	; 0xd82 <mcu_init+0x44>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     d72:	e8 2f       	mov	r30, r24
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	e0 5b       	subi	r30, 0xB0	; 176
     d78:	fb 4f       	sbci	r31, 0xFB	; 251
     d7a:	90 81       	ld	r25, Z
     d7c:	98 60       	ori	r25, 0x08	; 8
     d7e:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     d80:	8f 5f       	subi	r24, 0xFF	; 255
     d82:	88 30       	cpi	r24, 0x08	; 8
     d84:	b0 f3       	brcs	.-20     	; 0xd72 <mcu_init+0x34>
     d86:	80 e0       	ldi	r24, 0x00	; 0
     d88:	08 c0       	rjmp	.+16     	; 0xd9a <mcu_init+0x5c>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     d8a:	e8 2f       	mov	r30, r24
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	e0 59       	subi	r30, 0x90	; 144
     d90:	fb 4f       	sbci	r31, 0xFB	; 251
     d92:	90 81       	ld	r25, Z
     d94:	98 60       	ori	r25, 0x08	; 8
     d96:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     d98:	8f 5f       	subi	r24, 0xFF	; 255
     d9a:	88 30       	cpi	r24, 0x08	; 8
     d9c:	b0 f3       	brcs	.-20     	; 0xd8a <mcu_init+0x4c>
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	08 c0       	rjmp	.+16     	; 0xdb2 <mcu_init+0x74>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     da2:	e8 2f       	mov	r30, r24
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	e0 57       	subi	r30, 0x70	; 112
     da8:	fb 4f       	sbci	r31, 0xFB	; 251
     daa:	90 81       	ld	r25, Z
     dac:	98 60       	ori	r25, 0x08	; 8
     dae:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     db0:	8f 5f       	subi	r24, 0xFF	; 255
     db2:	88 30       	cpi	r24, 0x08	; 8
     db4:	b0 f3       	brcs	.-20     	; 0xda2 <mcu_init+0x64>
     db6:	80 e0       	ldi	r24, 0x00	; 0
     db8:	08 c0       	rjmp	.+16     	; 0xdca <mcu_init+0x8c>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     dba:	e8 2f       	mov	r30, r24
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	e0 55       	subi	r30, 0x50	; 80
     dc0:	fb 4f       	sbci	r31, 0xFB	; 251
     dc2:	90 81       	ld	r25, Z
     dc4:	98 60       	ori	r25, 0x08	; 8
     dc6:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     dc8:	8f 5f       	subi	r24, 0xFF	; 255
     dca:	88 30       	cpi	r24, 0x08	; 8
     dcc:	b0 f3       	brcs	.-20     	; 0xdba <mcu_init+0x7c>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
     dce:	08 95       	ret

00000dd0 <OPERATIONAL_AMPLIFIER_0_initialization>:
 */
static inline void PORTD_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     dd0:	e7 e7       	ldi	r30, 0x77	; 119
     dd2:	f4 e0       	ldi	r31, 0x04	; 4
     dd4:	80 81       	ld	r24, Z
     dd6:	88 7f       	andi	r24, 0xF8	; 248
     dd8:	84 60       	ori	r24, 0x04	; 4
     dda:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     ddc:	80 81       	ld	r24, Z
     dde:	87 7f       	andi	r24, 0xF7	; 247
     de0:	80 83       	st	Z, r24
 */
static inline void PORTD_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     de2:	e5 e7       	ldi	r30, 0x75	; 117
     de4:	f4 e0       	ldi	r31, 0x04	; 4
     de6:	80 81       	ld	r24, Z
     de8:	88 7f       	andi	r24, 0xF8	; 248
     dea:	84 60       	ori	r24, 0x04	; 4
     dec:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     dee:	80 81       	ld	r24, Z
     df0:	87 7f       	andi	r24, 0xF7	; 247
     df2:	80 83       	st	Z, r24
	// Disable digital input buffer
	PD5_set_isc(PORT_ISC_INPUT_DISABLE_gc);
	// Disable pull-up resistor
	PD5_set_pull_mode(PORT_PULL_OFF);

	OPERATIONAL_AMPLIFIER_0_init();
     df4:	0e 94 b0 07 	call	0xf60	; 0xf60 <OPERATIONAL_AMPLIFIER_0_init>
     df8:	08 95       	ret

00000dfa <USART_0_initialization>:
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     dfa:	84 b1       	in	r24, 0x04	; 4
     dfc:	8d 7f       	andi	r24, 0xFD	; 253
     dfe:	84 b9       	out	0x04, r24	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     e00:	e1 e3       	ldi	r30, 0x31	; 49
     e02:	f4 e0       	ldi	r31, 0x04	; 4
     e04:	80 81       	ld	r24, Z
     e06:	87 7f       	andi	r24, 0xF7	; 247
     e08:	80 83       	st	Z, r24
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     e0a:	85 b1       	in	r24, 0x05	; 5
     e0c:	8e 7f       	andi	r24, 0xFE	; 254
     e0e:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     e10:	84 b1       	in	r24, 0x04	; 4
     e12:	81 60       	ori	r24, 0x01	; 1
     e14:	84 b9       	out	0x04, r24	; 4
	    // <true"> High
	    false);

	PB0_set_dir(PORT_DIR_OUT);

	USART_0_init();
     e16:	0e 94 15 08 	call	0x102a	; 0x102a <USART_0_init>
     e1a:	08 95       	ret

00000e1c <EVENT_SYSTEM_0_initialization>:
}

void EVENT_SYSTEM_0_initialization(void)
{

	EVENT_SYSTEM_0_init();
     e1c:	0e 94 9d 07 	call	0xf3a	; 0xf3a <EVENT_SYSTEM_0_init>
     e20:	08 95       	ret

00000e22 <ZCD_RISING_initialization>:
 */
static inline void PORTD_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     e22:	e1 e7       	ldi	r30, 0x71	; 113
     e24:	f4 e0       	ldi	r31, 0x04	; 4
     e26:	80 81       	ld	r24, Z
     e28:	88 7f       	andi	r24, 0xF8	; 248
     e2a:	84 60       	ori	r24, 0x04	; 4
     e2c:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     e2e:	80 81       	ld	r24, Z
     e30:	87 7f       	andi	r24, 0xF7	; 247
     e32:	80 83       	st	Z, r24
	// Disable digital input buffer
	PD1_set_isc(PORT_ISC_INPUT_DISABLE_gc);
	// Disable pull-up resistor
	PD1_set_pull_mode(PORT_PULL_OFF);

	ZCD_RISING_init();
     e34:	0e 94 36 08 	call	0x106c	; 0x106c <ZCD_RISING_init>
     e38:	08 95       	ret

00000e3a <ZCD_FALLING_initialization>:
 */
static inline void PORTE_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTE + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     e3a:	e3 e9       	ldi	r30, 0x93	; 147
     e3c:	f4 e0       	ldi	r31, 0x04	; 4
     e3e:	80 81       	ld	r24, Z
     e40:	88 7f       	andi	r24, 0xF8	; 248
     e42:	84 60       	ori	r24, 0x04	; 4
     e44:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTE + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     e46:	80 81       	ld	r24, Z
     e48:	87 7f       	andi	r24, 0xF7	; 247
     e4a:	80 83       	st	Z, r24
	// Disable digital input buffer
	PE3_set_isc(PORT_ISC_INPUT_DISABLE_gc);
	// Disable pull-up resistor
	PE3_set_pull_mode(PORT_PULL_OFF);

	ZCD_FALLING_init();
     e4c:	0e 94 3b 08 	call	0x1076	; 0x1076 <ZCD_FALLING_init>
     e50:	08 95       	ret

00000e52 <SPI_REFERENCE_initialization>:
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     e52:	81 b1       	in	r24, 0x01	; 1
     e54:	8f 7d       	andi	r24, 0xDF	; 223
     e56:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     e58:	80 b1       	in	r24, 0x00	; 0
     e5a:	80 62       	ori	r24, 0x20	; 32
     e5c:	80 b9       	out	0x00, r24	; 0
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     e5e:	80 b1       	in	r24, 0x00	; 0
     e60:	8f 7e       	andi	r24, 0xEF	; 239
     e62:	80 b9       	out	0x00, r24	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     e64:	e4 e1       	ldi	r30, 0x14	; 20
     e66:	f4 e0       	ldi	r31, 0x04	; 4
     e68:	80 81       	ld	r24, Z
     e6a:	87 7f       	andi	r24, 0xF7	; 247
     e6c:	80 83       	st	Z, r24
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     e6e:	80 b1       	in	r24, 0x00	; 0
     e70:	8f 7b       	andi	r24, 0xBF	; 191
     e72:	80 b9       	out	0x00, r24	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     e74:	e6 e1       	ldi	r30, 0x16	; 22
     e76:	f4 e0       	ldi	r31, 0x04	; 4
     e78:	80 81       	ld	r24, Z
     e7a:	87 7f       	andi	r24, 0xF7	; 247
     e7c:	80 83       	st	Z, r24
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     e7e:	80 b1       	in	r24, 0x00	; 0
     e80:	8f 77       	andi	r24, 0x7F	; 127
     e82:	80 b9       	out	0x00, r24	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     e84:	e7 e1       	ldi	r30, 0x17	; 23
     e86:	f4 e0       	ldi	r31, 0x04	; 4
     e88:	80 81       	ld	r24, Z
     e8a:	87 7f       	andi	r24, 0xF7	; 247
     e8c:	80 83       	st	Z, r24
	    // <id> pad_pull_config
	    // <PORT_PULL_OFF"> Off
	    // <PORT_PULL_UP"> Pull-up
	    PORT_PULL_OFF);

	SPI_REFERENCE_init();
     e8e:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <SPI_REFERENCE_init>
     e92:	08 95       	ret

00000e94 <SPI_ZCD_initialization>:
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     e94:	89 b1       	in	r24, 0x09	; 9
     e96:	8d 7f       	andi	r24, 0xFD	; 253
     e98:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     e9a:	88 b1       	in	r24, 0x08	; 8
     e9c:	82 60       	ori	r24, 0x02	; 2
     e9e:	88 b9       	out	0x08, r24	; 8
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
     ea0:	88 b1       	in	r24, 0x08	; 8
     ea2:	8e 7f       	andi	r24, 0xFE	; 254
     ea4:	88 b9       	out	0x08, r24	; 8
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     ea6:	e0 e5       	ldi	r30, 0x50	; 80
     ea8:	f4 e0       	ldi	r31, 0x04	; 4
     eaa:	80 81       	ld	r24, Z
     eac:	87 7f       	andi	r24, 0xF7	; 247
     eae:	80 83       	st	Z, r24
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
     eb0:	88 b1       	in	r24, 0x08	; 8
     eb2:	8b 7f       	andi	r24, 0xFB	; 251
     eb4:	88 b9       	out	0x08, r24	; 8
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     eb6:	e2 e5       	ldi	r30, 0x52	; 82
     eb8:	f4 e0       	ldi	r31, 0x04	; 4
     eba:	80 81       	ld	r24, Z
     ebc:	87 7f       	andi	r24, 0xF7	; 247
     ebe:	80 83       	st	Z, r24
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
     ec0:	88 b1       	in	r24, 0x08	; 8
     ec2:	87 7f       	andi	r24, 0xF7	; 247
     ec4:	88 b9       	out	0x08, r24	; 8
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     ec6:	e3 e5       	ldi	r30, 0x53	; 83
     ec8:	f4 e0       	ldi	r31, 0x04	; 4
     eca:	80 81       	ld	r24, Z
     ecc:	87 7f       	andi	r24, 0xF7	; 247
     ece:	80 83       	st	Z, r24
	    // <id> pad_pull_config
	    // <PORT_PULL_OFF"> Off
	    // <PORT_PULL_UP"> Pull-up
	    PORT_PULL_OFF);

	SPI_ZCD_init();
     ed0:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <SPI_ZCD_init>
     ed4:	08 95       	ret

00000ed6 <TIMER_RISING_initialization>:
}

void TIMER_RISING_initialization(void)
{

	TIMER_RISING_init();
     ed6:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <TIMER_RISING_init>
     eda:	08 95       	ret

00000edc <TIMER_FALLING_initialization>:
}

void TIMER_FALLING_initialization(void)
{

	TIMER_FALLING_init();
     edc:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <TIMER_FALLING_init>
     ee0:	08 95       	ret

00000ee2 <TIMER_0_initialization>:
}

void TIMER_0_initialization(void)
{

	TIMER_0_init();
     ee2:	0e 94 00 08 	call	0x1000	; 0x1000 <TIMER_0_init>
     ee6:	08 95       	ret

00000ee8 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
     ee8:	0e 94 9f 06 	call	0xd3e	; 0xd3e <mcu_init>
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     eec:	85 b1       	in	r24, 0x05	; 5
     eee:	87 7f       	andi	r24, 0xF7	; 247
     ef0:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     ef2:	84 b1       	in	r24, 0x04	; 4
     ef4:	88 60       	ori	r24, 0x08	; 8
     ef6:	84 b9       	out	0x04, r24	; 4
	    // <true"> High
	    false);

	LED0_set_dir(PORT_DIR_OUT);

	OPERATIONAL_AMPLIFIER_0_initialization();
     ef8:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <OPERATIONAL_AMPLIFIER_0_initialization>

	CLKCTRL_init();
     efc:	0e 94 44 08 	call	0x1088	; 0x1088 <CLKCTRL_init>

	USART_0_initialization();
     f00:	0e 94 fd 06 	call	0xdfa	; 0xdfa <USART_0_initialization>

	EVENT_SYSTEM_0_initialization();
     f04:	0e 94 0e 07 	call	0xe1c	; 0xe1c <EVENT_SYSTEM_0_initialization>

	SLPCTRL_init();
     f08:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <SLPCTRL_init>

	CPUINT_init();
     f0c:	0e 94 52 08 	call	0x10a4	; 0x10a4 <CPUINT_init>

	ZCD_RISING_initialization();
     f10:	0e 94 11 07 	call	0xe22	; 0xe22 <ZCD_RISING_initialization>

	ZCD_FALLING_initialization();
     f14:	0e 94 1d 07 	call	0xe3a	; 0xe3a <ZCD_FALLING_initialization>

	SPI_REFERENCE_initialization();
     f18:	0e 94 29 07 	call	0xe52	; 0xe52 <SPI_REFERENCE_initialization>

	SPI_ZCD_initialization();
     f1c:	0e 94 4a 07 	call	0xe94	; 0xe94 <SPI_ZCD_initialization>

	RTC_0_init();
     f20:	0e 94 c1 07 	call	0xf82	; 0xf82 <RTC_0_init>

	TIMER_RISING_initialization();
     f24:	0e 94 6b 07 	call	0xed6	; 0xed6 <TIMER_RISING_initialization>

	TIMER_FALLING_initialization();
     f28:	0e 94 6e 07 	call	0xedc	; 0xedc <TIMER_FALLING_initialization>

	TIMER_0_initialization();
     f2c:	0e 94 71 07 	call	0xee2	; 0xee2 <TIMER_0_initialization>

	VREF_0_init();
     f30:	0e 94 31 08 	call	0x1062	; 0x1062 <VREF_0_init>

	BOD_init();
     f34:	0e 94 40 08 	call	0x1080	; 0x1080 <BOD_init>
     f38:	08 95       	ret

00000f3a <EVENT_SYSTEM_0_init>:
 * \return Initialization status.
 */
int8_t EVENT_SYSTEM_0_init()
{

	EVSYS.CHANNEL0 = EVSYS_CHANNEL0_ZCD0_gc; /* Zero Cross Detect 0 out */
     f3a:	e0 e0       	ldi	r30, 0x00	; 0
     f3c:	f2 e0       	ldi	r31, 0x02	; 2
     f3e:	80 e3       	ldi	r24, 0x30	; 48
     f40:	80 8b       	std	Z+16, r24	; 0x10

	EVSYS.CHANNEL1 = EVSYS_CHANNEL1_ZCD1_gc; /* Zero Cross Detect 1 out */
     f42:	81 e3       	ldi	r24, 0x31	; 49
     f44:	81 8b       	std	Z+17, r24	; 0x11

	// EVSYS.USERTCA1CNTA = EVSYS_USER_OFF_gc; /* Off */

	// EVSYS.USERTCA1CNTB = EVSYS_USER_OFF_gc; /* Off */

	EVSYS.USERTCB0CAPT = EVSYS_USER_CHANNEL0_gc; /* Connect user to event channel 0 */
     f46:	91 e0       	ldi	r25, 0x01	; 1
     f48:	96 af       	std	Z+62, r25	; 0x3e

	// EVSYS.USERTCB0COUNT = EVSYS_USER_OFF_gc; /* Off */

	EVSYS.USERTCB1CAPT = EVSYS_USER_CHANNEL1_gc; /* Connect user to event channel 1 */
     f4a:	82 e0       	ldi	r24, 0x02	; 2
     f4c:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <__TEXT_REGION_LENGTH__+0x7e0240>

	// EVSYS.USERTCB2CAPT = EVSYS_USER_OFF_gc; /* Off */

	// EVSYS.USERTCB2COUNT = EVSYS_USER_OFF_gc; /* Off */

	EVSYS.USERTCB3CAPT = EVSYS_USER_CHANNEL1_gc; /* Connect user to event channel 1 */
     f50:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <__TEXT_REGION_LENGTH__+0x7e0244>

	// EVSYS.USERTCB3COUNT = EVSYS_USER_OFF_gc; /* Off */

	EVSYS.USERTCD0INPUTA = EVSYS_USER_CHANNEL0_gc; /* Connect user to event channel 0 */
     f54:	90 93 48 02 	sts	0x0248, r25	; 0x800248 <__TEXT_REGION_LENGTH__+0x7e0248>

	EVSYS.USERTCD0INPUTB = EVSYS_USER_CHANNEL1_gc; /* Connect user to event channel 1 */
     f58:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <__TEXT_REGION_LENGTH__+0x7e0249>
	// EVSYS.USEROPAMP2DUMP = EVSYS_USER_OFF_gc; /* Off */

	// EVSYS.USEROPAMP2DISABLE = EVSYS_USER_OFF_gc; /* Off */

	return 0;
}
     f5c:	80 e0       	ldi	r24, 0x00	; 0
     f5e:	08 95       	ret

00000f60 <OPERATIONAL_AMPLIFIER_0_init>:
 * \return Initialization status.
 */
int8_t OPERATIONAL_AMPLIFIER_0_init()
{

	OPAMP.CTRLA = 1 << OPAMP_ENABLE_bp; /* OPAMP Peripheral Enable: enabled */
     f60:	e0 e0       	ldi	r30, 0x00	; 0
     f62:	f7 e0       	ldi	r31, 0x07	; 7
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	80 83       	st	Z, r24

	OPAMP.DBGCTRL = 1 << OPAMP_DBGRUN_bp; /* Run in Debug mode: enabled */
     f68:	81 83       	std	Z+1, r24	; 0x01

	OPAMP.TIMEBASE = OPAMP_TIMEBASE_VALUE << OPAMP_TIMEBASE_gp;
     f6a:	87 e1       	ldi	r24, 0x17	; 23
     f6c:	82 83       	std	Z+2, r24	; 0x02

	// OPAMP.PWRCTRL = OPAMP_PWRCTRL_IRSEL_FULL_gc; /* Full Input Range */

	OPAMP.OP1SETTLE = 0x7f << OPAMP_SETTLE_gp; /* Setting: 0x7f */
     f6e:	8f e7       	ldi	r24, 0x7F	; 127
     f70:	84 8f       	std	Z+28, r24	; 0x1c

	OPAMP.OP1CTRLA = 1 << OPAMP_ALWAYSON_bp             /* Always ON: enabled */
     f72:	85 e0       	ldi	r24, 0x05	; 5
     f74:	80 8f       	std	Z+24, r24	; 0x18
	                 | 0 << OPAMP_EVENTEN_bp            /* Event Enable: disabled */
	                 | OPAMP_OP1CTRLA_OUTMODE_NORMAL_gc /* Output Driver in Normal Mode */
	                 | 0 << OPAMP_RUNSTBY_bp;           /* Run is standby mode: disabled */

	OPAMP.OP1RESMUX = OPAMP_OP1RESMUX_MUXTOP_OUT_gc     /* OPn output */
     f76:	89 ee       	ldi	r24, 0xE9	; 233
     f78:	82 8f       	std	Z+26, r24	; 0x1a
	                  | OPAMP_OP1RESMUX_MUXBOT_INN_gc   /* Negative input pin for OPn */
	                  | OPAMP_OP1RESMUX_MUXWIP_WIP7_gc; /* R1 = 1R, R2 = 15R, R2/R1 = 15 */

	OPAMP.OP1INMUX = OPAMP_OP1INMUX_MUXPOS_VDDDIV2_gc /* VDD/2 */
     f7a:	84 e1       	ldi	r24, 0x14	; 20
     f7c:	83 8f       	std	Z+27, r24	; 0x1b
	                 | OPAMP_OP1INMUX_MUXNEG_WIP_gc;  /* Wiper from OPn's resistor ladder */

	return 0;
}
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	08 95       	ret

00000f82 <RTC_0_init>:
 * \return Initialization status.
 */
int8_t RTC_0_init()
{

	while (RTC.STATUS > 0) { /* Wait for all register to be synchronized */
     f82:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
     f86:	81 11       	cpse	r24, r1
     f88:	fc cf       	rjmp	.-8      	; 0xf82 <RTC_0_init>

	// RTC.CMP = 0x0; /* Compare: 0x0 */

	// RTC.CNT = 0x0; /* Counter: 0x0 */

	RTC.CTRLA = RTC_PRESCALER_DIV32_gc  /* 32 */
     f8a:	e0 e4       	ldi	r30, 0x40	; 64
     f8c:	f1 e0       	ldi	r31, 0x01	; 1
     f8e:	88 ea       	ldi	r24, 0xA8	; 168
     f90:	80 83       	st	Z, r24
	            | 0 << RTC_RTCEN_bp     /* Enable: disabled */
	            | 1 << RTC_RUNSTDBY_bp; /* Run In Standby: enabled */

	RTC.PER = 0x1ff; /* Period: 0x1ff */
     f92:	8f ef       	ldi	r24, 0xFF	; 255
     f94:	91 e0       	ldi	r25, 0x01	; 1
     f96:	82 87       	std	Z+10, r24	; 0x0a
     f98:	93 87       	std	Z+11, r25	; 0x0b

	RTC.CLKSEL = RTC_CLKSEL_OSC32K_gc; /* Internal 32.768 kHz oscillator */
     f9a:	17 82       	std	Z+7, r1	; 0x07

	// RTC.DBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	RTC.INTCTRL = 0 << RTC_CMP_bp    /* Compare Match Interrupt enable: disabled */
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	82 83       	std	Z+2, r24	; 0x02
	// RTC.PITDBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	// RTC.PITINTCTRL = 0 << RTC_PI_bp; /* Periodic Interrupt: disabled */

	return 0;
}
     fa0:	80 e0       	ldi	r24, 0x00	; 0
     fa2:	08 95       	ret

00000fa4 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
     fa4:	80 e0       	ldi	r24, 0x00	; 0
     fa6:	08 95       	ret

00000fa8 <SPI_REFERENCE_init>:
		while (!(SPI0.INTFLAGS & SPI_RXCIF_bm))
			;
		*b = SPI0.DATA;
		b++;
	}
}
     fa8:	e0 e4       	ldi	r30, 0x40	; 64
     faa:	f9 e0       	ldi	r31, 0x09	; 9
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	80 83       	st	Z, r24
     fb0:	82 83       	std	Z+2, r24	; 0x02
     fb2:	10 92 bf 40 	sts	0x40BF, r1	; 0x8040bf <SPI_REFERENCE_desc>
     fb6:	08 95       	ret

00000fb8 <SPI_ZCD_init>:
 * \retval 1 the SPI init was not successful
 */
void SPI_ZCD_init()
{

	SPI1.CTRLA = 0 << SPI_CLK2X_bp    /* Enable Double Speed: disabled */
     fb8:	e0 e6       	ldi	r30, 0x60	; 96
     fba:	f9 e0       	ldi	r31, 0x09	; 9
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	80 83       	st	Z, r24
	// SPI1.CTRLB = 0 << SPI_BUFEN_bp /* Buffer Mode Enable: disabled */
	//		 | 0 << SPI_BUFWR_bp /* Buffer Write Mode: disabled */
	//		 | SPI_MODE_0_gc /* SPI Mode 0 */
	//		 | 0 << SPI_SSD_bp; /* Slave Select Disable: disabled */

	SPI1.INTCTRL = 1 << SPI_DREIE_bp    /* Data Register Empty Interrupt Enable: enabled */
     fc0:	81 ee       	ldi	r24, 0xE1	; 225
     fc2:	82 83       	std	Z+2, r24	; 0x02
	               | 1 << SPI_IE_bp     /* Interrupt Enable: enabled */
	               | 1 << SPI_RXCIE_bp  /* Receive Complete Interrupt Enable: enabled */
	               | 0 << SPI_SSIE_bp   /* Slave Select Trigger Interrupt Enable: disabled */
	               | 1 << SPI_TXCIE_bp; /* Transfer Complete Interrupt Enable: enabled */

	SPI_ZCD_desc.status = SPI_FREE;
     fc4:	e8 eb       	ldi	r30, 0xB8	; 184
     fc6:	f0 e4       	ldi	r31, 0x40	; 64
     fc8:	10 82       	st	Z, r1
	SPI_ZCD_desc.cb     = NULL;
     fca:	15 82       	std	Z+5, r1	; 0x05
     fcc:	16 82       	std	Z+6, r1	; 0x06
     fce:	08 95       	ret

00000fd0 <TIMER_RISING_init>:

	// TCB0.CCMP = 0x0; /* Compare or Capture: 0x0 */

	// TCB0.CNT = 0x0; /* Count: 0x0 */

	TCB0.CTRLB = 1 << TCB_ASYNC_bp      /* Asynchronous Enable: enabled */
     fd0:	e0 e0       	ldi	r30, 0x00	; 0
     fd2:	fb e0       	ldi	r31, 0x0B	; 11
     fd4:	83 e4       	ldi	r24, 0x43	; 67
     fd6:	81 83       	std	Z+1, r24	; 0x01
	             | 0 << TCB_CCMPEN_bp   /* Pin Output Enable: disabled */
	             | 0 << TCB_CCMPINIT_bp /* Pin Initial State: disabled */
	             | TCB_CNTMODE_FRQ_gc;  /* Input Capture Frequency measurement */

	TCB0.DBGCTRL = 1 << TCB_DBGRUN_bp; /* Debug Run: enabled */
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	80 87       	std	Z+8, r24	; 0x08

	TCB0.EVCTRL = 1 << TCB_CAPTEI_bp    /* Event Input Enable: enabled */
     fdc:	84 83       	std	Z+4, r24	; 0x04
	              | 0 << TCB_EDGE_bp    /* Event Edge: disabled */
	              | 0 << TCB_FILTER_bp; /* Input Capture Noise Cancellation Filter: disabled */

	TCB0.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
     fde:	85 83       	std	Z+5, r24	; 0x05
	               | 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */

	TCB0.CTRLA = TCB_CLKSEL_DIV1_gc     /* CLK_PER */
     fe0:	81 e1       	ldi	r24, 0x11	; 17
     fe2:	80 83       	st	Z, r24
	             | 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
	             | 1 << TCB_SYNCUPD_bp  /* Synchronize Update: enabled */
	             | 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */

	return 0;
}
     fe4:	80 e0       	ldi	r24, 0x00	; 0
     fe6:	08 95       	ret

00000fe8 <TIMER_FALLING_init>:

	// TCB1.CCMP = 0x0; /* Compare or Capture: 0x0 */

	// TCB1.CNT = 0x0; /* Count: 0x0 */

	TCB1.CTRLB = 1 << TCB_ASYNC_bp      /* Asynchronous Enable: enabled */
     fe8:	e0 e1       	ldi	r30, 0x10	; 16
     fea:	fb e0       	ldi	r31, 0x0B	; 11
     fec:	83 e4       	ldi	r24, 0x43	; 67
     fee:	81 83       	std	Z+1, r24	; 0x01
	             | 0 << TCB_CCMPEN_bp   /* Pin Output Enable: disabled */
	             | 0 << TCB_CCMPINIT_bp /* Pin Initial State: disabled */
	             | TCB_CNTMODE_FRQ_gc;  /* Input Capture Frequency measurement */

	TCB1.DBGCTRL = 1 << TCB_DBGRUN_bp; /* Debug Run: enabled */
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	80 87       	std	Z+8, r24	; 0x08

	TCB1.EVCTRL = 1 << TCB_CAPTEI_bp    /* Event Input Enable: enabled */
     ff4:	84 83       	std	Z+4, r24	; 0x04
	              | 0 << TCB_EDGE_bp    /* Event Edge: disabled */
	              | 0 << TCB_FILTER_bp; /* Input Capture Noise Cancellation Filter: disabled */

	TCB1.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
     ff6:	85 83       	std	Z+5, r24	; 0x05
	               | 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */

	TCB1.CTRLA = TCB_CLKSEL_DIV1_gc     /* CLK_PER */
     ff8:	81 e1       	ldi	r24, 0x11	; 17
     ffa:	80 83       	st	Z, r24
	             | 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
	             | 1 << TCB_SYNCUPD_bp  /* Synchronize Update: enabled */
	             | 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */

	return 0;
}
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	08 95       	ret

00001000 <TIMER_0_init>:
int8_t TIMER_0_init()
{

	// Enable Protected register, peripheral must be disabled (ENABLE=0, in TCD.CTRLA).

	TCD0.CMPASET = 4095; /* Compare A Set: 4095 */
    1000:	e0 e8       	ldi	r30, 0x80	; 128
    1002:	fb e0       	ldi	r31, 0x0B	; 11
    1004:	8f ef       	ldi	r24, 0xFF	; 255
    1006:	9f e0       	ldi	r25, 0x0F	; 15
    1008:	80 a7       	std	Z+40, r24	; 0x28
    100a:	91 a7       	std	Z+41, r25	; 0x29
	//		 | TCD_DLYTRIG_CMPASET_gc; /* Compare A set */

	// TCD0.DLYVAL = 0 << TCD_DLYVAL_gp; /* Delay value: 0 */

	TCD0.EVCTRLA
	    = TCD_CFG_FILTER_gc       /* Input Capture Noise Cancellation Filter enabled */
    100c:	85 e5       	ldi	r24, 0x55	; 85
    100e:	80 87       	std	Z+8, r24	; 0x08
	      | TCD_ACTION_CAPTURE_gc /* Event trigger a fault and capture */
	      | TCD_EDGE_RISE_HIGH_gc /* The rising edge or high level of event generates retrigger or fault action */
	      | 1 << TCD_TRIGEI_bp;   /* Trigger event enable: enabled */

	TCD0.EVCTRLB
	    = TCD_CFG_NEITHER_gc      /* Neither Filter nor Asynchronous Event is enabled */
    1010:	84 e1       	ldi	r24, 0x14	; 20
    1012:	81 87       	std	Z+9, r24	; 0x09

	// TCD0.INPUTCTRLA = TCD_INPUTMODE_NONE_gc; /* Input has no actions */

	// TCD0.INPUTCTRLB = TCD_INPUTMODE_NONE_gc; /* Input has no actions */

	TCD0.INTCTRL = 0 << TCD_OVF_bp      /* Overflow interrupt enable: disabled */
    1014:	84 e0       	ldi	r24, 0x04	; 4
    1016:	84 87       	std	Z+12, r24	; 0x0c
	               | 1 << TCD_TRIGA_bp  /* Trigger A interrupt enable: enabled */
	               | 0 << TCD_TRIGB_bp; /* Trigger B interrupt enable: disabled */

	while ((TCD0.STATUS & TCD_ENRDY_bm) == 0)
    1018:	80 91 8e 0b 	lds	r24, 0x0B8E	; 0x800b8e <__TEXT_REGION_LENGTH__+0x7e0b8e>
    101c:	80 ff       	sbrs	r24, 0
    101e:	fc cf       	rjmp	.-8      	; 0x1018 <TIMER_0_init+0x18>
		; // Wait for Enable Ready to be high.

	TCD0.CTRLA = 1 << TCD_ENABLE_bp      /* Enable: enabled */
    1020:	81 e2       	ldi	r24, 0x21	; 33
    1022:	80 93 80 0b 	sts	0x0B80, r24	; 0x800b80 <__TEXT_REGION_LENGTH__+0x7e0b80>
	             | TCD_CLKSEL_PLL_gc     /*  */
	             | TCD_CNTPRES_DIV1_gc   /* Sync clock divided by 1 */
	             | TCD_SYNCPRES_DIV1_gc; /*  */

	return 0;
}
    1026:	80 e0       	ldi	r24, 0x00	; 0
    1028:	08 95       	ret

0000102a <USART_0_init>:
uint8_t USART_0_read()
{
	while (!(USART3.STATUS & USART_RXCIF_bm))
		;
	return USART3.RXDATAL;
}
    102a:	e0 e6       	ldi	r30, 0x60	; 96
    102c:	f8 e0       	ldi	r31, 0x08	; 8
    102e:	81 e4       	ldi	r24, 0x41	; 65
    1030:	93 e0       	ldi	r25, 0x03	; 3
    1032:	80 87       	std	Z+8, r24	; 0x08
    1034:	91 87       	std	Z+9, r25	; 0x09
    1036:	80 ec       	ldi	r24, 0xC0	; 192
    1038:	86 83       	std	Z+6, r24	; 0x06
    103a:	80 e0       	ldi	r24, 0x00	; 0
    103c:	90 e4       	ldi	r25, 0x40	; 64
    103e:	80 93 c2 40 	sts	0x40C2, r24	; 0x8040c2 <__iob+0x2>
    1042:	90 93 c3 40 	sts	0x40C3, r25	; 0x8040c3 <__iob+0x3>
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	08 95       	ret

0000104a <USART_0_write>:
 *
 * \return Nothing
 */
void USART_0_write(const uint8_t data)
{
	while (!(USART3.STATUS & USART_DREIF_bm))
    104a:	90 91 64 08 	lds	r25, 0x0864	; 0x800864 <__TEXT_REGION_LENGTH__+0x7e0864>
    104e:	95 ff       	sbrs	r25, 5
    1050:	fc cf       	rjmp	.-8      	; 0x104a <USART_0_write>
		;
	USART3.TXDATAL = data;
    1052:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <__TEXT_REGION_LENGTH__+0x7e0862>
    1056:	08 95       	ret

00001058 <USART_0_printCHAR>:

#if defined(__GNUC__)

int USART_0_printCHAR(char character, FILE *stream)
{
	USART_0_write(character);
    1058:	0e 94 25 08 	call	0x104a	; 0x104a <USART_0_write>
	return 0;
}
    105c:	80 e0       	ldi	r24, 0x00	; 0
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	08 95       	ret

00001062 <VREF_0_init>:
	//		 | VREF_REFSEL_1V024_gc; /* Internal 1.024V reference */

	// VREF.DAC0REF = 0 << VREF_ALWAYSON_bp /* Enable reference always ON for DAC0: disabled */
	//		 | VREF_REFSEL_1V024_gc; /* Internal 1.024V reference */

	VREF.ACREF = 1 << VREF_ALWAYSON_bp /* Enable reference always ON for AC: enabled */
    1062:	85 e8       	ldi	r24, 0x85	; 133
    1064:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
	             | VREF_REFSEL_VDD_gc; /* VDD as reference */

	return 0;
}
    1068:	80 e0       	ldi	r24, 0x00	; 0
    106a:	08 95       	ret

0000106c <ZCD_RISING_init>:
 * \return Initialization status.
 */
int8_t ZCD_RISING_init()
{

	ZCD0.CTRLA = 1 << ZCD_ENABLE_bp     /* Setting: enabled */
    106c:	81 e4       	ldi	r24, 0x41	; 65
    106e:	80 93 c0 06 	sts	0x06C0, r24	; 0x8006c0 <__TEXT_REGION_LENGTH__+0x7e06c0>
	             | 0 << ZCD_INVERT_bp;  /* Setting: disabled */

	// ZCD0.INTCTRL = ZCD_INTMODE_NONE_gc; /* No interrupt */

	return 0;
}
    1072:	80 e0       	ldi	r24, 0x00	; 0
    1074:	08 95       	ret

00001076 <ZCD_FALLING_init>:
 * \return Initialization status.
 */
int8_t ZCD_FALLING_init()
{

	ZCD1.CTRLA = 1 << ZCD_ENABLE_bp     /* Setting: enabled */
    1076:	89 e4       	ldi	r24, 0x49	; 73
    1078:	80 93 c8 06 	sts	0x06C8, r24	; 0x8006c8 <__TEXT_REGION_LENGTH__+0x7e06c8>
	             | 1 << ZCD_INVERT_bp;  /* Setting: enabled */

	// ZCD1.INTCTRL = ZCD_INTMODE_NONE_gc; /* No interrupt */

	return 0;
}
    107c:	80 e0       	ldi	r24, 0x00	; 0
    107e:	08 95       	ret

00001080 <BOD_init>:
int8_t BOD_init()
{

	// ccp_write_io((void*)&(BOD.CTRLA),BOD_SLEEP_DIS_gc /* Disabled */);

	BOD.INTCTRL = 0 << BOD_VLMIE_bp        /* voltage level monitor interrrupt enable: disabled */
    1080:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
	              | BOD_VLMCFG_FALLING_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
    1084:	80 e0       	ldi	r24, 0x00	; 0
    1086:	08 95       	ret

00001088 <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
    1088:	41 e8       	ldi	r20, 0x81	; 129
    108a:	68 ed       	ldi	r22, 0xD8	; 216
    108c:	80 e7       	ldi	r24, 0x70	; 112
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	0e 94 54 08 	call	0x10a8	; 0x10a8 <protected_write_io>
    1094:	44 e2       	ldi	r20, 0x24	; 36
    1096:	68 ed       	ldi	r22, 0xD8	; 216
    1098:	88 e6       	ldi	r24, 0x68	; 104
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	0e 94 54 08 	call	0x10a8	; 0x10a8 <protected_write_io>
	/* wait for PLL to start 
	while (!(CLKCTRL.MCLKSTATUS & CLKCTRL_PLLS_bm))
		;*/

	return 0;
}
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	08 95       	ret

000010a4 <CPUINT_init>:
	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
}
    10a4:	80 e0       	ldi	r24, 0x00	; 0
    10a6:	08 95       	ret

000010a8 <protected_write_io>:
	PUBLIC_FUNCTION(protected_write_io)

#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
    10a8:	1b be       	out	0x3b, r1	; 59
#endif
	movw    r30, r24                // Load addr into Z
    10aa:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
    10ac:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
    10ae:	40 83       	st	Z, r20
	ret                             // Return to caller
    10b0:	08 95       	ret

000010b2 <__divmodsi4>:
    10b2:	05 2e       	mov	r0, r21
    10b4:	97 fb       	bst	r25, 7
    10b6:	1e f4       	brtc	.+6      	; 0x10be <__divmodsi4+0xc>
    10b8:	00 94       	com	r0
    10ba:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__negsi2>
    10be:	57 fd       	sbrc	r21, 7
    10c0:	07 d0       	rcall	.+14     	; 0x10d0 <__divmodsi4_neg2>
    10c2:	0e 94 78 08 	call	0x10f0	; 0x10f0 <__udivmodsi4>
    10c6:	07 fc       	sbrc	r0, 7
    10c8:	03 d0       	rcall	.+6      	; 0x10d0 <__divmodsi4_neg2>
    10ca:	4e f4       	brtc	.+18     	; 0x10de <__divmodsi4_exit>
    10cc:	0c 94 70 08 	jmp	0x10e0	; 0x10e0 <__negsi2>

000010d0 <__divmodsi4_neg2>:
    10d0:	50 95       	com	r21
    10d2:	40 95       	com	r20
    10d4:	30 95       	com	r19
    10d6:	21 95       	neg	r18
    10d8:	3f 4f       	sbci	r19, 0xFF	; 255
    10da:	4f 4f       	sbci	r20, 0xFF	; 255
    10dc:	5f 4f       	sbci	r21, 0xFF	; 255

000010de <__divmodsi4_exit>:
    10de:	08 95       	ret

000010e0 <__negsi2>:
    10e0:	90 95       	com	r25
    10e2:	80 95       	com	r24
    10e4:	70 95       	com	r23
    10e6:	61 95       	neg	r22
    10e8:	7f 4f       	sbci	r23, 0xFF	; 255
    10ea:	8f 4f       	sbci	r24, 0xFF	; 255
    10ec:	9f 4f       	sbci	r25, 0xFF	; 255
    10ee:	08 95       	ret

000010f0 <__udivmodsi4>:
    10f0:	a1 e2       	ldi	r26, 0x21	; 33
    10f2:	1a 2e       	mov	r1, r26
    10f4:	aa 1b       	sub	r26, r26
    10f6:	bb 1b       	sub	r27, r27
    10f8:	fd 01       	movw	r30, r26
    10fa:	0d c0       	rjmp	.+26     	; 0x1116 <__udivmodsi4_ep>

000010fc <__udivmodsi4_loop>:
    10fc:	aa 1f       	adc	r26, r26
    10fe:	bb 1f       	adc	r27, r27
    1100:	ee 1f       	adc	r30, r30
    1102:	ff 1f       	adc	r31, r31
    1104:	a2 17       	cp	r26, r18
    1106:	b3 07       	cpc	r27, r19
    1108:	e4 07       	cpc	r30, r20
    110a:	f5 07       	cpc	r31, r21
    110c:	20 f0       	brcs	.+8      	; 0x1116 <__udivmodsi4_ep>
    110e:	a2 1b       	sub	r26, r18
    1110:	b3 0b       	sbc	r27, r19
    1112:	e4 0b       	sbc	r30, r20
    1114:	f5 0b       	sbc	r31, r21

00001116 <__udivmodsi4_ep>:
    1116:	66 1f       	adc	r22, r22
    1118:	77 1f       	adc	r23, r23
    111a:	88 1f       	adc	r24, r24
    111c:	99 1f       	adc	r25, r25
    111e:	1a 94       	dec	r1
    1120:	69 f7       	brne	.-38     	; 0x10fc <__udivmodsi4_loop>
    1122:	60 95       	com	r22
    1124:	70 95       	com	r23
    1126:	80 95       	com	r24
    1128:	90 95       	com	r25
    112a:	9b 01       	movw	r18, r22
    112c:	ac 01       	movw	r20, r24
    112e:	bd 01       	movw	r22, r26
    1130:	cf 01       	movw	r24, r30
    1132:	08 95       	ret

00001134 <__tablejump2__>:
    1134:	ee 0f       	add	r30, r30
    1136:	ff 1f       	adc	r31, r31
    1138:	00 24       	eor	r0, r0
    113a:	00 1c       	adc	r0, r0
    113c:	0b be       	out	0x3b, r0	; 59
    113e:	07 90       	elpm	r0, Z+
    1140:	f6 91       	elpm	r31, Z
    1142:	e0 2d       	mov	r30, r0
    1144:	09 94       	ijmp

00001146 <printf>:
    1146:	cf 93       	push	r28
    1148:	df 93       	push	r29
    114a:	cd b7       	in	r28, 0x3d	; 61
    114c:	de b7       	in	r29, 0x3e	; 62
    114e:	ae 01       	movw	r20, r28
    1150:	4b 5f       	subi	r20, 0xFB	; 251
    1152:	5f 4f       	sbci	r21, 0xFF	; 255
    1154:	fa 01       	movw	r30, r20
    1156:	61 91       	ld	r22, Z+
    1158:	71 91       	ld	r23, Z+
    115a:	af 01       	movw	r20, r30
    115c:	80 91 c2 40 	lds	r24, 0x40C2	; 0x8040c2 <__iob+0x2>
    1160:	90 91 c3 40 	lds	r25, 0x40C3	; 0x8040c3 <__iob+0x3>
    1164:	0e 94 b7 08 	call	0x116e	; 0x116e <vfprintf>
    1168:	df 91       	pop	r29
    116a:	cf 91       	pop	r28
    116c:	08 95       	ret

0000116e <vfprintf>:
    116e:	2f 92       	push	r2
    1170:	3f 92       	push	r3
    1172:	4f 92       	push	r4
    1174:	5f 92       	push	r5
    1176:	6f 92       	push	r6
    1178:	7f 92       	push	r7
    117a:	8f 92       	push	r8
    117c:	9f 92       	push	r9
    117e:	af 92       	push	r10
    1180:	bf 92       	push	r11
    1182:	cf 92       	push	r12
    1184:	df 92       	push	r13
    1186:	ef 92       	push	r14
    1188:	ff 92       	push	r15
    118a:	0f 93       	push	r16
    118c:	1f 93       	push	r17
    118e:	cf 93       	push	r28
    1190:	df 93       	push	r29
    1192:	cd b7       	in	r28, 0x3d	; 61
    1194:	de b7       	in	r29, 0x3e	; 62
    1196:	2b 97       	sbiw	r28, 0x0b	; 11
    1198:	cd bf       	out	0x3d, r28	; 61
    119a:	de bf       	out	0x3e, r29	; 62
    119c:	6c 01       	movw	r12, r24
    119e:	7b 01       	movw	r14, r22
    11a0:	8a 01       	movw	r16, r20
    11a2:	fc 01       	movw	r30, r24
    11a4:	16 82       	std	Z+6, r1	; 0x06
    11a6:	17 82       	std	Z+7, r1	; 0x07
    11a8:	83 81       	ldd	r24, Z+3	; 0x03
    11aa:	81 ff       	sbrs	r24, 1
    11ac:	cc c1       	rjmp	.+920    	; 0x1546 <vfprintf+0x3d8>
    11ae:	ce 01       	movw	r24, r28
    11b0:	01 96       	adiw	r24, 0x01	; 1
    11b2:	3c 01       	movw	r6, r24
    11b4:	f6 01       	movw	r30, r12
    11b6:	93 81       	ldd	r25, Z+3	; 0x03
    11b8:	f7 01       	movw	r30, r14
    11ba:	93 fd       	sbrc	r25, 3
    11bc:	85 91       	lpm	r24, Z+
    11be:	93 ff       	sbrs	r25, 3
    11c0:	81 91       	ld	r24, Z+
    11c2:	7f 01       	movw	r14, r30
    11c4:	88 23       	and	r24, r24
    11c6:	09 f4       	brne	.+2      	; 0x11ca <vfprintf+0x5c>
    11c8:	ba c1       	rjmp	.+884    	; 0x153e <vfprintf+0x3d0>
    11ca:	85 32       	cpi	r24, 0x25	; 37
    11cc:	39 f4       	brne	.+14     	; 0x11dc <vfprintf+0x6e>
    11ce:	93 fd       	sbrc	r25, 3
    11d0:	85 91       	lpm	r24, Z+
    11d2:	93 ff       	sbrs	r25, 3
    11d4:	81 91       	ld	r24, Z+
    11d6:	7f 01       	movw	r14, r30
    11d8:	85 32       	cpi	r24, 0x25	; 37
    11da:	29 f4       	brne	.+10     	; 0x11e6 <vfprintf+0x78>
    11dc:	b6 01       	movw	r22, r12
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <fputc>
    11e4:	e7 cf       	rjmp	.-50     	; 0x11b4 <vfprintf+0x46>
    11e6:	91 2c       	mov	r9, r1
    11e8:	21 2c       	mov	r2, r1
    11ea:	31 2c       	mov	r3, r1
    11ec:	ff e1       	ldi	r31, 0x1F	; 31
    11ee:	f3 15       	cp	r31, r3
    11f0:	d8 f0       	brcs	.+54     	; 0x1228 <vfprintf+0xba>
    11f2:	8b 32       	cpi	r24, 0x2B	; 43
    11f4:	79 f0       	breq	.+30     	; 0x1214 <vfprintf+0xa6>
    11f6:	38 f4       	brcc	.+14     	; 0x1206 <vfprintf+0x98>
    11f8:	80 32       	cpi	r24, 0x20	; 32
    11fa:	79 f0       	breq	.+30     	; 0x121a <vfprintf+0xac>
    11fc:	83 32       	cpi	r24, 0x23	; 35
    11fe:	a1 f4       	brne	.+40     	; 0x1228 <vfprintf+0xba>
    1200:	23 2d       	mov	r18, r3
    1202:	20 61       	ori	r18, 0x10	; 16
    1204:	1d c0       	rjmp	.+58     	; 0x1240 <vfprintf+0xd2>
    1206:	8d 32       	cpi	r24, 0x2D	; 45
    1208:	61 f0       	breq	.+24     	; 0x1222 <vfprintf+0xb4>
    120a:	80 33       	cpi	r24, 0x30	; 48
    120c:	69 f4       	brne	.+26     	; 0x1228 <vfprintf+0xba>
    120e:	23 2d       	mov	r18, r3
    1210:	21 60       	ori	r18, 0x01	; 1
    1212:	16 c0       	rjmp	.+44     	; 0x1240 <vfprintf+0xd2>
    1214:	83 2d       	mov	r24, r3
    1216:	82 60       	ori	r24, 0x02	; 2
    1218:	38 2e       	mov	r3, r24
    121a:	e3 2d       	mov	r30, r3
    121c:	e4 60       	ori	r30, 0x04	; 4
    121e:	3e 2e       	mov	r3, r30
    1220:	2a c0       	rjmp	.+84     	; 0x1276 <vfprintf+0x108>
    1222:	f3 2d       	mov	r31, r3
    1224:	f8 60       	ori	r31, 0x08	; 8
    1226:	1d c0       	rjmp	.+58     	; 0x1262 <vfprintf+0xf4>
    1228:	37 fc       	sbrc	r3, 7
    122a:	2d c0       	rjmp	.+90     	; 0x1286 <vfprintf+0x118>
    122c:	20 ed       	ldi	r18, 0xD0	; 208
    122e:	28 0f       	add	r18, r24
    1230:	2a 30       	cpi	r18, 0x0A	; 10
    1232:	40 f0       	brcs	.+16     	; 0x1244 <vfprintf+0xd6>
    1234:	8e 32       	cpi	r24, 0x2E	; 46
    1236:	b9 f4       	brne	.+46     	; 0x1266 <vfprintf+0xf8>
    1238:	36 fc       	sbrc	r3, 6
    123a:	81 c1       	rjmp	.+770    	; 0x153e <vfprintf+0x3d0>
    123c:	23 2d       	mov	r18, r3
    123e:	20 64       	ori	r18, 0x40	; 64
    1240:	32 2e       	mov	r3, r18
    1242:	19 c0       	rjmp	.+50     	; 0x1276 <vfprintf+0x108>
    1244:	36 fe       	sbrs	r3, 6
    1246:	06 c0       	rjmp	.+12     	; 0x1254 <vfprintf+0xe6>
    1248:	8a e0       	ldi	r24, 0x0A	; 10
    124a:	98 9e       	mul	r9, r24
    124c:	20 0d       	add	r18, r0
    124e:	11 24       	eor	r1, r1
    1250:	92 2e       	mov	r9, r18
    1252:	11 c0       	rjmp	.+34     	; 0x1276 <vfprintf+0x108>
    1254:	ea e0       	ldi	r30, 0x0A	; 10
    1256:	2e 9e       	mul	r2, r30
    1258:	20 0d       	add	r18, r0
    125a:	11 24       	eor	r1, r1
    125c:	22 2e       	mov	r2, r18
    125e:	f3 2d       	mov	r31, r3
    1260:	f0 62       	ori	r31, 0x20	; 32
    1262:	3f 2e       	mov	r3, r31
    1264:	08 c0       	rjmp	.+16     	; 0x1276 <vfprintf+0x108>
    1266:	8c 36       	cpi	r24, 0x6C	; 108
    1268:	21 f4       	brne	.+8      	; 0x1272 <vfprintf+0x104>
    126a:	83 2d       	mov	r24, r3
    126c:	80 68       	ori	r24, 0x80	; 128
    126e:	38 2e       	mov	r3, r24
    1270:	02 c0       	rjmp	.+4      	; 0x1276 <vfprintf+0x108>
    1272:	88 36       	cpi	r24, 0x68	; 104
    1274:	41 f4       	brne	.+16     	; 0x1286 <vfprintf+0x118>
    1276:	f7 01       	movw	r30, r14
    1278:	93 fd       	sbrc	r25, 3
    127a:	85 91       	lpm	r24, Z+
    127c:	93 ff       	sbrs	r25, 3
    127e:	81 91       	ld	r24, Z+
    1280:	7f 01       	movw	r14, r30
    1282:	81 11       	cpse	r24, r1
    1284:	b3 cf       	rjmp	.-154    	; 0x11ec <vfprintf+0x7e>
    1286:	98 2f       	mov	r25, r24
    1288:	9f 7d       	andi	r25, 0xDF	; 223
    128a:	95 54       	subi	r25, 0x45	; 69
    128c:	93 30       	cpi	r25, 0x03	; 3
    128e:	28 f4       	brcc	.+10     	; 0x129a <vfprintf+0x12c>
    1290:	0c 5f       	subi	r16, 0xFC	; 252
    1292:	1f 4f       	sbci	r17, 0xFF	; 255
    1294:	9f e3       	ldi	r25, 0x3F	; 63
    1296:	99 83       	std	Y+1, r25	; 0x01
    1298:	0d c0       	rjmp	.+26     	; 0x12b4 <vfprintf+0x146>
    129a:	83 36       	cpi	r24, 0x63	; 99
    129c:	31 f0       	breq	.+12     	; 0x12aa <vfprintf+0x13c>
    129e:	83 37       	cpi	r24, 0x73	; 115
    12a0:	71 f0       	breq	.+28     	; 0x12be <vfprintf+0x150>
    12a2:	83 35       	cpi	r24, 0x53	; 83
    12a4:	09 f0       	breq	.+2      	; 0x12a8 <vfprintf+0x13a>
    12a6:	59 c0       	rjmp	.+178    	; 0x135a <vfprintf+0x1ec>
    12a8:	21 c0       	rjmp	.+66     	; 0x12ec <vfprintf+0x17e>
    12aa:	f8 01       	movw	r30, r16
    12ac:	80 81       	ld	r24, Z
    12ae:	89 83       	std	Y+1, r24	; 0x01
    12b0:	0e 5f       	subi	r16, 0xFE	; 254
    12b2:	1f 4f       	sbci	r17, 0xFF	; 255
    12b4:	88 24       	eor	r8, r8
    12b6:	83 94       	inc	r8
    12b8:	91 2c       	mov	r9, r1
    12ba:	53 01       	movw	r10, r6
    12bc:	13 c0       	rjmp	.+38     	; 0x12e4 <vfprintf+0x176>
    12be:	28 01       	movw	r4, r16
    12c0:	f2 e0       	ldi	r31, 0x02	; 2
    12c2:	4f 0e       	add	r4, r31
    12c4:	51 1c       	adc	r5, r1
    12c6:	f8 01       	movw	r30, r16
    12c8:	a0 80       	ld	r10, Z
    12ca:	b1 80       	ldd	r11, Z+1	; 0x01
    12cc:	36 fe       	sbrs	r3, 6
    12ce:	03 c0       	rjmp	.+6      	; 0x12d6 <vfprintf+0x168>
    12d0:	69 2d       	mov	r22, r9
    12d2:	70 e0       	ldi	r23, 0x00	; 0
    12d4:	02 c0       	rjmp	.+4      	; 0x12da <vfprintf+0x16c>
    12d6:	6f ef       	ldi	r22, 0xFF	; 255
    12d8:	7f ef       	ldi	r23, 0xFF	; 255
    12da:	c5 01       	movw	r24, r10
    12dc:	0e 94 c6 0a 	call	0x158c	; 0x158c <strnlen>
    12e0:	4c 01       	movw	r8, r24
    12e2:	82 01       	movw	r16, r4
    12e4:	f3 2d       	mov	r31, r3
    12e6:	ff 77       	andi	r31, 0x7F	; 127
    12e8:	3f 2e       	mov	r3, r31
    12ea:	16 c0       	rjmp	.+44     	; 0x1318 <vfprintf+0x1aa>
    12ec:	28 01       	movw	r4, r16
    12ee:	22 e0       	ldi	r18, 0x02	; 2
    12f0:	42 0e       	add	r4, r18
    12f2:	51 1c       	adc	r5, r1
    12f4:	f8 01       	movw	r30, r16
    12f6:	a0 80       	ld	r10, Z
    12f8:	b1 80       	ldd	r11, Z+1	; 0x01
    12fa:	36 fe       	sbrs	r3, 6
    12fc:	03 c0       	rjmp	.+6      	; 0x1304 <vfprintf+0x196>
    12fe:	69 2d       	mov	r22, r9
    1300:	70 e0       	ldi	r23, 0x00	; 0
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <vfprintf+0x19a>
    1304:	6f ef       	ldi	r22, 0xFF	; 255
    1306:	7f ef       	ldi	r23, 0xFF	; 255
    1308:	c5 01       	movw	r24, r10
    130a:	0e 94 bb 0a 	call	0x1576	; 0x1576 <strnlen_P>
    130e:	4c 01       	movw	r8, r24
    1310:	f3 2d       	mov	r31, r3
    1312:	f0 68       	ori	r31, 0x80	; 128
    1314:	3f 2e       	mov	r3, r31
    1316:	82 01       	movw	r16, r4
    1318:	33 fc       	sbrc	r3, 3
    131a:	1b c0       	rjmp	.+54     	; 0x1352 <vfprintf+0x1e4>
    131c:	82 2d       	mov	r24, r2
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	88 16       	cp	r8, r24
    1322:	99 06       	cpc	r9, r25
    1324:	b0 f4       	brcc	.+44     	; 0x1352 <vfprintf+0x1e4>
    1326:	b6 01       	movw	r22, r12
    1328:	80 e2       	ldi	r24, 0x20	; 32
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <fputc>
    1330:	2a 94       	dec	r2
    1332:	f4 cf       	rjmp	.-24     	; 0x131c <vfprintf+0x1ae>
    1334:	f5 01       	movw	r30, r10
    1336:	37 fc       	sbrc	r3, 7
    1338:	85 91       	lpm	r24, Z+
    133a:	37 fe       	sbrs	r3, 7
    133c:	81 91       	ld	r24, Z+
    133e:	5f 01       	movw	r10, r30
    1340:	b6 01       	movw	r22, r12
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <fputc>
    1348:	21 10       	cpse	r2, r1
    134a:	2a 94       	dec	r2
    134c:	21 e0       	ldi	r18, 0x01	; 1
    134e:	82 1a       	sub	r8, r18
    1350:	91 08       	sbc	r9, r1
    1352:	81 14       	cp	r8, r1
    1354:	91 04       	cpc	r9, r1
    1356:	71 f7       	brne	.-36     	; 0x1334 <vfprintf+0x1c6>
    1358:	e8 c0       	rjmp	.+464    	; 0x152a <vfprintf+0x3bc>
    135a:	84 36       	cpi	r24, 0x64	; 100
    135c:	11 f0       	breq	.+4      	; 0x1362 <vfprintf+0x1f4>
    135e:	89 36       	cpi	r24, 0x69	; 105
    1360:	41 f5       	brne	.+80     	; 0x13b2 <vfprintf+0x244>
    1362:	f8 01       	movw	r30, r16
    1364:	37 fe       	sbrs	r3, 7
    1366:	07 c0       	rjmp	.+14     	; 0x1376 <vfprintf+0x208>
    1368:	60 81       	ld	r22, Z
    136a:	71 81       	ldd	r23, Z+1	; 0x01
    136c:	82 81       	ldd	r24, Z+2	; 0x02
    136e:	93 81       	ldd	r25, Z+3	; 0x03
    1370:	0c 5f       	subi	r16, 0xFC	; 252
    1372:	1f 4f       	sbci	r17, 0xFF	; 255
    1374:	08 c0       	rjmp	.+16     	; 0x1386 <vfprintf+0x218>
    1376:	60 81       	ld	r22, Z
    1378:	71 81       	ldd	r23, Z+1	; 0x01
    137a:	07 2e       	mov	r0, r23
    137c:	00 0c       	add	r0, r0
    137e:	88 0b       	sbc	r24, r24
    1380:	99 0b       	sbc	r25, r25
    1382:	0e 5f       	subi	r16, 0xFE	; 254
    1384:	1f 4f       	sbci	r17, 0xFF	; 255
    1386:	f3 2d       	mov	r31, r3
    1388:	ff 76       	andi	r31, 0x6F	; 111
    138a:	3f 2e       	mov	r3, r31
    138c:	97 ff       	sbrs	r25, 7
    138e:	09 c0       	rjmp	.+18     	; 0x13a2 <vfprintf+0x234>
    1390:	90 95       	com	r25
    1392:	80 95       	com	r24
    1394:	70 95       	com	r23
    1396:	61 95       	neg	r22
    1398:	7f 4f       	sbci	r23, 0xFF	; 255
    139a:	8f 4f       	sbci	r24, 0xFF	; 255
    139c:	9f 4f       	sbci	r25, 0xFF	; 255
    139e:	f0 68       	ori	r31, 0x80	; 128
    13a0:	3f 2e       	mov	r3, r31
    13a2:	2a e0       	ldi	r18, 0x0A	; 10
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	a3 01       	movw	r20, r6
    13a8:	0e 94 0d 0b 	call	0x161a	; 0x161a <__ultoa_invert>
    13ac:	88 2e       	mov	r8, r24
    13ae:	86 18       	sub	r8, r6
    13b0:	45 c0       	rjmp	.+138    	; 0x143c <vfprintf+0x2ce>
    13b2:	85 37       	cpi	r24, 0x75	; 117
    13b4:	31 f4       	brne	.+12     	; 0x13c2 <vfprintf+0x254>
    13b6:	23 2d       	mov	r18, r3
    13b8:	2f 7e       	andi	r18, 0xEF	; 239
    13ba:	b2 2e       	mov	r11, r18
    13bc:	2a e0       	ldi	r18, 0x0A	; 10
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	25 c0       	rjmp	.+74     	; 0x140c <vfprintf+0x29e>
    13c2:	93 2d       	mov	r25, r3
    13c4:	99 7f       	andi	r25, 0xF9	; 249
    13c6:	b9 2e       	mov	r11, r25
    13c8:	8f 36       	cpi	r24, 0x6F	; 111
    13ca:	c1 f0       	breq	.+48     	; 0x13fc <vfprintf+0x28e>
    13cc:	18 f4       	brcc	.+6      	; 0x13d4 <vfprintf+0x266>
    13ce:	88 35       	cpi	r24, 0x58	; 88
    13d0:	79 f0       	breq	.+30     	; 0x13f0 <vfprintf+0x282>
    13d2:	b5 c0       	rjmp	.+362    	; 0x153e <vfprintf+0x3d0>
    13d4:	80 37       	cpi	r24, 0x70	; 112
    13d6:	19 f0       	breq	.+6      	; 0x13de <vfprintf+0x270>
    13d8:	88 37       	cpi	r24, 0x78	; 120
    13da:	21 f0       	breq	.+8      	; 0x13e4 <vfprintf+0x276>
    13dc:	b0 c0       	rjmp	.+352    	; 0x153e <vfprintf+0x3d0>
    13de:	e9 2f       	mov	r30, r25
    13e0:	e0 61       	ori	r30, 0x10	; 16
    13e2:	be 2e       	mov	r11, r30
    13e4:	b4 fe       	sbrs	r11, 4
    13e6:	0d c0       	rjmp	.+26     	; 0x1402 <vfprintf+0x294>
    13e8:	fb 2d       	mov	r31, r11
    13ea:	f4 60       	ori	r31, 0x04	; 4
    13ec:	bf 2e       	mov	r11, r31
    13ee:	09 c0       	rjmp	.+18     	; 0x1402 <vfprintf+0x294>
    13f0:	34 fe       	sbrs	r3, 4
    13f2:	0a c0       	rjmp	.+20     	; 0x1408 <vfprintf+0x29a>
    13f4:	29 2f       	mov	r18, r25
    13f6:	26 60       	ori	r18, 0x06	; 6
    13f8:	b2 2e       	mov	r11, r18
    13fa:	06 c0       	rjmp	.+12     	; 0x1408 <vfprintf+0x29a>
    13fc:	28 e0       	ldi	r18, 0x08	; 8
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	05 c0       	rjmp	.+10     	; 0x140c <vfprintf+0x29e>
    1402:	20 e1       	ldi	r18, 0x10	; 16
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	02 c0       	rjmp	.+4      	; 0x140c <vfprintf+0x29e>
    1408:	20 e1       	ldi	r18, 0x10	; 16
    140a:	32 e0       	ldi	r19, 0x02	; 2
    140c:	f8 01       	movw	r30, r16
    140e:	b7 fe       	sbrs	r11, 7
    1410:	07 c0       	rjmp	.+14     	; 0x1420 <vfprintf+0x2b2>
    1412:	60 81       	ld	r22, Z
    1414:	71 81       	ldd	r23, Z+1	; 0x01
    1416:	82 81       	ldd	r24, Z+2	; 0x02
    1418:	93 81       	ldd	r25, Z+3	; 0x03
    141a:	0c 5f       	subi	r16, 0xFC	; 252
    141c:	1f 4f       	sbci	r17, 0xFF	; 255
    141e:	06 c0       	rjmp	.+12     	; 0x142c <vfprintf+0x2be>
    1420:	60 81       	ld	r22, Z
    1422:	71 81       	ldd	r23, Z+1	; 0x01
    1424:	80 e0       	ldi	r24, 0x00	; 0
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	0e 5f       	subi	r16, 0xFE	; 254
    142a:	1f 4f       	sbci	r17, 0xFF	; 255
    142c:	a3 01       	movw	r20, r6
    142e:	0e 94 0d 0b 	call	0x161a	; 0x161a <__ultoa_invert>
    1432:	88 2e       	mov	r8, r24
    1434:	86 18       	sub	r8, r6
    1436:	fb 2d       	mov	r31, r11
    1438:	ff 77       	andi	r31, 0x7F	; 127
    143a:	3f 2e       	mov	r3, r31
    143c:	36 fe       	sbrs	r3, 6
    143e:	0d c0       	rjmp	.+26     	; 0x145a <vfprintf+0x2ec>
    1440:	23 2d       	mov	r18, r3
    1442:	2e 7f       	andi	r18, 0xFE	; 254
    1444:	a2 2e       	mov	r10, r18
    1446:	89 14       	cp	r8, r9
    1448:	58 f4       	brcc	.+22     	; 0x1460 <vfprintf+0x2f2>
    144a:	34 fe       	sbrs	r3, 4
    144c:	0b c0       	rjmp	.+22     	; 0x1464 <vfprintf+0x2f6>
    144e:	32 fc       	sbrc	r3, 2
    1450:	09 c0       	rjmp	.+18     	; 0x1464 <vfprintf+0x2f6>
    1452:	83 2d       	mov	r24, r3
    1454:	8e 7e       	andi	r24, 0xEE	; 238
    1456:	a8 2e       	mov	r10, r24
    1458:	05 c0       	rjmp	.+10     	; 0x1464 <vfprintf+0x2f6>
    145a:	b8 2c       	mov	r11, r8
    145c:	a3 2c       	mov	r10, r3
    145e:	03 c0       	rjmp	.+6      	; 0x1466 <vfprintf+0x2f8>
    1460:	b8 2c       	mov	r11, r8
    1462:	01 c0       	rjmp	.+2      	; 0x1466 <vfprintf+0x2f8>
    1464:	b9 2c       	mov	r11, r9
    1466:	a4 fe       	sbrs	r10, 4
    1468:	0f c0       	rjmp	.+30     	; 0x1488 <vfprintf+0x31a>
    146a:	fe 01       	movw	r30, r28
    146c:	e8 0d       	add	r30, r8
    146e:	f1 1d       	adc	r31, r1
    1470:	80 81       	ld	r24, Z
    1472:	80 33       	cpi	r24, 0x30	; 48
    1474:	21 f4       	brne	.+8      	; 0x147e <vfprintf+0x310>
    1476:	9a 2d       	mov	r25, r10
    1478:	99 7e       	andi	r25, 0xE9	; 233
    147a:	a9 2e       	mov	r10, r25
    147c:	09 c0       	rjmp	.+18     	; 0x1490 <vfprintf+0x322>
    147e:	a2 fe       	sbrs	r10, 2
    1480:	06 c0       	rjmp	.+12     	; 0x148e <vfprintf+0x320>
    1482:	b3 94       	inc	r11
    1484:	b3 94       	inc	r11
    1486:	04 c0       	rjmp	.+8      	; 0x1490 <vfprintf+0x322>
    1488:	8a 2d       	mov	r24, r10
    148a:	86 78       	andi	r24, 0x86	; 134
    148c:	09 f0       	breq	.+2      	; 0x1490 <vfprintf+0x322>
    148e:	b3 94       	inc	r11
    1490:	a3 fc       	sbrc	r10, 3
    1492:	11 c0       	rjmp	.+34     	; 0x14b6 <vfprintf+0x348>
    1494:	a0 fe       	sbrs	r10, 0
    1496:	06 c0       	rjmp	.+12     	; 0x14a4 <vfprintf+0x336>
    1498:	b2 14       	cp	r11, r2
    149a:	88 f4       	brcc	.+34     	; 0x14be <vfprintf+0x350>
    149c:	28 0c       	add	r2, r8
    149e:	92 2c       	mov	r9, r2
    14a0:	9b 18       	sub	r9, r11
    14a2:	0e c0       	rjmp	.+28     	; 0x14c0 <vfprintf+0x352>
    14a4:	b2 14       	cp	r11, r2
    14a6:	60 f4       	brcc	.+24     	; 0x14c0 <vfprintf+0x352>
    14a8:	b6 01       	movw	r22, r12
    14aa:	80 e2       	ldi	r24, 0x20	; 32
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <fputc>
    14b2:	b3 94       	inc	r11
    14b4:	f7 cf       	rjmp	.-18     	; 0x14a4 <vfprintf+0x336>
    14b6:	b2 14       	cp	r11, r2
    14b8:	18 f4       	brcc	.+6      	; 0x14c0 <vfprintf+0x352>
    14ba:	2b 18       	sub	r2, r11
    14bc:	02 c0       	rjmp	.+4      	; 0x14c2 <vfprintf+0x354>
    14be:	98 2c       	mov	r9, r8
    14c0:	21 2c       	mov	r2, r1
    14c2:	a4 fe       	sbrs	r10, 4
    14c4:	10 c0       	rjmp	.+32     	; 0x14e6 <vfprintf+0x378>
    14c6:	b6 01       	movw	r22, r12
    14c8:	80 e3       	ldi	r24, 0x30	; 48
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <fputc>
    14d0:	a2 fe       	sbrs	r10, 2
    14d2:	17 c0       	rjmp	.+46     	; 0x1502 <vfprintf+0x394>
    14d4:	a1 fc       	sbrc	r10, 1
    14d6:	03 c0       	rjmp	.+6      	; 0x14de <vfprintf+0x370>
    14d8:	88 e7       	ldi	r24, 0x78	; 120
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	02 c0       	rjmp	.+4      	; 0x14e2 <vfprintf+0x374>
    14de:	88 e5       	ldi	r24, 0x58	; 88
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	b6 01       	movw	r22, r12
    14e4:	0c c0       	rjmp	.+24     	; 0x14fe <vfprintf+0x390>
    14e6:	8a 2d       	mov	r24, r10
    14e8:	86 78       	andi	r24, 0x86	; 134
    14ea:	59 f0       	breq	.+22     	; 0x1502 <vfprintf+0x394>
    14ec:	a1 fe       	sbrs	r10, 1
    14ee:	02 c0       	rjmp	.+4      	; 0x14f4 <vfprintf+0x386>
    14f0:	8b e2       	ldi	r24, 0x2B	; 43
    14f2:	01 c0       	rjmp	.+2      	; 0x14f6 <vfprintf+0x388>
    14f4:	80 e2       	ldi	r24, 0x20	; 32
    14f6:	a7 fc       	sbrc	r10, 7
    14f8:	8d e2       	ldi	r24, 0x2D	; 45
    14fa:	b6 01       	movw	r22, r12
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <fputc>
    1502:	89 14       	cp	r8, r9
    1504:	38 f4       	brcc	.+14     	; 0x1514 <vfprintf+0x3a6>
    1506:	b6 01       	movw	r22, r12
    1508:	80 e3       	ldi	r24, 0x30	; 48
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <fputc>
    1510:	9a 94       	dec	r9
    1512:	f7 cf       	rjmp	.-18     	; 0x1502 <vfprintf+0x394>
    1514:	8a 94       	dec	r8
    1516:	f3 01       	movw	r30, r6
    1518:	e8 0d       	add	r30, r8
    151a:	f1 1d       	adc	r31, r1
    151c:	80 81       	ld	r24, Z
    151e:	b6 01       	movw	r22, r12
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <fputc>
    1526:	81 10       	cpse	r8, r1
    1528:	f5 cf       	rjmp	.-22     	; 0x1514 <vfprintf+0x3a6>
    152a:	22 20       	and	r2, r2
    152c:	09 f4       	brne	.+2      	; 0x1530 <vfprintf+0x3c2>
    152e:	42 ce       	rjmp	.-892    	; 0x11b4 <vfprintf+0x46>
    1530:	b6 01       	movw	r22, r12
    1532:	80 e2       	ldi	r24, 0x20	; 32
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <fputc>
    153a:	2a 94       	dec	r2
    153c:	f6 cf       	rjmp	.-20     	; 0x152a <vfprintf+0x3bc>
    153e:	f6 01       	movw	r30, r12
    1540:	86 81       	ldd	r24, Z+6	; 0x06
    1542:	97 81       	ldd	r25, Z+7	; 0x07
    1544:	02 c0       	rjmp	.+4      	; 0x154a <vfprintf+0x3dc>
    1546:	8f ef       	ldi	r24, 0xFF	; 255
    1548:	9f ef       	ldi	r25, 0xFF	; 255
    154a:	2b 96       	adiw	r28, 0x0b	; 11
    154c:	cd bf       	out	0x3d, r28	; 61
    154e:	de bf       	out	0x3e, r29	; 62
    1550:	df 91       	pop	r29
    1552:	cf 91       	pop	r28
    1554:	1f 91       	pop	r17
    1556:	0f 91       	pop	r16
    1558:	ff 90       	pop	r15
    155a:	ef 90       	pop	r14
    155c:	df 90       	pop	r13
    155e:	cf 90       	pop	r12
    1560:	bf 90       	pop	r11
    1562:	af 90       	pop	r10
    1564:	9f 90       	pop	r9
    1566:	8f 90       	pop	r8
    1568:	7f 90       	pop	r7
    156a:	6f 90       	pop	r6
    156c:	5f 90       	pop	r5
    156e:	4f 90       	pop	r4
    1570:	3f 90       	pop	r3
    1572:	2f 90       	pop	r2
    1574:	08 95       	ret

00001576 <strnlen_P>:
    1576:	fc 01       	movw	r30, r24
    1578:	05 90       	lpm	r0, Z+
    157a:	61 50       	subi	r22, 0x01	; 1
    157c:	70 40       	sbci	r23, 0x00	; 0
    157e:	01 10       	cpse	r0, r1
    1580:	d8 f7       	brcc	.-10     	; 0x1578 <strnlen_P+0x2>
    1582:	80 95       	com	r24
    1584:	90 95       	com	r25
    1586:	8e 0f       	add	r24, r30
    1588:	9f 1f       	adc	r25, r31
    158a:	08 95       	ret

0000158c <strnlen>:
    158c:	fc 01       	movw	r30, r24
    158e:	61 50       	subi	r22, 0x01	; 1
    1590:	70 40       	sbci	r23, 0x00	; 0
    1592:	01 90       	ld	r0, Z+
    1594:	01 10       	cpse	r0, r1
    1596:	d8 f7       	brcc	.-10     	; 0x158e <strnlen+0x2>
    1598:	80 95       	com	r24
    159a:	90 95       	com	r25
    159c:	8e 0f       	add	r24, r30
    159e:	9f 1f       	adc	r25, r31
    15a0:	08 95       	ret

000015a2 <fputc>:
    15a2:	0f 93       	push	r16
    15a4:	1f 93       	push	r17
    15a6:	cf 93       	push	r28
    15a8:	df 93       	push	r29
    15aa:	fb 01       	movw	r30, r22
    15ac:	23 81       	ldd	r18, Z+3	; 0x03
    15ae:	21 fd       	sbrc	r18, 1
    15b0:	03 c0       	rjmp	.+6      	; 0x15b8 <fputc+0x16>
    15b2:	8f ef       	ldi	r24, 0xFF	; 255
    15b4:	9f ef       	ldi	r25, 0xFF	; 255
    15b6:	2c c0       	rjmp	.+88     	; 0x1610 <fputc+0x6e>
    15b8:	22 ff       	sbrs	r18, 2
    15ba:	16 c0       	rjmp	.+44     	; 0x15e8 <fputc+0x46>
    15bc:	46 81       	ldd	r20, Z+6	; 0x06
    15be:	57 81       	ldd	r21, Z+7	; 0x07
    15c0:	24 81       	ldd	r18, Z+4	; 0x04
    15c2:	35 81       	ldd	r19, Z+5	; 0x05
    15c4:	42 17       	cp	r20, r18
    15c6:	53 07       	cpc	r21, r19
    15c8:	44 f4       	brge	.+16     	; 0x15da <fputc+0x38>
    15ca:	a0 81       	ld	r26, Z
    15cc:	b1 81       	ldd	r27, Z+1	; 0x01
    15ce:	9d 01       	movw	r18, r26
    15d0:	2f 5f       	subi	r18, 0xFF	; 255
    15d2:	3f 4f       	sbci	r19, 0xFF	; 255
    15d4:	20 83       	st	Z, r18
    15d6:	31 83       	std	Z+1, r19	; 0x01
    15d8:	8c 93       	st	X, r24
    15da:	26 81       	ldd	r18, Z+6	; 0x06
    15dc:	37 81       	ldd	r19, Z+7	; 0x07
    15de:	2f 5f       	subi	r18, 0xFF	; 255
    15e0:	3f 4f       	sbci	r19, 0xFF	; 255
    15e2:	26 83       	std	Z+6, r18	; 0x06
    15e4:	37 83       	std	Z+7, r19	; 0x07
    15e6:	14 c0       	rjmp	.+40     	; 0x1610 <fputc+0x6e>
    15e8:	8b 01       	movw	r16, r22
    15ea:	ec 01       	movw	r28, r24
    15ec:	fb 01       	movw	r30, r22
    15ee:	00 84       	ldd	r0, Z+8	; 0x08
    15f0:	f1 85       	ldd	r31, Z+9	; 0x09
    15f2:	e0 2d       	mov	r30, r0
    15f4:	09 95       	icall
    15f6:	89 2b       	or	r24, r25
    15f8:	e1 f6       	brne	.-72     	; 0x15b2 <fputc+0x10>
    15fa:	d8 01       	movw	r26, r16
    15fc:	16 96       	adiw	r26, 0x06	; 6
    15fe:	8d 91       	ld	r24, X+
    1600:	9c 91       	ld	r25, X
    1602:	17 97       	sbiw	r26, 0x07	; 7
    1604:	01 96       	adiw	r24, 0x01	; 1
    1606:	16 96       	adiw	r26, 0x06	; 6
    1608:	8d 93       	st	X+, r24
    160a:	9c 93       	st	X, r25
    160c:	17 97       	sbiw	r26, 0x07	; 7
    160e:	ce 01       	movw	r24, r28
    1610:	df 91       	pop	r29
    1612:	cf 91       	pop	r28
    1614:	1f 91       	pop	r17
    1616:	0f 91       	pop	r16
    1618:	08 95       	ret

0000161a <__ultoa_invert>:
    161a:	fa 01       	movw	r30, r20
    161c:	aa 27       	eor	r26, r26
    161e:	28 30       	cpi	r18, 0x08	; 8
    1620:	51 f1       	breq	.+84     	; 0x1676 <__ultoa_invert+0x5c>
    1622:	20 31       	cpi	r18, 0x10	; 16
    1624:	81 f1       	breq	.+96     	; 0x1686 <__ultoa_invert+0x6c>
    1626:	e8 94       	clt
    1628:	6f 93       	push	r22
    162a:	6e 7f       	andi	r22, 0xFE	; 254
    162c:	6e 5f       	subi	r22, 0xFE	; 254
    162e:	7f 4f       	sbci	r23, 0xFF	; 255
    1630:	8f 4f       	sbci	r24, 0xFF	; 255
    1632:	9f 4f       	sbci	r25, 0xFF	; 255
    1634:	af 4f       	sbci	r26, 0xFF	; 255
    1636:	b1 e0       	ldi	r27, 0x01	; 1
    1638:	3e d0       	rcall	.+124    	; 0x16b6 <__ultoa_invert+0x9c>
    163a:	b4 e0       	ldi	r27, 0x04	; 4
    163c:	3c d0       	rcall	.+120    	; 0x16b6 <__ultoa_invert+0x9c>
    163e:	67 0f       	add	r22, r23
    1640:	78 1f       	adc	r23, r24
    1642:	89 1f       	adc	r24, r25
    1644:	9a 1f       	adc	r25, r26
    1646:	a1 1d       	adc	r26, r1
    1648:	68 0f       	add	r22, r24
    164a:	79 1f       	adc	r23, r25
    164c:	8a 1f       	adc	r24, r26
    164e:	91 1d       	adc	r25, r1
    1650:	a1 1d       	adc	r26, r1
    1652:	6a 0f       	add	r22, r26
    1654:	71 1d       	adc	r23, r1
    1656:	81 1d       	adc	r24, r1
    1658:	91 1d       	adc	r25, r1
    165a:	a1 1d       	adc	r26, r1
    165c:	20 d0       	rcall	.+64     	; 0x169e <__ultoa_invert+0x84>
    165e:	09 f4       	brne	.+2      	; 0x1662 <__ultoa_invert+0x48>
    1660:	68 94       	set
    1662:	3f 91       	pop	r19
    1664:	2a e0       	ldi	r18, 0x0A	; 10
    1666:	26 9f       	mul	r18, r22
    1668:	11 24       	eor	r1, r1
    166a:	30 19       	sub	r19, r0
    166c:	30 5d       	subi	r19, 0xD0	; 208
    166e:	31 93       	st	Z+, r19
    1670:	de f6       	brtc	.-74     	; 0x1628 <__ultoa_invert+0xe>
    1672:	cf 01       	movw	r24, r30
    1674:	08 95       	ret
    1676:	46 2f       	mov	r20, r22
    1678:	47 70       	andi	r20, 0x07	; 7
    167a:	40 5d       	subi	r20, 0xD0	; 208
    167c:	41 93       	st	Z+, r20
    167e:	b3 e0       	ldi	r27, 0x03	; 3
    1680:	0f d0       	rcall	.+30     	; 0x16a0 <__ultoa_invert+0x86>
    1682:	c9 f7       	brne	.-14     	; 0x1676 <__ultoa_invert+0x5c>
    1684:	f6 cf       	rjmp	.-20     	; 0x1672 <__ultoa_invert+0x58>
    1686:	46 2f       	mov	r20, r22
    1688:	4f 70       	andi	r20, 0x0F	; 15
    168a:	40 5d       	subi	r20, 0xD0	; 208
    168c:	4a 33       	cpi	r20, 0x3A	; 58
    168e:	18 f0       	brcs	.+6      	; 0x1696 <__ultoa_invert+0x7c>
    1690:	49 5d       	subi	r20, 0xD9	; 217
    1692:	31 fd       	sbrc	r19, 1
    1694:	40 52       	subi	r20, 0x20	; 32
    1696:	41 93       	st	Z+, r20
    1698:	02 d0       	rcall	.+4      	; 0x169e <__ultoa_invert+0x84>
    169a:	a9 f7       	brne	.-22     	; 0x1686 <__ultoa_invert+0x6c>
    169c:	ea cf       	rjmp	.-44     	; 0x1672 <__ultoa_invert+0x58>
    169e:	b4 e0       	ldi	r27, 0x04	; 4
    16a0:	a6 95       	lsr	r26
    16a2:	97 95       	ror	r25
    16a4:	87 95       	ror	r24
    16a6:	77 95       	ror	r23
    16a8:	67 95       	ror	r22
    16aa:	ba 95       	dec	r27
    16ac:	c9 f7       	brne	.-14     	; 0x16a0 <__ultoa_invert+0x86>
    16ae:	00 97       	sbiw	r24, 0x00	; 0
    16b0:	61 05       	cpc	r22, r1
    16b2:	71 05       	cpc	r23, r1
    16b4:	08 95       	ret
    16b6:	9b 01       	movw	r18, r22
    16b8:	ac 01       	movw	r20, r24
    16ba:	0a 2e       	mov	r0, r26
    16bc:	06 94       	lsr	r0
    16be:	57 95       	ror	r21
    16c0:	47 95       	ror	r20
    16c2:	37 95       	ror	r19
    16c4:	27 95       	ror	r18
    16c6:	ba 95       	dec	r27
    16c8:	c9 f7       	brne	.-14     	; 0x16bc <__ultoa_invert+0xa2>
    16ca:	62 0f       	add	r22, r18
    16cc:	73 1f       	adc	r23, r19
    16ce:	84 1f       	adc	r24, r20
    16d0:	95 1f       	adc	r25, r21
    16d2:	a0 1d       	adc	r26, r0
    16d4:	08 95       	ret

000016d6 <__do_global_dtors>:
    16d6:	10 e0       	ldi	r17, 0x00	; 0
    16d8:	cd e7       	ldi	r28, 0x7D	; 125
    16da:	d0 e0       	ldi	r29, 0x00	; 0
    16dc:	04 c0       	rjmp	.+8      	; 0x16e6 <__do_global_dtors+0x10>
    16de:	fe 01       	movw	r30, r28
    16e0:	0e 94 9a 08 	call	0x1134	; 0x1134 <__tablejump2__>
    16e4:	21 96       	adiw	r28, 0x01	; 1
    16e6:	c0 38       	cpi	r28, 0x80	; 128
    16e8:	d1 07       	cpc	r29, r17
    16ea:	c9 f7       	brne	.-14     	; 0x16de <__do_global_dtors+0x8>
    16ec:	f8 94       	cli

000016ee <__stop_program>:
    16ee:	ff cf       	rjmp	.-2      	; 0x16ee <__stop_program>
