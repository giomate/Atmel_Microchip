
Zero_Cross_Detector_lib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00804000  00000fa0  00001034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fa0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000020  0080403c  0080403c  00001070  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001070  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004c8  00000000  00000000  00001110  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008bb2  00000000  00000000  000015d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000418c  00000000  00000000  0000a18a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002275  00000000  00000000  0000e316  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000960  00000000  00000000  0001058c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005a88  00000000  00000000  00010eec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001359  00000000  00000000  00016974  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003a8  00000000  00000000  00017ccd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__dtors_end>
   4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
   8:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
   c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  10:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  14:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__vector_5>
  18:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  1c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  20:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  24:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  28:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  2c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  30:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  34:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  38:	0c 94 0e 02 	jmp	0x41c	; 0x41c <__vector_14>
  3c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  40:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  44:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__vector_17>
  48:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  4c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  50:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  54:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  58:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  5c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  60:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  64:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  68:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  6c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  70:	0c 94 66 01 	jmp	0x2cc	; 0x2cc <__vector_28>
  74:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  78:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  7c:	0c 94 50 02 	jmp	0x4a0	; 0x4a0 <__vector_31>
  80:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  84:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  88:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  8c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  90:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  94:	0c 94 d0 03 	jmp	0x7a0	; 0x7a0 <__vector_37>
  98:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  9c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  a0:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  a4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  a8:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  ac:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  b0:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  b4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  b8:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  bc:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  c0:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  c4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  c8:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  cc:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  d0:	0c 94 87 01 	jmp	0x30e	; 0x30e <__vector_52>
  d4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  d8:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  dc:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  e0:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  e4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  e8:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  ec:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  f0:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>

000000f4 <__ctors_start>:
  f4:	58 01       	movw	r10, r16

000000f6 <__ctors_end>:
  f6:	5f 01       	movw	r10, r30

000000f8 <__dtors_end>:
  f8:	11 24       	eor	r1, r1
  fa:	1f be       	out	0x3f, r1	; 63
  fc:	cf ef       	ldi	r28, 0xFF	; 255
  fe:	cd bf       	out	0x3d, r28	; 61
 100:	df e7       	ldi	r29, 0x7F	; 127
 102:	de bf       	out	0x3e, r29	; 62

00000104 <__do_copy_data>:
 104:	10 e4       	ldi	r17, 0x40	; 64
 106:	a0 e0       	ldi	r26, 0x00	; 0
 108:	b0 e4       	ldi	r27, 0x40	; 64
 10a:	e0 ea       	ldi	r30, 0xA0	; 160
 10c:	ff e0       	ldi	r31, 0x0F	; 15
 10e:	00 e0       	ldi	r16, 0x00	; 0
 110:	0b bf       	out	0x3b, r16	; 59
 112:	02 c0       	rjmp	.+4      	; 0x118 <__do_copy_data+0x14>
 114:	07 90       	elpm	r0, Z+
 116:	0d 92       	st	X+, r0
 118:	ac 33       	cpi	r26, 0x3C	; 60
 11a:	b1 07       	cpc	r27, r17
 11c:	d9 f7       	brne	.-10     	; 0x114 <__do_copy_data+0x10>

0000011e <__do_clear_bss>:
 11e:	20 e4       	ldi	r18, 0x40	; 64
 120:	ac e3       	ldi	r26, 0x3C	; 60
 122:	b0 e4       	ldi	r27, 0x40	; 64
 124:	01 c0       	rjmp	.+2      	; 0x128 <.do_clear_bss_start>

00000126 <.do_clear_bss_loop>:
 126:	1d 92       	st	X+, r1

00000128 <.do_clear_bss_start>:
 128:	ac 35       	cpi	r26, 0x5C	; 92
 12a:	b2 07       	cpc	r27, r18
 12c:	e1 f7       	brne	.-8      	; 0x126 <.do_clear_bss_loop>

0000012e <__do_global_ctors>:
 12e:	10 e0       	ldi	r17, 0x00	; 0
 130:	cb e7       	ldi	r28, 0x7B	; 123
 132:	d0 e0       	ldi	r29, 0x00	; 0
 134:	04 c0       	rjmp	.+8      	; 0x13e <__do_global_ctors+0x10>
 136:	21 97       	sbiw	r28, 0x01	; 1
 138:	fe 01       	movw	r30, r28
 13a:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <__tablejump2__>
 13e:	ca 37       	cpi	r28, 0x7A	; 122
 140:	d1 07       	cpc	r29, r17
 142:	c9 f7       	brne	.-14     	; 0x136 <__do_global_ctors+0x8>
 144:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <main>
 148:	0c 94 c3 07 	jmp	0xf86	; 0xf86 <__do_global_dtors>

0000014c <__bad_interrupt>:
 14c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000150 <_Z41__static_initialization_and_destruction_0ii>:
		}
		
		_delay_ms(100);
			
	}
}
 150:	0f 93       	push	r16
 152:	1f 93       	push	r17
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
 158:	ec 01       	movw	r28, r24
 15a:	8b 01       	movw	r16, r22
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	39 f4       	brne	.+14     	; 0x16e <_Z41__static_initialization_and_destruction_0ii+0x1e>
 160:	6f 3f       	cpi	r22, 0xFF	; 255
 162:	7f 4f       	sbci	r23, 0xFF	; 255
 164:	21 f4       	brne	.+8      	; 0x16e <_Z41__static_initialization_and_destruction_0ii+0x1e>

#include <usart_basic.h>

#include "Zero_Cross_Counter.h"

static Zero_Cross_Counter counter;
 166:	8c e3       	ldi	r24, 0x3C	; 60
 168:	90 e4       	ldi	r25, 0x40	; 64
 16a:	0e 94 a4 01 	call	0x348	; 0x348 <_ZN18Zero_Cross_CounterC1Ev>
 16e:	cd 2b       	or	r28, r29
 170:	39 f4       	brne	.+14     	; 0x180 <_Z41__static_initialization_and_destruction_0ii+0x30>
 172:	0f 3f       	cpi	r16, 0xFF	; 255
 174:	1f 4f       	sbci	r17, 0xFF	; 255
 176:	21 f4       	brne	.+8      	; 0x180 <_Z41__static_initialization_and_destruction_0ii+0x30>
 178:	8c e3       	ldi	r24, 0x3C	; 60
 17a:	90 e4       	ldi	r25, 0x40	; 64
 17c:	0e 94 a9 01 	call	0x352	; 0x352 <_ZN18Zero_Cross_CounterD1Ev>
		}
		
		_delay_ms(100);
			
	}
}
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	1f 91       	pop	r17
 186:	0f 91       	pop	r16
 188:	08 95       	ret

0000018a <_Z10RTC_enablev>:


void RTC_enable(void)
{
	// Wait for RTC CTRLA to be unsynchronized
	while (RTC.STATUS & RTC_CTRLABUSY_bm) {
 18a:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
 18e:	80 fd       	sbrc	r24, 0
 190:	fc cf       	rjmp	.-8      	; 0x18a <_Z10RTC_enablev>
	}

	// Enable RTC
	RTC.CTRLA |= RTC_RTCEN_bm;
 192:	e0 e4       	ldi	r30, 0x40	; 64
 194:	f1 e0       	ldi	r31, 0x01	; 1
 196:	80 81       	ld	r24, Z
 198:	81 60       	ori	r24, 0x01	; 1
 19a:	80 83       	st	Z, r24
 19c:	08 95       	ret

0000019e <__vector_5>:
}

ISR(RTC_CNT_vect)
{
 19e:	1f 92       	push	r1
 1a0:	0f 92       	push	r0
 1a2:	0f b6       	in	r0, 0x3f	; 63
 1a4:	0f 92       	push	r0
 1a6:	11 24       	eor	r1, r1
 1a8:	8f 93       	push	r24
 *
 * \param[in] pin       The pin number within port
 */
static inline void PORTB_toggle_pin_level(const uint8_t pin)
{
	VPORTB.IN |= 1 << pin;
 1aa:	86 b1       	in	r24, 0x06	; 6
 1ac:	88 60       	ori	r24, 0x08	; 8
 1ae:	86 b9       	out	0x06, r24	; 6
	/* Toggle LED0 */
	LED0_toggle_level();

	/* Overflow interrupt flag has to be cleared manually */
	RTC.INTFLAGS = RTC_OVF_bm;
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x7e0143>
}
 1b6:	8f 91       	pop	r24
 1b8:	0f 90       	pop	r0
 1ba:	0f be       	out	0x3f, r0	; 63
 1bc:	0f 90       	pop	r0
 1be:	1f 90       	pop	r1
 1c0:	18 95       	reti

000001c2 <main>:
	uint32_t last_frequency_b=0;
	uint32_t last_frequency_c=0;
		uint32_t current_frequency_b=0;
		uint32_t current_frequency_c=0;
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
 1c2:	0e 94 8a 02 	call	0x514	; 0x514 <atmel_start_init>
	RTC_enable();
 1c6:	0e 94 c5 00 	call	0x18a	; 0x18a <_Z10RTC_enablev>
	//ENABLE_INTERRUPTS();
	counter.Init();
 1ca:	8c e3       	ldi	r24, 0x3C	; 60
 1cc:	90 e4       	ldi	r25, 0x40	; 64
 1ce:	0e 94 aa 01 	call	0x354	; 0x354 <_ZN18Zero_Cross_Counter4InitEv>
	asm("nop");
 1d2:	00 00       	nop
	printf("hello\n\r");
 1d4:	8e e0       	ldi	r24, 0x0E	; 14
 1d6:	90 e4       	ldi	r25, 0x40	; 64
 1d8:	9f 93       	push	r25
 1da:	8f 93       	push	r24
 1dc:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <printf>
 1e0:	0f 90       	pop	r0
 1e2:	0f 90       	pop	r0
}

int main(void)
{
	uint32_t last_frequency_b=0;
	uint32_t last_frequency_c=0;
 1e4:	81 2c       	mov	r8, r1
 1e6:	91 2c       	mov	r9, r1
 1e8:	54 01       	movw	r10, r8
	RTC.INTFLAGS = RTC_OVF_bm;
}

int main(void)
{
	uint32_t last_frequency_b=0;
 1ea:	c1 2c       	mov	r12, r1
 1ec:	d1 2c       	mov	r13, r1
 1ee:	76 01       	movw	r14, r12
	counter.Init();
	asm("nop");
	printf("hello\n\r");
	/* Replace with your application code */
	while (1) {
		current_frequency_c=(uint32_t)(24000000/(counter.capture_timer_fall));
 1f0:	20 91 3f 40 	lds	r18, 0x403F	; 0x80403f <__data_end+0x3>
 1f4:	30 91 40 40 	lds	r19, 0x4040	; 0x804040 <__data_end+0x4>
 1f8:	40 e0       	ldi	r20, 0x00	; 0
 1fa:	50 e0       	ldi	r21, 0x00	; 0
 1fc:	60 e0       	ldi	r22, 0x00	; 0
 1fe:	76 e3       	ldi	r23, 0x36	; 54
 200:	8e e6       	ldi	r24, 0x6E	; 110
 202:	91 e0       	ldi	r25, 0x01	; 1
 204:	0e 94 b1 04 	call	0x962	; 0x962 <__divmodsi4>
 208:	29 01       	movw	r4, r18
 20a:	3a 01       	movw	r6, r20
		if (last_frequency_c!=current_frequency_c)
 20c:	82 16       	cp	r8, r18
 20e:	93 06       	cpc	r9, r19
 210:	a4 06       	cpc	r10, r20
 212:	b5 06       	cpc	r11, r21
 214:	c1 f0       	breq	.+48     	; 0x246 <__EEPROM_REGION_LENGTH__+0x46>
		{
			if (counter.capture_timer_fall>0)
 216:	80 91 3f 40 	lds	r24, 0x403F	; 0x80403f <__data_end+0x3>
 21a:	90 91 40 40 	lds	r25, 0x4040	; 0x804040 <__data_end+0x4>
 21e:	89 2b       	or	r24, r25
 220:	91 f0       	breq	.+36     	; 0x246 <__EEPROM_REGION_LENGTH__+0x46>
			{
				last_frequency_c=current_frequency_c;
				
				printf("Counter C : %lu \n\r", current_frequency_c);
 222:	7f 92       	push	r7
 224:	6f 92       	push	r6
 226:	5f 92       	push	r5
 228:	2f 93       	push	r18
 22a:	86 e1       	ldi	r24, 0x16	; 22
 22c:	90 e4       	ldi	r25, 0x40	; 64
 22e:	9f 93       	push	r25
 230:	8f 93       	push	r24
 232:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <printf>
 236:	0f 90       	pop	r0
 238:	0f 90       	pop	r0
 23a:	0f 90       	pop	r0
 23c:	0f 90       	pop	r0
 23e:	0f 90       	pop	r0
 240:	0f 90       	pop	r0
		current_frequency_c=(uint32_t)(24000000/(counter.capture_timer_fall));
		if (last_frequency_c!=current_frequency_c)
		{
			if (counter.capture_timer_fall>0)
			{
				last_frequency_c=current_frequency_c;
 242:	53 01       	movw	r10, r6
 244:	42 01       	movw	r8, r4
		} 
		else
		{
			
		}
		current_frequency_b=(uint32_t)(24000000/(counter.capture_timer_rise));
 246:	20 91 41 40 	lds	r18, 0x4041	; 0x804041 <__data_end+0x5>
 24a:	30 91 42 40 	lds	r19, 0x4042	; 0x804042 <__data_end+0x6>
 24e:	40 e0       	ldi	r20, 0x00	; 0
 250:	50 e0       	ldi	r21, 0x00	; 0
 252:	60 e0       	ldi	r22, 0x00	; 0
 254:	76 e3       	ldi	r23, 0x36	; 54
 256:	8e e6       	ldi	r24, 0x6E	; 110
 258:	91 e0       	ldi	r25, 0x01	; 1
 25a:	0e 94 b1 04 	call	0x962	; 0x962 <__divmodsi4>
 25e:	29 01       	movw	r4, r18
 260:	3a 01       	movw	r6, r20
		if (last_frequency_b!=current_frequency_b)
 262:	c2 16       	cp	r12, r18
 264:	d3 06       	cpc	r13, r19
 266:	e4 06       	cpc	r14, r20
 268:	f5 06       	cpc	r15, r21
 26a:	c1 f0       	breq	.+48     	; 0x29c <__EEPROM_REGION_LENGTH__+0x9c>
		{
			if (counter.capture_timer_rise>0)
 26c:	80 91 41 40 	lds	r24, 0x4041	; 0x804041 <__data_end+0x5>
 270:	90 91 42 40 	lds	r25, 0x4042	; 0x804042 <__data_end+0x6>
 274:	89 2b       	or	r24, r25
 276:	91 f0       	breq	.+36     	; 0x29c <__EEPROM_REGION_LENGTH__+0x9c>
			{
				last_frequency_b=current_frequency_b;
				
				printf("Counter B : %lu \n\r", current_frequency_b);
 278:	7f 92       	push	r7
 27a:	6f 92       	push	r6
 27c:	5f 92       	push	r5
 27e:	2f 93       	push	r18
 280:	89 e2       	ldi	r24, 0x29	; 41
 282:	90 e4       	ldi	r25, 0x40	; 64
 284:	9f 93       	push	r25
 286:	8f 93       	push	r24
 288:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <printf>
 28c:	0f 90       	pop	r0
 28e:	0f 90       	pop	r0
 290:	0f 90       	pop	r0
 292:	0f 90       	pop	r0
 294:	0f 90       	pop	r0
 296:	0f 90       	pop	r0
		current_frequency_b=(uint32_t)(24000000/(counter.capture_timer_rise));
		if (last_frequency_b!=current_frequency_b)
		{
			if (counter.capture_timer_rise>0)
			{
				last_frequency_b=current_frequency_b;
 298:	73 01       	movw	r14, r6
 29a:	62 01       	movw	r12, r4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 29c:	2f ef       	ldi	r18, 0xFF	; 255
 29e:	82 e5       	ldi	r24, 0x52	; 82
 2a0:	97 e0       	ldi	r25, 0x07	; 7
 2a2:	21 50       	subi	r18, 0x01	; 1
 2a4:	80 40       	sbci	r24, 0x00	; 0
 2a6:	90 40       	sbci	r25, 0x00	; 0
 2a8:	e1 f7       	brne	.-8      	; 0x2a2 <__EEPROM_REGION_LENGTH__+0xa2>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <__EEPROM_REGION_LENGTH__+0xac>
 2ac:	00 00       	nop
 2ae:	a0 cf       	rjmp	.-192    	; 0x1f0 <main+0x2e>

000002b0 <_GLOBAL__sub_I__Z10RTC_enablev>:
		}
		
		_delay_ms(100);
			
	}
}
 2b0:	6f ef       	ldi	r22, 0xFF	; 255
 2b2:	7f ef       	ldi	r23, 0xFF	; 255
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	0e 94 a8 00 	call	0x150	; 0x150 <_Z41__static_initialization_and_destruction_0ii>
 2bc:	08 95       	ret

000002be <_GLOBAL__sub_D__Z10RTC_enablev>:
 2be:	6f ef       	ldi	r22, 0xFF	; 255
 2c0:	7f ef       	ldi	r23, 0xFF	; 255
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	0e 94 a8 00 	call	0x150	; 0x150 <_Z41__static_initialization_and_destruction_0ii>
 2ca:	08 95       	ret

000002cc <__vector_28>:
static uint16_t capture_value_falling;
static uint16_t capture_value_tc_a;
static uint16_t capture_value_tc_b;

ISR(ZCD0_ZCD_vect)
{
 2cc:	1f 92       	push	r1
 2ce:	0f 92       	push	r0
 2d0:	0f b6       	in	r0, 0x3f	; 63
 2d2:	0f 92       	push	r0
 2d4:	11 24       	eor	r1, r1
 2d6:	0b b6       	in	r0, 0x3b	; 59
 2d8:	0f 92       	push	r0
 2da:	8f 93       	push	r24
 2dc:	ef 93       	push	r30
 2de:	ff 93       	push	r31
	/* Insert your ZCD interrupt handling code here */
	ptr_zero_cross_handler->leading_edge=true;
 2e0:	e0 91 4c 40 	lds	r30, 0x404C	; 0x80404c <ptr_zero_cross_handler>
 2e4:	f0 91 4d 40 	lds	r31, 0x404D	; 0x80404d <ptr_zero_cross_handler+0x1>
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	80 83       	st	Z, r24
	ptr_zero_cross_handler->falling_edge=false;
 2ec:	e0 91 4c 40 	lds	r30, 0x404C	; 0x80404c <ptr_zero_cross_handler>
 2f0:	f0 91 4d 40 	lds	r31, 0x404D	; 0x80404d <ptr_zero_cross_handler+0x1>
 2f4:	12 82       	std	Z+2, r1	; 0x02
	//ptr_zero_cross_handler->CaptureCounterC();

	ZCD0.STATUS = ZCD_CROSSIF_bm;
 2f6:	80 93 c3 06 	sts	0x06C3, r24	; 0x8006c3 <__TEXT_REGION_LENGTH__+0x7e06c3>
}
 2fa:	ff 91       	pop	r31
 2fc:	ef 91       	pop	r30
 2fe:	8f 91       	pop	r24
 300:	0f 90       	pop	r0
 302:	0b be       	out	0x3b, r0	; 59
 304:	0f 90       	pop	r0
 306:	0f be       	out	0x3f, r0	; 63
 308:	0f 90       	pop	r0
 30a:	1f 90       	pop	r1
 30c:	18 95       	reti

0000030e <__vector_52>:

ISR(ZCD1_ZCD_vect)
{
 30e:	1f 92       	push	r1
 310:	0f 92       	push	r0
 312:	0f b6       	in	r0, 0x3f	; 63
 314:	0f 92       	push	r0
 316:	11 24       	eor	r1, r1
 318:	0b b6       	in	r0, 0x3b	; 59
 31a:	0f 92       	push	r0
 31c:	8f 93       	push	r24
 31e:	ef 93       	push	r30
 320:	ff 93       	push	r31
	/* Insert your ZCD interrupt handling code here */
	ptr_zero_cross_handler->falling_edge=true;
 322:	e0 91 4c 40 	lds	r30, 0x404C	; 0x80404c <ptr_zero_cross_handler>
 326:	f0 91 4d 40 	lds	r31, 0x404D	; 0x80404d <ptr_zero_cross_handler+0x1>
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	82 83       	std	Z+2, r24	; 0x02
	ptr_zero_cross_handler->leading_edge=false;
 32e:	10 82       	st	Z, r1
	ZCD1.STATUS = ZCD_CROSSIF_bm;
 330:	80 93 cb 06 	sts	0x06CB, r24	; 0x8006cb <__TEXT_REGION_LENGTH__+0x7e06cb>
}
 334:	ff 91       	pop	r31
 336:	ef 91       	pop	r30
 338:	8f 91       	pop	r24
 33a:	0f 90       	pop	r0
 33c:	0b be       	out	0x3b, r0	; 59
 33e:	0f 90       	pop	r0
 340:	0f be       	out	0x3f, r0	; 63
 342:	0f 90       	pop	r0
 344:	1f 90       	pop	r1
 346:	18 95       	reti

00000348 <_ZN18Zero_Cross_CounterC1Ev>:
	TCD0.INTFLAGS = TCD_TRIGA_bm | TCD_TRIGB_bm;
}
// default constructor
Zero_Cross_Counter::Zero_Cross_Counter()
{
	ptr_zero_cross_handler=this;
 348:	80 93 4c 40 	sts	0x404C, r24	; 0x80404c <ptr_zero_cross_handler>
 34c:	90 93 4d 40 	sts	0x404D, r25	; 0x80404d <ptr_zero_cross_handler+0x1>
 350:	08 95       	ret

00000352 <_ZN18Zero_Cross_CounterD1Ev>:
} //Zero_Cross_Counter

// default destructor
Zero_Cross_Counter::~Zero_Cross_Counter()
 352:	08 95       	ret

00000354 <_ZN18Zero_Cross_Counter4InitEv>:
 354:	2f ef       	ldi	r18, 0xFF	; 255
 356:	82 e5       	ldi	r24, 0x52	; 82
 358:	97 e0       	ldi	r25, 0x07	; 7
 35a:	21 50       	subi	r18, 0x01	; 1
 35c:	80 40       	sbci	r24, 0x00	; 0
 35e:	90 40       	sbci	r25, 0x00	; 0
 360:	e1 f7       	brne	.-8      	; 0x35a <_ZN18Zero_Cross_Counter4InitEv+0x6>
 362:	00 c0       	rjmp	.+0      	; 0x364 <_ZN18Zero_Cross_Counter4InitEv+0x10>
 364:	00 00       	nop
} //~Zero_Cross_Counter

bool Zero_Cross_Counter::Init(){
	_delay_ms(100);
	return true;
}
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	08 95       	ret

0000036a <_ZN18Zero_Cross_Counter15CaptureCounterCEv>:


void Zero_Cross_Counter::CaptureCounterC(void){
 36a:	fc 01       	movw	r30, r24
	if (toogle_bit)
 36c:	83 85       	ldd	r24, Z+11	; 0x0b
 36e:	88 23       	and	r24, r24
 370:	39 f0       	breq	.+14     	; 0x380 <_ZN18Zero_Cross_Counter15CaptureCounterCEv+0x16>
	{
	//	TCD0.CTRLE=TCD_SCAPTUREA_bm;
	//	while ((TCD0.STATUS & TCD_ENRDY_bm) == 0)
	//	; // Wait for Enable Ready to be high.
		capture_timer_tc_a=TCD0.CAPTUREA;
 372:	80 91 a2 0b 	lds	r24, 0x0BA2	; 0x800ba2 <__TEXT_REGION_LENGTH__+0x7e0ba2>
 376:	90 91 a3 0b 	lds	r25, 0x0BA3	; 0x800ba3 <__TEXT_REGION_LENGTH__+0x7e0ba3>
 37a:	87 83       	std	Z+7, r24	; 0x07
 37c:	90 87       	std	Z+8, r25	; 0x08
 37e:	06 c0       	rjmp	.+12     	; 0x38c <_ZN18Zero_Cross_Counter15CaptureCounterCEv+0x22>
	else
	{
	//		TCD0.CTRLE=TCD_SCAPTUREB_bm;
	//		while ((TCD0.STATUS & TCD_ENRDY_bm) == 0)
	//		; // Wait for Enable Ready to be high.
		capture_timer_tc_b=TCD0.CAPTUREB;
 380:	80 91 a4 0b 	lds	r24, 0x0BA4	; 0x800ba4 <__TEXT_REGION_LENGTH__+0x7e0ba4>
 384:	90 91 a5 0b 	lds	r25, 0x0BA5	; 0x800ba5 <__TEXT_REGION_LENGTH__+0x7e0ba5>
 388:	81 87       	std	Z+9, r24	; 0x09
 38a:	92 87       	std	Z+10, r25	; 0x0a
		
	}
	TCD0.CTRLE=TCD_RESTART_bm;
 38c:	84 e0       	ldi	r24, 0x04	; 4
 38e:	80 93 84 0b 	sts	0x0B84, r24	; 0x800b84 <__TEXT_REGION_LENGTH__+0x7e0b84>
	toogle_bit=!toogle_bit;
 392:	93 85       	ldd	r25, Z+11	; 0x0b
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	89 27       	eor	r24, r25
 398:	83 87       	std	Z+11, r24	; 0x0b
	leading_edge=false;
 39a:	10 82       	st	Z, r1
 39c:	08 95       	ret

0000039e <__vector_17>:
	ptr_zero_cross_handler->CaptureCounterB_Falling();
	TCB2.INTFLAGS = TCB_CAPT_bm;
}

ISR(TCD0_TRIG_vect)
{
 39e:	1f 92       	push	r1
 3a0:	0f 92       	push	r0
 3a2:	0f b6       	in	r0, 0x3f	; 63
 3a4:	0f 92       	push	r0
 3a6:	11 24       	eor	r1, r1
 3a8:	0b b6       	in	r0, 0x3b	; 59
 3aa:	0f 92       	push	r0
 3ac:	2f 93       	push	r18
 3ae:	3f 93       	push	r19
 3b0:	4f 93       	push	r20
 3b2:	5f 93       	push	r21
 3b4:	6f 93       	push	r22
 3b6:	7f 93       	push	r23
 3b8:	8f 93       	push	r24
 3ba:	9f 93       	push	r25
 3bc:	af 93       	push	r26
 3be:	bf 93       	push	r27
 3c0:	ef 93       	push	r30
 3c2:	ff 93       	push	r31
		//capture_value_b= TCD0_CAPTUREA;
		capture_value_tc_a= TCD0_CAPTUREA;
 3c4:	80 91 a2 0b 	lds	r24, 0x0BA2	; 0x800ba2 <__TEXT_REGION_LENGTH__+0x7e0ba2>
 3c8:	90 91 a3 0b 	lds	r25, 0x0BA3	; 0x800ba3 <__TEXT_REGION_LENGTH__+0x7e0ba3>
		capture_value_tc_b= TCD0_CAPTUREB;
 3cc:	80 91 a4 0b 	lds	r24, 0x0BA4	; 0x800ba4 <__TEXT_REGION_LENGTH__+0x7e0ba4>
 3d0:	90 91 a5 0b 	lds	r25, 0x0BA5	; 0x800ba5 <__TEXT_REGION_LENGTH__+0x7e0ba5>
		ptr_zero_cross_handler->CaptureCounterC();
 3d4:	80 91 4c 40 	lds	r24, 0x404C	; 0x80404c <ptr_zero_cross_handler>
 3d8:	90 91 4d 40 	lds	r25, 0x404D	; 0x80404d <ptr_zero_cross_handler+0x1>
 3dc:	0e 94 b5 01 	call	0x36a	; 0x36a <_ZN18Zero_Cross_Counter15CaptureCounterCEv>
	/* Insert your TCD TRIGB interrupt handling code here */
	
	

	/* TRIGA and TRIGB interrupt flags have to be cleared manually */
	TCD0.INTFLAGS = TCD_TRIGA_bm | TCD_TRIGB_bm;
 3e0:	8c e0       	ldi	r24, 0x0C	; 12
 3e2:	80 93 8d 0b 	sts	0x0B8D, r24	; 0x800b8d <__TEXT_REGION_LENGTH__+0x7e0b8d>
}
 3e6:	ff 91       	pop	r31
 3e8:	ef 91       	pop	r30
 3ea:	bf 91       	pop	r27
 3ec:	af 91       	pop	r26
 3ee:	9f 91       	pop	r25
 3f0:	8f 91       	pop	r24
 3f2:	7f 91       	pop	r23
 3f4:	6f 91       	pop	r22
 3f6:	5f 91       	pop	r21
 3f8:	4f 91       	pop	r20
 3fa:	3f 91       	pop	r19
 3fc:	2f 91       	pop	r18
 3fe:	0f 90       	pop	r0
 400:	0b be       	out	0x3b, r0	; 59
 402:	0f 90       	pop	r0
 404:	0f be       	out	0x3f, r0	; 63
 406:	0f 90       	pop	r0
 408:	1f 90       	pop	r1
 40a:	18 95       	reti

0000040c <_ZN18Zero_Cross_Counter22CaptureCounterB_RisingEv>:
	TCD0.CTRLE=TCD_RESTART_bm;
	toogle_bit=!toogle_bit;
	leading_edge=false;
}
void Zero_Cross_Counter::CaptureCounterB_Rising(void){
	capture_timer_rise= capture_value_rising;
 40c:	20 91 4a 40 	lds	r18, 0x404A	; 0x80404a <_ZL20capture_value_rising>
 410:	30 91 4b 40 	lds	r19, 0x404B	; 0x80404b <_ZL20capture_value_rising+0x1>
 414:	fc 01       	movw	r30, r24
 416:	25 83       	std	Z+5, r18	; 0x05
 418:	36 83       	std	Z+6, r19	; 0x06
 41a:	08 95       	ret

0000041c <__vector_14>:
	ptr_zero_cross_handler->falling_edge=true;
	ptr_zero_cross_handler->leading_edge=false;
	ZCD1.STATUS = ZCD_CROSSIF_bm;
}
ISR(TCB0_INT_vect)
{
 41c:	1f 92       	push	r1
 41e:	0f 92       	push	r0
 420:	0f b6       	in	r0, 0x3f	; 63
 422:	0f 92       	push	r0
 424:	11 24       	eor	r1, r1
 426:	0b b6       	in	r0, 0x3b	; 59
 428:	0f 92       	push	r0
 42a:	2f 93       	push	r18
 42c:	3f 93       	push	r19
 42e:	4f 93       	push	r20
 430:	5f 93       	push	r21
 432:	6f 93       	push	r22
 434:	7f 93       	push	r23
 436:	8f 93       	push	r24
 438:	9f 93       	push	r25
 43a:	af 93       	push	r26
 43c:	bf 93       	push	r27
 43e:	cf 93       	push	r28
 440:	df 93       	push	r29
 442:	ef 93       	push	r30
 444:	ff 93       	push	r31
	capture_value_rising= TCB0.CNT;
 446:	c0 e0       	ldi	r28, 0x00	; 0
 448:	db e0       	ldi	r29, 0x0B	; 11
 44a:	8a 85       	ldd	r24, Y+10	; 0x0a
 44c:	9b 85       	ldd	r25, Y+11	; 0x0b
 44e:	80 93 4a 40 	sts	0x404A, r24	; 0x80404a <_ZL20capture_value_rising>
 452:	90 93 4b 40 	sts	0x404B, r25	; 0x80404b <_ZL20capture_value_rising+0x1>
// 	if (ptr_zero_cross_handler->leading_edge==true)
// 	{
// 		ptr_zero_cross_handler->CaptureCounterB_Rising();
	ptr_zero_cross_handler->CaptureCounterB_Rising();
 456:	80 91 4c 40 	lds	r24, 0x404C	; 0x80404c <ptr_zero_cross_handler>
 45a:	90 91 4d 40 	lds	r25, 0x404D	; 0x80404d <ptr_zero_cross_handler+0x1>
 45e:	0e 94 06 02 	call	0x40c	; 0x40c <_ZN18Zero_Cross_Counter22CaptureCounterB_RisingEv>

	TCB0.INTFLAGS = TCB_CAPT_bm;
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	8e 83       	std	Y+6, r24	; 0x06
}
 466:	ff 91       	pop	r31
 468:	ef 91       	pop	r30
 46a:	df 91       	pop	r29
 46c:	cf 91       	pop	r28
 46e:	bf 91       	pop	r27
 470:	af 91       	pop	r26
 472:	9f 91       	pop	r25
 474:	8f 91       	pop	r24
 476:	7f 91       	pop	r23
 478:	6f 91       	pop	r22
 47a:	5f 91       	pop	r21
 47c:	4f 91       	pop	r20
 47e:	3f 91       	pop	r19
 480:	2f 91       	pop	r18
 482:	0f 90       	pop	r0
 484:	0b be       	out	0x3b, r0	; 59
 486:	0f 90       	pop	r0
 488:	0f be       	out	0x3f, r0	; 63
 48a:	0f 90       	pop	r0
 48c:	1f 90       	pop	r1
 48e:	18 95       	reti

00000490 <_ZN18Zero_Cross_Counter23CaptureCounterB_FallingEv>:
}
void Zero_Cross_Counter::CaptureCounterB_Rising(void){
	capture_timer_rise= capture_value_rising;
}
void Zero_Cross_Counter::CaptureCounterB_Falling(void){
	capture_timer_fall= capture_value_falling;
 490:	20 91 48 40 	lds	r18, 0x4048	; 0x804048 <_ZL21capture_value_falling>
 494:	30 91 49 40 	lds	r19, 0x4049	; 0x804049 <_ZL21capture_value_falling+0x1>
 498:	fc 01       	movw	r30, r24
 49a:	23 83       	std	Z+3, r18	; 0x03
 49c:	34 83       	std	Z+4, r19	; 0x04
 49e:	08 95       	ret

000004a0 <__vector_31>:
	ptr_zero_cross_handler->CaptureCounterB_Rising();

	TCB0.INTFLAGS = TCB_CAPT_bm;
}
ISR(TCB2_INT_vect)
{
 4a0:	1f 92       	push	r1
 4a2:	0f 92       	push	r0
 4a4:	0f b6       	in	r0, 0x3f	; 63
 4a6:	0f 92       	push	r0
 4a8:	11 24       	eor	r1, r1
 4aa:	0b b6       	in	r0, 0x3b	; 59
 4ac:	0f 92       	push	r0
 4ae:	2f 93       	push	r18
 4b0:	3f 93       	push	r19
 4b2:	4f 93       	push	r20
 4b4:	5f 93       	push	r21
 4b6:	6f 93       	push	r22
 4b8:	7f 93       	push	r23
 4ba:	8f 93       	push	r24
 4bc:	9f 93       	push	r25
 4be:	af 93       	push	r26
 4c0:	bf 93       	push	r27
 4c2:	cf 93       	push	r28
 4c4:	df 93       	push	r29
 4c6:	ef 93       	push	r30
 4c8:	ff 93       	push	r31
		capture_value_falling= TCB2.CNT;
 4ca:	c0 e2       	ldi	r28, 0x20	; 32
 4cc:	db e0       	ldi	r29, 0x0B	; 11
 4ce:	8a 85       	ldd	r24, Y+10	; 0x0a
 4d0:	9b 85       	ldd	r25, Y+11	; 0x0b
 4d2:	80 93 48 40 	sts	0x4048, r24	; 0x804048 <_ZL21capture_value_falling>
 4d6:	90 93 49 40 	sts	0x4049, r25	; 0x804049 <_ZL21capture_value_falling+0x1>
// 		if (ptr_zero_cross_handler->falling_edge==true)
// 		{
// 			ptr_zero_cross_handler->CaptureCounterB_Falling();
// 			
	ptr_zero_cross_handler->CaptureCounterB_Falling();
 4da:	80 91 4c 40 	lds	r24, 0x404C	; 0x80404c <ptr_zero_cross_handler>
 4de:	90 91 4d 40 	lds	r25, 0x404D	; 0x80404d <ptr_zero_cross_handler+0x1>
 4e2:	0e 94 48 02 	call	0x490	; 0x490 <_ZN18Zero_Cross_Counter23CaptureCounterB_FallingEv>
	TCB2.INTFLAGS = TCB_CAPT_bm;
 4e6:	81 e0       	ldi	r24, 0x01	; 1
 4e8:	8e 83       	std	Y+6, r24	; 0x06
}
 4ea:	ff 91       	pop	r31
 4ec:	ef 91       	pop	r30
 4ee:	df 91       	pop	r29
 4f0:	cf 91       	pop	r28
 4f2:	bf 91       	pop	r27
 4f4:	af 91       	pop	r26
 4f6:	9f 91       	pop	r25
 4f8:	8f 91       	pop	r24
 4fa:	7f 91       	pop	r23
 4fc:	6f 91       	pop	r22
 4fe:	5f 91       	pop	r21
 500:	4f 91       	pop	r20
 502:	3f 91       	pop	r19
 504:	2f 91       	pop	r18
 506:	0f 90       	pop	r0
 508:	0b be       	out	0x3b, r0	; 59
 50a:	0f 90       	pop	r0
 50c:	0f be       	out	0x3f, r0	; 63
 50e:	0f 90       	pop	r0
 510:	1f 90       	pop	r1
 512:	18 95       	reti

00000514 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
 514:	0e 94 4e 03 	call	0x69c	; 0x69c <system_init>
 518:	08 95       	ret

0000051a <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 51a:	80 e0       	ldi	r24, 0x00	; 0
 51c:	08 c0       	rjmp	.+16     	; 0x52e <mcu_init+0x14>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 51e:	e8 2f       	mov	r30, r24
 520:	f0 e0       	ldi	r31, 0x00	; 0
 522:	e0 5f       	subi	r30, 0xF0	; 240
 524:	fb 4f       	sbci	r31, 0xFB	; 251
 526:	90 81       	ld	r25, Z
 528:	98 60       	ori	r25, 0x08	; 8
 52a:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 52c:	8f 5f       	subi	r24, 0xFF	; 255
 52e:	88 30       	cpi	r24, 0x08	; 8
 530:	b0 f3       	brcs	.-20     	; 0x51e <mcu_init+0x4>
 532:	80 e0       	ldi	r24, 0x00	; 0
 534:	08 c0       	rjmp	.+16     	; 0x546 <mcu_init+0x2c>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 536:	e8 2f       	mov	r30, r24
 538:	f0 e0       	ldi	r31, 0x00	; 0
 53a:	e0 5d       	subi	r30, 0xD0	; 208
 53c:	fb 4f       	sbci	r31, 0xFB	; 251
 53e:	90 81       	ld	r25, Z
 540:	98 60       	ori	r25, 0x08	; 8
 542:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 544:	8f 5f       	subi	r24, 0xFF	; 255
 546:	88 30       	cpi	r24, 0x08	; 8
 548:	b0 f3       	brcs	.-20     	; 0x536 <mcu_init+0x1c>
 54a:	80 e0       	ldi	r24, 0x00	; 0
 54c:	08 c0       	rjmp	.+16     	; 0x55e <mcu_init+0x44>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 54e:	e8 2f       	mov	r30, r24
 550:	f0 e0       	ldi	r31, 0x00	; 0
 552:	e0 5b       	subi	r30, 0xB0	; 176
 554:	fb 4f       	sbci	r31, 0xFB	; 251
 556:	90 81       	ld	r25, Z
 558:	98 60       	ori	r25, 0x08	; 8
 55a:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 55c:	8f 5f       	subi	r24, 0xFF	; 255
 55e:	88 30       	cpi	r24, 0x08	; 8
 560:	b0 f3       	brcs	.-20     	; 0x54e <mcu_init+0x34>
 562:	80 e0       	ldi	r24, 0x00	; 0
 564:	08 c0       	rjmp	.+16     	; 0x576 <mcu_init+0x5c>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 566:	e8 2f       	mov	r30, r24
 568:	f0 e0       	ldi	r31, 0x00	; 0
 56a:	e0 59       	subi	r30, 0x90	; 144
 56c:	fb 4f       	sbci	r31, 0xFB	; 251
 56e:	90 81       	ld	r25, Z
 570:	98 60       	ori	r25, 0x08	; 8
 572:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 574:	8f 5f       	subi	r24, 0xFF	; 255
 576:	88 30       	cpi	r24, 0x08	; 8
 578:	b0 f3       	brcs	.-20     	; 0x566 <mcu_init+0x4c>
 57a:	80 e0       	ldi	r24, 0x00	; 0
 57c:	08 c0       	rjmp	.+16     	; 0x58e <mcu_init+0x74>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 57e:	e8 2f       	mov	r30, r24
 580:	f0 e0       	ldi	r31, 0x00	; 0
 582:	e0 57       	subi	r30, 0x70	; 112
 584:	fb 4f       	sbci	r31, 0xFB	; 251
 586:	90 81       	ld	r25, Z
 588:	98 60       	ori	r25, 0x08	; 8
 58a:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 58c:	8f 5f       	subi	r24, 0xFF	; 255
 58e:	88 30       	cpi	r24, 0x08	; 8
 590:	b0 f3       	brcs	.-20     	; 0x57e <mcu_init+0x64>
 592:	80 e0       	ldi	r24, 0x00	; 0
 594:	08 c0       	rjmp	.+16     	; 0x5a6 <mcu_init+0x8c>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 596:	e8 2f       	mov	r30, r24
 598:	f0 e0       	ldi	r31, 0x00	; 0
 59a:	e0 55       	subi	r30, 0x50	; 80
 59c:	fb 4f       	sbci	r31, 0xFB	; 251
 59e:	90 81       	ld	r25, Z
 5a0:	98 60       	ori	r25, 0x08	; 8
 5a2:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 5a4:	8f 5f       	subi	r24, 0xFF	; 255
 5a6:	88 30       	cpi	r24, 0x08	; 8
 5a8:	b0 f3       	brcs	.-20     	; 0x596 <mcu_init+0x7c>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
 5aa:	08 95       	ret

000005ac <OPERATIONAL_AMPLIFIER_0_initialization>:
 */
static inline void PORTD_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
 5ac:	e7 e7       	ldi	r30, 0x77	; 119
 5ae:	f4 e0       	ldi	r31, 0x04	; 4
 5b0:	80 81       	ld	r24, Z
 5b2:	88 7f       	andi	r24, 0xF8	; 248
 5b4:	84 60       	ori	r24, 0x04	; 4
 5b6:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 5b8:	80 81       	ld	r24, Z
 5ba:	87 7f       	andi	r24, 0xF7	; 247
 5bc:	80 83       	st	Z, r24
 */
static inline void PORTD_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
 5be:	e5 e7       	ldi	r30, 0x75	; 117
 5c0:	f4 e0       	ldi	r31, 0x04	; 4
 5c2:	80 81       	ld	r24, Z
 5c4:	88 7f       	andi	r24, 0xF8	; 248
 5c6:	84 60       	ori	r24, 0x04	; 4
 5c8:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 5ca:	80 81       	ld	r24, Z
 5cc:	87 7f       	andi	r24, 0xF7	; 247
 5ce:	80 83       	st	Z, r24
	// Disable digital input buffer
	PD5_set_isc(PORT_ISC_INPUT_DISABLE_gc);
	// Disable pull-up resistor
	PD5_set_pull_mode(PORT_PULL_OFF);

	OPERATIONAL_AMPLIFIER_0_init();
 5d0:	0e 94 98 03 	call	0x730	; 0x730 <OPERATIONAL_AMPLIFIER_0_init>
 5d4:	08 95       	ret

000005d6 <USART_0_initialization>:
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
 5d6:	84 b1       	in	r24, 0x04	; 4
 5d8:	8d 7f       	andi	r24, 0xFD	; 253
 5da:	84 b9       	out	0x04, r24	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 5dc:	e1 e3       	ldi	r30, 0x31	; 49
 5de:	f4 e0       	ldi	r31, 0x04	; 4
 5e0:	80 81       	ld	r24, Z
 5e2:	87 7f       	andi	r24, 0xF7	; 247
 5e4:	80 83       	st	Z, r24
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
 5e6:	85 b1       	in	r24, 0x05	; 5
 5e8:	8e 7f       	andi	r24, 0xFE	; 254
 5ea:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
 5ec:	84 b1       	in	r24, 0x04	; 4
 5ee:	81 60       	ori	r24, 0x01	; 1
 5f0:	84 b9       	out	0x04, r24	; 4
	    // <true"> High
	    false);

	PB0_set_dir(PORT_DIR_OUT);

	USART_0_init();
 5f2:	0e 94 5f 04 	call	0x8be	; 0x8be <USART_0_init>
 5f6:	08 95       	ret

000005f8 <EVENT_SYSTEM_0_initialization>:
}

void EVENT_SYSTEM_0_initialization(void)
{

	EVENT_SYSTEM_0_init();
 5f8:	0e 94 87 03 	call	0x70e	; 0x70e <EVENT_SYSTEM_0_init>
 5fc:	08 95       	ret

000005fe <ZCD_Rising_initialization>:
 */
static inline void PORTD_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
 5fe:	e1 e7       	ldi	r30, 0x71	; 113
 600:	f4 e0       	ldi	r31, 0x04	; 4
 602:	80 81       	ld	r24, Z
 604:	88 7f       	andi	r24, 0xF8	; 248
 606:	84 60       	ori	r24, 0x04	; 4
 608:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 60a:	80 81       	ld	r24, Z
 60c:	87 7f       	andi	r24, 0xF7	; 247
 60e:	80 83       	st	Z, r24
	// Disable digital input buffer
	PD1_set_isc(PORT_ISC_INPUT_DISABLE_gc);
	// Disable pull-up resistor
	PD1_set_pull_mode(PORT_PULL_OFF);

	ZCD_Rising_init();
 610:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <ZCD_Rising_init>
 614:	08 95       	ret

00000616 <ZCD_Falling_initialization>:
 */
static inline void PORTE_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTE + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
 616:	e3 e9       	ldi	r30, 0x93	; 147
 618:	f4 e0       	ldi	r31, 0x04	; 4
 61a:	80 81       	ld	r24, Z
 61c:	88 7f       	andi	r24, 0xF8	; 248
 61e:	84 60       	ori	r24, 0x04	; 4
 620:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTE + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 622:	80 81       	ld	r24, Z
 624:	87 7f       	andi	r24, 0xF7	; 247
 626:	80 83       	st	Z, r24
	// Disable digital input buffer
	PE3_set_isc(PORT_ISC_INPUT_DISABLE_gc);
	// Disable pull-up resistor
	PE3_set_pull_mode(PORT_PULL_OFF);

	ZCD_Falling_init();
 628:	0e 94 83 04 	call	0x906	; 0x906 <ZCD_Falling_init>
 62c:	08 95       	ret

0000062e <SPI_ADF_initialization>:
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
 62e:	80 b1       	in	r24, 0x00	; 0
 630:	8f 7d       	andi	r24, 0xDF	; 223
 632:	80 b9       	out	0x00, r24	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 634:	e5 e1       	ldi	r30, 0x15	; 21
 636:	f4 e0       	ldi	r31, 0x04	; 4
 638:	80 81       	ld	r24, Z
 63a:	87 7f       	andi	r24, 0xF7	; 247
 63c:	80 83       	st	Z, r24
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
 63e:	81 b1       	in	r24, 0x01	; 1
 640:	8f 7e       	andi	r24, 0xEF	; 239
 642:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 644:	80 b1       	in	r24, 0x00	; 0
 646:	80 61       	ori	r24, 0x10	; 16
 648:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
 64a:	81 b1       	in	r24, 0x01	; 1
 64c:	8f 7b       	andi	r24, 0xBF	; 191
 64e:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 650:	80 b1       	in	r24, 0x00	; 0
 652:	80 64       	ori	r24, 0x40	; 64
 654:	80 b9       	out	0x00, r24	; 0
	    // <true"> High
	    false);

	PA6_set_dir(PORT_DIR_OUT);

	SPI_ADF_init();
 656:	0e 94 bb 03 	call	0x776	; 0x776 <SPI_ADF_init>
 65a:	08 95       	ret

0000065c <SPI_LMX_initialization>:
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
 65c:	88 b1       	in	r24, 0x08	; 8
 65e:	8d 7f       	andi	r24, 0xFD	; 253
 660:	88 b9       	out	0x08, r24	; 8
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 662:	e1 e5       	ldi	r30, 0x51	; 81
 664:	f4 e0       	ldi	r31, 0x04	; 4
 666:	80 81       	ld	r24, Z
 668:	87 7f       	andi	r24, 0xF7	; 247
 66a:	80 83       	st	Z, r24
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
 66c:	89 b1       	in	r24, 0x09	; 9
 66e:	8e 7f       	andi	r24, 0xFE	; 254
 670:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
 672:	88 b1       	in	r24, 0x08	; 8
 674:	81 60       	ori	r24, 0x01	; 1
 676:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
 678:	89 b1       	in	r24, 0x09	; 9
 67a:	8b 7f       	andi	r24, 0xFB	; 251
 67c:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
 67e:	88 b1       	in	r24, 0x08	; 8
 680:	84 60       	ori	r24, 0x04	; 4
 682:	88 b9       	out	0x08, r24	; 8
	    // <true"> High
	    false);

	PC2_set_dir(PORT_DIR_OUT);

	SPI_LMX_init();
 684:	0e 94 c4 03 	call	0x788	; 0x788 <SPI_LMX_init>
 688:	08 95       	ret

0000068a <TIMER_RISING_initialization>:
}

void TIMER_RISING_initialization(void)
{

	TIMER_RISING_init();
 68a:	0e 94 27 04 	call	0x84e	; 0x84e <TIMER_RISING_init>
 68e:	08 95       	ret

00000690 <TIMER_Falling_initialization>:
}

void TIMER_Falling_initialization(void)
{

	TIMER_Falling_init();
 690:	0e 94 39 04 	call	0x872	; 0x872 <TIMER_Falling_init>
 694:	08 95       	ret

00000696 <TIMER_C_initialization>:
}

void TIMER_C_initialization(void)
{

	TIMER_C_init();
 696:	0e 94 45 04 	call	0x88a	; 0x88a <TIMER_C_init>
 69a:	08 95       	ret

0000069c <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
 69c:	0e 94 8d 02 	call	0x51a	; 0x51a <mcu_init>
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
 6a0:	81 b1       	in	r24, 0x01	; 1
 6a2:	8f 77       	andi	r24, 0x7F	; 127
 6a4:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 6a6:	80 b1       	in	r24, 0x00	; 0
 6a8:	80 68       	ori	r24, 0x80	; 128
 6aa:	80 b9       	out	0x00, r24	; 0
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
 6ac:	85 b1       	in	r24, 0x05	; 5
 6ae:	87 7f       	andi	r24, 0xF7	; 247
 6b0:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
 6b2:	84 b1       	in	r24, 0x04	; 4
 6b4:	88 60       	ori	r24, 0x08	; 8
 6b6:	84 b9       	out	0x04, r24	; 4
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
 6b8:	89 b1       	in	r24, 0x09	; 9
 6ba:	88 60       	ori	r24, 0x08	; 8
 6bc:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
 6be:	88 b1       	in	r24, 0x08	; 8
 6c0:	88 60       	ori	r24, 0x08	; 8
 6c2:	88 b9       	out	0x08, r24	; 8
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
	} else {
		VPORTD.OUT &= ~(1 << pin);
 6c4:	8d b1       	in	r24, 0x0d	; 13
 6c6:	8b 7f       	andi	r24, 0xFB	; 251
 6c8:	8d b9       	out	0x0d, r24	; 13
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
 6ca:	8c b1       	in	r24, 0x0c	; 12
 6cc:	84 60       	ori	r24, 0x04	; 4
 6ce:	8c b9       	out	0x0c, r24	; 12
	    // <true"> High
	    false);

	LTC_ENABLE_set_dir(PORT_DIR_OUT);

	OPERATIONAL_AMPLIFIER_0_initialization();
 6d0:	0e 94 d6 02 	call	0x5ac	; 0x5ac <OPERATIONAL_AMPLIFIER_0_initialization>

	CLKCTRL_init();
 6d4:	0e 94 8f 04 	call	0x91e	; 0x91e <CLKCTRL_init>

	USART_0_initialization();
 6d8:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <USART_0_initialization>

	EVENT_SYSTEM_0_initialization();
 6dc:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <EVENT_SYSTEM_0_initialization>

	SLPCTRL_init();
 6e0:	0e 94 b9 03 	call	0x772	; 0x772 <SLPCTRL_init>

	CPUINT_init();
 6e4:	0e 94 a9 04 	call	0x952	; 0x952 <CPUINT_init>

	ZCD_Rising_initialization();
 6e8:	0e 94 ff 02 	call	0x5fe	; 0x5fe <ZCD_Rising_initialization>

	ZCD_Falling_initialization();
 6ec:	0e 94 0b 03 	call	0x616	; 0x616 <ZCD_Falling_initialization>

	SPI_ADF_initialization();
 6f0:	0e 94 17 03 	call	0x62e	; 0x62e <SPI_ADF_initialization>

	SPI_LMX_initialization();
 6f4:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_LMX_initialization>

	RTC_0_init();
 6f8:	0e 94 a8 03 	call	0x750	; 0x750 <RTC_0_init>

	TIMER_RISING_initialization();
 6fc:	0e 94 45 03 	call	0x68a	; 0x68a <TIMER_RISING_initialization>

	TIMER_Falling_initialization();
 700:	0e 94 48 03 	call	0x690	; 0x690 <TIMER_Falling_initialization>

	TIMER_C_initialization();
 704:	0e 94 4b 03 	call	0x696	; 0x696 <TIMER_C_initialization>

	BOD_init();
 708:	0e 94 8b 04 	call	0x916	; 0x916 <BOD_init>
 70c:	08 95       	ret

0000070e <EVENT_SYSTEM_0_init>:
 * \return Initialization status.
 */
int8_t EVENT_SYSTEM_0_init()
{

	EVSYS.CHANNEL0 = EVSYS_CHANNEL0_ZCD0_gc; /* Zero Cross Detect 0 out */
 70e:	e0 e0       	ldi	r30, 0x00	; 0
 710:	f2 e0       	ldi	r31, 0x02	; 2
 712:	80 e3       	ldi	r24, 0x30	; 48
 714:	80 8b       	std	Z+16, r24	; 0x10

	EVSYS.CHANNEL1 = EVSYS_CHANNEL1_ZCD1_gc; /* Zero Cross Detect 1 out */
 716:	81 e3       	ldi	r24, 0x31	; 49
 718:	81 8b       	std	Z+17, r24	; 0x11

	// EVSYS.USERTCA1CNTA = EVSYS_USER_OFF_gc; /* Off */

	// EVSYS.USERTCA1CNTB = EVSYS_USER_OFF_gc; /* Off */

	EVSYS.USERTCB0CAPT = EVSYS_USER_CHANNEL0_gc; /* Connect user to event channel 0 */
 71a:	91 e0       	ldi	r25, 0x01	; 1
 71c:	96 af       	std	Z+62, r25	; 0x3e

	// EVSYS.USERTCB1CAPT = EVSYS_USER_OFF_gc; /* Off */

	// EVSYS.USERTCB1COUNT = EVSYS_USER_OFF_gc; /* Off */

	EVSYS.USERTCB2CAPT = EVSYS_USER_CHANNEL1_gc; /* Connect user to event channel 1 */
 71e:	82 e0       	ldi	r24, 0x02	; 2
 720:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <__TEXT_REGION_LENGTH__+0x7e0242>

	// EVSYS.USERTCB3CAPT = EVSYS_USER_OFF_gc; /* Off */

	// EVSYS.USERTCB3COUNT = EVSYS_USER_OFF_gc; /* Off */

	EVSYS.USERTCD0INPUTA = EVSYS_USER_CHANNEL0_gc; /* Connect user to event channel 0 */
 724:	90 93 48 02 	sts	0x0248, r25	; 0x800248 <__TEXT_REGION_LENGTH__+0x7e0248>

	EVSYS.USERTCD0INPUTB = EVSYS_USER_CHANNEL1_gc; /* Connect user to event channel 1 */
 728:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <__TEXT_REGION_LENGTH__+0x7e0249>
	// EVSYS.USEROPAMP2DUMP = EVSYS_USER_OFF_gc; /* Off */

	// EVSYS.USEROPAMP2DISABLE = EVSYS_USER_OFF_gc; /* Off */

	return 0;
}
 72c:	80 e0       	ldi	r24, 0x00	; 0
 72e:	08 95       	ret

00000730 <OPERATIONAL_AMPLIFIER_0_init>:
 * \return Initialization status.
 */
int8_t OPERATIONAL_AMPLIFIER_0_init()
{

	OPAMP.CTRLA = 1 << OPAMP_ENABLE_bp; /* OPAMP Peripheral Enable: enabled */
 730:	e0 e0       	ldi	r30, 0x00	; 0
 732:	f7 e0       	ldi	r31, 0x07	; 7
 734:	81 e0       	ldi	r24, 0x01	; 1
 736:	80 83       	st	Z, r24

	// OPAMP.DBGCTRL = 0 << OPAMP_DBGRUN_bp; /* Run in Debug mode: disabled */

	OPAMP.TIMEBASE = OPAMP_TIMEBASE_VALUE << OPAMP_TIMEBASE_gp;
 738:	87 e1       	ldi	r24, 0x17	; 23
 73a:	82 83       	std	Z+2, r24	; 0x02

	// OPAMP.PWRCTRL = OPAMP_PWRCTRL_IRSEL_FULL_gc; /* Full Input Range */

	OPAMP.OP1SETTLE = 0x7f << OPAMP_SETTLE_gp; /* Setting: 0x7f */
 73c:	8f e7       	ldi	r24, 0x7F	; 127
 73e:	84 8f       	std	Z+28, r24	; 0x1c

	OPAMP.OP1CTRLA = 1 << OPAMP_ALWAYSON_bp             /* Always ON: enabled */
 740:	85 e8       	ldi	r24, 0x85	; 133
 742:	80 8f       	std	Z+24, r24	; 0x18
	                 | 0 << OPAMP_EVENTEN_bp            /* Event Enable: disabled */
	                 | OPAMP_OP1CTRLA_OUTMODE_NORMAL_gc /* Output Driver in Normal Mode */
	                 | 1 << OPAMP_RUNSTBY_bp;           /* Run is standby mode: enabled */

	OPAMP.OP1RESMUX = OPAMP_OP1RESMUX_MUXTOP_OUT_gc     /* OPn output */
 744:	89 ee       	ldi	r24, 0xE9	; 233
 746:	82 8f       	std	Z+26, r24	; 0x1a
	                  | OPAMP_OP1RESMUX_MUXBOT_INN_gc   /* Negative input pin for OPn */
	                  | OPAMP_OP1RESMUX_MUXWIP_WIP7_gc; /* R1 = 1R, R2 = 15R, R2/R1 = 15 */

	OPAMP.OP1INMUX = OPAMP_OP1INMUX_MUXPOS_VDDDIV2_gc /* VDD/2 */
 748:	84 e1       	ldi	r24, 0x14	; 20
 74a:	83 8f       	std	Z+27, r24	; 0x1b
	                 | OPAMP_OP1INMUX_MUXNEG_WIP_gc;  /* Wiper from OPn's resistor ladder */

	return 0;
}
 74c:	80 e0       	ldi	r24, 0x00	; 0
 74e:	08 95       	ret

00000750 <RTC_0_init>:
 * \return Initialization status.
 */
int8_t RTC_0_init()
{

	while (RTC.STATUS > 0) { /* Wait for all register to be synchronized */
 750:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
 754:	81 11       	cpse	r24, r1
 756:	fc cf       	rjmp	.-8      	; 0x750 <RTC_0_init>

	// RTC.CMP = 0x0; /* Compare: 0x0 */

	// RTC.CNT = 0x0; /* Counter: 0x0 */

	RTC.CTRLA = RTC_PRESCALER_DIV32_gc  /* 32 */
 758:	e0 e4       	ldi	r30, 0x40	; 64
 75a:	f1 e0       	ldi	r31, 0x01	; 1
 75c:	88 ea       	ldi	r24, 0xA8	; 168
 75e:	80 83       	st	Z, r24
	            | 0 << RTC_RTCEN_bp     /* Enable: disabled */
	            | 1 << RTC_RUNSTDBY_bp; /* Run In Standby: enabled */

	RTC.PER = 0x1ff; /* Period: 0x1ff */
 760:	8f ef       	ldi	r24, 0xFF	; 255
 762:	91 e0       	ldi	r25, 0x01	; 1
 764:	82 87       	std	Z+10, r24	; 0x0a
 766:	93 87       	std	Z+11, r25	; 0x0b

	RTC.CLKSEL = RTC_CLKSEL_OSC32K_gc; /* Internal 32.768 kHz oscillator */
 768:	17 82       	std	Z+7, r1	; 0x07

	// RTC.DBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	RTC.INTCTRL = 0 << RTC_CMP_bp    /* Compare Match Interrupt enable: disabled */
 76a:	81 e0       	ldi	r24, 0x01	; 1
 76c:	82 83       	std	Z+2, r24	; 0x02
	// RTC.PITDBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	// RTC.PITINTCTRL = 0 << RTC_PI_bp; /* Periodic Interrupt: disabled */

	return 0;
}
 76e:	80 e0       	ldi	r24, 0x00	; 0
 770:	08 95       	ret

00000772 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
 772:	80 e0       	ldi	r24, 0x00	; 0
 774:	08 95       	ret

00000776 <SPI_ADF_init>:
                 after the previous one (i.e. data transfer phase
                 after control/command phase).
*/
void SPI_LMX_register_callback(spi_transfer_done_cb_t f)
{
	SPI_LMX_desc.cb = f;
 776:	e0 e4       	ldi	r30, 0x40	; 64
 778:	f9 e0       	ldi	r31, 0x09	; 9
 77a:	81 e2       	ldi	r24, 0x21	; 33
 77c:	80 83       	st	Z, r24
 77e:	81 e0       	ldi	r24, 0x01	; 1
 780:	82 83       	std	Z+2, r24	; 0x02
 782:	10 92 55 40 	sts	0x4055, r1	; 0x804055 <SPI_ADF_desc>
 786:	08 95       	ret

00000788 <SPI_LMX_init>:
 788:	e0 e6       	ldi	r30, 0x60	; 96
 78a:	f9 e0       	ldi	r31, 0x09	; 9
 78c:	81 e2       	ldi	r24, 0x21	; 33
 78e:	80 83       	st	Z, r24
 790:	81 e0       	ldi	r24, 0x01	; 1
 792:	82 83       	std	Z+2, r24	; 0x02
 794:	ee e4       	ldi	r30, 0x4E	; 78
 796:	f0 e4       	ldi	r31, 0x40	; 64
 798:	10 82       	st	Z, r1
 79a:	15 82       	std	Z+5, r1	; 0x05
 79c:	16 82       	std	Z+6, r1	; 0x06
 79e:	08 95       	ret

000007a0 <__vector_37>:
}

ISR(SPI1_INT_vect)
{
 7a0:	1f 92       	push	r1
 7a2:	0f 92       	push	r0
 7a4:	0f b6       	in	r0, 0x3f	; 63
 7a6:	0f 92       	push	r0
 7a8:	11 24       	eor	r1, r1
 7aa:	0b b6       	in	r0, 0x3b	; 59
 7ac:	0f 92       	push	r0
 7ae:	2f 93       	push	r18
 7b0:	3f 93       	push	r19
 7b2:	4f 93       	push	r20
 7b4:	5f 93       	push	r21
 7b6:	6f 93       	push	r22
 7b8:	7f 93       	push	r23
 7ba:	8f 93       	push	r24
 7bc:	9f 93       	push	r25
 7be:	af 93       	push	r26
 7c0:	bf 93       	push	r27
 7c2:	ef 93       	push	r30
 7c4:	ff 93       	push	r31
	/* SPI_LMX_desc.data points to array element
	   to write the received data to. The data to be transmitted
	   is in the next array element.
	*/
	uint8_t rdata = SPI1.DATA;
 7c6:	e0 e6       	ldi	r30, 0x60	; 96
 7c8:	f9 e0       	ldi	r31, 0x09	; 9
 7ca:	94 81       	ldd	r25, Z+4	; 0x04
	uint8_t wdata = 0;

	SPI1.INTFLAGS = SPI_RXCIF_bm;
 7cc:	80 e8       	ldi	r24, 0x80	; 128
 7ce:	83 83       	std	Z+3, r24	; 0x03

	if (SPI_LMX_desc.type != SPI_WRITE) {
 7d0:	80 91 52 40 	lds	r24, 0x4052	; 0x804052 <SPI_LMX_desc+0x4>
 7d4:	82 30       	cpi	r24, 0x02	; 2
 7d6:	29 f0       	breq	.+10     	; 0x7e2 <__vector_37+0x42>
		*SPI_LMX_desc.data = rdata;
 7d8:	e0 91 4f 40 	lds	r30, 0x404F	; 0x80404f <SPI_LMX_desc+0x1>
 7dc:	f0 91 50 40 	lds	r31, 0x4050	; 0x804050 <SPI_LMX_desc+0x2>
 7e0:	90 83       	st	Z, r25
	}

	SPI_LMX_desc.data++;
 7e2:	ee e4       	ldi	r30, 0x4E	; 78
 7e4:	f0 e4       	ldi	r31, 0x40	; 64
 7e6:	a1 81       	ldd	r26, Z+1	; 0x01
 7e8:	b2 81       	ldd	r27, Z+2	; 0x02
 7ea:	9d 01       	movw	r18, r26
 7ec:	2f 5f       	subi	r18, 0xFF	; 255
 7ee:	3f 4f       	sbci	r19, 0xFF	; 255
 7f0:	21 83       	std	Z+1, r18	; 0x01
 7f2:	32 83       	std	Z+2, r19	; 0x02

	if (SPI_LMX_desc.type != SPI_READ)
 7f4:	81 30       	cpi	r24, 0x01	; 1
 7f6:	19 f0       	breq	.+6      	; 0x7fe <__vector_37+0x5e>
		wdata = *SPI_LMX_desc.data;
 7f8:	11 96       	adiw	r26, 0x01	; 1
 7fa:	9c 91       	ld	r25, X
 7fc:	01 c0       	rjmp	.+2      	; 0x800 <__vector_37+0x60>
	/* SPI_LMX_desc.data points to array element
	   to write the received data to. The data to be transmitted
	   is in the next array element.
	*/
	uint8_t rdata = SPI1.DATA;
	uint8_t wdata = 0;
 7fe:	90 e0       	ldi	r25, 0x00	; 0
	SPI_LMX_desc.data++;

	if (SPI_LMX_desc.type != SPI_READ)
		wdata = *SPI_LMX_desc.data;

	SPI_LMX_desc.size--;
 800:	ee e4       	ldi	r30, 0x4E	; 78
 802:	f0 e4       	ldi	r31, 0x40	; 64
 804:	83 81       	ldd	r24, Z+3	; 0x03
 806:	81 50       	subi	r24, 0x01	; 1
 808:	83 83       	std	Z+3, r24	; 0x03
	// if more bytes to be transferred
	if (SPI_LMX_desc.size != 0) {
 80a:	88 23       	and	r24, r24
 80c:	19 f0       	breq	.+6      	; 0x814 <__vector_37+0x74>
		// more data to send, send a byte
		SPI1.DATA = wdata;
 80e:	90 93 64 09 	sts	0x0964, r25	; 0x800964 <__TEXT_REGION_LENGTH__+0x7e0964>
 812:	0a c0       	rjmp	.+20     	; 0x828 <__vector_37+0x88>
	}

	// if last byte has been transferred, update status
	// and optionally call callback
	else {
		SPI_LMX_desc.status = SPI_DONE;
 814:	ee e4       	ldi	r30, 0x4E	; 78
 816:	f0 e4       	ldi	r31, 0x40	; 64
 818:	83 e0       	ldi	r24, 0x03	; 3
 81a:	80 83       	st	Z, r24
		if (SPI_LMX_desc.cb != NULL) {
 81c:	05 80       	ldd	r0, Z+5	; 0x05
 81e:	f6 81       	ldd	r31, Z+6	; 0x06
 820:	e0 2d       	mov	r30, r0
 822:	30 97       	sbiw	r30, 0x00	; 0
 824:	09 f0       	breq	.+2      	; 0x828 <__vector_37+0x88>
			SPI_LMX_desc.cb();
 826:	09 95       	icall
		}
	}
}
 828:	ff 91       	pop	r31
 82a:	ef 91       	pop	r30
 82c:	bf 91       	pop	r27
 82e:	af 91       	pop	r26
 830:	9f 91       	pop	r25
 832:	8f 91       	pop	r24
 834:	7f 91       	pop	r23
 836:	6f 91       	pop	r22
 838:	5f 91       	pop	r21
 83a:	4f 91       	pop	r20
 83c:	3f 91       	pop	r19
 83e:	2f 91       	pop	r18
 840:	0f 90       	pop	r0
 842:	0b be       	out	0x3b, r0	; 59
 844:	0f 90       	pop	r0
 846:	0f be       	out	0x3f, r0	; 63
 848:	0f 90       	pop	r0
 84a:	1f 90       	pop	r1
 84c:	18 95       	reti

0000084e <TIMER_RISING_init>:
 * \return Initialization status.
 */
int8_t TIMER_RISING_init()
{

	TCB0.CCMP = 0xffff; /* Compare or Capture: 0xffff */
 84e:	e0 e0       	ldi	r30, 0x00	; 0
 850:	fb e0       	ldi	r31, 0x0B	; 11
 852:	8f ef       	ldi	r24, 0xFF	; 255
 854:	9f ef       	ldi	r25, 0xFF	; 255
 856:	84 87       	std	Z+12, r24	; 0x0c
 858:	95 87       	std	Z+13, r25	; 0x0d

	TCB0.CNT = 0xffff; /* Count: 0xffff */
 85a:	82 87       	std	Z+10, r24	; 0x0a
 85c:	93 87       	std	Z+11, r25	; 0x0b

	TCB0.CTRLB = 1 << TCB_ASYNC_bp      /* Asynchronous Enable: enabled */
 85e:	83 e4       	ldi	r24, 0x43	; 67
 860:	81 83       	std	Z+1, r24	; 0x01
	             | 0 << TCB_CCMPEN_bp   /* Pin Output Enable: disabled */
	             | 0 << TCB_CCMPINIT_bp /* Pin Initial State: disabled */
	             | TCB_CNTMODE_FRQ_gc;  /* Input Capture Frequency measurement */

	TCB0.DBGCTRL = 1 << TCB_DBGRUN_bp; /* Debug Run: enabled */
 862:	81 e0       	ldi	r24, 0x01	; 1
 864:	80 87       	std	Z+8, r24	; 0x08

	TCB0.EVCTRL = 1 << TCB_CAPTEI_bp    /* Event Input Enable: enabled */
 866:	84 83       	std	Z+4, r24	; 0x04
	              | 0 << TCB_EDGE_bp    /* Event Edge: disabled */
	              | 0 << TCB_FILTER_bp; /* Input Capture Noise Cancellation Filter: disabled */

	TCB0.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
 868:	85 83       	std	Z+5, r24	; 0x05
	               | 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */

	TCB0.CTRLA = TCB_CLKSEL_DIV1_gc     /* CLK_PER */
 86a:	81 e4       	ldi	r24, 0x41	; 65
 86c:	80 83       	st	Z, r24
	             | 1 << TCB_RUNSTDBY_bp /* Run Standby: enabled */
	             | 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
	             | 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */

	return 0;
}
 86e:	80 e0       	ldi	r24, 0x00	; 0
 870:	08 95       	ret

00000872 <TIMER_Falling_init>:

	// TCB2.CCMP = 0x0; /* Compare or Capture: 0x0 */

	// TCB2.CNT = 0x0; /* Count: 0x0 */

	TCB2.CTRLB = 1 << TCB_ASYNC_bp      /* Asynchronous Enable: enabled */
 872:	e0 e2       	ldi	r30, 0x20	; 32
 874:	fb e0       	ldi	r31, 0x0B	; 11
 876:	83 e4       	ldi	r24, 0x43	; 67
 878:	81 83       	std	Z+1, r24	; 0x01
	             | 0 << TCB_CCMPEN_bp   /* Pin Output Enable: disabled */
	             | 0 << TCB_CCMPINIT_bp /* Pin Initial State: disabled */
	             | TCB_CNTMODE_FRQ_gc;  /* Input Capture Frequency measurement */

	TCB2.DBGCTRL = 1 << TCB_DBGRUN_bp; /* Debug Run: enabled */
 87a:	81 e0       	ldi	r24, 0x01	; 1
 87c:	80 87       	std	Z+8, r24	; 0x08

	TCB2.EVCTRL = 1 << TCB_CAPTEI_bp    /* Event Input Enable: enabled */
 87e:	84 83       	std	Z+4, r24	; 0x04
	              | 0 << TCB_EDGE_bp    /* Event Edge: disabled */
	              | 0 << TCB_FILTER_bp; /* Input Capture Noise Cancellation Filter: disabled */

	TCB2.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
 880:	85 83       	std	Z+5, r24	; 0x05
	               | 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */

	TCB2.CTRLA = TCB_CLKSEL_DIV1_gc     /* CLK_PER */
 882:	81 e4       	ldi	r24, 0x41	; 65
 884:	80 83       	st	Z, r24
	             | 1 << TCB_RUNSTDBY_bp /* Run Standby: enabled */
	             | 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
	             | 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */

	return 0;
}
 886:	80 e0       	ldi	r24, 0x00	; 0
 888:	08 95       	ret

0000088a <TIMER_C_init>:
int8_t TIMER_C_init()
{

	// Enable Protected register, peripheral must be disabled (ENABLE=0, in TCD.CTRLA).

	TCD0.CMPASET = 4095; /* Compare A Set: 4095 */
 88a:	e0 e8       	ldi	r30, 0x80	; 128
 88c:	fb e0       	ldi	r31, 0x0B	; 11
 88e:	8f ef       	ldi	r24, 0xFF	; 255
 890:	9f e0       	ldi	r25, 0x0F	; 15
 892:	80 a7       	std	Z+40, r24	; 0x28
 894:	91 a7       	std	Z+41, r25	; 0x29

	// TCD0.CMPACLR = 0; /* Compare A Clear: 0 */

	TCD0.CMPBSET = 4095; /* Compare B Set: 4095 */
 896:	84 a7       	std	Z+44, r24	; 0x2c
 898:	95 a7       	std	Z+45, r25	; 0x2d
	//		 | TCD_DLYTRIG_CMPASET_gc; /* Compare A set */

	// TCD0.DLYVAL = 0 << TCD_DLYVAL_gp; /* Delay value: 0 */

	TCD0.EVCTRLA
	    = TCD_CFG_NEITHER_gc      /* Neither Filter nor Asynchronous Event is enabled */
 89a:	85 e1       	ldi	r24, 0x15	; 21
 89c:	80 87       	std	Z+8, r24	; 0x08
	      | TCD_ACTION_CAPTURE_gc /* Event trigger a fault and capture */
	      | TCD_EDGE_RISE_HIGH_gc /* The rising edge or high level of event generates retrigger or fault action */
	      | 1 << TCD_TRIGEI_bp;   /* Trigger event enable: enabled */

	TCD0.EVCTRLB
	    = TCD_CFG_NEITHER_gc      /* Neither Filter nor Asynchronous Event is enabled */
 89e:	81 87       	std	Z+9, r24	; 0x09

	// TCD0.INPUTCTRLA = TCD_INPUTMODE_NONE_gc; /* Input has no actions */

	// TCD0.INPUTCTRLB = TCD_INPUTMODE_NONE_gc; /* Input has no actions */

	TCD0.INTCTRL = 0 << TCD_OVF_bp      /* Overflow interrupt enable: disabled */
 8a0:	8c e0       	ldi	r24, 0x0C	; 12
 8a2:	84 87       	std	Z+12, r24	; 0x0c
	               | 1 << TCD_TRIGA_bp  /* Trigger A interrupt enable: enabled */
	               | 1 << TCD_TRIGB_bp; /* Trigger B interrupt enable: enabled */

	while ((TCD0.STATUS & TCD_ENRDY_bm) == 0)
 8a4:	80 91 8e 0b 	lds	r24, 0x0B8E	; 0x800b8e <__TEXT_REGION_LENGTH__+0x7e0b8e>
 8a8:	80 ff       	sbrs	r24, 0
 8aa:	fc cf       	rjmp	.-8      	; 0x8a4 <TIMER_C_init+0x1a>
		; // Wait for Enable Ready to be high.

	TCD0.CTRLA = 1 << TCD_ENABLE_bp      /* Enable: enabled */
 8ac:	81 e2       	ldi	r24, 0x21	; 33
 8ae:	80 93 80 0b 	sts	0x0B80, r24	; 0x800b80 <__TEXT_REGION_LENGTH__+0x7e0b80>
	             | TCD_CLKSEL_PLL_gc     /*  */
	             | TCD_CNTPRES_DIV1_gc   /* Sync clock divided by 1 */
	             | TCD_SYNCPRES_DIV1_gc; /*  */
				 
	while (!(CLKCTRL.MCLKSTATUS & CLKCTRL_PLLS_bm));
 8b2:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
 8b6:	85 ff       	sbrs	r24, 5
 8b8:	fc cf       	rjmp	.-8      	; 0x8b2 <TIMER_C_init+0x28>

	return 0;
}
 8ba:	80 e0       	ldi	r24, 0x00	; 0
 8bc:	08 95       	ret

000008be <USART_0_init>:
uint8_t USART_0_read()
{
	while (!(USART3.STATUS & USART_RXCIF_bm))
		;
	return USART3.RXDATAL;
}
 8be:	e0 e6       	ldi	r30, 0x60	; 96
 8c0:	f8 e0       	ldi	r31, 0x08	; 8
 8c2:	81 e4       	ldi	r24, 0x41	; 65
 8c4:	93 e0       	ldi	r25, 0x03	; 3
 8c6:	80 87       	std	Z+8, r24	; 0x08
 8c8:	91 87       	std	Z+9, r25	; 0x09
 8ca:	80 ec       	ldi	r24, 0xC0	; 192
 8cc:	86 83       	std	Z+6, r24	; 0x06
 8ce:	80 e0       	ldi	r24, 0x00	; 0
 8d0:	90 e4       	ldi	r25, 0x40	; 64
 8d2:	80 93 58 40 	sts	0x4058, r24	; 0x804058 <__iob+0x2>
 8d6:	90 93 59 40 	sts	0x4059, r25	; 0x804059 <__iob+0x3>
 8da:	80 e0       	ldi	r24, 0x00	; 0
 8dc:	08 95       	ret

000008de <USART_0_write>:
 *
 * \return Nothing
 */
void USART_0_write(const uint8_t data)
{
	while (!(USART3.STATUS & USART_DREIF_bm))
 8de:	90 91 64 08 	lds	r25, 0x0864	; 0x800864 <__TEXT_REGION_LENGTH__+0x7e0864>
 8e2:	95 ff       	sbrs	r25, 5
 8e4:	fc cf       	rjmp	.-8      	; 0x8de <USART_0_write>
		;
	USART3.TXDATAL = data;
 8e6:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <__TEXT_REGION_LENGTH__+0x7e0862>
 8ea:	08 95       	ret

000008ec <USART_0_printCHAR>:

#if defined(__GNUC__)

int USART_0_printCHAR(char character, FILE *stream)
{
	USART_0_write(character);
 8ec:	0e 94 6f 04 	call	0x8de	; 0x8de <USART_0_write>
	return 0;
}
 8f0:	80 e0       	ldi	r24, 0x00	; 0
 8f2:	90 e0       	ldi	r25, 0x00	; 0
 8f4:	08 95       	ret

000008f6 <ZCD_Rising_init>:
 * \return Initialization status.
 */
int8_t ZCD_Rising_init()
{

	ZCD0.CTRLA = 1 << ZCD_ENABLE_bp     /* Setting: enabled */
 8f6:	e0 ec       	ldi	r30, 0xC0	; 192
 8f8:	f6 e0       	ldi	r31, 0x06	; 6
 8fa:	81 e8       	ldi	r24, 0x81	; 129
 8fc:	80 83       	st	Z, r24
	             | 0 << ZCD_OUTEN_bp    /* Setting: disabled */
	             | 1 << ZCD_RUNSTDBY_bp /* Setting: enabled */
	             | 0 << ZCD_INVERT_bp;  /* Setting: disabled */

	ZCD0.INTCTRL = ZCD_INTMODE_RISING_gc; /* Interrupt on rising input signal */
 8fe:	81 e0       	ldi	r24, 0x01	; 1
 900:	82 83       	std	Z+2, r24	; 0x02

	return 0;
}
 902:	80 e0       	ldi	r24, 0x00	; 0
 904:	08 95       	ret

00000906 <ZCD_Falling_init>:
 * \return Initialization status.
 */
int8_t ZCD_Falling_init()
{

	ZCD1.CTRLA = 1 << ZCD_ENABLE_bp     /* Setting: enabled */
 906:	e8 ec       	ldi	r30, 0xC8	; 200
 908:	f6 e0       	ldi	r31, 0x06	; 6
 90a:	81 e8       	ldi	r24, 0x81	; 129
 90c:	80 83       	st	Z, r24
	             | 0 << ZCD_OUTEN_bp    /* Setting: disabled */
	             | 1 << ZCD_RUNSTDBY_bp /* Setting: enabled */
	             | 0 << ZCD_INVERT_bp;  /* Setting: disabled */

	ZCD1.INTCTRL = ZCD_INTMODE_FALLING_gc; /* Interrupt on falling input signal */
 90e:	82 e0       	ldi	r24, 0x02	; 2
 910:	82 83       	std	Z+2, r24	; 0x02

	return 0;
}
 912:	80 e0       	ldi	r24, 0x00	; 0
 914:	08 95       	ret

00000916 <BOD_init>:
int8_t BOD_init()
{

	// ccp_write_io((void*)&(BOD.CTRLA),BOD_SLEEP_DIS_gc /* Disabled */);

	BOD.INTCTRL = 0 << BOD_VLMIE_bp        /* voltage level monitor interrrupt enable: disabled */
 916:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
	              | BOD_VLMCFG_FALLING_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
 91a:	80 e0       	ldi	r24, 0x00	; 0
 91c:	08 95       	ret

0000091e <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
 91e:	45 e8       	ldi	r20, 0x85	; 133
 920:	68 ed       	ldi	r22, 0xD8	; 216
 922:	8c e7       	ldi	r24, 0x7C	; 124
 924:	90 e0       	ldi	r25, 0x00	; 0
 926:	0e 94 ac 04 	call	0x958	; 0x958 <protected_write_io>
 92a:	41 e8       	ldi	r20, 0x81	; 129
 92c:	68 ed       	ldi	r22, 0xD8	; 216
 92e:	80 e7       	ldi	r24, 0x70	; 112
 930:	90 e0       	ldi	r25, 0x00	; 0
 932:	0e 94 ac 04 	call	0x958	; 0x958 <protected_write_io>
 936:	4c e0       	ldi	r20, 0x0C	; 12
 938:	68 ed       	ldi	r22, 0xD8	; 216
 93a:	80 e8       	ldi	r24, 0x80	; 128
 93c:	90 e0       	ldi	r25, 0x00	; 0
 93e:	0e 94 ac 04 	call	0x958	; 0x958 <protected_write_io>
 942:	44 e2       	ldi	r20, 0x24	; 36
 944:	68 ed       	ldi	r22, 0xD8	; 216
 946:	88 e6       	ldi	r24, 0x68	; 104
 948:	90 e0       	ldi	r25, 0x00	; 0
 94a:	0e 94 ac 04 	call	0x958	; 0x958 <protected_write_io>
	/* wait for PLL to start 
	while (!(CLKCTRL.MCLKSTATUS & CLKCTRL_PLLS_bm))
		;*/

	return 0;
}
 94e:	80 e0       	ldi	r24, 0x00	; 0
 950:	08 95       	ret

00000952 <CPUINT_init>:

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	ENABLE_INTERRUPTS();
 952:	78 94       	sei

	return 0;
}
 954:	80 e0       	ldi	r24, 0x00	; 0
 956:	08 95       	ret

00000958 <protected_write_io>:
	PUBLIC_FUNCTION(protected_write_io)

#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
 958:	1b be       	out	0x3b, r1	; 59
#endif
	movw    r30, r24                // Load addr into Z
 95a:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
 95c:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
 95e:	40 83       	st	Z, r20
	ret                             // Return to caller
 960:	08 95       	ret

00000962 <__divmodsi4>:
 962:	05 2e       	mov	r0, r21
 964:	97 fb       	bst	r25, 7
 966:	1e f4       	brtc	.+6      	; 0x96e <__divmodsi4+0xc>
 968:	00 94       	com	r0
 96a:	0e 94 c8 04 	call	0x990	; 0x990 <__negsi2>
 96e:	57 fd       	sbrc	r21, 7
 970:	07 d0       	rcall	.+14     	; 0x980 <__divmodsi4_neg2>
 972:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <__udivmodsi4>
 976:	07 fc       	sbrc	r0, 7
 978:	03 d0       	rcall	.+6      	; 0x980 <__divmodsi4_neg2>
 97a:	4e f4       	brtc	.+18     	; 0x98e <__divmodsi4_exit>
 97c:	0c 94 c8 04 	jmp	0x990	; 0x990 <__negsi2>

00000980 <__divmodsi4_neg2>:
 980:	50 95       	com	r21
 982:	40 95       	com	r20
 984:	30 95       	com	r19
 986:	21 95       	neg	r18
 988:	3f 4f       	sbci	r19, 0xFF	; 255
 98a:	4f 4f       	sbci	r20, 0xFF	; 255
 98c:	5f 4f       	sbci	r21, 0xFF	; 255

0000098e <__divmodsi4_exit>:
 98e:	08 95       	ret

00000990 <__negsi2>:
 990:	90 95       	com	r25
 992:	80 95       	com	r24
 994:	70 95       	com	r23
 996:	61 95       	neg	r22
 998:	7f 4f       	sbci	r23, 0xFF	; 255
 99a:	8f 4f       	sbci	r24, 0xFF	; 255
 99c:	9f 4f       	sbci	r25, 0xFF	; 255
 99e:	08 95       	ret

000009a0 <__udivmodsi4>:
 9a0:	a1 e2       	ldi	r26, 0x21	; 33
 9a2:	1a 2e       	mov	r1, r26
 9a4:	aa 1b       	sub	r26, r26
 9a6:	bb 1b       	sub	r27, r27
 9a8:	fd 01       	movw	r30, r26
 9aa:	0d c0       	rjmp	.+26     	; 0x9c6 <__udivmodsi4_ep>

000009ac <__udivmodsi4_loop>:
 9ac:	aa 1f       	adc	r26, r26
 9ae:	bb 1f       	adc	r27, r27
 9b0:	ee 1f       	adc	r30, r30
 9b2:	ff 1f       	adc	r31, r31
 9b4:	a2 17       	cp	r26, r18
 9b6:	b3 07       	cpc	r27, r19
 9b8:	e4 07       	cpc	r30, r20
 9ba:	f5 07       	cpc	r31, r21
 9bc:	20 f0       	brcs	.+8      	; 0x9c6 <__udivmodsi4_ep>
 9be:	a2 1b       	sub	r26, r18
 9c0:	b3 0b       	sbc	r27, r19
 9c2:	e4 0b       	sbc	r30, r20
 9c4:	f5 0b       	sbc	r31, r21

000009c6 <__udivmodsi4_ep>:
 9c6:	66 1f       	adc	r22, r22
 9c8:	77 1f       	adc	r23, r23
 9ca:	88 1f       	adc	r24, r24
 9cc:	99 1f       	adc	r25, r25
 9ce:	1a 94       	dec	r1
 9d0:	69 f7       	brne	.-38     	; 0x9ac <__udivmodsi4_loop>
 9d2:	60 95       	com	r22
 9d4:	70 95       	com	r23
 9d6:	80 95       	com	r24
 9d8:	90 95       	com	r25
 9da:	9b 01       	movw	r18, r22
 9dc:	ac 01       	movw	r20, r24
 9de:	bd 01       	movw	r22, r26
 9e0:	cf 01       	movw	r24, r30
 9e2:	08 95       	ret

000009e4 <__tablejump2__>:
 9e4:	ee 0f       	add	r30, r30
 9e6:	ff 1f       	adc	r31, r31
 9e8:	00 24       	eor	r0, r0
 9ea:	00 1c       	adc	r0, r0
 9ec:	0b be       	out	0x3b, r0	; 59
 9ee:	07 90       	elpm	r0, Z+
 9f0:	f6 91       	elpm	r31, Z
 9f2:	e0 2d       	mov	r30, r0
 9f4:	09 94       	ijmp

000009f6 <printf>:
 9f6:	cf 93       	push	r28
 9f8:	df 93       	push	r29
 9fa:	cd b7       	in	r28, 0x3d	; 61
 9fc:	de b7       	in	r29, 0x3e	; 62
 9fe:	ae 01       	movw	r20, r28
 a00:	4b 5f       	subi	r20, 0xFB	; 251
 a02:	5f 4f       	sbci	r21, 0xFF	; 255
 a04:	fa 01       	movw	r30, r20
 a06:	61 91       	ld	r22, Z+
 a08:	71 91       	ld	r23, Z+
 a0a:	af 01       	movw	r20, r30
 a0c:	80 91 58 40 	lds	r24, 0x4058	; 0x804058 <__iob+0x2>
 a10:	90 91 59 40 	lds	r25, 0x4059	; 0x804059 <__iob+0x3>
 a14:	0e 94 0f 05 	call	0xa1e	; 0xa1e <vfprintf>
 a18:	df 91       	pop	r29
 a1a:	cf 91       	pop	r28
 a1c:	08 95       	ret

00000a1e <vfprintf>:
 a1e:	2f 92       	push	r2
 a20:	3f 92       	push	r3
 a22:	4f 92       	push	r4
 a24:	5f 92       	push	r5
 a26:	6f 92       	push	r6
 a28:	7f 92       	push	r7
 a2a:	8f 92       	push	r8
 a2c:	9f 92       	push	r9
 a2e:	af 92       	push	r10
 a30:	bf 92       	push	r11
 a32:	cf 92       	push	r12
 a34:	df 92       	push	r13
 a36:	ef 92       	push	r14
 a38:	ff 92       	push	r15
 a3a:	0f 93       	push	r16
 a3c:	1f 93       	push	r17
 a3e:	cf 93       	push	r28
 a40:	df 93       	push	r29
 a42:	cd b7       	in	r28, 0x3d	; 61
 a44:	de b7       	in	r29, 0x3e	; 62
 a46:	2b 97       	sbiw	r28, 0x0b	; 11
 a48:	cd bf       	out	0x3d, r28	; 61
 a4a:	de bf       	out	0x3e, r29	; 62
 a4c:	6c 01       	movw	r12, r24
 a4e:	7b 01       	movw	r14, r22
 a50:	8a 01       	movw	r16, r20
 a52:	fc 01       	movw	r30, r24
 a54:	16 82       	std	Z+6, r1	; 0x06
 a56:	17 82       	std	Z+7, r1	; 0x07
 a58:	83 81       	ldd	r24, Z+3	; 0x03
 a5a:	81 ff       	sbrs	r24, 1
 a5c:	cc c1       	rjmp	.+920    	; 0xdf6 <vfprintf+0x3d8>
 a5e:	ce 01       	movw	r24, r28
 a60:	01 96       	adiw	r24, 0x01	; 1
 a62:	3c 01       	movw	r6, r24
 a64:	f6 01       	movw	r30, r12
 a66:	93 81       	ldd	r25, Z+3	; 0x03
 a68:	f7 01       	movw	r30, r14
 a6a:	93 fd       	sbrc	r25, 3
 a6c:	85 91       	lpm	r24, Z+
 a6e:	93 ff       	sbrs	r25, 3
 a70:	81 91       	ld	r24, Z+
 a72:	7f 01       	movw	r14, r30
 a74:	88 23       	and	r24, r24
 a76:	09 f4       	brne	.+2      	; 0xa7a <vfprintf+0x5c>
 a78:	ba c1       	rjmp	.+884    	; 0xdee <vfprintf+0x3d0>
 a7a:	85 32       	cpi	r24, 0x25	; 37
 a7c:	39 f4       	brne	.+14     	; 0xa8c <vfprintf+0x6e>
 a7e:	93 fd       	sbrc	r25, 3
 a80:	85 91       	lpm	r24, Z+
 a82:	93 ff       	sbrs	r25, 3
 a84:	81 91       	ld	r24, Z+
 a86:	7f 01       	movw	r14, r30
 a88:	85 32       	cpi	r24, 0x25	; 37
 a8a:	29 f4       	brne	.+10     	; 0xa96 <vfprintf+0x78>
 a8c:	b6 01       	movw	r22, r12
 a8e:	90 e0       	ldi	r25, 0x00	; 0
 a90:	0e 94 29 07 	call	0xe52	; 0xe52 <fputc>
 a94:	e7 cf       	rjmp	.-50     	; 0xa64 <vfprintf+0x46>
 a96:	91 2c       	mov	r9, r1
 a98:	21 2c       	mov	r2, r1
 a9a:	31 2c       	mov	r3, r1
 a9c:	ff e1       	ldi	r31, 0x1F	; 31
 a9e:	f3 15       	cp	r31, r3
 aa0:	d8 f0       	brcs	.+54     	; 0xad8 <vfprintf+0xba>
 aa2:	8b 32       	cpi	r24, 0x2B	; 43
 aa4:	79 f0       	breq	.+30     	; 0xac4 <vfprintf+0xa6>
 aa6:	38 f4       	brcc	.+14     	; 0xab6 <vfprintf+0x98>
 aa8:	80 32       	cpi	r24, 0x20	; 32
 aaa:	79 f0       	breq	.+30     	; 0xaca <vfprintf+0xac>
 aac:	83 32       	cpi	r24, 0x23	; 35
 aae:	a1 f4       	brne	.+40     	; 0xad8 <vfprintf+0xba>
 ab0:	23 2d       	mov	r18, r3
 ab2:	20 61       	ori	r18, 0x10	; 16
 ab4:	1d c0       	rjmp	.+58     	; 0xaf0 <vfprintf+0xd2>
 ab6:	8d 32       	cpi	r24, 0x2D	; 45
 ab8:	61 f0       	breq	.+24     	; 0xad2 <vfprintf+0xb4>
 aba:	80 33       	cpi	r24, 0x30	; 48
 abc:	69 f4       	brne	.+26     	; 0xad8 <vfprintf+0xba>
 abe:	23 2d       	mov	r18, r3
 ac0:	21 60       	ori	r18, 0x01	; 1
 ac2:	16 c0       	rjmp	.+44     	; 0xaf0 <vfprintf+0xd2>
 ac4:	83 2d       	mov	r24, r3
 ac6:	82 60       	ori	r24, 0x02	; 2
 ac8:	38 2e       	mov	r3, r24
 aca:	e3 2d       	mov	r30, r3
 acc:	e4 60       	ori	r30, 0x04	; 4
 ace:	3e 2e       	mov	r3, r30
 ad0:	2a c0       	rjmp	.+84     	; 0xb26 <vfprintf+0x108>
 ad2:	f3 2d       	mov	r31, r3
 ad4:	f8 60       	ori	r31, 0x08	; 8
 ad6:	1d c0       	rjmp	.+58     	; 0xb12 <vfprintf+0xf4>
 ad8:	37 fc       	sbrc	r3, 7
 ada:	2d c0       	rjmp	.+90     	; 0xb36 <vfprintf+0x118>
 adc:	20 ed       	ldi	r18, 0xD0	; 208
 ade:	28 0f       	add	r18, r24
 ae0:	2a 30       	cpi	r18, 0x0A	; 10
 ae2:	40 f0       	brcs	.+16     	; 0xaf4 <vfprintf+0xd6>
 ae4:	8e 32       	cpi	r24, 0x2E	; 46
 ae6:	b9 f4       	brne	.+46     	; 0xb16 <vfprintf+0xf8>
 ae8:	36 fc       	sbrc	r3, 6
 aea:	81 c1       	rjmp	.+770    	; 0xdee <vfprintf+0x3d0>
 aec:	23 2d       	mov	r18, r3
 aee:	20 64       	ori	r18, 0x40	; 64
 af0:	32 2e       	mov	r3, r18
 af2:	19 c0       	rjmp	.+50     	; 0xb26 <vfprintf+0x108>
 af4:	36 fe       	sbrs	r3, 6
 af6:	06 c0       	rjmp	.+12     	; 0xb04 <vfprintf+0xe6>
 af8:	8a e0       	ldi	r24, 0x0A	; 10
 afa:	98 9e       	mul	r9, r24
 afc:	20 0d       	add	r18, r0
 afe:	11 24       	eor	r1, r1
 b00:	92 2e       	mov	r9, r18
 b02:	11 c0       	rjmp	.+34     	; 0xb26 <vfprintf+0x108>
 b04:	ea e0       	ldi	r30, 0x0A	; 10
 b06:	2e 9e       	mul	r2, r30
 b08:	20 0d       	add	r18, r0
 b0a:	11 24       	eor	r1, r1
 b0c:	22 2e       	mov	r2, r18
 b0e:	f3 2d       	mov	r31, r3
 b10:	f0 62       	ori	r31, 0x20	; 32
 b12:	3f 2e       	mov	r3, r31
 b14:	08 c0       	rjmp	.+16     	; 0xb26 <vfprintf+0x108>
 b16:	8c 36       	cpi	r24, 0x6C	; 108
 b18:	21 f4       	brne	.+8      	; 0xb22 <vfprintf+0x104>
 b1a:	83 2d       	mov	r24, r3
 b1c:	80 68       	ori	r24, 0x80	; 128
 b1e:	38 2e       	mov	r3, r24
 b20:	02 c0       	rjmp	.+4      	; 0xb26 <vfprintf+0x108>
 b22:	88 36       	cpi	r24, 0x68	; 104
 b24:	41 f4       	brne	.+16     	; 0xb36 <vfprintf+0x118>
 b26:	f7 01       	movw	r30, r14
 b28:	93 fd       	sbrc	r25, 3
 b2a:	85 91       	lpm	r24, Z+
 b2c:	93 ff       	sbrs	r25, 3
 b2e:	81 91       	ld	r24, Z+
 b30:	7f 01       	movw	r14, r30
 b32:	81 11       	cpse	r24, r1
 b34:	b3 cf       	rjmp	.-154    	; 0xa9c <vfprintf+0x7e>
 b36:	98 2f       	mov	r25, r24
 b38:	9f 7d       	andi	r25, 0xDF	; 223
 b3a:	95 54       	subi	r25, 0x45	; 69
 b3c:	93 30       	cpi	r25, 0x03	; 3
 b3e:	28 f4       	brcc	.+10     	; 0xb4a <vfprintf+0x12c>
 b40:	0c 5f       	subi	r16, 0xFC	; 252
 b42:	1f 4f       	sbci	r17, 0xFF	; 255
 b44:	9f e3       	ldi	r25, 0x3F	; 63
 b46:	99 83       	std	Y+1, r25	; 0x01
 b48:	0d c0       	rjmp	.+26     	; 0xb64 <vfprintf+0x146>
 b4a:	83 36       	cpi	r24, 0x63	; 99
 b4c:	31 f0       	breq	.+12     	; 0xb5a <vfprintf+0x13c>
 b4e:	83 37       	cpi	r24, 0x73	; 115
 b50:	71 f0       	breq	.+28     	; 0xb6e <vfprintf+0x150>
 b52:	83 35       	cpi	r24, 0x53	; 83
 b54:	09 f0       	breq	.+2      	; 0xb58 <vfprintf+0x13a>
 b56:	59 c0       	rjmp	.+178    	; 0xc0a <vfprintf+0x1ec>
 b58:	21 c0       	rjmp	.+66     	; 0xb9c <vfprintf+0x17e>
 b5a:	f8 01       	movw	r30, r16
 b5c:	80 81       	ld	r24, Z
 b5e:	89 83       	std	Y+1, r24	; 0x01
 b60:	0e 5f       	subi	r16, 0xFE	; 254
 b62:	1f 4f       	sbci	r17, 0xFF	; 255
 b64:	88 24       	eor	r8, r8
 b66:	83 94       	inc	r8
 b68:	91 2c       	mov	r9, r1
 b6a:	53 01       	movw	r10, r6
 b6c:	13 c0       	rjmp	.+38     	; 0xb94 <vfprintf+0x176>
 b6e:	28 01       	movw	r4, r16
 b70:	f2 e0       	ldi	r31, 0x02	; 2
 b72:	4f 0e       	add	r4, r31
 b74:	51 1c       	adc	r5, r1
 b76:	f8 01       	movw	r30, r16
 b78:	a0 80       	ld	r10, Z
 b7a:	b1 80       	ldd	r11, Z+1	; 0x01
 b7c:	36 fe       	sbrs	r3, 6
 b7e:	03 c0       	rjmp	.+6      	; 0xb86 <vfprintf+0x168>
 b80:	69 2d       	mov	r22, r9
 b82:	70 e0       	ldi	r23, 0x00	; 0
 b84:	02 c0       	rjmp	.+4      	; 0xb8a <vfprintf+0x16c>
 b86:	6f ef       	ldi	r22, 0xFF	; 255
 b88:	7f ef       	ldi	r23, 0xFF	; 255
 b8a:	c5 01       	movw	r24, r10
 b8c:	0e 94 1e 07 	call	0xe3c	; 0xe3c <strnlen>
 b90:	4c 01       	movw	r8, r24
 b92:	82 01       	movw	r16, r4
 b94:	f3 2d       	mov	r31, r3
 b96:	ff 77       	andi	r31, 0x7F	; 127
 b98:	3f 2e       	mov	r3, r31
 b9a:	16 c0       	rjmp	.+44     	; 0xbc8 <vfprintf+0x1aa>
 b9c:	28 01       	movw	r4, r16
 b9e:	22 e0       	ldi	r18, 0x02	; 2
 ba0:	42 0e       	add	r4, r18
 ba2:	51 1c       	adc	r5, r1
 ba4:	f8 01       	movw	r30, r16
 ba6:	a0 80       	ld	r10, Z
 ba8:	b1 80       	ldd	r11, Z+1	; 0x01
 baa:	36 fe       	sbrs	r3, 6
 bac:	03 c0       	rjmp	.+6      	; 0xbb4 <vfprintf+0x196>
 bae:	69 2d       	mov	r22, r9
 bb0:	70 e0       	ldi	r23, 0x00	; 0
 bb2:	02 c0       	rjmp	.+4      	; 0xbb8 <vfprintf+0x19a>
 bb4:	6f ef       	ldi	r22, 0xFF	; 255
 bb6:	7f ef       	ldi	r23, 0xFF	; 255
 bb8:	c5 01       	movw	r24, r10
 bba:	0e 94 13 07 	call	0xe26	; 0xe26 <strnlen_P>
 bbe:	4c 01       	movw	r8, r24
 bc0:	f3 2d       	mov	r31, r3
 bc2:	f0 68       	ori	r31, 0x80	; 128
 bc4:	3f 2e       	mov	r3, r31
 bc6:	82 01       	movw	r16, r4
 bc8:	33 fc       	sbrc	r3, 3
 bca:	1b c0       	rjmp	.+54     	; 0xc02 <vfprintf+0x1e4>
 bcc:	82 2d       	mov	r24, r2
 bce:	90 e0       	ldi	r25, 0x00	; 0
 bd0:	88 16       	cp	r8, r24
 bd2:	99 06       	cpc	r9, r25
 bd4:	b0 f4       	brcc	.+44     	; 0xc02 <vfprintf+0x1e4>
 bd6:	b6 01       	movw	r22, r12
 bd8:	80 e2       	ldi	r24, 0x20	; 32
 bda:	90 e0       	ldi	r25, 0x00	; 0
 bdc:	0e 94 29 07 	call	0xe52	; 0xe52 <fputc>
 be0:	2a 94       	dec	r2
 be2:	f4 cf       	rjmp	.-24     	; 0xbcc <vfprintf+0x1ae>
 be4:	f5 01       	movw	r30, r10
 be6:	37 fc       	sbrc	r3, 7
 be8:	85 91       	lpm	r24, Z+
 bea:	37 fe       	sbrs	r3, 7
 bec:	81 91       	ld	r24, Z+
 bee:	5f 01       	movw	r10, r30
 bf0:	b6 01       	movw	r22, r12
 bf2:	90 e0       	ldi	r25, 0x00	; 0
 bf4:	0e 94 29 07 	call	0xe52	; 0xe52 <fputc>
 bf8:	21 10       	cpse	r2, r1
 bfa:	2a 94       	dec	r2
 bfc:	21 e0       	ldi	r18, 0x01	; 1
 bfe:	82 1a       	sub	r8, r18
 c00:	91 08       	sbc	r9, r1
 c02:	81 14       	cp	r8, r1
 c04:	91 04       	cpc	r9, r1
 c06:	71 f7       	brne	.-36     	; 0xbe4 <vfprintf+0x1c6>
 c08:	e8 c0       	rjmp	.+464    	; 0xdda <vfprintf+0x3bc>
 c0a:	84 36       	cpi	r24, 0x64	; 100
 c0c:	11 f0       	breq	.+4      	; 0xc12 <vfprintf+0x1f4>
 c0e:	89 36       	cpi	r24, 0x69	; 105
 c10:	41 f5       	brne	.+80     	; 0xc62 <vfprintf+0x244>
 c12:	f8 01       	movw	r30, r16
 c14:	37 fe       	sbrs	r3, 7
 c16:	07 c0       	rjmp	.+14     	; 0xc26 <vfprintf+0x208>
 c18:	60 81       	ld	r22, Z
 c1a:	71 81       	ldd	r23, Z+1	; 0x01
 c1c:	82 81       	ldd	r24, Z+2	; 0x02
 c1e:	93 81       	ldd	r25, Z+3	; 0x03
 c20:	0c 5f       	subi	r16, 0xFC	; 252
 c22:	1f 4f       	sbci	r17, 0xFF	; 255
 c24:	08 c0       	rjmp	.+16     	; 0xc36 <vfprintf+0x218>
 c26:	60 81       	ld	r22, Z
 c28:	71 81       	ldd	r23, Z+1	; 0x01
 c2a:	07 2e       	mov	r0, r23
 c2c:	00 0c       	add	r0, r0
 c2e:	88 0b       	sbc	r24, r24
 c30:	99 0b       	sbc	r25, r25
 c32:	0e 5f       	subi	r16, 0xFE	; 254
 c34:	1f 4f       	sbci	r17, 0xFF	; 255
 c36:	f3 2d       	mov	r31, r3
 c38:	ff 76       	andi	r31, 0x6F	; 111
 c3a:	3f 2e       	mov	r3, r31
 c3c:	97 ff       	sbrs	r25, 7
 c3e:	09 c0       	rjmp	.+18     	; 0xc52 <vfprintf+0x234>
 c40:	90 95       	com	r25
 c42:	80 95       	com	r24
 c44:	70 95       	com	r23
 c46:	61 95       	neg	r22
 c48:	7f 4f       	sbci	r23, 0xFF	; 255
 c4a:	8f 4f       	sbci	r24, 0xFF	; 255
 c4c:	9f 4f       	sbci	r25, 0xFF	; 255
 c4e:	f0 68       	ori	r31, 0x80	; 128
 c50:	3f 2e       	mov	r3, r31
 c52:	2a e0       	ldi	r18, 0x0A	; 10
 c54:	30 e0       	ldi	r19, 0x00	; 0
 c56:	a3 01       	movw	r20, r6
 c58:	0e 94 65 07 	call	0xeca	; 0xeca <__ultoa_invert>
 c5c:	88 2e       	mov	r8, r24
 c5e:	86 18       	sub	r8, r6
 c60:	45 c0       	rjmp	.+138    	; 0xcec <vfprintf+0x2ce>
 c62:	85 37       	cpi	r24, 0x75	; 117
 c64:	31 f4       	brne	.+12     	; 0xc72 <vfprintf+0x254>
 c66:	23 2d       	mov	r18, r3
 c68:	2f 7e       	andi	r18, 0xEF	; 239
 c6a:	b2 2e       	mov	r11, r18
 c6c:	2a e0       	ldi	r18, 0x0A	; 10
 c6e:	30 e0       	ldi	r19, 0x00	; 0
 c70:	25 c0       	rjmp	.+74     	; 0xcbc <vfprintf+0x29e>
 c72:	93 2d       	mov	r25, r3
 c74:	99 7f       	andi	r25, 0xF9	; 249
 c76:	b9 2e       	mov	r11, r25
 c78:	8f 36       	cpi	r24, 0x6F	; 111
 c7a:	c1 f0       	breq	.+48     	; 0xcac <vfprintf+0x28e>
 c7c:	18 f4       	brcc	.+6      	; 0xc84 <vfprintf+0x266>
 c7e:	88 35       	cpi	r24, 0x58	; 88
 c80:	79 f0       	breq	.+30     	; 0xca0 <vfprintf+0x282>
 c82:	b5 c0       	rjmp	.+362    	; 0xdee <vfprintf+0x3d0>
 c84:	80 37       	cpi	r24, 0x70	; 112
 c86:	19 f0       	breq	.+6      	; 0xc8e <vfprintf+0x270>
 c88:	88 37       	cpi	r24, 0x78	; 120
 c8a:	21 f0       	breq	.+8      	; 0xc94 <vfprintf+0x276>
 c8c:	b0 c0       	rjmp	.+352    	; 0xdee <vfprintf+0x3d0>
 c8e:	e9 2f       	mov	r30, r25
 c90:	e0 61       	ori	r30, 0x10	; 16
 c92:	be 2e       	mov	r11, r30
 c94:	b4 fe       	sbrs	r11, 4
 c96:	0d c0       	rjmp	.+26     	; 0xcb2 <vfprintf+0x294>
 c98:	fb 2d       	mov	r31, r11
 c9a:	f4 60       	ori	r31, 0x04	; 4
 c9c:	bf 2e       	mov	r11, r31
 c9e:	09 c0       	rjmp	.+18     	; 0xcb2 <vfprintf+0x294>
 ca0:	34 fe       	sbrs	r3, 4
 ca2:	0a c0       	rjmp	.+20     	; 0xcb8 <vfprintf+0x29a>
 ca4:	29 2f       	mov	r18, r25
 ca6:	26 60       	ori	r18, 0x06	; 6
 ca8:	b2 2e       	mov	r11, r18
 caa:	06 c0       	rjmp	.+12     	; 0xcb8 <vfprintf+0x29a>
 cac:	28 e0       	ldi	r18, 0x08	; 8
 cae:	30 e0       	ldi	r19, 0x00	; 0
 cb0:	05 c0       	rjmp	.+10     	; 0xcbc <vfprintf+0x29e>
 cb2:	20 e1       	ldi	r18, 0x10	; 16
 cb4:	30 e0       	ldi	r19, 0x00	; 0
 cb6:	02 c0       	rjmp	.+4      	; 0xcbc <vfprintf+0x29e>
 cb8:	20 e1       	ldi	r18, 0x10	; 16
 cba:	32 e0       	ldi	r19, 0x02	; 2
 cbc:	f8 01       	movw	r30, r16
 cbe:	b7 fe       	sbrs	r11, 7
 cc0:	07 c0       	rjmp	.+14     	; 0xcd0 <vfprintf+0x2b2>
 cc2:	60 81       	ld	r22, Z
 cc4:	71 81       	ldd	r23, Z+1	; 0x01
 cc6:	82 81       	ldd	r24, Z+2	; 0x02
 cc8:	93 81       	ldd	r25, Z+3	; 0x03
 cca:	0c 5f       	subi	r16, 0xFC	; 252
 ccc:	1f 4f       	sbci	r17, 0xFF	; 255
 cce:	06 c0       	rjmp	.+12     	; 0xcdc <vfprintf+0x2be>
 cd0:	60 81       	ld	r22, Z
 cd2:	71 81       	ldd	r23, Z+1	; 0x01
 cd4:	80 e0       	ldi	r24, 0x00	; 0
 cd6:	90 e0       	ldi	r25, 0x00	; 0
 cd8:	0e 5f       	subi	r16, 0xFE	; 254
 cda:	1f 4f       	sbci	r17, 0xFF	; 255
 cdc:	a3 01       	movw	r20, r6
 cde:	0e 94 65 07 	call	0xeca	; 0xeca <__ultoa_invert>
 ce2:	88 2e       	mov	r8, r24
 ce4:	86 18       	sub	r8, r6
 ce6:	fb 2d       	mov	r31, r11
 ce8:	ff 77       	andi	r31, 0x7F	; 127
 cea:	3f 2e       	mov	r3, r31
 cec:	36 fe       	sbrs	r3, 6
 cee:	0d c0       	rjmp	.+26     	; 0xd0a <vfprintf+0x2ec>
 cf0:	23 2d       	mov	r18, r3
 cf2:	2e 7f       	andi	r18, 0xFE	; 254
 cf4:	a2 2e       	mov	r10, r18
 cf6:	89 14       	cp	r8, r9
 cf8:	58 f4       	brcc	.+22     	; 0xd10 <vfprintf+0x2f2>
 cfa:	34 fe       	sbrs	r3, 4
 cfc:	0b c0       	rjmp	.+22     	; 0xd14 <vfprintf+0x2f6>
 cfe:	32 fc       	sbrc	r3, 2
 d00:	09 c0       	rjmp	.+18     	; 0xd14 <vfprintf+0x2f6>
 d02:	83 2d       	mov	r24, r3
 d04:	8e 7e       	andi	r24, 0xEE	; 238
 d06:	a8 2e       	mov	r10, r24
 d08:	05 c0       	rjmp	.+10     	; 0xd14 <vfprintf+0x2f6>
 d0a:	b8 2c       	mov	r11, r8
 d0c:	a3 2c       	mov	r10, r3
 d0e:	03 c0       	rjmp	.+6      	; 0xd16 <vfprintf+0x2f8>
 d10:	b8 2c       	mov	r11, r8
 d12:	01 c0       	rjmp	.+2      	; 0xd16 <vfprintf+0x2f8>
 d14:	b9 2c       	mov	r11, r9
 d16:	a4 fe       	sbrs	r10, 4
 d18:	0f c0       	rjmp	.+30     	; 0xd38 <vfprintf+0x31a>
 d1a:	fe 01       	movw	r30, r28
 d1c:	e8 0d       	add	r30, r8
 d1e:	f1 1d       	adc	r31, r1
 d20:	80 81       	ld	r24, Z
 d22:	80 33       	cpi	r24, 0x30	; 48
 d24:	21 f4       	brne	.+8      	; 0xd2e <vfprintf+0x310>
 d26:	9a 2d       	mov	r25, r10
 d28:	99 7e       	andi	r25, 0xE9	; 233
 d2a:	a9 2e       	mov	r10, r25
 d2c:	09 c0       	rjmp	.+18     	; 0xd40 <vfprintf+0x322>
 d2e:	a2 fe       	sbrs	r10, 2
 d30:	06 c0       	rjmp	.+12     	; 0xd3e <vfprintf+0x320>
 d32:	b3 94       	inc	r11
 d34:	b3 94       	inc	r11
 d36:	04 c0       	rjmp	.+8      	; 0xd40 <vfprintf+0x322>
 d38:	8a 2d       	mov	r24, r10
 d3a:	86 78       	andi	r24, 0x86	; 134
 d3c:	09 f0       	breq	.+2      	; 0xd40 <vfprintf+0x322>
 d3e:	b3 94       	inc	r11
 d40:	a3 fc       	sbrc	r10, 3
 d42:	11 c0       	rjmp	.+34     	; 0xd66 <vfprintf+0x348>
 d44:	a0 fe       	sbrs	r10, 0
 d46:	06 c0       	rjmp	.+12     	; 0xd54 <vfprintf+0x336>
 d48:	b2 14       	cp	r11, r2
 d4a:	88 f4       	brcc	.+34     	; 0xd6e <vfprintf+0x350>
 d4c:	28 0c       	add	r2, r8
 d4e:	92 2c       	mov	r9, r2
 d50:	9b 18       	sub	r9, r11
 d52:	0e c0       	rjmp	.+28     	; 0xd70 <vfprintf+0x352>
 d54:	b2 14       	cp	r11, r2
 d56:	60 f4       	brcc	.+24     	; 0xd70 <vfprintf+0x352>
 d58:	b6 01       	movw	r22, r12
 d5a:	80 e2       	ldi	r24, 0x20	; 32
 d5c:	90 e0       	ldi	r25, 0x00	; 0
 d5e:	0e 94 29 07 	call	0xe52	; 0xe52 <fputc>
 d62:	b3 94       	inc	r11
 d64:	f7 cf       	rjmp	.-18     	; 0xd54 <vfprintf+0x336>
 d66:	b2 14       	cp	r11, r2
 d68:	18 f4       	brcc	.+6      	; 0xd70 <vfprintf+0x352>
 d6a:	2b 18       	sub	r2, r11
 d6c:	02 c0       	rjmp	.+4      	; 0xd72 <vfprintf+0x354>
 d6e:	98 2c       	mov	r9, r8
 d70:	21 2c       	mov	r2, r1
 d72:	a4 fe       	sbrs	r10, 4
 d74:	10 c0       	rjmp	.+32     	; 0xd96 <vfprintf+0x378>
 d76:	b6 01       	movw	r22, r12
 d78:	80 e3       	ldi	r24, 0x30	; 48
 d7a:	90 e0       	ldi	r25, 0x00	; 0
 d7c:	0e 94 29 07 	call	0xe52	; 0xe52 <fputc>
 d80:	a2 fe       	sbrs	r10, 2
 d82:	17 c0       	rjmp	.+46     	; 0xdb2 <vfprintf+0x394>
 d84:	a1 fc       	sbrc	r10, 1
 d86:	03 c0       	rjmp	.+6      	; 0xd8e <vfprintf+0x370>
 d88:	88 e7       	ldi	r24, 0x78	; 120
 d8a:	90 e0       	ldi	r25, 0x00	; 0
 d8c:	02 c0       	rjmp	.+4      	; 0xd92 <vfprintf+0x374>
 d8e:	88 e5       	ldi	r24, 0x58	; 88
 d90:	90 e0       	ldi	r25, 0x00	; 0
 d92:	b6 01       	movw	r22, r12
 d94:	0c c0       	rjmp	.+24     	; 0xdae <vfprintf+0x390>
 d96:	8a 2d       	mov	r24, r10
 d98:	86 78       	andi	r24, 0x86	; 134
 d9a:	59 f0       	breq	.+22     	; 0xdb2 <vfprintf+0x394>
 d9c:	a1 fe       	sbrs	r10, 1
 d9e:	02 c0       	rjmp	.+4      	; 0xda4 <vfprintf+0x386>
 da0:	8b e2       	ldi	r24, 0x2B	; 43
 da2:	01 c0       	rjmp	.+2      	; 0xda6 <vfprintf+0x388>
 da4:	80 e2       	ldi	r24, 0x20	; 32
 da6:	a7 fc       	sbrc	r10, 7
 da8:	8d e2       	ldi	r24, 0x2D	; 45
 daa:	b6 01       	movw	r22, r12
 dac:	90 e0       	ldi	r25, 0x00	; 0
 dae:	0e 94 29 07 	call	0xe52	; 0xe52 <fputc>
 db2:	89 14       	cp	r8, r9
 db4:	38 f4       	brcc	.+14     	; 0xdc4 <vfprintf+0x3a6>
 db6:	b6 01       	movw	r22, r12
 db8:	80 e3       	ldi	r24, 0x30	; 48
 dba:	90 e0       	ldi	r25, 0x00	; 0
 dbc:	0e 94 29 07 	call	0xe52	; 0xe52 <fputc>
 dc0:	9a 94       	dec	r9
 dc2:	f7 cf       	rjmp	.-18     	; 0xdb2 <vfprintf+0x394>
 dc4:	8a 94       	dec	r8
 dc6:	f3 01       	movw	r30, r6
 dc8:	e8 0d       	add	r30, r8
 dca:	f1 1d       	adc	r31, r1
 dcc:	80 81       	ld	r24, Z
 dce:	b6 01       	movw	r22, r12
 dd0:	90 e0       	ldi	r25, 0x00	; 0
 dd2:	0e 94 29 07 	call	0xe52	; 0xe52 <fputc>
 dd6:	81 10       	cpse	r8, r1
 dd8:	f5 cf       	rjmp	.-22     	; 0xdc4 <vfprintf+0x3a6>
 dda:	22 20       	and	r2, r2
 ddc:	09 f4       	brne	.+2      	; 0xde0 <vfprintf+0x3c2>
 dde:	42 ce       	rjmp	.-892    	; 0xa64 <vfprintf+0x46>
 de0:	b6 01       	movw	r22, r12
 de2:	80 e2       	ldi	r24, 0x20	; 32
 de4:	90 e0       	ldi	r25, 0x00	; 0
 de6:	0e 94 29 07 	call	0xe52	; 0xe52 <fputc>
 dea:	2a 94       	dec	r2
 dec:	f6 cf       	rjmp	.-20     	; 0xdda <vfprintf+0x3bc>
 dee:	f6 01       	movw	r30, r12
 df0:	86 81       	ldd	r24, Z+6	; 0x06
 df2:	97 81       	ldd	r25, Z+7	; 0x07
 df4:	02 c0       	rjmp	.+4      	; 0xdfa <vfprintf+0x3dc>
 df6:	8f ef       	ldi	r24, 0xFF	; 255
 df8:	9f ef       	ldi	r25, 0xFF	; 255
 dfa:	2b 96       	adiw	r28, 0x0b	; 11
 dfc:	cd bf       	out	0x3d, r28	; 61
 dfe:	de bf       	out	0x3e, r29	; 62
 e00:	df 91       	pop	r29
 e02:	cf 91       	pop	r28
 e04:	1f 91       	pop	r17
 e06:	0f 91       	pop	r16
 e08:	ff 90       	pop	r15
 e0a:	ef 90       	pop	r14
 e0c:	df 90       	pop	r13
 e0e:	cf 90       	pop	r12
 e10:	bf 90       	pop	r11
 e12:	af 90       	pop	r10
 e14:	9f 90       	pop	r9
 e16:	8f 90       	pop	r8
 e18:	7f 90       	pop	r7
 e1a:	6f 90       	pop	r6
 e1c:	5f 90       	pop	r5
 e1e:	4f 90       	pop	r4
 e20:	3f 90       	pop	r3
 e22:	2f 90       	pop	r2
 e24:	08 95       	ret

00000e26 <strnlen_P>:
 e26:	fc 01       	movw	r30, r24
 e28:	05 90       	lpm	r0, Z+
 e2a:	61 50       	subi	r22, 0x01	; 1
 e2c:	70 40       	sbci	r23, 0x00	; 0
 e2e:	01 10       	cpse	r0, r1
 e30:	d8 f7       	brcc	.-10     	; 0xe28 <strnlen_P+0x2>
 e32:	80 95       	com	r24
 e34:	90 95       	com	r25
 e36:	8e 0f       	add	r24, r30
 e38:	9f 1f       	adc	r25, r31
 e3a:	08 95       	ret

00000e3c <strnlen>:
 e3c:	fc 01       	movw	r30, r24
 e3e:	61 50       	subi	r22, 0x01	; 1
 e40:	70 40       	sbci	r23, 0x00	; 0
 e42:	01 90       	ld	r0, Z+
 e44:	01 10       	cpse	r0, r1
 e46:	d8 f7       	brcc	.-10     	; 0xe3e <strnlen+0x2>
 e48:	80 95       	com	r24
 e4a:	90 95       	com	r25
 e4c:	8e 0f       	add	r24, r30
 e4e:	9f 1f       	adc	r25, r31
 e50:	08 95       	ret

00000e52 <fputc>:
 e52:	0f 93       	push	r16
 e54:	1f 93       	push	r17
 e56:	cf 93       	push	r28
 e58:	df 93       	push	r29
 e5a:	fb 01       	movw	r30, r22
 e5c:	23 81       	ldd	r18, Z+3	; 0x03
 e5e:	21 fd       	sbrc	r18, 1
 e60:	03 c0       	rjmp	.+6      	; 0xe68 <fputc+0x16>
 e62:	8f ef       	ldi	r24, 0xFF	; 255
 e64:	9f ef       	ldi	r25, 0xFF	; 255
 e66:	2c c0       	rjmp	.+88     	; 0xec0 <fputc+0x6e>
 e68:	22 ff       	sbrs	r18, 2
 e6a:	16 c0       	rjmp	.+44     	; 0xe98 <fputc+0x46>
 e6c:	46 81       	ldd	r20, Z+6	; 0x06
 e6e:	57 81       	ldd	r21, Z+7	; 0x07
 e70:	24 81       	ldd	r18, Z+4	; 0x04
 e72:	35 81       	ldd	r19, Z+5	; 0x05
 e74:	42 17       	cp	r20, r18
 e76:	53 07       	cpc	r21, r19
 e78:	44 f4       	brge	.+16     	; 0xe8a <fputc+0x38>
 e7a:	a0 81       	ld	r26, Z
 e7c:	b1 81       	ldd	r27, Z+1	; 0x01
 e7e:	9d 01       	movw	r18, r26
 e80:	2f 5f       	subi	r18, 0xFF	; 255
 e82:	3f 4f       	sbci	r19, 0xFF	; 255
 e84:	20 83       	st	Z, r18
 e86:	31 83       	std	Z+1, r19	; 0x01
 e88:	8c 93       	st	X, r24
 e8a:	26 81       	ldd	r18, Z+6	; 0x06
 e8c:	37 81       	ldd	r19, Z+7	; 0x07
 e8e:	2f 5f       	subi	r18, 0xFF	; 255
 e90:	3f 4f       	sbci	r19, 0xFF	; 255
 e92:	26 83       	std	Z+6, r18	; 0x06
 e94:	37 83       	std	Z+7, r19	; 0x07
 e96:	14 c0       	rjmp	.+40     	; 0xec0 <fputc+0x6e>
 e98:	8b 01       	movw	r16, r22
 e9a:	ec 01       	movw	r28, r24
 e9c:	fb 01       	movw	r30, r22
 e9e:	00 84       	ldd	r0, Z+8	; 0x08
 ea0:	f1 85       	ldd	r31, Z+9	; 0x09
 ea2:	e0 2d       	mov	r30, r0
 ea4:	09 95       	icall
 ea6:	89 2b       	or	r24, r25
 ea8:	e1 f6       	brne	.-72     	; 0xe62 <fputc+0x10>
 eaa:	d8 01       	movw	r26, r16
 eac:	16 96       	adiw	r26, 0x06	; 6
 eae:	8d 91       	ld	r24, X+
 eb0:	9c 91       	ld	r25, X
 eb2:	17 97       	sbiw	r26, 0x07	; 7
 eb4:	01 96       	adiw	r24, 0x01	; 1
 eb6:	16 96       	adiw	r26, 0x06	; 6
 eb8:	8d 93       	st	X+, r24
 eba:	9c 93       	st	X, r25
 ebc:	17 97       	sbiw	r26, 0x07	; 7
 ebe:	ce 01       	movw	r24, r28
 ec0:	df 91       	pop	r29
 ec2:	cf 91       	pop	r28
 ec4:	1f 91       	pop	r17
 ec6:	0f 91       	pop	r16
 ec8:	08 95       	ret

00000eca <__ultoa_invert>:
 eca:	fa 01       	movw	r30, r20
 ecc:	aa 27       	eor	r26, r26
 ece:	28 30       	cpi	r18, 0x08	; 8
 ed0:	51 f1       	breq	.+84     	; 0xf26 <__ultoa_invert+0x5c>
 ed2:	20 31       	cpi	r18, 0x10	; 16
 ed4:	81 f1       	breq	.+96     	; 0xf36 <__ultoa_invert+0x6c>
 ed6:	e8 94       	clt
 ed8:	6f 93       	push	r22
 eda:	6e 7f       	andi	r22, 0xFE	; 254
 edc:	6e 5f       	subi	r22, 0xFE	; 254
 ede:	7f 4f       	sbci	r23, 0xFF	; 255
 ee0:	8f 4f       	sbci	r24, 0xFF	; 255
 ee2:	9f 4f       	sbci	r25, 0xFF	; 255
 ee4:	af 4f       	sbci	r26, 0xFF	; 255
 ee6:	b1 e0       	ldi	r27, 0x01	; 1
 ee8:	3e d0       	rcall	.+124    	; 0xf66 <__ultoa_invert+0x9c>
 eea:	b4 e0       	ldi	r27, 0x04	; 4
 eec:	3c d0       	rcall	.+120    	; 0xf66 <__ultoa_invert+0x9c>
 eee:	67 0f       	add	r22, r23
 ef0:	78 1f       	adc	r23, r24
 ef2:	89 1f       	adc	r24, r25
 ef4:	9a 1f       	adc	r25, r26
 ef6:	a1 1d       	adc	r26, r1
 ef8:	68 0f       	add	r22, r24
 efa:	79 1f       	adc	r23, r25
 efc:	8a 1f       	adc	r24, r26
 efe:	91 1d       	adc	r25, r1
 f00:	a1 1d       	adc	r26, r1
 f02:	6a 0f       	add	r22, r26
 f04:	71 1d       	adc	r23, r1
 f06:	81 1d       	adc	r24, r1
 f08:	91 1d       	adc	r25, r1
 f0a:	a1 1d       	adc	r26, r1
 f0c:	20 d0       	rcall	.+64     	; 0xf4e <__ultoa_invert+0x84>
 f0e:	09 f4       	brne	.+2      	; 0xf12 <__ultoa_invert+0x48>
 f10:	68 94       	set
 f12:	3f 91       	pop	r19
 f14:	2a e0       	ldi	r18, 0x0A	; 10
 f16:	26 9f       	mul	r18, r22
 f18:	11 24       	eor	r1, r1
 f1a:	30 19       	sub	r19, r0
 f1c:	30 5d       	subi	r19, 0xD0	; 208
 f1e:	31 93       	st	Z+, r19
 f20:	de f6       	brtc	.-74     	; 0xed8 <__ultoa_invert+0xe>
 f22:	cf 01       	movw	r24, r30
 f24:	08 95       	ret
 f26:	46 2f       	mov	r20, r22
 f28:	47 70       	andi	r20, 0x07	; 7
 f2a:	40 5d       	subi	r20, 0xD0	; 208
 f2c:	41 93       	st	Z+, r20
 f2e:	b3 e0       	ldi	r27, 0x03	; 3
 f30:	0f d0       	rcall	.+30     	; 0xf50 <__ultoa_invert+0x86>
 f32:	c9 f7       	brne	.-14     	; 0xf26 <__ultoa_invert+0x5c>
 f34:	f6 cf       	rjmp	.-20     	; 0xf22 <__ultoa_invert+0x58>
 f36:	46 2f       	mov	r20, r22
 f38:	4f 70       	andi	r20, 0x0F	; 15
 f3a:	40 5d       	subi	r20, 0xD0	; 208
 f3c:	4a 33       	cpi	r20, 0x3A	; 58
 f3e:	18 f0       	brcs	.+6      	; 0xf46 <__ultoa_invert+0x7c>
 f40:	49 5d       	subi	r20, 0xD9	; 217
 f42:	31 fd       	sbrc	r19, 1
 f44:	40 52       	subi	r20, 0x20	; 32
 f46:	41 93       	st	Z+, r20
 f48:	02 d0       	rcall	.+4      	; 0xf4e <__ultoa_invert+0x84>
 f4a:	a9 f7       	brne	.-22     	; 0xf36 <__ultoa_invert+0x6c>
 f4c:	ea cf       	rjmp	.-44     	; 0xf22 <__ultoa_invert+0x58>
 f4e:	b4 e0       	ldi	r27, 0x04	; 4
 f50:	a6 95       	lsr	r26
 f52:	97 95       	ror	r25
 f54:	87 95       	ror	r24
 f56:	77 95       	ror	r23
 f58:	67 95       	ror	r22
 f5a:	ba 95       	dec	r27
 f5c:	c9 f7       	brne	.-14     	; 0xf50 <__ultoa_invert+0x86>
 f5e:	00 97       	sbiw	r24, 0x00	; 0
 f60:	61 05       	cpc	r22, r1
 f62:	71 05       	cpc	r23, r1
 f64:	08 95       	ret
 f66:	9b 01       	movw	r18, r22
 f68:	ac 01       	movw	r20, r24
 f6a:	0a 2e       	mov	r0, r26
 f6c:	06 94       	lsr	r0
 f6e:	57 95       	ror	r21
 f70:	47 95       	ror	r20
 f72:	37 95       	ror	r19
 f74:	27 95       	ror	r18
 f76:	ba 95       	dec	r27
 f78:	c9 f7       	brne	.-14     	; 0xf6c <__ultoa_invert+0xa2>
 f7a:	62 0f       	add	r22, r18
 f7c:	73 1f       	adc	r23, r19
 f7e:	84 1f       	adc	r24, r20
 f80:	95 1f       	adc	r25, r21
 f82:	a0 1d       	adc	r26, r0
 f84:	08 95       	ret

00000f86 <__do_global_dtors>:
 f86:	10 e0       	ldi	r17, 0x00	; 0
 f88:	cb e7       	ldi	r28, 0x7B	; 123
 f8a:	d0 e0       	ldi	r29, 0x00	; 0
 f8c:	04 c0       	rjmp	.+8      	; 0xf96 <__do_global_dtors+0x10>
 f8e:	fe 01       	movw	r30, r28
 f90:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <__tablejump2__>
 f94:	21 96       	adiw	r28, 0x01	; 1
 f96:	cc 37       	cpi	r28, 0x7C	; 124
 f98:	d1 07       	cpc	r29, r17
 f9a:	c9 f7       	brne	.-14     	; 0xf8e <__do_global_dtors+0x8>
 f9c:	f8 94       	cli

00000f9e <__stop_program>:
 f9e:	ff cf       	rjmp	.-2      	; 0xf9e <__stop_program>
