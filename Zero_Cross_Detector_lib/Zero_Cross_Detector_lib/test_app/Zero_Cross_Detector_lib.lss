
Zero_Cross_Detector_lib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00804000  00001550  000015e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001550  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  0080403c  0080403c  00001620  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001620  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000167c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000400  00000000  00000000  000016c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007bc7  00000000  00000000  00001ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004001  00000000  00000000  00009687  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001f94  00000000  00000000  0000d688  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008d8  00000000  00000000  0000f61c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000046af  00000000  00000000  0000fef4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001190  00000000  00000000  000145a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002e0  00000000  00000000  00015733  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__dtors_end>
       4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
       8:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
       c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      10:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      14:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__vector_5>
      18:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      1c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      20:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      24:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      28:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      2c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      30:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      34:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      38:	0c 94 19 03 	jmp	0x632	; 0x632 <__vector_14>
      3c:	0c 94 5e 03 	jmp	0x6bc	; 0x6bc <__vector_15>
      40:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      44:	0c 94 a3 03 	jmp	0x746	; 0x746 <__vector_17>
      48:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      4c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      50:	0c 94 b5 06 	jmp	0xd6a	; 0xd6a <__vector_20>
      54:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      58:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      5c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      60:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      64:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      68:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      6c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      70:	0c 94 af 02 	jmp	0x55e	; 0x55e <__vector_28>
      74:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      78:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      7c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      80:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      84:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      88:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      8c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      90:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      94:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      98:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      9c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      a0:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      a4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      a8:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      ac:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      b0:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      b4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      b8:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      bc:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      c0:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      c4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      c8:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      cc:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      d0:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <__vector_52>
      d4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      d8:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      dc:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      e0:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      e4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      e8:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      ec:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      f0:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>

000000f4 <__ctors_start>:
      f4:	95 02       	muls	r25, r21

000000f6 <__ctors_end>:
      f6:	a2 02       	muls	r26, r18

000000f8 <__dtors_end>:
      f8:	11 24       	eor	r1, r1
      fa:	1f be       	out	0x3f, r1	; 63
      fc:	cf ef       	ldi	r28, 0xFF	; 255
      fe:	cd bf       	out	0x3d, r28	; 61
     100:	df e7       	ldi	r29, 0x7F	; 127
     102:	de bf       	out	0x3e, r29	; 62

00000104 <__do_copy_data>:
     104:	10 e4       	ldi	r17, 0x40	; 64
     106:	a0 e0       	ldi	r26, 0x00	; 0
     108:	b0 e4       	ldi	r27, 0x40	; 64
     10a:	e0 e5       	ldi	r30, 0x50	; 80
     10c:	f5 e1       	ldi	r31, 0x15	; 21
     10e:	00 e0       	ldi	r16, 0x00	; 0
     110:	0b bf       	out	0x3b, r16	; 59
     112:	02 c0       	rjmp	.+4      	; 0x118 <__do_copy_data+0x14>
     114:	07 90       	elpm	r0, Z+
     116:	0d 92       	st	X+, r0
     118:	ac 33       	cpi	r26, 0x3C	; 60
     11a:	b1 07       	cpc	r27, r17
     11c:	d9 f7       	brne	.-10     	; 0x114 <__do_copy_data+0x10>

0000011e <__do_clear_bss>:
     11e:	20 e4       	ldi	r18, 0x40	; 64
     120:	ac e3       	ldi	r26, 0x3C	; 60
     122:	b0 e4       	ldi	r27, 0x40	; 64
     124:	01 c0       	rjmp	.+2      	; 0x128 <.do_clear_bss_start>

00000126 <.do_clear_bss_loop>:
     126:	1d 92       	st	X+, r1

00000128 <.do_clear_bss_start>:
     128:	ae 35       	cpi	r26, 0x5E	; 94
     12a:	b2 07       	cpc	r27, r18
     12c:	e1 f7       	brne	.-8      	; 0x126 <.do_clear_bss_loop>

0000012e <__do_global_ctors>:
     12e:	10 e0       	ldi	r17, 0x00	; 0
     130:	cb e7       	ldi	r28, 0x7B	; 123
     132:	d0 e0       	ldi	r29, 0x00	; 0
     134:	04 c0       	rjmp	.+8      	; 0x13e <__do_global_ctors+0x10>
     136:	21 97       	sbiw	r28, 0x01	; 1
     138:	fe 01       	movw	r30, r28
     13a:	0e 94 ca 07 	call	0xf94	; 0xf94 <__tablejump2__>
     13e:	ca 37       	cpi	r28, 0x7A	; 122
     140:	d1 07       	cpc	r29, r17
     142:	c9 f7       	brne	.-14     	; 0x136 <__do_global_ctors+0x8>
     144:	0e 94 37 01 	call	0x26e	; 0x26e <main>
     148:	0c 94 9b 0a 	jmp	0x1536	; 0x1536 <__do_global_dtors>

0000014c <__bad_interrupt>:
     14c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000150 <PORTB_toggle_pin_level>:
 * Toggle the pin levels on pins defined by bit mask
 *
 * \param[in] pin       The pin number within port
 */
static inline void PORTB_toggle_pin_level(const uint8_t pin)
{
     150:	cf 93       	push	r28
     152:	df 93       	push	r29
     154:	1f 92       	push	r1
     156:	cd b7       	in	r28, 0x3d	; 61
     158:	de b7       	in	r29, 0x3e	; 62
     15a:	89 83       	std	Y+1, r24	; 0x01
	VPORTB.IN |= 1 << pin;
     15c:	84 e0       	ldi	r24, 0x04	; 4
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	24 e0       	ldi	r18, 0x04	; 4
     162:	30 e0       	ldi	r19, 0x00	; 0
     164:	f9 01       	movw	r30, r18
     166:	22 81       	ldd	r18, Z+2	; 0x02
     168:	62 2f       	mov	r22, r18
     16a:	29 81       	ldd	r18, Y+1	; 0x01
     16c:	42 2f       	mov	r20, r18
     16e:	50 e0       	ldi	r21, 0x00	; 0
     170:	21 e0       	ldi	r18, 0x01	; 1
     172:	30 e0       	ldi	r19, 0x00	; 0
     174:	02 c0       	rjmp	.+4      	; 0x17a <PORTB_toggle_pin_level+0x2a>
     176:	22 0f       	add	r18, r18
     178:	33 1f       	adc	r19, r19
     17a:	4a 95       	dec	r20
     17c:	e2 f7       	brpl	.-8      	; 0x176 <PORTB_toggle_pin_level+0x26>
     17e:	26 2b       	or	r18, r22
     180:	fc 01       	movw	r30, r24
     182:	22 83       	std	Z+2, r18	; 0x02
}
     184:	00 00       	nop
     186:	0f 90       	pop	r0
     188:	df 91       	pop	r29
     18a:	cf 91       	pop	r28
     18c:	08 95       	ret

0000018e <LED0_toggle_level>:
 * \brief Toggle output level on LED0
 *
 * Toggle the pin level
 */
static inline void LED0_toggle_level()
{
     18e:	cf 93       	push	r28
     190:	df 93       	push	r29
     192:	cd b7       	in	r28, 0x3d	; 61
     194:	de b7       	in	r29, 0x3e	; 62
	PORTB_toggle_pin_level(3);
     196:	83 e0       	ldi	r24, 0x03	; 3
     198:	0e 94 a8 00 	call	0x150	; 0x150 <PORTB_toggle_pin_level>
}
     19c:	00 00       	nop
     19e:	df 91       	pop	r29
     1a0:	cf 91       	pop	r28
     1a2:	08 95       	ret

000001a4 <_ZN18Zero_Cross_Counter4InitEv>:
	bool toogle_bit;
//functions
public:
	Zero_Cross_Counter();
	~Zero_Cross_Counter();
	bool Init(){return true;}
     1a4:	cf 93       	push	r28
     1a6:	df 93       	push	r29
     1a8:	00 d0       	rcall	.+0      	; 0x1aa <_ZN18Zero_Cross_Counter4InitEv+0x6>
     1aa:	cd b7       	in	r28, 0x3d	; 61
     1ac:	de b7       	in	r29, 0x3e	; 62
     1ae:	89 83       	std	Y+1, r24	; 0x01
     1b0:	9a 83       	std	Y+2, r25	; 0x02
     1b2:	81 e0       	ldi	r24, 0x01	; 1
     1b4:	0f 90       	pop	r0
     1b6:	0f 90       	pop	r0
     1b8:	df 91       	pop	r29
     1ba:	cf 91       	pop	r28
     1bc:	08 95       	ret

000001be <_Z10RTC_enablev>:

static Zero_Cross_Counter counter;


void RTC_enable(void)
{
     1be:	cf 93       	push	r28
     1c0:	df 93       	push	r29
     1c2:	cd b7       	in	r28, 0x3d	; 61
     1c4:	de b7       	in	r29, 0x3e	; 62
	// Wait for RTC CTRLA to be unsynchronized
	while (RTC.STATUS & RTC_CTRLABUSY_bm) {
     1c6:	80 e4       	ldi	r24, 0x40	; 64
     1c8:	91 e0       	ldi	r25, 0x01	; 1
     1ca:	fc 01       	movw	r30, r24
     1cc:	81 81       	ldd	r24, Z+1	; 0x01
     1ce:	88 2f       	mov	r24, r24
     1d0:	90 e0       	ldi	r25, 0x00	; 0
     1d2:	81 70       	andi	r24, 0x01	; 1
     1d4:	99 27       	eor	r25, r25
     1d6:	21 e0       	ldi	r18, 0x01	; 1
     1d8:	89 2b       	or	r24, r25
     1da:	09 f4       	brne	.+2      	; 0x1de <_Z10RTC_enablev+0x20>
     1dc:	20 e0       	ldi	r18, 0x00	; 0
     1de:	22 23       	and	r18, r18
     1e0:	09 f0       	breq	.+2      	; 0x1e4 <_Z10RTC_enablev+0x26>
     1e2:	f1 cf       	rjmp	.-30     	; 0x1c6 <_Z10RTC_enablev+0x8>
	}

	// Enable RTC
	RTC.CTRLA |= RTC_RTCEN_bm;
     1e4:	80 e4       	ldi	r24, 0x40	; 64
     1e6:	91 e0       	ldi	r25, 0x01	; 1
     1e8:	20 e4       	ldi	r18, 0x40	; 64
     1ea:	31 e0       	ldi	r19, 0x01	; 1
     1ec:	f9 01       	movw	r30, r18
     1ee:	20 81       	ld	r18, Z
     1f0:	21 60       	ori	r18, 0x01	; 1
     1f2:	fc 01       	movw	r30, r24
     1f4:	20 83       	st	Z, r18
}
     1f6:	00 00       	nop
     1f8:	df 91       	pop	r29
     1fa:	cf 91       	pop	r28
     1fc:	08 95       	ret

000001fe <__vector_5>:

ISR(RTC_CNT_vect)
{
     1fe:	1f 92       	push	r1
     200:	0f 92       	push	r0
     202:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     206:	0f 92       	push	r0
     208:	11 24       	eor	r1, r1
     20a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     20e:	0f 92       	push	r0
     210:	2f 93       	push	r18
     212:	3f 93       	push	r19
     214:	4f 93       	push	r20
     216:	5f 93       	push	r21
     218:	6f 93       	push	r22
     21a:	7f 93       	push	r23
     21c:	8f 93       	push	r24
     21e:	9f 93       	push	r25
     220:	af 93       	push	r26
     222:	bf 93       	push	r27
     224:	ef 93       	push	r30
     226:	ff 93       	push	r31
     228:	cf 93       	push	r28
     22a:	df 93       	push	r29
     22c:	cd b7       	in	r28, 0x3d	; 61
     22e:	de b7       	in	r29, 0x3e	; 62
	/* Toggle LED0 */
	LED0_toggle_level();
     230:	0e 94 c7 00 	call	0x18e	; 0x18e <LED0_toggle_level>

	/* Overflow interrupt flag has to be cleared manually */
	RTC.INTFLAGS = RTC_OVF_bm;
     234:	80 e4       	ldi	r24, 0x40	; 64
     236:	91 e0       	ldi	r25, 0x01	; 1
     238:	21 e0       	ldi	r18, 0x01	; 1
     23a:	fc 01       	movw	r30, r24
     23c:	23 83       	std	Z+3, r18	; 0x03
}
     23e:	00 00       	nop
     240:	df 91       	pop	r29
     242:	cf 91       	pop	r28
     244:	ff 91       	pop	r31
     246:	ef 91       	pop	r30
     248:	bf 91       	pop	r27
     24a:	af 91       	pop	r26
     24c:	9f 91       	pop	r25
     24e:	8f 91       	pop	r24
     250:	7f 91       	pop	r23
     252:	6f 91       	pop	r22
     254:	5f 91       	pop	r21
     256:	4f 91       	pop	r20
     258:	3f 91       	pop	r19
     25a:	2f 91       	pop	r18
     25c:	0f 90       	pop	r0
     25e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     262:	0f 90       	pop	r0
     264:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     268:	0f 90       	pop	r0
     26a:	1f 90       	pop	r1
     26c:	18 95       	reti

0000026e <main>:

int main(void)
{
     26e:	cf 93       	push	r28
     270:	df 93       	push	r29
     272:	cd b7       	in	r28, 0x3d	; 61
     274:	de b7       	in	r29, 0x3e	; 62
     276:	6e 97       	sbiw	r28, 0x1e	; 30
     278:	cd bf       	out	0x3d, r28	; 61
     27a:	de bf       	out	0x3e, r29	; 62
	uint32_t last_frequency_b=0;
     27c:	19 82       	std	Y+1, r1	; 0x01
     27e:	1a 82       	std	Y+2, r1	; 0x02
     280:	1b 82       	std	Y+3, r1	; 0x03
     282:	1c 82       	std	Y+4, r1	; 0x04
	uint32_t last_frequency_c=0;
     284:	1d 82       	std	Y+5, r1	; 0x05
     286:	1e 82       	std	Y+6, r1	; 0x06
     288:	1f 82       	std	Y+7, r1	; 0x07
     28a:	18 86       	std	Y+8, r1	; 0x08
		uint32_t current_frequency_b=0;
     28c:	19 86       	std	Y+9, r1	; 0x09
     28e:	1a 86       	std	Y+10, r1	; 0x0a
     290:	1b 86       	std	Y+11, r1	; 0x0b
     292:	1c 86       	std	Y+12, r1	; 0x0c
		uint32_t current_frequency_c=0;
     294:	1d 86       	std	Y+13, r1	; 0x0d
     296:	1e 86       	std	Y+14, r1	; 0x0e
     298:	1f 86       	std	Y+15, r1	; 0x0f
     29a:	18 8a       	std	Y+16, r1	; 0x10
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
     29c:	0e 94 a5 05 	call	0xb4a	; 0xb4a <atmel_start_init>
	RTC_enable();
     2a0:	0e 94 df 00 	call	0x1be	; 0x1be <_Z10RTC_enablev>
	ENABLE_INTERRUPTS();
     2a4:	78 94       	sei
	counter.Init();
     2a6:	8c e3       	ldi	r24, 0x3C	; 60
     2a8:	90 e4       	ldi	r25, 0x40	; 64
     2aa:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN18Zero_Cross_Counter4InitEv>
	asm("nop");
     2ae:	00 00       	nop
	printf("hello\n\r");
     2b0:	8e e0       	ldi	r24, 0x0E	; 14
     2b2:	90 e4       	ldi	r25, 0x40	; 64
     2b4:	89 2f       	mov	r24, r25
     2b6:	8f 93       	push	r24
     2b8:	8e e0       	ldi	r24, 0x0E	; 14
     2ba:	90 e4       	ldi	r25, 0x40	; 64
     2bc:	8f 93       	push	r24
     2be:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <printf>
     2c2:	0f 90       	pop	r0
     2c4:	0f 90       	pop	r0
	/* Replace with your application code */
	while (1) {
		current_frequency_c=(uint32_t)(24000000/(counter.capture_timer_fall));
     2c6:	80 91 3f 40 	lds	r24, 0x403F	; 0x80403f <__data_end+0x3>
     2ca:	90 91 40 40 	lds	r25, 0x4040	; 0x804040 <__data_end+0x4>
     2ce:	9c 01       	movw	r18, r24
     2d0:	40 e0       	ldi	r20, 0x00	; 0
     2d2:	50 e0       	ldi	r21, 0x00	; 0
     2d4:	80 e0       	ldi	r24, 0x00	; 0
     2d6:	96 e3       	ldi	r25, 0x36	; 54
     2d8:	ae e6       	ldi	r26, 0x6E	; 110
     2da:	b1 e0       	ldi	r27, 0x01	; 1
     2dc:	bc 01       	movw	r22, r24
     2de:	cd 01       	movw	r24, r26
     2e0:	0e 94 89 07 	call	0xf12	; 0xf12 <__divmodsi4>
     2e4:	da 01       	movw	r26, r20
     2e6:	c9 01       	movw	r24, r18
     2e8:	8d 87       	std	Y+13, r24	; 0x0d
     2ea:	9e 87       	std	Y+14, r25	; 0x0e
     2ec:	af 87       	std	Y+15, r26	; 0x0f
     2ee:	b8 8b       	std	Y+16, r27	; 0x10
		if (last_frequency_c!=current_frequency_c)
     2f0:	2d 81       	ldd	r18, Y+5	; 0x05
     2f2:	3e 81       	ldd	r19, Y+6	; 0x06
     2f4:	4f 81       	ldd	r20, Y+7	; 0x07
     2f6:	58 85       	ldd	r21, Y+8	; 0x08
     2f8:	8d 85       	ldd	r24, Y+13	; 0x0d
     2fa:	9e 85       	ldd	r25, Y+14	; 0x0e
     2fc:	af 85       	ldd	r26, Y+15	; 0x0f
     2fe:	b8 89       	ldd	r27, Y+16	; 0x10
     300:	28 17       	cp	r18, r24
     302:	39 07       	cpc	r19, r25
     304:	4a 07       	cpc	r20, r26
     306:	5b 07       	cpc	r21, r27
     308:	49 f1       	breq	.+82     	; 0x35c <main+0xee>
		{
			if (counter.capture_timer_fall>0)
     30a:	80 91 3f 40 	lds	r24, 0x403F	; 0x80403f <__data_end+0x3>
     30e:	90 91 40 40 	lds	r25, 0x4040	; 0x804040 <__data_end+0x4>
     312:	21 e0       	ldi	r18, 0x01	; 1
     314:	89 2b       	or	r24, r25
     316:	09 f4       	brne	.+2      	; 0x31a <main+0xac>
     318:	20 e0       	ldi	r18, 0x00	; 0
     31a:	22 23       	and	r18, r18
     31c:	f9 f0       	breq	.+62     	; 0x35c <main+0xee>
			{
				last_frequency_c=current_frequency_c;
     31e:	8d 85       	ldd	r24, Y+13	; 0x0d
     320:	9e 85       	ldd	r25, Y+14	; 0x0e
     322:	af 85       	ldd	r26, Y+15	; 0x0f
     324:	b8 89       	ldd	r27, Y+16	; 0x10
     326:	8d 83       	std	Y+5, r24	; 0x05
     328:	9e 83       	std	Y+6, r25	; 0x06
     32a:	af 83       	std	Y+7, r26	; 0x07
     32c:	b8 87       	std	Y+8, r27	; 0x08
				
				printf("Counter C : %lu \n\r", current_frequency_c);
     32e:	88 89       	ldd	r24, Y+16	; 0x10
     330:	8f 93       	push	r24
     332:	8f 85       	ldd	r24, Y+15	; 0x0f
     334:	8f 93       	push	r24
     336:	8e 85       	ldd	r24, Y+14	; 0x0e
     338:	8f 93       	push	r24
     33a:	8d 85       	ldd	r24, Y+13	; 0x0d
     33c:	8f 93       	push	r24
     33e:	86 e1       	ldi	r24, 0x16	; 22
     340:	90 e4       	ldi	r25, 0x40	; 64
     342:	89 2f       	mov	r24, r25
     344:	8f 93       	push	r24
     346:	86 e1       	ldi	r24, 0x16	; 22
     348:	90 e4       	ldi	r25, 0x40	; 64
     34a:	8f 93       	push	r24
     34c:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <printf>
     350:	0f 90       	pop	r0
     352:	0f 90       	pop	r0
     354:	0f 90       	pop	r0
     356:	0f 90       	pop	r0
     358:	0f 90       	pop	r0
     35a:	0f 90       	pop	r0
		} 
		else
		{
			
		}
		current_frequency_b=(uint32_t)(24000000/(counter.capture_timer_rise));
     35c:	80 91 41 40 	lds	r24, 0x4041	; 0x804041 <__data_end+0x5>
     360:	90 91 42 40 	lds	r25, 0x4042	; 0x804042 <__data_end+0x6>
     364:	9c 01       	movw	r18, r24
     366:	40 e0       	ldi	r20, 0x00	; 0
     368:	50 e0       	ldi	r21, 0x00	; 0
     36a:	80 e0       	ldi	r24, 0x00	; 0
     36c:	96 e3       	ldi	r25, 0x36	; 54
     36e:	ae e6       	ldi	r26, 0x6E	; 110
     370:	b1 e0       	ldi	r27, 0x01	; 1
     372:	bc 01       	movw	r22, r24
     374:	cd 01       	movw	r24, r26
     376:	0e 94 89 07 	call	0xf12	; 0xf12 <__divmodsi4>
     37a:	da 01       	movw	r26, r20
     37c:	c9 01       	movw	r24, r18
     37e:	89 87       	std	Y+9, r24	; 0x09
     380:	9a 87       	std	Y+10, r25	; 0x0a
     382:	ab 87       	std	Y+11, r26	; 0x0b
     384:	bc 87       	std	Y+12, r27	; 0x0c
		if (last_frequency_b!=current_frequency_b)
     386:	29 81       	ldd	r18, Y+1	; 0x01
     388:	3a 81       	ldd	r19, Y+2	; 0x02
     38a:	4b 81       	ldd	r20, Y+3	; 0x03
     38c:	5c 81       	ldd	r21, Y+4	; 0x04
     38e:	89 85       	ldd	r24, Y+9	; 0x09
     390:	9a 85       	ldd	r25, Y+10	; 0x0a
     392:	ab 85       	ldd	r26, Y+11	; 0x0b
     394:	bc 85       	ldd	r27, Y+12	; 0x0c
     396:	28 17       	cp	r18, r24
     398:	39 07       	cpc	r19, r25
     39a:	4a 07       	cpc	r20, r26
     39c:	5b 07       	cpc	r21, r27
     39e:	49 f1       	breq	.+82     	; 0x3f2 <main+0x184>
		{
			if (counter.capture_timer_rise>0)
     3a0:	80 91 41 40 	lds	r24, 0x4041	; 0x804041 <__data_end+0x5>
     3a4:	90 91 42 40 	lds	r25, 0x4042	; 0x804042 <__data_end+0x6>
     3a8:	21 e0       	ldi	r18, 0x01	; 1
     3aa:	89 2b       	or	r24, r25
     3ac:	09 f4       	brne	.+2      	; 0x3b0 <main+0x142>
     3ae:	20 e0       	ldi	r18, 0x00	; 0
     3b0:	22 23       	and	r18, r18
     3b2:	f9 f0       	breq	.+62     	; 0x3f2 <main+0x184>
			{
				last_frequency_b=current_frequency_b;
     3b4:	89 85       	ldd	r24, Y+9	; 0x09
     3b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     3b8:	ab 85       	ldd	r26, Y+11	; 0x0b
     3ba:	bc 85       	ldd	r27, Y+12	; 0x0c
     3bc:	89 83       	std	Y+1, r24	; 0x01
     3be:	9a 83       	std	Y+2, r25	; 0x02
     3c0:	ab 83       	std	Y+3, r26	; 0x03
     3c2:	bc 83       	std	Y+4, r27	; 0x04
				
				printf("Counter B : %lu \n\r", current_frequency_b);
     3c4:	8c 85       	ldd	r24, Y+12	; 0x0c
     3c6:	8f 93       	push	r24
     3c8:	8b 85       	ldd	r24, Y+11	; 0x0b
     3ca:	8f 93       	push	r24
     3cc:	8a 85       	ldd	r24, Y+10	; 0x0a
     3ce:	8f 93       	push	r24
     3d0:	89 85       	ldd	r24, Y+9	; 0x09
     3d2:	8f 93       	push	r24
     3d4:	89 e2       	ldi	r24, 0x29	; 41
     3d6:	90 e4       	ldi	r25, 0x40	; 64
     3d8:	89 2f       	mov	r24, r25
     3da:	8f 93       	push	r24
     3dc:	89 e2       	ldi	r24, 0x29	; 41
     3de:	90 e4       	ldi	r25, 0x40	; 64
     3e0:	8f 93       	push	r24
     3e2:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <printf>
     3e6:	0f 90       	pop	r0
     3e8:	0f 90       	pop	r0
     3ea:	0f 90       	pop	r0
     3ec:	0f 90       	pop	r0
     3ee:	0f 90       	pop	r0
     3f0:	0f 90       	pop	r0
     3f2:	80 e0       	ldi	r24, 0x00	; 0
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	a8 ec       	ldi	r26, 0xC8	; 200
     3f8:	b2 e4       	ldi	r27, 0x42	; 66
     3fa:	89 8b       	std	Y+17, r24	; 0x11
     3fc:	9a 8b       	std	Y+18, r25	; 0x12
     3fe:	ab 8b       	std	Y+19, r26	; 0x13
     400:	bc 8b       	std	Y+20, r27	; 0x14

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     402:	20 e0       	ldi	r18, 0x00	; 0
     404:	30 e8       	ldi	r19, 0x80	; 128
     406:	4b eb       	ldi	r20, 0xBB	; 187
     408:	55 e4       	ldi	r21, 0x45	; 69
     40a:	69 89       	ldd	r22, Y+17	; 0x11
     40c:	7a 89       	ldd	r23, Y+18	; 0x12
     40e:	8b 89       	ldd	r24, Y+19	; 0x13
     410:	9c 89       	ldd	r25, Y+20	; 0x14
     412:	0e 94 10 05 	call	0xa20	; 0xa20 <__mulsf3>
     416:	dc 01       	movw	r26, r24
     418:	cb 01       	movw	r24, r22
     41a:	8d 8b       	std	Y+21, r24	; 0x15
     41c:	9e 8b       	std	Y+22, r25	; 0x16
     41e:	af 8b       	std	Y+23, r26	; 0x17
     420:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     422:	20 e0       	ldi	r18, 0x00	; 0
     424:	30 e0       	ldi	r19, 0x00	; 0
     426:	40 e8       	ldi	r20, 0x80	; 128
     428:	5f e3       	ldi	r21, 0x3F	; 63
     42a:	6d 89       	ldd	r22, Y+21	; 0x15
     42c:	7e 89       	ldd	r23, Y+22	; 0x16
     42e:	8f 89       	ldd	r24, Y+23	; 0x17
     430:	98 8d       	ldd	r25, Y+24	; 0x18
     432:	0e 94 8a 04 	call	0x914	; 0x914 <__cmpsf2>
     436:	88 23       	and	r24, r24
     438:	2c f4       	brge	.+10     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
		__ticks = 1;
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	89 8f       	std	Y+25, r24	; 0x19
     440:	9a 8f       	std	Y+26, r25	; 0x1a
     442:	3f c0       	rjmp	.+126    	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
	else if (__tmp > 65535)
     444:	20 e0       	ldi	r18, 0x00	; 0
     446:	3f ef       	ldi	r19, 0xFF	; 255
     448:	4f e7       	ldi	r20, 0x7F	; 127
     44a:	57 e4       	ldi	r21, 0x47	; 71
     44c:	6d 89       	ldd	r22, Y+21	; 0x15
     44e:	7e 89       	ldd	r23, Y+22	; 0x16
     450:	8f 89       	ldd	r24, Y+23	; 0x17
     452:	98 8d       	ldd	r25, Y+24	; 0x18
     454:	0e 94 0b 05 	call	0xa16	; 0xa16 <__gesf2>
     458:	18 16       	cp	r1, r24
     45a:	4c f5       	brge	.+82     	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     45c:	20 e0       	ldi	r18, 0x00	; 0
     45e:	30 e0       	ldi	r19, 0x00	; 0
     460:	40 e2       	ldi	r20, 0x20	; 32
     462:	51 e4       	ldi	r21, 0x41	; 65
     464:	69 89       	ldd	r22, Y+17	; 0x11
     466:	7a 89       	ldd	r23, Y+18	; 0x12
     468:	8b 89       	ldd	r24, Y+19	; 0x13
     46a:	9c 89       	ldd	r25, Y+20	; 0x14
     46c:	0e 94 10 05 	call	0xa20	; 0xa20 <__mulsf3>
     470:	dc 01       	movw	r26, r24
     472:	cb 01       	movw	r24, r22
     474:	bc 01       	movw	r22, r24
     476:	cd 01       	movw	r24, r26
     478:	0e 94 8f 04 	call	0x91e	; 0x91e <__fixunssfsi>
     47c:	dc 01       	movw	r26, r24
     47e:	cb 01       	movw	r24, r22
     480:	89 8f       	std	Y+25, r24	; 0x19
     482:	9a 8f       	std	Y+26, r25	; 0x1a
		while(__ticks)
     484:	89 8d       	ldd	r24, Y+25	; 0x19
     486:	9a 8d       	ldd	r25, Y+26	; 0x1a
     488:	89 2b       	or	r24, r25
     48a:	09 f4       	brne	.+2      	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
     48c:	1c cf       	rjmp	.-456    	; 0x2c6 <main+0x58>
     48e:	88 e5       	ldi	r24, 0x58	; 88
     490:	92 e0       	ldi	r25, 0x02	; 2
     492:	8b 8f       	std	Y+27, r24	; 0x1b
     494:	9c 8f       	std	Y+28, r25	; 0x1c
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     496:	8b 8d       	ldd	r24, Y+27	; 0x1b
     498:	9c 8d       	ldd	r25, Y+28	; 0x1c
     49a:	01 97       	sbiw	r24, 0x01	; 1
     49c:	f1 f7       	brne	.-4      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
     49e:	8b 8f       	std	Y+27, r24	; 0x1b
     4a0:	9c 8f       	std	Y+28, r25	; 0x1c
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4a2:	89 8d       	ldd	r24, Y+25	; 0x19
     4a4:	9a 8d       	ldd	r25, Y+26	; 0x1a
     4a6:	01 97       	sbiw	r24, 0x01	; 1
     4a8:	89 8f       	std	Y+25, r24	; 0x19
     4aa:	9a 8f       	std	Y+26, r25	; 0x1a
     4ac:	eb cf       	rjmp	.-42     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     4ae:	6d 89       	ldd	r22, Y+21	; 0x15
     4b0:	7e 89       	ldd	r23, Y+22	; 0x16
     4b2:	8f 89       	ldd	r24, Y+23	; 0x17
     4b4:	98 8d       	ldd	r25, Y+24	; 0x18
     4b6:	0e 94 8f 04 	call	0x91e	; 0x91e <__fixunssfsi>
     4ba:	dc 01       	movw	r26, r24
     4bc:	cb 01       	movw	r24, r22
     4be:	89 8f       	std	Y+25, r24	; 0x19
     4c0:	9a 8f       	std	Y+26, r25	; 0x1a
     4c2:	89 8d       	ldd	r24, Y+25	; 0x19
     4c4:	9a 8d       	ldd	r25, Y+26	; 0x1a
     4c6:	8d 8f       	std	Y+29, r24	; 0x1d
     4c8:	9e 8f       	std	Y+30, r25	; 0x1e
     4ca:	8d 8d       	ldd	r24, Y+29	; 0x1d
     4cc:	9e 8d       	ldd	r25, Y+30	; 0x1e
     4ce:	01 97       	sbiw	r24, 0x01	; 1
     4d0:	f1 f7       	brne	.-4      	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
     4d2:	8d 8f       	std	Y+29, r24	; 0x1d
     4d4:	9e 8f       	std	Y+30, r25	; 0x1e
	ENABLE_INTERRUPTS();
	counter.Init();
	asm("nop");
	printf("hello\n\r");
	/* Replace with your application code */
	while (1) {
     4d6:	f7 ce       	rjmp	.-530    	; 0x2c6 <main+0x58>

000004d8 <_Z41__static_initialization_and_destruction_0ii>:
		}
		
		_delay_ms(100);
			
	}
}
     4d8:	cf 93       	push	r28
     4da:	df 93       	push	r29
     4dc:	00 d0       	rcall	.+0      	; 0x4de <_Z41__static_initialization_and_destruction_0ii+0x6>
     4de:	00 d0       	rcall	.+0      	; 0x4e0 <_Z41__static_initialization_and_destruction_0ii+0x8>
     4e0:	cd b7       	in	r28, 0x3d	; 61
     4e2:	de b7       	in	r29, 0x3e	; 62
     4e4:	89 83       	std	Y+1, r24	; 0x01
     4e6:	9a 83       	std	Y+2, r25	; 0x02
     4e8:	6b 83       	std	Y+3, r22	; 0x03
     4ea:	7c 83       	std	Y+4, r23	; 0x04
     4ec:	89 81       	ldd	r24, Y+1	; 0x01
     4ee:	9a 81       	ldd	r25, Y+2	; 0x02
     4f0:	01 97       	sbiw	r24, 0x01	; 1
     4f2:	41 f4       	brne	.+16     	; 0x504 <_Z41__static_initialization_and_destruction_0ii+0x2c>
     4f4:	8b 81       	ldd	r24, Y+3	; 0x03
     4f6:	9c 81       	ldd	r25, Y+4	; 0x04
     4f8:	01 96       	adiw	r24, 0x01	; 1
     4fa:	21 f4       	brne	.+8      	; 0x504 <_Z41__static_initialization_and_destruction_0ii+0x2c>

#include <usart_basic.h>

#include "Zero_Cross_Counter.h"

static Zero_Cross_Counter counter;
     4fc:	8c e3       	ldi	r24, 0x3C	; 60
     4fe:	90 e4       	ldi	r25, 0x40	; 64
     500:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <_ZN18Zero_Cross_CounterC1Ev>
     504:	89 81       	ldd	r24, Y+1	; 0x01
     506:	9a 81       	ldd	r25, Y+2	; 0x02
     508:	89 2b       	or	r24, r25
     50a:	41 f4       	brne	.+16     	; 0x51c <_Z41__static_initialization_and_destruction_0ii+0x44>
     50c:	8b 81       	ldd	r24, Y+3	; 0x03
     50e:	9c 81       	ldd	r25, Y+4	; 0x04
     510:	01 96       	adiw	r24, 0x01	; 1
     512:	21 f4       	brne	.+8      	; 0x51c <_Z41__static_initialization_and_destruction_0ii+0x44>
     514:	8c e3       	ldi	r24, 0x3C	; 60
     516:	90 e4       	ldi	r25, 0x40	; 64
     518:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <_ZN18Zero_Cross_CounterD1Ev>
		}
		
		_delay_ms(100);
			
	}
}
     51c:	00 00       	nop
     51e:	24 96       	adiw	r28, 0x04	; 4
     520:	cd bf       	out	0x3d, r28	; 61
     522:	de bf       	out	0x3e, r29	; 62
     524:	df 91       	pop	r29
     526:	cf 91       	pop	r28
     528:	08 95       	ret

0000052a <_GLOBAL__sub_I__Z10RTC_enablev>:
     52a:	cf 93       	push	r28
     52c:	df 93       	push	r29
     52e:	cd b7       	in	r28, 0x3d	; 61
     530:	de b7       	in	r29, 0x3e	; 62
     532:	6f ef       	ldi	r22, 0xFF	; 255
     534:	7f ef       	ldi	r23, 0xFF	; 255
     536:	81 e0       	ldi	r24, 0x01	; 1
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_Z41__static_initialization_and_destruction_0ii>
     53e:	df 91       	pop	r29
     540:	cf 91       	pop	r28
     542:	08 95       	ret

00000544 <_GLOBAL__sub_D__Z10RTC_enablev>:
     544:	cf 93       	push	r28
     546:	df 93       	push	r29
     548:	cd b7       	in	r28, 0x3d	; 61
     54a:	de b7       	in	r29, 0x3e	; 62
     54c:	6f ef       	ldi	r22, 0xFF	; 255
     54e:	7f ef       	ldi	r23, 0xFF	; 255
     550:	80 e0       	ldi	r24, 0x00	; 0
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_Z41__static_initialization_and_destruction_0ii>
     558:	df 91       	pop	r29
     55a:	cf 91       	pop	r28
     55c:	08 95       	ret

0000055e <__vector_28>:
static uint16_t capture_value_falling;
static uint16_t capture_value_tc_a;
static uint16_t capture_value_tc_b;

ISR(ZCD0_ZCD_vect)
{
     55e:	1f 92       	push	r1
     560:	0f 92       	push	r0
     562:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     566:	0f 92       	push	r0
     568:	11 24       	eor	r1, r1
     56a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     56e:	0f 92       	push	r0
     570:	2f 93       	push	r18
     572:	8f 93       	push	r24
     574:	9f 93       	push	r25
     576:	ef 93       	push	r30
     578:	ff 93       	push	r31
     57a:	cf 93       	push	r28
     57c:	df 93       	push	r29
     57e:	cd b7       	in	r28, 0x3d	; 61
     580:	de b7       	in	r29, 0x3e	; 62
	/* Insert your ZCD interrupt handling code here */
	ptr_zero_cross_handler->leading_edge=true;
     582:	80 91 48 40 	lds	r24, 0x4048	; 0x804048 <ptr_zero_cross_handler>
     586:	90 91 49 40 	lds	r25, 0x4049	; 0x804049 <ptr_zero_cross_handler+0x1>
     58a:	21 e0       	ldi	r18, 0x01	; 1
     58c:	fc 01       	movw	r30, r24
     58e:	20 83       	st	Z, r18
	ptr_zero_cross_handler->falling_edge=false;
     590:	80 91 48 40 	lds	r24, 0x4048	; 0x804048 <ptr_zero_cross_handler>
     594:	90 91 49 40 	lds	r25, 0x4049	; 0x804049 <ptr_zero_cross_handler+0x1>
     598:	fc 01       	movw	r30, r24
     59a:	12 82       	std	Z+2, r1	; 0x02
	//ptr_zero_cross_handler->CaptureCounterC();

	ZCD0.STATUS = ZCD_CROSSIF_bm;
     59c:	80 ec       	ldi	r24, 0xC0	; 192
     59e:	96 e0       	ldi	r25, 0x06	; 6
     5a0:	21 e0       	ldi	r18, 0x01	; 1
     5a2:	fc 01       	movw	r30, r24
     5a4:	23 83       	std	Z+3, r18	; 0x03
}
     5a6:	00 00       	nop
     5a8:	df 91       	pop	r29
     5aa:	cf 91       	pop	r28
     5ac:	ff 91       	pop	r31
     5ae:	ef 91       	pop	r30
     5b0:	9f 91       	pop	r25
     5b2:	8f 91       	pop	r24
     5b4:	2f 91       	pop	r18
     5b6:	0f 90       	pop	r0
     5b8:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     5bc:	0f 90       	pop	r0
     5be:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     5c2:	0f 90       	pop	r0
     5c4:	1f 90       	pop	r1
     5c6:	18 95       	reti

000005c8 <__vector_52>:

ISR(ZCD1_ZCD_vect)
{
     5c8:	1f 92       	push	r1
     5ca:	0f 92       	push	r0
     5cc:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     5d0:	0f 92       	push	r0
     5d2:	11 24       	eor	r1, r1
     5d4:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     5d8:	0f 92       	push	r0
     5da:	2f 93       	push	r18
     5dc:	8f 93       	push	r24
     5de:	9f 93       	push	r25
     5e0:	ef 93       	push	r30
     5e2:	ff 93       	push	r31
     5e4:	cf 93       	push	r28
     5e6:	df 93       	push	r29
     5e8:	cd b7       	in	r28, 0x3d	; 61
     5ea:	de b7       	in	r29, 0x3e	; 62
	/* Insert your ZCD interrupt handling code here */
	ptr_zero_cross_handler->falling_edge=true;
     5ec:	80 91 48 40 	lds	r24, 0x4048	; 0x804048 <ptr_zero_cross_handler>
     5f0:	90 91 49 40 	lds	r25, 0x4049	; 0x804049 <ptr_zero_cross_handler+0x1>
     5f4:	21 e0       	ldi	r18, 0x01	; 1
     5f6:	fc 01       	movw	r30, r24
     5f8:	22 83       	std	Z+2, r18	; 0x02
	ptr_zero_cross_handler->leading_edge=false;
     5fa:	80 91 48 40 	lds	r24, 0x4048	; 0x804048 <ptr_zero_cross_handler>
     5fe:	90 91 49 40 	lds	r25, 0x4049	; 0x804049 <ptr_zero_cross_handler+0x1>
     602:	fc 01       	movw	r30, r24
     604:	10 82       	st	Z, r1
	ZCD1.STATUS = ZCD_CROSSIF_bm;
     606:	88 ec       	ldi	r24, 0xC8	; 200
     608:	96 e0       	ldi	r25, 0x06	; 6
     60a:	21 e0       	ldi	r18, 0x01	; 1
     60c:	fc 01       	movw	r30, r24
     60e:	23 83       	std	Z+3, r18	; 0x03
}
     610:	00 00       	nop
     612:	df 91       	pop	r29
     614:	cf 91       	pop	r28
     616:	ff 91       	pop	r31
     618:	ef 91       	pop	r30
     61a:	9f 91       	pop	r25
     61c:	8f 91       	pop	r24
     61e:	2f 91       	pop	r18
     620:	0f 90       	pop	r0
     622:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     626:	0f 90       	pop	r0
     628:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     62c:	0f 90       	pop	r0
     62e:	1f 90       	pop	r1
     630:	18 95       	reti

00000632 <__vector_14>:
ISR(TCB0_INT_vect)
{
     632:	1f 92       	push	r1
     634:	0f 92       	push	r0
     636:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     63a:	0f 92       	push	r0
     63c:	11 24       	eor	r1, r1
     63e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     642:	0f 92       	push	r0
     644:	2f 93       	push	r18
     646:	3f 93       	push	r19
     648:	4f 93       	push	r20
     64a:	5f 93       	push	r21
     64c:	6f 93       	push	r22
     64e:	7f 93       	push	r23
     650:	8f 93       	push	r24
     652:	9f 93       	push	r25
     654:	af 93       	push	r26
     656:	bf 93       	push	r27
     658:	ef 93       	push	r30
     65a:	ff 93       	push	r31
     65c:	cf 93       	push	r28
     65e:	df 93       	push	r29
     660:	cd b7       	in	r28, 0x3d	; 61
     662:	de b7       	in	r29, 0x3e	; 62
	capture_value_rising= TCB0.CNT;
     664:	80 e0       	ldi	r24, 0x00	; 0
     666:	9b e0       	ldi	r25, 0x0B	; 11
     668:	fc 01       	movw	r30, r24
     66a:	82 85       	ldd	r24, Z+10	; 0x0a
     66c:	93 85       	ldd	r25, Z+11	; 0x0b
     66e:	80 93 4a 40 	sts	0x404A, r24	; 0x80404a <_ZL20capture_value_rising>
     672:	90 93 4b 40 	sts	0x404B, r25	; 0x80404b <_ZL20capture_value_rising+0x1>
// 	if (ptr_zero_cross_handler->leading_edge==true)
// 	{
// 		ptr_zero_cross_handler->CaptureCounterB_Rising();
	ptr_zero_cross_handler->CaptureCounterB_Rising();
     676:	80 91 48 40 	lds	r24, 0x4048	; 0x804048 <ptr_zero_cross_handler>
     67a:	90 91 49 40 	lds	r25, 0x4049	; 0x804049 <ptr_zero_cross_handler+0x1>
     67e:	0e 94 5e 04 	call	0x8bc	; 0x8bc <_ZN18Zero_Cross_Counter22CaptureCounterB_RisingEv>

	TCB0.INTFLAGS = TCB_CAPT_bm;
     682:	80 e0       	ldi	r24, 0x00	; 0
     684:	9b e0       	ldi	r25, 0x0B	; 11
     686:	21 e0       	ldi	r18, 0x01	; 1
     688:	fc 01       	movw	r30, r24
     68a:	26 83       	std	Z+6, r18	; 0x06
}
     68c:	00 00       	nop
     68e:	df 91       	pop	r29
     690:	cf 91       	pop	r28
     692:	ff 91       	pop	r31
     694:	ef 91       	pop	r30
     696:	bf 91       	pop	r27
     698:	af 91       	pop	r26
     69a:	9f 91       	pop	r25
     69c:	8f 91       	pop	r24
     69e:	7f 91       	pop	r23
     6a0:	6f 91       	pop	r22
     6a2:	5f 91       	pop	r21
     6a4:	4f 91       	pop	r20
     6a6:	3f 91       	pop	r19
     6a8:	2f 91       	pop	r18
     6aa:	0f 90       	pop	r0
     6ac:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     6b0:	0f 90       	pop	r0
     6b2:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     6b6:	0f 90       	pop	r0
     6b8:	1f 90       	pop	r1
     6ba:	18 95       	reti

000006bc <__vector_15>:
ISR(TCB1_INT_vect)
{
     6bc:	1f 92       	push	r1
     6be:	0f 92       	push	r0
     6c0:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     6c4:	0f 92       	push	r0
     6c6:	11 24       	eor	r1, r1
     6c8:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     6cc:	0f 92       	push	r0
     6ce:	2f 93       	push	r18
     6d0:	3f 93       	push	r19
     6d2:	4f 93       	push	r20
     6d4:	5f 93       	push	r21
     6d6:	6f 93       	push	r22
     6d8:	7f 93       	push	r23
     6da:	8f 93       	push	r24
     6dc:	9f 93       	push	r25
     6de:	af 93       	push	r26
     6e0:	bf 93       	push	r27
     6e2:	ef 93       	push	r30
     6e4:	ff 93       	push	r31
     6e6:	cf 93       	push	r28
     6e8:	df 93       	push	r29
     6ea:	cd b7       	in	r28, 0x3d	; 61
     6ec:	de b7       	in	r29, 0x3e	; 62
		capture_value_falling= TCB1.CNT;
     6ee:	80 e1       	ldi	r24, 0x10	; 16
     6f0:	9b e0       	ldi	r25, 0x0B	; 11
     6f2:	fc 01       	movw	r30, r24
     6f4:	82 85       	ldd	r24, Z+10	; 0x0a
     6f6:	93 85       	ldd	r25, Z+11	; 0x0b
     6f8:	80 93 4c 40 	sts	0x404C, r24	; 0x80404c <_ZL21capture_value_falling>
     6fc:	90 93 4d 40 	sts	0x404D, r25	; 0x80404d <_ZL21capture_value_falling+0x1>
// 		if (ptr_zero_cross_handler->falling_edge==true)
// 		{
// 			ptr_zero_cross_handler->CaptureCounterB_Falling();
// 			
	ptr_zero_cross_handler->CaptureCounterB_Falling();
     700:	80 91 48 40 	lds	r24, 0x4048	; 0x804048 <ptr_zero_cross_handler>
     704:	90 91 49 40 	lds	r25, 0x4049	; 0x804049 <ptr_zero_cross_handler+0x1>
     708:	0e 94 74 04 	call	0x8e8	; 0x8e8 <_ZN18Zero_Cross_Counter23CaptureCounterB_FallingEv>
	TCB1.INTFLAGS = TCB_CAPT_bm;
     70c:	80 e1       	ldi	r24, 0x10	; 16
     70e:	9b e0       	ldi	r25, 0x0B	; 11
     710:	21 e0       	ldi	r18, 0x01	; 1
     712:	fc 01       	movw	r30, r24
     714:	26 83       	std	Z+6, r18	; 0x06
}
     716:	00 00       	nop
     718:	df 91       	pop	r29
     71a:	cf 91       	pop	r28
     71c:	ff 91       	pop	r31
     71e:	ef 91       	pop	r30
     720:	bf 91       	pop	r27
     722:	af 91       	pop	r26
     724:	9f 91       	pop	r25
     726:	8f 91       	pop	r24
     728:	7f 91       	pop	r23
     72a:	6f 91       	pop	r22
     72c:	5f 91       	pop	r21
     72e:	4f 91       	pop	r20
     730:	3f 91       	pop	r19
     732:	2f 91       	pop	r18
     734:	0f 90       	pop	r0
     736:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     73a:	0f 90       	pop	r0
     73c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     740:	0f 90       	pop	r0
     742:	1f 90       	pop	r1
     744:	18 95       	reti

00000746 <__vector_17>:

ISR(TCD0_TRIG_vect)
{
     746:	1f 92       	push	r1
     748:	0f 92       	push	r0
     74a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     74e:	0f 92       	push	r0
     750:	11 24       	eor	r1, r1
     752:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     756:	0f 92       	push	r0
     758:	2f 93       	push	r18
     75a:	3f 93       	push	r19
     75c:	4f 93       	push	r20
     75e:	5f 93       	push	r21
     760:	6f 93       	push	r22
     762:	7f 93       	push	r23
     764:	8f 93       	push	r24
     766:	9f 93       	push	r25
     768:	af 93       	push	r26
     76a:	bf 93       	push	r27
     76c:	ef 93       	push	r30
     76e:	ff 93       	push	r31
     770:	cf 93       	push	r28
     772:	df 93       	push	r29
     774:	cd b7       	in	r28, 0x3d	; 61
     776:	de b7       	in	r29, 0x3e	; 62
		//capture_value_b= TCD0_CAPTUREA;
		capture_value_tc_a= TCD0_CAPTUREA;
     778:	82 ea       	ldi	r24, 0xA2	; 162
     77a:	9b e0       	ldi	r25, 0x0B	; 11
     77c:	fc 01       	movw	r30, r24
     77e:	80 81       	ld	r24, Z
     780:	91 81       	ldd	r25, Z+1	; 0x01
     782:	80 93 4e 40 	sts	0x404E, r24	; 0x80404e <_ZL18capture_value_tc_a>
     786:	90 93 4f 40 	sts	0x404F, r25	; 0x80404f <_ZL18capture_value_tc_a+0x1>
		//capture_value_tc_b= TCD0_CAPTUREB;
		ptr_zero_cross_handler->CaptureCounterC();
     78a:	80 91 48 40 	lds	r24, 0x4048	; 0x804048 <ptr_zero_cross_handler>
     78e:	90 91 49 40 	lds	r25, 0x4049	; 0x804049 <ptr_zero_cross_handler+0x1>
     792:	0e 94 08 04 	call	0x810	; 0x810 <_ZN18Zero_Cross_Counter15CaptureCounterCEv>
	/* Insert your TCD TRIGB interrupt handling code here */
	
	

	/* TRIGA and TRIGB interrupt flags have to be cleared manually */
	TCD0.INTFLAGS = TCD_TRIGA_bm | TCD_TRIGB_bm;
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	9b e0       	ldi	r25, 0x0B	; 11
     79a:	2c e0       	ldi	r18, 0x0C	; 12
     79c:	fc 01       	movw	r30, r24
     79e:	25 87       	std	Z+13, r18	; 0x0d
}
     7a0:	00 00       	nop
     7a2:	df 91       	pop	r29
     7a4:	cf 91       	pop	r28
     7a6:	ff 91       	pop	r31
     7a8:	ef 91       	pop	r30
     7aa:	bf 91       	pop	r27
     7ac:	af 91       	pop	r26
     7ae:	9f 91       	pop	r25
     7b0:	8f 91       	pop	r24
     7b2:	7f 91       	pop	r23
     7b4:	6f 91       	pop	r22
     7b6:	5f 91       	pop	r21
     7b8:	4f 91       	pop	r20
     7ba:	3f 91       	pop	r19
     7bc:	2f 91       	pop	r18
     7be:	0f 90       	pop	r0
     7c0:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     7c4:	0f 90       	pop	r0
     7c6:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     7ca:	0f 90       	pop	r0
     7cc:	1f 90       	pop	r1
     7ce:	18 95       	reti

000007d0 <_ZN18Zero_Cross_CounterC1Ev>:
// default constructor
Zero_Cross_Counter::Zero_Cross_Counter()
     7d0:	cf 93       	push	r28
     7d2:	df 93       	push	r29
     7d4:	00 d0       	rcall	.+0      	; 0x7d6 <_ZN18Zero_Cross_CounterC1Ev+0x6>
     7d6:	cd b7       	in	r28, 0x3d	; 61
     7d8:	de b7       	in	r29, 0x3e	; 62
     7da:	89 83       	std	Y+1, r24	; 0x01
     7dc:	9a 83       	std	Y+2, r25	; 0x02
{
	ptr_zero_cross_handler=this;
     7de:	89 81       	ldd	r24, Y+1	; 0x01
     7e0:	9a 81       	ldd	r25, Y+2	; 0x02
     7e2:	80 93 48 40 	sts	0x4048, r24	; 0x804048 <ptr_zero_cross_handler>
     7e6:	90 93 49 40 	sts	0x4049, r25	; 0x804049 <ptr_zero_cross_handler+0x1>
} //Zero_Cross_Counter
     7ea:	00 00       	nop
     7ec:	0f 90       	pop	r0
     7ee:	0f 90       	pop	r0
     7f0:	df 91       	pop	r29
     7f2:	cf 91       	pop	r28
     7f4:	08 95       	ret

000007f6 <_ZN18Zero_Cross_CounterD1Ev>:

// default destructor
Zero_Cross_Counter::~Zero_Cross_Counter()
     7f6:	cf 93       	push	r28
     7f8:	df 93       	push	r29
     7fa:	00 d0       	rcall	.+0      	; 0x7fc <_ZN18Zero_Cross_CounterD1Ev+0x6>
     7fc:	cd b7       	in	r28, 0x3d	; 61
     7fe:	de b7       	in	r29, 0x3e	; 62
     800:	89 83       	std	Y+1, r24	; 0x01
     802:	9a 83       	std	Y+2, r25	; 0x02
{
} //~Zero_Cross_Counter
     804:	00 00       	nop
     806:	0f 90       	pop	r0
     808:	0f 90       	pop	r0
     80a:	df 91       	pop	r29
     80c:	cf 91       	pop	r28
     80e:	08 95       	ret

00000810 <_ZN18Zero_Cross_Counter15CaptureCounterCEv>:

void Zero_Cross_Counter::CaptureCounterC(void){
     810:	cf 93       	push	r28
     812:	df 93       	push	r29
     814:	00 d0       	rcall	.+0      	; 0x816 <_ZN18Zero_Cross_Counter15CaptureCounterCEv+0x6>
     816:	cd b7       	in	r28, 0x3d	; 61
     818:	de b7       	in	r29, 0x3e	; 62
     81a:	89 83       	std	Y+1, r24	; 0x01
     81c:	9a 83       	std	Y+2, r25	; 0x02
	if (toogle_bit)
     81e:	89 81       	ldd	r24, Y+1	; 0x01
     820:	9a 81       	ldd	r25, Y+2	; 0x02
     822:	fc 01       	movw	r30, r24
     824:	83 85       	ldd	r24, Z+11	; 0x0b
     826:	88 23       	and	r24, r24
     828:	99 f0       	breq	.+38     	; 0x850 <_ZN18Zero_Cross_Counter15CaptureCounterCEv+0x40>
	{
	//	TCD0.CTRLE=TCD_SCAPTUREA_bm;
	//	while ((TCD0.STATUS & TCD_ENRDY_bm) == 0)
	//	; // Wait for Enable Ready to be high.
		capture_timer_tc_a=TCD0.CAPTUREA;
     82a:	80 e8       	ldi	r24, 0x80	; 128
     82c:	9b e0       	ldi	r25, 0x0B	; 11
     82e:	fc 01       	movw	r30, r24
     830:	22 a1       	ldd	r18, Z+34	; 0x22
     832:	33 a1       	ldd	r19, Z+35	; 0x23
     834:	89 81       	ldd	r24, Y+1	; 0x01
     836:	9a 81       	ldd	r25, Y+2	; 0x02
     838:	fc 01       	movw	r30, r24
     83a:	27 83       	std	Z+7, r18	; 0x07
     83c:	30 87       	std	Z+8, r19	; 0x08
		if (capture_timer_tc_a>0)
     83e:	89 81       	ldd	r24, Y+1	; 0x01
     840:	9a 81       	ldd	r25, Y+2	; 0x02
     842:	fc 01       	movw	r30, r24
     844:	87 81       	ldd	r24, Z+7	; 0x07
     846:	90 85       	ldd	r25, Z+8	; 0x08
     848:	89 2b       	or	r24, r25
     84a:	f1 f0       	breq	.+60     	; 0x888 <_ZN18Zero_Cross_Counter15CaptureCounterCEv+0x78>
		{
			asm("nop");
     84c:	00 00       	nop
     84e:	1c c0       	rjmp	.+56     	; 0x888 <_ZN18Zero_Cross_Counter15CaptureCounterCEv+0x78>
	else
	{
	//		TCD0.CTRLE=TCD_SCAPTUREB_bm;
	//		while ((TCD0.STATUS & TCD_ENRDY_bm) == 0)
	//		; // Wait for Enable Ready to be high.
		capture_timer_tc_b=TCD0.CAPTUREA;
     850:	80 e8       	ldi	r24, 0x80	; 128
     852:	9b e0       	ldi	r25, 0x0B	; 11
     854:	fc 01       	movw	r30, r24
     856:	22 a1       	ldd	r18, Z+34	; 0x22
     858:	33 a1       	ldd	r19, Z+35	; 0x23
     85a:	89 81       	ldd	r24, Y+1	; 0x01
     85c:	9a 81       	ldd	r25, Y+2	; 0x02
     85e:	fc 01       	movw	r30, r24
     860:	21 87       	std	Z+9, r18	; 0x09
     862:	32 87       	std	Z+10, r19	; 0x0a
				capture_timer_tc_b=TCD0.CAPTUREA;
     864:	80 e8       	ldi	r24, 0x80	; 128
     866:	9b e0       	ldi	r25, 0x0B	; 11
     868:	fc 01       	movw	r30, r24
     86a:	22 a1       	ldd	r18, Z+34	; 0x22
     86c:	33 a1       	ldd	r19, Z+35	; 0x23
     86e:	89 81       	ldd	r24, Y+1	; 0x01
     870:	9a 81       	ldd	r25, Y+2	; 0x02
     872:	fc 01       	movw	r30, r24
     874:	21 87       	std	Z+9, r18	; 0x09
     876:	32 87       	std	Z+10, r19	; 0x0a
				if (capture_timer_tc_b>0)
     878:	89 81       	ldd	r24, Y+1	; 0x01
     87a:	9a 81       	ldd	r25, Y+2	; 0x02
     87c:	fc 01       	movw	r30, r24
     87e:	81 85       	ldd	r24, Z+9	; 0x09
     880:	92 85       	ldd	r25, Z+10	; 0x0a
     882:	89 2b       	or	r24, r25
     884:	09 f0       	breq	.+2      	; 0x888 <_ZN18Zero_Cross_Counter15CaptureCounterCEv+0x78>
				{
					asm("nop");
     886:	00 00       	nop
				}
		
	}
	TCD0.CTRLE=TCD_RESTART_bm;
     888:	80 e8       	ldi	r24, 0x80	; 128
     88a:	9b e0       	ldi	r25, 0x0B	; 11
     88c:	24 e0       	ldi	r18, 0x04	; 4
     88e:	fc 01       	movw	r30, r24
     890:	24 83       	std	Z+4, r18	; 0x04
	toogle_bit=!toogle_bit;
     892:	89 81       	ldd	r24, Y+1	; 0x01
     894:	9a 81       	ldd	r25, Y+2	; 0x02
     896:	fc 01       	movw	r30, r24
     898:	93 85       	ldd	r25, Z+11	; 0x0b
     89a:	81 e0       	ldi	r24, 0x01	; 1
     89c:	29 2f       	mov	r18, r25
     89e:	28 27       	eor	r18, r24
     8a0:	89 81       	ldd	r24, Y+1	; 0x01
     8a2:	9a 81       	ldd	r25, Y+2	; 0x02
     8a4:	fc 01       	movw	r30, r24
     8a6:	23 87       	std	Z+11, r18	; 0x0b
	leading_edge=false;
     8a8:	89 81       	ldd	r24, Y+1	; 0x01
     8aa:	9a 81       	ldd	r25, Y+2	; 0x02
     8ac:	fc 01       	movw	r30, r24
     8ae:	10 82       	st	Z, r1
}
     8b0:	00 00       	nop
     8b2:	0f 90       	pop	r0
     8b4:	0f 90       	pop	r0
     8b6:	df 91       	pop	r29
     8b8:	cf 91       	pop	r28
     8ba:	08 95       	ret

000008bc <_ZN18Zero_Cross_Counter22CaptureCounterB_RisingEv>:
void Zero_Cross_Counter::CaptureCounterB_Rising(void){
     8bc:	cf 93       	push	r28
     8be:	df 93       	push	r29
     8c0:	00 d0       	rcall	.+0      	; 0x8c2 <_ZN18Zero_Cross_Counter22CaptureCounterB_RisingEv+0x6>
     8c2:	cd b7       	in	r28, 0x3d	; 61
     8c4:	de b7       	in	r29, 0x3e	; 62
     8c6:	89 83       	std	Y+1, r24	; 0x01
     8c8:	9a 83       	std	Y+2, r25	; 0x02
	capture_timer_rise= capture_value_rising;
     8ca:	20 91 4a 40 	lds	r18, 0x404A	; 0x80404a <_ZL20capture_value_rising>
     8ce:	30 91 4b 40 	lds	r19, 0x404B	; 0x80404b <_ZL20capture_value_rising+0x1>
     8d2:	89 81       	ldd	r24, Y+1	; 0x01
     8d4:	9a 81       	ldd	r25, Y+2	; 0x02
     8d6:	fc 01       	movw	r30, r24
     8d8:	25 83       	std	Z+5, r18	; 0x05
     8da:	36 83       	std	Z+6, r19	; 0x06
}
     8dc:	00 00       	nop
     8de:	0f 90       	pop	r0
     8e0:	0f 90       	pop	r0
     8e2:	df 91       	pop	r29
     8e4:	cf 91       	pop	r28
     8e6:	08 95       	ret

000008e8 <_ZN18Zero_Cross_Counter23CaptureCounterB_FallingEv>:
void Zero_Cross_Counter::CaptureCounterB_Falling(void){
     8e8:	cf 93       	push	r28
     8ea:	df 93       	push	r29
     8ec:	00 d0       	rcall	.+0      	; 0x8ee <_ZN18Zero_Cross_Counter23CaptureCounterB_FallingEv+0x6>
     8ee:	cd b7       	in	r28, 0x3d	; 61
     8f0:	de b7       	in	r29, 0x3e	; 62
     8f2:	89 83       	std	Y+1, r24	; 0x01
     8f4:	9a 83       	std	Y+2, r25	; 0x02
	capture_timer_fall= capture_value_falling;
     8f6:	20 91 4c 40 	lds	r18, 0x404C	; 0x80404c <_ZL21capture_value_falling>
     8fa:	30 91 4d 40 	lds	r19, 0x404D	; 0x80404d <_ZL21capture_value_falling+0x1>
     8fe:	89 81       	ldd	r24, Y+1	; 0x01
     900:	9a 81       	ldd	r25, Y+2	; 0x02
     902:	fc 01       	movw	r30, r24
     904:	23 83       	std	Z+3, r18	; 0x03
     906:	34 83       	std	Z+4, r19	; 0x04
     908:	00 00       	nop
     90a:	0f 90       	pop	r0
     90c:	0f 90       	pop	r0
     90e:	df 91       	pop	r29
     910:	cf 91       	pop	r28
     912:	08 95       	ret

00000914 <__cmpsf2>:
     914:	0e 94 be 04 	call	0x97c	; 0x97c <__fp_cmp>
     918:	08 f4       	brcc	.+2      	; 0x91c <__cmpsf2+0x8>
     91a:	81 e0       	ldi	r24, 0x01	; 1
     91c:	08 95       	ret

0000091e <__fixunssfsi>:
     91e:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <__fp_splitA>
     922:	88 f0       	brcs	.+34     	; 0x946 <__fixunssfsi+0x28>
     924:	9f 57       	subi	r25, 0x7F	; 127
     926:	98 f0       	brcs	.+38     	; 0x94e <__fixunssfsi+0x30>
     928:	b9 2f       	mov	r27, r25
     92a:	99 27       	eor	r25, r25
     92c:	b7 51       	subi	r27, 0x17	; 23
     92e:	b0 f0       	brcs	.+44     	; 0x95c <__fixunssfsi+0x3e>
     930:	e1 f0       	breq	.+56     	; 0x96a <__fixunssfsi+0x4c>
     932:	66 0f       	add	r22, r22
     934:	77 1f       	adc	r23, r23
     936:	88 1f       	adc	r24, r24
     938:	99 1f       	adc	r25, r25
     93a:	1a f0       	brmi	.+6      	; 0x942 <__fixunssfsi+0x24>
     93c:	ba 95       	dec	r27
     93e:	c9 f7       	brne	.-14     	; 0x932 <__fixunssfsi+0x14>
     940:	14 c0       	rjmp	.+40     	; 0x96a <__fixunssfsi+0x4c>
     942:	b1 30       	cpi	r27, 0x01	; 1
     944:	91 f0       	breq	.+36     	; 0x96a <__fixunssfsi+0x4c>
     946:	0e 94 04 05 	call	0xa08	; 0xa08 <__fp_zero>
     94a:	b1 e0       	ldi	r27, 0x01	; 1
     94c:	08 95       	ret
     94e:	0c 94 04 05 	jmp	0xa08	; 0xa08 <__fp_zero>
     952:	67 2f       	mov	r22, r23
     954:	78 2f       	mov	r23, r24
     956:	88 27       	eor	r24, r24
     958:	b8 5f       	subi	r27, 0xF8	; 248
     95a:	39 f0       	breq	.+14     	; 0x96a <__fixunssfsi+0x4c>
     95c:	b9 3f       	cpi	r27, 0xF9	; 249
     95e:	cc f3       	brlt	.-14     	; 0x952 <__fixunssfsi+0x34>
     960:	86 95       	lsr	r24
     962:	77 95       	ror	r23
     964:	67 95       	ror	r22
     966:	b3 95       	inc	r27
     968:	d9 f7       	brne	.-10     	; 0x960 <__fixunssfsi+0x42>
     96a:	3e f4       	brtc	.+14     	; 0x97a <__fixunssfsi+0x5c>
     96c:	90 95       	com	r25
     96e:	80 95       	com	r24
     970:	70 95       	com	r23
     972:	61 95       	neg	r22
     974:	7f 4f       	sbci	r23, 0xFF	; 255
     976:	8f 4f       	sbci	r24, 0xFF	; 255
     978:	9f 4f       	sbci	r25, 0xFF	; 255
     97a:	08 95       	ret

0000097c <__fp_cmp>:
     97c:	99 0f       	add	r25, r25
     97e:	00 08       	sbc	r0, r0
     980:	55 0f       	add	r21, r21
     982:	aa 0b       	sbc	r26, r26
     984:	e0 e8       	ldi	r30, 0x80	; 128
     986:	fe ef       	ldi	r31, 0xFE	; 254
     988:	16 16       	cp	r1, r22
     98a:	17 06       	cpc	r1, r23
     98c:	e8 07       	cpc	r30, r24
     98e:	f9 07       	cpc	r31, r25
     990:	c0 f0       	brcs	.+48     	; 0x9c2 <__fp_cmp+0x46>
     992:	12 16       	cp	r1, r18
     994:	13 06       	cpc	r1, r19
     996:	e4 07       	cpc	r30, r20
     998:	f5 07       	cpc	r31, r21
     99a:	98 f0       	brcs	.+38     	; 0x9c2 <__fp_cmp+0x46>
     99c:	62 1b       	sub	r22, r18
     99e:	73 0b       	sbc	r23, r19
     9a0:	84 0b       	sbc	r24, r20
     9a2:	95 0b       	sbc	r25, r21
     9a4:	39 f4       	brne	.+14     	; 0x9b4 <__fp_cmp+0x38>
     9a6:	0a 26       	eor	r0, r26
     9a8:	61 f0       	breq	.+24     	; 0x9c2 <__fp_cmp+0x46>
     9aa:	23 2b       	or	r18, r19
     9ac:	24 2b       	or	r18, r20
     9ae:	25 2b       	or	r18, r21
     9b0:	21 f4       	brne	.+8      	; 0x9ba <__fp_cmp+0x3e>
     9b2:	08 95       	ret
     9b4:	0a 26       	eor	r0, r26
     9b6:	09 f4       	brne	.+2      	; 0x9ba <__fp_cmp+0x3e>
     9b8:	a1 40       	sbci	r26, 0x01	; 1
     9ba:	a6 95       	lsr	r26
     9bc:	8f ef       	ldi	r24, 0xFF	; 255
     9be:	81 1d       	adc	r24, r1
     9c0:	81 1d       	adc	r24, r1
     9c2:	08 95       	ret

000009c4 <__fp_split3>:
     9c4:	57 fd       	sbrc	r21, 7
     9c6:	90 58       	subi	r25, 0x80	; 128
     9c8:	44 0f       	add	r20, r20
     9ca:	55 1f       	adc	r21, r21
     9cc:	59 f0       	breq	.+22     	; 0x9e4 <__fp_splitA+0x10>
     9ce:	5f 3f       	cpi	r21, 0xFF	; 255
     9d0:	71 f0       	breq	.+28     	; 0x9ee <__fp_splitA+0x1a>
     9d2:	47 95       	ror	r20

000009d4 <__fp_splitA>:
     9d4:	88 0f       	add	r24, r24
     9d6:	97 fb       	bst	r25, 7
     9d8:	99 1f       	adc	r25, r25
     9da:	61 f0       	breq	.+24     	; 0x9f4 <__fp_splitA+0x20>
     9dc:	9f 3f       	cpi	r25, 0xFF	; 255
     9de:	79 f0       	breq	.+30     	; 0x9fe <__fp_splitA+0x2a>
     9e0:	87 95       	ror	r24
     9e2:	08 95       	ret
     9e4:	12 16       	cp	r1, r18
     9e6:	13 06       	cpc	r1, r19
     9e8:	14 06       	cpc	r1, r20
     9ea:	55 1f       	adc	r21, r21
     9ec:	f2 cf       	rjmp	.-28     	; 0x9d2 <__fp_split3+0xe>
     9ee:	46 95       	lsr	r20
     9f0:	f1 df       	rcall	.-30     	; 0x9d4 <__fp_splitA>
     9f2:	08 c0       	rjmp	.+16     	; 0xa04 <__fp_splitA+0x30>
     9f4:	16 16       	cp	r1, r22
     9f6:	17 06       	cpc	r1, r23
     9f8:	18 06       	cpc	r1, r24
     9fa:	99 1f       	adc	r25, r25
     9fc:	f1 cf       	rjmp	.-30     	; 0x9e0 <__fp_splitA+0xc>
     9fe:	86 95       	lsr	r24
     a00:	71 05       	cpc	r23, r1
     a02:	61 05       	cpc	r22, r1
     a04:	08 94       	sec
     a06:	08 95       	ret

00000a08 <__fp_zero>:
     a08:	e8 94       	clt

00000a0a <__fp_szero>:
     a0a:	bb 27       	eor	r27, r27
     a0c:	66 27       	eor	r22, r22
     a0e:	77 27       	eor	r23, r23
     a10:	cb 01       	movw	r24, r22
     a12:	97 f9       	bld	r25, 7
     a14:	08 95       	ret

00000a16 <__gesf2>:
     a16:	0e 94 be 04 	call	0x97c	; 0x97c <__fp_cmp>
     a1a:	08 f4       	brcc	.+2      	; 0xa1e <__gesf2+0x8>
     a1c:	8f ef       	ldi	r24, 0xFF	; 255
     a1e:	08 95       	ret

00000a20 <__mulsf3>:
     a20:	0e 94 23 05 	call	0xa46	; 0xa46 <__mulsf3x>
     a24:	0c 94 94 05 	jmp	0xb28	; 0xb28 <__fp_round>
     a28:	0e 94 86 05 	call	0xb0c	; 0xb0c <__fp_pscA>
     a2c:	38 f0       	brcs	.+14     	; 0xa3c <__mulsf3+0x1c>
     a2e:	0e 94 8d 05 	call	0xb1a	; 0xb1a <__fp_pscB>
     a32:	20 f0       	brcs	.+8      	; 0xa3c <__mulsf3+0x1c>
     a34:	95 23       	and	r25, r21
     a36:	11 f0       	breq	.+4      	; 0xa3c <__mulsf3+0x1c>
     a38:	0c 94 7d 05 	jmp	0xafa	; 0xafa <__fp_inf>
     a3c:	0c 94 83 05 	jmp	0xb06	; 0xb06 <__fp_nan>
     a40:	11 24       	eor	r1, r1
     a42:	0c 94 05 05 	jmp	0xa0a	; 0xa0a <__fp_szero>

00000a46 <__mulsf3x>:
     a46:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__fp_split3>
     a4a:	70 f3       	brcs	.-36     	; 0xa28 <__mulsf3+0x8>

00000a4c <__mulsf3_pse>:
     a4c:	95 9f       	mul	r25, r21
     a4e:	c1 f3       	breq	.-16     	; 0xa40 <__mulsf3+0x20>
     a50:	95 0f       	add	r25, r21
     a52:	50 e0       	ldi	r21, 0x00	; 0
     a54:	55 1f       	adc	r21, r21
     a56:	62 9f       	mul	r22, r18
     a58:	f0 01       	movw	r30, r0
     a5a:	72 9f       	mul	r23, r18
     a5c:	bb 27       	eor	r27, r27
     a5e:	f0 0d       	add	r31, r0
     a60:	b1 1d       	adc	r27, r1
     a62:	63 9f       	mul	r22, r19
     a64:	aa 27       	eor	r26, r26
     a66:	f0 0d       	add	r31, r0
     a68:	b1 1d       	adc	r27, r1
     a6a:	aa 1f       	adc	r26, r26
     a6c:	64 9f       	mul	r22, r20
     a6e:	66 27       	eor	r22, r22
     a70:	b0 0d       	add	r27, r0
     a72:	a1 1d       	adc	r26, r1
     a74:	66 1f       	adc	r22, r22
     a76:	82 9f       	mul	r24, r18
     a78:	22 27       	eor	r18, r18
     a7a:	b0 0d       	add	r27, r0
     a7c:	a1 1d       	adc	r26, r1
     a7e:	62 1f       	adc	r22, r18
     a80:	73 9f       	mul	r23, r19
     a82:	b0 0d       	add	r27, r0
     a84:	a1 1d       	adc	r26, r1
     a86:	62 1f       	adc	r22, r18
     a88:	83 9f       	mul	r24, r19
     a8a:	a0 0d       	add	r26, r0
     a8c:	61 1d       	adc	r22, r1
     a8e:	22 1f       	adc	r18, r18
     a90:	74 9f       	mul	r23, r20
     a92:	33 27       	eor	r19, r19
     a94:	a0 0d       	add	r26, r0
     a96:	61 1d       	adc	r22, r1
     a98:	23 1f       	adc	r18, r19
     a9a:	84 9f       	mul	r24, r20
     a9c:	60 0d       	add	r22, r0
     a9e:	21 1d       	adc	r18, r1
     aa0:	82 2f       	mov	r24, r18
     aa2:	76 2f       	mov	r23, r22
     aa4:	6a 2f       	mov	r22, r26
     aa6:	11 24       	eor	r1, r1
     aa8:	9f 57       	subi	r25, 0x7F	; 127
     aaa:	50 40       	sbci	r21, 0x00	; 0
     aac:	9a f0       	brmi	.+38     	; 0xad4 <__mulsf3_pse+0x88>
     aae:	f1 f0       	breq	.+60     	; 0xaec <__mulsf3_pse+0xa0>
     ab0:	88 23       	and	r24, r24
     ab2:	4a f0       	brmi	.+18     	; 0xac6 <__mulsf3_pse+0x7a>
     ab4:	ee 0f       	add	r30, r30
     ab6:	ff 1f       	adc	r31, r31
     ab8:	bb 1f       	adc	r27, r27
     aba:	66 1f       	adc	r22, r22
     abc:	77 1f       	adc	r23, r23
     abe:	88 1f       	adc	r24, r24
     ac0:	91 50       	subi	r25, 0x01	; 1
     ac2:	50 40       	sbci	r21, 0x00	; 0
     ac4:	a9 f7       	brne	.-22     	; 0xab0 <__mulsf3_pse+0x64>
     ac6:	9e 3f       	cpi	r25, 0xFE	; 254
     ac8:	51 05       	cpc	r21, r1
     aca:	80 f0       	brcs	.+32     	; 0xaec <__mulsf3_pse+0xa0>
     acc:	0c 94 7d 05 	jmp	0xafa	; 0xafa <__fp_inf>
     ad0:	0c 94 05 05 	jmp	0xa0a	; 0xa0a <__fp_szero>
     ad4:	5f 3f       	cpi	r21, 0xFF	; 255
     ad6:	e4 f3       	brlt	.-8      	; 0xad0 <__mulsf3_pse+0x84>
     ad8:	98 3e       	cpi	r25, 0xE8	; 232
     ada:	d4 f3       	brlt	.-12     	; 0xad0 <__mulsf3_pse+0x84>
     adc:	86 95       	lsr	r24
     ade:	77 95       	ror	r23
     ae0:	67 95       	ror	r22
     ae2:	b7 95       	ror	r27
     ae4:	f7 95       	ror	r31
     ae6:	e7 95       	ror	r30
     ae8:	9f 5f       	subi	r25, 0xFF	; 255
     aea:	c1 f7       	brne	.-16     	; 0xadc <__mulsf3_pse+0x90>
     aec:	fe 2b       	or	r31, r30
     aee:	88 0f       	add	r24, r24
     af0:	91 1d       	adc	r25, r1
     af2:	96 95       	lsr	r25
     af4:	87 95       	ror	r24
     af6:	97 f9       	bld	r25, 7
     af8:	08 95       	ret

00000afa <__fp_inf>:
     afa:	97 f9       	bld	r25, 7
     afc:	9f 67       	ori	r25, 0x7F	; 127
     afe:	80 e8       	ldi	r24, 0x80	; 128
     b00:	70 e0       	ldi	r23, 0x00	; 0
     b02:	60 e0       	ldi	r22, 0x00	; 0
     b04:	08 95       	ret

00000b06 <__fp_nan>:
     b06:	9f ef       	ldi	r25, 0xFF	; 255
     b08:	80 ec       	ldi	r24, 0xC0	; 192
     b0a:	08 95       	ret

00000b0c <__fp_pscA>:
     b0c:	00 24       	eor	r0, r0
     b0e:	0a 94       	dec	r0
     b10:	16 16       	cp	r1, r22
     b12:	17 06       	cpc	r1, r23
     b14:	18 06       	cpc	r1, r24
     b16:	09 06       	cpc	r0, r25
     b18:	08 95       	ret

00000b1a <__fp_pscB>:
     b1a:	00 24       	eor	r0, r0
     b1c:	0a 94       	dec	r0
     b1e:	12 16       	cp	r1, r18
     b20:	13 06       	cpc	r1, r19
     b22:	14 06       	cpc	r1, r20
     b24:	05 06       	cpc	r0, r21
     b26:	08 95       	ret

00000b28 <__fp_round>:
     b28:	09 2e       	mov	r0, r25
     b2a:	03 94       	inc	r0
     b2c:	00 0c       	add	r0, r0
     b2e:	11 f4       	brne	.+4      	; 0xb34 <__fp_round+0xc>
     b30:	88 23       	and	r24, r24
     b32:	52 f0       	brmi	.+20     	; 0xb48 <__fp_round+0x20>
     b34:	bb 0f       	add	r27, r27
     b36:	40 f4       	brcc	.+16     	; 0xb48 <__fp_round+0x20>
     b38:	bf 2b       	or	r27, r31
     b3a:	11 f4       	brne	.+4      	; 0xb40 <__fp_round+0x18>
     b3c:	60 ff       	sbrs	r22, 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__fp_round+0x20>
     b40:	6f 5f       	subi	r22, 0xFF	; 255
     b42:	7f 4f       	sbci	r23, 0xFF	; 255
     b44:	8f 4f       	sbci	r24, 0xFF	; 255
     b46:	9f 4f       	sbci	r25, 0xFF	; 255
     b48:	08 95       	ret

00000b4a <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
     b4a:	0e 94 54 06 	call	0xca8	; 0xca8 <system_init>
     b4e:	08 95       	ret

00000b50 <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
     b50:	80 e0       	ldi	r24, 0x00	; 0
     b52:	08 c0       	rjmp	.+16     	; 0xb64 <mcu_init+0x14>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     b54:	e8 2f       	mov	r30, r24
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	e0 5f       	subi	r30, 0xF0	; 240
     b5a:	fb 4f       	sbci	r31, 0xFB	; 251
     b5c:	90 81       	ld	r25, Z
     b5e:	98 60       	ori	r25, 0x08	; 8
     b60:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
     b62:	8f 5f       	subi	r24, 0xFF	; 255
     b64:	88 30       	cpi	r24, 0x08	; 8
     b66:	b0 f3       	brcs	.-20     	; 0xb54 <mcu_init+0x4>
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	08 c0       	rjmp	.+16     	; 0xb7c <mcu_init+0x2c>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     b6c:	e8 2f       	mov	r30, r24
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	e0 5d       	subi	r30, 0xD0	; 208
     b72:	fb 4f       	sbci	r31, 0xFB	; 251
     b74:	90 81       	ld	r25, Z
     b76:	98 60       	ori	r25, 0x08	; 8
     b78:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     b7a:	8f 5f       	subi	r24, 0xFF	; 255
     b7c:	88 30       	cpi	r24, 0x08	; 8
     b7e:	b0 f3       	brcs	.-20     	; 0xb6c <mcu_init+0x1c>
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	08 c0       	rjmp	.+16     	; 0xb94 <mcu_init+0x44>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     b84:	e8 2f       	mov	r30, r24
     b86:	f0 e0       	ldi	r31, 0x00	; 0
     b88:	e0 5b       	subi	r30, 0xB0	; 176
     b8a:	fb 4f       	sbci	r31, 0xFB	; 251
     b8c:	90 81       	ld	r25, Z
     b8e:	98 60       	ori	r25, 0x08	; 8
     b90:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     b92:	8f 5f       	subi	r24, 0xFF	; 255
     b94:	88 30       	cpi	r24, 0x08	; 8
     b96:	b0 f3       	brcs	.-20     	; 0xb84 <mcu_init+0x34>
     b98:	80 e0       	ldi	r24, 0x00	; 0
     b9a:	08 c0       	rjmp	.+16     	; 0xbac <mcu_init+0x5c>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     b9c:	e8 2f       	mov	r30, r24
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	e0 59       	subi	r30, 0x90	; 144
     ba2:	fb 4f       	sbci	r31, 0xFB	; 251
     ba4:	90 81       	ld	r25, Z
     ba6:	98 60       	ori	r25, 0x08	; 8
     ba8:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     baa:	8f 5f       	subi	r24, 0xFF	; 255
     bac:	88 30       	cpi	r24, 0x08	; 8
     bae:	b0 f3       	brcs	.-20     	; 0xb9c <mcu_init+0x4c>
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	08 c0       	rjmp	.+16     	; 0xbc4 <mcu_init+0x74>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     bb4:	e8 2f       	mov	r30, r24
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	e0 57       	subi	r30, 0x70	; 112
     bba:	fb 4f       	sbci	r31, 0xFB	; 251
     bbc:	90 81       	ld	r25, Z
     bbe:	98 60       	ori	r25, 0x08	; 8
     bc0:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     bc2:	8f 5f       	subi	r24, 0xFF	; 255
     bc4:	88 30       	cpi	r24, 0x08	; 8
     bc6:	b0 f3       	brcs	.-20     	; 0xbb4 <mcu_init+0x64>
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	08 c0       	rjmp	.+16     	; 0xbdc <mcu_init+0x8c>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     bcc:	e8 2f       	mov	r30, r24
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	e0 55       	subi	r30, 0x50	; 80
     bd2:	fb 4f       	sbci	r31, 0xFB	; 251
     bd4:	90 81       	ld	r25, Z
     bd6:	98 60       	ori	r25, 0x08	; 8
     bd8:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     bda:	8f 5f       	subi	r24, 0xFF	; 255
     bdc:	88 30       	cpi	r24, 0x08	; 8
     bde:	b0 f3       	brcs	.-20     	; 0xbcc <mcu_init+0x7c>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
     be0:	08 95       	ret

00000be2 <USART_0_initialization>:
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     be2:	84 b1       	in	r24, 0x04	; 4
     be4:	8d 7f       	andi	r24, 0xFD	; 253
     be6:	84 b9       	out	0x04, r24	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     be8:	e1 e3       	ldi	r30, 0x31	; 49
     bea:	f4 e0       	ldi	r31, 0x04	; 4
     bec:	80 81       	ld	r24, Z
     bee:	87 7f       	andi	r24, 0xF7	; 247
     bf0:	80 83       	st	Z, r24
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     bf2:	85 b1       	in	r24, 0x05	; 5
     bf4:	8e 7f       	andi	r24, 0xFE	; 254
     bf6:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     bf8:	84 b1       	in	r24, 0x04	; 4
     bfa:	81 60       	ori	r24, 0x01	; 1
     bfc:	84 b9       	out	0x04, r24	; 4
	    // <true"> High
	    false);

	PB0_set_dir(PORT_DIR_OUT);

	USART_0_init();
     bfe:	0e 94 45 07 	call	0xe8a	; 0xe8a <USART_0_init>
     c02:	08 95       	ret

00000c04 <EVENT_SYSTEM_0_initialization>:
}

void EVENT_SYSTEM_0_initialization(void)
{

	EVENT_SYSTEM_0_init();
     c04:	0e 94 87 06 	call	0xd0e	; 0xd0e <EVENT_SYSTEM_0_init>
     c08:	08 95       	ret

00000c0a <ZCD_RISING_initialization>:
 */
static inline void PORTD_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     c0a:	e1 e7       	ldi	r30, 0x71	; 113
     c0c:	f4 e0       	ldi	r31, 0x04	; 4
     c0e:	80 81       	ld	r24, Z
     c10:	88 7f       	andi	r24, 0xF8	; 248
     c12:	84 60       	ori	r24, 0x04	; 4
     c14:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     c16:	80 81       	ld	r24, Z
     c18:	87 7f       	andi	r24, 0xF7	; 247
     c1a:	80 83       	st	Z, r24
	// Disable digital input buffer
	PD1_set_isc(PORT_ISC_INPUT_DISABLE_gc);
	// Disable pull-up resistor
	PD1_set_pull_mode(PORT_PULL_OFF);

	ZCD_RISING_init();
     c1c:	0e 94 66 07 	call	0xecc	; 0xecc <ZCD_RISING_init>
     c20:	08 95       	ret

00000c22 <ZCD_FALLING_initialization>:
 */
static inline void PORTE_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTE + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     c22:	e3 e9       	ldi	r30, 0x93	; 147
     c24:	f4 e0       	ldi	r31, 0x04	; 4
     c26:	80 81       	ld	r24, Z
     c28:	88 7f       	andi	r24, 0xF8	; 248
     c2a:	84 60       	ori	r24, 0x04	; 4
     c2c:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTE + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     c2e:	80 81       	ld	r24, Z
     c30:	87 7f       	andi	r24, 0xF7	; 247
     c32:	80 83       	st	Z, r24
	// Disable digital input buffer
	PE3_set_isc(PORT_ISC_INPUT_DISABLE_gc);
	// Disable pull-up resistor
	PE3_set_pull_mode(PORT_PULL_OFF);

	ZCD_FALLING_init();
     c34:	0e 94 6b 07 	call	0xed6	; 0xed6 <ZCD_FALLING_init>
     c38:	08 95       	ret

00000c3a <SPI_ADF_initialization>:
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     c3a:	80 b1       	in	r24, 0x00	; 0
     c3c:	8f 7d       	andi	r24, 0xDF	; 223
     c3e:	80 b9       	out	0x00, r24	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     c40:	e5 e1       	ldi	r30, 0x15	; 21
     c42:	f4 e0       	ldi	r31, 0x04	; 4
     c44:	80 81       	ld	r24, Z
     c46:	87 7f       	andi	r24, 0xF7	; 247
     c48:	80 83       	st	Z, r24
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     c4a:	81 b1       	in	r24, 0x01	; 1
     c4c:	8f 7e       	andi	r24, 0xEF	; 239
     c4e:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     c50:	80 b1       	in	r24, 0x00	; 0
     c52:	80 61       	ori	r24, 0x10	; 16
     c54:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     c56:	81 b1       	in	r24, 0x01	; 1
     c58:	8f 7b       	andi	r24, 0xBF	; 191
     c5a:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     c5c:	80 b1       	in	r24, 0x00	; 0
     c5e:	80 64       	ori	r24, 0x40	; 64
     c60:	80 b9       	out	0x00, r24	; 0
	    // <true"> High
	    false);

	PA6_set_dir(PORT_DIR_OUT);

	SPI_ADF_init();
     c62:	0e 94 a9 06 	call	0xd52	; 0xd52 <SPI_ADF_init>
     c66:	08 95       	ret

00000c68 <SPI_LMX_initialization>:
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
     c68:	88 b1       	in	r24, 0x08	; 8
     c6a:	8d 7f       	andi	r24, 0xFD	; 253
     c6c:	88 b9       	out	0x08, r24	; 8
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     c6e:	e1 e5       	ldi	r30, 0x51	; 81
     c70:	f4 e0       	ldi	r31, 0x04	; 4
     c72:	80 81       	ld	r24, Z
     c74:	87 7f       	andi	r24, 0xF7	; 247
     c76:	80 83       	st	Z, r24
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     c78:	89 b1       	in	r24, 0x09	; 9
     c7a:	8e 7f       	andi	r24, 0xFE	; 254
     c7c:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     c7e:	88 b1       	in	r24, 0x08	; 8
     c80:	81 60       	ori	r24, 0x01	; 1
     c82:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     c84:	89 b1       	in	r24, 0x09	; 9
     c86:	8b 7f       	andi	r24, 0xFB	; 251
     c88:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     c8a:	88 b1       	in	r24, 0x08	; 8
     c8c:	84 60       	ori	r24, 0x04	; 4
     c8e:	88 b9       	out	0x08, r24	; 8
	    // <true"> High
	    false);

	PC2_set_dir(PORT_DIR_OUT);

	SPI_LMX_init();
     c90:	0e 94 0c 07 	call	0xe18	; 0xe18 <SPI_LMX_init>
     c94:	08 95       	ret

00000c96 <TIMER_RISING_initialization>:
}

void TIMER_RISING_initialization(void)
{

	TIMER_RISING_init();
     c96:	0e 94 12 07 	call	0xe24	; 0xe24 <TIMER_RISING_init>
     c9a:	08 95       	ret

00000c9c <TIMER_FALLING_initialization>:
}

void TIMER_FALLING_initialization(void)
{

	TIMER_FALLING_init();
     c9c:	0e 94 1e 07 	call	0xe3c	; 0xe3c <TIMER_FALLING_init>
     ca0:	08 95       	ret

00000ca2 <TIMER_0_initialization>:
}

void TIMER_0_initialization(void)
{

	TIMER_0_init();
     ca2:	0e 94 30 07 	call	0xe60	; 0xe60 <TIMER_0_init>
     ca6:	08 95       	ret

00000ca8 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
     ca8:	0e 94 a8 05 	call	0xb50	; 0xb50 <mcu_init>
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     cac:	81 b1       	in	r24, 0x01	; 1
     cae:	8f 77       	andi	r24, 0x7F	; 127
     cb0:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     cb2:	80 b1       	in	r24, 0x00	; 0
     cb4:	80 68       	ori	r24, 0x80	; 128
     cb6:	80 b9       	out	0x00, r24	; 0
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     cb8:	85 b1       	in	r24, 0x05	; 5
     cba:	87 7f       	andi	r24, 0xF7	; 247
     cbc:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     cbe:	84 b1       	in	r24, 0x04	; 4
     cc0:	88 60       	ori	r24, 0x08	; 8
     cc2:	84 b9       	out	0x04, r24	; 4
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
     cc4:	89 b1       	in	r24, 0x09	; 9
     cc6:	88 60       	ori	r24, 0x08	; 8
     cc8:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     cca:	88 b1       	in	r24, 0x08	; 8
     ccc:	88 60       	ori	r24, 0x08	; 8
     cce:	88 b9       	out	0x08, r24	; 8
	    // <true"> High
	    true);

	CS_LMX_set_dir(PORT_DIR_OUT);

	CLKCTRL_init();
     cd0:	0e 94 74 07 	call	0xee8	; 0xee8 <CLKCTRL_init>

	USART_0_initialization();
     cd4:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <USART_0_initialization>

	EVENT_SYSTEM_0_initialization();
     cd8:	0e 94 02 06 	call	0xc04	; 0xc04 <EVENT_SYSTEM_0_initialization>

	SLPCTRL_init();
     cdc:	0e 94 a7 06 	call	0xd4e	; 0xd4e <SLPCTRL_init>

	CPUINT_init();
     ce0:	0e 94 82 07 	call	0xf04	; 0xf04 <CPUINT_init>

	ZCD_RISING_initialization();
     ce4:	0e 94 05 06 	call	0xc0a	; 0xc0a <ZCD_RISING_initialization>

	ZCD_FALLING_initialization();
     ce8:	0e 94 11 06 	call	0xc22	; 0xc22 <ZCD_FALLING_initialization>

	SPI_ADF_initialization();
     cec:	0e 94 1d 06 	call	0xc3a	; 0xc3a <SPI_ADF_initialization>

	SPI_LMX_initialization();
     cf0:	0e 94 34 06 	call	0xc68	; 0xc68 <SPI_LMX_initialization>

	RTC_0_init();
     cf4:	0e 94 96 06 	call	0xd2c	; 0xd2c <RTC_0_init>

	TIMER_RISING_initialization();
     cf8:	0e 94 4b 06 	call	0xc96	; 0xc96 <TIMER_RISING_initialization>

	TIMER_FALLING_initialization();
     cfc:	0e 94 4e 06 	call	0xc9c	; 0xc9c <TIMER_FALLING_initialization>

	TIMER_0_initialization();
     d00:	0e 94 51 06 	call	0xca2	; 0xca2 <TIMER_0_initialization>

	VREF_0_init();
     d04:	0e 94 61 07 	call	0xec2	; 0xec2 <VREF_0_init>

	BOD_init();
     d08:	0e 94 70 07 	call	0xee0	; 0xee0 <BOD_init>
     d0c:	08 95       	ret

00000d0e <EVENT_SYSTEM_0_init>:
 * \return Initialization status.
 */
int8_t EVENT_SYSTEM_0_init()
{

	EVSYS.CHANNEL0 = EVSYS_CHANNEL0_ZCD0_gc; /* Zero Cross Detect 0 out */
     d0e:	e0 e0       	ldi	r30, 0x00	; 0
     d10:	f2 e0       	ldi	r31, 0x02	; 2
     d12:	80 e3       	ldi	r24, 0x30	; 48
     d14:	80 8b       	std	Z+16, r24	; 0x10

	EVSYS.CHANNEL1 = EVSYS_CHANNEL1_ZCD1_gc; /* Zero Cross Detect 1 out */
     d16:	81 e3       	ldi	r24, 0x31	; 49
     d18:	81 8b       	std	Z+17, r24	; 0x11

	// EVSYS.USERTCA1CNTA = EVSYS_USER_OFF_gc; /* Off */

	// EVSYS.USERTCA1CNTB = EVSYS_USER_OFF_gc; /* Off */

	EVSYS.USERTCB0CAPT = EVSYS_USER_CHANNEL0_gc; /* Connect user to event channel 0 */
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	86 af       	std	Z+62, r24	; 0x3e

	// EVSYS.USERTCB0COUNT = EVSYS_USER_OFF_gc; /* Off */

	EVSYS.USERTCB1CAPT = EVSYS_USER_CHANNEL1_gc; /* Connect user to event channel 1 */
     d1e:	92 e0       	ldi	r25, 0x02	; 2
     d20:	90 93 40 02 	sts	0x0240, r25	; 0x800240 <__TEXT_REGION_LENGTH__+0x7e0240>

	//EVSYS.USERTCB3CAPT = EVSYS_USER_CHANNEL1_gc; /* Connect user to event channel 1 */

	// EVSYS.USERTCB3COUNT = EVSYS_USER_OFF_gc; /* Off */

	EVSYS.USERTCD0INPUTA = EVSYS_USER_CHANNEL0_gc; /* Connect user to event channel 0 */
     d24:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <__TEXT_REGION_LENGTH__+0x7e0248>
	// EVSYS.USEROPAMP2DUMP = EVSYS_USER_OFF_gc; /* Off */

	// EVSYS.USEROPAMP2DISABLE = EVSYS_USER_OFF_gc; /* Off */

	return 0;
}
     d28:	80 e0       	ldi	r24, 0x00	; 0
     d2a:	08 95       	ret

00000d2c <RTC_0_init>:
 * \return Initialization status.
 */
int8_t RTC_0_init()
{

	while (RTC.STATUS > 0) { /* Wait for all register to be synchronized */
     d2c:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
     d30:	81 11       	cpse	r24, r1
     d32:	fc cf       	rjmp	.-8      	; 0xd2c <RTC_0_init>

	// RTC.CMP = 0x0; /* Compare: 0x0 */

	// RTC.CNT = 0x0; /* Counter: 0x0 */

	RTC.CTRLA = RTC_PRESCALER_DIV32_gc  /* 32 */
     d34:	e0 e4       	ldi	r30, 0x40	; 64
     d36:	f1 e0       	ldi	r31, 0x01	; 1
     d38:	88 ea       	ldi	r24, 0xA8	; 168
     d3a:	80 83       	st	Z, r24
	            | 0 << RTC_RTCEN_bp     /* Enable: disabled */
	            | 1 << RTC_RUNSTDBY_bp; /* Run In Standby: enabled */

	RTC.PER = 0x1ff; /* Period: 0x1ff */
     d3c:	8f ef       	ldi	r24, 0xFF	; 255
     d3e:	91 e0       	ldi	r25, 0x01	; 1
     d40:	82 87       	std	Z+10, r24	; 0x0a
     d42:	93 87       	std	Z+11, r25	; 0x0b

	RTC.CLKSEL = RTC_CLKSEL_OSC32K_gc; /* Internal 32.768 kHz oscillator */
     d44:	17 82       	std	Z+7, r1	; 0x07

	// RTC.DBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	RTC.INTCTRL = 0 << RTC_CMP_bp    /* Compare Match Interrupt enable: disabled */
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	82 83       	std	Z+2, r24	; 0x02
	// RTC.PITDBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	// RTC.PITINTCTRL = 0 << RTC_PI_bp; /* Periodic Interrupt: disabled */

	return 0;
}
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	08 95       	ret

00000d4e <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
     d4e:	80 e0       	ldi	r24, 0x00	; 0
     d50:	08 95       	ret

00000d52 <SPI_ADF_init>:
	SPI_ADF_desc.data   = (uint8_t *)block;
	SPI_ADF_desc.size   = size;
	SPI_ADF_desc.type   = SPI_READ;
	SPI_ADF_desc.status = SPI_BUSY;

	SPI0.DATA = 0;
     d52:	e0 e4       	ldi	r30, 0x40	; 64
     d54:	f9 e0       	ldi	r31, 0x09	; 9
     d56:	81 e2       	ldi	r24, 0x21	; 33
     d58:	80 83       	st	Z, r24
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	82 83       	std	Z+2, r24	; 0x02
     d5e:	e1 e5       	ldi	r30, 0x51	; 81
     d60:	f0 e4       	ldi	r31, 0x40	; 64
     d62:	10 82       	st	Z, r1
     d64:	15 82       	std	Z+5, r1	; 0x05
     d66:	16 82       	std	Z+6, r1	; 0x06
     d68:	08 95       	ret

00000d6a <__vector_20>:
     d6a:	1f 92       	push	r1
     d6c:	0f 92       	push	r0
     d6e:	0f b6       	in	r0, 0x3f	; 63
     d70:	0f 92       	push	r0
     d72:	11 24       	eor	r1, r1
     d74:	0b b6       	in	r0, 0x3b	; 59
     d76:	0f 92       	push	r0
     d78:	2f 93       	push	r18
     d7a:	3f 93       	push	r19
     d7c:	4f 93       	push	r20
     d7e:	5f 93       	push	r21
     d80:	6f 93       	push	r22
     d82:	7f 93       	push	r23
     d84:	8f 93       	push	r24
     d86:	9f 93       	push	r25
     d88:	af 93       	push	r26
     d8a:	bf 93       	push	r27
     d8c:	ef 93       	push	r30
     d8e:	ff 93       	push	r31
     d90:	e0 e4       	ldi	r30, 0x40	; 64
     d92:	f9 e0       	ldi	r31, 0x09	; 9
     d94:	94 81       	ldd	r25, Z+4	; 0x04
     d96:	80 e8       	ldi	r24, 0x80	; 128
     d98:	83 83       	std	Z+3, r24	; 0x03
     d9a:	80 91 55 40 	lds	r24, 0x4055	; 0x804055 <SPI_ADF_desc+0x4>
     d9e:	82 30       	cpi	r24, 0x02	; 2
     da0:	29 f0       	breq	.+10     	; 0xdac <__vector_20+0x42>
     da2:	e0 91 52 40 	lds	r30, 0x4052	; 0x804052 <SPI_ADF_desc+0x1>
     da6:	f0 91 53 40 	lds	r31, 0x4053	; 0x804053 <SPI_ADF_desc+0x2>
     daa:	90 83       	st	Z, r25
     dac:	e1 e5       	ldi	r30, 0x51	; 81
     dae:	f0 e4       	ldi	r31, 0x40	; 64
     db0:	a1 81       	ldd	r26, Z+1	; 0x01
     db2:	b2 81       	ldd	r27, Z+2	; 0x02
     db4:	9d 01       	movw	r18, r26
     db6:	2f 5f       	subi	r18, 0xFF	; 255
     db8:	3f 4f       	sbci	r19, 0xFF	; 255
     dba:	21 83       	std	Z+1, r18	; 0x01
     dbc:	32 83       	std	Z+2, r19	; 0x02
     dbe:	81 30       	cpi	r24, 0x01	; 1
     dc0:	19 f0       	breq	.+6      	; 0xdc8 <__vector_20+0x5e>
     dc2:	11 96       	adiw	r26, 0x01	; 1
     dc4:	9c 91       	ld	r25, X
     dc6:	01 c0       	rjmp	.+2      	; 0xdca <__vector_20+0x60>
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	e1 e5       	ldi	r30, 0x51	; 81
     dcc:	f0 e4       	ldi	r31, 0x40	; 64
     dce:	83 81       	ldd	r24, Z+3	; 0x03
     dd0:	81 50       	subi	r24, 0x01	; 1
     dd2:	83 83       	std	Z+3, r24	; 0x03
     dd4:	88 23       	and	r24, r24
     dd6:	19 f0       	breq	.+6      	; 0xdde <__vector_20+0x74>
     dd8:	90 93 44 09 	sts	0x0944, r25	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
     ddc:	0a c0       	rjmp	.+20     	; 0xdf2 <__vector_20+0x88>
     dde:	e1 e5       	ldi	r30, 0x51	; 81
     de0:	f0 e4       	ldi	r31, 0x40	; 64
     de2:	83 e0       	ldi	r24, 0x03	; 3
     de4:	80 83       	st	Z, r24
     de6:	05 80       	ldd	r0, Z+5	; 0x05
     de8:	f6 81       	ldd	r31, Z+6	; 0x06
     dea:	e0 2d       	mov	r30, r0
     dec:	30 97       	sbiw	r30, 0x00	; 0
     dee:	09 f0       	breq	.+2      	; 0xdf2 <__vector_20+0x88>
     df0:	09 95       	icall
     df2:	ff 91       	pop	r31
     df4:	ef 91       	pop	r30
     df6:	bf 91       	pop	r27
     df8:	af 91       	pop	r26
     dfa:	9f 91       	pop	r25
     dfc:	8f 91       	pop	r24
     dfe:	7f 91       	pop	r23
     e00:	6f 91       	pop	r22
     e02:	5f 91       	pop	r21
     e04:	4f 91       	pop	r20
     e06:	3f 91       	pop	r19
     e08:	2f 91       	pop	r18
     e0a:	0f 90       	pop	r0
     e0c:	0b be       	out	0x3b, r0	; 59
     e0e:	0f 90       	pop	r0
     e10:	0f be       	out	0x3f, r0	; 63
     e12:	0f 90       	pop	r0
     e14:	1f 90       	pop	r1
     e16:	18 95       	reti

00000e18 <SPI_LMX_init>:
 * \retval 1 the SPI init was not successful
 */
void SPI_LMX_init()
{

	SPI1.CTRLA = 0 << SPI_CLK2X_bp    /* Enable Double Speed: disabled */
     e18:	81 e2       	ldi	r24, 0x21	; 33
     e1a:	80 93 60 09 	sts	0x0960, r24	; 0x800960 <__TEXT_REGION_LENGTH__+0x7e0960>
	//		 | 0 << SPI_IE_bp /* Interrupt Enable: disabled */
	//		 | 0 << SPI_RXCIE_bp /* Receive Complete Interrupt Enable: disabled */
	//		 | 0 << SPI_SSIE_bp /* Slave Select Trigger Interrupt Enable: disabled */
	//		 | 0 << SPI_TXCIE_bp; /* Transfer Complete Interrupt Enable: disabled */

	SPI_LMX_desc.status = SPI_FREE;
     e1e:	10 92 50 40 	sts	0x4050, r1	; 0x804050 <SPI_LMX_desc>
     e22:	08 95       	ret

00000e24 <TIMER_RISING_init>:

	// TCB0.CCMP = 0x0; /* Compare or Capture: 0x0 */

	// TCB0.CNT = 0x0; /* Count: 0x0 */

	TCB0.CTRLB = 1 << TCB_ASYNC_bp      /* Asynchronous Enable: enabled */
     e24:	e0 e0       	ldi	r30, 0x00	; 0
     e26:	fb e0       	ldi	r31, 0x0B	; 11
     e28:	83 e4       	ldi	r24, 0x43	; 67
     e2a:	81 83       	std	Z+1, r24	; 0x01
	             | 0 << TCB_CCMPEN_bp   /* Pin Output Enable: disabled */
	             | 0 << TCB_CCMPINIT_bp /* Pin Initial State: disabled */
	             | TCB_CNTMODE_FRQ_gc;  /* Input Capture Frequency measurement */

	TCB0.DBGCTRL = 1 << TCB_DBGRUN_bp; /* Debug Run: enabled */
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	80 87       	std	Z+8, r24	; 0x08

	TCB0.EVCTRL = 1 << TCB_CAPTEI_bp    /* Event Input Enable: enabled */
     e30:	84 83       	std	Z+4, r24	; 0x04
	              | 0 << TCB_EDGE_bp    /* Event Edge: disabled */
	              | 0 << TCB_FILTER_bp; /* Input Capture Noise Cancellation Filter: disabled */

	TCB0.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
     e32:	85 83       	std	Z+5, r24	; 0x05
	               | 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */

	TCB0.CTRLA = TCB_CLKSEL_DIV1_gc     /* CLK_PER */
     e34:	81 e1       	ldi	r24, 0x11	; 17
     e36:	80 83       	st	Z, r24
	             | 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
	             | 1 << TCB_SYNCUPD_bp  /* Synchronize Update: enabled */
	             | 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */

	return 0;
}
     e38:	80 e0       	ldi	r24, 0x00	; 0
     e3a:	08 95       	ret

00000e3c <TIMER_FALLING_init>:
 * \return Initialization status.
 */
int8_t TIMER_FALLING_init()
{

	 TCB1.CCMP = 0xffff; /* Compare or Capture: 0x0 */
     e3c:	e0 e1       	ldi	r30, 0x10	; 16
     e3e:	fb e0       	ldi	r31, 0x0B	; 11
     e40:	8f ef       	ldi	r24, 0xFF	; 255
     e42:	9f ef       	ldi	r25, 0xFF	; 255
     e44:	84 87       	std	Z+12, r24	; 0x0c
     e46:	95 87       	std	Z+13, r25	; 0x0d

	 TCB1.CNT = 0xffff; /* Count: 0x0 */
     e48:	82 87       	std	Z+10, r24	; 0x0a
     e4a:	93 87       	std	Z+11, r25	; 0x0b

	TCB1.CTRLB = 1 << TCB_ASYNC_bp      /* Asynchronous Enable: enabled */
     e4c:	83 e4       	ldi	r24, 0x43	; 67
     e4e:	81 83       	std	Z+1, r24	; 0x01
	             | 0 << TCB_CCMPEN_bp   /* Pin Output Enable: disabled */
	             | 0 << TCB_CCMPINIT_bp /* Pin Initial State: disabled */
	             | TCB_CNTMODE_FRQ_gc;  /* Input Capture Frequency measurement */

	TCB1.DBGCTRL = 1 << TCB_DBGRUN_bp; /* Debug Run: enabled */
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	80 87       	std	Z+8, r24	; 0x08

	TCB1.EVCTRL = 1 << TCB_CAPTEI_bp    /* Event Input Enable: enabled */
     e54:	84 83       	std	Z+4, r24	; 0x04
	              | 0 << TCB_EDGE_bp    /* Event Edge: disabled */
	              | 0 << TCB_FILTER_bp; /* Input Capture Noise Cancellation Filter: disabled */

	TCB1.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
     e56:	85 83       	std	Z+5, r24	; 0x05
	               | 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */

	TCB1.CTRLA = TCB_CLKSEL_DIV1_gc     /* CLK_PER */
     e58:	81 e1       	ldi	r24, 0x11	; 17
     e5a:	80 83       	st	Z, r24
	             | 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
	             | 1 << TCB_SYNCUPD_bp  /* Synchronize Update: enabled */
	             | 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */

	return 0;
}
     e5c:	80 e0       	ldi	r24, 0x00	; 0
     e5e:	08 95       	ret

00000e60 <TIMER_0_init>:
int8_t TIMER_0_init()
{

	// Enable Protected register, peripheral must be disabled (ENABLE=0, in TCD.CTRLA).

	 TCD0.CMPASET = 0xfff; /* Compare A Set: 0 */
     e60:	e0 e8       	ldi	r30, 0x80	; 128
     e62:	fb e0       	ldi	r31, 0x0B	; 11
     e64:	8f ef       	ldi	r24, 0xFF	; 255
     e66:	9f e0       	ldi	r25, 0x0F	; 15
     e68:	80 a7       	std	Z+40, r24	; 0x28
     e6a:	91 a7       	std	Z+41, r25	; 0x29

	 TCD0.CMPACLR = 0xfff; /* Compare A Clear: 0 */
     e6c:	82 a7       	std	Z+42, r24	; 0x2a
     e6e:	93 a7       	std	Z+43, r25	; 0x2b
	//		 | TCD_DLYSEL_OFF_gc /* No delay */
	//		 | TCD_DLYTRIG_CMPASET_gc; /* Compare A set */

	// TCD0.DLYVAL = 0 << TCD_DLYVAL_gp; /* Delay value: 0 */

	 TCD0.EVCTRLA = TCD_CFG_FILTER_gc /* Neither Filter nor Asynchronous Event is enabled */
     e70:	85 e5       	ldi	r24, 0x55	; 85
     e72:	80 87       	std	Z+8, r24	; 0x08

	// TCD0.INPUTCTRLA = TCD_INPUTMODE_NONE_gc; /* Input has no actions */

	// TCD0.INPUTCTRLB = TCD_INPUTMODE_NONE_gc; /* Input has no actions */

	 TCD0.INTCTRL = 0 << TCD_OVF_bp /* Overflow interrupt enable: disabled */
     e74:	84 e0       	ldi	r24, 0x04	; 4
     e76:	84 87       	std	Z+12, r24	; 0x0c
			 | 1 << TCD_TRIGA_bp /* Trigger A interrupt enable: disabled */
			 | 0 << TCD_TRIGB_bp; /* Trigger B interrupt enable: disabled */

	while ((TCD0.STATUS & TCD_ENRDY_bm) == 0)
     e78:	80 91 8e 0b 	lds	r24, 0x0B8E	; 0x800b8e <__TEXT_REGION_LENGTH__+0x7e0b8e>
     e7c:	80 ff       	sbrs	r24, 0
     e7e:	fc cf       	rjmp	.-8      	; 0xe78 <TIMER_0_init+0x18>
		; // Wait for Enable Ready to be high.

	TCD0.CTRLA = 1 << TCD_ENABLE_bp      /* Enable: enabled */
     e80:	81 e2       	ldi	r24, 0x21	; 33
     e82:	80 93 80 0b 	sts	0x0B80, r24	; 0x800b80 <__TEXT_REGION_LENGTH__+0x7e0b80>
	             | TCD_CLKSEL_PLL_gc     /*  */
	             | TCD_CNTPRES_DIV1_gc   /* Sync clock divided by 1 */
	             | TCD_SYNCPRES_DIV1_gc; /*  */

	return 0;
}
     e86:	80 e0       	ldi	r24, 0x00	; 0
     e88:	08 95       	ret

00000e8a <USART_0_init>:
uint8_t USART_0_read()
{
	while (!(USART3.STATUS & USART_RXCIF_bm))
		;
	return USART3.RXDATAL;
}
     e8a:	e0 e6       	ldi	r30, 0x60	; 96
     e8c:	f8 e0       	ldi	r31, 0x08	; 8
     e8e:	81 e4       	ldi	r24, 0x41	; 65
     e90:	93 e0       	ldi	r25, 0x03	; 3
     e92:	80 87       	std	Z+8, r24	; 0x08
     e94:	91 87       	std	Z+9, r25	; 0x09
     e96:	80 ec       	ldi	r24, 0xC0	; 192
     e98:	86 83       	std	Z+6, r24	; 0x06
     e9a:	80 e0       	ldi	r24, 0x00	; 0
     e9c:	90 e4       	ldi	r25, 0x40	; 64
     e9e:	80 93 5a 40 	sts	0x405A, r24	; 0x80405a <__iob+0x2>
     ea2:	90 93 5b 40 	sts	0x405B, r25	; 0x80405b <__iob+0x3>
     ea6:	80 e0       	ldi	r24, 0x00	; 0
     ea8:	08 95       	ret

00000eaa <USART_0_write>:
 *
 * \return Nothing
 */
void USART_0_write(const uint8_t data)
{
	while (!(USART3.STATUS & USART_DREIF_bm))
     eaa:	90 91 64 08 	lds	r25, 0x0864	; 0x800864 <__TEXT_REGION_LENGTH__+0x7e0864>
     eae:	95 ff       	sbrs	r25, 5
     eb0:	fc cf       	rjmp	.-8      	; 0xeaa <USART_0_write>
		;
	USART3.TXDATAL = data;
     eb2:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <__TEXT_REGION_LENGTH__+0x7e0862>
     eb6:	08 95       	ret

00000eb8 <USART_0_printCHAR>:

#if defined(__GNUC__)

int USART_0_printCHAR(char character, FILE *stream)
{
	USART_0_write(character);
     eb8:	0e 94 55 07 	call	0xeaa	; 0xeaa <USART_0_write>
	return 0;
}
     ebc:	80 e0       	ldi	r24, 0x00	; 0
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	08 95       	ret

00000ec2 <VREF_0_init>:
	//		 | VREF_REFSEL_1V024_gc; /* Internal 1.024V reference */

	// VREF.DAC0REF = 0 << VREF_ALWAYSON_bp /* Enable reference always ON for DAC0: disabled */
	//		 | VREF_REFSEL_1V024_gc; /* Internal 1.024V reference */

	VREF.ACREF = 1 << VREF_ALWAYSON_bp /* Enable reference always ON for AC: enabled */
     ec2:	85 e8       	ldi	r24, 0x85	; 133
     ec4:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
	             | VREF_REFSEL_VDD_gc; /* VDD as reference */

	return 0;
}
     ec8:	80 e0       	ldi	r24, 0x00	; 0
     eca:	08 95       	ret

00000ecc <ZCD_RISING_init>:
 * \return Initialization status.
 */
int8_t ZCD_RISING_init()
{

	ZCD0.CTRLA = 1 << ZCD_ENABLE_bp     /* Setting: enabled */
     ecc:	81 e4       	ldi	r24, 0x41	; 65
     ece:	80 93 c0 06 	sts	0x06C0, r24	; 0x8006c0 <__TEXT_REGION_LENGTH__+0x7e06c0>
	             | 0 << ZCD_INVERT_bp;  /* Setting: disabled */

	// ZCD0.INTCTRL = ZCD_INTMODE_NONE_gc; /* No interrupt */

	return 0;
}
     ed2:	80 e0       	ldi	r24, 0x00	; 0
     ed4:	08 95       	ret

00000ed6 <ZCD_FALLING_init>:
 * \return Initialization status.
 */
int8_t ZCD_FALLING_init()
{

	ZCD1.CTRLA = 1 << ZCD_ENABLE_bp     /* Setting: enabled */
     ed6:	89 e4       	ldi	r24, 0x49	; 73
     ed8:	80 93 c8 06 	sts	0x06C8, r24	; 0x8006c8 <__TEXT_REGION_LENGTH__+0x7e06c8>
	             | 1 << ZCD_INVERT_bp;  /* Setting: enabled */

	// ZCD1.INTCTRL = ZCD_INTMODE_NONE_gc; /* No interrupt */

	return 0;
}
     edc:	80 e0       	ldi	r24, 0x00	; 0
     ede:	08 95       	ret

00000ee0 <BOD_init>:
int8_t BOD_init()
{

	// ccp_write_io((void*)&(BOD.CTRLA),BOD_SLEEP_DIS_gc /* Disabled */);

	BOD.INTCTRL = 0 << BOD_VLMIE_bp        /* voltage level monitor interrrupt enable: disabled */
     ee0:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
	              | BOD_VLMCFG_FALLING_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
     ee4:	80 e0       	ldi	r24, 0x00	; 0
     ee6:	08 95       	ret

00000ee8 <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
     ee8:	41 e8       	ldi	r20, 0x81	; 129
     eea:	68 ed       	ldi	r22, 0xD8	; 216
     eec:	80 e7       	ldi	r24, 0x70	; 112
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	0e 94 84 07 	call	0xf08	; 0xf08 <protected_write_io>
     ef4:	44 e2       	ldi	r20, 0x24	; 36
     ef6:	68 ed       	ldi	r22, 0xD8	; 216
     ef8:	88 e6       	ldi	r24, 0x68	; 104
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	0e 94 84 07 	call	0xf08	; 0xf08 <protected_write_io>
	/* wait for PLL to start 
	while (!(CLKCTRL.MCLKSTATUS & CLKCTRL_PLLS_bm))
		;*/

	return 0;
}
     f00:	80 e0       	ldi	r24, 0x00	; 0
     f02:	08 95       	ret

00000f04 <CPUINT_init>:
	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
}
     f04:	80 e0       	ldi	r24, 0x00	; 0
     f06:	08 95       	ret

00000f08 <protected_write_io>:
	PUBLIC_FUNCTION(protected_write_io)

#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
     f08:	1b be       	out	0x3b, r1	; 59
#endif
	movw    r30, r24                // Load addr into Z
     f0a:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
     f0c:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
     f0e:	40 83       	st	Z, r20
	ret                             // Return to caller
     f10:	08 95       	ret

00000f12 <__divmodsi4>:
     f12:	05 2e       	mov	r0, r21
     f14:	97 fb       	bst	r25, 7
     f16:	1e f4       	brtc	.+6      	; 0xf1e <__divmodsi4+0xc>
     f18:	00 94       	com	r0
     f1a:	0e 94 a0 07 	call	0xf40	; 0xf40 <__negsi2>
     f1e:	57 fd       	sbrc	r21, 7
     f20:	07 d0       	rcall	.+14     	; 0xf30 <__divmodsi4_neg2>
     f22:	0e 94 a8 07 	call	0xf50	; 0xf50 <__udivmodsi4>
     f26:	07 fc       	sbrc	r0, 7
     f28:	03 d0       	rcall	.+6      	; 0xf30 <__divmodsi4_neg2>
     f2a:	4e f4       	brtc	.+18     	; 0xf3e <__divmodsi4_exit>
     f2c:	0c 94 a0 07 	jmp	0xf40	; 0xf40 <__negsi2>

00000f30 <__divmodsi4_neg2>:
     f30:	50 95       	com	r21
     f32:	40 95       	com	r20
     f34:	30 95       	com	r19
     f36:	21 95       	neg	r18
     f38:	3f 4f       	sbci	r19, 0xFF	; 255
     f3a:	4f 4f       	sbci	r20, 0xFF	; 255
     f3c:	5f 4f       	sbci	r21, 0xFF	; 255

00000f3e <__divmodsi4_exit>:
     f3e:	08 95       	ret

00000f40 <__negsi2>:
     f40:	90 95       	com	r25
     f42:	80 95       	com	r24
     f44:	70 95       	com	r23
     f46:	61 95       	neg	r22
     f48:	7f 4f       	sbci	r23, 0xFF	; 255
     f4a:	8f 4f       	sbci	r24, 0xFF	; 255
     f4c:	9f 4f       	sbci	r25, 0xFF	; 255
     f4e:	08 95       	ret

00000f50 <__udivmodsi4>:
     f50:	a1 e2       	ldi	r26, 0x21	; 33
     f52:	1a 2e       	mov	r1, r26
     f54:	aa 1b       	sub	r26, r26
     f56:	bb 1b       	sub	r27, r27
     f58:	fd 01       	movw	r30, r26
     f5a:	0d c0       	rjmp	.+26     	; 0xf76 <__udivmodsi4_ep>

00000f5c <__udivmodsi4_loop>:
     f5c:	aa 1f       	adc	r26, r26
     f5e:	bb 1f       	adc	r27, r27
     f60:	ee 1f       	adc	r30, r30
     f62:	ff 1f       	adc	r31, r31
     f64:	a2 17       	cp	r26, r18
     f66:	b3 07       	cpc	r27, r19
     f68:	e4 07       	cpc	r30, r20
     f6a:	f5 07       	cpc	r31, r21
     f6c:	20 f0       	brcs	.+8      	; 0xf76 <__udivmodsi4_ep>
     f6e:	a2 1b       	sub	r26, r18
     f70:	b3 0b       	sbc	r27, r19
     f72:	e4 0b       	sbc	r30, r20
     f74:	f5 0b       	sbc	r31, r21

00000f76 <__udivmodsi4_ep>:
     f76:	66 1f       	adc	r22, r22
     f78:	77 1f       	adc	r23, r23
     f7a:	88 1f       	adc	r24, r24
     f7c:	99 1f       	adc	r25, r25
     f7e:	1a 94       	dec	r1
     f80:	69 f7       	brne	.-38     	; 0xf5c <__udivmodsi4_loop>
     f82:	60 95       	com	r22
     f84:	70 95       	com	r23
     f86:	80 95       	com	r24
     f88:	90 95       	com	r25
     f8a:	9b 01       	movw	r18, r22
     f8c:	ac 01       	movw	r20, r24
     f8e:	bd 01       	movw	r22, r26
     f90:	cf 01       	movw	r24, r30
     f92:	08 95       	ret

00000f94 <__tablejump2__>:
     f94:	ee 0f       	add	r30, r30
     f96:	ff 1f       	adc	r31, r31
     f98:	00 24       	eor	r0, r0
     f9a:	00 1c       	adc	r0, r0
     f9c:	0b be       	out	0x3b, r0	; 59
     f9e:	07 90       	elpm	r0, Z+
     fa0:	f6 91       	elpm	r31, Z
     fa2:	e0 2d       	mov	r30, r0
     fa4:	09 94       	ijmp

00000fa6 <printf>:
     fa6:	cf 93       	push	r28
     fa8:	df 93       	push	r29
     faa:	cd b7       	in	r28, 0x3d	; 61
     fac:	de b7       	in	r29, 0x3e	; 62
     fae:	ae 01       	movw	r20, r28
     fb0:	4b 5f       	subi	r20, 0xFB	; 251
     fb2:	5f 4f       	sbci	r21, 0xFF	; 255
     fb4:	fa 01       	movw	r30, r20
     fb6:	61 91       	ld	r22, Z+
     fb8:	71 91       	ld	r23, Z+
     fba:	af 01       	movw	r20, r30
     fbc:	80 91 5a 40 	lds	r24, 0x405A	; 0x80405a <__iob+0x2>
     fc0:	90 91 5b 40 	lds	r25, 0x405B	; 0x80405b <__iob+0x3>
     fc4:	0e 94 e7 07 	call	0xfce	; 0xfce <vfprintf>
     fc8:	df 91       	pop	r29
     fca:	cf 91       	pop	r28
     fcc:	08 95       	ret

00000fce <vfprintf>:
     fce:	2f 92       	push	r2
     fd0:	3f 92       	push	r3
     fd2:	4f 92       	push	r4
     fd4:	5f 92       	push	r5
     fd6:	6f 92       	push	r6
     fd8:	7f 92       	push	r7
     fda:	8f 92       	push	r8
     fdc:	9f 92       	push	r9
     fde:	af 92       	push	r10
     fe0:	bf 92       	push	r11
     fe2:	cf 92       	push	r12
     fe4:	df 92       	push	r13
     fe6:	ef 92       	push	r14
     fe8:	ff 92       	push	r15
     fea:	0f 93       	push	r16
     fec:	1f 93       	push	r17
     fee:	cf 93       	push	r28
     ff0:	df 93       	push	r29
     ff2:	cd b7       	in	r28, 0x3d	; 61
     ff4:	de b7       	in	r29, 0x3e	; 62
     ff6:	2b 97       	sbiw	r28, 0x0b	; 11
     ff8:	cd bf       	out	0x3d, r28	; 61
     ffa:	de bf       	out	0x3e, r29	; 62
     ffc:	6c 01       	movw	r12, r24
     ffe:	7b 01       	movw	r14, r22
    1000:	8a 01       	movw	r16, r20
    1002:	fc 01       	movw	r30, r24
    1004:	16 82       	std	Z+6, r1	; 0x06
    1006:	17 82       	std	Z+7, r1	; 0x07
    1008:	83 81       	ldd	r24, Z+3	; 0x03
    100a:	81 ff       	sbrs	r24, 1
    100c:	cc c1       	rjmp	.+920    	; 0x13a6 <vfprintf+0x3d8>
    100e:	ce 01       	movw	r24, r28
    1010:	01 96       	adiw	r24, 0x01	; 1
    1012:	3c 01       	movw	r6, r24
    1014:	f6 01       	movw	r30, r12
    1016:	93 81       	ldd	r25, Z+3	; 0x03
    1018:	f7 01       	movw	r30, r14
    101a:	93 fd       	sbrc	r25, 3
    101c:	85 91       	lpm	r24, Z+
    101e:	93 ff       	sbrs	r25, 3
    1020:	81 91       	ld	r24, Z+
    1022:	7f 01       	movw	r14, r30
    1024:	88 23       	and	r24, r24
    1026:	09 f4       	brne	.+2      	; 0x102a <vfprintf+0x5c>
    1028:	ba c1       	rjmp	.+884    	; 0x139e <vfprintf+0x3d0>
    102a:	85 32       	cpi	r24, 0x25	; 37
    102c:	39 f4       	brne	.+14     	; 0x103c <vfprintf+0x6e>
    102e:	93 fd       	sbrc	r25, 3
    1030:	85 91       	lpm	r24, Z+
    1032:	93 ff       	sbrs	r25, 3
    1034:	81 91       	ld	r24, Z+
    1036:	7f 01       	movw	r14, r30
    1038:	85 32       	cpi	r24, 0x25	; 37
    103a:	29 f4       	brne	.+10     	; 0x1046 <vfprintf+0x78>
    103c:	b6 01       	movw	r22, r12
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	0e 94 01 0a 	call	0x1402	; 0x1402 <fputc>
    1044:	e7 cf       	rjmp	.-50     	; 0x1014 <vfprintf+0x46>
    1046:	91 2c       	mov	r9, r1
    1048:	21 2c       	mov	r2, r1
    104a:	31 2c       	mov	r3, r1
    104c:	ff e1       	ldi	r31, 0x1F	; 31
    104e:	f3 15       	cp	r31, r3
    1050:	d8 f0       	brcs	.+54     	; 0x1088 <vfprintf+0xba>
    1052:	8b 32       	cpi	r24, 0x2B	; 43
    1054:	79 f0       	breq	.+30     	; 0x1074 <vfprintf+0xa6>
    1056:	38 f4       	brcc	.+14     	; 0x1066 <vfprintf+0x98>
    1058:	80 32       	cpi	r24, 0x20	; 32
    105a:	79 f0       	breq	.+30     	; 0x107a <vfprintf+0xac>
    105c:	83 32       	cpi	r24, 0x23	; 35
    105e:	a1 f4       	brne	.+40     	; 0x1088 <vfprintf+0xba>
    1060:	23 2d       	mov	r18, r3
    1062:	20 61       	ori	r18, 0x10	; 16
    1064:	1d c0       	rjmp	.+58     	; 0x10a0 <vfprintf+0xd2>
    1066:	8d 32       	cpi	r24, 0x2D	; 45
    1068:	61 f0       	breq	.+24     	; 0x1082 <vfprintf+0xb4>
    106a:	80 33       	cpi	r24, 0x30	; 48
    106c:	69 f4       	brne	.+26     	; 0x1088 <vfprintf+0xba>
    106e:	23 2d       	mov	r18, r3
    1070:	21 60       	ori	r18, 0x01	; 1
    1072:	16 c0       	rjmp	.+44     	; 0x10a0 <vfprintf+0xd2>
    1074:	83 2d       	mov	r24, r3
    1076:	82 60       	ori	r24, 0x02	; 2
    1078:	38 2e       	mov	r3, r24
    107a:	e3 2d       	mov	r30, r3
    107c:	e4 60       	ori	r30, 0x04	; 4
    107e:	3e 2e       	mov	r3, r30
    1080:	2a c0       	rjmp	.+84     	; 0x10d6 <vfprintf+0x108>
    1082:	f3 2d       	mov	r31, r3
    1084:	f8 60       	ori	r31, 0x08	; 8
    1086:	1d c0       	rjmp	.+58     	; 0x10c2 <vfprintf+0xf4>
    1088:	37 fc       	sbrc	r3, 7
    108a:	2d c0       	rjmp	.+90     	; 0x10e6 <vfprintf+0x118>
    108c:	20 ed       	ldi	r18, 0xD0	; 208
    108e:	28 0f       	add	r18, r24
    1090:	2a 30       	cpi	r18, 0x0A	; 10
    1092:	40 f0       	brcs	.+16     	; 0x10a4 <vfprintf+0xd6>
    1094:	8e 32       	cpi	r24, 0x2E	; 46
    1096:	b9 f4       	brne	.+46     	; 0x10c6 <vfprintf+0xf8>
    1098:	36 fc       	sbrc	r3, 6
    109a:	81 c1       	rjmp	.+770    	; 0x139e <vfprintf+0x3d0>
    109c:	23 2d       	mov	r18, r3
    109e:	20 64       	ori	r18, 0x40	; 64
    10a0:	32 2e       	mov	r3, r18
    10a2:	19 c0       	rjmp	.+50     	; 0x10d6 <vfprintf+0x108>
    10a4:	36 fe       	sbrs	r3, 6
    10a6:	06 c0       	rjmp	.+12     	; 0x10b4 <vfprintf+0xe6>
    10a8:	8a e0       	ldi	r24, 0x0A	; 10
    10aa:	98 9e       	mul	r9, r24
    10ac:	20 0d       	add	r18, r0
    10ae:	11 24       	eor	r1, r1
    10b0:	92 2e       	mov	r9, r18
    10b2:	11 c0       	rjmp	.+34     	; 0x10d6 <vfprintf+0x108>
    10b4:	ea e0       	ldi	r30, 0x0A	; 10
    10b6:	2e 9e       	mul	r2, r30
    10b8:	20 0d       	add	r18, r0
    10ba:	11 24       	eor	r1, r1
    10bc:	22 2e       	mov	r2, r18
    10be:	f3 2d       	mov	r31, r3
    10c0:	f0 62       	ori	r31, 0x20	; 32
    10c2:	3f 2e       	mov	r3, r31
    10c4:	08 c0       	rjmp	.+16     	; 0x10d6 <vfprintf+0x108>
    10c6:	8c 36       	cpi	r24, 0x6C	; 108
    10c8:	21 f4       	brne	.+8      	; 0x10d2 <vfprintf+0x104>
    10ca:	83 2d       	mov	r24, r3
    10cc:	80 68       	ori	r24, 0x80	; 128
    10ce:	38 2e       	mov	r3, r24
    10d0:	02 c0       	rjmp	.+4      	; 0x10d6 <vfprintf+0x108>
    10d2:	88 36       	cpi	r24, 0x68	; 104
    10d4:	41 f4       	brne	.+16     	; 0x10e6 <vfprintf+0x118>
    10d6:	f7 01       	movw	r30, r14
    10d8:	93 fd       	sbrc	r25, 3
    10da:	85 91       	lpm	r24, Z+
    10dc:	93 ff       	sbrs	r25, 3
    10de:	81 91       	ld	r24, Z+
    10e0:	7f 01       	movw	r14, r30
    10e2:	81 11       	cpse	r24, r1
    10e4:	b3 cf       	rjmp	.-154    	; 0x104c <vfprintf+0x7e>
    10e6:	98 2f       	mov	r25, r24
    10e8:	9f 7d       	andi	r25, 0xDF	; 223
    10ea:	95 54       	subi	r25, 0x45	; 69
    10ec:	93 30       	cpi	r25, 0x03	; 3
    10ee:	28 f4       	brcc	.+10     	; 0x10fa <vfprintf+0x12c>
    10f0:	0c 5f       	subi	r16, 0xFC	; 252
    10f2:	1f 4f       	sbci	r17, 0xFF	; 255
    10f4:	9f e3       	ldi	r25, 0x3F	; 63
    10f6:	99 83       	std	Y+1, r25	; 0x01
    10f8:	0d c0       	rjmp	.+26     	; 0x1114 <vfprintf+0x146>
    10fa:	83 36       	cpi	r24, 0x63	; 99
    10fc:	31 f0       	breq	.+12     	; 0x110a <vfprintf+0x13c>
    10fe:	83 37       	cpi	r24, 0x73	; 115
    1100:	71 f0       	breq	.+28     	; 0x111e <vfprintf+0x150>
    1102:	83 35       	cpi	r24, 0x53	; 83
    1104:	09 f0       	breq	.+2      	; 0x1108 <vfprintf+0x13a>
    1106:	59 c0       	rjmp	.+178    	; 0x11ba <vfprintf+0x1ec>
    1108:	21 c0       	rjmp	.+66     	; 0x114c <vfprintf+0x17e>
    110a:	f8 01       	movw	r30, r16
    110c:	80 81       	ld	r24, Z
    110e:	89 83       	std	Y+1, r24	; 0x01
    1110:	0e 5f       	subi	r16, 0xFE	; 254
    1112:	1f 4f       	sbci	r17, 0xFF	; 255
    1114:	88 24       	eor	r8, r8
    1116:	83 94       	inc	r8
    1118:	91 2c       	mov	r9, r1
    111a:	53 01       	movw	r10, r6
    111c:	13 c0       	rjmp	.+38     	; 0x1144 <vfprintf+0x176>
    111e:	28 01       	movw	r4, r16
    1120:	f2 e0       	ldi	r31, 0x02	; 2
    1122:	4f 0e       	add	r4, r31
    1124:	51 1c       	adc	r5, r1
    1126:	f8 01       	movw	r30, r16
    1128:	a0 80       	ld	r10, Z
    112a:	b1 80       	ldd	r11, Z+1	; 0x01
    112c:	36 fe       	sbrs	r3, 6
    112e:	03 c0       	rjmp	.+6      	; 0x1136 <vfprintf+0x168>
    1130:	69 2d       	mov	r22, r9
    1132:	70 e0       	ldi	r23, 0x00	; 0
    1134:	02 c0       	rjmp	.+4      	; 0x113a <vfprintf+0x16c>
    1136:	6f ef       	ldi	r22, 0xFF	; 255
    1138:	7f ef       	ldi	r23, 0xFF	; 255
    113a:	c5 01       	movw	r24, r10
    113c:	0e 94 f6 09 	call	0x13ec	; 0x13ec <strnlen>
    1140:	4c 01       	movw	r8, r24
    1142:	82 01       	movw	r16, r4
    1144:	f3 2d       	mov	r31, r3
    1146:	ff 77       	andi	r31, 0x7F	; 127
    1148:	3f 2e       	mov	r3, r31
    114a:	16 c0       	rjmp	.+44     	; 0x1178 <vfprintf+0x1aa>
    114c:	28 01       	movw	r4, r16
    114e:	22 e0       	ldi	r18, 0x02	; 2
    1150:	42 0e       	add	r4, r18
    1152:	51 1c       	adc	r5, r1
    1154:	f8 01       	movw	r30, r16
    1156:	a0 80       	ld	r10, Z
    1158:	b1 80       	ldd	r11, Z+1	; 0x01
    115a:	36 fe       	sbrs	r3, 6
    115c:	03 c0       	rjmp	.+6      	; 0x1164 <vfprintf+0x196>
    115e:	69 2d       	mov	r22, r9
    1160:	70 e0       	ldi	r23, 0x00	; 0
    1162:	02 c0       	rjmp	.+4      	; 0x1168 <vfprintf+0x19a>
    1164:	6f ef       	ldi	r22, 0xFF	; 255
    1166:	7f ef       	ldi	r23, 0xFF	; 255
    1168:	c5 01       	movw	r24, r10
    116a:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <strnlen_P>
    116e:	4c 01       	movw	r8, r24
    1170:	f3 2d       	mov	r31, r3
    1172:	f0 68       	ori	r31, 0x80	; 128
    1174:	3f 2e       	mov	r3, r31
    1176:	82 01       	movw	r16, r4
    1178:	33 fc       	sbrc	r3, 3
    117a:	1b c0       	rjmp	.+54     	; 0x11b2 <vfprintf+0x1e4>
    117c:	82 2d       	mov	r24, r2
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	88 16       	cp	r8, r24
    1182:	99 06       	cpc	r9, r25
    1184:	b0 f4       	brcc	.+44     	; 0x11b2 <vfprintf+0x1e4>
    1186:	b6 01       	movw	r22, r12
    1188:	80 e2       	ldi	r24, 0x20	; 32
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	0e 94 01 0a 	call	0x1402	; 0x1402 <fputc>
    1190:	2a 94       	dec	r2
    1192:	f4 cf       	rjmp	.-24     	; 0x117c <vfprintf+0x1ae>
    1194:	f5 01       	movw	r30, r10
    1196:	37 fc       	sbrc	r3, 7
    1198:	85 91       	lpm	r24, Z+
    119a:	37 fe       	sbrs	r3, 7
    119c:	81 91       	ld	r24, Z+
    119e:	5f 01       	movw	r10, r30
    11a0:	b6 01       	movw	r22, r12
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	0e 94 01 0a 	call	0x1402	; 0x1402 <fputc>
    11a8:	21 10       	cpse	r2, r1
    11aa:	2a 94       	dec	r2
    11ac:	21 e0       	ldi	r18, 0x01	; 1
    11ae:	82 1a       	sub	r8, r18
    11b0:	91 08       	sbc	r9, r1
    11b2:	81 14       	cp	r8, r1
    11b4:	91 04       	cpc	r9, r1
    11b6:	71 f7       	brne	.-36     	; 0x1194 <vfprintf+0x1c6>
    11b8:	e8 c0       	rjmp	.+464    	; 0x138a <vfprintf+0x3bc>
    11ba:	84 36       	cpi	r24, 0x64	; 100
    11bc:	11 f0       	breq	.+4      	; 0x11c2 <vfprintf+0x1f4>
    11be:	89 36       	cpi	r24, 0x69	; 105
    11c0:	41 f5       	brne	.+80     	; 0x1212 <vfprintf+0x244>
    11c2:	f8 01       	movw	r30, r16
    11c4:	37 fe       	sbrs	r3, 7
    11c6:	07 c0       	rjmp	.+14     	; 0x11d6 <vfprintf+0x208>
    11c8:	60 81       	ld	r22, Z
    11ca:	71 81       	ldd	r23, Z+1	; 0x01
    11cc:	82 81       	ldd	r24, Z+2	; 0x02
    11ce:	93 81       	ldd	r25, Z+3	; 0x03
    11d0:	0c 5f       	subi	r16, 0xFC	; 252
    11d2:	1f 4f       	sbci	r17, 0xFF	; 255
    11d4:	08 c0       	rjmp	.+16     	; 0x11e6 <vfprintf+0x218>
    11d6:	60 81       	ld	r22, Z
    11d8:	71 81       	ldd	r23, Z+1	; 0x01
    11da:	07 2e       	mov	r0, r23
    11dc:	00 0c       	add	r0, r0
    11de:	88 0b       	sbc	r24, r24
    11e0:	99 0b       	sbc	r25, r25
    11e2:	0e 5f       	subi	r16, 0xFE	; 254
    11e4:	1f 4f       	sbci	r17, 0xFF	; 255
    11e6:	f3 2d       	mov	r31, r3
    11e8:	ff 76       	andi	r31, 0x6F	; 111
    11ea:	3f 2e       	mov	r3, r31
    11ec:	97 ff       	sbrs	r25, 7
    11ee:	09 c0       	rjmp	.+18     	; 0x1202 <vfprintf+0x234>
    11f0:	90 95       	com	r25
    11f2:	80 95       	com	r24
    11f4:	70 95       	com	r23
    11f6:	61 95       	neg	r22
    11f8:	7f 4f       	sbci	r23, 0xFF	; 255
    11fa:	8f 4f       	sbci	r24, 0xFF	; 255
    11fc:	9f 4f       	sbci	r25, 0xFF	; 255
    11fe:	f0 68       	ori	r31, 0x80	; 128
    1200:	3f 2e       	mov	r3, r31
    1202:	2a e0       	ldi	r18, 0x0A	; 10
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	a3 01       	movw	r20, r6
    1208:	0e 94 3d 0a 	call	0x147a	; 0x147a <__ultoa_invert>
    120c:	88 2e       	mov	r8, r24
    120e:	86 18       	sub	r8, r6
    1210:	45 c0       	rjmp	.+138    	; 0x129c <vfprintf+0x2ce>
    1212:	85 37       	cpi	r24, 0x75	; 117
    1214:	31 f4       	brne	.+12     	; 0x1222 <vfprintf+0x254>
    1216:	23 2d       	mov	r18, r3
    1218:	2f 7e       	andi	r18, 0xEF	; 239
    121a:	b2 2e       	mov	r11, r18
    121c:	2a e0       	ldi	r18, 0x0A	; 10
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	25 c0       	rjmp	.+74     	; 0x126c <vfprintf+0x29e>
    1222:	93 2d       	mov	r25, r3
    1224:	99 7f       	andi	r25, 0xF9	; 249
    1226:	b9 2e       	mov	r11, r25
    1228:	8f 36       	cpi	r24, 0x6F	; 111
    122a:	c1 f0       	breq	.+48     	; 0x125c <vfprintf+0x28e>
    122c:	18 f4       	brcc	.+6      	; 0x1234 <vfprintf+0x266>
    122e:	88 35       	cpi	r24, 0x58	; 88
    1230:	79 f0       	breq	.+30     	; 0x1250 <vfprintf+0x282>
    1232:	b5 c0       	rjmp	.+362    	; 0x139e <vfprintf+0x3d0>
    1234:	80 37       	cpi	r24, 0x70	; 112
    1236:	19 f0       	breq	.+6      	; 0x123e <vfprintf+0x270>
    1238:	88 37       	cpi	r24, 0x78	; 120
    123a:	21 f0       	breq	.+8      	; 0x1244 <vfprintf+0x276>
    123c:	b0 c0       	rjmp	.+352    	; 0x139e <vfprintf+0x3d0>
    123e:	e9 2f       	mov	r30, r25
    1240:	e0 61       	ori	r30, 0x10	; 16
    1242:	be 2e       	mov	r11, r30
    1244:	b4 fe       	sbrs	r11, 4
    1246:	0d c0       	rjmp	.+26     	; 0x1262 <vfprintf+0x294>
    1248:	fb 2d       	mov	r31, r11
    124a:	f4 60       	ori	r31, 0x04	; 4
    124c:	bf 2e       	mov	r11, r31
    124e:	09 c0       	rjmp	.+18     	; 0x1262 <vfprintf+0x294>
    1250:	34 fe       	sbrs	r3, 4
    1252:	0a c0       	rjmp	.+20     	; 0x1268 <vfprintf+0x29a>
    1254:	29 2f       	mov	r18, r25
    1256:	26 60       	ori	r18, 0x06	; 6
    1258:	b2 2e       	mov	r11, r18
    125a:	06 c0       	rjmp	.+12     	; 0x1268 <vfprintf+0x29a>
    125c:	28 e0       	ldi	r18, 0x08	; 8
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	05 c0       	rjmp	.+10     	; 0x126c <vfprintf+0x29e>
    1262:	20 e1       	ldi	r18, 0x10	; 16
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	02 c0       	rjmp	.+4      	; 0x126c <vfprintf+0x29e>
    1268:	20 e1       	ldi	r18, 0x10	; 16
    126a:	32 e0       	ldi	r19, 0x02	; 2
    126c:	f8 01       	movw	r30, r16
    126e:	b7 fe       	sbrs	r11, 7
    1270:	07 c0       	rjmp	.+14     	; 0x1280 <vfprintf+0x2b2>
    1272:	60 81       	ld	r22, Z
    1274:	71 81       	ldd	r23, Z+1	; 0x01
    1276:	82 81       	ldd	r24, Z+2	; 0x02
    1278:	93 81       	ldd	r25, Z+3	; 0x03
    127a:	0c 5f       	subi	r16, 0xFC	; 252
    127c:	1f 4f       	sbci	r17, 0xFF	; 255
    127e:	06 c0       	rjmp	.+12     	; 0x128c <vfprintf+0x2be>
    1280:	60 81       	ld	r22, Z
    1282:	71 81       	ldd	r23, Z+1	; 0x01
    1284:	80 e0       	ldi	r24, 0x00	; 0
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	0e 5f       	subi	r16, 0xFE	; 254
    128a:	1f 4f       	sbci	r17, 0xFF	; 255
    128c:	a3 01       	movw	r20, r6
    128e:	0e 94 3d 0a 	call	0x147a	; 0x147a <__ultoa_invert>
    1292:	88 2e       	mov	r8, r24
    1294:	86 18       	sub	r8, r6
    1296:	fb 2d       	mov	r31, r11
    1298:	ff 77       	andi	r31, 0x7F	; 127
    129a:	3f 2e       	mov	r3, r31
    129c:	36 fe       	sbrs	r3, 6
    129e:	0d c0       	rjmp	.+26     	; 0x12ba <vfprintf+0x2ec>
    12a0:	23 2d       	mov	r18, r3
    12a2:	2e 7f       	andi	r18, 0xFE	; 254
    12a4:	a2 2e       	mov	r10, r18
    12a6:	89 14       	cp	r8, r9
    12a8:	58 f4       	brcc	.+22     	; 0x12c0 <vfprintf+0x2f2>
    12aa:	34 fe       	sbrs	r3, 4
    12ac:	0b c0       	rjmp	.+22     	; 0x12c4 <vfprintf+0x2f6>
    12ae:	32 fc       	sbrc	r3, 2
    12b0:	09 c0       	rjmp	.+18     	; 0x12c4 <vfprintf+0x2f6>
    12b2:	83 2d       	mov	r24, r3
    12b4:	8e 7e       	andi	r24, 0xEE	; 238
    12b6:	a8 2e       	mov	r10, r24
    12b8:	05 c0       	rjmp	.+10     	; 0x12c4 <vfprintf+0x2f6>
    12ba:	b8 2c       	mov	r11, r8
    12bc:	a3 2c       	mov	r10, r3
    12be:	03 c0       	rjmp	.+6      	; 0x12c6 <vfprintf+0x2f8>
    12c0:	b8 2c       	mov	r11, r8
    12c2:	01 c0       	rjmp	.+2      	; 0x12c6 <vfprintf+0x2f8>
    12c4:	b9 2c       	mov	r11, r9
    12c6:	a4 fe       	sbrs	r10, 4
    12c8:	0f c0       	rjmp	.+30     	; 0x12e8 <vfprintf+0x31a>
    12ca:	fe 01       	movw	r30, r28
    12cc:	e8 0d       	add	r30, r8
    12ce:	f1 1d       	adc	r31, r1
    12d0:	80 81       	ld	r24, Z
    12d2:	80 33       	cpi	r24, 0x30	; 48
    12d4:	21 f4       	brne	.+8      	; 0x12de <vfprintf+0x310>
    12d6:	9a 2d       	mov	r25, r10
    12d8:	99 7e       	andi	r25, 0xE9	; 233
    12da:	a9 2e       	mov	r10, r25
    12dc:	09 c0       	rjmp	.+18     	; 0x12f0 <vfprintf+0x322>
    12de:	a2 fe       	sbrs	r10, 2
    12e0:	06 c0       	rjmp	.+12     	; 0x12ee <vfprintf+0x320>
    12e2:	b3 94       	inc	r11
    12e4:	b3 94       	inc	r11
    12e6:	04 c0       	rjmp	.+8      	; 0x12f0 <vfprintf+0x322>
    12e8:	8a 2d       	mov	r24, r10
    12ea:	86 78       	andi	r24, 0x86	; 134
    12ec:	09 f0       	breq	.+2      	; 0x12f0 <vfprintf+0x322>
    12ee:	b3 94       	inc	r11
    12f0:	a3 fc       	sbrc	r10, 3
    12f2:	11 c0       	rjmp	.+34     	; 0x1316 <vfprintf+0x348>
    12f4:	a0 fe       	sbrs	r10, 0
    12f6:	06 c0       	rjmp	.+12     	; 0x1304 <vfprintf+0x336>
    12f8:	b2 14       	cp	r11, r2
    12fa:	88 f4       	brcc	.+34     	; 0x131e <vfprintf+0x350>
    12fc:	28 0c       	add	r2, r8
    12fe:	92 2c       	mov	r9, r2
    1300:	9b 18       	sub	r9, r11
    1302:	0e c0       	rjmp	.+28     	; 0x1320 <vfprintf+0x352>
    1304:	b2 14       	cp	r11, r2
    1306:	60 f4       	brcc	.+24     	; 0x1320 <vfprintf+0x352>
    1308:	b6 01       	movw	r22, r12
    130a:	80 e2       	ldi	r24, 0x20	; 32
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	0e 94 01 0a 	call	0x1402	; 0x1402 <fputc>
    1312:	b3 94       	inc	r11
    1314:	f7 cf       	rjmp	.-18     	; 0x1304 <vfprintf+0x336>
    1316:	b2 14       	cp	r11, r2
    1318:	18 f4       	brcc	.+6      	; 0x1320 <vfprintf+0x352>
    131a:	2b 18       	sub	r2, r11
    131c:	02 c0       	rjmp	.+4      	; 0x1322 <vfprintf+0x354>
    131e:	98 2c       	mov	r9, r8
    1320:	21 2c       	mov	r2, r1
    1322:	a4 fe       	sbrs	r10, 4
    1324:	10 c0       	rjmp	.+32     	; 0x1346 <vfprintf+0x378>
    1326:	b6 01       	movw	r22, r12
    1328:	80 e3       	ldi	r24, 0x30	; 48
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	0e 94 01 0a 	call	0x1402	; 0x1402 <fputc>
    1330:	a2 fe       	sbrs	r10, 2
    1332:	17 c0       	rjmp	.+46     	; 0x1362 <vfprintf+0x394>
    1334:	a1 fc       	sbrc	r10, 1
    1336:	03 c0       	rjmp	.+6      	; 0x133e <vfprintf+0x370>
    1338:	88 e7       	ldi	r24, 0x78	; 120
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	02 c0       	rjmp	.+4      	; 0x1342 <vfprintf+0x374>
    133e:	88 e5       	ldi	r24, 0x58	; 88
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	b6 01       	movw	r22, r12
    1344:	0c c0       	rjmp	.+24     	; 0x135e <vfprintf+0x390>
    1346:	8a 2d       	mov	r24, r10
    1348:	86 78       	andi	r24, 0x86	; 134
    134a:	59 f0       	breq	.+22     	; 0x1362 <vfprintf+0x394>
    134c:	a1 fe       	sbrs	r10, 1
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <vfprintf+0x386>
    1350:	8b e2       	ldi	r24, 0x2B	; 43
    1352:	01 c0       	rjmp	.+2      	; 0x1356 <vfprintf+0x388>
    1354:	80 e2       	ldi	r24, 0x20	; 32
    1356:	a7 fc       	sbrc	r10, 7
    1358:	8d e2       	ldi	r24, 0x2D	; 45
    135a:	b6 01       	movw	r22, r12
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	0e 94 01 0a 	call	0x1402	; 0x1402 <fputc>
    1362:	89 14       	cp	r8, r9
    1364:	38 f4       	brcc	.+14     	; 0x1374 <vfprintf+0x3a6>
    1366:	b6 01       	movw	r22, r12
    1368:	80 e3       	ldi	r24, 0x30	; 48
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	0e 94 01 0a 	call	0x1402	; 0x1402 <fputc>
    1370:	9a 94       	dec	r9
    1372:	f7 cf       	rjmp	.-18     	; 0x1362 <vfprintf+0x394>
    1374:	8a 94       	dec	r8
    1376:	f3 01       	movw	r30, r6
    1378:	e8 0d       	add	r30, r8
    137a:	f1 1d       	adc	r31, r1
    137c:	80 81       	ld	r24, Z
    137e:	b6 01       	movw	r22, r12
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	0e 94 01 0a 	call	0x1402	; 0x1402 <fputc>
    1386:	81 10       	cpse	r8, r1
    1388:	f5 cf       	rjmp	.-22     	; 0x1374 <vfprintf+0x3a6>
    138a:	22 20       	and	r2, r2
    138c:	09 f4       	brne	.+2      	; 0x1390 <vfprintf+0x3c2>
    138e:	42 ce       	rjmp	.-892    	; 0x1014 <vfprintf+0x46>
    1390:	b6 01       	movw	r22, r12
    1392:	80 e2       	ldi	r24, 0x20	; 32
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	0e 94 01 0a 	call	0x1402	; 0x1402 <fputc>
    139a:	2a 94       	dec	r2
    139c:	f6 cf       	rjmp	.-20     	; 0x138a <vfprintf+0x3bc>
    139e:	f6 01       	movw	r30, r12
    13a0:	86 81       	ldd	r24, Z+6	; 0x06
    13a2:	97 81       	ldd	r25, Z+7	; 0x07
    13a4:	02 c0       	rjmp	.+4      	; 0x13aa <vfprintf+0x3dc>
    13a6:	8f ef       	ldi	r24, 0xFF	; 255
    13a8:	9f ef       	ldi	r25, 0xFF	; 255
    13aa:	2b 96       	adiw	r28, 0x0b	; 11
    13ac:	cd bf       	out	0x3d, r28	; 61
    13ae:	de bf       	out	0x3e, r29	; 62
    13b0:	df 91       	pop	r29
    13b2:	cf 91       	pop	r28
    13b4:	1f 91       	pop	r17
    13b6:	0f 91       	pop	r16
    13b8:	ff 90       	pop	r15
    13ba:	ef 90       	pop	r14
    13bc:	df 90       	pop	r13
    13be:	cf 90       	pop	r12
    13c0:	bf 90       	pop	r11
    13c2:	af 90       	pop	r10
    13c4:	9f 90       	pop	r9
    13c6:	8f 90       	pop	r8
    13c8:	7f 90       	pop	r7
    13ca:	6f 90       	pop	r6
    13cc:	5f 90       	pop	r5
    13ce:	4f 90       	pop	r4
    13d0:	3f 90       	pop	r3
    13d2:	2f 90       	pop	r2
    13d4:	08 95       	ret

000013d6 <strnlen_P>:
    13d6:	fc 01       	movw	r30, r24
    13d8:	05 90       	lpm	r0, Z+
    13da:	61 50       	subi	r22, 0x01	; 1
    13dc:	70 40       	sbci	r23, 0x00	; 0
    13de:	01 10       	cpse	r0, r1
    13e0:	d8 f7       	brcc	.-10     	; 0x13d8 <strnlen_P+0x2>
    13e2:	80 95       	com	r24
    13e4:	90 95       	com	r25
    13e6:	8e 0f       	add	r24, r30
    13e8:	9f 1f       	adc	r25, r31
    13ea:	08 95       	ret

000013ec <strnlen>:
    13ec:	fc 01       	movw	r30, r24
    13ee:	61 50       	subi	r22, 0x01	; 1
    13f0:	70 40       	sbci	r23, 0x00	; 0
    13f2:	01 90       	ld	r0, Z+
    13f4:	01 10       	cpse	r0, r1
    13f6:	d8 f7       	brcc	.-10     	; 0x13ee <strnlen+0x2>
    13f8:	80 95       	com	r24
    13fa:	90 95       	com	r25
    13fc:	8e 0f       	add	r24, r30
    13fe:	9f 1f       	adc	r25, r31
    1400:	08 95       	ret

00001402 <fputc>:
    1402:	0f 93       	push	r16
    1404:	1f 93       	push	r17
    1406:	cf 93       	push	r28
    1408:	df 93       	push	r29
    140a:	fb 01       	movw	r30, r22
    140c:	23 81       	ldd	r18, Z+3	; 0x03
    140e:	21 fd       	sbrc	r18, 1
    1410:	03 c0       	rjmp	.+6      	; 0x1418 <fputc+0x16>
    1412:	8f ef       	ldi	r24, 0xFF	; 255
    1414:	9f ef       	ldi	r25, 0xFF	; 255
    1416:	2c c0       	rjmp	.+88     	; 0x1470 <fputc+0x6e>
    1418:	22 ff       	sbrs	r18, 2
    141a:	16 c0       	rjmp	.+44     	; 0x1448 <fputc+0x46>
    141c:	46 81       	ldd	r20, Z+6	; 0x06
    141e:	57 81       	ldd	r21, Z+7	; 0x07
    1420:	24 81       	ldd	r18, Z+4	; 0x04
    1422:	35 81       	ldd	r19, Z+5	; 0x05
    1424:	42 17       	cp	r20, r18
    1426:	53 07       	cpc	r21, r19
    1428:	44 f4       	brge	.+16     	; 0x143a <fputc+0x38>
    142a:	a0 81       	ld	r26, Z
    142c:	b1 81       	ldd	r27, Z+1	; 0x01
    142e:	9d 01       	movw	r18, r26
    1430:	2f 5f       	subi	r18, 0xFF	; 255
    1432:	3f 4f       	sbci	r19, 0xFF	; 255
    1434:	20 83       	st	Z, r18
    1436:	31 83       	std	Z+1, r19	; 0x01
    1438:	8c 93       	st	X, r24
    143a:	26 81       	ldd	r18, Z+6	; 0x06
    143c:	37 81       	ldd	r19, Z+7	; 0x07
    143e:	2f 5f       	subi	r18, 0xFF	; 255
    1440:	3f 4f       	sbci	r19, 0xFF	; 255
    1442:	26 83       	std	Z+6, r18	; 0x06
    1444:	37 83       	std	Z+7, r19	; 0x07
    1446:	14 c0       	rjmp	.+40     	; 0x1470 <fputc+0x6e>
    1448:	8b 01       	movw	r16, r22
    144a:	ec 01       	movw	r28, r24
    144c:	fb 01       	movw	r30, r22
    144e:	00 84       	ldd	r0, Z+8	; 0x08
    1450:	f1 85       	ldd	r31, Z+9	; 0x09
    1452:	e0 2d       	mov	r30, r0
    1454:	09 95       	icall
    1456:	89 2b       	or	r24, r25
    1458:	e1 f6       	brne	.-72     	; 0x1412 <fputc+0x10>
    145a:	d8 01       	movw	r26, r16
    145c:	16 96       	adiw	r26, 0x06	; 6
    145e:	8d 91       	ld	r24, X+
    1460:	9c 91       	ld	r25, X
    1462:	17 97       	sbiw	r26, 0x07	; 7
    1464:	01 96       	adiw	r24, 0x01	; 1
    1466:	16 96       	adiw	r26, 0x06	; 6
    1468:	8d 93       	st	X+, r24
    146a:	9c 93       	st	X, r25
    146c:	17 97       	sbiw	r26, 0x07	; 7
    146e:	ce 01       	movw	r24, r28
    1470:	df 91       	pop	r29
    1472:	cf 91       	pop	r28
    1474:	1f 91       	pop	r17
    1476:	0f 91       	pop	r16
    1478:	08 95       	ret

0000147a <__ultoa_invert>:
    147a:	fa 01       	movw	r30, r20
    147c:	aa 27       	eor	r26, r26
    147e:	28 30       	cpi	r18, 0x08	; 8
    1480:	51 f1       	breq	.+84     	; 0x14d6 <__ultoa_invert+0x5c>
    1482:	20 31       	cpi	r18, 0x10	; 16
    1484:	81 f1       	breq	.+96     	; 0x14e6 <__ultoa_invert+0x6c>
    1486:	e8 94       	clt
    1488:	6f 93       	push	r22
    148a:	6e 7f       	andi	r22, 0xFE	; 254
    148c:	6e 5f       	subi	r22, 0xFE	; 254
    148e:	7f 4f       	sbci	r23, 0xFF	; 255
    1490:	8f 4f       	sbci	r24, 0xFF	; 255
    1492:	9f 4f       	sbci	r25, 0xFF	; 255
    1494:	af 4f       	sbci	r26, 0xFF	; 255
    1496:	b1 e0       	ldi	r27, 0x01	; 1
    1498:	3e d0       	rcall	.+124    	; 0x1516 <__ultoa_invert+0x9c>
    149a:	b4 e0       	ldi	r27, 0x04	; 4
    149c:	3c d0       	rcall	.+120    	; 0x1516 <__ultoa_invert+0x9c>
    149e:	67 0f       	add	r22, r23
    14a0:	78 1f       	adc	r23, r24
    14a2:	89 1f       	adc	r24, r25
    14a4:	9a 1f       	adc	r25, r26
    14a6:	a1 1d       	adc	r26, r1
    14a8:	68 0f       	add	r22, r24
    14aa:	79 1f       	adc	r23, r25
    14ac:	8a 1f       	adc	r24, r26
    14ae:	91 1d       	adc	r25, r1
    14b0:	a1 1d       	adc	r26, r1
    14b2:	6a 0f       	add	r22, r26
    14b4:	71 1d       	adc	r23, r1
    14b6:	81 1d       	adc	r24, r1
    14b8:	91 1d       	adc	r25, r1
    14ba:	a1 1d       	adc	r26, r1
    14bc:	20 d0       	rcall	.+64     	; 0x14fe <__ultoa_invert+0x84>
    14be:	09 f4       	brne	.+2      	; 0x14c2 <__ultoa_invert+0x48>
    14c0:	68 94       	set
    14c2:	3f 91       	pop	r19
    14c4:	2a e0       	ldi	r18, 0x0A	; 10
    14c6:	26 9f       	mul	r18, r22
    14c8:	11 24       	eor	r1, r1
    14ca:	30 19       	sub	r19, r0
    14cc:	30 5d       	subi	r19, 0xD0	; 208
    14ce:	31 93       	st	Z+, r19
    14d0:	de f6       	brtc	.-74     	; 0x1488 <__ultoa_invert+0xe>
    14d2:	cf 01       	movw	r24, r30
    14d4:	08 95       	ret
    14d6:	46 2f       	mov	r20, r22
    14d8:	47 70       	andi	r20, 0x07	; 7
    14da:	40 5d       	subi	r20, 0xD0	; 208
    14dc:	41 93       	st	Z+, r20
    14de:	b3 e0       	ldi	r27, 0x03	; 3
    14e0:	0f d0       	rcall	.+30     	; 0x1500 <__ultoa_invert+0x86>
    14e2:	c9 f7       	brne	.-14     	; 0x14d6 <__ultoa_invert+0x5c>
    14e4:	f6 cf       	rjmp	.-20     	; 0x14d2 <__ultoa_invert+0x58>
    14e6:	46 2f       	mov	r20, r22
    14e8:	4f 70       	andi	r20, 0x0F	; 15
    14ea:	40 5d       	subi	r20, 0xD0	; 208
    14ec:	4a 33       	cpi	r20, 0x3A	; 58
    14ee:	18 f0       	brcs	.+6      	; 0x14f6 <__ultoa_invert+0x7c>
    14f0:	49 5d       	subi	r20, 0xD9	; 217
    14f2:	31 fd       	sbrc	r19, 1
    14f4:	40 52       	subi	r20, 0x20	; 32
    14f6:	41 93       	st	Z+, r20
    14f8:	02 d0       	rcall	.+4      	; 0x14fe <__ultoa_invert+0x84>
    14fa:	a9 f7       	brne	.-22     	; 0x14e6 <__ultoa_invert+0x6c>
    14fc:	ea cf       	rjmp	.-44     	; 0x14d2 <__ultoa_invert+0x58>
    14fe:	b4 e0       	ldi	r27, 0x04	; 4
    1500:	a6 95       	lsr	r26
    1502:	97 95       	ror	r25
    1504:	87 95       	ror	r24
    1506:	77 95       	ror	r23
    1508:	67 95       	ror	r22
    150a:	ba 95       	dec	r27
    150c:	c9 f7       	brne	.-14     	; 0x1500 <__ultoa_invert+0x86>
    150e:	00 97       	sbiw	r24, 0x00	; 0
    1510:	61 05       	cpc	r22, r1
    1512:	71 05       	cpc	r23, r1
    1514:	08 95       	ret
    1516:	9b 01       	movw	r18, r22
    1518:	ac 01       	movw	r20, r24
    151a:	0a 2e       	mov	r0, r26
    151c:	06 94       	lsr	r0
    151e:	57 95       	ror	r21
    1520:	47 95       	ror	r20
    1522:	37 95       	ror	r19
    1524:	27 95       	ror	r18
    1526:	ba 95       	dec	r27
    1528:	c9 f7       	brne	.-14     	; 0x151c <__ultoa_invert+0xa2>
    152a:	62 0f       	add	r22, r18
    152c:	73 1f       	adc	r23, r19
    152e:	84 1f       	adc	r24, r20
    1530:	95 1f       	adc	r25, r21
    1532:	a0 1d       	adc	r26, r0
    1534:	08 95       	ret

00001536 <__do_global_dtors>:
    1536:	10 e0       	ldi	r17, 0x00	; 0
    1538:	cb e7       	ldi	r28, 0x7B	; 123
    153a:	d0 e0       	ldi	r29, 0x00	; 0
    153c:	04 c0       	rjmp	.+8      	; 0x1546 <__do_global_dtors+0x10>
    153e:	fe 01       	movw	r30, r28
    1540:	0e 94 ca 07 	call	0xf94	; 0xf94 <__tablejump2__>
    1544:	21 96       	adiw	r28, 0x01	; 1
    1546:	cc 37       	cpi	r28, 0x7C	; 124
    1548:	d1 07       	cpc	r29, r17
    154a:	c9 f7       	brne	.-14     	; 0x153e <__do_global_dtors+0x8>
    154c:	f8 94       	cli

0000154e <__stop_program>:
    154e:	ff cf       	rjmp	.-2      	; 0x154e <__stop_program>
