
dist/test_app/production/Zero_Cross_Detector_lib.X.production.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00804000  0000256e  00002602  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000256e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007f  0080403c  0080403c  0000263e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000263e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000269c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000750  00000000  00000000  000026dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00009146  00000000  00000000  00002e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000449a  00000000  00000000  0000bf72  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003307  00000000  00000000  0001040c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000019c8  00000000  00000000  00013714  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005e2f  00000000  00000000  000150dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003405  00000000  00000000  0001af0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000630  00000000  00000000  0001e310  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 80 00 	jmp	0x100	; 0x100 <__dtors_end>
       4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
       8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
       c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      10:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      14:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__vector_5>
      18:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      1c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      20:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      24:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      28:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      2c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      30:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      34:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      38:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <__vector_14>
      3c:	0c 94 20 05 	jmp	0xa40	; 0xa40 <__vector_15>
      40:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      44:	0c 94 65 05 	jmp	0xaca	; 0xaca <__vector_17>
      48:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      4c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      50:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__vector_20>
      54:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      58:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      5c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      60:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      64:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      68:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      6c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      70:	0c 94 71 04 	jmp	0x8e2	; 0x8e2 <__vector_28>
      74:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      78:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      7c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      80:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      84:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      88:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      8c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      90:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      94:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__vector_37>
      98:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      9c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      a0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      a4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      a8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      ac:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      b0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      b4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      b8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      bc:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      c0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      c4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      c8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      cc:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      d0:	0c 94 a6 04 	jmp	0x94c	; 0x94c <__vector_52>
      d4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      d8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      dc:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      e0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      e4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      e8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      ec:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      f0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>

000000f4 <__ctors_start>:
      f4:	3d 02       	muls	r19, r29
      f6:	57 04       	cpc	r5, r7
      f8:	d6 06       	cpc	r13, r22

000000fa <__ctors_end>:
      fa:	4a 02       	muls	r20, r26
      fc:	64 04       	cpc	r6, r4
      fe:	e3 06       	cpc	r14, r19

00000100 <__dtors_end>:
     100:	11 24       	eor	r1, r1
     102:	1f be       	out	0x3f, r1	; 63
     104:	cf ef       	ldi	r28, 0xFF	; 255
     106:	cd bf       	out	0x3d, r28	; 61
     108:	df e7       	ldi	r29, 0x7F	; 127
     10a:	de bf       	out	0x3e, r29	; 62

0000010c <__do_copy_data>:
     10c:	10 e4       	ldi	r17, 0x40	; 64
     10e:	a0 e0       	ldi	r26, 0x00	; 0
     110:	b0 e4       	ldi	r27, 0x40	; 64
     112:	ee e6       	ldi	r30, 0x6E	; 110
     114:	f5 e2       	ldi	r31, 0x25	; 37
     116:	00 e0       	ldi	r16, 0x00	; 0
     118:	0b bf       	out	0x3b, r16	; 59
     11a:	02 c0       	rjmp	.+4      	; 0x120 <__do_copy_data+0x14>
     11c:	07 90       	elpm	r0, Z+
     11e:	0d 92       	st	X+, r0
     120:	ac 33       	cpi	r26, 0x3C	; 60
     122:	b1 07       	cpc	r27, r17
     124:	d9 f7       	brne	.-10     	; 0x11c <__do_copy_data+0x10>

00000126 <__do_clear_bss>:
     126:	20 e4       	ldi	r18, 0x40	; 64
     128:	ac e3       	ldi	r26, 0x3C	; 60
     12a:	b0 e4       	ldi	r27, 0x40	; 64
     12c:	01 c0       	rjmp	.+2      	; 0x130 <.do_clear_bss_start>

0000012e <.do_clear_bss_loop>:
     12e:	1d 92       	st	X+, r1

00000130 <.do_clear_bss_start>:
     130:	ab 3b       	cpi	r26, 0xBB	; 187
     132:	b2 07       	cpc	r27, r18
     134:	e1 f7       	brne	.-8      	; 0x12e <.do_clear_bss_loop>

00000136 <__do_global_ctors>:
     136:	10 e0       	ldi	r17, 0x00	; 0
     138:	cd e7       	ldi	r28, 0x7D	; 125
     13a:	d0 e0       	ldi	r29, 0x00	; 0
     13c:	04 c0       	rjmp	.+8      	; 0x146 <__do_global_ctors+0x10>
     13e:	21 97       	sbiw	r28, 0x01	; 1
     140:	fe 01       	movw	r30, r28
     142:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__tablejump2__>
     146:	ca 37       	cpi	r28, 0x7A	; 122
     148:	d1 07       	cpc	r29, r17
     14a:	c9 f7       	brne	.-14     	; 0x13e <__do_global_ctors+0x8>
     14c:	0e 94 2e 01 	call	0x25c	; 0x25c <main>
     150:	0c 94 aa 12 	jmp	0x2554	; 0x2554 <__do_global_dtors>

00000154 <__bad_interrupt>:
     154:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000158 <PORTB_toggle_pin_level>:
 * Toggle the pin levels on pins defined by bit mask
 *
 * \param[in] pin       The pin number within port
 */
static inline void PORTB_toggle_pin_level(const uint8_t pin)
{
     158:	cf 93       	push	r28
     15a:	df 93       	push	r29
     15c:	1f 92       	push	r1
     15e:	cd b7       	in	r28, 0x3d	; 61
     160:	de b7       	in	r29, 0x3e	; 62
     162:	89 83       	std	Y+1, r24	; 0x01
	VPORTB.IN |= 1 << pin;
     164:	84 e0       	ldi	r24, 0x04	; 4
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	24 e0       	ldi	r18, 0x04	; 4
     16a:	30 e0       	ldi	r19, 0x00	; 0
     16c:	f9 01       	movw	r30, r18
     16e:	22 81       	ldd	r18, Z+2	; 0x02
     170:	62 2f       	mov	r22, r18
     172:	29 81       	ldd	r18, Y+1	; 0x01
     174:	42 2f       	mov	r20, r18
     176:	50 e0       	ldi	r21, 0x00	; 0
     178:	21 e0       	ldi	r18, 0x01	; 1
     17a:	30 e0       	ldi	r19, 0x00	; 0
     17c:	02 c0       	rjmp	.+4      	; 0x182 <PORTB_toggle_pin_level+0x2a>
     17e:	22 0f       	add	r18, r18
     180:	33 1f       	adc	r19, r19
     182:	4a 95       	dec	r20
     184:	e2 f7       	brpl	.-8      	; 0x17e <PORTB_toggle_pin_level+0x26>
     186:	26 2b       	or	r18, r22
     188:	fc 01       	movw	r30, r24
     18a:	22 83       	std	Z+2, r18	; 0x02
}
     18c:	00 00       	nop
     18e:	0f 90       	pop	r0
     190:	df 91       	pop	r29
     192:	cf 91       	pop	r28
     194:	08 95       	ret

00000196 <LED0_toggle_level>:
 * \brief Toggle output level on LED0
 *
 * Toggle the pin level
 */
static inline void LED0_toggle_level()
{
     196:	cf 93       	push	r28
     198:	df 93       	push	r29
     19a:	cd b7       	in	r28, 0x3d	; 61
     19c:	de b7       	in	r29, 0x3e	; 62
	PORTB_toggle_pin_level(3);
     19e:	83 e0       	ldi	r24, 0x03	; 3
     1a0:	0e 94 ac 00 	call	0x158	; 0x158 <PORTB_toggle_pin_level>
}
     1a4:	00 00       	nop
     1a6:	df 91       	pop	r29
     1a8:	cf 91       	pop	r28
     1aa:	08 95       	ret

000001ac <_Z10RTC_enablev>:




void RTC_enable(void)
{
     1ac:	cf 93       	push	r28
     1ae:	df 93       	push	r29
     1b0:	cd b7       	in	r28, 0x3d	; 61
     1b2:	de b7       	in	r29, 0x3e	; 62
	// Wait for RTC CTRLA to be unsynchronized
	while (RTC.STATUS & RTC_CTRLABUSY_bm) {
     1b4:	80 e4       	ldi	r24, 0x40	; 64
     1b6:	91 e0       	ldi	r25, 0x01	; 1
     1b8:	fc 01       	movw	r30, r24
     1ba:	81 81       	ldd	r24, Z+1	; 0x01
     1bc:	88 2f       	mov	r24, r24
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	81 70       	andi	r24, 0x01	; 1
     1c2:	99 27       	eor	r25, r25
     1c4:	21 e0       	ldi	r18, 0x01	; 1
     1c6:	89 2b       	or	r24, r25
     1c8:	09 f4       	brne	.+2      	; 0x1cc <_Z10RTC_enablev+0x20>
     1ca:	20 e0       	ldi	r18, 0x00	; 0
     1cc:	22 23       	and	r18, r18
     1ce:	09 f0       	breq	.+2      	; 0x1d2 <_Z10RTC_enablev+0x26>
     1d0:	f1 cf       	rjmp	.-30     	; 0x1b4 <_Z10RTC_enablev+0x8>
	}

	// Enable RTC
	RTC.CTRLA |= RTC_RTCEN_bm;
     1d2:	80 e4       	ldi	r24, 0x40	; 64
     1d4:	91 e0       	ldi	r25, 0x01	; 1
     1d6:	20 e4       	ldi	r18, 0x40	; 64
     1d8:	31 e0       	ldi	r19, 0x01	; 1
     1da:	f9 01       	movw	r30, r18
     1dc:	20 81       	ld	r18, Z
     1de:	21 60       	ori	r18, 0x01	; 1
     1e0:	fc 01       	movw	r30, r24
     1e2:	20 83       	st	Z, r18
}
     1e4:	00 00       	nop
     1e6:	df 91       	pop	r29
     1e8:	cf 91       	pop	r28
     1ea:	08 95       	ret

000001ec <__vector_5>:

ISR(RTC_CNT_vect)
{
     1ec:	1f 92       	push	r1
     1ee:	0f 92       	push	r0
     1f0:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     1f4:	0f 92       	push	r0
     1f6:	11 24       	eor	r1, r1
     1f8:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     1fc:	0f 92       	push	r0
     1fe:	2f 93       	push	r18
     200:	3f 93       	push	r19
     202:	4f 93       	push	r20
     204:	5f 93       	push	r21
     206:	6f 93       	push	r22
     208:	7f 93       	push	r23
     20a:	8f 93       	push	r24
     20c:	9f 93       	push	r25
     20e:	af 93       	push	r26
     210:	bf 93       	push	r27
     212:	ef 93       	push	r30
     214:	ff 93       	push	r31
     216:	cf 93       	push	r28
     218:	df 93       	push	r29
     21a:	cd b7       	in	r28, 0x3d	; 61
     21c:	de b7       	in	r29, 0x3e	; 62
	/* Toggle LED0 */
	LED0_toggle_level();
     21e:	0e 94 cb 00 	call	0x196	; 0x196 <LED0_toggle_level>

	/* Overflow interrupt flag has to be cleared manually */
	RTC.INTFLAGS = RTC_OVF_bm;
     222:	80 e4       	ldi	r24, 0x40	; 64
     224:	91 e0       	ldi	r25, 0x01	; 1
     226:	21 e0       	ldi	r18, 0x01	; 1
     228:	fc 01       	movw	r30, r24
     22a:	23 83       	std	Z+3, r18	; 0x03
}
     22c:	00 00       	nop
     22e:	df 91       	pop	r29
     230:	cf 91       	pop	r28
     232:	ff 91       	pop	r31
     234:	ef 91       	pop	r30
     236:	bf 91       	pop	r27
     238:	af 91       	pop	r26
     23a:	9f 91       	pop	r25
     23c:	8f 91       	pop	r24
     23e:	7f 91       	pop	r23
     240:	6f 91       	pop	r22
     242:	5f 91       	pop	r21
     244:	4f 91       	pop	r20
     246:	3f 91       	pop	r19
     248:	2f 91       	pop	r18
     24a:	0f 90       	pop	r0
     24c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     250:	0f 90       	pop	r0
     252:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     256:	0f 90       	pop	r0
     258:	1f 90       	pop	r1
     25a:	18 95       	reti

0000025c <main>:

int main(void)
{
     25c:	cf 93       	push	r28
     25e:	df 93       	push	r29
     260:	cd b7       	in	r28, 0x3d	; 61
     262:	de b7       	in	r29, 0x3e	; 62
     264:	60 97       	sbiw	r28, 0x10	; 16
     266:	cd bf       	out	0x3d, r28	; 61
     268:	de bf       	out	0x3e, r29	; 62
	uint32_t last_frequency_b=0;
     26a:	19 82       	std	Y+1, r1	; 0x01
     26c:	1a 82       	std	Y+2, r1	; 0x02
     26e:	1b 82       	std	Y+3, r1	; 0x03
     270:	1c 82       	std	Y+4, r1	; 0x04
	uint32_t last_frequency_c=0;
     272:	1d 82       	std	Y+5, r1	; 0x05
     274:	1e 82       	std	Y+6, r1	; 0x06
     276:	1f 82       	std	Y+7, r1	; 0x07
     278:	18 86       	std	Y+8, r1	; 0x08
		uint32_t current_frequency_b=0;
     27a:	19 86       	std	Y+9, r1	; 0x09
     27c:	1a 86       	std	Y+10, r1	; 0x0a
     27e:	1b 86       	std	Y+11, r1	; 0x0b
     280:	1c 86       	std	Y+12, r1	; 0x0c
		uint32_t current_frequency_c=0;
     282:	1d 86       	std	Y+13, r1	; 0x0d
     284:	1e 86       	std	Y+14, r1	; 0x0e
     286:	1f 86       	std	Y+15, r1	; 0x0f
     288:	18 8a       	std	Y+16, r1	; 0x10
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
     28a:	0e 94 bc 07 	call	0xf78	; 0xf78 <atmel_start_init>
	RTC_enable();
     28e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_Z10RTC_enablev>
	
	tako.Init();
     292:	8c e3       	ldi	r24, 0x3C	; 60
     294:	90 e4       	ldi	r25, 0x40	; 64
     296:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN18Zero_Cross_Counter4InitEv>
	post.Init();
     29a:	8a e4       	ldi	r24, 0x4A	; 74
     29c:	90 e4       	ldi	r25, 0x40	; 64
     29e:	0e 94 68 03 	call	0x6d0	; 0x6d0 <_ZN15SPI_SLAVE_CLASS4InitEv>
	ENABLE_INTERRUPTS();
     2a2:	78 94       	sei
	//asm("nop");
	printf("hello\n\r");
     2a4:	8e e0       	ldi	r24, 0x0E	; 14
     2a6:	90 e4       	ldi	r25, 0x40	; 64
     2a8:	89 2f       	mov	r24, r25
     2aa:	8f 93       	push	r24
     2ac:	8e e0       	ldi	r24, 0x0E	; 14
     2ae:	90 e4       	ldi	r25, 0x40	; 64
     2b0:	8f 93       	push	r24
     2b2:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <printf>
     2b6:	0f 90       	pop	r0
     2b8:	0f 90       	pop	r0
	/* Replace with your application code */
	while (1) {
		current_frequency_c=(uint32_t)(24000000/(tako.capture_timer_fall));
     2ba:	80 91 3f 40 	lds	r24, 0x403F	; 0x80403f <__data_end+0x3>
     2be:	90 91 40 40 	lds	r25, 0x4040	; 0x804040 <__data_end+0x4>
     2c2:	9c 01       	movw	r18, r24
     2c4:	40 e0       	ldi	r20, 0x00	; 0
     2c6:	50 e0       	ldi	r21, 0x00	; 0
     2c8:	80 e0       	ldi	r24, 0x00	; 0
     2ca:	96 e3       	ldi	r25, 0x36	; 54
     2cc:	ae e6       	ldi	r26, 0x6E	; 110
     2ce:	b1 e0       	ldi	r27, 0x01	; 1
     2d0:	bc 01       	movw	r22, r24
     2d2:	cd 01       	movw	r24, r26
     2d4:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <__divmodsi4>
     2d8:	da 01       	movw	r26, r20
     2da:	c9 01       	movw	r24, r18
     2dc:	8d 87       	std	Y+13, r24	; 0x0d
     2de:	9e 87       	std	Y+14, r25	; 0x0e
     2e0:	af 87       	std	Y+15, r26	; 0x0f
     2e2:	b8 8b       	std	Y+16, r27	; 0x10
		if (last_frequency_c!=current_frequency_c)
     2e4:	2d 81       	ldd	r18, Y+5	; 0x05
     2e6:	3e 81       	ldd	r19, Y+6	; 0x06
     2e8:	4f 81       	ldd	r20, Y+7	; 0x07
     2ea:	58 85       	ldd	r21, Y+8	; 0x08
     2ec:	8d 85       	ldd	r24, Y+13	; 0x0d
     2ee:	9e 85       	ldd	r25, Y+14	; 0x0e
     2f0:	af 85       	ldd	r26, Y+15	; 0x0f
     2f2:	b8 89       	ldd	r27, Y+16	; 0x10
     2f4:	28 17       	cp	r18, r24
     2f6:	39 07       	cpc	r19, r25
     2f8:	4a 07       	cpc	r20, r26
     2fa:	5b 07       	cpc	r21, r27
     2fc:	99 f1       	breq	.+102    	; 0x364 <main+0x108>
		{
			if (tako.capture_timer_fall>0)
     2fe:	80 91 3f 40 	lds	r24, 0x403F	; 0x80403f <__data_end+0x3>
     302:	90 91 40 40 	lds	r25, 0x4040	; 0x804040 <__data_end+0x4>
     306:	21 e0       	ldi	r18, 0x01	; 1
     308:	89 2b       	or	r24, r25
     30a:	09 f4       	brne	.+2      	; 0x30e <main+0xb2>
     30c:	20 e0       	ldi	r18, 0x00	; 0
     30e:	22 23       	and	r18, r18
     310:	49 f1       	breq	.+82     	; 0x364 <main+0x108>
			{
				last_frequency_c=current_frequency_c;
     312:	8d 85       	ldd	r24, Y+13	; 0x0d
     314:	9e 85       	ldd	r25, Y+14	; 0x0e
     316:	af 85       	ldd	r26, Y+15	; 0x0f
     318:	b8 89       	ldd	r27, Y+16	; 0x10
     31a:	8d 83       	std	Y+5, r24	; 0x05
     31c:	9e 83       	std	Y+6, r25	; 0x06
     31e:	af 83       	std	Y+7, r26	; 0x07
     320:	b8 87       	std	Y+8, r27	; 0x08
					tako.Set_Last_Frequency(last_frequency_c);
     322:	8d 81       	ldd	r24, Y+5	; 0x05
     324:	9e 81       	ldd	r25, Y+6	; 0x06
     326:	af 81       	ldd	r26, Y+7	; 0x07
     328:	b8 85       	ldd	r27, Y+8	; 0x08
     32a:	ac 01       	movw	r20, r24
     32c:	bd 01       	movw	r22, r26
     32e:	8c e3       	ldi	r24, 0x3C	; 60
     330:	90 e4       	ldi	r25, 0x40	; 64
     332:	0e 94 60 06 	call	0xcc0	; 0xcc0 <_ZN18Zero_Cross_Counter18Set_Last_FrequencyEm>
				printf("Counter C : %lu \n\r", current_frequency_c);
     336:	88 89       	ldd	r24, Y+16	; 0x10
     338:	8f 93       	push	r24
     33a:	8f 85       	ldd	r24, Y+15	; 0x0f
     33c:	8f 93       	push	r24
     33e:	8e 85       	ldd	r24, Y+14	; 0x0e
     340:	8f 93       	push	r24
     342:	8d 85       	ldd	r24, Y+13	; 0x0d
     344:	8f 93       	push	r24
     346:	86 e1       	ldi	r24, 0x16	; 22
     348:	90 e4       	ldi	r25, 0x40	; 64
     34a:	89 2f       	mov	r24, r25
     34c:	8f 93       	push	r24
     34e:	86 e1       	ldi	r24, 0x16	; 22
     350:	90 e4       	ldi	r25, 0x40	; 64
     352:	8f 93       	push	r24
     354:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <printf>
     358:	0f 90       	pop	r0
     35a:	0f 90       	pop	r0
     35c:	0f 90       	pop	r0
     35e:	0f 90       	pop	r0
     360:	0f 90       	pop	r0
     362:	0f 90       	pop	r0
		} 
		else
		{
			
		}
		current_frequency_b=(uint32_t)(24000000/(tako.capture_timer_rise));
     364:	80 91 41 40 	lds	r24, 0x4041	; 0x804041 <__data_end+0x5>
     368:	90 91 42 40 	lds	r25, 0x4042	; 0x804042 <__data_end+0x6>
     36c:	9c 01       	movw	r18, r24
     36e:	40 e0       	ldi	r20, 0x00	; 0
     370:	50 e0       	ldi	r21, 0x00	; 0
     372:	80 e0       	ldi	r24, 0x00	; 0
     374:	96 e3       	ldi	r25, 0x36	; 54
     376:	ae e6       	ldi	r26, 0x6E	; 110
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	bc 01       	movw	r22, r24
     37c:	cd 01       	movw	r24, r26
     37e:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <__divmodsi4>
     382:	da 01       	movw	r26, r20
     384:	c9 01       	movw	r24, r18
     386:	89 87       	std	Y+9, r24	; 0x09
     388:	9a 87       	std	Y+10, r25	; 0x0a
     38a:	ab 87       	std	Y+11, r26	; 0x0b
     38c:	bc 87       	std	Y+12, r27	; 0x0c
		if (last_frequency_b!=current_frequency_b)
     38e:	29 81       	ldd	r18, Y+1	; 0x01
     390:	3a 81       	ldd	r19, Y+2	; 0x02
     392:	4b 81       	ldd	r20, Y+3	; 0x03
     394:	5c 81       	ldd	r21, Y+4	; 0x04
     396:	89 85       	ldd	r24, Y+9	; 0x09
     398:	9a 85       	ldd	r25, Y+10	; 0x0a
     39a:	ab 85       	ldd	r26, Y+11	; 0x0b
     39c:	bc 85       	ldd	r27, Y+12	; 0x0c
     39e:	28 17       	cp	r18, r24
     3a0:	39 07       	cpc	r19, r25
     3a2:	4a 07       	cpc	r20, r26
     3a4:	5b 07       	cpc	r21, r27
     3a6:	99 f1       	breq	.+102    	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
		{
			if (tako.capture_timer_rise>0)
     3a8:	80 91 41 40 	lds	r24, 0x4041	; 0x804041 <__data_end+0x5>
     3ac:	90 91 42 40 	lds	r25, 0x4042	; 0x804042 <__data_end+0x6>
     3b0:	21 e0       	ldi	r18, 0x01	; 1
     3b2:	89 2b       	or	r24, r25
     3b4:	09 f4       	brne	.+2      	; 0x3b8 <main+0x15c>
     3b6:	20 e0       	ldi	r18, 0x00	; 0
     3b8:	22 23       	and	r18, r18
     3ba:	49 f1       	breq	.+82     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
			{
				last_frequency_b=current_frequency_b;
     3bc:	89 85       	ldd	r24, Y+9	; 0x09
     3be:	9a 85       	ldd	r25, Y+10	; 0x0a
     3c0:	ab 85       	ldd	r26, Y+11	; 0x0b
     3c2:	bc 85       	ldd	r27, Y+12	; 0x0c
     3c4:	89 83       	std	Y+1, r24	; 0x01
     3c6:	9a 83       	std	Y+2, r25	; 0x02
     3c8:	ab 83       	std	Y+3, r26	; 0x03
     3ca:	bc 83       	std	Y+4, r27	; 0x04
				tako.Set_Last_Frequency(last_frequency_b);
     3cc:	89 81       	ldd	r24, Y+1	; 0x01
     3ce:	9a 81       	ldd	r25, Y+2	; 0x02
     3d0:	ab 81       	ldd	r26, Y+3	; 0x03
     3d2:	bc 81       	ldd	r27, Y+4	; 0x04
     3d4:	ac 01       	movw	r20, r24
     3d6:	bd 01       	movw	r22, r26
     3d8:	8c e3       	ldi	r24, 0x3C	; 60
     3da:	90 e4       	ldi	r25, 0x40	; 64
     3dc:	0e 94 60 06 	call	0xcc0	; 0xcc0 <_ZN18Zero_Cross_Counter18Set_Last_FrequencyEm>
				printf("Counter B : %lu \n\r", current_frequency_b);
     3e0:	8c 85       	ldd	r24, Y+12	; 0x0c
     3e2:	8f 93       	push	r24
     3e4:	8b 85       	ldd	r24, Y+11	; 0x0b
     3e6:	8f 93       	push	r24
     3e8:	8a 85       	ldd	r24, Y+10	; 0x0a
     3ea:	8f 93       	push	r24
     3ec:	89 85       	ldd	r24, Y+9	; 0x09
     3ee:	8f 93       	push	r24
     3f0:	89 e2       	ldi	r24, 0x29	; 41
     3f2:	90 e4       	ldi	r25, 0x40	; 64
     3f4:	89 2f       	mov	r24, r25
     3f6:	8f 93       	push	r24
     3f8:	89 e2       	ldi	r24, 0x29	; 41
     3fa:	90 e4       	ldi	r25, 0x40	; 64
     3fc:	8f 93       	push	r24
     3fe:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <printf>
     402:	0f 90       	pop	r0
     404:	0f 90       	pop	r0
     406:	0f 90       	pop	r0
     408:	0f 90       	pop	r0
     40a:	0f 90       	pop	r0
     40c:	0f 90       	pop	r0
			
		}
		else
		{
		}
		post.Check_Command();
     40e:	8a e4       	ldi	r24, 0x4A	; 74
     410:	90 e4       	ldi	r25, 0x40	; 64
     412:	0e 94 ee 03 	call	0x7dc	; 0x7dc <_ZN15SPI_SLAVE_CLASS13Check_CommandEv>
	post.Init();
	ENABLE_INTERRUPTS();
	//asm("nop");
	printf("hello\n\r");
	/* Replace with your application code */
	while (1) {
     416:	51 cf       	rjmp	.-350    	; 0x2ba <main+0x5e>

00000418 <_Z41__static_initialization_and_destruction_0ii>:
		post.Check_Command();
		
		
			
	}
}
     418:	cf 93       	push	r28
     41a:	df 93       	push	r29
     41c:	00 d0       	rcall	.+0      	; 0x41e <_Z41__static_initialization_and_destruction_0ii+0x6>
     41e:	00 d0       	rcall	.+0      	; 0x420 <_Z41__static_initialization_and_destruction_0ii+0x8>
     420:	cd b7       	in	r28, 0x3d	; 61
     422:	de b7       	in	r29, 0x3e	; 62
     424:	89 83       	std	Y+1, r24	; 0x01
     426:	9a 83       	std	Y+2, r25	; 0x02
     428:	6b 83       	std	Y+3, r22	; 0x03
     42a:	7c 83       	std	Y+4, r23	; 0x04
     42c:	89 81       	ldd	r24, Y+1	; 0x01
     42e:	9a 81       	ldd	r25, Y+2	; 0x02
     430:	01 97       	sbiw	r24, 0x01	; 1
     432:	61 f4       	brne	.+24     	; 0x44c <_Z41__static_initialization_and_destruction_0ii+0x34>
     434:	8b 81       	ldd	r24, Y+3	; 0x03
     436:	9c 81       	ldd	r25, Y+4	; 0x04
     438:	01 96       	adiw	r24, 0x01	; 1
     43a:	41 f4       	brne	.+16     	; 0x44c <_Z41__static_initialization_and_destruction_0ii+0x34>
	Zero_Cross_Counter& operator=( const Zero_Cross_Counter &c );
	void ZCD_RISING_Init(void);
	uint8_t TIMER_RISING_Init();
}; //Zero_Cross_Counter

static Zero_Cross_Counter tako;
     43c:	8c e3       	ldi	r24, 0x3C	; 60
     43e:	90 e4       	ldi	r25, 0x40	; 64
     440:	0e 94 aa 05 	call	0xb54	; 0xb54 <_ZN18Zero_Cross_CounterC1Ev>
	void SPI_ZCD_enable();
	void SPI_ZCD_disable();

}; //SPI_SLAVE_CLASS

static SPI_SLAVE_CLASS post;
     444:	8a e4       	ldi	r24, 0x4A	; 74
     446:	90 e4       	ldi	r25, 0x40	; 64
     448:	0e 94 31 03 	call	0x662	; 0x662 <_ZN15SPI_SLAVE_CLASSC1Ev>
     44c:	89 81       	ldd	r24, Y+1	; 0x01
     44e:	9a 81       	ldd	r25, Y+2	; 0x02
     450:	89 2b       	or	r24, r25
     452:	61 f4       	brne	.+24     	; 0x46c <_Z41__static_initialization_and_destruction_0ii+0x54>
     454:	8b 81       	ldd	r24, Y+3	; 0x03
     456:	9c 81       	ldd	r25, Y+4	; 0x04
     458:	01 96       	adiw	r24, 0x01	; 1
     45a:	41 f4       	brne	.+16     	; 0x46c <_Z41__static_initialization_and_destruction_0ii+0x54>
     45c:	8a e4       	ldi	r24, 0x4A	; 74
     45e:	90 e4       	ldi	r25, 0x40	; 64
     460:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <_ZN15SPI_SLAVE_CLASSD1Ev>
     464:	8c e3       	ldi	r24, 0x3C	; 60
     466:	90 e4       	ldi	r25, 0x40	; 64
     468:	0e 94 c4 05 	call	0xb88	; 0xb88 <_ZN18Zero_Cross_CounterD1Ev>
     46c:	00 00       	nop
     46e:	24 96       	adiw	r28, 0x04	; 4
     470:	cd bf       	out	0x3d, r28	; 61
     472:	de bf       	out	0x3e, r29	; 62
     474:	df 91       	pop	r29
     476:	cf 91       	pop	r28
     478:	08 95       	ret

0000047a <_GLOBAL__sub_I__Z10RTC_enablev>:
     47a:	cf 93       	push	r28
     47c:	df 93       	push	r29
     47e:	cd b7       	in	r28, 0x3d	; 61
     480:	de b7       	in	r29, 0x3e	; 62
     482:	6f ef       	ldi	r22, 0xFF	; 255
     484:	7f ef       	ldi	r23, 0xFF	; 255
     486:	81 e0       	ldi	r24, 0x01	; 1
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	0e 94 0c 02 	call	0x418	; 0x418 <_Z41__static_initialization_and_destruction_0ii>
     48e:	df 91       	pop	r29
     490:	cf 91       	pop	r28
     492:	08 95       	ret

00000494 <_GLOBAL__sub_D__Z10RTC_enablev>:
     494:	cf 93       	push	r28
     496:	df 93       	push	r29
     498:	cd b7       	in	r28, 0x3d	; 61
     49a:	de b7       	in	r29, 0x3e	; 62
     49c:	6f ef       	ldi	r22, 0xFF	; 255
     49e:	7f ef       	ldi	r23, 0xFF	; 255
     4a0:	80 e0       	ldi	r24, 0x00	; 0
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	0e 94 0c 02 	call	0x418	; 0x418 <_Z41__static_initialization_and_destruction_0ii>
     4a8:	df 91       	pop	r29
     4aa:	cf 91       	pop	r28
     4ac:	08 95       	ret

000004ae <PORTC_get_pin_level>:
 * \return Nothing
 */
void SPI_SLAVE_CLASS::SPI_ZCD_disable()
{
	SPI1.CTRLA &= ~SPI_ENABLE_bm;
}
     4ae:	cf 93       	push	r28
     4b0:	df 93       	push	r29
     4b2:	1f 92       	push	r1
     4b4:	cd b7       	in	r28, 0x3d	; 61
     4b6:	de b7       	in	r29, 0x3e	; 62
     4b8:	89 83       	std	Y+1, r24	; 0x01
     4ba:	88 e0       	ldi	r24, 0x08	; 8
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	fc 01       	movw	r30, r24
     4c0:	82 81       	ldd	r24, Z+2	; 0x02
     4c2:	88 2f       	mov	r24, r24
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	29 81       	ldd	r18, Y+1	; 0x01
     4c8:	22 2f       	mov	r18, r18
     4ca:	30 e0       	ldi	r19, 0x00	; 0
     4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <PORTC_get_pin_level+0x24>
     4ce:	95 95       	asr	r25
     4d0:	87 95       	ror	r24
     4d2:	2a 95       	dec	r18
     4d4:	e2 f7       	brpl	.-8      	; 0x4ce <PORTC_get_pin_level+0x20>
     4d6:	81 70       	andi	r24, 0x01	; 1
     4d8:	99 27       	eor	r25, r25
     4da:	21 e0       	ldi	r18, 0x01	; 1
     4dc:	89 2b       	or	r24, r25
     4de:	09 f4       	brne	.+2      	; 0x4e2 <PORTC_get_pin_level+0x34>
     4e0:	20 e0       	ldi	r18, 0x00	; 0
     4e2:	82 2f       	mov	r24, r18
     4e4:	0f 90       	pop	r0
     4e6:	df 91       	pop	r29
     4e8:	cf 91       	pop	r28
     4ea:	08 95       	ret

000004ec <PC3_get_level>:
     4ec:	cf 93       	push	r28
     4ee:	df 93       	push	r29
     4f0:	cd b7       	in	r28, 0x3d	; 61
     4f2:	de b7       	in	r29, 0x3e	; 62
     4f4:	83 e0       	ldi	r24, 0x03	; 3
     4f6:	0e 94 57 02 	call	0x4ae	; 0x4ae <PORTC_get_pin_level>
     4fa:	df 91       	pop	r29
     4fc:	cf 91       	pop	r28
     4fe:	08 95       	ret

00000500 <_ZL17SPI_Transfer_Donev>:
     500:	cf 93       	push	r28
     502:	df 93       	push	r29
     504:	cd b7       	in	r28, 0x3d	; 61
     506:	de b7       	in	r29, 0x3e	; 62
     508:	80 91 91 40 	lds	r24, 0x4091	; 0x804091 <ptrSPI_Slave>
     50c:	90 91 92 40 	lds	r25, 0x4092	; 0x804092 <ptrSPI_Slave+0x1>
     510:	21 e0       	ldi	r18, 0x01	; 1
     512:	fc 01       	movw	r30, r24
     514:	20 83       	st	Z, r18
     516:	00 00       	nop
     518:	df 91       	pop	r29
     51a:	cf 91       	pop	r28
     51c:	08 95       	ret

0000051e <__vector_20>:
     51e:	1f 92       	push	r1
     520:	0f 92       	push	r0
     522:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     526:	0f 92       	push	r0
     528:	11 24       	eor	r1, r1
     52a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     52e:	0f 92       	push	r0
     530:	2f 93       	push	r18
     532:	3f 93       	push	r19
     534:	4f 93       	push	r20
     536:	5f 93       	push	r21
     538:	6f 93       	push	r22
     53a:	7f 93       	push	r23
     53c:	8f 93       	push	r24
     53e:	9f 93       	push	r25
     540:	af 93       	push	r26
     542:	bf 93       	push	r27
     544:	ef 93       	push	r30
     546:	ff 93       	push	r31
     548:	cf 93       	push	r28
     54a:	df 93       	push	r29
     54c:	00 d0       	rcall	.+0      	; 0x54e <__vector_20+0x30>
     54e:	cd b7       	in	r28, 0x3d	; 61
     550:	de b7       	in	r29, 0x3e	; 62
     552:	80 e6       	ldi	r24, 0x60	; 96
     554:	99 e0       	ldi	r25, 0x09	; 9
     556:	fc 01       	movw	r30, r24
     558:	84 81       	ldd	r24, Z+4	; 0x04
     55a:	89 83       	std	Y+1, r24	; 0x01
     55c:	1a 82       	std	Y+2, r1	; 0x02
     55e:	80 e6       	ldi	r24, 0x60	; 96
     560:	99 e0       	ldi	r25, 0x09	; 9
     562:	20 e8       	ldi	r18, 0x80	; 128
     564:	fc 01       	movw	r30, r24
     566:	23 83       	std	Z+3, r18	; 0x03
     568:	80 91 91 40 	lds	r24, 0x4091	; 0x804091 <ptrSPI_Slave>
     56c:	90 91 92 40 	lds	r25, 0x4092	; 0x804092 <ptrSPI_Slave+0x1>
     570:	fc 01       	movw	r30, r24
     572:	86 81       	ldd	r24, Z+6	; 0x06
     574:	82 30       	cpi	r24, 0x02	; 2
     576:	e9 f0       	breq	.+58     	; 0x5b2 <__vector_20+0x94>
     578:	89 81       	ldd	r24, Y+1	; 0x01
     57a:	88 23       	and	r24, r24
     57c:	99 f0       	breq	.+38     	; 0x5a4 <__vector_20+0x86>
     57e:	80 91 91 40 	lds	r24, 0x4091	; 0x804091 <ptrSPI_Slave>
     582:	90 91 92 40 	lds	r25, 0x4092	; 0x804092 <ptrSPI_Slave+0x1>
     586:	fc 01       	movw	r30, r24
     588:	10 82       	st	Z, r1
     58a:	20 91 69 40 	lds	r18, 0x4069	; 0x804069 <_ZL4tako+0x7>
     58e:	30 91 6a 40 	lds	r19, 0x406A	; 0x80406a <_ZL4tako+0x8>
     592:	80 91 91 40 	lds	r24, 0x4091	; 0x804091 <ptrSPI_Slave>
     596:	90 91 92 40 	lds	r25, 0x4092	; 0x804092 <ptrSPI_Slave+0x1>
     59a:	44 e0       	ldi	r20, 0x04	; 4
     59c:	b9 01       	movw	r22, r18
     59e:	0e 94 83 03 	call	0x706	; 0x706 <_ZN15SPI_SLAVE_CLASS10Write_DataEPhh>
     5a2:	45 c0       	rjmp	.+138    	; 0x62e <__vector_20+0x110>
     5a4:	80 91 91 40 	lds	r24, 0x4091	; 0x804091 <ptrSPI_Slave>
     5a8:	90 91 92 40 	lds	r25, 0x4092	; 0x804092 <ptrSPI_Slave+0x1>
     5ac:	fc 01       	movw	r30, r24
     5ae:	11 82       	std	Z+1, r1	; 0x01
     5b0:	3e c0       	rjmp	.+124    	; 0x62e <__vector_20+0x110>
     5b2:	80 91 91 40 	lds	r24, 0x4091	; 0x804091 <ptrSPI_Slave>
     5b6:	90 91 92 40 	lds	r25, 0x4092	; 0x804092 <ptrSPI_Slave+0x1>
     5ba:	fc 01       	movw	r30, r24
     5bc:	86 81       	ldd	r24, Z+6	; 0x06
     5be:	81 30       	cpi	r24, 0x01	; 1
     5c0:	b1 f1       	breq	.+108    	; 0x62e <__vector_20+0x110>
     5c2:	80 91 91 40 	lds	r24, 0x4091	; 0x804091 <ptrSPI_Slave>
     5c6:	90 91 92 40 	lds	r25, 0x4092	; 0x804092 <ptrSPI_Slave+0x1>
     5ca:	fc 01       	movw	r30, r24
     5cc:	23 81       	ldd	r18, Z+3	; 0x03
     5ce:	34 81       	ldd	r19, Z+4	; 0x04
     5d0:	2f 5f       	subi	r18, 0xFF	; 255
     5d2:	3f 4f       	sbci	r19, 0xFF	; 255
     5d4:	fc 01       	movw	r30, r24
     5d6:	23 83       	std	Z+3, r18	; 0x03
     5d8:	34 83       	std	Z+4, r19	; 0x04
     5da:	80 91 91 40 	lds	r24, 0x4091	; 0x804091 <ptrSPI_Slave>
     5de:	90 91 92 40 	lds	r25, 0x4092	; 0x804092 <ptrSPI_Slave+0x1>
     5e2:	fc 01       	movw	r30, r24
     5e4:	83 81       	ldd	r24, Z+3	; 0x03
     5e6:	94 81       	ldd	r25, Z+4	; 0x04
     5e8:	fc 01       	movw	r30, r24
     5ea:	80 81       	ld	r24, Z
     5ec:	8a 83       	std	Y+2, r24	; 0x02
     5ee:	80 91 91 40 	lds	r24, 0x4091	; 0x804091 <ptrSPI_Slave>
     5f2:	90 91 92 40 	lds	r25, 0x4092	; 0x804092 <ptrSPI_Slave+0x1>
     5f6:	fc 01       	movw	r30, r24
     5f8:	25 81       	ldd	r18, Z+5	; 0x05
     5fa:	21 50       	subi	r18, 0x01	; 1
     5fc:	fc 01       	movw	r30, r24
     5fe:	25 83       	std	Z+5, r18	; 0x05
     600:	80 91 91 40 	lds	r24, 0x4091	; 0x804091 <ptrSPI_Slave>
     604:	90 91 92 40 	lds	r25, 0x4092	; 0x804092 <ptrSPI_Slave+0x1>
     608:	fc 01       	movw	r30, r24
     60a:	85 81       	ldd	r24, Z+5	; 0x05
     60c:	88 23       	and	r24, r24
     60e:	31 f0       	breq	.+12     	; 0x61c <__vector_20+0xfe>
     610:	80 e6       	ldi	r24, 0x60	; 96
     612:	99 e0       	ldi	r25, 0x09	; 9
     614:	2a 81       	ldd	r18, Y+2	; 0x02
     616:	fc 01       	movw	r30, r24
     618:	24 83       	std	Z+4, r18	; 0x04
     61a:	09 c0       	rjmp	.+18     	; 0x62e <__vector_20+0x110>
     61c:	80 91 91 40 	lds	r24, 0x4091	; 0x804091 <ptrSPI_Slave>
     620:	90 91 92 40 	lds	r25, 0x4092	; 0x804092 <ptrSPI_Slave+0x1>
     624:	23 e0       	ldi	r18, 0x03	; 3
     626:	fc 01       	movw	r30, r24
     628:	22 83       	std	Z+2, r18	; 0x02
     62a:	0e 94 80 02 	call	0x500	; 0x500 <_ZL17SPI_Transfer_Donev>
     62e:	00 00       	nop
     630:	0f 90       	pop	r0
     632:	0f 90       	pop	r0
     634:	df 91       	pop	r29
     636:	cf 91       	pop	r28
     638:	ff 91       	pop	r31
     63a:	ef 91       	pop	r30
     63c:	bf 91       	pop	r27
     63e:	af 91       	pop	r26
     640:	9f 91       	pop	r25
     642:	8f 91       	pop	r24
     644:	7f 91       	pop	r23
     646:	6f 91       	pop	r22
     648:	5f 91       	pop	r21
     64a:	4f 91       	pop	r20
     64c:	3f 91       	pop	r19
     64e:	2f 91       	pop	r18
     650:	0f 90       	pop	r0
     652:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     656:	0f 90       	pop	r0
     658:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     65c:	0f 90       	pop	r0
     65e:	1f 90       	pop	r1
     660:	18 95       	reti

00000662 <_ZN15SPI_SLAVE_CLASSC1Ev>:
     662:	cf 93       	push	r28
     664:	df 93       	push	r29
     666:	00 d0       	rcall	.+0      	; 0x668 <_ZN15SPI_SLAVE_CLASSC1Ev+0x6>
     668:	cd b7       	in	r28, 0x3d	; 61
     66a:	de b7       	in	r29, 0x3e	; 62
     66c:	89 83       	std	Y+1, r24	; 0x01
     66e:	9a 83       	std	Y+2, r25	; 0x02
     670:	89 81       	ldd	r24, Y+1	; 0x01
     672:	9a 81       	ldd	r25, Y+2	; 0x02
     674:	80 93 91 40 	sts	0x4091, r24	; 0x804091 <ptrSPI_Slave>
     678:	90 93 92 40 	sts	0x4092, r25	; 0x804092 <ptrSPI_Slave+0x1>
     67c:	89 81       	ldd	r24, Y+1	; 0x01
     67e:	9a 81       	ldd	r25, Y+2	; 0x02
     680:	fc 01       	movw	r30, r24
     682:	10 82       	st	Z, r1
     684:	89 81       	ldd	r24, Y+1	; 0x01
     686:	9a 81       	ldd	r25, Y+2	; 0x02
     688:	20 e8       	ldi	r18, 0x80	; 128
     68a:	30 e4       	ldi	r19, 0x40	; 64
     68c:	fc 01       	movw	r30, r24
     68e:	27 83       	std	Z+7, r18	; 0x07
     690:	30 87       	std	Z+8, r19	; 0x08
     692:	89 81       	ldd	r24, Y+1	; 0x01
     694:	9a 81       	ldd	r25, Y+2	; 0x02
     696:	20 e7       	ldi	r18, 0x70	; 112
     698:	30 e4       	ldi	r19, 0x40	; 64
     69a:	fc 01       	movw	r30, r24
     69c:	21 87       	std	Z+9, r18	; 0x09
     69e:	32 87       	std	Z+10, r19	; 0x0a
     6a0:	89 81       	ldd	r24, Y+1	; 0x01
     6a2:	9a 81       	ldd	r25, Y+2	; 0x02
     6a4:	21 e0       	ldi	r18, 0x01	; 1
     6a6:	fc 01       	movw	r30, r24
     6a8:	26 83       	std	Z+6, r18	; 0x06
     6aa:	00 00       	nop
     6ac:	0f 90       	pop	r0
     6ae:	0f 90       	pop	r0
     6b0:	df 91       	pop	r29
     6b2:	cf 91       	pop	r28
     6b4:	08 95       	ret

000006b6 <_ZN15SPI_SLAVE_CLASSD1Ev>:
     6b6:	cf 93       	push	r28
     6b8:	df 93       	push	r29
     6ba:	00 d0       	rcall	.+0      	; 0x6bc <_ZN15SPI_SLAVE_CLASSD1Ev+0x6>
     6bc:	cd b7       	in	r28, 0x3d	; 61
     6be:	de b7       	in	r29, 0x3e	; 62
     6c0:	89 83       	std	Y+1, r24	; 0x01
     6c2:	9a 83       	std	Y+2, r25	; 0x02
     6c4:	00 00       	nop
     6c6:	0f 90       	pop	r0
     6c8:	0f 90       	pop	r0
     6ca:	df 91       	pop	r29
     6cc:	cf 91       	pop	r28
     6ce:	08 95       	ret

000006d0 <_ZN15SPI_SLAVE_CLASS4InitEv>:
     6d0:	cf 93       	push	r28
     6d2:	df 93       	push	r29
     6d4:	00 d0       	rcall	.+0      	; 0x6d6 <_ZN15SPI_SLAVE_CLASS4InitEv+0x6>
     6d6:	cd b7       	in	r28, 0x3d	; 61
     6d8:	de b7       	in	r29, 0x3e	; 62
     6da:	89 83       	std	Y+1, r24	; 0x01
     6dc:	9a 83       	std	Y+2, r25	; 0x02
     6de:	89 81       	ldd	r24, Y+1	; 0x01
     6e0:	9a 81       	ldd	r25, Y+2	; 0x02
     6e2:	80 93 91 40 	sts	0x4091, r24	; 0x804091 <ptrSPI_Slave>
     6e6:	90 93 92 40 	sts	0x4092, r25	; 0x804092 <ptrSPI_Slave+0x1>
     6ea:	89 81       	ldd	r24, Y+1	; 0x01
     6ec:	9a 81       	ldd	r25, Y+2	; 0x02
     6ee:	0e 94 ba 03 	call	0x774	; 0x774 <_ZN15SPI_SLAVE_CLASS12SPI_ZCD_initEv>
     6f2:	89 81       	ldd	r24, Y+1	; 0x01
     6f4:	9a 81       	ldd	r25, Y+2	; 0x02
     6f6:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <_ZN15SPI_SLAVE_CLASS14SPI_ZCD_enableEv>
     6fa:	00 00       	nop
     6fc:	0f 90       	pop	r0
     6fe:	0f 90       	pop	r0
     700:	df 91       	pop	r29
     702:	cf 91       	pop	r28
     704:	08 95       	ret

00000706 <_ZN15SPI_SLAVE_CLASS10Write_DataEPhh>:
     706:	cf 93       	push	r28
     708:	df 93       	push	r29
     70a:	cd b7       	in	r28, 0x3d	; 61
     70c:	de b7       	in	r29, 0x3e	; 62
     70e:	25 97       	sbiw	r28, 0x05	; 5
     710:	cd bf       	out	0x3d, r28	; 61
     712:	de bf       	out	0x3e, r29	; 62
     714:	89 83       	std	Y+1, r24	; 0x01
     716:	9a 83       	std	Y+2, r25	; 0x02
     718:	6b 83       	std	Y+3, r22	; 0x03
     71a:	7c 83       	std	Y+4, r23	; 0x04
     71c:	4d 83       	std	Y+5, r20	; 0x05
     71e:	89 81       	ldd	r24, Y+1	; 0x01
     720:	9a 81       	ldd	r25, Y+2	; 0x02
     722:	2b 81       	ldd	r18, Y+3	; 0x03
     724:	3c 81       	ldd	r19, Y+4	; 0x04
     726:	fc 01       	movw	r30, r24
     728:	23 83       	std	Z+3, r18	; 0x03
     72a:	34 83       	std	Z+4, r19	; 0x04
     72c:	89 81       	ldd	r24, Y+1	; 0x01
     72e:	9a 81       	ldd	r25, Y+2	; 0x02
     730:	fc 01       	movw	r30, r24
     732:	25 81       	ldd	r18, Z+5	; 0x05
     734:	89 81       	ldd	r24, Y+1	; 0x01
     736:	9a 81       	ldd	r25, Y+2	; 0x02
     738:	fc 01       	movw	r30, r24
     73a:	25 83       	std	Z+5, r18	; 0x05
     73c:	89 81       	ldd	r24, Y+1	; 0x01
     73e:	9a 81       	ldd	r25, Y+2	; 0x02
     740:	22 e0       	ldi	r18, 0x02	; 2
     742:	fc 01       	movw	r30, r24
     744:	26 83       	std	Z+6, r18	; 0x06
     746:	89 81       	ldd	r24, Y+1	; 0x01
     748:	9a 81       	ldd	r25, Y+2	; 0x02
     74a:	22 e0       	ldi	r18, 0x02	; 2
     74c:	fc 01       	movw	r30, r24
     74e:	22 83       	std	Z+2, r18	; 0x02
     750:	80 e6       	ldi	r24, 0x60	; 96
     752:	99 e0       	ldi	r25, 0x09	; 9
     754:	29 81       	ldd	r18, Y+1	; 0x01
     756:	3a 81       	ldd	r19, Y+2	; 0x02
     758:	f9 01       	movw	r30, r18
     75a:	23 81       	ldd	r18, Z+3	; 0x03
     75c:	34 81       	ldd	r19, Z+4	; 0x04
     75e:	f9 01       	movw	r30, r18
     760:	20 81       	ld	r18, Z
     762:	fc 01       	movw	r30, r24
     764:	24 83       	std	Z+4, r18	; 0x04
     766:	00 00       	nop
     768:	25 96       	adiw	r28, 0x05	; 5
     76a:	cd bf       	out	0x3d, r28	; 61
     76c:	de bf       	out	0x3e, r29	; 62
     76e:	df 91       	pop	r29
     770:	cf 91       	pop	r28
     772:	08 95       	ret

00000774 <_ZN15SPI_SLAVE_CLASS12SPI_ZCD_initEv>:
     774:	cf 93       	push	r28
     776:	df 93       	push	r29
     778:	00 d0       	rcall	.+0      	; 0x77a <_ZN15SPI_SLAVE_CLASS12SPI_ZCD_initEv+0x6>
     77a:	cd b7       	in	r28, 0x3d	; 61
     77c:	de b7       	in	r29, 0x3e	; 62
     77e:	89 83       	std	Y+1, r24	; 0x01
     780:	9a 83       	std	Y+2, r25	; 0x02
     782:	80 e6       	ldi	r24, 0x60	; 96
     784:	99 e0       	ldi	r25, 0x09	; 9
     786:	fc 01       	movw	r30, r24
     788:	10 82       	st	Z, r1
     78a:	80 e6       	ldi	r24, 0x60	; 96
     78c:	99 e0       	ldi	r25, 0x09	; 9
     78e:	fc 01       	movw	r30, r24
     790:	11 82       	std	Z+1, r1	; 0x01
     792:	80 e6       	ldi	r24, 0x60	; 96
     794:	99 e0       	ldi	r25, 0x09	; 9
     796:	21 ee       	ldi	r18, 0xE1	; 225
     798:	fc 01       	movw	r30, r24
     79a:	22 83       	std	Z+2, r18	; 0x02
     79c:	89 81       	ldd	r24, Y+1	; 0x01
     79e:	9a 81       	ldd	r25, Y+2	; 0x02
     7a0:	fc 01       	movw	r30, r24
     7a2:	12 82       	std	Z+2, r1	; 0x02
     7a4:	00 00       	nop
     7a6:	0f 90       	pop	r0
     7a8:	0f 90       	pop	r0
     7aa:	df 91       	pop	r29
     7ac:	cf 91       	pop	r28
     7ae:	08 95       	ret

000007b0 <_ZN15SPI_SLAVE_CLASS14SPI_ZCD_enableEv>:
     7b0:	cf 93       	push	r28
     7b2:	df 93       	push	r29
     7b4:	00 d0       	rcall	.+0      	; 0x7b6 <_ZN15SPI_SLAVE_CLASS14SPI_ZCD_enableEv+0x6>
     7b6:	cd b7       	in	r28, 0x3d	; 61
     7b8:	de b7       	in	r29, 0x3e	; 62
     7ba:	89 83       	std	Y+1, r24	; 0x01
     7bc:	9a 83       	std	Y+2, r25	; 0x02
     7be:	80 e6       	ldi	r24, 0x60	; 96
     7c0:	99 e0       	ldi	r25, 0x09	; 9
     7c2:	20 e6       	ldi	r18, 0x60	; 96
     7c4:	39 e0       	ldi	r19, 0x09	; 9
     7c6:	f9 01       	movw	r30, r18
     7c8:	20 81       	ld	r18, Z
     7ca:	21 60       	ori	r18, 0x01	; 1
     7cc:	fc 01       	movw	r30, r24
     7ce:	20 83       	st	Z, r18
     7d0:	00 00       	nop
     7d2:	0f 90       	pop	r0
     7d4:	0f 90       	pop	r0
     7d6:	df 91       	pop	r29
     7d8:	cf 91       	pop	r28
     7da:	08 95       	ret

000007dc <_ZN15SPI_SLAVE_CLASS13Check_CommandEv>:
void SPI_SLAVE_CLASS::Check_Command()
{
     7dc:	cf 93       	push	r28
     7de:	df 93       	push	r29
     7e0:	00 d0       	rcall	.+0      	; 0x7e2 <_ZN15SPI_SLAVE_CLASS13Check_CommandEv+0x6>
     7e2:	cd b7       	in	r28, 0x3d	; 61
     7e4:	de b7       	in	r29, 0x3e	; 62
     7e6:	89 83       	std	Y+1, r24	; 0x01
     7e8:	9a 83       	std	Y+2, r25	; 0x02
	if (PC3_get_level())
     7ea:	0e 94 76 02 	call	0x4ec	; 0x4ec <PC3_get_level>
     7ee:	88 23       	and	r24, r24
     7f0:	11 f0       	breq	.+4      	; 0x7f6 <_ZN15SPI_SLAVE_CLASS13Check_CommandEv+0x1a>
	{
		asm("nop");
     7f2:	00 00       	nop
			SPI_ZCD_write_block(tako.last_frequency, 4);
		}
	}
	
	
     7f4:	25 c0       	rjmp	.+74     	; 0x840 <_ZN15SPI_SLAVE_CLASS13Check_CommandEv+0x64>
	{
		asm("nop");
	} 
	else
	{
		command=SPI1.DATA;
     7f6:	80 e6       	ldi	r24, 0x60	; 96
     7f8:	99 e0       	ldi	r25, 0x09	; 9
     7fa:	fc 01       	movw	r30, r24
     7fc:	84 81       	ldd	r24, Z+4	; 0x04
     7fe:	80 93 90 40 	sts	0x4090, r24	; 0x804090 <_ZL7command>
		
		if ((SPI1.INTFLAGS & SPI_RXCIF_bm)){
     802:	80 e6       	ldi	r24, 0x60	; 96
     804:	99 e0       	ldi	r25, 0x09	; 9
     806:	fc 01       	movw	r30, r24
     808:	83 81       	ldd	r24, Z+3	; 0x03
     80a:	88 1f       	adc	r24, r24
     80c:	88 27       	eor	r24, r24
     80e:	88 1f       	adc	r24, r24
     810:	88 23       	and	r24, r24
     812:	79 f0       	breq	.+30     	; 0x832 <_ZN15SPI_SLAVE_CLASS13Check_CommandEv+0x56>
			
			if (command>1)
     814:	80 91 90 40 	lds	r24, 0x4090	; 0x804090 <_ZL7command>
     818:	82 30       	cpi	r24, 0x02	; 2
     81a:	90 f0       	brcs	.+36     	; 0x840 <_ZN15SPI_SLAVE_CLASS13Check_CommandEv+0x64>
			{
				Write_Data(tako.last_frequency, 4);
     81c:	20 91 69 40 	lds	r18, 0x4069	; 0x804069 <_ZL4tako+0x7>
     820:	30 91 6a 40 	lds	r19, 0x406A	; 0x80406a <_ZL4tako+0x8>
     824:	89 81       	ldd	r24, Y+1	; 0x01
     826:	9a 81       	ldd	r25, Y+2	; 0x02
     828:	44 e0       	ldi	r20, 0x04	; 4
     82a:	b9 01       	movw	r22, r18
     82c:	0e 94 83 03 	call	0x706	; 0x706 <_ZN15SPI_SLAVE_CLASS10Write_DataEPhh>
			SPI_ZCD_write_block(tako.last_frequency, 4);
		}
	}
	
	
     830:	07 c0       	rjmp	.+14     	; 0x840 <_ZN15SPI_SLAVE_CLASS13Check_CommandEv+0x64>
			}
			else
			{
			}
		}else{
			SPI_ZCD_write_block(tako.last_frequency, 4);
     832:	80 91 69 40 	lds	r24, 0x4069	; 0x804069 <_ZL4tako+0x7>
     836:	90 91 6a 40 	lds	r25, 0x406A	; 0x80406a <_ZL4tako+0x8>
     83a:	64 e0       	ldi	r22, 0x04	; 4
     83c:	0e 94 93 07 	call	0xf26	; 0xf26 <SPI_ZCD_write_block>
		}
	}
	
	
     840:	00 00       	nop
     842:	0f 90       	pop	r0
     844:	0f 90       	pop	r0
     846:	df 91       	pop	r29
     848:	cf 91       	pop	r28
     84a:	08 95       	ret

0000084c <_Z41__static_initialization_and_destruction_0ii>:
     84c:	cf 93       	push	r28
     84e:	df 93       	push	r29
     850:	00 d0       	rcall	.+0      	; 0x852 <_Z41__static_initialization_and_destruction_0ii+0x6>
     852:	00 d0       	rcall	.+0      	; 0x854 <_Z41__static_initialization_and_destruction_0ii+0x8>
     854:	cd b7       	in	r28, 0x3d	; 61
     856:	de b7       	in	r29, 0x3e	; 62
     858:	89 83       	std	Y+1, r24	; 0x01
     85a:	9a 83       	std	Y+2, r25	; 0x02
     85c:	6b 83       	std	Y+3, r22	; 0x03
     85e:	7c 83       	std	Y+4, r23	; 0x04
     860:	89 81       	ldd	r24, Y+1	; 0x01
     862:	9a 81       	ldd	r25, Y+2	; 0x02
     864:	01 97       	sbiw	r24, 0x01	; 1
     866:	61 f4       	brne	.+24     	; 0x880 <_Z41__static_initialization_and_destruction_0ii+0x34>
     868:	8b 81       	ldd	r24, Y+3	; 0x03
     86a:	9c 81       	ldd	r25, Y+4	; 0x04
     86c:	01 96       	adiw	r24, 0x01	; 1
     86e:	41 f4       	brne	.+16     	; 0x880 <_Z41__static_initialization_and_destruction_0ii+0x34>
     870:	86 e5       	ldi	r24, 0x56	; 86
     872:	90 e4       	ldi	r25, 0x40	; 64
     874:	0e 94 31 03 	call	0x662	; 0x662 <_ZN15SPI_SLAVE_CLASSC1Ev>
     878:	82 e6       	ldi	r24, 0x62	; 98
     87a:	90 e4       	ldi	r25, 0x40	; 64
     87c:	0e 94 aa 05 	call	0xb54	; 0xb54 <_ZN18Zero_Cross_CounterC1Ev>
     880:	89 81       	ldd	r24, Y+1	; 0x01
     882:	9a 81       	ldd	r25, Y+2	; 0x02
     884:	89 2b       	or	r24, r25
     886:	61 f4       	brne	.+24     	; 0x8a0 <_Z41__static_initialization_and_destruction_0ii+0x54>
     888:	8b 81       	ldd	r24, Y+3	; 0x03
     88a:	9c 81       	ldd	r25, Y+4	; 0x04
     88c:	01 96       	adiw	r24, 0x01	; 1
     88e:	41 f4       	brne	.+16     	; 0x8a0 <_Z41__static_initialization_and_destruction_0ii+0x54>
     890:	82 e6       	ldi	r24, 0x62	; 98
     892:	90 e4       	ldi	r25, 0x40	; 64
     894:	0e 94 c4 05 	call	0xb88	; 0xb88 <_ZN18Zero_Cross_CounterD1Ev>
     898:	86 e5       	ldi	r24, 0x56	; 86
     89a:	90 e4       	ldi	r25, 0x40	; 64
     89c:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <_ZN15SPI_SLAVE_CLASSD1Ev>
     8a0:	00 00       	nop
     8a2:	24 96       	adiw	r28, 0x04	; 4
     8a4:	cd bf       	out	0x3d, r28	; 61
     8a6:	de bf       	out	0x3e, r29	; 62
     8a8:	df 91       	pop	r29
     8aa:	cf 91       	pop	r28
     8ac:	08 95       	ret

000008ae <_GLOBAL__sub_I_ptrSPI_Slave>:
     8ae:	cf 93       	push	r28
     8b0:	df 93       	push	r29
     8b2:	cd b7       	in	r28, 0x3d	; 61
     8b4:	de b7       	in	r29, 0x3e	; 62
     8b6:	6f ef       	ldi	r22, 0xFF	; 255
     8b8:	7f ef       	ldi	r23, 0xFF	; 255
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	0e 94 26 04 	call	0x84c	; 0x84c <_Z41__static_initialization_and_destruction_0ii>
     8c2:	df 91       	pop	r29
     8c4:	cf 91       	pop	r28
     8c6:	08 95       	ret

000008c8 <_GLOBAL__sub_D_ptrSPI_Slave>:
     8c8:	cf 93       	push	r28
     8ca:	df 93       	push	r29
     8cc:	cd b7       	in	r28, 0x3d	; 61
     8ce:	de b7       	in	r29, 0x3e	; 62
     8d0:	6f ef       	ldi	r22, 0xFF	; 255
     8d2:	7f ef       	ldi	r23, 0xFF	; 255
     8d4:	80 e0       	ldi	r24, 0x00	; 0
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	0e 94 26 04 	call	0x84c	; 0x84c <_Z41__static_initialization_and_destruction_0ii>
     8dc:	df 91       	pop	r29
     8de:	cf 91       	pop	r28
     8e0:	08 95       	ret

000008e2 <__vector_28>:
	| 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
	| 1 << TCB_SYNCUPD_bp  /* Synchronize Update: enabled */
	| 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */

	return 0;
}
     8e2:	1f 92       	push	r1
     8e4:	0f 92       	push	r0
     8e6:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     8ea:	0f 92       	push	r0
     8ec:	11 24       	eor	r1, r1
     8ee:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     8f2:	0f 92       	push	r0
     8f4:	2f 93       	push	r18
     8f6:	8f 93       	push	r24
     8f8:	9f 93       	push	r25
     8fa:	ef 93       	push	r30
     8fc:	ff 93       	push	r31
     8fe:	cf 93       	push	r28
     900:	df 93       	push	r29
     902:	cd b7       	in	r28, 0x3d	; 61
     904:	de b7       	in	r29, 0x3e	; 62
     906:	80 91 a1 40 	lds	r24, 0x40A1	; 0x8040a1 <ptr_zero_cross_handler>
     90a:	90 91 a2 40 	lds	r25, 0x40A2	; 0x8040a2 <ptr_zero_cross_handler+0x1>
     90e:	21 e0       	ldi	r18, 0x01	; 1
     910:	fc 01       	movw	r30, r24
     912:	20 83       	st	Z, r18
     914:	80 91 a1 40 	lds	r24, 0x40A1	; 0x8040a1 <ptr_zero_cross_handler>
     918:	90 91 a2 40 	lds	r25, 0x40A2	; 0x8040a2 <ptr_zero_cross_handler+0x1>
     91c:	fc 01       	movw	r30, r24
     91e:	12 82       	std	Z+2, r1	; 0x02
     920:	80 ec       	ldi	r24, 0xC0	; 192
     922:	96 e0       	ldi	r25, 0x06	; 6
     924:	21 e0       	ldi	r18, 0x01	; 1
     926:	fc 01       	movw	r30, r24
     928:	23 83       	std	Z+3, r18	; 0x03
     92a:	00 00       	nop
     92c:	df 91       	pop	r29
     92e:	cf 91       	pop	r28
     930:	ff 91       	pop	r31
     932:	ef 91       	pop	r30
     934:	9f 91       	pop	r25
     936:	8f 91       	pop	r24
     938:	2f 91       	pop	r18
     93a:	0f 90       	pop	r0
     93c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     940:	0f 90       	pop	r0
     942:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     946:	0f 90       	pop	r0
     948:	1f 90       	pop	r1
     94a:	18 95       	reti

0000094c <__vector_52>:
     94c:	1f 92       	push	r1
     94e:	0f 92       	push	r0
     950:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     954:	0f 92       	push	r0
     956:	11 24       	eor	r1, r1
     958:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     95c:	0f 92       	push	r0
     95e:	2f 93       	push	r18
     960:	8f 93       	push	r24
     962:	9f 93       	push	r25
     964:	ef 93       	push	r30
     966:	ff 93       	push	r31
     968:	cf 93       	push	r28
     96a:	df 93       	push	r29
     96c:	cd b7       	in	r28, 0x3d	; 61
     96e:	de b7       	in	r29, 0x3e	; 62
     970:	80 91 a1 40 	lds	r24, 0x40A1	; 0x8040a1 <ptr_zero_cross_handler>
     974:	90 91 a2 40 	lds	r25, 0x40A2	; 0x8040a2 <ptr_zero_cross_handler+0x1>
     978:	21 e0       	ldi	r18, 0x01	; 1
     97a:	fc 01       	movw	r30, r24
     97c:	22 83       	std	Z+2, r18	; 0x02
     97e:	80 91 a1 40 	lds	r24, 0x40A1	; 0x8040a1 <ptr_zero_cross_handler>
     982:	90 91 a2 40 	lds	r25, 0x40A2	; 0x8040a2 <ptr_zero_cross_handler+0x1>
     986:	fc 01       	movw	r30, r24
     988:	10 82       	st	Z, r1
     98a:	88 ec       	ldi	r24, 0xC8	; 200
     98c:	96 e0       	ldi	r25, 0x06	; 6
     98e:	21 e0       	ldi	r18, 0x01	; 1
     990:	fc 01       	movw	r30, r24
     992:	23 83       	std	Z+3, r18	; 0x03
     994:	00 00       	nop
     996:	df 91       	pop	r29
     998:	cf 91       	pop	r28
     99a:	ff 91       	pop	r31
     99c:	ef 91       	pop	r30
     99e:	9f 91       	pop	r25
     9a0:	8f 91       	pop	r24
     9a2:	2f 91       	pop	r18
     9a4:	0f 90       	pop	r0
     9a6:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     9aa:	0f 90       	pop	r0
     9ac:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     9b0:	0f 90       	pop	r0
     9b2:	1f 90       	pop	r1
     9b4:	18 95       	reti

000009b6 <__vector_14>:
     9b6:	1f 92       	push	r1
     9b8:	0f 92       	push	r0
     9ba:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     9be:	0f 92       	push	r0
     9c0:	11 24       	eor	r1, r1
     9c2:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     9c6:	0f 92       	push	r0
     9c8:	2f 93       	push	r18
     9ca:	3f 93       	push	r19
     9cc:	4f 93       	push	r20
     9ce:	5f 93       	push	r21
     9d0:	6f 93       	push	r22
     9d2:	7f 93       	push	r23
     9d4:	8f 93       	push	r24
     9d6:	9f 93       	push	r25
     9d8:	af 93       	push	r26
     9da:	bf 93       	push	r27
     9dc:	ef 93       	push	r30
     9de:	ff 93       	push	r31
     9e0:	cf 93       	push	r28
     9e2:	df 93       	push	r29
     9e4:	cd b7       	in	r28, 0x3d	; 61
     9e6:	de b7       	in	r29, 0x3e	; 62
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	9b e0       	ldi	r25, 0x0B	; 11
     9ec:	fc 01       	movw	r30, r24
     9ee:	82 85       	ldd	r24, Z+10	; 0x0a
     9f0:	93 85       	ldd	r25, Z+11	; 0x0b
     9f2:	80 93 a3 40 	sts	0x40A3, r24	; 0x8040a3 <_ZL20capture_value_rising>
     9f6:	90 93 a4 40 	sts	0x40A4, r25	; 0x8040a4 <_ZL20capture_value_rising+0x1>
     9fa:	80 91 a1 40 	lds	r24, 0x40A1	; 0x8040a1 <ptr_zero_cross_handler>
     9fe:	90 91 a2 40 	lds	r25, 0x40A2	; 0x8040a2 <ptr_zero_cross_handler+0x1>
     a02:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN18Zero_Cross_Counter22CaptureCounterB_RisingEv>
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	9b e0       	ldi	r25, 0x0B	; 11
     a0a:	21 e0       	ldi	r18, 0x01	; 1
     a0c:	fc 01       	movw	r30, r24
     a0e:	26 83       	std	Z+6, r18	; 0x06
     a10:	00 00       	nop
     a12:	df 91       	pop	r29
     a14:	cf 91       	pop	r28
     a16:	ff 91       	pop	r31
     a18:	ef 91       	pop	r30
     a1a:	bf 91       	pop	r27
     a1c:	af 91       	pop	r26
     a1e:	9f 91       	pop	r25
     a20:	8f 91       	pop	r24
     a22:	7f 91       	pop	r23
     a24:	6f 91       	pop	r22
     a26:	5f 91       	pop	r21
     a28:	4f 91       	pop	r20
     a2a:	3f 91       	pop	r19
     a2c:	2f 91       	pop	r18
     a2e:	0f 90       	pop	r0
     a30:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     a34:	0f 90       	pop	r0
     a36:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     a3a:	0f 90       	pop	r0
     a3c:	1f 90       	pop	r1
     a3e:	18 95       	reti

00000a40 <__vector_15>:
     a40:	1f 92       	push	r1
     a42:	0f 92       	push	r0
     a44:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     a48:	0f 92       	push	r0
     a4a:	11 24       	eor	r1, r1
     a4c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     a50:	0f 92       	push	r0
     a52:	2f 93       	push	r18
     a54:	3f 93       	push	r19
     a56:	4f 93       	push	r20
     a58:	5f 93       	push	r21
     a5a:	6f 93       	push	r22
     a5c:	7f 93       	push	r23
     a5e:	8f 93       	push	r24
     a60:	9f 93       	push	r25
     a62:	af 93       	push	r26
     a64:	bf 93       	push	r27
     a66:	ef 93       	push	r30
     a68:	ff 93       	push	r31
     a6a:	cf 93       	push	r28
     a6c:	df 93       	push	r29
     a6e:	cd b7       	in	r28, 0x3d	; 61
     a70:	de b7       	in	r29, 0x3e	; 62
     a72:	80 e1       	ldi	r24, 0x10	; 16
     a74:	9b e0       	ldi	r25, 0x0B	; 11
     a76:	fc 01       	movw	r30, r24
     a78:	82 85       	ldd	r24, Z+10	; 0x0a
     a7a:	93 85       	ldd	r25, Z+11	; 0x0b
     a7c:	80 93 a5 40 	sts	0x40A5, r24	; 0x8040a5 <_ZL21capture_value_falling>
     a80:	90 93 a6 40 	sts	0x40A6, r25	; 0x8040a6 <_ZL21capture_value_falling+0x1>
     a84:	80 91 a1 40 	lds	r24, 0x40A1	; 0x8040a1 <ptr_zero_cross_handler>
     a88:	90 91 a2 40 	lds	r25, 0x40A2	; 0x8040a2 <ptr_zero_cross_handler+0x1>
     a8c:	0e 94 4a 06 	call	0xc94	; 0xc94 <_ZN18Zero_Cross_Counter23CaptureCounterB_FallingEv>
     a90:	80 e1       	ldi	r24, 0x10	; 16
     a92:	9b e0       	ldi	r25, 0x0B	; 11
     a94:	21 e0       	ldi	r18, 0x01	; 1
     a96:	fc 01       	movw	r30, r24
     a98:	26 83       	std	Z+6, r18	; 0x06
     a9a:	00 00       	nop
     a9c:	df 91       	pop	r29
     a9e:	cf 91       	pop	r28
     aa0:	ff 91       	pop	r31
     aa2:	ef 91       	pop	r30
     aa4:	bf 91       	pop	r27
     aa6:	af 91       	pop	r26
     aa8:	9f 91       	pop	r25
     aaa:	8f 91       	pop	r24
     aac:	7f 91       	pop	r23
     aae:	6f 91       	pop	r22
     ab0:	5f 91       	pop	r21
     ab2:	4f 91       	pop	r20
     ab4:	3f 91       	pop	r19
     ab6:	2f 91       	pop	r18
     ab8:	0f 90       	pop	r0
     aba:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     abe:	0f 90       	pop	r0
     ac0:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     ac4:	0f 90       	pop	r0
     ac6:	1f 90       	pop	r1
     ac8:	18 95       	reti

00000aca <__vector_17>:
     aca:	1f 92       	push	r1
     acc:	0f 92       	push	r0
     ace:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     ad2:	0f 92       	push	r0
     ad4:	11 24       	eor	r1, r1
     ad6:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     ada:	0f 92       	push	r0
     adc:	2f 93       	push	r18
     ade:	3f 93       	push	r19
     ae0:	4f 93       	push	r20
     ae2:	5f 93       	push	r21
     ae4:	6f 93       	push	r22
     ae6:	7f 93       	push	r23
     ae8:	8f 93       	push	r24
     aea:	9f 93       	push	r25
     aec:	af 93       	push	r26
     aee:	bf 93       	push	r27
     af0:	ef 93       	push	r30
     af2:	ff 93       	push	r31
     af4:	cf 93       	push	r28
     af6:	df 93       	push	r29
     af8:	cd b7       	in	r28, 0x3d	; 61
     afa:	de b7       	in	r29, 0x3e	; 62
     afc:	82 ea       	ldi	r24, 0xA2	; 162
     afe:	9b e0       	ldi	r25, 0x0B	; 11
     b00:	fc 01       	movw	r30, r24
     b02:	80 81       	ld	r24, Z
     b04:	91 81       	ldd	r25, Z+1	; 0x01
     b06:	80 93 a7 40 	sts	0x40A7, r24	; 0x8040a7 <_ZL18capture_value_tc_a>
     b0a:	90 93 a8 40 	sts	0x40A8, r25	; 0x8040a8 <_ZL18capture_value_tc_a+0x1>
     b0e:	80 91 a1 40 	lds	r24, 0x40A1	; 0x8040a1 <ptr_zero_cross_handler>
     b12:	90 91 a2 40 	lds	r25, 0x40A2	; 0x8040a2 <ptr_zero_cross_handler+0x1>
     b16:	0e 94 de 05 	call	0xbbc	; 0xbbc <_ZN18Zero_Cross_Counter15CaptureCounterCEv>
     b1a:	80 e8       	ldi	r24, 0x80	; 128
     b1c:	9b e0       	ldi	r25, 0x0B	; 11
     b1e:	2c e0       	ldi	r18, 0x0C	; 12
     b20:	fc 01       	movw	r30, r24
     b22:	25 87       	std	Z+13, r18	; 0x0d
     b24:	00 00       	nop
     b26:	df 91       	pop	r29
     b28:	cf 91       	pop	r28
     b2a:	ff 91       	pop	r31
     b2c:	ef 91       	pop	r30
     b2e:	bf 91       	pop	r27
     b30:	af 91       	pop	r26
     b32:	9f 91       	pop	r25
     b34:	8f 91       	pop	r24
     b36:	7f 91       	pop	r23
     b38:	6f 91       	pop	r22
     b3a:	5f 91       	pop	r21
     b3c:	4f 91       	pop	r20
     b3e:	3f 91       	pop	r19
     b40:	2f 91       	pop	r18
     b42:	0f 90       	pop	r0
     b44:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     b48:	0f 90       	pop	r0
     b4a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     b4e:	0f 90       	pop	r0
     b50:	1f 90       	pop	r1
     b52:	18 95       	reti

00000b54 <_ZN18Zero_Cross_CounterC1Ev>:
     b54:	cf 93       	push	r28
     b56:	df 93       	push	r29
     b58:	00 d0       	rcall	.+0      	; 0xb5a <_ZN18Zero_Cross_CounterC1Ev+0x6>
     b5a:	cd b7       	in	r28, 0x3d	; 61
     b5c:	de b7       	in	r29, 0x3e	; 62
     b5e:	89 83       	std	Y+1, r24	; 0x01
     b60:	9a 83       	std	Y+2, r25	; 0x02
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	9a 81       	ldd	r25, Y+2	; 0x02
     b66:	80 93 a1 40 	sts	0x40A1, r24	; 0x8040a1 <ptr_zero_cross_handler>
     b6a:	90 93 a2 40 	sts	0x40A2, r25	; 0x8040a2 <ptr_zero_cross_handler+0x1>
     b6e:	89 81       	ldd	r24, Y+1	; 0x01
     b70:	9a 81       	ldd	r25, Y+2	; 0x02
     b72:	29 ea       	ldi	r18, 0xA9	; 169
     b74:	30 e4       	ldi	r19, 0x40	; 64
     b76:	fc 01       	movw	r30, r24
     b78:	27 83       	std	Z+7, r18	; 0x07
     b7a:	30 87       	std	Z+8, r19	; 0x08
     b7c:	00 00       	nop
     b7e:	0f 90       	pop	r0
     b80:	0f 90       	pop	r0
     b82:	df 91       	pop	r29
     b84:	cf 91       	pop	r28
     b86:	08 95       	ret

00000b88 <_ZN18Zero_Cross_CounterD1Ev>:
     b88:	cf 93       	push	r28
     b8a:	df 93       	push	r29
     b8c:	00 d0       	rcall	.+0      	; 0xb8e <_ZN18Zero_Cross_CounterD1Ev+0x6>
     b8e:	cd b7       	in	r28, 0x3d	; 61
     b90:	de b7       	in	r29, 0x3e	; 62
     b92:	89 83       	std	Y+1, r24	; 0x01
     b94:	9a 83       	std	Y+2, r25	; 0x02
     b96:	00 00       	nop
     b98:	0f 90       	pop	r0
     b9a:	0f 90       	pop	r0
     b9c:	df 91       	pop	r29
     b9e:	cf 91       	pop	r28
     ba0:	08 95       	ret

00000ba2 <_ZN18Zero_Cross_Counter4InitEv>:
     ba2:	cf 93       	push	r28
     ba4:	df 93       	push	r29
     ba6:	00 d0       	rcall	.+0      	; 0xba8 <_ZN18Zero_Cross_Counter4InitEv+0x6>
     ba8:	cd b7       	in	r28, 0x3d	; 61
     baa:	de b7       	in	r29, 0x3e	; 62
     bac:	89 83       	std	Y+1, r24	; 0x01
     bae:	9a 83       	std	Y+2, r25	; 0x02
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	0f 90       	pop	r0
     bb4:	0f 90       	pop	r0
     bb6:	df 91       	pop	r29
     bb8:	cf 91       	pop	r28
     bba:	08 95       	ret

00000bbc <_ZN18Zero_Cross_Counter15CaptureCounterCEv>:

void Zero_Cross_Counter::CaptureCounterC(void){
     bbc:	cf 93       	push	r28
     bbe:	df 93       	push	r29
     bc0:	00 d0       	rcall	.+0      	; 0xbc2 <_ZN18Zero_Cross_Counter15CaptureCounterCEv+0x6>
     bc2:	cd b7       	in	r28, 0x3d	; 61
     bc4:	de b7       	in	r29, 0x3e	; 62
     bc6:	89 83       	std	Y+1, r24	; 0x01
     bc8:	9a 83       	std	Y+2, r25	; 0x02
	if (toogle_bit)
     bca:	89 81       	ldd	r24, Y+1	; 0x01
     bcc:	9a 81       	ldd	r25, Y+2	; 0x02
     bce:	fc 01       	movw	r30, r24
     bd0:	85 85       	ldd	r24, Z+13	; 0x0d
     bd2:	88 23       	and	r24, r24
     bd4:	99 f0       	breq	.+38     	; 0xbfc <_ZN18Zero_Cross_Counter15CaptureCounterCEv+0x40>
	{
	//	TCD0.CTRLE=TCD_SCAPTUREA_bm;
	//	while ((TCD0.STATUS & TCD_ENRDY_bm) == 0)
	//	; // Wait for Enable Ready to be high.
		capture_timer_tc_a=TCD0.CAPTUREA;
     bd6:	80 e8       	ldi	r24, 0x80	; 128
     bd8:	9b e0       	ldi	r25, 0x0B	; 11
     bda:	fc 01       	movw	r30, r24
     bdc:	22 a1       	ldd	r18, Z+34	; 0x22
     bde:	33 a1       	ldd	r19, Z+35	; 0x23
     be0:	89 81       	ldd	r24, Y+1	; 0x01
     be2:	9a 81       	ldd	r25, Y+2	; 0x02
     be4:	fc 01       	movw	r30, r24
     be6:	21 87       	std	Z+9, r18	; 0x09
     be8:	32 87       	std	Z+10, r19	; 0x0a
		if (capture_timer_tc_a>0)
     bea:	89 81       	ldd	r24, Y+1	; 0x01
     bec:	9a 81       	ldd	r25, Y+2	; 0x02
     bee:	fc 01       	movw	r30, r24
     bf0:	81 85       	ldd	r24, Z+9	; 0x09
     bf2:	92 85       	ldd	r25, Z+10	; 0x0a
     bf4:	89 2b       	or	r24, r25
     bf6:	f1 f0       	breq	.+60     	; 0xc34 <_ZN18Zero_Cross_Counter15CaptureCounterCEv+0x78>
		{
			asm("nop");
     bf8:	00 00       	nop
     bfa:	1c c0       	rjmp	.+56     	; 0xc34 <_ZN18Zero_Cross_Counter15CaptureCounterCEv+0x78>
	else
	{
	//		TCD0.CTRLE=TCD_SCAPTUREB_bm;
	//		while ((TCD0.STATUS & TCD_ENRDY_bm) == 0)
	//		; // Wait for Enable Ready to be high.
		capture_timer_tc_b=TCD0.CAPTUREA;
     bfc:	80 e8       	ldi	r24, 0x80	; 128
     bfe:	9b e0       	ldi	r25, 0x0B	; 11
     c00:	fc 01       	movw	r30, r24
     c02:	22 a1       	ldd	r18, Z+34	; 0x22
     c04:	33 a1       	ldd	r19, Z+35	; 0x23
     c06:	89 81       	ldd	r24, Y+1	; 0x01
     c08:	9a 81       	ldd	r25, Y+2	; 0x02
     c0a:	fc 01       	movw	r30, r24
     c0c:	23 87       	std	Z+11, r18	; 0x0b
     c0e:	34 87       	std	Z+12, r19	; 0x0c
				capture_timer_tc_b=TCD0.CAPTUREA;
     c10:	80 e8       	ldi	r24, 0x80	; 128
     c12:	9b e0       	ldi	r25, 0x0B	; 11
     c14:	fc 01       	movw	r30, r24
     c16:	22 a1       	ldd	r18, Z+34	; 0x22
     c18:	33 a1       	ldd	r19, Z+35	; 0x23
     c1a:	89 81       	ldd	r24, Y+1	; 0x01
     c1c:	9a 81       	ldd	r25, Y+2	; 0x02
     c1e:	fc 01       	movw	r30, r24
     c20:	23 87       	std	Z+11, r18	; 0x0b
     c22:	34 87       	std	Z+12, r19	; 0x0c
				if (capture_timer_tc_b>0)
     c24:	89 81       	ldd	r24, Y+1	; 0x01
     c26:	9a 81       	ldd	r25, Y+2	; 0x02
     c28:	fc 01       	movw	r30, r24
     c2a:	83 85       	ldd	r24, Z+11	; 0x0b
     c2c:	94 85       	ldd	r25, Z+12	; 0x0c
     c2e:	89 2b       	or	r24, r25
     c30:	09 f0       	breq	.+2      	; 0xc34 <_ZN18Zero_Cross_Counter15CaptureCounterCEv+0x78>
				{
					asm("nop");
     c32:	00 00       	nop
				}
		
	}
	TCD0.CTRLE=TCD_RESTART_bm;
     c34:	80 e8       	ldi	r24, 0x80	; 128
     c36:	9b e0       	ldi	r25, 0x0B	; 11
     c38:	24 e0       	ldi	r18, 0x04	; 4
     c3a:	fc 01       	movw	r30, r24
     c3c:	24 83       	std	Z+4, r18	; 0x04
	toogle_bit=!toogle_bit;
     c3e:	89 81       	ldd	r24, Y+1	; 0x01
     c40:	9a 81       	ldd	r25, Y+2	; 0x02
     c42:	fc 01       	movw	r30, r24
     c44:	95 85       	ldd	r25, Z+13	; 0x0d
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	29 2f       	mov	r18, r25
     c4a:	28 27       	eor	r18, r24
     c4c:	89 81       	ldd	r24, Y+1	; 0x01
     c4e:	9a 81       	ldd	r25, Y+2	; 0x02
     c50:	fc 01       	movw	r30, r24
     c52:	25 87       	std	Z+13, r18	; 0x0d
	leading_edge=false;
     c54:	89 81       	ldd	r24, Y+1	; 0x01
     c56:	9a 81       	ldd	r25, Y+2	; 0x02
     c58:	fc 01       	movw	r30, r24
     c5a:	10 82       	st	Z, r1
}
     c5c:	00 00       	nop
     c5e:	0f 90       	pop	r0
     c60:	0f 90       	pop	r0
     c62:	df 91       	pop	r29
     c64:	cf 91       	pop	r28
     c66:	08 95       	ret

00000c68 <_ZN18Zero_Cross_Counter22CaptureCounterB_RisingEv>:
void Zero_Cross_Counter::CaptureCounterB_Rising(void){
     c68:	cf 93       	push	r28
     c6a:	df 93       	push	r29
     c6c:	00 d0       	rcall	.+0      	; 0xc6e <_ZN18Zero_Cross_Counter22CaptureCounterB_RisingEv+0x6>
     c6e:	cd b7       	in	r28, 0x3d	; 61
     c70:	de b7       	in	r29, 0x3e	; 62
     c72:	89 83       	std	Y+1, r24	; 0x01
     c74:	9a 83       	std	Y+2, r25	; 0x02
	capture_timer_rise= capture_value_rising;
     c76:	20 91 a3 40 	lds	r18, 0x40A3	; 0x8040a3 <_ZL20capture_value_rising>
     c7a:	30 91 a4 40 	lds	r19, 0x40A4	; 0x8040a4 <_ZL20capture_value_rising+0x1>
     c7e:	89 81       	ldd	r24, Y+1	; 0x01
     c80:	9a 81       	ldd	r25, Y+2	; 0x02
     c82:	fc 01       	movw	r30, r24
     c84:	25 83       	std	Z+5, r18	; 0x05
     c86:	36 83       	std	Z+6, r19	; 0x06
}
     c88:	00 00       	nop
     c8a:	0f 90       	pop	r0
     c8c:	0f 90       	pop	r0
     c8e:	df 91       	pop	r29
     c90:	cf 91       	pop	r28
     c92:	08 95       	ret

00000c94 <_ZN18Zero_Cross_Counter23CaptureCounterB_FallingEv>:
void Zero_Cross_Counter::CaptureCounterB_Falling(void){
     c94:	cf 93       	push	r28
     c96:	df 93       	push	r29
     c98:	00 d0       	rcall	.+0      	; 0xc9a <_ZN18Zero_Cross_Counter23CaptureCounterB_FallingEv+0x6>
     c9a:	cd b7       	in	r28, 0x3d	; 61
     c9c:	de b7       	in	r29, 0x3e	; 62
     c9e:	89 83       	std	Y+1, r24	; 0x01
     ca0:	9a 83       	std	Y+2, r25	; 0x02
	capture_timer_fall= capture_value_falling;
     ca2:	20 91 a5 40 	lds	r18, 0x40A5	; 0x8040a5 <_ZL21capture_value_falling>
     ca6:	30 91 a6 40 	lds	r19, 0x40A6	; 0x8040a6 <_ZL21capture_value_falling+0x1>
     caa:	89 81       	ldd	r24, Y+1	; 0x01
     cac:	9a 81       	ldd	r25, Y+2	; 0x02
     cae:	fc 01       	movw	r30, r24
     cb0:	23 83       	std	Z+3, r18	; 0x03
     cb2:	34 83       	std	Z+4, r19	; 0x04
}
     cb4:	00 00       	nop
     cb6:	0f 90       	pop	r0
     cb8:	0f 90       	pop	r0
     cba:	df 91       	pop	r29
     cbc:	cf 91       	pop	r28
     cbe:	08 95       	ret

00000cc0 <_ZN18Zero_Cross_Counter18Set_Last_FrequencyEm>:

void Zero_Cross_Counter::Set_Last_Frequency(uint32_t lf){
     cc0:	cf 93       	push	r28
     cc2:	df 93       	push	r29
     cc4:	cd b7       	in	r28, 0x3d	; 61
     cc6:	de b7       	in	r29, 0x3e	; 62
     cc8:	2c 97       	sbiw	r28, 0x0c	; 12
     cca:	cd bf       	out	0x3d, r28	; 61
     ccc:	de bf       	out	0x3e, r29	; 62
     cce:	8f 83       	std	Y+7, r24	; 0x07
     cd0:	98 87       	std	Y+8, r25	; 0x08
     cd2:	49 87       	std	Y+9, r20	; 0x09
     cd4:	5a 87       	std	Y+10, r21	; 0x0a
     cd6:	6b 87       	std	Y+11, r22	; 0x0b
     cd8:	7c 87       	std	Y+12, r23	; 0x0c
	uint32_t local_value;
	for (int i = 0; i < 4; i++)
     cda:	19 82       	std	Y+1, r1	; 0x01
     cdc:	1a 82       	std	Y+2, r1	; 0x02
     cde:	89 81       	ldd	r24, Y+1	; 0x01
     ce0:	9a 81       	ldd	r25, Y+2	; 0x02
     ce2:	04 97       	sbiw	r24, 0x04	; 4
     ce4:	9c f5       	brge	.+102    	; 0xd4c <_ZN18Zero_Cross_Counter18Set_Last_FrequencyEm+0x8c>
	{
		local_value=(lf>>((3-i)*8))&0xff;
     ce6:	23 e0       	ldi	r18, 0x03	; 3
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	89 81       	ldd	r24, Y+1	; 0x01
     cec:	9a 81       	ldd	r25, Y+2	; 0x02
     cee:	a9 01       	movw	r20, r18
     cf0:	48 1b       	sub	r20, r24
     cf2:	59 0b       	sbc	r21, r25
     cf4:	ca 01       	movw	r24, r20
     cf6:	9c 01       	movw	r18, r24
     cf8:	22 0f       	add	r18, r18
     cfa:	33 1f       	adc	r19, r19
     cfc:	22 0f       	add	r18, r18
     cfe:	33 1f       	adc	r19, r19
     d00:	22 0f       	add	r18, r18
     d02:	33 1f       	adc	r19, r19
     d04:	89 85       	ldd	r24, Y+9	; 0x09
     d06:	9a 85       	ldd	r25, Y+10	; 0x0a
     d08:	ab 85       	ldd	r26, Y+11	; 0x0b
     d0a:	bc 85       	ldd	r27, Y+12	; 0x0c
     d0c:	04 c0       	rjmp	.+8      	; 0xd16 <_ZN18Zero_Cross_Counter18Set_Last_FrequencyEm+0x56>
     d0e:	b6 95       	lsr	r27
     d10:	a7 95       	ror	r26
     d12:	97 95       	ror	r25
     d14:	87 95       	ror	r24
     d16:	2a 95       	dec	r18
     d18:	d2 f7       	brpl	.-12     	; 0xd0e <_ZN18Zero_Cross_Counter18Set_Last_FrequencyEm+0x4e>
     d1a:	99 27       	eor	r25, r25
     d1c:	aa 27       	eor	r26, r26
     d1e:	bb 27       	eor	r27, r27
     d20:	8b 83       	std	Y+3, r24	; 0x03
     d22:	9c 83       	std	Y+4, r25	; 0x04
     d24:	ad 83       	std	Y+5, r26	; 0x05
     d26:	be 83       	std	Y+6, r27	; 0x06
		last_frequency[i]=((uint8_t)local_value&0xff);
     d28:	8f 81       	ldd	r24, Y+7	; 0x07
     d2a:	98 85       	ldd	r25, Y+8	; 0x08
     d2c:	fc 01       	movw	r30, r24
     d2e:	27 81       	ldd	r18, Z+7	; 0x07
     d30:	30 85       	ldd	r19, Z+8	; 0x08
     d32:	89 81       	ldd	r24, Y+1	; 0x01
     d34:	9a 81       	ldd	r25, Y+2	; 0x02
     d36:	82 0f       	add	r24, r18
     d38:	93 1f       	adc	r25, r19
     d3a:	2b 81       	ldd	r18, Y+3	; 0x03
     d3c:	fc 01       	movw	r30, r24
     d3e:	20 83       	st	Z, r18
	capture_timer_fall= capture_value_falling;
}

void Zero_Cross_Counter::Set_Last_Frequency(uint32_t lf){
	uint32_t local_value;
	for (int i = 0; i < 4; i++)
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	9a 81       	ldd	r25, Y+2	; 0x02
     d44:	01 96       	adiw	r24, 0x01	; 1
     d46:	89 83       	std	Y+1, r24	; 0x01
     d48:	9a 83       	std	Y+2, r25	; 0x02
     d4a:	c9 cf       	rjmp	.-110    	; 0xcde <_ZN18Zero_Cross_Counter18Set_Last_FrequencyEm+0x1e>
		local_value=(lf>>((3-i)*8))&0xff;
		last_frequency[i]=((uint8_t)local_value&0xff);
	}
	//memcpy((void*)last_frequency,(void*)&lf,4);
	
     d4c:	00 00       	nop
     d4e:	2c 96       	adiw	r28, 0x0c	; 12
     d50:	cd bf       	out	0x3d, r28	; 61
     d52:	de bf       	out	0x3e, r29	; 62
     d54:	df 91       	pop	r29
     d56:	cf 91       	pop	r28
     d58:	08 95       	ret

00000d5a <_Z41__static_initialization_and_destruction_0ii>:
     d5a:	cf 93       	push	r28
     d5c:	df 93       	push	r29
     d5e:	00 d0       	rcall	.+0      	; 0xd60 <_Z41__static_initialization_and_destruction_0ii+0x6>
     d60:	00 d0       	rcall	.+0      	; 0xd62 <_Z41__static_initialization_and_destruction_0ii+0x8>
     d62:	cd b7       	in	r28, 0x3d	; 61
     d64:	de b7       	in	r29, 0x3e	; 62
     d66:	89 83       	std	Y+1, r24	; 0x01
     d68:	9a 83       	std	Y+2, r25	; 0x02
     d6a:	6b 83       	std	Y+3, r22	; 0x03
     d6c:	7c 83       	std	Y+4, r23	; 0x04
     d6e:	89 81       	ldd	r24, Y+1	; 0x01
     d70:	9a 81       	ldd	r25, Y+2	; 0x02
     d72:	01 97       	sbiw	r24, 0x01	; 1
     d74:	41 f4       	brne	.+16     	; 0xd86 <_Z41__static_initialization_and_destruction_0ii+0x2c>
     d76:	8b 81       	ldd	r24, Y+3	; 0x03
     d78:	9c 81       	ldd	r25, Y+4	; 0x04
     d7a:	01 96       	adiw	r24, 0x01	; 1
     d7c:	21 f4       	brne	.+8      	; 0xd86 <_Z41__static_initialization_and_destruction_0ii+0x2c>
     d7e:	83 e9       	ldi	r24, 0x93	; 147
     d80:	90 e4       	ldi	r25, 0x40	; 64
     d82:	0e 94 aa 05 	call	0xb54	; 0xb54 <_ZN18Zero_Cross_CounterC1Ev>
     d86:	89 81       	ldd	r24, Y+1	; 0x01
     d88:	9a 81       	ldd	r25, Y+2	; 0x02
     d8a:	89 2b       	or	r24, r25
     d8c:	41 f4       	brne	.+16     	; 0xd9e <_Z41__static_initialization_and_destruction_0ii+0x44>
     d8e:	8b 81       	ldd	r24, Y+3	; 0x03
     d90:	9c 81       	ldd	r25, Y+4	; 0x04
     d92:	01 96       	adiw	r24, 0x01	; 1
     d94:	21 f4       	brne	.+8      	; 0xd9e <_Z41__static_initialization_and_destruction_0ii+0x44>
     d96:	83 e9       	ldi	r24, 0x93	; 147
     d98:	90 e4       	ldi	r25, 0x40	; 64
     d9a:	0e 94 c4 05 	call	0xb88	; 0xb88 <_ZN18Zero_Cross_CounterD1Ev>
     d9e:	00 00       	nop
     da0:	24 96       	adiw	r28, 0x04	; 4
     da2:	cd bf       	out	0x3d, r28	; 61
     da4:	de bf       	out	0x3e, r29	; 62
     da6:	df 91       	pop	r29
     da8:	cf 91       	pop	r28
     daa:	08 95       	ret

00000dac <_GLOBAL__sub_I_ptr_zero_cross_handler>:
     dac:	cf 93       	push	r28
     dae:	df 93       	push	r29
     db0:	cd b7       	in	r28, 0x3d	; 61
     db2:	de b7       	in	r29, 0x3e	; 62
     db4:	6f ef       	ldi	r22, 0xFF	; 255
     db6:	7f ef       	ldi	r23, 0xFF	; 255
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	0e 94 ad 06 	call	0xd5a	; 0xd5a <_Z41__static_initialization_and_destruction_0ii>
     dc0:	df 91       	pop	r29
     dc2:	cf 91       	pop	r28
     dc4:	08 95       	ret

00000dc6 <_GLOBAL__sub_D_ptr_zero_cross_handler>:
     dc6:	cf 93       	push	r28
     dc8:	df 93       	push	r29
     dca:	cd b7       	in	r28, 0x3d	; 61
     dcc:	de b7       	in	r29, 0x3e	; 62
     dce:	6f ef       	ldi	r22, 0xFF	; 255
     dd0:	7f ef       	ldi	r23, 0xFF	; 255
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	0e 94 ad 06 	call	0xd5a	; 0xd5a <_Z41__static_initialization_and_destruction_0ii>
     dda:	df 91       	pop	r29
     ddc:	cf 91       	pop	r28
     dde:	08 95       	ret

00000de0 <SPI_REFERENCE_init>:
	SPI_ZCD_desc.size   = size;
	SPI_ZCD_desc.type   = SPI_EXCHANGE;
	SPI_ZCD_desc.status = SPI_BUSY;

	SPI1.DATA = *SPI_ZCD_desc.data;
}
     de0:	cf 93       	push	r28
     de2:	df 93       	push	r29
     de4:	cd b7       	in	r28, 0x3d	; 61
     de6:	de b7       	in	r29, 0x3e	; 62
     de8:	80 e4       	ldi	r24, 0x40	; 64
     dea:	99 e0       	ldi	r25, 0x09	; 9
     dec:	21 e0       	ldi	r18, 0x01	; 1
     dee:	fc 01       	movw	r30, r24
     df0:	20 83       	st	Z, r18
     df2:	10 92 ad 40 	sts	0x40AD, r1	; 0x8040ad <SPI_REFERENCE_desc>
     df6:	00 00       	nop
     df8:	df 91       	pop	r29
     dfa:	cf 91       	pop	r28
     dfc:	08 95       	ret

00000dfe <SPI_ZCD_init>:
     dfe:	cf 93       	push	r28
     e00:	df 93       	push	r29
     e02:	cd b7       	in	r28, 0x3d	; 61
     e04:	de b7       	in	r29, 0x3e	; 62
     e06:	80 e6       	ldi	r24, 0x60	; 96
     e08:	99 e0       	ldi	r25, 0x09	; 9
     e0a:	21 e0       	ldi	r18, 0x01	; 1
     e0c:	fc 01       	movw	r30, r24
     e0e:	20 83       	st	Z, r18
     e10:	80 e6       	ldi	r24, 0x60	; 96
     e12:	99 e0       	ldi	r25, 0x09	; 9
     e14:	21 ee       	ldi	r18, 0xE1	; 225
     e16:	fc 01       	movw	r30, r24
     e18:	22 83       	std	Z+2, r18	; 0x02
     e1a:	10 92 ae 40 	sts	0x40AE, r1	; 0x8040ae <SPI_ZCD_desc>
     e1e:	10 92 b3 40 	sts	0x40B3, r1	; 0x8040b3 <SPI_ZCD_desc+0x5>
     e22:	10 92 b4 40 	sts	0x40B4, r1	; 0x8040b4 <SPI_ZCD_desc+0x6>
     e26:	00 00       	nop
     e28:	df 91       	pop	r29
     e2a:	cf 91       	pop	r28
     e2c:	08 95       	ret

00000e2e <__vector_37>:
     e2e:	1f 92       	push	r1
     e30:	0f 92       	push	r0
     e32:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     e36:	0f 92       	push	r0
     e38:	11 24       	eor	r1, r1
     e3a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     e3e:	0f 92       	push	r0
     e40:	2f 93       	push	r18
     e42:	3f 93       	push	r19
     e44:	4f 93       	push	r20
     e46:	5f 93       	push	r21
     e48:	6f 93       	push	r22
     e4a:	7f 93       	push	r23
     e4c:	8f 93       	push	r24
     e4e:	9f 93       	push	r25
     e50:	af 93       	push	r26
     e52:	bf 93       	push	r27
     e54:	ef 93       	push	r30
     e56:	ff 93       	push	r31
     e58:	cf 93       	push	r28
     e5a:	df 93       	push	r29
     e5c:	00 d0       	rcall	.+0      	; 0xe5e <__vector_37+0x30>
     e5e:	cd b7       	in	r28, 0x3d	; 61
     e60:	de b7       	in	r29, 0x3e	; 62
     e62:	80 e6       	ldi	r24, 0x60	; 96
     e64:	99 e0       	ldi	r25, 0x09	; 9
     e66:	fc 01       	movw	r30, r24
     e68:	84 81       	ldd	r24, Z+4	; 0x04
     e6a:	8a 83       	std	Y+2, r24	; 0x02
     e6c:	19 82       	std	Y+1, r1	; 0x01
     e6e:	80 e6       	ldi	r24, 0x60	; 96
     e70:	99 e0       	ldi	r25, 0x09	; 9
     e72:	20 e8       	ldi	r18, 0x80	; 128
     e74:	fc 01       	movw	r30, r24
     e76:	23 83       	std	Z+3, r18	; 0x03
     e78:	80 91 b2 40 	lds	r24, 0x40B2	; 0x8040b2 <SPI_ZCD_desc+0x4>
     e7c:	82 30       	cpi	r24, 0x02	; 2
     e7e:	39 f0       	breq	.+14     	; 0xe8e <__vector_37+0x60>
     e80:	80 91 af 40 	lds	r24, 0x40AF	; 0x8040af <SPI_ZCD_desc+0x1>
     e84:	90 91 b0 40 	lds	r25, 0x40B0	; 0x8040b0 <SPI_ZCD_desc+0x2>
     e88:	2a 81       	ldd	r18, Y+2	; 0x02
     e8a:	fc 01       	movw	r30, r24
     e8c:	20 83       	st	Z, r18
     e8e:	80 91 af 40 	lds	r24, 0x40AF	; 0x8040af <SPI_ZCD_desc+0x1>
     e92:	90 91 b0 40 	lds	r25, 0x40B0	; 0x8040b0 <SPI_ZCD_desc+0x2>
     e96:	01 96       	adiw	r24, 0x01	; 1
     e98:	80 93 af 40 	sts	0x40AF, r24	; 0x8040af <SPI_ZCD_desc+0x1>
     e9c:	90 93 b0 40 	sts	0x40B0, r25	; 0x8040b0 <SPI_ZCD_desc+0x2>
     ea0:	80 91 b2 40 	lds	r24, 0x40B2	; 0x8040b2 <SPI_ZCD_desc+0x4>
     ea4:	81 30       	cpi	r24, 0x01	; 1
     ea6:	39 f0       	breq	.+14     	; 0xeb6 <__vector_37+0x88>
     ea8:	80 91 af 40 	lds	r24, 0x40AF	; 0x8040af <SPI_ZCD_desc+0x1>
     eac:	90 91 b0 40 	lds	r25, 0x40B0	; 0x8040b0 <SPI_ZCD_desc+0x2>
     eb0:	fc 01       	movw	r30, r24
     eb2:	80 81       	ld	r24, Z
     eb4:	89 83       	std	Y+1, r24	; 0x01
     eb6:	80 91 b1 40 	lds	r24, 0x40B1	; 0x8040b1 <SPI_ZCD_desc+0x3>
     eba:	81 50       	subi	r24, 0x01	; 1
     ebc:	80 93 b1 40 	sts	0x40B1, r24	; 0x8040b1 <SPI_ZCD_desc+0x3>
     ec0:	80 91 b1 40 	lds	r24, 0x40B1	; 0x8040b1 <SPI_ZCD_desc+0x3>
     ec4:	88 23       	and	r24, r24
     ec6:	31 f0       	breq	.+12     	; 0xed4 <__vector_37+0xa6>
     ec8:	80 e6       	ldi	r24, 0x60	; 96
     eca:	99 e0       	ldi	r25, 0x09	; 9
     ecc:	29 81       	ldd	r18, Y+1	; 0x01
     ece:	fc 01       	movw	r30, r24
     ed0:	24 83       	std	Z+4, r18	; 0x04
     ed2:	0f c0       	rjmp	.+30     	; 0xef2 <__vector_37+0xc4>
     ed4:	83 e0       	ldi	r24, 0x03	; 3
     ed6:	80 93 ae 40 	sts	0x40AE, r24	; 0x8040ae <SPI_ZCD_desc>
     eda:	80 91 b3 40 	lds	r24, 0x40B3	; 0x8040b3 <SPI_ZCD_desc+0x5>
     ede:	90 91 b4 40 	lds	r25, 0x40B4	; 0x8040b4 <SPI_ZCD_desc+0x6>
     ee2:	89 2b       	or	r24, r25
     ee4:	31 f0       	breq	.+12     	; 0xef2 <__vector_37+0xc4>
     ee6:	80 91 b3 40 	lds	r24, 0x40B3	; 0x8040b3 <SPI_ZCD_desc+0x5>
     eea:	90 91 b4 40 	lds	r25, 0x40B4	; 0x8040b4 <SPI_ZCD_desc+0x6>
     eee:	fc 01       	movw	r30, r24
     ef0:	09 95       	icall
     ef2:	00 00       	nop
     ef4:	0f 90       	pop	r0
     ef6:	0f 90       	pop	r0
     ef8:	df 91       	pop	r29
     efa:	cf 91       	pop	r28
     efc:	ff 91       	pop	r31
     efe:	ef 91       	pop	r30
     f00:	bf 91       	pop	r27
     f02:	af 91       	pop	r26
     f04:	9f 91       	pop	r25
     f06:	8f 91       	pop	r24
     f08:	7f 91       	pop	r23
     f0a:	6f 91       	pop	r22
     f0c:	5f 91       	pop	r21
     f0e:	4f 91       	pop	r20
     f10:	3f 91       	pop	r19
     f12:	2f 91       	pop	r18
     f14:	0f 90       	pop	r0
     f16:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     f1a:	0f 90       	pop	r0
     f1c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     f20:	0f 90       	pop	r0
     f22:	1f 90       	pop	r1
     f24:	18 95       	reti

00000f26 <SPI_ZCD_write_block>:

void SPI_ZCD_write_block(void *block, uint8_t size)
{
     f26:	cf 93       	push	r28
     f28:	df 93       	push	r29
     f2a:	00 d0       	rcall	.+0      	; 0xf2c <SPI_ZCD_write_block+0x6>
     f2c:	1f 92       	push	r1
     f2e:	cd b7       	in	r28, 0x3d	; 61
     f30:	de b7       	in	r29, 0x3e	; 62
     f32:	89 83       	std	Y+1, r24	; 0x01
     f34:	9a 83       	std	Y+2, r25	; 0x02
     f36:	6b 83       	std	Y+3, r22	; 0x03
	SPI_ZCD_desc.data   = (uint8_t *)block;
     f38:	89 81       	ldd	r24, Y+1	; 0x01
     f3a:	9a 81       	ldd	r25, Y+2	; 0x02
     f3c:	80 93 af 40 	sts	0x40AF, r24	; 0x8040af <SPI_ZCD_desc+0x1>
     f40:	90 93 b0 40 	sts	0x40B0, r25	; 0x8040b0 <SPI_ZCD_desc+0x2>
	SPI_ZCD_desc.size   = size;
     f44:	8b 81       	ldd	r24, Y+3	; 0x03
     f46:	80 93 b1 40 	sts	0x40B1, r24	; 0x8040b1 <SPI_ZCD_desc+0x3>
	SPI_ZCD_desc.type   = SPI_WRITE;
     f4a:	82 e0       	ldi	r24, 0x02	; 2
     f4c:	80 93 b2 40 	sts	0x40B2, r24	; 0x8040b2 <SPI_ZCD_desc+0x4>
	SPI_ZCD_desc.status = SPI_BUSY;
     f50:	82 e0       	ldi	r24, 0x02	; 2
     f52:	80 93 ae 40 	sts	0x40AE, r24	; 0x8040ae <SPI_ZCD_desc>

	SPI1.DATA = *SPI_ZCD_desc.data;
     f56:	80 e6       	ldi	r24, 0x60	; 96
     f58:	99 e0       	ldi	r25, 0x09	; 9
     f5a:	20 91 af 40 	lds	r18, 0x40AF	; 0x8040af <SPI_ZCD_desc+0x1>
     f5e:	30 91 b0 40 	lds	r19, 0x40B0	; 0x8040b0 <SPI_ZCD_desc+0x2>
     f62:	f9 01       	movw	r30, r18
     f64:	20 81       	ld	r18, Z
     f66:	fc 01       	movw	r30, r24
     f68:	24 83       	std	Z+4, r18	; 0x04
}
     f6a:	00 00       	nop
     f6c:	23 96       	adiw	r28, 0x03	; 3
     f6e:	cd bf       	out	0x3d, r28	; 61
     f70:	de bf       	out	0x3e, r29	; 62
     f72:	df 91       	pop	r29
     f74:	cf 91       	pop	r28
     f76:	08 95       	ret

00000f78 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     f78:	cf 93       	push	r28
     f7a:	df 93       	push	r29
     f7c:	cd b7       	in	r28, 0x3d	; 61
     f7e:	de b7       	in	r29, 0x3e	; 62
	system_init();
     f80:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <system_init>
}
     f84:	00 00       	nop
     f86:	df 91       	pop	r29
     f88:	cf 91       	pop	r28
     f8a:	08 95       	ret

00000f8c <PORTA_set_pin_pull_mode>:
 *
 * \param[in] pin       The pin number within port
 * \param[in] pull_mode Pin pull mode
 */
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
     f8c:	cf 93       	push	r28
     f8e:	df 93       	push	r29
     f90:	00 d0       	rcall	.+0      	; 0xf92 <PORTA_set_pin_pull_mode+0x6>
     f92:	00 d0       	rcall	.+0      	; 0xf94 <PORTA_set_pin_pull_mode+0x8>
     f94:	cd b7       	in	r28, 0x3d	; 61
     f96:	de b7       	in	r29, 0x3e	; 62
     f98:	8b 83       	std	Y+3, r24	; 0x03
     f9a:	6c 83       	std	Y+4, r22	; 0x04
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);
     f9c:	8b 81       	ldd	r24, Y+3	; 0x03
     f9e:	88 2f       	mov	r24, r24
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	80 5f       	subi	r24, 0xF0	; 240
     fa4:	9b 4f       	sbci	r25, 0xFB	; 251
     fa6:	89 83       	std	Y+1, r24	; 0x01
     fa8:	9a 83       	std	Y+2, r25	; 0x02

	if (pull_mode == PORT_PULL_UP) {
     faa:	8c 81       	ldd	r24, Y+4	; 0x04
     fac:	81 30       	cpi	r24, 0x01	; 1
     fae:	59 f4       	brne	.+22     	; 0xfc6 <PORTA_set_pin_pull_mode+0x3a>
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     fb0:	89 81       	ldd	r24, Y+1	; 0x01
     fb2:	9a 81       	ldd	r25, Y+2	; 0x02
     fb4:	fc 01       	movw	r30, r24
     fb6:	80 81       	ld	r24, Z
     fb8:	28 2f       	mov	r18, r24
     fba:	28 60       	ori	r18, 0x08	; 8
     fbc:	89 81       	ldd	r24, Y+1	; 0x01
     fbe:	9a 81       	ldd	r25, Y+2	; 0x02
     fc0:	fc 01       	movw	r30, r24
     fc2:	20 83       	st	Z, r18
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
	}
}
     fc4:	0d c0       	rjmp	.+26     	; 0xfe0 <PORTA_set_pin_pull_mode+0x54>
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
     fc6:	8c 81       	ldd	r24, Y+4	; 0x04
     fc8:	88 23       	and	r24, r24
     fca:	51 f4       	brne	.+20     	; 0xfe0 <PORTA_set_pin_pull_mode+0x54>
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     fcc:	89 81       	ldd	r24, Y+1	; 0x01
     fce:	9a 81       	ldd	r25, Y+2	; 0x02
     fd0:	fc 01       	movw	r30, r24
     fd2:	80 81       	ld	r24, Z
     fd4:	28 2f       	mov	r18, r24
     fd6:	27 7f       	andi	r18, 0xF7	; 247
     fd8:	89 81       	ldd	r24, Y+1	; 0x01
     fda:	9a 81       	ldd	r25, Y+2	; 0x02
     fdc:	fc 01       	movw	r30, r24
     fde:	20 83       	st	Z, r18
	}
}
     fe0:	00 00       	nop
     fe2:	24 96       	adiw	r28, 0x04	; 4
     fe4:	cd bf       	out	0x3d, r28	; 61
     fe6:	de bf       	out	0x3e, r29	; 62
     fe8:	df 91       	pop	r29
     fea:	cf 91       	pop	r28
     fec:	08 95       	ret

00000fee <PORTA_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
     fee:	cf 93       	push	r28
     ff0:	df 93       	push	r29
     ff2:	00 d0       	rcall	.+0      	; 0xff4 <PORTA_set_pin_dir+0x6>
     ff4:	cd b7       	in	r28, 0x3d	; 61
     ff6:	de b7       	in	r29, 0x3e	; 62
     ff8:	89 83       	std	Y+1, r24	; 0x01
     ffa:	6a 83       	std	Y+2, r22	; 0x02
	switch (dir) {
     ffc:	8a 81       	ldd	r24, Y+2	; 0x02
     ffe:	88 2f       	mov	r24, r24
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	81 30       	cpi	r24, 0x01	; 1
    1004:	91 05       	cpc	r25, r1
    1006:	e1 f0       	breq	.+56     	; 0x1040 <PORTA_set_pin_dir+0x52>
    1008:	82 30       	cpi	r24, 0x02	; 2
    100a:	91 05       	cpc	r25, r1
    100c:	71 f1       	breq	.+92     	; 0x106a <PORTA_set_pin_dir+0x7c>
    100e:	89 2b       	or	r24, r25
    1010:	09 f0       	breq	.+2      	; 0x1014 <PORTA_set_pin_dir+0x26>
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTA + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
		break;
	default:
		break;
    1012:	3b c0       	rjmp	.+118    	; 0x108a <PORTA_set_pin_dir+0x9c>
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
    1014:	20 e0       	ldi	r18, 0x00	; 0
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	80 e0       	ldi	r24, 0x00	; 0
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	fc 01       	movw	r30, r24
    101e:	80 81       	ld	r24, Z
    1020:	68 2f       	mov	r22, r24
    1022:	89 81       	ldd	r24, Y+1	; 0x01
    1024:	48 2f       	mov	r20, r24
    1026:	50 e0       	ldi	r21, 0x00	; 0
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	02 c0       	rjmp	.+4      	; 0x1032 <PORTA_set_pin_dir+0x44>
    102e:	88 0f       	add	r24, r24
    1030:	99 1f       	adc	r25, r25
    1032:	4a 95       	dec	r20
    1034:	e2 f7       	brpl	.-8      	; 0x102e <PORTA_set_pin_dir+0x40>
    1036:	80 95       	com	r24
    1038:	86 23       	and	r24, r22
    103a:	f9 01       	movw	r30, r18
    103c:	80 83       	st	Z, r24
		break;
    103e:	25 c0       	rjmp	.+74     	; 0x108a <PORTA_set_pin_dir+0x9c>
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    1040:	20 e0       	ldi	r18, 0x00	; 0
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	80 e0       	ldi	r24, 0x00	; 0
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	fc 01       	movw	r30, r24
    104a:	80 81       	ld	r24, Z
    104c:	68 2f       	mov	r22, r24
    104e:	89 81       	ldd	r24, Y+1	; 0x01
    1050:	48 2f       	mov	r20, r24
    1052:	50 e0       	ldi	r21, 0x00	; 0
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	02 c0       	rjmp	.+4      	; 0x105e <PORTA_set_pin_dir+0x70>
    105a:	88 0f       	add	r24, r24
    105c:	99 1f       	adc	r25, r25
    105e:	4a 95       	dec	r20
    1060:	e2 f7       	brpl	.-8      	; 0x105a <PORTA_set_pin_dir+0x6c>
    1062:	86 2b       	or	r24, r22
    1064:	f9 01       	movw	r30, r18
    1066:	80 83       	st	Z, r24
		break;
    1068:	10 c0       	rjmp	.+32     	; 0x108a <PORTA_set_pin_dir+0x9c>
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTA + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
    106a:	89 81       	ldd	r24, Y+1	; 0x01
    106c:	88 2f       	mov	r24, r24
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	80 5f       	subi	r24, 0xF0	; 240
    1072:	9b 4f       	sbci	r25, 0xFB	; 251
    1074:	29 81       	ldd	r18, Y+1	; 0x01
    1076:	22 2f       	mov	r18, r18
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	20 5f       	subi	r18, 0xF0	; 240
    107c:	3b 4f       	sbci	r19, 0xFB	; 251
    107e:	f9 01       	movw	r30, r18
    1080:	20 81       	ld	r18, Z
    1082:	28 60       	ori	r18, 0x08	; 8
    1084:	fc 01       	movw	r30, r24
    1086:	20 83       	st	Z, r18
		break;
    1088:	00 00       	nop
	default:
		break;
	}
}
    108a:	00 00       	nop
    108c:	0f 90       	pop	r0
    108e:	0f 90       	pop	r0
    1090:	df 91       	pop	r29
    1092:	cf 91       	pop	r28
    1094:	08 95       	ret

00001096 <PORTA_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
    1096:	cf 93       	push	r28
    1098:	df 93       	push	r29
    109a:	00 d0       	rcall	.+0      	; 0x109c <PORTA_set_pin_level+0x6>
    109c:	cd b7       	in	r28, 0x3d	; 61
    109e:	de b7       	in	r29, 0x3e	; 62
    10a0:	89 83       	std	Y+1, r24	; 0x01
    10a2:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
    10a4:	8a 81       	ldd	r24, Y+2	; 0x02
    10a6:	88 23       	and	r24, r24
    10a8:	a9 f0       	breq	.+42     	; 0x10d4 <PORTA_set_pin_level+0x3e>
		VPORTA.OUT |= (1 << pin);
    10aa:	20 e0       	ldi	r18, 0x00	; 0
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	fc 01       	movw	r30, r24
    10b4:	81 81       	ldd	r24, Z+1	; 0x01
    10b6:	68 2f       	mov	r22, r24
    10b8:	89 81       	ldd	r24, Y+1	; 0x01
    10ba:	48 2f       	mov	r20, r24
    10bc:	50 e0       	ldi	r21, 0x00	; 0
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <PORTA_set_pin_level+0x32>
    10c4:	88 0f       	add	r24, r24
    10c6:	99 1f       	adc	r25, r25
    10c8:	4a 95       	dec	r20
    10ca:	e2 f7       	brpl	.-8      	; 0x10c4 <PORTA_set_pin_level+0x2e>
    10cc:	86 2b       	or	r24, r22
    10ce:	f9 01       	movw	r30, r18
    10d0:	81 83       	std	Z+1, r24	; 0x01
	} else {
		VPORTA.OUT &= ~(1 << pin);
	}
}
    10d2:	15 c0       	rjmp	.+42     	; 0x10fe <PORTA_set_pin_level+0x68>
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    10d4:	20 e0       	ldi	r18, 0x00	; 0
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	80 e0       	ldi	r24, 0x00	; 0
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	fc 01       	movw	r30, r24
    10de:	81 81       	ldd	r24, Z+1	; 0x01
    10e0:	68 2f       	mov	r22, r24
    10e2:	89 81       	ldd	r24, Y+1	; 0x01
    10e4:	48 2f       	mov	r20, r24
    10e6:	50 e0       	ldi	r21, 0x00	; 0
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	02 c0       	rjmp	.+4      	; 0x10f2 <PORTA_set_pin_level+0x5c>
    10ee:	88 0f       	add	r24, r24
    10f0:	99 1f       	adc	r25, r25
    10f2:	4a 95       	dec	r20
    10f4:	e2 f7       	brpl	.-8      	; 0x10ee <PORTA_set_pin_level+0x58>
    10f6:	80 95       	com	r24
    10f8:	86 23       	and	r24, r22
    10fa:	f9 01       	movw	r30, r18
    10fc:	81 83       	std	Z+1, r24	; 0x01
	}
}
    10fe:	00 00       	nop
    1100:	0f 90       	pop	r0
    1102:	0f 90       	pop	r0
    1104:	df 91       	pop	r29
    1106:	cf 91       	pop	r28
    1108:	08 95       	ret

0000110a <PORTB_set_pin_pull_mode>:
 *
 * \param[in] pin       The pin number within port
 * \param[in] pull_mode Pin pull mode
 */
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
    110a:	cf 93       	push	r28
    110c:	df 93       	push	r29
    110e:	00 d0       	rcall	.+0      	; 0x1110 <PORTB_set_pin_pull_mode+0x6>
    1110:	00 d0       	rcall	.+0      	; 0x1112 <PORTB_set_pin_pull_mode+0x8>
    1112:	cd b7       	in	r28, 0x3d	; 61
    1114:	de b7       	in	r29, 0x3e	; 62
    1116:	8b 83       	std	Y+3, r24	; 0x03
    1118:	6c 83       	std	Y+4, r22	; 0x04
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);
    111a:	8b 81       	ldd	r24, Y+3	; 0x03
    111c:	88 2f       	mov	r24, r24
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	80 5d       	subi	r24, 0xD0	; 208
    1122:	9b 4f       	sbci	r25, 0xFB	; 251
    1124:	89 83       	std	Y+1, r24	; 0x01
    1126:	9a 83       	std	Y+2, r25	; 0x02

	if (pull_mode == PORT_PULL_UP) {
    1128:	8c 81       	ldd	r24, Y+4	; 0x04
    112a:	81 30       	cpi	r24, 0x01	; 1
    112c:	59 f4       	brne	.+22     	; 0x1144 <PORTB_set_pin_pull_mode+0x3a>
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    112e:	89 81       	ldd	r24, Y+1	; 0x01
    1130:	9a 81       	ldd	r25, Y+2	; 0x02
    1132:	fc 01       	movw	r30, r24
    1134:	80 81       	ld	r24, Z
    1136:	28 2f       	mov	r18, r24
    1138:	28 60       	ori	r18, 0x08	; 8
    113a:	89 81       	ldd	r24, Y+1	; 0x01
    113c:	9a 81       	ldd	r25, Y+2	; 0x02
    113e:	fc 01       	movw	r30, r24
    1140:	20 83       	st	Z, r18
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
	}
}
    1142:	0d c0       	rjmp	.+26     	; 0x115e <PORTB_set_pin_pull_mode+0x54>
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
    1144:	8c 81       	ldd	r24, Y+4	; 0x04
    1146:	88 23       	and	r24, r24
    1148:	51 f4       	brne	.+20     	; 0x115e <PORTB_set_pin_pull_mode+0x54>
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    114a:	89 81       	ldd	r24, Y+1	; 0x01
    114c:	9a 81       	ldd	r25, Y+2	; 0x02
    114e:	fc 01       	movw	r30, r24
    1150:	80 81       	ld	r24, Z
    1152:	28 2f       	mov	r18, r24
    1154:	27 7f       	andi	r18, 0xF7	; 247
    1156:	89 81       	ldd	r24, Y+1	; 0x01
    1158:	9a 81       	ldd	r25, Y+2	; 0x02
    115a:	fc 01       	movw	r30, r24
    115c:	20 83       	st	Z, r18
	}
}
    115e:	00 00       	nop
    1160:	24 96       	adiw	r28, 0x04	; 4
    1162:	cd bf       	out	0x3d, r28	; 61
    1164:	de bf       	out	0x3e, r29	; 62
    1166:	df 91       	pop	r29
    1168:	cf 91       	pop	r28
    116a:	08 95       	ret

0000116c <PORTB_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
    116c:	cf 93       	push	r28
    116e:	df 93       	push	r29
    1170:	00 d0       	rcall	.+0      	; 0x1172 <PORTB_set_pin_dir+0x6>
    1172:	cd b7       	in	r28, 0x3d	; 61
    1174:	de b7       	in	r29, 0x3e	; 62
    1176:	89 83       	std	Y+1, r24	; 0x01
    1178:	6a 83       	std	Y+2, r22	; 0x02
	switch (dir) {
    117a:	8a 81       	ldd	r24, Y+2	; 0x02
    117c:	88 2f       	mov	r24, r24
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	81 30       	cpi	r24, 0x01	; 1
    1182:	91 05       	cpc	r25, r1
    1184:	e1 f0       	breq	.+56     	; 0x11be <PORTB_set_pin_dir+0x52>
    1186:	82 30       	cpi	r24, 0x02	; 2
    1188:	91 05       	cpc	r25, r1
    118a:	71 f1       	breq	.+92     	; 0x11e8 <PORTB_set_pin_dir+0x7c>
    118c:	89 2b       	or	r24, r25
    118e:	09 f0       	breq	.+2      	; 0x1192 <PORTB_set_pin_dir+0x26>
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTB + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
		break;
	default:
		break;
    1190:	3b c0       	rjmp	.+118    	; 0x1208 <PORTB_set_pin_dir+0x9c>
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
    1192:	84 e0       	ldi	r24, 0x04	; 4
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	24 e0       	ldi	r18, 0x04	; 4
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	f9 01       	movw	r30, r18
    119c:	20 81       	ld	r18, Z
    119e:	62 2f       	mov	r22, r18
    11a0:	29 81       	ldd	r18, Y+1	; 0x01
    11a2:	42 2f       	mov	r20, r18
    11a4:	50 e0       	ldi	r21, 0x00	; 0
    11a6:	21 e0       	ldi	r18, 0x01	; 1
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <PORTB_set_pin_dir+0x44>
    11ac:	22 0f       	add	r18, r18
    11ae:	33 1f       	adc	r19, r19
    11b0:	4a 95       	dec	r20
    11b2:	e2 f7       	brpl	.-8      	; 0x11ac <PORTB_set_pin_dir+0x40>
    11b4:	20 95       	com	r18
    11b6:	26 23       	and	r18, r22
    11b8:	fc 01       	movw	r30, r24
    11ba:	20 83       	st	Z, r18
		break;
    11bc:	25 c0       	rjmp	.+74     	; 0x1208 <PORTB_set_pin_dir+0x9c>
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    11be:	84 e0       	ldi	r24, 0x04	; 4
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	24 e0       	ldi	r18, 0x04	; 4
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	f9 01       	movw	r30, r18
    11c8:	20 81       	ld	r18, Z
    11ca:	62 2f       	mov	r22, r18
    11cc:	29 81       	ldd	r18, Y+1	; 0x01
    11ce:	42 2f       	mov	r20, r18
    11d0:	50 e0       	ldi	r21, 0x00	; 0
    11d2:	21 e0       	ldi	r18, 0x01	; 1
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	02 c0       	rjmp	.+4      	; 0x11dc <PORTB_set_pin_dir+0x70>
    11d8:	22 0f       	add	r18, r18
    11da:	33 1f       	adc	r19, r19
    11dc:	4a 95       	dec	r20
    11de:	e2 f7       	brpl	.-8      	; 0x11d8 <PORTB_set_pin_dir+0x6c>
    11e0:	26 2b       	or	r18, r22
    11e2:	fc 01       	movw	r30, r24
    11e4:	20 83       	st	Z, r18
		break;
    11e6:	10 c0       	rjmp	.+32     	; 0x1208 <PORTB_set_pin_dir+0x9c>
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTB + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
    11e8:	89 81       	ldd	r24, Y+1	; 0x01
    11ea:	88 2f       	mov	r24, r24
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	80 5d       	subi	r24, 0xD0	; 208
    11f0:	9b 4f       	sbci	r25, 0xFB	; 251
    11f2:	29 81       	ldd	r18, Y+1	; 0x01
    11f4:	22 2f       	mov	r18, r18
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	20 5d       	subi	r18, 0xD0	; 208
    11fa:	3b 4f       	sbci	r19, 0xFB	; 251
    11fc:	f9 01       	movw	r30, r18
    11fe:	20 81       	ld	r18, Z
    1200:	28 60       	ori	r18, 0x08	; 8
    1202:	fc 01       	movw	r30, r24
    1204:	20 83       	st	Z, r18
		break;
    1206:	00 00       	nop
	default:
		break;
	}
}
    1208:	00 00       	nop
    120a:	0f 90       	pop	r0
    120c:	0f 90       	pop	r0
    120e:	df 91       	pop	r29
    1210:	cf 91       	pop	r28
    1212:	08 95       	ret

00001214 <PORTB_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
    1214:	cf 93       	push	r28
    1216:	df 93       	push	r29
    1218:	00 d0       	rcall	.+0      	; 0x121a <PORTB_set_pin_level+0x6>
    121a:	cd b7       	in	r28, 0x3d	; 61
    121c:	de b7       	in	r29, 0x3e	; 62
    121e:	89 83       	std	Y+1, r24	; 0x01
    1220:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
    1222:	8a 81       	ldd	r24, Y+2	; 0x02
    1224:	88 23       	and	r24, r24
    1226:	a9 f0       	breq	.+42     	; 0x1252 <PORTB_set_pin_level+0x3e>
		VPORTB.OUT |= (1 << pin);
    1228:	84 e0       	ldi	r24, 0x04	; 4
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	24 e0       	ldi	r18, 0x04	; 4
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	f9 01       	movw	r30, r18
    1232:	21 81       	ldd	r18, Z+1	; 0x01
    1234:	62 2f       	mov	r22, r18
    1236:	29 81       	ldd	r18, Y+1	; 0x01
    1238:	42 2f       	mov	r20, r18
    123a:	50 e0       	ldi	r21, 0x00	; 0
    123c:	21 e0       	ldi	r18, 0x01	; 1
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	02 c0       	rjmp	.+4      	; 0x1246 <PORTB_set_pin_level+0x32>
    1242:	22 0f       	add	r18, r18
    1244:	33 1f       	adc	r19, r19
    1246:	4a 95       	dec	r20
    1248:	e2 f7       	brpl	.-8      	; 0x1242 <PORTB_set_pin_level+0x2e>
    124a:	26 2b       	or	r18, r22
    124c:	fc 01       	movw	r30, r24
    124e:	21 83       	std	Z+1, r18	; 0x01
	} else {
		VPORTB.OUT &= ~(1 << pin);
	}
}
    1250:	15 c0       	rjmp	.+42     	; 0x127c <PORTB_set_pin_level+0x68>
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
    1252:	84 e0       	ldi	r24, 0x04	; 4
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	24 e0       	ldi	r18, 0x04	; 4
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	f9 01       	movw	r30, r18
    125c:	21 81       	ldd	r18, Z+1	; 0x01
    125e:	62 2f       	mov	r22, r18
    1260:	29 81       	ldd	r18, Y+1	; 0x01
    1262:	42 2f       	mov	r20, r18
    1264:	50 e0       	ldi	r21, 0x00	; 0
    1266:	21 e0       	ldi	r18, 0x01	; 1
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	02 c0       	rjmp	.+4      	; 0x1270 <PORTB_set_pin_level+0x5c>
    126c:	22 0f       	add	r18, r18
    126e:	33 1f       	adc	r19, r19
    1270:	4a 95       	dec	r20
    1272:	e2 f7       	brpl	.-8      	; 0x126c <PORTB_set_pin_level+0x58>
    1274:	20 95       	com	r18
    1276:	26 23       	and	r18, r22
    1278:	fc 01       	movw	r30, r24
    127a:	21 83       	std	Z+1, r18	; 0x01
	}
}
    127c:	00 00       	nop
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	df 91       	pop	r29
    1284:	cf 91       	pop	r28
    1286:	08 95       	ret

00001288 <PORTC_set_pin_pull_mode>:
 *
 * \param[in] pin       The pin number within port
 * \param[in] pull_mode Pin pull mode
 */
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
    1288:	cf 93       	push	r28
    128a:	df 93       	push	r29
    128c:	00 d0       	rcall	.+0      	; 0x128e <PORTC_set_pin_pull_mode+0x6>
    128e:	00 d0       	rcall	.+0      	; 0x1290 <PORTC_set_pin_pull_mode+0x8>
    1290:	cd b7       	in	r28, 0x3d	; 61
    1292:	de b7       	in	r29, 0x3e	; 62
    1294:	8b 83       	std	Y+3, r24	; 0x03
    1296:	6c 83       	std	Y+4, r22	; 0x04
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);
    1298:	8b 81       	ldd	r24, Y+3	; 0x03
    129a:	88 2f       	mov	r24, r24
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	80 5b       	subi	r24, 0xB0	; 176
    12a0:	9b 4f       	sbci	r25, 0xFB	; 251
    12a2:	89 83       	std	Y+1, r24	; 0x01
    12a4:	9a 83       	std	Y+2, r25	; 0x02

	if (pull_mode == PORT_PULL_UP) {
    12a6:	8c 81       	ldd	r24, Y+4	; 0x04
    12a8:	81 30       	cpi	r24, 0x01	; 1
    12aa:	59 f4       	brne	.+22     	; 0x12c2 <PORTC_set_pin_pull_mode+0x3a>
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    12ac:	89 81       	ldd	r24, Y+1	; 0x01
    12ae:	9a 81       	ldd	r25, Y+2	; 0x02
    12b0:	fc 01       	movw	r30, r24
    12b2:	80 81       	ld	r24, Z
    12b4:	28 2f       	mov	r18, r24
    12b6:	28 60       	ori	r18, 0x08	; 8
    12b8:	89 81       	ldd	r24, Y+1	; 0x01
    12ba:	9a 81       	ldd	r25, Y+2	; 0x02
    12bc:	fc 01       	movw	r30, r24
    12be:	20 83       	st	Z, r18
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
	}
}
    12c0:	0d c0       	rjmp	.+26     	; 0x12dc <PORTC_set_pin_pull_mode+0x54>
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
    12c2:	8c 81       	ldd	r24, Y+4	; 0x04
    12c4:	88 23       	and	r24, r24
    12c6:	51 f4       	brne	.+20     	; 0x12dc <PORTC_set_pin_pull_mode+0x54>
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    12c8:	89 81       	ldd	r24, Y+1	; 0x01
    12ca:	9a 81       	ldd	r25, Y+2	; 0x02
    12cc:	fc 01       	movw	r30, r24
    12ce:	80 81       	ld	r24, Z
    12d0:	28 2f       	mov	r18, r24
    12d2:	27 7f       	andi	r18, 0xF7	; 247
    12d4:	89 81       	ldd	r24, Y+1	; 0x01
    12d6:	9a 81       	ldd	r25, Y+2	; 0x02
    12d8:	fc 01       	movw	r30, r24
    12da:	20 83       	st	Z, r18
	}
}
    12dc:	00 00       	nop
    12de:	24 96       	adiw	r28, 0x04	; 4
    12e0:	cd bf       	out	0x3d, r28	; 61
    12e2:	de bf       	out	0x3e, r29	; 62
    12e4:	df 91       	pop	r29
    12e6:	cf 91       	pop	r28
    12e8:	08 95       	ret

000012ea <PORTC_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
    12ea:	cf 93       	push	r28
    12ec:	df 93       	push	r29
    12ee:	00 d0       	rcall	.+0      	; 0x12f0 <PORTC_set_pin_dir+0x6>
    12f0:	cd b7       	in	r28, 0x3d	; 61
    12f2:	de b7       	in	r29, 0x3e	; 62
    12f4:	89 83       	std	Y+1, r24	; 0x01
    12f6:	6a 83       	std	Y+2, r22	; 0x02
	switch (dir) {
    12f8:	8a 81       	ldd	r24, Y+2	; 0x02
    12fa:	88 2f       	mov	r24, r24
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	81 30       	cpi	r24, 0x01	; 1
    1300:	91 05       	cpc	r25, r1
    1302:	e1 f0       	breq	.+56     	; 0x133c <PORTC_set_pin_dir+0x52>
    1304:	82 30       	cpi	r24, 0x02	; 2
    1306:	91 05       	cpc	r25, r1
    1308:	71 f1       	breq	.+92     	; 0x1366 <PORTC_set_pin_dir+0x7c>
    130a:	89 2b       	or	r24, r25
    130c:	09 f0       	breq	.+2      	; 0x1310 <PORTC_set_pin_dir+0x26>
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTC + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
		break;
	default:
		break;
    130e:	3b c0       	rjmp	.+118    	; 0x1386 <PORTC_set_pin_dir+0x9c>
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
    1310:	88 e0       	ldi	r24, 0x08	; 8
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	28 e0       	ldi	r18, 0x08	; 8
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	f9 01       	movw	r30, r18
    131a:	20 81       	ld	r18, Z
    131c:	62 2f       	mov	r22, r18
    131e:	29 81       	ldd	r18, Y+1	; 0x01
    1320:	42 2f       	mov	r20, r18
    1322:	50 e0       	ldi	r21, 0x00	; 0
    1324:	21 e0       	ldi	r18, 0x01	; 1
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	02 c0       	rjmp	.+4      	; 0x132e <PORTC_set_pin_dir+0x44>
    132a:	22 0f       	add	r18, r18
    132c:	33 1f       	adc	r19, r19
    132e:	4a 95       	dec	r20
    1330:	e2 f7       	brpl	.-8      	; 0x132a <PORTC_set_pin_dir+0x40>
    1332:	20 95       	com	r18
    1334:	26 23       	and	r18, r22
    1336:	fc 01       	movw	r30, r24
    1338:	20 83       	st	Z, r18
		break;
    133a:	25 c0       	rjmp	.+74     	; 0x1386 <PORTC_set_pin_dir+0x9c>
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
    133c:	88 e0       	ldi	r24, 0x08	; 8
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	28 e0       	ldi	r18, 0x08	; 8
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	f9 01       	movw	r30, r18
    1346:	20 81       	ld	r18, Z
    1348:	62 2f       	mov	r22, r18
    134a:	29 81       	ldd	r18, Y+1	; 0x01
    134c:	42 2f       	mov	r20, r18
    134e:	50 e0       	ldi	r21, 0x00	; 0
    1350:	21 e0       	ldi	r18, 0x01	; 1
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	02 c0       	rjmp	.+4      	; 0x135a <PORTC_set_pin_dir+0x70>
    1356:	22 0f       	add	r18, r18
    1358:	33 1f       	adc	r19, r19
    135a:	4a 95       	dec	r20
    135c:	e2 f7       	brpl	.-8      	; 0x1356 <PORTC_set_pin_dir+0x6c>
    135e:	26 2b       	or	r18, r22
    1360:	fc 01       	movw	r30, r24
    1362:	20 83       	st	Z, r18
		break;
    1364:	10 c0       	rjmp	.+32     	; 0x1386 <PORTC_set_pin_dir+0x9c>
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTC + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
    1366:	89 81       	ldd	r24, Y+1	; 0x01
    1368:	88 2f       	mov	r24, r24
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	80 5b       	subi	r24, 0xB0	; 176
    136e:	9b 4f       	sbci	r25, 0xFB	; 251
    1370:	29 81       	ldd	r18, Y+1	; 0x01
    1372:	22 2f       	mov	r18, r18
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	20 5b       	subi	r18, 0xB0	; 176
    1378:	3b 4f       	sbci	r19, 0xFB	; 251
    137a:	f9 01       	movw	r30, r18
    137c:	20 81       	ld	r18, Z
    137e:	28 60       	ori	r18, 0x08	; 8
    1380:	fc 01       	movw	r30, r24
    1382:	20 83       	st	Z, r18
		break;
    1384:	00 00       	nop
	default:
		break;
	}
}
    1386:	00 00       	nop
    1388:	0f 90       	pop	r0
    138a:	0f 90       	pop	r0
    138c:	df 91       	pop	r29
    138e:	cf 91       	pop	r28
    1390:	08 95       	ret

00001392 <PORTC_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
    1392:	cf 93       	push	r28
    1394:	df 93       	push	r29
    1396:	00 d0       	rcall	.+0      	; 0x1398 <PORTC_set_pin_level+0x6>
    1398:	cd b7       	in	r28, 0x3d	; 61
    139a:	de b7       	in	r29, 0x3e	; 62
    139c:	89 83       	std	Y+1, r24	; 0x01
    139e:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
    13a0:	8a 81       	ldd	r24, Y+2	; 0x02
    13a2:	88 23       	and	r24, r24
    13a4:	a9 f0       	breq	.+42     	; 0x13d0 <PORTC_set_pin_level+0x3e>
		VPORTC.OUT |= (1 << pin);
    13a6:	88 e0       	ldi	r24, 0x08	; 8
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	28 e0       	ldi	r18, 0x08	; 8
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	f9 01       	movw	r30, r18
    13b0:	21 81       	ldd	r18, Z+1	; 0x01
    13b2:	62 2f       	mov	r22, r18
    13b4:	29 81       	ldd	r18, Y+1	; 0x01
    13b6:	42 2f       	mov	r20, r18
    13b8:	50 e0       	ldi	r21, 0x00	; 0
    13ba:	21 e0       	ldi	r18, 0x01	; 1
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	02 c0       	rjmp	.+4      	; 0x13c4 <PORTC_set_pin_level+0x32>
    13c0:	22 0f       	add	r18, r18
    13c2:	33 1f       	adc	r19, r19
    13c4:	4a 95       	dec	r20
    13c6:	e2 f7       	brpl	.-8      	; 0x13c0 <PORTC_set_pin_level+0x2e>
    13c8:	26 2b       	or	r18, r22
    13ca:	fc 01       	movw	r30, r24
    13cc:	21 83       	std	Z+1, r18	; 0x01
	} else {
		VPORTC.OUT &= ~(1 << pin);
	}
}
    13ce:	15 c0       	rjmp	.+42     	; 0x13fa <PORTC_set_pin_level+0x68>
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
    13d0:	88 e0       	ldi	r24, 0x08	; 8
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	28 e0       	ldi	r18, 0x08	; 8
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	f9 01       	movw	r30, r18
    13da:	21 81       	ldd	r18, Z+1	; 0x01
    13dc:	62 2f       	mov	r22, r18
    13de:	29 81       	ldd	r18, Y+1	; 0x01
    13e0:	42 2f       	mov	r20, r18
    13e2:	50 e0       	ldi	r21, 0x00	; 0
    13e4:	21 e0       	ldi	r18, 0x01	; 1
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	02 c0       	rjmp	.+4      	; 0x13ee <PORTC_set_pin_level+0x5c>
    13ea:	22 0f       	add	r18, r18
    13ec:	33 1f       	adc	r19, r19
    13ee:	4a 95       	dec	r20
    13f0:	e2 f7       	brpl	.-8      	; 0x13ea <PORTC_set_pin_level+0x58>
    13f2:	20 95       	com	r18
    13f4:	26 23       	and	r18, r22
    13f6:	fc 01       	movw	r30, r24
    13f8:	21 83       	std	Z+1, r18	; 0x01
	}
}
    13fa:	00 00       	nop
    13fc:	0f 90       	pop	r0
    13fe:	0f 90       	pop	r0
    1400:	df 91       	pop	r29
    1402:	cf 91       	pop	r28
    1404:	08 95       	ret

00001406 <PORTD_set_pin_pull_mode>:
 *
 * \param[in] pin       The pin number within port
 * \param[in] pull_mode Pin pull mode
 */
static inline void PORTD_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
    1406:	cf 93       	push	r28
    1408:	df 93       	push	r29
    140a:	00 d0       	rcall	.+0      	; 0x140c <PORTD_set_pin_pull_mode+0x6>
    140c:	00 d0       	rcall	.+0      	; 0x140e <PORTD_set_pin_pull_mode+0x8>
    140e:	cd b7       	in	r28, 0x3d	; 61
    1410:	de b7       	in	r29, 0x3e	; 62
    1412:	8b 83       	std	Y+3, r24	; 0x03
    1414:	6c 83       	std	Y+4, r22	; 0x04
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);
    1416:	8b 81       	ldd	r24, Y+3	; 0x03
    1418:	88 2f       	mov	r24, r24
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	80 59       	subi	r24, 0x90	; 144
    141e:	9b 4f       	sbci	r25, 0xFB	; 251
    1420:	89 83       	std	Y+1, r24	; 0x01
    1422:	9a 83       	std	Y+2, r25	; 0x02

	if (pull_mode == PORT_PULL_UP) {
    1424:	8c 81       	ldd	r24, Y+4	; 0x04
    1426:	81 30       	cpi	r24, 0x01	; 1
    1428:	59 f4       	brne	.+22     	; 0x1440 <PORTD_set_pin_pull_mode+0x3a>
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    142a:	89 81       	ldd	r24, Y+1	; 0x01
    142c:	9a 81       	ldd	r25, Y+2	; 0x02
    142e:	fc 01       	movw	r30, r24
    1430:	80 81       	ld	r24, Z
    1432:	28 2f       	mov	r18, r24
    1434:	28 60       	ori	r18, 0x08	; 8
    1436:	89 81       	ldd	r24, Y+1	; 0x01
    1438:	9a 81       	ldd	r25, Y+2	; 0x02
    143a:	fc 01       	movw	r30, r24
    143c:	20 83       	st	Z, r18
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
	}
}
    143e:	0d c0       	rjmp	.+26     	; 0x145a <PORTD_set_pin_pull_mode+0x54>
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
    1440:	8c 81       	ldd	r24, Y+4	; 0x04
    1442:	88 23       	and	r24, r24
    1444:	51 f4       	brne	.+20     	; 0x145a <PORTD_set_pin_pull_mode+0x54>
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    1446:	89 81       	ldd	r24, Y+1	; 0x01
    1448:	9a 81       	ldd	r25, Y+2	; 0x02
    144a:	fc 01       	movw	r30, r24
    144c:	80 81       	ld	r24, Z
    144e:	28 2f       	mov	r18, r24
    1450:	27 7f       	andi	r18, 0xF7	; 247
    1452:	89 81       	ldd	r24, Y+1	; 0x01
    1454:	9a 81       	ldd	r25, Y+2	; 0x02
    1456:	fc 01       	movw	r30, r24
    1458:	20 83       	st	Z, r18
	}
}
    145a:	00 00       	nop
    145c:	24 96       	adiw	r28, 0x04	; 4
    145e:	cd bf       	out	0x3d, r28	; 61
    1460:	de bf       	out	0x3e, r29	; 62
    1462:	df 91       	pop	r29
    1464:	cf 91       	pop	r28
    1466:	08 95       	ret

00001468 <PORTD_pin_set_isc>:
 *                PORT_ISC_INPUT_DISABLE_gc = Digital Input Buffer disabled
 *                PORT_ISC_LEVEL_gc         = Sense low Level
 *
 */
static inline void PORTD_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
    1468:	cf 93       	push	r28
    146a:	df 93       	push	r29
    146c:	00 d0       	rcall	.+0      	; 0x146e <PORTD_pin_set_isc+0x6>
    146e:	00 d0       	rcall	.+0      	; 0x1470 <PORTD_pin_set_isc+0x8>
    1470:	cd b7       	in	r28, 0x3d	; 61
    1472:	de b7       	in	r29, 0x3e	; 62
    1474:	8b 83       	std	Y+3, r24	; 0x03
    1476:	6c 83       	std	Y+4, r22	; 0x04
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);
    1478:	8b 81       	ldd	r24, Y+3	; 0x03
    147a:	88 2f       	mov	r24, r24
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	80 59       	subi	r24, 0x90	; 144
    1480:	9b 4f       	sbci	r25, 0xFB	; 251
    1482:	89 83       	std	Y+1, r24	; 0x01
    1484:	9a 83       	std	Y+2, r25	; 0x02

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    1486:	89 81       	ldd	r24, Y+1	; 0x01
    1488:	9a 81       	ldd	r25, Y+2	; 0x02
    148a:	fc 01       	movw	r30, r24
    148c:	80 81       	ld	r24, Z
    148e:	98 2f       	mov	r25, r24
    1490:	98 7f       	andi	r25, 0xF8	; 248
    1492:	8c 81       	ldd	r24, Y+4	; 0x04
    1494:	89 2b       	or	r24, r25
    1496:	28 2f       	mov	r18, r24
    1498:	89 81       	ldd	r24, Y+1	; 0x01
    149a:	9a 81       	ldd	r25, Y+2	; 0x02
    149c:	fc 01       	movw	r30, r24
    149e:	20 83       	st	Z, r18
}
    14a0:	00 00       	nop
    14a2:	24 96       	adiw	r28, 0x04	; 4
    14a4:	cd bf       	out	0x3d, r28	; 61
    14a6:	de bf       	out	0x3e, r29	; 62
    14a8:	df 91       	pop	r29
    14aa:	cf 91       	pop	r28
    14ac:	08 95       	ret

000014ae <PORTE_set_pin_pull_mode>:
 *
 * \param[in] pin       The pin number within port
 * \param[in] pull_mode Pin pull mode
 */
static inline void PORTE_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
    14ae:	cf 93       	push	r28
    14b0:	df 93       	push	r29
    14b2:	00 d0       	rcall	.+0      	; 0x14b4 <PORTE_set_pin_pull_mode+0x6>
    14b4:	00 d0       	rcall	.+0      	; 0x14b6 <PORTE_set_pin_pull_mode+0x8>
    14b6:	cd b7       	in	r28, 0x3d	; 61
    14b8:	de b7       	in	r29, 0x3e	; 62
    14ba:	8b 83       	std	Y+3, r24	; 0x03
    14bc:	6c 83       	std	Y+4, r22	; 0x04
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTE + 0x10 + pin);
    14be:	8b 81       	ldd	r24, Y+3	; 0x03
    14c0:	88 2f       	mov	r24, r24
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	80 57       	subi	r24, 0x70	; 112
    14c6:	9b 4f       	sbci	r25, 0xFB	; 251
    14c8:	89 83       	std	Y+1, r24	; 0x01
    14ca:	9a 83       	std	Y+2, r25	; 0x02

	if (pull_mode == PORT_PULL_UP) {
    14cc:	8c 81       	ldd	r24, Y+4	; 0x04
    14ce:	81 30       	cpi	r24, 0x01	; 1
    14d0:	59 f4       	brne	.+22     	; 0x14e8 <PORTE_set_pin_pull_mode+0x3a>
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    14d2:	89 81       	ldd	r24, Y+1	; 0x01
    14d4:	9a 81       	ldd	r25, Y+2	; 0x02
    14d6:	fc 01       	movw	r30, r24
    14d8:	80 81       	ld	r24, Z
    14da:	28 2f       	mov	r18, r24
    14dc:	28 60       	ori	r18, 0x08	; 8
    14de:	89 81       	ldd	r24, Y+1	; 0x01
    14e0:	9a 81       	ldd	r25, Y+2	; 0x02
    14e2:	fc 01       	movw	r30, r24
    14e4:	20 83       	st	Z, r18
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
	}
}
    14e6:	0d c0       	rjmp	.+26     	; 0x1502 <PORTE_set_pin_pull_mode+0x54>
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTE + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
    14e8:	8c 81       	ldd	r24, Y+4	; 0x04
    14ea:	88 23       	and	r24, r24
    14ec:	51 f4       	brne	.+20     	; 0x1502 <PORTE_set_pin_pull_mode+0x54>
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    14ee:	89 81       	ldd	r24, Y+1	; 0x01
    14f0:	9a 81       	ldd	r25, Y+2	; 0x02
    14f2:	fc 01       	movw	r30, r24
    14f4:	80 81       	ld	r24, Z
    14f6:	28 2f       	mov	r18, r24
    14f8:	27 7f       	andi	r18, 0xF7	; 247
    14fa:	89 81       	ldd	r24, Y+1	; 0x01
    14fc:	9a 81       	ldd	r25, Y+2	; 0x02
    14fe:	fc 01       	movw	r30, r24
    1500:	20 83       	st	Z, r18
	}
}
    1502:	00 00       	nop
    1504:	24 96       	adiw	r28, 0x04	; 4
    1506:	cd bf       	out	0x3d, r28	; 61
    1508:	de bf       	out	0x3e, r29	; 62
    150a:	df 91       	pop	r29
    150c:	cf 91       	pop	r28
    150e:	08 95       	ret

00001510 <PORTE_pin_set_isc>:
 *                PORT_ISC_INPUT_DISABLE_gc = Digital Input Buffer disabled
 *                PORT_ISC_LEVEL_gc         = Sense low Level
 *
 */
static inline void PORTE_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
    1510:	cf 93       	push	r28
    1512:	df 93       	push	r29
    1514:	00 d0       	rcall	.+0      	; 0x1516 <PORTE_pin_set_isc+0x6>
    1516:	00 d0       	rcall	.+0      	; 0x1518 <PORTE_pin_set_isc+0x8>
    1518:	cd b7       	in	r28, 0x3d	; 61
    151a:	de b7       	in	r29, 0x3e	; 62
    151c:	8b 83       	std	Y+3, r24	; 0x03
    151e:	6c 83       	std	Y+4, r22	; 0x04
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTE + 0x10 + pin);
    1520:	8b 81       	ldd	r24, Y+3	; 0x03
    1522:	88 2f       	mov	r24, r24
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	80 57       	subi	r24, 0x70	; 112
    1528:	9b 4f       	sbci	r25, 0xFB	; 251
    152a:	89 83       	std	Y+1, r24	; 0x01
    152c:	9a 83       	std	Y+2, r25	; 0x02

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    152e:	89 81       	ldd	r24, Y+1	; 0x01
    1530:	9a 81       	ldd	r25, Y+2	; 0x02
    1532:	fc 01       	movw	r30, r24
    1534:	80 81       	ld	r24, Z
    1536:	98 2f       	mov	r25, r24
    1538:	98 7f       	andi	r25, 0xF8	; 248
    153a:	8c 81       	ldd	r24, Y+4	; 0x04
    153c:	89 2b       	or	r24, r25
    153e:	28 2f       	mov	r18, r24
    1540:	89 81       	ldd	r24, Y+1	; 0x01
    1542:	9a 81       	ldd	r25, Y+2	; 0x02
    1544:	fc 01       	movw	r30, r24
    1546:	20 83       	st	Z, r18
}
    1548:	00 00       	nop
    154a:	24 96       	adiw	r28, 0x04	; 4
    154c:	cd bf       	out	0x3d, r28	; 61
    154e:	de bf       	out	0x3e, r29	; 62
    1550:	df 91       	pop	r29
    1552:	cf 91       	pop	r28
    1554:	08 95       	ret

00001556 <PA4_set_pull_mode>:
 * modes are defined by device used
 *
 * \param[in] pull_mode Pin pull mode
 */
static inline void PA4_set_pull_mode(const enum port_pull_mode pull_mode)
{
    1556:	cf 93       	push	r28
    1558:	df 93       	push	r29
    155a:	1f 92       	push	r1
    155c:	cd b7       	in	r28, 0x3d	; 61
    155e:	de b7       	in	r29, 0x3e	; 62
    1560:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_pull_mode(4, pull_mode);
    1562:	69 81       	ldd	r22, Y+1	; 0x01
    1564:	84 e0       	ldi	r24, 0x04	; 4
    1566:	0e 94 c6 07 	call	0xf8c	; 0xf8c <PORTA_set_pin_pull_mode>
}
    156a:	00 00       	nop
    156c:	0f 90       	pop	r0
    156e:	df 91       	pop	r29
    1570:	cf 91       	pop	r28
    1572:	08 95       	ret

00001574 <PA4_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PA4_set_dir(const enum port_dir dir)
{
    1574:	cf 93       	push	r28
    1576:	df 93       	push	r29
    1578:	1f 92       	push	r1
    157a:	cd b7       	in	r28, 0x3d	; 61
    157c:	de b7       	in	r29, 0x3e	; 62
    157e:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_dir(4, dir);
    1580:	69 81       	ldd	r22, Y+1	; 0x01
    1582:	84 e0       	ldi	r24, 0x04	; 4
    1584:	0e 94 f7 07 	call	0xfee	; 0xfee <PORTA_set_pin_dir>
}
    1588:	00 00       	nop
    158a:	0f 90       	pop	r0
    158c:	df 91       	pop	r29
    158e:	cf 91       	pop	r28
    1590:	08 95       	ret

00001592 <PA5_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PA5_set_dir(const enum port_dir dir)
{
    1592:	cf 93       	push	r28
    1594:	df 93       	push	r29
    1596:	1f 92       	push	r1
    1598:	cd b7       	in	r28, 0x3d	; 61
    159a:	de b7       	in	r29, 0x3e	; 62
    159c:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_dir(5, dir);
    159e:	69 81       	ldd	r22, Y+1	; 0x01
    15a0:	85 e0       	ldi	r24, 0x05	; 5
    15a2:	0e 94 f7 07 	call	0xfee	; 0xfee <PORTA_set_pin_dir>
}
    15a6:	00 00       	nop
    15a8:	0f 90       	pop	r0
    15aa:	df 91       	pop	r29
    15ac:	cf 91       	pop	r28
    15ae:	08 95       	ret

000015b0 <PA5_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PA5_set_level(const bool level)
{
    15b0:	cf 93       	push	r28
    15b2:	df 93       	push	r29
    15b4:	1f 92       	push	r1
    15b6:	cd b7       	in	r28, 0x3d	; 61
    15b8:	de b7       	in	r29, 0x3e	; 62
    15ba:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_level(5, level);
    15bc:	69 81       	ldd	r22, Y+1	; 0x01
    15be:	85 e0       	ldi	r24, 0x05	; 5
    15c0:	0e 94 4b 08 	call	0x1096	; 0x1096 <PORTA_set_pin_level>
}
    15c4:	00 00       	nop
    15c6:	0f 90       	pop	r0
    15c8:	df 91       	pop	r29
    15ca:	cf 91       	pop	r28
    15cc:	08 95       	ret

000015ce <PA6_set_pull_mode>:
 * modes are defined by device used
 *
 * \param[in] pull_mode Pin pull mode
 */
static inline void PA6_set_pull_mode(const enum port_pull_mode pull_mode)
{
    15ce:	cf 93       	push	r28
    15d0:	df 93       	push	r29
    15d2:	1f 92       	push	r1
    15d4:	cd b7       	in	r28, 0x3d	; 61
    15d6:	de b7       	in	r29, 0x3e	; 62
    15d8:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_pull_mode(6, pull_mode);
    15da:	69 81       	ldd	r22, Y+1	; 0x01
    15dc:	86 e0       	ldi	r24, 0x06	; 6
    15de:	0e 94 c6 07 	call	0xf8c	; 0xf8c <PORTA_set_pin_pull_mode>
}
    15e2:	00 00       	nop
    15e4:	0f 90       	pop	r0
    15e6:	df 91       	pop	r29
    15e8:	cf 91       	pop	r28
    15ea:	08 95       	ret

000015ec <PA6_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PA6_set_dir(const enum port_dir dir)
{
    15ec:	cf 93       	push	r28
    15ee:	df 93       	push	r29
    15f0:	1f 92       	push	r1
    15f2:	cd b7       	in	r28, 0x3d	; 61
    15f4:	de b7       	in	r29, 0x3e	; 62
    15f6:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_dir(6, dir);
    15f8:	69 81       	ldd	r22, Y+1	; 0x01
    15fa:	86 e0       	ldi	r24, 0x06	; 6
    15fc:	0e 94 f7 07 	call	0xfee	; 0xfee <PORTA_set_pin_dir>
}
    1600:	00 00       	nop
    1602:	0f 90       	pop	r0
    1604:	df 91       	pop	r29
    1606:	cf 91       	pop	r28
    1608:	08 95       	ret

0000160a <PA7_set_pull_mode>:
 * modes are defined by device used
 *
 * \param[in] pull_mode Pin pull mode
 */
static inline void PA7_set_pull_mode(const enum port_pull_mode pull_mode)
{
    160a:	cf 93       	push	r28
    160c:	df 93       	push	r29
    160e:	1f 92       	push	r1
    1610:	cd b7       	in	r28, 0x3d	; 61
    1612:	de b7       	in	r29, 0x3e	; 62
    1614:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_pull_mode(7, pull_mode);
    1616:	69 81       	ldd	r22, Y+1	; 0x01
    1618:	87 e0       	ldi	r24, 0x07	; 7
    161a:	0e 94 c6 07 	call	0xf8c	; 0xf8c <PORTA_set_pin_pull_mode>
}
    161e:	00 00       	nop
    1620:	0f 90       	pop	r0
    1622:	df 91       	pop	r29
    1624:	cf 91       	pop	r28
    1626:	08 95       	ret

00001628 <PA7_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PA7_set_dir(const enum port_dir dir)
{
    1628:	cf 93       	push	r28
    162a:	df 93       	push	r29
    162c:	1f 92       	push	r1
    162e:	cd b7       	in	r28, 0x3d	; 61
    1630:	de b7       	in	r29, 0x3e	; 62
    1632:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_dir(7, dir);
    1634:	69 81       	ldd	r22, Y+1	; 0x01
    1636:	87 e0       	ldi	r24, 0x07	; 7
    1638:	0e 94 f7 07 	call	0xfee	; 0xfee <PORTA_set_pin_dir>
}
    163c:	00 00       	nop
    163e:	0f 90       	pop	r0
    1640:	df 91       	pop	r29
    1642:	cf 91       	pop	r28
    1644:	08 95       	ret

00001646 <PB0_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PB0_set_dir(const enum port_dir dir)
{
    1646:	cf 93       	push	r28
    1648:	df 93       	push	r29
    164a:	1f 92       	push	r1
    164c:	cd b7       	in	r28, 0x3d	; 61
    164e:	de b7       	in	r29, 0x3e	; 62
    1650:	89 83       	std	Y+1, r24	; 0x01
	PORTB_set_pin_dir(0, dir);
    1652:	69 81       	ldd	r22, Y+1	; 0x01
    1654:	80 e0       	ldi	r24, 0x00	; 0
    1656:	0e 94 b6 08 	call	0x116c	; 0x116c <PORTB_set_pin_dir>
}
    165a:	00 00       	nop
    165c:	0f 90       	pop	r0
    165e:	df 91       	pop	r29
    1660:	cf 91       	pop	r28
    1662:	08 95       	ret

00001664 <PB0_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PB0_set_level(const bool level)
{
    1664:	cf 93       	push	r28
    1666:	df 93       	push	r29
    1668:	1f 92       	push	r1
    166a:	cd b7       	in	r28, 0x3d	; 61
    166c:	de b7       	in	r29, 0x3e	; 62
    166e:	89 83       	std	Y+1, r24	; 0x01
	PORTB_set_pin_level(0, level);
    1670:	69 81       	ldd	r22, Y+1	; 0x01
    1672:	80 e0       	ldi	r24, 0x00	; 0
    1674:	0e 94 0a 09 	call	0x1214	; 0x1214 <PORTB_set_pin_level>
}
    1678:	00 00       	nop
    167a:	0f 90       	pop	r0
    167c:	df 91       	pop	r29
    167e:	cf 91       	pop	r28
    1680:	08 95       	ret

00001682 <PB1_set_pull_mode>:
 * modes are defined by device used
 *
 * \param[in] pull_mode Pin pull mode
 */
static inline void PB1_set_pull_mode(const enum port_pull_mode pull_mode)
{
    1682:	cf 93       	push	r28
    1684:	df 93       	push	r29
    1686:	1f 92       	push	r1
    1688:	cd b7       	in	r28, 0x3d	; 61
    168a:	de b7       	in	r29, 0x3e	; 62
    168c:	89 83       	std	Y+1, r24	; 0x01
	PORTB_set_pin_pull_mode(1, pull_mode);
    168e:	69 81       	ldd	r22, Y+1	; 0x01
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	0e 94 85 08 	call	0x110a	; 0x110a <PORTB_set_pin_pull_mode>
}
    1696:	00 00       	nop
    1698:	0f 90       	pop	r0
    169a:	df 91       	pop	r29
    169c:	cf 91       	pop	r28
    169e:	08 95       	ret

000016a0 <PB1_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PB1_set_dir(const enum port_dir dir)
{
    16a0:	cf 93       	push	r28
    16a2:	df 93       	push	r29
    16a4:	1f 92       	push	r1
    16a6:	cd b7       	in	r28, 0x3d	; 61
    16a8:	de b7       	in	r29, 0x3e	; 62
    16aa:	89 83       	std	Y+1, r24	; 0x01
	PORTB_set_pin_dir(1, dir);
    16ac:	69 81       	ldd	r22, Y+1	; 0x01
    16ae:	81 e0       	ldi	r24, 0x01	; 1
    16b0:	0e 94 b6 08 	call	0x116c	; 0x116c <PORTB_set_pin_dir>
}
    16b4:	00 00       	nop
    16b6:	0f 90       	pop	r0
    16b8:	df 91       	pop	r29
    16ba:	cf 91       	pop	r28
    16bc:	08 95       	ret

000016be <LED0_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void LED0_set_dir(const enum port_dir dir)
{
    16be:	cf 93       	push	r28
    16c0:	df 93       	push	r29
    16c2:	1f 92       	push	r1
    16c4:	cd b7       	in	r28, 0x3d	; 61
    16c6:	de b7       	in	r29, 0x3e	; 62
    16c8:	89 83       	std	Y+1, r24	; 0x01
	PORTB_set_pin_dir(3, dir);
    16ca:	69 81       	ldd	r22, Y+1	; 0x01
    16cc:	83 e0       	ldi	r24, 0x03	; 3
    16ce:	0e 94 b6 08 	call	0x116c	; 0x116c <PORTB_set_pin_dir>
}
    16d2:	00 00       	nop
    16d4:	0f 90       	pop	r0
    16d6:	df 91       	pop	r29
    16d8:	cf 91       	pop	r28
    16da:	08 95       	ret

000016dc <LED0_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void LED0_set_level(const bool level)
{
    16dc:	cf 93       	push	r28
    16de:	df 93       	push	r29
    16e0:	1f 92       	push	r1
    16e2:	cd b7       	in	r28, 0x3d	; 61
    16e4:	de b7       	in	r29, 0x3e	; 62
    16e6:	89 83       	std	Y+1, r24	; 0x01
	PORTB_set_pin_level(3, level);
    16e8:	69 81       	ldd	r22, Y+1	; 0x01
    16ea:	83 e0       	ldi	r24, 0x03	; 3
    16ec:	0e 94 0a 09 	call	0x1214	; 0x1214 <PORTB_set_pin_level>
}
    16f0:	00 00       	nop
    16f2:	0f 90       	pop	r0
    16f4:	df 91       	pop	r29
    16f6:	cf 91       	pop	r28
    16f8:	08 95       	ret

000016fa <PC0_set_pull_mode>:
 * modes are defined by device used
 *
 * \param[in] pull_mode Pin pull mode
 */
static inline void PC0_set_pull_mode(const enum port_pull_mode pull_mode)
{
    16fa:	cf 93       	push	r28
    16fc:	df 93       	push	r29
    16fe:	1f 92       	push	r1
    1700:	cd b7       	in	r28, 0x3d	; 61
    1702:	de b7       	in	r29, 0x3e	; 62
    1704:	89 83       	std	Y+1, r24	; 0x01
	PORTC_set_pin_pull_mode(0, pull_mode);
    1706:	69 81       	ldd	r22, Y+1	; 0x01
    1708:	80 e0       	ldi	r24, 0x00	; 0
    170a:	0e 94 44 09 	call	0x1288	; 0x1288 <PORTC_set_pin_pull_mode>
}
    170e:	00 00       	nop
    1710:	0f 90       	pop	r0
    1712:	df 91       	pop	r29
    1714:	cf 91       	pop	r28
    1716:	08 95       	ret

00001718 <PC0_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PC0_set_dir(const enum port_dir dir)
{
    1718:	cf 93       	push	r28
    171a:	df 93       	push	r29
    171c:	1f 92       	push	r1
    171e:	cd b7       	in	r28, 0x3d	; 61
    1720:	de b7       	in	r29, 0x3e	; 62
    1722:	89 83       	std	Y+1, r24	; 0x01
	PORTC_set_pin_dir(0, dir);
    1724:	69 81       	ldd	r22, Y+1	; 0x01
    1726:	80 e0       	ldi	r24, 0x00	; 0
    1728:	0e 94 75 09 	call	0x12ea	; 0x12ea <PORTC_set_pin_dir>
}
    172c:	00 00       	nop
    172e:	0f 90       	pop	r0
    1730:	df 91       	pop	r29
    1732:	cf 91       	pop	r28
    1734:	08 95       	ret

00001736 <PC1_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PC1_set_dir(const enum port_dir dir)
{
    1736:	cf 93       	push	r28
    1738:	df 93       	push	r29
    173a:	1f 92       	push	r1
    173c:	cd b7       	in	r28, 0x3d	; 61
    173e:	de b7       	in	r29, 0x3e	; 62
    1740:	89 83       	std	Y+1, r24	; 0x01
	PORTC_set_pin_dir(1, dir);
    1742:	69 81       	ldd	r22, Y+1	; 0x01
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	0e 94 75 09 	call	0x12ea	; 0x12ea <PORTC_set_pin_dir>
}
    174a:	00 00       	nop
    174c:	0f 90       	pop	r0
    174e:	df 91       	pop	r29
    1750:	cf 91       	pop	r28
    1752:	08 95       	ret

00001754 <PC1_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PC1_set_level(const bool level)
{
    1754:	cf 93       	push	r28
    1756:	df 93       	push	r29
    1758:	1f 92       	push	r1
    175a:	cd b7       	in	r28, 0x3d	; 61
    175c:	de b7       	in	r29, 0x3e	; 62
    175e:	89 83       	std	Y+1, r24	; 0x01
	PORTC_set_pin_level(1, level);
    1760:	69 81       	ldd	r22, Y+1	; 0x01
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	0e 94 c9 09 	call	0x1392	; 0x1392 <PORTC_set_pin_level>
}
    1768:	00 00       	nop
    176a:	0f 90       	pop	r0
    176c:	df 91       	pop	r29
    176e:	cf 91       	pop	r28
    1770:	08 95       	ret

00001772 <PC2_set_pull_mode>:
 * modes are defined by device used
 *
 * \param[in] pull_mode Pin pull mode
 */
static inline void PC2_set_pull_mode(const enum port_pull_mode pull_mode)
{
    1772:	cf 93       	push	r28
    1774:	df 93       	push	r29
    1776:	1f 92       	push	r1
    1778:	cd b7       	in	r28, 0x3d	; 61
    177a:	de b7       	in	r29, 0x3e	; 62
    177c:	89 83       	std	Y+1, r24	; 0x01
	PORTC_set_pin_pull_mode(2, pull_mode);
    177e:	69 81       	ldd	r22, Y+1	; 0x01
    1780:	82 e0       	ldi	r24, 0x02	; 2
    1782:	0e 94 44 09 	call	0x1288	; 0x1288 <PORTC_set_pin_pull_mode>
}
    1786:	00 00       	nop
    1788:	0f 90       	pop	r0
    178a:	df 91       	pop	r29
    178c:	cf 91       	pop	r28
    178e:	08 95       	ret

00001790 <PC2_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PC2_set_dir(const enum port_dir dir)
{
    1790:	cf 93       	push	r28
    1792:	df 93       	push	r29
    1794:	1f 92       	push	r1
    1796:	cd b7       	in	r28, 0x3d	; 61
    1798:	de b7       	in	r29, 0x3e	; 62
    179a:	89 83       	std	Y+1, r24	; 0x01
	PORTC_set_pin_dir(2, dir);
    179c:	69 81       	ldd	r22, Y+1	; 0x01
    179e:	82 e0       	ldi	r24, 0x02	; 2
    17a0:	0e 94 75 09 	call	0x12ea	; 0x12ea <PORTC_set_pin_dir>
}
    17a4:	00 00       	nop
    17a6:	0f 90       	pop	r0
    17a8:	df 91       	pop	r29
    17aa:	cf 91       	pop	r28
    17ac:	08 95       	ret

000017ae <PC3_set_pull_mode>:
 * modes are defined by device used
 *
 * \param[in] pull_mode Pin pull mode
 */
static inline void PC3_set_pull_mode(const enum port_pull_mode pull_mode)
{
    17ae:	cf 93       	push	r28
    17b0:	df 93       	push	r29
    17b2:	1f 92       	push	r1
    17b4:	cd b7       	in	r28, 0x3d	; 61
    17b6:	de b7       	in	r29, 0x3e	; 62
    17b8:	89 83       	std	Y+1, r24	; 0x01
	PORTC_set_pin_pull_mode(3, pull_mode);
    17ba:	69 81       	ldd	r22, Y+1	; 0x01
    17bc:	83 e0       	ldi	r24, 0x03	; 3
    17be:	0e 94 44 09 	call	0x1288	; 0x1288 <PORTC_set_pin_pull_mode>
}
    17c2:	00 00       	nop
    17c4:	0f 90       	pop	r0
    17c6:	df 91       	pop	r29
    17c8:	cf 91       	pop	r28
    17ca:	08 95       	ret

000017cc <PC3_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PC3_set_dir(const enum port_dir dir)
{
    17cc:	cf 93       	push	r28
    17ce:	df 93       	push	r29
    17d0:	1f 92       	push	r1
    17d2:	cd b7       	in	r28, 0x3d	; 61
    17d4:	de b7       	in	r29, 0x3e	; 62
    17d6:	89 83       	std	Y+1, r24	; 0x01
	PORTC_set_pin_dir(3, dir);
    17d8:	69 81       	ldd	r22, Y+1	; 0x01
    17da:	83 e0       	ldi	r24, 0x03	; 3
    17dc:	0e 94 75 09 	call	0x12ea	; 0x12ea <PORTC_set_pin_dir>
}
    17e0:	00 00       	nop
    17e2:	0f 90       	pop	r0
    17e4:	df 91       	pop	r29
    17e6:	cf 91       	pop	r28
    17e8:	08 95       	ret

000017ea <PD1_set_pull_mode>:
 * modes are defined by device used
 *
 * \param[in] pull_mode Pin pull mode
 */
static inline void PD1_set_pull_mode(const enum port_pull_mode pull_mode)
{
    17ea:	cf 93       	push	r28
    17ec:	df 93       	push	r29
    17ee:	1f 92       	push	r1
    17f0:	cd b7       	in	r28, 0x3d	; 61
    17f2:	de b7       	in	r29, 0x3e	; 62
    17f4:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_pull_mode(1, pull_mode);
    17f6:	69 81       	ldd	r22, Y+1	; 0x01
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	0e 94 03 0a 	call	0x1406	; 0x1406 <PORTD_set_pin_pull_mode>
}
    17fe:	00 00       	nop
    1800:	0f 90       	pop	r0
    1802:	df 91       	pop	r29
    1804:	cf 91       	pop	r28
    1806:	08 95       	ret

00001808 <PD1_set_isc>:
 *                PORT_ISC_FALLING_gc       = Sense Falling Edge
 *                PORT_ISC_INPUT_DISABLE_gc = Digital Input Buffer disabled
 *                PORT_ISC_LEVEL_gc         = Sense low Level
 */
static inline void PD1_set_isc(const PORT_ISC_t isc)
{
    1808:	cf 93       	push	r28
    180a:	df 93       	push	r29
    180c:	1f 92       	push	r1
    180e:	cd b7       	in	r28, 0x3d	; 61
    1810:	de b7       	in	r29, 0x3e	; 62
    1812:	89 83       	std	Y+1, r24	; 0x01
	PORTD_pin_set_isc(1, isc);
    1814:	69 81       	ldd	r22, Y+1	; 0x01
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	0e 94 34 0a 	call	0x1468	; 0x1468 <PORTD_pin_set_isc>
}
    181c:	00 00       	nop
    181e:	0f 90       	pop	r0
    1820:	df 91       	pop	r29
    1822:	cf 91       	pop	r28
    1824:	08 95       	ret

00001826 <PD5_set_pull_mode>:
 * modes are defined by device used
 *
 * \param[in] pull_mode Pin pull mode
 */
static inline void PD5_set_pull_mode(const enum port_pull_mode pull_mode)
{
    1826:	cf 93       	push	r28
    1828:	df 93       	push	r29
    182a:	1f 92       	push	r1
    182c:	cd b7       	in	r28, 0x3d	; 61
    182e:	de b7       	in	r29, 0x3e	; 62
    1830:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_pull_mode(5, pull_mode);
    1832:	69 81       	ldd	r22, Y+1	; 0x01
    1834:	85 e0       	ldi	r24, 0x05	; 5
    1836:	0e 94 03 0a 	call	0x1406	; 0x1406 <PORTD_set_pin_pull_mode>
}
    183a:	00 00       	nop
    183c:	0f 90       	pop	r0
    183e:	df 91       	pop	r29
    1840:	cf 91       	pop	r28
    1842:	08 95       	ret

00001844 <PD5_set_isc>:
 *                PORT_ISC_FALLING_gc       = Sense Falling Edge
 *                PORT_ISC_INPUT_DISABLE_gc = Digital Input Buffer disabled
 *                PORT_ISC_LEVEL_gc         = Sense low Level
 */
static inline void PD5_set_isc(const PORT_ISC_t isc)
{
    1844:	cf 93       	push	r28
    1846:	df 93       	push	r29
    1848:	1f 92       	push	r1
    184a:	cd b7       	in	r28, 0x3d	; 61
    184c:	de b7       	in	r29, 0x3e	; 62
    184e:	89 83       	std	Y+1, r24	; 0x01
	PORTD_pin_set_isc(5, isc);
    1850:	69 81       	ldd	r22, Y+1	; 0x01
    1852:	85 e0       	ldi	r24, 0x05	; 5
    1854:	0e 94 34 0a 	call	0x1468	; 0x1468 <PORTD_pin_set_isc>
}
    1858:	00 00       	nop
    185a:	0f 90       	pop	r0
    185c:	df 91       	pop	r29
    185e:	cf 91       	pop	r28
    1860:	08 95       	ret

00001862 <PD7_set_pull_mode>:
 * modes are defined by device used
 *
 * \param[in] pull_mode Pin pull mode
 */
static inline void PD7_set_pull_mode(const enum port_pull_mode pull_mode)
{
    1862:	cf 93       	push	r28
    1864:	df 93       	push	r29
    1866:	1f 92       	push	r1
    1868:	cd b7       	in	r28, 0x3d	; 61
    186a:	de b7       	in	r29, 0x3e	; 62
    186c:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_pull_mode(7, pull_mode);
    186e:	69 81       	ldd	r22, Y+1	; 0x01
    1870:	87 e0       	ldi	r24, 0x07	; 7
    1872:	0e 94 03 0a 	call	0x1406	; 0x1406 <PORTD_set_pin_pull_mode>
}
    1876:	00 00       	nop
    1878:	0f 90       	pop	r0
    187a:	df 91       	pop	r29
    187c:	cf 91       	pop	r28
    187e:	08 95       	ret

00001880 <PD7_set_isc>:
 *                PORT_ISC_FALLING_gc       = Sense Falling Edge
 *                PORT_ISC_INPUT_DISABLE_gc = Digital Input Buffer disabled
 *                PORT_ISC_LEVEL_gc         = Sense low Level
 */
static inline void PD7_set_isc(const PORT_ISC_t isc)
{
    1880:	cf 93       	push	r28
    1882:	df 93       	push	r29
    1884:	1f 92       	push	r1
    1886:	cd b7       	in	r28, 0x3d	; 61
    1888:	de b7       	in	r29, 0x3e	; 62
    188a:	89 83       	std	Y+1, r24	; 0x01
	PORTD_pin_set_isc(7, isc);
    188c:	69 81       	ldd	r22, Y+1	; 0x01
    188e:	87 e0       	ldi	r24, 0x07	; 7
    1890:	0e 94 34 0a 	call	0x1468	; 0x1468 <PORTD_pin_set_isc>
}
    1894:	00 00       	nop
    1896:	0f 90       	pop	r0
    1898:	df 91       	pop	r29
    189a:	cf 91       	pop	r28
    189c:	08 95       	ret

0000189e <PE3_set_pull_mode>:
 * modes are defined by device used
 *
 * \param[in] pull_mode Pin pull mode
 */
static inline void PE3_set_pull_mode(const enum port_pull_mode pull_mode)
{
    189e:	cf 93       	push	r28
    18a0:	df 93       	push	r29
    18a2:	1f 92       	push	r1
    18a4:	cd b7       	in	r28, 0x3d	; 61
    18a6:	de b7       	in	r29, 0x3e	; 62
    18a8:	89 83       	std	Y+1, r24	; 0x01
	PORTE_set_pin_pull_mode(3, pull_mode);
    18aa:	69 81       	ldd	r22, Y+1	; 0x01
    18ac:	83 e0       	ldi	r24, 0x03	; 3
    18ae:	0e 94 57 0a 	call	0x14ae	; 0x14ae <PORTE_set_pin_pull_mode>
}
    18b2:	00 00       	nop
    18b4:	0f 90       	pop	r0
    18b6:	df 91       	pop	r29
    18b8:	cf 91       	pop	r28
    18ba:	08 95       	ret

000018bc <PE3_set_isc>:
 *                PORT_ISC_FALLING_gc       = Sense Falling Edge
 *                PORT_ISC_INPUT_DISABLE_gc = Digital Input Buffer disabled
 *                PORT_ISC_LEVEL_gc         = Sense low Level
 */
static inline void PE3_set_isc(const PORT_ISC_t isc)
{
    18bc:	cf 93       	push	r28
    18be:	df 93       	push	r29
    18c0:	1f 92       	push	r1
    18c2:	cd b7       	in	r28, 0x3d	; 61
    18c4:	de b7       	in	r29, 0x3e	; 62
    18c6:	89 83       	std	Y+1, r24	; 0x01
	PORTE_pin_set_isc(3, isc);
    18c8:	69 81       	ldd	r22, Y+1	; 0x01
    18ca:	83 e0       	ldi	r24, 0x03	; 3
    18cc:	0e 94 88 0a 	call	0x1510	; 0x1510 <PORTE_pin_set_isc>
}
    18d0:	00 00       	nop
    18d2:	0f 90       	pop	r0
    18d4:	df 91       	pop	r29
    18d6:	cf 91       	pop	r28
    18d8:	08 95       	ret

000018da <mcu_init>:
#ifdef __cplusplus
extern "C" {
#endif

void mcu_init(void)
{
    18da:	cf 93       	push	r28
    18dc:	df 93       	push	r29
    18de:	cd b7       	in	r28, 0x3d	; 61
    18e0:	de b7       	in	r29, 0x3e	; 62
    18e2:	26 97       	sbiw	r28, 0x06	; 6
    18e4:	cd bf       	out	0x3d, r28	; 61
    18e6:	de bf       	out	0x3e, r29	; 62
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
    18e8:	19 82       	std	Y+1, r1	; 0x01
    18ea:	12 c0       	rjmp	.+36     	; 0x1910 <mcu_init+0x36>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    18ec:	89 81       	ldd	r24, Y+1	; 0x01
    18ee:	88 2f       	mov	r24, r24
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	80 5f       	subi	r24, 0xF0	; 240
    18f4:	9b 4f       	sbci	r25, 0xFB	; 251
    18f6:	29 81       	ldd	r18, Y+1	; 0x01
    18f8:	22 2f       	mov	r18, r18
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	20 5f       	subi	r18, 0xF0	; 240
    18fe:	3b 4f       	sbci	r19, 0xFB	; 251
    1900:	f9 01       	movw	r30, r18
    1902:	20 81       	ld	r18, Z
    1904:	28 60       	ori	r18, 0x08	; 8
    1906:	fc 01       	movw	r30, r24
    1908:	20 83       	st	Z, r18
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
    190a:	89 81       	ldd	r24, Y+1	; 0x01
    190c:	8f 5f       	subi	r24, 0xFF	; 255
    190e:	89 83       	std	Y+1, r24	; 0x01
    1910:	89 81       	ldd	r24, Y+1	; 0x01
    1912:	88 30       	cpi	r24, 0x08	; 8
    1914:	58 f3       	brcs	.-42     	; 0x18ec <mcu_init+0x12>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    1916:	1a 82       	std	Y+2, r1	; 0x02
    1918:	12 c0       	rjmp	.+36     	; 0x193e <mcu_init+0x64>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    191a:	8a 81       	ldd	r24, Y+2	; 0x02
    191c:	88 2f       	mov	r24, r24
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	80 5d       	subi	r24, 0xD0	; 208
    1922:	9b 4f       	sbci	r25, 0xFB	; 251
    1924:	2a 81       	ldd	r18, Y+2	; 0x02
    1926:	22 2f       	mov	r18, r18
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	20 5d       	subi	r18, 0xD0	; 208
    192c:	3b 4f       	sbci	r19, 0xFB	; 251
    192e:	f9 01       	movw	r30, r18
    1930:	20 81       	ld	r18, Z
    1932:	28 60       	ori	r18, 0x08	; 8
    1934:	fc 01       	movw	r30, r24
    1936:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    1938:	8a 81       	ldd	r24, Y+2	; 0x02
    193a:	8f 5f       	subi	r24, 0xFF	; 255
    193c:	8a 83       	std	Y+2, r24	; 0x02
    193e:	8a 81       	ldd	r24, Y+2	; 0x02
    1940:	88 30       	cpi	r24, 0x08	; 8
    1942:	58 f3       	brcs	.-42     	; 0x191a <mcu_init+0x40>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    1944:	1b 82       	std	Y+3, r1	; 0x03
    1946:	12 c0       	rjmp	.+36     	; 0x196c <mcu_init+0x92>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    1948:	8b 81       	ldd	r24, Y+3	; 0x03
    194a:	88 2f       	mov	r24, r24
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	80 5b       	subi	r24, 0xB0	; 176
    1950:	9b 4f       	sbci	r25, 0xFB	; 251
    1952:	2b 81       	ldd	r18, Y+3	; 0x03
    1954:	22 2f       	mov	r18, r18
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	20 5b       	subi	r18, 0xB0	; 176
    195a:	3b 4f       	sbci	r19, 0xFB	; 251
    195c:	f9 01       	movw	r30, r18
    195e:	20 81       	ld	r18, Z
    1960:	28 60       	ori	r18, 0x08	; 8
    1962:	fc 01       	movw	r30, r24
    1964:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    1966:	8b 81       	ldd	r24, Y+3	; 0x03
    1968:	8f 5f       	subi	r24, 0xFF	; 255
    196a:	8b 83       	std	Y+3, r24	; 0x03
    196c:	8b 81       	ldd	r24, Y+3	; 0x03
    196e:	88 30       	cpi	r24, 0x08	; 8
    1970:	58 f3       	brcs	.-42     	; 0x1948 <mcu_init+0x6e>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    1972:	1c 82       	std	Y+4, r1	; 0x04
    1974:	12 c0       	rjmp	.+36     	; 0x199a <mcu_init+0xc0>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    1976:	8c 81       	ldd	r24, Y+4	; 0x04
    1978:	88 2f       	mov	r24, r24
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	80 59       	subi	r24, 0x90	; 144
    197e:	9b 4f       	sbci	r25, 0xFB	; 251
    1980:	2c 81       	ldd	r18, Y+4	; 0x04
    1982:	22 2f       	mov	r18, r18
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	20 59       	subi	r18, 0x90	; 144
    1988:	3b 4f       	sbci	r19, 0xFB	; 251
    198a:	f9 01       	movw	r30, r18
    198c:	20 81       	ld	r18, Z
    198e:	28 60       	ori	r18, 0x08	; 8
    1990:	fc 01       	movw	r30, r24
    1992:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    1994:	8c 81       	ldd	r24, Y+4	; 0x04
    1996:	8f 5f       	subi	r24, 0xFF	; 255
    1998:	8c 83       	std	Y+4, r24	; 0x04
    199a:	8c 81       	ldd	r24, Y+4	; 0x04
    199c:	88 30       	cpi	r24, 0x08	; 8
    199e:	58 f3       	brcs	.-42     	; 0x1976 <mcu_init+0x9c>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    19a0:	1d 82       	std	Y+5, r1	; 0x05
    19a2:	12 c0       	rjmp	.+36     	; 0x19c8 <mcu_init+0xee>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    19a4:	8d 81       	ldd	r24, Y+5	; 0x05
    19a6:	88 2f       	mov	r24, r24
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	80 57       	subi	r24, 0x70	; 112
    19ac:	9b 4f       	sbci	r25, 0xFB	; 251
    19ae:	2d 81       	ldd	r18, Y+5	; 0x05
    19b0:	22 2f       	mov	r18, r18
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	20 57       	subi	r18, 0x70	; 112
    19b6:	3b 4f       	sbci	r19, 0xFB	; 251
    19b8:	f9 01       	movw	r30, r18
    19ba:	20 81       	ld	r18, Z
    19bc:	28 60       	ori	r18, 0x08	; 8
    19be:	fc 01       	movw	r30, r24
    19c0:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    19c2:	8d 81       	ldd	r24, Y+5	; 0x05
    19c4:	8f 5f       	subi	r24, 0xFF	; 255
    19c6:	8d 83       	std	Y+5, r24	; 0x05
    19c8:	8d 81       	ldd	r24, Y+5	; 0x05
    19ca:	88 30       	cpi	r24, 0x08	; 8
    19cc:	58 f3       	brcs	.-42     	; 0x19a4 <mcu_init+0xca>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    19ce:	1e 82       	std	Y+6, r1	; 0x06
    19d0:	12 c0       	rjmp	.+36     	; 0x19f6 <mcu_init+0x11c>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    19d2:	8e 81       	ldd	r24, Y+6	; 0x06
    19d4:	88 2f       	mov	r24, r24
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	80 55       	subi	r24, 0x50	; 80
    19da:	9b 4f       	sbci	r25, 0xFB	; 251
    19dc:	2e 81       	ldd	r18, Y+6	; 0x06
    19de:	22 2f       	mov	r18, r18
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	20 55       	subi	r18, 0x50	; 80
    19e4:	3b 4f       	sbci	r19, 0xFB	; 251
    19e6:	f9 01       	movw	r30, r18
    19e8:	20 81       	ld	r18, Z
    19ea:	28 60       	ori	r18, 0x08	; 8
    19ec:	fc 01       	movw	r30, r24
    19ee:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    19f0:	8e 81       	ldd	r24, Y+6	; 0x06
    19f2:	8f 5f       	subi	r24, 0xFF	; 255
    19f4:	8e 83       	std	Y+6, r24	; 0x06
    19f6:	8e 81       	ldd	r24, Y+6	; 0x06
    19f8:	88 30       	cpi	r24, 0x08	; 8
    19fa:	58 f3       	brcs	.-42     	; 0x19d2 <mcu_init+0xf8>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
    19fc:	00 00       	nop
    19fe:	26 96       	adiw	r28, 0x06	; 6
    1a00:	cd bf       	out	0x3d, r28	; 61
    1a02:	de bf       	out	0x3e, r29	; 62
    1a04:	df 91       	pop	r29
    1a06:	cf 91       	pop	r28
    1a08:	08 95       	ret

00001a0a <OPERATIONAL_AMPLIFIER_0_initialization>:
#include "driver_init.h"
#include <system.h>

/* Configure pins and initialize registers */
void OPERATIONAL_AMPLIFIER_0_initialization(void)
{
    1a0a:	cf 93       	push	r28
    1a0c:	df 93       	push	r29
    1a0e:	cd b7       	in	r28, 0x3d	; 61
    1a10:	de b7       	in	r29, 0x3e	; 62

	// Disable digital input buffer
	PD7_set_isc(PORT_ISC_INPUT_DISABLE_gc);
    1a12:	84 e0       	ldi	r24, 0x04	; 4
    1a14:	0e 94 40 0c 	call	0x1880	; 0x1880 <PD7_set_isc>
	// Disable pull-up resistor
	PD7_set_pull_mode(PORT_PULL_OFF);
    1a18:	80 e0       	ldi	r24, 0x00	; 0
    1a1a:	0e 94 31 0c 	call	0x1862	; 0x1862 <PD7_set_pull_mode>

	// Disable digital input buffer
	PD5_set_isc(PORT_ISC_INPUT_DISABLE_gc);
    1a1e:	84 e0       	ldi	r24, 0x04	; 4
    1a20:	0e 94 22 0c 	call	0x1844	; 0x1844 <PD5_set_isc>
	// Disable pull-up resistor
	PD5_set_pull_mode(PORT_PULL_OFF);
    1a24:	80 e0       	ldi	r24, 0x00	; 0
    1a26:	0e 94 13 0c 	call	0x1826	; 0x1826 <PD5_set_pull_mode>

	OPERATIONAL_AMPLIFIER_0_init();
    1a2a:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <OPERATIONAL_AMPLIFIER_0_init>
}
    1a2e:	00 00       	nop
    1a30:	df 91       	pop	r29
    1a32:	cf 91       	pop	r28
    1a34:	08 95       	ret

00001a36 <USART_0_initialization>:

/* configure the pins and initialize the registers */
void USART_0_initialization(void)
{
    1a36:	cf 93       	push	r28
    1a38:	df 93       	push	r29
    1a3a:	cd b7       	in	r28, 0x3d	; 61
    1a3c:	de b7       	in	r29, 0x3e	; 62

	// Set pin direction to input
	PB1_set_dir(PORT_DIR_IN);
    1a3e:	80 e0       	ldi	r24, 0x00	; 0
    1a40:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <PB1_set_dir>

	PB1_set_pull_mode(
    1a44:	80 e0       	ldi	r24, 0x00	; 0
    1a46:	0e 94 41 0b 	call	0x1682	; 0x1682 <PB1_set_pull_mode>
	    // <PORT_PULL_UP"> Pull-up
	    PORT_PULL_OFF);

	// Set pin direction to output

	PB0_set_level(
    1a4a:	80 e0       	ldi	r24, 0x00	; 0
    1a4c:	0e 94 32 0b 	call	0x1664	; 0x1664 <PB0_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	PB0_set_dir(PORT_DIR_OUT);
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	0e 94 23 0b 	call	0x1646	; 0x1646 <PB0_set_dir>

	USART_0_init();
    1a56:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <USART_0_init>
}
    1a5a:	00 00       	nop
    1a5c:	df 91       	pop	r29
    1a5e:	cf 91       	pop	r28
    1a60:	08 95       	ret

00001a62 <EVENT_SYSTEM_0_initialization>:

void EVENT_SYSTEM_0_initialization(void)
{
    1a62:	cf 93       	push	r28
    1a64:	df 93       	push	r29
    1a66:	cd b7       	in	r28, 0x3d	; 61
    1a68:	de b7       	in	r29, 0x3e	; 62

	EVENT_SYSTEM_0_init();
    1a6a:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <EVENT_SYSTEM_0_init>
}
    1a6e:	00 00       	nop
    1a70:	df 91       	pop	r29
    1a72:	cf 91       	pop	r28
    1a74:	08 95       	ret

00001a76 <ZCD_RISING_initialization>:

/* configure pins and initialize registers */
void ZCD_RISING_initialization(void)
{
    1a76:	cf 93       	push	r28
    1a78:	df 93       	push	r29
    1a7a:	cd b7       	in	r28, 0x3d	; 61
    1a7c:	de b7       	in	r29, 0x3e	; 62

	// Disable digital input buffer
	PD1_set_isc(PORT_ISC_INPUT_DISABLE_gc);
    1a7e:	84 e0       	ldi	r24, 0x04	; 4
    1a80:	0e 94 04 0c 	call	0x1808	; 0x1808 <PD1_set_isc>
	// Disable pull-up resistor
	PD1_set_pull_mode(PORT_PULL_OFF);
    1a84:	80 e0       	ldi	r24, 0x00	; 0
    1a86:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <PD1_set_pull_mode>

	ZCD_RISING_init();
    1a8a:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <ZCD_RISING_init>
}
    1a8e:	00 00       	nop
    1a90:	df 91       	pop	r29
    1a92:	cf 91       	pop	r28
    1a94:	08 95       	ret

00001a96 <ZCD_FALLING_initialization>:

/* configure pins and initialize registers */
void ZCD_FALLING_initialization(void)
{
    1a96:	cf 93       	push	r28
    1a98:	df 93       	push	r29
    1a9a:	cd b7       	in	r28, 0x3d	; 61
    1a9c:	de b7       	in	r29, 0x3e	; 62

	// Disable digital input buffer
	PE3_set_isc(PORT_ISC_INPUT_DISABLE_gc);
    1a9e:	84 e0       	ldi	r24, 0x04	; 4
    1aa0:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <PE3_set_isc>
	// Disable pull-up resistor
	PE3_set_pull_mode(PORT_PULL_OFF);
    1aa4:	80 e0       	ldi	r24, 0x00	; 0
    1aa6:	0e 94 4f 0c 	call	0x189e	; 0x189e <PE3_set_pull_mode>

	ZCD_FALLING_init();
    1aaa:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <ZCD_FALLING_init>
}
    1aae:	00 00       	nop
    1ab0:	df 91       	pop	r29
    1ab2:	cf 91       	pop	r28
    1ab4:	08 95       	ret

00001ab6 <SPI_REFERENCE_initialization>:

/* configure the pins and initialize the registers */
void SPI_REFERENCE_initialization(void)
{
    1ab6:	cf 93       	push	r28
    1ab8:	df 93       	push	r29
    1aba:	cd b7       	in	r28, 0x3d	; 61
    1abc:	de b7       	in	r29, 0x3e	; 62

	// Set pin direction to output

	PA5_set_level(
    1abe:	80 e0       	ldi	r24, 0x00	; 0
    1ac0:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <PA5_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	PA5_set_dir(PORT_DIR_OUT);
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	0e 94 c9 0a 	call	0x1592	; 0x1592 <PA5_set_dir>

	// Set pin direction to input
	PA4_set_dir(PORT_DIR_IN);
    1aca:	80 e0       	ldi	r24, 0x00	; 0
    1acc:	0e 94 ba 0a 	call	0x1574	; 0x1574 <PA4_set_dir>

	PA4_set_pull_mode(
    1ad0:	80 e0       	ldi	r24, 0x00	; 0
    1ad2:	0e 94 ab 0a 	call	0x1556	; 0x1556 <PA4_set_pull_mode>
	    // <PORT_PULL_OFF"> Off
	    // <PORT_PULL_UP"> Pull-up
	    PORT_PULL_OFF);

	// Set pin direction to input
	PA6_set_dir(PORT_DIR_IN);
    1ad6:	80 e0       	ldi	r24, 0x00	; 0
    1ad8:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <PA6_set_dir>

	PA6_set_pull_mode(
    1adc:	80 e0       	ldi	r24, 0x00	; 0
    1ade:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <PA6_set_pull_mode>
	    // <PORT_PULL_OFF"> Off
	    // <PORT_PULL_UP"> Pull-up
	    PORT_PULL_OFF);

	// Set pin direction to input
	PA7_set_dir(PORT_DIR_IN);
    1ae2:	80 e0       	ldi	r24, 0x00	; 0
    1ae4:	0e 94 14 0b 	call	0x1628	; 0x1628 <PA7_set_dir>

	PA7_set_pull_mode(
    1ae8:	80 e0       	ldi	r24, 0x00	; 0
    1aea:	0e 94 05 0b 	call	0x160a	; 0x160a <PA7_set_pull_mode>
	    // <id> pad_pull_config
	    // <PORT_PULL_OFF"> Off
	    // <PORT_PULL_UP"> Pull-up
	    PORT_PULL_OFF);

	SPI_REFERENCE_init();
    1aee:	0e 94 f0 06 	call	0xde0	; 0xde0 <SPI_REFERENCE_init>
}
    1af2:	00 00       	nop
    1af4:	df 91       	pop	r29
    1af6:	cf 91       	pop	r28
    1af8:	08 95       	ret

00001afa <SPI_ZCD_initialization>:

/* configure the pins and initialize the registers */
void SPI_ZCD_initialization(void)
{
    1afa:	cf 93       	push	r28
    1afc:	df 93       	push	r29
    1afe:	cd b7       	in	r28, 0x3d	; 61
    1b00:	de b7       	in	r29, 0x3e	; 62

	// Set pin direction to output

	PC1_set_level(
    1b02:	80 e0       	ldi	r24, 0x00	; 0
    1b04:	0e 94 aa 0b 	call	0x1754	; 0x1754 <PC1_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	PC1_set_dir(PORT_DIR_OUT);
    1b08:	81 e0       	ldi	r24, 0x01	; 1
    1b0a:	0e 94 9b 0b 	call	0x1736	; 0x1736 <PC1_set_dir>

	// Set pin direction to input
	PC0_set_dir(PORT_DIR_IN);
    1b0e:	80 e0       	ldi	r24, 0x00	; 0
    1b10:	0e 94 8c 0b 	call	0x1718	; 0x1718 <PC0_set_dir>

	PC0_set_pull_mode(
    1b14:	80 e0       	ldi	r24, 0x00	; 0
    1b16:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <PC0_set_pull_mode>
	    // <PORT_PULL_OFF"> Off
	    // <PORT_PULL_UP"> Pull-up
	    PORT_PULL_OFF);

	// Set pin direction to input
	PC2_set_dir(PORT_DIR_IN);
    1b1a:	80 e0       	ldi	r24, 0x00	; 0
    1b1c:	0e 94 c8 0b 	call	0x1790	; 0x1790 <PC2_set_dir>

	PC2_set_pull_mode(
    1b20:	80 e0       	ldi	r24, 0x00	; 0
    1b22:	0e 94 b9 0b 	call	0x1772	; 0x1772 <PC2_set_pull_mode>
	    // <PORT_PULL_OFF"> Off
	    // <PORT_PULL_UP"> Pull-up
	    PORT_PULL_OFF);

	// Set pin direction to input
	PC3_set_dir(PORT_DIR_IN);
    1b26:	80 e0       	ldi	r24, 0x00	; 0
    1b28:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <PC3_set_dir>

	PC3_set_pull_mode(
    1b2c:	80 e0       	ldi	r24, 0x00	; 0
    1b2e:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <PC3_set_pull_mode>
	    // <id> pad_pull_config
	    // <PORT_PULL_OFF"> Off
	    // <PORT_PULL_UP"> Pull-up
	    PORT_PULL_OFF);

	SPI_ZCD_init();
    1b32:	0e 94 ff 06 	call	0xdfe	; 0xdfe <SPI_ZCD_init>
}
    1b36:	00 00       	nop
    1b38:	df 91       	pop	r29
    1b3a:	cf 91       	pop	r28
    1b3c:	08 95       	ret

00001b3e <TIMER_RISING_initialization>:

void TIMER_RISING_initialization(void)
{
    1b3e:	cf 93       	push	r28
    1b40:	df 93       	push	r29
    1b42:	cd b7       	in	r28, 0x3d	; 61
    1b44:	de b7       	in	r29, 0x3e	; 62

	TIMER_RISING_init();
    1b46:	0e 94 77 0e 	call	0x1cee	; 0x1cee <TIMER_RISING_init>
}
    1b4a:	00 00       	nop
    1b4c:	df 91       	pop	r29
    1b4e:	cf 91       	pop	r28
    1b50:	08 95       	ret

00001b52 <TIMER_FALLING_initialization>:

void TIMER_FALLING_initialization(void)
{
    1b52:	cf 93       	push	r28
    1b54:	df 93       	push	r29
    1b56:	cd b7       	in	r28, 0x3d	; 61
    1b58:	de b7       	in	r29, 0x3e	; 62

	TIMER_FALLING_init();
    1b5a:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <TIMER_FALLING_init>
}
    1b5e:	00 00       	nop
    1b60:	df 91       	pop	r29
    1b62:	cf 91       	pop	r28
    1b64:	08 95       	ret

00001b66 <TIMER_0_initialization>:

void TIMER_0_initialization(void)
{
    1b66:	cf 93       	push	r28
    1b68:	df 93       	push	r29
    1b6a:	cd b7       	in	r28, 0x3d	; 61
    1b6c:	de b7       	in	r29, 0x3e	; 62

	TIMER_0_init();
    1b6e:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <TIMER_0_init>
}
    1b72:	00 00       	nop
    1b74:	df 91       	pop	r29
    1b76:	cf 91       	pop	r28
    1b78:	08 95       	ret

00001b7a <system_init>:

/**
 * \brief System initialization
 */
void system_init()
{
    1b7a:	cf 93       	push	r28
    1b7c:	df 93       	push	r29
    1b7e:	cd b7       	in	r28, 0x3d	; 61
    1b80:	de b7       	in	r29, 0x3e	; 62
	mcu_init();
    1b82:	0e 94 6d 0c 	call	0x18da	; 0x18da <mcu_init>

	/* PORT setting on PB3 */

	// Set pin direction to output

	LED0_set_level(
    1b86:	80 e0       	ldi	r24, 0x00	; 0
    1b88:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <LED0_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	LED0_set_dir(PORT_DIR_OUT);
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	0e 94 5f 0b 	call	0x16be	; 0x16be <LED0_set_dir>

	OPERATIONAL_AMPLIFIER_0_initialization();
    1b92:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <OPERATIONAL_AMPLIFIER_0_initialization>

	CLKCTRL_init();
    1b96:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <CLKCTRL_init>

	USART_0_initialization();
    1b9a:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <USART_0_initialization>

	EVENT_SYSTEM_0_initialization();
    1b9e:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <EVENT_SYSTEM_0_initialization>

	SLPCTRL_init();
    1ba2:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <SLPCTRL_init>

	CPUINT_init();
    1ba6:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <CPUINT_init>

	ZCD_RISING_initialization();
    1baa:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <ZCD_RISING_initialization>

	ZCD_FALLING_initialization();
    1bae:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <ZCD_FALLING_initialization>

	SPI_REFERENCE_initialization();
    1bb2:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <SPI_REFERENCE_initialization>

	SPI_ZCD_initialization();
    1bb6:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <SPI_ZCD_initialization>

	RTC_0_init();
    1bba:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <RTC_0_init>

	TIMER_RISING_initialization();
    1bbe:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <TIMER_RISING_initialization>

	TIMER_FALLING_initialization();
    1bc2:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <TIMER_FALLING_initialization>

	TIMER_0_initialization();
    1bc6:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <TIMER_0_initialization>

	VREF_0_init();
    1bca:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <VREF_0_init>

	BOD_init();
    1bce:	0e 94 57 0f 	call	0x1eae	; 0x1eae <BOD_init>
}
    1bd2:	00 00       	nop
    1bd4:	df 91       	pop	r29
    1bd6:	cf 91       	pop	r28
    1bd8:	08 95       	ret

00001bda <EVENT_SYSTEM_0_init>:
 * \brief Initialize EVSYS interface
 *
 * \return Initialization status.
 */
int8_t EVENT_SYSTEM_0_init()
{
    1bda:	cf 93       	push	r28
    1bdc:	df 93       	push	r29
    1bde:	cd b7       	in	r28, 0x3d	; 61
    1be0:	de b7       	in	r29, 0x3e	; 62

	EVSYS.CHANNEL0 = EVSYS_CHANNEL0_ZCD0_gc; /* Zero Cross Detect 0 out */
    1be2:	80 e0       	ldi	r24, 0x00	; 0
    1be4:	92 e0       	ldi	r25, 0x02	; 2
    1be6:	20 e3       	ldi	r18, 0x30	; 48
    1be8:	fc 01       	movw	r30, r24
    1bea:	20 8b       	std	Z+16, r18	; 0x10

	EVSYS.CHANNEL1 = EVSYS_CHANNEL1_ZCD1_gc; /* Zero Cross Detect 1 out */
    1bec:	80 e0       	ldi	r24, 0x00	; 0
    1bee:	92 e0       	ldi	r25, 0x02	; 2
    1bf0:	21 e3       	ldi	r18, 0x31	; 49
    1bf2:	fc 01       	movw	r30, r24
    1bf4:	21 8b       	std	Z+17, r18	; 0x11

	// EVSYS.USERTCA1CNTA = EVSYS_USER_OFF_gc; /* Off */

	// EVSYS.USERTCA1CNTB = EVSYS_USER_OFF_gc; /* Off */

	EVSYS.USERTCB0CAPT = EVSYS_USER_CHANNEL0_gc; /* Connect user to event channel 0 */
    1bf6:	80 e0       	ldi	r24, 0x00	; 0
    1bf8:	92 e0       	ldi	r25, 0x02	; 2
    1bfa:	21 e0       	ldi	r18, 0x01	; 1
    1bfc:	fc 01       	movw	r30, r24
    1bfe:	26 af       	std	Z+62, r18	; 0x3e

	// EVSYS.USERTCB0COUNT = EVSYS_USER_OFF_gc; /* Off */

	EVSYS.USERTCB1CAPT = EVSYS_USER_CHANNEL1_gc; /* Connect user to event channel 1 */
    1c00:	80 e0       	ldi	r24, 0x00	; 0
    1c02:	92 e0       	ldi	r25, 0x02	; 2
    1c04:	80 5c       	subi	r24, 0xC0	; 192
    1c06:	9f 4f       	sbci	r25, 0xFF	; 255
    1c08:	22 e0       	ldi	r18, 0x02	; 2
    1c0a:	fc 01       	movw	r30, r24
    1c0c:	20 83       	st	Z, r18

	// EVSYS.USERTCB2CAPT = EVSYS_USER_OFF_gc; /* Off */

	// EVSYS.USERTCB2COUNT = EVSYS_USER_OFF_gc; /* Off */

	EVSYS.USERTCB3CAPT = EVSYS_USER_CHANNEL1_gc; /* Connect user to event channel 1 */
    1c0e:	80 e0       	ldi	r24, 0x00	; 0
    1c10:	92 e0       	ldi	r25, 0x02	; 2
    1c12:	8c 5b       	subi	r24, 0xBC	; 188
    1c14:	9f 4f       	sbci	r25, 0xFF	; 255
    1c16:	22 e0       	ldi	r18, 0x02	; 2
    1c18:	fc 01       	movw	r30, r24
    1c1a:	20 83       	st	Z, r18

	// EVSYS.USERTCB3COUNT = EVSYS_USER_OFF_gc; /* Off */

	EVSYS.USERTCD0INPUTA = EVSYS_USER_CHANNEL0_gc; /* Connect user to event channel 0 */
    1c1c:	80 e0       	ldi	r24, 0x00	; 0
    1c1e:	92 e0       	ldi	r25, 0x02	; 2
    1c20:	88 5b       	subi	r24, 0xB8	; 184
    1c22:	9f 4f       	sbci	r25, 0xFF	; 255
    1c24:	21 e0       	ldi	r18, 0x01	; 1
    1c26:	fc 01       	movw	r30, r24
    1c28:	20 83       	st	Z, r18

	EVSYS.USERTCD0INPUTB = EVSYS_USER_CHANNEL1_gc; /* Connect user to event channel 1 */
    1c2a:	80 e0       	ldi	r24, 0x00	; 0
    1c2c:	92 e0       	ldi	r25, 0x02	; 2
    1c2e:	87 5b       	subi	r24, 0xB7	; 183
    1c30:	9f 4f       	sbci	r25, 0xFF	; 255
    1c32:	22 e0       	ldi	r18, 0x02	; 2
    1c34:	fc 01       	movw	r30, r24
    1c36:	20 83       	st	Z, r18

	// EVSYS.USEROPAMP2DUMP = EVSYS_USER_OFF_gc; /* Off */

	// EVSYS.USEROPAMP2DISABLE = EVSYS_USER_OFF_gc; /* Off */

	return 0;
    1c38:	80 e0       	ldi	r24, 0x00	; 0
}
    1c3a:	df 91       	pop	r29
    1c3c:	cf 91       	pop	r28
    1c3e:	08 95       	ret

00001c40 <OPERATIONAL_AMPLIFIER_0_init>:
/**
 * \brief Initialize opamp interface
 * \return Initialization status.
 */
int8_t OPERATIONAL_AMPLIFIER_0_init()
{
    1c40:	cf 93       	push	r28
    1c42:	df 93       	push	r29
    1c44:	cd b7       	in	r28, 0x3d	; 61
    1c46:	de b7       	in	r29, 0x3e	; 62

	OPAMP.CTRLA = 1 << OPAMP_ENABLE_bp; /* OPAMP Peripheral Enable: enabled */
    1c48:	80 e0       	ldi	r24, 0x00	; 0
    1c4a:	97 e0       	ldi	r25, 0x07	; 7
    1c4c:	21 e0       	ldi	r18, 0x01	; 1
    1c4e:	fc 01       	movw	r30, r24
    1c50:	20 83       	st	Z, r18

	OPAMP.DBGCTRL = 1 << OPAMP_DBGRUN_bp; /* Run in Debug mode: enabled */
    1c52:	80 e0       	ldi	r24, 0x00	; 0
    1c54:	97 e0       	ldi	r25, 0x07	; 7
    1c56:	21 e0       	ldi	r18, 0x01	; 1
    1c58:	fc 01       	movw	r30, r24
    1c5a:	21 83       	std	Z+1, r18	; 0x01

	OPAMP.TIMEBASE = OPAMP_TIMEBASE_VALUE << OPAMP_TIMEBASE_gp;
    1c5c:	80 e0       	ldi	r24, 0x00	; 0
    1c5e:	97 e0       	ldi	r25, 0x07	; 7
    1c60:	27 e1       	ldi	r18, 0x17	; 23
    1c62:	fc 01       	movw	r30, r24
    1c64:	22 83       	std	Z+2, r18	; 0x02

	// OPAMP.PWRCTRL = OPAMP_PWRCTRL_IRSEL_FULL_gc; /* Full Input Range */

	OPAMP.OP1SETTLE = 0x7f << OPAMP_SETTLE_gp; /* Setting: 0x7f */
    1c66:	80 e0       	ldi	r24, 0x00	; 0
    1c68:	97 e0       	ldi	r25, 0x07	; 7
    1c6a:	2f e7       	ldi	r18, 0x7F	; 127
    1c6c:	fc 01       	movw	r30, r24
    1c6e:	24 8f       	std	Z+28, r18	; 0x1c

	OPAMP.OP1CTRLA = 1 << OPAMP_ALWAYSON_bp             /* Always ON: enabled */
    1c70:	80 e0       	ldi	r24, 0x00	; 0
    1c72:	97 e0       	ldi	r25, 0x07	; 7
    1c74:	25 e0       	ldi	r18, 0x05	; 5
    1c76:	fc 01       	movw	r30, r24
    1c78:	20 8f       	std	Z+24, r18	; 0x18
	                 | 0 << OPAMP_EVENTEN_bp            /* Event Enable: disabled */
	                 | OPAMP_OP1CTRLA_OUTMODE_NORMAL_gc /* Output Driver in Normal Mode */
	                 | 0 << OPAMP_RUNSTBY_bp;           /* Run is standby mode: disabled */

	OPAMP.OP1RESMUX = OPAMP_OP1RESMUX_MUXTOP_OUT_gc     /* OPn output */
    1c7a:	80 e0       	ldi	r24, 0x00	; 0
    1c7c:	97 e0       	ldi	r25, 0x07	; 7
    1c7e:	29 ee       	ldi	r18, 0xE9	; 233
    1c80:	fc 01       	movw	r30, r24
    1c82:	22 8f       	std	Z+26, r18	; 0x1a
	                  | OPAMP_OP1RESMUX_MUXBOT_INN_gc   /* Negative input pin for OPn */
	                  | OPAMP_OP1RESMUX_MUXWIP_WIP7_gc; /* R1 = 1R, R2 = 15R, R2/R1 = 15 */

	OPAMP.OP1INMUX = OPAMP_OP1INMUX_MUXPOS_VDDDIV2_gc /* VDD/2 */
    1c84:	80 e0       	ldi	r24, 0x00	; 0
    1c86:	97 e0       	ldi	r25, 0x07	; 7
    1c88:	24 e1       	ldi	r18, 0x14	; 20
    1c8a:	fc 01       	movw	r30, r24
    1c8c:	23 8f       	std	Z+27, r18	; 0x1b
	                 | OPAMP_OP1INMUX_MUXNEG_WIP_gc;  /* Wiper from OPn's resistor ladder */

	return 0;
    1c8e:	80 e0       	ldi	r24, 0x00	; 0
}
    1c90:	df 91       	pop	r29
    1c92:	cf 91       	pop	r28
    1c94:	08 95       	ret

00001c96 <RTC_0_init>:
/**
 * \brief Initialize rtc interface
 * \return Initialization status.
 */
int8_t RTC_0_init()
{
    1c96:	cf 93       	push	r28
    1c98:	df 93       	push	r29
    1c9a:	cd b7       	in	r28, 0x3d	; 61
    1c9c:	de b7       	in	r29, 0x3e	; 62

	while (RTC.STATUS > 0) { /* Wait for all register to be synchronized */
    1c9e:	00 00       	nop
    1ca0:	80 e4       	ldi	r24, 0x40	; 64
    1ca2:	91 e0       	ldi	r25, 0x01	; 1
    1ca4:	fc 01       	movw	r30, r24
    1ca6:	81 81       	ldd	r24, Z+1	; 0x01
    1ca8:	88 23       	and	r24, r24
    1caa:	d1 f7       	brne	.-12     	; 0x1ca0 <RTC_0_init+0xa>

	// RTC.CMP = 0x0; /* Compare: 0x0 */

	// RTC.CNT = 0x0; /* Counter: 0x0 */

	RTC.CTRLA = RTC_PRESCALER_DIV32_gc  /* 32 */
    1cac:	80 e4       	ldi	r24, 0x40	; 64
    1cae:	91 e0       	ldi	r25, 0x01	; 1
    1cb0:	28 ea       	ldi	r18, 0xA8	; 168
    1cb2:	fc 01       	movw	r30, r24
    1cb4:	20 83       	st	Z, r18
	            | 0 << RTC_RTCEN_bp     /* Enable: disabled */
	            | 1 << RTC_RUNSTDBY_bp; /* Run In Standby: enabled */

	RTC.PER = 0x1ff; /* Period: 0x1ff */
    1cb6:	80 e4       	ldi	r24, 0x40	; 64
    1cb8:	91 e0       	ldi	r25, 0x01	; 1
    1cba:	2f ef       	ldi	r18, 0xFF	; 255
    1cbc:	31 e0       	ldi	r19, 0x01	; 1
    1cbe:	fc 01       	movw	r30, r24
    1cc0:	22 87       	std	Z+10, r18	; 0x0a
    1cc2:	33 87       	std	Z+11, r19	; 0x0b

	RTC.CLKSEL = RTC_CLKSEL_OSC32K_gc; /* Internal 32.768 kHz oscillator */
    1cc4:	80 e4       	ldi	r24, 0x40	; 64
    1cc6:	91 e0       	ldi	r25, 0x01	; 1
    1cc8:	fc 01       	movw	r30, r24
    1cca:	17 82       	std	Z+7, r1	; 0x07

	// RTC.DBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	RTC.INTCTRL = 0 << RTC_CMP_bp    /* Compare Match Interrupt enable: disabled */
    1ccc:	80 e4       	ldi	r24, 0x40	; 64
    1cce:	91 e0       	ldi	r25, 0x01	; 1
    1cd0:	21 e0       	ldi	r18, 0x01	; 1
    1cd2:	fc 01       	movw	r30, r24
    1cd4:	22 83       	std	Z+2, r18	; 0x02

	// RTC.PITDBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	// RTC.PITINTCTRL = 0 << RTC_PI_bp; /* Periodic Interrupt: disabled */

	return 0;
    1cd6:	80 e0       	ldi	r24, 0x00	; 0
}
    1cd8:	df 91       	pop	r29
    1cda:	cf 91       	pop	r28
    1cdc:	08 95       	ret

00001cde <SLPCTRL_init>:
 * \brief Initialize Sleep Controller
 *
 * \return Initialization status.
 */
int8_t SLPCTRL_init()
{
    1cde:	cf 93       	push	r28
    1ce0:	df 93       	push	r29
    1ce2:	cd b7       	in	r28, 0x3d	; 61
    1ce4:	de b7       	in	r29, 0x3e	; 62

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
    1ce6:	80 e0       	ldi	r24, 0x00	; 0
}
    1ce8:	df 91       	pop	r29
    1cea:	cf 91       	pop	r28
    1cec:	08 95       	ret

00001cee <TIMER_RISING_init>:
 * \brief Initialize tcb interface
 *
 * \return Initialization status.
 */
int8_t TIMER_RISING_init()
{
    1cee:	cf 93       	push	r28
    1cf0:	df 93       	push	r29
    1cf2:	cd b7       	in	r28, 0x3d	; 61
    1cf4:	de b7       	in	r29, 0x3e	; 62

	// TCB0.CCMP = 0x0; /* Compare or Capture: 0x0 */

	// TCB0.CNT = 0x0; /* Count: 0x0 */

	TCB0.CTRLB = 1 << TCB_ASYNC_bp      /* Asynchronous Enable: enabled */
    1cf6:	80 e0       	ldi	r24, 0x00	; 0
    1cf8:	9b e0       	ldi	r25, 0x0B	; 11
    1cfa:	23 e4       	ldi	r18, 0x43	; 67
    1cfc:	fc 01       	movw	r30, r24
    1cfe:	21 83       	std	Z+1, r18	; 0x01
	             | 0 << TCB_CCMPEN_bp   /* Pin Output Enable: disabled */
	             | 0 << TCB_CCMPINIT_bp /* Pin Initial State: disabled */
	             | TCB_CNTMODE_FRQ_gc;  /* Input Capture Frequency measurement */

	TCB0.DBGCTRL = 1 << TCB_DBGRUN_bp; /* Debug Run: enabled */
    1d00:	80 e0       	ldi	r24, 0x00	; 0
    1d02:	9b e0       	ldi	r25, 0x0B	; 11
    1d04:	21 e0       	ldi	r18, 0x01	; 1
    1d06:	fc 01       	movw	r30, r24
    1d08:	20 87       	std	Z+8, r18	; 0x08

	TCB0.EVCTRL = 1 << TCB_CAPTEI_bp    /* Event Input Enable: enabled */
    1d0a:	80 e0       	ldi	r24, 0x00	; 0
    1d0c:	9b e0       	ldi	r25, 0x0B	; 11
    1d0e:	21 e0       	ldi	r18, 0x01	; 1
    1d10:	fc 01       	movw	r30, r24
    1d12:	24 83       	std	Z+4, r18	; 0x04
	              | 0 << TCB_EDGE_bp    /* Event Edge: disabled */
	              | 0 << TCB_FILTER_bp; /* Input Capture Noise Cancellation Filter: disabled */

	TCB0.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
    1d14:	80 e0       	ldi	r24, 0x00	; 0
    1d16:	9b e0       	ldi	r25, 0x0B	; 11
    1d18:	21 e0       	ldi	r18, 0x01	; 1
    1d1a:	fc 01       	movw	r30, r24
    1d1c:	25 83       	std	Z+5, r18	; 0x05
	               | 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */

	TCB0.CTRLA = TCB_CLKSEL_DIV1_gc     /* CLK_PER */
    1d1e:	80 e0       	ldi	r24, 0x00	; 0
    1d20:	9b e0       	ldi	r25, 0x0B	; 11
    1d22:	21 e1       	ldi	r18, 0x11	; 17
    1d24:	fc 01       	movw	r30, r24
    1d26:	20 83       	st	Z, r18
	             | 1 << TCB_ENABLE_bp   /* Enable: enabled */
	             | 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
	             | 1 << TCB_SYNCUPD_bp  /* Synchronize Update: enabled */
	             | 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */

	return 0;
    1d28:	80 e0       	ldi	r24, 0x00	; 0
}
    1d2a:	df 91       	pop	r29
    1d2c:	cf 91       	pop	r28
    1d2e:	08 95       	ret

00001d30 <TIMER_FALLING_init>:
 * \brief Initialize tcb interface
 *
 * \return Initialization status.
 */
int8_t TIMER_FALLING_init()
{
    1d30:	cf 93       	push	r28
    1d32:	df 93       	push	r29
    1d34:	cd b7       	in	r28, 0x3d	; 61
    1d36:	de b7       	in	r29, 0x3e	; 62

	// TCB1.CCMP = 0x0; /* Compare or Capture: 0x0 */

	// TCB1.CNT = 0x0; /* Count: 0x0 */

	TCB1.CTRLB = 1 << TCB_ASYNC_bp      /* Asynchronous Enable: enabled */
    1d38:	80 e1       	ldi	r24, 0x10	; 16
    1d3a:	9b e0       	ldi	r25, 0x0B	; 11
    1d3c:	23 e4       	ldi	r18, 0x43	; 67
    1d3e:	fc 01       	movw	r30, r24
    1d40:	21 83       	std	Z+1, r18	; 0x01
	             | 0 << TCB_CCMPEN_bp   /* Pin Output Enable: disabled */
	             | 0 << TCB_CCMPINIT_bp /* Pin Initial State: disabled */
	             | TCB_CNTMODE_FRQ_gc;  /* Input Capture Frequency measurement */

	TCB1.DBGCTRL = 1 << TCB_DBGRUN_bp; /* Debug Run: enabled */
    1d42:	80 e1       	ldi	r24, 0x10	; 16
    1d44:	9b e0       	ldi	r25, 0x0B	; 11
    1d46:	21 e0       	ldi	r18, 0x01	; 1
    1d48:	fc 01       	movw	r30, r24
    1d4a:	20 87       	std	Z+8, r18	; 0x08

	TCB1.EVCTRL = 1 << TCB_CAPTEI_bp    /* Event Input Enable: enabled */
    1d4c:	80 e1       	ldi	r24, 0x10	; 16
    1d4e:	9b e0       	ldi	r25, 0x0B	; 11
    1d50:	21 e0       	ldi	r18, 0x01	; 1
    1d52:	fc 01       	movw	r30, r24
    1d54:	24 83       	std	Z+4, r18	; 0x04
	              | 0 << TCB_EDGE_bp    /* Event Edge: disabled */
	              | 0 << TCB_FILTER_bp; /* Input Capture Noise Cancellation Filter: disabled */

	TCB1.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
    1d56:	80 e1       	ldi	r24, 0x10	; 16
    1d58:	9b e0       	ldi	r25, 0x0B	; 11
    1d5a:	21 e0       	ldi	r18, 0x01	; 1
    1d5c:	fc 01       	movw	r30, r24
    1d5e:	25 83       	std	Z+5, r18	; 0x05
	               | 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */

	TCB1.CTRLA = TCB_CLKSEL_DIV1_gc     /* CLK_PER */
    1d60:	80 e1       	ldi	r24, 0x10	; 16
    1d62:	9b e0       	ldi	r25, 0x0B	; 11
    1d64:	21 e1       	ldi	r18, 0x11	; 17
    1d66:	fc 01       	movw	r30, r24
    1d68:	20 83       	st	Z, r18
	             | 1 << TCB_ENABLE_bp   /* Enable: enabled */
	             | 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
	             | 1 << TCB_SYNCUPD_bp  /* Synchronize Update: enabled */
	             | 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */

	return 0;
    1d6a:	80 e0       	ldi	r24, 0x00	; 0
}
    1d6c:	df 91       	pop	r29
    1d6e:	cf 91       	pop	r28
    1d70:	08 95       	ret

00001d72 <TIMER_0_init>:
 * \brief Initialize TCD interface
 *
 * \return Initialization status.
 */
int8_t TIMER_0_init()
{
    1d72:	cf 93       	push	r28
    1d74:	df 93       	push	r29
    1d76:	cd b7       	in	r28, 0x3d	; 61
    1d78:	de b7       	in	r29, 0x3e	; 62

	// Enable Protected register, peripheral must be disabled (ENABLE=0, in TCD.CTRLA).

	TCD0.CMPASET = 4095; /* Compare A Set: 4095 */
    1d7a:	80 e8       	ldi	r24, 0x80	; 128
    1d7c:	9b e0       	ldi	r25, 0x0B	; 11
    1d7e:	2f ef       	ldi	r18, 0xFF	; 255
    1d80:	3f e0       	ldi	r19, 0x0F	; 15
    1d82:	fc 01       	movw	r30, r24
    1d84:	20 a7       	std	Z+40, r18	; 0x28
    1d86:	31 a7       	std	Z+41, r19	; 0x29
	//		 | TCD_DLYSEL_OFF_gc /* No delay */
	//		 | TCD_DLYTRIG_CMPASET_gc; /* Compare A set */

	// TCD0.DLYVAL = 0 << TCD_DLYVAL_gp; /* Delay value: 0 */

	TCD0.EVCTRLA
    1d88:	80 e8       	ldi	r24, 0x80	; 128
    1d8a:	9b e0       	ldi	r25, 0x0B	; 11
	    = TCD_CFG_FILTER_gc       /* Input Capture Noise Cancellation Filter enabled */
    1d8c:	25 e5       	ldi	r18, 0x55	; 85
    1d8e:	fc 01       	movw	r30, r24
    1d90:	20 87       	std	Z+8, r18	; 0x08
	      | TCD_ACTION_CAPTURE_gc /* Event trigger a fault and capture */
	      | TCD_EDGE_RISE_HIGH_gc /* The rising edge or high level of event generates retrigger or fault action */
	      | 1 << TCD_TRIGEI_bp;   /* Trigger event enable: enabled */

	TCD0.EVCTRLB
    1d92:	80 e8       	ldi	r24, 0x80	; 128
    1d94:	9b e0       	ldi	r25, 0x0B	; 11
	    = TCD_CFG_NEITHER_gc      /* Neither Filter nor Asynchronous Event is enabled */
    1d96:	24 e1       	ldi	r18, 0x14	; 20
    1d98:	fc 01       	movw	r30, r24
    1d9a:	21 87       	std	Z+9, r18	; 0x09

	// TCD0.INPUTCTRLA = TCD_INPUTMODE_NONE_gc; /* Input has no actions */

	// TCD0.INPUTCTRLB = TCD_INPUTMODE_NONE_gc; /* Input has no actions */

	TCD0.INTCTRL = 0 << TCD_OVF_bp      /* Overflow interrupt enable: disabled */
    1d9c:	80 e8       	ldi	r24, 0x80	; 128
    1d9e:	9b e0       	ldi	r25, 0x0B	; 11
    1da0:	24 e0       	ldi	r18, 0x04	; 4
    1da2:	fc 01       	movw	r30, r24
    1da4:	24 87       	std	Z+12, r18	; 0x0c
	               | 1 << TCD_TRIGA_bp  /* Trigger A interrupt enable: enabled */
	               | 0 << TCD_TRIGB_bp; /* Trigger B interrupt enable: disabled */

	while ((TCD0.STATUS & TCD_ENRDY_bm) == 0)
    1da6:	00 00       	nop
    1da8:	80 e8       	ldi	r24, 0x80	; 128
    1daa:	9b e0       	ldi	r25, 0x0B	; 11
    1dac:	fc 01       	movw	r30, r24
    1dae:	86 85       	ldd	r24, Z+14	; 0x0e
    1db0:	88 2f       	mov	r24, r24
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	81 70       	andi	r24, 0x01	; 1
    1db6:	99 27       	eor	r25, r25
    1db8:	89 2b       	or	r24, r25
    1dba:	b1 f3       	breq	.-20     	; 0x1da8 <TIMER_0_init+0x36>
		; // Wait for Enable Ready to be high.

	TCD0.CTRLA = 1 << TCD_ENABLE_bp      /* Enable: enabled */
    1dbc:	80 e8       	ldi	r24, 0x80	; 128
    1dbe:	9b e0       	ldi	r25, 0x0B	; 11
    1dc0:	21 e2       	ldi	r18, 0x21	; 33
    1dc2:	fc 01       	movw	r30, r24
    1dc4:	20 83       	st	Z, r18
	             | TCD_CLKSEL_PLL_gc     /*  */
	             | TCD_CNTPRES_DIV1_gc   /* Sync clock divided by 1 */
	             | TCD_SYNCPRES_DIV1_gc; /*  */

	return 0;
    1dc6:	80 e0       	ldi	r24, 0x00	; 0
}
    1dc8:	df 91       	pop	r29
    1dca:	cf 91       	pop	r28
    1dcc:	08 95       	ret

00001dce <USART_0_printCHAR>:
uint8_t USART_0_read()
{
	while (!(USART3.STATUS & USART_RXCIF_bm))
		;
	return USART3.RXDATAL;
}
    1dce:	cf 93       	push	r28
    1dd0:	df 93       	push	r29
    1dd2:	00 d0       	rcall	.+0      	; 0x1dd4 <USART_0_printCHAR+0x6>
    1dd4:	1f 92       	push	r1
    1dd6:	cd b7       	in	r28, 0x3d	; 61
    1dd8:	de b7       	in	r29, 0x3e	; 62
    1dda:	89 83       	std	Y+1, r24	; 0x01
    1ddc:	6a 83       	std	Y+2, r22	; 0x02
    1dde:	7b 83       	std	Y+3, r23	; 0x03
    1de0:	89 81       	ldd	r24, Y+1	; 0x01
    1de2:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <USART_0_write>
    1de6:	80 e0       	ldi	r24, 0x00	; 0
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	23 96       	adiw	r28, 0x03	; 3
    1dec:	cd bf       	out	0x3d, r28	; 61
    1dee:	de bf       	out	0x3e, r29	; 62
    1df0:	df 91       	pop	r29
    1df2:	cf 91       	pop	r28
    1df4:	08 95       	ret

00001df6 <USART_0_init>:
    1df6:	cf 93       	push	r28
    1df8:	df 93       	push	r29
    1dfa:	cd b7       	in	r28, 0x3d	; 61
    1dfc:	de b7       	in	r29, 0x3e	; 62
    1dfe:	80 e6       	ldi	r24, 0x60	; 96
    1e00:	98 e0       	ldi	r25, 0x08	; 8
    1e02:	21 e4       	ldi	r18, 0x41	; 65
    1e04:	33 e0       	ldi	r19, 0x03	; 3
    1e06:	fc 01       	movw	r30, r24
    1e08:	20 87       	std	Z+8, r18	; 0x08
    1e0a:	31 87       	std	Z+9, r19	; 0x09
    1e0c:	80 e6       	ldi	r24, 0x60	; 96
    1e0e:	98 e0       	ldi	r25, 0x08	; 8
    1e10:	20 ec       	ldi	r18, 0xC0	; 192
    1e12:	fc 01       	movw	r30, r24
    1e14:	26 83       	std	Z+6, r18	; 0x06
    1e16:	80 e0       	ldi	r24, 0x00	; 0
    1e18:	90 e4       	ldi	r25, 0x40	; 64
    1e1a:	80 93 b7 40 	sts	0x40B7, r24	; 0x8040b7 <__iob+0x2>
    1e1e:	90 93 b8 40 	sts	0x40B8, r25	; 0x8040b8 <__iob+0x3>
    1e22:	80 e0       	ldi	r24, 0x00	; 0
    1e24:	df 91       	pop	r29
    1e26:	cf 91       	pop	r28
    1e28:	08 95       	ret

00001e2a <USART_0_write>:
 * \param[in] data The character to write to the USART
 *
 * \return Nothing
 */
void USART_0_write(const uint8_t data)
{
    1e2a:	cf 93       	push	r28
    1e2c:	df 93       	push	r29
    1e2e:	1f 92       	push	r1
    1e30:	cd b7       	in	r28, 0x3d	; 61
    1e32:	de b7       	in	r29, 0x3e	; 62
    1e34:	89 83       	std	Y+1, r24	; 0x01
	while (!(USART3.STATUS & USART_DREIF_bm))
    1e36:	00 00       	nop
    1e38:	80 e6       	ldi	r24, 0x60	; 96
    1e3a:	98 e0       	ldi	r25, 0x08	; 8
    1e3c:	fc 01       	movw	r30, r24
    1e3e:	84 81       	ldd	r24, Z+4	; 0x04
    1e40:	88 2f       	mov	r24, r24
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	80 72       	andi	r24, 0x20	; 32
    1e46:	99 27       	eor	r25, r25
    1e48:	89 2b       	or	r24, r25
    1e4a:	b1 f3       	breq	.-20     	; 0x1e38 <USART_0_write+0xe>
		;
	USART3.TXDATAL = data;
    1e4c:	80 e6       	ldi	r24, 0x60	; 96
    1e4e:	98 e0       	ldi	r25, 0x08	; 8
    1e50:	29 81       	ldd	r18, Y+1	; 0x01
    1e52:	fc 01       	movw	r30, r24
    1e54:	22 83       	std	Z+2, r18	; 0x02
}
    1e56:	00 00       	nop
    1e58:	0f 90       	pop	r0
    1e5a:	df 91       	pop	r29
    1e5c:	cf 91       	pop	r28
    1e5e:	08 95       	ret

00001e60 <VREF_0_init>:
/**
 * \brief Initialize vref interface
 * \return Initialization status.
 */
int8_t VREF_0_init()
{
    1e60:	cf 93       	push	r28
    1e62:	df 93       	push	r29
    1e64:	cd b7       	in	r28, 0x3d	; 61
    1e66:	de b7       	in	r29, 0x3e	; 62
	//		 | VREF_REFSEL_1V024_gc; /* Internal 1.024V reference */

	// VREF.DAC0REF = 0 << VREF_ALWAYSON_bp /* Enable reference always ON for DAC0: disabled */
	//		 | VREF_REFSEL_1V024_gc; /* Internal 1.024V reference */

	VREF.ACREF = 1 << VREF_ALWAYSON_bp /* Enable reference always ON for AC: enabled */
    1e68:	80 eb       	ldi	r24, 0xB0	; 176
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	25 e8       	ldi	r18, 0x85	; 133
    1e6e:	fc 01       	movw	r30, r24
    1e70:	24 83       	std	Z+4, r18	; 0x04
	             | VREF_REFSEL_VDD_gc; /* VDD as reference */

	return 0;
    1e72:	80 e0       	ldi	r24, 0x00	; 0
}
    1e74:	df 91       	pop	r29
    1e76:	cf 91       	pop	r28
    1e78:	08 95       	ret

00001e7a <ZCD_RISING_init>:
 * \brief Initialize zcd interface
 *
 * \return Initialization status.
 */
int8_t ZCD_RISING_init()
{
    1e7a:	cf 93       	push	r28
    1e7c:	df 93       	push	r29
    1e7e:	cd b7       	in	r28, 0x3d	; 61
    1e80:	de b7       	in	r29, 0x3e	; 62

	ZCD0.CTRLA = 1 << ZCD_ENABLE_bp     /* Setting: enabled */
    1e82:	80 ec       	ldi	r24, 0xC0	; 192
    1e84:	96 e0       	ldi	r25, 0x06	; 6
    1e86:	21 e4       	ldi	r18, 0x41	; 65
    1e88:	fc 01       	movw	r30, r24
    1e8a:	20 83       	st	Z, r18
	             | 0 << ZCD_RUNSTDBY_bp /* Setting: disabled */
	             | 0 << ZCD_INVERT_bp;  /* Setting: disabled */

	// ZCD0.INTCTRL = ZCD_INTMODE_NONE_gc; /* No interrupt */

	return 0;
    1e8c:	80 e0       	ldi	r24, 0x00	; 0
}
    1e8e:	df 91       	pop	r29
    1e90:	cf 91       	pop	r28
    1e92:	08 95       	ret

00001e94 <ZCD_FALLING_init>:
 * \brief Initialize zcd interface
 *
 * \return Initialization status.
 */
int8_t ZCD_FALLING_init()
{
    1e94:	cf 93       	push	r28
    1e96:	df 93       	push	r29
    1e98:	cd b7       	in	r28, 0x3d	; 61
    1e9a:	de b7       	in	r29, 0x3e	; 62

	ZCD1.CTRLA = 1 << ZCD_ENABLE_bp     /* Setting: enabled */
    1e9c:	88 ec       	ldi	r24, 0xC8	; 200
    1e9e:	96 e0       	ldi	r25, 0x06	; 6
    1ea0:	29 e4       	ldi	r18, 0x49	; 73
    1ea2:	fc 01       	movw	r30, r24
    1ea4:	20 83       	st	Z, r18
	             | 0 << ZCD_RUNSTDBY_bp /* Setting: disabled */
	             | 1 << ZCD_INVERT_bp;  /* Setting: enabled */

	// ZCD1.INTCTRL = ZCD_INTMODE_NONE_gc; /* No interrupt */

	return 0;
    1ea6:	80 e0       	ldi	r24, 0x00	; 0
}
    1ea8:	df 91       	pop	r29
    1eaa:	cf 91       	pop	r28
    1eac:	08 95       	ret

00001eae <BOD_init>:
 * \brief Initialize Brownout Detector
 *
 * \return Initialization status.
 */
int8_t BOD_init()
{
    1eae:	cf 93       	push	r28
    1eb0:	df 93       	push	r29
    1eb2:	cd b7       	in	r28, 0x3d	; 61
    1eb4:	de b7       	in	r29, 0x3e	; 62

	// ccp_write_io((void*)&(BOD.CTRLA),BOD_SLEEP_DIS_gc /* Disabled */);

	BOD.INTCTRL = 0 << BOD_VLMIE_bp        /* voltage level monitor interrrupt enable: disabled */
    1eb6:	80 ea       	ldi	r24, 0xA0	; 160
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	fc 01       	movw	r30, r24
    1ebc:	11 86       	std	Z+9, r1	; 0x09
	              | BOD_VLMCFG_FALLING_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
    1ebe:	80 e0       	ldi	r24, 0x00	; 0
}
    1ec0:	df 91       	pop	r29
    1ec2:	cf 91       	pop	r28
    1ec4:	08 95       	ret

00001ec6 <ccp_write_io>:
 * \note Using IAR Embedded workbench, the choice of memory model has an impact
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
    1ec6:	cf 93       	push	r28
    1ec8:	df 93       	push	r29
    1eca:	00 d0       	rcall	.+0      	; 0x1ecc <ccp_write_io+0x6>
    1ecc:	1f 92       	push	r1
    1ece:	cd b7       	in	r28, 0x3d	; 61
    1ed0:	de b7       	in	r29, 0x3e	; 62
    1ed2:	89 83       	std	Y+1, r24	; 0x01
    1ed4:	9a 83       	std	Y+2, r25	; 0x02
    1ed6:	6b 83       	std	Y+3, r22	; 0x03
	protected_write_io(addr, CCP_IOREG_gc, value);
    1ed8:	89 81       	ldd	r24, Y+1	; 0x01
    1eda:	9a 81       	ldd	r25, Y+2	; 0x02
    1edc:	4b 81       	ldd	r20, Y+3	; 0x03
    1ede:	68 ed       	ldi	r22, 0xD8	; 216
    1ee0:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <protected_write_io>
}
    1ee4:	00 00       	nop
    1ee6:	23 96       	adiw	r28, 0x03	; 3
    1ee8:	cd bf       	out	0x3d, r28	; 61
    1eea:	de bf       	out	0x3e, r29	; 62
    1eec:	df 91       	pop	r29
    1eee:	cf 91       	pop	r28
    1ef0:	08 95       	ret

00001ef2 <CLKCTRL_init>:
 * \brief Initialize clkctrl interface
 *
 * \return Initialization status.
 */
int8_t CLKCTRL_init()
{
    1ef2:	cf 93       	push	r28
    1ef4:	df 93       	push	r29
    1ef6:	cd b7       	in	r28, 0x3d	; 61
    1ef8:	de b7       	in	r29, 0x3e	; 62
	//		 | 0 << CLKCTRL_LPMODE_bp /* Low-Power Mode: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKCTRLB),CLKCTRL_PDIV_2X_gc /* 2 */
	//		 | 0 << CLKCTRL_PEN_bp /* Prescaler enable: disabled */);

	ccp_write_io((void *)&(CLKCTRL.PLLCTRLA),
    1efa:	61 e8       	ldi	r22, 0x81	; 129
    1efc:	80 e7       	ldi	r24, 0x70	; 112
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <ccp_write_io>
	//		 | CLKCTRL_CSUTHF_256_gc /* 256 XOSCHF cycles */
	//		 | CLKCTRL_FRQRANGE_8M_gc /* Max 8 MHz XTAL Frequency */
	//		 | 0 << CLKCTRL_SEL_bp /* Source Select: disabled */
	//		 | 0 << CLKCTRL_ENABLE_bp /* External high-frequency Oscillator: disabled */);

	ccp_write_io((void *)&(CLKCTRL.OSCHFCTRLA),
    1f04:	64 e2       	ldi	r22, 0x24	; 36
    1f06:	88 e6       	ldi	r24, 0x68	; 104
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <ccp_write_io>

	/* wait for PLL to start 
	while (!(CLKCTRL.MCLKSTATUS & CLKCTRL_PLLS_bm))
		;*/

	return 0;
    1f0e:	80 e0       	ldi	r24, 0x00	; 0
}
    1f10:	df 91       	pop	r29
    1f12:	cf 91       	pop	r28
    1f14:	08 95       	ret

00001f16 <CPUINT_init>:
 * \brief Initialize cpuint interface
 *
 * \return Initialization status
 */
int8_t CPUINT_init()
{
    1f16:	cf 93       	push	r28
    1f18:	df 93       	push	r29
    1f1a:	cd b7       	in	r28, 0x3d	; 61
    1f1c:	de b7       	in	r29, 0x3e	; 62

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
    1f1e:	80 e0       	ldi	r24, 0x00	; 0
}
    1f20:	df 91       	pop	r29
    1f22:	cf 91       	pop	r28
    1f24:	08 95       	ret

00001f26 <protected_write_io>:
    1f26:	1b be       	out	0x3b, r1	; 59
    1f28:	fc 01       	movw	r30, r24
    1f2a:	64 bf       	out	0x34, r22	; 52
    1f2c:	40 83       	st	Z, r20
    1f2e:	08 95       	ret

00001f30 <__divmodsi4>:
    1f30:	05 2e       	mov	r0, r21
    1f32:	97 fb       	bst	r25, 7
    1f34:	1e f4       	brtc	.+6      	; 0x1f3c <__divmodsi4+0xc>
    1f36:	00 94       	com	r0
    1f38:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <__negsi2>
    1f3c:	57 fd       	sbrc	r21, 7
    1f3e:	07 d0       	rcall	.+14     	; 0x1f4e <__divmodsi4_neg2>
    1f40:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <__udivmodsi4>
    1f44:	07 fc       	sbrc	r0, 7
    1f46:	03 d0       	rcall	.+6      	; 0x1f4e <__divmodsi4_neg2>
    1f48:	4e f4       	brtc	.+18     	; 0x1f5c <__divmodsi4_exit>
    1f4a:	0c 94 af 0f 	jmp	0x1f5e	; 0x1f5e <__negsi2>

00001f4e <__divmodsi4_neg2>:
    1f4e:	50 95       	com	r21
    1f50:	40 95       	com	r20
    1f52:	30 95       	com	r19
    1f54:	21 95       	neg	r18
    1f56:	3f 4f       	sbci	r19, 0xFF	; 255
    1f58:	4f 4f       	sbci	r20, 0xFF	; 255
    1f5a:	5f 4f       	sbci	r21, 0xFF	; 255

00001f5c <__divmodsi4_exit>:
    1f5c:	08 95       	ret

00001f5e <__negsi2>:
    1f5e:	90 95       	com	r25
    1f60:	80 95       	com	r24
    1f62:	70 95       	com	r23
    1f64:	61 95       	neg	r22
    1f66:	7f 4f       	sbci	r23, 0xFF	; 255
    1f68:	8f 4f       	sbci	r24, 0xFF	; 255
    1f6a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f6c:	08 95       	ret

00001f6e <__udivmodsi4>:
    1f6e:	a1 e2       	ldi	r26, 0x21	; 33
    1f70:	1a 2e       	mov	r1, r26
    1f72:	aa 1b       	sub	r26, r26
    1f74:	bb 1b       	sub	r27, r27
    1f76:	fd 01       	movw	r30, r26
    1f78:	0d c0       	rjmp	.+26     	; 0x1f94 <__udivmodsi4_ep>

00001f7a <__udivmodsi4_loop>:
    1f7a:	aa 1f       	adc	r26, r26
    1f7c:	bb 1f       	adc	r27, r27
    1f7e:	ee 1f       	adc	r30, r30
    1f80:	ff 1f       	adc	r31, r31
    1f82:	a2 17       	cp	r26, r18
    1f84:	b3 07       	cpc	r27, r19
    1f86:	e4 07       	cpc	r30, r20
    1f88:	f5 07       	cpc	r31, r21
    1f8a:	20 f0       	brcs	.+8      	; 0x1f94 <__udivmodsi4_ep>
    1f8c:	a2 1b       	sub	r26, r18
    1f8e:	b3 0b       	sbc	r27, r19
    1f90:	e4 0b       	sbc	r30, r20
    1f92:	f5 0b       	sbc	r31, r21

00001f94 <__udivmodsi4_ep>:
    1f94:	66 1f       	adc	r22, r22
    1f96:	77 1f       	adc	r23, r23
    1f98:	88 1f       	adc	r24, r24
    1f9a:	99 1f       	adc	r25, r25
    1f9c:	1a 94       	dec	r1
    1f9e:	69 f7       	brne	.-38     	; 0x1f7a <__udivmodsi4_loop>
    1fa0:	60 95       	com	r22
    1fa2:	70 95       	com	r23
    1fa4:	80 95       	com	r24
    1fa6:	90 95       	com	r25
    1fa8:	9b 01       	movw	r18, r22
    1faa:	ac 01       	movw	r20, r24
    1fac:	bd 01       	movw	r22, r26
    1fae:	cf 01       	movw	r24, r30
    1fb0:	08 95       	ret

00001fb2 <__tablejump2__>:
    1fb2:	ee 0f       	add	r30, r30
    1fb4:	ff 1f       	adc	r31, r31
    1fb6:	00 24       	eor	r0, r0
    1fb8:	00 1c       	adc	r0, r0
    1fba:	0b be       	out	0x3b, r0	; 59
    1fbc:	07 90       	elpm	r0, Z+
    1fbe:	f6 91       	elpm	r31, Z
    1fc0:	e0 2d       	mov	r30, r0
    1fc2:	09 94       	ijmp

00001fc4 <printf>:
    1fc4:	cf 93       	push	r28
    1fc6:	df 93       	push	r29
    1fc8:	cd b7       	in	r28, 0x3d	; 61
    1fca:	de b7       	in	r29, 0x3e	; 62
    1fcc:	ae 01       	movw	r20, r28
    1fce:	4b 5f       	subi	r20, 0xFB	; 251
    1fd0:	5f 4f       	sbci	r21, 0xFF	; 255
    1fd2:	fa 01       	movw	r30, r20
    1fd4:	61 91       	ld	r22, Z+
    1fd6:	71 91       	ld	r23, Z+
    1fd8:	af 01       	movw	r20, r30
    1fda:	80 91 b7 40 	lds	r24, 0x40B7	; 0x8040b7 <__iob+0x2>
    1fde:	90 91 b8 40 	lds	r25, 0x40B8	; 0x8040b8 <__iob+0x3>
    1fe2:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <vfprintf>
    1fe6:	df 91       	pop	r29
    1fe8:	cf 91       	pop	r28
    1fea:	08 95       	ret

00001fec <vfprintf>:
    1fec:	2f 92       	push	r2
    1fee:	3f 92       	push	r3
    1ff0:	4f 92       	push	r4
    1ff2:	5f 92       	push	r5
    1ff4:	6f 92       	push	r6
    1ff6:	7f 92       	push	r7
    1ff8:	8f 92       	push	r8
    1ffa:	9f 92       	push	r9
    1ffc:	af 92       	push	r10
    1ffe:	bf 92       	push	r11
    2000:	cf 92       	push	r12
    2002:	df 92       	push	r13
    2004:	ef 92       	push	r14
    2006:	ff 92       	push	r15
    2008:	0f 93       	push	r16
    200a:	1f 93       	push	r17
    200c:	cf 93       	push	r28
    200e:	df 93       	push	r29
    2010:	cd b7       	in	r28, 0x3d	; 61
    2012:	de b7       	in	r29, 0x3e	; 62
    2014:	2b 97       	sbiw	r28, 0x0b	; 11
    2016:	cd bf       	out	0x3d, r28	; 61
    2018:	de bf       	out	0x3e, r29	; 62
    201a:	6c 01       	movw	r12, r24
    201c:	7b 01       	movw	r14, r22
    201e:	8a 01       	movw	r16, r20
    2020:	fc 01       	movw	r30, r24
    2022:	16 82       	std	Z+6, r1	; 0x06
    2024:	17 82       	std	Z+7, r1	; 0x07
    2026:	83 81       	ldd	r24, Z+3	; 0x03
    2028:	81 ff       	sbrs	r24, 1
    202a:	cc c1       	rjmp	.+920    	; 0x23c4 <vfprintf+0x3d8>
    202c:	ce 01       	movw	r24, r28
    202e:	01 96       	adiw	r24, 0x01	; 1
    2030:	3c 01       	movw	r6, r24
    2032:	f6 01       	movw	r30, r12
    2034:	93 81       	ldd	r25, Z+3	; 0x03
    2036:	f7 01       	movw	r30, r14
    2038:	93 fd       	sbrc	r25, 3
    203a:	85 91       	lpm	r24, Z+
    203c:	93 ff       	sbrs	r25, 3
    203e:	81 91       	ld	r24, Z+
    2040:	7f 01       	movw	r14, r30
    2042:	88 23       	and	r24, r24
    2044:	09 f4       	brne	.+2      	; 0x2048 <vfprintf+0x5c>
    2046:	ba c1       	rjmp	.+884    	; 0x23bc <vfprintf+0x3d0>
    2048:	85 32       	cpi	r24, 0x25	; 37
    204a:	39 f4       	brne	.+14     	; 0x205a <vfprintf+0x6e>
    204c:	93 fd       	sbrc	r25, 3
    204e:	85 91       	lpm	r24, Z+
    2050:	93 ff       	sbrs	r25, 3
    2052:	81 91       	ld	r24, Z+
    2054:	7f 01       	movw	r14, r30
    2056:	85 32       	cpi	r24, 0x25	; 37
    2058:	29 f4       	brne	.+10     	; 0x2064 <vfprintf+0x78>
    205a:	b6 01       	movw	r22, r12
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	0e 94 10 12 	call	0x2420	; 0x2420 <fputc>
    2062:	e7 cf       	rjmp	.-50     	; 0x2032 <vfprintf+0x46>
    2064:	91 2c       	mov	r9, r1
    2066:	21 2c       	mov	r2, r1
    2068:	31 2c       	mov	r3, r1
    206a:	ff e1       	ldi	r31, 0x1F	; 31
    206c:	f3 15       	cp	r31, r3
    206e:	d8 f0       	brcs	.+54     	; 0x20a6 <vfprintf+0xba>
    2070:	8b 32       	cpi	r24, 0x2B	; 43
    2072:	79 f0       	breq	.+30     	; 0x2092 <vfprintf+0xa6>
    2074:	38 f4       	brcc	.+14     	; 0x2084 <vfprintf+0x98>
    2076:	80 32       	cpi	r24, 0x20	; 32
    2078:	79 f0       	breq	.+30     	; 0x2098 <vfprintf+0xac>
    207a:	83 32       	cpi	r24, 0x23	; 35
    207c:	a1 f4       	brne	.+40     	; 0x20a6 <vfprintf+0xba>
    207e:	23 2d       	mov	r18, r3
    2080:	20 61       	ori	r18, 0x10	; 16
    2082:	1d c0       	rjmp	.+58     	; 0x20be <vfprintf+0xd2>
    2084:	8d 32       	cpi	r24, 0x2D	; 45
    2086:	61 f0       	breq	.+24     	; 0x20a0 <vfprintf+0xb4>
    2088:	80 33       	cpi	r24, 0x30	; 48
    208a:	69 f4       	brne	.+26     	; 0x20a6 <vfprintf+0xba>
    208c:	23 2d       	mov	r18, r3
    208e:	21 60       	ori	r18, 0x01	; 1
    2090:	16 c0       	rjmp	.+44     	; 0x20be <vfprintf+0xd2>
    2092:	83 2d       	mov	r24, r3
    2094:	82 60       	ori	r24, 0x02	; 2
    2096:	38 2e       	mov	r3, r24
    2098:	e3 2d       	mov	r30, r3
    209a:	e4 60       	ori	r30, 0x04	; 4
    209c:	3e 2e       	mov	r3, r30
    209e:	2a c0       	rjmp	.+84     	; 0x20f4 <vfprintf+0x108>
    20a0:	f3 2d       	mov	r31, r3
    20a2:	f8 60       	ori	r31, 0x08	; 8
    20a4:	1d c0       	rjmp	.+58     	; 0x20e0 <vfprintf+0xf4>
    20a6:	37 fc       	sbrc	r3, 7
    20a8:	2d c0       	rjmp	.+90     	; 0x2104 <vfprintf+0x118>
    20aa:	20 ed       	ldi	r18, 0xD0	; 208
    20ac:	28 0f       	add	r18, r24
    20ae:	2a 30       	cpi	r18, 0x0A	; 10
    20b0:	40 f0       	brcs	.+16     	; 0x20c2 <vfprintf+0xd6>
    20b2:	8e 32       	cpi	r24, 0x2E	; 46
    20b4:	b9 f4       	brne	.+46     	; 0x20e4 <vfprintf+0xf8>
    20b6:	36 fc       	sbrc	r3, 6
    20b8:	81 c1       	rjmp	.+770    	; 0x23bc <vfprintf+0x3d0>
    20ba:	23 2d       	mov	r18, r3
    20bc:	20 64       	ori	r18, 0x40	; 64
    20be:	32 2e       	mov	r3, r18
    20c0:	19 c0       	rjmp	.+50     	; 0x20f4 <vfprintf+0x108>
    20c2:	36 fe       	sbrs	r3, 6
    20c4:	06 c0       	rjmp	.+12     	; 0x20d2 <vfprintf+0xe6>
    20c6:	8a e0       	ldi	r24, 0x0A	; 10
    20c8:	98 9e       	mul	r9, r24
    20ca:	20 0d       	add	r18, r0
    20cc:	11 24       	eor	r1, r1
    20ce:	92 2e       	mov	r9, r18
    20d0:	11 c0       	rjmp	.+34     	; 0x20f4 <vfprintf+0x108>
    20d2:	ea e0       	ldi	r30, 0x0A	; 10
    20d4:	2e 9e       	mul	r2, r30
    20d6:	20 0d       	add	r18, r0
    20d8:	11 24       	eor	r1, r1
    20da:	22 2e       	mov	r2, r18
    20dc:	f3 2d       	mov	r31, r3
    20de:	f0 62       	ori	r31, 0x20	; 32
    20e0:	3f 2e       	mov	r3, r31
    20e2:	08 c0       	rjmp	.+16     	; 0x20f4 <vfprintf+0x108>
    20e4:	8c 36       	cpi	r24, 0x6C	; 108
    20e6:	21 f4       	brne	.+8      	; 0x20f0 <vfprintf+0x104>
    20e8:	83 2d       	mov	r24, r3
    20ea:	80 68       	ori	r24, 0x80	; 128
    20ec:	38 2e       	mov	r3, r24
    20ee:	02 c0       	rjmp	.+4      	; 0x20f4 <vfprintf+0x108>
    20f0:	88 36       	cpi	r24, 0x68	; 104
    20f2:	41 f4       	brne	.+16     	; 0x2104 <vfprintf+0x118>
    20f4:	f7 01       	movw	r30, r14
    20f6:	93 fd       	sbrc	r25, 3
    20f8:	85 91       	lpm	r24, Z+
    20fa:	93 ff       	sbrs	r25, 3
    20fc:	81 91       	ld	r24, Z+
    20fe:	7f 01       	movw	r14, r30
    2100:	81 11       	cpse	r24, r1
    2102:	b3 cf       	rjmp	.-154    	; 0x206a <vfprintf+0x7e>
    2104:	98 2f       	mov	r25, r24
    2106:	9f 7d       	andi	r25, 0xDF	; 223
    2108:	95 54       	subi	r25, 0x45	; 69
    210a:	93 30       	cpi	r25, 0x03	; 3
    210c:	28 f4       	brcc	.+10     	; 0x2118 <vfprintf+0x12c>
    210e:	0c 5f       	subi	r16, 0xFC	; 252
    2110:	1f 4f       	sbci	r17, 0xFF	; 255
    2112:	9f e3       	ldi	r25, 0x3F	; 63
    2114:	99 83       	std	Y+1, r25	; 0x01
    2116:	0d c0       	rjmp	.+26     	; 0x2132 <vfprintf+0x146>
    2118:	83 36       	cpi	r24, 0x63	; 99
    211a:	31 f0       	breq	.+12     	; 0x2128 <vfprintf+0x13c>
    211c:	83 37       	cpi	r24, 0x73	; 115
    211e:	71 f0       	breq	.+28     	; 0x213c <vfprintf+0x150>
    2120:	83 35       	cpi	r24, 0x53	; 83
    2122:	09 f0       	breq	.+2      	; 0x2126 <vfprintf+0x13a>
    2124:	59 c0       	rjmp	.+178    	; 0x21d8 <vfprintf+0x1ec>
    2126:	21 c0       	rjmp	.+66     	; 0x216a <vfprintf+0x17e>
    2128:	f8 01       	movw	r30, r16
    212a:	80 81       	ld	r24, Z
    212c:	89 83       	std	Y+1, r24	; 0x01
    212e:	0e 5f       	subi	r16, 0xFE	; 254
    2130:	1f 4f       	sbci	r17, 0xFF	; 255
    2132:	88 24       	eor	r8, r8
    2134:	83 94       	inc	r8
    2136:	91 2c       	mov	r9, r1
    2138:	53 01       	movw	r10, r6
    213a:	13 c0       	rjmp	.+38     	; 0x2162 <vfprintf+0x176>
    213c:	28 01       	movw	r4, r16
    213e:	f2 e0       	ldi	r31, 0x02	; 2
    2140:	4f 0e       	add	r4, r31
    2142:	51 1c       	adc	r5, r1
    2144:	f8 01       	movw	r30, r16
    2146:	a0 80       	ld	r10, Z
    2148:	b1 80       	ldd	r11, Z+1	; 0x01
    214a:	36 fe       	sbrs	r3, 6
    214c:	03 c0       	rjmp	.+6      	; 0x2154 <vfprintf+0x168>
    214e:	69 2d       	mov	r22, r9
    2150:	70 e0       	ldi	r23, 0x00	; 0
    2152:	02 c0       	rjmp	.+4      	; 0x2158 <vfprintf+0x16c>
    2154:	6f ef       	ldi	r22, 0xFF	; 255
    2156:	7f ef       	ldi	r23, 0xFF	; 255
    2158:	c5 01       	movw	r24, r10
    215a:	0e 94 05 12 	call	0x240a	; 0x240a <strnlen>
    215e:	4c 01       	movw	r8, r24
    2160:	82 01       	movw	r16, r4
    2162:	f3 2d       	mov	r31, r3
    2164:	ff 77       	andi	r31, 0x7F	; 127
    2166:	3f 2e       	mov	r3, r31
    2168:	16 c0       	rjmp	.+44     	; 0x2196 <vfprintf+0x1aa>
    216a:	28 01       	movw	r4, r16
    216c:	22 e0       	ldi	r18, 0x02	; 2
    216e:	42 0e       	add	r4, r18
    2170:	51 1c       	adc	r5, r1
    2172:	f8 01       	movw	r30, r16
    2174:	a0 80       	ld	r10, Z
    2176:	b1 80       	ldd	r11, Z+1	; 0x01
    2178:	36 fe       	sbrs	r3, 6
    217a:	03 c0       	rjmp	.+6      	; 0x2182 <vfprintf+0x196>
    217c:	69 2d       	mov	r22, r9
    217e:	70 e0       	ldi	r23, 0x00	; 0
    2180:	02 c0       	rjmp	.+4      	; 0x2186 <vfprintf+0x19a>
    2182:	6f ef       	ldi	r22, 0xFF	; 255
    2184:	7f ef       	ldi	r23, 0xFF	; 255
    2186:	c5 01       	movw	r24, r10
    2188:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <strnlen_P>
    218c:	4c 01       	movw	r8, r24
    218e:	f3 2d       	mov	r31, r3
    2190:	f0 68       	ori	r31, 0x80	; 128
    2192:	3f 2e       	mov	r3, r31
    2194:	82 01       	movw	r16, r4
    2196:	33 fc       	sbrc	r3, 3
    2198:	1b c0       	rjmp	.+54     	; 0x21d0 <vfprintf+0x1e4>
    219a:	82 2d       	mov	r24, r2
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	88 16       	cp	r8, r24
    21a0:	99 06       	cpc	r9, r25
    21a2:	b0 f4       	brcc	.+44     	; 0x21d0 <vfprintf+0x1e4>
    21a4:	b6 01       	movw	r22, r12
    21a6:	80 e2       	ldi	r24, 0x20	; 32
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	0e 94 10 12 	call	0x2420	; 0x2420 <fputc>
    21ae:	2a 94       	dec	r2
    21b0:	f4 cf       	rjmp	.-24     	; 0x219a <vfprintf+0x1ae>
    21b2:	f5 01       	movw	r30, r10
    21b4:	37 fc       	sbrc	r3, 7
    21b6:	85 91       	lpm	r24, Z+
    21b8:	37 fe       	sbrs	r3, 7
    21ba:	81 91       	ld	r24, Z+
    21bc:	5f 01       	movw	r10, r30
    21be:	b6 01       	movw	r22, r12
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	0e 94 10 12 	call	0x2420	; 0x2420 <fputc>
    21c6:	21 10       	cpse	r2, r1
    21c8:	2a 94       	dec	r2
    21ca:	21 e0       	ldi	r18, 0x01	; 1
    21cc:	82 1a       	sub	r8, r18
    21ce:	91 08       	sbc	r9, r1
    21d0:	81 14       	cp	r8, r1
    21d2:	91 04       	cpc	r9, r1
    21d4:	71 f7       	brne	.-36     	; 0x21b2 <vfprintf+0x1c6>
    21d6:	e8 c0       	rjmp	.+464    	; 0x23a8 <vfprintf+0x3bc>
    21d8:	84 36       	cpi	r24, 0x64	; 100
    21da:	11 f0       	breq	.+4      	; 0x21e0 <vfprintf+0x1f4>
    21dc:	89 36       	cpi	r24, 0x69	; 105
    21de:	41 f5       	brne	.+80     	; 0x2230 <vfprintf+0x244>
    21e0:	f8 01       	movw	r30, r16
    21e2:	37 fe       	sbrs	r3, 7
    21e4:	07 c0       	rjmp	.+14     	; 0x21f4 <vfprintf+0x208>
    21e6:	60 81       	ld	r22, Z
    21e8:	71 81       	ldd	r23, Z+1	; 0x01
    21ea:	82 81       	ldd	r24, Z+2	; 0x02
    21ec:	93 81       	ldd	r25, Z+3	; 0x03
    21ee:	0c 5f       	subi	r16, 0xFC	; 252
    21f0:	1f 4f       	sbci	r17, 0xFF	; 255
    21f2:	08 c0       	rjmp	.+16     	; 0x2204 <vfprintf+0x218>
    21f4:	60 81       	ld	r22, Z
    21f6:	71 81       	ldd	r23, Z+1	; 0x01
    21f8:	07 2e       	mov	r0, r23
    21fa:	00 0c       	add	r0, r0
    21fc:	88 0b       	sbc	r24, r24
    21fe:	99 0b       	sbc	r25, r25
    2200:	0e 5f       	subi	r16, 0xFE	; 254
    2202:	1f 4f       	sbci	r17, 0xFF	; 255
    2204:	f3 2d       	mov	r31, r3
    2206:	ff 76       	andi	r31, 0x6F	; 111
    2208:	3f 2e       	mov	r3, r31
    220a:	97 ff       	sbrs	r25, 7
    220c:	09 c0       	rjmp	.+18     	; 0x2220 <vfprintf+0x234>
    220e:	90 95       	com	r25
    2210:	80 95       	com	r24
    2212:	70 95       	com	r23
    2214:	61 95       	neg	r22
    2216:	7f 4f       	sbci	r23, 0xFF	; 255
    2218:	8f 4f       	sbci	r24, 0xFF	; 255
    221a:	9f 4f       	sbci	r25, 0xFF	; 255
    221c:	f0 68       	ori	r31, 0x80	; 128
    221e:	3f 2e       	mov	r3, r31
    2220:	2a e0       	ldi	r18, 0x0A	; 10
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	a3 01       	movw	r20, r6
    2226:	0e 94 4c 12 	call	0x2498	; 0x2498 <__ultoa_invert>
    222a:	88 2e       	mov	r8, r24
    222c:	86 18       	sub	r8, r6
    222e:	45 c0       	rjmp	.+138    	; 0x22ba <vfprintf+0x2ce>
    2230:	85 37       	cpi	r24, 0x75	; 117
    2232:	31 f4       	brne	.+12     	; 0x2240 <vfprintf+0x254>
    2234:	23 2d       	mov	r18, r3
    2236:	2f 7e       	andi	r18, 0xEF	; 239
    2238:	b2 2e       	mov	r11, r18
    223a:	2a e0       	ldi	r18, 0x0A	; 10
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	25 c0       	rjmp	.+74     	; 0x228a <vfprintf+0x29e>
    2240:	93 2d       	mov	r25, r3
    2242:	99 7f       	andi	r25, 0xF9	; 249
    2244:	b9 2e       	mov	r11, r25
    2246:	8f 36       	cpi	r24, 0x6F	; 111
    2248:	c1 f0       	breq	.+48     	; 0x227a <vfprintf+0x28e>
    224a:	18 f4       	brcc	.+6      	; 0x2252 <vfprintf+0x266>
    224c:	88 35       	cpi	r24, 0x58	; 88
    224e:	79 f0       	breq	.+30     	; 0x226e <vfprintf+0x282>
    2250:	b5 c0       	rjmp	.+362    	; 0x23bc <vfprintf+0x3d0>
    2252:	80 37       	cpi	r24, 0x70	; 112
    2254:	19 f0       	breq	.+6      	; 0x225c <vfprintf+0x270>
    2256:	88 37       	cpi	r24, 0x78	; 120
    2258:	21 f0       	breq	.+8      	; 0x2262 <vfprintf+0x276>
    225a:	b0 c0       	rjmp	.+352    	; 0x23bc <vfprintf+0x3d0>
    225c:	e9 2f       	mov	r30, r25
    225e:	e0 61       	ori	r30, 0x10	; 16
    2260:	be 2e       	mov	r11, r30
    2262:	b4 fe       	sbrs	r11, 4
    2264:	0d c0       	rjmp	.+26     	; 0x2280 <vfprintf+0x294>
    2266:	fb 2d       	mov	r31, r11
    2268:	f4 60       	ori	r31, 0x04	; 4
    226a:	bf 2e       	mov	r11, r31
    226c:	09 c0       	rjmp	.+18     	; 0x2280 <vfprintf+0x294>
    226e:	34 fe       	sbrs	r3, 4
    2270:	0a c0       	rjmp	.+20     	; 0x2286 <vfprintf+0x29a>
    2272:	29 2f       	mov	r18, r25
    2274:	26 60       	ori	r18, 0x06	; 6
    2276:	b2 2e       	mov	r11, r18
    2278:	06 c0       	rjmp	.+12     	; 0x2286 <vfprintf+0x29a>
    227a:	28 e0       	ldi	r18, 0x08	; 8
    227c:	30 e0       	ldi	r19, 0x00	; 0
    227e:	05 c0       	rjmp	.+10     	; 0x228a <vfprintf+0x29e>
    2280:	20 e1       	ldi	r18, 0x10	; 16
    2282:	30 e0       	ldi	r19, 0x00	; 0
    2284:	02 c0       	rjmp	.+4      	; 0x228a <vfprintf+0x29e>
    2286:	20 e1       	ldi	r18, 0x10	; 16
    2288:	32 e0       	ldi	r19, 0x02	; 2
    228a:	f8 01       	movw	r30, r16
    228c:	b7 fe       	sbrs	r11, 7
    228e:	07 c0       	rjmp	.+14     	; 0x229e <vfprintf+0x2b2>
    2290:	60 81       	ld	r22, Z
    2292:	71 81       	ldd	r23, Z+1	; 0x01
    2294:	82 81       	ldd	r24, Z+2	; 0x02
    2296:	93 81       	ldd	r25, Z+3	; 0x03
    2298:	0c 5f       	subi	r16, 0xFC	; 252
    229a:	1f 4f       	sbci	r17, 0xFF	; 255
    229c:	06 c0       	rjmp	.+12     	; 0x22aa <vfprintf+0x2be>
    229e:	60 81       	ld	r22, Z
    22a0:	71 81       	ldd	r23, Z+1	; 0x01
    22a2:	80 e0       	ldi	r24, 0x00	; 0
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	0e 5f       	subi	r16, 0xFE	; 254
    22a8:	1f 4f       	sbci	r17, 0xFF	; 255
    22aa:	a3 01       	movw	r20, r6
    22ac:	0e 94 4c 12 	call	0x2498	; 0x2498 <__ultoa_invert>
    22b0:	88 2e       	mov	r8, r24
    22b2:	86 18       	sub	r8, r6
    22b4:	fb 2d       	mov	r31, r11
    22b6:	ff 77       	andi	r31, 0x7F	; 127
    22b8:	3f 2e       	mov	r3, r31
    22ba:	36 fe       	sbrs	r3, 6
    22bc:	0d c0       	rjmp	.+26     	; 0x22d8 <vfprintf+0x2ec>
    22be:	23 2d       	mov	r18, r3
    22c0:	2e 7f       	andi	r18, 0xFE	; 254
    22c2:	a2 2e       	mov	r10, r18
    22c4:	89 14       	cp	r8, r9
    22c6:	58 f4       	brcc	.+22     	; 0x22de <vfprintf+0x2f2>
    22c8:	34 fe       	sbrs	r3, 4
    22ca:	0b c0       	rjmp	.+22     	; 0x22e2 <vfprintf+0x2f6>
    22cc:	32 fc       	sbrc	r3, 2
    22ce:	09 c0       	rjmp	.+18     	; 0x22e2 <vfprintf+0x2f6>
    22d0:	83 2d       	mov	r24, r3
    22d2:	8e 7e       	andi	r24, 0xEE	; 238
    22d4:	a8 2e       	mov	r10, r24
    22d6:	05 c0       	rjmp	.+10     	; 0x22e2 <vfprintf+0x2f6>
    22d8:	b8 2c       	mov	r11, r8
    22da:	a3 2c       	mov	r10, r3
    22dc:	03 c0       	rjmp	.+6      	; 0x22e4 <vfprintf+0x2f8>
    22de:	b8 2c       	mov	r11, r8
    22e0:	01 c0       	rjmp	.+2      	; 0x22e4 <vfprintf+0x2f8>
    22e2:	b9 2c       	mov	r11, r9
    22e4:	a4 fe       	sbrs	r10, 4
    22e6:	0f c0       	rjmp	.+30     	; 0x2306 <vfprintf+0x31a>
    22e8:	fe 01       	movw	r30, r28
    22ea:	e8 0d       	add	r30, r8
    22ec:	f1 1d       	adc	r31, r1
    22ee:	80 81       	ld	r24, Z
    22f0:	80 33       	cpi	r24, 0x30	; 48
    22f2:	21 f4       	brne	.+8      	; 0x22fc <vfprintf+0x310>
    22f4:	9a 2d       	mov	r25, r10
    22f6:	99 7e       	andi	r25, 0xE9	; 233
    22f8:	a9 2e       	mov	r10, r25
    22fa:	09 c0       	rjmp	.+18     	; 0x230e <vfprintf+0x322>
    22fc:	a2 fe       	sbrs	r10, 2
    22fe:	06 c0       	rjmp	.+12     	; 0x230c <vfprintf+0x320>
    2300:	b3 94       	inc	r11
    2302:	b3 94       	inc	r11
    2304:	04 c0       	rjmp	.+8      	; 0x230e <vfprintf+0x322>
    2306:	8a 2d       	mov	r24, r10
    2308:	86 78       	andi	r24, 0x86	; 134
    230a:	09 f0       	breq	.+2      	; 0x230e <vfprintf+0x322>
    230c:	b3 94       	inc	r11
    230e:	a3 fc       	sbrc	r10, 3
    2310:	11 c0       	rjmp	.+34     	; 0x2334 <vfprintf+0x348>
    2312:	a0 fe       	sbrs	r10, 0
    2314:	06 c0       	rjmp	.+12     	; 0x2322 <vfprintf+0x336>
    2316:	b2 14       	cp	r11, r2
    2318:	88 f4       	brcc	.+34     	; 0x233c <vfprintf+0x350>
    231a:	28 0c       	add	r2, r8
    231c:	92 2c       	mov	r9, r2
    231e:	9b 18       	sub	r9, r11
    2320:	0e c0       	rjmp	.+28     	; 0x233e <vfprintf+0x352>
    2322:	b2 14       	cp	r11, r2
    2324:	60 f4       	brcc	.+24     	; 0x233e <vfprintf+0x352>
    2326:	b6 01       	movw	r22, r12
    2328:	80 e2       	ldi	r24, 0x20	; 32
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	0e 94 10 12 	call	0x2420	; 0x2420 <fputc>
    2330:	b3 94       	inc	r11
    2332:	f7 cf       	rjmp	.-18     	; 0x2322 <vfprintf+0x336>
    2334:	b2 14       	cp	r11, r2
    2336:	18 f4       	brcc	.+6      	; 0x233e <vfprintf+0x352>
    2338:	2b 18       	sub	r2, r11
    233a:	02 c0       	rjmp	.+4      	; 0x2340 <vfprintf+0x354>
    233c:	98 2c       	mov	r9, r8
    233e:	21 2c       	mov	r2, r1
    2340:	a4 fe       	sbrs	r10, 4
    2342:	10 c0       	rjmp	.+32     	; 0x2364 <vfprintf+0x378>
    2344:	b6 01       	movw	r22, r12
    2346:	80 e3       	ldi	r24, 0x30	; 48
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	0e 94 10 12 	call	0x2420	; 0x2420 <fputc>
    234e:	a2 fe       	sbrs	r10, 2
    2350:	17 c0       	rjmp	.+46     	; 0x2380 <vfprintf+0x394>
    2352:	a1 fc       	sbrc	r10, 1
    2354:	03 c0       	rjmp	.+6      	; 0x235c <vfprintf+0x370>
    2356:	88 e7       	ldi	r24, 0x78	; 120
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	02 c0       	rjmp	.+4      	; 0x2360 <vfprintf+0x374>
    235c:	88 e5       	ldi	r24, 0x58	; 88
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	b6 01       	movw	r22, r12
    2362:	0c c0       	rjmp	.+24     	; 0x237c <vfprintf+0x390>
    2364:	8a 2d       	mov	r24, r10
    2366:	86 78       	andi	r24, 0x86	; 134
    2368:	59 f0       	breq	.+22     	; 0x2380 <vfprintf+0x394>
    236a:	a1 fe       	sbrs	r10, 1
    236c:	02 c0       	rjmp	.+4      	; 0x2372 <vfprintf+0x386>
    236e:	8b e2       	ldi	r24, 0x2B	; 43
    2370:	01 c0       	rjmp	.+2      	; 0x2374 <vfprintf+0x388>
    2372:	80 e2       	ldi	r24, 0x20	; 32
    2374:	a7 fc       	sbrc	r10, 7
    2376:	8d e2       	ldi	r24, 0x2D	; 45
    2378:	b6 01       	movw	r22, r12
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	0e 94 10 12 	call	0x2420	; 0x2420 <fputc>
    2380:	89 14       	cp	r8, r9
    2382:	38 f4       	brcc	.+14     	; 0x2392 <vfprintf+0x3a6>
    2384:	b6 01       	movw	r22, r12
    2386:	80 e3       	ldi	r24, 0x30	; 48
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	0e 94 10 12 	call	0x2420	; 0x2420 <fputc>
    238e:	9a 94       	dec	r9
    2390:	f7 cf       	rjmp	.-18     	; 0x2380 <vfprintf+0x394>
    2392:	8a 94       	dec	r8
    2394:	f3 01       	movw	r30, r6
    2396:	e8 0d       	add	r30, r8
    2398:	f1 1d       	adc	r31, r1
    239a:	80 81       	ld	r24, Z
    239c:	b6 01       	movw	r22, r12
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	0e 94 10 12 	call	0x2420	; 0x2420 <fputc>
    23a4:	81 10       	cpse	r8, r1
    23a6:	f5 cf       	rjmp	.-22     	; 0x2392 <vfprintf+0x3a6>
    23a8:	22 20       	and	r2, r2
    23aa:	09 f4       	brne	.+2      	; 0x23ae <vfprintf+0x3c2>
    23ac:	42 ce       	rjmp	.-892    	; 0x2032 <vfprintf+0x46>
    23ae:	b6 01       	movw	r22, r12
    23b0:	80 e2       	ldi	r24, 0x20	; 32
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	0e 94 10 12 	call	0x2420	; 0x2420 <fputc>
    23b8:	2a 94       	dec	r2
    23ba:	f6 cf       	rjmp	.-20     	; 0x23a8 <vfprintf+0x3bc>
    23bc:	f6 01       	movw	r30, r12
    23be:	86 81       	ldd	r24, Z+6	; 0x06
    23c0:	97 81       	ldd	r25, Z+7	; 0x07
    23c2:	02 c0       	rjmp	.+4      	; 0x23c8 <vfprintf+0x3dc>
    23c4:	8f ef       	ldi	r24, 0xFF	; 255
    23c6:	9f ef       	ldi	r25, 0xFF	; 255
    23c8:	2b 96       	adiw	r28, 0x0b	; 11
    23ca:	cd bf       	out	0x3d, r28	; 61
    23cc:	de bf       	out	0x3e, r29	; 62
    23ce:	df 91       	pop	r29
    23d0:	cf 91       	pop	r28
    23d2:	1f 91       	pop	r17
    23d4:	0f 91       	pop	r16
    23d6:	ff 90       	pop	r15
    23d8:	ef 90       	pop	r14
    23da:	df 90       	pop	r13
    23dc:	cf 90       	pop	r12
    23de:	bf 90       	pop	r11
    23e0:	af 90       	pop	r10
    23e2:	9f 90       	pop	r9
    23e4:	8f 90       	pop	r8
    23e6:	7f 90       	pop	r7
    23e8:	6f 90       	pop	r6
    23ea:	5f 90       	pop	r5
    23ec:	4f 90       	pop	r4
    23ee:	3f 90       	pop	r3
    23f0:	2f 90       	pop	r2
    23f2:	08 95       	ret

000023f4 <strnlen_P>:
    23f4:	fc 01       	movw	r30, r24
    23f6:	05 90       	lpm	r0, Z+
    23f8:	61 50       	subi	r22, 0x01	; 1
    23fa:	70 40       	sbci	r23, 0x00	; 0
    23fc:	01 10       	cpse	r0, r1
    23fe:	d8 f7       	brcc	.-10     	; 0x23f6 <strnlen_P+0x2>
    2400:	80 95       	com	r24
    2402:	90 95       	com	r25
    2404:	8e 0f       	add	r24, r30
    2406:	9f 1f       	adc	r25, r31
    2408:	08 95       	ret

0000240a <strnlen>:
    240a:	fc 01       	movw	r30, r24
    240c:	61 50       	subi	r22, 0x01	; 1
    240e:	70 40       	sbci	r23, 0x00	; 0
    2410:	01 90       	ld	r0, Z+
    2412:	01 10       	cpse	r0, r1
    2414:	d8 f7       	brcc	.-10     	; 0x240c <strnlen+0x2>
    2416:	80 95       	com	r24
    2418:	90 95       	com	r25
    241a:	8e 0f       	add	r24, r30
    241c:	9f 1f       	adc	r25, r31
    241e:	08 95       	ret

00002420 <fputc>:
    2420:	0f 93       	push	r16
    2422:	1f 93       	push	r17
    2424:	cf 93       	push	r28
    2426:	df 93       	push	r29
    2428:	fb 01       	movw	r30, r22
    242a:	23 81       	ldd	r18, Z+3	; 0x03
    242c:	21 fd       	sbrc	r18, 1
    242e:	03 c0       	rjmp	.+6      	; 0x2436 <fputc+0x16>
    2430:	8f ef       	ldi	r24, 0xFF	; 255
    2432:	9f ef       	ldi	r25, 0xFF	; 255
    2434:	2c c0       	rjmp	.+88     	; 0x248e <fputc+0x6e>
    2436:	22 ff       	sbrs	r18, 2
    2438:	16 c0       	rjmp	.+44     	; 0x2466 <fputc+0x46>
    243a:	46 81       	ldd	r20, Z+6	; 0x06
    243c:	57 81       	ldd	r21, Z+7	; 0x07
    243e:	24 81       	ldd	r18, Z+4	; 0x04
    2440:	35 81       	ldd	r19, Z+5	; 0x05
    2442:	42 17       	cp	r20, r18
    2444:	53 07       	cpc	r21, r19
    2446:	44 f4       	brge	.+16     	; 0x2458 <fputc+0x38>
    2448:	a0 81       	ld	r26, Z
    244a:	b1 81       	ldd	r27, Z+1	; 0x01
    244c:	9d 01       	movw	r18, r26
    244e:	2f 5f       	subi	r18, 0xFF	; 255
    2450:	3f 4f       	sbci	r19, 0xFF	; 255
    2452:	20 83       	st	Z, r18
    2454:	31 83       	std	Z+1, r19	; 0x01
    2456:	8c 93       	st	X, r24
    2458:	26 81       	ldd	r18, Z+6	; 0x06
    245a:	37 81       	ldd	r19, Z+7	; 0x07
    245c:	2f 5f       	subi	r18, 0xFF	; 255
    245e:	3f 4f       	sbci	r19, 0xFF	; 255
    2460:	26 83       	std	Z+6, r18	; 0x06
    2462:	37 83       	std	Z+7, r19	; 0x07
    2464:	14 c0       	rjmp	.+40     	; 0x248e <fputc+0x6e>
    2466:	8b 01       	movw	r16, r22
    2468:	ec 01       	movw	r28, r24
    246a:	fb 01       	movw	r30, r22
    246c:	00 84       	ldd	r0, Z+8	; 0x08
    246e:	f1 85       	ldd	r31, Z+9	; 0x09
    2470:	e0 2d       	mov	r30, r0
    2472:	09 95       	icall
    2474:	89 2b       	or	r24, r25
    2476:	e1 f6       	brne	.-72     	; 0x2430 <fputc+0x10>
    2478:	d8 01       	movw	r26, r16
    247a:	16 96       	adiw	r26, 0x06	; 6
    247c:	8d 91       	ld	r24, X+
    247e:	9c 91       	ld	r25, X
    2480:	17 97       	sbiw	r26, 0x07	; 7
    2482:	01 96       	adiw	r24, 0x01	; 1
    2484:	16 96       	adiw	r26, 0x06	; 6
    2486:	8d 93       	st	X+, r24
    2488:	9c 93       	st	X, r25
    248a:	17 97       	sbiw	r26, 0x07	; 7
    248c:	ce 01       	movw	r24, r28
    248e:	df 91       	pop	r29
    2490:	cf 91       	pop	r28
    2492:	1f 91       	pop	r17
    2494:	0f 91       	pop	r16
    2496:	08 95       	ret

00002498 <__ultoa_invert>:
    2498:	fa 01       	movw	r30, r20
    249a:	aa 27       	eor	r26, r26
    249c:	28 30       	cpi	r18, 0x08	; 8
    249e:	51 f1       	breq	.+84     	; 0x24f4 <__ultoa_invert+0x5c>
    24a0:	20 31       	cpi	r18, 0x10	; 16
    24a2:	81 f1       	breq	.+96     	; 0x2504 <__ultoa_invert+0x6c>
    24a4:	e8 94       	clt
    24a6:	6f 93       	push	r22
    24a8:	6e 7f       	andi	r22, 0xFE	; 254
    24aa:	6e 5f       	subi	r22, 0xFE	; 254
    24ac:	7f 4f       	sbci	r23, 0xFF	; 255
    24ae:	8f 4f       	sbci	r24, 0xFF	; 255
    24b0:	9f 4f       	sbci	r25, 0xFF	; 255
    24b2:	af 4f       	sbci	r26, 0xFF	; 255
    24b4:	b1 e0       	ldi	r27, 0x01	; 1
    24b6:	3e d0       	rcall	.+124    	; 0x2534 <__ultoa_invert+0x9c>
    24b8:	b4 e0       	ldi	r27, 0x04	; 4
    24ba:	3c d0       	rcall	.+120    	; 0x2534 <__ultoa_invert+0x9c>
    24bc:	67 0f       	add	r22, r23
    24be:	78 1f       	adc	r23, r24
    24c0:	89 1f       	adc	r24, r25
    24c2:	9a 1f       	adc	r25, r26
    24c4:	a1 1d       	adc	r26, r1
    24c6:	68 0f       	add	r22, r24
    24c8:	79 1f       	adc	r23, r25
    24ca:	8a 1f       	adc	r24, r26
    24cc:	91 1d       	adc	r25, r1
    24ce:	a1 1d       	adc	r26, r1
    24d0:	6a 0f       	add	r22, r26
    24d2:	71 1d       	adc	r23, r1
    24d4:	81 1d       	adc	r24, r1
    24d6:	91 1d       	adc	r25, r1
    24d8:	a1 1d       	adc	r26, r1
    24da:	20 d0       	rcall	.+64     	; 0x251c <__ultoa_invert+0x84>
    24dc:	09 f4       	brne	.+2      	; 0x24e0 <__ultoa_invert+0x48>
    24de:	68 94       	set
    24e0:	3f 91       	pop	r19
    24e2:	2a e0       	ldi	r18, 0x0A	; 10
    24e4:	26 9f       	mul	r18, r22
    24e6:	11 24       	eor	r1, r1
    24e8:	30 19       	sub	r19, r0
    24ea:	30 5d       	subi	r19, 0xD0	; 208
    24ec:	31 93       	st	Z+, r19
    24ee:	de f6       	brtc	.-74     	; 0x24a6 <__ultoa_invert+0xe>
    24f0:	cf 01       	movw	r24, r30
    24f2:	08 95       	ret
    24f4:	46 2f       	mov	r20, r22
    24f6:	47 70       	andi	r20, 0x07	; 7
    24f8:	40 5d       	subi	r20, 0xD0	; 208
    24fa:	41 93       	st	Z+, r20
    24fc:	b3 e0       	ldi	r27, 0x03	; 3
    24fe:	0f d0       	rcall	.+30     	; 0x251e <__ultoa_invert+0x86>
    2500:	c9 f7       	brne	.-14     	; 0x24f4 <__ultoa_invert+0x5c>
    2502:	f6 cf       	rjmp	.-20     	; 0x24f0 <__ultoa_invert+0x58>
    2504:	46 2f       	mov	r20, r22
    2506:	4f 70       	andi	r20, 0x0F	; 15
    2508:	40 5d       	subi	r20, 0xD0	; 208
    250a:	4a 33       	cpi	r20, 0x3A	; 58
    250c:	18 f0       	brcs	.+6      	; 0x2514 <__ultoa_invert+0x7c>
    250e:	49 5d       	subi	r20, 0xD9	; 217
    2510:	31 fd       	sbrc	r19, 1
    2512:	40 52       	subi	r20, 0x20	; 32
    2514:	41 93       	st	Z+, r20
    2516:	02 d0       	rcall	.+4      	; 0x251c <__ultoa_invert+0x84>
    2518:	a9 f7       	brne	.-22     	; 0x2504 <__ultoa_invert+0x6c>
    251a:	ea cf       	rjmp	.-44     	; 0x24f0 <__ultoa_invert+0x58>
    251c:	b4 e0       	ldi	r27, 0x04	; 4
    251e:	a6 95       	lsr	r26
    2520:	97 95       	ror	r25
    2522:	87 95       	ror	r24
    2524:	77 95       	ror	r23
    2526:	67 95       	ror	r22
    2528:	ba 95       	dec	r27
    252a:	c9 f7       	brne	.-14     	; 0x251e <__ultoa_invert+0x86>
    252c:	00 97       	sbiw	r24, 0x00	; 0
    252e:	61 05       	cpc	r22, r1
    2530:	71 05       	cpc	r23, r1
    2532:	08 95       	ret
    2534:	9b 01       	movw	r18, r22
    2536:	ac 01       	movw	r20, r24
    2538:	0a 2e       	mov	r0, r26
    253a:	06 94       	lsr	r0
    253c:	57 95       	ror	r21
    253e:	47 95       	ror	r20
    2540:	37 95       	ror	r19
    2542:	27 95       	ror	r18
    2544:	ba 95       	dec	r27
    2546:	c9 f7       	brne	.-14     	; 0x253a <__ultoa_invert+0xa2>
    2548:	62 0f       	add	r22, r18
    254a:	73 1f       	adc	r23, r19
    254c:	84 1f       	adc	r24, r20
    254e:	95 1f       	adc	r25, r21
    2550:	a0 1d       	adc	r26, r0
    2552:	08 95       	ret

00002554 <__do_global_dtors>:
    2554:	10 e0       	ldi	r17, 0x00	; 0
    2556:	cd e7       	ldi	r28, 0x7D	; 125
    2558:	d0 e0       	ldi	r29, 0x00	; 0
    255a:	04 c0       	rjmp	.+8      	; 0x2564 <__do_global_dtors+0x10>
    255c:	fe 01       	movw	r30, r28
    255e:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__tablejump2__>
    2562:	21 96       	adiw	r28, 0x01	; 1
    2564:	c0 38       	cpi	r28, 0x80	; 128
    2566:	d1 07       	cpc	r29, r17
    2568:	c9 f7       	brne	.-14     	; 0x255c <__do_global_dtors+0x8>
    256a:	f8 94       	cli

0000256c <__stop_program>:
    256c:	ff cf       	rjmp	.-2      	; 0x256c <__stop_program>
