
SAMD21_BSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000435c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000068  20000000  0000435c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000005d0  20000068  000043c4  00020068  2**2
                  ALLOC
  3 .stack        00002000  20000638  00004994  00020068  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
  6 .debug_info   00039969  00000000  00000000  000200e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004a0c  00000000  00000000  00059a52  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00017984  00000000  00000000  0005e45e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000010d0  00000000  00000000  00075de2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001260  00000000  00000000  00076eb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001d81c  00000000  00000000  00078112  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00017026  00000000  00000000  0009592e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00090cdd  00000000  00000000  000ac954  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002c88  00000000  00000000  0013d634  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	38 26 00 20 2d 01 00 00 29 01 00 00 29 01 00 00     8&. -...)...)...
	...
      2c:	29 01 00 00 00 00 00 00 00 00 00 00 29 01 00 00     )...........)...
      3c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      4c:	29 01 00 00 79 16 00 00 29 01 00 00 29 01 00 00     )...y...)...)...
      5c:	05 34 00 00 29 01 00 00 29 01 00 00 29 01 00 00     .4..)...)...)...
      6c:	29 01 00 00 99 1a 00 00 29 01 00 00 29 01 00 00     ).......)...)...
      7c:	29 01 00 00 29 01 00 00 29 01 00 00 99 20 00 00     )...)...).... ..
      8c:	ad 20 00 00 29 01 00 00 29 01 00 00 29 01 00 00     . ..)...)...)...
      9c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      ac:	29 01 00 00 00 00 00 00                             ).......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000068 	.word	0x20000068
      d4:	00000000 	.word	0x00000000
      d8:	0000435c 	.word	0x0000435c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000006c 	.word	0x2000006c
     108:	0000435c 	.word	0x0000435c
     10c:	0000435c 	.word	0x0000435c
     110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     114:	b510      	push	{r4, lr}
	system_init();
     116:	4b02      	ldr	r3, [pc, #8]	; (120 <atmel_start_init+0xc>)
     118:	4798      	blx	r3
	usb_init();
     11a:	4b02      	ldr	r3, [pc, #8]	; (124 <atmel_start_init+0x10>)
     11c:	4798      	blx	r3
}
     11e:	bd10      	pop	{r4, pc}
     120:	000007d1 	.word	0x000007d1
     124:	00004031 	.word	0x00004031

00000128 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     128:	e7fe      	b.n	128 <Dummy_Handler>
	...

0000012c <Reset_Handler>:
{
     12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     12e:	4a23      	ldr	r2, [pc, #140]	; (1bc <Reset_Handler+0x90>)
     130:	4b23      	ldr	r3, [pc, #140]	; (1c0 <Reset_Handler+0x94>)
     132:	429a      	cmp	r2, r3
     134:	d009      	beq.n	14a <Reset_Handler+0x1e>
     136:	4b22      	ldr	r3, [pc, #136]	; (1c0 <Reset_Handler+0x94>)
     138:	4a20      	ldr	r2, [pc, #128]	; (1bc <Reset_Handler+0x90>)
     13a:	e003      	b.n	144 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     13c:	6811      	ldr	r1, [r2, #0]
     13e:	6019      	str	r1, [r3, #0]
     140:	3304      	adds	r3, #4
     142:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     144:	491f      	ldr	r1, [pc, #124]	; (1c4 <Reset_Handler+0x98>)
     146:	428b      	cmp	r3, r1
     148:	d3f8      	bcc.n	13c <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     14a:	4b1f      	ldr	r3, [pc, #124]	; (1c8 <Reset_Handler+0x9c>)
     14c:	e002      	b.n	154 <Reset_Handler+0x28>
                *pDest++ = 0;
     14e:	2200      	movs	r2, #0
     150:	601a      	str	r2, [r3, #0]
     152:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     154:	4a1d      	ldr	r2, [pc, #116]	; (1cc <Reset_Handler+0xa0>)
     156:	4293      	cmp	r3, r2
     158:	d3f9      	bcc.n	14e <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     15a:	4a1d      	ldr	r2, [pc, #116]	; (1d0 <Reset_Handler+0xa4>)
     15c:	21ff      	movs	r1, #255	; 0xff
     15e:	4b1d      	ldr	r3, [pc, #116]	; (1d4 <Reset_Handler+0xa8>)
     160:	438b      	bics	r3, r1
     162:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     164:	39fd      	subs	r1, #253	; 0xfd
     166:	2390      	movs	r3, #144	; 0x90
     168:	005b      	lsls	r3, r3, #1
     16a:	4a1b      	ldr	r2, [pc, #108]	; (1d8 <Reset_Handler+0xac>)
     16c:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     16e:	4a1b      	ldr	r2, [pc, #108]	; (1dc <Reset_Handler+0xb0>)
     170:	78d3      	ldrb	r3, [r2, #3]
     172:	2503      	movs	r5, #3
     174:	43ab      	bics	r3, r5
     176:	2402      	movs	r4, #2
     178:	4323      	orrs	r3, r4
     17a:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     17c:	78d3      	ldrb	r3, [r2, #3]
     17e:	270c      	movs	r7, #12
     180:	43bb      	bics	r3, r7
     182:	2608      	movs	r6, #8
     184:	4333      	orrs	r3, r6
     186:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     188:	4b15      	ldr	r3, [pc, #84]	; (1e0 <Reset_Handler+0xb4>)
     18a:	7b98      	ldrb	r0, [r3, #14]
     18c:	2230      	movs	r2, #48	; 0x30
     18e:	4390      	bics	r0, r2
     190:	2220      	movs	r2, #32
     192:	4310      	orrs	r0, r2
     194:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     196:	7b99      	ldrb	r1, [r3, #14]
     198:	43b9      	bics	r1, r7
     19a:	4331      	orrs	r1, r6
     19c:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     19e:	7b9a      	ldrb	r2, [r3, #14]
     1a0:	43aa      	bics	r2, r5
     1a2:	4322      	orrs	r2, r4
     1a4:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     1a6:	4a0f      	ldr	r2, [pc, #60]	; (1e4 <Reset_Handler+0xb8>)
     1a8:	6851      	ldr	r1, [r2, #4]
     1aa:	2380      	movs	r3, #128	; 0x80
     1ac:	430b      	orrs	r3, r1
     1ae:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     1b0:	4b0d      	ldr	r3, [pc, #52]	; (1e8 <Reset_Handler+0xbc>)
     1b2:	4798      	blx	r3
        main();
     1b4:	4b0d      	ldr	r3, [pc, #52]	; (1ec <Reset_Handler+0xc0>)
     1b6:	4798      	blx	r3
     1b8:	e7fe      	b.n	1b8 <Reset_Handler+0x8c>
     1ba:	46c0      	nop			; (mov r8, r8)
     1bc:	0000435c 	.word	0x0000435c
     1c0:	20000000 	.word	0x20000000
     1c4:	20000068 	.word	0x20000068
     1c8:	20000068 	.word	0x20000068
     1cc:	20000638 	.word	0x20000638
     1d0:	e000ed00 	.word	0xe000ed00
     1d4:	00000000 	.word	0x00000000
     1d8:	41007000 	.word	0x41007000
     1dc:	41005000 	.word	0x41005000
     1e0:	41004800 	.word	0x41004800
     1e4:	41004000 	.word	0x41004000
     1e8:	00004091 	.word	0x00004091
     1ec:	00003411 	.word	0x00003411

000001f0 <TIMER_ZCD_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ZCD_init(void)
{
     1f0:	b510      	push	{r4, lr}
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     1f2:	4a08      	ldr	r2, [pc, #32]	; (214 <TIMER_ZCD_init+0x24>)
     1f4:	6a11      	ldr	r1, [r2, #32]
     1f6:	2380      	movs	r3, #128	; 0x80
     1f8:	011b      	lsls	r3, r3, #4
     1fa:	430b      	orrs	r3, r1
     1fc:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     1fe:	4a06      	ldr	r2, [pc, #24]	; (218 <TIMER_ZCD_init+0x28>)
     200:	4b06      	ldr	r3, [pc, #24]	; (21c <TIMER_ZCD_init+0x2c>)
     202:	805a      	strh	r2, [r3, #2]
	_pm_enable_bus_clock(PM_BUS_APBC, TC3);
	_gclk_enable_channel(TC3_GCLK_ID, CONF_GCLK_TC3_SRC);

	timer_init(&TIMER_ZCD, TC3, _tc_get_timer());
     204:	4b06      	ldr	r3, [pc, #24]	; (220 <TIMER_ZCD_init+0x30>)
     206:	4798      	blx	r3
     208:	0002      	movs	r2, r0
     20a:	4906      	ldr	r1, [pc, #24]	; (224 <TIMER_ZCD_init+0x34>)
     20c:	4806      	ldr	r0, [pc, #24]	; (228 <TIMER_ZCD_init+0x38>)
     20e:	4b07      	ldr	r3, [pc, #28]	; (22c <TIMER_ZCD_init+0x3c>)
     210:	4798      	blx	r3
}
     212:	bd10      	pop	{r4, pc}
     214:	40000400 	.word	0x40000400
     218:	0000401b 	.word	0x0000401b
     21c:	40000c00 	.word	0x40000c00
     220:	00002095 	.word	0x00002095
     224:	42002c00 	.word	0x42002c00
     228:	2000055c 	.word	0x2000055c
     22c:	00000bb1 	.word	0x00000bb1

00000230 <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
     230:	b510      	push	{r4, lr}
     232:	4a08      	ldr	r2, [pc, #32]	; (254 <TIMER_USB_init+0x24>)
     234:	6a11      	ldr	r1, [r2, #32]
     236:	2380      	movs	r3, #128	; 0x80
     238:	015b      	lsls	r3, r3, #5
     23a:	430b      	orrs	r3, r1
     23c:	6213      	str	r3, [r2, #32]
     23e:	4a06      	ldr	r2, [pc, #24]	; (258 <TIMER_USB_init+0x28>)
     240:	4b06      	ldr	r3, [pc, #24]	; (25c <TIMER_USB_init+0x2c>)
     242:	805a      	strh	r2, [r3, #2]
	_pm_enable_bus_clock(PM_BUS_APBC, TC4);
	_gclk_enable_channel(TC4_GCLK_ID, CONF_GCLK_TC4_SRC);

	timer_init(&TIMER_USB, TC4, _tc_get_timer());
     244:	4b06      	ldr	r3, [pc, #24]	; (260 <TIMER_USB_init+0x30>)
     246:	4798      	blx	r3
     248:	0002      	movs	r2, r0
     24a:	4906      	ldr	r1, [pc, #24]	; (264 <TIMER_USB_init+0x34>)
     24c:	4806      	ldr	r0, [pc, #24]	; (268 <TIMER_USB_init+0x38>)
     24e:	4b07      	ldr	r3, [pc, #28]	; (26c <TIMER_USB_init+0x3c>)
     250:	4798      	blx	r3
}
     252:	bd10      	pop	{r4, pc}
     254:	40000400 	.word	0x40000400
     258:	0000431c 	.word	0x0000431c
     25c:	40000c00 	.word	0x40000c00
     260:	00002095 	.word	0x00002095
     264:	42003000 	.word	0x42003000
     268:	2000061c 	.word	0x2000061c
     26c:	00000bb1 	.word	0x00000bb1

00000270 <EXTERNAL_IRQ_0_init>:
{
     270:	b510      	push	{r4, lr}
     272:	4a0f      	ldr	r2, [pc, #60]	; (2b0 <EXTERNAL_IRQ_0_init+0x40>)
     274:	4b0f      	ldr	r3, [pc, #60]	; (2b4 <EXTERNAL_IRQ_0_init+0x44>)
     276:	805a      	strh	r2, [r3, #2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     278:	3a05      	subs	r2, #5
     27a:	23c0      	movs	r3, #192	; 0xc0
     27c:	05db      	lsls	r3, r3, #23
     27e:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     280:	4b0d      	ldr	r3, [pc, #52]	; (2b8 <EXTERNAL_IRQ_0_init+0x48>)
     282:	4a0e      	ldr	r2, [pc, #56]	; (2bc <EXTERNAL_IRQ_0_init+0x4c>)
     284:	629a      	str	r2, [r3, #40]	; 0x28
     286:	4a0e      	ldr	r2, [pc, #56]	; (2c0 <EXTERNAL_IRQ_0_init+0x50>)
     288:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     28a:	214e      	movs	r1, #78	; 0x4e
     28c:	5c5a      	ldrb	r2, [r3, r1]
     28e:	2004      	movs	r0, #4
     290:	4382      	bics	r2, r0
     292:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     294:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     296:	3803      	subs	r0, #3
     298:	4382      	bics	r2, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     29a:	4302      	orrs	r2, r0
     29c:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     29e:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     2a0:	3917      	subs	r1, #23
     2a2:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     2a4:	200f      	movs	r0, #15
     2a6:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     2a8:	545a      	strb	r2, [r3, r1]
	ext_irq_init();
     2aa:	4b06      	ldr	r3, [pc, #24]	; (2c4 <EXTERNAL_IRQ_0_init+0x54>)
     2ac:	4798      	blx	r3
}
     2ae:	bd10      	pop	{r4, pc}
     2b0:	00004005 	.word	0x00004005
     2b4:	40000c00 	.word	0x40000c00
     2b8:	41004400 	.word	0x41004400
     2bc:	40024000 	.word	0x40024000
     2c0:	c0020000 	.word	0xc0020000
     2c4:	000009a9 	.word	0x000009a9

000002c8 <SPI_ADF_PORT_init>:
{
     2c8:	b5f0      	push	{r4, r5, r6, r7, lr}
     2ca:	46c6      	mov	lr, r8
     2cc:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     2ce:	22c0      	movs	r2, #192	; 0xc0
     2d0:	05d2      	lsls	r2, r2, #23
     2d2:	2310      	movs	r3, #16
     2d4:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     2d6:	6093      	str	r3, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     2d8:	4b25      	ldr	r3, [pc, #148]	; (370 <SPI_ADF_PORT_init+0xa8>)
     2da:	4926      	ldr	r1, [pc, #152]	; (374 <SPI_ADF_PORT_init+0xac>)
     2dc:	6299      	str	r1, [r3, #40]	; 0x28
     2de:	21c0      	movs	r1, #192	; 0xc0
     2e0:	0609      	lsls	r1, r1, #24
     2e2:	468c      	mov	ip, r1
     2e4:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2e6:	2044      	movs	r0, #68	; 0x44
     2e8:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2ea:	2701      	movs	r7, #1
     2ec:	43b9      	bics	r1, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     2ee:	2601      	movs	r6, #1
     2f0:	4331      	orrs	r1, r6
     2f2:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2f4:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     2f6:	2132      	movs	r1, #50	; 0x32
     2f8:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     2fa:	250f      	movs	r5, #15
     2fc:	43a8      	bics	r0, r5
	tmp |= PORT_PMUX_PMUXE(data);
     2fe:	2403      	movs	r4, #3
     300:	46a0      	mov	r8, r4
     302:	4644      	mov	r4, r8
     304:	4320      	orrs	r0, r4
     306:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     308:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     30a:	2020      	movs	r0, #32
     30c:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     30e:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     310:	4819      	ldr	r0, [pc, #100]	; (378 <SPI_ADF_PORT_init+0xb0>)
     312:	6298      	str	r0, [r3, #40]	; 0x28
     314:	4660      	mov	r0, ip
     316:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     318:	2045      	movs	r0, #69	; 0x45
     31a:	4684      	mov	ip, r0
     31c:	5c18      	ldrb	r0, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     31e:	43b8      	bics	r0, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     320:	4330      	orrs	r0, r6
     322:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     324:	4664      	mov	r4, ip
     326:	5518      	strb	r0, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     328:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     32a:	3c36      	subs	r4, #54	; 0x36
     32c:	4020      	ands	r0, r4
	tmp |= PORT_PMUX_PMUXO(data);
     32e:	2430      	movs	r4, #48	; 0x30
     330:	46a4      	mov	ip, r4
     332:	4664      	mov	r4, ip
     334:	4320      	orrs	r0, r4
     336:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     338:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     33a:	310e      	adds	r1, #14
     33c:	6051      	str	r1, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     33e:	4a0f      	ldr	r2, [pc, #60]	; (37c <SPI_ADF_PORT_init+0xb4>)
     340:	629a      	str	r2, [r3, #40]	; 0x28
     342:	4a0f      	ldr	r2, [pc, #60]	; (380 <SPI_ADF_PORT_init+0xb8>)
     344:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     346:	2246      	movs	r2, #70	; 0x46
     348:	5c99      	ldrb	r1, [r3, r2]
     34a:	2004      	movs	r0, #4
     34c:	4381      	bics	r1, r0
     34e:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     350:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     352:	43b9      	bics	r1, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     354:	4331      	orrs	r1, r6
     356:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     358:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     35a:	2133      	movs	r1, #51	; 0x33
     35c:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     35e:	43aa      	bics	r2, r5
	tmp |= PORT_PMUX_PMUXE(data);
     360:	4640      	mov	r0, r8
     362:	4302      	orrs	r2, r0
     364:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     366:	545a      	strb	r2, [r3, r1]
}
     368:	bc04      	pop	{r2}
     36a:	4690      	mov	r8, r2
     36c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     36e:	46c0      	nop			; (mov r8, r8)
     370:	41004400 	.word	0x41004400
     374:	40000010 	.word	0x40000010
     378:	40000020 	.word	0x40000020
     37c:	40020040 	.word	0x40020040
     380:	c0020000 	.word	0xc0020000

00000384 <SPI_ADF_CLOCK_init>:
     384:	4a04      	ldr	r2, [pc, #16]	; (398 <SPI_ADF_CLOCK_init+0x14>)
     386:	6a13      	ldr	r3, [r2, #32]
     388:	2104      	movs	r1, #4
     38a:	430b      	orrs	r3, r1
     38c:	6213      	str	r3, [r2, #32]
     38e:	4a03      	ldr	r2, [pc, #12]	; (39c <SPI_ADF_CLOCK_init+0x18>)
     390:	4b03      	ldr	r3, [pc, #12]	; (3a0 <SPI_ADF_CLOCK_init+0x1c>)
     392:	805a      	strh	r2, [r3, #2]
}
     394:	4770      	bx	lr
     396:	46c0      	nop			; (mov r8, r8)
     398:	40000400 	.word	0x40000400
     39c:	00004014 	.word	0x00004014
     3a0:	40000c00 	.word	0x40000c00

000003a4 <SPI_ADF_init>:
{
     3a4:	b510      	push	{r4, lr}
	SPI_ADF_CLOCK_init();
     3a6:	4b04      	ldr	r3, [pc, #16]	; (3b8 <SPI_ADF_init+0x14>)
     3a8:	4798      	blx	r3
	spi_m_sync_init(&SPI_ADF, SERCOM0);
     3aa:	4904      	ldr	r1, [pc, #16]	; (3bc <SPI_ADF_init+0x18>)
     3ac:	4804      	ldr	r0, [pc, #16]	; (3c0 <SPI_ADF_init+0x1c>)
     3ae:	4b05      	ldr	r3, [pc, #20]	; (3c4 <SPI_ADF_init+0x20>)
     3b0:	4798      	blx	r3
	SPI_ADF_PORT_init();
     3b2:	4b05      	ldr	r3, [pc, #20]	; (3c8 <SPI_ADF_init+0x24>)
     3b4:	4798      	blx	r3
}
     3b6:	bd10      	pop	{r4, pc}
     3b8:	00000385 	.word	0x00000385
     3bc:	42000800 	.word	0x42000800
     3c0:	200005ec 	.word	0x200005ec
     3c4:	000009dd 	.word	0x000009dd
     3c8:	000002c9 	.word	0x000002c9

000003cc <SPI_LMX_PORT_init>:
{
     3cc:	b5f0      	push	{r4, r5, r6, r7, lr}
     3ce:	46c6      	mov	lr, r8
     3d0:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     3d2:	22c0      	movs	r2, #192	; 0xc0
     3d4:	05d2      	lsls	r2, r2, #23
     3d6:	2380      	movs	r3, #128	; 0x80
     3d8:	025b      	lsls	r3, r3, #9
     3da:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     3dc:	6093      	str	r3, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3de:	4b26      	ldr	r3, [pc, #152]	; (478 <SPI_LMX_PORT_init+0xac>)
     3e0:	2180      	movs	r1, #128	; 0x80
     3e2:	05c9      	lsls	r1, r1, #23
     3e4:	468c      	mov	ip, r1
     3e6:	6299      	str	r1, [r3, #40]	; 0x28
     3e8:	4924      	ldr	r1, [pc, #144]	; (47c <SPI_LMX_PORT_init+0xb0>)
     3ea:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3ec:	2050      	movs	r0, #80	; 0x50
     3ee:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     3f0:	2701      	movs	r7, #1
     3f2:	43b9      	bics	r1, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3f4:	2601      	movs	r6, #1
     3f6:	4331      	orrs	r1, r6
     3f8:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3fa:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3fc:	2138      	movs	r1, #56	; 0x38
     3fe:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     400:	250f      	movs	r5, #15
     402:	43a8      	bics	r0, r5
	tmp |= PORT_PMUX_PMUXE(data);
     404:	2402      	movs	r4, #2
     406:	46a0      	mov	r8, r4
     408:	4644      	mov	r4, r8
     40a:	4320      	orrs	r0, r4
     40c:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     40e:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     410:	2080      	movs	r0, #128	; 0x80
     412:	0280      	lsls	r0, r0, #10
     414:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     416:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     418:	4660      	mov	r0, ip
     41a:	6298      	str	r0, [r3, #40]	; 0x28
     41c:	4818      	ldr	r0, [pc, #96]	; (480 <SPI_LMX_PORT_init+0xb4>)
     41e:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     420:	2051      	movs	r0, #81	; 0x51
     422:	4684      	mov	ip, r0
     424:	5c18      	ldrb	r0, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     426:	43b8      	bics	r0, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     428:	4330      	orrs	r0, r6
     42a:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     42c:	4664      	mov	r4, ip
     42e:	5518      	strb	r0, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     430:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     432:	3c42      	subs	r4, #66	; 0x42
     434:	4020      	ands	r0, r4
	tmp |= PORT_PMUX_PMUXO(data);
     436:	2420      	movs	r4, #32
     438:	46a4      	mov	ip, r4
     43a:	4664      	mov	r4, ip
     43c:	4320      	orrs	r0, r4
     43e:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     440:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     442:	2180      	movs	r1, #128	; 0x80
     444:	02c9      	lsls	r1, r1, #11
     446:	6051      	str	r1, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     448:	4a0e      	ldr	r2, [pc, #56]	; (484 <SPI_LMX_PORT_init+0xb8>)
     44a:	629a      	str	r2, [r3, #40]	; 0x28
     44c:	4a0e      	ldr	r2, [pc, #56]	; (488 <SPI_LMX_PORT_init+0xbc>)
     44e:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     450:	2252      	movs	r2, #82	; 0x52
     452:	5c99      	ldrb	r1, [r3, r2]
     454:	2004      	movs	r0, #4
     456:	4381      	bics	r1, r0
     458:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     45a:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     45c:	43b9      	bics	r1, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     45e:	4331      	orrs	r1, r6
     460:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     462:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     464:	2139      	movs	r1, #57	; 0x39
     466:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     468:	43aa      	bics	r2, r5
	tmp |= PORT_PMUX_PMUXE(data);
     46a:	4640      	mov	r0, r8
     46c:	4302      	orrs	r2, r0
     46e:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     470:	545a      	strb	r2, [r3, r1]
}
     472:	bc04      	pop	{r2}
     474:	4690      	mov	r8, r2
     476:	bdf0      	pop	{r4, r5, r6, r7, pc}
     478:	41004400 	.word	0x41004400
     47c:	c0000001 	.word	0xc0000001
     480:	c0000002 	.word	0xc0000002
     484:	40020000 	.word	0x40020000
     488:	c0020004 	.word	0xc0020004

0000048c <SPI_LMX_CLOCK_init>:
     48c:	4a04      	ldr	r2, [pc, #16]	; (4a0 <SPI_LMX_CLOCK_init+0x14>)
     48e:	6a13      	ldr	r3, [r2, #32]
     490:	2108      	movs	r1, #8
     492:	430b      	orrs	r3, r1
     494:	6213      	str	r3, [r2, #32]
     496:	4a03      	ldr	r2, [pc, #12]	; (4a4 <SPI_LMX_CLOCK_init+0x18>)
     498:	4b03      	ldr	r3, [pc, #12]	; (4a8 <SPI_LMX_CLOCK_init+0x1c>)
     49a:	805a      	strh	r2, [r3, #2]
}
     49c:	4770      	bx	lr
     49e:	46c0      	nop			; (mov r8, r8)
     4a0:	40000400 	.word	0x40000400
     4a4:	00004015 	.word	0x00004015
     4a8:	40000c00 	.word	0x40000c00

000004ac <SPI_LMX_init>:
{
     4ac:	b510      	push	{r4, lr}
	SPI_LMX_CLOCK_init();
     4ae:	4b04      	ldr	r3, [pc, #16]	; (4c0 <SPI_LMX_init+0x14>)
     4b0:	4798      	blx	r3
	spi_m_sync_init(&SPI_LMX, SERCOM1);
     4b2:	4904      	ldr	r1, [pc, #16]	; (4c4 <SPI_LMX_init+0x18>)
     4b4:	4804      	ldr	r0, [pc, #16]	; (4c8 <SPI_LMX_init+0x1c>)
     4b6:	4b05      	ldr	r3, [pc, #20]	; (4cc <SPI_LMX_init+0x20>)
     4b8:	4798      	blx	r3
	SPI_LMX_PORT_init();
     4ba:	4b05      	ldr	r3, [pc, #20]	; (4d0 <SPI_LMX_init+0x24>)
     4bc:	4798      	blx	r3
}
     4be:	bd10      	pop	{r4, pc}
     4c0:	0000048d 	.word	0x0000048d
     4c4:	42000c00 	.word	0x42000c00
     4c8:	20000578 	.word	0x20000578
     4cc:	000009dd 	.word	0x000009dd
     4d0:	000003cd 	.word	0x000003cd

000004d4 <SPI_ZCD_PORT_init>:
{
     4d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4d6:	21c0      	movs	r1, #192	; 0xc0
     4d8:	05c9      	lsls	r1, r1, #23
     4da:	2380      	movs	r3, #128	; 0x80
     4dc:	015b      	lsls	r3, r3, #5
     4de:	614b      	str	r3, [r1, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     4e0:	608b      	str	r3, [r1, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4e2:	4b22      	ldr	r3, [pc, #136]	; (56c <SPI_ZCD_PORT_init+0x98>)
     4e4:	4a22      	ldr	r2, [pc, #136]	; (570 <SPI_ZCD_PORT_init+0x9c>)
     4e6:	629a      	str	r2, [r3, #40]	; 0x28
     4e8:	20c0      	movs	r0, #192	; 0xc0
     4ea:	0600      	lsls	r0, r0, #24
     4ec:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4ee:	264c      	movs	r6, #76	; 0x4c
     4f0:	5d9a      	ldrb	r2, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
     4f2:	2501      	movs	r5, #1
     4f4:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4f6:	2401      	movs	r4, #1
     4f8:	4322      	orrs	r2, r4
     4fa:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4fc:	559a      	strb	r2, [r3, r6]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4fe:	3e16      	subs	r6, #22
     500:	5d9a      	ldrb	r2, [r3, r6]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     502:	270f      	movs	r7, #15
     504:	43ba      	bics	r2, r7
	tmp |= PORT_PMUX_PMUXE(data);
     506:	2702      	movs	r7, #2
     508:	433a      	orrs	r2, r7
     50a:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     50c:	559a      	strb	r2, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     50e:	2280      	movs	r2, #128	; 0x80
     510:	0092      	lsls	r2, r2, #2
     512:	614a      	str	r2, [r1, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     514:	608a      	str	r2, [r1, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     516:	4a17      	ldr	r2, [pc, #92]	; (574 <SPI_ZCD_PORT_init+0xa0>)
     518:	629a      	str	r2, [r3, #40]	; 0x28
     51a:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     51c:	2049      	movs	r0, #73	; 0x49
     51e:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     520:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     522:	4322      	orrs	r2, r4
     524:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     526:	541a      	strb	r2, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     528:	2234      	movs	r2, #52	; 0x34
     52a:	5c98      	ldrb	r0, [r3, r2]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     52c:	3e27      	subs	r6, #39	; 0x27
     52e:	4030      	ands	r0, r6
	tmp |= PORT_PMUX_PMUXO(data);
     530:	2730      	movs	r7, #48	; 0x30
     532:	4338      	orrs	r0, r7
     534:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     536:	5498      	strb	r0, [r3, r2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     538:	2280      	movs	r2, #128	; 0x80
     53a:	0212      	lsls	r2, r2, #8
     53c:	604a      	str	r2, [r1, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     53e:	4a0e      	ldr	r2, [pc, #56]	; (578 <SPI_ZCD_PORT_init+0xa4>)
     540:	629a      	str	r2, [r3, #40]	; 0x28
     542:	4a0e      	ldr	r2, [pc, #56]	; (57c <SPI_ZCD_PORT_init+0xa8>)
     544:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     546:	224f      	movs	r2, #79	; 0x4f
     548:	5c99      	ldrb	r1, [r3, r2]
     54a:	2004      	movs	r0, #4
     54c:	4381      	bics	r1, r0
     54e:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     550:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     552:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     554:	4321      	orrs	r1, r4
     556:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     558:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     55a:	2137      	movs	r1, #55	; 0x37
     55c:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     55e:	4032      	ands	r2, r6
	tmp |= PORT_PMUX_PMUXO(data);
     560:	2020      	movs	r0, #32
     562:	4302      	orrs	r2, r0
     564:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     566:	545a      	strb	r2, [r3, r1]
}
     568:	bdf0      	pop	{r4, r5, r6, r7, pc}
     56a:	46c0      	nop			; (mov r8, r8)
     56c:	41004400 	.word	0x41004400
     570:	40001000 	.word	0x40001000
     574:	40000200 	.word	0x40000200
     578:	40028000 	.word	0x40028000
     57c:	c0020000 	.word	0xc0020000

00000580 <SPI_ZCD_CLOCK_init>:
     580:	4a04      	ldr	r2, [pc, #16]	; (594 <SPI_ZCD_CLOCK_init+0x14>)
     582:	6a13      	ldr	r3, [r2, #32]
     584:	2110      	movs	r1, #16
     586:	430b      	orrs	r3, r1
     588:	6213      	str	r3, [r2, #32]
     58a:	4a03      	ldr	r2, [pc, #12]	; (598 <SPI_ZCD_CLOCK_init+0x18>)
     58c:	4b03      	ldr	r3, [pc, #12]	; (59c <SPI_ZCD_CLOCK_init+0x1c>)
     58e:	805a      	strh	r2, [r3, #2]
}
     590:	4770      	bx	lr
     592:	46c0      	nop			; (mov r8, r8)
     594:	40000400 	.word	0x40000400
     598:	00004016 	.word	0x00004016
     59c:	40000c00 	.word	0x40000c00

000005a0 <SPI_ZCD_init>:
{
     5a0:	b510      	push	{r4, lr}
	SPI_ZCD_CLOCK_init();
     5a2:	4b04      	ldr	r3, [pc, #16]	; (5b4 <SPI_ZCD_init+0x14>)
     5a4:	4798      	blx	r3
	spi_m_sync_init(&SPI_ZCD, SERCOM2);
     5a6:	4904      	ldr	r1, [pc, #16]	; (5b8 <SPI_ZCD_init+0x18>)
     5a8:	4804      	ldr	r0, [pc, #16]	; (5bc <SPI_ZCD_init+0x1c>)
     5aa:	4b05      	ldr	r3, [pc, #20]	; (5c0 <SPI_ZCD_init+0x20>)
     5ac:	4798      	blx	r3
	SPI_ZCD_PORT_init();
     5ae:	4b05      	ldr	r3, [pc, #20]	; (5c4 <SPI_ZCD_init+0x24>)
     5b0:	4798      	blx	r3
}
     5b2:	bd10      	pop	{r4, pc}
     5b4:	00000581 	.word	0x00000581
     5b8:	42001000 	.word	0x42001000
     5bc:	20000604 	.word	0x20000604
     5c0:	000009dd 	.word	0x000009dd
     5c4:	000004d5 	.word	0x000004d5

000005c8 <USART_0_CLOCK_init>:
     5c8:	4a04      	ldr	r2, [pc, #16]	; (5dc <USART_0_CLOCK_init+0x14>)
     5ca:	6a13      	ldr	r3, [r2, #32]
     5cc:	2120      	movs	r1, #32
     5ce:	430b      	orrs	r3, r1
     5d0:	6213      	str	r3, [r2, #32]
     5d2:	4a03      	ldr	r2, [pc, #12]	; (5e0 <USART_0_CLOCK_init+0x18>)
     5d4:	4b03      	ldr	r3, [pc, #12]	; (5e4 <USART_0_CLOCK_init+0x1c>)
     5d6:	805a      	strh	r2, [r3, #2]
}
     5d8:	4770      	bx	lr
     5da:	46c0      	nop			; (mov r8, r8)
     5dc:	40000400 	.word	0x40000400
     5e0:	00004017 	.word	0x00004017
     5e4:	40000c00 	.word	0x40000c00

000005e8 <USART_0_PORT_init>:
{
     5e8:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5ea:	4b0f      	ldr	r3, [pc, #60]	; (628 <USART_0_PORT_init+0x40>)
     5ec:	2256      	movs	r2, #86	; 0x56
     5ee:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     5f0:	2501      	movs	r5, #1
     5f2:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5f4:	2401      	movs	r4, #1
     5f6:	4321      	orrs	r1, r4
     5f8:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5fa:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5fc:	203b      	movs	r0, #59	; 0x3b
     5fe:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     600:	3a47      	subs	r2, #71	; 0x47
     602:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     604:	2202      	movs	r2, #2
     606:	4311      	orrs	r1, r2
     608:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     60a:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     60c:	2157      	movs	r1, #87	; 0x57
     60e:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     610:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     612:	4322      	orrs	r2, r4
     614:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     616:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     618:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     61a:	3948      	subs	r1, #72	; 0x48
     61c:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     61e:	2120      	movs	r1, #32
     620:	430a      	orrs	r2, r1
     622:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     624:	541a      	strb	r2, [r3, r0]
}
     626:	bd30      	pop	{r4, r5, pc}
     628:	41004400 	.word	0x41004400

0000062c <USART_0_init>:
{
     62c:	b510      	push	{r4, lr}
     62e:	b082      	sub	sp, #8
	USART_0_CLOCK_init();
     630:	4b06      	ldr	r3, [pc, #24]	; (64c <USART_0_init+0x20>)
     632:	4798      	blx	r3
	usart_async_init(&USART_0, SERCOM3, USART_0_buffer, USART_0_BUFFER_SIZE, (void *)NULL);
     634:	2300      	movs	r3, #0
     636:	9300      	str	r3, [sp, #0]
     638:	3310      	adds	r3, #16
     63a:	4a05      	ldr	r2, [pc, #20]	; (650 <USART_0_init+0x24>)
     63c:	4905      	ldr	r1, [pc, #20]	; (654 <USART_0_init+0x28>)
     63e:	4806      	ldr	r0, [pc, #24]	; (658 <USART_0_init+0x2c>)
     640:	4c06      	ldr	r4, [pc, #24]	; (65c <USART_0_init+0x30>)
     642:	47a0      	blx	r4
	USART_0_PORT_init();
     644:	4b06      	ldr	r3, [pc, #24]	; (660 <USART_0_init+0x34>)
     646:	4798      	blx	r3
}
     648:	b002      	add	sp, #8
     64a:	bd10      	pop	{r4, pc}
     64c:	000005c9 	.word	0x000005c9
     650:	20000084 	.word	0x20000084
     654:	42001400 	.word	0x42001400
     658:	2000059c 	.word	0x2000059c
     65c:	00000d61 	.word	0x00000d61
     660:	000005e9 	.word	0x000005e9

00000664 <delay_driver_init>:
{
     664:	b510      	push	{r4, lr}
	delay_init(SysTick);
     666:	4802      	ldr	r0, [pc, #8]	; (670 <delay_driver_init+0xc>)
     668:	4b02      	ldr	r3, [pc, #8]	; (674 <delay_driver_init+0x10>)
     66a:	4798      	blx	r3
}
     66c:	bd10      	pop	{r4, pc}
     66e:	46c0      	nop			; (mov r8, r8)
     670:	e000e010 	.word	0xe000e010
     674:	00000951 	.word	0x00000951

00000678 <DAC_0_PORT_init>:

void DAC_0_PORT_init(void)
{
     678:	b510      	push	{r4, lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     67a:	2204      	movs	r2, #4
     67c:	23c0      	movs	r3, #192	; 0xc0
     67e:	05db      	lsls	r3, r3, #23
     680:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     682:	490a      	ldr	r1, [pc, #40]	; (6ac <DAC_0_PORT_init+0x34>)
     684:	4b0a      	ldr	r3, [pc, #40]	; (6b0 <DAC_0_PORT_init+0x38>)
     686:	628b      	str	r3, [r1, #40]	; 0x28
     688:	23c0      	movs	r3, #192	; 0xc0
     68a:	061b      	lsls	r3, r3, #24
     68c:	628b      	str	r3, [r1, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     68e:	2342      	movs	r3, #66	; 0x42
     690:	5cca      	ldrb	r2, [r1, r3]
	tmp &= ~PORT_PINCFG_PMUXEN;
     692:	2001      	movs	r0, #1
     694:	4382      	bics	r2, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     696:	4302      	orrs	r2, r0
     698:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     69a:	54ca      	strb	r2, [r1, r3]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     69c:	2231      	movs	r2, #49	; 0x31
     69e:	5c8b      	ldrb	r3, [r1, r2]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     6a0:	240f      	movs	r4, #15
     6a2:	43a3      	bics	r3, r4
	tmp |= PORT_PMUX_PMUXE(data);
     6a4:	4303      	orrs	r3, r0
     6a6:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6a8:	548b      	strb	r3, [r1, r2]

	// Disable digital pin circuitry
	gpio_set_pin_direction(PA02, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PA02, PINMUX_PA02B_DAC_VOUT);
}
     6aa:	bd10      	pop	{r4, pc}
     6ac:	41004400 	.word	0x41004400
     6b0:	40000004 	.word	0x40000004

000006b4 <DAC_0_CLOCK_init>:
     6b4:	4a04      	ldr	r2, [pc, #16]	; (6c8 <DAC_0_CLOCK_init+0x14>)
     6b6:	6a11      	ldr	r1, [r2, #32]
     6b8:	2380      	movs	r3, #128	; 0x80
     6ba:	02db      	lsls	r3, r3, #11
     6bc:	430b      	orrs	r3, r1
     6be:	6213      	str	r3, [r2, #32]
     6c0:	4a02      	ldr	r2, [pc, #8]	; (6cc <DAC_0_CLOCK_init+0x18>)
     6c2:	4b03      	ldr	r3, [pc, #12]	; (6d0 <DAC_0_CLOCK_init+0x1c>)
     6c4:	805a      	strh	r2, [r3, #2]
void DAC_0_CLOCK_init(void)
{

	_pm_enable_bus_clock(PM_BUS_APBC, DAC);
	_gclk_enable_channel(DAC_GCLK_ID, CONF_GCLK_DAC_SRC);
}
     6c6:	4770      	bx	lr
     6c8:	40000400 	.word	0x40000400
     6cc:	00004021 	.word	0x00004021
     6d0:	40000c00 	.word	0x40000c00

000006d4 <DAC_0_init>:

void DAC_0_init(void)
{
     6d4:	b510      	push	{r4, lr}
	DAC_0_CLOCK_init();
     6d6:	4b04      	ldr	r3, [pc, #16]	; (6e8 <DAC_0_init+0x14>)
     6d8:	4798      	blx	r3
	dac_sync_init(&DAC_0, DAC);
     6da:	4904      	ldr	r1, [pc, #16]	; (6ec <DAC_0_init+0x18>)
     6dc:	4804      	ldr	r0, [pc, #16]	; (6f0 <DAC_0_init+0x1c>)
     6de:	4b05      	ldr	r3, [pc, #20]	; (6f4 <DAC_0_init+0x20>)
     6e0:	4798      	blx	r3
	DAC_0_PORT_init();
     6e2:	4b05      	ldr	r3, [pc, #20]	; (6f8 <DAC_0_init+0x24>)
     6e4:	4798      	blx	r3
}
     6e6:	bd10      	pop	{r4, pc}
     6e8:	000006b5 	.word	0x000006b5
     6ec:	42004800 	.word	0x42004800
     6f0:	20000590 	.word	0x20000590
     6f4:	00000901 	.word	0x00000901
     6f8:	00000679 	.word	0x00000679

000006fc <USB_DEVICE_INSTANCE_PORT_init>:

void USB_DEVICE_INSTANCE_PORT_init(void)
{
     6fc:	b5f0      	push	{r4, r5, r6, r7, lr}
     6fe:	46c6      	mov	lr, r8
     700:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     702:	24c0      	movs	r4, #192	; 0xc0
     704:	05e4      	lsls	r4, r4, #23
     706:	2280      	movs	r2, #128	; 0x80
     708:	0452      	lsls	r2, r2, #17
     70a:	60a2      	str	r2, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     70c:	4b1c      	ldr	r3, [pc, #112]	; (780 <USB_DEVICE_INSTANCE_PORT_init+0x84>)
     70e:	2780      	movs	r7, #128	; 0x80
     710:	05ff      	lsls	r7, r7, #23
     712:	629f      	str	r7, [r3, #40]	; 0x28
     714:	491b      	ldr	r1, [pc, #108]	; (784 <USB_DEVICE_INSTANCE_PORT_init+0x88>)
     716:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     718:	6162      	str	r2, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     71a:	2058      	movs	r0, #88	; 0x58
     71c:	5c19      	ldrb	r1, [r3, r0]
     71e:	2204      	movs	r2, #4
     720:	4690      	mov	r8, r2
     722:	4391      	bics	r1, r2
     724:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     726:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     728:	2601      	movs	r6, #1
     72a:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     72c:	2501      	movs	r5, #1
     72e:	4329      	orrs	r1, r5
     730:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     732:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     734:	381c      	subs	r0, #28
     736:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     738:	320b      	adds	r2, #11
     73a:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     73c:	2206      	movs	r2, #6
     73e:	4694      	mov	ip, r2
     740:	4662      	mov	r2, ip
     742:	4311      	orrs	r1, r2
     744:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     746:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     748:	2180      	movs	r1, #128	; 0x80
     74a:	0489      	lsls	r1, r1, #18
     74c:	60a1      	str	r1, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     74e:	629f      	str	r7, [r3, #40]	; 0x28
     750:	4f0d      	ldr	r7, [pc, #52]	; (788 <USB_DEVICE_INSTANCE_PORT_init+0x8c>)
     752:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     754:	6161      	str	r1, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     756:	2159      	movs	r1, #89	; 0x59
     758:	5c5c      	ldrb	r4, [r3, r1]
     75a:	4642      	mov	r2, r8
     75c:	4394      	bics	r4, r2
     75e:	545c      	strb	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     760:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     762:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     764:	432a      	orrs	r2, r5
     766:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     768:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     76a:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     76c:	394a      	subs	r1, #74	; 0x4a
     76e:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     770:	2160      	movs	r1, #96	; 0x60
     772:	430a      	orrs	r2, r1
     774:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     776:	541a      	strb	r2, [r3, r0]
	                      // <GPIO_PIN_FUNCTION_E"> E
	                      // <GPIO_PIN_FUNCTION_F"> F
	                      // <GPIO_PIN_FUNCTION_G"> G
	                      // <GPIO_PIN_FUNCTION_H"> H
	                      PINMUX_PA25G_USB_DP);
}
     778:	bc04      	pop	{r2}
     77a:	4690      	mov	r8, r2
     77c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     77e:	46c0      	nop			; (mov r8, r8)
     780:	41004400 	.word	0x41004400
     784:	c0000100 	.word	0xc0000100
     788:	c0000200 	.word	0xc0000200

0000078c <USB_DEVICE_INSTANCE_CLOCK_init>:
			PM->APBBMASK.reg |= 1 << peripheral;
     78c:	4b06      	ldr	r3, [pc, #24]	; (7a8 <USB_DEVICE_INSTANCE_CLOCK_init+0x1c>)
     78e:	69da      	ldr	r2, [r3, #28]
     790:	2120      	movs	r1, #32
     792:	430a      	orrs	r2, r1
     794:	61da      	str	r2, [r3, #28]
			PM->AHBMASK.reg |= 1 << peripheral;
     796:	695a      	ldr	r2, [r3, #20]
     798:	3120      	adds	r1, #32
     79a:	430a      	orrs	r2, r1
     79c:	615a      	str	r2, [r3, #20]
     79e:	4a03      	ldr	r2, [pc, #12]	; (7ac <USB_DEVICE_INSTANCE_CLOCK_init+0x20>)
     7a0:	4b03      	ldr	r3, [pc, #12]	; (7b0 <USB_DEVICE_INSTANCE_CLOCK_init+0x24>)
     7a2:	805a      	strh	r2, [r3, #2]
{

	_pm_enable_bus_clock(PM_BUS_APBB, USB);
	_pm_enable_bus_clock(PM_BUS_AHB, USB);
	_gclk_enable_channel(USB_GCLK_ID, CONF_GCLK_USB_SRC);
}
     7a4:	4770      	bx	lr
     7a6:	46c0      	nop			; (mov r8, r8)
     7a8:	40000400 	.word	0x40000400
     7ac:	00004406 	.word	0x00004406
     7b0:	40000c00 	.word	0x40000c00

000007b4 <USB_DEVICE_INSTANCE_init>:

void USB_DEVICE_INSTANCE_init(void)
{
     7b4:	b510      	push	{r4, lr}
	USB_DEVICE_INSTANCE_CLOCK_init();
     7b6:	4b03      	ldr	r3, [pc, #12]	; (7c4 <USB_DEVICE_INSTANCE_init+0x10>)
     7b8:	4798      	blx	r3
	usb_d_init();
     7ba:	4b03      	ldr	r3, [pc, #12]	; (7c8 <USB_DEVICE_INSTANCE_init+0x14>)
     7bc:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
     7be:	4b03      	ldr	r3, [pc, #12]	; (7cc <USB_DEVICE_INSTANCE_init+0x18>)
     7c0:	4798      	blx	r3
}
     7c2:	bd10      	pop	{r4, pc}
     7c4:	0000078d 	.word	0x0000078d
     7c8:	00001049 	.word	0x00001049
     7cc:	000006fd 	.word	0x000006fd

000007d0 <system_init>:

void system_init(void)
{
     7d0:	b5f0      	push	{r4, r5, r6, r7, lr}
     7d2:	46c6      	mov	lr, r8
     7d4:	b500      	push	{lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     7d6:	4b32      	ldr	r3, [pc, #200]	; (8a0 <system_init+0xd0>)
     7d8:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     7da:	22c0      	movs	r2, #192	; 0xc0
     7dc:	05d2      	lsls	r2, r2, #23
     7de:	2308      	movs	r3, #8
     7e0:	6193      	str	r3, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     7e2:	6093      	str	r3, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7e4:	4b2f      	ldr	r3, [pc, #188]	; (8a4 <system_init+0xd4>)
     7e6:	4930      	ldr	r1, [pc, #192]	; (8a8 <system_init+0xd8>)
     7e8:	6299      	str	r1, [r3, #40]	; 0x28
     7ea:	25c0      	movs	r5, #192	; 0xc0
     7ec:	062d      	lsls	r5, r5, #24
     7ee:	629d      	str	r5, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7f0:	2443      	movs	r4, #67	; 0x43
     7f2:	5d19      	ldrb	r1, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     7f4:	2001      	movs	r0, #1
     7f6:	4381      	bics	r1, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7f8:	5519      	strb	r1, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     7fa:	2180      	movs	r1, #128	; 0x80
     7fc:	6151      	str	r1, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     7fe:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     800:	492a      	ldr	r1, [pc, #168]	; (8ac <system_init+0xdc>)
     802:	6299      	str	r1, [r3, #40]	; 0x28
     804:	629d      	str	r5, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     806:	3404      	adds	r4, #4
     808:	5d19      	ldrb	r1, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     80a:	4381      	bics	r1, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     80c:	5519      	strb	r1, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     80e:	2180      	movs	r1, #128	; 0x80
     810:	0309      	lsls	r1, r1, #12
     812:	6191      	str	r1, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     814:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     816:	2180      	movs	r1, #128	; 0x80
     818:	05c9      	lsls	r1, r1, #23
     81a:	6299      	str	r1, [r3, #40]	; 0x28
     81c:	4c24      	ldr	r4, [pc, #144]	; (8b0 <system_init+0xe0>)
     81e:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     820:	2653      	movs	r6, #83	; 0x53
     822:	5d9c      	ldrb	r4, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
     824:	4384      	bics	r4, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     826:	559c      	strb	r4, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     828:	6191      	str	r1, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     82a:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     82c:	6299      	str	r1, [r3, #40]	; 0x28
     82e:	4c21      	ldr	r4, [pc, #132]	; (8b4 <system_init+0xe4>)
     830:	46a0      	mov	r8, r4
     832:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     834:	275e      	movs	r7, #94	; 0x5e
     836:	5ddc      	ldrb	r4, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     838:	4384      	bics	r4, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     83a:	55dc      	strb	r4, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     83c:	2480      	movs	r4, #128	; 0x80
     83e:	00e4      	lsls	r4, r4, #3
     840:	3736      	adds	r7, #54	; 0x36
     842:	51d4      	str	r4, [r2, r7]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     844:	3f0c      	subs	r7, #12
     846:	51d4      	str	r4, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     848:	24a8      	movs	r4, #168	; 0xa8
     84a:	4e1b      	ldr	r6, [pc, #108]	; (8b8 <system_init+0xe8>)
     84c:	511e      	str	r6, [r3, r4]
     84e:	511d      	str	r5, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     850:	25ca      	movs	r5, #202	; 0xca
     852:	46ac      	mov	ip, r5
     854:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     856:	4385      	bics	r5, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     858:	4666      	mov	r6, ip
     85a:	559d      	strb	r5, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     85c:	2598      	movs	r5, #152	; 0x98
     85e:	5151      	str	r1, [r2, r5]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     860:	51d1      	str	r1, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     862:	5119      	str	r1, [r3, r4]
     864:	4642      	mov	r2, r8
     866:	511a      	str	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     868:	21de      	movs	r1, #222	; 0xde
     86a:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     86c:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     86e:	545a      	strb	r2, [r3, r1]
	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);

	EXTERNAL_IRQ_0_init();
     870:	4b12      	ldr	r3, [pc, #72]	; (8bc <system_init+0xec>)
     872:	4798      	blx	r3

	SPI_ADF_init();
     874:	4b12      	ldr	r3, [pc, #72]	; (8c0 <system_init+0xf0>)
     876:	4798      	blx	r3

	SPI_LMX_init();
     878:	4b12      	ldr	r3, [pc, #72]	; (8c4 <system_init+0xf4>)
     87a:	4798      	blx	r3

	SPI_ZCD_init();
     87c:	4b12      	ldr	r3, [pc, #72]	; (8c8 <system_init+0xf8>)
     87e:	4798      	blx	r3
	USART_0_init();
     880:	4b12      	ldr	r3, [pc, #72]	; (8cc <system_init+0xfc>)
     882:	4798      	blx	r3

	delay_driver_init();
     884:	4b12      	ldr	r3, [pc, #72]	; (8d0 <system_init+0x100>)
     886:	4798      	blx	r3

	TIMER_ZCD_init();
     888:	4b12      	ldr	r3, [pc, #72]	; (8d4 <system_init+0x104>)
     88a:	4798      	blx	r3
	TIMER_USB_init();
     88c:	4b12      	ldr	r3, [pc, #72]	; (8d8 <system_init+0x108>)
     88e:	4798      	blx	r3
	DAC_0_init();
     890:	4b12      	ldr	r3, [pc, #72]	; (8dc <system_init+0x10c>)
     892:	4798      	blx	r3

	USB_DEVICE_INSTANCE_init();
     894:	4b12      	ldr	r3, [pc, #72]	; (8e0 <system_init+0x110>)
     896:	4798      	blx	r3
}
     898:	bc04      	pop	{r2}
     89a:	4690      	mov	r8, r2
     89c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     89e:	46c0      	nop			; (mov r8, r8)
     8a0:	00001549 	.word	0x00001549
     8a4:	41004400 	.word	0x41004400
     8a8:	40000008 	.word	0x40000008
     8ac:	40000080 	.word	0x40000080
     8b0:	c0000008 	.word	0xc0000008
     8b4:	c0004000 	.word	0xc0004000
     8b8:	40000400 	.word	0x40000400
     8bc:	00000271 	.word	0x00000271
     8c0:	000003a5 	.word	0x000003a5
     8c4:	000004ad 	.word	0x000004ad
     8c8:	000005a1 	.word	0x000005a1
     8cc:	0000062d 	.word	0x0000062d
     8d0:	00000665 	.word	0x00000665
     8d4:	000001f1 	.word	0x000001f1
     8d8:	00000231 	.word	0x00000231
     8dc:	000006d5 	.word	0x000006d5
     8e0:	000007b5 	.word	0x000007b5

000008e4 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     8e4:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     8e8:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     8ea:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     8ec:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     8f0:	4770      	bx	lr

000008f2 <atomic_leave_critical>:
     8f2:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     8f6:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     8f8:	f383 8810 	msr	PRIMASK, r3
}
     8fc:	4770      	bx	lr
	...

00000900 <dac_sync_init>:

/**
 * \brief Initialize the DAC HAL instance and hardware.
 */
int32_t dac_sync_init(struct dac_sync_descriptor *const descr, void *const hw)
{
     900:	b570      	push	{r4, r5, r6, lr}
     902:	0004      	movs	r4, r0
     904:	000d      	movs	r5, r1
	uint8_t i;
	int32_t rc;

	ASSERT(descr && hw);
     906:	2800      	cmp	r0, #0
     908:	d010      	beq.n	92c <dac_sync_init+0x2c>
     90a:	2900      	cmp	r1, #0
     90c:	d00c      	beq.n	928 <dac_sync_init+0x28>
     90e:	2001      	movs	r0, #1
     910:	2232      	movs	r2, #50	; 0x32
     912:	490c      	ldr	r1, [pc, #48]	; (944 <dac_sync_init+0x44>)
     914:	4b0c      	ldr	r3, [pc, #48]	; (948 <dac_sync_init+0x48>)
     916:	4798      	blx	r3

	rc = _dac_sync_init(&descr->device, hw);
     918:	0029      	movs	r1, r5
     91a:	0020      	movs	r0, r4
     91c:	4b0b      	ldr	r3, [pc, #44]	; (94c <dac_sync_init+0x4c>)
     91e:	4798      	blx	r3
	if (rc) {
     920:	2800      	cmp	r0, #0
     922:	d10e      	bne.n	942 <dac_sync_init+0x42>
     924:	2300      	movs	r3, #0
     926:	e00a      	b.n	93e <dac_sync_init+0x3e>
	ASSERT(descr && hw);
     928:	2000      	movs	r0, #0
     92a:	e7f1      	b.n	910 <dac_sync_init+0x10>
     92c:	2000      	movs	r0, #0
     92e:	e7ef      	b.n	910 <dac_sync_init+0x10>
		return rc;
	}

	for (i = 0; i < CHANNEL_NUM; i++) {
		descr->sel_ch[i].buffer = NULL;
     930:	00da      	lsls	r2, r3, #3
     932:	18a2      	adds	r2, r4, r2
     934:	2100      	movs	r1, #0
     936:	6051      	str	r1, [r2, #4]
		descr->sel_ch[i].length = 0;
     938:	6091      	str	r1, [r2, #8]
	for (i = 0; i < CHANNEL_NUM; i++) {
     93a:	3301      	adds	r3, #1
     93c:	b2db      	uxtb	r3, r3
     93e:	2b00      	cmp	r3, #0
     940:	d0f6      	beq.n	930 <dac_sync_init+0x30>
	}

	return ERR_NONE;
}
     942:	bd70      	pop	{r4, r5, r6, pc}
     944:	000040fc 	.word	0x000040fc
     948:	000013a5 	.word	0x000013a5
     94c:	000015bd 	.word	0x000015bd

00000950 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     950:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
     952:	4b02      	ldr	r3, [pc, #8]	; (95c <delay_init+0xc>)
     954:	6018      	str	r0, [r3, #0]
     956:	4b02      	ldr	r3, [pc, #8]	; (960 <delay_init+0x10>)
     958:	4798      	blx	r3
}
     95a:	bd10      	pop	{r4, pc}
     95c:	20000094 	.word	0x20000094
     960:	00001ec9 	.word	0x00001ec9

00000964 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
     964:	b570      	push	{r4, r5, r6, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
     966:	2501      	movs	r5, #1
     968:	2400      	movs	r4, #0

	while (upper >= lower) {
     96a:	e007      	b.n	97c <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
     96c:	4a0d      	ldr	r2, [pc, #52]	; (9a4 <process_ext_irq+0x40>)
     96e:	58b3      	ldr	r3, [r6, r2]
     970:	2b00      	cmp	r3, #0
     972:	d000      	beq.n	976 <process_ext_irq+0x12>
				ext_irqs[middle].cb();
     974:	4798      	blx	r3
			lower = middle + 1;
		} else {
			upper = middle - 1;
		}
	}
}
     976:	bd70      	pop	{r4, r5, r6, pc}
			upper = middle - 1;
     978:	3a01      	subs	r2, #1
     97a:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
     97c:	42ac      	cmp	r4, r5
     97e:	d8fa      	bhi.n	976 <process_ext_irq+0x12>
		middle = (upper + lower) >> 1;
     980:	192b      	adds	r3, r5, r4
     982:	105b      	asrs	r3, r3, #1
     984:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
     986:	2a00      	cmp	r2, #0
     988:	d1f5      	bne.n	976 <process_ext_irq+0x12>
     98a:	21ff      	movs	r1, #255	; 0xff
     98c:	400b      	ands	r3, r1
		if (ext_irqs[middle].pin == pin) {
     98e:	00de      	lsls	r6, r3, #3
     990:	4904      	ldr	r1, [pc, #16]	; (9a4 <process_ext_irq+0x40>)
     992:	1989      	adds	r1, r1, r6
     994:	6849      	ldr	r1, [r1, #4]
     996:	4281      	cmp	r1, r0
     998:	d0e8      	beq.n	96c <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
     99a:	d2ed      	bcs.n	978 <process_ext_irq+0x14>
			lower = middle + 1;
     99c:	3201      	adds	r2, #1
     99e:	b2d4      	uxtb	r4, r2
     9a0:	e7ec      	b.n	97c <process_ext_irq+0x18>
     9a2:	46c0      	nop			; (mov r8, r8)
     9a4:	20000098 	.word	0x20000098

000009a8 <ext_irq_init>:
{
     9a8:	b510      	push	{r4, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     9aa:	2300      	movs	r3, #0
     9ac:	2b00      	cmp	r3, #0
     9ae:	d003      	beq.n	9b8 <ext_irq_init+0x10>
	return _ext_irq_init(process_ext_irq);
     9b0:	4807      	ldr	r0, [pc, #28]	; (9d0 <ext_irq_init+0x28>)
     9b2:	4b08      	ldr	r3, [pc, #32]	; (9d4 <ext_irq_init+0x2c>)
     9b4:	4798      	blx	r3
}
     9b6:	bd10      	pop	{r4, pc}
		ext_irqs[i].pin = 0xFFFFFFFF;
     9b8:	4a07      	ldr	r2, [pc, #28]	; (9d8 <ext_irq_init+0x30>)
     9ba:	00d9      	lsls	r1, r3, #3
     9bc:	1850      	adds	r0, r2, r1
     9be:	2401      	movs	r4, #1
     9c0:	4264      	negs	r4, r4
     9c2:	6044      	str	r4, [r0, #4]
		ext_irqs[i].cb  = NULL;
     9c4:	2000      	movs	r0, #0
     9c6:	5088      	str	r0, [r1, r2]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     9c8:	3301      	adds	r3, #1
     9ca:	b29b      	uxth	r3, r3
     9cc:	e7ee      	b.n	9ac <ext_irq_init+0x4>
     9ce:	46c0      	nop			; (mov r8, r8)
     9d0:	00000965 	.word	0x00000965
     9d4:	000015e9 	.word	0x000015e9
     9d8:	20000098 	.word	0x20000098

000009dc <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
     9dc:	b570      	push	{r4, r5, r6, lr}
     9de:	0004      	movs	r4, r0
     9e0:	000d      	movs	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
     9e2:	2800      	cmp	r0, #0
     9e4:	d017      	beq.n	a16 <spi_m_sync_init+0x3a>
     9e6:	2900      	cmp	r1, #0
     9e8:	d013      	beq.n	a12 <spi_m_sync_init+0x36>
     9ea:	2001      	movs	r0, #1
     9ec:	2240      	movs	r2, #64	; 0x40
     9ee:	490b      	ldr	r1, [pc, #44]	; (a1c <spi_m_sync_init+0x40>)
     9f0:	4b0b      	ldr	r3, [pc, #44]	; (a20 <spi_m_sync_init+0x44>)
     9f2:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
     9f4:	6065      	str	r5, [r4, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
     9f6:	1d20      	adds	r0, r4, #4
     9f8:	0029      	movs	r1, r5
     9fa:	4b0a      	ldr	r3, [pc, #40]	; (a24 <spi_m_sync_init+0x48>)
     9fc:	4798      	blx	r3

	if (rc < 0) {
     9fe:	2800      	cmp	r0, #0
     a00:	db06      	blt.n	a10 <spi_m_sync_init+0x34>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
     a02:	4b09      	ldr	r3, [pc, #36]	; (a28 <spi_m_sync_init+0x4c>)
     a04:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
     a06:	4b09      	ldr	r3, [pc, #36]	; (a2c <spi_m_sync_init+0x50>)
     a08:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
     a0a:	4b09      	ldr	r3, [pc, #36]	; (a30 <spi_m_sync_init+0x54>)
     a0c:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
     a0e:	2000      	movs	r0, #0
}
     a10:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(spi && hw);
     a12:	2000      	movs	r0, #0
     a14:	e7ea      	b.n	9ec <spi_m_sync_init+0x10>
     a16:	2000      	movs	r0, #0
     a18:	e7e8      	b.n	9ec <spi_m_sync_init+0x10>
     a1a:	46c0      	nop			; (mov r8, r8)
     a1c:	00004118 	.word	0x00004118
     a20:	000013a5 	.word	0x000013a5
     a24:	00001aad 	.word	0x00001aad
     a28:	ffff8000 	.word	0xffff8000
     a2c:	00000ab9 	.word	0x00000ab9
     a30:	00000a7d 	.word	0x00000a7d

00000a34 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
     a34:	b530      	push	{r4, r5, lr}
     a36:	b087      	sub	sp, #28
     a38:	0004      	movs	r4, r0
     a3a:	000d      	movs	r5, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
     a3c:	2800      	cmp	r0, #0
     a3e:	d015      	beq.n	a6c <spi_m_sync_transfer+0x38>
     a40:	2900      	cmp	r1, #0
     a42:	d011      	beq.n	a68 <spi_m_sync_transfer+0x34>
     a44:	2001      	movs	r0, #1
     a46:	22b3      	movs	r2, #179	; 0xb3
     a48:	4909      	ldr	r1, [pc, #36]	; (a70 <spi_m_sync_transfer+0x3c>)
     a4a:	4b0a      	ldr	r3, [pc, #40]	; (a74 <spi_m_sync_transfer+0x40>)
     a4c:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
     a4e:	682b      	ldr	r3, [r5, #0]
     a50:	9303      	str	r3, [sp, #12]
	msg.rxbuf = p_xfer->rxbuf;
     a52:	686b      	ldr	r3, [r5, #4]
     a54:	9304      	str	r3, [sp, #16]
	msg.size  = p_xfer->size;
     a56:	68ab      	ldr	r3, [r5, #8]
     a58:	9301      	str	r3, [sp, #4]
     a5a:	9305      	str	r3, [sp, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
     a5c:	1d20      	adds	r0, r4, #4
     a5e:	a903      	add	r1, sp, #12
     a60:	4b05      	ldr	r3, [pc, #20]	; (a78 <spi_m_sync_transfer+0x44>)
     a62:	4798      	blx	r3
}
     a64:	b007      	add	sp, #28
     a66:	bd30      	pop	{r4, r5, pc}
	ASSERT(spi && p_xfer);
     a68:	2000      	movs	r0, #0
     a6a:	e7ec      	b.n	a46 <spi_m_sync_transfer+0x12>
     a6c:	2000      	movs	r0, #0
     a6e:	e7ea      	b.n	a46 <spi_m_sync_transfer+0x12>
     a70:	00004118 	.word	0x00004118
     a74:	000013a5 	.word	0x000013a5
     a78:	00001cb1 	.word	0x00001cb1

00000a7c <_spi_m_sync_io_write>:
{
     a7c:	b570      	push	{r4, r5, r6, lr}
     a7e:	b084      	sub	sp, #16
     a80:	0004      	movs	r4, r0
     a82:	000e      	movs	r6, r1
     a84:	0015      	movs	r5, r2
	ASSERT(io);
     a86:	1e43      	subs	r3, r0, #1
     a88:	4198      	sbcs	r0, r3
     a8a:	b2c0      	uxtb	r0, r0
     a8c:	22a3      	movs	r2, #163	; 0xa3
     a8e:	4907      	ldr	r1, [pc, #28]	; (aac <_spi_m_sync_io_write+0x30>)
     a90:	4b07      	ldr	r3, [pc, #28]	; (ab0 <_spi_m_sync_io_write+0x34>)
     a92:	4798      	blx	r3
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
     a94:	0020      	movs	r0, r4
     a96:	380c      	subs	r0, #12
	xfer.rxbuf = 0;
     a98:	2300      	movs	r3, #0
     a9a:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
     a9c:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
     a9e:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
     aa0:	a901      	add	r1, sp, #4
     aa2:	4b04      	ldr	r3, [pc, #16]	; (ab4 <_spi_m_sync_io_write+0x38>)
     aa4:	4798      	blx	r3
}
     aa6:	b004      	add	sp, #16
     aa8:	bd70      	pop	{r4, r5, r6, pc}
     aaa:	46c0      	nop			; (mov r8, r8)
     aac:	00004118 	.word	0x00004118
     ab0:	000013a5 	.word	0x000013a5
     ab4:	00000a35 	.word	0x00000a35

00000ab8 <_spi_m_sync_io_read>:
{
     ab8:	b570      	push	{r4, r5, r6, lr}
     aba:	b084      	sub	sp, #16
     abc:	0004      	movs	r4, r0
     abe:	000e      	movs	r6, r1
     ac0:	0015      	movs	r5, r2
	ASSERT(io);
     ac2:	1e43      	subs	r3, r0, #1
     ac4:	4198      	sbcs	r0, r3
     ac6:	b2c0      	uxtb	r0, r0
     ac8:	2287      	movs	r2, #135	; 0x87
     aca:	4907      	ldr	r1, [pc, #28]	; (ae8 <_spi_m_sync_io_read+0x30>)
     acc:	4b07      	ldr	r3, [pc, #28]	; (aec <_spi_m_sync_io_read+0x34>)
     ace:	4798      	blx	r3
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
     ad0:	0020      	movs	r0, r4
     ad2:	380c      	subs	r0, #12
	xfer.rxbuf = buf;
     ad4:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
     ad6:	2300      	movs	r3, #0
     ad8:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
     ada:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
     adc:	a901      	add	r1, sp, #4
     ade:	4b04      	ldr	r3, [pc, #16]	; (af0 <_spi_m_sync_io_read+0x38>)
     ae0:	4798      	blx	r3
}
     ae2:	b004      	add	sp, #16
     ae4:	bd70      	pop	{r4, r5, r6, pc}
     ae6:	46c0      	nop			; (mov r8, r8)
     ae8:	00004118 	.word	0x00004118
     aec:	000013a5 	.word	0x000013a5
     af0:	00000a35 	.word	0x00000a35

00000af4 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     af6:	6806      	ldr	r6, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
     af8:	2e00      	cmp	r6, #0
     afa:	d002      	beq.n	b02 <timer_add_timer_task+0xe>
     afc:	0033      	movs	r3, r6
     afe:	2500      	movs	r5, #0
     b00:	e00c      	b.n	b1c <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
     b02:	4b10      	ldr	r3, [pc, #64]	; (b44 <timer_add_timer_task+0x50>)
     b04:	4798      	blx	r3
		return;
     b06:	e018      	b.n	b3a <timer_add_timer_task+0x46>
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     b08:	689f      	ldr	r7, [r3, #8]
     b0a:	46bc      	mov	ip, r7
     b0c:	4464      	add	r4, ip
     b0e:	1aa4      	subs	r4, r4, r2
     b10:	3401      	adds	r4, #1
		}
		if (time_left >= new_task->interval)
     b12:	688f      	ldr	r7, [r1, #8]
     b14:	42bc      	cmp	r4, r7
     b16:	d20b      	bcs.n	b30 <timer_add_timer_task+0x3c>
			break;
		prev = it;
     b18:	001d      	movs	r5, r3
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     b1a:	681b      	ldr	r3, [r3, #0]
     b1c:	2b00      	cmp	r3, #0
     b1e:	d007      	beq.n	b30 <timer_add_timer_task+0x3c>
		if (it->time_label <= time) {
     b20:	685c      	ldr	r4, [r3, #4]
     b22:	4294      	cmp	r4, r2
     b24:	d8f0      	bhi.n	b08 <timer_add_timer_task+0x14>
			time_left = it->interval - (time - it->time_label);
     b26:	1aa4      	subs	r4, r4, r2
     b28:	689f      	ldr	r7, [r3, #8]
     b2a:	46bc      	mov	ip, r7
     b2c:	4464      	add	r4, ip
     b2e:	e7f0      	b.n	b12 <timer_add_timer_task+0x1e>
	}

	if (it == head) {
     b30:	42b3      	cmp	r3, r6
     b32:	d003      	beq.n	b3c <timer_add_timer_task+0x48>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
     b34:	0028      	movs	r0, r5
     b36:	4b04      	ldr	r3, [pc, #16]	; (b48 <timer_add_timer_task+0x54>)
     b38:	4798      	blx	r3
	}
}
     b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
     b3c:	4b01      	ldr	r3, [pc, #4]	; (b44 <timer_add_timer_task+0x50>)
     b3e:	4798      	blx	r3
     b40:	e7fb      	b.n	b3a <timer_add_timer_task+0x46>
     b42:	46c0      	nop			; (mov r8, r8)
     b44:	000013c5 	.word	0x000013c5
     b48:	000013f1 	.word	0x000013f1

00000b4c <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     b4e:	0005      	movs	r5, r0
     b50:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
     b52:	6903      	ldr	r3, [r0, #16]
     b54:	1c5e      	adds	r6, r3, #1
     b56:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     b58:	7e03      	ldrb	r3, [r0, #24]
     b5a:	07db      	lsls	r3, r3, #31
     b5c:	d402      	bmi.n	b64 <timer_process_counted+0x18>
     b5e:	7e03      	ldrb	r3, [r0, #24]
     b60:	079b      	lsls	r3, r3, #30
     b62:	d50a      	bpl.n	b7a <timer_process_counted+0x2e>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     b64:	7e2b      	ldrb	r3, [r5, #24]
     b66:	2202      	movs	r2, #2
     b68:	4313      	orrs	r3, r2
     b6a:	b2db      	uxtb	r3, r3
     b6c:	762b      	strb	r3, [r5, #24]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
	}
}
     b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     b70:	696f      	ldr	r7, [r5, #20]
		tmp->cb(tmp);
     b72:	68e3      	ldr	r3, [r4, #12]
     b74:	0020      	movs	r0, r4
     b76:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
     b78:	003c      	movs	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
     b7a:	2c00      	cmp	r4, #0
     b7c:	d0f7      	beq.n	b6e <timer_process_counted+0x22>
     b7e:	6863      	ldr	r3, [r4, #4]
     b80:	1af3      	subs	r3, r6, r3
     b82:	68a2      	ldr	r2, [r4, #8]
     b84:	4293      	cmp	r3, r2
     b86:	d3f2      	bcc.n	b6e <timer_process_counted+0x22>
		list_remove_head(&timer->tasks);
     b88:	002f      	movs	r7, r5
     b8a:	3714      	adds	r7, #20
     b8c:	0038      	movs	r0, r7
     b8e:	4b06      	ldr	r3, [pc, #24]	; (ba8 <timer_process_counted+0x5c>)
     b90:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
     b92:	7c23      	ldrb	r3, [r4, #16]
     b94:	2b01      	cmp	r3, #1
     b96:	d1eb      	bne.n	b70 <timer_process_counted+0x24>
			tmp->time_label = time;
     b98:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     b9a:	0032      	movs	r2, r6
     b9c:	0021      	movs	r1, r4
     b9e:	0038      	movs	r0, r7
     ba0:	4b02      	ldr	r3, [pc, #8]	; (bac <timer_process_counted+0x60>)
     ba2:	4798      	blx	r3
     ba4:	e7e4      	b.n	b70 <timer_process_counted+0x24>
     ba6:	46c0      	nop			; (mov r8, r8)
     ba8:	00001439 	.word	0x00001439
     bac:	00000af5 	.word	0x00000af5

00000bb0 <timer_init>:
{
     bb0:	b570      	push	{r4, r5, r6, lr}
     bb2:	0004      	movs	r4, r0
     bb4:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     bb6:	2800      	cmp	r0, #0
     bb8:	d012      	beq.n	be0 <timer_init+0x30>
     bba:	2900      	cmp	r1, #0
     bbc:	d00e      	beq.n	bdc <timer_init+0x2c>
     bbe:	2001      	movs	r0, #1
     bc0:	223b      	movs	r2, #59	; 0x3b
     bc2:	4908      	ldr	r1, [pc, #32]	; (be4 <timer_init+0x34>)
     bc4:	4b08      	ldr	r3, [pc, #32]	; (be8 <timer_init+0x38>)
     bc6:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     bc8:	0029      	movs	r1, r5
     bca:	0020      	movs	r0, r4
     bcc:	4b07      	ldr	r3, [pc, #28]	; (bec <timer_init+0x3c>)
     bce:	4798      	blx	r3
	descr->time                           = 0;
     bd0:	2300      	movs	r3, #0
     bd2:	6123      	str	r3, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     bd4:	4b06      	ldr	r3, [pc, #24]	; (bf0 <timer_init+0x40>)
     bd6:	6023      	str	r3, [r4, #0]
}
     bd8:	2000      	movs	r0, #0
     bda:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
     bdc:	2000      	movs	r0, #0
     bde:	e7ef      	b.n	bc0 <timer_init+0x10>
     be0:	2000      	movs	r0, #0
     be2:	e7ed      	b.n	bc0 <timer_init+0x10>
     be4:	00004134 	.word	0x00004134
     be8:	000013a5 	.word	0x000013a5
     bec:	00001f71 	.word	0x00001f71
     bf0:	00000b4d 	.word	0x00000b4d

00000bf4 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
     bf4:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     bf6:	3808      	subs	r0, #8

	descr->stat = 0;
     bf8:	2300      	movs	r3, #0
     bfa:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.tx_done) {
     bfc:	6a43      	ldr	r3, [r0, #36]	; 0x24
     bfe:	2b00      	cmp	r3, #0
     c00:	d000      	beq.n	c04 <usart_transmission_complete+0x10>
		descr->usart_cb.tx_done(descr);
     c02:	4798      	blx	r3
	}
}
     c04:	bd10      	pop	{r4, pc}

00000c06 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
     c06:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     c08:	3808      	subs	r0, #8

	descr->stat = 0;
     c0a:	2300      	movs	r3, #0
     c0c:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.error) {
     c0e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
     c10:	2b00      	cmp	r3, #0
     c12:	d000      	beq.n	c16 <usart_error+0x10>
		descr->usart_cb.error(descr);
     c14:	4798      	blx	r3
	}
}
     c16:	bd10      	pop	{r4, pc}

00000c18 <usart_fill_rx_buffer>:
{
     c18:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     c1a:	0004      	movs	r4, r0
	ringbuffer_put(&descr->rx, data);
     c1c:	302c      	adds	r0, #44	; 0x2c
     c1e:	4b04      	ldr	r3, [pc, #16]	; (c30 <usart_fill_rx_buffer+0x18>)
     c20:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
     c22:	6a23      	ldr	r3, [r4, #32]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     c24:	3c08      	subs	r4, #8
	if (descr->usart_cb.rx_done) {
     c26:	2b00      	cmp	r3, #0
     c28:	d001      	beq.n	c2e <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
     c2a:	0020      	movs	r0, r4
     c2c:	4798      	blx	r3
}
     c2e:	bd10      	pop	{r4, pc}
     c30:	000014e5 	.word	0x000014e5

00000c34 <usart_async_write>:
{
     c34:	b570      	push	{r4, r5, r6, lr}
     c36:	0004      	movs	r4, r0
     c38:	000e      	movs	r6, r1
     c3a:	0015      	movs	r5, r2
	ASSERT(descr && buf && length);
     c3c:	2800      	cmp	r0, #0
     c3e:	d01d      	beq.n	c7c <usart_async_write+0x48>
     c40:	2900      	cmp	r1, #0
     c42:	d01d      	beq.n	c80 <usart_async_write+0x4c>
     c44:	2a00      	cmp	r2, #0
     c46:	d11d      	bne.n	c84 <usart_async_write+0x50>
     c48:	2000      	movs	r0, #0
     c4a:	223c      	movs	r2, #60	; 0x3c
     c4c:	32ff      	adds	r2, #255	; 0xff
     c4e:	4910      	ldr	r1, [pc, #64]	; (c90 <usart_async_write+0x5c>)
     c50:	4b10      	ldr	r3, [pc, #64]	; (c94 <usart_async_write+0x60>)
     c52:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
     c54:	2344      	movs	r3, #68	; 0x44
     c56:	5ae2      	ldrh	r2, [r4, r3]
     c58:	3308      	adds	r3, #8
     c5a:	5ae3      	ldrh	r3, [r4, r3]
     c5c:	429a      	cmp	r2, r3
     c5e:	d113      	bne.n	c88 <usart_async_write+0x54>
	descr->tx_buffer        = (uint8_t *)buf;
     c60:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
     c62:	234c      	movs	r3, #76	; 0x4c
     c64:	52e5      	strh	r5, [r4, r3]
	descr->tx_por           = 0;
     c66:	2200      	movs	r2, #0
     c68:	3b08      	subs	r3, #8
     c6a:	52e2      	strh	r2, [r4, r3]
	descr->stat             = USART_ASYNC_STATUS_BUSY;
     c6c:	3b43      	subs	r3, #67	; 0x43
     c6e:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
     c70:	0020      	movs	r0, r4
     c72:	3008      	adds	r0, #8
     c74:	4b08      	ldr	r3, [pc, #32]	; (c98 <usart_async_write+0x64>)
     c76:	4798      	blx	r3
	return (int32_t)length;
     c78:	0028      	movs	r0, r5
}
     c7a:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
     c7c:	2000      	movs	r0, #0
     c7e:	e7e4      	b.n	c4a <usart_async_write+0x16>
     c80:	2000      	movs	r0, #0
     c82:	e7e2      	b.n	c4a <usart_async_write+0x16>
     c84:	2001      	movs	r0, #1
     c86:	e7e0      	b.n	c4a <usart_async_write+0x16>
		return ERR_NO_RESOURCE;
     c88:	201c      	movs	r0, #28
     c8a:	4240      	negs	r0, r0
     c8c:	e7f5      	b.n	c7a <usart_async_write+0x46>
     c8e:	46c0      	nop			; (mov r8, r8)
     c90:	0000414c 	.word	0x0000414c
     c94:	000013a5 	.word	0x000013a5
     c98:	00001a89 	.word	0x00001a89

00000c9c <usart_process_byte_sent>:
{
     c9c:	b570      	push	{r4, r5, r6, lr}
     c9e:	0004      	movs	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
     ca0:	0002      	movs	r2, r0
     ca2:	3a08      	subs	r2, #8
     ca4:	2344      	movs	r3, #68	; 0x44
     ca6:	5ad3      	ldrh	r3, [r2, r3]
     ca8:	214c      	movs	r1, #76	; 0x4c
     caa:	5a52      	ldrh	r2, [r2, r1]
     cac:	4293      	cmp	r3, r2
     cae:	d00d      	beq.n	ccc <usart_process_byte_sent+0x30>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
     cb0:	0002      	movs	r2, r0
     cb2:	6c01      	ldr	r1, [r0, #64]	; 0x40
     cb4:	3a08      	subs	r2, #8
     cb6:	1c5d      	adds	r5, r3, #1
     cb8:	2044      	movs	r0, #68	; 0x44
     cba:	5215      	strh	r5, [r2, r0]
     cbc:	5cc9      	ldrb	r1, [r1, r3]
     cbe:	0020      	movs	r0, r4
     cc0:	4b04      	ldr	r3, [pc, #16]	; (cd4 <usart_process_byte_sent+0x38>)
     cc2:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
     cc4:	0020      	movs	r0, r4
     cc6:	4b04      	ldr	r3, [pc, #16]	; (cd8 <usart_process_byte_sent+0x3c>)
     cc8:	4798      	blx	r3
}
     cca:	bd70      	pop	{r4, r5, r6, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
     ccc:	4b03      	ldr	r3, [pc, #12]	; (cdc <usart_process_byte_sent+0x40>)
     cce:	4798      	blx	r3
}
     cd0:	e7fb      	b.n	cca <usart_process_byte_sent+0x2e>
     cd2:	46c0      	nop			; (mov r8, r8)
     cd4:	00001a81 	.word	0x00001a81
     cd8:	00001a89 	.word	0x00001a89
     cdc:	00001a91 	.word	0x00001a91

00000ce0 <usart_async_read>:
{
     ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
     ce2:	b085      	sub	sp, #20
     ce4:	0004      	movs	r4, r0
     ce6:	000d      	movs	r5, r1
     ce8:	0016      	movs	r6, r2
	ASSERT(descr && buf && length);
     cea:	2800      	cmp	r0, #0
     cec:	d017      	beq.n	d1e <usart_async_read+0x3e>
     cee:	2900      	cmp	r1, #0
     cf0:	d017      	beq.n	d22 <usart_async_read+0x42>
     cf2:	2a00      	cmp	r2, #0
     cf4:	d117      	bne.n	d26 <usart_async_read+0x46>
     cf6:	2000      	movs	r0, #0
     cf8:	22ac      	movs	r2, #172	; 0xac
     cfa:	0052      	lsls	r2, r2, #1
     cfc:	4912      	ldr	r1, [pc, #72]	; (d48 <usart_async_read+0x68>)
     cfe:	4b13      	ldr	r3, [pc, #76]	; (d4c <usart_async_read+0x6c>)
     d00:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     d02:	a803      	add	r0, sp, #12
     d04:	4b12      	ldr	r3, [pc, #72]	; (d50 <usart_async_read+0x70>)
     d06:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     d08:	3434      	adds	r4, #52	; 0x34
     d0a:	0020      	movs	r0, r4
     d0c:	9401      	str	r4, [sp, #4]
     d0e:	4b11      	ldr	r3, [pc, #68]	; (d54 <usart_async_read+0x74>)
     d10:	4798      	blx	r3
     d12:	0007      	movs	r7, r0
	CRITICAL_SECTION_LEAVE()
     d14:	a803      	add	r0, sp, #12
     d16:	4b10      	ldr	r3, [pc, #64]	; (d58 <usart_async_read+0x78>)
     d18:	4798      	blx	r3
	uint16_t                       was_read = 0;
     d1a:	2400      	movs	r4, #0
	while ((was_read < num) && (was_read < length)) {
     d1c:	e00b      	b.n	d36 <usart_async_read+0x56>
	ASSERT(descr && buf && length);
     d1e:	2000      	movs	r0, #0
     d20:	e7ea      	b.n	cf8 <usart_async_read+0x18>
     d22:	2000      	movs	r0, #0
     d24:	e7e8      	b.n	cf8 <usart_async_read+0x18>
     d26:	2001      	movs	r0, #1
     d28:	e7e6      	b.n	cf8 <usart_async_read+0x18>
		ringbuffer_get(&descr->rx, &buf[was_read++]);
     d2a:	3401      	adds	r4, #1
     d2c:	b2a4      	uxth	r4, r4
     d2e:	1869      	adds	r1, r5, r1
     d30:	9801      	ldr	r0, [sp, #4]
     d32:	4b0a      	ldr	r3, [pc, #40]	; (d5c <usart_async_read+0x7c>)
     d34:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
     d36:	0021      	movs	r1, r4
     d38:	42a7      	cmp	r7, r4
     d3a:	d901      	bls.n	d40 <usart_async_read+0x60>
     d3c:	42b4      	cmp	r4, r6
     d3e:	d3f4      	bcc.n	d2a <usart_async_read+0x4a>
}
     d40:	0020      	movs	r0, r4
     d42:	b005      	add	sp, #20
     d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d46:	46c0      	nop			; (mov r8, r8)
     d48:	0000414c 	.word	0x0000414c
     d4c:	000013a5 	.word	0x000013a5
     d50:	000008e5 	.word	0x000008e5
     d54:	00001525 	.word	0x00001525
     d58:	000008f3 	.word	0x000008f3
     d5c:	00001499 	.word	0x00001499

00000d60 <usart_async_init>:
{
     d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     d62:	0004      	movs	r4, r0
     d64:	000d      	movs	r5, r1
     d66:	0016      	movs	r6, r2
     d68:	001f      	movs	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     d6a:	2800      	cmp	r0, #0
     d6c:	d026      	beq.n	dbc <usart_async_init+0x5c>
     d6e:	2900      	cmp	r1, #0
     d70:	d026      	beq.n	dc0 <usart_async_init+0x60>
     d72:	2a00      	cmp	r2, #0
     d74:	d026      	beq.n	dc4 <usart_async_init+0x64>
     d76:	2b00      	cmp	r3, #0
     d78:	d126      	bne.n	dc8 <usart_async_init+0x68>
     d7a:	2000      	movs	r0, #0
     d7c:	223a      	movs	r2, #58	; 0x3a
     d7e:	4915      	ldr	r1, [pc, #84]	; (dd4 <usart_async_init+0x74>)
     d80:	4b15      	ldr	r3, [pc, #84]	; (dd8 <usart_async_init+0x78>)
     d82:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
     d84:	0020      	movs	r0, r4
     d86:	3034      	adds	r0, #52	; 0x34
     d88:	003a      	movs	r2, r7
     d8a:	0031      	movs	r1, r6
     d8c:	4b13      	ldr	r3, [pc, #76]	; (ddc <usart_async_init+0x7c>)
     d8e:	4798      	blx	r3
     d90:	2800      	cmp	r0, #0
     d92:	d11b      	bne.n	dcc <usart_async_init+0x6c>
	init_status = _usart_async_init(&descr->device, hw);
     d94:	0020      	movs	r0, r4
     d96:	3008      	adds	r0, #8
     d98:	0029      	movs	r1, r5
     d9a:	4b11      	ldr	r3, [pc, #68]	; (de0 <usart_async_init+0x80>)
     d9c:	4798      	blx	r3
	if (init_status) {
     d9e:	2800      	cmp	r0, #0
     da0:	d10b      	bne.n	dba <usart_async_init+0x5a>
	descr->io.read  = usart_async_read;
     da2:	4b10      	ldr	r3, [pc, #64]	; (de4 <usart_async_init+0x84>)
     da4:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_async_write;
     da6:	4b10      	ldr	r3, [pc, #64]	; (de8 <usart_async_init+0x88>)
     da8:	6023      	str	r3, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
     daa:	4b10      	ldr	r3, [pc, #64]	; (dec <usart_async_init+0x8c>)
     dac:	60a3      	str	r3, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
     dae:	4b10      	ldr	r3, [pc, #64]	; (df0 <usart_async_init+0x90>)
     db0:	60e3      	str	r3, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
     db2:	4b10      	ldr	r3, [pc, #64]	; (df4 <usart_async_init+0x94>)
     db4:	6123      	str	r3, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
     db6:	4b10      	ldr	r3, [pc, #64]	; (df8 <usart_async_init+0x98>)
     db8:	6163      	str	r3, [r4, #20]
}
     dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     dbc:	2000      	movs	r0, #0
     dbe:	e7dd      	b.n	d7c <usart_async_init+0x1c>
     dc0:	2000      	movs	r0, #0
     dc2:	e7db      	b.n	d7c <usart_async_init+0x1c>
     dc4:	2000      	movs	r0, #0
     dc6:	e7d9      	b.n	d7c <usart_async_init+0x1c>
     dc8:	2001      	movs	r0, #1
     dca:	e7d7      	b.n	d7c <usart_async_init+0x1c>
		return ERR_INVALID_ARG;
     dcc:	200d      	movs	r0, #13
     dce:	4240      	negs	r0, r0
     dd0:	e7f3      	b.n	dba <usart_async_init+0x5a>
     dd2:	46c0      	nop			; (mov r8, r8)
     dd4:	0000414c 	.word	0x0000414c
     dd8:	000013a5 	.word	0x000013a5
     ddc:	0000144d 	.word	0x0000144d
     de0:	000019f5 	.word	0x000019f5
     de4:	00000ce1 	.word	0x00000ce1
     de8:	00000c35 	.word	0x00000c35
     dec:	00000c9d 	.word	0x00000c9d
     df0:	00000c19 	.word	0x00000c19
     df4:	00000bf5 	.word	0x00000bf5
     df8:	00000c07 	.word	0x00000c07

00000dfc <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
     dfc:	b510      	push	{r4, lr}
     dfe:	0001      	movs	r1, r0
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     e00:	2000      	movs	r0, #0
     e02:	e001      	b.n	e08 <_usb_d_find_ep+0xc>
     e04:	3001      	adds	r0, #1
     e06:	b240      	sxtb	r0, r0
     e08:	2803      	cmp	r0, #3
     e0a:	dc0f      	bgt.n	e2c <_usb_d_find_ep+0x30>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     e0c:	0142      	lsls	r2, r0, #5
     e0e:	4b09      	ldr	r3, [pc, #36]	; (e34 <_usb_d_find_ep+0x38>)
     e10:	189b      	adds	r3, r3, r2
     e12:	785a      	ldrb	r2, [r3, #1]
     e14:	428a      	cmp	r2, r1
     e16:	d00b      	beq.n	e30 <_usb_d_find_ep+0x34>
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
     e18:	0143      	lsls	r3, r0, #5
     e1a:	4c06      	ldr	r4, [pc, #24]	; (e34 <_usb_d_find_ep+0x38>)
     e1c:	5d1b      	ldrb	r3, [r3, r4]
     e1e:	2b00      	cmp	r3, #0
     e20:	d1f0      	bne.n	e04 <_usb_d_find_ep+0x8>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     e22:	330f      	adds	r3, #15
     e24:	400b      	ands	r3, r1
     e26:	4293      	cmp	r3, r2
     e28:	d1ec      	bne.n	e04 <_usb_d_find_ep+0x8>
     e2a:	e001      	b.n	e30 <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
     e2c:	2001      	movs	r0, #1
     e2e:	4240      	negs	r0, r0
}
     e30:	bd10      	pop	{r4, pc}
     e32:	46c0      	nop			; (mov r8, r8)
     e34:	200000a0 	.word	0x200000a0

00000e38 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
     e38:	2000      	movs	r0, #0
     e3a:	4770      	bx	lr

00000e3c <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
     e3c:	b570      	push	{r4, r5, r6, lr}
     e3e:	0004      	movs	r4, r0
     e40:	000d      	movs	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
     e42:	4b08      	ldr	r3, [pc, #32]	; (e64 <usb_d_cb_trans_more+0x28>)
     e44:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
     e46:	0142      	lsls	r2, r0, #5
     e48:	4b07      	ldr	r3, [pc, #28]	; (e68 <usb_d_cb_trans_more+0x2c>)
     e4a:	189b      	adds	r3, r3, r2
     e4c:	789b      	ldrb	r3, [r3, #2]
     e4e:	2b03      	cmp	r3, #3
     e50:	d001      	beq.n	e56 <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
     e52:	2000      	movs	r0, #0
}
     e54:	bd70      	pop	{r4, r5, r6, pc}
		return ept->callbacks.more(ep, transfered);
     e56:	4b04      	ldr	r3, [pc, #16]	; (e68 <usb_d_cb_trans_more+0x2c>)
     e58:	1898      	adds	r0, r3, r2
     e5a:	6983      	ldr	r3, [r0, #24]
     e5c:	0029      	movs	r1, r5
     e5e:	0020      	movs	r0, r4
     e60:	4798      	blx	r3
     e62:	e7f7      	b.n	e54 <usb_d_cb_trans_more+0x18>
     e64:	00000dfd 	.word	0x00000dfd
     e68:	200000a0 	.word	0x200000a0

00000e6c <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
     e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
     e6e:	b087      	sub	sp, #28
     e70:	0005      	movs	r5, r0
     e72:	000f      	movs	r7, r1
     e74:	9201      	str	r2, [sp, #4]
	int8_t           ep_index = _usb_d_find_ep(ep);
     e76:	4b4a      	ldr	r3, [pc, #296]	; (fa0 <_usb_d_cb_trans_done+0x134>)
     e78:	4798      	blx	r3
     e7a:	0004      	movs	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
     e7c:	0146      	lsls	r6, r0, #5
     e7e:	4a49      	ldr	r2, [pc, #292]	; (fa4 <_usb_d_cb_trans_done+0x138>)
     e80:	1996      	adds	r6, r2, r6

	if (code == USB_TRANS_DONE) {
     e82:	2f00      	cmp	r7, #0
     e84:	d151      	bne.n	f2a <_usb_d_cb_trans_done+0xbe>
		ept->xfer.hdr.status = USB_XFER_DONE;
     e86:	0013      	movs	r3, r2
     e88:	0142      	lsls	r2, r0, #5
     e8a:	2000      	movs	r0, #0
     e8c:	70f0      	strb	r0, [r6, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     e8e:	5cd3      	ldrb	r3, [r2, r3]
     e90:	2b00      	cmp	r3, #0
     e92:	d00e      	beq.n	eb2 <_usb_d_cb_trans_done+0x46>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     e94:	0162      	lsls	r2, r4, #5
     e96:	4b43      	ldr	r3, [pc, #268]	; (fa4 <_usb_d_cb_trans_done+0x138>)
     e98:	189b      	adds	r3, r3, r2
     e9a:	2201      	movs	r2, #1
     e9c:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
     e9e:	0164      	lsls	r4, r4, #5
     ea0:	4b40      	ldr	r3, [pc, #256]	; (fa4 <_usb_d_cb_trans_done+0x138>)
     ea2:	191c      	adds	r4, r3, r4
     ea4:	69e3      	ldr	r3, [r4, #28]
     ea6:	78e1      	ldrb	r1, [r4, #3]
     ea8:	9a01      	ldr	r2, [sp, #4]
     eaa:	0028      	movs	r0, r5
     eac:	4798      	blx	r3
}
     eae:	b007      	add	sp, #28
     eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t state   = ept->xfer.hdr.state;
     eb2:	78b3      	ldrb	r3, [r6, #2]
     eb4:	240c      	movs	r4, #12
     eb6:	5734      	ldrsb	r4, [r6, r4]
	if (state == USB_EP_S_X_DATA) {
     eb8:	2b03      	cmp	r3, #3
     eba:	d008      	beq.n	ece <_usb_d_cb_trans_done+0x62>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
     ebc:	0032      	movs	r2, r6
     ebe:	320c      	adds	r2, #12
     ec0:	7870      	ldrb	r0, [r6, #1]
     ec2:	2100      	movs	r1, #0
     ec4:	69f3      	ldr	r3, [r6, #28]
     ec6:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     ec8:	2302      	movs	r3, #2
     eca:	70b3      	strb	r3, [r6, #2]
     ecc:	e7ef      	b.n	eae <_usb_d_cb_trans_done+0x42>
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
     ece:	7870      	ldrb	r0, [r6, #1]
     ed0:	0032      	movs	r2, r6
     ed2:	320c      	adds	r2, #12
     ed4:	2101      	movs	r1, #1
     ed6:	69f3      	ldr	r3, [r6, #28]
     ed8:	4798      	blx	r3
		if (err) {
     eda:	2800      	cmp	r0, #0
     edc:	d010      	beq.n	f00 <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
     ede:	2305      	movs	r3, #5
     ee0:	70b3      	strb	r3, [r6, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
     ee2:	3b03      	subs	r3, #3
     ee4:	70f3      	strb	r3, [r6, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
     ee6:	2c00      	cmp	r4, #0
     ee8:	db08      	blt.n	efc <_usb_d_cb_trans_done+0x90>
     eea:	7873      	ldrb	r3, [r6, #1]
     eec:	2080      	movs	r0, #128	; 0x80
     eee:	4240      	negs	r0, r0
     ef0:	4318      	orrs	r0, r3
     ef2:	b2c0      	uxtb	r0, r0
     ef4:	2101      	movs	r1, #1
     ef6:	4b2c      	ldr	r3, [pc, #176]	; (fa8 <_usb_d_cb_trans_done+0x13c>)
     ef8:	4798      	blx	r3
     efa:	e7d8      	b.n	eae <_usb_d_cb_trans_done+0x42>
     efc:	7870      	ldrb	r0, [r6, #1]
     efe:	e7f9      	b.n	ef4 <_usb_d_cb_trans_done+0x88>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     f00:	2304      	movs	r3, #4
     f02:	70b3      	strb	r3, [r6, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
     f04:	7871      	ldrb	r1, [r6, #1]
	struct usb_d_transfer trans
     f06:	2200      	movs	r2, #0
     f08:	9203      	str	r2, [sp, #12]
     f0a:	9204      	str	r2, [sp, #16]
     f0c:	2c00      	cmp	r4, #0
     f0e:	db09      	blt.n	f24 <_usb_d_cb_trans_done+0xb8>
     f10:	3b84      	subs	r3, #132	; 0x84
     f12:	430b      	orrs	r3, r1
     f14:	b2da      	uxtb	r2, r3
     f16:	a803      	add	r0, sp, #12
     f18:	7202      	strb	r2, [r0, #8]
     f1a:	2301      	movs	r3, #1
     f1c:	7243      	strb	r3, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
     f1e:	4b23      	ldr	r3, [pc, #140]	; (fac <_usb_d_cb_trans_done+0x140>)
     f20:	4798      	blx	r3
     f22:	e7c4      	b.n	eae <_usb_d_cb_trans_done+0x42>
	struct usb_d_transfer trans
     f24:	220f      	movs	r2, #15
     f26:	400a      	ands	r2, r1
     f28:	e7f5      	b.n	f16 <_usb_d_cb_trans_done+0xaa>
	} else if (code == USB_TRANS_STALL) {
     f2a:	2f01      	cmp	r7, #1
     f2c:	d00a      	beq.n	f44 <_usb_d_cb_trans_done+0xd8>
	} else if (code == USB_TRANS_ABORT) {
     f2e:	2f02      	cmp	r7, #2
     f30:	d01d      	beq.n	f6e <_usb_d_cb_trans_done+0x102>
	} else if (code == USB_TRANS_RESET) {
     f32:	2f03      	cmp	r7, #3
     f34:	d02c      	beq.n	f90 <_usb_d_cb_trans_done+0x124>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
     f36:	0142      	lsls	r2, r0, #5
     f38:	4b1a      	ldr	r3, [pc, #104]	; (fa4 <_usb_d_cb_trans_done+0x138>)
     f3a:	189b      	adds	r3, r3, r2
     f3c:	2206      	movs	r2, #6
     f3e:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
     f40:	70da      	strb	r2, [r3, #3]
     f42:	e7ac      	b.n	e9e <_usb_d_cb_trans_done+0x32>
		ept->xfer.hdr.status = USB_XFER_HALT;
     f44:	4b17      	ldr	r3, [pc, #92]	; (fa4 <_usb_d_cb_trans_done+0x138>)
     f46:	0142      	lsls	r2, r0, #5
     f48:	1899      	adds	r1, r3, r2
     f4a:	2002      	movs	r0, #2
     f4c:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     f4e:	5cd3      	ldrb	r3, [r2, r3]
     f50:	2b00      	cmp	r3, #0
     f52:	d005      	beq.n	f60 <_usb_d_cb_trans_done+0xf4>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
     f54:	0162      	lsls	r2, r4, #5
     f56:	4b13      	ldr	r3, [pc, #76]	; (fa4 <_usb_d_cb_trans_done+0x138>)
     f58:	189b      	adds	r3, r3, r2
     f5a:	2205      	movs	r2, #5
     f5c:	709a      	strb	r2, [r3, #2]
     f5e:	e79e      	b.n	e9e <_usb_d_cb_trans_done+0x32>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     f60:	2202      	movs	r2, #2
     f62:	708a      	strb	r2, [r1, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     f64:	2100      	movs	r1, #0
     f66:	0028      	movs	r0, r5
     f68:	4b0f      	ldr	r3, [pc, #60]	; (fa8 <_usb_d_cb_trans_done+0x13c>)
     f6a:	4798      	blx	r3
     f6c:	e797      	b.n	e9e <_usb_d_cb_trans_done+0x32>
		ept->xfer.hdr.status = USB_XFER_ABORT;
     f6e:	4b0d      	ldr	r3, [pc, #52]	; (fa4 <_usb_d_cb_trans_done+0x138>)
     f70:	0142      	lsls	r2, r0, #5
     f72:	1899      	adds	r1, r3, r2
     f74:	2004      	movs	r0, #4
     f76:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     f78:	5cd3      	ldrb	r3, [r2, r3]
     f7a:	2b00      	cmp	r3, #0
     f7c:	d005      	beq.n	f8a <_usb_d_cb_trans_done+0x11e>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     f7e:	0162      	lsls	r2, r4, #5
     f80:	4b08      	ldr	r3, [pc, #32]	; (fa4 <_usb_d_cb_trans_done+0x138>)
     f82:	189b      	adds	r3, r3, r2
     f84:	2201      	movs	r2, #1
     f86:	709a      	strb	r2, [r3, #2]
     f88:	e789      	b.n	e9e <_usb_d_cb_trans_done+0x32>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     f8a:	2302      	movs	r3, #2
     f8c:	708b      	strb	r3, [r1, #2]
			return;
     f8e:	e78e      	b.n	eae <_usb_d_cb_trans_done+0x42>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
     f90:	0142      	lsls	r2, r0, #5
     f92:	4b04      	ldr	r3, [pc, #16]	; (fa4 <_usb_d_cb_trans_done+0x138>)
     f94:	189b      	adds	r3, r3, r2
     f96:	2200      	movs	r2, #0
     f98:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
     f9a:	3205      	adds	r2, #5
     f9c:	70da      	strb	r2, [r3, #3]
     f9e:	e77e      	b.n	e9e <_usb_d_cb_trans_done+0x32>
     fa0:	00000dfd 	.word	0x00000dfd
     fa4:	200000a0 	.word	0x200000a0
     fa8:	00003005 	.word	0x00003005
     fac:	000031d5 	.word	0x000031d5

00000fb0 <usb_d_cb_trans_setup>:
{
     fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
     fb2:	46c6      	mov	lr, r8
     fb4:	b500      	push	{lr}
     fb6:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     fb8:	4b1f      	ldr	r3, [pc, #124]	; (1038 <usb_d_cb_trans_setup+0x88>)
     fba:	4798      	blx	r3
     fbc:	0006      	movs	r6, r0
	uint8_t *        req      = ept->xfer.req;
     fbe:	0143      	lsls	r3, r0, #5
     fc0:	3308      	adds	r3, #8
     fc2:	4c1e      	ldr	r4, [pc, #120]	; (103c <usb_d_cb_trans_setup+0x8c>)
     fc4:	18e4      	adds	r4, r4, r3
     fc6:	3404      	adds	r4, #4
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
     fc8:	0021      	movs	r1, r4
     fca:	0028      	movs	r0, r5
     fcc:	4b1c      	ldr	r3, [pc, #112]	; (1040 <usb_d_cb_trans_setup+0x90>)
     fce:	4798      	blx	r3
     fd0:	b2c0      	uxtb	r0, r0
	if (n != 8) {
     fd2:	2808      	cmp	r0, #8
     fd4:	d00c      	beq.n	ff0 <usb_d_cb_trans_setup+0x40>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     fd6:	2101      	movs	r1, #1
     fd8:	0028      	movs	r0, r5
     fda:	4c1a      	ldr	r4, [pc, #104]	; (1044 <usb_d_cb_trans_setup+0x94>)
     fdc:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     fde:	2080      	movs	r0, #128	; 0x80
     fe0:	4240      	negs	r0, r0
     fe2:	4328      	orrs	r0, r5
     fe4:	b2c0      	uxtb	r0, r0
     fe6:	2101      	movs	r1, #1
     fe8:	47a0      	blx	r4
}
     fea:	bc04      	pop	{r2}
     fec:	4690      	mov	r8, r2
     fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     ff0:	2100      	movs	r1, #0
     ff2:	0028      	movs	r0, r5
     ff4:	4b13      	ldr	r3, [pc, #76]	; (1044 <usb_d_cb_trans_setup+0x94>)
     ff6:	4698      	mov	r8, r3
     ff8:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
     ffa:	2780      	movs	r7, #128	; 0x80
     ffc:	427f      	negs	r7, r7
     ffe:	432f      	orrs	r7, r5
    1000:	b2ff      	uxtb	r7, r7
    1002:	2100      	movs	r1, #0
    1004:	0038      	movs	r0, r7
    1006:	47c0      	blx	r8
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    1008:	0172      	lsls	r2, r6, #5
    100a:	4b0c      	ldr	r3, [pc, #48]	; (103c <usb_d_cb_trans_setup+0x8c>)
    100c:	189b      	adds	r3, r3, r2
    100e:	2201      	movs	r2, #1
    1010:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    1012:	695b      	ldr	r3, [r3, #20]
    1014:	0021      	movs	r1, r4
    1016:	0028      	movs	r0, r5
    1018:	4798      	blx	r3
    101a:	2800      	cmp	r0, #0
    101c:	d1e5      	bne.n	fea <usb_d_cb_trans_setup+0x3a>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    101e:	0176      	lsls	r6, r6, #5
    1020:	4b06      	ldr	r3, [pc, #24]	; (103c <usb_d_cb_trans_setup+0x8c>)
    1022:	199e      	adds	r6, r3, r6
    1024:	2305      	movs	r3, #5
    1026:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1028:	2101      	movs	r1, #1
    102a:	0028      	movs	r0, r5
    102c:	4c05      	ldr	r4, [pc, #20]	; (1044 <usb_d_cb_trans_setup+0x94>)
    102e:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    1030:	2101      	movs	r1, #1
    1032:	0038      	movs	r0, r7
    1034:	47a0      	blx	r4
    1036:	e7d8      	b.n	fea <usb_d_cb_trans_setup+0x3a>
    1038:	00000dfd 	.word	0x00000dfd
    103c:	200000a0 	.word	0x200000a0
    1040:	0000315d 	.word	0x0000315d
    1044:	00003005 	.word	0x00003005

00001048 <usb_d_init>:

int32_t usb_d_init(void)
{
    1048:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    104a:	4b12      	ldr	r3, [pc, #72]	; (1094 <usb_d_init+0x4c>)
    104c:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    104e:	2800      	cmp	r0, #0
    1050:	db1e      	blt.n	1090 <usb_d_init+0x48>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    1052:	2280      	movs	r2, #128	; 0x80
    1054:	2100      	movs	r1, #0
    1056:	4810      	ldr	r0, [pc, #64]	; (1098 <usb_d_init+0x50>)
    1058:	4b10      	ldr	r3, [pc, #64]	; (109c <usb_d_init+0x54>)
    105a:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    105c:	2200      	movs	r2, #0
    105e:	e00a      	b.n	1076 <usb_d_init+0x2e>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    1060:	0151      	lsls	r1, r2, #5
    1062:	4b0d      	ldr	r3, [pc, #52]	; (1098 <usb_d_init+0x50>)
    1064:	185b      	adds	r3, r3, r1
    1066:	21ff      	movs	r1, #255	; 0xff
    1068:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    106a:	490d      	ldr	r1, [pc, #52]	; (10a0 <usb_d_init+0x58>)
    106c:	6159      	str	r1, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    106e:	6199      	str	r1, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    1070:	61d9      	str	r1, [r3, #28]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    1072:	3201      	adds	r2, #1
    1074:	b2d2      	uxtb	r2, r2
    1076:	2a03      	cmp	r2, #3
    1078:	d9f2      	bls.n	1060 <usb_d_init+0x18>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    107a:	490a      	ldr	r1, [pc, #40]	; (10a4 <usb_d_init+0x5c>)
    107c:	2000      	movs	r0, #0
    107e:	4c0a      	ldr	r4, [pc, #40]	; (10a8 <usb_d_init+0x60>)
    1080:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    1082:	490a      	ldr	r1, [pc, #40]	; (10ac <usb_d_init+0x64>)
    1084:	2001      	movs	r0, #1
    1086:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    1088:	4909      	ldr	r1, [pc, #36]	; (10b0 <usb_d_init+0x68>)
    108a:	2002      	movs	r0, #2
    108c:	47a0      	blx	r4
	return ERR_NONE;
    108e:	2000      	movs	r0, #0
}
    1090:	bd10      	pop	{r4, pc}
    1092:	46c0      	nop			; (mov r8, r8)
    1094:	000029d1 	.word	0x000029d1
    1098:	200000a0 	.word	0x200000a0
    109c:	000040eb 	.word	0x000040eb
    10a0:	00000e39 	.word	0x00000e39
    10a4:	00000fb1 	.word	0x00000fb1
    10a8:	000033d5 	.word	0x000033d5
    10ac:	00000e3d 	.word	0x00000e3d
    10b0:	00000e6d 	.word	0x00000e6d

000010b4 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    10b4:	b510      	push	{r4, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    10b6:	4b01      	ldr	r3, [pc, #4]	; (10bc <usb_d_register_callback+0x8>)
    10b8:	4798      	blx	r3
}
    10ba:	bd10      	pop	{r4, pc}
    10bc:	000033b1 	.word	0x000033b1

000010c0 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    10c0:	b510      	push	{r4, lr}
	return _usb_d_dev_enable();
    10c2:	4b01      	ldr	r3, [pc, #4]	; (10c8 <usb_d_enable+0x8>)
    10c4:	4798      	blx	r3
}
    10c6:	bd10      	pop	{r4, pc}
    10c8:	00002a79 	.word	0x00002a79

000010cc <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    10cc:	b510      	push	{r4, lr}
	_usb_d_dev_attach();
    10ce:	4b01      	ldr	r3, [pc, #4]	; (10d4 <usb_d_attach+0x8>)
    10d0:	4798      	blx	r3
}
    10d2:	bd10      	pop	{r4, pc}
    10d4:	00002ac9 	.word	0x00002ac9

000010d8 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    10d8:	b510      	push	{r4, lr}
	_usb_d_dev_set_address(addr);
    10da:	4b01      	ldr	r3, [pc, #4]	; (10e0 <usb_d_set_address+0x8>)
    10dc:	4798      	blx	r3
}
    10de:	bd10      	pop	{r4, pc}
    10e0:	00002ad9 	.word	0x00002ad9

000010e4 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    10e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    10e6:	0005      	movs	r5, r0
    10e8:	000e      	movs	r6, r1
    10ea:	0017      	movs	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    10ec:	4b0f      	ldr	r3, [pc, #60]	; (112c <usb_d_ep_init+0x48>)
    10ee:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    10f0:	2800      	cmp	r0, #0
    10f2:	da14      	bge.n	111e <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    10f4:	20ff      	movs	r0, #255	; 0xff
    10f6:	4b0d      	ldr	r3, [pc, #52]	; (112c <usb_d_ep_init+0x48>)
    10f8:	4798      	blx	r3
    10fa:	1e04      	subs	r4, r0, #0
		if (ep_index < 0) {
    10fc:	db12      	blt.n	1124 <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    10fe:	003a      	movs	r2, r7
    1100:	0031      	movs	r1, r6
    1102:	0028      	movs	r0, r5
    1104:	4b0a      	ldr	r3, [pc, #40]	; (1130 <usb_d_ep_init+0x4c>)
    1106:	4798      	blx	r3
	if (rc < 0) {
    1108:	2800      	cmp	r0, #0
    110a:	db07      	blt.n	111c <usb_d_ep_init+0x38>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    110c:	4a09      	ldr	r2, [pc, #36]	; (1134 <usb_d_ep_init+0x50>)
    110e:	0164      	lsls	r4, r4, #5
    1110:	1913      	adds	r3, r2, r4
    1112:	705d      	strb	r5, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    1114:	2303      	movs	r3, #3
    1116:	401e      	ands	r6, r3
    1118:	54a6      	strb	r6, [r4, r2]
	return ERR_NONE;
    111a:	2000      	movs	r0, #0
}
    111c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    111e:	2014      	movs	r0, #20
    1120:	4240      	negs	r0, r0
    1122:	e7fb      	b.n	111c <usb_d_ep_init+0x38>
			return -USB_ERR_ALLOC_FAIL;
    1124:	2015      	movs	r0, #21
    1126:	4240      	negs	r0, r0
    1128:	e7f8      	b.n	111c <usb_d_ep_init+0x38>
    112a:	46c0      	nop			; (mov r8, r8)
    112c:	00000dfd 	.word	0x00000dfd
    1130:	00002aed 	.word	0x00002aed
    1134:	200000a0 	.word	0x200000a0

00001138 <usb_d_ep0_init>:
{
    1138:	b510      	push	{r4, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    113a:	b282      	uxth	r2, r0
    113c:	2100      	movs	r1, #0
    113e:	2000      	movs	r0, #0
    1140:	4b01      	ldr	r3, [pc, #4]	; (1148 <usb_d_ep0_init+0x10>)
    1142:	4798      	blx	r3
}
    1144:	bd10      	pop	{r4, pc}
    1146:	46c0      	nop			; (mov r8, r8)
    1148:	000010e5 	.word	0x000010e5

0000114c <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    114c:	b570      	push	{r4, r5, r6, lr}
    114e:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1150:	4b06      	ldr	r3, [pc, #24]	; (116c <usb_d_ep_deinit+0x20>)
    1152:	4798      	blx	r3
    1154:	1e04      	subs	r4, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    1156:	db07      	blt.n	1168 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    1158:	0028      	movs	r0, r5
    115a:	4b05      	ldr	r3, [pc, #20]	; (1170 <usb_d_ep_deinit+0x24>)
    115c:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    115e:	0164      	lsls	r4, r4, #5
    1160:	4b04      	ldr	r3, [pc, #16]	; (1174 <usb_d_ep_deinit+0x28>)
    1162:	191c      	adds	r4, r3, r4
    1164:	23ff      	movs	r3, #255	; 0xff
    1166:	7063      	strb	r3, [r4, #1]
}
    1168:	bd70      	pop	{r4, r5, r6, pc}
    116a:	46c0      	nop			; (mov r8, r8)
    116c:	00000dfd 	.word	0x00000dfd
    1170:	00002c39 	.word	0x00002c39
    1174:	200000a0 	.word	0x200000a0

00001178 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    1178:	b570      	push	{r4, r5, r6, lr}
    117a:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    117c:	4b0f      	ldr	r3, [pc, #60]	; (11bc <usb_d_ep_enable+0x44>)
    117e:	4798      	blx	r3
    1180:	1e04      	subs	r4, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    1182:	db17      	blt.n	11b4 <usb_d_ep_enable+0x3c>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    1184:	0143      	lsls	r3, r0, #5
    1186:	4a0e      	ldr	r2, [pc, #56]	; (11c0 <usb_d_ep_enable+0x48>)
    1188:	5c9b      	ldrb	r3, [r3, r2]
    118a:	2b00      	cmp	r3, #0
    118c:	d10a      	bne.n	11a4 <usb_d_ep_enable+0x2c>
    118e:	2102      	movs	r1, #2
    1190:	0162      	lsls	r2, r4, #5
    1192:	4b0b      	ldr	r3, [pc, #44]	; (11c0 <usb_d_ep_enable+0x48>)
    1194:	189b      	adds	r3, r3, r2
    1196:	7099      	strb	r1, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    1198:	0028      	movs	r0, r5
    119a:	4b0a      	ldr	r3, [pc, #40]	; (11c4 <usb_d_ep_enable+0x4c>)
    119c:	4798      	blx	r3
	if (rc < 0) {
    119e:	2800      	cmp	r0, #0
    11a0:	db02      	blt.n	11a8 <usb_d_ep_enable+0x30>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    11a2:	bd70      	pop	{r4, r5, r6, pc}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    11a4:	2101      	movs	r1, #1
    11a6:	e7f3      	b.n	1190 <usb_d_ep_enable+0x18>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    11a8:	0164      	lsls	r4, r4, #5
    11aa:	4b05      	ldr	r3, [pc, #20]	; (11c0 <usb_d_ep_enable+0x48>)
    11ac:	191c      	adds	r4, r3, r4
    11ae:	2300      	movs	r3, #0
    11b0:	70a3      	strb	r3, [r4, #2]
    11b2:	e7f6      	b.n	11a2 <usb_d_ep_enable+0x2a>
		return -USB_ERR_PARAM;
    11b4:	2012      	movs	r0, #18
    11b6:	4240      	negs	r0, r0
    11b8:	e7f3      	b.n	11a2 <usb_d_ep_enable+0x2a>
    11ba:	46c0      	nop			; (mov r8, r8)
    11bc:	00000dfd 	.word	0x00000dfd
    11c0:	200000a0 	.word	0x200000a0
    11c4:	00002cfd 	.word	0x00002cfd

000011c8 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    11c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    11ca:	46d6      	mov	lr, sl
    11cc:	464f      	mov	r7, r9
    11ce:	4646      	mov	r6, r8
    11d0:	b5c0      	push	{r6, r7, lr}
    11d2:	b086      	sub	sp, #24
    11d4:	0005      	movs	r5, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    11d6:	7a06      	ldrb	r6, [r0, #8]
    11d8:	0030      	movs	r0, r6
    11da:	4b3f      	ldr	r3, [pc, #252]	; (12d8 <usb_d_ep_transfer+0x110>)
    11dc:	4798      	blx	r3
    11de:	0007      	movs	r7, r0
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    11e0:	09f6      	lsrs	r6, r6, #7
    11e2:	7a6b      	ldrb	r3, [r5, #9]
    11e4:	1e5a      	subs	r2, r3, #1
    11e6:	4193      	sbcs	r3, r2
    11e8:	b2dc      	uxtb	r4, r3
	uint32_t              len = xfer->size;
    11ea:	686b      	ldr	r3, [r5, #4]
    11ec:	4698      	mov	r8, r3
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    11ee:	2800      	cmp	r0, #0
    11f0:	db6b      	blt.n	12ca <usb_d_ep_transfer+0x102>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    11f2:	a804      	add	r0, sp, #16
    11f4:	4b39      	ldr	r3, [pc, #228]	; (12dc <usb_d_ep_transfer+0x114>)
    11f6:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    11f8:	017a      	lsls	r2, r7, #5
    11fa:	4b39      	ldr	r3, [pc, #228]	; (12e0 <usb_d_ep_transfer+0x118>)
    11fc:	189b      	adds	r3, r3, r2
    11fe:	789a      	ldrb	r2, [r3, #2]
    1200:	2317      	movs	r3, #23
    1202:	446b      	add	r3, sp
    1204:	701a      	strb	r2, [r3, #0]
	if (state == USB_EP_S_IDLE) {
    1206:	781b      	ldrb	r3, [r3, #0]
    1208:	2b01      	cmp	r3, #1
    120a:	d00e      	beq.n	122a <usb_d_ep_transfer+0x62>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    120c:	a804      	add	r0, sp, #16
    120e:	4b35      	ldr	r3, [pc, #212]	; (12e4 <usb_d_ep_transfer+0x11c>)
    1210:	4798      	blx	r3
		switch (state) {
    1212:	2317      	movs	r3, #23
    1214:	446b      	add	r3, sp
    1216:	781b      	ldrb	r3, [r3, #0]
    1218:	b2db      	uxtb	r3, r3
    121a:	2b05      	cmp	r3, #5
    121c:	d02b      	beq.n	1276 <usb_d_ep_transfer+0xae>
    121e:	2b06      	cmp	r3, #6
    1220:	d056      	beq.n	12d0 <usb_d_ep_transfer+0x108>
    1222:	2b00      	cmp	r3, #0
    1224:	d029      	beq.n	127a <usb_d_ep_transfer+0xb2>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    1226:	2001      	movs	r0, #1
    1228:	e01f      	b.n	126a <usb_d_ep_transfer+0xa2>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    122a:	4b2d      	ldr	r3, [pc, #180]	; (12e0 <usb_d_ep_transfer+0x118>)
    122c:	4699      	mov	r9, r3
    122e:	017b      	lsls	r3, r7, #5
    1230:	469a      	mov	sl, r3
    1232:	464b      	mov	r3, r9
    1234:	4453      	add	r3, sl
    1236:	2203      	movs	r2, #3
    1238:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    123a:	a804      	add	r0, sp, #16
    123c:	4b29      	ldr	r3, [pc, #164]	; (12e4 <usb_d_ep_transfer+0x11c>)
    123e:	4798      	blx	r3
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1240:	464b      	mov	r3, r9
    1242:	4652      	mov	r2, sl
    1244:	5cd3      	ldrb	r3, [r2, r3]
    1246:	2b00      	cmp	r3, #0
    1248:	d01a      	beq.n	1280 <usb_d_ep_transfer+0xb8>
				zlp = false;
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    124a:	7a29      	ldrb	r1, [r5, #8]
    124c:	682b      	ldr	r3, [r5, #0]
    124e:	9301      	str	r3, [sp, #4]
	struct usb_d_transfer trans
    1250:	4643      	mov	r3, r8
    1252:	9302      	str	r3, [sp, #8]
    1254:	2e00      	cmp	r6, #0
    1256:	d035      	beq.n	12c4 <usb_d_ep_transfer+0xfc>
    1258:	2280      	movs	r2, #128	; 0x80
    125a:	4252      	negs	r2, r2
    125c:	430a      	orrs	r2, r1
    125e:	b2d2      	uxtb	r2, r2
    1260:	a801      	add	r0, sp, #4
    1262:	7202      	strb	r2, [r0, #8]
    1264:	7244      	strb	r4, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
    1266:	4b20      	ldr	r3, [pc, #128]	; (12e8 <usb_d_ep_transfer+0x120>)
    1268:	4798      	blx	r3
	return rc;
}
    126a:	b006      	add	sp, #24
    126c:	bc1c      	pop	{r2, r3, r4}
    126e:	4690      	mov	r8, r2
    1270:	4699      	mov	r9, r3
    1272:	46a2      	mov	sl, r4
    1274:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return USB_HALTED;
    1276:	2002      	movs	r0, #2
    1278:	e7f7      	b.n	126a <usb_d_ep_transfer+0xa2>
			return -USB_ERR_FUNC;
    127a:	2013      	movs	r0, #19
    127c:	4240      	negs	r0, r0
    127e:	e7f4      	b.n	126a <usb_d_ep_transfer+0xa2>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    1280:	017b      	lsls	r3, r7, #5
    1282:	4a17      	ldr	r2, [pc, #92]	; (12e0 <usb_d_ep_transfer+0x118>)
    1284:	18d2      	adds	r2, r2, r3
    1286:	7c93      	ldrb	r3, [r2, #18]
    1288:	7cd4      	ldrb	r4, [r2, #19]
    128a:	0224      	lsls	r4, r4, #8
    128c:	191b      	adds	r3, r3, r4
    128e:	b29b      	uxth	r3, r3
		if (req_len == 0) {
    1290:	2b00      	cmp	r3, #0
    1292:	d106      	bne.n	12a2 <usb_d_ep_transfer+0xda>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    1294:	2304      	movs	r3, #4
    1296:	7093      	strb	r3, [r2, #2]
			len                 = 0;
    1298:	2300      	movs	r3, #0
    129a:	4698      	mov	r8, r3
			zlp                 = true;
    129c:	2401      	movs	r4, #1
			dir                 = true;
    129e:	2601      	movs	r6, #1
    12a0:	e7d3      	b.n	124a <usb_d_ep_transfer+0x82>
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    12a2:	017f      	lsls	r7, r7, #5
    12a4:	4a0e      	ldr	r2, [pc, #56]	; (12e0 <usb_d_ep_transfer+0x118>)
    12a6:	19d7      	adds	r7, r2, r7
    12a8:	220c      	movs	r2, #12
    12aa:	56ba      	ldrsb	r2, [r7, r2]
    12ac:	0fd6      	lsrs	r6, r2, #31
			if (len > req_len) {
    12ae:	4598      	cmp	r8, r3
    12b0:	d900      	bls.n	12b4 <usb_d_ep_transfer+0xec>
				len = req_len;
    12b2:	4698      	mov	r8, r3
			if (dir) {
    12b4:	2a00      	cmp	r2, #0
    12b6:	db01      	blt.n	12bc <usb_d_ep_transfer+0xf4>
				zlp = false;
    12b8:	2400      	movs	r4, #0
    12ba:	e7c6      	b.n	124a <usb_d_ep_transfer+0x82>
				zlp = (req_len > len);
    12bc:	4598      	cmp	r8, r3
    12be:	419b      	sbcs	r3, r3
    12c0:	425c      	negs	r4, r3
    12c2:	e7c2      	b.n	124a <usb_d_ep_transfer+0x82>
	struct usb_d_transfer trans
    12c4:	220f      	movs	r2, #15
    12c6:	400a      	ands	r2, r1
    12c8:	e7ca      	b.n	1260 <usb_d_ep_transfer+0x98>
		return -USB_ERR_PARAM;
    12ca:	2012      	movs	r0, #18
    12cc:	4240      	negs	r0, r0
    12ce:	e7cc      	b.n	126a <usb_d_ep_transfer+0xa2>
			return -USB_ERROR;
    12d0:	2010      	movs	r0, #16
    12d2:	4240      	negs	r0, r0
    12d4:	e7c9      	b.n	126a <usb_d_ep_transfer+0xa2>
    12d6:	46c0      	nop			; (mov r8, r8)
    12d8:	00000dfd 	.word	0x00000dfd
    12dc:	000008e5 	.word	0x000008e5
    12e0:	200000a0 	.word	0x200000a0
    12e4:	000008f3 	.word	0x000008f3
    12e8:	000031d5 	.word	0x000031d5

000012ec <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    12ec:	b570      	push	{r4, r5, r6, lr}
    12ee:	0004      	movs	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    12f0:	2900      	cmp	r1, #0
    12f2:	d005      	beq.n	1300 <usb_d_ep_halt+0x14>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    12f4:	2901      	cmp	r1, #1
    12f6:	d024      	beq.n	1342 <usb_d_ep_halt+0x56>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    12f8:	2102      	movs	r1, #2
    12fa:	4b13      	ldr	r3, [pc, #76]	; (1348 <usb_d_ep_halt+0x5c>)
    12fc:	4798      	blx	r3
	}
}
    12fe:	bd70      	pop	{r4, r5, r6, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    1300:	4b12      	ldr	r3, [pc, #72]	; (134c <usb_d_ep_halt+0x60>)
    1302:	4798      	blx	r3
    1304:	1e05      	subs	r5, r0, #0
	if (ep_index < 0) {
    1306:	db19      	blt.n	133c <usb_d_ep_halt+0x50>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    1308:	2102      	movs	r1, #2
    130a:	0020      	movs	r0, r4
    130c:	4b0e      	ldr	r3, [pc, #56]	; (1348 <usb_d_ep_halt+0x5c>)
    130e:	4798      	blx	r3
    1310:	2800      	cmp	r0, #0
    1312:	d0f4      	beq.n	12fe <usb_d_ep_halt+0x12>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1314:	2100      	movs	r1, #0
    1316:	0020      	movs	r0, r4
    1318:	4b0b      	ldr	r3, [pc, #44]	; (1348 <usb_d_ep_halt+0x5c>)
    131a:	4798      	blx	r3
		if (rc < 0) {
    131c:	2800      	cmp	r0, #0
    131e:	dbee      	blt.n	12fe <usb_d_ep_halt+0x12>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    1320:	016d      	lsls	r5, r5, #5
    1322:	4b0b      	ldr	r3, [pc, #44]	; (1350 <usb_d_ep_halt+0x64>)
    1324:	195d      	adds	r5, r3, r5
    1326:	2301      	movs	r3, #1
    1328:	70ab      	strb	r3, [r5, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    132a:	3302      	adds	r3, #2
    132c:	70eb      	strb	r3, [r5, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    132e:	69eb      	ldr	r3, [r5, #28]
    1330:	2200      	movs	r2, #0
    1332:	2103      	movs	r1, #3
    1334:	0020      	movs	r0, r4
    1336:	4798      	blx	r3
	return ERR_NONE;
    1338:	2000      	movs	r0, #0
    133a:	e7e0      	b.n	12fe <usb_d_ep_halt+0x12>
		return -USB_ERR_PARAM;
    133c:	2012      	movs	r0, #18
    133e:	4240      	negs	r0, r0
		return _usb_d_ep_halt_clr(ep);
    1340:	e7dd      	b.n	12fe <usb_d_ep_halt+0x12>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1342:	4b01      	ldr	r3, [pc, #4]	; (1348 <usb_d_ep_halt+0x5c>)
    1344:	4798      	blx	r3
    1346:	e7da      	b.n	12fe <usb_d_ep_halt+0x12>
    1348:	00003005 	.word	0x00003005
    134c:	00000dfd 	.word	0x00000dfd
    1350:	200000a0 	.word	0x200000a0

00001354 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    1354:	b570      	push	{r4, r5, r6, lr}
    1356:	000d      	movs	r5, r1
    1358:	0014      	movs	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    135a:	4b0f      	ldr	r3, [pc, #60]	; (1398 <usb_d_ep_register_callback+0x44>)
    135c:	4798      	blx	r3
    135e:	0003      	movs	r3, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    1360:	2c00      	cmp	r4, #0
    1362:	d008      	beq.n	1376 <usb_d_ep_register_callback+0x22>
	if (ep_index < 0) {
    1364:	2b00      	cmp	r3, #0
    1366:	db05      	blt.n	1374 <usb_d_ep_register_callback+0x20>
		return;
	}
	switch (type) {
    1368:	2d01      	cmp	r5, #1
    136a:	d00b      	beq.n	1384 <usb_d_ep_register_callback+0x30>
    136c:	2d00      	cmp	r5, #0
    136e:	d004      	beq.n	137a <usb_d_ep_register_callback+0x26>
    1370:	2d02      	cmp	r5, #2
    1372:	d00c      	beq.n	138e <usb_d_ep_register_callback+0x3a>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
	}
}
    1374:	bd70      	pop	{r4, r5, r6, pc}
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    1376:	4c09      	ldr	r4, [pc, #36]	; (139c <usb_d_ep_register_callback+0x48>)
    1378:	e7f4      	b.n	1364 <usb_d_ep_register_callback+0x10>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    137a:	0140      	lsls	r0, r0, #5
    137c:	4b08      	ldr	r3, [pc, #32]	; (13a0 <usb_d_ep_register_callback+0x4c>)
    137e:	1818      	adds	r0, r3, r0
    1380:	6144      	str	r4, [r0, #20]
		break;
    1382:	e7f7      	b.n	1374 <usb_d_ep_register_callback+0x20>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    1384:	0140      	lsls	r0, r0, #5
    1386:	4b06      	ldr	r3, [pc, #24]	; (13a0 <usb_d_ep_register_callback+0x4c>)
    1388:	1818      	adds	r0, r3, r0
    138a:	6184      	str	r4, [r0, #24]
		break;
    138c:	e7f2      	b.n	1374 <usb_d_ep_register_callback+0x20>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    138e:	0140      	lsls	r0, r0, #5
    1390:	4b03      	ldr	r3, [pc, #12]	; (13a0 <usb_d_ep_register_callback+0x4c>)
    1392:	1818      	adds	r0, r3, r0
    1394:	61c4      	str	r4, [r0, #28]
		break;
    1396:	e7ed      	b.n	1374 <usb_d_ep_register_callback+0x20>
    1398:	00000dfd 	.word	0x00000dfd
    139c:	00000e39 	.word	0x00000e39
    13a0:	200000a0 	.word	0x200000a0

000013a4 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    13a4:	2800      	cmp	r0, #0
    13a6:	d100      	bne.n	13aa <assert+0x6>
		__asm("BKPT #0");
    13a8:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    13aa:	4770      	bx	lr

000013ac <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    13ac:	6803      	ldr	r3, [r0, #0]
    13ae:	2b00      	cmp	r3, #0
    13b0:	d003      	beq.n	13ba <is_list_element+0xe>
		if (it == element) {
    13b2:	428b      	cmp	r3, r1
    13b4:	d003      	beq.n	13be <is_list_element+0x12>
	for (it = list->head; it; it = it->next) {
    13b6:	681b      	ldr	r3, [r3, #0]
    13b8:	e7f9      	b.n	13ae <is_list_element+0x2>
			return true;
		}
	}

	return false;
    13ba:	2000      	movs	r0, #0
}
    13bc:	4770      	bx	lr
			return true;
    13be:	2001      	movs	r0, #1
    13c0:	e7fc      	b.n	13bc <is_list_element+0x10>
	...

000013c4 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    13c4:	b570      	push	{r4, r5, r6, lr}
    13c6:	0004      	movs	r4, r0
    13c8:	000d      	movs	r5, r1
	ASSERT(!is_list_element(list, element));
    13ca:	4b06      	ldr	r3, [pc, #24]	; (13e4 <list_insert_as_head+0x20>)
    13cc:	4798      	blx	r3
    13ce:	2301      	movs	r3, #1
    13d0:	4058      	eors	r0, r3
    13d2:	b2c0      	uxtb	r0, r0
    13d4:	2239      	movs	r2, #57	; 0x39
    13d6:	4904      	ldr	r1, [pc, #16]	; (13e8 <list_insert_as_head+0x24>)
    13d8:	4b04      	ldr	r3, [pc, #16]	; (13ec <list_insert_as_head+0x28>)
    13da:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    13dc:	6823      	ldr	r3, [r4, #0]
    13de:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    13e0:	6025      	str	r5, [r4, #0]
}
    13e2:	bd70      	pop	{r4, r5, r6, pc}
    13e4:	000013ad 	.word	0x000013ad
    13e8:	0000416c 	.word	0x0000416c
    13ec:	000013a5 	.word	0x000013a5

000013f0 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    13f0:	6803      	ldr	r3, [r0, #0]
    13f2:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    13f4:	6001      	str	r1, [r0, #0]
}
    13f6:	4770      	bx	lr

000013f8 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    13f8:	b570      	push	{r4, r5, r6, lr}
    13fa:	0005      	movs	r5, r0
    13fc:	000e      	movs	r6, r1
	struct list_element *it = list->head;
    13fe:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    1400:	4b0a      	ldr	r3, [pc, #40]	; (142c <list_insert_at_end+0x34>)
    1402:	4798      	blx	r3
    1404:	2301      	movs	r3, #1
    1406:	4058      	eors	r0, r3
    1408:	b2c0      	uxtb	r0, r0
    140a:	224f      	movs	r2, #79	; 0x4f
    140c:	4908      	ldr	r1, [pc, #32]	; (1430 <list_insert_at_end+0x38>)
    140e:	4b09      	ldr	r3, [pc, #36]	; (1434 <list_insert_at_end+0x3c>)
    1410:	4798      	blx	r3

	if (!list->head) {
    1412:	682b      	ldr	r3, [r5, #0]
    1414:	2b00      	cmp	r3, #0
    1416:	d103      	bne.n	1420 <list_insert_at_end+0x28>
		list->head                             = (struct list_element *)element;
    1418:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    141a:	6033      	str	r3, [r6, #0]
		return;
    141c:	e005      	b.n	142a <list_insert_at_end+0x32>
	}

	while (it->next) {
		it = it->next;
    141e:	001c      	movs	r4, r3
	while (it->next) {
    1420:	6823      	ldr	r3, [r4, #0]
    1422:	2b00      	cmp	r3, #0
    1424:	d1fb      	bne.n	141e <list_insert_at_end+0x26>
	}
	it->next                               = (struct list_element *)element;
    1426:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    1428:	6033      	str	r3, [r6, #0]
}
    142a:	bd70      	pop	{r4, r5, r6, pc}
    142c:	000013ad 	.word	0x000013ad
    1430:	0000416c 	.word	0x0000416c
    1434:	000013a5 	.word	0x000013a5

00001438 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    1438:	6803      	ldr	r3, [r0, #0]
    143a:	2b00      	cmp	r3, #0
    143c:	d003      	beq.n	1446 <list_remove_head+0xe>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    143e:	681a      	ldr	r2, [r3, #0]
    1440:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
    1442:	0018      	movs	r0, r3
	}

	return NULL;
}
    1444:	4770      	bx	lr
	return NULL;
    1446:	2000      	movs	r0, #0
    1448:	e7fc      	b.n	1444 <list_remove_head+0xc>
	...

0000144c <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    144c:	b570      	push	{r4, r5, r6, lr}
    144e:	0004      	movs	r4, r0
    1450:	000e      	movs	r6, r1
    1452:	0015      	movs	r5, r2
	ASSERT(rb && buf && size);
    1454:	2800      	cmp	r0, #0
    1456:	d012      	beq.n	147e <ringbuffer_init+0x32>
    1458:	2900      	cmp	r1, #0
    145a:	d012      	beq.n	1482 <ringbuffer_init+0x36>
    145c:	2a00      	cmp	r2, #0
    145e:	d112      	bne.n	1486 <ringbuffer_init+0x3a>
    1460:	2000      	movs	r0, #0
    1462:	2228      	movs	r2, #40	; 0x28
    1464:	490a      	ldr	r1, [pc, #40]	; (1490 <ringbuffer_init+0x44>)
    1466:	4b0b      	ldr	r3, [pc, #44]	; (1494 <ringbuffer_init+0x48>)
    1468:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    146a:	1e6b      	subs	r3, r5, #1
    146c:	422b      	tst	r3, r5
    146e:	d10c      	bne.n	148a <ringbuffer_init+0x3e>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    1470:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    1472:	2300      	movs	r3, #0
    1474:	60a3      	str	r3, [r4, #8]
	rb->write_index = rb->read_index;
    1476:	60e3      	str	r3, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    1478:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    147a:	2000      	movs	r0, #0
}
    147c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    147e:	2000      	movs	r0, #0
    1480:	e7ef      	b.n	1462 <ringbuffer_init+0x16>
    1482:	2000      	movs	r0, #0
    1484:	e7ed      	b.n	1462 <ringbuffer_init+0x16>
    1486:	2001      	movs	r0, #1
    1488:	e7eb      	b.n	1462 <ringbuffer_init+0x16>
		return ERR_INVALID_ARG;
    148a:	200d      	movs	r0, #13
    148c:	4240      	negs	r0, r0
    148e:	e7f5      	b.n	147c <ringbuffer_init+0x30>
    1490:	0000418c 	.word	0x0000418c
    1494:	000013a5 	.word	0x000013a5

00001498 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    1498:	b570      	push	{r4, r5, r6, lr}
    149a:	0004      	movs	r4, r0
    149c:	000d      	movs	r5, r1
	ASSERT(rb && data);
    149e:	2800      	cmp	r0, #0
    14a0:	d016      	beq.n	14d0 <ringbuffer_get+0x38>
    14a2:	2900      	cmp	r1, #0
    14a4:	d012      	beq.n	14cc <ringbuffer_get+0x34>
    14a6:	2001      	movs	r0, #1
    14a8:	2240      	movs	r2, #64	; 0x40
    14aa:	490c      	ldr	r1, [pc, #48]	; (14dc <ringbuffer_get+0x44>)
    14ac:	4b0c      	ldr	r3, [pc, #48]	; (14e0 <ringbuffer_get+0x48>)
    14ae:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    14b0:	68a3      	ldr	r3, [r4, #8]
    14b2:	68e2      	ldr	r2, [r4, #12]
    14b4:	429a      	cmp	r2, r3
    14b6:	d00d      	beq.n	14d4 <ringbuffer_get+0x3c>
		*data = rb->buf[rb->read_index & rb->size];
    14b8:	6862      	ldr	r2, [r4, #4]
    14ba:	4013      	ands	r3, r2
    14bc:	6822      	ldr	r2, [r4, #0]
    14be:	5cd3      	ldrb	r3, [r2, r3]
    14c0:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    14c2:	68a3      	ldr	r3, [r4, #8]
    14c4:	3301      	adds	r3, #1
    14c6:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    14c8:	2000      	movs	r0, #0
	}

	return ERR_NOT_FOUND;
}
    14ca:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && data);
    14cc:	2000      	movs	r0, #0
    14ce:	e7eb      	b.n	14a8 <ringbuffer_get+0x10>
    14d0:	2000      	movs	r0, #0
    14d2:	e7e9      	b.n	14a8 <ringbuffer_get+0x10>
	return ERR_NOT_FOUND;
    14d4:	200a      	movs	r0, #10
    14d6:	4240      	negs	r0, r0
    14d8:	e7f7      	b.n	14ca <ringbuffer_get+0x32>
    14da:	46c0      	nop			; (mov r8, r8)
    14dc:	0000418c 	.word	0x0000418c
    14e0:	000013a5 	.word	0x000013a5

000014e4 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    14e4:	b570      	push	{r4, r5, r6, lr}
    14e6:	0004      	movs	r4, r0
    14e8:	000d      	movs	r5, r1
	ASSERT(rb);
    14ea:	1e43      	subs	r3, r0, #1
    14ec:	4198      	sbcs	r0, r3
    14ee:	b2c0      	uxtb	r0, r0
    14f0:	2251      	movs	r2, #81	; 0x51
    14f2:	490a      	ldr	r1, [pc, #40]	; (151c <ringbuffer_put+0x38>)
    14f4:	4b0a      	ldr	r3, [pc, #40]	; (1520 <ringbuffer_put+0x3c>)
    14f6:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    14f8:	6863      	ldr	r3, [r4, #4]
    14fa:	68e2      	ldr	r2, [r4, #12]
    14fc:	4013      	ands	r3, r2
    14fe:	6822      	ldr	r2, [r4, #0]
    1500:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    1502:	68e3      	ldr	r3, [r4, #12]
    1504:	68a2      	ldr	r2, [r4, #8]
    1506:	1a9a      	subs	r2, r3, r2
    1508:	6861      	ldr	r1, [r4, #4]
    150a:	428a      	cmp	r2, r1
    150c:	d901      	bls.n	1512 <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
    150e:	1a59      	subs	r1, r3, r1
    1510:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
    1512:	3301      	adds	r3, #1
    1514:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    1516:	2000      	movs	r0, #0
    1518:	bd70      	pop	{r4, r5, r6, pc}
    151a:	46c0      	nop			; (mov r8, r8)
    151c:	0000418c 	.word	0x0000418c
    1520:	000013a5 	.word	0x000013a5

00001524 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    1524:	b510      	push	{r4, lr}
    1526:	0004      	movs	r4, r0
	ASSERT(rb);
    1528:	1e43      	subs	r3, r0, #1
    152a:	4198      	sbcs	r0, r3
    152c:	b2c0      	uxtb	r0, r0
    152e:	2267      	movs	r2, #103	; 0x67
    1530:	4903      	ldr	r1, [pc, #12]	; (1540 <ringbuffer_num+0x1c>)
    1532:	4b04      	ldr	r3, [pc, #16]	; (1544 <ringbuffer_num+0x20>)
    1534:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    1536:	68e0      	ldr	r0, [r4, #12]
    1538:	68a3      	ldr	r3, [r4, #8]
    153a:	1ac0      	subs	r0, r0, r3
}
    153c:	bd10      	pop	{r4, pc}
    153e:	46c0      	nop			; (mov r8, r8)
    1540:	0000418c 	.word	0x0000418c
    1544:	000013a5 	.word	0x000013a5

00001548 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1548:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    154a:	4b06      	ldr	r3, [pc, #24]	; (1564 <_init_chip+0x1c>)
    154c:	685a      	ldr	r2, [r3, #4]
    154e:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
    1550:	4b05      	ldr	r3, [pc, #20]	; (1568 <_init_chip+0x20>)
    1552:	4798      	blx	r3
	_sysctrl_init_sources();
    1554:	4b05      	ldr	r3, [pc, #20]	; (156c <_init_chip+0x24>)
    1556:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
    1558:	4b05      	ldr	r3, [pc, #20]	; (1570 <_init_chip+0x28>)
    155a:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    155c:	20ff      	movs	r0, #255	; 0xff
    155e:	4b05      	ldr	r3, [pc, #20]	; (1574 <_init_chip+0x2c>)
    1560:	4798      	blx	r3
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
    1562:	bd10      	pop	{r4, pc}
    1564:	41004000 	.word	0x41004000
    1568:	00001805 	.word	0x00001805
    156c:	00001dc5 	.word	0x00001dc5
    1570:	00001e21 	.word	0x00001e21
    1574:	00001731 	.word	0x00001731

00001578 <_dac_init>:
typedef uint8_t  hri_dac_intflag_reg_t;
typedef uint8_t  hri_dac_status_reg_t;

static inline void hri_dac_wait_for_sync(const void *const hw)
{
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    1578:	79c3      	ldrb	r3, [r0, #7]
    157a:	09db      	lsrs	r3, r3, #7
    157c:	d1fc      	bne.n	1578 <_dac_init>
    157e:	79c3      	ldrb	r3, [r0, #7]
    1580:	09db      	lsrs	r3, r3, #7
    1582:	d1fc      	bne.n	157e <_dac_init+0x6>

static inline hri_dac_ctrla_reg_t hri_dac_get_CTRLA_reg(const void *const hw, hri_dac_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_dac_wait_for_sync(hw);
	tmp = ((Dac *)hw)->CTRLA.reg;
    1584:	7803      	ldrb	r3, [r0, #0]
 * param[in] hw The pointer to DAC hardware instance
 */
static int32_t _dac_init(void *const hw)
{
	hri_dac_wait_for_sync(hw);
	if (hri_dac_get_CTRLA_reg(hw, DAC_CTRLA_ENABLE)) {
    1586:	079b      	lsls	r3, r3, #30
    1588:	d507      	bpl.n	159a <_dac_init+0x22>
}

static inline void hri_dac_write_CTRLA_reg(const void *const hw, hri_dac_ctrla_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->CTRLA.reg = data;
    158a:	2300      	movs	r3, #0
    158c:	7003      	strb	r3, [r0, #0]
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    158e:	79c3      	ldrb	r3, [r0, #7]
    1590:	09db      	lsrs	r3, r3, #7
    1592:	d1fc      	bne.n	158e <_dac_init+0x16>
    1594:	79c3      	ldrb	r3, [r0, #7]
    1596:	09db      	lsrs	r3, r3, #7
    1598:	d1fc      	bne.n	1594 <_dac_init+0x1c>
	((Dac *)hw)->CTRLA.reg = data;
    159a:	2301      	movs	r3, #1
    159c:	7003      	strb	r3, [r0, #0]
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    159e:	79c3      	ldrb	r3, [r0, #7]
    15a0:	09db      	lsrs	r3, r3, #7
    15a2:	d1fc      	bne.n	159e <_dac_init+0x26>
    15a4:	79c3      	ldrb	r3, [r0, #7]
    15a6:	09db      	lsrs	r3, r3, #7
    15a8:	d1fc      	bne.n	15a4 <_dac_init+0x2c>
}

static inline void hri_dac_write_EVCTRL_reg(const void *const hw, hri_dac_evctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->EVCTRL.reg = data;
    15aa:	7083      	strb	r3, [r0, #2]
	((Dac *)hw)->CTRLB.reg = data;
    15ac:	2241      	movs	r2, #65	; 0x41
    15ae:	7042      	strb	r2, [r0, #1]
	((Dac *)hw)->CTRLA.reg = data;
    15b0:	7003      	strb	r3, [r0, #0]
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    15b2:	79c3      	ldrb	r3, [r0, #7]
    15b4:	09db      	lsrs	r3, r3, #7
    15b6:	d1fc      	bne.n	15b2 <_dac_init+0x3a>

	hri_dac_write_EVCTRL_reg(hw, _dac.ev_ctrl);
	hri_dac_write_CTRLB_reg(hw, _dac.ctrlb);
	hri_dac_write_CTRLA_reg(hw, _dac.ctrla);
	return ERR_NONE;
}
    15b8:	2000      	movs	r0, #0
    15ba:	4770      	bx	lr

000015bc <_dac_sync_init>:
{
    15bc:	b570      	push	{r4, r5, r6, lr}
    15be:	0005      	movs	r5, r0
    15c0:	000c      	movs	r4, r1
	ASSERT(device);
    15c2:	1e43      	subs	r3, r0, #1
    15c4:	4198      	sbcs	r0, r3
    15c6:	b2c0      	uxtb	r0, r0
    15c8:	2249      	movs	r2, #73	; 0x49
    15ca:	4904      	ldr	r1, [pc, #16]	; (15dc <_dac_sync_init+0x20>)
    15cc:	4b04      	ldr	r3, [pc, #16]	; (15e0 <_dac_sync_init+0x24>)
    15ce:	4798      	blx	r3
	device->hw = hw;
    15d0:	602c      	str	r4, [r5, #0]
	return _dac_init(device->hw);
    15d2:	0020      	movs	r0, r4
    15d4:	4b03      	ldr	r3, [pc, #12]	; (15e4 <_dac_sync_init+0x28>)
    15d6:	4798      	blx	r3
}
    15d8:	bd70      	pop	{r4, r5, r6, pc}
    15da:	46c0      	nop			; (mov r8, r8)
    15dc:	000041b0 	.word	0x000041b0
    15e0:	000013a5 	.word	0x000013a5
    15e4:	00001579 	.word	0x00001579

000015e8 <_ext_irq_init>:
typedef uint8_t  hri_eic_nmiflag_reg_t;
typedef uint8_t  hri_eic_status_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw)
{
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    15e8:	4b20      	ldr	r3, [pc, #128]	; (166c <_ext_irq_init+0x84>)
    15ea:	785b      	ldrb	r3, [r3, #1]
    15ec:	09db      	lsrs	r3, r3, #7
    15ee:	d1fb      	bne.n	15e8 <_ext_irq_init>
    15f0:	4b1e      	ldr	r3, [pc, #120]	; (166c <_ext_irq_init+0x84>)
    15f2:	785b      	ldrb	r3, [r3, #1]
    15f4:	09db      	lsrs	r3, r3, #7
    15f6:	d1fb      	bne.n	15f0 <_ext_irq_init+0x8>

static inline hri_eic_ctrl_reg_t hri_eic_get_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw);
	tmp = ((Eic *)hw)->CTRL.reg;
    15f8:	4b1c      	ldr	r3, [pc, #112]	; (166c <_ext_irq_init+0x84>)
    15fa:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC);
	if (hri_eic_get_CTRL_reg(EIC, EIC_CTRL_ENABLE)) {
    15fc:	079b      	lsls	r3, r3, #30
    15fe:	d50a      	bpl.n	1616 <_ext_irq_init+0x2e>
}

static inline void hri_eic_write_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRL.reg = data;
    1600:	2200      	movs	r2, #0
    1602:	4b1a      	ldr	r3, [pc, #104]	; (166c <_ext_irq_init+0x84>)
    1604:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    1606:	4b19      	ldr	r3, [pc, #100]	; (166c <_ext_irq_init+0x84>)
    1608:	785b      	ldrb	r3, [r3, #1]
    160a:	09db      	lsrs	r3, r3, #7
    160c:	d1fb      	bne.n	1606 <_ext_irq_init+0x1e>
    160e:	4b17      	ldr	r3, [pc, #92]	; (166c <_ext_irq_init+0x84>)
    1610:	785b      	ldrb	r3, [r3, #1]
    1612:	09db      	lsrs	r3, r3, #7
    1614:	d1fb      	bne.n	160e <_ext_irq_init+0x26>
	((Eic *)hw)->CTRL.reg = data;
    1616:	2201      	movs	r2, #1
    1618:	4b14      	ldr	r3, [pc, #80]	; (166c <_ext_irq_init+0x84>)
    161a:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    161c:	4b13      	ldr	r3, [pc, #76]	; (166c <_ext_irq_init+0x84>)
    161e:	785b      	ldrb	r3, [r3, #1]
    1620:	09db      	lsrs	r3, r3, #7
    1622:	d1fb      	bne.n	161c <_ext_irq_init+0x34>
    1624:	4b11      	ldr	r3, [pc, #68]	; (166c <_ext_irq_init+0x84>)
    1626:	785b      	ldrb	r3, [r3, #1]
    1628:	09db      	lsrs	r3, r3, #7
    162a:	d1fb      	bne.n	1624 <_ext_irq_init+0x3c>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    162c:	4b0f      	ldr	r3, [pc, #60]	; (166c <_ext_irq_init+0x84>)
    162e:	2200      	movs	r2, #0
    1630:	709a      	strb	r2, [r3, #2]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    1632:	605a      	str	r2, [r3, #4]
}

static inline void hri_eic_write_WAKEUP_reg(const void *const hw, hri_eic_wakeup_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->WAKEUP.reg = data;
    1634:	615a      	str	r2, [r3, #20]
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    1636:	619a      	str	r2, [r3, #24]
    1638:	61da      	str	r2, [r3, #28]
	((Eic *)hw)->CTRL.reg |= EIC_CTRL_ENABLE;
    163a:	781a      	ldrb	r2, [r3, #0]
    163c:	2102      	movs	r1, #2
    163e:	430a      	orrs	r2, r1
    1640:	b2d2      	uxtb	r2, r2
    1642:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    1644:	4b09      	ldr	r3, [pc, #36]	; (166c <_ext_irq_init+0x84>)
    1646:	785b      	ldrb	r3, [r3, #1]
    1648:	09db      	lsrs	r3, r3, #7
    164a:	d1fb      	bne.n	1644 <_ext_irq_init+0x5c>
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    164c:	4b08      	ldr	r3, [pc, #32]	; (1670 <_ext_irq_init+0x88>)
    164e:	2210      	movs	r2, #16
    1650:	2180      	movs	r1, #128	; 0x80
    1652:	505a      	str	r2, [r3, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    1654:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1658:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    165c:	3101      	adds	r1, #1
    165e:	31ff      	adds	r1, #255	; 0xff
    1660:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1662:	601a      	str	r2, [r3, #0]

	NVIC_DisableIRQ(EIC_IRQn);
	NVIC_ClearPendingIRQ(EIC_IRQn);
	NVIC_EnableIRQ(EIC_IRQn);

	callback = cb;
    1664:	4b03      	ldr	r3, [pc, #12]	; (1674 <_ext_irq_init+0x8c>)
    1666:	6018      	str	r0, [r3, #0]

	return ERR_NONE;
}
    1668:	2000      	movs	r0, #0
    166a:	4770      	bx	lr
    166c:	40001800 	.word	0x40001800
    1670:	e000e100 	.word	0xe000e100
    1674:	20000120 	.word	0x20000120

00001678 <EIC_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_Handler(void)
{
    1678:	b570      	push	{r4, r5, r6, lr}
    167a:	b082      	sub	sp, #8
	return ((Eic *)hw)->INTFLAG.reg;
    167c:	4b26      	ldr	r3, [pc, #152]	; (1718 <EIC_Handler+0xa0>)
    167e:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
    1680:	68d9      	ldr	r1, [r3, #12]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
    1682:	400a      	ands	r2, r1
    1684:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    1686:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    1688:	611a      	str	r2, [r3, #16]

	ASSERT(callback);
    168a:	4b24      	ldr	r3, [pc, #144]	; (171c <EIC_Handler+0xa4>)
    168c:	6818      	ldr	r0, [r3, #0]
    168e:	1e43      	subs	r3, r0, #1
    1690:	4198      	sbcs	r0, r3
    1692:	b2c0      	uxtb	r0, r0
    1694:	22d2      	movs	r2, #210	; 0xd2
    1696:	4922      	ldr	r1, [pc, #136]	; (1720 <EIC_Handler+0xa8>)
    1698:	4b22      	ldr	r3, [pc, #136]	; (1724 <EIC_Handler+0xac>)
    169a:	4798      	blx	r3
	uint32_t          pin = INVALID_PIN_NUMBER;
    169c:	2501      	movs	r5, #1
    169e:	426d      	negs	r5, r5

	while (flags) {
    16a0:	e02e      	b.n	1700 <EIC_Handler+0x88>
					break;
				}
				if (_map[middle].extint < pos) {
					lower = middle + 1;
				} else {
					upper = middle - 1;
    16a2:	3901      	subs	r1, #1
    16a4:	b2ce      	uxtb	r6, r1
			while (upper >= lower) {
    16a6:	42b0      	cmp	r0, r6
    16a8:	d80e      	bhi.n	16c8 <EIC_Handler+0x50>
				middle = (upper + lower) >> 1;
    16aa:	1832      	adds	r2, r6, r0
    16ac:	1052      	asrs	r2, r2, #1
    16ae:	b2d1      	uxtb	r1, r2
				if (_map[middle].extint == pos) {
    16b0:	23ff      	movs	r3, #255	; 0xff
    16b2:	4013      	ands	r3, r2
    16b4:	00db      	lsls	r3, r3, #3
    16b6:	4a1c      	ldr	r2, [pc, #112]	; (1728 <EIC_Handler+0xb0>)
    16b8:	5c9b      	ldrb	r3, [r3, r2]
    16ba:	42a3      	cmp	r3, r4
    16bc:	d003      	beq.n	16c6 <EIC_Handler+0x4e>
				if (_map[middle].extint < pos) {
    16be:	daf0      	bge.n	16a2 <EIC_Handler+0x2a>
					lower = middle + 1;
    16c0:	3101      	adds	r1, #1
    16c2:	b2c8      	uxtb	r0, r1
    16c4:	e7ef      	b.n	16a6 <EIC_Handler+0x2e>
					pin = _map[middle].pin;
    16c6:	250e      	movs	r5, #14
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    16c8:	1c6b      	adds	r3, r5, #1
    16ca:	d003      	beq.n	16d4 <EIC_Handler+0x5c>
				callback(pin);
    16cc:	4b13      	ldr	r3, [pc, #76]	; (171c <EIC_Handler+0xa4>)
    16ce:	681b      	ldr	r3, [r3, #0]
    16d0:	0028      	movs	r0, r5
    16d2:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    16d4:	2201      	movs	r2, #1
    16d6:	40a2      	lsls	r2, r4
    16d8:	9b01      	ldr	r3, [sp, #4]
    16da:	4393      	bics	r3, r2
    16dc:	9301      	str	r3, [sp, #4]
			pos = ffs(flags) - 1;
    16de:	9801      	ldr	r0, [sp, #4]
    16e0:	4b12      	ldr	r3, [pc, #72]	; (172c <EIC_Handler+0xb4>)
    16e2:	4798      	blx	r3
    16e4:	3801      	subs	r0, #1
    16e6:	b244      	sxtb	r4, r0
		while (-1 != pos) {
    16e8:	1c63      	adds	r3, r4, #1
    16ea:	d002      	beq.n	16f2 <EIC_Handler+0x7a>
    16ec:	2601      	movs	r6, #1
    16ee:	2000      	movs	r0, #0
    16f0:	e7d9      	b.n	16a6 <EIC_Handler+0x2e>
	return ((Eic *)hw)->INTFLAG.reg;
    16f2:	4b09      	ldr	r3, [pc, #36]	; (1718 <EIC_Handler+0xa0>)
    16f4:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
    16f6:	68d9      	ldr	r1, [r3, #12]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
    16f8:	400a      	ands	r2, r1
    16fa:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    16fc:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    16fe:	611a      	str	r2, [r3, #16]
	while (flags) {
    1700:	9b01      	ldr	r3, [sp, #4]
    1702:	2b00      	cmp	r3, #0
    1704:	d005      	beq.n	1712 <EIC_Handler+0x9a>
		pos = ffs(flags) - 1;
    1706:	9801      	ldr	r0, [sp, #4]
    1708:	4b08      	ldr	r3, [pc, #32]	; (172c <EIC_Handler+0xb4>)
    170a:	4798      	blx	r3
    170c:	3801      	subs	r0, #1
    170e:	b244      	sxtb	r4, r0
		while (-1 != pos) {
    1710:	e7ea      	b.n	16e8 <EIC_Handler+0x70>
	}
}
    1712:	b002      	add	sp, #8
    1714:	bd70      	pop	{r4, r5, r6, pc}
    1716:	46c0      	nop			; (mov r8, r8)
    1718:	40001800 	.word	0x40001800
    171c:	20000120 	.word	0x20000120
    1720:	000041d0 	.word	0x000041d0
    1724:	000013a5 	.word	0x000013a5
    1728:	000041c8 	.word	0x000041c8
    172c:	0000403d 	.word	0x0000403d

00001730 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1730:	07c3      	lsls	r3, r0, #31
    1732:	d509      	bpl.n	1748 <_gclk_init_generators_by_fref+0x18>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
    1734:	4b27      	ldr	r3, [pc, #156]	; (17d4 <_gclk_init_generators_by_fref+0xa4>)
    1736:	2280      	movs	r2, #128	; 0x80
    1738:	0052      	lsls	r2, r2, #1
    173a:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    173c:	4a26      	ldr	r2, [pc, #152]	; (17d8 <_gclk_init_generators_by_fref+0xa8>)
    173e:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    1740:	4b24      	ldr	r3, [pc, #144]	; (17d4 <_gclk_init_generators_by_fref+0xa4>)
    1742:	785b      	ldrb	r3, [r3, #1]
    1744:	09db      	lsrs	r3, r3, #7
    1746:	d1fb      	bne.n	1740 <_gclk_init_generators_by_fref+0x10>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SRC | GCLK_GENCTRL_ID(0));
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    1748:	0783      	lsls	r3, r0, #30
    174a:	d508      	bpl.n	175e <_gclk_init_generators_by_fref+0x2e>
	((Gclk *)hw)->GENDIV.reg = data;
    174c:	4b21      	ldr	r3, [pc, #132]	; (17d4 <_gclk_init_generators_by_fref+0xa4>)
    174e:	4a23      	ldr	r2, [pc, #140]	; (17dc <_gclk_init_generators_by_fref+0xac>)
    1750:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    1752:	4a23      	ldr	r2, [pc, #140]	; (17e0 <_gclk_init_generators_by_fref+0xb0>)
    1754:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    1756:	4b1f      	ldr	r3, [pc, #124]	; (17d4 <_gclk_init_generators_by_fref+0xa4>)
    1758:	785b      	ldrb	r3, [r3, #1]
    175a:	09db      	lsrs	r3, r3, #7
    175c:	d1fb      	bne.n	1756 <_gclk_init_generators_by_fref+0x26>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SRC | GCLK_GENCTRL_ID(1));
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    175e:	0743      	lsls	r3, r0, #29
    1760:	d508      	bpl.n	1774 <_gclk_init_generators_by_fref+0x44>
	((Gclk *)hw)->GENDIV.reg = data;
    1762:	4b1c      	ldr	r3, [pc, #112]	; (17d4 <_gclk_init_generators_by_fref+0xa4>)
    1764:	4a1f      	ldr	r2, [pc, #124]	; (17e4 <_gclk_init_generators_by_fref+0xb4>)
    1766:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    1768:	4a1f      	ldr	r2, [pc, #124]	; (17e8 <_gclk_init_generators_by_fref+0xb8>)
    176a:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    176c:	4b19      	ldr	r3, [pc, #100]	; (17d4 <_gclk_init_generators_by_fref+0xa4>)
    176e:	785b      	ldrb	r3, [r3, #1]
    1770:	09db      	lsrs	r3, r3, #7
    1772:	d1fb      	bne.n	176c <_gclk_init_generators_by_fref+0x3c>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    1774:	0703      	lsls	r3, r0, #28
    1776:	d508      	bpl.n	178a <_gclk_init_generators_by_fref+0x5a>
	((Gclk *)hw)->GENDIV.reg = data;
    1778:	4b16      	ldr	r3, [pc, #88]	; (17d4 <_gclk_init_generators_by_fref+0xa4>)
    177a:	4a1c      	ldr	r2, [pc, #112]	; (17ec <_gclk_init_generators_by_fref+0xbc>)
    177c:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    177e:	4a1c      	ldr	r2, [pc, #112]	; (17f0 <_gclk_init_generators_by_fref+0xc0>)
    1780:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    1782:	4b14      	ldr	r3, [pc, #80]	; (17d4 <_gclk_init_generators_by_fref+0xa4>)
    1784:	785b      	ldrb	r3, [r3, #1]
    1786:	09db      	lsrs	r3, r3, #7
    1788:	d1fb      	bne.n	1782 <_gclk_init_generators_by_fref+0x52>
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SRC | GCLK_GENCTRL_ID(3));
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    178a:	06c3      	lsls	r3, r0, #27
    178c:	d509      	bpl.n	17a2 <_gclk_init_generators_by_fref+0x72>
	((Gclk *)hw)->GENDIV.reg = data;
    178e:	4b11      	ldr	r3, [pc, #68]	; (17d4 <_gclk_init_generators_by_fref+0xa4>)
    1790:	2282      	movs	r2, #130	; 0x82
    1792:	0052      	lsls	r2, r2, #1
    1794:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    1796:	4a17      	ldr	r2, [pc, #92]	; (17f4 <_gclk_init_generators_by_fref+0xc4>)
    1798:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    179a:	4b0e      	ldr	r3, [pc, #56]	; (17d4 <_gclk_init_generators_by_fref+0xa4>)
    179c:	785b      	ldrb	r3, [r3, #1]
    179e:	09db      	lsrs	r3, r3, #7
    17a0:	d1fb      	bne.n	179a <_gclk_init_generators_by_fref+0x6a>
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SRC | GCLK_GENCTRL_ID(4));
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    17a2:	0683      	lsls	r3, r0, #26
    17a4:	d508      	bpl.n	17b8 <_gclk_init_generators_by_fref+0x88>
	((Gclk *)hw)->GENDIV.reg = data;
    17a6:	4b0b      	ldr	r3, [pc, #44]	; (17d4 <_gclk_init_generators_by_fref+0xa4>)
    17a8:	4a13      	ldr	r2, [pc, #76]	; (17f8 <_gclk_init_generators_by_fref+0xc8>)
    17aa:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    17ac:	4a13      	ldr	r2, [pc, #76]	; (17fc <_gclk_init_generators_by_fref+0xcc>)
    17ae:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    17b0:	4b08      	ldr	r3, [pc, #32]	; (17d4 <_gclk_init_generators_by_fref+0xa4>)
    17b2:	785b      	ldrb	r3, [r3, #1]
    17b4:	09db      	lsrs	r3, r3, #7
    17b6:	d1fb      	bne.n	17b0 <_gclk_init_generators_by_fref+0x80>
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SRC | GCLK_GENCTRL_ID(5));
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    17b8:	0643      	lsls	r3, r0, #25
    17ba:	d509      	bpl.n	17d0 <_gclk_init_generators_by_fref+0xa0>
	((Gclk *)hw)->GENDIV.reg = data;
    17bc:	4b05      	ldr	r3, [pc, #20]	; (17d4 <_gclk_init_generators_by_fref+0xa4>)
    17be:	2283      	movs	r2, #131	; 0x83
    17c0:	0052      	lsls	r2, r2, #1
    17c2:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    17c4:	4a0e      	ldr	r2, [pc, #56]	; (1800 <_gclk_init_generators_by_fref+0xd0>)
    17c6:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    17c8:	4b02      	ldr	r3, [pc, #8]	; (17d4 <_gclk_init_generators_by_fref+0xa4>)
    17ca:	785b      	ldrb	r3, [r3, #1]
    17cc:	09db      	lsrs	r3, r3, #7
    17ce:	d1fb      	bne.n	17c8 <_gclk_init_generators_by_fref+0x98>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
    17d0:	4770      	bx	lr
    17d2:	46c0      	nop			; (mov r8, r8)
    17d4:	40000c00 	.word	0x40000c00
    17d8:	00290800 	.word	0x00290800
    17dc:	00000601 	.word	0x00000601
    17e0:	00010801 	.word	0x00010801
    17e4:	00000402 	.word	0x00000402
    17e8:	00210602 	.word	0x00210602
    17ec:	00000803 	.word	0x00000803
    17f0:	00290603 	.word	0x00290603
    17f4:	00090704 	.word	0x00090704
    17f8:	00000305 	.word	0x00000305
    17fc:	00010805 	.word	0x00010805
    1800:	00210406 	.word	0x00210406

00001804 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
    1804:	4b06      	ldr	r3, [pc, #24]	; (1820 <_pm_init+0x1c>)
    1806:	7a1a      	ldrb	r2, [r3, #8]
    1808:	b2d2      	uxtb	r2, r2
    180a:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
    180c:	7a5a      	ldrb	r2, [r3, #9]
    180e:	b2d2      	uxtb	r2, r2
    1810:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
    1812:	7a9a      	ldrb	r2, [r3, #10]
    1814:	b2d2      	uxtb	r2, r2
    1816:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
    1818:	7ada      	ldrb	r2, [r3, #11]
    181a:	b2d2      	uxtb	r2, r2
    181c:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
    181e:	4770      	bx	lr
    1820:	40000400 	.word	0x40000400

00001824 <_sercom_get_hardware_index>:
{
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    1824:	4b02      	ldr	r3, [pc, #8]	; (1830 <_sercom_get_hardware_index+0xc>)
    1826:	469c      	mov	ip, r3
    1828:	4460      	add	r0, ip
    182a:	0a80      	lsrs	r0, r0, #10
    182c:	b2c0      	uxtb	r0, r0
}
    182e:	4770      	bx	lr
    1830:	bdfff800 	.word	0xbdfff800

00001834 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    1834:	b510      	push	{r4, lr}
	void *hw = device->hw;
    1836:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    1838:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    183a:	07db      	lsls	r3, r3, #31
    183c:	d502      	bpl.n	1844 <_sercom_usart_interrupt_handler+0x10>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    183e:	7da3      	ldrb	r3, [r4, #22]
    1840:	07db      	lsls	r3, r3, #31
    1842:	d40f      	bmi.n	1864 <_sercom_usart_interrupt_handler+0x30>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    1844:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    1846:	079b      	lsls	r3, r3, #30
    1848:	d502      	bpl.n	1850 <_sercom_usart_interrupt_handler+0x1c>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    184a:	7da3      	ldrb	r3, [r4, #22]
    184c:	079b      	lsls	r3, r3, #30
    184e:	d40e      	bmi.n	186e <_sercom_usart_interrupt_handler+0x3a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    1850:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    1852:	075b      	lsls	r3, r3, #29
    1854:	d515      	bpl.n	1882 <_sercom_usart_interrupt_handler+0x4e>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    1856:	8b62      	ldrh	r2, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    1858:	2337      	movs	r3, #55	; 0x37
    185a:	421a      	tst	r2, r3
    185c:	d00c      	beq.n	1878 <_sercom_usart_interrupt_handler+0x44>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    185e:	3308      	adds	r3, #8
    1860:	8363      	strh	r3, [r4, #26]
		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
		status = hri_sercomusart_read_STATUS_reg(hw);
		hri_sercomusart_clear_STATUS_reg(hw, status);
	}
}
    1862:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    1864:	2301      	movs	r3, #1
    1866:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    1868:	6803      	ldr	r3, [r0, #0]
    186a:	4798      	blx	r3
    186c:	e7f9      	b.n	1862 <_sercom_usart_interrupt_handler+0x2e>
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    186e:	2302      	movs	r3, #2
    1870:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    1872:	6883      	ldr	r3, [r0, #8]
    1874:	4798      	blx	r3
    1876:	e7f4      	b.n	1862 <_sercom_usart_interrupt_handler+0x2e>
		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    1878:	6843      	ldr	r3, [r0, #4]
	return ((Sercom *)hw)->USART.DATA.reg;
    187a:	8d21      	ldrh	r1, [r4, #40]	; 0x28
    187c:	b2c9      	uxtb	r1, r1
    187e:	4798      	blx	r3
    1880:	e7ef      	b.n	1862 <_sercom_usart_interrupt_handler+0x2e>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    1882:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    1884:	09db      	lsrs	r3, r3, #7
    1886:	d0ec      	beq.n	1862 <_sercom_usart_interrupt_handler+0x2e>
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    1888:	2380      	movs	r3, #128	; 0x80
    188a:	7623      	strb	r3, [r4, #24]
		device->usart_cb.error_cb(device);
    188c:	68c3      	ldr	r3, [r0, #12]
    188e:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    1890:	8b63      	ldrh	r3, [r4, #26]
    1892:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    1894:	8363      	strh	r3, [r4, #26]
    1896:	e7e4      	b.n	1862 <_sercom_usart_interrupt_handler+0x2e>

00001898 <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM3) {
    1898:	4b03      	ldr	r3, [pc, #12]	; (18a8 <_sercom_init_irq_param+0x10>)
    189a:	4298      	cmp	r0, r3
    189c:	d000      	beq.n	18a0 <_sercom_init_irq_param+0x8>
		_sercom3_dev = (struct _usart_async_device *)dev;
	}
}
    189e:	4770      	bx	lr
		_sercom3_dev = (struct _usart_async_device *)dev;
    18a0:	4b02      	ldr	r3, [pc, #8]	; (18ac <_sercom_init_irq_param+0x14>)
    18a2:	6019      	str	r1, [r3, #0]
}
    18a4:	e7fb      	b.n	189e <_sercom_init_irq_param+0x6>
    18a6:	46c0      	nop			; (mov r8, r8)
    18a8:	42001400 	.word	0x42001400
    18ac:	20000124 	.word	0x20000124

000018b0 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    18b0:	b510      	push	{r4, lr}
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    18b2:	4b02      	ldr	r3, [pc, #8]	; (18bc <_sercom_get_irq_num+0xc>)
    18b4:	4798      	blx	r3
    18b6:	3009      	adds	r0, #9
    18b8:	b2c0      	uxtb	r0, r0
}
    18ba:	bd10      	pop	{r4, pc}
    18bc:	00001825 	.word	0x00001825

000018c0 <_get_sercom_index>:
{
    18c0:	b510      	push	{r4, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    18c2:	4b0b      	ldr	r3, [pc, #44]	; (18f0 <_get_sercom_index+0x30>)
    18c4:	4798      	blx	r3
    18c6:	0002      	movs	r2, r0
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    18c8:	2000      	movs	r0, #0
    18ca:	2800      	cmp	r0, #0
    18cc:	d006      	beq.n	18dc <_get_sercom_index+0x1c>
	ASSERT(false);
    18ce:	4a09      	ldr	r2, [pc, #36]	; (18f4 <_get_sercom_index+0x34>)
    18d0:	4909      	ldr	r1, [pc, #36]	; (18f8 <_get_sercom_index+0x38>)
    18d2:	2000      	movs	r0, #0
    18d4:	4b09      	ldr	r3, [pc, #36]	; (18fc <_get_sercom_index+0x3c>)
    18d6:	4798      	blx	r3
	return 0;
    18d8:	2000      	movs	r0, #0
}
    18da:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == sercom_offset) {
    18dc:	0083      	lsls	r3, r0, #2
    18de:	181b      	adds	r3, r3, r0
    18e0:	0099      	lsls	r1, r3, #2
    18e2:	4b07      	ldr	r3, [pc, #28]	; (1900 <_get_sercom_index+0x40>)
    18e4:	5ccb      	ldrb	r3, [r1, r3]
    18e6:	429a      	cmp	r2, r3
    18e8:	d0f7      	beq.n	18da <_get_sercom_index+0x1a>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    18ea:	3001      	adds	r0, #1
    18ec:	b2c0      	uxtb	r0, r0
    18ee:	e7ec      	b.n	18ca <_get_sercom_index+0xa>
    18f0:	00001825 	.word	0x00001825
    18f4:	0000025e 	.word	0x0000025e
    18f8:	00004258 	.word	0x00004258
    18fc:	000013a5 	.word	0x000013a5
    1900:	000041e8 	.word	0x000041e8

00001904 <_usart_init>:
{
    1904:	b570      	push	{r4, r5, r6, lr}
    1906:	0004      	movs	r4, r0
	uint8_t i = _get_sercom_index(hw);
    1908:	4b38      	ldr	r3, [pc, #224]	; (19ec <_usart_init+0xe8>)
    190a:	4798      	blx	r3
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    190c:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    190e:	07db      	lsls	r3, r3, #31
    1910:	d41d      	bmi.n	194e <_usart_init+0x4a>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    1912:	0083      	lsls	r3, r0, #2
    1914:	181b      	adds	r3, r3, r0
    1916:	009a      	lsls	r2, r3, #2
    1918:	4b35      	ldr	r3, [pc, #212]	; (19f0 <_usart_init+0xec>)
    191a:	189b      	adds	r3, r3, r2
    191c:	685a      	ldr	r2, [r3, #4]
    191e:	231c      	movs	r3, #28
    1920:	401a      	ands	r2, r3
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1922:	69e3      	ldr	r3, [r4, #28]
    1924:	079b      	lsls	r3, r3, #30
    1926:	d1fc      	bne.n	1922 <_usart_init+0x1e>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    1928:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    192a:	079b      	lsls	r3, r3, #30
    192c:	d509      	bpl.n	1942 <_usart_init+0x3e>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    192e:	6823      	ldr	r3, [r4, #0]
    1930:	2102      	movs	r1, #2
    1932:	438b      	bics	r3, r1
    1934:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1936:	69e3      	ldr	r3, [r4, #28]
    1938:	079b      	lsls	r3, r3, #30
    193a:	d1fc      	bne.n	1936 <_usart_init+0x32>
    193c:	69e3      	ldr	r3, [r4, #28]
    193e:	079b      	lsls	r3, r3, #30
    1940:	d4fc      	bmi.n	193c <_usart_init+0x38>
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    1942:	2301      	movs	r3, #1
    1944:	4313      	orrs	r3, r2
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1946:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1948:	69e3      	ldr	r3, [r4, #28]
    194a:	079b      	lsls	r3, r3, #30
    194c:	d1fc      	bne.n	1948 <_usart_init+0x44>
    194e:	69e3      	ldr	r3, [r4, #28]
    1950:	07db      	lsls	r3, r3, #31
    1952:	d4fc      	bmi.n	194e <_usart_init+0x4a>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    1954:	0083      	lsls	r3, r0, #2
    1956:	181b      	adds	r3, r3, r0
    1958:	009a      	lsls	r2, r3, #2
    195a:	4b25      	ldr	r3, [pc, #148]	; (19f0 <_usart_init+0xec>)
    195c:	189b      	adds	r3, r3, r2
    195e:	685b      	ldr	r3, [r3, #4]
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1960:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1962:	69e3      	ldr	r3, [r4, #28]
    1964:	079b      	lsls	r3, r3, #30
    1966:	d1fc      	bne.n	1962 <_usart_init+0x5e>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    1968:	0083      	lsls	r3, r0, #2
    196a:	181b      	adds	r3, r3, r0
    196c:	009a      	lsls	r2, r3, #2
    196e:	4b20      	ldr	r3, [pc, #128]	; (19f0 <_usart_init+0xec>)
    1970:	189b      	adds	r3, r3, r2
    1972:	689b      	ldr	r3, [r3, #8]
	((Sercom *)hw)->USART.CTRLB.reg = data;
    1974:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1976:	69e3      	ldr	r3, [r4, #28]
    1978:	075b      	lsls	r3, r3, #29
    197a:	d1fc      	bne.n	1976 <_usart_init+0x72>
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    197c:	0083      	lsls	r3, r0, #2
    197e:	181b      	adds	r3, r3, r0
    1980:	009a      	lsls	r2, r3, #2
    1982:	4b1b      	ldr	r3, [pc, #108]	; (19f0 <_usart_init+0xec>)
    1984:	189b      	adds	r3, r3, r2
    1986:	685b      	ldr	r3, [r3, #4]
    1988:	049a      	lsls	r2, r3, #18
    198a:	d40b      	bmi.n	19a4 <_usart_init+0xa0>
    198c:	22c0      	movs	r2, #192	; 0xc0
    198e:	01d2      	lsls	r2, r2, #7
    1990:	4213      	tst	r3, r2
    1992:	d107      	bne.n	19a4 <_usart_init+0xa0>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    1994:	0083      	lsls	r3, r0, #2
    1996:	181b      	adds	r3, r3, r0
    1998:	009a      	lsls	r2, r3, #2
    199a:	4b15      	ldr	r3, [pc, #84]	; (19f0 <_usart_init+0xec>)
    199c:	189b      	adds	r3, r3, r2
    199e:	899b      	ldrh	r3, [r3, #12]
	((Sercom *)hw)->USART.BAUD.reg = data;
    19a0:	81a3      	strh	r3, [r4, #12]
    19a2:	e015      	b.n	19d0 <_usart_init+0xcc>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    19a4:	0083      	lsls	r3, r0, #2
    19a6:	181b      	adds	r3, r3, r0
    19a8:	009a      	lsls	r2, r3, #2
    19aa:	4911      	ldr	r1, [pc, #68]	; (19f0 <_usart_init+0xec>)
    19ac:	1889      	adds	r1, r1, r2
    19ae:	898a      	ldrh	r2, [r1, #12]
    19b0:	89a3      	ldrh	r3, [r4, #12]
    19b2:	04d2      	lsls	r2, r2, #19
    19b4:	0cd2      	lsrs	r2, r2, #19
    19b6:	0b5b      	lsrs	r3, r3, #13
    19b8:	035b      	lsls	r3, r3, #13
    19ba:	4313      	orrs	r3, r2
    19bc:	81a3      	strh	r3, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    19be:	7b8b      	ldrb	r3, [r1, #14]
    19c0:	2207      	movs	r2, #7
    19c2:	401a      	ands	r2, r3
    19c4:	89a3      	ldrh	r3, [r4, #12]
    19c6:	0352      	lsls	r2, r2, #13
    19c8:	04db      	lsls	r3, r3, #19
    19ca:	0cdb      	lsrs	r3, r3, #19
    19cc:	4313      	orrs	r3, r2
    19ce:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    19d0:	4a07      	ldr	r2, [pc, #28]	; (19f0 <_usart_init+0xec>)
    19d2:	0083      	lsls	r3, r0, #2
    19d4:	181d      	adds	r5, r3, r0
    19d6:	00a9      	lsls	r1, r5, #2
    19d8:	000d      	movs	r5, r1
    19da:	1851      	adds	r1, r2, r1
    19dc:	7bc9      	ldrb	r1, [r1, #15]
	((Sercom *)hw)->USART.RXPL.reg = data;
    19de:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    19e0:	1952      	adds	r2, r2, r5
    19e2:	7c12      	ldrb	r2, [r2, #16]
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    19e4:	2330      	movs	r3, #48	; 0x30
    19e6:	54e2      	strb	r2, [r4, r3]
}
    19e8:	2000      	movs	r0, #0
    19ea:	bd70      	pop	{r4, r5, r6, pc}
    19ec:	000018c1 	.word	0x000018c1
    19f0:	000041e8 	.word	0x000041e8

000019f4 <_usart_async_init>:
{
    19f4:	b570      	push	{r4, r5, r6, lr}
    19f6:	0006      	movs	r6, r0
    19f8:	000c      	movs	r4, r1
	ASSERT(device);
    19fa:	1e43      	subs	r3, r0, #1
    19fc:	4198      	sbcs	r0, r3
    19fe:	b2c0      	uxtb	r0, r0
    1a00:	22c4      	movs	r2, #196	; 0xc4
    1a02:	4919      	ldr	r1, [pc, #100]	; (1a68 <_usart_async_init+0x74>)
    1a04:	4b19      	ldr	r3, [pc, #100]	; (1a6c <_usart_async_init+0x78>)
    1a06:	4798      	blx	r3
	init_status = _usart_init(hw);
    1a08:	0020      	movs	r0, r4
    1a0a:	4b19      	ldr	r3, [pc, #100]	; (1a70 <_usart_async_init+0x7c>)
    1a0c:	4798      	blx	r3
    1a0e:	1e05      	subs	r5, r0, #0
	if (init_status) {
    1a10:	d001      	beq.n	1a16 <_usart_async_init+0x22>
}
    1a12:	0028      	movs	r0, r5
    1a14:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    1a16:	61b4      	str	r4, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
    1a18:	0031      	movs	r1, r6
    1a1a:	0020      	movs	r0, r4
    1a1c:	4b15      	ldr	r3, [pc, #84]	; (1a74 <_usart_async_init+0x80>)
    1a1e:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)_sercom_get_irq_num(hw));
    1a20:	0020      	movs	r0, r4
    1a22:	4b15      	ldr	r3, [pc, #84]	; (1a78 <_usart_async_init+0x84>)
    1a24:	4798      	blx	r3
    1a26:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1a28:	2b00      	cmp	r3, #0
    1a2a:	db0a      	blt.n	1a42 <_usart_async_init+0x4e>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a2c:	211f      	movs	r1, #31
    1a2e:	4001      	ands	r1, r0
    1a30:	2201      	movs	r2, #1
    1a32:	408a      	lsls	r2, r1
    1a34:	2180      	movs	r1, #128	; 0x80
    1a36:	4c11      	ldr	r4, [pc, #68]	; (1a7c <_usart_async_init+0x88>)
    1a38:	5062      	str	r2, [r4, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    1a3a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1a3e:	f3bf 8f6f 	isb	sy
  if ((int32_t)(IRQn) >= 0)
    1a42:	2b00      	cmp	r3, #0
    1a44:	db07      	blt.n	1a56 <_usart_async_init+0x62>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a46:	211f      	movs	r1, #31
    1a48:	4001      	ands	r1, r0
    1a4a:	2201      	movs	r2, #1
    1a4c:	408a      	lsls	r2, r1
    1a4e:	21c0      	movs	r1, #192	; 0xc0
    1a50:	0049      	lsls	r1, r1, #1
    1a52:	4c0a      	ldr	r4, [pc, #40]	; (1a7c <_usart_async_init+0x88>)
    1a54:	5062      	str	r2, [r4, r1]
  if ((int32_t)(IRQn) >= 0)
    1a56:	2b00      	cmp	r3, #0
    1a58:	dbdb      	blt.n	1a12 <_usart_async_init+0x1e>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a5a:	231f      	movs	r3, #31
    1a5c:	4018      	ands	r0, r3
    1a5e:	3b1e      	subs	r3, #30
    1a60:	4083      	lsls	r3, r0
    1a62:	4a06      	ldr	r2, [pc, #24]	; (1a7c <_usart_async_init+0x88>)
    1a64:	6013      	str	r3, [r2, #0]
    1a66:	e7d4      	b.n	1a12 <_usart_async_init+0x1e>
    1a68:	00004258 	.word	0x00004258
    1a6c:	000013a5 	.word	0x000013a5
    1a70:	00001905 	.word	0x00001905
    1a74:	00001899 	.word	0x00001899
    1a78:	000018b1 	.word	0x000018b1
    1a7c:	e000e100 	.word	0xe000e100

00001a80 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    1a80:	6983      	ldr	r3, [r0, #24]
    1a82:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
    1a84:	8519      	strh	r1, [r3, #40]	; 0x28
}
    1a86:	4770      	bx	lr

00001a88 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    1a88:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    1a8a:	2201      	movs	r2, #1
    1a8c:	759a      	strb	r2, [r3, #22]
}
    1a8e:	4770      	bx	lr

00001a90 <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    1a90:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    1a92:	2202      	movs	r2, #2
    1a94:	759a      	strb	r2, [r3, #22]
}
    1a96:	4770      	bx	lr

00001a98 <SERCOM3_Handler>:

	return NULL;
}

void SERCOM3_Handler(void)
{
    1a98:	b510      	push	{r4, lr}
	_sercom_usart_interrupt_handler(_sercom3_dev);
    1a9a:	4b02      	ldr	r3, [pc, #8]	; (1aa4 <SERCOM3_Handler+0xc>)
    1a9c:	6818      	ldr	r0, [r3, #0]
    1a9e:	4b02      	ldr	r3, [pc, #8]	; (1aa8 <SERCOM3_Handler+0x10>)
    1aa0:	4798      	blx	r3
}
    1aa2:	bd10      	pop	{r4, pc}
    1aa4:	20000124 	.word	0x20000124
    1aa8:	00001835 	.word	0x00001835

00001aac <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    1aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1aae:	0006      	movs	r6, r0
    1ab0:	000c      	movs	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    1ab2:	0008      	movs	r0, r1
    1ab4:	4b73      	ldr	r3, [pc, #460]	; (1c84 <_spi_m_sync_init+0x1d8>)
    1ab6:	4798      	blx	r3
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    1ab8:	2300      	movs	r3, #0
    1aba:	e001      	b.n	1ac0 <_spi_m_sync_init+0x14>
    1abc:	3301      	adds	r3, #1
    1abe:	b2db      	uxtb	r3, r3
    1ac0:	2b02      	cmp	r3, #2
    1ac2:	d80b      	bhi.n	1adc <_spi_m_sync_init+0x30>
		if (sercomspi_regs[i].n == n) {
    1ac4:	0119      	lsls	r1, r3, #4
    1ac6:	18c9      	adds	r1, r1, r3
    1ac8:	4a6f      	ldr	r2, [pc, #444]	; (1c88 <_spi_m_sync_init+0x1dc>)
    1aca:	1852      	adds	r2, r2, r1
    1acc:	324c      	adds	r2, #76	; 0x4c
    1ace:	7812      	ldrb	r2, [r2, #0]
    1ad0:	4290      	cmp	r0, r2
    1ad2:	d1f3      	bne.n	1abc <_spi_m_sync_init+0x10>
			return &sercomspi_regs[i];
    1ad4:	4d6c      	ldr	r5, [pc, #432]	; (1c88 <_spi_m_sync_init+0x1dc>)
    1ad6:	353c      	adds	r5, #60	; 0x3c
    1ad8:	186d      	adds	r5, r5, r1
    1ada:	e000      	b.n	1ade <_spi_m_sync_init+0x32>
	return NULL;
    1adc:	2500      	movs	r5, #0
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    1ade:	2e00      	cmp	r6, #0
    1ae0:	d100      	bne.n	1ae4 <_spi_m_sync_init+0x38>
    1ae2:	e082      	b.n	1bea <_spi_m_sync_init+0x13e>
    1ae4:	2c00      	cmp	r4, #0
    1ae6:	d100      	bne.n	1aea <_spi_m_sync_init+0x3e>
    1ae8:	e07d      	b.n	1be6 <_spi_m_sync_init+0x13a>
    1aea:	2001      	movs	r0, #1
    1aec:	4a67      	ldr	r2, [pc, #412]	; (1c8c <_spi_m_sync_init+0x1e0>)
    1aee:	4968      	ldr	r1, [pc, #416]	; (1c90 <_spi_m_sync_init+0x1e4>)
    1af0:	4b68      	ldr	r3, [pc, #416]	; (1c94 <_spi_m_sync_init+0x1e8>)
    1af2:	4798      	blx	r3

	if (regs == NULL) {
    1af4:	2d00      	cmp	r5, #0
    1af6:	d100      	bne.n	1afa <_spi_m_sync_init+0x4e>
    1af8:	e0c0      	b.n	1c7c <_spi_m_sync_init+0x1d0>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1afa:	69e3      	ldr	r3, [r4, #28]
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    1afc:	07db      	lsls	r3, r3, #31
    1afe:	d421      	bmi.n	1b44 <_spi_m_sync_init+0x98>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    1b00:	782a      	ldrb	r2, [r5, #0]
    1b02:	786b      	ldrb	r3, [r5, #1]
    1b04:	021b      	lsls	r3, r3, #8
    1b06:	4313      	orrs	r3, r2
    1b08:	78aa      	ldrb	r2, [r5, #2]
    1b0a:	0412      	lsls	r2, r2, #16
    1b0c:	4313      	orrs	r3, r2
    1b0e:	78ea      	ldrb	r2, [r5, #3]
    1b10:	0612      	lsls	r2, r2, #24
    1b12:	431a      	orrs	r2, r3
    1b14:	231c      	movs	r3, #28
    1b16:	401a      	ands	r2, r3
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1b18:	69e3      	ldr	r3, [r4, #28]
    1b1a:	079b      	lsls	r3, r3, #30
    1b1c:	d1fc      	bne.n	1b18 <_spi_m_sync_init+0x6c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    1b1e:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    1b20:	079b      	lsls	r3, r3, #30
    1b22:	d509      	bpl.n	1b38 <_spi_m_sync_init+0x8c>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    1b24:	6823      	ldr	r3, [r4, #0]
    1b26:	2102      	movs	r1, #2
    1b28:	438b      	bics	r3, r1
    1b2a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1b2c:	69e3      	ldr	r3, [r4, #28]
    1b2e:	079b      	lsls	r3, r3, #30
    1b30:	d1fc      	bne.n	1b2c <_spi_m_sync_init+0x80>
    1b32:	69e3      	ldr	r3, [r4, #28]
    1b34:	079b      	lsls	r3, r3, #30
    1b36:	d4fc      	bmi.n	1b32 <_spi_m_sync_init+0x86>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    1b38:	2301      	movs	r3, #1
    1b3a:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1b3c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1b3e:	69e3      	ldr	r3, [r4, #28]
    1b40:	079b      	lsls	r3, r3, #30
    1b42:	d1fc      	bne.n	1b3e <_spi_m_sync_init+0x92>
    1b44:	69e3      	ldr	r3, [r4, #28]
    1b46:	07db      	lsls	r3, r3, #31
    1b48:	d4fc      	bmi.n	1b44 <_spi_m_sync_init+0x98>
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    1b4a:	6034      	str	r4, [r6, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    1b4c:	782b      	ldrb	r3, [r5, #0]
    1b4e:	786a      	ldrb	r2, [r5, #1]
    1b50:	0212      	lsls	r2, r2, #8
    1b52:	431a      	orrs	r2, r3
    1b54:	78ab      	ldrb	r3, [r5, #2]
    1b56:	041b      	lsls	r3, r3, #16
    1b58:	431a      	orrs	r2, r3
    1b5a:	78eb      	ldrb	r3, [r5, #3]
    1b5c:	061b      	lsls	r3, r3, #24
    1b5e:	4313      	orrs	r3, r2
    1b60:	221c      	movs	r2, #28
    1b62:	4013      	ands	r3, r2
    1b64:	2b08      	cmp	r3, #8
    1b66:	d042      	beq.n	1bee <_spi_m_sync_init+0x142>
	ASSERT(hw && regs);
    1b68:	2c00      	cmp	r4, #0
    1b6a:	d100      	bne.n	1b6e <_spi_m_sync_init+0xc2>
    1b6c:	e082      	b.n	1c74 <_spi_m_sync_init+0x1c8>
    1b6e:	2d00      	cmp	r5, #0
    1b70:	d100      	bne.n	1b74 <_spi_m_sync_init+0xc8>
    1b72:	e07d      	b.n	1c70 <_spi_m_sync_init+0x1c4>
    1b74:	2001      	movs	r0, #1
    1b76:	4a48      	ldr	r2, [pc, #288]	; (1c98 <_spi_m_sync_init+0x1ec>)
    1b78:	4945      	ldr	r1, [pc, #276]	; (1c90 <_spi_m_sync_init+0x1e4>)
    1b7a:	4b46      	ldr	r3, [pc, #280]	; (1c94 <_spi_m_sync_init+0x1e8>)
    1b7c:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    1b7e:	782b      	ldrb	r3, [r5, #0]
    1b80:	786a      	ldrb	r2, [r5, #1]
    1b82:	0212      	lsls	r2, r2, #8
    1b84:	431a      	orrs	r2, r3
    1b86:	78ab      	ldrb	r3, [r5, #2]
    1b88:	041b      	lsls	r3, r3, #16
    1b8a:	431a      	orrs	r2, r3
    1b8c:	78eb      	ldrb	r3, [r5, #3]
    1b8e:	061b      	lsls	r3, r3, #24
    1b90:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLA_reg(
    1b92:	4a42      	ldr	r2, [pc, #264]	; (1c9c <_spi_m_sync_init+0x1f0>)
    1b94:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1b96:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1b98:	69e3      	ldr	r3, [r4, #28]
    1b9a:	079b      	lsls	r3, r3, #30
    1b9c:	d1fc      	bne.n	1b98 <_spi_m_sync_init+0xec>
	    (regs->ctrlb
    1b9e:	792b      	ldrb	r3, [r5, #4]
    1ba0:	796a      	ldrb	r2, [r5, #5]
    1ba2:	0212      	lsls	r2, r2, #8
    1ba4:	431a      	orrs	r2, r3
    1ba6:	79ab      	ldrb	r3, [r5, #6]
    1ba8:	041b      	lsls	r3, r3, #16
    1baa:	431a      	orrs	r2, r3
    1bac:	79eb      	ldrb	r3, [r5, #7]
    1bae:	061b      	lsls	r3, r3, #24
    1bb0:	4313      	orrs	r3, r2
	        | (SERCOM_SPI_CTRLB_RXEN));
    1bb2:	4a3b      	ldr	r2, [pc, #236]	; (1ca0 <_spi_m_sync_init+0x1f4>)
    1bb4:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(
    1bb6:	2280      	movs	r2, #128	; 0x80
    1bb8:	0292      	lsls	r2, r2, #10
    1bba:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    1bbc:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1bbe:	69e3      	ldr	r3, [r4, #28]
    1bc0:	075b      	lsls	r3, r3, #29
    1bc2:	d1fc      	bne.n	1bbe <_spi_m_sync_init+0x112>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    1bc4:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    1bc6:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    1bc8:	7b6a      	ldrb	r2, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    1bca:	2330      	movs	r3, #48	; 0x30
    1bcc:	54e2      	strb	r2, [r4, r3]
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    1bce:	792b      	ldrb	r3, [r5, #4]
    1bd0:	075b      	lsls	r3, r3, #29
    1bd2:	d151      	bne.n	1c78 <_spi_m_sync_init+0x1cc>
    1bd4:	2301      	movs	r3, #1
    1bd6:	7133      	strb	r3, [r6, #4]

	dev->dummy_byte = regs->dummy_byte;
    1bd8:	7baa      	ldrb	r2, [r5, #14]
    1bda:	7beb      	ldrb	r3, [r5, #15]
    1bdc:	021b      	lsls	r3, r3, #8
    1bde:	4313      	orrs	r3, r2
    1be0:	80f3      	strh	r3, [r6, #6]

	return ERR_NONE;
    1be2:	2000      	movs	r0, #0
}
    1be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(dev && hw);
    1be6:	2000      	movs	r0, #0
    1be8:	e780      	b.n	1aec <_spi_m_sync_init+0x40>
    1bea:	2000      	movs	r0, #0
    1bec:	e77e      	b.n	1aec <_spi_m_sync_init+0x40>
	ASSERT(hw && regs);
    1bee:	2c00      	cmp	r4, #0
    1bf0:	d03c      	beq.n	1c6c <_spi_m_sync_init+0x1c0>
    1bf2:	2d00      	cmp	r5, #0
    1bf4:	d038      	beq.n	1c68 <_spi_m_sync_init+0x1bc>
    1bf6:	2001      	movs	r0, #1
    1bf8:	4a2a      	ldr	r2, [pc, #168]	; (1ca4 <_spi_m_sync_init+0x1f8>)
    1bfa:	4925      	ldr	r1, [pc, #148]	; (1c90 <_spi_m_sync_init+0x1e4>)
    1bfc:	4b25      	ldr	r3, [pc, #148]	; (1c94 <_spi_m_sync_init+0x1e8>)
    1bfe:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    1c00:	782b      	ldrb	r3, [r5, #0]
    1c02:	786a      	ldrb	r2, [r5, #1]
    1c04:	0212      	lsls	r2, r2, #8
    1c06:	431a      	orrs	r2, r3
    1c08:	78ab      	ldrb	r3, [r5, #2]
    1c0a:	041b      	lsls	r3, r3, #16
    1c0c:	431a      	orrs	r2, r3
    1c0e:	78eb      	ldrb	r3, [r5, #3]
    1c10:	061b      	lsls	r3, r3, #24
    1c12:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLA_reg(
    1c14:	4a21      	ldr	r2, [pc, #132]	; (1c9c <_spi_m_sync_init+0x1f0>)
    1c16:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1c18:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1c1a:	69e3      	ldr	r3, [r4, #28]
    1c1c:	079b      	lsls	r3, r3, #30
    1c1e:	d1fc      	bne.n	1c1a <_spi_m_sync_init+0x16e>
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    1c20:	792b      	ldrb	r3, [r5, #4]
    1c22:	796a      	ldrb	r2, [r5, #5]
    1c24:	0212      	lsls	r2, r2, #8
    1c26:	431a      	orrs	r2, r3
    1c28:	79ab      	ldrb	r3, [r5, #6]
    1c2a:	041b      	lsls	r3, r3, #16
    1c2c:	431a      	orrs	r2, r3
    1c2e:	79eb      	ldrb	r3, [r5, #7]
    1c30:	061b      	lsls	r3, r3, #24
    1c32:	4313      	orrs	r3, r2
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    1c34:	4a1c      	ldr	r2, [pc, #112]	; (1ca8 <_spi_m_sync_init+0x1fc>)
    1c36:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(hw,
    1c38:	4a1c      	ldr	r2, [pc, #112]	; (1cac <_spi_m_sync_init+0x200>)
    1c3a:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    1c3c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1c3e:	69e3      	ldr	r3, [r4, #28]
    1c40:	075b      	lsls	r3, r3, #29
    1c42:	d1fc      	bne.n	1c3e <_spi_m_sync_init+0x192>
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    1c44:	7a2b      	ldrb	r3, [r5, #8]
    1c46:	7a6a      	ldrb	r2, [r5, #9]
    1c48:	0212      	lsls	r2, r2, #8
    1c4a:	431a      	orrs	r2, r3
    1c4c:	7aab      	ldrb	r3, [r5, #10]
    1c4e:	041b      	lsls	r3, r3, #16
    1c50:	431a      	orrs	r2, r3
    1c52:	7aeb      	ldrb	r3, [r5, #11]
    1c54:	061b      	lsls	r3, r3, #24
    1c56:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.ADDR.reg = data;
    1c58:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    1c5a:	7b6a      	ldrb	r2, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    1c5c:	2330      	movs	r3, #48	; 0x30
    1c5e:	54e2      	strb	r2, [r4, r3]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1c60:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    1c62:	2b00      	cmp	r3, #0
    1c64:	d1fc      	bne.n	1c60 <_spi_m_sync_init+0x1b4>
    1c66:	e7b2      	b.n	1bce <_spi_m_sync_init+0x122>
	ASSERT(hw && regs);
    1c68:	2000      	movs	r0, #0
    1c6a:	e7c5      	b.n	1bf8 <_spi_m_sync_init+0x14c>
    1c6c:	2000      	movs	r0, #0
    1c6e:	e7c3      	b.n	1bf8 <_spi_m_sync_init+0x14c>
	ASSERT(hw && regs);
    1c70:	2000      	movs	r0, #0
    1c72:	e780      	b.n	1b76 <_spi_m_sync_init+0xca>
    1c74:	2000      	movs	r0, #0
    1c76:	e77e      	b.n	1b76 <_spi_m_sync_init+0xca>
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    1c78:	2302      	movs	r3, #2
    1c7a:	e7ac      	b.n	1bd6 <_spi_m_sync_init+0x12a>
		return ERR_INVALID_ARG;
    1c7c:	200d      	movs	r0, #13
    1c7e:	4240      	negs	r0, r0
    1c80:	e7b0      	b.n	1be4 <_spi_m_sync_init+0x138>
    1c82:	46c0      	nop			; (mov r8, r8)
    1c84:	00001825 	.word	0x00001825
    1c88:	000041e8 	.word	0x000041e8
    1c8c:	00000952 	.word	0x00000952
    1c90:	00004258 	.word	0x00004258
    1c94:	000013a5 	.word	0x000013a5
    1c98:	00000917 	.word	0x00000917
    1c9c:	fffffefc 	.word	0xfffffefc
    1ca0:	fffd1dbf 	.word	0xfffd1dbf
    1ca4:	0000092b 	.word	0x0000092b
    1ca8:	fffdddbf 	.word	0xfffdddbf
    1cac:	00020240 	.word	0x00020240

00001cb0 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    1cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cb2:	46ce      	mov	lr, r9
    1cb4:	4647      	mov	r7, r8
    1cb6:	b580      	push	{r7, lr}
    1cb8:	b089      	sub	sp, #36	; 0x24
    1cba:	4681      	mov	r9, r0
    1cbc:	000d      	movs	r5, r1
	void *                 hw   = dev->prvt;
    1cbe:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    1cc0:	680b      	ldr	r3, [r1, #0]
    1cc2:	9303      	str	r3, [sp, #12]
    1cc4:	684b      	ldr	r3, [r1, #4]
    1cc6:	9304      	str	r3, [sp, #16]
    1cc8:	2300      	movs	r3, #0
    1cca:	9305      	str	r3, [sp, #20]
    1ccc:	9306      	str	r3, [sp, #24]
    1cce:	7906      	ldrb	r6, [r0, #4]

	ASSERT(dev && hw);
    1cd0:	2800      	cmp	r0, #0
    1cd2:	d014      	beq.n	1cfe <_spi_m_sync_trans+0x4e>
    1cd4:	2c00      	cmp	r4, #0
    1cd6:	d010      	beq.n	1cfa <_spi_m_sync_trans+0x4a>
    1cd8:	2001      	movs	r0, #1
    1cda:	4a37      	ldr	r2, [pc, #220]	; (1db8 <_spi_m_sync_trans+0x108>)
    1cdc:	4937      	ldr	r1, [pc, #220]	; (1dbc <_spi_m_sync_trans+0x10c>)
    1cde:	4b38      	ldr	r3, [pc, #224]	; (1dc0 <_spi_m_sync_trans+0x110>)
    1ce0:	4798      	blx	r3
    1ce2:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    1ce4:	075b      	lsls	r3, r3, #29
    1ce6:	d164      	bne.n	1db2 <_spi_m_sync_trans+0x102>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1ce8:	69e3      	ldr	r3, [r4, #28]
    1cea:	079b      	lsls	r3, r3, #30
    1cec:	d1fc      	bne.n	1ce8 <_spi_m_sync_trans+0x38>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    1cee:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    1cf0:	079b      	lsls	r3, r3, #30
    1cf2:	d420      	bmi.n	1d36 <_spi_m_sync_trans+0x86>
		return ERR_NOT_INITIALIZED;
    1cf4:	2014      	movs	r0, #20
    1cf6:	4240      	negs	r0, r0
    1cf8:	e056      	b.n	1da8 <_spi_m_sync_trans+0xf8>
	ASSERT(dev && hw);
    1cfa:	2000      	movs	r0, #0
    1cfc:	e7ed      	b.n	1cda <_spi_m_sync_trans+0x2a>
    1cfe:	2000      	movs	r0, #0
    1d00:	e7eb      	b.n	1cda <_spi_m_sync_trans+0x2a>
		return false;
    1d02:	2200      	movs	r2, #0
    1d04:	e02d      	b.n	1d62 <_spi_m_sync_trans+0xb2>
			data |= (*ctrl->txbuf) << 8;
    1d06:	7848      	ldrb	r0, [r1, #1]
    1d08:	0200      	lsls	r0, r0, #8
    1d0a:	4647      	mov	r7, r8
    1d0c:	4307      	orrs	r7, r0
    1d0e:	46b8      	mov	r8, r7
			ctrl->txbuf++;
    1d10:	3102      	adds	r1, #2
    1d12:	9103      	str	r1, [sp, #12]
	ctrl->txcnt++;
    1d14:	3201      	adds	r2, #1
    1d16:	9205      	str	r2, [sp, #20]
	((Sercom *)hw)->SPI.DATA.reg = data;
    1d18:	4642      	mov	r2, r8
    1d1a:	62a2      	str	r2, [r4, #40]	; 0x28
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    1d1c:	b25b      	sxtb	r3, r3
    1d1e:	2b00      	cmp	r3, #0
    1d20:	db35      	blt.n	1d8e <_spi_m_sync_trans+0xde>
	return ERR_NONE;
    1d22:	2000      	movs	r0, #0
			}
		}

		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
    1d24:	2800      	cmp	r0, #0
    1d26:	db3a      	blt.n	1d9e <_spi_m_sync_trans+0xee>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    1d28:	9805      	ldr	r0, [sp, #20]
    1d2a:	68ab      	ldr	r3, [r5, #8]
    1d2c:	4298      	cmp	r0, r3
    1d2e:	d302      	bcc.n	1d36 <_spi_m_sync_trans+0x86>
    1d30:	9a06      	ldr	r2, [sp, #24]
    1d32:	4293      	cmp	r3, r2
    1d34:	d933      	bls.n	1d9e <_spi_m_sync_trans+0xee>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    1d36:	7e23      	ldrb	r3, [r4, #24]
    1d38:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    1d3a:	075a      	lsls	r2, r3, #29
    1d3c:	d5e1      	bpl.n	1d02 <_spi_m_sync_trans+0x52>
	return ((Sercom *)hw)->SPI.DATA.reg;
    1d3e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    1d40:	9a04      	ldr	r2, [sp, #16]
    1d42:	2a00      	cmp	r2, #0
    1d44:	d008      	beq.n	1d58 <_spi_m_sync_trans+0xa8>
		*ctrl->rxbuf++ = (uint8_t)data;
    1d46:	1c50      	adds	r0, r2, #1
    1d48:	9004      	str	r0, [sp, #16]
    1d4a:	7011      	strb	r1, [r2, #0]
		if (ctrl->char_size > 1) {
    1d4c:	2e01      	cmp	r6, #1
    1d4e:	d903      	bls.n	1d58 <_spi_m_sync_trans+0xa8>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    1d50:	1c90      	adds	r0, r2, #2
    1d52:	9004      	str	r0, [sp, #16]
    1d54:	0a09      	lsrs	r1, r1, #8
    1d56:	7051      	strb	r1, [r2, #1]
	ctrl->rxcnt++;
    1d58:	9a06      	ldr	r2, [sp, #24]
    1d5a:	9201      	str	r2, [sp, #4]
    1d5c:	3201      	adds	r2, #1
    1d5e:	9206      	str	r2, [sp, #24]
	return true;
    1d60:	2201      	movs	r2, #1
		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    1d62:	2a00      	cmp	r2, #0
    1d64:	d1da      	bne.n	1d1c <_spi_m_sync_trans+0x6c>
			if (ctrl.rxcnt >= ctrl.txcnt) {
    1d66:	9906      	ldr	r1, [sp, #24]
    1d68:	9a05      	ldr	r2, [sp, #20]
    1d6a:	4291      	cmp	r1, r2
    1d6c:	d3d6      	bcc.n	1d1c <_spi_m_sync_trans+0x6c>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    1d6e:	4649      	mov	r1, r9
    1d70:	88c8      	ldrh	r0, [r1, #6]
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    1d72:	07d9      	lsls	r1, r3, #31
    1d74:	d5d2      	bpl.n	1d1c <_spi_m_sync_trans+0x6c>
	if (ctrl->txbuf) {
    1d76:	9903      	ldr	r1, [sp, #12]
    1d78:	2900      	cmp	r1, #0
    1d7a:	d006      	beq.n	1d8a <_spi_m_sync_trans+0xda>
		data = *ctrl->txbuf++;
    1d7c:	1c48      	adds	r0, r1, #1
    1d7e:	9003      	str	r0, [sp, #12]
    1d80:	7808      	ldrb	r0, [r1, #0]
    1d82:	4680      	mov	r8, r0
		if (ctrl->char_size > 1) {
    1d84:	2e01      	cmp	r6, #1
    1d86:	d8be      	bhi.n	1d06 <_spi_m_sync_trans+0x56>
    1d88:	e7c4      	b.n	1d14 <_spi_m_sync_trans+0x64>
		data = dummy;
    1d8a:	4680      	mov	r8, r0
    1d8c:	e7c2      	b.n	1d14 <_spi_m_sync_trans+0x64>
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    1d8e:	2301      	movs	r3, #1
    1d90:	425b      	negs	r3, r3
    1d92:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    1d94:	3381      	adds	r3, #129	; 0x81
    1d96:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    1d98:	2013      	movs	r0, #19
    1d9a:	4240      	negs	r0, r0
    1d9c:	e7c2      	b.n	1d24 <_spi_m_sync_trans+0x74>
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    1d9e:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    1da0:	079b      	lsls	r3, r3, #30
    1da2:	d0fc      	beq.n	1d9e <_spi_m_sync_trans+0xee>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    1da4:	2303      	movs	r3, #3
    1da6:	7623      	strb	r3, [r4, #24]
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
    1da8:	b009      	add	sp, #36	; 0x24
    1daa:	bc0c      	pop	{r2, r3}
    1dac:	4690      	mov	r8, r2
    1dae:	4699      	mov	r9, r3
    1db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ERR_BUSY;
    1db2:	2004      	movs	r0, #4
    1db4:	4240      	negs	r0, r0
    1db6:	e7f7      	b.n	1da8 <_spi_m_sync_trans+0xf8>
    1db8:	00000ab2 	.word	0x00000ab2
    1dbc:	00004258 	.word	0x00004258
    1dc0:	000013a5 	.word	0x000013a5

00001dc4 <_sysctrl_init_sources>:
}

static inline void hri_sysctrl_write_XOSC32K_reg(const void *const hw, hri_sysctrl_xosc32k_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->XOSC32K.reg = data;
    1dc4:	4a14      	ldr	r2, [pc, #80]	; (1e18 <_sysctrl_init_sources+0x54>)
    1dc6:	2366      	movs	r3, #102	; 0x66
    1dc8:	8293      	strh	r3, [r2, #20]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    1dca:	6a11      	ldr	r1, [r2, #32]
	tmp = (tmp & SYSCTRL_OSC8M_CALIB_Msk) >> SYSCTRL_OSC8M_CALIB_Pos;
    1dcc:	0c09      	lsrs	r1, r1, #16
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    1dce:	6a13      	ldr	r3, [r2, #32]

#if CONF_OSC8M_CONFIG == 1
	calib = hri_sysctrl_read_OSC8M_CALIB_bf(hw);

	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    1dd0:	0f9b      	lsrs	r3, r3, #30
    1dd2:	079b      	lsls	r3, r3, #30
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    1dd4:	0409      	lsls	r1, r1, #16
    1dd6:	4811      	ldr	r0, [pc, #68]	; (1e1c <_sysctrl_init_sources+0x58>)
    1dd8:	4001      	ands	r1, r0
#endif
	                                SYSCTRL_OSC8M_PRESC(CONF_OSC8M_PRESC)
	                                | (CONF_OSC8M_RUNSTDBY << SYSCTRL_OSC8M_RUNSTDBY_Pos)
    1dda:	430b      	orrs	r3, r1
	hri_sysctrl_write_OSC8M_reg(hw,
    1ddc:	2102      	movs	r1, #2
    1dde:	430b      	orrs	r3, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    1de0:	6213      	str	r3, [r2, #32]
	tmp = ((Sysctrl *)hw)->OSC32K.reg;
    1de2:	6993      	ldr	r3, [r2, #24]
	tmp = (tmp & SYSCTRL_OSC32K_CALIB_Msk) >> SYSCTRL_OSC32K_CALIB_Pos;
    1de4:	0c1b      	lsrs	r3, r3, #16
	hri_sysctrl_write_OSC32K_reg(
	    hw,
#if CONF_OSC32K_OVERWRITE_CALIBRATION == 1
	    SYSCTRL_OSC32K_CALIB(CONF_OSC32K_CALIB) |
#else
	    SYSCTRL_OSC32K_CALIB(calib) |
    1de6:	041b      	lsls	r3, r3, #16
    1de8:	21fe      	movs	r1, #254	; 0xfe
    1dea:	03c9      	lsls	r1, r1, #15
    1dec:	400b      	ands	r3, r1
#endif
	        (CONF_OSC32K_WRTLOCK << SYSCTRL_OSC32K_WRTLOCK_Pos) | SYSCTRL_OSC32K_STARTUP(CONF_OSC32K_STARTUP)
	        | (CONF_OSC32K_RUNSTDBY << SYSCTRL_OSC32K_RUNSTDBY_Pos) | (CONF_OSC32K_EN1K << SYSCTRL_OSC32K_EN1K_Pos)
	        | (CONF_OSC32K_EN32K << SYSCTRL_OSC32K_EN32K_Pos) | (1 << SYSCTRL_OSC32K_ENABLE_Pos));
    1dee:	2146      	movs	r1, #70	; 0x46
    1df0:	430b      	orrs	r3, r1
	((Sysctrl *)hw)->OSC32K.reg = data;
    1df2:	6193      	str	r3, [r2, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    1df4:	7f13      	ldrb	r3, [r2, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    1df6:	3927      	subs	r1, #39	; 0x27
    1df8:	400b      	ands	r3, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    1dfa:	7713      	strb	r3, [r2, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) >> SYSCTRL_PCLKSR_XOSC32KRDY_Pos;
    1dfc:	4b06      	ldr	r3, [pc, #24]	; (1e18 <_sysctrl_init_sources+0x54>)
    1dfe:	68db      	ldr	r3, [r3, #12]
	                                    (CONF_OSC32K_WRTLOCK << SYSCTRL_OSCULP32K_WRTLOCK_Pos));
#endif

#if CONF_XOSC32K_CONFIG == 1
#if CONF_XOSC32K_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_XOSC32KRDY_bit(hw))
    1e00:	079b      	lsls	r3, r3, #30
    1e02:	d5fb      	bpl.n	1dfc <_sysctrl_init_sources+0x38>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) >> SYSCTRL_PCLKSR_OSC32KRDY_Pos;
    1e04:	4b04      	ldr	r3, [pc, #16]	; (1e18 <_sysctrl_init_sources+0x54>)
    1e06:	68db      	ldr	r3, [r3, #12]
#endif
#endif

#if CONF_OSC32K_CONFIG == 1
#if CONF_OSC32K_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC32KRDY_bit(hw))
    1e08:	075b      	lsls	r3, r3, #29
    1e0a:	d5fb      	bpl.n	1e04 <_sysctrl_init_sources+0x40>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    1e0c:	4b02      	ldr	r3, [pc, #8]	; (1e18 <_sysctrl_init_sources+0x54>)
    1e0e:	68db      	ldr	r3, [r3, #12]
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    1e10:	071b      	lsls	r3, r3, #28
    1e12:	d5fb      	bpl.n	1e0c <_sysctrl_init_sources+0x48>
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    1e14:	4770      	bx	lr
    1e16:	46c0      	nop			; (mov r8, r8)
    1e18:	40000800 	.word	0x40000800
    1e1c:	0fff0000 	.word	0x0fff0000

00001e20 <_sysctrl_init_referenced_generators>:
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    1e20:	2202      	movs	r2, #2
    1e22:	4b1f      	ldr	r3, [pc, #124]	; (1ea0 <_sysctrl_init_referenced_generators+0x80>)
    1e24:	849a      	strh	r2, [r3, #36]	; 0x24
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    1e26:	4b1e      	ldr	r3, [pc, #120]	; (1ea0 <_sysctrl_init_referenced_generators+0x80>)
    1e28:	68db      	ldr	r3, [r3, #12]
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    1e2a:	06db      	lsls	r3, r3, #27
    1e2c:	d5fb      	bpl.n	1e26 <_sysctrl_init_referenced_generators+0x6>
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
    1e2e:	4a1d      	ldr	r2, [pc, #116]	; (1ea4 <_sysctrl_init_referenced_generators+0x84>)
    1e30:	4b1b      	ldr	r3, [pc, #108]	; (1ea0 <_sysctrl_init_referenced_generators+0x80>)
    1e32:	62da      	str	r2, [r3, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    1e34:	4b1c      	ldr	r3, [pc, #112]	; (1ea8 <_sysctrl_init_referenced_generators+0x88>)
    1e36:	681b      	ldr	r3, [r3, #0]
    1e38:	0e9b      	lsrs	r3, r3, #26
    1e3a:	2b3f      	cmp	r3, #63	; 0x3f
    1e3c:	d028      	beq.n	1e90 <_sysctrl_init_referenced_generators+0x70>
    1e3e:	029b      	lsls	r3, r3, #10
    1e40:	2280      	movs	r2, #128	; 0x80
    1e42:	0092      	lsls	r2, r2, #2
    1e44:	431a      	orrs	r2, r3
	((Sysctrl *)hw)->DFLLVAL.reg = data;
    1e46:	4b16      	ldr	r3, [pc, #88]	; (1ea0 <_sysctrl_init_referenced_generators+0x80>)
    1e48:	629a      	str	r2, [r3, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    1e4a:	2293      	movs	r2, #147	; 0x93
    1e4c:	0052      	lsls	r2, r2, #1
    1e4e:	849a      	strh	r2, [r3, #36]	; 0x24
}

static inline void hri_sysctrl_write_DPLLCTRLA_reg(const void *const hw, hri_sysctrl_dpllctrla_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DPLLCTRLA.reg = data;
    1e50:	2142      	movs	r1, #66	; 0x42
    1e52:	3ae2      	subs	r2, #226	; 0xe2
    1e54:	5499      	strb	r1, [r3, r2]
}

static inline void hri_sysctrl_write_DPLLRATIO_reg(const void *const hw, hri_sysctrl_dpllratio_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DPLLRATIO.reg = data;
    1e56:	4a15      	ldr	r2, [pc, #84]	; (1eac <_sysctrl_init_referenced_generators+0x8c>)
    1e58:	649a      	str	r2, [r3, #72]	; 0x48
}

static inline void hri_sysctrl_write_DPLLCTRLB_reg(const void *const hw, hri_sysctrl_dpllctrlb_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DPLLCTRLB.reg = data;
    1e5a:	2200      	movs	r2, #0
    1e5c:	64da      	str	r2, [r3, #76]	; 0x4c
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
    1e5e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
	        | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
    1e60:	075b      	lsls	r3, r3, #29
    1e62:	d518      	bpl.n	1e96 <_sysctrl_init_referenced_generators+0x76>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    1e64:	4b0e      	ldr	r3, [pc, #56]	; (1ea0 <_sysctrl_init_referenced_generators+0x80>)
    1e66:	68db      	ldr	r3, [r3, #12]
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;
#else
		hri_sysctrl_pclksr_reg_t status_mask = SYSCTRL_PCLKSR_DFLLRDY;
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
    1e68:	06db      	lsls	r3, r3, #27
    1e6a:	d5fb      	bpl.n	1e64 <_sysctrl_init_referenced_generators+0x44>
	return (((Sysctrl *)hw)->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE) >> SYSCTRL_DPLLSTATUS_ENABLE_Pos;
    1e6c:	2350      	movs	r3, #80	; 0x50
    1e6e:	4a0c      	ldr	r2, [pc, #48]	; (1ea0 <_sysctrl_init_referenced_generators+0x80>)
    1e70:	5cd3      	ldrb	r3, [r2, r3]
#endif
#endif

#if CONF_DPLL_CONFIG == 1
#if CONF_DPLL_ENABLE == 1
	while (!(hri_sysctrl_get_DPLLSTATUS_ENABLE_bit(hw) || hri_sysctrl_get_DPLLSTATUS_LOCK_bit(hw)
    1e72:	075b      	lsls	r3, r3, #29
    1e74:	d407      	bmi.n	1e86 <_sysctrl_init_referenced_generators+0x66>
	return (((Sysctrl *)hw)->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_LOCK) >> SYSCTRL_DPLLSTATUS_LOCK_Pos;
    1e76:	2350      	movs	r3, #80	; 0x50
    1e78:	5cd3      	ldrb	r3, [r2, r3]
    1e7a:	07db      	lsls	r3, r3, #31
    1e7c:	d403      	bmi.n	1e86 <_sysctrl_init_referenced_generators+0x66>
	return (((Sysctrl *)hw)->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_CLKRDY) >> SYSCTRL_DPLLSTATUS_CLKRDY_Pos;
    1e7e:	2350      	movs	r3, #80	; 0x50
    1e80:	5cd3      	ldrb	r3, [r2, r3]
    1e82:	079b      	lsls	r3, r3, #30
    1e84:	d5f2      	bpl.n	1e6c <_sysctrl_init_referenced_generators+0x4c>
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
    1e86:	4b0a      	ldr	r3, [pc, #40]	; (1eb0 <_sysctrl_init_referenced_generators+0x90>)
    1e88:	785b      	ldrb	r3, [r3, #1]
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
    1e8a:	09db      	lsrs	r3, r3, #7
    1e8c:	d1fb      	bne.n	1e86 <_sysctrl_init_referenced_generators+0x66>
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    1e8e:	4770      	bx	lr
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    1e90:	22fc      	movs	r2, #252	; 0xfc
    1e92:	01d2      	lsls	r2, r2, #7
    1e94:	e7d7      	b.n	1e46 <_sysctrl_init_referenced_generators+0x26>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    1e96:	4b02      	ldr	r3, [pc, #8]	; (1ea0 <_sysctrl_init_referenced_generators+0x80>)
    1e98:	68db      	ldr	r3, [r3, #12]
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    1e9a:	06db      	lsls	r3, r3, #27
    1e9c:	d5fb      	bpl.n	1e96 <_sysctrl_init_referenced_generators+0x76>
    1e9e:	e7e5      	b.n	1e6c <_sysctrl_init_referenced_generators+0x4c>
    1ea0:	40000800 	.word	0x40000800
    1ea4:	0401bb80 	.word	0x0401bb80
    1ea8:	00806024 	.word	0x00806024
    1eac:	000e05b7 	.word	0x000e05b7
    1eb0:	40000c00 	.word	0x40000c00

00001eb4 <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    1eb4:	4b02      	ldr	r3, [pc, #8]	; (1ec0 <_system_time_init+0xc>)
    1eb6:	4a03      	ldr	r2, [pc, #12]	; (1ec4 <_system_time_init+0x10>)
    1eb8:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    1eba:	2205      	movs	r2, #5
    1ebc:	601a      	str	r2, [r3, #0]
	                | (1 << SysTick_CTRL_CLKSOURCE_Pos);
}
    1ebe:	4770      	bx	lr
    1ec0:	e000e010 	.word	0xe000e010
    1ec4:	00ffffff 	.word	0x00ffffff

00001ec8 <_delay_init>:
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
    1ec8:	b510      	push	{r4, lr}
	_system_time_init(hw);
    1eca:	4b01      	ldr	r3, [pc, #4]	; (1ed0 <_delay_init+0x8>)
    1ecc:	4798      	blx	r3
}
    1ece:	bd10      	pop	{r4, pc}
    1ed0:	00001eb5 	.word	0x00001eb5

00001ed4 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    1ed4:	b510      	push	{r4, lr}
	void *const hw = device->hw;
    1ed6:	68c3      	ldr	r3, [r0, #12]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    1ed8:	7b9a      	ldrb	r2, [r3, #14]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    1eda:	07d2      	lsls	r2, r2, #31
    1edc:	d400      	bmi.n	1ee0 <tc_interrupt_handler+0xc>
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
	}
}
    1ede:	bd10      	pop	{r4, pc}
}

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    1ee0:	2201      	movs	r2, #1
    1ee2:	739a      	strb	r2, [r3, #14]
		device->timer_cb.period_expired(device);
    1ee4:	6803      	ldr	r3, [r0, #0]
    1ee6:	4798      	blx	r3
}
    1ee8:	e7f9      	b.n	1ede <tc_interrupt_handler+0xa>
	...

00001eec <tc_get_hardware_index>:
 * \param[in] hw The pointer to hardware instance
 */
static uint8_t tc_get_hardware_index(const void *const hw)
{
#ifndef _UNIT_TEST_
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    1eec:	4b02      	ldr	r3, [pc, #8]	; (1ef8 <tc_get_hardware_index+0xc>)
    1eee:	469c      	mov	ip, r3
    1ef0:	4460      	add	r0, ip
    1ef2:	0a80      	lsrs	r0, r0, #10
    1ef4:	b2c0      	uxtb	r0, r0
#else
	return ((uint32_t)hw - TC_HW_BASE_ADDR) / sizeof(Tc);
#endif
}
    1ef6:	4770      	bx	lr
    1ef8:	bdffd400 	.word	0xbdffd400

00001efc <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC3) {
    1efc:	4b06      	ldr	r3, [pc, #24]	; (1f18 <_tc_init_irq_param+0x1c>)
    1efe:	4298      	cmp	r0, r3
    1f00:	d003      	beq.n	1f0a <_tc_init_irq_param+0xe>
		_tc3_dev = (struct _timer_device *)dev;
	}
	if (hw == TC4) {
    1f02:	4b06      	ldr	r3, [pc, #24]	; (1f1c <_tc_init_irq_param+0x20>)
    1f04:	4298      	cmp	r0, r3
    1f06:	d003      	beq.n	1f10 <_tc_init_irq_param+0x14>
		_tc4_dev = (struct _timer_device *)dev;
	}
}
    1f08:	4770      	bx	lr
		_tc3_dev = (struct _timer_device *)dev;
    1f0a:	4b05      	ldr	r3, [pc, #20]	; (1f20 <_tc_init_irq_param+0x24>)
    1f0c:	6019      	str	r1, [r3, #0]
    1f0e:	e7f8      	b.n	1f02 <_tc_init_irq_param+0x6>
		_tc4_dev = (struct _timer_device *)dev;
    1f10:	4b03      	ldr	r3, [pc, #12]	; (1f20 <_tc_init_irq_param+0x24>)
    1f12:	6059      	str	r1, [r3, #4]
}
    1f14:	e7f8      	b.n	1f08 <_tc_init_irq_param+0xc>
    1f16:	46c0      	nop			; (mov r8, r8)
    1f18:	42002c00 	.word	0x42002c00
    1f1c:	42003000 	.word	0x42003000
    1f20:	20000128 	.word	0x20000128

00001f24 <get_tc_index>:
{
    1f24:	b510      	push	{r4, lr}
	uint8_t tc_offset = tc_get_hardware_index(hw) + TC_NUMBER_OFFSET;
    1f26:	4b0e      	ldr	r3, [pc, #56]	; (1f60 <get_tc_index+0x3c>)
    1f28:	4798      	blx	r3
    1f2a:	3003      	adds	r0, #3
    1f2c:	b2c0      	uxtb	r0, r0
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    1f2e:	2300      	movs	r3, #0
    1f30:	2b01      	cmp	r3, #1
    1f32:	d80b      	bhi.n	1f4c <get_tc_index+0x28>
		if (_tcs[i].number == tc_offset) {
    1f34:	009a      	lsls	r2, r3, #2
    1f36:	18d2      	adds	r2, r2, r3
    1f38:	0091      	lsls	r1, r2, #2
    1f3a:	4a0a      	ldr	r2, [pc, #40]	; (1f64 <get_tc_index+0x40>)
    1f3c:	5c8a      	ldrb	r2, [r1, r2]
    1f3e:	4290      	cmp	r0, r2
    1f40:	d002      	beq.n	1f48 <get_tc_index+0x24>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    1f42:	3301      	adds	r3, #1
    1f44:	b2db      	uxtb	r3, r3
    1f46:	e7f3      	b.n	1f30 <get_tc_index+0xc>
			return i;
    1f48:	b258      	sxtb	r0, r3
    1f4a:	e007      	b.n	1f5c <get_tc_index+0x38>
	ASSERT(false);
    1f4c:	22a4      	movs	r2, #164	; 0xa4
    1f4e:	0052      	lsls	r2, r2, #1
    1f50:	4905      	ldr	r1, [pc, #20]	; (1f68 <get_tc_index+0x44>)
    1f52:	2000      	movs	r0, #0
    1f54:	4b05      	ldr	r3, [pc, #20]	; (1f6c <get_tc_index+0x48>)
    1f56:	4798      	blx	r3
	return -1;
    1f58:	2001      	movs	r0, #1
    1f5a:	4240      	negs	r0, r0
}
    1f5c:	bd10      	pop	{r4, pc}
    1f5e:	46c0      	nop			; (mov r8, r8)
    1f60:	00001eed 	.word	0x00001eed
    1f64:	00004274 	.word	0x00004274
    1f68:	0000429c 	.word	0x0000429c
    1f6c:	000013a5 	.word	0x000013a5

00001f70 <_timer_init>:
{
    1f70:	b570      	push	{r4, r5, r6, lr}
    1f72:	0006      	movs	r6, r0
    1f74:	000c      	movs	r4, r1
	int8_t i = get_tc_index(hw);
    1f76:	0008      	movs	r0, r1
    1f78:	4b3f      	ldr	r3, [pc, #252]	; (2078 <STACK_SIZE+0x78>)
    1f7a:	4798      	blx	r3
    1f7c:	0005      	movs	r5, r0
	device->hw = hw;
    1f7e:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    1f80:	228d      	movs	r2, #141	; 0x8d
    1f82:	493e      	ldr	r1, [pc, #248]	; (207c <STACK_SIZE+0x7c>)
    1f84:	2001      	movs	r0, #1
    1f86:	4b3e      	ldr	r3, [pc, #248]	; (2080 <STACK_SIZE+0x80>)
    1f88:	4798      	blx	r3
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    1f8a:	7be3      	ldrb	r3, [r4, #15]
    1f8c:	09db      	lsrs	r3, r3, #7
    1f8e:	d1fc      	bne.n	1f8a <_timer_init+0x1a>
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1f90:	8823      	ldrh	r3, [r4, #0]
	if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    1f92:	079b      	lsls	r3, r3, #30
    1f94:	d504      	bpl.n	1fa0 <_timer_init+0x30>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1f96:	2300      	movs	r3, #0
    1f98:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    1f9a:	7be3      	ldrb	r3, [r4, #15]
    1f9c:	09db      	lsrs	r3, r3, #7
    1f9e:	d1fc      	bne.n	1f9a <_timer_init+0x2a>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1fa0:	2301      	movs	r3, #1
    1fa2:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    1fa4:	7be3      	ldrb	r3, [r4, #15]
    1fa6:	09db      	lsrs	r3, r3, #7
    1fa8:	d1fc      	bne.n	1fa4 <_timer_init+0x34>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    1faa:	00aa      	lsls	r2, r5, #2
    1fac:	1952      	adds	r2, r2, r5
    1fae:	0091      	lsls	r1, r2, #2
    1fb0:	4b34      	ldr	r3, [pc, #208]	; (2084 <STACK_SIZE+0x84>)
    1fb2:	185b      	adds	r3, r3, r1
    1fb4:	885a      	ldrh	r2, [r3, #2]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1fb6:	8022      	strh	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    1fb8:	7919      	ldrb	r1, [r3, #4]
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    1fba:	7221      	strb	r1, [r4, #8]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    1fbc:	88db      	ldrh	r3, [r3, #6]
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    1fbe:	8163      	strh	r3, [r4, #10]
    1fc0:	230c      	movs	r3, #12
    1fc2:	4013      	ands	r3, r2
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    1fc4:	2b08      	cmp	r3, #8
    1fc6:	d039      	beq.n	203c <STACK_SIZE+0x3c>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    1fc8:	2b00      	cmp	r3, #0
    1fca:	d143      	bne.n	2054 <STACK_SIZE+0x54>
		hri_tccount16_write_CC_reg(hw, 0, (hri_tccount16_cc_reg_t)_tcs[i].cc0);
    1fcc:	4a2d      	ldr	r2, [pc, #180]	; (2084 <STACK_SIZE+0x84>)
    1fce:	00ab      	lsls	r3, r5, #2
    1fd0:	1958      	adds	r0, r3, r5
    1fd2:	0081      	lsls	r1, r0, #2
    1fd4:	0008      	movs	r0, r1
    1fd6:	1851      	adds	r1, r2, r1
    1fd8:	8989      	ldrh	r1, [r1, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1fda:	8321      	strh	r1, [r4, #24]
		hri_tccount16_write_CC_reg(hw, 1, (hri_tccount16_cc_reg_t)_tcs[i].cc1);
    1fdc:	1812      	adds	r2, r2, r0
    1fde:	8a13      	ldrh	r3, [r2, #16]
    1fe0:	8363      	strh	r3, [r4, #26]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    1fe2:	2301      	movs	r3, #1
    1fe4:	7363      	strb	r3, [r4, #13]
	_tc_init_irq_param(hw, (void *)device);
    1fe6:	0031      	movs	r1, r6
    1fe8:	0020      	movs	r0, r4
    1fea:	4b27      	ldr	r3, [pc, #156]	; (2088 <STACK_SIZE+0x88>)
    1fec:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    1fee:	0020      	movs	r0, r4
    1ff0:	4b26      	ldr	r3, [pc, #152]	; (208c <STACK_SIZE+0x8c>)
    1ff2:	4798      	blx	r3
    1ff4:	3012      	adds	r0, #18
    1ff6:	b2c0      	uxtb	r0, r0
    1ff8:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1ffa:	2b00      	cmp	r3, #0
    1ffc:	db0a      	blt.n	2014 <STACK_SIZE+0x14>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1ffe:	211f      	movs	r1, #31
    2000:	4001      	ands	r1, r0
    2002:	2201      	movs	r2, #1
    2004:	408a      	lsls	r2, r1
    2006:	2180      	movs	r1, #128	; 0x80
    2008:	4c21      	ldr	r4, [pc, #132]	; (2090 <STACK_SIZE+0x90>)
    200a:	5062      	str	r2, [r4, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    200c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2010:	f3bf 8f6f 	isb	sy
  if ((int32_t)(IRQn) >= 0)
    2014:	2b00      	cmp	r3, #0
    2016:	db07      	blt.n	2028 <STACK_SIZE+0x28>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2018:	211f      	movs	r1, #31
    201a:	4001      	ands	r1, r0
    201c:	2201      	movs	r2, #1
    201e:	408a      	lsls	r2, r1
    2020:	21c0      	movs	r1, #192	; 0xc0
    2022:	0049      	lsls	r1, r1, #1
    2024:	4c1a      	ldr	r4, [pc, #104]	; (2090 <STACK_SIZE+0x90>)
    2026:	5062      	str	r2, [r4, r1]
  if ((int32_t)(IRQn) >= 0)
    2028:	2b00      	cmp	r3, #0
    202a:	db05      	blt.n	2038 <STACK_SIZE+0x38>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    202c:	231f      	movs	r3, #31
    202e:	4018      	ands	r0, r3
    2030:	3b1e      	subs	r3, #30
    2032:	4083      	lsls	r3, r0
    2034:	4a16      	ldr	r2, [pc, #88]	; (2090 <STACK_SIZE+0x90>)
    2036:	6013      	str	r3, [r2, #0]
}
    2038:	2000      	movs	r0, #0
    203a:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    203c:	4a11      	ldr	r2, [pc, #68]	; (2084 <STACK_SIZE+0x84>)
    203e:	00ab      	lsls	r3, r5, #2
    2040:	1958      	adds	r0, r3, r5
    2042:	0081      	lsls	r1, r0, #2
    2044:	0008      	movs	r0, r1
    2046:	1851      	adds	r1, r2, r1
    2048:	68c9      	ldr	r1, [r1, #12]
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    204a:	61a1      	str	r1, [r4, #24]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    204c:	1812      	adds	r2, r2, r0
    204e:	6913      	ldr	r3, [r2, #16]
    2050:	61e3      	str	r3, [r4, #28]
    2052:	e7c6      	b.n	1fe2 <_timer_init+0x72>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    2054:	2b04      	cmp	r3, #4
    2056:	d1c4      	bne.n	1fe2 <_timer_init+0x72>
		hri_tccount8_write_CC_reg(hw, 0, (hri_tccount8_cc_reg_t)_tcs[i].cc0);
    2058:	490a      	ldr	r1, [pc, #40]	; (2084 <STACK_SIZE+0x84>)
    205a:	00ab      	lsls	r3, r5, #2
    205c:	1958      	adds	r0, r3, r5
    205e:	0082      	lsls	r2, r0, #2
    2060:	188a      	adds	r2, r1, r2
    2062:	7b10      	ldrb	r0, [r2, #12]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    2064:	7620      	strb	r0, [r4, #24]
		hri_tccount8_write_CC_reg(hw, 1, (hri_tccount8_cc_reg_t)_tcs[i].cc1);
    2066:	7c12      	ldrb	r2, [r2, #16]
    2068:	7662      	strb	r2, [r4, #25]
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    206a:	195d      	adds	r5, r3, r5
    206c:	00ab      	lsls	r3, r5, #2
    206e:	18c9      	adds	r1, r1, r3
    2070:	7a0b      	ldrb	r3, [r1, #8]
	((Tc *)hw)->COUNT8.PER.reg = data;
    2072:	7523      	strb	r3, [r4, #20]
    2074:	e7b5      	b.n	1fe2 <_timer_init+0x72>
    2076:	46c0      	nop			; (mov r8, r8)
    2078:	00001f25 	.word	0x00001f25
    207c:	0000429c 	.word	0x0000429c
    2080:	000013a5 	.word	0x000013a5
    2084:	00004274 	.word	0x00004274
    2088:	00001efd 	.word	0x00001efd
    208c:	00001eed 	.word	0x00001eed
    2090:	e000e100 	.word	0xe000e100

00002094 <_tc_get_timer>:
}
    2094:	2000      	movs	r0, #0
    2096:	4770      	bx	lr

00002098 <TC3_Handler>:
{
    2098:	b510      	push	{r4, lr}
	tc_interrupt_handler(_tc3_dev);
    209a:	4b02      	ldr	r3, [pc, #8]	; (20a4 <TC3_Handler+0xc>)
    209c:	6818      	ldr	r0, [r3, #0]
    209e:	4b02      	ldr	r3, [pc, #8]	; (20a8 <TC3_Handler+0x10>)
    20a0:	4798      	blx	r3
}
    20a2:	bd10      	pop	{r4, pc}
    20a4:	20000128 	.word	0x20000128
    20a8:	00001ed5 	.word	0x00001ed5

000020ac <TC4_Handler>:
{
    20ac:	b510      	push	{r4, lr}
	tc_interrupt_handler(_tc4_dev);
    20ae:	4b02      	ldr	r3, [pc, #8]	; (20b8 <TC4_Handler+0xc>)
    20b0:	6858      	ldr	r0, [r3, #4]
    20b2:	4b02      	ldr	r3, [pc, #8]	; (20bc <TC4_Handler+0x10>)
    20b4:	4798      	blx	r3
}
    20b6:	bd10      	pop	{r4, pc}
    20b8:	20000128 	.word	0x20000128
    20bc:	00001ed5 	.word	0x00001ed5

000020c0 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    20c0:	2000      	movs	r0, #0
    20c2:	4770      	bx	lr

000020c4 <_usb_load_calib>:
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 55
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    20c4:	4b12      	ldr	r3, [pc, #72]	; (2110 <_usb_load_calib+0x4c>)
    20c6:	681a      	ldr	r2, [r3, #0]
    20c8:	0b53      	lsrs	r3, r2, #13
	uint32_t pad_transn
    20ca:	211f      	movs	r1, #31
    20cc:	400b      	ands	r3, r1
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    20ce:	0c90      	lsrs	r0, r2, #18
	uint32_t pad_transp
    20d0:	4001      	ands	r1, r0
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    20d2:	0dd0      	lsrs	r0, r2, #23
    20d4:	2207      	movs	r2, #7
    20d6:	4002      	ands	r2, r0
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0x1F) {
    20d8:	2b1f      	cmp	r3, #31
    20da:	d012      	beq.n	2102 <_usb_load_calib+0x3e>
		pad_transn = 5;
	}
	if (pad_transp == 0x1F) {
    20dc:	291f      	cmp	r1, #31
    20de:	d012      	beq.n	2106 <_usb_load_calib+0x42>
		pad_transp = 29;
	}
	if (pad_trim == 0x7) {
    20e0:	2a07      	cmp	r2, #7
    20e2:	d012      	beq.n	210a <_usb_load_calib+0x46>
		pad_trim = 5;
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    20e4:	019b      	lsls	r3, r3, #6
    20e6:	430b      	orrs	r3, r1
    20e8:	0312      	lsls	r2, r2, #12
    20ea:	4313      	orrs	r3, r2
    20ec:	4a09      	ldr	r2, [pc, #36]	; (2114 <_usb_load_calib+0x50>)
    20ee:	8513      	strh	r3, [r2, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    20f0:	78d3      	ldrb	r3, [r2, #3]
    20f2:	2103      	movs	r1, #3
    20f4:	430b      	orrs	r3, r1
    20f6:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    20f8:	78d3      	ldrb	r3, [r2, #3]
    20fa:	210c      	movs	r1, #12
    20fc:	430b      	orrs	r3, r1
    20fe:	70d3      	strb	r3, [r2, #3]
}
    2100:	4770      	bx	lr
		pad_transn = 5;
    2102:	3b1a      	subs	r3, #26
    2104:	e7ea      	b.n	20dc <_usb_load_calib+0x18>
		pad_transp = 29;
    2106:	3902      	subs	r1, #2
    2108:	e7ea      	b.n	20e0 <_usb_load_calib+0x1c>
		pad_trim = 5;
    210a:	3a02      	subs	r2, #2
    210c:	e7ea      	b.n	20e4 <_usb_load_calib+0x20>
    210e:	46c0      	nop			; (mov r8, r8)
    2110:	00806024 	.word	0x00806024
    2114:	41005000 	.word	0x41005000

00002118 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    2118:	b510      	push	{r4, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    211a:	7c83      	ldrb	r3, [r0, #18]
    211c:	220f      	movs	r2, #15
    211e:	4013      	ands	r3, r2
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2120:	7cc1      	ldrb	r1, [r0, #19]
    2122:	3a08      	subs	r2, #8
    2124:	400a      	ands	r2, r1

	if (!is_ctrl) {
    2126:	2a01      	cmp	r2, #1
    2128:	d00d      	beq.n	2146 <_usb_d_dev_handle_setup+0x2e>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    212a:	001a      	movs	r2, r3
    212c:	3208      	adds	r2, #8
    212e:	0152      	lsls	r2, r2, #5
    2130:	4919      	ldr	r1, [pc, #100]	; (2198 <_usb_d_dev_handle_setup+0x80>)
    2132:	468c      	mov	ip, r1
    2134:	4462      	add	r2, ip
    2136:	2110      	movs	r1, #16
    2138:	71d1      	strb	r1, [r2, #7]
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    213a:	015b      	lsls	r3, r3, #5
    213c:	4a17      	ldr	r2, [pc, #92]	; (219c <_usb_d_dev_handle_setup+0x84>)
    213e:	4694      	mov	ip, r2
    2140:	4463      	add	r3, ip
    2142:	7019      	strb	r1, [r3, #0]
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
}
    2144:	bd10      	pop	{r4, pc}
	if (_usb_d_dev_ep_is_busy(ept)) {
    2146:	064a      	lsls	r2, r1, #25
    2148:	d50c      	bpl.n	2164 <_usb_d_dev_handle_setup+0x4c>
		ept->flags.bits.is_busy = 0;
    214a:	7cc2      	ldrb	r2, [r0, #19]
    214c:	2140      	movs	r1, #64	; 0x40
    214e:	438a      	bics	r2, r1
    2150:	74c2      	strb	r2, [r0, #19]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2152:	001a      	movs	r2, r3
    2154:	3208      	adds	r2, #8
    2156:	0152      	lsls	r2, r2, #5
    2158:	4c0f      	ldr	r4, [pc, #60]	; (2198 <_usb_d_dev_handle_setup+0x80>)
    215a:	46a4      	mov	ip, r4
    215c:	4462      	add	r2, ip
    215e:	2480      	movs	r4, #128	; 0x80
    2160:	7114      	strb	r4, [r2, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2162:	7151      	strb	r1, [r2, #5]
	ept->flags.bits.is_stalled = 0;
    2164:	7cc2      	ldrb	r2, [r0, #19]
    2166:	2108      	movs	r1, #8
    2168:	438a      	bics	r2, r1
    216a:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    216c:	015a      	lsls	r2, r3, #5
    216e:	490c      	ldr	r1, [pc, #48]	; (21a0 <_usb_d_dev_handle_setup+0x88>)
    2170:	1889      	adds	r1, r1, r2
    2172:	2400      	movs	r4, #0
    2174:	728c      	strb	r4, [r1, #10]
    2176:	768c      	strb	r4, [r1, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2178:	3308      	adds	r3, #8
    217a:	015b      	lsls	r3, r3, #5
    217c:	4906      	ldr	r1, [pc, #24]	; (2198 <_usb_d_dev_handle_setup+0x80>)
    217e:	468c      	mov	ip, r1
    2180:	4463      	add	r3, ip
    2182:	216f      	movs	r1, #111	; 0x6f
    2184:	71d9      	strb	r1, [r3, #7]
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2186:	4b05      	ldr	r3, [pc, #20]	; (219c <_usb_d_dev_handle_setup+0x84>)
    2188:	469c      	mov	ip, r3
    218a:	4462      	add	r2, ip
    218c:	7011      	strb	r1, [r2, #0]
	dev_inst.ep_callbacks.setup(ept->ep);
    218e:	4b05      	ldr	r3, [pc, #20]	; (21a4 <_usb_d_dev_handle_setup+0x8c>)
    2190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2192:	7c80      	ldrb	r0, [r0, #18]
    2194:	4798      	blx	r3
    2196:	e7d5      	b.n	2144 <_usb_d_dev_handle_setup+0x2c>
    2198:	41005000 	.word	0x41005000
    219c:	41005108 	.word	0x41005108
    21a0:	20000130 	.word	0x20000130
    21a4:	200001b0 	.word	0x200001b0

000021a8 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    21a8:	b510      	push	{r4, lr}
	uint8_t epn = USB_EP_GET_N(ept->ep);
    21aa:	7c82      	ldrb	r2, [r0, #18]
    21ac:	230f      	movs	r3, #15
    21ae:	4013      	ands	r3, r2
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    21b0:	2220      	movs	r2, #32
    21b2:	408a      	lsls	r2, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    21b4:	b2d2      	uxtb	r2, r2
    21b6:	015b      	lsls	r3, r3, #5
    21b8:	4905      	ldr	r1, [pc, #20]	; (21d0 <_usb_d_dev_handle_stall+0x28>)
    21ba:	468c      	mov	ip, r1
    21bc:	4463      	add	r3, ip
    21be:	701a      	strb	r2, [r3, #0]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    21c0:	4b04      	ldr	r3, [pc, #16]	; (21d4 <_usb_d_dev_handle_stall+0x2c>)
    21c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    21c4:	6882      	ldr	r2, [r0, #8]
    21c6:	7c80      	ldrb	r0, [r0, #18]
    21c8:	2101      	movs	r1, #1
    21ca:	4798      	blx	r3
}
    21cc:	bd10      	pop	{r4, pc}
    21ce:	46c0      	nop			; (mov r8, r8)
    21d0:	41005108 	.word	0x41005108
    21d4:	200001b0 	.word	0x200001b0

000021d8 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    21d8:	b510      	push	{r4, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    21da:	7c83      	ldrb	r3, [r0, #18]
    21dc:	2bff      	cmp	r3, #255	; 0xff
    21de:	d002      	beq.n	21e6 <_usb_d_dev_trans_done+0xe>
    21e0:	7cc2      	ldrb	r2, [r0, #19]
    21e2:	0652      	lsls	r2, r2, #25
    21e4:	d400      	bmi.n	21e8 <_usb_d_dev_trans_done+0x10>
		return;
	}
	ept->flags.bits.is_busy = 0;
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
}
    21e6:	bd10      	pop	{r4, pc}
	ept->flags.bits.is_busy = 0;
    21e8:	7cc2      	ldrb	r2, [r0, #19]
    21ea:	2440      	movs	r4, #64	; 0x40
    21ec:	43a2      	bics	r2, r4
    21ee:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    21f0:	4a02      	ldr	r2, [pc, #8]	; (21fc <_usb_d_dev_trans_done+0x24>)
    21f2:	6b14      	ldr	r4, [r2, #48]	; 0x30
    21f4:	6882      	ldr	r2, [r0, #8]
    21f6:	0018      	movs	r0, r3
    21f8:	47a0      	blx	r4
    21fa:	e7f4      	b.n	21e6 <_usb_d_dev_trans_done+0xe>
    21fc:	200001b0 	.word	0x200001b0

00002200 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    2200:	b5f0      	push	{r4, r5, r6, r7, lr}
    2202:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2204:	7c84      	ldrb	r4, [r0, #18]
    2206:	230f      	movs	r3, #15
    2208:	4023      	ands	r3, r4
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    220a:	4d18      	ldr	r5, [pc, #96]	; (226c <_usb_d_dev_trans_stop+0x6c>)
    220c:	882e      	ldrh	r6, [r5, #0]
    220e:	ad01      	add	r5, sp, #4
    2210:	802e      	strh	r6, [r5, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    2212:	2cff      	cmp	r4, #255	; 0xff
    2214:	d01e      	beq.n	2254 <_usb_d_dev_trans_stop+0x54>
    2216:	7cc4      	ldrb	r4, [r0, #19]
    2218:	0664      	lsls	r4, r4, #25
    221a:	d51b      	bpl.n	2254 <_usb_d_dev_trans_stop+0x54>
		return;
	}
	/* Stop transfer */
	if (dir) {
    221c:	2900      	cmp	r1, #0
    221e:	d01b      	beq.n	2258 <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2220:	001c      	movs	r4, r3
    2222:	3408      	adds	r4, #8
    2224:	0164      	lsls	r4, r4, #5
    2226:	4d12      	ldr	r5, [pc, #72]	; (2270 <_usb_d_dev_trans_stop+0x70>)
    2228:	46ac      	mov	ip, r5
    222a:	4464      	add	r4, ip
    222c:	2580      	movs	r5, #128	; 0x80
    222e:	7125      	strb	r5, [r4, #4]
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    2230:	ad01      	add	r5, sp, #4
    2232:	5c6e      	ldrb	r6, [r5, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2234:	001c      	movs	r4, r3
    2236:	3408      	adds	r4, #8
    2238:	0164      	lsls	r4, r4, #5
    223a:	4f0d      	ldr	r7, [pc, #52]	; (2270 <_usb_d_dev_trans_stop+0x70>)
    223c:	46bc      	mov	ip, r7
    223e:	4464      	add	r4, ip
    2240:	71e6      	strb	r6, [r4, #7]
	_usbd_ep_int_dis(epn, intflags[dir]);
    2242:	5c69      	ldrb	r1, [r5, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2244:	015b      	lsls	r3, r3, #5
    2246:	4c0b      	ldr	r4, [pc, #44]	; (2274 <_usb_d_dev_trans_stop+0x74>)
    2248:	46a4      	mov	ip, r4
    224a:	4463      	add	r3, ip
    224c:	7019      	strb	r1, [r3, #0]
	_usb_d_dev_trans_done(ept, code);
    224e:	0011      	movs	r1, r2
    2250:	4b09      	ldr	r3, [pc, #36]	; (2278 <_usb_d_dev_trans_stop+0x78>)
    2252:	4798      	blx	r3
}
    2254:	b003      	add	sp, #12
    2256:	bdf0      	pop	{r4, r5, r6, r7, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2258:	001c      	movs	r4, r3
    225a:	3408      	adds	r4, #8
    225c:	0164      	lsls	r4, r4, #5
    225e:	4d04      	ldr	r5, [pc, #16]	; (2270 <_usb_d_dev_trans_stop+0x70>)
    2260:	46ac      	mov	ip, r5
    2262:	4464      	add	r4, ip
    2264:	2540      	movs	r5, #64	; 0x40
    2266:	7165      	strb	r5, [r4, #5]
    2268:	e7e2      	b.n	2230 <_usb_d_dev_trans_stop+0x30>
    226a:	46c0      	nop			; (mov r8, r8)
    226c:	000042b0 	.word	0x000042b0
    2270:	41005000 	.word	0x41005000
    2274:	41005108 	.word	0x41005108
    2278:	000021d9 	.word	0x000021d9

0000227c <_usb_d_dev_handle_trfail>:
{
    227c:	b5f0      	push	{r4, r5, r6, r7, lr}
    227e:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    2280:	7c83      	ldrb	r3, [r0, #18]
    2282:	220f      	movs	r2, #15
    2284:	4013      	ands	r3, r2
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    2286:	4a3c      	ldr	r2, [pc, #240]	; (2378 <_usb_d_dev_handle_trfail+0xfc>)
    2288:	8894      	ldrh	r4, [r2, #4]
    228a:	aa01      	add	r2, sp, #4
    228c:	8014      	strh	r4, [r2, #0]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    228e:	015a      	lsls	r2, r3, #5
    2290:	4c3a      	ldr	r4, [pc, #232]	; (237c <_usb_d_dev_handle_trfail+0x100>)
    2292:	18a4      	adds	r4, r4, r2
	uint8_t            eptype
    2294:	2900      	cmp	r1, #0
    2296:	d033      	beq.n	2300 <_usb_d_dev_handle_trfail+0x84>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    2298:	001a      	movs	r2, r3
    229a:	3208      	adds	r2, #8
    229c:	0152      	lsls	r2, r2, #5
    229e:	4d38      	ldr	r5, [pc, #224]	; (2380 <_usb_d_dev_handle_trfail+0x104>)
    22a0:	5d52      	ldrb	r2, [r2, r5]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    22a2:	0912      	lsrs	r2, r2, #4
    22a4:	2507      	movs	r5, #7
    22a6:	4015      	ands	r5, r2
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    22a8:	7cc2      	ldrb	r2, [r0, #19]
    22aa:	2607      	movs	r6, #7
    22ac:	4016      	ands	r6, r2
	st.reg = bank[bank_n].STATUS_BK.reg;
    22ae:	010a      	lsls	r2, r1, #4
    22b0:	18a2      	adds	r2, r4, r2
    22b2:	7a94      	ldrb	r4, [r2, #10]
    22b4:	b2e4      	uxtb	r4, r4
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    22b6:	2d02      	cmp	r5, #2
    22b8:	d02a      	beq.n	2310 <_usb_d_dev_handle_trfail+0x94>
	} else if (st.bit.ERRORFLOW) {
    22ba:	07a4      	lsls	r4, r4, #30
    22bc:	d544      	bpl.n	2348 <_usb_d_dev_handle_trfail+0xcc>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    22be:	7a94      	ldrb	r4, [r2, #10]
    22c0:	2502      	movs	r5, #2
    22c2:	43ac      	bics	r4, r5
    22c4:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    22c6:	ac01      	add	r4, sp, #4
    22c8:	5c65      	ldrb	r5, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    22ca:	001a      	movs	r2, r3
    22cc:	3208      	adds	r2, #8
    22ce:	0152      	lsls	r2, r2, #5
    22d0:	4f2b      	ldr	r7, [pc, #172]	; (2380 <_usb_d_dev_handle_trfail+0x104>)
    22d2:	46bc      	mov	ip, r7
    22d4:	4462      	add	r2, ip
    22d6:	71d5      	strb	r5, [r2, #7]
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    22d8:	5c62      	ldrb	r2, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    22da:	015b      	lsls	r3, r3, #5
    22dc:	4c29      	ldr	r4, [pc, #164]	; (2384 <_usb_d_dev_handle_trfail+0x108>)
    22de:	46a4      	mov	ip, r4
    22e0:	4463      	add	r3, ip
    22e2:	701a      	strb	r2, [r3, #0]
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    22e4:	2e01      	cmp	r6, #1
    22e6:	d145      	bne.n	2374 <_usb_d_dev_handle_trfail+0xf8>
    22e8:	7cc3      	ldrb	r3, [r0, #19]
    22ea:	065b      	lsls	r3, r3, #25
    22ec:	d542      	bpl.n	2374 <_usb_d_dev_handle_trfail+0xf8>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    22ee:	7cc3      	ldrb	r3, [r0, #19]
    22f0:	09db      	lsrs	r3, r3, #7
    22f2:	4299      	cmp	r1, r3
    22f4:	d03e      	beq.n	2374 <_usb_d_dev_handle_trfail+0xf8>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    22f6:	2200      	movs	r2, #0
    22f8:	0019      	movs	r1, r3
    22fa:	4b23      	ldr	r3, [pc, #140]	; (2388 <_usb_d_dev_handle_trfail+0x10c>)
    22fc:	4798      	blx	r3
    22fe:	e039      	b.n	2374 <_usb_d_dev_handle_trfail+0xf8>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    2300:	001a      	movs	r2, r3
    2302:	3208      	adds	r2, #8
    2304:	0152      	lsls	r2, r2, #5
    2306:	4d1e      	ldr	r5, [pc, #120]	; (2380 <_usb_d_dev_handle_trfail+0x104>)
    2308:	5d55      	ldrb	r5, [r2, r5]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    230a:	2207      	movs	r2, #7
    230c:	4015      	ands	r5, r2
    230e:	e7cb      	b.n	22a8 <_usb_d_dev_handle_trfail+0x2c>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    2310:	07e5      	lsls	r5, r4, #31
    2312:	d5d2      	bpl.n	22ba <_usb_d_dev_handle_trfail+0x3e>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    2314:	7a94      	ldrb	r4, [r2, #10]
    2316:	2501      	movs	r5, #1
    2318:	43ac      	bics	r4, r5
    231a:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    231c:	ac01      	add	r4, sp, #4
    231e:	5c65      	ldrb	r5, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2320:	001a      	movs	r2, r3
    2322:	3208      	adds	r2, #8
    2324:	0152      	lsls	r2, r2, #5
    2326:	4e16      	ldr	r6, [pc, #88]	; (2380 <_usb_d_dev_handle_trfail+0x104>)
    2328:	46b4      	mov	ip, r6
    232a:	4462      	add	r2, ip
    232c:	71d5      	strb	r5, [r2, #7]
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    232e:	5c62      	ldrb	r2, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2330:	015b      	lsls	r3, r3, #5
    2332:	4c14      	ldr	r4, [pc, #80]	; (2384 <_usb_d_dev_handle_trfail+0x108>)
    2334:	46a4      	mov	ip, r4
    2336:	4463      	add	r3, ip
    2338:	701a      	strb	r2, [r3, #0]
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    233a:	1e4b      	subs	r3, r1, #1
    233c:	4199      	sbcs	r1, r3
    233e:	b2c9      	uxtb	r1, r1
    2340:	2204      	movs	r2, #4
    2342:	4b11      	ldr	r3, [pc, #68]	; (2388 <_usb_d_dev_handle_trfail+0x10c>)
    2344:	4798      	blx	r3
    2346:	e015      	b.n	2374 <_usb_d_dev_handle_trfail+0xf8>
	bank->STATUS_BK.reg     = 0;
    2348:	005a      	lsls	r2, r3, #1
    234a:	1852      	adds	r2, r2, r1
    234c:	0112      	lsls	r2, r2, #4
    234e:	480b      	ldr	r0, [pc, #44]	; (237c <_usb_d_dev_handle_trfail+0x100>)
    2350:	1882      	adds	r2, r0, r2
    2352:	2000      	movs	r0, #0
    2354:	7290      	strb	r0, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    2356:	a801      	add	r0, sp, #4
    2358:	5c44      	ldrb	r4, [r0, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    235a:	001a      	movs	r2, r3
    235c:	3208      	adds	r2, #8
    235e:	0152      	lsls	r2, r2, #5
    2360:	4d07      	ldr	r5, [pc, #28]	; (2380 <_usb_d_dev_handle_trfail+0x104>)
    2362:	46ac      	mov	ip, r5
    2364:	4462      	add	r2, ip
    2366:	71d4      	strb	r4, [r2, #7]
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    2368:	5c42      	ldrb	r2, [r0, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    236a:	015b      	lsls	r3, r3, #5
    236c:	4905      	ldr	r1, [pc, #20]	; (2384 <_usb_d_dev_handle_trfail+0x108>)
    236e:	468c      	mov	ip, r1
    2370:	4463      	add	r3, ip
    2372:	701a      	strb	r2, [r3, #0]
}
    2374:	b003      	add	sp, #12
    2376:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2378:	000042b0 	.word	0x000042b0
    237c:	20000130 	.word	0x20000130
    2380:	41005000 	.word	0x41005000
    2384:	41005108 	.word	0x41005108
    2388:	00002201 	.word	0x00002201

0000238c <_usb_d_dev_reset_epts>:
{
    238c:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < USB_D_N_EP; i++) {
    238e:	2500      	movs	r5, #0
    2390:	e018      	b.n	23c4 <_usb_d_dev_reset_epts+0x38>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    2392:	4c10      	ldr	r4, [pc, #64]	; (23d4 <_usb_d_dev_reset_epts+0x48>)
    2394:	3420      	adds	r4, #32
    2396:	00ae      	lsls	r6, r5, #2
    2398:	1973      	adds	r3, r6, r5
    239a:	0098      	lsls	r0, r3, #2
    239c:	3010      	adds	r0, #16
    239e:	1820      	adds	r0, r4, r0
    23a0:	3004      	adds	r0, #4
    23a2:	2103      	movs	r1, #3
    23a4:	4b0c      	ldr	r3, [pc, #48]	; (23d8 <_usb_d_dev_reset_epts+0x4c>)
    23a6:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    23a8:	1972      	adds	r2, r6, r5
    23aa:	0093      	lsls	r3, r2, #2
    23ac:	18e3      	adds	r3, r4, r3
    23ae:	3326      	adds	r3, #38	; 0x26
    23b0:	22ff      	movs	r2, #255	; 0xff
    23b2:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    23b4:	1976      	adds	r6, r6, r5
    23b6:	00b3      	lsls	r3, r6, #2
    23b8:	18e4      	adds	r4, r4, r3
    23ba:	3427      	adds	r4, #39	; 0x27
    23bc:	2300      	movs	r3, #0
    23be:	7023      	strb	r3, [r4, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    23c0:	3501      	adds	r5, #1
    23c2:	b2ed      	uxtb	r5, r5
    23c4:	2d08      	cmp	r5, #8
    23c6:	d9e4      	bls.n	2392 <_usb_d_dev_reset_epts+0x6>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    23c8:	22a0      	movs	r2, #160	; 0xa0
    23ca:	2100      	movs	r1, #0
    23cc:	4803      	ldr	r0, [pc, #12]	; (23dc <_usb_d_dev_reset_epts+0x50>)
    23ce:	4b04      	ldr	r3, [pc, #16]	; (23e0 <_usb_d_dev_reset_epts+0x54>)
    23d0:	4798      	blx	r3
}
    23d2:	bd70      	pop	{r4, r5, r6, pc}
    23d4:	200001b0 	.word	0x200001b0
    23d8:	000021d9 	.word	0x000021d9
    23dc:	20000130 	.word	0x20000130
    23e0:	000040eb 	.word	0x000040eb

000023e4 <_usb_d_dev_in_next>:
{
    23e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    23e6:	46c6      	mov	lr, r8
    23e8:	b500      	push	{lr}
    23ea:	0005      	movs	r5, r0
    23ec:	000e      	movs	r6, r1
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    23ee:	7c83      	ldrb	r3, [r0, #18]
    23f0:	240f      	movs	r4, #15
    23f2:	401c      	ands	r4, r3
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    23f4:	0162      	lsls	r2, r4, #5
    23f6:	4b56      	ldr	r3, [pc, #344]	; (2550 <_usb_d_dev_in_next+0x16c>)
    23f8:	189b      	adds	r3, r3, r2
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    23fa:	2900      	cmp	r1, #0
    23fc:	d058      	beq.n	24b0 <_usb_d_dev_in_next+0xcc>
    23fe:	6959      	ldr	r1, [r3, #20]
    2400:	0489      	lsls	r1, r1, #18
    2402:	0c89      	lsrs	r1, r1, #18
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    2404:	8a2b      	ldrh	r3, [r5, #16]
    2406:	4a53      	ldr	r2, [pc, #332]	; (2554 <_usb_d_dev_in_next+0x170>)
    2408:	4293      	cmp	r3, r2
    240a:	d053      	beq.n	24b4 <_usb_d_dev_in_next+0xd0>
    240c:	3b01      	subs	r3, #1
    240e:	b21b      	sxth	r3, r3
    2410:	400b      	ands	r3, r1
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    2412:	7cea      	ldrb	r2, [r5, #19]
    2414:	2707      	movs	r7, #7
    2416:	4017      	ands	r7, r2
	if (isr) {
    2418:	2e00      	cmp	r6, #0
    241a:	d007      	beq.n	242c <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    241c:	0022      	movs	r2, r4
    241e:	3208      	adds	r2, #8
    2420:	0152      	lsls	r2, r2, #5
    2422:	484d      	ldr	r0, [pc, #308]	; (2558 <_usb_d_dev_in_next+0x174>)
    2424:	4684      	mov	ip, r0
    2426:	4462      	add	r2, ip
    2428:	2002      	movs	r0, #2
    242a:	71d0      	strb	r0, [r2, #7]
	ept->trans_count += trans_count;
    242c:	68aa      	ldr	r2, [r5, #8]
    242e:	4694      	mov	ip, r2
    2430:	4461      	add	r1, ip
    2432:	60a9      	str	r1, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    2434:	686a      	ldr	r2, [r5, #4]
    2436:	4291      	cmp	r1, r2
    2438:	d24e      	bcs.n	24d8 <_usb_d_dev_in_next+0xf4>
		trans_next = ept->trans_size - ept->trans_count;
    243a:	b292      	uxth	r2, r2
    243c:	b28b      	uxth	r3, r1
    243e:	1ad2      	subs	r2, r2, r3
    2440:	b292      	uxth	r2, r2
		if (ept->flags.bits.use_cache) {
    2442:	7ceb      	ldrb	r3, [r5, #19]
    2444:	069b      	lsls	r3, r3, #26
    2446:	d537      	bpl.n	24b8 <_usb_d_dev_in_next+0xd4>
			if (trans_next > ept->size) {
    2448:	8a2b      	ldrh	r3, [r5, #16]
    244a:	4698      	mov	r8, r3
    244c:	429a      	cmp	r2, r3
    244e:	d800      	bhi.n	2452 <_usb_d_dev_in_next+0x6e>
		trans_next = ept->trans_size - ept->trans_count;
    2450:	4690      	mov	r8, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    2452:	682b      	ldr	r3, [r5, #0]
    2454:	469c      	mov	ip, r3
    2456:	4461      	add	r1, ip
    2458:	4642      	mov	r2, r8
    245a:	68e8      	ldr	r0, [r5, #12]
    245c:	4b3f      	ldr	r3, [pc, #252]	; (255c <_usb_d_dev_in_next+0x178>)
    245e:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    2460:	68e9      	ldr	r1, [r5, #12]
	bank->ADDR.reg          = addr;
    2462:	0162      	lsls	r2, r4, #5
    2464:	4b3a      	ldr	r3, [pc, #232]	; (2550 <_usb_d_dev_in_next+0x16c>)
    2466:	189b      	adds	r3, r3, r2
    2468:	6119      	str	r1, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    246a:	0163      	lsls	r3, r4, #5
    246c:	4a38      	ldr	r2, [pc, #224]	; (2550 <_usb_d_dev_in_next+0x16c>)
    246e:	18d2      	adds	r2, r2, r3
    2470:	6951      	ldr	r1, [r2, #20]
    2472:	4643      	mov	r3, r8
    2474:	049b      	lsls	r3, r3, #18
    2476:	0c9b      	lsrs	r3, r3, #18
    2478:	0b89      	lsrs	r1, r1, #14
    247a:	0389      	lsls	r1, r1, #14
    247c:	430b      	orrs	r3, r1
    247e:	6153      	str	r3, [r2, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    2480:	6951      	ldr	r1, [r2, #20]
    2482:	4b37      	ldr	r3, [pc, #220]	; (2560 <_usb_d_dev_in_next+0x17c>)
    2484:	400b      	ands	r3, r1
    2486:	6153      	str	r3, [r2, #20]
	if (!isr) {
    2488:	2e00      	cmp	r6, #0
    248a:	d107      	bne.n	249c <_usb_d_dev_in_next+0xb8>
		if (is_ctrl) {
    248c:	2f01      	cmp	r7, #1
    248e:	d05d      	beq.n	254c <_usb_d_dev_in_next+0x168>
			inten = USB_D_BANK1_INT_FLAGS;
    2490:	224a      	movs	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    2492:	0163      	lsls	r3, r4, #5
    2494:	4933      	ldr	r1, [pc, #204]	; (2564 <_usb_d_dev_in_next+0x180>)
    2496:	468c      	mov	ip, r1
    2498:	4463      	add	r3, ip
    249a:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    249c:	3408      	adds	r4, #8
    249e:	0164      	lsls	r4, r4, #5
    24a0:	4b2d      	ldr	r3, [pc, #180]	; (2558 <_usb_d_dev_in_next+0x174>)
    24a2:	469c      	mov	ip, r3
    24a4:	4464      	add	r4, ip
    24a6:	2380      	movs	r3, #128	; 0x80
    24a8:	7163      	strb	r3, [r4, #5]
}
    24aa:	bc04      	pop	{r2}
    24ac:	4690      	mov	r8, r2
    24ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    24b0:	2100      	movs	r1, #0
    24b2:	e7a7      	b.n	2404 <_usb_d_dev_in_next+0x20>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    24b4:	b21b      	sxth	r3, r3
    24b6:	e7ab      	b.n	2410 <_usb_d_dev_in_next+0x2c>
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    24b8:	2380      	movs	r3, #128	; 0x80
    24ba:	019b      	lsls	r3, r3, #6
    24bc:	429a      	cmp	r2, r3
    24be:	d807      	bhi.n	24d0 <_usb_d_dev_in_next+0xec>
		trans_next = ept->trans_size - ept->trans_count;
    24c0:	4690      	mov	r8, r2
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    24c2:	682b      	ldr	r3, [r5, #0]
    24c4:	1859      	adds	r1, r3, r1
	bank->ADDR.reg          = addr;
    24c6:	0162      	lsls	r2, r4, #5
    24c8:	4b21      	ldr	r3, [pc, #132]	; (2550 <_usb_d_dev_in_next+0x16c>)
    24ca:	189b      	adds	r3, r3, r2
    24cc:	6119      	str	r1, [r3, #16]
    24ce:	e7cc      	b.n	246a <_usb_d_dev_in_next+0x86>
				trans_next = USB_D_DEV_TRANS_MAX;
    24d0:	2380      	movs	r3, #128	; 0x80
    24d2:	019b      	lsls	r3, r3, #6
    24d4:	4698      	mov	r8, r3
    24d6:	e7f4      	b.n	24c2 <_usb_d_dev_in_next+0xde>
	} else if (ept->flags.bits.need_zlp) {
    24d8:	7cea      	ldrb	r2, [r5, #19]
    24da:	06d2      	lsls	r2, r2, #27
    24dc:	d50f      	bpl.n	24fe <_usb_d_dev_in_next+0x11a>
		ept->flags.bits.need_zlp = 0;
    24de:	7ceb      	ldrb	r3, [r5, #19]
    24e0:	2210      	movs	r2, #16
    24e2:	4393      	bics	r3, r2
    24e4:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    24e6:	0162      	lsls	r2, r4, #5
    24e8:	4b19      	ldr	r3, [pc, #100]	; (2550 <_usb_d_dev_in_next+0x16c>)
    24ea:	189b      	adds	r3, r3, r2
    24ec:	695a      	ldr	r2, [r3, #20]
    24ee:	0b92      	lsrs	r2, r2, #14
    24f0:	0391      	lsls	r1, r2, #14
    24f2:	6159      	str	r1, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    24f4:	6959      	ldr	r1, [r3, #20]
    24f6:	4a1a      	ldr	r2, [pc, #104]	; (2560 <_usb_d_dev_in_next+0x17c>)
    24f8:	400a      	ands	r2, r1
    24fa:	615a      	str	r2, [r3, #20]
    24fc:	e7c4      	b.n	2488 <_usb_d_dev_in_next+0xa4>
	if (is_ctrl) {
    24fe:	2f01      	cmp	r7, #1
    2500:	d00d      	beq.n	251e <_usb_d_dev_in_next+0x13a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2502:	0164      	lsls	r4, r4, #5
    2504:	4a18      	ldr	r2, [pc, #96]	; (2568 <_usb_d_dev_in_next+0x184>)
    2506:	4694      	mov	ip, r2
    2508:	4464      	add	r4, ip
    250a:	224a      	movs	r2, #74	; 0x4a
    250c:	7022      	strb	r2, [r4, #0]
	if (last_pkt == ept->size) {
    250e:	8a2a      	ldrh	r2, [r5, #16]
    2510:	4293      	cmp	r3, r2
    2512:	d00b      	beq.n	252c <_usb_d_dev_in_next+0x148>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    2514:	2100      	movs	r1, #0
    2516:	0028      	movs	r0, r5
    2518:	4b14      	ldr	r3, [pc, #80]	; (256c <_usb_d_dev_in_next+0x188>)
    251a:	4798      	blx	r3
	return;
    251c:	e7c5      	b.n	24aa <_usb_d_dev_in_next+0xc6>
    251e:	0164      	lsls	r4, r4, #5
    2520:	4a11      	ldr	r2, [pc, #68]	; (2568 <_usb_d_dev_in_next+0x184>)
    2522:	4694      	mov	ip, r2
    2524:	4464      	add	r4, ip
    2526:	224b      	movs	r2, #75	; 0x4b
    2528:	7022      	strb	r2, [r4, #0]
    252a:	e7f0      	b.n	250e <_usb_d_dev_in_next+0x12a>
		ept->flags.bits.is_busy = 0;
    252c:	7ceb      	ldrb	r3, [r5, #19]
    252e:	2240      	movs	r2, #64	; 0x40
    2530:	4393      	bics	r3, r2
    2532:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    2534:	4b0e      	ldr	r3, [pc, #56]	; (2570 <_usb_d_dev_in_next+0x18c>)
    2536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2538:	7ca8      	ldrb	r0, [r5, #18]
    253a:	68a9      	ldr	r1, [r5, #8]
    253c:	4798      	blx	r3
    253e:	2800      	cmp	r0, #0
    2540:	d1b3      	bne.n	24aa <_usb_d_dev_in_next+0xc6>
		ept->flags.bits.is_busy = 1;
    2542:	7ceb      	ldrb	r3, [r5, #19]
    2544:	2240      	movs	r2, #64	; 0x40
    2546:	4313      	orrs	r3, r2
    2548:	74eb      	strb	r3, [r5, #19]
    254a:	e7e3      	b.n	2514 <_usb_d_dev_in_next+0x130>
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    254c:	224e      	movs	r2, #78	; 0x4e
    254e:	e7a0      	b.n	2492 <_usb_d_dev_in_next+0xae>
    2550:	20000130 	.word	0x20000130
    2554:	000003ff 	.word	0x000003ff
    2558:	41005000 	.word	0x41005000
    255c:	000040d9 	.word	0x000040d9
    2560:	f0003fff 	.word	0xf0003fff
    2564:	41005109 	.word	0x41005109
    2568:	41005108 	.word	0x41005108
    256c:	000021d9 	.word	0x000021d9
    2570:	200001b0 	.word	0x200001b0

00002574 <_usb_d_dev_out_next>:
{
    2574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2576:	46de      	mov	lr, fp
    2578:	4657      	mov	r7, sl
    257a:	464e      	mov	r6, r9
    257c:	4645      	mov	r5, r8
    257e:	b5e0      	push	{r5, r6, r7, lr}
    2580:	0004      	movs	r4, r0
    2582:	000f      	movs	r7, r1
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    2584:	7c83      	ldrb	r3, [r0, #18]
    2586:	250f      	movs	r5, #15
    2588:	401d      	ands	r5, r3
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    258a:	2900      	cmp	r1, #0
    258c:	d059      	beq.n	2642 <_usb_d_dev_out_next+0xce>
    258e:	016a      	lsls	r2, r5, #5
    2590:	4b71      	ldr	r3, [pc, #452]	; (2758 <_usb_d_dev_out_next+0x1e4>)
    2592:	189b      	adds	r3, r3, r2
    2594:	685b      	ldr	r3, [r3, #4]
    2596:	011b      	lsls	r3, r3, #4
    2598:	0c9b      	lsrs	r3, r3, #18
    259a:	469a      	mov	sl, r3
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    259c:	2f00      	cmp	r7, #0
    259e:	d053      	beq.n	2648 <_usb_d_dev_out_next+0xd4>
    25a0:	016a      	lsls	r2, r5, #5
    25a2:	4b6d      	ldr	r3, [pc, #436]	; (2758 <_usb_d_dev_out_next+0x1e4>)
    25a4:	189b      	adds	r3, r3, r2
    25a6:	685b      	ldr	r3, [r3, #4]
    25a8:	049b      	lsls	r3, r3, #18
    25aa:	0c9b      	lsrs	r3, r3, #18
    25ac:	4698      	mov	r8, r3
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    25ae:	8a26      	ldrh	r6, [r4, #16]
    25b0:	4b6a      	ldr	r3, [pc, #424]	; (275c <_usb_d_dev_out_next+0x1e8>)
    25b2:	429e      	cmp	r6, r3
    25b4:	d001      	beq.n	25ba <_usb_d_dev_out_next+0x46>
    25b6:	3e01      	subs	r6, #1
    25b8:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    25ba:	4643      	mov	r3, r8
    25bc:	4033      	ands	r3, r6
    25be:	469b      	mov	fp, r3
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    25c0:	7ce3      	ldrb	r3, [r4, #19]
    25c2:	2207      	movs	r2, #7
    25c4:	401a      	ands	r2, r3
    25c6:	4691      	mov	r9, r2
	if (isr) {
    25c8:	2f00      	cmp	r7, #0
    25ca:	d007      	beq.n	25dc <_usb_d_dev_out_next+0x68>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    25cc:	002b      	movs	r3, r5
    25ce:	3308      	adds	r3, #8
    25d0:	015b      	lsls	r3, r3, #5
    25d2:	4a63      	ldr	r2, [pc, #396]	; (2760 <_usb_d_dev_out_next+0x1ec>)
    25d4:	4694      	mov	ip, r2
    25d6:	4463      	add	r3, ip
    25d8:	2201      	movs	r2, #1
    25da:	71da      	strb	r2, [r3, #7]
	if (ept->flags.bits.use_cache && ept->trans_size) {
    25dc:	7ce3      	ldrb	r3, [r4, #19]
    25de:	069b      	lsls	r3, r3, #26
    25e0:	d511      	bpl.n	2606 <_usb_d_dev_out_next+0x92>
    25e2:	6862      	ldr	r2, [r4, #4]
    25e4:	2a00      	cmp	r2, #0
    25e6:	d00e      	beq.n	2606 <_usb_d_dev_out_next+0x92>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    25e8:	b292      	uxth	r2, r2
    25ea:	8923      	ldrh	r3, [r4, #8]
    25ec:	1ad2      	subs	r2, r2, r3
    25ee:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    25f0:	6823      	ldr	r3, [r4, #0]
    25f2:	68a1      	ldr	r1, [r4, #8]
    25f4:	468c      	mov	ip, r1
    25f6:	4463      	add	r3, ip
    25f8:	0018      	movs	r0, r3
    25fa:	68e1      	ldr	r1, [r4, #12]
    25fc:	4593      	cmp	fp, r2
    25fe:	d200      	bcs.n	2602 <_usb_d_dev_out_next+0x8e>
    2600:	465a      	mov	r2, fp
    2602:	4b58      	ldr	r3, [pc, #352]	; (2764 <_usb_d_dev_out_next+0x1f0>)
    2604:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    2606:	6863      	ldr	r3, [r4, #4]
    2608:	2b00      	cmp	r3, #0
    260a:	d120      	bne.n	264e <_usb_d_dev_out_next+0xda>
    260c:	7ce2      	ldrb	r2, [r4, #19]
    260e:	06d2      	lsls	r2, r2, #27
    2610:	d51d      	bpl.n	264e <_usb_d_dev_out_next+0xda>
		ept->flags.bits.need_zlp  = 0;
    2612:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    2614:	2210      	movs	r2, #16
    2616:	4393      	bics	r3, r2
    2618:	2220      	movs	r2, #32
    261a:	4313      	orrs	r3, r2
    261c:	74e3      	strb	r3, [r4, #19]
	bank->ADDR.reg          = addr;
    261e:	494e      	ldr	r1, [pc, #312]	; (2758 <_usb_d_dev_out_next+0x1e4>)
    2620:	016a      	lsls	r2, r5, #5
    2622:	68e3      	ldr	r3, [r4, #12]
    2624:	5053      	str	r3, [r2, r1]
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    2626:	8a23      	ldrh	r3, [r4, #16]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    2628:	188a      	adds	r2, r1, r2
    262a:	6851      	ldr	r1, [r2, #4]
    262c:	049b      	lsls	r3, r3, #18
    262e:	091b      	lsrs	r3, r3, #4
    2630:	484d      	ldr	r0, [pc, #308]	; (2768 <_usb_d_dev_out_next+0x1f4>)
    2632:	4001      	ands	r1, r0
    2634:	430b      	orrs	r3, r1
    2636:	6053      	str	r3, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    2638:	6853      	ldr	r3, [r2, #4]
    263a:	0b9b      	lsrs	r3, r3, #14
    263c:	0399      	lsls	r1, r3, #14
    263e:	6051      	str	r1, [r2, #4]
    2640:	e047      	b.n	26d2 <_usb_d_dev_out_next+0x15e>
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    2642:	2300      	movs	r3, #0
    2644:	469a      	mov	sl, r3
    2646:	e7a9      	b.n	259c <_usb_d_dev_out_next+0x28>
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    2648:	2300      	movs	r3, #0
    264a:	4698      	mov	r8, r3
    264c:	e7af      	b.n	25ae <_usb_d_dev_out_next+0x3a>
	} else if (isr && last_pkt < ept->size) {
    264e:	2f00      	cmp	r7, #0
    2650:	d01d      	beq.n	268e <_usb_d_dev_out_next+0x11a>
    2652:	8a22      	ldrh	r2, [r4, #16]
    2654:	4593      	cmp	fp, r2
    2656:	d21a      	bcs.n	268e <_usb_d_dev_out_next+0x11a>
		ept->flags.bits.need_zlp = 0;
    2658:	7ce3      	ldrb	r3, [r4, #19]
    265a:	2210      	movs	r2, #16
    265c:	4393      	bics	r3, r2
    265e:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    2660:	68a3      	ldr	r3, [r4, #8]
    2662:	4443      	add	r3, r8
    2664:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    2666:	464b      	mov	r3, r9
    2668:	2b01      	cmp	r3, #1
    266a:	d066      	beq.n	273a <_usb_d_dev_out_next+0x1c6>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    266c:	016b      	lsls	r3, r5, #5
    266e:	4a3f      	ldr	r2, [pc, #252]	; (276c <_usb_d_dev_out_next+0x1f8>)
    2670:	4694      	mov	ip, r2
    2672:	4463      	add	r3, ip
    2674:	2225      	movs	r2, #37	; 0x25
    2676:	701a      	strb	r2, [r3, #0]
	if (0 == epn) {
    2678:	2d00      	cmp	r5, #0
    267a:	d103      	bne.n	2684 <_usb_d_dev_out_next+0x110>
	bank->ADDR.reg          = addr;
    267c:	016d      	lsls	r5, r5, #5
    267e:	4b36      	ldr	r3, [pc, #216]	; (2758 <_usb_d_dev_out_next+0x1e4>)
    2680:	68e2      	ldr	r2, [r4, #12]
    2682:	50ea      	str	r2, [r5, r3]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    2684:	2100      	movs	r1, #0
    2686:	0020      	movs	r0, r4
    2688:	4b39      	ldr	r3, [pc, #228]	; (2770 <_usb_d_dev_out_next+0x1fc>)
    268a:	4798      	blx	r3
	return;
    268c:	e033      	b.n	26f6 <_usb_d_dev_out_next+0x182>
		ept->trans_count += trans_size;
    268e:	68a2      	ldr	r2, [r4, #8]
    2690:	4452      	add	r2, sl
    2692:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    2694:	4293      	cmp	r3, r2
    2696:	d9e6      	bls.n	2666 <_usb_d_dev_out_next+0xf2>
			trans_next = ept->trans_size - ept->trans_count;
    2698:	b29b      	uxth	r3, r3
    269a:	b291      	uxth	r1, r2
    269c:	1a5b      	subs	r3, r3, r1
    269e:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    26a0:	7ce1      	ldrb	r1, [r4, #19]
    26a2:	0689      	lsls	r1, r1, #26
    26a4:	d52d      	bpl.n	2702 <_usb_d_dev_out_next+0x18e>
				if (trans_next > ept->size) {
    26a6:	8a21      	ldrh	r1, [r4, #16]
    26a8:	428b      	cmp	r3, r1
    26aa:	d800      	bhi.n	26ae <_usb_d_dev_out_next+0x13a>
			trans_next = ept->trans_size - ept->trans_count;
    26ac:	0019      	movs	r1, r3
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    26ae:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    26b0:	016b      	lsls	r3, r5, #5
    26b2:	4a29      	ldr	r2, [pc, #164]	; (2758 <_usb_d_dev_out_next+0x1e4>)
    26b4:	5098      	str	r0, [r3, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    26b6:	016b      	lsls	r3, r5, #5
    26b8:	4827      	ldr	r0, [pc, #156]	; (2758 <_usb_d_dev_out_next+0x1e4>)
    26ba:	18c0      	adds	r0, r0, r3
    26bc:	6842      	ldr	r2, [r0, #4]
    26be:	048b      	lsls	r3, r1, #18
    26c0:	091b      	lsrs	r3, r3, #4
    26c2:	4929      	ldr	r1, [pc, #164]	; (2768 <_usb_d_dev_out_next+0x1f4>)
    26c4:	400a      	ands	r2, r1
    26c6:	4313      	orrs	r3, r2
    26c8:	6043      	str	r3, [r0, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    26ca:	6843      	ldr	r3, [r0, #4]
    26cc:	0b9b      	lsrs	r3, r3, #14
    26ce:	039a      	lsls	r2, r3, #14
    26d0:	6042      	str	r2, [r0, #4]
	if (!isr) {
    26d2:	2f00      	cmp	r7, #0
    26d4:	d108      	bne.n	26e8 <_usb_d_dev_out_next+0x174>
		if (is_ctrl) {
    26d6:	464b      	mov	r3, r9
    26d8:	2b01      	cmp	r3, #1
    26da:	d035      	beq.n	2748 <_usb_d_dev_out_next+0x1d4>
			inten = USB_D_BANK0_INT_FLAGS;
    26dc:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    26de:	016b      	lsls	r3, r5, #5
    26e0:	4924      	ldr	r1, [pc, #144]	; (2774 <_usb_d_dev_out_next+0x200>)
    26e2:	468c      	mov	ip, r1
    26e4:	4463      	add	r3, ip
    26e6:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    26e8:	3508      	adds	r5, #8
    26ea:	016d      	lsls	r5, r5, #5
    26ec:	4b1c      	ldr	r3, [pc, #112]	; (2760 <_usb_d_dev_out_next+0x1ec>)
    26ee:	469c      	mov	ip, r3
    26f0:	4465      	add	r5, ip
    26f2:	2340      	movs	r3, #64	; 0x40
    26f4:	712b      	strb	r3, [r5, #4]
}
    26f6:	bc3c      	pop	{r2, r3, r4, r5}
    26f8:	4690      	mov	r8, r2
    26fa:	4699      	mov	r9, r3
    26fc:	46a2      	mov	sl, r4
    26fe:	46ab      	mov	fp, r5
    2700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (trans_next > ept->size) {
    2702:	8a21      	ldrh	r1, [r4, #16]
    2704:	428b      	cmp	r3, r1
    2706:	d90b      	bls.n	2720 <_usb_d_dev_out_next+0x1ac>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    2708:	2180      	movs	r1, #128	; 0x80
    270a:	0189      	lsls	r1, r1, #6
    270c:	428b      	cmp	r3, r1
    270e:	d80f      	bhi.n	2730 <_usb_d_dev_out_next+0x1bc>
    2710:	43b3      	bics	r3, r6
    2712:	0019      	movs	r1, r3
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    2714:	6823      	ldr	r3, [r4, #0]
    2716:	189a      	adds	r2, r3, r2
	bank->ADDR.reg          = addr;
    2718:	016b      	lsls	r3, r5, #5
    271a:	480f      	ldr	r0, [pc, #60]	; (2758 <_usb_d_dev_out_next+0x1e4>)
    271c:	501a      	str	r2, [r3, r0]
    271e:	e7ca      	b.n	26b6 <_usb_d_dev_out_next+0x142>
				} else if (trans_next < ept->size) {
    2720:	428b      	cmp	r3, r1
    2722:	d208      	bcs.n	2736 <_usb_d_dev_out_next+0x1c2>
					ept->flags.bits.use_cache = 1;
    2724:	7ce1      	ldrb	r1, [r4, #19]
    2726:	2020      	movs	r0, #32
    2728:	4301      	orrs	r1, r0
    272a:	74e1      	strb	r1, [r4, #19]
			trans_next = ept->trans_size - ept->trans_count;
    272c:	0019      	movs	r1, r3
    272e:	e7f1      	b.n	2714 <_usb_d_dev_out_next+0x1a0>
						trans_next = USB_D_DEV_TRANS_MAX;
    2730:	2180      	movs	r1, #128	; 0x80
    2732:	0189      	lsls	r1, r1, #6
    2734:	e7ee      	b.n	2714 <_usb_d_dev_out_next+0x1a0>
			trans_next = ept->trans_size - ept->trans_count;
    2736:	0019      	movs	r1, r3
    2738:	e7ec      	b.n	2714 <_usb_d_dev_out_next+0x1a0>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    273a:	016b      	lsls	r3, r5, #5
    273c:	4a0b      	ldr	r2, [pc, #44]	; (276c <_usb_d_dev_out_next+0x1f8>)
    273e:	4694      	mov	ip, r2
    2740:	4463      	add	r3, ip
    2742:	222d      	movs	r2, #45	; 0x2d
    2744:	701a      	strb	r2, [r3, #0]
    2746:	e797      	b.n	2678 <_usb_d_dev_out_next+0x104>
	bank->STATUS_BK.reg     = 0;
    2748:	016a      	lsls	r2, r5, #5
    274a:	4b03      	ldr	r3, [pc, #12]	; (2758 <_usb_d_dev_out_next+0x1e4>)
    274c:	189b      	adds	r3, r3, r2
    274e:	2200      	movs	r2, #0
    2750:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    2752:	322d      	adds	r2, #45	; 0x2d
    2754:	e7c3      	b.n	26de <_usb_d_dev_out_next+0x16a>
    2756:	46c0      	nop			; (mov r8, r8)
    2758:	20000130 	.word	0x20000130
    275c:	000003ff 	.word	0x000003ff
    2760:	41005000 	.word	0x41005000
    2764:	000040d9 	.word	0x000040d9
    2768:	f0003fff 	.word	0xf0003fff
    276c:	41005108 	.word	0x41005108
    2770:	000021d9 	.word	0x000021d9
    2774:	41005109 	.word	0x41005109

00002778 <_usb_d_dev_handler>:
{
    2778:	b570      	push	{r4, r5, r6, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    277a:	4b89      	ldr	r3, [pc, #548]	; (29a0 <_usb_d_dev_handler+0x228>)
    277c:	8c1d      	ldrh	r5, [r3, #32]
    277e:	b2ad      	uxth	r5, r5
	if (0 == epint) {
    2780:	2d00      	cmp	r5, #0
    2782:	d001      	beq.n	2788 <_usb_d_dev_handler+0x10>
	bool     rc    = true;
    2784:	2400      	movs	r4, #0
    2786:	e0bf      	b.n	2908 <_usb_d_dev_handler+0x190>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    2788:	8b99      	ldrh	r1, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    278a:	8b1b      	ldrh	r3, [r3, #24]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    278c:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    278e:	075a      	lsls	r2, r3, #29
    2790:	d40d      	bmi.n	27ae <_usb_d_dev_handler+0x36>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    2792:	059a      	lsls	r2, r3, #22
    2794:	d415      	bmi.n	27c2 <_usb_d_dev_handler+0x4a>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    2796:	061a      	lsls	r2, r3, #24
    2798:	d437      	bmi.n	280a <_usb_d_dev_handler+0x92>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    279a:	2270      	movs	r2, #112	; 0x70
    279c:	421a      	tst	r2, r3
    279e:	d13e      	bne.n	281e <_usb_d_dev_handler+0xa6>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    27a0:	071a      	lsls	r2, r3, #28
    27a2:	d457      	bmi.n	2854 <_usb_d_dev_handler+0xdc>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    27a4:	07db      	lsls	r3, r3, #31
    27a6:	d500      	bpl.n	27aa <_usb_d_dev_handler+0x32>
    27a8:	e068      	b.n	287c <_usb_d_dev_handler+0x104>
		rc = false;
    27aa:	2300      	movs	r3, #0
    27ac:	e006      	b.n	27bc <_usb_d_dev_handler+0x44>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    27ae:	2204      	movs	r2, #4
    27b0:	4b7b      	ldr	r3, [pc, #492]	; (29a0 <_usb_d_dev_handler+0x228>)
    27b2:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    27b4:	4b7b      	ldr	r3, [pc, #492]	; (29a4 <_usb_d_dev_handler+0x22c>)
    27b6:	6a1b      	ldr	r3, [r3, #32]
    27b8:	4798      	blx	r3
		return true;
    27ba:	2301      	movs	r3, #1
		if (_usb_d_dev_handle_nep()) {
    27bc:	2b00      	cmp	r3, #0
    27be:	d0e1      	beq.n	2784 <_usb_d_dev_handler+0xc>
}
    27c0:	bd70      	pop	{r4, r5, r6, pc}
    27c2:	4b77      	ldr	r3, [pc, #476]	; (29a0 <_usb_d_dev_handler+0x228>)
    27c4:	4a78      	ldr	r2, [pc, #480]	; (29a8 <_usb_d_dev_handler+0x230>)
    27c6:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    27c8:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    27ca:	3a92      	subs	r2, #146	; 0x92
    27cc:	3aff      	subs	r2, #255	; 0xff
    27ce:	831a      	strh	r2, [r3, #24]
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    27d0:	2300      	movs	r3, #0
    27d2:	2b03      	cmp	r3, #3
    27d4:	d812      	bhi.n	27fc <_usb_d_dev_handler+0x84>
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    27d6:	0158      	lsls	r0, r3, #5
    27d8:	4a74      	ldr	r2, [pc, #464]	; (29ac <_usb_d_dev_handler+0x234>)
    27da:	1812      	adds	r2, r2, r0
    27dc:	8912      	ldrh	r2, [r2, #8]
    27de:	0712      	lsls	r2, r2, #28
    27e0:	0f12      	lsrs	r2, r2, #28
    27e2:	2a03      	cmp	r2, #3
    27e4:	d002      	beq.n	27ec <_usb_d_dev_handler+0x74>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    27e6:	3301      	adds	r3, #1
    27e8:	b2db      	uxtb	r3, r3
    27ea:	e7f2      	b.n	27d2 <_usb_d_dev_handler+0x5a>
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    27ec:	4b6f      	ldr	r3, [pc, #444]	; (29ac <_usb_d_dev_handler+0x234>)
    27ee:	181b      	adds	r3, r3, r0
    27f0:	8919      	ldrh	r1, [r3, #8]
    27f2:	0449      	lsls	r1, r1, #17
    27f4:	0d49      	lsrs	r1, r1, #21
			bank->EXTREG.reg = 0;
    27f6:	2200      	movs	r2, #0
    27f8:	811a      	strh	r2, [r3, #8]
    27fa:	e000      	b.n	27fe <_usb_d_dev_handler+0x86>
	uint32_t lpm_variable = 0;
    27fc:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    27fe:	4b69      	ldr	r3, [pc, #420]	; (29a4 <_usb_d_dev_handler+0x22c>)
    2800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2802:	2003      	movs	r0, #3
    2804:	4798      	blx	r3
	bool     rc    = true;
    2806:	2301      	movs	r3, #1
    2808:	e7d8      	b.n	27bc <_usb_d_dev_handler+0x44>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    280a:	2280      	movs	r2, #128	; 0x80
    280c:	4b64      	ldr	r3, [pc, #400]	; (29a0 <_usb_d_dev_handler+0x228>)
    280e:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    2810:	4b64      	ldr	r3, [pc, #400]	; (29a4 <_usb_d_dev_handler+0x22c>)
    2812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2814:	2100      	movs	r1, #0
    2816:	2005      	movs	r0, #5
    2818:	4798      	blx	r3
	bool     rc    = true;
    281a:	2301      	movs	r3, #1
    281c:	e7ce      	b.n	27bc <_usb_d_dev_handler+0x44>
    281e:	4b60      	ldr	r3, [pc, #384]	; (29a0 <_usb_d_dev_handler+0x228>)
    2820:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    2822:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2824:	4a60      	ldr	r2, [pc, #384]	; (29a8 <_usb_d_dev_handler+0x230>)
    2826:	831a      	strh	r2, [r3, #24]
	if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    2828:	4b61      	ldr	r3, [pc, #388]	; (29b0 <_usb_d_dev_handler+0x238>)
    282a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    282c:	069b      	lsls	r3, r3, #26
    282e:	d40c      	bmi.n	284a <_usb_d_dev_handler+0xd2>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    2830:	4b5f      	ldr	r3, [pc, #380]	; (29b0 <_usb_d_dev_handler+0x238>)
    2832:	68da      	ldr	r2, [r3, #12]
	tmp &= mask;
    2834:	23d0      	movs	r3, #208	; 0xd0
    2836:	4013      	ands	r3, r2
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, DFLL_READY_FLAG) != DFLL_READY_FLAG)
    2838:	2bd0      	cmp	r3, #208	; 0xd0
    283a:	d1f9      	bne.n	2830 <_usb_d_dev_handler+0xb8>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    283c:	4b59      	ldr	r3, [pc, #356]	; (29a4 <_usb_d_dev_handler+0x22c>)
    283e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2840:	2100      	movs	r1, #0
    2842:	2002      	movs	r0, #2
    2844:	4798      	blx	r3
	bool     rc    = true;
    2846:	2301      	movs	r3, #1
    2848:	e7b8      	b.n	27bc <_usb_d_dev_handler+0x44>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    284a:	4b59      	ldr	r3, [pc, #356]	; (29b0 <_usb_d_dev_handler+0x238>)
    284c:	68db      	ldr	r3, [r3, #12]
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY)
    284e:	06db      	lsls	r3, r3, #27
    2850:	d5fb      	bpl.n	284a <_usb_d_dev_handler+0xd2>
    2852:	e7f3      	b.n	283c <_usb_d_dev_handler+0xc4>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    2854:	4b52      	ldr	r3, [pc, #328]	; (29a0 <_usb_d_dev_handler+0x228>)
    2856:	2100      	movs	r1, #0
    2858:	2280      	movs	r2, #128	; 0x80
    285a:	0052      	lsls	r2, r2, #1
    285c:	5499      	strb	r1, [r3, r2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    285e:	3af8      	subs	r2, #248	; 0xf8
    2860:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    2862:	3268      	adds	r2, #104	; 0x68
    2864:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2866:	4a50      	ldr	r2, [pc, #320]	; (29a8 <_usb_d_dev_handler+0x230>)
    2868:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    286a:	4b52      	ldr	r3, [pc, #328]	; (29b4 <_usb_d_dev_handler+0x23c>)
    286c:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    286e:	4b4d      	ldr	r3, [pc, #308]	; (29a4 <_usb_d_dev_handler+0x22c>)
    2870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2872:	2100      	movs	r1, #0
    2874:	2001      	movs	r0, #1
    2876:	4798      	blx	r3
	bool     rc    = true;
    2878:	2301      	movs	r3, #1
    287a:	e79f      	b.n	27bc <_usb_d_dev_handler+0x44>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    287c:	4b48      	ldr	r3, [pc, #288]	; (29a0 <_usb_d_dev_handler+0x228>)
    287e:	4a4a      	ldr	r2, [pc, #296]	; (29a8 <_usb_d_dev_handler+0x230>)
    2880:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    2882:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2884:	3a92      	subs	r2, #146	; 0x92
    2886:	3aff      	subs	r2, #255	; 0xff
    2888:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    288a:	4b46      	ldr	r3, [pc, #280]	; (29a4 <_usb_d_dev_handler+0x22c>)
    288c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    288e:	2100      	movs	r1, #0
    2890:	2004      	movs	r0, #4
    2892:	4798      	blx	r3
	bool     rc    = true;
    2894:	2301      	movs	r3, #1
    2896:	e791      	b.n	27bc <_usb_d_dev_handler+0x44>
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    2898:	06da      	lsls	r2, r3, #27
    289a:	d407      	bmi.n	28ac <_usb_d_dev_handler+0x134>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    289c:	065a      	lsls	r2, r3, #25
    289e:	d408      	bmi.n	28b2 <_usb_d_dev_handler+0x13a>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    28a0:	069b      	lsls	r3, r3, #26
    28a2:	d52f      	bpl.n	2904 <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_stall(ept, 0);
    28a4:	2100      	movs	r1, #0
    28a6:	4b44      	ldr	r3, [pc, #272]	; (29b8 <_usb_d_dev_handler+0x240>)
    28a8:	4798      	blx	r3
    28aa:	e02b      	b.n	2904 <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_setup(ept);
    28ac:	4b43      	ldr	r3, [pc, #268]	; (29bc <_usb_d_dev_handler+0x244>)
    28ae:	4798      	blx	r3
    28b0:	e028      	b.n	2904 <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_stall(ept, 1);
    28b2:	2101      	movs	r1, #1
    28b4:	4b40      	ldr	r3, [pc, #256]	; (29b8 <_usb_d_dev_handler+0x240>)
    28b6:	4798      	blx	r3
    28b8:	e024      	b.n	2904 <_usb_d_dev_handler+0x18c>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    28ba:	065a      	lsls	r2, r3, #25
    28bc:	d40f      	bmi.n	28de <_usb_d_dev_handler+0x166>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    28be:	071a      	lsls	r2, r3, #28
    28c0:	d411      	bmi.n	28e6 <_usb_d_dev_handler+0x16e>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    28c2:	079a      	lsls	r2, r3, #30
    28c4:	d413      	bmi.n	28ee <_usb_d_dev_handler+0x176>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    28c6:	7cc1      	ldrb	r1, [r0, #19]
    28c8:	2207      	movs	r2, #7
    28ca:	400a      	ands	r2, r1
    28cc:	2a01      	cmp	r2, #1
    28ce:	d119      	bne.n	2904 <_usb_d_dev_handler+0x18c>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    28d0:	075a      	lsls	r2, r3, #29
    28d2:	d410      	bmi.n	28f6 <_usb_d_dev_handler+0x17e>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    28d4:	06db      	lsls	r3, r3, #27
    28d6:	d515      	bpl.n	2904 <_usb_d_dev_handler+0x18c>
			_usb_d_dev_handle_setup(ept);
    28d8:	4b38      	ldr	r3, [pc, #224]	; (29bc <_usb_d_dev_handler+0x244>)
    28da:	4798      	blx	r3
    28dc:	e012      	b.n	2904 <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_stall(ept, 1);
    28de:	2101      	movs	r1, #1
    28e0:	4b35      	ldr	r3, [pc, #212]	; (29b8 <_usb_d_dev_handler+0x240>)
    28e2:	4798      	blx	r3
    28e4:	e00e      	b.n	2904 <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_trfail(ept, 1);
    28e6:	2101      	movs	r1, #1
    28e8:	4b35      	ldr	r3, [pc, #212]	; (29c0 <_usb_d_dev_handler+0x248>)
    28ea:	4798      	blx	r3
    28ec:	e00a      	b.n	2904 <_usb_d_dev_handler+0x18c>
		_usb_d_dev_in_next(ept, true);
    28ee:	2101      	movs	r1, #1
    28f0:	4b34      	ldr	r3, [pc, #208]	; (29c4 <_usb_d_dev_handler+0x24c>)
    28f2:	4798      	blx	r3
    28f4:	e006      	b.n	2904 <_usb_d_dev_handler+0x18c>
			_usb_d_dev_handle_trfail(ept, 0);
    28f6:	2100      	movs	r1, #0
    28f8:	4b31      	ldr	r3, [pc, #196]	; (29c0 <_usb_d_dev_handler+0x248>)
    28fa:	4798      	blx	r3
    28fc:	e002      	b.n	2904 <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_stall(ept, 0);
    28fe:	2100      	movs	r1, #0
    2900:	4b2d      	ldr	r3, [pc, #180]	; (29b8 <_usb_d_dev_handler+0x240>)
    2902:	4798      	blx	r3
	for (i = 0; i < USB_D_N_EP; i++) {
    2904:	3401      	adds	r4, #1
    2906:	b2e4      	uxtb	r4, r4
    2908:	2c08      	cmp	r4, #8
    290a:	d900      	bls.n	290e <_usb_d_dev_handler+0x196>
    290c:	e758      	b.n	27c0 <_usb_d_dev_handler+0x48>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    290e:	4b25      	ldr	r3, [pc, #148]	; (29a4 <_usb_d_dev_handler+0x22c>)
    2910:	3320      	adds	r3, #32
    2912:	00a2      	lsls	r2, r4, #2
    2914:	1911      	adds	r1, r2, r4
    2916:	0088      	lsls	r0, r1, #2
    2918:	0001      	movs	r1, r0
    291a:	3010      	adds	r0, #16
    291c:	1818      	adds	r0, r3, r0
    291e:	3004      	adds	r0, #4
		if (ept->ep == 0xFF) {
    2920:	185b      	adds	r3, r3, r1
    2922:	3326      	adds	r3, #38	; 0x26
    2924:	781b      	ldrb	r3, [r3, #0]
    2926:	2bff      	cmp	r3, #255	; 0xff
    2928:	d0ec      	beq.n	2904 <_usb_d_dev_handler+0x18c>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    292a:	7c82      	ldrb	r2, [r0, #18]
    292c:	230f      	movs	r3, #15
    292e:	4013      	ands	r3, r2
	if (!(epint & (1u << epn))) {
    2930:	2201      	movs	r2, #1
    2932:	409a      	lsls	r2, r3
    2934:	422a      	tst	r2, r5
    2936:	d0e5      	beq.n	2904 <_usb_d_dev_handler+0x18c>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    2938:	001a      	movs	r2, r3
    293a:	3208      	adds	r2, #8
    293c:	0152      	lsls	r2, r2, #5
    293e:	4918      	ldr	r1, [pc, #96]	; (29a0 <_usb_d_dev_handler+0x228>)
    2940:	468c      	mov	ip, r1
    2942:	4462      	add	r2, ip
    2944:	79d2      	ldrb	r2, [r2, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    2946:	015b      	lsls	r3, r3, #5
    2948:	491f      	ldr	r1, [pc, #124]	; (29c8 <_usb_d_dev_handler+0x250>)
    294a:	468c      	mov	ip, r1
    294c:	4463      	add	r3, ip
    294e:	781b      	ldrb	r3, [r3, #0]
	flags &= mask;
    2950:	4013      	ands	r3, r2
	if (flags) {
    2952:	d0d7      	beq.n	2904 <_usb_d_dev_handler+0x18c>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    2954:	7cc2      	ldrb	r2, [r0, #19]
    2956:	2147      	movs	r1, #71	; 0x47
    2958:	4011      	ands	r1, r2
    295a:	2901      	cmp	r1, #1
    295c:	d09c      	beq.n	2898 <_usb_d_dev_handler+0x120>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    295e:	b252      	sxtb	r2, r2
    2960:	2a00      	cmp	r2, #0
    2962:	dbaa      	blt.n	28ba <_usb_d_dev_handler+0x142>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    2964:	069a      	lsls	r2, r3, #26
    2966:	d4ca      	bmi.n	28fe <_usb_d_dev_handler+0x186>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    2968:	075a      	lsls	r2, r3, #29
    296a:	d40d      	bmi.n	2988 <_usb_d_dev_handler+0x210>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    296c:	07da      	lsls	r2, r3, #31
    296e:	d40f      	bmi.n	2990 <_usb_d_dev_handler+0x218>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    2970:	7cc1      	ldrb	r1, [r0, #19]
    2972:	2207      	movs	r2, #7
    2974:	400a      	ands	r2, r1
    2976:	2a01      	cmp	r2, #1
    2978:	d1c4      	bne.n	2904 <_usb_d_dev_handler+0x18c>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    297a:	071a      	lsls	r2, r3, #28
    297c:	d40c      	bmi.n	2998 <_usb_d_dev_handler+0x220>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    297e:	06db      	lsls	r3, r3, #27
    2980:	d5c0      	bpl.n	2904 <_usb_d_dev_handler+0x18c>
			_usb_d_dev_handle_setup(ept);
    2982:	4b0e      	ldr	r3, [pc, #56]	; (29bc <_usb_d_dev_handler+0x244>)
    2984:	4798      	blx	r3
    2986:	e7bd      	b.n	2904 <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_trfail(ept, 0);
    2988:	2100      	movs	r1, #0
    298a:	4b0d      	ldr	r3, [pc, #52]	; (29c0 <_usb_d_dev_handler+0x248>)
    298c:	4798      	blx	r3
    298e:	e7b9      	b.n	2904 <_usb_d_dev_handler+0x18c>
		_usb_d_dev_out_next(ept, true);
    2990:	2101      	movs	r1, #1
    2992:	4b0e      	ldr	r3, [pc, #56]	; (29cc <_usb_d_dev_handler+0x254>)
    2994:	4798      	blx	r3
    2996:	e7b5      	b.n	2904 <_usb_d_dev_handler+0x18c>
			_usb_d_dev_handle_trfail(ept, 1);
    2998:	2101      	movs	r1, #1
    299a:	4b09      	ldr	r3, [pc, #36]	; (29c0 <_usb_d_dev_handler+0x248>)
    299c:	4798      	blx	r3
    299e:	e7b1      	b.n	2904 <_usb_d_dev_handler+0x18c>
    29a0:	41005000 	.word	0x41005000
    29a4:	200001b0 	.word	0x200001b0
    29a8:	00000201 	.word	0x00000201
    29ac:	20000130 	.word	0x20000130
    29b0:	40000800 	.word	0x40000800
    29b4:	0000238d 	.word	0x0000238d
    29b8:	000021a9 	.word	0x000021a9
    29bc:	00002119 	.word	0x00002119
    29c0:	0000227d 	.word	0x0000227d
    29c4:	000023e5 	.word	0x000023e5
    29c8:	41005109 	.word	0x41005109
    29cc:	00002575 	.word	0x00002575

000029d0 <_usb_d_dev_init>:
{
    29d0:	b500      	push	{lr}
    29d2:	b083      	sub	sp, #12
	const uint8_t spdconf[4] = {
    29d4:	2200      	movs	r2, #0
    29d6:	ab01      	add	r3, sp, #4
    29d8:	705a      	strb	r2, [r3, #1]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    29da:	4b21      	ldr	r3, [pc, #132]	; (2a60 <_usb_d_dev_init+0x90>)
    29dc:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    29de:	07db      	lsls	r3, r3, #31
    29e0:	d41b      	bmi.n	2a1a <_usb_d_dev_init+0x4a>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    29e2:	4b1f      	ldr	r3, [pc, #124]	; (2a60 <_usb_d_dev_init+0x90>)
    29e4:	789b      	ldrb	r3, [r3, #2]
    29e6:	079b      	lsls	r3, r3, #30
    29e8:	d1fb      	bne.n	29e2 <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    29ea:	4b1d      	ldr	r3, [pc, #116]	; (2a60 <_usb_d_dev_init+0x90>)
    29ec:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    29ee:	079b      	lsls	r3, r3, #30
    29f0:	d50c      	bpl.n	2a0c <_usb_d_dev_init+0x3c>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    29f2:	4a1b      	ldr	r2, [pc, #108]	; (2a60 <_usb_d_dev_init+0x90>)
    29f4:	7813      	ldrb	r3, [r2, #0]
    29f6:	2102      	movs	r1, #2
    29f8:	438b      	bics	r3, r1
    29fa:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    29fc:	4b18      	ldr	r3, [pc, #96]	; (2a60 <_usb_d_dev_init+0x90>)
    29fe:	789b      	ldrb	r3, [r3, #2]
    2a00:	079b      	lsls	r3, r3, #30
    2a02:	d1fb      	bne.n	29fc <_usb_d_dev_init+0x2c>
    2a04:	4b16      	ldr	r3, [pc, #88]	; (2a60 <_usb_d_dev_init+0x90>)
    2a06:	789b      	ldrb	r3, [r3, #2]
    2a08:	079b      	lsls	r3, r3, #30
    2a0a:	d4fb      	bmi.n	2a04 <_usb_d_dev_init+0x34>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    2a0c:	2201      	movs	r2, #1
    2a0e:	4b14      	ldr	r3, [pc, #80]	; (2a60 <_usb_d_dev_init+0x90>)
    2a10:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2a12:	4b13      	ldr	r3, [pc, #76]	; (2a60 <_usb_d_dev_init+0x90>)
    2a14:	789b      	ldrb	r3, [r3, #2]
    2a16:	079b      	lsls	r3, r3, #30
    2a18:	d1fb      	bne.n	2a12 <_usb_d_dev_init+0x42>
    2a1a:	4b11      	ldr	r3, [pc, #68]	; (2a60 <_usb_d_dev_init+0x90>)
    2a1c:	789b      	ldrb	r3, [r3, #2]
    2a1e:	07db      	lsls	r3, r3, #31
    2a20:	d4fb      	bmi.n	2a1a <_usb_d_dev_init+0x4a>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    2a22:	4b10      	ldr	r3, [pc, #64]	; (2a64 <_usb_d_dev_init+0x94>)
    2a24:	4a10      	ldr	r2, [pc, #64]	; (2a68 <_usb_d_dev_init+0x98>)
    2a26:	621a      	str	r2, [r3, #32]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    2a28:	625a      	str	r2, [r3, #36]	; 0x24
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    2a2a:	629a      	str	r2, [r3, #40]	; 0x28
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    2a2c:	62da      	str	r2, [r3, #44]	; 0x2c
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    2a2e:	631a      	str	r2, [r3, #48]	; 0x30
	_usb_d_dev_reset_epts();
    2a30:	4b0e      	ldr	r3, [pc, #56]	; (2a6c <_usb_d_dev_init+0x9c>)
    2a32:	4798      	blx	r3
	_usb_load_calib();
    2a34:	4b0e      	ldr	r3, [pc, #56]	; (2a70 <_usb_d_dev_init+0xa0>)
    2a36:	4798      	blx	r3
	((Usb *)hw)->HOST.CTRLA.reg = data;
    2a38:	2204      	movs	r2, #4
    2a3a:	4b09      	ldr	r3, [pc, #36]	; (2a60 <_usb_d_dev_init+0x90>)
    2a3c:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2a3e:	4b08      	ldr	r3, [pc, #32]	; (2a60 <_usb_d_dev_init+0x90>)
    2a40:	789b      	ldrb	r3, [r3, #2]
    2a42:	079b      	lsls	r3, r3, #30
    2a44:	d1fb      	bne.n	2a3e <_usb_d_dev_init+0x6e>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    2a46:	4a06      	ldr	r2, [pc, #24]	; (2a60 <_usb_d_dev_init+0x90>)
    2a48:	4b0a      	ldr	r3, [pc, #40]	; (2a74 <_usb_d_dev_init+0xa4>)
    2a4a:	6253      	str	r3, [r2, #36]	; 0x24
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    2a4c:	ab01      	add	r3, sp, #4
    2a4e:	785b      	ldrb	r3, [r3, #1]
    2a50:	2101      	movs	r1, #1
    2a52:	430b      	orrs	r3, r1
    2a54:	b2db      	uxtb	r3, r3
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    2a56:	8113      	strh	r3, [r2, #8]
}
    2a58:	2000      	movs	r0, #0
    2a5a:	b003      	add	sp, #12
    2a5c:	bd00      	pop	{pc}
    2a5e:	46c0      	nop			; (mov r8, r8)
    2a60:	41005000 	.word	0x41005000
    2a64:	200001b0 	.word	0x200001b0
    2a68:	000020c1 	.word	0x000020c1
    2a6c:	0000238d 	.word	0x0000238d
    2a70:	000020c5 	.word	0x000020c5
    2a74:	20000130 	.word	0x20000130

00002a78 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    2a78:	4b10      	ldr	r3, [pc, #64]	; (2abc <_usb_d_dev_enable+0x44>)
    2a7a:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    2a7c:	079b      	lsls	r3, r3, #30
    2a7e:	d119      	bne.n	2ab4 <_usb_d_dev_enable+0x3c>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2a80:	4b0e      	ldr	r3, [pc, #56]	; (2abc <_usb_d_dev_enable+0x44>)
    2a82:	789b      	ldrb	r3, [r3, #2]
    2a84:	079b      	lsls	r3, r3, #30
    2a86:	d1fb      	bne.n	2a80 <_usb_d_dev_enable+0x8>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    2a88:	4b0c      	ldr	r3, [pc, #48]	; (2abc <_usb_d_dev_enable+0x44>)
    2a8a:	781b      	ldrb	r3, [r3, #0]
    2a8c:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    2a8e:	079a      	lsls	r2, r3, #30
    2a90:	d408      	bmi.n	2aa4 <_usb_d_dev_enable+0x2c>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    2a92:	2202      	movs	r2, #2
    2a94:	4313      	orrs	r3, r2
    2a96:	b2db      	uxtb	r3, r3
	((Usb *)hw)->HOST.CTRLA.reg = data;
    2a98:	4a08      	ldr	r2, [pc, #32]	; (2abc <_usb_d_dev_enable+0x44>)
    2a9a:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2a9c:	4b07      	ldr	r3, [pc, #28]	; (2abc <_usb_d_dev_enable+0x44>)
    2a9e:	789b      	ldrb	r3, [r3, #2]
    2aa0:	079b      	lsls	r3, r3, #30
    2aa2:	d1fb      	bne.n	2a9c <_usb_d_dev_enable+0x24>
    2aa4:	2280      	movs	r2, #128	; 0x80
    2aa6:	4b06      	ldr	r3, [pc, #24]	; (2ac0 <_usb_d_dev_enable+0x48>)
    2aa8:	601a      	str	r2, [r3, #0]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2aaa:	4a06      	ldr	r2, [pc, #24]	; (2ac4 <_usb_d_dev_enable+0x4c>)
    2aac:	4b03      	ldr	r3, [pc, #12]	; (2abc <_usb_d_dev_enable+0x44>)
    2aae:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    2ab0:	2000      	movs	r0, #0
}
    2ab2:	4770      	bx	lr
		return -USB_ERR_DENIED;
    2ab4:	2011      	movs	r0, #17
    2ab6:	4240      	negs	r0, r0
    2ab8:	e7fb      	b.n	2ab2 <_usb_d_dev_enable+0x3a>
    2aba:	46c0      	nop			; (mov r8, r8)
    2abc:	41005000 	.word	0x41005000
    2ac0:	e000e100 	.word	0xe000e100
    2ac4:	0000028d 	.word	0x0000028d

00002ac8 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    2ac8:	4a02      	ldr	r2, [pc, #8]	; (2ad4 <_usb_d_dev_attach+0xc>)
    2aca:	8913      	ldrh	r3, [r2, #8]
    2acc:	2101      	movs	r1, #1
    2ace:	438b      	bics	r3, r1
    2ad0:	8113      	strh	r3, [r2, #8]
}
    2ad2:	4770      	bx	lr
    2ad4:	41005000 	.word	0x41005000

00002ad8 <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    2ad8:	2380      	movs	r3, #128	; 0x80
    2ada:	425b      	negs	r3, r3
    2adc:	4318      	orrs	r0, r3
    2ade:	b2c0      	uxtb	r0, r0
	((Usb *)hw)->DEVICE.DADD.reg = data;
    2ae0:	4b01      	ldr	r3, [pc, #4]	; (2ae8 <_usb_d_dev_set_address+0x10>)
    2ae2:	7298      	strb	r0, [r3, #10]
}
    2ae4:	4770      	bx	lr
    2ae6:	46c0      	nop			; (mov r8, r8)
    2ae8:	41005000 	.word	0x41005000

00002aec <_usb_d_dev_ep_init>:
{
    2aec:	b5f0      	push	{r4, r5, r6, r7, lr}
    2aee:	46c6      	mov	lr, r8
    2af0:	b500      	push	{lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    2af2:	230f      	movs	r3, #15
    2af4:	4003      	ands	r3, r0
    2af6:	b244      	sxtb	r4, r0
    2af8:	46a4      	mov	ip, r4
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2afa:	2b00      	cmp	r3, #0
    2afc:	d005      	beq.n	2b0a <_usb_d_dev_ep_init+0x1e>
    2afe:	2c00      	cmp	r4, #0
    2b00:	db01      	blt.n	2b06 <_usb_d_dev_ep_init+0x1a>
    2b02:	001c      	movs	r4, r3
    2b04:	e002      	b.n	2b0c <_usb_d_dev_ep_init+0x20>
    2b06:	1d1c      	adds	r4, r3, #4
    2b08:	e000      	b.n	2b0c <_usb_d_dev_ep_init+0x20>
    2b0a:	001c      	movs	r4, r3
	return &dev_inst.ep[ep_index];
    2b0c:	0026      	movs	r6, r4
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    2b0e:	2503      	movs	r5, #3
    2b10:	4029      	ands	r1, r5
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    2b12:	001f      	movs	r7, r3
	if (epn > CONF_USB_D_MAX_EP_N) {
    2b14:	2b04      	cmp	r3, #4
    2b16:	d900      	bls.n	2b1a <_usb_d_dev_ep_init+0x2e>
    2b18:	e07a      	b.n	2c10 <_usb_d_dev_ep_init+0x124>
	if (ept->ep != 0xFF) {
    2b1a:	00a5      	lsls	r5, r4, #2
    2b1c:	192d      	adds	r5, r5, r4
    2b1e:	00ac      	lsls	r4, r5, #2
    2b20:	46a0      	mov	r8, r4
    2b22:	4c43      	ldr	r4, [pc, #268]	; (2c30 <_usb_d_dev_ep_init+0x144>)
    2b24:	3420      	adds	r4, #32
    2b26:	4444      	add	r4, r8
    2b28:	3426      	adds	r4, #38	; 0x26
    2b2a:	7824      	ldrb	r4, [r4, #0]
    2b2c:	2cff      	cmp	r4, #255	; 0xff
    2b2e:	d000      	beq.n	2b32 <_usb_d_dev_ep_init+0x46>
    2b30:	e071      	b.n	2c16 <_usb_d_dev_ep_init+0x12a>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    2b32:	2900      	cmp	r1, #0
    2b34:	d118      	bne.n	2b68 <_usb_d_dev_ep_init+0x7c>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2b36:	2b00      	cmp	r3, #0
    2b38:	d004      	beq.n	2b44 <_usb_d_dev_ep_init+0x58>
    2b3a:	4664      	mov	r4, ip
    2b3c:	2c00      	cmp	r4, #0
    2b3e:	db01      	blt.n	2b44 <_usb_d_dev_ep_init+0x58>
    2b40:	3304      	adds	r3, #4
    2b42:	b2db      	uxtb	r3, r3
		if (ept_in->ep != 0xFF) {
    2b44:	009c      	lsls	r4, r3, #2
    2b46:	18e3      	adds	r3, r4, r3
    2b48:	009d      	lsls	r5, r3, #2
    2b4a:	4b39      	ldr	r3, [pc, #228]	; (2c30 <_usb_d_dev_ep_init+0x144>)
    2b4c:	3320      	adds	r3, #32
    2b4e:	195b      	adds	r3, r3, r5
    2b50:	3326      	adds	r3, #38	; 0x26
    2b52:	781b      	ldrb	r3, [r3, #0]
    2b54:	2bff      	cmp	r3, #255	; 0xff
    2b56:	d161      	bne.n	2c1c <_usb_d_dev_ep_init+0x130>
		if (pcfg->cache == NULL) {
    2b58:	007b      	lsls	r3, r7, #1
    2b5a:	19db      	adds	r3, r3, r7
    2b5c:	009c      	lsls	r4, r3, #2
    2b5e:	4b35      	ldr	r3, [pc, #212]	; (2c34 <_usb_d_dev_ep_init+0x148>)
    2b60:	191b      	adds	r3, r3, r4
    2b62:	689b      	ldr	r3, [r3, #8]
    2b64:	2b00      	cmp	r3, #0
    2b66:	d05c      	beq.n	2c22 <_usb_d_dev_ep_init+0x136>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    2b68:	4663      	mov	r3, ip
    2b6a:	2b00      	cmp	r3, #0
    2b6c:	db37      	blt.n	2bde <_usb_d_dev_ep_init+0xf2>
    2b6e:	007b      	lsls	r3, r7, #1
    2b70:	19db      	adds	r3, r3, r7
    2b72:	009c      	lsls	r4, r3, #2
    2b74:	4b2f      	ldr	r3, [pc, #188]	; (2c34 <_usb_d_dev_ep_init+0x148>)
    2b76:	191b      	adds	r3, r3, r4
    2b78:	689b      	ldr	r3, [r3, #8]
    2b7a:	1e5c      	subs	r4, r3, #1
    2b7c:	41a3      	sbcs	r3, r4
    2b7e:	b2db      	uxtb	r3, r3
    2b80:	2b00      	cmp	r3, #0
    2b82:	d00a      	beq.n	2b9a <_usb_d_dev_ep_init+0xae>
    2b84:	4663      	mov	r3, ip
    2b86:	2b00      	cmp	r3, #0
    2b88:	db33      	blt.n	2bf2 <_usb_d_dev_ep_init+0x106>
    2b8a:	007b      	lsls	r3, r7, #1
    2b8c:	19db      	adds	r3, r3, r7
    2b8e:	009c      	lsls	r4, r3, #2
    2b90:	4b28      	ldr	r3, [pc, #160]	; (2c34 <_usb_d_dev_ep_init+0x148>)
    2b92:	191b      	adds	r3, r3, r4
    2b94:	8a1b      	ldrh	r3, [r3, #16]
    2b96:	4293      	cmp	r3, r2
    2b98:	db46      	blt.n	2c28 <_usb_d_dev_ep_init+0x13c>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    2b9a:	4663      	mov	r3, ip
    2b9c:	2b00      	cmp	r3, #0
    2b9e:	db2f      	blt.n	2c00 <_usb_d_dev_ep_init+0x114>
    2ba0:	007b      	lsls	r3, r7, #1
    2ba2:	19df      	adds	r7, r3, r7
    2ba4:	00bc      	lsls	r4, r7, #2
    2ba6:	4b23      	ldr	r3, [pc, #140]	; (2c34 <_usb_d_dev_ep_init+0x148>)
    2ba8:	191b      	adds	r3, r3, r4
    2baa:	689b      	ldr	r3, [r3, #8]
    2bac:	469c      	mov	ip, r3
    2bae:	4b20      	ldr	r3, [pc, #128]	; (2c30 <_usb_d_dev_ep_init+0x144>)
    2bb0:	00b5      	lsls	r5, r6, #2
    2bb2:	19af      	adds	r7, r5, r6
    2bb4:	00bc      	lsls	r4, r7, #2
    2bb6:	191c      	adds	r4, r3, r4
    2bb8:	4667      	mov	r7, ip
    2bba:	6427      	str	r7, [r4, #64]	; 0x40
	ept->size     = max_pkt_siz;
    2bbc:	3444      	adds	r4, #68	; 0x44
    2bbe:	8022      	strh	r2, [r4, #0]
	ept->flags.u8 = (ep_type + 1);
    2bc0:	3101      	adds	r1, #1
    2bc2:	3320      	adds	r3, #32
    2bc4:	19ac      	adds	r4, r5, r6
    2bc6:	00a2      	lsls	r2, r4, #2
    2bc8:	0014      	movs	r4, r2
    2bca:	189a      	adds	r2, r3, r2
    2bcc:	3227      	adds	r2, #39	; 0x27
    2bce:	7011      	strb	r1, [r2, #0]
	ept->ep       = ep;
    2bd0:	191b      	adds	r3, r3, r4
    2bd2:	3326      	adds	r3, #38	; 0x26
    2bd4:	7018      	strb	r0, [r3, #0]
	return USB_OK;
    2bd6:	2000      	movs	r0, #0
}
    2bd8:	bc04      	pop	{r2}
    2bda:	4690      	mov	r8, r2
    2bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    2bde:	007b      	lsls	r3, r7, #1
    2be0:	19db      	adds	r3, r3, r7
    2be2:	009c      	lsls	r4, r3, #2
    2be4:	4b13      	ldr	r3, [pc, #76]	; (2c34 <_usb_d_dev_ep_init+0x148>)
    2be6:	191b      	adds	r3, r3, r4
    2be8:	68db      	ldr	r3, [r3, #12]
    2bea:	1e5c      	subs	r4, r3, #1
    2bec:	41a3      	sbcs	r3, r4
    2bee:	b2db      	uxtb	r3, r3
    2bf0:	e7c6      	b.n	2b80 <_usb_d_dev_ep_init+0x94>
    2bf2:	007b      	lsls	r3, r7, #1
    2bf4:	19db      	adds	r3, r3, r7
    2bf6:	009c      	lsls	r4, r3, #2
    2bf8:	4b0e      	ldr	r3, [pc, #56]	; (2c34 <_usb_d_dev_ep_init+0x148>)
    2bfa:	191b      	adds	r3, r3, r4
    2bfc:	8a5b      	ldrh	r3, [r3, #18]
    2bfe:	e7ca      	b.n	2b96 <_usb_d_dev_ep_init+0xaa>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    2c00:	007b      	lsls	r3, r7, #1
    2c02:	19df      	adds	r7, r3, r7
    2c04:	00bc      	lsls	r4, r7, #2
    2c06:	4b0b      	ldr	r3, [pc, #44]	; (2c34 <_usb_d_dev_ep_init+0x148>)
    2c08:	191b      	adds	r3, r3, r4
    2c0a:	68db      	ldr	r3, [r3, #12]
    2c0c:	469c      	mov	ip, r3
    2c0e:	e7ce      	b.n	2bae <_usb_d_dev_ep_init+0xc2>
		return -USB_ERR_PARAM;
    2c10:	2012      	movs	r0, #18
    2c12:	4240      	negs	r0, r0
    2c14:	e7e0      	b.n	2bd8 <_usb_d_dev_ep_init+0xec>
		return -USB_ERR_REDO;
    2c16:	2014      	movs	r0, #20
    2c18:	4240      	negs	r0, r0
    2c1a:	e7dd      	b.n	2bd8 <_usb_d_dev_ep_init+0xec>
			return -USB_ERR_REDO;
    2c1c:	2014      	movs	r0, #20
    2c1e:	4240      	negs	r0, r0
    2c20:	e7da      	b.n	2bd8 <_usb_d_dev_ep_init+0xec>
			return -USB_ERR_FUNC;
    2c22:	2013      	movs	r0, #19
    2c24:	4240      	negs	r0, r0
    2c26:	e7d7      	b.n	2bd8 <_usb_d_dev_ep_init+0xec>
		return -USB_ERR_FUNC;
    2c28:	2013      	movs	r0, #19
    2c2a:	4240      	negs	r0, r0
    2c2c:	e7d4      	b.n	2bd8 <_usb_d_dev_ep_init+0xec>
    2c2e:	46c0      	nop			; (mov r8, r8)
    2c30:	200001b0 	.word	0x200001b0
    2c34:	000042b0 	.word	0x000042b0

00002c38 <_usb_d_dev_ep_deinit>:
{
    2c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2c3a:	0004      	movs	r4, r0
	uint8_t               epn = USB_EP_GET_N(ep);
    2c3c:	250f      	movs	r5, #15
    2c3e:	4005      	ands	r5, r0
    2c40:	b247      	sxtb	r7, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    2c42:	0ffb      	lsrs	r3, r7, #31
    2c44:	469c      	mov	ip, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2c46:	2d00      	cmp	r5, #0
    2c48:	d005      	beq.n	2c56 <_usb_d_dev_ep_deinit+0x1e>
    2c4a:	2f00      	cmp	r7, #0
    2c4c:	db01      	blt.n	2c52 <_usb_d_dev_ep_deinit+0x1a>
    2c4e:	002a      	movs	r2, r5
    2c50:	e002      	b.n	2c58 <_usb_d_dev_ep_deinit+0x20>
    2c52:	1d2a      	adds	r2, r5, #4
    2c54:	e000      	b.n	2c58 <_usb_d_dev_ep_deinit+0x20>
    2c56:	002a      	movs	r2, r5
	return &dev_inst.ep[ep_index];
    2c58:	0016      	movs	r6, r2
    2c5a:	0093      	lsls	r3, r2, #2
    2c5c:	189b      	adds	r3, r3, r2
    2c5e:	0099      	lsls	r1, r3, #2
    2c60:	3110      	adds	r1, #16
    2c62:	4823      	ldr	r0, [pc, #140]	; (2cf0 <_usb_d_dev_ep_deinit+0xb8>)
    2c64:	3020      	adds	r0, #32
    2c66:	1840      	adds	r0, r0, r1
    2c68:	3004      	adds	r0, #4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    2c6a:	2d04      	cmp	r5, #4
    2c6c:	d830      	bhi.n	2cd0 <_usb_d_dev_ep_deinit+0x98>
    2c6e:	0093      	lsls	r3, r2, #2
    2c70:	189a      	adds	r2, r3, r2
    2c72:	0091      	lsls	r1, r2, #2
    2c74:	4b1e      	ldr	r3, [pc, #120]	; (2cf0 <_usb_d_dev_ep_deinit+0xb8>)
    2c76:	3320      	adds	r3, #32
    2c78:	185b      	adds	r3, r3, r1
    2c7a:	3326      	adds	r3, #38	; 0x26
    2c7c:	781b      	ldrb	r3, [r3, #0]
    2c7e:	2bff      	cmp	r3, #255	; 0xff
    2c80:	d026      	beq.n	2cd0 <_usb_d_dev_ep_deinit+0x98>
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    2c82:	2203      	movs	r2, #3
    2c84:	4661      	mov	r1, ip
    2c86:	4b1b      	ldr	r3, [pc, #108]	; (2cf4 <_usb_d_dev_ep_deinit+0xbc>)
    2c88:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    2c8a:	00b2      	lsls	r2, r6, #2
    2c8c:	1992      	adds	r2, r2, r6
    2c8e:	0091      	lsls	r1, r2, #2
    2c90:	4b17      	ldr	r3, [pc, #92]	; (2cf0 <_usb_d_dev_ep_deinit+0xb8>)
    2c92:	185b      	adds	r3, r3, r1
    2c94:	3340      	adds	r3, #64	; 0x40
    2c96:	79da      	ldrb	r2, [r3, #7]
    2c98:	2307      	movs	r3, #7
    2c9a:	4013      	ands	r3, r2
    2c9c:	2b01      	cmp	r3, #1
    2c9e:	d018      	beq.n	2cd2 <_usb_d_dev_ep_deinit+0x9a>
	} else if (USB_EP_GET_DIR(ep)) {
    2ca0:	2f00      	cmp	r7, #0
    2ca2:	db1c      	blt.n	2cde <_usb_d_dev_ep_deinit+0xa6>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    2ca4:	4a14      	ldr	r2, [pc, #80]	; (2cf8 <_usb_d_dev_ep_deinit+0xc0>)
    2ca6:	3408      	adds	r4, #8
    2ca8:	0164      	lsls	r4, r4, #5
    2caa:	5ca3      	ldrb	r3, [r4, r2]
    2cac:	2107      	movs	r1, #7
    2cae:	438b      	bics	r3, r1
    2cb0:	54a3      	strb	r3, [r4, r2]
	ept->flags.u8 = 0;
    2cb2:	4b0f      	ldr	r3, [pc, #60]	; (2cf0 <_usb_d_dev_ep_deinit+0xb8>)
    2cb4:	3320      	adds	r3, #32
    2cb6:	00b1      	lsls	r1, r6, #2
    2cb8:	1988      	adds	r0, r1, r6
    2cba:	0082      	lsls	r2, r0, #2
    2cbc:	189a      	adds	r2, r3, r2
    2cbe:	3227      	adds	r2, #39	; 0x27
    2cc0:	2000      	movs	r0, #0
    2cc2:	7010      	strb	r0, [r2, #0]
	ept->ep       = 0xFF;
    2cc4:	198e      	adds	r6, r1, r6
    2cc6:	00b2      	lsls	r2, r6, #2
    2cc8:	189b      	adds	r3, r3, r2
    2cca:	3326      	adds	r3, #38	; 0x26
    2ccc:	22ff      	movs	r2, #255	; 0xff
    2cce:	701a      	strb	r2, [r3, #0]
}
    2cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    2cd2:	3408      	adds	r4, #8
    2cd4:	0164      	lsls	r4, r4, #5
    2cd6:	2200      	movs	r2, #0
    2cd8:	4b07      	ldr	r3, [pc, #28]	; (2cf8 <_usb_d_dev_ep_deinit+0xc0>)
    2cda:	54e2      	strb	r2, [r4, r3]
    2cdc:	e7e9      	b.n	2cb2 <_usb_d_dev_ep_deinit+0x7a>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    2cde:	4a06      	ldr	r2, [pc, #24]	; (2cf8 <_usb_d_dev_ep_deinit+0xc0>)
    2ce0:	3508      	adds	r5, #8
    2ce2:	016d      	lsls	r5, r5, #5
    2ce4:	5cab      	ldrb	r3, [r5, r2]
    2ce6:	2170      	movs	r1, #112	; 0x70
    2ce8:	438b      	bics	r3, r1
    2cea:	54ab      	strb	r3, [r5, r2]
    2cec:	e7e1      	b.n	2cb2 <_usb_d_dev_ep_deinit+0x7a>
    2cee:	46c0      	nop			; (mov r8, r8)
    2cf0:	200001b0 	.word	0x200001b0
    2cf4:	00002201 	.word	0x00002201
    2cf8:	41005000 	.word	0x41005000

00002cfc <_usb_d_dev_ep_enable>:
{
    2cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn   = USB_EP_GET_N(ep);
    2cfe:	230f      	movs	r3, #15
    2d00:	4003      	ands	r3, r0
    2d02:	b240      	sxtb	r0, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2d04:	2b00      	cmp	r3, #0
    2d06:	d005      	beq.n	2d14 <_usb_d_dev_ep_enable+0x18>
    2d08:	2800      	cmp	r0, #0
    2d0a:	db01      	blt.n	2d10 <_usb_d_dev_ep_enable+0x14>
    2d0c:	001e      	movs	r6, r3
    2d0e:	e002      	b.n	2d16 <_usb_d_dev_ep_enable+0x1a>
    2d10:	1d1e      	adds	r6, r3, #4
    2d12:	e000      	b.n	2d16 <_usb_d_dev_ep_enable+0x1a>
    2d14:	001e      	movs	r6, r3
	return &dev_inst.ep[ep_index];
    2d16:	0034      	movs	r4, r6
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    2d18:	001a      	movs	r2, r3
    2d1a:	3208      	adds	r2, #8
    2d1c:	0152      	lsls	r2, r2, #5
    2d1e:	49b3      	ldr	r1, [pc, #716]	; (2fec <_usb_d_dev_ep_enable+0x2f0>)
    2d20:	5c55      	ldrb	r5, [r2, r1]
    2d22:	b2ed      	uxtb	r5, r5
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    2d24:	2b04      	cmp	r3, #4
    2d26:	d900      	bls.n	2d2a <_usb_d_dev_ep_enable+0x2e>
    2d28:	e151      	b.n	2fce <_usb_d_dev_ep_enable+0x2d2>
    2d2a:	00b1      	lsls	r1, r6, #2
    2d2c:	1989      	adds	r1, r1, r6
    2d2e:	008e      	lsls	r6, r1, #2
    2d30:	4aaf      	ldr	r2, [pc, #700]	; (2ff0 <_usb_d_dev_ep_enable+0x2f4>)
    2d32:	3220      	adds	r2, #32
    2d34:	1992      	adds	r2, r2, r6
    2d36:	3226      	adds	r2, #38	; 0x26
    2d38:	7812      	ldrb	r2, [r2, #0]
    2d3a:	2aff      	cmp	r2, #255	; 0xff
    2d3c:	d100      	bne.n	2d40 <_usb_d_dev_ep_enable+0x44>
    2d3e:	e149      	b.n	2fd4 <_usb_d_dev_ep_enable+0x2d8>
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    2d40:	015a      	lsls	r2, r3, #5
    2d42:	4eac      	ldr	r6, [pc, #688]	; (2ff4 <_usb_d_dev_ep_enable+0x2f8>)
    2d44:	18b6      	adds	r6, r6, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    2d46:	00a1      	lsls	r1, r4, #2
    2d48:	1909      	adds	r1, r1, r4
    2d4a:	008f      	lsls	r7, r1, #2
    2d4c:	4aa8      	ldr	r2, [pc, #672]	; (2ff0 <_usb_d_dev_ep_enable+0x2f4>)
    2d4e:	19d2      	adds	r2, r2, r7
    2d50:	3240      	adds	r2, #64	; 0x40
    2d52:	79d1      	ldrb	r1, [r2, #7]
    2d54:	2207      	movs	r2, #7
    2d56:	400a      	ands	r2, r1
    2d58:	2a01      	cmp	r2, #1
    2d5a:	d037      	beq.n	2dcc <_usb_d_dev_ep_enable+0xd0>
	} else if (dir) {
    2d5c:	2800      	cmp	r0, #0
    2d5e:	da00      	bge.n	2d62 <_usb_d_dev_ep_enable+0x66>
    2d60:	e0cc      	b.n	2efc <_usb_d_dev_ep_enable+0x200>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    2d62:	076a      	lsls	r2, r5, #29
    2d64:	d000      	beq.n	2d68 <_usb_d_dev_ep_enable+0x6c>
    2d66:	e13e      	b.n	2fe6 <_usb_d_dev_ep_enable+0x2ea>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    2d68:	4aa1      	ldr	r2, [pc, #644]	; (2ff0 <_usb_d_dev_ep_enable+0x2f4>)
    2d6a:	00a0      	lsls	r0, r4, #2
    2d6c:	1907      	adds	r7, r0, r4
    2d6e:	00b9      	lsls	r1, r7, #2
    2d70:	1851      	adds	r1, r2, r1
    2d72:	3140      	adds	r1, #64	; 0x40
    2d74:	79c9      	ldrb	r1, [r1, #7]
    2d76:	0749      	lsls	r1, r1, #29
    2d78:	0f49      	lsrs	r1, r1, #29
    2d7a:	430d      	orrs	r5, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    2d7c:	0019      	movs	r1, r3
    2d7e:	3108      	adds	r1, #8
    2d80:	0149      	lsls	r1, r1, #5
    2d82:	4f9a      	ldr	r7, [pc, #616]	; (2fec <_usb_d_dev_ep_enable+0x2f0>)
    2d84:	55cd      	strb	r5, [r1, r7]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2d86:	1904      	adds	r4, r0, r4
    2d88:	00a1      	lsls	r1, r4, #2
    2d8a:	1852      	adds	r2, r2, r1
    2d8c:	3244      	adds	r2, #68	; 0x44
    2d8e:	8810      	ldrh	r0, [r2, #0]
    2d90:	0382      	lsls	r2, r0, #14
    2d92:	4999      	ldr	r1, [pc, #612]	; (2ff8 <_usb_d_dev_ep_enable+0x2fc>)
    2d94:	400a      	ands	r2, r1
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2d96:	2180      	movs	r1, #128	; 0x80
    2d98:	0089      	lsls	r1, r1, #2
    2d9a:	4288      	cmp	r0, r1
    2d9c:	d900      	bls.n	2da0 <_usb_d_dev_ep_enable+0xa4>
    2d9e:	e0f9      	b.n	2f94 <_usb_d_dev_ep_enable+0x298>
    2da0:	3901      	subs	r1, #1
    2da2:	39ff      	subs	r1, #255	; 0xff
    2da4:	4288      	cmp	r0, r1
    2da6:	d900      	bls.n	2daa <_usb_d_dev_ep_enable+0xae>
    2da8:	e107      	b.n	2fba <_usb_d_dev_ep_enable+0x2be>
    2daa:	2880      	cmp	r0, #128	; 0x80
    2dac:	d900      	bls.n	2db0 <_usb_d_dev_ep_enable+0xb4>
    2dae:	e106      	b.n	2fbe <_usb_d_dev_ep_enable+0x2c2>
    2db0:	2840      	cmp	r0, #64	; 0x40
    2db2:	d900      	bls.n	2db6 <_usb_d_dev_ep_enable+0xba>
    2db4:	e105      	b.n	2fc2 <_usb_d_dev_ep_enable+0x2c6>
    2db6:	2820      	cmp	r0, #32
    2db8:	d900      	bls.n	2dbc <_usb_d_dev_ep_enable+0xc0>
    2dba:	e104      	b.n	2fc6 <_usb_d_dev_ep_enable+0x2ca>
    2dbc:	2810      	cmp	r0, #16
    2dbe:	d900      	bls.n	2dc2 <_usb_d_dev_ep_enable+0xc6>
    2dc0:	e103      	b.n	2fca <_usb_d_dev_ep_enable+0x2ce>
    2dc2:	39f8      	subs	r1, #248	; 0xf8
    2dc4:	4281      	cmp	r1, r0
    2dc6:	4189      	sbcs	r1, r1
    2dc8:	4249      	negs	r1, r1
    2dca:	e0e4      	b.n	2f96 <_usb_d_dev_ep_enable+0x29a>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    2dcc:	3276      	adds	r2, #118	; 0x76
    2dce:	422a      	tst	r2, r5
    2dd0:	d000      	beq.n	2dd4 <_usb_d_dev_ep_enable+0xd8>
    2dd2:	e102      	b.n	2fda <_usb_d_dev_ep_enable+0x2de>
    2dd4:	001a      	movs	r2, r3
    2dd6:	3208      	adds	r2, #8
    2dd8:	0152      	lsls	r2, r2, #5
    2dda:	2011      	movs	r0, #17
    2ddc:	4983      	ldr	r1, [pc, #524]	; (2fec <_usb_d_dev_ep_enable+0x2f0>)
    2dde:	5450      	strb	r0, [r2, r1]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2de0:	4a83      	ldr	r2, [pc, #524]	; (2ff0 <_usb_d_dev_ep_enable+0x2f4>)
    2de2:	19d2      	adds	r2, r2, r7
    2de4:	3244      	adds	r2, #68	; 0x44
    2de6:	8812      	ldrh	r2, [r2, #0]
    2de8:	0391      	lsls	r1, r2, #14
    2dea:	4883      	ldr	r0, [pc, #524]	; (2ff8 <_usb_d_dev_ep_enable+0x2fc>)
    2dec:	4001      	ands	r1, r0
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2dee:	2080      	movs	r0, #128	; 0x80
    2df0:	0080      	lsls	r0, r0, #2
    2df2:	4282      	cmp	r2, r0
    2df4:	d810      	bhi.n	2e18 <_usb_d_dev_ep_enable+0x11c>
    2df6:	3801      	subs	r0, #1
    2df8:	38ff      	subs	r0, #255	; 0xff
    2dfa:	4282      	cmp	r2, r0
    2dfc:	d827      	bhi.n	2e4e <_usb_d_dev_ep_enable+0x152>
    2dfe:	2a80      	cmp	r2, #128	; 0x80
    2e00:	d827      	bhi.n	2e52 <_usb_d_dev_ep_enable+0x156>
    2e02:	2a40      	cmp	r2, #64	; 0x40
    2e04:	d827      	bhi.n	2e56 <_usb_d_dev_ep_enable+0x15a>
    2e06:	2a20      	cmp	r2, #32
    2e08:	d827      	bhi.n	2e5a <_usb_d_dev_ep_enable+0x15e>
    2e0a:	2a10      	cmp	r2, #16
    2e0c:	d827      	bhi.n	2e5e <_usb_d_dev_ep_enable+0x162>
    2e0e:	38f8      	subs	r0, #248	; 0xf8
    2e10:	4290      	cmp	r0, r2
    2e12:	4180      	sbcs	r0, r0
    2e14:	4240      	negs	r0, r0
    2e16:	e000      	b.n	2e1a <_usb_d_dev_ep_enable+0x11e>
    2e18:	2007      	movs	r0, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2e1a:	0700      	lsls	r0, r0, #28
    2e1c:	4301      	orrs	r1, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2e1e:	6071      	str	r1, [r6, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2e20:	0491      	lsls	r1, r2, #18
    2e22:	0c89      	lsrs	r1, r1, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2e24:	2080      	movs	r0, #128	; 0x80
    2e26:	0080      	lsls	r0, r0, #2
    2e28:	4282      	cmp	r2, r0
    2e2a:	d81a      	bhi.n	2e62 <_usb_d_dev_ep_enable+0x166>
    2e2c:	3801      	subs	r0, #1
    2e2e:	38ff      	subs	r0, #255	; 0xff
    2e30:	4282      	cmp	r2, r0
    2e32:	d859      	bhi.n	2ee8 <_usb_d_dev_ep_enable+0x1ec>
    2e34:	2a80      	cmp	r2, #128	; 0x80
    2e36:	d859      	bhi.n	2eec <_usb_d_dev_ep_enable+0x1f0>
    2e38:	2a40      	cmp	r2, #64	; 0x40
    2e3a:	d859      	bhi.n	2ef0 <_usb_d_dev_ep_enable+0x1f4>
    2e3c:	2a20      	cmp	r2, #32
    2e3e:	d859      	bhi.n	2ef4 <_usb_d_dev_ep_enable+0x1f8>
    2e40:	2a10      	cmp	r2, #16
    2e42:	d859      	bhi.n	2ef8 <_usb_d_dev_ep_enable+0x1fc>
    2e44:	38f8      	subs	r0, #248	; 0xf8
    2e46:	4290      	cmp	r0, r2
    2e48:	4192      	sbcs	r2, r2
    2e4a:	4252      	negs	r2, r2
    2e4c:	e00a      	b.n	2e64 <_usb_d_dev_ep_enable+0x168>
    2e4e:	2006      	movs	r0, #6
    2e50:	e7e3      	b.n	2e1a <_usb_d_dev_ep_enable+0x11e>
    2e52:	2005      	movs	r0, #5
    2e54:	e7e1      	b.n	2e1a <_usb_d_dev_ep_enable+0x11e>
    2e56:	2004      	movs	r0, #4
    2e58:	e7df      	b.n	2e1a <_usb_d_dev_ep_enable+0x11e>
    2e5a:	2003      	movs	r0, #3
    2e5c:	e7dd      	b.n	2e1a <_usb_d_dev_ep_enable+0x11e>
    2e5e:	2002      	movs	r0, #2
    2e60:	e7db      	b.n	2e1a <_usb_d_dev_ep_enable+0x11e>
    2e62:	2207      	movs	r2, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2e64:	0712      	lsls	r2, r2, #28
    2e66:	430a      	orrs	r2, r1
    2e68:	6172      	str	r2, [r6, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2e6a:	001a      	movs	r2, r3
    2e6c:	3208      	adds	r2, #8
    2e6e:	0152      	lsls	r2, r2, #5
    2e70:	495e      	ldr	r1, [pc, #376]	; (2fec <_usb_d_dev_ep_enable+0x2f0>)
    2e72:	468c      	mov	ip, r1
    2e74:	4462      	add	r2, ip
    2e76:	2040      	movs	r0, #64	; 0x40
    2e78:	7150      	strb	r0, [r2, #5]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2e7a:	2180      	movs	r1, #128	; 0x80
    2e7c:	7111      	strb	r1, [r2, #4]
	bank->STATUS_BK.reg     = 0;
    2e7e:	4a5d      	ldr	r2, [pc, #372]	; (2ff4 <_usb_d_dev_ep_enable+0x2f8>)
    2e80:	015b      	lsls	r3, r3, #5
    2e82:	18d3      	adds	r3, r2, r3
    2e84:	2100      	movs	r1, #0
    2e86:	7299      	strb	r1, [r3, #10]
    2e88:	7699      	strb	r1, [r3, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2e8a:	4959      	ldr	r1, [pc, #356]	; (2ff0 <_usb_d_dev_ep_enable+0x2f4>)
    2e8c:	000b      	movs	r3, r1
    2e8e:	3320      	adds	r3, #32
    2e90:	00a6      	lsls	r6, r4, #2
    2e92:	1937      	adds	r7, r6, r4
    2e94:	00bd      	lsls	r5, r7, #2
    2e96:	195b      	adds	r3, r3, r5
    2e98:	3326      	adds	r3, #38	; 0x26
    2e9a:	781b      	ldrb	r3, [r3, #0]
    2e9c:	250f      	movs	r5, #15
    2e9e:	402b      	ands	r3, r5
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    2ea0:	1937      	adds	r7, r6, r4
    2ea2:	00bd      	lsls	r5, r7, #2
    2ea4:	194d      	adds	r5, r1, r5
    2ea6:	6c2f      	ldr	r7, [r5, #64]	; 0x40
	bank->ADDR.reg          = addr;
    2ea8:	015d      	lsls	r5, r3, #5
    2eaa:	50af      	str	r7, [r5, r2]
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    2eac:	1934      	adds	r4, r6, r4
    2eae:	00a6      	lsls	r6, r4, #2
    2eb0:	1989      	adds	r1, r1, r6
    2eb2:	3144      	adds	r1, #68	; 0x44
    2eb4:	8809      	ldrh	r1, [r1, #0]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    2eb6:	1952      	adds	r2, r2, r5
    2eb8:	6854      	ldr	r4, [r2, #4]
    2eba:	0489      	lsls	r1, r1, #18
    2ebc:	0909      	lsrs	r1, r1, #4
    2ebe:	4e4f      	ldr	r6, [pc, #316]	; (2ffc <_usb_d_dev_ep_enable+0x300>)
    2ec0:	4034      	ands	r4, r6
    2ec2:	4321      	orrs	r1, r4
    2ec4:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    2ec6:	6851      	ldr	r1, [r2, #4]
    2ec8:	0b89      	lsrs	r1, r1, #14
    2eca:	038c      	lsls	r4, r1, #14
    2ecc:	6054      	str	r4, [r2, #4]
    2ece:	3308      	adds	r3, #8
    2ed0:	015b      	lsls	r3, r3, #5
    2ed2:	4463      	add	r3, ip
    2ed4:	22b0      	movs	r2, #176	; 0xb0
    2ed6:	711a      	strb	r2, [r3, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2ed8:	7158      	strb	r0, [r3, #5]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    2eda:	4b49      	ldr	r3, [pc, #292]	; (3000 <_usb_d_dev_ep_enable+0x304>)
    2edc:	469c      	mov	ip, r3
    2ede:	4465      	add	r5, ip
    2ee0:	2310      	movs	r3, #16
    2ee2:	702b      	strb	r3, [r5, #0]
	return USB_OK;
    2ee4:	2000      	movs	r0, #0
    2ee6:	e067      	b.n	2fb8 <_usb_d_dev_ep_enable+0x2bc>
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2ee8:	2206      	movs	r2, #6
    2eea:	e7bb      	b.n	2e64 <_usb_d_dev_ep_enable+0x168>
    2eec:	2205      	movs	r2, #5
    2eee:	e7b9      	b.n	2e64 <_usb_d_dev_ep_enable+0x168>
    2ef0:	2204      	movs	r2, #4
    2ef2:	e7b7      	b.n	2e64 <_usb_d_dev_ep_enable+0x168>
    2ef4:	2203      	movs	r2, #3
    2ef6:	e7b5      	b.n	2e64 <_usb_d_dev_ep_enable+0x168>
    2ef8:	2202      	movs	r2, #2
    2efa:	e7b3      	b.n	2e64 <_usb_d_dev_ep_enable+0x168>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    2efc:	2270      	movs	r2, #112	; 0x70
    2efe:	422a      	tst	r2, r5
    2f00:	d000      	beq.n	2f04 <_usb_d_dev_ep_enable+0x208>
    2f02:	e06d      	b.n	2fe0 <_usb_d_dev_ep_enable+0x2e4>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    2f04:	493a      	ldr	r1, [pc, #232]	; (2ff0 <_usb_d_dev_ep_enable+0x2f4>)
    2f06:	00a0      	lsls	r0, r4, #2
    2f08:	1907      	adds	r7, r0, r4
    2f0a:	00ba      	lsls	r2, r7, #2
    2f0c:	188a      	adds	r2, r1, r2
    2f0e:	3240      	adds	r2, #64	; 0x40
    2f10:	79d2      	ldrb	r2, [r2, #7]
    2f12:	0752      	lsls	r2, r2, #29
    2f14:	0e52      	lsrs	r2, r2, #25
    2f16:	4315      	orrs	r5, r2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    2f18:	001a      	movs	r2, r3
    2f1a:	3208      	adds	r2, #8
    2f1c:	0152      	lsls	r2, r2, #5
    2f1e:	4f33      	ldr	r7, [pc, #204]	; (2fec <_usb_d_dev_ep_enable+0x2f0>)
    2f20:	55d5      	strb	r5, [r2, r7]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2f22:	1904      	adds	r4, r0, r4
    2f24:	00a2      	lsls	r2, r4, #2
    2f26:	1889      	adds	r1, r1, r2
    2f28:	3144      	adds	r1, #68	; 0x44
    2f2a:	8809      	ldrh	r1, [r1, #0]
    2f2c:	048a      	lsls	r2, r1, #18
    2f2e:	0c92      	lsrs	r2, r2, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2f30:	2080      	movs	r0, #128	; 0x80
    2f32:	0080      	lsls	r0, r0, #2
    2f34:	4281      	cmp	r1, r0
    2f36:	d810      	bhi.n	2f5a <_usb_d_dev_ep_enable+0x25e>
    2f38:	3801      	subs	r0, #1
    2f3a:	38ff      	subs	r0, #255	; 0xff
    2f3c:	4281      	cmp	r1, r0
    2f3e:	d81f      	bhi.n	2f80 <_usb_d_dev_ep_enable+0x284>
    2f40:	2980      	cmp	r1, #128	; 0x80
    2f42:	d81f      	bhi.n	2f84 <_usb_d_dev_ep_enable+0x288>
    2f44:	2940      	cmp	r1, #64	; 0x40
    2f46:	d81f      	bhi.n	2f88 <_usb_d_dev_ep_enable+0x28c>
    2f48:	2920      	cmp	r1, #32
    2f4a:	d81f      	bhi.n	2f8c <_usb_d_dev_ep_enable+0x290>
    2f4c:	2910      	cmp	r1, #16
    2f4e:	d81f      	bhi.n	2f90 <_usb_d_dev_ep_enable+0x294>
    2f50:	38f8      	subs	r0, #248	; 0xf8
    2f52:	4288      	cmp	r0, r1
    2f54:	4189      	sbcs	r1, r1
    2f56:	4249      	negs	r1, r1
    2f58:	e000      	b.n	2f5c <_usb_d_dev_ep_enable+0x260>
    2f5a:	2107      	movs	r1, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2f5c:	0709      	lsls	r1, r1, #28
    2f5e:	430a      	orrs	r2, r1
    2f60:	6172      	str	r2, [r6, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2f62:	001a      	movs	r2, r3
    2f64:	3208      	adds	r2, #8
    2f66:	0152      	lsls	r2, r2, #5
    2f68:	4920      	ldr	r1, [pc, #128]	; (2fec <_usb_d_dev_ep_enable+0x2f0>)
    2f6a:	468c      	mov	ip, r1
    2f6c:	4462      	add	r2, ip
    2f6e:	2180      	movs	r1, #128	; 0x80
    2f70:	7111      	strb	r1, [r2, #4]
	bank->STATUS_BK.reg     = 0;
    2f72:	015a      	lsls	r2, r3, #5
    2f74:	4b1f      	ldr	r3, [pc, #124]	; (2ff4 <_usb_d_dev_ep_enable+0x2f8>)
    2f76:	189b      	adds	r3, r3, r2
    2f78:	2200      	movs	r2, #0
    2f7a:	769a      	strb	r2, [r3, #26]
	return USB_OK;
    2f7c:	2000      	movs	r0, #0
    2f7e:	e01b      	b.n	2fb8 <_usb_d_dev_ep_enable+0x2bc>
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2f80:	2106      	movs	r1, #6
    2f82:	e7eb      	b.n	2f5c <_usb_d_dev_ep_enable+0x260>
    2f84:	2105      	movs	r1, #5
    2f86:	e7e9      	b.n	2f5c <_usb_d_dev_ep_enable+0x260>
    2f88:	2104      	movs	r1, #4
    2f8a:	e7e7      	b.n	2f5c <_usb_d_dev_ep_enable+0x260>
    2f8c:	2103      	movs	r1, #3
    2f8e:	e7e5      	b.n	2f5c <_usb_d_dev_ep_enable+0x260>
    2f90:	2102      	movs	r1, #2
    2f92:	e7e3      	b.n	2f5c <_usb_d_dev_ep_enable+0x260>
    2f94:	2107      	movs	r1, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2f96:	0709      	lsls	r1, r1, #28
    2f98:	430a      	orrs	r2, r1
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2f9a:	6072      	str	r2, [r6, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2f9c:	001a      	movs	r2, r3
    2f9e:	3208      	adds	r2, #8
    2fa0:	0152      	lsls	r2, r2, #5
    2fa2:	4912      	ldr	r1, [pc, #72]	; (2fec <_usb_d_dev_ep_enable+0x2f0>)
    2fa4:	468c      	mov	ip, r1
    2fa6:	4462      	add	r2, ip
    2fa8:	2140      	movs	r1, #64	; 0x40
    2faa:	7151      	strb	r1, [r2, #5]
	bank->STATUS_BK.reg     = 0;
    2fac:	015b      	lsls	r3, r3, #5
    2fae:	4a11      	ldr	r2, [pc, #68]	; (2ff4 <_usb_d_dev_ep_enable+0x2f8>)
    2fb0:	18d3      	adds	r3, r2, r3
    2fb2:	2200      	movs	r2, #0
    2fb4:	729a      	strb	r2, [r3, #10]
	return USB_OK;
    2fb6:	2000      	movs	r0, #0
}
    2fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2fba:	2106      	movs	r1, #6
    2fbc:	e7eb      	b.n	2f96 <_usb_d_dev_ep_enable+0x29a>
    2fbe:	2105      	movs	r1, #5
    2fc0:	e7e9      	b.n	2f96 <_usb_d_dev_ep_enable+0x29a>
    2fc2:	2104      	movs	r1, #4
    2fc4:	e7e7      	b.n	2f96 <_usb_d_dev_ep_enable+0x29a>
    2fc6:	2103      	movs	r1, #3
    2fc8:	e7e5      	b.n	2f96 <_usb_d_dev_ep_enable+0x29a>
    2fca:	2102      	movs	r1, #2
    2fcc:	e7e3      	b.n	2f96 <_usb_d_dev_ep_enable+0x29a>
		return -USB_ERR_PARAM;
    2fce:	2012      	movs	r0, #18
    2fd0:	4240      	negs	r0, r0
    2fd2:	e7f1      	b.n	2fb8 <_usb_d_dev_ep_enable+0x2bc>
    2fd4:	2012      	movs	r0, #18
    2fd6:	4240      	negs	r0, r0
    2fd8:	e7ee      	b.n	2fb8 <_usb_d_dev_ep_enable+0x2bc>
			return -USB_ERR_REDO;
    2fda:	2014      	movs	r0, #20
    2fdc:	4240      	negs	r0, r0
    2fde:	e7eb      	b.n	2fb8 <_usb_d_dev_ep_enable+0x2bc>
			return -USB_ERR_REDO;
    2fe0:	2014      	movs	r0, #20
    2fe2:	4240      	negs	r0, r0
    2fe4:	e7e8      	b.n	2fb8 <_usb_d_dev_ep_enable+0x2bc>
			return -USB_ERR_REDO;
    2fe6:	2014      	movs	r0, #20
    2fe8:	4240      	negs	r0, r0
    2fea:	e7e5      	b.n	2fb8 <_usb_d_dev_ep_enable+0x2bc>
    2fec:	41005000 	.word	0x41005000
    2ff0:	200001b0 	.word	0x200001b0
    2ff4:	20000130 	.word	0x20000130
    2ff8:	0fffc000 	.word	0x0fffc000
    2ffc:	f0003fff 	.word	0xf0003fff
    3000:	41005109 	.word	0x41005109

00003004 <_usb_d_dev_ep_stall>:
{
    3004:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    3006:	220f      	movs	r2, #15
    3008:	4002      	ands	r2, r0
    300a:	b240      	sxtb	r0, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    300c:	0fc4      	lsrs	r4, r0, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    300e:	2a00      	cmp	r2, #0
    3010:	d005      	beq.n	301e <_usb_d_dev_ep_stall+0x1a>
    3012:	2800      	cmp	r0, #0
    3014:	db01      	blt.n	301a <_usb_d_dev_ep_stall+0x16>
    3016:	0013      	movs	r3, r2
    3018:	e002      	b.n	3020 <_usb_d_dev_ep_stall+0x1c>
    301a:	1d13      	adds	r3, r2, #4
    301c:	e000      	b.n	3020 <_usb_d_dev_ep_stall+0x1c>
    301e:	0013      	movs	r3, r2
	return &dev_inst.ep[ep_index];
    3020:	001d      	movs	r5, r3
    3022:	0098      	lsls	r0, r3, #2
    3024:	18c0      	adds	r0, r0, r3
    3026:	0083      	lsls	r3, r0, #2
    3028:	3310      	adds	r3, #16
    302a:	0018      	movs	r0, r3
    302c:	4b47      	ldr	r3, [pc, #284]	; (314c <_usb_d_dev_ep_stall+0x148>)
    302e:	3320      	adds	r3, #32
    3030:	181b      	adds	r3, r3, r0
    3032:	3304      	adds	r3, #4
	if (epn > CONF_USB_D_MAX_EP_N) {
    3034:	2a04      	cmp	r2, #4
    3036:	d900      	bls.n	303a <_usb_d_dev_ep_stall+0x36>
    3038:	e084      	b.n	3144 <_usb_d_dev_ep_stall+0x140>
	if (USB_EP_STALL_SET == ctrl) {
    303a:	2901      	cmp	r1, #1
    303c:	d018      	beq.n	3070 <_usb_d_dev_ep_stall+0x6c>
	} else if (USB_EP_STALL_CLR == ctrl) {
    303e:	2900      	cmp	r1, #0
    3040:	d03d      	beq.n	30be <_usb_d_dev_ep_stall+0xba>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3042:	00aa      	lsls	r2, r5, #2
    3044:	1952      	adds	r2, r2, r5
    3046:	0091      	lsls	r1, r2, #2
    3048:	4b40      	ldr	r3, [pc, #256]	; (314c <_usb_d_dev_ep_stall+0x148>)
    304a:	3320      	adds	r3, #32
    304c:	185b      	adds	r3, r3, r1
    304e:	3326      	adds	r3, #38	; 0x26
    3050:	781a      	ldrb	r2, [r3, #0]
    3052:	230f      	movs	r3, #15
    3054:	4013      	ands	r3, r2
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    3056:	3308      	adds	r3, #8
    3058:	015b      	lsls	r3, r3, #5
    305a:	4a3d      	ldr	r2, [pc, #244]	; (3150 <_usb_d_dev_ep_stall+0x14c>)
    305c:	4694      	mov	ip, r2
    305e:	4463      	add	r3, ip
    3060:	7998      	ldrb	r0, [r3, #6]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    3062:	2310      	movs	r3, #16
    3064:	40a3      	lsls	r3, r4
    3066:	4018      	ands	r0, r3
    3068:	1e43      	subs	r3, r0, #1
    306a:	4198      	sbcs	r0, r3
    306c:	b2c0      	uxtb	r0, r0
}
    306e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3070:	4836      	ldr	r0, [pc, #216]	; (314c <_usb_d_dev_ep_stall+0x148>)
    3072:	0003      	movs	r3, r0
    3074:	3320      	adds	r3, #32
    3076:	00aa      	lsls	r2, r5, #2
    3078:	1956      	adds	r6, r2, r5
    307a:	00b1      	lsls	r1, r6, #2
    307c:	185b      	adds	r3, r3, r1
    307e:	3326      	adds	r3, #38	; 0x26
    3080:	781b      	ldrb	r3, [r3, #0]
    3082:	210f      	movs	r1, #15
    3084:	400b      	ands	r3, r1
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    3086:	2610      	movs	r6, #16
    3088:	40a6      	lsls	r6, r4
    308a:	b2f6      	uxtb	r6, r6
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    308c:	0019      	movs	r1, r3
    308e:	3108      	adds	r1, #8
    3090:	0149      	lsls	r1, r1, #5
    3092:	4f2f      	ldr	r7, [pc, #188]	; (3150 <_usb_d_dev_ep_stall+0x14c>)
    3094:	46bc      	mov	ip, r7
    3096:	4461      	add	r1, ip
    3098:	714e      	strb	r6, [r1, #5]
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    309a:	2120      	movs	r1, #32
    309c:	40a1      	lsls	r1, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    309e:	b2cc      	uxtb	r4, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    30a0:	0159      	lsls	r1, r3, #5
    30a2:	4b2c      	ldr	r3, [pc, #176]	; (3154 <_usb_d_dev_ep_stall+0x150>)
    30a4:	469c      	mov	ip, r3
    30a6:	4461      	add	r1, ip
    30a8:	700c      	strb	r4, [r1, #0]
	ept->flags.bits.is_stalled = 1;
    30aa:	1952      	adds	r2, r2, r5
    30ac:	0093      	lsls	r3, r2, #2
    30ae:	18c3      	adds	r3, r0, r3
    30b0:	3340      	adds	r3, #64	; 0x40
    30b2:	79da      	ldrb	r2, [r3, #7]
    30b4:	2108      	movs	r1, #8
    30b6:	430a      	orrs	r2, r1
    30b8:	71da      	strb	r2, [r3, #7]
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    30ba:	2000      	movs	r0, #0
    30bc:	e7d7      	b.n	306e <_usb_d_dev_ep_stall+0x6a>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    30be:	7c9a      	ldrb	r2, [r3, #18]
    30c0:	310f      	adds	r1, #15
    30c2:	400a      	ands	r2, r1
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    30c4:	0011      	movs	r1, r2
    30c6:	3108      	adds	r1, #8
    30c8:	0149      	lsls	r1, r1, #5
    30ca:	4821      	ldr	r0, [pc, #132]	; (3150 <_usb_d_dev_ep_stall+0x14c>)
    30cc:	4684      	mov	ip, r0
    30ce:	4461      	add	r1, ip
    30d0:	7988      	ldrb	r0, [r1, #6]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    30d2:	2110      	movs	r1, #16
    30d4:	40a1      	lsls	r1, r4
	if (!is_stalled) {
    30d6:	4208      	tst	r0, r1
    30d8:	d024      	beq.n	3124 <_usb_d_dev_ep_stall+0x120>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    30da:	b2c9      	uxtb	r1, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    30dc:	0010      	movs	r0, r2
    30de:	3008      	adds	r0, #8
    30e0:	0140      	lsls	r0, r0, #5
    30e2:	4460      	add	r0, ip
    30e4:	7101      	strb	r1, [r0, #4]
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    30e6:	2120      	movs	r1, #32
    30e8:	40a1      	lsls	r1, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    30ea:	b2ce      	uxtb	r6, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    30ec:	0155      	lsls	r5, r2, #5
    30ee:	4f1a      	ldr	r7, [pc, #104]	; (3158 <_usb_d_dev_ep_stall+0x154>)
    30f0:	46bc      	mov	ip, r7
    30f2:	4465      	add	r5, ip
    30f4:	702e      	strb	r6, [r5, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    30f6:	79c0      	ldrb	r0, [r0, #7]
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    30f8:	4208      	tst	r0, r1
    30fa:	d00a      	beq.n	3112 <_usb_d_dev_ep_stall+0x10e>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    30fc:	0011      	movs	r1, r2
    30fe:	3108      	adds	r1, #8
    3100:	0149      	lsls	r1, r1, #5
    3102:	4813      	ldr	r0, [pc, #76]	; (3150 <_usb_d_dev_ep_stall+0x14c>)
    3104:	4684      	mov	ip, r0
    3106:	4461      	add	r1, ip
    3108:	71ce      	strb	r6, [r1, #7]
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    310a:	2001      	movs	r0, #1
    310c:	40a0      	lsls	r0, r4
    310e:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3110:	7108      	strb	r0, [r1, #4]
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    3112:	7cd8      	ldrb	r0, [r3, #19]
    3114:	2107      	movs	r1, #7
    3116:	4001      	ands	r1, r0
    3118:	2901      	cmp	r1, #1
    311a:	d005      	beq.n	3128 <_usb_d_dev_ep_stall+0x124>
		ept->flags.bits.is_stalled = 0;
    311c:	7cda      	ldrb	r2, [r3, #19]
    311e:	2108      	movs	r1, #8
    3120:	438a      	bics	r2, r1
    3122:	74da      	strb	r2, [r3, #19]
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    3124:	2000      	movs	r0, #0
    3126:	e7a2      	b.n	306e <_usb_d_dev_ep_stall+0x6a>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    3128:	3208      	adds	r2, #8
    312a:	0152      	lsls	r2, r2, #5
    312c:	4908      	ldr	r1, [pc, #32]	; (3150 <_usb_d_dev_ep_stall+0x14c>)
    312e:	468c      	mov	ip, r1
    3130:	4462      	add	r2, ip
    3132:	7991      	ldrb	r1, [r2, #6]
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    3134:	2230      	movs	r2, #48	; 0x30
    3136:	4211      	tst	r1, r2
    3138:	d1f4      	bne.n	3124 <_usb_d_dev_ep_stall+0x120>
			ept->flags.bits.is_stalled = 0;
    313a:	0002      	movs	r2, r0
    313c:	2108      	movs	r1, #8
    313e:	438a      	bics	r2, r1
    3140:	74da      	strb	r2, [r3, #19]
    3142:	e7ef      	b.n	3124 <_usb_d_dev_ep_stall+0x120>
		return -USB_ERR_PARAM;
    3144:	2012      	movs	r0, #18
    3146:	4240      	negs	r0, r0
    3148:	e791      	b.n	306e <_usb_d_dev_ep_stall+0x6a>
    314a:	46c0      	nop			; (mov r8, r8)
    314c:	200001b0 	.word	0x200001b0
    3150:	41005000 	.word	0x41005000
    3154:	41005109 	.word	0x41005109
    3158:	41005108 	.word	0x41005108

0000315c <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    315c:	b570      	push	{r4, r5, r6, lr}
    315e:	000e      	movs	r6, r1
	uint8_t            epn   = USB_EP_GET_N(ep);
    3160:	240f      	movs	r4, #15
    3162:	4004      	ands	r4, r0
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    3164:	0162      	lsls	r2, r4, #5
    3166:	4b18      	ldr	r3, [pc, #96]	; (31c8 <_usb_d_dev_ep_read_req+0x6c>)
    3168:	189b      	adds	r3, r3, r2
	uint32_t           addr  = bank[0].ADDR.reg;
    316a:	6819      	ldr	r1, [r3, #0]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    316c:	685d      	ldr	r5, [r3, #4]
    316e:	04ad      	lsls	r5, r5, #18
    3170:	0cad      	lsrs	r5, r5, #18

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    3172:	2c04      	cmp	r4, #4
    3174:	d81f      	bhi.n	31b6 <_usb_d_dev_ep_read_req+0x5a>
    3176:	2e00      	cmp	r6, #0
    3178:	d020      	beq.n	31bc <_usb_d_dev_ep_read_req+0x60>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    317a:	0023      	movs	r3, r4
    317c:	3308      	adds	r3, #8
    317e:	015b      	lsls	r3, r3, #5
    3180:	4a12      	ldr	r2, [pc, #72]	; (31cc <_usb_d_dev_ep_read_req+0x70>)
    3182:	5c9b      	ldrb	r3, [r3, r2]
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    3184:	2b11      	cmp	r3, #17
    3186:	d11c      	bne.n	31c2 <_usb_d_dev_ep_read_req+0x66>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    3188:	0023      	movs	r3, r4
    318a:	3308      	adds	r3, #8
    318c:	015b      	lsls	r3, r3, #5
    318e:	4694      	mov	ip, r2
    3190:	4463      	add	r3, ip
    3192:	79db      	ldrb	r3, [r3, #7]
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    3194:	06db      	lsls	r3, r3, #27
    3196:	d401      	bmi.n	319c <_usb_d_dev_ep_read_req+0x40>
		return ERR_NONE;
    3198:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    319a:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(req_buf, (void *)addr, 8);
    319c:	2208      	movs	r2, #8
    319e:	0030      	movs	r0, r6
    31a0:	4b0b      	ldr	r3, [pc, #44]	; (31d0 <_usb_d_dev_ep_read_req+0x74>)
    31a2:	4798      	blx	r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    31a4:	3408      	adds	r4, #8
    31a6:	0164      	lsls	r4, r4, #5
    31a8:	4b08      	ldr	r3, [pc, #32]	; (31cc <_usb_d_dev_ep_read_req+0x70>)
    31aa:	469c      	mov	ip, r3
    31ac:	4464      	add	r4, ip
    31ae:	2310      	movs	r3, #16
    31b0:	71e3      	strb	r3, [r4, #7]
	return bytes;
    31b2:	0028      	movs	r0, r5
    31b4:	e7f1      	b.n	319a <_usb_d_dev_ep_read_req+0x3e>
		return -USB_ERR_PARAM;
    31b6:	2012      	movs	r0, #18
    31b8:	4240      	negs	r0, r0
    31ba:	e7ee      	b.n	319a <_usb_d_dev_ep_read_req+0x3e>
    31bc:	2012      	movs	r0, #18
    31be:	4240      	negs	r0, r0
    31c0:	e7eb      	b.n	319a <_usb_d_dev_ep_read_req+0x3e>
		return -USB_ERR_FUNC;
    31c2:	2013      	movs	r0, #19
    31c4:	4240      	negs	r0, r0
    31c6:	e7e8      	b.n	319a <_usb_d_dev_ep_read_req+0x3e>
    31c8:	20000130 	.word	0x20000130
    31cc:	41005000 	.word	0x41005000
    31d0:	000040d9 	.word	0x000040d9

000031d4 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    31d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    31d6:	46de      	mov	lr, fp
    31d8:	4657      	mov	r7, sl
    31da:	464e      	mov	r6, r9
    31dc:	4645      	mov	r5, r8
    31de:	b5e0      	push	{r5, r6, r7, lr}
    31e0:	b085      	sub	sp, #20
    31e2:	4680      	mov	r8, r0
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    31e4:	7a04      	ldrb	r4, [r0, #8]
    31e6:	220f      	movs	r2, #15
    31e8:	4022      	ands	r2, r4
    31ea:	b264      	sxtb	r4, r4
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    31ec:	0fe3      	lsrs	r3, r4, #31
    31ee:	4699      	mov	r9, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    31f0:	2a00      	cmp	r2, #0
    31f2:	d005      	beq.n	3200 <_usb_d_dev_ep_trans+0x2c>
    31f4:	2c00      	cmp	r4, #0
    31f6:	db01      	blt.n	31fc <_usb_d_dev_ep_trans+0x28>
    31f8:	0010      	movs	r0, r2
    31fa:	e002      	b.n	3202 <_usb_d_dev_ep_trans+0x2e>
    31fc:	1d10      	adds	r0, r2, #4
    31fe:	e000      	b.n	3202 <_usb_d_dev_ep_trans+0x2e>
    3200:	0010      	movs	r0, r2
	return &dev_inst.ep[ep_index];
    3202:	0005      	movs	r5, r0
    3204:	4b62      	ldr	r3, [pc, #392]	; (3390 <_usb_d_dev_ep_trans+0x1bc>)
    3206:	001f      	movs	r7, r3
    3208:	3720      	adds	r7, #32
    320a:	0081      	lsls	r1, r0, #2
    320c:	180e      	adds	r6, r1, r0
    320e:	46b4      	mov	ip, r6
    3210:	00b6      	lsls	r6, r6, #2
    3212:	3610      	adds	r6, #16
    3214:	19bf      	adds	r7, r7, r6
    3216:	3704      	adds	r7, #4
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    3218:	4661      	mov	r1, ip
    321a:	0088      	lsls	r0, r1, #2
    321c:	181b      	adds	r3, r3, r0
    321e:	3344      	adds	r3, #68	; 0x44
    3220:	881b      	ldrh	r3, [r3, #0]
    3222:	495c      	ldr	r1, [pc, #368]	; (3394 <_usb_d_dev_ep_trans+0x1c0>)
    3224:	428b      	cmp	r3, r1
    3226:	d042      	beq.n	32ae <_usb_d_dev_ep_trans+0xda>
    3228:	1e5e      	subs	r6, r3, #1
    322a:	b2b6      	uxth	r6, r6
	bool     size_n_aligned = (trans->size & size_mask);
    322c:	4641      	mov	r1, r8
    322e:	6849      	ldr	r1, [r1, #4]
    3230:	400e      	ands	r6, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    3232:	2a04      	cmp	r2, #4
    3234:	d900      	bls.n	3238 <_usb_d_dev_ep_trans+0x64>
    3236:	e0a1      	b.n	337c <_usb_d_dev_ep_trans+0x1a8>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    3238:	4642      	mov	r2, r8
    323a:	6812      	ldr	r2, [r2, #0]
    323c:	4856      	ldr	r0, [pc, #344]	; (3398 <_usb_d_dev_ep_trans+0x1c4>)
    323e:	4282      	cmp	r2, r0
    3240:	d90c      	bls.n	325c <_usb_d_dev_ep_trans+0x88>
    3242:	1888      	adds	r0, r1, r2
    3244:	9001      	str	r0, [sp, #4]
    3246:	4855      	ldr	r0, [pc, #340]	; (339c <_usb_d_dev_ep_trans+0x1c8>)
    3248:	4684      	mov	ip, r0
    324a:	9801      	ldr	r0, [sp, #4]
    324c:	4560      	cmp	r0, ip
    324e:	d805      	bhi.n	325c <_usb_d_dev_ep_trans+0x88>
    3250:	0792      	lsls	r2, r2, #30
    3252:	d103      	bne.n	325c <_usb_d_dev_ep_trans+0x88>
	    || (!dir && (trans->size < ept->size))) {
    3254:	2c00      	cmp	r4, #0
    3256:	db2c      	blt.n	32b2 <_usb_d_dev_ep_trans+0xde>
    3258:	4299      	cmp	r1, r3
    325a:	d22d      	bcs.n	32b8 <_usb_d_dev_ep_trans+0xe4>
		if (!ept->cache) {
    325c:	00ab      	lsls	r3, r5, #2
    325e:	195b      	adds	r3, r3, r5
    3260:	009a      	lsls	r2, r3, #2
    3262:	4b4b      	ldr	r3, [pc, #300]	; (3390 <_usb_d_dev_ep_trans+0x1bc>)
    3264:	189b      	adds	r3, r3, r2
    3266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3268:	2b00      	cmp	r3, #0
    326a:	d100      	bne.n	326e <_usb_d_dev_ep_trans+0x9a>
    326c:	e089      	b.n	3382 <_usb_d_dev_ep_trans+0x1ae>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
    326e:	2301      	movs	r3, #1
    3270:	9301      	str	r3, [sp, #4]
	}
	if (!dir && size_n_aligned) {
    3272:	2c00      	cmp	r4, #0
    3274:	db0a      	blt.n	328c <_usb_d_dev_ep_trans+0xb8>
    3276:	2e00      	cmp	r6, #0
    3278:	d008      	beq.n	328c <_usb_d_dev_ep_trans+0xb8>
		if (!ept->cache) {
    327a:	00ab      	lsls	r3, r5, #2
    327c:	195b      	adds	r3, r3, r5
    327e:	009a      	lsls	r2, r3, #2
    3280:	4b43      	ldr	r3, [pc, #268]	; (3390 <_usb_d_dev_ep_trans+0x1bc>)
    3282:	189b      	adds	r3, r3, r2
    3284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3286:	2b00      	cmp	r3, #0
    3288:	d100      	bne.n	328c <_usb_d_dev_ep_trans+0xb8>
    328a:	e07d      	b.n	3388 <_usb_d_dev_ep_trans+0x1b4>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    328c:	00aa      	lsls	r2, r5, #2
    328e:	1952      	adds	r2, r2, r5
    3290:	0091      	lsls	r1, r2, #2
    3292:	4b3f      	ldr	r3, [pc, #252]	; (3390 <_usb_d_dev_ep_trans+0x1bc>)
    3294:	185b      	adds	r3, r3, r1
    3296:	3340      	adds	r3, #64	; 0x40
    3298:	79db      	ldrb	r3, [r3, #7]
    329a:	071b      	lsls	r3, r3, #28
    329c:	d50f      	bpl.n	32be <_usb_d_dev_ep_trans+0xea>
		return USB_HALTED;
    329e:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    32a0:	b005      	add	sp, #20
    32a2:	bc3c      	pop	{r2, r3, r4, r5}
    32a4:	4690      	mov	r8, r2
    32a6:	4699      	mov	r9, r3
    32a8:	46a2      	mov	sl, r4
    32aa:	46ab      	mov	fp, r5
    32ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    32ae:	001e      	movs	r6, r3
    32b0:	e7bc      	b.n	322c <_usb_d_dev_ep_trans+0x58>
	bool use_cache = false;
    32b2:	2300      	movs	r3, #0
    32b4:	9301      	str	r3, [sp, #4]
    32b6:	e7dc      	b.n	3272 <_usb_d_dev_ep_trans+0x9e>
    32b8:	2300      	movs	r3, #0
    32ba:	9301      	str	r3, [sp, #4]
    32bc:	e7d9      	b.n	3272 <_usb_d_dev_ep_trans+0x9e>
	atomic_enter_critical(&flags);
    32be:	a803      	add	r0, sp, #12
    32c0:	4b37      	ldr	r3, [pc, #220]	; (33a0 <_usb_d_dev_ep_trans+0x1cc>)
    32c2:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    32c4:	00aa      	lsls	r2, r5, #2
    32c6:	1952      	adds	r2, r2, r5
    32c8:	0091      	lsls	r1, r2, #2
    32ca:	4b31      	ldr	r3, [pc, #196]	; (3390 <_usb_d_dev_ep_trans+0x1bc>)
    32cc:	185b      	adds	r3, r3, r1
    32ce:	3340      	adds	r3, #64	; 0x40
    32d0:	79db      	ldrb	r3, [r3, #7]
    32d2:	065b      	lsls	r3, r3, #25
    32d4:	d430      	bmi.n	3338 <_usb_d_dev_ep_trans+0x164>
	ept->flags.bits.is_busy = 1;
    32d6:	00ab      	lsls	r3, r5, #2
    32d8:	195b      	adds	r3, r3, r5
    32da:	009a      	lsls	r2, r3, #2
    32dc:	4b2c      	ldr	r3, [pc, #176]	; (3390 <_usb_d_dev_ep_trans+0x1bc>)
    32de:	469b      	mov	fp, r3
    32e0:	4493      	add	fp, r2
    32e2:	2340      	movs	r3, #64	; 0x40
    32e4:	445b      	add	r3, fp
    32e6:	469a      	mov	sl, r3
    32e8:	79db      	ldrb	r3, [r3, #7]
    32ea:	2240      	movs	r2, #64	; 0x40
    32ec:	4313      	orrs	r3, r2
    32ee:	4652      	mov	r2, sl
    32f0:	71d3      	strb	r3, [r2, #7]
	atomic_leave_critical(&flags);
    32f2:	a803      	add	r0, sp, #12
    32f4:	4b2b      	ldr	r3, [pc, #172]	; (33a4 <_usb_d_dev_ep_trans+0x1d0>)
    32f6:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    32f8:	465b      	mov	r3, fp
    32fa:	4642      	mov	r2, r8
    32fc:	6812      	ldr	r2, [r2, #0]
    32fe:	635a      	str	r2, [r3, #52]	; 0x34
	ept->trans_size  = trans->size;
    3300:	4642      	mov	r2, r8
    3302:	6852      	ldr	r2, [r2, #4]
    3304:	639a      	str	r2, [r3, #56]	; 0x38
	ept->trans_count = 0;
    3306:	2300      	movs	r3, #0
    3308:	465a      	mov	r2, fp
    330a:	63d3      	str	r3, [r2, #60]	; 0x3c
	ept->flags.bits.dir       = dir;
    330c:	464b      	mov	r3, r9
    330e:	01db      	lsls	r3, r3, #7
    3310:	4652      	mov	r2, sl
    3312:	79d2      	ldrb	r2, [r2, #7]
    3314:	217f      	movs	r1, #127	; 0x7f
    3316:	4011      	ands	r1, r2
	ept->flags.bits.use_cache = use_cache;
    3318:	9a01      	ldr	r2, [sp, #4]
    331a:	0152      	lsls	r2, r2, #5
    331c:	430b      	orrs	r3, r1
    331e:	2120      	movs	r1, #32
    3320:	438b      	bics	r3, r1
    3322:	431a      	orrs	r2, r3
    3324:	4653      	mov	r3, sl
    3326:	71da      	strb	r2, [r3, #7]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    3328:	4643      	mov	r3, r8
    332a:	7a5b      	ldrb	r3, [r3, #9]
    332c:	2b00      	cmp	r3, #0
    332e:	d008      	beq.n	3342 <_usb_d_dev_ep_trans+0x16e>
    3330:	2e00      	cmp	r6, #0
    3332:	d01b      	beq.n	336c <_usb_d_dev_ep_trans+0x198>
    3334:	2200      	movs	r2, #0
    3336:	e005      	b.n	3344 <_usb_d_dev_ep_trans+0x170>
		atomic_leave_critical(&flags);
    3338:	a803      	add	r0, sp, #12
    333a:	4b1a      	ldr	r3, [pc, #104]	; (33a4 <_usb_d_dev_ep_trans+0x1d0>)
    333c:	4798      	blx	r3
		return USB_BUSY;
    333e:	2001      	movs	r0, #1
    3340:	e7ae      	b.n	32a0 <_usb_d_dev_ep_trans+0xcc>
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    3342:	2200      	movs	r2, #0
    3344:	00ab      	lsls	r3, r5, #2
    3346:	195d      	adds	r5, r3, r5
    3348:	00a9      	lsls	r1, r5, #2
    334a:	4b11      	ldr	r3, [pc, #68]	; (3390 <_usb_d_dev_ep_trans+0x1bc>)
    334c:	185b      	adds	r3, r3, r1
    334e:	3340      	adds	r3, #64	; 0x40
    3350:	0111      	lsls	r1, r2, #4
    3352:	79da      	ldrb	r2, [r3, #7]
    3354:	2010      	movs	r0, #16
    3356:	4382      	bics	r2, r0
    3358:	430a      	orrs	r2, r1
    335a:	71da      	strb	r2, [r3, #7]
	if (dir) {
    335c:	2c00      	cmp	r4, #0
    335e:	db07      	blt.n	3370 <_usb_d_dev_ep_trans+0x19c>
		_usb_d_dev_out_next(ept, false);
    3360:	2100      	movs	r1, #0
    3362:	0038      	movs	r0, r7
    3364:	4b10      	ldr	r3, [pc, #64]	; (33a8 <_usb_d_dev_ep_trans+0x1d4>)
    3366:	4798      	blx	r3
	return ERR_NONE;
    3368:	2000      	movs	r0, #0
    336a:	e799      	b.n	32a0 <_usb_d_dev_ep_trans+0xcc>
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    336c:	2201      	movs	r2, #1
    336e:	e7e9      	b.n	3344 <_usb_d_dev_ep_trans+0x170>
		_usb_d_dev_in_next(ept, false);
    3370:	2100      	movs	r1, #0
    3372:	0038      	movs	r0, r7
    3374:	4b0d      	ldr	r3, [pc, #52]	; (33ac <_usb_d_dev_ep_trans+0x1d8>)
    3376:	4798      	blx	r3
	return ERR_NONE;
    3378:	2000      	movs	r0, #0
    337a:	e791      	b.n	32a0 <_usb_d_dev_ep_trans+0xcc>
		return -USB_ERR_PARAM;
    337c:	2012      	movs	r0, #18
    337e:	4240      	negs	r0, r0
    3380:	e78e      	b.n	32a0 <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_FUNC;
    3382:	2013      	movs	r0, #19
    3384:	4240      	negs	r0, r0
    3386:	e78b      	b.n	32a0 <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_PARAM;
    3388:	2012      	movs	r0, #18
    338a:	4240      	negs	r0, r0
    338c:	e788      	b.n	32a0 <_usb_d_dev_ep_trans+0xcc>
    338e:	46c0      	nop			; (mov r8, r8)
    3390:	200001b0 	.word	0x200001b0
    3394:	000003ff 	.word	0x000003ff
    3398:	1fffffff 	.word	0x1fffffff
    339c:	20007fff 	.word	0x20007fff
    33a0:	000008e5 	.word	0x000008e5
    33a4:	000008f3 	.word	0x000008f3
    33a8:	00002575 	.word	0x00002575
    33ac:	000023e5 	.word	0x000023e5

000033b0 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    33b0:	2900      	cmp	r1, #0
    33b2:	d006      	beq.n	33c2 <_usb_d_dev_register_callback+0x12>
	if (type == USB_D_CB_EVENT) {
    33b4:	2801      	cmp	r0, #1
    33b6:	d006      	beq.n	33c6 <_usb_d_dev_register_callback+0x16>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    33b8:	2800      	cmp	r0, #0
    33ba:	d101      	bne.n	33c0 <_usb_d_dev_register_callback+0x10>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    33bc:	4b03      	ldr	r3, [pc, #12]	; (33cc <_usb_d_dev_register_callback+0x1c>)
    33be:	6219      	str	r1, [r3, #32]
	}
}
    33c0:	4770      	bx	lr
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    33c2:	4903      	ldr	r1, [pc, #12]	; (33d0 <_usb_d_dev_register_callback+0x20>)
    33c4:	e7f6      	b.n	33b4 <_usb_d_dev_register_callback+0x4>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    33c6:	4b01      	ldr	r3, [pc, #4]	; (33cc <_usb_d_dev_register_callback+0x1c>)
    33c8:	6259      	str	r1, [r3, #36]	; 0x24
    33ca:	e7f9      	b.n	33c0 <_usb_d_dev_register_callback+0x10>
    33cc:	200001b0 	.word	0x200001b0
    33d0:	000020c1 	.word	0x000020c1

000033d4 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    33d4:	2900      	cmp	r1, #0
    33d6:	d008      	beq.n	33ea <_usb_d_dev_register_ep_callback+0x16>
	if (type == USB_D_DEV_EP_CB_SETUP) {
    33d8:	2800      	cmp	r0, #0
    33da:	d008      	beq.n	33ee <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    33dc:	2801      	cmp	r0, #1
    33de:	d009      	beq.n	33f4 <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    33e0:	2802      	cmp	r0, #2
    33e2:	d106      	bne.n	33f2 <_usb_d_dev_register_ep_callback+0x1e>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    33e4:	4b05      	ldr	r3, [pc, #20]	; (33fc <_usb_d_dev_register_ep_callback+0x28>)
    33e6:	6319      	str	r1, [r3, #48]	; 0x30
	}
}
    33e8:	e003      	b.n	33f2 <_usb_d_dev_register_ep_callback+0x1e>
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    33ea:	4905      	ldr	r1, [pc, #20]	; (3400 <_usb_d_dev_register_ep_callback+0x2c>)
    33ec:	e7f4      	b.n	33d8 <_usb_d_dev_register_ep_callback+0x4>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    33ee:	4b03      	ldr	r3, [pc, #12]	; (33fc <_usb_d_dev_register_ep_callback+0x28>)
    33f0:	6299      	str	r1, [r3, #40]	; 0x28
}
    33f2:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    33f4:	4b01      	ldr	r3, [pc, #4]	; (33fc <_usb_d_dev_register_ep_callback+0x28>)
    33f6:	62d9      	str	r1, [r3, #44]	; 0x2c
    33f8:	e7fb      	b.n	33f2 <_usb_d_dev_register_ep_callback+0x1e>
    33fa:	46c0      	nop			; (mov r8, r8)
    33fc:	200001b0 	.word	0x200001b0
    3400:	000020c1 	.word	0x000020c1

00003404 <USB_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_Handler(void)
{
    3404:	b510      	push	{r4, lr}

	_usb_d_dev_handler();
    3406:	4b01      	ldr	r3, [pc, #4]	; (340c <USB_Handler+0x8>)
    3408:	4798      	blx	r3
}
    340a:	bd10      	pop	{r4, pc}
    340c:	00002779 	.word	0x00002779

00003410 <main>:
#include <atmel_start.h>

int main(void)
{
    3410:	b510      	push	{r4, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    3412:	4b01      	ldr	r3, [pc, #4]	; (3418 <main+0x8>)
    3414:	4798      	blx	r3
    3416:	e7fe      	b.n	3416 <main+0x6>
    3418:	00000115 	.word	0x00000115

0000341c <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    341c:	b510      	push	{r4, lr}
	uint16_t len = req->wLength;
    341e:	798b      	ldrb	r3, [r1, #6]
    3420:	79cc      	ldrb	r4, [r1, #7]
    3422:	0224      	lsls	r4, r4, #8
    3424:	431c      	orrs	r4, r3

	if (USB_DATA_STAGE == stage) {
    3426:	2a01      	cmp	r2, #1
    3428:	d00a      	beq.n	3440 <cdcdf_acm_get_req+0x24>
		return ERR_NONE;
	}

	switch (req->bRequest) {
    342a:	784b      	ldrb	r3, [r1, #1]
    342c:	2b21      	cmp	r3, #33	; 0x21
    342e:	d109      	bne.n	3444 <cdcdf_acm_get_req+0x28>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    3430:	2c07      	cmp	r4, #7
    3432:	d10a      	bne.n	344a <cdcdf_acm_get_req+0x2e>
			return ERR_INVALID_DATA;
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    3434:	2300      	movs	r3, #0
    3436:	0022      	movs	r2, r4
    3438:	4905      	ldr	r1, [pc, #20]	; (3450 <cdcdf_acm_get_req+0x34>)
    343a:	4c06      	ldr	r4, [pc, #24]	; (3454 <cdcdf_acm_get_req+0x38>)
    343c:	47a0      	blx	r4
	default:
		return ERR_INVALID_ARG;
	}
}
    343e:	bd10      	pop	{r4, pc}
		return ERR_NONE;
    3440:	2000      	movs	r0, #0
    3442:	e7fc      	b.n	343e <cdcdf_acm_get_req+0x22>
		return ERR_INVALID_ARG;
    3444:	200d      	movs	r0, #13
    3446:	4240      	negs	r0, r0
    3448:	e7f9      	b.n	343e <cdcdf_acm_get_req+0x22>
			return ERR_INVALID_DATA;
    344a:	2001      	movs	r0, #1
    344c:	4240      	negs	r0, r0
    344e:	e7f6      	b.n	343e <cdcdf_acm_get_req+0x22>
    3450:	20000498 	.word	0x20000498
    3454:	00003995 	.word	0x00003995

00003458 <cdcdf_acm_set_req>:
{
    3458:	b5f0      	push	{r4, r5, r6, r7, lr}
    345a:	b083      	sub	sp, #12
    345c:	0005      	movs	r5, r0
    345e:	000f      	movs	r7, r1
    3460:	0014      	movs	r4, r2
	uint16_t                   len      = req->wLength;
    3462:	798e      	ldrb	r6, [r1, #6]
    3464:	79cb      	ldrb	r3, [r1, #7]
    3466:	021b      	lsls	r3, r3, #8
    3468:	431e      	orrs	r6, r3
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    346a:	4b23      	ldr	r3, [pc, #140]	; (34f8 <cdcdf_acm_set_req+0xa0>)
    346c:	4798      	blx	r3
	switch (req->bRequest) {
    346e:	787b      	ldrb	r3, [r7, #1]
    3470:	2b20      	cmp	r3, #32
    3472:	d005      	beq.n	3480 <cdcdf_acm_set_req+0x28>
    3474:	2b22      	cmp	r3, #34	; 0x22
    3476:	d026      	beq.n	34c6 <cdcdf_acm_set_req+0x6e>
		return ERR_INVALID_ARG;
    3478:	200d      	movs	r0, #13
    347a:	4240      	negs	r0, r0
}
    347c:	b003      	add	sp, #12
    347e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (sizeof(struct usb_cdc_line_coding) != len) {
    3480:	2e07      	cmp	r6, #7
    3482:	d131      	bne.n	34e8 <cdcdf_acm_set_req+0x90>
		if (USB_SETUP_STAGE == stage) {
    3484:	2c00      	cmp	r4, #0
    3486:	d017      	beq.n	34b8 <cdcdf_acm_set_req+0x60>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    3488:	2207      	movs	r2, #7
    348a:	0001      	movs	r1, r0
    348c:	4668      	mov	r0, sp
    348e:	4b1b      	ldr	r3, [pc, #108]	; (34fc <cdcdf_acm_set_req+0xa4>)
    3490:	4798      	blx	r3
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    3492:	4b1b      	ldr	r3, [pc, #108]	; (3500 <cdcdf_acm_set_req+0xa8>)
    3494:	689b      	ldr	r3, [r3, #8]
    3496:	2b00      	cmp	r3, #0
    3498:	d003      	beq.n	34a2 <cdcdf_acm_set_req+0x4a>
    349a:	4668      	mov	r0, sp
    349c:	4798      	blx	r3
    349e:	2800      	cmp	r0, #0
    34a0:	d025      	beq.n	34ee <cdcdf_acm_set_req+0x96>
				usbd_cdc_line_coding = line_coding_tmp;
    34a2:	4b17      	ldr	r3, [pc, #92]	; (3500 <cdcdf_acm_set_req+0xa8>)
    34a4:	9a00      	ldr	r2, [sp, #0]
    34a6:	601a      	str	r2, [r3, #0]
    34a8:	466a      	mov	r2, sp
    34aa:	8892      	ldrh	r2, [r2, #4]
    34ac:	809a      	strh	r2, [r3, #4]
    34ae:	466a      	mov	r2, sp
    34b0:	7992      	ldrb	r2, [r2, #6]
    34b2:	719a      	strb	r2, [r3, #6]
			return ERR_NONE;
    34b4:	2000      	movs	r0, #0
    34b6:	e7e1      	b.n	347c <cdcdf_acm_set_req+0x24>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    34b8:	2300      	movs	r3, #0
    34ba:	0032      	movs	r2, r6
    34bc:	0001      	movs	r1, r0
    34be:	0028      	movs	r0, r5
    34c0:	4c10      	ldr	r4, [pc, #64]	; (3504 <cdcdf_acm_set_req+0xac>)
    34c2:	47a0      	blx	r4
    34c4:	e7da      	b.n	347c <cdcdf_acm_set_req+0x24>
		usbdc_xfer(0, NULL, 0, 0);
    34c6:	2300      	movs	r3, #0
    34c8:	2200      	movs	r2, #0
    34ca:	2100      	movs	r1, #0
    34cc:	2000      	movs	r0, #0
    34ce:	4c0d      	ldr	r4, [pc, #52]	; (3504 <cdcdf_acm_set_req+0xac>)
    34d0:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    34d2:	4b0b      	ldr	r3, [pc, #44]	; (3500 <cdcdf_acm_set_req+0xa8>)
    34d4:	68db      	ldr	r3, [r3, #12]
    34d6:	2b00      	cmp	r3, #0
    34d8:	d00b      	beq.n	34f2 <cdcdf_acm_set_req+0x9a>
			cdcdf_acm_notify_state(req->wValue);
    34da:	78ba      	ldrb	r2, [r7, #2]
    34dc:	78f8      	ldrb	r0, [r7, #3]
    34de:	0200      	lsls	r0, r0, #8
    34e0:	4310      	orrs	r0, r2
    34e2:	4798      	blx	r3
		return ERR_NONE;
    34e4:	2000      	movs	r0, #0
    34e6:	e7c9      	b.n	347c <cdcdf_acm_set_req+0x24>
			return ERR_INVALID_DATA;
    34e8:	2001      	movs	r0, #1
    34ea:	4240      	negs	r0, r0
    34ec:	e7c6      	b.n	347c <cdcdf_acm_set_req+0x24>
			return ERR_NONE;
    34ee:	2000      	movs	r0, #0
    34f0:	e7c4      	b.n	347c <cdcdf_acm_set_req+0x24>
		return ERR_NONE;
    34f2:	2000      	movs	r0, #0
    34f4:	e7c2      	b.n	347c <cdcdf_acm_set_req+0x24>
    34f6:	46c0      	nop			; (mov r8, r8)
    34f8:	00003f21 	.word	0x00003f21
    34fc:	000040d9 	.word	0x000040d9
    3500:	20000498 	.word	0x20000498
    3504:	00003995 	.word	0x00003995

00003508 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    3508:	b570      	push	{r4, r5, r6, lr}
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    350a:	780c      	ldrb	r4, [r1, #0]
    350c:	0965      	lsrs	r5, r4, #5
    350e:	2303      	movs	r3, #3
    3510:	402b      	ands	r3, r5
    3512:	2b01      	cmp	r3, #1
    3514:	d114      	bne.n	3540 <cdcdf_acm_req+0x38>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    3516:	790d      	ldrb	r5, [r1, #4]
    3518:	794b      	ldrb	r3, [r1, #5]
    351a:	021b      	lsls	r3, r3, #8
    351c:	432b      	orrs	r3, r5
    351e:	4d0b      	ldr	r5, [pc, #44]	; (354c <cdcdf_acm_req+0x44>)
    3520:	7c2d      	ldrb	r5, [r5, #16]
    3522:	42ab      	cmp	r3, r5
    3524:	d003      	beq.n	352e <cdcdf_acm_req+0x26>
    3526:	4d09      	ldr	r5, [pc, #36]	; (354c <cdcdf_acm_req+0x44>)
    3528:	7c6d      	ldrb	r5, [r5, #17]
    352a:	42ab      	cmp	r3, r5
    352c:	d10b      	bne.n	3546 <cdcdf_acm_req+0x3e>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    352e:	b264      	sxtb	r4, r4
    3530:	2c00      	cmp	r4, #0
    3532:	db02      	blt.n	353a <cdcdf_acm_req+0x32>
			return cdcdf_acm_get_req(ep, req, stage);
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    3534:	4b06      	ldr	r3, [pc, #24]	; (3550 <cdcdf_acm_req+0x48>)
    3536:	4798      	blx	r3
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    3538:	bd70      	pop	{r4, r5, r6, pc}
			return cdcdf_acm_get_req(ep, req, stage);
    353a:	4b06      	ldr	r3, [pc, #24]	; (3554 <cdcdf_acm_req+0x4c>)
    353c:	4798      	blx	r3
    353e:	e7fb      	b.n	3538 <cdcdf_acm_req+0x30>
		return ERR_NOT_FOUND;
    3540:	200a      	movs	r0, #10
    3542:	4240      	negs	r0, r0
    3544:	e7f8      	b.n	3538 <cdcdf_acm_req+0x30>
		return ERR_NOT_FOUND;
    3546:	200a      	movs	r0, #10
    3548:	4240      	negs	r0, r0
    354a:	e7f5      	b.n	3538 <cdcdf_acm_req+0x30>
    354c:	20000498 	.word	0x20000498
    3550:	00003459 	.word	0x00003459
    3554:	0000341d 	.word	0x0000341d

00003558 <cdcdf_acm_enable>:
{
    3558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    355a:	46ce      	mov	lr, r9
    355c:	4647      	mov	r7, r8
    355e:	b580      	push	{r7, lr}
    3560:	000e      	movs	r6, r1
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    3562:	6887      	ldr	r7, [r0, #8]
	ifc = desc->sod;
    3564:	6808      	ldr	r0, [r1, #0]
	for (i = 0; i < 2; i++) {
    3566:	2300      	movs	r3, #0
    3568:	4698      	mov	r8, r3
    356a:	4643      	mov	r3, r8
    356c:	2b01      	cmp	r3, #1
    356e:	d845      	bhi.n	35fc <cdcdf_acm_enable+0xa4>
		if (NULL == ifc) {
    3570:	2800      	cmp	r0, #0
    3572:	d04b      	beq.n	360c <cdcdf_acm_enable+0xb4>
		ifc_desc.bInterfaceNumber = ifc[2];
    3574:	7883      	ldrb	r3, [r0, #2]
		ifc_desc.bInterfaceClass  = ifc[5];
    3576:	7942      	ldrb	r2, [r0, #5]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    3578:	2a02      	cmp	r2, #2
    357a:	d001      	beq.n	3580 <cdcdf_acm_enable+0x28>
    357c:	2a0a      	cmp	r2, #10
    357e:	d148      	bne.n	3612 <cdcdf_acm_enable+0xba>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    3580:	46c1      	mov	r9, r8
    3582:	4642      	mov	r2, r8
    3584:	5cba      	ldrb	r2, [r7, r2]
    3586:	4293      	cmp	r3, r2
    3588:	d046      	beq.n	3618 <cdcdf_acm_enable+0xc0>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    358a:	2aff      	cmp	r2, #255	; 0xff
    358c:	d147      	bne.n	361e <cdcdf_acm_enable+0xc6>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    358e:	4642      	mov	r2, r8
    3590:	54bb      	strb	r3, [r7, r2]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    3592:	2205      	movs	r2, #5
    3594:	6871      	ldr	r1, [r6, #4]
    3596:	4b25      	ldr	r3, [pc, #148]	; (362c <cdcdf_acm_enable+0xd4>)
    3598:	4798      	blx	r3
    359a:	0004      	movs	r4, r0
		while (NULL != ep) {
    359c:	e00c      	b.n	35b8 <cdcdf_acm_enable+0x60>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    359e:	464b      	mov	r3, r9
    35a0:	18fb      	adds	r3, r7, r3
    35a2:	709d      	strb	r5, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    35a4:	0028      	movs	r0, r5
    35a6:	4b22      	ldr	r3, [pc, #136]	; (3630 <cdcdf_acm_enable+0xd8>)
    35a8:	4798      	blx	r3
			desc->sod = ep;
    35aa:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
	return desc[0];
    35ac:	7820      	ldrb	r0, [r4, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    35ae:	1820      	adds	r0, r4, r0
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    35b0:	6871      	ldr	r1, [r6, #4]
    35b2:	4b20      	ldr	r3, [pc, #128]	; (3634 <cdcdf_acm_enable+0xdc>)
    35b4:	4798      	blx	r3
    35b6:	0004      	movs	r4, r0
		while (NULL != ep) {
    35b8:	2c00      	cmp	r4, #0
    35ba:	d013      	beq.n	35e4 <cdcdf_acm_enable+0x8c>
			ep_desc.bEndpointAddress = ep[2];
    35bc:	78a5      	ldrb	r5, [r4, #2]
			ep_desc.bmAttributes     = ep[3];
    35be:	78e1      	ldrb	r1, [r4, #3]
	return (ptr[0] + (ptr[1] << 8));
    35c0:	7922      	ldrb	r2, [r4, #4]
    35c2:	7963      	ldrb	r3, [r4, #5]
    35c4:	021b      	lsls	r3, r3, #8
    35c6:	18d2      	adds	r2, r2, r3
    35c8:	b292      	uxth	r2, r2
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    35ca:	0028      	movs	r0, r5
    35cc:	4b1a      	ldr	r3, [pc, #104]	; (3638 <cdcdf_acm_enable+0xe0>)
    35ce:	4798      	blx	r3
    35d0:	2800      	cmp	r0, #0
    35d2:	d127      	bne.n	3624 <cdcdf_acm_enable+0xcc>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    35d4:	b26b      	sxtb	r3, r5
    35d6:	2b00      	cmp	r3, #0
    35d8:	dbe1      	blt.n	359e <cdcdf_acm_enable+0x46>
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    35da:	713d      	strb	r5, [r7, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    35dc:	0028      	movs	r0, r5
    35de:	4b14      	ldr	r3, [pc, #80]	; (3630 <cdcdf_acm_enable+0xd8>)
    35e0:	4798      	blx	r3
    35e2:	e7e2      	b.n	35aa <cdcdf_acm_enable+0x52>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    35e4:	6830      	ldr	r0, [r6, #0]
	return desc[0];
    35e6:	7803      	ldrb	r3, [r0, #0]
	return (desc + usb_desc_len(desc));
    35e8:	18c0      	adds	r0, r0, r3
    35ea:	2204      	movs	r2, #4
    35ec:	6871      	ldr	r1, [r6, #4]
    35ee:	4b0f      	ldr	r3, [pc, #60]	; (362c <cdcdf_acm_enable+0xd4>)
    35f0:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    35f2:	4643      	mov	r3, r8
    35f4:	3301      	adds	r3, #1
    35f6:	b2db      	uxtb	r3, r3
    35f8:	4698      	mov	r8, r3
    35fa:	e7b6      	b.n	356a <cdcdf_acm_enable+0x12>
	_cdcdf_acm_funcd.enabled = true;
    35fc:	2201      	movs	r2, #1
    35fe:	4b0f      	ldr	r3, [pc, #60]	; (363c <cdcdf_acm_enable+0xe4>)
    3600:	755a      	strb	r2, [r3, #21]
	return ERR_NONE;
    3602:	2000      	movs	r0, #0
}
    3604:	bc0c      	pop	{r2, r3}
    3606:	4690      	mov	r8, r2
    3608:	4699      	mov	r9, r3
    360a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return ERR_NOT_FOUND;
    360c:	200a      	movs	r0, #10
    360e:	4240      	negs	r0, r0
    3610:	e7f8      	b.n	3604 <cdcdf_acm_enable+0xac>
			return ERR_NOT_FOUND;
    3612:	200a      	movs	r0, #10
    3614:	4240      	negs	r0, r0
    3616:	e7f5      	b.n	3604 <cdcdf_acm_enable+0xac>
				return ERR_ALREADY_INITIALIZED;
    3618:	2012      	movs	r0, #18
    361a:	4240      	negs	r0, r0
    361c:	e7f2      	b.n	3604 <cdcdf_acm_enable+0xac>
				return ERR_NO_RESOURCE;
    361e:	201c      	movs	r0, #28
    3620:	4240      	negs	r0, r0
    3622:	e7ef      	b.n	3604 <cdcdf_acm_enable+0xac>
				return ERR_NOT_INITIALIZED;
    3624:	2014      	movs	r0, #20
    3626:	4240      	negs	r0, r0
    3628:	e7ec      	b.n	3604 <cdcdf_acm_enable+0xac>
    362a:	46c0      	nop			; (mov r8, r8)
    362c:	00003f3d 	.word	0x00003f3d
    3630:	00001179 	.word	0x00001179
    3634:	00003f5b 	.word	0x00003f5b
    3638:	000010e5 	.word	0x000010e5
    363c:	20000498 	.word	0x20000498

00003640 <cdcdf_acm_disable>:
{
    3640:	b570      	push	{r4, r5, r6, lr}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    3642:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    3644:	2900      	cmp	r1, #0
    3646:	d01a      	beq.n	367e <cdcdf_acm_disable+0x3e>
		ifc_desc.bInterfaceClass = desc->sod[5];
    3648:	680b      	ldr	r3, [r1, #0]
    364a:	795b      	ldrb	r3, [r3, #5]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    364c:	2b02      	cmp	r3, #2
    364e:	d018      	beq.n	3682 <cdcdf_acm_disable+0x42>
    3650:	2b0a      	cmp	r3, #10
    3652:	d124      	bne.n	369e <cdcdf_acm_disable+0x5e>
    3654:	2400      	movs	r4, #0
    3656:	e001      	b.n	365c <cdcdf_acm_disable+0x1c>
	for (i = 0; i < 2; i++) {
    3658:	3401      	adds	r4, #1
    365a:	b2e4      	uxtb	r4, r4
    365c:	2c01      	cmp	r4, #1
    365e:	d812      	bhi.n	3686 <cdcdf_acm_disable+0x46>
		if (func_data->func_iface[i] == 0xFF) {
    3660:	5d2b      	ldrb	r3, [r5, r4]
    3662:	2bff      	cmp	r3, #255	; 0xff
    3664:	d0f8      	beq.n	3658 <cdcdf_acm_disable+0x18>
			func_data->func_iface[i] = 0xFF;
    3666:	23ff      	movs	r3, #255	; 0xff
    3668:	552b      	strb	r3, [r5, r4]
			if (func_data->func_ep_in[i] != 0xFF) {
    366a:	192b      	adds	r3, r5, r4
    366c:	7898      	ldrb	r0, [r3, #2]
    366e:	28ff      	cmp	r0, #255	; 0xff
    3670:	d0f2      	beq.n	3658 <cdcdf_acm_disable+0x18>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    3672:	4b0c      	ldr	r3, [pc, #48]	; (36a4 <cdcdf_acm_disable+0x64>)
    3674:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    3676:	192e      	adds	r6, r5, r4
    3678:	22ff      	movs	r2, #255	; 0xff
    367a:	70b2      	strb	r2, [r6, #2]
    367c:	e7ec      	b.n	3658 <cdcdf_acm_disable+0x18>
    367e:	2400      	movs	r4, #0
    3680:	e7ec      	b.n	365c <cdcdf_acm_disable+0x1c>
    3682:	2400      	movs	r4, #0
    3684:	e7ea      	b.n	365c <cdcdf_acm_disable+0x1c>
	if (func_data->func_ep_out != 0xFF) {
    3686:	7928      	ldrb	r0, [r5, #4]
    3688:	28ff      	cmp	r0, #255	; 0xff
    368a:	d003      	beq.n	3694 <cdcdf_acm_disable+0x54>
		usb_d_ep_deinit(func_data->func_ep_out);
    368c:	4b05      	ldr	r3, [pc, #20]	; (36a4 <cdcdf_acm_disable+0x64>)
    368e:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    3690:	23ff      	movs	r3, #255	; 0xff
    3692:	712b      	strb	r3, [r5, #4]
	_cdcdf_acm_funcd.enabled = false;
    3694:	2200      	movs	r2, #0
    3696:	4b04      	ldr	r3, [pc, #16]	; (36a8 <cdcdf_acm_disable+0x68>)
    3698:	755a      	strb	r2, [r3, #21]
	return ERR_NONE;
    369a:	2000      	movs	r0, #0
}
    369c:	bd70      	pop	{r4, r5, r6, pc}
			return ERR_NOT_FOUND;
    369e:	200a      	movs	r0, #10
    36a0:	4240      	negs	r0, r0
    36a2:	e7fb      	b.n	369c <cdcdf_acm_disable+0x5c>
    36a4:	0000114d 	.word	0x0000114d
    36a8:	20000498 	.word	0x20000498

000036ac <cdcdf_acm_ctrl>:
{
    36ac:	b510      	push	{r4, lr}
	switch (ctrl) {
    36ae:	2901      	cmp	r1, #1
    36b0:	d00a      	beq.n	36c8 <cdcdf_acm_ctrl+0x1c>
    36b2:	2900      	cmp	r1, #0
    36b4:	d004      	beq.n	36c0 <cdcdf_acm_ctrl+0x14>
    36b6:	2902      	cmp	r1, #2
    36b8:	d10a      	bne.n	36d0 <cdcdf_acm_ctrl+0x24>
		return ERR_UNSUPPORTED_OP;
    36ba:	201b      	movs	r0, #27
    36bc:	4240      	negs	r0, r0
}
    36be:	bd10      	pop	{r4, pc}
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    36c0:	0011      	movs	r1, r2
    36c2:	4b05      	ldr	r3, [pc, #20]	; (36d8 <cdcdf_acm_ctrl+0x2c>)
    36c4:	4798      	blx	r3
    36c6:	e7fa      	b.n	36be <cdcdf_acm_ctrl+0x12>
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    36c8:	0011      	movs	r1, r2
    36ca:	4b04      	ldr	r3, [pc, #16]	; (36dc <cdcdf_acm_ctrl+0x30>)
    36cc:	4798      	blx	r3
    36ce:	e7f6      	b.n	36be <cdcdf_acm_ctrl+0x12>
		return ERR_INVALID_ARG;
    36d0:	200d      	movs	r0, #13
    36d2:	4240      	negs	r0, r0
    36d4:	e7f3      	b.n	36be <cdcdf_acm_ctrl+0x12>
    36d6:	46c0      	nop			; (mov r8, r8)
    36d8:	00003559 	.word	0x00003559
    36dc:	00003641 	.word	0x00003641

000036e0 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    36e0:	b510      	push	{r4, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    36e2:	4b0b      	ldr	r3, [pc, #44]	; (3710 <cdcdf_acm_init+0x30>)
    36e4:	4798      	blx	r3
    36e6:	2801      	cmp	r0, #1
    36e8:	d80e      	bhi.n	3708 <cdcdf_acm_init+0x28>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    36ea:	480a      	ldr	r0, [pc, #40]	; (3714 <cdcdf_acm_init+0x34>)
    36ec:	4b0a      	ldr	r3, [pc, #40]	; (3718 <cdcdf_acm_init+0x38>)
    36ee:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    36f0:	0003      	movs	r3, r0
    36f2:	3310      	adds	r3, #16
    36f4:	6203      	str	r3, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    36f6:	3018      	adds	r0, #24
    36f8:	4b08      	ldr	r3, [pc, #32]	; (371c <cdcdf_acm_init+0x3c>)
    36fa:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    36fc:	4908      	ldr	r1, [pc, #32]	; (3720 <cdcdf_acm_init+0x40>)
    36fe:	2001      	movs	r0, #1
    3700:	4b08      	ldr	r3, [pc, #32]	; (3724 <cdcdf_acm_init+0x44>)
    3702:	4798      	blx	r3
	return ERR_NONE;
    3704:	2000      	movs	r0, #0
}
    3706:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    3708:	2011      	movs	r0, #17
    370a:	4240      	negs	r0, r0
    370c:	e7fb      	b.n	3706 <cdcdf_acm_init+0x26>
    370e:	46c0      	nop			; (mov r8, r8)
    3710:	00003f2d 	.word	0x00003f2d
    3714:	20000498 	.word	0x20000498
    3718:	000036ad 	.word	0x000036ad
    371c:	00003ec5 	.word	0x00003ec5
    3720:	20000000 	.word	0x20000000
    3724:	00003e2d 	.word	0x00003e2d

00003728 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    3728:	b510      	push	{r4, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    372a:	4b06      	ldr	r3, [pc, #24]	; (3744 <usbdc_unconfig+0x1c>)
    372c:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    372e:	e005      	b.n	373c <usbdc_unconfig+0x14>
		func->ctrl(func, USBDF_DISABLE, NULL);
    3730:	2200      	movs	r2, #0
    3732:	2101      	movs	r1, #1
    3734:	0020      	movs	r0, r4
    3736:	6863      	ldr	r3, [r4, #4]
    3738:	4798      	blx	r3
		func = func->next;
    373a:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    373c:	2c00      	cmp	r4, #0
    373e:	d1f7      	bne.n	3730 <usbdc_unconfig+0x8>
	}
}
    3740:	bd10      	pop	{r4, pc}
    3742:	46c0      	nop			; (mov r8, r8)
    3744:	200004bc 	.word	0x200004bc

00003748 <usbdc_sof_notify>:
	}
}

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    3748:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    374a:	4b06      	ldr	r3, [pc, #24]	; (3764 <usbdc_sof_notify+0x1c>)
    374c:	685c      	ldr	r4, [r3, #4]

	while (sof != NULL) {
    374e:	e000      	b.n	3752 <usbdc_sof_notify+0xa>
		if (NULL != sof->cb) {
			sof->cb();
		}
		sof = sof->next;
    3750:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    3752:	2c00      	cmp	r4, #0
    3754:	d004      	beq.n	3760 <usbdc_sof_notify+0x18>
		if (NULL != sof->cb) {
    3756:	6863      	ldr	r3, [r4, #4]
    3758:	2b00      	cmp	r3, #0
    375a:	d0f9      	beq.n	3750 <usbdc_sof_notify+0x8>
			sof->cb();
    375c:	4798      	blx	r3
    375e:	e7f7      	b.n	3750 <usbdc_sof_notify+0x8>
	}
}
    3760:	bd10      	pop	{r4, pc}
    3762:	46c0      	nop			; (mov r8, r8)
    3764:	200004bc 	.word	0x200004bc

00003768 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    3768:	b570      	push	{r4, r5, r6, lr}
    376a:	0006      	movs	r6, r0
    376c:	000d      	movs	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    376e:	4b07      	ldr	r3, [pc, #28]	; (378c <usbdc_change_notify+0x24>)
    3770:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    3772:	e000      	b.n	3776 <usbdc_change_notify+0xe>
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
    3774:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    3776:	2c00      	cmp	r4, #0
    3778:	d006      	beq.n	3788 <usbdc_change_notify+0x20>
		if (NULL != cg->cb) {
    377a:	6863      	ldr	r3, [r4, #4]
    377c:	2b00      	cmp	r3, #0
    377e:	d0f9      	beq.n	3774 <usbdc_change_notify+0xc>
			cg->cb(change, value);
    3780:	0029      	movs	r1, r5
    3782:	0030      	movs	r0, r6
    3784:	4798      	blx	r3
    3786:	e7f5      	b.n	3774 <usbdc_change_notify+0xc>
	}
}
    3788:	bd70      	pop	{r4, r5, r6, pc}
    378a:	46c0      	nop			; (mov r8, r8)
    378c:	200004bc 	.word	0x200004bc

00003790 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    3790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3792:	0007      	movs	r7, r0
    3794:	000e      	movs	r6, r1
    3796:	0015      	movs	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    3798:	4b0b      	ldr	r3, [pc, #44]	; (37c8 <usbdc_request_handler+0x38>)
    379a:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    379c:	e000      	b.n	37a0 <usbdc_request_handler+0x10>
				return true;
			} else if (ERR_NOT_FOUND != rc) {
				return -1;
			}
		}
		h = h->next;
    379e:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    37a0:	2c00      	cmp	r4, #0
    37a2:	d00d      	beq.n	37c0 <usbdc_request_handler+0x30>
		if (NULL != h->cb) {
    37a4:	6863      	ldr	r3, [r4, #4]
    37a6:	2b00      	cmp	r3, #0
    37a8:	d0f9      	beq.n	379e <usbdc_request_handler+0xe>
			rc = h->cb(ep, req, stage);
    37aa:	002a      	movs	r2, r5
    37ac:	0031      	movs	r1, r6
    37ae:	0038      	movs	r0, r7
    37b0:	4798      	blx	r3
			if (0 == rc) {
    37b2:	2800      	cmp	r0, #0
    37b4:	d006      	beq.n	37c4 <usbdc_request_handler+0x34>
			} else if (ERR_NOT_FOUND != rc) {
    37b6:	300a      	adds	r0, #10
    37b8:	d0f1      	beq.n	379e <usbdc_request_handler+0xe>
				return -1;
    37ba:	2001      	movs	r0, #1
    37bc:	4240      	negs	r0, r0
    37be:	e000      	b.n	37c2 <usbdc_request_handler+0x32>
	}
	return false;
    37c0:	2000      	movs	r0, #0
}
    37c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    37c4:	2001      	movs	r0, #1
    37c6:	e7fc      	b.n	37c2 <usbdc_request_handler+0x32>
    37c8:	200004bc 	.word	0x200004bc

000037cc <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    37cc:	b510      	push	{r4, lr}
	usbdc_sof_notify();
    37ce:	4b01      	ldr	r3, [pc, #4]	; (37d4 <usbd_sof_cb+0x8>)
    37d0:	4798      	blx	r3
}
    37d2:	bd10      	pop	{r4, pc}
    37d4:	00003749 	.word	0x00003749

000037d8 <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    37d8:	b510      	push	{r4, lr}
    37da:	0001      	movs	r1, r0
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    37dc:	2201      	movs	r2, #1
    37de:	2000      	movs	r0, #0
    37e0:	4b01      	ldr	r3, [pc, #4]	; (37e8 <usbdc_ctrl_data_end+0x10>)
    37e2:	4798      	blx	r3
	return false;
}
    37e4:	2000      	movs	r0, #0
    37e6:	bd10      	pop	{r4, pc}
    37e8:	00003791 	.word	0x00003791

000037ec <usbdc_set_address>:
{
    37ec:	b510      	push	{r4, lr}
	usb_d_set_address(addr);
    37ee:	4b01      	ldr	r3, [pc, #4]	; (37f4 <usbdc_set_address+0x8>)
    37f0:	4798      	blx	r3
}
    37f2:	bd10      	pop	{r4, pc}
    37f4:	000010d9 	.word	0x000010d9

000037f8 <usbdc_ctrl_status_end>:
{
    37f8:	b510      	push	{r4, lr}
    37fa:	0004      	movs	r4, r0
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    37fc:	7803      	ldrb	r3, [r0, #0]
    37fe:	2b00      	cmp	r3, #0
    3800:	d112      	bne.n	3828 <usbdc_ctrl_status_end+0x30>
	switch (req->bRequest) {
    3802:	7843      	ldrb	r3, [r0, #1]
    3804:	2b05      	cmp	r3, #5
    3806:	d012      	beq.n	382e <usbdc_ctrl_status_end+0x36>
    3808:	2b09      	cmp	r3, #9
    380a:	d10d      	bne.n	3828 <usbdc_ctrl_status_end+0x30>
		usbdc.cfg_value = req->wValue;
    380c:	7882      	ldrb	r2, [r0, #2]
    380e:	4b10      	ldr	r3, [pc, #64]	; (3850 <usbdc_ctrl_status_end+0x58>)
    3810:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    3812:	7882      	ldrb	r2, [r0, #2]
    3814:	78c3      	ldrb	r3, [r0, #3]
    3816:	021b      	lsls	r3, r3, #8
    3818:	4313      	orrs	r3, r2
    381a:	d106      	bne.n	382a <usbdc_ctrl_status_end+0x32>
    381c:	2103      	movs	r1, #3
    381e:	4b0c      	ldr	r3, [pc, #48]	; (3850 <usbdc_ctrl_status_end+0x58>)
    3820:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    3822:	2001      	movs	r0, #1
    3824:	4b0b      	ldr	r3, [pc, #44]	; (3854 <usbdc_ctrl_status_end+0x5c>)
    3826:	4798      	blx	r3
}
    3828:	bd10      	pop	{r4, pc}
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    382a:	2104      	movs	r1, #4
    382c:	e7f7      	b.n	381e <usbdc_ctrl_status_end+0x26>
		usbdc_set_address(req->wValue);
    382e:	7880      	ldrb	r0, [r0, #2]
    3830:	4b09      	ldr	r3, [pc, #36]	; (3858 <usbdc_ctrl_status_end+0x60>)
    3832:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    3834:	78a2      	ldrb	r2, [r4, #2]
    3836:	78e3      	ldrb	r3, [r4, #3]
    3838:	021b      	lsls	r3, r3, #8
    383a:	4313      	orrs	r3, r2
    383c:	d006      	beq.n	384c <usbdc_ctrl_status_end+0x54>
    383e:	2103      	movs	r1, #3
    3840:	4b03      	ldr	r3, [pc, #12]	; (3850 <usbdc_ctrl_status_end+0x58>)
    3842:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    3844:	2001      	movs	r0, #1
    3846:	4b03      	ldr	r3, [pc, #12]	; (3854 <usbdc_ctrl_status_end+0x5c>)
    3848:	4798      	blx	r3
		break;
    384a:	e7ed      	b.n	3828 <usbdc_ctrl_status_end+0x30>
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    384c:	2102      	movs	r1, #2
    384e:	e7f7      	b.n	3840 <usbdc_ctrl_status_end+0x48>
    3850:	200004bc 	.word	0x200004bc
    3854:	00003769 	.word	0x00003769
    3858:	000037ed 	.word	0x000037ed

0000385c <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    385c:	b510      	push	{r4, lr}
	(void)ep;

	switch (code) {
    385e:	2900      	cmp	r1, #0
    3860:	d003      	beq.n	386a <usbdc_cb_ctl_done+0xe>
    3862:	2901      	cmp	r1, #1
    3864:	d006      	beq.n	3874 <usbdc_cb_ctl_done+0x18>
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
    3866:	2000      	movs	r0, #0
    3868:	e003      	b.n	3872 <usbdc_cb_ctl_done+0x16>
		usbdc_ctrl_status_end(req);
    386a:	0010      	movs	r0, r2
    386c:	4b03      	ldr	r3, [pc, #12]	; (387c <usbdc_cb_ctl_done+0x20>)
    386e:	4798      	blx	r3
	return false;
    3870:	2000      	movs	r0, #0
}
    3872:	bd10      	pop	{r4, pc}
		return usbdc_ctrl_data_end(req);
    3874:	0010      	movs	r0, r2
    3876:	4b02      	ldr	r3, [pc, #8]	; (3880 <usbdc_cb_ctl_done+0x24>)
    3878:	4798      	blx	r3
    387a:	e7fa      	b.n	3872 <usbdc_cb_ctl_done+0x16>
    387c:	000037f9 	.word	0x000037f9
    3880:	000037d9 	.word	0x000037d9

00003884 <usbdc_set_config>:
{
    3884:	b530      	push	{r4, r5, lr}
    3886:	b083      	sub	sp, #12
    3888:	1e02      	subs	r2, r0, #0
	if (cfg_value == 0) {
    388a:	d014      	beq.n	38b6 <usbdc_set_config+0x32>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    388c:	4b1e      	ldr	r3, [pc, #120]	; (3908 <usbdc_set_config+0x84>)
    388e:	681b      	ldr	r3, [r3, #0]
    3890:	6818      	ldr	r0, [r3, #0]
    3892:	6859      	ldr	r1, [r3, #4]
    3894:	4b1d      	ldr	r3, [pc, #116]	; (390c <usbdc_set_config+0x88>)
    3896:	4798      	blx	r3
	if (NULL == cfg_desc) {
    3898:	2800      	cmp	r0, #0
    389a:	d032      	beq.n	3902 <usbdc_set_config+0x7e>
	return (ptr[0] + (ptr[1] << 8));
    389c:	7881      	ldrb	r1, [r0, #2]
    389e:	78c3      	ldrb	r3, [r0, #3]
    38a0:	021b      	lsls	r3, r3, #8
    38a2:	18c9      	adds	r1, r1, r3
    38a4:	b289      	uxth	r1, r1
	desc.eod  = cfg_desc + total_len;
    38a6:	1841      	adds	r1, r0, r1
    38a8:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    38aa:	2204      	movs	r2, #4
    38ac:	4b18      	ldr	r3, [pc, #96]	; (3910 <usbdc_set_config+0x8c>)
    38ae:	4798      	blx	r3
    38b0:	9000      	str	r0, [sp, #0]
	uint8_t                 last_iface = 0xFF;
    38b2:	24ff      	movs	r4, #255	; 0xff
	while (NULL != desc.sod) {
    38b4:	e00d      	b.n	38d2 <usbdc_set_config+0x4e>
		usbdc_unconfig();
    38b6:	4b17      	ldr	r3, [pc, #92]	; (3914 <usbdc_set_config+0x90>)
    38b8:	4798      	blx	r3
		return true;
    38ba:	2001      	movs	r0, #1
    38bc:	e01f      	b.n	38fe <usbdc_set_config+0x7a>
			last_iface = desc.sod[2];
    38be:	002c      	movs	r4, r5
		desc.sod = usb_desc_next(desc.sod);
    38c0:	9800      	ldr	r0, [sp, #0]
	return desc[0];
    38c2:	7803      	ldrb	r3, [r0, #0]
	return (desc + usb_desc_len(desc));
    38c4:	18c0      	adds	r0, r0, r3
    38c6:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    38c8:	2204      	movs	r2, #4
    38ca:	9901      	ldr	r1, [sp, #4]
    38cc:	4b10      	ldr	r3, [pc, #64]	; (3910 <usbdc_set_config+0x8c>)
    38ce:	4798      	blx	r3
    38d0:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    38d2:	9b00      	ldr	r3, [sp, #0]
    38d4:	2b00      	cmp	r3, #0
    38d6:	d011      	beq.n	38fc <usbdc_set_config+0x78>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    38d8:	789d      	ldrb	r5, [r3, #2]
    38da:	42ac      	cmp	r4, r5
    38dc:	d0f0      	beq.n	38c0 <usbdc_set_config+0x3c>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    38de:	4b0a      	ldr	r3, [pc, #40]	; (3908 <usbdc_set_config+0x84>)
    38e0:	691c      	ldr	r4, [r3, #16]
			while (NULL != func) {
    38e2:	2c00      	cmp	r4, #0
    38e4:	d0eb      	beq.n	38be <usbdc_set_config+0x3a>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    38e6:	466a      	mov	r2, sp
    38e8:	2100      	movs	r1, #0
    38ea:	0020      	movs	r0, r4
    38ec:	6863      	ldr	r3, [r4, #4]
    38ee:	4798      	blx	r3
    38f0:	2800      	cmp	r0, #0
    38f2:	d001      	beq.n	38f8 <usbdc_set_config+0x74>
					func = func->next;
    38f4:	6824      	ldr	r4, [r4, #0]
    38f6:	e7f4      	b.n	38e2 <usbdc_set_config+0x5e>
			last_iface = desc.sod[2];
    38f8:	002c      	movs	r4, r5
    38fa:	e7e1      	b.n	38c0 <usbdc_set_config+0x3c>
	return true;
    38fc:	2001      	movs	r0, #1
}
    38fe:	b003      	add	sp, #12
    3900:	bd30      	pop	{r4, r5, pc}
		return false;
    3902:	2000      	movs	r0, #0
    3904:	e7fb      	b.n	38fe <usbdc_set_config+0x7a>
    3906:	46c0      	nop			; (mov r8, r8)
    3908:	200004bc 	.word	0x200004bc
    390c:	00003f81 	.word	0x00003f81
    3910:	00003f3d 	.word	0x00003f3d
    3914:	00003729 	.word	0x00003729

00003918 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    3918:	b510      	push	{r4, lr}
	usbdc_unconfig();
    391a:	4b0d      	ldr	r3, [pc, #52]	; (3950 <usbdc_reset+0x38>)
    391c:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    391e:	4c0d      	ldr	r4, [pc, #52]	; (3954 <usbdc_reset+0x3c>)
    3920:	2302      	movs	r3, #2
    3922:	76a3      	strb	r3, [r4, #26]
	usbdc.cfg_value   = 0;
    3924:	2300      	movs	r3, #0
    3926:	76e3      	strb	r3, [r4, #27]
	usbdc.ifc_alt_map = 0;
    3928:	7763      	strb	r3, [r4, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    392a:	2000      	movs	r0, #0
    392c:	4b0a      	ldr	r3, [pc, #40]	; (3958 <usbdc_reset+0x40>)
    392e:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    3930:	7f20      	ldrb	r0, [r4, #28]
    3932:	4b0a      	ldr	r3, [pc, #40]	; (395c <usbdc_reset+0x44>)
    3934:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    3936:	4a0a      	ldr	r2, [pc, #40]	; (3960 <usbdc_reset+0x48>)
    3938:	2100      	movs	r1, #0
    393a:	2000      	movs	r0, #0
    393c:	4c09      	ldr	r4, [pc, #36]	; (3964 <usbdc_reset+0x4c>)
    393e:	47a0      	blx	r4
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    3940:	4a09      	ldr	r2, [pc, #36]	; (3968 <usbdc_reset+0x50>)
    3942:	2102      	movs	r1, #2
    3944:	2000      	movs	r0, #0
    3946:	47a0      	blx	r4
	usb_d_ep_enable(0);
    3948:	2000      	movs	r0, #0
    394a:	4b08      	ldr	r3, [pc, #32]	; (396c <usbdc_reset+0x54>)
    394c:	4798      	blx	r3
}
    394e:	bd10      	pop	{r4, pc}
    3950:	00003729 	.word	0x00003729
    3954:	200004bc 	.word	0x200004bc
    3958:	0000114d 	.word	0x0000114d
    395c:	00001139 	.word	0x00001139
    3960:	00003de1 	.word	0x00003de1
    3964:	00001355 	.word	0x00001355
    3968:	0000385d 	.word	0x0000385d
    396c:	00001179 	.word	0x00001179

00003970 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    3970:	b510      	push	{r4, lr}
	(void)param;

	switch (ev) {
    3972:	2800      	cmp	r0, #0
    3974:	d002      	beq.n	397c <usbd_event_cb+0xc>
    3976:	2801      	cmp	r0, #1
    3978:	d004      	beq.n	3984 <usbd_event_cb+0x14>
		break;

	default:
		break;
	}
}
    397a:	bd10      	pop	{r4, pc}
		usbdc_change_notify(USBDC_C_CONN, param);
    397c:	2000      	movs	r0, #0
    397e:	4b03      	ldr	r3, [pc, #12]	; (398c <usbd_event_cb+0x1c>)
    3980:	4798      	blx	r3
		break;
    3982:	e7fa      	b.n	397a <usbd_event_cb+0xa>
		usbdc_reset();
    3984:	4b02      	ldr	r3, [pc, #8]	; (3990 <usbd_event_cb+0x20>)
    3986:	4798      	blx	r3
}
    3988:	e7f7      	b.n	397a <usbd_event_cb+0xa>
    398a:	46c0      	nop			; (mov r8, r8)
    398c:	00003769 	.word	0x00003769
    3990:	00003919 	.word	0x00003919

00003994 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    3994:	b510      	push	{r4, lr}
    3996:	b084      	sub	sp, #16
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    3998:	ac01      	add	r4, sp, #4
    399a:	9101      	str	r1, [sp, #4]
    399c:	9202      	str	r2, [sp, #8]
    399e:	7220      	strb	r0, [r4, #8]
    39a0:	7263      	strb	r3, [r4, #9]
	return usb_d_ep_transfer(&xfer);
    39a2:	0020      	movs	r0, r4
    39a4:	4b01      	ldr	r3, [pc, #4]	; (39ac <usbdc_xfer+0x18>)
    39a6:	4798      	blx	r3
}
    39a8:	b004      	add	sp, #16
    39aa:	bd10      	pop	{r4, pc}
    39ac:	000011c9 	.word	0x000011c9

000039b0 <usbdc_clear_ftr_req>:
{
    39b0:	b510      	push	{r4, lr}
    39b2:	0004      	movs	r4, r0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    39b4:	780a      	ldrb	r2, [r1, #0]
    39b6:	231f      	movs	r3, #31
    39b8:	4013      	ands	r3, r2
    39ba:	2b02      	cmp	r3, #2
    39bc:	d112      	bne.n	39e4 <usbdc_clear_ftr_req+0x34>
		if (req->wLength != 0) {
    39be:	798a      	ldrb	r2, [r1, #6]
    39c0:	79cb      	ldrb	r3, [r1, #7]
    39c2:	021b      	lsls	r3, r3, #8
    39c4:	4313      	orrs	r3, r2
    39c6:	d001      	beq.n	39cc <usbdc_clear_ftr_req+0x1c>
			return false;
    39c8:	2000      	movs	r0, #0
    39ca:	e00c      	b.n	39e6 <usbdc_clear_ftr_req+0x36>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    39cc:	7908      	ldrb	r0, [r1, #4]
    39ce:	2100      	movs	r1, #0
    39d0:	4b05      	ldr	r3, [pc, #20]	; (39e8 <usbdc_clear_ftr_req+0x38>)
    39d2:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    39d4:	2301      	movs	r3, #1
    39d6:	2200      	movs	r2, #0
    39d8:	2100      	movs	r1, #0
    39da:	0020      	movs	r0, r4
    39dc:	4c03      	ldr	r4, [pc, #12]	; (39ec <usbdc_clear_ftr_req+0x3c>)
    39de:	47a0      	blx	r4
		return true;
    39e0:	2001      	movs	r0, #1
    39e2:	e000      	b.n	39e6 <usbdc_clear_ftr_req+0x36>
		return false;
    39e4:	2000      	movs	r0, #0
}
    39e6:	bd10      	pop	{r4, pc}
    39e8:	000012ed 	.word	0x000012ed
    39ec:	00003995 	.word	0x00003995

000039f0 <usbdc_set_ftr_req>:
{
    39f0:	b510      	push	{r4, lr}
    39f2:	0004      	movs	r4, r0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    39f4:	780a      	ldrb	r2, [r1, #0]
    39f6:	231f      	movs	r3, #31
    39f8:	4013      	ands	r3, r2
    39fa:	2b02      	cmp	r3, #2
    39fc:	d112      	bne.n	3a24 <usbdc_set_ftr_req+0x34>
		if (req->wLength != 0) {
    39fe:	798a      	ldrb	r2, [r1, #6]
    3a00:	79cb      	ldrb	r3, [r1, #7]
    3a02:	021b      	lsls	r3, r3, #8
    3a04:	4313      	orrs	r3, r2
    3a06:	d001      	beq.n	3a0c <usbdc_set_ftr_req+0x1c>
			return false;
    3a08:	2000      	movs	r0, #0
    3a0a:	e00c      	b.n	3a26 <usbdc_set_ftr_req+0x36>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    3a0c:	7908      	ldrb	r0, [r1, #4]
    3a0e:	2101      	movs	r1, #1
    3a10:	4b05      	ldr	r3, [pc, #20]	; (3a28 <usbdc_set_ftr_req+0x38>)
    3a12:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    3a14:	2301      	movs	r3, #1
    3a16:	2200      	movs	r2, #0
    3a18:	2100      	movs	r1, #0
    3a1a:	0020      	movs	r0, r4
    3a1c:	4c03      	ldr	r4, [pc, #12]	; (3a2c <usbdc_set_ftr_req+0x3c>)
    3a1e:	47a0      	blx	r4
		return true;
    3a20:	2001      	movs	r0, #1
    3a22:	e000      	b.n	3a26 <usbdc_set_ftr_req+0x36>
		return false;
    3a24:	2000      	movs	r0, #0
}
    3a26:	bd10      	pop	{r4, pc}
    3a28:	000012ed 	.word	0x000012ed
    3a2c:	00003995 	.word	0x00003995

00003a30 <usbdc_set_interface>:
{
    3a30:	b570      	push	{r4, r5, r6, lr}
    3a32:	b082      	sub	sp, #8
    3a34:	0005      	movs	r5, r0
    3a36:	000c      	movs	r4, r1
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    3a38:	4b2a      	ldr	r3, [pc, #168]	; (3ae4 <usbdc_set_interface+0xb4>)
    3a3a:	681a      	ldr	r2, [r3, #0]
    3a3c:	6810      	ldr	r0, [r2, #0]
    3a3e:	6851      	ldr	r1, [r2, #4]
    3a40:	7eda      	ldrb	r2, [r3, #27]
    3a42:	4b29      	ldr	r3, [pc, #164]	; (3ae8 <usbdc_set_interface+0xb8>)
    3a44:	4798      	blx	r3
	if (NULL == ifc) {
    3a46:	2800      	cmp	r0, #0
    3a48:	d045      	beq.n	3ad6 <usbdc_set_interface+0xa6>
	desc.sod = ifc;
    3a4a:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    3a4c:	7881      	ldrb	r1, [r0, #2]
    3a4e:	78c3      	ldrb	r3, [r0, #3]
    3a50:	021b      	lsls	r3, r3, #8
    3a52:	18c9      	adds	r1, r1, r3
    3a54:	b289      	uxth	r1, r1
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    3a56:	1841      	adds	r1, r0, r1
    3a58:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    3a5a:	2204      	movs	r2, #4
    3a5c:	4b23      	ldr	r3, [pc, #140]	; (3aec <usbdc_set_interface+0xbc>)
    3a5e:	4798      	blx	r3
    3a60:	2800      	cmp	r0, #0
    3a62:	d10b      	bne.n	3a7c <usbdc_set_interface+0x4c>
		return false;
    3a64:	2000      	movs	r0, #0
    3a66:	e039      	b.n	3adc <usbdc_set_interface+0xac>
		desc.sod = usb_desc_next(desc.sod);
    3a68:	9800      	ldr	r0, [sp, #0]
	return desc[0];
    3a6a:	7803      	ldrb	r3, [r0, #0]
	return (desc + usb_desc_len(desc));
    3a6c:	18c0      	adds	r0, r0, r3
    3a6e:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    3a70:	2204      	movs	r2, #4
    3a72:	9901      	ldr	r1, [sp, #4]
    3a74:	4b1d      	ldr	r3, [pc, #116]	; (3aec <usbdc_set_interface+0xbc>)
    3a76:	4798      	blx	r3
		if (NULL == ifc) {
    3a78:	2800      	cmp	r0, #0
    3a7a:	d02e      	beq.n	3ada <usbdc_set_interface+0xaa>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    3a7c:	7883      	ldrb	r3, [r0, #2]
    3a7e:	42a3      	cmp	r3, r4
    3a80:	d1f2      	bne.n	3a68 <usbdc_set_interface+0x38>
    3a82:	78c3      	ldrb	r3, [r0, #3]
    3a84:	42ab      	cmp	r3, r5
    3a86:	d1ef      	bne.n	3a68 <usbdc_set_interface+0x38>
	desc.sod = ifc;
    3a88:	9000      	str	r0, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    3a8a:	4b16      	ldr	r3, [pc, #88]	; (3ae4 <usbdc_set_interface+0xb4>)
    3a8c:	691e      	ldr	r6, [r3, #16]
	while (NULL != func) {
    3a8e:	2e00      	cmp	r6, #0
    3a90:	d01f      	beq.n	3ad2 <usbdc_set_interface+0xa2>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    3a92:	466a      	mov	r2, sp
    3a94:	2101      	movs	r1, #1
    3a96:	0030      	movs	r0, r6
    3a98:	6873      	ldr	r3, [r6, #4]
    3a9a:	4798      	blx	r3
    3a9c:	2800      	cmp	r0, #0
    3a9e:	d001      	beq.n	3aa4 <usbdc_set_interface+0x74>
			func = func->next;
    3aa0:	6836      	ldr	r6, [r6, #0]
    3aa2:	e7f4      	b.n	3a8e <usbdc_set_interface+0x5e>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    3aa4:	6873      	ldr	r3, [r6, #4]
    3aa6:	466a      	mov	r2, sp
    3aa8:	2100      	movs	r1, #0
    3aaa:	0030      	movs	r0, r6
    3aac:	4798      	blx	r3
    3aae:	2800      	cmp	r0, #0
    3ab0:	d116      	bne.n	3ae0 <usbdc_set_interface+0xb0>
			if (alt_set) {
    3ab2:	2d00      	cmp	r5, #0
    3ab4:	d005      	beq.n	3ac2 <usbdc_set_interface+0x92>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    3ab6:	2201      	movs	r2, #1
    3ab8:	40a2      	lsls	r2, r4
    3aba:	490a      	ldr	r1, [pc, #40]	; (3ae4 <usbdc_set_interface+0xb4>)
    3abc:	7f4b      	ldrb	r3, [r1, #29]
    3abe:	4313      	orrs	r3, r2
    3ac0:	774b      	strb	r3, [r1, #29]
			usbdc_xfer(0, NULL, 0, 0);
    3ac2:	2300      	movs	r3, #0
    3ac4:	2200      	movs	r2, #0
    3ac6:	2100      	movs	r1, #0
    3ac8:	2000      	movs	r0, #0
    3aca:	4c09      	ldr	r4, [pc, #36]	; (3af0 <usbdc_set_interface+0xc0>)
    3acc:	47a0      	blx	r4
			return true;
    3ace:	2001      	movs	r0, #1
    3ad0:	e004      	b.n	3adc <usbdc_set_interface+0xac>
	return false;
    3ad2:	2000      	movs	r0, #0
    3ad4:	e002      	b.n	3adc <usbdc_set_interface+0xac>
		return false;
    3ad6:	2000      	movs	r0, #0
    3ad8:	e000      	b.n	3adc <usbdc_set_interface+0xac>
			return false;
    3ada:	2000      	movs	r0, #0
}
    3adc:	b002      	add	sp, #8
    3ade:	bd70      	pop	{r4, r5, r6, pc}
			return false;
    3ae0:	2000      	movs	r0, #0
    3ae2:	e7fb      	b.n	3adc <usbdc_set_interface+0xac>
    3ae4:	200004bc 	.word	0x200004bc
    3ae8:	00003f81 	.word	0x00003f81
    3aec:	00003f3d 	.word	0x00003f3d
    3af0:	00003995 	.word	0x00003995

00003af4 <usbdc_set_req>:
{
    3af4:	b510      	push	{r4, lr}
    3af6:	0004      	movs	r4, r0
	switch (req->bRequest) {
    3af8:	784b      	ldrb	r3, [r1, #1]
    3afa:	2b0b      	cmp	r3, #11
    3afc:	d82d      	bhi.n	3b5a <usbdc_set_req+0x66>
    3afe:	009b      	lsls	r3, r3, #2
    3b00:	4a17      	ldr	r2, [pc, #92]	; (3b60 <usbdc_set_req+0x6c>)
    3b02:	58d3      	ldr	r3, [r2, r3]
    3b04:	469f      	mov	pc, r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    3b06:	2301      	movs	r3, #1
    3b08:	2200      	movs	r2, #0
    3b0a:	2100      	movs	r1, #0
    3b0c:	4c15      	ldr	r4, [pc, #84]	; (3b64 <usbdc_set_req+0x70>)
    3b0e:	47a0      	blx	r4
    3b10:	4243      	negs	r3, r0
    3b12:	4158      	adcs	r0, r3
    3b14:	b2c0      	uxtb	r0, r0
}
    3b16:	bd10      	pop	{r4, pc}
		if (!usbdc_set_config(req->wValue)) {
    3b18:	7888      	ldrb	r0, [r1, #2]
    3b1a:	4b13      	ldr	r3, [pc, #76]	; (3b68 <usbdc_set_req+0x74>)
    3b1c:	4798      	blx	r3
    3b1e:	2800      	cmp	r0, #0
    3b20:	d0f9      	beq.n	3b16 <usbdc_set_req+0x22>
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    3b22:	2301      	movs	r3, #1
    3b24:	2200      	movs	r2, #0
    3b26:	2100      	movs	r1, #0
    3b28:	0020      	movs	r0, r4
    3b2a:	4c0e      	ldr	r4, [pc, #56]	; (3b64 <usbdc_set_req+0x70>)
    3b2c:	47a0      	blx	r4
    3b2e:	4243      	negs	r3, r0
    3b30:	4158      	adcs	r0, r3
    3b32:	b2c0      	uxtb	r0, r0
    3b34:	e7ef      	b.n	3b16 <usbdc_set_req+0x22>
		return usbdc_clear_ftr_req(ep, req);
    3b36:	4b0d      	ldr	r3, [pc, #52]	; (3b6c <usbdc_set_req+0x78>)
    3b38:	4798      	blx	r3
    3b3a:	e7ec      	b.n	3b16 <usbdc_set_req+0x22>
		return usbdc_set_ftr_req(ep, req);
    3b3c:	4b0c      	ldr	r3, [pc, #48]	; (3b70 <usbdc_set_req+0x7c>)
    3b3e:	4798      	blx	r3
    3b40:	e7e9      	b.n	3b16 <usbdc_set_req+0x22>
		return usbdc_set_interface(req->wValue, req->wIndex);
    3b42:	790a      	ldrb	r2, [r1, #4]
    3b44:	794b      	ldrb	r3, [r1, #5]
    3b46:	021b      	lsls	r3, r3, #8
    3b48:	4313      	orrs	r3, r2
    3b4a:	788a      	ldrb	r2, [r1, #2]
    3b4c:	78c8      	ldrb	r0, [r1, #3]
    3b4e:	0200      	lsls	r0, r0, #8
    3b50:	4310      	orrs	r0, r2
    3b52:	0019      	movs	r1, r3
    3b54:	4b07      	ldr	r3, [pc, #28]	; (3b74 <usbdc_set_req+0x80>)
    3b56:	4798      	blx	r3
    3b58:	e7dd      	b.n	3b16 <usbdc_set_req+0x22>
		return false;
    3b5a:	2000      	movs	r0, #0
    3b5c:	e7db      	b.n	3b16 <usbdc_set_req+0x22>
    3b5e:	46c0      	nop			; (mov r8, r8)
    3b60:	000042f4 	.word	0x000042f4
    3b64:	00003995 	.word	0x00003995
    3b68:	00003885 	.word	0x00003885
    3b6c:	000039b1 	.word	0x000039b1
    3b70:	000039f1 	.word	0x000039f1
    3b74:	00003a31 	.word	0x00003a31

00003b78 <usbdc_get_dev_desc>:
{
    3b78:	b570      	push	{r4, r5, r6, lr}
    3b7a:	0005      	movs	r5, r0
	uint16_t length   = req->wLength;
    3b7c:	798b      	ldrb	r3, [r1, #6]
    3b7e:	79cc      	ldrb	r4, [r1, #7]
    3b80:	0224      	lsls	r4, r4, #8
    3b82:	431c      	orrs	r4, r3
	if (length > 0x12) {
    3b84:	2c12      	cmp	r4, #18
    3b86:	d900      	bls.n	3b8a <usbdc_get_dev_desc+0x12>
		length = 0x12;
    3b88:	2412      	movs	r4, #18
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    3b8a:	4b0b      	ldr	r3, [pc, #44]	; (3bb8 <usbdc_get_dev_desc+0x40>)
    3b8c:	681b      	ldr	r3, [r3, #0]
    3b8e:	6818      	ldr	r0, [r3, #0]
    3b90:	6859      	ldr	r1, [r3, #4]
    3b92:	2201      	movs	r2, #1
    3b94:	4b09      	ldr	r3, [pc, #36]	; (3bbc <usbdc_get_dev_desc+0x44>)
    3b96:	4798      	blx	r3
	if (!dev_desc) {
    3b98:	2800      	cmp	r0, #0
    3b9a:	d00b      	beq.n	3bb4 <usbdc_get_dev_desc+0x3c>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    3b9c:	2300      	movs	r3, #0
    3b9e:	0022      	movs	r2, r4
    3ba0:	0001      	movs	r1, r0
    3ba2:	0028      	movs	r0, r5
    3ba4:	4c06      	ldr	r4, [pc, #24]	; (3bc0 <usbdc_get_dev_desc+0x48>)
    3ba6:	47a0      	blx	r4
    3ba8:	2800      	cmp	r0, #0
    3baa:	d101      	bne.n	3bb0 <usbdc_get_dev_desc+0x38>
	return true;
    3bac:	2001      	movs	r0, #1
}
    3bae:	bd70      	pop	{r4, r5, r6, pc}
		return false;
    3bb0:	2000      	movs	r0, #0
    3bb2:	e7fc      	b.n	3bae <usbdc_get_dev_desc+0x36>
		return false;
    3bb4:	2000      	movs	r0, #0
    3bb6:	e7fa      	b.n	3bae <usbdc_get_dev_desc+0x36>
    3bb8:	200004bc 	.word	0x200004bc
    3bbc:	00003f3d 	.word	0x00003f3d
    3bc0:	00003995 	.word	0x00003995

00003bc4 <usbdc_get_cfg_desc>:
{
    3bc4:	b570      	push	{r4, r5, r6, lr}
    3bc6:	0005      	movs	r5, r0
	uint16_t length   = req->wLength;
    3bc8:	798b      	ldrb	r3, [r1, #6]
    3bca:	79ce      	ldrb	r6, [r1, #7]
    3bcc:	0236      	lsls	r6, r6, #8
    3bce:	431e      	orrs	r6, r3
	uint8_t  index    = req->wValue & 0x00FF;
    3bd0:	788a      	ldrb	r2, [r1, #2]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    3bd2:	4b13      	ldr	r3, [pc, #76]	; (3c20 <usbdc_get_cfg_desc+0x5c>)
    3bd4:	7f1c      	ldrb	r4, [r3, #28]
    3bd6:	3c01      	subs	r4, #1
    3bd8:	4034      	ands	r4, r6
    3bda:	4261      	negs	r1, r4
    3bdc:	414c      	adcs	r4, r1
    3bde:	b2e4      	uxtb	r4, r4
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    3be0:	681b      	ldr	r3, [r3, #0]
    3be2:	6818      	ldr	r0, [r3, #0]
    3be4:	6859      	ldr	r1, [r3, #4]
    3be6:	3201      	adds	r2, #1
    3be8:	b2d2      	uxtb	r2, r2
    3bea:	4b0e      	ldr	r3, [pc, #56]	; (3c24 <usbdc_get_cfg_desc+0x60>)
    3bec:	4798      	blx	r3
	if (NULL == cfg_desc) {
    3bee:	2800      	cmp	r0, #0
    3bf0:	d013      	beq.n	3c1a <usbdc_get_cfg_desc+0x56>
	return (ptr[0] + (ptr[1] << 8));
    3bf2:	7882      	ldrb	r2, [r0, #2]
    3bf4:	78c3      	ldrb	r3, [r0, #3]
    3bf6:	021b      	lsls	r3, r3, #8
    3bf8:	18d2      	adds	r2, r2, r3
    3bfa:	b292      	uxth	r2, r2
	if (length <= total_len) {
    3bfc:	4296      	cmp	r6, r2
    3bfe:	d801      	bhi.n	3c04 <usbdc_get_cfg_desc+0x40>
	uint16_t length   = req->wLength;
    3c00:	0032      	movs	r2, r6
		need_zlp = false;
    3c02:	2400      	movs	r4, #0
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    3c04:	0023      	movs	r3, r4
    3c06:	0001      	movs	r1, r0
    3c08:	0028      	movs	r0, r5
    3c0a:	4c07      	ldr	r4, [pc, #28]	; (3c28 <usbdc_get_cfg_desc+0x64>)
    3c0c:	47a0      	blx	r4
    3c0e:	2800      	cmp	r0, #0
    3c10:	d101      	bne.n	3c16 <usbdc_get_cfg_desc+0x52>
	return true;
    3c12:	2001      	movs	r0, #1
}
    3c14:	bd70      	pop	{r4, r5, r6, pc}
		return false;
    3c16:	2000      	movs	r0, #0
    3c18:	e7fc      	b.n	3c14 <usbdc_get_cfg_desc+0x50>
		return false;
    3c1a:	2000      	movs	r0, #0
    3c1c:	e7fa      	b.n	3c14 <usbdc_get_cfg_desc+0x50>
    3c1e:	46c0      	nop			; (mov r8, r8)
    3c20:	200004bc 	.word	0x200004bc
    3c24:	00003f81 	.word	0x00003f81
    3c28:	00003995 	.word	0x00003995

00003c2c <usbdc_get_str_desc>:
{
    3c2c:	b570      	push	{r4, r5, r6, lr}
    3c2e:	0005      	movs	r5, r0
	uint16_t length   = req->wLength;
    3c30:	798b      	ldrb	r3, [r1, #6]
    3c32:	79ce      	ldrb	r6, [r1, #7]
    3c34:	0236      	lsls	r6, r6, #8
    3c36:	431e      	orrs	r6, r3
	uint8_t  index    = req->wValue & 0x00FF;
    3c38:	788a      	ldrb	r2, [r1, #2]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    3c3a:	4b10      	ldr	r3, [pc, #64]	; (3c7c <usbdc_get_str_desc+0x50>)
    3c3c:	7f1c      	ldrb	r4, [r3, #28]
    3c3e:	3c01      	subs	r4, #1
    3c40:	4034      	ands	r4, r6
    3c42:	4261      	negs	r1, r4
    3c44:	414c      	adcs	r4, r1
    3c46:	b2e4      	uxtb	r4, r4
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    3c48:	681b      	ldr	r3, [r3, #0]
    3c4a:	6818      	ldr	r0, [r3, #0]
    3c4c:	6859      	ldr	r1, [r3, #4]
    3c4e:	4b0c      	ldr	r3, [pc, #48]	; (3c80 <usbdc_get_str_desc+0x54>)
    3c50:	4798      	blx	r3
	if (NULL == str_desc) {
    3c52:	2800      	cmp	r0, #0
    3c54:	d00f      	beq.n	3c76 <usbdc_get_str_desc+0x4a>
	if (length <= str_desc[0]) {
    3c56:	7802      	ldrb	r2, [r0, #0]
    3c58:	4296      	cmp	r6, r2
    3c5a:	d801      	bhi.n	3c60 <usbdc_get_str_desc+0x34>
	uint16_t length   = req->wLength;
    3c5c:	0032      	movs	r2, r6
		need_zlp = false;
    3c5e:	2400      	movs	r4, #0
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    3c60:	0023      	movs	r3, r4
    3c62:	0001      	movs	r1, r0
    3c64:	0028      	movs	r0, r5
    3c66:	4c07      	ldr	r4, [pc, #28]	; (3c84 <usbdc_get_str_desc+0x58>)
    3c68:	47a0      	blx	r4
    3c6a:	2800      	cmp	r0, #0
    3c6c:	d101      	bne.n	3c72 <usbdc_get_str_desc+0x46>
	return true;
    3c6e:	2001      	movs	r0, #1
}
    3c70:	bd70      	pop	{r4, r5, r6, pc}
		return false;
    3c72:	2000      	movs	r0, #0
    3c74:	e7fc      	b.n	3c70 <usbdc_get_str_desc+0x44>
		return false;
    3c76:	2000      	movs	r0, #0
    3c78:	e7fa      	b.n	3c70 <usbdc_get_str_desc+0x44>
    3c7a:	46c0      	nop			; (mov r8, r8)
    3c7c:	200004bc 	.word	0x200004bc
    3c80:	00003fc5 	.word	0x00003fc5
    3c84:	00003995 	.word	0x00003995

00003c88 <usbdc_get_desc_req>:
{
    3c88:	b510      	push	{r4, lr}
	uint8_t type = (uint8_t)(req->wValue >> 8);
    3c8a:	78cb      	ldrb	r3, [r1, #3]
	switch (type) {
    3c8c:	2b02      	cmp	r3, #2
    3c8e:	d008      	beq.n	3ca2 <usbdc_get_desc_req+0x1a>
    3c90:	2b03      	cmp	r3, #3
    3c92:	d009      	beq.n	3ca8 <usbdc_get_desc_req+0x20>
    3c94:	2b01      	cmp	r3, #1
    3c96:	d001      	beq.n	3c9c <usbdc_get_desc_req+0x14>
	return false;
    3c98:	2000      	movs	r0, #0
    3c9a:	e001      	b.n	3ca0 <usbdc_get_desc_req+0x18>
		return usbdc_get_dev_desc(ep, req);
    3c9c:	4b04      	ldr	r3, [pc, #16]	; (3cb0 <usbdc_get_desc_req+0x28>)
    3c9e:	4798      	blx	r3
}
    3ca0:	bd10      	pop	{r4, pc}
		return usbdc_get_cfg_desc(ep, req);
    3ca2:	4b04      	ldr	r3, [pc, #16]	; (3cb4 <usbdc_get_desc_req+0x2c>)
    3ca4:	4798      	blx	r3
    3ca6:	e7fb      	b.n	3ca0 <usbdc_get_desc_req+0x18>
		return usbdc_get_str_desc(ep, req);
    3ca8:	4b03      	ldr	r3, [pc, #12]	; (3cb8 <usbdc_get_desc_req+0x30>)
    3caa:	4798      	blx	r3
    3cac:	e7f8      	b.n	3ca0 <usbdc_get_desc_req+0x18>
    3cae:	46c0      	nop			; (mov r8, r8)
    3cb0:	00003b79 	.word	0x00003b79
    3cb4:	00003bc5 	.word	0x00003bc5
    3cb8:	00003c2d 	.word	0x00003c2d

00003cbc <usbdc_get_status_req>:
{
    3cbc:	b530      	push	{r4, r5, lr}
    3cbe:	b083      	sub	sp, #12
    3cc0:	0004      	movs	r4, r0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    3cc2:	780a      	ldrb	r2, [r1, #0]
    3cc4:	231f      	movs	r3, #31
    3cc6:	4013      	ands	r3, r2
    3cc8:	b2da      	uxtb	r2, r3
    3cca:	2a01      	cmp	r2, #1
    3ccc:	d903      	bls.n	3cd6 <usbdc_get_status_req+0x1a>
    3cce:	2b02      	cmp	r3, #2
    3cd0:	d012      	beq.n	3cf8 <usbdc_get_status_req+0x3c>
		return false;
    3cd2:	2000      	movs	r0, #0
    3cd4:	e00e      	b.n	3cf4 <usbdc_get_status_req+0x38>
		st = 0;
    3cd6:	2300      	movs	r3, #0
    3cd8:	9301      	str	r3, [sp, #4]
	memcpy(usbdc.ctrl_buf, &st, 2);
    3cda:	4d0d      	ldr	r5, [pc, #52]	; (3d10 <usbdc_get_status_req+0x54>)
    3cdc:	2202      	movs	r2, #2
    3cde:	a901      	add	r1, sp, #4
    3ce0:	6968      	ldr	r0, [r5, #20]
    3ce2:	4b0c      	ldr	r3, [pc, #48]	; (3d14 <usbdc_get_status_req+0x58>)
    3ce4:	4798      	blx	r3
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    3ce6:	6969      	ldr	r1, [r5, #20]
    3ce8:	2300      	movs	r3, #0
    3cea:	2202      	movs	r2, #2
    3cec:	0020      	movs	r0, r4
    3cee:	4c0a      	ldr	r4, [pc, #40]	; (3d18 <usbdc_get_status_req+0x5c>)
    3cf0:	47a0      	blx	r4
	return true;
    3cf2:	2001      	movs	r0, #1
}
    3cf4:	b003      	add	sp, #12
    3cf6:	bd30      	pop	{r4, r5, pc}
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    3cf8:	7908      	ldrb	r0, [r1, #4]
    3cfa:	2102      	movs	r1, #2
    3cfc:	4b07      	ldr	r3, [pc, #28]	; (3d1c <usbdc_get_status_req+0x60>)
    3cfe:	4798      	blx	r3
		if (st < 0) {
    3d00:	2800      	cmp	r0, #0
    3d02:	db03      	blt.n	3d0c <usbdc_get_status_req+0x50>
		st = st & 0x1;
    3d04:	2301      	movs	r3, #1
    3d06:	4018      	ands	r0, r3
    3d08:	9001      	str	r0, [sp, #4]
		break;
    3d0a:	e7e6      	b.n	3cda <usbdc_get_status_req+0x1e>
			return false;
    3d0c:	2000      	movs	r0, #0
    3d0e:	e7f1      	b.n	3cf4 <usbdc_get_status_req+0x38>
    3d10:	200004bc 	.word	0x200004bc
    3d14:	000040d9 	.word	0x000040d9
    3d18:	00003995 	.word	0x00003995
    3d1c:	000012ed 	.word	0x000012ed

00003d20 <usbdc_get_interface>:
{
    3d20:	b570      	push	{r4, r5, r6, lr}
    3d22:	0005      	movs	r5, r0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    3d24:	4b16      	ldr	r3, [pc, #88]	; (3d80 <usbdc_get_interface+0x60>)
    3d26:	691c      	ldr	r4, [r3, #16]
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    3d28:	7f5a      	ldrb	r2, [r3, #29]
    3d2a:	7901      	ldrb	r1, [r0, #4]
    3d2c:	7943      	ldrb	r3, [r0, #5]
    3d2e:	021b      	lsls	r3, r3, #8
    3d30:	430b      	orrs	r3, r1
    3d32:	411a      	asrs	r2, r3
    3d34:	07d3      	lsls	r3, r2, #31
    3d36:	d50a      	bpl.n	3d4e <usbdc_get_interface+0x2e>
	while (NULL != func) {
    3d38:	2c00      	cmp	r4, #0
    3d3a:	d01f      	beq.n	3d7c <usbdc_get_interface+0x5c>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    3d3c:	002a      	movs	r2, r5
    3d3e:	2102      	movs	r1, #2
    3d40:	0020      	movs	r0, r4
    3d42:	6863      	ldr	r3, [r4, #4]
    3d44:	4798      	blx	r3
    3d46:	2800      	cmp	r0, #0
    3d48:	da0d      	bge.n	3d66 <usbdc_get_interface+0x46>
			func = func->next;
    3d4a:	6824      	ldr	r4, [r4, #0]
    3d4c:	e7f4      	b.n	3d38 <usbdc_get_interface+0x18>
		usbdc.ctrl_buf[0] = 0;
    3d4e:	4b0c      	ldr	r3, [pc, #48]	; (3d80 <usbdc_get_interface+0x60>)
    3d50:	2200      	movs	r2, #0
    3d52:	6959      	ldr	r1, [r3, #20]
    3d54:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    3d56:	6959      	ldr	r1, [r3, #20]
    3d58:	2300      	movs	r3, #0
    3d5a:	3201      	adds	r2, #1
    3d5c:	2000      	movs	r0, #0
    3d5e:	4c09      	ldr	r4, [pc, #36]	; (3d84 <usbdc_get_interface+0x64>)
    3d60:	47a0      	blx	r4
		return true;
    3d62:	2001      	movs	r0, #1
    3d64:	e00b      	b.n	3d7e <usbdc_get_interface+0x5e>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    3d66:	4b06      	ldr	r3, [pc, #24]	; (3d80 <usbdc_get_interface+0x60>)
    3d68:	695a      	ldr	r2, [r3, #20]
    3d6a:	7010      	strb	r0, [r2, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    3d6c:	6959      	ldr	r1, [r3, #20]
    3d6e:	2300      	movs	r3, #0
    3d70:	2201      	movs	r2, #1
    3d72:	2000      	movs	r0, #0
    3d74:	4c03      	ldr	r4, [pc, #12]	; (3d84 <usbdc_get_interface+0x64>)
    3d76:	47a0      	blx	r4
			return true;
    3d78:	2001      	movs	r0, #1
    3d7a:	e000      	b.n	3d7e <usbdc_get_interface+0x5e>
	return false;
    3d7c:	2000      	movs	r0, #0
}
    3d7e:	bd70      	pop	{r4, r5, r6, pc}
    3d80:	200004bc 	.word	0x200004bc
    3d84:	00003995 	.word	0x00003995

00003d88 <usbdc_get_req>:
{
    3d88:	b510      	push	{r4, lr}
	switch (req->bRequest) {
    3d8a:	784b      	ldrb	r3, [r1, #1]
    3d8c:	2b06      	cmp	r3, #6
    3d8e:	d00d      	beq.n	3dac <usbdc_get_req+0x24>
    3d90:	d907      	bls.n	3da2 <usbdc_get_req+0x1a>
    3d92:	2b08      	cmp	r3, #8
    3d94:	d00d      	beq.n	3db2 <usbdc_get_req+0x2a>
    3d96:	2b0a      	cmp	r3, #10
    3d98:	d116      	bne.n	3dc8 <usbdc_get_req+0x40>
		return usbdc_get_interface(req);
    3d9a:	0008      	movs	r0, r1
    3d9c:	4b0b      	ldr	r3, [pc, #44]	; (3dcc <usbdc_get_req+0x44>)
    3d9e:	4798      	blx	r3
    3da0:	e006      	b.n	3db0 <usbdc_get_req+0x28>
	switch (req->bRequest) {
    3da2:	2b00      	cmp	r3, #0
    3da4:	d110      	bne.n	3dc8 <usbdc_get_req+0x40>
		return usbdc_get_status_req(ep, req);
    3da6:	4b0a      	ldr	r3, [pc, #40]	; (3dd0 <usbdc_get_req+0x48>)
    3da8:	4798      	blx	r3
    3daa:	e001      	b.n	3db0 <usbdc_get_req+0x28>
		return usbdc_get_desc_req(ep, req);
    3dac:	4b09      	ldr	r3, [pc, #36]	; (3dd4 <usbdc_get_req+0x4c>)
    3dae:	4798      	blx	r3
}
    3db0:	bd10      	pop	{r4, pc}
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    3db2:	4b09      	ldr	r3, [pc, #36]	; (3dd8 <usbdc_get_req+0x50>)
    3db4:	7eda      	ldrb	r2, [r3, #27]
    3db6:	6959      	ldr	r1, [r3, #20]
    3db8:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    3dba:	6959      	ldr	r1, [r3, #20]
    3dbc:	2300      	movs	r3, #0
    3dbe:	2201      	movs	r2, #1
    3dc0:	4c06      	ldr	r4, [pc, #24]	; (3ddc <usbdc_get_req+0x54>)
    3dc2:	47a0      	blx	r4
		return true;
    3dc4:	2001      	movs	r0, #1
    3dc6:	e7f3      	b.n	3db0 <usbdc_get_req+0x28>
		return false;
    3dc8:	2000      	movs	r0, #0
    3dca:	e7f1      	b.n	3db0 <usbdc_get_req+0x28>
    3dcc:	00003d21 	.word	0x00003d21
    3dd0:	00003cbd 	.word	0x00003cbd
    3dd4:	00003c89 	.word	0x00003c89
    3dd8:	200004bc 	.word	0x200004bc
    3ddc:	00003995 	.word	0x00003995

00003de0 <usbdc_cb_ctl_req>:
{
    3de0:	b570      	push	{r4, r5, r6, lr}
    3de2:	0005      	movs	r5, r0
    3de4:	000c      	movs	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    3de6:	2200      	movs	r2, #0
    3de8:	4b0d      	ldr	r3, [pc, #52]	; (3e20 <usbdc_cb_ctl_req+0x40>)
    3dea:	4798      	blx	r3
    3dec:	1c43      	adds	r3, r0, #1
    3dee:	d014      	beq.n	3e1a <usbdc_cb_ctl_req+0x3a>
    3df0:	2801      	cmp	r0, #1
    3df2:	d013      	beq.n	3e1c <usbdc_cb_ctl_req+0x3c>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    3df4:	7823      	ldrb	r3, [r4, #0]
    3df6:	221f      	movs	r2, #31
    3df8:	4393      	bics	r3, r2
    3dfa:	d004      	beq.n	3e06 <usbdc_cb_ctl_req+0x26>
    3dfc:	b2db      	uxtb	r3, r3
    3dfe:	2b80      	cmp	r3, #128	; 0x80
    3e00:	d006      	beq.n	3e10 <usbdc_cb_ctl_req+0x30>
		return false;
    3e02:	2000      	movs	r0, #0
    3e04:	e00a      	b.n	3e1c <usbdc_cb_ctl_req+0x3c>
		return usbdc_set_req(ep, req);
    3e06:	0021      	movs	r1, r4
    3e08:	0028      	movs	r0, r5
    3e0a:	4b06      	ldr	r3, [pc, #24]	; (3e24 <usbdc_cb_ctl_req+0x44>)
    3e0c:	4798      	blx	r3
    3e0e:	e005      	b.n	3e1c <usbdc_cb_ctl_req+0x3c>
		return usbdc_get_req(ep, req);
    3e10:	0021      	movs	r1, r4
    3e12:	0028      	movs	r0, r5
    3e14:	4b04      	ldr	r3, [pc, #16]	; (3e28 <usbdc_cb_ctl_req+0x48>)
    3e16:	4798      	blx	r3
    3e18:	e000      	b.n	3e1c <usbdc_cb_ctl_req+0x3c>
		return false;
    3e1a:	2000      	movs	r0, #0
}
    3e1c:	bd70      	pop	{r4, r5, r6, pc}
    3e1e:	46c0      	nop			; (mov r8, r8)
    3e20:	00003791 	.word	0x00003791
    3e24:	00003af5 	.word	0x00003af5
    3e28:	00003d89 	.word	0x00003d89

00003e2c <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    3e2c:	b510      	push	{r4, lr}
	switch (type) {
    3e2e:	2801      	cmp	r0, #1
    3e30:	d009      	beq.n	3e46 <usbdc_register_handler+0x1a>
    3e32:	2800      	cmp	r0, #0
    3e34:	d002      	beq.n	3e3c <usbdc_register_handler+0x10>
    3e36:	2802      	cmp	r0, #2
    3e38:	d00a      	beq.n	3e50 <usbdc_register_handler+0x24>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
	}
}
    3e3a:	bd10      	pop	{r4, pc}
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    3e3c:	4807      	ldr	r0, [pc, #28]	; (3e5c <usbdc_register_handler+0x30>)
    3e3e:	3004      	adds	r0, #4
    3e40:	4b07      	ldr	r3, [pc, #28]	; (3e60 <usbdc_register_handler+0x34>)
    3e42:	4798      	blx	r3
		break;
    3e44:	e7f9      	b.n	3e3a <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    3e46:	4805      	ldr	r0, [pc, #20]	; (3e5c <usbdc_register_handler+0x30>)
    3e48:	3008      	adds	r0, #8
    3e4a:	4b05      	ldr	r3, [pc, #20]	; (3e60 <usbdc_register_handler+0x34>)
    3e4c:	4798      	blx	r3
		break;
    3e4e:	e7f4      	b.n	3e3a <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    3e50:	4802      	ldr	r0, [pc, #8]	; (3e5c <usbdc_register_handler+0x30>)
    3e52:	300c      	adds	r0, #12
    3e54:	4b02      	ldr	r3, [pc, #8]	; (3e60 <usbdc_register_handler+0x34>)
    3e56:	4798      	blx	r3
}
    3e58:	e7ef      	b.n	3e3a <usbdc_register_handler+0xe>
    3e5a:	46c0      	nop			; (mov r8, r8)
    3e5c:	200004bc 	.word	0x200004bc
    3e60:	000013f9 	.word	0x000013f9

00003e64 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    3e64:	b570      	push	{r4, r5, r6, lr}
    3e66:	0004      	movs	r4, r0
	ASSERT(ctrl_buf);
    3e68:	1e43      	subs	r3, r0, #1
    3e6a:	4198      	sbcs	r0, r3
    3e6c:	b2c0      	uxtb	r0, r0
    3e6e:	4a0c      	ldr	r2, [pc, #48]	; (3ea0 <usbdc_init+0x3c>)
    3e70:	490c      	ldr	r1, [pc, #48]	; (3ea4 <usbdc_init+0x40>)
    3e72:	4b0d      	ldr	r3, [pc, #52]	; (3ea8 <usbdc_init+0x44>)
    3e74:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    3e76:	4b0d      	ldr	r3, [pc, #52]	; (3eac <usbdc_init+0x48>)
    3e78:	4798      	blx	r3
	if (rc < 0) {
    3e7a:	2800      	cmp	r0, #0
    3e7c:	db0e      	blt.n	3e9c <usbdc_init+0x38>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    3e7e:	4d0c      	ldr	r5, [pc, #48]	; (3eb0 <usbdc_init+0x4c>)
    3e80:	2220      	movs	r2, #32
    3e82:	2100      	movs	r1, #0
    3e84:	0028      	movs	r0, r5
    3e86:	4b0b      	ldr	r3, [pc, #44]	; (3eb4 <usbdc_init+0x50>)
    3e88:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    3e8a:	616c      	str	r4, [r5, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    3e8c:	490a      	ldr	r1, [pc, #40]	; (3eb8 <usbdc_init+0x54>)
    3e8e:	2000      	movs	r0, #0
    3e90:	4c0a      	ldr	r4, [pc, #40]	; (3ebc <usbdc_init+0x58>)
    3e92:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    3e94:	490a      	ldr	r1, [pc, #40]	; (3ec0 <usbdc_init+0x5c>)
    3e96:	2001      	movs	r0, #1
    3e98:	47a0      	blx	r4

	return 0;
    3e9a:	2000      	movs	r0, #0
}
    3e9c:	bd70      	pop	{r4, r5, r6, pc}
    3e9e:	46c0      	nop			; (mov r8, r8)
    3ea0:	00000355 	.word	0x00000355
    3ea4:	00004324 	.word	0x00004324
    3ea8:	000013a5 	.word	0x000013a5
    3eac:	00001049 	.word	0x00001049
    3eb0:	200004bc 	.word	0x200004bc
    3eb4:	000040eb 	.word	0x000040eb
    3eb8:	000037cd 	.word	0x000037cd
    3ebc:	000010b5 	.word	0x000010b5
    3ec0:	00003971 	.word	0x00003971

00003ec4 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    3ec4:	b510      	push	{r4, lr}
    3ec6:	0001      	movs	r1, r0
	list_insert_at_end(&usbdc.func_list, func);
    3ec8:	4802      	ldr	r0, [pc, #8]	; (3ed4 <usbdc_register_function+0x10>)
    3eca:	3010      	adds	r0, #16
    3ecc:	4b02      	ldr	r3, [pc, #8]	; (3ed8 <usbdc_register_function+0x14>)
    3ece:	4798      	blx	r3
}
    3ed0:	bd10      	pop	{r4, pc}
    3ed2:	46c0      	nop			; (mov r8, r8)
    3ed4:	200004bc 	.word	0x200004bc
    3ed8:	000013f9 	.word	0x000013f9

00003edc <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    3edc:	b510      	push	{r4, lr}
	if (usbdc.state >= USBD_S_POWER) {
    3ede:	4b0b      	ldr	r3, [pc, #44]	; (3f0c <usbdc_start+0x30>)
    3ee0:	7e9b      	ldrb	r3, [r3, #26]
    3ee2:	2b00      	cmp	r3, #0
    3ee4:	d10c      	bne.n	3f00 <usbdc_start+0x24>
		return ERR_BUSY;
	}

	if (desces) {
    3ee6:	2800      	cmp	r0, #0
    3ee8:	d00d      	beq.n	3f06 <usbdc_start+0x2a>
		usbdc.desces.ls_fs = desces;
    3eea:	4b08      	ldr	r3, [pc, #32]	; (3f0c <usbdc_start+0x30>)
    3eec:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    3eee:	6802      	ldr	r2, [r0, #0]
    3ef0:	79d2      	ldrb	r2, [r2, #7]
    3ef2:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    3ef4:	2201      	movs	r2, #1
    3ef6:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    3ef8:	4b05      	ldr	r3, [pc, #20]	; (3f10 <usbdc_start+0x34>)
    3efa:	4798      	blx	r3
	return ERR_NONE;
    3efc:	2000      	movs	r0, #0
}
    3efe:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    3f00:	2004      	movs	r0, #4
    3f02:	4240      	negs	r0, r0
    3f04:	e7fb      	b.n	3efe <usbdc_start+0x22>
		return ERR_BAD_DATA;
    3f06:	2009      	movs	r0, #9
    3f08:	4240      	negs	r0, r0
    3f0a:	e7f8      	b.n	3efe <usbdc_start+0x22>
    3f0c:	200004bc 	.word	0x200004bc
    3f10:	000010c1 	.word	0x000010c1

00003f14 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    3f14:	b510      	push	{r4, lr}
	usb_d_attach();
    3f16:	4b01      	ldr	r3, [pc, #4]	; (3f1c <usbdc_attach+0x8>)
    3f18:	4798      	blx	r3
}
    3f1a:	bd10      	pop	{r4, pc}
    3f1c:	000010cd 	.word	0x000010cd

00003f20 <usbdc_get_ctrl_buffer>:
/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
    3f20:	4b01      	ldr	r3, [pc, #4]	; (3f28 <usbdc_get_ctrl_buffer+0x8>)
    3f22:	6958      	ldr	r0, [r3, #20]
}
    3f24:	4770      	bx	lr
    3f26:	46c0      	nop			; (mov r8, r8)
    3f28:	200004bc 	.word	0x200004bc

00003f2c <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    3f2c:	4b02      	ldr	r3, [pc, #8]	; (3f38 <usbdc_get_state+0xc>)
    3f2e:	7e98      	ldrb	r0, [r3, #26]
    3f30:	06c3      	lsls	r3, r0, #27
    3f32:	d500      	bpl.n	3f36 <usbdc_get_state+0xa>
		return USBD_S_SUSPEND;
    3f34:	2010      	movs	r0, #16
	}
	return usbdc.state;
}
    3f36:	4770      	bx	lr
    3f38:	200004bc 	.word	0x200004bc

00003f3c <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    3f3c:	b510      	push	{r4, lr}
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    3f3e:	4288      	cmp	r0, r1
    3f40:	d207      	bcs.n	3f52 <usb_find_desc+0x16>
	return desc[0];
    3f42:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    3f44:	2b01      	cmp	r3, #1
    3f46:	d906      	bls.n	3f56 <usb_find_desc+0x1a>
	return desc[1];
    3f48:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    3f4a:	4294      	cmp	r4, r2
    3f4c:	d002      	beq.n	3f54 <usb_find_desc+0x18>
	return (desc + usb_desc_len(desc));
    3f4e:	18c0      	adds	r0, r0, r3
    3f50:	e7f5      	b.n	3f3e <usb_find_desc+0x2>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    3f52:	2000      	movs	r0, #0
}
    3f54:	bd10      	pop	{r4, pc}
		_desc_len_check();
    3f56:	2000      	movs	r0, #0
    3f58:	e7fc      	b.n	3f54 <usb_find_desc+0x18>

00003f5a <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    3f5a:	4288      	cmp	r0, r1
    3f5c:	d209      	bcs.n	3f72 <usb_find_ep_desc+0x18>
	return desc[0];
    3f5e:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    3f60:	2b01      	cmp	r3, #1
    3f62:	d908      	bls.n	3f76 <usb_find_ep_desc+0x1c>
	return desc[1];
    3f64:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    3f66:	2a04      	cmp	r2, #4
    3f68:	d007      	beq.n	3f7a <usb_find_ep_desc+0x20>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    3f6a:	2a05      	cmp	r2, #5
    3f6c:	d002      	beq.n	3f74 <usb_find_ep_desc+0x1a>
	return (desc + usb_desc_len(desc));
    3f6e:	18c0      	adds	r0, r0, r3
    3f70:	e7f3      	b.n	3f5a <usb_find_ep_desc>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    3f72:	2000      	movs	r0, #0
}
    3f74:	4770      	bx	lr
		_desc_len_check();
    3f76:	2000      	movs	r0, #0
    3f78:	e7fc      	b.n	3f74 <usb_find_ep_desc+0x1a>
	return NULL;
    3f7a:	2000      	movs	r0, #0
    3f7c:	e7fa      	b.n	3f74 <usb_find_ep_desc+0x1a>
	...

00003f80 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    3f80:	b570      	push	{r4, r5, r6, lr}
    3f82:	000c      	movs	r4, r1
    3f84:	0015      	movs	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    3f86:	2202      	movs	r2, #2
    3f88:	4b0d      	ldr	r3, [pc, #52]	; (3fc0 <usb_find_cfg_desc+0x40>)
    3f8a:	4798      	blx	r3
	if (!desc) {
    3f8c:	2800      	cmp	r0, #0
    3f8e:	d012      	beq.n	3fb6 <usb_find_cfg_desc+0x36>
		return NULL;
	}
	while (desc < eof) {
    3f90:	42a0      	cmp	r0, r4
    3f92:	d20f      	bcs.n	3fb4 <usb_find_cfg_desc+0x34>
	return desc[0];
    3f94:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    3f96:	2b01      	cmp	r3, #1
    3f98:	d90e      	bls.n	3fb8 <usb_find_cfg_desc+0x38>
		if (desc[1] != USB_DT_CONFIG) {
    3f9a:	7843      	ldrb	r3, [r0, #1]
    3f9c:	2b02      	cmp	r3, #2
    3f9e:	d10d      	bne.n	3fbc <usb_find_cfg_desc+0x3c>
			break;
		}
		if (desc[5] == cfg_value) {
    3fa0:	7943      	ldrb	r3, [r0, #5]
    3fa2:	42ab      	cmp	r3, r5
    3fa4:	d007      	beq.n	3fb6 <usb_find_cfg_desc+0x36>
	return (ptr[0] + (ptr[1] << 8));
    3fa6:	7883      	ldrb	r3, [r0, #2]
    3fa8:	78c2      	ldrb	r2, [r0, #3]
    3faa:	0212      	lsls	r2, r2, #8
    3fac:	189b      	adds	r3, r3, r2
    3fae:	b29b      	uxth	r3, r3
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    3fb0:	18c0      	adds	r0, r0, r3
    3fb2:	e7ed      	b.n	3f90 <usb_find_cfg_desc+0x10>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    3fb4:	2000      	movs	r0, #0
}
    3fb6:	bd70      	pop	{r4, r5, r6, pc}
		_desc_len_check();
    3fb8:	2000      	movs	r0, #0
    3fba:	e7fc      	b.n	3fb6 <usb_find_cfg_desc+0x36>
	return NULL;
    3fbc:	2000      	movs	r0, #0
    3fbe:	e7fa      	b.n	3fb6 <usb_find_cfg_desc+0x36>
    3fc0:	00003f3d 	.word	0x00003f3d

00003fc4 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    3fc4:	b570      	push	{r4, r5, r6, lr}
    3fc6:	000d      	movs	r5, r1
    3fc8:	0016      	movs	r6, r2
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    3fca:	2400      	movs	r4, #0
    3fcc:	42a8      	cmp	r0, r5
    3fce:	d20e      	bcs.n	3fee <usb_find_str_desc+0x2a>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    3fd0:	2203      	movs	r2, #3
    3fd2:	0029      	movs	r1, r5
    3fd4:	4b08      	ldr	r3, [pc, #32]	; (3ff8 <usb_find_str_desc+0x34>)
    3fd6:	4798      	blx	r3
		if (desc) {
    3fd8:	2800      	cmp	r0, #0
    3fda:	d009      	beq.n	3ff0 <usb_find_str_desc+0x2c>
	return desc[0];
    3fdc:	7803      	ldrb	r3, [r0, #0]
			_desc_len_check();
    3fde:	2b01      	cmp	r3, #1
    3fe0:	d907      	bls.n	3ff2 <usb_find_str_desc+0x2e>
			if (i == str_index) {
    3fe2:	42b4      	cmp	r4, r6
    3fe4:	d004      	beq.n	3ff0 <usb_find_str_desc+0x2c>
				return desc;
			}
			i++;
    3fe6:	3401      	adds	r4, #1
    3fe8:	b2e4      	uxtb	r4, r4
	return (desc + usb_desc_len(desc));
    3fea:	18c0      	adds	r0, r0, r3
    3fec:	e7ee      	b.n	3fcc <usb_find_str_desc+0x8>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    3fee:	2000      	movs	r0, #0
}
    3ff0:	bd70      	pop	{r4, r5, r6, pc}
			_desc_len_check();
    3ff2:	2000      	movs	r0, #0
    3ff4:	e7fc      	b.n	3ff0 <usb_find_str_desc+0x2c>
    3ff6:	46c0      	nop			; (mov r8, r8)
    3ff8:	00003f3d 	.word	0x00003f3d

00003ffc <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    3ffc:	b510      	push	{r4, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    3ffe:	4806      	ldr	r0, [pc, #24]	; (4018 <cdc_device_acm_init+0x1c>)
    4000:	3040      	adds	r0, #64	; 0x40
    4002:	4b06      	ldr	r3, [pc, #24]	; (401c <cdc_device_acm_init+0x20>)
    4004:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    4006:	4b06      	ldr	r3, [pc, #24]	; (4020 <cdc_device_acm_init+0x24>)
    4008:	4798      	blx	r3

	usbdc_start(single_desc);
    400a:	4806      	ldr	r0, [pc, #24]	; (4024 <cdc_device_acm_init+0x28>)
    400c:	4b06      	ldr	r3, [pc, #24]	; (4028 <cdc_device_acm_init+0x2c>)
    400e:	4798      	blx	r3
	usbdc_attach();
    4010:	4b06      	ldr	r3, [pc, #24]	; (402c <cdc_device_acm_init+0x30>)
    4012:	4798      	blx	r3
}
    4014:	bd10      	pop	{r4, pc}
    4016:	46c0      	nop			; (mov r8, r8)
    4018:	200004dc 	.word	0x200004dc
    401c:	00003e65 	.word	0x00003e65
    4020:	000036e1 	.word	0x000036e1
    4024:	20000008 	.word	0x20000008
    4028:	00003edd 	.word	0x00003edd
    402c:	00003f15 	.word	0x00003f15

00004030 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    4030:	b510      	push	{r4, lr}

	cdc_device_acm_init();
    4032:	4b01      	ldr	r3, [pc, #4]	; (4038 <usb_init+0x8>)
    4034:	4798      	blx	r3
}
    4036:	bd10      	pop	{r4, pc}
    4038:	00003ffd 	.word	0x00003ffd

0000403c <__ffssi2>:
    403c:	b510      	push	{r4, lr}
    403e:	2300      	movs	r3, #0
    4040:	2800      	cmp	r0, #0
    4042:	d002      	beq.n	404a <__ffssi2+0xe>
    4044:	f000 f804 	bl	4050 <__ctzsi2>
    4048:	1c43      	adds	r3, r0, #1
    404a:	0018      	movs	r0, r3
    404c:	bd10      	pop	{r4, pc}
    404e:	46c0      	nop			; (mov r8, r8)

00004050 <__ctzsi2>:
    4050:	4241      	negs	r1, r0
    4052:	4008      	ands	r0, r1
    4054:	211c      	movs	r1, #28
    4056:	2301      	movs	r3, #1
    4058:	041b      	lsls	r3, r3, #16
    405a:	4298      	cmp	r0, r3
    405c:	d301      	bcc.n	4062 <__ctzsi2+0x12>
    405e:	0c00      	lsrs	r0, r0, #16
    4060:	3910      	subs	r1, #16
    4062:	0a1b      	lsrs	r3, r3, #8
    4064:	4298      	cmp	r0, r3
    4066:	d301      	bcc.n	406c <__ctzsi2+0x1c>
    4068:	0a00      	lsrs	r0, r0, #8
    406a:	3908      	subs	r1, #8
    406c:	091b      	lsrs	r3, r3, #4
    406e:	4298      	cmp	r0, r3
    4070:	d301      	bcc.n	4076 <__ctzsi2+0x26>
    4072:	0900      	lsrs	r0, r0, #4
    4074:	3904      	subs	r1, #4
    4076:	a202      	add	r2, pc, #8	; (adr r2, 4080 <__ctzsi2+0x30>)
    4078:	5c10      	ldrb	r0, [r2, r0]
    407a:	1a40      	subs	r0, r0, r1
    407c:	4770      	bx	lr
    407e:	46c0      	nop			; (mov r8, r8)
    4080:	1d1d1c1b 	.word	0x1d1d1c1b
    4084:	1e1e1e1e 	.word	0x1e1e1e1e
    4088:	1f1f1f1f 	.word	0x1f1f1f1f
    408c:	1f1f1f1f 	.word	0x1f1f1f1f

00004090 <__libc_init_array>:
    4090:	b570      	push	{r4, r5, r6, lr}
    4092:	2600      	movs	r6, #0
    4094:	4d0c      	ldr	r5, [pc, #48]	; (40c8 <__libc_init_array+0x38>)
    4096:	4c0d      	ldr	r4, [pc, #52]	; (40cc <__libc_init_array+0x3c>)
    4098:	1b64      	subs	r4, r4, r5
    409a:	10a4      	asrs	r4, r4, #2
    409c:	42a6      	cmp	r6, r4
    409e:	d109      	bne.n	40b4 <__libc_init_array+0x24>
    40a0:	2600      	movs	r6, #0
    40a2:	f000 f94b 	bl	433c <_init>
    40a6:	4d0a      	ldr	r5, [pc, #40]	; (40d0 <__libc_init_array+0x40>)
    40a8:	4c0a      	ldr	r4, [pc, #40]	; (40d4 <__libc_init_array+0x44>)
    40aa:	1b64      	subs	r4, r4, r5
    40ac:	10a4      	asrs	r4, r4, #2
    40ae:	42a6      	cmp	r6, r4
    40b0:	d105      	bne.n	40be <__libc_init_array+0x2e>
    40b2:	bd70      	pop	{r4, r5, r6, pc}
    40b4:	00b3      	lsls	r3, r6, #2
    40b6:	58eb      	ldr	r3, [r5, r3]
    40b8:	4798      	blx	r3
    40ba:	3601      	adds	r6, #1
    40bc:	e7ee      	b.n	409c <__libc_init_array+0xc>
    40be:	00b3      	lsls	r3, r6, #2
    40c0:	58eb      	ldr	r3, [r5, r3]
    40c2:	4798      	blx	r3
    40c4:	3601      	adds	r6, #1
    40c6:	e7f2      	b.n	40ae <__libc_init_array+0x1e>
    40c8:	00004348 	.word	0x00004348
    40cc:	00004348 	.word	0x00004348
    40d0:	00004348 	.word	0x00004348
    40d4:	0000434c 	.word	0x0000434c

000040d8 <memcpy>:
    40d8:	2300      	movs	r3, #0
    40da:	b510      	push	{r4, lr}
    40dc:	429a      	cmp	r2, r3
    40de:	d100      	bne.n	40e2 <memcpy+0xa>
    40e0:	bd10      	pop	{r4, pc}
    40e2:	5ccc      	ldrb	r4, [r1, r3]
    40e4:	54c4      	strb	r4, [r0, r3]
    40e6:	3301      	adds	r3, #1
    40e8:	e7f8      	b.n	40dc <memcpy+0x4>

000040ea <memset>:
    40ea:	0003      	movs	r3, r0
    40ec:	1882      	adds	r2, r0, r2
    40ee:	4293      	cmp	r3, r2
    40f0:	d100      	bne.n	40f4 <memset+0xa>
    40f2:	4770      	bx	lr
    40f4:	7019      	strb	r1, [r3, #0]
    40f6:	3301      	adds	r3, #1
    40f8:	e7f9      	b.n	40ee <memset+0x4>
    40fa:	0000      	movs	r0, r0
    40fc:	682f2e2e 	.word	0x682f2e2e
    4100:	732f6c61 	.word	0x732f6c61
    4104:	682f6372 	.word	0x682f6372
    4108:	645f6c61 	.word	0x645f6c61
    410c:	735f6361 	.word	0x735f6361
    4110:	2e636e79 	.word	0x2e636e79
    4114:	00000063 	.word	0x00000063
    4118:	682f2e2e 	.word	0x682f2e2e
    411c:	732f6c61 	.word	0x732f6c61
    4120:	682f6372 	.word	0x682f6372
    4124:	735f6c61 	.word	0x735f6c61
    4128:	6d5f6970 	.word	0x6d5f6970
    412c:	6e79735f 	.word	0x6e79735f
    4130:	00632e63 	.word	0x00632e63
    4134:	682f2e2e 	.word	0x682f2e2e
    4138:	732f6c61 	.word	0x732f6c61
    413c:	682f6372 	.word	0x682f6372
    4140:	745f6c61 	.word	0x745f6c61
    4144:	72656d69 	.word	0x72656d69
    4148:	0000632e 	.word	0x0000632e
    414c:	682f2e2e 	.word	0x682f2e2e
    4150:	732f6c61 	.word	0x732f6c61
    4154:	682f6372 	.word	0x682f6372
    4158:	755f6c61 	.word	0x755f6c61
    415c:	74726173 	.word	0x74726173
    4160:	7973615f 	.word	0x7973615f
    4164:	632e636e 	.word	0x632e636e
    4168:	00000000 	.word	0x00000000
    416c:	682f2e2e 	.word	0x682f2e2e
    4170:	752f6c61 	.word	0x752f6c61
    4174:	736c6974 	.word	0x736c6974
    4178:	6372732f 	.word	0x6372732f
    417c:	6974752f 	.word	0x6974752f
    4180:	6c5f736c 	.word	0x6c5f736c
    4184:	2e747369 	.word	0x2e747369
    4188:	00000063 	.word	0x00000063
    418c:	682f2e2e 	.word	0x682f2e2e
    4190:	752f6c61 	.word	0x752f6c61
    4194:	736c6974 	.word	0x736c6974
    4198:	6372732f 	.word	0x6372732f
    419c:	6974752f 	.word	0x6974752f
    41a0:	725f736c 	.word	0x725f736c
    41a4:	62676e69 	.word	0x62676e69
    41a8:	65666675 	.word	0x65666675
    41ac:	00632e72 	.word	0x00632e72
    41b0:	682f2e2e 	.word	0x682f2e2e
    41b4:	642f6c70 	.word	0x642f6c70
    41b8:	682f6361 	.word	0x682f6361
    41bc:	645f6c70 	.word	0x645f6c70
    41c0:	632e6361 	.word	0x632e6361
    41c4:	00000000 	.word	0x00000000

000041c8 <_map>:
    41c8:	0000000e 0000000e 682f2e2e 652f6c70     ........../hpl/e
    41d8:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....

000041e8 <_usarts>:
    41e8:	00000003 40100004 00030000 0000ff2e     .......@........
    41f8:	00000000                                ....

000041fc <_i2cms>:
	...

00004214 <_i2css>:
	...

00004224 <sercomspi_regs>:
    4224:	0020000c 00020000 00000000 01ff003b     .. .........;...
    4234:	20000c00 02000000 00000000 ff000500     ... ............
    4244:	000c0101 00000030 00000002 00170000     ....0...........
    4254:	000201ff 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    4264:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..

00004274 <_tcs>:
    4274:	03680003 00000000 00000000 00001770     ..h.........p...
    4284:	00000000 03680004 00000000 00000000     ......h.........
    4294:	0000007d 00000000 682f2e2e 742f6c70     }........./hpl/t
    42a4:	70682f63 63745f6c 0000632e 00004a25     c/hpl_tc.c..%J..
    42b4:	00000804                                ....

000042b8 <_usb_ep_cfgs>:
    42b8:	20000458 00000000 00000040 20000418     X.. ....@...... 
    42c8:	200003d8 00400040 20000398 20000358     ... @.@.... X.. 
    42d8:	00400040 20000318 200002d8 00400040     @.@.... ... @.@.
    42e8:	20000298 00000000 00000040 00003b5a     ... ....@...Z;..
    42f8:	00003b36 00003b5a 00003b3c 00003b5a     6;..Z;..<;..Z;..
    4308:	00003b06 00003b5a 00003b5a 00003b5a     .;..Z;..Z;..Z;..
    4318:	00003b18 00003b5a 00003b42 752f2e2e     .;..Z;..B;..../u
    4328:	642f6273 63697665 73752f65 2e636462     sb/device/usbdc.
    4338:	00000063                                c...

0000433c <_init>:
    433c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    433e:	46c0      	nop			; (mov r8, r8)
    4340:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4342:	bc08      	pop	{r3}
    4344:	469e      	mov	lr, r3
    4346:	4770      	bx	lr

00004348 <__init_array_start>:
    4348:	000000dd 	.word	0x000000dd

0000434c <_fini>:
    434c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    434e:	46c0      	nop			; (mov r8, r8)
    4350:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4352:	bc08      	pop	{r3}
    4354:	469e      	mov	lr, r3
    4356:	4770      	bx	lr

00004358 <__fini_array_start>:
    4358:	000000b5 	.word	0x000000b5
