
SAMD21_BSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004364  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000068  20000000  00004364  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000750  20000068  000043cc  00020068  2**2
                  ALLOC
  3 .stack        00002000  200007b8  00004b1c  00020068  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
  6 .debug_info   00039b55  00000000  00000000  000200e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004a0c  00000000  00000000  00059c3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00017835  00000000  00000000  0005e64a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000010d0  00000000  00000000  00075e7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001260  00000000  00000000  00076f4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001d822  00000000  00000000  000781af  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00017037  00000000  00000000  000959d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00090d19  00000000  00000000  000aca08  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002c8c  00000000  00000000  0013d724  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	b8 27 00 20 2d 01 00 00 29 01 00 00 29 01 00 00     .'. -...)...)...
	...
      2c:	29 01 00 00 00 00 00 00 00 00 00 00 29 01 00 00     )...........)...
      3c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      4c:	29 01 00 00 a1 16 00 00 29 01 00 00 29 01 00 00     ).......)...)...
      5c:	e9 33 00 00 29 01 00 00 29 01 00 00 29 01 00 00     .3..)...)...)...
      6c:	29 01 00 00 c1 1a 00 00 29 01 00 00 29 01 00 00     ).......)...)...
      7c:	29 01 00 00 29 01 00 00 29 01 00 00 c1 20 00 00     )...)...).... ..
      8c:	d5 20 00 00 29 01 00 00 29 01 00 00 29 01 00 00     . ..)...)...)...
      9c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      ac:	29 01 00 00 00 00 00 00                             ).......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000068 	.word	0x20000068
      d4:	00000000 	.word	0x00000000
      d8:	00004364 	.word	0x00004364

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000006c 	.word	0x2000006c
     108:	00004364 	.word	0x00004364
     10c:	00004364 	.word	0x00004364
     110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     114:	b510      	push	{r4, lr}
	system_init();
     116:	4b02      	ldr	r3, [pc, #8]	; (120 <atmel_start_init+0xc>)
     118:	4798      	blx	r3
	usb_init();
     11a:	4b02      	ldr	r3, [pc, #8]	; (124 <atmel_start_init+0x10>)
     11c:	4798      	blx	r3
}
     11e:	bd10      	pop	{r4, pc}
     120:	000007d1 	.word	0x000007d1
     124:	00004015 	.word	0x00004015

00000128 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     128:	e7fe      	b.n	128 <Dummy_Handler>
	...

0000012c <Reset_Handler>:
{
     12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     12e:	4a23      	ldr	r2, [pc, #140]	; (1bc <Reset_Handler+0x90>)
     130:	4b23      	ldr	r3, [pc, #140]	; (1c0 <Reset_Handler+0x94>)
     132:	429a      	cmp	r2, r3
     134:	d009      	beq.n	14a <Reset_Handler+0x1e>
     136:	4b22      	ldr	r3, [pc, #136]	; (1c0 <Reset_Handler+0x94>)
     138:	4a20      	ldr	r2, [pc, #128]	; (1bc <Reset_Handler+0x90>)
     13a:	e003      	b.n	144 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     13c:	6811      	ldr	r1, [r2, #0]
     13e:	6019      	str	r1, [r3, #0]
     140:	3304      	adds	r3, #4
     142:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     144:	491f      	ldr	r1, [pc, #124]	; (1c4 <Reset_Handler+0x98>)
     146:	428b      	cmp	r3, r1
     148:	d3f8      	bcc.n	13c <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     14a:	4b1f      	ldr	r3, [pc, #124]	; (1c8 <Reset_Handler+0x9c>)
     14c:	e002      	b.n	154 <Reset_Handler+0x28>
                *pDest++ = 0;
     14e:	2200      	movs	r2, #0
     150:	601a      	str	r2, [r3, #0]
     152:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     154:	4a1d      	ldr	r2, [pc, #116]	; (1cc <Reset_Handler+0xa0>)
     156:	4293      	cmp	r3, r2
     158:	d3f9      	bcc.n	14e <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     15a:	4a1d      	ldr	r2, [pc, #116]	; (1d0 <Reset_Handler+0xa4>)
     15c:	21ff      	movs	r1, #255	; 0xff
     15e:	4b1d      	ldr	r3, [pc, #116]	; (1d4 <Reset_Handler+0xa8>)
     160:	438b      	bics	r3, r1
     162:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     164:	39fd      	subs	r1, #253	; 0xfd
     166:	2390      	movs	r3, #144	; 0x90
     168:	005b      	lsls	r3, r3, #1
     16a:	4a1b      	ldr	r2, [pc, #108]	; (1d8 <Reset_Handler+0xac>)
     16c:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     16e:	4a1b      	ldr	r2, [pc, #108]	; (1dc <Reset_Handler+0xb0>)
     170:	78d3      	ldrb	r3, [r2, #3]
     172:	2503      	movs	r5, #3
     174:	43ab      	bics	r3, r5
     176:	2402      	movs	r4, #2
     178:	4323      	orrs	r3, r4
     17a:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     17c:	78d3      	ldrb	r3, [r2, #3]
     17e:	270c      	movs	r7, #12
     180:	43bb      	bics	r3, r7
     182:	2608      	movs	r6, #8
     184:	4333      	orrs	r3, r6
     186:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     188:	4b15      	ldr	r3, [pc, #84]	; (1e0 <Reset_Handler+0xb4>)
     18a:	7b98      	ldrb	r0, [r3, #14]
     18c:	2230      	movs	r2, #48	; 0x30
     18e:	4390      	bics	r0, r2
     190:	2220      	movs	r2, #32
     192:	4310      	orrs	r0, r2
     194:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     196:	7b99      	ldrb	r1, [r3, #14]
     198:	43b9      	bics	r1, r7
     19a:	4331      	orrs	r1, r6
     19c:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     19e:	7b9a      	ldrb	r2, [r3, #14]
     1a0:	43aa      	bics	r2, r5
     1a2:	4322      	orrs	r2, r4
     1a4:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     1a6:	4a0f      	ldr	r2, [pc, #60]	; (1e4 <Reset_Handler+0xb8>)
     1a8:	6851      	ldr	r1, [r2, #4]
     1aa:	2380      	movs	r3, #128	; 0x80
     1ac:	430b      	orrs	r3, r1
     1ae:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     1b0:	4b0d      	ldr	r3, [pc, #52]	; (1e8 <Reset_Handler+0xbc>)
     1b2:	4798      	blx	r3
        main();
     1b4:	4b0d      	ldr	r3, [pc, #52]	; (1ec <Reset_Handler+0xc0>)
     1b6:	4798      	blx	r3
     1b8:	e7fe      	b.n	1b8 <Reset_Handler+0x8c>
     1ba:	46c0      	nop			; (mov r8, r8)
     1bc:	00004364 	.word	0x00004364
     1c0:	20000000 	.word	0x20000000
     1c4:	20000068 	.word	0x20000068
     1c8:	20000068 	.word	0x20000068
     1cc:	200007b8 	.word	0x200007b8
     1d0:	e000ed00 	.word	0xe000ed00
     1d4:	00000000 	.word	0x00000000
     1d8:	41007000 	.word	0x41007000
     1dc:	41005000 	.word	0x41005000
     1e0:	41004800 	.word	0x41004800
     1e4:	41004000 	.word	0x41004000
     1e8:	00004075 	.word	0x00004075
     1ec:	000033f5 	.word	0x000033f5

000001f0 <TIMER_ZCD_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ZCD_init(void)
{
     1f0:	b510      	push	{r4, lr}
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     1f2:	4a08      	ldr	r2, [pc, #32]	; (214 <TIMER_ZCD_init+0x24>)
     1f4:	6a11      	ldr	r1, [r2, #32]
     1f6:	2380      	movs	r3, #128	; 0x80
     1f8:	011b      	lsls	r3, r3, #4
     1fa:	430b      	orrs	r3, r1
     1fc:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     1fe:	4a06      	ldr	r2, [pc, #24]	; (218 <TIMER_ZCD_init+0x28>)
     200:	4b06      	ldr	r3, [pc, #24]	; (21c <TIMER_ZCD_init+0x2c>)
     202:	805a      	strh	r2, [r3, #2]
	_pm_enable_bus_clock(PM_BUS_APBC, TC3);
	_gclk_enable_channel(TC3_GCLK_ID, CONF_GCLK_TC3_SRC);

	timer_init(&TIMER_ZCD, TC3, _tc_get_timer());
     204:	4b06      	ldr	r3, [pc, #24]	; (220 <TIMER_ZCD_init+0x30>)
     206:	4798      	blx	r3
     208:	0002      	movs	r2, r0
     20a:	4906      	ldr	r1, [pc, #24]	; (224 <TIMER_ZCD_init+0x34>)
     20c:	4806      	ldr	r0, [pc, #24]	; (228 <TIMER_ZCD_init+0x38>)
     20e:	4b07      	ldr	r3, [pc, #28]	; (22c <TIMER_ZCD_init+0x3c>)
     210:	4798      	blx	r3
}
     212:	bd10      	pop	{r4, pc}
     214:	40000400 	.word	0x40000400
     218:	0000401b 	.word	0x0000401b
     21c:	40000c00 	.word	0x40000c00
     220:	000020bd 	.word	0x000020bd
     224:	42002c00 	.word	0x42002c00
     228:	200006dc 	.word	0x200006dc
     22c:	00000bd9 	.word	0x00000bd9

00000230 <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
     230:	b510      	push	{r4, lr}
     232:	4a08      	ldr	r2, [pc, #32]	; (254 <TIMER_USB_init+0x24>)
     234:	6a11      	ldr	r1, [r2, #32]
     236:	2380      	movs	r3, #128	; 0x80
     238:	015b      	lsls	r3, r3, #5
     23a:	430b      	orrs	r3, r1
     23c:	6213      	str	r3, [r2, #32]
     23e:	4a06      	ldr	r2, [pc, #24]	; (258 <TIMER_USB_init+0x28>)
     240:	4b06      	ldr	r3, [pc, #24]	; (25c <TIMER_USB_init+0x2c>)
     242:	805a      	strh	r2, [r3, #2]
	_pm_enable_bus_clock(PM_BUS_APBC, TC4);
	_gclk_enable_channel(TC4_GCLK_ID, CONF_GCLK_TC4_SRC);

	timer_init(&TIMER_USB, TC4, _tc_get_timer());
     244:	4b06      	ldr	r3, [pc, #24]	; (260 <TIMER_USB_init+0x30>)
     246:	4798      	blx	r3
     248:	0002      	movs	r2, r0
     24a:	4906      	ldr	r1, [pc, #24]	; (264 <TIMER_USB_init+0x34>)
     24c:	4806      	ldr	r0, [pc, #24]	; (268 <TIMER_USB_init+0x38>)
     24e:	4b07      	ldr	r3, [pc, #28]	; (26c <TIMER_USB_init+0x3c>)
     250:	4798      	blx	r3
}
     252:	bd10      	pop	{r4, pc}
     254:	40000400 	.word	0x40000400
     258:	0000431c 	.word	0x0000431c
     25c:	40000c00 	.word	0x40000c00
     260:	000020bd 	.word	0x000020bd
     264:	42003000 	.word	0x42003000
     268:	2000079c 	.word	0x2000079c
     26c:	00000bd9 	.word	0x00000bd9

00000270 <EXTERNAL_IRQ_0_init>:
{
     270:	b510      	push	{r4, lr}
     272:	4a0f      	ldr	r2, [pc, #60]	; (2b0 <EXTERNAL_IRQ_0_init+0x40>)
     274:	4b0f      	ldr	r3, [pc, #60]	; (2b4 <EXTERNAL_IRQ_0_init+0x44>)
     276:	805a      	strh	r2, [r3, #2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     278:	3a05      	subs	r2, #5
     27a:	23c0      	movs	r3, #192	; 0xc0
     27c:	05db      	lsls	r3, r3, #23
     27e:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     280:	4b0d      	ldr	r3, [pc, #52]	; (2b8 <EXTERNAL_IRQ_0_init+0x48>)
     282:	4a0e      	ldr	r2, [pc, #56]	; (2bc <EXTERNAL_IRQ_0_init+0x4c>)
     284:	629a      	str	r2, [r3, #40]	; 0x28
     286:	4a0e      	ldr	r2, [pc, #56]	; (2c0 <EXTERNAL_IRQ_0_init+0x50>)
     288:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     28a:	214e      	movs	r1, #78	; 0x4e
     28c:	5c5a      	ldrb	r2, [r3, r1]
     28e:	2004      	movs	r0, #4
     290:	4382      	bics	r2, r0
     292:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     294:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     296:	3803      	subs	r0, #3
     298:	4382      	bics	r2, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     29a:	4302      	orrs	r2, r0
     29c:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     29e:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     2a0:	3917      	subs	r1, #23
     2a2:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     2a4:	200f      	movs	r0, #15
     2a6:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     2a8:	545a      	strb	r2, [r3, r1]
	ext_irq_init();
     2aa:	4b06      	ldr	r3, [pc, #24]	; (2c4 <EXTERNAL_IRQ_0_init+0x54>)
     2ac:	4798      	blx	r3
}
     2ae:	bd10      	pop	{r4, pc}
     2b0:	00004005 	.word	0x00004005
     2b4:	40000c00 	.word	0x40000c00
     2b8:	41004400 	.word	0x41004400
     2bc:	40024000 	.word	0x40024000
     2c0:	c0020000 	.word	0xc0020000
     2c4:	000009d1 	.word	0x000009d1

000002c8 <SPI_ADF_PORT_init>:
{
     2c8:	b5f0      	push	{r4, r5, r6, r7, lr}
     2ca:	46c6      	mov	lr, r8
     2cc:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     2ce:	22c0      	movs	r2, #192	; 0xc0
     2d0:	05d2      	lsls	r2, r2, #23
     2d2:	2310      	movs	r3, #16
     2d4:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     2d6:	6093      	str	r3, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     2d8:	4b25      	ldr	r3, [pc, #148]	; (370 <SPI_ADF_PORT_init+0xa8>)
     2da:	4926      	ldr	r1, [pc, #152]	; (374 <SPI_ADF_PORT_init+0xac>)
     2dc:	6299      	str	r1, [r3, #40]	; 0x28
     2de:	21c0      	movs	r1, #192	; 0xc0
     2e0:	0609      	lsls	r1, r1, #24
     2e2:	468c      	mov	ip, r1
     2e4:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2e6:	2044      	movs	r0, #68	; 0x44
     2e8:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2ea:	2701      	movs	r7, #1
     2ec:	43b9      	bics	r1, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     2ee:	2601      	movs	r6, #1
     2f0:	4331      	orrs	r1, r6
     2f2:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2f4:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     2f6:	2132      	movs	r1, #50	; 0x32
     2f8:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     2fa:	250f      	movs	r5, #15
     2fc:	43a8      	bics	r0, r5
	tmp |= PORT_PMUX_PMUXE(data);
     2fe:	2403      	movs	r4, #3
     300:	46a0      	mov	r8, r4
     302:	4644      	mov	r4, r8
     304:	4320      	orrs	r0, r4
     306:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     308:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     30a:	2020      	movs	r0, #32
     30c:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     30e:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     310:	4819      	ldr	r0, [pc, #100]	; (378 <SPI_ADF_PORT_init+0xb0>)
     312:	6298      	str	r0, [r3, #40]	; 0x28
     314:	4660      	mov	r0, ip
     316:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     318:	2045      	movs	r0, #69	; 0x45
     31a:	4684      	mov	ip, r0
     31c:	5c18      	ldrb	r0, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     31e:	43b8      	bics	r0, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     320:	4330      	orrs	r0, r6
     322:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     324:	4664      	mov	r4, ip
     326:	5518      	strb	r0, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     328:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     32a:	3c36      	subs	r4, #54	; 0x36
     32c:	4020      	ands	r0, r4
	tmp |= PORT_PMUX_PMUXO(data);
     32e:	2430      	movs	r4, #48	; 0x30
     330:	46a4      	mov	ip, r4
     332:	4664      	mov	r4, ip
     334:	4320      	orrs	r0, r4
     336:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     338:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     33a:	310e      	adds	r1, #14
     33c:	6051      	str	r1, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     33e:	4a0f      	ldr	r2, [pc, #60]	; (37c <SPI_ADF_PORT_init+0xb4>)
     340:	629a      	str	r2, [r3, #40]	; 0x28
     342:	4a0f      	ldr	r2, [pc, #60]	; (380 <SPI_ADF_PORT_init+0xb8>)
     344:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     346:	2246      	movs	r2, #70	; 0x46
     348:	5c99      	ldrb	r1, [r3, r2]
     34a:	2004      	movs	r0, #4
     34c:	4381      	bics	r1, r0
     34e:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     350:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     352:	43b9      	bics	r1, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     354:	4331      	orrs	r1, r6
     356:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     358:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     35a:	2133      	movs	r1, #51	; 0x33
     35c:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     35e:	43aa      	bics	r2, r5
	tmp |= PORT_PMUX_PMUXE(data);
     360:	4640      	mov	r0, r8
     362:	4302      	orrs	r2, r0
     364:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     366:	545a      	strb	r2, [r3, r1]
}
     368:	bc04      	pop	{r2}
     36a:	4690      	mov	r8, r2
     36c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     36e:	46c0      	nop			; (mov r8, r8)
     370:	41004400 	.word	0x41004400
     374:	40000010 	.word	0x40000010
     378:	40000020 	.word	0x40000020
     37c:	40020040 	.word	0x40020040
     380:	c0020000 	.word	0xc0020000

00000384 <SPI_ADF_CLOCK_init>:
     384:	4a04      	ldr	r2, [pc, #16]	; (398 <SPI_ADF_CLOCK_init+0x14>)
     386:	6a13      	ldr	r3, [r2, #32]
     388:	2104      	movs	r1, #4
     38a:	430b      	orrs	r3, r1
     38c:	6213      	str	r3, [r2, #32]
     38e:	4a03      	ldr	r2, [pc, #12]	; (39c <SPI_ADF_CLOCK_init+0x18>)
     390:	4b03      	ldr	r3, [pc, #12]	; (3a0 <SPI_ADF_CLOCK_init+0x1c>)
     392:	805a      	strh	r2, [r3, #2]
}
     394:	4770      	bx	lr
     396:	46c0      	nop			; (mov r8, r8)
     398:	40000400 	.word	0x40000400
     39c:	00004014 	.word	0x00004014
     3a0:	40000c00 	.word	0x40000c00

000003a4 <SPI_ADF_init>:
{
     3a4:	b510      	push	{r4, lr}
	SPI_ADF_CLOCK_init();
     3a6:	4b04      	ldr	r3, [pc, #16]	; (3b8 <SPI_ADF_init+0x14>)
     3a8:	4798      	blx	r3
	spi_m_sync_init(&SPI_ADF, SERCOM0);
     3aa:	4904      	ldr	r1, [pc, #16]	; (3bc <SPI_ADF_init+0x18>)
     3ac:	4804      	ldr	r0, [pc, #16]	; (3c0 <SPI_ADF_init+0x1c>)
     3ae:	4b05      	ldr	r3, [pc, #20]	; (3c4 <SPI_ADF_init+0x20>)
     3b0:	4798      	blx	r3
	SPI_ADF_PORT_init();
     3b2:	4b05      	ldr	r3, [pc, #20]	; (3c8 <SPI_ADF_init+0x24>)
     3b4:	4798      	blx	r3
}
     3b6:	bd10      	pop	{r4, pc}
     3b8:	00000385 	.word	0x00000385
     3bc:	42000800 	.word	0x42000800
     3c0:	2000076c 	.word	0x2000076c
     3c4:	00000a05 	.word	0x00000a05
     3c8:	000002c9 	.word	0x000002c9

000003cc <SPI_LMX_PORT_init>:
{
     3cc:	b5f0      	push	{r4, r5, r6, r7, lr}
     3ce:	46c6      	mov	lr, r8
     3d0:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     3d2:	22c0      	movs	r2, #192	; 0xc0
     3d4:	05d2      	lsls	r2, r2, #23
     3d6:	2380      	movs	r3, #128	; 0x80
     3d8:	025b      	lsls	r3, r3, #9
     3da:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     3dc:	6093      	str	r3, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3de:	4b26      	ldr	r3, [pc, #152]	; (478 <SPI_LMX_PORT_init+0xac>)
     3e0:	2180      	movs	r1, #128	; 0x80
     3e2:	05c9      	lsls	r1, r1, #23
     3e4:	468c      	mov	ip, r1
     3e6:	6299      	str	r1, [r3, #40]	; 0x28
     3e8:	4924      	ldr	r1, [pc, #144]	; (47c <SPI_LMX_PORT_init+0xb0>)
     3ea:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3ec:	2050      	movs	r0, #80	; 0x50
     3ee:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     3f0:	2701      	movs	r7, #1
     3f2:	43b9      	bics	r1, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3f4:	2601      	movs	r6, #1
     3f6:	4331      	orrs	r1, r6
     3f8:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3fa:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3fc:	2138      	movs	r1, #56	; 0x38
     3fe:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     400:	250f      	movs	r5, #15
     402:	43a8      	bics	r0, r5
	tmp |= PORT_PMUX_PMUXE(data);
     404:	2402      	movs	r4, #2
     406:	46a0      	mov	r8, r4
     408:	4644      	mov	r4, r8
     40a:	4320      	orrs	r0, r4
     40c:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     40e:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     410:	2080      	movs	r0, #128	; 0x80
     412:	0280      	lsls	r0, r0, #10
     414:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     416:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     418:	4660      	mov	r0, ip
     41a:	6298      	str	r0, [r3, #40]	; 0x28
     41c:	4818      	ldr	r0, [pc, #96]	; (480 <SPI_LMX_PORT_init+0xb4>)
     41e:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     420:	2051      	movs	r0, #81	; 0x51
     422:	4684      	mov	ip, r0
     424:	5c18      	ldrb	r0, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     426:	43b8      	bics	r0, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     428:	4330      	orrs	r0, r6
     42a:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     42c:	4664      	mov	r4, ip
     42e:	5518      	strb	r0, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     430:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     432:	3c42      	subs	r4, #66	; 0x42
     434:	4020      	ands	r0, r4
	tmp |= PORT_PMUX_PMUXO(data);
     436:	2420      	movs	r4, #32
     438:	46a4      	mov	ip, r4
     43a:	4664      	mov	r4, ip
     43c:	4320      	orrs	r0, r4
     43e:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     440:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     442:	2180      	movs	r1, #128	; 0x80
     444:	02c9      	lsls	r1, r1, #11
     446:	6051      	str	r1, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     448:	4a0e      	ldr	r2, [pc, #56]	; (484 <SPI_LMX_PORT_init+0xb8>)
     44a:	629a      	str	r2, [r3, #40]	; 0x28
     44c:	4a0e      	ldr	r2, [pc, #56]	; (488 <SPI_LMX_PORT_init+0xbc>)
     44e:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     450:	2252      	movs	r2, #82	; 0x52
     452:	5c99      	ldrb	r1, [r3, r2]
     454:	2004      	movs	r0, #4
     456:	4381      	bics	r1, r0
     458:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     45a:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     45c:	43b9      	bics	r1, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     45e:	4331      	orrs	r1, r6
     460:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     462:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     464:	2139      	movs	r1, #57	; 0x39
     466:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     468:	43aa      	bics	r2, r5
	tmp |= PORT_PMUX_PMUXE(data);
     46a:	4640      	mov	r0, r8
     46c:	4302      	orrs	r2, r0
     46e:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     470:	545a      	strb	r2, [r3, r1]
}
     472:	bc04      	pop	{r2}
     474:	4690      	mov	r8, r2
     476:	bdf0      	pop	{r4, r5, r6, r7, pc}
     478:	41004400 	.word	0x41004400
     47c:	c0000001 	.word	0xc0000001
     480:	c0000002 	.word	0xc0000002
     484:	40020000 	.word	0x40020000
     488:	c0020004 	.word	0xc0020004

0000048c <SPI_LMX_CLOCK_init>:
     48c:	4a04      	ldr	r2, [pc, #16]	; (4a0 <SPI_LMX_CLOCK_init+0x14>)
     48e:	6a13      	ldr	r3, [r2, #32]
     490:	2108      	movs	r1, #8
     492:	430b      	orrs	r3, r1
     494:	6213      	str	r3, [r2, #32]
     496:	4a03      	ldr	r2, [pc, #12]	; (4a4 <SPI_LMX_CLOCK_init+0x18>)
     498:	4b03      	ldr	r3, [pc, #12]	; (4a8 <SPI_LMX_CLOCK_init+0x1c>)
     49a:	805a      	strh	r2, [r3, #2]
}
     49c:	4770      	bx	lr
     49e:	46c0      	nop			; (mov r8, r8)
     4a0:	40000400 	.word	0x40000400
     4a4:	00004015 	.word	0x00004015
     4a8:	40000c00 	.word	0x40000c00

000004ac <SPI_LMX_init>:
{
     4ac:	b510      	push	{r4, lr}
	SPI_LMX_CLOCK_init();
     4ae:	4b04      	ldr	r3, [pc, #16]	; (4c0 <SPI_LMX_init+0x14>)
     4b0:	4798      	blx	r3
	spi_m_sync_init(&SPI_LMX, SERCOM1);
     4b2:	4904      	ldr	r1, [pc, #16]	; (4c4 <SPI_LMX_init+0x18>)
     4b4:	4804      	ldr	r0, [pc, #16]	; (4c8 <SPI_LMX_init+0x1c>)
     4b6:	4b05      	ldr	r3, [pc, #20]	; (4cc <SPI_LMX_init+0x20>)
     4b8:	4798      	blx	r3
	SPI_LMX_PORT_init();
     4ba:	4b05      	ldr	r3, [pc, #20]	; (4d0 <SPI_LMX_init+0x24>)
     4bc:	4798      	blx	r3
}
     4be:	bd10      	pop	{r4, pc}
     4c0:	0000048d 	.word	0x0000048d
     4c4:	42000c00 	.word	0x42000c00
     4c8:	200006f8 	.word	0x200006f8
     4cc:	00000a05 	.word	0x00000a05
     4d0:	000003cd 	.word	0x000003cd

000004d4 <SPI_ZCD_PORT_init>:
{
     4d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4d6:	21c0      	movs	r1, #192	; 0xc0
     4d8:	05c9      	lsls	r1, r1, #23
     4da:	2380      	movs	r3, #128	; 0x80
     4dc:	015b      	lsls	r3, r3, #5
     4de:	614b      	str	r3, [r1, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     4e0:	608b      	str	r3, [r1, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4e2:	4b22      	ldr	r3, [pc, #136]	; (56c <SPI_ZCD_PORT_init+0x98>)
     4e4:	4a22      	ldr	r2, [pc, #136]	; (570 <SPI_ZCD_PORT_init+0x9c>)
     4e6:	629a      	str	r2, [r3, #40]	; 0x28
     4e8:	20c0      	movs	r0, #192	; 0xc0
     4ea:	0600      	lsls	r0, r0, #24
     4ec:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4ee:	264c      	movs	r6, #76	; 0x4c
     4f0:	5d9a      	ldrb	r2, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
     4f2:	2501      	movs	r5, #1
     4f4:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4f6:	2401      	movs	r4, #1
     4f8:	4322      	orrs	r2, r4
     4fa:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4fc:	559a      	strb	r2, [r3, r6]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4fe:	3e16      	subs	r6, #22
     500:	5d9a      	ldrb	r2, [r3, r6]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     502:	270f      	movs	r7, #15
     504:	43ba      	bics	r2, r7
	tmp |= PORT_PMUX_PMUXE(data);
     506:	2702      	movs	r7, #2
     508:	433a      	orrs	r2, r7
     50a:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     50c:	559a      	strb	r2, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     50e:	2280      	movs	r2, #128	; 0x80
     510:	0092      	lsls	r2, r2, #2
     512:	614a      	str	r2, [r1, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     514:	608a      	str	r2, [r1, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     516:	4a17      	ldr	r2, [pc, #92]	; (574 <SPI_ZCD_PORT_init+0xa0>)
     518:	629a      	str	r2, [r3, #40]	; 0x28
     51a:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     51c:	2049      	movs	r0, #73	; 0x49
     51e:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     520:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     522:	4322      	orrs	r2, r4
     524:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     526:	541a      	strb	r2, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     528:	2234      	movs	r2, #52	; 0x34
     52a:	5c98      	ldrb	r0, [r3, r2]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     52c:	3e27      	subs	r6, #39	; 0x27
     52e:	4030      	ands	r0, r6
	tmp |= PORT_PMUX_PMUXO(data);
     530:	2730      	movs	r7, #48	; 0x30
     532:	4338      	orrs	r0, r7
     534:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     536:	5498      	strb	r0, [r3, r2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     538:	2280      	movs	r2, #128	; 0x80
     53a:	0212      	lsls	r2, r2, #8
     53c:	604a      	str	r2, [r1, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     53e:	4a0e      	ldr	r2, [pc, #56]	; (578 <SPI_ZCD_PORT_init+0xa4>)
     540:	629a      	str	r2, [r3, #40]	; 0x28
     542:	4a0e      	ldr	r2, [pc, #56]	; (57c <SPI_ZCD_PORT_init+0xa8>)
     544:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     546:	224f      	movs	r2, #79	; 0x4f
     548:	5c99      	ldrb	r1, [r3, r2]
     54a:	2004      	movs	r0, #4
     54c:	4381      	bics	r1, r0
     54e:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     550:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     552:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     554:	4321      	orrs	r1, r4
     556:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     558:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     55a:	2137      	movs	r1, #55	; 0x37
     55c:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     55e:	4032      	ands	r2, r6
	tmp |= PORT_PMUX_PMUXO(data);
     560:	2020      	movs	r0, #32
     562:	4302      	orrs	r2, r0
     564:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     566:	545a      	strb	r2, [r3, r1]
}
     568:	bdf0      	pop	{r4, r5, r6, r7, pc}
     56a:	46c0      	nop			; (mov r8, r8)
     56c:	41004400 	.word	0x41004400
     570:	40001000 	.word	0x40001000
     574:	40000200 	.word	0x40000200
     578:	40028000 	.word	0x40028000
     57c:	c0020000 	.word	0xc0020000

00000580 <SPI_ZCD_CLOCK_init>:
     580:	4a04      	ldr	r2, [pc, #16]	; (594 <SPI_ZCD_CLOCK_init+0x14>)
     582:	6a13      	ldr	r3, [r2, #32]
     584:	2110      	movs	r1, #16
     586:	430b      	orrs	r3, r1
     588:	6213      	str	r3, [r2, #32]
     58a:	4a03      	ldr	r2, [pc, #12]	; (598 <SPI_ZCD_CLOCK_init+0x18>)
     58c:	4b03      	ldr	r3, [pc, #12]	; (59c <SPI_ZCD_CLOCK_init+0x1c>)
     58e:	805a      	strh	r2, [r3, #2]
}
     590:	4770      	bx	lr
     592:	46c0      	nop			; (mov r8, r8)
     594:	40000400 	.word	0x40000400
     598:	00004016 	.word	0x00004016
     59c:	40000c00 	.word	0x40000c00

000005a0 <SPI_ZCD_init>:
{
     5a0:	b510      	push	{r4, lr}
	SPI_ZCD_CLOCK_init();
     5a2:	4b04      	ldr	r3, [pc, #16]	; (5b4 <SPI_ZCD_init+0x14>)
     5a4:	4798      	blx	r3
	spi_m_sync_init(&SPI_ZCD, SERCOM2);
     5a6:	4904      	ldr	r1, [pc, #16]	; (5b8 <SPI_ZCD_init+0x18>)
     5a8:	4804      	ldr	r0, [pc, #16]	; (5bc <SPI_ZCD_init+0x1c>)
     5aa:	4b05      	ldr	r3, [pc, #20]	; (5c0 <SPI_ZCD_init+0x20>)
     5ac:	4798      	blx	r3
	SPI_ZCD_PORT_init();
     5ae:	4b05      	ldr	r3, [pc, #20]	; (5c4 <SPI_ZCD_init+0x24>)
     5b0:	4798      	blx	r3
}
     5b2:	bd10      	pop	{r4, pc}
     5b4:	00000581 	.word	0x00000581
     5b8:	42001000 	.word	0x42001000
     5bc:	20000784 	.word	0x20000784
     5c0:	00000a05 	.word	0x00000a05
     5c4:	000004d5 	.word	0x000004d5

000005c8 <USART_0_CLOCK_init>:
     5c8:	4a04      	ldr	r2, [pc, #16]	; (5dc <USART_0_CLOCK_init+0x14>)
     5ca:	6a13      	ldr	r3, [r2, #32]
     5cc:	2120      	movs	r1, #32
     5ce:	430b      	orrs	r3, r1
     5d0:	6213      	str	r3, [r2, #32]
     5d2:	4a03      	ldr	r2, [pc, #12]	; (5e0 <USART_0_CLOCK_init+0x18>)
     5d4:	4b03      	ldr	r3, [pc, #12]	; (5e4 <USART_0_CLOCK_init+0x1c>)
     5d6:	805a      	strh	r2, [r3, #2]
}
     5d8:	4770      	bx	lr
     5da:	46c0      	nop			; (mov r8, r8)
     5dc:	40000400 	.word	0x40000400
     5e0:	00004017 	.word	0x00004017
     5e4:	40000c00 	.word	0x40000c00

000005e8 <USART_0_PORT_init>:
{
     5e8:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5ea:	4b0f      	ldr	r3, [pc, #60]	; (628 <USART_0_PORT_init+0x40>)
     5ec:	2256      	movs	r2, #86	; 0x56
     5ee:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     5f0:	2501      	movs	r5, #1
     5f2:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5f4:	2401      	movs	r4, #1
     5f6:	4321      	orrs	r1, r4
     5f8:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5fa:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5fc:	203b      	movs	r0, #59	; 0x3b
     5fe:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     600:	3a47      	subs	r2, #71	; 0x47
     602:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     604:	2202      	movs	r2, #2
     606:	4311      	orrs	r1, r2
     608:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     60a:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     60c:	2157      	movs	r1, #87	; 0x57
     60e:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     610:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     612:	4322      	orrs	r2, r4
     614:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     616:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     618:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     61a:	3948      	subs	r1, #72	; 0x48
     61c:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     61e:	2120      	movs	r1, #32
     620:	430a      	orrs	r2, r1
     622:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     624:	541a      	strb	r2, [r3, r0]
}
     626:	bd30      	pop	{r4, r5, pc}
     628:	41004400 	.word	0x41004400

0000062c <USART_0_init>:
{
     62c:	b510      	push	{r4, lr}
     62e:	b082      	sub	sp, #8
	USART_0_CLOCK_init();
     630:	4b06      	ldr	r3, [pc, #24]	; (64c <USART_0_init+0x20>)
     632:	4798      	blx	r3
	usart_async_init(&USART_0, SERCOM3, USART_0_buffer, USART_0_BUFFER_SIZE, (void *)NULL);
     634:	2300      	movs	r3, #0
     636:	9300      	str	r3, [sp, #0]
     638:	3310      	adds	r3, #16
     63a:	4a05      	ldr	r2, [pc, #20]	; (650 <USART_0_init+0x24>)
     63c:	4905      	ldr	r1, [pc, #20]	; (654 <USART_0_init+0x28>)
     63e:	4806      	ldr	r0, [pc, #24]	; (658 <USART_0_init+0x2c>)
     640:	4c06      	ldr	r4, [pc, #24]	; (65c <USART_0_init+0x30>)
     642:	47a0      	blx	r4
	USART_0_PORT_init();
     644:	4b06      	ldr	r3, [pc, #24]	; (660 <USART_0_init+0x34>)
     646:	4798      	blx	r3
}
     648:	b002      	add	sp, #8
     64a:	bd10      	pop	{r4, pc}
     64c:	000005c9 	.word	0x000005c9
     650:	20000084 	.word	0x20000084
     654:	42001400 	.word	0x42001400
     658:	2000071c 	.word	0x2000071c
     65c:	00000d89 	.word	0x00000d89
     660:	000005e9 	.word	0x000005e9

00000664 <delay_driver_init>:
{
     664:	b510      	push	{r4, lr}
	delay_init(SysTick);
     666:	4802      	ldr	r0, [pc, #8]	; (670 <delay_driver_init+0xc>)
     668:	4b02      	ldr	r3, [pc, #8]	; (674 <delay_driver_init+0x10>)
     66a:	4798      	blx	r3
}
     66c:	bd10      	pop	{r4, pc}
     66e:	46c0      	nop			; (mov r8, r8)
     670:	e000e010 	.word	0xe000e010
     674:	00000979 	.word	0x00000979

00000678 <DAC_0_PORT_init>:

void DAC_0_PORT_init(void)
{
     678:	b510      	push	{r4, lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     67a:	2204      	movs	r2, #4
     67c:	23c0      	movs	r3, #192	; 0xc0
     67e:	05db      	lsls	r3, r3, #23
     680:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     682:	490a      	ldr	r1, [pc, #40]	; (6ac <DAC_0_PORT_init+0x34>)
     684:	4b0a      	ldr	r3, [pc, #40]	; (6b0 <DAC_0_PORT_init+0x38>)
     686:	628b      	str	r3, [r1, #40]	; 0x28
     688:	23c0      	movs	r3, #192	; 0xc0
     68a:	061b      	lsls	r3, r3, #24
     68c:	628b      	str	r3, [r1, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     68e:	2342      	movs	r3, #66	; 0x42
     690:	5cca      	ldrb	r2, [r1, r3]
	tmp &= ~PORT_PINCFG_PMUXEN;
     692:	2001      	movs	r0, #1
     694:	4382      	bics	r2, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     696:	4302      	orrs	r2, r0
     698:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     69a:	54ca      	strb	r2, [r1, r3]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     69c:	2231      	movs	r2, #49	; 0x31
     69e:	5c8b      	ldrb	r3, [r1, r2]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     6a0:	240f      	movs	r4, #15
     6a2:	43a3      	bics	r3, r4
	tmp |= PORT_PMUX_PMUXE(data);
     6a4:	4303      	orrs	r3, r0
     6a6:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6a8:	548b      	strb	r3, [r1, r2]

	// Disable digital pin circuitry
	gpio_set_pin_direction(PA02, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PA02, PINMUX_PA02B_DAC_VOUT);
}
     6aa:	bd10      	pop	{r4, pc}
     6ac:	41004400 	.word	0x41004400
     6b0:	40000004 	.word	0x40000004

000006b4 <DAC_0_CLOCK_init>:
     6b4:	4a04      	ldr	r2, [pc, #16]	; (6c8 <DAC_0_CLOCK_init+0x14>)
     6b6:	6a11      	ldr	r1, [r2, #32]
     6b8:	2380      	movs	r3, #128	; 0x80
     6ba:	02db      	lsls	r3, r3, #11
     6bc:	430b      	orrs	r3, r1
     6be:	6213      	str	r3, [r2, #32]
     6c0:	4a02      	ldr	r2, [pc, #8]	; (6cc <DAC_0_CLOCK_init+0x18>)
     6c2:	4b03      	ldr	r3, [pc, #12]	; (6d0 <DAC_0_CLOCK_init+0x1c>)
     6c4:	805a      	strh	r2, [r3, #2]
void DAC_0_CLOCK_init(void)
{

	_pm_enable_bus_clock(PM_BUS_APBC, DAC);
	_gclk_enable_channel(DAC_GCLK_ID, CONF_GCLK_DAC_SRC);
}
     6c6:	4770      	bx	lr
     6c8:	40000400 	.word	0x40000400
     6cc:	00004021 	.word	0x00004021
     6d0:	40000c00 	.word	0x40000c00

000006d4 <DAC_0_init>:

void DAC_0_init(void)
{
     6d4:	b510      	push	{r4, lr}
	DAC_0_CLOCK_init();
     6d6:	4b04      	ldr	r3, [pc, #16]	; (6e8 <DAC_0_init+0x14>)
     6d8:	4798      	blx	r3
	dac_sync_init(&DAC_0, DAC);
     6da:	4904      	ldr	r1, [pc, #16]	; (6ec <DAC_0_init+0x18>)
     6dc:	4804      	ldr	r0, [pc, #16]	; (6f0 <DAC_0_init+0x1c>)
     6de:	4b05      	ldr	r3, [pc, #20]	; (6f4 <DAC_0_init+0x20>)
     6e0:	4798      	blx	r3
	DAC_0_PORT_init();
     6e2:	4b05      	ldr	r3, [pc, #20]	; (6f8 <DAC_0_init+0x24>)
     6e4:	4798      	blx	r3
}
     6e6:	bd10      	pop	{r4, pc}
     6e8:	000006b5 	.word	0x000006b5
     6ec:	42004800 	.word	0x42004800
     6f0:	20000710 	.word	0x20000710
     6f4:	00000929 	.word	0x00000929
     6f8:	00000679 	.word	0x00000679

000006fc <USB_DEVICE_INSTANCE_PORT_init>:

void USB_DEVICE_INSTANCE_PORT_init(void)
{
     6fc:	b5f0      	push	{r4, r5, r6, r7, lr}
     6fe:	46c6      	mov	lr, r8
     700:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     702:	24c0      	movs	r4, #192	; 0xc0
     704:	05e4      	lsls	r4, r4, #23
     706:	2280      	movs	r2, #128	; 0x80
     708:	0452      	lsls	r2, r2, #17
     70a:	60a2      	str	r2, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     70c:	4b1c      	ldr	r3, [pc, #112]	; (780 <USB_DEVICE_INSTANCE_PORT_init+0x84>)
     70e:	2780      	movs	r7, #128	; 0x80
     710:	05ff      	lsls	r7, r7, #23
     712:	629f      	str	r7, [r3, #40]	; 0x28
     714:	491b      	ldr	r1, [pc, #108]	; (784 <USB_DEVICE_INSTANCE_PORT_init+0x88>)
     716:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     718:	6162      	str	r2, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     71a:	2058      	movs	r0, #88	; 0x58
     71c:	5c19      	ldrb	r1, [r3, r0]
     71e:	2204      	movs	r2, #4
     720:	4690      	mov	r8, r2
     722:	4391      	bics	r1, r2
     724:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     726:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     728:	2601      	movs	r6, #1
     72a:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     72c:	2501      	movs	r5, #1
     72e:	4329      	orrs	r1, r5
     730:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     732:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     734:	381c      	subs	r0, #28
     736:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     738:	320b      	adds	r2, #11
     73a:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     73c:	2206      	movs	r2, #6
     73e:	4694      	mov	ip, r2
     740:	4662      	mov	r2, ip
     742:	4311      	orrs	r1, r2
     744:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     746:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     748:	2180      	movs	r1, #128	; 0x80
     74a:	0489      	lsls	r1, r1, #18
     74c:	60a1      	str	r1, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     74e:	629f      	str	r7, [r3, #40]	; 0x28
     750:	4f0d      	ldr	r7, [pc, #52]	; (788 <USB_DEVICE_INSTANCE_PORT_init+0x8c>)
     752:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     754:	6161      	str	r1, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     756:	2159      	movs	r1, #89	; 0x59
     758:	5c5c      	ldrb	r4, [r3, r1]
     75a:	4642      	mov	r2, r8
     75c:	4394      	bics	r4, r2
     75e:	545c      	strb	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     760:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     762:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     764:	432a      	orrs	r2, r5
     766:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     768:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     76a:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     76c:	394a      	subs	r1, #74	; 0x4a
     76e:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     770:	2160      	movs	r1, #96	; 0x60
     772:	430a      	orrs	r2, r1
     774:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     776:	541a      	strb	r2, [r3, r0]
	                      // <GPIO_PIN_FUNCTION_E"> E
	                      // <GPIO_PIN_FUNCTION_F"> F
	                      // <GPIO_PIN_FUNCTION_G"> G
	                      // <GPIO_PIN_FUNCTION_H"> H
	                      PINMUX_PA25G_USB_DP);
}
     778:	bc04      	pop	{r2}
     77a:	4690      	mov	r8, r2
     77c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     77e:	46c0      	nop			; (mov r8, r8)
     780:	41004400 	.word	0x41004400
     784:	c0000100 	.word	0xc0000100
     788:	c0000200 	.word	0xc0000200

0000078c <USB_DEVICE_INSTANCE_CLOCK_init>:
			PM->APBBMASK.reg |= 1 << peripheral;
     78c:	4b06      	ldr	r3, [pc, #24]	; (7a8 <USB_DEVICE_INSTANCE_CLOCK_init+0x1c>)
     78e:	69da      	ldr	r2, [r3, #28]
     790:	2120      	movs	r1, #32
     792:	430a      	orrs	r2, r1
     794:	61da      	str	r2, [r3, #28]
			PM->AHBMASK.reg |= 1 << peripheral;
     796:	695a      	ldr	r2, [r3, #20]
     798:	3120      	adds	r1, #32
     79a:	430a      	orrs	r2, r1
     79c:	615a      	str	r2, [r3, #20]
     79e:	4a03      	ldr	r2, [pc, #12]	; (7ac <USB_DEVICE_INSTANCE_CLOCK_init+0x20>)
     7a0:	4b03      	ldr	r3, [pc, #12]	; (7b0 <USB_DEVICE_INSTANCE_CLOCK_init+0x24>)
     7a2:	805a      	strh	r2, [r3, #2]
{

	_pm_enable_bus_clock(PM_BUS_APBB, USB);
	_pm_enable_bus_clock(PM_BUS_AHB, USB);
	_gclk_enable_channel(USB_GCLK_ID, CONF_GCLK_USB_SRC);
}
     7a4:	4770      	bx	lr
     7a6:	46c0      	nop			; (mov r8, r8)
     7a8:	40000400 	.word	0x40000400
     7ac:	00004406 	.word	0x00004406
     7b0:	40000c00 	.word	0x40000c00

000007b4 <USB_DEVICE_INSTANCE_init>:

void USB_DEVICE_INSTANCE_init(void)
{
     7b4:	b510      	push	{r4, lr}
	USB_DEVICE_INSTANCE_CLOCK_init();
     7b6:	4b03      	ldr	r3, [pc, #12]	; (7c4 <USB_DEVICE_INSTANCE_init+0x10>)
     7b8:	4798      	blx	r3
	usb_d_init();
     7ba:	4b03      	ldr	r3, [pc, #12]	; (7c8 <USB_DEVICE_INSTANCE_init+0x14>)
     7bc:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
     7be:	4b03      	ldr	r3, [pc, #12]	; (7cc <USB_DEVICE_INSTANCE_init+0x18>)
     7c0:	4798      	blx	r3
}
     7c2:	bd10      	pop	{r4, pc}
     7c4:	0000078d 	.word	0x0000078d
     7c8:	00001071 	.word	0x00001071
     7cc:	000006fd 	.word	0x000006fd

000007d0 <system_init>:

void system_init(void)
{
     7d0:	b5f0      	push	{r4, r5, r6, r7, lr}
     7d2:	46d6      	mov	lr, sl
     7d4:	464f      	mov	r7, r9
     7d6:	4646      	mov	r6, r8
     7d8:	b5c0      	push	{r6, r7, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     7da:	4b3a      	ldr	r3, [pc, #232]	; (8c4 <system_init+0xf4>)
     7dc:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     7de:	22c0      	movs	r2, #192	; 0xc0
     7e0:	05d2      	lsls	r2, r2, #23
     7e2:	2308      	movs	r3, #8
     7e4:	6193      	str	r3, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     7e6:	6093      	str	r3, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7e8:	4b37      	ldr	r3, [pc, #220]	; (8c8 <system_init+0xf8>)
     7ea:	4938      	ldr	r1, [pc, #224]	; (8cc <system_init+0xfc>)
     7ec:	6299      	str	r1, [r3, #40]	; 0x28
     7ee:	25c0      	movs	r5, #192	; 0xc0
     7f0:	062d      	lsls	r5, r5, #24
     7f2:	629d      	str	r5, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7f4:	2443      	movs	r4, #67	; 0x43
     7f6:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     7f8:	2101      	movs	r1, #1
     7fa:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7fc:	5518      	strb	r0, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     7fe:	2080      	movs	r0, #128	; 0x80
     800:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     802:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     804:	4832      	ldr	r0, [pc, #200]	; (8d0 <system_init+0x100>)
     806:	6298      	str	r0, [r3, #40]	; 0x28
     808:	629d      	str	r5, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     80a:	3404      	adds	r4, #4
     80c:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     80e:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     810:	5518      	strb	r0, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     812:	2080      	movs	r0, #128	; 0x80
     814:	0300      	lsls	r0, r0, #12
     816:	6190      	str	r0, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     818:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     81a:	2080      	movs	r0, #128	; 0x80
     81c:	05c0      	lsls	r0, r0, #23
     81e:	6298      	str	r0, [r3, #40]	; 0x28
     820:	4c2c      	ldr	r4, [pc, #176]	; (8d4 <system_init+0x104>)
     822:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     824:	2653      	movs	r6, #83	; 0x53
     826:	5d9c      	ldrb	r4, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
     828:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     82a:	559c      	strb	r4, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     82c:	6190      	str	r0, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     82e:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     830:	6298      	str	r0, [r3, #40]	; 0x28
     832:	4c29      	ldr	r4, [pc, #164]	; (8d8 <system_init+0x108>)
     834:	46a4      	mov	ip, r4
     836:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     838:	360b      	adds	r6, #11
     83a:	5d9c      	ldrb	r4, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
     83c:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     83e:	559c      	strb	r4, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     840:	2494      	movs	r4, #148	; 0x94
     842:	5111      	str	r1, [r2, r4]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     844:	3c0c      	subs	r4, #12
     846:	46a1      	mov	r9, r4
     848:	5111      	str	r1, [r2, r4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     84a:	3420      	adds	r4, #32
     84c:	4f23      	ldr	r7, [pc, #140]	; (8dc <system_init+0x10c>)
     84e:	511f      	str	r7, [r3, r4]
     850:	511d      	str	r5, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     852:	27c0      	movs	r7, #192	; 0xc0
     854:	46b8      	mov	r8, r7
     856:	5ddf      	ldrb	r7, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     858:	438f      	bics	r7, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     85a:	4646      	mov	r6, r8
     85c:	559f      	strb	r7, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     85e:	3e28      	subs	r6, #40	; 0x28
     860:	46b2      	mov	sl, r6
     862:	3e96      	subs	r6, #150	; 0x96
     864:	4657      	mov	r7, sl
     866:	51d6      	str	r6, [r2, r7]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     868:	464f      	mov	r7, r9
     86a:	51d6      	str	r6, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     86c:	4e1c      	ldr	r6, [pc, #112]	; (8e0 <system_init+0x110>)
     86e:	511e      	str	r6, [r3, r4]
     870:	511d      	str	r5, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     872:	25c1      	movs	r5, #193	; 0xc1
     874:	46a8      	mov	r8, r5
     876:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     878:	438d      	bics	r5, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     87a:	4646      	mov	r6, r8
     87c:	559d      	strb	r5, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     87e:	4655      	mov	r5, sl
     880:	5150      	str	r0, [r2, r5]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     882:	51d0      	str	r0, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     884:	5118      	str	r0, [r3, r4]
     886:	4662      	mov	r2, ip
     888:	511a      	str	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     88a:	20de      	movs	r0, #222	; 0xde
     88c:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     88e:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     890:	541a      	strb	r2, [r3, r0]
	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);

	EXTERNAL_IRQ_0_init();
     892:	4b14      	ldr	r3, [pc, #80]	; (8e4 <system_init+0x114>)
     894:	4798      	blx	r3

	SPI_ADF_init();
     896:	4b14      	ldr	r3, [pc, #80]	; (8e8 <system_init+0x118>)
     898:	4798      	blx	r3

	SPI_LMX_init();
     89a:	4b14      	ldr	r3, [pc, #80]	; (8ec <system_init+0x11c>)
     89c:	4798      	blx	r3

	SPI_ZCD_init();
     89e:	4b14      	ldr	r3, [pc, #80]	; (8f0 <system_init+0x120>)
     8a0:	4798      	blx	r3
	USART_0_init();
     8a2:	4b14      	ldr	r3, [pc, #80]	; (8f4 <system_init+0x124>)
     8a4:	4798      	blx	r3

	delay_driver_init();
     8a6:	4b14      	ldr	r3, [pc, #80]	; (8f8 <system_init+0x128>)
     8a8:	4798      	blx	r3

	TIMER_ZCD_init();
     8aa:	4b14      	ldr	r3, [pc, #80]	; (8fc <system_init+0x12c>)
     8ac:	4798      	blx	r3
	TIMER_USB_init();
     8ae:	4b14      	ldr	r3, [pc, #80]	; (900 <system_init+0x130>)
     8b0:	4798      	blx	r3
	DAC_0_init();
     8b2:	4b14      	ldr	r3, [pc, #80]	; (904 <system_init+0x134>)
     8b4:	4798      	blx	r3

	USB_DEVICE_INSTANCE_init();
     8b6:	4b14      	ldr	r3, [pc, #80]	; (908 <system_init+0x138>)
     8b8:	4798      	blx	r3
}
     8ba:	bc1c      	pop	{r2, r3, r4}
     8bc:	4690      	mov	r8, r2
     8be:	4699      	mov	r9, r3
     8c0:	46a2      	mov	sl, r4
     8c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     8c4:	00001571 	.word	0x00001571
     8c8:	41004400 	.word	0x41004400
     8cc:	40000008 	.word	0x40000008
     8d0:	40000080 	.word	0x40000080
     8d4:	c0000008 	.word	0xc0000008
     8d8:	c0004000 	.word	0xc0004000
     8dc:	40000001 	.word	0x40000001
     8e0:	40000002 	.word	0x40000002
     8e4:	00000271 	.word	0x00000271
     8e8:	000003a5 	.word	0x000003a5
     8ec:	000004ad 	.word	0x000004ad
     8f0:	000005a1 	.word	0x000005a1
     8f4:	0000062d 	.word	0x0000062d
     8f8:	00000665 	.word	0x00000665
     8fc:	000001f1 	.word	0x000001f1
     900:	00000231 	.word	0x00000231
     904:	000006d5 	.word	0x000006d5
     908:	000007b5 	.word	0x000007b5

0000090c <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     90c:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     910:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     912:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     914:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     918:	4770      	bx	lr

0000091a <atomic_leave_critical>:
     91a:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     91e:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     920:	f383 8810 	msr	PRIMASK, r3
}
     924:	4770      	bx	lr
	...

00000928 <dac_sync_init>:

/**
 * \brief Initialize the DAC HAL instance and hardware.
 */
int32_t dac_sync_init(struct dac_sync_descriptor *const descr, void *const hw)
{
     928:	b570      	push	{r4, r5, r6, lr}
     92a:	0004      	movs	r4, r0
     92c:	000d      	movs	r5, r1
	uint8_t i;
	int32_t rc;

	ASSERT(descr && hw);
     92e:	2800      	cmp	r0, #0
     930:	d010      	beq.n	954 <dac_sync_init+0x2c>
     932:	2900      	cmp	r1, #0
     934:	d00c      	beq.n	950 <dac_sync_init+0x28>
     936:	2001      	movs	r0, #1
     938:	2232      	movs	r2, #50	; 0x32
     93a:	490c      	ldr	r1, [pc, #48]	; (96c <dac_sync_init+0x44>)
     93c:	4b0c      	ldr	r3, [pc, #48]	; (970 <dac_sync_init+0x48>)
     93e:	4798      	blx	r3

	rc = _dac_sync_init(&descr->device, hw);
     940:	0029      	movs	r1, r5
     942:	0020      	movs	r0, r4
     944:	4b0b      	ldr	r3, [pc, #44]	; (974 <dac_sync_init+0x4c>)
     946:	4798      	blx	r3
	if (rc) {
     948:	2800      	cmp	r0, #0
     94a:	d10e      	bne.n	96a <dac_sync_init+0x42>
     94c:	2300      	movs	r3, #0
     94e:	e00a      	b.n	966 <dac_sync_init+0x3e>
	ASSERT(descr && hw);
     950:	2000      	movs	r0, #0
     952:	e7f1      	b.n	938 <dac_sync_init+0x10>
     954:	2000      	movs	r0, #0
     956:	e7ef      	b.n	938 <dac_sync_init+0x10>
		return rc;
	}

	for (i = 0; i < CHANNEL_NUM; i++) {
		descr->sel_ch[i].buffer = NULL;
     958:	00da      	lsls	r2, r3, #3
     95a:	18a2      	adds	r2, r4, r2
     95c:	2100      	movs	r1, #0
     95e:	6051      	str	r1, [r2, #4]
		descr->sel_ch[i].length = 0;
     960:	6091      	str	r1, [r2, #8]
	for (i = 0; i < CHANNEL_NUM; i++) {
     962:	3301      	adds	r3, #1
     964:	b2db      	uxtb	r3, r3
     966:	2b00      	cmp	r3, #0
     968:	d0f6      	beq.n	958 <dac_sync_init+0x30>
	}

	return ERR_NONE;
}
     96a:	bd70      	pop	{r4, r5, r6, pc}
     96c:	000040e0 	.word	0x000040e0
     970:	000013cd 	.word	0x000013cd
     974:	000015e5 	.word	0x000015e5

00000978 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     978:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
     97a:	4b02      	ldr	r3, [pc, #8]	; (984 <delay_init+0xc>)
     97c:	6018      	str	r0, [r3, #0]
     97e:	4b02      	ldr	r3, [pc, #8]	; (988 <delay_init+0x10>)
     980:	4798      	blx	r3
}
     982:	bd10      	pop	{r4, pc}
     984:	20000094 	.word	0x20000094
     988:	00001ef1 	.word	0x00001ef1

0000098c <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
     98c:	b570      	push	{r4, r5, r6, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
     98e:	2501      	movs	r5, #1
     990:	2400      	movs	r4, #0

	while (upper >= lower) {
     992:	e007      	b.n	9a4 <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
     994:	4a0d      	ldr	r2, [pc, #52]	; (9cc <process_ext_irq+0x40>)
     996:	58b3      	ldr	r3, [r6, r2]
     998:	2b00      	cmp	r3, #0
     99a:	d000      	beq.n	99e <process_ext_irq+0x12>
				ext_irqs[middle].cb();
     99c:	4798      	blx	r3
			lower = middle + 1;
		} else {
			upper = middle - 1;
		}
	}
}
     99e:	bd70      	pop	{r4, r5, r6, pc}
			upper = middle - 1;
     9a0:	3a01      	subs	r2, #1
     9a2:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
     9a4:	42ac      	cmp	r4, r5
     9a6:	d8fa      	bhi.n	99e <process_ext_irq+0x12>
		middle = (upper + lower) >> 1;
     9a8:	192b      	adds	r3, r5, r4
     9aa:	105b      	asrs	r3, r3, #1
     9ac:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
     9ae:	2a00      	cmp	r2, #0
     9b0:	d1f5      	bne.n	99e <process_ext_irq+0x12>
     9b2:	21ff      	movs	r1, #255	; 0xff
     9b4:	400b      	ands	r3, r1
		if (ext_irqs[middle].pin == pin) {
     9b6:	00de      	lsls	r6, r3, #3
     9b8:	4904      	ldr	r1, [pc, #16]	; (9cc <process_ext_irq+0x40>)
     9ba:	1989      	adds	r1, r1, r6
     9bc:	6849      	ldr	r1, [r1, #4]
     9be:	4281      	cmp	r1, r0
     9c0:	d0e8      	beq.n	994 <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
     9c2:	d2ed      	bcs.n	9a0 <process_ext_irq+0x14>
			lower = middle + 1;
     9c4:	3201      	adds	r2, #1
     9c6:	b2d4      	uxtb	r4, r2
     9c8:	e7ec      	b.n	9a4 <process_ext_irq+0x18>
     9ca:	46c0      	nop			; (mov r8, r8)
     9cc:	20000098 	.word	0x20000098

000009d0 <ext_irq_init>:
{
     9d0:	b510      	push	{r4, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     9d2:	2300      	movs	r3, #0
     9d4:	2b00      	cmp	r3, #0
     9d6:	d003      	beq.n	9e0 <ext_irq_init+0x10>
	return _ext_irq_init(process_ext_irq);
     9d8:	4807      	ldr	r0, [pc, #28]	; (9f8 <ext_irq_init+0x28>)
     9da:	4b08      	ldr	r3, [pc, #32]	; (9fc <ext_irq_init+0x2c>)
     9dc:	4798      	blx	r3
}
     9de:	bd10      	pop	{r4, pc}
		ext_irqs[i].pin = 0xFFFFFFFF;
     9e0:	4a07      	ldr	r2, [pc, #28]	; (a00 <ext_irq_init+0x30>)
     9e2:	00d9      	lsls	r1, r3, #3
     9e4:	1850      	adds	r0, r2, r1
     9e6:	2401      	movs	r4, #1
     9e8:	4264      	negs	r4, r4
     9ea:	6044      	str	r4, [r0, #4]
		ext_irqs[i].cb  = NULL;
     9ec:	2000      	movs	r0, #0
     9ee:	5088      	str	r0, [r1, r2]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     9f0:	3301      	adds	r3, #1
     9f2:	b29b      	uxth	r3, r3
     9f4:	e7ee      	b.n	9d4 <ext_irq_init+0x4>
     9f6:	46c0      	nop			; (mov r8, r8)
     9f8:	0000098d 	.word	0x0000098d
     9fc:	00001611 	.word	0x00001611
     a00:	20000098 	.word	0x20000098

00000a04 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
     a04:	b570      	push	{r4, r5, r6, lr}
     a06:	0004      	movs	r4, r0
     a08:	000d      	movs	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
     a0a:	2800      	cmp	r0, #0
     a0c:	d017      	beq.n	a3e <spi_m_sync_init+0x3a>
     a0e:	2900      	cmp	r1, #0
     a10:	d013      	beq.n	a3a <spi_m_sync_init+0x36>
     a12:	2001      	movs	r0, #1
     a14:	2240      	movs	r2, #64	; 0x40
     a16:	490b      	ldr	r1, [pc, #44]	; (a44 <spi_m_sync_init+0x40>)
     a18:	4b0b      	ldr	r3, [pc, #44]	; (a48 <spi_m_sync_init+0x44>)
     a1a:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
     a1c:	6065      	str	r5, [r4, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
     a1e:	1d20      	adds	r0, r4, #4
     a20:	0029      	movs	r1, r5
     a22:	4b0a      	ldr	r3, [pc, #40]	; (a4c <spi_m_sync_init+0x48>)
     a24:	4798      	blx	r3

	if (rc < 0) {
     a26:	2800      	cmp	r0, #0
     a28:	db06      	blt.n	a38 <spi_m_sync_init+0x34>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
     a2a:	4b09      	ldr	r3, [pc, #36]	; (a50 <spi_m_sync_init+0x4c>)
     a2c:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
     a2e:	4b09      	ldr	r3, [pc, #36]	; (a54 <spi_m_sync_init+0x50>)
     a30:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
     a32:	4b09      	ldr	r3, [pc, #36]	; (a58 <spi_m_sync_init+0x54>)
     a34:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
     a36:	2000      	movs	r0, #0
}
     a38:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(spi && hw);
     a3a:	2000      	movs	r0, #0
     a3c:	e7ea      	b.n	a14 <spi_m_sync_init+0x10>
     a3e:	2000      	movs	r0, #0
     a40:	e7e8      	b.n	a14 <spi_m_sync_init+0x10>
     a42:	46c0      	nop			; (mov r8, r8)
     a44:	000040fc 	.word	0x000040fc
     a48:	000013cd 	.word	0x000013cd
     a4c:	00001ad5 	.word	0x00001ad5
     a50:	ffff8000 	.word	0xffff8000
     a54:	00000ae1 	.word	0x00000ae1
     a58:	00000aa5 	.word	0x00000aa5

00000a5c <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
     a5c:	b530      	push	{r4, r5, lr}
     a5e:	b087      	sub	sp, #28
     a60:	0004      	movs	r4, r0
     a62:	000d      	movs	r5, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
     a64:	2800      	cmp	r0, #0
     a66:	d015      	beq.n	a94 <spi_m_sync_transfer+0x38>
     a68:	2900      	cmp	r1, #0
     a6a:	d011      	beq.n	a90 <spi_m_sync_transfer+0x34>
     a6c:	2001      	movs	r0, #1
     a6e:	22b3      	movs	r2, #179	; 0xb3
     a70:	4909      	ldr	r1, [pc, #36]	; (a98 <spi_m_sync_transfer+0x3c>)
     a72:	4b0a      	ldr	r3, [pc, #40]	; (a9c <spi_m_sync_transfer+0x40>)
     a74:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
     a76:	682b      	ldr	r3, [r5, #0]
     a78:	9303      	str	r3, [sp, #12]
	msg.rxbuf = p_xfer->rxbuf;
     a7a:	686b      	ldr	r3, [r5, #4]
     a7c:	9304      	str	r3, [sp, #16]
	msg.size  = p_xfer->size;
     a7e:	68ab      	ldr	r3, [r5, #8]
     a80:	9301      	str	r3, [sp, #4]
     a82:	9305      	str	r3, [sp, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
     a84:	1d20      	adds	r0, r4, #4
     a86:	a903      	add	r1, sp, #12
     a88:	4b05      	ldr	r3, [pc, #20]	; (aa0 <spi_m_sync_transfer+0x44>)
     a8a:	4798      	blx	r3
}
     a8c:	b007      	add	sp, #28
     a8e:	bd30      	pop	{r4, r5, pc}
	ASSERT(spi && p_xfer);
     a90:	2000      	movs	r0, #0
     a92:	e7ec      	b.n	a6e <spi_m_sync_transfer+0x12>
     a94:	2000      	movs	r0, #0
     a96:	e7ea      	b.n	a6e <spi_m_sync_transfer+0x12>
     a98:	000040fc 	.word	0x000040fc
     a9c:	000013cd 	.word	0x000013cd
     aa0:	00001cd9 	.word	0x00001cd9

00000aa4 <_spi_m_sync_io_write>:
{
     aa4:	b570      	push	{r4, r5, r6, lr}
     aa6:	b084      	sub	sp, #16
     aa8:	0004      	movs	r4, r0
     aaa:	000e      	movs	r6, r1
     aac:	0015      	movs	r5, r2
	ASSERT(io);
     aae:	1e43      	subs	r3, r0, #1
     ab0:	4198      	sbcs	r0, r3
     ab2:	b2c0      	uxtb	r0, r0
     ab4:	22a3      	movs	r2, #163	; 0xa3
     ab6:	4907      	ldr	r1, [pc, #28]	; (ad4 <_spi_m_sync_io_write+0x30>)
     ab8:	4b07      	ldr	r3, [pc, #28]	; (ad8 <_spi_m_sync_io_write+0x34>)
     aba:	4798      	blx	r3
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
     abc:	0020      	movs	r0, r4
     abe:	380c      	subs	r0, #12
	xfer.rxbuf = 0;
     ac0:	2300      	movs	r3, #0
     ac2:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
     ac4:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
     ac6:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
     ac8:	a901      	add	r1, sp, #4
     aca:	4b04      	ldr	r3, [pc, #16]	; (adc <_spi_m_sync_io_write+0x38>)
     acc:	4798      	blx	r3
}
     ace:	b004      	add	sp, #16
     ad0:	bd70      	pop	{r4, r5, r6, pc}
     ad2:	46c0      	nop			; (mov r8, r8)
     ad4:	000040fc 	.word	0x000040fc
     ad8:	000013cd 	.word	0x000013cd
     adc:	00000a5d 	.word	0x00000a5d

00000ae0 <_spi_m_sync_io_read>:
{
     ae0:	b570      	push	{r4, r5, r6, lr}
     ae2:	b084      	sub	sp, #16
     ae4:	0004      	movs	r4, r0
     ae6:	000e      	movs	r6, r1
     ae8:	0015      	movs	r5, r2
	ASSERT(io);
     aea:	1e43      	subs	r3, r0, #1
     aec:	4198      	sbcs	r0, r3
     aee:	b2c0      	uxtb	r0, r0
     af0:	2287      	movs	r2, #135	; 0x87
     af2:	4907      	ldr	r1, [pc, #28]	; (b10 <_spi_m_sync_io_read+0x30>)
     af4:	4b07      	ldr	r3, [pc, #28]	; (b14 <_spi_m_sync_io_read+0x34>)
     af6:	4798      	blx	r3
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
     af8:	0020      	movs	r0, r4
     afa:	380c      	subs	r0, #12
	xfer.rxbuf = buf;
     afc:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
     afe:	2300      	movs	r3, #0
     b00:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
     b02:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
     b04:	a901      	add	r1, sp, #4
     b06:	4b04      	ldr	r3, [pc, #16]	; (b18 <_spi_m_sync_io_read+0x38>)
     b08:	4798      	blx	r3
}
     b0a:	b004      	add	sp, #16
     b0c:	bd70      	pop	{r4, r5, r6, pc}
     b0e:	46c0      	nop			; (mov r8, r8)
     b10:	000040fc 	.word	0x000040fc
     b14:	000013cd 	.word	0x000013cd
     b18:	00000a5d 	.word	0x00000a5d

00000b1c <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     b1e:	6806      	ldr	r6, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
     b20:	2e00      	cmp	r6, #0
     b22:	d002      	beq.n	b2a <timer_add_timer_task+0xe>
     b24:	0033      	movs	r3, r6
     b26:	2500      	movs	r5, #0
     b28:	e00c      	b.n	b44 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
     b2a:	4b10      	ldr	r3, [pc, #64]	; (b6c <timer_add_timer_task+0x50>)
     b2c:	4798      	blx	r3
		return;
     b2e:	e018      	b.n	b62 <timer_add_timer_task+0x46>
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     b30:	689f      	ldr	r7, [r3, #8]
     b32:	46bc      	mov	ip, r7
     b34:	4464      	add	r4, ip
     b36:	1aa4      	subs	r4, r4, r2
     b38:	3401      	adds	r4, #1
		}
		if (time_left >= new_task->interval)
     b3a:	688f      	ldr	r7, [r1, #8]
     b3c:	42bc      	cmp	r4, r7
     b3e:	d20b      	bcs.n	b58 <timer_add_timer_task+0x3c>
			break;
		prev = it;
     b40:	001d      	movs	r5, r3
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     b42:	681b      	ldr	r3, [r3, #0]
     b44:	2b00      	cmp	r3, #0
     b46:	d007      	beq.n	b58 <timer_add_timer_task+0x3c>
		if (it->time_label <= time) {
     b48:	685c      	ldr	r4, [r3, #4]
     b4a:	4294      	cmp	r4, r2
     b4c:	d8f0      	bhi.n	b30 <timer_add_timer_task+0x14>
			time_left = it->interval - (time - it->time_label);
     b4e:	1aa4      	subs	r4, r4, r2
     b50:	689f      	ldr	r7, [r3, #8]
     b52:	46bc      	mov	ip, r7
     b54:	4464      	add	r4, ip
     b56:	e7f0      	b.n	b3a <timer_add_timer_task+0x1e>
	}

	if (it == head) {
     b58:	42b3      	cmp	r3, r6
     b5a:	d003      	beq.n	b64 <timer_add_timer_task+0x48>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
     b5c:	0028      	movs	r0, r5
     b5e:	4b04      	ldr	r3, [pc, #16]	; (b70 <timer_add_timer_task+0x54>)
     b60:	4798      	blx	r3
	}
}
     b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
     b64:	4b01      	ldr	r3, [pc, #4]	; (b6c <timer_add_timer_task+0x50>)
     b66:	4798      	blx	r3
     b68:	e7fb      	b.n	b62 <timer_add_timer_task+0x46>
     b6a:	46c0      	nop			; (mov r8, r8)
     b6c:	000013ed 	.word	0x000013ed
     b70:	00001419 	.word	0x00001419

00000b74 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     b76:	0005      	movs	r5, r0
     b78:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
     b7a:	6903      	ldr	r3, [r0, #16]
     b7c:	1c5e      	adds	r6, r3, #1
     b7e:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     b80:	7e03      	ldrb	r3, [r0, #24]
     b82:	07db      	lsls	r3, r3, #31
     b84:	d402      	bmi.n	b8c <timer_process_counted+0x18>
     b86:	7e03      	ldrb	r3, [r0, #24]
     b88:	079b      	lsls	r3, r3, #30
     b8a:	d50a      	bpl.n	ba2 <timer_process_counted+0x2e>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     b8c:	7e2b      	ldrb	r3, [r5, #24]
     b8e:	2202      	movs	r2, #2
     b90:	4313      	orrs	r3, r2
     b92:	b2db      	uxtb	r3, r3
     b94:	762b      	strb	r3, [r5, #24]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
	}
}
     b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     b98:	696f      	ldr	r7, [r5, #20]
		tmp->cb(tmp);
     b9a:	68e3      	ldr	r3, [r4, #12]
     b9c:	0020      	movs	r0, r4
     b9e:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
     ba0:	003c      	movs	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
     ba2:	2c00      	cmp	r4, #0
     ba4:	d0f7      	beq.n	b96 <timer_process_counted+0x22>
     ba6:	6863      	ldr	r3, [r4, #4]
     ba8:	1af3      	subs	r3, r6, r3
     baa:	68a2      	ldr	r2, [r4, #8]
     bac:	4293      	cmp	r3, r2
     bae:	d3f2      	bcc.n	b96 <timer_process_counted+0x22>
		list_remove_head(&timer->tasks);
     bb0:	002f      	movs	r7, r5
     bb2:	3714      	adds	r7, #20
     bb4:	0038      	movs	r0, r7
     bb6:	4b06      	ldr	r3, [pc, #24]	; (bd0 <timer_process_counted+0x5c>)
     bb8:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
     bba:	7c23      	ldrb	r3, [r4, #16]
     bbc:	2b01      	cmp	r3, #1
     bbe:	d1eb      	bne.n	b98 <timer_process_counted+0x24>
			tmp->time_label = time;
     bc0:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     bc2:	0032      	movs	r2, r6
     bc4:	0021      	movs	r1, r4
     bc6:	0038      	movs	r0, r7
     bc8:	4b02      	ldr	r3, [pc, #8]	; (bd4 <timer_process_counted+0x60>)
     bca:	4798      	blx	r3
     bcc:	e7e4      	b.n	b98 <timer_process_counted+0x24>
     bce:	46c0      	nop			; (mov r8, r8)
     bd0:	00001461 	.word	0x00001461
     bd4:	00000b1d 	.word	0x00000b1d

00000bd8 <timer_init>:
{
     bd8:	b570      	push	{r4, r5, r6, lr}
     bda:	0004      	movs	r4, r0
     bdc:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     bde:	2800      	cmp	r0, #0
     be0:	d012      	beq.n	c08 <timer_init+0x30>
     be2:	2900      	cmp	r1, #0
     be4:	d00e      	beq.n	c04 <timer_init+0x2c>
     be6:	2001      	movs	r0, #1
     be8:	223b      	movs	r2, #59	; 0x3b
     bea:	4908      	ldr	r1, [pc, #32]	; (c0c <timer_init+0x34>)
     bec:	4b08      	ldr	r3, [pc, #32]	; (c10 <timer_init+0x38>)
     bee:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     bf0:	0029      	movs	r1, r5
     bf2:	0020      	movs	r0, r4
     bf4:	4b07      	ldr	r3, [pc, #28]	; (c14 <timer_init+0x3c>)
     bf6:	4798      	blx	r3
	descr->time                           = 0;
     bf8:	2300      	movs	r3, #0
     bfa:	6123      	str	r3, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     bfc:	4b06      	ldr	r3, [pc, #24]	; (c18 <timer_init+0x40>)
     bfe:	6023      	str	r3, [r4, #0]
}
     c00:	2000      	movs	r0, #0
     c02:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
     c04:	2000      	movs	r0, #0
     c06:	e7ef      	b.n	be8 <timer_init+0x10>
     c08:	2000      	movs	r0, #0
     c0a:	e7ed      	b.n	be8 <timer_init+0x10>
     c0c:	00004118 	.word	0x00004118
     c10:	000013cd 	.word	0x000013cd
     c14:	00001f99 	.word	0x00001f99
     c18:	00000b75 	.word	0x00000b75

00000c1c <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
     c1c:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     c1e:	3808      	subs	r0, #8

	descr->stat = 0;
     c20:	2300      	movs	r3, #0
     c22:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.tx_done) {
     c24:	6a43      	ldr	r3, [r0, #36]	; 0x24
     c26:	2b00      	cmp	r3, #0
     c28:	d000      	beq.n	c2c <usart_transmission_complete+0x10>
		descr->usart_cb.tx_done(descr);
     c2a:	4798      	blx	r3
	}
}
     c2c:	bd10      	pop	{r4, pc}

00000c2e <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
     c2e:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     c30:	3808      	subs	r0, #8

	descr->stat = 0;
     c32:	2300      	movs	r3, #0
     c34:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.error) {
     c36:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
     c38:	2b00      	cmp	r3, #0
     c3a:	d000      	beq.n	c3e <usart_error+0x10>
		descr->usart_cb.error(descr);
     c3c:	4798      	blx	r3
	}
}
     c3e:	bd10      	pop	{r4, pc}

00000c40 <usart_fill_rx_buffer>:
{
     c40:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     c42:	0004      	movs	r4, r0
	ringbuffer_put(&descr->rx, data);
     c44:	302c      	adds	r0, #44	; 0x2c
     c46:	4b04      	ldr	r3, [pc, #16]	; (c58 <usart_fill_rx_buffer+0x18>)
     c48:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
     c4a:	6a23      	ldr	r3, [r4, #32]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     c4c:	3c08      	subs	r4, #8
	if (descr->usart_cb.rx_done) {
     c4e:	2b00      	cmp	r3, #0
     c50:	d001      	beq.n	c56 <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
     c52:	0020      	movs	r0, r4
     c54:	4798      	blx	r3
}
     c56:	bd10      	pop	{r4, pc}
     c58:	0000150d 	.word	0x0000150d

00000c5c <usart_async_write>:
{
     c5c:	b570      	push	{r4, r5, r6, lr}
     c5e:	0004      	movs	r4, r0
     c60:	000e      	movs	r6, r1
     c62:	0015      	movs	r5, r2
	ASSERT(descr && buf && length);
     c64:	2800      	cmp	r0, #0
     c66:	d01d      	beq.n	ca4 <usart_async_write+0x48>
     c68:	2900      	cmp	r1, #0
     c6a:	d01d      	beq.n	ca8 <usart_async_write+0x4c>
     c6c:	2a00      	cmp	r2, #0
     c6e:	d11d      	bne.n	cac <usart_async_write+0x50>
     c70:	2000      	movs	r0, #0
     c72:	223c      	movs	r2, #60	; 0x3c
     c74:	32ff      	adds	r2, #255	; 0xff
     c76:	4910      	ldr	r1, [pc, #64]	; (cb8 <usart_async_write+0x5c>)
     c78:	4b10      	ldr	r3, [pc, #64]	; (cbc <usart_async_write+0x60>)
     c7a:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
     c7c:	2344      	movs	r3, #68	; 0x44
     c7e:	5ae2      	ldrh	r2, [r4, r3]
     c80:	3308      	adds	r3, #8
     c82:	5ae3      	ldrh	r3, [r4, r3]
     c84:	429a      	cmp	r2, r3
     c86:	d113      	bne.n	cb0 <usart_async_write+0x54>
	descr->tx_buffer        = (uint8_t *)buf;
     c88:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
     c8a:	234c      	movs	r3, #76	; 0x4c
     c8c:	52e5      	strh	r5, [r4, r3]
	descr->tx_por           = 0;
     c8e:	2200      	movs	r2, #0
     c90:	3b08      	subs	r3, #8
     c92:	52e2      	strh	r2, [r4, r3]
	descr->stat             = USART_ASYNC_STATUS_BUSY;
     c94:	3b43      	subs	r3, #67	; 0x43
     c96:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
     c98:	0020      	movs	r0, r4
     c9a:	3008      	adds	r0, #8
     c9c:	4b08      	ldr	r3, [pc, #32]	; (cc0 <usart_async_write+0x64>)
     c9e:	4798      	blx	r3
	return (int32_t)length;
     ca0:	0028      	movs	r0, r5
}
     ca2:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
     ca4:	2000      	movs	r0, #0
     ca6:	e7e4      	b.n	c72 <usart_async_write+0x16>
     ca8:	2000      	movs	r0, #0
     caa:	e7e2      	b.n	c72 <usart_async_write+0x16>
     cac:	2001      	movs	r0, #1
     cae:	e7e0      	b.n	c72 <usart_async_write+0x16>
		return ERR_NO_RESOURCE;
     cb0:	201c      	movs	r0, #28
     cb2:	4240      	negs	r0, r0
     cb4:	e7f5      	b.n	ca2 <usart_async_write+0x46>
     cb6:	46c0      	nop			; (mov r8, r8)
     cb8:	00004130 	.word	0x00004130
     cbc:	000013cd 	.word	0x000013cd
     cc0:	00001ab1 	.word	0x00001ab1

00000cc4 <usart_process_byte_sent>:
{
     cc4:	b570      	push	{r4, r5, r6, lr}
     cc6:	0004      	movs	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
     cc8:	0002      	movs	r2, r0
     cca:	3a08      	subs	r2, #8
     ccc:	2344      	movs	r3, #68	; 0x44
     cce:	5ad3      	ldrh	r3, [r2, r3]
     cd0:	214c      	movs	r1, #76	; 0x4c
     cd2:	5a52      	ldrh	r2, [r2, r1]
     cd4:	4293      	cmp	r3, r2
     cd6:	d00d      	beq.n	cf4 <usart_process_byte_sent+0x30>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
     cd8:	0002      	movs	r2, r0
     cda:	6c01      	ldr	r1, [r0, #64]	; 0x40
     cdc:	3a08      	subs	r2, #8
     cde:	1c5d      	adds	r5, r3, #1
     ce0:	2044      	movs	r0, #68	; 0x44
     ce2:	5215      	strh	r5, [r2, r0]
     ce4:	5cc9      	ldrb	r1, [r1, r3]
     ce6:	0020      	movs	r0, r4
     ce8:	4b04      	ldr	r3, [pc, #16]	; (cfc <usart_process_byte_sent+0x38>)
     cea:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
     cec:	0020      	movs	r0, r4
     cee:	4b04      	ldr	r3, [pc, #16]	; (d00 <usart_process_byte_sent+0x3c>)
     cf0:	4798      	blx	r3
}
     cf2:	bd70      	pop	{r4, r5, r6, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
     cf4:	4b03      	ldr	r3, [pc, #12]	; (d04 <usart_process_byte_sent+0x40>)
     cf6:	4798      	blx	r3
}
     cf8:	e7fb      	b.n	cf2 <usart_process_byte_sent+0x2e>
     cfa:	46c0      	nop			; (mov r8, r8)
     cfc:	00001aa9 	.word	0x00001aa9
     d00:	00001ab1 	.word	0x00001ab1
     d04:	00001ab9 	.word	0x00001ab9

00000d08 <usart_async_read>:
{
     d08:	b5f0      	push	{r4, r5, r6, r7, lr}
     d0a:	b085      	sub	sp, #20
     d0c:	0004      	movs	r4, r0
     d0e:	000d      	movs	r5, r1
     d10:	0016      	movs	r6, r2
	ASSERT(descr && buf && length);
     d12:	2800      	cmp	r0, #0
     d14:	d017      	beq.n	d46 <usart_async_read+0x3e>
     d16:	2900      	cmp	r1, #0
     d18:	d017      	beq.n	d4a <usart_async_read+0x42>
     d1a:	2a00      	cmp	r2, #0
     d1c:	d117      	bne.n	d4e <usart_async_read+0x46>
     d1e:	2000      	movs	r0, #0
     d20:	22ac      	movs	r2, #172	; 0xac
     d22:	0052      	lsls	r2, r2, #1
     d24:	4912      	ldr	r1, [pc, #72]	; (d70 <usart_async_read+0x68>)
     d26:	4b13      	ldr	r3, [pc, #76]	; (d74 <usart_async_read+0x6c>)
     d28:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     d2a:	a803      	add	r0, sp, #12
     d2c:	4b12      	ldr	r3, [pc, #72]	; (d78 <usart_async_read+0x70>)
     d2e:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     d30:	3434      	adds	r4, #52	; 0x34
     d32:	0020      	movs	r0, r4
     d34:	9401      	str	r4, [sp, #4]
     d36:	4b11      	ldr	r3, [pc, #68]	; (d7c <usart_async_read+0x74>)
     d38:	4798      	blx	r3
     d3a:	0007      	movs	r7, r0
	CRITICAL_SECTION_LEAVE()
     d3c:	a803      	add	r0, sp, #12
     d3e:	4b10      	ldr	r3, [pc, #64]	; (d80 <usart_async_read+0x78>)
     d40:	4798      	blx	r3
	uint16_t                       was_read = 0;
     d42:	2400      	movs	r4, #0
	while ((was_read < num) && (was_read < length)) {
     d44:	e00b      	b.n	d5e <usart_async_read+0x56>
	ASSERT(descr && buf && length);
     d46:	2000      	movs	r0, #0
     d48:	e7ea      	b.n	d20 <usart_async_read+0x18>
     d4a:	2000      	movs	r0, #0
     d4c:	e7e8      	b.n	d20 <usart_async_read+0x18>
     d4e:	2001      	movs	r0, #1
     d50:	e7e6      	b.n	d20 <usart_async_read+0x18>
		ringbuffer_get(&descr->rx, &buf[was_read++]);
     d52:	3401      	adds	r4, #1
     d54:	b2a4      	uxth	r4, r4
     d56:	1869      	adds	r1, r5, r1
     d58:	9801      	ldr	r0, [sp, #4]
     d5a:	4b0a      	ldr	r3, [pc, #40]	; (d84 <usart_async_read+0x7c>)
     d5c:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
     d5e:	0021      	movs	r1, r4
     d60:	42a7      	cmp	r7, r4
     d62:	d901      	bls.n	d68 <usart_async_read+0x60>
     d64:	42b4      	cmp	r4, r6
     d66:	d3f4      	bcc.n	d52 <usart_async_read+0x4a>
}
     d68:	0020      	movs	r0, r4
     d6a:	b005      	add	sp, #20
     d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d6e:	46c0      	nop			; (mov r8, r8)
     d70:	00004130 	.word	0x00004130
     d74:	000013cd 	.word	0x000013cd
     d78:	0000090d 	.word	0x0000090d
     d7c:	0000154d 	.word	0x0000154d
     d80:	0000091b 	.word	0x0000091b
     d84:	000014c1 	.word	0x000014c1

00000d88 <usart_async_init>:
{
     d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     d8a:	0004      	movs	r4, r0
     d8c:	000d      	movs	r5, r1
     d8e:	0016      	movs	r6, r2
     d90:	001f      	movs	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     d92:	2800      	cmp	r0, #0
     d94:	d026      	beq.n	de4 <usart_async_init+0x5c>
     d96:	2900      	cmp	r1, #0
     d98:	d026      	beq.n	de8 <usart_async_init+0x60>
     d9a:	2a00      	cmp	r2, #0
     d9c:	d026      	beq.n	dec <usart_async_init+0x64>
     d9e:	2b00      	cmp	r3, #0
     da0:	d126      	bne.n	df0 <usart_async_init+0x68>
     da2:	2000      	movs	r0, #0
     da4:	223a      	movs	r2, #58	; 0x3a
     da6:	4915      	ldr	r1, [pc, #84]	; (dfc <usart_async_init+0x74>)
     da8:	4b15      	ldr	r3, [pc, #84]	; (e00 <usart_async_init+0x78>)
     daa:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
     dac:	0020      	movs	r0, r4
     dae:	3034      	adds	r0, #52	; 0x34
     db0:	003a      	movs	r2, r7
     db2:	0031      	movs	r1, r6
     db4:	4b13      	ldr	r3, [pc, #76]	; (e04 <usart_async_init+0x7c>)
     db6:	4798      	blx	r3
     db8:	2800      	cmp	r0, #0
     dba:	d11b      	bne.n	df4 <usart_async_init+0x6c>
	init_status = _usart_async_init(&descr->device, hw);
     dbc:	0020      	movs	r0, r4
     dbe:	3008      	adds	r0, #8
     dc0:	0029      	movs	r1, r5
     dc2:	4b11      	ldr	r3, [pc, #68]	; (e08 <usart_async_init+0x80>)
     dc4:	4798      	blx	r3
	if (init_status) {
     dc6:	2800      	cmp	r0, #0
     dc8:	d10b      	bne.n	de2 <usart_async_init+0x5a>
	descr->io.read  = usart_async_read;
     dca:	4b10      	ldr	r3, [pc, #64]	; (e0c <usart_async_init+0x84>)
     dcc:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_async_write;
     dce:	4b10      	ldr	r3, [pc, #64]	; (e10 <usart_async_init+0x88>)
     dd0:	6023      	str	r3, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
     dd2:	4b10      	ldr	r3, [pc, #64]	; (e14 <usart_async_init+0x8c>)
     dd4:	60a3      	str	r3, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
     dd6:	4b10      	ldr	r3, [pc, #64]	; (e18 <usart_async_init+0x90>)
     dd8:	60e3      	str	r3, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
     dda:	4b10      	ldr	r3, [pc, #64]	; (e1c <usart_async_init+0x94>)
     ddc:	6123      	str	r3, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
     dde:	4b10      	ldr	r3, [pc, #64]	; (e20 <usart_async_init+0x98>)
     de0:	6163      	str	r3, [r4, #20]
}
     de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     de4:	2000      	movs	r0, #0
     de6:	e7dd      	b.n	da4 <usart_async_init+0x1c>
     de8:	2000      	movs	r0, #0
     dea:	e7db      	b.n	da4 <usart_async_init+0x1c>
     dec:	2000      	movs	r0, #0
     dee:	e7d9      	b.n	da4 <usart_async_init+0x1c>
     df0:	2001      	movs	r0, #1
     df2:	e7d7      	b.n	da4 <usart_async_init+0x1c>
		return ERR_INVALID_ARG;
     df4:	200d      	movs	r0, #13
     df6:	4240      	negs	r0, r0
     df8:	e7f3      	b.n	de2 <usart_async_init+0x5a>
     dfa:	46c0      	nop			; (mov r8, r8)
     dfc:	00004130 	.word	0x00004130
     e00:	000013cd 	.word	0x000013cd
     e04:	00001475 	.word	0x00001475
     e08:	00001a1d 	.word	0x00001a1d
     e0c:	00000d09 	.word	0x00000d09
     e10:	00000c5d 	.word	0x00000c5d
     e14:	00000cc5 	.word	0x00000cc5
     e18:	00000c41 	.word	0x00000c41
     e1c:	00000c1d 	.word	0x00000c1d
     e20:	00000c2f 	.word	0x00000c2f

00000e24 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
     e24:	b510      	push	{r4, lr}
     e26:	0001      	movs	r1, r0
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     e28:	2000      	movs	r0, #0
     e2a:	e001      	b.n	e30 <_usb_d_find_ep+0xc>
     e2c:	3001      	adds	r0, #1
     e2e:	b240      	sxtb	r0, r0
     e30:	2807      	cmp	r0, #7
     e32:	dc0f      	bgt.n	e54 <_usb_d_find_ep+0x30>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     e34:	0142      	lsls	r2, r0, #5
     e36:	4b09      	ldr	r3, [pc, #36]	; (e5c <_usb_d_find_ep+0x38>)
     e38:	189b      	adds	r3, r3, r2
     e3a:	785a      	ldrb	r2, [r3, #1]
     e3c:	428a      	cmp	r2, r1
     e3e:	d00b      	beq.n	e58 <_usb_d_find_ep+0x34>
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
     e40:	0143      	lsls	r3, r0, #5
     e42:	4c06      	ldr	r4, [pc, #24]	; (e5c <_usb_d_find_ep+0x38>)
     e44:	5d1b      	ldrb	r3, [r3, r4]
     e46:	2b00      	cmp	r3, #0
     e48:	d1f0      	bne.n	e2c <_usb_d_find_ep+0x8>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     e4a:	330f      	adds	r3, #15
     e4c:	400b      	ands	r3, r1
     e4e:	4293      	cmp	r3, r2
     e50:	d1ec      	bne.n	e2c <_usb_d_find_ep+0x8>
     e52:	e001      	b.n	e58 <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
     e54:	2001      	movs	r0, #1
     e56:	4240      	negs	r0, r0
}
     e58:	bd10      	pop	{r4, pc}
     e5a:	46c0      	nop			; (mov r8, r8)
     e5c:	200000a0 	.word	0x200000a0

00000e60 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
     e60:	2000      	movs	r0, #0
     e62:	4770      	bx	lr

00000e64 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
     e64:	b570      	push	{r4, r5, r6, lr}
     e66:	0004      	movs	r4, r0
     e68:	000d      	movs	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
     e6a:	4b08      	ldr	r3, [pc, #32]	; (e8c <usb_d_cb_trans_more+0x28>)
     e6c:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
     e6e:	0142      	lsls	r2, r0, #5
     e70:	4b07      	ldr	r3, [pc, #28]	; (e90 <usb_d_cb_trans_more+0x2c>)
     e72:	189b      	adds	r3, r3, r2
     e74:	789b      	ldrb	r3, [r3, #2]
     e76:	2b03      	cmp	r3, #3
     e78:	d001      	beq.n	e7e <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
     e7a:	2000      	movs	r0, #0
}
     e7c:	bd70      	pop	{r4, r5, r6, pc}
		return ept->callbacks.more(ep, transfered);
     e7e:	4b04      	ldr	r3, [pc, #16]	; (e90 <usb_d_cb_trans_more+0x2c>)
     e80:	1898      	adds	r0, r3, r2
     e82:	6983      	ldr	r3, [r0, #24]
     e84:	0029      	movs	r1, r5
     e86:	0020      	movs	r0, r4
     e88:	4798      	blx	r3
     e8a:	e7f7      	b.n	e7c <usb_d_cb_trans_more+0x18>
     e8c:	00000e25 	.word	0x00000e25
     e90:	200000a0 	.word	0x200000a0

00000e94 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
     e94:	b5f0      	push	{r4, r5, r6, r7, lr}
     e96:	b087      	sub	sp, #28
     e98:	0005      	movs	r5, r0
     e9a:	000f      	movs	r7, r1
     e9c:	9201      	str	r2, [sp, #4]
	int8_t           ep_index = _usb_d_find_ep(ep);
     e9e:	4b4a      	ldr	r3, [pc, #296]	; (fc8 <_usb_d_cb_trans_done+0x134>)
     ea0:	4798      	blx	r3
     ea2:	0004      	movs	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
     ea4:	0146      	lsls	r6, r0, #5
     ea6:	4a49      	ldr	r2, [pc, #292]	; (fcc <_usb_d_cb_trans_done+0x138>)
     ea8:	1996      	adds	r6, r2, r6

	if (code == USB_TRANS_DONE) {
     eaa:	2f00      	cmp	r7, #0
     eac:	d151      	bne.n	f52 <_usb_d_cb_trans_done+0xbe>
		ept->xfer.hdr.status = USB_XFER_DONE;
     eae:	0013      	movs	r3, r2
     eb0:	0142      	lsls	r2, r0, #5
     eb2:	2000      	movs	r0, #0
     eb4:	70f0      	strb	r0, [r6, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     eb6:	5cd3      	ldrb	r3, [r2, r3]
     eb8:	2b00      	cmp	r3, #0
     eba:	d00e      	beq.n	eda <_usb_d_cb_trans_done+0x46>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     ebc:	0162      	lsls	r2, r4, #5
     ebe:	4b43      	ldr	r3, [pc, #268]	; (fcc <_usb_d_cb_trans_done+0x138>)
     ec0:	189b      	adds	r3, r3, r2
     ec2:	2201      	movs	r2, #1
     ec4:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
     ec6:	0164      	lsls	r4, r4, #5
     ec8:	4b40      	ldr	r3, [pc, #256]	; (fcc <_usb_d_cb_trans_done+0x138>)
     eca:	191c      	adds	r4, r3, r4
     ecc:	69e3      	ldr	r3, [r4, #28]
     ece:	78e1      	ldrb	r1, [r4, #3]
     ed0:	9a01      	ldr	r2, [sp, #4]
     ed2:	0028      	movs	r0, r5
     ed4:	4798      	blx	r3
}
     ed6:	b007      	add	sp, #28
     ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t state   = ept->xfer.hdr.state;
     eda:	78b3      	ldrb	r3, [r6, #2]
     edc:	240c      	movs	r4, #12
     ede:	5734      	ldrsb	r4, [r6, r4]
	if (state == USB_EP_S_X_DATA) {
     ee0:	2b03      	cmp	r3, #3
     ee2:	d008      	beq.n	ef6 <_usb_d_cb_trans_done+0x62>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
     ee4:	0032      	movs	r2, r6
     ee6:	320c      	adds	r2, #12
     ee8:	7870      	ldrb	r0, [r6, #1]
     eea:	2100      	movs	r1, #0
     eec:	69f3      	ldr	r3, [r6, #28]
     eee:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     ef0:	2302      	movs	r3, #2
     ef2:	70b3      	strb	r3, [r6, #2]
     ef4:	e7ef      	b.n	ed6 <_usb_d_cb_trans_done+0x42>
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
     ef6:	7870      	ldrb	r0, [r6, #1]
     ef8:	0032      	movs	r2, r6
     efa:	320c      	adds	r2, #12
     efc:	2101      	movs	r1, #1
     efe:	69f3      	ldr	r3, [r6, #28]
     f00:	4798      	blx	r3
		if (err) {
     f02:	2800      	cmp	r0, #0
     f04:	d010      	beq.n	f28 <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
     f06:	2305      	movs	r3, #5
     f08:	70b3      	strb	r3, [r6, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
     f0a:	3b03      	subs	r3, #3
     f0c:	70f3      	strb	r3, [r6, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
     f0e:	2c00      	cmp	r4, #0
     f10:	db08      	blt.n	f24 <_usb_d_cb_trans_done+0x90>
     f12:	7873      	ldrb	r3, [r6, #1]
     f14:	2080      	movs	r0, #128	; 0x80
     f16:	4240      	negs	r0, r0
     f18:	4318      	orrs	r0, r3
     f1a:	b2c0      	uxtb	r0, r0
     f1c:	2101      	movs	r1, #1
     f1e:	4b2c      	ldr	r3, [pc, #176]	; (fd0 <_usb_d_cb_trans_done+0x13c>)
     f20:	4798      	blx	r3
     f22:	e7d8      	b.n	ed6 <_usb_d_cb_trans_done+0x42>
     f24:	7870      	ldrb	r0, [r6, #1]
     f26:	e7f9      	b.n	f1c <_usb_d_cb_trans_done+0x88>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     f28:	2304      	movs	r3, #4
     f2a:	70b3      	strb	r3, [r6, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
     f2c:	7871      	ldrb	r1, [r6, #1]
	struct usb_d_transfer trans
     f2e:	2200      	movs	r2, #0
     f30:	9203      	str	r2, [sp, #12]
     f32:	9204      	str	r2, [sp, #16]
     f34:	2c00      	cmp	r4, #0
     f36:	db09      	blt.n	f4c <_usb_d_cb_trans_done+0xb8>
     f38:	3b84      	subs	r3, #132	; 0x84
     f3a:	430b      	orrs	r3, r1
     f3c:	b2da      	uxtb	r2, r3
     f3e:	a803      	add	r0, sp, #12
     f40:	7202      	strb	r2, [r0, #8]
     f42:	2301      	movs	r3, #1
     f44:	7243      	strb	r3, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
     f46:	4b23      	ldr	r3, [pc, #140]	; (fd4 <_usb_d_cb_trans_done+0x140>)
     f48:	4798      	blx	r3
     f4a:	e7c4      	b.n	ed6 <_usb_d_cb_trans_done+0x42>
	struct usb_d_transfer trans
     f4c:	220f      	movs	r2, #15
     f4e:	400a      	ands	r2, r1
     f50:	e7f5      	b.n	f3e <_usb_d_cb_trans_done+0xaa>
	} else if (code == USB_TRANS_STALL) {
     f52:	2f01      	cmp	r7, #1
     f54:	d00a      	beq.n	f6c <_usb_d_cb_trans_done+0xd8>
	} else if (code == USB_TRANS_ABORT) {
     f56:	2f02      	cmp	r7, #2
     f58:	d01d      	beq.n	f96 <_usb_d_cb_trans_done+0x102>
	} else if (code == USB_TRANS_RESET) {
     f5a:	2f03      	cmp	r7, #3
     f5c:	d02c      	beq.n	fb8 <_usb_d_cb_trans_done+0x124>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
     f5e:	0142      	lsls	r2, r0, #5
     f60:	4b1a      	ldr	r3, [pc, #104]	; (fcc <_usb_d_cb_trans_done+0x138>)
     f62:	189b      	adds	r3, r3, r2
     f64:	2206      	movs	r2, #6
     f66:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
     f68:	70da      	strb	r2, [r3, #3]
     f6a:	e7ac      	b.n	ec6 <_usb_d_cb_trans_done+0x32>
		ept->xfer.hdr.status = USB_XFER_HALT;
     f6c:	4b17      	ldr	r3, [pc, #92]	; (fcc <_usb_d_cb_trans_done+0x138>)
     f6e:	0142      	lsls	r2, r0, #5
     f70:	1899      	adds	r1, r3, r2
     f72:	2002      	movs	r0, #2
     f74:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     f76:	5cd3      	ldrb	r3, [r2, r3]
     f78:	2b00      	cmp	r3, #0
     f7a:	d005      	beq.n	f88 <_usb_d_cb_trans_done+0xf4>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
     f7c:	0162      	lsls	r2, r4, #5
     f7e:	4b13      	ldr	r3, [pc, #76]	; (fcc <_usb_d_cb_trans_done+0x138>)
     f80:	189b      	adds	r3, r3, r2
     f82:	2205      	movs	r2, #5
     f84:	709a      	strb	r2, [r3, #2]
     f86:	e79e      	b.n	ec6 <_usb_d_cb_trans_done+0x32>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     f88:	2202      	movs	r2, #2
     f8a:	708a      	strb	r2, [r1, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     f8c:	2100      	movs	r1, #0
     f8e:	0028      	movs	r0, r5
     f90:	4b0f      	ldr	r3, [pc, #60]	; (fd0 <_usb_d_cb_trans_done+0x13c>)
     f92:	4798      	blx	r3
     f94:	e797      	b.n	ec6 <_usb_d_cb_trans_done+0x32>
		ept->xfer.hdr.status = USB_XFER_ABORT;
     f96:	4b0d      	ldr	r3, [pc, #52]	; (fcc <_usb_d_cb_trans_done+0x138>)
     f98:	0142      	lsls	r2, r0, #5
     f9a:	1899      	adds	r1, r3, r2
     f9c:	2004      	movs	r0, #4
     f9e:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     fa0:	5cd3      	ldrb	r3, [r2, r3]
     fa2:	2b00      	cmp	r3, #0
     fa4:	d005      	beq.n	fb2 <_usb_d_cb_trans_done+0x11e>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     fa6:	0162      	lsls	r2, r4, #5
     fa8:	4b08      	ldr	r3, [pc, #32]	; (fcc <_usb_d_cb_trans_done+0x138>)
     faa:	189b      	adds	r3, r3, r2
     fac:	2201      	movs	r2, #1
     fae:	709a      	strb	r2, [r3, #2]
     fb0:	e789      	b.n	ec6 <_usb_d_cb_trans_done+0x32>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     fb2:	2302      	movs	r3, #2
     fb4:	708b      	strb	r3, [r1, #2]
			return;
     fb6:	e78e      	b.n	ed6 <_usb_d_cb_trans_done+0x42>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
     fb8:	0142      	lsls	r2, r0, #5
     fba:	4b04      	ldr	r3, [pc, #16]	; (fcc <_usb_d_cb_trans_done+0x138>)
     fbc:	189b      	adds	r3, r3, r2
     fbe:	2200      	movs	r2, #0
     fc0:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
     fc2:	3205      	adds	r2, #5
     fc4:	70da      	strb	r2, [r3, #3]
     fc6:	e77e      	b.n	ec6 <_usb_d_cb_trans_done+0x32>
     fc8:	00000e25 	.word	0x00000e25
     fcc:	200000a0 	.word	0x200000a0
     fd0:	00003001 	.word	0x00003001
     fd4:	000031c5 	.word	0x000031c5

00000fd8 <usb_d_cb_trans_setup>:
{
     fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
     fda:	46c6      	mov	lr, r8
     fdc:	b500      	push	{lr}
     fde:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     fe0:	4b1f      	ldr	r3, [pc, #124]	; (1060 <usb_d_cb_trans_setup+0x88>)
     fe2:	4798      	blx	r3
     fe4:	0006      	movs	r6, r0
	uint8_t *        req      = ept->xfer.req;
     fe6:	0143      	lsls	r3, r0, #5
     fe8:	3308      	adds	r3, #8
     fea:	4c1e      	ldr	r4, [pc, #120]	; (1064 <usb_d_cb_trans_setup+0x8c>)
     fec:	18e4      	adds	r4, r4, r3
     fee:	3404      	adds	r4, #4
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
     ff0:	0021      	movs	r1, r4
     ff2:	0028      	movs	r0, r5
     ff4:	4b1c      	ldr	r3, [pc, #112]	; (1068 <usb_d_cb_trans_setup+0x90>)
     ff6:	4798      	blx	r3
     ff8:	b2c0      	uxtb	r0, r0
	if (n != 8) {
     ffa:	2808      	cmp	r0, #8
     ffc:	d00c      	beq.n	1018 <usb_d_cb_trans_setup+0x40>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     ffe:	2101      	movs	r1, #1
    1000:	0028      	movs	r0, r5
    1002:	4c1a      	ldr	r4, [pc, #104]	; (106c <usb_d_cb_trans_setup+0x94>)
    1004:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    1006:	2080      	movs	r0, #128	; 0x80
    1008:	4240      	negs	r0, r0
    100a:	4328      	orrs	r0, r5
    100c:	b2c0      	uxtb	r0, r0
    100e:	2101      	movs	r1, #1
    1010:	47a0      	blx	r4
}
    1012:	bc04      	pop	{r2}
    1014:	4690      	mov	r8, r2
    1016:	bdf0      	pop	{r4, r5, r6, r7, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1018:	2100      	movs	r1, #0
    101a:	0028      	movs	r0, r5
    101c:	4b13      	ldr	r3, [pc, #76]	; (106c <usb_d_cb_trans_setup+0x94>)
    101e:	4698      	mov	r8, r3
    1020:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    1022:	2780      	movs	r7, #128	; 0x80
    1024:	427f      	negs	r7, r7
    1026:	432f      	orrs	r7, r5
    1028:	b2ff      	uxtb	r7, r7
    102a:	2100      	movs	r1, #0
    102c:	0038      	movs	r0, r7
    102e:	47c0      	blx	r8
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    1030:	0172      	lsls	r2, r6, #5
    1032:	4b0c      	ldr	r3, [pc, #48]	; (1064 <usb_d_cb_trans_setup+0x8c>)
    1034:	189b      	adds	r3, r3, r2
    1036:	2201      	movs	r2, #1
    1038:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    103a:	695b      	ldr	r3, [r3, #20]
    103c:	0021      	movs	r1, r4
    103e:	0028      	movs	r0, r5
    1040:	4798      	blx	r3
    1042:	2800      	cmp	r0, #0
    1044:	d1e5      	bne.n	1012 <usb_d_cb_trans_setup+0x3a>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    1046:	0176      	lsls	r6, r6, #5
    1048:	4b06      	ldr	r3, [pc, #24]	; (1064 <usb_d_cb_trans_setup+0x8c>)
    104a:	199e      	adds	r6, r3, r6
    104c:	2305      	movs	r3, #5
    104e:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1050:	2101      	movs	r1, #1
    1052:	0028      	movs	r0, r5
    1054:	4c05      	ldr	r4, [pc, #20]	; (106c <usb_d_cb_trans_setup+0x94>)
    1056:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    1058:	2101      	movs	r1, #1
    105a:	0038      	movs	r0, r7
    105c:	47a0      	blx	r4
    105e:	e7d8      	b.n	1012 <usb_d_cb_trans_setup+0x3a>
    1060:	00000e25 	.word	0x00000e25
    1064:	200000a0 	.word	0x200000a0
    1068:	0000314d 	.word	0x0000314d
    106c:	00003001 	.word	0x00003001

00001070 <usb_d_init>:

int32_t usb_d_init(void)
{
    1070:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    1072:	4b12      	ldr	r3, [pc, #72]	; (10bc <usb_d_init+0x4c>)
    1074:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    1076:	2800      	cmp	r0, #0
    1078:	db1f      	blt.n	10ba <usb_d_init+0x4a>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    107a:	2280      	movs	r2, #128	; 0x80
    107c:	0052      	lsls	r2, r2, #1
    107e:	2100      	movs	r1, #0
    1080:	480f      	ldr	r0, [pc, #60]	; (10c0 <usb_d_init+0x50>)
    1082:	4b10      	ldr	r3, [pc, #64]	; (10c4 <usb_d_init+0x54>)
    1084:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    1086:	2200      	movs	r2, #0
    1088:	e00a      	b.n	10a0 <usb_d_init+0x30>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    108a:	0151      	lsls	r1, r2, #5
    108c:	4b0c      	ldr	r3, [pc, #48]	; (10c0 <usb_d_init+0x50>)
    108e:	185b      	adds	r3, r3, r1
    1090:	21ff      	movs	r1, #255	; 0xff
    1092:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    1094:	490c      	ldr	r1, [pc, #48]	; (10c8 <usb_d_init+0x58>)
    1096:	6159      	str	r1, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    1098:	6199      	str	r1, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    109a:	61d9      	str	r1, [r3, #28]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    109c:	3201      	adds	r2, #1
    109e:	b2d2      	uxtb	r2, r2
    10a0:	2a07      	cmp	r2, #7
    10a2:	d9f2      	bls.n	108a <usb_d_init+0x1a>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    10a4:	4909      	ldr	r1, [pc, #36]	; (10cc <usb_d_init+0x5c>)
    10a6:	2000      	movs	r0, #0
    10a8:	4c09      	ldr	r4, [pc, #36]	; (10d0 <usb_d_init+0x60>)
    10aa:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    10ac:	4909      	ldr	r1, [pc, #36]	; (10d4 <usb_d_init+0x64>)
    10ae:	2001      	movs	r0, #1
    10b0:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    10b2:	4909      	ldr	r1, [pc, #36]	; (10d8 <usb_d_init+0x68>)
    10b4:	2002      	movs	r0, #2
    10b6:	47a0      	blx	r4
	return ERR_NONE;
    10b8:	2000      	movs	r0, #0
}
    10ba:	bd10      	pop	{r4, pc}
    10bc:	000029f9 	.word	0x000029f9
    10c0:	200000a0 	.word	0x200000a0
    10c4:	000040cf 	.word	0x000040cf
    10c8:	00000e61 	.word	0x00000e61
    10cc:	00000fd9 	.word	0x00000fd9
    10d0:	000033b9 	.word	0x000033b9
    10d4:	00000e65 	.word	0x00000e65
    10d8:	00000e95 	.word	0x00000e95

000010dc <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    10dc:	b510      	push	{r4, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    10de:	4b01      	ldr	r3, [pc, #4]	; (10e4 <usb_d_register_callback+0x8>)
    10e0:	4798      	blx	r3
}
    10e2:	bd10      	pop	{r4, pc}
    10e4:	00003395 	.word	0x00003395

000010e8 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    10e8:	b510      	push	{r4, lr}
	return _usb_d_dev_enable();
    10ea:	4b01      	ldr	r3, [pc, #4]	; (10f0 <usb_d_enable+0x8>)
    10ec:	4798      	blx	r3
}
    10ee:	bd10      	pop	{r4, pc}
    10f0:	00002aa1 	.word	0x00002aa1

000010f4 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    10f4:	b510      	push	{r4, lr}
	_usb_d_dev_attach();
    10f6:	4b01      	ldr	r3, [pc, #4]	; (10fc <usb_d_attach+0x8>)
    10f8:	4798      	blx	r3
}
    10fa:	bd10      	pop	{r4, pc}
    10fc:	00002af1 	.word	0x00002af1

00001100 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    1100:	b510      	push	{r4, lr}
	_usb_d_dev_set_address(addr);
    1102:	4b01      	ldr	r3, [pc, #4]	; (1108 <usb_d_set_address+0x8>)
    1104:	4798      	blx	r3
}
    1106:	bd10      	pop	{r4, pc}
    1108:	00002b01 	.word	0x00002b01

0000110c <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    110c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    110e:	0005      	movs	r5, r0
    1110:	000e      	movs	r6, r1
    1112:	0017      	movs	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    1114:	4b0f      	ldr	r3, [pc, #60]	; (1154 <usb_d_ep_init+0x48>)
    1116:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    1118:	2800      	cmp	r0, #0
    111a:	da14      	bge.n	1146 <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    111c:	20ff      	movs	r0, #255	; 0xff
    111e:	4b0d      	ldr	r3, [pc, #52]	; (1154 <usb_d_ep_init+0x48>)
    1120:	4798      	blx	r3
    1122:	1e04      	subs	r4, r0, #0
		if (ep_index < 0) {
    1124:	db12      	blt.n	114c <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    1126:	003a      	movs	r2, r7
    1128:	0031      	movs	r1, r6
    112a:	0028      	movs	r0, r5
    112c:	4b0a      	ldr	r3, [pc, #40]	; (1158 <usb_d_ep_init+0x4c>)
    112e:	4798      	blx	r3
	if (rc < 0) {
    1130:	2800      	cmp	r0, #0
    1132:	db07      	blt.n	1144 <usb_d_ep_init+0x38>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    1134:	4a09      	ldr	r2, [pc, #36]	; (115c <usb_d_ep_init+0x50>)
    1136:	0164      	lsls	r4, r4, #5
    1138:	1913      	adds	r3, r2, r4
    113a:	705d      	strb	r5, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    113c:	2303      	movs	r3, #3
    113e:	401e      	ands	r6, r3
    1140:	54a6      	strb	r6, [r4, r2]
	return ERR_NONE;
    1142:	2000      	movs	r0, #0
}
    1144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    1146:	2014      	movs	r0, #20
    1148:	4240      	negs	r0, r0
    114a:	e7fb      	b.n	1144 <usb_d_ep_init+0x38>
			return -USB_ERR_ALLOC_FAIL;
    114c:	2015      	movs	r0, #21
    114e:	4240      	negs	r0, r0
    1150:	e7f8      	b.n	1144 <usb_d_ep_init+0x38>
    1152:	46c0      	nop			; (mov r8, r8)
    1154:	00000e25 	.word	0x00000e25
    1158:	00002b15 	.word	0x00002b15
    115c:	200000a0 	.word	0x200000a0

00001160 <usb_d_ep0_init>:
{
    1160:	b510      	push	{r4, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    1162:	b282      	uxth	r2, r0
    1164:	2100      	movs	r1, #0
    1166:	2000      	movs	r0, #0
    1168:	4b01      	ldr	r3, [pc, #4]	; (1170 <usb_d_ep0_init+0x10>)
    116a:	4798      	blx	r3
}
    116c:	bd10      	pop	{r4, pc}
    116e:	46c0      	nop			; (mov r8, r8)
    1170:	0000110d 	.word	0x0000110d

00001174 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    1174:	b570      	push	{r4, r5, r6, lr}
    1176:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1178:	4b06      	ldr	r3, [pc, #24]	; (1194 <usb_d_ep_deinit+0x20>)
    117a:	4798      	blx	r3
    117c:	1e04      	subs	r4, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    117e:	db07      	blt.n	1190 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    1180:	0028      	movs	r0, r5
    1182:	4b05      	ldr	r3, [pc, #20]	; (1198 <usb_d_ep_deinit+0x24>)
    1184:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    1186:	0164      	lsls	r4, r4, #5
    1188:	4b04      	ldr	r3, [pc, #16]	; (119c <usb_d_ep_deinit+0x28>)
    118a:	191c      	adds	r4, r3, r4
    118c:	23ff      	movs	r3, #255	; 0xff
    118e:	7063      	strb	r3, [r4, #1]
}
    1190:	bd70      	pop	{r4, r5, r6, pc}
    1192:	46c0      	nop			; (mov r8, r8)
    1194:	00000e25 	.word	0x00000e25
    1198:	00002c4d 	.word	0x00002c4d
    119c:	200000a0 	.word	0x200000a0

000011a0 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    11a0:	b570      	push	{r4, r5, r6, lr}
    11a2:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    11a4:	4b0f      	ldr	r3, [pc, #60]	; (11e4 <usb_d_ep_enable+0x44>)
    11a6:	4798      	blx	r3
    11a8:	1e04      	subs	r4, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    11aa:	db17      	blt.n	11dc <usb_d_ep_enable+0x3c>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    11ac:	0143      	lsls	r3, r0, #5
    11ae:	4a0e      	ldr	r2, [pc, #56]	; (11e8 <usb_d_ep_enable+0x48>)
    11b0:	5c9b      	ldrb	r3, [r3, r2]
    11b2:	2b00      	cmp	r3, #0
    11b4:	d10a      	bne.n	11cc <usb_d_ep_enable+0x2c>
    11b6:	2102      	movs	r1, #2
    11b8:	0162      	lsls	r2, r4, #5
    11ba:	4b0b      	ldr	r3, [pc, #44]	; (11e8 <usb_d_ep_enable+0x48>)
    11bc:	189b      	adds	r3, r3, r2
    11be:	7099      	strb	r1, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    11c0:	0028      	movs	r0, r5
    11c2:	4b0a      	ldr	r3, [pc, #40]	; (11ec <usb_d_ep_enable+0x4c>)
    11c4:	4798      	blx	r3
	if (rc < 0) {
    11c6:	2800      	cmp	r0, #0
    11c8:	db02      	blt.n	11d0 <usb_d_ep_enable+0x30>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    11ca:	bd70      	pop	{r4, r5, r6, pc}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    11cc:	2101      	movs	r1, #1
    11ce:	e7f3      	b.n	11b8 <usb_d_ep_enable+0x18>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    11d0:	0164      	lsls	r4, r4, #5
    11d2:	4b05      	ldr	r3, [pc, #20]	; (11e8 <usb_d_ep_enable+0x48>)
    11d4:	191c      	adds	r4, r3, r4
    11d6:	2300      	movs	r3, #0
    11d8:	70a3      	strb	r3, [r4, #2]
    11da:	e7f6      	b.n	11ca <usb_d_ep_enable+0x2a>
		return -USB_ERR_PARAM;
    11dc:	2012      	movs	r0, #18
    11de:	4240      	negs	r0, r0
    11e0:	e7f3      	b.n	11ca <usb_d_ep_enable+0x2a>
    11e2:	46c0      	nop			; (mov r8, r8)
    11e4:	00000e25 	.word	0x00000e25
    11e8:	200000a0 	.word	0x200000a0
    11ec:	00002d09 	.word	0x00002d09

000011f0 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    11f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    11f2:	46d6      	mov	lr, sl
    11f4:	464f      	mov	r7, r9
    11f6:	4646      	mov	r6, r8
    11f8:	b5c0      	push	{r6, r7, lr}
    11fa:	b086      	sub	sp, #24
    11fc:	0005      	movs	r5, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    11fe:	7a06      	ldrb	r6, [r0, #8]
    1200:	0030      	movs	r0, r6
    1202:	4b3f      	ldr	r3, [pc, #252]	; (1300 <usb_d_ep_transfer+0x110>)
    1204:	4798      	blx	r3
    1206:	0007      	movs	r7, r0
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    1208:	09f6      	lsrs	r6, r6, #7
    120a:	7a6b      	ldrb	r3, [r5, #9]
    120c:	1e5a      	subs	r2, r3, #1
    120e:	4193      	sbcs	r3, r2
    1210:	b2dc      	uxtb	r4, r3
	uint32_t              len = xfer->size;
    1212:	686b      	ldr	r3, [r5, #4]
    1214:	4698      	mov	r8, r3
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    1216:	2800      	cmp	r0, #0
    1218:	db6b      	blt.n	12f2 <usb_d_ep_transfer+0x102>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    121a:	a804      	add	r0, sp, #16
    121c:	4b39      	ldr	r3, [pc, #228]	; (1304 <usb_d_ep_transfer+0x114>)
    121e:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    1220:	017a      	lsls	r2, r7, #5
    1222:	4b39      	ldr	r3, [pc, #228]	; (1308 <usb_d_ep_transfer+0x118>)
    1224:	189b      	adds	r3, r3, r2
    1226:	789a      	ldrb	r2, [r3, #2]
    1228:	2317      	movs	r3, #23
    122a:	446b      	add	r3, sp
    122c:	701a      	strb	r2, [r3, #0]
	if (state == USB_EP_S_IDLE) {
    122e:	781b      	ldrb	r3, [r3, #0]
    1230:	2b01      	cmp	r3, #1
    1232:	d00e      	beq.n	1252 <usb_d_ep_transfer+0x62>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    1234:	a804      	add	r0, sp, #16
    1236:	4b35      	ldr	r3, [pc, #212]	; (130c <usb_d_ep_transfer+0x11c>)
    1238:	4798      	blx	r3
		switch (state) {
    123a:	2317      	movs	r3, #23
    123c:	446b      	add	r3, sp
    123e:	781b      	ldrb	r3, [r3, #0]
    1240:	b2db      	uxtb	r3, r3
    1242:	2b05      	cmp	r3, #5
    1244:	d02b      	beq.n	129e <usb_d_ep_transfer+0xae>
    1246:	2b06      	cmp	r3, #6
    1248:	d056      	beq.n	12f8 <usb_d_ep_transfer+0x108>
    124a:	2b00      	cmp	r3, #0
    124c:	d029      	beq.n	12a2 <usb_d_ep_transfer+0xb2>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    124e:	2001      	movs	r0, #1
    1250:	e01f      	b.n	1292 <usb_d_ep_transfer+0xa2>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    1252:	4b2d      	ldr	r3, [pc, #180]	; (1308 <usb_d_ep_transfer+0x118>)
    1254:	4699      	mov	r9, r3
    1256:	017b      	lsls	r3, r7, #5
    1258:	469a      	mov	sl, r3
    125a:	464b      	mov	r3, r9
    125c:	4453      	add	r3, sl
    125e:	2203      	movs	r2, #3
    1260:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    1262:	a804      	add	r0, sp, #16
    1264:	4b29      	ldr	r3, [pc, #164]	; (130c <usb_d_ep_transfer+0x11c>)
    1266:	4798      	blx	r3
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1268:	464b      	mov	r3, r9
    126a:	4652      	mov	r2, sl
    126c:	5cd3      	ldrb	r3, [r2, r3]
    126e:	2b00      	cmp	r3, #0
    1270:	d01a      	beq.n	12a8 <usb_d_ep_transfer+0xb8>
				zlp = false;
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1272:	7a29      	ldrb	r1, [r5, #8]
    1274:	682b      	ldr	r3, [r5, #0]
    1276:	9301      	str	r3, [sp, #4]
	struct usb_d_transfer trans
    1278:	4643      	mov	r3, r8
    127a:	9302      	str	r3, [sp, #8]
    127c:	2e00      	cmp	r6, #0
    127e:	d035      	beq.n	12ec <usb_d_ep_transfer+0xfc>
    1280:	2280      	movs	r2, #128	; 0x80
    1282:	4252      	negs	r2, r2
    1284:	430a      	orrs	r2, r1
    1286:	b2d2      	uxtb	r2, r2
    1288:	a801      	add	r0, sp, #4
    128a:	7202      	strb	r2, [r0, #8]
    128c:	7244      	strb	r4, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
    128e:	4b20      	ldr	r3, [pc, #128]	; (1310 <usb_d_ep_transfer+0x120>)
    1290:	4798      	blx	r3
	return rc;
}
    1292:	b006      	add	sp, #24
    1294:	bc1c      	pop	{r2, r3, r4}
    1296:	4690      	mov	r8, r2
    1298:	4699      	mov	r9, r3
    129a:	46a2      	mov	sl, r4
    129c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return USB_HALTED;
    129e:	2002      	movs	r0, #2
    12a0:	e7f7      	b.n	1292 <usb_d_ep_transfer+0xa2>
			return -USB_ERR_FUNC;
    12a2:	2013      	movs	r0, #19
    12a4:	4240      	negs	r0, r0
    12a6:	e7f4      	b.n	1292 <usb_d_ep_transfer+0xa2>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    12a8:	017b      	lsls	r3, r7, #5
    12aa:	4a17      	ldr	r2, [pc, #92]	; (1308 <usb_d_ep_transfer+0x118>)
    12ac:	18d2      	adds	r2, r2, r3
    12ae:	7c93      	ldrb	r3, [r2, #18]
    12b0:	7cd4      	ldrb	r4, [r2, #19]
    12b2:	0224      	lsls	r4, r4, #8
    12b4:	191b      	adds	r3, r3, r4
    12b6:	b29b      	uxth	r3, r3
		if (req_len == 0) {
    12b8:	2b00      	cmp	r3, #0
    12ba:	d106      	bne.n	12ca <usb_d_ep_transfer+0xda>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    12bc:	2304      	movs	r3, #4
    12be:	7093      	strb	r3, [r2, #2]
			len                 = 0;
    12c0:	2300      	movs	r3, #0
    12c2:	4698      	mov	r8, r3
			zlp                 = true;
    12c4:	2401      	movs	r4, #1
			dir                 = true;
    12c6:	2601      	movs	r6, #1
    12c8:	e7d3      	b.n	1272 <usb_d_ep_transfer+0x82>
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    12ca:	017f      	lsls	r7, r7, #5
    12cc:	4a0e      	ldr	r2, [pc, #56]	; (1308 <usb_d_ep_transfer+0x118>)
    12ce:	19d7      	adds	r7, r2, r7
    12d0:	220c      	movs	r2, #12
    12d2:	56ba      	ldrsb	r2, [r7, r2]
    12d4:	0fd6      	lsrs	r6, r2, #31
			if (len > req_len) {
    12d6:	4598      	cmp	r8, r3
    12d8:	d900      	bls.n	12dc <usb_d_ep_transfer+0xec>
				len = req_len;
    12da:	4698      	mov	r8, r3
			if (dir) {
    12dc:	2a00      	cmp	r2, #0
    12de:	db01      	blt.n	12e4 <usb_d_ep_transfer+0xf4>
				zlp = false;
    12e0:	2400      	movs	r4, #0
    12e2:	e7c6      	b.n	1272 <usb_d_ep_transfer+0x82>
				zlp = (req_len > len);
    12e4:	4598      	cmp	r8, r3
    12e6:	419b      	sbcs	r3, r3
    12e8:	425c      	negs	r4, r3
    12ea:	e7c2      	b.n	1272 <usb_d_ep_transfer+0x82>
	struct usb_d_transfer trans
    12ec:	220f      	movs	r2, #15
    12ee:	400a      	ands	r2, r1
    12f0:	e7ca      	b.n	1288 <usb_d_ep_transfer+0x98>
		return -USB_ERR_PARAM;
    12f2:	2012      	movs	r0, #18
    12f4:	4240      	negs	r0, r0
    12f6:	e7cc      	b.n	1292 <usb_d_ep_transfer+0xa2>
			return -USB_ERROR;
    12f8:	2010      	movs	r0, #16
    12fa:	4240      	negs	r0, r0
    12fc:	e7c9      	b.n	1292 <usb_d_ep_transfer+0xa2>
    12fe:	46c0      	nop			; (mov r8, r8)
    1300:	00000e25 	.word	0x00000e25
    1304:	0000090d 	.word	0x0000090d
    1308:	200000a0 	.word	0x200000a0
    130c:	0000091b 	.word	0x0000091b
    1310:	000031c5 	.word	0x000031c5

00001314 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    1314:	b570      	push	{r4, r5, r6, lr}
    1316:	0004      	movs	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    1318:	2900      	cmp	r1, #0
    131a:	d005      	beq.n	1328 <usb_d_ep_halt+0x14>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    131c:	2901      	cmp	r1, #1
    131e:	d024      	beq.n	136a <usb_d_ep_halt+0x56>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    1320:	2102      	movs	r1, #2
    1322:	4b13      	ldr	r3, [pc, #76]	; (1370 <usb_d_ep_halt+0x5c>)
    1324:	4798      	blx	r3
	}
}
    1326:	bd70      	pop	{r4, r5, r6, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    1328:	4b12      	ldr	r3, [pc, #72]	; (1374 <usb_d_ep_halt+0x60>)
    132a:	4798      	blx	r3
    132c:	1e05      	subs	r5, r0, #0
	if (ep_index < 0) {
    132e:	db19      	blt.n	1364 <usb_d_ep_halt+0x50>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    1330:	2102      	movs	r1, #2
    1332:	0020      	movs	r0, r4
    1334:	4b0e      	ldr	r3, [pc, #56]	; (1370 <usb_d_ep_halt+0x5c>)
    1336:	4798      	blx	r3
    1338:	2800      	cmp	r0, #0
    133a:	d0f4      	beq.n	1326 <usb_d_ep_halt+0x12>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    133c:	2100      	movs	r1, #0
    133e:	0020      	movs	r0, r4
    1340:	4b0b      	ldr	r3, [pc, #44]	; (1370 <usb_d_ep_halt+0x5c>)
    1342:	4798      	blx	r3
		if (rc < 0) {
    1344:	2800      	cmp	r0, #0
    1346:	dbee      	blt.n	1326 <usb_d_ep_halt+0x12>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    1348:	016d      	lsls	r5, r5, #5
    134a:	4b0b      	ldr	r3, [pc, #44]	; (1378 <usb_d_ep_halt+0x64>)
    134c:	195d      	adds	r5, r3, r5
    134e:	2301      	movs	r3, #1
    1350:	70ab      	strb	r3, [r5, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    1352:	3302      	adds	r3, #2
    1354:	70eb      	strb	r3, [r5, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    1356:	69eb      	ldr	r3, [r5, #28]
    1358:	2200      	movs	r2, #0
    135a:	2103      	movs	r1, #3
    135c:	0020      	movs	r0, r4
    135e:	4798      	blx	r3
	return ERR_NONE;
    1360:	2000      	movs	r0, #0
    1362:	e7e0      	b.n	1326 <usb_d_ep_halt+0x12>
		return -USB_ERR_PARAM;
    1364:	2012      	movs	r0, #18
    1366:	4240      	negs	r0, r0
		return _usb_d_ep_halt_clr(ep);
    1368:	e7dd      	b.n	1326 <usb_d_ep_halt+0x12>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    136a:	4b01      	ldr	r3, [pc, #4]	; (1370 <usb_d_ep_halt+0x5c>)
    136c:	4798      	blx	r3
    136e:	e7da      	b.n	1326 <usb_d_ep_halt+0x12>
    1370:	00003001 	.word	0x00003001
    1374:	00000e25 	.word	0x00000e25
    1378:	200000a0 	.word	0x200000a0

0000137c <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    137c:	b570      	push	{r4, r5, r6, lr}
    137e:	000d      	movs	r5, r1
    1380:	0014      	movs	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    1382:	4b0f      	ldr	r3, [pc, #60]	; (13c0 <usb_d_ep_register_callback+0x44>)
    1384:	4798      	blx	r3
    1386:	0003      	movs	r3, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    1388:	2c00      	cmp	r4, #0
    138a:	d008      	beq.n	139e <usb_d_ep_register_callback+0x22>
	if (ep_index < 0) {
    138c:	2b00      	cmp	r3, #0
    138e:	db05      	blt.n	139c <usb_d_ep_register_callback+0x20>
		return;
	}
	switch (type) {
    1390:	2d01      	cmp	r5, #1
    1392:	d00b      	beq.n	13ac <usb_d_ep_register_callback+0x30>
    1394:	2d00      	cmp	r5, #0
    1396:	d004      	beq.n	13a2 <usb_d_ep_register_callback+0x26>
    1398:	2d02      	cmp	r5, #2
    139a:	d00c      	beq.n	13b6 <usb_d_ep_register_callback+0x3a>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
	}
}
    139c:	bd70      	pop	{r4, r5, r6, pc}
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    139e:	4c09      	ldr	r4, [pc, #36]	; (13c4 <usb_d_ep_register_callback+0x48>)
    13a0:	e7f4      	b.n	138c <usb_d_ep_register_callback+0x10>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    13a2:	0140      	lsls	r0, r0, #5
    13a4:	4b08      	ldr	r3, [pc, #32]	; (13c8 <usb_d_ep_register_callback+0x4c>)
    13a6:	1818      	adds	r0, r3, r0
    13a8:	6144      	str	r4, [r0, #20]
		break;
    13aa:	e7f7      	b.n	139c <usb_d_ep_register_callback+0x20>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    13ac:	0140      	lsls	r0, r0, #5
    13ae:	4b06      	ldr	r3, [pc, #24]	; (13c8 <usb_d_ep_register_callback+0x4c>)
    13b0:	1818      	adds	r0, r3, r0
    13b2:	6184      	str	r4, [r0, #24]
		break;
    13b4:	e7f2      	b.n	139c <usb_d_ep_register_callback+0x20>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    13b6:	0140      	lsls	r0, r0, #5
    13b8:	4b03      	ldr	r3, [pc, #12]	; (13c8 <usb_d_ep_register_callback+0x4c>)
    13ba:	1818      	adds	r0, r3, r0
    13bc:	61c4      	str	r4, [r0, #28]
		break;
    13be:	e7ed      	b.n	139c <usb_d_ep_register_callback+0x20>
    13c0:	00000e25 	.word	0x00000e25
    13c4:	00000e61 	.word	0x00000e61
    13c8:	200000a0 	.word	0x200000a0

000013cc <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    13cc:	2800      	cmp	r0, #0
    13ce:	d100      	bne.n	13d2 <assert+0x6>
		__asm("BKPT #0");
    13d0:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    13d2:	4770      	bx	lr

000013d4 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    13d4:	6803      	ldr	r3, [r0, #0]
    13d6:	2b00      	cmp	r3, #0
    13d8:	d003      	beq.n	13e2 <is_list_element+0xe>
		if (it == element) {
    13da:	428b      	cmp	r3, r1
    13dc:	d003      	beq.n	13e6 <is_list_element+0x12>
	for (it = list->head; it; it = it->next) {
    13de:	681b      	ldr	r3, [r3, #0]
    13e0:	e7f9      	b.n	13d6 <is_list_element+0x2>
			return true;
		}
	}

	return false;
    13e2:	2000      	movs	r0, #0
}
    13e4:	4770      	bx	lr
			return true;
    13e6:	2001      	movs	r0, #1
    13e8:	e7fc      	b.n	13e4 <is_list_element+0x10>
	...

000013ec <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    13ec:	b570      	push	{r4, r5, r6, lr}
    13ee:	0004      	movs	r4, r0
    13f0:	000d      	movs	r5, r1
	ASSERT(!is_list_element(list, element));
    13f2:	4b06      	ldr	r3, [pc, #24]	; (140c <list_insert_as_head+0x20>)
    13f4:	4798      	blx	r3
    13f6:	2301      	movs	r3, #1
    13f8:	4058      	eors	r0, r3
    13fa:	b2c0      	uxtb	r0, r0
    13fc:	2239      	movs	r2, #57	; 0x39
    13fe:	4904      	ldr	r1, [pc, #16]	; (1410 <list_insert_as_head+0x24>)
    1400:	4b04      	ldr	r3, [pc, #16]	; (1414 <list_insert_as_head+0x28>)
    1402:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    1404:	6823      	ldr	r3, [r4, #0]
    1406:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    1408:	6025      	str	r5, [r4, #0]
}
    140a:	bd70      	pop	{r4, r5, r6, pc}
    140c:	000013d5 	.word	0x000013d5
    1410:	00004150 	.word	0x00004150
    1414:	000013cd 	.word	0x000013cd

00001418 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    1418:	6803      	ldr	r3, [r0, #0]
    141a:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    141c:	6001      	str	r1, [r0, #0]
}
    141e:	4770      	bx	lr

00001420 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    1420:	b570      	push	{r4, r5, r6, lr}
    1422:	0005      	movs	r5, r0
    1424:	000e      	movs	r6, r1
	struct list_element *it = list->head;
    1426:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    1428:	4b0a      	ldr	r3, [pc, #40]	; (1454 <list_insert_at_end+0x34>)
    142a:	4798      	blx	r3
    142c:	2301      	movs	r3, #1
    142e:	4058      	eors	r0, r3
    1430:	b2c0      	uxtb	r0, r0
    1432:	224f      	movs	r2, #79	; 0x4f
    1434:	4908      	ldr	r1, [pc, #32]	; (1458 <list_insert_at_end+0x38>)
    1436:	4b09      	ldr	r3, [pc, #36]	; (145c <list_insert_at_end+0x3c>)
    1438:	4798      	blx	r3

	if (!list->head) {
    143a:	682b      	ldr	r3, [r5, #0]
    143c:	2b00      	cmp	r3, #0
    143e:	d103      	bne.n	1448 <list_insert_at_end+0x28>
		list->head                             = (struct list_element *)element;
    1440:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    1442:	6033      	str	r3, [r6, #0]
		return;
    1444:	e005      	b.n	1452 <list_insert_at_end+0x32>
	}

	while (it->next) {
		it = it->next;
    1446:	001c      	movs	r4, r3
	while (it->next) {
    1448:	6823      	ldr	r3, [r4, #0]
    144a:	2b00      	cmp	r3, #0
    144c:	d1fb      	bne.n	1446 <list_insert_at_end+0x26>
	}
	it->next                               = (struct list_element *)element;
    144e:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    1450:	6033      	str	r3, [r6, #0]
}
    1452:	bd70      	pop	{r4, r5, r6, pc}
    1454:	000013d5 	.word	0x000013d5
    1458:	00004150 	.word	0x00004150
    145c:	000013cd 	.word	0x000013cd

00001460 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    1460:	6803      	ldr	r3, [r0, #0]
    1462:	2b00      	cmp	r3, #0
    1464:	d003      	beq.n	146e <list_remove_head+0xe>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    1466:	681a      	ldr	r2, [r3, #0]
    1468:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
    146a:	0018      	movs	r0, r3
	}

	return NULL;
}
    146c:	4770      	bx	lr
	return NULL;
    146e:	2000      	movs	r0, #0
    1470:	e7fc      	b.n	146c <list_remove_head+0xc>
	...

00001474 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    1474:	b570      	push	{r4, r5, r6, lr}
    1476:	0004      	movs	r4, r0
    1478:	000e      	movs	r6, r1
    147a:	0015      	movs	r5, r2
	ASSERT(rb && buf && size);
    147c:	2800      	cmp	r0, #0
    147e:	d012      	beq.n	14a6 <ringbuffer_init+0x32>
    1480:	2900      	cmp	r1, #0
    1482:	d012      	beq.n	14aa <ringbuffer_init+0x36>
    1484:	2a00      	cmp	r2, #0
    1486:	d112      	bne.n	14ae <ringbuffer_init+0x3a>
    1488:	2000      	movs	r0, #0
    148a:	2228      	movs	r2, #40	; 0x28
    148c:	490a      	ldr	r1, [pc, #40]	; (14b8 <ringbuffer_init+0x44>)
    148e:	4b0b      	ldr	r3, [pc, #44]	; (14bc <ringbuffer_init+0x48>)
    1490:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    1492:	1e6b      	subs	r3, r5, #1
    1494:	422b      	tst	r3, r5
    1496:	d10c      	bne.n	14b2 <ringbuffer_init+0x3e>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    1498:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    149a:	2300      	movs	r3, #0
    149c:	60a3      	str	r3, [r4, #8]
	rb->write_index = rb->read_index;
    149e:	60e3      	str	r3, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    14a0:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    14a2:	2000      	movs	r0, #0
}
    14a4:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    14a6:	2000      	movs	r0, #0
    14a8:	e7ef      	b.n	148a <ringbuffer_init+0x16>
    14aa:	2000      	movs	r0, #0
    14ac:	e7ed      	b.n	148a <ringbuffer_init+0x16>
    14ae:	2001      	movs	r0, #1
    14b0:	e7eb      	b.n	148a <ringbuffer_init+0x16>
		return ERR_INVALID_ARG;
    14b2:	200d      	movs	r0, #13
    14b4:	4240      	negs	r0, r0
    14b6:	e7f5      	b.n	14a4 <ringbuffer_init+0x30>
    14b8:	00004170 	.word	0x00004170
    14bc:	000013cd 	.word	0x000013cd

000014c0 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    14c0:	b570      	push	{r4, r5, r6, lr}
    14c2:	0004      	movs	r4, r0
    14c4:	000d      	movs	r5, r1
	ASSERT(rb && data);
    14c6:	2800      	cmp	r0, #0
    14c8:	d016      	beq.n	14f8 <ringbuffer_get+0x38>
    14ca:	2900      	cmp	r1, #0
    14cc:	d012      	beq.n	14f4 <ringbuffer_get+0x34>
    14ce:	2001      	movs	r0, #1
    14d0:	2240      	movs	r2, #64	; 0x40
    14d2:	490c      	ldr	r1, [pc, #48]	; (1504 <ringbuffer_get+0x44>)
    14d4:	4b0c      	ldr	r3, [pc, #48]	; (1508 <ringbuffer_get+0x48>)
    14d6:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    14d8:	68a3      	ldr	r3, [r4, #8]
    14da:	68e2      	ldr	r2, [r4, #12]
    14dc:	429a      	cmp	r2, r3
    14de:	d00d      	beq.n	14fc <ringbuffer_get+0x3c>
		*data = rb->buf[rb->read_index & rb->size];
    14e0:	6862      	ldr	r2, [r4, #4]
    14e2:	4013      	ands	r3, r2
    14e4:	6822      	ldr	r2, [r4, #0]
    14e6:	5cd3      	ldrb	r3, [r2, r3]
    14e8:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    14ea:	68a3      	ldr	r3, [r4, #8]
    14ec:	3301      	adds	r3, #1
    14ee:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    14f0:	2000      	movs	r0, #0
	}

	return ERR_NOT_FOUND;
}
    14f2:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && data);
    14f4:	2000      	movs	r0, #0
    14f6:	e7eb      	b.n	14d0 <ringbuffer_get+0x10>
    14f8:	2000      	movs	r0, #0
    14fa:	e7e9      	b.n	14d0 <ringbuffer_get+0x10>
	return ERR_NOT_FOUND;
    14fc:	200a      	movs	r0, #10
    14fe:	4240      	negs	r0, r0
    1500:	e7f7      	b.n	14f2 <ringbuffer_get+0x32>
    1502:	46c0      	nop			; (mov r8, r8)
    1504:	00004170 	.word	0x00004170
    1508:	000013cd 	.word	0x000013cd

0000150c <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    150c:	b570      	push	{r4, r5, r6, lr}
    150e:	0004      	movs	r4, r0
    1510:	000d      	movs	r5, r1
	ASSERT(rb);
    1512:	1e43      	subs	r3, r0, #1
    1514:	4198      	sbcs	r0, r3
    1516:	b2c0      	uxtb	r0, r0
    1518:	2251      	movs	r2, #81	; 0x51
    151a:	490a      	ldr	r1, [pc, #40]	; (1544 <ringbuffer_put+0x38>)
    151c:	4b0a      	ldr	r3, [pc, #40]	; (1548 <ringbuffer_put+0x3c>)
    151e:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    1520:	6863      	ldr	r3, [r4, #4]
    1522:	68e2      	ldr	r2, [r4, #12]
    1524:	4013      	ands	r3, r2
    1526:	6822      	ldr	r2, [r4, #0]
    1528:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    152a:	68e3      	ldr	r3, [r4, #12]
    152c:	68a2      	ldr	r2, [r4, #8]
    152e:	1a9a      	subs	r2, r3, r2
    1530:	6861      	ldr	r1, [r4, #4]
    1532:	428a      	cmp	r2, r1
    1534:	d901      	bls.n	153a <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
    1536:	1a59      	subs	r1, r3, r1
    1538:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
    153a:	3301      	adds	r3, #1
    153c:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    153e:	2000      	movs	r0, #0
    1540:	bd70      	pop	{r4, r5, r6, pc}
    1542:	46c0      	nop			; (mov r8, r8)
    1544:	00004170 	.word	0x00004170
    1548:	000013cd 	.word	0x000013cd

0000154c <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    154c:	b510      	push	{r4, lr}
    154e:	0004      	movs	r4, r0
	ASSERT(rb);
    1550:	1e43      	subs	r3, r0, #1
    1552:	4198      	sbcs	r0, r3
    1554:	b2c0      	uxtb	r0, r0
    1556:	2267      	movs	r2, #103	; 0x67
    1558:	4903      	ldr	r1, [pc, #12]	; (1568 <ringbuffer_num+0x1c>)
    155a:	4b04      	ldr	r3, [pc, #16]	; (156c <ringbuffer_num+0x20>)
    155c:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    155e:	68e0      	ldr	r0, [r4, #12]
    1560:	68a3      	ldr	r3, [r4, #8]
    1562:	1ac0      	subs	r0, r0, r3
}
    1564:	bd10      	pop	{r4, pc}
    1566:	46c0      	nop			; (mov r8, r8)
    1568:	00004170 	.word	0x00004170
    156c:	000013cd 	.word	0x000013cd

00001570 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1570:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    1572:	4b06      	ldr	r3, [pc, #24]	; (158c <_init_chip+0x1c>)
    1574:	685a      	ldr	r2, [r3, #4]
    1576:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
    1578:	4b05      	ldr	r3, [pc, #20]	; (1590 <_init_chip+0x20>)
    157a:	4798      	blx	r3
	_sysctrl_init_sources();
    157c:	4b05      	ldr	r3, [pc, #20]	; (1594 <_init_chip+0x24>)
    157e:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
    1580:	4b05      	ldr	r3, [pc, #20]	; (1598 <_init_chip+0x28>)
    1582:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    1584:	20ff      	movs	r0, #255	; 0xff
    1586:	4b05      	ldr	r3, [pc, #20]	; (159c <_init_chip+0x2c>)
    1588:	4798      	blx	r3
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
    158a:	bd10      	pop	{r4, pc}
    158c:	41004000 	.word	0x41004000
    1590:	0000182d 	.word	0x0000182d
    1594:	00001ded 	.word	0x00001ded
    1598:	00001e49 	.word	0x00001e49
    159c:	00001759 	.word	0x00001759

000015a0 <_dac_init>:
typedef uint8_t  hri_dac_intflag_reg_t;
typedef uint8_t  hri_dac_status_reg_t;

static inline void hri_dac_wait_for_sync(const void *const hw)
{
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    15a0:	79c3      	ldrb	r3, [r0, #7]
    15a2:	09db      	lsrs	r3, r3, #7
    15a4:	d1fc      	bne.n	15a0 <_dac_init>
    15a6:	79c3      	ldrb	r3, [r0, #7]
    15a8:	09db      	lsrs	r3, r3, #7
    15aa:	d1fc      	bne.n	15a6 <_dac_init+0x6>

static inline hri_dac_ctrla_reg_t hri_dac_get_CTRLA_reg(const void *const hw, hri_dac_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_dac_wait_for_sync(hw);
	tmp = ((Dac *)hw)->CTRLA.reg;
    15ac:	7803      	ldrb	r3, [r0, #0]
 * param[in] hw The pointer to DAC hardware instance
 */
static int32_t _dac_init(void *const hw)
{
	hri_dac_wait_for_sync(hw);
	if (hri_dac_get_CTRLA_reg(hw, DAC_CTRLA_ENABLE)) {
    15ae:	079b      	lsls	r3, r3, #30
    15b0:	d507      	bpl.n	15c2 <_dac_init+0x22>
}

static inline void hri_dac_write_CTRLA_reg(const void *const hw, hri_dac_ctrla_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->CTRLA.reg = data;
    15b2:	2300      	movs	r3, #0
    15b4:	7003      	strb	r3, [r0, #0]
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    15b6:	79c3      	ldrb	r3, [r0, #7]
    15b8:	09db      	lsrs	r3, r3, #7
    15ba:	d1fc      	bne.n	15b6 <_dac_init+0x16>
    15bc:	79c3      	ldrb	r3, [r0, #7]
    15be:	09db      	lsrs	r3, r3, #7
    15c0:	d1fc      	bne.n	15bc <_dac_init+0x1c>
	((Dac *)hw)->CTRLA.reg = data;
    15c2:	2301      	movs	r3, #1
    15c4:	7003      	strb	r3, [r0, #0]
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    15c6:	79c3      	ldrb	r3, [r0, #7]
    15c8:	09db      	lsrs	r3, r3, #7
    15ca:	d1fc      	bne.n	15c6 <_dac_init+0x26>
    15cc:	79c3      	ldrb	r3, [r0, #7]
    15ce:	09db      	lsrs	r3, r3, #7
    15d0:	d1fc      	bne.n	15cc <_dac_init+0x2c>
}

static inline void hri_dac_write_EVCTRL_reg(const void *const hw, hri_dac_evctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->EVCTRL.reg = data;
    15d2:	7083      	strb	r3, [r0, #2]
	((Dac *)hw)->CTRLB.reg = data;
    15d4:	2241      	movs	r2, #65	; 0x41
    15d6:	7042      	strb	r2, [r0, #1]
	((Dac *)hw)->CTRLA.reg = data;
    15d8:	7003      	strb	r3, [r0, #0]
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    15da:	79c3      	ldrb	r3, [r0, #7]
    15dc:	09db      	lsrs	r3, r3, #7
    15de:	d1fc      	bne.n	15da <_dac_init+0x3a>

	hri_dac_write_EVCTRL_reg(hw, _dac.ev_ctrl);
	hri_dac_write_CTRLB_reg(hw, _dac.ctrlb);
	hri_dac_write_CTRLA_reg(hw, _dac.ctrla);
	return ERR_NONE;
}
    15e0:	2000      	movs	r0, #0
    15e2:	4770      	bx	lr

000015e4 <_dac_sync_init>:
{
    15e4:	b570      	push	{r4, r5, r6, lr}
    15e6:	0005      	movs	r5, r0
    15e8:	000c      	movs	r4, r1
	ASSERT(device);
    15ea:	1e43      	subs	r3, r0, #1
    15ec:	4198      	sbcs	r0, r3
    15ee:	b2c0      	uxtb	r0, r0
    15f0:	2249      	movs	r2, #73	; 0x49
    15f2:	4904      	ldr	r1, [pc, #16]	; (1604 <_dac_sync_init+0x20>)
    15f4:	4b04      	ldr	r3, [pc, #16]	; (1608 <_dac_sync_init+0x24>)
    15f6:	4798      	blx	r3
	device->hw = hw;
    15f8:	602c      	str	r4, [r5, #0]
	return _dac_init(device->hw);
    15fa:	0020      	movs	r0, r4
    15fc:	4b03      	ldr	r3, [pc, #12]	; (160c <_dac_sync_init+0x28>)
    15fe:	4798      	blx	r3
}
    1600:	bd70      	pop	{r4, r5, r6, pc}
    1602:	46c0      	nop			; (mov r8, r8)
    1604:	00004194 	.word	0x00004194
    1608:	000013cd 	.word	0x000013cd
    160c:	000015a1 	.word	0x000015a1

00001610 <_ext_irq_init>:
typedef uint8_t  hri_eic_nmiflag_reg_t;
typedef uint8_t  hri_eic_status_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw)
{
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    1610:	4b20      	ldr	r3, [pc, #128]	; (1694 <_ext_irq_init+0x84>)
    1612:	785b      	ldrb	r3, [r3, #1]
    1614:	09db      	lsrs	r3, r3, #7
    1616:	d1fb      	bne.n	1610 <_ext_irq_init>
    1618:	4b1e      	ldr	r3, [pc, #120]	; (1694 <_ext_irq_init+0x84>)
    161a:	785b      	ldrb	r3, [r3, #1]
    161c:	09db      	lsrs	r3, r3, #7
    161e:	d1fb      	bne.n	1618 <_ext_irq_init+0x8>

static inline hri_eic_ctrl_reg_t hri_eic_get_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw);
	tmp = ((Eic *)hw)->CTRL.reg;
    1620:	4b1c      	ldr	r3, [pc, #112]	; (1694 <_ext_irq_init+0x84>)
    1622:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC);
	if (hri_eic_get_CTRL_reg(EIC, EIC_CTRL_ENABLE)) {
    1624:	079b      	lsls	r3, r3, #30
    1626:	d50a      	bpl.n	163e <_ext_irq_init+0x2e>
}

static inline void hri_eic_write_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRL.reg = data;
    1628:	2200      	movs	r2, #0
    162a:	4b1a      	ldr	r3, [pc, #104]	; (1694 <_ext_irq_init+0x84>)
    162c:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    162e:	4b19      	ldr	r3, [pc, #100]	; (1694 <_ext_irq_init+0x84>)
    1630:	785b      	ldrb	r3, [r3, #1]
    1632:	09db      	lsrs	r3, r3, #7
    1634:	d1fb      	bne.n	162e <_ext_irq_init+0x1e>
    1636:	4b17      	ldr	r3, [pc, #92]	; (1694 <_ext_irq_init+0x84>)
    1638:	785b      	ldrb	r3, [r3, #1]
    163a:	09db      	lsrs	r3, r3, #7
    163c:	d1fb      	bne.n	1636 <_ext_irq_init+0x26>
	((Eic *)hw)->CTRL.reg = data;
    163e:	2201      	movs	r2, #1
    1640:	4b14      	ldr	r3, [pc, #80]	; (1694 <_ext_irq_init+0x84>)
    1642:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    1644:	4b13      	ldr	r3, [pc, #76]	; (1694 <_ext_irq_init+0x84>)
    1646:	785b      	ldrb	r3, [r3, #1]
    1648:	09db      	lsrs	r3, r3, #7
    164a:	d1fb      	bne.n	1644 <_ext_irq_init+0x34>
    164c:	4b11      	ldr	r3, [pc, #68]	; (1694 <_ext_irq_init+0x84>)
    164e:	785b      	ldrb	r3, [r3, #1]
    1650:	09db      	lsrs	r3, r3, #7
    1652:	d1fb      	bne.n	164c <_ext_irq_init+0x3c>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    1654:	4b0f      	ldr	r3, [pc, #60]	; (1694 <_ext_irq_init+0x84>)
    1656:	2200      	movs	r2, #0
    1658:	709a      	strb	r2, [r3, #2]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    165a:	605a      	str	r2, [r3, #4]
}

static inline void hri_eic_write_WAKEUP_reg(const void *const hw, hri_eic_wakeup_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->WAKEUP.reg = data;
    165c:	615a      	str	r2, [r3, #20]
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    165e:	619a      	str	r2, [r3, #24]
    1660:	61da      	str	r2, [r3, #28]
	((Eic *)hw)->CTRL.reg |= EIC_CTRL_ENABLE;
    1662:	781a      	ldrb	r2, [r3, #0]
    1664:	2102      	movs	r1, #2
    1666:	430a      	orrs	r2, r1
    1668:	b2d2      	uxtb	r2, r2
    166a:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    166c:	4b09      	ldr	r3, [pc, #36]	; (1694 <_ext_irq_init+0x84>)
    166e:	785b      	ldrb	r3, [r3, #1]
    1670:	09db      	lsrs	r3, r3, #7
    1672:	d1fb      	bne.n	166c <_ext_irq_init+0x5c>
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1674:	4b08      	ldr	r3, [pc, #32]	; (1698 <_ext_irq_init+0x88>)
    1676:	2210      	movs	r2, #16
    1678:	2180      	movs	r1, #128	; 0x80
    167a:	505a      	str	r2, [r3, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    167c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1680:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1684:	3101      	adds	r1, #1
    1686:	31ff      	adds	r1, #255	; 0xff
    1688:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    168a:	601a      	str	r2, [r3, #0]

	NVIC_DisableIRQ(EIC_IRQn);
	NVIC_ClearPendingIRQ(EIC_IRQn);
	NVIC_EnableIRQ(EIC_IRQn);

	callback = cb;
    168c:	4b03      	ldr	r3, [pc, #12]	; (169c <_ext_irq_init+0x8c>)
    168e:	6018      	str	r0, [r3, #0]

	return ERR_NONE;
}
    1690:	2000      	movs	r0, #0
    1692:	4770      	bx	lr
    1694:	40001800 	.word	0x40001800
    1698:	e000e100 	.word	0xe000e100
    169c:	200001a0 	.word	0x200001a0

000016a0 <EIC_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_Handler(void)
{
    16a0:	b570      	push	{r4, r5, r6, lr}
    16a2:	b082      	sub	sp, #8
	return ((Eic *)hw)->INTFLAG.reg;
    16a4:	4b26      	ldr	r3, [pc, #152]	; (1740 <EIC_Handler+0xa0>)
    16a6:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
    16a8:	68d9      	ldr	r1, [r3, #12]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
    16aa:	400a      	ands	r2, r1
    16ac:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    16ae:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    16b0:	611a      	str	r2, [r3, #16]

	ASSERT(callback);
    16b2:	4b24      	ldr	r3, [pc, #144]	; (1744 <EIC_Handler+0xa4>)
    16b4:	6818      	ldr	r0, [r3, #0]
    16b6:	1e43      	subs	r3, r0, #1
    16b8:	4198      	sbcs	r0, r3
    16ba:	b2c0      	uxtb	r0, r0
    16bc:	22d2      	movs	r2, #210	; 0xd2
    16be:	4922      	ldr	r1, [pc, #136]	; (1748 <EIC_Handler+0xa8>)
    16c0:	4b22      	ldr	r3, [pc, #136]	; (174c <EIC_Handler+0xac>)
    16c2:	4798      	blx	r3
	uint32_t          pin = INVALID_PIN_NUMBER;
    16c4:	2501      	movs	r5, #1
    16c6:	426d      	negs	r5, r5

	while (flags) {
    16c8:	e02e      	b.n	1728 <EIC_Handler+0x88>
					break;
				}
				if (_map[middle].extint < pos) {
					lower = middle + 1;
				} else {
					upper = middle - 1;
    16ca:	3901      	subs	r1, #1
    16cc:	b2ce      	uxtb	r6, r1
			while (upper >= lower) {
    16ce:	42b0      	cmp	r0, r6
    16d0:	d80e      	bhi.n	16f0 <EIC_Handler+0x50>
				middle = (upper + lower) >> 1;
    16d2:	1832      	adds	r2, r6, r0
    16d4:	1052      	asrs	r2, r2, #1
    16d6:	b2d1      	uxtb	r1, r2
				if (_map[middle].extint == pos) {
    16d8:	23ff      	movs	r3, #255	; 0xff
    16da:	4013      	ands	r3, r2
    16dc:	00db      	lsls	r3, r3, #3
    16de:	4a1c      	ldr	r2, [pc, #112]	; (1750 <EIC_Handler+0xb0>)
    16e0:	5c9b      	ldrb	r3, [r3, r2]
    16e2:	42a3      	cmp	r3, r4
    16e4:	d003      	beq.n	16ee <EIC_Handler+0x4e>
				if (_map[middle].extint < pos) {
    16e6:	daf0      	bge.n	16ca <EIC_Handler+0x2a>
					lower = middle + 1;
    16e8:	3101      	adds	r1, #1
    16ea:	b2c8      	uxtb	r0, r1
    16ec:	e7ef      	b.n	16ce <EIC_Handler+0x2e>
					pin = _map[middle].pin;
    16ee:	250e      	movs	r5, #14
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    16f0:	1c6b      	adds	r3, r5, #1
    16f2:	d003      	beq.n	16fc <EIC_Handler+0x5c>
				callback(pin);
    16f4:	4b13      	ldr	r3, [pc, #76]	; (1744 <EIC_Handler+0xa4>)
    16f6:	681b      	ldr	r3, [r3, #0]
    16f8:	0028      	movs	r0, r5
    16fa:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    16fc:	2201      	movs	r2, #1
    16fe:	40a2      	lsls	r2, r4
    1700:	9b01      	ldr	r3, [sp, #4]
    1702:	4393      	bics	r3, r2
    1704:	9301      	str	r3, [sp, #4]
			pos = ffs(flags) - 1;
    1706:	9801      	ldr	r0, [sp, #4]
    1708:	4b12      	ldr	r3, [pc, #72]	; (1754 <EIC_Handler+0xb4>)
    170a:	4798      	blx	r3
    170c:	3801      	subs	r0, #1
    170e:	b244      	sxtb	r4, r0
		while (-1 != pos) {
    1710:	1c63      	adds	r3, r4, #1
    1712:	d002      	beq.n	171a <EIC_Handler+0x7a>
    1714:	2601      	movs	r6, #1
    1716:	2000      	movs	r0, #0
    1718:	e7d9      	b.n	16ce <EIC_Handler+0x2e>
	return ((Eic *)hw)->INTFLAG.reg;
    171a:	4b09      	ldr	r3, [pc, #36]	; (1740 <EIC_Handler+0xa0>)
    171c:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
    171e:	68d9      	ldr	r1, [r3, #12]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
    1720:	400a      	ands	r2, r1
    1722:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    1724:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    1726:	611a      	str	r2, [r3, #16]
	while (flags) {
    1728:	9b01      	ldr	r3, [sp, #4]
    172a:	2b00      	cmp	r3, #0
    172c:	d005      	beq.n	173a <EIC_Handler+0x9a>
		pos = ffs(flags) - 1;
    172e:	9801      	ldr	r0, [sp, #4]
    1730:	4b08      	ldr	r3, [pc, #32]	; (1754 <EIC_Handler+0xb4>)
    1732:	4798      	blx	r3
    1734:	3801      	subs	r0, #1
    1736:	b244      	sxtb	r4, r0
		while (-1 != pos) {
    1738:	e7ea      	b.n	1710 <EIC_Handler+0x70>
	}
}
    173a:	b002      	add	sp, #8
    173c:	bd70      	pop	{r4, r5, r6, pc}
    173e:	46c0      	nop			; (mov r8, r8)
    1740:	40001800 	.word	0x40001800
    1744:	200001a0 	.word	0x200001a0
    1748:	000041b4 	.word	0x000041b4
    174c:	000013cd 	.word	0x000013cd
    1750:	000041ac 	.word	0x000041ac
    1754:	00004021 	.word	0x00004021

00001758 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1758:	07c3      	lsls	r3, r0, #31
    175a:	d509      	bpl.n	1770 <_gclk_init_generators_by_fref+0x18>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
    175c:	4b27      	ldr	r3, [pc, #156]	; (17fc <_gclk_init_generators_by_fref+0xa4>)
    175e:	2280      	movs	r2, #128	; 0x80
    1760:	0052      	lsls	r2, r2, #1
    1762:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    1764:	4a26      	ldr	r2, [pc, #152]	; (1800 <_gclk_init_generators_by_fref+0xa8>)
    1766:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    1768:	4b24      	ldr	r3, [pc, #144]	; (17fc <_gclk_init_generators_by_fref+0xa4>)
    176a:	785b      	ldrb	r3, [r3, #1]
    176c:	09db      	lsrs	r3, r3, #7
    176e:	d1fb      	bne.n	1768 <_gclk_init_generators_by_fref+0x10>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SRC | GCLK_GENCTRL_ID(0));
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    1770:	0783      	lsls	r3, r0, #30
    1772:	d508      	bpl.n	1786 <_gclk_init_generators_by_fref+0x2e>
	((Gclk *)hw)->GENDIV.reg = data;
    1774:	4b21      	ldr	r3, [pc, #132]	; (17fc <_gclk_init_generators_by_fref+0xa4>)
    1776:	4a23      	ldr	r2, [pc, #140]	; (1804 <_gclk_init_generators_by_fref+0xac>)
    1778:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    177a:	4a23      	ldr	r2, [pc, #140]	; (1808 <_gclk_init_generators_by_fref+0xb0>)
    177c:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    177e:	4b1f      	ldr	r3, [pc, #124]	; (17fc <_gclk_init_generators_by_fref+0xa4>)
    1780:	785b      	ldrb	r3, [r3, #1]
    1782:	09db      	lsrs	r3, r3, #7
    1784:	d1fb      	bne.n	177e <_gclk_init_generators_by_fref+0x26>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SRC | GCLK_GENCTRL_ID(1));
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    1786:	0743      	lsls	r3, r0, #29
    1788:	d508      	bpl.n	179c <_gclk_init_generators_by_fref+0x44>
	((Gclk *)hw)->GENDIV.reg = data;
    178a:	4b1c      	ldr	r3, [pc, #112]	; (17fc <_gclk_init_generators_by_fref+0xa4>)
    178c:	4a1f      	ldr	r2, [pc, #124]	; (180c <_gclk_init_generators_by_fref+0xb4>)
    178e:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    1790:	4a1f      	ldr	r2, [pc, #124]	; (1810 <_gclk_init_generators_by_fref+0xb8>)
    1792:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    1794:	4b19      	ldr	r3, [pc, #100]	; (17fc <_gclk_init_generators_by_fref+0xa4>)
    1796:	785b      	ldrb	r3, [r3, #1]
    1798:	09db      	lsrs	r3, r3, #7
    179a:	d1fb      	bne.n	1794 <_gclk_init_generators_by_fref+0x3c>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    179c:	0703      	lsls	r3, r0, #28
    179e:	d508      	bpl.n	17b2 <_gclk_init_generators_by_fref+0x5a>
	((Gclk *)hw)->GENDIV.reg = data;
    17a0:	4b16      	ldr	r3, [pc, #88]	; (17fc <_gclk_init_generators_by_fref+0xa4>)
    17a2:	4a1c      	ldr	r2, [pc, #112]	; (1814 <_gclk_init_generators_by_fref+0xbc>)
    17a4:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    17a6:	4a1c      	ldr	r2, [pc, #112]	; (1818 <_gclk_init_generators_by_fref+0xc0>)
    17a8:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    17aa:	4b14      	ldr	r3, [pc, #80]	; (17fc <_gclk_init_generators_by_fref+0xa4>)
    17ac:	785b      	ldrb	r3, [r3, #1]
    17ae:	09db      	lsrs	r3, r3, #7
    17b0:	d1fb      	bne.n	17aa <_gclk_init_generators_by_fref+0x52>
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SRC | GCLK_GENCTRL_ID(3));
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    17b2:	06c3      	lsls	r3, r0, #27
    17b4:	d509      	bpl.n	17ca <_gclk_init_generators_by_fref+0x72>
	((Gclk *)hw)->GENDIV.reg = data;
    17b6:	4b11      	ldr	r3, [pc, #68]	; (17fc <_gclk_init_generators_by_fref+0xa4>)
    17b8:	2282      	movs	r2, #130	; 0x82
    17ba:	0052      	lsls	r2, r2, #1
    17bc:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    17be:	4a17      	ldr	r2, [pc, #92]	; (181c <_gclk_init_generators_by_fref+0xc4>)
    17c0:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    17c2:	4b0e      	ldr	r3, [pc, #56]	; (17fc <_gclk_init_generators_by_fref+0xa4>)
    17c4:	785b      	ldrb	r3, [r3, #1]
    17c6:	09db      	lsrs	r3, r3, #7
    17c8:	d1fb      	bne.n	17c2 <_gclk_init_generators_by_fref+0x6a>
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SRC | GCLK_GENCTRL_ID(4));
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    17ca:	0683      	lsls	r3, r0, #26
    17cc:	d508      	bpl.n	17e0 <_gclk_init_generators_by_fref+0x88>
	((Gclk *)hw)->GENDIV.reg = data;
    17ce:	4b0b      	ldr	r3, [pc, #44]	; (17fc <_gclk_init_generators_by_fref+0xa4>)
    17d0:	4a13      	ldr	r2, [pc, #76]	; (1820 <_gclk_init_generators_by_fref+0xc8>)
    17d2:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    17d4:	4a13      	ldr	r2, [pc, #76]	; (1824 <_gclk_init_generators_by_fref+0xcc>)
    17d6:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    17d8:	4b08      	ldr	r3, [pc, #32]	; (17fc <_gclk_init_generators_by_fref+0xa4>)
    17da:	785b      	ldrb	r3, [r3, #1]
    17dc:	09db      	lsrs	r3, r3, #7
    17de:	d1fb      	bne.n	17d8 <_gclk_init_generators_by_fref+0x80>
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SRC | GCLK_GENCTRL_ID(5));
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    17e0:	0643      	lsls	r3, r0, #25
    17e2:	d509      	bpl.n	17f8 <_gclk_init_generators_by_fref+0xa0>
	((Gclk *)hw)->GENDIV.reg = data;
    17e4:	4b05      	ldr	r3, [pc, #20]	; (17fc <_gclk_init_generators_by_fref+0xa4>)
    17e6:	2283      	movs	r2, #131	; 0x83
    17e8:	0052      	lsls	r2, r2, #1
    17ea:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    17ec:	4a0e      	ldr	r2, [pc, #56]	; (1828 <_gclk_init_generators_by_fref+0xd0>)
    17ee:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    17f0:	4b02      	ldr	r3, [pc, #8]	; (17fc <_gclk_init_generators_by_fref+0xa4>)
    17f2:	785b      	ldrb	r3, [r3, #1]
    17f4:	09db      	lsrs	r3, r3, #7
    17f6:	d1fb      	bne.n	17f0 <_gclk_init_generators_by_fref+0x98>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
    17f8:	4770      	bx	lr
    17fa:	46c0      	nop			; (mov r8, r8)
    17fc:	40000c00 	.word	0x40000c00
    1800:	00290800 	.word	0x00290800
    1804:	00000601 	.word	0x00000601
    1808:	00010801 	.word	0x00010801
    180c:	00000402 	.word	0x00000402
    1810:	00210602 	.word	0x00210602
    1814:	00000803 	.word	0x00000803
    1818:	00290603 	.word	0x00290603
    181c:	00090704 	.word	0x00090704
    1820:	00000305 	.word	0x00000305
    1824:	00010805 	.word	0x00010805
    1828:	00210406 	.word	0x00210406

0000182c <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
    182c:	4b06      	ldr	r3, [pc, #24]	; (1848 <_pm_init+0x1c>)
    182e:	7a1a      	ldrb	r2, [r3, #8]
    1830:	b2d2      	uxtb	r2, r2
    1832:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
    1834:	7a5a      	ldrb	r2, [r3, #9]
    1836:	b2d2      	uxtb	r2, r2
    1838:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
    183a:	7a9a      	ldrb	r2, [r3, #10]
    183c:	b2d2      	uxtb	r2, r2
    183e:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
    1840:	7ada      	ldrb	r2, [r3, #11]
    1842:	b2d2      	uxtb	r2, r2
    1844:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
    1846:	4770      	bx	lr
    1848:	40000400 	.word	0x40000400

0000184c <_sercom_get_hardware_index>:
{
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    184c:	4b02      	ldr	r3, [pc, #8]	; (1858 <_sercom_get_hardware_index+0xc>)
    184e:	469c      	mov	ip, r3
    1850:	4460      	add	r0, ip
    1852:	0a80      	lsrs	r0, r0, #10
    1854:	b2c0      	uxtb	r0, r0
}
    1856:	4770      	bx	lr
    1858:	bdfff800 	.word	0xbdfff800

0000185c <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    185c:	b510      	push	{r4, lr}
	void *hw = device->hw;
    185e:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    1860:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    1862:	07db      	lsls	r3, r3, #31
    1864:	d502      	bpl.n	186c <_sercom_usart_interrupt_handler+0x10>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    1866:	7da3      	ldrb	r3, [r4, #22]
    1868:	07db      	lsls	r3, r3, #31
    186a:	d40f      	bmi.n	188c <_sercom_usart_interrupt_handler+0x30>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    186c:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    186e:	079b      	lsls	r3, r3, #30
    1870:	d502      	bpl.n	1878 <_sercom_usart_interrupt_handler+0x1c>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    1872:	7da3      	ldrb	r3, [r4, #22]
    1874:	079b      	lsls	r3, r3, #30
    1876:	d40e      	bmi.n	1896 <_sercom_usart_interrupt_handler+0x3a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    1878:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    187a:	075b      	lsls	r3, r3, #29
    187c:	d515      	bpl.n	18aa <_sercom_usart_interrupt_handler+0x4e>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    187e:	8b62      	ldrh	r2, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    1880:	2337      	movs	r3, #55	; 0x37
    1882:	421a      	tst	r2, r3
    1884:	d00c      	beq.n	18a0 <_sercom_usart_interrupt_handler+0x44>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    1886:	3308      	adds	r3, #8
    1888:	8363      	strh	r3, [r4, #26]
		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
		status = hri_sercomusart_read_STATUS_reg(hw);
		hri_sercomusart_clear_STATUS_reg(hw, status);
	}
}
    188a:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    188c:	2301      	movs	r3, #1
    188e:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    1890:	6803      	ldr	r3, [r0, #0]
    1892:	4798      	blx	r3
    1894:	e7f9      	b.n	188a <_sercom_usart_interrupt_handler+0x2e>
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    1896:	2302      	movs	r3, #2
    1898:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    189a:	6883      	ldr	r3, [r0, #8]
    189c:	4798      	blx	r3
    189e:	e7f4      	b.n	188a <_sercom_usart_interrupt_handler+0x2e>
		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    18a0:	6843      	ldr	r3, [r0, #4]
	return ((Sercom *)hw)->USART.DATA.reg;
    18a2:	8d21      	ldrh	r1, [r4, #40]	; 0x28
    18a4:	b2c9      	uxtb	r1, r1
    18a6:	4798      	blx	r3
    18a8:	e7ef      	b.n	188a <_sercom_usart_interrupt_handler+0x2e>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    18aa:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    18ac:	09db      	lsrs	r3, r3, #7
    18ae:	d0ec      	beq.n	188a <_sercom_usart_interrupt_handler+0x2e>
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    18b0:	2380      	movs	r3, #128	; 0x80
    18b2:	7623      	strb	r3, [r4, #24]
		device->usart_cb.error_cb(device);
    18b4:	68c3      	ldr	r3, [r0, #12]
    18b6:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    18b8:	8b63      	ldrh	r3, [r4, #26]
    18ba:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    18bc:	8363      	strh	r3, [r4, #26]
    18be:	e7e4      	b.n	188a <_sercom_usart_interrupt_handler+0x2e>

000018c0 <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM3) {
    18c0:	4b03      	ldr	r3, [pc, #12]	; (18d0 <_sercom_init_irq_param+0x10>)
    18c2:	4298      	cmp	r0, r3
    18c4:	d000      	beq.n	18c8 <_sercom_init_irq_param+0x8>
		_sercom3_dev = (struct _usart_async_device *)dev;
	}
}
    18c6:	4770      	bx	lr
		_sercom3_dev = (struct _usart_async_device *)dev;
    18c8:	4b02      	ldr	r3, [pc, #8]	; (18d4 <_sercom_init_irq_param+0x14>)
    18ca:	6019      	str	r1, [r3, #0]
}
    18cc:	e7fb      	b.n	18c6 <_sercom_init_irq_param+0x6>
    18ce:	46c0      	nop			; (mov r8, r8)
    18d0:	42001400 	.word	0x42001400
    18d4:	200001a4 	.word	0x200001a4

000018d8 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    18d8:	b510      	push	{r4, lr}
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    18da:	4b02      	ldr	r3, [pc, #8]	; (18e4 <_sercom_get_irq_num+0xc>)
    18dc:	4798      	blx	r3
    18de:	3009      	adds	r0, #9
    18e0:	b2c0      	uxtb	r0, r0
}
    18e2:	bd10      	pop	{r4, pc}
    18e4:	0000184d 	.word	0x0000184d

000018e8 <_get_sercom_index>:
{
    18e8:	b510      	push	{r4, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    18ea:	4b0b      	ldr	r3, [pc, #44]	; (1918 <_get_sercom_index+0x30>)
    18ec:	4798      	blx	r3
    18ee:	0002      	movs	r2, r0
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    18f0:	2000      	movs	r0, #0
    18f2:	2800      	cmp	r0, #0
    18f4:	d006      	beq.n	1904 <_get_sercom_index+0x1c>
	ASSERT(false);
    18f6:	4a09      	ldr	r2, [pc, #36]	; (191c <_get_sercom_index+0x34>)
    18f8:	4909      	ldr	r1, [pc, #36]	; (1920 <_get_sercom_index+0x38>)
    18fa:	2000      	movs	r0, #0
    18fc:	4b09      	ldr	r3, [pc, #36]	; (1924 <_get_sercom_index+0x3c>)
    18fe:	4798      	blx	r3
	return 0;
    1900:	2000      	movs	r0, #0
}
    1902:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == sercom_offset) {
    1904:	0083      	lsls	r3, r0, #2
    1906:	181b      	adds	r3, r3, r0
    1908:	0099      	lsls	r1, r3, #2
    190a:	4b07      	ldr	r3, [pc, #28]	; (1928 <_get_sercom_index+0x40>)
    190c:	5ccb      	ldrb	r3, [r1, r3]
    190e:	429a      	cmp	r2, r3
    1910:	d0f7      	beq.n	1902 <_get_sercom_index+0x1a>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    1912:	3001      	adds	r0, #1
    1914:	b2c0      	uxtb	r0, r0
    1916:	e7ec      	b.n	18f2 <_get_sercom_index+0xa>
    1918:	0000184d 	.word	0x0000184d
    191c:	0000025e 	.word	0x0000025e
    1920:	0000423c 	.word	0x0000423c
    1924:	000013cd 	.word	0x000013cd
    1928:	000041cc 	.word	0x000041cc

0000192c <_usart_init>:
{
    192c:	b570      	push	{r4, r5, r6, lr}
    192e:	0004      	movs	r4, r0
	uint8_t i = _get_sercom_index(hw);
    1930:	4b38      	ldr	r3, [pc, #224]	; (1a14 <_usart_init+0xe8>)
    1932:	4798      	blx	r3
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    1934:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    1936:	07db      	lsls	r3, r3, #31
    1938:	d41d      	bmi.n	1976 <_usart_init+0x4a>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    193a:	0083      	lsls	r3, r0, #2
    193c:	181b      	adds	r3, r3, r0
    193e:	009a      	lsls	r2, r3, #2
    1940:	4b35      	ldr	r3, [pc, #212]	; (1a18 <_usart_init+0xec>)
    1942:	189b      	adds	r3, r3, r2
    1944:	685a      	ldr	r2, [r3, #4]
    1946:	231c      	movs	r3, #28
    1948:	401a      	ands	r2, r3
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    194a:	69e3      	ldr	r3, [r4, #28]
    194c:	079b      	lsls	r3, r3, #30
    194e:	d1fc      	bne.n	194a <_usart_init+0x1e>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    1950:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    1952:	079b      	lsls	r3, r3, #30
    1954:	d509      	bpl.n	196a <_usart_init+0x3e>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    1956:	6823      	ldr	r3, [r4, #0]
    1958:	2102      	movs	r1, #2
    195a:	438b      	bics	r3, r1
    195c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    195e:	69e3      	ldr	r3, [r4, #28]
    1960:	079b      	lsls	r3, r3, #30
    1962:	d1fc      	bne.n	195e <_usart_init+0x32>
    1964:	69e3      	ldr	r3, [r4, #28]
    1966:	079b      	lsls	r3, r3, #30
    1968:	d4fc      	bmi.n	1964 <_usart_init+0x38>
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    196a:	2301      	movs	r3, #1
    196c:	4313      	orrs	r3, r2
	((Sercom *)hw)->USART.CTRLA.reg = data;
    196e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1970:	69e3      	ldr	r3, [r4, #28]
    1972:	079b      	lsls	r3, r3, #30
    1974:	d1fc      	bne.n	1970 <_usart_init+0x44>
    1976:	69e3      	ldr	r3, [r4, #28]
    1978:	07db      	lsls	r3, r3, #31
    197a:	d4fc      	bmi.n	1976 <_usart_init+0x4a>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    197c:	0083      	lsls	r3, r0, #2
    197e:	181b      	adds	r3, r3, r0
    1980:	009a      	lsls	r2, r3, #2
    1982:	4b25      	ldr	r3, [pc, #148]	; (1a18 <_usart_init+0xec>)
    1984:	189b      	adds	r3, r3, r2
    1986:	685b      	ldr	r3, [r3, #4]
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1988:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    198a:	69e3      	ldr	r3, [r4, #28]
    198c:	079b      	lsls	r3, r3, #30
    198e:	d1fc      	bne.n	198a <_usart_init+0x5e>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    1990:	0083      	lsls	r3, r0, #2
    1992:	181b      	adds	r3, r3, r0
    1994:	009a      	lsls	r2, r3, #2
    1996:	4b20      	ldr	r3, [pc, #128]	; (1a18 <_usart_init+0xec>)
    1998:	189b      	adds	r3, r3, r2
    199a:	689b      	ldr	r3, [r3, #8]
	((Sercom *)hw)->USART.CTRLB.reg = data;
    199c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    199e:	69e3      	ldr	r3, [r4, #28]
    19a0:	075b      	lsls	r3, r3, #29
    19a2:	d1fc      	bne.n	199e <_usart_init+0x72>
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    19a4:	0083      	lsls	r3, r0, #2
    19a6:	181b      	adds	r3, r3, r0
    19a8:	009a      	lsls	r2, r3, #2
    19aa:	4b1b      	ldr	r3, [pc, #108]	; (1a18 <_usart_init+0xec>)
    19ac:	189b      	adds	r3, r3, r2
    19ae:	685b      	ldr	r3, [r3, #4]
    19b0:	049a      	lsls	r2, r3, #18
    19b2:	d40b      	bmi.n	19cc <_usart_init+0xa0>
    19b4:	22c0      	movs	r2, #192	; 0xc0
    19b6:	01d2      	lsls	r2, r2, #7
    19b8:	4213      	tst	r3, r2
    19ba:	d107      	bne.n	19cc <_usart_init+0xa0>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    19bc:	0083      	lsls	r3, r0, #2
    19be:	181b      	adds	r3, r3, r0
    19c0:	009a      	lsls	r2, r3, #2
    19c2:	4b15      	ldr	r3, [pc, #84]	; (1a18 <_usart_init+0xec>)
    19c4:	189b      	adds	r3, r3, r2
    19c6:	899b      	ldrh	r3, [r3, #12]
	((Sercom *)hw)->USART.BAUD.reg = data;
    19c8:	81a3      	strh	r3, [r4, #12]
    19ca:	e015      	b.n	19f8 <_usart_init+0xcc>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    19cc:	0083      	lsls	r3, r0, #2
    19ce:	181b      	adds	r3, r3, r0
    19d0:	009a      	lsls	r2, r3, #2
    19d2:	4911      	ldr	r1, [pc, #68]	; (1a18 <_usart_init+0xec>)
    19d4:	1889      	adds	r1, r1, r2
    19d6:	898a      	ldrh	r2, [r1, #12]
    19d8:	89a3      	ldrh	r3, [r4, #12]
    19da:	04d2      	lsls	r2, r2, #19
    19dc:	0cd2      	lsrs	r2, r2, #19
    19de:	0b5b      	lsrs	r3, r3, #13
    19e0:	035b      	lsls	r3, r3, #13
    19e2:	4313      	orrs	r3, r2
    19e4:	81a3      	strh	r3, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    19e6:	7b8b      	ldrb	r3, [r1, #14]
    19e8:	2207      	movs	r2, #7
    19ea:	401a      	ands	r2, r3
    19ec:	89a3      	ldrh	r3, [r4, #12]
    19ee:	0352      	lsls	r2, r2, #13
    19f0:	04db      	lsls	r3, r3, #19
    19f2:	0cdb      	lsrs	r3, r3, #19
    19f4:	4313      	orrs	r3, r2
    19f6:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    19f8:	4a07      	ldr	r2, [pc, #28]	; (1a18 <_usart_init+0xec>)
    19fa:	0083      	lsls	r3, r0, #2
    19fc:	181d      	adds	r5, r3, r0
    19fe:	00a9      	lsls	r1, r5, #2
    1a00:	000d      	movs	r5, r1
    1a02:	1851      	adds	r1, r2, r1
    1a04:	7bc9      	ldrb	r1, [r1, #15]
	((Sercom *)hw)->USART.RXPL.reg = data;
    1a06:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    1a08:	1952      	adds	r2, r2, r5
    1a0a:	7c12      	ldrb	r2, [r2, #16]
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    1a0c:	2330      	movs	r3, #48	; 0x30
    1a0e:	54e2      	strb	r2, [r4, r3]
}
    1a10:	2000      	movs	r0, #0
    1a12:	bd70      	pop	{r4, r5, r6, pc}
    1a14:	000018e9 	.word	0x000018e9
    1a18:	000041cc 	.word	0x000041cc

00001a1c <_usart_async_init>:
{
    1a1c:	b570      	push	{r4, r5, r6, lr}
    1a1e:	0006      	movs	r6, r0
    1a20:	000c      	movs	r4, r1
	ASSERT(device);
    1a22:	1e43      	subs	r3, r0, #1
    1a24:	4198      	sbcs	r0, r3
    1a26:	b2c0      	uxtb	r0, r0
    1a28:	22c4      	movs	r2, #196	; 0xc4
    1a2a:	4919      	ldr	r1, [pc, #100]	; (1a90 <_usart_async_init+0x74>)
    1a2c:	4b19      	ldr	r3, [pc, #100]	; (1a94 <_usart_async_init+0x78>)
    1a2e:	4798      	blx	r3
	init_status = _usart_init(hw);
    1a30:	0020      	movs	r0, r4
    1a32:	4b19      	ldr	r3, [pc, #100]	; (1a98 <_usart_async_init+0x7c>)
    1a34:	4798      	blx	r3
    1a36:	1e05      	subs	r5, r0, #0
	if (init_status) {
    1a38:	d001      	beq.n	1a3e <_usart_async_init+0x22>
}
    1a3a:	0028      	movs	r0, r5
    1a3c:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    1a3e:	61b4      	str	r4, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
    1a40:	0031      	movs	r1, r6
    1a42:	0020      	movs	r0, r4
    1a44:	4b15      	ldr	r3, [pc, #84]	; (1a9c <_usart_async_init+0x80>)
    1a46:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)_sercom_get_irq_num(hw));
    1a48:	0020      	movs	r0, r4
    1a4a:	4b15      	ldr	r3, [pc, #84]	; (1aa0 <_usart_async_init+0x84>)
    1a4c:	4798      	blx	r3
    1a4e:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1a50:	2b00      	cmp	r3, #0
    1a52:	db0a      	blt.n	1a6a <_usart_async_init+0x4e>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a54:	211f      	movs	r1, #31
    1a56:	4001      	ands	r1, r0
    1a58:	2201      	movs	r2, #1
    1a5a:	408a      	lsls	r2, r1
    1a5c:	2180      	movs	r1, #128	; 0x80
    1a5e:	4c11      	ldr	r4, [pc, #68]	; (1aa4 <_usart_async_init+0x88>)
    1a60:	5062      	str	r2, [r4, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    1a62:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1a66:	f3bf 8f6f 	isb	sy
  if ((int32_t)(IRQn) >= 0)
    1a6a:	2b00      	cmp	r3, #0
    1a6c:	db07      	blt.n	1a7e <_usart_async_init+0x62>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a6e:	211f      	movs	r1, #31
    1a70:	4001      	ands	r1, r0
    1a72:	2201      	movs	r2, #1
    1a74:	408a      	lsls	r2, r1
    1a76:	21c0      	movs	r1, #192	; 0xc0
    1a78:	0049      	lsls	r1, r1, #1
    1a7a:	4c0a      	ldr	r4, [pc, #40]	; (1aa4 <_usart_async_init+0x88>)
    1a7c:	5062      	str	r2, [r4, r1]
  if ((int32_t)(IRQn) >= 0)
    1a7e:	2b00      	cmp	r3, #0
    1a80:	dbdb      	blt.n	1a3a <_usart_async_init+0x1e>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a82:	231f      	movs	r3, #31
    1a84:	4018      	ands	r0, r3
    1a86:	3b1e      	subs	r3, #30
    1a88:	4083      	lsls	r3, r0
    1a8a:	4a06      	ldr	r2, [pc, #24]	; (1aa4 <_usart_async_init+0x88>)
    1a8c:	6013      	str	r3, [r2, #0]
    1a8e:	e7d4      	b.n	1a3a <_usart_async_init+0x1e>
    1a90:	0000423c 	.word	0x0000423c
    1a94:	000013cd 	.word	0x000013cd
    1a98:	0000192d 	.word	0x0000192d
    1a9c:	000018c1 	.word	0x000018c1
    1aa0:	000018d9 	.word	0x000018d9
    1aa4:	e000e100 	.word	0xe000e100

00001aa8 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    1aa8:	6983      	ldr	r3, [r0, #24]
    1aaa:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
    1aac:	8519      	strh	r1, [r3, #40]	; 0x28
}
    1aae:	4770      	bx	lr

00001ab0 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    1ab0:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    1ab2:	2201      	movs	r2, #1
    1ab4:	759a      	strb	r2, [r3, #22]
}
    1ab6:	4770      	bx	lr

00001ab8 <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    1ab8:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    1aba:	2202      	movs	r2, #2
    1abc:	759a      	strb	r2, [r3, #22]
}
    1abe:	4770      	bx	lr

00001ac0 <SERCOM3_Handler>:

	return NULL;
}

void SERCOM3_Handler(void)
{
    1ac0:	b510      	push	{r4, lr}
	_sercom_usart_interrupt_handler(_sercom3_dev);
    1ac2:	4b02      	ldr	r3, [pc, #8]	; (1acc <SERCOM3_Handler+0xc>)
    1ac4:	6818      	ldr	r0, [r3, #0]
    1ac6:	4b02      	ldr	r3, [pc, #8]	; (1ad0 <SERCOM3_Handler+0x10>)
    1ac8:	4798      	blx	r3
}
    1aca:	bd10      	pop	{r4, pc}
    1acc:	200001a4 	.word	0x200001a4
    1ad0:	0000185d 	.word	0x0000185d

00001ad4 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    1ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1ad6:	0006      	movs	r6, r0
    1ad8:	000c      	movs	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    1ada:	0008      	movs	r0, r1
    1adc:	4b73      	ldr	r3, [pc, #460]	; (1cac <_spi_m_sync_init+0x1d8>)
    1ade:	4798      	blx	r3
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    1ae0:	2300      	movs	r3, #0
    1ae2:	e001      	b.n	1ae8 <_spi_m_sync_init+0x14>
    1ae4:	3301      	adds	r3, #1
    1ae6:	b2db      	uxtb	r3, r3
    1ae8:	2b02      	cmp	r3, #2
    1aea:	d80b      	bhi.n	1b04 <_spi_m_sync_init+0x30>
		if (sercomspi_regs[i].n == n) {
    1aec:	0119      	lsls	r1, r3, #4
    1aee:	18c9      	adds	r1, r1, r3
    1af0:	4a6f      	ldr	r2, [pc, #444]	; (1cb0 <_spi_m_sync_init+0x1dc>)
    1af2:	1852      	adds	r2, r2, r1
    1af4:	324c      	adds	r2, #76	; 0x4c
    1af6:	7812      	ldrb	r2, [r2, #0]
    1af8:	4290      	cmp	r0, r2
    1afa:	d1f3      	bne.n	1ae4 <_spi_m_sync_init+0x10>
			return &sercomspi_regs[i];
    1afc:	4d6c      	ldr	r5, [pc, #432]	; (1cb0 <_spi_m_sync_init+0x1dc>)
    1afe:	353c      	adds	r5, #60	; 0x3c
    1b00:	186d      	adds	r5, r5, r1
    1b02:	e000      	b.n	1b06 <_spi_m_sync_init+0x32>
	return NULL;
    1b04:	2500      	movs	r5, #0
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    1b06:	2e00      	cmp	r6, #0
    1b08:	d100      	bne.n	1b0c <_spi_m_sync_init+0x38>
    1b0a:	e082      	b.n	1c12 <_spi_m_sync_init+0x13e>
    1b0c:	2c00      	cmp	r4, #0
    1b0e:	d100      	bne.n	1b12 <_spi_m_sync_init+0x3e>
    1b10:	e07d      	b.n	1c0e <_spi_m_sync_init+0x13a>
    1b12:	2001      	movs	r0, #1
    1b14:	4a67      	ldr	r2, [pc, #412]	; (1cb4 <_spi_m_sync_init+0x1e0>)
    1b16:	4968      	ldr	r1, [pc, #416]	; (1cb8 <_spi_m_sync_init+0x1e4>)
    1b18:	4b68      	ldr	r3, [pc, #416]	; (1cbc <_spi_m_sync_init+0x1e8>)
    1b1a:	4798      	blx	r3

	if (regs == NULL) {
    1b1c:	2d00      	cmp	r5, #0
    1b1e:	d100      	bne.n	1b22 <_spi_m_sync_init+0x4e>
    1b20:	e0c0      	b.n	1ca4 <_spi_m_sync_init+0x1d0>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1b22:	69e3      	ldr	r3, [r4, #28]
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    1b24:	07db      	lsls	r3, r3, #31
    1b26:	d421      	bmi.n	1b6c <_spi_m_sync_init+0x98>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    1b28:	782a      	ldrb	r2, [r5, #0]
    1b2a:	786b      	ldrb	r3, [r5, #1]
    1b2c:	021b      	lsls	r3, r3, #8
    1b2e:	4313      	orrs	r3, r2
    1b30:	78aa      	ldrb	r2, [r5, #2]
    1b32:	0412      	lsls	r2, r2, #16
    1b34:	4313      	orrs	r3, r2
    1b36:	78ea      	ldrb	r2, [r5, #3]
    1b38:	0612      	lsls	r2, r2, #24
    1b3a:	431a      	orrs	r2, r3
    1b3c:	231c      	movs	r3, #28
    1b3e:	401a      	ands	r2, r3
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1b40:	69e3      	ldr	r3, [r4, #28]
    1b42:	079b      	lsls	r3, r3, #30
    1b44:	d1fc      	bne.n	1b40 <_spi_m_sync_init+0x6c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    1b46:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    1b48:	079b      	lsls	r3, r3, #30
    1b4a:	d509      	bpl.n	1b60 <_spi_m_sync_init+0x8c>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    1b4c:	6823      	ldr	r3, [r4, #0]
    1b4e:	2102      	movs	r1, #2
    1b50:	438b      	bics	r3, r1
    1b52:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1b54:	69e3      	ldr	r3, [r4, #28]
    1b56:	079b      	lsls	r3, r3, #30
    1b58:	d1fc      	bne.n	1b54 <_spi_m_sync_init+0x80>
    1b5a:	69e3      	ldr	r3, [r4, #28]
    1b5c:	079b      	lsls	r3, r3, #30
    1b5e:	d4fc      	bmi.n	1b5a <_spi_m_sync_init+0x86>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    1b60:	2301      	movs	r3, #1
    1b62:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1b64:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1b66:	69e3      	ldr	r3, [r4, #28]
    1b68:	079b      	lsls	r3, r3, #30
    1b6a:	d1fc      	bne.n	1b66 <_spi_m_sync_init+0x92>
    1b6c:	69e3      	ldr	r3, [r4, #28]
    1b6e:	07db      	lsls	r3, r3, #31
    1b70:	d4fc      	bmi.n	1b6c <_spi_m_sync_init+0x98>
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    1b72:	6034      	str	r4, [r6, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    1b74:	782b      	ldrb	r3, [r5, #0]
    1b76:	786a      	ldrb	r2, [r5, #1]
    1b78:	0212      	lsls	r2, r2, #8
    1b7a:	431a      	orrs	r2, r3
    1b7c:	78ab      	ldrb	r3, [r5, #2]
    1b7e:	041b      	lsls	r3, r3, #16
    1b80:	431a      	orrs	r2, r3
    1b82:	78eb      	ldrb	r3, [r5, #3]
    1b84:	061b      	lsls	r3, r3, #24
    1b86:	4313      	orrs	r3, r2
    1b88:	221c      	movs	r2, #28
    1b8a:	4013      	ands	r3, r2
    1b8c:	2b08      	cmp	r3, #8
    1b8e:	d042      	beq.n	1c16 <_spi_m_sync_init+0x142>
	ASSERT(hw && regs);
    1b90:	2c00      	cmp	r4, #0
    1b92:	d100      	bne.n	1b96 <_spi_m_sync_init+0xc2>
    1b94:	e082      	b.n	1c9c <_spi_m_sync_init+0x1c8>
    1b96:	2d00      	cmp	r5, #0
    1b98:	d100      	bne.n	1b9c <_spi_m_sync_init+0xc8>
    1b9a:	e07d      	b.n	1c98 <_spi_m_sync_init+0x1c4>
    1b9c:	2001      	movs	r0, #1
    1b9e:	4a48      	ldr	r2, [pc, #288]	; (1cc0 <_spi_m_sync_init+0x1ec>)
    1ba0:	4945      	ldr	r1, [pc, #276]	; (1cb8 <_spi_m_sync_init+0x1e4>)
    1ba2:	4b46      	ldr	r3, [pc, #280]	; (1cbc <_spi_m_sync_init+0x1e8>)
    1ba4:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    1ba6:	782b      	ldrb	r3, [r5, #0]
    1ba8:	786a      	ldrb	r2, [r5, #1]
    1baa:	0212      	lsls	r2, r2, #8
    1bac:	431a      	orrs	r2, r3
    1bae:	78ab      	ldrb	r3, [r5, #2]
    1bb0:	041b      	lsls	r3, r3, #16
    1bb2:	431a      	orrs	r2, r3
    1bb4:	78eb      	ldrb	r3, [r5, #3]
    1bb6:	061b      	lsls	r3, r3, #24
    1bb8:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLA_reg(
    1bba:	4a42      	ldr	r2, [pc, #264]	; (1cc4 <_spi_m_sync_init+0x1f0>)
    1bbc:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1bbe:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1bc0:	69e3      	ldr	r3, [r4, #28]
    1bc2:	079b      	lsls	r3, r3, #30
    1bc4:	d1fc      	bne.n	1bc0 <_spi_m_sync_init+0xec>
	    (regs->ctrlb
    1bc6:	792b      	ldrb	r3, [r5, #4]
    1bc8:	796a      	ldrb	r2, [r5, #5]
    1bca:	0212      	lsls	r2, r2, #8
    1bcc:	431a      	orrs	r2, r3
    1bce:	79ab      	ldrb	r3, [r5, #6]
    1bd0:	041b      	lsls	r3, r3, #16
    1bd2:	431a      	orrs	r2, r3
    1bd4:	79eb      	ldrb	r3, [r5, #7]
    1bd6:	061b      	lsls	r3, r3, #24
    1bd8:	4313      	orrs	r3, r2
	        | (SERCOM_SPI_CTRLB_RXEN));
    1bda:	4a3b      	ldr	r2, [pc, #236]	; (1cc8 <_spi_m_sync_init+0x1f4>)
    1bdc:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(
    1bde:	2280      	movs	r2, #128	; 0x80
    1be0:	0292      	lsls	r2, r2, #10
    1be2:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    1be4:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1be6:	69e3      	ldr	r3, [r4, #28]
    1be8:	075b      	lsls	r3, r3, #29
    1bea:	d1fc      	bne.n	1be6 <_spi_m_sync_init+0x112>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    1bec:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    1bee:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    1bf0:	7b6a      	ldrb	r2, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    1bf2:	2330      	movs	r3, #48	; 0x30
    1bf4:	54e2      	strb	r2, [r4, r3]
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    1bf6:	792b      	ldrb	r3, [r5, #4]
    1bf8:	075b      	lsls	r3, r3, #29
    1bfa:	d151      	bne.n	1ca0 <_spi_m_sync_init+0x1cc>
    1bfc:	2301      	movs	r3, #1
    1bfe:	7133      	strb	r3, [r6, #4]

	dev->dummy_byte = regs->dummy_byte;
    1c00:	7baa      	ldrb	r2, [r5, #14]
    1c02:	7beb      	ldrb	r3, [r5, #15]
    1c04:	021b      	lsls	r3, r3, #8
    1c06:	4313      	orrs	r3, r2
    1c08:	80f3      	strh	r3, [r6, #6]

	return ERR_NONE;
    1c0a:	2000      	movs	r0, #0
}
    1c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(dev && hw);
    1c0e:	2000      	movs	r0, #0
    1c10:	e780      	b.n	1b14 <_spi_m_sync_init+0x40>
    1c12:	2000      	movs	r0, #0
    1c14:	e77e      	b.n	1b14 <_spi_m_sync_init+0x40>
	ASSERT(hw && regs);
    1c16:	2c00      	cmp	r4, #0
    1c18:	d03c      	beq.n	1c94 <_spi_m_sync_init+0x1c0>
    1c1a:	2d00      	cmp	r5, #0
    1c1c:	d038      	beq.n	1c90 <_spi_m_sync_init+0x1bc>
    1c1e:	2001      	movs	r0, #1
    1c20:	4a2a      	ldr	r2, [pc, #168]	; (1ccc <_spi_m_sync_init+0x1f8>)
    1c22:	4925      	ldr	r1, [pc, #148]	; (1cb8 <_spi_m_sync_init+0x1e4>)
    1c24:	4b25      	ldr	r3, [pc, #148]	; (1cbc <_spi_m_sync_init+0x1e8>)
    1c26:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    1c28:	782b      	ldrb	r3, [r5, #0]
    1c2a:	786a      	ldrb	r2, [r5, #1]
    1c2c:	0212      	lsls	r2, r2, #8
    1c2e:	431a      	orrs	r2, r3
    1c30:	78ab      	ldrb	r3, [r5, #2]
    1c32:	041b      	lsls	r3, r3, #16
    1c34:	431a      	orrs	r2, r3
    1c36:	78eb      	ldrb	r3, [r5, #3]
    1c38:	061b      	lsls	r3, r3, #24
    1c3a:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLA_reg(
    1c3c:	4a21      	ldr	r2, [pc, #132]	; (1cc4 <_spi_m_sync_init+0x1f0>)
    1c3e:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1c40:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1c42:	69e3      	ldr	r3, [r4, #28]
    1c44:	079b      	lsls	r3, r3, #30
    1c46:	d1fc      	bne.n	1c42 <_spi_m_sync_init+0x16e>
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    1c48:	792b      	ldrb	r3, [r5, #4]
    1c4a:	796a      	ldrb	r2, [r5, #5]
    1c4c:	0212      	lsls	r2, r2, #8
    1c4e:	431a      	orrs	r2, r3
    1c50:	79ab      	ldrb	r3, [r5, #6]
    1c52:	041b      	lsls	r3, r3, #16
    1c54:	431a      	orrs	r2, r3
    1c56:	79eb      	ldrb	r3, [r5, #7]
    1c58:	061b      	lsls	r3, r3, #24
    1c5a:	4313      	orrs	r3, r2
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    1c5c:	4a1c      	ldr	r2, [pc, #112]	; (1cd0 <_spi_m_sync_init+0x1fc>)
    1c5e:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(hw,
    1c60:	4a1c      	ldr	r2, [pc, #112]	; (1cd4 <_spi_m_sync_init+0x200>)
    1c62:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    1c64:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1c66:	69e3      	ldr	r3, [r4, #28]
    1c68:	075b      	lsls	r3, r3, #29
    1c6a:	d1fc      	bne.n	1c66 <_spi_m_sync_init+0x192>
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    1c6c:	7a2b      	ldrb	r3, [r5, #8]
    1c6e:	7a6a      	ldrb	r2, [r5, #9]
    1c70:	0212      	lsls	r2, r2, #8
    1c72:	431a      	orrs	r2, r3
    1c74:	7aab      	ldrb	r3, [r5, #10]
    1c76:	041b      	lsls	r3, r3, #16
    1c78:	431a      	orrs	r2, r3
    1c7a:	7aeb      	ldrb	r3, [r5, #11]
    1c7c:	061b      	lsls	r3, r3, #24
    1c7e:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.ADDR.reg = data;
    1c80:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    1c82:	7b6a      	ldrb	r2, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    1c84:	2330      	movs	r3, #48	; 0x30
    1c86:	54e2      	strb	r2, [r4, r3]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1c88:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    1c8a:	2b00      	cmp	r3, #0
    1c8c:	d1fc      	bne.n	1c88 <_spi_m_sync_init+0x1b4>
    1c8e:	e7b2      	b.n	1bf6 <_spi_m_sync_init+0x122>
	ASSERT(hw && regs);
    1c90:	2000      	movs	r0, #0
    1c92:	e7c5      	b.n	1c20 <_spi_m_sync_init+0x14c>
    1c94:	2000      	movs	r0, #0
    1c96:	e7c3      	b.n	1c20 <_spi_m_sync_init+0x14c>
	ASSERT(hw && regs);
    1c98:	2000      	movs	r0, #0
    1c9a:	e780      	b.n	1b9e <_spi_m_sync_init+0xca>
    1c9c:	2000      	movs	r0, #0
    1c9e:	e77e      	b.n	1b9e <_spi_m_sync_init+0xca>
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    1ca0:	2302      	movs	r3, #2
    1ca2:	e7ac      	b.n	1bfe <_spi_m_sync_init+0x12a>
		return ERR_INVALID_ARG;
    1ca4:	200d      	movs	r0, #13
    1ca6:	4240      	negs	r0, r0
    1ca8:	e7b0      	b.n	1c0c <_spi_m_sync_init+0x138>
    1caa:	46c0      	nop			; (mov r8, r8)
    1cac:	0000184d 	.word	0x0000184d
    1cb0:	000041cc 	.word	0x000041cc
    1cb4:	00000952 	.word	0x00000952
    1cb8:	0000423c 	.word	0x0000423c
    1cbc:	000013cd 	.word	0x000013cd
    1cc0:	00000917 	.word	0x00000917
    1cc4:	fffffefc 	.word	0xfffffefc
    1cc8:	fffd1dbf 	.word	0xfffd1dbf
    1ccc:	0000092b 	.word	0x0000092b
    1cd0:	fffdddbf 	.word	0xfffdddbf
    1cd4:	00020240 	.word	0x00020240

00001cd8 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    1cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cda:	46ce      	mov	lr, r9
    1cdc:	4647      	mov	r7, r8
    1cde:	b580      	push	{r7, lr}
    1ce0:	b089      	sub	sp, #36	; 0x24
    1ce2:	4681      	mov	r9, r0
    1ce4:	000d      	movs	r5, r1
	void *                 hw   = dev->prvt;
    1ce6:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    1ce8:	680b      	ldr	r3, [r1, #0]
    1cea:	9303      	str	r3, [sp, #12]
    1cec:	684b      	ldr	r3, [r1, #4]
    1cee:	9304      	str	r3, [sp, #16]
    1cf0:	2300      	movs	r3, #0
    1cf2:	9305      	str	r3, [sp, #20]
    1cf4:	9306      	str	r3, [sp, #24]
    1cf6:	7906      	ldrb	r6, [r0, #4]

	ASSERT(dev && hw);
    1cf8:	2800      	cmp	r0, #0
    1cfa:	d014      	beq.n	1d26 <_spi_m_sync_trans+0x4e>
    1cfc:	2c00      	cmp	r4, #0
    1cfe:	d010      	beq.n	1d22 <_spi_m_sync_trans+0x4a>
    1d00:	2001      	movs	r0, #1
    1d02:	4a37      	ldr	r2, [pc, #220]	; (1de0 <_spi_m_sync_trans+0x108>)
    1d04:	4937      	ldr	r1, [pc, #220]	; (1de4 <_spi_m_sync_trans+0x10c>)
    1d06:	4b38      	ldr	r3, [pc, #224]	; (1de8 <_spi_m_sync_trans+0x110>)
    1d08:	4798      	blx	r3
    1d0a:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    1d0c:	075b      	lsls	r3, r3, #29
    1d0e:	d164      	bne.n	1dda <_spi_m_sync_trans+0x102>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1d10:	69e3      	ldr	r3, [r4, #28]
    1d12:	079b      	lsls	r3, r3, #30
    1d14:	d1fc      	bne.n	1d10 <_spi_m_sync_trans+0x38>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    1d16:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    1d18:	079b      	lsls	r3, r3, #30
    1d1a:	d420      	bmi.n	1d5e <_spi_m_sync_trans+0x86>
		return ERR_NOT_INITIALIZED;
    1d1c:	2014      	movs	r0, #20
    1d1e:	4240      	negs	r0, r0
    1d20:	e056      	b.n	1dd0 <_spi_m_sync_trans+0xf8>
	ASSERT(dev && hw);
    1d22:	2000      	movs	r0, #0
    1d24:	e7ed      	b.n	1d02 <_spi_m_sync_trans+0x2a>
    1d26:	2000      	movs	r0, #0
    1d28:	e7eb      	b.n	1d02 <_spi_m_sync_trans+0x2a>
		return false;
    1d2a:	2200      	movs	r2, #0
    1d2c:	e02d      	b.n	1d8a <_spi_m_sync_trans+0xb2>
			data |= (*ctrl->txbuf) << 8;
    1d2e:	7848      	ldrb	r0, [r1, #1]
    1d30:	0200      	lsls	r0, r0, #8
    1d32:	4647      	mov	r7, r8
    1d34:	4307      	orrs	r7, r0
    1d36:	46b8      	mov	r8, r7
			ctrl->txbuf++;
    1d38:	3102      	adds	r1, #2
    1d3a:	9103      	str	r1, [sp, #12]
	ctrl->txcnt++;
    1d3c:	3201      	adds	r2, #1
    1d3e:	9205      	str	r2, [sp, #20]
	((Sercom *)hw)->SPI.DATA.reg = data;
    1d40:	4642      	mov	r2, r8
    1d42:	62a2      	str	r2, [r4, #40]	; 0x28
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    1d44:	b25b      	sxtb	r3, r3
    1d46:	2b00      	cmp	r3, #0
    1d48:	db35      	blt.n	1db6 <_spi_m_sync_trans+0xde>
	return ERR_NONE;
    1d4a:	2000      	movs	r0, #0
			}
		}

		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
    1d4c:	2800      	cmp	r0, #0
    1d4e:	db3a      	blt.n	1dc6 <_spi_m_sync_trans+0xee>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    1d50:	9805      	ldr	r0, [sp, #20]
    1d52:	68ab      	ldr	r3, [r5, #8]
    1d54:	4298      	cmp	r0, r3
    1d56:	d302      	bcc.n	1d5e <_spi_m_sync_trans+0x86>
    1d58:	9a06      	ldr	r2, [sp, #24]
    1d5a:	4293      	cmp	r3, r2
    1d5c:	d933      	bls.n	1dc6 <_spi_m_sync_trans+0xee>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    1d5e:	7e23      	ldrb	r3, [r4, #24]
    1d60:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    1d62:	075a      	lsls	r2, r3, #29
    1d64:	d5e1      	bpl.n	1d2a <_spi_m_sync_trans+0x52>
	return ((Sercom *)hw)->SPI.DATA.reg;
    1d66:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    1d68:	9a04      	ldr	r2, [sp, #16]
    1d6a:	2a00      	cmp	r2, #0
    1d6c:	d008      	beq.n	1d80 <_spi_m_sync_trans+0xa8>
		*ctrl->rxbuf++ = (uint8_t)data;
    1d6e:	1c50      	adds	r0, r2, #1
    1d70:	9004      	str	r0, [sp, #16]
    1d72:	7011      	strb	r1, [r2, #0]
		if (ctrl->char_size > 1) {
    1d74:	2e01      	cmp	r6, #1
    1d76:	d903      	bls.n	1d80 <_spi_m_sync_trans+0xa8>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    1d78:	1c90      	adds	r0, r2, #2
    1d7a:	9004      	str	r0, [sp, #16]
    1d7c:	0a09      	lsrs	r1, r1, #8
    1d7e:	7051      	strb	r1, [r2, #1]
	ctrl->rxcnt++;
    1d80:	9a06      	ldr	r2, [sp, #24]
    1d82:	9201      	str	r2, [sp, #4]
    1d84:	3201      	adds	r2, #1
    1d86:	9206      	str	r2, [sp, #24]
	return true;
    1d88:	2201      	movs	r2, #1
		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    1d8a:	2a00      	cmp	r2, #0
    1d8c:	d1da      	bne.n	1d44 <_spi_m_sync_trans+0x6c>
			if (ctrl.rxcnt >= ctrl.txcnt) {
    1d8e:	9906      	ldr	r1, [sp, #24]
    1d90:	9a05      	ldr	r2, [sp, #20]
    1d92:	4291      	cmp	r1, r2
    1d94:	d3d6      	bcc.n	1d44 <_spi_m_sync_trans+0x6c>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    1d96:	4649      	mov	r1, r9
    1d98:	88c8      	ldrh	r0, [r1, #6]
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    1d9a:	07d9      	lsls	r1, r3, #31
    1d9c:	d5d2      	bpl.n	1d44 <_spi_m_sync_trans+0x6c>
	if (ctrl->txbuf) {
    1d9e:	9903      	ldr	r1, [sp, #12]
    1da0:	2900      	cmp	r1, #0
    1da2:	d006      	beq.n	1db2 <_spi_m_sync_trans+0xda>
		data = *ctrl->txbuf++;
    1da4:	1c48      	adds	r0, r1, #1
    1da6:	9003      	str	r0, [sp, #12]
    1da8:	7808      	ldrb	r0, [r1, #0]
    1daa:	4680      	mov	r8, r0
		if (ctrl->char_size > 1) {
    1dac:	2e01      	cmp	r6, #1
    1dae:	d8be      	bhi.n	1d2e <_spi_m_sync_trans+0x56>
    1db0:	e7c4      	b.n	1d3c <_spi_m_sync_trans+0x64>
		data = dummy;
    1db2:	4680      	mov	r8, r0
    1db4:	e7c2      	b.n	1d3c <_spi_m_sync_trans+0x64>
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    1db6:	2301      	movs	r3, #1
    1db8:	425b      	negs	r3, r3
    1dba:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    1dbc:	3381      	adds	r3, #129	; 0x81
    1dbe:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    1dc0:	2013      	movs	r0, #19
    1dc2:	4240      	negs	r0, r0
    1dc4:	e7c2      	b.n	1d4c <_spi_m_sync_trans+0x74>
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    1dc6:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    1dc8:	079b      	lsls	r3, r3, #30
    1dca:	d0fc      	beq.n	1dc6 <_spi_m_sync_trans+0xee>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    1dcc:	2303      	movs	r3, #3
    1dce:	7623      	strb	r3, [r4, #24]
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
    1dd0:	b009      	add	sp, #36	; 0x24
    1dd2:	bc0c      	pop	{r2, r3}
    1dd4:	4690      	mov	r8, r2
    1dd6:	4699      	mov	r9, r3
    1dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ERR_BUSY;
    1dda:	2004      	movs	r0, #4
    1ddc:	4240      	negs	r0, r0
    1dde:	e7f7      	b.n	1dd0 <_spi_m_sync_trans+0xf8>
    1de0:	00000ab2 	.word	0x00000ab2
    1de4:	0000423c 	.word	0x0000423c
    1de8:	000013cd 	.word	0x000013cd

00001dec <_sysctrl_init_sources>:
}

static inline void hri_sysctrl_write_XOSC32K_reg(const void *const hw, hri_sysctrl_xosc32k_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->XOSC32K.reg = data;
    1dec:	4a14      	ldr	r2, [pc, #80]	; (1e40 <_sysctrl_init_sources+0x54>)
    1dee:	2366      	movs	r3, #102	; 0x66
    1df0:	8293      	strh	r3, [r2, #20]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    1df2:	6a11      	ldr	r1, [r2, #32]
	tmp = (tmp & SYSCTRL_OSC8M_CALIB_Msk) >> SYSCTRL_OSC8M_CALIB_Pos;
    1df4:	0c09      	lsrs	r1, r1, #16
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    1df6:	6a13      	ldr	r3, [r2, #32]

#if CONF_OSC8M_CONFIG == 1
	calib = hri_sysctrl_read_OSC8M_CALIB_bf(hw);

	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    1df8:	0f9b      	lsrs	r3, r3, #30
    1dfa:	079b      	lsls	r3, r3, #30
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    1dfc:	0409      	lsls	r1, r1, #16
    1dfe:	4811      	ldr	r0, [pc, #68]	; (1e44 <_sysctrl_init_sources+0x58>)
    1e00:	4001      	ands	r1, r0
#endif
	                                SYSCTRL_OSC8M_PRESC(CONF_OSC8M_PRESC)
	                                | (CONF_OSC8M_RUNSTDBY << SYSCTRL_OSC8M_RUNSTDBY_Pos)
    1e02:	430b      	orrs	r3, r1
	hri_sysctrl_write_OSC8M_reg(hw,
    1e04:	2102      	movs	r1, #2
    1e06:	430b      	orrs	r3, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    1e08:	6213      	str	r3, [r2, #32]
	tmp = ((Sysctrl *)hw)->OSC32K.reg;
    1e0a:	6993      	ldr	r3, [r2, #24]
	tmp = (tmp & SYSCTRL_OSC32K_CALIB_Msk) >> SYSCTRL_OSC32K_CALIB_Pos;
    1e0c:	0c1b      	lsrs	r3, r3, #16
	hri_sysctrl_write_OSC32K_reg(
	    hw,
#if CONF_OSC32K_OVERWRITE_CALIBRATION == 1
	    SYSCTRL_OSC32K_CALIB(CONF_OSC32K_CALIB) |
#else
	    SYSCTRL_OSC32K_CALIB(calib) |
    1e0e:	041b      	lsls	r3, r3, #16
    1e10:	21fe      	movs	r1, #254	; 0xfe
    1e12:	03c9      	lsls	r1, r1, #15
    1e14:	400b      	ands	r3, r1
#endif
	        (CONF_OSC32K_WRTLOCK << SYSCTRL_OSC32K_WRTLOCK_Pos) | SYSCTRL_OSC32K_STARTUP(CONF_OSC32K_STARTUP)
	        | (CONF_OSC32K_RUNSTDBY << SYSCTRL_OSC32K_RUNSTDBY_Pos) | (CONF_OSC32K_EN1K << SYSCTRL_OSC32K_EN1K_Pos)
	        | (CONF_OSC32K_EN32K << SYSCTRL_OSC32K_EN32K_Pos) | (1 << SYSCTRL_OSC32K_ENABLE_Pos));
    1e16:	2146      	movs	r1, #70	; 0x46
    1e18:	430b      	orrs	r3, r1
	((Sysctrl *)hw)->OSC32K.reg = data;
    1e1a:	6193      	str	r3, [r2, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    1e1c:	7f13      	ldrb	r3, [r2, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    1e1e:	3927      	subs	r1, #39	; 0x27
    1e20:	400b      	ands	r3, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    1e22:	7713      	strb	r3, [r2, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) >> SYSCTRL_PCLKSR_XOSC32KRDY_Pos;
    1e24:	4b06      	ldr	r3, [pc, #24]	; (1e40 <_sysctrl_init_sources+0x54>)
    1e26:	68db      	ldr	r3, [r3, #12]
	                                    (CONF_OSC32K_WRTLOCK << SYSCTRL_OSCULP32K_WRTLOCK_Pos));
#endif

#if CONF_XOSC32K_CONFIG == 1
#if CONF_XOSC32K_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_XOSC32KRDY_bit(hw))
    1e28:	079b      	lsls	r3, r3, #30
    1e2a:	d5fb      	bpl.n	1e24 <_sysctrl_init_sources+0x38>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) >> SYSCTRL_PCLKSR_OSC32KRDY_Pos;
    1e2c:	4b04      	ldr	r3, [pc, #16]	; (1e40 <_sysctrl_init_sources+0x54>)
    1e2e:	68db      	ldr	r3, [r3, #12]
#endif
#endif

#if CONF_OSC32K_CONFIG == 1
#if CONF_OSC32K_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC32KRDY_bit(hw))
    1e30:	075b      	lsls	r3, r3, #29
    1e32:	d5fb      	bpl.n	1e2c <_sysctrl_init_sources+0x40>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    1e34:	4b02      	ldr	r3, [pc, #8]	; (1e40 <_sysctrl_init_sources+0x54>)
    1e36:	68db      	ldr	r3, [r3, #12]
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    1e38:	071b      	lsls	r3, r3, #28
    1e3a:	d5fb      	bpl.n	1e34 <_sysctrl_init_sources+0x48>
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    1e3c:	4770      	bx	lr
    1e3e:	46c0      	nop			; (mov r8, r8)
    1e40:	40000800 	.word	0x40000800
    1e44:	0fff0000 	.word	0x0fff0000

00001e48 <_sysctrl_init_referenced_generators>:
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    1e48:	2202      	movs	r2, #2
    1e4a:	4b1f      	ldr	r3, [pc, #124]	; (1ec8 <_sysctrl_init_referenced_generators+0x80>)
    1e4c:	849a      	strh	r2, [r3, #36]	; 0x24
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    1e4e:	4b1e      	ldr	r3, [pc, #120]	; (1ec8 <_sysctrl_init_referenced_generators+0x80>)
    1e50:	68db      	ldr	r3, [r3, #12]
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    1e52:	06db      	lsls	r3, r3, #27
    1e54:	d5fb      	bpl.n	1e4e <_sysctrl_init_referenced_generators+0x6>
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
    1e56:	4a1d      	ldr	r2, [pc, #116]	; (1ecc <_sysctrl_init_referenced_generators+0x84>)
    1e58:	4b1b      	ldr	r3, [pc, #108]	; (1ec8 <_sysctrl_init_referenced_generators+0x80>)
    1e5a:	62da      	str	r2, [r3, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    1e5c:	4b1c      	ldr	r3, [pc, #112]	; (1ed0 <_sysctrl_init_referenced_generators+0x88>)
    1e5e:	681b      	ldr	r3, [r3, #0]
    1e60:	0e9b      	lsrs	r3, r3, #26
    1e62:	2b3f      	cmp	r3, #63	; 0x3f
    1e64:	d028      	beq.n	1eb8 <_sysctrl_init_referenced_generators+0x70>
    1e66:	029b      	lsls	r3, r3, #10
    1e68:	2280      	movs	r2, #128	; 0x80
    1e6a:	0092      	lsls	r2, r2, #2
    1e6c:	431a      	orrs	r2, r3
	((Sysctrl *)hw)->DFLLVAL.reg = data;
    1e6e:	4b16      	ldr	r3, [pc, #88]	; (1ec8 <_sysctrl_init_referenced_generators+0x80>)
    1e70:	629a      	str	r2, [r3, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    1e72:	2293      	movs	r2, #147	; 0x93
    1e74:	0052      	lsls	r2, r2, #1
    1e76:	849a      	strh	r2, [r3, #36]	; 0x24
}

static inline void hri_sysctrl_write_DPLLCTRLA_reg(const void *const hw, hri_sysctrl_dpllctrla_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DPLLCTRLA.reg = data;
    1e78:	2142      	movs	r1, #66	; 0x42
    1e7a:	3ae2      	subs	r2, #226	; 0xe2
    1e7c:	5499      	strb	r1, [r3, r2]
}

static inline void hri_sysctrl_write_DPLLRATIO_reg(const void *const hw, hri_sysctrl_dpllratio_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DPLLRATIO.reg = data;
    1e7e:	4a15      	ldr	r2, [pc, #84]	; (1ed4 <_sysctrl_init_referenced_generators+0x8c>)
    1e80:	649a      	str	r2, [r3, #72]	; 0x48
}

static inline void hri_sysctrl_write_DPLLCTRLB_reg(const void *const hw, hri_sysctrl_dpllctrlb_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DPLLCTRLB.reg = data;
    1e82:	2200      	movs	r2, #0
    1e84:	64da      	str	r2, [r3, #76]	; 0x4c
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
    1e86:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
	        | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
    1e88:	075b      	lsls	r3, r3, #29
    1e8a:	d518      	bpl.n	1ebe <_sysctrl_init_referenced_generators+0x76>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    1e8c:	4b0e      	ldr	r3, [pc, #56]	; (1ec8 <_sysctrl_init_referenced_generators+0x80>)
    1e8e:	68db      	ldr	r3, [r3, #12]
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;
#else
		hri_sysctrl_pclksr_reg_t status_mask = SYSCTRL_PCLKSR_DFLLRDY;
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
    1e90:	06db      	lsls	r3, r3, #27
    1e92:	d5fb      	bpl.n	1e8c <_sysctrl_init_referenced_generators+0x44>
	return (((Sysctrl *)hw)->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE) >> SYSCTRL_DPLLSTATUS_ENABLE_Pos;
    1e94:	2350      	movs	r3, #80	; 0x50
    1e96:	4a0c      	ldr	r2, [pc, #48]	; (1ec8 <_sysctrl_init_referenced_generators+0x80>)
    1e98:	5cd3      	ldrb	r3, [r2, r3]
#endif
#endif

#if CONF_DPLL_CONFIG == 1
#if CONF_DPLL_ENABLE == 1
	while (!(hri_sysctrl_get_DPLLSTATUS_ENABLE_bit(hw) || hri_sysctrl_get_DPLLSTATUS_LOCK_bit(hw)
    1e9a:	075b      	lsls	r3, r3, #29
    1e9c:	d407      	bmi.n	1eae <_sysctrl_init_referenced_generators+0x66>
	return (((Sysctrl *)hw)->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_LOCK) >> SYSCTRL_DPLLSTATUS_LOCK_Pos;
    1e9e:	2350      	movs	r3, #80	; 0x50
    1ea0:	5cd3      	ldrb	r3, [r2, r3]
    1ea2:	07db      	lsls	r3, r3, #31
    1ea4:	d403      	bmi.n	1eae <_sysctrl_init_referenced_generators+0x66>
	return (((Sysctrl *)hw)->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_CLKRDY) >> SYSCTRL_DPLLSTATUS_CLKRDY_Pos;
    1ea6:	2350      	movs	r3, #80	; 0x50
    1ea8:	5cd3      	ldrb	r3, [r2, r3]
    1eaa:	079b      	lsls	r3, r3, #30
    1eac:	d5f2      	bpl.n	1e94 <_sysctrl_init_referenced_generators+0x4c>
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
    1eae:	4b0a      	ldr	r3, [pc, #40]	; (1ed8 <_sysctrl_init_referenced_generators+0x90>)
    1eb0:	785b      	ldrb	r3, [r3, #1]
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
    1eb2:	09db      	lsrs	r3, r3, #7
    1eb4:	d1fb      	bne.n	1eae <_sysctrl_init_referenced_generators+0x66>
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    1eb6:	4770      	bx	lr
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    1eb8:	22fc      	movs	r2, #252	; 0xfc
    1eba:	01d2      	lsls	r2, r2, #7
    1ebc:	e7d7      	b.n	1e6e <_sysctrl_init_referenced_generators+0x26>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    1ebe:	4b02      	ldr	r3, [pc, #8]	; (1ec8 <_sysctrl_init_referenced_generators+0x80>)
    1ec0:	68db      	ldr	r3, [r3, #12]
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    1ec2:	06db      	lsls	r3, r3, #27
    1ec4:	d5fb      	bpl.n	1ebe <_sysctrl_init_referenced_generators+0x76>
    1ec6:	e7e5      	b.n	1e94 <_sysctrl_init_referenced_generators+0x4c>
    1ec8:	40000800 	.word	0x40000800
    1ecc:	0401bb80 	.word	0x0401bb80
    1ed0:	00806024 	.word	0x00806024
    1ed4:	000e05b7 	.word	0x000e05b7
    1ed8:	40000c00 	.word	0x40000c00

00001edc <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    1edc:	4b02      	ldr	r3, [pc, #8]	; (1ee8 <_system_time_init+0xc>)
    1ede:	4a03      	ldr	r2, [pc, #12]	; (1eec <_system_time_init+0x10>)
    1ee0:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    1ee2:	2205      	movs	r2, #5
    1ee4:	601a      	str	r2, [r3, #0]
	                | (1 << SysTick_CTRL_CLKSOURCE_Pos);
}
    1ee6:	4770      	bx	lr
    1ee8:	e000e010 	.word	0xe000e010
    1eec:	00ffffff 	.word	0x00ffffff

00001ef0 <_delay_init>:
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
    1ef0:	b510      	push	{r4, lr}
	_system_time_init(hw);
    1ef2:	4b01      	ldr	r3, [pc, #4]	; (1ef8 <_delay_init+0x8>)
    1ef4:	4798      	blx	r3
}
    1ef6:	bd10      	pop	{r4, pc}
    1ef8:	00001edd 	.word	0x00001edd

00001efc <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    1efc:	b510      	push	{r4, lr}
	void *const hw = device->hw;
    1efe:	68c3      	ldr	r3, [r0, #12]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    1f00:	7b9a      	ldrb	r2, [r3, #14]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    1f02:	07d2      	lsls	r2, r2, #31
    1f04:	d400      	bmi.n	1f08 <tc_interrupt_handler+0xc>
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
	}
}
    1f06:	bd10      	pop	{r4, pc}
}

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    1f08:	2201      	movs	r2, #1
    1f0a:	739a      	strb	r2, [r3, #14]
		device->timer_cb.period_expired(device);
    1f0c:	6803      	ldr	r3, [r0, #0]
    1f0e:	4798      	blx	r3
}
    1f10:	e7f9      	b.n	1f06 <tc_interrupt_handler+0xa>
	...

00001f14 <tc_get_hardware_index>:
 * \param[in] hw The pointer to hardware instance
 */
static uint8_t tc_get_hardware_index(const void *const hw)
{
#ifndef _UNIT_TEST_
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    1f14:	4b02      	ldr	r3, [pc, #8]	; (1f20 <tc_get_hardware_index+0xc>)
    1f16:	469c      	mov	ip, r3
    1f18:	4460      	add	r0, ip
    1f1a:	0a80      	lsrs	r0, r0, #10
    1f1c:	b2c0      	uxtb	r0, r0
#else
	return ((uint32_t)hw - TC_HW_BASE_ADDR) / sizeof(Tc);
#endif
}
    1f1e:	4770      	bx	lr
    1f20:	bdffd400 	.word	0xbdffd400

00001f24 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC3) {
    1f24:	4b06      	ldr	r3, [pc, #24]	; (1f40 <_tc_init_irq_param+0x1c>)
    1f26:	4298      	cmp	r0, r3
    1f28:	d003      	beq.n	1f32 <_tc_init_irq_param+0xe>
		_tc3_dev = (struct _timer_device *)dev;
	}
	if (hw == TC4) {
    1f2a:	4b06      	ldr	r3, [pc, #24]	; (1f44 <_tc_init_irq_param+0x20>)
    1f2c:	4298      	cmp	r0, r3
    1f2e:	d003      	beq.n	1f38 <_tc_init_irq_param+0x14>
		_tc4_dev = (struct _timer_device *)dev;
	}
}
    1f30:	4770      	bx	lr
		_tc3_dev = (struct _timer_device *)dev;
    1f32:	4b05      	ldr	r3, [pc, #20]	; (1f48 <_tc_init_irq_param+0x24>)
    1f34:	6019      	str	r1, [r3, #0]
    1f36:	e7f8      	b.n	1f2a <_tc_init_irq_param+0x6>
		_tc4_dev = (struct _timer_device *)dev;
    1f38:	4b03      	ldr	r3, [pc, #12]	; (1f48 <_tc_init_irq_param+0x24>)
    1f3a:	6059      	str	r1, [r3, #4]
}
    1f3c:	e7f8      	b.n	1f30 <_tc_init_irq_param+0xc>
    1f3e:	46c0      	nop			; (mov r8, r8)
    1f40:	42002c00 	.word	0x42002c00
    1f44:	42003000 	.word	0x42003000
    1f48:	200001a8 	.word	0x200001a8

00001f4c <get_tc_index>:
{
    1f4c:	b510      	push	{r4, lr}
	uint8_t tc_offset = tc_get_hardware_index(hw) + TC_NUMBER_OFFSET;
    1f4e:	4b0e      	ldr	r3, [pc, #56]	; (1f88 <get_tc_index+0x3c>)
    1f50:	4798      	blx	r3
    1f52:	3003      	adds	r0, #3
    1f54:	b2c0      	uxtb	r0, r0
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    1f56:	2300      	movs	r3, #0
    1f58:	2b01      	cmp	r3, #1
    1f5a:	d80b      	bhi.n	1f74 <get_tc_index+0x28>
		if (_tcs[i].number == tc_offset) {
    1f5c:	009a      	lsls	r2, r3, #2
    1f5e:	18d2      	adds	r2, r2, r3
    1f60:	0091      	lsls	r1, r2, #2
    1f62:	4a0a      	ldr	r2, [pc, #40]	; (1f8c <get_tc_index+0x40>)
    1f64:	5c8a      	ldrb	r2, [r1, r2]
    1f66:	4290      	cmp	r0, r2
    1f68:	d002      	beq.n	1f70 <get_tc_index+0x24>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    1f6a:	3301      	adds	r3, #1
    1f6c:	b2db      	uxtb	r3, r3
    1f6e:	e7f3      	b.n	1f58 <get_tc_index+0xc>
			return i;
    1f70:	b258      	sxtb	r0, r3
    1f72:	e007      	b.n	1f84 <get_tc_index+0x38>
	ASSERT(false);
    1f74:	22a4      	movs	r2, #164	; 0xa4
    1f76:	0052      	lsls	r2, r2, #1
    1f78:	4905      	ldr	r1, [pc, #20]	; (1f90 <get_tc_index+0x44>)
    1f7a:	2000      	movs	r0, #0
    1f7c:	4b05      	ldr	r3, [pc, #20]	; (1f94 <get_tc_index+0x48>)
    1f7e:	4798      	blx	r3
	return -1;
    1f80:	2001      	movs	r0, #1
    1f82:	4240      	negs	r0, r0
}
    1f84:	bd10      	pop	{r4, pc}
    1f86:	46c0      	nop			; (mov r8, r8)
    1f88:	00001f15 	.word	0x00001f15
    1f8c:	00004258 	.word	0x00004258
    1f90:	00004280 	.word	0x00004280
    1f94:	000013cd 	.word	0x000013cd

00001f98 <_timer_init>:
{
    1f98:	b570      	push	{r4, r5, r6, lr}
    1f9a:	0006      	movs	r6, r0
    1f9c:	000c      	movs	r4, r1
	int8_t i = get_tc_index(hw);
    1f9e:	0008      	movs	r0, r1
    1fa0:	4b3f      	ldr	r3, [pc, #252]	; (20a0 <STACK_SIZE+0xa0>)
    1fa2:	4798      	blx	r3
    1fa4:	0005      	movs	r5, r0
	device->hw = hw;
    1fa6:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    1fa8:	228d      	movs	r2, #141	; 0x8d
    1faa:	493e      	ldr	r1, [pc, #248]	; (20a4 <STACK_SIZE+0xa4>)
    1fac:	2001      	movs	r0, #1
    1fae:	4b3e      	ldr	r3, [pc, #248]	; (20a8 <STACK_SIZE+0xa8>)
    1fb0:	4798      	blx	r3
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    1fb2:	7be3      	ldrb	r3, [r4, #15]
    1fb4:	09db      	lsrs	r3, r3, #7
    1fb6:	d1fc      	bne.n	1fb2 <_timer_init+0x1a>
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1fb8:	8823      	ldrh	r3, [r4, #0]
	if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    1fba:	079b      	lsls	r3, r3, #30
    1fbc:	d504      	bpl.n	1fc8 <_timer_init+0x30>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1fbe:	2300      	movs	r3, #0
    1fc0:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    1fc2:	7be3      	ldrb	r3, [r4, #15]
    1fc4:	09db      	lsrs	r3, r3, #7
    1fc6:	d1fc      	bne.n	1fc2 <_timer_init+0x2a>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1fc8:	2301      	movs	r3, #1
    1fca:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    1fcc:	7be3      	ldrb	r3, [r4, #15]
    1fce:	09db      	lsrs	r3, r3, #7
    1fd0:	d1fc      	bne.n	1fcc <_timer_init+0x34>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    1fd2:	00aa      	lsls	r2, r5, #2
    1fd4:	1952      	adds	r2, r2, r5
    1fd6:	0091      	lsls	r1, r2, #2
    1fd8:	4b34      	ldr	r3, [pc, #208]	; (20ac <STACK_SIZE+0xac>)
    1fda:	185b      	adds	r3, r3, r1
    1fdc:	885a      	ldrh	r2, [r3, #2]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1fde:	8022      	strh	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    1fe0:	7919      	ldrb	r1, [r3, #4]
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    1fe2:	7221      	strb	r1, [r4, #8]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    1fe4:	88db      	ldrh	r3, [r3, #6]
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    1fe6:	8163      	strh	r3, [r4, #10]
    1fe8:	230c      	movs	r3, #12
    1fea:	4013      	ands	r3, r2
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    1fec:	2b08      	cmp	r3, #8
    1fee:	d039      	beq.n	2064 <STACK_SIZE+0x64>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    1ff0:	2b00      	cmp	r3, #0
    1ff2:	d143      	bne.n	207c <STACK_SIZE+0x7c>
		hri_tccount16_write_CC_reg(hw, 0, (hri_tccount16_cc_reg_t)_tcs[i].cc0);
    1ff4:	4a2d      	ldr	r2, [pc, #180]	; (20ac <STACK_SIZE+0xac>)
    1ff6:	00ab      	lsls	r3, r5, #2
    1ff8:	1958      	adds	r0, r3, r5
    1ffa:	0081      	lsls	r1, r0, #2
    1ffc:	0008      	movs	r0, r1
    1ffe:	1851      	adds	r1, r2, r1
    2000:	8989      	ldrh	r1, [r1, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2002:	8321      	strh	r1, [r4, #24]
		hri_tccount16_write_CC_reg(hw, 1, (hri_tccount16_cc_reg_t)_tcs[i].cc1);
    2004:	1812      	adds	r2, r2, r0
    2006:	8a13      	ldrh	r3, [r2, #16]
    2008:	8363      	strh	r3, [r4, #26]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    200a:	2301      	movs	r3, #1
    200c:	7363      	strb	r3, [r4, #13]
	_tc_init_irq_param(hw, (void *)device);
    200e:	0031      	movs	r1, r6
    2010:	0020      	movs	r0, r4
    2012:	4b27      	ldr	r3, [pc, #156]	; (20b0 <STACK_SIZE+0xb0>)
    2014:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    2016:	0020      	movs	r0, r4
    2018:	4b26      	ldr	r3, [pc, #152]	; (20b4 <STACK_SIZE+0xb4>)
    201a:	4798      	blx	r3
    201c:	3012      	adds	r0, #18
    201e:	b2c0      	uxtb	r0, r0
    2020:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    2022:	2b00      	cmp	r3, #0
    2024:	db0a      	blt.n	203c <STACK_SIZE+0x3c>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2026:	211f      	movs	r1, #31
    2028:	4001      	ands	r1, r0
    202a:	2201      	movs	r2, #1
    202c:	408a      	lsls	r2, r1
    202e:	2180      	movs	r1, #128	; 0x80
    2030:	4c21      	ldr	r4, [pc, #132]	; (20b8 <STACK_SIZE+0xb8>)
    2032:	5062      	str	r2, [r4, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    2034:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2038:	f3bf 8f6f 	isb	sy
  if ((int32_t)(IRQn) >= 0)
    203c:	2b00      	cmp	r3, #0
    203e:	db07      	blt.n	2050 <STACK_SIZE+0x50>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2040:	211f      	movs	r1, #31
    2042:	4001      	ands	r1, r0
    2044:	2201      	movs	r2, #1
    2046:	408a      	lsls	r2, r1
    2048:	21c0      	movs	r1, #192	; 0xc0
    204a:	0049      	lsls	r1, r1, #1
    204c:	4c1a      	ldr	r4, [pc, #104]	; (20b8 <STACK_SIZE+0xb8>)
    204e:	5062      	str	r2, [r4, r1]
  if ((int32_t)(IRQn) >= 0)
    2050:	2b00      	cmp	r3, #0
    2052:	db05      	blt.n	2060 <STACK_SIZE+0x60>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2054:	231f      	movs	r3, #31
    2056:	4018      	ands	r0, r3
    2058:	3b1e      	subs	r3, #30
    205a:	4083      	lsls	r3, r0
    205c:	4a16      	ldr	r2, [pc, #88]	; (20b8 <STACK_SIZE+0xb8>)
    205e:	6013      	str	r3, [r2, #0]
}
    2060:	2000      	movs	r0, #0
    2062:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    2064:	4a11      	ldr	r2, [pc, #68]	; (20ac <STACK_SIZE+0xac>)
    2066:	00ab      	lsls	r3, r5, #2
    2068:	1958      	adds	r0, r3, r5
    206a:	0081      	lsls	r1, r0, #2
    206c:	0008      	movs	r0, r1
    206e:	1851      	adds	r1, r2, r1
    2070:	68c9      	ldr	r1, [r1, #12]
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2072:	61a1      	str	r1, [r4, #24]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    2074:	1812      	adds	r2, r2, r0
    2076:	6913      	ldr	r3, [r2, #16]
    2078:	61e3      	str	r3, [r4, #28]
    207a:	e7c6      	b.n	200a <STACK_SIZE+0xa>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    207c:	2b04      	cmp	r3, #4
    207e:	d1c4      	bne.n	200a <STACK_SIZE+0xa>
		hri_tccount8_write_CC_reg(hw, 0, (hri_tccount8_cc_reg_t)_tcs[i].cc0);
    2080:	490a      	ldr	r1, [pc, #40]	; (20ac <STACK_SIZE+0xac>)
    2082:	00ab      	lsls	r3, r5, #2
    2084:	1958      	adds	r0, r3, r5
    2086:	0082      	lsls	r2, r0, #2
    2088:	188a      	adds	r2, r1, r2
    208a:	7b10      	ldrb	r0, [r2, #12]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    208c:	7620      	strb	r0, [r4, #24]
		hri_tccount8_write_CC_reg(hw, 1, (hri_tccount8_cc_reg_t)_tcs[i].cc1);
    208e:	7c12      	ldrb	r2, [r2, #16]
    2090:	7662      	strb	r2, [r4, #25]
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    2092:	195d      	adds	r5, r3, r5
    2094:	00ab      	lsls	r3, r5, #2
    2096:	18c9      	adds	r1, r1, r3
    2098:	7a0b      	ldrb	r3, [r1, #8]
	((Tc *)hw)->COUNT8.PER.reg = data;
    209a:	7523      	strb	r3, [r4, #20]
    209c:	e7b5      	b.n	200a <STACK_SIZE+0xa>
    209e:	46c0      	nop			; (mov r8, r8)
    20a0:	00001f4d 	.word	0x00001f4d
    20a4:	00004280 	.word	0x00004280
    20a8:	000013cd 	.word	0x000013cd
    20ac:	00004258 	.word	0x00004258
    20b0:	00001f25 	.word	0x00001f25
    20b4:	00001f15 	.word	0x00001f15
    20b8:	e000e100 	.word	0xe000e100

000020bc <_tc_get_timer>:
}
    20bc:	2000      	movs	r0, #0
    20be:	4770      	bx	lr

000020c0 <TC3_Handler>:
{
    20c0:	b510      	push	{r4, lr}
	tc_interrupt_handler(_tc3_dev);
    20c2:	4b02      	ldr	r3, [pc, #8]	; (20cc <TC3_Handler+0xc>)
    20c4:	6818      	ldr	r0, [r3, #0]
    20c6:	4b02      	ldr	r3, [pc, #8]	; (20d0 <TC3_Handler+0x10>)
    20c8:	4798      	blx	r3
}
    20ca:	bd10      	pop	{r4, pc}
    20cc:	200001a8 	.word	0x200001a8
    20d0:	00001efd 	.word	0x00001efd

000020d4 <TC4_Handler>:
{
    20d4:	b510      	push	{r4, lr}
	tc_interrupt_handler(_tc4_dev);
    20d6:	4b02      	ldr	r3, [pc, #8]	; (20e0 <TC4_Handler+0xc>)
    20d8:	6858      	ldr	r0, [r3, #4]
    20da:	4b02      	ldr	r3, [pc, #8]	; (20e4 <TC4_Handler+0x10>)
    20dc:	4798      	blx	r3
}
    20de:	bd10      	pop	{r4, pc}
    20e0:	200001a8 	.word	0x200001a8
    20e4:	00001efd 	.word	0x00001efd

000020e8 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    20e8:	2000      	movs	r0, #0
    20ea:	4770      	bx	lr

000020ec <_usb_load_calib>:
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 55
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    20ec:	4b12      	ldr	r3, [pc, #72]	; (2138 <_usb_load_calib+0x4c>)
    20ee:	681a      	ldr	r2, [r3, #0]
    20f0:	0b53      	lsrs	r3, r2, #13
	uint32_t pad_transn
    20f2:	211f      	movs	r1, #31
    20f4:	400b      	ands	r3, r1
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    20f6:	0c90      	lsrs	r0, r2, #18
	uint32_t pad_transp
    20f8:	4001      	ands	r1, r0
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    20fa:	0dd0      	lsrs	r0, r2, #23
    20fc:	2207      	movs	r2, #7
    20fe:	4002      	ands	r2, r0
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0x1F) {
    2100:	2b1f      	cmp	r3, #31
    2102:	d012      	beq.n	212a <_usb_load_calib+0x3e>
		pad_transn = 5;
	}
	if (pad_transp == 0x1F) {
    2104:	291f      	cmp	r1, #31
    2106:	d012      	beq.n	212e <_usb_load_calib+0x42>
		pad_transp = 29;
	}
	if (pad_trim == 0x7) {
    2108:	2a07      	cmp	r2, #7
    210a:	d012      	beq.n	2132 <_usb_load_calib+0x46>
		pad_trim = 5;
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    210c:	019b      	lsls	r3, r3, #6
    210e:	430b      	orrs	r3, r1
    2110:	0312      	lsls	r2, r2, #12
    2112:	4313      	orrs	r3, r2
    2114:	4a09      	ldr	r2, [pc, #36]	; (213c <_usb_load_calib+0x50>)
    2116:	8513      	strh	r3, [r2, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    2118:	78d3      	ldrb	r3, [r2, #3]
    211a:	2103      	movs	r1, #3
    211c:	430b      	orrs	r3, r1
    211e:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    2120:	78d3      	ldrb	r3, [r2, #3]
    2122:	210c      	movs	r1, #12
    2124:	430b      	orrs	r3, r1
    2126:	70d3      	strb	r3, [r2, #3]
}
    2128:	4770      	bx	lr
		pad_transn = 5;
    212a:	3b1a      	subs	r3, #26
    212c:	e7ea      	b.n	2104 <_usb_load_calib+0x18>
		pad_transp = 29;
    212e:	3902      	subs	r1, #2
    2130:	e7ea      	b.n	2108 <_usb_load_calib+0x1c>
		pad_trim = 5;
    2132:	3a02      	subs	r2, #2
    2134:	e7ea      	b.n	210c <_usb_load_calib+0x20>
    2136:	46c0      	nop			; (mov r8, r8)
    2138:	00806024 	.word	0x00806024
    213c:	41005000 	.word	0x41005000

00002140 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    2140:	b510      	push	{r4, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    2142:	7c83      	ldrb	r3, [r0, #18]
    2144:	220f      	movs	r2, #15
    2146:	4013      	ands	r3, r2
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2148:	7cc1      	ldrb	r1, [r0, #19]
    214a:	3a08      	subs	r2, #8
    214c:	400a      	ands	r2, r1

	if (!is_ctrl) {
    214e:	2a01      	cmp	r2, #1
    2150:	d00d      	beq.n	216e <_usb_d_dev_handle_setup+0x2e>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2152:	001a      	movs	r2, r3
    2154:	3208      	adds	r2, #8
    2156:	0152      	lsls	r2, r2, #5
    2158:	4919      	ldr	r1, [pc, #100]	; (21c0 <_usb_d_dev_handle_setup+0x80>)
    215a:	468c      	mov	ip, r1
    215c:	4462      	add	r2, ip
    215e:	2110      	movs	r1, #16
    2160:	71d1      	strb	r1, [r2, #7]
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    2162:	015b      	lsls	r3, r3, #5
    2164:	4a17      	ldr	r2, [pc, #92]	; (21c4 <_usb_d_dev_handle_setup+0x84>)
    2166:	4694      	mov	ip, r2
    2168:	4463      	add	r3, ip
    216a:	7019      	strb	r1, [r3, #0]
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
}
    216c:	bd10      	pop	{r4, pc}
	if (_usb_d_dev_ep_is_busy(ept)) {
    216e:	064a      	lsls	r2, r1, #25
    2170:	d50c      	bpl.n	218c <_usb_d_dev_handle_setup+0x4c>
		ept->flags.bits.is_busy = 0;
    2172:	7cc2      	ldrb	r2, [r0, #19]
    2174:	2140      	movs	r1, #64	; 0x40
    2176:	438a      	bics	r2, r1
    2178:	74c2      	strb	r2, [r0, #19]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    217a:	001a      	movs	r2, r3
    217c:	3208      	adds	r2, #8
    217e:	0152      	lsls	r2, r2, #5
    2180:	4c0f      	ldr	r4, [pc, #60]	; (21c0 <_usb_d_dev_handle_setup+0x80>)
    2182:	46a4      	mov	ip, r4
    2184:	4462      	add	r2, ip
    2186:	2480      	movs	r4, #128	; 0x80
    2188:	7114      	strb	r4, [r2, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    218a:	7151      	strb	r1, [r2, #5]
	ept->flags.bits.is_stalled = 0;
    218c:	7cc2      	ldrb	r2, [r0, #19]
    218e:	2108      	movs	r1, #8
    2190:	438a      	bics	r2, r1
    2192:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    2194:	015a      	lsls	r2, r3, #5
    2196:	490c      	ldr	r1, [pc, #48]	; (21c8 <_usb_d_dev_handle_setup+0x88>)
    2198:	1889      	adds	r1, r1, r2
    219a:	2400      	movs	r4, #0
    219c:	728c      	strb	r4, [r1, #10]
    219e:	768c      	strb	r4, [r1, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    21a0:	3308      	adds	r3, #8
    21a2:	015b      	lsls	r3, r3, #5
    21a4:	4906      	ldr	r1, [pc, #24]	; (21c0 <_usb_d_dev_handle_setup+0x80>)
    21a6:	468c      	mov	ip, r1
    21a8:	4463      	add	r3, ip
    21aa:	216f      	movs	r1, #111	; 0x6f
    21ac:	71d9      	strb	r1, [r3, #7]
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    21ae:	4b05      	ldr	r3, [pc, #20]	; (21c4 <_usb_d_dev_handle_setup+0x84>)
    21b0:	469c      	mov	ip, r3
    21b2:	4462      	add	r2, ip
    21b4:	7011      	strb	r1, [r2, #0]
	dev_inst.ep_callbacks.setup(ept->ep);
    21b6:	4b05      	ldr	r3, [pc, #20]	; (21cc <_usb_d_dev_handle_setup+0x8c>)
    21b8:	689b      	ldr	r3, [r3, #8]
    21ba:	7c80      	ldrb	r0, [r0, #18]
    21bc:	4798      	blx	r3
    21be:	e7d5      	b.n	216c <_usb_d_dev_handle_setup+0x2c>
    21c0:	41005000 	.word	0x41005000
    21c4:	41005108 	.word	0x41005108
    21c8:	200001b0 	.word	0x200001b0
    21cc:	200002b0 	.word	0x200002b0

000021d0 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    21d0:	b510      	push	{r4, lr}
	uint8_t epn = USB_EP_GET_N(ept->ep);
    21d2:	7c82      	ldrb	r2, [r0, #18]
    21d4:	230f      	movs	r3, #15
    21d6:	4013      	ands	r3, r2
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    21d8:	2220      	movs	r2, #32
    21da:	408a      	lsls	r2, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    21dc:	b2d2      	uxtb	r2, r2
    21de:	015b      	lsls	r3, r3, #5
    21e0:	4905      	ldr	r1, [pc, #20]	; (21f8 <_usb_d_dev_handle_stall+0x28>)
    21e2:	468c      	mov	ip, r1
    21e4:	4463      	add	r3, ip
    21e6:	701a      	strb	r2, [r3, #0]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    21e8:	4b04      	ldr	r3, [pc, #16]	; (21fc <_usb_d_dev_handle_stall+0x2c>)
    21ea:	691b      	ldr	r3, [r3, #16]
    21ec:	6882      	ldr	r2, [r0, #8]
    21ee:	7c80      	ldrb	r0, [r0, #18]
    21f0:	2101      	movs	r1, #1
    21f2:	4798      	blx	r3
}
    21f4:	bd10      	pop	{r4, pc}
    21f6:	46c0      	nop			; (mov r8, r8)
    21f8:	41005108 	.word	0x41005108
    21fc:	200002b0 	.word	0x200002b0

00002200 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    2200:	b510      	push	{r4, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    2202:	7c83      	ldrb	r3, [r0, #18]
    2204:	2bff      	cmp	r3, #255	; 0xff
    2206:	d002      	beq.n	220e <_usb_d_dev_trans_done+0xe>
    2208:	7cc2      	ldrb	r2, [r0, #19]
    220a:	0652      	lsls	r2, r2, #25
    220c:	d400      	bmi.n	2210 <_usb_d_dev_trans_done+0x10>
		return;
	}
	ept->flags.bits.is_busy = 0;
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
}
    220e:	bd10      	pop	{r4, pc}
	ept->flags.bits.is_busy = 0;
    2210:	7cc2      	ldrb	r2, [r0, #19]
    2212:	2440      	movs	r4, #64	; 0x40
    2214:	43a2      	bics	r2, r4
    2216:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    2218:	4a02      	ldr	r2, [pc, #8]	; (2224 <_usb_d_dev_trans_done+0x24>)
    221a:	6914      	ldr	r4, [r2, #16]
    221c:	6882      	ldr	r2, [r0, #8]
    221e:	0018      	movs	r0, r3
    2220:	47a0      	blx	r4
    2222:	e7f4      	b.n	220e <_usb_d_dev_trans_done+0xe>
    2224:	200002b0 	.word	0x200002b0

00002228 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    2228:	b5f0      	push	{r4, r5, r6, r7, lr}
    222a:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    222c:	7c84      	ldrb	r4, [r0, #18]
    222e:	230f      	movs	r3, #15
    2230:	4023      	ands	r3, r4
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    2232:	4d18      	ldr	r5, [pc, #96]	; (2294 <_usb_d_dev_trans_stop+0x6c>)
    2234:	882e      	ldrh	r6, [r5, #0]
    2236:	ad01      	add	r5, sp, #4
    2238:	802e      	strh	r6, [r5, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    223a:	2cff      	cmp	r4, #255	; 0xff
    223c:	d01e      	beq.n	227c <_usb_d_dev_trans_stop+0x54>
    223e:	7cc4      	ldrb	r4, [r0, #19]
    2240:	0664      	lsls	r4, r4, #25
    2242:	d51b      	bpl.n	227c <_usb_d_dev_trans_stop+0x54>
		return;
	}
	/* Stop transfer */
	if (dir) {
    2244:	2900      	cmp	r1, #0
    2246:	d01b      	beq.n	2280 <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2248:	001c      	movs	r4, r3
    224a:	3408      	adds	r4, #8
    224c:	0164      	lsls	r4, r4, #5
    224e:	4d12      	ldr	r5, [pc, #72]	; (2298 <_usb_d_dev_trans_stop+0x70>)
    2250:	46ac      	mov	ip, r5
    2252:	4464      	add	r4, ip
    2254:	2580      	movs	r5, #128	; 0x80
    2256:	7125      	strb	r5, [r4, #4]
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    2258:	ad01      	add	r5, sp, #4
    225a:	5c6e      	ldrb	r6, [r5, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    225c:	001c      	movs	r4, r3
    225e:	3408      	adds	r4, #8
    2260:	0164      	lsls	r4, r4, #5
    2262:	4f0d      	ldr	r7, [pc, #52]	; (2298 <_usb_d_dev_trans_stop+0x70>)
    2264:	46bc      	mov	ip, r7
    2266:	4464      	add	r4, ip
    2268:	71e6      	strb	r6, [r4, #7]
	_usbd_ep_int_dis(epn, intflags[dir]);
    226a:	5c69      	ldrb	r1, [r5, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    226c:	015b      	lsls	r3, r3, #5
    226e:	4c0b      	ldr	r4, [pc, #44]	; (229c <_usb_d_dev_trans_stop+0x74>)
    2270:	46a4      	mov	ip, r4
    2272:	4463      	add	r3, ip
    2274:	7019      	strb	r1, [r3, #0]
	_usb_d_dev_trans_done(ept, code);
    2276:	0011      	movs	r1, r2
    2278:	4b09      	ldr	r3, [pc, #36]	; (22a0 <_usb_d_dev_trans_stop+0x78>)
    227a:	4798      	blx	r3
}
    227c:	b003      	add	sp, #12
    227e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2280:	001c      	movs	r4, r3
    2282:	3408      	adds	r4, #8
    2284:	0164      	lsls	r4, r4, #5
    2286:	4d04      	ldr	r5, [pc, #16]	; (2298 <_usb_d_dev_trans_stop+0x70>)
    2288:	46ac      	mov	ip, r5
    228a:	4464      	add	r4, ip
    228c:	2540      	movs	r5, #64	; 0x40
    228e:	7165      	strb	r5, [r4, #5]
    2290:	e7e2      	b.n	2258 <_usb_d_dev_trans_stop+0x30>
    2292:	46c0      	nop			; (mov r8, r8)
    2294:	00004294 	.word	0x00004294
    2298:	41005000 	.word	0x41005000
    229c:	41005108 	.word	0x41005108
    22a0:	00002201 	.word	0x00002201

000022a4 <_usb_d_dev_handle_trfail>:
{
    22a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    22a6:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    22a8:	7c83      	ldrb	r3, [r0, #18]
    22aa:	220f      	movs	r2, #15
    22ac:	4013      	ands	r3, r2
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    22ae:	4a3c      	ldr	r2, [pc, #240]	; (23a0 <_usb_d_dev_handle_trfail+0xfc>)
    22b0:	8894      	ldrh	r4, [r2, #4]
    22b2:	aa01      	add	r2, sp, #4
    22b4:	8014      	strh	r4, [r2, #0]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    22b6:	015a      	lsls	r2, r3, #5
    22b8:	4c3a      	ldr	r4, [pc, #232]	; (23a4 <_usb_d_dev_handle_trfail+0x100>)
    22ba:	18a4      	adds	r4, r4, r2
	uint8_t            eptype
    22bc:	2900      	cmp	r1, #0
    22be:	d033      	beq.n	2328 <_usb_d_dev_handle_trfail+0x84>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    22c0:	001a      	movs	r2, r3
    22c2:	3208      	adds	r2, #8
    22c4:	0152      	lsls	r2, r2, #5
    22c6:	4d38      	ldr	r5, [pc, #224]	; (23a8 <_usb_d_dev_handle_trfail+0x104>)
    22c8:	5d52      	ldrb	r2, [r2, r5]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    22ca:	0912      	lsrs	r2, r2, #4
    22cc:	2507      	movs	r5, #7
    22ce:	4015      	ands	r5, r2
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    22d0:	7cc2      	ldrb	r2, [r0, #19]
    22d2:	2607      	movs	r6, #7
    22d4:	4016      	ands	r6, r2
	st.reg = bank[bank_n].STATUS_BK.reg;
    22d6:	010a      	lsls	r2, r1, #4
    22d8:	18a2      	adds	r2, r4, r2
    22da:	7a94      	ldrb	r4, [r2, #10]
    22dc:	b2e4      	uxtb	r4, r4
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    22de:	2d02      	cmp	r5, #2
    22e0:	d02a      	beq.n	2338 <_usb_d_dev_handle_trfail+0x94>
	} else if (st.bit.ERRORFLOW) {
    22e2:	07a4      	lsls	r4, r4, #30
    22e4:	d544      	bpl.n	2370 <_usb_d_dev_handle_trfail+0xcc>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    22e6:	7a94      	ldrb	r4, [r2, #10]
    22e8:	2502      	movs	r5, #2
    22ea:	43ac      	bics	r4, r5
    22ec:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    22ee:	ac01      	add	r4, sp, #4
    22f0:	5c65      	ldrb	r5, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    22f2:	001a      	movs	r2, r3
    22f4:	3208      	adds	r2, #8
    22f6:	0152      	lsls	r2, r2, #5
    22f8:	4f2b      	ldr	r7, [pc, #172]	; (23a8 <_usb_d_dev_handle_trfail+0x104>)
    22fa:	46bc      	mov	ip, r7
    22fc:	4462      	add	r2, ip
    22fe:	71d5      	strb	r5, [r2, #7]
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    2300:	5c62      	ldrb	r2, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2302:	015b      	lsls	r3, r3, #5
    2304:	4c29      	ldr	r4, [pc, #164]	; (23ac <_usb_d_dev_handle_trfail+0x108>)
    2306:	46a4      	mov	ip, r4
    2308:	4463      	add	r3, ip
    230a:	701a      	strb	r2, [r3, #0]
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    230c:	2e01      	cmp	r6, #1
    230e:	d145      	bne.n	239c <_usb_d_dev_handle_trfail+0xf8>
    2310:	7cc3      	ldrb	r3, [r0, #19]
    2312:	065b      	lsls	r3, r3, #25
    2314:	d542      	bpl.n	239c <_usb_d_dev_handle_trfail+0xf8>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    2316:	7cc3      	ldrb	r3, [r0, #19]
    2318:	09db      	lsrs	r3, r3, #7
    231a:	4299      	cmp	r1, r3
    231c:	d03e      	beq.n	239c <_usb_d_dev_handle_trfail+0xf8>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    231e:	2200      	movs	r2, #0
    2320:	0019      	movs	r1, r3
    2322:	4b23      	ldr	r3, [pc, #140]	; (23b0 <_usb_d_dev_handle_trfail+0x10c>)
    2324:	4798      	blx	r3
    2326:	e039      	b.n	239c <_usb_d_dev_handle_trfail+0xf8>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    2328:	001a      	movs	r2, r3
    232a:	3208      	adds	r2, #8
    232c:	0152      	lsls	r2, r2, #5
    232e:	4d1e      	ldr	r5, [pc, #120]	; (23a8 <_usb_d_dev_handle_trfail+0x104>)
    2330:	5d55      	ldrb	r5, [r2, r5]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    2332:	2207      	movs	r2, #7
    2334:	4015      	ands	r5, r2
    2336:	e7cb      	b.n	22d0 <_usb_d_dev_handle_trfail+0x2c>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    2338:	07e5      	lsls	r5, r4, #31
    233a:	d5d2      	bpl.n	22e2 <_usb_d_dev_handle_trfail+0x3e>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    233c:	7a94      	ldrb	r4, [r2, #10]
    233e:	2501      	movs	r5, #1
    2340:	43ac      	bics	r4, r5
    2342:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    2344:	ac01      	add	r4, sp, #4
    2346:	5c65      	ldrb	r5, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2348:	001a      	movs	r2, r3
    234a:	3208      	adds	r2, #8
    234c:	0152      	lsls	r2, r2, #5
    234e:	4e16      	ldr	r6, [pc, #88]	; (23a8 <_usb_d_dev_handle_trfail+0x104>)
    2350:	46b4      	mov	ip, r6
    2352:	4462      	add	r2, ip
    2354:	71d5      	strb	r5, [r2, #7]
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    2356:	5c62      	ldrb	r2, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2358:	015b      	lsls	r3, r3, #5
    235a:	4c14      	ldr	r4, [pc, #80]	; (23ac <_usb_d_dev_handle_trfail+0x108>)
    235c:	46a4      	mov	ip, r4
    235e:	4463      	add	r3, ip
    2360:	701a      	strb	r2, [r3, #0]
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    2362:	1e4b      	subs	r3, r1, #1
    2364:	4199      	sbcs	r1, r3
    2366:	b2c9      	uxtb	r1, r1
    2368:	2204      	movs	r2, #4
    236a:	4b11      	ldr	r3, [pc, #68]	; (23b0 <_usb_d_dev_handle_trfail+0x10c>)
    236c:	4798      	blx	r3
    236e:	e015      	b.n	239c <_usb_d_dev_handle_trfail+0xf8>
	bank->STATUS_BK.reg     = 0;
    2370:	005a      	lsls	r2, r3, #1
    2372:	1852      	adds	r2, r2, r1
    2374:	0112      	lsls	r2, r2, #4
    2376:	480b      	ldr	r0, [pc, #44]	; (23a4 <_usb_d_dev_handle_trfail+0x100>)
    2378:	1882      	adds	r2, r0, r2
    237a:	2000      	movs	r0, #0
    237c:	7290      	strb	r0, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    237e:	a801      	add	r0, sp, #4
    2380:	5c44      	ldrb	r4, [r0, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2382:	001a      	movs	r2, r3
    2384:	3208      	adds	r2, #8
    2386:	0152      	lsls	r2, r2, #5
    2388:	4d07      	ldr	r5, [pc, #28]	; (23a8 <_usb_d_dev_handle_trfail+0x104>)
    238a:	46ac      	mov	ip, r5
    238c:	4462      	add	r2, ip
    238e:	71d4      	strb	r4, [r2, #7]
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    2390:	5c42      	ldrb	r2, [r0, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2392:	015b      	lsls	r3, r3, #5
    2394:	4905      	ldr	r1, [pc, #20]	; (23ac <_usb_d_dev_handle_trfail+0x108>)
    2396:	468c      	mov	ip, r1
    2398:	4463      	add	r3, ip
    239a:	701a      	strb	r2, [r3, #0]
}
    239c:	b003      	add	sp, #12
    239e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    23a0:	00004294 	.word	0x00004294
    23a4:	200001b0 	.word	0x200001b0
    23a8:	41005000 	.word	0x41005000
    23ac:	41005108 	.word	0x41005108
    23b0:	00002229 	.word	0x00002229

000023b4 <_usb_d_dev_reset_epts>:
{
    23b4:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < USB_D_N_EP; i++) {
    23b6:	2400      	movs	r4, #0
    23b8:	e017      	b.n	23ea <_usb_d_dev_reset_epts+0x36>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    23ba:	4d10      	ldr	r5, [pc, #64]	; (23fc <_usb_d_dev_reset_epts+0x48>)
    23bc:	00a6      	lsls	r6, r4, #2
    23be:	1933      	adds	r3, r6, r4
    23c0:	0098      	lsls	r0, r3, #2
    23c2:	3010      	adds	r0, #16
    23c4:	1828      	adds	r0, r5, r0
    23c6:	3004      	adds	r0, #4
    23c8:	2103      	movs	r1, #3
    23ca:	4b0d      	ldr	r3, [pc, #52]	; (2400 <_usb_d_dev_reset_epts+0x4c>)
    23cc:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    23ce:	1932      	adds	r2, r6, r4
    23d0:	0093      	lsls	r3, r2, #2
    23d2:	18eb      	adds	r3, r5, r3
    23d4:	3326      	adds	r3, #38	; 0x26
    23d6:	22ff      	movs	r2, #255	; 0xff
    23d8:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    23da:	1936      	adds	r6, r6, r4
    23dc:	00b3      	lsls	r3, r6, #2
    23de:	18ed      	adds	r5, r5, r3
    23e0:	3527      	adds	r5, #39	; 0x27
    23e2:	2300      	movs	r3, #0
    23e4:	702b      	strb	r3, [r5, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    23e6:	3401      	adds	r4, #1
    23e8:	b2e4      	uxtb	r4, r4
    23ea:	2c10      	cmp	r4, #16
    23ec:	d9e5      	bls.n	23ba <_usb_d_dev_reset_epts+0x6>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    23ee:	2280      	movs	r2, #128	; 0x80
    23f0:	0052      	lsls	r2, r2, #1
    23f2:	2100      	movs	r1, #0
    23f4:	4803      	ldr	r0, [pc, #12]	; (2404 <_usb_d_dev_reset_epts+0x50>)
    23f6:	4b04      	ldr	r3, [pc, #16]	; (2408 <_usb_d_dev_reset_epts+0x54>)
    23f8:	4798      	blx	r3
}
    23fa:	bd70      	pop	{r4, r5, r6, pc}
    23fc:	200002b0 	.word	0x200002b0
    2400:	00002201 	.word	0x00002201
    2404:	200001b0 	.word	0x200001b0
    2408:	000040cf 	.word	0x000040cf

0000240c <_usb_d_dev_in_next>:
{
    240c:	b5f0      	push	{r4, r5, r6, r7, lr}
    240e:	46c6      	mov	lr, r8
    2410:	b500      	push	{lr}
    2412:	0005      	movs	r5, r0
    2414:	000e      	movs	r6, r1
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    2416:	7c83      	ldrb	r3, [r0, #18]
    2418:	240f      	movs	r4, #15
    241a:	401c      	ands	r4, r3
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    241c:	0162      	lsls	r2, r4, #5
    241e:	4b56      	ldr	r3, [pc, #344]	; (2578 <_usb_d_dev_in_next+0x16c>)
    2420:	189b      	adds	r3, r3, r2
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    2422:	2900      	cmp	r1, #0
    2424:	d058      	beq.n	24d8 <_usb_d_dev_in_next+0xcc>
    2426:	6959      	ldr	r1, [r3, #20]
    2428:	0489      	lsls	r1, r1, #18
    242a:	0c89      	lsrs	r1, r1, #18
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    242c:	8a2b      	ldrh	r3, [r5, #16]
    242e:	4a53      	ldr	r2, [pc, #332]	; (257c <_usb_d_dev_in_next+0x170>)
    2430:	4293      	cmp	r3, r2
    2432:	d053      	beq.n	24dc <_usb_d_dev_in_next+0xd0>
    2434:	3b01      	subs	r3, #1
    2436:	b21b      	sxth	r3, r3
    2438:	400b      	ands	r3, r1
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    243a:	7cea      	ldrb	r2, [r5, #19]
    243c:	2707      	movs	r7, #7
    243e:	4017      	ands	r7, r2
	if (isr) {
    2440:	2e00      	cmp	r6, #0
    2442:	d007      	beq.n	2454 <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2444:	0022      	movs	r2, r4
    2446:	3208      	adds	r2, #8
    2448:	0152      	lsls	r2, r2, #5
    244a:	484d      	ldr	r0, [pc, #308]	; (2580 <_usb_d_dev_in_next+0x174>)
    244c:	4684      	mov	ip, r0
    244e:	4462      	add	r2, ip
    2450:	2002      	movs	r0, #2
    2452:	71d0      	strb	r0, [r2, #7]
	ept->trans_count += trans_count;
    2454:	68aa      	ldr	r2, [r5, #8]
    2456:	4694      	mov	ip, r2
    2458:	4461      	add	r1, ip
    245a:	60a9      	str	r1, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    245c:	686a      	ldr	r2, [r5, #4]
    245e:	4291      	cmp	r1, r2
    2460:	d24e      	bcs.n	2500 <_usb_d_dev_in_next+0xf4>
		trans_next = ept->trans_size - ept->trans_count;
    2462:	b292      	uxth	r2, r2
    2464:	b28b      	uxth	r3, r1
    2466:	1ad2      	subs	r2, r2, r3
    2468:	b292      	uxth	r2, r2
		if (ept->flags.bits.use_cache) {
    246a:	7ceb      	ldrb	r3, [r5, #19]
    246c:	069b      	lsls	r3, r3, #26
    246e:	d537      	bpl.n	24e0 <_usb_d_dev_in_next+0xd4>
			if (trans_next > ept->size) {
    2470:	8a2b      	ldrh	r3, [r5, #16]
    2472:	4698      	mov	r8, r3
    2474:	429a      	cmp	r2, r3
    2476:	d800      	bhi.n	247a <_usb_d_dev_in_next+0x6e>
		trans_next = ept->trans_size - ept->trans_count;
    2478:	4690      	mov	r8, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    247a:	682b      	ldr	r3, [r5, #0]
    247c:	469c      	mov	ip, r3
    247e:	4461      	add	r1, ip
    2480:	4642      	mov	r2, r8
    2482:	68e8      	ldr	r0, [r5, #12]
    2484:	4b3f      	ldr	r3, [pc, #252]	; (2584 <_usb_d_dev_in_next+0x178>)
    2486:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    2488:	68e9      	ldr	r1, [r5, #12]
	bank->ADDR.reg          = addr;
    248a:	0162      	lsls	r2, r4, #5
    248c:	4b3a      	ldr	r3, [pc, #232]	; (2578 <_usb_d_dev_in_next+0x16c>)
    248e:	189b      	adds	r3, r3, r2
    2490:	6119      	str	r1, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    2492:	0163      	lsls	r3, r4, #5
    2494:	4a38      	ldr	r2, [pc, #224]	; (2578 <_usb_d_dev_in_next+0x16c>)
    2496:	18d2      	adds	r2, r2, r3
    2498:	6951      	ldr	r1, [r2, #20]
    249a:	4643      	mov	r3, r8
    249c:	049b      	lsls	r3, r3, #18
    249e:	0c9b      	lsrs	r3, r3, #18
    24a0:	0b89      	lsrs	r1, r1, #14
    24a2:	0389      	lsls	r1, r1, #14
    24a4:	430b      	orrs	r3, r1
    24a6:	6153      	str	r3, [r2, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    24a8:	6951      	ldr	r1, [r2, #20]
    24aa:	4b37      	ldr	r3, [pc, #220]	; (2588 <_usb_d_dev_in_next+0x17c>)
    24ac:	400b      	ands	r3, r1
    24ae:	6153      	str	r3, [r2, #20]
	if (!isr) {
    24b0:	2e00      	cmp	r6, #0
    24b2:	d107      	bne.n	24c4 <_usb_d_dev_in_next+0xb8>
		if (is_ctrl) {
    24b4:	2f01      	cmp	r7, #1
    24b6:	d05d      	beq.n	2574 <_usb_d_dev_in_next+0x168>
			inten = USB_D_BANK1_INT_FLAGS;
    24b8:	224a      	movs	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    24ba:	0163      	lsls	r3, r4, #5
    24bc:	4933      	ldr	r1, [pc, #204]	; (258c <_usb_d_dev_in_next+0x180>)
    24be:	468c      	mov	ip, r1
    24c0:	4463      	add	r3, ip
    24c2:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    24c4:	3408      	adds	r4, #8
    24c6:	0164      	lsls	r4, r4, #5
    24c8:	4b2d      	ldr	r3, [pc, #180]	; (2580 <_usb_d_dev_in_next+0x174>)
    24ca:	469c      	mov	ip, r3
    24cc:	4464      	add	r4, ip
    24ce:	2380      	movs	r3, #128	; 0x80
    24d0:	7163      	strb	r3, [r4, #5]
}
    24d2:	bc04      	pop	{r2}
    24d4:	4690      	mov	r8, r2
    24d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    24d8:	2100      	movs	r1, #0
    24da:	e7a7      	b.n	242c <_usb_d_dev_in_next+0x20>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    24dc:	b21b      	sxth	r3, r3
    24de:	e7ab      	b.n	2438 <_usb_d_dev_in_next+0x2c>
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    24e0:	2380      	movs	r3, #128	; 0x80
    24e2:	019b      	lsls	r3, r3, #6
    24e4:	429a      	cmp	r2, r3
    24e6:	d807      	bhi.n	24f8 <_usb_d_dev_in_next+0xec>
		trans_next = ept->trans_size - ept->trans_count;
    24e8:	4690      	mov	r8, r2
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    24ea:	682b      	ldr	r3, [r5, #0]
    24ec:	1859      	adds	r1, r3, r1
	bank->ADDR.reg          = addr;
    24ee:	0162      	lsls	r2, r4, #5
    24f0:	4b21      	ldr	r3, [pc, #132]	; (2578 <_usb_d_dev_in_next+0x16c>)
    24f2:	189b      	adds	r3, r3, r2
    24f4:	6119      	str	r1, [r3, #16]
    24f6:	e7cc      	b.n	2492 <_usb_d_dev_in_next+0x86>
				trans_next = USB_D_DEV_TRANS_MAX;
    24f8:	2380      	movs	r3, #128	; 0x80
    24fa:	019b      	lsls	r3, r3, #6
    24fc:	4698      	mov	r8, r3
    24fe:	e7f4      	b.n	24ea <_usb_d_dev_in_next+0xde>
	} else if (ept->flags.bits.need_zlp) {
    2500:	7cea      	ldrb	r2, [r5, #19]
    2502:	06d2      	lsls	r2, r2, #27
    2504:	d50f      	bpl.n	2526 <_usb_d_dev_in_next+0x11a>
		ept->flags.bits.need_zlp = 0;
    2506:	7ceb      	ldrb	r3, [r5, #19]
    2508:	2210      	movs	r2, #16
    250a:	4393      	bics	r3, r2
    250c:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    250e:	0162      	lsls	r2, r4, #5
    2510:	4b19      	ldr	r3, [pc, #100]	; (2578 <_usb_d_dev_in_next+0x16c>)
    2512:	189b      	adds	r3, r3, r2
    2514:	695a      	ldr	r2, [r3, #20]
    2516:	0b92      	lsrs	r2, r2, #14
    2518:	0391      	lsls	r1, r2, #14
    251a:	6159      	str	r1, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    251c:	6959      	ldr	r1, [r3, #20]
    251e:	4a1a      	ldr	r2, [pc, #104]	; (2588 <_usb_d_dev_in_next+0x17c>)
    2520:	400a      	ands	r2, r1
    2522:	615a      	str	r2, [r3, #20]
    2524:	e7c4      	b.n	24b0 <_usb_d_dev_in_next+0xa4>
	if (is_ctrl) {
    2526:	2f01      	cmp	r7, #1
    2528:	d00d      	beq.n	2546 <_usb_d_dev_in_next+0x13a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    252a:	0164      	lsls	r4, r4, #5
    252c:	4a18      	ldr	r2, [pc, #96]	; (2590 <_usb_d_dev_in_next+0x184>)
    252e:	4694      	mov	ip, r2
    2530:	4464      	add	r4, ip
    2532:	224a      	movs	r2, #74	; 0x4a
    2534:	7022      	strb	r2, [r4, #0]
	if (last_pkt == ept->size) {
    2536:	8a2a      	ldrh	r2, [r5, #16]
    2538:	4293      	cmp	r3, r2
    253a:	d00b      	beq.n	2554 <_usb_d_dev_in_next+0x148>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    253c:	2100      	movs	r1, #0
    253e:	0028      	movs	r0, r5
    2540:	4b14      	ldr	r3, [pc, #80]	; (2594 <_usb_d_dev_in_next+0x188>)
    2542:	4798      	blx	r3
	return;
    2544:	e7c5      	b.n	24d2 <_usb_d_dev_in_next+0xc6>
    2546:	0164      	lsls	r4, r4, #5
    2548:	4a11      	ldr	r2, [pc, #68]	; (2590 <_usb_d_dev_in_next+0x184>)
    254a:	4694      	mov	ip, r2
    254c:	4464      	add	r4, ip
    254e:	224b      	movs	r2, #75	; 0x4b
    2550:	7022      	strb	r2, [r4, #0]
    2552:	e7f0      	b.n	2536 <_usb_d_dev_in_next+0x12a>
		ept->flags.bits.is_busy = 0;
    2554:	7ceb      	ldrb	r3, [r5, #19]
    2556:	2240      	movs	r2, #64	; 0x40
    2558:	4393      	bics	r3, r2
    255a:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    255c:	4b0e      	ldr	r3, [pc, #56]	; (2598 <_usb_d_dev_in_next+0x18c>)
    255e:	68db      	ldr	r3, [r3, #12]
    2560:	7ca8      	ldrb	r0, [r5, #18]
    2562:	68a9      	ldr	r1, [r5, #8]
    2564:	4798      	blx	r3
    2566:	2800      	cmp	r0, #0
    2568:	d1b3      	bne.n	24d2 <_usb_d_dev_in_next+0xc6>
		ept->flags.bits.is_busy = 1;
    256a:	7ceb      	ldrb	r3, [r5, #19]
    256c:	2240      	movs	r2, #64	; 0x40
    256e:	4313      	orrs	r3, r2
    2570:	74eb      	strb	r3, [r5, #19]
    2572:	e7e3      	b.n	253c <_usb_d_dev_in_next+0x130>
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    2574:	224e      	movs	r2, #78	; 0x4e
    2576:	e7a0      	b.n	24ba <_usb_d_dev_in_next+0xae>
    2578:	200001b0 	.word	0x200001b0
    257c:	000003ff 	.word	0x000003ff
    2580:	41005000 	.word	0x41005000
    2584:	000040bd 	.word	0x000040bd
    2588:	f0003fff 	.word	0xf0003fff
    258c:	41005109 	.word	0x41005109
    2590:	41005108 	.word	0x41005108
    2594:	00002201 	.word	0x00002201
    2598:	200002b0 	.word	0x200002b0

0000259c <_usb_d_dev_out_next>:
{
    259c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    259e:	46de      	mov	lr, fp
    25a0:	4657      	mov	r7, sl
    25a2:	464e      	mov	r6, r9
    25a4:	4645      	mov	r5, r8
    25a6:	b5e0      	push	{r5, r6, r7, lr}
    25a8:	0004      	movs	r4, r0
    25aa:	000f      	movs	r7, r1
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    25ac:	7c83      	ldrb	r3, [r0, #18]
    25ae:	250f      	movs	r5, #15
    25b0:	401d      	ands	r5, r3
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    25b2:	2900      	cmp	r1, #0
    25b4:	d059      	beq.n	266a <_usb_d_dev_out_next+0xce>
    25b6:	016a      	lsls	r2, r5, #5
    25b8:	4b71      	ldr	r3, [pc, #452]	; (2780 <_usb_d_dev_out_next+0x1e4>)
    25ba:	189b      	adds	r3, r3, r2
    25bc:	685b      	ldr	r3, [r3, #4]
    25be:	011b      	lsls	r3, r3, #4
    25c0:	0c9b      	lsrs	r3, r3, #18
    25c2:	469a      	mov	sl, r3
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    25c4:	2f00      	cmp	r7, #0
    25c6:	d053      	beq.n	2670 <_usb_d_dev_out_next+0xd4>
    25c8:	016a      	lsls	r2, r5, #5
    25ca:	4b6d      	ldr	r3, [pc, #436]	; (2780 <_usb_d_dev_out_next+0x1e4>)
    25cc:	189b      	adds	r3, r3, r2
    25ce:	685b      	ldr	r3, [r3, #4]
    25d0:	049b      	lsls	r3, r3, #18
    25d2:	0c9b      	lsrs	r3, r3, #18
    25d4:	4698      	mov	r8, r3
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    25d6:	8a26      	ldrh	r6, [r4, #16]
    25d8:	4b6a      	ldr	r3, [pc, #424]	; (2784 <_usb_d_dev_out_next+0x1e8>)
    25da:	429e      	cmp	r6, r3
    25dc:	d001      	beq.n	25e2 <_usb_d_dev_out_next+0x46>
    25de:	3e01      	subs	r6, #1
    25e0:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    25e2:	4643      	mov	r3, r8
    25e4:	4033      	ands	r3, r6
    25e6:	469b      	mov	fp, r3
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    25e8:	7ce3      	ldrb	r3, [r4, #19]
    25ea:	2207      	movs	r2, #7
    25ec:	401a      	ands	r2, r3
    25ee:	4691      	mov	r9, r2
	if (isr) {
    25f0:	2f00      	cmp	r7, #0
    25f2:	d007      	beq.n	2604 <_usb_d_dev_out_next+0x68>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    25f4:	002b      	movs	r3, r5
    25f6:	3308      	adds	r3, #8
    25f8:	015b      	lsls	r3, r3, #5
    25fa:	4a63      	ldr	r2, [pc, #396]	; (2788 <_usb_d_dev_out_next+0x1ec>)
    25fc:	4694      	mov	ip, r2
    25fe:	4463      	add	r3, ip
    2600:	2201      	movs	r2, #1
    2602:	71da      	strb	r2, [r3, #7]
	if (ept->flags.bits.use_cache && ept->trans_size) {
    2604:	7ce3      	ldrb	r3, [r4, #19]
    2606:	069b      	lsls	r3, r3, #26
    2608:	d511      	bpl.n	262e <_usb_d_dev_out_next+0x92>
    260a:	6862      	ldr	r2, [r4, #4]
    260c:	2a00      	cmp	r2, #0
    260e:	d00e      	beq.n	262e <_usb_d_dev_out_next+0x92>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    2610:	b292      	uxth	r2, r2
    2612:	8923      	ldrh	r3, [r4, #8]
    2614:	1ad2      	subs	r2, r2, r3
    2616:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    2618:	6823      	ldr	r3, [r4, #0]
    261a:	68a1      	ldr	r1, [r4, #8]
    261c:	468c      	mov	ip, r1
    261e:	4463      	add	r3, ip
    2620:	0018      	movs	r0, r3
    2622:	68e1      	ldr	r1, [r4, #12]
    2624:	4593      	cmp	fp, r2
    2626:	d200      	bcs.n	262a <_usb_d_dev_out_next+0x8e>
    2628:	465a      	mov	r2, fp
    262a:	4b58      	ldr	r3, [pc, #352]	; (278c <_usb_d_dev_out_next+0x1f0>)
    262c:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    262e:	6863      	ldr	r3, [r4, #4]
    2630:	2b00      	cmp	r3, #0
    2632:	d120      	bne.n	2676 <_usb_d_dev_out_next+0xda>
    2634:	7ce2      	ldrb	r2, [r4, #19]
    2636:	06d2      	lsls	r2, r2, #27
    2638:	d51d      	bpl.n	2676 <_usb_d_dev_out_next+0xda>
		ept->flags.bits.need_zlp  = 0;
    263a:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    263c:	2210      	movs	r2, #16
    263e:	4393      	bics	r3, r2
    2640:	2220      	movs	r2, #32
    2642:	4313      	orrs	r3, r2
    2644:	74e3      	strb	r3, [r4, #19]
	bank->ADDR.reg          = addr;
    2646:	494e      	ldr	r1, [pc, #312]	; (2780 <_usb_d_dev_out_next+0x1e4>)
    2648:	016a      	lsls	r2, r5, #5
    264a:	68e3      	ldr	r3, [r4, #12]
    264c:	5053      	str	r3, [r2, r1]
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    264e:	8a23      	ldrh	r3, [r4, #16]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    2650:	188a      	adds	r2, r1, r2
    2652:	6851      	ldr	r1, [r2, #4]
    2654:	049b      	lsls	r3, r3, #18
    2656:	091b      	lsrs	r3, r3, #4
    2658:	484d      	ldr	r0, [pc, #308]	; (2790 <_usb_d_dev_out_next+0x1f4>)
    265a:	4001      	ands	r1, r0
    265c:	430b      	orrs	r3, r1
    265e:	6053      	str	r3, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    2660:	6853      	ldr	r3, [r2, #4]
    2662:	0b9b      	lsrs	r3, r3, #14
    2664:	0399      	lsls	r1, r3, #14
    2666:	6051      	str	r1, [r2, #4]
    2668:	e047      	b.n	26fa <_usb_d_dev_out_next+0x15e>
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    266a:	2300      	movs	r3, #0
    266c:	469a      	mov	sl, r3
    266e:	e7a9      	b.n	25c4 <_usb_d_dev_out_next+0x28>
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    2670:	2300      	movs	r3, #0
    2672:	4698      	mov	r8, r3
    2674:	e7af      	b.n	25d6 <_usb_d_dev_out_next+0x3a>
	} else if (isr && last_pkt < ept->size) {
    2676:	2f00      	cmp	r7, #0
    2678:	d01d      	beq.n	26b6 <_usb_d_dev_out_next+0x11a>
    267a:	8a22      	ldrh	r2, [r4, #16]
    267c:	4593      	cmp	fp, r2
    267e:	d21a      	bcs.n	26b6 <_usb_d_dev_out_next+0x11a>
		ept->flags.bits.need_zlp = 0;
    2680:	7ce3      	ldrb	r3, [r4, #19]
    2682:	2210      	movs	r2, #16
    2684:	4393      	bics	r3, r2
    2686:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    2688:	68a3      	ldr	r3, [r4, #8]
    268a:	4443      	add	r3, r8
    268c:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    268e:	464b      	mov	r3, r9
    2690:	2b01      	cmp	r3, #1
    2692:	d066      	beq.n	2762 <_usb_d_dev_out_next+0x1c6>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2694:	016b      	lsls	r3, r5, #5
    2696:	4a3f      	ldr	r2, [pc, #252]	; (2794 <_usb_d_dev_out_next+0x1f8>)
    2698:	4694      	mov	ip, r2
    269a:	4463      	add	r3, ip
    269c:	2225      	movs	r2, #37	; 0x25
    269e:	701a      	strb	r2, [r3, #0]
	if (0 == epn) {
    26a0:	2d00      	cmp	r5, #0
    26a2:	d103      	bne.n	26ac <_usb_d_dev_out_next+0x110>
	bank->ADDR.reg          = addr;
    26a4:	016d      	lsls	r5, r5, #5
    26a6:	4b36      	ldr	r3, [pc, #216]	; (2780 <_usb_d_dev_out_next+0x1e4>)
    26a8:	68e2      	ldr	r2, [r4, #12]
    26aa:	50ea      	str	r2, [r5, r3]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    26ac:	2100      	movs	r1, #0
    26ae:	0020      	movs	r0, r4
    26b0:	4b39      	ldr	r3, [pc, #228]	; (2798 <_usb_d_dev_out_next+0x1fc>)
    26b2:	4798      	blx	r3
	return;
    26b4:	e033      	b.n	271e <_usb_d_dev_out_next+0x182>
		ept->trans_count += trans_size;
    26b6:	68a2      	ldr	r2, [r4, #8]
    26b8:	4452      	add	r2, sl
    26ba:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    26bc:	4293      	cmp	r3, r2
    26be:	d9e6      	bls.n	268e <_usb_d_dev_out_next+0xf2>
			trans_next = ept->trans_size - ept->trans_count;
    26c0:	b29b      	uxth	r3, r3
    26c2:	b291      	uxth	r1, r2
    26c4:	1a5b      	subs	r3, r3, r1
    26c6:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    26c8:	7ce1      	ldrb	r1, [r4, #19]
    26ca:	0689      	lsls	r1, r1, #26
    26cc:	d52d      	bpl.n	272a <_usb_d_dev_out_next+0x18e>
				if (trans_next > ept->size) {
    26ce:	8a21      	ldrh	r1, [r4, #16]
    26d0:	428b      	cmp	r3, r1
    26d2:	d800      	bhi.n	26d6 <_usb_d_dev_out_next+0x13a>
			trans_next = ept->trans_size - ept->trans_count;
    26d4:	0019      	movs	r1, r3
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    26d6:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    26d8:	016b      	lsls	r3, r5, #5
    26da:	4a29      	ldr	r2, [pc, #164]	; (2780 <_usb_d_dev_out_next+0x1e4>)
    26dc:	5098      	str	r0, [r3, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    26de:	016b      	lsls	r3, r5, #5
    26e0:	4827      	ldr	r0, [pc, #156]	; (2780 <_usb_d_dev_out_next+0x1e4>)
    26e2:	18c0      	adds	r0, r0, r3
    26e4:	6842      	ldr	r2, [r0, #4]
    26e6:	048b      	lsls	r3, r1, #18
    26e8:	091b      	lsrs	r3, r3, #4
    26ea:	4929      	ldr	r1, [pc, #164]	; (2790 <_usb_d_dev_out_next+0x1f4>)
    26ec:	400a      	ands	r2, r1
    26ee:	4313      	orrs	r3, r2
    26f0:	6043      	str	r3, [r0, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    26f2:	6843      	ldr	r3, [r0, #4]
    26f4:	0b9b      	lsrs	r3, r3, #14
    26f6:	039a      	lsls	r2, r3, #14
    26f8:	6042      	str	r2, [r0, #4]
	if (!isr) {
    26fa:	2f00      	cmp	r7, #0
    26fc:	d108      	bne.n	2710 <_usb_d_dev_out_next+0x174>
		if (is_ctrl) {
    26fe:	464b      	mov	r3, r9
    2700:	2b01      	cmp	r3, #1
    2702:	d035      	beq.n	2770 <_usb_d_dev_out_next+0x1d4>
			inten = USB_D_BANK0_INT_FLAGS;
    2704:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    2706:	016b      	lsls	r3, r5, #5
    2708:	4924      	ldr	r1, [pc, #144]	; (279c <_usb_d_dev_out_next+0x200>)
    270a:	468c      	mov	ip, r1
    270c:	4463      	add	r3, ip
    270e:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2710:	3508      	adds	r5, #8
    2712:	016d      	lsls	r5, r5, #5
    2714:	4b1c      	ldr	r3, [pc, #112]	; (2788 <_usb_d_dev_out_next+0x1ec>)
    2716:	469c      	mov	ip, r3
    2718:	4465      	add	r5, ip
    271a:	2340      	movs	r3, #64	; 0x40
    271c:	712b      	strb	r3, [r5, #4]
}
    271e:	bc3c      	pop	{r2, r3, r4, r5}
    2720:	4690      	mov	r8, r2
    2722:	4699      	mov	r9, r3
    2724:	46a2      	mov	sl, r4
    2726:	46ab      	mov	fp, r5
    2728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (trans_next > ept->size) {
    272a:	8a21      	ldrh	r1, [r4, #16]
    272c:	428b      	cmp	r3, r1
    272e:	d90b      	bls.n	2748 <_usb_d_dev_out_next+0x1ac>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    2730:	2180      	movs	r1, #128	; 0x80
    2732:	0189      	lsls	r1, r1, #6
    2734:	428b      	cmp	r3, r1
    2736:	d80f      	bhi.n	2758 <_usb_d_dev_out_next+0x1bc>
    2738:	43b3      	bics	r3, r6
    273a:	0019      	movs	r1, r3
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    273c:	6823      	ldr	r3, [r4, #0]
    273e:	189a      	adds	r2, r3, r2
	bank->ADDR.reg          = addr;
    2740:	016b      	lsls	r3, r5, #5
    2742:	480f      	ldr	r0, [pc, #60]	; (2780 <_usb_d_dev_out_next+0x1e4>)
    2744:	501a      	str	r2, [r3, r0]
    2746:	e7ca      	b.n	26de <_usb_d_dev_out_next+0x142>
				} else if (trans_next < ept->size) {
    2748:	428b      	cmp	r3, r1
    274a:	d208      	bcs.n	275e <_usb_d_dev_out_next+0x1c2>
					ept->flags.bits.use_cache = 1;
    274c:	7ce1      	ldrb	r1, [r4, #19]
    274e:	2020      	movs	r0, #32
    2750:	4301      	orrs	r1, r0
    2752:	74e1      	strb	r1, [r4, #19]
			trans_next = ept->trans_size - ept->trans_count;
    2754:	0019      	movs	r1, r3
    2756:	e7f1      	b.n	273c <_usb_d_dev_out_next+0x1a0>
						trans_next = USB_D_DEV_TRANS_MAX;
    2758:	2180      	movs	r1, #128	; 0x80
    275a:	0189      	lsls	r1, r1, #6
    275c:	e7ee      	b.n	273c <_usb_d_dev_out_next+0x1a0>
			trans_next = ept->trans_size - ept->trans_count;
    275e:	0019      	movs	r1, r3
    2760:	e7ec      	b.n	273c <_usb_d_dev_out_next+0x1a0>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2762:	016b      	lsls	r3, r5, #5
    2764:	4a0b      	ldr	r2, [pc, #44]	; (2794 <_usb_d_dev_out_next+0x1f8>)
    2766:	4694      	mov	ip, r2
    2768:	4463      	add	r3, ip
    276a:	222d      	movs	r2, #45	; 0x2d
    276c:	701a      	strb	r2, [r3, #0]
    276e:	e797      	b.n	26a0 <_usb_d_dev_out_next+0x104>
	bank->STATUS_BK.reg     = 0;
    2770:	016a      	lsls	r2, r5, #5
    2772:	4b03      	ldr	r3, [pc, #12]	; (2780 <_usb_d_dev_out_next+0x1e4>)
    2774:	189b      	adds	r3, r3, r2
    2776:	2200      	movs	r2, #0
    2778:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    277a:	322d      	adds	r2, #45	; 0x2d
    277c:	e7c3      	b.n	2706 <_usb_d_dev_out_next+0x16a>
    277e:	46c0      	nop			; (mov r8, r8)
    2780:	200001b0 	.word	0x200001b0
    2784:	000003ff 	.word	0x000003ff
    2788:	41005000 	.word	0x41005000
    278c:	000040bd 	.word	0x000040bd
    2790:	f0003fff 	.word	0xf0003fff
    2794:	41005108 	.word	0x41005108
    2798:	00002201 	.word	0x00002201
    279c:	41005109 	.word	0x41005109

000027a0 <_usb_d_dev_handler>:
{
    27a0:	b570      	push	{r4, r5, r6, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    27a2:	4b89      	ldr	r3, [pc, #548]	; (29c8 <_usb_d_dev_handler+0x228>)
    27a4:	8c1d      	ldrh	r5, [r3, #32]
    27a6:	b2ad      	uxth	r5, r5
	if (0 == epint) {
    27a8:	2d00      	cmp	r5, #0
    27aa:	d001      	beq.n	27b0 <_usb_d_dev_handler+0x10>
	bool     rc    = true;
    27ac:	2400      	movs	r4, #0
    27ae:	e0bf      	b.n	2930 <_usb_d_dev_handler+0x190>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    27b0:	8b99      	ldrh	r1, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    27b2:	8b1b      	ldrh	r3, [r3, #24]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    27b4:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    27b6:	075a      	lsls	r2, r3, #29
    27b8:	d40d      	bmi.n	27d6 <_usb_d_dev_handler+0x36>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    27ba:	059a      	lsls	r2, r3, #22
    27bc:	d415      	bmi.n	27ea <_usb_d_dev_handler+0x4a>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    27be:	061a      	lsls	r2, r3, #24
    27c0:	d437      	bmi.n	2832 <_usb_d_dev_handler+0x92>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    27c2:	2270      	movs	r2, #112	; 0x70
    27c4:	421a      	tst	r2, r3
    27c6:	d13e      	bne.n	2846 <_usb_d_dev_handler+0xa6>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    27c8:	071a      	lsls	r2, r3, #28
    27ca:	d457      	bmi.n	287c <_usb_d_dev_handler+0xdc>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    27cc:	07db      	lsls	r3, r3, #31
    27ce:	d500      	bpl.n	27d2 <_usb_d_dev_handler+0x32>
    27d0:	e068      	b.n	28a4 <_usb_d_dev_handler+0x104>
		rc = false;
    27d2:	2300      	movs	r3, #0
    27d4:	e006      	b.n	27e4 <_usb_d_dev_handler+0x44>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    27d6:	2204      	movs	r2, #4
    27d8:	4b7b      	ldr	r3, [pc, #492]	; (29c8 <_usb_d_dev_handler+0x228>)
    27da:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    27dc:	4b7b      	ldr	r3, [pc, #492]	; (29cc <_usb_d_dev_handler+0x22c>)
    27de:	681b      	ldr	r3, [r3, #0]
    27e0:	4798      	blx	r3
		return true;
    27e2:	2301      	movs	r3, #1
		if (_usb_d_dev_handle_nep()) {
    27e4:	2b00      	cmp	r3, #0
    27e6:	d0e1      	beq.n	27ac <_usb_d_dev_handler+0xc>
}
    27e8:	bd70      	pop	{r4, r5, r6, pc}
    27ea:	4b77      	ldr	r3, [pc, #476]	; (29c8 <_usb_d_dev_handler+0x228>)
    27ec:	4a78      	ldr	r2, [pc, #480]	; (29d0 <_usb_d_dev_handler+0x230>)
    27ee:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    27f0:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    27f2:	3a92      	subs	r2, #146	; 0x92
    27f4:	3aff      	subs	r2, #255	; 0xff
    27f6:	831a      	strh	r2, [r3, #24]
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    27f8:	2300      	movs	r3, #0
    27fa:	2b06      	cmp	r3, #6
    27fc:	d812      	bhi.n	2824 <_usb_d_dev_handler+0x84>
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    27fe:	0158      	lsls	r0, r3, #5
    2800:	4a74      	ldr	r2, [pc, #464]	; (29d4 <_usb_d_dev_handler+0x234>)
    2802:	1812      	adds	r2, r2, r0
    2804:	8912      	ldrh	r2, [r2, #8]
    2806:	0712      	lsls	r2, r2, #28
    2808:	0f12      	lsrs	r2, r2, #28
    280a:	2a03      	cmp	r2, #3
    280c:	d002      	beq.n	2814 <_usb_d_dev_handler+0x74>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    280e:	3301      	adds	r3, #1
    2810:	b2db      	uxtb	r3, r3
    2812:	e7f2      	b.n	27fa <_usb_d_dev_handler+0x5a>
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    2814:	4b6f      	ldr	r3, [pc, #444]	; (29d4 <_usb_d_dev_handler+0x234>)
    2816:	181b      	adds	r3, r3, r0
    2818:	8919      	ldrh	r1, [r3, #8]
    281a:	0449      	lsls	r1, r1, #17
    281c:	0d49      	lsrs	r1, r1, #21
			bank->EXTREG.reg = 0;
    281e:	2200      	movs	r2, #0
    2820:	811a      	strh	r2, [r3, #8]
    2822:	e000      	b.n	2826 <_usb_d_dev_handler+0x86>
	uint32_t lpm_variable = 0;
    2824:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    2826:	4b69      	ldr	r3, [pc, #420]	; (29cc <_usb_d_dev_handler+0x22c>)
    2828:	685b      	ldr	r3, [r3, #4]
    282a:	2003      	movs	r0, #3
    282c:	4798      	blx	r3
	bool     rc    = true;
    282e:	2301      	movs	r3, #1
    2830:	e7d8      	b.n	27e4 <_usb_d_dev_handler+0x44>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    2832:	2280      	movs	r2, #128	; 0x80
    2834:	4b64      	ldr	r3, [pc, #400]	; (29c8 <_usb_d_dev_handler+0x228>)
    2836:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    2838:	4b64      	ldr	r3, [pc, #400]	; (29cc <_usb_d_dev_handler+0x22c>)
    283a:	685b      	ldr	r3, [r3, #4]
    283c:	2100      	movs	r1, #0
    283e:	2005      	movs	r0, #5
    2840:	4798      	blx	r3
	bool     rc    = true;
    2842:	2301      	movs	r3, #1
    2844:	e7ce      	b.n	27e4 <_usb_d_dev_handler+0x44>
    2846:	4b60      	ldr	r3, [pc, #384]	; (29c8 <_usb_d_dev_handler+0x228>)
    2848:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    284a:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    284c:	4a60      	ldr	r2, [pc, #384]	; (29d0 <_usb_d_dev_handler+0x230>)
    284e:	831a      	strh	r2, [r3, #24]
	if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    2850:	4b61      	ldr	r3, [pc, #388]	; (29d8 <_usb_d_dev_handler+0x238>)
    2852:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    2854:	069b      	lsls	r3, r3, #26
    2856:	d40c      	bmi.n	2872 <_usb_d_dev_handler+0xd2>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    2858:	4b5f      	ldr	r3, [pc, #380]	; (29d8 <_usb_d_dev_handler+0x238>)
    285a:	68da      	ldr	r2, [r3, #12]
	tmp &= mask;
    285c:	23d0      	movs	r3, #208	; 0xd0
    285e:	4013      	ands	r3, r2
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, DFLL_READY_FLAG) != DFLL_READY_FLAG)
    2860:	2bd0      	cmp	r3, #208	; 0xd0
    2862:	d1f9      	bne.n	2858 <_usb_d_dev_handler+0xb8>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    2864:	4b59      	ldr	r3, [pc, #356]	; (29cc <_usb_d_dev_handler+0x22c>)
    2866:	685b      	ldr	r3, [r3, #4]
    2868:	2100      	movs	r1, #0
    286a:	2002      	movs	r0, #2
    286c:	4798      	blx	r3
	bool     rc    = true;
    286e:	2301      	movs	r3, #1
    2870:	e7b8      	b.n	27e4 <_usb_d_dev_handler+0x44>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    2872:	4b59      	ldr	r3, [pc, #356]	; (29d8 <_usb_d_dev_handler+0x238>)
    2874:	68db      	ldr	r3, [r3, #12]
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY)
    2876:	06db      	lsls	r3, r3, #27
    2878:	d5fb      	bpl.n	2872 <_usb_d_dev_handler+0xd2>
    287a:	e7f3      	b.n	2864 <_usb_d_dev_handler+0xc4>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    287c:	4b52      	ldr	r3, [pc, #328]	; (29c8 <_usb_d_dev_handler+0x228>)
    287e:	2100      	movs	r1, #0
    2880:	2280      	movs	r2, #128	; 0x80
    2882:	0052      	lsls	r2, r2, #1
    2884:	5499      	strb	r1, [r3, r2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    2886:	3af8      	subs	r2, #248	; 0xf8
    2888:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    288a:	3268      	adds	r2, #104	; 0x68
    288c:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    288e:	4a50      	ldr	r2, [pc, #320]	; (29d0 <_usb_d_dev_handler+0x230>)
    2890:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    2892:	4b52      	ldr	r3, [pc, #328]	; (29dc <_usb_d_dev_handler+0x23c>)
    2894:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    2896:	4b4d      	ldr	r3, [pc, #308]	; (29cc <_usb_d_dev_handler+0x22c>)
    2898:	685b      	ldr	r3, [r3, #4]
    289a:	2100      	movs	r1, #0
    289c:	2001      	movs	r0, #1
    289e:	4798      	blx	r3
	bool     rc    = true;
    28a0:	2301      	movs	r3, #1
    28a2:	e79f      	b.n	27e4 <_usb_d_dev_handler+0x44>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    28a4:	4b48      	ldr	r3, [pc, #288]	; (29c8 <_usb_d_dev_handler+0x228>)
    28a6:	4a4a      	ldr	r2, [pc, #296]	; (29d0 <_usb_d_dev_handler+0x230>)
    28a8:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    28aa:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    28ac:	3a92      	subs	r2, #146	; 0x92
    28ae:	3aff      	subs	r2, #255	; 0xff
    28b0:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    28b2:	4b46      	ldr	r3, [pc, #280]	; (29cc <_usb_d_dev_handler+0x22c>)
    28b4:	685b      	ldr	r3, [r3, #4]
    28b6:	2100      	movs	r1, #0
    28b8:	2004      	movs	r0, #4
    28ba:	4798      	blx	r3
	bool     rc    = true;
    28bc:	2301      	movs	r3, #1
    28be:	e791      	b.n	27e4 <_usb_d_dev_handler+0x44>
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    28c0:	06da      	lsls	r2, r3, #27
    28c2:	d407      	bmi.n	28d4 <_usb_d_dev_handler+0x134>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    28c4:	065a      	lsls	r2, r3, #25
    28c6:	d408      	bmi.n	28da <_usb_d_dev_handler+0x13a>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    28c8:	069b      	lsls	r3, r3, #26
    28ca:	d52f      	bpl.n	292c <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_stall(ept, 0);
    28cc:	2100      	movs	r1, #0
    28ce:	4b44      	ldr	r3, [pc, #272]	; (29e0 <_usb_d_dev_handler+0x240>)
    28d0:	4798      	blx	r3
    28d2:	e02b      	b.n	292c <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_setup(ept);
    28d4:	4b43      	ldr	r3, [pc, #268]	; (29e4 <_usb_d_dev_handler+0x244>)
    28d6:	4798      	blx	r3
    28d8:	e028      	b.n	292c <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_stall(ept, 1);
    28da:	2101      	movs	r1, #1
    28dc:	4b40      	ldr	r3, [pc, #256]	; (29e0 <_usb_d_dev_handler+0x240>)
    28de:	4798      	blx	r3
    28e0:	e024      	b.n	292c <_usb_d_dev_handler+0x18c>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    28e2:	065a      	lsls	r2, r3, #25
    28e4:	d40f      	bmi.n	2906 <_usb_d_dev_handler+0x166>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    28e6:	071a      	lsls	r2, r3, #28
    28e8:	d411      	bmi.n	290e <_usb_d_dev_handler+0x16e>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    28ea:	079a      	lsls	r2, r3, #30
    28ec:	d413      	bmi.n	2916 <_usb_d_dev_handler+0x176>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    28ee:	7cc1      	ldrb	r1, [r0, #19]
    28f0:	2207      	movs	r2, #7
    28f2:	400a      	ands	r2, r1
    28f4:	2a01      	cmp	r2, #1
    28f6:	d119      	bne.n	292c <_usb_d_dev_handler+0x18c>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    28f8:	075a      	lsls	r2, r3, #29
    28fa:	d410      	bmi.n	291e <_usb_d_dev_handler+0x17e>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    28fc:	06db      	lsls	r3, r3, #27
    28fe:	d515      	bpl.n	292c <_usb_d_dev_handler+0x18c>
			_usb_d_dev_handle_setup(ept);
    2900:	4b38      	ldr	r3, [pc, #224]	; (29e4 <_usb_d_dev_handler+0x244>)
    2902:	4798      	blx	r3
    2904:	e012      	b.n	292c <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_stall(ept, 1);
    2906:	2101      	movs	r1, #1
    2908:	4b35      	ldr	r3, [pc, #212]	; (29e0 <_usb_d_dev_handler+0x240>)
    290a:	4798      	blx	r3
    290c:	e00e      	b.n	292c <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_trfail(ept, 1);
    290e:	2101      	movs	r1, #1
    2910:	4b35      	ldr	r3, [pc, #212]	; (29e8 <_usb_d_dev_handler+0x248>)
    2912:	4798      	blx	r3
    2914:	e00a      	b.n	292c <_usb_d_dev_handler+0x18c>
		_usb_d_dev_in_next(ept, true);
    2916:	2101      	movs	r1, #1
    2918:	4b34      	ldr	r3, [pc, #208]	; (29ec <_usb_d_dev_handler+0x24c>)
    291a:	4798      	blx	r3
    291c:	e006      	b.n	292c <_usb_d_dev_handler+0x18c>
			_usb_d_dev_handle_trfail(ept, 0);
    291e:	2100      	movs	r1, #0
    2920:	4b31      	ldr	r3, [pc, #196]	; (29e8 <_usb_d_dev_handler+0x248>)
    2922:	4798      	blx	r3
    2924:	e002      	b.n	292c <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_stall(ept, 0);
    2926:	2100      	movs	r1, #0
    2928:	4b2d      	ldr	r3, [pc, #180]	; (29e0 <_usb_d_dev_handler+0x240>)
    292a:	4798      	blx	r3
	for (i = 0; i < USB_D_N_EP; i++) {
    292c:	3401      	adds	r4, #1
    292e:	b2e4      	uxtb	r4, r4
    2930:	2c10      	cmp	r4, #16
    2932:	d900      	bls.n	2936 <_usb_d_dev_handler+0x196>
    2934:	e758      	b.n	27e8 <_usb_d_dev_handler+0x48>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    2936:	4b25      	ldr	r3, [pc, #148]	; (29cc <_usb_d_dev_handler+0x22c>)
    2938:	00a2      	lsls	r2, r4, #2
    293a:	1911      	adds	r1, r2, r4
    293c:	0088      	lsls	r0, r1, #2
    293e:	0001      	movs	r1, r0
    2940:	3010      	adds	r0, #16
    2942:	1818      	adds	r0, r3, r0
    2944:	3004      	adds	r0, #4
		if (ept->ep == 0xFF) {
    2946:	185b      	adds	r3, r3, r1
    2948:	3326      	adds	r3, #38	; 0x26
    294a:	781b      	ldrb	r3, [r3, #0]
    294c:	2bff      	cmp	r3, #255	; 0xff
    294e:	d0ed      	beq.n	292c <_usb_d_dev_handler+0x18c>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2950:	7c82      	ldrb	r2, [r0, #18]
    2952:	230f      	movs	r3, #15
    2954:	4013      	ands	r3, r2
	if (!(epint & (1u << epn))) {
    2956:	2201      	movs	r2, #1
    2958:	409a      	lsls	r2, r3
    295a:	422a      	tst	r2, r5
    295c:	d0e6      	beq.n	292c <_usb_d_dev_handler+0x18c>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    295e:	001a      	movs	r2, r3
    2960:	3208      	adds	r2, #8
    2962:	0152      	lsls	r2, r2, #5
    2964:	4918      	ldr	r1, [pc, #96]	; (29c8 <_usb_d_dev_handler+0x228>)
    2966:	468c      	mov	ip, r1
    2968:	4462      	add	r2, ip
    296a:	79d2      	ldrb	r2, [r2, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    296c:	015b      	lsls	r3, r3, #5
    296e:	4920      	ldr	r1, [pc, #128]	; (29f0 <_usb_d_dev_handler+0x250>)
    2970:	468c      	mov	ip, r1
    2972:	4463      	add	r3, ip
    2974:	781b      	ldrb	r3, [r3, #0]
	flags &= mask;
    2976:	4013      	ands	r3, r2
	if (flags) {
    2978:	d0d8      	beq.n	292c <_usb_d_dev_handler+0x18c>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    297a:	7cc2      	ldrb	r2, [r0, #19]
    297c:	2147      	movs	r1, #71	; 0x47
    297e:	4011      	ands	r1, r2
    2980:	2901      	cmp	r1, #1
    2982:	d09d      	beq.n	28c0 <_usb_d_dev_handler+0x120>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    2984:	b252      	sxtb	r2, r2
    2986:	2a00      	cmp	r2, #0
    2988:	dbab      	blt.n	28e2 <_usb_d_dev_handler+0x142>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    298a:	069a      	lsls	r2, r3, #26
    298c:	d4cb      	bmi.n	2926 <_usb_d_dev_handler+0x186>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    298e:	075a      	lsls	r2, r3, #29
    2990:	d40d      	bmi.n	29ae <_usb_d_dev_handler+0x20e>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    2992:	07da      	lsls	r2, r3, #31
    2994:	d40f      	bmi.n	29b6 <_usb_d_dev_handler+0x216>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    2996:	7cc1      	ldrb	r1, [r0, #19]
    2998:	2207      	movs	r2, #7
    299a:	400a      	ands	r2, r1
    299c:	2a01      	cmp	r2, #1
    299e:	d1c5      	bne.n	292c <_usb_d_dev_handler+0x18c>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    29a0:	071a      	lsls	r2, r3, #28
    29a2:	d40c      	bmi.n	29be <_usb_d_dev_handler+0x21e>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    29a4:	06db      	lsls	r3, r3, #27
    29a6:	d5c1      	bpl.n	292c <_usb_d_dev_handler+0x18c>
			_usb_d_dev_handle_setup(ept);
    29a8:	4b0e      	ldr	r3, [pc, #56]	; (29e4 <_usb_d_dev_handler+0x244>)
    29aa:	4798      	blx	r3
    29ac:	e7be      	b.n	292c <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_trfail(ept, 0);
    29ae:	2100      	movs	r1, #0
    29b0:	4b0d      	ldr	r3, [pc, #52]	; (29e8 <_usb_d_dev_handler+0x248>)
    29b2:	4798      	blx	r3
    29b4:	e7ba      	b.n	292c <_usb_d_dev_handler+0x18c>
		_usb_d_dev_out_next(ept, true);
    29b6:	2101      	movs	r1, #1
    29b8:	4b0e      	ldr	r3, [pc, #56]	; (29f4 <_usb_d_dev_handler+0x254>)
    29ba:	4798      	blx	r3
    29bc:	e7b6      	b.n	292c <_usb_d_dev_handler+0x18c>
			_usb_d_dev_handle_trfail(ept, 1);
    29be:	2101      	movs	r1, #1
    29c0:	4b09      	ldr	r3, [pc, #36]	; (29e8 <_usb_d_dev_handler+0x248>)
    29c2:	4798      	blx	r3
    29c4:	e7b2      	b.n	292c <_usb_d_dev_handler+0x18c>
    29c6:	46c0      	nop			; (mov r8, r8)
    29c8:	41005000 	.word	0x41005000
    29cc:	200002b0 	.word	0x200002b0
    29d0:	00000201 	.word	0x00000201
    29d4:	200001b0 	.word	0x200001b0
    29d8:	40000800 	.word	0x40000800
    29dc:	000023b5 	.word	0x000023b5
    29e0:	000021d1 	.word	0x000021d1
    29e4:	00002141 	.word	0x00002141
    29e8:	000022a5 	.word	0x000022a5
    29ec:	0000240d 	.word	0x0000240d
    29f0:	41005109 	.word	0x41005109
    29f4:	0000259d 	.word	0x0000259d

000029f8 <_usb_d_dev_init>:
{
    29f8:	b500      	push	{lr}
    29fa:	b083      	sub	sp, #12
	const uint8_t spdconf[4] = {
    29fc:	2200      	movs	r2, #0
    29fe:	ab01      	add	r3, sp, #4
    2a00:	705a      	strb	r2, [r3, #1]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    2a02:	4b21      	ldr	r3, [pc, #132]	; (2a88 <_usb_d_dev_init+0x90>)
    2a04:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    2a06:	07db      	lsls	r3, r3, #31
    2a08:	d41b      	bmi.n	2a42 <_usb_d_dev_init+0x4a>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2a0a:	4b1f      	ldr	r3, [pc, #124]	; (2a88 <_usb_d_dev_init+0x90>)
    2a0c:	789b      	ldrb	r3, [r3, #2]
    2a0e:	079b      	lsls	r3, r3, #30
    2a10:	d1fb      	bne.n	2a0a <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    2a12:	4b1d      	ldr	r3, [pc, #116]	; (2a88 <_usb_d_dev_init+0x90>)
    2a14:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    2a16:	079b      	lsls	r3, r3, #30
    2a18:	d50c      	bpl.n	2a34 <_usb_d_dev_init+0x3c>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    2a1a:	4a1b      	ldr	r2, [pc, #108]	; (2a88 <_usb_d_dev_init+0x90>)
    2a1c:	7813      	ldrb	r3, [r2, #0]
    2a1e:	2102      	movs	r1, #2
    2a20:	438b      	bics	r3, r1
    2a22:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2a24:	4b18      	ldr	r3, [pc, #96]	; (2a88 <_usb_d_dev_init+0x90>)
    2a26:	789b      	ldrb	r3, [r3, #2]
    2a28:	079b      	lsls	r3, r3, #30
    2a2a:	d1fb      	bne.n	2a24 <_usb_d_dev_init+0x2c>
    2a2c:	4b16      	ldr	r3, [pc, #88]	; (2a88 <_usb_d_dev_init+0x90>)
    2a2e:	789b      	ldrb	r3, [r3, #2]
    2a30:	079b      	lsls	r3, r3, #30
    2a32:	d4fb      	bmi.n	2a2c <_usb_d_dev_init+0x34>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    2a34:	2201      	movs	r2, #1
    2a36:	4b14      	ldr	r3, [pc, #80]	; (2a88 <_usb_d_dev_init+0x90>)
    2a38:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2a3a:	4b13      	ldr	r3, [pc, #76]	; (2a88 <_usb_d_dev_init+0x90>)
    2a3c:	789b      	ldrb	r3, [r3, #2]
    2a3e:	079b      	lsls	r3, r3, #30
    2a40:	d1fb      	bne.n	2a3a <_usb_d_dev_init+0x42>
    2a42:	4b11      	ldr	r3, [pc, #68]	; (2a88 <_usb_d_dev_init+0x90>)
    2a44:	789b      	ldrb	r3, [r3, #2]
    2a46:	07db      	lsls	r3, r3, #31
    2a48:	d4fb      	bmi.n	2a42 <_usb_d_dev_init+0x4a>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    2a4a:	4b10      	ldr	r3, [pc, #64]	; (2a8c <_usb_d_dev_init+0x94>)
    2a4c:	4a10      	ldr	r2, [pc, #64]	; (2a90 <_usb_d_dev_init+0x98>)
    2a4e:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    2a50:	605a      	str	r2, [r3, #4]
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    2a52:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    2a54:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    2a56:	611a      	str	r2, [r3, #16]
	_usb_d_dev_reset_epts();
    2a58:	4b0e      	ldr	r3, [pc, #56]	; (2a94 <_usb_d_dev_init+0x9c>)
    2a5a:	4798      	blx	r3
	_usb_load_calib();
    2a5c:	4b0e      	ldr	r3, [pc, #56]	; (2a98 <_usb_d_dev_init+0xa0>)
    2a5e:	4798      	blx	r3
	((Usb *)hw)->HOST.CTRLA.reg = data;
    2a60:	2204      	movs	r2, #4
    2a62:	4b09      	ldr	r3, [pc, #36]	; (2a88 <_usb_d_dev_init+0x90>)
    2a64:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2a66:	4b08      	ldr	r3, [pc, #32]	; (2a88 <_usb_d_dev_init+0x90>)
    2a68:	789b      	ldrb	r3, [r3, #2]
    2a6a:	079b      	lsls	r3, r3, #30
    2a6c:	d1fb      	bne.n	2a66 <_usb_d_dev_init+0x6e>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    2a6e:	4a06      	ldr	r2, [pc, #24]	; (2a88 <_usb_d_dev_init+0x90>)
    2a70:	4b0a      	ldr	r3, [pc, #40]	; (2a9c <_usb_d_dev_init+0xa4>)
    2a72:	6253      	str	r3, [r2, #36]	; 0x24
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    2a74:	ab01      	add	r3, sp, #4
    2a76:	785b      	ldrb	r3, [r3, #1]
    2a78:	2101      	movs	r1, #1
    2a7a:	430b      	orrs	r3, r1
    2a7c:	b2db      	uxtb	r3, r3
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    2a7e:	8113      	strh	r3, [r2, #8]
}
    2a80:	2000      	movs	r0, #0
    2a82:	b003      	add	sp, #12
    2a84:	bd00      	pop	{pc}
    2a86:	46c0      	nop			; (mov r8, r8)
    2a88:	41005000 	.word	0x41005000
    2a8c:	200002b0 	.word	0x200002b0
    2a90:	000020e9 	.word	0x000020e9
    2a94:	000023b5 	.word	0x000023b5
    2a98:	000020ed 	.word	0x000020ed
    2a9c:	200001b0 	.word	0x200001b0

00002aa0 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    2aa0:	4b10      	ldr	r3, [pc, #64]	; (2ae4 <_usb_d_dev_enable+0x44>)
    2aa2:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    2aa4:	079b      	lsls	r3, r3, #30
    2aa6:	d119      	bne.n	2adc <_usb_d_dev_enable+0x3c>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2aa8:	4b0e      	ldr	r3, [pc, #56]	; (2ae4 <_usb_d_dev_enable+0x44>)
    2aaa:	789b      	ldrb	r3, [r3, #2]
    2aac:	079b      	lsls	r3, r3, #30
    2aae:	d1fb      	bne.n	2aa8 <_usb_d_dev_enable+0x8>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    2ab0:	4b0c      	ldr	r3, [pc, #48]	; (2ae4 <_usb_d_dev_enable+0x44>)
    2ab2:	781b      	ldrb	r3, [r3, #0]
    2ab4:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    2ab6:	079a      	lsls	r2, r3, #30
    2ab8:	d408      	bmi.n	2acc <_usb_d_dev_enable+0x2c>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    2aba:	2202      	movs	r2, #2
    2abc:	4313      	orrs	r3, r2
    2abe:	b2db      	uxtb	r3, r3
	((Usb *)hw)->HOST.CTRLA.reg = data;
    2ac0:	4a08      	ldr	r2, [pc, #32]	; (2ae4 <_usb_d_dev_enable+0x44>)
    2ac2:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2ac4:	4b07      	ldr	r3, [pc, #28]	; (2ae4 <_usb_d_dev_enable+0x44>)
    2ac6:	789b      	ldrb	r3, [r3, #2]
    2ac8:	079b      	lsls	r3, r3, #30
    2aca:	d1fb      	bne.n	2ac4 <_usb_d_dev_enable+0x24>
    2acc:	2280      	movs	r2, #128	; 0x80
    2ace:	4b06      	ldr	r3, [pc, #24]	; (2ae8 <_usb_d_dev_enable+0x48>)
    2ad0:	601a      	str	r2, [r3, #0]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2ad2:	4a06      	ldr	r2, [pc, #24]	; (2aec <_usb_d_dev_enable+0x4c>)
    2ad4:	4b03      	ldr	r3, [pc, #12]	; (2ae4 <_usb_d_dev_enable+0x44>)
    2ad6:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    2ad8:	2000      	movs	r0, #0
}
    2ada:	4770      	bx	lr
		return -USB_ERR_DENIED;
    2adc:	2011      	movs	r0, #17
    2ade:	4240      	negs	r0, r0
    2ae0:	e7fb      	b.n	2ada <_usb_d_dev_enable+0x3a>
    2ae2:	46c0      	nop			; (mov r8, r8)
    2ae4:	41005000 	.word	0x41005000
    2ae8:	e000e100 	.word	0xe000e100
    2aec:	0000028d 	.word	0x0000028d

00002af0 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    2af0:	4a02      	ldr	r2, [pc, #8]	; (2afc <_usb_d_dev_attach+0xc>)
    2af2:	8913      	ldrh	r3, [r2, #8]
    2af4:	2101      	movs	r1, #1
    2af6:	438b      	bics	r3, r1
    2af8:	8113      	strh	r3, [r2, #8]
}
    2afa:	4770      	bx	lr
    2afc:	41005000 	.word	0x41005000

00002b00 <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    2b00:	2380      	movs	r3, #128	; 0x80
    2b02:	425b      	negs	r3, r3
    2b04:	4318      	orrs	r0, r3
    2b06:	b2c0      	uxtb	r0, r0
	((Usb *)hw)->DEVICE.DADD.reg = data;
    2b08:	4b01      	ldr	r3, [pc, #4]	; (2b10 <_usb_d_dev_set_address+0x10>)
    2b0a:	7298      	strb	r0, [r3, #10]
}
    2b0c:	4770      	bx	lr
    2b0e:	46c0      	nop			; (mov r8, r8)
    2b10:	41005000 	.word	0x41005000

00002b14 <_usb_d_dev_ep_init>:
{
    2b14:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b16:	46c6      	mov	lr, r8
    2b18:	b500      	push	{lr}
    2b1a:	4690      	mov	r8, r2
	uint8_t               epn = USB_EP_GET_N(ep);
    2b1c:	230f      	movs	r3, #15
    2b1e:	4003      	ands	r3, r0
    2b20:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2b22:	2b00      	cmp	r3, #0
    2b24:	d005      	beq.n	2b32 <_usb_d_dev_ep_init+0x1e>
    2b26:	2f00      	cmp	r7, #0
    2b28:	db01      	blt.n	2b2e <_usb_d_dev_ep_init+0x1a>
    2b2a:	001d      	movs	r5, r3
    2b2c:	e002      	b.n	2b34 <_usb_d_dev_ep_init+0x20>
    2b2e:	1ddd      	adds	r5, r3, #7
    2b30:	e000      	b.n	2b34 <_usb_d_dev_ep_init+0x20>
    2b32:	001d      	movs	r5, r3
	return &dev_inst.ep[ep_index];
    2b34:	002e      	movs	r6, r5
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    2b36:	2403      	movs	r4, #3
    2b38:	4021      	ands	r1, r4
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    2b3a:	001c      	movs	r4, r3
	if (epn > CONF_USB_D_MAX_EP_N) {
    2b3c:	2b07      	cmp	r3, #7
    2b3e:	d900      	bls.n	2b42 <_usb_d_dev_ep_init+0x2e>
    2b40:	e070      	b.n	2c24 <_usb_d_dev_ep_init+0x110>
	if (ept->ep != 0xFF) {
    2b42:	00aa      	lsls	r2, r5, #2
    2b44:	4694      	mov	ip, r2
    2b46:	4465      	add	r5, ip
    2b48:	00aa      	lsls	r2, r5, #2
    2b4a:	4694      	mov	ip, r2
    2b4c:	4d3d      	ldr	r5, [pc, #244]	; (2c44 <_usb_d_dev_ep_init+0x130>)
    2b4e:	4465      	add	r5, ip
    2b50:	3526      	adds	r5, #38	; 0x26
    2b52:	782d      	ldrb	r5, [r5, #0]
    2b54:	2dff      	cmp	r5, #255	; 0xff
    2b56:	d168      	bne.n	2c2a <_usb_d_dev_ep_init+0x116>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    2b58:	2900      	cmp	r1, #0
    2b5a:	d116      	bne.n	2b8a <_usb_d_dev_ep_init+0x76>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2b5c:	2b00      	cmp	r3, #0
    2b5e:	d003      	beq.n	2b68 <_usb_d_dev_ep_init+0x54>
    2b60:	2f00      	cmp	r7, #0
    2b62:	db01      	blt.n	2b68 <_usb_d_dev_ep_init+0x54>
    2b64:	3307      	adds	r3, #7
    2b66:	b2db      	uxtb	r3, r3
		if (ept_in->ep != 0xFF) {
    2b68:	009d      	lsls	r5, r3, #2
    2b6a:	18eb      	adds	r3, r5, r3
    2b6c:	009d      	lsls	r5, r3, #2
    2b6e:	4b35      	ldr	r3, [pc, #212]	; (2c44 <_usb_d_dev_ep_init+0x130>)
    2b70:	195b      	adds	r3, r3, r5
    2b72:	3326      	adds	r3, #38	; 0x26
    2b74:	781b      	ldrb	r3, [r3, #0]
    2b76:	2bff      	cmp	r3, #255	; 0xff
    2b78:	d15a      	bne.n	2c30 <_usb_d_dev_ep_init+0x11c>
		if (pcfg->cache == NULL) {
    2b7a:	0063      	lsls	r3, r4, #1
    2b7c:	191b      	adds	r3, r3, r4
    2b7e:	009d      	lsls	r5, r3, #2
    2b80:	4b31      	ldr	r3, [pc, #196]	; (2c48 <_usb_d_dev_ep_init+0x134>)
    2b82:	195b      	adds	r3, r3, r5
    2b84:	689b      	ldr	r3, [r3, #8]
    2b86:	2b00      	cmp	r3, #0
    2b88:	d055      	beq.n	2c36 <_usb_d_dev_ep_init+0x122>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    2b8a:	2f00      	cmp	r7, #0
    2b8c:	db31      	blt.n	2bf2 <_usb_d_dev_ep_init+0xde>
    2b8e:	0063      	lsls	r3, r4, #1
    2b90:	191b      	adds	r3, r3, r4
    2b92:	009d      	lsls	r5, r3, #2
    2b94:	4b2c      	ldr	r3, [pc, #176]	; (2c48 <_usb_d_dev_ep_init+0x134>)
    2b96:	195b      	adds	r3, r3, r5
    2b98:	689b      	ldr	r3, [r3, #8]
    2b9a:	1e5d      	subs	r5, r3, #1
    2b9c:	41ab      	sbcs	r3, r5
    2b9e:	b2db      	uxtb	r3, r3
    2ba0:	2b00      	cmp	r3, #0
    2ba2:	d009      	beq.n	2bb8 <_usb_d_dev_ep_init+0xa4>
    2ba4:	2f00      	cmp	r7, #0
    2ba6:	db2e      	blt.n	2c06 <_usb_d_dev_ep_init+0xf2>
    2ba8:	0063      	lsls	r3, r4, #1
    2baa:	191b      	adds	r3, r3, r4
    2bac:	009d      	lsls	r5, r3, #2
    2bae:	4b26      	ldr	r3, [pc, #152]	; (2c48 <_usb_d_dev_ep_init+0x134>)
    2bb0:	195b      	adds	r3, r3, r5
    2bb2:	8a1b      	ldrh	r3, [r3, #16]
    2bb4:	4543      	cmp	r3, r8
    2bb6:	db41      	blt.n	2c3c <_usb_d_dev_ep_init+0x128>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    2bb8:	2f00      	cmp	r7, #0
    2bba:	db2b      	blt.n	2c14 <_usb_d_dev_ep_init+0x100>
    2bbc:	0063      	lsls	r3, r4, #1
    2bbe:	191c      	adds	r4, r3, r4
    2bc0:	00a5      	lsls	r5, r4, #2
    2bc2:	4b21      	ldr	r3, [pc, #132]	; (2c48 <_usb_d_dev_ep_init+0x134>)
    2bc4:	195b      	adds	r3, r3, r5
    2bc6:	689b      	ldr	r3, [r3, #8]
    2bc8:	469c      	mov	ip, r3
    2bca:	4c1e      	ldr	r4, [pc, #120]	; (2c44 <_usb_d_dev_ep_init+0x130>)
    2bcc:	00b5      	lsls	r5, r6, #2
    2bce:	19af      	adds	r7, r5, r6
    2bd0:	00bb      	lsls	r3, r7, #2
    2bd2:	001f      	movs	r7, r3
    2bd4:	18e3      	adds	r3, r4, r3
    2bd6:	4662      	mov	r2, ip
    2bd8:	621a      	str	r2, [r3, #32]
	ept->size     = max_pkt_siz;
    2bda:	4642      	mov	r2, r8
    2bdc:	849a      	strh	r2, [r3, #36]	; 0x24
	ept->flags.u8 = (ep_type + 1);
    2bde:	3101      	adds	r1, #1
    2be0:	3327      	adds	r3, #39	; 0x27
    2be2:	7019      	strb	r1, [r3, #0]
	ept->ep       = ep;
    2be4:	19e4      	adds	r4, r4, r7
    2be6:	3426      	adds	r4, #38	; 0x26
    2be8:	7020      	strb	r0, [r4, #0]
	return USB_OK;
    2bea:	2000      	movs	r0, #0
}
    2bec:	bc04      	pop	{r2}
    2bee:	4690      	mov	r8, r2
    2bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    2bf2:	0063      	lsls	r3, r4, #1
    2bf4:	191b      	adds	r3, r3, r4
    2bf6:	009d      	lsls	r5, r3, #2
    2bf8:	4b13      	ldr	r3, [pc, #76]	; (2c48 <_usb_d_dev_ep_init+0x134>)
    2bfa:	195b      	adds	r3, r3, r5
    2bfc:	68db      	ldr	r3, [r3, #12]
    2bfe:	1e5d      	subs	r5, r3, #1
    2c00:	41ab      	sbcs	r3, r5
    2c02:	b2db      	uxtb	r3, r3
    2c04:	e7cc      	b.n	2ba0 <_usb_d_dev_ep_init+0x8c>
    2c06:	0063      	lsls	r3, r4, #1
    2c08:	191b      	adds	r3, r3, r4
    2c0a:	009d      	lsls	r5, r3, #2
    2c0c:	4b0e      	ldr	r3, [pc, #56]	; (2c48 <_usb_d_dev_ep_init+0x134>)
    2c0e:	195b      	adds	r3, r3, r5
    2c10:	8a5b      	ldrh	r3, [r3, #18]
    2c12:	e7cf      	b.n	2bb4 <_usb_d_dev_ep_init+0xa0>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    2c14:	0063      	lsls	r3, r4, #1
    2c16:	191c      	adds	r4, r3, r4
    2c18:	00a5      	lsls	r5, r4, #2
    2c1a:	4b0b      	ldr	r3, [pc, #44]	; (2c48 <_usb_d_dev_ep_init+0x134>)
    2c1c:	195b      	adds	r3, r3, r5
    2c1e:	68db      	ldr	r3, [r3, #12]
    2c20:	469c      	mov	ip, r3
    2c22:	e7d2      	b.n	2bca <_usb_d_dev_ep_init+0xb6>
		return -USB_ERR_PARAM;
    2c24:	2012      	movs	r0, #18
    2c26:	4240      	negs	r0, r0
    2c28:	e7e0      	b.n	2bec <_usb_d_dev_ep_init+0xd8>
		return -USB_ERR_REDO;
    2c2a:	2014      	movs	r0, #20
    2c2c:	4240      	negs	r0, r0
    2c2e:	e7dd      	b.n	2bec <_usb_d_dev_ep_init+0xd8>
			return -USB_ERR_REDO;
    2c30:	2014      	movs	r0, #20
    2c32:	4240      	negs	r0, r0
    2c34:	e7da      	b.n	2bec <_usb_d_dev_ep_init+0xd8>
			return -USB_ERR_FUNC;
    2c36:	2013      	movs	r0, #19
    2c38:	4240      	negs	r0, r0
    2c3a:	e7d7      	b.n	2bec <_usb_d_dev_ep_init+0xd8>
		return -USB_ERR_FUNC;
    2c3c:	2013      	movs	r0, #19
    2c3e:	4240      	negs	r0, r0
    2c40:	e7d4      	b.n	2bec <_usb_d_dev_ep_init+0xd8>
    2c42:	46c0      	nop			; (mov r8, r8)
    2c44:	200002b0 	.word	0x200002b0
    2c48:	00004294 	.word	0x00004294

00002c4c <_usb_d_dev_ep_deinit>:
{
    2c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2c4e:	0005      	movs	r5, r0
	uint8_t               epn = USB_EP_GET_N(ep);
    2c50:	240f      	movs	r4, #15
    2c52:	4004      	ands	r4, r0
    2c54:	b247      	sxtb	r7, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    2c56:	0ff9      	lsrs	r1, r7, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2c58:	2c00      	cmp	r4, #0
    2c5a:	d005      	beq.n	2c68 <_usb_d_dev_ep_deinit+0x1c>
    2c5c:	2f00      	cmp	r7, #0
    2c5e:	db01      	blt.n	2c64 <_usb_d_dev_ep_deinit+0x18>
    2c60:	0022      	movs	r2, r4
    2c62:	e002      	b.n	2c6a <_usb_d_dev_ep_deinit+0x1e>
    2c64:	1de2      	adds	r2, r4, #7
    2c66:	e000      	b.n	2c6a <_usb_d_dev_ep_deinit+0x1e>
    2c68:	0022      	movs	r2, r4
	return &dev_inst.ep[ep_index];
    2c6a:	0016      	movs	r6, r2
    2c6c:	0093      	lsls	r3, r2, #2
    2c6e:	189b      	adds	r3, r3, r2
    2c70:	0098      	lsls	r0, r3, #2
    2c72:	3010      	adds	r0, #16
    2c74:	4b21      	ldr	r3, [pc, #132]	; (2cfc <_usb_d_dev_ep_deinit+0xb0>)
    2c76:	1818      	adds	r0, r3, r0
    2c78:	3004      	adds	r0, #4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    2c7a:	2c07      	cmp	r4, #7
    2c7c:	d82e      	bhi.n	2cdc <_usb_d_dev_ep_deinit+0x90>
    2c7e:	0093      	lsls	r3, r2, #2
    2c80:	189a      	adds	r2, r3, r2
    2c82:	0093      	lsls	r3, r2, #2
    2c84:	469c      	mov	ip, r3
    2c86:	4b1d      	ldr	r3, [pc, #116]	; (2cfc <_usb_d_dev_ep_deinit+0xb0>)
    2c88:	4463      	add	r3, ip
    2c8a:	3326      	adds	r3, #38	; 0x26
    2c8c:	781b      	ldrb	r3, [r3, #0]
    2c8e:	2bff      	cmp	r3, #255	; 0xff
    2c90:	d024      	beq.n	2cdc <_usb_d_dev_ep_deinit+0x90>
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    2c92:	2203      	movs	r2, #3
    2c94:	4b1a      	ldr	r3, [pc, #104]	; (2d00 <_usb_d_dev_ep_deinit+0xb4>)
    2c96:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    2c98:	00b2      	lsls	r2, r6, #2
    2c9a:	1992      	adds	r2, r2, r6
    2c9c:	0091      	lsls	r1, r2, #2
    2c9e:	4b17      	ldr	r3, [pc, #92]	; (2cfc <_usb_d_dev_ep_deinit+0xb0>)
    2ca0:	185b      	adds	r3, r3, r1
    2ca2:	3320      	adds	r3, #32
    2ca4:	79da      	ldrb	r2, [r3, #7]
    2ca6:	2307      	movs	r3, #7
    2ca8:	4013      	ands	r3, r2
    2caa:	2b01      	cmp	r3, #1
    2cac:	d017      	beq.n	2cde <_usb_d_dev_ep_deinit+0x92>
	} else if (USB_EP_GET_DIR(ep)) {
    2cae:	2f00      	cmp	r7, #0
    2cb0:	db1b      	blt.n	2cea <_usb_d_dev_ep_deinit+0x9e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    2cb2:	4a14      	ldr	r2, [pc, #80]	; (2d04 <_usb_d_dev_ep_deinit+0xb8>)
    2cb4:	3508      	adds	r5, #8
    2cb6:	016d      	lsls	r5, r5, #5
    2cb8:	5cab      	ldrb	r3, [r5, r2]
    2cba:	2107      	movs	r1, #7
    2cbc:	438b      	bics	r3, r1
    2cbe:	54ab      	strb	r3, [r5, r2]
	ept->flags.u8 = 0;
    2cc0:	4b0e      	ldr	r3, [pc, #56]	; (2cfc <_usb_d_dev_ep_deinit+0xb0>)
    2cc2:	00b1      	lsls	r1, r6, #2
    2cc4:	1988      	adds	r0, r1, r6
    2cc6:	0082      	lsls	r2, r0, #2
    2cc8:	189a      	adds	r2, r3, r2
    2cca:	3227      	adds	r2, #39	; 0x27
    2ccc:	2000      	movs	r0, #0
    2cce:	7010      	strb	r0, [r2, #0]
	ept->ep       = 0xFF;
    2cd0:	198e      	adds	r6, r1, r6
    2cd2:	00b2      	lsls	r2, r6, #2
    2cd4:	189b      	adds	r3, r3, r2
    2cd6:	3326      	adds	r3, #38	; 0x26
    2cd8:	22ff      	movs	r2, #255	; 0xff
    2cda:	701a      	strb	r2, [r3, #0]
}
    2cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    2cde:	3508      	adds	r5, #8
    2ce0:	016d      	lsls	r5, r5, #5
    2ce2:	2200      	movs	r2, #0
    2ce4:	4b07      	ldr	r3, [pc, #28]	; (2d04 <_usb_d_dev_ep_deinit+0xb8>)
    2ce6:	54ea      	strb	r2, [r5, r3]
    2ce8:	e7ea      	b.n	2cc0 <_usb_d_dev_ep_deinit+0x74>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    2cea:	4a06      	ldr	r2, [pc, #24]	; (2d04 <_usb_d_dev_ep_deinit+0xb8>)
    2cec:	3408      	adds	r4, #8
    2cee:	0164      	lsls	r4, r4, #5
    2cf0:	5ca3      	ldrb	r3, [r4, r2]
    2cf2:	2170      	movs	r1, #112	; 0x70
    2cf4:	438b      	bics	r3, r1
    2cf6:	54a3      	strb	r3, [r4, r2]
    2cf8:	e7e2      	b.n	2cc0 <_usb_d_dev_ep_deinit+0x74>
    2cfa:	46c0      	nop			; (mov r8, r8)
    2cfc:	200002b0 	.word	0x200002b0
    2d00:	00002229 	.word	0x00002229
    2d04:	41005000 	.word	0x41005000

00002d08 <_usb_d_dev_ep_enable>:
{
    2d08:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn   = USB_EP_GET_N(ep);
    2d0a:	230f      	movs	r3, #15
    2d0c:	4003      	ands	r3, r0
    2d0e:	b240      	sxtb	r0, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2d10:	2b00      	cmp	r3, #0
    2d12:	d005      	beq.n	2d20 <_usb_d_dev_ep_enable+0x18>
    2d14:	2800      	cmp	r0, #0
    2d16:	db01      	blt.n	2d1c <_usb_d_dev_ep_enable+0x14>
    2d18:	001e      	movs	r6, r3
    2d1a:	e002      	b.n	2d22 <_usb_d_dev_ep_enable+0x1a>
    2d1c:	1dde      	adds	r6, r3, #7
    2d1e:	e000      	b.n	2d22 <_usb_d_dev_ep_enable+0x1a>
    2d20:	001e      	movs	r6, r3
	return &dev_inst.ep[ep_index];
    2d22:	0032      	movs	r2, r6
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    2d24:	0019      	movs	r1, r3
    2d26:	3108      	adds	r1, #8
    2d28:	0149      	lsls	r1, r1, #5
    2d2a:	4caf      	ldr	r4, [pc, #700]	; (2fe8 <_usb_d_dev_ep_enable+0x2e0>)
    2d2c:	5d0c      	ldrb	r4, [r1, r4]
    2d2e:	b2e4      	uxtb	r4, r4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    2d30:	2b07      	cmp	r3, #7
    2d32:	d900      	bls.n	2d36 <_usb_d_dev_ep_enable+0x2e>
    2d34:	e148      	b.n	2fc8 <_usb_d_dev_ep_enable+0x2c0>
    2d36:	00b5      	lsls	r5, r6, #2
    2d38:	19ad      	adds	r5, r5, r6
    2d3a:	00ae      	lsls	r6, r5, #2
    2d3c:	49ab      	ldr	r1, [pc, #684]	; (2fec <_usb_d_dev_ep_enable+0x2e4>)
    2d3e:	1989      	adds	r1, r1, r6
    2d40:	3126      	adds	r1, #38	; 0x26
    2d42:	7809      	ldrb	r1, [r1, #0]
    2d44:	29ff      	cmp	r1, #255	; 0xff
    2d46:	d100      	bne.n	2d4a <_usb_d_dev_ep_enable+0x42>
    2d48:	e141      	b.n	2fce <_usb_d_dev_ep_enable+0x2c6>
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    2d4a:	0159      	lsls	r1, r3, #5
    2d4c:	4ea8      	ldr	r6, [pc, #672]	; (2ff0 <_usb_d_dev_ep_enable+0x2e8>)
    2d4e:	1876      	adds	r6, r6, r1
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    2d50:	0095      	lsls	r5, r2, #2
    2d52:	18ad      	adds	r5, r5, r2
    2d54:	00af      	lsls	r7, r5, #2
    2d56:	49a5      	ldr	r1, [pc, #660]	; (2fec <_usb_d_dev_ep_enable+0x2e4>)
    2d58:	19c9      	adds	r1, r1, r7
    2d5a:	3120      	adds	r1, #32
    2d5c:	79cd      	ldrb	r5, [r1, #7]
    2d5e:	2107      	movs	r1, #7
    2d60:	4029      	ands	r1, r5
    2d62:	2901      	cmp	r1, #1
    2d64:	d036      	beq.n	2dd4 <_usb_d_dev_ep_enable+0xcc>
	} else if (dir) {
    2d66:	2800      	cmp	r0, #0
    2d68:	da00      	bge.n	2d6c <_usb_d_dev_ep_enable+0x64>
    2d6a:	e0c5      	b.n	2ef8 <_usb_d_dev_ep_enable+0x1f0>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    2d6c:	0761      	lsls	r1, r4, #29
    2d6e:	d000      	beq.n	2d72 <_usb_d_dev_ep_enable+0x6a>
    2d70:	e136      	b.n	2fe0 <_usb_d_dev_ep_enable+0x2d8>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    2d72:	489e      	ldr	r0, [pc, #632]	; (2fec <_usb_d_dev_ep_enable+0x2e4>)
    2d74:	0095      	lsls	r5, r2, #2
    2d76:	18af      	adds	r7, r5, r2
    2d78:	00b9      	lsls	r1, r7, #2
    2d7a:	1841      	adds	r1, r0, r1
    2d7c:	3120      	adds	r1, #32
    2d7e:	79c9      	ldrb	r1, [r1, #7]
    2d80:	0749      	lsls	r1, r1, #29
    2d82:	0f49      	lsrs	r1, r1, #29
    2d84:	430c      	orrs	r4, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    2d86:	0019      	movs	r1, r3
    2d88:	3108      	adds	r1, #8
    2d8a:	0149      	lsls	r1, r1, #5
    2d8c:	4f96      	ldr	r7, [pc, #600]	; (2fe8 <_usb_d_dev_ep_enable+0x2e0>)
    2d8e:	55cc      	strb	r4, [r1, r7]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2d90:	18aa      	adds	r2, r5, r2
    2d92:	0091      	lsls	r1, r2, #2
    2d94:	1840      	adds	r0, r0, r1
    2d96:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    2d98:	0382      	lsls	r2, r0, #14
    2d9a:	4996      	ldr	r1, [pc, #600]	; (2ff4 <_usb_d_dev_ep_enable+0x2ec>)
    2d9c:	400a      	ands	r2, r1
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2d9e:	2180      	movs	r1, #128	; 0x80
    2da0:	0089      	lsls	r1, r1, #2
    2da2:	4288      	cmp	r0, r1
    2da4:	d900      	bls.n	2da8 <_usb_d_dev_ep_enable+0xa0>
    2da6:	e0f2      	b.n	2f8e <_usb_d_dev_ep_enable+0x286>
    2da8:	3901      	subs	r1, #1
    2daa:	39ff      	subs	r1, #255	; 0xff
    2dac:	4288      	cmp	r0, r1
    2dae:	d900      	bls.n	2db2 <_usb_d_dev_ep_enable+0xaa>
    2db0:	e100      	b.n	2fb4 <_usb_d_dev_ep_enable+0x2ac>
    2db2:	2880      	cmp	r0, #128	; 0x80
    2db4:	d900      	bls.n	2db8 <_usb_d_dev_ep_enable+0xb0>
    2db6:	e0ff      	b.n	2fb8 <_usb_d_dev_ep_enable+0x2b0>
    2db8:	2840      	cmp	r0, #64	; 0x40
    2dba:	d900      	bls.n	2dbe <_usb_d_dev_ep_enable+0xb6>
    2dbc:	e0fe      	b.n	2fbc <_usb_d_dev_ep_enable+0x2b4>
    2dbe:	2820      	cmp	r0, #32
    2dc0:	d900      	bls.n	2dc4 <_usb_d_dev_ep_enable+0xbc>
    2dc2:	e0fd      	b.n	2fc0 <_usb_d_dev_ep_enable+0x2b8>
    2dc4:	2810      	cmp	r0, #16
    2dc6:	d900      	bls.n	2dca <_usb_d_dev_ep_enable+0xc2>
    2dc8:	e0fc      	b.n	2fc4 <_usb_d_dev_ep_enable+0x2bc>
    2dca:	39f8      	subs	r1, #248	; 0xf8
    2dcc:	4281      	cmp	r1, r0
    2dce:	4189      	sbcs	r1, r1
    2dd0:	4249      	negs	r1, r1
    2dd2:	e0dd      	b.n	2f90 <_usb_d_dev_ep_enable+0x288>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    2dd4:	3176      	adds	r1, #118	; 0x76
    2dd6:	4221      	tst	r1, r4
    2dd8:	d000      	beq.n	2ddc <_usb_d_dev_ep_enable+0xd4>
    2dda:	e0fb      	b.n	2fd4 <_usb_d_dev_ep_enable+0x2cc>
    2ddc:	0019      	movs	r1, r3
    2dde:	3108      	adds	r1, #8
    2de0:	0149      	lsls	r1, r1, #5
    2de2:	2411      	movs	r4, #17
    2de4:	4880      	ldr	r0, [pc, #512]	; (2fe8 <_usb_d_dev_ep_enable+0x2e0>)
    2de6:	540c      	strb	r4, [r1, r0]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2de8:	4980      	ldr	r1, [pc, #512]	; (2fec <_usb_d_dev_ep_enable+0x2e4>)
    2dea:	19c9      	adds	r1, r1, r7
    2dec:	8c89      	ldrh	r1, [r1, #36]	; 0x24
    2dee:	0388      	lsls	r0, r1, #14
    2df0:	4c80      	ldr	r4, [pc, #512]	; (2ff4 <_usb_d_dev_ep_enable+0x2ec>)
    2df2:	4020      	ands	r0, r4
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2df4:	2480      	movs	r4, #128	; 0x80
    2df6:	00a4      	lsls	r4, r4, #2
    2df8:	42a1      	cmp	r1, r4
    2dfa:	d810      	bhi.n	2e1e <_usb_d_dev_ep_enable+0x116>
    2dfc:	3c01      	subs	r4, #1
    2dfe:	3cff      	subs	r4, #255	; 0xff
    2e00:	42a1      	cmp	r1, r4
    2e02:	d827      	bhi.n	2e54 <_usb_d_dev_ep_enable+0x14c>
    2e04:	2980      	cmp	r1, #128	; 0x80
    2e06:	d827      	bhi.n	2e58 <_usb_d_dev_ep_enable+0x150>
    2e08:	2940      	cmp	r1, #64	; 0x40
    2e0a:	d827      	bhi.n	2e5c <_usb_d_dev_ep_enable+0x154>
    2e0c:	2920      	cmp	r1, #32
    2e0e:	d827      	bhi.n	2e60 <_usb_d_dev_ep_enable+0x158>
    2e10:	2910      	cmp	r1, #16
    2e12:	d827      	bhi.n	2e64 <_usb_d_dev_ep_enable+0x15c>
    2e14:	3cf8      	subs	r4, #248	; 0xf8
    2e16:	428c      	cmp	r4, r1
    2e18:	41a4      	sbcs	r4, r4
    2e1a:	4264      	negs	r4, r4
    2e1c:	e000      	b.n	2e20 <_usb_d_dev_ep_enable+0x118>
    2e1e:	2407      	movs	r4, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2e20:	0724      	lsls	r4, r4, #28
    2e22:	4320      	orrs	r0, r4
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2e24:	6070      	str	r0, [r6, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2e26:	0488      	lsls	r0, r1, #18
    2e28:	0c80      	lsrs	r0, r0, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2e2a:	2480      	movs	r4, #128	; 0x80
    2e2c:	00a4      	lsls	r4, r4, #2
    2e2e:	42a1      	cmp	r1, r4
    2e30:	d81a      	bhi.n	2e68 <_usb_d_dev_ep_enable+0x160>
    2e32:	3c01      	subs	r4, #1
    2e34:	3cff      	subs	r4, #255	; 0xff
    2e36:	42a1      	cmp	r1, r4
    2e38:	d854      	bhi.n	2ee4 <_usb_d_dev_ep_enable+0x1dc>
    2e3a:	2980      	cmp	r1, #128	; 0x80
    2e3c:	d854      	bhi.n	2ee8 <_usb_d_dev_ep_enable+0x1e0>
    2e3e:	2940      	cmp	r1, #64	; 0x40
    2e40:	d854      	bhi.n	2eec <_usb_d_dev_ep_enable+0x1e4>
    2e42:	2920      	cmp	r1, #32
    2e44:	d854      	bhi.n	2ef0 <_usb_d_dev_ep_enable+0x1e8>
    2e46:	2910      	cmp	r1, #16
    2e48:	d854      	bhi.n	2ef4 <_usb_d_dev_ep_enable+0x1ec>
    2e4a:	3cf8      	subs	r4, #248	; 0xf8
    2e4c:	428c      	cmp	r4, r1
    2e4e:	4189      	sbcs	r1, r1
    2e50:	4249      	negs	r1, r1
    2e52:	e00a      	b.n	2e6a <_usb_d_dev_ep_enable+0x162>
    2e54:	2406      	movs	r4, #6
    2e56:	e7e3      	b.n	2e20 <_usb_d_dev_ep_enable+0x118>
    2e58:	2405      	movs	r4, #5
    2e5a:	e7e1      	b.n	2e20 <_usb_d_dev_ep_enable+0x118>
    2e5c:	2404      	movs	r4, #4
    2e5e:	e7df      	b.n	2e20 <_usb_d_dev_ep_enable+0x118>
    2e60:	2403      	movs	r4, #3
    2e62:	e7dd      	b.n	2e20 <_usb_d_dev_ep_enable+0x118>
    2e64:	2402      	movs	r4, #2
    2e66:	e7db      	b.n	2e20 <_usb_d_dev_ep_enable+0x118>
    2e68:	2107      	movs	r1, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2e6a:	0709      	lsls	r1, r1, #28
    2e6c:	4301      	orrs	r1, r0
    2e6e:	6171      	str	r1, [r6, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2e70:	0019      	movs	r1, r3
    2e72:	3108      	adds	r1, #8
    2e74:	0149      	lsls	r1, r1, #5
    2e76:	485c      	ldr	r0, [pc, #368]	; (2fe8 <_usb_d_dev_ep_enable+0x2e0>)
    2e78:	4684      	mov	ip, r0
    2e7a:	4461      	add	r1, ip
    2e7c:	2040      	movs	r0, #64	; 0x40
    2e7e:	7148      	strb	r0, [r1, #5]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2e80:	2480      	movs	r4, #128	; 0x80
    2e82:	710c      	strb	r4, [r1, #4]
	bank->STATUS_BK.reg     = 0;
    2e84:	4d5a      	ldr	r5, [pc, #360]	; (2ff0 <_usb_d_dev_ep_enable+0x2e8>)
    2e86:	015b      	lsls	r3, r3, #5
    2e88:	18eb      	adds	r3, r5, r3
    2e8a:	2100      	movs	r1, #0
    2e8c:	7299      	strb	r1, [r3, #10]
    2e8e:	7699      	strb	r1, [r3, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2e90:	4e56      	ldr	r6, [pc, #344]	; (2fec <_usb_d_dev_ep_enable+0x2e4>)
    2e92:	0094      	lsls	r4, r2, #2
    2e94:	18a3      	adds	r3, r4, r2
    2e96:	0099      	lsls	r1, r3, #2
    2e98:	1871      	adds	r1, r6, r1
    2e9a:	000b      	movs	r3, r1
    2e9c:	3326      	adds	r3, #38	; 0x26
    2e9e:	781b      	ldrb	r3, [r3, #0]
    2ea0:	270f      	movs	r7, #15
    2ea2:	403b      	ands	r3, r7
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    2ea4:	6a0f      	ldr	r7, [r1, #32]
	bank->ADDR.reg          = addr;
    2ea6:	0159      	lsls	r1, r3, #5
    2ea8:	514f      	str	r7, [r1, r5]
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    2eaa:	18a2      	adds	r2, r4, r2
    2eac:	0094      	lsls	r4, r2, #2
    2eae:	1936      	adds	r6, r6, r4
    2eb0:	8cb2      	ldrh	r2, [r6, #36]	; 0x24
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    2eb2:	186c      	adds	r4, r5, r1
    2eb4:	6865      	ldr	r5, [r4, #4]
    2eb6:	0492      	lsls	r2, r2, #18
    2eb8:	0912      	lsrs	r2, r2, #4
    2eba:	4e4f      	ldr	r6, [pc, #316]	; (2ff8 <_usb_d_dev_ep_enable+0x2f0>)
    2ebc:	4035      	ands	r5, r6
    2ebe:	432a      	orrs	r2, r5
    2ec0:	6062      	str	r2, [r4, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    2ec2:	6862      	ldr	r2, [r4, #4]
    2ec4:	0b92      	lsrs	r2, r2, #14
    2ec6:	0395      	lsls	r5, r2, #14
    2ec8:	6065      	str	r5, [r4, #4]
    2eca:	3308      	adds	r3, #8
    2ecc:	015b      	lsls	r3, r3, #5
    2ece:	4463      	add	r3, ip
    2ed0:	22b0      	movs	r2, #176	; 0xb0
    2ed2:	711a      	strb	r2, [r3, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2ed4:	7158      	strb	r0, [r3, #5]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    2ed6:	4b49      	ldr	r3, [pc, #292]	; (2ffc <_usb_d_dev_ep_enable+0x2f4>)
    2ed8:	469c      	mov	ip, r3
    2eda:	4461      	add	r1, ip
    2edc:	2310      	movs	r3, #16
    2ede:	700b      	strb	r3, [r1, #0]
	return USB_OK;
    2ee0:	2000      	movs	r0, #0
    2ee2:	e066      	b.n	2fb2 <_usb_d_dev_ep_enable+0x2aa>
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2ee4:	2106      	movs	r1, #6
    2ee6:	e7c0      	b.n	2e6a <_usb_d_dev_ep_enable+0x162>
    2ee8:	2105      	movs	r1, #5
    2eea:	e7be      	b.n	2e6a <_usb_d_dev_ep_enable+0x162>
    2eec:	2104      	movs	r1, #4
    2eee:	e7bc      	b.n	2e6a <_usb_d_dev_ep_enable+0x162>
    2ef0:	2103      	movs	r1, #3
    2ef2:	e7ba      	b.n	2e6a <_usb_d_dev_ep_enable+0x162>
    2ef4:	2102      	movs	r1, #2
    2ef6:	e7b8      	b.n	2e6a <_usb_d_dev_ep_enable+0x162>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    2ef8:	2170      	movs	r1, #112	; 0x70
    2efa:	4221      	tst	r1, r4
    2efc:	d000      	beq.n	2f00 <_usb_d_dev_ep_enable+0x1f8>
    2efe:	e06c      	b.n	2fda <_usb_d_dev_ep_enable+0x2d2>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    2f00:	483a      	ldr	r0, [pc, #232]	; (2fec <_usb_d_dev_ep_enable+0x2e4>)
    2f02:	0095      	lsls	r5, r2, #2
    2f04:	18af      	adds	r7, r5, r2
    2f06:	00b9      	lsls	r1, r7, #2
    2f08:	1841      	adds	r1, r0, r1
    2f0a:	3120      	adds	r1, #32
    2f0c:	79c9      	ldrb	r1, [r1, #7]
    2f0e:	0749      	lsls	r1, r1, #29
    2f10:	0e49      	lsrs	r1, r1, #25
    2f12:	430c      	orrs	r4, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    2f14:	0019      	movs	r1, r3
    2f16:	3108      	adds	r1, #8
    2f18:	0149      	lsls	r1, r1, #5
    2f1a:	4f33      	ldr	r7, [pc, #204]	; (2fe8 <_usb_d_dev_ep_enable+0x2e0>)
    2f1c:	55cc      	strb	r4, [r1, r7]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2f1e:	18aa      	adds	r2, r5, r2
    2f20:	0091      	lsls	r1, r2, #2
    2f22:	1840      	adds	r0, r0, r1
    2f24:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    2f26:	048a      	lsls	r2, r1, #18
    2f28:	0c92      	lsrs	r2, r2, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2f2a:	2080      	movs	r0, #128	; 0x80
    2f2c:	0080      	lsls	r0, r0, #2
    2f2e:	4281      	cmp	r1, r0
    2f30:	d810      	bhi.n	2f54 <_usb_d_dev_ep_enable+0x24c>
    2f32:	3801      	subs	r0, #1
    2f34:	38ff      	subs	r0, #255	; 0xff
    2f36:	4281      	cmp	r1, r0
    2f38:	d81f      	bhi.n	2f7a <_usb_d_dev_ep_enable+0x272>
    2f3a:	2980      	cmp	r1, #128	; 0x80
    2f3c:	d81f      	bhi.n	2f7e <_usb_d_dev_ep_enable+0x276>
    2f3e:	2940      	cmp	r1, #64	; 0x40
    2f40:	d81f      	bhi.n	2f82 <_usb_d_dev_ep_enable+0x27a>
    2f42:	2920      	cmp	r1, #32
    2f44:	d81f      	bhi.n	2f86 <_usb_d_dev_ep_enable+0x27e>
    2f46:	2910      	cmp	r1, #16
    2f48:	d81f      	bhi.n	2f8a <_usb_d_dev_ep_enable+0x282>
    2f4a:	38f8      	subs	r0, #248	; 0xf8
    2f4c:	4288      	cmp	r0, r1
    2f4e:	4189      	sbcs	r1, r1
    2f50:	4249      	negs	r1, r1
    2f52:	e000      	b.n	2f56 <_usb_d_dev_ep_enable+0x24e>
    2f54:	2107      	movs	r1, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2f56:	0709      	lsls	r1, r1, #28
    2f58:	430a      	orrs	r2, r1
    2f5a:	6172      	str	r2, [r6, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2f5c:	001a      	movs	r2, r3
    2f5e:	3208      	adds	r2, #8
    2f60:	0152      	lsls	r2, r2, #5
    2f62:	4921      	ldr	r1, [pc, #132]	; (2fe8 <_usb_d_dev_ep_enable+0x2e0>)
    2f64:	468c      	mov	ip, r1
    2f66:	4462      	add	r2, ip
    2f68:	2180      	movs	r1, #128	; 0x80
    2f6a:	7111      	strb	r1, [r2, #4]
	bank->STATUS_BK.reg     = 0;
    2f6c:	015a      	lsls	r2, r3, #5
    2f6e:	4b20      	ldr	r3, [pc, #128]	; (2ff0 <_usb_d_dev_ep_enable+0x2e8>)
    2f70:	189b      	adds	r3, r3, r2
    2f72:	2200      	movs	r2, #0
    2f74:	769a      	strb	r2, [r3, #26]
	return USB_OK;
    2f76:	2000      	movs	r0, #0
    2f78:	e01b      	b.n	2fb2 <_usb_d_dev_ep_enable+0x2aa>
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2f7a:	2106      	movs	r1, #6
    2f7c:	e7eb      	b.n	2f56 <_usb_d_dev_ep_enable+0x24e>
    2f7e:	2105      	movs	r1, #5
    2f80:	e7e9      	b.n	2f56 <_usb_d_dev_ep_enable+0x24e>
    2f82:	2104      	movs	r1, #4
    2f84:	e7e7      	b.n	2f56 <_usb_d_dev_ep_enable+0x24e>
    2f86:	2103      	movs	r1, #3
    2f88:	e7e5      	b.n	2f56 <_usb_d_dev_ep_enable+0x24e>
    2f8a:	2102      	movs	r1, #2
    2f8c:	e7e3      	b.n	2f56 <_usb_d_dev_ep_enable+0x24e>
    2f8e:	2107      	movs	r1, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2f90:	0709      	lsls	r1, r1, #28
    2f92:	430a      	orrs	r2, r1
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2f94:	6072      	str	r2, [r6, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2f96:	001a      	movs	r2, r3
    2f98:	3208      	adds	r2, #8
    2f9a:	0152      	lsls	r2, r2, #5
    2f9c:	4912      	ldr	r1, [pc, #72]	; (2fe8 <_usb_d_dev_ep_enable+0x2e0>)
    2f9e:	468c      	mov	ip, r1
    2fa0:	4462      	add	r2, ip
    2fa2:	2140      	movs	r1, #64	; 0x40
    2fa4:	7151      	strb	r1, [r2, #5]
	bank->STATUS_BK.reg     = 0;
    2fa6:	015b      	lsls	r3, r3, #5
    2fa8:	4a11      	ldr	r2, [pc, #68]	; (2ff0 <_usb_d_dev_ep_enable+0x2e8>)
    2faa:	18d3      	adds	r3, r2, r3
    2fac:	2200      	movs	r2, #0
    2fae:	729a      	strb	r2, [r3, #10]
	return USB_OK;
    2fb0:	2000      	movs	r0, #0
}
    2fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2fb4:	2106      	movs	r1, #6
    2fb6:	e7eb      	b.n	2f90 <_usb_d_dev_ep_enable+0x288>
    2fb8:	2105      	movs	r1, #5
    2fba:	e7e9      	b.n	2f90 <_usb_d_dev_ep_enable+0x288>
    2fbc:	2104      	movs	r1, #4
    2fbe:	e7e7      	b.n	2f90 <_usb_d_dev_ep_enable+0x288>
    2fc0:	2103      	movs	r1, #3
    2fc2:	e7e5      	b.n	2f90 <_usb_d_dev_ep_enable+0x288>
    2fc4:	2102      	movs	r1, #2
    2fc6:	e7e3      	b.n	2f90 <_usb_d_dev_ep_enable+0x288>
		return -USB_ERR_PARAM;
    2fc8:	2012      	movs	r0, #18
    2fca:	4240      	negs	r0, r0
    2fcc:	e7f1      	b.n	2fb2 <_usb_d_dev_ep_enable+0x2aa>
    2fce:	2012      	movs	r0, #18
    2fd0:	4240      	negs	r0, r0
    2fd2:	e7ee      	b.n	2fb2 <_usb_d_dev_ep_enable+0x2aa>
			return -USB_ERR_REDO;
    2fd4:	2014      	movs	r0, #20
    2fd6:	4240      	negs	r0, r0
    2fd8:	e7eb      	b.n	2fb2 <_usb_d_dev_ep_enable+0x2aa>
			return -USB_ERR_REDO;
    2fda:	2014      	movs	r0, #20
    2fdc:	4240      	negs	r0, r0
    2fde:	e7e8      	b.n	2fb2 <_usb_d_dev_ep_enable+0x2aa>
			return -USB_ERR_REDO;
    2fe0:	2014      	movs	r0, #20
    2fe2:	4240      	negs	r0, r0
    2fe4:	e7e5      	b.n	2fb2 <_usb_d_dev_ep_enable+0x2aa>
    2fe6:	46c0      	nop			; (mov r8, r8)
    2fe8:	41005000 	.word	0x41005000
    2fec:	200002b0 	.word	0x200002b0
    2ff0:	200001b0 	.word	0x200001b0
    2ff4:	0fffc000 	.word	0x0fffc000
    2ff8:	f0003fff 	.word	0xf0003fff
    2ffc:	41005109 	.word	0x41005109

00003000 <_usb_d_dev_ep_stall>:
{
    3000:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    3002:	230f      	movs	r3, #15
    3004:	4003      	ands	r3, r0
    3006:	b240      	sxtb	r0, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    3008:	0fc4      	lsrs	r4, r0, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    300a:	2b00      	cmp	r3, #0
    300c:	d005      	beq.n	301a <_usb_d_dev_ep_stall+0x1a>
    300e:	2800      	cmp	r0, #0
    3010:	db01      	blt.n	3016 <_usb_d_dev_ep_stall+0x16>
    3012:	001a      	movs	r2, r3
    3014:	e002      	b.n	301c <_usb_d_dev_ep_stall+0x1c>
    3016:	1dda      	adds	r2, r3, #7
    3018:	e000      	b.n	301c <_usb_d_dev_ep_stall+0x1c>
    301a:	001a      	movs	r2, r3
	return &dev_inst.ep[ep_index];
    301c:	0015      	movs	r5, r2
    301e:	0090      	lsls	r0, r2, #2
    3020:	1880      	adds	r0, r0, r2
    3022:	0082      	lsls	r2, r0, #2
    3024:	3210      	adds	r2, #16
    3026:	4845      	ldr	r0, [pc, #276]	; (313c <_usb_d_dev_ep_stall+0x13c>)
    3028:	1882      	adds	r2, r0, r2
    302a:	3204      	adds	r2, #4
	if (epn > CONF_USB_D_MAX_EP_N) {
    302c:	2b07      	cmp	r3, #7
    302e:	d900      	bls.n	3032 <_usb_d_dev_ep_stall+0x32>
    3030:	e080      	b.n	3134 <_usb_d_dev_ep_stall+0x134>
	if (USB_EP_STALL_SET == ctrl) {
    3032:	2901      	cmp	r1, #1
    3034:	d017      	beq.n	3066 <_usb_d_dev_ep_stall+0x66>
	} else if (USB_EP_STALL_CLR == ctrl) {
    3036:	2900      	cmp	r1, #0
    3038:	d039      	beq.n	30ae <_usb_d_dev_ep_stall+0xae>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    303a:	00aa      	lsls	r2, r5, #2
    303c:	1952      	adds	r2, r2, r5
    303e:	0091      	lsls	r1, r2, #2
    3040:	4b3e      	ldr	r3, [pc, #248]	; (313c <_usb_d_dev_ep_stall+0x13c>)
    3042:	185b      	adds	r3, r3, r1
    3044:	3326      	adds	r3, #38	; 0x26
    3046:	781a      	ldrb	r2, [r3, #0]
    3048:	230f      	movs	r3, #15
    304a:	4013      	ands	r3, r2
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    304c:	3308      	adds	r3, #8
    304e:	015b      	lsls	r3, r3, #5
    3050:	4a3b      	ldr	r2, [pc, #236]	; (3140 <_usb_d_dev_ep_stall+0x140>)
    3052:	4694      	mov	ip, r2
    3054:	4463      	add	r3, ip
    3056:	7998      	ldrb	r0, [r3, #6]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    3058:	2310      	movs	r3, #16
    305a:	40a3      	lsls	r3, r4
    305c:	4018      	ands	r0, r3
    305e:	1e43      	subs	r3, r0, #1
    3060:	4198      	sbcs	r0, r3
    3062:	b2c0      	uxtb	r0, r0
}
    3064:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3066:	00aa      	lsls	r2, r5, #2
    3068:	1951      	adds	r1, r2, r5
    306a:	008b      	lsls	r3, r1, #2
    306c:	18c3      	adds	r3, r0, r3
    306e:	3326      	adds	r3, #38	; 0x26
    3070:	781b      	ldrb	r3, [r3, #0]
    3072:	210f      	movs	r1, #15
    3074:	400b      	ands	r3, r1
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    3076:	2610      	movs	r6, #16
    3078:	40a6      	lsls	r6, r4
    307a:	b2f6      	uxtb	r6, r6
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    307c:	0019      	movs	r1, r3
    307e:	3108      	adds	r1, #8
    3080:	0149      	lsls	r1, r1, #5
    3082:	4f2f      	ldr	r7, [pc, #188]	; (3140 <_usb_d_dev_ep_stall+0x140>)
    3084:	46bc      	mov	ip, r7
    3086:	4461      	add	r1, ip
    3088:	714e      	strb	r6, [r1, #5]
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    308a:	2120      	movs	r1, #32
    308c:	40a1      	lsls	r1, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    308e:	b2cc      	uxtb	r4, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    3090:	0159      	lsls	r1, r3, #5
    3092:	4b2c      	ldr	r3, [pc, #176]	; (3144 <_usb_d_dev_ep_stall+0x144>)
    3094:	469c      	mov	ip, r3
    3096:	4461      	add	r1, ip
    3098:	700c      	strb	r4, [r1, #0]
	ept->flags.bits.is_stalled = 1;
    309a:	1952      	adds	r2, r2, r5
    309c:	0093      	lsls	r3, r2, #2
    309e:	18c3      	adds	r3, r0, r3
    30a0:	3320      	adds	r3, #32
    30a2:	79da      	ldrb	r2, [r3, #7]
    30a4:	2108      	movs	r1, #8
    30a6:	430a      	orrs	r2, r1
    30a8:	71da      	strb	r2, [r3, #7]
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    30aa:	2000      	movs	r0, #0
    30ac:	e7da      	b.n	3064 <_usb_d_dev_ep_stall+0x64>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    30ae:	7c93      	ldrb	r3, [r2, #18]
    30b0:	310f      	adds	r1, #15
    30b2:	400b      	ands	r3, r1
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    30b4:	0019      	movs	r1, r3
    30b6:	3108      	adds	r1, #8
    30b8:	0149      	lsls	r1, r1, #5
    30ba:	4821      	ldr	r0, [pc, #132]	; (3140 <_usb_d_dev_ep_stall+0x140>)
    30bc:	4684      	mov	ip, r0
    30be:	4461      	add	r1, ip
    30c0:	7988      	ldrb	r0, [r1, #6]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    30c2:	2110      	movs	r1, #16
    30c4:	40a1      	lsls	r1, r4
	if (!is_stalled) {
    30c6:	4208      	tst	r0, r1
    30c8:	d024      	beq.n	3114 <_usb_d_dev_ep_stall+0x114>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    30ca:	b2c9      	uxtb	r1, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    30cc:	0018      	movs	r0, r3
    30ce:	3008      	adds	r0, #8
    30d0:	0140      	lsls	r0, r0, #5
    30d2:	4460      	add	r0, ip
    30d4:	7101      	strb	r1, [r0, #4]
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    30d6:	2120      	movs	r1, #32
    30d8:	40a1      	lsls	r1, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    30da:	b2ce      	uxtb	r6, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    30dc:	015d      	lsls	r5, r3, #5
    30de:	4f1a      	ldr	r7, [pc, #104]	; (3148 <_usb_d_dev_ep_stall+0x148>)
    30e0:	46bc      	mov	ip, r7
    30e2:	4465      	add	r5, ip
    30e4:	702e      	strb	r6, [r5, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    30e6:	79c0      	ldrb	r0, [r0, #7]
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    30e8:	4208      	tst	r0, r1
    30ea:	d00a      	beq.n	3102 <_usb_d_dev_ep_stall+0x102>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    30ec:	0019      	movs	r1, r3
    30ee:	3108      	adds	r1, #8
    30f0:	0149      	lsls	r1, r1, #5
    30f2:	4813      	ldr	r0, [pc, #76]	; (3140 <_usb_d_dev_ep_stall+0x140>)
    30f4:	4684      	mov	ip, r0
    30f6:	4461      	add	r1, ip
    30f8:	71ce      	strb	r6, [r1, #7]
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    30fa:	2001      	movs	r0, #1
    30fc:	40a0      	lsls	r0, r4
    30fe:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3100:	7108      	strb	r0, [r1, #4]
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    3102:	7cd0      	ldrb	r0, [r2, #19]
    3104:	2107      	movs	r1, #7
    3106:	4001      	ands	r1, r0
    3108:	2901      	cmp	r1, #1
    310a:	d005      	beq.n	3118 <_usb_d_dev_ep_stall+0x118>
		ept->flags.bits.is_stalled = 0;
    310c:	7cd3      	ldrb	r3, [r2, #19]
    310e:	2108      	movs	r1, #8
    3110:	438b      	bics	r3, r1
    3112:	74d3      	strb	r3, [r2, #19]
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    3114:	2000      	movs	r0, #0
    3116:	e7a5      	b.n	3064 <_usb_d_dev_ep_stall+0x64>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    3118:	3308      	adds	r3, #8
    311a:	015b      	lsls	r3, r3, #5
    311c:	4908      	ldr	r1, [pc, #32]	; (3140 <_usb_d_dev_ep_stall+0x140>)
    311e:	468c      	mov	ip, r1
    3120:	4463      	add	r3, ip
    3122:	7999      	ldrb	r1, [r3, #6]
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    3124:	2330      	movs	r3, #48	; 0x30
    3126:	4219      	tst	r1, r3
    3128:	d1f4      	bne.n	3114 <_usb_d_dev_ep_stall+0x114>
			ept->flags.bits.is_stalled = 0;
    312a:	0003      	movs	r3, r0
    312c:	2108      	movs	r1, #8
    312e:	438b      	bics	r3, r1
    3130:	74d3      	strb	r3, [r2, #19]
    3132:	e7ef      	b.n	3114 <_usb_d_dev_ep_stall+0x114>
		return -USB_ERR_PARAM;
    3134:	2012      	movs	r0, #18
    3136:	4240      	negs	r0, r0
    3138:	e794      	b.n	3064 <_usb_d_dev_ep_stall+0x64>
    313a:	46c0      	nop			; (mov r8, r8)
    313c:	200002b0 	.word	0x200002b0
    3140:	41005000 	.word	0x41005000
    3144:	41005109 	.word	0x41005109
    3148:	41005108 	.word	0x41005108

0000314c <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    314c:	b570      	push	{r4, r5, r6, lr}
    314e:	000e      	movs	r6, r1
	uint8_t            epn   = USB_EP_GET_N(ep);
    3150:	240f      	movs	r4, #15
    3152:	4004      	ands	r4, r0
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    3154:	0162      	lsls	r2, r4, #5
    3156:	4b18      	ldr	r3, [pc, #96]	; (31b8 <_usb_d_dev_ep_read_req+0x6c>)
    3158:	189b      	adds	r3, r3, r2
	uint32_t           addr  = bank[0].ADDR.reg;
    315a:	6819      	ldr	r1, [r3, #0]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    315c:	685d      	ldr	r5, [r3, #4]
    315e:	04ad      	lsls	r5, r5, #18
    3160:	0cad      	lsrs	r5, r5, #18

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    3162:	2c07      	cmp	r4, #7
    3164:	d81f      	bhi.n	31a6 <_usb_d_dev_ep_read_req+0x5a>
    3166:	2e00      	cmp	r6, #0
    3168:	d020      	beq.n	31ac <_usb_d_dev_ep_read_req+0x60>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    316a:	0023      	movs	r3, r4
    316c:	3308      	adds	r3, #8
    316e:	015b      	lsls	r3, r3, #5
    3170:	4a12      	ldr	r2, [pc, #72]	; (31bc <_usb_d_dev_ep_read_req+0x70>)
    3172:	5c9b      	ldrb	r3, [r3, r2]
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    3174:	2b11      	cmp	r3, #17
    3176:	d11c      	bne.n	31b2 <_usb_d_dev_ep_read_req+0x66>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    3178:	0023      	movs	r3, r4
    317a:	3308      	adds	r3, #8
    317c:	015b      	lsls	r3, r3, #5
    317e:	4694      	mov	ip, r2
    3180:	4463      	add	r3, ip
    3182:	79db      	ldrb	r3, [r3, #7]
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    3184:	06db      	lsls	r3, r3, #27
    3186:	d401      	bmi.n	318c <_usb_d_dev_ep_read_req+0x40>
		return ERR_NONE;
    3188:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    318a:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(req_buf, (void *)addr, 8);
    318c:	2208      	movs	r2, #8
    318e:	0030      	movs	r0, r6
    3190:	4b0b      	ldr	r3, [pc, #44]	; (31c0 <_usb_d_dev_ep_read_req+0x74>)
    3192:	4798      	blx	r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3194:	3408      	adds	r4, #8
    3196:	0164      	lsls	r4, r4, #5
    3198:	4b08      	ldr	r3, [pc, #32]	; (31bc <_usb_d_dev_ep_read_req+0x70>)
    319a:	469c      	mov	ip, r3
    319c:	4464      	add	r4, ip
    319e:	2310      	movs	r3, #16
    31a0:	71e3      	strb	r3, [r4, #7]
	return bytes;
    31a2:	0028      	movs	r0, r5
    31a4:	e7f1      	b.n	318a <_usb_d_dev_ep_read_req+0x3e>
		return -USB_ERR_PARAM;
    31a6:	2012      	movs	r0, #18
    31a8:	4240      	negs	r0, r0
    31aa:	e7ee      	b.n	318a <_usb_d_dev_ep_read_req+0x3e>
    31ac:	2012      	movs	r0, #18
    31ae:	4240      	negs	r0, r0
    31b0:	e7eb      	b.n	318a <_usb_d_dev_ep_read_req+0x3e>
		return -USB_ERR_FUNC;
    31b2:	2013      	movs	r0, #19
    31b4:	4240      	negs	r0, r0
    31b6:	e7e8      	b.n	318a <_usb_d_dev_ep_read_req+0x3e>
    31b8:	200001b0 	.word	0x200001b0
    31bc:	41005000 	.word	0x41005000
    31c0:	000040bd 	.word	0x000040bd

000031c4 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    31c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    31c6:	46de      	mov	lr, fp
    31c8:	4657      	mov	r7, sl
    31ca:	464e      	mov	r6, r9
    31cc:	4645      	mov	r5, r8
    31ce:	b5e0      	push	{r5, r6, r7, lr}
    31d0:	b085      	sub	sp, #20
    31d2:	4680      	mov	r8, r0
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    31d4:	7a05      	ldrb	r5, [r0, #8]
    31d6:	230f      	movs	r3, #15
    31d8:	402b      	ands	r3, r5
    31da:	b26d      	sxtb	r5, r5
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    31dc:	0fea      	lsrs	r2, r5, #31
    31de:	4691      	mov	r9, r2
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    31e0:	2b00      	cmp	r3, #0
    31e2:	d005      	beq.n	31f0 <_usb_d_dev_ep_trans+0x2c>
    31e4:	2d00      	cmp	r5, #0
    31e6:	db01      	blt.n	31ec <_usb_d_dev_ep_trans+0x28>
    31e8:	0018      	movs	r0, r3
    31ea:	e002      	b.n	31f2 <_usb_d_dev_ep_trans+0x2e>
    31ec:	1dd8      	adds	r0, r3, #7
    31ee:	e000      	b.n	31f2 <_usb_d_dev_ep_trans+0x2e>
    31f0:	0018      	movs	r0, r3
	return &dev_inst.ep[ep_index];
    31f2:	0006      	movs	r6, r0
    31f4:	495f      	ldr	r1, [pc, #380]	; (3374 <_usb_d_dev_ep_trans+0x1b0>)
    31f6:	0082      	lsls	r2, r0, #2
    31f8:	1817      	adds	r7, r2, r0
    31fa:	00bc      	lsls	r4, r7, #2
    31fc:	3410      	adds	r4, #16
    31fe:	190c      	adds	r4, r1, r4
    3200:	3404      	adds	r4, #4
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    3202:	00b8      	lsls	r0, r7, #2
    3204:	1809      	adds	r1, r1, r0
    3206:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    3208:	495b      	ldr	r1, [pc, #364]	; (3378 <_usb_d_dev_ep_trans+0x1b4>)
    320a:	428a      	cmp	r2, r1
    320c:	d042      	beq.n	3294 <_usb_d_dev_ep_trans+0xd0>
    320e:	1e57      	subs	r7, r2, #1
    3210:	b2bf      	uxth	r7, r7
	bool     size_n_aligned = (trans->size & size_mask);
    3212:	4641      	mov	r1, r8
    3214:	6849      	ldr	r1, [r1, #4]
    3216:	400f      	ands	r7, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    3218:	2b07      	cmp	r3, #7
    321a:	d900      	bls.n	321e <_usb_d_dev_ep_trans+0x5a>
    321c:	e0a1      	b.n	3362 <_usb_d_dev_ep_trans+0x19e>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    321e:	4643      	mov	r3, r8
    3220:	681b      	ldr	r3, [r3, #0]
    3222:	4856      	ldr	r0, [pc, #344]	; (337c <_usb_d_dev_ep_trans+0x1b8>)
    3224:	4283      	cmp	r3, r0
    3226:	d90c      	bls.n	3242 <_usb_d_dev_ep_trans+0x7e>
    3228:	18c8      	adds	r0, r1, r3
    322a:	9001      	str	r0, [sp, #4]
    322c:	4854      	ldr	r0, [pc, #336]	; (3380 <_usb_d_dev_ep_trans+0x1bc>)
    322e:	4684      	mov	ip, r0
    3230:	9801      	ldr	r0, [sp, #4]
    3232:	4560      	cmp	r0, ip
    3234:	d805      	bhi.n	3242 <_usb_d_dev_ep_trans+0x7e>
    3236:	079b      	lsls	r3, r3, #30
    3238:	d103      	bne.n	3242 <_usb_d_dev_ep_trans+0x7e>
	    || (!dir && (trans->size < ept->size))) {
    323a:	2d00      	cmp	r5, #0
    323c:	db2c      	blt.n	3298 <_usb_d_dev_ep_trans+0xd4>
    323e:	4291      	cmp	r1, r2
    3240:	d22d      	bcs.n	329e <_usb_d_dev_ep_trans+0xda>
		if (!ept->cache) {
    3242:	00b3      	lsls	r3, r6, #2
    3244:	199b      	adds	r3, r3, r6
    3246:	009a      	lsls	r2, r3, #2
    3248:	4b4a      	ldr	r3, [pc, #296]	; (3374 <_usb_d_dev_ep_trans+0x1b0>)
    324a:	189b      	adds	r3, r3, r2
    324c:	6a1b      	ldr	r3, [r3, #32]
    324e:	2b00      	cmp	r3, #0
    3250:	d100      	bne.n	3254 <_usb_d_dev_ep_trans+0x90>
    3252:	e089      	b.n	3368 <_usb_d_dev_ep_trans+0x1a4>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
    3254:	2301      	movs	r3, #1
    3256:	9301      	str	r3, [sp, #4]
	}
	if (!dir && size_n_aligned) {
    3258:	2d00      	cmp	r5, #0
    325a:	db0a      	blt.n	3272 <_usb_d_dev_ep_trans+0xae>
    325c:	2f00      	cmp	r7, #0
    325e:	d008      	beq.n	3272 <_usb_d_dev_ep_trans+0xae>
		if (!ept->cache) {
    3260:	00b3      	lsls	r3, r6, #2
    3262:	199b      	adds	r3, r3, r6
    3264:	009a      	lsls	r2, r3, #2
    3266:	4b43      	ldr	r3, [pc, #268]	; (3374 <_usb_d_dev_ep_trans+0x1b0>)
    3268:	189b      	adds	r3, r3, r2
    326a:	6a1b      	ldr	r3, [r3, #32]
    326c:	2b00      	cmp	r3, #0
    326e:	d100      	bne.n	3272 <_usb_d_dev_ep_trans+0xae>
    3270:	e07d      	b.n	336e <_usb_d_dev_ep_trans+0x1aa>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    3272:	00b2      	lsls	r2, r6, #2
    3274:	1992      	adds	r2, r2, r6
    3276:	0091      	lsls	r1, r2, #2
    3278:	4b3e      	ldr	r3, [pc, #248]	; (3374 <_usb_d_dev_ep_trans+0x1b0>)
    327a:	185b      	adds	r3, r3, r1
    327c:	3320      	adds	r3, #32
    327e:	79db      	ldrb	r3, [r3, #7]
    3280:	071b      	lsls	r3, r3, #28
    3282:	d50f      	bpl.n	32a4 <_usb_d_dev_ep_trans+0xe0>
		return USB_HALTED;
    3284:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    3286:	b005      	add	sp, #20
    3288:	bc3c      	pop	{r2, r3, r4, r5}
    328a:	4690      	mov	r8, r2
    328c:	4699      	mov	r9, r3
    328e:	46a2      	mov	sl, r4
    3290:	46ab      	mov	fp, r5
    3292:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    3294:	0017      	movs	r7, r2
    3296:	e7bc      	b.n	3212 <_usb_d_dev_ep_trans+0x4e>
	bool use_cache = false;
    3298:	2300      	movs	r3, #0
    329a:	9301      	str	r3, [sp, #4]
    329c:	e7dc      	b.n	3258 <_usb_d_dev_ep_trans+0x94>
    329e:	2300      	movs	r3, #0
    32a0:	9301      	str	r3, [sp, #4]
    32a2:	e7d9      	b.n	3258 <_usb_d_dev_ep_trans+0x94>
	atomic_enter_critical(&flags);
    32a4:	a803      	add	r0, sp, #12
    32a6:	4b37      	ldr	r3, [pc, #220]	; (3384 <_usb_d_dev_ep_trans+0x1c0>)
    32a8:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    32aa:	00b2      	lsls	r2, r6, #2
    32ac:	1992      	adds	r2, r2, r6
    32ae:	0091      	lsls	r1, r2, #2
    32b0:	4b30      	ldr	r3, [pc, #192]	; (3374 <_usb_d_dev_ep_trans+0x1b0>)
    32b2:	185b      	adds	r3, r3, r1
    32b4:	3320      	adds	r3, #32
    32b6:	79db      	ldrb	r3, [r3, #7]
    32b8:	065b      	lsls	r3, r3, #25
    32ba:	d430      	bmi.n	331e <_usb_d_dev_ep_trans+0x15a>
	ept->flags.bits.is_busy = 1;
    32bc:	00b3      	lsls	r3, r6, #2
    32be:	199b      	adds	r3, r3, r6
    32c0:	009a      	lsls	r2, r3, #2
    32c2:	4b2c      	ldr	r3, [pc, #176]	; (3374 <_usb_d_dev_ep_trans+0x1b0>)
    32c4:	469b      	mov	fp, r3
    32c6:	4493      	add	fp, r2
    32c8:	2320      	movs	r3, #32
    32ca:	445b      	add	r3, fp
    32cc:	469a      	mov	sl, r3
    32ce:	79db      	ldrb	r3, [r3, #7]
    32d0:	2240      	movs	r2, #64	; 0x40
    32d2:	4313      	orrs	r3, r2
    32d4:	4652      	mov	r2, sl
    32d6:	71d3      	strb	r3, [r2, #7]
	atomic_leave_critical(&flags);
    32d8:	a803      	add	r0, sp, #12
    32da:	4b2b      	ldr	r3, [pc, #172]	; (3388 <_usb_d_dev_ep_trans+0x1c4>)
    32dc:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    32de:	465b      	mov	r3, fp
    32e0:	4642      	mov	r2, r8
    32e2:	6812      	ldr	r2, [r2, #0]
    32e4:	615a      	str	r2, [r3, #20]
	ept->trans_size  = trans->size;
    32e6:	4642      	mov	r2, r8
    32e8:	6852      	ldr	r2, [r2, #4]
    32ea:	619a      	str	r2, [r3, #24]
	ept->trans_count = 0;
    32ec:	2300      	movs	r3, #0
    32ee:	465a      	mov	r2, fp
    32f0:	61d3      	str	r3, [r2, #28]
	ept->flags.bits.dir       = dir;
    32f2:	464b      	mov	r3, r9
    32f4:	01db      	lsls	r3, r3, #7
    32f6:	4652      	mov	r2, sl
    32f8:	79d2      	ldrb	r2, [r2, #7]
    32fa:	217f      	movs	r1, #127	; 0x7f
    32fc:	4011      	ands	r1, r2
	ept->flags.bits.use_cache = use_cache;
    32fe:	9a01      	ldr	r2, [sp, #4]
    3300:	0152      	lsls	r2, r2, #5
    3302:	430b      	orrs	r3, r1
    3304:	2120      	movs	r1, #32
    3306:	438b      	bics	r3, r1
    3308:	431a      	orrs	r2, r3
    330a:	4653      	mov	r3, sl
    330c:	71da      	strb	r2, [r3, #7]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    330e:	4643      	mov	r3, r8
    3310:	7a5b      	ldrb	r3, [r3, #9]
    3312:	2b00      	cmp	r3, #0
    3314:	d008      	beq.n	3328 <_usb_d_dev_ep_trans+0x164>
    3316:	2f00      	cmp	r7, #0
    3318:	d01b      	beq.n	3352 <_usb_d_dev_ep_trans+0x18e>
    331a:	2200      	movs	r2, #0
    331c:	e005      	b.n	332a <_usb_d_dev_ep_trans+0x166>
		atomic_leave_critical(&flags);
    331e:	a803      	add	r0, sp, #12
    3320:	4b19      	ldr	r3, [pc, #100]	; (3388 <_usb_d_dev_ep_trans+0x1c4>)
    3322:	4798      	blx	r3
		return USB_BUSY;
    3324:	2001      	movs	r0, #1
    3326:	e7ae      	b.n	3286 <_usb_d_dev_ep_trans+0xc2>
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    3328:	2200      	movs	r2, #0
    332a:	00b3      	lsls	r3, r6, #2
    332c:	199e      	adds	r6, r3, r6
    332e:	00b1      	lsls	r1, r6, #2
    3330:	4b10      	ldr	r3, [pc, #64]	; (3374 <_usb_d_dev_ep_trans+0x1b0>)
    3332:	185b      	adds	r3, r3, r1
    3334:	3320      	adds	r3, #32
    3336:	0111      	lsls	r1, r2, #4
    3338:	79da      	ldrb	r2, [r3, #7]
    333a:	2010      	movs	r0, #16
    333c:	4382      	bics	r2, r0
    333e:	430a      	orrs	r2, r1
    3340:	71da      	strb	r2, [r3, #7]
	if (dir) {
    3342:	2d00      	cmp	r5, #0
    3344:	db07      	blt.n	3356 <_usb_d_dev_ep_trans+0x192>
		_usb_d_dev_out_next(ept, false);
    3346:	2100      	movs	r1, #0
    3348:	0020      	movs	r0, r4
    334a:	4b10      	ldr	r3, [pc, #64]	; (338c <_usb_d_dev_ep_trans+0x1c8>)
    334c:	4798      	blx	r3
	return ERR_NONE;
    334e:	2000      	movs	r0, #0
    3350:	e799      	b.n	3286 <_usb_d_dev_ep_trans+0xc2>
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    3352:	2201      	movs	r2, #1
    3354:	e7e9      	b.n	332a <_usb_d_dev_ep_trans+0x166>
		_usb_d_dev_in_next(ept, false);
    3356:	2100      	movs	r1, #0
    3358:	0020      	movs	r0, r4
    335a:	4b0d      	ldr	r3, [pc, #52]	; (3390 <_usb_d_dev_ep_trans+0x1cc>)
    335c:	4798      	blx	r3
	return ERR_NONE;
    335e:	2000      	movs	r0, #0
    3360:	e791      	b.n	3286 <_usb_d_dev_ep_trans+0xc2>
		return -USB_ERR_PARAM;
    3362:	2012      	movs	r0, #18
    3364:	4240      	negs	r0, r0
    3366:	e78e      	b.n	3286 <_usb_d_dev_ep_trans+0xc2>
			return -USB_ERR_FUNC;
    3368:	2013      	movs	r0, #19
    336a:	4240      	negs	r0, r0
    336c:	e78b      	b.n	3286 <_usb_d_dev_ep_trans+0xc2>
			return -USB_ERR_PARAM;
    336e:	2012      	movs	r0, #18
    3370:	4240      	negs	r0, r0
    3372:	e788      	b.n	3286 <_usb_d_dev_ep_trans+0xc2>
    3374:	200002b0 	.word	0x200002b0
    3378:	000003ff 	.word	0x000003ff
    337c:	1fffffff 	.word	0x1fffffff
    3380:	20007fff 	.word	0x20007fff
    3384:	0000090d 	.word	0x0000090d
    3388:	0000091b 	.word	0x0000091b
    338c:	0000259d 	.word	0x0000259d
    3390:	0000240d 	.word	0x0000240d

00003394 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    3394:	2900      	cmp	r1, #0
    3396:	d006      	beq.n	33a6 <_usb_d_dev_register_callback+0x12>
	if (type == USB_D_CB_EVENT) {
    3398:	2801      	cmp	r0, #1
    339a:	d006      	beq.n	33aa <_usb_d_dev_register_callback+0x16>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    339c:	2800      	cmp	r0, #0
    339e:	d101      	bne.n	33a4 <_usb_d_dev_register_callback+0x10>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    33a0:	4b03      	ldr	r3, [pc, #12]	; (33b0 <_usb_d_dev_register_callback+0x1c>)
    33a2:	6019      	str	r1, [r3, #0]
	}
}
    33a4:	4770      	bx	lr
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    33a6:	4903      	ldr	r1, [pc, #12]	; (33b4 <_usb_d_dev_register_callback+0x20>)
    33a8:	e7f6      	b.n	3398 <_usb_d_dev_register_callback+0x4>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    33aa:	4b01      	ldr	r3, [pc, #4]	; (33b0 <_usb_d_dev_register_callback+0x1c>)
    33ac:	6059      	str	r1, [r3, #4]
    33ae:	e7f9      	b.n	33a4 <_usb_d_dev_register_callback+0x10>
    33b0:	200002b0 	.word	0x200002b0
    33b4:	000020e9 	.word	0x000020e9

000033b8 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    33b8:	2900      	cmp	r1, #0
    33ba:	d008      	beq.n	33ce <_usb_d_dev_register_ep_callback+0x16>
	if (type == USB_D_DEV_EP_CB_SETUP) {
    33bc:	2800      	cmp	r0, #0
    33be:	d008      	beq.n	33d2 <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    33c0:	2801      	cmp	r0, #1
    33c2:	d009      	beq.n	33d8 <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    33c4:	2802      	cmp	r0, #2
    33c6:	d106      	bne.n	33d6 <_usb_d_dev_register_ep_callback+0x1e>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    33c8:	4b05      	ldr	r3, [pc, #20]	; (33e0 <_usb_d_dev_register_ep_callback+0x28>)
    33ca:	6119      	str	r1, [r3, #16]
	}
}
    33cc:	e003      	b.n	33d6 <_usb_d_dev_register_ep_callback+0x1e>
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    33ce:	4905      	ldr	r1, [pc, #20]	; (33e4 <_usb_d_dev_register_ep_callback+0x2c>)
    33d0:	e7f4      	b.n	33bc <_usb_d_dev_register_ep_callback+0x4>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    33d2:	4b03      	ldr	r3, [pc, #12]	; (33e0 <_usb_d_dev_register_ep_callback+0x28>)
    33d4:	6099      	str	r1, [r3, #8]
}
    33d6:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    33d8:	4b01      	ldr	r3, [pc, #4]	; (33e0 <_usb_d_dev_register_ep_callback+0x28>)
    33da:	60d9      	str	r1, [r3, #12]
    33dc:	e7fb      	b.n	33d6 <_usb_d_dev_register_ep_callback+0x1e>
    33de:	46c0      	nop			; (mov r8, r8)
    33e0:	200002b0 	.word	0x200002b0
    33e4:	000020e9 	.word	0x000020e9

000033e8 <USB_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_Handler(void)
{
    33e8:	b510      	push	{r4, lr}

	_usb_d_dev_handler();
    33ea:	4b01      	ldr	r3, [pc, #4]	; (33f0 <USB_Handler+0x8>)
    33ec:	4798      	blx	r3
}
    33ee:	bd10      	pop	{r4, pc}
    33f0:	000027a1 	.word	0x000027a1

000033f4 <main>:
#include <atmel_start.h>

int main(void)
{
    33f4:	b510      	push	{r4, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    33f6:	4b01      	ldr	r3, [pc, #4]	; (33fc <main+0x8>)
    33f8:	4798      	blx	r3
    33fa:	e7fe      	b.n	33fa <main+0x6>
    33fc:	00000115 	.word	0x00000115

00003400 <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    3400:	b510      	push	{r4, lr}
	uint16_t len = req->wLength;
    3402:	798b      	ldrb	r3, [r1, #6]
    3404:	79cc      	ldrb	r4, [r1, #7]
    3406:	0224      	lsls	r4, r4, #8
    3408:	431c      	orrs	r4, r3

	if (USB_DATA_STAGE == stage) {
    340a:	2a01      	cmp	r2, #1
    340c:	d00a      	beq.n	3424 <cdcdf_acm_get_req+0x24>
		return ERR_NONE;
	}

	switch (req->bRequest) {
    340e:	784b      	ldrb	r3, [r1, #1]
    3410:	2b21      	cmp	r3, #33	; 0x21
    3412:	d109      	bne.n	3428 <cdcdf_acm_get_req+0x28>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    3414:	2c07      	cmp	r4, #7
    3416:	d10a      	bne.n	342e <cdcdf_acm_get_req+0x2e>
			return ERR_INVALID_DATA;
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    3418:	2300      	movs	r3, #0
    341a:	0022      	movs	r2, r4
    341c:	4905      	ldr	r1, [pc, #20]	; (3434 <cdcdf_acm_get_req+0x34>)
    341e:	4c06      	ldr	r4, [pc, #24]	; (3438 <cdcdf_acm_get_req+0x38>)
    3420:	47a0      	blx	r4
	default:
		return ERR_INVALID_ARG;
	}
}
    3422:	bd10      	pop	{r4, pc}
		return ERR_NONE;
    3424:	2000      	movs	r0, #0
    3426:	e7fc      	b.n	3422 <cdcdf_acm_get_req+0x22>
		return ERR_INVALID_ARG;
    3428:	200d      	movs	r0, #13
    342a:	4240      	negs	r0, r0
    342c:	e7f9      	b.n	3422 <cdcdf_acm_get_req+0x22>
			return ERR_INVALID_DATA;
    342e:	2001      	movs	r0, #1
    3430:	4240      	negs	r0, r0
    3432:	e7f6      	b.n	3422 <cdcdf_acm_get_req+0x22>
    3434:	20000618 	.word	0x20000618
    3438:	00003979 	.word	0x00003979

0000343c <cdcdf_acm_set_req>:
{
    343c:	b5f0      	push	{r4, r5, r6, r7, lr}
    343e:	b083      	sub	sp, #12
    3440:	0005      	movs	r5, r0
    3442:	000f      	movs	r7, r1
    3444:	0014      	movs	r4, r2
	uint16_t                   len      = req->wLength;
    3446:	798e      	ldrb	r6, [r1, #6]
    3448:	79cb      	ldrb	r3, [r1, #7]
    344a:	021b      	lsls	r3, r3, #8
    344c:	431e      	orrs	r6, r3
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    344e:	4b23      	ldr	r3, [pc, #140]	; (34dc <cdcdf_acm_set_req+0xa0>)
    3450:	4798      	blx	r3
	switch (req->bRequest) {
    3452:	787b      	ldrb	r3, [r7, #1]
    3454:	2b20      	cmp	r3, #32
    3456:	d005      	beq.n	3464 <cdcdf_acm_set_req+0x28>
    3458:	2b22      	cmp	r3, #34	; 0x22
    345a:	d026      	beq.n	34aa <cdcdf_acm_set_req+0x6e>
		return ERR_INVALID_ARG;
    345c:	200d      	movs	r0, #13
    345e:	4240      	negs	r0, r0
}
    3460:	b003      	add	sp, #12
    3462:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (sizeof(struct usb_cdc_line_coding) != len) {
    3464:	2e07      	cmp	r6, #7
    3466:	d131      	bne.n	34cc <cdcdf_acm_set_req+0x90>
		if (USB_SETUP_STAGE == stage) {
    3468:	2c00      	cmp	r4, #0
    346a:	d017      	beq.n	349c <cdcdf_acm_set_req+0x60>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    346c:	2207      	movs	r2, #7
    346e:	0001      	movs	r1, r0
    3470:	4668      	mov	r0, sp
    3472:	4b1b      	ldr	r3, [pc, #108]	; (34e0 <cdcdf_acm_set_req+0xa4>)
    3474:	4798      	blx	r3
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    3476:	4b1b      	ldr	r3, [pc, #108]	; (34e4 <cdcdf_acm_set_req+0xa8>)
    3478:	689b      	ldr	r3, [r3, #8]
    347a:	2b00      	cmp	r3, #0
    347c:	d003      	beq.n	3486 <cdcdf_acm_set_req+0x4a>
    347e:	4668      	mov	r0, sp
    3480:	4798      	blx	r3
    3482:	2800      	cmp	r0, #0
    3484:	d025      	beq.n	34d2 <cdcdf_acm_set_req+0x96>
				usbd_cdc_line_coding = line_coding_tmp;
    3486:	4b17      	ldr	r3, [pc, #92]	; (34e4 <cdcdf_acm_set_req+0xa8>)
    3488:	9a00      	ldr	r2, [sp, #0]
    348a:	601a      	str	r2, [r3, #0]
    348c:	466a      	mov	r2, sp
    348e:	8892      	ldrh	r2, [r2, #4]
    3490:	809a      	strh	r2, [r3, #4]
    3492:	466a      	mov	r2, sp
    3494:	7992      	ldrb	r2, [r2, #6]
    3496:	719a      	strb	r2, [r3, #6]
			return ERR_NONE;
    3498:	2000      	movs	r0, #0
    349a:	e7e1      	b.n	3460 <cdcdf_acm_set_req+0x24>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    349c:	2300      	movs	r3, #0
    349e:	0032      	movs	r2, r6
    34a0:	0001      	movs	r1, r0
    34a2:	0028      	movs	r0, r5
    34a4:	4c10      	ldr	r4, [pc, #64]	; (34e8 <cdcdf_acm_set_req+0xac>)
    34a6:	47a0      	blx	r4
    34a8:	e7da      	b.n	3460 <cdcdf_acm_set_req+0x24>
		usbdc_xfer(0, NULL, 0, 0);
    34aa:	2300      	movs	r3, #0
    34ac:	2200      	movs	r2, #0
    34ae:	2100      	movs	r1, #0
    34b0:	2000      	movs	r0, #0
    34b2:	4c0d      	ldr	r4, [pc, #52]	; (34e8 <cdcdf_acm_set_req+0xac>)
    34b4:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    34b6:	4b0b      	ldr	r3, [pc, #44]	; (34e4 <cdcdf_acm_set_req+0xa8>)
    34b8:	68db      	ldr	r3, [r3, #12]
    34ba:	2b00      	cmp	r3, #0
    34bc:	d00b      	beq.n	34d6 <cdcdf_acm_set_req+0x9a>
			cdcdf_acm_notify_state(req->wValue);
    34be:	78ba      	ldrb	r2, [r7, #2]
    34c0:	78f8      	ldrb	r0, [r7, #3]
    34c2:	0200      	lsls	r0, r0, #8
    34c4:	4310      	orrs	r0, r2
    34c6:	4798      	blx	r3
		return ERR_NONE;
    34c8:	2000      	movs	r0, #0
    34ca:	e7c9      	b.n	3460 <cdcdf_acm_set_req+0x24>
			return ERR_INVALID_DATA;
    34cc:	2001      	movs	r0, #1
    34ce:	4240      	negs	r0, r0
    34d0:	e7c6      	b.n	3460 <cdcdf_acm_set_req+0x24>
			return ERR_NONE;
    34d2:	2000      	movs	r0, #0
    34d4:	e7c4      	b.n	3460 <cdcdf_acm_set_req+0x24>
		return ERR_NONE;
    34d6:	2000      	movs	r0, #0
    34d8:	e7c2      	b.n	3460 <cdcdf_acm_set_req+0x24>
    34da:	46c0      	nop			; (mov r8, r8)
    34dc:	00003f05 	.word	0x00003f05
    34e0:	000040bd 	.word	0x000040bd
    34e4:	20000618 	.word	0x20000618
    34e8:	00003979 	.word	0x00003979

000034ec <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    34ec:	b570      	push	{r4, r5, r6, lr}
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    34ee:	780c      	ldrb	r4, [r1, #0]
    34f0:	0965      	lsrs	r5, r4, #5
    34f2:	2303      	movs	r3, #3
    34f4:	402b      	ands	r3, r5
    34f6:	2b01      	cmp	r3, #1
    34f8:	d114      	bne.n	3524 <cdcdf_acm_req+0x38>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    34fa:	790d      	ldrb	r5, [r1, #4]
    34fc:	794b      	ldrb	r3, [r1, #5]
    34fe:	021b      	lsls	r3, r3, #8
    3500:	432b      	orrs	r3, r5
    3502:	4d0b      	ldr	r5, [pc, #44]	; (3530 <cdcdf_acm_req+0x44>)
    3504:	7c2d      	ldrb	r5, [r5, #16]
    3506:	42ab      	cmp	r3, r5
    3508:	d003      	beq.n	3512 <cdcdf_acm_req+0x26>
    350a:	4d09      	ldr	r5, [pc, #36]	; (3530 <cdcdf_acm_req+0x44>)
    350c:	7c6d      	ldrb	r5, [r5, #17]
    350e:	42ab      	cmp	r3, r5
    3510:	d10b      	bne.n	352a <cdcdf_acm_req+0x3e>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    3512:	b264      	sxtb	r4, r4
    3514:	2c00      	cmp	r4, #0
    3516:	db02      	blt.n	351e <cdcdf_acm_req+0x32>
			return cdcdf_acm_get_req(ep, req, stage);
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    3518:	4b06      	ldr	r3, [pc, #24]	; (3534 <cdcdf_acm_req+0x48>)
    351a:	4798      	blx	r3
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    351c:	bd70      	pop	{r4, r5, r6, pc}
			return cdcdf_acm_get_req(ep, req, stage);
    351e:	4b06      	ldr	r3, [pc, #24]	; (3538 <cdcdf_acm_req+0x4c>)
    3520:	4798      	blx	r3
    3522:	e7fb      	b.n	351c <cdcdf_acm_req+0x30>
		return ERR_NOT_FOUND;
    3524:	200a      	movs	r0, #10
    3526:	4240      	negs	r0, r0
    3528:	e7f8      	b.n	351c <cdcdf_acm_req+0x30>
		return ERR_NOT_FOUND;
    352a:	200a      	movs	r0, #10
    352c:	4240      	negs	r0, r0
    352e:	e7f5      	b.n	351c <cdcdf_acm_req+0x30>
    3530:	20000618 	.word	0x20000618
    3534:	0000343d 	.word	0x0000343d
    3538:	00003401 	.word	0x00003401

0000353c <cdcdf_acm_enable>:
{
    353c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    353e:	46ce      	mov	lr, r9
    3540:	4647      	mov	r7, r8
    3542:	b580      	push	{r7, lr}
    3544:	000e      	movs	r6, r1
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    3546:	6887      	ldr	r7, [r0, #8]
	ifc = desc->sod;
    3548:	6808      	ldr	r0, [r1, #0]
	for (i = 0; i < 2; i++) {
    354a:	2300      	movs	r3, #0
    354c:	4698      	mov	r8, r3
    354e:	4643      	mov	r3, r8
    3550:	2b01      	cmp	r3, #1
    3552:	d845      	bhi.n	35e0 <cdcdf_acm_enable+0xa4>
		if (NULL == ifc) {
    3554:	2800      	cmp	r0, #0
    3556:	d04b      	beq.n	35f0 <cdcdf_acm_enable+0xb4>
		ifc_desc.bInterfaceNumber = ifc[2];
    3558:	7883      	ldrb	r3, [r0, #2]
		ifc_desc.bInterfaceClass  = ifc[5];
    355a:	7942      	ldrb	r2, [r0, #5]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    355c:	2a02      	cmp	r2, #2
    355e:	d001      	beq.n	3564 <cdcdf_acm_enable+0x28>
    3560:	2a0a      	cmp	r2, #10
    3562:	d148      	bne.n	35f6 <cdcdf_acm_enable+0xba>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    3564:	46c1      	mov	r9, r8
    3566:	4642      	mov	r2, r8
    3568:	5cba      	ldrb	r2, [r7, r2]
    356a:	4293      	cmp	r3, r2
    356c:	d046      	beq.n	35fc <cdcdf_acm_enable+0xc0>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    356e:	2aff      	cmp	r2, #255	; 0xff
    3570:	d147      	bne.n	3602 <cdcdf_acm_enable+0xc6>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    3572:	4642      	mov	r2, r8
    3574:	54bb      	strb	r3, [r7, r2]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    3576:	2205      	movs	r2, #5
    3578:	6871      	ldr	r1, [r6, #4]
    357a:	4b25      	ldr	r3, [pc, #148]	; (3610 <cdcdf_acm_enable+0xd4>)
    357c:	4798      	blx	r3
    357e:	0004      	movs	r4, r0
		while (NULL != ep) {
    3580:	e00c      	b.n	359c <cdcdf_acm_enable+0x60>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    3582:	464b      	mov	r3, r9
    3584:	18fb      	adds	r3, r7, r3
    3586:	709d      	strb	r5, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    3588:	0028      	movs	r0, r5
    358a:	4b22      	ldr	r3, [pc, #136]	; (3614 <cdcdf_acm_enable+0xd8>)
    358c:	4798      	blx	r3
			desc->sod = ep;
    358e:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
	return desc[0];
    3590:	7820      	ldrb	r0, [r4, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    3592:	1820      	adds	r0, r4, r0
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    3594:	6871      	ldr	r1, [r6, #4]
    3596:	4b20      	ldr	r3, [pc, #128]	; (3618 <cdcdf_acm_enable+0xdc>)
    3598:	4798      	blx	r3
    359a:	0004      	movs	r4, r0
		while (NULL != ep) {
    359c:	2c00      	cmp	r4, #0
    359e:	d013      	beq.n	35c8 <cdcdf_acm_enable+0x8c>
			ep_desc.bEndpointAddress = ep[2];
    35a0:	78a5      	ldrb	r5, [r4, #2]
			ep_desc.bmAttributes     = ep[3];
    35a2:	78e1      	ldrb	r1, [r4, #3]
	return (ptr[0] + (ptr[1] << 8));
    35a4:	7922      	ldrb	r2, [r4, #4]
    35a6:	7963      	ldrb	r3, [r4, #5]
    35a8:	021b      	lsls	r3, r3, #8
    35aa:	18d2      	adds	r2, r2, r3
    35ac:	b292      	uxth	r2, r2
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    35ae:	0028      	movs	r0, r5
    35b0:	4b1a      	ldr	r3, [pc, #104]	; (361c <cdcdf_acm_enable+0xe0>)
    35b2:	4798      	blx	r3
    35b4:	2800      	cmp	r0, #0
    35b6:	d127      	bne.n	3608 <cdcdf_acm_enable+0xcc>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    35b8:	b26b      	sxtb	r3, r5
    35ba:	2b00      	cmp	r3, #0
    35bc:	dbe1      	blt.n	3582 <cdcdf_acm_enable+0x46>
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    35be:	713d      	strb	r5, [r7, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    35c0:	0028      	movs	r0, r5
    35c2:	4b14      	ldr	r3, [pc, #80]	; (3614 <cdcdf_acm_enable+0xd8>)
    35c4:	4798      	blx	r3
    35c6:	e7e2      	b.n	358e <cdcdf_acm_enable+0x52>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    35c8:	6830      	ldr	r0, [r6, #0]
	return desc[0];
    35ca:	7803      	ldrb	r3, [r0, #0]
	return (desc + usb_desc_len(desc));
    35cc:	18c0      	adds	r0, r0, r3
    35ce:	2204      	movs	r2, #4
    35d0:	6871      	ldr	r1, [r6, #4]
    35d2:	4b0f      	ldr	r3, [pc, #60]	; (3610 <cdcdf_acm_enable+0xd4>)
    35d4:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    35d6:	4643      	mov	r3, r8
    35d8:	3301      	adds	r3, #1
    35da:	b2db      	uxtb	r3, r3
    35dc:	4698      	mov	r8, r3
    35de:	e7b6      	b.n	354e <cdcdf_acm_enable+0x12>
	_cdcdf_acm_funcd.enabled = true;
    35e0:	2201      	movs	r2, #1
    35e2:	4b0f      	ldr	r3, [pc, #60]	; (3620 <cdcdf_acm_enable+0xe4>)
    35e4:	755a      	strb	r2, [r3, #21]
	return ERR_NONE;
    35e6:	2000      	movs	r0, #0
}
    35e8:	bc0c      	pop	{r2, r3}
    35ea:	4690      	mov	r8, r2
    35ec:	4699      	mov	r9, r3
    35ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return ERR_NOT_FOUND;
    35f0:	200a      	movs	r0, #10
    35f2:	4240      	negs	r0, r0
    35f4:	e7f8      	b.n	35e8 <cdcdf_acm_enable+0xac>
			return ERR_NOT_FOUND;
    35f6:	200a      	movs	r0, #10
    35f8:	4240      	negs	r0, r0
    35fa:	e7f5      	b.n	35e8 <cdcdf_acm_enable+0xac>
				return ERR_ALREADY_INITIALIZED;
    35fc:	2012      	movs	r0, #18
    35fe:	4240      	negs	r0, r0
    3600:	e7f2      	b.n	35e8 <cdcdf_acm_enable+0xac>
				return ERR_NO_RESOURCE;
    3602:	201c      	movs	r0, #28
    3604:	4240      	negs	r0, r0
    3606:	e7ef      	b.n	35e8 <cdcdf_acm_enable+0xac>
				return ERR_NOT_INITIALIZED;
    3608:	2014      	movs	r0, #20
    360a:	4240      	negs	r0, r0
    360c:	e7ec      	b.n	35e8 <cdcdf_acm_enable+0xac>
    360e:	46c0      	nop			; (mov r8, r8)
    3610:	00003f21 	.word	0x00003f21
    3614:	000011a1 	.word	0x000011a1
    3618:	00003f3f 	.word	0x00003f3f
    361c:	0000110d 	.word	0x0000110d
    3620:	20000618 	.word	0x20000618

00003624 <cdcdf_acm_disable>:
{
    3624:	b570      	push	{r4, r5, r6, lr}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    3626:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    3628:	2900      	cmp	r1, #0
    362a:	d01a      	beq.n	3662 <cdcdf_acm_disable+0x3e>
		ifc_desc.bInterfaceClass = desc->sod[5];
    362c:	680b      	ldr	r3, [r1, #0]
    362e:	795b      	ldrb	r3, [r3, #5]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    3630:	2b02      	cmp	r3, #2
    3632:	d018      	beq.n	3666 <cdcdf_acm_disable+0x42>
    3634:	2b0a      	cmp	r3, #10
    3636:	d124      	bne.n	3682 <cdcdf_acm_disable+0x5e>
    3638:	2400      	movs	r4, #0
    363a:	e001      	b.n	3640 <cdcdf_acm_disable+0x1c>
	for (i = 0; i < 2; i++) {
    363c:	3401      	adds	r4, #1
    363e:	b2e4      	uxtb	r4, r4
    3640:	2c01      	cmp	r4, #1
    3642:	d812      	bhi.n	366a <cdcdf_acm_disable+0x46>
		if (func_data->func_iface[i] == 0xFF) {
    3644:	5d2b      	ldrb	r3, [r5, r4]
    3646:	2bff      	cmp	r3, #255	; 0xff
    3648:	d0f8      	beq.n	363c <cdcdf_acm_disable+0x18>
			func_data->func_iface[i] = 0xFF;
    364a:	23ff      	movs	r3, #255	; 0xff
    364c:	552b      	strb	r3, [r5, r4]
			if (func_data->func_ep_in[i] != 0xFF) {
    364e:	192b      	adds	r3, r5, r4
    3650:	7898      	ldrb	r0, [r3, #2]
    3652:	28ff      	cmp	r0, #255	; 0xff
    3654:	d0f2      	beq.n	363c <cdcdf_acm_disable+0x18>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    3656:	4b0c      	ldr	r3, [pc, #48]	; (3688 <cdcdf_acm_disable+0x64>)
    3658:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    365a:	192e      	adds	r6, r5, r4
    365c:	22ff      	movs	r2, #255	; 0xff
    365e:	70b2      	strb	r2, [r6, #2]
    3660:	e7ec      	b.n	363c <cdcdf_acm_disable+0x18>
    3662:	2400      	movs	r4, #0
    3664:	e7ec      	b.n	3640 <cdcdf_acm_disable+0x1c>
    3666:	2400      	movs	r4, #0
    3668:	e7ea      	b.n	3640 <cdcdf_acm_disable+0x1c>
	if (func_data->func_ep_out != 0xFF) {
    366a:	7928      	ldrb	r0, [r5, #4]
    366c:	28ff      	cmp	r0, #255	; 0xff
    366e:	d003      	beq.n	3678 <cdcdf_acm_disable+0x54>
		usb_d_ep_deinit(func_data->func_ep_out);
    3670:	4b05      	ldr	r3, [pc, #20]	; (3688 <cdcdf_acm_disable+0x64>)
    3672:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    3674:	23ff      	movs	r3, #255	; 0xff
    3676:	712b      	strb	r3, [r5, #4]
	_cdcdf_acm_funcd.enabled = false;
    3678:	2200      	movs	r2, #0
    367a:	4b04      	ldr	r3, [pc, #16]	; (368c <cdcdf_acm_disable+0x68>)
    367c:	755a      	strb	r2, [r3, #21]
	return ERR_NONE;
    367e:	2000      	movs	r0, #0
}
    3680:	bd70      	pop	{r4, r5, r6, pc}
			return ERR_NOT_FOUND;
    3682:	200a      	movs	r0, #10
    3684:	4240      	negs	r0, r0
    3686:	e7fb      	b.n	3680 <cdcdf_acm_disable+0x5c>
    3688:	00001175 	.word	0x00001175
    368c:	20000618 	.word	0x20000618

00003690 <cdcdf_acm_ctrl>:
{
    3690:	b510      	push	{r4, lr}
	switch (ctrl) {
    3692:	2901      	cmp	r1, #1
    3694:	d00a      	beq.n	36ac <cdcdf_acm_ctrl+0x1c>
    3696:	2900      	cmp	r1, #0
    3698:	d004      	beq.n	36a4 <cdcdf_acm_ctrl+0x14>
    369a:	2902      	cmp	r1, #2
    369c:	d10a      	bne.n	36b4 <cdcdf_acm_ctrl+0x24>
		return ERR_UNSUPPORTED_OP;
    369e:	201b      	movs	r0, #27
    36a0:	4240      	negs	r0, r0
}
    36a2:	bd10      	pop	{r4, pc}
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    36a4:	0011      	movs	r1, r2
    36a6:	4b05      	ldr	r3, [pc, #20]	; (36bc <cdcdf_acm_ctrl+0x2c>)
    36a8:	4798      	blx	r3
    36aa:	e7fa      	b.n	36a2 <cdcdf_acm_ctrl+0x12>
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    36ac:	0011      	movs	r1, r2
    36ae:	4b04      	ldr	r3, [pc, #16]	; (36c0 <cdcdf_acm_ctrl+0x30>)
    36b0:	4798      	blx	r3
    36b2:	e7f6      	b.n	36a2 <cdcdf_acm_ctrl+0x12>
		return ERR_INVALID_ARG;
    36b4:	200d      	movs	r0, #13
    36b6:	4240      	negs	r0, r0
    36b8:	e7f3      	b.n	36a2 <cdcdf_acm_ctrl+0x12>
    36ba:	46c0      	nop			; (mov r8, r8)
    36bc:	0000353d 	.word	0x0000353d
    36c0:	00003625 	.word	0x00003625

000036c4 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    36c4:	b510      	push	{r4, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    36c6:	4b0b      	ldr	r3, [pc, #44]	; (36f4 <cdcdf_acm_init+0x30>)
    36c8:	4798      	blx	r3
    36ca:	2801      	cmp	r0, #1
    36cc:	d80e      	bhi.n	36ec <cdcdf_acm_init+0x28>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    36ce:	480a      	ldr	r0, [pc, #40]	; (36f8 <cdcdf_acm_init+0x34>)
    36d0:	4b0a      	ldr	r3, [pc, #40]	; (36fc <cdcdf_acm_init+0x38>)
    36d2:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    36d4:	0003      	movs	r3, r0
    36d6:	3310      	adds	r3, #16
    36d8:	6203      	str	r3, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    36da:	3018      	adds	r0, #24
    36dc:	4b08      	ldr	r3, [pc, #32]	; (3700 <cdcdf_acm_init+0x3c>)
    36de:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    36e0:	4908      	ldr	r1, [pc, #32]	; (3704 <cdcdf_acm_init+0x40>)
    36e2:	2001      	movs	r0, #1
    36e4:	4b08      	ldr	r3, [pc, #32]	; (3708 <cdcdf_acm_init+0x44>)
    36e6:	4798      	blx	r3
	return ERR_NONE;
    36e8:	2000      	movs	r0, #0
}
    36ea:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    36ec:	2011      	movs	r0, #17
    36ee:	4240      	negs	r0, r0
    36f0:	e7fb      	b.n	36ea <cdcdf_acm_init+0x26>
    36f2:	46c0      	nop			; (mov r8, r8)
    36f4:	00003f11 	.word	0x00003f11
    36f8:	20000618 	.word	0x20000618
    36fc:	00003691 	.word	0x00003691
    3700:	00003ea9 	.word	0x00003ea9
    3704:	20000000 	.word	0x20000000
    3708:	00003e11 	.word	0x00003e11

0000370c <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    370c:	b510      	push	{r4, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    370e:	4b06      	ldr	r3, [pc, #24]	; (3728 <usbdc_unconfig+0x1c>)
    3710:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    3712:	e005      	b.n	3720 <usbdc_unconfig+0x14>
		func->ctrl(func, USBDF_DISABLE, NULL);
    3714:	2200      	movs	r2, #0
    3716:	2101      	movs	r1, #1
    3718:	0020      	movs	r0, r4
    371a:	6863      	ldr	r3, [r4, #4]
    371c:	4798      	blx	r3
		func = func->next;
    371e:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    3720:	2c00      	cmp	r4, #0
    3722:	d1f7      	bne.n	3714 <usbdc_unconfig+0x8>
	}
}
    3724:	bd10      	pop	{r4, pc}
    3726:	46c0      	nop			; (mov r8, r8)
    3728:	2000063c 	.word	0x2000063c

0000372c <usbdc_sof_notify>:
	}
}

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    372c:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    372e:	4b06      	ldr	r3, [pc, #24]	; (3748 <usbdc_sof_notify+0x1c>)
    3730:	685c      	ldr	r4, [r3, #4]

	while (sof != NULL) {
    3732:	e000      	b.n	3736 <usbdc_sof_notify+0xa>
		if (NULL != sof->cb) {
			sof->cb();
		}
		sof = sof->next;
    3734:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    3736:	2c00      	cmp	r4, #0
    3738:	d004      	beq.n	3744 <usbdc_sof_notify+0x18>
		if (NULL != sof->cb) {
    373a:	6863      	ldr	r3, [r4, #4]
    373c:	2b00      	cmp	r3, #0
    373e:	d0f9      	beq.n	3734 <usbdc_sof_notify+0x8>
			sof->cb();
    3740:	4798      	blx	r3
    3742:	e7f7      	b.n	3734 <usbdc_sof_notify+0x8>
	}
}
    3744:	bd10      	pop	{r4, pc}
    3746:	46c0      	nop			; (mov r8, r8)
    3748:	2000063c 	.word	0x2000063c

0000374c <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    374c:	b570      	push	{r4, r5, r6, lr}
    374e:	0006      	movs	r6, r0
    3750:	000d      	movs	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    3752:	4b07      	ldr	r3, [pc, #28]	; (3770 <usbdc_change_notify+0x24>)
    3754:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    3756:	e000      	b.n	375a <usbdc_change_notify+0xe>
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
    3758:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    375a:	2c00      	cmp	r4, #0
    375c:	d006      	beq.n	376c <usbdc_change_notify+0x20>
		if (NULL != cg->cb) {
    375e:	6863      	ldr	r3, [r4, #4]
    3760:	2b00      	cmp	r3, #0
    3762:	d0f9      	beq.n	3758 <usbdc_change_notify+0xc>
			cg->cb(change, value);
    3764:	0029      	movs	r1, r5
    3766:	0030      	movs	r0, r6
    3768:	4798      	blx	r3
    376a:	e7f5      	b.n	3758 <usbdc_change_notify+0xc>
	}
}
    376c:	bd70      	pop	{r4, r5, r6, pc}
    376e:	46c0      	nop			; (mov r8, r8)
    3770:	2000063c 	.word	0x2000063c

00003774 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    3774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3776:	0007      	movs	r7, r0
    3778:	000e      	movs	r6, r1
    377a:	0015      	movs	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    377c:	4b0b      	ldr	r3, [pc, #44]	; (37ac <usbdc_request_handler+0x38>)
    377e:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    3780:	e000      	b.n	3784 <usbdc_request_handler+0x10>
				return true;
			} else if (ERR_NOT_FOUND != rc) {
				return -1;
			}
		}
		h = h->next;
    3782:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    3784:	2c00      	cmp	r4, #0
    3786:	d00d      	beq.n	37a4 <usbdc_request_handler+0x30>
		if (NULL != h->cb) {
    3788:	6863      	ldr	r3, [r4, #4]
    378a:	2b00      	cmp	r3, #0
    378c:	d0f9      	beq.n	3782 <usbdc_request_handler+0xe>
			rc = h->cb(ep, req, stage);
    378e:	002a      	movs	r2, r5
    3790:	0031      	movs	r1, r6
    3792:	0038      	movs	r0, r7
    3794:	4798      	blx	r3
			if (0 == rc) {
    3796:	2800      	cmp	r0, #0
    3798:	d006      	beq.n	37a8 <usbdc_request_handler+0x34>
			} else if (ERR_NOT_FOUND != rc) {
    379a:	300a      	adds	r0, #10
    379c:	d0f1      	beq.n	3782 <usbdc_request_handler+0xe>
				return -1;
    379e:	2001      	movs	r0, #1
    37a0:	4240      	negs	r0, r0
    37a2:	e000      	b.n	37a6 <usbdc_request_handler+0x32>
	}
	return false;
    37a4:	2000      	movs	r0, #0
}
    37a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    37a8:	2001      	movs	r0, #1
    37aa:	e7fc      	b.n	37a6 <usbdc_request_handler+0x32>
    37ac:	2000063c 	.word	0x2000063c

000037b0 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    37b0:	b510      	push	{r4, lr}
	usbdc_sof_notify();
    37b2:	4b01      	ldr	r3, [pc, #4]	; (37b8 <usbd_sof_cb+0x8>)
    37b4:	4798      	blx	r3
}
    37b6:	bd10      	pop	{r4, pc}
    37b8:	0000372d 	.word	0x0000372d

000037bc <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    37bc:	b510      	push	{r4, lr}
    37be:	0001      	movs	r1, r0
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    37c0:	2201      	movs	r2, #1
    37c2:	2000      	movs	r0, #0
    37c4:	4b01      	ldr	r3, [pc, #4]	; (37cc <usbdc_ctrl_data_end+0x10>)
    37c6:	4798      	blx	r3
	return false;
}
    37c8:	2000      	movs	r0, #0
    37ca:	bd10      	pop	{r4, pc}
    37cc:	00003775 	.word	0x00003775

000037d0 <usbdc_set_address>:
{
    37d0:	b510      	push	{r4, lr}
	usb_d_set_address(addr);
    37d2:	4b01      	ldr	r3, [pc, #4]	; (37d8 <usbdc_set_address+0x8>)
    37d4:	4798      	blx	r3
}
    37d6:	bd10      	pop	{r4, pc}
    37d8:	00001101 	.word	0x00001101

000037dc <usbdc_ctrl_status_end>:
{
    37dc:	b510      	push	{r4, lr}
    37de:	0004      	movs	r4, r0
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    37e0:	7803      	ldrb	r3, [r0, #0]
    37e2:	2b00      	cmp	r3, #0
    37e4:	d112      	bne.n	380c <usbdc_ctrl_status_end+0x30>
	switch (req->bRequest) {
    37e6:	7843      	ldrb	r3, [r0, #1]
    37e8:	2b05      	cmp	r3, #5
    37ea:	d012      	beq.n	3812 <usbdc_ctrl_status_end+0x36>
    37ec:	2b09      	cmp	r3, #9
    37ee:	d10d      	bne.n	380c <usbdc_ctrl_status_end+0x30>
		usbdc.cfg_value = req->wValue;
    37f0:	7882      	ldrb	r2, [r0, #2]
    37f2:	4b10      	ldr	r3, [pc, #64]	; (3834 <usbdc_ctrl_status_end+0x58>)
    37f4:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    37f6:	7882      	ldrb	r2, [r0, #2]
    37f8:	78c3      	ldrb	r3, [r0, #3]
    37fa:	021b      	lsls	r3, r3, #8
    37fc:	4313      	orrs	r3, r2
    37fe:	d106      	bne.n	380e <usbdc_ctrl_status_end+0x32>
    3800:	2103      	movs	r1, #3
    3802:	4b0c      	ldr	r3, [pc, #48]	; (3834 <usbdc_ctrl_status_end+0x58>)
    3804:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    3806:	2001      	movs	r0, #1
    3808:	4b0b      	ldr	r3, [pc, #44]	; (3838 <usbdc_ctrl_status_end+0x5c>)
    380a:	4798      	blx	r3
}
    380c:	bd10      	pop	{r4, pc}
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    380e:	2104      	movs	r1, #4
    3810:	e7f7      	b.n	3802 <usbdc_ctrl_status_end+0x26>
		usbdc_set_address(req->wValue);
    3812:	7880      	ldrb	r0, [r0, #2]
    3814:	4b09      	ldr	r3, [pc, #36]	; (383c <usbdc_ctrl_status_end+0x60>)
    3816:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    3818:	78a2      	ldrb	r2, [r4, #2]
    381a:	78e3      	ldrb	r3, [r4, #3]
    381c:	021b      	lsls	r3, r3, #8
    381e:	4313      	orrs	r3, r2
    3820:	d006      	beq.n	3830 <usbdc_ctrl_status_end+0x54>
    3822:	2103      	movs	r1, #3
    3824:	4b03      	ldr	r3, [pc, #12]	; (3834 <usbdc_ctrl_status_end+0x58>)
    3826:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    3828:	2001      	movs	r0, #1
    382a:	4b03      	ldr	r3, [pc, #12]	; (3838 <usbdc_ctrl_status_end+0x5c>)
    382c:	4798      	blx	r3
		break;
    382e:	e7ed      	b.n	380c <usbdc_ctrl_status_end+0x30>
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    3830:	2102      	movs	r1, #2
    3832:	e7f7      	b.n	3824 <usbdc_ctrl_status_end+0x48>
    3834:	2000063c 	.word	0x2000063c
    3838:	0000374d 	.word	0x0000374d
    383c:	000037d1 	.word	0x000037d1

00003840 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    3840:	b510      	push	{r4, lr}
	(void)ep;

	switch (code) {
    3842:	2900      	cmp	r1, #0
    3844:	d003      	beq.n	384e <usbdc_cb_ctl_done+0xe>
    3846:	2901      	cmp	r1, #1
    3848:	d006      	beq.n	3858 <usbdc_cb_ctl_done+0x18>
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
    384a:	2000      	movs	r0, #0
    384c:	e003      	b.n	3856 <usbdc_cb_ctl_done+0x16>
		usbdc_ctrl_status_end(req);
    384e:	0010      	movs	r0, r2
    3850:	4b03      	ldr	r3, [pc, #12]	; (3860 <usbdc_cb_ctl_done+0x20>)
    3852:	4798      	blx	r3
	return false;
    3854:	2000      	movs	r0, #0
}
    3856:	bd10      	pop	{r4, pc}
		return usbdc_ctrl_data_end(req);
    3858:	0010      	movs	r0, r2
    385a:	4b02      	ldr	r3, [pc, #8]	; (3864 <usbdc_cb_ctl_done+0x24>)
    385c:	4798      	blx	r3
    385e:	e7fa      	b.n	3856 <usbdc_cb_ctl_done+0x16>
    3860:	000037dd 	.word	0x000037dd
    3864:	000037bd 	.word	0x000037bd

00003868 <usbdc_set_config>:
{
    3868:	b530      	push	{r4, r5, lr}
    386a:	b083      	sub	sp, #12
    386c:	1e02      	subs	r2, r0, #0
	if (cfg_value == 0) {
    386e:	d014      	beq.n	389a <usbdc_set_config+0x32>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    3870:	4b1e      	ldr	r3, [pc, #120]	; (38ec <usbdc_set_config+0x84>)
    3872:	681b      	ldr	r3, [r3, #0]
    3874:	6818      	ldr	r0, [r3, #0]
    3876:	6859      	ldr	r1, [r3, #4]
    3878:	4b1d      	ldr	r3, [pc, #116]	; (38f0 <usbdc_set_config+0x88>)
    387a:	4798      	blx	r3
	if (NULL == cfg_desc) {
    387c:	2800      	cmp	r0, #0
    387e:	d032      	beq.n	38e6 <usbdc_set_config+0x7e>
	return (ptr[0] + (ptr[1] << 8));
    3880:	7881      	ldrb	r1, [r0, #2]
    3882:	78c3      	ldrb	r3, [r0, #3]
    3884:	021b      	lsls	r3, r3, #8
    3886:	18c9      	adds	r1, r1, r3
    3888:	b289      	uxth	r1, r1
	desc.eod  = cfg_desc + total_len;
    388a:	1841      	adds	r1, r0, r1
    388c:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    388e:	2204      	movs	r2, #4
    3890:	4b18      	ldr	r3, [pc, #96]	; (38f4 <usbdc_set_config+0x8c>)
    3892:	4798      	blx	r3
    3894:	9000      	str	r0, [sp, #0]
	uint8_t                 last_iface = 0xFF;
    3896:	24ff      	movs	r4, #255	; 0xff
	while (NULL != desc.sod) {
    3898:	e00d      	b.n	38b6 <usbdc_set_config+0x4e>
		usbdc_unconfig();
    389a:	4b17      	ldr	r3, [pc, #92]	; (38f8 <usbdc_set_config+0x90>)
    389c:	4798      	blx	r3
		return true;
    389e:	2001      	movs	r0, #1
    38a0:	e01f      	b.n	38e2 <usbdc_set_config+0x7a>
			last_iface = desc.sod[2];
    38a2:	002c      	movs	r4, r5
		desc.sod = usb_desc_next(desc.sod);
    38a4:	9800      	ldr	r0, [sp, #0]
	return desc[0];
    38a6:	7803      	ldrb	r3, [r0, #0]
	return (desc + usb_desc_len(desc));
    38a8:	18c0      	adds	r0, r0, r3
    38aa:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    38ac:	2204      	movs	r2, #4
    38ae:	9901      	ldr	r1, [sp, #4]
    38b0:	4b10      	ldr	r3, [pc, #64]	; (38f4 <usbdc_set_config+0x8c>)
    38b2:	4798      	blx	r3
    38b4:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    38b6:	9b00      	ldr	r3, [sp, #0]
    38b8:	2b00      	cmp	r3, #0
    38ba:	d011      	beq.n	38e0 <usbdc_set_config+0x78>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    38bc:	789d      	ldrb	r5, [r3, #2]
    38be:	42ac      	cmp	r4, r5
    38c0:	d0f0      	beq.n	38a4 <usbdc_set_config+0x3c>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    38c2:	4b0a      	ldr	r3, [pc, #40]	; (38ec <usbdc_set_config+0x84>)
    38c4:	691c      	ldr	r4, [r3, #16]
			while (NULL != func) {
    38c6:	2c00      	cmp	r4, #0
    38c8:	d0eb      	beq.n	38a2 <usbdc_set_config+0x3a>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    38ca:	466a      	mov	r2, sp
    38cc:	2100      	movs	r1, #0
    38ce:	0020      	movs	r0, r4
    38d0:	6863      	ldr	r3, [r4, #4]
    38d2:	4798      	blx	r3
    38d4:	2800      	cmp	r0, #0
    38d6:	d001      	beq.n	38dc <usbdc_set_config+0x74>
					func = func->next;
    38d8:	6824      	ldr	r4, [r4, #0]
    38da:	e7f4      	b.n	38c6 <usbdc_set_config+0x5e>
			last_iface = desc.sod[2];
    38dc:	002c      	movs	r4, r5
    38de:	e7e1      	b.n	38a4 <usbdc_set_config+0x3c>
	return true;
    38e0:	2001      	movs	r0, #1
}
    38e2:	b003      	add	sp, #12
    38e4:	bd30      	pop	{r4, r5, pc}
		return false;
    38e6:	2000      	movs	r0, #0
    38e8:	e7fb      	b.n	38e2 <usbdc_set_config+0x7a>
    38ea:	46c0      	nop			; (mov r8, r8)
    38ec:	2000063c 	.word	0x2000063c
    38f0:	00003f65 	.word	0x00003f65
    38f4:	00003f21 	.word	0x00003f21
    38f8:	0000370d 	.word	0x0000370d

000038fc <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    38fc:	b510      	push	{r4, lr}
	usbdc_unconfig();
    38fe:	4b0d      	ldr	r3, [pc, #52]	; (3934 <usbdc_reset+0x38>)
    3900:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    3902:	4c0d      	ldr	r4, [pc, #52]	; (3938 <usbdc_reset+0x3c>)
    3904:	2302      	movs	r3, #2
    3906:	76a3      	strb	r3, [r4, #26]
	usbdc.cfg_value   = 0;
    3908:	2300      	movs	r3, #0
    390a:	76e3      	strb	r3, [r4, #27]
	usbdc.ifc_alt_map = 0;
    390c:	7763      	strb	r3, [r4, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    390e:	2000      	movs	r0, #0
    3910:	4b0a      	ldr	r3, [pc, #40]	; (393c <usbdc_reset+0x40>)
    3912:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    3914:	7f20      	ldrb	r0, [r4, #28]
    3916:	4b0a      	ldr	r3, [pc, #40]	; (3940 <usbdc_reset+0x44>)
    3918:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    391a:	4a0a      	ldr	r2, [pc, #40]	; (3944 <usbdc_reset+0x48>)
    391c:	2100      	movs	r1, #0
    391e:	2000      	movs	r0, #0
    3920:	4c09      	ldr	r4, [pc, #36]	; (3948 <usbdc_reset+0x4c>)
    3922:	47a0      	blx	r4
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    3924:	4a09      	ldr	r2, [pc, #36]	; (394c <usbdc_reset+0x50>)
    3926:	2102      	movs	r1, #2
    3928:	2000      	movs	r0, #0
    392a:	47a0      	blx	r4
	usb_d_ep_enable(0);
    392c:	2000      	movs	r0, #0
    392e:	4b08      	ldr	r3, [pc, #32]	; (3950 <usbdc_reset+0x54>)
    3930:	4798      	blx	r3
}
    3932:	bd10      	pop	{r4, pc}
    3934:	0000370d 	.word	0x0000370d
    3938:	2000063c 	.word	0x2000063c
    393c:	00001175 	.word	0x00001175
    3940:	00001161 	.word	0x00001161
    3944:	00003dc5 	.word	0x00003dc5
    3948:	0000137d 	.word	0x0000137d
    394c:	00003841 	.word	0x00003841
    3950:	000011a1 	.word	0x000011a1

00003954 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    3954:	b510      	push	{r4, lr}
	(void)param;

	switch (ev) {
    3956:	2800      	cmp	r0, #0
    3958:	d002      	beq.n	3960 <usbd_event_cb+0xc>
    395a:	2801      	cmp	r0, #1
    395c:	d004      	beq.n	3968 <usbd_event_cb+0x14>
		break;

	default:
		break;
	}
}
    395e:	bd10      	pop	{r4, pc}
		usbdc_change_notify(USBDC_C_CONN, param);
    3960:	2000      	movs	r0, #0
    3962:	4b03      	ldr	r3, [pc, #12]	; (3970 <usbd_event_cb+0x1c>)
    3964:	4798      	blx	r3
		break;
    3966:	e7fa      	b.n	395e <usbd_event_cb+0xa>
		usbdc_reset();
    3968:	4b02      	ldr	r3, [pc, #8]	; (3974 <usbd_event_cb+0x20>)
    396a:	4798      	blx	r3
}
    396c:	e7f7      	b.n	395e <usbd_event_cb+0xa>
    396e:	46c0      	nop			; (mov r8, r8)
    3970:	0000374d 	.word	0x0000374d
    3974:	000038fd 	.word	0x000038fd

00003978 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    3978:	b510      	push	{r4, lr}
    397a:	b084      	sub	sp, #16
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    397c:	ac01      	add	r4, sp, #4
    397e:	9101      	str	r1, [sp, #4]
    3980:	9202      	str	r2, [sp, #8]
    3982:	7220      	strb	r0, [r4, #8]
    3984:	7263      	strb	r3, [r4, #9]
	return usb_d_ep_transfer(&xfer);
    3986:	0020      	movs	r0, r4
    3988:	4b01      	ldr	r3, [pc, #4]	; (3990 <usbdc_xfer+0x18>)
    398a:	4798      	blx	r3
}
    398c:	b004      	add	sp, #16
    398e:	bd10      	pop	{r4, pc}
    3990:	000011f1 	.word	0x000011f1

00003994 <usbdc_clear_ftr_req>:
{
    3994:	b510      	push	{r4, lr}
    3996:	0004      	movs	r4, r0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    3998:	780a      	ldrb	r2, [r1, #0]
    399a:	231f      	movs	r3, #31
    399c:	4013      	ands	r3, r2
    399e:	2b02      	cmp	r3, #2
    39a0:	d112      	bne.n	39c8 <usbdc_clear_ftr_req+0x34>
		if (req->wLength != 0) {
    39a2:	798a      	ldrb	r2, [r1, #6]
    39a4:	79cb      	ldrb	r3, [r1, #7]
    39a6:	021b      	lsls	r3, r3, #8
    39a8:	4313      	orrs	r3, r2
    39aa:	d001      	beq.n	39b0 <usbdc_clear_ftr_req+0x1c>
			return false;
    39ac:	2000      	movs	r0, #0
    39ae:	e00c      	b.n	39ca <usbdc_clear_ftr_req+0x36>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    39b0:	7908      	ldrb	r0, [r1, #4]
    39b2:	2100      	movs	r1, #0
    39b4:	4b05      	ldr	r3, [pc, #20]	; (39cc <usbdc_clear_ftr_req+0x38>)
    39b6:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    39b8:	2301      	movs	r3, #1
    39ba:	2200      	movs	r2, #0
    39bc:	2100      	movs	r1, #0
    39be:	0020      	movs	r0, r4
    39c0:	4c03      	ldr	r4, [pc, #12]	; (39d0 <usbdc_clear_ftr_req+0x3c>)
    39c2:	47a0      	blx	r4
		return true;
    39c4:	2001      	movs	r0, #1
    39c6:	e000      	b.n	39ca <usbdc_clear_ftr_req+0x36>
		return false;
    39c8:	2000      	movs	r0, #0
}
    39ca:	bd10      	pop	{r4, pc}
    39cc:	00001315 	.word	0x00001315
    39d0:	00003979 	.word	0x00003979

000039d4 <usbdc_set_ftr_req>:
{
    39d4:	b510      	push	{r4, lr}
    39d6:	0004      	movs	r4, r0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    39d8:	780a      	ldrb	r2, [r1, #0]
    39da:	231f      	movs	r3, #31
    39dc:	4013      	ands	r3, r2
    39de:	2b02      	cmp	r3, #2
    39e0:	d112      	bne.n	3a08 <usbdc_set_ftr_req+0x34>
		if (req->wLength != 0) {
    39e2:	798a      	ldrb	r2, [r1, #6]
    39e4:	79cb      	ldrb	r3, [r1, #7]
    39e6:	021b      	lsls	r3, r3, #8
    39e8:	4313      	orrs	r3, r2
    39ea:	d001      	beq.n	39f0 <usbdc_set_ftr_req+0x1c>
			return false;
    39ec:	2000      	movs	r0, #0
    39ee:	e00c      	b.n	3a0a <usbdc_set_ftr_req+0x36>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    39f0:	7908      	ldrb	r0, [r1, #4]
    39f2:	2101      	movs	r1, #1
    39f4:	4b05      	ldr	r3, [pc, #20]	; (3a0c <usbdc_set_ftr_req+0x38>)
    39f6:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    39f8:	2301      	movs	r3, #1
    39fa:	2200      	movs	r2, #0
    39fc:	2100      	movs	r1, #0
    39fe:	0020      	movs	r0, r4
    3a00:	4c03      	ldr	r4, [pc, #12]	; (3a10 <usbdc_set_ftr_req+0x3c>)
    3a02:	47a0      	blx	r4
		return true;
    3a04:	2001      	movs	r0, #1
    3a06:	e000      	b.n	3a0a <usbdc_set_ftr_req+0x36>
		return false;
    3a08:	2000      	movs	r0, #0
}
    3a0a:	bd10      	pop	{r4, pc}
    3a0c:	00001315 	.word	0x00001315
    3a10:	00003979 	.word	0x00003979

00003a14 <usbdc_set_interface>:
{
    3a14:	b570      	push	{r4, r5, r6, lr}
    3a16:	b082      	sub	sp, #8
    3a18:	0005      	movs	r5, r0
    3a1a:	000c      	movs	r4, r1
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    3a1c:	4b2a      	ldr	r3, [pc, #168]	; (3ac8 <usbdc_set_interface+0xb4>)
    3a1e:	681a      	ldr	r2, [r3, #0]
    3a20:	6810      	ldr	r0, [r2, #0]
    3a22:	6851      	ldr	r1, [r2, #4]
    3a24:	7eda      	ldrb	r2, [r3, #27]
    3a26:	4b29      	ldr	r3, [pc, #164]	; (3acc <usbdc_set_interface+0xb8>)
    3a28:	4798      	blx	r3
	if (NULL == ifc) {
    3a2a:	2800      	cmp	r0, #0
    3a2c:	d045      	beq.n	3aba <usbdc_set_interface+0xa6>
	desc.sod = ifc;
    3a2e:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    3a30:	7881      	ldrb	r1, [r0, #2]
    3a32:	78c3      	ldrb	r3, [r0, #3]
    3a34:	021b      	lsls	r3, r3, #8
    3a36:	18c9      	adds	r1, r1, r3
    3a38:	b289      	uxth	r1, r1
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    3a3a:	1841      	adds	r1, r0, r1
    3a3c:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    3a3e:	2204      	movs	r2, #4
    3a40:	4b23      	ldr	r3, [pc, #140]	; (3ad0 <usbdc_set_interface+0xbc>)
    3a42:	4798      	blx	r3
    3a44:	2800      	cmp	r0, #0
    3a46:	d10b      	bne.n	3a60 <usbdc_set_interface+0x4c>
		return false;
    3a48:	2000      	movs	r0, #0
    3a4a:	e039      	b.n	3ac0 <usbdc_set_interface+0xac>
		desc.sod = usb_desc_next(desc.sod);
    3a4c:	9800      	ldr	r0, [sp, #0]
	return desc[0];
    3a4e:	7803      	ldrb	r3, [r0, #0]
	return (desc + usb_desc_len(desc));
    3a50:	18c0      	adds	r0, r0, r3
    3a52:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    3a54:	2204      	movs	r2, #4
    3a56:	9901      	ldr	r1, [sp, #4]
    3a58:	4b1d      	ldr	r3, [pc, #116]	; (3ad0 <usbdc_set_interface+0xbc>)
    3a5a:	4798      	blx	r3
		if (NULL == ifc) {
    3a5c:	2800      	cmp	r0, #0
    3a5e:	d02e      	beq.n	3abe <usbdc_set_interface+0xaa>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    3a60:	7883      	ldrb	r3, [r0, #2]
    3a62:	42a3      	cmp	r3, r4
    3a64:	d1f2      	bne.n	3a4c <usbdc_set_interface+0x38>
    3a66:	78c3      	ldrb	r3, [r0, #3]
    3a68:	42ab      	cmp	r3, r5
    3a6a:	d1ef      	bne.n	3a4c <usbdc_set_interface+0x38>
	desc.sod = ifc;
    3a6c:	9000      	str	r0, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    3a6e:	4b16      	ldr	r3, [pc, #88]	; (3ac8 <usbdc_set_interface+0xb4>)
    3a70:	691e      	ldr	r6, [r3, #16]
	while (NULL != func) {
    3a72:	2e00      	cmp	r6, #0
    3a74:	d01f      	beq.n	3ab6 <usbdc_set_interface+0xa2>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    3a76:	466a      	mov	r2, sp
    3a78:	2101      	movs	r1, #1
    3a7a:	0030      	movs	r0, r6
    3a7c:	6873      	ldr	r3, [r6, #4]
    3a7e:	4798      	blx	r3
    3a80:	2800      	cmp	r0, #0
    3a82:	d001      	beq.n	3a88 <usbdc_set_interface+0x74>
			func = func->next;
    3a84:	6836      	ldr	r6, [r6, #0]
    3a86:	e7f4      	b.n	3a72 <usbdc_set_interface+0x5e>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    3a88:	6873      	ldr	r3, [r6, #4]
    3a8a:	466a      	mov	r2, sp
    3a8c:	2100      	movs	r1, #0
    3a8e:	0030      	movs	r0, r6
    3a90:	4798      	blx	r3
    3a92:	2800      	cmp	r0, #0
    3a94:	d116      	bne.n	3ac4 <usbdc_set_interface+0xb0>
			if (alt_set) {
    3a96:	2d00      	cmp	r5, #0
    3a98:	d005      	beq.n	3aa6 <usbdc_set_interface+0x92>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    3a9a:	2201      	movs	r2, #1
    3a9c:	40a2      	lsls	r2, r4
    3a9e:	490a      	ldr	r1, [pc, #40]	; (3ac8 <usbdc_set_interface+0xb4>)
    3aa0:	7f4b      	ldrb	r3, [r1, #29]
    3aa2:	4313      	orrs	r3, r2
    3aa4:	774b      	strb	r3, [r1, #29]
			usbdc_xfer(0, NULL, 0, 0);
    3aa6:	2300      	movs	r3, #0
    3aa8:	2200      	movs	r2, #0
    3aaa:	2100      	movs	r1, #0
    3aac:	2000      	movs	r0, #0
    3aae:	4c09      	ldr	r4, [pc, #36]	; (3ad4 <usbdc_set_interface+0xc0>)
    3ab0:	47a0      	blx	r4
			return true;
    3ab2:	2001      	movs	r0, #1
    3ab4:	e004      	b.n	3ac0 <usbdc_set_interface+0xac>
	return false;
    3ab6:	2000      	movs	r0, #0
    3ab8:	e002      	b.n	3ac0 <usbdc_set_interface+0xac>
		return false;
    3aba:	2000      	movs	r0, #0
    3abc:	e000      	b.n	3ac0 <usbdc_set_interface+0xac>
			return false;
    3abe:	2000      	movs	r0, #0
}
    3ac0:	b002      	add	sp, #8
    3ac2:	bd70      	pop	{r4, r5, r6, pc}
			return false;
    3ac4:	2000      	movs	r0, #0
    3ac6:	e7fb      	b.n	3ac0 <usbdc_set_interface+0xac>
    3ac8:	2000063c 	.word	0x2000063c
    3acc:	00003f65 	.word	0x00003f65
    3ad0:	00003f21 	.word	0x00003f21
    3ad4:	00003979 	.word	0x00003979

00003ad8 <usbdc_set_req>:
{
    3ad8:	b510      	push	{r4, lr}
    3ada:	0004      	movs	r4, r0
	switch (req->bRequest) {
    3adc:	784b      	ldrb	r3, [r1, #1]
    3ade:	2b0b      	cmp	r3, #11
    3ae0:	d82d      	bhi.n	3b3e <usbdc_set_req+0x66>
    3ae2:	009b      	lsls	r3, r3, #2
    3ae4:	4a17      	ldr	r2, [pc, #92]	; (3b44 <usbdc_set_req+0x6c>)
    3ae6:	58d3      	ldr	r3, [r2, r3]
    3ae8:	469f      	mov	pc, r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    3aea:	2301      	movs	r3, #1
    3aec:	2200      	movs	r2, #0
    3aee:	2100      	movs	r1, #0
    3af0:	4c15      	ldr	r4, [pc, #84]	; (3b48 <usbdc_set_req+0x70>)
    3af2:	47a0      	blx	r4
    3af4:	4243      	negs	r3, r0
    3af6:	4158      	adcs	r0, r3
    3af8:	b2c0      	uxtb	r0, r0
}
    3afa:	bd10      	pop	{r4, pc}
		if (!usbdc_set_config(req->wValue)) {
    3afc:	7888      	ldrb	r0, [r1, #2]
    3afe:	4b13      	ldr	r3, [pc, #76]	; (3b4c <usbdc_set_req+0x74>)
    3b00:	4798      	blx	r3
    3b02:	2800      	cmp	r0, #0
    3b04:	d0f9      	beq.n	3afa <usbdc_set_req+0x22>
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    3b06:	2301      	movs	r3, #1
    3b08:	2200      	movs	r2, #0
    3b0a:	2100      	movs	r1, #0
    3b0c:	0020      	movs	r0, r4
    3b0e:	4c0e      	ldr	r4, [pc, #56]	; (3b48 <usbdc_set_req+0x70>)
    3b10:	47a0      	blx	r4
    3b12:	4243      	negs	r3, r0
    3b14:	4158      	adcs	r0, r3
    3b16:	b2c0      	uxtb	r0, r0
    3b18:	e7ef      	b.n	3afa <usbdc_set_req+0x22>
		return usbdc_clear_ftr_req(ep, req);
    3b1a:	4b0d      	ldr	r3, [pc, #52]	; (3b50 <usbdc_set_req+0x78>)
    3b1c:	4798      	blx	r3
    3b1e:	e7ec      	b.n	3afa <usbdc_set_req+0x22>
		return usbdc_set_ftr_req(ep, req);
    3b20:	4b0c      	ldr	r3, [pc, #48]	; (3b54 <usbdc_set_req+0x7c>)
    3b22:	4798      	blx	r3
    3b24:	e7e9      	b.n	3afa <usbdc_set_req+0x22>
		return usbdc_set_interface(req->wValue, req->wIndex);
    3b26:	790a      	ldrb	r2, [r1, #4]
    3b28:	794b      	ldrb	r3, [r1, #5]
    3b2a:	021b      	lsls	r3, r3, #8
    3b2c:	4313      	orrs	r3, r2
    3b2e:	788a      	ldrb	r2, [r1, #2]
    3b30:	78c8      	ldrb	r0, [r1, #3]
    3b32:	0200      	lsls	r0, r0, #8
    3b34:	4310      	orrs	r0, r2
    3b36:	0019      	movs	r1, r3
    3b38:	4b07      	ldr	r3, [pc, #28]	; (3b58 <usbdc_set_req+0x80>)
    3b3a:	4798      	blx	r3
    3b3c:	e7dd      	b.n	3afa <usbdc_set_req+0x22>
		return false;
    3b3e:	2000      	movs	r0, #0
    3b40:	e7db      	b.n	3afa <usbdc_set_req+0x22>
    3b42:	46c0      	nop			; (mov r8, r8)
    3b44:	000042fc 	.word	0x000042fc
    3b48:	00003979 	.word	0x00003979
    3b4c:	00003869 	.word	0x00003869
    3b50:	00003995 	.word	0x00003995
    3b54:	000039d5 	.word	0x000039d5
    3b58:	00003a15 	.word	0x00003a15

00003b5c <usbdc_get_dev_desc>:
{
    3b5c:	b570      	push	{r4, r5, r6, lr}
    3b5e:	0005      	movs	r5, r0
	uint16_t length   = req->wLength;
    3b60:	798b      	ldrb	r3, [r1, #6]
    3b62:	79cc      	ldrb	r4, [r1, #7]
    3b64:	0224      	lsls	r4, r4, #8
    3b66:	431c      	orrs	r4, r3
	if (length > 0x12) {
    3b68:	2c12      	cmp	r4, #18
    3b6a:	d900      	bls.n	3b6e <usbdc_get_dev_desc+0x12>
		length = 0x12;
    3b6c:	2412      	movs	r4, #18
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    3b6e:	4b0b      	ldr	r3, [pc, #44]	; (3b9c <usbdc_get_dev_desc+0x40>)
    3b70:	681b      	ldr	r3, [r3, #0]
    3b72:	6818      	ldr	r0, [r3, #0]
    3b74:	6859      	ldr	r1, [r3, #4]
    3b76:	2201      	movs	r2, #1
    3b78:	4b09      	ldr	r3, [pc, #36]	; (3ba0 <usbdc_get_dev_desc+0x44>)
    3b7a:	4798      	blx	r3
	if (!dev_desc) {
    3b7c:	2800      	cmp	r0, #0
    3b7e:	d00b      	beq.n	3b98 <usbdc_get_dev_desc+0x3c>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    3b80:	2300      	movs	r3, #0
    3b82:	0022      	movs	r2, r4
    3b84:	0001      	movs	r1, r0
    3b86:	0028      	movs	r0, r5
    3b88:	4c06      	ldr	r4, [pc, #24]	; (3ba4 <usbdc_get_dev_desc+0x48>)
    3b8a:	47a0      	blx	r4
    3b8c:	2800      	cmp	r0, #0
    3b8e:	d101      	bne.n	3b94 <usbdc_get_dev_desc+0x38>
	return true;
    3b90:	2001      	movs	r0, #1
}
    3b92:	bd70      	pop	{r4, r5, r6, pc}
		return false;
    3b94:	2000      	movs	r0, #0
    3b96:	e7fc      	b.n	3b92 <usbdc_get_dev_desc+0x36>
		return false;
    3b98:	2000      	movs	r0, #0
    3b9a:	e7fa      	b.n	3b92 <usbdc_get_dev_desc+0x36>
    3b9c:	2000063c 	.word	0x2000063c
    3ba0:	00003f21 	.word	0x00003f21
    3ba4:	00003979 	.word	0x00003979

00003ba8 <usbdc_get_cfg_desc>:
{
    3ba8:	b570      	push	{r4, r5, r6, lr}
    3baa:	0005      	movs	r5, r0
	uint16_t length   = req->wLength;
    3bac:	798b      	ldrb	r3, [r1, #6]
    3bae:	79ce      	ldrb	r6, [r1, #7]
    3bb0:	0236      	lsls	r6, r6, #8
    3bb2:	431e      	orrs	r6, r3
	uint8_t  index    = req->wValue & 0x00FF;
    3bb4:	788a      	ldrb	r2, [r1, #2]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    3bb6:	4b13      	ldr	r3, [pc, #76]	; (3c04 <usbdc_get_cfg_desc+0x5c>)
    3bb8:	7f1c      	ldrb	r4, [r3, #28]
    3bba:	3c01      	subs	r4, #1
    3bbc:	4034      	ands	r4, r6
    3bbe:	4261      	negs	r1, r4
    3bc0:	414c      	adcs	r4, r1
    3bc2:	b2e4      	uxtb	r4, r4
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    3bc4:	681b      	ldr	r3, [r3, #0]
    3bc6:	6818      	ldr	r0, [r3, #0]
    3bc8:	6859      	ldr	r1, [r3, #4]
    3bca:	3201      	adds	r2, #1
    3bcc:	b2d2      	uxtb	r2, r2
    3bce:	4b0e      	ldr	r3, [pc, #56]	; (3c08 <usbdc_get_cfg_desc+0x60>)
    3bd0:	4798      	blx	r3
	if (NULL == cfg_desc) {
    3bd2:	2800      	cmp	r0, #0
    3bd4:	d013      	beq.n	3bfe <usbdc_get_cfg_desc+0x56>
	return (ptr[0] + (ptr[1] << 8));
    3bd6:	7882      	ldrb	r2, [r0, #2]
    3bd8:	78c3      	ldrb	r3, [r0, #3]
    3bda:	021b      	lsls	r3, r3, #8
    3bdc:	18d2      	adds	r2, r2, r3
    3bde:	b292      	uxth	r2, r2
	if (length <= total_len) {
    3be0:	4296      	cmp	r6, r2
    3be2:	d801      	bhi.n	3be8 <usbdc_get_cfg_desc+0x40>
	uint16_t length   = req->wLength;
    3be4:	0032      	movs	r2, r6
		need_zlp = false;
    3be6:	2400      	movs	r4, #0
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    3be8:	0023      	movs	r3, r4
    3bea:	0001      	movs	r1, r0
    3bec:	0028      	movs	r0, r5
    3bee:	4c07      	ldr	r4, [pc, #28]	; (3c0c <usbdc_get_cfg_desc+0x64>)
    3bf0:	47a0      	blx	r4
    3bf2:	2800      	cmp	r0, #0
    3bf4:	d101      	bne.n	3bfa <usbdc_get_cfg_desc+0x52>
	return true;
    3bf6:	2001      	movs	r0, #1
}
    3bf8:	bd70      	pop	{r4, r5, r6, pc}
		return false;
    3bfa:	2000      	movs	r0, #0
    3bfc:	e7fc      	b.n	3bf8 <usbdc_get_cfg_desc+0x50>
		return false;
    3bfe:	2000      	movs	r0, #0
    3c00:	e7fa      	b.n	3bf8 <usbdc_get_cfg_desc+0x50>
    3c02:	46c0      	nop			; (mov r8, r8)
    3c04:	2000063c 	.word	0x2000063c
    3c08:	00003f65 	.word	0x00003f65
    3c0c:	00003979 	.word	0x00003979

00003c10 <usbdc_get_str_desc>:
{
    3c10:	b570      	push	{r4, r5, r6, lr}
    3c12:	0005      	movs	r5, r0
	uint16_t length   = req->wLength;
    3c14:	798b      	ldrb	r3, [r1, #6]
    3c16:	79ce      	ldrb	r6, [r1, #7]
    3c18:	0236      	lsls	r6, r6, #8
    3c1a:	431e      	orrs	r6, r3
	uint8_t  index    = req->wValue & 0x00FF;
    3c1c:	788a      	ldrb	r2, [r1, #2]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    3c1e:	4b10      	ldr	r3, [pc, #64]	; (3c60 <usbdc_get_str_desc+0x50>)
    3c20:	7f1c      	ldrb	r4, [r3, #28]
    3c22:	3c01      	subs	r4, #1
    3c24:	4034      	ands	r4, r6
    3c26:	4261      	negs	r1, r4
    3c28:	414c      	adcs	r4, r1
    3c2a:	b2e4      	uxtb	r4, r4
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    3c2c:	681b      	ldr	r3, [r3, #0]
    3c2e:	6818      	ldr	r0, [r3, #0]
    3c30:	6859      	ldr	r1, [r3, #4]
    3c32:	4b0c      	ldr	r3, [pc, #48]	; (3c64 <usbdc_get_str_desc+0x54>)
    3c34:	4798      	blx	r3
	if (NULL == str_desc) {
    3c36:	2800      	cmp	r0, #0
    3c38:	d00f      	beq.n	3c5a <usbdc_get_str_desc+0x4a>
	if (length <= str_desc[0]) {
    3c3a:	7802      	ldrb	r2, [r0, #0]
    3c3c:	4296      	cmp	r6, r2
    3c3e:	d801      	bhi.n	3c44 <usbdc_get_str_desc+0x34>
	uint16_t length   = req->wLength;
    3c40:	0032      	movs	r2, r6
		need_zlp = false;
    3c42:	2400      	movs	r4, #0
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    3c44:	0023      	movs	r3, r4
    3c46:	0001      	movs	r1, r0
    3c48:	0028      	movs	r0, r5
    3c4a:	4c07      	ldr	r4, [pc, #28]	; (3c68 <usbdc_get_str_desc+0x58>)
    3c4c:	47a0      	blx	r4
    3c4e:	2800      	cmp	r0, #0
    3c50:	d101      	bne.n	3c56 <usbdc_get_str_desc+0x46>
	return true;
    3c52:	2001      	movs	r0, #1
}
    3c54:	bd70      	pop	{r4, r5, r6, pc}
		return false;
    3c56:	2000      	movs	r0, #0
    3c58:	e7fc      	b.n	3c54 <usbdc_get_str_desc+0x44>
		return false;
    3c5a:	2000      	movs	r0, #0
    3c5c:	e7fa      	b.n	3c54 <usbdc_get_str_desc+0x44>
    3c5e:	46c0      	nop			; (mov r8, r8)
    3c60:	2000063c 	.word	0x2000063c
    3c64:	00003fa9 	.word	0x00003fa9
    3c68:	00003979 	.word	0x00003979

00003c6c <usbdc_get_desc_req>:
{
    3c6c:	b510      	push	{r4, lr}
	uint8_t type = (uint8_t)(req->wValue >> 8);
    3c6e:	78cb      	ldrb	r3, [r1, #3]
	switch (type) {
    3c70:	2b02      	cmp	r3, #2
    3c72:	d008      	beq.n	3c86 <usbdc_get_desc_req+0x1a>
    3c74:	2b03      	cmp	r3, #3
    3c76:	d009      	beq.n	3c8c <usbdc_get_desc_req+0x20>
    3c78:	2b01      	cmp	r3, #1
    3c7a:	d001      	beq.n	3c80 <usbdc_get_desc_req+0x14>
	return false;
    3c7c:	2000      	movs	r0, #0
    3c7e:	e001      	b.n	3c84 <usbdc_get_desc_req+0x18>
		return usbdc_get_dev_desc(ep, req);
    3c80:	4b04      	ldr	r3, [pc, #16]	; (3c94 <usbdc_get_desc_req+0x28>)
    3c82:	4798      	blx	r3
}
    3c84:	bd10      	pop	{r4, pc}
		return usbdc_get_cfg_desc(ep, req);
    3c86:	4b04      	ldr	r3, [pc, #16]	; (3c98 <usbdc_get_desc_req+0x2c>)
    3c88:	4798      	blx	r3
    3c8a:	e7fb      	b.n	3c84 <usbdc_get_desc_req+0x18>
		return usbdc_get_str_desc(ep, req);
    3c8c:	4b03      	ldr	r3, [pc, #12]	; (3c9c <usbdc_get_desc_req+0x30>)
    3c8e:	4798      	blx	r3
    3c90:	e7f8      	b.n	3c84 <usbdc_get_desc_req+0x18>
    3c92:	46c0      	nop			; (mov r8, r8)
    3c94:	00003b5d 	.word	0x00003b5d
    3c98:	00003ba9 	.word	0x00003ba9
    3c9c:	00003c11 	.word	0x00003c11

00003ca0 <usbdc_get_status_req>:
{
    3ca0:	b530      	push	{r4, r5, lr}
    3ca2:	b083      	sub	sp, #12
    3ca4:	0004      	movs	r4, r0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    3ca6:	780a      	ldrb	r2, [r1, #0]
    3ca8:	231f      	movs	r3, #31
    3caa:	4013      	ands	r3, r2
    3cac:	b2da      	uxtb	r2, r3
    3cae:	2a01      	cmp	r2, #1
    3cb0:	d903      	bls.n	3cba <usbdc_get_status_req+0x1a>
    3cb2:	2b02      	cmp	r3, #2
    3cb4:	d012      	beq.n	3cdc <usbdc_get_status_req+0x3c>
		return false;
    3cb6:	2000      	movs	r0, #0
    3cb8:	e00e      	b.n	3cd8 <usbdc_get_status_req+0x38>
		st = 0;
    3cba:	2300      	movs	r3, #0
    3cbc:	9301      	str	r3, [sp, #4]
	memcpy(usbdc.ctrl_buf, &st, 2);
    3cbe:	4d0d      	ldr	r5, [pc, #52]	; (3cf4 <usbdc_get_status_req+0x54>)
    3cc0:	2202      	movs	r2, #2
    3cc2:	a901      	add	r1, sp, #4
    3cc4:	6968      	ldr	r0, [r5, #20]
    3cc6:	4b0c      	ldr	r3, [pc, #48]	; (3cf8 <usbdc_get_status_req+0x58>)
    3cc8:	4798      	blx	r3
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    3cca:	6969      	ldr	r1, [r5, #20]
    3ccc:	2300      	movs	r3, #0
    3cce:	2202      	movs	r2, #2
    3cd0:	0020      	movs	r0, r4
    3cd2:	4c0a      	ldr	r4, [pc, #40]	; (3cfc <usbdc_get_status_req+0x5c>)
    3cd4:	47a0      	blx	r4
	return true;
    3cd6:	2001      	movs	r0, #1
}
    3cd8:	b003      	add	sp, #12
    3cda:	bd30      	pop	{r4, r5, pc}
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    3cdc:	7908      	ldrb	r0, [r1, #4]
    3cde:	2102      	movs	r1, #2
    3ce0:	4b07      	ldr	r3, [pc, #28]	; (3d00 <usbdc_get_status_req+0x60>)
    3ce2:	4798      	blx	r3
		if (st < 0) {
    3ce4:	2800      	cmp	r0, #0
    3ce6:	db03      	blt.n	3cf0 <usbdc_get_status_req+0x50>
		st = st & 0x1;
    3ce8:	2301      	movs	r3, #1
    3cea:	4018      	ands	r0, r3
    3cec:	9001      	str	r0, [sp, #4]
		break;
    3cee:	e7e6      	b.n	3cbe <usbdc_get_status_req+0x1e>
			return false;
    3cf0:	2000      	movs	r0, #0
    3cf2:	e7f1      	b.n	3cd8 <usbdc_get_status_req+0x38>
    3cf4:	2000063c 	.word	0x2000063c
    3cf8:	000040bd 	.word	0x000040bd
    3cfc:	00003979 	.word	0x00003979
    3d00:	00001315 	.word	0x00001315

00003d04 <usbdc_get_interface>:
{
    3d04:	b570      	push	{r4, r5, r6, lr}
    3d06:	0005      	movs	r5, r0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    3d08:	4b16      	ldr	r3, [pc, #88]	; (3d64 <usbdc_get_interface+0x60>)
    3d0a:	691c      	ldr	r4, [r3, #16]
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    3d0c:	7f5a      	ldrb	r2, [r3, #29]
    3d0e:	7901      	ldrb	r1, [r0, #4]
    3d10:	7943      	ldrb	r3, [r0, #5]
    3d12:	021b      	lsls	r3, r3, #8
    3d14:	430b      	orrs	r3, r1
    3d16:	411a      	asrs	r2, r3
    3d18:	07d3      	lsls	r3, r2, #31
    3d1a:	d50a      	bpl.n	3d32 <usbdc_get_interface+0x2e>
	while (NULL != func) {
    3d1c:	2c00      	cmp	r4, #0
    3d1e:	d01f      	beq.n	3d60 <usbdc_get_interface+0x5c>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    3d20:	002a      	movs	r2, r5
    3d22:	2102      	movs	r1, #2
    3d24:	0020      	movs	r0, r4
    3d26:	6863      	ldr	r3, [r4, #4]
    3d28:	4798      	blx	r3
    3d2a:	2800      	cmp	r0, #0
    3d2c:	da0d      	bge.n	3d4a <usbdc_get_interface+0x46>
			func = func->next;
    3d2e:	6824      	ldr	r4, [r4, #0]
    3d30:	e7f4      	b.n	3d1c <usbdc_get_interface+0x18>
		usbdc.ctrl_buf[0] = 0;
    3d32:	4b0c      	ldr	r3, [pc, #48]	; (3d64 <usbdc_get_interface+0x60>)
    3d34:	2200      	movs	r2, #0
    3d36:	6959      	ldr	r1, [r3, #20]
    3d38:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    3d3a:	6959      	ldr	r1, [r3, #20]
    3d3c:	2300      	movs	r3, #0
    3d3e:	3201      	adds	r2, #1
    3d40:	2000      	movs	r0, #0
    3d42:	4c09      	ldr	r4, [pc, #36]	; (3d68 <usbdc_get_interface+0x64>)
    3d44:	47a0      	blx	r4
		return true;
    3d46:	2001      	movs	r0, #1
    3d48:	e00b      	b.n	3d62 <usbdc_get_interface+0x5e>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    3d4a:	4b06      	ldr	r3, [pc, #24]	; (3d64 <usbdc_get_interface+0x60>)
    3d4c:	695a      	ldr	r2, [r3, #20]
    3d4e:	7010      	strb	r0, [r2, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    3d50:	6959      	ldr	r1, [r3, #20]
    3d52:	2300      	movs	r3, #0
    3d54:	2201      	movs	r2, #1
    3d56:	2000      	movs	r0, #0
    3d58:	4c03      	ldr	r4, [pc, #12]	; (3d68 <usbdc_get_interface+0x64>)
    3d5a:	47a0      	blx	r4
			return true;
    3d5c:	2001      	movs	r0, #1
    3d5e:	e000      	b.n	3d62 <usbdc_get_interface+0x5e>
	return false;
    3d60:	2000      	movs	r0, #0
}
    3d62:	bd70      	pop	{r4, r5, r6, pc}
    3d64:	2000063c 	.word	0x2000063c
    3d68:	00003979 	.word	0x00003979

00003d6c <usbdc_get_req>:
{
    3d6c:	b510      	push	{r4, lr}
	switch (req->bRequest) {
    3d6e:	784b      	ldrb	r3, [r1, #1]
    3d70:	2b06      	cmp	r3, #6
    3d72:	d00d      	beq.n	3d90 <usbdc_get_req+0x24>
    3d74:	d907      	bls.n	3d86 <usbdc_get_req+0x1a>
    3d76:	2b08      	cmp	r3, #8
    3d78:	d00d      	beq.n	3d96 <usbdc_get_req+0x2a>
    3d7a:	2b0a      	cmp	r3, #10
    3d7c:	d116      	bne.n	3dac <usbdc_get_req+0x40>
		return usbdc_get_interface(req);
    3d7e:	0008      	movs	r0, r1
    3d80:	4b0b      	ldr	r3, [pc, #44]	; (3db0 <usbdc_get_req+0x44>)
    3d82:	4798      	blx	r3
    3d84:	e006      	b.n	3d94 <usbdc_get_req+0x28>
	switch (req->bRequest) {
    3d86:	2b00      	cmp	r3, #0
    3d88:	d110      	bne.n	3dac <usbdc_get_req+0x40>
		return usbdc_get_status_req(ep, req);
    3d8a:	4b0a      	ldr	r3, [pc, #40]	; (3db4 <usbdc_get_req+0x48>)
    3d8c:	4798      	blx	r3
    3d8e:	e001      	b.n	3d94 <usbdc_get_req+0x28>
		return usbdc_get_desc_req(ep, req);
    3d90:	4b09      	ldr	r3, [pc, #36]	; (3db8 <usbdc_get_req+0x4c>)
    3d92:	4798      	blx	r3
}
    3d94:	bd10      	pop	{r4, pc}
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    3d96:	4b09      	ldr	r3, [pc, #36]	; (3dbc <usbdc_get_req+0x50>)
    3d98:	7eda      	ldrb	r2, [r3, #27]
    3d9a:	6959      	ldr	r1, [r3, #20]
    3d9c:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    3d9e:	6959      	ldr	r1, [r3, #20]
    3da0:	2300      	movs	r3, #0
    3da2:	2201      	movs	r2, #1
    3da4:	4c06      	ldr	r4, [pc, #24]	; (3dc0 <usbdc_get_req+0x54>)
    3da6:	47a0      	blx	r4
		return true;
    3da8:	2001      	movs	r0, #1
    3daa:	e7f3      	b.n	3d94 <usbdc_get_req+0x28>
		return false;
    3dac:	2000      	movs	r0, #0
    3dae:	e7f1      	b.n	3d94 <usbdc_get_req+0x28>
    3db0:	00003d05 	.word	0x00003d05
    3db4:	00003ca1 	.word	0x00003ca1
    3db8:	00003c6d 	.word	0x00003c6d
    3dbc:	2000063c 	.word	0x2000063c
    3dc0:	00003979 	.word	0x00003979

00003dc4 <usbdc_cb_ctl_req>:
{
    3dc4:	b570      	push	{r4, r5, r6, lr}
    3dc6:	0005      	movs	r5, r0
    3dc8:	000c      	movs	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    3dca:	2200      	movs	r2, #0
    3dcc:	4b0d      	ldr	r3, [pc, #52]	; (3e04 <usbdc_cb_ctl_req+0x40>)
    3dce:	4798      	blx	r3
    3dd0:	1c43      	adds	r3, r0, #1
    3dd2:	d014      	beq.n	3dfe <usbdc_cb_ctl_req+0x3a>
    3dd4:	2801      	cmp	r0, #1
    3dd6:	d013      	beq.n	3e00 <usbdc_cb_ctl_req+0x3c>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    3dd8:	7823      	ldrb	r3, [r4, #0]
    3dda:	221f      	movs	r2, #31
    3ddc:	4393      	bics	r3, r2
    3dde:	d004      	beq.n	3dea <usbdc_cb_ctl_req+0x26>
    3de0:	b2db      	uxtb	r3, r3
    3de2:	2b80      	cmp	r3, #128	; 0x80
    3de4:	d006      	beq.n	3df4 <usbdc_cb_ctl_req+0x30>
		return false;
    3de6:	2000      	movs	r0, #0
    3de8:	e00a      	b.n	3e00 <usbdc_cb_ctl_req+0x3c>
		return usbdc_set_req(ep, req);
    3dea:	0021      	movs	r1, r4
    3dec:	0028      	movs	r0, r5
    3dee:	4b06      	ldr	r3, [pc, #24]	; (3e08 <usbdc_cb_ctl_req+0x44>)
    3df0:	4798      	blx	r3
    3df2:	e005      	b.n	3e00 <usbdc_cb_ctl_req+0x3c>
		return usbdc_get_req(ep, req);
    3df4:	0021      	movs	r1, r4
    3df6:	0028      	movs	r0, r5
    3df8:	4b04      	ldr	r3, [pc, #16]	; (3e0c <usbdc_cb_ctl_req+0x48>)
    3dfa:	4798      	blx	r3
    3dfc:	e000      	b.n	3e00 <usbdc_cb_ctl_req+0x3c>
		return false;
    3dfe:	2000      	movs	r0, #0
}
    3e00:	bd70      	pop	{r4, r5, r6, pc}
    3e02:	46c0      	nop			; (mov r8, r8)
    3e04:	00003775 	.word	0x00003775
    3e08:	00003ad9 	.word	0x00003ad9
    3e0c:	00003d6d 	.word	0x00003d6d

00003e10 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    3e10:	b510      	push	{r4, lr}
	switch (type) {
    3e12:	2801      	cmp	r0, #1
    3e14:	d009      	beq.n	3e2a <usbdc_register_handler+0x1a>
    3e16:	2800      	cmp	r0, #0
    3e18:	d002      	beq.n	3e20 <usbdc_register_handler+0x10>
    3e1a:	2802      	cmp	r0, #2
    3e1c:	d00a      	beq.n	3e34 <usbdc_register_handler+0x24>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
	}
}
    3e1e:	bd10      	pop	{r4, pc}
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    3e20:	4807      	ldr	r0, [pc, #28]	; (3e40 <usbdc_register_handler+0x30>)
    3e22:	3004      	adds	r0, #4
    3e24:	4b07      	ldr	r3, [pc, #28]	; (3e44 <usbdc_register_handler+0x34>)
    3e26:	4798      	blx	r3
		break;
    3e28:	e7f9      	b.n	3e1e <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    3e2a:	4805      	ldr	r0, [pc, #20]	; (3e40 <usbdc_register_handler+0x30>)
    3e2c:	3008      	adds	r0, #8
    3e2e:	4b05      	ldr	r3, [pc, #20]	; (3e44 <usbdc_register_handler+0x34>)
    3e30:	4798      	blx	r3
		break;
    3e32:	e7f4      	b.n	3e1e <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    3e34:	4802      	ldr	r0, [pc, #8]	; (3e40 <usbdc_register_handler+0x30>)
    3e36:	300c      	adds	r0, #12
    3e38:	4b02      	ldr	r3, [pc, #8]	; (3e44 <usbdc_register_handler+0x34>)
    3e3a:	4798      	blx	r3
}
    3e3c:	e7ef      	b.n	3e1e <usbdc_register_handler+0xe>
    3e3e:	46c0      	nop			; (mov r8, r8)
    3e40:	2000063c 	.word	0x2000063c
    3e44:	00001421 	.word	0x00001421

00003e48 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    3e48:	b570      	push	{r4, r5, r6, lr}
    3e4a:	0004      	movs	r4, r0
	ASSERT(ctrl_buf);
    3e4c:	1e43      	subs	r3, r0, #1
    3e4e:	4198      	sbcs	r0, r3
    3e50:	b2c0      	uxtb	r0, r0
    3e52:	4a0c      	ldr	r2, [pc, #48]	; (3e84 <usbdc_init+0x3c>)
    3e54:	490c      	ldr	r1, [pc, #48]	; (3e88 <usbdc_init+0x40>)
    3e56:	4b0d      	ldr	r3, [pc, #52]	; (3e8c <usbdc_init+0x44>)
    3e58:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    3e5a:	4b0d      	ldr	r3, [pc, #52]	; (3e90 <usbdc_init+0x48>)
    3e5c:	4798      	blx	r3
	if (rc < 0) {
    3e5e:	2800      	cmp	r0, #0
    3e60:	db0e      	blt.n	3e80 <usbdc_init+0x38>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    3e62:	4d0c      	ldr	r5, [pc, #48]	; (3e94 <usbdc_init+0x4c>)
    3e64:	2220      	movs	r2, #32
    3e66:	2100      	movs	r1, #0
    3e68:	0028      	movs	r0, r5
    3e6a:	4b0b      	ldr	r3, [pc, #44]	; (3e98 <usbdc_init+0x50>)
    3e6c:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    3e6e:	616c      	str	r4, [r5, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    3e70:	490a      	ldr	r1, [pc, #40]	; (3e9c <usbdc_init+0x54>)
    3e72:	2000      	movs	r0, #0
    3e74:	4c0a      	ldr	r4, [pc, #40]	; (3ea0 <usbdc_init+0x58>)
    3e76:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    3e78:	490a      	ldr	r1, [pc, #40]	; (3ea4 <usbdc_init+0x5c>)
    3e7a:	2001      	movs	r0, #1
    3e7c:	47a0      	blx	r4

	return 0;
    3e7e:	2000      	movs	r0, #0
}
    3e80:	bd70      	pop	{r4, r5, r6, pc}
    3e82:	46c0      	nop			; (mov r8, r8)
    3e84:	00000355 	.word	0x00000355
    3e88:	0000432c 	.word	0x0000432c
    3e8c:	000013cd 	.word	0x000013cd
    3e90:	00001071 	.word	0x00001071
    3e94:	2000063c 	.word	0x2000063c
    3e98:	000040cf 	.word	0x000040cf
    3e9c:	000037b1 	.word	0x000037b1
    3ea0:	000010dd 	.word	0x000010dd
    3ea4:	00003955 	.word	0x00003955

00003ea8 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    3ea8:	b510      	push	{r4, lr}
    3eaa:	0001      	movs	r1, r0
	list_insert_at_end(&usbdc.func_list, func);
    3eac:	4802      	ldr	r0, [pc, #8]	; (3eb8 <usbdc_register_function+0x10>)
    3eae:	3010      	adds	r0, #16
    3eb0:	4b02      	ldr	r3, [pc, #8]	; (3ebc <usbdc_register_function+0x14>)
    3eb2:	4798      	blx	r3
}
    3eb4:	bd10      	pop	{r4, pc}
    3eb6:	46c0      	nop			; (mov r8, r8)
    3eb8:	2000063c 	.word	0x2000063c
    3ebc:	00001421 	.word	0x00001421

00003ec0 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    3ec0:	b510      	push	{r4, lr}
	if (usbdc.state >= USBD_S_POWER) {
    3ec2:	4b0b      	ldr	r3, [pc, #44]	; (3ef0 <usbdc_start+0x30>)
    3ec4:	7e9b      	ldrb	r3, [r3, #26]
    3ec6:	2b00      	cmp	r3, #0
    3ec8:	d10c      	bne.n	3ee4 <usbdc_start+0x24>
		return ERR_BUSY;
	}

	if (desces) {
    3eca:	2800      	cmp	r0, #0
    3ecc:	d00d      	beq.n	3eea <usbdc_start+0x2a>
		usbdc.desces.ls_fs = desces;
    3ece:	4b08      	ldr	r3, [pc, #32]	; (3ef0 <usbdc_start+0x30>)
    3ed0:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    3ed2:	6802      	ldr	r2, [r0, #0]
    3ed4:	79d2      	ldrb	r2, [r2, #7]
    3ed6:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    3ed8:	2201      	movs	r2, #1
    3eda:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    3edc:	4b05      	ldr	r3, [pc, #20]	; (3ef4 <usbdc_start+0x34>)
    3ede:	4798      	blx	r3
	return ERR_NONE;
    3ee0:	2000      	movs	r0, #0
}
    3ee2:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    3ee4:	2004      	movs	r0, #4
    3ee6:	4240      	negs	r0, r0
    3ee8:	e7fb      	b.n	3ee2 <usbdc_start+0x22>
		return ERR_BAD_DATA;
    3eea:	2009      	movs	r0, #9
    3eec:	4240      	negs	r0, r0
    3eee:	e7f8      	b.n	3ee2 <usbdc_start+0x22>
    3ef0:	2000063c 	.word	0x2000063c
    3ef4:	000010e9 	.word	0x000010e9

00003ef8 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    3ef8:	b510      	push	{r4, lr}
	usb_d_attach();
    3efa:	4b01      	ldr	r3, [pc, #4]	; (3f00 <usbdc_attach+0x8>)
    3efc:	4798      	blx	r3
}
    3efe:	bd10      	pop	{r4, pc}
    3f00:	000010f5 	.word	0x000010f5

00003f04 <usbdc_get_ctrl_buffer>:
/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
    3f04:	4b01      	ldr	r3, [pc, #4]	; (3f0c <usbdc_get_ctrl_buffer+0x8>)
    3f06:	6958      	ldr	r0, [r3, #20]
}
    3f08:	4770      	bx	lr
    3f0a:	46c0      	nop			; (mov r8, r8)
    3f0c:	2000063c 	.word	0x2000063c

00003f10 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    3f10:	4b02      	ldr	r3, [pc, #8]	; (3f1c <usbdc_get_state+0xc>)
    3f12:	7e98      	ldrb	r0, [r3, #26]
    3f14:	06c3      	lsls	r3, r0, #27
    3f16:	d500      	bpl.n	3f1a <usbdc_get_state+0xa>
		return USBD_S_SUSPEND;
    3f18:	2010      	movs	r0, #16
	}
	return usbdc.state;
}
    3f1a:	4770      	bx	lr
    3f1c:	2000063c 	.word	0x2000063c

00003f20 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    3f20:	b510      	push	{r4, lr}
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    3f22:	4288      	cmp	r0, r1
    3f24:	d207      	bcs.n	3f36 <usb_find_desc+0x16>
	return desc[0];
    3f26:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    3f28:	2b01      	cmp	r3, #1
    3f2a:	d906      	bls.n	3f3a <usb_find_desc+0x1a>
	return desc[1];
    3f2c:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    3f2e:	4294      	cmp	r4, r2
    3f30:	d002      	beq.n	3f38 <usb_find_desc+0x18>
	return (desc + usb_desc_len(desc));
    3f32:	18c0      	adds	r0, r0, r3
    3f34:	e7f5      	b.n	3f22 <usb_find_desc+0x2>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    3f36:	2000      	movs	r0, #0
}
    3f38:	bd10      	pop	{r4, pc}
		_desc_len_check();
    3f3a:	2000      	movs	r0, #0
    3f3c:	e7fc      	b.n	3f38 <usb_find_desc+0x18>

00003f3e <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    3f3e:	4288      	cmp	r0, r1
    3f40:	d209      	bcs.n	3f56 <usb_find_ep_desc+0x18>
	return desc[0];
    3f42:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    3f44:	2b01      	cmp	r3, #1
    3f46:	d908      	bls.n	3f5a <usb_find_ep_desc+0x1c>
	return desc[1];
    3f48:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    3f4a:	2a04      	cmp	r2, #4
    3f4c:	d007      	beq.n	3f5e <usb_find_ep_desc+0x20>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    3f4e:	2a05      	cmp	r2, #5
    3f50:	d002      	beq.n	3f58 <usb_find_ep_desc+0x1a>
	return (desc + usb_desc_len(desc));
    3f52:	18c0      	adds	r0, r0, r3
    3f54:	e7f3      	b.n	3f3e <usb_find_ep_desc>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    3f56:	2000      	movs	r0, #0
}
    3f58:	4770      	bx	lr
		_desc_len_check();
    3f5a:	2000      	movs	r0, #0
    3f5c:	e7fc      	b.n	3f58 <usb_find_ep_desc+0x1a>
	return NULL;
    3f5e:	2000      	movs	r0, #0
    3f60:	e7fa      	b.n	3f58 <usb_find_ep_desc+0x1a>
	...

00003f64 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    3f64:	b570      	push	{r4, r5, r6, lr}
    3f66:	000c      	movs	r4, r1
    3f68:	0015      	movs	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    3f6a:	2202      	movs	r2, #2
    3f6c:	4b0d      	ldr	r3, [pc, #52]	; (3fa4 <usb_find_cfg_desc+0x40>)
    3f6e:	4798      	blx	r3
	if (!desc) {
    3f70:	2800      	cmp	r0, #0
    3f72:	d012      	beq.n	3f9a <usb_find_cfg_desc+0x36>
		return NULL;
	}
	while (desc < eof) {
    3f74:	42a0      	cmp	r0, r4
    3f76:	d20f      	bcs.n	3f98 <usb_find_cfg_desc+0x34>
	return desc[0];
    3f78:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    3f7a:	2b01      	cmp	r3, #1
    3f7c:	d90e      	bls.n	3f9c <usb_find_cfg_desc+0x38>
		if (desc[1] != USB_DT_CONFIG) {
    3f7e:	7843      	ldrb	r3, [r0, #1]
    3f80:	2b02      	cmp	r3, #2
    3f82:	d10d      	bne.n	3fa0 <usb_find_cfg_desc+0x3c>
			break;
		}
		if (desc[5] == cfg_value) {
    3f84:	7943      	ldrb	r3, [r0, #5]
    3f86:	42ab      	cmp	r3, r5
    3f88:	d007      	beq.n	3f9a <usb_find_cfg_desc+0x36>
	return (ptr[0] + (ptr[1] << 8));
    3f8a:	7883      	ldrb	r3, [r0, #2]
    3f8c:	78c2      	ldrb	r2, [r0, #3]
    3f8e:	0212      	lsls	r2, r2, #8
    3f90:	189b      	adds	r3, r3, r2
    3f92:	b29b      	uxth	r3, r3
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    3f94:	18c0      	adds	r0, r0, r3
    3f96:	e7ed      	b.n	3f74 <usb_find_cfg_desc+0x10>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    3f98:	2000      	movs	r0, #0
}
    3f9a:	bd70      	pop	{r4, r5, r6, pc}
		_desc_len_check();
    3f9c:	2000      	movs	r0, #0
    3f9e:	e7fc      	b.n	3f9a <usb_find_cfg_desc+0x36>
	return NULL;
    3fa0:	2000      	movs	r0, #0
    3fa2:	e7fa      	b.n	3f9a <usb_find_cfg_desc+0x36>
    3fa4:	00003f21 	.word	0x00003f21

00003fa8 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    3fa8:	b570      	push	{r4, r5, r6, lr}
    3faa:	000d      	movs	r5, r1
    3fac:	0016      	movs	r6, r2
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    3fae:	2400      	movs	r4, #0
    3fb0:	42a8      	cmp	r0, r5
    3fb2:	d20e      	bcs.n	3fd2 <usb_find_str_desc+0x2a>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    3fb4:	2203      	movs	r2, #3
    3fb6:	0029      	movs	r1, r5
    3fb8:	4b08      	ldr	r3, [pc, #32]	; (3fdc <usb_find_str_desc+0x34>)
    3fba:	4798      	blx	r3
		if (desc) {
    3fbc:	2800      	cmp	r0, #0
    3fbe:	d009      	beq.n	3fd4 <usb_find_str_desc+0x2c>
	return desc[0];
    3fc0:	7803      	ldrb	r3, [r0, #0]
			_desc_len_check();
    3fc2:	2b01      	cmp	r3, #1
    3fc4:	d907      	bls.n	3fd6 <usb_find_str_desc+0x2e>
			if (i == str_index) {
    3fc6:	42b4      	cmp	r4, r6
    3fc8:	d004      	beq.n	3fd4 <usb_find_str_desc+0x2c>
				return desc;
			}
			i++;
    3fca:	3401      	adds	r4, #1
    3fcc:	b2e4      	uxtb	r4, r4
	return (desc + usb_desc_len(desc));
    3fce:	18c0      	adds	r0, r0, r3
    3fd0:	e7ee      	b.n	3fb0 <usb_find_str_desc+0x8>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    3fd2:	2000      	movs	r0, #0
}
    3fd4:	bd70      	pop	{r4, r5, r6, pc}
			_desc_len_check();
    3fd6:	2000      	movs	r0, #0
    3fd8:	e7fc      	b.n	3fd4 <usb_find_str_desc+0x2c>
    3fda:	46c0      	nop			; (mov r8, r8)
    3fdc:	00003f21 	.word	0x00003f21

00003fe0 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    3fe0:	b510      	push	{r4, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    3fe2:	4806      	ldr	r0, [pc, #24]	; (3ffc <cdc_device_acm_init+0x1c>)
    3fe4:	3040      	adds	r0, #64	; 0x40
    3fe6:	4b06      	ldr	r3, [pc, #24]	; (4000 <cdc_device_acm_init+0x20>)
    3fe8:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    3fea:	4b06      	ldr	r3, [pc, #24]	; (4004 <cdc_device_acm_init+0x24>)
    3fec:	4798      	blx	r3

	usbdc_start(single_desc);
    3fee:	4806      	ldr	r0, [pc, #24]	; (4008 <cdc_device_acm_init+0x28>)
    3ff0:	4b06      	ldr	r3, [pc, #24]	; (400c <cdc_device_acm_init+0x2c>)
    3ff2:	4798      	blx	r3
	usbdc_attach();
    3ff4:	4b06      	ldr	r3, [pc, #24]	; (4010 <cdc_device_acm_init+0x30>)
    3ff6:	4798      	blx	r3
}
    3ff8:	bd10      	pop	{r4, pc}
    3ffa:	46c0      	nop			; (mov r8, r8)
    3ffc:	2000065c 	.word	0x2000065c
    4000:	00003e49 	.word	0x00003e49
    4004:	000036c5 	.word	0x000036c5
    4008:	20000008 	.word	0x20000008
    400c:	00003ec1 	.word	0x00003ec1
    4010:	00003ef9 	.word	0x00003ef9

00004014 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    4014:	b510      	push	{r4, lr}

	cdc_device_acm_init();
    4016:	4b01      	ldr	r3, [pc, #4]	; (401c <usb_init+0x8>)
    4018:	4798      	blx	r3
}
    401a:	bd10      	pop	{r4, pc}
    401c:	00003fe1 	.word	0x00003fe1

00004020 <__ffssi2>:
    4020:	b510      	push	{r4, lr}
    4022:	2300      	movs	r3, #0
    4024:	2800      	cmp	r0, #0
    4026:	d002      	beq.n	402e <__ffssi2+0xe>
    4028:	f000 f804 	bl	4034 <__ctzsi2>
    402c:	1c43      	adds	r3, r0, #1
    402e:	0018      	movs	r0, r3
    4030:	bd10      	pop	{r4, pc}
    4032:	46c0      	nop			; (mov r8, r8)

00004034 <__ctzsi2>:
    4034:	4241      	negs	r1, r0
    4036:	4008      	ands	r0, r1
    4038:	211c      	movs	r1, #28
    403a:	2301      	movs	r3, #1
    403c:	041b      	lsls	r3, r3, #16
    403e:	4298      	cmp	r0, r3
    4040:	d301      	bcc.n	4046 <__ctzsi2+0x12>
    4042:	0c00      	lsrs	r0, r0, #16
    4044:	3910      	subs	r1, #16
    4046:	0a1b      	lsrs	r3, r3, #8
    4048:	4298      	cmp	r0, r3
    404a:	d301      	bcc.n	4050 <__ctzsi2+0x1c>
    404c:	0a00      	lsrs	r0, r0, #8
    404e:	3908      	subs	r1, #8
    4050:	091b      	lsrs	r3, r3, #4
    4052:	4298      	cmp	r0, r3
    4054:	d301      	bcc.n	405a <__ctzsi2+0x26>
    4056:	0900      	lsrs	r0, r0, #4
    4058:	3904      	subs	r1, #4
    405a:	a202      	add	r2, pc, #8	; (adr r2, 4064 <__ctzsi2+0x30>)
    405c:	5c10      	ldrb	r0, [r2, r0]
    405e:	1a40      	subs	r0, r0, r1
    4060:	4770      	bx	lr
    4062:	46c0      	nop			; (mov r8, r8)
    4064:	1d1d1c1b 	.word	0x1d1d1c1b
    4068:	1e1e1e1e 	.word	0x1e1e1e1e
    406c:	1f1f1f1f 	.word	0x1f1f1f1f
    4070:	1f1f1f1f 	.word	0x1f1f1f1f

00004074 <__libc_init_array>:
    4074:	b570      	push	{r4, r5, r6, lr}
    4076:	2600      	movs	r6, #0
    4078:	4d0c      	ldr	r5, [pc, #48]	; (40ac <__libc_init_array+0x38>)
    407a:	4c0d      	ldr	r4, [pc, #52]	; (40b0 <__libc_init_array+0x3c>)
    407c:	1b64      	subs	r4, r4, r5
    407e:	10a4      	asrs	r4, r4, #2
    4080:	42a6      	cmp	r6, r4
    4082:	d109      	bne.n	4098 <__libc_init_array+0x24>
    4084:	2600      	movs	r6, #0
    4086:	f000 f95d 	bl	4344 <_init>
    408a:	4d0a      	ldr	r5, [pc, #40]	; (40b4 <__libc_init_array+0x40>)
    408c:	4c0a      	ldr	r4, [pc, #40]	; (40b8 <__libc_init_array+0x44>)
    408e:	1b64      	subs	r4, r4, r5
    4090:	10a4      	asrs	r4, r4, #2
    4092:	42a6      	cmp	r6, r4
    4094:	d105      	bne.n	40a2 <__libc_init_array+0x2e>
    4096:	bd70      	pop	{r4, r5, r6, pc}
    4098:	00b3      	lsls	r3, r6, #2
    409a:	58eb      	ldr	r3, [r5, r3]
    409c:	4798      	blx	r3
    409e:	3601      	adds	r6, #1
    40a0:	e7ee      	b.n	4080 <__libc_init_array+0xc>
    40a2:	00b3      	lsls	r3, r6, #2
    40a4:	58eb      	ldr	r3, [r5, r3]
    40a6:	4798      	blx	r3
    40a8:	3601      	adds	r6, #1
    40aa:	e7f2      	b.n	4092 <__libc_init_array+0x1e>
    40ac:	00004350 	.word	0x00004350
    40b0:	00004350 	.word	0x00004350
    40b4:	00004350 	.word	0x00004350
    40b8:	00004354 	.word	0x00004354

000040bc <memcpy>:
    40bc:	2300      	movs	r3, #0
    40be:	b510      	push	{r4, lr}
    40c0:	429a      	cmp	r2, r3
    40c2:	d100      	bne.n	40c6 <memcpy+0xa>
    40c4:	bd10      	pop	{r4, pc}
    40c6:	5ccc      	ldrb	r4, [r1, r3]
    40c8:	54c4      	strb	r4, [r0, r3]
    40ca:	3301      	adds	r3, #1
    40cc:	e7f8      	b.n	40c0 <memcpy+0x4>

000040ce <memset>:
    40ce:	0003      	movs	r3, r0
    40d0:	1882      	adds	r2, r0, r2
    40d2:	4293      	cmp	r3, r2
    40d4:	d100      	bne.n	40d8 <memset+0xa>
    40d6:	4770      	bx	lr
    40d8:	7019      	strb	r1, [r3, #0]
    40da:	3301      	adds	r3, #1
    40dc:	e7f9      	b.n	40d2 <memset+0x4>
    40de:	0000      	movs	r0, r0
    40e0:	682f2e2e 	.word	0x682f2e2e
    40e4:	732f6c61 	.word	0x732f6c61
    40e8:	682f6372 	.word	0x682f6372
    40ec:	645f6c61 	.word	0x645f6c61
    40f0:	735f6361 	.word	0x735f6361
    40f4:	2e636e79 	.word	0x2e636e79
    40f8:	00000063 	.word	0x00000063
    40fc:	682f2e2e 	.word	0x682f2e2e
    4100:	732f6c61 	.word	0x732f6c61
    4104:	682f6372 	.word	0x682f6372
    4108:	735f6c61 	.word	0x735f6c61
    410c:	6d5f6970 	.word	0x6d5f6970
    4110:	6e79735f 	.word	0x6e79735f
    4114:	00632e63 	.word	0x00632e63
    4118:	682f2e2e 	.word	0x682f2e2e
    411c:	732f6c61 	.word	0x732f6c61
    4120:	682f6372 	.word	0x682f6372
    4124:	745f6c61 	.word	0x745f6c61
    4128:	72656d69 	.word	0x72656d69
    412c:	0000632e 	.word	0x0000632e
    4130:	682f2e2e 	.word	0x682f2e2e
    4134:	732f6c61 	.word	0x732f6c61
    4138:	682f6372 	.word	0x682f6372
    413c:	755f6c61 	.word	0x755f6c61
    4140:	74726173 	.word	0x74726173
    4144:	7973615f 	.word	0x7973615f
    4148:	632e636e 	.word	0x632e636e
    414c:	00000000 	.word	0x00000000
    4150:	682f2e2e 	.word	0x682f2e2e
    4154:	752f6c61 	.word	0x752f6c61
    4158:	736c6974 	.word	0x736c6974
    415c:	6372732f 	.word	0x6372732f
    4160:	6974752f 	.word	0x6974752f
    4164:	6c5f736c 	.word	0x6c5f736c
    4168:	2e747369 	.word	0x2e747369
    416c:	00000063 	.word	0x00000063
    4170:	682f2e2e 	.word	0x682f2e2e
    4174:	752f6c61 	.word	0x752f6c61
    4178:	736c6974 	.word	0x736c6974
    417c:	6372732f 	.word	0x6372732f
    4180:	6974752f 	.word	0x6974752f
    4184:	725f736c 	.word	0x725f736c
    4188:	62676e69 	.word	0x62676e69
    418c:	65666675 	.word	0x65666675
    4190:	00632e72 	.word	0x00632e72
    4194:	682f2e2e 	.word	0x682f2e2e
    4198:	642f6c70 	.word	0x642f6c70
    419c:	682f6361 	.word	0x682f6361
    41a0:	645f6c70 	.word	0x645f6c70
    41a4:	632e6361 	.word	0x632e6361
    41a8:	00000000 	.word	0x00000000

000041ac <_map>:
    41ac:	0000000e 0000000e 682f2e2e 652f6c70     ........../hpl/e
    41bc:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....

000041cc <_usarts>:
    41cc:	00000003 40100004 00030000 0000ff2e     .......@........
    41dc:	00000000                                ....

000041e0 <_i2cms>:
	...

000041f8 <_i2css>:
	...

00004208 <sercomspi_regs>:
    4208:	0020000c 00020000 00000000 01ff003b     .. .........;...
    4218:	20000c00 02000000 00000000 ff000500     ... ............
    4228:	000c0101 00000030 00000002 00170000     ....0...........
    4238:	000201ff 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    4248:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..

00004258 <_tcs>:
    4258:	03680003 00000000 00000000 00001770     ..h.........p...
    4268:	00000000 03680004 00000000 00000000     ......h.........
    4278:	0000007d 00000000 682f2e2e 742f6c70     }........./hpl/t
    4288:	70682f63 63745f6c 0000632e 00004a25     c/hpl_tc.c..%J..
    4298:	00000804                                ....

0000429c <_usb_ep_cfgs>:
    429c:	200005d8 00000000 00000040 20000598     ... ....@...... 
    42ac:	00000000 00000040 20000558 00000000     ....@...X.. ....
    42bc:	00000040 20000518 00000000 00000040     @...... ....@...
    42cc:	200004d8 00000000 00000040 20000498     ... ....@...... 
    42dc:	00000000 00000040 20000458 00000000     ....@...X.. ....
    42ec:	00000040 20000418 00000000 00000040     @...... ....@...
    42fc:	00003b3e 00003b1a 00003b3e 00003b20     >;...;..>;.. ;..
    430c:	00003b3e 00003aea 00003b3e 00003b3e     >;...:..>;..>;..
    431c:	00003b3e 00003afc 00003b3e 00003b26     >;...:..>;..&;..
    432c:	752f2e2e 642f6273 63697665 73752f65     ../usb/device/us
    433c:	2e636462 00000063                       bdc.c...

00004344 <_init>:
    4344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4346:	46c0      	nop			; (mov r8, r8)
    4348:	bcf8      	pop	{r3, r4, r5, r6, r7}
    434a:	bc08      	pop	{r3}
    434c:	469e      	mov	lr, r3
    434e:	4770      	bx	lr

00004350 <__init_array_start>:
    4350:	000000dd 	.word	0x000000dd

00004354 <_fini>:
    4354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4356:	46c0      	nop			; (mov r8, r8)
    4358:	bcf8      	pop	{r3, r4, r5, r6, r7}
    435a:	bc08      	pop	{r3}
    435c:	469e      	mov	lr, r3
    435e:	4770      	bx	lr

00004360 <__fini_array_start>:
    4360:	000000b5 	.word	0x000000b5
