
SAMD21_BSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000043c8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000cc  20000000  000043c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000006c0  200000cc  00004494  000200cc  2**2
                  ALLOC
  3 .stack        00002004  2000078c  00004b54  000200cc  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY
  6 .debug_info   00035ee7  00000000  00000000  0002014d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004723  00000000  00000000  00056034  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0001575b  00000000  00000000  0005a757  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000fc8  00000000  00000000  0006feb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001118  00000000  00000000  00070e7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001e8d3  00000000  00000000  00071f92  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00017218  00000000  00000000  00090865  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00090153  00000000  00000000  000a7a7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002e3c  00000000  00000000  00137bd0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	90 27 00 20 35 01 00 00 31 01 00 00 31 01 00 00     .'. 5...1...1...
	...
      2c:	31 01 00 00 00 00 00 00 00 00 00 00 31 01 00 00     1...........1...
      3c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      4c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      5c:	29 2c 00 00 31 01 00 00 31 01 00 00 31 01 00 00     ),..1...1...1...
      6c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      7c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      8c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      9c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      ac:	31 01 00 00 00 00 00 00                             1.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000cc 	.word	0x200000cc
      d4:	00000000 	.word	0x00000000
      d8:	000043c8 	.word	0x000043c8

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000d0 	.word	0x200000d0
     108:	000043c8 	.word	0x000043c8
     10c:	000043c8 	.word	0x000043c8
     110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     114:	b510      	push	{r4, lr}
	system_init();
     116:	4b03      	ldr	r3, [pc, #12]	; (124 <atmel_start_init+0x10>)
     118:	4798      	blx	r3
	usb_init();
     11a:	4b03      	ldr	r3, [pc, #12]	; (128 <atmel_start_init+0x14>)
     11c:	4798      	blx	r3
	stdio_redirect_init();
     11e:	4b03      	ldr	r3, [pc, #12]	; (12c <atmel_start_init+0x18>)
     120:	4798      	blx	r3
}
     122:	bd10      	pop	{r4, pc}
     124:	000006f5 	.word	0x000006f5
     128:	00003939 	.word	0x00003939
     12c:	00002d05 	.word	0x00002d05

00000130 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     130:	e7fe      	b.n	130 <Dummy_Handler>
	...

00000134 <Reset_Handler>:
{
     134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     136:	4a23      	ldr	r2, [pc, #140]	; (1c4 <Reset_Handler+0x90>)
     138:	4b23      	ldr	r3, [pc, #140]	; (1c8 <Reset_Handler+0x94>)
     13a:	429a      	cmp	r2, r3
     13c:	d009      	beq.n	152 <Reset_Handler+0x1e>
     13e:	4b22      	ldr	r3, [pc, #136]	; (1c8 <Reset_Handler+0x94>)
     140:	4a20      	ldr	r2, [pc, #128]	; (1c4 <Reset_Handler+0x90>)
     142:	e003      	b.n	14c <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     144:	6811      	ldr	r1, [r2, #0]
     146:	6019      	str	r1, [r3, #0]
     148:	3304      	adds	r3, #4
     14a:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     14c:	491f      	ldr	r1, [pc, #124]	; (1cc <Reset_Handler+0x98>)
     14e:	428b      	cmp	r3, r1
     150:	d3f8      	bcc.n	144 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     152:	4b1f      	ldr	r3, [pc, #124]	; (1d0 <Reset_Handler+0x9c>)
     154:	e002      	b.n	15c <Reset_Handler+0x28>
                *pDest++ = 0;
     156:	2200      	movs	r2, #0
     158:	601a      	str	r2, [r3, #0]
     15a:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     15c:	4a1d      	ldr	r2, [pc, #116]	; (1d4 <Reset_Handler+0xa0>)
     15e:	4293      	cmp	r3, r2
     160:	d3f9      	bcc.n	156 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     162:	4a1d      	ldr	r2, [pc, #116]	; (1d8 <Reset_Handler+0xa4>)
     164:	21ff      	movs	r1, #255	; 0xff
     166:	4b1d      	ldr	r3, [pc, #116]	; (1dc <Reset_Handler+0xa8>)
     168:	438b      	bics	r3, r1
     16a:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     16c:	39fd      	subs	r1, #253	; 0xfd
     16e:	2390      	movs	r3, #144	; 0x90
     170:	005b      	lsls	r3, r3, #1
     172:	4a1b      	ldr	r2, [pc, #108]	; (1e0 <Reset_Handler+0xac>)
     174:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     176:	4a1b      	ldr	r2, [pc, #108]	; (1e4 <Reset_Handler+0xb0>)
     178:	78d3      	ldrb	r3, [r2, #3]
     17a:	2503      	movs	r5, #3
     17c:	43ab      	bics	r3, r5
     17e:	2402      	movs	r4, #2
     180:	4323      	orrs	r3, r4
     182:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     184:	78d3      	ldrb	r3, [r2, #3]
     186:	270c      	movs	r7, #12
     188:	43bb      	bics	r3, r7
     18a:	2608      	movs	r6, #8
     18c:	4333      	orrs	r3, r6
     18e:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     190:	4b15      	ldr	r3, [pc, #84]	; (1e8 <Reset_Handler+0xb4>)
     192:	7b98      	ldrb	r0, [r3, #14]
     194:	2230      	movs	r2, #48	; 0x30
     196:	4390      	bics	r0, r2
     198:	2220      	movs	r2, #32
     19a:	4310      	orrs	r0, r2
     19c:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     19e:	7b99      	ldrb	r1, [r3, #14]
     1a0:	43b9      	bics	r1, r7
     1a2:	4331      	orrs	r1, r6
     1a4:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1a6:	7b9a      	ldrb	r2, [r3, #14]
     1a8:	43aa      	bics	r2, r5
     1aa:	4322      	orrs	r2, r4
     1ac:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     1ae:	4a0f      	ldr	r2, [pc, #60]	; (1ec <Reset_Handler+0xb8>)
     1b0:	6851      	ldr	r1, [r2, #4]
     1b2:	2380      	movs	r3, #128	; 0x80
     1b4:	430b      	orrs	r3, r1
     1b6:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     1b8:	4b0d      	ldr	r3, [pc, #52]	; (1f0 <Reset_Handler+0xbc>)
     1ba:	4798      	blx	r3
        main();
     1bc:	4b0d      	ldr	r3, [pc, #52]	; (1f4 <Reset_Handler+0xc0>)
     1be:	4798      	blx	r3
     1c0:	e7fe      	b.n	1c0 <Reset_Handler+0x8c>
     1c2:	46c0      	nop			; (mov r8, r8)
     1c4:	000043c8 	.word	0x000043c8
     1c8:	20000000 	.word	0x20000000
     1cc:	200000cc 	.word	0x200000cc
     1d0:	200000cc 	.word	0x200000cc
     1d4:	2000078c 	.word	0x2000078c
     1d8:	e000ed00 	.word	0xe000ed00
     1dc:	00000000 	.word	0x00000000
     1e0:	41007000 	.word	0x41007000
     1e4:	41005000 	.word	0x41005000
     1e8:	41004800 	.word	0x41004800
     1ec:	41004000 	.word	0x41004000
     1f0:	00003945 	.word	0x00003945
     1f4:	00002c35 	.word	0x00002c35

000001f8 <SPI_ADF_PORT_init>:
struct usart_sync_descriptor TARGET_IO;

struct dac_sync_descriptor DAC_0;

void SPI_ADF_PORT_init(void)
{
     1f8:	b5f0      	push	{r4, r5, r6, r7, lr}
     1fa:	46c6      	mov	lr, r8
     1fc:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     1fe:	22c0      	movs	r2, #192	; 0xc0
     200:	05d2      	lsls	r2, r2, #23
     202:	2310      	movs	r3, #16
     204:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     206:	6093      	str	r3, [r2, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     208:	4b25      	ldr	r3, [pc, #148]	; (2a0 <SPI_ADF_PORT_init+0xa8>)
     20a:	4926      	ldr	r1, [pc, #152]	; (2a4 <SPI_ADF_PORT_init+0xac>)
     20c:	6299      	str	r1, [r3, #40]	; 0x28
     20e:	21c0      	movs	r1, #192	; 0xc0
     210:	0609      	lsls	r1, r1, #24
     212:	468c      	mov	ip, r1
     214:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     216:	2044      	movs	r0, #68	; 0x44
     218:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     21a:	2701      	movs	r7, #1
     21c:	43b9      	bics	r1, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     21e:	2601      	movs	r6, #1
     220:	4331      	orrs	r1, r6
     222:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     224:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     226:	2132      	movs	r1, #50	; 0x32
     228:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     22a:	250f      	movs	r5, #15
     22c:	43a8      	bics	r0, r5
	tmp |= PORT_PMUX_PMUXE(data);
     22e:	2403      	movs	r4, #3
     230:	46a0      	mov	r8, r4
     232:	4644      	mov	r4, r8
     234:	4320      	orrs	r0, r4
     236:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     238:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     23a:	2020      	movs	r0, #32
     23c:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     23e:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     240:	4819      	ldr	r0, [pc, #100]	; (2a8 <SPI_ADF_PORT_init+0xb0>)
     242:	6298      	str	r0, [r3, #40]	; 0x28
     244:	4660      	mov	r0, ip
     246:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     248:	2045      	movs	r0, #69	; 0x45
     24a:	4684      	mov	ip, r0
     24c:	5c18      	ldrb	r0, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     24e:	43b8      	bics	r0, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     250:	4330      	orrs	r0, r6
     252:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     254:	4664      	mov	r4, ip
     256:	5518      	strb	r0, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     258:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     25a:	3c36      	subs	r4, #54	; 0x36
     25c:	4020      	ands	r0, r4
	tmp |= PORT_PMUX_PMUXO(data);
     25e:	2430      	movs	r4, #48	; 0x30
     260:	46a4      	mov	ip, r4
     262:	4664      	mov	r4, ip
     264:	4320      	orrs	r0, r4
     266:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     268:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     26a:	310e      	adds	r1, #14
     26c:	6051      	str	r1, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     26e:	4a0f      	ldr	r2, [pc, #60]	; (2ac <SPI_ADF_PORT_init+0xb4>)
     270:	629a      	str	r2, [r3, #40]	; 0x28
     272:	4a0f      	ldr	r2, [pc, #60]	; (2b0 <SPI_ADF_PORT_init+0xb8>)
     274:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     276:	2246      	movs	r2, #70	; 0x46
     278:	5c99      	ldrb	r1, [r3, r2]
     27a:	2004      	movs	r0, #4
     27c:	4381      	bics	r1, r0
     27e:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     280:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     282:	43b9      	bics	r1, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     284:	4331      	orrs	r1, r6
     286:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     288:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     28a:	2133      	movs	r1, #51	; 0x33
     28c:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     28e:	43aa      	bics	r2, r5
	tmp |= PORT_PMUX_PMUXE(data);
     290:	4640      	mov	r0, r8
     292:	4302      	orrs	r2, r0
     294:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     296:	545a      	strb	r2, [r3, r1]
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA06, PINMUX_PA06D_SERCOM0_PAD2);
}
     298:	bc04      	pop	{r2}
     29a:	4690      	mov	r8, r2
     29c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     29e:	46c0      	nop			; (mov r8, r8)
     2a0:	41004400 	.word	0x41004400
     2a4:	40000010 	.word	0x40000010
     2a8:	40000020 	.word	0x40000020
     2ac:	40020040 	.word	0x40020040
     2b0:	c0020000 	.word	0xc0020000

000002b4 <SPI_ADF_CLOCK_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     2b4:	4a04      	ldr	r2, [pc, #16]	; (2c8 <SPI_ADF_CLOCK_init+0x14>)
     2b6:	6a13      	ldr	r3, [r2, #32]
     2b8:	2104      	movs	r1, #4
     2ba:	430b      	orrs	r3, r1
     2bc:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     2be:	4a03      	ldr	r2, [pc, #12]	; (2cc <SPI_ADF_CLOCK_init+0x18>)
     2c0:	4b03      	ldr	r3, [pc, #12]	; (2d0 <SPI_ADF_CLOCK_init+0x1c>)
     2c2:	805a      	strh	r2, [r3, #2]

void SPI_ADF_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM0);
	_gclk_enable_channel(SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC);
}
     2c4:	4770      	bx	lr
     2c6:	46c0      	nop			; (mov r8, r8)
     2c8:	40000400 	.word	0x40000400
     2cc:	00004014 	.word	0x00004014
     2d0:	40000c00 	.word	0x40000c00

000002d4 <SPI_ADF_init>:

void SPI_ADF_init(void)
{
     2d4:	b510      	push	{r4, lr}
	SPI_ADF_CLOCK_init();
     2d6:	4b04      	ldr	r3, [pc, #16]	; (2e8 <SPI_ADF_init+0x14>)
     2d8:	4798      	blx	r3
	spi_m_sync_init(&SPI_ADF, SERCOM0);
     2da:	4904      	ldr	r1, [pc, #16]	; (2ec <SPI_ADF_init+0x18>)
     2dc:	4804      	ldr	r0, [pc, #16]	; (2f0 <SPI_ADF_init+0x1c>)
     2de:	4b05      	ldr	r3, [pc, #20]	; (2f4 <SPI_ADF_init+0x20>)
     2e0:	4798      	blx	r3
	SPI_ADF_PORT_init();
     2e2:	4b05      	ldr	r3, [pc, #20]	; (2f8 <SPI_ADF_init+0x24>)
     2e4:	4798      	blx	r3
}
     2e6:	bd10      	pop	{r4, pc}
     2e8:	000002b5 	.word	0x000002b5
     2ec:	42000800 	.word	0x42000800
     2f0:	20000758 	.word	0x20000758
     2f4:	00000909 	.word	0x00000909
     2f8:	000001f9 	.word	0x000001f9

000002fc <SPI_LMX_PORT_init>:

void SPI_LMX_PORT_init(void)
{
     2fc:	b5f0      	push	{r4, r5, r6, r7, lr}
     2fe:	46c6      	mov	lr, r8
     300:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     302:	22c0      	movs	r2, #192	; 0xc0
     304:	05d2      	lsls	r2, r2, #23
     306:	2380      	movs	r3, #128	; 0x80
     308:	025b      	lsls	r3, r3, #9
     30a:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     30c:	6093      	str	r3, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     30e:	4b26      	ldr	r3, [pc, #152]	; (3a8 <SPI_LMX_PORT_init+0xac>)
     310:	2180      	movs	r1, #128	; 0x80
     312:	05c9      	lsls	r1, r1, #23
     314:	468c      	mov	ip, r1
     316:	6299      	str	r1, [r3, #40]	; 0x28
     318:	4924      	ldr	r1, [pc, #144]	; (3ac <SPI_LMX_PORT_init+0xb0>)
     31a:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     31c:	2050      	movs	r0, #80	; 0x50
     31e:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     320:	2701      	movs	r7, #1
     322:	43b9      	bics	r1, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     324:	2601      	movs	r6, #1
     326:	4331      	orrs	r1, r6
     328:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     32a:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     32c:	2138      	movs	r1, #56	; 0x38
     32e:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     330:	250f      	movs	r5, #15
     332:	43a8      	bics	r0, r5
	tmp |= PORT_PMUX_PMUXE(data);
     334:	2402      	movs	r4, #2
     336:	46a0      	mov	r8, r4
     338:	4644      	mov	r4, r8
     33a:	4320      	orrs	r0, r4
     33c:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     33e:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     340:	2080      	movs	r0, #128	; 0x80
     342:	0280      	lsls	r0, r0, #10
     344:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     346:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     348:	4660      	mov	r0, ip
     34a:	6298      	str	r0, [r3, #40]	; 0x28
     34c:	4818      	ldr	r0, [pc, #96]	; (3b0 <SPI_LMX_PORT_init+0xb4>)
     34e:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     350:	2051      	movs	r0, #81	; 0x51
     352:	4684      	mov	ip, r0
     354:	5c18      	ldrb	r0, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     356:	43b8      	bics	r0, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     358:	4330      	orrs	r0, r6
     35a:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     35c:	4664      	mov	r4, ip
     35e:	5518      	strb	r0, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     360:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     362:	3c42      	subs	r4, #66	; 0x42
     364:	4020      	ands	r0, r4
	tmp |= PORT_PMUX_PMUXO(data);
     366:	2420      	movs	r4, #32
     368:	46a4      	mov	ip, r4
     36a:	4664      	mov	r4, ip
     36c:	4320      	orrs	r0, r4
     36e:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     370:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     372:	2180      	movs	r1, #128	; 0x80
     374:	02c9      	lsls	r1, r1, #11
     376:	6051      	str	r1, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     378:	4a0e      	ldr	r2, [pc, #56]	; (3b4 <SPI_LMX_PORT_init+0xb8>)
     37a:	629a      	str	r2, [r3, #40]	; 0x28
     37c:	4a0e      	ldr	r2, [pc, #56]	; (3b8 <SPI_LMX_PORT_init+0xbc>)
     37e:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     380:	2252      	movs	r2, #82	; 0x52
     382:	5c99      	ldrb	r1, [r3, r2]
     384:	2004      	movs	r0, #4
     386:	4381      	bics	r1, r0
     388:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     38a:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     38c:	43b9      	bics	r1, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     38e:	4331      	orrs	r1, r6
     390:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     392:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     394:	2139      	movs	r1, #57	; 0x39
     396:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     398:	43aa      	bics	r2, r5
	tmp |= PORT_PMUX_PMUXE(data);
     39a:	4640      	mov	r0, r8
     39c:	4302      	orrs	r2, r0
     39e:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3a0:	545a      	strb	r2, [r3, r1]
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA18, PINMUX_PA18C_SERCOM1_PAD2);
}
     3a2:	bc04      	pop	{r2}
     3a4:	4690      	mov	r8, r2
     3a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3a8:	41004400 	.word	0x41004400
     3ac:	c0000001 	.word	0xc0000001
     3b0:	c0000002 	.word	0xc0000002
     3b4:	40020000 	.word	0x40020000
     3b8:	c0020004 	.word	0xc0020004

000003bc <SPI_LMX_CLOCK_init>:
     3bc:	4a04      	ldr	r2, [pc, #16]	; (3d0 <SPI_LMX_CLOCK_init+0x14>)
     3be:	6a13      	ldr	r3, [r2, #32]
     3c0:	2108      	movs	r1, #8
     3c2:	430b      	orrs	r3, r1
     3c4:	6213      	str	r3, [r2, #32]
     3c6:	4a03      	ldr	r2, [pc, #12]	; (3d4 <SPI_LMX_CLOCK_init+0x18>)
     3c8:	4b03      	ldr	r3, [pc, #12]	; (3d8 <SPI_LMX_CLOCK_init+0x1c>)
     3ca:	805a      	strh	r2, [r3, #2]

void SPI_LMX_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM1);
	_gclk_enable_channel(SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC);
}
     3cc:	4770      	bx	lr
     3ce:	46c0      	nop			; (mov r8, r8)
     3d0:	40000400 	.word	0x40000400
     3d4:	00004015 	.word	0x00004015
     3d8:	40000c00 	.word	0x40000c00

000003dc <SPI_LMX_init>:

void SPI_LMX_init(void)
{
     3dc:	b510      	push	{r4, lr}
	SPI_LMX_CLOCK_init();
     3de:	4b04      	ldr	r3, [pc, #16]	; (3f0 <SPI_LMX_init+0x14>)
     3e0:	4798      	blx	r3
	spi_m_sync_init(&SPI_LMX, SERCOM1);
     3e2:	4904      	ldr	r1, [pc, #16]	; (3f4 <SPI_LMX_init+0x18>)
     3e4:	4804      	ldr	r0, [pc, #16]	; (3f8 <SPI_LMX_init+0x1c>)
     3e6:	4b05      	ldr	r3, [pc, #20]	; (3fc <SPI_LMX_init+0x20>)
     3e8:	4798      	blx	r3
	SPI_LMX_PORT_init();
     3ea:	4b05      	ldr	r3, [pc, #20]	; (400 <SPI_LMX_init+0x24>)
     3ec:	4798      	blx	r3
}
     3ee:	bd10      	pop	{r4, pc}
     3f0:	000003bd 	.word	0x000003bd
     3f4:	42000c00 	.word	0x42000c00
     3f8:	20000728 	.word	0x20000728
     3fc:	00000909 	.word	0x00000909
     400:	000002fd 	.word	0x000002fd

00000404 <TARGET_IO_PORT_init>:

void TARGET_IO_PORT_init(void)
{
     404:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     406:	4b0f      	ldr	r3, [pc, #60]	; (444 <TARGET_IO_PORT_init+0x40>)
     408:	2256      	movs	r2, #86	; 0x56
     40a:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     40c:	2501      	movs	r5, #1
     40e:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     410:	2401      	movs	r4, #1
     412:	4321      	orrs	r1, r4
     414:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     416:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     418:	203b      	movs	r0, #59	; 0x3b
     41a:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     41c:	3a47      	subs	r2, #71	; 0x47
     41e:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     420:	2202      	movs	r2, #2
     422:	4311      	orrs	r1, r2
     424:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     426:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     428:	2157      	movs	r1, #87	; 0x57
     42a:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     42c:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     42e:	4322      	orrs	r2, r4
     430:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     432:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     434:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     436:	3948      	subs	r1, #72	; 0x48
     438:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     43a:	2120      	movs	r1, #32
     43c:	430a      	orrs	r2, r1
     43e:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     440:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PA22, PINMUX_PA22C_SERCOM3_PAD0);

	gpio_set_pin_function(PA23, PINMUX_PA23C_SERCOM3_PAD1);
}
     442:	bd30      	pop	{r4, r5, pc}
     444:	41004400 	.word	0x41004400

00000448 <TARGET_IO_CLOCK_init>:
     448:	4a04      	ldr	r2, [pc, #16]	; (45c <TARGET_IO_CLOCK_init+0x14>)
     44a:	6a13      	ldr	r3, [r2, #32]
     44c:	2120      	movs	r1, #32
     44e:	430b      	orrs	r3, r1
     450:	6213      	str	r3, [r2, #32]
     452:	4a03      	ldr	r2, [pc, #12]	; (460 <TARGET_IO_CLOCK_init+0x18>)
     454:	4b03      	ldr	r3, [pc, #12]	; (464 <TARGET_IO_CLOCK_init+0x1c>)
     456:	805a      	strh	r2, [r3, #2]

void TARGET_IO_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM3);
	_gclk_enable_channel(SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC);
}
     458:	4770      	bx	lr
     45a:	46c0      	nop			; (mov r8, r8)
     45c:	40000400 	.word	0x40000400
     460:	00004017 	.word	0x00004017
     464:	40000c00 	.word	0x40000c00

00000468 <TARGET_IO_init>:

void TARGET_IO_init(void)
{
     468:	b510      	push	{r4, lr}
	TARGET_IO_CLOCK_init();
     46a:	4b05      	ldr	r3, [pc, #20]	; (480 <TARGET_IO_init+0x18>)
     46c:	4798      	blx	r3
	usart_sync_init(&TARGET_IO, SERCOM3, (void *)NULL);
     46e:	2200      	movs	r2, #0
     470:	4904      	ldr	r1, [pc, #16]	; (484 <TARGET_IO_init+0x1c>)
     472:	4805      	ldr	r0, [pc, #20]	; (488 <TARGET_IO_init+0x20>)
     474:	4b05      	ldr	r3, [pc, #20]	; (48c <TARGET_IO_init+0x24>)
     476:	4798      	blx	r3
	TARGET_IO_PORT_init();
     478:	4b05      	ldr	r3, [pc, #20]	; (490 <TARGET_IO_init+0x28>)
     47a:	4798      	blx	r3
}
     47c:	bd10      	pop	{r4, pc}
     47e:	46c0      	nop			; (mov r8, r8)
     480:	00000449 	.word	0x00000449
     484:	42001400 	.word	0x42001400
     488:	20000740 	.word	0x20000740
     48c:	00000b01 	.word	0x00000b01
     490:	00000405 	.word	0x00000405

00000494 <SPI_ZCD_PORT_init>:

void SPI_ZCD_PORT_init(void)
{
     494:	b5f0      	push	{r4, r5, r6, r7, lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     496:	24c0      	movs	r4, #192	; 0xc0
     498:	05e4      	lsls	r4, r4, #23
     49a:	2380      	movs	r3, #128	; 0x80
     49c:	015b      	lsls	r3, r3, #5
     49e:	6163      	str	r3, [r4, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     4a0:	60a3      	str	r3, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4a2:	4b22      	ldr	r3, [pc, #136]	; (52c <SPI_ZCD_PORT_init+0x98>)
     4a4:	4a22      	ldr	r2, [pc, #136]	; (530 <SPI_ZCD_PORT_init+0x9c>)
     4a6:	629a      	str	r2, [r3, #40]	; 0x28
     4a8:	20c0      	movs	r0, #192	; 0xc0
     4aa:	0600      	lsls	r0, r0, #24
     4ac:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4ae:	214c      	movs	r1, #76	; 0x4c
     4b0:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     4b2:	2501      	movs	r5, #1
     4b4:	46ac      	mov	ip, r5
     4b6:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4b8:	2701      	movs	r7, #1
     4ba:	433a      	orrs	r2, r7
     4bc:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4be:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4c0:	3916      	subs	r1, #22
     4c2:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     4c4:	350e      	adds	r5, #14
     4c6:	43aa      	bics	r2, r5
	tmp |= PORT_PMUX_PMUXE(data);
     4c8:	2503      	movs	r5, #3
     4ca:	432a      	orrs	r2, r5
     4cc:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4ce:	545a      	strb	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4d0:	2280      	movs	r2, #128	; 0x80
     4d2:	0192      	lsls	r2, r2, #6
     4d4:	6162      	str	r2, [r4, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     4d6:	60a2      	str	r2, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4d8:	4a16      	ldr	r2, [pc, #88]	; (534 <SPI_ZCD_PORT_init+0xa0>)
     4da:	629a      	str	r2, [r3, #40]	; 0x28
     4dc:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4de:	204d      	movs	r0, #77	; 0x4d
     4e0:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     4e2:	4665      	mov	r5, ip
     4e4:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4e6:	433a      	orrs	r2, r7
     4e8:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4ea:	541a      	strb	r2, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4ec:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     4ee:	260f      	movs	r6, #15
     4f0:	4030      	ands	r0, r6
	tmp |= PORT_PMUX_PMUXO(data);
     4f2:	2530      	movs	r5, #48	; 0x30
     4f4:	4328      	orrs	r0, r5
     4f6:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4f8:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     4fa:	2280      	movs	r2, #128	; 0x80
     4fc:	0212      	lsls	r2, r2, #8
     4fe:	6062      	str	r2, [r4, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     500:	4a0d      	ldr	r2, [pc, #52]	; (538 <SPI_ZCD_PORT_init+0xa4>)
     502:	629a      	str	r2, [r3, #40]	; 0x28
     504:	4a0d      	ldr	r2, [pc, #52]	; (53c <SPI_ZCD_PORT_init+0xa8>)
     506:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     508:	224f      	movs	r2, #79	; 0x4f
     50a:	5c99      	ldrb	r1, [r3, r2]
     50c:	2004      	movs	r0, #4
     50e:	4381      	bics	r1, r0
     510:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     512:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     514:	4660      	mov	r0, ip
     516:	4381      	bics	r1, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     518:	4339      	orrs	r1, r7
     51a:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     51c:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     51e:	2137      	movs	r1, #55	; 0x37
     520:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     522:	4032      	ands	r2, r6
	tmp |= PORT_PMUX_PMUXO(data);
     524:	432a      	orrs	r2, r5
     526:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     528:	545a      	strb	r2, [r3, r1]
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA15, PINMUX_PA15D_SERCOM4_PAD3);
}
     52a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     52c:	41004400 	.word	0x41004400
     530:	40001000 	.word	0x40001000
     534:	40002000 	.word	0x40002000
     538:	40028000 	.word	0x40028000
     53c:	c0020000 	.word	0xc0020000

00000540 <SPI_ZCD_CLOCK_init>:
     540:	4a04      	ldr	r2, [pc, #16]	; (554 <SPI_ZCD_CLOCK_init+0x14>)
     542:	6a13      	ldr	r3, [r2, #32]
     544:	2140      	movs	r1, #64	; 0x40
     546:	430b      	orrs	r3, r1
     548:	6213      	str	r3, [r2, #32]
     54a:	4a03      	ldr	r2, [pc, #12]	; (558 <SPI_ZCD_CLOCK_init+0x18>)
     54c:	4b03      	ldr	r3, [pc, #12]	; (55c <SPI_ZCD_CLOCK_init+0x1c>)
     54e:	805a      	strh	r2, [r3, #2]

void SPI_ZCD_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM4);
	_gclk_enable_channel(SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC);
}
     550:	4770      	bx	lr
     552:	46c0      	nop			; (mov r8, r8)
     554:	40000400 	.word	0x40000400
     558:	00004018 	.word	0x00004018
     55c:	40000c00 	.word	0x40000c00

00000560 <SPI_ZCD_init>:

void SPI_ZCD_init(void)
{
     560:	b510      	push	{r4, lr}
	SPI_ZCD_CLOCK_init();
     562:	4b04      	ldr	r3, [pc, #16]	; (574 <SPI_ZCD_init+0x14>)
     564:	4798      	blx	r3
	spi_m_sync_init(&SPI_ZCD, SERCOM4);
     566:	4904      	ldr	r1, [pc, #16]	; (578 <SPI_ZCD_init+0x18>)
     568:	4804      	ldr	r0, [pc, #16]	; (57c <SPI_ZCD_init+0x1c>)
     56a:	4b05      	ldr	r3, [pc, #20]	; (580 <SPI_ZCD_init+0x20>)
     56c:	4798      	blx	r3
	SPI_ZCD_PORT_init();
     56e:	4b05      	ldr	r3, [pc, #20]	; (584 <SPI_ZCD_init+0x24>)
     570:	4798      	blx	r3
}
     572:	bd10      	pop	{r4, pc}
     574:	00000541 	.word	0x00000541
     578:	42001800 	.word	0x42001800
     57c:	20000770 	.word	0x20000770
     580:	00000909 	.word	0x00000909
     584:	00000495 	.word	0x00000495

00000588 <delay_driver_init>:

void delay_driver_init(void)
{
     588:	b510      	push	{r4, lr}
	delay_init(SysTick);
     58a:	4802      	ldr	r0, [pc, #8]	; (594 <delay_driver_init+0xc>)
     58c:	4b02      	ldr	r3, [pc, #8]	; (598 <delay_driver_init+0x10>)
     58e:	4798      	blx	r3
}
     590:	bd10      	pop	{r4, pc}
     592:	46c0      	nop			; (mov r8, r8)
     594:	e000e010 	.word	0xe000e010
     598:	00000885 	.word	0x00000885

0000059c <DAC_0_PORT_init>:

void DAC_0_PORT_init(void)
{
     59c:	b510      	push	{r4, lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     59e:	2204      	movs	r2, #4
     5a0:	23c0      	movs	r3, #192	; 0xc0
     5a2:	05db      	lsls	r3, r3, #23
     5a4:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5a6:	490a      	ldr	r1, [pc, #40]	; (5d0 <DAC_0_PORT_init+0x34>)
     5a8:	4b0a      	ldr	r3, [pc, #40]	; (5d4 <DAC_0_PORT_init+0x38>)
     5aa:	628b      	str	r3, [r1, #40]	; 0x28
     5ac:	23c0      	movs	r3, #192	; 0xc0
     5ae:	061b      	lsls	r3, r3, #24
     5b0:	628b      	str	r3, [r1, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5b2:	2342      	movs	r3, #66	; 0x42
     5b4:	5cca      	ldrb	r2, [r1, r3]
	tmp &= ~PORT_PINCFG_PMUXEN;
     5b6:	2001      	movs	r0, #1
     5b8:	4382      	bics	r2, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5ba:	4302      	orrs	r2, r0
     5bc:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5be:	54ca      	strb	r2, [r1, r3]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5c0:	2231      	movs	r2, #49	; 0x31
     5c2:	5c8b      	ldrb	r3, [r1, r2]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5c4:	240f      	movs	r4, #15
     5c6:	43a3      	bics	r3, r4
	tmp |= PORT_PMUX_PMUXE(data);
     5c8:	4303      	orrs	r3, r0
     5ca:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5cc:	548b      	strb	r3, [r1, r2]

	// Disable digital pin circuitry
	gpio_set_pin_direction(PA02, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PA02, PINMUX_PA02B_DAC_VOUT);
}
     5ce:	bd10      	pop	{r4, pc}
     5d0:	41004400 	.word	0x41004400
     5d4:	40000004 	.word	0x40000004

000005d8 <DAC_0_CLOCK_init>:
     5d8:	4a04      	ldr	r2, [pc, #16]	; (5ec <DAC_0_CLOCK_init+0x14>)
     5da:	6a11      	ldr	r1, [r2, #32]
     5dc:	2380      	movs	r3, #128	; 0x80
     5de:	02db      	lsls	r3, r3, #11
     5e0:	430b      	orrs	r3, r1
     5e2:	6213      	str	r3, [r2, #32]
     5e4:	4a02      	ldr	r2, [pc, #8]	; (5f0 <DAC_0_CLOCK_init+0x18>)
     5e6:	4b03      	ldr	r3, [pc, #12]	; (5f4 <DAC_0_CLOCK_init+0x1c>)
     5e8:	805a      	strh	r2, [r3, #2]
void DAC_0_CLOCK_init(void)
{

	_pm_enable_bus_clock(PM_BUS_APBC, DAC);
	_gclk_enable_channel(DAC_GCLK_ID, CONF_GCLK_DAC_SRC);
}
     5ea:	4770      	bx	lr
     5ec:	40000400 	.word	0x40000400
     5f0:	00004021 	.word	0x00004021
     5f4:	40000c00 	.word	0x40000c00

000005f8 <DAC_0_init>:

void DAC_0_init(void)
{
     5f8:	b510      	push	{r4, lr}
	DAC_0_CLOCK_init();
     5fa:	4b04      	ldr	r3, [pc, #16]	; (60c <DAC_0_init+0x14>)
     5fc:	4798      	blx	r3
	dac_sync_init(&DAC_0, DAC);
     5fe:	4904      	ldr	r1, [pc, #16]	; (610 <DAC_0_init+0x18>)
     600:	4804      	ldr	r0, [pc, #16]	; (614 <DAC_0_init+0x1c>)
     602:	4b05      	ldr	r3, [pc, #20]	; (618 <DAC_0_init+0x20>)
     604:	4798      	blx	r3
	DAC_0_PORT_init();
     606:	4b05      	ldr	r3, [pc, #20]	; (61c <DAC_0_init+0x24>)
     608:	4798      	blx	r3
}
     60a:	bd10      	pop	{r4, pc}
     60c:	000005d9 	.word	0x000005d9
     610:	42004800 	.word	0x42004800
     614:	2000074c 	.word	0x2000074c
     618:	00000835 	.word	0x00000835
     61c:	0000059d 	.word	0x0000059d

00000620 <USB_DEVICE_INSTANCE_PORT_init>:

void USB_DEVICE_INSTANCE_PORT_init(void)
{
     620:	b5f0      	push	{r4, r5, r6, r7, lr}
     622:	46c6      	mov	lr, r8
     624:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     626:	24c0      	movs	r4, #192	; 0xc0
     628:	05e4      	lsls	r4, r4, #23
     62a:	2280      	movs	r2, #128	; 0x80
     62c:	0452      	lsls	r2, r2, #17
     62e:	60a2      	str	r2, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     630:	4b1c      	ldr	r3, [pc, #112]	; (6a4 <USB_DEVICE_INSTANCE_PORT_init+0x84>)
     632:	2780      	movs	r7, #128	; 0x80
     634:	05ff      	lsls	r7, r7, #23
     636:	629f      	str	r7, [r3, #40]	; 0x28
     638:	491b      	ldr	r1, [pc, #108]	; (6a8 <USB_DEVICE_INSTANCE_PORT_init+0x88>)
     63a:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     63c:	6162      	str	r2, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     63e:	2058      	movs	r0, #88	; 0x58
     640:	5c19      	ldrb	r1, [r3, r0]
     642:	2204      	movs	r2, #4
     644:	4690      	mov	r8, r2
     646:	4391      	bics	r1, r2
     648:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     64a:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     64c:	2601      	movs	r6, #1
     64e:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     650:	2501      	movs	r5, #1
     652:	4329      	orrs	r1, r5
     654:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     656:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     658:	381c      	subs	r0, #28
     65a:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     65c:	320b      	adds	r2, #11
     65e:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     660:	2206      	movs	r2, #6
     662:	4694      	mov	ip, r2
     664:	4662      	mov	r2, ip
     666:	4311      	orrs	r1, r2
     668:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     66a:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     66c:	2180      	movs	r1, #128	; 0x80
     66e:	0489      	lsls	r1, r1, #18
     670:	60a1      	str	r1, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     672:	629f      	str	r7, [r3, #40]	; 0x28
     674:	4f0d      	ldr	r7, [pc, #52]	; (6ac <USB_DEVICE_INSTANCE_PORT_init+0x8c>)
     676:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     678:	6161      	str	r1, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     67a:	2159      	movs	r1, #89	; 0x59
     67c:	5c5c      	ldrb	r4, [r3, r1]
     67e:	4642      	mov	r2, r8
     680:	4394      	bics	r4, r2
     682:	545c      	strb	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     684:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     686:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     688:	432a      	orrs	r2, r5
     68a:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     68c:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     68e:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     690:	394a      	subs	r1, #74	; 0x4a
     692:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     694:	2160      	movs	r1, #96	; 0x60
     696:	430a      	orrs	r2, r1
     698:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     69a:	541a      	strb	r2, [r3, r0]
	                      // <GPIO_PIN_FUNCTION_E"> E
	                      // <GPIO_PIN_FUNCTION_F"> F
	                      // <GPIO_PIN_FUNCTION_G"> G
	                      // <GPIO_PIN_FUNCTION_H"> H
	                      PINMUX_PA25G_USB_DP);
}
     69c:	bc04      	pop	{r2}
     69e:	4690      	mov	r8, r2
     6a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6a2:	46c0      	nop			; (mov r8, r8)
     6a4:	41004400 	.word	0x41004400
     6a8:	c0000100 	.word	0xc0000100
     6ac:	c0000200 	.word	0xc0000200

000006b0 <USB_DEVICE_INSTANCE_CLOCK_init>:
			PM->APBBMASK.reg |= 1 << peripheral;
     6b0:	4b06      	ldr	r3, [pc, #24]	; (6cc <USB_DEVICE_INSTANCE_CLOCK_init+0x1c>)
     6b2:	69da      	ldr	r2, [r3, #28]
     6b4:	2120      	movs	r1, #32
     6b6:	430a      	orrs	r2, r1
     6b8:	61da      	str	r2, [r3, #28]
			PM->AHBMASK.reg |= 1 << peripheral;
     6ba:	695a      	ldr	r2, [r3, #20]
     6bc:	3120      	adds	r1, #32
     6be:	430a      	orrs	r2, r1
     6c0:	615a      	str	r2, [r3, #20]
     6c2:	4a03      	ldr	r2, [pc, #12]	; (6d0 <USB_DEVICE_INSTANCE_CLOCK_init+0x20>)
     6c4:	4b03      	ldr	r3, [pc, #12]	; (6d4 <USB_DEVICE_INSTANCE_CLOCK_init+0x24>)
     6c6:	805a      	strh	r2, [r3, #2]
{

	_pm_enable_bus_clock(PM_BUS_APBB, USB);
	_pm_enable_bus_clock(PM_BUS_AHB, USB);
	_gclk_enable_channel(USB_GCLK_ID, CONF_GCLK_USB_SRC);
}
     6c8:	4770      	bx	lr
     6ca:	46c0      	nop			; (mov r8, r8)
     6cc:	40000400 	.word	0x40000400
     6d0:	00004406 	.word	0x00004406
     6d4:	40000c00 	.word	0x40000c00

000006d8 <USB_DEVICE_INSTANCE_init>:

void USB_DEVICE_INSTANCE_init(void)
{
     6d8:	b510      	push	{r4, lr}
	USB_DEVICE_INSTANCE_CLOCK_init();
     6da:	4b03      	ldr	r3, [pc, #12]	; (6e8 <USB_DEVICE_INSTANCE_init+0x10>)
     6dc:	4798      	blx	r3
	usb_d_init();
     6de:	4b03      	ldr	r3, [pc, #12]	; (6ec <USB_DEVICE_INSTANCE_init+0x14>)
     6e0:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
     6e2:	4b03      	ldr	r3, [pc, #12]	; (6f0 <USB_DEVICE_INSTANCE_init+0x18>)
     6e4:	4798      	blx	r3
}
     6e6:	bd10      	pop	{r4, pc}
     6e8:	000006b1 	.word	0x000006b1
     6ec:	00000dc5 	.word	0x00000dc5
     6f0:	00000621 	.word	0x00000621

000006f4 <system_init>:

void system_init(void)
{
     6f4:	b5f0      	push	{r4, r5, r6, r7, lr}
     6f6:	46d6      	mov	lr, sl
     6f8:	464f      	mov	r7, r9
     6fa:	4646      	mov	r6, r8
     6fc:	b5c0      	push	{r6, r7, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     6fe:	4b37      	ldr	r3, [pc, #220]	; (7dc <system_init+0xe8>)
     700:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     702:	22c0      	movs	r2, #192	; 0xc0
     704:	05d2      	lsls	r2, r2, #23
     706:	2308      	movs	r3, #8
     708:	6193      	str	r3, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     70a:	6093      	str	r3, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     70c:	4b34      	ldr	r3, [pc, #208]	; (7e0 <system_init+0xec>)
     70e:	4935      	ldr	r1, [pc, #212]	; (7e4 <system_init+0xf0>)
     710:	6299      	str	r1, [r3, #40]	; 0x28
     712:	25c0      	movs	r5, #192	; 0xc0
     714:	062d      	lsls	r5, r5, #24
     716:	629d      	str	r5, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     718:	2443      	movs	r4, #67	; 0x43
     71a:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     71c:	2101      	movs	r1, #1
     71e:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     720:	5518      	strb	r0, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     722:	2080      	movs	r0, #128	; 0x80
     724:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     726:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     728:	482f      	ldr	r0, [pc, #188]	; (7e8 <system_init+0xf4>)
     72a:	6298      	str	r0, [r3, #40]	; 0x28
     72c:	629d      	str	r5, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     72e:	3404      	adds	r4, #4
     730:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     732:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     734:	5518      	strb	r0, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     736:	2080      	movs	r0, #128	; 0x80
     738:	0300      	lsls	r0, r0, #12
     73a:	6190      	str	r0, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     73c:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     73e:	2080      	movs	r0, #128	; 0x80
     740:	05c0      	lsls	r0, r0, #23
     742:	6298      	str	r0, [r3, #40]	; 0x28
     744:	4c29      	ldr	r4, [pc, #164]	; (7ec <system_init+0xf8>)
     746:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     748:	2653      	movs	r6, #83	; 0x53
     74a:	5d9c      	ldrb	r4, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
     74c:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     74e:	559c      	strb	r4, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     750:	6190      	str	r0, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     752:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     754:	6298      	str	r0, [r3, #40]	; 0x28
     756:	4c26      	ldr	r4, [pc, #152]	; (7f0 <system_init+0xfc>)
     758:	46a4      	mov	ip, r4
     75a:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     75c:	360b      	adds	r6, #11
     75e:	5d9c      	ldrb	r4, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
     760:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     762:	559c      	strb	r4, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     764:	2494      	movs	r4, #148	; 0x94
     766:	5111      	str	r1, [r2, r4]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     768:	3c0c      	subs	r4, #12
     76a:	46a1      	mov	r9, r4
     76c:	5111      	str	r1, [r2, r4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     76e:	3420      	adds	r4, #32
     770:	4f20      	ldr	r7, [pc, #128]	; (7f4 <system_init+0x100>)
     772:	511f      	str	r7, [r3, r4]
     774:	511d      	str	r5, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     776:	27c0      	movs	r7, #192	; 0xc0
     778:	46b8      	mov	r8, r7
     77a:	5ddf      	ldrb	r7, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     77c:	438f      	bics	r7, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     77e:	4646      	mov	r6, r8
     780:	559f      	strb	r7, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     782:	3e28      	subs	r6, #40	; 0x28
     784:	46b2      	mov	sl, r6
     786:	3e96      	subs	r6, #150	; 0x96
     788:	4657      	mov	r7, sl
     78a:	51d6      	str	r6, [r2, r7]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     78c:	464f      	mov	r7, r9
     78e:	51d6      	str	r6, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     790:	4e19      	ldr	r6, [pc, #100]	; (7f8 <system_init+0x104>)
     792:	511e      	str	r6, [r3, r4]
     794:	511d      	str	r5, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     796:	25c1      	movs	r5, #193	; 0xc1
     798:	46a8      	mov	r8, r5
     79a:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     79c:	438d      	bics	r5, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     79e:	4646      	mov	r6, r8
     7a0:	559d      	strb	r5, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     7a2:	4655      	mov	r5, sl
     7a4:	5150      	str	r0, [r2, r5]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     7a6:	51d0      	str	r0, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7a8:	5118      	str	r0, [r3, r4]
     7aa:	4662      	mov	r2, ip
     7ac:	511a      	str	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7ae:	20de      	movs	r0, #222	; 0xde
     7b0:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     7b2:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7b4:	541a      	strb	r2, [r3, r0]
	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);

	SPI_ADF_init();
     7b6:	4b11      	ldr	r3, [pc, #68]	; (7fc <system_init+0x108>)
     7b8:	4798      	blx	r3

	SPI_LMX_init();
     7ba:	4b11      	ldr	r3, [pc, #68]	; (800 <system_init+0x10c>)
     7bc:	4798      	blx	r3

	TARGET_IO_init();
     7be:	4b11      	ldr	r3, [pc, #68]	; (804 <system_init+0x110>)
     7c0:	4798      	blx	r3

	SPI_ZCD_init();
     7c2:	4b11      	ldr	r3, [pc, #68]	; (808 <system_init+0x114>)
     7c4:	4798      	blx	r3

	delay_driver_init();
     7c6:	4b11      	ldr	r3, [pc, #68]	; (80c <system_init+0x118>)
     7c8:	4798      	blx	r3

	DAC_0_init();
     7ca:	4b11      	ldr	r3, [pc, #68]	; (810 <system_init+0x11c>)
     7cc:	4798      	blx	r3

	USB_DEVICE_INSTANCE_init();
     7ce:	4b11      	ldr	r3, [pc, #68]	; (814 <system_init+0x120>)
     7d0:	4798      	blx	r3
}
     7d2:	bc1c      	pop	{r2, r3, r4}
     7d4:	4690      	mov	r8, r2
     7d6:	4699      	mov	r9, r3
     7d8:	46a2      	mov	sl, r4
     7da:	bdf0      	pop	{r4, r5, r6, r7, pc}
     7dc:	000011b9 	.word	0x000011b9
     7e0:	41004400 	.word	0x41004400
     7e4:	40000008 	.word	0x40000008
     7e8:	40000080 	.word	0x40000080
     7ec:	c0000008 	.word	0xc0000008
     7f0:	c0004000 	.word	0xc0004000
     7f4:	40000001 	.word	0x40000001
     7f8:	40000002 	.word	0x40000002
     7fc:	000002d5 	.word	0x000002d5
     800:	000003dd 	.word	0x000003dd
     804:	00000469 	.word	0x00000469
     808:	00000561 	.word	0x00000561
     80c:	00000589 	.word	0x00000589
     810:	000005f9 	.word	0x000005f9
     814:	000006d9 	.word	0x000006d9

00000818 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     818:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     81c:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     81e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     820:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     824:	4770      	bx	lr

00000826 <atomic_leave_critical>:
     826:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     82a:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     82c:	f383 8810 	msr	PRIMASK, r3
}
     830:	4770      	bx	lr
	...

00000834 <dac_sync_init>:

/**
 * \brief Initialize the DAC HAL instance and hardware.
 */
int32_t dac_sync_init(struct dac_sync_descriptor *const descr, void *const hw)
{
     834:	b570      	push	{r4, r5, r6, lr}
     836:	0004      	movs	r4, r0
     838:	000d      	movs	r5, r1
	uint8_t i;
	int32_t rc;

	ASSERT(descr && hw);
     83a:	2800      	cmp	r0, #0
     83c:	d010      	beq.n	860 <dac_sync_init+0x2c>
     83e:	2900      	cmp	r1, #0
     840:	d00c      	beq.n	85c <dac_sync_init+0x28>
     842:	2001      	movs	r0, #1
     844:	2232      	movs	r2, #50	; 0x32
     846:	490c      	ldr	r1, [pc, #48]	; (878 <dac_sync_init+0x44>)
     848:	4b0c      	ldr	r3, [pc, #48]	; (87c <dac_sync_init+0x48>)
     84a:	4798      	blx	r3

	rc = _dac_sync_init(&descr->device, hw);
     84c:	0029      	movs	r1, r5
     84e:	0020      	movs	r0, r4
     850:	4b0b      	ldr	r3, [pc, #44]	; (880 <dac_sync_init+0x4c>)
     852:	4798      	blx	r3
	if (rc) {
     854:	2800      	cmp	r0, #0
     856:	d10e      	bne.n	876 <dac_sync_init+0x42>
     858:	2300      	movs	r3, #0
     85a:	e00a      	b.n	872 <dac_sync_init+0x3e>
	ASSERT(descr && hw);
     85c:	2000      	movs	r0, #0
     85e:	e7f1      	b.n	844 <dac_sync_init+0x10>
     860:	2000      	movs	r0, #0
     862:	e7ef      	b.n	844 <dac_sync_init+0x10>
		return rc;
	}

	for (i = 0; i < CHANNEL_NUM; i++) {
		descr->sel_ch[i].buffer = NULL;
     864:	00da      	lsls	r2, r3, #3
     866:	18a2      	adds	r2, r4, r2
     868:	2100      	movs	r1, #0
     86a:	6051      	str	r1, [r2, #4]
		descr->sel_ch[i].length = 0;
     86c:	6091      	str	r1, [r2, #8]
	for (i = 0; i < CHANNEL_NUM; i++) {
     86e:	3301      	adds	r3, #1
     870:	b2db      	uxtb	r3, r3
     872:	2b00      	cmp	r3, #0
     874:	d0f6      	beq.n	864 <dac_sync_init+0x30>
	}

	return ERR_NONE;
}
     876:	bd70      	pop	{r4, r5, r6, pc}
     878:	00004168 	.word	0x00004168
     87c:	00001121 	.word	0x00001121
     880:	0000122d 	.word	0x0000122d

00000884 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     884:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
     886:	4b02      	ldr	r3, [pc, #8]	; (890 <delay_init+0xc>)
     888:	6018      	str	r0, [r3, #0]
     88a:	4b02      	ldr	r3, [pc, #8]	; (894 <delay_init+0x10>)
     88c:	4798      	blx	r3
}
     88e:	bd10      	pop	{r4, pc}
     890:	200000e8 	.word	0x200000e8
     894:	0000191d 	.word	0x0000191d

00000898 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     898:	b570      	push	{r4, r5, r6, lr}
     89a:	0004      	movs	r4, r0
     89c:	000d      	movs	r5, r1
     89e:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
     8a0:	2800      	cmp	r0, #0
     8a2:	d00e      	beq.n	8c2 <io_write+0x2a>
     8a4:	2900      	cmp	r1, #0
     8a6:	d00a      	beq.n	8be <io_write+0x26>
     8a8:	2001      	movs	r0, #1
     8aa:	2234      	movs	r2, #52	; 0x34
     8ac:	4906      	ldr	r1, [pc, #24]	; (8c8 <io_write+0x30>)
     8ae:	4b07      	ldr	r3, [pc, #28]	; (8cc <io_write+0x34>)
     8b0:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     8b2:	6823      	ldr	r3, [r4, #0]
     8b4:	0032      	movs	r2, r6
     8b6:	0029      	movs	r1, r5
     8b8:	0020      	movs	r0, r4
     8ba:	4798      	blx	r3
}
     8bc:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     8be:	2000      	movs	r0, #0
     8c0:	e7f3      	b.n	8aa <io_write+0x12>
     8c2:	2000      	movs	r0, #0
     8c4:	e7f1      	b.n	8aa <io_write+0x12>
     8c6:	46c0      	nop			; (mov r8, r8)
     8c8:	00004184 	.word	0x00004184
     8cc:	00001121 	.word	0x00001121

000008d0 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     8d0:	b570      	push	{r4, r5, r6, lr}
     8d2:	0004      	movs	r4, r0
     8d4:	000d      	movs	r5, r1
     8d6:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
     8d8:	2800      	cmp	r0, #0
     8da:	d00e      	beq.n	8fa <io_read+0x2a>
     8dc:	2900      	cmp	r1, #0
     8de:	d00a      	beq.n	8f6 <io_read+0x26>
     8e0:	2001      	movs	r0, #1
     8e2:	223d      	movs	r2, #61	; 0x3d
     8e4:	4906      	ldr	r1, [pc, #24]	; (900 <io_read+0x30>)
     8e6:	4b07      	ldr	r3, [pc, #28]	; (904 <io_read+0x34>)
     8e8:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     8ea:	6863      	ldr	r3, [r4, #4]
     8ec:	0032      	movs	r2, r6
     8ee:	0029      	movs	r1, r5
     8f0:	0020      	movs	r0, r4
     8f2:	4798      	blx	r3
}
     8f4:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     8f6:	2000      	movs	r0, #0
     8f8:	e7f3      	b.n	8e2 <io_read+0x12>
     8fa:	2000      	movs	r0, #0
     8fc:	e7f1      	b.n	8e2 <io_read+0x12>
     8fe:	46c0      	nop			; (mov r8, r8)
     900:	00004184 	.word	0x00004184
     904:	00001121 	.word	0x00001121

00000908 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
     908:	b570      	push	{r4, r5, r6, lr}
     90a:	0004      	movs	r4, r0
     90c:	000d      	movs	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
     90e:	2800      	cmp	r0, #0
     910:	d017      	beq.n	942 <spi_m_sync_init+0x3a>
     912:	2900      	cmp	r1, #0
     914:	d013      	beq.n	93e <spi_m_sync_init+0x36>
     916:	2001      	movs	r0, #1
     918:	2240      	movs	r2, #64	; 0x40
     91a:	490b      	ldr	r1, [pc, #44]	; (948 <spi_m_sync_init+0x40>)
     91c:	4b0b      	ldr	r3, [pc, #44]	; (94c <spi_m_sync_init+0x44>)
     91e:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
     920:	6065      	str	r5, [r4, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
     922:	1d20      	adds	r0, r4, #4
     924:	0029      	movs	r1, r5
     926:	4b0a      	ldr	r3, [pc, #40]	; (950 <spi_m_sync_init+0x48>)
     928:	4798      	blx	r3

	if (rc < 0) {
     92a:	2800      	cmp	r0, #0
     92c:	db06      	blt.n	93c <spi_m_sync_init+0x34>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
     92e:	4b09      	ldr	r3, [pc, #36]	; (954 <spi_m_sync_init+0x4c>)
     930:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
     932:	4b09      	ldr	r3, [pc, #36]	; (958 <spi_m_sync_init+0x50>)
     934:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
     936:	4b09      	ldr	r3, [pc, #36]	; (95c <spi_m_sync_init+0x54>)
     938:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
     93a:	2000      	movs	r0, #0
}
     93c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(spi && hw);
     93e:	2000      	movs	r0, #0
     940:	e7ea      	b.n	918 <spi_m_sync_init+0x10>
     942:	2000      	movs	r0, #0
     944:	e7e8      	b.n	918 <spi_m_sync_init+0x10>
     946:	46c0      	nop			; (mov r8, r8)
     948:	00004198 	.word	0x00004198
     94c:	00001121 	.word	0x00001121
     950:	00001501 	.word	0x00001501
     954:	ffff8000 	.word	0xffff8000
     958:	000009e5 	.word	0x000009e5
     95c:	000009a9 	.word	0x000009a9

00000960 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
     960:	b530      	push	{r4, r5, lr}
     962:	b087      	sub	sp, #28
     964:	0004      	movs	r4, r0
     966:	000d      	movs	r5, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
     968:	2800      	cmp	r0, #0
     96a:	d015      	beq.n	998 <spi_m_sync_transfer+0x38>
     96c:	2900      	cmp	r1, #0
     96e:	d011      	beq.n	994 <spi_m_sync_transfer+0x34>
     970:	2001      	movs	r0, #1
     972:	22b3      	movs	r2, #179	; 0xb3
     974:	4909      	ldr	r1, [pc, #36]	; (99c <spi_m_sync_transfer+0x3c>)
     976:	4b0a      	ldr	r3, [pc, #40]	; (9a0 <spi_m_sync_transfer+0x40>)
     978:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
     97a:	682b      	ldr	r3, [r5, #0]
     97c:	9303      	str	r3, [sp, #12]
	msg.rxbuf = p_xfer->rxbuf;
     97e:	686b      	ldr	r3, [r5, #4]
     980:	9304      	str	r3, [sp, #16]
	msg.size  = p_xfer->size;
     982:	68ab      	ldr	r3, [r5, #8]
     984:	9301      	str	r3, [sp, #4]
     986:	9305      	str	r3, [sp, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
     988:	1d20      	adds	r0, r4, #4
     98a:	a903      	add	r1, sp, #12
     98c:	4b05      	ldr	r3, [pc, #20]	; (9a4 <spi_m_sync_transfer+0x44>)
     98e:	4798      	blx	r3
}
     990:	b007      	add	sp, #28
     992:	bd30      	pop	{r4, r5, pc}
	ASSERT(spi && p_xfer);
     994:	2000      	movs	r0, #0
     996:	e7ec      	b.n	972 <spi_m_sync_transfer+0x12>
     998:	2000      	movs	r0, #0
     99a:	e7ea      	b.n	972 <spi_m_sync_transfer+0x12>
     99c:	00004198 	.word	0x00004198
     9a0:	00001121 	.word	0x00001121
     9a4:	00001705 	.word	0x00001705

000009a8 <_spi_m_sync_io_write>:
{
     9a8:	b570      	push	{r4, r5, r6, lr}
     9aa:	b084      	sub	sp, #16
     9ac:	0004      	movs	r4, r0
     9ae:	000e      	movs	r6, r1
     9b0:	0015      	movs	r5, r2
	ASSERT(io);
     9b2:	1e43      	subs	r3, r0, #1
     9b4:	4198      	sbcs	r0, r3
     9b6:	b2c0      	uxtb	r0, r0
     9b8:	22a3      	movs	r2, #163	; 0xa3
     9ba:	4907      	ldr	r1, [pc, #28]	; (9d8 <_spi_m_sync_io_write+0x30>)
     9bc:	4b07      	ldr	r3, [pc, #28]	; (9dc <_spi_m_sync_io_write+0x34>)
     9be:	4798      	blx	r3
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
     9c0:	0020      	movs	r0, r4
     9c2:	380c      	subs	r0, #12
	xfer.rxbuf = 0;
     9c4:	2300      	movs	r3, #0
     9c6:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
     9c8:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
     9ca:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
     9cc:	a901      	add	r1, sp, #4
     9ce:	4b04      	ldr	r3, [pc, #16]	; (9e0 <_spi_m_sync_io_write+0x38>)
     9d0:	4798      	blx	r3
}
     9d2:	b004      	add	sp, #16
     9d4:	bd70      	pop	{r4, r5, r6, pc}
     9d6:	46c0      	nop			; (mov r8, r8)
     9d8:	00004198 	.word	0x00004198
     9dc:	00001121 	.word	0x00001121
     9e0:	00000961 	.word	0x00000961

000009e4 <_spi_m_sync_io_read>:
{
     9e4:	b570      	push	{r4, r5, r6, lr}
     9e6:	b084      	sub	sp, #16
     9e8:	0004      	movs	r4, r0
     9ea:	000e      	movs	r6, r1
     9ec:	0015      	movs	r5, r2
	ASSERT(io);
     9ee:	1e43      	subs	r3, r0, #1
     9f0:	4198      	sbcs	r0, r3
     9f2:	b2c0      	uxtb	r0, r0
     9f4:	2287      	movs	r2, #135	; 0x87
     9f6:	4907      	ldr	r1, [pc, #28]	; (a14 <_spi_m_sync_io_read+0x30>)
     9f8:	4b07      	ldr	r3, [pc, #28]	; (a18 <_spi_m_sync_io_read+0x34>)
     9fa:	4798      	blx	r3
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
     9fc:	0020      	movs	r0, r4
     9fe:	380c      	subs	r0, #12
	xfer.rxbuf = buf;
     a00:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
     a02:	2300      	movs	r3, #0
     a04:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
     a06:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
     a08:	a901      	add	r1, sp, #4
     a0a:	4b04      	ldr	r3, [pc, #16]	; (a1c <_spi_m_sync_io_read+0x38>)
     a0c:	4798      	blx	r3
}
     a0e:	b004      	add	sp, #16
     a10:	bd70      	pop	{r4, r5, r6, pc}
     a12:	46c0      	nop			; (mov r8, r8)
     a14:	00004198 	.word	0x00004198
     a18:	00001121 	.word	0x00001121
     a1c:	00000961 	.word	0x00000961

00000a20 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     a22:	0005      	movs	r5, r0
     a24:	000e      	movs	r6, r1
     a26:	0017      	movs	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     a28:	2800      	cmp	r0, #0
     a2a:	d023      	beq.n	a74 <usart_sync_write+0x54>
     a2c:	2900      	cmp	r1, #0
     a2e:	d023      	beq.n	a78 <usart_sync_write+0x58>
     a30:	2a00      	cmp	r2, #0
     a32:	d123      	bne.n	a7c <usart_sync_write+0x5c>
     a34:	2000      	movs	r0, #0
     a36:	22f1      	movs	r2, #241	; 0xf1
     a38:	4911      	ldr	r1, [pc, #68]	; (a80 <usart_sync_write+0x60>)
     a3a:	4b12      	ldr	r3, [pc, #72]	; (a84 <usart_sync_write+0x64>)
     a3c:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     a3e:	002c      	movs	r4, r5
     a40:	3408      	adds	r4, #8
     a42:	0020      	movs	r0, r4
     a44:	4b10      	ldr	r3, [pc, #64]	; (a88 <usart_sync_write+0x68>)
     a46:	4798      	blx	r3
     a48:	2800      	cmp	r0, #0
     a4a:	d0f8      	beq.n	a3e <usart_sync_write+0x1e>
     a4c:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     a4e:	5d71      	ldrb	r1, [r6, r5]
     a50:	0020      	movs	r0, r4
     a52:	4b0e      	ldr	r3, [pc, #56]	; (a8c <usart_sync_write+0x6c>)
     a54:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
     a56:	0020      	movs	r0, r4
     a58:	4b0b      	ldr	r3, [pc, #44]	; (a88 <usart_sync_write+0x68>)
     a5a:	4798      	blx	r3
     a5c:	2800      	cmp	r0, #0
     a5e:	d0fa      	beq.n	a56 <usart_sync_write+0x36>
			;
	} while (++offset < length);
     a60:	3501      	adds	r5, #1
     a62:	42bd      	cmp	r5, r7
     a64:	d3f3      	bcc.n	a4e <usart_sync_write+0x2e>
	while (!_usart_sync_is_transmit_done(&descr->device))
     a66:	0020      	movs	r0, r4
     a68:	4b09      	ldr	r3, [pc, #36]	; (a90 <usart_sync_write+0x70>)
     a6a:	4798      	blx	r3
     a6c:	2800      	cmp	r0, #0
     a6e:	d0fa      	beq.n	a66 <usart_sync_write+0x46>
		;
	return (int32_t)offset;
}
     a70:	0028      	movs	r0, r5
     a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     a74:	2000      	movs	r0, #0
     a76:	e7de      	b.n	a36 <usart_sync_write+0x16>
     a78:	2000      	movs	r0, #0
     a7a:	e7dc      	b.n	a36 <usart_sync_write+0x16>
     a7c:	2001      	movs	r0, #1
     a7e:	e7da      	b.n	a36 <usart_sync_write+0x16>
     a80:	000041b4 	.word	0x000041b4
     a84:	00001121 	.word	0x00001121
     a88:	000014df 	.word	0x000014df
     a8c:	000014cf 	.word	0x000014cf
     a90:	000014e9 	.word	0x000014e9

00000a94 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     a96:	46ce      	mov	lr, r9
     a98:	4647      	mov	r7, r8
     a9a:	b580      	push	{r7, lr}
     a9c:	1e05      	subs	r5, r0, #0
     a9e:	4688      	mov	r8, r1
     aa0:	4691      	mov	r9, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     aa2:	d01f      	beq.n	ae4 <usart_sync_read+0x50>
     aa4:	2900      	cmp	r1, #0
     aa6:	d01f      	beq.n	ae8 <usart_sync_read+0x54>
     aa8:	2a00      	cmp	r2, #0
     aaa:	d11f      	bne.n	aec <usart_sync_read+0x58>
     aac:	2000      	movs	r0, #0
     aae:	2286      	movs	r2, #134	; 0x86
     ab0:	0052      	lsls	r2, r2, #1
     ab2:	490f      	ldr	r1, [pc, #60]	; (af0 <usart_sync_read+0x5c>)
     ab4:	4b0f      	ldr	r3, [pc, #60]	; (af4 <usart_sync_read+0x60>)
     ab6:	4798      	blx	r3
	uint32_t                      offset = 0;
     ab8:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     aba:	002c      	movs	r4, r5
     abc:	3408      	adds	r4, #8
     abe:	0020      	movs	r0, r4
     ac0:	4b0d      	ldr	r3, [pc, #52]	; (af8 <usart_sync_read+0x64>)
     ac2:	4798      	blx	r3
     ac4:	2800      	cmp	r0, #0
     ac6:	d0f8      	beq.n	aba <usart_sync_read+0x26>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     ac8:	4643      	mov	r3, r8
     aca:	199f      	adds	r7, r3, r6
     acc:	0020      	movs	r0, r4
     ace:	4b0b      	ldr	r3, [pc, #44]	; (afc <usart_sync_read+0x68>)
     ad0:	4798      	blx	r3
     ad2:	7038      	strb	r0, [r7, #0]
	} while (++offset < length);
     ad4:	3601      	adds	r6, #1
     ad6:	454e      	cmp	r6, r9
     ad8:	d3ef      	bcc.n	aba <usart_sync_read+0x26>

	return (int32_t)offset;
}
     ada:	0030      	movs	r0, r6
     adc:	bc0c      	pop	{r2, r3}
     ade:	4690      	mov	r8, r2
     ae0:	4699      	mov	r9, r3
     ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     ae4:	2000      	movs	r0, #0
     ae6:	e7e2      	b.n	aae <usart_sync_read+0x1a>
     ae8:	2000      	movs	r0, #0
     aea:	e7e0      	b.n	aae <usart_sync_read+0x1a>
     aec:	2001      	movs	r0, #1
     aee:	e7de      	b.n	aae <usart_sync_read+0x1a>
     af0:	000041b4 	.word	0x000041b4
     af4:	00001121 	.word	0x00001121
     af8:	000014f5 	.word	0x000014f5
     afc:	000014d7 	.word	0x000014d7

00000b00 <usart_sync_init>:
{
     b00:	b570      	push	{r4, r5, r6, lr}
     b02:	0004      	movs	r4, r0
     b04:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     b06:	2800      	cmp	r0, #0
     b08:	d014      	beq.n	b34 <usart_sync_init+0x34>
     b0a:	2900      	cmp	r1, #0
     b0c:	d010      	beq.n	b30 <usart_sync_init+0x30>
     b0e:	2001      	movs	r0, #1
     b10:	2234      	movs	r2, #52	; 0x34
     b12:	4909      	ldr	r1, [pc, #36]	; (b38 <usart_sync_init+0x38>)
     b14:	4b09      	ldr	r3, [pc, #36]	; (b3c <usart_sync_init+0x3c>)
     b16:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     b18:	0020      	movs	r0, r4
     b1a:	3008      	adds	r0, #8
     b1c:	0029      	movs	r1, r5
     b1e:	4b08      	ldr	r3, [pc, #32]	; (b40 <usart_sync_init+0x40>)
     b20:	4798      	blx	r3
	if (init_status) {
     b22:	2800      	cmp	r0, #0
     b24:	d103      	bne.n	b2e <usart_sync_init+0x2e>
	descr->io.read  = usart_sync_read;
     b26:	4b07      	ldr	r3, [pc, #28]	; (b44 <usart_sync_init+0x44>)
     b28:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_sync_write;
     b2a:	4b07      	ldr	r3, [pc, #28]	; (b48 <usart_sync_init+0x48>)
     b2c:	6023      	str	r3, [r4, #0]
}
     b2e:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
     b30:	2000      	movs	r0, #0
     b32:	e7ed      	b.n	b10 <usart_sync_init+0x10>
     b34:	2000      	movs	r0, #0
     b36:	e7eb      	b.n	b10 <usart_sync_init+0x10>
     b38:	000041b4 	.word	0x000041b4
     b3c:	00001121 	.word	0x00001121
     b40:	00001491 	.word	0x00001491
     b44:	00000a95 	.word	0x00000a95
     b48:	00000a21 	.word	0x00000a21

00000b4c <usart_sync_enable>:
{
     b4c:	b510      	push	{r4, lr}
     b4e:	0004      	movs	r4, r0
	ASSERT(descr);
     b50:	1e43      	subs	r3, r0, #1
     b52:	4198      	sbcs	r0, r3
     b54:	b2c0      	uxtb	r0, r0
     b56:	2253      	movs	r2, #83	; 0x53
     b58:	4904      	ldr	r1, [pc, #16]	; (b6c <usart_sync_enable+0x20>)
     b5a:	4b05      	ldr	r3, [pc, #20]	; (b70 <usart_sync_enable+0x24>)
     b5c:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
     b5e:	0020      	movs	r0, r4
     b60:	3008      	adds	r0, #8
     b62:	4b04      	ldr	r3, [pc, #16]	; (b74 <usart_sync_enable+0x28>)
     b64:	4798      	blx	r3
}
     b66:	2000      	movs	r0, #0
     b68:	bd10      	pop	{r4, pc}
     b6a:	46c0      	nop			; (mov r8, r8)
     b6c:	000041b4 	.word	0x000041b4
     b70:	00001121 	.word	0x00001121
     b74:	000014bd 	.word	0x000014bd

00000b78 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
     b78:	b510      	push	{r4, lr}
     b7a:	0001      	movs	r1, r0
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     b7c:	2000      	movs	r0, #0
     b7e:	e001      	b.n	b84 <_usb_d_find_ep+0xc>
     b80:	3001      	adds	r0, #1
     b82:	b240      	sxtb	r0, r0
     b84:	2807      	cmp	r0, #7
     b86:	dc0f      	bgt.n	ba8 <_usb_d_find_ep+0x30>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     b88:	0142      	lsls	r2, r0, #5
     b8a:	4b09      	ldr	r3, [pc, #36]	; (bb0 <_usb_d_find_ep+0x38>)
     b8c:	189b      	adds	r3, r3, r2
     b8e:	785a      	ldrb	r2, [r3, #1]
     b90:	428a      	cmp	r2, r1
     b92:	d00b      	beq.n	bac <_usb_d_find_ep+0x34>
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
     b94:	0143      	lsls	r3, r0, #5
     b96:	4c06      	ldr	r4, [pc, #24]	; (bb0 <_usb_d_find_ep+0x38>)
     b98:	5d1b      	ldrb	r3, [r3, r4]
     b9a:	2b00      	cmp	r3, #0
     b9c:	d1f0      	bne.n	b80 <_usb_d_find_ep+0x8>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     b9e:	330f      	adds	r3, #15
     ba0:	400b      	ands	r3, r1
     ba2:	4293      	cmp	r3, r2
     ba4:	d1ec      	bne.n	b80 <_usb_d_find_ep+0x8>
     ba6:	e001      	b.n	bac <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
     ba8:	2001      	movs	r0, #1
     baa:	4240      	negs	r0, r0
}
     bac:	bd10      	pop	{r4, pc}
     bae:	46c0      	nop			; (mov r8, r8)
     bb0:	200000ec 	.word	0x200000ec

00000bb4 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
     bb4:	2000      	movs	r0, #0
     bb6:	4770      	bx	lr

00000bb8 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
     bb8:	b570      	push	{r4, r5, r6, lr}
     bba:	0004      	movs	r4, r0
     bbc:	000d      	movs	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
     bbe:	4b08      	ldr	r3, [pc, #32]	; (be0 <usb_d_cb_trans_more+0x28>)
     bc0:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
     bc2:	0142      	lsls	r2, r0, #5
     bc4:	4b07      	ldr	r3, [pc, #28]	; (be4 <usb_d_cb_trans_more+0x2c>)
     bc6:	189b      	adds	r3, r3, r2
     bc8:	789b      	ldrb	r3, [r3, #2]
     bca:	2b03      	cmp	r3, #3
     bcc:	d001      	beq.n	bd2 <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
     bce:	2000      	movs	r0, #0
}
     bd0:	bd70      	pop	{r4, r5, r6, pc}
		return ept->callbacks.more(ep, transfered);
     bd2:	4b04      	ldr	r3, [pc, #16]	; (be4 <usb_d_cb_trans_more+0x2c>)
     bd4:	1898      	adds	r0, r3, r2
     bd6:	6983      	ldr	r3, [r0, #24]
     bd8:	0029      	movs	r1, r5
     bda:	0020      	movs	r0, r4
     bdc:	4798      	blx	r3
     bde:	e7f7      	b.n	bd0 <usb_d_cb_trans_more+0x18>
     be0:	00000b79 	.word	0x00000b79
     be4:	200000ec 	.word	0x200000ec

00000be8 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
     be8:	b5f0      	push	{r4, r5, r6, r7, lr}
     bea:	b087      	sub	sp, #28
     bec:	0005      	movs	r5, r0
     bee:	000f      	movs	r7, r1
     bf0:	9201      	str	r2, [sp, #4]
	int8_t           ep_index = _usb_d_find_ep(ep);
     bf2:	4b4a      	ldr	r3, [pc, #296]	; (d1c <_usb_d_cb_trans_done+0x134>)
     bf4:	4798      	blx	r3
     bf6:	0004      	movs	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
     bf8:	0146      	lsls	r6, r0, #5
     bfa:	4a49      	ldr	r2, [pc, #292]	; (d20 <_usb_d_cb_trans_done+0x138>)
     bfc:	1996      	adds	r6, r2, r6

	if (code == USB_TRANS_DONE) {
     bfe:	2f00      	cmp	r7, #0
     c00:	d151      	bne.n	ca6 <_usb_d_cb_trans_done+0xbe>
		ept->xfer.hdr.status = USB_XFER_DONE;
     c02:	0013      	movs	r3, r2
     c04:	0142      	lsls	r2, r0, #5
     c06:	2000      	movs	r0, #0
     c08:	70f0      	strb	r0, [r6, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     c0a:	5cd3      	ldrb	r3, [r2, r3]
     c0c:	2b00      	cmp	r3, #0
     c0e:	d00e      	beq.n	c2e <_usb_d_cb_trans_done+0x46>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     c10:	0162      	lsls	r2, r4, #5
     c12:	4b43      	ldr	r3, [pc, #268]	; (d20 <_usb_d_cb_trans_done+0x138>)
     c14:	189b      	adds	r3, r3, r2
     c16:	2201      	movs	r2, #1
     c18:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
     c1a:	0164      	lsls	r4, r4, #5
     c1c:	4b40      	ldr	r3, [pc, #256]	; (d20 <_usb_d_cb_trans_done+0x138>)
     c1e:	191c      	adds	r4, r3, r4
     c20:	69e3      	ldr	r3, [r4, #28]
     c22:	78e1      	ldrb	r1, [r4, #3]
     c24:	9a01      	ldr	r2, [sp, #4]
     c26:	0028      	movs	r0, r5
     c28:	4798      	blx	r3
}
     c2a:	b007      	add	sp, #28
     c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t state   = ept->xfer.hdr.state;
     c2e:	78b3      	ldrb	r3, [r6, #2]
     c30:	240c      	movs	r4, #12
     c32:	5734      	ldrsb	r4, [r6, r4]
	if (state == USB_EP_S_X_DATA) {
     c34:	2b03      	cmp	r3, #3
     c36:	d008      	beq.n	c4a <_usb_d_cb_trans_done+0x62>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
     c38:	0032      	movs	r2, r6
     c3a:	320c      	adds	r2, #12
     c3c:	7870      	ldrb	r0, [r6, #1]
     c3e:	2100      	movs	r1, #0
     c40:	69f3      	ldr	r3, [r6, #28]
     c42:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     c44:	2302      	movs	r3, #2
     c46:	70b3      	strb	r3, [r6, #2]
     c48:	e7ef      	b.n	c2a <_usb_d_cb_trans_done+0x42>
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
     c4a:	7870      	ldrb	r0, [r6, #1]
     c4c:	0032      	movs	r2, r6
     c4e:	320c      	adds	r2, #12
     c50:	2101      	movs	r1, #1
     c52:	69f3      	ldr	r3, [r6, #28]
     c54:	4798      	blx	r3
		if (err) {
     c56:	2800      	cmp	r0, #0
     c58:	d010      	beq.n	c7c <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
     c5a:	2305      	movs	r3, #5
     c5c:	70b3      	strb	r3, [r6, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
     c5e:	3b03      	subs	r3, #3
     c60:	70f3      	strb	r3, [r6, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
     c62:	2c00      	cmp	r4, #0
     c64:	db08      	blt.n	c78 <_usb_d_cb_trans_done+0x90>
     c66:	7873      	ldrb	r3, [r6, #1]
     c68:	2080      	movs	r0, #128	; 0x80
     c6a:	4240      	negs	r0, r0
     c6c:	4318      	orrs	r0, r3
     c6e:	b2c0      	uxtb	r0, r0
     c70:	2101      	movs	r1, #1
     c72:	4b2c      	ldr	r3, [pc, #176]	; (d24 <_usb_d_cb_trans_done+0x13c>)
     c74:	4798      	blx	r3
     c76:	e7d8      	b.n	c2a <_usb_d_cb_trans_done+0x42>
     c78:	7870      	ldrb	r0, [r6, #1]
     c7a:	e7f9      	b.n	c70 <_usb_d_cb_trans_done+0x88>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     c7c:	2304      	movs	r3, #4
     c7e:	70b3      	strb	r3, [r6, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
     c80:	7871      	ldrb	r1, [r6, #1]
	struct usb_d_transfer trans
     c82:	2200      	movs	r2, #0
     c84:	9203      	str	r2, [sp, #12]
     c86:	9204      	str	r2, [sp, #16]
     c88:	2c00      	cmp	r4, #0
     c8a:	db09      	blt.n	ca0 <_usb_d_cb_trans_done+0xb8>
     c8c:	3b84      	subs	r3, #132	; 0x84
     c8e:	430b      	orrs	r3, r1
     c90:	b2da      	uxtb	r2, r3
     c92:	a803      	add	r0, sp, #12
     c94:	7202      	strb	r2, [r0, #8]
     c96:	2301      	movs	r3, #1
     c98:	7243      	strb	r3, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
     c9a:	4b23      	ldr	r3, [pc, #140]	; (d28 <_usb_d_cb_trans_done+0x140>)
     c9c:	4798      	blx	r3
     c9e:	e7c4      	b.n	c2a <_usb_d_cb_trans_done+0x42>
	struct usb_d_transfer trans
     ca0:	220f      	movs	r2, #15
     ca2:	400a      	ands	r2, r1
     ca4:	e7f5      	b.n	c92 <_usb_d_cb_trans_done+0xaa>
	} else if (code == USB_TRANS_STALL) {
     ca6:	2f01      	cmp	r7, #1
     ca8:	d00a      	beq.n	cc0 <_usb_d_cb_trans_done+0xd8>
	} else if (code == USB_TRANS_ABORT) {
     caa:	2f02      	cmp	r7, #2
     cac:	d01d      	beq.n	cea <_usb_d_cb_trans_done+0x102>
	} else if (code == USB_TRANS_RESET) {
     cae:	2f03      	cmp	r7, #3
     cb0:	d02c      	beq.n	d0c <_usb_d_cb_trans_done+0x124>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
     cb2:	0142      	lsls	r2, r0, #5
     cb4:	4b1a      	ldr	r3, [pc, #104]	; (d20 <_usb_d_cb_trans_done+0x138>)
     cb6:	189b      	adds	r3, r3, r2
     cb8:	2206      	movs	r2, #6
     cba:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
     cbc:	70da      	strb	r2, [r3, #3]
     cbe:	e7ac      	b.n	c1a <_usb_d_cb_trans_done+0x32>
		ept->xfer.hdr.status = USB_XFER_HALT;
     cc0:	4b17      	ldr	r3, [pc, #92]	; (d20 <_usb_d_cb_trans_done+0x138>)
     cc2:	0142      	lsls	r2, r0, #5
     cc4:	1899      	adds	r1, r3, r2
     cc6:	2002      	movs	r0, #2
     cc8:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     cca:	5cd3      	ldrb	r3, [r2, r3]
     ccc:	2b00      	cmp	r3, #0
     cce:	d005      	beq.n	cdc <_usb_d_cb_trans_done+0xf4>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
     cd0:	0162      	lsls	r2, r4, #5
     cd2:	4b13      	ldr	r3, [pc, #76]	; (d20 <_usb_d_cb_trans_done+0x138>)
     cd4:	189b      	adds	r3, r3, r2
     cd6:	2205      	movs	r2, #5
     cd8:	709a      	strb	r2, [r3, #2]
     cda:	e79e      	b.n	c1a <_usb_d_cb_trans_done+0x32>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     cdc:	2202      	movs	r2, #2
     cde:	708a      	strb	r2, [r1, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     ce0:	2100      	movs	r1, #0
     ce2:	0028      	movs	r0, r5
     ce4:	4b0f      	ldr	r3, [pc, #60]	; (d24 <_usb_d_cb_trans_done+0x13c>)
     ce6:	4798      	blx	r3
     ce8:	e797      	b.n	c1a <_usb_d_cb_trans_done+0x32>
		ept->xfer.hdr.status = USB_XFER_ABORT;
     cea:	4b0d      	ldr	r3, [pc, #52]	; (d20 <_usb_d_cb_trans_done+0x138>)
     cec:	0142      	lsls	r2, r0, #5
     cee:	1899      	adds	r1, r3, r2
     cf0:	2004      	movs	r0, #4
     cf2:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     cf4:	5cd3      	ldrb	r3, [r2, r3]
     cf6:	2b00      	cmp	r3, #0
     cf8:	d005      	beq.n	d06 <_usb_d_cb_trans_done+0x11e>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     cfa:	0162      	lsls	r2, r4, #5
     cfc:	4b08      	ldr	r3, [pc, #32]	; (d20 <_usb_d_cb_trans_done+0x138>)
     cfe:	189b      	adds	r3, r3, r2
     d00:	2201      	movs	r2, #1
     d02:	709a      	strb	r2, [r3, #2]
     d04:	e789      	b.n	c1a <_usb_d_cb_trans_done+0x32>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     d06:	2302      	movs	r3, #2
     d08:	708b      	strb	r3, [r1, #2]
			return;
     d0a:	e78e      	b.n	c2a <_usb_d_cb_trans_done+0x42>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
     d0c:	0142      	lsls	r2, r0, #5
     d0e:	4b04      	ldr	r3, [pc, #16]	; (d20 <_usb_d_cb_trans_done+0x138>)
     d10:	189b      	adds	r3, r3, r2
     d12:	2200      	movs	r2, #0
     d14:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
     d16:	3205      	adds	r2, #5
     d18:	70da      	strb	r2, [r3, #3]
     d1a:	e77e      	b.n	c1a <_usb_d_cb_trans_done+0x32>
     d1c:	00000b79 	.word	0x00000b79
     d20:	200000ec 	.word	0x200000ec
     d24:	00002841 	.word	0x00002841
     d28:	00002a05 	.word	0x00002a05

00000d2c <usb_d_cb_trans_setup>:
{
     d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
     d2e:	46c6      	mov	lr, r8
     d30:	b500      	push	{lr}
     d32:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     d34:	4b1f      	ldr	r3, [pc, #124]	; (db4 <usb_d_cb_trans_setup+0x88>)
     d36:	4798      	blx	r3
     d38:	0006      	movs	r6, r0
	uint8_t *        req      = ept->xfer.req;
     d3a:	0143      	lsls	r3, r0, #5
     d3c:	3308      	adds	r3, #8
     d3e:	4c1e      	ldr	r4, [pc, #120]	; (db8 <usb_d_cb_trans_setup+0x8c>)
     d40:	18e4      	adds	r4, r4, r3
     d42:	3404      	adds	r4, #4
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
     d44:	0021      	movs	r1, r4
     d46:	0028      	movs	r0, r5
     d48:	4b1c      	ldr	r3, [pc, #112]	; (dbc <usb_d_cb_trans_setup+0x90>)
     d4a:	4798      	blx	r3
     d4c:	b2c0      	uxtb	r0, r0
	if (n != 8) {
     d4e:	2808      	cmp	r0, #8
     d50:	d00c      	beq.n	d6c <usb_d_cb_trans_setup+0x40>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     d52:	2101      	movs	r1, #1
     d54:	0028      	movs	r0, r5
     d56:	4c1a      	ldr	r4, [pc, #104]	; (dc0 <usb_d_cb_trans_setup+0x94>)
     d58:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     d5a:	2080      	movs	r0, #128	; 0x80
     d5c:	4240      	negs	r0, r0
     d5e:	4328      	orrs	r0, r5
     d60:	b2c0      	uxtb	r0, r0
     d62:	2101      	movs	r1, #1
     d64:	47a0      	blx	r4
}
     d66:	bc04      	pop	{r2}
     d68:	4690      	mov	r8, r2
     d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     d6c:	2100      	movs	r1, #0
     d6e:	0028      	movs	r0, r5
     d70:	4b13      	ldr	r3, [pc, #76]	; (dc0 <usb_d_cb_trans_setup+0x94>)
     d72:	4698      	mov	r8, r3
     d74:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
     d76:	2780      	movs	r7, #128	; 0x80
     d78:	427f      	negs	r7, r7
     d7a:	432f      	orrs	r7, r5
     d7c:	b2ff      	uxtb	r7, r7
     d7e:	2100      	movs	r1, #0
     d80:	0038      	movs	r0, r7
     d82:	47c0      	blx	r8
	ept->xfer.hdr.state = USB_EP_S_IDLE;
     d84:	0172      	lsls	r2, r6, #5
     d86:	4b0c      	ldr	r3, [pc, #48]	; (db8 <usb_d_cb_trans_setup+0x8c>)
     d88:	189b      	adds	r3, r3, r2
     d8a:	2201      	movs	r2, #1
     d8c:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
     d8e:	695b      	ldr	r3, [r3, #20]
     d90:	0021      	movs	r1, r4
     d92:	0028      	movs	r0, r5
     d94:	4798      	blx	r3
     d96:	2800      	cmp	r0, #0
     d98:	d1e5      	bne.n	d66 <usb_d_cb_trans_setup+0x3a>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
     d9a:	0176      	lsls	r6, r6, #5
     d9c:	4b06      	ldr	r3, [pc, #24]	; (db8 <usb_d_cb_trans_setup+0x8c>)
     d9e:	199e      	adds	r6, r3, r6
     da0:	2305      	movs	r3, #5
     da2:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     da4:	2101      	movs	r1, #1
     da6:	0028      	movs	r0, r5
     da8:	4c05      	ldr	r4, [pc, #20]	; (dc0 <usb_d_cb_trans_setup+0x94>)
     daa:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     dac:	2101      	movs	r1, #1
     dae:	0038      	movs	r0, r7
     db0:	47a0      	blx	r4
     db2:	e7d8      	b.n	d66 <usb_d_cb_trans_setup+0x3a>
     db4:	00000b79 	.word	0x00000b79
     db8:	200000ec 	.word	0x200000ec
     dbc:	0000298d 	.word	0x0000298d
     dc0:	00002841 	.word	0x00002841

00000dc4 <usb_d_init>:

int32_t usb_d_init(void)
{
     dc4:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
     dc6:	4b12      	ldr	r3, [pc, #72]	; (e10 <usb_d_init+0x4c>)
     dc8:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
     dca:	2800      	cmp	r0, #0
     dcc:	db1f      	blt.n	e0e <usb_d_init+0x4a>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
     dce:	2280      	movs	r2, #128	; 0x80
     dd0:	0052      	lsls	r2, r2, #1
     dd2:	2100      	movs	r1, #0
     dd4:	480f      	ldr	r0, [pc, #60]	; (e14 <usb_d_init+0x50>)
     dd6:	4b10      	ldr	r3, [pc, #64]	; (e18 <usb_d_init+0x54>)
     dd8:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     dda:	2200      	movs	r2, #0
     ddc:	e00a      	b.n	df4 <usb_d_init+0x30>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     dde:	0151      	lsls	r1, r2, #5
     de0:	4b0c      	ldr	r3, [pc, #48]	; (e14 <usb_d_init+0x50>)
     de2:	185b      	adds	r3, r3, r1
     de4:	21ff      	movs	r1, #255	; 0xff
     de6:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     de8:	490c      	ldr	r1, [pc, #48]	; (e1c <usb_d_init+0x58>)
     dea:	6159      	str	r1, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
     dec:	6199      	str	r1, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
     dee:	61d9      	str	r1, [r3, #28]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     df0:	3201      	adds	r2, #1
     df2:	b2d2      	uxtb	r2, r2
     df4:	2a07      	cmp	r2, #7
     df6:	d9f2      	bls.n	dde <usb_d_init+0x1a>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
     df8:	4909      	ldr	r1, [pc, #36]	; (e20 <usb_d_init+0x5c>)
     dfa:	2000      	movs	r0, #0
     dfc:	4c09      	ldr	r4, [pc, #36]	; (e24 <usb_d_init+0x60>)
     dfe:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
     e00:	4909      	ldr	r1, [pc, #36]	; (e28 <usb_d_init+0x64>)
     e02:	2001      	movs	r0, #1
     e04:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
     e06:	4909      	ldr	r1, [pc, #36]	; (e2c <usb_d_init+0x68>)
     e08:	2002      	movs	r0, #2
     e0a:	47a0      	blx	r4
	return ERR_NONE;
     e0c:	2000      	movs	r0, #0
}
     e0e:	bd10      	pop	{r4, pc}
     e10:	00002239 	.word	0x00002239
     e14:	200000ec 	.word	0x200000ec
     e18:	0000399f 	.word	0x0000399f
     e1c:	00000bb5 	.word	0x00000bb5
     e20:	00000d2d 	.word	0x00000d2d
     e24:	00002bf9 	.word	0x00002bf9
     e28:	00000bb9 	.word	0x00000bb9
     e2c:	00000be9 	.word	0x00000be9

00000e30 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
     e30:	b510      	push	{r4, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
     e32:	4b01      	ldr	r3, [pc, #4]	; (e38 <usb_d_register_callback+0x8>)
     e34:	4798      	blx	r3
}
     e36:	bd10      	pop	{r4, pc}
     e38:	00002bd5 	.word	0x00002bd5

00000e3c <usb_d_enable>:

int32_t usb_d_enable(void)
{
     e3c:	b510      	push	{r4, lr}
	return _usb_d_dev_enable();
     e3e:	4b01      	ldr	r3, [pc, #4]	; (e44 <usb_d_enable+0x8>)
     e40:	4798      	blx	r3
}
     e42:	bd10      	pop	{r4, pc}
     e44:	000022e1 	.word	0x000022e1

00000e48 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
     e48:	b510      	push	{r4, lr}
	_usb_d_dev_attach();
     e4a:	4b01      	ldr	r3, [pc, #4]	; (e50 <usb_d_attach+0x8>)
     e4c:	4798      	blx	r3
}
     e4e:	bd10      	pop	{r4, pc}
     e50:	00002331 	.word	0x00002331

00000e54 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
     e54:	b510      	push	{r4, lr}
	_usb_d_dev_set_address(addr);
     e56:	4b01      	ldr	r3, [pc, #4]	; (e5c <usb_d_set_address+0x8>)
     e58:	4798      	blx	r3
}
     e5a:	bd10      	pop	{r4, pc}
     e5c:	00002341 	.word	0x00002341

00000e60 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
     e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     e62:	0005      	movs	r5, r0
     e64:	000e      	movs	r6, r1
     e66:	0017      	movs	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
     e68:	4b0f      	ldr	r3, [pc, #60]	; (ea8 <usb_d_ep_init+0x48>)
     e6a:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
     e6c:	2800      	cmp	r0, #0
     e6e:	da14      	bge.n	e9a <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
     e70:	20ff      	movs	r0, #255	; 0xff
     e72:	4b0d      	ldr	r3, [pc, #52]	; (ea8 <usb_d_ep_init+0x48>)
     e74:	4798      	blx	r3
     e76:	1e04      	subs	r4, r0, #0
		if (ep_index < 0) {
     e78:	db12      	blt.n	ea0 <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
     e7a:	003a      	movs	r2, r7
     e7c:	0031      	movs	r1, r6
     e7e:	0028      	movs	r0, r5
     e80:	4b0a      	ldr	r3, [pc, #40]	; (eac <usb_d_ep_init+0x4c>)
     e82:	4798      	blx	r3
	if (rc < 0) {
     e84:	2800      	cmp	r0, #0
     e86:	db07      	blt.n	e98 <usb_d_ep_init+0x38>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
     e88:	4a09      	ldr	r2, [pc, #36]	; (eb0 <usb_d_ep_init+0x50>)
     e8a:	0164      	lsls	r4, r4, #5
     e8c:	1913      	adds	r3, r2, r4
     e8e:	705d      	strb	r5, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
     e90:	2303      	movs	r3, #3
     e92:	401e      	ands	r6, r3
     e94:	54a6      	strb	r6, [r4, r2]
	return ERR_NONE;
     e96:	2000      	movs	r0, #0
}
     e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
     e9a:	2014      	movs	r0, #20
     e9c:	4240      	negs	r0, r0
     e9e:	e7fb      	b.n	e98 <usb_d_ep_init+0x38>
			return -USB_ERR_ALLOC_FAIL;
     ea0:	2015      	movs	r0, #21
     ea2:	4240      	negs	r0, r0
     ea4:	e7f8      	b.n	e98 <usb_d_ep_init+0x38>
     ea6:	46c0      	nop			; (mov r8, r8)
     ea8:	00000b79 	.word	0x00000b79
     eac:	00002355 	.word	0x00002355
     eb0:	200000ec 	.word	0x200000ec

00000eb4 <usb_d_ep0_init>:
{
     eb4:	b510      	push	{r4, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
     eb6:	b282      	uxth	r2, r0
     eb8:	2100      	movs	r1, #0
     eba:	2000      	movs	r0, #0
     ebc:	4b01      	ldr	r3, [pc, #4]	; (ec4 <usb_d_ep0_init+0x10>)
     ebe:	4798      	blx	r3
}
     ec0:	bd10      	pop	{r4, pc}
     ec2:	46c0      	nop			; (mov r8, r8)
     ec4:	00000e61 	.word	0x00000e61

00000ec8 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
     ec8:	b570      	push	{r4, r5, r6, lr}
     eca:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     ecc:	4b06      	ldr	r3, [pc, #24]	; (ee8 <usb_d_ep_deinit+0x20>)
     ece:	4798      	blx	r3
     ed0:	1e04      	subs	r4, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
     ed2:	db07      	blt.n	ee4 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
     ed4:	0028      	movs	r0, r5
     ed6:	4b05      	ldr	r3, [pc, #20]	; (eec <usb_d_ep_deinit+0x24>)
     ed8:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
     eda:	0164      	lsls	r4, r4, #5
     edc:	4b04      	ldr	r3, [pc, #16]	; (ef0 <usb_d_ep_deinit+0x28>)
     ede:	191c      	adds	r4, r3, r4
     ee0:	23ff      	movs	r3, #255	; 0xff
     ee2:	7063      	strb	r3, [r4, #1]
}
     ee4:	bd70      	pop	{r4, r5, r6, pc}
     ee6:	46c0      	nop			; (mov r8, r8)
     ee8:	00000b79 	.word	0x00000b79
     eec:	0000248d 	.word	0x0000248d
     ef0:	200000ec 	.word	0x200000ec

00000ef4 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
     ef4:	b570      	push	{r4, r5, r6, lr}
     ef6:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     ef8:	4b0f      	ldr	r3, [pc, #60]	; (f38 <usb_d_ep_enable+0x44>)
     efa:	4798      	blx	r3
     efc:	1e04      	subs	r4, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
     efe:	db17      	blt.n	f30 <usb_d_ep_enable+0x3c>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
     f00:	0143      	lsls	r3, r0, #5
     f02:	4a0e      	ldr	r2, [pc, #56]	; (f3c <usb_d_ep_enable+0x48>)
     f04:	5c9b      	ldrb	r3, [r3, r2]
     f06:	2b00      	cmp	r3, #0
     f08:	d10a      	bne.n	f20 <usb_d_ep_enable+0x2c>
     f0a:	2102      	movs	r1, #2
     f0c:	0162      	lsls	r2, r4, #5
     f0e:	4b0b      	ldr	r3, [pc, #44]	; (f3c <usb_d_ep_enable+0x48>)
     f10:	189b      	adds	r3, r3, r2
     f12:	7099      	strb	r1, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
     f14:	0028      	movs	r0, r5
     f16:	4b0a      	ldr	r3, [pc, #40]	; (f40 <usb_d_ep_enable+0x4c>)
     f18:	4798      	blx	r3
	if (rc < 0) {
     f1a:	2800      	cmp	r0, #0
     f1c:	db02      	blt.n	f24 <usb_d_ep_enable+0x30>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
     f1e:	bd70      	pop	{r4, r5, r6, pc}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
     f20:	2101      	movs	r1, #1
     f22:	e7f3      	b.n	f0c <usb_d_ep_enable+0x18>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
     f24:	0164      	lsls	r4, r4, #5
     f26:	4b05      	ldr	r3, [pc, #20]	; (f3c <usb_d_ep_enable+0x48>)
     f28:	191c      	adds	r4, r3, r4
     f2a:	2300      	movs	r3, #0
     f2c:	70a3      	strb	r3, [r4, #2]
     f2e:	e7f6      	b.n	f1e <usb_d_ep_enable+0x2a>
		return -USB_ERR_PARAM;
     f30:	2012      	movs	r0, #18
     f32:	4240      	negs	r0, r0
     f34:	e7f3      	b.n	f1e <usb_d_ep_enable+0x2a>
     f36:	46c0      	nop			; (mov r8, r8)
     f38:	00000b79 	.word	0x00000b79
     f3c:	200000ec 	.word	0x200000ec
     f40:	00002549 	.word	0x00002549

00000f44 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
     f44:	b5f0      	push	{r4, r5, r6, r7, lr}
     f46:	46d6      	mov	lr, sl
     f48:	464f      	mov	r7, r9
     f4a:	4646      	mov	r6, r8
     f4c:	b5c0      	push	{r6, r7, lr}
     f4e:	b086      	sub	sp, #24
     f50:	0005      	movs	r5, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
     f52:	7a06      	ldrb	r6, [r0, #8]
     f54:	0030      	movs	r0, r6
     f56:	4b3f      	ldr	r3, [pc, #252]	; (1054 <usb_d_ep_transfer+0x110>)
     f58:	4798      	blx	r3
     f5a:	0007      	movs	r7, r0
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
     f5c:	09f6      	lsrs	r6, r6, #7
     f5e:	7a6b      	ldrb	r3, [r5, #9]
     f60:	1e5a      	subs	r2, r3, #1
     f62:	4193      	sbcs	r3, r2
     f64:	b2dc      	uxtb	r4, r3
	uint32_t              len = xfer->size;
     f66:	686b      	ldr	r3, [r5, #4]
     f68:	4698      	mov	r8, r3
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
     f6a:	2800      	cmp	r0, #0
     f6c:	db6b      	blt.n	1046 <usb_d_ep_transfer+0x102>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
     f6e:	a804      	add	r0, sp, #16
     f70:	4b39      	ldr	r3, [pc, #228]	; (1058 <usb_d_ep_transfer+0x114>)
     f72:	4798      	blx	r3
	state = ept->xfer.hdr.state;
     f74:	017a      	lsls	r2, r7, #5
     f76:	4b39      	ldr	r3, [pc, #228]	; (105c <usb_d_ep_transfer+0x118>)
     f78:	189b      	adds	r3, r3, r2
     f7a:	789a      	ldrb	r2, [r3, #2]
     f7c:	2317      	movs	r3, #23
     f7e:	446b      	add	r3, sp
     f80:	701a      	strb	r2, [r3, #0]
	if (state == USB_EP_S_IDLE) {
     f82:	781b      	ldrb	r3, [r3, #0]
     f84:	2b01      	cmp	r3, #1
     f86:	d00e      	beq.n	fa6 <usb_d_ep_transfer+0x62>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
     f88:	a804      	add	r0, sp, #16
     f8a:	4b35      	ldr	r3, [pc, #212]	; (1060 <usb_d_ep_transfer+0x11c>)
     f8c:	4798      	blx	r3
		switch (state) {
     f8e:	2317      	movs	r3, #23
     f90:	446b      	add	r3, sp
     f92:	781b      	ldrb	r3, [r3, #0]
     f94:	b2db      	uxtb	r3, r3
     f96:	2b05      	cmp	r3, #5
     f98:	d02b      	beq.n	ff2 <usb_d_ep_transfer+0xae>
     f9a:	2b06      	cmp	r3, #6
     f9c:	d056      	beq.n	104c <usb_d_ep_transfer+0x108>
     f9e:	2b00      	cmp	r3, #0
     fa0:	d029      	beq.n	ff6 <usb_d_ep_transfer+0xb2>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
     fa2:	2001      	movs	r0, #1
     fa4:	e01f      	b.n	fe6 <usb_d_ep_transfer+0xa2>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
     fa6:	4b2d      	ldr	r3, [pc, #180]	; (105c <usb_d_ep_transfer+0x118>)
     fa8:	4699      	mov	r9, r3
     faa:	017b      	lsls	r3, r7, #5
     fac:	469a      	mov	sl, r3
     fae:	464b      	mov	r3, r9
     fb0:	4453      	add	r3, sl
     fb2:	2203      	movs	r2, #3
     fb4:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
     fb6:	a804      	add	r0, sp, #16
     fb8:	4b29      	ldr	r3, [pc, #164]	; (1060 <usb_d_ep_transfer+0x11c>)
     fba:	4798      	blx	r3
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     fbc:	464b      	mov	r3, r9
     fbe:	4652      	mov	r2, sl
     fc0:	5cd3      	ldrb	r3, [r2, r3]
     fc2:	2b00      	cmp	r3, #0
     fc4:	d01a      	beq.n	ffc <usb_d_ep_transfer+0xb8>
				zlp = false;
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     fc6:	7a29      	ldrb	r1, [r5, #8]
     fc8:	682b      	ldr	r3, [r5, #0]
     fca:	9301      	str	r3, [sp, #4]
	struct usb_d_transfer trans
     fcc:	4643      	mov	r3, r8
     fce:	9302      	str	r3, [sp, #8]
     fd0:	2e00      	cmp	r6, #0
     fd2:	d035      	beq.n	1040 <usb_d_ep_transfer+0xfc>
     fd4:	2280      	movs	r2, #128	; 0x80
     fd6:	4252      	negs	r2, r2
     fd8:	430a      	orrs	r2, r1
     fda:	b2d2      	uxtb	r2, r2
     fdc:	a801      	add	r0, sp, #4
     fde:	7202      	strb	r2, [r0, #8]
     fe0:	7244      	strb	r4, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
     fe2:	4b20      	ldr	r3, [pc, #128]	; (1064 <usb_d_ep_transfer+0x120>)
     fe4:	4798      	blx	r3
	return rc;
}
     fe6:	b006      	add	sp, #24
     fe8:	bc1c      	pop	{r2, r3, r4}
     fea:	4690      	mov	r8, r2
     fec:	4699      	mov	r9, r3
     fee:	46a2      	mov	sl, r4
     ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return USB_HALTED;
     ff2:	2002      	movs	r0, #2
     ff4:	e7f7      	b.n	fe6 <usb_d_ep_transfer+0xa2>
			return -USB_ERR_FUNC;
     ff6:	2013      	movs	r0, #19
     ff8:	4240      	negs	r0, r0
     ffa:	e7f4      	b.n	fe6 <usb_d_ep_transfer+0xa2>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
     ffc:	017b      	lsls	r3, r7, #5
     ffe:	4a17      	ldr	r2, [pc, #92]	; (105c <usb_d_ep_transfer+0x118>)
    1000:	18d2      	adds	r2, r2, r3
    1002:	7c93      	ldrb	r3, [r2, #18]
    1004:	7cd4      	ldrb	r4, [r2, #19]
    1006:	0224      	lsls	r4, r4, #8
    1008:	191b      	adds	r3, r3, r4
    100a:	b29b      	uxth	r3, r3
		if (req_len == 0) {
    100c:	2b00      	cmp	r3, #0
    100e:	d106      	bne.n	101e <usb_d_ep_transfer+0xda>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    1010:	2304      	movs	r3, #4
    1012:	7093      	strb	r3, [r2, #2]
			len                 = 0;
    1014:	2300      	movs	r3, #0
    1016:	4698      	mov	r8, r3
			zlp                 = true;
    1018:	2401      	movs	r4, #1
			dir                 = true;
    101a:	2601      	movs	r6, #1
    101c:	e7d3      	b.n	fc6 <usb_d_ep_transfer+0x82>
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    101e:	017f      	lsls	r7, r7, #5
    1020:	4a0e      	ldr	r2, [pc, #56]	; (105c <usb_d_ep_transfer+0x118>)
    1022:	19d7      	adds	r7, r2, r7
    1024:	220c      	movs	r2, #12
    1026:	56ba      	ldrsb	r2, [r7, r2]
    1028:	0fd6      	lsrs	r6, r2, #31
			if (len > req_len) {
    102a:	4598      	cmp	r8, r3
    102c:	d900      	bls.n	1030 <usb_d_ep_transfer+0xec>
				len = req_len;
    102e:	4698      	mov	r8, r3
			if (dir) {
    1030:	2a00      	cmp	r2, #0
    1032:	db01      	blt.n	1038 <usb_d_ep_transfer+0xf4>
				zlp = false;
    1034:	2400      	movs	r4, #0
    1036:	e7c6      	b.n	fc6 <usb_d_ep_transfer+0x82>
				zlp = (req_len > len);
    1038:	4598      	cmp	r8, r3
    103a:	419b      	sbcs	r3, r3
    103c:	425c      	negs	r4, r3
    103e:	e7c2      	b.n	fc6 <usb_d_ep_transfer+0x82>
	struct usb_d_transfer trans
    1040:	220f      	movs	r2, #15
    1042:	400a      	ands	r2, r1
    1044:	e7ca      	b.n	fdc <usb_d_ep_transfer+0x98>
		return -USB_ERR_PARAM;
    1046:	2012      	movs	r0, #18
    1048:	4240      	negs	r0, r0
    104a:	e7cc      	b.n	fe6 <usb_d_ep_transfer+0xa2>
			return -USB_ERROR;
    104c:	2010      	movs	r0, #16
    104e:	4240      	negs	r0, r0
    1050:	e7c9      	b.n	fe6 <usb_d_ep_transfer+0xa2>
    1052:	46c0      	nop			; (mov r8, r8)
    1054:	00000b79 	.word	0x00000b79
    1058:	00000819 	.word	0x00000819
    105c:	200000ec 	.word	0x200000ec
    1060:	00000827 	.word	0x00000827
    1064:	00002a05 	.word	0x00002a05

00001068 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    1068:	b570      	push	{r4, r5, r6, lr}
    106a:	0004      	movs	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    106c:	2900      	cmp	r1, #0
    106e:	d005      	beq.n	107c <usb_d_ep_halt+0x14>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    1070:	2901      	cmp	r1, #1
    1072:	d024      	beq.n	10be <usb_d_ep_halt+0x56>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    1074:	2102      	movs	r1, #2
    1076:	4b13      	ldr	r3, [pc, #76]	; (10c4 <usb_d_ep_halt+0x5c>)
    1078:	4798      	blx	r3
	}
}
    107a:	bd70      	pop	{r4, r5, r6, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    107c:	4b12      	ldr	r3, [pc, #72]	; (10c8 <usb_d_ep_halt+0x60>)
    107e:	4798      	blx	r3
    1080:	1e05      	subs	r5, r0, #0
	if (ep_index < 0) {
    1082:	db19      	blt.n	10b8 <usb_d_ep_halt+0x50>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    1084:	2102      	movs	r1, #2
    1086:	0020      	movs	r0, r4
    1088:	4b0e      	ldr	r3, [pc, #56]	; (10c4 <usb_d_ep_halt+0x5c>)
    108a:	4798      	blx	r3
    108c:	2800      	cmp	r0, #0
    108e:	d0f4      	beq.n	107a <usb_d_ep_halt+0x12>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1090:	2100      	movs	r1, #0
    1092:	0020      	movs	r0, r4
    1094:	4b0b      	ldr	r3, [pc, #44]	; (10c4 <usb_d_ep_halt+0x5c>)
    1096:	4798      	blx	r3
		if (rc < 0) {
    1098:	2800      	cmp	r0, #0
    109a:	dbee      	blt.n	107a <usb_d_ep_halt+0x12>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    109c:	016d      	lsls	r5, r5, #5
    109e:	4b0b      	ldr	r3, [pc, #44]	; (10cc <usb_d_ep_halt+0x64>)
    10a0:	195d      	adds	r5, r3, r5
    10a2:	2301      	movs	r3, #1
    10a4:	70ab      	strb	r3, [r5, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    10a6:	3302      	adds	r3, #2
    10a8:	70eb      	strb	r3, [r5, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    10aa:	69eb      	ldr	r3, [r5, #28]
    10ac:	2200      	movs	r2, #0
    10ae:	2103      	movs	r1, #3
    10b0:	0020      	movs	r0, r4
    10b2:	4798      	blx	r3
	return ERR_NONE;
    10b4:	2000      	movs	r0, #0
    10b6:	e7e0      	b.n	107a <usb_d_ep_halt+0x12>
		return -USB_ERR_PARAM;
    10b8:	2012      	movs	r0, #18
    10ba:	4240      	negs	r0, r0
		return _usb_d_ep_halt_clr(ep);
    10bc:	e7dd      	b.n	107a <usb_d_ep_halt+0x12>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    10be:	4b01      	ldr	r3, [pc, #4]	; (10c4 <usb_d_ep_halt+0x5c>)
    10c0:	4798      	blx	r3
    10c2:	e7da      	b.n	107a <usb_d_ep_halt+0x12>
    10c4:	00002841 	.word	0x00002841
    10c8:	00000b79 	.word	0x00000b79
    10cc:	200000ec 	.word	0x200000ec

000010d0 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    10d0:	b570      	push	{r4, r5, r6, lr}
    10d2:	000d      	movs	r5, r1
    10d4:	0014      	movs	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    10d6:	4b0f      	ldr	r3, [pc, #60]	; (1114 <usb_d_ep_register_callback+0x44>)
    10d8:	4798      	blx	r3
    10da:	0003      	movs	r3, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    10dc:	2c00      	cmp	r4, #0
    10de:	d008      	beq.n	10f2 <usb_d_ep_register_callback+0x22>
	if (ep_index < 0) {
    10e0:	2b00      	cmp	r3, #0
    10e2:	db05      	blt.n	10f0 <usb_d_ep_register_callback+0x20>
		return;
	}
	switch (type) {
    10e4:	2d01      	cmp	r5, #1
    10e6:	d00b      	beq.n	1100 <usb_d_ep_register_callback+0x30>
    10e8:	2d00      	cmp	r5, #0
    10ea:	d004      	beq.n	10f6 <usb_d_ep_register_callback+0x26>
    10ec:	2d02      	cmp	r5, #2
    10ee:	d00c      	beq.n	110a <usb_d_ep_register_callback+0x3a>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
	}
}
    10f0:	bd70      	pop	{r4, r5, r6, pc}
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    10f2:	4c09      	ldr	r4, [pc, #36]	; (1118 <usb_d_ep_register_callback+0x48>)
    10f4:	e7f4      	b.n	10e0 <usb_d_ep_register_callback+0x10>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    10f6:	0140      	lsls	r0, r0, #5
    10f8:	4b08      	ldr	r3, [pc, #32]	; (111c <usb_d_ep_register_callback+0x4c>)
    10fa:	1818      	adds	r0, r3, r0
    10fc:	6144      	str	r4, [r0, #20]
		break;
    10fe:	e7f7      	b.n	10f0 <usb_d_ep_register_callback+0x20>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    1100:	0140      	lsls	r0, r0, #5
    1102:	4b06      	ldr	r3, [pc, #24]	; (111c <usb_d_ep_register_callback+0x4c>)
    1104:	1818      	adds	r0, r3, r0
    1106:	6184      	str	r4, [r0, #24]
		break;
    1108:	e7f2      	b.n	10f0 <usb_d_ep_register_callback+0x20>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    110a:	0140      	lsls	r0, r0, #5
    110c:	4b03      	ldr	r3, [pc, #12]	; (111c <usb_d_ep_register_callback+0x4c>)
    110e:	1818      	adds	r0, r3, r0
    1110:	61c4      	str	r4, [r0, #28]
		break;
    1112:	e7ed      	b.n	10f0 <usb_d_ep_register_callback+0x20>
    1114:	00000b79 	.word	0x00000b79
    1118:	00000bb5 	.word	0x00000bb5
    111c:	200000ec 	.word	0x200000ec

00001120 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    1120:	2800      	cmp	r0, #0
    1122:	d100      	bne.n	1126 <assert+0x6>
		__asm("BKPT #0");
    1124:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    1126:	4770      	bx	lr

00001128 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    1128:	6803      	ldr	r3, [r0, #0]
    112a:	2b00      	cmp	r3, #0
    112c:	d003      	beq.n	1136 <is_list_element+0xe>
		if (it == element) {
    112e:	428b      	cmp	r3, r1
    1130:	d003      	beq.n	113a <is_list_element+0x12>
	for (it = list->head; it; it = it->next) {
    1132:	681b      	ldr	r3, [r3, #0]
    1134:	e7f9      	b.n	112a <is_list_element+0x2>
			return true;
		}
	}

	return false;
    1136:	2000      	movs	r0, #0
}
    1138:	4770      	bx	lr
			return true;
    113a:	2001      	movs	r0, #1
    113c:	e7fc      	b.n	1138 <is_list_element+0x10>
	...

00001140 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    1140:	b570      	push	{r4, r5, r6, lr}
    1142:	0005      	movs	r5, r0
    1144:	000e      	movs	r6, r1
	struct list_element *it = list->head;
    1146:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    1148:	4b0a      	ldr	r3, [pc, #40]	; (1174 <list_insert_at_end+0x34>)
    114a:	4798      	blx	r3
    114c:	2301      	movs	r3, #1
    114e:	4058      	eors	r0, r3
    1150:	b2c0      	uxtb	r0, r0
    1152:	224f      	movs	r2, #79	; 0x4f
    1154:	4908      	ldr	r1, [pc, #32]	; (1178 <list_insert_at_end+0x38>)
    1156:	4b09      	ldr	r3, [pc, #36]	; (117c <list_insert_at_end+0x3c>)
    1158:	4798      	blx	r3

	if (!list->head) {
    115a:	682b      	ldr	r3, [r5, #0]
    115c:	2b00      	cmp	r3, #0
    115e:	d103      	bne.n	1168 <list_insert_at_end+0x28>
		list->head                             = (struct list_element *)element;
    1160:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    1162:	6033      	str	r3, [r6, #0]
		return;
    1164:	e005      	b.n	1172 <list_insert_at_end+0x32>
	}

	while (it->next) {
		it = it->next;
    1166:	001c      	movs	r4, r3
	while (it->next) {
    1168:	6823      	ldr	r3, [r4, #0]
    116a:	2b00      	cmp	r3, #0
    116c:	d1fb      	bne.n	1166 <list_insert_at_end+0x26>
	}
	it->next                               = (struct list_element *)element;
    116e:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    1170:	6033      	str	r3, [r6, #0]
}
    1172:	bd70      	pop	{r4, r5, r6, pc}
    1174:	00001129 	.word	0x00001129
    1178:	000041d0 	.word	0x000041d0
    117c:	00001121 	.word	0x00001121

00001180 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    1180:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    1182:	4a06      	ldr	r2, [pc, #24]	; (119c <_sbrk+0x1c>)
    1184:	6812      	ldr	r2, [r2, #0]
    1186:	2a00      	cmp	r2, #0
    1188:	d004      	beq.n	1194 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    118a:	4a04      	ldr	r2, [pc, #16]	; (119c <_sbrk+0x1c>)
    118c:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    118e:	18c3      	adds	r3, r0, r3
    1190:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    1192:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    1194:	4902      	ldr	r1, [pc, #8]	; (11a0 <_sbrk+0x20>)
    1196:	4a01      	ldr	r2, [pc, #4]	; (119c <_sbrk+0x1c>)
    1198:	6011      	str	r1, [r2, #0]
    119a:	e7f6      	b.n	118a <_sbrk+0xa>
    119c:	200001ec 	.word	0x200001ec
    11a0:	20002790 	.word	0x20002790

000011a4 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
    11a4:	2001      	movs	r0, #1
    11a6:	4240      	negs	r0, r0
    11a8:	4770      	bx	lr

000011aa <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
    11aa:	2380      	movs	r3, #128	; 0x80
    11ac:	019b      	lsls	r3, r3, #6
    11ae:	604b      	str	r3, [r1, #4]

	return 0;
}
    11b0:	2000      	movs	r0, #0
    11b2:	4770      	bx	lr

000011b4 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
    11b4:	2000      	movs	r0, #0
    11b6:	4770      	bx	lr

000011b8 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    11b8:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    11ba:	4b06      	ldr	r3, [pc, #24]	; (11d4 <_init_chip+0x1c>)
    11bc:	685a      	ldr	r2, [r3, #4]
    11be:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
    11c0:	4b05      	ldr	r3, [pc, #20]	; (11d8 <_init_chip+0x20>)
    11c2:	4798      	blx	r3
	_sysctrl_init_sources();
    11c4:	4b05      	ldr	r3, [pc, #20]	; (11dc <_init_chip+0x24>)
    11c6:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
    11c8:	4b05      	ldr	r3, [pc, #20]	; (11e0 <_init_chip+0x28>)
    11ca:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    11cc:	20ff      	movs	r0, #255	; 0xff
    11ce:	4b05      	ldr	r3, [pc, #20]	; (11e4 <_init_chip+0x2c>)
    11d0:	4798      	blx	r3
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
    11d2:	bd10      	pop	{r4, pc}
    11d4:	41004000 	.word	0x41004000
    11d8:	0000132d 	.word	0x0000132d
    11dc:	00001819 	.word	0x00001819
    11e0:	00001875 	.word	0x00001875
    11e4:	00001259 	.word	0x00001259

000011e8 <_dac_init>:
typedef uint8_t  hri_dac_intflag_reg_t;
typedef uint8_t  hri_dac_status_reg_t;

static inline void hri_dac_wait_for_sync(const void *const hw)
{
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    11e8:	79c3      	ldrb	r3, [r0, #7]
    11ea:	09db      	lsrs	r3, r3, #7
    11ec:	d1fc      	bne.n	11e8 <_dac_init>
    11ee:	79c3      	ldrb	r3, [r0, #7]
    11f0:	09db      	lsrs	r3, r3, #7
    11f2:	d1fc      	bne.n	11ee <_dac_init+0x6>

static inline hri_dac_ctrla_reg_t hri_dac_get_CTRLA_reg(const void *const hw, hri_dac_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_dac_wait_for_sync(hw);
	tmp = ((Dac *)hw)->CTRLA.reg;
    11f4:	7803      	ldrb	r3, [r0, #0]
 * param[in] hw The pointer to DAC hardware instance
 */
static int32_t _dac_init(void *const hw)
{
	hri_dac_wait_for_sync(hw);
	if (hri_dac_get_CTRLA_reg(hw, DAC_CTRLA_ENABLE)) {
    11f6:	079b      	lsls	r3, r3, #30
    11f8:	d507      	bpl.n	120a <_dac_init+0x22>
}

static inline void hri_dac_write_CTRLA_reg(const void *const hw, hri_dac_ctrla_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->CTRLA.reg = data;
    11fa:	2300      	movs	r3, #0
    11fc:	7003      	strb	r3, [r0, #0]
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    11fe:	79c3      	ldrb	r3, [r0, #7]
    1200:	09db      	lsrs	r3, r3, #7
    1202:	d1fc      	bne.n	11fe <_dac_init+0x16>
    1204:	79c3      	ldrb	r3, [r0, #7]
    1206:	09db      	lsrs	r3, r3, #7
    1208:	d1fc      	bne.n	1204 <_dac_init+0x1c>
	((Dac *)hw)->CTRLA.reg = data;
    120a:	2301      	movs	r3, #1
    120c:	7003      	strb	r3, [r0, #0]
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    120e:	79c3      	ldrb	r3, [r0, #7]
    1210:	09db      	lsrs	r3, r3, #7
    1212:	d1fc      	bne.n	120e <_dac_init+0x26>
    1214:	79c3      	ldrb	r3, [r0, #7]
    1216:	09db      	lsrs	r3, r3, #7
    1218:	d1fc      	bne.n	1214 <_dac_init+0x2c>
}

static inline void hri_dac_write_EVCTRL_reg(const void *const hw, hri_dac_evctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->EVCTRL.reg = data;
    121a:	7083      	strb	r3, [r0, #2]
	((Dac *)hw)->CTRLB.reg = data;
    121c:	2241      	movs	r2, #65	; 0x41
    121e:	7042      	strb	r2, [r0, #1]
	((Dac *)hw)->CTRLA.reg = data;
    1220:	7003      	strb	r3, [r0, #0]
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    1222:	79c3      	ldrb	r3, [r0, #7]
    1224:	09db      	lsrs	r3, r3, #7
    1226:	d1fc      	bne.n	1222 <_dac_init+0x3a>

	hri_dac_write_EVCTRL_reg(hw, _dac.ev_ctrl);
	hri_dac_write_CTRLB_reg(hw, _dac.ctrlb);
	hri_dac_write_CTRLA_reg(hw, _dac.ctrla);
	return ERR_NONE;
}
    1228:	2000      	movs	r0, #0
    122a:	4770      	bx	lr

0000122c <_dac_sync_init>:
{
    122c:	b570      	push	{r4, r5, r6, lr}
    122e:	0005      	movs	r5, r0
    1230:	000c      	movs	r4, r1
	ASSERT(device);
    1232:	1e43      	subs	r3, r0, #1
    1234:	4198      	sbcs	r0, r3
    1236:	b2c0      	uxtb	r0, r0
    1238:	2249      	movs	r2, #73	; 0x49
    123a:	4904      	ldr	r1, [pc, #16]	; (124c <_dac_sync_init+0x20>)
    123c:	4b04      	ldr	r3, [pc, #16]	; (1250 <_dac_sync_init+0x24>)
    123e:	4798      	blx	r3
	device->hw = hw;
    1240:	602c      	str	r4, [r5, #0]
	return _dac_init(device->hw);
    1242:	0020      	movs	r0, r4
    1244:	4b03      	ldr	r3, [pc, #12]	; (1254 <_dac_sync_init+0x28>)
    1246:	4798      	blx	r3
}
    1248:	bd70      	pop	{r4, r5, r6, pc}
    124a:	46c0      	nop			; (mov r8, r8)
    124c:	000041f0 	.word	0x000041f0
    1250:	00001121 	.word	0x00001121
    1254:	000011e9 	.word	0x000011e9

00001258 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1258:	07c3      	lsls	r3, r0, #31
    125a:	d509      	bpl.n	1270 <_gclk_init_generators_by_fref+0x18>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
    125c:	4b27      	ldr	r3, [pc, #156]	; (12fc <_gclk_init_generators_by_fref+0xa4>)
    125e:	2280      	movs	r2, #128	; 0x80
    1260:	0052      	lsls	r2, r2, #1
    1262:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    1264:	4a26      	ldr	r2, [pc, #152]	; (1300 <_gclk_init_generators_by_fref+0xa8>)
    1266:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    1268:	4b24      	ldr	r3, [pc, #144]	; (12fc <_gclk_init_generators_by_fref+0xa4>)
    126a:	785b      	ldrb	r3, [r3, #1]
    126c:	09db      	lsrs	r3, r3, #7
    126e:	d1fb      	bne.n	1268 <_gclk_init_generators_by_fref+0x10>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SRC | GCLK_GENCTRL_ID(0));
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    1270:	0783      	lsls	r3, r0, #30
    1272:	d508      	bpl.n	1286 <_gclk_init_generators_by_fref+0x2e>
	((Gclk *)hw)->GENDIV.reg = data;
    1274:	4b21      	ldr	r3, [pc, #132]	; (12fc <_gclk_init_generators_by_fref+0xa4>)
    1276:	4a23      	ldr	r2, [pc, #140]	; (1304 <_gclk_init_generators_by_fref+0xac>)
    1278:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    127a:	4a23      	ldr	r2, [pc, #140]	; (1308 <_gclk_init_generators_by_fref+0xb0>)
    127c:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    127e:	4b1f      	ldr	r3, [pc, #124]	; (12fc <_gclk_init_generators_by_fref+0xa4>)
    1280:	785b      	ldrb	r3, [r3, #1]
    1282:	09db      	lsrs	r3, r3, #7
    1284:	d1fb      	bne.n	127e <_gclk_init_generators_by_fref+0x26>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SRC | GCLK_GENCTRL_ID(1));
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    1286:	0743      	lsls	r3, r0, #29
    1288:	d508      	bpl.n	129c <_gclk_init_generators_by_fref+0x44>
	((Gclk *)hw)->GENDIV.reg = data;
    128a:	4b1c      	ldr	r3, [pc, #112]	; (12fc <_gclk_init_generators_by_fref+0xa4>)
    128c:	4a1f      	ldr	r2, [pc, #124]	; (130c <_gclk_init_generators_by_fref+0xb4>)
    128e:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    1290:	4a1f      	ldr	r2, [pc, #124]	; (1310 <_gclk_init_generators_by_fref+0xb8>)
    1292:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    1294:	4b19      	ldr	r3, [pc, #100]	; (12fc <_gclk_init_generators_by_fref+0xa4>)
    1296:	785b      	ldrb	r3, [r3, #1]
    1298:	09db      	lsrs	r3, r3, #7
    129a:	d1fb      	bne.n	1294 <_gclk_init_generators_by_fref+0x3c>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    129c:	0703      	lsls	r3, r0, #28
    129e:	d508      	bpl.n	12b2 <_gclk_init_generators_by_fref+0x5a>
	((Gclk *)hw)->GENDIV.reg = data;
    12a0:	4b16      	ldr	r3, [pc, #88]	; (12fc <_gclk_init_generators_by_fref+0xa4>)
    12a2:	4a1c      	ldr	r2, [pc, #112]	; (1314 <_gclk_init_generators_by_fref+0xbc>)
    12a4:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    12a6:	4a1c      	ldr	r2, [pc, #112]	; (1318 <_gclk_init_generators_by_fref+0xc0>)
    12a8:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    12aa:	4b14      	ldr	r3, [pc, #80]	; (12fc <_gclk_init_generators_by_fref+0xa4>)
    12ac:	785b      	ldrb	r3, [r3, #1]
    12ae:	09db      	lsrs	r3, r3, #7
    12b0:	d1fb      	bne.n	12aa <_gclk_init_generators_by_fref+0x52>
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SRC | GCLK_GENCTRL_ID(3));
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    12b2:	06c3      	lsls	r3, r0, #27
    12b4:	d509      	bpl.n	12ca <_gclk_init_generators_by_fref+0x72>
	((Gclk *)hw)->GENDIV.reg = data;
    12b6:	4b11      	ldr	r3, [pc, #68]	; (12fc <_gclk_init_generators_by_fref+0xa4>)
    12b8:	2282      	movs	r2, #130	; 0x82
    12ba:	0052      	lsls	r2, r2, #1
    12bc:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    12be:	4a17      	ldr	r2, [pc, #92]	; (131c <_gclk_init_generators_by_fref+0xc4>)
    12c0:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    12c2:	4b0e      	ldr	r3, [pc, #56]	; (12fc <_gclk_init_generators_by_fref+0xa4>)
    12c4:	785b      	ldrb	r3, [r3, #1]
    12c6:	09db      	lsrs	r3, r3, #7
    12c8:	d1fb      	bne.n	12c2 <_gclk_init_generators_by_fref+0x6a>
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SRC | GCLK_GENCTRL_ID(4));
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    12ca:	0683      	lsls	r3, r0, #26
    12cc:	d508      	bpl.n	12e0 <_gclk_init_generators_by_fref+0x88>
	((Gclk *)hw)->GENDIV.reg = data;
    12ce:	4b0b      	ldr	r3, [pc, #44]	; (12fc <_gclk_init_generators_by_fref+0xa4>)
    12d0:	4a13      	ldr	r2, [pc, #76]	; (1320 <_gclk_init_generators_by_fref+0xc8>)
    12d2:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    12d4:	4a13      	ldr	r2, [pc, #76]	; (1324 <_gclk_init_generators_by_fref+0xcc>)
    12d6:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    12d8:	4b08      	ldr	r3, [pc, #32]	; (12fc <_gclk_init_generators_by_fref+0xa4>)
    12da:	785b      	ldrb	r3, [r3, #1]
    12dc:	09db      	lsrs	r3, r3, #7
    12de:	d1fb      	bne.n	12d8 <_gclk_init_generators_by_fref+0x80>
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SRC | GCLK_GENCTRL_ID(5));
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    12e0:	0643      	lsls	r3, r0, #25
    12e2:	d509      	bpl.n	12f8 <_gclk_init_generators_by_fref+0xa0>
	((Gclk *)hw)->GENDIV.reg = data;
    12e4:	4b05      	ldr	r3, [pc, #20]	; (12fc <_gclk_init_generators_by_fref+0xa4>)
    12e6:	2283      	movs	r2, #131	; 0x83
    12e8:	0052      	lsls	r2, r2, #1
    12ea:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    12ec:	4a0e      	ldr	r2, [pc, #56]	; (1328 <_gclk_init_generators_by_fref+0xd0>)
    12ee:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    12f0:	4b02      	ldr	r3, [pc, #8]	; (12fc <_gclk_init_generators_by_fref+0xa4>)
    12f2:	785b      	ldrb	r3, [r3, #1]
    12f4:	09db      	lsrs	r3, r3, #7
    12f6:	d1fb      	bne.n	12f0 <_gclk_init_generators_by_fref+0x98>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
    12f8:	4770      	bx	lr
    12fa:	46c0      	nop			; (mov r8, r8)
    12fc:	40000c00 	.word	0x40000c00
    1300:	00290800 	.word	0x00290800
    1304:	00000601 	.word	0x00000601
    1308:	00010801 	.word	0x00010801
    130c:	00000402 	.word	0x00000402
    1310:	00210602 	.word	0x00210602
    1314:	00000803 	.word	0x00000803
    1318:	00290603 	.word	0x00290603
    131c:	00090704 	.word	0x00090704
    1320:	00000305 	.word	0x00000305
    1324:	00010805 	.word	0x00010805
    1328:	00210406 	.word	0x00210406

0000132c <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
    132c:	4b06      	ldr	r3, [pc, #24]	; (1348 <_pm_init+0x1c>)
    132e:	7a1a      	ldrb	r2, [r3, #8]
    1330:	b2d2      	uxtb	r2, r2
    1332:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
    1334:	7a5a      	ldrb	r2, [r3, #9]
    1336:	b2d2      	uxtb	r2, r2
    1338:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
    133a:	7a9a      	ldrb	r2, [r3, #10]
    133c:	b2d2      	uxtb	r2, r2
    133e:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
    1340:	7ada      	ldrb	r2, [r3, #11]
    1342:	b2d2      	uxtb	r2, r2
    1344:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
    1346:	4770      	bx	lr
    1348:	40000400 	.word	0x40000400

0000134c <_sercom_get_hardware_index>:
{
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    134c:	4b02      	ldr	r3, [pc, #8]	; (1358 <_sercom_get_hardware_index+0xc>)
    134e:	469c      	mov	ip, r3
    1350:	4460      	add	r0, ip
    1352:	0a80      	lsrs	r0, r0, #10
    1354:	b2c0      	uxtb	r0, r0
}
    1356:	4770      	bx	lr
    1358:	bdfff800 	.word	0xbdfff800

0000135c <_get_sercom_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static uint8_t _get_sercom_index(const void *const hw)
{
    135c:	b510      	push	{r4, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    135e:	4b0b      	ldr	r3, [pc, #44]	; (138c <_get_sercom_index+0x30>)
    1360:	4798      	blx	r3
    1362:	0002      	movs	r2, r0
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    1364:	2000      	movs	r0, #0
    1366:	2800      	cmp	r0, #0
    1368:	d006      	beq.n	1378 <_get_sercom_index+0x1c>
		if (_usarts[i].number == sercom_offset) {
			return i;
		}
	}

	ASSERT(false);
    136a:	4a09      	ldr	r2, [pc, #36]	; (1390 <_get_sercom_index+0x34>)
    136c:	4909      	ldr	r1, [pc, #36]	; (1394 <_get_sercom_index+0x38>)
    136e:	2000      	movs	r0, #0
    1370:	4b09      	ldr	r3, [pc, #36]	; (1398 <_get_sercom_index+0x3c>)
    1372:	4798      	blx	r3
	return 0;
    1374:	2000      	movs	r0, #0
}
    1376:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == sercom_offset) {
    1378:	0083      	lsls	r3, r0, #2
    137a:	181b      	adds	r3, r3, r0
    137c:	0099      	lsls	r1, r3, #2
    137e:	4b07      	ldr	r3, [pc, #28]	; (139c <_get_sercom_index+0x40>)
    1380:	5ccb      	ldrb	r3, [r1, r3]
    1382:	429a      	cmp	r2, r3
    1384:	d0f7      	beq.n	1376 <_get_sercom_index+0x1a>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    1386:	3001      	adds	r0, #1
    1388:	b2c0      	uxtb	r0, r0
    138a:	e7ec      	b.n	1366 <_get_sercom_index+0xa>
    138c:	0000134d 	.word	0x0000134d
    1390:	0000023a 	.word	0x0000023a
    1394:	00004278 	.word	0x00004278
    1398:	00001121 	.word	0x00001121
    139c:	00004208 	.word	0x00004208

000013a0 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    13a0:	b570      	push	{r4, r5, r6, lr}
    13a2:	0004      	movs	r4, r0
	uint8_t i = _get_sercom_index(hw);
    13a4:	4b38      	ldr	r3, [pc, #224]	; (1488 <_usart_init+0xe8>)
    13a6:	4798      	blx	r3
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    13a8:	69e3      	ldr	r3, [r4, #28]

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    13aa:	07db      	lsls	r3, r3, #31
    13ac:	d41d      	bmi.n	13ea <_usart_init+0x4a>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    13ae:	0083      	lsls	r3, r0, #2
    13b0:	181b      	adds	r3, r3, r0
    13b2:	009a      	lsls	r2, r3, #2
    13b4:	4b35      	ldr	r3, [pc, #212]	; (148c <_usart_init+0xec>)
    13b6:	189b      	adds	r3, r3, r2
    13b8:	685a      	ldr	r2, [r3, #4]
    13ba:	231c      	movs	r3, #28
    13bc:	401a      	ands	r2, r3
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    13be:	69e3      	ldr	r3, [r4, #28]
    13c0:	079b      	lsls	r3, r3, #30
    13c2:	d1fc      	bne.n	13be <_usart_init+0x1e>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    13c4:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    13c6:	079b      	lsls	r3, r3, #30
    13c8:	d509      	bpl.n	13de <_usart_init+0x3e>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    13ca:	6823      	ldr	r3, [r4, #0]
    13cc:	2102      	movs	r1, #2
    13ce:	438b      	bics	r3, r1
    13d0:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    13d2:	69e3      	ldr	r3, [r4, #28]
    13d4:	079b      	lsls	r3, r3, #30
    13d6:	d1fc      	bne.n	13d2 <_usart_init+0x32>
    13d8:	69e3      	ldr	r3, [r4, #28]
    13da:	079b      	lsls	r3, r3, #30
    13dc:	d4fc      	bmi.n	13d8 <_usart_init+0x38>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    13de:	2301      	movs	r3, #1
    13e0:	4313      	orrs	r3, r2
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    13e2:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    13e4:	69e3      	ldr	r3, [r4, #28]
    13e6:	079b      	lsls	r3, r3, #30
    13e8:	d1fc      	bne.n	13e4 <_usart_init+0x44>
    13ea:	69e3      	ldr	r3, [r4, #28]
    13ec:	07db      	lsls	r3, r3, #31
    13ee:	d4fc      	bmi.n	13ea <_usart_init+0x4a>
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    13f0:	0083      	lsls	r3, r0, #2
    13f2:	181b      	adds	r3, r3, r0
    13f4:	009a      	lsls	r2, r3, #2
    13f6:	4b25      	ldr	r3, [pc, #148]	; (148c <_usart_init+0xec>)
    13f8:	189b      	adds	r3, r3, r2
    13fa:	685b      	ldr	r3, [r3, #4]
	((Sercom *)hw)->USART.CTRLA.reg = data;
    13fc:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    13fe:	69e3      	ldr	r3, [r4, #28]
    1400:	079b      	lsls	r3, r3, #30
    1402:	d1fc      	bne.n	13fe <_usart_init+0x5e>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    1404:	0083      	lsls	r3, r0, #2
    1406:	181b      	adds	r3, r3, r0
    1408:	009a      	lsls	r2, r3, #2
    140a:	4b20      	ldr	r3, [pc, #128]	; (148c <_usart_init+0xec>)
    140c:	189b      	adds	r3, r3, r2
    140e:	689b      	ldr	r3, [r3, #8]
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    1410:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1412:	69e3      	ldr	r3, [r4, #28]
    1414:	075b      	lsls	r3, r3, #29
    1416:	d1fc      	bne.n	1412 <_usart_init+0x72>
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    1418:	0083      	lsls	r3, r0, #2
    141a:	181b      	adds	r3, r3, r0
    141c:	009a      	lsls	r2, r3, #2
    141e:	4b1b      	ldr	r3, [pc, #108]	; (148c <_usart_init+0xec>)
    1420:	189b      	adds	r3, r3, r2
    1422:	685b      	ldr	r3, [r3, #4]
    1424:	049a      	lsls	r2, r3, #18
    1426:	d40b      	bmi.n	1440 <_usart_init+0xa0>
    1428:	22c0      	movs	r2, #192	; 0xc0
    142a:	01d2      	lsls	r2, r2, #7
    142c:	4213      	tst	r3, r2
    142e:	d107      	bne.n	1440 <_usart_init+0xa0>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    1430:	0083      	lsls	r3, r0, #2
    1432:	181b      	adds	r3, r3, r0
    1434:	009a      	lsls	r2, r3, #2
    1436:	4b15      	ldr	r3, [pc, #84]	; (148c <_usart_init+0xec>)
    1438:	189b      	adds	r3, r3, r2
    143a:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    143c:	81a3      	strh	r3, [r4, #12]
    143e:	e015      	b.n	146c <_usart_init+0xcc>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    1440:	0083      	lsls	r3, r0, #2
    1442:	181b      	adds	r3, r3, r0
    1444:	009a      	lsls	r2, r3, #2
    1446:	4911      	ldr	r1, [pc, #68]	; (148c <_usart_init+0xec>)
    1448:	1889      	adds	r1, r1, r2
    144a:	898a      	ldrh	r2, [r1, #12]
    144c:	89a3      	ldrh	r3, [r4, #12]
    144e:	04d2      	lsls	r2, r2, #19
    1450:	0cd2      	lsrs	r2, r2, #19
    1452:	0b5b      	lsrs	r3, r3, #13
    1454:	035b      	lsls	r3, r3, #13
    1456:	4313      	orrs	r3, r2
    1458:	81a3      	strh	r3, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    145a:	7b8b      	ldrb	r3, [r1, #14]
    145c:	2207      	movs	r2, #7
    145e:	401a      	ands	r2, r3
    1460:	89a3      	ldrh	r3, [r4, #12]
    1462:	0352      	lsls	r2, r2, #13
    1464:	04db      	lsls	r3, r3, #19
    1466:	0cdb      	lsrs	r3, r3, #19
    1468:	4313      	orrs	r3, r2
    146a:	81a3      	strh	r3, [r4, #12]
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    146c:	4a07      	ldr	r2, [pc, #28]	; (148c <_usart_init+0xec>)
    146e:	0083      	lsls	r3, r0, #2
    1470:	181d      	adds	r5, r3, r0
    1472:	00a9      	lsls	r1, r5, #2
    1474:	000d      	movs	r5, r1
    1476:	1851      	adds	r1, r2, r1
    1478:	7bc9      	ldrb	r1, [r1, #15]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    147a:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    147c:	1952      	adds	r2, r2, r5
    147e:	7c12      	ldrb	r2, [r2, #16]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    1480:	2330      	movs	r3, #48	; 0x30
    1482:	54e2      	strb	r2, [r4, r3]

	return ERR_NONE;
}
    1484:	2000      	movs	r0, #0
    1486:	bd70      	pop	{r4, r5, r6, pc}
    1488:	0000135d 	.word	0x0000135d
    148c:	00004208 	.word	0x00004208

00001490 <_usart_sync_init>:
{
    1490:	b570      	push	{r4, r5, r6, lr}
    1492:	0005      	movs	r5, r0
    1494:	000c      	movs	r4, r1
	ASSERT(device);
    1496:	1e43      	subs	r3, r0, #1
    1498:	4198      	sbcs	r0, r3
    149a:	b2c0      	uxtb	r0, r0
    149c:	22b4      	movs	r2, #180	; 0xb4
    149e:	4904      	ldr	r1, [pc, #16]	; (14b0 <_usart_sync_init+0x20>)
    14a0:	4b04      	ldr	r3, [pc, #16]	; (14b4 <_usart_sync_init+0x24>)
    14a2:	4798      	blx	r3
	device->hw = hw;
    14a4:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
    14a6:	0020      	movs	r0, r4
    14a8:	4b03      	ldr	r3, [pc, #12]	; (14b8 <_usart_sync_init+0x28>)
    14aa:	4798      	blx	r3
}
    14ac:	bd70      	pop	{r4, r5, r6, pc}
    14ae:	46c0      	nop			; (mov r8, r8)
    14b0:	00004278 	.word	0x00004278
    14b4:	00001121 	.word	0x00001121
    14b8:	000013a1 	.word	0x000013a1

000014bc <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    14bc:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    14be:	6813      	ldr	r3, [r2, #0]
    14c0:	2102      	movs	r1, #2
    14c2:	430b      	orrs	r3, r1
    14c4:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    14c6:	69d3      	ldr	r3, [r2, #28]
    14c8:	079b      	lsls	r3, r3, #30
    14ca:	d1fc      	bne.n	14c6 <_usart_sync_enable+0xa>
}
    14cc:	4770      	bx	lr

000014ce <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    14ce:	6803      	ldr	r3, [r0, #0]
    14d0:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
    14d2:	8519      	strh	r1, [r3, #40]	; 0x28
}
    14d4:	4770      	bx	lr

000014d6 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    14d6:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
    14d8:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    14da:	b2c0      	uxtb	r0, r0
}
    14dc:	4770      	bx	lr

000014de <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    14de:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    14e0:	7e18      	ldrb	r0, [r3, #24]
    14e2:	2301      	movs	r3, #1
    14e4:	4018      	ands	r0, r3
}
    14e6:	4770      	bx	lr

000014e8 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    14e8:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    14ea:	7e1b      	ldrb	r3, [r3, #24]
    14ec:	085b      	lsrs	r3, r3, #1
    14ee:	2001      	movs	r0, #1
    14f0:	4018      	ands	r0, r3
}
    14f2:	4770      	bx	lr

000014f4 <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    14f4:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    14f6:	7e1b      	ldrb	r3, [r3, #24]
    14f8:	089b      	lsrs	r3, r3, #2
    14fa:	2001      	movs	r0, #1
    14fc:	4018      	ands	r0, r3
}
    14fe:	4770      	bx	lr

00001500 <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    1500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1502:	0006      	movs	r6, r0
    1504:	000c      	movs	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    1506:	0008      	movs	r0, r1
    1508:	4b73      	ldr	r3, [pc, #460]	; (16d8 <_spi_m_sync_init+0x1d8>)
    150a:	4798      	blx	r3
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    150c:	2300      	movs	r3, #0
    150e:	e001      	b.n	1514 <_spi_m_sync_init+0x14>
    1510:	3301      	adds	r3, #1
    1512:	b2db      	uxtb	r3, r3
    1514:	2b02      	cmp	r3, #2
    1516:	d80b      	bhi.n	1530 <_spi_m_sync_init+0x30>
		if (sercomspi_regs[i].n == n) {
    1518:	0119      	lsls	r1, r3, #4
    151a:	18c9      	adds	r1, r1, r3
    151c:	4a6f      	ldr	r2, [pc, #444]	; (16dc <_spi_m_sync_init+0x1dc>)
    151e:	1852      	adds	r2, r2, r1
    1520:	324c      	adds	r2, #76	; 0x4c
    1522:	7812      	ldrb	r2, [r2, #0]
    1524:	4290      	cmp	r0, r2
    1526:	d1f3      	bne.n	1510 <_spi_m_sync_init+0x10>
			return &sercomspi_regs[i];
    1528:	4d6c      	ldr	r5, [pc, #432]	; (16dc <_spi_m_sync_init+0x1dc>)
    152a:	353c      	adds	r5, #60	; 0x3c
    152c:	186d      	adds	r5, r5, r1
    152e:	e000      	b.n	1532 <_spi_m_sync_init+0x32>
	return NULL;
    1530:	2500      	movs	r5, #0
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    1532:	2e00      	cmp	r6, #0
    1534:	d100      	bne.n	1538 <_spi_m_sync_init+0x38>
    1536:	e082      	b.n	163e <_spi_m_sync_init+0x13e>
    1538:	2c00      	cmp	r4, #0
    153a:	d100      	bne.n	153e <_spi_m_sync_init+0x3e>
    153c:	e07d      	b.n	163a <_spi_m_sync_init+0x13a>
    153e:	2001      	movs	r0, #1
    1540:	4a67      	ldr	r2, [pc, #412]	; (16e0 <_spi_m_sync_init+0x1e0>)
    1542:	4968      	ldr	r1, [pc, #416]	; (16e4 <_spi_m_sync_init+0x1e4>)
    1544:	4b68      	ldr	r3, [pc, #416]	; (16e8 <_spi_m_sync_init+0x1e8>)
    1546:	4798      	blx	r3

	if (regs == NULL) {
    1548:	2d00      	cmp	r5, #0
    154a:	d100      	bne.n	154e <_spi_m_sync_init+0x4e>
    154c:	e0c0      	b.n	16d0 <_spi_m_sync_init+0x1d0>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    154e:	69e3      	ldr	r3, [r4, #28]
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    1550:	07db      	lsls	r3, r3, #31
    1552:	d421      	bmi.n	1598 <_spi_m_sync_init+0x98>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    1554:	782a      	ldrb	r2, [r5, #0]
    1556:	786b      	ldrb	r3, [r5, #1]
    1558:	021b      	lsls	r3, r3, #8
    155a:	4313      	orrs	r3, r2
    155c:	78aa      	ldrb	r2, [r5, #2]
    155e:	0412      	lsls	r2, r2, #16
    1560:	4313      	orrs	r3, r2
    1562:	78ea      	ldrb	r2, [r5, #3]
    1564:	0612      	lsls	r2, r2, #24
    1566:	431a      	orrs	r2, r3
    1568:	231c      	movs	r3, #28
    156a:	401a      	ands	r2, r3
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    156c:	69e3      	ldr	r3, [r4, #28]
    156e:	079b      	lsls	r3, r3, #30
    1570:	d1fc      	bne.n	156c <_spi_m_sync_init+0x6c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    1572:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    1574:	079b      	lsls	r3, r3, #30
    1576:	d509      	bpl.n	158c <_spi_m_sync_init+0x8c>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    1578:	6823      	ldr	r3, [r4, #0]
    157a:	2102      	movs	r1, #2
    157c:	438b      	bics	r3, r1
    157e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1580:	69e3      	ldr	r3, [r4, #28]
    1582:	079b      	lsls	r3, r3, #30
    1584:	d1fc      	bne.n	1580 <_spi_m_sync_init+0x80>
    1586:	69e3      	ldr	r3, [r4, #28]
    1588:	079b      	lsls	r3, r3, #30
    158a:	d4fc      	bmi.n	1586 <_spi_m_sync_init+0x86>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    158c:	2301      	movs	r3, #1
    158e:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1590:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1592:	69e3      	ldr	r3, [r4, #28]
    1594:	079b      	lsls	r3, r3, #30
    1596:	d1fc      	bne.n	1592 <_spi_m_sync_init+0x92>
    1598:	69e3      	ldr	r3, [r4, #28]
    159a:	07db      	lsls	r3, r3, #31
    159c:	d4fc      	bmi.n	1598 <_spi_m_sync_init+0x98>
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    159e:	6034      	str	r4, [r6, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    15a0:	782b      	ldrb	r3, [r5, #0]
    15a2:	786a      	ldrb	r2, [r5, #1]
    15a4:	0212      	lsls	r2, r2, #8
    15a6:	431a      	orrs	r2, r3
    15a8:	78ab      	ldrb	r3, [r5, #2]
    15aa:	041b      	lsls	r3, r3, #16
    15ac:	431a      	orrs	r2, r3
    15ae:	78eb      	ldrb	r3, [r5, #3]
    15b0:	061b      	lsls	r3, r3, #24
    15b2:	4313      	orrs	r3, r2
    15b4:	221c      	movs	r2, #28
    15b6:	4013      	ands	r3, r2
    15b8:	2b08      	cmp	r3, #8
    15ba:	d042      	beq.n	1642 <_spi_m_sync_init+0x142>
	ASSERT(hw && regs);
    15bc:	2c00      	cmp	r4, #0
    15be:	d100      	bne.n	15c2 <_spi_m_sync_init+0xc2>
    15c0:	e082      	b.n	16c8 <_spi_m_sync_init+0x1c8>
    15c2:	2d00      	cmp	r5, #0
    15c4:	d100      	bne.n	15c8 <_spi_m_sync_init+0xc8>
    15c6:	e07d      	b.n	16c4 <_spi_m_sync_init+0x1c4>
    15c8:	2001      	movs	r0, #1
    15ca:	4a48      	ldr	r2, [pc, #288]	; (16ec <_spi_m_sync_init+0x1ec>)
    15cc:	4945      	ldr	r1, [pc, #276]	; (16e4 <_spi_m_sync_init+0x1e4>)
    15ce:	4b46      	ldr	r3, [pc, #280]	; (16e8 <_spi_m_sync_init+0x1e8>)
    15d0:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    15d2:	782b      	ldrb	r3, [r5, #0]
    15d4:	786a      	ldrb	r2, [r5, #1]
    15d6:	0212      	lsls	r2, r2, #8
    15d8:	431a      	orrs	r2, r3
    15da:	78ab      	ldrb	r3, [r5, #2]
    15dc:	041b      	lsls	r3, r3, #16
    15de:	431a      	orrs	r2, r3
    15e0:	78eb      	ldrb	r3, [r5, #3]
    15e2:	061b      	lsls	r3, r3, #24
    15e4:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLA_reg(
    15e6:	4a42      	ldr	r2, [pc, #264]	; (16f0 <_spi_m_sync_init+0x1f0>)
    15e8:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    15ea:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    15ec:	69e3      	ldr	r3, [r4, #28]
    15ee:	079b      	lsls	r3, r3, #30
    15f0:	d1fc      	bne.n	15ec <_spi_m_sync_init+0xec>
	    (regs->ctrlb
    15f2:	792b      	ldrb	r3, [r5, #4]
    15f4:	796a      	ldrb	r2, [r5, #5]
    15f6:	0212      	lsls	r2, r2, #8
    15f8:	431a      	orrs	r2, r3
    15fa:	79ab      	ldrb	r3, [r5, #6]
    15fc:	041b      	lsls	r3, r3, #16
    15fe:	431a      	orrs	r2, r3
    1600:	79eb      	ldrb	r3, [r5, #7]
    1602:	061b      	lsls	r3, r3, #24
    1604:	4313      	orrs	r3, r2
	        | (SERCOM_SPI_CTRLB_RXEN));
    1606:	4a3b      	ldr	r2, [pc, #236]	; (16f4 <_spi_m_sync_init+0x1f4>)
    1608:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(
    160a:	2280      	movs	r2, #128	; 0x80
    160c:	0292      	lsls	r2, r2, #10
    160e:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    1610:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1612:	69e3      	ldr	r3, [r4, #28]
    1614:	075b      	lsls	r3, r3, #29
    1616:	d1fc      	bne.n	1612 <_spi_m_sync_init+0x112>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    1618:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    161a:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    161c:	7b6a      	ldrb	r2, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    161e:	2330      	movs	r3, #48	; 0x30
    1620:	54e2      	strb	r2, [r4, r3]
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    1622:	792b      	ldrb	r3, [r5, #4]
    1624:	075b      	lsls	r3, r3, #29
    1626:	d151      	bne.n	16cc <_spi_m_sync_init+0x1cc>
    1628:	2301      	movs	r3, #1
    162a:	7133      	strb	r3, [r6, #4]

	dev->dummy_byte = regs->dummy_byte;
    162c:	7baa      	ldrb	r2, [r5, #14]
    162e:	7beb      	ldrb	r3, [r5, #15]
    1630:	021b      	lsls	r3, r3, #8
    1632:	4313      	orrs	r3, r2
    1634:	80f3      	strh	r3, [r6, #6]

	return ERR_NONE;
    1636:	2000      	movs	r0, #0
}
    1638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(dev && hw);
    163a:	2000      	movs	r0, #0
    163c:	e780      	b.n	1540 <_spi_m_sync_init+0x40>
    163e:	2000      	movs	r0, #0
    1640:	e77e      	b.n	1540 <_spi_m_sync_init+0x40>
	ASSERT(hw && regs);
    1642:	2c00      	cmp	r4, #0
    1644:	d03c      	beq.n	16c0 <_spi_m_sync_init+0x1c0>
    1646:	2d00      	cmp	r5, #0
    1648:	d038      	beq.n	16bc <_spi_m_sync_init+0x1bc>
    164a:	2001      	movs	r0, #1
    164c:	4a2a      	ldr	r2, [pc, #168]	; (16f8 <_spi_m_sync_init+0x1f8>)
    164e:	4925      	ldr	r1, [pc, #148]	; (16e4 <_spi_m_sync_init+0x1e4>)
    1650:	4b25      	ldr	r3, [pc, #148]	; (16e8 <_spi_m_sync_init+0x1e8>)
    1652:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    1654:	782b      	ldrb	r3, [r5, #0]
    1656:	786a      	ldrb	r2, [r5, #1]
    1658:	0212      	lsls	r2, r2, #8
    165a:	431a      	orrs	r2, r3
    165c:	78ab      	ldrb	r3, [r5, #2]
    165e:	041b      	lsls	r3, r3, #16
    1660:	431a      	orrs	r2, r3
    1662:	78eb      	ldrb	r3, [r5, #3]
    1664:	061b      	lsls	r3, r3, #24
    1666:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLA_reg(
    1668:	4a21      	ldr	r2, [pc, #132]	; (16f0 <_spi_m_sync_init+0x1f0>)
    166a:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    166c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    166e:	69e3      	ldr	r3, [r4, #28]
    1670:	079b      	lsls	r3, r3, #30
    1672:	d1fc      	bne.n	166e <_spi_m_sync_init+0x16e>
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    1674:	792b      	ldrb	r3, [r5, #4]
    1676:	796a      	ldrb	r2, [r5, #5]
    1678:	0212      	lsls	r2, r2, #8
    167a:	431a      	orrs	r2, r3
    167c:	79ab      	ldrb	r3, [r5, #6]
    167e:	041b      	lsls	r3, r3, #16
    1680:	431a      	orrs	r2, r3
    1682:	79eb      	ldrb	r3, [r5, #7]
    1684:	061b      	lsls	r3, r3, #24
    1686:	4313      	orrs	r3, r2
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    1688:	4a1c      	ldr	r2, [pc, #112]	; (16fc <_spi_m_sync_init+0x1fc>)
    168a:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(hw,
    168c:	4a1c      	ldr	r2, [pc, #112]	; (1700 <_spi_m_sync_init+0x200>)
    168e:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    1690:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1692:	69e3      	ldr	r3, [r4, #28]
    1694:	075b      	lsls	r3, r3, #29
    1696:	d1fc      	bne.n	1692 <_spi_m_sync_init+0x192>
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    1698:	7a2b      	ldrb	r3, [r5, #8]
    169a:	7a6a      	ldrb	r2, [r5, #9]
    169c:	0212      	lsls	r2, r2, #8
    169e:	431a      	orrs	r2, r3
    16a0:	7aab      	ldrb	r3, [r5, #10]
    16a2:	041b      	lsls	r3, r3, #16
    16a4:	431a      	orrs	r2, r3
    16a6:	7aeb      	ldrb	r3, [r5, #11]
    16a8:	061b      	lsls	r3, r3, #24
    16aa:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.ADDR.reg = data;
    16ac:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    16ae:	7b6a      	ldrb	r2, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    16b0:	2330      	movs	r3, #48	; 0x30
    16b2:	54e2      	strb	r2, [r4, r3]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    16b4:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    16b6:	2b00      	cmp	r3, #0
    16b8:	d1fc      	bne.n	16b4 <_spi_m_sync_init+0x1b4>
    16ba:	e7b2      	b.n	1622 <_spi_m_sync_init+0x122>
	ASSERT(hw && regs);
    16bc:	2000      	movs	r0, #0
    16be:	e7c5      	b.n	164c <_spi_m_sync_init+0x14c>
    16c0:	2000      	movs	r0, #0
    16c2:	e7c3      	b.n	164c <_spi_m_sync_init+0x14c>
	ASSERT(hw && regs);
    16c4:	2000      	movs	r0, #0
    16c6:	e780      	b.n	15ca <_spi_m_sync_init+0xca>
    16c8:	2000      	movs	r0, #0
    16ca:	e77e      	b.n	15ca <_spi_m_sync_init+0xca>
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    16cc:	2302      	movs	r3, #2
    16ce:	e7ac      	b.n	162a <_spi_m_sync_init+0x12a>
		return ERR_INVALID_ARG;
    16d0:	200d      	movs	r0, #13
    16d2:	4240      	negs	r0, r0
    16d4:	e7b0      	b.n	1638 <_spi_m_sync_init+0x138>
    16d6:	46c0      	nop			; (mov r8, r8)
    16d8:	0000134d 	.word	0x0000134d
    16dc:	00004208 	.word	0x00004208
    16e0:	00000925 	.word	0x00000925
    16e4:	00004278 	.word	0x00004278
    16e8:	00001121 	.word	0x00001121
    16ec:	000008ef 	.word	0x000008ef
    16f0:	fffffefc 	.word	0xfffffefc
    16f4:	fffd1dbf 	.word	0xfffd1dbf
    16f8:	00000903 	.word	0x00000903
    16fc:	fffdddbf 	.word	0xfffdddbf
    1700:	00020240 	.word	0x00020240

00001704 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    1704:	b5f0      	push	{r4, r5, r6, r7, lr}
    1706:	46ce      	mov	lr, r9
    1708:	4647      	mov	r7, r8
    170a:	b580      	push	{r7, lr}
    170c:	b089      	sub	sp, #36	; 0x24
    170e:	4681      	mov	r9, r0
    1710:	000d      	movs	r5, r1
	void *                 hw   = dev->prvt;
    1712:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    1714:	680b      	ldr	r3, [r1, #0]
    1716:	9303      	str	r3, [sp, #12]
    1718:	684b      	ldr	r3, [r1, #4]
    171a:	9304      	str	r3, [sp, #16]
    171c:	2300      	movs	r3, #0
    171e:	9305      	str	r3, [sp, #20]
    1720:	9306      	str	r3, [sp, #24]
    1722:	7906      	ldrb	r6, [r0, #4]

	ASSERT(dev && hw);
    1724:	2800      	cmp	r0, #0
    1726:	d014      	beq.n	1752 <_spi_m_sync_trans+0x4e>
    1728:	2c00      	cmp	r4, #0
    172a:	d010      	beq.n	174e <_spi_m_sync_trans+0x4a>
    172c:	2001      	movs	r0, #1
    172e:	4a37      	ldr	r2, [pc, #220]	; (180c <_spi_m_sync_trans+0x108>)
    1730:	4937      	ldr	r1, [pc, #220]	; (1810 <_spi_m_sync_trans+0x10c>)
    1732:	4b38      	ldr	r3, [pc, #224]	; (1814 <_spi_m_sync_trans+0x110>)
    1734:	4798      	blx	r3
    1736:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    1738:	075b      	lsls	r3, r3, #29
    173a:	d164      	bne.n	1806 <_spi_m_sync_trans+0x102>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    173c:	69e3      	ldr	r3, [r4, #28]
    173e:	079b      	lsls	r3, r3, #30
    1740:	d1fc      	bne.n	173c <_spi_m_sync_trans+0x38>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    1742:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    1744:	079b      	lsls	r3, r3, #30
    1746:	d420      	bmi.n	178a <_spi_m_sync_trans+0x86>
		return ERR_NOT_INITIALIZED;
    1748:	2014      	movs	r0, #20
    174a:	4240      	negs	r0, r0
    174c:	e056      	b.n	17fc <_spi_m_sync_trans+0xf8>
	ASSERT(dev && hw);
    174e:	2000      	movs	r0, #0
    1750:	e7ed      	b.n	172e <_spi_m_sync_trans+0x2a>
    1752:	2000      	movs	r0, #0
    1754:	e7eb      	b.n	172e <_spi_m_sync_trans+0x2a>
		return false;
    1756:	2200      	movs	r2, #0
    1758:	e02d      	b.n	17b6 <_spi_m_sync_trans+0xb2>
			data |= (*ctrl->txbuf) << 8;
    175a:	7848      	ldrb	r0, [r1, #1]
    175c:	0200      	lsls	r0, r0, #8
    175e:	4647      	mov	r7, r8
    1760:	4307      	orrs	r7, r0
    1762:	46b8      	mov	r8, r7
			ctrl->txbuf++;
    1764:	3102      	adds	r1, #2
    1766:	9103      	str	r1, [sp, #12]
	ctrl->txcnt++;
    1768:	3201      	adds	r2, #1
    176a:	9205      	str	r2, [sp, #20]
	((Sercom *)hw)->SPI.DATA.reg = data;
    176c:	4642      	mov	r2, r8
    176e:	62a2      	str	r2, [r4, #40]	; 0x28
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    1770:	b25b      	sxtb	r3, r3
    1772:	2b00      	cmp	r3, #0
    1774:	db35      	blt.n	17e2 <_spi_m_sync_trans+0xde>
	return ERR_NONE;
    1776:	2000      	movs	r0, #0
			}
		}

		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
    1778:	2800      	cmp	r0, #0
    177a:	db3a      	blt.n	17f2 <_spi_m_sync_trans+0xee>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    177c:	9805      	ldr	r0, [sp, #20]
    177e:	68ab      	ldr	r3, [r5, #8]
    1780:	4298      	cmp	r0, r3
    1782:	d302      	bcc.n	178a <_spi_m_sync_trans+0x86>
    1784:	9a06      	ldr	r2, [sp, #24]
    1786:	4293      	cmp	r3, r2
    1788:	d933      	bls.n	17f2 <_spi_m_sync_trans+0xee>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    178a:	7e23      	ldrb	r3, [r4, #24]
    178c:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    178e:	075a      	lsls	r2, r3, #29
    1790:	d5e1      	bpl.n	1756 <_spi_m_sync_trans+0x52>
	return ((Sercom *)hw)->SPI.DATA.reg;
    1792:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    1794:	9a04      	ldr	r2, [sp, #16]
    1796:	2a00      	cmp	r2, #0
    1798:	d008      	beq.n	17ac <_spi_m_sync_trans+0xa8>
		*ctrl->rxbuf++ = (uint8_t)data;
    179a:	1c50      	adds	r0, r2, #1
    179c:	9004      	str	r0, [sp, #16]
    179e:	7011      	strb	r1, [r2, #0]
		if (ctrl->char_size > 1) {
    17a0:	2e01      	cmp	r6, #1
    17a2:	d903      	bls.n	17ac <_spi_m_sync_trans+0xa8>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    17a4:	1c90      	adds	r0, r2, #2
    17a6:	9004      	str	r0, [sp, #16]
    17a8:	0a09      	lsrs	r1, r1, #8
    17aa:	7051      	strb	r1, [r2, #1]
	ctrl->rxcnt++;
    17ac:	9a06      	ldr	r2, [sp, #24]
    17ae:	9201      	str	r2, [sp, #4]
    17b0:	3201      	adds	r2, #1
    17b2:	9206      	str	r2, [sp, #24]
	return true;
    17b4:	2201      	movs	r2, #1
		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    17b6:	2a00      	cmp	r2, #0
    17b8:	d1da      	bne.n	1770 <_spi_m_sync_trans+0x6c>
			if (ctrl.rxcnt >= ctrl.txcnt) {
    17ba:	9906      	ldr	r1, [sp, #24]
    17bc:	9a05      	ldr	r2, [sp, #20]
    17be:	4291      	cmp	r1, r2
    17c0:	d3d6      	bcc.n	1770 <_spi_m_sync_trans+0x6c>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    17c2:	4649      	mov	r1, r9
    17c4:	88c8      	ldrh	r0, [r1, #6]
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    17c6:	07d9      	lsls	r1, r3, #31
    17c8:	d5d2      	bpl.n	1770 <_spi_m_sync_trans+0x6c>
	if (ctrl->txbuf) {
    17ca:	9903      	ldr	r1, [sp, #12]
    17cc:	2900      	cmp	r1, #0
    17ce:	d006      	beq.n	17de <_spi_m_sync_trans+0xda>
		data = *ctrl->txbuf++;
    17d0:	1c48      	adds	r0, r1, #1
    17d2:	9003      	str	r0, [sp, #12]
    17d4:	7808      	ldrb	r0, [r1, #0]
    17d6:	4680      	mov	r8, r0
		if (ctrl->char_size > 1) {
    17d8:	2e01      	cmp	r6, #1
    17da:	d8be      	bhi.n	175a <_spi_m_sync_trans+0x56>
    17dc:	e7c4      	b.n	1768 <_spi_m_sync_trans+0x64>
		data = dummy;
    17de:	4680      	mov	r8, r0
    17e0:	e7c2      	b.n	1768 <_spi_m_sync_trans+0x64>
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    17e2:	2301      	movs	r3, #1
    17e4:	425b      	negs	r3, r3
    17e6:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    17e8:	3381      	adds	r3, #129	; 0x81
    17ea:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    17ec:	2013      	movs	r0, #19
    17ee:	4240      	negs	r0, r0
    17f0:	e7c2      	b.n	1778 <_spi_m_sync_trans+0x74>
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    17f2:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    17f4:	079b      	lsls	r3, r3, #30
    17f6:	d0fc      	beq.n	17f2 <_spi_m_sync_trans+0xee>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    17f8:	2303      	movs	r3, #3
    17fa:	7623      	strb	r3, [r4, #24]
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
    17fc:	b009      	add	sp, #36	; 0x24
    17fe:	bc0c      	pop	{r2, r3}
    1800:	4690      	mov	r8, r2
    1802:	4699      	mov	r9, r3
    1804:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ERR_BUSY;
    1806:	2004      	movs	r0, #4
    1808:	4240      	negs	r0, r0
    180a:	e7f7      	b.n	17fc <_spi_m_sync_trans+0xf8>
    180c:	00000a85 	.word	0x00000a85
    1810:	00004278 	.word	0x00004278
    1814:	00001121 	.word	0x00001121

00001818 <_sysctrl_init_sources>:
}

static inline void hri_sysctrl_write_XOSC32K_reg(const void *const hw, hri_sysctrl_xosc32k_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->XOSC32K.reg = data;
    1818:	4a14      	ldr	r2, [pc, #80]	; (186c <_sysctrl_init_sources+0x54>)
    181a:	2366      	movs	r3, #102	; 0x66
    181c:	8293      	strh	r3, [r2, #20]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    181e:	6a11      	ldr	r1, [r2, #32]
	tmp = (tmp & SYSCTRL_OSC8M_CALIB_Msk) >> SYSCTRL_OSC8M_CALIB_Pos;
    1820:	0c09      	lsrs	r1, r1, #16
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    1822:	6a13      	ldr	r3, [r2, #32]

#if CONF_OSC8M_CONFIG == 1
	calib = hri_sysctrl_read_OSC8M_CALIB_bf(hw);

	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    1824:	0f9b      	lsrs	r3, r3, #30
    1826:	079b      	lsls	r3, r3, #30
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    1828:	0409      	lsls	r1, r1, #16
    182a:	4811      	ldr	r0, [pc, #68]	; (1870 <_sysctrl_init_sources+0x58>)
    182c:	4001      	ands	r1, r0
#endif
	                                SYSCTRL_OSC8M_PRESC(CONF_OSC8M_PRESC)
	                                | (CONF_OSC8M_RUNSTDBY << SYSCTRL_OSC8M_RUNSTDBY_Pos)
    182e:	430b      	orrs	r3, r1
	hri_sysctrl_write_OSC8M_reg(hw,
    1830:	2102      	movs	r1, #2
    1832:	430b      	orrs	r3, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    1834:	6213      	str	r3, [r2, #32]
	tmp = ((Sysctrl *)hw)->OSC32K.reg;
    1836:	6993      	ldr	r3, [r2, #24]
	tmp = (tmp & SYSCTRL_OSC32K_CALIB_Msk) >> SYSCTRL_OSC32K_CALIB_Pos;
    1838:	0c1b      	lsrs	r3, r3, #16
	hri_sysctrl_write_OSC32K_reg(
	    hw,
#if CONF_OSC32K_OVERWRITE_CALIBRATION == 1
	    SYSCTRL_OSC32K_CALIB(CONF_OSC32K_CALIB) |
#else
	    SYSCTRL_OSC32K_CALIB(calib) |
    183a:	041b      	lsls	r3, r3, #16
    183c:	21fe      	movs	r1, #254	; 0xfe
    183e:	03c9      	lsls	r1, r1, #15
    1840:	400b      	ands	r3, r1
#endif
	        (CONF_OSC32K_WRTLOCK << SYSCTRL_OSC32K_WRTLOCK_Pos) | SYSCTRL_OSC32K_STARTUP(CONF_OSC32K_STARTUP)
	        | (CONF_OSC32K_RUNSTDBY << SYSCTRL_OSC32K_RUNSTDBY_Pos) | (CONF_OSC32K_EN1K << SYSCTRL_OSC32K_EN1K_Pos)
	        | (CONF_OSC32K_EN32K << SYSCTRL_OSC32K_EN32K_Pos) | (1 << SYSCTRL_OSC32K_ENABLE_Pos));
    1842:	2146      	movs	r1, #70	; 0x46
    1844:	430b      	orrs	r3, r1
	((Sysctrl *)hw)->OSC32K.reg = data;
    1846:	6193      	str	r3, [r2, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    1848:	7f13      	ldrb	r3, [r2, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    184a:	3927      	subs	r1, #39	; 0x27
    184c:	400b      	ands	r3, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    184e:	7713      	strb	r3, [r2, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) >> SYSCTRL_PCLKSR_XOSC32KRDY_Pos;
    1850:	4b06      	ldr	r3, [pc, #24]	; (186c <_sysctrl_init_sources+0x54>)
    1852:	68db      	ldr	r3, [r3, #12]
	                                    (CONF_OSC32K_WRTLOCK << SYSCTRL_OSCULP32K_WRTLOCK_Pos));
#endif

#if CONF_XOSC32K_CONFIG == 1
#if CONF_XOSC32K_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_XOSC32KRDY_bit(hw))
    1854:	079b      	lsls	r3, r3, #30
    1856:	d5fb      	bpl.n	1850 <_sysctrl_init_sources+0x38>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) >> SYSCTRL_PCLKSR_OSC32KRDY_Pos;
    1858:	4b04      	ldr	r3, [pc, #16]	; (186c <_sysctrl_init_sources+0x54>)
    185a:	68db      	ldr	r3, [r3, #12]
#endif
#endif

#if CONF_OSC32K_CONFIG == 1
#if CONF_OSC32K_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC32KRDY_bit(hw))
    185c:	075b      	lsls	r3, r3, #29
    185e:	d5fb      	bpl.n	1858 <_sysctrl_init_sources+0x40>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    1860:	4b02      	ldr	r3, [pc, #8]	; (186c <_sysctrl_init_sources+0x54>)
    1862:	68db      	ldr	r3, [r3, #12]
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    1864:	071b      	lsls	r3, r3, #28
    1866:	d5fb      	bpl.n	1860 <_sysctrl_init_sources+0x48>
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    1868:	4770      	bx	lr
    186a:	46c0      	nop			; (mov r8, r8)
    186c:	40000800 	.word	0x40000800
    1870:	0fff0000 	.word	0x0fff0000

00001874 <_sysctrl_init_referenced_generators>:
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    1874:	2202      	movs	r2, #2
    1876:	4b1f      	ldr	r3, [pc, #124]	; (18f4 <_sysctrl_init_referenced_generators+0x80>)
    1878:	849a      	strh	r2, [r3, #36]	; 0x24
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    187a:	4b1e      	ldr	r3, [pc, #120]	; (18f4 <_sysctrl_init_referenced_generators+0x80>)
    187c:	68db      	ldr	r3, [r3, #12]
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    187e:	06db      	lsls	r3, r3, #27
    1880:	d5fb      	bpl.n	187a <_sysctrl_init_referenced_generators+0x6>
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
    1882:	4a1d      	ldr	r2, [pc, #116]	; (18f8 <_sysctrl_init_referenced_generators+0x84>)
    1884:	4b1b      	ldr	r3, [pc, #108]	; (18f4 <_sysctrl_init_referenced_generators+0x80>)
    1886:	62da      	str	r2, [r3, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    1888:	4b1c      	ldr	r3, [pc, #112]	; (18fc <_sysctrl_init_referenced_generators+0x88>)
    188a:	681b      	ldr	r3, [r3, #0]
    188c:	0e9b      	lsrs	r3, r3, #26
    188e:	2b3f      	cmp	r3, #63	; 0x3f
    1890:	d028      	beq.n	18e4 <_sysctrl_init_referenced_generators+0x70>
    1892:	029b      	lsls	r3, r3, #10
    1894:	2280      	movs	r2, #128	; 0x80
    1896:	0092      	lsls	r2, r2, #2
    1898:	431a      	orrs	r2, r3
	((Sysctrl *)hw)->DFLLVAL.reg = data;
    189a:	4b16      	ldr	r3, [pc, #88]	; (18f4 <_sysctrl_init_referenced_generators+0x80>)
    189c:	629a      	str	r2, [r3, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    189e:	2293      	movs	r2, #147	; 0x93
    18a0:	0052      	lsls	r2, r2, #1
    18a2:	849a      	strh	r2, [r3, #36]	; 0x24
}

static inline void hri_sysctrl_write_DPLLCTRLA_reg(const void *const hw, hri_sysctrl_dpllctrla_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DPLLCTRLA.reg = data;
    18a4:	2142      	movs	r1, #66	; 0x42
    18a6:	3ae2      	subs	r2, #226	; 0xe2
    18a8:	5499      	strb	r1, [r3, r2]
}

static inline void hri_sysctrl_write_DPLLRATIO_reg(const void *const hw, hri_sysctrl_dpllratio_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DPLLRATIO.reg = data;
    18aa:	4a15      	ldr	r2, [pc, #84]	; (1900 <_sysctrl_init_referenced_generators+0x8c>)
    18ac:	649a      	str	r2, [r3, #72]	; 0x48
}

static inline void hri_sysctrl_write_DPLLCTRLB_reg(const void *const hw, hri_sysctrl_dpllctrlb_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DPLLCTRLB.reg = data;
    18ae:	2200      	movs	r2, #0
    18b0:	64da      	str	r2, [r3, #76]	; 0x4c
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
    18b2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
	        | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
    18b4:	075b      	lsls	r3, r3, #29
    18b6:	d518      	bpl.n	18ea <_sysctrl_init_referenced_generators+0x76>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    18b8:	4b0e      	ldr	r3, [pc, #56]	; (18f4 <_sysctrl_init_referenced_generators+0x80>)
    18ba:	68db      	ldr	r3, [r3, #12]
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;
#else
		hri_sysctrl_pclksr_reg_t status_mask = SYSCTRL_PCLKSR_DFLLRDY;
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
    18bc:	06db      	lsls	r3, r3, #27
    18be:	d5fb      	bpl.n	18b8 <_sysctrl_init_referenced_generators+0x44>
	return (((Sysctrl *)hw)->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE) >> SYSCTRL_DPLLSTATUS_ENABLE_Pos;
    18c0:	2350      	movs	r3, #80	; 0x50
    18c2:	4a0c      	ldr	r2, [pc, #48]	; (18f4 <_sysctrl_init_referenced_generators+0x80>)
    18c4:	5cd3      	ldrb	r3, [r2, r3]
#endif
#endif

#if CONF_DPLL_CONFIG == 1
#if CONF_DPLL_ENABLE == 1
	while (!(hri_sysctrl_get_DPLLSTATUS_ENABLE_bit(hw) || hri_sysctrl_get_DPLLSTATUS_LOCK_bit(hw)
    18c6:	075b      	lsls	r3, r3, #29
    18c8:	d407      	bmi.n	18da <_sysctrl_init_referenced_generators+0x66>
	return (((Sysctrl *)hw)->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_LOCK) >> SYSCTRL_DPLLSTATUS_LOCK_Pos;
    18ca:	2350      	movs	r3, #80	; 0x50
    18cc:	5cd3      	ldrb	r3, [r2, r3]
    18ce:	07db      	lsls	r3, r3, #31
    18d0:	d403      	bmi.n	18da <_sysctrl_init_referenced_generators+0x66>
	return (((Sysctrl *)hw)->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_CLKRDY) >> SYSCTRL_DPLLSTATUS_CLKRDY_Pos;
    18d2:	2350      	movs	r3, #80	; 0x50
    18d4:	5cd3      	ldrb	r3, [r2, r3]
    18d6:	079b      	lsls	r3, r3, #30
    18d8:	d5f2      	bpl.n	18c0 <_sysctrl_init_referenced_generators+0x4c>
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
    18da:	4b0a      	ldr	r3, [pc, #40]	; (1904 <_sysctrl_init_referenced_generators+0x90>)
    18dc:	785b      	ldrb	r3, [r3, #1]
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
    18de:	09db      	lsrs	r3, r3, #7
    18e0:	d1fb      	bne.n	18da <_sysctrl_init_referenced_generators+0x66>
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    18e2:	4770      	bx	lr
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    18e4:	22fc      	movs	r2, #252	; 0xfc
    18e6:	01d2      	lsls	r2, r2, #7
    18e8:	e7d7      	b.n	189a <_sysctrl_init_referenced_generators+0x26>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    18ea:	4b02      	ldr	r3, [pc, #8]	; (18f4 <_sysctrl_init_referenced_generators+0x80>)
    18ec:	68db      	ldr	r3, [r3, #12]
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    18ee:	06db      	lsls	r3, r3, #27
    18f0:	d5fb      	bpl.n	18ea <_sysctrl_init_referenced_generators+0x76>
    18f2:	e7e5      	b.n	18c0 <_sysctrl_init_referenced_generators+0x4c>
    18f4:	40000800 	.word	0x40000800
    18f8:	0401bb80 	.word	0x0401bb80
    18fc:	00806024 	.word	0x00806024
    1900:	000e05b7 	.word	0x000e05b7
    1904:	40000c00 	.word	0x40000c00

00001908 <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    1908:	4b02      	ldr	r3, [pc, #8]	; (1914 <_system_time_init+0xc>)
    190a:	4a03      	ldr	r2, [pc, #12]	; (1918 <_system_time_init+0x10>)
    190c:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    190e:	2205      	movs	r2, #5
    1910:	601a      	str	r2, [r3, #0]
	                | (1 << SysTick_CTRL_CLKSOURCE_Pos);
}
    1912:	4770      	bx	lr
    1914:	e000e010 	.word	0xe000e010
    1918:	00ffffff 	.word	0x00ffffff

0000191c <_delay_init>:
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
    191c:	b510      	push	{r4, lr}
	_system_time_init(hw);
    191e:	4b01      	ldr	r3, [pc, #4]	; (1924 <_delay_init+0x8>)
    1920:	4798      	blx	r3
}
    1922:	bd10      	pop	{r4, pc}
    1924:	00001909 	.word	0x00001909

00001928 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    1928:	2000      	movs	r0, #0
    192a:	4770      	bx	lr

0000192c <_usb_load_calib>:
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 55
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    192c:	4b12      	ldr	r3, [pc, #72]	; (1978 <_usb_load_calib+0x4c>)
    192e:	681a      	ldr	r2, [r3, #0]
    1930:	0b53      	lsrs	r3, r2, #13
	uint32_t pad_transn
    1932:	211f      	movs	r1, #31
    1934:	400b      	ands	r3, r1
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    1936:	0c90      	lsrs	r0, r2, #18
	uint32_t pad_transp
    1938:	4001      	ands	r1, r0
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    193a:	0dd0      	lsrs	r0, r2, #23
    193c:	2207      	movs	r2, #7
    193e:	4002      	ands	r2, r0
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0x1F) {
    1940:	2b1f      	cmp	r3, #31
    1942:	d012      	beq.n	196a <_usb_load_calib+0x3e>
		pad_transn = 5;
	}
	if (pad_transp == 0x1F) {
    1944:	291f      	cmp	r1, #31
    1946:	d012      	beq.n	196e <_usb_load_calib+0x42>
		pad_transp = 29;
	}
	if (pad_trim == 0x7) {
    1948:	2a07      	cmp	r2, #7
    194a:	d012      	beq.n	1972 <_usb_load_calib+0x46>
		pad_trim = 5;
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    194c:	019b      	lsls	r3, r3, #6
    194e:	430b      	orrs	r3, r1
    1950:	0312      	lsls	r2, r2, #12
    1952:	4313      	orrs	r3, r2
    1954:	4a09      	ldr	r2, [pc, #36]	; (197c <_usb_load_calib+0x50>)
    1956:	8513      	strh	r3, [r2, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    1958:	78d3      	ldrb	r3, [r2, #3]
    195a:	2103      	movs	r1, #3
    195c:	430b      	orrs	r3, r1
    195e:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    1960:	78d3      	ldrb	r3, [r2, #3]
    1962:	210c      	movs	r1, #12
    1964:	430b      	orrs	r3, r1
    1966:	70d3      	strb	r3, [r2, #3]
}
    1968:	4770      	bx	lr
		pad_transn = 5;
    196a:	3b1a      	subs	r3, #26
    196c:	e7ea      	b.n	1944 <_usb_load_calib+0x18>
		pad_transp = 29;
    196e:	3902      	subs	r1, #2
    1970:	e7ea      	b.n	1948 <_usb_load_calib+0x1c>
		pad_trim = 5;
    1972:	3a02      	subs	r2, #2
    1974:	e7ea      	b.n	194c <_usb_load_calib+0x20>
    1976:	46c0      	nop			; (mov r8, r8)
    1978:	00806024 	.word	0x00806024
    197c:	41005000 	.word	0x41005000

00001980 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    1980:	b510      	push	{r4, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    1982:	7c83      	ldrb	r3, [r0, #18]
    1984:	220f      	movs	r2, #15
    1986:	4013      	ands	r3, r2
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1988:	7cc1      	ldrb	r1, [r0, #19]
    198a:	3a08      	subs	r2, #8
    198c:	400a      	ands	r2, r1

	if (!is_ctrl) {
    198e:	2a01      	cmp	r2, #1
    1990:	d00d      	beq.n	19ae <_usb_d_dev_handle_setup+0x2e>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1992:	001a      	movs	r2, r3
    1994:	3208      	adds	r2, #8
    1996:	0152      	lsls	r2, r2, #5
    1998:	4919      	ldr	r1, [pc, #100]	; (1a00 <_usb_d_dev_handle_setup+0x80>)
    199a:	468c      	mov	ip, r1
    199c:	4462      	add	r2, ip
    199e:	2110      	movs	r1, #16
    19a0:	71d1      	strb	r1, [r2, #7]
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    19a2:	015b      	lsls	r3, r3, #5
    19a4:	4a17      	ldr	r2, [pc, #92]	; (1a04 <_usb_d_dev_handle_setup+0x84>)
    19a6:	4694      	mov	ip, r2
    19a8:	4463      	add	r3, ip
    19aa:	7019      	strb	r1, [r3, #0]
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
}
    19ac:	bd10      	pop	{r4, pc}
	if (_usb_d_dev_ep_is_busy(ept)) {
    19ae:	064a      	lsls	r2, r1, #25
    19b0:	d50c      	bpl.n	19cc <_usb_d_dev_handle_setup+0x4c>
		ept->flags.bits.is_busy = 0;
    19b2:	7cc2      	ldrb	r2, [r0, #19]
    19b4:	2140      	movs	r1, #64	; 0x40
    19b6:	438a      	bics	r2, r1
    19b8:	74c2      	strb	r2, [r0, #19]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    19ba:	001a      	movs	r2, r3
    19bc:	3208      	adds	r2, #8
    19be:	0152      	lsls	r2, r2, #5
    19c0:	4c0f      	ldr	r4, [pc, #60]	; (1a00 <_usb_d_dev_handle_setup+0x80>)
    19c2:	46a4      	mov	ip, r4
    19c4:	4462      	add	r2, ip
    19c6:	2480      	movs	r4, #128	; 0x80
    19c8:	7114      	strb	r4, [r2, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    19ca:	7151      	strb	r1, [r2, #5]
	ept->flags.bits.is_stalled = 0;
    19cc:	7cc2      	ldrb	r2, [r0, #19]
    19ce:	2108      	movs	r1, #8
    19d0:	438a      	bics	r2, r1
    19d2:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    19d4:	015a      	lsls	r2, r3, #5
    19d6:	490c      	ldr	r1, [pc, #48]	; (1a08 <_usb_d_dev_handle_setup+0x88>)
    19d8:	1889      	adds	r1, r1, r2
    19da:	2400      	movs	r4, #0
    19dc:	728c      	strb	r4, [r1, #10]
    19de:	768c      	strb	r4, [r1, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    19e0:	3308      	adds	r3, #8
    19e2:	015b      	lsls	r3, r3, #5
    19e4:	4906      	ldr	r1, [pc, #24]	; (1a00 <_usb_d_dev_handle_setup+0x80>)
    19e6:	468c      	mov	ip, r1
    19e8:	4463      	add	r3, ip
    19ea:	216f      	movs	r1, #111	; 0x6f
    19ec:	71d9      	strb	r1, [r3, #7]
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    19ee:	4b05      	ldr	r3, [pc, #20]	; (1a04 <_usb_d_dev_handle_setup+0x84>)
    19f0:	469c      	mov	ip, r3
    19f2:	4462      	add	r2, ip
    19f4:	7011      	strb	r1, [r2, #0]
	dev_inst.ep_callbacks.setup(ept->ep);
    19f6:	4b05      	ldr	r3, [pc, #20]	; (1a0c <_usb_d_dev_handle_setup+0x8c>)
    19f8:	689b      	ldr	r3, [r3, #8]
    19fa:	7c80      	ldrb	r0, [r0, #18]
    19fc:	4798      	blx	r3
    19fe:	e7d5      	b.n	19ac <_usb_d_dev_handle_setup+0x2c>
    1a00:	41005000 	.word	0x41005000
    1a04:	41005108 	.word	0x41005108
    1a08:	200001f0 	.word	0x200001f0
    1a0c:	200002f0 	.word	0x200002f0

00001a10 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    1a10:	b510      	push	{r4, lr}
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1a12:	7c82      	ldrb	r2, [r0, #18]
    1a14:	230f      	movs	r3, #15
    1a16:	4013      	ands	r3, r2
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    1a18:	2220      	movs	r2, #32
    1a1a:	408a      	lsls	r2, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    1a1c:	b2d2      	uxtb	r2, r2
    1a1e:	015b      	lsls	r3, r3, #5
    1a20:	4905      	ldr	r1, [pc, #20]	; (1a38 <_usb_d_dev_handle_stall+0x28>)
    1a22:	468c      	mov	ip, r1
    1a24:	4463      	add	r3, ip
    1a26:	701a      	strb	r2, [r3, #0]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    1a28:	4b04      	ldr	r3, [pc, #16]	; (1a3c <_usb_d_dev_handle_stall+0x2c>)
    1a2a:	691b      	ldr	r3, [r3, #16]
    1a2c:	6882      	ldr	r2, [r0, #8]
    1a2e:	7c80      	ldrb	r0, [r0, #18]
    1a30:	2101      	movs	r1, #1
    1a32:	4798      	blx	r3
}
    1a34:	bd10      	pop	{r4, pc}
    1a36:	46c0      	nop			; (mov r8, r8)
    1a38:	41005108 	.word	0x41005108
    1a3c:	200002f0 	.word	0x200002f0

00001a40 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    1a40:	b510      	push	{r4, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    1a42:	7c83      	ldrb	r3, [r0, #18]
    1a44:	2bff      	cmp	r3, #255	; 0xff
    1a46:	d002      	beq.n	1a4e <_usb_d_dev_trans_done+0xe>
    1a48:	7cc2      	ldrb	r2, [r0, #19]
    1a4a:	0652      	lsls	r2, r2, #25
    1a4c:	d400      	bmi.n	1a50 <_usb_d_dev_trans_done+0x10>
		return;
	}
	ept->flags.bits.is_busy = 0;
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
}
    1a4e:	bd10      	pop	{r4, pc}
	ept->flags.bits.is_busy = 0;
    1a50:	7cc2      	ldrb	r2, [r0, #19]
    1a52:	2440      	movs	r4, #64	; 0x40
    1a54:	43a2      	bics	r2, r4
    1a56:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    1a58:	4a02      	ldr	r2, [pc, #8]	; (1a64 <_usb_d_dev_trans_done+0x24>)
    1a5a:	6914      	ldr	r4, [r2, #16]
    1a5c:	6882      	ldr	r2, [r0, #8]
    1a5e:	0018      	movs	r0, r3
    1a60:	47a0      	blx	r4
    1a62:	e7f4      	b.n	1a4e <_usb_d_dev_trans_done+0xe>
    1a64:	200002f0 	.word	0x200002f0

00001a68 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    1a68:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a6a:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1a6c:	7c84      	ldrb	r4, [r0, #18]
    1a6e:	230f      	movs	r3, #15
    1a70:	4023      	ands	r3, r4
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    1a72:	4d18      	ldr	r5, [pc, #96]	; (1ad4 <_usb_d_dev_trans_stop+0x6c>)
    1a74:	882e      	ldrh	r6, [r5, #0]
    1a76:	ad01      	add	r5, sp, #4
    1a78:	802e      	strh	r6, [r5, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    1a7a:	2cff      	cmp	r4, #255	; 0xff
    1a7c:	d01e      	beq.n	1abc <_usb_d_dev_trans_stop+0x54>
    1a7e:	7cc4      	ldrb	r4, [r0, #19]
    1a80:	0664      	lsls	r4, r4, #25
    1a82:	d51b      	bpl.n	1abc <_usb_d_dev_trans_stop+0x54>
		return;
	}
	/* Stop transfer */
	if (dir) {
    1a84:	2900      	cmp	r1, #0
    1a86:	d01b      	beq.n	1ac0 <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1a88:	001c      	movs	r4, r3
    1a8a:	3408      	adds	r4, #8
    1a8c:	0164      	lsls	r4, r4, #5
    1a8e:	4d12      	ldr	r5, [pc, #72]	; (1ad8 <_usb_d_dev_trans_stop+0x70>)
    1a90:	46ac      	mov	ip, r5
    1a92:	4464      	add	r4, ip
    1a94:	2580      	movs	r5, #128	; 0x80
    1a96:	7125      	strb	r5, [r4, #4]
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    1a98:	ad01      	add	r5, sp, #4
    1a9a:	5c6e      	ldrb	r6, [r5, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1a9c:	001c      	movs	r4, r3
    1a9e:	3408      	adds	r4, #8
    1aa0:	0164      	lsls	r4, r4, #5
    1aa2:	4f0d      	ldr	r7, [pc, #52]	; (1ad8 <_usb_d_dev_trans_stop+0x70>)
    1aa4:	46bc      	mov	ip, r7
    1aa6:	4464      	add	r4, ip
    1aa8:	71e6      	strb	r6, [r4, #7]
	_usbd_ep_int_dis(epn, intflags[dir]);
    1aaa:	5c69      	ldrb	r1, [r5, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1aac:	015b      	lsls	r3, r3, #5
    1aae:	4c0b      	ldr	r4, [pc, #44]	; (1adc <_usb_d_dev_trans_stop+0x74>)
    1ab0:	46a4      	mov	ip, r4
    1ab2:	4463      	add	r3, ip
    1ab4:	7019      	strb	r1, [r3, #0]
	_usb_d_dev_trans_done(ept, code);
    1ab6:	0011      	movs	r1, r2
    1ab8:	4b09      	ldr	r3, [pc, #36]	; (1ae0 <_usb_d_dev_trans_stop+0x78>)
    1aba:	4798      	blx	r3
}
    1abc:	b003      	add	sp, #12
    1abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1ac0:	001c      	movs	r4, r3
    1ac2:	3408      	adds	r4, #8
    1ac4:	0164      	lsls	r4, r4, #5
    1ac6:	4d04      	ldr	r5, [pc, #16]	; (1ad8 <_usb_d_dev_trans_stop+0x70>)
    1ac8:	46ac      	mov	ip, r5
    1aca:	4464      	add	r4, ip
    1acc:	2540      	movs	r5, #64	; 0x40
    1ace:	7165      	strb	r5, [r4, #5]
    1ad0:	e7e2      	b.n	1a98 <_usb_d_dev_trans_stop+0x30>
    1ad2:	46c0      	nop			; (mov r8, r8)
    1ad4:	00004294 	.word	0x00004294
    1ad8:	41005000 	.word	0x41005000
    1adc:	41005108 	.word	0x41005108
    1ae0:	00001a41 	.word	0x00001a41

00001ae4 <_usb_d_dev_handle_trfail>:
{
    1ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ae6:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    1ae8:	7c83      	ldrb	r3, [r0, #18]
    1aea:	220f      	movs	r2, #15
    1aec:	4013      	ands	r3, r2
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    1aee:	4a3c      	ldr	r2, [pc, #240]	; (1be0 <_usb_d_dev_handle_trfail+0xfc>)
    1af0:	8894      	ldrh	r4, [r2, #4]
    1af2:	aa01      	add	r2, sp, #4
    1af4:	8014      	strh	r4, [r2, #0]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    1af6:	015a      	lsls	r2, r3, #5
    1af8:	4c3a      	ldr	r4, [pc, #232]	; (1be4 <_usb_d_dev_handle_trfail+0x100>)
    1afa:	18a4      	adds	r4, r4, r2
	uint8_t            eptype
    1afc:	2900      	cmp	r1, #0
    1afe:	d033      	beq.n	1b68 <_usb_d_dev_handle_trfail+0x84>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1b00:	001a      	movs	r2, r3
    1b02:	3208      	adds	r2, #8
    1b04:	0152      	lsls	r2, r2, #5
    1b06:	4d38      	ldr	r5, [pc, #224]	; (1be8 <_usb_d_dev_handle_trfail+0x104>)
    1b08:	5d52      	ldrb	r2, [r2, r5]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    1b0a:	0912      	lsrs	r2, r2, #4
    1b0c:	2507      	movs	r5, #7
    1b0e:	4015      	ands	r5, r2
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1b10:	7cc2      	ldrb	r2, [r0, #19]
    1b12:	2607      	movs	r6, #7
    1b14:	4016      	ands	r6, r2
	st.reg = bank[bank_n].STATUS_BK.reg;
    1b16:	010a      	lsls	r2, r1, #4
    1b18:	18a2      	adds	r2, r4, r2
    1b1a:	7a94      	ldrb	r4, [r2, #10]
    1b1c:	b2e4      	uxtb	r4, r4
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    1b1e:	2d02      	cmp	r5, #2
    1b20:	d02a      	beq.n	1b78 <_usb_d_dev_handle_trfail+0x94>
	} else if (st.bit.ERRORFLOW) {
    1b22:	07a4      	lsls	r4, r4, #30
    1b24:	d544      	bpl.n	1bb0 <_usb_d_dev_handle_trfail+0xcc>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    1b26:	7a94      	ldrb	r4, [r2, #10]
    1b28:	2502      	movs	r5, #2
    1b2a:	43ac      	bics	r4, r5
    1b2c:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    1b2e:	ac01      	add	r4, sp, #4
    1b30:	5c65      	ldrb	r5, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1b32:	001a      	movs	r2, r3
    1b34:	3208      	adds	r2, #8
    1b36:	0152      	lsls	r2, r2, #5
    1b38:	4f2b      	ldr	r7, [pc, #172]	; (1be8 <_usb_d_dev_handle_trfail+0x104>)
    1b3a:	46bc      	mov	ip, r7
    1b3c:	4462      	add	r2, ip
    1b3e:	71d5      	strb	r5, [r2, #7]
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    1b40:	5c62      	ldrb	r2, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1b42:	015b      	lsls	r3, r3, #5
    1b44:	4c29      	ldr	r4, [pc, #164]	; (1bec <_usb_d_dev_handle_trfail+0x108>)
    1b46:	46a4      	mov	ip, r4
    1b48:	4463      	add	r3, ip
    1b4a:	701a      	strb	r2, [r3, #0]
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    1b4c:	2e01      	cmp	r6, #1
    1b4e:	d145      	bne.n	1bdc <_usb_d_dev_handle_trfail+0xf8>
    1b50:	7cc3      	ldrb	r3, [r0, #19]
    1b52:	065b      	lsls	r3, r3, #25
    1b54:	d542      	bpl.n	1bdc <_usb_d_dev_handle_trfail+0xf8>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    1b56:	7cc3      	ldrb	r3, [r0, #19]
    1b58:	09db      	lsrs	r3, r3, #7
    1b5a:	4299      	cmp	r1, r3
    1b5c:	d03e      	beq.n	1bdc <_usb_d_dev_handle_trfail+0xf8>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    1b5e:	2200      	movs	r2, #0
    1b60:	0019      	movs	r1, r3
    1b62:	4b23      	ldr	r3, [pc, #140]	; (1bf0 <_usb_d_dev_handle_trfail+0x10c>)
    1b64:	4798      	blx	r3
    1b66:	e039      	b.n	1bdc <_usb_d_dev_handle_trfail+0xf8>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1b68:	001a      	movs	r2, r3
    1b6a:	3208      	adds	r2, #8
    1b6c:	0152      	lsls	r2, r2, #5
    1b6e:	4d1e      	ldr	r5, [pc, #120]	; (1be8 <_usb_d_dev_handle_trfail+0x104>)
    1b70:	5d55      	ldrb	r5, [r2, r5]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    1b72:	2207      	movs	r2, #7
    1b74:	4015      	ands	r5, r2
    1b76:	e7cb      	b.n	1b10 <_usb_d_dev_handle_trfail+0x2c>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    1b78:	07e5      	lsls	r5, r4, #31
    1b7a:	d5d2      	bpl.n	1b22 <_usb_d_dev_handle_trfail+0x3e>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    1b7c:	7a94      	ldrb	r4, [r2, #10]
    1b7e:	2501      	movs	r5, #1
    1b80:	43ac      	bics	r4, r5
    1b82:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    1b84:	ac01      	add	r4, sp, #4
    1b86:	5c65      	ldrb	r5, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1b88:	001a      	movs	r2, r3
    1b8a:	3208      	adds	r2, #8
    1b8c:	0152      	lsls	r2, r2, #5
    1b8e:	4e16      	ldr	r6, [pc, #88]	; (1be8 <_usb_d_dev_handle_trfail+0x104>)
    1b90:	46b4      	mov	ip, r6
    1b92:	4462      	add	r2, ip
    1b94:	71d5      	strb	r5, [r2, #7]
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    1b96:	5c62      	ldrb	r2, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1b98:	015b      	lsls	r3, r3, #5
    1b9a:	4c14      	ldr	r4, [pc, #80]	; (1bec <_usb_d_dev_handle_trfail+0x108>)
    1b9c:	46a4      	mov	ip, r4
    1b9e:	4463      	add	r3, ip
    1ba0:	701a      	strb	r2, [r3, #0]
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    1ba2:	1e4b      	subs	r3, r1, #1
    1ba4:	4199      	sbcs	r1, r3
    1ba6:	b2c9      	uxtb	r1, r1
    1ba8:	2204      	movs	r2, #4
    1baa:	4b11      	ldr	r3, [pc, #68]	; (1bf0 <_usb_d_dev_handle_trfail+0x10c>)
    1bac:	4798      	blx	r3
    1bae:	e015      	b.n	1bdc <_usb_d_dev_handle_trfail+0xf8>
	bank->STATUS_BK.reg     = 0;
    1bb0:	005a      	lsls	r2, r3, #1
    1bb2:	1852      	adds	r2, r2, r1
    1bb4:	0112      	lsls	r2, r2, #4
    1bb6:	480b      	ldr	r0, [pc, #44]	; (1be4 <_usb_d_dev_handle_trfail+0x100>)
    1bb8:	1882      	adds	r2, r0, r2
    1bba:	2000      	movs	r0, #0
    1bbc:	7290      	strb	r0, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    1bbe:	a801      	add	r0, sp, #4
    1bc0:	5c44      	ldrb	r4, [r0, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1bc2:	001a      	movs	r2, r3
    1bc4:	3208      	adds	r2, #8
    1bc6:	0152      	lsls	r2, r2, #5
    1bc8:	4d07      	ldr	r5, [pc, #28]	; (1be8 <_usb_d_dev_handle_trfail+0x104>)
    1bca:	46ac      	mov	ip, r5
    1bcc:	4462      	add	r2, ip
    1bce:	71d4      	strb	r4, [r2, #7]
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    1bd0:	5c42      	ldrb	r2, [r0, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1bd2:	015b      	lsls	r3, r3, #5
    1bd4:	4905      	ldr	r1, [pc, #20]	; (1bec <_usb_d_dev_handle_trfail+0x108>)
    1bd6:	468c      	mov	ip, r1
    1bd8:	4463      	add	r3, ip
    1bda:	701a      	strb	r2, [r3, #0]
}
    1bdc:	b003      	add	sp, #12
    1bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1be0:	00004294 	.word	0x00004294
    1be4:	200001f0 	.word	0x200001f0
    1be8:	41005000 	.word	0x41005000
    1bec:	41005108 	.word	0x41005108
    1bf0:	00001a69 	.word	0x00001a69

00001bf4 <_usb_d_dev_reset_epts>:
{
    1bf4:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < USB_D_N_EP; i++) {
    1bf6:	2400      	movs	r4, #0
    1bf8:	e017      	b.n	1c2a <_usb_d_dev_reset_epts+0x36>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    1bfa:	4d10      	ldr	r5, [pc, #64]	; (1c3c <_usb_d_dev_reset_epts+0x48>)
    1bfc:	00a6      	lsls	r6, r4, #2
    1bfe:	1933      	adds	r3, r6, r4
    1c00:	0098      	lsls	r0, r3, #2
    1c02:	3010      	adds	r0, #16
    1c04:	1828      	adds	r0, r5, r0
    1c06:	3004      	adds	r0, #4
    1c08:	2103      	movs	r1, #3
    1c0a:	4b0d      	ldr	r3, [pc, #52]	; (1c40 <_usb_d_dev_reset_epts+0x4c>)
    1c0c:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    1c0e:	1932      	adds	r2, r6, r4
    1c10:	0093      	lsls	r3, r2, #2
    1c12:	18eb      	adds	r3, r5, r3
    1c14:	3326      	adds	r3, #38	; 0x26
    1c16:	22ff      	movs	r2, #255	; 0xff
    1c18:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    1c1a:	1936      	adds	r6, r6, r4
    1c1c:	00b3      	lsls	r3, r6, #2
    1c1e:	18ed      	adds	r5, r5, r3
    1c20:	3527      	adds	r5, #39	; 0x27
    1c22:	2300      	movs	r3, #0
    1c24:	702b      	strb	r3, [r5, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    1c26:	3401      	adds	r4, #1
    1c28:	b2e4      	uxtb	r4, r4
    1c2a:	2c10      	cmp	r4, #16
    1c2c:	d9e5      	bls.n	1bfa <_usb_d_dev_reset_epts+0x6>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    1c2e:	2280      	movs	r2, #128	; 0x80
    1c30:	0052      	lsls	r2, r2, #1
    1c32:	2100      	movs	r1, #0
    1c34:	4803      	ldr	r0, [pc, #12]	; (1c44 <_usb_d_dev_reset_epts+0x50>)
    1c36:	4b04      	ldr	r3, [pc, #16]	; (1c48 <_usb_d_dev_reset_epts+0x54>)
    1c38:	4798      	blx	r3
}
    1c3a:	bd70      	pop	{r4, r5, r6, pc}
    1c3c:	200002f0 	.word	0x200002f0
    1c40:	00001a41 	.word	0x00001a41
    1c44:	200001f0 	.word	0x200001f0
    1c48:	0000399f 	.word	0x0000399f

00001c4c <_usb_d_dev_in_next>:
{
    1c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c4e:	46c6      	mov	lr, r8
    1c50:	b500      	push	{lr}
    1c52:	0005      	movs	r5, r0
    1c54:	000e      	movs	r6, r1
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    1c56:	7c83      	ldrb	r3, [r0, #18]
    1c58:	240f      	movs	r4, #15
    1c5a:	401c      	ands	r4, r3
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    1c5c:	0162      	lsls	r2, r4, #5
    1c5e:	4b56      	ldr	r3, [pc, #344]	; (1db8 <_usb_d_dev_in_next+0x16c>)
    1c60:	189b      	adds	r3, r3, r2
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    1c62:	2900      	cmp	r1, #0
    1c64:	d058      	beq.n	1d18 <_usb_d_dev_in_next+0xcc>
    1c66:	6959      	ldr	r1, [r3, #20]
    1c68:	0489      	lsls	r1, r1, #18
    1c6a:	0c89      	lsrs	r1, r1, #18
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    1c6c:	8a2b      	ldrh	r3, [r5, #16]
    1c6e:	4a53      	ldr	r2, [pc, #332]	; (1dbc <_usb_d_dev_in_next+0x170>)
    1c70:	4293      	cmp	r3, r2
    1c72:	d053      	beq.n	1d1c <_usb_d_dev_in_next+0xd0>
    1c74:	3b01      	subs	r3, #1
    1c76:	b21b      	sxth	r3, r3
    1c78:	400b      	ands	r3, r1
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    1c7a:	7cea      	ldrb	r2, [r5, #19]
    1c7c:	2707      	movs	r7, #7
    1c7e:	4017      	ands	r7, r2
	if (isr) {
    1c80:	2e00      	cmp	r6, #0
    1c82:	d007      	beq.n	1c94 <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1c84:	0022      	movs	r2, r4
    1c86:	3208      	adds	r2, #8
    1c88:	0152      	lsls	r2, r2, #5
    1c8a:	484d      	ldr	r0, [pc, #308]	; (1dc0 <_usb_d_dev_in_next+0x174>)
    1c8c:	4684      	mov	ip, r0
    1c8e:	4462      	add	r2, ip
    1c90:	2002      	movs	r0, #2
    1c92:	71d0      	strb	r0, [r2, #7]
	ept->trans_count += trans_count;
    1c94:	68aa      	ldr	r2, [r5, #8]
    1c96:	4694      	mov	ip, r2
    1c98:	4461      	add	r1, ip
    1c9a:	60a9      	str	r1, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    1c9c:	686a      	ldr	r2, [r5, #4]
    1c9e:	4291      	cmp	r1, r2
    1ca0:	d24e      	bcs.n	1d40 <_usb_d_dev_in_next+0xf4>
		trans_next = ept->trans_size - ept->trans_count;
    1ca2:	b292      	uxth	r2, r2
    1ca4:	b28b      	uxth	r3, r1
    1ca6:	1ad2      	subs	r2, r2, r3
    1ca8:	b292      	uxth	r2, r2
		if (ept->flags.bits.use_cache) {
    1caa:	7ceb      	ldrb	r3, [r5, #19]
    1cac:	069b      	lsls	r3, r3, #26
    1cae:	d537      	bpl.n	1d20 <_usb_d_dev_in_next+0xd4>
			if (trans_next > ept->size) {
    1cb0:	8a2b      	ldrh	r3, [r5, #16]
    1cb2:	4698      	mov	r8, r3
    1cb4:	429a      	cmp	r2, r3
    1cb6:	d800      	bhi.n	1cba <_usb_d_dev_in_next+0x6e>
		trans_next = ept->trans_size - ept->trans_count;
    1cb8:	4690      	mov	r8, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    1cba:	682b      	ldr	r3, [r5, #0]
    1cbc:	469c      	mov	ip, r3
    1cbe:	4461      	add	r1, ip
    1cc0:	4642      	mov	r2, r8
    1cc2:	68e8      	ldr	r0, [r5, #12]
    1cc4:	4b3f      	ldr	r3, [pc, #252]	; (1dc4 <_usb_d_dev_in_next+0x178>)
    1cc6:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    1cc8:	68e9      	ldr	r1, [r5, #12]
	bank->ADDR.reg          = addr;
    1cca:	0162      	lsls	r2, r4, #5
    1ccc:	4b3a      	ldr	r3, [pc, #232]	; (1db8 <_usb_d_dev_in_next+0x16c>)
    1cce:	189b      	adds	r3, r3, r2
    1cd0:	6119      	str	r1, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    1cd2:	0163      	lsls	r3, r4, #5
    1cd4:	4a38      	ldr	r2, [pc, #224]	; (1db8 <_usb_d_dev_in_next+0x16c>)
    1cd6:	18d2      	adds	r2, r2, r3
    1cd8:	6951      	ldr	r1, [r2, #20]
    1cda:	4643      	mov	r3, r8
    1cdc:	049b      	lsls	r3, r3, #18
    1cde:	0c9b      	lsrs	r3, r3, #18
    1ce0:	0b89      	lsrs	r1, r1, #14
    1ce2:	0389      	lsls	r1, r1, #14
    1ce4:	430b      	orrs	r3, r1
    1ce6:	6153      	str	r3, [r2, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    1ce8:	6951      	ldr	r1, [r2, #20]
    1cea:	4b37      	ldr	r3, [pc, #220]	; (1dc8 <_usb_d_dev_in_next+0x17c>)
    1cec:	400b      	ands	r3, r1
    1cee:	6153      	str	r3, [r2, #20]
	if (!isr) {
    1cf0:	2e00      	cmp	r6, #0
    1cf2:	d107      	bne.n	1d04 <_usb_d_dev_in_next+0xb8>
		if (is_ctrl) {
    1cf4:	2f01      	cmp	r7, #1
    1cf6:	d05d      	beq.n	1db4 <_usb_d_dev_in_next+0x168>
			inten = USB_D_BANK1_INT_FLAGS;
    1cf8:	224a      	movs	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1cfa:	0163      	lsls	r3, r4, #5
    1cfc:	4933      	ldr	r1, [pc, #204]	; (1dcc <_usb_d_dev_in_next+0x180>)
    1cfe:	468c      	mov	ip, r1
    1d00:	4463      	add	r3, ip
    1d02:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1d04:	3408      	adds	r4, #8
    1d06:	0164      	lsls	r4, r4, #5
    1d08:	4b2d      	ldr	r3, [pc, #180]	; (1dc0 <_usb_d_dev_in_next+0x174>)
    1d0a:	469c      	mov	ip, r3
    1d0c:	4464      	add	r4, ip
    1d0e:	2380      	movs	r3, #128	; 0x80
    1d10:	7163      	strb	r3, [r4, #5]
}
    1d12:	bc04      	pop	{r2}
    1d14:	4690      	mov	r8, r2
    1d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    1d18:	2100      	movs	r1, #0
    1d1a:	e7a7      	b.n	1c6c <_usb_d_dev_in_next+0x20>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    1d1c:	b21b      	sxth	r3, r3
    1d1e:	e7ab      	b.n	1c78 <_usb_d_dev_in_next+0x2c>
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    1d20:	2380      	movs	r3, #128	; 0x80
    1d22:	019b      	lsls	r3, r3, #6
    1d24:	429a      	cmp	r2, r3
    1d26:	d807      	bhi.n	1d38 <_usb_d_dev_in_next+0xec>
		trans_next = ept->trans_size - ept->trans_count;
    1d28:	4690      	mov	r8, r2
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    1d2a:	682b      	ldr	r3, [r5, #0]
    1d2c:	1859      	adds	r1, r3, r1
	bank->ADDR.reg          = addr;
    1d2e:	0162      	lsls	r2, r4, #5
    1d30:	4b21      	ldr	r3, [pc, #132]	; (1db8 <_usb_d_dev_in_next+0x16c>)
    1d32:	189b      	adds	r3, r3, r2
    1d34:	6119      	str	r1, [r3, #16]
    1d36:	e7cc      	b.n	1cd2 <_usb_d_dev_in_next+0x86>
				trans_next = USB_D_DEV_TRANS_MAX;
    1d38:	2380      	movs	r3, #128	; 0x80
    1d3a:	019b      	lsls	r3, r3, #6
    1d3c:	4698      	mov	r8, r3
    1d3e:	e7f4      	b.n	1d2a <_usb_d_dev_in_next+0xde>
	} else if (ept->flags.bits.need_zlp) {
    1d40:	7cea      	ldrb	r2, [r5, #19]
    1d42:	06d2      	lsls	r2, r2, #27
    1d44:	d50f      	bpl.n	1d66 <_usb_d_dev_in_next+0x11a>
		ept->flags.bits.need_zlp = 0;
    1d46:	7ceb      	ldrb	r3, [r5, #19]
    1d48:	2210      	movs	r2, #16
    1d4a:	4393      	bics	r3, r2
    1d4c:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    1d4e:	0162      	lsls	r2, r4, #5
    1d50:	4b19      	ldr	r3, [pc, #100]	; (1db8 <_usb_d_dev_in_next+0x16c>)
    1d52:	189b      	adds	r3, r3, r2
    1d54:	695a      	ldr	r2, [r3, #20]
    1d56:	0b92      	lsrs	r2, r2, #14
    1d58:	0391      	lsls	r1, r2, #14
    1d5a:	6159      	str	r1, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    1d5c:	6959      	ldr	r1, [r3, #20]
    1d5e:	4a1a      	ldr	r2, [pc, #104]	; (1dc8 <_usb_d_dev_in_next+0x17c>)
    1d60:	400a      	ands	r2, r1
    1d62:	615a      	str	r2, [r3, #20]
    1d64:	e7c4      	b.n	1cf0 <_usb_d_dev_in_next+0xa4>
	if (is_ctrl) {
    1d66:	2f01      	cmp	r7, #1
    1d68:	d00d      	beq.n	1d86 <_usb_d_dev_in_next+0x13a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1d6a:	0164      	lsls	r4, r4, #5
    1d6c:	4a18      	ldr	r2, [pc, #96]	; (1dd0 <_usb_d_dev_in_next+0x184>)
    1d6e:	4694      	mov	ip, r2
    1d70:	4464      	add	r4, ip
    1d72:	224a      	movs	r2, #74	; 0x4a
    1d74:	7022      	strb	r2, [r4, #0]
	if (last_pkt == ept->size) {
    1d76:	8a2a      	ldrh	r2, [r5, #16]
    1d78:	4293      	cmp	r3, r2
    1d7a:	d00b      	beq.n	1d94 <_usb_d_dev_in_next+0x148>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    1d7c:	2100      	movs	r1, #0
    1d7e:	0028      	movs	r0, r5
    1d80:	4b14      	ldr	r3, [pc, #80]	; (1dd4 <_usb_d_dev_in_next+0x188>)
    1d82:	4798      	blx	r3
	return;
    1d84:	e7c5      	b.n	1d12 <_usb_d_dev_in_next+0xc6>
    1d86:	0164      	lsls	r4, r4, #5
    1d88:	4a11      	ldr	r2, [pc, #68]	; (1dd0 <_usb_d_dev_in_next+0x184>)
    1d8a:	4694      	mov	ip, r2
    1d8c:	4464      	add	r4, ip
    1d8e:	224b      	movs	r2, #75	; 0x4b
    1d90:	7022      	strb	r2, [r4, #0]
    1d92:	e7f0      	b.n	1d76 <_usb_d_dev_in_next+0x12a>
		ept->flags.bits.is_busy = 0;
    1d94:	7ceb      	ldrb	r3, [r5, #19]
    1d96:	2240      	movs	r2, #64	; 0x40
    1d98:	4393      	bics	r3, r2
    1d9a:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    1d9c:	4b0e      	ldr	r3, [pc, #56]	; (1dd8 <_usb_d_dev_in_next+0x18c>)
    1d9e:	68db      	ldr	r3, [r3, #12]
    1da0:	7ca8      	ldrb	r0, [r5, #18]
    1da2:	68a9      	ldr	r1, [r5, #8]
    1da4:	4798      	blx	r3
    1da6:	2800      	cmp	r0, #0
    1da8:	d1b3      	bne.n	1d12 <_usb_d_dev_in_next+0xc6>
		ept->flags.bits.is_busy = 1;
    1daa:	7ceb      	ldrb	r3, [r5, #19]
    1dac:	2240      	movs	r2, #64	; 0x40
    1dae:	4313      	orrs	r3, r2
    1db0:	74eb      	strb	r3, [r5, #19]
    1db2:	e7e3      	b.n	1d7c <_usb_d_dev_in_next+0x130>
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    1db4:	224e      	movs	r2, #78	; 0x4e
    1db6:	e7a0      	b.n	1cfa <_usb_d_dev_in_next+0xae>
    1db8:	200001f0 	.word	0x200001f0
    1dbc:	000003ff 	.word	0x000003ff
    1dc0:	41005000 	.word	0x41005000
    1dc4:	0000398d 	.word	0x0000398d
    1dc8:	f0003fff 	.word	0xf0003fff
    1dcc:	41005109 	.word	0x41005109
    1dd0:	41005108 	.word	0x41005108
    1dd4:	00001a41 	.word	0x00001a41
    1dd8:	200002f0 	.word	0x200002f0

00001ddc <_usb_d_dev_out_next>:
{
    1ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1dde:	46de      	mov	lr, fp
    1de0:	4657      	mov	r7, sl
    1de2:	464e      	mov	r6, r9
    1de4:	4645      	mov	r5, r8
    1de6:	b5e0      	push	{r5, r6, r7, lr}
    1de8:	0004      	movs	r4, r0
    1dea:	000f      	movs	r7, r1
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    1dec:	7c83      	ldrb	r3, [r0, #18]
    1dee:	250f      	movs	r5, #15
    1df0:	401d      	ands	r5, r3
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    1df2:	2900      	cmp	r1, #0
    1df4:	d059      	beq.n	1eaa <_usb_d_dev_out_next+0xce>
    1df6:	016a      	lsls	r2, r5, #5
    1df8:	4b71      	ldr	r3, [pc, #452]	; (1fc0 <_usb_d_dev_out_next+0x1e4>)
    1dfa:	189b      	adds	r3, r3, r2
    1dfc:	685b      	ldr	r3, [r3, #4]
    1dfe:	011b      	lsls	r3, r3, #4
    1e00:	0c9b      	lsrs	r3, r3, #18
    1e02:	469a      	mov	sl, r3
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    1e04:	2f00      	cmp	r7, #0
    1e06:	d053      	beq.n	1eb0 <_usb_d_dev_out_next+0xd4>
    1e08:	016a      	lsls	r2, r5, #5
    1e0a:	4b6d      	ldr	r3, [pc, #436]	; (1fc0 <_usb_d_dev_out_next+0x1e4>)
    1e0c:	189b      	adds	r3, r3, r2
    1e0e:	685b      	ldr	r3, [r3, #4]
    1e10:	049b      	lsls	r3, r3, #18
    1e12:	0c9b      	lsrs	r3, r3, #18
    1e14:	4698      	mov	r8, r3
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1e16:	8a26      	ldrh	r6, [r4, #16]
    1e18:	4b6a      	ldr	r3, [pc, #424]	; (1fc4 <_usb_d_dev_out_next+0x1e8>)
    1e1a:	429e      	cmp	r6, r3
    1e1c:	d001      	beq.n	1e22 <_usb_d_dev_out_next+0x46>
    1e1e:	3e01      	subs	r6, #1
    1e20:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    1e22:	4643      	mov	r3, r8
    1e24:	4033      	ands	r3, r6
    1e26:	469b      	mov	fp, r3
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1e28:	7ce3      	ldrb	r3, [r4, #19]
    1e2a:	2207      	movs	r2, #7
    1e2c:	401a      	ands	r2, r3
    1e2e:	4691      	mov	r9, r2
	if (isr) {
    1e30:	2f00      	cmp	r7, #0
    1e32:	d007      	beq.n	1e44 <_usb_d_dev_out_next+0x68>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1e34:	002b      	movs	r3, r5
    1e36:	3308      	adds	r3, #8
    1e38:	015b      	lsls	r3, r3, #5
    1e3a:	4a63      	ldr	r2, [pc, #396]	; (1fc8 <_usb_d_dev_out_next+0x1ec>)
    1e3c:	4694      	mov	ip, r2
    1e3e:	4463      	add	r3, ip
    1e40:	2201      	movs	r2, #1
    1e42:	71da      	strb	r2, [r3, #7]
	if (ept->flags.bits.use_cache && ept->trans_size) {
    1e44:	7ce3      	ldrb	r3, [r4, #19]
    1e46:	069b      	lsls	r3, r3, #26
    1e48:	d511      	bpl.n	1e6e <_usb_d_dev_out_next+0x92>
    1e4a:	6862      	ldr	r2, [r4, #4]
    1e4c:	2a00      	cmp	r2, #0
    1e4e:	d00e      	beq.n	1e6e <_usb_d_dev_out_next+0x92>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    1e50:	b292      	uxth	r2, r2
    1e52:	8923      	ldrh	r3, [r4, #8]
    1e54:	1ad2      	subs	r2, r2, r3
    1e56:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    1e58:	6823      	ldr	r3, [r4, #0]
    1e5a:	68a1      	ldr	r1, [r4, #8]
    1e5c:	468c      	mov	ip, r1
    1e5e:	4463      	add	r3, ip
    1e60:	0018      	movs	r0, r3
    1e62:	68e1      	ldr	r1, [r4, #12]
    1e64:	4593      	cmp	fp, r2
    1e66:	d200      	bcs.n	1e6a <_usb_d_dev_out_next+0x8e>
    1e68:	465a      	mov	r2, fp
    1e6a:	4b58      	ldr	r3, [pc, #352]	; (1fcc <_usb_d_dev_out_next+0x1f0>)
    1e6c:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    1e6e:	6863      	ldr	r3, [r4, #4]
    1e70:	2b00      	cmp	r3, #0
    1e72:	d120      	bne.n	1eb6 <_usb_d_dev_out_next+0xda>
    1e74:	7ce2      	ldrb	r2, [r4, #19]
    1e76:	06d2      	lsls	r2, r2, #27
    1e78:	d51d      	bpl.n	1eb6 <_usb_d_dev_out_next+0xda>
		ept->flags.bits.need_zlp  = 0;
    1e7a:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    1e7c:	2210      	movs	r2, #16
    1e7e:	4393      	bics	r3, r2
    1e80:	2220      	movs	r2, #32
    1e82:	4313      	orrs	r3, r2
    1e84:	74e3      	strb	r3, [r4, #19]
	bank->ADDR.reg          = addr;
    1e86:	494e      	ldr	r1, [pc, #312]	; (1fc0 <_usb_d_dev_out_next+0x1e4>)
    1e88:	016a      	lsls	r2, r5, #5
    1e8a:	68e3      	ldr	r3, [r4, #12]
    1e8c:	5053      	str	r3, [r2, r1]
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    1e8e:	8a23      	ldrh	r3, [r4, #16]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    1e90:	188a      	adds	r2, r1, r2
    1e92:	6851      	ldr	r1, [r2, #4]
    1e94:	049b      	lsls	r3, r3, #18
    1e96:	091b      	lsrs	r3, r3, #4
    1e98:	484d      	ldr	r0, [pc, #308]	; (1fd0 <_usb_d_dev_out_next+0x1f4>)
    1e9a:	4001      	ands	r1, r0
    1e9c:	430b      	orrs	r3, r1
    1e9e:	6053      	str	r3, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    1ea0:	6853      	ldr	r3, [r2, #4]
    1ea2:	0b9b      	lsrs	r3, r3, #14
    1ea4:	0399      	lsls	r1, r3, #14
    1ea6:	6051      	str	r1, [r2, #4]
    1ea8:	e047      	b.n	1f3a <_usb_d_dev_out_next+0x15e>
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    1eaa:	2300      	movs	r3, #0
    1eac:	469a      	mov	sl, r3
    1eae:	e7a9      	b.n	1e04 <_usb_d_dev_out_next+0x28>
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    1eb0:	2300      	movs	r3, #0
    1eb2:	4698      	mov	r8, r3
    1eb4:	e7af      	b.n	1e16 <_usb_d_dev_out_next+0x3a>
	} else if (isr && last_pkt < ept->size) {
    1eb6:	2f00      	cmp	r7, #0
    1eb8:	d01d      	beq.n	1ef6 <_usb_d_dev_out_next+0x11a>
    1eba:	8a22      	ldrh	r2, [r4, #16]
    1ebc:	4593      	cmp	fp, r2
    1ebe:	d21a      	bcs.n	1ef6 <_usb_d_dev_out_next+0x11a>
		ept->flags.bits.need_zlp = 0;
    1ec0:	7ce3      	ldrb	r3, [r4, #19]
    1ec2:	2210      	movs	r2, #16
    1ec4:	4393      	bics	r3, r2
    1ec6:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    1ec8:	68a3      	ldr	r3, [r4, #8]
    1eca:	4443      	add	r3, r8
    1ecc:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    1ece:	464b      	mov	r3, r9
    1ed0:	2b01      	cmp	r3, #1
    1ed2:	d066      	beq.n	1fa2 <_usb_d_dev_out_next+0x1c6>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1ed4:	016b      	lsls	r3, r5, #5
    1ed6:	4a3f      	ldr	r2, [pc, #252]	; (1fd4 <_usb_d_dev_out_next+0x1f8>)
    1ed8:	4694      	mov	ip, r2
    1eda:	4463      	add	r3, ip
    1edc:	2225      	movs	r2, #37	; 0x25
    1ede:	701a      	strb	r2, [r3, #0]
	if (0 == epn) {
    1ee0:	2d00      	cmp	r5, #0
    1ee2:	d103      	bne.n	1eec <_usb_d_dev_out_next+0x110>
	bank->ADDR.reg          = addr;
    1ee4:	016d      	lsls	r5, r5, #5
    1ee6:	4b36      	ldr	r3, [pc, #216]	; (1fc0 <_usb_d_dev_out_next+0x1e4>)
    1ee8:	68e2      	ldr	r2, [r4, #12]
    1eea:	50ea      	str	r2, [r5, r3]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    1eec:	2100      	movs	r1, #0
    1eee:	0020      	movs	r0, r4
    1ef0:	4b39      	ldr	r3, [pc, #228]	; (1fd8 <_usb_d_dev_out_next+0x1fc>)
    1ef2:	4798      	blx	r3
	return;
    1ef4:	e033      	b.n	1f5e <_usb_d_dev_out_next+0x182>
		ept->trans_count += trans_size;
    1ef6:	68a2      	ldr	r2, [r4, #8]
    1ef8:	4452      	add	r2, sl
    1efa:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    1efc:	4293      	cmp	r3, r2
    1efe:	d9e6      	bls.n	1ece <_usb_d_dev_out_next+0xf2>
			trans_next = ept->trans_size - ept->trans_count;
    1f00:	b29b      	uxth	r3, r3
    1f02:	b291      	uxth	r1, r2
    1f04:	1a5b      	subs	r3, r3, r1
    1f06:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    1f08:	7ce1      	ldrb	r1, [r4, #19]
    1f0a:	0689      	lsls	r1, r1, #26
    1f0c:	d52d      	bpl.n	1f6a <_usb_d_dev_out_next+0x18e>
				if (trans_next > ept->size) {
    1f0e:	8a21      	ldrh	r1, [r4, #16]
    1f10:	428b      	cmp	r3, r1
    1f12:	d800      	bhi.n	1f16 <_usb_d_dev_out_next+0x13a>
			trans_next = ept->trans_size - ept->trans_count;
    1f14:	0019      	movs	r1, r3
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    1f16:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    1f18:	016b      	lsls	r3, r5, #5
    1f1a:	4a29      	ldr	r2, [pc, #164]	; (1fc0 <_usb_d_dev_out_next+0x1e4>)
    1f1c:	5098      	str	r0, [r3, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    1f1e:	016b      	lsls	r3, r5, #5
    1f20:	4827      	ldr	r0, [pc, #156]	; (1fc0 <_usb_d_dev_out_next+0x1e4>)
    1f22:	18c0      	adds	r0, r0, r3
    1f24:	6842      	ldr	r2, [r0, #4]
    1f26:	048b      	lsls	r3, r1, #18
    1f28:	091b      	lsrs	r3, r3, #4
    1f2a:	4929      	ldr	r1, [pc, #164]	; (1fd0 <_usb_d_dev_out_next+0x1f4>)
    1f2c:	400a      	ands	r2, r1
    1f2e:	4313      	orrs	r3, r2
    1f30:	6043      	str	r3, [r0, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    1f32:	6843      	ldr	r3, [r0, #4]
    1f34:	0b9b      	lsrs	r3, r3, #14
    1f36:	039a      	lsls	r2, r3, #14
    1f38:	6042      	str	r2, [r0, #4]
	if (!isr) {
    1f3a:	2f00      	cmp	r7, #0
    1f3c:	d108      	bne.n	1f50 <_usb_d_dev_out_next+0x174>
		if (is_ctrl) {
    1f3e:	464b      	mov	r3, r9
    1f40:	2b01      	cmp	r3, #1
    1f42:	d035      	beq.n	1fb0 <_usb_d_dev_out_next+0x1d4>
			inten = USB_D_BANK0_INT_FLAGS;
    1f44:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1f46:	016b      	lsls	r3, r5, #5
    1f48:	4924      	ldr	r1, [pc, #144]	; (1fdc <_usb_d_dev_out_next+0x200>)
    1f4a:	468c      	mov	ip, r1
    1f4c:	4463      	add	r3, ip
    1f4e:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1f50:	3508      	adds	r5, #8
    1f52:	016d      	lsls	r5, r5, #5
    1f54:	4b1c      	ldr	r3, [pc, #112]	; (1fc8 <_usb_d_dev_out_next+0x1ec>)
    1f56:	469c      	mov	ip, r3
    1f58:	4465      	add	r5, ip
    1f5a:	2340      	movs	r3, #64	; 0x40
    1f5c:	712b      	strb	r3, [r5, #4]
}
    1f5e:	bc3c      	pop	{r2, r3, r4, r5}
    1f60:	4690      	mov	r8, r2
    1f62:	4699      	mov	r9, r3
    1f64:	46a2      	mov	sl, r4
    1f66:	46ab      	mov	fp, r5
    1f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (trans_next > ept->size) {
    1f6a:	8a21      	ldrh	r1, [r4, #16]
    1f6c:	428b      	cmp	r3, r1
    1f6e:	d90b      	bls.n	1f88 <_usb_d_dev_out_next+0x1ac>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    1f70:	2180      	movs	r1, #128	; 0x80
    1f72:	0189      	lsls	r1, r1, #6
    1f74:	428b      	cmp	r3, r1
    1f76:	d80f      	bhi.n	1f98 <_usb_d_dev_out_next+0x1bc>
    1f78:	43b3      	bics	r3, r6
    1f7a:	0019      	movs	r1, r3
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    1f7c:	6823      	ldr	r3, [r4, #0]
    1f7e:	189a      	adds	r2, r3, r2
	bank->ADDR.reg          = addr;
    1f80:	016b      	lsls	r3, r5, #5
    1f82:	480f      	ldr	r0, [pc, #60]	; (1fc0 <_usb_d_dev_out_next+0x1e4>)
    1f84:	501a      	str	r2, [r3, r0]
    1f86:	e7ca      	b.n	1f1e <_usb_d_dev_out_next+0x142>
				} else if (trans_next < ept->size) {
    1f88:	428b      	cmp	r3, r1
    1f8a:	d208      	bcs.n	1f9e <_usb_d_dev_out_next+0x1c2>
					ept->flags.bits.use_cache = 1;
    1f8c:	7ce1      	ldrb	r1, [r4, #19]
    1f8e:	2020      	movs	r0, #32
    1f90:	4301      	orrs	r1, r0
    1f92:	74e1      	strb	r1, [r4, #19]
			trans_next = ept->trans_size - ept->trans_count;
    1f94:	0019      	movs	r1, r3
    1f96:	e7f1      	b.n	1f7c <_usb_d_dev_out_next+0x1a0>
						trans_next = USB_D_DEV_TRANS_MAX;
    1f98:	2180      	movs	r1, #128	; 0x80
    1f9a:	0189      	lsls	r1, r1, #6
    1f9c:	e7ee      	b.n	1f7c <_usb_d_dev_out_next+0x1a0>
			trans_next = ept->trans_size - ept->trans_count;
    1f9e:	0019      	movs	r1, r3
    1fa0:	e7ec      	b.n	1f7c <_usb_d_dev_out_next+0x1a0>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1fa2:	016b      	lsls	r3, r5, #5
    1fa4:	4a0b      	ldr	r2, [pc, #44]	; (1fd4 <_usb_d_dev_out_next+0x1f8>)
    1fa6:	4694      	mov	ip, r2
    1fa8:	4463      	add	r3, ip
    1faa:	222d      	movs	r2, #45	; 0x2d
    1fac:	701a      	strb	r2, [r3, #0]
    1fae:	e797      	b.n	1ee0 <_usb_d_dev_out_next+0x104>
	bank->STATUS_BK.reg     = 0;
    1fb0:	016a      	lsls	r2, r5, #5
    1fb2:	4b03      	ldr	r3, [pc, #12]	; (1fc0 <_usb_d_dev_out_next+0x1e4>)
    1fb4:	189b      	adds	r3, r3, r2
    1fb6:	2200      	movs	r2, #0
    1fb8:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    1fba:	322d      	adds	r2, #45	; 0x2d
    1fbc:	e7c3      	b.n	1f46 <_usb_d_dev_out_next+0x16a>
    1fbe:	46c0      	nop			; (mov r8, r8)
    1fc0:	200001f0 	.word	0x200001f0
    1fc4:	000003ff 	.word	0x000003ff
    1fc8:	41005000 	.word	0x41005000
    1fcc:	0000398d 	.word	0x0000398d
    1fd0:	f0003fff 	.word	0xf0003fff
    1fd4:	41005108 	.word	0x41005108
    1fd8:	00001a41 	.word	0x00001a41
    1fdc:	41005109 	.word	0x41005109

00001fe0 <_usb_d_dev_handler>:
{
    1fe0:	b570      	push	{r4, r5, r6, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    1fe2:	4b89      	ldr	r3, [pc, #548]	; (2208 <STACK_SIZE+0x208>)
    1fe4:	8c1d      	ldrh	r5, [r3, #32]
    1fe6:	b2ad      	uxth	r5, r5
	if (0 == epint) {
    1fe8:	2d00      	cmp	r5, #0
    1fea:	d001      	beq.n	1ff0 <_usb_d_dev_handler+0x10>
	bool     rc    = true;
    1fec:	2400      	movs	r4, #0
    1fee:	e0bf      	b.n	2170 <STACK_SIZE+0x170>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    1ff0:	8b99      	ldrh	r1, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    1ff2:	8b1b      	ldrh	r3, [r3, #24]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    1ff4:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    1ff6:	075a      	lsls	r2, r3, #29
    1ff8:	d40d      	bmi.n	2016 <STACK_SIZE+0x16>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    1ffa:	059a      	lsls	r2, r3, #22
    1ffc:	d415      	bmi.n	202a <STACK_SIZE+0x2a>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    1ffe:	061a      	lsls	r2, r3, #24
    2000:	d437      	bmi.n	2072 <STACK_SIZE+0x72>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    2002:	2270      	movs	r2, #112	; 0x70
    2004:	421a      	tst	r2, r3
    2006:	d13e      	bne.n	2086 <STACK_SIZE+0x86>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    2008:	071a      	lsls	r2, r3, #28
    200a:	d457      	bmi.n	20bc <STACK_SIZE+0xbc>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    200c:	07db      	lsls	r3, r3, #31
    200e:	d500      	bpl.n	2012 <STACK_SIZE+0x12>
    2010:	e068      	b.n	20e4 <STACK_SIZE+0xe4>
		rc = false;
    2012:	2300      	movs	r3, #0
    2014:	e006      	b.n	2024 <STACK_SIZE+0x24>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    2016:	2204      	movs	r2, #4
    2018:	4b7b      	ldr	r3, [pc, #492]	; (2208 <STACK_SIZE+0x208>)
    201a:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    201c:	4b7b      	ldr	r3, [pc, #492]	; (220c <STACK_SIZE+0x20c>)
    201e:	681b      	ldr	r3, [r3, #0]
    2020:	4798      	blx	r3
		return true;
    2022:	2301      	movs	r3, #1
		if (_usb_d_dev_handle_nep()) {
    2024:	2b00      	cmp	r3, #0
    2026:	d0e1      	beq.n	1fec <_usb_d_dev_handler+0xc>
}
    2028:	bd70      	pop	{r4, r5, r6, pc}
    202a:	4b77      	ldr	r3, [pc, #476]	; (2208 <STACK_SIZE+0x208>)
    202c:	4a78      	ldr	r2, [pc, #480]	; (2210 <STACK_SIZE+0x210>)
    202e:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    2030:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2032:	3a92      	subs	r2, #146	; 0x92
    2034:	3aff      	subs	r2, #255	; 0xff
    2036:	831a      	strh	r2, [r3, #24]
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    2038:	2300      	movs	r3, #0
    203a:	2b06      	cmp	r3, #6
    203c:	d812      	bhi.n	2064 <STACK_SIZE+0x64>
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    203e:	0158      	lsls	r0, r3, #5
    2040:	4a74      	ldr	r2, [pc, #464]	; (2214 <STACK_SIZE+0x214>)
    2042:	1812      	adds	r2, r2, r0
    2044:	8912      	ldrh	r2, [r2, #8]
    2046:	0712      	lsls	r2, r2, #28
    2048:	0f12      	lsrs	r2, r2, #28
    204a:	2a03      	cmp	r2, #3
    204c:	d002      	beq.n	2054 <STACK_SIZE+0x54>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    204e:	3301      	adds	r3, #1
    2050:	b2db      	uxtb	r3, r3
    2052:	e7f2      	b.n	203a <STACK_SIZE+0x3a>
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    2054:	4b6f      	ldr	r3, [pc, #444]	; (2214 <STACK_SIZE+0x214>)
    2056:	181b      	adds	r3, r3, r0
    2058:	8919      	ldrh	r1, [r3, #8]
    205a:	0449      	lsls	r1, r1, #17
    205c:	0d49      	lsrs	r1, r1, #21
			bank->EXTREG.reg = 0;
    205e:	2200      	movs	r2, #0
    2060:	811a      	strh	r2, [r3, #8]
    2062:	e000      	b.n	2066 <STACK_SIZE+0x66>
	uint32_t lpm_variable = 0;
    2064:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    2066:	4b69      	ldr	r3, [pc, #420]	; (220c <STACK_SIZE+0x20c>)
    2068:	685b      	ldr	r3, [r3, #4]
    206a:	2003      	movs	r0, #3
    206c:	4798      	blx	r3
	bool     rc    = true;
    206e:	2301      	movs	r3, #1
    2070:	e7d8      	b.n	2024 <STACK_SIZE+0x24>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    2072:	2280      	movs	r2, #128	; 0x80
    2074:	4b64      	ldr	r3, [pc, #400]	; (2208 <STACK_SIZE+0x208>)
    2076:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    2078:	4b64      	ldr	r3, [pc, #400]	; (220c <STACK_SIZE+0x20c>)
    207a:	685b      	ldr	r3, [r3, #4]
    207c:	2100      	movs	r1, #0
    207e:	2005      	movs	r0, #5
    2080:	4798      	blx	r3
	bool     rc    = true;
    2082:	2301      	movs	r3, #1
    2084:	e7ce      	b.n	2024 <STACK_SIZE+0x24>
    2086:	4b60      	ldr	r3, [pc, #384]	; (2208 <STACK_SIZE+0x208>)
    2088:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    208a:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    208c:	4a60      	ldr	r2, [pc, #384]	; (2210 <STACK_SIZE+0x210>)
    208e:	831a      	strh	r2, [r3, #24]
	if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    2090:	4b61      	ldr	r3, [pc, #388]	; (2218 <STACK_SIZE+0x218>)
    2092:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    2094:	069b      	lsls	r3, r3, #26
    2096:	d40c      	bmi.n	20b2 <STACK_SIZE+0xb2>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    2098:	4b5f      	ldr	r3, [pc, #380]	; (2218 <STACK_SIZE+0x218>)
    209a:	68da      	ldr	r2, [r3, #12]
	tmp &= mask;
    209c:	23d0      	movs	r3, #208	; 0xd0
    209e:	4013      	ands	r3, r2
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, DFLL_READY_FLAG) != DFLL_READY_FLAG)
    20a0:	2bd0      	cmp	r3, #208	; 0xd0
    20a2:	d1f9      	bne.n	2098 <STACK_SIZE+0x98>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    20a4:	4b59      	ldr	r3, [pc, #356]	; (220c <STACK_SIZE+0x20c>)
    20a6:	685b      	ldr	r3, [r3, #4]
    20a8:	2100      	movs	r1, #0
    20aa:	2002      	movs	r0, #2
    20ac:	4798      	blx	r3
	bool     rc    = true;
    20ae:	2301      	movs	r3, #1
    20b0:	e7b8      	b.n	2024 <STACK_SIZE+0x24>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    20b2:	4b59      	ldr	r3, [pc, #356]	; (2218 <STACK_SIZE+0x218>)
    20b4:	68db      	ldr	r3, [r3, #12]
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY)
    20b6:	06db      	lsls	r3, r3, #27
    20b8:	d5fb      	bpl.n	20b2 <STACK_SIZE+0xb2>
    20ba:	e7f3      	b.n	20a4 <STACK_SIZE+0xa4>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    20bc:	4b52      	ldr	r3, [pc, #328]	; (2208 <STACK_SIZE+0x208>)
    20be:	2100      	movs	r1, #0
    20c0:	2280      	movs	r2, #128	; 0x80
    20c2:	0052      	lsls	r2, r2, #1
    20c4:	5499      	strb	r1, [r3, r2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    20c6:	3af8      	subs	r2, #248	; 0xf8
    20c8:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    20ca:	3268      	adds	r2, #104	; 0x68
    20cc:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    20ce:	4a50      	ldr	r2, [pc, #320]	; (2210 <STACK_SIZE+0x210>)
    20d0:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    20d2:	4b52      	ldr	r3, [pc, #328]	; (221c <STACK_SIZE+0x21c>)
    20d4:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    20d6:	4b4d      	ldr	r3, [pc, #308]	; (220c <STACK_SIZE+0x20c>)
    20d8:	685b      	ldr	r3, [r3, #4]
    20da:	2100      	movs	r1, #0
    20dc:	2001      	movs	r0, #1
    20de:	4798      	blx	r3
	bool     rc    = true;
    20e0:	2301      	movs	r3, #1
    20e2:	e79f      	b.n	2024 <STACK_SIZE+0x24>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    20e4:	4b48      	ldr	r3, [pc, #288]	; (2208 <STACK_SIZE+0x208>)
    20e6:	4a4a      	ldr	r2, [pc, #296]	; (2210 <STACK_SIZE+0x210>)
    20e8:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    20ea:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    20ec:	3a92      	subs	r2, #146	; 0x92
    20ee:	3aff      	subs	r2, #255	; 0xff
    20f0:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    20f2:	4b46      	ldr	r3, [pc, #280]	; (220c <STACK_SIZE+0x20c>)
    20f4:	685b      	ldr	r3, [r3, #4]
    20f6:	2100      	movs	r1, #0
    20f8:	2004      	movs	r0, #4
    20fa:	4798      	blx	r3
	bool     rc    = true;
    20fc:	2301      	movs	r3, #1
    20fe:	e791      	b.n	2024 <STACK_SIZE+0x24>
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    2100:	06da      	lsls	r2, r3, #27
    2102:	d407      	bmi.n	2114 <STACK_SIZE+0x114>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    2104:	065a      	lsls	r2, r3, #25
    2106:	d408      	bmi.n	211a <STACK_SIZE+0x11a>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    2108:	069b      	lsls	r3, r3, #26
    210a:	d52f      	bpl.n	216c <STACK_SIZE+0x16c>
		_usb_d_dev_handle_stall(ept, 0);
    210c:	2100      	movs	r1, #0
    210e:	4b44      	ldr	r3, [pc, #272]	; (2220 <STACK_SIZE+0x220>)
    2110:	4798      	blx	r3
    2112:	e02b      	b.n	216c <STACK_SIZE+0x16c>
		_usb_d_dev_handle_setup(ept);
    2114:	4b43      	ldr	r3, [pc, #268]	; (2224 <STACK_SIZE+0x224>)
    2116:	4798      	blx	r3
    2118:	e028      	b.n	216c <STACK_SIZE+0x16c>
		_usb_d_dev_handle_stall(ept, 1);
    211a:	2101      	movs	r1, #1
    211c:	4b40      	ldr	r3, [pc, #256]	; (2220 <STACK_SIZE+0x220>)
    211e:	4798      	blx	r3
    2120:	e024      	b.n	216c <STACK_SIZE+0x16c>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    2122:	065a      	lsls	r2, r3, #25
    2124:	d40f      	bmi.n	2146 <STACK_SIZE+0x146>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    2126:	071a      	lsls	r2, r3, #28
    2128:	d411      	bmi.n	214e <STACK_SIZE+0x14e>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    212a:	079a      	lsls	r2, r3, #30
    212c:	d413      	bmi.n	2156 <STACK_SIZE+0x156>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    212e:	7cc1      	ldrb	r1, [r0, #19]
    2130:	2207      	movs	r2, #7
    2132:	400a      	ands	r2, r1
    2134:	2a01      	cmp	r2, #1
    2136:	d119      	bne.n	216c <STACK_SIZE+0x16c>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    2138:	075a      	lsls	r2, r3, #29
    213a:	d410      	bmi.n	215e <STACK_SIZE+0x15e>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    213c:	06db      	lsls	r3, r3, #27
    213e:	d515      	bpl.n	216c <STACK_SIZE+0x16c>
			_usb_d_dev_handle_setup(ept);
    2140:	4b38      	ldr	r3, [pc, #224]	; (2224 <STACK_SIZE+0x224>)
    2142:	4798      	blx	r3
    2144:	e012      	b.n	216c <STACK_SIZE+0x16c>
		_usb_d_dev_handle_stall(ept, 1);
    2146:	2101      	movs	r1, #1
    2148:	4b35      	ldr	r3, [pc, #212]	; (2220 <STACK_SIZE+0x220>)
    214a:	4798      	blx	r3
    214c:	e00e      	b.n	216c <STACK_SIZE+0x16c>
		_usb_d_dev_handle_trfail(ept, 1);
    214e:	2101      	movs	r1, #1
    2150:	4b35      	ldr	r3, [pc, #212]	; (2228 <STACK_SIZE+0x228>)
    2152:	4798      	blx	r3
    2154:	e00a      	b.n	216c <STACK_SIZE+0x16c>
		_usb_d_dev_in_next(ept, true);
    2156:	2101      	movs	r1, #1
    2158:	4b34      	ldr	r3, [pc, #208]	; (222c <STACK_SIZE+0x22c>)
    215a:	4798      	blx	r3
    215c:	e006      	b.n	216c <STACK_SIZE+0x16c>
			_usb_d_dev_handle_trfail(ept, 0);
    215e:	2100      	movs	r1, #0
    2160:	4b31      	ldr	r3, [pc, #196]	; (2228 <STACK_SIZE+0x228>)
    2162:	4798      	blx	r3
    2164:	e002      	b.n	216c <STACK_SIZE+0x16c>
		_usb_d_dev_handle_stall(ept, 0);
    2166:	2100      	movs	r1, #0
    2168:	4b2d      	ldr	r3, [pc, #180]	; (2220 <STACK_SIZE+0x220>)
    216a:	4798      	blx	r3
	for (i = 0; i < USB_D_N_EP; i++) {
    216c:	3401      	adds	r4, #1
    216e:	b2e4      	uxtb	r4, r4
    2170:	2c10      	cmp	r4, #16
    2172:	d900      	bls.n	2176 <STACK_SIZE+0x176>
    2174:	e758      	b.n	2028 <STACK_SIZE+0x28>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    2176:	4b25      	ldr	r3, [pc, #148]	; (220c <STACK_SIZE+0x20c>)
    2178:	00a2      	lsls	r2, r4, #2
    217a:	1911      	adds	r1, r2, r4
    217c:	0088      	lsls	r0, r1, #2
    217e:	0001      	movs	r1, r0
    2180:	3010      	adds	r0, #16
    2182:	1818      	adds	r0, r3, r0
    2184:	3004      	adds	r0, #4
		if (ept->ep == 0xFF) {
    2186:	185b      	adds	r3, r3, r1
    2188:	3326      	adds	r3, #38	; 0x26
    218a:	781b      	ldrb	r3, [r3, #0]
    218c:	2bff      	cmp	r3, #255	; 0xff
    218e:	d0ed      	beq.n	216c <STACK_SIZE+0x16c>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2190:	7c82      	ldrb	r2, [r0, #18]
    2192:	230f      	movs	r3, #15
    2194:	4013      	ands	r3, r2
	if (!(epint & (1u << epn))) {
    2196:	2201      	movs	r2, #1
    2198:	409a      	lsls	r2, r3
    219a:	422a      	tst	r2, r5
    219c:	d0e6      	beq.n	216c <STACK_SIZE+0x16c>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    219e:	001a      	movs	r2, r3
    21a0:	3208      	adds	r2, #8
    21a2:	0152      	lsls	r2, r2, #5
    21a4:	4918      	ldr	r1, [pc, #96]	; (2208 <STACK_SIZE+0x208>)
    21a6:	468c      	mov	ip, r1
    21a8:	4462      	add	r2, ip
    21aa:	79d2      	ldrb	r2, [r2, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    21ac:	015b      	lsls	r3, r3, #5
    21ae:	4920      	ldr	r1, [pc, #128]	; (2230 <STACK_SIZE+0x230>)
    21b0:	468c      	mov	ip, r1
    21b2:	4463      	add	r3, ip
    21b4:	781b      	ldrb	r3, [r3, #0]
	flags &= mask;
    21b6:	4013      	ands	r3, r2
	if (flags) {
    21b8:	d0d8      	beq.n	216c <STACK_SIZE+0x16c>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    21ba:	7cc2      	ldrb	r2, [r0, #19]
    21bc:	2147      	movs	r1, #71	; 0x47
    21be:	4011      	ands	r1, r2
    21c0:	2901      	cmp	r1, #1
    21c2:	d09d      	beq.n	2100 <STACK_SIZE+0x100>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    21c4:	b252      	sxtb	r2, r2
    21c6:	2a00      	cmp	r2, #0
    21c8:	dbab      	blt.n	2122 <STACK_SIZE+0x122>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    21ca:	069a      	lsls	r2, r3, #26
    21cc:	d4cb      	bmi.n	2166 <STACK_SIZE+0x166>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    21ce:	075a      	lsls	r2, r3, #29
    21d0:	d40d      	bmi.n	21ee <STACK_SIZE+0x1ee>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    21d2:	07da      	lsls	r2, r3, #31
    21d4:	d40f      	bmi.n	21f6 <STACK_SIZE+0x1f6>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    21d6:	7cc1      	ldrb	r1, [r0, #19]
    21d8:	2207      	movs	r2, #7
    21da:	400a      	ands	r2, r1
    21dc:	2a01      	cmp	r2, #1
    21de:	d1c5      	bne.n	216c <STACK_SIZE+0x16c>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    21e0:	071a      	lsls	r2, r3, #28
    21e2:	d40c      	bmi.n	21fe <STACK_SIZE+0x1fe>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    21e4:	06db      	lsls	r3, r3, #27
    21e6:	d5c1      	bpl.n	216c <STACK_SIZE+0x16c>
			_usb_d_dev_handle_setup(ept);
    21e8:	4b0e      	ldr	r3, [pc, #56]	; (2224 <STACK_SIZE+0x224>)
    21ea:	4798      	blx	r3
    21ec:	e7be      	b.n	216c <STACK_SIZE+0x16c>
		_usb_d_dev_handle_trfail(ept, 0);
    21ee:	2100      	movs	r1, #0
    21f0:	4b0d      	ldr	r3, [pc, #52]	; (2228 <STACK_SIZE+0x228>)
    21f2:	4798      	blx	r3
    21f4:	e7ba      	b.n	216c <STACK_SIZE+0x16c>
		_usb_d_dev_out_next(ept, true);
    21f6:	2101      	movs	r1, #1
    21f8:	4b0e      	ldr	r3, [pc, #56]	; (2234 <STACK_SIZE+0x234>)
    21fa:	4798      	blx	r3
    21fc:	e7b6      	b.n	216c <STACK_SIZE+0x16c>
			_usb_d_dev_handle_trfail(ept, 1);
    21fe:	2101      	movs	r1, #1
    2200:	4b09      	ldr	r3, [pc, #36]	; (2228 <STACK_SIZE+0x228>)
    2202:	4798      	blx	r3
    2204:	e7b2      	b.n	216c <STACK_SIZE+0x16c>
    2206:	46c0      	nop			; (mov r8, r8)
    2208:	41005000 	.word	0x41005000
    220c:	200002f0 	.word	0x200002f0
    2210:	00000201 	.word	0x00000201
    2214:	200001f0 	.word	0x200001f0
    2218:	40000800 	.word	0x40000800
    221c:	00001bf5 	.word	0x00001bf5
    2220:	00001a11 	.word	0x00001a11
    2224:	00001981 	.word	0x00001981
    2228:	00001ae5 	.word	0x00001ae5
    222c:	00001c4d 	.word	0x00001c4d
    2230:	41005109 	.word	0x41005109
    2234:	00001ddd 	.word	0x00001ddd

00002238 <_usb_d_dev_init>:
{
    2238:	b500      	push	{lr}
    223a:	b083      	sub	sp, #12
	const uint8_t spdconf[4] = {
    223c:	2200      	movs	r2, #0
    223e:	ab01      	add	r3, sp, #4
    2240:	705a      	strb	r2, [r3, #1]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    2242:	4b21      	ldr	r3, [pc, #132]	; (22c8 <_usb_d_dev_init+0x90>)
    2244:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    2246:	07db      	lsls	r3, r3, #31
    2248:	d41b      	bmi.n	2282 <_usb_d_dev_init+0x4a>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    224a:	4b1f      	ldr	r3, [pc, #124]	; (22c8 <_usb_d_dev_init+0x90>)
    224c:	789b      	ldrb	r3, [r3, #2]
    224e:	079b      	lsls	r3, r3, #30
    2250:	d1fb      	bne.n	224a <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    2252:	4b1d      	ldr	r3, [pc, #116]	; (22c8 <_usb_d_dev_init+0x90>)
    2254:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    2256:	079b      	lsls	r3, r3, #30
    2258:	d50c      	bpl.n	2274 <_usb_d_dev_init+0x3c>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    225a:	4a1b      	ldr	r2, [pc, #108]	; (22c8 <_usb_d_dev_init+0x90>)
    225c:	7813      	ldrb	r3, [r2, #0]
    225e:	2102      	movs	r1, #2
    2260:	438b      	bics	r3, r1
    2262:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2264:	4b18      	ldr	r3, [pc, #96]	; (22c8 <_usb_d_dev_init+0x90>)
    2266:	789b      	ldrb	r3, [r3, #2]
    2268:	079b      	lsls	r3, r3, #30
    226a:	d1fb      	bne.n	2264 <_usb_d_dev_init+0x2c>
    226c:	4b16      	ldr	r3, [pc, #88]	; (22c8 <_usb_d_dev_init+0x90>)
    226e:	789b      	ldrb	r3, [r3, #2]
    2270:	079b      	lsls	r3, r3, #30
    2272:	d4fb      	bmi.n	226c <_usb_d_dev_init+0x34>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    2274:	2201      	movs	r2, #1
    2276:	4b14      	ldr	r3, [pc, #80]	; (22c8 <_usb_d_dev_init+0x90>)
    2278:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    227a:	4b13      	ldr	r3, [pc, #76]	; (22c8 <_usb_d_dev_init+0x90>)
    227c:	789b      	ldrb	r3, [r3, #2]
    227e:	079b      	lsls	r3, r3, #30
    2280:	d1fb      	bne.n	227a <_usb_d_dev_init+0x42>
    2282:	4b11      	ldr	r3, [pc, #68]	; (22c8 <_usb_d_dev_init+0x90>)
    2284:	789b      	ldrb	r3, [r3, #2]
    2286:	07db      	lsls	r3, r3, #31
    2288:	d4fb      	bmi.n	2282 <_usb_d_dev_init+0x4a>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    228a:	4b10      	ldr	r3, [pc, #64]	; (22cc <_usb_d_dev_init+0x94>)
    228c:	4a10      	ldr	r2, [pc, #64]	; (22d0 <_usb_d_dev_init+0x98>)
    228e:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    2290:	605a      	str	r2, [r3, #4]
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    2292:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    2294:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    2296:	611a      	str	r2, [r3, #16]
	_usb_d_dev_reset_epts();
    2298:	4b0e      	ldr	r3, [pc, #56]	; (22d4 <_usb_d_dev_init+0x9c>)
    229a:	4798      	blx	r3
	_usb_load_calib();
    229c:	4b0e      	ldr	r3, [pc, #56]	; (22d8 <_usb_d_dev_init+0xa0>)
    229e:	4798      	blx	r3
	((Usb *)hw)->HOST.CTRLA.reg = data;
    22a0:	2204      	movs	r2, #4
    22a2:	4b09      	ldr	r3, [pc, #36]	; (22c8 <_usb_d_dev_init+0x90>)
    22a4:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    22a6:	4b08      	ldr	r3, [pc, #32]	; (22c8 <_usb_d_dev_init+0x90>)
    22a8:	789b      	ldrb	r3, [r3, #2]
    22aa:	079b      	lsls	r3, r3, #30
    22ac:	d1fb      	bne.n	22a6 <_usb_d_dev_init+0x6e>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    22ae:	4a06      	ldr	r2, [pc, #24]	; (22c8 <_usb_d_dev_init+0x90>)
    22b0:	4b0a      	ldr	r3, [pc, #40]	; (22dc <_usb_d_dev_init+0xa4>)
    22b2:	6253      	str	r3, [r2, #36]	; 0x24
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    22b4:	ab01      	add	r3, sp, #4
    22b6:	785b      	ldrb	r3, [r3, #1]
    22b8:	2101      	movs	r1, #1
    22ba:	430b      	orrs	r3, r1
    22bc:	b2db      	uxtb	r3, r3
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    22be:	8113      	strh	r3, [r2, #8]
}
    22c0:	2000      	movs	r0, #0
    22c2:	b003      	add	sp, #12
    22c4:	bd00      	pop	{pc}
    22c6:	46c0      	nop			; (mov r8, r8)
    22c8:	41005000 	.word	0x41005000
    22cc:	200002f0 	.word	0x200002f0
    22d0:	00001929 	.word	0x00001929
    22d4:	00001bf5 	.word	0x00001bf5
    22d8:	0000192d 	.word	0x0000192d
    22dc:	200001f0 	.word	0x200001f0

000022e0 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    22e0:	4b10      	ldr	r3, [pc, #64]	; (2324 <_usb_d_dev_enable+0x44>)
    22e2:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    22e4:	079b      	lsls	r3, r3, #30
    22e6:	d119      	bne.n	231c <_usb_d_dev_enable+0x3c>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    22e8:	4b0e      	ldr	r3, [pc, #56]	; (2324 <_usb_d_dev_enable+0x44>)
    22ea:	789b      	ldrb	r3, [r3, #2]
    22ec:	079b      	lsls	r3, r3, #30
    22ee:	d1fb      	bne.n	22e8 <_usb_d_dev_enable+0x8>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    22f0:	4b0c      	ldr	r3, [pc, #48]	; (2324 <_usb_d_dev_enable+0x44>)
    22f2:	781b      	ldrb	r3, [r3, #0]
    22f4:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    22f6:	079a      	lsls	r2, r3, #30
    22f8:	d408      	bmi.n	230c <_usb_d_dev_enable+0x2c>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    22fa:	2202      	movs	r2, #2
    22fc:	4313      	orrs	r3, r2
    22fe:	b2db      	uxtb	r3, r3
	((Usb *)hw)->HOST.CTRLA.reg = data;
    2300:	4a08      	ldr	r2, [pc, #32]	; (2324 <_usb_d_dev_enable+0x44>)
    2302:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2304:	4b07      	ldr	r3, [pc, #28]	; (2324 <_usb_d_dev_enable+0x44>)
    2306:	789b      	ldrb	r3, [r3, #2]
    2308:	079b      	lsls	r3, r3, #30
    230a:	d1fb      	bne.n	2304 <_usb_d_dev_enable+0x24>
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    230c:	2280      	movs	r2, #128	; 0x80
    230e:	4b06      	ldr	r3, [pc, #24]	; (2328 <_usb_d_dev_enable+0x48>)
    2310:	601a      	str	r2, [r3, #0]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2312:	4a06      	ldr	r2, [pc, #24]	; (232c <_usb_d_dev_enable+0x4c>)
    2314:	4b03      	ldr	r3, [pc, #12]	; (2324 <_usb_d_dev_enable+0x44>)
    2316:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    2318:	2000      	movs	r0, #0
}
    231a:	4770      	bx	lr
		return -USB_ERR_DENIED;
    231c:	2011      	movs	r0, #17
    231e:	4240      	negs	r0, r0
    2320:	e7fb      	b.n	231a <_usb_d_dev_enable+0x3a>
    2322:	46c0      	nop			; (mov r8, r8)
    2324:	41005000 	.word	0x41005000
    2328:	e000e100 	.word	0xe000e100
    232c:	0000028d 	.word	0x0000028d

00002330 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    2330:	4a02      	ldr	r2, [pc, #8]	; (233c <_usb_d_dev_attach+0xc>)
    2332:	8913      	ldrh	r3, [r2, #8]
    2334:	2101      	movs	r1, #1
    2336:	438b      	bics	r3, r1
    2338:	8113      	strh	r3, [r2, #8]
}
    233a:	4770      	bx	lr
    233c:	41005000 	.word	0x41005000

00002340 <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    2340:	2380      	movs	r3, #128	; 0x80
    2342:	425b      	negs	r3, r3
    2344:	4318      	orrs	r0, r3
    2346:	b2c0      	uxtb	r0, r0
	((Usb *)hw)->DEVICE.DADD.reg = data;
    2348:	4b01      	ldr	r3, [pc, #4]	; (2350 <_usb_d_dev_set_address+0x10>)
    234a:	7298      	strb	r0, [r3, #10]
}
    234c:	4770      	bx	lr
    234e:	46c0      	nop			; (mov r8, r8)
    2350:	41005000 	.word	0x41005000

00002354 <_usb_d_dev_ep_init>:
{
    2354:	b5f0      	push	{r4, r5, r6, r7, lr}
    2356:	46c6      	mov	lr, r8
    2358:	b500      	push	{lr}
    235a:	4690      	mov	r8, r2
	uint8_t               epn = USB_EP_GET_N(ep);
    235c:	230f      	movs	r3, #15
    235e:	4003      	ands	r3, r0
    2360:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2362:	2b00      	cmp	r3, #0
    2364:	d005      	beq.n	2372 <_usb_d_dev_ep_init+0x1e>
    2366:	2f00      	cmp	r7, #0
    2368:	db01      	blt.n	236e <_usb_d_dev_ep_init+0x1a>
    236a:	001d      	movs	r5, r3
    236c:	e002      	b.n	2374 <_usb_d_dev_ep_init+0x20>
    236e:	1ddd      	adds	r5, r3, #7
    2370:	e000      	b.n	2374 <_usb_d_dev_ep_init+0x20>
    2372:	001d      	movs	r5, r3
	return &dev_inst.ep[ep_index];
    2374:	002e      	movs	r6, r5
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    2376:	2403      	movs	r4, #3
    2378:	4021      	ands	r1, r4
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    237a:	001c      	movs	r4, r3
	if (epn > CONF_USB_D_MAX_EP_N) {
    237c:	2b07      	cmp	r3, #7
    237e:	d900      	bls.n	2382 <_usb_d_dev_ep_init+0x2e>
    2380:	e070      	b.n	2464 <_usb_d_dev_ep_init+0x110>
	if (ept->ep != 0xFF) {
    2382:	00aa      	lsls	r2, r5, #2
    2384:	4694      	mov	ip, r2
    2386:	4465      	add	r5, ip
    2388:	00aa      	lsls	r2, r5, #2
    238a:	4694      	mov	ip, r2
    238c:	4d3d      	ldr	r5, [pc, #244]	; (2484 <_usb_d_dev_ep_init+0x130>)
    238e:	4465      	add	r5, ip
    2390:	3526      	adds	r5, #38	; 0x26
    2392:	782d      	ldrb	r5, [r5, #0]
    2394:	2dff      	cmp	r5, #255	; 0xff
    2396:	d168      	bne.n	246a <_usb_d_dev_ep_init+0x116>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    2398:	2900      	cmp	r1, #0
    239a:	d116      	bne.n	23ca <_usb_d_dev_ep_init+0x76>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    239c:	2b00      	cmp	r3, #0
    239e:	d003      	beq.n	23a8 <_usb_d_dev_ep_init+0x54>
    23a0:	2f00      	cmp	r7, #0
    23a2:	db01      	blt.n	23a8 <_usb_d_dev_ep_init+0x54>
    23a4:	3307      	adds	r3, #7
    23a6:	b2db      	uxtb	r3, r3
		if (ept_in->ep != 0xFF) {
    23a8:	009d      	lsls	r5, r3, #2
    23aa:	18eb      	adds	r3, r5, r3
    23ac:	009d      	lsls	r5, r3, #2
    23ae:	4b35      	ldr	r3, [pc, #212]	; (2484 <_usb_d_dev_ep_init+0x130>)
    23b0:	195b      	adds	r3, r3, r5
    23b2:	3326      	adds	r3, #38	; 0x26
    23b4:	781b      	ldrb	r3, [r3, #0]
    23b6:	2bff      	cmp	r3, #255	; 0xff
    23b8:	d15a      	bne.n	2470 <_usb_d_dev_ep_init+0x11c>
		if (pcfg->cache == NULL) {
    23ba:	0063      	lsls	r3, r4, #1
    23bc:	191b      	adds	r3, r3, r4
    23be:	009d      	lsls	r5, r3, #2
    23c0:	4b31      	ldr	r3, [pc, #196]	; (2488 <_usb_d_dev_ep_init+0x134>)
    23c2:	195b      	adds	r3, r3, r5
    23c4:	689b      	ldr	r3, [r3, #8]
    23c6:	2b00      	cmp	r3, #0
    23c8:	d055      	beq.n	2476 <_usb_d_dev_ep_init+0x122>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    23ca:	2f00      	cmp	r7, #0
    23cc:	db31      	blt.n	2432 <_usb_d_dev_ep_init+0xde>
    23ce:	0063      	lsls	r3, r4, #1
    23d0:	191b      	adds	r3, r3, r4
    23d2:	009d      	lsls	r5, r3, #2
    23d4:	4b2c      	ldr	r3, [pc, #176]	; (2488 <_usb_d_dev_ep_init+0x134>)
    23d6:	195b      	adds	r3, r3, r5
    23d8:	689b      	ldr	r3, [r3, #8]
    23da:	1e5d      	subs	r5, r3, #1
    23dc:	41ab      	sbcs	r3, r5
    23de:	b2db      	uxtb	r3, r3
    23e0:	2b00      	cmp	r3, #0
    23e2:	d009      	beq.n	23f8 <_usb_d_dev_ep_init+0xa4>
    23e4:	2f00      	cmp	r7, #0
    23e6:	db2e      	blt.n	2446 <_usb_d_dev_ep_init+0xf2>
    23e8:	0063      	lsls	r3, r4, #1
    23ea:	191b      	adds	r3, r3, r4
    23ec:	009d      	lsls	r5, r3, #2
    23ee:	4b26      	ldr	r3, [pc, #152]	; (2488 <_usb_d_dev_ep_init+0x134>)
    23f0:	195b      	adds	r3, r3, r5
    23f2:	8a1b      	ldrh	r3, [r3, #16]
    23f4:	4543      	cmp	r3, r8
    23f6:	db41      	blt.n	247c <_usb_d_dev_ep_init+0x128>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    23f8:	2f00      	cmp	r7, #0
    23fa:	db2b      	blt.n	2454 <_usb_d_dev_ep_init+0x100>
    23fc:	0063      	lsls	r3, r4, #1
    23fe:	191c      	adds	r4, r3, r4
    2400:	00a5      	lsls	r5, r4, #2
    2402:	4b21      	ldr	r3, [pc, #132]	; (2488 <_usb_d_dev_ep_init+0x134>)
    2404:	195b      	adds	r3, r3, r5
    2406:	689b      	ldr	r3, [r3, #8]
    2408:	469c      	mov	ip, r3
    240a:	4c1e      	ldr	r4, [pc, #120]	; (2484 <_usb_d_dev_ep_init+0x130>)
    240c:	00b5      	lsls	r5, r6, #2
    240e:	19af      	adds	r7, r5, r6
    2410:	00bb      	lsls	r3, r7, #2
    2412:	001f      	movs	r7, r3
    2414:	18e3      	adds	r3, r4, r3
    2416:	4662      	mov	r2, ip
    2418:	621a      	str	r2, [r3, #32]
	ept->size     = max_pkt_siz;
    241a:	4642      	mov	r2, r8
    241c:	849a      	strh	r2, [r3, #36]	; 0x24
	ept->flags.u8 = (ep_type + 1);
    241e:	3101      	adds	r1, #1
    2420:	3327      	adds	r3, #39	; 0x27
    2422:	7019      	strb	r1, [r3, #0]
	ept->ep       = ep;
    2424:	19e4      	adds	r4, r4, r7
    2426:	3426      	adds	r4, #38	; 0x26
    2428:	7020      	strb	r0, [r4, #0]
	return USB_OK;
    242a:	2000      	movs	r0, #0
}
    242c:	bc04      	pop	{r2}
    242e:	4690      	mov	r8, r2
    2430:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    2432:	0063      	lsls	r3, r4, #1
    2434:	191b      	adds	r3, r3, r4
    2436:	009d      	lsls	r5, r3, #2
    2438:	4b13      	ldr	r3, [pc, #76]	; (2488 <_usb_d_dev_ep_init+0x134>)
    243a:	195b      	adds	r3, r3, r5
    243c:	68db      	ldr	r3, [r3, #12]
    243e:	1e5d      	subs	r5, r3, #1
    2440:	41ab      	sbcs	r3, r5
    2442:	b2db      	uxtb	r3, r3
    2444:	e7cc      	b.n	23e0 <_usb_d_dev_ep_init+0x8c>
    2446:	0063      	lsls	r3, r4, #1
    2448:	191b      	adds	r3, r3, r4
    244a:	009d      	lsls	r5, r3, #2
    244c:	4b0e      	ldr	r3, [pc, #56]	; (2488 <_usb_d_dev_ep_init+0x134>)
    244e:	195b      	adds	r3, r3, r5
    2450:	8a5b      	ldrh	r3, [r3, #18]
    2452:	e7cf      	b.n	23f4 <_usb_d_dev_ep_init+0xa0>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    2454:	0063      	lsls	r3, r4, #1
    2456:	191c      	adds	r4, r3, r4
    2458:	00a5      	lsls	r5, r4, #2
    245a:	4b0b      	ldr	r3, [pc, #44]	; (2488 <_usb_d_dev_ep_init+0x134>)
    245c:	195b      	adds	r3, r3, r5
    245e:	68db      	ldr	r3, [r3, #12]
    2460:	469c      	mov	ip, r3
    2462:	e7d2      	b.n	240a <_usb_d_dev_ep_init+0xb6>
		return -USB_ERR_PARAM;
    2464:	2012      	movs	r0, #18
    2466:	4240      	negs	r0, r0
    2468:	e7e0      	b.n	242c <_usb_d_dev_ep_init+0xd8>
		return -USB_ERR_REDO;
    246a:	2014      	movs	r0, #20
    246c:	4240      	negs	r0, r0
    246e:	e7dd      	b.n	242c <_usb_d_dev_ep_init+0xd8>
			return -USB_ERR_REDO;
    2470:	2014      	movs	r0, #20
    2472:	4240      	negs	r0, r0
    2474:	e7da      	b.n	242c <_usb_d_dev_ep_init+0xd8>
			return -USB_ERR_FUNC;
    2476:	2013      	movs	r0, #19
    2478:	4240      	negs	r0, r0
    247a:	e7d7      	b.n	242c <_usb_d_dev_ep_init+0xd8>
		return -USB_ERR_FUNC;
    247c:	2013      	movs	r0, #19
    247e:	4240      	negs	r0, r0
    2480:	e7d4      	b.n	242c <_usb_d_dev_ep_init+0xd8>
    2482:	46c0      	nop			; (mov r8, r8)
    2484:	200002f0 	.word	0x200002f0
    2488:	00004294 	.word	0x00004294

0000248c <_usb_d_dev_ep_deinit>:
{
    248c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    248e:	0005      	movs	r5, r0
	uint8_t               epn = USB_EP_GET_N(ep);
    2490:	240f      	movs	r4, #15
    2492:	4004      	ands	r4, r0
    2494:	b247      	sxtb	r7, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    2496:	0ff9      	lsrs	r1, r7, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2498:	2c00      	cmp	r4, #0
    249a:	d005      	beq.n	24a8 <_usb_d_dev_ep_deinit+0x1c>
    249c:	2f00      	cmp	r7, #0
    249e:	db01      	blt.n	24a4 <_usb_d_dev_ep_deinit+0x18>
    24a0:	0022      	movs	r2, r4
    24a2:	e002      	b.n	24aa <_usb_d_dev_ep_deinit+0x1e>
    24a4:	1de2      	adds	r2, r4, #7
    24a6:	e000      	b.n	24aa <_usb_d_dev_ep_deinit+0x1e>
    24a8:	0022      	movs	r2, r4
	return &dev_inst.ep[ep_index];
    24aa:	0016      	movs	r6, r2
    24ac:	0093      	lsls	r3, r2, #2
    24ae:	189b      	adds	r3, r3, r2
    24b0:	0098      	lsls	r0, r3, #2
    24b2:	3010      	adds	r0, #16
    24b4:	4b21      	ldr	r3, [pc, #132]	; (253c <_usb_d_dev_ep_deinit+0xb0>)
    24b6:	1818      	adds	r0, r3, r0
    24b8:	3004      	adds	r0, #4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    24ba:	2c07      	cmp	r4, #7
    24bc:	d82e      	bhi.n	251c <_usb_d_dev_ep_deinit+0x90>
    24be:	0093      	lsls	r3, r2, #2
    24c0:	189a      	adds	r2, r3, r2
    24c2:	0093      	lsls	r3, r2, #2
    24c4:	469c      	mov	ip, r3
    24c6:	4b1d      	ldr	r3, [pc, #116]	; (253c <_usb_d_dev_ep_deinit+0xb0>)
    24c8:	4463      	add	r3, ip
    24ca:	3326      	adds	r3, #38	; 0x26
    24cc:	781b      	ldrb	r3, [r3, #0]
    24ce:	2bff      	cmp	r3, #255	; 0xff
    24d0:	d024      	beq.n	251c <_usb_d_dev_ep_deinit+0x90>
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    24d2:	2203      	movs	r2, #3
    24d4:	4b1a      	ldr	r3, [pc, #104]	; (2540 <_usb_d_dev_ep_deinit+0xb4>)
    24d6:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    24d8:	00b2      	lsls	r2, r6, #2
    24da:	1992      	adds	r2, r2, r6
    24dc:	0091      	lsls	r1, r2, #2
    24de:	4b17      	ldr	r3, [pc, #92]	; (253c <_usb_d_dev_ep_deinit+0xb0>)
    24e0:	185b      	adds	r3, r3, r1
    24e2:	3320      	adds	r3, #32
    24e4:	79da      	ldrb	r2, [r3, #7]
    24e6:	2307      	movs	r3, #7
    24e8:	4013      	ands	r3, r2
    24ea:	2b01      	cmp	r3, #1
    24ec:	d017      	beq.n	251e <_usb_d_dev_ep_deinit+0x92>
	} else if (USB_EP_GET_DIR(ep)) {
    24ee:	2f00      	cmp	r7, #0
    24f0:	db1b      	blt.n	252a <_usb_d_dev_ep_deinit+0x9e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    24f2:	4a14      	ldr	r2, [pc, #80]	; (2544 <_usb_d_dev_ep_deinit+0xb8>)
    24f4:	3508      	adds	r5, #8
    24f6:	016d      	lsls	r5, r5, #5
    24f8:	5cab      	ldrb	r3, [r5, r2]
    24fa:	2107      	movs	r1, #7
    24fc:	438b      	bics	r3, r1
    24fe:	54ab      	strb	r3, [r5, r2]
	ept->flags.u8 = 0;
    2500:	4b0e      	ldr	r3, [pc, #56]	; (253c <_usb_d_dev_ep_deinit+0xb0>)
    2502:	00b1      	lsls	r1, r6, #2
    2504:	1988      	adds	r0, r1, r6
    2506:	0082      	lsls	r2, r0, #2
    2508:	189a      	adds	r2, r3, r2
    250a:	3227      	adds	r2, #39	; 0x27
    250c:	2000      	movs	r0, #0
    250e:	7010      	strb	r0, [r2, #0]
	ept->ep       = 0xFF;
    2510:	198e      	adds	r6, r1, r6
    2512:	00b2      	lsls	r2, r6, #2
    2514:	189b      	adds	r3, r3, r2
    2516:	3326      	adds	r3, #38	; 0x26
    2518:	22ff      	movs	r2, #255	; 0xff
    251a:	701a      	strb	r2, [r3, #0]
}
    251c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    251e:	3508      	adds	r5, #8
    2520:	016d      	lsls	r5, r5, #5
    2522:	2200      	movs	r2, #0
    2524:	4b07      	ldr	r3, [pc, #28]	; (2544 <_usb_d_dev_ep_deinit+0xb8>)
    2526:	54ea      	strb	r2, [r5, r3]
    2528:	e7ea      	b.n	2500 <_usb_d_dev_ep_deinit+0x74>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    252a:	4a06      	ldr	r2, [pc, #24]	; (2544 <_usb_d_dev_ep_deinit+0xb8>)
    252c:	3408      	adds	r4, #8
    252e:	0164      	lsls	r4, r4, #5
    2530:	5ca3      	ldrb	r3, [r4, r2]
    2532:	2170      	movs	r1, #112	; 0x70
    2534:	438b      	bics	r3, r1
    2536:	54a3      	strb	r3, [r4, r2]
    2538:	e7e2      	b.n	2500 <_usb_d_dev_ep_deinit+0x74>
    253a:	46c0      	nop			; (mov r8, r8)
    253c:	200002f0 	.word	0x200002f0
    2540:	00001a69 	.word	0x00001a69
    2544:	41005000 	.word	0x41005000

00002548 <_usb_d_dev_ep_enable>:
{
    2548:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn   = USB_EP_GET_N(ep);
    254a:	230f      	movs	r3, #15
    254c:	4003      	ands	r3, r0
    254e:	b240      	sxtb	r0, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2550:	2b00      	cmp	r3, #0
    2552:	d005      	beq.n	2560 <_usb_d_dev_ep_enable+0x18>
    2554:	2800      	cmp	r0, #0
    2556:	db01      	blt.n	255c <_usb_d_dev_ep_enable+0x14>
    2558:	001e      	movs	r6, r3
    255a:	e002      	b.n	2562 <_usb_d_dev_ep_enable+0x1a>
    255c:	1dde      	adds	r6, r3, #7
    255e:	e000      	b.n	2562 <_usb_d_dev_ep_enable+0x1a>
    2560:	001e      	movs	r6, r3
	return &dev_inst.ep[ep_index];
    2562:	0032      	movs	r2, r6
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    2564:	0019      	movs	r1, r3
    2566:	3108      	adds	r1, #8
    2568:	0149      	lsls	r1, r1, #5
    256a:	4caf      	ldr	r4, [pc, #700]	; (2828 <_usb_d_dev_ep_enable+0x2e0>)
    256c:	5d0c      	ldrb	r4, [r1, r4]
    256e:	b2e4      	uxtb	r4, r4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    2570:	2b07      	cmp	r3, #7
    2572:	d900      	bls.n	2576 <_usb_d_dev_ep_enable+0x2e>
    2574:	e148      	b.n	2808 <_usb_d_dev_ep_enable+0x2c0>
    2576:	00b5      	lsls	r5, r6, #2
    2578:	19ad      	adds	r5, r5, r6
    257a:	00ae      	lsls	r6, r5, #2
    257c:	49ab      	ldr	r1, [pc, #684]	; (282c <_usb_d_dev_ep_enable+0x2e4>)
    257e:	1989      	adds	r1, r1, r6
    2580:	3126      	adds	r1, #38	; 0x26
    2582:	7809      	ldrb	r1, [r1, #0]
    2584:	29ff      	cmp	r1, #255	; 0xff
    2586:	d100      	bne.n	258a <_usb_d_dev_ep_enable+0x42>
    2588:	e141      	b.n	280e <_usb_d_dev_ep_enable+0x2c6>
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    258a:	0159      	lsls	r1, r3, #5
    258c:	4ea8      	ldr	r6, [pc, #672]	; (2830 <_usb_d_dev_ep_enable+0x2e8>)
    258e:	1876      	adds	r6, r6, r1
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    2590:	0095      	lsls	r5, r2, #2
    2592:	18ad      	adds	r5, r5, r2
    2594:	00af      	lsls	r7, r5, #2
    2596:	49a5      	ldr	r1, [pc, #660]	; (282c <_usb_d_dev_ep_enable+0x2e4>)
    2598:	19c9      	adds	r1, r1, r7
    259a:	3120      	adds	r1, #32
    259c:	79cd      	ldrb	r5, [r1, #7]
    259e:	2107      	movs	r1, #7
    25a0:	4029      	ands	r1, r5
    25a2:	2901      	cmp	r1, #1
    25a4:	d036      	beq.n	2614 <_usb_d_dev_ep_enable+0xcc>
	} else if (dir) {
    25a6:	2800      	cmp	r0, #0
    25a8:	da00      	bge.n	25ac <_usb_d_dev_ep_enable+0x64>
    25aa:	e0c5      	b.n	2738 <_usb_d_dev_ep_enable+0x1f0>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    25ac:	0761      	lsls	r1, r4, #29
    25ae:	d000      	beq.n	25b2 <_usb_d_dev_ep_enable+0x6a>
    25b0:	e136      	b.n	2820 <_usb_d_dev_ep_enable+0x2d8>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    25b2:	489e      	ldr	r0, [pc, #632]	; (282c <_usb_d_dev_ep_enable+0x2e4>)
    25b4:	0095      	lsls	r5, r2, #2
    25b6:	18af      	adds	r7, r5, r2
    25b8:	00b9      	lsls	r1, r7, #2
    25ba:	1841      	adds	r1, r0, r1
    25bc:	3120      	adds	r1, #32
    25be:	79c9      	ldrb	r1, [r1, #7]
    25c0:	0749      	lsls	r1, r1, #29
    25c2:	0f49      	lsrs	r1, r1, #29
    25c4:	430c      	orrs	r4, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    25c6:	0019      	movs	r1, r3
    25c8:	3108      	adds	r1, #8
    25ca:	0149      	lsls	r1, r1, #5
    25cc:	4f96      	ldr	r7, [pc, #600]	; (2828 <_usb_d_dev_ep_enable+0x2e0>)
    25ce:	55cc      	strb	r4, [r1, r7]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    25d0:	18aa      	adds	r2, r5, r2
    25d2:	0091      	lsls	r1, r2, #2
    25d4:	1840      	adds	r0, r0, r1
    25d6:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    25d8:	0382      	lsls	r2, r0, #14
    25da:	4996      	ldr	r1, [pc, #600]	; (2834 <_usb_d_dev_ep_enable+0x2ec>)
    25dc:	400a      	ands	r2, r1
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    25de:	2180      	movs	r1, #128	; 0x80
    25e0:	0089      	lsls	r1, r1, #2
    25e2:	4288      	cmp	r0, r1
    25e4:	d900      	bls.n	25e8 <_usb_d_dev_ep_enable+0xa0>
    25e6:	e0f2      	b.n	27ce <_usb_d_dev_ep_enable+0x286>
    25e8:	3901      	subs	r1, #1
    25ea:	39ff      	subs	r1, #255	; 0xff
    25ec:	4288      	cmp	r0, r1
    25ee:	d900      	bls.n	25f2 <_usb_d_dev_ep_enable+0xaa>
    25f0:	e100      	b.n	27f4 <_usb_d_dev_ep_enable+0x2ac>
    25f2:	2880      	cmp	r0, #128	; 0x80
    25f4:	d900      	bls.n	25f8 <_usb_d_dev_ep_enable+0xb0>
    25f6:	e0ff      	b.n	27f8 <_usb_d_dev_ep_enable+0x2b0>
    25f8:	2840      	cmp	r0, #64	; 0x40
    25fa:	d900      	bls.n	25fe <_usb_d_dev_ep_enable+0xb6>
    25fc:	e0fe      	b.n	27fc <_usb_d_dev_ep_enable+0x2b4>
    25fe:	2820      	cmp	r0, #32
    2600:	d900      	bls.n	2604 <_usb_d_dev_ep_enable+0xbc>
    2602:	e0fd      	b.n	2800 <_usb_d_dev_ep_enable+0x2b8>
    2604:	2810      	cmp	r0, #16
    2606:	d900      	bls.n	260a <_usb_d_dev_ep_enable+0xc2>
    2608:	e0fc      	b.n	2804 <_usb_d_dev_ep_enable+0x2bc>
    260a:	39f8      	subs	r1, #248	; 0xf8
    260c:	4281      	cmp	r1, r0
    260e:	4189      	sbcs	r1, r1
    2610:	4249      	negs	r1, r1
    2612:	e0dd      	b.n	27d0 <_usb_d_dev_ep_enable+0x288>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    2614:	3176      	adds	r1, #118	; 0x76
    2616:	4221      	tst	r1, r4
    2618:	d000      	beq.n	261c <_usb_d_dev_ep_enable+0xd4>
    261a:	e0fb      	b.n	2814 <_usb_d_dev_ep_enable+0x2cc>
    261c:	0019      	movs	r1, r3
    261e:	3108      	adds	r1, #8
    2620:	0149      	lsls	r1, r1, #5
    2622:	2411      	movs	r4, #17
    2624:	4880      	ldr	r0, [pc, #512]	; (2828 <_usb_d_dev_ep_enable+0x2e0>)
    2626:	540c      	strb	r4, [r1, r0]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2628:	4980      	ldr	r1, [pc, #512]	; (282c <_usb_d_dev_ep_enable+0x2e4>)
    262a:	19c9      	adds	r1, r1, r7
    262c:	8c89      	ldrh	r1, [r1, #36]	; 0x24
    262e:	0388      	lsls	r0, r1, #14
    2630:	4c80      	ldr	r4, [pc, #512]	; (2834 <_usb_d_dev_ep_enable+0x2ec>)
    2632:	4020      	ands	r0, r4
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2634:	2480      	movs	r4, #128	; 0x80
    2636:	00a4      	lsls	r4, r4, #2
    2638:	42a1      	cmp	r1, r4
    263a:	d810      	bhi.n	265e <_usb_d_dev_ep_enable+0x116>
    263c:	3c01      	subs	r4, #1
    263e:	3cff      	subs	r4, #255	; 0xff
    2640:	42a1      	cmp	r1, r4
    2642:	d827      	bhi.n	2694 <_usb_d_dev_ep_enable+0x14c>
    2644:	2980      	cmp	r1, #128	; 0x80
    2646:	d827      	bhi.n	2698 <_usb_d_dev_ep_enable+0x150>
    2648:	2940      	cmp	r1, #64	; 0x40
    264a:	d827      	bhi.n	269c <_usb_d_dev_ep_enable+0x154>
    264c:	2920      	cmp	r1, #32
    264e:	d827      	bhi.n	26a0 <_usb_d_dev_ep_enable+0x158>
    2650:	2910      	cmp	r1, #16
    2652:	d827      	bhi.n	26a4 <_usb_d_dev_ep_enable+0x15c>
    2654:	3cf8      	subs	r4, #248	; 0xf8
    2656:	428c      	cmp	r4, r1
    2658:	41a4      	sbcs	r4, r4
    265a:	4264      	negs	r4, r4
    265c:	e000      	b.n	2660 <_usb_d_dev_ep_enable+0x118>
    265e:	2407      	movs	r4, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2660:	0724      	lsls	r4, r4, #28
    2662:	4320      	orrs	r0, r4
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2664:	6070      	str	r0, [r6, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2666:	0488      	lsls	r0, r1, #18
    2668:	0c80      	lsrs	r0, r0, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    266a:	2480      	movs	r4, #128	; 0x80
    266c:	00a4      	lsls	r4, r4, #2
    266e:	42a1      	cmp	r1, r4
    2670:	d81a      	bhi.n	26a8 <_usb_d_dev_ep_enable+0x160>
    2672:	3c01      	subs	r4, #1
    2674:	3cff      	subs	r4, #255	; 0xff
    2676:	42a1      	cmp	r1, r4
    2678:	d854      	bhi.n	2724 <_usb_d_dev_ep_enable+0x1dc>
    267a:	2980      	cmp	r1, #128	; 0x80
    267c:	d854      	bhi.n	2728 <_usb_d_dev_ep_enable+0x1e0>
    267e:	2940      	cmp	r1, #64	; 0x40
    2680:	d854      	bhi.n	272c <_usb_d_dev_ep_enable+0x1e4>
    2682:	2920      	cmp	r1, #32
    2684:	d854      	bhi.n	2730 <_usb_d_dev_ep_enable+0x1e8>
    2686:	2910      	cmp	r1, #16
    2688:	d854      	bhi.n	2734 <_usb_d_dev_ep_enable+0x1ec>
    268a:	3cf8      	subs	r4, #248	; 0xf8
    268c:	428c      	cmp	r4, r1
    268e:	4189      	sbcs	r1, r1
    2690:	4249      	negs	r1, r1
    2692:	e00a      	b.n	26aa <_usb_d_dev_ep_enable+0x162>
    2694:	2406      	movs	r4, #6
    2696:	e7e3      	b.n	2660 <_usb_d_dev_ep_enable+0x118>
    2698:	2405      	movs	r4, #5
    269a:	e7e1      	b.n	2660 <_usb_d_dev_ep_enable+0x118>
    269c:	2404      	movs	r4, #4
    269e:	e7df      	b.n	2660 <_usb_d_dev_ep_enable+0x118>
    26a0:	2403      	movs	r4, #3
    26a2:	e7dd      	b.n	2660 <_usb_d_dev_ep_enable+0x118>
    26a4:	2402      	movs	r4, #2
    26a6:	e7db      	b.n	2660 <_usb_d_dev_ep_enable+0x118>
    26a8:	2107      	movs	r1, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    26aa:	0709      	lsls	r1, r1, #28
    26ac:	4301      	orrs	r1, r0
    26ae:	6171      	str	r1, [r6, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    26b0:	0019      	movs	r1, r3
    26b2:	3108      	adds	r1, #8
    26b4:	0149      	lsls	r1, r1, #5
    26b6:	485c      	ldr	r0, [pc, #368]	; (2828 <_usb_d_dev_ep_enable+0x2e0>)
    26b8:	4684      	mov	ip, r0
    26ba:	4461      	add	r1, ip
    26bc:	2040      	movs	r0, #64	; 0x40
    26be:	7148      	strb	r0, [r1, #5]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    26c0:	2480      	movs	r4, #128	; 0x80
    26c2:	710c      	strb	r4, [r1, #4]
	bank->STATUS_BK.reg     = 0;
    26c4:	4d5a      	ldr	r5, [pc, #360]	; (2830 <_usb_d_dev_ep_enable+0x2e8>)
    26c6:	015b      	lsls	r3, r3, #5
    26c8:	18eb      	adds	r3, r5, r3
    26ca:	2100      	movs	r1, #0
    26cc:	7299      	strb	r1, [r3, #10]
    26ce:	7699      	strb	r1, [r3, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    26d0:	4e56      	ldr	r6, [pc, #344]	; (282c <_usb_d_dev_ep_enable+0x2e4>)
    26d2:	0094      	lsls	r4, r2, #2
    26d4:	18a3      	adds	r3, r4, r2
    26d6:	0099      	lsls	r1, r3, #2
    26d8:	1871      	adds	r1, r6, r1
    26da:	000b      	movs	r3, r1
    26dc:	3326      	adds	r3, #38	; 0x26
    26de:	781b      	ldrb	r3, [r3, #0]
    26e0:	270f      	movs	r7, #15
    26e2:	403b      	ands	r3, r7
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    26e4:	6a0f      	ldr	r7, [r1, #32]
	bank->ADDR.reg          = addr;
    26e6:	0159      	lsls	r1, r3, #5
    26e8:	514f      	str	r7, [r1, r5]
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    26ea:	18a2      	adds	r2, r4, r2
    26ec:	0094      	lsls	r4, r2, #2
    26ee:	1936      	adds	r6, r6, r4
    26f0:	8cb2      	ldrh	r2, [r6, #36]	; 0x24
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    26f2:	186c      	adds	r4, r5, r1
    26f4:	6865      	ldr	r5, [r4, #4]
    26f6:	0492      	lsls	r2, r2, #18
    26f8:	0912      	lsrs	r2, r2, #4
    26fa:	4e4f      	ldr	r6, [pc, #316]	; (2838 <_usb_d_dev_ep_enable+0x2f0>)
    26fc:	4035      	ands	r5, r6
    26fe:	432a      	orrs	r2, r5
    2700:	6062      	str	r2, [r4, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    2702:	6862      	ldr	r2, [r4, #4]
    2704:	0b92      	lsrs	r2, r2, #14
    2706:	0395      	lsls	r5, r2, #14
    2708:	6065      	str	r5, [r4, #4]
    270a:	3308      	adds	r3, #8
    270c:	015b      	lsls	r3, r3, #5
    270e:	4463      	add	r3, ip
    2710:	22b0      	movs	r2, #176	; 0xb0
    2712:	711a      	strb	r2, [r3, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2714:	7158      	strb	r0, [r3, #5]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    2716:	4b49      	ldr	r3, [pc, #292]	; (283c <_usb_d_dev_ep_enable+0x2f4>)
    2718:	469c      	mov	ip, r3
    271a:	4461      	add	r1, ip
    271c:	2310      	movs	r3, #16
    271e:	700b      	strb	r3, [r1, #0]
	return USB_OK;
    2720:	2000      	movs	r0, #0
    2722:	e066      	b.n	27f2 <_usb_d_dev_ep_enable+0x2aa>
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2724:	2106      	movs	r1, #6
    2726:	e7c0      	b.n	26aa <_usb_d_dev_ep_enable+0x162>
    2728:	2105      	movs	r1, #5
    272a:	e7be      	b.n	26aa <_usb_d_dev_ep_enable+0x162>
    272c:	2104      	movs	r1, #4
    272e:	e7bc      	b.n	26aa <_usb_d_dev_ep_enable+0x162>
    2730:	2103      	movs	r1, #3
    2732:	e7ba      	b.n	26aa <_usb_d_dev_ep_enable+0x162>
    2734:	2102      	movs	r1, #2
    2736:	e7b8      	b.n	26aa <_usb_d_dev_ep_enable+0x162>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    2738:	2170      	movs	r1, #112	; 0x70
    273a:	4221      	tst	r1, r4
    273c:	d000      	beq.n	2740 <_usb_d_dev_ep_enable+0x1f8>
    273e:	e06c      	b.n	281a <_usb_d_dev_ep_enable+0x2d2>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    2740:	483a      	ldr	r0, [pc, #232]	; (282c <_usb_d_dev_ep_enable+0x2e4>)
    2742:	0095      	lsls	r5, r2, #2
    2744:	18af      	adds	r7, r5, r2
    2746:	00b9      	lsls	r1, r7, #2
    2748:	1841      	adds	r1, r0, r1
    274a:	3120      	adds	r1, #32
    274c:	79c9      	ldrb	r1, [r1, #7]
    274e:	0749      	lsls	r1, r1, #29
    2750:	0e49      	lsrs	r1, r1, #25
    2752:	430c      	orrs	r4, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    2754:	0019      	movs	r1, r3
    2756:	3108      	adds	r1, #8
    2758:	0149      	lsls	r1, r1, #5
    275a:	4f33      	ldr	r7, [pc, #204]	; (2828 <_usb_d_dev_ep_enable+0x2e0>)
    275c:	55cc      	strb	r4, [r1, r7]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    275e:	18aa      	adds	r2, r5, r2
    2760:	0091      	lsls	r1, r2, #2
    2762:	1840      	adds	r0, r0, r1
    2764:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    2766:	048a      	lsls	r2, r1, #18
    2768:	0c92      	lsrs	r2, r2, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    276a:	2080      	movs	r0, #128	; 0x80
    276c:	0080      	lsls	r0, r0, #2
    276e:	4281      	cmp	r1, r0
    2770:	d810      	bhi.n	2794 <_usb_d_dev_ep_enable+0x24c>
    2772:	3801      	subs	r0, #1
    2774:	38ff      	subs	r0, #255	; 0xff
    2776:	4281      	cmp	r1, r0
    2778:	d81f      	bhi.n	27ba <_usb_d_dev_ep_enable+0x272>
    277a:	2980      	cmp	r1, #128	; 0x80
    277c:	d81f      	bhi.n	27be <_usb_d_dev_ep_enable+0x276>
    277e:	2940      	cmp	r1, #64	; 0x40
    2780:	d81f      	bhi.n	27c2 <_usb_d_dev_ep_enable+0x27a>
    2782:	2920      	cmp	r1, #32
    2784:	d81f      	bhi.n	27c6 <_usb_d_dev_ep_enable+0x27e>
    2786:	2910      	cmp	r1, #16
    2788:	d81f      	bhi.n	27ca <_usb_d_dev_ep_enable+0x282>
    278a:	38f8      	subs	r0, #248	; 0xf8
    278c:	4288      	cmp	r0, r1
    278e:	4189      	sbcs	r1, r1
    2790:	4249      	negs	r1, r1
    2792:	e000      	b.n	2796 <_usb_d_dev_ep_enable+0x24e>
    2794:	2107      	movs	r1, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2796:	0709      	lsls	r1, r1, #28
    2798:	430a      	orrs	r2, r1
    279a:	6172      	str	r2, [r6, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    279c:	001a      	movs	r2, r3
    279e:	3208      	adds	r2, #8
    27a0:	0152      	lsls	r2, r2, #5
    27a2:	4921      	ldr	r1, [pc, #132]	; (2828 <_usb_d_dev_ep_enable+0x2e0>)
    27a4:	468c      	mov	ip, r1
    27a6:	4462      	add	r2, ip
    27a8:	2180      	movs	r1, #128	; 0x80
    27aa:	7111      	strb	r1, [r2, #4]
	bank->STATUS_BK.reg     = 0;
    27ac:	015a      	lsls	r2, r3, #5
    27ae:	4b20      	ldr	r3, [pc, #128]	; (2830 <_usb_d_dev_ep_enable+0x2e8>)
    27b0:	189b      	adds	r3, r3, r2
    27b2:	2200      	movs	r2, #0
    27b4:	769a      	strb	r2, [r3, #26]
	return USB_OK;
    27b6:	2000      	movs	r0, #0
    27b8:	e01b      	b.n	27f2 <_usb_d_dev_ep_enable+0x2aa>
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    27ba:	2106      	movs	r1, #6
    27bc:	e7eb      	b.n	2796 <_usb_d_dev_ep_enable+0x24e>
    27be:	2105      	movs	r1, #5
    27c0:	e7e9      	b.n	2796 <_usb_d_dev_ep_enable+0x24e>
    27c2:	2104      	movs	r1, #4
    27c4:	e7e7      	b.n	2796 <_usb_d_dev_ep_enable+0x24e>
    27c6:	2103      	movs	r1, #3
    27c8:	e7e5      	b.n	2796 <_usb_d_dev_ep_enable+0x24e>
    27ca:	2102      	movs	r1, #2
    27cc:	e7e3      	b.n	2796 <_usb_d_dev_ep_enable+0x24e>
    27ce:	2107      	movs	r1, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    27d0:	0709      	lsls	r1, r1, #28
    27d2:	430a      	orrs	r2, r1
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    27d4:	6072      	str	r2, [r6, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    27d6:	001a      	movs	r2, r3
    27d8:	3208      	adds	r2, #8
    27da:	0152      	lsls	r2, r2, #5
    27dc:	4912      	ldr	r1, [pc, #72]	; (2828 <_usb_d_dev_ep_enable+0x2e0>)
    27de:	468c      	mov	ip, r1
    27e0:	4462      	add	r2, ip
    27e2:	2140      	movs	r1, #64	; 0x40
    27e4:	7151      	strb	r1, [r2, #5]
	bank->STATUS_BK.reg     = 0;
    27e6:	015b      	lsls	r3, r3, #5
    27e8:	4a11      	ldr	r2, [pc, #68]	; (2830 <_usb_d_dev_ep_enable+0x2e8>)
    27ea:	18d3      	adds	r3, r2, r3
    27ec:	2200      	movs	r2, #0
    27ee:	729a      	strb	r2, [r3, #10]
	return USB_OK;
    27f0:	2000      	movs	r0, #0
}
    27f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    27f4:	2106      	movs	r1, #6
    27f6:	e7eb      	b.n	27d0 <_usb_d_dev_ep_enable+0x288>
    27f8:	2105      	movs	r1, #5
    27fa:	e7e9      	b.n	27d0 <_usb_d_dev_ep_enable+0x288>
    27fc:	2104      	movs	r1, #4
    27fe:	e7e7      	b.n	27d0 <_usb_d_dev_ep_enable+0x288>
    2800:	2103      	movs	r1, #3
    2802:	e7e5      	b.n	27d0 <_usb_d_dev_ep_enable+0x288>
    2804:	2102      	movs	r1, #2
    2806:	e7e3      	b.n	27d0 <_usb_d_dev_ep_enable+0x288>
		return -USB_ERR_PARAM;
    2808:	2012      	movs	r0, #18
    280a:	4240      	negs	r0, r0
    280c:	e7f1      	b.n	27f2 <_usb_d_dev_ep_enable+0x2aa>
    280e:	2012      	movs	r0, #18
    2810:	4240      	negs	r0, r0
    2812:	e7ee      	b.n	27f2 <_usb_d_dev_ep_enable+0x2aa>
			return -USB_ERR_REDO;
    2814:	2014      	movs	r0, #20
    2816:	4240      	negs	r0, r0
    2818:	e7eb      	b.n	27f2 <_usb_d_dev_ep_enable+0x2aa>
			return -USB_ERR_REDO;
    281a:	2014      	movs	r0, #20
    281c:	4240      	negs	r0, r0
    281e:	e7e8      	b.n	27f2 <_usb_d_dev_ep_enable+0x2aa>
			return -USB_ERR_REDO;
    2820:	2014      	movs	r0, #20
    2822:	4240      	negs	r0, r0
    2824:	e7e5      	b.n	27f2 <_usb_d_dev_ep_enable+0x2aa>
    2826:	46c0      	nop			; (mov r8, r8)
    2828:	41005000 	.word	0x41005000
    282c:	200002f0 	.word	0x200002f0
    2830:	200001f0 	.word	0x200001f0
    2834:	0fffc000 	.word	0x0fffc000
    2838:	f0003fff 	.word	0xf0003fff
    283c:	41005109 	.word	0x41005109

00002840 <_usb_d_dev_ep_stall>:
{
    2840:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    2842:	230f      	movs	r3, #15
    2844:	4003      	ands	r3, r0
    2846:	b240      	sxtb	r0, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    2848:	0fc4      	lsrs	r4, r0, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    284a:	2b00      	cmp	r3, #0
    284c:	d005      	beq.n	285a <_usb_d_dev_ep_stall+0x1a>
    284e:	2800      	cmp	r0, #0
    2850:	db01      	blt.n	2856 <_usb_d_dev_ep_stall+0x16>
    2852:	001a      	movs	r2, r3
    2854:	e002      	b.n	285c <_usb_d_dev_ep_stall+0x1c>
    2856:	1dda      	adds	r2, r3, #7
    2858:	e000      	b.n	285c <_usb_d_dev_ep_stall+0x1c>
    285a:	001a      	movs	r2, r3
	return &dev_inst.ep[ep_index];
    285c:	0015      	movs	r5, r2
    285e:	0090      	lsls	r0, r2, #2
    2860:	1880      	adds	r0, r0, r2
    2862:	0082      	lsls	r2, r0, #2
    2864:	3210      	adds	r2, #16
    2866:	4845      	ldr	r0, [pc, #276]	; (297c <_usb_d_dev_ep_stall+0x13c>)
    2868:	1882      	adds	r2, r0, r2
    286a:	3204      	adds	r2, #4
	if (epn > CONF_USB_D_MAX_EP_N) {
    286c:	2b07      	cmp	r3, #7
    286e:	d900      	bls.n	2872 <_usb_d_dev_ep_stall+0x32>
    2870:	e080      	b.n	2974 <_usb_d_dev_ep_stall+0x134>
	if (USB_EP_STALL_SET == ctrl) {
    2872:	2901      	cmp	r1, #1
    2874:	d017      	beq.n	28a6 <_usb_d_dev_ep_stall+0x66>
	} else if (USB_EP_STALL_CLR == ctrl) {
    2876:	2900      	cmp	r1, #0
    2878:	d039      	beq.n	28ee <_usb_d_dev_ep_stall+0xae>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    287a:	00aa      	lsls	r2, r5, #2
    287c:	1952      	adds	r2, r2, r5
    287e:	0091      	lsls	r1, r2, #2
    2880:	4b3e      	ldr	r3, [pc, #248]	; (297c <_usb_d_dev_ep_stall+0x13c>)
    2882:	185b      	adds	r3, r3, r1
    2884:	3326      	adds	r3, #38	; 0x26
    2886:	781a      	ldrb	r2, [r3, #0]
    2888:	230f      	movs	r3, #15
    288a:	4013      	ands	r3, r2
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    288c:	3308      	adds	r3, #8
    288e:	015b      	lsls	r3, r3, #5
    2890:	4a3b      	ldr	r2, [pc, #236]	; (2980 <_usb_d_dev_ep_stall+0x140>)
    2892:	4694      	mov	ip, r2
    2894:	4463      	add	r3, ip
    2896:	7998      	ldrb	r0, [r3, #6]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    2898:	2310      	movs	r3, #16
    289a:	40a3      	lsls	r3, r4
    289c:	4018      	ands	r0, r3
    289e:	1e43      	subs	r3, r0, #1
    28a0:	4198      	sbcs	r0, r3
    28a2:	b2c0      	uxtb	r0, r0
}
    28a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t epn = USB_EP_GET_N(ept->ep);
    28a6:	00aa      	lsls	r2, r5, #2
    28a8:	1951      	adds	r1, r2, r5
    28aa:	008b      	lsls	r3, r1, #2
    28ac:	18c3      	adds	r3, r0, r3
    28ae:	3326      	adds	r3, #38	; 0x26
    28b0:	781b      	ldrb	r3, [r3, #0]
    28b2:	210f      	movs	r1, #15
    28b4:	400b      	ands	r3, r1
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    28b6:	2610      	movs	r6, #16
    28b8:	40a6      	lsls	r6, r4
    28ba:	b2f6      	uxtb	r6, r6
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    28bc:	0019      	movs	r1, r3
    28be:	3108      	adds	r1, #8
    28c0:	0149      	lsls	r1, r1, #5
    28c2:	4f2f      	ldr	r7, [pc, #188]	; (2980 <_usb_d_dev_ep_stall+0x140>)
    28c4:	46bc      	mov	ip, r7
    28c6:	4461      	add	r1, ip
    28c8:	714e      	strb	r6, [r1, #5]
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    28ca:	2120      	movs	r1, #32
    28cc:	40a1      	lsls	r1, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    28ce:	b2cc      	uxtb	r4, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    28d0:	0159      	lsls	r1, r3, #5
    28d2:	4b2c      	ldr	r3, [pc, #176]	; (2984 <_usb_d_dev_ep_stall+0x144>)
    28d4:	469c      	mov	ip, r3
    28d6:	4461      	add	r1, ip
    28d8:	700c      	strb	r4, [r1, #0]
	ept->flags.bits.is_stalled = 1;
    28da:	1952      	adds	r2, r2, r5
    28dc:	0093      	lsls	r3, r2, #2
    28de:	18c3      	adds	r3, r0, r3
    28e0:	3320      	adds	r3, #32
    28e2:	79da      	ldrb	r2, [r3, #7]
    28e4:	2108      	movs	r1, #8
    28e6:	430a      	orrs	r2, r1
    28e8:	71da      	strb	r2, [r3, #7]
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    28ea:	2000      	movs	r0, #0
    28ec:	e7da      	b.n	28a4 <_usb_d_dev_ep_stall+0x64>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    28ee:	7c93      	ldrb	r3, [r2, #18]
    28f0:	310f      	adds	r1, #15
    28f2:	400b      	ands	r3, r1
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    28f4:	0019      	movs	r1, r3
    28f6:	3108      	adds	r1, #8
    28f8:	0149      	lsls	r1, r1, #5
    28fa:	4821      	ldr	r0, [pc, #132]	; (2980 <_usb_d_dev_ep_stall+0x140>)
    28fc:	4684      	mov	ip, r0
    28fe:	4461      	add	r1, ip
    2900:	7988      	ldrb	r0, [r1, #6]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    2902:	2110      	movs	r1, #16
    2904:	40a1      	lsls	r1, r4
	if (!is_stalled) {
    2906:	4208      	tst	r0, r1
    2908:	d024      	beq.n	2954 <_usb_d_dev_ep_stall+0x114>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    290a:	b2c9      	uxtb	r1, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    290c:	0018      	movs	r0, r3
    290e:	3008      	adds	r0, #8
    2910:	0140      	lsls	r0, r0, #5
    2912:	4460      	add	r0, ip
    2914:	7101      	strb	r1, [r0, #4]
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    2916:	2120      	movs	r1, #32
    2918:	40a1      	lsls	r1, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    291a:	b2ce      	uxtb	r6, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    291c:	015d      	lsls	r5, r3, #5
    291e:	4f1a      	ldr	r7, [pc, #104]	; (2988 <_usb_d_dev_ep_stall+0x148>)
    2920:	46bc      	mov	ip, r7
    2922:	4465      	add	r5, ip
    2924:	702e      	strb	r6, [r5, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    2926:	79c0      	ldrb	r0, [r0, #7]
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    2928:	4208      	tst	r0, r1
    292a:	d00a      	beq.n	2942 <_usb_d_dev_ep_stall+0x102>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    292c:	0019      	movs	r1, r3
    292e:	3108      	adds	r1, #8
    2930:	0149      	lsls	r1, r1, #5
    2932:	4813      	ldr	r0, [pc, #76]	; (2980 <_usb_d_dev_ep_stall+0x140>)
    2934:	4684      	mov	ip, r0
    2936:	4461      	add	r1, ip
    2938:	71ce      	strb	r6, [r1, #7]
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    293a:	2001      	movs	r0, #1
    293c:	40a0      	lsls	r0, r4
    293e:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2940:	7108      	strb	r0, [r1, #4]
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    2942:	7cd0      	ldrb	r0, [r2, #19]
    2944:	2107      	movs	r1, #7
    2946:	4001      	ands	r1, r0
    2948:	2901      	cmp	r1, #1
    294a:	d005      	beq.n	2958 <_usb_d_dev_ep_stall+0x118>
		ept->flags.bits.is_stalled = 0;
    294c:	7cd3      	ldrb	r3, [r2, #19]
    294e:	2108      	movs	r1, #8
    2950:	438b      	bics	r3, r1
    2952:	74d3      	strb	r3, [r2, #19]
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    2954:	2000      	movs	r0, #0
    2956:	e7a5      	b.n	28a4 <_usb_d_dev_ep_stall+0x64>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    2958:	3308      	adds	r3, #8
    295a:	015b      	lsls	r3, r3, #5
    295c:	4908      	ldr	r1, [pc, #32]	; (2980 <_usb_d_dev_ep_stall+0x140>)
    295e:	468c      	mov	ip, r1
    2960:	4463      	add	r3, ip
    2962:	7999      	ldrb	r1, [r3, #6]
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    2964:	2330      	movs	r3, #48	; 0x30
    2966:	4219      	tst	r1, r3
    2968:	d1f4      	bne.n	2954 <_usb_d_dev_ep_stall+0x114>
			ept->flags.bits.is_stalled = 0;
    296a:	0003      	movs	r3, r0
    296c:	2108      	movs	r1, #8
    296e:	438b      	bics	r3, r1
    2970:	74d3      	strb	r3, [r2, #19]
    2972:	e7ef      	b.n	2954 <_usb_d_dev_ep_stall+0x114>
		return -USB_ERR_PARAM;
    2974:	2012      	movs	r0, #18
    2976:	4240      	negs	r0, r0
    2978:	e794      	b.n	28a4 <_usb_d_dev_ep_stall+0x64>
    297a:	46c0      	nop			; (mov r8, r8)
    297c:	200002f0 	.word	0x200002f0
    2980:	41005000 	.word	0x41005000
    2984:	41005109 	.word	0x41005109
    2988:	41005108 	.word	0x41005108

0000298c <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    298c:	b570      	push	{r4, r5, r6, lr}
    298e:	000e      	movs	r6, r1
	uint8_t            epn   = USB_EP_GET_N(ep);
    2990:	240f      	movs	r4, #15
    2992:	4004      	ands	r4, r0
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    2994:	0162      	lsls	r2, r4, #5
    2996:	4b18      	ldr	r3, [pc, #96]	; (29f8 <_usb_d_dev_ep_read_req+0x6c>)
    2998:	189b      	adds	r3, r3, r2
	uint32_t           addr  = bank[0].ADDR.reg;
    299a:	6819      	ldr	r1, [r3, #0]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    299c:	685d      	ldr	r5, [r3, #4]
    299e:	04ad      	lsls	r5, r5, #18
    29a0:	0cad      	lsrs	r5, r5, #18

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    29a2:	2c07      	cmp	r4, #7
    29a4:	d81f      	bhi.n	29e6 <_usb_d_dev_ep_read_req+0x5a>
    29a6:	2e00      	cmp	r6, #0
    29a8:	d020      	beq.n	29ec <_usb_d_dev_ep_read_req+0x60>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    29aa:	0023      	movs	r3, r4
    29ac:	3308      	adds	r3, #8
    29ae:	015b      	lsls	r3, r3, #5
    29b0:	4a12      	ldr	r2, [pc, #72]	; (29fc <_usb_d_dev_ep_read_req+0x70>)
    29b2:	5c9b      	ldrb	r3, [r3, r2]
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    29b4:	2b11      	cmp	r3, #17
    29b6:	d11c      	bne.n	29f2 <_usb_d_dev_ep_read_req+0x66>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    29b8:	0023      	movs	r3, r4
    29ba:	3308      	adds	r3, #8
    29bc:	015b      	lsls	r3, r3, #5
    29be:	4694      	mov	ip, r2
    29c0:	4463      	add	r3, ip
    29c2:	79db      	ldrb	r3, [r3, #7]
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    29c4:	06db      	lsls	r3, r3, #27
    29c6:	d401      	bmi.n	29cc <_usb_d_dev_ep_read_req+0x40>
		return ERR_NONE;
    29c8:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    29ca:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(req_buf, (void *)addr, 8);
    29cc:	2208      	movs	r2, #8
    29ce:	0030      	movs	r0, r6
    29d0:	4b0b      	ldr	r3, [pc, #44]	; (2a00 <_usb_d_dev_ep_read_req+0x74>)
    29d2:	4798      	blx	r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    29d4:	3408      	adds	r4, #8
    29d6:	0164      	lsls	r4, r4, #5
    29d8:	4b08      	ldr	r3, [pc, #32]	; (29fc <_usb_d_dev_ep_read_req+0x70>)
    29da:	469c      	mov	ip, r3
    29dc:	4464      	add	r4, ip
    29de:	2310      	movs	r3, #16
    29e0:	71e3      	strb	r3, [r4, #7]
	return bytes;
    29e2:	0028      	movs	r0, r5
    29e4:	e7f1      	b.n	29ca <_usb_d_dev_ep_read_req+0x3e>
		return -USB_ERR_PARAM;
    29e6:	2012      	movs	r0, #18
    29e8:	4240      	negs	r0, r0
    29ea:	e7ee      	b.n	29ca <_usb_d_dev_ep_read_req+0x3e>
    29ec:	2012      	movs	r0, #18
    29ee:	4240      	negs	r0, r0
    29f0:	e7eb      	b.n	29ca <_usb_d_dev_ep_read_req+0x3e>
		return -USB_ERR_FUNC;
    29f2:	2013      	movs	r0, #19
    29f4:	4240      	negs	r0, r0
    29f6:	e7e8      	b.n	29ca <_usb_d_dev_ep_read_req+0x3e>
    29f8:	200001f0 	.word	0x200001f0
    29fc:	41005000 	.word	0x41005000
    2a00:	0000398d 	.word	0x0000398d

00002a04 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    2a04:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a06:	46de      	mov	lr, fp
    2a08:	4657      	mov	r7, sl
    2a0a:	464e      	mov	r6, r9
    2a0c:	4645      	mov	r5, r8
    2a0e:	b5e0      	push	{r5, r6, r7, lr}
    2a10:	b085      	sub	sp, #20
    2a12:	4680      	mov	r8, r0
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    2a14:	7a05      	ldrb	r5, [r0, #8]
    2a16:	230f      	movs	r3, #15
    2a18:	402b      	ands	r3, r5
    2a1a:	b26d      	sxtb	r5, r5
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    2a1c:	0fea      	lsrs	r2, r5, #31
    2a1e:	4691      	mov	r9, r2
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2a20:	2b00      	cmp	r3, #0
    2a22:	d005      	beq.n	2a30 <_usb_d_dev_ep_trans+0x2c>
    2a24:	2d00      	cmp	r5, #0
    2a26:	db01      	blt.n	2a2c <_usb_d_dev_ep_trans+0x28>
    2a28:	0018      	movs	r0, r3
    2a2a:	e002      	b.n	2a32 <_usb_d_dev_ep_trans+0x2e>
    2a2c:	1dd8      	adds	r0, r3, #7
    2a2e:	e000      	b.n	2a32 <_usb_d_dev_ep_trans+0x2e>
    2a30:	0018      	movs	r0, r3
	return &dev_inst.ep[ep_index];
    2a32:	0006      	movs	r6, r0
    2a34:	495f      	ldr	r1, [pc, #380]	; (2bb4 <_usb_d_dev_ep_trans+0x1b0>)
    2a36:	0082      	lsls	r2, r0, #2
    2a38:	1817      	adds	r7, r2, r0
    2a3a:	00bc      	lsls	r4, r7, #2
    2a3c:	3410      	adds	r4, #16
    2a3e:	190c      	adds	r4, r1, r4
    2a40:	3404      	adds	r4, #4
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2a42:	00b8      	lsls	r0, r7, #2
    2a44:	1809      	adds	r1, r1, r0
    2a46:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    2a48:	495b      	ldr	r1, [pc, #364]	; (2bb8 <_usb_d_dev_ep_trans+0x1b4>)
    2a4a:	428a      	cmp	r2, r1
    2a4c:	d042      	beq.n	2ad4 <_usb_d_dev_ep_trans+0xd0>
    2a4e:	1e57      	subs	r7, r2, #1
    2a50:	b2bf      	uxth	r7, r7
	bool     size_n_aligned = (trans->size & size_mask);
    2a52:	4641      	mov	r1, r8
    2a54:	6849      	ldr	r1, [r1, #4]
    2a56:	400f      	ands	r7, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    2a58:	2b07      	cmp	r3, #7
    2a5a:	d900      	bls.n	2a5e <_usb_d_dev_ep_trans+0x5a>
    2a5c:	e0a1      	b.n	2ba2 <_usb_d_dev_ep_trans+0x19e>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    2a5e:	4643      	mov	r3, r8
    2a60:	681b      	ldr	r3, [r3, #0]
    2a62:	4856      	ldr	r0, [pc, #344]	; (2bbc <_usb_d_dev_ep_trans+0x1b8>)
    2a64:	4283      	cmp	r3, r0
    2a66:	d90c      	bls.n	2a82 <_usb_d_dev_ep_trans+0x7e>
    2a68:	18c8      	adds	r0, r1, r3
    2a6a:	9001      	str	r0, [sp, #4]
    2a6c:	4854      	ldr	r0, [pc, #336]	; (2bc0 <_usb_d_dev_ep_trans+0x1bc>)
    2a6e:	4684      	mov	ip, r0
    2a70:	9801      	ldr	r0, [sp, #4]
    2a72:	4560      	cmp	r0, ip
    2a74:	d805      	bhi.n	2a82 <_usb_d_dev_ep_trans+0x7e>
    2a76:	079b      	lsls	r3, r3, #30
    2a78:	d103      	bne.n	2a82 <_usb_d_dev_ep_trans+0x7e>
	    || (!dir && (trans->size < ept->size))) {
    2a7a:	2d00      	cmp	r5, #0
    2a7c:	db2c      	blt.n	2ad8 <_usb_d_dev_ep_trans+0xd4>
    2a7e:	4291      	cmp	r1, r2
    2a80:	d22d      	bcs.n	2ade <_usb_d_dev_ep_trans+0xda>
		if (!ept->cache) {
    2a82:	00b3      	lsls	r3, r6, #2
    2a84:	199b      	adds	r3, r3, r6
    2a86:	009a      	lsls	r2, r3, #2
    2a88:	4b4a      	ldr	r3, [pc, #296]	; (2bb4 <_usb_d_dev_ep_trans+0x1b0>)
    2a8a:	189b      	adds	r3, r3, r2
    2a8c:	6a1b      	ldr	r3, [r3, #32]
    2a8e:	2b00      	cmp	r3, #0
    2a90:	d100      	bne.n	2a94 <_usb_d_dev_ep_trans+0x90>
    2a92:	e089      	b.n	2ba8 <_usb_d_dev_ep_trans+0x1a4>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
    2a94:	2301      	movs	r3, #1
    2a96:	9301      	str	r3, [sp, #4]
	}
	if (!dir && size_n_aligned) {
    2a98:	2d00      	cmp	r5, #0
    2a9a:	db0a      	blt.n	2ab2 <_usb_d_dev_ep_trans+0xae>
    2a9c:	2f00      	cmp	r7, #0
    2a9e:	d008      	beq.n	2ab2 <_usb_d_dev_ep_trans+0xae>
		if (!ept->cache) {
    2aa0:	00b3      	lsls	r3, r6, #2
    2aa2:	199b      	adds	r3, r3, r6
    2aa4:	009a      	lsls	r2, r3, #2
    2aa6:	4b43      	ldr	r3, [pc, #268]	; (2bb4 <_usb_d_dev_ep_trans+0x1b0>)
    2aa8:	189b      	adds	r3, r3, r2
    2aaa:	6a1b      	ldr	r3, [r3, #32]
    2aac:	2b00      	cmp	r3, #0
    2aae:	d100      	bne.n	2ab2 <_usb_d_dev_ep_trans+0xae>
    2ab0:	e07d      	b.n	2bae <_usb_d_dev_ep_trans+0x1aa>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    2ab2:	00b2      	lsls	r2, r6, #2
    2ab4:	1992      	adds	r2, r2, r6
    2ab6:	0091      	lsls	r1, r2, #2
    2ab8:	4b3e      	ldr	r3, [pc, #248]	; (2bb4 <_usb_d_dev_ep_trans+0x1b0>)
    2aba:	185b      	adds	r3, r3, r1
    2abc:	3320      	adds	r3, #32
    2abe:	79db      	ldrb	r3, [r3, #7]
    2ac0:	071b      	lsls	r3, r3, #28
    2ac2:	d50f      	bpl.n	2ae4 <_usb_d_dev_ep_trans+0xe0>
		return USB_HALTED;
    2ac4:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    2ac6:	b005      	add	sp, #20
    2ac8:	bc3c      	pop	{r2, r3, r4, r5}
    2aca:	4690      	mov	r8, r2
    2acc:	4699      	mov	r9, r3
    2ace:	46a2      	mov	sl, r4
    2ad0:	46ab      	mov	fp, r5
    2ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2ad4:	0017      	movs	r7, r2
    2ad6:	e7bc      	b.n	2a52 <_usb_d_dev_ep_trans+0x4e>
	bool use_cache = false;
    2ad8:	2300      	movs	r3, #0
    2ada:	9301      	str	r3, [sp, #4]
    2adc:	e7dc      	b.n	2a98 <_usb_d_dev_ep_trans+0x94>
    2ade:	2300      	movs	r3, #0
    2ae0:	9301      	str	r3, [sp, #4]
    2ae2:	e7d9      	b.n	2a98 <_usb_d_dev_ep_trans+0x94>
	atomic_enter_critical(&flags);
    2ae4:	a803      	add	r0, sp, #12
    2ae6:	4b37      	ldr	r3, [pc, #220]	; (2bc4 <_usb_d_dev_ep_trans+0x1c0>)
    2ae8:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    2aea:	00b2      	lsls	r2, r6, #2
    2aec:	1992      	adds	r2, r2, r6
    2aee:	0091      	lsls	r1, r2, #2
    2af0:	4b30      	ldr	r3, [pc, #192]	; (2bb4 <_usb_d_dev_ep_trans+0x1b0>)
    2af2:	185b      	adds	r3, r3, r1
    2af4:	3320      	adds	r3, #32
    2af6:	79db      	ldrb	r3, [r3, #7]
    2af8:	065b      	lsls	r3, r3, #25
    2afa:	d430      	bmi.n	2b5e <_usb_d_dev_ep_trans+0x15a>
	ept->flags.bits.is_busy = 1;
    2afc:	00b3      	lsls	r3, r6, #2
    2afe:	199b      	adds	r3, r3, r6
    2b00:	009a      	lsls	r2, r3, #2
    2b02:	4b2c      	ldr	r3, [pc, #176]	; (2bb4 <_usb_d_dev_ep_trans+0x1b0>)
    2b04:	469b      	mov	fp, r3
    2b06:	4493      	add	fp, r2
    2b08:	2320      	movs	r3, #32
    2b0a:	445b      	add	r3, fp
    2b0c:	469a      	mov	sl, r3
    2b0e:	79db      	ldrb	r3, [r3, #7]
    2b10:	2240      	movs	r2, #64	; 0x40
    2b12:	4313      	orrs	r3, r2
    2b14:	4652      	mov	r2, sl
    2b16:	71d3      	strb	r3, [r2, #7]
	atomic_leave_critical(&flags);
    2b18:	a803      	add	r0, sp, #12
    2b1a:	4b2b      	ldr	r3, [pc, #172]	; (2bc8 <_usb_d_dev_ep_trans+0x1c4>)
    2b1c:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    2b1e:	465b      	mov	r3, fp
    2b20:	4642      	mov	r2, r8
    2b22:	6812      	ldr	r2, [r2, #0]
    2b24:	615a      	str	r2, [r3, #20]
	ept->trans_size  = trans->size;
    2b26:	4642      	mov	r2, r8
    2b28:	6852      	ldr	r2, [r2, #4]
    2b2a:	619a      	str	r2, [r3, #24]
	ept->trans_count = 0;
    2b2c:	2300      	movs	r3, #0
    2b2e:	465a      	mov	r2, fp
    2b30:	61d3      	str	r3, [r2, #28]
	ept->flags.bits.dir       = dir;
    2b32:	464b      	mov	r3, r9
    2b34:	01db      	lsls	r3, r3, #7
    2b36:	4652      	mov	r2, sl
    2b38:	79d2      	ldrb	r2, [r2, #7]
    2b3a:	217f      	movs	r1, #127	; 0x7f
    2b3c:	4011      	ands	r1, r2
	ept->flags.bits.use_cache = use_cache;
    2b3e:	9a01      	ldr	r2, [sp, #4]
    2b40:	0152      	lsls	r2, r2, #5
    2b42:	430b      	orrs	r3, r1
    2b44:	2120      	movs	r1, #32
    2b46:	438b      	bics	r3, r1
    2b48:	431a      	orrs	r2, r3
    2b4a:	4653      	mov	r3, sl
    2b4c:	71da      	strb	r2, [r3, #7]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    2b4e:	4643      	mov	r3, r8
    2b50:	7a5b      	ldrb	r3, [r3, #9]
    2b52:	2b00      	cmp	r3, #0
    2b54:	d008      	beq.n	2b68 <_usb_d_dev_ep_trans+0x164>
    2b56:	2f00      	cmp	r7, #0
    2b58:	d01b      	beq.n	2b92 <_usb_d_dev_ep_trans+0x18e>
    2b5a:	2200      	movs	r2, #0
    2b5c:	e005      	b.n	2b6a <_usb_d_dev_ep_trans+0x166>
		atomic_leave_critical(&flags);
    2b5e:	a803      	add	r0, sp, #12
    2b60:	4b19      	ldr	r3, [pc, #100]	; (2bc8 <_usb_d_dev_ep_trans+0x1c4>)
    2b62:	4798      	blx	r3
		return USB_BUSY;
    2b64:	2001      	movs	r0, #1
    2b66:	e7ae      	b.n	2ac6 <_usb_d_dev_ep_trans+0xc2>
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    2b68:	2200      	movs	r2, #0
    2b6a:	00b3      	lsls	r3, r6, #2
    2b6c:	199e      	adds	r6, r3, r6
    2b6e:	00b1      	lsls	r1, r6, #2
    2b70:	4b10      	ldr	r3, [pc, #64]	; (2bb4 <_usb_d_dev_ep_trans+0x1b0>)
    2b72:	185b      	adds	r3, r3, r1
    2b74:	3320      	adds	r3, #32
    2b76:	0111      	lsls	r1, r2, #4
    2b78:	79da      	ldrb	r2, [r3, #7]
    2b7a:	2010      	movs	r0, #16
    2b7c:	4382      	bics	r2, r0
    2b7e:	430a      	orrs	r2, r1
    2b80:	71da      	strb	r2, [r3, #7]
	if (dir) {
    2b82:	2d00      	cmp	r5, #0
    2b84:	db07      	blt.n	2b96 <_usb_d_dev_ep_trans+0x192>
		_usb_d_dev_out_next(ept, false);
    2b86:	2100      	movs	r1, #0
    2b88:	0020      	movs	r0, r4
    2b8a:	4b10      	ldr	r3, [pc, #64]	; (2bcc <_usb_d_dev_ep_trans+0x1c8>)
    2b8c:	4798      	blx	r3
	return ERR_NONE;
    2b8e:	2000      	movs	r0, #0
    2b90:	e799      	b.n	2ac6 <_usb_d_dev_ep_trans+0xc2>
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    2b92:	2201      	movs	r2, #1
    2b94:	e7e9      	b.n	2b6a <_usb_d_dev_ep_trans+0x166>
		_usb_d_dev_in_next(ept, false);
    2b96:	2100      	movs	r1, #0
    2b98:	0020      	movs	r0, r4
    2b9a:	4b0d      	ldr	r3, [pc, #52]	; (2bd0 <_usb_d_dev_ep_trans+0x1cc>)
    2b9c:	4798      	blx	r3
	return ERR_NONE;
    2b9e:	2000      	movs	r0, #0
    2ba0:	e791      	b.n	2ac6 <_usb_d_dev_ep_trans+0xc2>
		return -USB_ERR_PARAM;
    2ba2:	2012      	movs	r0, #18
    2ba4:	4240      	negs	r0, r0
    2ba6:	e78e      	b.n	2ac6 <_usb_d_dev_ep_trans+0xc2>
			return -USB_ERR_FUNC;
    2ba8:	2013      	movs	r0, #19
    2baa:	4240      	negs	r0, r0
    2bac:	e78b      	b.n	2ac6 <_usb_d_dev_ep_trans+0xc2>
			return -USB_ERR_PARAM;
    2bae:	2012      	movs	r0, #18
    2bb0:	4240      	negs	r0, r0
    2bb2:	e788      	b.n	2ac6 <_usb_d_dev_ep_trans+0xc2>
    2bb4:	200002f0 	.word	0x200002f0
    2bb8:	000003ff 	.word	0x000003ff
    2bbc:	1fffffff 	.word	0x1fffffff
    2bc0:	20007fff 	.word	0x20007fff
    2bc4:	00000819 	.word	0x00000819
    2bc8:	00000827 	.word	0x00000827
    2bcc:	00001ddd 	.word	0x00001ddd
    2bd0:	00001c4d 	.word	0x00001c4d

00002bd4 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    2bd4:	2900      	cmp	r1, #0
    2bd6:	d006      	beq.n	2be6 <_usb_d_dev_register_callback+0x12>
	if (type == USB_D_CB_EVENT) {
    2bd8:	2801      	cmp	r0, #1
    2bda:	d006      	beq.n	2bea <_usb_d_dev_register_callback+0x16>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    2bdc:	2800      	cmp	r0, #0
    2bde:	d101      	bne.n	2be4 <_usb_d_dev_register_callback+0x10>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    2be0:	4b03      	ldr	r3, [pc, #12]	; (2bf0 <_usb_d_dev_register_callback+0x1c>)
    2be2:	6019      	str	r1, [r3, #0]
	}
}
    2be4:	4770      	bx	lr
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    2be6:	4903      	ldr	r1, [pc, #12]	; (2bf4 <_usb_d_dev_register_callback+0x20>)
    2be8:	e7f6      	b.n	2bd8 <_usb_d_dev_register_callback+0x4>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    2bea:	4b01      	ldr	r3, [pc, #4]	; (2bf0 <_usb_d_dev_register_callback+0x1c>)
    2bec:	6059      	str	r1, [r3, #4]
    2bee:	e7f9      	b.n	2be4 <_usb_d_dev_register_callback+0x10>
    2bf0:	200002f0 	.word	0x200002f0
    2bf4:	00001929 	.word	0x00001929

00002bf8 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    2bf8:	2900      	cmp	r1, #0
    2bfa:	d008      	beq.n	2c0e <_usb_d_dev_register_ep_callback+0x16>
	if (type == USB_D_DEV_EP_CB_SETUP) {
    2bfc:	2800      	cmp	r0, #0
    2bfe:	d008      	beq.n	2c12 <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    2c00:	2801      	cmp	r0, #1
    2c02:	d009      	beq.n	2c18 <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    2c04:	2802      	cmp	r0, #2
    2c06:	d106      	bne.n	2c16 <_usb_d_dev_register_ep_callback+0x1e>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    2c08:	4b05      	ldr	r3, [pc, #20]	; (2c20 <_usb_d_dev_register_ep_callback+0x28>)
    2c0a:	6119      	str	r1, [r3, #16]
	}
}
    2c0c:	e003      	b.n	2c16 <_usb_d_dev_register_ep_callback+0x1e>
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    2c0e:	4905      	ldr	r1, [pc, #20]	; (2c24 <_usb_d_dev_register_ep_callback+0x2c>)
    2c10:	e7f4      	b.n	2bfc <_usb_d_dev_register_ep_callback+0x4>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    2c12:	4b03      	ldr	r3, [pc, #12]	; (2c20 <_usb_d_dev_register_ep_callback+0x28>)
    2c14:	6099      	str	r1, [r3, #8]
}
    2c16:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    2c18:	4b01      	ldr	r3, [pc, #4]	; (2c20 <_usb_d_dev_register_ep_callback+0x28>)
    2c1a:	60d9      	str	r1, [r3, #12]
    2c1c:	e7fb      	b.n	2c16 <_usb_d_dev_register_ep_callback+0x1e>
    2c1e:	46c0      	nop			; (mov r8, r8)
    2c20:	200002f0 	.word	0x200002f0
    2c24:	00001929 	.word	0x00001929

00002c28 <USB_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_Handler(void)
{
    2c28:	b510      	push	{r4, lr}

	_usb_d_dev_handler();
    2c2a:	4b01      	ldr	r3, [pc, #4]	; (2c30 <USB_Handler+0x8>)
    2c2c:	4798      	blx	r3
}
    2c2e:	bd10      	pop	{r4, pc}
    2c30:	00001fe1 	.word	0x00001fe1

00002c34 <main>:
#include <atmel_start.h>

int main(void)
{
    2c34:	b510      	push	{r4, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    2c36:	4b01      	ldr	r3, [pc, #4]	; (2c3c <main+0x8>)
    2c38:	4798      	blx	r3
    2c3a:	e7fe      	b.n	2c3a <main+0x6>
    2c3c:	00000115 	.word	0x00000115

00002c40 <_read>:
#include <stdio.h>

int __attribute__((weak)) _read(int file, char *ptr, int len); /* Remove GCC compiler warning */

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
    2c40:	b510      	push	{r4, lr}
    2c42:	000b      	movs	r3, r1
	int n = 0;

	if (file != 0) {
    2c44:	2800      	cmp	r0, #0
    2c46:	d109      	bne.n	2c5c <_read+0x1c>
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    2c48:	0011      	movs	r1, r2
    2c4a:	0018      	movs	r0, r3
    2c4c:	4b05      	ldr	r3, [pc, #20]	; (2c64 <_read+0x24>)
    2c4e:	4798      	blx	r3
	if (n < 0) {
    2c50:	2800      	cmp	r0, #0
    2c52:	db00      	blt.n	2c56 <_read+0x16>
		return -1;
	}

	return n;
}
    2c54:	bd10      	pop	{r4, pc}
		return -1;
    2c56:	2001      	movs	r0, #1
    2c58:	4240      	negs	r0, r0
    2c5a:	e7fb      	b.n	2c54 <_read+0x14>
		return -1;
    2c5c:	2001      	movs	r0, #1
    2c5e:	4240      	negs	r0, r0
    2c60:	e7f8      	b.n	2c54 <_read+0x14>
    2c62:	46c0      	nop			; (mov r8, r8)
    2c64:	00002cbd 	.word	0x00002cbd

00002c68 <_write>:
#include <stdio.h>

int __attribute__((weak)) _write(int file, char *ptr, int len); /* Remove GCC compiler warning */

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
    2c68:	b510      	push	{r4, lr}
    2c6a:	000b      	movs	r3, r1
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    2c6c:	3801      	subs	r0, #1
    2c6e:	2802      	cmp	r0, #2
    2c70:	d809      	bhi.n	2c86 <_write+0x1e>
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    2c72:	0011      	movs	r1, r2
    2c74:	0018      	movs	r0, r3
    2c76:	4b05      	ldr	r3, [pc, #20]	; (2c8c <_write+0x24>)
    2c78:	4798      	blx	r3
	if (n < 0) {
    2c7a:	2800      	cmp	r0, #0
    2c7c:	db00      	blt.n	2c80 <_write+0x18>
		return -1;
	}

	return n;
}
    2c7e:	bd10      	pop	{r4, pc}
		return -1;
    2c80:	2001      	movs	r0, #1
    2c82:	4240      	negs	r0, r0
    2c84:	e7fb      	b.n	2c7e <_write+0x16>
		return -1;
    2c86:	2001      	movs	r0, #1
    2c88:	4240      	negs	r0, r0
    2c8a:	e7f8      	b.n	2c7e <_write+0x16>
    2c8c:	00002ce1 	.word	0x00002ce1

00002c90 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    2c90:	b570      	push	{r4, r5, r6, lr}
    2c92:	0006      	movs	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    2c94:	4d06      	ldr	r5, [pc, #24]	; (2cb0 <stdio_io_init+0x20>)
    2c96:	682b      	ldr	r3, [r5, #0]
    2c98:	6898      	ldr	r0, [r3, #8]
    2c9a:	2100      	movs	r1, #0
    2c9c:	4c05      	ldr	r4, [pc, #20]	; (2cb4 <stdio_io_init+0x24>)
    2c9e:	47a0      	blx	r4
	setbuf(stdin, NULL);
    2ca0:	682b      	ldr	r3, [r5, #0]
    2ca2:	6858      	ldr	r0, [r3, #4]
    2ca4:	2100      	movs	r1, #0
    2ca6:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    2ca8:	4b03      	ldr	r3, [pc, #12]	; (2cb8 <stdio_io_init+0x28>)
    2caa:	601e      	str	r6, [r3, #0]
}
    2cac:	bd70      	pop	{r4, r5, r6, pc}
    2cae:	46c0      	nop			; (mov r8, r8)
    2cb0:	20000068 	.word	0x20000068
    2cb4:	000039af 	.word	0x000039af
    2cb8:	20000658 	.word	0x20000658

00002cbc <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    2cbc:	b510      	push	{r4, lr}
    2cbe:	0004      	movs	r4, r0
	if (stdio_io == NULL) {
    2cc0:	4b05      	ldr	r3, [pc, #20]	; (2cd8 <stdio_io_read+0x1c>)
    2cc2:	6818      	ldr	r0, [r3, #0]
    2cc4:	2800      	cmp	r0, #0
    2cc6:	d004      	beq.n	2cd2 <stdio_io_read+0x16>
		return 0;
	}
	return io_read(stdio_io, buf, len);
    2cc8:	b28a      	uxth	r2, r1
    2cca:	0021      	movs	r1, r4
    2ccc:	4b03      	ldr	r3, [pc, #12]	; (2cdc <stdio_io_read+0x20>)
    2cce:	4798      	blx	r3
}
    2cd0:	bd10      	pop	{r4, pc}
		return 0;
    2cd2:	2000      	movs	r0, #0
    2cd4:	e7fc      	b.n	2cd0 <stdio_io_read+0x14>
    2cd6:	46c0      	nop			; (mov r8, r8)
    2cd8:	20000658 	.word	0x20000658
    2cdc:	000008d1 	.word	0x000008d1

00002ce0 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    2ce0:	b510      	push	{r4, lr}
    2ce2:	0004      	movs	r4, r0
	if (stdio_io == NULL) {
    2ce4:	4b05      	ldr	r3, [pc, #20]	; (2cfc <stdio_io_write+0x1c>)
    2ce6:	6818      	ldr	r0, [r3, #0]
    2ce8:	2800      	cmp	r0, #0
    2cea:	d004      	beq.n	2cf6 <stdio_io_write+0x16>
		return 0;
	}
	return io_write(stdio_io, buf, len);
    2cec:	b28a      	uxth	r2, r1
    2cee:	0021      	movs	r1, r4
    2cf0:	4b03      	ldr	r3, [pc, #12]	; (2d00 <stdio_io_write+0x20>)
    2cf2:	4798      	blx	r3
}
    2cf4:	bd10      	pop	{r4, pc}
		return 0;
    2cf6:	2000      	movs	r0, #0
    2cf8:	e7fc      	b.n	2cf4 <stdio_io_write+0x14>
    2cfa:	46c0      	nop			; (mov r8, r8)
    2cfc:	20000658 	.word	0x20000658
    2d00:	00000899 	.word	0x00000899

00002d04 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    2d04:	b510      	push	{r4, lr}

	usart_sync_enable(&TARGET_IO);
    2d06:	4c04      	ldr	r4, [pc, #16]	; (2d18 <stdio_redirect_init+0x14>)
    2d08:	0020      	movs	r0, r4
    2d0a:	4b04      	ldr	r3, [pc, #16]	; (2d1c <stdio_redirect_init+0x18>)
    2d0c:	4798      	blx	r3
	stdio_io_init(&TARGET_IO.io);
    2d0e:	0020      	movs	r0, r4
    2d10:	4b03      	ldr	r3, [pc, #12]	; (2d20 <stdio_redirect_init+0x1c>)
    2d12:	4798      	blx	r3
}
    2d14:	bd10      	pop	{r4, pc}
    2d16:	46c0      	nop			; (mov r8, r8)
    2d18:	20000740 	.word	0x20000740
    2d1c:	00000b4d 	.word	0x00000b4d
    2d20:	00002c91 	.word	0x00002c91

00002d24 <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    2d24:	b510      	push	{r4, lr}
	uint16_t len = req->wLength;
    2d26:	798b      	ldrb	r3, [r1, #6]
    2d28:	79cc      	ldrb	r4, [r1, #7]
    2d2a:	0224      	lsls	r4, r4, #8
    2d2c:	431c      	orrs	r4, r3

	if (USB_DATA_STAGE == stage) {
    2d2e:	2a01      	cmp	r2, #1
    2d30:	d00a      	beq.n	2d48 <cdcdf_acm_get_req+0x24>
		return ERR_NONE;
	}

	switch (req->bRequest) {
    2d32:	784b      	ldrb	r3, [r1, #1]
    2d34:	2b21      	cmp	r3, #33	; 0x21
    2d36:	d109      	bne.n	2d4c <cdcdf_acm_get_req+0x28>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    2d38:	2c07      	cmp	r4, #7
    2d3a:	d10a      	bne.n	2d52 <cdcdf_acm_get_req+0x2e>
			return ERR_INVALID_DATA;
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    2d3c:	2300      	movs	r3, #0
    2d3e:	0022      	movs	r2, r4
    2d40:	4905      	ldr	r1, [pc, #20]	; (2d58 <cdcdf_acm_get_req+0x34>)
    2d42:	4c06      	ldr	r4, [pc, #24]	; (2d5c <cdcdf_acm_get_req+0x38>)
    2d44:	47a0      	blx	r4
	default:
		return ERR_INVALID_ARG;
	}
}
    2d46:	bd10      	pop	{r4, pc}
		return ERR_NONE;
    2d48:	2000      	movs	r0, #0
    2d4a:	e7fc      	b.n	2d46 <cdcdf_acm_get_req+0x22>
		return ERR_INVALID_ARG;
    2d4c:	200d      	movs	r0, #13
    2d4e:	4240      	negs	r0, r0
    2d50:	e7f9      	b.n	2d46 <cdcdf_acm_get_req+0x22>
			return ERR_INVALID_DATA;
    2d52:	2001      	movs	r0, #1
    2d54:	4240      	negs	r0, r0
    2d56:	e7f6      	b.n	2d46 <cdcdf_acm_get_req+0x22>
    2d58:	2000065c 	.word	0x2000065c
    2d5c:	0000329d 	.word	0x0000329d

00002d60 <cdcdf_acm_set_req>:
{
    2d60:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d62:	b083      	sub	sp, #12
    2d64:	0005      	movs	r5, r0
    2d66:	000f      	movs	r7, r1
    2d68:	0014      	movs	r4, r2
	uint16_t                   len      = req->wLength;
    2d6a:	798e      	ldrb	r6, [r1, #6]
    2d6c:	79cb      	ldrb	r3, [r1, #7]
    2d6e:	021b      	lsls	r3, r3, #8
    2d70:	431e      	orrs	r6, r3
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    2d72:	4b23      	ldr	r3, [pc, #140]	; (2e00 <cdcdf_acm_set_req+0xa0>)
    2d74:	4798      	blx	r3
	switch (req->bRequest) {
    2d76:	787b      	ldrb	r3, [r7, #1]
    2d78:	2b20      	cmp	r3, #32
    2d7a:	d005      	beq.n	2d88 <cdcdf_acm_set_req+0x28>
    2d7c:	2b22      	cmp	r3, #34	; 0x22
    2d7e:	d026      	beq.n	2dce <cdcdf_acm_set_req+0x6e>
		return ERR_INVALID_ARG;
    2d80:	200d      	movs	r0, #13
    2d82:	4240      	negs	r0, r0
}
    2d84:	b003      	add	sp, #12
    2d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (sizeof(struct usb_cdc_line_coding) != len) {
    2d88:	2e07      	cmp	r6, #7
    2d8a:	d131      	bne.n	2df0 <cdcdf_acm_set_req+0x90>
		if (USB_SETUP_STAGE == stage) {
    2d8c:	2c00      	cmp	r4, #0
    2d8e:	d017      	beq.n	2dc0 <cdcdf_acm_set_req+0x60>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    2d90:	2207      	movs	r2, #7
    2d92:	0001      	movs	r1, r0
    2d94:	4668      	mov	r0, sp
    2d96:	4b1b      	ldr	r3, [pc, #108]	; (2e04 <cdcdf_acm_set_req+0xa4>)
    2d98:	4798      	blx	r3
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    2d9a:	4b1b      	ldr	r3, [pc, #108]	; (2e08 <cdcdf_acm_set_req+0xa8>)
    2d9c:	689b      	ldr	r3, [r3, #8]
    2d9e:	2b00      	cmp	r3, #0
    2da0:	d003      	beq.n	2daa <cdcdf_acm_set_req+0x4a>
    2da2:	4668      	mov	r0, sp
    2da4:	4798      	blx	r3
    2da6:	2800      	cmp	r0, #0
    2da8:	d025      	beq.n	2df6 <cdcdf_acm_set_req+0x96>
				usbd_cdc_line_coding = line_coding_tmp;
    2daa:	4b17      	ldr	r3, [pc, #92]	; (2e08 <cdcdf_acm_set_req+0xa8>)
    2dac:	9a00      	ldr	r2, [sp, #0]
    2dae:	601a      	str	r2, [r3, #0]
    2db0:	466a      	mov	r2, sp
    2db2:	8892      	ldrh	r2, [r2, #4]
    2db4:	809a      	strh	r2, [r3, #4]
    2db6:	466a      	mov	r2, sp
    2db8:	7992      	ldrb	r2, [r2, #6]
    2dba:	719a      	strb	r2, [r3, #6]
			return ERR_NONE;
    2dbc:	2000      	movs	r0, #0
    2dbe:	e7e1      	b.n	2d84 <cdcdf_acm_set_req+0x24>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    2dc0:	2300      	movs	r3, #0
    2dc2:	0032      	movs	r2, r6
    2dc4:	0001      	movs	r1, r0
    2dc6:	0028      	movs	r0, r5
    2dc8:	4c10      	ldr	r4, [pc, #64]	; (2e0c <cdcdf_acm_set_req+0xac>)
    2dca:	47a0      	blx	r4
    2dcc:	e7da      	b.n	2d84 <cdcdf_acm_set_req+0x24>
		usbdc_xfer(0, NULL, 0, 0);
    2dce:	2300      	movs	r3, #0
    2dd0:	2200      	movs	r2, #0
    2dd2:	2100      	movs	r1, #0
    2dd4:	2000      	movs	r0, #0
    2dd6:	4c0d      	ldr	r4, [pc, #52]	; (2e0c <cdcdf_acm_set_req+0xac>)
    2dd8:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    2dda:	4b0b      	ldr	r3, [pc, #44]	; (2e08 <cdcdf_acm_set_req+0xa8>)
    2ddc:	68db      	ldr	r3, [r3, #12]
    2dde:	2b00      	cmp	r3, #0
    2de0:	d00b      	beq.n	2dfa <cdcdf_acm_set_req+0x9a>
			cdcdf_acm_notify_state(req->wValue);
    2de2:	78ba      	ldrb	r2, [r7, #2]
    2de4:	78f8      	ldrb	r0, [r7, #3]
    2de6:	0200      	lsls	r0, r0, #8
    2de8:	4310      	orrs	r0, r2
    2dea:	4798      	blx	r3
		return ERR_NONE;
    2dec:	2000      	movs	r0, #0
    2dee:	e7c9      	b.n	2d84 <cdcdf_acm_set_req+0x24>
			return ERR_INVALID_DATA;
    2df0:	2001      	movs	r0, #1
    2df2:	4240      	negs	r0, r0
    2df4:	e7c6      	b.n	2d84 <cdcdf_acm_set_req+0x24>
			return ERR_NONE;
    2df6:	2000      	movs	r0, #0
    2df8:	e7c4      	b.n	2d84 <cdcdf_acm_set_req+0x24>
		return ERR_NONE;
    2dfa:	2000      	movs	r0, #0
    2dfc:	e7c2      	b.n	2d84 <cdcdf_acm_set_req+0x24>
    2dfe:	46c0      	nop			; (mov r8, r8)
    2e00:	00003829 	.word	0x00003829
    2e04:	0000398d 	.word	0x0000398d
    2e08:	2000065c 	.word	0x2000065c
    2e0c:	0000329d 	.word	0x0000329d

00002e10 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    2e10:	b570      	push	{r4, r5, r6, lr}
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    2e12:	780c      	ldrb	r4, [r1, #0]
    2e14:	0965      	lsrs	r5, r4, #5
    2e16:	2303      	movs	r3, #3
    2e18:	402b      	ands	r3, r5
    2e1a:	2b01      	cmp	r3, #1
    2e1c:	d114      	bne.n	2e48 <cdcdf_acm_req+0x38>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    2e1e:	790d      	ldrb	r5, [r1, #4]
    2e20:	794b      	ldrb	r3, [r1, #5]
    2e22:	021b      	lsls	r3, r3, #8
    2e24:	432b      	orrs	r3, r5
    2e26:	4d0b      	ldr	r5, [pc, #44]	; (2e54 <cdcdf_acm_req+0x44>)
    2e28:	7c2d      	ldrb	r5, [r5, #16]
    2e2a:	42ab      	cmp	r3, r5
    2e2c:	d003      	beq.n	2e36 <cdcdf_acm_req+0x26>
    2e2e:	4d09      	ldr	r5, [pc, #36]	; (2e54 <cdcdf_acm_req+0x44>)
    2e30:	7c6d      	ldrb	r5, [r5, #17]
    2e32:	42ab      	cmp	r3, r5
    2e34:	d10b      	bne.n	2e4e <cdcdf_acm_req+0x3e>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    2e36:	b264      	sxtb	r4, r4
    2e38:	2c00      	cmp	r4, #0
    2e3a:	db02      	blt.n	2e42 <cdcdf_acm_req+0x32>
			return cdcdf_acm_get_req(ep, req, stage);
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    2e3c:	4b06      	ldr	r3, [pc, #24]	; (2e58 <cdcdf_acm_req+0x48>)
    2e3e:	4798      	blx	r3
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    2e40:	bd70      	pop	{r4, r5, r6, pc}
			return cdcdf_acm_get_req(ep, req, stage);
    2e42:	4b06      	ldr	r3, [pc, #24]	; (2e5c <cdcdf_acm_req+0x4c>)
    2e44:	4798      	blx	r3
    2e46:	e7fb      	b.n	2e40 <cdcdf_acm_req+0x30>
		return ERR_NOT_FOUND;
    2e48:	200a      	movs	r0, #10
    2e4a:	4240      	negs	r0, r0
    2e4c:	e7f8      	b.n	2e40 <cdcdf_acm_req+0x30>
		return ERR_NOT_FOUND;
    2e4e:	200a      	movs	r0, #10
    2e50:	4240      	negs	r0, r0
    2e52:	e7f5      	b.n	2e40 <cdcdf_acm_req+0x30>
    2e54:	2000065c 	.word	0x2000065c
    2e58:	00002d61 	.word	0x00002d61
    2e5c:	00002d25 	.word	0x00002d25

00002e60 <cdcdf_acm_enable>:
{
    2e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e62:	46ce      	mov	lr, r9
    2e64:	4647      	mov	r7, r8
    2e66:	b580      	push	{r7, lr}
    2e68:	000e      	movs	r6, r1
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    2e6a:	6887      	ldr	r7, [r0, #8]
	ifc = desc->sod;
    2e6c:	6808      	ldr	r0, [r1, #0]
	for (i = 0; i < 2; i++) {
    2e6e:	2300      	movs	r3, #0
    2e70:	4698      	mov	r8, r3
    2e72:	4643      	mov	r3, r8
    2e74:	2b01      	cmp	r3, #1
    2e76:	d845      	bhi.n	2f04 <cdcdf_acm_enable+0xa4>
		if (NULL == ifc) {
    2e78:	2800      	cmp	r0, #0
    2e7a:	d04b      	beq.n	2f14 <cdcdf_acm_enable+0xb4>
		ifc_desc.bInterfaceNumber = ifc[2];
    2e7c:	7883      	ldrb	r3, [r0, #2]
		ifc_desc.bInterfaceClass  = ifc[5];
    2e7e:	7942      	ldrb	r2, [r0, #5]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    2e80:	2a02      	cmp	r2, #2
    2e82:	d001      	beq.n	2e88 <cdcdf_acm_enable+0x28>
    2e84:	2a0a      	cmp	r2, #10
    2e86:	d148      	bne.n	2f1a <cdcdf_acm_enable+0xba>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    2e88:	46c1      	mov	r9, r8
    2e8a:	4642      	mov	r2, r8
    2e8c:	5cba      	ldrb	r2, [r7, r2]
    2e8e:	4293      	cmp	r3, r2
    2e90:	d046      	beq.n	2f20 <cdcdf_acm_enable+0xc0>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    2e92:	2aff      	cmp	r2, #255	; 0xff
    2e94:	d147      	bne.n	2f26 <cdcdf_acm_enable+0xc6>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    2e96:	4642      	mov	r2, r8
    2e98:	54bb      	strb	r3, [r7, r2]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    2e9a:	2205      	movs	r2, #5
    2e9c:	6871      	ldr	r1, [r6, #4]
    2e9e:	4b25      	ldr	r3, [pc, #148]	; (2f34 <cdcdf_acm_enable+0xd4>)
    2ea0:	4798      	blx	r3
    2ea2:	0004      	movs	r4, r0
		while (NULL != ep) {
    2ea4:	e00c      	b.n	2ec0 <cdcdf_acm_enable+0x60>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    2ea6:	464b      	mov	r3, r9
    2ea8:	18fb      	adds	r3, r7, r3
    2eaa:	709d      	strb	r5, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    2eac:	0028      	movs	r0, r5
    2eae:	4b22      	ldr	r3, [pc, #136]	; (2f38 <cdcdf_acm_enable+0xd8>)
    2eb0:	4798      	blx	r3
			desc->sod = ep;
    2eb2:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
	return desc[0];
    2eb4:	7820      	ldrb	r0, [r4, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    2eb6:	1820      	adds	r0, r4, r0
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    2eb8:	6871      	ldr	r1, [r6, #4]
    2eba:	4b20      	ldr	r3, [pc, #128]	; (2f3c <cdcdf_acm_enable+0xdc>)
    2ebc:	4798      	blx	r3
    2ebe:	0004      	movs	r4, r0
		while (NULL != ep) {
    2ec0:	2c00      	cmp	r4, #0
    2ec2:	d013      	beq.n	2eec <cdcdf_acm_enable+0x8c>
			ep_desc.bEndpointAddress = ep[2];
    2ec4:	78a5      	ldrb	r5, [r4, #2]
			ep_desc.bmAttributes     = ep[3];
    2ec6:	78e1      	ldrb	r1, [r4, #3]
	return (ptr[0] + (ptr[1] << 8));
    2ec8:	7922      	ldrb	r2, [r4, #4]
    2eca:	7963      	ldrb	r3, [r4, #5]
    2ecc:	021b      	lsls	r3, r3, #8
    2ece:	18d2      	adds	r2, r2, r3
    2ed0:	b292      	uxth	r2, r2
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    2ed2:	0028      	movs	r0, r5
    2ed4:	4b1a      	ldr	r3, [pc, #104]	; (2f40 <cdcdf_acm_enable+0xe0>)
    2ed6:	4798      	blx	r3
    2ed8:	2800      	cmp	r0, #0
    2eda:	d127      	bne.n	2f2c <cdcdf_acm_enable+0xcc>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    2edc:	b26b      	sxtb	r3, r5
    2ede:	2b00      	cmp	r3, #0
    2ee0:	dbe1      	blt.n	2ea6 <cdcdf_acm_enable+0x46>
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    2ee2:	713d      	strb	r5, [r7, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    2ee4:	0028      	movs	r0, r5
    2ee6:	4b14      	ldr	r3, [pc, #80]	; (2f38 <cdcdf_acm_enable+0xd8>)
    2ee8:	4798      	blx	r3
    2eea:	e7e2      	b.n	2eb2 <cdcdf_acm_enable+0x52>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    2eec:	6830      	ldr	r0, [r6, #0]
	return desc[0];
    2eee:	7803      	ldrb	r3, [r0, #0]
	return (desc + usb_desc_len(desc));
    2ef0:	18c0      	adds	r0, r0, r3
    2ef2:	2204      	movs	r2, #4
    2ef4:	6871      	ldr	r1, [r6, #4]
    2ef6:	4b0f      	ldr	r3, [pc, #60]	; (2f34 <cdcdf_acm_enable+0xd4>)
    2ef8:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    2efa:	4643      	mov	r3, r8
    2efc:	3301      	adds	r3, #1
    2efe:	b2db      	uxtb	r3, r3
    2f00:	4698      	mov	r8, r3
    2f02:	e7b6      	b.n	2e72 <cdcdf_acm_enable+0x12>
	_cdcdf_acm_funcd.enabled = true;
    2f04:	2201      	movs	r2, #1
    2f06:	4b0f      	ldr	r3, [pc, #60]	; (2f44 <cdcdf_acm_enable+0xe4>)
    2f08:	755a      	strb	r2, [r3, #21]
	return ERR_NONE;
    2f0a:	2000      	movs	r0, #0
}
    2f0c:	bc0c      	pop	{r2, r3}
    2f0e:	4690      	mov	r8, r2
    2f10:	4699      	mov	r9, r3
    2f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return ERR_NOT_FOUND;
    2f14:	200a      	movs	r0, #10
    2f16:	4240      	negs	r0, r0
    2f18:	e7f8      	b.n	2f0c <cdcdf_acm_enable+0xac>
			return ERR_NOT_FOUND;
    2f1a:	200a      	movs	r0, #10
    2f1c:	4240      	negs	r0, r0
    2f1e:	e7f5      	b.n	2f0c <cdcdf_acm_enable+0xac>
				return ERR_ALREADY_INITIALIZED;
    2f20:	2012      	movs	r0, #18
    2f22:	4240      	negs	r0, r0
    2f24:	e7f2      	b.n	2f0c <cdcdf_acm_enable+0xac>
				return ERR_NO_RESOURCE;
    2f26:	201c      	movs	r0, #28
    2f28:	4240      	negs	r0, r0
    2f2a:	e7ef      	b.n	2f0c <cdcdf_acm_enable+0xac>
				return ERR_NOT_INITIALIZED;
    2f2c:	2014      	movs	r0, #20
    2f2e:	4240      	negs	r0, r0
    2f30:	e7ec      	b.n	2f0c <cdcdf_acm_enable+0xac>
    2f32:	46c0      	nop			; (mov r8, r8)
    2f34:	00003845 	.word	0x00003845
    2f38:	00000ef5 	.word	0x00000ef5
    2f3c:	00003863 	.word	0x00003863
    2f40:	00000e61 	.word	0x00000e61
    2f44:	2000065c 	.word	0x2000065c

00002f48 <cdcdf_acm_disable>:
{
    2f48:	b570      	push	{r4, r5, r6, lr}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    2f4a:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    2f4c:	2900      	cmp	r1, #0
    2f4e:	d01a      	beq.n	2f86 <cdcdf_acm_disable+0x3e>
		ifc_desc.bInterfaceClass = desc->sod[5];
    2f50:	680b      	ldr	r3, [r1, #0]
    2f52:	795b      	ldrb	r3, [r3, #5]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    2f54:	2b02      	cmp	r3, #2
    2f56:	d018      	beq.n	2f8a <cdcdf_acm_disable+0x42>
    2f58:	2b0a      	cmp	r3, #10
    2f5a:	d124      	bne.n	2fa6 <cdcdf_acm_disable+0x5e>
    2f5c:	2400      	movs	r4, #0
    2f5e:	e001      	b.n	2f64 <cdcdf_acm_disable+0x1c>
	for (i = 0; i < 2; i++) {
    2f60:	3401      	adds	r4, #1
    2f62:	b2e4      	uxtb	r4, r4
    2f64:	2c01      	cmp	r4, #1
    2f66:	d812      	bhi.n	2f8e <cdcdf_acm_disable+0x46>
		if (func_data->func_iface[i] == 0xFF) {
    2f68:	5d2b      	ldrb	r3, [r5, r4]
    2f6a:	2bff      	cmp	r3, #255	; 0xff
    2f6c:	d0f8      	beq.n	2f60 <cdcdf_acm_disable+0x18>
			func_data->func_iface[i] = 0xFF;
    2f6e:	23ff      	movs	r3, #255	; 0xff
    2f70:	552b      	strb	r3, [r5, r4]
			if (func_data->func_ep_in[i] != 0xFF) {
    2f72:	192b      	adds	r3, r5, r4
    2f74:	7898      	ldrb	r0, [r3, #2]
    2f76:	28ff      	cmp	r0, #255	; 0xff
    2f78:	d0f2      	beq.n	2f60 <cdcdf_acm_disable+0x18>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    2f7a:	4b0c      	ldr	r3, [pc, #48]	; (2fac <cdcdf_acm_disable+0x64>)
    2f7c:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    2f7e:	192e      	adds	r6, r5, r4
    2f80:	22ff      	movs	r2, #255	; 0xff
    2f82:	70b2      	strb	r2, [r6, #2]
    2f84:	e7ec      	b.n	2f60 <cdcdf_acm_disable+0x18>
    2f86:	2400      	movs	r4, #0
    2f88:	e7ec      	b.n	2f64 <cdcdf_acm_disable+0x1c>
    2f8a:	2400      	movs	r4, #0
    2f8c:	e7ea      	b.n	2f64 <cdcdf_acm_disable+0x1c>
	if (func_data->func_ep_out != 0xFF) {
    2f8e:	7928      	ldrb	r0, [r5, #4]
    2f90:	28ff      	cmp	r0, #255	; 0xff
    2f92:	d003      	beq.n	2f9c <cdcdf_acm_disable+0x54>
		usb_d_ep_deinit(func_data->func_ep_out);
    2f94:	4b05      	ldr	r3, [pc, #20]	; (2fac <cdcdf_acm_disable+0x64>)
    2f96:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    2f98:	23ff      	movs	r3, #255	; 0xff
    2f9a:	712b      	strb	r3, [r5, #4]
	_cdcdf_acm_funcd.enabled = false;
    2f9c:	2200      	movs	r2, #0
    2f9e:	4b04      	ldr	r3, [pc, #16]	; (2fb0 <cdcdf_acm_disable+0x68>)
    2fa0:	755a      	strb	r2, [r3, #21]
	return ERR_NONE;
    2fa2:	2000      	movs	r0, #0
}
    2fa4:	bd70      	pop	{r4, r5, r6, pc}
			return ERR_NOT_FOUND;
    2fa6:	200a      	movs	r0, #10
    2fa8:	4240      	negs	r0, r0
    2faa:	e7fb      	b.n	2fa4 <cdcdf_acm_disable+0x5c>
    2fac:	00000ec9 	.word	0x00000ec9
    2fb0:	2000065c 	.word	0x2000065c

00002fb4 <cdcdf_acm_ctrl>:
{
    2fb4:	b510      	push	{r4, lr}
	switch (ctrl) {
    2fb6:	2901      	cmp	r1, #1
    2fb8:	d00a      	beq.n	2fd0 <cdcdf_acm_ctrl+0x1c>
    2fba:	2900      	cmp	r1, #0
    2fbc:	d004      	beq.n	2fc8 <cdcdf_acm_ctrl+0x14>
    2fbe:	2902      	cmp	r1, #2
    2fc0:	d10a      	bne.n	2fd8 <cdcdf_acm_ctrl+0x24>
		return ERR_UNSUPPORTED_OP;
    2fc2:	201b      	movs	r0, #27
    2fc4:	4240      	negs	r0, r0
}
    2fc6:	bd10      	pop	{r4, pc}
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    2fc8:	0011      	movs	r1, r2
    2fca:	4b05      	ldr	r3, [pc, #20]	; (2fe0 <cdcdf_acm_ctrl+0x2c>)
    2fcc:	4798      	blx	r3
    2fce:	e7fa      	b.n	2fc6 <cdcdf_acm_ctrl+0x12>
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    2fd0:	0011      	movs	r1, r2
    2fd2:	4b04      	ldr	r3, [pc, #16]	; (2fe4 <cdcdf_acm_ctrl+0x30>)
    2fd4:	4798      	blx	r3
    2fd6:	e7f6      	b.n	2fc6 <cdcdf_acm_ctrl+0x12>
		return ERR_INVALID_ARG;
    2fd8:	200d      	movs	r0, #13
    2fda:	4240      	negs	r0, r0
    2fdc:	e7f3      	b.n	2fc6 <cdcdf_acm_ctrl+0x12>
    2fde:	46c0      	nop			; (mov r8, r8)
    2fe0:	00002e61 	.word	0x00002e61
    2fe4:	00002f49 	.word	0x00002f49

00002fe8 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    2fe8:	b510      	push	{r4, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    2fea:	4b0b      	ldr	r3, [pc, #44]	; (3018 <cdcdf_acm_init+0x30>)
    2fec:	4798      	blx	r3
    2fee:	2801      	cmp	r0, #1
    2ff0:	d80e      	bhi.n	3010 <cdcdf_acm_init+0x28>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    2ff2:	480a      	ldr	r0, [pc, #40]	; (301c <cdcdf_acm_init+0x34>)
    2ff4:	4b0a      	ldr	r3, [pc, #40]	; (3020 <cdcdf_acm_init+0x38>)
    2ff6:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    2ff8:	0003      	movs	r3, r0
    2ffa:	3310      	adds	r3, #16
    2ffc:	6203      	str	r3, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    2ffe:	3018      	adds	r0, #24
    3000:	4b08      	ldr	r3, [pc, #32]	; (3024 <cdcdf_acm_init+0x3c>)
    3002:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    3004:	4908      	ldr	r1, [pc, #32]	; (3028 <cdcdf_acm_init+0x40>)
    3006:	2001      	movs	r0, #1
    3008:	4b08      	ldr	r3, [pc, #32]	; (302c <cdcdf_acm_init+0x44>)
    300a:	4798      	blx	r3
	return ERR_NONE;
    300c:	2000      	movs	r0, #0
}
    300e:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    3010:	2011      	movs	r0, #17
    3012:	4240      	negs	r0, r0
    3014:	e7fb      	b.n	300e <cdcdf_acm_init+0x26>
    3016:	46c0      	nop			; (mov r8, r8)
    3018:	00003835 	.word	0x00003835
    301c:	2000065c 	.word	0x2000065c
    3020:	00002fb5 	.word	0x00002fb5
    3024:	000037cd 	.word	0x000037cd
    3028:	20000000 	.word	0x20000000
    302c:	00003735 	.word	0x00003735

00003030 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    3030:	b510      	push	{r4, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    3032:	4b06      	ldr	r3, [pc, #24]	; (304c <usbdc_unconfig+0x1c>)
    3034:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    3036:	e005      	b.n	3044 <usbdc_unconfig+0x14>
		func->ctrl(func, USBDF_DISABLE, NULL);
    3038:	2200      	movs	r2, #0
    303a:	2101      	movs	r1, #1
    303c:	0020      	movs	r0, r4
    303e:	6863      	ldr	r3, [r4, #4]
    3040:	4798      	blx	r3
		func = func->next;
    3042:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    3044:	2c00      	cmp	r4, #0
    3046:	d1f7      	bne.n	3038 <usbdc_unconfig+0x8>
	}
}
    3048:	bd10      	pop	{r4, pc}
    304a:	46c0      	nop			; (mov r8, r8)
    304c:	20000680 	.word	0x20000680

00003050 <usbdc_sof_notify>:
	}
}

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    3050:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    3052:	4b06      	ldr	r3, [pc, #24]	; (306c <usbdc_sof_notify+0x1c>)
    3054:	685c      	ldr	r4, [r3, #4]

	while (sof != NULL) {
    3056:	e000      	b.n	305a <usbdc_sof_notify+0xa>
		if (NULL != sof->cb) {
			sof->cb();
		}
		sof = sof->next;
    3058:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    305a:	2c00      	cmp	r4, #0
    305c:	d004      	beq.n	3068 <usbdc_sof_notify+0x18>
		if (NULL != sof->cb) {
    305e:	6863      	ldr	r3, [r4, #4]
    3060:	2b00      	cmp	r3, #0
    3062:	d0f9      	beq.n	3058 <usbdc_sof_notify+0x8>
			sof->cb();
    3064:	4798      	blx	r3
    3066:	e7f7      	b.n	3058 <usbdc_sof_notify+0x8>
	}
}
    3068:	bd10      	pop	{r4, pc}
    306a:	46c0      	nop			; (mov r8, r8)
    306c:	20000680 	.word	0x20000680

00003070 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    3070:	b570      	push	{r4, r5, r6, lr}
    3072:	0006      	movs	r6, r0
    3074:	000d      	movs	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    3076:	4b07      	ldr	r3, [pc, #28]	; (3094 <usbdc_change_notify+0x24>)
    3078:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    307a:	e000      	b.n	307e <usbdc_change_notify+0xe>
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
    307c:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    307e:	2c00      	cmp	r4, #0
    3080:	d006      	beq.n	3090 <usbdc_change_notify+0x20>
		if (NULL != cg->cb) {
    3082:	6863      	ldr	r3, [r4, #4]
    3084:	2b00      	cmp	r3, #0
    3086:	d0f9      	beq.n	307c <usbdc_change_notify+0xc>
			cg->cb(change, value);
    3088:	0029      	movs	r1, r5
    308a:	0030      	movs	r0, r6
    308c:	4798      	blx	r3
    308e:	e7f5      	b.n	307c <usbdc_change_notify+0xc>
	}
}
    3090:	bd70      	pop	{r4, r5, r6, pc}
    3092:	46c0      	nop			; (mov r8, r8)
    3094:	20000680 	.word	0x20000680

00003098 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    3098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    309a:	0007      	movs	r7, r0
    309c:	000e      	movs	r6, r1
    309e:	0015      	movs	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    30a0:	4b0b      	ldr	r3, [pc, #44]	; (30d0 <usbdc_request_handler+0x38>)
    30a2:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    30a4:	e000      	b.n	30a8 <usbdc_request_handler+0x10>
				return true;
			} else if (ERR_NOT_FOUND != rc) {
				return -1;
			}
		}
		h = h->next;
    30a6:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    30a8:	2c00      	cmp	r4, #0
    30aa:	d00d      	beq.n	30c8 <usbdc_request_handler+0x30>
		if (NULL != h->cb) {
    30ac:	6863      	ldr	r3, [r4, #4]
    30ae:	2b00      	cmp	r3, #0
    30b0:	d0f9      	beq.n	30a6 <usbdc_request_handler+0xe>
			rc = h->cb(ep, req, stage);
    30b2:	002a      	movs	r2, r5
    30b4:	0031      	movs	r1, r6
    30b6:	0038      	movs	r0, r7
    30b8:	4798      	blx	r3
			if (0 == rc) {
    30ba:	2800      	cmp	r0, #0
    30bc:	d006      	beq.n	30cc <usbdc_request_handler+0x34>
			} else if (ERR_NOT_FOUND != rc) {
    30be:	300a      	adds	r0, #10
    30c0:	d0f1      	beq.n	30a6 <usbdc_request_handler+0xe>
				return -1;
    30c2:	2001      	movs	r0, #1
    30c4:	4240      	negs	r0, r0
    30c6:	e000      	b.n	30ca <usbdc_request_handler+0x32>
	}
	return false;
    30c8:	2000      	movs	r0, #0
}
    30ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    30cc:	2001      	movs	r0, #1
    30ce:	e7fc      	b.n	30ca <usbdc_request_handler+0x32>
    30d0:	20000680 	.word	0x20000680

000030d4 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    30d4:	b510      	push	{r4, lr}
	usbdc_sof_notify();
    30d6:	4b01      	ldr	r3, [pc, #4]	; (30dc <usbd_sof_cb+0x8>)
    30d8:	4798      	blx	r3
}
    30da:	bd10      	pop	{r4, pc}
    30dc:	00003051 	.word	0x00003051

000030e0 <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    30e0:	b510      	push	{r4, lr}
    30e2:	0001      	movs	r1, r0
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    30e4:	2201      	movs	r2, #1
    30e6:	2000      	movs	r0, #0
    30e8:	4b01      	ldr	r3, [pc, #4]	; (30f0 <usbdc_ctrl_data_end+0x10>)
    30ea:	4798      	blx	r3
	return false;
}
    30ec:	2000      	movs	r0, #0
    30ee:	bd10      	pop	{r4, pc}
    30f0:	00003099 	.word	0x00003099

000030f4 <usbdc_set_address>:
{
    30f4:	b510      	push	{r4, lr}
	usb_d_set_address(addr);
    30f6:	4b01      	ldr	r3, [pc, #4]	; (30fc <usbdc_set_address+0x8>)
    30f8:	4798      	blx	r3
}
    30fa:	bd10      	pop	{r4, pc}
    30fc:	00000e55 	.word	0x00000e55

00003100 <usbdc_ctrl_status_end>:
{
    3100:	b510      	push	{r4, lr}
    3102:	0004      	movs	r4, r0
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    3104:	7803      	ldrb	r3, [r0, #0]
    3106:	2b00      	cmp	r3, #0
    3108:	d112      	bne.n	3130 <usbdc_ctrl_status_end+0x30>
	switch (req->bRequest) {
    310a:	7843      	ldrb	r3, [r0, #1]
    310c:	2b05      	cmp	r3, #5
    310e:	d012      	beq.n	3136 <usbdc_ctrl_status_end+0x36>
    3110:	2b09      	cmp	r3, #9
    3112:	d10d      	bne.n	3130 <usbdc_ctrl_status_end+0x30>
		usbdc.cfg_value = req->wValue;
    3114:	7882      	ldrb	r2, [r0, #2]
    3116:	4b10      	ldr	r3, [pc, #64]	; (3158 <usbdc_ctrl_status_end+0x58>)
    3118:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    311a:	7882      	ldrb	r2, [r0, #2]
    311c:	78c3      	ldrb	r3, [r0, #3]
    311e:	021b      	lsls	r3, r3, #8
    3120:	4313      	orrs	r3, r2
    3122:	d106      	bne.n	3132 <usbdc_ctrl_status_end+0x32>
    3124:	2103      	movs	r1, #3
    3126:	4b0c      	ldr	r3, [pc, #48]	; (3158 <usbdc_ctrl_status_end+0x58>)
    3128:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    312a:	2001      	movs	r0, #1
    312c:	4b0b      	ldr	r3, [pc, #44]	; (315c <usbdc_ctrl_status_end+0x5c>)
    312e:	4798      	blx	r3
}
    3130:	bd10      	pop	{r4, pc}
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    3132:	2104      	movs	r1, #4
    3134:	e7f7      	b.n	3126 <usbdc_ctrl_status_end+0x26>
		usbdc_set_address(req->wValue);
    3136:	7880      	ldrb	r0, [r0, #2]
    3138:	4b09      	ldr	r3, [pc, #36]	; (3160 <usbdc_ctrl_status_end+0x60>)
    313a:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    313c:	78a2      	ldrb	r2, [r4, #2]
    313e:	78e3      	ldrb	r3, [r4, #3]
    3140:	021b      	lsls	r3, r3, #8
    3142:	4313      	orrs	r3, r2
    3144:	d006      	beq.n	3154 <usbdc_ctrl_status_end+0x54>
    3146:	2103      	movs	r1, #3
    3148:	4b03      	ldr	r3, [pc, #12]	; (3158 <usbdc_ctrl_status_end+0x58>)
    314a:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    314c:	2001      	movs	r0, #1
    314e:	4b03      	ldr	r3, [pc, #12]	; (315c <usbdc_ctrl_status_end+0x5c>)
    3150:	4798      	blx	r3
		break;
    3152:	e7ed      	b.n	3130 <usbdc_ctrl_status_end+0x30>
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    3154:	2102      	movs	r1, #2
    3156:	e7f7      	b.n	3148 <usbdc_ctrl_status_end+0x48>
    3158:	20000680 	.word	0x20000680
    315c:	00003071 	.word	0x00003071
    3160:	000030f5 	.word	0x000030f5

00003164 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    3164:	b510      	push	{r4, lr}
	(void)ep;

	switch (code) {
    3166:	2900      	cmp	r1, #0
    3168:	d003      	beq.n	3172 <usbdc_cb_ctl_done+0xe>
    316a:	2901      	cmp	r1, #1
    316c:	d006      	beq.n	317c <usbdc_cb_ctl_done+0x18>
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
    316e:	2000      	movs	r0, #0
    3170:	e003      	b.n	317a <usbdc_cb_ctl_done+0x16>
		usbdc_ctrl_status_end(req);
    3172:	0010      	movs	r0, r2
    3174:	4b03      	ldr	r3, [pc, #12]	; (3184 <usbdc_cb_ctl_done+0x20>)
    3176:	4798      	blx	r3
	return false;
    3178:	2000      	movs	r0, #0
}
    317a:	bd10      	pop	{r4, pc}
		return usbdc_ctrl_data_end(req);
    317c:	0010      	movs	r0, r2
    317e:	4b02      	ldr	r3, [pc, #8]	; (3188 <usbdc_cb_ctl_done+0x24>)
    3180:	4798      	blx	r3
    3182:	e7fa      	b.n	317a <usbdc_cb_ctl_done+0x16>
    3184:	00003101 	.word	0x00003101
    3188:	000030e1 	.word	0x000030e1

0000318c <usbdc_set_config>:
{
    318c:	b530      	push	{r4, r5, lr}
    318e:	b083      	sub	sp, #12
    3190:	1e02      	subs	r2, r0, #0
	if (cfg_value == 0) {
    3192:	d014      	beq.n	31be <usbdc_set_config+0x32>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    3194:	4b1e      	ldr	r3, [pc, #120]	; (3210 <usbdc_set_config+0x84>)
    3196:	681b      	ldr	r3, [r3, #0]
    3198:	6818      	ldr	r0, [r3, #0]
    319a:	6859      	ldr	r1, [r3, #4]
    319c:	4b1d      	ldr	r3, [pc, #116]	; (3214 <usbdc_set_config+0x88>)
    319e:	4798      	blx	r3
	if (NULL == cfg_desc) {
    31a0:	2800      	cmp	r0, #0
    31a2:	d032      	beq.n	320a <usbdc_set_config+0x7e>
	return (ptr[0] + (ptr[1] << 8));
    31a4:	7881      	ldrb	r1, [r0, #2]
    31a6:	78c3      	ldrb	r3, [r0, #3]
    31a8:	021b      	lsls	r3, r3, #8
    31aa:	18c9      	adds	r1, r1, r3
    31ac:	b289      	uxth	r1, r1
	desc.eod  = cfg_desc + total_len;
    31ae:	1841      	adds	r1, r0, r1
    31b0:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    31b2:	2204      	movs	r2, #4
    31b4:	4b18      	ldr	r3, [pc, #96]	; (3218 <usbdc_set_config+0x8c>)
    31b6:	4798      	blx	r3
    31b8:	9000      	str	r0, [sp, #0]
	uint8_t                 last_iface = 0xFF;
    31ba:	24ff      	movs	r4, #255	; 0xff
	while (NULL != desc.sod) {
    31bc:	e00d      	b.n	31da <usbdc_set_config+0x4e>
		usbdc_unconfig();
    31be:	4b17      	ldr	r3, [pc, #92]	; (321c <usbdc_set_config+0x90>)
    31c0:	4798      	blx	r3
		return true;
    31c2:	2001      	movs	r0, #1
    31c4:	e01f      	b.n	3206 <usbdc_set_config+0x7a>
			last_iface = desc.sod[2];
    31c6:	002c      	movs	r4, r5
		desc.sod = usb_desc_next(desc.sod);
    31c8:	9800      	ldr	r0, [sp, #0]
	return desc[0];
    31ca:	7803      	ldrb	r3, [r0, #0]
	return (desc + usb_desc_len(desc));
    31cc:	18c0      	adds	r0, r0, r3
    31ce:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    31d0:	2204      	movs	r2, #4
    31d2:	9901      	ldr	r1, [sp, #4]
    31d4:	4b10      	ldr	r3, [pc, #64]	; (3218 <usbdc_set_config+0x8c>)
    31d6:	4798      	blx	r3
    31d8:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    31da:	9b00      	ldr	r3, [sp, #0]
    31dc:	2b00      	cmp	r3, #0
    31de:	d011      	beq.n	3204 <usbdc_set_config+0x78>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    31e0:	789d      	ldrb	r5, [r3, #2]
    31e2:	42ac      	cmp	r4, r5
    31e4:	d0f0      	beq.n	31c8 <usbdc_set_config+0x3c>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    31e6:	4b0a      	ldr	r3, [pc, #40]	; (3210 <usbdc_set_config+0x84>)
    31e8:	691c      	ldr	r4, [r3, #16]
			while (NULL != func) {
    31ea:	2c00      	cmp	r4, #0
    31ec:	d0eb      	beq.n	31c6 <usbdc_set_config+0x3a>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    31ee:	466a      	mov	r2, sp
    31f0:	2100      	movs	r1, #0
    31f2:	0020      	movs	r0, r4
    31f4:	6863      	ldr	r3, [r4, #4]
    31f6:	4798      	blx	r3
    31f8:	2800      	cmp	r0, #0
    31fa:	d001      	beq.n	3200 <usbdc_set_config+0x74>
					func = func->next;
    31fc:	6824      	ldr	r4, [r4, #0]
    31fe:	e7f4      	b.n	31ea <usbdc_set_config+0x5e>
			last_iface = desc.sod[2];
    3200:	002c      	movs	r4, r5
    3202:	e7e1      	b.n	31c8 <usbdc_set_config+0x3c>
	return true;
    3204:	2001      	movs	r0, #1
}
    3206:	b003      	add	sp, #12
    3208:	bd30      	pop	{r4, r5, pc}
		return false;
    320a:	2000      	movs	r0, #0
    320c:	e7fb      	b.n	3206 <usbdc_set_config+0x7a>
    320e:	46c0      	nop			; (mov r8, r8)
    3210:	20000680 	.word	0x20000680
    3214:	00003889 	.word	0x00003889
    3218:	00003845 	.word	0x00003845
    321c:	00003031 	.word	0x00003031

00003220 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    3220:	b510      	push	{r4, lr}
	usbdc_unconfig();
    3222:	4b0d      	ldr	r3, [pc, #52]	; (3258 <usbdc_reset+0x38>)
    3224:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    3226:	4c0d      	ldr	r4, [pc, #52]	; (325c <usbdc_reset+0x3c>)
    3228:	2302      	movs	r3, #2
    322a:	76a3      	strb	r3, [r4, #26]
	usbdc.cfg_value   = 0;
    322c:	2300      	movs	r3, #0
    322e:	76e3      	strb	r3, [r4, #27]
	usbdc.ifc_alt_map = 0;
    3230:	7763      	strb	r3, [r4, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    3232:	2000      	movs	r0, #0
    3234:	4b0a      	ldr	r3, [pc, #40]	; (3260 <usbdc_reset+0x40>)
    3236:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    3238:	7f20      	ldrb	r0, [r4, #28]
    323a:	4b0a      	ldr	r3, [pc, #40]	; (3264 <usbdc_reset+0x44>)
    323c:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    323e:	4a0a      	ldr	r2, [pc, #40]	; (3268 <usbdc_reset+0x48>)
    3240:	2100      	movs	r1, #0
    3242:	2000      	movs	r0, #0
    3244:	4c09      	ldr	r4, [pc, #36]	; (326c <usbdc_reset+0x4c>)
    3246:	47a0      	blx	r4
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    3248:	4a09      	ldr	r2, [pc, #36]	; (3270 <usbdc_reset+0x50>)
    324a:	2102      	movs	r1, #2
    324c:	2000      	movs	r0, #0
    324e:	47a0      	blx	r4
	usb_d_ep_enable(0);
    3250:	2000      	movs	r0, #0
    3252:	4b08      	ldr	r3, [pc, #32]	; (3274 <usbdc_reset+0x54>)
    3254:	4798      	blx	r3
}
    3256:	bd10      	pop	{r4, pc}
    3258:	00003031 	.word	0x00003031
    325c:	20000680 	.word	0x20000680
    3260:	00000ec9 	.word	0x00000ec9
    3264:	00000eb5 	.word	0x00000eb5
    3268:	000036e9 	.word	0x000036e9
    326c:	000010d1 	.word	0x000010d1
    3270:	00003165 	.word	0x00003165
    3274:	00000ef5 	.word	0x00000ef5

00003278 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    3278:	b510      	push	{r4, lr}
	(void)param;

	switch (ev) {
    327a:	2800      	cmp	r0, #0
    327c:	d002      	beq.n	3284 <usbd_event_cb+0xc>
    327e:	2801      	cmp	r0, #1
    3280:	d004      	beq.n	328c <usbd_event_cb+0x14>
		break;

	default:
		break;
	}
}
    3282:	bd10      	pop	{r4, pc}
		usbdc_change_notify(USBDC_C_CONN, param);
    3284:	2000      	movs	r0, #0
    3286:	4b03      	ldr	r3, [pc, #12]	; (3294 <usbd_event_cb+0x1c>)
    3288:	4798      	blx	r3
		break;
    328a:	e7fa      	b.n	3282 <usbd_event_cb+0xa>
		usbdc_reset();
    328c:	4b02      	ldr	r3, [pc, #8]	; (3298 <usbd_event_cb+0x20>)
    328e:	4798      	blx	r3
}
    3290:	e7f7      	b.n	3282 <usbd_event_cb+0xa>
    3292:	46c0      	nop			; (mov r8, r8)
    3294:	00003071 	.word	0x00003071
    3298:	00003221 	.word	0x00003221

0000329c <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    329c:	b510      	push	{r4, lr}
    329e:	b084      	sub	sp, #16
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    32a0:	ac01      	add	r4, sp, #4
    32a2:	9101      	str	r1, [sp, #4]
    32a4:	9202      	str	r2, [sp, #8]
    32a6:	7220      	strb	r0, [r4, #8]
    32a8:	7263      	strb	r3, [r4, #9]
	return usb_d_ep_transfer(&xfer);
    32aa:	0020      	movs	r0, r4
    32ac:	4b01      	ldr	r3, [pc, #4]	; (32b4 <usbdc_xfer+0x18>)
    32ae:	4798      	blx	r3
}
    32b0:	b004      	add	sp, #16
    32b2:	bd10      	pop	{r4, pc}
    32b4:	00000f45 	.word	0x00000f45

000032b8 <usbdc_clear_ftr_req>:
{
    32b8:	b510      	push	{r4, lr}
    32ba:	0004      	movs	r4, r0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    32bc:	780a      	ldrb	r2, [r1, #0]
    32be:	231f      	movs	r3, #31
    32c0:	4013      	ands	r3, r2
    32c2:	2b02      	cmp	r3, #2
    32c4:	d112      	bne.n	32ec <usbdc_clear_ftr_req+0x34>
		if (req->wLength != 0) {
    32c6:	798a      	ldrb	r2, [r1, #6]
    32c8:	79cb      	ldrb	r3, [r1, #7]
    32ca:	021b      	lsls	r3, r3, #8
    32cc:	4313      	orrs	r3, r2
    32ce:	d001      	beq.n	32d4 <usbdc_clear_ftr_req+0x1c>
			return false;
    32d0:	2000      	movs	r0, #0
    32d2:	e00c      	b.n	32ee <usbdc_clear_ftr_req+0x36>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    32d4:	7908      	ldrb	r0, [r1, #4]
    32d6:	2100      	movs	r1, #0
    32d8:	4b05      	ldr	r3, [pc, #20]	; (32f0 <usbdc_clear_ftr_req+0x38>)
    32da:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    32dc:	2301      	movs	r3, #1
    32de:	2200      	movs	r2, #0
    32e0:	2100      	movs	r1, #0
    32e2:	0020      	movs	r0, r4
    32e4:	4c03      	ldr	r4, [pc, #12]	; (32f4 <usbdc_clear_ftr_req+0x3c>)
    32e6:	47a0      	blx	r4
		return true;
    32e8:	2001      	movs	r0, #1
    32ea:	e000      	b.n	32ee <usbdc_clear_ftr_req+0x36>
		return false;
    32ec:	2000      	movs	r0, #0
}
    32ee:	bd10      	pop	{r4, pc}
    32f0:	00001069 	.word	0x00001069
    32f4:	0000329d 	.word	0x0000329d

000032f8 <usbdc_set_ftr_req>:
{
    32f8:	b510      	push	{r4, lr}
    32fa:	0004      	movs	r4, r0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    32fc:	780a      	ldrb	r2, [r1, #0]
    32fe:	231f      	movs	r3, #31
    3300:	4013      	ands	r3, r2
    3302:	2b02      	cmp	r3, #2
    3304:	d112      	bne.n	332c <usbdc_set_ftr_req+0x34>
		if (req->wLength != 0) {
    3306:	798a      	ldrb	r2, [r1, #6]
    3308:	79cb      	ldrb	r3, [r1, #7]
    330a:	021b      	lsls	r3, r3, #8
    330c:	4313      	orrs	r3, r2
    330e:	d001      	beq.n	3314 <usbdc_set_ftr_req+0x1c>
			return false;
    3310:	2000      	movs	r0, #0
    3312:	e00c      	b.n	332e <usbdc_set_ftr_req+0x36>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    3314:	7908      	ldrb	r0, [r1, #4]
    3316:	2101      	movs	r1, #1
    3318:	4b05      	ldr	r3, [pc, #20]	; (3330 <usbdc_set_ftr_req+0x38>)
    331a:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    331c:	2301      	movs	r3, #1
    331e:	2200      	movs	r2, #0
    3320:	2100      	movs	r1, #0
    3322:	0020      	movs	r0, r4
    3324:	4c03      	ldr	r4, [pc, #12]	; (3334 <usbdc_set_ftr_req+0x3c>)
    3326:	47a0      	blx	r4
		return true;
    3328:	2001      	movs	r0, #1
    332a:	e000      	b.n	332e <usbdc_set_ftr_req+0x36>
		return false;
    332c:	2000      	movs	r0, #0
}
    332e:	bd10      	pop	{r4, pc}
    3330:	00001069 	.word	0x00001069
    3334:	0000329d 	.word	0x0000329d

00003338 <usbdc_set_interface>:
{
    3338:	b570      	push	{r4, r5, r6, lr}
    333a:	b082      	sub	sp, #8
    333c:	0005      	movs	r5, r0
    333e:	000c      	movs	r4, r1
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    3340:	4b2a      	ldr	r3, [pc, #168]	; (33ec <usbdc_set_interface+0xb4>)
    3342:	681a      	ldr	r2, [r3, #0]
    3344:	6810      	ldr	r0, [r2, #0]
    3346:	6851      	ldr	r1, [r2, #4]
    3348:	7eda      	ldrb	r2, [r3, #27]
    334a:	4b29      	ldr	r3, [pc, #164]	; (33f0 <usbdc_set_interface+0xb8>)
    334c:	4798      	blx	r3
	if (NULL == ifc) {
    334e:	2800      	cmp	r0, #0
    3350:	d045      	beq.n	33de <usbdc_set_interface+0xa6>
	desc.sod = ifc;
    3352:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    3354:	7881      	ldrb	r1, [r0, #2]
    3356:	78c3      	ldrb	r3, [r0, #3]
    3358:	021b      	lsls	r3, r3, #8
    335a:	18c9      	adds	r1, r1, r3
    335c:	b289      	uxth	r1, r1
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    335e:	1841      	adds	r1, r0, r1
    3360:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    3362:	2204      	movs	r2, #4
    3364:	4b23      	ldr	r3, [pc, #140]	; (33f4 <usbdc_set_interface+0xbc>)
    3366:	4798      	blx	r3
    3368:	2800      	cmp	r0, #0
    336a:	d10b      	bne.n	3384 <usbdc_set_interface+0x4c>
		return false;
    336c:	2000      	movs	r0, #0
    336e:	e039      	b.n	33e4 <usbdc_set_interface+0xac>
		desc.sod = usb_desc_next(desc.sod);
    3370:	9800      	ldr	r0, [sp, #0]
	return desc[0];
    3372:	7803      	ldrb	r3, [r0, #0]
	return (desc + usb_desc_len(desc));
    3374:	18c0      	adds	r0, r0, r3
    3376:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    3378:	2204      	movs	r2, #4
    337a:	9901      	ldr	r1, [sp, #4]
    337c:	4b1d      	ldr	r3, [pc, #116]	; (33f4 <usbdc_set_interface+0xbc>)
    337e:	4798      	blx	r3
		if (NULL == ifc) {
    3380:	2800      	cmp	r0, #0
    3382:	d02e      	beq.n	33e2 <usbdc_set_interface+0xaa>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    3384:	7883      	ldrb	r3, [r0, #2]
    3386:	42a3      	cmp	r3, r4
    3388:	d1f2      	bne.n	3370 <usbdc_set_interface+0x38>
    338a:	78c3      	ldrb	r3, [r0, #3]
    338c:	42ab      	cmp	r3, r5
    338e:	d1ef      	bne.n	3370 <usbdc_set_interface+0x38>
	desc.sod = ifc;
    3390:	9000      	str	r0, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    3392:	4b16      	ldr	r3, [pc, #88]	; (33ec <usbdc_set_interface+0xb4>)
    3394:	691e      	ldr	r6, [r3, #16]
	while (NULL != func) {
    3396:	2e00      	cmp	r6, #0
    3398:	d01f      	beq.n	33da <usbdc_set_interface+0xa2>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    339a:	466a      	mov	r2, sp
    339c:	2101      	movs	r1, #1
    339e:	0030      	movs	r0, r6
    33a0:	6873      	ldr	r3, [r6, #4]
    33a2:	4798      	blx	r3
    33a4:	2800      	cmp	r0, #0
    33a6:	d001      	beq.n	33ac <usbdc_set_interface+0x74>
			func = func->next;
    33a8:	6836      	ldr	r6, [r6, #0]
    33aa:	e7f4      	b.n	3396 <usbdc_set_interface+0x5e>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    33ac:	6873      	ldr	r3, [r6, #4]
    33ae:	466a      	mov	r2, sp
    33b0:	2100      	movs	r1, #0
    33b2:	0030      	movs	r0, r6
    33b4:	4798      	blx	r3
    33b6:	2800      	cmp	r0, #0
    33b8:	d116      	bne.n	33e8 <usbdc_set_interface+0xb0>
			if (alt_set) {
    33ba:	2d00      	cmp	r5, #0
    33bc:	d005      	beq.n	33ca <usbdc_set_interface+0x92>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    33be:	2201      	movs	r2, #1
    33c0:	40a2      	lsls	r2, r4
    33c2:	490a      	ldr	r1, [pc, #40]	; (33ec <usbdc_set_interface+0xb4>)
    33c4:	7f4b      	ldrb	r3, [r1, #29]
    33c6:	4313      	orrs	r3, r2
    33c8:	774b      	strb	r3, [r1, #29]
			usbdc_xfer(0, NULL, 0, 0);
    33ca:	2300      	movs	r3, #0
    33cc:	2200      	movs	r2, #0
    33ce:	2100      	movs	r1, #0
    33d0:	2000      	movs	r0, #0
    33d2:	4c09      	ldr	r4, [pc, #36]	; (33f8 <usbdc_set_interface+0xc0>)
    33d4:	47a0      	blx	r4
			return true;
    33d6:	2001      	movs	r0, #1
    33d8:	e004      	b.n	33e4 <usbdc_set_interface+0xac>
	return false;
    33da:	2000      	movs	r0, #0
    33dc:	e002      	b.n	33e4 <usbdc_set_interface+0xac>
		return false;
    33de:	2000      	movs	r0, #0
    33e0:	e000      	b.n	33e4 <usbdc_set_interface+0xac>
			return false;
    33e2:	2000      	movs	r0, #0
}
    33e4:	b002      	add	sp, #8
    33e6:	bd70      	pop	{r4, r5, r6, pc}
			return false;
    33e8:	2000      	movs	r0, #0
    33ea:	e7fb      	b.n	33e4 <usbdc_set_interface+0xac>
    33ec:	20000680 	.word	0x20000680
    33f0:	00003889 	.word	0x00003889
    33f4:	00003845 	.word	0x00003845
    33f8:	0000329d 	.word	0x0000329d

000033fc <usbdc_set_req>:
{
    33fc:	b510      	push	{r4, lr}
    33fe:	0004      	movs	r4, r0
	switch (req->bRequest) {
    3400:	784b      	ldrb	r3, [r1, #1]
    3402:	2b0b      	cmp	r3, #11
    3404:	d82d      	bhi.n	3462 <usbdc_set_req+0x66>
    3406:	009b      	lsls	r3, r3, #2
    3408:	4a17      	ldr	r2, [pc, #92]	; (3468 <usbdc_set_req+0x6c>)
    340a:	58d3      	ldr	r3, [r2, r3]
    340c:	469f      	mov	pc, r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    340e:	2301      	movs	r3, #1
    3410:	2200      	movs	r2, #0
    3412:	2100      	movs	r1, #0
    3414:	4c15      	ldr	r4, [pc, #84]	; (346c <usbdc_set_req+0x70>)
    3416:	47a0      	blx	r4
    3418:	4243      	negs	r3, r0
    341a:	4158      	adcs	r0, r3
    341c:	b2c0      	uxtb	r0, r0
}
    341e:	bd10      	pop	{r4, pc}
		if (!usbdc_set_config(req->wValue)) {
    3420:	7888      	ldrb	r0, [r1, #2]
    3422:	4b13      	ldr	r3, [pc, #76]	; (3470 <usbdc_set_req+0x74>)
    3424:	4798      	blx	r3
    3426:	2800      	cmp	r0, #0
    3428:	d0f9      	beq.n	341e <usbdc_set_req+0x22>
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    342a:	2301      	movs	r3, #1
    342c:	2200      	movs	r2, #0
    342e:	2100      	movs	r1, #0
    3430:	0020      	movs	r0, r4
    3432:	4c0e      	ldr	r4, [pc, #56]	; (346c <usbdc_set_req+0x70>)
    3434:	47a0      	blx	r4
    3436:	4243      	negs	r3, r0
    3438:	4158      	adcs	r0, r3
    343a:	b2c0      	uxtb	r0, r0
    343c:	e7ef      	b.n	341e <usbdc_set_req+0x22>
		return usbdc_clear_ftr_req(ep, req);
    343e:	4b0d      	ldr	r3, [pc, #52]	; (3474 <usbdc_set_req+0x78>)
    3440:	4798      	blx	r3
    3442:	e7ec      	b.n	341e <usbdc_set_req+0x22>
		return usbdc_set_ftr_req(ep, req);
    3444:	4b0c      	ldr	r3, [pc, #48]	; (3478 <usbdc_set_req+0x7c>)
    3446:	4798      	blx	r3
    3448:	e7e9      	b.n	341e <usbdc_set_req+0x22>
		return usbdc_set_interface(req->wValue, req->wIndex);
    344a:	790a      	ldrb	r2, [r1, #4]
    344c:	794b      	ldrb	r3, [r1, #5]
    344e:	021b      	lsls	r3, r3, #8
    3450:	4313      	orrs	r3, r2
    3452:	788a      	ldrb	r2, [r1, #2]
    3454:	78c8      	ldrb	r0, [r1, #3]
    3456:	0200      	lsls	r0, r0, #8
    3458:	4310      	orrs	r0, r2
    345a:	0019      	movs	r1, r3
    345c:	4b07      	ldr	r3, [pc, #28]	; (347c <usbdc_set_req+0x80>)
    345e:	4798      	blx	r3
    3460:	e7dd      	b.n	341e <usbdc_set_req+0x22>
		return false;
    3462:	2000      	movs	r0, #0
    3464:	e7db      	b.n	341e <usbdc_set_req+0x22>
    3466:	46c0      	nop			; (mov r8, r8)
    3468:	000042fc 	.word	0x000042fc
    346c:	0000329d 	.word	0x0000329d
    3470:	0000318d 	.word	0x0000318d
    3474:	000032b9 	.word	0x000032b9
    3478:	000032f9 	.word	0x000032f9
    347c:	00003339 	.word	0x00003339

00003480 <usbdc_get_dev_desc>:
{
    3480:	b570      	push	{r4, r5, r6, lr}
    3482:	0005      	movs	r5, r0
	uint16_t length   = req->wLength;
    3484:	798b      	ldrb	r3, [r1, #6]
    3486:	79cc      	ldrb	r4, [r1, #7]
    3488:	0224      	lsls	r4, r4, #8
    348a:	431c      	orrs	r4, r3
	if (length > 0x12) {
    348c:	2c12      	cmp	r4, #18
    348e:	d900      	bls.n	3492 <usbdc_get_dev_desc+0x12>
		length = 0x12;
    3490:	2412      	movs	r4, #18
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    3492:	4b0b      	ldr	r3, [pc, #44]	; (34c0 <usbdc_get_dev_desc+0x40>)
    3494:	681b      	ldr	r3, [r3, #0]
    3496:	6818      	ldr	r0, [r3, #0]
    3498:	6859      	ldr	r1, [r3, #4]
    349a:	2201      	movs	r2, #1
    349c:	4b09      	ldr	r3, [pc, #36]	; (34c4 <usbdc_get_dev_desc+0x44>)
    349e:	4798      	blx	r3
	if (!dev_desc) {
    34a0:	2800      	cmp	r0, #0
    34a2:	d00b      	beq.n	34bc <usbdc_get_dev_desc+0x3c>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    34a4:	2300      	movs	r3, #0
    34a6:	0022      	movs	r2, r4
    34a8:	0001      	movs	r1, r0
    34aa:	0028      	movs	r0, r5
    34ac:	4c06      	ldr	r4, [pc, #24]	; (34c8 <usbdc_get_dev_desc+0x48>)
    34ae:	47a0      	blx	r4
    34b0:	2800      	cmp	r0, #0
    34b2:	d101      	bne.n	34b8 <usbdc_get_dev_desc+0x38>
	return true;
    34b4:	2001      	movs	r0, #1
}
    34b6:	bd70      	pop	{r4, r5, r6, pc}
		return false;
    34b8:	2000      	movs	r0, #0
    34ba:	e7fc      	b.n	34b6 <usbdc_get_dev_desc+0x36>
		return false;
    34bc:	2000      	movs	r0, #0
    34be:	e7fa      	b.n	34b6 <usbdc_get_dev_desc+0x36>
    34c0:	20000680 	.word	0x20000680
    34c4:	00003845 	.word	0x00003845
    34c8:	0000329d 	.word	0x0000329d

000034cc <usbdc_get_cfg_desc>:
{
    34cc:	b570      	push	{r4, r5, r6, lr}
    34ce:	0005      	movs	r5, r0
	uint16_t length   = req->wLength;
    34d0:	798b      	ldrb	r3, [r1, #6]
    34d2:	79ce      	ldrb	r6, [r1, #7]
    34d4:	0236      	lsls	r6, r6, #8
    34d6:	431e      	orrs	r6, r3
	uint8_t  index    = req->wValue & 0x00FF;
    34d8:	788a      	ldrb	r2, [r1, #2]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    34da:	4b13      	ldr	r3, [pc, #76]	; (3528 <usbdc_get_cfg_desc+0x5c>)
    34dc:	7f1c      	ldrb	r4, [r3, #28]
    34de:	3c01      	subs	r4, #1
    34e0:	4034      	ands	r4, r6
    34e2:	4261      	negs	r1, r4
    34e4:	414c      	adcs	r4, r1
    34e6:	b2e4      	uxtb	r4, r4
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    34e8:	681b      	ldr	r3, [r3, #0]
    34ea:	6818      	ldr	r0, [r3, #0]
    34ec:	6859      	ldr	r1, [r3, #4]
    34ee:	3201      	adds	r2, #1
    34f0:	b2d2      	uxtb	r2, r2
    34f2:	4b0e      	ldr	r3, [pc, #56]	; (352c <usbdc_get_cfg_desc+0x60>)
    34f4:	4798      	blx	r3
	if (NULL == cfg_desc) {
    34f6:	2800      	cmp	r0, #0
    34f8:	d013      	beq.n	3522 <usbdc_get_cfg_desc+0x56>
	return (ptr[0] + (ptr[1] << 8));
    34fa:	7882      	ldrb	r2, [r0, #2]
    34fc:	78c3      	ldrb	r3, [r0, #3]
    34fe:	021b      	lsls	r3, r3, #8
    3500:	18d2      	adds	r2, r2, r3
    3502:	b292      	uxth	r2, r2
	if (length <= total_len) {
    3504:	4296      	cmp	r6, r2
    3506:	d801      	bhi.n	350c <usbdc_get_cfg_desc+0x40>
	uint16_t length   = req->wLength;
    3508:	0032      	movs	r2, r6
		need_zlp = false;
    350a:	2400      	movs	r4, #0
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    350c:	0023      	movs	r3, r4
    350e:	0001      	movs	r1, r0
    3510:	0028      	movs	r0, r5
    3512:	4c07      	ldr	r4, [pc, #28]	; (3530 <usbdc_get_cfg_desc+0x64>)
    3514:	47a0      	blx	r4
    3516:	2800      	cmp	r0, #0
    3518:	d101      	bne.n	351e <usbdc_get_cfg_desc+0x52>
	return true;
    351a:	2001      	movs	r0, #1
}
    351c:	bd70      	pop	{r4, r5, r6, pc}
		return false;
    351e:	2000      	movs	r0, #0
    3520:	e7fc      	b.n	351c <usbdc_get_cfg_desc+0x50>
		return false;
    3522:	2000      	movs	r0, #0
    3524:	e7fa      	b.n	351c <usbdc_get_cfg_desc+0x50>
    3526:	46c0      	nop			; (mov r8, r8)
    3528:	20000680 	.word	0x20000680
    352c:	00003889 	.word	0x00003889
    3530:	0000329d 	.word	0x0000329d

00003534 <usbdc_get_str_desc>:
{
    3534:	b570      	push	{r4, r5, r6, lr}
    3536:	0005      	movs	r5, r0
	uint16_t length   = req->wLength;
    3538:	798b      	ldrb	r3, [r1, #6]
    353a:	79ce      	ldrb	r6, [r1, #7]
    353c:	0236      	lsls	r6, r6, #8
    353e:	431e      	orrs	r6, r3
	uint8_t  index    = req->wValue & 0x00FF;
    3540:	788a      	ldrb	r2, [r1, #2]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    3542:	4b10      	ldr	r3, [pc, #64]	; (3584 <usbdc_get_str_desc+0x50>)
    3544:	7f1c      	ldrb	r4, [r3, #28]
    3546:	3c01      	subs	r4, #1
    3548:	4034      	ands	r4, r6
    354a:	4261      	negs	r1, r4
    354c:	414c      	adcs	r4, r1
    354e:	b2e4      	uxtb	r4, r4
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    3550:	681b      	ldr	r3, [r3, #0]
    3552:	6818      	ldr	r0, [r3, #0]
    3554:	6859      	ldr	r1, [r3, #4]
    3556:	4b0c      	ldr	r3, [pc, #48]	; (3588 <usbdc_get_str_desc+0x54>)
    3558:	4798      	blx	r3
	if (NULL == str_desc) {
    355a:	2800      	cmp	r0, #0
    355c:	d00f      	beq.n	357e <usbdc_get_str_desc+0x4a>
	if (length <= str_desc[0]) {
    355e:	7802      	ldrb	r2, [r0, #0]
    3560:	4296      	cmp	r6, r2
    3562:	d801      	bhi.n	3568 <usbdc_get_str_desc+0x34>
	uint16_t length   = req->wLength;
    3564:	0032      	movs	r2, r6
		need_zlp = false;
    3566:	2400      	movs	r4, #0
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    3568:	0023      	movs	r3, r4
    356a:	0001      	movs	r1, r0
    356c:	0028      	movs	r0, r5
    356e:	4c07      	ldr	r4, [pc, #28]	; (358c <usbdc_get_str_desc+0x58>)
    3570:	47a0      	blx	r4
    3572:	2800      	cmp	r0, #0
    3574:	d101      	bne.n	357a <usbdc_get_str_desc+0x46>
	return true;
    3576:	2001      	movs	r0, #1
}
    3578:	bd70      	pop	{r4, r5, r6, pc}
		return false;
    357a:	2000      	movs	r0, #0
    357c:	e7fc      	b.n	3578 <usbdc_get_str_desc+0x44>
		return false;
    357e:	2000      	movs	r0, #0
    3580:	e7fa      	b.n	3578 <usbdc_get_str_desc+0x44>
    3582:	46c0      	nop			; (mov r8, r8)
    3584:	20000680 	.word	0x20000680
    3588:	000038cd 	.word	0x000038cd
    358c:	0000329d 	.word	0x0000329d

00003590 <usbdc_get_desc_req>:
{
    3590:	b510      	push	{r4, lr}
	uint8_t type = (uint8_t)(req->wValue >> 8);
    3592:	78cb      	ldrb	r3, [r1, #3]
	switch (type) {
    3594:	2b02      	cmp	r3, #2
    3596:	d008      	beq.n	35aa <usbdc_get_desc_req+0x1a>
    3598:	2b03      	cmp	r3, #3
    359a:	d009      	beq.n	35b0 <usbdc_get_desc_req+0x20>
    359c:	2b01      	cmp	r3, #1
    359e:	d001      	beq.n	35a4 <usbdc_get_desc_req+0x14>
	return false;
    35a0:	2000      	movs	r0, #0
    35a2:	e001      	b.n	35a8 <usbdc_get_desc_req+0x18>
		return usbdc_get_dev_desc(ep, req);
    35a4:	4b04      	ldr	r3, [pc, #16]	; (35b8 <usbdc_get_desc_req+0x28>)
    35a6:	4798      	blx	r3
}
    35a8:	bd10      	pop	{r4, pc}
		return usbdc_get_cfg_desc(ep, req);
    35aa:	4b04      	ldr	r3, [pc, #16]	; (35bc <usbdc_get_desc_req+0x2c>)
    35ac:	4798      	blx	r3
    35ae:	e7fb      	b.n	35a8 <usbdc_get_desc_req+0x18>
		return usbdc_get_str_desc(ep, req);
    35b0:	4b03      	ldr	r3, [pc, #12]	; (35c0 <usbdc_get_desc_req+0x30>)
    35b2:	4798      	blx	r3
    35b4:	e7f8      	b.n	35a8 <usbdc_get_desc_req+0x18>
    35b6:	46c0      	nop			; (mov r8, r8)
    35b8:	00003481 	.word	0x00003481
    35bc:	000034cd 	.word	0x000034cd
    35c0:	00003535 	.word	0x00003535

000035c4 <usbdc_get_status_req>:
{
    35c4:	b530      	push	{r4, r5, lr}
    35c6:	b083      	sub	sp, #12
    35c8:	0004      	movs	r4, r0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    35ca:	780a      	ldrb	r2, [r1, #0]
    35cc:	231f      	movs	r3, #31
    35ce:	4013      	ands	r3, r2
    35d0:	b2da      	uxtb	r2, r3
    35d2:	2a01      	cmp	r2, #1
    35d4:	d903      	bls.n	35de <usbdc_get_status_req+0x1a>
    35d6:	2b02      	cmp	r3, #2
    35d8:	d012      	beq.n	3600 <usbdc_get_status_req+0x3c>
		return false;
    35da:	2000      	movs	r0, #0
    35dc:	e00e      	b.n	35fc <usbdc_get_status_req+0x38>
		st = 0;
    35de:	2300      	movs	r3, #0
    35e0:	9301      	str	r3, [sp, #4]
	memcpy(usbdc.ctrl_buf, &st, 2);
    35e2:	4d0d      	ldr	r5, [pc, #52]	; (3618 <usbdc_get_status_req+0x54>)
    35e4:	2202      	movs	r2, #2
    35e6:	a901      	add	r1, sp, #4
    35e8:	6968      	ldr	r0, [r5, #20]
    35ea:	4b0c      	ldr	r3, [pc, #48]	; (361c <usbdc_get_status_req+0x58>)
    35ec:	4798      	blx	r3
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    35ee:	6969      	ldr	r1, [r5, #20]
    35f0:	2300      	movs	r3, #0
    35f2:	2202      	movs	r2, #2
    35f4:	0020      	movs	r0, r4
    35f6:	4c0a      	ldr	r4, [pc, #40]	; (3620 <usbdc_get_status_req+0x5c>)
    35f8:	47a0      	blx	r4
	return true;
    35fa:	2001      	movs	r0, #1
}
    35fc:	b003      	add	sp, #12
    35fe:	bd30      	pop	{r4, r5, pc}
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    3600:	7908      	ldrb	r0, [r1, #4]
    3602:	2102      	movs	r1, #2
    3604:	4b07      	ldr	r3, [pc, #28]	; (3624 <usbdc_get_status_req+0x60>)
    3606:	4798      	blx	r3
		if (st < 0) {
    3608:	2800      	cmp	r0, #0
    360a:	db03      	blt.n	3614 <usbdc_get_status_req+0x50>
		st = st & 0x1;
    360c:	2301      	movs	r3, #1
    360e:	4018      	ands	r0, r3
    3610:	9001      	str	r0, [sp, #4]
		break;
    3612:	e7e6      	b.n	35e2 <usbdc_get_status_req+0x1e>
			return false;
    3614:	2000      	movs	r0, #0
    3616:	e7f1      	b.n	35fc <usbdc_get_status_req+0x38>
    3618:	20000680 	.word	0x20000680
    361c:	0000398d 	.word	0x0000398d
    3620:	0000329d 	.word	0x0000329d
    3624:	00001069 	.word	0x00001069

00003628 <usbdc_get_interface>:
{
    3628:	b570      	push	{r4, r5, r6, lr}
    362a:	0005      	movs	r5, r0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    362c:	4b16      	ldr	r3, [pc, #88]	; (3688 <usbdc_get_interface+0x60>)
    362e:	691c      	ldr	r4, [r3, #16]
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    3630:	7f5a      	ldrb	r2, [r3, #29]
    3632:	7901      	ldrb	r1, [r0, #4]
    3634:	7943      	ldrb	r3, [r0, #5]
    3636:	021b      	lsls	r3, r3, #8
    3638:	430b      	orrs	r3, r1
    363a:	411a      	asrs	r2, r3
    363c:	07d3      	lsls	r3, r2, #31
    363e:	d50a      	bpl.n	3656 <usbdc_get_interface+0x2e>
	while (NULL != func) {
    3640:	2c00      	cmp	r4, #0
    3642:	d01f      	beq.n	3684 <usbdc_get_interface+0x5c>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    3644:	002a      	movs	r2, r5
    3646:	2102      	movs	r1, #2
    3648:	0020      	movs	r0, r4
    364a:	6863      	ldr	r3, [r4, #4]
    364c:	4798      	blx	r3
    364e:	2800      	cmp	r0, #0
    3650:	da0d      	bge.n	366e <usbdc_get_interface+0x46>
			func = func->next;
    3652:	6824      	ldr	r4, [r4, #0]
    3654:	e7f4      	b.n	3640 <usbdc_get_interface+0x18>
		usbdc.ctrl_buf[0] = 0;
    3656:	4b0c      	ldr	r3, [pc, #48]	; (3688 <usbdc_get_interface+0x60>)
    3658:	2200      	movs	r2, #0
    365a:	6959      	ldr	r1, [r3, #20]
    365c:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    365e:	6959      	ldr	r1, [r3, #20]
    3660:	2300      	movs	r3, #0
    3662:	3201      	adds	r2, #1
    3664:	2000      	movs	r0, #0
    3666:	4c09      	ldr	r4, [pc, #36]	; (368c <usbdc_get_interface+0x64>)
    3668:	47a0      	blx	r4
		return true;
    366a:	2001      	movs	r0, #1
    366c:	e00b      	b.n	3686 <usbdc_get_interface+0x5e>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    366e:	4b06      	ldr	r3, [pc, #24]	; (3688 <usbdc_get_interface+0x60>)
    3670:	695a      	ldr	r2, [r3, #20]
    3672:	7010      	strb	r0, [r2, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    3674:	6959      	ldr	r1, [r3, #20]
    3676:	2300      	movs	r3, #0
    3678:	2201      	movs	r2, #1
    367a:	2000      	movs	r0, #0
    367c:	4c03      	ldr	r4, [pc, #12]	; (368c <usbdc_get_interface+0x64>)
    367e:	47a0      	blx	r4
			return true;
    3680:	2001      	movs	r0, #1
    3682:	e000      	b.n	3686 <usbdc_get_interface+0x5e>
	return false;
    3684:	2000      	movs	r0, #0
}
    3686:	bd70      	pop	{r4, r5, r6, pc}
    3688:	20000680 	.word	0x20000680
    368c:	0000329d 	.word	0x0000329d

00003690 <usbdc_get_req>:
{
    3690:	b510      	push	{r4, lr}
	switch (req->bRequest) {
    3692:	784b      	ldrb	r3, [r1, #1]
    3694:	2b06      	cmp	r3, #6
    3696:	d00d      	beq.n	36b4 <usbdc_get_req+0x24>
    3698:	d907      	bls.n	36aa <usbdc_get_req+0x1a>
    369a:	2b08      	cmp	r3, #8
    369c:	d00d      	beq.n	36ba <usbdc_get_req+0x2a>
    369e:	2b0a      	cmp	r3, #10
    36a0:	d116      	bne.n	36d0 <usbdc_get_req+0x40>
		return usbdc_get_interface(req);
    36a2:	0008      	movs	r0, r1
    36a4:	4b0b      	ldr	r3, [pc, #44]	; (36d4 <usbdc_get_req+0x44>)
    36a6:	4798      	blx	r3
    36a8:	e006      	b.n	36b8 <usbdc_get_req+0x28>
	switch (req->bRequest) {
    36aa:	2b00      	cmp	r3, #0
    36ac:	d110      	bne.n	36d0 <usbdc_get_req+0x40>
		return usbdc_get_status_req(ep, req);
    36ae:	4b0a      	ldr	r3, [pc, #40]	; (36d8 <usbdc_get_req+0x48>)
    36b0:	4798      	blx	r3
    36b2:	e001      	b.n	36b8 <usbdc_get_req+0x28>
		return usbdc_get_desc_req(ep, req);
    36b4:	4b09      	ldr	r3, [pc, #36]	; (36dc <usbdc_get_req+0x4c>)
    36b6:	4798      	blx	r3
}
    36b8:	bd10      	pop	{r4, pc}
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    36ba:	4b09      	ldr	r3, [pc, #36]	; (36e0 <usbdc_get_req+0x50>)
    36bc:	7eda      	ldrb	r2, [r3, #27]
    36be:	6959      	ldr	r1, [r3, #20]
    36c0:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    36c2:	6959      	ldr	r1, [r3, #20]
    36c4:	2300      	movs	r3, #0
    36c6:	2201      	movs	r2, #1
    36c8:	4c06      	ldr	r4, [pc, #24]	; (36e4 <usbdc_get_req+0x54>)
    36ca:	47a0      	blx	r4
		return true;
    36cc:	2001      	movs	r0, #1
    36ce:	e7f3      	b.n	36b8 <usbdc_get_req+0x28>
		return false;
    36d0:	2000      	movs	r0, #0
    36d2:	e7f1      	b.n	36b8 <usbdc_get_req+0x28>
    36d4:	00003629 	.word	0x00003629
    36d8:	000035c5 	.word	0x000035c5
    36dc:	00003591 	.word	0x00003591
    36e0:	20000680 	.word	0x20000680
    36e4:	0000329d 	.word	0x0000329d

000036e8 <usbdc_cb_ctl_req>:
{
    36e8:	b570      	push	{r4, r5, r6, lr}
    36ea:	0005      	movs	r5, r0
    36ec:	000c      	movs	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    36ee:	2200      	movs	r2, #0
    36f0:	4b0d      	ldr	r3, [pc, #52]	; (3728 <usbdc_cb_ctl_req+0x40>)
    36f2:	4798      	blx	r3
    36f4:	1c43      	adds	r3, r0, #1
    36f6:	d014      	beq.n	3722 <usbdc_cb_ctl_req+0x3a>
    36f8:	2801      	cmp	r0, #1
    36fa:	d013      	beq.n	3724 <usbdc_cb_ctl_req+0x3c>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    36fc:	7823      	ldrb	r3, [r4, #0]
    36fe:	221f      	movs	r2, #31
    3700:	4393      	bics	r3, r2
    3702:	d004      	beq.n	370e <usbdc_cb_ctl_req+0x26>
    3704:	b2db      	uxtb	r3, r3
    3706:	2b80      	cmp	r3, #128	; 0x80
    3708:	d006      	beq.n	3718 <usbdc_cb_ctl_req+0x30>
		return false;
    370a:	2000      	movs	r0, #0
    370c:	e00a      	b.n	3724 <usbdc_cb_ctl_req+0x3c>
		return usbdc_set_req(ep, req);
    370e:	0021      	movs	r1, r4
    3710:	0028      	movs	r0, r5
    3712:	4b06      	ldr	r3, [pc, #24]	; (372c <usbdc_cb_ctl_req+0x44>)
    3714:	4798      	blx	r3
    3716:	e005      	b.n	3724 <usbdc_cb_ctl_req+0x3c>
		return usbdc_get_req(ep, req);
    3718:	0021      	movs	r1, r4
    371a:	0028      	movs	r0, r5
    371c:	4b04      	ldr	r3, [pc, #16]	; (3730 <usbdc_cb_ctl_req+0x48>)
    371e:	4798      	blx	r3
    3720:	e000      	b.n	3724 <usbdc_cb_ctl_req+0x3c>
		return false;
    3722:	2000      	movs	r0, #0
}
    3724:	bd70      	pop	{r4, r5, r6, pc}
    3726:	46c0      	nop			; (mov r8, r8)
    3728:	00003099 	.word	0x00003099
    372c:	000033fd 	.word	0x000033fd
    3730:	00003691 	.word	0x00003691

00003734 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    3734:	b510      	push	{r4, lr}
	switch (type) {
    3736:	2801      	cmp	r0, #1
    3738:	d009      	beq.n	374e <usbdc_register_handler+0x1a>
    373a:	2800      	cmp	r0, #0
    373c:	d002      	beq.n	3744 <usbdc_register_handler+0x10>
    373e:	2802      	cmp	r0, #2
    3740:	d00a      	beq.n	3758 <usbdc_register_handler+0x24>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
	}
}
    3742:	bd10      	pop	{r4, pc}
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    3744:	4807      	ldr	r0, [pc, #28]	; (3764 <usbdc_register_handler+0x30>)
    3746:	3004      	adds	r0, #4
    3748:	4b07      	ldr	r3, [pc, #28]	; (3768 <usbdc_register_handler+0x34>)
    374a:	4798      	blx	r3
		break;
    374c:	e7f9      	b.n	3742 <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    374e:	4805      	ldr	r0, [pc, #20]	; (3764 <usbdc_register_handler+0x30>)
    3750:	3008      	adds	r0, #8
    3752:	4b05      	ldr	r3, [pc, #20]	; (3768 <usbdc_register_handler+0x34>)
    3754:	4798      	blx	r3
		break;
    3756:	e7f4      	b.n	3742 <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    3758:	4802      	ldr	r0, [pc, #8]	; (3764 <usbdc_register_handler+0x30>)
    375a:	300c      	adds	r0, #12
    375c:	4b02      	ldr	r3, [pc, #8]	; (3768 <usbdc_register_handler+0x34>)
    375e:	4798      	blx	r3
}
    3760:	e7ef      	b.n	3742 <usbdc_register_handler+0xe>
    3762:	46c0      	nop			; (mov r8, r8)
    3764:	20000680 	.word	0x20000680
    3768:	00001141 	.word	0x00001141

0000376c <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    376c:	b570      	push	{r4, r5, r6, lr}
    376e:	0004      	movs	r4, r0
	ASSERT(ctrl_buf);
    3770:	1e43      	subs	r3, r0, #1
    3772:	4198      	sbcs	r0, r3
    3774:	b2c0      	uxtb	r0, r0
    3776:	4a0c      	ldr	r2, [pc, #48]	; (37a8 <usbdc_init+0x3c>)
    3778:	490c      	ldr	r1, [pc, #48]	; (37ac <usbdc_init+0x40>)
    377a:	4b0d      	ldr	r3, [pc, #52]	; (37b0 <usbdc_init+0x44>)
    377c:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    377e:	4b0d      	ldr	r3, [pc, #52]	; (37b4 <usbdc_init+0x48>)
    3780:	4798      	blx	r3
	if (rc < 0) {
    3782:	2800      	cmp	r0, #0
    3784:	db0e      	blt.n	37a4 <usbdc_init+0x38>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    3786:	4d0c      	ldr	r5, [pc, #48]	; (37b8 <usbdc_init+0x4c>)
    3788:	2220      	movs	r2, #32
    378a:	2100      	movs	r1, #0
    378c:	0028      	movs	r0, r5
    378e:	4b0b      	ldr	r3, [pc, #44]	; (37bc <usbdc_init+0x50>)
    3790:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    3792:	616c      	str	r4, [r5, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    3794:	490a      	ldr	r1, [pc, #40]	; (37c0 <usbdc_init+0x54>)
    3796:	2000      	movs	r0, #0
    3798:	4c0a      	ldr	r4, [pc, #40]	; (37c4 <usbdc_init+0x58>)
    379a:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    379c:	490a      	ldr	r1, [pc, #40]	; (37c8 <usbdc_init+0x5c>)
    379e:	2001      	movs	r0, #1
    37a0:	47a0      	blx	r4

	return 0;
    37a2:	2000      	movs	r0, #0
}
    37a4:	bd70      	pop	{r4, r5, r6, pc}
    37a6:	46c0      	nop			; (mov r8, r8)
    37a8:	00000355 	.word	0x00000355
    37ac:	0000432c 	.word	0x0000432c
    37b0:	00001121 	.word	0x00001121
    37b4:	00000dc5 	.word	0x00000dc5
    37b8:	20000680 	.word	0x20000680
    37bc:	0000399f 	.word	0x0000399f
    37c0:	000030d5 	.word	0x000030d5
    37c4:	00000e31 	.word	0x00000e31
    37c8:	00003279 	.word	0x00003279

000037cc <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    37cc:	b510      	push	{r4, lr}
    37ce:	0001      	movs	r1, r0
	list_insert_at_end(&usbdc.func_list, func);
    37d0:	4802      	ldr	r0, [pc, #8]	; (37dc <usbdc_register_function+0x10>)
    37d2:	3010      	adds	r0, #16
    37d4:	4b02      	ldr	r3, [pc, #8]	; (37e0 <usbdc_register_function+0x14>)
    37d6:	4798      	blx	r3
}
    37d8:	bd10      	pop	{r4, pc}
    37da:	46c0      	nop			; (mov r8, r8)
    37dc:	20000680 	.word	0x20000680
    37e0:	00001141 	.word	0x00001141

000037e4 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    37e4:	b510      	push	{r4, lr}
	if (usbdc.state >= USBD_S_POWER) {
    37e6:	4b0b      	ldr	r3, [pc, #44]	; (3814 <usbdc_start+0x30>)
    37e8:	7e9b      	ldrb	r3, [r3, #26]
    37ea:	2b00      	cmp	r3, #0
    37ec:	d10c      	bne.n	3808 <usbdc_start+0x24>
		return ERR_BUSY;
	}

	if (desces) {
    37ee:	2800      	cmp	r0, #0
    37f0:	d00d      	beq.n	380e <usbdc_start+0x2a>
		usbdc.desces.ls_fs = desces;
    37f2:	4b08      	ldr	r3, [pc, #32]	; (3814 <usbdc_start+0x30>)
    37f4:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    37f6:	6802      	ldr	r2, [r0, #0]
    37f8:	79d2      	ldrb	r2, [r2, #7]
    37fa:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    37fc:	2201      	movs	r2, #1
    37fe:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    3800:	4b05      	ldr	r3, [pc, #20]	; (3818 <usbdc_start+0x34>)
    3802:	4798      	blx	r3
	return ERR_NONE;
    3804:	2000      	movs	r0, #0
}
    3806:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    3808:	2004      	movs	r0, #4
    380a:	4240      	negs	r0, r0
    380c:	e7fb      	b.n	3806 <usbdc_start+0x22>
		return ERR_BAD_DATA;
    380e:	2009      	movs	r0, #9
    3810:	4240      	negs	r0, r0
    3812:	e7f8      	b.n	3806 <usbdc_start+0x22>
    3814:	20000680 	.word	0x20000680
    3818:	00000e3d 	.word	0x00000e3d

0000381c <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    381c:	b510      	push	{r4, lr}
	usb_d_attach();
    381e:	4b01      	ldr	r3, [pc, #4]	; (3824 <usbdc_attach+0x8>)
    3820:	4798      	blx	r3
}
    3822:	bd10      	pop	{r4, pc}
    3824:	00000e49 	.word	0x00000e49

00003828 <usbdc_get_ctrl_buffer>:
/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
    3828:	4b01      	ldr	r3, [pc, #4]	; (3830 <usbdc_get_ctrl_buffer+0x8>)
    382a:	6958      	ldr	r0, [r3, #20]
}
    382c:	4770      	bx	lr
    382e:	46c0      	nop			; (mov r8, r8)
    3830:	20000680 	.word	0x20000680

00003834 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    3834:	4b02      	ldr	r3, [pc, #8]	; (3840 <usbdc_get_state+0xc>)
    3836:	7e98      	ldrb	r0, [r3, #26]
    3838:	06c3      	lsls	r3, r0, #27
    383a:	d500      	bpl.n	383e <usbdc_get_state+0xa>
		return USBD_S_SUSPEND;
    383c:	2010      	movs	r0, #16
	}
	return usbdc.state;
}
    383e:	4770      	bx	lr
    3840:	20000680 	.word	0x20000680

00003844 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    3844:	b510      	push	{r4, lr}
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    3846:	4288      	cmp	r0, r1
    3848:	d207      	bcs.n	385a <usb_find_desc+0x16>
	return desc[0];
    384a:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    384c:	2b01      	cmp	r3, #1
    384e:	d906      	bls.n	385e <usb_find_desc+0x1a>
	return desc[1];
    3850:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    3852:	4294      	cmp	r4, r2
    3854:	d002      	beq.n	385c <usb_find_desc+0x18>
	return (desc + usb_desc_len(desc));
    3856:	18c0      	adds	r0, r0, r3
    3858:	e7f5      	b.n	3846 <usb_find_desc+0x2>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    385a:	2000      	movs	r0, #0
}
    385c:	bd10      	pop	{r4, pc}
		_desc_len_check();
    385e:	2000      	movs	r0, #0
    3860:	e7fc      	b.n	385c <usb_find_desc+0x18>

00003862 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    3862:	4288      	cmp	r0, r1
    3864:	d209      	bcs.n	387a <usb_find_ep_desc+0x18>
	return desc[0];
    3866:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    3868:	2b01      	cmp	r3, #1
    386a:	d908      	bls.n	387e <usb_find_ep_desc+0x1c>
	return desc[1];
    386c:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    386e:	2a04      	cmp	r2, #4
    3870:	d007      	beq.n	3882 <usb_find_ep_desc+0x20>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    3872:	2a05      	cmp	r2, #5
    3874:	d002      	beq.n	387c <usb_find_ep_desc+0x1a>
	return (desc + usb_desc_len(desc));
    3876:	18c0      	adds	r0, r0, r3
    3878:	e7f3      	b.n	3862 <usb_find_ep_desc>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    387a:	2000      	movs	r0, #0
}
    387c:	4770      	bx	lr
		_desc_len_check();
    387e:	2000      	movs	r0, #0
    3880:	e7fc      	b.n	387c <usb_find_ep_desc+0x1a>
	return NULL;
    3882:	2000      	movs	r0, #0
    3884:	e7fa      	b.n	387c <usb_find_ep_desc+0x1a>
	...

00003888 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    3888:	b570      	push	{r4, r5, r6, lr}
    388a:	000c      	movs	r4, r1
    388c:	0015      	movs	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    388e:	2202      	movs	r2, #2
    3890:	4b0d      	ldr	r3, [pc, #52]	; (38c8 <usb_find_cfg_desc+0x40>)
    3892:	4798      	blx	r3
	if (!desc) {
    3894:	2800      	cmp	r0, #0
    3896:	d012      	beq.n	38be <usb_find_cfg_desc+0x36>
		return NULL;
	}
	while (desc < eof) {
    3898:	42a0      	cmp	r0, r4
    389a:	d20f      	bcs.n	38bc <usb_find_cfg_desc+0x34>
	return desc[0];
    389c:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    389e:	2b01      	cmp	r3, #1
    38a0:	d90e      	bls.n	38c0 <usb_find_cfg_desc+0x38>
		if (desc[1] != USB_DT_CONFIG) {
    38a2:	7843      	ldrb	r3, [r0, #1]
    38a4:	2b02      	cmp	r3, #2
    38a6:	d10d      	bne.n	38c4 <usb_find_cfg_desc+0x3c>
			break;
		}
		if (desc[5] == cfg_value) {
    38a8:	7943      	ldrb	r3, [r0, #5]
    38aa:	42ab      	cmp	r3, r5
    38ac:	d007      	beq.n	38be <usb_find_cfg_desc+0x36>
	return (ptr[0] + (ptr[1] << 8));
    38ae:	7883      	ldrb	r3, [r0, #2]
    38b0:	78c2      	ldrb	r2, [r0, #3]
    38b2:	0212      	lsls	r2, r2, #8
    38b4:	189b      	adds	r3, r3, r2
    38b6:	b29b      	uxth	r3, r3
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    38b8:	18c0      	adds	r0, r0, r3
    38ba:	e7ed      	b.n	3898 <usb_find_cfg_desc+0x10>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    38bc:	2000      	movs	r0, #0
}
    38be:	bd70      	pop	{r4, r5, r6, pc}
		_desc_len_check();
    38c0:	2000      	movs	r0, #0
    38c2:	e7fc      	b.n	38be <usb_find_cfg_desc+0x36>
	return NULL;
    38c4:	2000      	movs	r0, #0
    38c6:	e7fa      	b.n	38be <usb_find_cfg_desc+0x36>
    38c8:	00003845 	.word	0x00003845

000038cc <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    38cc:	b570      	push	{r4, r5, r6, lr}
    38ce:	000d      	movs	r5, r1
    38d0:	0016      	movs	r6, r2
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    38d2:	2400      	movs	r4, #0
    38d4:	42a8      	cmp	r0, r5
    38d6:	d20e      	bcs.n	38f6 <usb_find_str_desc+0x2a>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    38d8:	2203      	movs	r2, #3
    38da:	0029      	movs	r1, r5
    38dc:	4b08      	ldr	r3, [pc, #32]	; (3900 <usb_find_str_desc+0x34>)
    38de:	4798      	blx	r3
		if (desc) {
    38e0:	2800      	cmp	r0, #0
    38e2:	d009      	beq.n	38f8 <usb_find_str_desc+0x2c>
	return desc[0];
    38e4:	7803      	ldrb	r3, [r0, #0]
			_desc_len_check();
    38e6:	2b01      	cmp	r3, #1
    38e8:	d907      	bls.n	38fa <usb_find_str_desc+0x2e>
			if (i == str_index) {
    38ea:	42b4      	cmp	r4, r6
    38ec:	d004      	beq.n	38f8 <usb_find_str_desc+0x2c>
				return desc;
			}
			i++;
    38ee:	3401      	adds	r4, #1
    38f0:	b2e4      	uxtb	r4, r4
	return (desc + usb_desc_len(desc));
    38f2:	18c0      	adds	r0, r0, r3
    38f4:	e7ee      	b.n	38d4 <usb_find_str_desc+0x8>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    38f6:	2000      	movs	r0, #0
}
    38f8:	bd70      	pop	{r4, r5, r6, pc}
			_desc_len_check();
    38fa:	2000      	movs	r0, #0
    38fc:	e7fc      	b.n	38f8 <usb_find_str_desc+0x2c>
    38fe:	46c0      	nop			; (mov r8, r8)
    3900:	00003845 	.word	0x00003845

00003904 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    3904:	b510      	push	{r4, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    3906:	4806      	ldr	r0, [pc, #24]	; (3920 <cdc_device_acm_init+0x1c>)
    3908:	3040      	adds	r0, #64	; 0x40
    390a:	4b06      	ldr	r3, [pc, #24]	; (3924 <cdc_device_acm_init+0x20>)
    390c:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    390e:	4b06      	ldr	r3, [pc, #24]	; (3928 <cdc_device_acm_init+0x24>)
    3910:	4798      	blx	r3

	usbdc_start(single_desc);
    3912:	4806      	ldr	r0, [pc, #24]	; (392c <cdc_device_acm_init+0x28>)
    3914:	4b06      	ldr	r3, [pc, #24]	; (3930 <cdc_device_acm_init+0x2c>)
    3916:	4798      	blx	r3
	usbdc_attach();
    3918:	4b06      	ldr	r3, [pc, #24]	; (3934 <cdc_device_acm_init+0x30>)
    391a:	4798      	blx	r3
}
    391c:	bd10      	pop	{r4, pc}
    391e:	46c0      	nop			; (mov r8, r8)
    3920:	200006a0 	.word	0x200006a0
    3924:	0000376d 	.word	0x0000376d
    3928:	00002fe9 	.word	0x00002fe9
    392c:	20000008 	.word	0x20000008
    3930:	000037e5 	.word	0x000037e5
    3934:	0000381d 	.word	0x0000381d

00003938 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    3938:	b510      	push	{r4, lr}

	cdc_device_acm_init();
    393a:	4b01      	ldr	r3, [pc, #4]	; (3940 <usb_init+0x8>)
    393c:	4798      	blx	r3
}
    393e:	bd10      	pop	{r4, pc}
    3940:	00003905 	.word	0x00003905

00003944 <__libc_init_array>:
    3944:	b570      	push	{r4, r5, r6, lr}
    3946:	2600      	movs	r6, #0
    3948:	4d0c      	ldr	r5, [pc, #48]	; (397c <__libc_init_array+0x38>)
    394a:	4c0d      	ldr	r4, [pc, #52]	; (3980 <__libc_init_array+0x3c>)
    394c:	1b64      	subs	r4, r4, r5
    394e:	10a4      	asrs	r4, r4, #2
    3950:	42a6      	cmp	r6, r4
    3952:	d109      	bne.n	3968 <__libc_init_array+0x24>
    3954:	2600      	movs	r6, #0
    3956:	f000 fd27 	bl	43a8 <_init>
    395a:	4d0a      	ldr	r5, [pc, #40]	; (3984 <__libc_init_array+0x40>)
    395c:	4c0a      	ldr	r4, [pc, #40]	; (3988 <__libc_init_array+0x44>)
    395e:	1b64      	subs	r4, r4, r5
    3960:	10a4      	asrs	r4, r4, #2
    3962:	42a6      	cmp	r6, r4
    3964:	d105      	bne.n	3972 <__libc_init_array+0x2e>
    3966:	bd70      	pop	{r4, r5, r6, pc}
    3968:	00b3      	lsls	r3, r6, #2
    396a:	58eb      	ldr	r3, [r5, r3]
    396c:	4798      	blx	r3
    396e:	3601      	adds	r6, #1
    3970:	e7ee      	b.n	3950 <__libc_init_array+0xc>
    3972:	00b3      	lsls	r3, r6, #2
    3974:	58eb      	ldr	r3, [r5, r3]
    3976:	4798      	blx	r3
    3978:	3601      	adds	r6, #1
    397a:	e7f2      	b.n	3962 <__libc_init_array+0x1e>
    397c:	000043b4 	.word	0x000043b4
    3980:	000043b4 	.word	0x000043b4
    3984:	000043b4 	.word	0x000043b4
    3988:	000043b8 	.word	0x000043b8

0000398c <memcpy>:
    398c:	2300      	movs	r3, #0
    398e:	b510      	push	{r4, lr}
    3990:	429a      	cmp	r2, r3
    3992:	d100      	bne.n	3996 <memcpy+0xa>
    3994:	bd10      	pop	{r4, pc}
    3996:	5ccc      	ldrb	r4, [r1, r3]
    3998:	54c4      	strb	r4, [r0, r3]
    399a:	3301      	adds	r3, #1
    399c:	e7f8      	b.n	3990 <memcpy+0x4>

0000399e <memset>:
    399e:	0003      	movs	r3, r0
    39a0:	1882      	adds	r2, r0, r2
    39a2:	4293      	cmp	r3, r2
    39a4:	d100      	bne.n	39a8 <memset+0xa>
    39a6:	4770      	bx	lr
    39a8:	7019      	strb	r1, [r3, #0]
    39aa:	3301      	adds	r3, #1
    39ac:	e7f9      	b.n	39a2 <memset+0x4>

000039ae <setbuf>:
    39ae:	424a      	negs	r2, r1
    39b0:	414a      	adcs	r2, r1
    39b2:	2380      	movs	r3, #128	; 0x80
    39b4:	b510      	push	{r4, lr}
    39b6:	0052      	lsls	r2, r2, #1
    39b8:	00db      	lsls	r3, r3, #3
    39ba:	f000 f801 	bl	39c0 <setvbuf>
    39be:	bd10      	pop	{r4, pc}

000039c0 <setvbuf>:
    39c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    39c2:	001d      	movs	r5, r3
    39c4:	4b4f      	ldr	r3, [pc, #316]	; (3b04 <setvbuf+0x144>)
    39c6:	b085      	sub	sp, #20
    39c8:	681e      	ldr	r6, [r3, #0]
    39ca:	0004      	movs	r4, r0
    39cc:	000f      	movs	r7, r1
    39ce:	9200      	str	r2, [sp, #0]
    39d0:	2e00      	cmp	r6, #0
    39d2:	d005      	beq.n	39e0 <setvbuf+0x20>
    39d4:	69b3      	ldr	r3, [r6, #24]
    39d6:	2b00      	cmp	r3, #0
    39d8:	d102      	bne.n	39e0 <setvbuf+0x20>
    39da:	0030      	movs	r0, r6
    39dc:	f000 f994 	bl	3d08 <__sinit>
    39e0:	4b49      	ldr	r3, [pc, #292]	; (3b08 <setvbuf+0x148>)
    39e2:	429c      	cmp	r4, r3
    39e4:	d150      	bne.n	3a88 <setvbuf+0xc8>
    39e6:	6874      	ldr	r4, [r6, #4]
    39e8:	9b00      	ldr	r3, [sp, #0]
    39ea:	2b02      	cmp	r3, #2
    39ec:	d005      	beq.n	39fa <setvbuf+0x3a>
    39ee:	2b01      	cmp	r3, #1
    39f0:	d900      	bls.n	39f4 <setvbuf+0x34>
    39f2:	e084      	b.n	3afe <setvbuf+0x13e>
    39f4:	2d00      	cmp	r5, #0
    39f6:	da00      	bge.n	39fa <setvbuf+0x3a>
    39f8:	e081      	b.n	3afe <setvbuf+0x13e>
    39fa:	0021      	movs	r1, r4
    39fc:	0030      	movs	r0, r6
    39fe:	f000 f915 	bl	3c2c <_fflush_r>
    3a02:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3a04:	2900      	cmp	r1, #0
    3a06:	d008      	beq.n	3a1a <setvbuf+0x5a>
    3a08:	0023      	movs	r3, r4
    3a0a:	3344      	adds	r3, #68	; 0x44
    3a0c:	4299      	cmp	r1, r3
    3a0e:	d002      	beq.n	3a16 <setvbuf+0x56>
    3a10:	0030      	movs	r0, r6
    3a12:	f000 fa41 	bl	3e98 <_free_r>
    3a16:	2300      	movs	r3, #0
    3a18:	6363      	str	r3, [r4, #52]	; 0x34
    3a1a:	2300      	movs	r3, #0
    3a1c:	61a3      	str	r3, [r4, #24]
    3a1e:	6063      	str	r3, [r4, #4]
    3a20:	89a3      	ldrh	r3, [r4, #12]
    3a22:	061b      	lsls	r3, r3, #24
    3a24:	d503      	bpl.n	3a2e <setvbuf+0x6e>
    3a26:	6921      	ldr	r1, [r4, #16]
    3a28:	0030      	movs	r0, r6
    3a2a:	f000 fa35 	bl	3e98 <_free_r>
    3a2e:	89a3      	ldrh	r3, [r4, #12]
    3a30:	4a36      	ldr	r2, [pc, #216]	; (3b0c <setvbuf+0x14c>)
    3a32:	4013      	ands	r3, r2
    3a34:	81a3      	strh	r3, [r4, #12]
    3a36:	9b00      	ldr	r3, [sp, #0]
    3a38:	2b02      	cmp	r3, #2
    3a3a:	d05a      	beq.n	3af2 <setvbuf+0x132>
    3a3c:	ab03      	add	r3, sp, #12
    3a3e:	aa02      	add	r2, sp, #8
    3a40:	0021      	movs	r1, r4
    3a42:	0030      	movs	r0, r6
    3a44:	f000 f9f6 	bl	3e34 <__swhatbuf_r>
    3a48:	89a3      	ldrh	r3, [r4, #12]
    3a4a:	4318      	orrs	r0, r3
    3a4c:	81a0      	strh	r0, [r4, #12]
    3a4e:	2d00      	cmp	r5, #0
    3a50:	d124      	bne.n	3a9c <setvbuf+0xdc>
    3a52:	9d02      	ldr	r5, [sp, #8]
    3a54:	0028      	movs	r0, r5
    3a56:	f000 fa15 	bl	3e84 <malloc>
    3a5a:	9501      	str	r5, [sp, #4]
    3a5c:	1e07      	subs	r7, r0, #0
    3a5e:	d142      	bne.n	3ae6 <setvbuf+0x126>
    3a60:	9b02      	ldr	r3, [sp, #8]
    3a62:	9301      	str	r3, [sp, #4]
    3a64:	42ab      	cmp	r3, r5
    3a66:	d139      	bne.n	3adc <setvbuf+0x11c>
    3a68:	2001      	movs	r0, #1
    3a6a:	4240      	negs	r0, r0
    3a6c:	2302      	movs	r3, #2
    3a6e:	89a2      	ldrh	r2, [r4, #12]
    3a70:	4313      	orrs	r3, r2
    3a72:	81a3      	strh	r3, [r4, #12]
    3a74:	2300      	movs	r3, #0
    3a76:	60a3      	str	r3, [r4, #8]
    3a78:	0023      	movs	r3, r4
    3a7a:	3347      	adds	r3, #71	; 0x47
    3a7c:	6023      	str	r3, [r4, #0]
    3a7e:	6123      	str	r3, [r4, #16]
    3a80:	2301      	movs	r3, #1
    3a82:	6163      	str	r3, [r4, #20]
    3a84:	b005      	add	sp, #20
    3a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a88:	4b21      	ldr	r3, [pc, #132]	; (3b10 <setvbuf+0x150>)
    3a8a:	429c      	cmp	r4, r3
    3a8c:	d101      	bne.n	3a92 <setvbuf+0xd2>
    3a8e:	68b4      	ldr	r4, [r6, #8]
    3a90:	e7aa      	b.n	39e8 <setvbuf+0x28>
    3a92:	4b20      	ldr	r3, [pc, #128]	; (3b14 <setvbuf+0x154>)
    3a94:	429c      	cmp	r4, r3
    3a96:	d1a7      	bne.n	39e8 <setvbuf+0x28>
    3a98:	68f4      	ldr	r4, [r6, #12]
    3a9a:	e7a5      	b.n	39e8 <setvbuf+0x28>
    3a9c:	2f00      	cmp	r7, #0
    3a9e:	d0d9      	beq.n	3a54 <setvbuf+0x94>
    3aa0:	69b3      	ldr	r3, [r6, #24]
    3aa2:	2b00      	cmp	r3, #0
    3aa4:	d102      	bne.n	3aac <setvbuf+0xec>
    3aa6:	0030      	movs	r0, r6
    3aa8:	f000 f92e 	bl	3d08 <__sinit>
    3aac:	9b00      	ldr	r3, [sp, #0]
    3aae:	2b01      	cmp	r3, #1
    3ab0:	d103      	bne.n	3aba <setvbuf+0xfa>
    3ab2:	89a3      	ldrh	r3, [r4, #12]
    3ab4:	9a00      	ldr	r2, [sp, #0]
    3ab6:	431a      	orrs	r2, r3
    3ab8:	81a2      	strh	r2, [r4, #12]
    3aba:	2008      	movs	r0, #8
    3abc:	89a3      	ldrh	r3, [r4, #12]
    3abe:	6027      	str	r7, [r4, #0]
    3ac0:	6127      	str	r7, [r4, #16]
    3ac2:	6165      	str	r5, [r4, #20]
    3ac4:	4018      	ands	r0, r3
    3ac6:	d018      	beq.n	3afa <setvbuf+0x13a>
    3ac8:	2001      	movs	r0, #1
    3aca:	4018      	ands	r0, r3
    3acc:	2300      	movs	r3, #0
    3ace:	4298      	cmp	r0, r3
    3ad0:	d011      	beq.n	3af6 <setvbuf+0x136>
    3ad2:	426d      	negs	r5, r5
    3ad4:	60a3      	str	r3, [r4, #8]
    3ad6:	61a5      	str	r5, [r4, #24]
    3ad8:	0018      	movs	r0, r3
    3ada:	e7d3      	b.n	3a84 <setvbuf+0xc4>
    3adc:	9801      	ldr	r0, [sp, #4]
    3ade:	f000 f9d1 	bl	3e84 <malloc>
    3ae2:	1e07      	subs	r7, r0, #0
    3ae4:	d0c0      	beq.n	3a68 <setvbuf+0xa8>
    3ae6:	2380      	movs	r3, #128	; 0x80
    3ae8:	89a2      	ldrh	r2, [r4, #12]
    3aea:	9d01      	ldr	r5, [sp, #4]
    3aec:	4313      	orrs	r3, r2
    3aee:	81a3      	strh	r3, [r4, #12]
    3af0:	e7d6      	b.n	3aa0 <setvbuf+0xe0>
    3af2:	2000      	movs	r0, #0
    3af4:	e7ba      	b.n	3a6c <setvbuf+0xac>
    3af6:	60a5      	str	r5, [r4, #8]
    3af8:	e7c4      	b.n	3a84 <setvbuf+0xc4>
    3afa:	60a0      	str	r0, [r4, #8]
    3afc:	e7c2      	b.n	3a84 <setvbuf+0xc4>
    3afe:	2001      	movs	r0, #1
    3b00:	4240      	negs	r0, r0
    3b02:	e7bf      	b.n	3a84 <setvbuf+0xc4>
    3b04:	20000068 	.word	0x20000068
    3b08:	00004368 	.word	0x00004368
    3b0c:	fffff35c 	.word	0xfffff35c
    3b10:	00004388 	.word	0x00004388
    3b14:	00004348 	.word	0x00004348

00003b18 <__sflush_r>:
    3b18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3b1a:	898a      	ldrh	r2, [r1, #12]
    3b1c:	0005      	movs	r5, r0
    3b1e:	000c      	movs	r4, r1
    3b20:	0713      	lsls	r3, r2, #28
    3b22:	d460      	bmi.n	3be6 <__sflush_r+0xce>
    3b24:	684b      	ldr	r3, [r1, #4]
    3b26:	2b00      	cmp	r3, #0
    3b28:	dc04      	bgt.n	3b34 <__sflush_r+0x1c>
    3b2a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    3b2c:	2b00      	cmp	r3, #0
    3b2e:	dc01      	bgt.n	3b34 <__sflush_r+0x1c>
    3b30:	2000      	movs	r0, #0
    3b32:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3b34:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3b36:	2f00      	cmp	r7, #0
    3b38:	d0fa      	beq.n	3b30 <__sflush_r+0x18>
    3b3a:	2300      	movs	r3, #0
    3b3c:	682e      	ldr	r6, [r5, #0]
    3b3e:	602b      	str	r3, [r5, #0]
    3b40:	2380      	movs	r3, #128	; 0x80
    3b42:	015b      	lsls	r3, r3, #5
    3b44:	401a      	ands	r2, r3
    3b46:	d034      	beq.n	3bb2 <__sflush_r+0x9a>
    3b48:	6d60      	ldr	r0, [r4, #84]	; 0x54
    3b4a:	89a3      	ldrh	r3, [r4, #12]
    3b4c:	075b      	lsls	r3, r3, #29
    3b4e:	d506      	bpl.n	3b5e <__sflush_r+0x46>
    3b50:	6863      	ldr	r3, [r4, #4]
    3b52:	1ac0      	subs	r0, r0, r3
    3b54:	6b63      	ldr	r3, [r4, #52]	; 0x34
    3b56:	2b00      	cmp	r3, #0
    3b58:	d001      	beq.n	3b5e <__sflush_r+0x46>
    3b5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    3b5c:	1ac0      	subs	r0, r0, r3
    3b5e:	0002      	movs	r2, r0
    3b60:	6a21      	ldr	r1, [r4, #32]
    3b62:	2300      	movs	r3, #0
    3b64:	0028      	movs	r0, r5
    3b66:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3b68:	47b8      	blx	r7
    3b6a:	89a1      	ldrh	r1, [r4, #12]
    3b6c:	1c43      	adds	r3, r0, #1
    3b6e:	d106      	bne.n	3b7e <__sflush_r+0x66>
    3b70:	682b      	ldr	r3, [r5, #0]
    3b72:	2b1d      	cmp	r3, #29
    3b74:	d831      	bhi.n	3bda <__sflush_r+0xc2>
    3b76:	4a2c      	ldr	r2, [pc, #176]	; (3c28 <__sflush_r+0x110>)
    3b78:	40da      	lsrs	r2, r3
    3b7a:	07d3      	lsls	r3, r2, #31
    3b7c:	d52d      	bpl.n	3bda <__sflush_r+0xc2>
    3b7e:	2300      	movs	r3, #0
    3b80:	6063      	str	r3, [r4, #4]
    3b82:	6923      	ldr	r3, [r4, #16]
    3b84:	6023      	str	r3, [r4, #0]
    3b86:	04cb      	lsls	r3, r1, #19
    3b88:	d505      	bpl.n	3b96 <__sflush_r+0x7e>
    3b8a:	1c43      	adds	r3, r0, #1
    3b8c:	d102      	bne.n	3b94 <__sflush_r+0x7c>
    3b8e:	682b      	ldr	r3, [r5, #0]
    3b90:	2b00      	cmp	r3, #0
    3b92:	d100      	bne.n	3b96 <__sflush_r+0x7e>
    3b94:	6560      	str	r0, [r4, #84]	; 0x54
    3b96:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3b98:	602e      	str	r6, [r5, #0]
    3b9a:	2900      	cmp	r1, #0
    3b9c:	d0c8      	beq.n	3b30 <__sflush_r+0x18>
    3b9e:	0023      	movs	r3, r4
    3ba0:	3344      	adds	r3, #68	; 0x44
    3ba2:	4299      	cmp	r1, r3
    3ba4:	d002      	beq.n	3bac <__sflush_r+0x94>
    3ba6:	0028      	movs	r0, r5
    3ba8:	f000 f976 	bl	3e98 <_free_r>
    3bac:	2000      	movs	r0, #0
    3bae:	6360      	str	r0, [r4, #52]	; 0x34
    3bb0:	e7bf      	b.n	3b32 <__sflush_r+0x1a>
    3bb2:	2301      	movs	r3, #1
    3bb4:	6a21      	ldr	r1, [r4, #32]
    3bb6:	0028      	movs	r0, r5
    3bb8:	47b8      	blx	r7
    3bba:	1c43      	adds	r3, r0, #1
    3bbc:	d1c5      	bne.n	3b4a <__sflush_r+0x32>
    3bbe:	682b      	ldr	r3, [r5, #0]
    3bc0:	2b00      	cmp	r3, #0
    3bc2:	d0c2      	beq.n	3b4a <__sflush_r+0x32>
    3bc4:	2b1d      	cmp	r3, #29
    3bc6:	d001      	beq.n	3bcc <__sflush_r+0xb4>
    3bc8:	2b16      	cmp	r3, #22
    3bca:	d101      	bne.n	3bd0 <__sflush_r+0xb8>
    3bcc:	602e      	str	r6, [r5, #0]
    3bce:	e7af      	b.n	3b30 <__sflush_r+0x18>
    3bd0:	2340      	movs	r3, #64	; 0x40
    3bd2:	89a2      	ldrh	r2, [r4, #12]
    3bd4:	4313      	orrs	r3, r2
    3bd6:	81a3      	strh	r3, [r4, #12]
    3bd8:	e7ab      	b.n	3b32 <__sflush_r+0x1a>
    3bda:	2340      	movs	r3, #64	; 0x40
    3bdc:	430b      	orrs	r3, r1
    3bde:	2001      	movs	r0, #1
    3be0:	81a3      	strh	r3, [r4, #12]
    3be2:	4240      	negs	r0, r0
    3be4:	e7a5      	b.n	3b32 <__sflush_r+0x1a>
    3be6:	690f      	ldr	r7, [r1, #16]
    3be8:	2f00      	cmp	r7, #0
    3bea:	d0a1      	beq.n	3b30 <__sflush_r+0x18>
    3bec:	680b      	ldr	r3, [r1, #0]
    3bee:	600f      	str	r7, [r1, #0]
    3bf0:	1bdb      	subs	r3, r3, r7
    3bf2:	9301      	str	r3, [sp, #4]
    3bf4:	2300      	movs	r3, #0
    3bf6:	0792      	lsls	r2, r2, #30
    3bf8:	d100      	bne.n	3bfc <__sflush_r+0xe4>
    3bfa:	694b      	ldr	r3, [r1, #20]
    3bfc:	60a3      	str	r3, [r4, #8]
    3bfe:	9b01      	ldr	r3, [sp, #4]
    3c00:	2b00      	cmp	r3, #0
    3c02:	dc00      	bgt.n	3c06 <__sflush_r+0xee>
    3c04:	e794      	b.n	3b30 <__sflush_r+0x18>
    3c06:	9b01      	ldr	r3, [sp, #4]
    3c08:	003a      	movs	r2, r7
    3c0a:	6a21      	ldr	r1, [r4, #32]
    3c0c:	0028      	movs	r0, r5
    3c0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    3c10:	47b0      	blx	r6
    3c12:	2800      	cmp	r0, #0
    3c14:	dc03      	bgt.n	3c1e <__sflush_r+0x106>
    3c16:	2340      	movs	r3, #64	; 0x40
    3c18:	89a2      	ldrh	r2, [r4, #12]
    3c1a:	4313      	orrs	r3, r2
    3c1c:	e7df      	b.n	3bde <__sflush_r+0xc6>
    3c1e:	9b01      	ldr	r3, [sp, #4]
    3c20:	183f      	adds	r7, r7, r0
    3c22:	1a1b      	subs	r3, r3, r0
    3c24:	9301      	str	r3, [sp, #4]
    3c26:	e7ea      	b.n	3bfe <__sflush_r+0xe6>
    3c28:	20400001 	.word	0x20400001

00003c2c <_fflush_r>:
    3c2c:	690b      	ldr	r3, [r1, #16]
    3c2e:	b570      	push	{r4, r5, r6, lr}
    3c30:	0005      	movs	r5, r0
    3c32:	000c      	movs	r4, r1
    3c34:	2b00      	cmp	r3, #0
    3c36:	d101      	bne.n	3c3c <_fflush_r+0x10>
    3c38:	2000      	movs	r0, #0
    3c3a:	bd70      	pop	{r4, r5, r6, pc}
    3c3c:	2800      	cmp	r0, #0
    3c3e:	d004      	beq.n	3c4a <_fflush_r+0x1e>
    3c40:	6983      	ldr	r3, [r0, #24]
    3c42:	2b00      	cmp	r3, #0
    3c44:	d101      	bne.n	3c4a <_fflush_r+0x1e>
    3c46:	f000 f85f 	bl	3d08 <__sinit>
    3c4a:	4b0b      	ldr	r3, [pc, #44]	; (3c78 <_fflush_r+0x4c>)
    3c4c:	429c      	cmp	r4, r3
    3c4e:	d109      	bne.n	3c64 <_fflush_r+0x38>
    3c50:	686c      	ldr	r4, [r5, #4]
    3c52:	220c      	movs	r2, #12
    3c54:	5ea3      	ldrsh	r3, [r4, r2]
    3c56:	2b00      	cmp	r3, #0
    3c58:	d0ee      	beq.n	3c38 <_fflush_r+0xc>
    3c5a:	0021      	movs	r1, r4
    3c5c:	0028      	movs	r0, r5
    3c5e:	f7ff ff5b 	bl	3b18 <__sflush_r>
    3c62:	e7ea      	b.n	3c3a <_fflush_r+0xe>
    3c64:	4b05      	ldr	r3, [pc, #20]	; (3c7c <_fflush_r+0x50>)
    3c66:	429c      	cmp	r4, r3
    3c68:	d101      	bne.n	3c6e <_fflush_r+0x42>
    3c6a:	68ac      	ldr	r4, [r5, #8]
    3c6c:	e7f1      	b.n	3c52 <_fflush_r+0x26>
    3c6e:	4b04      	ldr	r3, [pc, #16]	; (3c80 <_fflush_r+0x54>)
    3c70:	429c      	cmp	r4, r3
    3c72:	d1ee      	bne.n	3c52 <_fflush_r+0x26>
    3c74:	68ec      	ldr	r4, [r5, #12]
    3c76:	e7ec      	b.n	3c52 <_fflush_r+0x26>
    3c78:	00004368 	.word	0x00004368
    3c7c:	00004388 	.word	0x00004388
    3c80:	00004348 	.word	0x00004348

00003c84 <_cleanup_r>:
    3c84:	b510      	push	{r4, lr}
    3c86:	4902      	ldr	r1, [pc, #8]	; (3c90 <_cleanup_r+0xc>)
    3c88:	f000 f8b2 	bl	3df0 <_fwalk_reent>
    3c8c:	bd10      	pop	{r4, pc}
    3c8e:	46c0      	nop			; (mov r8, r8)
    3c90:	00003c2d 	.word	0x00003c2d

00003c94 <std.isra.0>:
    3c94:	2300      	movs	r3, #0
    3c96:	b510      	push	{r4, lr}
    3c98:	0004      	movs	r4, r0
    3c9a:	6003      	str	r3, [r0, #0]
    3c9c:	6043      	str	r3, [r0, #4]
    3c9e:	6083      	str	r3, [r0, #8]
    3ca0:	8181      	strh	r1, [r0, #12]
    3ca2:	6643      	str	r3, [r0, #100]	; 0x64
    3ca4:	81c2      	strh	r2, [r0, #14]
    3ca6:	6103      	str	r3, [r0, #16]
    3ca8:	6143      	str	r3, [r0, #20]
    3caa:	6183      	str	r3, [r0, #24]
    3cac:	0019      	movs	r1, r3
    3cae:	2208      	movs	r2, #8
    3cb0:	305c      	adds	r0, #92	; 0x5c
    3cb2:	f7ff fe74 	bl	399e <memset>
    3cb6:	4b05      	ldr	r3, [pc, #20]	; (3ccc <std.isra.0+0x38>)
    3cb8:	6224      	str	r4, [r4, #32]
    3cba:	6263      	str	r3, [r4, #36]	; 0x24
    3cbc:	4b04      	ldr	r3, [pc, #16]	; (3cd0 <std.isra.0+0x3c>)
    3cbe:	62a3      	str	r3, [r4, #40]	; 0x28
    3cc0:	4b04      	ldr	r3, [pc, #16]	; (3cd4 <std.isra.0+0x40>)
    3cc2:	62e3      	str	r3, [r4, #44]	; 0x2c
    3cc4:	4b04      	ldr	r3, [pc, #16]	; (3cd8 <std.isra.0+0x44>)
    3cc6:	6323      	str	r3, [r4, #48]	; 0x30
    3cc8:	bd10      	pop	{r4, pc}
    3cca:	46c0      	nop			; (mov r8, r8)
    3ccc:	0000400d 	.word	0x0000400d
    3cd0:	00004035 	.word	0x00004035
    3cd4:	0000406d 	.word	0x0000406d
    3cd8:	00004099 	.word	0x00004099

00003cdc <__sfmoreglue>:
    3cdc:	b570      	push	{r4, r5, r6, lr}
    3cde:	2568      	movs	r5, #104	; 0x68
    3ce0:	1e4a      	subs	r2, r1, #1
    3ce2:	4355      	muls	r5, r2
    3ce4:	000e      	movs	r6, r1
    3ce6:	0029      	movs	r1, r5
    3ce8:	3174      	adds	r1, #116	; 0x74
    3cea:	f000 f91f 	bl	3f2c <_malloc_r>
    3cee:	1e04      	subs	r4, r0, #0
    3cf0:	d008      	beq.n	3d04 <__sfmoreglue+0x28>
    3cf2:	2100      	movs	r1, #0
    3cf4:	002a      	movs	r2, r5
    3cf6:	6001      	str	r1, [r0, #0]
    3cf8:	6046      	str	r6, [r0, #4]
    3cfa:	300c      	adds	r0, #12
    3cfc:	60a0      	str	r0, [r4, #8]
    3cfe:	3268      	adds	r2, #104	; 0x68
    3d00:	f7ff fe4d 	bl	399e <memset>
    3d04:	0020      	movs	r0, r4
    3d06:	bd70      	pop	{r4, r5, r6, pc}

00003d08 <__sinit>:
    3d08:	6983      	ldr	r3, [r0, #24]
    3d0a:	b513      	push	{r0, r1, r4, lr}
    3d0c:	0004      	movs	r4, r0
    3d0e:	2b00      	cmp	r3, #0
    3d10:	d128      	bne.n	3d64 <__sinit+0x5c>
    3d12:	6483      	str	r3, [r0, #72]	; 0x48
    3d14:	64c3      	str	r3, [r0, #76]	; 0x4c
    3d16:	6503      	str	r3, [r0, #80]	; 0x50
    3d18:	4b13      	ldr	r3, [pc, #76]	; (3d68 <__sinit+0x60>)
    3d1a:	4a14      	ldr	r2, [pc, #80]	; (3d6c <__sinit+0x64>)
    3d1c:	681b      	ldr	r3, [r3, #0]
    3d1e:	6282      	str	r2, [r0, #40]	; 0x28
    3d20:	9301      	str	r3, [sp, #4]
    3d22:	4298      	cmp	r0, r3
    3d24:	d101      	bne.n	3d2a <__sinit+0x22>
    3d26:	2301      	movs	r3, #1
    3d28:	6183      	str	r3, [r0, #24]
    3d2a:	0020      	movs	r0, r4
    3d2c:	f000 f820 	bl	3d70 <__sfp>
    3d30:	6060      	str	r0, [r4, #4]
    3d32:	0020      	movs	r0, r4
    3d34:	f000 f81c 	bl	3d70 <__sfp>
    3d38:	60a0      	str	r0, [r4, #8]
    3d3a:	0020      	movs	r0, r4
    3d3c:	f000 f818 	bl	3d70 <__sfp>
    3d40:	2200      	movs	r2, #0
    3d42:	60e0      	str	r0, [r4, #12]
    3d44:	2104      	movs	r1, #4
    3d46:	6860      	ldr	r0, [r4, #4]
    3d48:	f7ff ffa4 	bl	3c94 <std.isra.0>
    3d4c:	2201      	movs	r2, #1
    3d4e:	2109      	movs	r1, #9
    3d50:	68a0      	ldr	r0, [r4, #8]
    3d52:	f7ff ff9f 	bl	3c94 <std.isra.0>
    3d56:	2202      	movs	r2, #2
    3d58:	2112      	movs	r1, #18
    3d5a:	68e0      	ldr	r0, [r4, #12]
    3d5c:	f7ff ff9a 	bl	3c94 <std.isra.0>
    3d60:	2301      	movs	r3, #1
    3d62:	61a3      	str	r3, [r4, #24]
    3d64:	bd13      	pop	{r0, r1, r4, pc}
    3d66:	46c0      	nop			; (mov r8, r8)
    3d68:	00004344 	.word	0x00004344
    3d6c:	00003c85 	.word	0x00003c85

00003d70 <__sfp>:
    3d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d72:	4b1e      	ldr	r3, [pc, #120]	; (3dec <__sfp+0x7c>)
    3d74:	0007      	movs	r7, r0
    3d76:	681e      	ldr	r6, [r3, #0]
    3d78:	69b3      	ldr	r3, [r6, #24]
    3d7a:	2b00      	cmp	r3, #0
    3d7c:	d102      	bne.n	3d84 <__sfp+0x14>
    3d7e:	0030      	movs	r0, r6
    3d80:	f7ff ffc2 	bl	3d08 <__sinit>
    3d84:	3648      	adds	r6, #72	; 0x48
    3d86:	68b4      	ldr	r4, [r6, #8]
    3d88:	6873      	ldr	r3, [r6, #4]
    3d8a:	3b01      	subs	r3, #1
    3d8c:	d504      	bpl.n	3d98 <__sfp+0x28>
    3d8e:	6833      	ldr	r3, [r6, #0]
    3d90:	2b00      	cmp	r3, #0
    3d92:	d007      	beq.n	3da4 <__sfp+0x34>
    3d94:	6836      	ldr	r6, [r6, #0]
    3d96:	e7f6      	b.n	3d86 <__sfp+0x16>
    3d98:	220c      	movs	r2, #12
    3d9a:	5ea5      	ldrsh	r5, [r4, r2]
    3d9c:	2d00      	cmp	r5, #0
    3d9e:	d00d      	beq.n	3dbc <__sfp+0x4c>
    3da0:	3468      	adds	r4, #104	; 0x68
    3da2:	e7f2      	b.n	3d8a <__sfp+0x1a>
    3da4:	2104      	movs	r1, #4
    3da6:	0038      	movs	r0, r7
    3da8:	f7ff ff98 	bl	3cdc <__sfmoreglue>
    3dac:	6030      	str	r0, [r6, #0]
    3dae:	2800      	cmp	r0, #0
    3db0:	d1f0      	bne.n	3d94 <__sfp+0x24>
    3db2:	230c      	movs	r3, #12
    3db4:	0004      	movs	r4, r0
    3db6:	603b      	str	r3, [r7, #0]
    3db8:	0020      	movs	r0, r4
    3dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3dbc:	2301      	movs	r3, #1
    3dbe:	0020      	movs	r0, r4
    3dc0:	425b      	negs	r3, r3
    3dc2:	81e3      	strh	r3, [r4, #14]
    3dc4:	3302      	adds	r3, #2
    3dc6:	81a3      	strh	r3, [r4, #12]
    3dc8:	6665      	str	r5, [r4, #100]	; 0x64
    3dca:	6025      	str	r5, [r4, #0]
    3dcc:	60a5      	str	r5, [r4, #8]
    3dce:	6065      	str	r5, [r4, #4]
    3dd0:	6125      	str	r5, [r4, #16]
    3dd2:	6165      	str	r5, [r4, #20]
    3dd4:	61a5      	str	r5, [r4, #24]
    3dd6:	2208      	movs	r2, #8
    3dd8:	0029      	movs	r1, r5
    3dda:	305c      	adds	r0, #92	; 0x5c
    3ddc:	f7ff fddf 	bl	399e <memset>
    3de0:	6365      	str	r5, [r4, #52]	; 0x34
    3de2:	63a5      	str	r5, [r4, #56]	; 0x38
    3de4:	64a5      	str	r5, [r4, #72]	; 0x48
    3de6:	64e5      	str	r5, [r4, #76]	; 0x4c
    3de8:	e7e6      	b.n	3db8 <__sfp+0x48>
    3dea:	46c0      	nop			; (mov r8, r8)
    3dec:	00004344 	.word	0x00004344

00003df0 <_fwalk_reent>:
    3df0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3df2:	0004      	movs	r4, r0
    3df4:	0007      	movs	r7, r0
    3df6:	2600      	movs	r6, #0
    3df8:	9101      	str	r1, [sp, #4]
    3dfa:	3448      	adds	r4, #72	; 0x48
    3dfc:	2c00      	cmp	r4, #0
    3dfe:	d101      	bne.n	3e04 <_fwalk_reent+0x14>
    3e00:	0030      	movs	r0, r6
    3e02:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3e04:	6863      	ldr	r3, [r4, #4]
    3e06:	68a5      	ldr	r5, [r4, #8]
    3e08:	9300      	str	r3, [sp, #0]
    3e0a:	9b00      	ldr	r3, [sp, #0]
    3e0c:	3b01      	subs	r3, #1
    3e0e:	9300      	str	r3, [sp, #0]
    3e10:	d501      	bpl.n	3e16 <_fwalk_reent+0x26>
    3e12:	6824      	ldr	r4, [r4, #0]
    3e14:	e7f2      	b.n	3dfc <_fwalk_reent+0xc>
    3e16:	89ab      	ldrh	r3, [r5, #12]
    3e18:	2b01      	cmp	r3, #1
    3e1a:	d908      	bls.n	3e2e <_fwalk_reent+0x3e>
    3e1c:	220e      	movs	r2, #14
    3e1e:	5eab      	ldrsh	r3, [r5, r2]
    3e20:	3301      	adds	r3, #1
    3e22:	d004      	beq.n	3e2e <_fwalk_reent+0x3e>
    3e24:	0029      	movs	r1, r5
    3e26:	0038      	movs	r0, r7
    3e28:	9b01      	ldr	r3, [sp, #4]
    3e2a:	4798      	blx	r3
    3e2c:	4306      	orrs	r6, r0
    3e2e:	3568      	adds	r5, #104	; 0x68
    3e30:	e7eb      	b.n	3e0a <_fwalk_reent+0x1a>
	...

00003e34 <__swhatbuf_r>:
    3e34:	b570      	push	{r4, r5, r6, lr}
    3e36:	000e      	movs	r6, r1
    3e38:	001d      	movs	r5, r3
    3e3a:	230e      	movs	r3, #14
    3e3c:	5ec9      	ldrsh	r1, [r1, r3]
    3e3e:	b090      	sub	sp, #64	; 0x40
    3e40:	0014      	movs	r4, r2
    3e42:	2900      	cmp	r1, #0
    3e44:	da07      	bge.n	3e56 <__swhatbuf_r+0x22>
    3e46:	2300      	movs	r3, #0
    3e48:	602b      	str	r3, [r5, #0]
    3e4a:	89b3      	ldrh	r3, [r6, #12]
    3e4c:	061b      	lsls	r3, r3, #24
    3e4e:	d411      	bmi.n	3e74 <__swhatbuf_r+0x40>
    3e50:	2380      	movs	r3, #128	; 0x80
    3e52:	00db      	lsls	r3, r3, #3
    3e54:	e00f      	b.n	3e76 <__swhatbuf_r+0x42>
    3e56:	aa01      	add	r2, sp, #4
    3e58:	f000 f94a 	bl	40f0 <_fstat_r>
    3e5c:	2800      	cmp	r0, #0
    3e5e:	dbf2      	blt.n	3e46 <__swhatbuf_r+0x12>
    3e60:	22f0      	movs	r2, #240	; 0xf0
    3e62:	9b02      	ldr	r3, [sp, #8]
    3e64:	0212      	lsls	r2, r2, #8
    3e66:	4013      	ands	r3, r2
    3e68:	4a05      	ldr	r2, [pc, #20]	; (3e80 <__swhatbuf_r+0x4c>)
    3e6a:	189b      	adds	r3, r3, r2
    3e6c:	425a      	negs	r2, r3
    3e6e:	4153      	adcs	r3, r2
    3e70:	602b      	str	r3, [r5, #0]
    3e72:	e7ed      	b.n	3e50 <__swhatbuf_r+0x1c>
    3e74:	2340      	movs	r3, #64	; 0x40
    3e76:	2000      	movs	r0, #0
    3e78:	6023      	str	r3, [r4, #0]
    3e7a:	b010      	add	sp, #64	; 0x40
    3e7c:	bd70      	pop	{r4, r5, r6, pc}
    3e7e:	46c0      	nop			; (mov r8, r8)
    3e80:	ffffe000 	.word	0xffffe000

00003e84 <malloc>:
    3e84:	b510      	push	{r4, lr}
    3e86:	4b03      	ldr	r3, [pc, #12]	; (3e94 <malloc+0x10>)
    3e88:	0001      	movs	r1, r0
    3e8a:	6818      	ldr	r0, [r3, #0]
    3e8c:	f000 f84e 	bl	3f2c <_malloc_r>
    3e90:	bd10      	pop	{r4, pc}
    3e92:	46c0      	nop			; (mov r8, r8)
    3e94:	20000068 	.word	0x20000068

00003e98 <_free_r>:
    3e98:	b570      	push	{r4, r5, r6, lr}
    3e9a:	0005      	movs	r5, r0
    3e9c:	2900      	cmp	r1, #0
    3e9e:	d010      	beq.n	3ec2 <_free_r+0x2a>
    3ea0:	1f0c      	subs	r4, r1, #4
    3ea2:	6823      	ldr	r3, [r4, #0]
    3ea4:	2b00      	cmp	r3, #0
    3ea6:	da00      	bge.n	3eaa <_free_r+0x12>
    3ea8:	18e4      	adds	r4, r4, r3
    3eaa:	0028      	movs	r0, r5
    3eac:	f000 f946 	bl	413c <__malloc_lock>
    3eb0:	4a1d      	ldr	r2, [pc, #116]	; (3f28 <_free_r+0x90>)
    3eb2:	6813      	ldr	r3, [r2, #0]
    3eb4:	2b00      	cmp	r3, #0
    3eb6:	d105      	bne.n	3ec4 <_free_r+0x2c>
    3eb8:	6063      	str	r3, [r4, #4]
    3eba:	6014      	str	r4, [r2, #0]
    3ebc:	0028      	movs	r0, r5
    3ebe:	f000 f93e 	bl	413e <__malloc_unlock>
    3ec2:	bd70      	pop	{r4, r5, r6, pc}
    3ec4:	42a3      	cmp	r3, r4
    3ec6:	d909      	bls.n	3edc <_free_r+0x44>
    3ec8:	6821      	ldr	r1, [r4, #0]
    3eca:	1860      	adds	r0, r4, r1
    3ecc:	4283      	cmp	r3, r0
    3ece:	d1f3      	bne.n	3eb8 <_free_r+0x20>
    3ed0:	6818      	ldr	r0, [r3, #0]
    3ed2:	685b      	ldr	r3, [r3, #4]
    3ed4:	1841      	adds	r1, r0, r1
    3ed6:	6021      	str	r1, [r4, #0]
    3ed8:	e7ee      	b.n	3eb8 <_free_r+0x20>
    3eda:	0013      	movs	r3, r2
    3edc:	685a      	ldr	r2, [r3, #4]
    3ede:	2a00      	cmp	r2, #0
    3ee0:	d001      	beq.n	3ee6 <_free_r+0x4e>
    3ee2:	42a2      	cmp	r2, r4
    3ee4:	d9f9      	bls.n	3eda <_free_r+0x42>
    3ee6:	6819      	ldr	r1, [r3, #0]
    3ee8:	1858      	adds	r0, r3, r1
    3eea:	42a0      	cmp	r0, r4
    3eec:	d10b      	bne.n	3f06 <_free_r+0x6e>
    3eee:	6820      	ldr	r0, [r4, #0]
    3ef0:	1809      	adds	r1, r1, r0
    3ef2:	1858      	adds	r0, r3, r1
    3ef4:	6019      	str	r1, [r3, #0]
    3ef6:	4282      	cmp	r2, r0
    3ef8:	d1e0      	bne.n	3ebc <_free_r+0x24>
    3efa:	6810      	ldr	r0, [r2, #0]
    3efc:	6852      	ldr	r2, [r2, #4]
    3efe:	1841      	adds	r1, r0, r1
    3f00:	6019      	str	r1, [r3, #0]
    3f02:	605a      	str	r2, [r3, #4]
    3f04:	e7da      	b.n	3ebc <_free_r+0x24>
    3f06:	42a0      	cmp	r0, r4
    3f08:	d902      	bls.n	3f10 <_free_r+0x78>
    3f0a:	230c      	movs	r3, #12
    3f0c:	602b      	str	r3, [r5, #0]
    3f0e:	e7d5      	b.n	3ebc <_free_r+0x24>
    3f10:	6821      	ldr	r1, [r4, #0]
    3f12:	1860      	adds	r0, r4, r1
    3f14:	4282      	cmp	r2, r0
    3f16:	d103      	bne.n	3f20 <_free_r+0x88>
    3f18:	6810      	ldr	r0, [r2, #0]
    3f1a:	6852      	ldr	r2, [r2, #4]
    3f1c:	1841      	adds	r1, r0, r1
    3f1e:	6021      	str	r1, [r4, #0]
    3f20:	6062      	str	r2, [r4, #4]
    3f22:	605c      	str	r4, [r3, #4]
    3f24:	e7ca      	b.n	3ebc <_free_r+0x24>
    3f26:	46c0      	nop			; (mov r8, r8)
    3f28:	20000720 	.word	0x20000720

00003f2c <_malloc_r>:
    3f2c:	2303      	movs	r3, #3
    3f2e:	b570      	push	{r4, r5, r6, lr}
    3f30:	1ccd      	adds	r5, r1, #3
    3f32:	439d      	bics	r5, r3
    3f34:	3508      	adds	r5, #8
    3f36:	0006      	movs	r6, r0
    3f38:	2d0c      	cmp	r5, #12
    3f3a:	d21e      	bcs.n	3f7a <_malloc_r+0x4e>
    3f3c:	250c      	movs	r5, #12
    3f3e:	42a9      	cmp	r1, r5
    3f40:	d81d      	bhi.n	3f7e <_malloc_r+0x52>
    3f42:	0030      	movs	r0, r6
    3f44:	f000 f8fa 	bl	413c <__malloc_lock>
    3f48:	4a25      	ldr	r2, [pc, #148]	; (3fe0 <_malloc_r+0xb4>)
    3f4a:	6814      	ldr	r4, [r2, #0]
    3f4c:	0021      	movs	r1, r4
    3f4e:	2900      	cmp	r1, #0
    3f50:	d119      	bne.n	3f86 <_malloc_r+0x5a>
    3f52:	4c24      	ldr	r4, [pc, #144]	; (3fe4 <_malloc_r+0xb8>)
    3f54:	6823      	ldr	r3, [r4, #0]
    3f56:	2b00      	cmp	r3, #0
    3f58:	d103      	bne.n	3f62 <_malloc_r+0x36>
    3f5a:	0030      	movs	r0, r6
    3f5c:	f000 f844 	bl	3fe8 <_sbrk_r>
    3f60:	6020      	str	r0, [r4, #0]
    3f62:	0029      	movs	r1, r5
    3f64:	0030      	movs	r0, r6
    3f66:	f000 f83f 	bl	3fe8 <_sbrk_r>
    3f6a:	1c43      	adds	r3, r0, #1
    3f6c:	d12c      	bne.n	3fc8 <_malloc_r+0x9c>
    3f6e:	230c      	movs	r3, #12
    3f70:	0030      	movs	r0, r6
    3f72:	6033      	str	r3, [r6, #0]
    3f74:	f000 f8e3 	bl	413e <__malloc_unlock>
    3f78:	e003      	b.n	3f82 <_malloc_r+0x56>
    3f7a:	2d00      	cmp	r5, #0
    3f7c:	dadf      	bge.n	3f3e <_malloc_r+0x12>
    3f7e:	230c      	movs	r3, #12
    3f80:	6033      	str	r3, [r6, #0]
    3f82:	2000      	movs	r0, #0
    3f84:	bd70      	pop	{r4, r5, r6, pc}
    3f86:	680b      	ldr	r3, [r1, #0]
    3f88:	1b5b      	subs	r3, r3, r5
    3f8a:	d41a      	bmi.n	3fc2 <_malloc_r+0x96>
    3f8c:	2b0b      	cmp	r3, #11
    3f8e:	d903      	bls.n	3f98 <_malloc_r+0x6c>
    3f90:	600b      	str	r3, [r1, #0]
    3f92:	18cc      	adds	r4, r1, r3
    3f94:	6025      	str	r5, [r4, #0]
    3f96:	e003      	b.n	3fa0 <_malloc_r+0x74>
    3f98:	428c      	cmp	r4, r1
    3f9a:	d10e      	bne.n	3fba <_malloc_r+0x8e>
    3f9c:	6863      	ldr	r3, [r4, #4]
    3f9e:	6013      	str	r3, [r2, #0]
    3fa0:	0030      	movs	r0, r6
    3fa2:	f000 f8cc 	bl	413e <__malloc_unlock>
    3fa6:	0020      	movs	r0, r4
    3fa8:	2207      	movs	r2, #7
    3faa:	300b      	adds	r0, #11
    3fac:	1d23      	adds	r3, r4, #4
    3fae:	4390      	bics	r0, r2
    3fb0:	1ac3      	subs	r3, r0, r3
    3fb2:	d0e7      	beq.n	3f84 <_malloc_r+0x58>
    3fb4:	425a      	negs	r2, r3
    3fb6:	50e2      	str	r2, [r4, r3]
    3fb8:	e7e4      	b.n	3f84 <_malloc_r+0x58>
    3fba:	684b      	ldr	r3, [r1, #4]
    3fbc:	6063      	str	r3, [r4, #4]
    3fbe:	000c      	movs	r4, r1
    3fc0:	e7ee      	b.n	3fa0 <_malloc_r+0x74>
    3fc2:	000c      	movs	r4, r1
    3fc4:	6849      	ldr	r1, [r1, #4]
    3fc6:	e7c2      	b.n	3f4e <_malloc_r+0x22>
    3fc8:	2303      	movs	r3, #3
    3fca:	1cc4      	adds	r4, r0, #3
    3fcc:	439c      	bics	r4, r3
    3fce:	42a0      	cmp	r0, r4
    3fd0:	d0e0      	beq.n	3f94 <_malloc_r+0x68>
    3fd2:	1a21      	subs	r1, r4, r0
    3fd4:	0030      	movs	r0, r6
    3fd6:	f000 f807 	bl	3fe8 <_sbrk_r>
    3fda:	1c43      	adds	r3, r0, #1
    3fdc:	d1da      	bne.n	3f94 <_malloc_r+0x68>
    3fde:	e7c6      	b.n	3f6e <_malloc_r+0x42>
    3fe0:	20000720 	.word	0x20000720
    3fe4:	20000724 	.word	0x20000724

00003fe8 <_sbrk_r>:
    3fe8:	2300      	movs	r3, #0
    3fea:	b570      	push	{r4, r5, r6, lr}
    3fec:	4c06      	ldr	r4, [pc, #24]	; (4008 <_sbrk_r+0x20>)
    3fee:	0005      	movs	r5, r0
    3ff0:	0008      	movs	r0, r1
    3ff2:	6023      	str	r3, [r4, #0]
    3ff4:	f7fd f8c4 	bl	1180 <_sbrk>
    3ff8:	1c43      	adds	r3, r0, #1
    3ffa:	d103      	bne.n	4004 <_sbrk_r+0x1c>
    3ffc:	6823      	ldr	r3, [r4, #0]
    3ffe:	2b00      	cmp	r3, #0
    4000:	d000      	beq.n	4004 <_sbrk_r+0x1c>
    4002:	602b      	str	r3, [r5, #0]
    4004:	bd70      	pop	{r4, r5, r6, pc}
    4006:	46c0      	nop			; (mov r8, r8)
    4008:	20000788 	.word	0x20000788

0000400c <__sread>:
    400c:	b570      	push	{r4, r5, r6, lr}
    400e:	000c      	movs	r4, r1
    4010:	250e      	movs	r5, #14
    4012:	5f49      	ldrsh	r1, [r1, r5]
    4014:	f000 f894 	bl	4140 <_read_r>
    4018:	2800      	cmp	r0, #0
    401a:	db03      	blt.n	4024 <__sread+0x18>
    401c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    401e:	181b      	adds	r3, r3, r0
    4020:	6563      	str	r3, [r4, #84]	; 0x54
    4022:	bd70      	pop	{r4, r5, r6, pc}
    4024:	89a3      	ldrh	r3, [r4, #12]
    4026:	4a02      	ldr	r2, [pc, #8]	; (4030 <__sread+0x24>)
    4028:	4013      	ands	r3, r2
    402a:	81a3      	strh	r3, [r4, #12]
    402c:	e7f9      	b.n	4022 <__sread+0x16>
    402e:	46c0      	nop			; (mov r8, r8)
    4030:	ffffefff 	.word	0xffffefff

00004034 <__swrite>:
    4034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4036:	001f      	movs	r7, r3
    4038:	898b      	ldrh	r3, [r1, #12]
    403a:	0005      	movs	r5, r0
    403c:	000c      	movs	r4, r1
    403e:	0016      	movs	r6, r2
    4040:	05db      	lsls	r3, r3, #23
    4042:	d505      	bpl.n	4050 <__swrite+0x1c>
    4044:	230e      	movs	r3, #14
    4046:	5ec9      	ldrsh	r1, [r1, r3]
    4048:	2200      	movs	r2, #0
    404a:	2302      	movs	r3, #2
    404c:	f000 f862 	bl	4114 <_lseek_r>
    4050:	89a3      	ldrh	r3, [r4, #12]
    4052:	4a05      	ldr	r2, [pc, #20]	; (4068 <__swrite+0x34>)
    4054:	0028      	movs	r0, r5
    4056:	4013      	ands	r3, r2
    4058:	81a3      	strh	r3, [r4, #12]
    405a:	0032      	movs	r2, r6
    405c:	230e      	movs	r3, #14
    405e:	5ee1      	ldrsh	r1, [r4, r3]
    4060:	003b      	movs	r3, r7
    4062:	f000 f81f 	bl	40a4 <_write_r>
    4066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4068:	ffffefff 	.word	0xffffefff

0000406c <__sseek>:
    406c:	b570      	push	{r4, r5, r6, lr}
    406e:	000c      	movs	r4, r1
    4070:	250e      	movs	r5, #14
    4072:	5f49      	ldrsh	r1, [r1, r5]
    4074:	f000 f84e 	bl	4114 <_lseek_r>
    4078:	89a3      	ldrh	r3, [r4, #12]
    407a:	1c42      	adds	r2, r0, #1
    407c:	d103      	bne.n	4086 <__sseek+0x1a>
    407e:	4a05      	ldr	r2, [pc, #20]	; (4094 <__sseek+0x28>)
    4080:	4013      	ands	r3, r2
    4082:	81a3      	strh	r3, [r4, #12]
    4084:	bd70      	pop	{r4, r5, r6, pc}
    4086:	2280      	movs	r2, #128	; 0x80
    4088:	0152      	lsls	r2, r2, #5
    408a:	4313      	orrs	r3, r2
    408c:	81a3      	strh	r3, [r4, #12]
    408e:	6560      	str	r0, [r4, #84]	; 0x54
    4090:	e7f8      	b.n	4084 <__sseek+0x18>
    4092:	46c0      	nop			; (mov r8, r8)
    4094:	ffffefff 	.word	0xffffefff

00004098 <__sclose>:
    4098:	b510      	push	{r4, lr}
    409a:	230e      	movs	r3, #14
    409c:	5ec9      	ldrsh	r1, [r1, r3]
    409e:	f000 f815 	bl	40cc <_close_r>
    40a2:	bd10      	pop	{r4, pc}

000040a4 <_write_r>:
    40a4:	b570      	push	{r4, r5, r6, lr}
    40a6:	0005      	movs	r5, r0
    40a8:	0008      	movs	r0, r1
    40aa:	0011      	movs	r1, r2
    40ac:	2200      	movs	r2, #0
    40ae:	4c06      	ldr	r4, [pc, #24]	; (40c8 <_write_r+0x24>)
    40b0:	6022      	str	r2, [r4, #0]
    40b2:	001a      	movs	r2, r3
    40b4:	f7fe fdd8 	bl	2c68 <_write>
    40b8:	1c43      	adds	r3, r0, #1
    40ba:	d103      	bne.n	40c4 <_write_r+0x20>
    40bc:	6823      	ldr	r3, [r4, #0]
    40be:	2b00      	cmp	r3, #0
    40c0:	d000      	beq.n	40c4 <_write_r+0x20>
    40c2:	602b      	str	r3, [r5, #0]
    40c4:	bd70      	pop	{r4, r5, r6, pc}
    40c6:	46c0      	nop			; (mov r8, r8)
    40c8:	20000788 	.word	0x20000788

000040cc <_close_r>:
    40cc:	2300      	movs	r3, #0
    40ce:	b570      	push	{r4, r5, r6, lr}
    40d0:	4c06      	ldr	r4, [pc, #24]	; (40ec <_close_r+0x20>)
    40d2:	0005      	movs	r5, r0
    40d4:	0008      	movs	r0, r1
    40d6:	6023      	str	r3, [r4, #0]
    40d8:	f7fd f864 	bl	11a4 <_close>
    40dc:	1c43      	adds	r3, r0, #1
    40de:	d103      	bne.n	40e8 <_close_r+0x1c>
    40e0:	6823      	ldr	r3, [r4, #0]
    40e2:	2b00      	cmp	r3, #0
    40e4:	d000      	beq.n	40e8 <_close_r+0x1c>
    40e6:	602b      	str	r3, [r5, #0]
    40e8:	bd70      	pop	{r4, r5, r6, pc}
    40ea:	46c0      	nop			; (mov r8, r8)
    40ec:	20000788 	.word	0x20000788

000040f0 <_fstat_r>:
    40f0:	2300      	movs	r3, #0
    40f2:	b570      	push	{r4, r5, r6, lr}
    40f4:	4c06      	ldr	r4, [pc, #24]	; (4110 <_fstat_r+0x20>)
    40f6:	0005      	movs	r5, r0
    40f8:	0008      	movs	r0, r1
    40fa:	0011      	movs	r1, r2
    40fc:	6023      	str	r3, [r4, #0]
    40fe:	f7fd f854 	bl	11aa <_fstat>
    4102:	1c43      	adds	r3, r0, #1
    4104:	d103      	bne.n	410e <_fstat_r+0x1e>
    4106:	6823      	ldr	r3, [r4, #0]
    4108:	2b00      	cmp	r3, #0
    410a:	d000      	beq.n	410e <_fstat_r+0x1e>
    410c:	602b      	str	r3, [r5, #0]
    410e:	bd70      	pop	{r4, r5, r6, pc}
    4110:	20000788 	.word	0x20000788

00004114 <_lseek_r>:
    4114:	b570      	push	{r4, r5, r6, lr}
    4116:	0005      	movs	r5, r0
    4118:	0008      	movs	r0, r1
    411a:	0011      	movs	r1, r2
    411c:	2200      	movs	r2, #0
    411e:	4c06      	ldr	r4, [pc, #24]	; (4138 <_lseek_r+0x24>)
    4120:	6022      	str	r2, [r4, #0]
    4122:	001a      	movs	r2, r3
    4124:	f7fd f846 	bl	11b4 <_lseek>
    4128:	1c43      	adds	r3, r0, #1
    412a:	d103      	bne.n	4134 <_lseek_r+0x20>
    412c:	6823      	ldr	r3, [r4, #0]
    412e:	2b00      	cmp	r3, #0
    4130:	d000      	beq.n	4134 <_lseek_r+0x20>
    4132:	602b      	str	r3, [r5, #0]
    4134:	bd70      	pop	{r4, r5, r6, pc}
    4136:	46c0      	nop			; (mov r8, r8)
    4138:	20000788 	.word	0x20000788

0000413c <__malloc_lock>:
    413c:	4770      	bx	lr

0000413e <__malloc_unlock>:
    413e:	4770      	bx	lr

00004140 <_read_r>:
    4140:	b570      	push	{r4, r5, r6, lr}
    4142:	0005      	movs	r5, r0
    4144:	0008      	movs	r0, r1
    4146:	0011      	movs	r1, r2
    4148:	2200      	movs	r2, #0
    414a:	4c06      	ldr	r4, [pc, #24]	; (4164 <_read_r+0x24>)
    414c:	6022      	str	r2, [r4, #0]
    414e:	001a      	movs	r2, r3
    4150:	f7fe fd76 	bl	2c40 <_read>
    4154:	1c43      	adds	r3, r0, #1
    4156:	d103      	bne.n	4160 <_read_r+0x20>
    4158:	6823      	ldr	r3, [r4, #0]
    415a:	2b00      	cmp	r3, #0
    415c:	d000      	beq.n	4160 <_read_r+0x20>
    415e:	602b      	str	r3, [r5, #0]
    4160:	bd70      	pop	{r4, r5, r6, pc}
    4162:	46c0      	nop			; (mov r8, r8)
    4164:	20000788 	.word	0x20000788
    4168:	682f2e2e 	.word	0x682f2e2e
    416c:	732f6c61 	.word	0x732f6c61
    4170:	682f6372 	.word	0x682f6372
    4174:	645f6c61 	.word	0x645f6c61
    4178:	735f6361 	.word	0x735f6361
    417c:	2e636e79 	.word	0x2e636e79
    4180:	00000063 	.word	0x00000063
    4184:	682f2e2e 	.word	0x682f2e2e
    4188:	732f6c61 	.word	0x732f6c61
    418c:	682f6372 	.word	0x682f6372
    4190:	695f6c61 	.word	0x695f6c61
    4194:	00632e6f 	.word	0x00632e6f
    4198:	682f2e2e 	.word	0x682f2e2e
    419c:	732f6c61 	.word	0x732f6c61
    41a0:	682f6372 	.word	0x682f6372
    41a4:	735f6c61 	.word	0x735f6c61
    41a8:	6d5f6970 	.word	0x6d5f6970
    41ac:	6e79735f 	.word	0x6e79735f
    41b0:	00632e63 	.word	0x00632e63
    41b4:	682f2e2e 	.word	0x682f2e2e
    41b8:	732f6c61 	.word	0x732f6c61
    41bc:	682f6372 	.word	0x682f6372
    41c0:	755f6c61 	.word	0x755f6c61
    41c4:	74726173 	.word	0x74726173
    41c8:	6e79735f 	.word	0x6e79735f
    41cc:	00632e63 	.word	0x00632e63
    41d0:	682f2e2e 	.word	0x682f2e2e
    41d4:	752f6c61 	.word	0x752f6c61
    41d8:	736c6974 	.word	0x736c6974
    41dc:	6372732f 	.word	0x6372732f
    41e0:	6974752f 	.word	0x6974752f
    41e4:	6c5f736c 	.word	0x6c5f736c
    41e8:	2e747369 	.word	0x2e747369
    41ec:	00000063 	.word	0x00000063
    41f0:	682f2e2e 	.word	0x682f2e2e
    41f4:	642f6c70 	.word	0x642f6c70
    41f8:	682f6361 	.word	0x682f6361
    41fc:	645f6c70 	.word	0x645f6c70
    4200:	632e6361 	.word	0x632e6361
    4204:	00000000 	.word	0x00000000

00004208 <_usarts>:
    4208:	00000003 40100004 00030000 0000ff2e     .......@........
    4218:	00000000                                ....

0000421c <_i2cms>:
	...

00004234 <_i2css>:
	...

00004244 <sercomspi_regs>:
    4244:	0020000c 00020000 00000000 01ff003b     .. .........;...
    4254:	20000c00 02000000 00000000 ff000500     ... ............
    4264:	000c0101 00000030 00000002 00ef0000     ....0...........
    4274:	000401ff 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    4284:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..
    4294:	00004a25 00000804                       %J......

0000429c <_usb_ep_cfgs>:
    429c:	20000618 00000000 00000040 200005d8     ... ....@...... 
    42ac:	00000000 00000040 20000598 00000000     ....@...... ....
    42bc:	00000040 20000558 00000000 00000040     @...X.. ....@...
    42cc:	20000518 00000000 00000040 200004d8     ... ....@...... 
    42dc:	00000000 00000040 20000498 00000000     ....@...... ....
    42ec:	00000040 20000458 00000000 00000040     @...X.. ....@...
    42fc:	00003462 0000343e 00003462 00003444     b4..>4..b4..D4..
    430c:	00003462 0000340e 00003462 00003462     b4...4..b4..b4..
    431c:	00003462 00003420 00003462 0000344a     b4.. 4..b4..J4..
    432c:	752f2e2e 642f6273 63697665 73752f65     ../usb/device/us
    433c:	2e636462 00000063                       bdc.c...

00004344 <_global_impure_ptr>:
    4344:	2000006c                                l.. 

00004348 <__sf_fake_stderr>:
	...

00004368 <__sf_fake_stdin>:
	...

00004388 <__sf_fake_stdout>:
	...

000043a8 <_init>:
    43a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    43aa:	46c0      	nop			; (mov r8, r8)
    43ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
    43ae:	bc08      	pop	{r3}
    43b0:	469e      	mov	lr, r3
    43b2:	4770      	bx	lr

000043b4 <__init_array_start>:
    43b4:	000000dd 	.word	0x000000dd

000043b8 <_fini>:
    43b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    43ba:	46c0      	nop			; (mov r8, r8)
    43bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    43be:	bc08      	pop	{r3}
    43c0:	469e      	mov	lr, r3
    43c2:	4770      	bx	lr

000043c4 <__fini_array_start>:
    43c4:	000000b5 	.word	0x000000b5
