
LMX_SAMD21_LIB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000113e4  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000113e4  000113e4  000213e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000a30  20000000  000113ec  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000924  20000a30  00011e1c  00030a30  2**2
                  ALLOC
  4 .stack        00002004  20001354  00012740  00030a30  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00030a30  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00030a58  2**0
                  CONTENTS, READONLY
  7 .debug_info   0002f7bc  00000000  00000000  00030ab1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004340  00000000  00000000  0006026d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000a627  00000000  00000000  000645ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001968  00000000  00000000  0006ebd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000017f0  00000000  00000000  0007053c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00021037  00000000  00000000  00071d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000177e3  00000000  00000000  00092d63  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00092a3f  00000000  00000000  000aa546  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00007138  00000000  00000000  0013cf88  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .stab         0000009c  00000000  00000000  001440c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000014d  00000000  00000000  0014415c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	58 33 00 20 19 01 00 00 15 01 00 00 15 01 00 00     X3. ............
	...
      2c:	15 01 00 00 00 00 00 00 00 00 00 00 15 01 00 00     ................
      3c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      4c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      5c:	2d 73 00 00 15 01 00 00 15 01 00 00 15 01 00 00     -s..............
      6c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      7c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      8c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      9c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      ac:	15 01 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000a30 	.word	0x20000a30
      d4:	00000000 	.word	0x00000000
      d8:	000113ec 	.word	0x000113ec

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000a34 	.word	0x20000a34
     108:	000113ec 	.word	0x000113ec
     10c:	000113ec 	.word	0x000113ec
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
{
     118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     11a:	4a23      	ldr	r2, [pc, #140]	; (1a8 <Reset_Handler+0x90>)
     11c:	4b23      	ldr	r3, [pc, #140]	; (1ac <Reset_Handler+0x94>)
     11e:	429a      	cmp	r2, r3
     120:	d009      	beq.n	136 <Reset_Handler+0x1e>
     122:	4b22      	ldr	r3, [pc, #136]	; (1ac <Reset_Handler+0x94>)
     124:	4a20      	ldr	r2, [pc, #128]	; (1a8 <Reset_Handler+0x90>)
     126:	e003      	b.n	130 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     128:	6811      	ldr	r1, [r2, #0]
     12a:	6019      	str	r1, [r3, #0]
     12c:	3304      	adds	r3, #4
     12e:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     130:	491f      	ldr	r1, [pc, #124]	; (1b0 <Reset_Handler+0x98>)
     132:	428b      	cmp	r3, r1
     134:	d3f8      	bcc.n	128 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     136:	4b1f      	ldr	r3, [pc, #124]	; (1b4 <Reset_Handler+0x9c>)
     138:	e002      	b.n	140 <Reset_Handler+0x28>
                *pDest++ = 0;
     13a:	2200      	movs	r2, #0
     13c:	601a      	str	r2, [r3, #0]
     13e:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     140:	4a1d      	ldr	r2, [pc, #116]	; (1b8 <Reset_Handler+0xa0>)
     142:	4293      	cmp	r3, r2
     144:	d3f9      	bcc.n	13a <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     146:	4a1d      	ldr	r2, [pc, #116]	; (1bc <Reset_Handler+0xa4>)
     148:	21ff      	movs	r1, #255	; 0xff
     14a:	4b1d      	ldr	r3, [pc, #116]	; (1c0 <Reset_Handler+0xa8>)
     14c:	438b      	bics	r3, r1
     14e:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     150:	39fd      	subs	r1, #253	; 0xfd
     152:	2390      	movs	r3, #144	; 0x90
     154:	005b      	lsls	r3, r3, #1
     156:	4a1b      	ldr	r2, [pc, #108]	; (1c4 <Reset_Handler+0xac>)
     158:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15a:	4a1b      	ldr	r2, [pc, #108]	; (1c8 <Reset_Handler+0xb0>)
     15c:	78d3      	ldrb	r3, [r2, #3]
     15e:	2503      	movs	r5, #3
     160:	43ab      	bics	r3, r5
     162:	2402      	movs	r4, #2
     164:	4323      	orrs	r3, r4
     166:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     168:	78d3      	ldrb	r3, [r2, #3]
     16a:	270c      	movs	r7, #12
     16c:	43bb      	bics	r3, r7
     16e:	2608      	movs	r6, #8
     170:	4333      	orrs	r3, r6
     172:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     174:	4b15      	ldr	r3, [pc, #84]	; (1cc <Reset_Handler+0xb4>)
     176:	7b98      	ldrb	r0, [r3, #14]
     178:	2230      	movs	r2, #48	; 0x30
     17a:	4390      	bics	r0, r2
     17c:	2220      	movs	r2, #32
     17e:	4310      	orrs	r0, r2
     180:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     182:	7b99      	ldrb	r1, [r3, #14]
     184:	43b9      	bics	r1, r7
     186:	4331      	orrs	r1, r6
     188:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     18a:	7b9a      	ldrb	r2, [r3, #14]
     18c:	43aa      	bics	r2, r5
     18e:	4322      	orrs	r2, r4
     190:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     192:	4a0f      	ldr	r2, [pc, #60]	; (1d0 <Reset_Handler+0xb8>)
     194:	6851      	ldr	r1, [r2, #4]
     196:	2380      	movs	r3, #128	; 0x80
     198:	430b      	orrs	r3, r1
     19a:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     19c:	4b0d      	ldr	r3, [pc, #52]	; (1d4 <Reset_Handler+0xbc>)
     19e:	4798      	blx	r3
        main();
     1a0:	4b0d      	ldr	r3, [pc, #52]	; (1d8 <Reset_Handler+0xc0>)
     1a2:	4798      	blx	r3
     1a4:	e7fe      	b.n	1a4 <Reset_Handler+0x8c>
     1a6:	46c0      	nop			; (mov r8, r8)
     1a8:	000113ec 	.word	0x000113ec
     1ac:	20000000 	.word	0x20000000
     1b0:	20000a30 	.word	0x20000a30
     1b4:	20000a30 	.word	0x20000a30
     1b8:	20001354 	.word	0x20001354
     1bc:	e000ed00 	.word	0xe000ed00
     1c0:	00000000 	.word	0x00000000
     1c4:	41007000 	.word	0x41007000
     1c8:	41005000 	.word	0x41005000
     1cc:	41004800 	.word	0x41004800
     1d0:	41004000 	.word	0x41004000
     1d4:	0000b6b9 	.word	0x0000b6b9
     1d8:	00000c51 	.word	0x00000c51

000001dc <_Z41__static_initialization_and_destruction_0ii>:
		else
		{
			return false;
		}

     1dc:	b510      	push	{r4, lr}
     1de:	2801      	cmp	r0, #1
     1e0:	d000      	beq.n	1e4 <_Z41__static_initialization_and_destruction_0ii+0x8>
     1e2:	bd10      	pop	{r4, pc}
     1e4:	4b06      	ldr	r3, [pc, #24]	; (200 <_Z41__static_initialization_and_destruction_0ii+0x24>)
     1e6:	4299      	cmp	r1, r3
     1e8:	d1fb      	bne.n	1e2 <_Z41__static_initialization_and_destruction_0ii+0x6>
static SPI_Syn_Class staticSPI;
     1ea:	4c06      	ldr	r4, [pc, #24]	; (204 <_Z41__static_initialization_and_destruction_0ii+0x28>)
     1ec:	0020      	movs	r0, r4
     1ee:	4b06      	ldr	r3, [pc, #24]	; (208 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
     1f0:	4798      	blx	r3
     1f2:	4a06      	ldr	r2, [pc, #24]	; (20c <_Z41__static_initialization_and_destruction_0ii+0x30>)
     1f4:	4906      	ldr	r1, [pc, #24]	; (210 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     1f6:	0020      	movs	r0, r4
     1f8:	4b06      	ldr	r3, [pc, #24]	; (214 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     1fa:	4798      	blx	r3
     1fc:	e7f1      	b.n	1e2 <_Z41__static_initialization_and_destruction_0ii+0x6>
     1fe:	46c0      	nop			; (mov r8, r8)
     200:	0000ffff 	.word	0x0000ffff
     204:	20000a4c 	.word	0x20000a4c
     208:	00000cb9 	.word	0x00000cb9
     20c:	20000000 	.word	0x20000000
     210:	00000cc5 	.word	0x00000cc5
     214:	00008c19 	.word	0x00008c19

00000218 <_ZN15lmx2694_HandlerC1Ev>:
	write_registers=local_read_registers;
     218:	4b0a      	ldr	r3, [pc, #40]	; (244 <_ZN15lmx2694_HandlerC1Ev+0x2c>)
     21a:	3310      	adds	r3, #16
     21c:	6083      	str	r3, [r0, #8]
	read_registers=local_write_registers;
     21e:	4b0a      	ldr	r3, [pc, #40]	; (248 <_ZN15lmx2694_HandlerC1Ev+0x30>)
     220:	3378      	adds	r3, #120	; 0x78
     222:	6043      	str	r3, [r0, #4]
	channel_divider=1;
     224:	2301      	movs	r3, #1
     226:	2221      	movs	r2, #33	; 0x21
     228:	5483      	strb	r3, [r0, r2]
	channel_index=0;
     22a:	2200      	movs	r2, #0
     22c:	77c2      	strb	r2, [r0, #31]
	step=(MAX_SENSOR_FREQUENCY-MIN_WOOBLING_FREQUENCY)/(1024.0*2);
     22e:	4a07      	ldr	r2, [pc, #28]	; (24c <_ZN15lmx2694_HandlerC1Ev+0x34>)
     230:	6442      	str	r2, [r0, #68]	; 0x44
	current_frequency=4000;
     232:	4a07      	ldr	r2, [pc, #28]	; (250 <_ZN15lmx2694_HandlerC1Ev+0x38>)
     234:	6002      	str	r2, [r0, #0]
	target_frequency=current_frequency+step;
     236:	4a07      	ldr	r2, [pc, #28]	; (254 <_ZN15lmx2694_HandlerC1Ev+0x3c>)
     238:	6342      	str	r2, [r0, #52]	; 0x34
	direction=true;
     23a:	2249      	movs	r2, #73	; 0x49
     23c:	5483      	strb	r3, [r0, r2]
	mash_order=1;
     23e:	3a29      	subs	r2, #41	; 0x29
     240:	5483      	strb	r3, [r0, r2]
}
     242:	4770      	bx	lr
     244:	20000a4c 	.word	0x20000a4c
     248:	20000acc 	.word	0x20000acc
     24c:	3ec80000 	.word	0x3ec80000
     250:	457a0000 	.word	0x457a0000
     254:	457a0640 	.word	0x457a0640

00000258 <_ZN15lmx2694_HandlerD1Ev>:
}
     258:	4770      	bx	lr

0000025a <_ZN15lmx2694_Handler11Get_OUT_MUXEh>:
	if (ov==2)
     25a:	2902      	cmp	r1, #2
     25c:	d006      	beq.n	26c <_ZN15lmx2694_Handler11Get_OUT_MUXEh+0x12>
		return	(uint8_t)((write_registers[45]>>11)&(0x03));
     25e:	6882      	ldr	r2, [r0, #8]
     260:	235a      	movs	r3, #90	; 0x5a
     262:	5ad3      	ldrh	r3, [r2, r3]
     264:	0adb      	lsrs	r3, r3, #11
     266:	2003      	movs	r0, #3
     268:	4018      	ands	r0, r3
}
     26a:	4770      	bx	lr
		return	(uint8_t)((write_registers[46])&(0x03));
     26c:	6882      	ldr	r2, [r0, #8]
     26e:	235c      	movs	r3, #92	; 0x5c
     270:	5cd3      	ldrb	r3, [r2, r3]
     272:	2003      	movs	r0, #3
     274:	4018      	ands	r0, r3
     276:	e7f8      	b.n	26a <_ZN15lmx2694_Handler11Get_OUT_MUXEh+0x10>

00000278 <_ZN15lmx2694_Handler13Get_N_DividerEb>:
	if (mbr)
     278:	2900      	cmp	r1, #0
     27a:	d107      	bne.n	28c <_ZN15lmx2694_Handler13Get_N_DividerEb+0x14>
		N_divider=(uint32_t)(((uint32_t)write_registers[34])<<16)+write_registers[36];
     27c:	6882      	ldr	r2, [r0, #8]
     27e:	2344      	movs	r3, #68	; 0x44
     280:	5ad3      	ldrh	r3, [r2, r3]
     282:	041b      	lsls	r3, r3, #16
     284:	3148      	adds	r1, #72	; 0x48
     286:	5a52      	ldrh	r2, [r2, r1]
     288:	189b      	adds	r3, r3, r2
     28a:	6243      	str	r3, [r0, #36]	; 0x24
	return N_divider;
     28c:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
     28e:	4770      	bx	lr

00000290 <_ZN15lmx2694_Handler13Get_NumeratorEb>:
	if (mbr)
     290:	2900      	cmp	r1, #0
     292:	d107      	bne.n	2a4 <_ZN15lmx2694_Handler13Get_NumeratorEb+0x14>
		numerator=(uint32_t)(((uint32_t)write_registers[42])<<16)+write_registers[43];
     294:	6882      	ldr	r2, [r0, #8]
     296:	2354      	movs	r3, #84	; 0x54
     298:	5ad3      	ldrh	r3, [r2, r3]
     29a:	041b      	lsls	r3, r3, #16
     29c:	3156      	adds	r1, #86	; 0x56
     29e:	5a52      	ldrh	r2, [r2, r1]
     2a0:	189b      	adds	r3, r3, r2
     2a2:	6283      	str	r3, [r0, #40]	; 0x28
	return numerator;
     2a4:	6a80      	ldr	r0, [r0, #40]	; 0x28
}
     2a6:	4770      	bx	lr

000002a8 <_ZN15lmx2694_Handler15Get_DenominatorEb>:
	if (mbr)
     2a8:	2900      	cmp	r1, #0
     2aa:	d107      	bne.n	2bc <_ZN15lmx2694_Handler15Get_DenominatorEb+0x14>
		denominator=(uint32_t)(((uint32_t)write_registers[38])<<16)+write_registers[39];
     2ac:	6882      	ldr	r2, [r0, #8]
     2ae:	234c      	movs	r3, #76	; 0x4c
     2b0:	5ad3      	ldrh	r3, [r2, r3]
     2b2:	041b      	lsls	r3, r3, #16
     2b4:	314e      	adds	r1, #78	; 0x4e
     2b6:	5a52      	ldrh	r2, [r2, r1]
     2b8:	189b      	adds	r3, r3, r2
     2ba:	62c3      	str	r3, [r0, #44]	; 0x2c
	return denominator;
     2bc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
     2be:	4770      	bx	lr

000002c0 <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb>:
float lmx2694_Handler::Calculate_Current_Frequency(bool mbr){
     2c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     2c2:	0004      	movs	r4, r0
	if (mbr)
     2c4:	2900      	cmp	r1, #0
     2c6:	d001      	beq.n	2cc <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb+0xc>
	return vco_frequency;
     2c8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
     2ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		vco_frequency=REFERENCE_FREQUENCY*2*(float(Get_N_Divider(false))+(float(Get_Numerator(false))/float(Get_Denominator(false))));
     2cc:	4b0e      	ldr	r3, [pc, #56]	; (308 <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb+0x48>)
     2ce:	4798      	blx	r3
     2d0:	4d0e      	ldr	r5, [pc, #56]	; (30c <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb+0x4c>)
     2d2:	47a8      	blx	r5
     2d4:	1c06      	adds	r6, r0, #0
     2d6:	2100      	movs	r1, #0
     2d8:	0020      	movs	r0, r4
     2da:	4b0d      	ldr	r3, [pc, #52]	; (310 <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb+0x50>)
     2dc:	4798      	blx	r3
     2de:	47a8      	blx	r5
     2e0:	1c07      	adds	r7, r0, #0
     2e2:	2100      	movs	r1, #0
     2e4:	0020      	movs	r0, r4
     2e6:	4b0b      	ldr	r3, [pc, #44]	; (314 <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb+0x54>)
     2e8:	4798      	blx	r3
     2ea:	47a8      	blx	r5
     2ec:	1c01      	adds	r1, r0, #0
     2ee:	1c38      	adds	r0, r7, #0
     2f0:	4b09      	ldr	r3, [pc, #36]	; (318 <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb+0x58>)
     2f2:	4798      	blx	r3
     2f4:	1c01      	adds	r1, r0, #0
     2f6:	1c30      	adds	r0, r6, #0
     2f8:	4b08      	ldr	r3, [pc, #32]	; (31c <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb+0x5c>)
     2fa:	4798      	blx	r3
     2fc:	4908      	ldr	r1, [pc, #32]	; (320 <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb+0x60>)
     2fe:	4b09      	ldr	r3, [pc, #36]	; (324 <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb+0x64>)
     300:	4798      	blx	r3
     302:	63a0      	str	r0, [r4, #56]	; 0x38
     304:	e7e0      	b.n	2c8 <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb+0x8>
     306:	46c0      	nop			; (mov r8, r8)
     308:	00000279 	.word	0x00000279
     30c:	00009fb9 	.word	0x00009fb9
     310:	00000291 	.word	0x00000291
     314:	000002a9 	.word	0x000002a9
     318:	00009581 	.word	0x00009581
     31c:	0000925d 	.word	0x0000925d
     320:	43480000 	.word	0x43480000
     324:	00009961 	.word	0x00009961

00000328 <_ZN15lmx2694_Handler3GCDEmm>:
{
     328:	b570      	push	{r4, r5, r6, lr}
     32a:	0006      	movs	r6, r0
     32c:	000d      	movs	r5, r1
     32e:	0014      	movs	r4, r2
	if (a == 0)
     330:	2900      	cmp	r1, #0
     332:	d016      	beq.n	362 <_ZN15lmx2694_Handler3GCDEmm+0x3a>
	else if (b == 0)
     334:	2a00      	cmp	r2, #0
     336:	d016      	beq.n	366 <_ZN15lmx2694_Handler3GCDEmm+0x3e>
	if (a < b)
     338:	4291      	cmp	r1, r2
     33a:	d309      	bcc.n	350 <_ZN15lmx2694_Handler3GCDEmm+0x28>
	return GCD(b, a % b);
     33c:	0011      	movs	r1, r2
     33e:	0028      	movs	r0, r5
     340:	4b0a      	ldr	r3, [pc, #40]	; (36c <_ZN15lmx2694_Handler3GCDEmm+0x44>)
     342:	4798      	blx	r3
     344:	000a      	movs	r2, r1
     346:	0021      	movs	r1, r4
     348:	0030      	movs	r0, r6
     34a:	f7ff ffed 	bl	328 <_ZN15lmx2694_Handler3GCDEmm>
     34e:	e009      	b.n	364 <_ZN15lmx2694_Handler3GCDEmm+0x3c>
	return GCD(a, b % a);
     350:	0010      	movs	r0, r2
     352:	4b06      	ldr	r3, [pc, #24]	; (36c <_ZN15lmx2694_Handler3GCDEmm+0x44>)
     354:	4798      	blx	r3
     356:	000a      	movs	r2, r1
     358:	0029      	movs	r1, r5
     35a:	0030      	movs	r0, r6
     35c:	f7ff ffe4 	bl	328 <_ZN15lmx2694_Handler3GCDEmm>
     360:	e000      	b.n	364 <_ZN15lmx2694_Handler3GCDEmm+0x3c>
	return b;
     362:	0010      	movs	r0, r2
}
     364:	bd70      	pop	{r4, r5, r6, pc}
	return a;
     366:	0008      	movs	r0, r1
     368:	e7fc      	b.n	364 <_ZN15lmx2694_Handler3GCDEmm+0x3c>
     36a:	46c0      	nop			; (mov r8, r8)
     36c:	00008e19 	.word	0x00008e19

00000370 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv>:
uint8_t lmx2694_Handler::Choose_Channel_Divider_Index(){
     370:	b570      	push	{r4, r5, r6, lr}
     372:	0005      	movs	r5, r0
	for ( int i = 0; i < channel_divider_size; i++)
     374:	2400      	movs	r4, #0
     376:	e00d      	b.n	394 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x24>
				if (MAX_VCO_FREQUENCY/(channel_divider_values[i])>target_frequency)
     378:	00a3      	lsls	r3, r4, #2
     37a:	4a17      	ldr	r2, [pc, #92]	; (3d8 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x68>)
     37c:	5899      	ldr	r1, [r3, r2]
     37e:	4817      	ldr	r0, [pc, #92]	; (3dc <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x6c>)
     380:	4b17      	ldr	r3, [pc, #92]	; (3e0 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x70>)
     382:	4798      	blx	r3
     384:	4b17      	ldr	r3, [pc, #92]	; (3e4 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x74>)
     386:	4798      	blx	r3
     388:	6b69      	ldr	r1, [r5, #52]	; 0x34
     38a:	4b17      	ldr	r3, [pc, #92]	; (3e8 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x78>)
     38c:	4798      	blx	r3
     38e:	2800      	cmp	r0, #0
     390:	d01a      	beq.n	3c8 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x58>
	for ( int i = 0; i < channel_divider_size; i++)
     392:	3401      	adds	r4, #1
     394:	2c0d      	cmp	r4, #13
     396:	dc10      	bgt.n	3ba <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x4a>
		if (i<3)
     398:	2c02      	cmp	r4, #2
     39a:	dded      	ble.n	378 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x8>
				if (11500/(channel_divider_values[i])>target_frequency)
     39c:	00a3      	lsls	r3, r4, #2
     39e:	4a0e      	ldr	r2, [pc, #56]	; (3d8 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x68>)
     3a0:	5899      	ldr	r1, [r3, r2]
     3a2:	4812      	ldr	r0, [pc, #72]	; (3ec <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x7c>)
     3a4:	4b0e      	ldr	r3, [pc, #56]	; (3e0 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x70>)
     3a6:	4798      	blx	r3
     3a8:	4b0e      	ldr	r3, [pc, #56]	; (3e4 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x74>)
     3aa:	4798      	blx	r3
     3ac:	6b69      	ldr	r1, [r5, #52]	; 0x34
     3ae:	4b0e      	ldr	r3, [pc, #56]	; (3e8 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x78>)
     3b0:	4798      	blx	r3
     3b2:	2800      	cmp	r0, #0
     3b4:	d1ed      	bne.n	392 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x22>
					channel_index= i-1;
     3b6:	3c01      	subs	r4, #1
     3b8:	77ec      	strb	r4, [r5, #31]
	channel_divider=channel_divider_values[channel_index];
     3ba:	7fe8      	ldrb	r0, [r5, #31]
     3bc:	0083      	lsls	r3, r0, #2
     3be:	4a06      	ldr	r2, [pc, #24]	; (3d8 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x68>)
     3c0:	5cd2      	ldrb	r2, [r2, r3]
     3c2:	2321      	movs	r3, #33	; 0x21
     3c4:	54ea      	strb	r2, [r5, r3]
}
     3c6:	bd70      	pop	{r4, r5, r6, pc}
					if (i>0)
     3c8:	2c00      	cmp	r4, #0
     3ca:	dd02      	ble.n	3d2 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x62>
							channel_index=i-1;
     3cc:	3c01      	subs	r4, #1
     3ce:	77ec      	strb	r4, [r5, #31]
     3d0:	e7f3      	b.n	3ba <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x4a>
						 channel_index=0;
     3d2:	2300      	movs	r3, #0
     3d4:	77eb      	strb	r3, [r5, #31]
     3d6:	e7f0      	b.n	3ba <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x4a>
     3d8:	00010b74 	.word	0x00010b74
     3dc:	00003afc 	.word	0x00003afc
     3e0:	00008e21 	.word	0x00008e21
     3e4:	00009f19 	.word	0x00009f19
     3e8:	00009045 	.word	0x00009045
     3ec:	00002cec 	.word	0x00002cec

000003f0 <_ZN15lmx2694_Handler18Calculate_FractionEf>:
void lmx2694_Handler::Calculate_Fraction(float fr){
     3f0:	b5f0      	push	{r4, r5, r6, r7, lr}
     3f2:	b083      	sub	sp, #12
     3f4:	0004      	movs	r4, r0
     3f6:	1c08      	adds	r0, r1, #0
	gcd=GCD((uint32_t)(round(fr*PRECISION)),PRECISION);
     3f8:	219f      	movs	r1, #159	; 0x9f
     3fa:	05c9      	lsls	r1, r1, #23
     3fc:	4b0f      	ldr	r3, [pc, #60]	; (43c <_ZN15lmx2694_Handler18Calculate_FractionEf+0x4c>)
     3fe:	4798      	blx	r3
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
     400:	4b0f      	ldr	r3, [pc, #60]	; (440 <_ZN15lmx2694_Handler18Calculate_FractionEf+0x50>)
     402:	4798      	blx	r3
     404:	9001      	str	r0, [sp, #4]
     406:	2601      	movs	r6, #1
     408:	4276      	negs	r6, r6
     40a:	4f0e      	ldr	r7, [pc, #56]	; (444 <_ZN15lmx2694_Handler18Calculate_FractionEf+0x54>)
     40c:	47b8      	blx	r7
     40e:	0001      	movs	r1, r0
     410:	0032      	movs	r2, r6
     412:	0020      	movs	r0, r4
     414:	4b0c      	ldr	r3, [pc, #48]	; (448 <_ZN15lmx2694_Handler18Calculate_FractionEf+0x58>)
     416:	4798      	blx	r3
     418:	0005      	movs	r5, r0
     41a:	6320      	str	r0, [r4, #48]	; 0x30
	numerator=(uint32_t)(round(fr*PRECISION)/gcd);
     41c:	4b0b      	ldr	r3, [pc, #44]	; (44c <_ZN15lmx2694_Handler18Calculate_FractionEf+0x5c>)
     41e:	4798      	blx	r3
     420:	1c01      	adds	r1, r0, #0
     422:	9801      	ldr	r0, [sp, #4]
     424:	4b0a      	ldr	r3, [pc, #40]	; (450 <_ZN15lmx2694_Handler18Calculate_FractionEf+0x60>)
     426:	4798      	blx	r3
     428:	47b8      	blx	r7
     42a:	62a0      	str	r0, [r4, #40]	; 0x28
	denominator=PRECISION/gcd;
     42c:	0029      	movs	r1, r5
     42e:	0030      	movs	r0, r6
     430:	4b08      	ldr	r3, [pc, #32]	; (454 <_ZN15lmx2694_Handler18Calculate_FractionEf+0x64>)
     432:	4798      	blx	r3
     434:	62e0      	str	r0, [r4, #44]	; 0x2c
}
     436:	b003      	add	sp, #12
     438:	bdf0      	pop	{r4, r5, r6, r7, pc}
     43a:	46c0      	nop			; (mov r8, r8)
     43c:	00009961 	.word	0x00009961
     440:	00008cc5 	.word	0x00008cc5
     444:	000090ad 	.word	0x000090ad
     448:	00000329 	.word	0x00000329
     44c:	00009fb9 	.word	0x00009fb9
     450:	00009581 	.word	0x00009581
     454:	00008d0d 	.word	0x00008d0d

00000458 <_ZN15lmx2694_Handler15Get_Three_BytesEm>:
void lmx2694_Handler::Get_Three_Bytes(uint32_t data){
     458:	b530      	push	{r4, r5, lr}
	for(int i=0; i<3;i++){
     45a:	2200      	movs	r2, #0
     45c:	2a02      	cmp	r2, #2
     45e:	dc08      	bgt.n	472 <_ZN15lmx2694_Handler15Get_Three_BytesEm+0x1a>
		write_bytes[2-i]=(uint8_t)((data>>(8*i))&0xff);
     460:	2302      	movs	r3, #2
     462:	1a9b      	subs	r3, r3, r2
     464:	00d4      	lsls	r4, r2, #3
     466:	000d      	movs	r5, r1
     468:	40e5      	lsrs	r5, r4
     46a:	18c3      	adds	r3, r0, r3
     46c:	741d      	strb	r5, [r3, #16]
	for(int i=0; i<3;i++){
     46e:	3201      	adds	r2, #1
     470:	e7f4      	b.n	45c <_ZN15lmx2694_Handler15Get_Three_BytesEm+0x4>
}
     472:	bd30      	pop	{r4, r5, pc}

00000474 <_ZN15lmx2694_Handler10Power_DownEv>:
bool lmx2694_Handler::Power_Down(){
     474:	b570      	push	{r4, r5, r6, lr}
     476:	0004      	movs	r4, r0
	spi_lmx->SetCS(false);
     478:	2100      	movs	r1, #0
     47a:	68c0      	ldr	r0, [r0, #12]
     47c:	4d0a      	ldr	r5, [pc, #40]	; (4a8 <_ZN15lmx2694_Handler10Power_DownEv+0x34>)
     47e:	47a8      	blx	r5
	Get_Three_Bytes((uint32_t)PROGRAM_POWERDOWN);
     480:	490a      	ldr	r1, [pc, #40]	; (4ac <_ZN15lmx2694_Handler10Power_DownEv+0x38>)
     482:	0020      	movs	r0, r4
     484:	4b0a      	ldr	r3, [pc, #40]	; (4b0 <_ZN15lmx2694_Handler10Power_DownEv+0x3c>)
     486:	4798      	blx	r3
	int_result=spi_lmx->Write(write_bytes,3);
     488:	0021      	movs	r1, r4
     48a:	3110      	adds	r1, #16
     48c:	2203      	movs	r2, #3
     48e:	68e0      	ldr	r0, [r4, #12]
     490:	4b08      	ldr	r3, [pc, #32]	; (4b4 <_ZN15lmx2694_Handler10Power_DownEv+0x40>)
     492:	4798      	blx	r3
     494:	61a0      	str	r0, [r4, #24]
	bool_result=int_result>0;
     496:	17c3      	asrs	r3, r0, #31
     498:	1a18      	subs	r0, r3, r0
     49a:	0fc0      	lsrs	r0, r0, #31
     49c:	75a0      	strb	r0, [r4, #22]
	spi_lmx->SetCS(true);
     49e:	2101      	movs	r1, #1
     4a0:	68e0      	ldr	r0, [r4, #12]
     4a2:	47a8      	blx	r5
	return bool_result;
     4a4:	7da0      	ldrb	r0, [r4, #22]
}
     4a6:	bd70      	pop	{r4, r5, r6, pc}
     4a8:	00000d35 	.word	0x00000d35
     4ac:	00002119 	.word	0x00002119
     4b0:	00000459 	.word	0x00000459
     4b4:	00000d05 	.word	0x00000d05

000004b8 <_ZN15lmx2694_Handler13Program_ResetEv>:
bool lmx2694_Handler::Program_Reset(){
     4b8:	b5f0      	push	{r4, r5, r6, r7, lr}
     4ba:	b083      	sub	sp, #12
     4bc:	0004      	movs	r4, r0
	spi_lmx->SetCS(false);
     4be:	2100      	movs	r1, #0
     4c0:	68c0      	ldr	r0, [r0, #12]
     4c2:	4d16      	ldr	r5, [pc, #88]	; (51c <_ZN15lmx2694_Handler13Program_ResetEv+0x64>)
     4c4:	47a8      	blx	r5
	Get_Three_Bytes((uint32_t)PROGRAM_RESET_1);
     4c6:	4916      	ldr	r1, [pc, #88]	; (520 <_ZN15lmx2694_Handler13Program_ResetEv+0x68>)
     4c8:	0020      	movs	r0, r4
     4ca:	4f16      	ldr	r7, [pc, #88]	; (524 <_ZN15lmx2694_Handler13Program_ResetEv+0x6c>)
     4cc:	47b8      	blx	r7
	int_result=spi_lmx->Write(write_bytes,3);
     4ce:	2310      	movs	r3, #16
     4d0:	469c      	mov	ip, r3
     4d2:	44a4      	add	ip, r4
     4d4:	4663      	mov	r3, ip
     4d6:	2203      	movs	r2, #3
     4d8:	9301      	str	r3, [sp, #4]
     4da:	4661      	mov	r1, ip
     4dc:	68e0      	ldr	r0, [r4, #12]
     4de:	4e12      	ldr	r6, [pc, #72]	; (528 <_ZN15lmx2694_Handler13Program_ResetEv+0x70>)
     4e0:	47b0      	blx	r6
     4e2:	61a0      	str	r0, [r4, #24]
	spi_lmx->SetCS(true);
     4e4:	2101      	movs	r1, #1
     4e6:	68e0      	ldr	r0, [r4, #12]
     4e8:	47a8      	blx	r5
	delay_ms(100);
     4ea:	2064      	movs	r0, #100	; 0x64
     4ec:	4b0f      	ldr	r3, [pc, #60]	; (52c <_ZN15lmx2694_Handler13Program_ResetEv+0x74>)
     4ee:	4798      	blx	r3
	spi_lmx->SetCS(false);
     4f0:	2100      	movs	r1, #0
     4f2:	68e0      	ldr	r0, [r4, #12]
     4f4:	47a8      	blx	r5
	Get_Three_Bytes((uint32_t)PROGRAM_RESET_0);
     4f6:	490e      	ldr	r1, [pc, #56]	; (530 <_ZN15lmx2694_Handler13Program_ResetEv+0x78>)
     4f8:	0020      	movs	r0, r4
     4fa:	47b8      	blx	r7
	int_result=spi_lmx->Write(write_bytes,3);
     4fc:	2203      	movs	r2, #3
     4fe:	9901      	ldr	r1, [sp, #4]
     500:	68e0      	ldr	r0, [r4, #12]
     502:	47b0      	blx	r6
     504:	61a0      	str	r0, [r4, #24]
	bool_result=int_result>0;
     506:	17c3      	asrs	r3, r0, #31
     508:	1a18      	subs	r0, r3, r0
     50a:	0fc0      	lsrs	r0, r0, #31
     50c:	75a0      	strb	r0, [r4, #22]
	spi_lmx->SetCS(true);
     50e:	2101      	movs	r1, #1
     510:	68e0      	ldr	r0, [r4, #12]
     512:	47a8      	blx	r5
	return bool_result;
     514:	7da0      	ldrb	r0, [r4, #22]
}
     516:	b003      	add	sp, #12
     518:	bdf0      	pop	{r4, r5, r6, r7, pc}
     51a:	46c0      	nop			; (mov r8, r8)
     51c:	00000d35 	.word	0x00000d35
     520:	0000211e 	.word	0x0000211e
     524:	00000459 	.word	0x00000459
     528:	00000d05 	.word	0x00000d05
     52c:	00001afd 	.word	0x00001afd
     530:	0000211c 	.word	0x0000211c

00000534 <_ZN15lmx2694_Handler16Make_Three_BytesEht>:
void lmx2694_Handler::Make_Three_Bytes(uint8_t index, uint16_t data){
     534:	b570      	push	{r4, r5, r6, lr}
	for(int i=0; i<2;i++){
     536:	2300      	movs	r3, #0
     538:	2b01      	cmp	r3, #1
     53a:	dc08      	bgt.n	54e <_ZN15lmx2694_Handler16Make_Three_BytesEht+0x1a>
		write_bytes[2-i]=(uint8_t)((data>>(8*i))&0xff);
     53c:	2402      	movs	r4, #2
     53e:	1ae4      	subs	r4, r4, r3
     540:	00dd      	lsls	r5, r3, #3
     542:	0016      	movs	r6, r2
     544:	412e      	asrs	r6, r5
     546:	1904      	adds	r4, r0, r4
     548:	7426      	strb	r6, [r4, #16]
	for(int i=0; i<2;i++){
     54a:	3301      	adds	r3, #1
     54c:	e7f4      	b.n	538 <_ZN15lmx2694_Handler16Make_Three_BytesEht+0x4>
	write_bytes[0]=index;
     54e:	7401      	strb	r1, [r0, #16]
}
     550:	bd70      	pop	{r4, r5, r6, pc}
	...

00000554 <_ZN15lmx2694_Handler21Write_Single_RegisterEht>:
int lmx2694_Handler::Write_Single_Register(uint8_t index,uint16_t data){
     554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     556:	0004      	movs	r4, r0
     558:	000e      	movs	r6, r1
     55a:	0015      	movs	r5, r2
	if ((write_registers[index]==data)&is_locked)
     55c:	004f      	lsls	r7, r1, #1
     55e:	6883      	ldr	r3, [r0, #8]
     560:	5bdb      	ldrh	r3, [r3, r7]
     562:	7dc2      	ldrb	r2, [r0, #23]
     564:	42ab      	cmp	r3, r5
     566:	d103      	bne.n	570 <_ZN15lmx2694_Handler21Write_Single_RegisterEht+0x1c>
     568:	2a00      	cmp	r2, #0
     56a:	d001      	beq.n	570 <_ZN15lmx2694_Handler21Write_Single_RegisterEht+0x1c>
	return int_result;
     56c:	69a0      	ldr	r0, [r4, #24]
}
     56e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		spi_lmx->SetCS(false);
     570:	2100      	movs	r1, #0
     572:	68e0      	ldr	r0, [r4, #12]
     574:	4b0b      	ldr	r3, [pc, #44]	; (5a4 <_ZN15lmx2694_Handler21Write_Single_RegisterEht+0x50>)
     576:	4798      	blx	r3
		Make_Three_Bytes(index,data);
     578:	002a      	movs	r2, r5
     57a:	0031      	movs	r1, r6
     57c:	0020      	movs	r0, r4
     57e:	4b0a      	ldr	r3, [pc, #40]	; (5a8 <_ZN15lmx2694_Handler21Write_Single_RegisterEht+0x54>)
     580:	4798      	blx	r3
		int_result=spi_lmx->Write(write_bytes,3);
     582:	0021      	movs	r1, r4
     584:	3110      	adds	r1, #16
     586:	2203      	movs	r2, #3
     588:	68e0      	ldr	r0, [r4, #12]
     58a:	4b08      	ldr	r3, [pc, #32]	; (5ac <_ZN15lmx2694_Handler21Write_Single_RegisterEht+0x58>)
     58c:	4798      	blx	r3
     58e:	61a0      	str	r0, [r4, #24]
		if (int_result>0)
     590:	2800      	cmp	r0, #0
     592:	dd01      	ble.n	598 <_ZN15lmx2694_Handler21Write_Single_RegisterEht+0x44>
				write_registers[index]=data;
     594:	68a3      	ldr	r3, [r4, #8]
     596:	53dd      	strh	r5, [r3, r7]
		spi_lmx->SetCS(true);
     598:	2101      	movs	r1, #1
     59a:	68e0      	ldr	r0, [r4, #12]
     59c:	4b01      	ldr	r3, [pc, #4]	; (5a4 <_ZN15lmx2694_Handler21Write_Single_RegisterEht+0x50>)
     59e:	4798      	blx	r3
     5a0:	e7e4      	b.n	56c <_ZN15lmx2694_Handler21Write_Single_RegisterEht+0x18>
     5a2:	46c0      	nop			; (mov r8, r8)
     5a4:	00000d35 	.word	0x00000d35
     5a8:	00000535 	.word	0x00000535
     5ac:	00000d05 	.word	0x00000d05

000005b0 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf>:
int lmx2694_Handler::Program_PFD_DLY_SEL(float vcof){
     5b0:	b570      	push	{r4, r5, r6, lr}
     5b2:	0004      	movs	r4, r0
     5b4:	1c0d      	adds	r5, r1, #0
	if (mash_order)
     5b6:	2320      	movs	r3, #32
     5b8:	5cc3      	ldrb	r3, [r0, r3]
     5ba:	2b00      	cmp	r3, #0
     5bc:	d002      	beq.n	5c4 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x14>
		switch (mash_order)
     5be:	d005      	beq.n	5cc <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x1c>
     5c0:	2b01      	cmp	r3, #1
     5c2:	d015      	beq.n	5f0 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x40>
	return write_registers[37];
     5c4:	68a2      	ldr	r2, [r4, #8]
     5c6:	234a      	movs	r3, #74	; 0x4a
     5c8:	5ad0      	ldrh	r0, [r2, r3]
}
     5ca:	bd70      	pop	{r4, r5, r6, pc}
				if (vcof>12500)
     5cc:	4917      	ldr	r1, [pc, #92]	; (62c <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x7c>)
     5ce:	1c28      	adds	r0, r5, #0
     5d0:	4b17      	ldr	r3, [pc, #92]	; (630 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x80>)
     5d2:	4798      	blx	r3
     5d4:	2800      	cmp	r0, #0
     5d6:	d005      	beq.n	5e4 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x34>
					Write_Single_Register(37,0x8204);
     5d8:	4a16      	ldr	r2, [pc, #88]	; (634 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x84>)
     5da:	2125      	movs	r1, #37	; 0x25
     5dc:	0020      	movs	r0, r4
     5de:	4b16      	ldr	r3, [pc, #88]	; (638 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x88>)
     5e0:	4798      	blx	r3
     5e2:	e7ef      	b.n	5c4 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x14>
					Write_Single_Register(37,0x8104);
     5e4:	4a15      	ldr	r2, [pc, #84]	; (63c <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x8c>)
     5e6:	2125      	movs	r1, #37	; 0x25
     5e8:	0020      	movs	r0, r4
     5ea:	4b13      	ldr	r3, [pc, #76]	; (638 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x88>)
     5ec:	4798      	blx	r3
     5ee:	e7e9      	b.n	5c4 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x14>
				if (vcof>12500)
     5f0:	490e      	ldr	r1, [pc, #56]	; (62c <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x7c>)
     5f2:	1c28      	adds	r0, r5, #0
     5f4:	4b0e      	ldr	r3, [pc, #56]	; (630 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x80>)
     5f6:	4798      	blx	r3
     5f8:	2800      	cmp	r0, #0
     5fa:	d10b      	bne.n	614 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x64>
					if (vcof>10000)
     5fc:	4910      	ldr	r1, [pc, #64]	; (640 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x90>)
     5fe:	1c28      	adds	r0, r5, #0
     600:	4b0b      	ldr	r3, [pc, #44]	; (630 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x80>)
     602:	4798      	blx	r3
     604:	2800      	cmp	r0, #0
     606:	d10b      	bne.n	620 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x70>
						Write_Single_Register(37,0x8104);
     608:	4a0c      	ldr	r2, [pc, #48]	; (63c <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x8c>)
     60a:	2125      	movs	r1, #37	; 0x25
     60c:	0020      	movs	r0, r4
     60e:	4b0a      	ldr	r3, [pc, #40]	; (638 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x88>)
     610:	4798      	blx	r3
     612:	e7d7      	b.n	5c4 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x14>
					Write_Single_Register(37,0x8304);
     614:	4a0b      	ldr	r2, [pc, #44]	; (644 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x94>)
     616:	2125      	movs	r1, #37	; 0x25
     618:	0020      	movs	r0, r4
     61a:	4b07      	ldr	r3, [pc, #28]	; (638 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x88>)
     61c:	4798      	blx	r3
     61e:	e7d1      	b.n	5c4 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x14>
						Write_Single_Register(37,0x8204);
     620:	4a04      	ldr	r2, [pc, #16]	; (634 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x84>)
     622:	2125      	movs	r1, #37	; 0x25
     624:	0020      	movs	r0, r4
     626:	4b04      	ldr	r3, [pc, #16]	; (638 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x88>)
     628:	4798      	blx	r3
     62a:	e7cb      	b.n	5c4 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x14>
     62c:	46435000 	.word	0x46435000
     630:	00009045 	.word	0x00009045
     634:	00008204 	.word	0x00008204
     638:	00000555 	.word	0x00000555
     63c:	00008104 	.word	0x00008104
     640:	461c4000 	.word	0x461c4000
     644:	00008304 	.word	0x00008304

00000648 <_ZN15lmx2694_Handler13Write_FCAL_ENEb>:
bool lmx2694_Handler::Write_FCAL_EN(bool st){
     648:	b510      	push	{r4, lr}
     64a:	0004      	movs	r4, r0
	if(st){
     64c:	2900      	cmp	r1, #0
     64e:	d10e      	bne.n	66e <_ZN15lmx2694_Handler13Write_FCAL_ENEb+0x26>
		register_value=write_registers[0]&(~((uint16_t)(0x01<<FCAL_EN)));
     650:	6883      	ldr	r3, [r0, #8]
     652:	881b      	ldrh	r3, [r3, #0]
     654:	2208      	movs	r2, #8
     656:	4393      	bics	r3, r2
     658:	8383      	strh	r3, [r0, #28]
	int_result=Write_Single_Register(0,register_value);
     65a:	8ba2      	ldrh	r2, [r4, #28]
     65c:	2100      	movs	r1, #0
     65e:	0020      	movs	r0, r4
     660:	4b06      	ldr	r3, [pc, #24]	; (67c <_ZN15lmx2694_Handler13Write_FCAL_ENEb+0x34>)
     662:	4798      	blx	r3
     664:	61a0      	str	r0, [r4, #24]
	return int_result;
     666:	1e43      	subs	r3, r0, #1
     668:	4198      	sbcs	r0, r3
     66a:	b2c0      	uxtb	r0, r0
}
     66c:	bd10      	pop	{r4, pc}
		register_value=write_registers[0]|(0x01<<FCAL_EN);
     66e:	6883      	ldr	r3, [r0, #8]
     670:	881b      	ldrh	r3, [r3, #0]
     672:	2208      	movs	r2, #8
     674:	4313      	orrs	r3, r2
     676:	8383      	strh	r3, [r0, #28]
     678:	e7ef      	b.n	65a <_ZN15lmx2694_Handler13Write_FCAL_ENEb+0x12>
     67a:	46c0      	nop			; (mov r8, r8)
     67c:	00000555 	.word	0x00000555

00000680 <_ZN15lmx2694_Handler14Toggle_FCAL_ENEv>:
bool lmx2694_Handler::Toggle_FCAL_EN(){
     680:	b570      	push	{r4, r5, r6, lr}
     682:	0004      	movs	r4, r0
	Write_FCAL_EN(false);
     684:	2100      	movs	r1, #0
     686:	4d05      	ldr	r5, [pc, #20]	; (69c <_ZN15lmx2694_Handler14Toggle_FCAL_ENEv+0x1c>)
     688:	47a8      	blx	r5
	delay_ms(100);
     68a:	2064      	movs	r0, #100	; 0x64
     68c:	4b04      	ldr	r3, [pc, #16]	; (6a0 <_ZN15lmx2694_Handler14Toggle_FCAL_ENEv+0x20>)
     68e:	4798      	blx	r3
	bool_result=Write_FCAL_EN(true);
     690:	2101      	movs	r1, #1
     692:	0020      	movs	r0, r4
     694:	47a8      	blx	r5
     696:	75a0      	strb	r0, [r4, #22]
}
     698:	bd70      	pop	{r4, r5, r6, pc}
     69a:	46c0      	nop			; (mov r8, r8)
     69c:	00000649 	.word	0x00000649
     6a0:	00001afd 	.word	0x00001afd

000006a4 <_ZN15lmx2694_Handler18Initiate_RegistersEv>:
void lmx2694_Handler::Initiate_Registers(){
     6a4:	b570      	push	{r4, r5, r6, lr}
     6a6:	0005      	movs	r5, r0
	for (int i = 0; i < NUMBER_REGISTERS; i++)
     6a8:	2200      	movs	r2, #0
     6aa:	2a72      	cmp	r2, #114	; 0x72
     6ac:	dc0a      	bgt.n	6c4 <_ZN15lmx2694_Handler18Initiate_RegistersEv+0x20>
		read_registers[i]=default_registers[NUMBER_REGISTERS-i-1];
     6ae:	0050      	lsls	r0, r2, #1
     6b0:	2372      	movs	r3, #114	; 0x72
     6b2:	1a9b      	subs	r3, r3, r2
     6b4:	005b      	lsls	r3, r3, #1
     6b6:	490b      	ldr	r1, [pc, #44]	; (6e4 <_ZN15lmx2694_Handler18Initiate_RegistersEv+0x40>)
     6b8:	18cb      	adds	r3, r1, r3
     6ba:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
     6bc:	6869      	ldr	r1, [r5, #4]
     6be:	520b      	strh	r3, [r1, r0]
	for (int i = 0; i < NUMBER_REGISTERS; i++)
     6c0:	3201      	adds	r2, #1
     6c2:	e7f2      	b.n	6aa <_ZN15lmx2694_Handler18Initiate_RegistersEv+0x6>
     6c4:	2473      	movs	r4, #115	; 0x73
	for(int i=NUMBER_REGISTERS; i>0;i--){
     6c6:	2c00      	cmp	r4, #0
     6c8:	dd0b      	ble.n	6e2 <_ZN15lmx2694_Handler18Initiate_RegistersEv+0x3e>
		Write_Single_Register(i-1,read_registers[i-1]);
     6ca:	1e61      	subs	r1, r4, #1
     6cc:	b2c9      	uxtb	r1, r1
     6ce:	4b06      	ldr	r3, [pc, #24]	; (6e8 <_ZN15lmx2694_Handler18Initiate_RegistersEv+0x44>)
     6d0:	18e3      	adds	r3, r4, r3
     6d2:	005b      	lsls	r3, r3, #1
     6d4:	686a      	ldr	r2, [r5, #4]
     6d6:	5ad2      	ldrh	r2, [r2, r3]
     6d8:	0028      	movs	r0, r5
     6da:	4b04      	ldr	r3, [pc, #16]	; (6ec <_ZN15lmx2694_Handler18Initiate_RegistersEv+0x48>)
     6dc:	4798      	blx	r3
	for(int i=NUMBER_REGISTERS; i>0;i--){
     6de:	3c01      	subs	r4, #1
     6e0:	e7f1      	b.n	6c6 <_ZN15lmx2694_Handler18Initiate_RegistersEv+0x22>
}
     6e2:	bd70      	pop	{r4, r5, r6, pc}
     6e4:	00010b74 	.word	0x00010b74
     6e8:	7fffffff 	.word	0x7fffffff
     6ec:	00000555 	.word	0x00000555

000006f0 <_ZN15lmx2694_Handler19Set_MUXOUT_READBACKEb>:
int lmx2694_Handler::Set_MUXOUT_READBACK(bool st){
     6f0:	b510      	push	{r4, lr}
     6f2:	0004      	movs	r4, r0
	if(st){
     6f4:	2900      	cmp	r1, #0
     6f6:	d10b      	bne.n	710 <_ZN15lmx2694_Handler19Set_MUXOUT_READBACKEb+0x20>
		register_value=read_registers[0]&(~((uint16_t)(0x01<<READBACK_ENABLE_BIT)));
     6f8:	6843      	ldr	r3, [r0, #4]
     6fa:	881b      	ldrh	r3, [r3, #0]
     6fc:	2204      	movs	r2, #4
     6fe:	4393      	bics	r3, r2
     700:	8383      	strh	r3, [r0, #28]
	int_result=Write_Single_Register(0,register_value);
     702:	8ba2      	ldrh	r2, [r4, #28]
     704:	2100      	movs	r1, #0
     706:	0020      	movs	r0, r4
     708:	4b04      	ldr	r3, [pc, #16]	; (71c <_ZN15lmx2694_Handler19Set_MUXOUT_READBACKEb+0x2c>)
     70a:	4798      	blx	r3
     70c:	61a0      	str	r0, [r4, #24]
}
     70e:	bd10      	pop	{r4, pc}
		register_value=read_registers[0]|(0x01<<READBACK_ENABLE_BIT);
     710:	6843      	ldr	r3, [r0, #4]
     712:	881b      	ldrh	r3, [r3, #0]
     714:	2204      	movs	r2, #4
     716:	4313      	orrs	r3, r2
     718:	8383      	strh	r3, [r0, #28]
     71a:	e7f2      	b.n	702 <_ZN15lmx2694_Handler19Set_MUXOUT_READBACKEb+0x12>
     71c:	00000555 	.word	0x00000555

00000720 <_ZN15lmx2694_Handler20Read_Single_RegisterEh>:
uint16_t lmx2694_Handler::Read_Single_Register(uint8_t index){
     720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     722:	0004      	movs	r4, r0
     724:	000e      	movs	r6, r1
	Set_MUXOUT_READBACK(false);
     726:	2100      	movs	r1, #0
     728:	4b1b      	ldr	r3, [pc, #108]	; (798 <_ZN15lmx2694_Handler20Read_Single_RegisterEh+0x78>)
     72a:	4798      	blx	r3
	register_value=0;
     72c:	2300      	movs	r3, #0
     72e:	83a3      	strh	r3, [r4, #28]
	while((register_value==0)|(register_value==0xffff)){
     730:	8ba2      	ldrh	r2, [r4, #28]
     732:	1e53      	subs	r3, r2, #1
     734:	b29b      	uxth	r3, r3
     736:	4919      	ldr	r1, [pc, #100]	; (79c <_ZN15lmx2694_Handler20Read_Single_RegisterEh+0x7c>)
     738:	428b      	cmp	r3, r1
     73a:	d924      	bls.n	786 <_ZN15lmx2694_Handler20Read_Single_RegisterEh+0x66>
		spi_lmx->SetCS(false);
     73c:	2100      	movs	r1, #0
     73e:	68e0      	ldr	r0, [r4, #12]
     740:	4f17      	ldr	r7, [pc, #92]	; (7a0 <_ZN15lmx2694_Handler20Read_Single_RegisterEh+0x80>)
     742:	47b8      	blx	r7
			private_index=index|0x80;
     744:	2380      	movs	r3, #128	; 0x80
     746:	425b      	negs	r3, r3
     748:	4333      	orrs	r3, r6
     74a:	77a3      	strb	r3, [r4, #30]
			memset(read_bytes,0,3);
     74c:	2203      	movs	r2, #3
     74e:	2100      	movs	r1, #0
     750:	0025      	movs	r5, r4
     752:	3513      	adds	r5, #19
     754:	0028      	movs	r0, r5
     756:	4b13      	ldr	r3, [pc, #76]	; (7a4 <_ZN15lmx2694_Handler20Read_Single_RegisterEh+0x84>)
     758:	4798      	blx	r3
			int_result=spi_lmx->Write(&private_index,1);
     75a:	2201      	movs	r2, #1
     75c:	0021      	movs	r1, r4
     75e:	311e      	adds	r1, #30
     760:	68e0      	ldr	r0, [r4, #12]
     762:	4b11      	ldr	r3, [pc, #68]	; (7a8 <_ZN15lmx2694_Handler20Read_Single_RegisterEh+0x88>)
     764:	4798      	blx	r3
     766:	61a0      	str	r0, [r4, #24]
			int_result=spi_lmx->Read(read_bytes,2);
     768:	2202      	movs	r2, #2
     76a:	0029      	movs	r1, r5
     76c:	68e0      	ldr	r0, [r4, #12]
     76e:	4b0f      	ldr	r3, [pc, #60]	; (7ac <_ZN15lmx2694_Handler20Read_Single_RegisterEh+0x8c>)
     770:	4798      	blx	r3
     772:	61a0      	str	r0, [r4, #24]
			register_value=read_bytes[0]*256+read_bytes[1];
     774:	7ce3      	ldrb	r3, [r4, #19]
     776:	021b      	lsls	r3, r3, #8
     778:	7d22      	ldrb	r2, [r4, #20]
     77a:	189b      	adds	r3, r3, r2
     77c:	83a3      	strh	r3, [r4, #28]
			spi_lmx->SetCS(true);
     77e:	2101      	movs	r1, #1
     780:	68e0      	ldr	r0, [r4, #12]
     782:	47b8      	blx	r7
	while((register_value==0)|(register_value==0xffff)){
     784:	e7d4      	b.n	730 <_ZN15lmx2694_Handler20Read_Single_RegisterEh+0x10>
	read_registers[index]=register_value;
     786:	0076      	lsls	r6, r6, #1
     788:	6863      	ldr	r3, [r4, #4]
     78a:	539a      	strh	r2, [r3, r6]
	Set_MUXOUT_READBACK(true);
     78c:	2101      	movs	r1, #1
     78e:	0020      	movs	r0, r4
     790:	4b01      	ldr	r3, [pc, #4]	; (798 <_ZN15lmx2694_Handler20Read_Single_RegisterEh+0x78>)
     792:	4798      	blx	r3
	return register_value;
     794:	8ba0      	ldrh	r0, [r4, #28]
}
     796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     798:	000006f1 	.word	0x000006f1
     79c:	0000fffd 	.word	0x0000fffd
     7a0:	00000d35 	.word	0x00000d35
     7a4:	0000b785 	.word	0x0000b785
     7a8:	00000d05 	.word	0x00000d05
     7ac:	00000d1d 	.word	0x00000d1d

000007b0 <_ZN15lmx2694_Handler25Get_Channel_Divider_ValueEb>:
int lmx2694_Handler::Get_Channel_Divider_Value(bool mbr){
     7b0:	b510      	push	{r4, lr}
     7b2:	0004      	movs	r4, r0
	if (mbr)
     7b4:	2900      	cmp	r1, #0
     7b6:	d10b      	bne.n	7d0 <_ZN15lmx2694_Handler25Get_Channel_Divider_ValueEb+0x20>
		channel_index=((write_registers[75])>>6)&0x1f;
     7b8:	2396      	movs	r3, #150	; 0x96
     7ba:	6882      	ldr	r2, [r0, #8]
     7bc:	5ad2      	ldrh	r2, [r2, r3]
     7be:	1192      	asrs	r2, r2, #6
     7c0:	3b77      	subs	r3, #119	; 0x77
     7c2:	4013      	ands	r3, r2
     7c4:	77c3      	strb	r3, [r0, #31]
	return channel_divider_values[channel_index];
     7c6:	7fe3      	ldrb	r3, [r4, #31]
     7c8:	009b      	lsls	r3, r3, #2
     7ca:	4a05      	ldr	r2, [pc, #20]	; (7e0 <_ZN15lmx2694_Handler25Get_Channel_Divider_ValueEb+0x30>)
     7cc:	5898      	ldr	r0, [r3, r2]
}
     7ce:	bd10      	pop	{r4, pc}
		channel_index=((Read_Single_Register(75))>>6)&0x1f;
     7d0:	214b      	movs	r1, #75	; 0x4b
     7d2:	4b04      	ldr	r3, [pc, #16]	; (7e4 <_ZN15lmx2694_Handler25Get_Channel_Divider_ValueEb+0x34>)
     7d4:	4798      	blx	r3
     7d6:	1183      	asrs	r3, r0, #6
     7d8:	201f      	movs	r0, #31
     7da:	4018      	ands	r0, r3
     7dc:	77e0      	strb	r0, [r4, #31]
     7de:	e7f2      	b.n	7c6 <_ZN15lmx2694_Handler25Get_Channel_Divider_ValueEb+0x16>
     7e0:	00010b74 	.word	0x00010b74
     7e4:	00000721 	.word	0x00000721

000007e8 <_ZN15lmx2694_Handler9Is_LockedEv>:
bool lmx2694_Handler::Is_Locked(void){
     7e8:	b570      	push	{r4, r5, r6, lr}
     7ea:	b082      	sub	sp, #8
     7ec:	0005      	movs	r5, r0
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
     7ee:	4668      	mov	r0, sp
     7f0:	4b2a      	ldr	r3, [pc, #168]	; (89c <_ZN15lmx2694_Handler9Is_LockedEv+0xb4>)
     7f2:	4798      	blx	r3
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
     7f4:	23c0      	movs	r3, #192	; 0xc0
     7f6:	05db      	lsls	r3, r3, #23
     7f8:	681c      	ldr	r4, [r3, #0]
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Port *)hw)->Group[submodule_index].IN.reg;
     7fa:	4a29      	ldr	r2, [pc, #164]	; (8a0 <_ZN15lmx2694_Handler9Is_LockedEv+0xb8>)
     7fc:	6a12      	ldr	r2, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
     7fe:	691b      	ldr	r3, [r3, #16]

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT_IOBUS, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
     800:	4053      	eors	r3, r2
     802:	401c      	ands	r4, r3
     804:	4054      	eors	r4, r2

	CRITICAL_SECTION_LEAVE();
     806:	4668      	mov	r0, sp
     808:	4b26      	ldr	r3, [pc, #152]	; (8a4 <_ZN15lmx2694_Handler9Is_LockedEv+0xbc>)
     80a:	4798      	blx	r3
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
     80c:	2380      	movs	r3, #128	; 0x80
     80e:	02db      	lsls	r3, r3, #11
     810:	401c      	ands	r4, r3
     812:	1e63      	subs	r3, r4, #1
     814:	419c      	sbcs	r4, r3
     816:	b2e4      	uxtb	r4, r4
	is_locked=gpio_get_pin_level(PA18);
     818:	75ec      	strb	r4, [r5, #23]
	if (is_locked)
     81a:	2c00      	cmp	r4, #0
     81c:	d010      	beq.n	840 <_ZN15lmx2694_Handler9Is_LockedEv+0x58>
	if (is_locked)
     81e:	7deb      	ldrb	r3, [r5, #23]
     820:	2b00      	cmp	r3, #0
     822:	d00a      	beq.n	83a <_ZN15lmx2694_Handler9Is_LockedEv+0x52>
		if (Get_OUT_MUX(2)>0)
     824:	2102      	movs	r1, #2
     826:	0028      	movs	r0, r5
     828:	4b1f      	ldr	r3, [pc, #124]	; (8a8 <_ZN15lmx2694_Handler9Is_LockedEv+0xc0>)
     82a:	4798      	blx	r3
     82c:	2800      	cmp	r0, #0
     82e:	dd20      	ble.n	872 <_ZN15lmx2694_Handler9Is_LockedEv+0x8a>
			current_frequency=Calculate_Current_Frequency(false)/1;
     830:	2100      	movs	r1, #0
     832:	0028      	movs	r0, r5
     834:	4b1d      	ldr	r3, [pc, #116]	; (8ac <_ZN15lmx2694_Handler9Is_LockedEv+0xc4>)
     836:	4798      	blx	r3
     838:	6028      	str	r0, [r5, #0]
	return is_locked;
     83a:	7de8      	ldrb	r0, [r5, #23]
}
     83c:	b002      	add	sp, #8
     83e:	bd70      	pop	{r4, r5, r6, pc}
		delay_ms(10);
     840:	200a      	movs	r0, #10
     842:	4b1b      	ldr	r3, [pc, #108]	; (8b0 <_ZN15lmx2694_Handler9Is_LockedEv+0xc8>)
     844:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
     846:	a801      	add	r0, sp, #4
     848:	4b14      	ldr	r3, [pc, #80]	; (89c <_ZN15lmx2694_Handler9Is_LockedEv+0xb4>)
     84a:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
     84c:	23c0      	movs	r3, #192	; 0xc0
     84e:	05db      	lsls	r3, r3, #23
     850:	681c      	ldr	r4, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
     852:	4a13      	ldr	r2, [pc, #76]	; (8a0 <_ZN15lmx2694_Handler9Is_LockedEv+0xb8>)
     854:	6a12      	ldr	r2, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
     856:	691b      	ldr	r3, [r3, #16]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
     858:	4053      	eors	r3, r2
     85a:	401c      	ands	r4, r3
     85c:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
     85e:	a801      	add	r0, sp, #4
     860:	4b10      	ldr	r3, [pc, #64]	; (8a4 <_ZN15lmx2694_Handler9Is_LockedEv+0xbc>)
     862:	4798      	blx	r3
     864:	2380      	movs	r3, #128	; 0x80
     866:	02db      	lsls	r3, r3, #11
     868:	401c      	ands	r4, r3
     86a:	1e63      	subs	r3, r4, #1
     86c:	419c      	sbcs	r4, r3
		is_locked=gpio_get_pin_level(PA18);
     86e:	75ec      	strb	r4, [r5, #23]
     870:	e7d5      	b.n	81e <_ZN15lmx2694_Handler9Is_LockedEv+0x36>
			channel_divider=Get_Channel_Divider_Value(false);
     872:	2100      	movs	r1, #0
     874:	0028      	movs	r0, r5
     876:	4b0f      	ldr	r3, [pc, #60]	; (8b4 <_ZN15lmx2694_Handler9Is_LockedEv+0xcc>)
     878:	4798      	blx	r3
     87a:	2421      	movs	r4, #33	; 0x21
     87c:	5528      	strb	r0, [r5, r4]
			current_frequency=Calculate_Current_Frequency(false)/channel_divider;
     87e:	2100      	movs	r1, #0
     880:	0028      	movs	r0, r5
     882:	4b0a      	ldr	r3, [pc, #40]	; (8ac <_ZN15lmx2694_Handler9Is_LockedEv+0xc4>)
     884:	4798      	blx	r3
     886:	1c06      	adds	r6, r0, #0
     888:	5d28      	ldrb	r0, [r5, r4]
     88a:	4b0b      	ldr	r3, [pc, #44]	; (8b8 <_ZN15lmx2694_Handler9Is_LockedEv+0xd0>)
     88c:	4798      	blx	r3
     88e:	1c01      	adds	r1, r0, #0
     890:	1c30      	adds	r0, r6, #0
     892:	4b0a      	ldr	r3, [pc, #40]	; (8bc <_ZN15lmx2694_Handler9Is_LockedEv+0xd4>)
     894:	4798      	blx	r3
     896:	6028      	str	r0, [r5, #0]
     898:	e7cf      	b.n	83a <_ZN15lmx2694_Handler9Is_LockedEv+0x52>
     89a:	46c0      	nop			; (mov r8, r8)
     89c:	00001a91 	.word	0x00001a91
     8a0:	41004400 	.word	0x41004400
     8a4:	00001ab3 	.word	0x00001ab3
     8a8:	0000025b 	.word	0x0000025b
     8ac:	000002c1 	.word	0x000002c1
     8b0:	00001afd 	.word	0x00001afd
     8b4:	000007b1 	.word	0x000007b1
     8b8:	00009f19 	.word	0x00009f19
     8bc:	00009581 	.word	0x00009581

000008c0 <_ZN15lmx2694_Handler4InitEv>:
bool lmx2694_Handler::Init(){
     8c0:	b570      	push	{r4, r5, r6, lr}
     8c2:	0004      	movs	r4, r0
	spi_lmx=&staticSPI;
     8c4:	480e      	ldr	r0, [pc, #56]	; (900 <_ZN15lmx2694_Handler4InitEv+0x40>)
     8c6:	60e0      	str	r0, [r4, #12]
	spi_lmx->Init();
     8c8:	4b0e      	ldr	r3, [pc, #56]	; (904 <_ZN15lmx2694_Handler4InitEv+0x44>)
     8ca:	4798      	blx	r3
	spi_lmx->SetCS(true);
     8cc:	2101      	movs	r1, #1
     8ce:	68e0      	ldr	r0, [r4, #12]
     8d0:	4b0d      	ldr	r3, [pc, #52]	; (908 <_ZN15lmx2694_Handler4InitEv+0x48>)
     8d2:	4798      	blx	r3
	Power_Down();
     8d4:	0020      	movs	r0, r4
     8d6:	4b0d      	ldr	r3, [pc, #52]	; (90c <_ZN15lmx2694_Handler4InitEv+0x4c>)
     8d8:	4798      	blx	r3
	Program_Reset();
     8da:	0020      	movs	r0, r4
     8dc:	4b0c      	ldr	r3, [pc, #48]	; (910 <_ZN15lmx2694_Handler4InitEv+0x50>)
     8de:	4798      	blx	r3
	Initiate_Registers();
     8e0:	0020      	movs	r0, r4
     8e2:	4b0c      	ldr	r3, [pc, #48]	; (914 <_ZN15lmx2694_Handler4InitEv+0x54>)
     8e4:	4798      	blx	r3
	delay_ms(10);
     8e6:	200a      	movs	r0, #10
     8e8:	4d0b      	ldr	r5, [pc, #44]	; (918 <_ZN15lmx2694_Handler4InitEv+0x58>)
     8ea:	47a8      	blx	r5
	Toggle_FCAL_EN();
     8ec:	0020      	movs	r0, r4
     8ee:	4b0b      	ldr	r3, [pc, #44]	; (91c <_ZN15lmx2694_Handler4InitEv+0x5c>)
     8f0:	4798      	blx	r3
	delay_ms(100);
     8f2:	2064      	movs	r0, #100	; 0x64
     8f4:	47a8      	blx	r5
	return Is_Locked();
     8f6:	0020      	movs	r0, r4
     8f8:	4b09      	ldr	r3, [pc, #36]	; (920 <_ZN15lmx2694_Handler4InitEv+0x60>)
     8fa:	4798      	blx	r3
}
     8fc:	bd70      	pop	{r4, r5, r6, pc}
     8fe:	46c0      	nop			; (mov r8, r8)
     900:	20000a4c 	.word	0x20000a4c
     904:	00000cdd 	.word	0x00000cdd
     908:	00000d35 	.word	0x00000d35
     90c:	00000475 	.word	0x00000475
     910:	000004b9 	.word	0x000004b9
     914:	000006a5 	.word	0x000006a5
     918:	00001afd 	.word	0x00001afd
     91c:	00000681 	.word	0x00000681
     920:	000007e9 	.word	0x000007e9

00000924 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEv>:
void lmx2694_Handler::Program_PFD_DLY_SEL(void){
     924:	b570      	push	{r4, r5, r6, lr}
     926:	0004      	movs	r4, r0
	if (target_frequency>MIN_VCO_FREQUENCY)
     928:	6b45      	ldr	r5, [r0, #52]	; 0x34
     92a:	490b      	ldr	r1, [pc, #44]	; (958 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEv+0x34>)
     92c:	1c28      	adds	r0, r5, #0
     92e:	4b0b      	ldr	r3, [pc, #44]	; (95c <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEv+0x38>)
     930:	4798      	blx	r3
     932:	2800      	cmp	r0, #0
     934:	d005      	beq.n	942 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEv+0x1e>
		vco_frequency=target_frequency;
     936:	63a5      	str	r5, [r4, #56]	; 0x38
	Program_PFD_DLY_SEL(vco_frequency);
     938:	6ba1      	ldr	r1, [r4, #56]	; 0x38
     93a:	0020      	movs	r0, r4
     93c:	4b08      	ldr	r3, [pc, #32]	; (960 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEv+0x3c>)
     93e:	4798      	blx	r3
}
     940:	bd70      	pop	{r4, r5, r6, pc}
		vco_frequency=target_frequency*Get_Channel_Divider_Value(false);
     942:	2100      	movs	r1, #0
     944:	0020      	movs	r0, r4
     946:	4b07      	ldr	r3, [pc, #28]	; (964 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEv+0x40>)
     948:	4798      	blx	r3
     94a:	4b07      	ldr	r3, [pc, #28]	; (968 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEv+0x44>)
     94c:	4798      	blx	r3
     94e:	1c29      	adds	r1, r5, #0
     950:	4b06      	ldr	r3, [pc, #24]	; (96c <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEv+0x48>)
     952:	4798      	blx	r3
     954:	63a0      	str	r0, [r4, #56]	; 0x38
     956:	e7ef      	b.n	938 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEv+0x14>
     958:	45ebf000 	.word	0x45ebf000
     95c:	00009045 	.word	0x00009045
     960:	000005b1 	.word	0x000005b1
     964:	000007b1 	.word	0x000007b1
     968:	00009f19 	.word	0x00009f19
     96c:	00009961 	.word	0x00009961

00000970 <_ZN15lmx2694_Handler24Write_Division_RegistersEv>:
void  lmx2694_Handler::Write_Division_Registers(void){
     970:	b570      	push	{r4, r5, r6, lr}
     972:	0004      	movs	r4, r0
	Write_Single_Register(43,(uint16_t)(numerator&0xffff));
     974:	8d02      	ldrh	r2, [r0, #40]	; 0x28
     976:	212b      	movs	r1, #43	; 0x2b
     978:	4d0c      	ldr	r5, [pc, #48]	; (9ac <_ZN15lmx2694_Handler24Write_Division_RegistersEv+0x3c>)
     97a:	47a8      	blx	r5
	Write_Single_Register(42,(uint16_t)(numerator>>16));
     97c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
     97e:	212a      	movs	r1, #42	; 0x2a
     980:	0020      	movs	r0, r4
     982:	47a8      	blx	r5
	Write_Single_Register(39,(uint16_t)(denominator&0xffff));
     984:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
     986:	2127      	movs	r1, #39	; 0x27
     988:	0020      	movs	r0, r4
     98a:	47a8      	blx	r5
	Write_Single_Register(38,(uint16_t)(denominator>>16));
     98c:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
     98e:	2126      	movs	r1, #38	; 0x26
     990:	0020      	movs	r0, r4
     992:	47a8      	blx	r5
	Program_PFD_DLY_SEL();
     994:	0020      	movs	r0, r4
     996:	4b06      	ldr	r3, [pc, #24]	; (9b0 <_ZN15lmx2694_Handler24Write_Division_RegistersEv+0x40>)
     998:	4798      	blx	r3
	Write_Single_Register(36,(uint16_t)(N_divider&0xffff));
     99a:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
     99c:	2124      	movs	r1, #36	; 0x24
     99e:	0020      	movs	r0, r4
     9a0:	47a8      	blx	r5
	Write_Single_Register(34,(uint16_t)(N_divider>>16));
     9a2:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
     9a4:	2122      	movs	r1, #34	; 0x22
     9a6:	0020      	movs	r0, r4
     9a8:	47a8      	blx	r5
}
     9aa:	bd70      	pop	{r4, r5, r6, pc}
     9ac:	00000555 	.word	0x00000555
     9b0:	00000925 	.word	0x00000925

000009b4 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf>:
float lmx2694_Handler::Set_Target_Frequency(float tf){
     9b4:	b570      	push	{r4, r5, r6, lr}
     9b6:	0004      	movs	r4, r0
     9b8:	1c0d      	adds	r5, r1, #0
	if (tf>MAX_VCO_FREQUENCY)
     9ba:	4940      	ldr	r1, [pc, #256]	; (abc <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x108>)
     9bc:	1c28      	adds	r0, r5, #0
     9be:	4b40      	ldr	r3, [pc, #256]	; (ac0 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x10c>)
     9c0:	4798      	blx	r3
     9c2:	2800      	cmp	r0, #0
     9c4:	d138      	bne.n	a38 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x84>
		if (tf>MIN_PLL_FREQUENCY)
     9c6:	493f      	ldr	r1, [pc, #252]	; (ac4 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x110>)
     9c8:	1c28      	adds	r0, r5, #0
     9ca:	4b3d      	ldr	r3, [pc, #244]	; (ac0 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x10c>)
     9cc:	4798      	blx	r3
     9ce:	2800      	cmp	r0, #0
     9d0:	d034      	beq.n	a3c <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x88>
			target_frequency=tf;
     9d2:	6365      	str	r5, [r4, #52]	; 0x34
			if (tf>MIN_VCO_FREQUENCY)
     9d4:	493c      	ldr	r1, [pc, #240]	; (ac8 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x114>)
     9d6:	1c28      	adds	r0, r5, #0
     9d8:	4b39      	ldr	r3, [pc, #228]	; (ac0 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x10c>)
     9da:	4798      	blx	r3
     9dc:	2800      	cmp	r0, #0
     9de:	d03a      	beq.n	a56 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0xa2>
				if (current_frequency>MIN_VCO_FREQUENCY)
     9e0:	4939      	ldr	r1, [pc, #228]	; (ac8 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x114>)
     9e2:	6820      	ldr	r0, [r4, #0]
     9e4:	4b36      	ldr	r3, [pc, #216]	; (ac0 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x10c>)
     9e6:	4798      	blx	r3
     9e8:	2800      	cmp	r0, #0
     9ea:	d029      	beq.n	a40 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x8c>
				channel_divider=1;
     9ec:	2201      	movs	r2, #1
     9ee:	2321      	movs	r3, #33	; 0x21
     9f0:	54e2      	strb	r2, [r4, r3]
			divider=(tf*channel_divider)/(REFERENCE_FREQUENCY*2);
     9f2:	2321      	movs	r3, #33	; 0x21
     9f4:	5ce0      	ldrb	r0, [r4, r3]
     9f6:	4b35      	ldr	r3, [pc, #212]	; (acc <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x118>)
     9f8:	4798      	blx	r3
     9fa:	1c29      	adds	r1, r5, #0
     9fc:	4b34      	ldr	r3, [pc, #208]	; (ad0 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x11c>)
     9fe:	4798      	blx	r3
     a00:	4934      	ldr	r1, [pc, #208]	; (ad4 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x120>)
     a02:	4b35      	ldr	r3, [pc, #212]	; (ad8 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x124>)
     a04:	4798      	blx	r3
     a06:	1c05      	adds	r5, r0, #0
     a08:	63e0      	str	r0, [r4, #60]	; 0x3c
  { return __builtin_floorf(__x); }
     a0a:	4b34      	ldr	r3, [pc, #208]	; (adc <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x128>)
     a0c:	4798      	blx	r3
			N_divider=(uint32_t)(floor(divider));
     a0e:	4b34      	ldr	r3, [pc, #208]	; (ae0 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x12c>)
     a10:	4798      	blx	r3
     a12:	6260      	str	r0, [r4, #36]	; 0x24
			fraction=divider-N_divider;
     a14:	4b33      	ldr	r3, [pc, #204]	; (ae4 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x130>)
     a16:	4798      	blx	r3
     a18:	1c01      	adds	r1, r0, #0
     a1a:	1c28      	adds	r0, r5, #0
     a1c:	4b32      	ldr	r3, [pc, #200]	; (ae8 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x134>)
     a1e:	4798      	blx	r3
     a20:	1c01      	adds	r1, r0, #0
     a22:	6420      	str	r0, [r4, #64]	; 0x40
			Calculate_Fraction(fraction);
     a24:	0020      	movs	r0, r4
     a26:	4b31      	ldr	r3, [pc, #196]	; (aec <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x138>)
     a28:	4798      	blx	r3
			Write_Division_Registers();
     a2a:	0020      	movs	r0, r4
     a2c:	4b30      	ldr	r3, [pc, #192]	; (af0 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x13c>)
     a2e:	4798      	blx	r3
			Toggle_FCAL_EN();
     a30:	0020      	movs	r0, r4
     a32:	4b30      	ldr	r3, [pc, #192]	; (af4 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x140>)
     a34:	4798      	blx	r3
     a36:	e001      	b.n	a3c <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x88>
		target_frequency=MAX_VCO_FREQUENCY;
     a38:	4b20      	ldr	r3, [pc, #128]	; (abc <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x108>)
     a3a:	6363      	str	r3, [r4, #52]	; 0x34
	return fraction;
     a3c:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
     a3e:	bd70      	pop	{r4, r5, r6, pc}
					Write_Single_Register(46,write_registers[46]|OUT_MUX_VCO);
     a40:	235c      	movs	r3, #92	; 0x5c
     a42:	68a2      	ldr	r2, [r4, #8]
     a44:	5ad2      	ldrh	r2, [r2, r3]
     a46:	2301      	movs	r3, #1
     a48:	431a      	orrs	r2, r3
     a4a:	b292      	uxth	r2, r2
     a4c:	212e      	movs	r1, #46	; 0x2e
     a4e:	0020      	movs	r0, r4
     a50:	4b29      	ldr	r3, [pc, #164]	; (af8 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x144>)
     a52:	4798      	blx	r3
     a54:	e7ca      	b.n	9ec <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x38>
				if (current_frequency<MIN_VCO_FREQUENCY)
     a56:	491c      	ldr	r1, [pc, #112]	; (ac8 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x114>)
     a58:	6820      	ldr	r0, [r4, #0]
     a5a:	4b28      	ldr	r3, [pc, #160]	; (afc <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x148>)
     a5c:	4798      	blx	r3
     a5e:	2800      	cmp	r0, #0
     a60:	d01a      	beq.n	a98 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0xe4>
				register_value=write_registers[75]&(~((uint16_t)0x07c0));
     a62:	2396      	movs	r3, #150	; 0x96
     a64:	68a2      	ldr	r2, [r4, #8]
     a66:	5ad2      	ldrh	r2, [r2, r3]
     a68:	4b25      	ldr	r3, [pc, #148]	; (b00 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x14c>)
     a6a:	401a      	ands	r2, r3
     a6c:	83a2      	strh	r2, [r4, #28]
				Write_Single_Register(75,register_value|(((uint16_t)Choose_Channel_Divider_Index())<<6));
     a6e:	b216      	sxth	r6, r2
     a70:	0020      	movs	r0, r4
     a72:	4b24      	ldr	r3, [pc, #144]	; (b04 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x150>)
     a74:	4798      	blx	r3
     a76:	0182      	lsls	r2, r0, #6
     a78:	4332      	orrs	r2, r6
     a7a:	b292      	uxth	r2, r2
     a7c:	214b      	movs	r1, #75	; 0x4b
     a7e:	0020      	movs	r0, r4
     a80:	4b1d      	ldr	r3, [pc, #116]	; (af8 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x144>)
     a82:	4798      	blx	r3
				if (channel_divider>2)
     a84:	2321      	movs	r3, #33	; 0x21
     a86:	5ce3      	ldrb	r3, [r4, r3]
     a88:	2b02      	cmp	r3, #2
     a8a:	dd0f      	ble.n	aac <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0xf8>
					Write_Single_Register(31,0x43ec);
     a8c:	4a1e      	ldr	r2, [pc, #120]	; (b08 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x154>)
     a8e:	211f      	movs	r1, #31
     a90:	0020      	movs	r0, r4
     a92:	4b19      	ldr	r3, [pc, #100]	; (af8 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x144>)
     a94:	4798      	blx	r3
     a96:	e7ac      	b.n	9f2 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x3e>
					Write_Single_Register(46,write_registers[46]&(~((uint16_t)0x03)));
     a98:	235c      	movs	r3, #92	; 0x5c
     a9a:	68a2      	ldr	r2, [r4, #8]
     a9c:	5ad2      	ldrh	r2, [r2, r3]
     a9e:	3b59      	subs	r3, #89	; 0x59
     aa0:	439a      	bics	r2, r3
     aa2:	212e      	movs	r1, #46	; 0x2e
     aa4:	0020      	movs	r0, r4
     aa6:	4b14      	ldr	r3, [pc, #80]	; (af8 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x144>)
     aa8:	4798      	blx	r3
     aaa:	e7da      	b.n	a62 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0xae>
					Write_Single_Register(31,0x3ec);
     aac:	22fb      	movs	r2, #251	; 0xfb
     aae:	0092      	lsls	r2, r2, #2
     ab0:	211f      	movs	r1, #31
     ab2:	0020      	movs	r0, r4
     ab4:	4b10      	ldr	r3, [pc, #64]	; (af8 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x144>)
     ab6:	4798      	blx	r3
     ab8:	e79b      	b.n	9f2 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x3e>
     aba:	46c0      	nop			; (mov r8, r8)
     abc:	466bf000 	.word	0x466bf000
     ac0:	00009045 	.word	0x00009045
     ac4:	43c80000 	.word	0x43c80000
     ac8:	45ebf000 	.word	0x45ebf000
     acc:	00009f19 	.word	0x00009f19
     ad0:	00009961 	.word	0x00009961
     ad4:	43480000 	.word	0x43480000
     ad8:	00009581 	.word	0x00009581
     adc:	00008c29 	.word	0x00008c29
     ae0:	000090ad 	.word	0x000090ad
     ae4:	00009fb9 	.word	0x00009fb9
     ae8:	00009ba1 	.word	0x00009ba1
     aec:	000003f1 	.word	0x000003f1
     af0:	00000971 	.word	0x00000971
     af4:	00000681 	.word	0x00000681
     af8:	00000555 	.word	0x00000555
     afc:	0000901d 	.word	0x0000901d
     b00:	fffff83f 	.word	0xfffff83f
     b04:	00000371 	.word	0x00000371
     b08:	000043ec 	.word	0x000043ec

00000b0c <_ZN15lmx2694_Handler9Self_TestEv>:
bool lmx2694_Handler::Self_Test(){
     b0c:	b570      	push	{r4, r5, r6, lr}
     b0e:	0004      	movs	r4, r0
	error_counter=0;
     b10:	2200      	movs	r2, #0
     b12:	2348      	movs	r3, #72	; 0x48
     b14:	54c2      	strb	r2, [r0, r3]
     b16:	e025      	b.n	b64 <_ZN15lmx2694_Handler9Self_TestEv+0x58>
				if ((current_frequency-step)<MIN_WOOBLING_FREQUENCY)
     b18:	6c61      	ldr	r1, [r4, #68]	; 0x44
     b1a:	6820      	ldr	r0, [r4, #0]
     b1c:	4b2c      	ldr	r3, [pc, #176]	; (bd0 <_ZN15lmx2694_Handler9Self_TestEv+0xc4>)
     b1e:	4798      	blx	r3
     b20:	492c      	ldr	r1, [pc, #176]	; (bd4 <_ZN15lmx2694_Handler9Self_TestEv+0xc8>)
     b22:	4b2d      	ldr	r3, [pc, #180]	; (bd8 <_ZN15lmx2694_Handler9Self_TestEv+0xcc>)
     b24:	4798      	blx	r3
     b26:	2800      	cmp	r0, #0
     b28:	d002      	beq.n	b30 <_ZN15lmx2694_Handler9Self_TestEv+0x24>
					direction=true;
     b2a:	2201      	movs	r2, #1
     b2c:	2349      	movs	r3, #73	; 0x49
     b2e:	54e2      	strb	r2, [r4, r3]
			target_frequency=direction?current_frequency+step:current_frequency-step;
     b30:	2349      	movs	r3, #73	; 0x49
     b32:	5ce3      	ldrb	r3, [r4, r3]
     b34:	2b00      	cmp	r3, #0
     b36:	d02f      	beq.n	b98 <_ZN15lmx2694_Handler9Self_TestEv+0x8c>
     b38:	6c61      	ldr	r1, [r4, #68]	; 0x44
     b3a:	6820      	ldr	r0, [r4, #0]
     b3c:	4b27      	ldr	r3, [pc, #156]	; (bdc <_ZN15lmx2694_Handler9Self_TestEv+0xd0>)
     b3e:	4798      	blx	r3
     b40:	6360      	str	r0, [r4, #52]	; 0x34
			printf("current Frequency : %f \n\r", target_frequency);
     b42:	4b27      	ldr	r3, [pc, #156]	; (be0 <_ZN15lmx2694_Handler9Self_TestEv+0xd4>)
     b44:	4798      	blx	r3
     b46:	0002      	movs	r2, r0
     b48:	000b      	movs	r3, r1
     b4a:	4826      	ldr	r0, [pc, #152]	; (be4 <_ZN15lmx2694_Handler9Self_TestEv+0xd8>)
     b4c:	4926      	ldr	r1, [pc, #152]	; (be8 <_ZN15lmx2694_Handler9Self_TestEv+0xdc>)
     b4e:	4788      	blx	r1
			Set_Target_Frequency(target_frequency);
     b50:	6b61      	ldr	r1, [r4, #52]	; 0x34
     b52:	0020      	movs	r0, r4
     b54:	4b25      	ldr	r3, [pc, #148]	; (bec <_ZN15lmx2694_Handler9Self_TestEv+0xe0>)
     b56:	4798      	blx	r3
			error_counter=0;
     b58:	2200      	movs	r2, #0
     b5a:	2348      	movs	r3, #72	; 0x48
     b5c:	54e2      	strb	r2, [r4, r3]
			delay_ms(10);
     b5e:	200a      	movs	r0, #10
     b60:	4b23      	ldr	r3, [pc, #140]	; (bf0 <_ZN15lmx2694_Handler9Self_TestEv+0xe4>)
     b62:	4798      	blx	r3
	while(error_counter<0xff){
     b64:	2348      	movs	r3, #72	; 0x48
     b66:	5ce3      	ldrb	r3, [r4, r3]
     b68:	2bfe      	cmp	r3, #254	; 0xfe
     b6a:	dc2f      	bgt.n	bcc <_ZN15lmx2694_Handler9Self_TestEv+0xc0>
		if (Is_Locked())
     b6c:	0020      	movs	r0, r4
     b6e:	4b21      	ldr	r3, [pc, #132]	; (bf4 <_ZN15lmx2694_Handler9Self_TestEv+0xe8>)
     b70:	4798      	blx	r3
     b72:	2800      	cmp	r0, #0
     b74:	d015      	beq.n	ba2 <_ZN15lmx2694_Handler9Self_TestEv+0x96>
			if (direction)
     b76:	2349      	movs	r3, #73	; 0x49
     b78:	5ce3      	ldrb	r3, [r4, r3]
     b7a:	2b00      	cmp	r3, #0
     b7c:	d0cc      	beq.n	b18 <_ZN15lmx2694_Handler9Self_TestEv+0xc>
					if ((current_frequency+step)>MAX_SENSOR_FREQUENCY)
     b7e:	6c61      	ldr	r1, [r4, #68]	; 0x44
     b80:	6820      	ldr	r0, [r4, #0]
     b82:	4b16      	ldr	r3, [pc, #88]	; (bdc <_ZN15lmx2694_Handler9Self_TestEv+0xd0>)
     b84:	4798      	blx	r3
     b86:	491c      	ldr	r1, [pc, #112]	; (bf8 <_ZN15lmx2694_Handler9Self_TestEv+0xec>)
     b88:	4b1c      	ldr	r3, [pc, #112]	; (bfc <_ZN15lmx2694_Handler9Self_TestEv+0xf0>)
     b8a:	4798      	blx	r3
     b8c:	2800      	cmp	r0, #0
     b8e:	d0cf      	beq.n	b30 <_ZN15lmx2694_Handler9Self_TestEv+0x24>
						direction=false;
     b90:	2200      	movs	r2, #0
     b92:	2349      	movs	r3, #73	; 0x49
     b94:	54e2      	strb	r2, [r4, r3]
     b96:	e7cb      	b.n	b30 <_ZN15lmx2694_Handler9Self_TestEv+0x24>
			target_frequency=direction?current_frequency+step:current_frequency-step;
     b98:	6c61      	ldr	r1, [r4, #68]	; 0x44
     b9a:	6820      	ldr	r0, [r4, #0]
     b9c:	4b0c      	ldr	r3, [pc, #48]	; (bd0 <_ZN15lmx2694_Handler9Self_TestEv+0xc4>)
     b9e:	4798      	blx	r3
     ba0:	e7ce      	b.n	b40 <_ZN15lmx2694_Handler9Self_TestEv+0x34>
			error_counter++;
     ba2:	2248      	movs	r2, #72	; 0x48
     ba4:	5ca3      	ldrb	r3, [r4, r2]
     ba6:	3301      	adds	r3, #1
     ba8:	b2db      	uxtb	r3, r3
     baa:	54a3      	strb	r3, [r4, r2]
			delay_ms(100+10*error_counter);
     bac:	b29b      	uxth	r3, r3
     bae:	009a      	lsls	r2, r3, #2
     bb0:	189b      	adds	r3, r3, r2
     bb2:	0058      	lsls	r0, r3, #1
     bb4:	b280      	uxth	r0, r0
     bb6:	3064      	adds	r0, #100	; 0x64
     bb8:	b280      	uxth	r0, r0
     bba:	4d0d      	ldr	r5, [pc, #52]	; (bf0 <_ZN15lmx2694_Handler9Self_TestEv+0xe4>)
     bbc:	47a8      	blx	r5
			Set_Target_Frequency(current_frequency);
     bbe:	6821      	ldr	r1, [r4, #0]
     bc0:	0020      	movs	r0, r4
     bc2:	4b0a      	ldr	r3, [pc, #40]	; (bec <_ZN15lmx2694_Handler9Self_TestEv+0xe0>)
     bc4:	4798      	blx	r3
			delay_ms(100);
     bc6:	2064      	movs	r0, #100	; 0x64
     bc8:	47a8      	blx	r5
     bca:	e7cb      	b.n	b64 <_ZN15lmx2694_Handler9Self_TestEv+0x58>
}
     bcc:	2000      	movs	r0, #0
     bce:	bd70      	pop	{r4, r5, r6, pc}
     bd0:	00009ba1 	.word	0x00009ba1
     bd4:	45610000 	.word	0x45610000
     bd8:	0000901d 	.word	0x0000901d
     bdc:	0000925d 	.word	0x0000925d
     be0:	0000b335 	.word	0x0000b335
     be4:	00010c94 	.word	0x00010c94
     be8:	0000b819 	.word	0x0000b819
     bec:	000009b5 	.word	0x000009b5
     bf0:	00001afd 	.word	0x00001afd
     bf4:	000007e9 	.word	0x000007e9
     bf8:	45898000 	.word	0x45898000
     bfc:	00009045 	.word	0x00009045

00000c00 <_GLOBAL__sub_I__ZN15lmx2694_HandlerC2Ev>:
     c00:	b510      	push	{r4, lr}
     c02:	4902      	ldr	r1, [pc, #8]	; (c0c <_GLOBAL__sub_I__ZN15lmx2694_HandlerC2Ev+0xc>)
     c04:	2001      	movs	r0, #1
     c06:	4b02      	ldr	r3, [pc, #8]	; (c10 <_GLOBAL__sub_I__ZN15lmx2694_HandlerC2Ev+0x10>)
     c08:	4798      	blx	r3
     c0a:	bd10      	pop	{r4, pc}
     c0c:	0000ffff 	.word	0x0000ffff
     c10:	000001dd 	.word	0x000001dd

00000c14 <_Z41__static_initialization_and_destruction_0ii>:
    {
		lmx.Self_Test();
		delay_ms(100);
		
    }
}
     c14:	b510      	push	{r4, lr}
     c16:	2801      	cmp	r0, #1
     c18:	d000      	beq.n	c1c <_Z41__static_initialization_and_destruction_0ii+0x8>
     c1a:	bd10      	pop	{r4, pc}
     c1c:	4b06      	ldr	r3, [pc, #24]	; (c38 <_Z41__static_initialization_and_destruction_0ii+0x24>)
     c1e:	4299      	cmp	r1, r3
     c20:	d1fb      	bne.n	c1a <_Z41__static_initialization_and_destruction_0ii+0x6>
static lmx2694_Handler lmx;
     c22:	4c06      	ldr	r4, [pc, #24]	; (c3c <_Z41__static_initialization_and_destruction_0ii+0x28>)
     c24:	0020      	movs	r0, r4
     c26:	4b06      	ldr	r3, [pc, #24]	; (c40 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
     c28:	4798      	blx	r3
     c2a:	4a06      	ldr	r2, [pc, #24]	; (c44 <_Z41__static_initialization_and_destruction_0ii+0x30>)
     c2c:	4906      	ldr	r1, [pc, #24]	; (c48 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     c2e:	0020      	movs	r0, r4
     c30:	4b06      	ldr	r3, [pc, #24]	; (c4c <_Z41__static_initialization_and_destruction_0ii+0x38>)
     c32:	4798      	blx	r3
}
     c34:	e7f1      	b.n	c1a <_Z41__static_initialization_and_destruction_0ii+0x6>
     c36:	46c0      	nop			; (mov r8, r8)
     c38:	0000ffff 	.word	0x0000ffff
     c3c:	20000c2c 	.word	0x20000c2c
     c40:	00000219 	.word	0x00000219
     c44:	20000000 	.word	0x20000000
     c48:	00000259 	.word	0x00000259
     c4c:	00008c19 	.word	0x00008c19

00000c50 <main>:
{
     c50:	b510      	push	{r4, lr}
	atmel_start_init();
     c52:	4b0f      	ldr	r3, [pc, #60]	; (c90 <main+0x40>)
     c54:	4798      	blx	r3
	while(!lmx.Init()){
     c56:	480f      	ldr	r0, [pc, #60]	; (c94 <main+0x44>)
     c58:	4b0f      	ldr	r3, [pc, #60]	; (c98 <main+0x48>)
     c5a:	4798      	blx	r3
     c5c:	2800      	cmp	r0, #0
     c5e:	d109      	bne.n	c74 <main+0x24>
	delay_ms(100);
     c60:	3064      	adds	r0, #100	; 0x64
     c62:	4b0e      	ldr	r3, [pc, #56]	; (c9c <main+0x4c>)
     c64:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
     c66:	2180      	movs	r1, #128	; 0x80
     c68:	05c9      	lsls	r1, r1, #23
     c6a:	239c      	movs	r3, #156	; 0x9c
     c6c:	22c0      	movs	r2, #192	; 0xc0
     c6e:	05d2      	lsls	r2, r2, #23
     c70:	50d1      	str	r1, [r2, r3]
     c72:	e7f0      	b.n	c56 <main+0x6>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     c74:	2180      	movs	r1, #128	; 0x80
     c76:	05c9      	lsls	r1, r1, #23
     c78:	2398      	movs	r3, #152	; 0x98
     c7a:	22c0      	movs	r2, #192	; 0xc0
     c7c:	05d2      	lsls	r2, r2, #23
     c7e:	50d1      	str	r1, [r2, r3]
		lmx.Self_Test();
     c80:	4804      	ldr	r0, [pc, #16]	; (c94 <main+0x44>)
     c82:	4b07      	ldr	r3, [pc, #28]	; (ca0 <main+0x50>)
     c84:	4798      	blx	r3
		delay_ms(100);
     c86:	2064      	movs	r0, #100	; 0x64
     c88:	4b04      	ldr	r3, [pc, #16]	; (c9c <main+0x4c>)
     c8a:	4798      	blx	r3
     c8c:	e7f8      	b.n	c80 <main+0x30>
     c8e:	46c0      	nop			; (mov r8, r8)
     c90:	00000d51 	.word	0x00000d51
     c94:	20000c2c 	.word	0x20000c2c
     c98:	000008c1 	.word	0x000008c1
     c9c:	00001afd 	.word	0x00001afd
     ca0:	00000b0d 	.word	0x00000b0d

00000ca4 <_GLOBAL__sub_I_main>:
}
     ca4:	b510      	push	{r4, lr}
     ca6:	4902      	ldr	r1, [pc, #8]	; (cb0 <_GLOBAL__sub_I_main+0xc>)
     ca8:	2001      	movs	r0, #1
     caa:	4b02      	ldr	r3, [pc, #8]	; (cb4 <_GLOBAL__sub_I_main+0x10>)
     cac:	4798      	blx	r3
     cae:	bd10      	pop	{r4, pc}
     cb0:	0000ffff 	.word	0x0000ffff
     cb4:	00000c15 	.word	0x00000c15

00000cb8 <_ZN13SPI_Syn_ClassC1Ev>:


// default constructor
SPI_Syn_Class::SPI_Syn_Class()
{
		ptrSPISync=this;
     cb8:	4b01      	ldr	r3, [pc, #4]	; (cc0 <_ZN13SPI_Syn_ClassC1Ev+0x8>)
     cba:	6018      	str	r0, [r3, #0]
//	SPI=SPI_1;
} //SPI_Syn_Class
     cbc:	4770      	bx	lr
     cbe:	46c0      	nop			; (mov r8, r8)
     cc0:	20000c80 	.word	0x20000c80

00000cc4 <_ZN13SPI_Syn_ClassD1Ev>:


// default destructor
SPI_Syn_Class::~SPI_Syn_Class()
{
} //~SPI_Syn_Class
     cc4:	4770      	bx	lr
	...

00000cc8 <_ZN13SPI_Syn_Class6EnableEv>:
	
}



uint8_t SPI_Syn_Class::Enable(){
     cc8:	b510      	push	{r4, lr}
	
	spi_m_sync_enable(&SPI_LMX);
     cca:	4802      	ldr	r0, [pc, #8]	; (cd4 <_ZN13SPI_Syn_Class6EnableEv+0xc>)
     ccc:	4b02      	ldr	r3, [pc, #8]	; (cd8 <_ZN13SPI_Syn_Class6EnableEv+0x10>)
     cce:	4798      	blx	r3
	return 0;
}
     cd0:	2000      	movs	r0, #0
     cd2:	bd10      	pop	{r4, pc}
     cd4:	200012f0 	.word	0x200012f0
     cd8:	00001c65 	.word	0x00001c65

00000cdc <_ZN13SPI_Syn_Class4InitEv>:
void SPI_Syn_Class::Init(){
     cdc:	b510      	push	{r4, lr}
     cde:	0004      	movs	r4, r0
		spi_m_sync_get_io_descriptor(&SPI_LMX, &io);
     ce0:	0001      	movs	r1, r0
     ce2:	310c      	adds	r1, #12
     ce4:	4804      	ldr	r0, [pc, #16]	; (cf8 <_ZN13SPI_Syn_Class4InitEv+0x1c>)
     ce6:	4b05      	ldr	r3, [pc, #20]	; (cfc <_ZN13SPI_Syn_Class4InitEv+0x20>)
     ce8:	4798      	blx	r3
	Enable();
     cea:	0020      	movs	r0, r4
     cec:	4b04      	ldr	r3, [pc, #16]	; (d00 <_ZN13SPI_Syn_Class4InitEv+0x24>)
     cee:	4798      	blx	r3
	ready=true;
     cf0:	2301      	movs	r3, #1
     cf2:	7023      	strb	r3, [r4, #0]
}
     cf4:	bd10      	pop	{r4, pc}
     cf6:	46c0      	nop			; (mov r8, r8)
     cf8:	200012f0 	.word	0x200012f0
     cfc:	00001dd9 	.word	0x00001dd9
     d00:	00000cc9 	.word	0x00000cc9

00000d04 <_ZN13SPI_Syn_Class5WriteEPKhh>:

uint8_t  SPI_Syn_Class::Write(const uint8_t * p, uint8_t n){
     d04:	b510      	push	{r4, lr}
     d06:	0014      	movs	r4, r2
	ready=false;
     d08:	2300      	movs	r3, #0
     d0a:	7003      	strb	r3, [r0, #0]
	io_write(io, p, (uint16_t)n);
     d0c:	68c0      	ldr	r0, [r0, #12]
     d0e:	b292      	uxth	r2, r2
     d10:	4b01      	ldr	r3, [pc, #4]	; (d18 <_ZN13SPI_Syn_Class5WriteEPKhh+0x14>)
     d12:	4798      	blx	r3

	return n;
}
     d14:	0020      	movs	r0, r4
     d16:	bd10      	pop	{r4, pc}
     d18:	00001b35 	.word	0x00001b35

00000d1c <_ZN13SPI_Syn_Class4ReadEPhh>:
uint8_t  SPI_Syn_Class::Read(uint8_t * p, uint8_t n){
     d1c:	b510      	push	{r4, lr}
     d1e:	0014      	movs	r4, r2
	ready=false;
     d20:	2300      	movs	r3, #0
     d22:	7003      	strb	r3, [r0, #0]
		io_read(io, p, (uint16_t)n);
     d24:	68c0      	ldr	r0, [r0, #12]
     d26:	b292      	uxth	r2, r2
     d28:	4b01      	ldr	r3, [pc, #4]	; (d30 <_ZN13SPI_Syn_Class4ReadEPhh+0x14>)
     d2a:	4798      	blx	r3

	
	return n;
}
     d2c:	0020      	movs	r0, r4
     d2e:	bd10      	pop	{r4, pc}
     d30:	00001b89 	.word	0x00001b89

00000d34 <_ZN13SPI_Syn_Class5SetCSEb>:
	if (level) {
     d34:	2900      	cmp	r1, #0
     d36:	d105      	bne.n	d44 <_ZN13SPI_Syn_Class5SetCSEb+0x10>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d38:	2280      	movs	r2, #128	; 0x80
     d3a:	0312      	lsls	r2, r2, #12
     d3c:	23c0      	movs	r3, #192	; 0xc0
     d3e:	05db      	lsls	r3, r3, #23
     d40:	615a      	str	r2, [r3, #20]
	spi_m_sync_disable(&SPI_LMX);
	
}
void SPI_Syn_Class::SetCS(bool st){
	gpio_set_pin_level(CS_LMX,st);
}
     d42:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     d44:	2280      	movs	r2, #128	; 0x80
     d46:	0312      	lsls	r2, r2, #12
     d48:	23c0      	movs	r3, #192	; 0xc0
     d4a:	05db      	lsls	r3, r3, #23
     d4c:	619a      	str	r2, [r3, #24]
     d4e:	e7f8      	b.n	d42 <_ZN13SPI_Syn_Class5SetCSEb+0xe>

00000d50 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     d50:	b580      	push	{r7, lr}
     d52:	af00      	add	r7, sp, #0
	system_init();
     d54:	4b04      	ldr	r3, [pc, #16]	; (d68 <atmel_start_init+0x18>)
     d56:	4798      	blx	r3
	usb_init();
     d58:	4b04      	ldr	r3, [pc, #16]	; (d6c <atmel_start_init+0x1c>)
     d5a:	4798      	blx	r3
	stdio_redirect_init();
     d5c:	4b04      	ldr	r3, [pc, #16]	; (d70 <atmel_start_init+0x20>)
     d5e:	4798      	blx	r3
}
     d60:	46c0      	nop			; (mov r8, r8)
     d62:	46bd      	mov	sp, r7
     d64:	bd80      	pop	{r7, pc}
     d66:	46c0      	nop			; (mov r8, r8)
     d68:	000019d9 	.word	0x000019d9
     d6c:	000073a5 	.word	0x000073a5
     d70:	00007341 	.word	0x00007341

00000d74 <hri_gclk_write_CLKCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
     d74:	b580      	push	{r7, lr}
     d76:	b082      	sub	sp, #8
     d78:	af00      	add	r7, sp, #0
     d7a:	6078      	str	r0, [r7, #4]
     d7c:	000a      	movs	r2, r1
     d7e:	1cbb      	adds	r3, r7, #2
     d80:	801a      	strh	r2, [r3, #0]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     d82:	687b      	ldr	r3, [r7, #4]
     d84:	1cba      	adds	r2, r7, #2
     d86:	8812      	ldrh	r2, [r2, #0]
     d88:	805a      	strh	r2, [r3, #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     d8a:	46c0      	nop			; (mov r8, r8)
     d8c:	46bd      	mov	sp, r7
     d8e:	b002      	add	sp, #8
     d90:	bd80      	pop	{r7, pc}

00000d92 <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     d92:	b580      	push	{r7, lr}
     d94:	b084      	sub	sp, #16
     d96:	af00      	add	r7, sp, #0
     d98:	60f8      	str	r0, [r7, #12]
     d9a:	607a      	str	r2, [r7, #4]
     d9c:	230b      	movs	r3, #11
     d9e:	18fb      	adds	r3, r7, r3
     da0:	1c0a      	adds	r2, r1, #0
     da2:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     da4:	230b      	movs	r3, #11
     da6:	18fb      	adds	r3, r7, r3
     da8:	781b      	ldrb	r3, [r3, #0]
     daa:	68fa      	ldr	r2, [r7, #12]
     dac:	01db      	lsls	r3, r3, #7
     dae:	18d3      	adds	r3, r2, r3
     db0:	3308      	adds	r3, #8
     db2:	687a      	ldr	r2, [r7, #4]
     db4:	601a      	str	r2, [r3, #0]
}
     db6:	46c0      	nop			; (mov r8, r8)
     db8:	46bd      	mov	sp, r7
     dba:	b004      	add	sp, #16
     dbc:	bd80      	pop	{r7, pc}

00000dbe <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     dbe:	b580      	push	{r7, lr}
     dc0:	b084      	sub	sp, #16
     dc2:	af00      	add	r7, sp, #0
     dc4:	60f8      	str	r0, [r7, #12]
     dc6:	607a      	str	r2, [r7, #4]
     dc8:	230b      	movs	r3, #11
     dca:	18fb      	adds	r3, r7, r3
     dcc:	1c0a      	adds	r2, r1, #0
     dce:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     dd0:	230b      	movs	r3, #11
     dd2:	18fb      	adds	r3, r7, r3
     dd4:	781b      	ldrb	r3, [r3, #0]
     dd6:	68fa      	ldr	r2, [r7, #12]
     dd8:	01db      	lsls	r3, r3, #7
     dda:	18d3      	adds	r3, r2, r3
     ddc:	3304      	adds	r3, #4
     dde:	687a      	ldr	r2, [r7, #4]
     de0:	601a      	str	r2, [r3, #0]
}
     de2:	46c0      	nop			; (mov r8, r8)
     de4:	46bd      	mov	sp, r7
     de6:	b004      	add	sp, #16
     de8:	bd80      	pop	{r7, pc}

00000dea <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     dea:	b580      	push	{r7, lr}
     dec:	b084      	sub	sp, #16
     dee:	af00      	add	r7, sp, #0
     df0:	60f8      	str	r0, [r7, #12]
     df2:	607a      	str	r2, [r7, #4]
     df4:	230b      	movs	r3, #11
     df6:	18fb      	adds	r3, r7, r3
     df8:	1c0a      	adds	r2, r1, #0
     dfa:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     dfc:	230b      	movs	r3, #11
     dfe:	18fb      	adds	r3, r7, r3
     e00:	781b      	ldrb	r3, [r3, #0]
     e02:	68fa      	ldr	r2, [r7, #12]
     e04:	01db      	lsls	r3, r3, #7
     e06:	18d3      	adds	r3, r2, r3
     e08:	3318      	adds	r3, #24
     e0a:	687a      	ldr	r2, [r7, #4]
     e0c:	601a      	str	r2, [r3, #0]
}
     e0e:	46c0      	nop			; (mov r8, r8)
     e10:	46bd      	mov	sp, r7
     e12:	b004      	add	sp, #16
     e14:	bd80      	pop	{r7, pc}

00000e16 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     e16:	b580      	push	{r7, lr}
     e18:	b084      	sub	sp, #16
     e1a:	af00      	add	r7, sp, #0
     e1c:	60f8      	str	r0, [r7, #12]
     e1e:	607a      	str	r2, [r7, #4]
     e20:	230b      	movs	r3, #11
     e22:	18fb      	adds	r3, r7, r3
     e24:	1c0a      	adds	r2, r1, #0
     e26:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e28:	230b      	movs	r3, #11
     e2a:	18fb      	adds	r3, r7, r3
     e2c:	781b      	ldrb	r3, [r3, #0]
     e2e:	68fa      	ldr	r2, [r7, #12]
     e30:	01db      	lsls	r3, r3, #7
     e32:	18d3      	adds	r3, r2, r3
     e34:	3314      	adds	r3, #20
     e36:	687a      	ldr	r2, [r7, #4]
     e38:	601a      	str	r2, [r3, #0]
}
     e3a:	46c0      	nop			; (mov r8, r8)
     e3c:	46bd      	mov	sp, r7
     e3e:	b004      	add	sp, #16
     e40:	bd80      	pop	{r7, pc}

00000e42 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     e42:	b590      	push	{r4, r7, lr}
     e44:	b085      	sub	sp, #20
     e46:	af00      	add	r7, sp, #0
     e48:	6078      	str	r0, [r7, #4]
     e4a:	000c      	movs	r4, r1
     e4c:	0010      	movs	r0, r2
     e4e:	0019      	movs	r1, r3
     e50:	1cfb      	adds	r3, r7, #3
     e52:	1c22      	adds	r2, r4, #0
     e54:	701a      	strb	r2, [r3, #0]
     e56:	1cbb      	adds	r3, r7, #2
     e58:	1c02      	adds	r2, r0, #0
     e5a:	701a      	strb	r2, [r3, #0]
     e5c:	1c7b      	adds	r3, r7, #1
     e5e:	1c0a      	adds	r2, r1, #0
     e60:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     e62:	1cfb      	adds	r3, r7, #3
     e64:	7819      	ldrb	r1, [r3, #0]
     e66:	1cbb      	adds	r3, r7, #2
     e68:	781a      	ldrb	r2, [r3, #0]
     e6a:	230f      	movs	r3, #15
     e6c:	18fb      	adds	r3, r7, r3
     e6e:	6878      	ldr	r0, [r7, #4]
     e70:	2430      	movs	r4, #48	; 0x30
     e72:	01c9      	lsls	r1, r1, #7
     e74:	1841      	adds	r1, r0, r1
     e76:	188a      	adds	r2, r1, r2
     e78:	1912      	adds	r2, r2, r4
     e7a:	7812      	ldrb	r2, [r2, #0]
     e7c:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     e7e:	230f      	movs	r3, #15
     e80:	18fb      	adds	r3, r7, r3
     e82:	220f      	movs	r2, #15
     e84:	18ba      	adds	r2, r7, r2
     e86:	7812      	ldrb	r2, [r2, #0]
     e88:	210f      	movs	r1, #15
     e8a:	438a      	bics	r2, r1
     e8c:	701a      	strb	r2, [r3, #0]
	tmp |= PORT_PMUX_PMUXE(data);
     e8e:	1c7b      	adds	r3, r7, #1
     e90:	781b      	ldrb	r3, [r3, #0]
     e92:	220f      	movs	r2, #15
     e94:	4013      	ands	r3, r2
     e96:	b2d9      	uxtb	r1, r3
     e98:	230f      	movs	r3, #15
     e9a:	18fb      	adds	r3, r7, r3
     e9c:	220f      	movs	r2, #15
     e9e:	18ba      	adds	r2, r7, r2
     ea0:	7812      	ldrb	r2, [r2, #0]
     ea2:	430a      	orrs	r2, r1
     ea4:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ea6:	1cfb      	adds	r3, r7, #3
     ea8:	781a      	ldrb	r2, [r3, #0]
     eaa:	1cbb      	adds	r3, r7, #2
     eac:	781b      	ldrb	r3, [r3, #0]
     eae:	6879      	ldr	r1, [r7, #4]
     eb0:	2030      	movs	r0, #48	; 0x30
     eb2:	01d2      	lsls	r2, r2, #7
     eb4:	188a      	adds	r2, r1, r2
     eb6:	18d3      	adds	r3, r2, r3
     eb8:	181b      	adds	r3, r3, r0
     eba:	220f      	movs	r2, #15
     ebc:	18ba      	adds	r2, r7, r2
     ebe:	7812      	ldrb	r2, [r2, #0]
     ec0:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     ec2:	46c0      	nop			; (mov r8, r8)
     ec4:	46bd      	mov	sp, r7
     ec6:	b005      	add	sp, #20
     ec8:	bd90      	pop	{r4, r7, pc}

00000eca <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     eca:	b590      	push	{r4, r7, lr}
     ecc:	b085      	sub	sp, #20
     ece:	af00      	add	r7, sp, #0
     ed0:	6078      	str	r0, [r7, #4]
     ed2:	000c      	movs	r4, r1
     ed4:	0010      	movs	r0, r2
     ed6:	0019      	movs	r1, r3
     ed8:	1cfb      	adds	r3, r7, #3
     eda:	1c22      	adds	r2, r4, #0
     edc:	701a      	strb	r2, [r3, #0]
     ede:	1cbb      	adds	r3, r7, #2
     ee0:	1c02      	adds	r2, r0, #0
     ee2:	701a      	strb	r2, [r3, #0]
     ee4:	1c7b      	adds	r3, r7, #1
     ee6:	1c0a      	adds	r2, r1, #0
     ee8:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     eea:	1cfb      	adds	r3, r7, #3
     eec:	7819      	ldrb	r1, [r3, #0]
     eee:	1cbb      	adds	r3, r7, #2
     ef0:	781a      	ldrb	r2, [r3, #0]
     ef2:	230f      	movs	r3, #15
     ef4:	18fb      	adds	r3, r7, r3
     ef6:	6878      	ldr	r0, [r7, #4]
     ef8:	2430      	movs	r4, #48	; 0x30
     efa:	01c9      	lsls	r1, r1, #7
     efc:	1841      	adds	r1, r0, r1
     efe:	188a      	adds	r2, r1, r2
     f00:	1912      	adds	r2, r2, r4
     f02:	7812      	ldrb	r2, [r2, #0]
     f04:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     f06:	230f      	movs	r3, #15
     f08:	18fb      	adds	r3, r7, r3
     f0a:	220f      	movs	r2, #15
     f0c:	18ba      	adds	r2, r7, r2
     f0e:	7812      	ldrb	r2, [r2, #0]
     f10:	210f      	movs	r1, #15
     f12:	400a      	ands	r2, r1
     f14:	701a      	strb	r2, [r3, #0]
	tmp |= PORT_PMUX_PMUXO(data);
     f16:	1c7b      	adds	r3, r7, #1
     f18:	781b      	ldrb	r3, [r3, #0]
     f1a:	011b      	lsls	r3, r3, #4
     f1c:	b2d9      	uxtb	r1, r3
     f1e:	230f      	movs	r3, #15
     f20:	18fb      	adds	r3, r7, r3
     f22:	220f      	movs	r2, #15
     f24:	18ba      	adds	r2, r7, r2
     f26:	7812      	ldrb	r2, [r2, #0]
     f28:	430a      	orrs	r2, r1
     f2a:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     f2c:	1cfb      	adds	r3, r7, #3
     f2e:	781a      	ldrb	r2, [r3, #0]
     f30:	1cbb      	adds	r3, r7, #2
     f32:	781b      	ldrb	r3, [r3, #0]
     f34:	6879      	ldr	r1, [r7, #4]
     f36:	2030      	movs	r0, #48	; 0x30
     f38:	01d2      	lsls	r2, r2, #7
     f3a:	188a      	adds	r2, r1, r2
     f3c:	18d3      	adds	r3, r2, r3
     f3e:	181b      	adds	r3, r3, r0
     f40:	220f      	movs	r2, #15
     f42:	18ba      	adds	r2, r7, r2
     f44:	7812      	ldrb	r2, [r2, #0]
     f46:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     f48:	46c0      	nop			; (mov r8, r8)
     f4a:	46bd      	mov	sp, r7
     f4c:	b005      	add	sp, #20
     f4e:	bd90      	pop	{r4, r7, pc}

00000f50 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
     f50:	b590      	push	{r4, r7, lr}
     f52:	b085      	sub	sp, #20
     f54:	af00      	add	r7, sp, #0
     f56:	6078      	str	r0, [r7, #4]
     f58:	000c      	movs	r4, r1
     f5a:	0010      	movs	r0, r2
     f5c:	0019      	movs	r1, r3
     f5e:	1cfb      	adds	r3, r7, #3
     f60:	1c22      	adds	r2, r4, #0
     f62:	701a      	strb	r2, [r3, #0]
     f64:	1cbb      	adds	r3, r7, #2
     f66:	1c02      	adds	r2, r0, #0
     f68:	701a      	strb	r2, [r3, #0]
     f6a:	1c7b      	adds	r3, r7, #1
     f6c:	1c0a      	adds	r2, r1, #0
     f6e:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f70:	1cfb      	adds	r3, r7, #3
     f72:	7819      	ldrb	r1, [r3, #0]
     f74:	1cbb      	adds	r3, r7, #2
     f76:	781a      	ldrb	r2, [r3, #0]
     f78:	230f      	movs	r3, #15
     f7a:	18fb      	adds	r3, r7, r3
     f7c:	6878      	ldr	r0, [r7, #4]
     f7e:	2440      	movs	r4, #64	; 0x40
     f80:	01c9      	lsls	r1, r1, #7
     f82:	1841      	adds	r1, r0, r1
     f84:	188a      	adds	r2, r1, r2
     f86:	1912      	adds	r2, r2, r4
     f88:	7812      	ldrb	r2, [r2, #0]
     f8a:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     f8c:	230f      	movs	r3, #15
     f8e:	18fb      	adds	r3, r7, r3
     f90:	220f      	movs	r2, #15
     f92:	18ba      	adds	r2, r7, r2
     f94:	7812      	ldrb	r2, [r2, #0]
     f96:	2101      	movs	r1, #1
     f98:	438a      	bics	r2, r1
     f9a:	701a      	strb	r2, [r3, #0]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     f9c:	1c7b      	adds	r3, r7, #1
     f9e:	7819      	ldrb	r1, [r3, #0]
     fa0:	230f      	movs	r3, #15
     fa2:	18fb      	adds	r3, r7, r3
     fa4:	220f      	movs	r2, #15
     fa6:	18ba      	adds	r2, r7, r2
     fa8:	7812      	ldrb	r2, [r2, #0]
     faa:	430a      	orrs	r2, r1
     fac:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     fae:	1cfb      	adds	r3, r7, #3
     fb0:	781a      	ldrb	r2, [r3, #0]
     fb2:	1cbb      	adds	r3, r7, #2
     fb4:	781b      	ldrb	r3, [r3, #0]
     fb6:	6879      	ldr	r1, [r7, #4]
     fb8:	2040      	movs	r0, #64	; 0x40
     fba:	01d2      	lsls	r2, r2, #7
     fbc:	188a      	adds	r2, r1, r2
     fbe:	18d3      	adds	r3, r2, r3
     fc0:	181b      	adds	r3, r3, r0
     fc2:	220f      	movs	r2, #15
     fc4:	18ba      	adds	r2, r7, r2
     fc6:	7812      	ldrb	r2, [r2, #0]
     fc8:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     fca:	46c0      	nop			; (mov r8, r8)
     fcc:	46bd      	mov	sp, r7
     fce:	b005      	add	sp, #20
     fd0:	bd90      	pop	{r4, r7, pc}

00000fd2 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     fd2:	b5b0      	push	{r4, r5, r7, lr}
     fd4:	b082      	sub	sp, #8
     fd6:	af00      	add	r7, sp, #0
     fd8:	6078      	str	r0, [r7, #4]
     fda:	0008      	movs	r0, r1
     fdc:	0011      	movs	r1, r2
     fde:	1cfb      	adds	r3, r7, #3
     fe0:	1c02      	adds	r2, r0, #0
     fe2:	701a      	strb	r2, [r3, #0]
     fe4:	1cbb      	adds	r3, r7, #2
     fe6:	1c0a      	adds	r2, r1, #0
     fe8:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     fea:	1cfb      	adds	r3, r7, #3
     fec:	781a      	ldrb	r2, [r3, #0]
     fee:	1cbb      	adds	r3, r7, #2
     ff0:	781b      	ldrb	r3, [r3, #0]
     ff2:	1cf9      	adds	r1, r7, #3
     ff4:	7808      	ldrb	r0, [r1, #0]
     ff6:	1cb9      	adds	r1, r7, #2
     ff8:	7809      	ldrb	r1, [r1, #0]
     ffa:	687c      	ldr	r4, [r7, #4]
     ffc:	2540      	movs	r5, #64	; 0x40
     ffe:	01c0      	lsls	r0, r0, #7
    1000:	1820      	adds	r0, r4, r0
    1002:	1841      	adds	r1, r0, r1
    1004:	1949      	adds	r1, r1, r5
    1006:	7809      	ldrb	r1, [r1, #0]
    1008:	b2c9      	uxtb	r1, r1
    100a:	2004      	movs	r0, #4
    100c:	4301      	orrs	r1, r0
    100e:	b2cc      	uxtb	r4, r1
    1010:	6879      	ldr	r1, [r7, #4]
    1012:	2040      	movs	r0, #64	; 0x40
    1014:	01d2      	lsls	r2, r2, #7
    1016:	188a      	adds	r2, r1, r2
    1018:	18d3      	adds	r3, r2, r3
    101a:	181b      	adds	r3, r3, r0
    101c:	1c22      	adds	r2, r4, #0
    101e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1020:	46c0      	nop			; (mov r8, r8)
    1022:	46bd      	mov	sp, r7
    1024:	b002      	add	sp, #8
    1026:	bdb0      	pop	{r4, r5, r7, pc}

00001028 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    1028:	b5b0      	push	{r4, r5, r7, lr}
    102a:	b082      	sub	sp, #8
    102c:	af00      	add	r7, sp, #0
    102e:	6078      	str	r0, [r7, #4]
    1030:	0008      	movs	r0, r1
    1032:	0011      	movs	r1, r2
    1034:	1cfb      	adds	r3, r7, #3
    1036:	1c02      	adds	r2, r0, #0
    1038:	701a      	strb	r2, [r3, #0]
    103a:	1cbb      	adds	r3, r7, #2
    103c:	1c0a      	adds	r2, r1, #0
    103e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1040:	1cfb      	adds	r3, r7, #3
    1042:	781a      	ldrb	r2, [r3, #0]
    1044:	1cbb      	adds	r3, r7, #2
    1046:	781b      	ldrb	r3, [r3, #0]
    1048:	1cf9      	adds	r1, r7, #3
    104a:	7808      	ldrb	r0, [r1, #0]
    104c:	1cb9      	adds	r1, r7, #2
    104e:	7809      	ldrb	r1, [r1, #0]
    1050:	687c      	ldr	r4, [r7, #4]
    1052:	2540      	movs	r5, #64	; 0x40
    1054:	01c0      	lsls	r0, r0, #7
    1056:	1820      	adds	r0, r4, r0
    1058:	1841      	adds	r1, r0, r1
    105a:	1949      	adds	r1, r1, r5
    105c:	7809      	ldrb	r1, [r1, #0]
    105e:	b2c9      	uxtb	r1, r1
    1060:	2004      	movs	r0, #4
    1062:	4381      	bics	r1, r0
    1064:	b2cc      	uxtb	r4, r1
    1066:	6879      	ldr	r1, [r7, #4]
    1068:	2040      	movs	r0, #64	; 0x40
    106a:	01d2      	lsls	r2, r2, #7
    106c:	188a      	adds	r2, r1, r2
    106e:	18d3      	adds	r3, r2, r3
    1070:	181b      	adds	r3, r3, r0
    1072:	1c22      	adds	r2, r4, #0
    1074:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1076:	46c0      	nop			; (mov r8, r8)
    1078:	46bd      	mov	sp, r7
    107a:	b002      	add	sp, #8
    107c:	bdb0      	pop	{r4, r5, r7, pc}

0000107e <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
    107e:	b580      	push	{r7, lr}
    1080:	b084      	sub	sp, #16
    1082:	af00      	add	r7, sp, #0
    1084:	60f8      	str	r0, [r7, #12]
    1086:	607a      	str	r2, [r7, #4]
    1088:	230b      	movs	r3, #11
    108a:	18fb      	adds	r3, r7, r3
    108c:	1c0a      	adds	r2, r1, #0
    108e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1090:	230b      	movs	r3, #11
    1092:	18fb      	adds	r3, r7, r3
    1094:	781b      	ldrb	r3, [r3, #0]
    1096:	68fa      	ldr	r2, [r7, #12]
    1098:	01db      	lsls	r3, r3, #7
    109a:	18d3      	adds	r3, r2, r3
    109c:	3328      	adds	r3, #40	; 0x28
    109e:	687a      	ldr	r2, [r7, #4]
    10a0:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    10a2:	46c0      	nop			; (mov r8, r8)
    10a4:	46bd      	mov	sp, r7
    10a6:	b004      	add	sp, #16
    10a8:	bd80      	pop	{r7, pc}
	...

000010ac <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
    10ac:	b580      	push	{r7, lr}
    10ae:	b082      	sub	sp, #8
    10b0:	af00      	add	r7, sp, #0
    10b2:	6039      	str	r1, [r7, #0]
    10b4:	0011      	movs	r1, r2
    10b6:	1dfb      	adds	r3, r7, #7
    10b8:	1c02      	adds	r2, r0, #0
    10ba:	701a      	strb	r2, [r3, #0]
    10bc:	1dbb      	adds	r3, r7, #6
    10be:	1c0a      	adds	r2, r1, #0
    10c0:	701a      	strb	r2, [r3, #0]
	switch (direction) {
    10c2:	1dbb      	adds	r3, r7, #6
    10c4:	781b      	ldrb	r3, [r3, #0]
    10c6:	2b01      	cmp	r3, #1
    10c8:	d023      	beq.n	1112 <_gpio_set_direction+0x66>
    10ca:	2b02      	cmp	r3, #2
    10cc:	d03f      	beq.n	114e <_gpio_set_direction+0xa2>
    10ce:	2b00      	cmp	r3, #0
    10d0:	d15d      	bne.n	118e <_gpio_set_direction+0xe2>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, mask);
    10d2:	683a      	ldr	r2, [r7, #0]
    10d4:	1dfb      	adds	r3, r7, #7
    10d6:	7819      	ldrb	r1, [r3, #0]
    10d8:	23c0      	movs	r3, #192	; 0xc0
    10da:	05db      	lsls	r3, r3, #23
    10dc:	0018      	movs	r0, r3
    10de:	4b31      	ldr	r3, [pc, #196]	; (11a4 <_gpio_set_direction+0xf8>)
    10e0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    10e2:	683b      	ldr	r3, [r7, #0]
    10e4:	041b      	lsls	r3, r3, #16
    10e6:	0c1b      	lsrs	r3, r3, #16
    10e8:	2280      	movs	r2, #128	; 0x80
    10ea:	05d2      	lsls	r2, r2, #23
    10ec:	431a      	orrs	r2, r3
    10ee:	1dfb      	adds	r3, r7, #7
    10f0:	781b      	ldrb	r3, [r3, #0]
    10f2:	482d      	ldr	r0, [pc, #180]	; (11a8 <_gpio_set_direction+0xfc>)
    10f4:	0019      	movs	r1, r3
    10f6:	4b2d      	ldr	r3, [pc, #180]	; (11ac <_gpio_set_direction+0x100>)
    10f8:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    10fa:	683b      	ldr	r3, [r7, #0]
    10fc:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    10fe:	22c0      	movs	r2, #192	; 0xc0
    1100:	0612      	lsls	r2, r2, #24
    1102:	431a      	orrs	r2, r3
    1104:	1dfb      	adds	r3, r7, #7
    1106:	781b      	ldrb	r3, [r3, #0]
    1108:	4827      	ldr	r0, [pc, #156]	; (11a8 <_gpio_set_direction+0xfc>)
    110a:	0019      	movs	r1, r3
    110c:	4b27      	ldr	r3, [pc, #156]	; (11ac <_gpio_set_direction+0x100>)
    110e:	4798      	blx	r3
		break;
    1110:	e043      	b.n	119a <_gpio_set_direction+0xee>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, mask);
    1112:	683a      	ldr	r2, [r7, #0]
    1114:	1dfb      	adds	r3, r7, #7
    1116:	7819      	ldrb	r1, [r3, #0]
    1118:	23c0      	movs	r3, #192	; 0xc0
    111a:	05db      	lsls	r3, r3, #23
    111c:	0018      	movs	r0, r3
    111e:	4b21      	ldr	r3, [pc, #132]	; (11a4 <_gpio_set_direction+0xf8>)
    1120:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    1122:	683b      	ldr	r3, [r7, #0]
    1124:	041b      	lsls	r3, r3, #16
    1126:	0c1b      	lsrs	r3, r3, #16
    1128:	4a21      	ldr	r2, [pc, #132]	; (11b0 <_gpio_set_direction+0x104>)
    112a:	431a      	orrs	r2, r3
    112c:	1dfb      	adds	r3, r7, #7
    112e:	781b      	ldrb	r3, [r3, #0]
    1130:	481d      	ldr	r0, [pc, #116]	; (11a8 <_gpio_set_direction+0xfc>)
    1132:	0019      	movs	r1, r3
    1134:	4b1d      	ldr	r3, [pc, #116]	; (11ac <_gpio_set_direction+0x100>)
    1136:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
    1138:	683b      	ldr	r3, [r7, #0]
    113a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    113c:	4a1d      	ldr	r2, [pc, #116]	; (11b4 <_gpio_set_direction+0x108>)
    113e:	431a      	orrs	r2, r3
    1140:	1dfb      	adds	r3, r7, #7
    1142:	781b      	ldrb	r3, [r3, #0]
    1144:	4818      	ldr	r0, [pc, #96]	; (11a8 <_gpio_set_direction+0xfc>)
    1146:	0019      	movs	r1, r3
    1148:	4b18      	ldr	r3, [pc, #96]	; (11ac <_gpio_set_direction+0x100>)
    114a:	4798      	blx	r3
		break;
    114c:	e025      	b.n	119a <_gpio_set_direction+0xee>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT_IOBUS, port, mask);
    114e:	683a      	ldr	r2, [r7, #0]
    1150:	1dfb      	adds	r3, r7, #7
    1152:	7819      	ldrb	r1, [r3, #0]
    1154:	23c0      	movs	r3, #192	; 0xc0
    1156:	05db      	lsls	r3, r3, #23
    1158:	0018      	movs	r0, r3
    115a:	4b17      	ldr	r3, [pc, #92]	; (11b8 <_gpio_set_direction+0x10c>)
    115c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    115e:	683b      	ldr	r3, [r7, #0]
    1160:	041b      	lsls	r3, r3, #16
    1162:	0c1b      	lsrs	r3, r3, #16
    1164:	2280      	movs	r2, #128	; 0x80
    1166:	05d2      	lsls	r2, r2, #23
    1168:	431a      	orrs	r2, r3
    116a:	1dfb      	adds	r3, r7, #7
    116c:	781b      	ldrb	r3, [r3, #0]
    116e:	480e      	ldr	r0, [pc, #56]	; (11a8 <_gpio_set_direction+0xfc>)
    1170:	0019      	movs	r1, r3
    1172:	4b0e      	ldr	r3, [pc, #56]	; (11ac <_gpio_set_direction+0x100>)
    1174:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    1176:	683b      	ldr	r3, [r7, #0]
    1178:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    117a:	22c0      	movs	r2, #192	; 0xc0
    117c:	0612      	lsls	r2, r2, #24
    117e:	431a      	orrs	r2, r3
    1180:	1dfb      	adds	r3, r7, #7
    1182:	781b      	ldrb	r3, [r3, #0]
    1184:	4808      	ldr	r0, [pc, #32]	; (11a8 <_gpio_set_direction+0xfc>)
    1186:	0019      	movs	r1, r3
    1188:	4b08      	ldr	r3, [pc, #32]	; (11ac <_gpio_set_direction+0x100>)
    118a:	4798      	blx	r3
		break;
    118c:	e005      	b.n	119a <_gpio_set_direction+0xee>

	default:
		ASSERT(false);
    118e:	4b0b      	ldr	r3, [pc, #44]	; (11bc <_gpio_set_direction+0x110>)
    1190:	2245      	movs	r2, #69	; 0x45
    1192:	0019      	movs	r1, r3
    1194:	2000      	movs	r0, #0
    1196:	4b0a      	ldr	r3, [pc, #40]	; (11c0 <_gpio_set_direction+0x114>)
    1198:	4798      	blx	r3
	}
}
    119a:	46c0      	nop			; (mov r8, r8)
    119c:	46bd      	mov	sp, r7
    119e:	b002      	add	sp, #8
    11a0:	bd80      	pop	{r7, pc}
    11a2:	46c0      	nop			; (mov r8, r8)
    11a4:	00000dbf 	.word	0x00000dbf
    11a8:	41004400 	.word	0x41004400
    11ac:	0000107f 	.word	0x0000107f
    11b0:	40020000 	.word	0x40020000
    11b4:	c0020000 	.word	0xc0020000
    11b8:	00000d93 	.word	0x00000d93
    11bc:	00010cb0 	.word	0x00010cb0
    11c0:	00002ae1 	.word	0x00002ae1

000011c4 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    11c4:	b580      	push	{r7, lr}
    11c6:	b082      	sub	sp, #8
    11c8:	af00      	add	r7, sp, #0
    11ca:	6039      	str	r1, [r7, #0]
    11cc:	0011      	movs	r1, r2
    11ce:	1dfb      	adds	r3, r7, #7
    11d0:	1c02      	adds	r2, r0, #0
    11d2:	701a      	strb	r2, [r3, #0]
    11d4:	1dbb      	adds	r3, r7, #6
    11d6:	1c0a      	adds	r2, r1, #0
    11d8:	701a      	strb	r2, [r3, #0]
	if (level) {
    11da:	1dbb      	adds	r3, r7, #6
    11dc:	781b      	ldrb	r3, [r3, #0]
    11de:	2b00      	cmp	r3, #0
    11e0:	d008      	beq.n	11f4 <_gpio_set_level+0x30>
		hri_port_set_OUT_reg(PORT_IOBUS, port, mask);
    11e2:	683a      	ldr	r2, [r7, #0]
    11e4:	1dfb      	adds	r3, r7, #7
    11e6:	7819      	ldrb	r1, [r3, #0]
    11e8:	23c0      	movs	r3, #192	; 0xc0
    11ea:	05db      	lsls	r3, r3, #23
    11ec:	0018      	movs	r0, r3
    11ee:	4b07      	ldr	r3, [pc, #28]	; (120c <_gpio_set_level+0x48>)
    11f0:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
	}
}
    11f2:	e007      	b.n	1204 <_gpio_set_level+0x40>
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
    11f4:	683a      	ldr	r2, [r7, #0]
    11f6:	1dfb      	adds	r3, r7, #7
    11f8:	7819      	ldrb	r1, [r3, #0]
    11fa:	23c0      	movs	r3, #192	; 0xc0
    11fc:	05db      	lsls	r3, r3, #23
    11fe:	0018      	movs	r0, r3
    1200:	4b03      	ldr	r3, [pc, #12]	; (1210 <_gpio_set_level+0x4c>)
    1202:	4798      	blx	r3
}
    1204:	46c0      	nop			; (mov r8, r8)
    1206:	46bd      	mov	sp, r7
    1208:	b002      	add	sp, #8
    120a:	bd80      	pop	{r7, pc}
    120c:	00000deb 	.word	0x00000deb
    1210:	00000e17 	.word	0x00000e17

00001214 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
    1214:	b590      	push	{r4, r7, lr}
    1216:	b083      	sub	sp, #12
    1218:	af00      	add	r7, sp, #0
    121a:	0004      	movs	r4, r0
    121c:	0008      	movs	r0, r1
    121e:	0011      	movs	r1, r2
    1220:	1dfb      	adds	r3, r7, #7
    1222:	1c22      	adds	r2, r4, #0
    1224:	701a      	strb	r2, [r3, #0]
    1226:	1dbb      	adds	r3, r7, #6
    1228:	1c02      	adds	r2, r0, #0
    122a:	701a      	strb	r2, [r3, #0]
    122c:	1d7b      	adds	r3, r7, #5
    122e:	1c0a      	adds	r2, r1, #0
    1230:	701a      	strb	r2, [r3, #0]
	switch (pull_mode) {
    1232:	1d7b      	adds	r3, r7, #5
    1234:	781b      	ldrb	r3, [r3, #0]
    1236:	2b01      	cmp	r3, #1
    1238:	d00c      	beq.n	1254 <_gpio_set_pin_pull_mode+0x40>
    123a:	2b02      	cmp	r3, #2
    123c:	d029      	beq.n	1292 <_gpio_set_pin_pull_mode+0x7e>
    123e:	2b00      	cmp	r3, #0
    1240:	d146      	bne.n	12d0 <_gpio_set_pin_pull_mode+0xbc>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    1242:	1dbb      	adds	r3, r7, #6
    1244:	781a      	ldrb	r2, [r3, #0]
    1246:	1dfb      	adds	r3, r7, #7
    1248:	781b      	ldrb	r3, [r3, #0]
    124a:	4827      	ldr	r0, [pc, #156]	; (12e8 <_gpio_set_pin_pull_mode+0xd4>)
    124c:	0019      	movs	r1, r3
    124e:	4b27      	ldr	r3, [pc, #156]	; (12ec <_gpio_set_pin_pull_mode+0xd8>)
    1250:	4798      	blx	r3
		break;
    1252:	e044      	b.n	12de <_gpio_set_pin_pull_mode+0xca>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, 1U << pin);
    1254:	1dbb      	adds	r3, r7, #6
    1256:	781b      	ldrb	r3, [r3, #0]
    1258:	2201      	movs	r2, #1
    125a:	409a      	lsls	r2, r3
    125c:	1dfb      	adds	r3, r7, #7
    125e:	7819      	ldrb	r1, [r3, #0]
    1260:	23c0      	movs	r3, #192	; 0xc0
    1262:	05db      	lsls	r3, r3, #23
    1264:	0018      	movs	r0, r3
    1266:	4b22      	ldr	r3, [pc, #136]	; (12f0 <_gpio_set_pin_pull_mode+0xdc>)
    1268:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    126a:	1dbb      	adds	r3, r7, #6
    126c:	781a      	ldrb	r2, [r3, #0]
    126e:	1dfb      	adds	r3, r7, #7
    1270:	781b      	ldrb	r3, [r3, #0]
    1272:	481d      	ldr	r0, [pc, #116]	; (12e8 <_gpio_set_pin_pull_mode+0xd4>)
    1274:	0019      	movs	r1, r3
    1276:	4b1f      	ldr	r3, [pc, #124]	; (12f4 <_gpio_set_pin_pull_mode+0xe0>)
    1278:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT_IOBUS, port, 1U << pin);
    127a:	1dbb      	adds	r3, r7, #6
    127c:	781b      	ldrb	r3, [r3, #0]
    127e:	2201      	movs	r2, #1
    1280:	409a      	lsls	r2, r3
    1282:	1dfb      	adds	r3, r7, #7
    1284:	7819      	ldrb	r1, [r3, #0]
    1286:	23c0      	movs	r3, #192	; 0xc0
    1288:	05db      	lsls	r3, r3, #23
    128a:	0018      	movs	r0, r3
    128c:	4b1a      	ldr	r3, [pc, #104]	; (12f8 <_gpio_set_pin_pull_mode+0xe4>)
    128e:	4798      	blx	r3
		break;
    1290:	e025      	b.n	12de <_gpio_set_pin_pull_mode+0xca>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, 1U << pin);
    1292:	1dbb      	adds	r3, r7, #6
    1294:	781b      	ldrb	r3, [r3, #0]
    1296:	2201      	movs	r2, #1
    1298:	409a      	lsls	r2, r3
    129a:	1dfb      	adds	r3, r7, #7
    129c:	7819      	ldrb	r1, [r3, #0]
    129e:	23c0      	movs	r3, #192	; 0xc0
    12a0:	05db      	lsls	r3, r3, #23
    12a2:	0018      	movs	r0, r3
    12a4:	4b12      	ldr	r3, [pc, #72]	; (12f0 <_gpio_set_pin_pull_mode+0xdc>)
    12a6:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    12a8:	1dbb      	adds	r3, r7, #6
    12aa:	781a      	ldrb	r2, [r3, #0]
    12ac:	1dfb      	adds	r3, r7, #7
    12ae:	781b      	ldrb	r3, [r3, #0]
    12b0:	480d      	ldr	r0, [pc, #52]	; (12e8 <_gpio_set_pin_pull_mode+0xd4>)
    12b2:	0019      	movs	r1, r3
    12b4:	4b0f      	ldr	r3, [pc, #60]	; (12f4 <_gpio_set_pin_pull_mode+0xe0>)
    12b6:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT_IOBUS, port, 1U << pin);
    12b8:	1dbb      	adds	r3, r7, #6
    12ba:	781b      	ldrb	r3, [r3, #0]
    12bc:	2201      	movs	r2, #1
    12be:	409a      	lsls	r2, r3
    12c0:	1dfb      	adds	r3, r7, #7
    12c2:	7819      	ldrb	r1, [r3, #0]
    12c4:	23c0      	movs	r3, #192	; 0xc0
    12c6:	05db      	lsls	r3, r3, #23
    12c8:	0018      	movs	r0, r3
    12ca:	4b0c      	ldr	r3, [pc, #48]	; (12fc <_gpio_set_pin_pull_mode+0xe8>)
    12cc:	4798      	blx	r3
		break;
    12ce:	e006      	b.n	12de <_gpio_set_pin_pull_mode+0xca>

	default:
		ASSERT(false);
    12d0:	4b0b      	ldr	r3, [pc, #44]	; (1300 <_gpio_set_pin_pull_mode+0xec>)
    12d2:	2288      	movs	r2, #136	; 0x88
    12d4:	0019      	movs	r1, r3
    12d6:	2000      	movs	r0, #0
    12d8:	4b0a      	ldr	r3, [pc, #40]	; (1304 <_gpio_set_pin_pull_mode+0xf0>)
    12da:	4798      	blx	r3
		break;
    12dc:	46c0      	nop			; (mov r8, r8)
	}
}
    12de:	46c0      	nop			; (mov r8, r8)
    12e0:	46bd      	mov	sp, r7
    12e2:	b003      	add	sp, #12
    12e4:	bd90      	pop	{r4, r7, pc}
    12e6:	46c0      	nop			; (mov r8, r8)
    12e8:	41004400 	.word	0x41004400
    12ec:	00001029 	.word	0x00001029
    12f0:	00000dbf 	.word	0x00000dbf
    12f4:	00000fd3 	.word	0x00000fd3
    12f8:	00000deb 	.word	0x00000deb
    12fc:	00000e17 	.word	0x00000e17
    1300:	00010cb0 	.word	0x00010cb0
    1304:	00002ae1 	.word	0x00002ae1

00001308 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    1308:	b590      	push	{r4, r7, lr}
    130a:	b085      	sub	sp, #20
    130c:	af00      	add	r7, sp, #0
    130e:	6078      	str	r0, [r7, #4]
    1310:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    1312:	687b      	ldr	r3, [r7, #4]
    1314:	095a      	lsrs	r2, r3, #5
    1316:	230f      	movs	r3, #15
    1318:	18fb      	adds	r3, r7, r3
    131a:	701a      	strb	r2, [r3, #0]
	uint8_t pin  = GPIO_PIN(gpio);
    131c:	687b      	ldr	r3, [r7, #4]
    131e:	b2da      	uxtb	r2, r3
    1320:	230e      	movs	r3, #14
    1322:	18fb      	adds	r3, r7, r3
    1324:	211f      	movs	r1, #31
    1326:	400a      	ands	r2, r1
    1328:	701a      	strb	r2, [r3, #0]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    132a:	683b      	ldr	r3, [r7, #0]
    132c:	3301      	adds	r3, #1
    132e:	d10a      	bne.n	1346 <_gpio_set_pin_function+0x3e>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    1330:	230e      	movs	r3, #14
    1332:	18fb      	adds	r3, r7, r3
    1334:	781a      	ldrb	r2, [r3, #0]
    1336:	230f      	movs	r3, #15
    1338:	18fb      	adds	r3, r7, r3
    133a:	7819      	ldrb	r1, [r3, #0]
    133c:	481b      	ldr	r0, [pc, #108]	; (13ac <_gpio_set_pin_function+0xa4>)
    133e:	2300      	movs	r3, #0
    1340:	4c1b      	ldr	r4, [pc, #108]	; (13b0 <_gpio_set_pin_function+0xa8>)
    1342:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    1344:	e02e      	b.n	13a4 <_gpio_set_pin_function+0x9c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    1346:	230e      	movs	r3, #14
    1348:	18fb      	adds	r3, r7, r3
    134a:	781a      	ldrb	r2, [r3, #0]
    134c:	230f      	movs	r3, #15
    134e:	18fb      	adds	r3, r7, r3
    1350:	7819      	ldrb	r1, [r3, #0]
    1352:	4816      	ldr	r0, [pc, #88]	; (13ac <_gpio_set_pin_function+0xa4>)
    1354:	2301      	movs	r3, #1
    1356:	4c16      	ldr	r4, [pc, #88]	; (13b0 <_gpio_set_pin_function+0xa8>)
    1358:	47a0      	blx	r4
		if (pin & 1) {
    135a:	230e      	movs	r3, #14
    135c:	18fb      	adds	r3, r7, r3
    135e:	781b      	ldrb	r3, [r3, #0]
    1360:	2201      	movs	r2, #1
    1362:	4013      	ands	r3, r2
    1364:	d00f      	beq.n	1386 <_gpio_set_pin_function+0x7e>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    1366:	230e      	movs	r3, #14
    1368:	18fb      	adds	r3, r7, r3
    136a:	781b      	ldrb	r3, [r3, #0]
    136c:	085b      	lsrs	r3, r3, #1
    136e:	b2da      	uxtb	r2, r3
    1370:	683b      	ldr	r3, [r7, #0]
    1372:	b2d8      	uxtb	r0, r3
    1374:	230f      	movs	r3, #15
    1376:	18fb      	adds	r3, r7, r3
    1378:	7819      	ldrb	r1, [r3, #0]
    137a:	4c0c      	ldr	r4, [pc, #48]	; (13ac <_gpio_set_pin_function+0xa4>)
    137c:	0003      	movs	r3, r0
    137e:	0020      	movs	r0, r4
    1380:	4c0c      	ldr	r4, [pc, #48]	; (13b4 <_gpio_set_pin_function+0xac>)
    1382:	47a0      	blx	r4
}
    1384:	e00e      	b.n	13a4 <_gpio_set_pin_function+0x9c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    1386:	230e      	movs	r3, #14
    1388:	18fb      	adds	r3, r7, r3
    138a:	781b      	ldrb	r3, [r3, #0]
    138c:	085b      	lsrs	r3, r3, #1
    138e:	b2da      	uxtb	r2, r3
    1390:	683b      	ldr	r3, [r7, #0]
    1392:	b2d8      	uxtb	r0, r3
    1394:	230f      	movs	r3, #15
    1396:	18fb      	adds	r3, r7, r3
    1398:	7819      	ldrb	r1, [r3, #0]
    139a:	4c04      	ldr	r4, [pc, #16]	; (13ac <_gpio_set_pin_function+0xa4>)
    139c:	0003      	movs	r3, r0
    139e:	0020      	movs	r0, r4
    13a0:	4c05      	ldr	r4, [pc, #20]	; (13b8 <_gpio_set_pin_function+0xb0>)
    13a2:	47a0      	blx	r4
}
    13a4:	46c0      	nop			; (mov r8, r8)
    13a6:	46bd      	mov	sp, r7
    13a8:	b005      	add	sp, #20
    13aa:	bd90      	pop	{r4, r7, pc}
    13ac:	41004400 	.word	0x41004400
    13b0:	00000f51 	.word	0x00000f51
    13b4:	00000ecb 	.word	0x00000ecb
    13b8:	00000e43 	.word	0x00000e43

000013bc <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    13bc:	b580      	push	{r7, lr}
    13be:	b082      	sub	sp, #8
    13c0:	af00      	add	r7, sp, #0
    13c2:	0002      	movs	r2, r0
    13c4:	1dfb      	adds	r3, r7, #7
    13c6:	701a      	strb	r2, [r3, #0]
    13c8:	1dbb      	adds	r3, r7, #6
    13ca:	1c0a      	adds	r2, r1, #0
    13cc:	701a      	strb	r2, [r3, #0]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    13ce:	1dfb      	adds	r3, r7, #7
    13d0:	781b      	ldrb	r3, [r3, #0]
    13d2:	095b      	lsrs	r3, r3, #5
    13d4:	b2d8      	uxtb	r0, r3
    13d6:	1dfb      	adds	r3, r7, #7
    13d8:	781b      	ldrb	r3, [r3, #0]
    13da:	221f      	movs	r2, #31
    13dc:	4013      	ands	r3, r2
    13de:	b2d9      	uxtb	r1, r3
    13e0:	1dbb      	adds	r3, r7, #6
    13e2:	781b      	ldrb	r3, [r3, #0]
    13e4:	001a      	movs	r2, r3
    13e6:	4b03      	ldr	r3, [pc, #12]	; (13f4 <gpio_set_pin_pull_mode+0x38>)
    13e8:	4798      	blx	r3
}
    13ea:	46c0      	nop			; (mov r8, r8)
    13ec:	46bd      	mov	sp, r7
    13ee:	b002      	add	sp, #8
    13f0:	bd80      	pop	{r7, pc}
    13f2:	46c0      	nop			; (mov r8, r8)
    13f4:	00001215 	.word	0x00001215

000013f8 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    13f8:	b580      	push	{r7, lr}
    13fa:	b082      	sub	sp, #8
    13fc:	af00      	add	r7, sp, #0
    13fe:	6078      	str	r0, [r7, #4]
    1400:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    1402:	683a      	ldr	r2, [r7, #0]
    1404:	687b      	ldr	r3, [r7, #4]
    1406:	0011      	movs	r1, r2
    1408:	0018      	movs	r0, r3
    140a:	4b03      	ldr	r3, [pc, #12]	; (1418 <gpio_set_pin_function+0x20>)
    140c:	4798      	blx	r3
}
    140e:	46c0      	nop			; (mov r8, r8)
    1410:	46bd      	mov	sp, r7
    1412:	b002      	add	sp, #8
    1414:	bd80      	pop	{r7, pc}
    1416:	46c0      	nop			; (mov r8, r8)
    1418:	00001309 	.word	0x00001309

0000141c <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    141c:	b580      	push	{r7, lr}
    141e:	b082      	sub	sp, #8
    1420:	af00      	add	r7, sp, #0
    1422:	0002      	movs	r2, r0
    1424:	1dfb      	adds	r3, r7, #7
    1426:	701a      	strb	r2, [r3, #0]
    1428:	1dbb      	adds	r3, r7, #6
    142a:	1c0a      	adds	r2, r1, #0
    142c:	701a      	strb	r2, [r3, #0]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    142e:	1dfb      	adds	r3, r7, #7
    1430:	781b      	ldrb	r3, [r3, #0]
    1432:	095b      	lsrs	r3, r3, #5
    1434:	b2d8      	uxtb	r0, r3
    1436:	1dfb      	adds	r3, r7, #7
    1438:	781b      	ldrb	r3, [r3, #0]
    143a:	221f      	movs	r2, #31
    143c:	4013      	ands	r3, r2
    143e:	2201      	movs	r2, #1
    1440:	409a      	lsls	r2, r3
    1442:	0011      	movs	r1, r2
    1444:	1dbb      	adds	r3, r7, #6
    1446:	781b      	ldrb	r3, [r3, #0]
    1448:	001a      	movs	r2, r3
    144a:	4b03      	ldr	r3, [pc, #12]	; (1458 <gpio_set_pin_direction+0x3c>)
    144c:	4798      	blx	r3
}
    144e:	46c0      	nop			; (mov r8, r8)
    1450:	46bd      	mov	sp, r7
    1452:	b002      	add	sp, #8
    1454:	bd80      	pop	{r7, pc}
    1456:	46c0      	nop			; (mov r8, r8)
    1458:	000010ad 	.word	0x000010ad

0000145c <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    145c:	b580      	push	{r7, lr}
    145e:	b082      	sub	sp, #8
    1460:	af00      	add	r7, sp, #0
    1462:	0002      	movs	r2, r0
    1464:	1dfb      	adds	r3, r7, #7
    1466:	701a      	strb	r2, [r3, #0]
    1468:	1dbb      	adds	r3, r7, #6
    146a:	1c0a      	adds	r2, r1, #0
    146c:	701a      	strb	r2, [r3, #0]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    146e:	1dfb      	adds	r3, r7, #7
    1470:	781b      	ldrb	r3, [r3, #0]
    1472:	095b      	lsrs	r3, r3, #5
    1474:	b2d8      	uxtb	r0, r3
    1476:	1dfb      	adds	r3, r7, #7
    1478:	781b      	ldrb	r3, [r3, #0]
    147a:	221f      	movs	r2, #31
    147c:	4013      	ands	r3, r2
    147e:	2201      	movs	r2, #1
    1480:	409a      	lsls	r2, r3
    1482:	0011      	movs	r1, r2
    1484:	1dbb      	adds	r3, r7, #6
    1486:	781b      	ldrb	r3, [r3, #0]
    1488:	001a      	movs	r2, r3
    148a:	4b03      	ldr	r3, [pc, #12]	; (1498 <gpio_set_pin_level+0x3c>)
    148c:	4798      	blx	r3
}
    148e:	46c0      	nop			; (mov r8, r8)
    1490:	46bd      	mov	sp, r7
    1492:	b002      	add	sp, #8
    1494:	bd80      	pop	{r7, pc}
    1496:	46c0      	nop			; (mov r8, r8)
    1498:	000011c5 	.word	0x000011c5

0000149c <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    149c:	b580      	push	{r7, lr}
    149e:	af00      	add	r7, sp, #0
	_init_chip();
    14a0:	4b02      	ldr	r3, [pc, #8]	; (14ac <init_mcu+0x10>)
    14a2:	4798      	blx	r3
}
    14a4:	46c0      	nop			; (mov r8, r8)
    14a6:	46bd      	mov	sp, r7
    14a8:	bd80      	pop	{r7, pc}
    14aa:	46c0      	nop			; (mov r8, r8)
    14ac:	00002d4d 	.word	0x00002d4d

000014b0 <_gclk_enable_channel>:
 *
 * \param[in] channel The channel to enable clock for
 * \param[in] source The clock source for the given channel
 */
static inline void _gclk_enable_channel(const uint8_t channel, const uint8_t source)
{
    14b0:	b580      	push	{r7, lr}
    14b2:	b082      	sub	sp, #8
    14b4:	af00      	add	r7, sp, #0
    14b6:	0002      	movs	r2, r0
    14b8:	1dfb      	adds	r3, r7, #7
    14ba:	701a      	strb	r2, [r3, #0]
    14bc:	1dbb      	adds	r3, r7, #6
    14be:	1c0a      	adds	r2, r1, #0
    14c0:	701a      	strb	r2, [r3, #0]

	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(channel) | GCLK_CLKCTRL_GEN(source) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
    14c2:	1dfb      	adds	r3, r7, #7
    14c4:	781b      	ldrb	r3, [r3, #0]
    14c6:	b29b      	uxth	r3, r3
    14c8:	223f      	movs	r2, #63	; 0x3f
    14ca:	4013      	ands	r3, r2
    14cc:	b29a      	uxth	r2, r3
    14ce:	1dbb      	adds	r3, r7, #6
    14d0:	781b      	ldrb	r3, [r3, #0]
    14d2:	b29b      	uxth	r3, r3
    14d4:	021b      	lsls	r3, r3, #8
    14d6:	b299      	uxth	r1, r3
    14d8:	23f0      	movs	r3, #240	; 0xf0
    14da:	011b      	lsls	r3, r3, #4
    14dc:	400b      	ands	r3, r1
    14de:	b29b      	uxth	r3, r3
    14e0:	4313      	orrs	r3, r2
    14e2:	b29b      	uxth	r3, r3
	hri_gclk_write_CLKCTRL_reg(GCLK,
    14e4:	2280      	movs	r2, #128	; 0x80
    14e6:	01d2      	lsls	r2, r2, #7
    14e8:	4313      	orrs	r3, r2
    14ea:	b29b      	uxth	r3, r3
    14ec:	4a04      	ldr	r2, [pc, #16]	; (1500 <_gclk_enable_channel+0x50>)
    14ee:	0019      	movs	r1, r3
    14f0:	0010      	movs	r0, r2
    14f2:	4b04      	ldr	r3, [pc, #16]	; (1504 <_gclk_enable_channel+0x54>)
    14f4:	4798      	blx	r3
}
    14f6:	46c0      	nop			; (mov r8, r8)
    14f8:	46bd      	mov	sp, r7
    14fa:	b002      	add	sp, #8
    14fc:	bd80      	pop	{r7, pc}
    14fe:	46c0      	nop			; (mov r8, r8)
    1500:	40000c00 	.word	0x40000c00
    1504:	00000d75 	.word	0x00000d75

00001508 <_pm_get_ahb_index>:
 * \param[in] module Module to get index for
 *
 * \return index of the given module if succeeds, ERR_INVALID_ARG otherwise
 */
static inline int32_t _pm_get_ahb_index(const void *const module)
{
    1508:	b580      	push	{r7, lr}
    150a:	b082      	sub	sp, #8
    150c:	af00      	add	r7, sp, #0
    150e:	6078      	str	r0, [r7, #4]
	if ((uint32_t)module == (uint32_t)PM_BUS_APBA) {
    1510:	687b      	ldr	r3, [r7, #4]
    1512:	2b01      	cmp	r3, #1
    1514:	d101      	bne.n	151a <_pm_get_ahb_index+0x12>
		return 0;
    1516:	2300      	movs	r3, #0
    1518:	e023      	b.n	1562 <_pm_get_ahb_index+0x5a>
	} else if ((uint32_t)module == (uint32_t)PM_BUS_APBB) {
    151a:	687b      	ldr	r3, [r7, #4]
    151c:	2b02      	cmp	r3, #2
    151e:	d101      	bne.n	1524 <_pm_get_ahb_index+0x1c>
		return 1;
    1520:	2301      	movs	r3, #1
    1522:	e01e      	b.n	1562 <_pm_get_ahb_index+0x5a>
	} else if ((uint32_t)module == (uint32_t)PM_BUS_APBC) {
    1524:	687b      	ldr	r3, [r7, #4]
    1526:	2b03      	cmp	r3, #3
    1528:	d101      	bne.n	152e <_pm_get_ahb_index+0x26>
		return 2;
    152a:	2302      	movs	r3, #2
    152c:	e019      	b.n	1562 <_pm_get_ahb_index+0x5a>
	}
	if ((uint32_t)module == (uint32_t)DSU) {
    152e:	687b      	ldr	r3, [r7, #4]
    1530:	4a0e      	ldr	r2, [pc, #56]	; (156c <_pm_get_ahb_index+0x64>)
    1532:	4293      	cmp	r3, r2
    1534:	d101      	bne.n	153a <_pm_get_ahb_index+0x32>
		return 3;
    1536:	2303      	movs	r3, #3
    1538:	e013      	b.n	1562 <_pm_get_ahb_index+0x5a>
	} else if ((uint32_t)module == (uint32_t)NVMCTRL) {
    153a:	687b      	ldr	r3, [r7, #4]
    153c:	4a0c      	ldr	r2, [pc, #48]	; (1570 <_pm_get_ahb_index+0x68>)
    153e:	4293      	cmp	r3, r2
    1540:	d101      	bne.n	1546 <_pm_get_ahb_index+0x3e>
		return 4;
    1542:	2304      	movs	r3, #4
    1544:	e00d      	b.n	1562 <_pm_get_ahb_index+0x5a>
	} else if ((uint32_t)module == (uint32_t)DMAC) {
    1546:	687b      	ldr	r3, [r7, #4]
    1548:	4a0a      	ldr	r2, [pc, #40]	; (1574 <_pm_get_ahb_index+0x6c>)
    154a:	4293      	cmp	r3, r2
    154c:	d101      	bne.n	1552 <_pm_get_ahb_index+0x4a>
		return 5;
    154e:	2305      	movs	r3, #5
    1550:	e007      	b.n	1562 <_pm_get_ahb_index+0x5a>
	}
#ifdef USB
	else if ((uint32_t)module == (uint32_t)USB) {
    1552:	687b      	ldr	r3, [r7, #4]
    1554:	4a08      	ldr	r2, [pc, #32]	; (1578 <_pm_get_ahb_index+0x70>)
    1556:	4293      	cmp	r3, r2
    1558:	d101      	bne.n	155e <_pm_get_ahb_index+0x56>
		return 6;
    155a:	2306      	movs	r3, #6
    155c:	e001      	b.n	1562 <_pm_get_ahb_index+0x5a>
	}
#endif

	return ERR_INVALID_ARG;
    155e:	230d      	movs	r3, #13
    1560:	425b      	negs	r3, r3
}
    1562:	0018      	movs	r0, r3
    1564:	46bd      	mov	sp, r7
    1566:	b002      	add	sp, #8
    1568:	bd80      	pop	{r7, pc}
    156a:	46c0      	nop			; (mov r8, r8)
    156c:	41002000 	.word	0x41002000
    1570:	41004000 	.word	0x41004000
    1574:	41004800 	.word	0x41004800
    1578:	41005000 	.word	0x41005000

0000157c <_pm_get_apbb_index>:
 * \param[in] module Module to get index for
 *
 * \return index of the given module if succeeds, ERR_INVALID_ARG otherwise
 */
static inline int32_t _pm_get_apbb_index(const void *const module)
{
    157c:	b580      	push	{r7, lr}
    157e:	b082      	sub	sp, #8
    1580:	af00      	add	r7, sp, #0
    1582:	6078      	str	r0, [r7, #4]
	if ((uint32_t)module == (uint32_t)PAC1) {
    1584:	687a      	ldr	r2, [r7, #4]
    1586:	2382      	movs	r3, #130	; 0x82
    1588:	05db      	lsls	r3, r3, #23
    158a:	429a      	cmp	r2, r3
    158c:	d101      	bne.n	1592 <_pm_get_apbb_index+0x16>
		return 0;
    158e:	2300      	movs	r3, #0
    1590:	e01f      	b.n	15d2 <_pm_get_apbb_index+0x56>
	} else if ((uint32_t)module == (uint32_t)DSU) {
    1592:	687b      	ldr	r3, [r7, #4]
    1594:	4a11      	ldr	r2, [pc, #68]	; (15dc <_pm_get_apbb_index+0x60>)
    1596:	4293      	cmp	r3, r2
    1598:	d101      	bne.n	159e <_pm_get_apbb_index+0x22>
		return 1;
    159a:	2301      	movs	r3, #1
    159c:	e019      	b.n	15d2 <_pm_get_apbb_index+0x56>
	} else if ((uint32_t)module == (uint32_t)NVMCTRL) {
    159e:	687b      	ldr	r3, [r7, #4]
    15a0:	4a0f      	ldr	r2, [pc, #60]	; (15e0 <_pm_get_apbb_index+0x64>)
    15a2:	4293      	cmp	r3, r2
    15a4:	d101      	bne.n	15aa <_pm_get_apbb_index+0x2e>
		return 2;
    15a6:	2302      	movs	r3, #2
    15a8:	e013      	b.n	15d2 <_pm_get_apbb_index+0x56>
	}
	if ((uint32_t)module == (uint32_t)PORT) {
    15aa:	687b      	ldr	r3, [r7, #4]
    15ac:	4a0d      	ldr	r2, [pc, #52]	; (15e4 <_pm_get_apbb_index+0x68>)
    15ae:	4293      	cmp	r3, r2
    15b0:	d101      	bne.n	15b6 <_pm_get_apbb_index+0x3a>
		return 3;
    15b2:	2303      	movs	r3, #3
    15b4:	e00d      	b.n	15d2 <_pm_get_apbb_index+0x56>
	} else if ((uint32_t)module == (uint32_t)DMAC) {
    15b6:	687b      	ldr	r3, [r7, #4]
    15b8:	4a0b      	ldr	r2, [pc, #44]	; (15e8 <_pm_get_apbb_index+0x6c>)
    15ba:	4293      	cmp	r3, r2
    15bc:	d101      	bne.n	15c2 <_pm_get_apbb_index+0x46>
		return 4;
    15be:	2304      	movs	r3, #4
    15c0:	e007      	b.n	15d2 <_pm_get_apbb_index+0x56>
	}
#ifdef USB
	else if ((uint32_t)module == (uint32_t)USB) {
    15c2:	687b      	ldr	r3, [r7, #4]
    15c4:	4a09      	ldr	r2, [pc, #36]	; (15ec <_pm_get_apbb_index+0x70>)
    15c6:	4293      	cmp	r3, r2
    15c8:	d101      	bne.n	15ce <_pm_get_apbb_index+0x52>
		return 5;
    15ca:	2305      	movs	r3, #5
    15cc:	e001      	b.n	15d2 <_pm_get_apbb_index+0x56>
	}
#endif

	return ERR_INVALID_ARG;
    15ce:	230d      	movs	r3, #13
    15d0:	425b      	negs	r3, r3
}
    15d2:	0018      	movs	r0, r3
    15d4:	46bd      	mov	sp, r7
    15d6:	b002      	add	sp, #8
    15d8:	bd80      	pop	{r7, pc}
    15da:	46c0      	nop			; (mov r8, r8)
    15dc:	41002000 	.word	0x41002000
    15e0:	41004000 	.word	0x41004000
    15e4:	41004400 	.word	0x41004400
    15e8:	41004800 	.word	0x41004800
    15ec:	41005000 	.word	0x41005000

000015f0 <_pm_enable_bus_clock>:
 *
 * \param[in] bus A bus to enable clock on
 * \param[in] module A hardware module to enable clock for
 */
static inline void _pm_enable_bus_clock(const enum _pm_bus bus, const void *const module)
{
    15f0:	b580      	push	{r7, lr}
    15f2:	b084      	sub	sp, #16
    15f4:	af00      	add	r7, sp, #0
    15f6:	0002      	movs	r2, r0
    15f8:	6039      	str	r1, [r7, #0]
    15fa:	1dfb      	adds	r3, r7, #7
    15fc:	701a      	strb	r2, [r3, #0]
	uint32_t peripheral = ((uint32_t)module & 0x0000ff00) >> 10;
    15fe:	683b      	ldr	r3, [r7, #0]
    1600:	0a9b      	lsrs	r3, r3, #10
    1602:	223f      	movs	r2, #63	; 0x3f
    1604:	4013      	ands	r3, r2
    1606:	60fb      	str	r3, [r7, #12]

	switch (bus) {
    1608:	1dfb      	adds	r3, r7, #7
    160a:	781b      	ldrb	r3, [r3, #0]
    160c:	2b01      	cmp	r3, #1
    160e:	d01e      	beq.n	164e <_pm_enable_bus_clock+0x5e>
    1610:	dc02      	bgt.n	1618 <_pm_enable_bus_clock+0x28>
    1612:	2b00      	cmp	r3, #0
    1614:	d005      	beq.n	1622 <_pm_enable_bus_clock+0x32>
    1616:	e044      	b.n	16a2 <_pm_enable_bus_clock+0xb2>
    1618:	2b02      	cmp	r3, #2
    161a:	d022      	beq.n	1662 <_pm_enable_bus_clock+0x72>
    161c:	2b03      	cmp	r3, #3
    161e:	d036      	beq.n	168e <_pm_enable_bus_clock+0x9e>
    1620:	e03f      	b.n	16a2 <_pm_enable_bus_clock+0xb2>
	case PM_BUS_AHB:
		if (_pm_get_ahb_index(module) >= 0) {
    1622:	683b      	ldr	r3, [r7, #0]
    1624:	0018      	movs	r0, r3
    1626:	4b26      	ldr	r3, [pc, #152]	; (16c0 <_pm_enable_bus_clock+0xd0>)
    1628:	4798      	blx	r3
    162a:	1e03      	subs	r3, r0, #0
    162c:	db40      	blt.n	16b0 <_pm_enable_bus_clock+0xc0>
			peripheral = (uint32_t)_pm_get_ahb_index(module);
    162e:	683b      	ldr	r3, [r7, #0]
    1630:	0018      	movs	r0, r3
    1632:	4b23      	ldr	r3, [pc, #140]	; (16c0 <_pm_enable_bus_clock+0xd0>)
    1634:	4798      	blx	r3
    1636:	0003      	movs	r3, r0
    1638:	60fb      	str	r3, [r7, #12]
			PM->AHBMASK.reg |= 1 << peripheral;
    163a:	4b22      	ldr	r3, [pc, #136]	; (16c4 <_pm_enable_bus_clock+0xd4>)
    163c:	4a21      	ldr	r2, [pc, #132]	; (16c4 <_pm_enable_bus_clock+0xd4>)
    163e:	6952      	ldr	r2, [r2, #20]
    1640:	2001      	movs	r0, #1
    1642:	68f9      	ldr	r1, [r7, #12]
    1644:	4088      	lsls	r0, r1
    1646:	0001      	movs	r1, r0
    1648:	430a      	orrs	r2, r1
    164a:	615a      	str	r2, [r3, #20]
		}
		break;
    164c:	e030      	b.n	16b0 <_pm_enable_bus_clock+0xc0>
	case PM_BUS_APBA:
		PM->APBAMASK.reg |= 1 << peripheral;
    164e:	4b1d      	ldr	r3, [pc, #116]	; (16c4 <_pm_enable_bus_clock+0xd4>)
    1650:	4a1c      	ldr	r2, [pc, #112]	; (16c4 <_pm_enable_bus_clock+0xd4>)
    1652:	6992      	ldr	r2, [r2, #24]
    1654:	2001      	movs	r0, #1
    1656:	68f9      	ldr	r1, [r7, #12]
    1658:	4088      	lsls	r0, r1
    165a:	0001      	movs	r1, r0
    165c:	430a      	orrs	r2, r1
    165e:	619a      	str	r2, [r3, #24]
		break;
    1660:	e029      	b.n	16b6 <_pm_enable_bus_clock+0xc6>
	case PM_BUS_APBB:
		if (_pm_get_apbb_index(module) >= 0) {
    1662:	683b      	ldr	r3, [r7, #0]
    1664:	0018      	movs	r0, r3
    1666:	4b18      	ldr	r3, [pc, #96]	; (16c8 <_pm_enable_bus_clock+0xd8>)
    1668:	4798      	blx	r3
    166a:	1e03      	subs	r3, r0, #0
    166c:	db22      	blt.n	16b4 <_pm_enable_bus_clock+0xc4>
			peripheral = (uint32_t)_pm_get_apbb_index(module);
    166e:	683b      	ldr	r3, [r7, #0]
    1670:	0018      	movs	r0, r3
    1672:	4b15      	ldr	r3, [pc, #84]	; (16c8 <_pm_enable_bus_clock+0xd8>)
    1674:	4798      	blx	r3
    1676:	0003      	movs	r3, r0
    1678:	60fb      	str	r3, [r7, #12]
			PM->APBBMASK.reg |= 1 << peripheral;
    167a:	4b12      	ldr	r3, [pc, #72]	; (16c4 <_pm_enable_bus_clock+0xd4>)
    167c:	4a11      	ldr	r2, [pc, #68]	; (16c4 <_pm_enable_bus_clock+0xd4>)
    167e:	69d2      	ldr	r2, [r2, #28]
    1680:	2001      	movs	r0, #1
    1682:	68f9      	ldr	r1, [r7, #12]
    1684:	4088      	lsls	r0, r1
    1686:	0001      	movs	r1, r0
    1688:	430a      	orrs	r2, r1
    168a:	61da      	str	r2, [r3, #28]
		}
		break;
    168c:	e012      	b.n	16b4 <_pm_enable_bus_clock+0xc4>
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
    168e:	4b0d      	ldr	r3, [pc, #52]	; (16c4 <_pm_enable_bus_clock+0xd4>)
    1690:	4a0c      	ldr	r2, [pc, #48]	; (16c4 <_pm_enable_bus_clock+0xd4>)
    1692:	6a12      	ldr	r2, [r2, #32]
    1694:	2001      	movs	r0, #1
    1696:	68f9      	ldr	r1, [r7, #12]
    1698:	4088      	lsls	r0, r1
    169a:	0001      	movs	r1, r0
    169c:	430a      	orrs	r2, r1
    169e:	621a      	str	r2, [r3, #32]
		break;
    16a0:	e009      	b.n	16b6 <_pm_enable_bus_clock+0xc6>
	default:
		ASSERT(false);
    16a2:	4b0a      	ldr	r3, [pc, #40]	; (16cc <_pm_enable_bus_clock+0xdc>)
    16a4:	229b      	movs	r2, #155	; 0x9b
    16a6:	0019      	movs	r1, r3
    16a8:	2000      	movs	r0, #0
    16aa:	4b09      	ldr	r3, [pc, #36]	; (16d0 <_pm_enable_bus_clock+0xe0>)
    16ac:	4798      	blx	r3
		break;
    16ae:	e002      	b.n	16b6 <_pm_enable_bus_clock+0xc6>
		break;
    16b0:	46c0      	nop			; (mov r8, r8)
    16b2:	e000      	b.n	16b6 <_pm_enable_bus_clock+0xc6>
		break;
    16b4:	46c0      	nop			; (mov r8, r8)
	}
}
    16b6:	46c0      	nop			; (mov r8, r8)
    16b8:	46bd      	mov	sp, r7
    16ba:	b004      	add	sp, #16
    16bc:	bd80      	pop	{r7, pc}
    16be:	46c0      	nop			; (mov r8, r8)
    16c0:	00001509 	.word	0x00001509
    16c4:	40000400 	.word	0x40000400
    16c8:	0000157d 	.word	0x0000157d
    16cc:	00010ccc 	.word	0x00010ccc
    16d0:	00002ae1 	.word	0x00002ae1

000016d4 <SPI_ADF_PORT_init>:
struct spi_m_sync_descriptor SPI_LMX;

struct usart_sync_descriptor TARGET_IO;

void SPI_ADF_PORT_init(void)
{
    16d4:	b580      	push	{r7, lr}
    16d6:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PA04,
    16d8:	2100      	movs	r1, #0
    16da:	2004      	movs	r0, #4
    16dc:	4b13      	ldr	r3, [pc, #76]	; (172c <SPI_ADF_PORT_init+0x58>)
    16de:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PA04, GPIO_DIRECTION_OUT);
    16e0:	2102      	movs	r1, #2
    16e2:	2004      	movs	r0, #4
    16e4:	4b12      	ldr	r3, [pc, #72]	; (1730 <SPI_ADF_PORT_init+0x5c>)
    16e6:	4798      	blx	r3

	gpio_set_pin_function(PA04, PINMUX_PA04D_SERCOM0_PAD0);
    16e8:	4b12      	ldr	r3, [pc, #72]	; (1734 <SPI_ADF_PORT_init+0x60>)
    16ea:	0019      	movs	r1, r3
    16ec:	2004      	movs	r0, #4
    16ee:	4b12      	ldr	r3, [pc, #72]	; (1738 <SPI_ADF_PORT_init+0x64>)
    16f0:	4798      	blx	r3

	gpio_set_pin_level(PA05,
    16f2:	2100      	movs	r1, #0
    16f4:	2005      	movs	r0, #5
    16f6:	4b0d      	ldr	r3, [pc, #52]	; (172c <SPI_ADF_PORT_init+0x58>)
    16f8:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PA05, GPIO_DIRECTION_OUT);
    16fa:	2102      	movs	r1, #2
    16fc:	2005      	movs	r0, #5
    16fe:	4b0c      	ldr	r3, [pc, #48]	; (1730 <SPI_ADF_PORT_init+0x5c>)
    1700:	4798      	blx	r3

	gpio_set_pin_function(PA05, PINMUX_PA05D_SERCOM0_PAD1);
    1702:	4b0e      	ldr	r3, [pc, #56]	; (173c <SPI_ADF_PORT_init+0x68>)
    1704:	0019      	movs	r1, r3
    1706:	2005      	movs	r0, #5
    1708:	4b0b      	ldr	r3, [pc, #44]	; (1738 <SPI_ADF_PORT_init+0x64>)
    170a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA06, GPIO_DIRECTION_IN);
    170c:	2101      	movs	r1, #1
    170e:	2006      	movs	r0, #6
    1710:	4b07      	ldr	r3, [pc, #28]	; (1730 <SPI_ADF_PORT_init+0x5c>)
    1712:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA06,
    1714:	2100      	movs	r1, #0
    1716:	2006      	movs	r0, #6
    1718:	4b09      	ldr	r3, [pc, #36]	; (1740 <SPI_ADF_PORT_init+0x6c>)
    171a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA06, PINMUX_PA06D_SERCOM0_PAD2);
    171c:	4b09      	ldr	r3, [pc, #36]	; (1744 <SPI_ADF_PORT_init+0x70>)
    171e:	0019      	movs	r1, r3
    1720:	2006      	movs	r0, #6
    1722:	4b05      	ldr	r3, [pc, #20]	; (1738 <SPI_ADF_PORT_init+0x64>)
    1724:	4798      	blx	r3
}
    1726:	46c0      	nop			; (mov r8, r8)
    1728:	46bd      	mov	sp, r7
    172a:	bd80      	pop	{r7, pc}
    172c:	0000145d 	.word	0x0000145d
    1730:	0000141d 	.word	0x0000141d
    1734:	00040003 	.word	0x00040003
    1738:	000013f9 	.word	0x000013f9
    173c:	00050003 	.word	0x00050003
    1740:	000013bd 	.word	0x000013bd
    1744:	00060003 	.word	0x00060003

00001748 <SPI_ADF_CLOCK_init>:

void SPI_ADF_CLOCK_init(void)
{
    1748:	b580      	push	{r7, lr}
    174a:	af00      	add	r7, sp, #0
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM0);
    174c:	4b05      	ldr	r3, [pc, #20]	; (1764 <SPI_ADF_CLOCK_init+0x1c>)
    174e:	0019      	movs	r1, r3
    1750:	2003      	movs	r0, #3
    1752:	4b05      	ldr	r3, [pc, #20]	; (1768 <SPI_ADF_CLOCK_init+0x20>)
    1754:	4798      	blx	r3
	_gclk_enable_channel(SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC);
    1756:	2100      	movs	r1, #0
    1758:	2014      	movs	r0, #20
    175a:	4b04      	ldr	r3, [pc, #16]	; (176c <SPI_ADF_CLOCK_init+0x24>)
    175c:	4798      	blx	r3
}
    175e:	46c0      	nop			; (mov r8, r8)
    1760:	46bd      	mov	sp, r7
    1762:	bd80      	pop	{r7, pc}
    1764:	42000800 	.word	0x42000800
    1768:	000015f1 	.word	0x000015f1
    176c:	000014b1 	.word	0x000014b1

00001770 <SPI_ADF_init>:

void SPI_ADF_init(void)
{
    1770:	b580      	push	{r7, lr}
    1772:	af00      	add	r7, sp, #0
	SPI_ADF_CLOCK_init();
    1774:	4b06      	ldr	r3, [pc, #24]	; (1790 <SPI_ADF_init+0x20>)
    1776:	4798      	blx	r3
	spi_m_sync_init(&SPI_ADF, SERCOM0);
    1778:	4a06      	ldr	r2, [pc, #24]	; (1794 <SPI_ADF_init+0x24>)
    177a:	4b07      	ldr	r3, [pc, #28]	; (1798 <SPI_ADF_init+0x28>)
    177c:	0011      	movs	r1, r2
    177e:	0018      	movs	r0, r3
    1780:	4b06      	ldr	r3, [pc, #24]	; (179c <SPI_ADF_init+0x2c>)
    1782:	4798      	blx	r3
	SPI_ADF_PORT_init();
    1784:	4b06      	ldr	r3, [pc, #24]	; (17a0 <SPI_ADF_init+0x30>)
    1786:	4798      	blx	r3
}
    1788:	46c0      	nop			; (mov r8, r8)
    178a:	46bd      	mov	sp, r7
    178c:	bd80      	pop	{r7, pc}
    178e:	46c0      	nop			; (mov r8, r8)
    1790:	00001749 	.word	0x00001749
    1794:	42000800 	.word	0x42000800
    1798:	20001314 	.word	0x20001314
    179c:	00001bdd 	.word	0x00001bdd
    17a0:	000016d5 	.word	0x000016d5

000017a4 <SPI_LMX_PORT_init>:

void SPI_LMX_PORT_init(void)
{
    17a4:	b580      	push	{r7, lr}
    17a6:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PA16,
    17a8:	2100      	movs	r1, #0
    17aa:	2010      	movs	r0, #16
    17ac:	4b13      	ldr	r3, [pc, #76]	; (17fc <SPI_LMX_PORT_init+0x58>)
    17ae:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PA16, GPIO_DIRECTION_OUT);
    17b0:	2102      	movs	r1, #2
    17b2:	2010      	movs	r0, #16
    17b4:	4b12      	ldr	r3, [pc, #72]	; (1800 <SPI_LMX_PORT_init+0x5c>)
    17b6:	4798      	blx	r3

	gpio_set_pin_function(PA16, PINMUX_PA16C_SERCOM1_PAD0);
    17b8:	4b12      	ldr	r3, [pc, #72]	; (1804 <SPI_LMX_PORT_init+0x60>)
    17ba:	0019      	movs	r1, r3
    17bc:	2010      	movs	r0, #16
    17be:	4b12      	ldr	r3, [pc, #72]	; (1808 <SPI_LMX_PORT_init+0x64>)
    17c0:	4798      	blx	r3

	gpio_set_pin_level(PA17,
    17c2:	2100      	movs	r1, #0
    17c4:	2011      	movs	r0, #17
    17c6:	4b0d      	ldr	r3, [pc, #52]	; (17fc <SPI_LMX_PORT_init+0x58>)
    17c8:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PA17, GPIO_DIRECTION_OUT);
    17ca:	2102      	movs	r1, #2
    17cc:	2011      	movs	r0, #17
    17ce:	4b0c      	ldr	r3, [pc, #48]	; (1800 <SPI_LMX_PORT_init+0x5c>)
    17d0:	4798      	blx	r3

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
    17d2:	4b0e      	ldr	r3, [pc, #56]	; (180c <SPI_LMX_PORT_init+0x68>)
    17d4:	0019      	movs	r1, r3
    17d6:	2011      	movs	r0, #17
    17d8:	4b0b      	ldr	r3, [pc, #44]	; (1808 <SPI_LMX_PORT_init+0x64>)
    17da:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA18, GPIO_DIRECTION_IN);
    17dc:	2101      	movs	r1, #1
    17de:	2012      	movs	r0, #18
    17e0:	4b07      	ldr	r3, [pc, #28]	; (1800 <SPI_LMX_PORT_init+0x5c>)
    17e2:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA18,
    17e4:	2100      	movs	r1, #0
    17e6:	2012      	movs	r0, #18
    17e8:	4b09      	ldr	r3, [pc, #36]	; (1810 <SPI_LMX_PORT_init+0x6c>)
    17ea:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA18, PINMUX_PA18C_SERCOM1_PAD2);
    17ec:	4b09      	ldr	r3, [pc, #36]	; (1814 <SPI_LMX_PORT_init+0x70>)
    17ee:	0019      	movs	r1, r3
    17f0:	2012      	movs	r0, #18
    17f2:	4b05      	ldr	r3, [pc, #20]	; (1808 <SPI_LMX_PORT_init+0x64>)
    17f4:	4798      	blx	r3
}
    17f6:	46c0      	nop			; (mov r8, r8)
    17f8:	46bd      	mov	sp, r7
    17fa:	bd80      	pop	{r7, pc}
    17fc:	0000145d 	.word	0x0000145d
    1800:	0000141d 	.word	0x0000141d
    1804:	00100002 	.word	0x00100002
    1808:	000013f9 	.word	0x000013f9
    180c:	00110002 	.word	0x00110002
    1810:	000013bd 	.word	0x000013bd
    1814:	00120002 	.word	0x00120002

00001818 <SPI_LMX_CLOCK_init>:

void SPI_LMX_CLOCK_init(void)
{
    1818:	b580      	push	{r7, lr}
    181a:	af00      	add	r7, sp, #0
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM1);
    181c:	4b05      	ldr	r3, [pc, #20]	; (1834 <SPI_LMX_CLOCK_init+0x1c>)
    181e:	0019      	movs	r1, r3
    1820:	2003      	movs	r0, #3
    1822:	4b05      	ldr	r3, [pc, #20]	; (1838 <SPI_LMX_CLOCK_init+0x20>)
    1824:	4798      	blx	r3
	_gclk_enable_channel(SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC);
    1826:	2100      	movs	r1, #0
    1828:	2015      	movs	r0, #21
    182a:	4b04      	ldr	r3, [pc, #16]	; (183c <SPI_LMX_CLOCK_init+0x24>)
    182c:	4798      	blx	r3
}
    182e:	46c0      	nop			; (mov r8, r8)
    1830:	46bd      	mov	sp, r7
    1832:	bd80      	pop	{r7, pc}
    1834:	42000c00 	.word	0x42000c00
    1838:	000015f1 	.word	0x000015f1
    183c:	000014b1 	.word	0x000014b1

00001840 <SPI_LMX_init>:

void SPI_LMX_init(void)
{
    1840:	b580      	push	{r7, lr}
    1842:	af00      	add	r7, sp, #0
	SPI_LMX_CLOCK_init();
    1844:	4b06      	ldr	r3, [pc, #24]	; (1860 <SPI_LMX_init+0x20>)
    1846:	4798      	blx	r3
	spi_m_sync_init(&SPI_LMX, SERCOM1);
    1848:	4a06      	ldr	r2, [pc, #24]	; (1864 <SPI_LMX_init+0x24>)
    184a:	4b07      	ldr	r3, [pc, #28]	; (1868 <SPI_LMX_init+0x28>)
    184c:	0011      	movs	r1, r2
    184e:	0018      	movs	r0, r3
    1850:	4b06      	ldr	r3, [pc, #24]	; (186c <SPI_LMX_init+0x2c>)
    1852:	4798      	blx	r3
	SPI_LMX_PORT_init();
    1854:	4b06      	ldr	r3, [pc, #24]	; (1870 <SPI_LMX_init+0x30>)
    1856:	4798      	blx	r3
}
    1858:	46c0      	nop			; (mov r8, r8)
    185a:	46bd      	mov	sp, r7
    185c:	bd80      	pop	{r7, pc}
    185e:	46c0      	nop			; (mov r8, r8)
    1860:	00001819 	.word	0x00001819
    1864:	42000c00 	.word	0x42000c00
    1868:	200012f0 	.word	0x200012f0
    186c:	00001bdd 	.word	0x00001bdd
    1870:	000017a5 	.word	0x000017a5

00001874 <TARGET_IO_PORT_init>:

void TARGET_IO_PORT_init(void)
{
    1874:	b580      	push	{r7, lr}
    1876:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PA22, PINMUX_PA22C_SERCOM3_PAD0);
    1878:	4b06      	ldr	r3, [pc, #24]	; (1894 <TARGET_IO_PORT_init+0x20>)
    187a:	0019      	movs	r1, r3
    187c:	2016      	movs	r0, #22
    187e:	4b06      	ldr	r3, [pc, #24]	; (1898 <TARGET_IO_PORT_init+0x24>)
    1880:	4798      	blx	r3

	gpio_set_pin_function(PA23, PINMUX_PA23C_SERCOM3_PAD1);
    1882:	4b06      	ldr	r3, [pc, #24]	; (189c <TARGET_IO_PORT_init+0x28>)
    1884:	0019      	movs	r1, r3
    1886:	2017      	movs	r0, #23
    1888:	4b03      	ldr	r3, [pc, #12]	; (1898 <TARGET_IO_PORT_init+0x24>)
    188a:	4798      	blx	r3
}
    188c:	46c0      	nop			; (mov r8, r8)
    188e:	46bd      	mov	sp, r7
    1890:	bd80      	pop	{r7, pc}
    1892:	46c0      	nop			; (mov r8, r8)
    1894:	00160002 	.word	0x00160002
    1898:	000013f9 	.word	0x000013f9
    189c:	00170002 	.word	0x00170002

000018a0 <TARGET_IO_CLOCK_init>:

void TARGET_IO_CLOCK_init(void)
{
    18a0:	b580      	push	{r7, lr}
    18a2:	af00      	add	r7, sp, #0
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM3);
    18a4:	4b05      	ldr	r3, [pc, #20]	; (18bc <TARGET_IO_CLOCK_init+0x1c>)
    18a6:	0019      	movs	r1, r3
    18a8:	2003      	movs	r0, #3
    18aa:	4b05      	ldr	r3, [pc, #20]	; (18c0 <TARGET_IO_CLOCK_init+0x20>)
    18ac:	4798      	blx	r3
	_gclk_enable_channel(SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC);
    18ae:	2100      	movs	r1, #0
    18b0:	2017      	movs	r0, #23
    18b2:	4b04      	ldr	r3, [pc, #16]	; (18c4 <TARGET_IO_CLOCK_init+0x24>)
    18b4:	4798      	blx	r3
}
    18b6:	46c0      	nop			; (mov r8, r8)
    18b8:	46bd      	mov	sp, r7
    18ba:	bd80      	pop	{r7, pc}
    18bc:	42001400 	.word	0x42001400
    18c0:	000015f1 	.word	0x000015f1
    18c4:	000014b1 	.word	0x000014b1

000018c8 <TARGET_IO_init>:

void TARGET_IO_init(void)
{
    18c8:	b580      	push	{r7, lr}
    18ca:	af00      	add	r7, sp, #0
	TARGET_IO_CLOCK_init();
    18cc:	4b06      	ldr	r3, [pc, #24]	; (18e8 <TARGET_IO_init+0x20>)
    18ce:	4798      	blx	r3
	usart_sync_init(&TARGET_IO, SERCOM3, (void *)NULL);
    18d0:	4906      	ldr	r1, [pc, #24]	; (18ec <TARGET_IO_init+0x24>)
    18d2:	4b07      	ldr	r3, [pc, #28]	; (18f0 <TARGET_IO_init+0x28>)
    18d4:	2200      	movs	r2, #0
    18d6:	0018      	movs	r0, r3
    18d8:	4b06      	ldr	r3, [pc, #24]	; (18f4 <TARGET_IO_init+0x2c>)
    18da:	4798      	blx	r3
	TARGET_IO_PORT_init();
    18dc:	4b06      	ldr	r3, [pc, #24]	; (18f8 <TARGET_IO_init+0x30>)
    18de:	4798      	blx	r3
}
    18e0:	46c0      	nop			; (mov r8, r8)
    18e2:	46bd      	mov	sp, r7
    18e4:	bd80      	pop	{r7, pc}
    18e6:	46c0      	nop			; (mov r8, r8)
    18e8:	000018a1 	.word	0x000018a1
    18ec:	42001400 	.word	0x42001400
    18f0:	20001308 	.word	0x20001308
    18f4:	00001e25 	.word	0x00001e25
    18f8:	00001875 	.word	0x00001875

000018fc <delay_driver_init>:

void delay_driver_init(void)
{
    18fc:	b580      	push	{r7, lr}
    18fe:	af00      	add	r7, sp, #0
	delay_init(SysTick);
    1900:	4b03      	ldr	r3, [pc, #12]	; (1910 <delay_driver_init+0x14>)
    1902:	0018      	movs	r0, r3
    1904:	4b03      	ldr	r3, [pc, #12]	; (1914 <delay_driver_init+0x18>)
    1906:	4798      	blx	r3
}
    1908:	46c0      	nop			; (mov r8, r8)
    190a:	46bd      	mov	sp, r7
    190c:	bd80      	pop	{r7, pc}
    190e:	46c0      	nop			; (mov r8, r8)
    1910:	e000e010 	.word	0xe000e010
    1914:	00001ad5 	.word	0x00001ad5

00001918 <USB_DEVICE_INSTANCE_PORT_init>:

void USB_DEVICE_INSTANCE_PORT_init(void)
{
    1918:	b580      	push	{r7, lr}
    191a:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    191c:	2102      	movs	r1, #2
    191e:	2018      	movs	r0, #24
    1920:	4b11      	ldr	r3, [pc, #68]	; (1968 <USB_DEVICE_INSTANCE_PORT_init+0x50>)
    1922:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    1924:	2100      	movs	r1, #0
    1926:	2018      	movs	r0, #24
    1928:	4b10      	ldr	r3, [pc, #64]	; (196c <USB_DEVICE_INSTANCE_PORT_init+0x54>)
    192a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    192c:	2100      	movs	r1, #0
    192e:	2018      	movs	r0, #24
    1930:	4b0f      	ldr	r3, [pc, #60]	; (1970 <USB_DEVICE_INSTANCE_PORT_init+0x58>)
    1932:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    1934:	4b0f      	ldr	r3, [pc, #60]	; (1974 <USB_DEVICE_INSTANCE_PORT_init+0x5c>)
    1936:	0019      	movs	r1, r3
    1938:	2018      	movs	r0, #24
    193a:	4b0f      	ldr	r3, [pc, #60]	; (1978 <USB_DEVICE_INSTANCE_PORT_init+0x60>)
    193c:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_F"> F
	                      // <GPIO_PIN_FUNCTION_G"> G
	                      // <GPIO_PIN_FUNCTION_H"> H
	                      PINMUX_PA24G_USB_DM);

	gpio_set_pin_direction(PA25,
    193e:	2102      	movs	r1, #2
    1940:	2019      	movs	r0, #25
    1942:	4b09      	ldr	r3, [pc, #36]	; (1968 <USB_DEVICE_INSTANCE_PORT_init+0x50>)
    1944:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    1946:	2100      	movs	r1, #0
    1948:	2019      	movs	r0, #25
    194a:	4b08      	ldr	r3, [pc, #32]	; (196c <USB_DEVICE_INSTANCE_PORT_init+0x54>)
    194c:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    194e:	2100      	movs	r1, #0
    1950:	2019      	movs	r0, #25
    1952:	4b07      	ldr	r3, [pc, #28]	; (1970 <USB_DEVICE_INSTANCE_PORT_init+0x58>)
    1954:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    1956:	4b09      	ldr	r3, [pc, #36]	; (197c <USB_DEVICE_INSTANCE_PORT_init+0x64>)
    1958:	0019      	movs	r1, r3
    195a:	2019      	movs	r0, #25
    195c:	4b06      	ldr	r3, [pc, #24]	; (1978 <USB_DEVICE_INSTANCE_PORT_init+0x60>)
    195e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_E"> E
	                      // <GPIO_PIN_FUNCTION_F"> F
	                      // <GPIO_PIN_FUNCTION_G"> G
	                      // <GPIO_PIN_FUNCTION_H"> H
	                      PINMUX_PA25G_USB_DP);
}
    1960:	46c0      	nop			; (mov r8, r8)
    1962:	46bd      	mov	sp, r7
    1964:	bd80      	pop	{r7, pc}
    1966:	46c0      	nop			; (mov r8, r8)
    1968:	0000141d 	.word	0x0000141d
    196c:	0000145d 	.word	0x0000145d
    1970:	000013bd 	.word	0x000013bd
    1974:	00180006 	.word	0x00180006
    1978:	000013f9 	.word	0x000013f9
    197c:	00190006 	.word	0x00190006

00001980 <USB_DEVICE_INSTANCE_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void USB_DEVICE_INSTANCE_CLOCK_init(void)
{
    1980:	b580      	push	{r7, lr}
    1982:	af00      	add	r7, sp, #0

	_pm_enable_bus_clock(PM_BUS_APBB, USB);
    1984:	4b08      	ldr	r3, [pc, #32]	; (19a8 <USB_DEVICE_INSTANCE_CLOCK_init+0x28>)
    1986:	0019      	movs	r1, r3
    1988:	2002      	movs	r0, #2
    198a:	4b08      	ldr	r3, [pc, #32]	; (19ac <USB_DEVICE_INSTANCE_CLOCK_init+0x2c>)
    198c:	4798      	blx	r3
	_pm_enable_bus_clock(PM_BUS_AHB, USB);
    198e:	4b06      	ldr	r3, [pc, #24]	; (19a8 <USB_DEVICE_INSTANCE_CLOCK_init+0x28>)
    1990:	0019      	movs	r1, r3
    1992:	2000      	movs	r0, #0
    1994:	4b05      	ldr	r3, [pc, #20]	; (19ac <USB_DEVICE_INSTANCE_CLOCK_init+0x2c>)
    1996:	4798      	blx	r3
	_gclk_enable_channel(USB_GCLK_ID, CONF_GCLK_USB_SRC);
    1998:	2104      	movs	r1, #4
    199a:	2006      	movs	r0, #6
    199c:	4b04      	ldr	r3, [pc, #16]	; (19b0 <USB_DEVICE_INSTANCE_CLOCK_init+0x30>)
    199e:	4798      	blx	r3
}
    19a0:	46c0      	nop			; (mov r8, r8)
    19a2:	46bd      	mov	sp, r7
    19a4:	bd80      	pop	{r7, pc}
    19a6:	46c0      	nop			; (mov r8, r8)
    19a8:	41005000 	.word	0x41005000
    19ac:	000015f1 	.word	0x000015f1
    19b0:	000014b1 	.word	0x000014b1

000019b4 <USB_DEVICE_INSTANCE_init>:

void USB_DEVICE_INSTANCE_init(void)
{
    19b4:	b580      	push	{r7, lr}
    19b6:	af00      	add	r7, sp, #0
	USB_DEVICE_INSTANCE_CLOCK_init();
    19b8:	4b04      	ldr	r3, [pc, #16]	; (19cc <USB_DEVICE_INSTANCE_init+0x18>)
    19ba:	4798      	blx	r3
	usb_d_init();
    19bc:	4b04      	ldr	r3, [pc, #16]	; (19d0 <USB_DEVICE_INSTANCE_init+0x1c>)
    19be:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
    19c0:	4b04      	ldr	r3, [pc, #16]	; (19d4 <USB_DEVICE_INSTANCE_init+0x20>)
    19c2:	4798      	blx	r3
}
    19c4:	46c0      	nop			; (mov r8, r8)
    19c6:	46bd      	mov	sp, r7
    19c8:	bd80      	pop	{r7, pc}
    19ca:	46c0      	nop			; (mov r8, r8)
    19cc:	00001981 	.word	0x00001981
    19d0:	000024a9 	.word	0x000024a9
    19d4:	00001919 	.word	0x00001919

000019d8 <system_init>:

void system_init(void)
{
    19d8:	b580      	push	{r7, lr}
    19da:	af00      	add	r7, sp, #0
	init_mcu();
    19dc:	4b23      	ldr	r3, [pc, #140]	; (1a6c <system_init+0x94>)
    19de:	4798      	blx	r3

	// GPIO on PA07

	gpio_set_pin_level(CS_ADF,
    19e0:	2100      	movs	r1, #0
    19e2:	2007      	movs	r0, #7
    19e4:	4b22      	ldr	r3, [pc, #136]	; (1a70 <system_init+0x98>)
    19e6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CS_ADF, GPIO_DIRECTION_OUT);
    19e8:	2102      	movs	r1, #2
    19ea:	2007      	movs	r0, #7
    19ec:	4b21      	ldr	r3, [pc, #132]	; (1a74 <system_init+0x9c>)
    19ee:	4798      	blx	r3

	gpio_set_pin_function(CS_ADF, GPIO_PIN_FUNCTION_OFF);
    19f0:	2301      	movs	r3, #1
    19f2:	425b      	negs	r3, r3
    19f4:	0019      	movs	r1, r3
    19f6:	2007      	movs	r0, #7
    19f8:	4b1f      	ldr	r3, [pc, #124]	; (1a78 <system_init+0xa0>)
    19fa:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_LMX,
    19fc:	2101      	movs	r1, #1
    19fe:	2013      	movs	r0, #19
    1a00:	4b1b      	ldr	r3, [pc, #108]	; (1a70 <system_init+0x98>)
    1a02:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_LMX, GPIO_DIRECTION_OUT);
    1a04:	2102      	movs	r1, #2
    1a06:	2013      	movs	r0, #19
    1a08:	4b1a      	ldr	r3, [pc, #104]	; (1a74 <system_init+0x9c>)
    1a0a:	4798      	blx	r3

	gpio_set_pin_function(CS_LMX, GPIO_PIN_FUNCTION_OFF);
    1a0c:	2301      	movs	r3, #1
    1a0e:	425b      	negs	r3, r3
    1a10:	0019      	movs	r1, r3
    1a12:	2013      	movs	r0, #19
    1a14:	4b18      	ldr	r3, [pc, #96]	; (1a78 <system_init+0xa0>)
    1a16:	4798      	blx	r3

	// GPIO on PA30

	gpio_set_pin_level(PA30,
    1a18:	2101      	movs	r1, #1
    1a1a:	201e      	movs	r0, #30
    1a1c:	4b14      	ldr	r3, [pc, #80]	; (1a70 <system_init+0x98>)
    1a1e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(PA30, GPIO_DIRECTION_OUT);
    1a20:	2102      	movs	r1, #2
    1a22:	201e      	movs	r0, #30
    1a24:	4b13      	ldr	r3, [pc, #76]	; (1a74 <system_init+0x9c>)
    1a26:	4798      	blx	r3

	gpio_set_pin_function(PA30, GPIO_PIN_FUNCTION_OFF);
    1a28:	2301      	movs	r3, #1
    1a2a:	425b      	negs	r3, r3
    1a2c:	0019      	movs	r1, r3
    1a2e:	201e      	movs	r0, #30
    1a30:	4b11      	ldr	r3, [pc, #68]	; (1a78 <system_init+0xa0>)
    1a32:	4798      	blx	r3

	// GPIO on PB30

	gpio_set_pin_level(LED0,
    1a34:	2101      	movs	r1, #1
    1a36:	203e      	movs	r0, #62	; 0x3e
    1a38:	4b0d      	ldr	r3, [pc, #52]	; (1a70 <system_init+0x98>)
    1a3a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    1a3c:	2102      	movs	r1, #2
    1a3e:	203e      	movs	r0, #62	; 0x3e
    1a40:	4b0c      	ldr	r3, [pc, #48]	; (1a74 <system_init+0x9c>)
    1a42:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    1a44:	2301      	movs	r3, #1
    1a46:	425b      	negs	r3, r3
    1a48:	0019      	movs	r1, r3
    1a4a:	203e      	movs	r0, #62	; 0x3e
    1a4c:	4b0a      	ldr	r3, [pc, #40]	; (1a78 <system_init+0xa0>)
    1a4e:	4798      	blx	r3

	SPI_ADF_init();
    1a50:	4b0a      	ldr	r3, [pc, #40]	; (1a7c <system_init+0xa4>)
    1a52:	4798      	blx	r3

	SPI_LMX_init();
    1a54:	4b0a      	ldr	r3, [pc, #40]	; (1a80 <system_init+0xa8>)
    1a56:	4798      	blx	r3

	TARGET_IO_init();
    1a58:	4b0a      	ldr	r3, [pc, #40]	; (1a84 <system_init+0xac>)
    1a5a:	4798      	blx	r3

	delay_driver_init();
    1a5c:	4b0a      	ldr	r3, [pc, #40]	; (1a88 <system_init+0xb0>)
    1a5e:	4798      	blx	r3

	USB_DEVICE_INSTANCE_init();
    1a60:	4b0a      	ldr	r3, [pc, #40]	; (1a8c <system_init+0xb4>)
    1a62:	4798      	blx	r3
}
    1a64:	46c0      	nop			; (mov r8, r8)
    1a66:	46bd      	mov	sp, r7
    1a68:	bd80      	pop	{r7, pc}
    1a6a:	46c0      	nop			; (mov r8, r8)
    1a6c:	0000149d 	.word	0x0000149d
    1a70:	0000145d 	.word	0x0000145d
    1a74:	0000141d 	.word	0x0000141d
    1a78:	000013f9 	.word	0x000013f9
    1a7c:	00001771 	.word	0x00001771
    1a80:	00001841 	.word	0x00001841
    1a84:	000018c9 	.word	0x000018c9
    1a88:	000018fd 	.word	0x000018fd
    1a8c:	000019b5 	.word	0x000019b5

00001a90 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    1a90:	b580      	push	{r7, lr}
    1a92:	b084      	sub	sp, #16
    1a94:	af00      	add	r7, sp, #0
    1a96:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1a98:	f3ef 8310 	mrs	r3, PRIMASK
    1a9c:	60fb      	str	r3, [r7, #12]
  return(result);
    1a9e:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    1aa0:	687b      	ldr	r3, [r7, #4]
    1aa2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    1aa4:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    1aa6:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    1aaa:	46c0      	nop			; (mov r8, r8)
    1aac:	46bd      	mov	sp, r7
    1aae:	b004      	add	sp, #16
    1ab0:	bd80      	pop	{r7, pc}

00001ab2 <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    1ab2:	b580      	push	{r7, lr}
    1ab4:	b084      	sub	sp, #16
    1ab6:	af00      	add	r7, sp, #0
    1ab8:	6078      	str	r0, [r7, #4]
    1aba:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    1abe:	687b      	ldr	r3, [r7, #4]
    1ac0:	681b      	ldr	r3, [r3, #0]
    1ac2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    1ac4:	68fb      	ldr	r3, [r7, #12]
    1ac6:	f383 8810 	msr	PRIMASK, r3
}
    1aca:	46c0      	nop			; (mov r8, r8)
    1acc:	46bd      	mov	sp, r7
    1ace:	b004      	add	sp, #16
    1ad0:	bd80      	pop	{r7, pc}
	...

00001ad4 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    1ad4:	b580      	push	{r7, lr}
    1ad6:	b082      	sub	sp, #8
    1ad8:	af00      	add	r7, sp, #0
    1ada:	6078      	str	r0, [r7, #4]
	_delay_init(hardware = hw);
    1adc:	4b05      	ldr	r3, [pc, #20]	; (1af4 <delay_init+0x20>)
    1ade:	687a      	ldr	r2, [r7, #4]
    1ae0:	601a      	str	r2, [r3, #0]
    1ae2:	4b04      	ldr	r3, [pc, #16]	; (1af4 <delay_init+0x20>)
    1ae4:	681b      	ldr	r3, [r3, #0]
    1ae6:	0018      	movs	r0, r3
    1ae8:	4b03      	ldr	r3, [pc, #12]	; (1af8 <delay_init+0x24>)
    1aea:	4798      	blx	r3
}
    1aec:	46c0      	nop			; (mov r8, r8)
    1aee:	46bd      	mov	sp, r7
    1af0:	b002      	add	sp, #8
    1af2:	bd80      	pop	{r7, pc}
    1af4:	20000c84 	.word	0x20000c84
    1af8:	000044e5 	.word	0x000044e5

00001afc <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    1afc:	b590      	push	{r4, r7, lr}
    1afe:	b083      	sub	sp, #12
    1b00:	af00      	add	r7, sp, #0
    1b02:	0002      	movs	r2, r0
    1b04:	1dbb      	adds	r3, r7, #6
    1b06:	801a      	strh	r2, [r3, #0]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    1b08:	4b07      	ldr	r3, [pc, #28]	; (1b28 <delay_ms+0x2c>)
    1b0a:	681c      	ldr	r4, [r3, #0]
    1b0c:	1dbb      	adds	r3, r7, #6
    1b0e:	881b      	ldrh	r3, [r3, #0]
    1b10:	0018      	movs	r0, r3
    1b12:	4b06      	ldr	r3, [pc, #24]	; (1b2c <delay_ms+0x30>)
    1b14:	4798      	blx	r3
    1b16:	0003      	movs	r3, r0
    1b18:	0019      	movs	r1, r3
    1b1a:	0020      	movs	r0, r4
    1b1c:	4b04      	ldr	r3, [pc, #16]	; (1b30 <delay_ms+0x34>)
    1b1e:	4798      	blx	r3
}
    1b20:	46c0      	nop			; (mov r8, r8)
    1b22:	46bd      	mov	sp, r7
    1b24:	b003      	add	sp, #12
    1b26:	bd90      	pop	{r4, r7, pc}
    1b28:	20000c84 	.word	0x20000c84
    1b2c:	00002cfd 	.word	0x00002cfd
    1b30:	00004501 	.word	0x00004501

00001b34 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    1b34:	b580      	push	{r7, lr}
    1b36:	b084      	sub	sp, #16
    1b38:	af00      	add	r7, sp, #0
    1b3a:	60f8      	str	r0, [r7, #12]
    1b3c:	60b9      	str	r1, [r7, #8]
    1b3e:	1dbb      	adds	r3, r7, #6
    1b40:	801a      	strh	r2, [r3, #0]
	ASSERT(io_descr && buf);
    1b42:	68fb      	ldr	r3, [r7, #12]
    1b44:	2b00      	cmp	r3, #0
    1b46:	d004      	beq.n	1b52 <io_write+0x1e>
    1b48:	68bb      	ldr	r3, [r7, #8]
    1b4a:	2b00      	cmp	r3, #0
    1b4c:	d001      	beq.n	1b52 <io_write+0x1e>
    1b4e:	2301      	movs	r3, #1
    1b50:	e000      	b.n	1b54 <io_write+0x20>
    1b52:	2300      	movs	r3, #0
    1b54:	1c1a      	adds	r2, r3, #0
    1b56:	2301      	movs	r3, #1
    1b58:	4013      	ands	r3, r2
    1b5a:	b2db      	uxtb	r3, r3
    1b5c:	4908      	ldr	r1, [pc, #32]	; (1b80 <io_write+0x4c>)
    1b5e:	2234      	movs	r2, #52	; 0x34
    1b60:	0018      	movs	r0, r3
    1b62:	4b08      	ldr	r3, [pc, #32]	; (1b84 <io_write+0x50>)
    1b64:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    1b66:	68fb      	ldr	r3, [r7, #12]
    1b68:	681b      	ldr	r3, [r3, #0]
    1b6a:	1dba      	adds	r2, r7, #6
    1b6c:	8812      	ldrh	r2, [r2, #0]
    1b6e:	68b9      	ldr	r1, [r7, #8]
    1b70:	68f8      	ldr	r0, [r7, #12]
    1b72:	4798      	blx	r3
    1b74:	0003      	movs	r3, r0
}
    1b76:	0018      	movs	r0, r3
    1b78:	46bd      	mov	sp, r7
    1b7a:	b004      	add	sp, #16
    1b7c:	bd80      	pop	{r7, pc}
    1b7e:	46c0      	nop			; (mov r8, r8)
    1b80:	00010ce4 	.word	0x00010ce4
    1b84:	00002ae1 	.word	0x00002ae1

00001b88 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    1b88:	b580      	push	{r7, lr}
    1b8a:	b084      	sub	sp, #16
    1b8c:	af00      	add	r7, sp, #0
    1b8e:	60f8      	str	r0, [r7, #12]
    1b90:	60b9      	str	r1, [r7, #8]
    1b92:	1dbb      	adds	r3, r7, #6
    1b94:	801a      	strh	r2, [r3, #0]
	ASSERT(io_descr && buf);
    1b96:	68fb      	ldr	r3, [r7, #12]
    1b98:	2b00      	cmp	r3, #0
    1b9a:	d004      	beq.n	1ba6 <io_read+0x1e>
    1b9c:	68bb      	ldr	r3, [r7, #8]
    1b9e:	2b00      	cmp	r3, #0
    1ba0:	d001      	beq.n	1ba6 <io_read+0x1e>
    1ba2:	2301      	movs	r3, #1
    1ba4:	e000      	b.n	1ba8 <io_read+0x20>
    1ba6:	2300      	movs	r3, #0
    1ba8:	1c1a      	adds	r2, r3, #0
    1baa:	2301      	movs	r3, #1
    1bac:	4013      	ands	r3, r2
    1bae:	b2db      	uxtb	r3, r3
    1bb0:	4908      	ldr	r1, [pc, #32]	; (1bd4 <io_read+0x4c>)
    1bb2:	223d      	movs	r2, #61	; 0x3d
    1bb4:	0018      	movs	r0, r3
    1bb6:	4b08      	ldr	r3, [pc, #32]	; (1bd8 <io_read+0x50>)
    1bb8:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    1bba:	68fb      	ldr	r3, [r7, #12]
    1bbc:	685b      	ldr	r3, [r3, #4]
    1bbe:	1dba      	adds	r2, r7, #6
    1bc0:	8812      	ldrh	r2, [r2, #0]
    1bc2:	68b9      	ldr	r1, [r7, #8]
    1bc4:	68f8      	ldr	r0, [r7, #12]
    1bc6:	4798      	blx	r3
    1bc8:	0003      	movs	r3, r0
}
    1bca:	0018      	movs	r0, r3
    1bcc:	46bd      	mov	sp, r7
    1bce:	b004      	add	sp, #16
    1bd0:	bd80      	pop	{r7, pc}
    1bd2:	46c0      	nop			; (mov r8, r8)
    1bd4:	00010ce4 	.word	0x00010ce4
    1bd8:	00002ae1 	.word	0x00002ae1

00001bdc <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    1bdc:	b580      	push	{r7, lr}
    1bde:	b084      	sub	sp, #16
    1be0:	af00      	add	r7, sp, #0
    1be2:	6078      	str	r0, [r7, #4]
    1be4:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    1be6:	2300      	movs	r3, #0
    1be8:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    1bea:	687b      	ldr	r3, [r7, #4]
    1bec:	2b00      	cmp	r3, #0
    1bee:	d004      	beq.n	1bfa <spi_m_sync_init+0x1e>
    1bf0:	683b      	ldr	r3, [r7, #0]
    1bf2:	2b00      	cmp	r3, #0
    1bf4:	d001      	beq.n	1bfa <spi_m_sync_init+0x1e>
    1bf6:	2301      	movs	r3, #1
    1bf8:	e000      	b.n	1bfc <spi_m_sync_init+0x20>
    1bfa:	2300      	movs	r3, #0
    1bfc:	1c1a      	adds	r2, r3, #0
    1bfe:	2301      	movs	r3, #1
    1c00:	4013      	ands	r3, r2
    1c02:	b2db      	uxtb	r3, r3
    1c04:	4911      	ldr	r1, [pc, #68]	; (1c4c <spi_m_sync_init+0x70>)
    1c06:	2240      	movs	r2, #64	; 0x40
    1c08:	0018      	movs	r0, r3
    1c0a:	4b11      	ldr	r3, [pc, #68]	; (1c50 <spi_m_sync_init+0x74>)
    1c0c:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    1c0e:	687b      	ldr	r3, [r7, #4]
    1c10:	683a      	ldr	r2, [r7, #0]
    1c12:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    1c14:	687b      	ldr	r3, [r7, #4]
    1c16:	3304      	adds	r3, #4
    1c18:	683a      	ldr	r2, [r7, #0]
    1c1a:	0011      	movs	r1, r2
    1c1c:	0018      	movs	r0, r3
    1c1e:	4b0d      	ldr	r3, [pc, #52]	; (1c54 <spi_m_sync_init+0x78>)
    1c20:	4798      	blx	r3
    1c22:	0003      	movs	r3, r0
    1c24:	60fb      	str	r3, [r7, #12]

	if (rc < 0) {
    1c26:	68fb      	ldr	r3, [r7, #12]
    1c28:	2b00      	cmp	r3, #0
    1c2a:	da01      	bge.n	1c30 <spi_m_sync_init+0x54>
		return rc;
    1c2c:	68fb      	ldr	r3, [r7, #12]
    1c2e:	e009      	b.n	1c44 <spi_m_sync_init+0x68>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    1c30:	687b      	ldr	r3, [r7, #4]
    1c32:	4a09      	ldr	r2, [pc, #36]	; (1c58 <spi_m_sync_init+0x7c>)
    1c34:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    1c36:	687b      	ldr	r3, [r7, #4]
    1c38:	4a08      	ldr	r2, [pc, #32]	; (1c5c <spi_m_sync_init+0x80>)
    1c3a:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    1c3c:	687b      	ldr	r3, [r7, #4]
    1c3e:	4a08      	ldr	r2, [pc, #32]	; (1c60 <spi_m_sync_init+0x84>)
    1c40:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    1c42:	2300      	movs	r3, #0
}
    1c44:	0018      	movs	r0, r3
    1c46:	46bd      	mov	sp, r7
    1c48:	b004      	add	sp, #16
    1c4a:	bd80      	pop	{r7, pc}
    1c4c:	00010cf8 	.word	0x00010cf8
    1c50:	00002ae1 	.word	0x00002ae1
    1c54:	00003aa5 	.word	0x00003aa5
    1c58:	ffff8000 	.word	0xffff8000
    1c5c:	00001c9d 	.word	0x00001c9d
    1c60:	00001d01 	.word	0x00001d01

00001c64 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
    1c64:	b580      	push	{r7, lr}
    1c66:	b082      	sub	sp, #8
    1c68:	af00      	add	r7, sp, #0
    1c6a:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    1c6c:	687b      	ldr	r3, [r7, #4]
    1c6e:	1e5a      	subs	r2, r3, #1
    1c70:	4193      	sbcs	r3, r2
    1c72:	b2db      	uxtb	r3, r3
    1c74:	4906      	ldr	r1, [pc, #24]	; (1c90 <spi_m_sync_enable+0x2c>)
    1c76:	2257      	movs	r2, #87	; 0x57
    1c78:	0018      	movs	r0, r3
    1c7a:	4b06      	ldr	r3, [pc, #24]	; (1c94 <spi_m_sync_enable+0x30>)
    1c7c:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
    1c7e:	687b      	ldr	r3, [r7, #4]
    1c80:	3304      	adds	r3, #4
    1c82:	0018      	movs	r0, r3
    1c84:	4b04      	ldr	r3, [pc, #16]	; (1c98 <spi_m_sync_enable+0x34>)
    1c86:	4798      	blx	r3
}
    1c88:	46c0      	nop			; (mov r8, r8)
    1c8a:	46bd      	mov	sp, r7
    1c8c:	b002      	add	sp, #8
    1c8e:	bd80      	pop	{r7, pc}
    1c90:	00010cf8 	.word	0x00010cf8
    1c94:	00002ae1 	.word	0x00002ae1
    1c98:	00003c09 	.word	0x00003c09

00001c9c <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    1c9c:	b580      	push	{r7, lr}
    1c9e:	b088      	sub	sp, #32
    1ca0:	af00      	add	r7, sp, #0
    1ca2:	60f8      	str	r0, [r7, #12]
    1ca4:	60b9      	str	r1, [r7, #8]
    1ca6:	1dbb      	adds	r3, r7, #6
    1ca8:	801a      	strh	r2, [r3, #0]
	ASSERT(io);
    1caa:	68fb      	ldr	r3, [r7, #12]
    1cac:	1e5a      	subs	r2, r3, #1
    1cae:	4193      	sbcs	r3, r2
    1cb0:	b2db      	uxtb	r3, r3
    1cb2:	4910      	ldr	r1, [pc, #64]	; (1cf4 <_spi_m_sync_io_read+0x58>)
    1cb4:	2287      	movs	r2, #135	; 0x87
    1cb6:	0018      	movs	r0, r3
    1cb8:	4b0f      	ldr	r3, [pc, #60]	; (1cf8 <_spi_m_sync_io_read+0x5c>)
    1cba:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    1cbc:	68fb      	ldr	r3, [r7, #12]
    1cbe:	3b0c      	subs	r3, #12
    1cc0:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    1cc2:	2310      	movs	r3, #16
    1cc4:	18fb      	adds	r3, r7, r3
    1cc6:	68ba      	ldr	r2, [r7, #8]
    1cc8:	605a      	str	r2, [r3, #4]
	xfer.txbuf = 0;
    1cca:	2310      	movs	r3, #16
    1ccc:	18fb      	adds	r3, r7, r3
    1cce:	2200      	movs	r2, #0
    1cd0:	601a      	str	r2, [r3, #0]
	xfer.size  = length;
    1cd2:	1dbb      	adds	r3, r7, #6
    1cd4:	881a      	ldrh	r2, [r3, #0]
    1cd6:	2310      	movs	r3, #16
    1cd8:	18fb      	adds	r3, r7, r3
    1cda:	609a      	str	r2, [r3, #8]

	return spi_m_sync_transfer(spi, &xfer);
    1cdc:	2310      	movs	r3, #16
    1cde:	18fa      	adds	r2, r7, r3
    1ce0:	69fb      	ldr	r3, [r7, #28]
    1ce2:	0011      	movs	r1, r2
    1ce4:	0018      	movs	r0, r3
    1ce6:	4b05      	ldr	r3, [pc, #20]	; (1cfc <_spi_m_sync_io_read+0x60>)
    1ce8:	4798      	blx	r3
    1cea:	0003      	movs	r3, r0
}
    1cec:	0018      	movs	r0, r3
    1cee:	46bd      	mov	sp, r7
    1cf0:	b008      	add	sp, #32
    1cf2:	bd80      	pop	{r7, pc}
    1cf4:	00010cf8 	.word	0x00010cf8
    1cf8:	00002ae1 	.word	0x00002ae1
    1cfc:	00001d65 	.word	0x00001d65

00001d00 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    1d00:	b580      	push	{r7, lr}
    1d02:	b088      	sub	sp, #32
    1d04:	af00      	add	r7, sp, #0
    1d06:	60f8      	str	r0, [r7, #12]
    1d08:	60b9      	str	r1, [r7, #8]
    1d0a:	1dbb      	adds	r3, r7, #6
    1d0c:	801a      	strh	r2, [r3, #0]
	ASSERT(io);
    1d0e:	68fb      	ldr	r3, [r7, #12]
    1d10:	1e5a      	subs	r2, r3, #1
    1d12:	4193      	sbcs	r3, r2
    1d14:	b2db      	uxtb	r3, r3
    1d16:	4910      	ldr	r1, [pc, #64]	; (1d58 <_spi_m_sync_io_write+0x58>)
    1d18:	22a3      	movs	r2, #163	; 0xa3
    1d1a:	0018      	movs	r0, r3
    1d1c:	4b0f      	ldr	r3, [pc, #60]	; (1d5c <_spi_m_sync_io_write+0x5c>)
    1d1e:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    1d20:	68fb      	ldr	r3, [r7, #12]
    1d22:	3b0c      	subs	r3, #12
    1d24:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    1d26:	2310      	movs	r3, #16
    1d28:	18fb      	adds	r3, r7, r3
    1d2a:	2200      	movs	r2, #0
    1d2c:	605a      	str	r2, [r3, #4]
	xfer.txbuf = (uint8_t *)buf;
    1d2e:	2310      	movs	r3, #16
    1d30:	18fb      	adds	r3, r7, r3
    1d32:	68ba      	ldr	r2, [r7, #8]
    1d34:	601a      	str	r2, [r3, #0]
	xfer.size  = length;
    1d36:	1dbb      	adds	r3, r7, #6
    1d38:	881a      	ldrh	r2, [r3, #0]
    1d3a:	2310      	movs	r3, #16
    1d3c:	18fb      	adds	r3, r7, r3
    1d3e:	609a      	str	r2, [r3, #8]

	return spi_m_sync_transfer(spi, &xfer);
    1d40:	2310      	movs	r3, #16
    1d42:	18fa      	adds	r2, r7, r3
    1d44:	69fb      	ldr	r3, [r7, #28]
    1d46:	0011      	movs	r1, r2
    1d48:	0018      	movs	r0, r3
    1d4a:	4b05      	ldr	r3, [pc, #20]	; (1d60 <_spi_m_sync_io_write+0x60>)
    1d4c:	4798      	blx	r3
    1d4e:	0003      	movs	r3, r0
}
    1d50:	0018      	movs	r0, r3
    1d52:	46bd      	mov	sp, r7
    1d54:	b008      	add	sp, #32
    1d56:	bd80      	pop	{r7, pc}
    1d58:	00010cf8 	.word	0x00010cf8
    1d5c:	00002ae1 	.word	0x00002ae1
    1d60:	00001d65 	.word	0x00001d65

00001d64 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    1d64:	b580      	push	{r7, lr}
    1d66:	b086      	sub	sp, #24
    1d68:	af00      	add	r7, sp, #0
    1d6a:	6078      	str	r0, [r7, #4]
    1d6c:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    1d6e:	687b      	ldr	r3, [r7, #4]
    1d70:	2b00      	cmp	r3, #0
    1d72:	d004      	beq.n	1d7e <spi_m_sync_transfer+0x1a>
    1d74:	683b      	ldr	r3, [r7, #0]
    1d76:	2b00      	cmp	r3, #0
    1d78:	d001      	beq.n	1d7e <spi_m_sync_transfer+0x1a>
    1d7a:	2301      	movs	r3, #1
    1d7c:	e000      	b.n	1d80 <spi_m_sync_transfer+0x1c>
    1d7e:	2300      	movs	r3, #0
    1d80:	1c1a      	adds	r2, r3, #0
    1d82:	2301      	movs	r3, #1
    1d84:	4013      	ands	r3, r2
    1d86:	b2db      	uxtb	r3, r3
    1d88:	4910      	ldr	r1, [pc, #64]	; (1dcc <spi_m_sync_transfer+0x68>)
    1d8a:	22b3      	movs	r2, #179	; 0xb3
    1d8c:	0018      	movs	r0, r3
    1d8e:	4b10      	ldr	r3, [pc, #64]	; (1dd0 <spi_m_sync_transfer+0x6c>)
    1d90:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    1d92:	683b      	ldr	r3, [r7, #0]
    1d94:	681a      	ldr	r2, [r3, #0]
    1d96:	230c      	movs	r3, #12
    1d98:	18fb      	adds	r3, r7, r3
    1d9a:	601a      	str	r2, [r3, #0]
	msg.rxbuf = p_xfer->rxbuf;
    1d9c:	683b      	ldr	r3, [r7, #0]
    1d9e:	685a      	ldr	r2, [r3, #4]
    1da0:	230c      	movs	r3, #12
    1da2:	18fb      	adds	r3, r7, r3
    1da4:	605a      	str	r2, [r3, #4]
	msg.size  = p_xfer->size;
    1da6:	683b      	ldr	r3, [r7, #0]
    1da8:	689a      	ldr	r2, [r3, #8]
    1daa:	230c      	movs	r3, #12
    1dac:	18fb      	adds	r3, r7, r3
    1dae:	609a      	str	r2, [r3, #8]
	return _spi_m_sync_trans(&spi->dev, &msg);
    1db0:	687b      	ldr	r3, [r7, #4]
    1db2:	3304      	adds	r3, #4
    1db4:	220c      	movs	r2, #12
    1db6:	18ba      	adds	r2, r7, r2
    1db8:	0011      	movs	r1, r2
    1dba:	0018      	movs	r0, r3
    1dbc:	4b05      	ldr	r3, [pc, #20]	; (1dd4 <spi_m_sync_transfer+0x70>)
    1dbe:	4798      	blx	r3
    1dc0:	0003      	movs	r3, r0
}
    1dc2:	0018      	movs	r0, r3
    1dc4:	46bd      	mov	sp, r7
    1dc6:	b006      	add	sp, #24
    1dc8:	bd80      	pop	{r7, pc}
    1dca:	46c0      	nop			; (mov r8, r8)
    1dcc:	00010cf8 	.word	0x00010cf8
    1dd0:	00002ae1 	.word	0x00002ae1
    1dd4:	00003dc1 	.word	0x00003dc1

00001dd8 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
    1dd8:	b580      	push	{r7, lr}
    1dda:	b082      	sub	sp, #8
    1ddc:	af00      	add	r7, sp, #0
    1dde:	6078      	str	r0, [r7, #4]
    1de0:	6039      	str	r1, [r7, #0]
	ASSERT(spi && io);
    1de2:	687b      	ldr	r3, [r7, #4]
    1de4:	2b00      	cmp	r3, #0
    1de6:	d004      	beq.n	1df2 <spi_m_sync_get_io_descriptor+0x1a>
    1de8:	683b      	ldr	r3, [r7, #0]
    1dea:	2b00      	cmp	r3, #0
    1dec:	d001      	beq.n	1df2 <spi_m_sync_get_io_descriptor+0x1a>
    1dee:	2301      	movs	r3, #1
    1df0:	e000      	b.n	1df4 <spi_m_sync_get_io_descriptor+0x1c>
    1df2:	2300      	movs	r3, #0
    1df4:	1c1a      	adds	r2, r3, #0
    1df6:	2301      	movs	r3, #1
    1df8:	4013      	ands	r3, r2
    1dfa:	b2db      	uxtb	r3, r3
    1dfc:	4907      	ldr	r1, [pc, #28]	; (1e1c <spi_m_sync_get_io_descriptor+0x44>)
    1dfe:	22bd      	movs	r2, #189	; 0xbd
    1e00:	0018      	movs	r0, r3
    1e02:	4b07      	ldr	r3, [pc, #28]	; (1e20 <spi_m_sync_get_io_descriptor+0x48>)
    1e04:	4798      	blx	r3
	*io = &spi->io;
    1e06:	687b      	ldr	r3, [r7, #4]
    1e08:	330c      	adds	r3, #12
    1e0a:	001a      	movs	r2, r3
    1e0c:	683b      	ldr	r3, [r7, #0]
    1e0e:	601a      	str	r2, [r3, #0]
	return 0;
    1e10:	2300      	movs	r3, #0
}
    1e12:	0018      	movs	r0, r3
    1e14:	46bd      	mov	sp, r7
    1e16:	b002      	add	sp, #8
    1e18:	bd80      	pop	{r7, pc}
    1e1a:	46c0      	nop			; (mov r8, r8)
    1e1c:	00010cf8 	.word	0x00010cf8
    1e20:	00002ae1 	.word	0x00002ae1

00001e24 <usart_sync_init>:

/**
 * \brief Initialize usart interface
 */
int32_t usart_sync_init(struct usart_sync_descriptor *const descr, void *const hw, void *const func)
{
    1e24:	b580      	push	{r7, lr}
    1e26:	b086      	sub	sp, #24
    1e28:	af00      	add	r7, sp, #0
    1e2a:	60f8      	str	r0, [r7, #12]
    1e2c:	60b9      	str	r1, [r7, #8]
    1e2e:	607a      	str	r2, [r7, #4]
	int32_t init_status;
	ASSERT(descr && hw);
    1e30:	68fb      	ldr	r3, [r7, #12]
    1e32:	2b00      	cmp	r3, #0
    1e34:	d004      	beq.n	1e40 <usart_sync_init+0x1c>
    1e36:	68bb      	ldr	r3, [r7, #8]
    1e38:	2b00      	cmp	r3, #0
    1e3a:	d001      	beq.n	1e40 <usart_sync_init+0x1c>
    1e3c:	2301      	movs	r3, #1
    1e3e:	e000      	b.n	1e42 <usart_sync_init+0x1e>
    1e40:	2300      	movs	r3, #0
    1e42:	1c1a      	adds	r2, r3, #0
    1e44:	2301      	movs	r3, #1
    1e46:	4013      	ands	r3, r2
    1e48:	b2db      	uxtb	r3, r3
    1e4a:	490f      	ldr	r1, [pc, #60]	; (1e88 <usart_sync_init+0x64>)
    1e4c:	2234      	movs	r2, #52	; 0x34
    1e4e:	0018      	movs	r0, r3
    1e50:	4b0e      	ldr	r3, [pc, #56]	; (1e8c <usart_sync_init+0x68>)
    1e52:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
    1e54:	68fb      	ldr	r3, [r7, #12]
    1e56:	3308      	adds	r3, #8
    1e58:	68ba      	ldr	r2, [r7, #8]
    1e5a:	0011      	movs	r1, r2
    1e5c:	0018      	movs	r0, r3
    1e5e:	4b0c      	ldr	r3, [pc, #48]	; (1e90 <usart_sync_init+0x6c>)
    1e60:	4798      	blx	r3
    1e62:	0003      	movs	r3, r0
    1e64:	617b      	str	r3, [r7, #20]
	if (init_status) {
    1e66:	697b      	ldr	r3, [r7, #20]
    1e68:	2b00      	cmp	r3, #0
    1e6a:	d001      	beq.n	1e70 <usart_sync_init+0x4c>
		return init_status;
    1e6c:	697b      	ldr	r3, [r7, #20]
    1e6e:	e006      	b.n	1e7e <usart_sync_init+0x5a>
	}

	descr->io.read  = usart_sync_read;
    1e70:	68fb      	ldr	r3, [r7, #12]
    1e72:	4a08      	ldr	r2, [pc, #32]	; (1e94 <usart_sync_init+0x70>)
    1e74:	605a      	str	r2, [r3, #4]
	descr->io.write = usart_sync_write;
    1e76:	68fb      	ldr	r3, [r7, #12]
    1e78:	4a07      	ldr	r2, [pc, #28]	; (1e98 <usart_sync_init+0x74>)
    1e7a:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    1e7c:	2300      	movs	r3, #0
}
    1e7e:	0018      	movs	r0, r3
    1e80:	46bd      	mov	sp, r7
    1e82:	b006      	add	sp, #24
    1e84:	bd80      	pop	{r7, pc}
    1e86:	46c0      	nop			; (mov r8, r8)
    1e88:	00010d14 	.word	0x00010d14
    1e8c:	00002ae1 	.word	0x00002ae1
    1e90:	0000347d 	.word	0x0000347d
    1e94:	00001fad 	.word	0x00001fad
    1e98:	00001ed9 	.word	0x00001ed9

00001e9c <usart_sync_enable>:

/**
 * \brief Enable usart interface
 */
int32_t usart_sync_enable(struct usart_sync_descriptor *const descr)
{
    1e9c:	b580      	push	{r7, lr}
    1e9e:	b082      	sub	sp, #8
    1ea0:	af00      	add	r7, sp, #0
    1ea2:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    1ea4:	687b      	ldr	r3, [r7, #4]
    1ea6:	1e5a      	subs	r2, r3, #1
    1ea8:	4193      	sbcs	r3, r2
    1eaa:	b2db      	uxtb	r3, r3
    1eac:	4907      	ldr	r1, [pc, #28]	; (1ecc <usart_sync_enable+0x30>)
    1eae:	2253      	movs	r2, #83	; 0x53
    1eb0:	0018      	movs	r0, r3
    1eb2:	4b07      	ldr	r3, [pc, #28]	; (1ed0 <usart_sync_enable+0x34>)
    1eb4:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
    1eb6:	687b      	ldr	r3, [r7, #4]
    1eb8:	3308      	adds	r3, #8
    1eba:	0018      	movs	r0, r3
    1ebc:	4b05      	ldr	r3, [pc, #20]	; (1ed4 <usart_sync_enable+0x38>)
    1ebe:	4798      	blx	r3

	return ERR_NONE;
    1ec0:	2300      	movs	r3, #0
}
    1ec2:	0018      	movs	r0, r3
    1ec4:	46bd      	mov	sp, r7
    1ec6:	b002      	add	sp, #8
    1ec8:	bd80      	pop	{r7, pc}
    1eca:	46c0      	nop			; (mov r8, r8)
    1ecc:	00010d14 	.word	0x00010d14
    1ed0:	00002ae1 	.word	0x00002ae1
    1ed4:	000034bd 	.word	0x000034bd

00001ed8 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    1ed8:	b580      	push	{r7, lr}
    1eda:	b086      	sub	sp, #24
    1edc:	af00      	add	r7, sp, #0
    1ede:	60f8      	str	r0, [r7, #12]
    1ee0:	60b9      	str	r1, [r7, #8]
    1ee2:	1dbb      	adds	r3, r7, #6
    1ee4:	801a      	strh	r2, [r3, #0]
	uint32_t                      offset = 0;
    1ee6:	2300      	movs	r3, #0
    1ee8:	617b      	str	r3, [r7, #20]
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);
    1eea:	68fb      	ldr	r3, [r7, #12]
    1eec:	613b      	str	r3, [r7, #16]

	ASSERT(io_descr && buf && length);
    1eee:	68fb      	ldr	r3, [r7, #12]
    1ef0:	2b00      	cmp	r3, #0
    1ef2:	d008      	beq.n	1f06 <usart_sync_write+0x2e>
    1ef4:	68bb      	ldr	r3, [r7, #8]
    1ef6:	2b00      	cmp	r3, #0
    1ef8:	d005      	beq.n	1f06 <usart_sync_write+0x2e>
    1efa:	1dbb      	adds	r3, r7, #6
    1efc:	881b      	ldrh	r3, [r3, #0]
    1efe:	2b00      	cmp	r3, #0
    1f00:	d001      	beq.n	1f06 <usart_sync_write+0x2e>
    1f02:	2301      	movs	r3, #1
    1f04:	e000      	b.n	1f08 <usart_sync_write+0x30>
    1f06:	2300      	movs	r3, #0
    1f08:	1c1a      	adds	r2, r3, #0
    1f0a:	2301      	movs	r3, #1
    1f0c:	4013      	ands	r3, r2
    1f0e:	b2db      	uxtb	r3, r3
    1f10:	4921      	ldr	r1, [pc, #132]	; (1f98 <usart_sync_write+0xc0>)
    1f12:	22f1      	movs	r2, #241	; 0xf1
    1f14:	0018      	movs	r0, r3
    1f16:	4b21      	ldr	r3, [pc, #132]	; (1f9c <usart_sync_write+0xc4>)
    1f18:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
    1f1a:	46c0      	nop			; (mov r8, r8)
    1f1c:	693b      	ldr	r3, [r7, #16]
    1f1e:	3308      	adds	r3, #8
    1f20:	0018      	movs	r0, r3
    1f22:	4b1f      	ldr	r3, [pc, #124]	; (1fa0 <usart_sync_write+0xc8>)
    1f24:	4798      	blx	r3
    1f26:	0003      	movs	r3, r0
    1f28:	001a      	movs	r2, r3
    1f2a:	2301      	movs	r3, #1
    1f2c:	4053      	eors	r3, r2
    1f2e:	b2db      	uxtb	r3, r3
    1f30:	2b00      	cmp	r3, #0
    1f32:	d1f3      	bne.n	1f1c <usart_sync_write+0x44>
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
    1f34:	693b      	ldr	r3, [r7, #16]
    1f36:	3308      	adds	r3, #8
    1f38:	0018      	movs	r0, r3
    1f3a:	68ba      	ldr	r2, [r7, #8]
    1f3c:	697b      	ldr	r3, [r7, #20]
    1f3e:	18d3      	adds	r3, r2, r3
    1f40:	781b      	ldrb	r3, [r3, #0]
    1f42:	0019      	movs	r1, r3
    1f44:	4b17      	ldr	r3, [pc, #92]	; (1fa4 <usart_sync_write+0xcc>)
    1f46:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
    1f48:	46c0      	nop			; (mov r8, r8)
    1f4a:	693b      	ldr	r3, [r7, #16]
    1f4c:	3308      	adds	r3, #8
    1f4e:	0018      	movs	r0, r3
    1f50:	4b13      	ldr	r3, [pc, #76]	; (1fa0 <usart_sync_write+0xc8>)
    1f52:	4798      	blx	r3
    1f54:	0003      	movs	r3, r0
    1f56:	001a      	movs	r2, r3
    1f58:	2301      	movs	r3, #1
    1f5a:	4053      	eors	r3, r2
    1f5c:	b2db      	uxtb	r3, r3
    1f5e:	2b00      	cmp	r3, #0
    1f60:	d1f3      	bne.n	1f4a <usart_sync_write+0x72>
			;
	} while (++offset < length);
    1f62:	697b      	ldr	r3, [r7, #20]
    1f64:	3301      	adds	r3, #1
    1f66:	617b      	str	r3, [r7, #20]
    1f68:	1dbb      	adds	r3, r7, #6
    1f6a:	881b      	ldrh	r3, [r3, #0]
    1f6c:	697a      	ldr	r2, [r7, #20]
    1f6e:	429a      	cmp	r2, r3
    1f70:	d3e0      	bcc.n	1f34 <usart_sync_write+0x5c>
	while (!_usart_sync_is_transmit_done(&descr->device))
    1f72:	46c0      	nop			; (mov r8, r8)
    1f74:	693b      	ldr	r3, [r7, #16]
    1f76:	3308      	adds	r3, #8
    1f78:	0018      	movs	r0, r3
    1f7a:	4b0b      	ldr	r3, [pc, #44]	; (1fa8 <usart_sync_write+0xd0>)
    1f7c:	4798      	blx	r3
    1f7e:	0003      	movs	r3, r0
    1f80:	001a      	movs	r2, r3
    1f82:	2301      	movs	r3, #1
    1f84:	4053      	eors	r3, r2
    1f86:	b2db      	uxtb	r3, r3
    1f88:	2b00      	cmp	r3, #0
    1f8a:	d1f3      	bne.n	1f74 <usart_sync_write+0x9c>
		;
	return (int32_t)offset;
    1f8c:	697b      	ldr	r3, [r7, #20]
}
    1f8e:	0018      	movs	r0, r3
    1f90:	46bd      	mov	sp, r7
    1f92:	b006      	add	sp, #24
    1f94:	bd80      	pop	{r7, pc}
    1f96:	46c0      	nop			; (mov r8, r8)
    1f98:	00010d14 	.word	0x00010d14
    1f9c:	00002ae1 	.word	0x00002ae1
    1fa0:	0000352d 	.word	0x0000352d
    1fa4:	000034dd 	.word	0x000034dd
    1fa8:	0000354d 	.word	0x0000354d

00001fac <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    1fac:	b590      	push	{r4, r7, lr}
    1fae:	b087      	sub	sp, #28
    1fb0:	af00      	add	r7, sp, #0
    1fb2:	60f8      	str	r0, [r7, #12]
    1fb4:	60b9      	str	r1, [r7, #8]
    1fb6:	1dbb      	adds	r3, r7, #6
    1fb8:	801a      	strh	r2, [r3, #0]
	uint32_t                      offset = 0;
    1fba:	2300      	movs	r3, #0
    1fbc:	617b      	str	r3, [r7, #20]
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);
    1fbe:	68fb      	ldr	r3, [r7, #12]
    1fc0:	613b      	str	r3, [r7, #16]

	ASSERT(io_descr && buf && length);
    1fc2:	68fb      	ldr	r3, [r7, #12]
    1fc4:	2b00      	cmp	r3, #0
    1fc6:	d008      	beq.n	1fda <usart_sync_read+0x2e>
    1fc8:	68bb      	ldr	r3, [r7, #8]
    1fca:	2b00      	cmp	r3, #0
    1fcc:	d005      	beq.n	1fda <usart_sync_read+0x2e>
    1fce:	1dbb      	adds	r3, r7, #6
    1fd0:	881b      	ldrh	r3, [r3, #0]
    1fd2:	2b00      	cmp	r3, #0
    1fd4:	d001      	beq.n	1fda <usart_sync_read+0x2e>
    1fd6:	2301      	movs	r3, #1
    1fd8:	e000      	b.n	1fdc <usart_sync_read+0x30>
    1fda:	2300      	movs	r3, #0
    1fdc:	1c1a      	adds	r2, r3, #0
    1fde:	2301      	movs	r3, #1
    1fe0:	4013      	ands	r3, r2
    1fe2:	b2d8      	uxtb	r0, r3
    1fe4:	2386      	movs	r3, #134	; 0x86
    1fe6:	005a      	lsls	r2, r3, #1
    1fe8:	4b13      	ldr	r3, [pc, #76]	; (2038 <STACK_SIZE+0x38>)
    1fea:	0019      	movs	r1, r3
    1fec:	4b13      	ldr	r3, [pc, #76]	; (203c <STACK_SIZE+0x3c>)
    1fee:	4798      	blx	r3
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
    1ff0:	46c0      	nop			; (mov r8, r8)
    1ff2:	693b      	ldr	r3, [r7, #16]
    1ff4:	3308      	adds	r3, #8
    1ff6:	0018      	movs	r0, r3
    1ff8:	4b11      	ldr	r3, [pc, #68]	; (2040 <STACK_SIZE+0x40>)
    1ffa:	4798      	blx	r3
    1ffc:	0003      	movs	r3, r0
    1ffe:	001a      	movs	r2, r3
    2000:	2301      	movs	r3, #1
    2002:	4053      	eors	r3, r2
    2004:	b2db      	uxtb	r3, r3
    2006:	2b00      	cmp	r3, #0
    2008:	d1f3      	bne.n	1ff2 <usart_sync_read+0x46>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
    200a:	68ba      	ldr	r2, [r7, #8]
    200c:	697b      	ldr	r3, [r7, #20]
    200e:	18d4      	adds	r4, r2, r3
    2010:	693b      	ldr	r3, [r7, #16]
    2012:	3308      	adds	r3, #8
    2014:	0018      	movs	r0, r3
    2016:	4b0b      	ldr	r3, [pc, #44]	; (2044 <STACK_SIZE+0x44>)
    2018:	4798      	blx	r3
    201a:	0003      	movs	r3, r0
    201c:	7023      	strb	r3, [r4, #0]
	} while (++offset < length);
    201e:	697b      	ldr	r3, [r7, #20]
    2020:	3301      	adds	r3, #1
    2022:	617b      	str	r3, [r7, #20]
    2024:	1dbb      	adds	r3, r7, #6
    2026:	881b      	ldrh	r3, [r3, #0]
    2028:	697a      	ldr	r2, [r7, #20]
    202a:	429a      	cmp	r2, r3
    202c:	d3e0      	bcc.n	1ff0 <usart_sync_read+0x44>

	return (int32_t)offset;
    202e:	697b      	ldr	r3, [r7, #20]
}
    2030:	0018      	movs	r0, r3
    2032:	46bd      	mov	sp, r7
    2034:	b007      	add	sp, #28
    2036:	bd90      	pop	{r4, r7, pc}
    2038:	00010d14 	.word	0x00010d14
    203c:	00002ae1 	.word	0x00002ae1
    2040:	0000356d 	.word	0x0000356d
    2044:	00003509 	.word	0x00003509

00002048 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    2048:	b580      	push	{r7, lr}
    204a:	b084      	sub	sp, #16
    204c:	af00      	add	r7, sp, #0
    204e:	0002      	movs	r2, r0
    2050:	1dfb      	adds	r3, r7, #7
    2052:	701a      	strb	r2, [r3, #0]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2054:	230f      	movs	r3, #15
    2056:	18fb      	adds	r3, r7, r3
    2058:	2200      	movs	r2, #0
    205a:	701a      	strb	r2, [r3, #0]
    205c:	e038      	b.n	20d0 <_usb_d_find_ep+0x88>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    205e:	230f      	movs	r3, #15
    2060:	18fb      	adds	r3, r7, r3
    2062:	781b      	ldrb	r3, [r3, #0]
    2064:	b25b      	sxtb	r3, r3
    2066:	4a20      	ldr	r2, [pc, #128]	; (20e8 <_usb_d_find_ep+0xa0>)
    2068:	015b      	lsls	r3, r3, #5
    206a:	18d3      	adds	r3, r2, r3
    206c:	3301      	adds	r3, #1
    206e:	781b      	ldrb	r3, [r3, #0]
    2070:	1dfa      	adds	r2, r7, #7
    2072:	7812      	ldrb	r2, [r2, #0]
    2074:	429a      	cmp	r2, r3
    2076:	d104      	bne.n	2082 <_usb_d_find_ep+0x3a>
			return i;
    2078:	230f      	movs	r3, #15
    207a:	18fb      	adds	r3, r7, r3
    207c:	781b      	ldrb	r3, [r3, #0]
    207e:	b25b      	sxtb	r3, r3
    2080:	e02e      	b.n	20e0 <_usb_d_find_ep+0x98>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    2082:	230f      	movs	r3, #15
    2084:	18fb      	adds	r3, r7, r3
    2086:	2200      	movs	r2, #0
    2088:	569a      	ldrsb	r2, [r3, r2]
    208a:	4b17      	ldr	r3, [pc, #92]	; (20e8 <_usb_d_find_ep+0xa0>)
    208c:	0152      	lsls	r2, r2, #5
    208e:	5cd3      	ldrb	r3, [r2, r3]
    2090:	2b00      	cmp	r3, #0
    2092:	d113      	bne.n	20bc <_usb_d_find_ep+0x74>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    2094:	1dfb      	adds	r3, r7, #7
    2096:	781b      	ldrb	r3, [r3, #0]
    2098:	220f      	movs	r2, #15
    209a:	4013      	ands	r3, r2
    209c:	220f      	movs	r2, #15
    209e:	18ba      	adds	r2, r7, r2
    20a0:	7812      	ldrb	r2, [r2, #0]
    20a2:	b252      	sxtb	r2, r2
    20a4:	4910      	ldr	r1, [pc, #64]	; (20e8 <_usb_d_find_ep+0xa0>)
    20a6:	0152      	lsls	r2, r2, #5
    20a8:	188a      	adds	r2, r1, r2
    20aa:	3201      	adds	r2, #1
    20ac:	7812      	ldrb	r2, [r2, #0]
    20ae:	4293      	cmp	r3, r2
    20b0:	d104      	bne.n	20bc <_usb_d_find_ep+0x74>
			return i;
    20b2:	230f      	movs	r3, #15
    20b4:	18fb      	adds	r3, r7, r3
    20b6:	781b      	ldrb	r3, [r3, #0]
    20b8:	b25b      	sxtb	r3, r3
    20ba:	e011      	b.n	20e0 <_usb_d_find_ep+0x98>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    20bc:	230f      	movs	r3, #15
    20be:	18fb      	adds	r3, r7, r3
    20c0:	781b      	ldrb	r3, [r3, #0]
    20c2:	b25b      	sxtb	r3, r3
    20c4:	b2db      	uxtb	r3, r3
    20c6:	3301      	adds	r3, #1
    20c8:	b2da      	uxtb	r2, r3
    20ca:	230f      	movs	r3, #15
    20cc:	18fb      	adds	r3, r7, r3
    20ce:	701a      	strb	r2, [r3, #0]
    20d0:	230f      	movs	r3, #15
    20d2:	18fb      	adds	r3, r7, r3
    20d4:	781b      	ldrb	r3, [r3, #0]
    20d6:	b25b      	sxtb	r3, r3
    20d8:	2b07      	cmp	r3, #7
    20da:	ddc0      	ble.n	205e <_usb_d_find_ep+0x16>
		}
	}
	return -1;
    20dc:	2301      	movs	r3, #1
    20de:	425b      	negs	r3, r3
}
    20e0:	0018      	movs	r0, r3
    20e2:	46bd      	mov	sp, r7
    20e4:	b004      	add	sp, #16
    20e6:	bd80      	pop	{r7, pc}
    20e8:	20000c88 	.word	0x20000c88

000020ec <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    20ec:	b580      	push	{r7, lr}
    20ee:	b088      	sub	sp, #32
    20f0:	af00      	add	r7, sp, #0
    20f2:	60ba      	str	r2, [r7, #8]
    20f4:	607b      	str	r3, [r7, #4]
    20f6:	230f      	movs	r3, #15
    20f8:	18fb      	adds	r3, r7, r3
    20fa:	1c02      	adds	r2, r0, #0
    20fc:	701a      	strb	r2, [r3, #0]
    20fe:	230e      	movs	r3, #14
    2100:	18fb      	adds	r3, r7, r3
    2102:	1c0a      	adds	r2, r1, #0
    2104:	701a      	strb	r2, [r3, #0]
	struct usb_d_transfer trans
    2106:	2314      	movs	r3, #20
    2108:	18fb      	adds	r3, r7, r3
    210a:	68ba      	ldr	r2, [r7, #8]
    210c:	601a      	str	r2, [r3, #0]
    210e:	2314      	movs	r3, #20
    2110:	18fb      	adds	r3, r7, r3
    2112:	687a      	ldr	r2, [r7, #4]
    2114:	605a      	str	r2, [r3, #4]
    2116:	230e      	movs	r3, #14
    2118:	18fb      	adds	r3, r7, r3
    211a:	781b      	ldrb	r3, [r3, #0]
    211c:	2b00      	cmp	r3, #0
    211e:	d007      	beq.n	2130 <_usb_d_trans+0x44>
    2120:	230f      	movs	r3, #15
    2122:	18fb      	adds	r3, r7, r3
    2124:	781b      	ldrb	r3, [r3, #0]
    2126:	2280      	movs	r2, #128	; 0x80
    2128:	4252      	negs	r2, r2
    212a:	4313      	orrs	r3, r2
    212c:	b2db      	uxtb	r3, r3
    212e:	e005      	b.n	213c <_usb_d_trans+0x50>
    2130:	230f      	movs	r3, #15
    2132:	18fb      	adds	r3, r7, r3
    2134:	781b      	ldrb	r3, [r3, #0]
    2136:	220f      	movs	r2, #15
    2138:	4013      	ands	r3, r2
    213a:	b2db      	uxtb	r3, r3
    213c:	2214      	movs	r2, #20
    213e:	18ba      	adds	r2, r7, r2
    2140:	7213      	strb	r3, [r2, #8]
    2142:	2314      	movs	r3, #20
    2144:	18fb      	adds	r3, r7, r3
    2146:	2228      	movs	r2, #40	; 0x28
    2148:	18ba      	adds	r2, r7, r2
    214a:	7812      	ldrb	r2, [r2, #0]
    214c:	725a      	strb	r2, [r3, #9]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    214e:	2314      	movs	r3, #20
    2150:	18fb      	adds	r3, r7, r3
    2152:	0018      	movs	r0, r3
    2154:	4b03      	ldr	r3, [pc, #12]	; (2164 <_usb_d_trans+0x78>)
    2156:	4798      	blx	r3
    2158:	0003      	movs	r3, r0
}
    215a:	0018      	movs	r0, r3
    215c:	46bd      	mov	sp, r7
    215e:	b008      	add	sp, #32
    2160:	bd80      	pop	{r7, pc}
    2162:	46c0      	nop			; (mov r8, r8)
    2164:	00007055 	.word	0x00007055

00002168 <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    2168:	b580      	push	{r7, lr}
    216a:	b084      	sub	sp, #16
    216c:	af00      	add	r7, sp, #0
    216e:	60f8      	str	r0, [r7, #12]
    2170:	60b9      	str	r1, [r7, #8]
    2172:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    2174:	2300      	movs	r3, #0
}
    2176:	0018      	movs	r0, r3
    2178:	46bd      	mov	sp, r7
    217a:	b004      	add	sp, #16
    217c:	bd80      	pop	{r7, pc}
	...

00002180 <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    2180:	b590      	push	{r4, r7, lr}
    2182:	b087      	sub	sp, #28
    2184:	af00      	add	r7, sp, #0
    2186:	0002      	movs	r2, r0
    2188:	1dfb      	adds	r3, r7, #7
    218a:	701a      	strb	r2, [r3, #0]
	int8_t           ep_index = _usb_d_find_ep(ep);
    218c:	2317      	movs	r3, #23
    218e:	18fc      	adds	r4, r7, r3
    2190:	1dfb      	adds	r3, r7, #7
    2192:	781b      	ldrb	r3, [r3, #0]
    2194:	0018      	movs	r0, r3
    2196:	4b33      	ldr	r3, [pc, #204]	; (2264 <usb_d_cb_trans_setup+0xe4>)
    2198:	4798      	blx	r3
    219a:	0003      	movs	r3, r0
    219c:	7023      	strb	r3, [r4, #0]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    219e:	2317      	movs	r3, #23
    21a0:	18fb      	adds	r3, r7, r3
    21a2:	781b      	ldrb	r3, [r3, #0]
    21a4:	b25b      	sxtb	r3, r3
    21a6:	015a      	lsls	r2, r3, #5
    21a8:	4b2f      	ldr	r3, [pc, #188]	; (2268 <usb_d_cb_trans_setup+0xe8>)
    21aa:	18d3      	adds	r3, r2, r3
    21ac:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    21ae:	693b      	ldr	r3, [r7, #16]
    21b0:	330c      	adds	r3, #12
    21b2:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    21b4:	68fa      	ldr	r2, [r7, #12]
    21b6:	1dfb      	adds	r3, r7, #7
    21b8:	781b      	ldrb	r3, [r3, #0]
    21ba:	0011      	movs	r1, r2
    21bc:	0018      	movs	r0, r3
    21be:	4b2b      	ldr	r3, [pc, #172]	; (226c <usb_d_cb_trans_setup+0xec>)
    21c0:	4798      	blx	r3
    21c2:	0002      	movs	r2, r0
    21c4:	230b      	movs	r3, #11
    21c6:	18fb      	adds	r3, r7, r3
    21c8:	701a      	strb	r2, [r3, #0]
	if (n != 8) {
    21ca:	230b      	movs	r3, #11
    21cc:	18fb      	adds	r3, r7, r3
    21ce:	781b      	ldrb	r3, [r3, #0]
    21d0:	2b08      	cmp	r3, #8
    21d2:	d010      	beq.n	21f6 <usb_d_cb_trans_setup+0x76>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    21d4:	1dfb      	adds	r3, r7, #7
    21d6:	781b      	ldrb	r3, [r3, #0]
    21d8:	2101      	movs	r1, #1
    21da:	0018      	movs	r0, r3
    21dc:	4b24      	ldr	r3, [pc, #144]	; (2270 <usb_d_cb_trans_setup+0xf0>)
    21de:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    21e0:	1dfb      	adds	r3, r7, #7
    21e2:	781b      	ldrb	r3, [r3, #0]
    21e4:	2280      	movs	r2, #128	; 0x80
    21e6:	4252      	negs	r2, r2
    21e8:	4313      	orrs	r3, r2
    21ea:	b2db      	uxtb	r3, r3
    21ec:	2101      	movs	r1, #1
    21ee:	0018      	movs	r0, r3
    21f0:	4b1f      	ldr	r3, [pc, #124]	; (2270 <usb_d_cb_trans_setup+0xf0>)
    21f2:	4798      	blx	r3
		return;
    21f4:	e033      	b.n	225e <usb_d_cb_trans_setup+0xde>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    21f6:	1dfb      	adds	r3, r7, #7
    21f8:	781b      	ldrb	r3, [r3, #0]
    21fa:	2100      	movs	r1, #0
    21fc:	0018      	movs	r0, r3
    21fe:	4b1c      	ldr	r3, [pc, #112]	; (2270 <usb_d_cb_trans_setup+0xf0>)
    2200:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    2202:	1dfb      	adds	r3, r7, #7
    2204:	781b      	ldrb	r3, [r3, #0]
    2206:	2280      	movs	r2, #128	; 0x80
    2208:	4252      	negs	r2, r2
    220a:	4313      	orrs	r3, r2
    220c:	b2db      	uxtb	r3, r3
    220e:	2100      	movs	r1, #0
    2210:	0018      	movs	r0, r3
    2212:	4b17      	ldr	r3, [pc, #92]	; (2270 <usb_d_cb_trans_setup+0xf0>)
    2214:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    2216:	693b      	ldr	r3, [r7, #16]
    2218:	2201      	movs	r2, #1
    221a:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    221c:	693b      	ldr	r3, [r7, #16]
    221e:	695b      	ldr	r3, [r3, #20]
    2220:	68f9      	ldr	r1, [r7, #12]
    2222:	1dfa      	adds	r2, r7, #7
    2224:	7812      	ldrb	r2, [r2, #0]
    2226:	0010      	movs	r0, r2
    2228:	4798      	blx	r3
    222a:	0003      	movs	r3, r0
    222c:	001a      	movs	r2, r3
    222e:	2301      	movs	r3, #1
    2230:	4053      	eors	r3, r2
    2232:	b2db      	uxtb	r3, r3
    2234:	2b00      	cmp	r3, #0
    2236:	d012      	beq.n	225e <usb_d_cb_trans_setup+0xde>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    2238:	693b      	ldr	r3, [r7, #16]
    223a:	2205      	movs	r2, #5
    223c:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    223e:	1dfb      	adds	r3, r7, #7
    2240:	781b      	ldrb	r3, [r3, #0]
    2242:	2101      	movs	r1, #1
    2244:	0018      	movs	r0, r3
    2246:	4b0a      	ldr	r3, [pc, #40]	; (2270 <usb_d_cb_trans_setup+0xf0>)
    2248:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    224a:	1dfb      	adds	r3, r7, #7
    224c:	781b      	ldrb	r3, [r3, #0]
    224e:	2280      	movs	r2, #128	; 0x80
    2250:	4252      	negs	r2, r2
    2252:	4313      	orrs	r3, r2
    2254:	b2db      	uxtb	r3, r3
    2256:	2101      	movs	r1, #1
    2258:	0018      	movs	r0, r3
    225a:	4b05      	ldr	r3, [pc, #20]	; (2270 <usb_d_cb_trans_setup+0xf0>)
    225c:	4798      	blx	r3
	}
}
    225e:	46bd      	mov	sp, r7
    2260:	b007      	add	sp, #28
    2262:	bd90      	pop	{r4, r7, pc}
    2264:	00002049 	.word	0x00002049
    2268:	20000c88 	.word	0x20000c88
    226c:	00006f85 	.word	0x00006f85
    2270:	00006da1 	.word	0x00006da1

00002274 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    2274:	b590      	push	{r4, r7, lr}
    2276:	b085      	sub	sp, #20
    2278:	af00      	add	r7, sp, #0
    227a:	0002      	movs	r2, r0
    227c:	6039      	str	r1, [r7, #0]
    227e:	1dfb      	adds	r3, r7, #7
    2280:	701a      	strb	r2, [r3, #0]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2282:	230f      	movs	r3, #15
    2284:	18fc      	adds	r4, r7, r3
    2286:	1dfb      	adds	r3, r7, #7
    2288:	781b      	ldrb	r3, [r3, #0]
    228a:	0018      	movs	r0, r3
    228c:	4b0e      	ldr	r3, [pc, #56]	; (22c8 <usb_d_cb_trans_more+0x54>)
    228e:	4798      	blx	r3
    2290:	0003      	movs	r3, r0
    2292:	7023      	strb	r3, [r4, #0]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2294:	230f      	movs	r3, #15
    2296:	18fb      	adds	r3, r7, r3
    2298:	781b      	ldrb	r3, [r3, #0]
    229a:	b25b      	sxtb	r3, r3
    229c:	015a      	lsls	r2, r3, #5
    229e:	4b0b      	ldr	r3, [pc, #44]	; (22cc <usb_d_cb_trans_more+0x58>)
    22a0:	18d3      	adds	r3, r2, r3
    22a2:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    22a4:	68bb      	ldr	r3, [r7, #8]
    22a6:	789b      	ldrb	r3, [r3, #2]
    22a8:	2b03      	cmp	r3, #3
    22aa:	d108      	bne.n	22be <usb_d_cb_trans_more+0x4a>
		return ept->callbacks.more(ep, transfered);
    22ac:	68bb      	ldr	r3, [r7, #8]
    22ae:	699b      	ldr	r3, [r3, #24]
    22b0:	6839      	ldr	r1, [r7, #0]
    22b2:	1dfa      	adds	r2, r7, #7
    22b4:	7812      	ldrb	r2, [r2, #0]
    22b6:	0010      	movs	r0, r2
    22b8:	4798      	blx	r3
    22ba:	0003      	movs	r3, r0
    22bc:	e000      	b.n	22c0 <usb_d_cb_trans_more+0x4c>
	}
	return false;
    22be:	2300      	movs	r3, #0
}
    22c0:	0018      	movs	r0, r3
    22c2:	46bd      	mov	sp, r7
    22c4:	b005      	add	sp, #20
    22c6:	bd90      	pop	{r4, r7, pc}
    22c8:	00002049 	.word	0x00002049
    22cc:	20000c88 	.word	0x20000c88

000022d0 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    22d0:	b590      	push	{r4, r7, lr}
    22d2:	b087      	sub	sp, #28
    22d4:	af02      	add	r7, sp, #8
    22d6:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    22d8:	230f      	movs	r3, #15
    22da:	18fb      	adds	r3, r7, r3
    22dc:	687a      	ldr	r2, [r7, #4]
    22de:	7892      	ldrb	r2, [r2, #2]
    22e0:	701a      	strb	r2, [r3, #0]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    22e2:	687b      	ldr	r3, [r7, #4]
    22e4:	7b1b      	ldrb	r3, [r3, #12]
    22e6:	001a      	movs	r2, r3
    22e8:	2380      	movs	r3, #128	; 0x80
    22ea:	401a      	ands	r2, r3
    22ec:	230e      	movs	r3, #14
    22ee:	18fb      	adds	r3, r7, r3
    22f0:	1e51      	subs	r1, r2, #1
    22f2:	418a      	sbcs	r2, r1
    22f4:	701a      	strb	r2, [r3, #0]

	if (state == USB_EP_S_X_DATA) {
    22f6:	230f      	movs	r3, #15
    22f8:	18fb      	adds	r3, r7, r3
    22fa:	781b      	ldrb	r3, [r3, #0]
    22fc:	2b03      	cmp	r3, #3
    22fe:	d142      	bne.n	2386 <usb_d_ctrl_trans_done+0xb6>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    2300:	687b      	ldr	r3, [r7, #4]
    2302:	69db      	ldr	r3, [r3, #28]
    2304:	687a      	ldr	r2, [r7, #4]
    2306:	7850      	ldrb	r0, [r2, #1]
    2308:	687a      	ldr	r2, [r7, #4]
    230a:	320c      	adds	r2, #12
    230c:	210d      	movs	r1, #13
    230e:	187c      	adds	r4, r7, r1
    2310:	2101      	movs	r1, #1
    2312:	4798      	blx	r3
    2314:	0003      	movs	r3, r0
    2316:	7023      	strb	r3, [r4, #0]
		if (err) {
    2318:	230d      	movs	r3, #13
    231a:	18fb      	adds	r3, r7, r3
    231c:	781b      	ldrb	r3, [r3, #0]
    231e:	2b00      	cmp	r3, #0
    2320:	d018      	beq.n	2354 <usb_d_ctrl_trans_done+0x84>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    2322:	687b      	ldr	r3, [r7, #4]
    2324:	2205      	movs	r2, #5
    2326:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    2328:	687b      	ldr	r3, [r7, #4]
    232a:	2202      	movs	r2, #2
    232c:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    232e:	230e      	movs	r3, #14
    2330:	18fb      	adds	r3, r7, r3
    2332:	781b      	ldrb	r3, [r3, #0]
    2334:	2b00      	cmp	r3, #0
    2336:	d002      	beq.n	233e <usb_d_ctrl_trans_done+0x6e>
    2338:	687b      	ldr	r3, [r7, #4]
    233a:	785b      	ldrb	r3, [r3, #1]
    233c:	e005      	b.n	234a <usb_d_ctrl_trans_done+0x7a>
    233e:	687b      	ldr	r3, [r7, #4]
    2340:	785b      	ldrb	r3, [r3, #1]
    2342:	2280      	movs	r2, #128	; 0x80
    2344:	4252      	negs	r2, r2
    2346:	4313      	orrs	r3, r2
    2348:	b2db      	uxtb	r3, r3
    234a:	2101      	movs	r1, #1
    234c:	0018      	movs	r0, r3
    234e:	4b15      	ldr	r3, [pc, #84]	; (23a4 <usb_d_ctrl_trans_done+0xd4>)
    2350:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    2352:	e023      	b.n	239c <usb_d_ctrl_trans_done+0xcc>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    2354:	687b      	ldr	r3, [r7, #4]
    2356:	2204      	movs	r2, #4
    2358:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    235a:	687b      	ldr	r3, [r7, #4]
    235c:	7858      	ldrb	r0, [r3, #1]
    235e:	230e      	movs	r3, #14
    2360:	18fb      	adds	r3, r7, r3
    2362:	781b      	ldrb	r3, [r3, #0]
    2364:	1e5a      	subs	r2, r3, #1
    2366:	4193      	sbcs	r3, r2
    2368:	b2db      	uxtb	r3, r3
    236a:	2201      	movs	r2, #1
    236c:	4053      	eors	r3, r2
    236e:	b2db      	uxtb	r3, r3
    2370:	1c1a      	adds	r2, r3, #0
    2372:	2301      	movs	r3, #1
    2374:	4013      	ands	r3, r2
    2376:	b2d9      	uxtb	r1, r3
    2378:	2301      	movs	r3, #1
    237a:	9300      	str	r3, [sp, #0]
    237c:	2300      	movs	r3, #0
    237e:	2200      	movs	r2, #0
    2380:	4c09      	ldr	r4, [pc, #36]	; (23a8 <usb_d_ctrl_trans_done+0xd8>)
    2382:	47a0      	blx	r4
}
    2384:	e00a      	b.n	239c <usb_d_ctrl_trans_done+0xcc>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    2386:	687b      	ldr	r3, [r7, #4]
    2388:	69db      	ldr	r3, [r3, #28]
    238a:	687a      	ldr	r2, [r7, #4]
    238c:	7850      	ldrb	r0, [r2, #1]
    238e:	687a      	ldr	r2, [r7, #4]
    2390:	320c      	adds	r2, #12
    2392:	2100      	movs	r1, #0
    2394:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2396:	687b      	ldr	r3, [r7, #4]
    2398:	2202      	movs	r2, #2
    239a:	709a      	strb	r2, [r3, #2]
}
    239c:	46c0      	nop			; (mov r8, r8)
    239e:	46bd      	mov	sp, r7
    23a0:	b005      	add	sp, #20
    23a2:	bd90      	pop	{r4, r7, pc}
    23a4:	00006da1 	.word	0x00006da1
    23a8:	000020ed 	.word	0x000020ed

000023ac <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    23ac:	b590      	push	{r4, r7, lr}
    23ae:	b087      	sub	sp, #28
    23b0:	af00      	add	r7, sp, #0
    23b2:	60b9      	str	r1, [r7, #8]
    23b4:	607a      	str	r2, [r7, #4]
    23b6:	230f      	movs	r3, #15
    23b8:	18fb      	adds	r3, r7, r3
    23ba:	1c02      	adds	r2, r0, #0
    23bc:	701a      	strb	r2, [r3, #0]
	int8_t           ep_index = _usb_d_find_ep(ep);
    23be:	2317      	movs	r3, #23
    23c0:	18fc      	adds	r4, r7, r3
    23c2:	230f      	movs	r3, #15
    23c4:	18fb      	adds	r3, r7, r3
    23c6:	781b      	ldrb	r3, [r3, #0]
    23c8:	0018      	movs	r0, r3
    23ca:	4b33      	ldr	r3, [pc, #204]	; (2498 <_usb_d_cb_trans_done+0xec>)
    23cc:	4798      	blx	r3
    23ce:	0003      	movs	r3, r0
    23d0:	7023      	strb	r3, [r4, #0]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    23d2:	2317      	movs	r3, #23
    23d4:	18fb      	adds	r3, r7, r3
    23d6:	781b      	ldrb	r3, [r3, #0]
    23d8:	b25b      	sxtb	r3, r3
    23da:	015a      	lsls	r2, r3, #5
    23dc:	4b2f      	ldr	r3, [pc, #188]	; (249c <_usb_d_cb_trans_done+0xf0>)
    23de:	18d3      	adds	r3, r2, r3
    23e0:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    23e2:	68bb      	ldr	r3, [r7, #8]
    23e4:	2b00      	cmp	r3, #0
    23e6:	d10f      	bne.n	2408 <_usb_d_cb_trans_done+0x5c>
		ept->xfer.hdr.status = USB_XFER_DONE;
    23e8:	693b      	ldr	r3, [r7, #16]
    23ea:	2200      	movs	r2, #0
    23ec:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    23ee:	693b      	ldr	r3, [r7, #16]
    23f0:	781b      	ldrb	r3, [r3, #0]
    23f2:	2b00      	cmp	r3, #0
    23f4:	d104      	bne.n	2400 <_usb_d_cb_trans_done+0x54>
			usb_d_ctrl_trans_done(ept);
    23f6:	693b      	ldr	r3, [r7, #16]
    23f8:	0018      	movs	r0, r3
    23fa:	4b29      	ldr	r3, [pc, #164]	; (24a0 <_usb_d_cb_trans_done+0xf4>)
    23fc:	4798      	blx	r3
			return;
    23fe:	e048      	b.n	2492 <_usb_d_cb_trans_done+0xe6>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    2400:	693b      	ldr	r3, [r7, #16]
    2402:	2201      	movs	r2, #1
    2404:	709a      	strb	r2, [r3, #2]
    2406:	e03a      	b.n	247e <_usb_d_cb_trans_done+0xd2>
	} else if (code == USB_TRANS_STALL) {
    2408:	68bb      	ldr	r3, [r7, #8]
    240a:	2b01      	cmp	r3, #1
    240c:	d115      	bne.n	243a <_usb_d_cb_trans_done+0x8e>
		ept->xfer.hdr.status = USB_XFER_HALT;
    240e:	693b      	ldr	r3, [r7, #16]
    2410:	2202      	movs	r2, #2
    2412:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2414:	693b      	ldr	r3, [r7, #16]
    2416:	781b      	ldrb	r3, [r3, #0]
    2418:	2b00      	cmp	r3, #0
    241a:	d10a      	bne.n	2432 <_usb_d_cb_trans_done+0x86>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    241c:	693b      	ldr	r3, [r7, #16]
    241e:	2202      	movs	r2, #2
    2420:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2422:	230f      	movs	r3, #15
    2424:	18fb      	adds	r3, r7, r3
    2426:	781b      	ldrb	r3, [r3, #0]
    2428:	2100      	movs	r1, #0
    242a:	0018      	movs	r0, r3
    242c:	4b1d      	ldr	r3, [pc, #116]	; (24a4 <_usb_d_cb_trans_done+0xf8>)
    242e:	4798      	blx	r3
    2430:	e025      	b.n	247e <_usb_d_cb_trans_done+0xd2>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    2432:	693b      	ldr	r3, [r7, #16]
    2434:	2205      	movs	r2, #5
    2436:	709a      	strb	r2, [r3, #2]
    2438:	e021      	b.n	247e <_usb_d_cb_trans_done+0xd2>
		}
	} else if (code == USB_TRANS_ABORT) {
    243a:	68bb      	ldr	r3, [r7, #8]
    243c:	2b02      	cmp	r3, #2
    243e:	d10e      	bne.n	245e <_usb_d_cb_trans_done+0xb2>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    2440:	693b      	ldr	r3, [r7, #16]
    2442:	2204      	movs	r2, #4
    2444:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2446:	693b      	ldr	r3, [r7, #16]
    2448:	781b      	ldrb	r3, [r3, #0]
    244a:	2b00      	cmp	r3, #0
    244c:	d103      	bne.n	2456 <_usb_d_cb_trans_done+0xaa>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    244e:	693b      	ldr	r3, [r7, #16]
    2450:	2202      	movs	r2, #2
    2452:	709a      	strb	r2, [r3, #2]
			return;
    2454:	e01d      	b.n	2492 <_usb_d_cb_trans_done+0xe6>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    2456:	693b      	ldr	r3, [r7, #16]
    2458:	2201      	movs	r2, #1
    245a:	709a      	strb	r2, [r3, #2]
    245c:	e00f      	b.n	247e <_usb_d_cb_trans_done+0xd2>
	} else if (code == USB_TRANS_RESET) {
    245e:	68bb      	ldr	r3, [r7, #8]
    2460:	2b03      	cmp	r3, #3
    2462:	d106      	bne.n	2472 <_usb_d_cb_trans_done+0xc6>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    2464:	693b      	ldr	r3, [r7, #16]
    2466:	2200      	movs	r2, #0
    2468:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    246a:	693b      	ldr	r3, [r7, #16]
    246c:	2205      	movs	r2, #5
    246e:	70da      	strb	r2, [r3, #3]
    2470:	e005      	b.n	247e <_usb_d_cb_trans_done+0xd2>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    2472:	693b      	ldr	r3, [r7, #16]
    2474:	2206      	movs	r2, #6
    2476:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    2478:	693b      	ldr	r3, [r7, #16]
    247a:	2206      	movs	r2, #6
    247c:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    247e:	693b      	ldr	r3, [r7, #16]
    2480:	69db      	ldr	r3, [r3, #28]
    2482:	693a      	ldr	r2, [r7, #16]
    2484:	78d1      	ldrb	r1, [r2, #3]
    2486:	687c      	ldr	r4, [r7, #4]
    2488:	220f      	movs	r2, #15
    248a:	18ba      	adds	r2, r7, r2
    248c:	7810      	ldrb	r0, [r2, #0]
    248e:	0022      	movs	r2, r4
    2490:	4798      	blx	r3
}
    2492:	46bd      	mov	sp, r7
    2494:	b007      	add	sp, #28
    2496:	bd90      	pop	{r4, r7, pc}
    2498:	00002049 	.word	0x00002049
    249c:	20000c88 	.word	0x20000c88
    24a0:	000022d1 	.word	0x000022d1
    24a4:	00006da1 	.word	0x00006da1

000024a8 <usb_d_init>:

int32_t usb_d_init(void)
{
    24a8:	b580      	push	{r7, lr}
    24aa:	b082      	sub	sp, #8
    24ac:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    24ae:	4b28      	ldr	r3, [pc, #160]	; (2550 <usb_d_init+0xa8>)
    24b0:	4798      	blx	r3
    24b2:	0003      	movs	r3, r0
    24b4:	603b      	str	r3, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    24b6:	683b      	ldr	r3, [r7, #0]
    24b8:	2b00      	cmp	r3, #0
    24ba:	da01      	bge.n	24c0 <usb_d_init+0x18>
		return rc;
    24bc:	683b      	ldr	r3, [r7, #0]
    24be:	e043      	b.n	2548 <usb_d_init+0xa0>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    24c0:	2380      	movs	r3, #128	; 0x80
    24c2:	005a      	lsls	r2, r3, #1
    24c4:	4b23      	ldr	r3, [pc, #140]	; (2554 <usb_d_init+0xac>)
    24c6:	2100      	movs	r1, #0
    24c8:	0018      	movs	r0, r3
    24ca:	4b23      	ldr	r3, [pc, #140]	; (2558 <usb_d_init+0xb0>)
    24cc:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    24ce:	1dfb      	adds	r3, r7, #7
    24d0:	2200      	movs	r2, #0
    24d2:	701a      	strb	r2, [r3, #0]
    24d4:	e024      	b.n	2520 <usb_d_init+0x78>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    24d6:	1dfb      	adds	r3, r7, #7
    24d8:	781b      	ldrb	r3, [r3, #0]
    24da:	4a1e      	ldr	r2, [pc, #120]	; (2554 <usb_d_init+0xac>)
    24dc:	015b      	lsls	r3, r3, #5
    24de:	18d3      	adds	r3, r2, r3
    24e0:	3301      	adds	r3, #1
    24e2:	22ff      	movs	r2, #255	; 0xff
    24e4:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    24e6:	1dfb      	adds	r3, r7, #7
    24e8:	781b      	ldrb	r3, [r3, #0]
    24ea:	4a1a      	ldr	r2, [pc, #104]	; (2554 <usb_d_init+0xac>)
    24ec:	015b      	lsls	r3, r3, #5
    24ee:	18d3      	adds	r3, r2, r3
    24f0:	3314      	adds	r3, #20
    24f2:	4a1a      	ldr	r2, [pc, #104]	; (255c <usb_d_init+0xb4>)
    24f4:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    24f6:	1dfb      	adds	r3, r7, #7
    24f8:	781b      	ldrb	r3, [r3, #0]
    24fa:	4a16      	ldr	r2, [pc, #88]	; (2554 <usb_d_init+0xac>)
    24fc:	015b      	lsls	r3, r3, #5
    24fe:	18d3      	adds	r3, r2, r3
    2500:	3318      	adds	r3, #24
    2502:	4a16      	ldr	r2, [pc, #88]	; (255c <usb_d_init+0xb4>)
    2504:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    2506:	1dfb      	adds	r3, r7, #7
    2508:	781b      	ldrb	r3, [r3, #0]
    250a:	4a12      	ldr	r2, [pc, #72]	; (2554 <usb_d_init+0xac>)
    250c:	015b      	lsls	r3, r3, #5
    250e:	18d3      	adds	r3, r2, r3
    2510:	331c      	adds	r3, #28
    2512:	4a12      	ldr	r2, [pc, #72]	; (255c <usb_d_init+0xb4>)
    2514:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2516:	1dfb      	adds	r3, r7, #7
    2518:	781a      	ldrb	r2, [r3, #0]
    251a:	1dfb      	adds	r3, r7, #7
    251c:	3201      	adds	r2, #1
    251e:	701a      	strb	r2, [r3, #0]
    2520:	1dfb      	adds	r3, r7, #7
    2522:	781b      	ldrb	r3, [r3, #0]
    2524:	2b07      	cmp	r3, #7
    2526:	d9d6      	bls.n	24d6 <usb_d_init+0x2e>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    2528:	4b0d      	ldr	r3, [pc, #52]	; (2560 <usb_d_init+0xb8>)
    252a:	0019      	movs	r1, r3
    252c:	2000      	movs	r0, #0
    252e:	4b0d      	ldr	r3, [pc, #52]	; (2564 <usb_d_init+0xbc>)
    2530:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    2532:	4b0d      	ldr	r3, [pc, #52]	; (2568 <usb_d_init+0xc0>)
    2534:	0019      	movs	r1, r3
    2536:	2001      	movs	r0, #1
    2538:	4b0a      	ldr	r3, [pc, #40]	; (2564 <usb_d_init+0xbc>)
    253a:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    253c:	4b0b      	ldr	r3, [pc, #44]	; (256c <usb_d_init+0xc4>)
    253e:	0019      	movs	r1, r3
    2540:	2002      	movs	r0, #2
    2542:	4b08      	ldr	r3, [pc, #32]	; (2564 <usb_d_init+0xbc>)
    2544:	4798      	blx	r3
	return ERR_NONE;
    2546:	2300      	movs	r3, #0
}
    2548:	0018      	movs	r0, r3
    254a:	46bd      	mov	sp, r7
    254c:	b002      	add	sp, #8
    254e:	bd80      	pop	{r7, pc}
    2550:	00006455 	.word	0x00006455
    2554:	20000c88 	.word	0x20000c88
    2558:	0000b785 	.word	0x0000b785
    255c:	00002169 	.word	0x00002169
    2560:	00002181 	.word	0x00002181
    2564:	000072d1 	.word	0x000072d1
    2568:	00002275 	.word	0x00002275
    256c:	000023ad 	.word	0x000023ad

00002570 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    2570:	b580      	push	{r7, lr}
    2572:	b082      	sub	sp, #8
    2574:	af00      	add	r7, sp, #0
    2576:	0002      	movs	r2, r0
    2578:	6039      	str	r1, [r7, #0]
    257a:	1dfb      	adds	r3, r7, #7
    257c:	701a      	strb	r2, [r3, #0]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    257e:	683a      	ldr	r2, [r7, #0]
    2580:	1dfb      	adds	r3, r7, #7
    2582:	781b      	ldrb	r3, [r3, #0]
    2584:	0011      	movs	r1, r2
    2586:	0018      	movs	r0, r3
    2588:	4b02      	ldr	r3, [pc, #8]	; (2594 <usb_d_register_callback+0x24>)
    258a:	4798      	blx	r3
}
    258c:	46c0      	nop			; (mov r8, r8)
    258e:	46bd      	mov	sp, r7
    2590:	b002      	add	sp, #8
    2592:	bd80      	pop	{r7, pc}
    2594:	00007285 	.word	0x00007285

00002598 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    2598:	b580      	push	{r7, lr}
    259a:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    259c:	4b02      	ldr	r3, [pc, #8]	; (25a8 <usb_d_enable+0x10>)
    259e:	4798      	blx	r3
    25a0:	0003      	movs	r3, r0
}
    25a2:	0018      	movs	r0, r3
    25a4:	46bd      	mov	sp, r7
    25a6:	bd80      	pop	{r7, pc}
    25a8:	00006561 	.word	0x00006561

000025ac <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    25ac:	b580      	push	{r7, lr}
    25ae:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    25b0:	4b02      	ldr	r3, [pc, #8]	; (25bc <usb_d_attach+0x10>)
    25b2:	4798      	blx	r3
}
    25b4:	46c0      	nop			; (mov r8, r8)
    25b6:	46bd      	mov	sp, r7
    25b8:	bd80      	pop	{r7, pc}
    25ba:	46c0      	nop			; (mov r8, r8)
    25bc:	000065e5 	.word	0x000065e5

000025c0 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    25c0:	b580      	push	{r7, lr}
    25c2:	b082      	sub	sp, #8
    25c4:	af00      	add	r7, sp, #0
    25c6:	0002      	movs	r2, r0
    25c8:	1dfb      	adds	r3, r7, #7
    25ca:	701a      	strb	r2, [r3, #0]
	_usb_d_dev_set_address(addr);
    25cc:	1dfb      	adds	r3, r7, #7
    25ce:	781b      	ldrb	r3, [r3, #0]
    25d0:	0018      	movs	r0, r3
    25d2:	4b03      	ldr	r3, [pc, #12]	; (25e0 <usb_d_set_address+0x20>)
    25d4:	4798      	blx	r3
}
    25d6:	46c0      	nop			; (mov r8, r8)
    25d8:	46bd      	mov	sp, r7
    25da:	b002      	add	sp, #8
    25dc:	bd80      	pop	{r7, pc}
    25de:	46c0      	nop			; (mov r8, r8)
    25e0:	00006601 	.word	0x00006601

000025e4 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    25e4:	b580      	push	{r7, lr}
    25e6:	b082      	sub	sp, #8
    25e8:	af00      	add	r7, sp, #0
    25ea:	0002      	movs	r2, r0
    25ec:	1dfb      	adds	r3, r7, #7
    25ee:	701a      	strb	r2, [r3, #0]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    25f0:	1dfb      	adds	r3, r7, #7
    25f2:	781b      	ldrb	r3, [r3, #0]
    25f4:	b29b      	uxth	r3, r3
    25f6:	001a      	movs	r2, r3
    25f8:	2100      	movs	r1, #0
    25fa:	2000      	movs	r0, #0
    25fc:	4b03      	ldr	r3, [pc, #12]	; (260c <usb_d_ep0_init+0x28>)
    25fe:	4798      	blx	r3
    2600:	0003      	movs	r3, r0
}
    2602:	0018      	movs	r0, r3
    2604:	46bd      	mov	sp, r7
    2606:	b002      	add	sp, #8
    2608:	bd80      	pop	{r7, pc}
    260a:	46c0      	nop			; (mov r8, r8)
    260c:	00002611 	.word	0x00002611

00002610 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    2610:	b590      	push	{r4, r7, lr}
    2612:	b087      	sub	sp, #28
    2614:	af00      	add	r7, sp, #0
    2616:	0004      	movs	r4, r0
    2618:	0008      	movs	r0, r1
    261a:	0011      	movs	r1, r2
    261c:	1dfb      	adds	r3, r7, #7
    261e:	1c22      	adds	r2, r4, #0
    2620:	701a      	strb	r2, [r3, #0]
    2622:	1dbb      	adds	r3, r7, #6
    2624:	1c02      	adds	r2, r0, #0
    2626:	701a      	strb	r2, [r3, #0]
    2628:	1d3b      	adds	r3, r7, #4
    262a:	1c0a      	adds	r2, r1, #0
    262c:	801a      	strh	r2, [r3, #0]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    262e:	2317      	movs	r3, #23
    2630:	18fc      	adds	r4, r7, r3
    2632:	1dfb      	adds	r3, r7, #7
    2634:	781b      	ldrb	r3, [r3, #0]
    2636:	0018      	movs	r0, r3
    2638:	4b25      	ldr	r3, [pc, #148]	; (26d0 <usb_d_ep_init+0xc0>)
    263a:	4798      	blx	r3
    263c:	0003      	movs	r3, r0
    263e:	7023      	strb	r3, [r4, #0]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2640:	2317      	movs	r3, #23
    2642:	18fb      	adds	r3, r7, r3
    2644:	781b      	ldrb	r3, [r3, #0]
    2646:	b25b      	sxtb	r3, r3
    2648:	015a      	lsls	r2, r3, #5
    264a:	4b22      	ldr	r3, [pc, #136]	; (26d4 <usb_d_ep_init+0xc4>)
    264c:	18d3      	adds	r3, r2, r3
    264e:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    2650:	2317      	movs	r3, #23
    2652:	18fb      	adds	r3, r7, r3
    2654:	781b      	ldrb	r3, [r3, #0]
    2656:	2b7f      	cmp	r3, #127	; 0x7f
    2658:	d802      	bhi.n	2660 <usb_d_ep_init+0x50>
		return -USB_ERR_REDO;
    265a:	2314      	movs	r3, #20
    265c:	425b      	negs	r3, r3
    265e:	e032      	b.n	26c6 <usb_d_ep_init+0xb6>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    2660:	2317      	movs	r3, #23
    2662:	18fc      	adds	r4, r7, r3
    2664:	20ff      	movs	r0, #255	; 0xff
    2666:	4b1a      	ldr	r3, [pc, #104]	; (26d0 <usb_d_ep_init+0xc0>)
    2668:	4798      	blx	r3
    266a:	0003      	movs	r3, r0
    266c:	7023      	strb	r3, [r4, #0]
		if (ep_index < 0) {
    266e:	2317      	movs	r3, #23
    2670:	18fb      	adds	r3, r7, r3
    2672:	781b      	ldrb	r3, [r3, #0]
    2674:	2b7f      	cmp	r3, #127	; 0x7f
    2676:	d902      	bls.n	267e <usb_d_ep_init+0x6e>
			return -USB_ERR_ALLOC_FAIL;
    2678:	2315      	movs	r3, #21
    267a:	425b      	negs	r3, r3
    267c:	e023      	b.n	26c6 <usb_d_ep_init+0xb6>
		}
		ept = &usb_d_inst.ep[ep_index];
    267e:	2317      	movs	r3, #23
    2680:	18fb      	adds	r3, r7, r3
    2682:	781b      	ldrb	r3, [r3, #0]
    2684:	b25b      	sxtb	r3, r3
    2686:	015a      	lsls	r2, r3, #5
    2688:	4b12      	ldr	r3, [pc, #72]	; (26d4 <usb_d_ep_init+0xc4>)
    268a:	18d3      	adds	r3, r2, r3
    268c:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    268e:	1d3b      	adds	r3, r7, #4
    2690:	881a      	ldrh	r2, [r3, #0]
    2692:	1dbb      	adds	r3, r7, #6
    2694:	7819      	ldrb	r1, [r3, #0]
    2696:	1dfb      	adds	r3, r7, #7
    2698:	781b      	ldrb	r3, [r3, #0]
    269a:	0018      	movs	r0, r3
    269c:	4b0e      	ldr	r3, [pc, #56]	; (26d8 <usb_d_ep_init+0xc8>)
    269e:	4798      	blx	r3
    26a0:	0003      	movs	r3, r0
    26a2:	60fb      	str	r3, [r7, #12]
	if (rc < 0) {
    26a4:	68fb      	ldr	r3, [r7, #12]
    26a6:	2b00      	cmp	r3, #0
    26a8:	da01      	bge.n	26ae <usb_d_ep_init+0x9e>
		return rc;
    26aa:	68fb      	ldr	r3, [r7, #12]
    26ac:	e00b      	b.n	26c6 <usb_d_ep_init+0xb6>
	}
	ept->xfer.hdr.ep   = ep;
    26ae:	693b      	ldr	r3, [r7, #16]
    26b0:	1dfa      	adds	r2, r7, #7
    26b2:	7812      	ldrb	r2, [r2, #0]
    26b4:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    26b6:	1dbb      	adds	r3, r7, #6
    26b8:	781b      	ldrb	r3, [r3, #0]
    26ba:	2203      	movs	r2, #3
    26bc:	4013      	ands	r3, r2
    26be:	b2da      	uxtb	r2, r3
    26c0:	693b      	ldr	r3, [r7, #16]
    26c2:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    26c4:	2300      	movs	r3, #0
}
    26c6:	0018      	movs	r0, r3
    26c8:	46bd      	mov	sp, r7
    26ca:	b007      	add	sp, #28
    26cc:	bd90      	pop	{r4, r7, pc}
    26ce:	46c0      	nop			; (mov r8, r8)
    26d0:	00002049 	.word	0x00002049
    26d4:	20000c88 	.word	0x20000c88
    26d8:	000066c9 	.word	0x000066c9

000026dc <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    26dc:	b590      	push	{r4, r7, lr}
    26de:	b085      	sub	sp, #20
    26e0:	af00      	add	r7, sp, #0
    26e2:	0002      	movs	r2, r0
    26e4:	1dfb      	adds	r3, r7, #7
    26e6:	701a      	strb	r2, [r3, #0]
	int8_t           ep_index = _usb_d_find_ep(ep);
    26e8:	230f      	movs	r3, #15
    26ea:	18fc      	adds	r4, r7, r3
    26ec:	1dfb      	adds	r3, r7, #7
    26ee:	781b      	ldrb	r3, [r3, #0]
    26f0:	0018      	movs	r0, r3
    26f2:	4b0f      	ldr	r3, [pc, #60]	; (2730 <usb_d_ep_deinit+0x54>)
    26f4:	4798      	blx	r3
    26f6:	0003      	movs	r3, r0
    26f8:	7023      	strb	r3, [r4, #0]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    26fa:	230f      	movs	r3, #15
    26fc:	18fb      	adds	r3, r7, r3
    26fe:	781b      	ldrb	r3, [r3, #0]
    2700:	b25b      	sxtb	r3, r3
    2702:	015a      	lsls	r2, r3, #5
    2704:	4b0b      	ldr	r3, [pc, #44]	; (2734 <usb_d_ep_deinit+0x58>)
    2706:	18d3      	adds	r3, r2, r3
    2708:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    270a:	230f      	movs	r3, #15
    270c:	18fb      	adds	r3, r7, r3
    270e:	781b      	ldrb	r3, [r3, #0]
    2710:	2b7f      	cmp	r3, #127	; 0x7f
    2712:	d808      	bhi.n	2726 <usb_d_ep_deinit+0x4a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    2714:	1dfb      	adds	r3, r7, #7
    2716:	781b      	ldrb	r3, [r3, #0]
    2718:	0018      	movs	r0, r3
    271a:	4b07      	ldr	r3, [pc, #28]	; (2738 <usb_d_ep_deinit+0x5c>)
    271c:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    271e:	68bb      	ldr	r3, [r7, #8]
    2720:	22ff      	movs	r2, #255	; 0xff
    2722:	705a      	strb	r2, [r3, #1]
    2724:	e000      	b.n	2728 <usb_d_ep_deinit+0x4c>
		return;
    2726:	46c0      	nop			; (mov r8, r8)
}
    2728:	46bd      	mov	sp, r7
    272a:	b005      	add	sp, #20
    272c:	bd90      	pop	{r4, r7, pc}
    272e:	46c0      	nop			; (mov r8, r8)
    2730:	00002049 	.word	0x00002049
    2734:	20000c88 	.word	0x20000c88
    2738:	00006845 	.word	0x00006845

0000273c <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    273c:	b590      	push	{r4, r7, lr}
    273e:	b087      	sub	sp, #28
    2740:	af00      	add	r7, sp, #0
    2742:	0002      	movs	r2, r0
    2744:	1dfb      	adds	r3, r7, #7
    2746:	701a      	strb	r2, [r3, #0]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2748:	2317      	movs	r3, #23
    274a:	18fc      	adds	r4, r7, r3
    274c:	1dfb      	adds	r3, r7, #7
    274e:	781b      	ldrb	r3, [r3, #0]
    2750:	0018      	movs	r0, r3
    2752:	4b17      	ldr	r3, [pc, #92]	; (27b0 <usb_d_ep_enable+0x74>)
    2754:	4798      	blx	r3
    2756:	0003      	movs	r3, r0
    2758:	7023      	strb	r3, [r4, #0]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    275a:	2317      	movs	r3, #23
    275c:	18fb      	adds	r3, r7, r3
    275e:	781b      	ldrb	r3, [r3, #0]
    2760:	b25b      	sxtb	r3, r3
    2762:	015a      	lsls	r2, r3, #5
    2764:	4b13      	ldr	r3, [pc, #76]	; (27b4 <usb_d_ep_enable+0x78>)
    2766:	18d3      	adds	r3, r2, r3
    2768:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    276a:	2317      	movs	r3, #23
    276c:	18fb      	adds	r3, r7, r3
    276e:	781b      	ldrb	r3, [r3, #0]
    2770:	2b7f      	cmp	r3, #127	; 0x7f
    2772:	d902      	bls.n	277a <usb_d_ep_enable+0x3e>
		return -USB_ERR_PARAM;
    2774:	2312      	movs	r3, #18
    2776:	425b      	negs	r3, r3
    2778:	e016      	b.n	27a8 <usb_d_ep_enable+0x6c>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    277a:	693b      	ldr	r3, [r7, #16]
    277c:	781b      	ldrb	r3, [r3, #0]
    277e:	2b00      	cmp	r3, #0
    2780:	d101      	bne.n	2786 <usb_d_ep_enable+0x4a>
    2782:	2202      	movs	r2, #2
    2784:	e000      	b.n	2788 <usb_d_ep_enable+0x4c>
    2786:	2201      	movs	r2, #1
    2788:	693b      	ldr	r3, [r7, #16]
    278a:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    278c:	1dfb      	adds	r3, r7, #7
    278e:	781b      	ldrb	r3, [r3, #0]
    2790:	0018      	movs	r0, r3
    2792:	4b09      	ldr	r3, [pc, #36]	; (27b8 <usb_d_ep_enable+0x7c>)
    2794:	4798      	blx	r3
    2796:	0003      	movs	r3, r0
    2798:	60fb      	str	r3, [r7, #12]
	if (rc < 0) {
    279a:	68fb      	ldr	r3, [r7, #12]
    279c:	2b00      	cmp	r3, #0
    279e:	da02      	bge.n	27a6 <usb_d_ep_enable+0x6a>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    27a0:	693b      	ldr	r3, [r7, #16]
    27a2:	2200      	movs	r2, #0
    27a4:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    27a6:	68fb      	ldr	r3, [r7, #12]
}
    27a8:	0018      	movs	r0, r3
    27aa:	46bd      	mov	sp, r7
    27ac:	b007      	add	sp, #28
    27ae:	bd90      	pop	{r4, r7, pc}
    27b0:	00002049 	.word	0x00002049
    27b4:	20000c88 	.word	0x20000c88
    27b8:	00006945 	.word	0x00006945

000027bc <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    27bc:	b5b0      	push	{r4, r5, r7, lr}
    27be:	b08c      	sub	sp, #48	; 0x30
    27c0:	af02      	add	r7, sp, #8
    27c2:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    27c4:	687b      	ldr	r3, [r7, #4]
    27c6:	7a1b      	ldrb	r3, [r3, #8]
    27c8:	221f      	movs	r2, #31
    27ca:	18bc      	adds	r4, r7, r2
    27cc:	0018      	movs	r0, r3
    27ce:	4b5e      	ldr	r3, [pc, #376]	; (2948 <usb_d_ep_transfer+0x18c>)
    27d0:	4798      	blx	r3
    27d2:	0003      	movs	r3, r0
    27d4:	7023      	strb	r3, [r4, #0]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    27d6:	231f      	movs	r3, #31
    27d8:	18fb      	adds	r3, r7, r3
    27da:	781b      	ldrb	r3, [r3, #0]
    27dc:	b25b      	sxtb	r3, r3
    27de:	015a      	lsls	r2, r3, #5
    27e0:	4b5a      	ldr	r3, [pc, #360]	; (294c <usb_d_ep_transfer+0x190>)
    27e2:	18d3      	adds	r3, r2, r3
    27e4:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    27e6:	687b      	ldr	r3, [r7, #4]
    27e8:	7a1b      	ldrb	r3, [r3, #8]
    27ea:	001a      	movs	r2, r3
    27ec:	2380      	movs	r3, #128	; 0x80
    27ee:	401a      	ands	r2, r3
    27f0:	2327      	movs	r3, #39	; 0x27
    27f2:	18fb      	adds	r3, r7, r3
    27f4:	1e51      	subs	r1, r2, #1
    27f6:	418a      	sbcs	r2, r1
    27f8:	701a      	strb	r2, [r3, #0]
    27fa:	687b      	ldr	r3, [r7, #4]
    27fc:	7a5a      	ldrb	r2, [r3, #9]
    27fe:	2326      	movs	r3, #38	; 0x26
    2800:	18fb      	adds	r3, r7, r3
    2802:	1e51      	subs	r1, r2, #1
    2804:	418a      	sbcs	r2, r1
    2806:	701a      	strb	r2, [r3, #0]
	uint32_t              len = xfer->size;
    2808:	687b      	ldr	r3, [r7, #4]
    280a:	685b      	ldr	r3, [r3, #4]
    280c:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    280e:	231f      	movs	r3, #31
    2810:	18fb      	adds	r3, r7, r3
    2812:	781b      	ldrb	r3, [r3, #0]
    2814:	2b7f      	cmp	r3, #127	; 0x7f
    2816:	d902      	bls.n	281e <usb_d_ep_transfer+0x62>
		return -USB_ERR_PARAM;
    2818:	2312      	movs	r3, #18
    281a:	425b      	negs	r3, r3
    281c:	e090      	b.n	2940 <usb_d_ep_transfer+0x184>
	}

	atomic_enter_critical(&flags);
    281e:	2308      	movs	r3, #8
    2820:	18fb      	adds	r3, r7, r3
    2822:	0018      	movs	r0, r3
    2824:	4b4a      	ldr	r3, [pc, #296]	; (2950 <usb_d_ep_transfer+0x194>)
    2826:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    2828:	69bb      	ldr	r3, [r7, #24]
    282a:	789a      	ldrb	r2, [r3, #2]
    282c:	230f      	movs	r3, #15
    282e:	18fb      	adds	r3, r7, r3
    2830:	701a      	strb	r2, [r3, #0]
	if (state == USB_EP_S_IDLE) {
    2832:	230f      	movs	r3, #15
    2834:	18fb      	adds	r3, r7, r3
    2836:	781b      	ldrb	r3, [r3, #0]
    2838:	b2db      	uxtb	r3, r3
    283a:	2b01      	cmp	r3, #1
    283c:	d10c      	bne.n	2858 <usb_d_ep_transfer+0x9c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    283e:	69bb      	ldr	r3, [r7, #24]
    2840:	2203      	movs	r2, #3
    2842:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    2844:	2308      	movs	r3, #8
    2846:	18fb      	adds	r3, r7, r3
    2848:	0018      	movs	r0, r3
    284a:	4b42      	ldr	r3, [pc, #264]	; (2954 <usb_d_ep_transfer+0x198>)
    284c:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    284e:	69bb      	ldr	r3, [r7, #24]
    2850:	781b      	ldrb	r3, [r3, #0]
    2852:	2b00      	cmp	r3, #0
    2854:	d161      	bne.n	291a <usb_d_ep_transfer+0x15e>
    2856:	e019      	b.n	288c <usb_d_ep_transfer+0xd0>
		atomic_leave_critical(&flags);
    2858:	2308      	movs	r3, #8
    285a:	18fb      	adds	r3, r7, r3
    285c:	0018      	movs	r0, r3
    285e:	4b3d      	ldr	r3, [pc, #244]	; (2954 <usb_d_ep_transfer+0x198>)
    2860:	4798      	blx	r3
		switch (state) {
    2862:	230f      	movs	r3, #15
    2864:	18fb      	adds	r3, r7, r3
    2866:	781b      	ldrb	r3, [r3, #0]
    2868:	b2db      	uxtb	r3, r3
    286a:	2b05      	cmp	r3, #5
    286c:	d004      	beq.n	2878 <usb_d_ep_transfer+0xbc>
    286e:	2b06      	cmp	r3, #6
    2870:	d004      	beq.n	287c <usb_d_ep_transfer+0xc0>
    2872:	2b00      	cmp	r3, #0
    2874:	d005      	beq.n	2882 <usb_d_ep_transfer+0xc6>
    2876:	e007      	b.n	2888 <usb_d_ep_transfer+0xcc>
			return USB_HALTED;
    2878:	2302      	movs	r3, #2
    287a:	e061      	b.n	2940 <usb_d_ep_transfer+0x184>
			return -USB_ERROR;
    287c:	2310      	movs	r3, #16
    287e:	425b      	negs	r3, r3
    2880:	e05e      	b.n	2940 <usb_d_ep_transfer+0x184>
			return -USB_ERR_FUNC;
    2882:	2313      	movs	r3, #19
    2884:	425b      	negs	r3, r3
    2886:	e05b      	b.n	2940 <usb_d_ep_transfer+0x184>
			return USB_BUSY;
    2888:	2301      	movs	r3, #1
    288a:	e059      	b.n	2940 <usb_d_ep_transfer+0x184>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    288c:	69bb      	ldr	r3, [r7, #24]
    288e:	7c9b      	ldrb	r3, [r3, #18]
    2890:	b299      	uxth	r1, r3
    2892:	69bb      	ldr	r3, [r7, #24]
    2894:	7cdb      	ldrb	r3, [r3, #19]
    2896:	b29b      	uxth	r3, r3
    2898:	021b      	lsls	r3, r3, #8
    289a:	b29a      	uxth	r2, r3
    289c:	2316      	movs	r3, #22
    289e:	18fb      	adds	r3, r7, r3
    28a0:	188a      	adds	r2, r1, r2
    28a2:	801a      	strh	r2, [r3, #0]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    28a4:	2316      	movs	r3, #22
    28a6:	18fb      	adds	r3, r7, r3
    28a8:	881b      	ldrh	r3, [r3, #0]
    28aa:	2b00      	cmp	r3, #0
    28ac:	d10d      	bne.n	28ca <usb_d_ep_transfer+0x10e>
			dir                 = true;
    28ae:	2327      	movs	r3, #39	; 0x27
    28b0:	18fb      	adds	r3, r7, r3
    28b2:	2201      	movs	r2, #1
    28b4:	701a      	strb	r2, [r3, #0]
			len                 = 0;
    28b6:	2300      	movs	r3, #0
    28b8:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    28ba:	2326      	movs	r3, #38	; 0x26
    28bc:	18fb      	adds	r3, r7, r3
    28be:	2201      	movs	r2, #1
    28c0:	701a      	strb	r2, [r3, #0]
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    28c2:	69bb      	ldr	r3, [r7, #24]
    28c4:	2204      	movs	r2, #4
    28c6:	709a      	strb	r2, [r3, #2]
    28c8:	e027      	b.n	291a <usb_d_ep_transfer+0x15e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    28ca:	69bb      	ldr	r3, [r7, #24]
    28cc:	7b1b      	ldrb	r3, [r3, #12]
    28ce:	001a      	movs	r2, r3
    28d0:	2380      	movs	r3, #128	; 0x80
    28d2:	401a      	ands	r2, r3
    28d4:	2327      	movs	r3, #39	; 0x27
    28d6:	18fb      	adds	r3, r7, r3
    28d8:	1e51      	subs	r1, r2, #1
    28da:	418a      	sbcs	r2, r1
    28dc:	701a      	strb	r2, [r3, #0]
			/* Data length not exceed requested. */
			if (len > req_len) {
    28de:	2316      	movs	r3, #22
    28e0:	18fb      	adds	r3, r7, r3
    28e2:	881a      	ldrh	r2, [r3, #0]
    28e4:	6a3b      	ldr	r3, [r7, #32]
    28e6:	429a      	cmp	r2, r3
    28e8:	d203      	bcs.n	28f2 <usb_d_ep_transfer+0x136>
				len = req_len;
    28ea:	2316      	movs	r3, #22
    28ec:	18fb      	adds	r3, r7, r3
    28ee:	881b      	ldrh	r3, [r3, #0]
    28f0:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    28f2:	2327      	movs	r3, #39	; 0x27
    28f4:	18fb      	adds	r3, r7, r3
    28f6:	781b      	ldrb	r3, [r3, #0]
    28f8:	2b00      	cmp	r3, #0
    28fa:	d00a      	beq.n	2912 <usb_d_ep_transfer+0x156>
				/* Setup -> In */
				zlp = (req_len > len);
    28fc:	2316      	movs	r3, #22
    28fe:	18fb      	adds	r3, r7, r3
    2900:	881a      	ldrh	r2, [r3, #0]
    2902:	2326      	movs	r3, #38	; 0x26
    2904:	18fb      	adds	r3, r7, r3
    2906:	6a39      	ldr	r1, [r7, #32]
    2908:	4291      	cmp	r1, r2
    290a:	4192      	sbcs	r2, r2
    290c:	4252      	negs	r2, r2
    290e:	701a      	strb	r2, [r3, #0]
    2910:	e003      	b.n	291a <usb_d_ep_transfer+0x15e>
			} else {
				zlp = false;
    2912:	2326      	movs	r3, #38	; 0x26
    2914:	18fb      	adds	r3, r7, r3
    2916:	2200      	movs	r2, #0
    2918:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    291a:	687b      	ldr	r3, [r7, #4]
    291c:	7a18      	ldrb	r0, [r3, #8]
    291e:	687b      	ldr	r3, [r7, #4]
    2920:	681c      	ldr	r4, [r3, #0]
    2922:	2326      	movs	r3, #38	; 0x26
    2924:	18fb      	adds	r3, r7, r3
    2926:	781b      	ldrb	r3, [r3, #0]
    2928:	6a3d      	ldr	r5, [r7, #32]
    292a:	2227      	movs	r2, #39	; 0x27
    292c:	18ba      	adds	r2, r7, r2
    292e:	7811      	ldrb	r1, [r2, #0]
    2930:	9300      	str	r3, [sp, #0]
    2932:	002b      	movs	r3, r5
    2934:	0022      	movs	r2, r4
    2936:	4c08      	ldr	r4, [pc, #32]	; (2958 <usb_d_ep_transfer+0x19c>)
    2938:	47a0      	blx	r4
    293a:	0003      	movs	r3, r0
    293c:	613b      	str	r3, [r7, #16]
	return rc;
    293e:	693b      	ldr	r3, [r7, #16]
}
    2940:	0018      	movs	r0, r3
    2942:	46bd      	mov	sp, r7
    2944:	b00a      	add	sp, #40	; 0x28
    2946:	bdb0      	pop	{r4, r5, r7, pc}
    2948:	00002049 	.word	0x00002049
    294c:	20000c88 	.word	0x20000c88
    2950:	00001a91 	.word	0x00001a91
    2954:	00001ab3 	.word	0x00001ab3
    2958:	000020ed 	.word	0x000020ed

0000295c <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    295c:	b590      	push	{r4, r7, lr}
    295e:	b087      	sub	sp, #28
    2960:	af00      	add	r7, sp, #0
    2962:	0002      	movs	r2, r0
    2964:	1dfb      	adds	r3, r7, #7
    2966:	701a      	strb	r2, [r3, #0]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2968:	2317      	movs	r3, #23
    296a:	18fc      	adds	r4, r7, r3
    296c:	1dfb      	adds	r3, r7, #7
    296e:	781b      	ldrb	r3, [r3, #0]
    2970:	0018      	movs	r0, r3
    2972:	4b1d      	ldr	r3, [pc, #116]	; (29e8 <_usb_d_ep_halt_clr+0x8c>)
    2974:	4798      	blx	r3
    2976:	0003      	movs	r3, r0
    2978:	7023      	strb	r3, [r4, #0]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    297a:	2317      	movs	r3, #23
    297c:	18fb      	adds	r3, r7, r3
    297e:	781b      	ldrb	r3, [r3, #0]
    2980:	b25b      	sxtb	r3, r3
    2982:	015a      	lsls	r2, r3, #5
    2984:	4b19      	ldr	r3, [pc, #100]	; (29ec <_usb_d_ep_halt_clr+0x90>)
    2986:	18d3      	adds	r3, r2, r3
    2988:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    298a:	2317      	movs	r3, #23
    298c:	18fb      	adds	r3, r7, r3
    298e:	781b      	ldrb	r3, [r3, #0]
    2990:	2b7f      	cmp	r3, #127	; 0x7f
    2992:	d902      	bls.n	299a <_usb_d_ep_halt_clr+0x3e>
		return -USB_ERR_PARAM;
    2994:	2312      	movs	r3, #18
    2996:	425b      	negs	r3, r3
    2998:	e022      	b.n	29e0 <_usb_d_ep_halt_clr+0x84>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    299a:	1dfb      	adds	r3, r7, #7
    299c:	781b      	ldrb	r3, [r3, #0]
    299e:	2102      	movs	r1, #2
    29a0:	0018      	movs	r0, r3
    29a2:	4b13      	ldr	r3, [pc, #76]	; (29f0 <_usb_d_ep_halt_clr+0x94>)
    29a4:	4798      	blx	r3
    29a6:	1e03      	subs	r3, r0, #0
    29a8:	d019      	beq.n	29de <_usb_d_ep_halt_clr+0x82>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    29aa:	1dfb      	adds	r3, r7, #7
    29ac:	781b      	ldrb	r3, [r3, #0]
    29ae:	2100      	movs	r1, #0
    29b0:	0018      	movs	r0, r3
    29b2:	4b0f      	ldr	r3, [pc, #60]	; (29f0 <_usb_d_ep_halt_clr+0x94>)
    29b4:	4798      	blx	r3
    29b6:	0003      	movs	r3, r0
    29b8:	60fb      	str	r3, [r7, #12]
		if (rc < 0) {
    29ba:	68fb      	ldr	r3, [r7, #12]
    29bc:	2b00      	cmp	r3, #0
    29be:	da01      	bge.n	29c4 <_usb_d_ep_halt_clr+0x68>
			return rc;
    29c0:	68fb      	ldr	r3, [r7, #12]
    29c2:	e00d      	b.n	29e0 <_usb_d_ep_halt_clr+0x84>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    29c4:	693b      	ldr	r3, [r7, #16]
    29c6:	2201      	movs	r2, #1
    29c8:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    29ca:	693b      	ldr	r3, [r7, #16]
    29cc:	2203      	movs	r2, #3
    29ce:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    29d0:	693b      	ldr	r3, [r7, #16]
    29d2:	69db      	ldr	r3, [r3, #28]
    29d4:	1dfa      	adds	r2, r7, #7
    29d6:	7810      	ldrb	r0, [r2, #0]
    29d8:	2200      	movs	r2, #0
    29da:	2103      	movs	r1, #3
    29dc:	4798      	blx	r3
	}
	return ERR_NONE;
    29de:	2300      	movs	r3, #0
}
    29e0:	0018      	movs	r0, r3
    29e2:	46bd      	mov	sp, r7
    29e4:	b007      	add	sp, #28
    29e6:	bd90      	pop	{r4, r7, pc}
    29e8:	00002049 	.word	0x00002049
    29ec:	20000c88 	.word	0x20000c88
    29f0:	00006da1 	.word	0x00006da1

000029f4 <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    29f4:	b580      	push	{r7, lr}
    29f6:	b082      	sub	sp, #8
    29f8:	af00      	add	r7, sp, #0
    29fa:	0002      	movs	r2, r0
    29fc:	1dfb      	adds	r3, r7, #7
    29fe:	701a      	strb	r2, [r3, #0]
    2a00:	1dbb      	adds	r3, r7, #6
    2a02:	1c0a      	adds	r2, r1, #0
    2a04:	701a      	strb	r2, [r3, #0]
	if (ctrl == USB_EP_HALT_CLR) {
    2a06:	1dbb      	adds	r3, r7, #6
    2a08:	781b      	ldrb	r3, [r3, #0]
    2a0a:	2b00      	cmp	r3, #0
    2a0c:	d106      	bne.n	2a1c <usb_d_ep_halt+0x28>
		return _usb_d_ep_halt_clr(ep);
    2a0e:	1dfb      	adds	r3, r7, #7
    2a10:	781b      	ldrb	r3, [r3, #0]
    2a12:	0018      	movs	r0, r3
    2a14:	4b0d      	ldr	r3, [pc, #52]	; (2a4c <usb_d_ep_halt+0x58>)
    2a16:	4798      	blx	r3
    2a18:	0003      	movs	r3, r0
    2a1a:	e012      	b.n	2a42 <usb_d_ep_halt+0x4e>
	} else if (ctrl == USB_EP_HALT_SET) {
    2a1c:	1dbb      	adds	r3, r7, #6
    2a1e:	781b      	ldrb	r3, [r3, #0]
    2a20:	2b01      	cmp	r3, #1
    2a22:	d107      	bne.n	2a34 <usb_d_ep_halt+0x40>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2a24:	1dfb      	adds	r3, r7, #7
    2a26:	781b      	ldrb	r3, [r3, #0]
    2a28:	2101      	movs	r1, #1
    2a2a:	0018      	movs	r0, r3
    2a2c:	4b08      	ldr	r3, [pc, #32]	; (2a50 <usb_d_ep_halt+0x5c>)
    2a2e:	4798      	blx	r3
    2a30:	0003      	movs	r3, r0
    2a32:	e006      	b.n	2a42 <usb_d_ep_halt+0x4e>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    2a34:	1dfb      	adds	r3, r7, #7
    2a36:	781b      	ldrb	r3, [r3, #0]
    2a38:	2102      	movs	r1, #2
    2a3a:	0018      	movs	r0, r3
    2a3c:	4b04      	ldr	r3, [pc, #16]	; (2a50 <usb_d_ep_halt+0x5c>)
    2a3e:	4798      	blx	r3
    2a40:	0003      	movs	r3, r0
	}
}
    2a42:	0018      	movs	r0, r3
    2a44:	46bd      	mov	sp, r7
    2a46:	b002      	add	sp, #8
    2a48:	bd80      	pop	{r7, pc}
    2a4a:	46c0      	nop			; (mov r8, r8)
    2a4c:	0000295d 	.word	0x0000295d
    2a50:	00006da1 	.word	0x00006da1

00002a54 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    2a54:	b590      	push	{r4, r7, lr}
    2a56:	b087      	sub	sp, #28
    2a58:	af00      	add	r7, sp, #0
    2a5a:	603a      	str	r2, [r7, #0]
    2a5c:	1dfb      	adds	r3, r7, #7
    2a5e:	1c02      	adds	r2, r0, #0
    2a60:	701a      	strb	r2, [r3, #0]
    2a62:	1dbb      	adds	r3, r7, #6
    2a64:	1c0a      	adds	r2, r1, #0
    2a66:	701a      	strb	r2, [r3, #0]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2a68:	2317      	movs	r3, #23
    2a6a:	18fc      	adds	r4, r7, r3
    2a6c:	1dfb      	adds	r3, r7, #7
    2a6e:	781b      	ldrb	r3, [r3, #0]
    2a70:	0018      	movs	r0, r3
    2a72:	4b18      	ldr	r3, [pc, #96]	; (2ad4 <usb_d_ep_register_callback+0x80>)
    2a74:	4798      	blx	r3
    2a76:	0003      	movs	r3, r0
    2a78:	7023      	strb	r3, [r4, #0]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2a7a:	2317      	movs	r3, #23
    2a7c:	18fb      	adds	r3, r7, r3
    2a7e:	781b      	ldrb	r3, [r3, #0]
    2a80:	b25b      	sxtb	r3, r3
    2a82:	015a      	lsls	r2, r3, #5
    2a84:	4b14      	ldr	r3, [pc, #80]	; (2ad8 <usb_d_ep_register_callback+0x84>)
    2a86:	18d3      	adds	r3, r2, r3
    2a88:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    2a8a:	683b      	ldr	r3, [r7, #0]
    2a8c:	2b00      	cmp	r3, #0
    2a8e:	d001      	beq.n	2a94 <usb_d_ep_register_callback+0x40>
    2a90:	683b      	ldr	r3, [r7, #0]
    2a92:	e000      	b.n	2a96 <usb_d_ep_register_callback+0x42>
    2a94:	4b11      	ldr	r3, [pc, #68]	; (2adc <usb_d_ep_register_callback+0x88>)
    2a96:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    2a98:	2317      	movs	r3, #23
    2a9a:	18fb      	adds	r3, r7, r3
    2a9c:	781b      	ldrb	r3, [r3, #0]
    2a9e:	2b7f      	cmp	r3, #127	; 0x7f
    2aa0:	d814      	bhi.n	2acc <usb_d_ep_register_callback+0x78>
		return;
	}
	switch (type) {
    2aa2:	1dbb      	adds	r3, r7, #6
    2aa4:	781b      	ldrb	r3, [r3, #0]
    2aa6:	2b01      	cmp	r3, #1
    2aa8:	d008      	beq.n	2abc <usb_d_ep_register_callback+0x68>
    2aaa:	2b02      	cmp	r3, #2
    2aac:	d00a      	beq.n	2ac4 <usb_d_ep_register_callback+0x70>
    2aae:	2b00      	cmp	r3, #0
    2ab0:	d000      	beq.n	2ab4 <usb_d_ep_register_callback+0x60>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    2ab2:	e00c      	b.n	2ace <usb_d_ep_register_callback+0x7a>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    2ab4:	693b      	ldr	r3, [r7, #16]
    2ab6:	68fa      	ldr	r2, [r7, #12]
    2ab8:	615a      	str	r2, [r3, #20]
		break;
    2aba:	e008      	b.n	2ace <usb_d_ep_register_callback+0x7a>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    2abc:	693b      	ldr	r3, [r7, #16]
    2abe:	68fa      	ldr	r2, [r7, #12]
    2ac0:	619a      	str	r2, [r3, #24]
		break;
    2ac2:	e004      	b.n	2ace <usb_d_ep_register_callback+0x7a>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    2ac4:	693b      	ldr	r3, [r7, #16]
    2ac6:	68fa      	ldr	r2, [r7, #12]
    2ac8:	61da      	str	r2, [r3, #28]
		break;
    2aca:	e000      	b.n	2ace <usb_d_ep_register_callback+0x7a>
		return;
    2acc:	46c0      	nop			; (mov r8, r8)
	}
}
    2ace:	46bd      	mov	sp, r7
    2ad0:	b007      	add	sp, #28
    2ad2:	bd90      	pop	{r4, r7, pc}
    2ad4:	00002049 	.word	0x00002049
    2ad8:	20000c88 	.word	0x20000c88
    2adc:	00002169 	.word	0x00002169

00002ae0 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    2ae0:	b580      	push	{r7, lr}
    2ae2:	b084      	sub	sp, #16
    2ae4:	af00      	add	r7, sp, #0
    2ae6:	60b9      	str	r1, [r7, #8]
    2ae8:	607a      	str	r2, [r7, #4]
    2aea:	230f      	movs	r3, #15
    2aec:	18fb      	adds	r3, r7, r3
    2aee:	1c02      	adds	r2, r0, #0
    2af0:	701a      	strb	r2, [r3, #0]
	if (!(condition)) {
    2af2:	230f      	movs	r3, #15
    2af4:	18fb      	adds	r3, r7, r3
    2af6:	781b      	ldrb	r3, [r3, #0]
    2af8:	2201      	movs	r2, #1
    2afa:	4053      	eors	r3, r2
    2afc:	b2db      	uxtb	r3, r3
    2afe:	2b00      	cmp	r3, #0
    2b00:	d000      	beq.n	2b04 <assert+0x24>
		__asm("BKPT #0");
    2b02:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    2b04:	46c0      	nop			; (mov r8, r8)
    2b06:	46bd      	mov	sp, r7
    2b08:	b004      	add	sp, #16
    2b0a:	bd80      	pop	{r7, pc}

00002b0c <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    2b0c:	b590      	push	{r4, r7, lr}
    2b0e:	b083      	sub	sp, #12
    2b10:	af00      	add	r7, sp, #0
    2b12:	6039      	str	r1, [r7, #0]
    2b14:	0011      	movs	r1, r2
    2b16:	1dbb      	adds	r3, r7, #6
    2b18:	1c02      	adds	r2, r0, #0
    2b1a:	801a      	strh	r2, [r3, #0]
    2b1c:	1d7b      	adds	r3, r7, #5
    2b1e:	1c0a      	adds	r2, r1, #0
    2b20:	701a      	strb	r2, [r3, #0]
	switch (power) {
    2b22:	1d7b      	adds	r3, r7, #5
    2b24:	781b      	ldrb	r3, [r3, #0]
    2b26:	3b04      	subs	r3, #4
    2b28:	2b04      	cmp	r3, #4
    2b2a:	d859      	bhi.n	2be0 <_get_cycles_for_us_internal+0xd4>
    2b2c:	009a      	lsls	r2, r3, #2
    2b2e:	4b34      	ldr	r3, [pc, #208]	; (2c00 <_get_cycles_for_us_internal+0xf4>)
    2b30:	18d3      	adds	r3, r2, r3
    2b32:	681b      	ldr	r3, [r3, #0]
    2b34:	469f      	mov	pc, r3
	case 8:
		return (us * (freq / 100000) - 1) / 10 + 1;
    2b36:	1dbb      	adds	r3, r7, #6
    2b38:	881c      	ldrh	r4, [r3, #0]
    2b3a:	683a      	ldr	r2, [r7, #0]
    2b3c:	4b31      	ldr	r3, [pc, #196]	; (2c04 <_get_cycles_for_us_internal+0xf8>)
    2b3e:	4932      	ldr	r1, [pc, #200]	; (2c08 <_get_cycles_for_us_internal+0xfc>)
    2b40:	0010      	movs	r0, r2
    2b42:	4798      	blx	r3
    2b44:	0003      	movs	r3, r0
    2b46:	4363      	muls	r3, r4
    2b48:	1e5a      	subs	r2, r3, #1
    2b4a:	4b2e      	ldr	r3, [pc, #184]	; (2c04 <_get_cycles_for_us_internal+0xf8>)
    2b4c:	210a      	movs	r1, #10
    2b4e:	0010      	movs	r0, r2
    2b50:	4798      	blx	r3
    2b52:	0003      	movs	r3, r0
    2b54:	3301      	adds	r3, #1
    2b56:	e04e      	b.n	2bf6 <_get_cycles_for_us_internal+0xea>
	case 7:
		return (us * (freq / 10000) - 1) / 100 + 1;
    2b58:	1dbb      	adds	r3, r7, #6
    2b5a:	881c      	ldrh	r4, [r3, #0]
    2b5c:	683a      	ldr	r2, [r7, #0]
    2b5e:	4b29      	ldr	r3, [pc, #164]	; (2c04 <_get_cycles_for_us_internal+0xf8>)
    2b60:	492a      	ldr	r1, [pc, #168]	; (2c0c <_get_cycles_for_us_internal+0x100>)
    2b62:	0010      	movs	r0, r2
    2b64:	4798      	blx	r3
    2b66:	0003      	movs	r3, r0
    2b68:	4363      	muls	r3, r4
    2b6a:	1e5a      	subs	r2, r3, #1
    2b6c:	4b25      	ldr	r3, [pc, #148]	; (2c04 <_get_cycles_for_us_internal+0xf8>)
    2b6e:	2164      	movs	r1, #100	; 0x64
    2b70:	0010      	movs	r0, r2
    2b72:	4798      	blx	r3
    2b74:	0003      	movs	r3, r0
    2b76:	3301      	adds	r3, #1
    2b78:	e03d      	b.n	2bf6 <_get_cycles_for_us_internal+0xea>
	case 6:
		return (us * (freq / 1000) - 1) / 1000 + 1;
    2b7a:	1dbb      	adds	r3, r7, #6
    2b7c:	881c      	ldrh	r4, [r3, #0]
    2b7e:	6838      	ldr	r0, [r7, #0]
    2b80:	4b20      	ldr	r3, [pc, #128]	; (2c04 <_get_cycles_for_us_internal+0xf8>)
    2b82:	22fa      	movs	r2, #250	; 0xfa
    2b84:	0091      	lsls	r1, r2, #2
    2b86:	4798      	blx	r3
    2b88:	0003      	movs	r3, r0
    2b8a:	4363      	muls	r3, r4
    2b8c:	1e58      	subs	r0, r3, #1
    2b8e:	4b1d      	ldr	r3, [pc, #116]	; (2c04 <_get_cycles_for_us_internal+0xf8>)
    2b90:	22fa      	movs	r2, #250	; 0xfa
    2b92:	0091      	lsls	r1, r2, #2
    2b94:	4798      	blx	r3
    2b96:	0003      	movs	r3, r0
    2b98:	3301      	adds	r3, #1
    2b9a:	e02c      	b.n	2bf6 <_get_cycles_for_us_internal+0xea>
	case 5:
		return (us * (freq / 100) - 1) / 10000 + 1;
    2b9c:	1dbb      	adds	r3, r7, #6
    2b9e:	881c      	ldrh	r4, [r3, #0]
    2ba0:	683a      	ldr	r2, [r7, #0]
    2ba2:	4b18      	ldr	r3, [pc, #96]	; (2c04 <_get_cycles_for_us_internal+0xf8>)
    2ba4:	2164      	movs	r1, #100	; 0x64
    2ba6:	0010      	movs	r0, r2
    2ba8:	4798      	blx	r3
    2baa:	0003      	movs	r3, r0
    2bac:	4363      	muls	r3, r4
    2bae:	1e5a      	subs	r2, r3, #1
    2bb0:	4b14      	ldr	r3, [pc, #80]	; (2c04 <_get_cycles_for_us_internal+0xf8>)
    2bb2:	4916      	ldr	r1, [pc, #88]	; (2c0c <_get_cycles_for_us_internal+0x100>)
    2bb4:	0010      	movs	r0, r2
    2bb6:	4798      	blx	r3
    2bb8:	0003      	movs	r3, r0
    2bba:	3301      	adds	r3, #1
    2bbc:	e01b      	b.n	2bf6 <_get_cycles_for_us_internal+0xea>
	case 4:
		return (us * (freq / 10) - 1) / 100000 + 1;
    2bbe:	1dbb      	adds	r3, r7, #6
    2bc0:	881c      	ldrh	r4, [r3, #0]
    2bc2:	683a      	ldr	r2, [r7, #0]
    2bc4:	4b0f      	ldr	r3, [pc, #60]	; (2c04 <_get_cycles_for_us_internal+0xf8>)
    2bc6:	210a      	movs	r1, #10
    2bc8:	0010      	movs	r0, r2
    2bca:	4798      	blx	r3
    2bcc:	0003      	movs	r3, r0
    2bce:	4363      	muls	r3, r4
    2bd0:	1e5a      	subs	r2, r3, #1
    2bd2:	4b0c      	ldr	r3, [pc, #48]	; (2c04 <_get_cycles_for_us_internal+0xf8>)
    2bd4:	490c      	ldr	r1, [pc, #48]	; (2c08 <_get_cycles_for_us_internal+0xfc>)
    2bd6:	0010      	movs	r0, r2
    2bd8:	4798      	blx	r3
    2bda:	0003      	movs	r3, r0
    2bdc:	3301      	adds	r3, #1
    2bde:	e00a      	b.n	2bf6 <_get_cycles_for_us_internal+0xea>
	default:
		return (us * freq - 1) / 1000000 + 1;
    2be0:	1dbb      	adds	r3, r7, #6
    2be2:	881b      	ldrh	r3, [r3, #0]
    2be4:	683a      	ldr	r2, [r7, #0]
    2be6:	4353      	muls	r3, r2
    2be8:	1e5a      	subs	r2, r3, #1
    2bea:	4b06      	ldr	r3, [pc, #24]	; (2c04 <_get_cycles_for_us_internal+0xf8>)
    2bec:	4908      	ldr	r1, [pc, #32]	; (2c10 <_get_cycles_for_us_internal+0x104>)
    2bee:	0010      	movs	r0, r2
    2bf0:	4798      	blx	r3
    2bf2:	0003      	movs	r3, r0
    2bf4:	3301      	adds	r3, #1
	}
}
    2bf6:	0018      	movs	r0, r3
    2bf8:	46bd      	mov	sp, r7
    2bfa:	b003      	add	sp, #12
    2bfc:	bd90      	pop	{r4, r7, pc}
    2bfe:	46c0      	nop			; (mov r8, r8)
    2c00:	00010d54 	.word	0x00010d54
    2c04:	00008d0d 	.word	0x00008d0d
    2c08:	000186a0 	.word	0x000186a0
    2c0c:	00002710 	.word	0x00002710
    2c10:	000f4240 	.word	0x000f4240

00002c14 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    2c14:	b590      	push	{r4, r7, lr}
    2c16:	b083      	sub	sp, #12
    2c18:	af00      	add	r7, sp, #0
    2c1a:	6039      	str	r1, [r7, #0]
    2c1c:	0011      	movs	r1, r2
    2c1e:	1dbb      	adds	r3, r7, #6
    2c20:	1c02      	adds	r2, r0, #0
    2c22:	801a      	strh	r2, [r3, #0]
    2c24:	1d7b      	adds	r3, r7, #5
    2c26:	1c0a      	adds	r2, r1, #0
    2c28:	701a      	strb	r2, [r3, #0]
	switch (power) {
    2c2a:	1d7b      	adds	r3, r7, #5
    2c2c:	781b      	ldrb	r3, [r3, #0]
    2c2e:	3b04      	subs	r3, #4
    2c30:	2b04      	cmp	r3, #4
    2c32:	d84b      	bhi.n	2ccc <_get_cycles_for_ms_internal+0xb8>
    2c34:	009a      	lsls	r2, r3, #2
    2c36:	4b2d      	ldr	r3, [pc, #180]	; (2cec <_get_cycles_for_ms_internal+0xd8>)
    2c38:	18d3      	adds	r3, r2, r3
    2c3a:	681b      	ldr	r3, [r3, #0]
    2c3c:	469f      	mov	pc, r3
	case 8:
		return (ms * (freq / 100000)) * 100;
    2c3e:	1dbb      	adds	r3, r7, #6
    2c40:	881c      	ldrh	r4, [r3, #0]
    2c42:	683a      	ldr	r2, [r7, #0]
    2c44:	4b2a      	ldr	r3, [pc, #168]	; (2cf0 <_get_cycles_for_ms_internal+0xdc>)
    2c46:	492b      	ldr	r1, [pc, #172]	; (2cf4 <_get_cycles_for_ms_internal+0xe0>)
    2c48:	0010      	movs	r0, r2
    2c4a:	4798      	blx	r3
    2c4c:	0003      	movs	r3, r0
    2c4e:	4363      	muls	r3, r4
    2c50:	2264      	movs	r2, #100	; 0x64
    2c52:	4353      	muls	r3, r2
    2c54:	e045      	b.n	2ce2 <_get_cycles_for_ms_internal+0xce>
	case 7:
		return (ms * (freq / 10000)) * 10;
    2c56:	1dbb      	adds	r3, r7, #6
    2c58:	881c      	ldrh	r4, [r3, #0]
    2c5a:	683a      	ldr	r2, [r7, #0]
    2c5c:	4b24      	ldr	r3, [pc, #144]	; (2cf0 <_get_cycles_for_ms_internal+0xdc>)
    2c5e:	4926      	ldr	r1, [pc, #152]	; (2cf8 <_get_cycles_for_ms_internal+0xe4>)
    2c60:	0010      	movs	r0, r2
    2c62:	4798      	blx	r3
    2c64:	0003      	movs	r3, r0
    2c66:	4363      	muls	r3, r4
    2c68:	001a      	movs	r2, r3
    2c6a:	0013      	movs	r3, r2
    2c6c:	009b      	lsls	r3, r3, #2
    2c6e:	189b      	adds	r3, r3, r2
    2c70:	005b      	lsls	r3, r3, #1
    2c72:	e036      	b.n	2ce2 <_get_cycles_for_ms_internal+0xce>
	case 6:
		return (ms * (freq / 1000));
    2c74:	1dbb      	adds	r3, r7, #6
    2c76:	881c      	ldrh	r4, [r3, #0]
    2c78:	6838      	ldr	r0, [r7, #0]
    2c7a:	4b1d      	ldr	r3, [pc, #116]	; (2cf0 <_get_cycles_for_ms_internal+0xdc>)
    2c7c:	22fa      	movs	r2, #250	; 0xfa
    2c7e:	0091      	lsls	r1, r2, #2
    2c80:	4798      	blx	r3
    2c82:	0003      	movs	r3, r0
    2c84:	4363      	muls	r3, r4
    2c86:	e02c      	b.n	2ce2 <_get_cycles_for_ms_internal+0xce>
	case 5:
		return (ms * (freq / 100) - 1) / 10 + 1;
    2c88:	1dbb      	adds	r3, r7, #6
    2c8a:	881c      	ldrh	r4, [r3, #0]
    2c8c:	683a      	ldr	r2, [r7, #0]
    2c8e:	4b18      	ldr	r3, [pc, #96]	; (2cf0 <_get_cycles_for_ms_internal+0xdc>)
    2c90:	2164      	movs	r1, #100	; 0x64
    2c92:	0010      	movs	r0, r2
    2c94:	4798      	blx	r3
    2c96:	0003      	movs	r3, r0
    2c98:	4363      	muls	r3, r4
    2c9a:	1e5a      	subs	r2, r3, #1
    2c9c:	4b14      	ldr	r3, [pc, #80]	; (2cf0 <_get_cycles_for_ms_internal+0xdc>)
    2c9e:	210a      	movs	r1, #10
    2ca0:	0010      	movs	r0, r2
    2ca2:	4798      	blx	r3
    2ca4:	0003      	movs	r3, r0
    2ca6:	3301      	adds	r3, #1
    2ca8:	e01b      	b.n	2ce2 <_get_cycles_for_ms_internal+0xce>
	case 4:
		return (ms * (freq / 10) - 1) / 100 + 1;
    2caa:	1dbb      	adds	r3, r7, #6
    2cac:	881c      	ldrh	r4, [r3, #0]
    2cae:	683a      	ldr	r2, [r7, #0]
    2cb0:	4b0f      	ldr	r3, [pc, #60]	; (2cf0 <_get_cycles_for_ms_internal+0xdc>)
    2cb2:	210a      	movs	r1, #10
    2cb4:	0010      	movs	r0, r2
    2cb6:	4798      	blx	r3
    2cb8:	0003      	movs	r3, r0
    2cba:	4363      	muls	r3, r4
    2cbc:	1e5a      	subs	r2, r3, #1
    2cbe:	4b0c      	ldr	r3, [pc, #48]	; (2cf0 <_get_cycles_for_ms_internal+0xdc>)
    2cc0:	2164      	movs	r1, #100	; 0x64
    2cc2:	0010      	movs	r0, r2
    2cc4:	4798      	blx	r3
    2cc6:	0003      	movs	r3, r0
    2cc8:	3301      	adds	r3, #1
    2cca:	e00a      	b.n	2ce2 <_get_cycles_for_ms_internal+0xce>
	default:
		return (ms * freq - 1) / 1000 + 1;
    2ccc:	1dbb      	adds	r3, r7, #6
    2cce:	881b      	ldrh	r3, [r3, #0]
    2cd0:	683a      	ldr	r2, [r7, #0]
    2cd2:	4353      	muls	r3, r2
    2cd4:	1e58      	subs	r0, r3, #1
    2cd6:	4b06      	ldr	r3, [pc, #24]	; (2cf0 <_get_cycles_for_ms_internal+0xdc>)
    2cd8:	22fa      	movs	r2, #250	; 0xfa
    2cda:	0091      	lsls	r1, r2, #2
    2cdc:	4798      	blx	r3
    2cde:	0003      	movs	r3, r0
    2ce0:	3301      	adds	r3, #1
	}
}
    2ce2:	0018      	movs	r0, r3
    2ce4:	46bd      	mov	sp, r7
    2ce6:	b003      	add	sp, #12
    2ce8:	bd90      	pop	{r4, r7, pc}
    2cea:	46c0      	nop			; (mov r8, r8)
    2cec:	00010d68 	.word	0x00010d68
    2cf0:	00008d0d 	.word	0x00008d0d
    2cf4:	000186a0 	.word	0x000186a0
    2cf8:	00002710 	.word	0x00002710

00002cfc <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    2cfc:	b580      	push	{r7, lr}
    2cfe:	b082      	sub	sp, #8
    2d00:	af00      	add	r7, sp, #0
    2d02:	0002      	movs	r2, r0
    2d04:	1dbb      	adds	r3, r7, #6
    2d06:	801a      	strh	r2, [r3, #0]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    2d08:	4905      	ldr	r1, [pc, #20]	; (2d20 <_get_cycles_for_ms+0x24>)
    2d0a:	1dbb      	adds	r3, r7, #6
    2d0c:	881b      	ldrh	r3, [r3, #0]
    2d0e:	2208      	movs	r2, #8
    2d10:	0018      	movs	r0, r3
    2d12:	4b04      	ldr	r3, [pc, #16]	; (2d24 <_get_cycles_for_ms+0x28>)
    2d14:	4798      	blx	r3
    2d16:	0003      	movs	r3, r0
}
    2d18:	0018      	movs	r0, r3
    2d1a:	46bd      	mov	sp, r7
    2d1c:	b002      	add	sp, #8
    2d1e:	bd80      	pop	{r7, pc}
    2d20:	02dc7000 	.word	0x02dc7000
    2d24:	00002c15 	.word	0x00002c15

00002d28 <hri_nvmctrl_set_CTRLB_RWS_bf>:
	((Nvmctrl *)hw)->CTRLB.reg ^= NVMCTRL_CTRLB_CACHEDIS;
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
    2d28:	b580      	push	{r7, lr}
    2d2a:	b082      	sub	sp, #8
    2d2c:	af00      	add	r7, sp, #0
    2d2e:	6078      	str	r0, [r7, #4]
    2d30:	6039      	str	r1, [r7, #0]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    2d32:	687b      	ldr	r3, [r7, #4]
    2d34:	685a      	ldr	r2, [r3, #4]
    2d36:	683b      	ldr	r3, [r7, #0]
    2d38:	005b      	lsls	r3, r3, #1
    2d3a:	211e      	movs	r1, #30
    2d3c:	400b      	ands	r3, r1
    2d3e:	431a      	orrs	r2, r3
    2d40:	687b      	ldr	r3, [r7, #4]
    2d42:	605a      	str	r2, [r3, #4]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    2d44:	46c0      	nop			; (mov r8, r8)
    2d46:	46bd      	mov	sp, r7
    2d48:	b002      	add	sp, #8
    2d4a:	bd80      	pop	{r7, pc}

00002d4c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    2d4c:	b580      	push	{r7, lr}
    2d4e:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    2d50:	4b08      	ldr	r3, [pc, #32]	; (2d74 <_init_chip+0x28>)
    2d52:	2100      	movs	r1, #0
    2d54:	0018      	movs	r0, r3
    2d56:	4b08      	ldr	r3, [pc, #32]	; (2d78 <_init_chip+0x2c>)
    2d58:	4798      	blx	r3

	_pm_init();
    2d5a:	4b08      	ldr	r3, [pc, #32]	; (2d7c <_init_chip+0x30>)
    2d5c:	4798      	blx	r3
	_sysctrl_init_sources();
    2d5e:	4b08      	ldr	r3, [pc, #32]	; (2d80 <_init_chip+0x34>)
    2d60:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
    2d62:	4b08      	ldr	r3, [pc, #32]	; (2d84 <_init_chip+0x38>)
    2d64:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    2d66:	20ff      	movs	r0, #255	; 0xff
    2d68:	4b07      	ldr	r3, [pc, #28]	; (2d88 <_init_chip+0x3c>)
    2d6a:	4798      	blx	r3
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
    2d6c:	46c0      	nop			; (mov r8, r8)
    2d6e:	46bd      	mov	sp, r7
    2d70:	bd80      	pop	{r7, pc}
    2d72:	46c0      	nop			; (mov r8, r8)
    2d74:	41004000 	.word	0x41004000
    2d78:	00002d29 	.word	0x00002d29
    2d7c:	00002fcd 	.word	0x00002fcd
    2d80:	00004221 	.word	0x00004221
    2d84:	00004341 	.word	0x00004341
    2d88:	00002de9 	.word	0x00002de9

00002d8c <hri_gclk_wait_for_sync>:
{
    2d8c:	b580      	push	{r7, lr}
    2d8e:	b082      	sub	sp, #8
    2d90:	af00      	add	r7, sp, #0
    2d92:	6078      	str	r0, [r7, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    2d94:	46c0      	nop			; (mov r8, r8)
    2d96:	687b      	ldr	r3, [r7, #4]
    2d98:	785b      	ldrb	r3, [r3, #1]
    2d9a:	061b      	lsls	r3, r3, #24
    2d9c:	0fdb      	lsrs	r3, r3, #31
    2d9e:	b2db      	uxtb	r3, r3
    2da0:	2b00      	cmp	r3, #0
    2da2:	d1f8      	bne.n	2d96 <hri_gclk_wait_for_sync+0xa>
}
    2da4:	46c0      	nop			; (mov r8, r8)
    2da6:	46bd      	mov	sp, r7
    2da8:	b002      	add	sp, #8
    2daa:	bd80      	pop	{r7, pc}

00002dac <hri_gclk_write_GENCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_GENCTRL_reg(const void *const hw, hri_gclk_genctrl_reg_t data)
{
    2dac:	b580      	push	{r7, lr}
    2dae:	b082      	sub	sp, #8
    2db0:	af00      	add	r7, sp, #0
    2db2:	6078      	str	r0, [r7, #4]
    2db4:	6039      	str	r1, [r7, #0]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENCTRL.reg = data;
    2db6:	687b      	ldr	r3, [r7, #4]
    2db8:	683a      	ldr	r2, [r7, #0]
    2dba:	605a      	str	r2, [r3, #4]
	hri_gclk_wait_for_sync(hw);
    2dbc:	687b      	ldr	r3, [r7, #4]
    2dbe:	0018      	movs	r0, r3
    2dc0:	4b02      	ldr	r3, [pc, #8]	; (2dcc <hri_gclk_write_GENCTRL_reg+0x20>)
    2dc2:	4798      	blx	r3
	GCLK_CRITICAL_SECTION_LEAVE();
}
    2dc4:	46c0      	nop			; (mov r8, r8)
    2dc6:	46bd      	mov	sp, r7
    2dc8:	b002      	add	sp, #8
    2dca:	bd80      	pop	{r7, pc}
    2dcc:	00002d8d 	.word	0x00002d8d

00002dd0 <hri_gclk_write_GENDIV_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
    2dd0:	b580      	push	{r7, lr}
    2dd2:	b082      	sub	sp, #8
    2dd4:	af00      	add	r7, sp, #0
    2dd6:	6078      	str	r0, [r7, #4]
    2dd8:	6039      	str	r1, [r7, #0]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
    2dda:	687b      	ldr	r3, [r7, #4]
    2ddc:	683a      	ldr	r2, [r7, #0]
    2dde:	609a      	str	r2, [r3, #8]
	GCLK_CRITICAL_SECTION_LEAVE();
}
    2de0:	46c0      	nop			; (mov r8, r8)
    2de2:	46bd      	mov	sp, r7
    2de4:	b002      	add	sp, #8
    2de6:	bd80      	pop	{r7, pc}

00002de8 <_gclk_init_generators_by_fref>:
	        | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    2de8:	b580      	push	{r7, lr}
    2dea:	b082      	sub	sp, #8
    2dec:	af00      	add	r7, sp, #0
    2dee:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    2df0:	687b      	ldr	r3, [r7, #4]
    2df2:	2201      	movs	r2, #1
    2df4:	4013      	ands	r3, r2
    2df6:	d00c      	beq.n	2e12 <_gclk_init_generators_by_fref+0x2a>
		hri_gclk_write_GENDIV_reg(GCLK, GCLK_GENDIV_DIV(CONF_GCLK_GEN_0_DIV) | GCLK_GENDIV_ID(0));
    2df8:	2380      	movs	r3, #128	; 0x80
    2dfa:	005b      	lsls	r3, r3, #1
    2dfc:	4a38      	ldr	r2, [pc, #224]	; (2ee0 <_gclk_init_generators_by_fref+0xf8>)
    2dfe:	0019      	movs	r1, r3
    2e00:	0010      	movs	r0, r2
    2e02:	4b38      	ldr	r3, [pc, #224]	; (2ee4 <_gclk_init_generators_by_fref+0xfc>)
    2e04:	4798      	blx	r3
		hri_gclk_write_GENCTRL_reg(
    2e06:	4a38      	ldr	r2, [pc, #224]	; (2ee8 <_gclk_init_generators_by_fref+0x100>)
    2e08:	4b35      	ldr	r3, [pc, #212]	; (2ee0 <_gclk_init_generators_by_fref+0xf8>)
    2e0a:	0011      	movs	r1, r2
    2e0c:	0018      	movs	r0, r3
    2e0e:	4b37      	ldr	r3, [pc, #220]	; (2eec <_gclk_init_generators_by_fref+0x104>)
    2e10:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SRC | GCLK_GENCTRL_ID(0));
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    2e12:	687b      	ldr	r3, [r7, #4]
    2e14:	2202      	movs	r2, #2
    2e16:	4013      	ands	r3, r2
    2e18:	d00c      	beq.n	2e34 <_gclk_init_generators_by_fref+0x4c>
		hri_gclk_write_GENDIV_reg(GCLK, GCLK_GENDIV_DIV(CONF_GCLK_GEN_1_DIV) | GCLK_GENDIV_ID(1));
    2e1a:	2302      	movs	r3, #2
    2e1c:	33ff      	adds	r3, #255	; 0xff
    2e1e:	4a30      	ldr	r2, [pc, #192]	; (2ee0 <_gclk_init_generators_by_fref+0xf8>)
    2e20:	0019      	movs	r1, r3
    2e22:	0010      	movs	r0, r2
    2e24:	4b2f      	ldr	r3, [pc, #188]	; (2ee4 <_gclk_init_generators_by_fref+0xfc>)
    2e26:	4798      	blx	r3
		hri_gclk_write_GENCTRL_reg(
    2e28:	4a31      	ldr	r2, [pc, #196]	; (2ef0 <_gclk_init_generators_by_fref+0x108>)
    2e2a:	4b2d      	ldr	r3, [pc, #180]	; (2ee0 <_gclk_init_generators_by_fref+0xf8>)
    2e2c:	0011      	movs	r1, r2
    2e2e:	0018      	movs	r0, r3
    2e30:	4b2e      	ldr	r3, [pc, #184]	; (2eec <_gclk_init_generators_by_fref+0x104>)
    2e32:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SRC | GCLK_GENCTRL_ID(1));
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    2e34:	687b      	ldr	r3, [r7, #4]
    2e36:	2204      	movs	r2, #4
    2e38:	4013      	ands	r3, r2
    2e3a:	d00b      	beq.n	2e54 <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENDIV_reg(GCLK, GCLK_GENDIV_DIV(CONF_GCLK_GEN_2_DIV) | GCLK_GENDIV_ID(2));
    2e3c:	4a2d      	ldr	r2, [pc, #180]	; (2ef4 <_gclk_init_generators_by_fref+0x10c>)
    2e3e:	4b28      	ldr	r3, [pc, #160]	; (2ee0 <_gclk_init_generators_by_fref+0xf8>)
    2e40:	0011      	movs	r1, r2
    2e42:	0018      	movs	r0, r3
    2e44:	4b27      	ldr	r3, [pc, #156]	; (2ee4 <_gclk_init_generators_by_fref+0xfc>)
    2e46:	4798      	blx	r3
		hri_gclk_write_GENCTRL_reg(
    2e48:	4a2b      	ldr	r2, [pc, #172]	; (2ef8 <_gclk_init_generators_by_fref+0x110>)
    2e4a:	4b25      	ldr	r3, [pc, #148]	; (2ee0 <_gclk_init_generators_by_fref+0xf8>)
    2e4c:	0011      	movs	r1, r2
    2e4e:	0018      	movs	r0, r3
    2e50:	4b26      	ldr	r3, [pc, #152]	; (2eec <_gclk_init_generators_by_fref+0x104>)
    2e52:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    2e54:	687b      	ldr	r3, [r7, #4]
    2e56:	2208      	movs	r2, #8
    2e58:	4013      	ands	r3, r2
    2e5a:	d00b      	beq.n	2e74 <_gclk_init_generators_by_fref+0x8c>
		hri_gclk_write_GENDIV_reg(GCLK, GCLK_GENDIV_DIV(CONF_GCLK_GEN_3_DIV) | GCLK_GENDIV_ID(3));
    2e5c:	4a27      	ldr	r2, [pc, #156]	; (2efc <_gclk_init_generators_by_fref+0x114>)
    2e5e:	4b20      	ldr	r3, [pc, #128]	; (2ee0 <_gclk_init_generators_by_fref+0xf8>)
    2e60:	0011      	movs	r1, r2
    2e62:	0018      	movs	r0, r3
    2e64:	4b1f      	ldr	r3, [pc, #124]	; (2ee4 <_gclk_init_generators_by_fref+0xfc>)
    2e66:	4798      	blx	r3
		hri_gclk_write_GENCTRL_reg(
    2e68:	4a25      	ldr	r2, [pc, #148]	; (2f00 <_gclk_init_generators_by_fref+0x118>)
    2e6a:	4b1d      	ldr	r3, [pc, #116]	; (2ee0 <_gclk_init_generators_by_fref+0xf8>)
    2e6c:	0011      	movs	r1, r2
    2e6e:	0018      	movs	r0, r3
    2e70:	4b1e      	ldr	r3, [pc, #120]	; (2eec <_gclk_init_generators_by_fref+0x104>)
    2e72:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SRC | GCLK_GENCTRL_ID(3));
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    2e74:	687b      	ldr	r3, [r7, #4]
    2e76:	2210      	movs	r2, #16
    2e78:	4013      	ands	r3, r2
    2e7a:	d00c      	beq.n	2e96 <_gclk_init_generators_by_fref+0xae>
		hri_gclk_write_GENDIV_reg(GCLK, GCLK_GENDIV_DIV(CONF_GCLK_GEN_4_DIV) | GCLK_GENDIV_ID(4));
    2e7c:	2382      	movs	r3, #130	; 0x82
    2e7e:	005b      	lsls	r3, r3, #1
    2e80:	4a17      	ldr	r2, [pc, #92]	; (2ee0 <_gclk_init_generators_by_fref+0xf8>)
    2e82:	0019      	movs	r1, r3
    2e84:	0010      	movs	r0, r2
    2e86:	4b17      	ldr	r3, [pc, #92]	; (2ee4 <_gclk_init_generators_by_fref+0xfc>)
    2e88:	4798      	blx	r3
		hri_gclk_write_GENCTRL_reg(
    2e8a:	4a1e      	ldr	r2, [pc, #120]	; (2f04 <_gclk_init_generators_by_fref+0x11c>)
    2e8c:	4b14      	ldr	r3, [pc, #80]	; (2ee0 <_gclk_init_generators_by_fref+0xf8>)
    2e8e:	0011      	movs	r1, r2
    2e90:	0018      	movs	r0, r3
    2e92:	4b16      	ldr	r3, [pc, #88]	; (2eec <_gclk_init_generators_by_fref+0x104>)
    2e94:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SRC | GCLK_GENCTRL_ID(4));
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    2e96:	687b      	ldr	r3, [r7, #4]
    2e98:	2220      	movs	r2, #32
    2e9a:	4013      	ands	r3, r2
    2e9c:	d00b      	beq.n	2eb6 <_gclk_init_generators_by_fref+0xce>
		hri_gclk_write_GENDIV_reg(GCLK, GCLK_GENDIV_DIV(CONF_GCLK_GEN_5_DIV) | GCLK_GENDIV_ID(5));
    2e9e:	4a1a      	ldr	r2, [pc, #104]	; (2f08 <_gclk_init_generators_by_fref+0x120>)
    2ea0:	4b0f      	ldr	r3, [pc, #60]	; (2ee0 <_gclk_init_generators_by_fref+0xf8>)
    2ea2:	0011      	movs	r1, r2
    2ea4:	0018      	movs	r0, r3
    2ea6:	4b0f      	ldr	r3, [pc, #60]	; (2ee4 <_gclk_init_generators_by_fref+0xfc>)
    2ea8:	4798      	blx	r3
		hri_gclk_write_GENCTRL_reg(
    2eaa:	4a18      	ldr	r2, [pc, #96]	; (2f0c <_gclk_init_generators_by_fref+0x124>)
    2eac:	4b0c      	ldr	r3, [pc, #48]	; (2ee0 <_gclk_init_generators_by_fref+0xf8>)
    2eae:	0011      	movs	r1, r2
    2eb0:	0018      	movs	r0, r3
    2eb2:	4b0e      	ldr	r3, [pc, #56]	; (2eec <_gclk_init_generators_by_fref+0x104>)
    2eb4:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SRC | GCLK_GENCTRL_ID(5));
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    2eb6:	687b      	ldr	r3, [r7, #4]
    2eb8:	2240      	movs	r2, #64	; 0x40
    2eba:	4013      	ands	r3, r2
    2ebc:	d00c      	beq.n	2ed8 <_gclk_init_generators_by_fref+0xf0>
		hri_gclk_write_GENDIV_reg(GCLK, GCLK_GENDIV_DIV(CONF_GCLK_GEN_6_DIV) | GCLK_GENDIV_ID(6));
    2ebe:	2383      	movs	r3, #131	; 0x83
    2ec0:	005b      	lsls	r3, r3, #1
    2ec2:	4a07      	ldr	r2, [pc, #28]	; (2ee0 <_gclk_init_generators_by_fref+0xf8>)
    2ec4:	0019      	movs	r1, r3
    2ec6:	0010      	movs	r0, r2
    2ec8:	4b06      	ldr	r3, [pc, #24]	; (2ee4 <_gclk_init_generators_by_fref+0xfc>)
    2eca:	4798      	blx	r3
		hri_gclk_write_GENCTRL_reg(
    2ecc:	4a10      	ldr	r2, [pc, #64]	; (2f10 <_gclk_init_generators_by_fref+0x128>)
    2ece:	4b04      	ldr	r3, [pc, #16]	; (2ee0 <_gclk_init_generators_by_fref+0xf8>)
    2ed0:	0011      	movs	r1, r2
    2ed2:	0018      	movs	r0, r3
    2ed4:	4b05      	ldr	r3, [pc, #20]	; (2eec <_gclk_init_generators_by_fref+0x104>)
    2ed6:	4798      	blx	r3
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
    2ed8:	46c0      	nop			; (mov r8, r8)
    2eda:	46bd      	mov	sp, r7
    2edc:	b002      	add	sp, #8
    2ede:	bd80      	pop	{r7, pc}
    2ee0:	40000c00 	.word	0x40000c00
    2ee4:	00002dd1 	.word	0x00002dd1
    2ee8:	00290800 	.word	0x00290800
    2eec:	00002dad 	.word	0x00002dad
    2ef0:	00010601 	.word	0x00010601
    2ef4:	00000402 	.word	0x00000402
    2ef8:	00210602 	.word	0x00210602
    2efc:	00000803 	.word	0x00000803
    2f00:	00290603 	.word	0x00290603
    2f04:	00090704 	.word	0x00090704
    2f08:	00000305 	.word	0x00000305
    2f0c:	00010805 	.word	0x00010805
    2f10:	00210406 	.word	0x00210406

00002f14 <hri_pm_set_CPUSEL_CPUDIV_bf>:
{
	return ((Pm *)hw)->SLEEP.reg;
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
    2f14:	b580      	push	{r7, lr}
    2f16:	b082      	sub	sp, #8
    2f18:	af00      	add	r7, sp, #0
    2f1a:	6078      	str	r0, [r7, #4]
    2f1c:	000a      	movs	r2, r1
    2f1e:	1cfb      	adds	r3, r7, #3
    2f20:	701a      	strb	r2, [r3, #0]
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
    2f22:	687b      	ldr	r3, [r7, #4]
    2f24:	7a1b      	ldrb	r3, [r3, #8]
    2f26:	b2da      	uxtb	r2, r3
    2f28:	1cfb      	adds	r3, r7, #3
    2f2a:	781b      	ldrb	r3, [r3, #0]
    2f2c:	2107      	movs	r1, #7
    2f2e:	400b      	ands	r3, r1
    2f30:	b2db      	uxtb	r3, r3
    2f32:	4313      	orrs	r3, r2
    2f34:	b2da      	uxtb	r2, r3
    2f36:	687b      	ldr	r3, [r7, #4]
    2f38:	721a      	strb	r2, [r3, #8]
	PM_CRITICAL_SECTION_LEAVE();
}
    2f3a:	46c0      	nop			; (mov r8, r8)
    2f3c:	46bd      	mov	sp, r7
    2f3e:	b002      	add	sp, #8
    2f40:	bd80      	pop	{r7, pc}

00002f42 <hri_pm_set_APBASEL_APBADIV_bf>:
{
	return ((Pm *)hw)->CPUSEL.reg;
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
    2f42:	b580      	push	{r7, lr}
    2f44:	b082      	sub	sp, #8
    2f46:	af00      	add	r7, sp, #0
    2f48:	6078      	str	r0, [r7, #4]
    2f4a:	000a      	movs	r2, r1
    2f4c:	1cfb      	adds	r3, r7, #3
    2f4e:	701a      	strb	r2, [r3, #0]
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
    2f50:	687b      	ldr	r3, [r7, #4]
    2f52:	7a5b      	ldrb	r3, [r3, #9]
    2f54:	b2da      	uxtb	r2, r3
    2f56:	1cfb      	adds	r3, r7, #3
    2f58:	781b      	ldrb	r3, [r3, #0]
    2f5a:	2107      	movs	r1, #7
    2f5c:	400b      	ands	r3, r1
    2f5e:	b2db      	uxtb	r3, r3
    2f60:	4313      	orrs	r3, r2
    2f62:	b2da      	uxtb	r2, r3
    2f64:	687b      	ldr	r3, [r7, #4]
    2f66:	725a      	strb	r2, [r3, #9]
	PM_CRITICAL_SECTION_LEAVE();
}
    2f68:	46c0      	nop			; (mov r8, r8)
    2f6a:	46bd      	mov	sp, r7
    2f6c:	b002      	add	sp, #8
    2f6e:	bd80      	pop	{r7, pc}

00002f70 <hri_pm_set_APBBSEL_APBBDIV_bf>:
{
	return ((Pm *)hw)->APBASEL.reg;
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
    2f70:	b580      	push	{r7, lr}
    2f72:	b082      	sub	sp, #8
    2f74:	af00      	add	r7, sp, #0
    2f76:	6078      	str	r0, [r7, #4]
    2f78:	000a      	movs	r2, r1
    2f7a:	1cfb      	adds	r3, r7, #3
    2f7c:	701a      	strb	r2, [r3, #0]
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
    2f7e:	687b      	ldr	r3, [r7, #4]
    2f80:	7a9b      	ldrb	r3, [r3, #10]
    2f82:	b2da      	uxtb	r2, r3
    2f84:	1cfb      	adds	r3, r7, #3
    2f86:	781b      	ldrb	r3, [r3, #0]
    2f88:	2107      	movs	r1, #7
    2f8a:	400b      	ands	r3, r1
    2f8c:	b2db      	uxtb	r3, r3
    2f8e:	4313      	orrs	r3, r2
    2f90:	b2da      	uxtb	r2, r3
    2f92:	687b      	ldr	r3, [r7, #4]
    2f94:	729a      	strb	r2, [r3, #10]
	PM_CRITICAL_SECTION_LEAVE();
}
    2f96:	46c0      	nop			; (mov r8, r8)
    2f98:	46bd      	mov	sp, r7
    2f9a:	b002      	add	sp, #8
    2f9c:	bd80      	pop	{r7, pc}

00002f9e <hri_pm_set_APBCSEL_APBCDIV_bf>:
{
	return ((Pm *)hw)->APBBSEL.reg;
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
    2f9e:	b580      	push	{r7, lr}
    2fa0:	b082      	sub	sp, #8
    2fa2:	af00      	add	r7, sp, #0
    2fa4:	6078      	str	r0, [r7, #4]
    2fa6:	000a      	movs	r2, r1
    2fa8:	1cfb      	adds	r3, r7, #3
    2faa:	701a      	strb	r2, [r3, #0]
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
    2fac:	687b      	ldr	r3, [r7, #4]
    2fae:	7adb      	ldrb	r3, [r3, #11]
    2fb0:	b2da      	uxtb	r2, r3
    2fb2:	1cfb      	adds	r3, r7, #3
    2fb4:	781b      	ldrb	r3, [r3, #0]
    2fb6:	2107      	movs	r1, #7
    2fb8:	400b      	ands	r3, r1
    2fba:	b2db      	uxtb	r3, r3
    2fbc:	4313      	orrs	r3, r2
    2fbe:	b2da      	uxtb	r2, r3
    2fc0:	687b      	ldr	r3, [r7, #4]
    2fc2:	72da      	strb	r2, [r3, #11]
	PM_CRITICAL_SECTION_LEAVE();
}
    2fc4:	46c0      	nop			; (mov r8, r8)
    2fc6:	46bd      	mov	sp, r7
    2fc8:	b002      	add	sp, #8
    2fca:	bd80      	pop	{r7, pc}

00002fcc <_pm_init>:

/**
 * \brief Power Manager Init
 */
void _pm_init(void)
{
    2fcc:	b580      	push	{r7, lr}
    2fce:	af00      	add	r7, sp, #0
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
    2fd0:	4b0b      	ldr	r3, [pc, #44]	; (3000 <_pm_init+0x34>)
    2fd2:	2100      	movs	r1, #0
    2fd4:	0018      	movs	r0, r3
    2fd6:	4b0b      	ldr	r3, [pc, #44]	; (3004 <_pm_init+0x38>)
    2fd8:	4798      	blx	r3
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
    2fda:	4b09      	ldr	r3, [pc, #36]	; (3000 <_pm_init+0x34>)
    2fdc:	2100      	movs	r1, #0
    2fde:	0018      	movs	r0, r3
    2fe0:	4b09      	ldr	r3, [pc, #36]	; (3008 <_pm_init+0x3c>)
    2fe2:	4798      	blx	r3
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
    2fe4:	4b06      	ldr	r3, [pc, #24]	; (3000 <_pm_init+0x34>)
    2fe6:	2100      	movs	r1, #0
    2fe8:	0018      	movs	r0, r3
    2fea:	4b08      	ldr	r3, [pc, #32]	; (300c <_pm_init+0x40>)
    2fec:	4798      	blx	r3
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
    2fee:	4b04      	ldr	r3, [pc, #16]	; (3000 <_pm_init+0x34>)
    2ff0:	2100      	movs	r1, #0
    2ff2:	0018      	movs	r0, r3
    2ff4:	4b06      	ldr	r3, [pc, #24]	; (3010 <_pm_init+0x44>)
    2ff6:	4798      	blx	r3
}
    2ff8:	46c0      	nop			; (mov r8, r8)
    2ffa:	46bd      	mov	sp, r7
    2ffc:	bd80      	pop	{r7, pc}
    2ffe:	46c0      	nop			; (mov r8, r8)
    3000:	40000400 	.word	0x40000400
    3004:	00002f15 	.word	0x00002f15
    3008:	00002f43 	.word	0x00002f43
    300c:	00002f71 	.word	0x00002f71
    3010:	00002f9f 	.word	0x00002f9f

00003014 <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    3014:	b580      	push	{r7, lr}
    3016:	b082      	sub	sp, #8
    3018:	af00      	add	r7, sp, #0
    301a:	6078      	str	r0, [r7, #4]
    301c:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    301e:	46c0      	nop			; (mov r8, r8)
    3020:	687b      	ldr	r3, [r7, #4]
    3022:	69db      	ldr	r3, [r3, #28]
    3024:	683a      	ldr	r2, [r7, #0]
    3026:	4013      	ands	r3, r2
    3028:	d1fa      	bne.n	3020 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    302a:	46c0      	nop			; (mov r8, r8)
    302c:	46bd      	mov	sp, r7
    302e:	b002      	add	sp, #8
    3030:	bd80      	pop	{r7, pc}

00003032 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    3032:	b580      	push	{r7, lr}
    3034:	b082      	sub	sp, #8
    3036:	af00      	add	r7, sp, #0
    3038:	6078      	str	r0, [r7, #4]
    303a:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    303c:	687b      	ldr	r3, [r7, #4]
    303e:	69db      	ldr	r3, [r3, #28]
    3040:	683a      	ldr	r2, [r7, #0]
    3042:	4013      	ands	r3, r2
    3044:	1e5a      	subs	r2, r3, #1
    3046:	4193      	sbcs	r3, r2
    3048:	b2db      	uxtb	r3, r3
}
    304a:	0018      	movs	r0, r3
    304c:	46bd      	mov	sp, r7
    304e:	b002      	add	sp, #8
    3050:	bd80      	pop	{r7, pc}

00003052 <hri_sercomusart_wait_for_sync>:

static inline void hri_sercomusart_wait_for_sync(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
    3052:	b580      	push	{r7, lr}
    3054:	b082      	sub	sp, #8
    3056:	af00      	add	r7, sp, #0
    3058:	6078      	str	r0, [r7, #4]
    305a:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    305c:	46c0      	nop			; (mov r8, r8)
    305e:	687b      	ldr	r3, [r7, #4]
    3060:	69db      	ldr	r3, [r3, #28]
    3062:	683a      	ldr	r2, [r7, #0]
    3064:	4013      	ands	r3, r2
    3066:	d1fa      	bne.n	305e <hri_sercomusart_wait_for_sync+0xc>
	};
}
    3068:	46c0      	nop			; (mov r8, r8)
    306a:	46bd      	mov	sp, r7
    306c:	b002      	add	sp, #8
    306e:	bd80      	pop	{r7, pc}

00003070 <hri_sercomusart_is_syncing>:

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
    3070:	b580      	push	{r7, lr}
    3072:	b082      	sub	sp, #8
    3074:	af00      	add	r7, sp, #0
    3076:	6078      	str	r0, [r7, #4]
    3078:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    307a:	687b      	ldr	r3, [r7, #4]
    307c:	69db      	ldr	r3, [r3, #28]
    307e:	683a      	ldr	r2, [r7, #0]
    3080:	4013      	ands	r3, r2
    3082:	1e5a      	subs	r2, r3, #1
    3084:	4193      	sbcs	r3, r2
    3086:	b2db      	uxtb	r3, r3
}
    3088:	0018      	movs	r0, r3
    308a:	46bd      	mov	sp, r7
    308c:	b002      	add	sp, #8
    308e:	bd80      	pop	{r7, pc}

00003090 <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    3090:	b580      	push	{r7, lr}
    3092:	b084      	sub	sp, #16
    3094:	af00      	add	r7, sp, #0
    3096:	6078      	str	r0, [r7, #4]
    3098:	000a      	movs	r2, r1
    309a:	1cfb      	adds	r3, r7, #3
    309c:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    309e:	230f      	movs	r3, #15
    30a0:	18fb      	adds	r3, r7, r3
    30a2:	687a      	ldr	r2, [r7, #4]
    30a4:	7e12      	ldrb	r2, [r2, #24]
    30a6:	701a      	strb	r2, [r3, #0]
	tmp &= mask;
    30a8:	230f      	movs	r3, #15
    30aa:	18fb      	adds	r3, r7, r3
    30ac:	220f      	movs	r2, #15
    30ae:	18ba      	adds	r2, r7, r2
    30b0:	1cf9      	adds	r1, r7, #3
    30b2:	7812      	ldrb	r2, [r2, #0]
    30b4:	7809      	ldrb	r1, [r1, #0]
    30b6:	400a      	ands	r2, r1
    30b8:	701a      	strb	r2, [r3, #0]
	return tmp;
    30ba:	230f      	movs	r3, #15
    30bc:	18fb      	adds	r3, r7, r3
    30be:	781b      	ldrb	r3, [r3, #0]
}
    30c0:	0018      	movs	r0, r3
    30c2:	46bd      	mov	sp, r7
    30c4:	b004      	add	sp, #16
    30c6:	bd80      	pop	{r7, pc}

000030c8 <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    30c8:	b580      	push	{r7, lr}
    30ca:	b082      	sub	sp, #8
    30cc:	af00      	add	r7, sp, #0
    30ce:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    30d0:	687b      	ldr	r3, [r7, #4]
    30d2:	7e1b      	ldrb	r3, [r3, #24]
    30d4:	b2db      	uxtb	r3, r3
}
    30d6:	0018      	movs	r0, r3
    30d8:	46bd      	mov	sp, r7
    30da:	b002      	add	sp, #8
    30dc:	bd80      	pop	{r7, pc}

000030de <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    30de:	b580      	push	{r7, lr}
    30e0:	b082      	sub	sp, #8
    30e2:	af00      	add	r7, sp, #0
    30e4:	6078      	str	r0, [r7, #4]
    30e6:	000a      	movs	r2, r1
    30e8:	1cfb      	adds	r3, r7, #3
    30ea:	701a      	strb	r2, [r3, #0]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    30ec:	687b      	ldr	r3, [r7, #4]
    30ee:	1cfa      	adds	r2, r7, #3
    30f0:	7812      	ldrb	r2, [r2, #0]
    30f2:	761a      	strb	r2, [r3, #24]
}
    30f4:	46c0      	nop			; (mov r8, r8)
    30f6:	46bd      	mov	sp, r7
    30f8:	b002      	add	sp, #8
    30fa:	bd80      	pop	{r7, pc}

000030fc <hri_sercomusart_get_interrupt_DRE_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
    30fc:	b580      	push	{r7, lr}
    30fe:	b082      	sub	sp, #8
    3100:	af00      	add	r7, sp, #0
    3102:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    3104:	687b      	ldr	r3, [r7, #4]
    3106:	7e1b      	ldrb	r3, [r3, #24]
    3108:	b2db      	uxtb	r3, r3
    310a:	001a      	movs	r2, r3
    310c:	2301      	movs	r3, #1
    310e:	4013      	ands	r3, r2
    3110:	1e5a      	subs	r2, r3, #1
    3112:	4193      	sbcs	r3, r2
    3114:	b2db      	uxtb	r3, r3
}
    3116:	0018      	movs	r0, r3
    3118:	46bd      	mov	sp, r7
    311a:	b002      	add	sp, #8
    311c:	bd80      	pop	{r7, pc}

0000311e <hri_sercomusart_get_interrupt_TXC_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
}

static inline bool hri_sercomusart_get_interrupt_TXC_bit(const void *const hw)
{
    311e:	b580      	push	{r7, lr}
    3120:	b082      	sub	sp, #8
    3122:	af00      	add	r7, sp, #0
    3124:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    3126:	687b      	ldr	r3, [r7, #4]
    3128:	7e1b      	ldrb	r3, [r3, #24]
    312a:	b2db      	uxtb	r3, r3
    312c:	085b      	lsrs	r3, r3, #1
    312e:	2201      	movs	r2, #1
    3130:	4013      	ands	r3, r2
    3132:	1e5a      	subs	r2, r3, #1
    3134:	4193      	sbcs	r3, r2
    3136:	b2db      	uxtb	r3, r3
}
    3138:	0018      	movs	r0, r3
    313a:	46bd      	mov	sp, r7
    313c:	b002      	add	sp, #8
    313e:	bd80      	pop	{r7, pc}

00003140 <hri_sercomusart_get_interrupt_RXC_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
}

static inline bool hri_sercomusart_get_interrupt_RXC_bit(const void *const hw)
{
    3140:	b580      	push	{r7, lr}
    3142:	b082      	sub	sp, #8
    3144:	af00      	add	r7, sp, #0
    3146:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    3148:	687b      	ldr	r3, [r7, #4]
    314a:	7e1b      	ldrb	r3, [r3, #24]
    314c:	b2db      	uxtb	r3, r3
    314e:	089b      	lsrs	r3, r3, #2
    3150:	2201      	movs	r2, #1
    3152:	4013      	ands	r3, r2
    3154:	1e5a      	subs	r2, r3, #1
    3156:	4193      	sbcs	r3, r2
    3158:	b2db      	uxtb	r3, r3
}
    315a:	0018      	movs	r0, r3
    315c:	46bd      	mov	sp, r7
    315e:	b002      	add	sp, #8
    3160:	bd80      	pop	{r7, pc}
	...

00003164 <hri_sercomspi_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_SPI_CTRLA_SWRST) >> SERCOM_SPI_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
    3164:	b580      	push	{r7, lr}
    3166:	b082      	sub	sp, #8
    3168:	af00      	add	r7, sp, #0
    316a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    316c:	687b      	ldr	r3, [r7, #4]
    316e:	681b      	ldr	r3, [r3, #0]
    3170:	2202      	movs	r2, #2
    3172:	431a      	orrs	r2, r3
    3174:	687b      	ldr	r3, [r7, #4]
    3176:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    3178:	687b      	ldr	r3, [r7, #4]
    317a:	2103      	movs	r1, #3
    317c:	0018      	movs	r0, r3
    317e:	4b03      	ldr	r3, [pc, #12]	; (318c <hri_sercomspi_set_CTRLA_ENABLE_bit+0x28>)
    3180:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3182:	46c0      	nop			; (mov r8, r8)
    3184:	46bd      	mov	sp, r7
    3186:	b002      	add	sp, #8
    3188:	bd80      	pop	{r7, pc}
    318a:	46c0      	nop			; (mov r8, r8)
    318c:	00003015 	.word	0x00003015

00003190 <hri_sercomspi_get_CTRLA_ENABLE_bit>:

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    3190:	b580      	push	{r7, lr}
    3192:	b084      	sub	sp, #16
    3194:	af00      	add	r7, sp, #0
    3196:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    3198:	687b      	ldr	r3, [r7, #4]
    319a:	2103      	movs	r1, #3
    319c:	0018      	movs	r0, r3
    319e:	4b09      	ldr	r3, [pc, #36]	; (31c4 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    31a0:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    31a2:	687b      	ldr	r3, [r7, #4]
    31a4:	681b      	ldr	r3, [r3, #0]
    31a6:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    31a8:	68fb      	ldr	r3, [r7, #12]
    31aa:	085b      	lsrs	r3, r3, #1
    31ac:	2201      	movs	r2, #1
    31ae:	4013      	ands	r3, r2
    31b0:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    31b2:	68fb      	ldr	r3, [r7, #12]
    31b4:	1e5a      	subs	r2, r3, #1
    31b6:	4193      	sbcs	r3, r2
    31b8:	b2db      	uxtb	r3, r3
}
    31ba:	0018      	movs	r0, r3
    31bc:	46bd      	mov	sp, r7
    31be:	b004      	add	sp, #16
    31c0:	bd80      	pop	{r7, pc}
    31c2:	46c0      	nop			; (mov r8, r8)
    31c4:	00003015 	.word	0x00003015

000031c8 <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    31c8:	b580      	push	{r7, lr}
    31ca:	b082      	sub	sp, #8
    31cc:	af00      	add	r7, sp, #0
    31ce:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    31d0:	687b      	ldr	r3, [r7, #4]
    31d2:	681b      	ldr	r3, [r3, #0]
    31d4:	2202      	movs	r2, #2
    31d6:	4393      	bics	r3, r2
    31d8:	001a      	movs	r2, r3
    31da:	687b      	ldr	r3, [r7, #4]
    31dc:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    31de:	687b      	ldr	r3, [r7, #4]
    31e0:	2103      	movs	r1, #3
    31e2:	0018      	movs	r0, r3
    31e4:	4b02      	ldr	r3, [pc, #8]	; (31f0 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x28>)
    31e6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    31e8:	46c0      	nop			; (mov r8, r8)
    31ea:	46bd      	mov	sp, r7
    31ec:	b002      	add	sp, #8
    31ee:	bd80      	pop	{r7, pc}
    31f0:	00003015 	.word	0x00003015

000031f4 <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    31f4:	b580      	push	{r7, lr}
    31f6:	b084      	sub	sp, #16
    31f8:	af00      	add	r7, sp, #0
    31fa:	6078      	str	r0, [r7, #4]
    31fc:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    31fe:	687b      	ldr	r3, [r7, #4]
    3200:	2103      	movs	r1, #3
    3202:	0018      	movs	r0, r3
    3204:	4b06      	ldr	r3, [pc, #24]	; (3220 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    3206:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    3208:	687b      	ldr	r3, [r7, #4]
    320a:	681b      	ldr	r3, [r3, #0]
    320c:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    320e:	68fb      	ldr	r3, [r7, #12]
    3210:	683a      	ldr	r2, [r7, #0]
    3212:	4013      	ands	r3, r2
    3214:	60fb      	str	r3, [r7, #12]
	return tmp;
    3216:	68fb      	ldr	r3, [r7, #12]
}
    3218:	0018      	movs	r0, r3
    321a:	46bd      	mov	sp, r7
    321c:	b004      	add	sp, #16
    321e:	bd80      	pop	{r7, pc}
    3220:	00003015 	.word	0x00003015

00003224 <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    3224:	b580      	push	{r7, lr}
    3226:	b082      	sub	sp, #8
    3228:	af00      	add	r7, sp, #0
    322a:	6078      	str	r0, [r7, #4]
    322c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    322e:	687b      	ldr	r3, [r7, #4]
    3230:	683a      	ldr	r2, [r7, #0]
    3232:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    3234:	687b      	ldr	r3, [r7, #4]
    3236:	2103      	movs	r1, #3
    3238:	0018      	movs	r0, r3
    323a:	4b03      	ldr	r3, [pc, #12]	; (3248 <hri_sercomspi_write_CTRLA_reg+0x24>)
    323c:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    323e:	46c0      	nop			; (mov r8, r8)
    3240:	46bd      	mov	sp, r7
    3242:	b002      	add	sp, #8
    3244:	bd80      	pop	{r7, pc}
    3246:	46c0      	nop			; (mov r8, r8)
    3248:	00003015 	.word	0x00003015

0000324c <hri_sercomusart_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_USART_CTRLA_SWRST) >> SERCOM_USART_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomusart_set_CTRLA_ENABLE_bit(const void *const hw)
{
    324c:	b580      	push	{r7, lr}
    324e:	b082      	sub	sp, #8
    3250:	af00      	add	r7, sp, #0
    3252:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    3254:	687b      	ldr	r3, [r7, #4]
    3256:	681b      	ldr	r3, [r3, #0]
    3258:	2202      	movs	r2, #2
    325a:	431a      	orrs	r2, r3
    325c:	687b      	ldr	r3, [r7, #4]
    325e:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    3260:	687b      	ldr	r3, [r7, #4]
    3262:	2103      	movs	r1, #3
    3264:	0018      	movs	r0, r3
    3266:	4b03      	ldr	r3, [pc, #12]	; (3274 <hri_sercomusart_set_CTRLA_ENABLE_bit+0x28>)
    3268:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    326a:	46c0      	nop			; (mov r8, r8)
    326c:	46bd      	mov	sp, r7
    326e:	b002      	add	sp, #8
    3270:	bd80      	pop	{r7, pc}
    3272:	46c0      	nop			; (mov r8, r8)
    3274:	00003053 	.word	0x00003053

00003278 <hri_sercomusart_clear_CTRLA_ENABLE_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomusart_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    3278:	b580      	push	{r7, lr}
    327a:	b082      	sub	sp, #8
    327c:	af00      	add	r7, sp, #0
    327e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    3280:	687b      	ldr	r3, [r7, #4]
    3282:	681b      	ldr	r3, [r3, #0]
    3284:	2202      	movs	r2, #2
    3286:	4393      	bics	r3, r2
    3288:	001a      	movs	r2, r3
    328a:	687b      	ldr	r3, [r7, #4]
    328c:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    328e:	687b      	ldr	r3, [r7, #4]
    3290:	2103      	movs	r1, #3
    3292:	0018      	movs	r0, r3
    3294:	4b02      	ldr	r3, [pc, #8]	; (32a0 <hri_sercomusart_clear_CTRLA_ENABLE_bit+0x28>)
    3296:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3298:	46c0      	nop			; (mov r8, r8)
    329a:	46bd      	mov	sp, r7
    329c:	b002      	add	sp, #8
    329e:	bd80      	pop	{r7, pc}
    32a0:	00003053 	.word	0x00003053

000032a4 <hri_sercomusart_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
    32a4:	b580      	push	{r7, lr}
    32a6:	b084      	sub	sp, #16
    32a8:	af00      	add	r7, sp, #0
    32aa:	6078      	str	r0, [r7, #4]
    32ac:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    32ae:	687b      	ldr	r3, [r7, #4]
    32b0:	2103      	movs	r1, #3
    32b2:	0018      	movs	r0, r3
    32b4:	4b06      	ldr	r3, [pc, #24]	; (32d0 <hri_sercomusart_get_CTRLA_reg+0x2c>)
    32b6:	4798      	blx	r3
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    32b8:	687b      	ldr	r3, [r7, #4]
    32ba:	681b      	ldr	r3, [r3, #0]
    32bc:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    32be:	68fb      	ldr	r3, [r7, #12]
    32c0:	683a      	ldr	r2, [r7, #0]
    32c2:	4013      	ands	r3, r2
    32c4:	60fb      	str	r3, [r7, #12]
	return tmp;
    32c6:	68fb      	ldr	r3, [r7, #12]
}
    32c8:	0018      	movs	r0, r3
    32ca:	46bd      	mov	sp, r7
    32cc:	b004      	add	sp, #16
    32ce:	bd80      	pop	{r7, pc}
    32d0:	00003053 	.word	0x00003053

000032d4 <hri_sercomusart_write_CTRLA_reg>:

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
    32d4:	b580      	push	{r7, lr}
    32d6:	b082      	sub	sp, #8
    32d8:	af00      	add	r7, sp, #0
    32da:	6078      	str	r0, [r7, #4]
    32dc:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    32de:	687b      	ldr	r3, [r7, #4]
    32e0:	683a      	ldr	r2, [r7, #0]
    32e2:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    32e4:	687b      	ldr	r3, [r7, #4]
    32e6:	2103      	movs	r1, #3
    32e8:	0018      	movs	r0, r3
    32ea:	4b03      	ldr	r3, [pc, #12]	; (32f8 <hri_sercomusart_write_CTRLA_reg+0x24>)
    32ec:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    32ee:	46c0      	nop			; (mov r8, r8)
    32f0:	46bd      	mov	sp, r7
    32f2:	b002      	add	sp, #8
    32f4:	bd80      	pop	{r7, pc}
    32f6:	46c0      	nop			; (mov r8, r8)
    32f8:	00003053 	.word	0x00003053

000032fc <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    32fc:	b580      	push	{r7, lr}
    32fe:	b082      	sub	sp, #8
    3300:	af00      	add	r7, sp, #0
    3302:	6078      	str	r0, [r7, #4]
    3304:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    3306:	687b      	ldr	r3, [r7, #4]
    3308:	683a      	ldr	r2, [r7, #0]
    330a:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    330c:	687b      	ldr	r3, [r7, #4]
    330e:	2107      	movs	r1, #7
    3310:	0018      	movs	r0, r3
    3312:	4b03      	ldr	r3, [pc, #12]	; (3320 <hri_sercomspi_write_CTRLB_reg+0x24>)
    3314:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3316:	46c0      	nop			; (mov r8, r8)
    3318:	46bd      	mov	sp, r7
    331a:	b002      	add	sp, #8
    331c:	bd80      	pop	{r7, pc}
    331e:	46c0      	nop			; (mov r8, r8)
    3320:	00003015 	.word	0x00003015

00003324 <hri_sercomusart_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
    3324:	b580      	push	{r7, lr}
    3326:	b082      	sub	sp, #8
    3328:	af00      	add	r7, sp, #0
    332a:	6078      	str	r0, [r7, #4]
    332c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    332e:	687b      	ldr	r3, [r7, #4]
    3330:	683a      	ldr	r2, [r7, #0]
    3332:	605a      	str	r2, [r3, #4]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_MASK);
    3334:	687b      	ldr	r3, [r7, #4]
    3336:	2107      	movs	r1, #7
    3338:	0018      	movs	r0, r3
    333a:	4b03      	ldr	r3, [pc, #12]	; (3348 <hri_sercomusart_write_CTRLB_reg+0x24>)
    333c:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    333e:	46c0      	nop			; (mov r8, r8)
    3340:	46bd      	mov	sp, r7
    3342:	b002      	add	sp, #8
    3344:	bd80      	pop	{r7, pc}
    3346:	46c0      	nop			; (mov r8, r8)
    3348:	00003053 	.word	0x00003053

0000334c <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    334c:	b580      	push	{r7, lr}
    334e:	b082      	sub	sp, #8
    3350:	af00      	add	r7, sp, #0
    3352:	6078      	str	r0, [r7, #4]
    3354:	000a      	movs	r2, r1
    3356:	1cfb      	adds	r3, r7, #3
    3358:	701a      	strb	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    335a:	687b      	ldr	r3, [r7, #4]
    335c:	1cfa      	adds	r2, r7, #3
    335e:	7812      	ldrb	r2, [r2, #0]
    3360:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3362:	46c0      	nop			; (mov r8, r8)
    3364:	46bd      	mov	sp, r7
    3366:	b002      	add	sp, #8
    3368:	bd80      	pop	{r7, pc}

0000336a <hri_sercomusart_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
    336a:	b580      	push	{r7, lr}
    336c:	b082      	sub	sp, #8
    336e:	af00      	add	r7, sp, #0
    3370:	6078      	str	r0, [r7, #4]
    3372:	000a      	movs	r2, r1
    3374:	1cbb      	adds	r3, r7, #2
    3376:	801a      	strh	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    3378:	687b      	ldr	r3, [r7, #4]
    337a:	1cba      	adds	r2, r7, #2
    337c:	8812      	ldrh	r2, [r2, #0]
    337e:	819a      	strh	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3380:	46c0      	nop			; (mov r8, r8)
    3382:	46bd      	mov	sp, r7
    3384:	b002      	add	sp, #8
    3386:	bd80      	pop	{r7, pc}

00003388 <hri_sercomusart_write_RXPL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
    3388:	b580      	push	{r7, lr}
    338a:	b082      	sub	sp, #8
    338c:	af00      	add	r7, sp, #0
    338e:	6078      	str	r0, [r7, #4]
    3390:	000a      	movs	r2, r1
    3392:	1cfb      	adds	r3, r7, #3
    3394:	701a      	strb	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    3396:	687b      	ldr	r3, [r7, #4]
    3398:	1cfa      	adds	r2, r7, #3
    339a:	7812      	ldrb	r2, [r2, #0]
    339c:	739a      	strb	r2, [r3, #14]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    339e:	46c0      	nop			; (mov r8, r8)
    33a0:	46bd      	mov	sp, r7
    33a2:	b002      	add	sp, #8
    33a4:	bd80      	pop	{r7, pc}

000033a6 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    33a6:	b580      	push	{r7, lr}
    33a8:	b082      	sub	sp, #8
    33aa:	af00      	add	r7, sp, #0
    33ac:	6078      	str	r0, [r7, #4]
    33ae:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    33b0:	687b      	ldr	r3, [r7, #4]
    33b2:	683a      	ldr	r2, [r7, #0]
    33b4:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    33b6:	46c0      	nop			; (mov r8, r8)
    33b8:	46bd      	mov	sp, r7
    33ba:	b002      	add	sp, #8
    33bc:	bd80      	pop	{r7, pc}

000033be <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    33be:	b580      	push	{r7, lr}
    33c0:	b082      	sub	sp, #8
    33c2:	af00      	add	r7, sp, #0
    33c4:	6078      	str	r0, [r7, #4]
    33c6:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    33c8:	687b      	ldr	r3, [r7, #4]
    33ca:	683a      	ldr	r2, [r7, #0]
    33cc:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    33ce:	46c0      	nop			; (mov r8, r8)
    33d0:	46bd      	mov	sp, r7
    33d2:	b002      	add	sp, #8
    33d4:	bd80      	pop	{r7, pc}

000033d6 <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    33d6:	b580      	push	{r7, lr}
    33d8:	b082      	sub	sp, #8
    33da:	af00      	add	r7, sp, #0
    33dc:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    33de:	687b      	ldr	r3, [r7, #4]
    33e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    33e2:	0018      	movs	r0, r3
    33e4:	46bd      	mov	sp, r7
    33e6:	b002      	add	sp, #8
    33e8:	bd80      	pop	{r7, pc}

000033ea <hri_sercomusart_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_DATA_reg(const void *const hw, hri_sercomusart_data_reg_t data)
{
    33ea:	b580      	push	{r7, lr}
    33ec:	b082      	sub	sp, #8
    33ee:	af00      	add	r7, sp, #0
    33f0:	6078      	str	r0, [r7, #4]
    33f2:	000a      	movs	r2, r1
    33f4:	1cbb      	adds	r3, r7, #2
    33f6:	801a      	strh	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DATA.reg = data;
    33f8:	687b      	ldr	r3, [r7, #4]
    33fa:	1cba      	adds	r2, r7, #2
    33fc:	8812      	ldrh	r2, [r2, #0]
    33fe:	851a      	strh	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3400:	46c0      	nop			; (mov r8, r8)
    3402:	46bd      	mov	sp, r7
    3404:	b002      	add	sp, #8
    3406:	bd80      	pop	{r7, pc}

00003408 <hri_sercomusart_read_DATA_reg>:
	((Sercom *)hw)->USART.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_data_reg_t hri_sercomusart_read_DATA_reg(const void *const hw)
{
    3408:	b580      	push	{r7, lr}
    340a:	b082      	sub	sp, #8
    340c:	af00      	add	r7, sp, #0
    340e:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->USART.DATA.reg;
    3410:	687b      	ldr	r3, [r7, #4]
    3412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    3414:	b29b      	uxth	r3, r3
}
    3416:	0018      	movs	r0, r3
    3418:	46bd      	mov	sp, r7
    341a:	b002      	add	sp, #8
    341c:	bd80      	pop	{r7, pc}

0000341e <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    341e:	b580      	push	{r7, lr}
    3420:	b082      	sub	sp, #8
    3422:	af00      	add	r7, sp, #0
    3424:	6078      	str	r0, [r7, #4]
    3426:	000a      	movs	r2, r1
    3428:	1cfb      	adds	r3, r7, #3
    342a:	701a      	strb	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    342c:	687b      	ldr	r3, [r7, #4]
    342e:	1cfa      	adds	r2, r7, #3
    3430:	2130      	movs	r1, #48	; 0x30
    3432:	7812      	ldrb	r2, [r2, #0]
    3434:	545a      	strb	r2, [r3, r1]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3436:	46c0      	nop			; (mov r8, r8)
    3438:	46bd      	mov	sp, r7
    343a:	b002      	add	sp, #8
    343c:	bd80      	pop	{r7, pc}

0000343e <hri_sercomusart_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
    343e:	b580      	push	{r7, lr}
    3440:	b082      	sub	sp, #8
    3442:	af00      	add	r7, sp, #0
    3444:	6078      	str	r0, [r7, #4]
    3446:	000a      	movs	r2, r1
    3448:	1cfb      	adds	r3, r7, #3
    344a:	701a      	strb	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    344c:	687b      	ldr	r3, [r7, #4]
    344e:	1cfa      	adds	r2, r7, #3
    3450:	2130      	movs	r1, #48	; 0x30
    3452:	7812      	ldrb	r2, [r2, #0]
    3454:	545a      	strb	r2, [r3, r1]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3456:	46c0      	nop			; (mov r8, r8)
    3458:	46bd      	mov	sp, r7
    345a:	b002      	add	sp, #8
    345c:	bd80      	pop	{r7, pc}

0000345e <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    345e:	b580      	push	{r7, lr}
    3460:	b082      	sub	sp, #8
    3462:	af00      	add	r7, sp, #0
    3464:	6078      	str	r0, [r7, #4]
    3466:	000a      	movs	r2, r1
    3468:	1cbb      	adds	r3, r7, #2
    346a:	801a      	strh	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    346c:	687b      	ldr	r3, [r7, #4]
    346e:	1cba      	adds	r2, r7, #2
    3470:	8812      	ldrh	r2, [r2, #0]
    3472:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3474:	46c0      	nop			; (mov r8, r8)
    3476:	46bd      	mov	sp, r7
    3478:	b002      	add	sp, #8
    347a:	bd80      	pop	{r7, pc}

0000347c <_usart_sync_init>:

/**
 * \brief Initialize synchronous SERCOM USART
 */
int32_t _usart_sync_init(struct _usart_sync_device *const device, void *const hw)
{
    347c:	b580      	push	{r7, lr}
    347e:	b082      	sub	sp, #8
    3480:	af00      	add	r7, sp, #0
    3482:	6078      	str	r0, [r7, #4]
    3484:	6039      	str	r1, [r7, #0]
	ASSERT(device);
    3486:	687b      	ldr	r3, [r7, #4]
    3488:	1e5a      	subs	r2, r3, #1
    348a:	4193      	sbcs	r3, r2
    348c:	b2db      	uxtb	r3, r3
    348e:	4908      	ldr	r1, [pc, #32]	; (34b0 <_usart_sync_init+0x34>)
    3490:	22b4      	movs	r2, #180	; 0xb4
    3492:	0018      	movs	r0, r3
    3494:	4b07      	ldr	r3, [pc, #28]	; (34b4 <_usart_sync_init+0x38>)
    3496:	4798      	blx	r3

	device->hw = hw;
    3498:	687b      	ldr	r3, [r7, #4]
    349a:	683a      	ldr	r2, [r7, #0]
    349c:	601a      	str	r2, [r3, #0]

	return _usart_init(hw);
    349e:	683b      	ldr	r3, [r7, #0]
    34a0:	0018      	movs	r0, r3
    34a2:	4b05      	ldr	r3, [pc, #20]	; (34b8 <_usart_sync_init+0x3c>)
    34a4:	4798      	blx	r3
    34a6:	0003      	movs	r3, r0
}
    34a8:	0018      	movs	r0, r3
    34aa:	46bd      	mov	sp, r7
    34ac:	b002      	add	sp, #8
    34ae:	bd80      	pop	{r7, pc}
    34b0:	00010d7c 	.word	0x00010d7c
    34b4:	00002ae1 	.word	0x00002ae1
    34b8:	00003635 	.word	0x00003635

000034bc <_usart_sync_enable>:

/**
 * \brief Enable SERCOM module
 */
void _usart_sync_enable(struct _usart_sync_device *const device)
{
    34bc:	b580      	push	{r7, lr}
    34be:	b082      	sub	sp, #8
    34c0:	af00      	add	r7, sp, #0
    34c2:	6078      	str	r0, [r7, #4]
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    34c4:	687b      	ldr	r3, [r7, #4]
    34c6:	681b      	ldr	r3, [r3, #0]
    34c8:	0018      	movs	r0, r3
    34ca:	4b03      	ldr	r3, [pc, #12]	; (34d8 <_usart_sync_enable+0x1c>)
    34cc:	4798      	blx	r3
}
    34ce:	46c0      	nop			; (mov r8, r8)
    34d0:	46bd      	mov	sp, r7
    34d2:	b002      	add	sp, #8
    34d4:	bd80      	pop	{r7, pc}
    34d6:	46c0      	nop			; (mov r8, r8)
    34d8:	0000324d 	.word	0x0000324d

000034dc <_usart_sync_write_byte>:

/**
 * \brief Write a byte to the given SERCOM USART instance
 */
void _usart_sync_write_byte(struct _usart_sync_device *const device, uint8_t data)
{
    34dc:	b580      	push	{r7, lr}
    34de:	b082      	sub	sp, #8
    34e0:	af00      	add	r7, sp, #0
    34e2:	6078      	str	r0, [r7, #4]
    34e4:	000a      	movs	r2, r1
    34e6:	1cfb      	adds	r3, r7, #3
    34e8:	701a      	strb	r2, [r3, #0]
	hri_sercomusart_write_DATA_reg(device->hw, data);
    34ea:	687b      	ldr	r3, [r7, #4]
    34ec:	681a      	ldr	r2, [r3, #0]
    34ee:	1cfb      	adds	r3, r7, #3
    34f0:	781b      	ldrb	r3, [r3, #0]
    34f2:	b29b      	uxth	r3, r3
    34f4:	0019      	movs	r1, r3
    34f6:	0010      	movs	r0, r2
    34f8:	4b02      	ldr	r3, [pc, #8]	; (3504 <_usart_sync_write_byte+0x28>)
    34fa:	4798      	blx	r3
}
    34fc:	46c0      	nop			; (mov r8, r8)
    34fe:	46bd      	mov	sp, r7
    3500:	b002      	add	sp, #8
    3502:	bd80      	pop	{r7, pc}
    3504:	000033eb 	.word	0x000033eb

00003508 <_usart_sync_read_byte>:

/**
 * \brief Read a byte from the given SERCOM USART instance
 */
uint8_t _usart_sync_read_byte(const struct _usart_sync_device *const device)
{
    3508:	b580      	push	{r7, lr}
    350a:	b082      	sub	sp, #8
    350c:	af00      	add	r7, sp, #0
    350e:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_read_DATA_reg(device->hw);
    3510:	687b      	ldr	r3, [r7, #4]
    3512:	681b      	ldr	r3, [r3, #0]
    3514:	0018      	movs	r0, r3
    3516:	4b04      	ldr	r3, [pc, #16]	; (3528 <_usart_sync_read_byte+0x20>)
    3518:	4798      	blx	r3
    351a:	0003      	movs	r3, r0
    351c:	b2db      	uxtb	r3, r3
}
    351e:	0018      	movs	r0, r3
    3520:	46bd      	mov	sp, r7
    3522:	b002      	add	sp, #8
    3524:	bd80      	pop	{r7, pc}
    3526:	46c0      	nop			; (mov r8, r8)
    3528:	00003409 	.word	0x00003409

0000352c <_usart_sync_is_ready_to_send>:

/**
 * \brief Check if USART is ready to send next byte
 */
bool _usart_sync_is_ready_to_send(const struct _usart_sync_device *const device)
{
    352c:	b580      	push	{r7, lr}
    352e:	b082      	sub	sp, #8
    3530:	af00      	add	r7, sp, #0
    3532:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    3534:	687b      	ldr	r3, [r7, #4]
    3536:	681b      	ldr	r3, [r3, #0]
    3538:	0018      	movs	r0, r3
    353a:	4b03      	ldr	r3, [pc, #12]	; (3548 <_usart_sync_is_ready_to_send+0x1c>)
    353c:	4798      	blx	r3
    353e:	0003      	movs	r3, r0
}
    3540:	0018      	movs	r0, r3
    3542:	46bd      	mov	sp, r7
    3544:	b002      	add	sp, #8
    3546:	bd80      	pop	{r7, pc}
    3548:	000030fd 	.word	0x000030fd

0000354c <_usart_sync_is_transmit_done>:

/**
 * \brief Check if USART transmission complete
 */
bool _usart_sync_is_transmit_done(const struct _usart_sync_device *const device)
{
    354c:	b580      	push	{r7, lr}
    354e:	b082      	sub	sp, #8
    3550:	af00      	add	r7, sp, #0
    3552:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    3554:	687b      	ldr	r3, [r7, #4]
    3556:	681b      	ldr	r3, [r3, #0]
    3558:	0018      	movs	r0, r3
    355a:	4b03      	ldr	r3, [pc, #12]	; (3568 <_usart_sync_is_transmit_done+0x1c>)
    355c:	4798      	blx	r3
    355e:	0003      	movs	r3, r0
}
    3560:	0018      	movs	r0, r3
    3562:	46bd      	mov	sp, r7
    3564:	b002      	add	sp, #8
    3566:	bd80      	pop	{r7, pc}
    3568:	0000311f 	.word	0x0000311f

0000356c <_usart_sync_is_byte_received>:

/**
 * \brief Check if there is data received by USART
 */
bool _usart_sync_is_byte_received(const struct _usart_sync_device *const device)
{
    356c:	b580      	push	{r7, lr}
    356e:	b082      	sub	sp, #8
    3570:	af00      	add	r7, sp, #0
    3572:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    3574:	687b      	ldr	r3, [r7, #4]
    3576:	681b      	ldr	r3, [r3, #0]
    3578:	0018      	movs	r0, r3
    357a:	4b03      	ldr	r3, [pc, #12]	; (3588 <_usart_sync_is_byte_received+0x1c>)
    357c:	4798      	blx	r3
    357e:	0003      	movs	r3, r0
}
    3580:	0018      	movs	r0, r3
    3582:	46bd      	mov	sp, r7
    3584:	b002      	add	sp, #8
    3586:	bd80      	pop	{r7, pc}
    3588:	00003141 	.word	0x00003141

0000358c <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    358c:	b580      	push	{r7, lr}
    358e:	b082      	sub	sp, #8
    3590:	af00      	add	r7, sp, #0
    3592:	6078      	str	r0, [r7, #4]
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    3594:	687b      	ldr	r3, [r7, #4]
    3596:	4a04      	ldr	r2, [pc, #16]	; (35a8 <_sercom_get_hardware_index+0x1c>)
    3598:	4694      	mov	ip, r2
    359a:	4463      	add	r3, ip
    359c:	0a9b      	lsrs	r3, r3, #10
    359e:	b2db      	uxtb	r3, r3
}
    35a0:	0018      	movs	r0, r3
    35a2:	46bd      	mov	sp, r7
    35a4:	b002      	add	sp, #8
    35a6:	bd80      	pop	{r7, pc}
    35a8:	bdfff800 	.word	0xbdfff800

000035ac <_get_sercom_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static uint8_t _get_sercom_index(const void *const hw)
{
    35ac:	b590      	push	{r4, r7, lr}
    35ae:	b085      	sub	sp, #20
    35b0:	af00      	add	r7, sp, #0
    35b2:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    35b4:	230e      	movs	r3, #14
    35b6:	18fc      	adds	r4, r7, r3
    35b8:	687b      	ldr	r3, [r7, #4]
    35ba:	0018      	movs	r0, r3
    35bc:	4b18      	ldr	r3, [pc, #96]	; (3620 <_get_sercom_index+0x74>)
    35be:	4798      	blx	r3
    35c0:	0003      	movs	r3, r0
    35c2:	7023      	strb	r3, [r4, #0]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    35c4:	230f      	movs	r3, #15
    35c6:	18fb      	adds	r3, r7, r3
    35c8:	2200      	movs	r2, #0
    35ca:	701a      	strb	r2, [r3, #0]
    35cc:	e018      	b.n	3600 <_get_sercom_index+0x54>
		if (_usarts[i].number == sercom_offset) {
    35ce:	230f      	movs	r3, #15
    35d0:	18fb      	adds	r3, r7, r3
    35d2:	781a      	ldrb	r2, [r3, #0]
    35d4:	4913      	ldr	r1, [pc, #76]	; (3624 <_get_sercom_index+0x78>)
    35d6:	0013      	movs	r3, r2
    35d8:	009b      	lsls	r3, r3, #2
    35da:	189b      	adds	r3, r3, r2
    35dc:	009b      	lsls	r3, r3, #2
    35de:	5c5b      	ldrb	r3, [r3, r1]
    35e0:	220e      	movs	r2, #14
    35e2:	18ba      	adds	r2, r7, r2
    35e4:	7812      	ldrb	r2, [r2, #0]
    35e6:	429a      	cmp	r2, r3
    35e8:	d103      	bne.n	35f2 <_get_sercom_index+0x46>
			return i;
    35ea:	230f      	movs	r3, #15
    35ec:	18fb      	adds	r3, r7, r3
    35ee:	781b      	ldrb	r3, [r3, #0]
    35f0:	e012      	b.n	3618 <_get_sercom_index+0x6c>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    35f2:	230f      	movs	r3, #15
    35f4:	18fb      	adds	r3, r7, r3
    35f6:	781a      	ldrb	r2, [r3, #0]
    35f8:	230f      	movs	r3, #15
    35fa:	18fb      	adds	r3, r7, r3
    35fc:	3201      	adds	r2, #1
    35fe:	701a      	strb	r2, [r3, #0]
    3600:	230f      	movs	r3, #15
    3602:	18fb      	adds	r3, r7, r3
    3604:	781b      	ldrb	r3, [r3, #0]
    3606:	2b00      	cmp	r3, #0
    3608:	d0e1      	beq.n	35ce <_get_sercom_index+0x22>
		}
	}

	ASSERT(false);
    360a:	4a07      	ldr	r2, [pc, #28]	; (3628 <_get_sercom_index+0x7c>)
    360c:	4b07      	ldr	r3, [pc, #28]	; (362c <_get_sercom_index+0x80>)
    360e:	0019      	movs	r1, r3
    3610:	2000      	movs	r0, #0
    3612:	4b07      	ldr	r3, [pc, #28]	; (3630 <_get_sercom_index+0x84>)
    3614:	4798      	blx	r3
	return 0;
    3616:	2300      	movs	r3, #0
}
    3618:	0018      	movs	r0, r3
    361a:	46bd      	mov	sp, r7
    361c:	b005      	add	sp, #20
    361e:	bd90      	pop	{r4, r7, pc}
    3620:	0000358d 	.word	0x0000358d
    3624:	20000004 	.word	0x20000004
    3628:	0000023a 	.word	0x0000023a
    362c:	00010d7c 	.word	0x00010d7c
    3630:	00002ae1 	.word	0x00002ae1

00003634 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    3634:	b590      	push	{r4, r7, lr}
    3636:	b085      	sub	sp, #20
    3638:	af00      	add	r7, sp, #0
    363a:	6078      	str	r0, [r7, #4]
	uint8_t i = _get_sercom_index(hw);
    363c:	230f      	movs	r3, #15
    363e:	18fc      	adds	r4, r7, r3
    3640:	687b      	ldr	r3, [r7, #4]
    3642:	0018      	movs	r0, r3
    3644:	4b6f      	ldr	r3, [pc, #444]	; (3804 <_usart_init+0x1d0>)
    3646:	4798      	blx	r3
    3648:	0003      	movs	r3, r0
    364a:	7023      	strb	r3, [r4, #0]

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    364c:	687b      	ldr	r3, [r7, #4]
    364e:	2101      	movs	r1, #1
    3650:	0018      	movs	r0, r3
    3652:	4b6d      	ldr	r3, [pc, #436]	; (3808 <_usart_init+0x1d4>)
    3654:	4798      	blx	r3
    3656:	0003      	movs	r3, r0
    3658:	001a      	movs	r2, r3
    365a:	2301      	movs	r3, #1
    365c:	4053      	eors	r3, r2
    365e:	b2db      	uxtb	r3, r3
    3660:	2b00      	cmp	r3, #0
    3662:	d025      	beq.n	36b0 <_usart_init+0x7c>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    3664:	230f      	movs	r3, #15
    3666:	18fb      	adds	r3, r7, r3
    3668:	781a      	ldrb	r2, [r3, #0]
    366a:	4968      	ldr	r1, [pc, #416]	; (380c <_usart_init+0x1d8>)
    366c:	0013      	movs	r3, r2
    366e:	009b      	lsls	r3, r3, #2
    3670:	189b      	adds	r3, r3, r2
    3672:	009b      	lsls	r3, r3, #2
    3674:	18cb      	adds	r3, r1, r3
    3676:	3304      	adds	r3, #4
    3678:	681b      	ldr	r3, [r3, #0]
    367a:	221c      	movs	r2, #28
    367c:	4013      	ands	r3, r2
    367e:	60bb      	str	r3, [r7, #8]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    3680:	687b      	ldr	r3, [r7, #4]
    3682:	2102      	movs	r1, #2
    3684:	0018      	movs	r0, r3
    3686:	4b62      	ldr	r3, [pc, #392]	; (3810 <_usart_init+0x1dc>)
    3688:	4798      	blx	r3
    368a:	1e03      	subs	r3, r0, #0
    368c:	d008      	beq.n	36a0 <_usart_init+0x6c>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
    368e:	687b      	ldr	r3, [r7, #4]
    3690:	0018      	movs	r0, r3
    3692:	4b60      	ldr	r3, [pc, #384]	; (3814 <_usart_init+0x1e0>)
    3694:	4798      	blx	r3
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
    3696:	687b      	ldr	r3, [r7, #4]
    3698:	2102      	movs	r1, #2
    369a:	0018      	movs	r0, r3
    369c:	4b5e      	ldr	r3, [pc, #376]	; (3818 <_usart_init+0x1e4>)
    369e:	4798      	blx	r3
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    36a0:	68bb      	ldr	r3, [r7, #8]
    36a2:	2201      	movs	r2, #1
    36a4:	431a      	orrs	r2, r3
    36a6:	687b      	ldr	r3, [r7, #4]
    36a8:	0011      	movs	r1, r2
    36aa:	0018      	movs	r0, r3
    36ac:	4b5b      	ldr	r3, [pc, #364]	; (381c <_usart_init+0x1e8>)
    36ae:	4798      	blx	r3
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);
    36b0:	687b      	ldr	r3, [r7, #4]
    36b2:	2101      	movs	r1, #1
    36b4:	0018      	movs	r0, r3
    36b6:	4b58      	ldr	r3, [pc, #352]	; (3818 <_usart_init+0x1e4>)
    36b8:	4798      	blx	r3

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    36ba:	230f      	movs	r3, #15
    36bc:	18fb      	adds	r3, r7, r3
    36be:	781a      	ldrb	r2, [r3, #0]
    36c0:	4952      	ldr	r1, [pc, #328]	; (380c <_usart_init+0x1d8>)
    36c2:	0013      	movs	r3, r2
    36c4:	009b      	lsls	r3, r3, #2
    36c6:	189b      	adds	r3, r3, r2
    36c8:	009b      	lsls	r3, r3, #2
    36ca:	18cb      	adds	r3, r1, r3
    36cc:	3304      	adds	r3, #4
    36ce:	681a      	ldr	r2, [r3, #0]
    36d0:	687b      	ldr	r3, [r7, #4]
    36d2:	0011      	movs	r1, r2
    36d4:	0018      	movs	r0, r3
    36d6:	4b51      	ldr	r3, [pc, #324]	; (381c <_usart_init+0x1e8>)
    36d8:	4798      	blx	r3
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    36da:	230f      	movs	r3, #15
    36dc:	18fb      	adds	r3, r7, r3
    36de:	781a      	ldrb	r2, [r3, #0]
    36e0:	494a      	ldr	r1, [pc, #296]	; (380c <_usart_init+0x1d8>)
    36e2:	0013      	movs	r3, r2
    36e4:	009b      	lsls	r3, r3, #2
    36e6:	189b      	adds	r3, r3, r2
    36e8:	009b      	lsls	r3, r3, #2
    36ea:	18cb      	adds	r3, r1, r3
    36ec:	3308      	adds	r3, #8
    36ee:	681a      	ldr	r2, [r3, #0]
    36f0:	687b      	ldr	r3, [r7, #4]
    36f2:	0011      	movs	r1, r2
    36f4:	0018      	movs	r0, r3
    36f6:	4b4a      	ldr	r3, [pc, #296]	; (3820 <_usart_init+0x1ec>)
    36f8:	4798      	blx	r3
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    36fa:	230f      	movs	r3, #15
    36fc:	18fb      	adds	r3, r7, r3
    36fe:	781a      	ldrb	r2, [r3, #0]
    3700:	4942      	ldr	r1, [pc, #264]	; (380c <_usart_init+0x1d8>)
    3702:	0013      	movs	r3, r2
    3704:	009b      	lsls	r3, r3, #2
    3706:	189b      	adds	r3, r3, r2
    3708:	009b      	lsls	r3, r3, #2
    370a:	18cb      	adds	r3, r1, r3
    370c:	3304      	adds	r3, #4
    370e:	681a      	ldr	r2, [r3, #0]
    3710:	2380      	movs	r3, #128	; 0x80
    3712:	019b      	lsls	r3, r3, #6
    3714:	4013      	ands	r3, r2
    3716:	d10e      	bne.n	3736 <_usart_init+0x102>
    3718:	230f      	movs	r3, #15
    371a:	18fb      	adds	r3, r7, r3
    371c:	781a      	ldrb	r2, [r3, #0]
    371e:	493b      	ldr	r1, [pc, #236]	; (380c <_usart_init+0x1d8>)
    3720:	0013      	movs	r3, r2
    3722:	009b      	lsls	r3, r3, #2
    3724:	189b      	adds	r3, r3, r2
    3726:	009b      	lsls	r3, r3, #2
    3728:	18cb      	adds	r3, r1, r3
    372a:	3304      	adds	r3, #4
    372c:	681a      	ldr	r2, [r3, #0]
    372e:	23c0      	movs	r3, #192	; 0xc0
    3730:	01db      	lsls	r3, r3, #7
    3732:	4013      	ands	r3, r2
    3734:	d030      	beq.n	3798 <_usart_init+0x164>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    3736:	230f      	movs	r3, #15
    3738:	18fb      	adds	r3, r7, r3
    373a:	781a      	ldrb	r2, [r3, #0]
    373c:	4933      	ldr	r1, [pc, #204]	; (380c <_usart_init+0x1d8>)
    373e:	0013      	movs	r3, r2
    3740:	009b      	lsls	r3, r3, #2
    3742:	189b      	adds	r3, r3, r2
    3744:	009b      	lsls	r3, r3, #2
    3746:	18cb      	adds	r3, r1, r3
    3748:	330c      	adds	r3, #12
    374a:	881b      	ldrh	r3, [r3, #0]
    374c:	04db      	lsls	r3, r3, #19
    374e:	0cdb      	lsrs	r3, r3, #19
    3750:	b299      	uxth	r1, r3
    3752:	687a      	ldr	r2, [r7, #4]
    3754:	8993      	ldrh	r3, [r2, #12]
    3756:	04c9      	lsls	r1, r1, #19
    3758:	0cc8      	lsrs	r0, r1, #19
    375a:	0b5b      	lsrs	r3, r3, #13
    375c:	035b      	lsls	r3, r3, #13
    375e:	1c19      	adds	r1, r3, #0
    3760:	1c03      	adds	r3, r0, #0
    3762:	430b      	orrs	r3, r1
    3764:	8193      	strh	r3, [r2, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    3766:	230f      	movs	r3, #15
    3768:	18fb      	adds	r3, r7, r3
    376a:	781a      	ldrb	r2, [r3, #0]
    376c:	4927      	ldr	r1, [pc, #156]	; (380c <_usart_init+0x1d8>)
    376e:	0013      	movs	r3, r2
    3770:	009b      	lsls	r3, r3, #2
    3772:	189b      	adds	r3, r3, r2
    3774:	009b      	lsls	r3, r3, #2
    3776:	18cb      	adds	r3, r1, r3
    3778:	330e      	adds	r3, #14
    377a:	781b      	ldrb	r3, [r3, #0]
    377c:	1c1a      	adds	r2, r3, #0
    377e:	2307      	movs	r3, #7
    3780:	4013      	ands	r3, r2
    3782:	b2d9      	uxtb	r1, r3
    3784:	687a      	ldr	r2, [r7, #4]
    3786:	8993      	ldrh	r3, [r2, #12]
    3788:	0348      	lsls	r0, r1, #13
    378a:	04db      	lsls	r3, r3, #19
    378c:	0cdb      	lsrs	r3, r3, #19
    378e:	1c19      	adds	r1, r3, #0
    3790:	1c03      	adds	r3, r0, #0
    3792:	430b      	orrs	r3, r1
    3794:	8193      	strh	r3, [r2, #12]
    3796:	e00f      	b.n	37b8 <_usart_init+0x184>
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    3798:	230f      	movs	r3, #15
    379a:	18fb      	adds	r3, r7, r3
    379c:	781a      	ldrb	r2, [r3, #0]
    379e:	491b      	ldr	r1, [pc, #108]	; (380c <_usart_init+0x1d8>)
    37a0:	0013      	movs	r3, r2
    37a2:	009b      	lsls	r3, r3, #2
    37a4:	189b      	adds	r3, r3, r2
    37a6:	009b      	lsls	r3, r3, #2
    37a8:	18cb      	adds	r3, r1, r3
    37aa:	330c      	adds	r3, #12
    37ac:	881a      	ldrh	r2, [r3, #0]
    37ae:	687b      	ldr	r3, [r7, #4]
    37b0:	0011      	movs	r1, r2
    37b2:	0018      	movs	r0, r3
    37b4:	4b1b      	ldr	r3, [pc, #108]	; (3824 <_usart_init+0x1f0>)
    37b6:	4798      	blx	r3
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    37b8:	230f      	movs	r3, #15
    37ba:	18fb      	adds	r3, r7, r3
    37bc:	781a      	ldrb	r2, [r3, #0]
    37be:	4913      	ldr	r1, [pc, #76]	; (380c <_usart_init+0x1d8>)
    37c0:	0013      	movs	r3, r2
    37c2:	009b      	lsls	r3, r3, #2
    37c4:	189b      	adds	r3, r3, r2
    37c6:	009b      	lsls	r3, r3, #2
    37c8:	18cb      	adds	r3, r1, r3
    37ca:	330f      	adds	r3, #15
    37cc:	781a      	ldrb	r2, [r3, #0]
    37ce:	687b      	ldr	r3, [r7, #4]
    37d0:	0011      	movs	r1, r2
    37d2:	0018      	movs	r0, r3
    37d4:	4b14      	ldr	r3, [pc, #80]	; (3828 <_usart_init+0x1f4>)
    37d6:	4798      	blx	r3
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    37d8:	230f      	movs	r3, #15
    37da:	18fb      	adds	r3, r7, r3
    37dc:	781a      	ldrb	r2, [r3, #0]
    37de:	490b      	ldr	r1, [pc, #44]	; (380c <_usart_init+0x1d8>)
    37e0:	0013      	movs	r3, r2
    37e2:	009b      	lsls	r3, r3, #2
    37e4:	189b      	adds	r3, r3, r2
    37e6:	009b      	lsls	r3, r3, #2
    37e8:	18cb      	adds	r3, r1, r3
    37ea:	3310      	adds	r3, #16
    37ec:	781a      	ldrb	r2, [r3, #0]
    37ee:	687b      	ldr	r3, [r7, #4]
    37f0:	0011      	movs	r1, r2
    37f2:	0018      	movs	r0, r3
    37f4:	4b0d      	ldr	r3, [pc, #52]	; (382c <_usart_init+0x1f8>)
    37f6:	4798      	blx	r3

	return ERR_NONE;
    37f8:	2300      	movs	r3, #0
}
    37fa:	0018      	movs	r0, r3
    37fc:	46bd      	mov	sp, r7
    37fe:	b005      	add	sp, #20
    3800:	bd90      	pop	{r4, r7, pc}
    3802:	46c0      	nop			; (mov r8, r8)
    3804:	000035ad 	.word	0x000035ad
    3808:	00003071 	.word	0x00003071
    380c:	20000004 	.word	0x20000004
    3810:	000032a5 	.word	0x000032a5
    3814:	00003279 	.word	0x00003279
    3818:	00003053 	.word	0x00003053
    381c:	000032d5 	.word	0x000032d5
    3820:	00003325 	.word	0x00003325
    3824:	0000336b 	.word	0x0000336b
    3828:	00003389 	.word	0x00003389
    382c:	0000343f 	.word	0x0000343f

00003830 <_spi_sync_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
    3830:	b580      	push	{r7, lr}
    3832:	b082      	sub	sp, #8
    3834:	af00      	add	r7, sp, #0
    3836:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    3838:	687b      	ldr	r3, [r7, #4]
    383a:	2101      	movs	r1, #1
    383c:	0018      	movs	r0, r3
    383e:	4b08      	ldr	r3, [pc, #32]	; (3860 <_spi_sync_enable+0x30>)
    3840:	4798      	blx	r3
    3842:	1e03      	subs	r3, r0, #0
    3844:	d002      	beq.n	384c <_spi_sync_enable+0x1c>
		return ERR_BUSY;
    3846:	2304      	movs	r3, #4
    3848:	425b      	negs	r3, r3
    384a:	e004      	b.n	3856 <_spi_sync_enable+0x26>
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);
    384c:	687b      	ldr	r3, [r7, #4]
    384e:	0018      	movs	r0, r3
    3850:	4b04      	ldr	r3, [pc, #16]	; (3864 <_spi_sync_enable+0x34>)
    3852:	4798      	blx	r3

	return ERR_NONE;
    3854:	2300      	movs	r3, #0
}
    3856:	0018      	movs	r0, r3
    3858:	46bd      	mov	sp, r7
    385a:	b002      	add	sp, #8
    385c:	bd80      	pop	{r7, pc}
    385e:	46c0      	nop			; (mov r8, r8)
    3860:	00003033 	.word	0x00003033
    3864:	00003165 	.word	0x00003165

00003868 <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    3868:	b580      	push	{r7, lr}
    386a:	b082      	sub	sp, #8
    386c:	af00      	add	r7, sp, #0
    386e:	6078      	str	r0, [r7, #4]
    3870:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    3872:	687b      	ldr	r3, [r7, #4]
    3874:	2b00      	cmp	r3, #0
    3876:	d004      	beq.n	3882 <_spi_load_regs_master+0x1a>
    3878:	683b      	ldr	r3, [r7, #0]
    387a:	2b00      	cmp	r3, #0
    387c:	d001      	beq.n	3882 <_spi_load_regs_master+0x1a>
    387e:	2301      	movs	r3, #1
    3880:	e000      	b.n	3884 <_spi_load_regs_master+0x1c>
    3882:	2300      	movs	r3, #0
    3884:	1c1a      	adds	r2, r3, #0
    3886:	2301      	movs	r3, #1
    3888:	4013      	ands	r3, r2
    388a:	b2db      	uxtb	r3, r3
    388c:	4a1f      	ldr	r2, [pc, #124]	; (390c <_spi_load_regs_master+0xa4>)
    388e:	4920      	ldr	r1, [pc, #128]	; (3910 <_spi_load_regs_master+0xa8>)
    3890:	0018      	movs	r0, r3
    3892:	4b20      	ldr	r3, [pc, #128]	; (3914 <_spi_load_regs_master+0xac>)
    3894:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    3896:	683b      	ldr	r3, [r7, #0]
    3898:	781a      	ldrb	r2, [r3, #0]
    389a:	7859      	ldrb	r1, [r3, #1]
    389c:	0209      	lsls	r1, r1, #8
    389e:	430a      	orrs	r2, r1
    38a0:	7899      	ldrb	r1, [r3, #2]
    38a2:	0409      	lsls	r1, r1, #16
    38a4:	430a      	orrs	r2, r1
    38a6:	78db      	ldrb	r3, [r3, #3]
    38a8:	061b      	lsls	r3, r3, #24
    38aa:	4313      	orrs	r3, r2
    38ac:	001a      	movs	r2, r3
	hri_sercomspi_write_CTRLA_reg(
    38ae:	4b1a      	ldr	r3, [pc, #104]	; (3918 <_spi_load_regs_master+0xb0>)
    38b0:	401a      	ands	r2, r3
    38b2:	687b      	ldr	r3, [r7, #4]
    38b4:	0011      	movs	r1, r2
    38b6:	0018      	movs	r0, r3
    38b8:	4b18      	ldr	r3, [pc, #96]	; (391c <_spi_load_regs_master+0xb4>)
    38ba:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    38bc:	683b      	ldr	r3, [r7, #0]
    38be:	791a      	ldrb	r2, [r3, #4]
    38c0:	7959      	ldrb	r1, [r3, #5]
    38c2:	0209      	lsls	r1, r1, #8
    38c4:	430a      	orrs	r2, r1
    38c6:	7999      	ldrb	r1, [r3, #6]
    38c8:	0409      	lsls	r1, r1, #16
    38ca:	430a      	orrs	r2, r1
    38cc:	79db      	ldrb	r3, [r3, #7]
    38ce:	061b      	lsls	r3, r3, #24
    38d0:	4313      	orrs	r3, r2
    38d2:	001a      	movs	r2, r3
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    38d4:	4b12      	ldr	r3, [pc, #72]	; (3920 <_spi_load_regs_master+0xb8>)
    38d6:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(
    38d8:	2280      	movs	r2, #128	; 0x80
    38da:	0292      	lsls	r2, r2, #10
    38dc:	431a      	orrs	r2, r3
    38de:	687b      	ldr	r3, [r7, #4]
    38e0:	0011      	movs	r1, r2
    38e2:	0018      	movs	r0, r3
    38e4:	4b0f      	ldr	r3, [pc, #60]	; (3924 <_spi_load_regs_master+0xbc>)
    38e6:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    38e8:	683b      	ldr	r3, [r7, #0]
    38ea:	7b1a      	ldrb	r2, [r3, #12]
    38ec:	687b      	ldr	r3, [r7, #4]
    38ee:	0011      	movs	r1, r2
    38f0:	0018      	movs	r0, r3
    38f2:	4b0d      	ldr	r3, [pc, #52]	; (3928 <_spi_load_regs_master+0xc0>)
    38f4:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    38f6:	683b      	ldr	r3, [r7, #0]
    38f8:	7b5a      	ldrb	r2, [r3, #13]
    38fa:	687b      	ldr	r3, [r7, #4]
    38fc:	0011      	movs	r1, r2
    38fe:	0018      	movs	r0, r3
    3900:	4b0a      	ldr	r3, [pc, #40]	; (392c <_spi_load_regs_master+0xc4>)
    3902:	4798      	blx	r3
}
    3904:	46c0      	nop			; (mov r8, r8)
    3906:	46bd      	mov	sp, r7
    3908:	b002      	add	sp, #8
    390a:	bd80      	pop	{r7, pc}
    390c:	000008ef 	.word	0x000008ef
    3910:	00010d7c 	.word	0x00010d7c
    3914:	00002ae1 	.word	0x00002ae1
    3918:	fffffefc 	.word	0xfffffefc
    391c:	00003225 	.word	0x00003225
    3920:	fffd1dbf 	.word	0xfffd1dbf
    3924:	000032fd 	.word	0x000032fd
    3928:	0000334d 	.word	0x0000334d
    392c:	0000341f 	.word	0x0000341f

00003930 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    3930:	b580      	push	{r7, lr}
    3932:	b082      	sub	sp, #8
    3934:	af00      	add	r7, sp, #0
    3936:	6078      	str	r0, [r7, #4]
    3938:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    393a:	687b      	ldr	r3, [r7, #4]
    393c:	2b00      	cmp	r3, #0
    393e:	d004      	beq.n	394a <_spi_load_regs_slave+0x1a>
    3940:	683b      	ldr	r3, [r7, #0]
    3942:	2b00      	cmp	r3, #0
    3944:	d001      	beq.n	394a <_spi_load_regs_slave+0x1a>
    3946:	2301      	movs	r3, #1
    3948:	e000      	b.n	394c <_spi_load_regs_slave+0x1c>
    394a:	2300      	movs	r3, #0
    394c:	1c1a      	adds	r2, r3, #0
    394e:	2301      	movs	r3, #1
    3950:	4013      	ands	r3, r2
    3952:	b2db      	uxtb	r3, r3
    3954:	4a29      	ldr	r2, [pc, #164]	; (39fc <_spi_load_regs_slave+0xcc>)
    3956:	492a      	ldr	r1, [pc, #168]	; (3a00 <_spi_load_regs_slave+0xd0>)
    3958:	0018      	movs	r0, r3
    395a:	4b2a      	ldr	r3, [pc, #168]	; (3a04 <_spi_load_regs_slave+0xd4>)
    395c:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    395e:	683b      	ldr	r3, [r7, #0]
    3960:	781a      	ldrb	r2, [r3, #0]
    3962:	7859      	ldrb	r1, [r3, #1]
    3964:	0209      	lsls	r1, r1, #8
    3966:	430a      	orrs	r2, r1
    3968:	7899      	ldrb	r1, [r3, #2]
    396a:	0409      	lsls	r1, r1, #16
    396c:	430a      	orrs	r2, r1
    396e:	78db      	ldrb	r3, [r3, #3]
    3970:	061b      	lsls	r3, r3, #24
    3972:	4313      	orrs	r3, r2
    3974:	001a      	movs	r2, r3
	hri_sercomspi_write_CTRLA_reg(
    3976:	4b24      	ldr	r3, [pc, #144]	; (3a08 <_spi_load_regs_slave+0xd8>)
    3978:	401a      	ands	r2, r3
    397a:	687b      	ldr	r3, [r7, #4]
    397c:	0011      	movs	r1, r2
    397e:	0018      	movs	r0, r3
    3980:	4b22      	ldr	r3, [pc, #136]	; (3a0c <_spi_load_regs_slave+0xdc>)
    3982:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    3984:	683b      	ldr	r3, [r7, #0]
    3986:	791a      	ldrb	r2, [r3, #4]
    3988:	7959      	ldrb	r1, [r3, #5]
    398a:	0209      	lsls	r1, r1, #8
    398c:	430a      	orrs	r2, r1
    398e:	7999      	ldrb	r1, [r3, #6]
    3990:	0409      	lsls	r1, r1, #16
    3992:	430a      	orrs	r2, r1
    3994:	79db      	ldrb	r3, [r3, #7]
    3996:	061b      	lsls	r3, r3, #24
    3998:	4313      	orrs	r3, r2
    399a:	001a      	movs	r2, r3
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    399c:	4b1c      	ldr	r3, [pc, #112]	; (3a10 <_spi_load_regs_slave+0xe0>)
    399e:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(hw,
    39a0:	4a1c      	ldr	r2, [pc, #112]	; (3a14 <_spi_load_regs_slave+0xe4>)
    39a2:	431a      	orrs	r2, r3
    39a4:	687b      	ldr	r3, [r7, #4]
    39a6:	0011      	movs	r1, r2
    39a8:	0018      	movs	r0, r3
    39aa:	4b1b      	ldr	r3, [pc, #108]	; (3a18 <_spi_load_regs_slave+0xe8>)
    39ac:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    39ae:	683b      	ldr	r3, [r7, #0]
    39b0:	7a1a      	ldrb	r2, [r3, #8]
    39b2:	7a59      	ldrb	r1, [r3, #9]
    39b4:	0209      	lsls	r1, r1, #8
    39b6:	430a      	orrs	r2, r1
    39b8:	7a99      	ldrb	r1, [r3, #10]
    39ba:	0409      	lsls	r1, r1, #16
    39bc:	430a      	orrs	r2, r1
    39be:	7adb      	ldrb	r3, [r3, #11]
    39c0:	061b      	lsls	r3, r3, #24
    39c2:	4313      	orrs	r3, r2
    39c4:	001a      	movs	r2, r3
    39c6:	687b      	ldr	r3, [r7, #4]
    39c8:	0011      	movs	r1, r2
    39ca:	0018      	movs	r0, r3
    39cc:	4b13      	ldr	r3, [pc, #76]	; (3a1c <_spi_load_regs_slave+0xec>)
    39ce:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    39d0:	683b      	ldr	r3, [r7, #0]
    39d2:	7b5a      	ldrb	r2, [r3, #13]
    39d4:	687b      	ldr	r3, [r7, #4]
    39d6:	0011      	movs	r1, r2
    39d8:	0018      	movs	r0, r3
    39da:	4b11      	ldr	r3, [pc, #68]	; (3a20 <_spi_load_regs_slave+0xf0>)
    39dc:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    39de:	46c0      	nop			; (mov r8, r8)
    39e0:	2301      	movs	r3, #1
    39e2:	425a      	negs	r2, r3
    39e4:	687b      	ldr	r3, [r7, #4]
    39e6:	0011      	movs	r1, r2
    39e8:	0018      	movs	r0, r3
    39ea:	4b0e      	ldr	r3, [pc, #56]	; (3a24 <_spi_load_regs_slave+0xf4>)
    39ec:	4798      	blx	r3
    39ee:	1e03      	subs	r3, r0, #0
    39f0:	d1f6      	bne.n	39e0 <_spi_load_regs_slave+0xb0>
		;
}
    39f2:	46c0      	nop			; (mov r8, r8)
    39f4:	46bd      	mov	sp, r7
    39f6:	b002      	add	sp, #8
    39f8:	bd80      	pop	{r7, pc}
    39fa:	46c0      	nop			; (mov r8, r8)
    39fc:	00000903 	.word	0x00000903
    3a00:	00010d7c 	.word	0x00010d7c
    3a04:	00002ae1 	.word	0x00002ae1
    3a08:	fffffefc 	.word	0xfffffefc
    3a0c:	00003225 	.word	0x00003225
    3a10:	fffdddbf 	.word	0xfffdddbf
    3a14:	00020240 	.word	0x00020240
    3a18:	000032fd 	.word	0x000032fd
    3a1c:	000033a7 	.word	0x000033a7
    3a20:	0000341f 	.word	0x0000341f
    3a24:	00003033 	.word	0x00003033

00003a28 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    3a28:	b590      	push	{r4, r7, lr}
    3a2a:	b085      	sub	sp, #20
    3a2c:	af00      	add	r7, sp, #0
    3a2e:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    3a30:	687b      	ldr	r3, [r7, #4]
    3a32:	220e      	movs	r2, #14
    3a34:	18bc      	adds	r4, r7, r2
    3a36:	0018      	movs	r0, r3
    3a38:	4b18      	ldr	r3, [pc, #96]	; (3a9c <_spi_get_regs+0x74>)
    3a3a:	4798      	blx	r3
    3a3c:	0003      	movs	r3, r0
    3a3e:	7023      	strb	r3, [r4, #0]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    3a40:	230f      	movs	r3, #15
    3a42:	18fb      	adds	r3, r7, r3
    3a44:	2200      	movs	r2, #0
    3a46:	701a      	strb	r2, [r3, #0]
    3a48:	e01e      	b.n	3a88 <_spi_get_regs+0x60>
		if (sercomspi_regs[i].n == n) {
    3a4a:	230f      	movs	r3, #15
    3a4c:	18fb      	adds	r3, r7, r3
    3a4e:	781a      	ldrb	r2, [r3, #0]
    3a50:	4913      	ldr	r1, [pc, #76]	; (3aa0 <_spi_get_regs+0x78>)
    3a52:	0013      	movs	r3, r2
    3a54:	011b      	lsls	r3, r3, #4
    3a56:	189b      	adds	r3, r3, r2
    3a58:	18cb      	adds	r3, r1, r3
    3a5a:	3310      	adds	r3, #16
    3a5c:	781b      	ldrb	r3, [r3, #0]
    3a5e:	220e      	movs	r2, #14
    3a60:	18ba      	adds	r2, r7, r2
    3a62:	7812      	ldrb	r2, [r2, #0]
    3a64:	429a      	cmp	r2, r3
    3a66:	d108      	bne.n	3a7a <_spi_get_regs+0x52>
			return &sercomspi_regs[i];
    3a68:	230f      	movs	r3, #15
    3a6a:	18fb      	adds	r3, r7, r3
    3a6c:	781a      	ldrb	r2, [r3, #0]
    3a6e:	0013      	movs	r3, r2
    3a70:	011b      	lsls	r3, r3, #4
    3a72:	189b      	adds	r3, r3, r2
    3a74:	4a0a      	ldr	r2, [pc, #40]	; (3aa0 <_spi_get_regs+0x78>)
    3a76:	189b      	adds	r3, r3, r2
    3a78:	e00c      	b.n	3a94 <_spi_get_regs+0x6c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    3a7a:	230f      	movs	r3, #15
    3a7c:	18fb      	adds	r3, r7, r3
    3a7e:	781a      	ldrb	r2, [r3, #0]
    3a80:	230f      	movs	r3, #15
    3a82:	18fb      	adds	r3, r7, r3
    3a84:	3201      	adds	r2, #1
    3a86:	701a      	strb	r2, [r3, #0]
    3a88:	230f      	movs	r3, #15
    3a8a:	18fb      	adds	r3, r7, r3
    3a8c:	781b      	ldrb	r3, [r3, #0]
    3a8e:	2b01      	cmp	r3, #1
    3a90:	d9db      	bls.n	3a4a <_spi_get_regs+0x22>
		}
	}

	return NULL;
    3a92:	2300      	movs	r3, #0
}
    3a94:	0018      	movs	r0, r3
    3a96:	46bd      	mov	sp, r7
    3a98:	b005      	add	sp, #20
    3a9a:	bd90      	pop	{r4, r7, pc}
    3a9c:	0000358d 	.word	0x0000358d
    3aa0:	00010d98 	.word	0x00010d98

00003aa4 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    3aa4:	b580      	push	{r7, lr}
    3aa6:	b084      	sub	sp, #16
    3aa8:	af00      	add	r7, sp, #0
    3aaa:	6078      	str	r0, [r7, #4]
    3aac:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    3aae:	683b      	ldr	r3, [r7, #0]
    3ab0:	0018      	movs	r0, r3
    3ab2:	4b4a      	ldr	r3, [pc, #296]	; (3bdc <_spi_m_sync_init+0x138>)
    3ab4:	4798      	blx	r3
    3ab6:	0003      	movs	r3, r0
    3ab8:	60fb      	str	r3, [r7, #12]

	ASSERT(dev && hw);
    3aba:	687b      	ldr	r3, [r7, #4]
    3abc:	2b00      	cmp	r3, #0
    3abe:	d004      	beq.n	3aca <_spi_m_sync_init+0x26>
    3ac0:	683b      	ldr	r3, [r7, #0]
    3ac2:	2b00      	cmp	r3, #0
    3ac4:	d001      	beq.n	3aca <_spi_m_sync_init+0x26>
    3ac6:	2301      	movs	r3, #1
    3ac8:	e000      	b.n	3acc <_spi_m_sync_init+0x28>
    3aca:	2300      	movs	r3, #0
    3acc:	1c1a      	adds	r2, r3, #0
    3ace:	2301      	movs	r3, #1
    3ad0:	4013      	ands	r3, r2
    3ad2:	b2db      	uxtb	r3, r3
    3ad4:	4a42      	ldr	r2, [pc, #264]	; (3be0 <_spi_m_sync_init+0x13c>)
    3ad6:	4943      	ldr	r1, [pc, #268]	; (3be4 <_spi_m_sync_init+0x140>)
    3ad8:	0018      	movs	r0, r3
    3ada:	4b43      	ldr	r3, [pc, #268]	; (3be8 <_spi_m_sync_init+0x144>)
    3adc:	4798      	blx	r3

	if (regs == NULL) {
    3ade:	68fb      	ldr	r3, [r7, #12]
    3ae0:	2b00      	cmp	r3, #0
    3ae2:	d102      	bne.n	3aea <_spi_m_sync_init+0x46>
		return ERR_INVALID_ARG;
    3ae4:	230d      	movs	r3, #13
    3ae6:	425b      	negs	r3, r3
    3ae8:	e074      	b.n	3bd4 <_spi_m_sync_init+0x130>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    3aea:	683b      	ldr	r3, [r7, #0]
    3aec:	2101      	movs	r1, #1
    3aee:	0018      	movs	r0, r3
    3af0:	4b3e      	ldr	r3, [pc, #248]	; (3bec <_spi_m_sync_init+0x148>)
    3af2:	4798      	blx	r3
    3af4:	0003      	movs	r3, r0
    3af6:	001a      	movs	r2, r3
    3af8:	2301      	movs	r3, #1
    3afa:	4053      	eors	r3, r2
    3afc:	b2db      	uxtb	r3, r3
    3afe:	2b00      	cmp	r3, #0
    3b00:	d026      	beq.n	3b50 <_spi_m_sync_init+0xac>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    3b02:	68fb      	ldr	r3, [r7, #12]
    3b04:	781a      	ldrb	r2, [r3, #0]
    3b06:	7859      	ldrb	r1, [r3, #1]
    3b08:	0209      	lsls	r1, r1, #8
    3b0a:	430a      	orrs	r2, r1
    3b0c:	7899      	ldrb	r1, [r3, #2]
    3b0e:	0409      	lsls	r1, r1, #16
    3b10:	430a      	orrs	r2, r1
    3b12:	78db      	ldrb	r3, [r3, #3]
    3b14:	061b      	lsls	r3, r3, #24
    3b16:	4313      	orrs	r3, r2
    3b18:	001a      	movs	r2, r3
    3b1a:	231c      	movs	r3, #28
    3b1c:	4013      	ands	r3, r2
    3b1e:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    3b20:	683b      	ldr	r3, [r7, #0]
    3b22:	2102      	movs	r1, #2
    3b24:	0018      	movs	r0, r3
    3b26:	4b32      	ldr	r3, [pc, #200]	; (3bf0 <_spi_m_sync_init+0x14c>)
    3b28:	4798      	blx	r3
    3b2a:	1e03      	subs	r3, r0, #0
    3b2c:	d008      	beq.n	3b40 <_spi_m_sync_init+0x9c>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    3b2e:	683b      	ldr	r3, [r7, #0]
    3b30:	0018      	movs	r0, r3
    3b32:	4b30      	ldr	r3, [pc, #192]	; (3bf4 <_spi_m_sync_init+0x150>)
    3b34:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    3b36:	683b      	ldr	r3, [r7, #0]
    3b38:	2102      	movs	r1, #2
    3b3a:	0018      	movs	r0, r3
    3b3c:	4b2e      	ldr	r3, [pc, #184]	; (3bf8 <_spi_m_sync_init+0x154>)
    3b3e:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    3b40:	68bb      	ldr	r3, [r7, #8]
    3b42:	2201      	movs	r2, #1
    3b44:	431a      	orrs	r2, r3
    3b46:	683b      	ldr	r3, [r7, #0]
    3b48:	0011      	movs	r1, r2
    3b4a:	0018      	movs	r0, r3
    3b4c:	4b2b      	ldr	r3, [pc, #172]	; (3bfc <_spi_m_sync_init+0x158>)
    3b4e:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    3b50:	683b      	ldr	r3, [r7, #0]
    3b52:	2101      	movs	r1, #1
    3b54:	0018      	movs	r0, r3
    3b56:	4b28      	ldr	r3, [pc, #160]	; (3bf8 <_spi_m_sync_init+0x154>)
    3b58:	4798      	blx	r3

	dev->prvt = hw;
    3b5a:	687b      	ldr	r3, [r7, #4]
    3b5c:	683a      	ldr	r2, [r7, #0]
    3b5e:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    3b60:	68fb      	ldr	r3, [r7, #12]
    3b62:	781a      	ldrb	r2, [r3, #0]
    3b64:	7859      	ldrb	r1, [r3, #1]
    3b66:	0209      	lsls	r1, r1, #8
    3b68:	430a      	orrs	r2, r1
    3b6a:	7899      	ldrb	r1, [r3, #2]
    3b6c:	0409      	lsls	r1, r1, #16
    3b6e:	430a      	orrs	r2, r1
    3b70:	78db      	ldrb	r3, [r3, #3]
    3b72:	061b      	lsls	r3, r3, #24
    3b74:	4313      	orrs	r3, r2
    3b76:	001a      	movs	r2, r3
    3b78:	231c      	movs	r3, #28
    3b7a:	4013      	ands	r3, r2
    3b7c:	2b08      	cmp	r3, #8
    3b7e:	d106      	bne.n	3b8e <_spi_m_sync_init+0xea>
		_spi_load_regs_slave(hw, regs);
    3b80:	68fa      	ldr	r2, [r7, #12]
    3b82:	683b      	ldr	r3, [r7, #0]
    3b84:	0011      	movs	r1, r2
    3b86:	0018      	movs	r0, r3
    3b88:	4b1d      	ldr	r3, [pc, #116]	; (3c00 <_spi_m_sync_init+0x15c>)
    3b8a:	4798      	blx	r3
    3b8c:	e005      	b.n	3b9a <_spi_m_sync_init+0xf6>
	} else {
		_spi_load_regs_master(hw, regs);
    3b8e:	68fa      	ldr	r2, [r7, #12]
    3b90:	683b      	ldr	r3, [r7, #0]
    3b92:	0011      	movs	r1, r2
    3b94:	0018      	movs	r0, r3
    3b96:	4b1b      	ldr	r3, [pc, #108]	; (3c04 <_spi_m_sync_init+0x160>)
    3b98:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    3b9a:	68fb      	ldr	r3, [r7, #12]
    3b9c:	791a      	ldrb	r2, [r3, #4]
    3b9e:	7959      	ldrb	r1, [r3, #5]
    3ba0:	0209      	lsls	r1, r1, #8
    3ba2:	430a      	orrs	r2, r1
    3ba4:	7999      	ldrb	r1, [r3, #6]
    3ba6:	0409      	lsls	r1, r1, #16
    3ba8:	430a      	orrs	r2, r1
    3baa:	79db      	ldrb	r3, [r3, #7]
    3bac:	061b      	lsls	r3, r3, #24
    3bae:	4313      	orrs	r3, r2
    3bb0:	001a      	movs	r2, r3
    3bb2:	2307      	movs	r3, #7
    3bb4:	4013      	ands	r3, r2
    3bb6:	d101      	bne.n	3bbc <_spi_m_sync_init+0x118>
    3bb8:	2201      	movs	r2, #1
    3bba:	e000      	b.n	3bbe <_spi_m_sync_init+0x11a>
    3bbc:	2202      	movs	r2, #2
    3bbe:	687b      	ldr	r3, [r7, #4]
    3bc0:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    3bc2:	68fb      	ldr	r3, [r7, #12]
    3bc4:	7b9a      	ldrb	r2, [r3, #14]
    3bc6:	7bdb      	ldrb	r3, [r3, #15]
    3bc8:	021b      	lsls	r3, r3, #8
    3bca:	4313      	orrs	r3, r2
    3bcc:	b29a      	uxth	r2, r3
    3bce:	687b      	ldr	r3, [r7, #4]
    3bd0:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    3bd2:	2300      	movs	r3, #0
}
    3bd4:	0018      	movs	r0, r3
    3bd6:	46bd      	mov	sp, r7
    3bd8:	b004      	add	sp, #16
    3bda:	bd80      	pop	{r7, pc}
    3bdc:	00003a29 	.word	0x00003a29
    3be0:	00000925 	.word	0x00000925
    3be4:	00010d7c 	.word	0x00010d7c
    3be8:	00002ae1 	.word	0x00002ae1
    3bec:	00003033 	.word	0x00003033
    3bf0:	000031f5 	.word	0x000031f5
    3bf4:	000031c9 	.word	0x000031c9
    3bf8:	00003015 	.word	0x00003015
    3bfc:	00003225 	.word	0x00003225
    3c00:	00003931 	.word	0x00003931
    3c04:	00003869 	.word	0x00003869

00003c08 <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    3c08:	b580      	push	{r7, lr}
    3c0a:	b082      	sub	sp, #8
    3c0c:	af00      	add	r7, sp, #0
    3c0e:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    3c10:	687b      	ldr	r3, [r7, #4]
    3c12:	2b00      	cmp	r3, #0
    3c14:	d005      	beq.n	3c22 <_spi_m_sync_enable+0x1a>
    3c16:	687b      	ldr	r3, [r7, #4]
    3c18:	681b      	ldr	r3, [r3, #0]
    3c1a:	2b00      	cmp	r3, #0
    3c1c:	d001      	beq.n	3c22 <_spi_m_sync_enable+0x1a>
    3c1e:	2301      	movs	r3, #1
    3c20:	e000      	b.n	3c24 <_spi_m_sync_enable+0x1c>
    3c22:	2300      	movs	r3, #0
    3c24:	1c1a      	adds	r2, r3, #0
    3c26:	2301      	movs	r3, #1
    3c28:	4013      	ands	r3, r2
    3c2a:	b2d8      	uxtb	r0, r3
    3c2c:	2398      	movs	r3, #152	; 0x98
    3c2e:	011a      	lsls	r2, r3, #4
    3c30:	4b06      	ldr	r3, [pc, #24]	; (3c4c <_spi_m_sync_enable+0x44>)
    3c32:	0019      	movs	r1, r3
    3c34:	4b06      	ldr	r3, [pc, #24]	; (3c50 <_spi_m_sync_enable+0x48>)
    3c36:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    3c38:	687b      	ldr	r3, [r7, #4]
    3c3a:	681b      	ldr	r3, [r3, #0]
    3c3c:	0018      	movs	r0, r3
    3c3e:	4b05      	ldr	r3, [pc, #20]	; (3c54 <_spi_m_sync_enable+0x4c>)
    3c40:	4798      	blx	r3
    3c42:	0003      	movs	r3, r0
}
    3c44:	0018      	movs	r0, r3
    3c46:	46bd      	mov	sp, r7
    3c48:	b002      	add	sp, #8
    3c4a:	bd80      	pop	{r7, pc}
    3c4c:	00010d7c 	.word	0x00010d7c
    3c50:	00002ae1 	.word	0x00002ae1
    3c54:	00003831 	.word	0x00003831

00003c58 <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    3c58:	b580      	push	{r7, lr}
    3c5a:	b082      	sub	sp, #8
    3c5c:	af00      	add	r7, sp, #0
    3c5e:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    3c60:	46c0      	nop			; (mov r8, r8)
    3c62:	687b      	ldr	r3, [r7, #4]
    3c64:	2103      	movs	r1, #3
    3c66:	0018      	movs	r0, r3
    3c68:	4b06      	ldr	r3, [pc, #24]	; (3c84 <_spi_wait_bus_idle+0x2c>)
    3c6a:	4798      	blx	r3
    3c6c:	1e03      	subs	r3, r0, #0
    3c6e:	d0f8      	beq.n	3c62 <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    3c70:	687b      	ldr	r3, [r7, #4]
    3c72:	2103      	movs	r1, #3
    3c74:	0018      	movs	r0, r3
    3c76:	4b04      	ldr	r3, [pc, #16]	; (3c88 <_spi_wait_bus_idle+0x30>)
    3c78:	4798      	blx	r3
}
    3c7a:	46c0      	nop			; (mov r8, r8)
    3c7c:	46bd      	mov	sp, r7
    3c7e:	b002      	add	sp, #8
    3c80:	bd80      	pop	{r7, pc}
    3c82:	46c0      	nop			; (mov r8, r8)
    3c84:	00003091 	.word	0x00003091
    3c88:	000030df 	.word	0x000030df

00003c8c <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    3c8c:	b580      	push	{r7, lr}
    3c8e:	b086      	sub	sp, #24
    3c90:	af00      	add	r7, sp, #0
    3c92:	60f8      	str	r0, [r7, #12]
    3c94:	60b9      	str	r1, [r7, #8]
    3c96:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    3c98:	68bb      	ldr	r3, [r7, #8]
    3c9a:	2204      	movs	r2, #4
    3c9c:	4013      	ands	r3, r2
    3c9e:	d101      	bne.n	3ca4 <_spi_rx_check_and_receive+0x18>
		return false;
    3ca0:	2300      	movs	r3, #0
    3ca2:	e024      	b.n	3cee <_spi_rx_check_and_receive+0x62>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    3ca4:	68fb      	ldr	r3, [r7, #12]
    3ca6:	0018      	movs	r0, r3
    3ca8:	4b13      	ldr	r3, [pc, #76]	; (3cf8 <_spi_rx_check_and_receive+0x6c>)
    3caa:	4798      	blx	r3
    3cac:	0003      	movs	r3, r0
    3cae:	617b      	str	r3, [r7, #20]

	if (ctrl->rxbuf) {
    3cb0:	687b      	ldr	r3, [r7, #4]
    3cb2:	685b      	ldr	r3, [r3, #4]
    3cb4:	2b00      	cmp	r3, #0
    3cb6:	d014      	beq.n	3ce2 <_spi_rx_check_and_receive+0x56>
		*ctrl->rxbuf++ = (uint8_t)data;
    3cb8:	687b      	ldr	r3, [r7, #4]
    3cba:	685b      	ldr	r3, [r3, #4]
    3cbc:	1c59      	adds	r1, r3, #1
    3cbe:	687a      	ldr	r2, [r7, #4]
    3cc0:	6051      	str	r1, [r2, #4]
    3cc2:	697a      	ldr	r2, [r7, #20]
    3cc4:	b2d2      	uxtb	r2, r2
    3cc6:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    3cc8:	687b      	ldr	r3, [r7, #4]
    3cca:	7c1b      	ldrb	r3, [r3, #16]
    3ccc:	2b01      	cmp	r3, #1
    3cce:	d908      	bls.n	3ce2 <_spi_rx_check_and_receive+0x56>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    3cd0:	687b      	ldr	r3, [r7, #4]
    3cd2:	685b      	ldr	r3, [r3, #4]
    3cd4:	1c59      	adds	r1, r3, #1
    3cd6:	687a      	ldr	r2, [r7, #4]
    3cd8:	6051      	str	r1, [r2, #4]
    3cda:	697a      	ldr	r2, [r7, #20]
    3cdc:	0a12      	lsrs	r2, r2, #8
    3cde:	b2d2      	uxtb	r2, r2
    3ce0:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    3ce2:	687b      	ldr	r3, [r7, #4]
    3ce4:	68db      	ldr	r3, [r3, #12]
    3ce6:	1c5a      	adds	r2, r3, #1
    3ce8:	687b      	ldr	r3, [r7, #4]
    3cea:	60da      	str	r2, [r3, #12]

	return true;
    3cec:	2301      	movs	r3, #1
}
    3cee:	0018      	movs	r0, r3
    3cf0:	46bd      	mov	sp, r7
    3cf2:	b006      	add	sp, #24
    3cf4:	bd80      	pop	{r7, pc}
    3cf6:	46c0      	nop			; (mov r8, r8)
    3cf8:	000033d7 	.word	0x000033d7

00003cfc <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    3cfc:	b580      	push	{r7, lr}
    3cfe:	b086      	sub	sp, #24
    3d00:	af00      	add	r7, sp, #0
    3d02:	60f8      	str	r0, [r7, #12]
    3d04:	60b9      	str	r1, [r7, #8]
    3d06:	607a      	str	r2, [r7, #4]
    3d08:	001a      	movs	r2, r3
    3d0a:	1cbb      	adds	r3, r7, #2
    3d0c:	801a      	strh	r2, [r3, #0]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    3d0e:	68bb      	ldr	r3, [r7, #8]
    3d10:	2201      	movs	r2, #1
    3d12:	4013      	ands	r3, r2
    3d14:	d02b      	beq.n	3d6e <_spi_tx_check_and_send+0x72>
		return;
	}

	if (ctrl->txbuf) {
    3d16:	687b      	ldr	r3, [r7, #4]
    3d18:	681b      	ldr	r3, [r3, #0]
    3d1a:	2b00      	cmp	r3, #0
    3d1c:	d018      	beq.n	3d50 <_spi_tx_check_and_send+0x54>
		data = *ctrl->txbuf++;
    3d1e:	687b      	ldr	r3, [r7, #4]
    3d20:	681b      	ldr	r3, [r3, #0]
    3d22:	1c59      	adds	r1, r3, #1
    3d24:	687a      	ldr	r2, [r7, #4]
    3d26:	6011      	str	r1, [r2, #0]
    3d28:	781b      	ldrb	r3, [r3, #0]
    3d2a:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    3d2c:	687b      	ldr	r3, [r7, #4]
    3d2e:	7c1b      	ldrb	r3, [r3, #16]
    3d30:	2b01      	cmp	r3, #1
    3d32:	d910      	bls.n	3d56 <_spi_tx_check_and_send+0x5a>
			data |= (*ctrl->txbuf) << 8;
    3d34:	687b      	ldr	r3, [r7, #4]
    3d36:	681b      	ldr	r3, [r3, #0]
    3d38:	781b      	ldrb	r3, [r3, #0]
    3d3a:	021b      	lsls	r3, r3, #8
    3d3c:	001a      	movs	r2, r3
    3d3e:	697b      	ldr	r3, [r7, #20]
    3d40:	4313      	orrs	r3, r2
    3d42:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    3d44:	687b      	ldr	r3, [r7, #4]
    3d46:	681b      	ldr	r3, [r3, #0]
    3d48:	1c5a      	adds	r2, r3, #1
    3d4a:	687b      	ldr	r3, [r7, #4]
    3d4c:	601a      	str	r2, [r3, #0]
    3d4e:	e002      	b.n	3d56 <_spi_tx_check_and_send+0x5a>
		}
	} else {
		data = dummy;
    3d50:	1cbb      	adds	r3, r7, #2
    3d52:	881b      	ldrh	r3, [r3, #0]
    3d54:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    3d56:	687b      	ldr	r3, [r7, #4]
    3d58:	689b      	ldr	r3, [r3, #8]
    3d5a:	1c5a      	adds	r2, r3, #1
    3d5c:	687b      	ldr	r3, [r7, #4]
    3d5e:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    3d60:	697a      	ldr	r2, [r7, #20]
    3d62:	68fb      	ldr	r3, [r7, #12]
    3d64:	0011      	movs	r1, r2
    3d66:	0018      	movs	r0, r3
    3d68:	4b03      	ldr	r3, [pc, #12]	; (3d78 <_spi_tx_check_and_send+0x7c>)
    3d6a:	4798      	blx	r3
    3d6c:	e000      	b.n	3d70 <_spi_tx_check_and_send+0x74>
		return;
    3d6e:	46c0      	nop			; (mov r8, r8)
}
    3d70:	46bd      	mov	sp, r7
    3d72:	b006      	add	sp, #24
    3d74:	bd80      	pop	{r7, pc}
    3d76:	46c0      	nop			; (mov r8, r8)
    3d78:	000033bf 	.word	0x000033bf

00003d7c <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    3d7c:	b580      	push	{r7, lr}
    3d7e:	b082      	sub	sp, #8
    3d80:	af00      	add	r7, sp, #0
    3d82:	6078      	str	r0, [r7, #4]
    3d84:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    3d86:	687b      	ldr	r3, [r7, #4]
    3d88:	2280      	movs	r2, #128	; 0x80
    3d8a:	4013      	ands	r3, r2
    3d8c:	d00d      	beq.n	3daa <_spi_err_check+0x2e>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    3d8e:	4a09      	ldr	r2, [pc, #36]	; (3db4 <_spi_err_check+0x38>)
    3d90:	683b      	ldr	r3, [r7, #0]
    3d92:	0011      	movs	r1, r2
    3d94:	0018      	movs	r0, r3
    3d96:	4b08      	ldr	r3, [pc, #32]	; (3db8 <_spi_err_check+0x3c>)
    3d98:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    3d9a:	683b      	ldr	r3, [r7, #0]
    3d9c:	2180      	movs	r1, #128	; 0x80
    3d9e:	0018      	movs	r0, r3
    3da0:	4b06      	ldr	r3, [pc, #24]	; (3dbc <_spi_err_check+0x40>)
    3da2:	4798      	blx	r3
		return ERR_OVERFLOW;
    3da4:	2313      	movs	r3, #19
    3da6:	425b      	negs	r3, r3
    3da8:	e000      	b.n	3dac <_spi_err_check+0x30>
	}

	return ERR_NONE;
    3daa:	2300      	movs	r3, #0
}
    3dac:	0018      	movs	r0, r3
    3dae:	46bd      	mov	sp, r7
    3db0:	b002      	add	sp, #8
    3db2:	bd80      	pop	{r7, pc}
    3db4:	0000ffff 	.word	0x0000ffff
    3db8:	0000345f 	.word	0x0000345f
    3dbc:	000030df 	.word	0x000030df

00003dc0 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    3dc0:	b590      	push	{r4, r7, lr}
    3dc2:	b08b      	sub	sp, #44	; 0x2c
    3dc4:	af00      	add	r7, sp, #0
    3dc6:	6078      	str	r0, [r7, #4]
    3dc8:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    3dca:	687b      	ldr	r3, [r7, #4]
    3dcc:	681b      	ldr	r3, [r3, #0]
    3dce:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    3dd0:	2300      	movs	r3, #0
    3dd2:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    3dd4:	683b      	ldr	r3, [r7, #0]
    3dd6:	681a      	ldr	r2, [r3, #0]
    3dd8:	2308      	movs	r3, #8
    3dda:	18fb      	adds	r3, r7, r3
    3ddc:	601a      	str	r2, [r3, #0]
    3dde:	683b      	ldr	r3, [r7, #0]
    3de0:	685a      	ldr	r2, [r3, #4]
    3de2:	2308      	movs	r3, #8
    3de4:	18fb      	adds	r3, r7, r3
    3de6:	605a      	str	r2, [r3, #4]
    3de8:	2308      	movs	r3, #8
    3dea:	18fb      	adds	r3, r7, r3
    3dec:	2200      	movs	r2, #0
    3dee:	609a      	str	r2, [r3, #8]
    3df0:	2308      	movs	r3, #8
    3df2:	18fb      	adds	r3, r7, r3
    3df4:	2200      	movs	r2, #0
    3df6:	60da      	str	r2, [r3, #12]
    3df8:	687b      	ldr	r3, [r7, #4]
    3dfa:	791a      	ldrb	r2, [r3, #4]
    3dfc:	2308      	movs	r3, #8
    3dfe:	18fb      	adds	r3, r7, r3
    3e00:	741a      	strb	r2, [r3, #16]

	ASSERT(dev && hw);
    3e02:	687b      	ldr	r3, [r7, #4]
    3e04:	2b00      	cmp	r3, #0
    3e06:	d004      	beq.n	3e12 <_spi_m_sync_trans+0x52>
    3e08:	6a3b      	ldr	r3, [r7, #32]
    3e0a:	2b00      	cmp	r3, #0
    3e0c:	d001      	beq.n	3e12 <_spi_m_sync_trans+0x52>
    3e0e:	2301      	movs	r3, #1
    3e10:	e000      	b.n	3e14 <_spi_m_sync_trans+0x54>
    3e12:	2300      	movs	r3, #0
    3e14:	1c1a      	adds	r2, r3, #0
    3e16:	2301      	movs	r3, #1
    3e18:	4013      	ands	r3, r2
    3e1a:	b2db      	uxtb	r3, r3
    3e1c:	4a34      	ldr	r2, [pc, #208]	; (3ef0 <_spi_m_sync_trans+0x130>)
    3e1e:	4935      	ldr	r1, [pc, #212]	; (3ef4 <_spi_m_sync_trans+0x134>)
    3e20:	0018      	movs	r0, r3
    3e22:	4b35      	ldr	r3, [pc, #212]	; (3ef8 <_spi_m_sync_trans+0x138>)
    3e24:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    3e26:	6a3b      	ldr	r3, [r7, #32]
    3e28:	2107      	movs	r1, #7
    3e2a:	0018      	movs	r0, r3
    3e2c:	4b33      	ldr	r3, [pc, #204]	; (3efc <_spi_m_sync_trans+0x13c>)
    3e2e:	4798      	blx	r3
    3e30:	1e03      	subs	r3, r0, #0
    3e32:	d002      	beq.n	3e3a <_spi_m_sync_trans+0x7a>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    3e34:	2304      	movs	r3, #4
    3e36:	425b      	negs	r3, r3
    3e38:	e055      	b.n	3ee6 <_spi_m_sync_trans+0x126>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    3e3a:	6a3b      	ldr	r3, [r7, #32]
    3e3c:	0018      	movs	r0, r3
    3e3e:	4b30      	ldr	r3, [pc, #192]	; (3f00 <_spi_m_sync_trans+0x140>)
    3e40:	4798      	blx	r3
    3e42:	0003      	movs	r3, r0
    3e44:	001a      	movs	r2, r3
    3e46:	2301      	movs	r3, #1
    3e48:	4053      	eors	r3, r2
    3e4a:	b2db      	uxtb	r3, r3
    3e4c:	2b00      	cmp	r3, #0
    3e4e:	d002      	beq.n	3e56 <_spi_m_sync_trans+0x96>
		return ERR_NOT_INITIALIZED;
    3e50:	2314      	movs	r3, #20
    3e52:	425b      	negs	r3, r3
    3e54:	e047      	b.n	3ee6 <_spi_m_sync_trans+0x126>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    3e56:	6a3b      	ldr	r3, [r7, #32]
    3e58:	0018      	movs	r0, r3
    3e5a:	4b2a      	ldr	r3, [pc, #168]	; (3f04 <_spi_m_sync_trans+0x144>)
    3e5c:	4798      	blx	r3
    3e5e:	0003      	movs	r3, r0
    3e60:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    3e62:	2308      	movs	r3, #8
    3e64:	18fa      	adds	r2, r7, r3
    3e66:	69f9      	ldr	r1, [r7, #28]
    3e68:	6a3b      	ldr	r3, [r7, #32]
    3e6a:	0018      	movs	r0, r3
    3e6c:	4b26      	ldr	r3, [pc, #152]	; (3f08 <_spi_m_sync_trans+0x148>)
    3e6e:	4798      	blx	r3
    3e70:	0003      	movs	r3, r0
    3e72:	001a      	movs	r2, r3
    3e74:	2301      	movs	r3, #1
    3e76:	4053      	eors	r3, r2
    3e78:	b2db      	uxtb	r3, r3
    3e7a:	2b00      	cmp	r3, #0
    3e7c:	d00f      	beq.n	3e9e <_spi_m_sync_trans+0xde>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    3e7e:	2308      	movs	r3, #8
    3e80:	18fb      	adds	r3, r7, r3
    3e82:	68da      	ldr	r2, [r3, #12]
    3e84:	2308      	movs	r3, #8
    3e86:	18fb      	adds	r3, r7, r3
    3e88:	689b      	ldr	r3, [r3, #8]
    3e8a:	429a      	cmp	r2, r3
    3e8c:	d307      	bcc.n	3e9e <_spi_m_sync_trans+0xde>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    3e8e:	687b      	ldr	r3, [r7, #4]
    3e90:	88db      	ldrh	r3, [r3, #6]
    3e92:	2208      	movs	r2, #8
    3e94:	18ba      	adds	r2, r7, r2
    3e96:	69f9      	ldr	r1, [r7, #28]
    3e98:	6a38      	ldr	r0, [r7, #32]
    3e9a:	4c1c      	ldr	r4, [pc, #112]	; (3f0c <_spi_m_sync_trans+0x14c>)
    3e9c:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    3e9e:	6a3a      	ldr	r2, [r7, #32]
    3ea0:	69fb      	ldr	r3, [r7, #28]
    3ea2:	0011      	movs	r1, r2
    3ea4:	0018      	movs	r0, r3
    3ea6:	4b1a      	ldr	r3, [pc, #104]	; (3f10 <_spi_m_sync_trans+0x150>)
    3ea8:	4798      	blx	r3
    3eaa:	0003      	movs	r3, r0
    3eac:	627b      	str	r3, [r7, #36]	; 0x24

		if (rc < 0) {
    3eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3eb0:	2b00      	cmp	r3, #0
    3eb2:	db12      	blt.n	3eda <_spi_m_sync_trans+0x11a>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    3eb4:	2308      	movs	r3, #8
    3eb6:	18fb      	adds	r3, r7, r3
    3eb8:	689a      	ldr	r2, [r3, #8]
    3eba:	683b      	ldr	r3, [r7, #0]
    3ebc:	689b      	ldr	r3, [r3, #8]
    3ebe:	429a      	cmp	r2, r3
    3ec0:	d3c9      	bcc.n	3e56 <_spi_m_sync_trans+0x96>
    3ec2:	2308      	movs	r3, #8
    3ec4:	18fb      	adds	r3, r7, r3
    3ec6:	68da      	ldr	r2, [r3, #12]
    3ec8:	683b      	ldr	r3, [r7, #0]
    3eca:	689b      	ldr	r3, [r3, #8]
    3ecc:	429a      	cmp	r2, r3
    3ece:	d3c2      	bcc.n	3e56 <_spi_m_sync_trans+0x96>
			rc = ctrl.txcnt;
    3ed0:	2308      	movs	r3, #8
    3ed2:	18fb      	adds	r3, r7, r3
    3ed4:	689b      	ldr	r3, [r3, #8]
    3ed6:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    3ed8:	e000      	b.n	3edc <_spi_m_sync_trans+0x11c>
			break;
    3eda:	46c0      	nop			; (mov r8, r8)
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    3edc:	6a3b      	ldr	r3, [r7, #32]
    3ede:	0018      	movs	r0, r3
    3ee0:	4b0c      	ldr	r3, [pc, #48]	; (3f14 <_spi_m_sync_trans+0x154>)
    3ee2:	4798      	blx	r3

	return rc;
    3ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    3ee6:	0018      	movs	r0, r3
    3ee8:	46bd      	mov	sp, r7
    3eea:	b00b      	add	sp, #44	; 0x2c
    3eec:	bd90      	pop	{r4, r7, pc}
    3eee:	46c0      	nop			; (mov r8, r8)
    3ef0:	00000a85 	.word	0x00000a85
    3ef4:	00010d7c 	.word	0x00010d7c
    3ef8:	00002ae1 	.word	0x00002ae1
    3efc:	00003033 	.word	0x00003033
    3f00:	00003191 	.word	0x00003191
    3f04:	000030c9 	.word	0x000030c9
    3f08:	00003c8d 	.word	0x00003c8d
    3f0c:	00003cfd 	.word	0x00003cfd
    3f10:	00003d7d 	.word	0x00003d7d
    3f14:	00003c59 	.word	0x00003c59

00003f18 <hri_gclk_get_STATUS_SYNCBUSY_bit>:
{
    3f18:	b580      	push	{r7, lr}
    3f1a:	b082      	sub	sp, #8
    3f1c:	af00      	add	r7, sp, #0
    3f1e:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
    3f20:	687b      	ldr	r3, [r7, #4]
    3f22:	785b      	ldrb	r3, [r3, #1]
    3f24:	b2db      	uxtb	r3, r3
    3f26:	09db      	lsrs	r3, r3, #7
    3f28:	2201      	movs	r2, #1
    3f2a:	4013      	ands	r3, r2
    3f2c:	1e5a      	subs	r2, r3, #1
    3f2e:	4193      	sbcs	r3, r2
    3f30:	b2db      	uxtb	r3, r3
}
    3f32:	0018      	movs	r0, r3
    3f34:	46bd      	mov	sp, r7
    3f36:	b002      	add	sp, #8
    3f38:	bd80      	pop	{r7, pc}

00003f3a <hri_sysctrl_get_PCLKSR_XOSC32KRDY_bit>:
{
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_XOSCRDY) >> SYSCTRL_PCLKSR_XOSCRDY_Pos;
}

static inline bool hri_sysctrl_get_PCLKSR_XOSC32KRDY_bit(const void *const hw)
{
    3f3a:	b580      	push	{r7, lr}
    3f3c:	b082      	sub	sp, #8
    3f3e:	af00      	add	r7, sp, #0
    3f40:	6078      	str	r0, [r7, #4]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) >> SYSCTRL_PCLKSR_XOSC32KRDY_Pos;
    3f42:	687b      	ldr	r3, [r7, #4]
    3f44:	68db      	ldr	r3, [r3, #12]
    3f46:	085b      	lsrs	r3, r3, #1
    3f48:	2201      	movs	r2, #1
    3f4a:	4013      	ands	r3, r2
    3f4c:	1e5a      	subs	r2, r3, #1
    3f4e:	4193      	sbcs	r3, r2
    3f50:	b2db      	uxtb	r3, r3
}
    3f52:	0018      	movs	r0, r3
    3f54:	46bd      	mov	sp, r7
    3f56:	b002      	add	sp, #8
    3f58:	bd80      	pop	{r7, pc}

00003f5a <hri_sysctrl_get_PCLKSR_OSC32KRDY_bit>:

static inline bool hri_sysctrl_get_PCLKSR_OSC32KRDY_bit(const void *const hw)
{
    3f5a:	b580      	push	{r7, lr}
    3f5c:	b082      	sub	sp, #8
    3f5e:	af00      	add	r7, sp, #0
    3f60:	6078      	str	r0, [r7, #4]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) >> SYSCTRL_PCLKSR_OSC32KRDY_Pos;
    3f62:	687b      	ldr	r3, [r7, #4]
    3f64:	68db      	ldr	r3, [r3, #12]
    3f66:	089b      	lsrs	r3, r3, #2
    3f68:	2201      	movs	r2, #1
    3f6a:	4013      	ands	r3, r2
    3f6c:	1e5a      	subs	r2, r3, #1
    3f6e:	4193      	sbcs	r3, r2
    3f70:	b2db      	uxtb	r3, r3
}
    3f72:	0018      	movs	r0, r3
    3f74:	46bd      	mov	sp, r7
    3f76:	b002      	add	sp, #8
    3f78:	bd80      	pop	{r7, pc}

00003f7a <hri_sysctrl_get_PCLKSR_OSC8MRDY_bit>:

static inline bool hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(const void *const hw)
{
    3f7a:	b580      	push	{r7, lr}
    3f7c:	b082      	sub	sp, #8
    3f7e:	af00      	add	r7, sp, #0
    3f80:	6078      	str	r0, [r7, #4]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    3f82:	687b      	ldr	r3, [r7, #4]
    3f84:	68db      	ldr	r3, [r3, #12]
    3f86:	08db      	lsrs	r3, r3, #3
    3f88:	2201      	movs	r2, #1
    3f8a:	4013      	ands	r3, r2
    3f8c:	1e5a      	subs	r2, r3, #1
    3f8e:	4193      	sbcs	r3, r2
    3f90:	b2db      	uxtb	r3, r3
}
    3f92:	0018      	movs	r0, r3
    3f94:	46bd      	mov	sp, r7
    3f96:	b002      	add	sp, #8
    3f98:	bd80      	pop	{r7, pc}

00003f9a <hri_sysctrl_get_PCLKSR_DFLLRDY_bit>:

static inline bool hri_sysctrl_get_PCLKSR_DFLLRDY_bit(const void *const hw)
{
    3f9a:	b580      	push	{r7, lr}
    3f9c:	b082      	sub	sp, #8
    3f9e:	af00      	add	r7, sp, #0
    3fa0:	6078      	str	r0, [r7, #4]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    3fa2:	687b      	ldr	r3, [r7, #4]
    3fa4:	68db      	ldr	r3, [r3, #12]
    3fa6:	091b      	lsrs	r3, r3, #4
    3fa8:	2201      	movs	r2, #1
    3faa:	4013      	ands	r3, r2
    3fac:	1e5a      	subs	r2, r3, #1
    3fae:	4193      	sbcs	r3, r2
    3fb0:	b2db      	uxtb	r3, r3
}
    3fb2:	0018      	movs	r0, r3
    3fb4:	46bd      	mov	sp, r7
    3fb6:	b002      	add	sp, #8
    3fb8:	bd80      	pop	{r7, pc}

00003fba <hri_sysctrl_get_PCLKSR_reg>:
{
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DPLLLTO) >> SYSCTRL_PCLKSR_DPLLLTO_Pos;
}

static inline hri_sysctrl_pclksr_reg_t hri_sysctrl_get_PCLKSR_reg(const void *const hw, hri_sysctrl_pclksr_reg_t mask)
{
    3fba:	b580      	push	{r7, lr}
    3fbc:	b084      	sub	sp, #16
    3fbe:	af00      	add	r7, sp, #0
    3fc0:	6078      	str	r0, [r7, #4]
    3fc2:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    3fc4:	687b      	ldr	r3, [r7, #4]
    3fc6:	68db      	ldr	r3, [r3, #12]
    3fc8:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    3fca:	68fb      	ldr	r3, [r7, #12]
    3fcc:	683a      	ldr	r2, [r7, #0]
    3fce:	4013      	ands	r3, r2
    3fd0:	60fb      	str	r3, [r7, #12]
	return tmp;
    3fd2:	68fb      	ldr	r3, [r7, #12]
}
    3fd4:	0018      	movs	r0, r3
    3fd6:	46bd      	mov	sp, r7
    3fd8:	b004      	add	sp, #16
    3fda:	bd80      	pop	{r7, pc}

00003fdc <hri_sysctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Sysctrl *)hw)->PCLKSR.reg;
}

static inline bool hri_sysctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw)
{
    3fdc:	b580      	push	{r7, lr}
    3fde:	b082      	sub	sp, #8
    3fe0:	af00      	add	r7, sp, #0
    3fe2:	6078      	str	r0, [r7, #4]
	return (((Sysctrl *)hw)->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_LOCK) >> SYSCTRL_DPLLSTATUS_LOCK_Pos;
    3fe4:	687b      	ldr	r3, [r7, #4]
    3fe6:	2250      	movs	r2, #80	; 0x50
    3fe8:	5c9b      	ldrb	r3, [r3, r2]
    3fea:	b2db      	uxtb	r3, r3
    3fec:	001a      	movs	r2, r3
    3fee:	2301      	movs	r3, #1
    3ff0:	4013      	ands	r3, r2
    3ff2:	1e5a      	subs	r2, r3, #1
    3ff4:	4193      	sbcs	r3, r2
    3ff6:	b2db      	uxtb	r3, r3
}
    3ff8:	0018      	movs	r0, r3
    3ffa:	46bd      	mov	sp, r7
    3ffc:	b002      	add	sp, #8
    3ffe:	bd80      	pop	{r7, pc}

00004000 <hri_sysctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_sysctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw)
{
    4000:	b580      	push	{r7, lr}
    4002:	b082      	sub	sp, #8
    4004:	af00      	add	r7, sp, #0
    4006:	6078      	str	r0, [r7, #4]
	return (((Sysctrl *)hw)->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_CLKRDY) >> SYSCTRL_DPLLSTATUS_CLKRDY_Pos;
    4008:	687b      	ldr	r3, [r7, #4]
    400a:	2250      	movs	r2, #80	; 0x50
    400c:	5c9b      	ldrb	r3, [r3, r2]
    400e:	b2db      	uxtb	r3, r3
    4010:	085b      	lsrs	r3, r3, #1
    4012:	2201      	movs	r2, #1
    4014:	4013      	ands	r3, r2
    4016:	1e5a      	subs	r2, r3, #1
    4018:	4193      	sbcs	r3, r2
    401a:	b2db      	uxtb	r3, r3
}
    401c:	0018      	movs	r0, r3
    401e:	46bd      	mov	sp, r7
    4020:	b002      	add	sp, #8
    4022:	bd80      	pop	{r7, pc}

00004024 <hri_sysctrl_get_DPLLSTATUS_ENABLE_bit>:

static inline bool hri_sysctrl_get_DPLLSTATUS_ENABLE_bit(const void *const hw)
{
    4024:	b580      	push	{r7, lr}
    4026:	b082      	sub	sp, #8
    4028:	af00      	add	r7, sp, #0
    402a:	6078      	str	r0, [r7, #4]
	return (((Sysctrl *)hw)->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE) >> SYSCTRL_DPLLSTATUS_ENABLE_Pos;
    402c:	687b      	ldr	r3, [r7, #4]
    402e:	2250      	movs	r2, #80	; 0x50
    4030:	5c9b      	ldrb	r3, [r3, r2]
    4032:	b2db      	uxtb	r3, r3
    4034:	089b      	lsrs	r3, r3, #2
    4036:	2201      	movs	r2, #1
    4038:	4013      	ands	r3, r2
    403a:	1e5a      	subs	r2, r3, #1
    403c:	4193      	sbcs	r3, r2
    403e:	b2db      	uxtb	r3, r3
}
    4040:	0018      	movs	r0, r3
    4042:	46bd      	mov	sp, r7
    4044:	b002      	add	sp, #8
    4046:	bd80      	pop	{r7, pc}

00004048 <hri_sysctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sysctrl_write_XOSC32K_reg(const void *const hw, hri_sysctrl_xosc32k_reg_t data)
{
    4048:	b580      	push	{r7, lr}
    404a:	b082      	sub	sp, #8
    404c:	af00      	add	r7, sp, #0
    404e:	6078      	str	r0, [r7, #4]
    4050:	000a      	movs	r2, r1
    4052:	1cbb      	adds	r3, r7, #2
    4054:	801a      	strh	r2, [r3, #0]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->XOSC32K.reg = data;
    4056:	687b      	ldr	r3, [r7, #4]
    4058:	1cba      	adds	r2, r7, #2
    405a:	8812      	ldrh	r2, [r2, #0]
    405c:	829a      	strh	r2, [r3, #20]
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    405e:	46c0      	nop			; (mov r8, r8)
    4060:	46bd      	mov	sp, r7
    4062:	b002      	add	sp, #8
    4064:	bd80      	pop	{r7, pc}

00004066 <hri_sysctrl_read_OSC32K_CALIB_bf>:
	((Sysctrl *)hw)->OSC32K.reg ^= SYSCTRL_OSC32K_CALIB(mask);
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_sysctrl_osc32k_reg_t hri_sysctrl_read_OSC32K_CALIB_bf(const void *const hw)
{
    4066:	b580      	push	{r7, lr}
    4068:	b084      	sub	sp, #16
    406a:	af00      	add	r7, sp, #0
    406c:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC32K.reg;
    406e:	687b      	ldr	r3, [r7, #4]
    4070:	699b      	ldr	r3, [r3, #24]
    4072:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SYSCTRL_OSC32K_CALIB_Msk) >> SYSCTRL_OSC32K_CALIB_Pos;
    4074:	68fb      	ldr	r3, [r7, #12]
    4076:	0c1b      	lsrs	r3, r3, #16
    4078:	227f      	movs	r2, #127	; 0x7f
    407a:	4013      	ands	r3, r2
    407c:	60fb      	str	r3, [r7, #12]
	return tmp;
    407e:	68fb      	ldr	r3, [r7, #12]
}
    4080:	0018      	movs	r0, r3
    4082:	46bd      	mov	sp, r7
    4084:	b004      	add	sp, #16
    4086:	bd80      	pop	{r7, pc}

00004088 <hri_sysctrl_write_OSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sysctrl_write_OSC32K_reg(const void *const hw, hri_sysctrl_osc32k_reg_t data)
{
    4088:	b580      	push	{r7, lr}
    408a:	b082      	sub	sp, #8
    408c:	af00      	add	r7, sp, #0
    408e:	6078      	str	r0, [r7, #4]
    4090:	6039      	str	r1, [r7, #0]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC32K.reg = data;
    4092:	687b      	ldr	r3, [r7, #4]
    4094:	683a      	ldr	r2, [r7, #0]
    4096:	619a      	str	r2, [r3, #24]
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    4098:	46c0      	nop			; (mov r8, r8)
    409a:	46bd      	mov	sp, r7
    409c:	b002      	add	sp, #8
    409e:	bd80      	pop	{r7, pc}

000040a0 <hri_sysctrl_read_OSCULP32K_CALIB_bf>:
	((Sysctrl *)hw)->OSCULP32K.reg ^= SYSCTRL_OSCULP32K_CALIB(mask);
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_sysctrl_osculp32k_reg_t hri_sysctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    40a0:	b580      	push	{r7, lr}
    40a2:	b084      	sub	sp, #16
    40a4:	af00      	add	r7, sp, #0
    40a6:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    40a8:	230f      	movs	r3, #15
    40aa:	18fb      	adds	r3, r7, r3
    40ac:	687a      	ldr	r2, [r7, #4]
    40ae:	7f12      	ldrb	r2, [r2, #28]
    40b0:	701a      	strb	r2, [r3, #0]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    40b2:	230f      	movs	r3, #15
    40b4:	18fb      	adds	r3, r7, r3
    40b6:	220f      	movs	r2, #15
    40b8:	18ba      	adds	r2, r7, r2
    40ba:	7812      	ldrb	r2, [r2, #0]
    40bc:	211f      	movs	r1, #31
    40be:	400a      	ands	r2, r1
    40c0:	701a      	strb	r2, [r3, #0]
	return tmp;
    40c2:	230f      	movs	r3, #15
    40c4:	18fb      	adds	r3, r7, r3
    40c6:	781b      	ldrb	r3, [r3, #0]
}
    40c8:	0018      	movs	r0, r3
    40ca:	46bd      	mov	sp, r7
    40cc:	b004      	add	sp, #16
    40ce:	bd80      	pop	{r7, pc}

000040d0 <hri_sysctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sysctrl_write_OSCULP32K_reg(const void *const hw, hri_sysctrl_osculp32k_reg_t data)
{
    40d0:	b580      	push	{r7, lr}
    40d2:	b082      	sub	sp, #8
    40d4:	af00      	add	r7, sp, #0
    40d6:	6078      	str	r0, [r7, #4]
    40d8:	000a      	movs	r2, r1
    40da:	1cfb      	adds	r3, r7, #3
    40dc:	701a      	strb	r2, [r3, #0]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    40de:	687b      	ldr	r3, [r7, #4]
    40e0:	1cfa      	adds	r2, r7, #3
    40e2:	7812      	ldrb	r2, [r2, #0]
    40e4:	771a      	strb	r2, [r3, #28]
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    40e6:	46c0      	nop			; (mov r8, r8)
    40e8:	46bd      	mov	sp, r7
    40ea:	b002      	add	sp, #8
    40ec:	bd80      	pop	{r7, pc}

000040ee <hri_sysctrl_read_OSC8M_CALIB_bf>:
	((Sysctrl *)hw)->OSC8M.reg ^= SYSCTRL_OSC8M_CALIB(mask);
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
    40ee:	b580      	push	{r7, lr}
    40f0:	b084      	sub	sp, #16
    40f2:	af00      	add	r7, sp, #0
    40f4:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    40f6:	687b      	ldr	r3, [r7, #4]
    40f8:	6a1b      	ldr	r3, [r3, #32]
    40fa:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SYSCTRL_OSC8M_CALIB_Msk) >> SYSCTRL_OSC8M_CALIB_Pos;
    40fc:	68fb      	ldr	r3, [r7, #12]
    40fe:	0c1b      	lsrs	r3, r3, #16
    4100:	051b      	lsls	r3, r3, #20
    4102:	0d1b      	lsrs	r3, r3, #20
    4104:	60fb      	str	r3, [r7, #12]
	return tmp;
    4106:	68fb      	ldr	r3, [r7, #12]
}
    4108:	0018      	movs	r0, r3
    410a:	46bd      	mov	sp, r7
    410c:	b004      	add	sp, #16
    410e:	bd80      	pop	{r7, pc}

00004110 <hri_sysctrl_read_OSC8M_FRANGE_bf>:
	((Sysctrl *)hw)->OSC8M.reg ^= SYSCTRL_OSC8M_FRANGE(mask);
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
    4110:	b580      	push	{r7, lr}
    4112:	b084      	sub	sp, #16
    4114:	af00      	add	r7, sp, #0
    4116:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    4118:	687b      	ldr	r3, [r7, #4]
    411a:	6a1b      	ldr	r3, [r3, #32]
    411c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SYSCTRL_OSC8M_FRANGE_Msk) >> SYSCTRL_OSC8M_FRANGE_Pos;
    411e:	68fb      	ldr	r3, [r7, #12]
    4120:	0f9b      	lsrs	r3, r3, #30
    4122:	60fb      	str	r3, [r7, #12]
	return tmp;
    4124:	68fb      	ldr	r3, [r7, #12]
}
    4126:	0018      	movs	r0, r3
    4128:	46bd      	mov	sp, r7
    412a:	b004      	add	sp, #16
    412c:	bd80      	pop	{r7, pc}

0000412e <hri_sysctrl_write_OSC8M_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
    412e:	b580      	push	{r7, lr}
    4130:	b082      	sub	sp, #8
    4132:	af00      	add	r7, sp, #0
    4134:	6078      	str	r0, [r7, #4]
    4136:	6039      	str	r1, [r7, #0]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    4138:	687b      	ldr	r3, [r7, #4]
    413a:	683a      	ldr	r2, [r7, #0]
    413c:	621a      	str	r2, [r3, #32]
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    413e:	46c0      	nop			; (mov r8, r8)
    4140:	46bd      	mov	sp, r7
    4142:	b002      	add	sp, #8
    4144:	bd80      	pop	{r7, pc}

00004146 <hri_sysctrl_get_DFLLCTRL_MODE_bit>:
	((Sysctrl *)hw)->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_MODE;
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sysctrl_get_DFLLCTRL_MODE_bit(const void *const hw)
{
    4146:	b580      	push	{r7, lr}
    4148:	b084      	sub	sp, #16
    414a:	af00      	add	r7, sp, #0
    414c:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
    414e:	230e      	movs	r3, #14
    4150:	18fb      	adds	r3, r7, r3
    4152:	687a      	ldr	r2, [r7, #4]
    4154:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    4156:	801a      	strh	r2, [r3, #0]
	tmp = (tmp & SYSCTRL_DFLLCTRL_MODE) >> SYSCTRL_DFLLCTRL_MODE_Pos;
    4158:	230e      	movs	r3, #14
    415a:	18fb      	adds	r3, r7, r3
    415c:	881b      	ldrh	r3, [r3, #0]
    415e:	089b      	lsrs	r3, r3, #2
    4160:	b29a      	uxth	r2, r3
    4162:	230e      	movs	r3, #14
    4164:	18fb      	adds	r3, r7, r3
    4166:	2101      	movs	r1, #1
    4168:	400a      	ands	r2, r1
    416a:	801a      	strh	r2, [r3, #0]
	return (bool)tmp;
    416c:	230e      	movs	r3, #14
    416e:	18fb      	adds	r3, r7, r3
    4170:	881b      	ldrh	r3, [r3, #0]
    4172:	1e5a      	subs	r2, r3, #1
    4174:	4193      	sbcs	r3, r2
    4176:	b2db      	uxtb	r3, r3
}
    4178:	0018      	movs	r0, r3
    417a:	46bd      	mov	sp, r7
    417c:	b004      	add	sp, #16
    417e:	bd80      	pop	{r7, pc}

00004180 <hri_sysctrl_write_DFLLCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
    4180:	b580      	push	{r7, lr}
    4182:	b082      	sub	sp, #8
    4184:	af00      	add	r7, sp, #0
    4186:	6078      	str	r0, [r7, #4]
    4188:	000a      	movs	r2, r1
    418a:	1cbb      	adds	r3, r7, #2
    418c:	801a      	strh	r2, [r3, #0]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    418e:	687b      	ldr	r3, [r7, #4]
    4190:	1cba      	adds	r2, r7, #2
    4192:	8812      	ldrh	r2, [r2, #0]
    4194:	849a      	strh	r2, [r3, #36]	; 0x24
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    4196:	46c0      	nop			; (mov r8, r8)
    4198:	46bd      	mov	sp, r7
    419a:	b002      	add	sp, #8
    419c:	bd80      	pop	{r7, pc}

0000419e <hri_sysctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sysctrl_write_DFLLVAL_reg(const void *const hw, hri_sysctrl_dfllval_reg_t data)
{
    419e:	b580      	push	{r7, lr}
    41a0:	b082      	sub	sp, #8
    41a2:	af00      	add	r7, sp, #0
    41a4:	6078      	str	r0, [r7, #4]
    41a6:	6039      	str	r1, [r7, #0]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLVAL.reg = data;
    41a8:	687b      	ldr	r3, [r7, #4]
    41aa:	683a      	ldr	r2, [r7, #0]
    41ac:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    41ae:	46c0      	nop			; (mov r8, r8)
    41b0:	46bd      	mov	sp, r7
    41b2:	b002      	add	sp, #8
    41b4:	bd80      	pop	{r7, pc}

000041b6 <hri_sysctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
    41b6:	b580      	push	{r7, lr}
    41b8:	b082      	sub	sp, #8
    41ba:	af00      	add	r7, sp, #0
    41bc:	6078      	str	r0, [r7, #4]
    41be:	6039      	str	r1, [r7, #0]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
    41c0:	687b      	ldr	r3, [r7, #4]
    41c2:	683a      	ldr	r2, [r7, #0]
    41c4:	62da      	str	r2, [r3, #44]	; 0x2c
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    41c6:	46c0      	nop			; (mov r8, r8)
    41c8:	46bd      	mov	sp, r7
    41ca:	b002      	add	sp, #8
    41cc:	bd80      	pop	{r7, pc}

000041ce <hri_sysctrl_write_DPLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sysctrl_write_DPLLCTRLA_reg(const void *const hw, hri_sysctrl_dpllctrla_reg_t data)
{
    41ce:	b580      	push	{r7, lr}
    41d0:	b082      	sub	sp, #8
    41d2:	af00      	add	r7, sp, #0
    41d4:	6078      	str	r0, [r7, #4]
    41d6:	000a      	movs	r2, r1
    41d8:	1cfb      	adds	r3, r7, #3
    41da:	701a      	strb	r2, [r3, #0]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DPLLCTRLA.reg = data;
    41dc:	687b      	ldr	r3, [r7, #4]
    41de:	1cfa      	adds	r2, r7, #3
    41e0:	2144      	movs	r1, #68	; 0x44
    41e2:	7812      	ldrb	r2, [r2, #0]
    41e4:	545a      	strb	r2, [r3, r1]
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    41e6:	46c0      	nop			; (mov r8, r8)
    41e8:	46bd      	mov	sp, r7
    41ea:	b002      	add	sp, #8
    41ec:	bd80      	pop	{r7, pc}

000041ee <hri_sysctrl_write_DPLLRATIO_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sysctrl_write_DPLLRATIO_reg(const void *const hw, hri_sysctrl_dpllratio_reg_t data)
{
    41ee:	b580      	push	{r7, lr}
    41f0:	b082      	sub	sp, #8
    41f2:	af00      	add	r7, sp, #0
    41f4:	6078      	str	r0, [r7, #4]
    41f6:	6039      	str	r1, [r7, #0]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DPLLRATIO.reg = data;
    41f8:	687b      	ldr	r3, [r7, #4]
    41fa:	683a      	ldr	r2, [r7, #0]
    41fc:	649a      	str	r2, [r3, #72]	; 0x48
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    41fe:	46c0      	nop			; (mov r8, r8)
    4200:	46bd      	mov	sp, r7
    4202:	b002      	add	sp, #8
    4204:	bd80      	pop	{r7, pc}

00004206 <hri_sysctrl_write_DPLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sysctrl_write_DPLLCTRLB_reg(const void *const hw, hri_sysctrl_dpllctrlb_reg_t data)
{
    4206:	b580      	push	{r7, lr}
    4208:	b082      	sub	sp, #8
    420a:	af00      	add	r7, sp, #0
    420c:	6078      	str	r0, [r7, #4]
    420e:	6039      	str	r1, [r7, #0]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DPLLCTRLB.reg = data;
    4210:	687b      	ldr	r3, [r7, #4]
    4212:	683a      	ldr	r2, [r7, #0]
    4214:	64da      	str	r2, [r3, #76]	; 0x4c
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    4216:	46c0      	nop			; (mov r8, r8)
    4218:	46bd      	mov	sp, r7
    421a:	b002      	add	sp, #8
    421c:	bd80      	pop	{r7, pc}
	...

00004220 <_sysctrl_init_sources>:
 * \brief Initializes clock generators
 *
 * All GCLK generators are running when this function returns.
 */
void _sysctrl_init_sources(void)
{
    4220:	b580      	push	{r7, lr}
    4222:	b082      	sub	sp, #8
    4224:	af00      	add	r7, sp, #0
	void *   hw = (void *)SYSCTRL;
    4226:	4b39      	ldr	r3, [pc, #228]	; (430c <_sysctrl_init_sources+0xec>)
    4228:	607b      	str	r3, [r7, #4]
	uint16_t calib;

#if CONF_XOSC32K_CONFIG == 1
	hri_sysctrl_write_XOSC32K_reg(
    422a:	687b      	ldr	r3, [r7, #4]
    422c:	2166      	movs	r1, #102	; 0x66
    422e:	0018      	movs	r0, r3
    4230:	4b37      	ldr	r3, [pc, #220]	; (4310 <_sysctrl_init_sources+0xf0>)
    4232:	4798      	blx	r3
	        | (CONF_XOSC_RUNSTDBY << SYSCTRL_XOSC_RUNSTDBY_Pos) | (CONF_XOSC_XTALEN << SYSCTRL_XOSC_XTALEN_Pos)
	        | (CONF_XOSC_ENABLE << SYSCTRL_XOSC_ENABLE_Pos));
#endif

#if CONF_OSC8M_CONFIG == 1
	calib = hri_sysctrl_read_OSC8M_CALIB_bf(hw);
    4234:	687b      	ldr	r3, [r7, #4]
    4236:	0018      	movs	r0, r3
    4238:	4b36      	ldr	r3, [pc, #216]	; (4314 <_sysctrl_init_sources+0xf4>)
    423a:	4798      	blx	r3
    423c:	0002      	movs	r2, r0
    423e:	1cbb      	adds	r3, r7, #2
    4240:	801a      	strh	r2, [r3, #0]

	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    4242:	687b      	ldr	r3, [r7, #4]
    4244:	0018      	movs	r0, r3
    4246:	4b34      	ldr	r3, [pc, #208]	; (4318 <_sysctrl_init_sources+0xf8>)
    4248:	4798      	blx	r3
    424a:	0003      	movs	r3, r0
    424c:	079a      	lsls	r2, r3, #30
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    424e:	1cbb      	adds	r3, r7, #2
    4250:	881b      	ldrh	r3, [r3, #0]
    4252:	041b      	lsls	r3, r3, #16
    4254:	0019      	movs	r1, r3
    4256:	4b31      	ldr	r3, [pc, #196]	; (431c <_sysctrl_init_sources+0xfc>)
    4258:	400b      	ands	r3, r1
#endif
	                                SYSCTRL_OSC8M_PRESC(CONF_OSC8M_PRESC)
	                                | (CONF_OSC8M_RUNSTDBY << SYSCTRL_OSC8M_RUNSTDBY_Pos)
    425a:	4313      	orrs	r3, r2
	hri_sysctrl_write_OSC8M_reg(hw,
    425c:	2202      	movs	r2, #2
    425e:	431a      	orrs	r2, r3
    4260:	687b      	ldr	r3, [r7, #4]
    4262:	0011      	movs	r1, r2
    4264:	0018      	movs	r0, r3
    4266:	4b2e      	ldr	r3, [pc, #184]	; (4320 <_sysctrl_init_sources+0x100>)
    4268:	4798      	blx	r3
	                                | (CONF_OSC8M_ENABLE << SYSCTRL_OSC8M_ENABLE_Pos));
#endif

#if CONF_OSC32K_CONFIG == 1
	calib = hri_sysctrl_read_OSC32K_CALIB_bf(hw);
    426a:	687b      	ldr	r3, [r7, #4]
    426c:	0018      	movs	r0, r3
    426e:	4b2d      	ldr	r3, [pc, #180]	; (4324 <_sysctrl_init_sources+0x104>)
    4270:	4798      	blx	r3
    4272:	0002      	movs	r2, r0
    4274:	1cbb      	adds	r3, r7, #2
    4276:	801a      	strh	r2, [r3, #0]
	hri_sysctrl_write_OSC32K_reg(
	    hw,
#if CONF_OSC32K_OVERWRITE_CALIBRATION == 1
	    SYSCTRL_OSC32K_CALIB(CONF_OSC32K_CALIB) |
#else
	    SYSCTRL_OSC32K_CALIB(calib) |
    4278:	1cbb      	adds	r3, r7, #2
    427a:	881b      	ldrh	r3, [r3, #0]
    427c:	041b      	lsls	r3, r3, #16
    427e:	001a      	movs	r2, r3
#endif
	        (CONF_OSC32K_WRTLOCK << SYSCTRL_OSC32K_WRTLOCK_Pos) | SYSCTRL_OSC32K_STARTUP(CONF_OSC32K_STARTUP)
    4280:	23fe      	movs	r3, #254	; 0xfe
    4282:	03db      	lsls	r3, r3, #15
    4284:	4013      	ands	r3, r2
	        | (CONF_OSC32K_RUNSTDBY << SYSCTRL_OSC32K_RUNSTDBY_Pos) | (CONF_OSC32K_EN1K << SYSCTRL_OSC32K_EN1K_Pos)
	        | (CONF_OSC32K_EN32K << SYSCTRL_OSC32K_EN32K_Pos) | (1 << SYSCTRL_OSC32K_ENABLE_Pos));
    4286:	2246      	movs	r2, #70	; 0x46
    4288:	431a      	orrs	r2, r3
	hri_sysctrl_write_OSC32K_reg(
    428a:	687b      	ldr	r3, [r7, #4]
    428c:	0011      	movs	r1, r2
    428e:	0018      	movs	r0, r3
    4290:	4b25      	ldr	r3, [pc, #148]	; (4328 <_sysctrl_init_sources+0x108>)
    4292:	4798      	blx	r3
	/* Enable OSC32K anyway since GCLK configuration may need it to sync */
	hri_sysctrl_set_OSC32K_ENABLE_bit(hw);
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_sysctrl_read_OSCULP32K_CALIB_bf(hw);
    4294:	687b      	ldr	r3, [r7, #4]
    4296:	0018      	movs	r0, r3
    4298:	4b24      	ldr	r3, [pc, #144]	; (432c <_sysctrl_init_sources+0x10c>)
    429a:	4798      	blx	r3
    429c:	0003      	movs	r3, r0
    429e:	001a      	movs	r2, r3
    42a0:	1cbb      	adds	r3, r7, #2
    42a2:	801a      	strh	r2, [r3, #0]

	hri_sysctrl_write_OSCULP32K_reg(hw,
    42a4:	1cbb      	adds	r3, r7, #2
    42a6:	881b      	ldrh	r3, [r3, #0]
    42a8:	b2db      	uxtb	r3, r3
    42aa:	221f      	movs	r2, #31
    42ac:	4013      	ands	r3, r2
    42ae:	b2da      	uxtb	r2, r3
    42b0:	687b      	ldr	r3, [r7, #4]
    42b2:	0011      	movs	r1, r2
    42b4:	0018      	movs	r0, r3
    42b6:	4b1e      	ldr	r3, [pc, #120]	; (4330 <_sysctrl_init_sources+0x110>)
    42b8:	4798      	blx	r3
	                                    (CONF_OSC32K_WRTLOCK << SYSCTRL_OSCULP32K_WRTLOCK_Pos));
#endif

#if CONF_XOSC32K_CONFIG == 1
#if CONF_XOSC32K_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_XOSC32KRDY_bit(hw))
    42ba:	46c0      	nop			; (mov r8, r8)
    42bc:	687b      	ldr	r3, [r7, #4]
    42be:	0018      	movs	r0, r3
    42c0:	4b1c      	ldr	r3, [pc, #112]	; (4334 <_sysctrl_init_sources+0x114>)
    42c2:	4798      	blx	r3
    42c4:	0003      	movs	r3, r0
    42c6:	001a      	movs	r2, r3
    42c8:	2301      	movs	r3, #1
    42ca:	4053      	eors	r3, r2
    42cc:	b2db      	uxtb	r3, r3
    42ce:	2b00      	cmp	r3, #0
    42d0:	d1f4      	bne.n	42bc <_sysctrl_init_sources+0x9c>
#endif
#endif

#if CONF_OSC32K_CONFIG == 1
#if CONF_OSC32K_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC32KRDY_bit(hw))
    42d2:	46c0      	nop			; (mov r8, r8)
    42d4:	687b      	ldr	r3, [r7, #4]
    42d6:	0018      	movs	r0, r3
    42d8:	4b17      	ldr	r3, [pc, #92]	; (4338 <_sysctrl_init_sources+0x118>)
    42da:	4798      	blx	r3
    42dc:	0003      	movs	r3, r0
    42de:	001a      	movs	r2, r3
    42e0:	2301      	movs	r3, #1
    42e2:	4053      	eors	r3, r2
    42e4:	b2db      	uxtb	r3, r3
    42e6:	2b00      	cmp	r3, #0
    42e8:	d1f4      	bne.n	42d4 <_sysctrl_init_sources+0xb4>
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    42ea:	46c0      	nop			; (mov r8, r8)
    42ec:	687b      	ldr	r3, [r7, #4]
    42ee:	0018      	movs	r0, r3
    42f0:	4b12      	ldr	r3, [pc, #72]	; (433c <_sysctrl_init_sources+0x11c>)
    42f2:	4798      	blx	r3
    42f4:	0003      	movs	r3, r0
    42f6:	001a      	movs	r2, r3
    42f8:	2301      	movs	r3, #1
    42fa:	4053      	eors	r3, r2
    42fc:	b2db      	uxtb	r3, r3
    42fe:	2b00      	cmp	r3, #0
    4300:	d1f4      	bne.n	42ec <_sysctrl_init_sources+0xcc>
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    4302:	46c0      	nop			; (mov r8, r8)
    4304:	46bd      	mov	sp, r7
    4306:	b002      	add	sp, #8
    4308:	bd80      	pop	{r7, pc}
    430a:	46c0      	nop			; (mov r8, r8)
    430c:	40000800 	.word	0x40000800
    4310:	00004049 	.word	0x00004049
    4314:	000040ef 	.word	0x000040ef
    4318:	00004111 	.word	0x00004111
    431c:	0fff0000 	.word	0x0fff0000
    4320:	0000412f 	.word	0x0000412f
    4324:	00004067 	.word	0x00004067
    4328:	00004089 	.word	0x00004089
    432c:	000040a1 	.word	0x000040a1
    4330:	000040d1 	.word	0x000040d1
    4334:	00003f3b 	.word	0x00003f3b
    4338:	00003f5b 	.word	0x00003f5b
    433c:	00003f7b 	.word	0x00003f7b

00004340 <_sysctrl_init_referenced_generators>:

void _sysctrl_init_referenced_generators(void)
{
    4340:	b580      	push	{r7, lr}
    4342:	b084      	sub	sp, #16
    4344:	af00      	add	r7, sp, #0
	void *hw = (void *)SYSCTRL;
    4346:	4b4c      	ldr	r3, [pc, #304]	; (4478 <_sysctrl_init_referenced_generators+0x138>)
    4348:	60fb      	str	r3, [r7, #12]
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != CONF_DFLL_OPEN_LOOP_MODE
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
    434a:	68fb      	ldr	r3, [r7, #12]
    434c:	2102      	movs	r1, #2
    434e:	0018      	movs	r0, r3
    4350:	4b4a      	ldr	r3, [pc, #296]	; (447c <_sysctrl_init_referenced_generators+0x13c>)
    4352:	4798      	blx	r3
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    4354:	46c0      	nop			; (mov r8, r8)
    4356:	68fb      	ldr	r3, [r7, #12]
    4358:	0018      	movs	r0, r3
    435a:	4b49      	ldr	r3, [pc, #292]	; (4480 <_sysctrl_init_referenced_generators+0x140>)
    435c:	4798      	blx	r3
    435e:	0003      	movs	r3, r0
    4360:	001a      	movs	r2, r3
    4362:	2301      	movs	r3, #1
    4364:	4053      	eors	r3, r2
    4366:	b2db      	uxtb	r3, r3
    4368:	2b00      	cmp	r3, #0
    436a:	d1f4      	bne.n	4356 <_sysctrl_init_referenced_generators+0x16>
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
    436c:	4a45      	ldr	r2, [pc, #276]	; (4484 <_sysctrl_init_referenced_generators+0x144>)
    436e:	68fb      	ldr	r3, [r7, #12]
    4370:	0011      	movs	r1, r2
    4372:	0018      	movs	r0, r3
    4374:	4b44      	ldr	r3, [pc, #272]	; (4488 <_sysctrl_init_referenced_generators+0x148>)
    4376:	4798      	blx	r3
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    4378:	4b44      	ldr	r3, [pc, #272]	; (448c <_sysctrl_init_referenced_generators+0x14c>)
    437a:	681b      	ldr	r3, [r3, #0]
    437c:	0e9b      	lsrs	r3, r3, #26
    437e:	2b3f      	cmp	r3, #63	; 0x3f
    4380:	d009      	beq.n	4396 <_sysctrl_init_referenced_generators+0x56>
    4382:	4b42      	ldr	r3, [pc, #264]	; (448c <_sysctrl_init_referenced_generators+0x14c>)
    4384:	681b      	ldr	r3, [r3, #0]
    4386:	0e9b      	lsrs	r3, r3, #26
    4388:	029b      	lsls	r3, r3, #10
    438a:	041b      	lsls	r3, r3, #16
    438c:	0c1b      	lsrs	r3, r3, #16
    438e:	2280      	movs	r2, #128	; 0x80
    4390:	0092      	lsls	r2, r2, #2
    4392:	4313      	orrs	r3, r2
    4394:	e001      	b.n	439a <_sysctrl_init_referenced_generators+0x5a>
    4396:	23fc      	movs	r3, #252	; 0xfc
    4398:	01db      	lsls	r3, r3, #7
    439a:	68fa      	ldr	r2, [r7, #12]
    439c:	0019      	movs	r1, r3
    439e:	0010      	movs	r0, r2
    43a0:	4b3b      	ldr	r3, [pc, #236]	; (4490 <_sysctrl_init_referenced_generators+0x150>)
    43a2:	4798      	blx	r3

	hri_sysctrl_dfllctrl_reg_t tmp =
    43a4:	230a      	movs	r3, #10
    43a6:	18fb      	adds	r3, r7, r3
    43a8:	2293      	movs	r2, #147	; 0x93
    43aa:	0052      	lsls	r2, r2, #1
    43ac:	801a      	strh	r2, [r3, #0]
	    | (CONF_DFLL_QLDIS << SYSCTRL_DFLLCTRL_QLDIS_Pos) | (CONF_DFLL_CCDIS << SYSCTRL_DFLLCTRL_CCDIS_Pos)
	    | (CONF_DFLL_RUNSTDBY << SYSCTRL_DFLLCTRL_RUNSTDBY_Pos) | (CONF_DFLL_USBCRM << SYSCTRL_DFLLCTRL_USBCRM_Pos)
	    | (CONF_DFLL_LLAW << SYSCTRL_DFLLCTRL_LLAW_Pos) | (CONF_DFLL_STABLE << SYSCTRL_DFLLCTRL_STABLE_Pos)
	    | (CONF_DFLL_MODE << SYSCTRL_DFLLCTRL_MODE_Pos) | (CONF_DFLL_ENABLE << SYSCTRL_DFLLCTRL_ENABLE_Pos);

	hri_sysctrl_write_DFLLCTRL_reg(hw, tmp);
    43ae:	230a      	movs	r3, #10
    43b0:	18fb      	adds	r3, r7, r3
    43b2:	881a      	ldrh	r2, [r3, #0]
    43b4:	68fb      	ldr	r3, [r7, #12]
    43b6:	0011      	movs	r1, r2
    43b8:	0018      	movs	r0, r3
    43ba:	4b30      	ldr	r3, [pc, #192]	; (447c <_sysctrl_init_referenced_generators+0x13c>)
    43bc:	4798      	blx	r3
#if CONF_DPLL_REFCLK == SYSCTRL_DPLLCTRLB_REFCLK_GCLK_Val
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(1) | GCLK_CLKCTRL_GEN(CONF_DPLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DPLLCTRLA_reg(hw,
    43be:	68fb      	ldr	r3, [r7, #12]
    43c0:	2142      	movs	r1, #66	; 0x42
    43c2:	0018      	movs	r0, r3
    43c4:	4b33      	ldr	r3, [pc, #204]	; (4494 <_sysctrl_init_referenced_generators+0x154>)
    43c6:	4798      	blx	r3
	                                (CONF_DPLL_RUNSTDBY << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_DPLL_ENABLE << SYSCTRL_DPLLCTRLA_ENABLE_Pos));
	hri_sysctrl_write_DPLLRATIO_reg(
    43c8:	4a33      	ldr	r2, [pc, #204]	; (4498 <_sysctrl_init_referenced_generators+0x158>)
    43ca:	68fb      	ldr	r3, [r7, #12]
    43cc:	0011      	movs	r1, r2
    43ce:	0018      	movs	r0, r3
    43d0:	4b32      	ldr	r3, [pc, #200]	; (449c <_sysctrl_init_referenced_generators+0x15c>)
    43d2:	4798      	blx	r3
	    hw, SYSCTRL_DPLLRATIO_LDRFRAC(CONF_DPLL_LDRFRAC) | SYSCTRL_DPLLRATIO_LDR(CONF_DPLL_LDR));
	hri_sysctrl_write_DPLLCTRLB_reg(
    43d4:	68fb      	ldr	r3, [r7, #12]
    43d6:	2100      	movs	r1, #0
    43d8:	0018      	movs	r0, r3
    43da:	4b31      	ldr	r3, [pc, #196]	; (44a0 <_sysctrl_init_referenced_generators+0x160>)
    43dc:	4798      	blx	r3
	        | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
    43de:	68fb      	ldr	r3, [r7, #12]
    43e0:	0018      	movs	r0, r3
    43e2:	4b30      	ldr	r3, [pc, #192]	; (44a4 <_sysctrl_init_referenced_generators+0x164>)
    43e4:	4798      	blx	r3
    43e6:	1e03      	subs	r3, r0, #0
    43e8:	d00d      	beq.n	4406 <_sysctrl_init_referenced_generators+0xc6>

#if CONF_DFLL_USBCRM == 0
		hri_sysctrl_pclksr_reg_t status_mask
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;
#else
		hri_sysctrl_pclksr_reg_t status_mask = SYSCTRL_PCLKSR_DFLLRDY;
    43ea:	2310      	movs	r3, #16
    43ec:	607b      	str	r3, [r7, #4]
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
    43ee:	46c0      	nop			; (mov r8, r8)
    43f0:	687a      	ldr	r2, [r7, #4]
    43f2:	68fb      	ldr	r3, [r7, #12]
    43f4:	0011      	movs	r1, r2
    43f6:	0018      	movs	r0, r3
    43f8:	4b2b      	ldr	r3, [pc, #172]	; (44a8 <_sysctrl_init_referenced_generators+0x168>)
    43fa:	4798      	blx	r3
    43fc:	0002      	movs	r2, r0
    43fe:	687b      	ldr	r3, [r7, #4]
    4400:	429a      	cmp	r2, r3
    4402:	d1f5      	bne.n	43f0 <_sysctrl_init_referenced_generators+0xb0>
    4404:	e00b      	b.n	441e <_sysctrl_init_referenced_generators+0xde>
			;
	} else {
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    4406:	46c0      	nop			; (mov r8, r8)
    4408:	68fb      	ldr	r3, [r7, #12]
    440a:	0018      	movs	r0, r3
    440c:	4b1c      	ldr	r3, [pc, #112]	; (4480 <_sysctrl_init_referenced_generators+0x140>)
    440e:	4798      	blx	r3
    4410:	0003      	movs	r3, r0
    4412:	001a      	movs	r2, r3
    4414:	2301      	movs	r3, #1
    4416:	4053      	eors	r3, r2
    4418:	b2db      	uxtb	r3, r3
    441a:	2b00      	cmp	r3, #0
    441c:	d1f4      	bne.n	4408 <_sysctrl_init_referenced_generators+0xc8>
#endif
#endif

#if CONF_DPLL_CONFIG == 1
#if CONF_DPLL_ENABLE == 1
	while (!(hri_sysctrl_get_DPLLSTATUS_ENABLE_bit(hw) || hri_sysctrl_get_DPLLSTATUS_LOCK_bit(hw)
    441e:	46c0      	nop			; (mov r8, r8)
    4420:	68fb      	ldr	r3, [r7, #12]
    4422:	0018      	movs	r0, r3
    4424:	4b21      	ldr	r3, [pc, #132]	; (44ac <_sysctrl_init_referenced_generators+0x16c>)
    4426:	4798      	blx	r3
    4428:	0003      	movs	r3, r0
    442a:	001a      	movs	r2, r3
    442c:	2301      	movs	r3, #1
    442e:	4053      	eors	r3, r2
    4430:	b2db      	uxtb	r3, r3
    4432:	2b00      	cmp	r3, #0
    4434:	d015      	beq.n	4462 <_sysctrl_init_referenced_generators+0x122>
    4436:	68fb      	ldr	r3, [r7, #12]
    4438:	0018      	movs	r0, r3
    443a:	4b1d      	ldr	r3, [pc, #116]	; (44b0 <_sysctrl_init_referenced_generators+0x170>)
    443c:	4798      	blx	r3
    443e:	0003      	movs	r3, r0
    4440:	001a      	movs	r2, r3
    4442:	2301      	movs	r3, #1
    4444:	4053      	eors	r3, r2
    4446:	b2db      	uxtb	r3, r3
    4448:	2b00      	cmp	r3, #0
    444a:	d00a      	beq.n	4462 <_sysctrl_init_referenced_generators+0x122>
	         || hri_sysctrl_get_DPLLSTATUS_CLKRDY_bit(hw)))
    444c:	68fb      	ldr	r3, [r7, #12]
    444e:	0018      	movs	r0, r3
    4450:	4b18      	ldr	r3, [pc, #96]	; (44b4 <_sysctrl_init_referenced_generators+0x174>)
    4452:	4798      	blx	r3
    4454:	0003      	movs	r3, r0
    4456:	001a      	movs	r2, r3
    4458:	2301      	movs	r3, #1
    445a:	4053      	eors	r3, r2
    445c:	b2db      	uxtb	r3, r3
	while (!(hri_sysctrl_get_DPLLSTATUS_ENABLE_bit(hw) || hri_sysctrl_get_DPLLSTATUS_LOCK_bit(hw)
    445e:	2b00      	cmp	r3, #0
    4460:	d1de      	bne.n	4420 <_sysctrl_init_referenced_generators+0xe0>
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
    4462:	46c0      	nop			; (mov r8, r8)
    4464:	4b14      	ldr	r3, [pc, #80]	; (44b8 <_sysctrl_init_referenced_generators+0x178>)
    4466:	0018      	movs	r0, r3
    4468:	4b14      	ldr	r3, [pc, #80]	; (44bc <_sysctrl_init_referenced_generators+0x17c>)
    446a:	4798      	blx	r3
    446c:	1e03      	subs	r3, r0, #0
    446e:	d1f9      	bne.n	4464 <_sysctrl_init_referenced_generators+0x124>
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    4470:	46c0      	nop			; (mov r8, r8)
    4472:	46bd      	mov	sp, r7
    4474:	b004      	add	sp, #16
    4476:	bd80      	pop	{r7, pc}
    4478:	40000800 	.word	0x40000800
    447c:	00004181 	.word	0x00004181
    4480:	00003f9b 	.word	0x00003f9b
    4484:	0401bb80 	.word	0x0401bb80
    4488:	000041b7 	.word	0x000041b7
    448c:	00806024 	.word	0x00806024
    4490:	0000419f 	.word	0x0000419f
    4494:	000041cf 	.word	0x000041cf
    4498:	000e05b7 	.word	0x000e05b7
    449c:	000041ef 	.word	0x000041ef
    44a0:	00004207 	.word	0x00004207
    44a4:	00004147 	.word	0x00004147
    44a8:	00003fbb 	.word	0x00003fbb
    44ac:	00004025 	.word	0x00004025
    44b0:	00003fdd 	.word	0x00003fdd
    44b4:	00004001 	.word	0x00004001
    44b8:	40000c00 	.word	0x40000c00
    44bc:	00003f19 	.word	0x00003f19

000044c0 <_system_time_init>:

/**
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
    44c0:	b580      	push	{r7, lr}
    44c2:	b082      	sub	sp, #8
    44c4:	af00      	add	r7, sp, #0
    44c6:	6078      	str	r0, [r7, #4]
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    44c8:	4b04      	ldr	r3, [pc, #16]	; (44dc <_system_time_init+0x1c>)
    44ca:	4a05      	ldr	r2, [pc, #20]	; (44e0 <_system_time_init+0x20>)
    44cc:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    44ce:	4b03      	ldr	r3, [pc, #12]	; (44dc <_system_time_init+0x1c>)
    44d0:	2205      	movs	r2, #5
    44d2:	601a      	str	r2, [r3, #0]
	                | (1 << SysTick_CTRL_CLKSOURCE_Pos);
}
    44d4:	46c0      	nop			; (mov r8, r8)
    44d6:	46bd      	mov	sp, r7
    44d8:	b002      	add	sp, #8
    44da:	bd80      	pop	{r7, pc}
    44dc:	e000e010 	.word	0xe000e010
    44e0:	00ffffff 	.word	0x00ffffff

000044e4 <_delay_init>:
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
    44e4:	b580      	push	{r7, lr}
    44e6:	b082      	sub	sp, #8
    44e8:	af00      	add	r7, sp, #0
    44ea:	6078      	str	r0, [r7, #4]
	_system_time_init(hw);
    44ec:	687b      	ldr	r3, [r7, #4]
    44ee:	0018      	movs	r0, r3
    44f0:	4b02      	ldr	r3, [pc, #8]	; (44fc <_delay_init+0x18>)
    44f2:	4798      	blx	r3
}
    44f4:	46c0      	nop			; (mov r8, r8)
    44f6:	46bd      	mov	sp, r7
    44f8:	b002      	add	sp, #8
    44fa:	bd80      	pop	{r7, pc}
    44fc:	000044c1 	.word	0x000044c1

00004500 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    4500:	b580      	push	{r7, lr}
    4502:	b084      	sub	sp, #16
    4504:	af00      	add	r7, sp, #0
    4506:	6078      	str	r0, [r7, #4]
    4508:	6039      	str	r1, [r7, #0]
	(void)hw;
	uint8_t  n   = cycles >> 24;
    450a:	683b      	ldr	r3, [r7, #0]
    450c:	0e1a      	lsrs	r2, r3, #24
    450e:	230f      	movs	r3, #15
    4510:	18fb      	adds	r3, r7, r3
    4512:	701a      	strb	r2, [r3, #0]
	uint32_t buf = cycles;
    4514:	683b      	ldr	r3, [r7, #0]
    4516:	60bb      	str	r3, [r7, #8]

	while (n--) {
    4518:	e011      	b.n	453e <_delay_cycles+0x3e>
		SysTick->LOAD = 0xFFFFFF;
    451a:	4b16      	ldr	r3, [pc, #88]	; (4574 <_delay_cycles+0x74>)
    451c:	4a16      	ldr	r2, [pc, #88]	; (4578 <_delay_cycles+0x78>)
    451e:	605a      	str	r2, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
    4520:	4b14      	ldr	r3, [pc, #80]	; (4574 <_delay_cycles+0x74>)
    4522:	4a15      	ldr	r2, [pc, #84]	; (4578 <_delay_cycles+0x78>)
    4524:	609a      	str	r2, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    4526:	46c0      	nop			; (mov r8, r8)
    4528:	4b12      	ldr	r3, [pc, #72]	; (4574 <_delay_cycles+0x74>)
    452a:	681a      	ldr	r2, [r3, #0]
    452c:	2380      	movs	r3, #128	; 0x80
    452e:	025b      	lsls	r3, r3, #9
    4530:	4013      	ands	r3, r2
    4532:	d0f9      	beq.n	4528 <_delay_cycles+0x28>
			;
		buf -= 0xFFFFFF;
    4534:	68bb      	ldr	r3, [r7, #8]
    4536:	4a11      	ldr	r2, [pc, #68]	; (457c <_delay_cycles+0x7c>)
    4538:	4694      	mov	ip, r2
    453a:	4463      	add	r3, ip
    453c:	60bb      	str	r3, [r7, #8]
	while (n--) {
    453e:	230f      	movs	r3, #15
    4540:	18fb      	adds	r3, r7, r3
    4542:	781b      	ldrb	r3, [r3, #0]
    4544:	220f      	movs	r2, #15
    4546:	18ba      	adds	r2, r7, r2
    4548:	1e59      	subs	r1, r3, #1
    454a:	7011      	strb	r1, [r2, #0]
    454c:	2b00      	cmp	r3, #0
    454e:	d1e4      	bne.n	451a <_delay_cycles+0x1a>
	}

	SysTick->LOAD = buf;
    4550:	4b08      	ldr	r3, [pc, #32]	; (4574 <_delay_cycles+0x74>)
    4552:	68ba      	ldr	r2, [r7, #8]
    4554:	605a      	str	r2, [r3, #4]
	SysTick->VAL  = buf;
    4556:	4b07      	ldr	r3, [pc, #28]	; (4574 <_delay_cycles+0x74>)
    4558:	68ba      	ldr	r2, [r7, #8]
    455a:	609a      	str	r2, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    455c:	46c0      	nop			; (mov r8, r8)
    455e:	4b05      	ldr	r3, [pc, #20]	; (4574 <_delay_cycles+0x74>)
    4560:	681a      	ldr	r2, [r3, #0]
    4562:	2380      	movs	r3, #128	; 0x80
    4564:	025b      	lsls	r3, r3, #9
    4566:	4013      	ands	r3, r2
    4568:	d0f9      	beq.n	455e <_delay_cycles+0x5e>
		;
}
    456a:	46c0      	nop			; (mov r8, r8)
    456c:	46bd      	mov	sp, r7
    456e:	b004      	add	sp, #16
    4570:	bd80      	pop	{r7, pc}
    4572:	46c0      	nop			; (mov r8, r8)
    4574:	e000e010 	.word	0xe000e010
    4578:	00ffffff 	.word	0x00ffffff
    457c:	ff000001 	.word	0xff000001

00004580 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    4580:	b580      	push	{r7, lr}
    4582:	b082      	sub	sp, #8
    4584:	af00      	add	r7, sp, #0
    4586:	0002      	movs	r2, r0
    4588:	1dfb      	adds	r3, r7, #7
    458a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    458c:	1dfb      	adds	r3, r7, #7
    458e:	781b      	ldrb	r3, [r3, #0]
    4590:	2b7f      	cmp	r3, #127	; 0x7f
    4592:	d809      	bhi.n	45a8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4594:	4b06      	ldr	r3, [pc, #24]	; (45b0 <__NVIC_EnableIRQ+0x30>)
    4596:	1dfa      	adds	r2, r7, #7
    4598:	7812      	ldrb	r2, [r2, #0]
    459a:	0011      	movs	r1, r2
    459c:	221f      	movs	r2, #31
    459e:	400a      	ands	r2, r1
    45a0:	2101      	movs	r1, #1
    45a2:	4091      	lsls	r1, r2
    45a4:	000a      	movs	r2, r1
    45a6:	601a      	str	r2, [r3, #0]
  }
}
    45a8:	46c0      	nop			; (mov r8, r8)
    45aa:	46bd      	mov	sp, r7
    45ac:	b002      	add	sp, #8
    45ae:	bd80      	pop	{r7, pc}
    45b0:	e000e100 	.word	0xe000e100

000045b4 <hri_sysctrl_get_PCLKSR_reg>:
{
    45b4:	b580      	push	{r7, lr}
    45b6:	b084      	sub	sp, #16
    45b8:	af00      	add	r7, sp, #0
    45ba:	6078      	str	r0, [r7, #4]
    45bc:	6039      	str	r1, [r7, #0]
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    45be:	687b      	ldr	r3, [r7, #4]
    45c0:	68db      	ldr	r3, [r3, #12]
    45c2:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    45c4:	68fb      	ldr	r3, [r7, #12]
    45c6:	683a      	ldr	r2, [r7, #0]
    45c8:	4013      	ands	r3, r2
    45ca:	60fb      	str	r3, [r7, #12]
	return tmp;
    45cc:	68fb      	ldr	r3, [r7, #12]
}
    45ce:	0018      	movs	r0, r3
    45d0:	46bd      	mov	sp, r7
    45d2:	b004      	add	sp, #16
    45d4:	bd80      	pop	{r7, pc}

000045d6 <hri_sysctrl_get_DPLLSTATUS_reg>:
{
    45d6:	b580      	push	{r7, lr}
    45d8:	b084      	sub	sp, #16
    45da:	af00      	add	r7, sp, #0
    45dc:	6078      	str	r0, [r7, #4]
    45de:	000a      	movs	r2, r1
    45e0:	1cfb      	adds	r3, r7, #3
    45e2:	701a      	strb	r2, [r3, #0]
	tmp = ((Sysctrl *)hw)->DPLLSTATUS.reg;
    45e4:	230f      	movs	r3, #15
    45e6:	18fb      	adds	r3, r7, r3
    45e8:	687a      	ldr	r2, [r7, #4]
    45ea:	2150      	movs	r1, #80	; 0x50
    45ec:	5c52      	ldrb	r2, [r2, r1]
    45ee:	701a      	strb	r2, [r3, #0]
	tmp &= mask;
    45f0:	230f      	movs	r3, #15
    45f2:	18fb      	adds	r3, r7, r3
    45f4:	220f      	movs	r2, #15
    45f6:	18ba      	adds	r2, r7, r2
    45f8:	1cf9      	adds	r1, r7, #3
    45fa:	7812      	ldrb	r2, [r2, #0]
    45fc:	7809      	ldrb	r1, [r1, #0]
    45fe:	400a      	ands	r2, r1
    4600:	701a      	strb	r2, [r3, #0]
	return tmp;
    4602:	230f      	movs	r3, #15
    4604:	18fb      	adds	r3, r7, r3
    4606:	781b      	ldrb	r3, [r3, #0]
}
    4608:	0018      	movs	r0, r3
    460a:	46bd      	mov	sp, r7
    460c:	b004      	add	sp, #16
    460e:	bd80      	pop	{r7, pc}

00004610 <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    4610:	b580      	push	{r7, lr}
    4612:	b082      	sub	sp, #8
    4614:	af00      	add	r7, sp, #0
    4616:	6078      	str	r0, [r7, #4]
    4618:	000a      	movs	r2, r1
    461a:	1cfb      	adds	r3, r7, #3
    461c:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    461e:	46c0      	nop			; (mov r8, r8)
    4620:	687b      	ldr	r3, [r7, #4]
    4622:	789b      	ldrb	r3, [r3, #2]
    4624:	b2db      	uxtb	r3, r3
    4626:	1cfa      	adds	r2, r7, #3
    4628:	7812      	ldrb	r2, [r2, #0]
    462a:	4013      	ands	r3, r2
    462c:	b2db      	uxtb	r3, r3
    462e:	2b00      	cmp	r3, #0
    4630:	d1f6      	bne.n	4620 <hri_usb_wait_for_sync+0x10>
	};
}
    4632:	46c0      	nop			; (mov r8, r8)
    4634:	46bd      	mov	sp, r7
    4636:	b002      	add	sp, #8
    4638:	bd80      	pop	{r7, pc}

0000463a <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    463a:	b580      	push	{r7, lr}
    463c:	b082      	sub	sp, #8
    463e:	af00      	add	r7, sp, #0
    4640:	6078      	str	r0, [r7, #4]
    4642:	000a      	movs	r2, r1
    4644:	1cfb      	adds	r3, r7, #3
    4646:	701a      	strb	r2, [r3, #0]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    4648:	687b      	ldr	r3, [r7, #4]
    464a:	789b      	ldrb	r3, [r3, #2]
    464c:	b2db      	uxtb	r3, r3
    464e:	1cfa      	adds	r2, r7, #3
    4650:	7812      	ldrb	r2, [r2, #0]
    4652:	4013      	ands	r3, r2
    4654:	b2db      	uxtb	r3, r3
    4656:	1e5a      	subs	r2, r3, #1
    4658:	4193      	sbcs	r3, r2
    465a:	b2db      	uxtb	r3, r3
}
    465c:	0018      	movs	r0, r3
    465e:	46bd      	mov	sp, r7
    4660:	b002      	add	sp, #8
    4662:	bd80      	pop	{r7, pc}

00004664 <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    4664:	b580      	push	{r7, lr}
    4666:	b084      	sub	sp, #16
    4668:	af00      	add	r7, sp, #0
    466a:	6078      	str	r0, [r7, #4]
    466c:	0008      	movs	r0, r1
    466e:	0011      	movs	r1, r2
    4670:	1cfb      	adds	r3, r7, #3
    4672:	1c02      	adds	r2, r0, #0
    4674:	701a      	strb	r2, [r3, #0]
    4676:	1cbb      	adds	r3, r7, #2
    4678:	1c0a      	adds	r2, r1, #0
    467a:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    467c:	1cfb      	adds	r3, r7, #3
    467e:	781a      	ldrb	r2, [r3, #0]
    4680:	230f      	movs	r3, #15
    4682:	18fb      	adds	r3, r7, r3
    4684:	6879      	ldr	r1, [r7, #4]
    4686:	3208      	adds	r2, #8
    4688:	0152      	lsls	r2, r2, #5
    468a:	188a      	adds	r2, r1, r2
    468c:	3207      	adds	r2, #7
    468e:	7812      	ldrb	r2, [r2, #0]
    4690:	701a      	strb	r2, [r3, #0]
	tmp &= mask;
    4692:	230f      	movs	r3, #15
    4694:	18fb      	adds	r3, r7, r3
    4696:	220f      	movs	r2, #15
    4698:	18ba      	adds	r2, r7, r2
    469a:	1cb9      	adds	r1, r7, #2
    469c:	7812      	ldrb	r2, [r2, #0]
    469e:	7809      	ldrb	r1, [r1, #0]
    46a0:	400a      	ands	r2, r1
    46a2:	701a      	strb	r2, [r3, #0]
	return tmp;
    46a4:	230f      	movs	r3, #15
    46a6:	18fb      	adds	r3, r7, r3
    46a8:	781b      	ldrb	r3, [r3, #0]
}
    46aa:	0018      	movs	r0, r3
    46ac:	46bd      	mov	sp, r7
    46ae:	b004      	add	sp, #16
    46b0:	bd80      	pop	{r7, pc}

000046b2 <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    46b2:	b580      	push	{r7, lr}
    46b4:	b082      	sub	sp, #8
    46b6:	af00      	add	r7, sp, #0
    46b8:	6078      	str	r0, [r7, #4]
    46ba:	000a      	movs	r2, r1
    46bc:	1cfb      	adds	r3, r7, #3
    46be:	701a      	strb	r2, [r3, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    46c0:	1cfb      	adds	r3, r7, #3
    46c2:	781b      	ldrb	r3, [r3, #0]
    46c4:	687a      	ldr	r2, [r7, #4]
    46c6:	3308      	adds	r3, #8
    46c8:	015b      	lsls	r3, r3, #5
    46ca:	18d3      	adds	r3, r2, r3
    46cc:	3307      	adds	r3, #7
    46ce:	781b      	ldrb	r3, [r3, #0]
    46d0:	b2db      	uxtb	r3, r3
}
    46d2:	0018      	movs	r0, r3
    46d4:	46bd      	mov	sp, r7
    46d6:	b002      	add	sp, #8
    46d8:	bd80      	pop	{r7, pc}

000046da <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    46da:	b580      	push	{r7, lr}
    46dc:	b082      	sub	sp, #8
    46de:	af00      	add	r7, sp, #0
    46e0:	6078      	str	r0, [r7, #4]
    46e2:	0008      	movs	r0, r1
    46e4:	0011      	movs	r1, r2
    46e6:	1cfb      	adds	r3, r7, #3
    46e8:	1c02      	adds	r2, r0, #0
    46ea:	701a      	strb	r2, [r3, #0]
    46ec:	1cbb      	adds	r3, r7, #2
    46ee:	1c0a      	adds	r2, r1, #0
    46f0:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    46f2:	1cfb      	adds	r3, r7, #3
    46f4:	781b      	ldrb	r3, [r3, #0]
    46f6:	687a      	ldr	r2, [r7, #4]
    46f8:	3308      	adds	r3, #8
    46fa:	015b      	lsls	r3, r3, #5
    46fc:	18d3      	adds	r3, r2, r3
    46fe:	3307      	adds	r3, #7
    4700:	1cba      	adds	r2, r7, #2
    4702:	7812      	ldrb	r2, [r2, #0]
    4704:	701a      	strb	r2, [r3, #0]
}
    4706:	46c0      	nop			; (mov r8, r8)
    4708:	46bd      	mov	sp, r7
    470a:	b002      	add	sp, #8
    470c:	bd80      	pop	{r7, pc}

0000470e <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    470e:	b580      	push	{r7, lr}
    4710:	b082      	sub	sp, #8
    4712:	af00      	add	r7, sp, #0
    4714:	6078      	str	r0, [r7, #4]
    4716:	0008      	movs	r0, r1
    4718:	0011      	movs	r1, r2
    471a:	1cfb      	adds	r3, r7, #3
    471c:	1c02      	adds	r2, r0, #0
    471e:	701a      	strb	r2, [r3, #0]
    4720:	1cbb      	adds	r3, r7, #2
    4722:	1c0a      	adds	r2, r1, #0
    4724:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    4726:	1cfb      	adds	r3, r7, #3
    4728:	781b      	ldrb	r3, [r3, #0]
    472a:	687a      	ldr	r2, [r7, #4]
    472c:	3308      	adds	r3, #8
    472e:	015b      	lsls	r3, r3, #5
    4730:	18d3      	adds	r3, r2, r3
    4732:	3305      	adds	r3, #5
    4734:	1cba      	adds	r2, r7, #2
    4736:	7812      	ldrb	r2, [r2, #0]
    4738:	701a      	strb	r2, [r3, #0]
}
    473a:	46c0      	nop			; (mov r8, r8)
    473c:	46bd      	mov	sp, r7
    473e:	b002      	add	sp, #8
    4740:	bd80      	pop	{r7, pc}

00004742 <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    4742:	b580      	push	{r7, lr}
    4744:	b082      	sub	sp, #8
    4746:	af00      	add	r7, sp, #0
    4748:	6078      	str	r0, [r7, #4]
    474a:	000a      	movs	r2, r1
    474c:	1cfb      	adds	r3, r7, #3
    474e:	701a      	strb	r2, [r3, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    4750:	1cfb      	adds	r3, r7, #3
    4752:	781b      	ldrb	r3, [r3, #0]
    4754:	687a      	ldr	r2, [r7, #4]
    4756:	3308      	adds	r3, #8
    4758:	015b      	lsls	r3, r3, #5
    475a:	18d3      	adds	r3, r2, r3
    475c:	3306      	adds	r3, #6
    475e:	781b      	ldrb	r3, [r3, #0]
    4760:	b2db      	uxtb	r3, r3
}
    4762:	0018      	movs	r0, r3
    4764:	46bd      	mov	sp, r7
    4766:	b002      	add	sp, #8
    4768:	bd80      	pop	{r7, pc}

0000476a <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    476a:	b580      	push	{r7, lr}
    476c:	b082      	sub	sp, #8
    476e:	af00      	add	r7, sp, #0
    4770:	6078      	str	r0, [r7, #4]
    4772:	0008      	movs	r0, r1
    4774:	0011      	movs	r1, r2
    4776:	1cfb      	adds	r3, r7, #3
    4778:	1c02      	adds	r2, r0, #0
    477a:	701a      	strb	r2, [r3, #0]
    477c:	1cbb      	adds	r3, r7, #2
    477e:	1c0a      	adds	r2, r1, #0
    4780:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    4782:	1cfb      	adds	r3, r7, #3
    4784:	781b      	ldrb	r3, [r3, #0]
    4786:	687a      	ldr	r2, [r7, #4]
    4788:	3308      	adds	r3, #8
    478a:	015b      	lsls	r3, r3, #5
    478c:	18d3      	adds	r3, r2, r3
    478e:	3304      	adds	r3, #4
    4790:	1cba      	adds	r2, r7, #2
    4792:	7812      	ldrb	r2, [r2, #0]
    4794:	701a      	strb	r2, [r3, #0]
}
    4796:	46c0      	nop			; (mov r8, r8)
    4798:	46bd      	mov	sp, r7
    479a:	b002      	add	sp, #8
    479c:	bd80      	pop	{r7, pc}

0000479e <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    479e:	b580      	push	{r7, lr}
    47a0:	b082      	sub	sp, #8
    47a2:	af00      	add	r7, sp, #0
    47a4:	6078      	str	r0, [r7, #4]
    47a6:	000a      	movs	r2, r1
    47a8:	1cfb      	adds	r3, r7, #3
    47aa:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    47ac:	1cfb      	adds	r3, r7, #3
    47ae:	781a      	ldrb	r2, [r3, #0]
    47b0:	6879      	ldr	r1, [r7, #4]
    47b2:	2384      	movs	r3, #132	; 0x84
    47b4:	005b      	lsls	r3, r3, #1
    47b6:	0152      	lsls	r2, r2, #5
    47b8:	188a      	adds	r2, r1, r2
    47ba:	18d3      	adds	r3, r2, r3
    47bc:	2210      	movs	r2, #16
    47be:	701a      	strb	r2, [r3, #0]
}
    47c0:	46c0      	nop			; (mov r8, r8)
    47c2:	46bd      	mov	sp, r7
    47c4:	b002      	add	sp, #8
    47c6:	bd80      	pop	{r7, pc}

000047c8 <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    47c8:	b580      	push	{r7, lr}
    47ca:	b082      	sub	sp, #8
    47cc:	af00      	add	r7, sp, #0
    47ce:	6078      	str	r0, [r7, #4]
    47d0:	0008      	movs	r0, r1
    47d2:	0011      	movs	r1, r2
    47d4:	1cfb      	adds	r3, r7, #3
    47d6:	1c02      	adds	r2, r0, #0
    47d8:	701a      	strb	r2, [r3, #0]
    47da:	1cbb      	adds	r3, r7, #2
    47dc:	1c0a      	adds	r2, r1, #0
    47de:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    47e0:	1cfb      	adds	r3, r7, #3
    47e2:	781a      	ldrb	r2, [r3, #0]
    47e4:	6879      	ldr	r1, [r7, #4]
    47e6:	230a      	movs	r3, #10
    47e8:	33ff      	adds	r3, #255	; 0xff
    47ea:	0152      	lsls	r2, r2, #5
    47ec:	188a      	adds	r2, r1, r2
    47ee:	18d3      	adds	r3, r2, r3
    47f0:	1cba      	adds	r2, r7, #2
    47f2:	7812      	ldrb	r2, [r2, #0]
    47f4:	701a      	strb	r2, [r3, #0]
}
    47f6:	46c0      	nop			; (mov r8, r8)
    47f8:	46bd      	mov	sp, r7
    47fa:	b002      	add	sp, #8
    47fc:	bd80      	pop	{r7, pc}

000047fe <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    47fe:	b580      	push	{r7, lr}
    4800:	b082      	sub	sp, #8
    4802:	af00      	add	r7, sp, #0
    4804:	6078      	str	r0, [r7, #4]
    4806:	0008      	movs	r0, r1
    4808:	0011      	movs	r1, r2
    480a:	1cfb      	adds	r3, r7, #3
    480c:	1c02      	adds	r2, r0, #0
    480e:	701a      	strb	r2, [r3, #0]
    4810:	1cbb      	adds	r3, r7, #2
    4812:	1c0a      	adds	r2, r1, #0
    4814:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    4816:	1cfb      	adds	r3, r7, #3
    4818:	781a      	ldrb	r2, [r3, #0]
    481a:	6879      	ldr	r1, [r7, #4]
    481c:	2384      	movs	r3, #132	; 0x84
    481e:	005b      	lsls	r3, r3, #1
    4820:	0152      	lsls	r2, r2, #5
    4822:	188a      	adds	r2, r1, r2
    4824:	18d3      	adds	r3, r2, r3
    4826:	1cba      	adds	r2, r7, #2
    4828:	7812      	ldrb	r2, [r2, #0]
    482a:	701a      	strb	r2, [r3, #0]
}
    482c:	46c0      	nop			; (mov r8, r8)
    482e:	46bd      	mov	sp, r7
    4830:	b002      	add	sp, #8
    4832:	bd80      	pop	{r7, pc}

00004834 <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    4834:	b580      	push	{r7, lr}
    4836:	b084      	sub	sp, #16
    4838:	af00      	add	r7, sp, #0
    483a:	6078      	str	r0, [r7, #4]
    483c:	000a      	movs	r2, r1
    483e:	1cfb      	adds	r3, r7, #3
    4840:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    4842:	1cfb      	adds	r3, r7, #3
    4844:	7819      	ldrb	r1, [r3, #0]
    4846:	230f      	movs	r3, #15
    4848:	18fb      	adds	r3, r7, r3
    484a:	687a      	ldr	r2, [r7, #4]
    484c:	3108      	adds	r1, #8
    484e:	0149      	lsls	r1, r1, #5
    4850:	5c8a      	ldrb	r2, [r1, r2]
    4852:	701a      	strb	r2, [r3, #0]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    4854:	230f      	movs	r3, #15
    4856:	18fb      	adds	r3, r7, r3
    4858:	220f      	movs	r2, #15
    485a:	18ba      	adds	r2, r7, r2
    485c:	7812      	ldrb	r2, [r2, #0]
    485e:	2107      	movs	r1, #7
    4860:	400a      	ands	r2, r1
    4862:	701a      	strb	r2, [r3, #0]
	return tmp;
    4864:	230f      	movs	r3, #15
    4866:	18fb      	adds	r3, r7, r3
    4868:	781b      	ldrb	r3, [r3, #0]
}
    486a:	0018      	movs	r0, r3
    486c:	46bd      	mov	sp, r7
    486e:	b004      	add	sp, #16
    4870:	bd80      	pop	{r7, pc}

00004872 <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    4872:	b580      	push	{r7, lr}
    4874:	b084      	sub	sp, #16
    4876:	af00      	add	r7, sp, #0
    4878:	6078      	str	r0, [r7, #4]
    487a:	000a      	movs	r2, r1
    487c:	1cfb      	adds	r3, r7, #3
    487e:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    4880:	1cfb      	adds	r3, r7, #3
    4882:	7819      	ldrb	r1, [r3, #0]
    4884:	230f      	movs	r3, #15
    4886:	18fb      	adds	r3, r7, r3
    4888:	687a      	ldr	r2, [r7, #4]
    488a:	3108      	adds	r1, #8
    488c:	0149      	lsls	r1, r1, #5
    488e:	5c8a      	ldrb	r2, [r1, r2]
    4890:	701a      	strb	r2, [r3, #0]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    4892:	230f      	movs	r3, #15
    4894:	18fb      	adds	r3, r7, r3
    4896:	781b      	ldrb	r3, [r3, #0]
    4898:	091b      	lsrs	r3, r3, #4
    489a:	b2da      	uxtb	r2, r3
    489c:	230f      	movs	r3, #15
    489e:	18fb      	adds	r3, r7, r3
    48a0:	2107      	movs	r1, #7
    48a2:	400a      	ands	r2, r1
    48a4:	701a      	strb	r2, [r3, #0]
	return tmp;
    48a6:	230f      	movs	r3, #15
    48a8:	18fb      	adds	r3, r7, r3
    48aa:	781b      	ldrb	r3, [r3, #0]
}
    48ac:	0018      	movs	r0, r3
    48ae:	46bd      	mov	sp, r7
    48b0:	b004      	add	sp, #16
    48b2:	bd80      	pop	{r7, pc}

000048b4 <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    48b4:	b580      	push	{r7, lr}
    48b6:	b082      	sub	sp, #8
    48b8:	af00      	add	r7, sp, #0
    48ba:	6078      	str	r0, [r7, #4]
    48bc:	0008      	movs	r0, r1
    48be:	0011      	movs	r1, r2
    48c0:	1cfb      	adds	r3, r7, #3
    48c2:	1c02      	adds	r2, r0, #0
    48c4:	701a      	strb	r2, [r3, #0]
    48c6:	1cbb      	adds	r3, r7, #2
    48c8:	1c0a      	adds	r2, r1, #0
    48ca:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    48cc:	1cfb      	adds	r3, r7, #3
    48ce:	781a      	ldrb	r2, [r3, #0]
    48d0:	687b      	ldr	r3, [r7, #4]
    48d2:	3208      	adds	r2, #8
    48d4:	0152      	lsls	r2, r2, #5
    48d6:	1cb9      	adds	r1, r7, #2
    48d8:	7809      	ldrb	r1, [r1, #0]
    48da:	54d1      	strb	r1, [r2, r3]
	USB_CRITICAL_SECTION_LEAVE();
}
    48dc:	46c0      	nop			; (mov r8, r8)
    48de:	46bd      	mov	sp, r7
    48e0:	b002      	add	sp, #8
    48e2:	bd80      	pop	{r7, pc}

000048e4 <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    48e4:	b580      	push	{r7, lr}
    48e6:	b082      	sub	sp, #8
    48e8:	af00      	add	r7, sp, #0
    48ea:	6078      	str	r0, [r7, #4]
    48ec:	000a      	movs	r2, r1
    48ee:	1cfb      	adds	r3, r7, #3
    48f0:	701a      	strb	r2, [r3, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    48f2:	1cfb      	adds	r3, r7, #3
    48f4:	781a      	ldrb	r2, [r3, #0]
    48f6:	687b      	ldr	r3, [r7, #4]
    48f8:	3208      	adds	r2, #8
    48fa:	0152      	lsls	r2, r2, #5
    48fc:	5cd3      	ldrb	r3, [r2, r3]
    48fe:	b2db      	uxtb	r3, r3
}
    4900:	0018      	movs	r0, r3
    4902:	46bd      	mov	sp, r7
    4904:	b002      	add	sp, #8
    4906:	bd80      	pop	{r7, pc}

00004908 <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    4908:	b580      	push	{r7, lr}
    490a:	b082      	sub	sp, #8
    490c:	af00      	add	r7, sp, #0
    490e:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    4910:	687b      	ldr	r3, [r7, #4]
    4912:	8b9b      	ldrh	r3, [r3, #28]
    4914:	b29b      	uxth	r3, r3
}
    4916:	0018      	movs	r0, r3
    4918:	46bd      	mov	sp, r7
    491a:	b002      	add	sp, #8
    491c:	bd80      	pop	{r7, pc}

0000491e <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    491e:	b580      	push	{r7, lr}
    4920:	b082      	sub	sp, #8
    4922:	af00      	add	r7, sp, #0
    4924:	6078      	str	r0, [r7, #4]
    4926:	000a      	movs	r2, r1
    4928:	1cbb      	adds	r3, r7, #2
    492a:	801a      	strh	r2, [r3, #0]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    492c:	687b      	ldr	r3, [r7, #4]
    492e:	1cba      	adds	r2, r7, #2
    4930:	8812      	ldrh	r2, [r2, #0]
    4932:	839a      	strh	r2, [r3, #28]
}
    4934:	46c0      	nop			; (mov r8, r8)
    4936:	46bd      	mov	sp, r7
    4938:	b002      	add	sp, #8
    493a:	bd80      	pop	{r7, pc}

0000493c <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    493c:	b580      	push	{r7, lr}
    493e:	b082      	sub	sp, #8
    4940:	af00      	add	r7, sp, #0
    4942:	6078      	str	r0, [r7, #4]
    4944:	000a      	movs	r2, r1
    4946:	1cbb      	adds	r3, r7, #2
    4948:	801a      	strh	r2, [r3, #0]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    494a:	687b      	ldr	r3, [r7, #4]
    494c:	1cba      	adds	r2, r7, #2
    494e:	8812      	ldrh	r2, [r2, #0]
    4950:	831a      	strh	r2, [r3, #24]
}
    4952:	46c0      	nop			; (mov r8, r8)
    4954:	46bd      	mov	sp, r7
    4956:	b002      	add	sp, #8
    4958:	bd80      	pop	{r7, pc}

0000495a <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    495a:	b580      	push	{r7, lr}
    495c:	b082      	sub	sp, #8
    495e:	af00      	add	r7, sp, #0
    4960:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    4962:	687b      	ldr	r3, [r7, #4]
    4964:	8b1b      	ldrh	r3, [r3, #24]
    4966:	b29b      	uxth	r3, r3
}
    4968:	0018      	movs	r0, r3
    496a:	46bd      	mov	sp, r7
    496c:	b002      	add	sp, #8
    496e:	bd80      	pop	{r7, pc}

00004970 <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    4970:	b580      	push	{r7, lr}
    4972:	b082      	sub	sp, #8
    4974:	af00      	add	r7, sp, #0
    4976:	6078      	str	r0, [r7, #4]
    4978:	000a      	movs	r2, r1
    497a:	1cbb      	adds	r3, r7, #2
    497c:	801a      	strh	r2, [r3, #0]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    497e:	687b      	ldr	r3, [r7, #4]
    4980:	1cba      	adds	r2, r7, #2
    4982:	8812      	ldrh	r2, [r2, #0]
    4984:	829a      	strh	r2, [r3, #20]
}
    4986:	46c0      	nop			; (mov r8, r8)
    4988:	46bd      	mov	sp, r7
    498a:	b002      	add	sp, #8
    498c:	bd80      	pop	{r7, pc}

0000498e <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    498e:	b580      	push	{r7, lr}
    4990:	b084      	sub	sp, #16
    4992:	af00      	add	r7, sp, #0
    4994:	6078      	str	r0, [r7, #4]
    4996:	000a      	movs	r2, r1
    4998:	1cfb      	adds	r3, r7, #3
    499a:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    499c:	230f      	movs	r3, #15
    499e:	18fb      	adds	r3, r7, r3
    49a0:	687a      	ldr	r2, [r7, #4]
    49a2:	7892      	ldrb	r2, [r2, #2]
    49a4:	701a      	strb	r2, [r3, #0]
	tmp &= mask;
    49a6:	230f      	movs	r3, #15
    49a8:	18fb      	adds	r3, r7, r3
    49aa:	220f      	movs	r2, #15
    49ac:	18ba      	adds	r2, r7, r2
    49ae:	1cf9      	adds	r1, r7, #3
    49b0:	7812      	ldrb	r2, [r2, #0]
    49b2:	7809      	ldrb	r1, [r1, #0]
    49b4:	400a      	ands	r2, r1
    49b6:	701a      	strb	r2, [r3, #0]
	return tmp;
    49b8:	230f      	movs	r3, #15
    49ba:	18fb      	adds	r3, r7, r3
    49bc:	781b      	ldrb	r3, [r3, #0]
}
    49be:	0018      	movs	r0, r3
    49c0:	46bd      	mov	sp, r7
    49c2:	b004      	add	sp, #16
    49c4:	bd80      	pop	{r7, pc}
	...

000049c8 <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    49c8:	b580      	push	{r7, lr}
    49ca:	b082      	sub	sp, #8
    49cc:	af00      	add	r7, sp, #0
    49ce:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    49d0:	687b      	ldr	r3, [r7, #4]
    49d2:	781b      	ldrb	r3, [r3, #0]
    49d4:	b2db      	uxtb	r3, r3
    49d6:	2202      	movs	r2, #2
    49d8:	4393      	bics	r3, r2
    49da:	b2da      	uxtb	r2, r3
    49dc:	687b      	ldr	r3, [r7, #4]
    49de:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    49e0:	687b      	ldr	r3, [r7, #4]
    49e2:	2103      	movs	r1, #3
    49e4:	0018      	movs	r0, r3
    49e6:	4b03      	ldr	r3, [pc, #12]	; (49f4 <hri_usb_clear_CTRLA_ENABLE_bit+0x2c>)
    49e8:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    49ea:	46c0      	nop			; (mov r8, r8)
    49ec:	46bd      	mov	sp, r7
    49ee:	b002      	add	sp, #8
    49f0:	bd80      	pop	{r7, pc}
    49f2:	46c0      	nop			; (mov r8, r8)
    49f4:	00004611 	.word	0x00004611

000049f8 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    49f8:	b580      	push	{r7, lr}
    49fa:	b084      	sub	sp, #16
    49fc:	af00      	add	r7, sp, #0
    49fe:	6078      	str	r0, [r7, #4]
    4a00:	000a      	movs	r2, r1
    4a02:	1cfb      	adds	r3, r7, #3
    4a04:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    4a06:	687b      	ldr	r3, [r7, #4]
    4a08:	2103      	movs	r1, #3
    4a0a:	0018      	movs	r0, r3
    4a0c:	4b0b      	ldr	r3, [pc, #44]	; (4a3c <hri_usb_get_CTRLA_reg+0x44>)
    4a0e:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    4a10:	230f      	movs	r3, #15
    4a12:	18fb      	adds	r3, r7, r3
    4a14:	687a      	ldr	r2, [r7, #4]
    4a16:	7812      	ldrb	r2, [r2, #0]
    4a18:	701a      	strb	r2, [r3, #0]
	tmp &= mask;
    4a1a:	230f      	movs	r3, #15
    4a1c:	18fb      	adds	r3, r7, r3
    4a1e:	220f      	movs	r2, #15
    4a20:	18ba      	adds	r2, r7, r2
    4a22:	1cf9      	adds	r1, r7, #3
    4a24:	7812      	ldrb	r2, [r2, #0]
    4a26:	7809      	ldrb	r1, [r1, #0]
    4a28:	400a      	ands	r2, r1
    4a2a:	701a      	strb	r2, [r3, #0]
	return tmp;
    4a2c:	230f      	movs	r3, #15
    4a2e:	18fb      	adds	r3, r7, r3
    4a30:	781b      	ldrb	r3, [r3, #0]
}
    4a32:	0018      	movs	r0, r3
    4a34:	46bd      	mov	sp, r7
    4a36:	b004      	add	sp, #16
    4a38:	bd80      	pop	{r7, pc}
    4a3a:	46c0      	nop			; (mov r8, r8)
    4a3c:	00004611 	.word	0x00004611

00004a40 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    4a40:	b580      	push	{r7, lr}
    4a42:	b082      	sub	sp, #8
    4a44:	af00      	add	r7, sp, #0
    4a46:	6078      	str	r0, [r7, #4]
    4a48:	000a      	movs	r2, r1
    4a4a:	1cfb      	adds	r3, r7, #3
    4a4c:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    4a4e:	687b      	ldr	r3, [r7, #4]
    4a50:	1cfa      	adds	r2, r7, #3
    4a52:	7812      	ldrb	r2, [r2, #0]
    4a54:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    4a56:	687b      	ldr	r3, [r7, #4]
    4a58:	2103      	movs	r1, #3
    4a5a:	0018      	movs	r0, r3
    4a5c:	4b02      	ldr	r3, [pc, #8]	; (4a68 <hri_usb_write_CTRLA_reg+0x28>)
    4a5e:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    4a60:	46c0      	nop			; (mov r8, r8)
    4a62:	46bd      	mov	sp, r7
    4a64:	b002      	add	sp, #8
    4a66:	bd80      	pop	{r7, pc}
    4a68:	00004611 	.word	0x00004611

00004a6c <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    4a6c:	b580      	push	{r7, lr}
    4a6e:	b082      	sub	sp, #8
    4a70:	af00      	add	r7, sp, #0
    4a72:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    4a74:	687b      	ldr	r3, [r7, #4]
    4a76:	2103      	movs	r1, #3
    4a78:	0018      	movs	r0, r3
    4a7a:	4b04      	ldr	r3, [pc, #16]	; (4a8c <hri_usb_read_CTRLA_reg+0x20>)
    4a7c:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    4a7e:	687b      	ldr	r3, [r7, #4]
    4a80:	781b      	ldrb	r3, [r3, #0]
    4a82:	b2db      	uxtb	r3, r3
}
    4a84:	0018      	movs	r0, r3
    4a86:	46bd      	mov	sp, r7
    4a88:	b002      	add	sp, #8
    4a8a:	bd80      	pop	{r7, pc}
    4a8c:	00004611 	.word	0x00004611

00004a90 <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    4a90:	b580      	push	{r7, lr}
    4a92:	b082      	sub	sp, #8
    4a94:	af00      	add	r7, sp, #0
    4a96:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    4a98:	687b      	ldr	r3, [r7, #4]
    4a9a:	891b      	ldrh	r3, [r3, #8]
    4a9c:	b29b      	uxth	r3, r3
    4a9e:	2201      	movs	r2, #1
    4aa0:	4393      	bics	r3, r2
    4aa2:	b29a      	uxth	r2, r3
    4aa4:	687b      	ldr	r3, [r7, #4]
    4aa6:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    4aa8:	46c0      	nop			; (mov r8, r8)
    4aaa:	46bd      	mov	sp, r7
    4aac:	b002      	add	sp, #8
    4aae:	bd80      	pop	{r7, pc}

00004ab0 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    4ab0:	b580      	push	{r7, lr}
    4ab2:	b082      	sub	sp, #8
    4ab4:	af00      	add	r7, sp, #0
    4ab6:	6078      	str	r0, [r7, #4]
    4ab8:	000a      	movs	r2, r1
    4aba:	1cbb      	adds	r3, r7, #2
    4abc:	801a      	strh	r2, [r3, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    4abe:	687b      	ldr	r3, [r7, #4]
    4ac0:	1cba      	adds	r2, r7, #2
    4ac2:	8812      	ldrh	r2, [r2, #0]
    4ac4:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    4ac6:	46c0      	nop			; (mov r8, r8)
    4ac8:	46bd      	mov	sp, r7
    4aca:	b002      	add	sp, #8
    4acc:	bd80      	pop	{r7, pc}

00004ace <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    4ace:	b580      	push	{r7, lr}
    4ad0:	b082      	sub	sp, #8
    4ad2:	af00      	add	r7, sp, #0
    4ad4:	6078      	str	r0, [r7, #4]
    4ad6:	000a      	movs	r2, r1
    4ad8:	1cfb      	adds	r3, r7, #3
    4ada:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    4adc:	687b      	ldr	r3, [r7, #4]
    4ade:	1cfa      	adds	r2, r7, #3
    4ae0:	7812      	ldrb	r2, [r2, #0]
    4ae2:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    4ae4:	46c0      	nop			; (mov r8, r8)
    4ae6:	46bd      	mov	sp, r7
    4ae8:	b002      	add	sp, #8
    4aea:	bd80      	pop	{r7, pc}

00004aec <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    4aec:	b580      	push	{r7, lr}
    4aee:	b082      	sub	sp, #8
    4af0:	af00      	add	r7, sp, #0
    4af2:	6078      	str	r0, [r7, #4]
    4af4:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    4af6:	687b      	ldr	r3, [r7, #4]
    4af8:	683a      	ldr	r2, [r7, #0]
    4afa:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    4afc:	46c0      	nop			; (mov r8, r8)
    4afe:	46bd      	mov	sp, r7
    4b00:	b002      	add	sp, #8
    4b02:	bd80      	pop	{r7, pc}

00004b04 <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    4b04:	b580      	push	{r7, lr}
    4b06:	b082      	sub	sp, #8
    4b08:	af00      	add	r7, sp, #0
    4b0a:	6078      	str	r0, [r7, #4]
    4b0c:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    4b0e:	2300      	movs	r3, #0
}
    4b10:	0018      	movs	r0, r3
    4b12:	46bd      	mov	sp, r7
    4b14:	b002      	add	sp, #8
    4b16:	bd80      	pop	{r7, pc}

00004b18 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    4b18:	b580      	push	{r7, lr}
    4b1a:	b084      	sub	sp, #16
    4b1c:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 50
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 55
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    4b1e:	4b26      	ldr	r3, [pc, #152]	; (4bb8 <_usb_load_calib+0xa0>)
    4b20:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    4b22:	4b26      	ldr	r3, [pc, #152]	; (4bbc <_usb_load_calib+0xa4>)
    4b24:	681b      	ldr	r3, [r3, #0]
    4b26:	0b5b      	lsrs	r3, r3, #13
	uint32_t pad_transn
    4b28:	221f      	movs	r2, #31
    4b2a:	4013      	ands	r3, r2
    4b2c:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    4b2e:	4b23      	ldr	r3, [pc, #140]	; (4bbc <_usb_load_calib+0xa4>)
    4b30:	681b      	ldr	r3, [r3, #0]
    4b32:	0c9b      	lsrs	r3, r3, #18
	uint32_t pad_transp
    4b34:	221f      	movs	r2, #31
    4b36:	4013      	ands	r3, r2
    4b38:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    4b3a:	4b20      	ldr	r3, [pc, #128]	; (4bbc <_usb_load_calib+0xa4>)
    4b3c:	681b      	ldr	r3, [r3, #0]
    4b3e:	0ddb      	lsrs	r3, r3, #23
    4b40:	2207      	movs	r2, #7
    4b42:	4013      	ands	r3, r2
    4b44:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0x1F) {
    4b46:	68fb      	ldr	r3, [r7, #12]
    4b48:	2b1f      	cmp	r3, #31
    4b4a:	d101      	bne.n	4b50 <_usb_load_calib+0x38>
		pad_transn = 5;
    4b4c:	2305      	movs	r3, #5
    4b4e:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0x1F) {
    4b50:	68bb      	ldr	r3, [r7, #8]
    4b52:	2b1f      	cmp	r3, #31
    4b54:	d101      	bne.n	4b5a <_usb_load_calib+0x42>
		pad_transp = 29;
    4b56:	231d      	movs	r3, #29
    4b58:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0x7) {
    4b5a:	687b      	ldr	r3, [r7, #4]
    4b5c:	2b07      	cmp	r3, #7
    4b5e:	d101      	bne.n	4b64 <_usb_load_calib+0x4c>
		pad_trim = 5;
    4b60:	2305      	movs	r3, #5
    4b62:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    4b64:	68fb      	ldr	r3, [r7, #12]
    4b66:	b29b      	uxth	r3, r3
    4b68:	019b      	lsls	r3, r3, #6
    4b6a:	b29a      	uxth	r2, r3
    4b6c:	23f8      	movs	r3, #248	; 0xf8
    4b6e:	00db      	lsls	r3, r3, #3
    4b70:	4013      	ands	r3, r2
    4b72:	b29a      	uxth	r2, r3
    4b74:	68bb      	ldr	r3, [r7, #8]
    4b76:	b29b      	uxth	r3, r3
    4b78:	211f      	movs	r1, #31
    4b7a:	400b      	ands	r3, r1
    4b7c:	b29b      	uxth	r3, r3
    4b7e:	4313      	orrs	r3, r2
    4b80:	b29a      	uxth	r2, r3
    4b82:	687b      	ldr	r3, [r7, #4]
    4b84:	b29b      	uxth	r3, r3
    4b86:	031b      	lsls	r3, r3, #12
    4b88:	b299      	uxth	r1, r3
    4b8a:	23e0      	movs	r3, #224	; 0xe0
    4b8c:	01db      	lsls	r3, r3, #7
    4b8e:	400b      	ands	r3, r1
    4b90:	b29b      	uxth	r3, r3
    4b92:	4313      	orrs	r3, r2
    4b94:	b29a      	uxth	r2, r3
    4b96:	683b      	ldr	r3, [r7, #0]
    4b98:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    4b9a:	683a      	ldr	r2, [r7, #0]
    4b9c:	78d3      	ldrb	r3, [r2, #3]
    4b9e:	2103      	movs	r1, #3
    4ba0:	430b      	orrs	r3, r1
    4ba2:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    4ba4:	683a      	ldr	r2, [r7, #0]
    4ba6:	78d3      	ldrb	r3, [r2, #3]
    4ba8:	210c      	movs	r1, #12
    4baa:	430b      	orrs	r3, r1
    4bac:	70d3      	strb	r3, [r2, #3]
}
    4bae:	46c0      	nop			; (mov r8, r8)
    4bb0:	46bd      	mov	sp, r7
    4bb2:	b004      	add	sp, #16
    4bb4:	bd80      	pop	{r7, pc}
    4bb6:	46c0      	nop			; (mov r8, r8)
    4bb8:	41005000 	.word	0x41005000
    4bbc:	00806024 	.word	0x00806024

00004bc0 <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    4bc0:	b580      	push	{r7, lr}
    4bc2:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (SYSCTRL_DPLLSTATUS_ENABLE | SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)
	while (hri_sysctrl_get_DPLLSTATUS_reg(SYSCTRL, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    4bc4:	46c0      	nop			; (mov r8, r8)
    4bc6:	4b05      	ldr	r3, [pc, #20]	; (4bdc <_usb_d_dev_wait_dpll_rdy+0x1c>)
    4bc8:	2107      	movs	r1, #7
    4bca:	0018      	movs	r0, r3
    4bcc:	4b04      	ldr	r3, [pc, #16]	; (4be0 <_usb_d_dev_wait_dpll_rdy+0x20>)
    4bce:	4798      	blx	r3
    4bd0:	0003      	movs	r3, r0
    4bd2:	2b07      	cmp	r3, #7
    4bd4:	d1f7      	bne.n	4bc6 <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    4bd6:	46c0      	nop			; (mov r8, r8)
    4bd8:	46bd      	mov	sp, r7
    4bda:	bd80      	pop	{r7, pc}
    4bdc:	40000800 	.word	0x40000800
    4be0:	000045d7 	.word	0x000045d7

00004be4 <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    4be4:	b580      	push	{r7, lr}
    4be6:	af00      	add	r7, sp, #0
#define DFLL_READY_FLAG (SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC)
	/* In USB recovery mode the status is not checked */
	if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    4be8:	4b0e      	ldr	r3, [pc, #56]	; (4c24 <_usb_d_dev_wait_dfll_rdy+0x40>)
    4bea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    4bec:	b29b      	uxth	r3, r3
    4bee:	001a      	movs	r2, r3
    4bf0:	2320      	movs	r3, #32
    4bf2:	4013      	ands	r3, r2
    4bf4:	d109      	bne.n	4c0a <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, DFLL_READY_FLAG) != DFLL_READY_FLAG)
    4bf6:	46c0      	nop			; (mov r8, r8)
    4bf8:	4b0a      	ldr	r3, [pc, #40]	; (4c24 <_usb_d_dev_wait_dfll_rdy+0x40>)
    4bfa:	21d0      	movs	r1, #208	; 0xd0
    4bfc:	0018      	movs	r0, r3
    4bfe:	4b0a      	ldr	r3, [pc, #40]	; (4c28 <_usb_d_dev_wait_dfll_rdy+0x44>)
    4c00:	4798      	blx	r3
    4c02:	0003      	movs	r3, r0
    4c04:	2bd0      	cmp	r3, #208	; 0xd0
    4c06:	d1f7      	bne.n	4bf8 <_usb_d_dev_wait_dfll_rdy+0x14>
			;
	} else {
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY)
			;
	}
}
    4c08:	e008      	b.n	4c1c <_usb_d_dev_wait_dfll_rdy+0x38>
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY)
    4c0a:	46c0      	nop			; (mov r8, r8)
    4c0c:	4b05      	ldr	r3, [pc, #20]	; (4c24 <_usb_d_dev_wait_dfll_rdy+0x40>)
    4c0e:	2110      	movs	r1, #16
    4c10:	0018      	movs	r0, r3
    4c12:	4b05      	ldr	r3, [pc, #20]	; (4c28 <_usb_d_dev_wait_dfll_rdy+0x44>)
    4c14:	4798      	blx	r3
    4c16:	0003      	movs	r3, r0
    4c18:	2b10      	cmp	r3, #16
    4c1a:	d1f7      	bne.n	4c0c <_usb_d_dev_wait_dfll_rdy+0x28>
}
    4c1c:	46c0      	nop			; (mov r8, r8)
    4c1e:	46bd      	mov	sp, r7
    4c20:	bd80      	pop	{r7, pc}
    4c22:	46c0      	nop			; (mov r8, r8)
    4c24:	40000800 	.word	0x40000800
    4c28:	000045b5 	.word	0x000045b5

00004c2c <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    4c2c:	b580      	push	{r7, lr}
    4c2e:	b082      	sub	sp, #8
    4c30:	af00      	add	r7, sp, #0
    4c32:	0002      	movs	r2, r0
    4c34:	1dfb      	adds	r3, r7, #7
    4c36:	701a      	strb	r2, [r3, #0]
	if (clk_src == USB_CLK_SRC_DFLL) {
    4c38:	1dfb      	adds	r3, r7, #7
    4c3a:	781b      	ldrb	r3, [r3, #0]
    4c3c:	2b00      	cmp	r3, #0
    4c3e:	d102      	bne.n	4c46 <_usb_d_dev_wait_clk_rdy+0x1a>
		_usb_d_dev_wait_dfll_rdy();
    4c40:	4b06      	ldr	r3, [pc, #24]	; (4c5c <_usb_d_dev_wait_clk_rdy+0x30>)
    4c42:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    4c44:	e005      	b.n	4c52 <_usb_d_dev_wait_clk_rdy+0x26>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    4c46:	1dfb      	adds	r3, r7, #7
    4c48:	781b      	ldrb	r3, [r3, #0]
    4c4a:	2b01      	cmp	r3, #1
    4c4c:	d101      	bne.n	4c52 <_usb_d_dev_wait_clk_rdy+0x26>
		_usb_d_dev_wait_dpll_rdy();
    4c4e:	4b04      	ldr	r3, [pc, #16]	; (4c60 <_usb_d_dev_wait_clk_rdy+0x34>)
    4c50:	4798      	blx	r3
}
    4c52:	46c0      	nop			; (mov r8, r8)
    4c54:	46bd      	mov	sp, r7
    4c56:	b002      	add	sp, #8
    4c58:	bd80      	pop	{r7, pc}
    4c5a:	46c0      	nop			; (mov r8, r8)
    4c5c:	00004be5 	.word	0x00004be5
    4c60:	00004bc1 	.word	0x00004bc1

00004c64 <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    4c64:	b580      	push	{r7, lr}
    4c66:	b082      	sub	sp, #8
    4c68:	af00      	add	r7, sp, #0
    4c6a:	0002      	movs	r2, r0
    4c6c:	6039      	str	r1, [r7, #0]
    4c6e:	1dfb      	adds	r3, r7, #7
    4c70:	701a      	strb	r2, [r3, #0]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    4c72:	683b      	ldr	r3, [r7, #0]
    4c74:	b2da      	uxtb	r2, r3
    4c76:	1dfb      	adds	r3, r7, #7
    4c78:	781b      	ldrb	r3, [r3, #0]
    4c7a:	4804      	ldr	r0, [pc, #16]	; (4c8c <_usbd_ep_int_ack+0x28>)
    4c7c:	0019      	movs	r1, r3
    4c7e:	4b04      	ldr	r3, [pc, #16]	; (4c90 <_usbd_ep_int_ack+0x2c>)
    4c80:	4798      	blx	r3
}
    4c82:	46c0      	nop			; (mov r8, r8)
    4c84:	46bd      	mov	sp, r7
    4c86:	b002      	add	sp, #8
    4c88:	bd80      	pop	{r7, pc}
    4c8a:	46c0      	nop			; (mov r8, r8)
    4c8c:	41005000 	.word	0x41005000
    4c90:	000046db 	.word	0x000046db

00004c94 <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    4c94:	b580      	push	{r7, lr}
    4c96:	b082      	sub	sp, #8
    4c98:	af00      	add	r7, sp, #0
    4c9a:	0002      	movs	r2, r0
    4c9c:	6039      	str	r1, [r7, #0]
    4c9e:	1dfb      	adds	r3, r7, #7
    4ca0:	701a      	strb	r2, [r3, #0]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    4ca2:	683b      	ldr	r3, [r7, #0]
    4ca4:	b2da      	uxtb	r2, r3
    4ca6:	1dfb      	adds	r3, r7, #7
    4ca8:	781b      	ldrb	r3, [r3, #0]
    4caa:	4804      	ldr	r0, [pc, #16]	; (4cbc <_usbd_ep_int_en+0x28>)
    4cac:	0019      	movs	r1, r3
    4cae:	4b04      	ldr	r3, [pc, #16]	; (4cc0 <_usbd_ep_int_en+0x2c>)
    4cb0:	4798      	blx	r3
}
    4cb2:	46c0      	nop			; (mov r8, r8)
    4cb4:	46bd      	mov	sp, r7
    4cb6:	b002      	add	sp, #8
    4cb8:	bd80      	pop	{r7, pc}
    4cba:	46c0      	nop			; (mov r8, r8)
    4cbc:	41005000 	.word	0x41005000
    4cc0:	000047c9 	.word	0x000047c9

00004cc4 <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    4cc4:	b580      	push	{r7, lr}
    4cc6:	b082      	sub	sp, #8
    4cc8:	af00      	add	r7, sp, #0
    4cca:	0002      	movs	r2, r0
    4ccc:	6039      	str	r1, [r7, #0]
    4cce:	1dfb      	adds	r3, r7, #7
    4cd0:	701a      	strb	r2, [r3, #0]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    4cd2:	683b      	ldr	r3, [r7, #0]
    4cd4:	b2da      	uxtb	r2, r3
    4cd6:	1dfb      	adds	r3, r7, #7
    4cd8:	781b      	ldrb	r3, [r3, #0]
    4cda:	4804      	ldr	r0, [pc, #16]	; (4cec <_usbd_ep_int_dis+0x28>)
    4cdc:	0019      	movs	r1, r3
    4cde:	4b04      	ldr	r3, [pc, #16]	; (4cf0 <_usbd_ep_int_dis+0x2c>)
    4ce0:	4798      	blx	r3
}
    4ce2:	46c0      	nop			; (mov r8, r8)
    4ce4:	46bd      	mov	sp, r7
    4ce6:	b002      	add	sp, #8
    4ce8:	bd80      	pop	{r7, pc}
    4cea:	46c0      	nop			; (mov r8, r8)
    4cec:	41005000 	.word	0x41005000
    4cf0:	000047ff 	.word	0x000047ff

00004cf4 <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    4cf4:	b580      	push	{r7, lr}
    4cf6:	b082      	sub	sp, #8
    4cf8:	af00      	add	r7, sp, #0
    4cfa:	0002      	movs	r2, r0
    4cfc:	1dfb      	adds	r3, r7, #7
    4cfe:	701a      	strb	r2, [r3, #0]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    4d00:	1dfb      	adds	r3, r7, #7
    4d02:	781b      	ldrb	r3, [r3, #0]
    4d04:	4a06      	ldr	r2, [pc, #24]	; (4d20 <_usbd_ep_is_ctrl+0x2c>)
    4d06:	0019      	movs	r1, r3
    4d08:	0010      	movs	r0, r2
    4d0a:	4b06      	ldr	r3, [pc, #24]	; (4d24 <_usbd_ep_is_ctrl+0x30>)
    4d0c:	4798      	blx	r3
    4d0e:	0003      	movs	r3, r0
    4d10:	3b11      	subs	r3, #17
    4d12:	425a      	negs	r2, r3
    4d14:	4153      	adcs	r3, r2
    4d16:	b2db      	uxtb	r3, r3
}
    4d18:	0018      	movs	r0, r3
    4d1a:	46bd      	mov	sp, r7
    4d1c:	b002      	add	sp, #8
    4d1e:	bd80      	pop	{r7, pc}
    4d20:	41005000 	.word	0x41005000
    4d24:	000048e5 	.word	0x000048e5

00004d28 <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    4d28:	b590      	push	{r4, r7, lr}
    4d2a:	b083      	sub	sp, #12
    4d2c:	af00      	add	r7, sp, #0
    4d2e:	0004      	movs	r4, r0
    4d30:	0008      	movs	r0, r1
    4d32:	0011      	movs	r1, r2
    4d34:	1dfb      	adds	r3, r7, #7
    4d36:	1c22      	adds	r2, r4, #0
    4d38:	701a      	strb	r2, [r3, #0]
    4d3a:	1dbb      	adds	r3, r7, #6
    4d3c:	1c02      	adds	r2, r0, #0
    4d3e:	701a      	strb	r2, [r3, #0]
    4d40:	1d7b      	adds	r3, r7, #5
    4d42:	1c0a      	adds	r2, r1, #0
    4d44:	701a      	strb	r2, [r3, #0]
	if (st) {
    4d46:	1d7b      	adds	r3, r7, #5
    4d48:	781b      	ldrb	r3, [r3, #0]
    4d4a:	2b00      	cmp	r3, #0
    4d4c:	d00c      	beq.n	4d68 <_usbd_ep_set_stall+0x40>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    4d4e:	1dbb      	adds	r3, r7, #6
    4d50:	781b      	ldrb	r3, [r3, #0]
    4d52:	2210      	movs	r2, #16
    4d54:	409a      	lsls	r2, r3
    4d56:	0013      	movs	r3, r2
    4d58:	b2da      	uxtb	r2, r3
    4d5a:	1dfb      	adds	r3, r7, #7
    4d5c:	781b      	ldrb	r3, [r3, #0]
    4d5e:	480a      	ldr	r0, [pc, #40]	; (4d88 <_usbd_ep_set_stall+0x60>)
    4d60:	0019      	movs	r1, r3
    4d62:	4b0a      	ldr	r3, [pc, #40]	; (4d8c <_usbd_ep_set_stall+0x64>)
    4d64:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    4d66:	e00b      	b.n	4d80 <_usbd_ep_set_stall+0x58>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    4d68:	1dbb      	adds	r3, r7, #6
    4d6a:	781b      	ldrb	r3, [r3, #0]
    4d6c:	2210      	movs	r2, #16
    4d6e:	409a      	lsls	r2, r3
    4d70:	0013      	movs	r3, r2
    4d72:	b2da      	uxtb	r2, r3
    4d74:	1dfb      	adds	r3, r7, #7
    4d76:	781b      	ldrb	r3, [r3, #0]
    4d78:	4803      	ldr	r0, [pc, #12]	; (4d88 <_usbd_ep_set_stall+0x60>)
    4d7a:	0019      	movs	r1, r3
    4d7c:	4b04      	ldr	r3, [pc, #16]	; (4d90 <_usbd_ep_set_stall+0x68>)
    4d7e:	4798      	blx	r3
}
    4d80:	46c0      	nop			; (mov r8, r8)
    4d82:	46bd      	mov	sp, r7
    4d84:	b003      	add	sp, #12
    4d86:	bd90      	pop	{r4, r7, pc}
    4d88:	41005000 	.word	0x41005000
    4d8c:	0000470f 	.word	0x0000470f
    4d90:	0000476b 	.word	0x0000476b

00004d94 <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    4d94:	b580      	push	{r7, lr}
    4d96:	b084      	sub	sp, #16
    4d98:	af00      	add	r7, sp, #0
    4d9a:	0002      	movs	r2, r0
    4d9c:	1dfb      	adds	r3, r7, #7
    4d9e:	701a      	strb	r2, [r3, #0]
    4da0:	1dbb      	adds	r3, r7, #6
    4da2:	1c0a      	adds	r2, r1, #0
    4da4:	701a      	strb	r2, [r3, #0]
	Usb *hw = USB;
    4da6:	4b0c      	ldr	r3, [pc, #48]	; (4dd8 <_usbd_ep_is_stalled+0x44>)
    4da8:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    4daa:	1dfb      	adds	r3, r7, #7
    4dac:	781a      	ldrb	r2, [r3, #0]
    4dae:	68fb      	ldr	r3, [r7, #12]
    4db0:	0011      	movs	r1, r2
    4db2:	0018      	movs	r0, r3
    4db4:	4b09      	ldr	r3, [pc, #36]	; (4ddc <_usbd_ep_is_stalled+0x48>)
    4db6:	4798      	blx	r3
    4db8:	0003      	movs	r3, r0
    4dba:	0019      	movs	r1, r3
    4dbc:	1dbb      	adds	r3, r7, #6
    4dbe:	781b      	ldrb	r3, [r3, #0]
    4dc0:	2210      	movs	r2, #16
    4dc2:	409a      	lsls	r2, r3
    4dc4:	0013      	movs	r3, r2
    4dc6:	400b      	ands	r3, r1
    4dc8:	1e5a      	subs	r2, r3, #1
    4dca:	4193      	sbcs	r3, r2
    4dcc:	b2db      	uxtb	r3, r3
}
    4dce:	0018      	movs	r0, r3
    4dd0:	46bd      	mov	sp, r7
    4dd2:	b004      	add	sp, #16
    4dd4:	bd80      	pop	{r7, pc}
    4dd6:	46c0      	nop			; (mov r8, r8)
    4dd8:	41005000 	.word	0x41005000
    4ddc:	00004743 	.word	0x00004743

00004de0 <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    4de0:	b580      	push	{r7, lr}
    4de2:	b084      	sub	sp, #16
    4de4:	af00      	add	r7, sp, #0
    4de6:	0002      	movs	r2, r0
    4de8:	1dfb      	adds	r3, r7, #7
    4dea:	701a      	strb	r2, [r3, #0]
    4dec:	1dbb      	adds	r3, r7, #6
    4dee:	1c0a      	adds	r2, r1, #0
    4df0:	701a      	strb	r2, [r3, #0]
	Usb *hw = USB;
    4df2:	4b0c      	ldr	r3, [pc, #48]	; (4e24 <_usbd_ep_is_stall_sent+0x44>)
    4df4:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    4df6:	1dfb      	adds	r3, r7, #7
    4df8:	781a      	ldrb	r2, [r3, #0]
    4dfa:	68fb      	ldr	r3, [r7, #12]
    4dfc:	0011      	movs	r1, r2
    4dfe:	0018      	movs	r0, r3
    4e00:	4b09      	ldr	r3, [pc, #36]	; (4e28 <_usbd_ep_is_stall_sent+0x48>)
    4e02:	4798      	blx	r3
    4e04:	0003      	movs	r3, r0
    4e06:	0019      	movs	r1, r3
    4e08:	1dbb      	adds	r3, r7, #6
    4e0a:	781b      	ldrb	r3, [r3, #0]
    4e0c:	2220      	movs	r2, #32
    4e0e:	409a      	lsls	r2, r3
    4e10:	0013      	movs	r3, r2
    4e12:	400b      	ands	r3, r1
    4e14:	1e5a      	subs	r2, r3, #1
    4e16:	4193      	sbcs	r3, r2
    4e18:	b2db      	uxtb	r3, r3
}
    4e1a:	0018      	movs	r0, r3
    4e1c:	46bd      	mov	sp, r7
    4e1e:	b004      	add	sp, #16
    4e20:	bd80      	pop	{r7, pc}
    4e22:	46c0      	nop			; (mov r8, r8)
    4e24:	41005000 	.word	0x41005000
    4e28:	000046b3 	.word	0x000046b3

00004e2c <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    4e2c:	b580      	push	{r7, lr}
    4e2e:	b082      	sub	sp, #8
    4e30:	af00      	add	r7, sp, #0
    4e32:	0002      	movs	r2, r0
    4e34:	1dfb      	adds	r3, r7, #7
    4e36:	701a      	strb	r2, [r3, #0]
    4e38:	1dbb      	adds	r3, r7, #6
    4e3a:	1c0a      	adds	r2, r1, #0
    4e3c:	701a      	strb	r2, [r3, #0]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    4e3e:	1dbb      	adds	r3, r7, #6
    4e40:	781b      	ldrb	r3, [r3, #0]
    4e42:	2220      	movs	r2, #32
    4e44:	409a      	lsls	r2, r3
    4e46:	1dfb      	adds	r3, r7, #7
    4e48:	781b      	ldrb	r3, [r3, #0]
    4e4a:	0011      	movs	r1, r2
    4e4c:	0018      	movs	r0, r3
    4e4e:	4b03      	ldr	r3, [pc, #12]	; (4e5c <_usbd_ep_ack_stall+0x30>)
    4e50:	4798      	blx	r3
}
    4e52:	46c0      	nop			; (mov r8, r8)
    4e54:	46bd      	mov	sp, r7
    4e56:	b002      	add	sp, #8
    4e58:	bd80      	pop	{r7, pc}
    4e5a:	46c0      	nop			; (mov r8, r8)
    4e5c:	00004c65 	.word	0x00004c65

00004e60 <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    4e60:	b590      	push	{r4, r7, lr}
    4e62:	b083      	sub	sp, #12
    4e64:	af00      	add	r7, sp, #0
    4e66:	0004      	movs	r4, r0
    4e68:	0008      	movs	r0, r1
    4e6a:	0011      	movs	r1, r2
    4e6c:	1dfb      	adds	r3, r7, #7
    4e6e:	1c22      	adds	r2, r4, #0
    4e70:	701a      	strb	r2, [r3, #0]
    4e72:	1dbb      	adds	r3, r7, #6
    4e74:	1c02      	adds	r2, r0, #0
    4e76:	701a      	strb	r2, [r3, #0]
    4e78:	1d7b      	adds	r3, r7, #5
    4e7a:	1c0a      	adds	r2, r1, #0
    4e7c:	701a      	strb	r2, [r3, #0]
	if (en) {
    4e7e:	1d7b      	adds	r3, r7, #5
    4e80:	781b      	ldrb	r3, [r3, #0]
    4e82:	2b00      	cmp	r3, #0
    4e84:	d00a      	beq.n	4e9c <_usbd_ep_int_stall_en+0x3c>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    4e86:	1dbb      	adds	r3, r7, #6
    4e88:	781b      	ldrb	r3, [r3, #0]
    4e8a:	2220      	movs	r2, #32
    4e8c:	409a      	lsls	r2, r3
    4e8e:	1dfb      	adds	r3, r7, #7
    4e90:	781b      	ldrb	r3, [r3, #0]
    4e92:	0011      	movs	r1, r2
    4e94:	0018      	movs	r0, r3
    4e96:	4b08      	ldr	r3, [pc, #32]	; (4eb8 <_usbd_ep_int_stall_en+0x58>)
    4e98:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    4e9a:	e009      	b.n	4eb0 <_usbd_ep_int_stall_en+0x50>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    4e9c:	1dbb      	adds	r3, r7, #6
    4e9e:	781b      	ldrb	r3, [r3, #0]
    4ea0:	2220      	movs	r2, #32
    4ea2:	409a      	lsls	r2, r3
    4ea4:	1dfb      	adds	r3, r7, #7
    4ea6:	781b      	ldrb	r3, [r3, #0]
    4ea8:	0011      	movs	r1, r2
    4eaa:	0018      	movs	r0, r3
    4eac:	4b03      	ldr	r3, [pc, #12]	; (4ebc <_usbd_ep_int_stall_en+0x5c>)
    4eae:	4798      	blx	r3
}
    4eb0:	46c0      	nop			; (mov r8, r8)
    4eb2:	46bd      	mov	sp, r7
    4eb4:	b003      	add	sp, #12
    4eb6:	bd90      	pop	{r4, r7, pc}
    4eb8:	00004c95 	.word	0x00004c95
    4ebc:	00004cc5 	.word	0x00004cc5

00004ec0 <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    4ec0:	b580      	push	{r7, lr}
    4ec2:	b082      	sub	sp, #8
    4ec4:	af00      	add	r7, sp, #0
    4ec6:	0002      	movs	r2, r0
    4ec8:	1dfb      	adds	r3, r7, #7
    4eca:	701a      	strb	r2, [r3, #0]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    4ecc:	1dfb      	adds	r3, r7, #7
    4ece:	781b      	ldrb	r3, [r3, #0]
    4ed0:	4a04      	ldr	r2, [pc, #16]	; (4ee4 <_usbd_ep_stop_setup+0x24>)
    4ed2:	0019      	movs	r1, r3
    4ed4:	0010      	movs	r0, r2
    4ed6:	4b04      	ldr	r3, [pc, #16]	; (4ee8 <_usbd_ep_stop_setup+0x28>)
    4ed8:	4798      	blx	r3
}
    4eda:	46c0      	nop			; (mov r8, r8)
    4edc:	46bd      	mov	sp, r7
    4ede:	b002      	add	sp, #8
    4ee0:	bd80      	pop	{r7, pc}
    4ee2:	46c0      	nop			; (mov r8, r8)
    4ee4:	41005000 	.word	0x41005000
    4ee8:	0000479f 	.word	0x0000479f

00004eec <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    4eec:	b580      	push	{r7, lr}
    4eee:	b082      	sub	sp, #8
    4ef0:	af00      	add	r7, sp, #0
    4ef2:	0002      	movs	r2, r0
    4ef4:	1dfb      	adds	r3, r7, #7
    4ef6:	701a      	strb	r2, [r3, #0]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    4ef8:	1dfb      	adds	r3, r7, #7
    4efa:	781b      	ldrb	r3, [r3, #0]
    4efc:	4806      	ldr	r0, [pc, #24]	; (4f18 <_usbd_ep_is_setup+0x2c>)
    4efe:	2210      	movs	r2, #16
    4f00:	0019      	movs	r1, r3
    4f02:	4b06      	ldr	r3, [pc, #24]	; (4f1c <_usbd_ep_is_setup+0x30>)
    4f04:	4798      	blx	r3
    4f06:	0003      	movs	r3, r0
    4f08:	1e5a      	subs	r2, r3, #1
    4f0a:	4193      	sbcs	r3, r2
    4f0c:	b2db      	uxtb	r3, r3
}
    4f0e:	0018      	movs	r0, r3
    4f10:	46bd      	mov	sp, r7
    4f12:	b002      	add	sp, #8
    4f14:	bd80      	pop	{r7, pc}
    4f16:	46c0      	nop			; (mov r8, r8)
    4f18:	41005000 	.word	0x41005000
    4f1c:	00004665 	.word	0x00004665

00004f20 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    4f20:	b580      	push	{r7, lr}
    4f22:	b082      	sub	sp, #8
    4f24:	af00      	add	r7, sp, #0
    4f26:	0002      	movs	r2, r0
    4f28:	1dfb      	adds	r3, r7, #7
    4f2a:	701a      	strb	r2, [r3, #0]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    4f2c:	1dfb      	adds	r3, r7, #7
    4f2e:	781b      	ldrb	r3, [r3, #0]
    4f30:	2110      	movs	r1, #16
    4f32:	0018      	movs	r0, r3
    4f34:	4b02      	ldr	r3, [pc, #8]	; (4f40 <_usbd_ep_ack_setup+0x20>)
    4f36:	4798      	blx	r3
}
    4f38:	46c0      	nop			; (mov r8, r8)
    4f3a:	46bd      	mov	sp, r7
    4f3c:	b002      	add	sp, #8
    4f3e:	bd80      	pop	{r7, pc}
    4f40:	00004c65 	.word	0x00004c65

00004f44 <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    4f44:	b590      	push	{r4, r7, lr}
    4f46:	b083      	sub	sp, #12
    4f48:	af00      	add	r7, sp, #0
    4f4a:	0004      	movs	r4, r0
    4f4c:	0008      	movs	r0, r1
    4f4e:	0011      	movs	r1, r2
    4f50:	1dfb      	adds	r3, r7, #7
    4f52:	1c22      	adds	r2, r4, #0
    4f54:	701a      	strb	r2, [r3, #0]
    4f56:	1dbb      	adds	r3, r7, #6
    4f58:	1c02      	adds	r2, r0, #0
    4f5a:	701a      	strb	r2, [r3, #0]
    4f5c:	1d7b      	adds	r3, r7, #5
    4f5e:	1c0a      	adds	r2, r1, #0
    4f60:	701a      	strb	r2, [r3, #0]
	if (tgl) {
    4f62:	1d7b      	adds	r3, r7, #5
    4f64:	781b      	ldrb	r3, [r3, #0]
    4f66:	2b00      	cmp	r3, #0
    4f68:	d00c      	beq.n	4f84 <_usbd_ep_set_toggle+0x40>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    4f6a:	1dbb      	adds	r3, r7, #6
    4f6c:	781b      	ldrb	r3, [r3, #0]
    4f6e:	2201      	movs	r2, #1
    4f70:	409a      	lsls	r2, r3
    4f72:	0013      	movs	r3, r2
    4f74:	b2da      	uxtb	r2, r3
    4f76:	1dfb      	adds	r3, r7, #7
    4f78:	781b      	ldrb	r3, [r3, #0]
    4f7a:	480a      	ldr	r0, [pc, #40]	; (4fa4 <_usbd_ep_set_toggle+0x60>)
    4f7c:	0019      	movs	r1, r3
    4f7e:	4b0a      	ldr	r3, [pc, #40]	; (4fa8 <_usbd_ep_set_toggle+0x64>)
    4f80:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    4f82:	e00b      	b.n	4f9c <_usbd_ep_set_toggle+0x58>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    4f84:	1dbb      	adds	r3, r7, #6
    4f86:	781b      	ldrb	r3, [r3, #0]
    4f88:	2201      	movs	r2, #1
    4f8a:	409a      	lsls	r2, r3
    4f8c:	0013      	movs	r3, r2
    4f8e:	b2da      	uxtb	r2, r3
    4f90:	1dfb      	adds	r3, r7, #7
    4f92:	781b      	ldrb	r3, [r3, #0]
    4f94:	4803      	ldr	r0, [pc, #12]	; (4fa4 <_usbd_ep_set_toggle+0x60>)
    4f96:	0019      	movs	r1, r3
    4f98:	4b04      	ldr	r3, [pc, #16]	; (4fac <_usbd_ep_set_toggle+0x68>)
    4f9a:	4798      	blx	r3
}
    4f9c:	46c0      	nop			; (mov r8, r8)
    4f9e:	46bd      	mov	sp, r7
    4fa0:	b003      	add	sp, #12
    4fa2:	bd90      	pop	{r4, r7, pc}
    4fa4:	41005000 	.word	0x41005000
    4fa8:	0000470f 	.word	0x0000470f
    4fac:	0000476b 	.word	0x0000476b

00004fb0 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    4fb0:	b580      	push	{r7, lr}
    4fb2:	b082      	sub	sp, #8
    4fb4:	af00      	add	r7, sp, #0
    4fb6:	0002      	movs	r2, r0
    4fb8:	1dfb      	adds	r3, r7, #7
    4fba:	701a      	strb	r2, [r3, #0]
    4fbc:	1dbb      	adds	r3, r7, #6
    4fbe:	1c0a      	adds	r2, r1, #0
    4fc0:	701a      	strb	r2, [r3, #0]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    4fc2:	1dbb      	adds	r3, r7, #6
    4fc4:	781b      	ldrb	r3, [r3, #0]
    4fc6:	2201      	movs	r2, #1
    4fc8:	409a      	lsls	r2, r3
    4fca:	1dfb      	adds	r3, r7, #7
    4fcc:	781b      	ldrb	r3, [r3, #0]
    4fce:	0011      	movs	r1, r2
    4fd0:	0018      	movs	r0, r3
    4fd2:	4b03      	ldr	r3, [pc, #12]	; (4fe0 <_usbd_ep_ack_io_cpt+0x30>)
    4fd4:	4798      	blx	r3
}
    4fd6:	46c0      	nop			; (mov r8, r8)
    4fd8:	46bd      	mov	sp, r7
    4fda:	b002      	add	sp, #8
    4fdc:	bd80      	pop	{r7, pc}
    4fde:	46c0      	nop			; (mov r8, r8)
    4fe0:	00004c65 	.word	0x00004c65

00004fe4 <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    4fe4:	b580      	push	{r7, lr}
    4fe6:	b084      	sub	sp, #16
    4fe8:	af00      	add	r7, sp, #0
    4fea:	603a      	str	r2, [r7, #0]
    4fec:	1dfb      	adds	r3, r7, #7
    4fee:	1c02      	adds	r2, r0, #0
    4ff0:	701a      	strb	r2, [r3, #0]
    4ff2:	1dbb      	adds	r3, r7, #6
    4ff4:	1c0a      	adds	r2, r1, #0
    4ff6:	701a      	strb	r2, [r3, #0]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    4ff8:	1dfb      	adds	r3, r7, #7
    4ffa:	781a      	ldrb	r2, [r3, #0]
    4ffc:	1dbb      	adds	r3, r7, #6
    4ffe:	781b      	ldrb	r3, [r3, #0]
    5000:	0052      	lsls	r2, r2, #1
    5002:	18d3      	adds	r3, r2, r3
    5004:	011a      	lsls	r2, r3, #4
    5006:	4b05      	ldr	r3, [pc, #20]	; (501c <_usbd_ep_set_buf+0x38>)
    5008:	18d3      	adds	r3, r2, r3
    500a:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    500c:	68fb      	ldr	r3, [r7, #12]
    500e:	683a      	ldr	r2, [r7, #0]
    5010:	601a      	str	r2, [r3, #0]
}
    5012:	46c0      	nop			; (mov r8, r8)
    5014:	46bd      	mov	sp, r7
    5016:	b004      	add	sp, #16
    5018:	bd80      	pop	{r7, pc}
    501a:	46c0      	nop			; (mov r8, r8)
    501c:	200010f0 	.word	0x200010f0

00005020 <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    5020:	b590      	push	{r4, r7, lr}
    5022:	b085      	sub	sp, #20
    5024:	af00      	add	r7, sp, #0
    5026:	0004      	movs	r4, r0
    5028:	0008      	movs	r0, r1
    502a:	0011      	movs	r1, r2
    502c:	1dfb      	adds	r3, r7, #7
    502e:	1c22      	adds	r2, r4, #0
    5030:	701a      	strb	r2, [r3, #0]
    5032:	1dbb      	adds	r3, r7, #6
    5034:	1c02      	adds	r2, r0, #0
    5036:	701a      	strb	r2, [r3, #0]
    5038:	1d3b      	adds	r3, r7, #4
    503a:	1c0a      	adds	r2, r1, #0
    503c:	801a      	strh	r2, [r3, #0]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    503e:	1dfb      	adds	r3, r7, #7
    5040:	781a      	ldrb	r2, [r3, #0]
    5042:	1dbb      	adds	r3, r7, #6
    5044:	781b      	ldrb	r3, [r3, #0]
    5046:	0052      	lsls	r2, r2, #1
    5048:	18d3      	adds	r3, r2, r3
    504a:	011a      	lsls	r2, r3, #4
    504c:	4b0a      	ldr	r3, [pc, #40]	; (5078 <_usbd_ep_set_in_count+0x58>)
    504e:	18d3      	adds	r3, r2, r3
    5050:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    5052:	1d3b      	adds	r3, r7, #4
    5054:	881b      	ldrh	r3, [r3, #0]
    5056:	049b      	lsls	r3, r3, #18
    5058:	0c9b      	lsrs	r3, r3, #18
    505a:	b299      	uxth	r1, r3
    505c:	68fb      	ldr	r3, [r7, #12]
    505e:	685a      	ldr	r2, [r3, #4]
    5060:	0489      	lsls	r1, r1, #18
    5062:	0c89      	lsrs	r1, r1, #18
    5064:	0389      	lsls	r1, r1, #14
    5066:	4805      	ldr	r0, [pc, #20]	; (507c <_usbd_ep_set_in_count+0x5c>)
    5068:	4002      	ands	r2, r0
    506a:	430a      	orrs	r2, r1
    506c:	605a      	str	r2, [r3, #4]
}
    506e:	46c0      	nop			; (mov r8, r8)
    5070:	46bd      	mov	sp, r7
    5072:	b005      	add	sp, #20
    5074:	bd90      	pop	{r4, r7, pc}
    5076:	46c0      	nop			; (mov r8, r8)
    5078:	200010f0 	.word	0x200010f0
    507c:	f0003fff 	.word	0xf0003fff

00005080 <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    5080:	b590      	push	{r4, r7, lr}
    5082:	b085      	sub	sp, #20
    5084:	af00      	add	r7, sp, #0
    5086:	0004      	movs	r4, r0
    5088:	0008      	movs	r0, r1
    508a:	0011      	movs	r1, r2
    508c:	1dfb      	adds	r3, r7, #7
    508e:	1c22      	adds	r2, r4, #0
    5090:	701a      	strb	r2, [r3, #0]
    5092:	1dbb      	adds	r3, r7, #6
    5094:	1c02      	adds	r2, r0, #0
    5096:	701a      	strb	r2, [r3, #0]
    5098:	1d3b      	adds	r3, r7, #4
    509a:	1c0a      	adds	r2, r1, #0
    509c:	801a      	strh	r2, [r3, #0]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    509e:	1dfb      	adds	r3, r7, #7
    50a0:	781a      	ldrb	r2, [r3, #0]
    50a2:	1dbb      	adds	r3, r7, #6
    50a4:	781b      	ldrb	r3, [r3, #0]
    50a6:	0052      	lsls	r2, r2, #1
    50a8:	18d3      	adds	r3, r2, r3
    50aa:	011a      	lsls	r2, r3, #4
    50ac:	4b09      	ldr	r3, [pc, #36]	; (50d4 <_usbd_ep_set_in_size+0x54>)
    50ae:	18d3      	adds	r3, r2, r3
    50b0:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    50b2:	1d3b      	adds	r3, r7, #4
    50b4:	881b      	ldrh	r3, [r3, #0]
    50b6:	049b      	lsls	r3, r3, #18
    50b8:	0c9b      	lsrs	r3, r3, #18
    50ba:	b299      	uxth	r1, r3
    50bc:	68fb      	ldr	r3, [r7, #12]
    50be:	685a      	ldr	r2, [r3, #4]
    50c0:	0489      	lsls	r1, r1, #18
    50c2:	0c89      	lsrs	r1, r1, #18
    50c4:	0b92      	lsrs	r2, r2, #14
    50c6:	0392      	lsls	r2, r2, #14
    50c8:	430a      	orrs	r2, r1
    50ca:	605a      	str	r2, [r3, #4]
}
    50cc:	46c0      	nop			; (mov r8, r8)
    50ce:	46bd      	mov	sp, r7
    50d0:	b005      	add	sp, #20
    50d2:	bd90      	pop	{r4, r7, pc}
    50d4:	200010f0 	.word	0x200010f0

000050d8 <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    50d8:	b590      	push	{r4, r7, lr}
    50da:	b085      	sub	sp, #20
    50dc:	af00      	add	r7, sp, #0
    50de:	0004      	movs	r4, r0
    50e0:	0008      	movs	r0, r1
    50e2:	0011      	movs	r1, r2
    50e4:	1dfb      	adds	r3, r7, #7
    50e6:	1c22      	adds	r2, r4, #0
    50e8:	701a      	strb	r2, [r3, #0]
    50ea:	1dbb      	adds	r3, r7, #6
    50ec:	1c02      	adds	r2, r0, #0
    50ee:	701a      	strb	r2, [r3, #0]
    50f0:	1d3b      	adds	r3, r7, #4
    50f2:	1c0a      	adds	r2, r1, #0
    50f4:	801a      	strh	r2, [r3, #0]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    50f6:	1dfb      	adds	r3, r7, #7
    50f8:	781a      	ldrb	r2, [r3, #0]
    50fa:	1dbb      	adds	r3, r7, #6
    50fc:	781b      	ldrb	r3, [r3, #0]
    50fe:	0052      	lsls	r2, r2, #1
    5100:	18d3      	adds	r3, r2, r3
    5102:	011a      	lsls	r2, r3, #4
    5104:	4b09      	ldr	r3, [pc, #36]	; (512c <_usbd_ep_set_out_count+0x54>)
    5106:	18d3      	adds	r3, r2, r3
    5108:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    510a:	1d3b      	adds	r3, r7, #4
    510c:	881b      	ldrh	r3, [r3, #0]
    510e:	049b      	lsls	r3, r3, #18
    5110:	0c9b      	lsrs	r3, r3, #18
    5112:	b299      	uxth	r1, r3
    5114:	68fb      	ldr	r3, [r7, #12]
    5116:	685a      	ldr	r2, [r3, #4]
    5118:	0489      	lsls	r1, r1, #18
    511a:	0c89      	lsrs	r1, r1, #18
    511c:	0b92      	lsrs	r2, r2, #14
    511e:	0392      	lsls	r2, r2, #14
    5120:	430a      	orrs	r2, r1
    5122:	605a      	str	r2, [r3, #4]
}
    5124:	46c0      	nop			; (mov r8, r8)
    5126:	46bd      	mov	sp, r7
    5128:	b005      	add	sp, #20
    512a:	bd90      	pop	{r4, r7, pc}
    512c:	200010f0 	.word	0x200010f0

00005130 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    5130:	b590      	push	{r4, r7, lr}
    5132:	b085      	sub	sp, #20
    5134:	af00      	add	r7, sp, #0
    5136:	0004      	movs	r4, r0
    5138:	0008      	movs	r0, r1
    513a:	0011      	movs	r1, r2
    513c:	1dfb      	adds	r3, r7, #7
    513e:	1c22      	adds	r2, r4, #0
    5140:	701a      	strb	r2, [r3, #0]
    5142:	1dbb      	adds	r3, r7, #6
    5144:	1c02      	adds	r2, r0, #0
    5146:	701a      	strb	r2, [r3, #0]
    5148:	1d3b      	adds	r3, r7, #4
    514a:	1c0a      	adds	r2, r1, #0
    514c:	801a      	strh	r2, [r3, #0]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    514e:	1dfb      	adds	r3, r7, #7
    5150:	781a      	ldrb	r2, [r3, #0]
    5152:	1dbb      	adds	r3, r7, #6
    5154:	781b      	ldrb	r3, [r3, #0]
    5156:	0052      	lsls	r2, r2, #1
    5158:	18d3      	adds	r3, r2, r3
    515a:	011a      	lsls	r2, r3, #4
    515c:	4b0a      	ldr	r3, [pc, #40]	; (5188 <_usbd_ep_set_out_size+0x58>)
    515e:	18d3      	adds	r3, r2, r3
    5160:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    5162:	1d3b      	adds	r3, r7, #4
    5164:	881b      	ldrh	r3, [r3, #0]
    5166:	049b      	lsls	r3, r3, #18
    5168:	0c9b      	lsrs	r3, r3, #18
    516a:	b299      	uxth	r1, r3
    516c:	68fb      	ldr	r3, [r7, #12]
    516e:	685a      	ldr	r2, [r3, #4]
    5170:	0489      	lsls	r1, r1, #18
    5172:	0c89      	lsrs	r1, r1, #18
    5174:	0389      	lsls	r1, r1, #14
    5176:	4805      	ldr	r0, [pc, #20]	; (518c <_usbd_ep_set_out_size+0x5c>)
    5178:	4002      	ands	r2, r0
    517a:	430a      	orrs	r2, r1
    517c:	605a      	str	r2, [r3, #4]
}
    517e:	46c0      	nop			; (mov r8, r8)
    5180:	46bd      	mov	sp, r7
    5182:	b005      	add	sp, #20
    5184:	bd90      	pop	{r4, r7, pc}
    5186:	46c0      	nop			; (mov r8, r8)
    5188:	200010f0 	.word	0x200010f0
    518c:	f0003fff 	.word	0xf0003fff

00005190 <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    5190:	b580      	push	{r7, lr}
    5192:	b084      	sub	sp, #16
    5194:	af00      	add	r7, sp, #0
    5196:	60ba      	str	r2, [r7, #8]
    5198:	607b      	str	r3, [r7, #4]
    519a:	230f      	movs	r3, #15
    519c:	18fb      	adds	r3, r7, r3
    519e:	1c02      	adds	r2, r0, #0
    51a0:	701a      	strb	r2, [r3, #0]
    51a2:	230e      	movs	r3, #14
    51a4:	18fb      	adds	r3, r7, r3
    51a6:	1c0a      	adds	r2, r1, #0
    51a8:	701a      	strb	r2, [r3, #0]
	_usbd_ep_set_in_size(epn, bank_n, size);
    51aa:	68bb      	ldr	r3, [r7, #8]
    51ac:	b29a      	uxth	r2, r3
    51ae:	230e      	movs	r3, #14
    51b0:	18fb      	adds	r3, r7, r3
    51b2:	7819      	ldrb	r1, [r3, #0]
    51b4:	230f      	movs	r3, #15
    51b6:	18fb      	adds	r3, r7, r3
    51b8:	781b      	ldrb	r3, [r3, #0]
    51ba:	0018      	movs	r0, r3
    51bc:	4b08      	ldr	r3, [pc, #32]	; (51e0 <_usbd_ep_set_in_trans+0x50>)
    51be:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    51c0:	687b      	ldr	r3, [r7, #4]
    51c2:	b29a      	uxth	r2, r3
    51c4:	230e      	movs	r3, #14
    51c6:	18fb      	adds	r3, r7, r3
    51c8:	7819      	ldrb	r1, [r3, #0]
    51ca:	230f      	movs	r3, #15
    51cc:	18fb      	adds	r3, r7, r3
    51ce:	781b      	ldrb	r3, [r3, #0]
    51d0:	0018      	movs	r0, r3
    51d2:	4b04      	ldr	r3, [pc, #16]	; (51e4 <_usbd_ep_set_in_trans+0x54>)
    51d4:	4798      	blx	r3
}
    51d6:	46c0      	nop			; (mov r8, r8)
    51d8:	46bd      	mov	sp, r7
    51da:	b004      	add	sp, #16
    51dc:	bd80      	pop	{r7, pc}
    51de:	46c0      	nop			; (mov r8, r8)
    51e0:	00005081 	.word	0x00005081
    51e4:	00005021 	.word	0x00005021

000051e8 <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    51e8:	b580      	push	{r7, lr}
    51ea:	b084      	sub	sp, #16
    51ec:	af00      	add	r7, sp, #0
    51ee:	60ba      	str	r2, [r7, #8]
    51f0:	607b      	str	r3, [r7, #4]
    51f2:	230f      	movs	r3, #15
    51f4:	18fb      	adds	r3, r7, r3
    51f6:	1c02      	adds	r2, r0, #0
    51f8:	701a      	strb	r2, [r3, #0]
    51fa:	230e      	movs	r3, #14
    51fc:	18fb      	adds	r3, r7, r3
    51fe:	1c0a      	adds	r2, r1, #0
    5200:	701a      	strb	r2, [r3, #0]
	_usbd_ep_set_out_size(epn, bank_n, size);
    5202:	68bb      	ldr	r3, [r7, #8]
    5204:	b29a      	uxth	r2, r3
    5206:	230e      	movs	r3, #14
    5208:	18fb      	adds	r3, r7, r3
    520a:	7819      	ldrb	r1, [r3, #0]
    520c:	230f      	movs	r3, #15
    520e:	18fb      	adds	r3, r7, r3
    5210:	781b      	ldrb	r3, [r3, #0]
    5212:	0018      	movs	r0, r3
    5214:	4b08      	ldr	r3, [pc, #32]	; (5238 <_usbd_ep_set_out_trans+0x50>)
    5216:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    5218:	687b      	ldr	r3, [r7, #4]
    521a:	b29a      	uxth	r2, r3
    521c:	230e      	movs	r3, #14
    521e:	18fb      	adds	r3, r7, r3
    5220:	7819      	ldrb	r1, [r3, #0]
    5222:	230f      	movs	r3, #15
    5224:	18fb      	adds	r3, r7, r3
    5226:	781b      	ldrb	r3, [r3, #0]
    5228:	0018      	movs	r0, r3
    522a:	4b04      	ldr	r3, [pc, #16]	; (523c <_usbd_ep_set_out_trans+0x54>)
    522c:	4798      	blx	r3
}
    522e:	46c0      	nop			; (mov r8, r8)
    5230:	46bd      	mov	sp, r7
    5232:	b004      	add	sp, #16
    5234:	bd80      	pop	{r7, pc}
    5236:	46c0      	nop			; (mov r8, r8)
    5238:	00005131 	.word	0x00005131
    523c:	000050d9 	.word	0x000050d9

00005240 <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    5240:	b580      	push	{r7, lr}
    5242:	b084      	sub	sp, #16
    5244:	af00      	add	r7, sp, #0
    5246:	0002      	movs	r2, r0
    5248:	1dfb      	adds	r3, r7, #7
    524a:	701a      	strb	r2, [r3, #0]
    524c:	1dbb      	adds	r3, r7, #6
    524e:	1c0a      	adds	r2, r1, #0
    5250:	701a      	strb	r2, [r3, #0]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    5252:	1dfb      	adds	r3, r7, #7
    5254:	781a      	ldrb	r2, [r3, #0]
    5256:	1dbb      	adds	r3, r7, #6
    5258:	781b      	ldrb	r3, [r3, #0]
    525a:	0052      	lsls	r2, r2, #1
    525c:	18d3      	adds	r3, r2, r3
    525e:	011a      	lsls	r2, r3, #4
    5260:	4b04      	ldr	r3, [pc, #16]	; (5274 <_usbd_ep_clear_bank_status+0x34>)
    5262:	18d3      	adds	r3, r2, r3
    5264:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    5266:	68fb      	ldr	r3, [r7, #12]
    5268:	2200      	movs	r2, #0
    526a:	729a      	strb	r2, [r3, #10]
}
    526c:	46c0      	nop			; (mov r8, r8)
    526e:	46bd      	mov	sp, r7
    5270:	b004      	add	sp, #16
    5272:	bd80      	pop	{r7, pc}
    5274:	200010f0 	.word	0x200010f0

00005278 <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    5278:	b590      	push	{r4, r7, lr}
    527a:	b083      	sub	sp, #12
    527c:	af00      	add	r7, sp, #0
    527e:	0004      	movs	r4, r0
    5280:	0008      	movs	r0, r1
    5282:	0011      	movs	r1, r2
    5284:	1dfb      	adds	r3, r7, #7
    5286:	1c22      	adds	r2, r4, #0
    5288:	701a      	strb	r2, [r3, #0]
    528a:	1dbb      	adds	r3, r7, #6
    528c:	1c02      	adds	r2, r0, #0
    528e:	701a      	strb	r2, [r3, #0]
    5290:	1d7b      	adds	r3, r7, #5
    5292:	1c0a      	adds	r2, r1, #0
    5294:	701a      	strb	r2, [r3, #0]
	if (rdy) {
    5296:	1d7b      	adds	r3, r7, #5
    5298:	781b      	ldrb	r3, [r3, #0]
    529a:	2b00      	cmp	r3, #0
    529c:	d00c      	beq.n	52b8 <_usbd_ep_set_in_rdy+0x40>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    529e:	1dbb      	adds	r3, r7, #6
    52a0:	781b      	ldrb	r3, [r3, #0]
    52a2:	2240      	movs	r2, #64	; 0x40
    52a4:	409a      	lsls	r2, r3
    52a6:	0013      	movs	r3, r2
    52a8:	b2da      	uxtb	r2, r3
    52aa:	1dfb      	adds	r3, r7, #7
    52ac:	781b      	ldrb	r3, [r3, #0]
    52ae:	480a      	ldr	r0, [pc, #40]	; (52d8 <_usbd_ep_set_in_rdy+0x60>)
    52b0:	0019      	movs	r1, r3
    52b2:	4b0a      	ldr	r3, [pc, #40]	; (52dc <_usbd_ep_set_in_rdy+0x64>)
    52b4:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    52b6:	e00b      	b.n	52d0 <_usbd_ep_set_in_rdy+0x58>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    52b8:	1dbb      	adds	r3, r7, #6
    52ba:	781b      	ldrb	r3, [r3, #0]
    52bc:	2240      	movs	r2, #64	; 0x40
    52be:	409a      	lsls	r2, r3
    52c0:	0013      	movs	r3, r2
    52c2:	b2da      	uxtb	r2, r3
    52c4:	1dfb      	adds	r3, r7, #7
    52c6:	781b      	ldrb	r3, [r3, #0]
    52c8:	4803      	ldr	r0, [pc, #12]	; (52d8 <_usbd_ep_set_in_rdy+0x60>)
    52ca:	0019      	movs	r1, r3
    52cc:	4b04      	ldr	r3, [pc, #16]	; (52e0 <_usbd_ep_set_in_rdy+0x68>)
    52ce:	4798      	blx	r3
}
    52d0:	46c0      	nop			; (mov r8, r8)
    52d2:	46bd      	mov	sp, r7
    52d4:	b003      	add	sp, #12
    52d6:	bd90      	pop	{r4, r7, pc}
    52d8:	41005000 	.word	0x41005000
    52dc:	0000470f 	.word	0x0000470f
    52e0:	0000476b 	.word	0x0000476b

000052e4 <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    52e4:	b590      	push	{r4, r7, lr}
    52e6:	b083      	sub	sp, #12
    52e8:	af00      	add	r7, sp, #0
    52ea:	0004      	movs	r4, r0
    52ec:	0008      	movs	r0, r1
    52ee:	0011      	movs	r1, r2
    52f0:	1dfb      	adds	r3, r7, #7
    52f2:	1c22      	adds	r2, r4, #0
    52f4:	701a      	strb	r2, [r3, #0]
    52f6:	1dbb      	adds	r3, r7, #6
    52f8:	1c02      	adds	r2, r0, #0
    52fa:	701a      	strb	r2, [r3, #0]
    52fc:	1d7b      	adds	r3, r7, #5
    52fe:	1c0a      	adds	r2, r1, #0
    5300:	701a      	strb	r2, [r3, #0]
	if (rdy) {
    5302:	1d7b      	adds	r3, r7, #5
    5304:	781b      	ldrb	r3, [r3, #0]
    5306:	2b00      	cmp	r3, #0
    5308:	d00c      	beq.n	5324 <_usbd_ep_set_out_rdy+0x40>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    530a:	1dbb      	adds	r3, r7, #6
    530c:	781b      	ldrb	r3, [r3, #0]
    530e:	2240      	movs	r2, #64	; 0x40
    5310:	409a      	lsls	r2, r3
    5312:	0013      	movs	r3, r2
    5314:	b2da      	uxtb	r2, r3
    5316:	1dfb      	adds	r3, r7, #7
    5318:	781b      	ldrb	r3, [r3, #0]
    531a:	480a      	ldr	r0, [pc, #40]	; (5344 <_usbd_ep_set_out_rdy+0x60>)
    531c:	0019      	movs	r1, r3
    531e:	4b0a      	ldr	r3, [pc, #40]	; (5348 <_usbd_ep_set_out_rdy+0x64>)
    5320:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    5322:	e00b      	b.n	533c <_usbd_ep_set_out_rdy+0x58>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    5324:	1dbb      	adds	r3, r7, #6
    5326:	781b      	ldrb	r3, [r3, #0]
    5328:	2240      	movs	r2, #64	; 0x40
    532a:	409a      	lsls	r2, r3
    532c:	0013      	movs	r3, r2
    532e:	b2da      	uxtb	r2, r3
    5330:	1dfb      	adds	r3, r7, #7
    5332:	781b      	ldrb	r3, [r3, #0]
    5334:	4803      	ldr	r0, [pc, #12]	; (5344 <_usbd_ep_set_out_rdy+0x60>)
    5336:	0019      	movs	r1, r3
    5338:	4b04      	ldr	r3, [pc, #16]	; (534c <_usbd_ep_set_out_rdy+0x68>)
    533a:	4798      	blx	r3
}
    533c:	46c0      	nop			; (mov r8, r8)
    533e:	46bd      	mov	sp, r7
    5340:	b003      	add	sp, #12
    5342:	bd90      	pop	{r4, r7, pc}
    5344:	41005000 	.word	0x41005000
    5348:	0000476b 	.word	0x0000476b
    534c:	0000470f 	.word	0x0000470f

00005350 <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    5350:	b580      	push	{r7, lr}
    5352:	b082      	sub	sp, #8
    5354:	af00      	add	r7, sp, #0
    5356:	0002      	movs	r2, r0
    5358:	1dbb      	adds	r3, r7, #6
    535a:	801a      	strh	r2, [r3, #0]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    535c:	1dbb      	adds	r3, r7, #6
    535e:	881a      	ldrh	r2, [r3, #0]
    5360:	2380      	movs	r3, #128	; 0x80
    5362:	009b      	lsls	r3, r3, #2
    5364:	429a      	cmp	r2, r3
    5366:	d827      	bhi.n	53b8 <_usbd_ep_pcksize_size+0x68>
    5368:	1dbb      	adds	r3, r7, #6
    536a:	881a      	ldrh	r2, [r3, #0]
    536c:	2380      	movs	r3, #128	; 0x80
    536e:	005b      	lsls	r3, r3, #1
    5370:	429a      	cmp	r2, r3
    5372:	d81f      	bhi.n	53b4 <_usbd_ep_pcksize_size+0x64>
    5374:	1dbb      	adds	r3, r7, #6
    5376:	881b      	ldrh	r3, [r3, #0]
    5378:	2b80      	cmp	r3, #128	; 0x80
    537a:	d819      	bhi.n	53b0 <_usbd_ep_pcksize_size+0x60>
    537c:	1dbb      	adds	r3, r7, #6
    537e:	881b      	ldrh	r3, [r3, #0]
    5380:	2b40      	cmp	r3, #64	; 0x40
    5382:	d813      	bhi.n	53ac <_usbd_ep_pcksize_size+0x5c>
    5384:	1dbb      	adds	r3, r7, #6
    5386:	881b      	ldrh	r3, [r3, #0]
    5388:	2b20      	cmp	r3, #32
    538a:	d80d      	bhi.n	53a8 <_usbd_ep_pcksize_size+0x58>
    538c:	1dbb      	adds	r3, r7, #6
    538e:	881b      	ldrh	r3, [r3, #0]
    5390:	2b10      	cmp	r3, #16
    5392:	d807      	bhi.n	53a4 <_usbd_ep_pcksize_size+0x54>
    5394:	1dbb      	adds	r3, r7, #6
    5396:	881b      	ldrh	r3, [r3, #0]
    5398:	2208      	movs	r2, #8
    539a:	429a      	cmp	r2, r3
    539c:	419b      	sbcs	r3, r3
    539e:	425b      	negs	r3, r3
    53a0:	b2db      	uxtb	r3, r3
    53a2:	e00a      	b.n	53ba <_usbd_ep_pcksize_size+0x6a>
    53a4:	2302      	movs	r3, #2
    53a6:	e008      	b.n	53ba <_usbd_ep_pcksize_size+0x6a>
    53a8:	2303      	movs	r3, #3
    53aa:	e006      	b.n	53ba <_usbd_ep_pcksize_size+0x6a>
    53ac:	2304      	movs	r3, #4
    53ae:	e004      	b.n	53ba <_usbd_ep_pcksize_size+0x6a>
    53b0:	2305      	movs	r3, #5
    53b2:	e002      	b.n	53ba <_usbd_ep_pcksize_size+0x6a>
    53b4:	2306      	movs	r3, #6
    53b6:	e000      	b.n	53ba <_usbd_ep_pcksize_size+0x6a>
    53b8:	2307      	movs	r3, #7
}
    53ba:	0018      	movs	r0, r3
    53bc:	46bd      	mov	sp, r7
    53be:	b002      	add	sp, #8
    53c0:	bd80      	pop	{r7, pc}
	...

000053c4 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    53c4:	b580      	push	{r7, lr}
    53c6:	b084      	sub	sp, #16
    53c8:	af00      	add	r7, sp, #0
    53ca:	0002      	movs	r2, r0
    53cc:	1dfb      	adds	r3, r7, #7
    53ce:	701a      	strb	r2, [r3, #0]
    53d0:	1dbb      	adds	r3, r7, #6
    53d2:	1c0a      	adds	r2, r1, #0
    53d4:	701a      	strb	r2, [r3, #0]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    53d6:	1dfb      	adds	r3, r7, #7
    53d8:	781b      	ldrb	r3, [r3, #0]
    53da:	2b00      	cmp	r3, #0
    53dc:	d00b      	beq.n	53f6 <_usb_d_dev_ept+0x32>
    53de:	1dbb      	adds	r3, r7, #6
    53e0:	781b      	ldrb	r3, [r3, #0]
    53e2:	2b00      	cmp	r3, #0
    53e4:	d004      	beq.n	53f0 <_usb_d_dev_ept+0x2c>
    53e6:	1dfb      	adds	r3, r7, #7
    53e8:	781b      	ldrb	r3, [r3, #0]
    53ea:	3307      	adds	r3, #7
    53ec:	b2db      	uxtb	r3, r3
    53ee:	e003      	b.n	53f8 <_usb_d_dev_ept+0x34>
    53f0:	1dfb      	adds	r3, r7, #7
    53f2:	781b      	ldrb	r3, [r3, #0]
    53f4:	e000      	b.n	53f8 <_usb_d_dev_ept+0x34>
    53f6:	2300      	movs	r3, #0
    53f8:	220f      	movs	r2, #15
    53fa:	18ba      	adds	r2, r7, r2
    53fc:	7013      	strb	r3, [r2, #0]
	return &dev_inst.ep[ep_index];
    53fe:	230f      	movs	r3, #15
    5400:	18fb      	adds	r3, r7, r3
    5402:	781a      	ldrb	r2, [r3, #0]
    5404:	0013      	movs	r3, r2
    5406:	009b      	lsls	r3, r3, #2
    5408:	189b      	adds	r3, r3, r2
    540a:	009b      	lsls	r3, r3, #2
    540c:	3310      	adds	r3, #16
    540e:	001a      	movs	r2, r3
    5410:	4b03      	ldr	r3, [pc, #12]	; (5420 <_usb_d_dev_ept+0x5c>)
    5412:	18d3      	adds	r3, r2, r3
    5414:	3304      	adds	r3, #4
}
    5416:	0018      	movs	r0, r3
    5418:	46bd      	mov	sp, r7
    541a:	b004      	add	sp, #16
    541c:	bd80      	pop	{r7, pc}
    541e:	46c0      	nop			; (mov r8, r8)
    5420:	20000f88 	.word	0x20000f88

00005424 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    5424:	b580      	push	{r7, lr}
    5426:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    5428:	4b05      	ldr	r3, [pc, #20]	; (5440 <_usb_d_dev_sof+0x1c>)
    542a:	2104      	movs	r1, #4
    542c:	0018      	movs	r0, r3
    542e:	4b05      	ldr	r3, [pc, #20]	; (5444 <_usb_d_dev_sof+0x20>)
    5430:	4798      	blx	r3
	dev_inst.callbacks.sof();
    5432:	4b05      	ldr	r3, [pc, #20]	; (5448 <_usb_d_dev_sof+0x24>)
    5434:	681b      	ldr	r3, [r3, #0]
    5436:	4798      	blx	r3
}
    5438:	46c0      	nop			; (mov r8, r8)
    543a:	46bd      	mov	sp, r7
    543c:	bd80      	pop	{r7, pc}
    543e:	46c0      	nop			; (mov r8, r8)
    5440:	41005000 	.word	0x41005000
    5444:	0000491f 	.word	0x0000491f
    5448:	20000f88 	.word	0x20000f88

0000544c <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    544c:	b580      	push	{r7, lr}
    544e:	b084      	sub	sp, #16
    5450:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    5452:	2300      	movs	r3, #0
    5454:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    5456:	4a22      	ldr	r2, [pc, #136]	; (54e0 <_usb_d_dev_lpmsusp+0x94>)
    5458:	4b22      	ldr	r3, [pc, #136]	; (54e4 <_usb_d_dev_lpmsusp+0x98>)
    545a:	0011      	movs	r1, r2
    545c:	0018      	movs	r0, r3
    545e:	4b22      	ldr	r3, [pc, #136]	; (54e8 <_usb_d_dev_lpmsusp+0x9c>)
    5460:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    5462:	4a1f      	ldr	r2, [pc, #124]	; (54e0 <_usb_d_dev_lpmsusp+0x94>)
    5464:	4b1f      	ldr	r3, [pc, #124]	; (54e4 <_usb_d_dev_lpmsusp+0x98>)
    5466:	0011      	movs	r1, r2
    5468:	0018      	movs	r0, r3
    546a:	4b20      	ldr	r3, [pc, #128]	; (54ec <_usb_d_dev_lpmsusp+0xa0>)
    546c:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    546e:	4b1d      	ldr	r3, [pc, #116]	; (54e4 <_usb_d_dev_lpmsusp+0x98>)
    5470:	2170      	movs	r1, #112	; 0x70
    5472:	0018      	movs	r0, r3
    5474:	4b1e      	ldr	r3, [pc, #120]	; (54f0 <_usb_d_dev_lpmsusp+0xa4>)
    5476:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    5478:	230f      	movs	r3, #15
    547a:	18fb      	adds	r3, r7, r3
    547c:	2200      	movs	r2, #0
    547e:	701a      	strb	r2, [r3, #0]
    5480:	e01e      	b.n	54c0 <_usb_d_dev_lpmsusp+0x74>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    5482:	230f      	movs	r3, #15
    5484:	18fb      	adds	r3, r7, r3
    5486:	781b      	ldrb	r3, [r3, #0]
    5488:	015a      	lsls	r2, r3, #5
    548a:	4b1a      	ldr	r3, [pc, #104]	; (54f4 <_usb_d_dev_lpmsusp+0xa8>)
    548c:	18d3      	adds	r3, r2, r3
    548e:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    5490:	687b      	ldr	r3, [r7, #4]
    5492:	891b      	ldrh	r3, [r3, #8]
    5494:	071b      	lsls	r3, r3, #28
    5496:	0f1b      	lsrs	r3, r3, #28
    5498:	b2db      	uxtb	r3, r3
    549a:	2b03      	cmp	r3, #3
    549c:	d109      	bne.n	54b2 <_usb_d_dev_lpmsusp+0x66>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    549e:	687b      	ldr	r3, [r7, #4]
    54a0:	891b      	ldrh	r3, [r3, #8]
    54a2:	045b      	lsls	r3, r3, #17
    54a4:	0d5b      	lsrs	r3, r3, #21
    54a6:	b29b      	uxth	r3, r3
    54a8:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    54aa:	687b      	ldr	r3, [r7, #4]
    54ac:	2200      	movs	r2, #0
    54ae:	811a      	strh	r2, [r3, #8]
			break;
    54b0:	e00b      	b.n	54ca <_usb_d_dev_lpmsusp+0x7e>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    54b2:	230f      	movs	r3, #15
    54b4:	18fb      	adds	r3, r7, r3
    54b6:	781a      	ldrb	r2, [r3, #0]
    54b8:	230f      	movs	r3, #15
    54ba:	18fb      	adds	r3, r7, r3
    54bc:	3201      	adds	r2, #1
    54be:	701a      	strb	r2, [r3, #0]
    54c0:	230f      	movs	r3, #15
    54c2:	18fb      	adds	r3, r7, r3
    54c4:	781b      	ldrb	r3, [r3, #0]
    54c6:	2b06      	cmp	r3, #6
    54c8:	d9db      	bls.n	5482 <_usb_d_dev_lpmsusp+0x36>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    54ca:	4b0b      	ldr	r3, [pc, #44]	; (54f8 <_usb_d_dev_lpmsusp+0xac>)
    54cc:	685b      	ldr	r3, [r3, #4]
    54ce:	68ba      	ldr	r2, [r7, #8]
    54d0:	0011      	movs	r1, r2
    54d2:	2003      	movs	r0, #3
    54d4:	4798      	blx	r3
}
    54d6:	46c0      	nop			; (mov r8, r8)
    54d8:	46bd      	mov	sp, r7
    54da:	b004      	add	sp, #16
    54dc:	bd80      	pop	{r7, pc}
    54de:	46c0      	nop			; (mov r8, r8)
    54e0:	00000201 	.word	0x00000201
    54e4:	41005000 	.word	0x41005000
    54e8:	0000491f 	.word	0x0000491f
    54ec:	00004971 	.word	0x00004971
    54f0:	0000493d 	.word	0x0000493d
    54f4:	200010f0 	.word	0x200010f0
    54f8:	20000f88 	.word	0x20000f88

000054fc <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    54fc:	b580      	push	{r7, lr}
    54fe:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    5500:	4b06      	ldr	r3, [pc, #24]	; (551c <_usb_d_dev_ramerr+0x20>)
    5502:	2180      	movs	r1, #128	; 0x80
    5504:	0018      	movs	r0, r3
    5506:	4b06      	ldr	r3, [pc, #24]	; (5520 <_usb_d_dev_ramerr+0x24>)
    5508:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    550a:	4b06      	ldr	r3, [pc, #24]	; (5524 <_usb_d_dev_ramerr+0x28>)
    550c:	685b      	ldr	r3, [r3, #4]
    550e:	2100      	movs	r1, #0
    5510:	2005      	movs	r0, #5
    5512:	4798      	blx	r3
}
    5514:	46c0      	nop			; (mov r8, r8)
    5516:	46bd      	mov	sp, r7
    5518:	bd80      	pop	{r7, pc}
    551a:	46c0      	nop			; (mov r8, r8)
    551c:	41005000 	.word	0x41005000
    5520:	0000491f 	.word	0x0000491f
    5524:	20000f88 	.word	0x20000f88

00005528 <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    5528:	b580      	push	{r7, lr}
    552a:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    552c:	4b0d      	ldr	r3, [pc, #52]	; (5564 <_usb_d_dev_wakeup+0x3c>)
    552e:	2170      	movs	r1, #112	; 0x70
    5530:	0018      	movs	r0, r3
    5532:	4b0d      	ldr	r3, [pc, #52]	; (5568 <_usb_d_dev_wakeup+0x40>)
    5534:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    5536:	4b0b      	ldr	r3, [pc, #44]	; (5564 <_usb_d_dev_wakeup+0x3c>)
    5538:	2170      	movs	r1, #112	; 0x70
    553a:	0018      	movs	r0, r3
    553c:	4b0b      	ldr	r3, [pc, #44]	; (556c <_usb_d_dev_wakeup+0x44>)
    553e:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    5540:	4a0b      	ldr	r2, [pc, #44]	; (5570 <_usb_d_dev_wakeup+0x48>)
    5542:	4b08      	ldr	r3, [pc, #32]	; (5564 <_usb_d_dev_wakeup+0x3c>)
    5544:	0011      	movs	r1, r2
    5546:	0018      	movs	r0, r3
    5548:	4b0a      	ldr	r3, [pc, #40]	; (5574 <_usb_d_dev_wakeup+0x4c>)
    554a:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    554c:	2000      	movs	r0, #0
    554e:	4b0a      	ldr	r3, [pc, #40]	; (5578 <_usb_d_dev_wakeup+0x50>)
    5550:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    5552:	4b0a      	ldr	r3, [pc, #40]	; (557c <_usb_d_dev_wakeup+0x54>)
    5554:	685b      	ldr	r3, [r3, #4]
    5556:	2100      	movs	r1, #0
    5558:	2002      	movs	r0, #2
    555a:	4798      	blx	r3
}
    555c:	46c0      	nop			; (mov r8, r8)
    555e:	46bd      	mov	sp, r7
    5560:	bd80      	pop	{r7, pc}
    5562:	46c0      	nop			; (mov r8, r8)
    5564:	41005000 	.word	0x41005000
    5568:	0000491f 	.word	0x0000491f
    556c:	00004971 	.word	0x00004971
    5570:	00000201 	.word	0x00000201
    5574:	0000493d 	.word	0x0000493d
    5578:	00004c2d 	.word	0x00004c2d
    557c:	20000f88 	.word	0x20000f88

00005580 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    5580:	b580      	push	{r7, lr}
    5582:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    5584:	4b0f      	ldr	r3, [pc, #60]	; (55c4 <_usb_d_dev_reset+0x44>)
    5586:	2200      	movs	r2, #0
    5588:	2100      	movs	r1, #0
    558a:	0018      	movs	r0, r3
    558c:	4b0e      	ldr	r3, [pc, #56]	; (55c8 <_usb_d_dev_reset+0x48>)
    558e:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    5590:	4b0c      	ldr	r3, [pc, #48]	; (55c4 <_usb_d_dev_reset+0x44>)
    5592:	2108      	movs	r1, #8
    5594:	0018      	movs	r0, r3
    5596:	4b0d      	ldr	r3, [pc, #52]	; (55cc <_usb_d_dev_reset+0x4c>)
    5598:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    559a:	4b0a      	ldr	r3, [pc, #40]	; (55c4 <_usb_d_dev_reset+0x44>)
    559c:	2170      	movs	r1, #112	; 0x70
    559e:	0018      	movs	r0, r3
    55a0:	4b0b      	ldr	r3, [pc, #44]	; (55d0 <_usb_d_dev_reset+0x50>)
    55a2:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    55a4:	4a0b      	ldr	r2, [pc, #44]	; (55d4 <_usb_d_dev_reset+0x54>)
    55a6:	4b07      	ldr	r3, [pc, #28]	; (55c4 <_usb_d_dev_reset+0x44>)
    55a8:	0011      	movs	r1, r2
    55aa:	0018      	movs	r0, r3
    55ac:	4b0a      	ldr	r3, [pc, #40]	; (55d8 <_usb_d_dev_reset+0x58>)
    55ae:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    55b0:	4b0a      	ldr	r3, [pc, #40]	; (55dc <_usb_d_dev_reset+0x5c>)
    55b2:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    55b4:	4b0a      	ldr	r3, [pc, #40]	; (55e0 <_usb_d_dev_reset+0x60>)
    55b6:	685b      	ldr	r3, [r3, #4]
    55b8:	2100      	movs	r1, #0
    55ba:	2001      	movs	r0, #1
    55bc:	4798      	blx	r3
}
    55be:	46c0      	nop			; (mov r8, r8)
    55c0:	46bd      	mov	sp, r7
    55c2:	bd80      	pop	{r7, pc}
    55c4:	41005000 	.word	0x41005000
    55c8:	000048b5 	.word	0x000048b5
    55cc:	0000491f 	.word	0x0000491f
    55d0:	00004971 	.word	0x00004971
    55d4:	00000201 	.word	0x00000201
    55d8:	0000493d 	.word	0x0000493d
    55dc:	000063c1 	.word	0x000063c1
    55e0:	20000f88 	.word	0x20000f88

000055e4 <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    55e4:	b580      	push	{r7, lr}
    55e6:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    55e8:	4a0c      	ldr	r2, [pc, #48]	; (561c <_usb_d_dev_suspend+0x38>)
    55ea:	4b0d      	ldr	r3, [pc, #52]	; (5620 <_usb_d_dev_suspend+0x3c>)
    55ec:	0011      	movs	r1, r2
    55ee:	0018      	movs	r0, r3
    55f0:	4b0c      	ldr	r3, [pc, #48]	; (5624 <_usb_d_dev_suspend+0x40>)
    55f2:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    55f4:	4a09      	ldr	r2, [pc, #36]	; (561c <_usb_d_dev_suspend+0x38>)
    55f6:	4b0a      	ldr	r3, [pc, #40]	; (5620 <_usb_d_dev_suspend+0x3c>)
    55f8:	0011      	movs	r1, r2
    55fa:	0018      	movs	r0, r3
    55fc:	4b0a      	ldr	r3, [pc, #40]	; (5628 <_usb_d_dev_suspend+0x44>)
    55fe:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    5600:	4b07      	ldr	r3, [pc, #28]	; (5620 <_usb_d_dev_suspend+0x3c>)
    5602:	2170      	movs	r1, #112	; 0x70
    5604:	0018      	movs	r0, r3
    5606:	4b09      	ldr	r3, [pc, #36]	; (562c <_usb_d_dev_suspend+0x48>)
    5608:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    560a:	4b09      	ldr	r3, [pc, #36]	; (5630 <_usb_d_dev_suspend+0x4c>)
    560c:	685b      	ldr	r3, [r3, #4]
    560e:	2100      	movs	r1, #0
    5610:	2004      	movs	r0, #4
    5612:	4798      	blx	r3
}
    5614:	46c0      	nop			; (mov r8, r8)
    5616:	46bd      	mov	sp, r7
    5618:	bd80      	pop	{r7, pc}
    561a:	46c0      	nop			; (mov r8, r8)
    561c:	00000201 	.word	0x00000201
    5620:	41005000 	.word	0x41005000
    5624:	0000491f 	.word	0x0000491f
    5628:	00004971 	.word	0x00004971
    562c:	0000493d 	.word	0x0000493d
    5630:	20000f88 	.word	0x20000f88

00005634 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    5634:	b590      	push	{r4, r7, lr}
    5636:	b083      	sub	sp, #12
    5638:	af00      	add	r7, sp, #0
	bool     rc    = true;
    563a:	1dfb      	adds	r3, r7, #7
    563c:	2201      	movs	r2, #1
    563e:	701a      	strb	r2, [r3, #0]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    5640:	1d3c      	adds	r4, r7, #4
    5642:	4b26      	ldr	r3, [pc, #152]	; (56dc <_usb_d_dev_handle_nep+0xa8>)
    5644:	0018      	movs	r0, r3
    5646:	4b26      	ldr	r3, [pc, #152]	; (56e0 <_usb_d_dev_handle_nep+0xac>)
    5648:	4798      	blx	r3
    564a:	0003      	movs	r3, r0
    564c:	8023      	strh	r3, [r4, #0]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    564e:	4b23      	ldr	r3, [pc, #140]	; (56dc <_usb_d_dev_handle_nep+0xa8>)
    5650:	0018      	movs	r0, r3
    5652:	4b24      	ldr	r3, [pc, #144]	; (56e4 <_usb_d_dev_handle_nep+0xb0>)
    5654:	4798      	blx	r3
    5656:	0003      	movs	r3, r0
    5658:	0019      	movs	r1, r3
    565a:	1d3b      	adds	r3, r7, #4
    565c:	1d3a      	adds	r2, r7, #4
    565e:	8812      	ldrh	r2, [r2, #0]
    5660:	400a      	ands	r2, r1
    5662:	801a      	strh	r2, [r3, #0]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    5664:	1d3b      	adds	r3, r7, #4
    5666:	881b      	ldrh	r3, [r3, #0]
    5668:	2204      	movs	r2, #4
    566a:	4013      	ands	r3, r2
    566c:	d003      	beq.n	5676 <_usb_d_dev_handle_nep+0x42>
		_usb_d_dev_sof();
    566e:	4b1e      	ldr	r3, [pc, #120]	; (56e8 <_usb_d_dev_handle_nep+0xb4>)
    5670:	4798      	blx	r3
		return true;
    5672:	2301      	movs	r3, #1
    5674:	e02d      	b.n	56d2 <_usb_d_dev_handle_nep+0x9e>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    5676:	1d3b      	adds	r3, r7, #4
    5678:	881a      	ldrh	r2, [r3, #0]
    567a:	2380      	movs	r3, #128	; 0x80
    567c:	009b      	lsls	r3, r3, #2
    567e:	4013      	ands	r3, r2
    5680:	d002      	beq.n	5688 <_usb_d_dev_handle_nep+0x54>
		_usb_d_dev_lpmsusp();
    5682:	4b1a      	ldr	r3, [pc, #104]	; (56ec <_usb_d_dev_handle_nep+0xb8>)
    5684:	4798      	blx	r3
    5686:	e022      	b.n	56ce <_usb_d_dev_handle_nep+0x9a>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    5688:	1d3b      	adds	r3, r7, #4
    568a:	881b      	ldrh	r3, [r3, #0]
    568c:	2280      	movs	r2, #128	; 0x80
    568e:	4013      	ands	r3, r2
    5690:	d002      	beq.n	5698 <_usb_d_dev_handle_nep+0x64>
		_usb_d_dev_ramerr();
    5692:	4b17      	ldr	r3, [pc, #92]	; (56f0 <_usb_d_dev_handle_nep+0xbc>)
    5694:	4798      	blx	r3
    5696:	e01a      	b.n	56ce <_usb_d_dev_handle_nep+0x9a>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    5698:	1d3b      	adds	r3, r7, #4
    569a:	881b      	ldrh	r3, [r3, #0]
    569c:	2270      	movs	r2, #112	; 0x70
    569e:	4013      	ands	r3, r2
    56a0:	d002      	beq.n	56a8 <_usb_d_dev_handle_nep+0x74>
		_usb_d_dev_wakeup();
    56a2:	4b14      	ldr	r3, [pc, #80]	; (56f4 <_usb_d_dev_handle_nep+0xc0>)
    56a4:	4798      	blx	r3
    56a6:	e012      	b.n	56ce <_usb_d_dev_handle_nep+0x9a>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    56a8:	1d3b      	adds	r3, r7, #4
    56aa:	881b      	ldrh	r3, [r3, #0]
    56ac:	2208      	movs	r2, #8
    56ae:	4013      	ands	r3, r2
    56b0:	d002      	beq.n	56b8 <_usb_d_dev_handle_nep+0x84>
		_usb_d_dev_reset();
    56b2:	4b11      	ldr	r3, [pc, #68]	; (56f8 <_usb_d_dev_handle_nep+0xc4>)
    56b4:	4798      	blx	r3
    56b6:	e00a      	b.n	56ce <_usb_d_dev_handle_nep+0x9a>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    56b8:	1d3b      	adds	r3, r7, #4
    56ba:	881b      	ldrh	r3, [r3, #0]
    56bc:	2201      	movs	r2, #1
    56be:	4013      	ands	r3, r2
    56c0:	d002      	beq.n	56c8 <_usb_d_dev_handle_nep+0x94>
		_usb_d_dev_suspend();
    56c2:	4b0e      	ldr	r3, [pc, #56]	; (56fc <_usb_d_dev_handle_nep+0xc8>)
    56c4:	4798      	blx	r3
    56c6:	e002      	b.n	56ce <_usb_d_dev_handle_nep+0x9a>
	} else {
		rc = false;
    56c8:	1dfb      	adds	r3, r7, #7
    56ca:	2200      	movs	r2, #0
    56cc:	701a      	strb	r2, [r3, #0]
	}
	return rc;
    56ce:	1dfb      	adds	r3, r7, #7
    56d0:	781b      	ldrb	r3, [r3, #0]
}
    56d2:	0018      	movs	r0, r3
    56d4:	46bd      	mov	sp, r7
    56d6:	b003      	add	sp, #12
    56d8:	bd90      	pop	{r4, r7, pc}
    56da:	46c0      	nop			; (mov r8, r8)
    56dc:	41005000 	.word	0x41005000
    56e0:	00004909 	.word	0x00004909
    56e4:	0000495b 	.word	0x0000495b
    56e8:	00005425 	.word	0x00005425
    56ec:	0000544d 	.word	0x0000544d
    56f0:	000054fd 	.word	0x000054fd
    56f4:	00005529 	.word	0x00005529
    56f8:	00005581 	.word	0x00005581
    56fc:	000055e5 	.word	0x000055e5

00005700 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    5700:	b590      	push	{r4, r7, lr}
    5702:	b089      	sub	sp, #36	; 0x24
    5704:	af00      	add	r7, sp, #0
    5706:	6078      	str	r0, [r7, #4]
    5708:	000a      	movs	r2, r1
    570a:	1cfb      	adds	r3, r7, #3
    570c:	701a      	strb	r2, [r3, #0]
	Usb *              hw          = USB;
    570e:	4b98      	ldr	r3, [pc, #608]	; (5970 <_usb_d_dev_in_next+0x270>)
    5710:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    5712:	687b      	ldr	r3, [r7, #4]
    5714:	7c9a      	ldrb	r2, [r3, #18]
    5716:	2317      	movs	r3, #23
    5718:	18fb      	adds	r3, r7, r3
    571a:	210f      	movs	r1, #15
    571c:	400a      	ands	r2, r1
    571e:	701a      	strb	r2, [r3, #0]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    5720:	2317      	movs	r3, #23
    5722:	18fb      	adds	r3, r7, r3
    5724:	781b      	ldrb	r3, [r3, #0]
    5726:	015a      	lsls	r2, r3, #5
    5728:	4b92      	ldr	r3, [pc, #584]	; (5974 <_usb_d_dev_in_next+0x274>)
    572a:	18d3      	adds	r3, r2, r3
    572c:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    572e:	1cfb      	adds	r3, r7, #3
    5730:	781b      	ldrb	r3, [r3, #0]
    5732:	2b00      	cmp	r3, #0
    5734:	d007      	beq.n	5746 <_usb_d_dev_in_next+0x46>
    5736:	693b      	ldr	r3, [r7, #16]
    5738:	3310      	adds	r3, #16
    573a:	685b      	ldr	r3, [r3, #4]
    573c:	049b      	lsls	r3, r3, #18
    573e:	0c9b      	lsrs	r3, r3, #18
    5740:	b29b      	uxth	r3, r3
    5742:	001a      	movs	r2, r3
    5744:	e000      	b.n	5748 <_usb_d_dev_in_next+0x48>
    5746:	2200      	movs	r2, #0
    5748:	230e      	movs	r3, #14
    574a:	18fb      	adds	r3, r7, r3
    574c:	801a      	strh	r2, [r3, #0]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    574e:	687b      	ldr	r3, [r7, #4]
    5750:	8a1b      	ldrh	r3, [r3, #16]
    5752:	4a89      	ldr	r2, [pc, #548]	; (5978 <_usb_d_dev_in_next+0x278>)
    5754:	4293      	cmp	r3, r2
    5756:	d103      	bne.n	5760 <_usb_d_dev_in_next+0x60>
    5758:	687b      	ldr	r3, [r7, #4]
    575a:	8a1b      	ldrh	r3, [r3, #16]
    575c:	b21b      	sxth	r3, r3
    575e:	e004      	b.n	576a <_usb_d_dev_in_next+0x6a>
    5760:	687b      	ldr	r3, [r7, #4]
    5762:	8a1b      	ldrh	r3, [r3, #16]
    5764:	3b01      	subs	r3, #1
    5766:	b29b      	uxth	r3, r3
    5768:	b21b      	sxth	r3, r3
    576a:	220e      	movs	r2, #14
    576c:	18ba      	adds	r2, r7, r2
    576e:	2100      	movs	r1, #0
    5770:	5e52      	ldrsh	r2, [r2, r1]
    5772:	4013      	ands	r3, r2
    5774:	b21a      	sxth	r2, r3
    5776:	230c      	movs	r3, #12
    5778:	18fb      	adds	r3, r7, r3
    577a:	801a      	strh	r2, [r3, #0]
	uint8_t            inten    = 0;
    577c:	231d      	movs	r3, #29
    577e:	18fb      	adds	r3, r7, r3
    5780:	2200      	movs	r2, #0
    5782:	701a      	strb	r2, [r3, #0]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    5784:	687b      	ldr	r3, [r7, #4]
    5786:	7cdb      	ldrb	r3, [r3, #19]
    5788:	2207      	movs	r2, #7
    578a:	4013      	ands	r3, r2
    578c:	b2da      	uxtb	r2, r3
    578e:	230b      	movs	r3, #11
    5790:	18fb      	adds	r3, r7, r3
    5792:	3a01      	subs	r2, #1
    5794:	4251      	negs	r1, r2
    5796:	414a      	adcs	r2, r1
    5798:	701a      	strb	r2, [r3, #0]

	if (isr) {
    579a:	1cfb      	adds	r3, r7, #3
    579c:	781b      	ldrb	r3, [r3, #0]
    579e:	2b00      	cmp	r3, #0
    57a0:	d006      	beq.n	57b0 <_usb_d_dev_in_next+0xb0>
		_usbd_ep_ack_io_cpt(epn, 1);
    57a2:	2317      	movs	r3, #23
    57a4:	18fb      	adds	r3, r7, r3
    57a6:	781b      	ldrb	r3, [r3, #0]
    57a8:	2101      	movs	r1, #1
    57aa:	0018      	movs	r0, r3
    57ac:	4b73      	ldr	r3, [pc, #460]	; (597c <_usb_d_dev_in_next+0x27c>)
    57ae:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    57b0:	687b      	ldr	r3, [r7, #4]
    57b2:	689a      	ldr	r2, [r3, #8]
    57b4:	230e      	movs	r3, #14
    57b6:	18fb      	adds	r3, r7, r3
    57b8:	881b      	ldrh	r3, [r3, #0]
    57ba:	18d2      	adds	r2, r2, r3
    57bc:	687b      	ldr	r3, [r7, #4]
    57be:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    57c0:	687b      	ldr	r3, [r7, #4]
    57c2:	689a      	ldr	r2, [r3, #8]
    57c4:	687b      	ldr	r3, [r7, #4]
    57c6:	685b      	ldr	r3, [r3, #4]
    57c8:	429a      	cmp	r2, r3
    57ca:	d258      	bcs.n	587e <_usb_d_dev_in_next+0x17e>
		trans_next = ept->trans_size - ept->trans_count;
    57cc:	687b      	ldr	r3, [r7, #4]
    57ce:	685b      	ldr	r3, [r3, #4]
    57d0:	b299      	uxth	r1, r3
    57d2:	687b      	ldr	r3, [r7, #4]
    57d4:	689b      	ldr	r3, [r3, #8]
    57d6:	b29a      	uxth	r2, r3
    57d8:	231e      	movs	r3, #30
    57da:	18fb      	adds	r3, r7, r3
    57dc:	1a8a      	subs	r2, r1, r2
    57de:	801a      	strh	r2, [r3, #0]
		if (ept->flags.bits.use_cache) {
    57e0:	687b      	ldr	r3, [r7, #4]
    57e2:	7cdb      	ldrb	r3, [r3, #19]
    57e4:	2220      	movs	r2, #32
    57e6:	4013      	ands	r3, r2
    57e8:	b2db      	uxtb	r3, r3
    57ea:	2b00      	cmp	r3, #0
    57ec:	d023      	beq.n	5836 <_usb_d_dev_in_next+0x136>
			if (trans_next > ept->size) {
    57ee:	687b      	ldr	r3, [r7, #4]
    57f0:	8a1b      	ldrh	r3, [r3, #16]
    57f2:	221e      	movs	r2, #30
    57f4:	18ba      	adds	r2, r7, r2
    57f6:	8812      	ldrh	r2, [r2, #0]
    57f8:	429a      	cmp	r2, r3
    57fa:	d904      	bls.n	5806 <_usb_d_dev_in_next+0x106>
				trans_next = ept->size;
    57fc:	231e      	movs	r3, #30
    57fe:	18fb      	adds	r3, r7, r3
    5800:	687a      	ldr	r2, [r7, #4]
    5802:	8a12      	ldrh	r2, [r2, #16]
    5804:	801a      	strh	r2, [r3, #0]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    5806:	687b      	ldr	r3, [r7, #4]
    5808:	68d8      	ldr	r0, [r3, #12]
    580a:	687b      	ldr	r3, [r7, #4]
    580c:	681a      	ldr	r2, [r3, #0]
    580e:	687b      	ldr	r3, [r7, #4]
    5810:	689b      	ldr	r3, [r3, #8]
    5812:	18d1      	adds	r1, r2, r3
    5814:	231e      	movs	r3, #30
    5816:	18fb      	adds	r3, r7, r3
    5818:	881b      	ldrh	r3, [r3, #0]
    581a:	001a      	movs	r2, r3
    581c:	4b58      	ldr	r3, [pc, #352]	; (5980 <_usb_d_dev_in_next+0x280>)
    581e:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    5820:	687b      	ldr	r3, [r7, #4]
    5822:	68db      	ldr	r3, [r3, #12]
    5824:	001a      	movs	r2, r3
    5826:	2317      	movs	r3, #23
    5828:	18fb      	adds	r3, r7, r3
    582a:	781b      	ldrb	r3, [r3, #0]
    582c:	2101      	movs	r1, #1
    582e:	0018      	movs	r0, r3
    5830:	4b54      	ldr	r3, [pc, #336]	; (5984 <_usb_d_dev_in_next+0x284>)
    5832:	4798      	blx	r3
    5834:	e018      	b.n	5868 <_usb_d_dev_in_next+0x168>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    5836:	231e      	movs	r3, #30
    5838:	18fb      	adds	r3, r7, r3
    583a:	881a      	ldrh	r2, [r3, #0]
    583c:	2380      	movs	r3, #128	; 0x80
    583e:	019b      	lsls	r3, r3, #6
    5840:	429a      	cmp	r2, r3
    5842:	d904      	bls.n	584e <_usb_d_dev_in_next+0x14e>
				trans_next = USB_D_DEV_TRANS_MAX;
    5844:	231e      	movs	r3, #30
    5846:	18fb      	adds	r3, r7, r3
    5848:	2280      	movs	r2, #128	; 0x80
    584a:	0192      	lsls	r2, r2, #6
    584c:	801a      	strh	r2, [r3, #0]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    584e:	687b      	ldr	r3, [r7, #4]
    5850:	681a      	ldr	r2, [r3, #0]
    5852:	687b      	ldr	r3, [r7, #4]
    5854:	689b      	ldr	r3, [r3, #8]
    5856:	18d3      	adds	r3, r2, r3
    5858:	001a      	movs	r2, r3
    585a:	2317      	movs	r3, #23
    585c:	18fb      	adds	r3, r7, r3
    585e:	781b      	ldrb	r3, [r3, #0]
    5860:	2101      	movs	r1, #1
    5862:	0018      	movs	r0, r3
    5864:	4b47      	ldr	r3, [pc, #284]	; (5984 <_usb_d_dev_in_next+0x284>)
    5866:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    5868:	231e      	movs	r3, #30
    586a:	18fb      	adds	r3, r7, r3
    586c:	881a      	ldrh	r2, [r3, #0]
    586e:	2317      	movs	r3, #23
    5870:	18fb      	adds	r3, r7, r3
    5872:	7818      	ldrb	r0, [r3, #0]
    5874:	2300      	movs	r3, #0
    5876:	2101      	movs	r1, #1
    5878:	4c43      	ldr	r4, [pc, #268]	; (5988 <_usb_d_dev_in_next+0x288>)
    587a:	47a0      	blx	r4
		goto _in_tx_exec;
    587c:	e04b      	b.n	5916 <_usb_d_dev_in_next+0x216>
	} else if (ept->flags.bits.need_zlp) {
    587e:	687b      	ldr	r3, [r7, #4]
    5880:	7cdb      	ldrb	r3, [r3, #19]
    5882:	2210      	movs	r2, #16
    5884:	4013      	ands	r3, r2
    5886:	b2db      	uxtb	r3, r3
    5888:	2b00      	cmp	r3, #0
    588a:	d00d      	beq.n	58a8 <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.need_zlp = 0;
    588c:	687b      	ldr	r3, [r7, #4]
    588e:	7cda      	ldrb	r2, [r3, #19]
    5890:	2110      	movs	r1, #16
    5892:	438a      	bics	r2, r1
    5894:	74da      	strb	r2, [r3, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    5896:	2317      	movs	r3, #23
    5898:	18fb      	adds	r3, r7, r3
    589a:	7818      	ldrb	r0, [r3, #0]
    589c:	2300      	movs	r3, #0
    589e:	2200      	movs	r2, #0
    58a0:	2101      	movs	r1, #1
    58a2:	4c39      	ldr	r4, [pc, #228]	; (5988 <_usb_d_dev_in_next+0x288>)
    58a4:	47a0      	blx	r4
		goto _in_tx_exec;
    58a6:	e036      	b.n	5916 <_usb_d_dev_in_next+0x216>
	}
	/* Complete. */
	if (is_ctrl) {
    58a8:	230b      	movs	r3, #11
    58aa:	18fb      	adds	r3, r7, r3
    58ac:	781b      	ldrb	r3, [r3, #0]
    58ae:	2b00      	cmp	r3, #0
    58b0:	d008      	beq.n	58c4 <_usb_d_dev_in_next+0x1c4>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    58b2:	2317      	movs	r3, #23
    58b4:	18fb      	adds	r3, r7, r3
    58b6:	7819      	ldrb	r1, [r3, #0]
    58b8:	69bb      	ldr	r3, [r7, #24]
    58ba:	224b      	movs	r2, #75	; 0x4b
    58bc:	0018      	movs	r0, r3
    58be:	4b33      	ldr	r3, [pc, #204]	; (598c <_usb_d_dev_in_next+0x28c>)
    58c0:	4798      	blx	r3
    58c2:	e007      	b.n	58d4 <_usb_d_dev_in_next+0x1d4>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    58c4:	2317      	movs	r3, #23
    58c6:	18fb      	adds	r3, r7, r3
    58c8:	7819      	ldrb	r1, [r3, #0]
    58ca:	69bb      	ldr	r3, [r7, #24]
    58cc:	224a      	movs	r2, #74	; 0x4a
    58ce:	0018      	movs	r0, r3
    58d0:	4b2e      	ldr	r3, [pc, #184]	; (598c <_usb_d_dev_in_next+0x28c>)
    58d2:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    58d4:	687b      	ldr	r3, [r7, #4]
    58d6:	8a1b      	ldrh	r3, [r3, #16]
    58d8:	220c      	movs	r2, #12
    58da:	18ba      	adds	r2, r7, r2
    58dc:	8812      	ldrh	r2, [r2, #0]
    58de:	429a      	cmp	r2, r3
    58e0:	d113      	bne.n	590a <_usb_d_dev_in_next+0x20a>
		ept->flags.bits.is_busy = 0;
    58e2:	687b      	ldr	r3, [r7, #4]
    58e4:	7cda      	ldrb	r2, [r3, #19]
    58e6:	2140      	movs	r1, #64	; 0x40
    58e8:	438a      	bics	r2, r1
    58ea:	74da      	strb	r2, [r3, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    58ec:	4b28      	ldr	r3, [pc, #160]	; (5990 <_usb_d_dev_in_next+0x290>)
    58ee:	68da      	ldr	r2, [r3, #12]
    58f0:	687b      	ldr	r3, [r7, #4]
    58f2:	7c98      	ldrb	r0, [r3, #18]
    58f4:	687b      	ldr	r3, [r7, #4]
    58f6:	689b      	ldr	r3, [r3, #8]
    58f8:	0019      	movs	r1, r3
    58fa:	4790      	blx	r2
    58fc:	1e03      	subs	r3, r0, #0
    58fe:	d132      	bne.n	5966 <_usb_d_dev_in_next+0x266>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    5900:	687b      	ldr	r3, [r7, #4]
    5902:	7cda      	ldrb	r2, [r3, #19]
    5904:	2140      	movs	r1, #64	; 0x40
    5906:	430a      	orrs	r2, r1
    5908:	74da      	strb	r2, [r3, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    590a:	687b      	ldr	r3, [r7, #4]
    590c:	2100      	movs	r1, #0
    590e:	0018      	movs	r0, r3
    5910:	4b20      	ldr	r3, [pc, #128]	; (5994 <_usb_d_dev_in_next+0x294>)
    5912:	4798      	blx	r3
	return;
    5914:	e028      	b.n	5968 <_usb_d_dev_in_next+0x268>

_in_tx_exec:
	if (!isr) {
    5916:	1cfb      	adds	r3, r7, #3
    5918:	781b      	ldrb	r3, [r3, #0]
    591a:	2201      	movs	r2, #1
    591c:	4053      	eors	r3, r2
    591e:	b2db      	uxtb	r3, r3
    5920:	2b00      	cmp	r3, #0
    5922:	d017      	beq.n	5954 <_usb_d_dev_in_next+0x254>
		if (is_ctrl) {
    5924:	230b      	movs	r3, #11
    5926:	18fb      	adds	r3, r7, r3
    5928:	781b      	ldrb	r3, [r3, #0]
    592a:	2b00      	cmp	r3, #0
    592c:	d004      	beq.n	5938 <_usb_d_dev_in_next+0x238>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    592e:	231d      	movs	r3, #29
    5930:	18fb      	adds	r3, r7, r3
    5932:	224e      	movs	r2, #78	; 0x4e
    5934:	701a      	strb	r2, [r3, #0]
    5936:	e003      	b.n	5940 <_usb_d_dev_in_next+0x240>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    5938:	231d      	movs	r3, #29
    593a:	18fb      	adds	r3, r7, r3
    593c:	224a      	movs	r2, #74	; 0x4a
    593e:	701a      	strb	r2, [r3, #0]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    5940:	231d      	movs	r3, #29
    5942:	18fb      	adds	r3, r7, r3
    5944:	781a      	ldrb	r2, [r3, #0]
    5946:	2317      	movs	r3, #23
    5948:	18fb      	adds	r3, r7, r3
    594a:	7819      	ldrb	r1, [r3, #0]
    594c:	69bb      	ldr	r3, [r7, #24]
    594e:	0018      	movs	r0, r3
    5950:	4b11      	ldr	r3, [pc, #68]	; (5998 <_usb_d_dev_in_next+0x298>)
    5952:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    5954:	2317      	movs	r3, #23
    5956:	18fb      	adds	r3, r7, r3
    5958:	781b      	ldrb	r3, [r3, #0]
    595a:	2201      	movs	r2, #1
    595c:	2101      	movs	r1, #1
    595e:	0018      	movs	r0, r3
    5960:	4b0e      	ldr	r3, [pc, #56]	; (599c <_usb_d_dev_in_next+0x29c>)
    5962:	4798      	blx	r3
    5964:	e000      	b.n	5968 <_usb_d_dev_in_next+0x268>
			return;
    5966:	46c0      	nop			; (mov r8, r8)
}
    5968:	46bd      	mov	sp, r7
    596a:	b009      	add	sp, #36	; 0x24
    596c:	bd90      	pop	{r4, r7, pc}
    596e:	46c0      	nop			; (mov r8, r8)
    5970:	41005000 	.word	0x41005000
    5974:	200010f0 	.word	0x200010f0
    5978:	000003ff 	.word	0x000003ff
    597c:	00004fb1 	.word	0x00004fb1
    5980:	0000b701 	.word	0x0000b701
    5984:	00004fe5 	.word	0x00004fe5
    5988:	00005191 	.word	0x00005191
    598c:	000047ff 	.word	0x000047ff
    5990:	20000f88 	.word	0x20000f88
    5994:	00006e65 	.word	0x00006e65
    5998:	000047c9 	.word	0x000047c9
    599c:	00005279 	.word	0x00005279

000059a0 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    59a0:	b590      	push	{r4, r7, lr}
    59a2:	b08b      	sub	sp, #44	; 0x2c
    59a4:	af00      	add	r7, sp, #0
    59a6:	6078      	str	r0, [r7, #4]
    59a8:	000a      	movs	r2, r1
    59aa:	1cfb      	adds	r3, r7, #3
    59ac:	701a      	strb	r2, [r3, #0]
	Usb *              hw         = USB;
    59ae:	4bc7      	ldr	r3, [pc, #796]	; (5ccc <_usb_d_dev_out_next+0x32c>)
    59b0:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    59b2:	687b      	ldr	r3, [r7, #4]
    59b4:	7c9a      	ldrb	r2, [r3, #18]
    59b6:	231f      	movs	r3, #31
    59b8:	18fb      	adds	r3, r7, r3
    59ba:	210f      	movs	r1, #15
    59bc:	400a      	ands	r2, r1
    59be:	701a      	strb	r2, [r3, #0]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    59c0:	231f      	movs	r3, #31
    59c2:	18fb      	adds	r3, r7, r3
    59c4:	781b      	ldrb	r3, [r3, #0]
    59c6:	015a      	lsls	r2, r3, #5
    59c8:	4bc1      	ldr	r3, [pc, #772]	; (5cd0 <_usb_d_dev_out_next+0x330>)
    59ca:	18d3      	adds	r3, r2, r3
    59cc:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    59ce:	1cfb      	adds	r3, r7, #3
    59d0:	781b      	ldrb	r3, [r3, #0]
    59d2:	2b00      	cmp	r3, #0
    59d4:	d006      	beq.n	59e4 <_usb_d_dev_out_next+0x44>
    59d6:	69bb      	ldr	r3, [r7, #24]
    59d8:	685b      	ldr	r3, [r3, #4]
    59da:	011b      	lsls	r3, r3, #4
    59dc:	0c9b      	lsrs	r3, r3, #18
    59de:	b29b      	uxth	r3, r3
    59e0:	001a      	movs	r2, r3
    59e2:	e000      	b.n	59e6 <_usb_d_dev_out_next+0x46>
    59e4:	2200      	movs	r2, #0
    59e6:	2316      	movs	r3, #22
    59e8:	18fb      	adds	r3, r7, r3
    59ea:	801a      	strh	r2, [r3, #0]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    59ec:	1cfb      	adds	r3, r7, #3
    59ee:	781b      	ldrb	r3, [r3, #0]
    59f0:	2b00      	cmp	r3, #0
    59f2:	d006      	beq.n	5a02 <_usb_d_dev_out_next+0x62>
    59f4:	69bb      	ldr	r3, [r7, #24]
    59f6:	685b      	ldr	r3, [r3, #4]
    59f8:	049b      	lsls	r3, r3, #18
    59fa:	0c9b      	lsrs	r3, r3, #18
    59fc:	b29b      	uxth	r3, r3
    59fe:	001a      	movs	r2, r3
    5a00:	e000      	b.n	5a04 <_usb_d_dev_out_next+0x64>
    5a02:	2200      	movs	r2, #0
    5a04:	2314      	movs	r3, #20
    5a06:	18fb      	adds	r3, r7, r3
    5a08:	801a      	strh	r2, [r3, #0]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    5a0a:	687b      	ldr	r3, [r7, #4]
    5a0c:	8a1b      	ldrh	r3, [r3, #16]
    5a0e:	4ab1      	ldr	r2, [pc, #708]	; (5cd4 <_usb_d_dev_out_next+0x334>)
    5a10:	4293      	cmp	r3, r2
    5a12:	d004      	beq.n	5a1e <_usb_d_dev_out_next+0x7e>
    5a14:	687b      	ldr	r3, [r7, #4]
    5a16:	8a1b      	ldrh	r3, [r3, #16]
    5a18:	3b01      	subs	r3, #1
    5a1a:	b29a      	uxth	r2, r3
    5a1c:	e000      	b.n	5a20 <_usb_d_dev_out_next+0x80>
    5a1e:	4aad      	ldr	r2, [pc, #692]	; (5cd4 <_usb_d_dev_out_next+0x334>)
    5a20:	2312      	movs	r3, #18
    5a22:	18fb      	adds	r3, r7, r3
    5a24:	801a      	strh	r2, [r3, #0]
	uint16_t           last_pkt   = last_trans & size_mask;
    5a26:	2310      	movs	r3, #16
    5a28:	18fb      	adds	r3, r7, r3
    5a2a:	2214      	movs	r2, #20
    5a2c:	18ba      	adds	r2, r7, r2
    5a2e:	2112      	movs	r1, #18
    5a30:	1879      	adds	r1, r7, r1
    5a32:	8812      	ldrh	r2, [r2, #0]
    5a34:	8809      	ldrh	r1, [r1, #0]
    5a36:	400a      	ands	r2, r1
    5a38:	801a      	strh	r2, [r3, #0]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    5a3a:	687b      	ldr	r3, [r7, #4]
    5a3c:	7cdb      	ldrb	r3, [r3, #19]
    5a3e:	2207      	movs	r2, #7
    5a40:	4013      	ands	r3, r2
    5a42:	b2da      	uxtb	r2, r3
    5a44:	230f      	movs	r3, #15
    5a46:	18fb      	adds	r3, r7, r3
    5a48:	3a01      	subs	r2, #1
    5a4a:	4251      	negs	r1, r2
    5a4c:	414a      	adcs	r2, r1
    5a4e:	701a      	strb	r2, [r3, #0]

	if (isr) {
    5a50:	1cfb      	adds	r3, r7, #3
    5a52:	781b      	ldrb	r3, [r3, #0]
    5a54:	2b00      	cmp	r3, #0
    5a56:	d006      	beq.n	5a66 <_usb_d_dev_out_next+0xc6>
		_usbd_ep_ack_io_cpt(epn, 0);
    5a58:	231f      	movs	r3, #31
    5a5a:	18fb      	adds	r3, r7, r3
    5a5c:	781b      	ldrb	r3, [r3, #0]
    5a5e:	2100      	movs	r1, #0
    5a60:	0018      	movs	r0, r3
    5a62:	4b9d      	ldr	r3, [pc, #628]	; (5cd8 <_usb_d_dev_out_next+0x338>)
    5a64:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    5a66:	687b      	ldr	r3, [r7, #4]
    5a68:	7cdb      	ldrb	r3, [r3, #19]
    5a6a:	2220      	movs	r2, #32
    5a6c:	4013      	ands	r3, r2
    5a6e:	b2db      	uxtb	r3, r3
    5a70:	2b00      	cmp	r3, #0
    5a72:	d026      	beq.n	5ac2 <_usb_d_dev_out_next+0x122>
    5a74:	687b      	ldr	r3, [r7, #4]
    5a76:	685b      	ldr	r3, [r3, #4]
    5a78:	2b00      	cmp	r3, #0
    5a7a:	d022      	beq.n	5ac2 <_usb_d_dev_out_next+0x122>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    5a7c:	687b      	ldr	r3, [r7, #4]
    5a7e:	685b      	ldr	r3, [r3, #4]
    5a80:	b299      	uxth	r1, r3
    5a82:	687b      	ldr	r3, [r7, #4]
    5a84:	689b      	ldr	r3, [r3, #8]
    5a86:	b29a      	uxth	r2, r3
    5a88:	230c      	movs	r3, #12
    5a8a:	18fb      	adds	r3, r7, r3
    5a8c:	1a8a      	subs	r2, r1, r2
    5a8e:	801a      	strh	r2, [r3, #0]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    5a90:	687b      	ldr	r3, [r7, #4]
    5a92:	681a      	ldr	r2, [r3, #0]
    5a94:	687b      	ldr	r3, [r7, #4]
    5a96:	689b      	ldr	r3, [r3, #8]
    5a98:	18d0      	adds	r0, r2, r3
    5a9a:	687b      	ldr	r3, [r7, #4]
    5a9c:	68d9      	ldr	r1, [r3, #12]
    5a9e:	230c      	movs	r3, #12
    5aa0:	18fa      	adds	r2, r7, r3
    5aa2:	2310      	movs	r3, #16
    5aa4:	18fb      	adds	r3, r7, r3
    5aa6:	8812      	ldrh	r2, [r2, #0]
    5aa8:	881b      	ldrh	r3, [r3, #0]
    5aaa:	429a      	cmp	r2, r3
    5aac:	d903      	bls.n	5ab6 <_usb_d_dev_out_next+0x116>
    5aae:	2310      	movs	r3, #16
    5ab0:	18fb      	adds	r3, r7, r3
    5ab2:	881b      	ldrh	r3, [r3, #0]
    5ab4:	e002      	b.n	5abc <_usb_d_dev_out_next+0x11c>
    5ab6:	230c      	movs	r3, #12
    5ab8:	18fb      	adds	r3, r7, r3
    5aba:	881b      	ldrh	r3, [r3, #0]
    5abc:	001a      	movs	r2, r3
    5abe:	4b87      	ldr	r3, [pc, #540]	; (5cdc <_usb_d_dev_out_next+0x33c>)
    5ac0:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    5ac2:	687b      	ldr	r3, [r7, #4]
    5ac4:	685b      	ldr	r3, [r3, #4]
    5ac6:	2b00      	cmp	r3, #0
    5ac8:	d125      	bne.n	5b16 <_usb_d_dev_out_next+0x176>
    5aca:	687b      	ldr	r3, [r7, #4]
    5acc:	7cdb      	ldrb	r3, [r3, #19]
    5ace:	2210      	movs	r2, #16
    5ad0:	4013      	ands	r3, r2
    5ad2:	b2db      	uxtb	r3, r3
    5ad4:	2b00      	cmp	r3, #0
    5ad6:	d01e      	beq.n	5b16 <_usb_d_dev_out_next+0x176>
		ept->flags.bits.need_zlp  = 0;
    5ad8:	687b      	ldr	r3, [r7, #4]
    5ada:	7cda      	ldrb	r2, [r3, #19]
    5adc:	2110      	movs	r1, #16
    5ade:	438a      	bics	r2, r1
    5ae0:	74da      	strb	r2, [r3, #19]
		ept->flags.bits.use_cache = 1;
    5ae2:	687b      	ldr	r3, [r7, #4]
    5ae4:	7cda      	ldrb	r2, [r3, #19]
    5ae6:	2120      	movs	r1, #32
    5ae8:	430a      	orrs	r2, r1
    5aea:	74da      	strb	r2, [r3, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    5aec:	687b      	ldr	r3, [r7, #4]
    5aee:	68db      	ldr	r3, [r3, #12]
    5af0:	001a      	movs	r2, r3
    5af2:	231f      	movs	r3, #31
    5af4:	18fb      	adds	r3, r7, r3
    5af6:	781b      	ldrb	r3, [r3, #0]
    5af8:	2100      	movs	r1, #0
    5afa:	0018      	movs	r0, r3
    5afc:	4b78      	ldr	r3, [pc, #480]	; (5ce0 <_usb_d_dev_out_next+0x340>)
    5afe:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    5b00:	687b      	ldr	r3, [r7, #4]
    5b02:	8a1b      	ldrh	r3, [r3, #16]
    5b04:	001a      	movs	r2, r3
    5b06:	231f      	movs	r3, #31
    5b08:	18fb      	adds	r3, r7, r3
    5b0a:	7818      	ldrb	r0, [r3, #0]
    5b0c:	2300      	movs	r3, #0
    5b0e:	2100      	movs	r1, #0
    5b10:	4c74      	ldr	r4, [pc, #464]	; (5ce4 <_usb_d_dev_out_next+0x344>)
    5b12:	47a0      	blx	r4
		goto _out_rx_exec;
    5b14:	e0c2      	b.n	5c9c <_usb_d_dev_out_next+0x2fc>
	} else if (isr && last_pkt < ept->size) {
    5b16:	1cfb      	adds	r3, r7, #3
    5b18:	781b      	ldrb	r3, [r3, #0]
    5b1a:	2b00      	cmp	r3, #0
    5b1c:	d014      	beq.n	5b48 <_usb_d_dev_out_next+0x1a8>
    5b1e:	687b      	ldr	r3, [r7, #4]
    5b20:	8a1b      	ldrh	r3, [r3, #16]
    5b22:	2210      	movs	r2, #16
    5b24:	18ba      	adds	r2, r7, r2
    5b26:	8812      	ldrh	r2, [r2, #0]
    5b28:	429a      	cmp	r2, r3
    5b2a:	d20d      	bcs.n	5b48 <_usb_d_dev_out_next+0x1a8>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    5b2c:	687b      	ldr	r3, [r7, #4]
    5b2e:	7cda      	ldrb	r2, [r3, #19]
    5b30:	2110      	movs	r1, #16
    5b32:	438a      	bics	r2, r1
    5b34:	74da      	strb	r2, [r3, #19]
		ept->trans_count += last_trans;
    5b36:	687b      	ldr	r3, [r7, #4]
    5b38:	689a      	ldr	r2, [r3, #8]
    5b3a:	2314      	movs	r3, #20
    5b3c:	18fb      	adds	r3, r7, r3
    5b3e:	881b      	ldrh	r3, [r3, #0]
    5b40:	18d2      	adds	r2, r2, r3
    5b42:	687b      	ldr	r3, [r7, #4]
    5b44:	609a      	str	r2, [r3, #8]
    5b46:	e07e      	b.n	5c46 <_usb_d_dev_out_next+0x2a6>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    5b48:	687b      	ldr	r3, [r7, #4]
    5b4a:	689a      	ldr	r2, [r3, #8]
    5b4c:	2316      	movs	r3, #22
    5b4e:	18fb      	adds	r3, r7, r3
    5b50:	881b      	ldrh	r3, [r3, #0]
    5b52:	18d2      	adds	r2, r2, r3
    5b54:	687b      	ldr	r3, [r7, #4]
    5b56:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    5b58:	687b      	ldr	r3, [r7, #4]
    5b5a:	689a      	ldr	r2, [r3, #8]
    5b5c:	687b      	ldr	r3, [r7, #4]
    5b5e:	685b      	ldr	r3, [r3, #4]
    5b60:	429a      	cmp	r2, r3
    5b62:	d300      	bcc.n	5b66 <_usb_d_dev_out_next+0x1c6>
    5b64:	e06f      	b.n	5c46 <_usb_d_dev_out_next+0x2a6>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    5b66:	687b      	ldr	r3, [r7, #4]
    5b68:	685b      	ldr	r3, [r3, #4]
    5b6a:	b299      	uxth	r1, r3
    5b6c:	687b      	ldr	r3, [r7, #4]
    5b6e:	689b      	ldr	r3, [r3, #8]
    5b70:	b29a      	uxth	r2, r3
    5b72:	2326      	movs	r3, #38	; 0x26
    5b74:	18fb      	adds	r3, r7, r3
    5b76:	1a8a      	subs	r2, r1, r2
    5b78:	801a      	strh	r2, [r3, #0]
			if (ept->flags.bits.use_cache) {
    5b7a:	687b      	ldr	r3, [r7, #4]
    5b7c:	7cdb      	ldrb	r3, [r3, #19]
    5b7e:	2220      	movs	r2, #32
    5b80:	4013      	ands	r3, r2
    5b82:	b2db      	uxtb	r3, r3
    5b84:	2b00      	cmp	r3, #0
    5b86:	d016      	beq.n	5bb6 <_usb_d_dev_out_next+0x216>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    5b88:	687b      	ldr	r3, [r7, #4]
    5b8a:	8a1b      	ldrh	r3, [r3, #16]
    5b8c:	2226      	movs	r2, #38	; 0x26
    5b8e:	18ba      	adds	r2, r7, r2
    5b90:	8812      	ldrh	r2, [r2, #0]
    5b92:	429a      	cmp	r2, r3
    5b94:	d904      	bls.n	5ba0 <_usb_d_dev_out_next+0x200>
					trans_next = ept->size;
    5b96:	2326      	movs	r3, #38	; 0x26
    5b98:	18fb      	adds	r3, r7, r3
    5b9a:	687a      	ldr	r2, [r7, #4]
    5b9c:	8a12      	ldrh	r2, [r2, #16]
    5b9e:	801a      	strh	r2, [r3, #0]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    5ba0:	687b      	ldr	r3, [r7, #4]
    5ba2:	68db      	ldr	r3, [r3, #12]
    5ba4:	001a      	movs	r2, r3
    5ba6:	231f      	movs	r3, #31
    5ba8:	18fb      	adds	r3, r7, r3
    5baa:	781b      	ldrb	r3, [r3, #0]
    5bac:	2100      	movs	r1, #0
    5bae:	0018      	movs	r0, r3
    5bb0:	4b4b      	ldr	r3, [pc, #300]	; (5ce0 <_usb_d_dev_out_next+0x340>)
    5bb2:	4798      	blx	r3
    5bb4:	e03c      	b.n	5c30 <_usb_d_dev_out_next+0x290>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    5bb6:	687b      	ldr	r3, [r7, #4]
    5bb8:	8a1b      	ldrh	r3, [r3, #16]
    5bba:	2226      	movs	r2, #38	; 0x26
    5bbc:	18ba      	adds	r2, r7, r2
    5bbe:	8812      	ldrh	r2, [r2, #0]
    5bc0:	429a      	cmp	r2, r3
    5bc2:	d91c      	bls.n	5bfe <_usb_d_dev_out_next+0x25e>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    5bc4:	2326      	movs	r3, #38	; 0x26
    5bc6:	18fb      	adds	r3, r7, r3
    5bc8:	881a      	ldrh	r2, [r3, #0]
    5bca:	2380      	movs	r3, #128	; 0x80
    5bcc:	019b      	lsls	r3, r3, #6
    5bce:	429a      	cmp	r2, r3
    5bd0:	d905      	bls.n	5bde <_usb_d_dev_out_next+0x23e>
						trans_next = USB_D_DEV_TRANS_MAX;
    5bd2:	2326      	movs	r3, #38	; 0x26
    5bd4:	18fb      	adds	r3, r7, r3
    5bd6:	2280      	movs	r2, #128	; 0x80
    5bd8:	0192      	lsls	r2, r2, #6
    5bda:	801a      	strh	r2, [r3, #0]
    5bdc:	e01b      	b.n	5c16 <_usb_d_dev_out_next+0x276>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    5bde:	2326      	movs	r3, #38	; 0x26
    5be0:	18fb      	adds	r3, r7, r3
    5be2:	2212      	movs	r2, #18
    5be4:	18ba      	adds	r2, r7, r2
    5be6:	881b      	ldrh	r3, [r3, #0]
    5be8:	8812      	ldrh	r2, [r2, #0]
    5bea:	4013      	ands	r3, r2
    5bec:	b29a      	uxth	r2, r3
    5bee:	2326      	movs	r3, #38	; 0x26
    5bf0:	18fb      	adds	r3, r7, r3
    5bf2:	2126      	movs	r1, #38	; 0x26
    5bf4:	1879      	adds	r1, r7, r1
    5bf6:	8809      	ldrh	r1, [r1, #0]
    5bf8:	1a8a      	subs	r2, r1, r2
    5bfa:	801a      	strh	r2, [r3, #0]
    5bfc:	e00b      	b.n	5c16 <_usb_d_dev_out_next+0x276>
					}
				} else if (trans_next < ept->size) {
    5bfe:	687b      	ldr	r3, [r7, #4]
    5c00:	8a1b      	ldrh	r3, [r3, #16]
    5c02:	2226      	movs	r2, #38	; 0x26
    5c04:	18ba      	adds	r2, r7, r2
    5c06:	8812      	ldrh	r2, [r2, #0]
    5c08:	429a      	cmp	r2, r3
    5c0a:	d204      	bcs.n	5c16 <_usb_d_dev_out_next+0x276>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    5c0c:	687b      	ldr	r3, [r7, #4]
    5c0e:	7cda      	ldrb	r2, [r3, #19]
    5c10:	2120      	movs	r1, #32
    5c12:	430a      	orrs	r2, r1
    5c14:	74da      	strb	r2, [r3, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    5c16:	687b      	ldr	r3, [r7, #4]
    5c18:	681a      	ldr	r2, [r3, #0]
    5c1a:	687b      	ldr	r3, [r7, #4]
    5c1c:	689b      	ldr	r3, [r3, #8]
    5c1e:	18d3      	adds	r3, r2, r3
    5c20:	001a      	movs	r2, r3
    5c22:	231f      	movs	r3, #31
    5c24:	18fb      	adds	r3, r7, r3
    5c26:	781b      	ldrb	r3, [r3, #0]
    5c28:	2100      	movs	r1, #0
    5c2a:	0018      	movs	r0, r3
    5c2c:	4b2c      	ldr	r3, [pc, #176]	; (5ce0 <_usb_d_dev_out_next+0x340>)
    5c2e:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    5c30:	2326      	movs	r3, #38	; 0x26
    5c32:	18fb      	adds	r3, r7, r3
    5c34:	881a      	ldrh	r2, [r3, #0]
    5c36:	231f      	movs	r3, #31
    5c38:	18fb      	adds	r3, r7, r3
    5c3a:	7818      	ldrb	r0, [r3, #0]
    5c3c:	2300      	movs	r3, #0
    5c3e:	2100      	movs	r1, #0
    5c40:	4c28      	ldr	r4, [pc, #160]	; (5ce4 <_usb_d_dev_out_next+0x344>)
    5c42:	47a0      	blx	r4
			goto _out_rx_exec;
    5c44:	e02a      	b.n	5c9c <_usb_d_dev_out_next+0x2fc>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    5c46:	230f      	movs	r3, #15
    5c48:	18fb      	adds	r3, r7, r3
    5c4a:	781b      	ldrb	r3, [r3, #0]
    5c4c:	2b00      	cmp	r3, #0
    5c4e:	d008      	beq.n	5c62 <_usb_d_dev_out_next+0x2c2>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    5c50:	231f      	movs	r3, #31
    5c52:	18fb      	adds	r3, r7, r3
    5c54:	7819      	ldrb	r1, [r3, #0]
    5c56:	6a3b      	ldr	r3, [r7, #32]
    5c58:	222d      	movs	r2, #45	; 0x2d
    5c5a:	0018      	movs	r0, r3
    5c5c:	4b22      	ldr	r3, [pc, #136]	; (5ce8 <_usb_d_dev_out_next+0x348>)
    5c5e:	4798      	blx	r3
    5c60:	e007      	b.n	5c72 <_usb_d_dev_out_next+0x2d2>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    5c62:	231f      	movs	r3, #31
    5c64:	18fb      	adds	r3, r7, r3
    5c66:	7819      	ldrb	r1, [r3, #0]
    5c68:	6a3b      	ldr	r3, [r7, #32]
    5c6a:	2225      	movs	r2, #37	; 0x25
    5c6c:	0018      	movs	r0, r3
    5c6e:	4b1e      	ldr	r3, [pc, #120]	; (5ce8 <_usb_d_dev_out_next+0x348>)
    5c70:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    5c72:	231f      	movs	r3, #31
    5c74:	18fb      	adds	r3, r7, r3
    5c76:	781b      	ldrb	r3, [r3, #0]
    5c78:	2b00      	cmp	r3, #0
    5c7a:	d109      	bne.n	5c90 <_usb_d_dev_out_next+0x2f0>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    5c7c:	687b      	ldr	r3, [r7, #4]
    5c7e:	68db      	ldr	r3, [r3, #12]
    5c80:	001a      	movs	r2, r3
    5c82:	231f      	movs	r3, #31
    5c84:	18fb      	adds	r3, r7, r3
    5c86:	781b      	ldrb	r3, [r3, #0]
    5c88:	2100      	movs	r1, #0
    5c8a:	0018      	movs	r0, r3
    5c8c:	4b14      	ldr	r3, [pc, #80]	; (5ce0 <_usb_d_dev_out_next+0x340>)
    5c8e:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    5c90:	687b      	ldr	r3, [r7, #4]
    5c92:	2100      	movs	r1, #0
    5c94:	0018      	movs	r0, r3
    5c96:	4b15      	ldr	r3, [pc, #84]	; (5cec <_usb_d_dev_out_next+0x34c>)
    5c98:	4798      	blx	r3
	return;
    5c9a:	e041      	b.n	5d20 <_usb_d_dev_out_next+0x380>

_out_rx_exec:
	if (!isr) {
    5c9c:	1cfb      	adds	r3, r7, #3
    5c9e:	781b      	ldrb	r3, [r3, #0]
    5ca0:	2201      	movs	r2, #1
    5ca2:	4053      	eors	r3, r2
    5ca4:	b2db      	uxtb	r3, r3
    5ca6:	2b00      	cmp	r3, #0
    5ca8:	d032      	beq.n	5d10 <_usb_d_dev_out_next+0x370>
		if (is_ctrl) {
    5caa:	230f      	movs	r3, #15
    5cac:	18fb      	adds	r3, r7, r3
    5cae:	781b      	ldrb	r3, [r3, #0]
    5cb0:	2b00      	cmp	r3, #0
    5cb2:	d01f      	beq.n	5cf4 <_usb_d_dev_out_next+0x354>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    5cb4:	231f      	movs	r3, #31
    5cb6:	18fb      	adds	r3, r7, r3
    5cb8:	781b      	ldrb	r3, [r3, #0]
    5cba:	2101      	movs	r1, #1
    5cbc:	0018      	movs	r0, r3
    5cbe:	4b0c      	ldr	r3, [pc, #48]	; (5cf0 <_usb_d_dev_out_next+0x350>)
    5cc0:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    5cc2:	2325      	movs	r3, #37	; 0x25
    5cc4:	18fb      	adds	r3, r7, r3
    5cc6:	222d      	movs	r2, #45	; 0x2d
    5cc8:	701a      	strb	r2, [r3, #0]
    5cca:	e017      	b.n	5cfc <_usb_d_dev_out_next+0x35c>
    5ccc:	41005000 	.word	0x41005000
    5cd0:	200010f0 	.word	0x200010f0
    5cd4:	000003ff 	.word	0x000003ff
    5cd8:	00004fb1 	.word	0x00004fb1
    5cdc:	0000b701 	.word	0x0000b701
    5ce0:	00004fe5 	.word	0x00004fe5
    5ce4:	000051e9 	.word	0x000051e9
    5ce8:	000047ff 	.word	0x000047ff
    5cec:	00006e65 	.word	0x00006e65
    5cf0:	00005241 	.word	0x00005241
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    5cf4:	2325      	movs	r3, #37	; 0x25
    5cf6:	18fb      	adds	r3, r7, r3
    5cf8:	2225      	movs	r2, #37	; 0x25
    5cfa:	701a      	strb	r2, [r3, #0]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    5cfc:	2325      	movs	r3, #37	; 0x25
    5cfe:	18fb      	adds	r3, r7, r3
    5d00:	781a      	ldrb	r2, [r3, #0]
    5d02:	231f      	movs	r3, #31
    5d04:	18fb      	adds	r3, r7, r3
    5d06:	7819      	ldrb	r1, [r3, #0]
    5d08:	6a3b      	ldr	r3, [r7, #32]
    5d0a:	0018      	movs	r0, r3
    5d0c:	4b06      	ldr	r3, [pc, #24]	; (5d28 <_usb_d_dev_out_next+0x388>)
    5d0e:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    5d10:	231f      	movs	r3, #31
    5d12:	18fb      	adds	r3, r7, r3
    5d14:	781b      	ldrb	r3, [r3, #0]
    5d16:	2201      	movs	r2, #1
    5d18:	2100      	movs	r1, #0
    5d1a:	0018      	movs	r0, r3
    5d1c:	4b03      	ldr	r3, [pc, #12]	; (5d2c <_usb_d_dev_out_next+0x38c>)
    5d1e:	4798      	blx	r3
}
    5d20:	46bd      	mov	sp, r7
    5d22:	b00b      	add	sp, #44	; 0x2c
    5d24:	bd90      	pop	{r4, r7, pc}
    5d26:	46c0      	nop			; (mov r8, r8)
    5d28:	000047c9 	.word	0x000047c9
    5d2c:	000052e5 	.word	0x000052e5

00005d30 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    5d30:	b580      	push	{r7, lr}
    5d32:	b084      	sub	sp, #16
    5d34:	af00      	add	r7, sp, #0
    5d36:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    5d38:	687b      	ldr	r3, [r7, #4]
    5d3a:	7c9a      	ldrb	r2, [r3, #18]
    5d3c:	230f      	movs	r3, #15
    5d3e:	18fb      	adds	r3, r7, r3
    5d40:	210f      	movs	r1, #15
    5d42:	400a      	ands	r2, r1
    5d44:	701a      	strb	r2, [r3, #0]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    5d46:	687b      	ldr	r3, [r7, #4]
    5d48:	7cdb      	ldrb	r3, [r3, #19]
    5d4a:	2207      	movs	r2, #7
    5d4c:	4013      	ands	r3, r2
    5d4e:	b2da      	uxtb	r2, r3
    5d50:	230e      	movs	r3, #14
    5d52:	18fb      	adds	r3, r7, r3
    5d54:	3a01      	subs	r2, #1
    5d56:	4251      	negs	r1, r2
    5d58:	414a      	adcs	r2, r1
    5d5a:	701a      	strb	r2, [r3, #0]

	if (!is_ctrl) {
    5d5c:	230e      	movs	r3, #14
    5d5e:	18fb      	adds	r3, r7, r3
    5d60:	781b      	ldrb	r3, [r3, #0]
    5d62:	2201      	movs	r2, #1
    5d64:	4053      	eors	r3, r2
    5d66:	b2db      	uxtb	r3, r3
    5d68:	2b00      	cmp	r3, #0
    5d6a:	d00c      	beq.n	5d86 <_usb_d_dev_handle_setup+0x56>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    5d6c:	230f      	movs	r3, #15
    5d6e:	18fb      	adds	r3, r7, r3
    5d70:	781b      	ldrb	r3, [r3, #0]
    5d72:	0018      	movs	r0, r3
    5d74:	4b27      	ldr	r3, [pc, #156]	; (5e14 <_usb_d_dev_handle_setup+0xe4>)
    5d76:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    5d78:	230f      	movs	r3, #15
    5d7a:	18fb      	adds	r3, r7, r3
    5d7c:	781b      	ldrb	r3, [r3, #0]
    5d7e:	0018      	movs	r0, r3
    5d80:	4b25      	ldr	r3, [pc, #148]	; (5e18 <_usb_d_dev_handle_setup+0xe8>)
    5d82:	4798      	blx	r3
		return;
    5d84:	e042      	b.n	5e0c <_usb_d_dev_handle_setup+0xdc>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    5d86:	687b      	ldr	r3, [r7, #4]
    5d88:	7cdb      	ldrb	r3, [r3, #19]
    5d8a:	2240      	movs	r2, #64	; 0x40
    5d8c:	4013      	ands	r3, r2
    5d8e:	b2db      	uxtb	r3, r3
    5d90:	2b00      	cmp	r3, #0
    5d92:	d014      	beq.n	5dbe <_usb_d_dev_handle_setup+0x8e>
		ept->flags.bits.is_busy = 0;
    5d94:	687b      	ldr	r3, [r7, #4]
    5d96:	7cda      	ldrb	r2, [r3, #19]
    5d98:	2140      	movs	r1, #64	; 0x40
    5d9a:	438a      	bics	r2, r1
    5d9c:	74da      	strb	r2, [r3, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    5d9e:	230f      	movs	r3, #15
    5da0:	18fb      	adds	r3, r7, r3
    5da2:	781b      	ldrb	r3, [r3, #0]
    5da4:	2200      	movs	r2, #0
    5da6:	2101      	movs	r1, #1
    5da8:	0018      	movs	r0, r3
    5daa:	4b1c      	ldr	r3, [pc, #112]	; (5e1c <_usb_d_dev_handle_setup+0xec>)
    5dac:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    5dae:	230f      	movs	r3, #15
    5db0:	18fb      	adds	r3, r7, r3
    5db2:	781b      	ldrb	r3, [r3, #0]
    5db4:	2200      	movs	r2, #0
    5db6:	2100      	movs	r1, #0
    5db8:	0018      	movs	r0, r3
    5dba:	4b19      	ldr	r3, [pc, #100]	; (5e20 <_usb_d_dev_handle_setup+0xf0>)
    5dbc:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    5dbe:	687b      	ldr	r3, [r7, #4]
    5dc0:	7cda      	ldrb	r2, [r3, #19]
    5dc2:	2108      	movs	r1, #8
    5dc4:	438a      	bics	r2, r1
    5dc6:	74da      	strb	r2, [r3, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    5dc8:	230f      	movs	r3, #15
    5dca:	18fb      	adds	r3, r7, r3
    5dcc:	781b      	ldrb	r3, [r3, #0]
    5dce:	2100      	movs	r1, #0
    5dd0:	0018      	movs	r0, r3
    5dd2:	4b14      	ldr	r3, [pc, #80]	; (5e24 <_usb_d_dev_handle_setup+0xf4>)
    5dd4:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    5dd6:	230f      	movs	r3, #15
    5dd8:	18fb      	adds	r3, r7, r3
    5dda:	781b      	ldrb	r3, [r3, #0]
    5ddc:	2101      	movs	r1, #1
    5dde:	0018      	movs	r0, r3
    5de0:	4b10      	ldr	r3, [pc, #64]	; (5e24 <_usb_d_dev_handle_setup+0xf4>)
    5de2:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    5de4:	230f      	movs	r3, #15
    5de6:	18fb      	adds	r3, r7, r3
    5de8:	781b      	ldrb	r3, [r3, #0]
    5dea:	216f      	movs	r1, #111	; 0x6f
    5dec:	0018      	movs	r0, r3
    5dee:	4b0e      	ldr	r3, [pc, #56]	; (5e28 <_usb_d_dev_handle_setup+0xf8>)
    5df0:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    5df2:	230f      	movs	r3, #15
    5df4:	18fb      	adds	r3, r7, r3
    5df6:	781b      	ldrb	r3, [r3, #0]
    5df8:	216f      	movs	r1, #111	; 0x6f
    5dfa:	0018      	movs	r0, r3
    5dfc:	4b0b      	ldr	r3, [pc, #44]	; (5e2c <_usb_d_dev_handle_setup+0xfc>)
    5dfe:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    5e00:	4b0b      	ldr	r3, [pc, #44]	; (5e30 <_usb_d_dev_handle_setup+0x100>)
    5e02:	689b      	ldr	r3, [r3, #8]
    5e04:	687a      	ldr	r2, [r7, #4]
    5e06:	7c92      	ldrb	r2, [r2, #18]
    5e08:	0010      	movs	r0, r2
    5e0a:	4798      	blx	r3
}
    5e0c:	46bd      	mov	sp, r7
    5e0e:	b004      	add	sp, #16
    5e10:	bd80      	pop	{r7, pc}
    5e12:	46c0      	nop			; (mov r8, r8)
    5e14:	00004f21 	.word	0x00004f21
    5e18:	00004ec1 	.word	0x00004ec1
    5e1c:	00005279 	.word	0x00005279
    5e20:	000052e5 	.word	0x000052e5
    5e24:	00005241 	.word	0x00005241
    5e28:	00004c65 	.word	0x00004c65
    5e2c:	00004cc5 	.word	0x00004cc5
    5e30:	20000f88 	.word	0x20000f88

00005e34 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    5e34:	b590      	push	{r4, r7, lr}
    5e36:	b085      	sub	sp, #20
    5e38:	af00      	add	r7, sp, #0
    5e3a:	6078      	str	r0, [r7, #4]
    5e3c:	000a      	movs	r2, r1
    5e3e:	1cfb      	adds	r3, r7, #3
    5e40:	701a      	strb	r2, [r3, #0]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    5e42:	687b      	ldr	r3, [r7, #4]
    5e44:	7c9a      	ldrb	r2, [r3, #18]
    5e46:	230f      	movs	r3, #15
    5e48:	18fb      	adds	r3, r7, r3
    5e4a:	210f      	movs	r1, #15
    5e4c:	400a      	ands	r2, r1
    5e4e:	701a      	strb	r2, [r3, #0]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    5e50:	1cfb      	adds	r3, r7, #3
    5e52:	7819      	ldrb	r1, [r3, #0]
    5e54:	230f      	movs	r3, #15
    5e56:	18fb      	adds	r3, r7, r3
    5e58:	781b      	ldrb	r3, [r3, #0]
    5e5a:	2200      	movs	r2, #0
    5e5c:	0018      	movs	r0, r3
    5e5e:	4b07      	ldr	r3, [pc, #28]	; (5e7c <_usb_d_dev_handle_stall+0x48>)
    5e60:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    5e62:	4b07      	ldr	r3, [pc, #28]	; (5e80 <_usb_d_dev_handle_stall+0x4c>)
    5e64:	691c      	ldr	r4, [r3, #16]
    5e66:	687b      	ldr	r3, [r7, #4]
    5e68:	7c98      	ldrb	r0, [r3, #18]
    5e6a:	687b      	ldr	r3, [r7, #4]
    5e6c:	689b      	ldr	r3, [r3, #8]
    5e6e:	001a      	movs	r2, r3
    5e70:	2101      	movs	r1, #1
    5e72:	47a0      	blx	r4
}
    5e74:	46c0      	nop			; (mov r8, r8)
    5e76:	46bd      	mov	sp, r7
    5e78:	b005      	add	sp, #20
    5e7a:	bd90      	pop	{r4, r7, pc}
    5e7c:	00004e61 	.word	0x00004e61
    5e80:	20000f88 	.word	0x20000f88

00005e84 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    5e84:	b580      	push	{r7, lr}
    5e86:	b088      	sub	sp, #32
    5e88:	af00      	add	r7, sp, #0
    5e8a:	6078      	str	r0, [r7, #4]
    5e8c:	000a      	movs	r2, r1
    5e8e:	1cfb      	adds	r3, r7, #3
    5e90:	701a      	strb	r2, [r3, #0]
	Usb *              hw      = USB;
    5e92:	4b78      	ldr	r3, [pc, #480]	; (6074 <_usb_d_dev_handle_trfail+0x1f0>)
    5e94:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    5e96:	687b      	ldr	r3, [r7, #4]
    5e98:	7c9a      	ldrb	r2, [r3, #18]
    5e9a:	231b      	movs	r3, #27
    5e9c:	18fb      	adds	r3, r7, r3
    5e9e:	210f      	movs	r1, #15
    5ea0:	400a      	ands	r2, r1
    5ea2:	701a      	strb	r2, [r3, #0]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    5ea4:	2310      	movs	r3, #16
    5ea6:	18fb      	adds	r3, r7, r3
    5ea8:	4a73      	ldr	r2, [pc, #460]	; (6078 <_usb_d_dev_handle_trfail+0x1f4>)
    5eaa:	8812      	ldrh	r2, [r2, #0]
    5eac:	801a      	strh	r2, [r3, #0]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    5eae:	231b      	movs	r3, #27
    5eb0:	18fb      	adds	r3, r7, r3
    5eb2:	781b      	ldrb	r3, [r3, #0]
    5eb4:	015a      	lsls	r2, r3, #5
    5eb6:	4b71      	ldr	r3, [pc, #452]	; (607c <_usb_d_dev_handle_trfail+0x1f8>)
    5eb8:	18d3      	adds	r3, r2, r3
    5eba:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    5ebc:	1cfb      	adds	r3, r7, #3
    5ebe:	781b      	ldrb	r3, [r3, #0]
    5ec0:	2b00      	cmp	r3, #0
    5ec2:	d00a      	beq.n	5eda <_usb_d_dev_handle_trfail+0x56>
    5ec4:	231b      	movs	r3, #27
    5ec6:	18fb      	adds	r3, r7, r3
    5ec8:	781a      	ldrb	r2, [r3, #0]
    5eca:	69fb      	ldr	r3, [r7, #28]
    5ecc:	0011      	movs	r1, r2
    5ece:	0018      	movs	r0, r3
    5ed0:	4b6b      	ldr	r3, [pc, #428]	; (6080 <_usb_d_dev_handle_trfail+0x1fc>)
    5ed2:	4798      	blx	r3
    5ed4:	0003      	movs	r3, r0
    5ed6:	001a      	movs	r2, r3
    5ed8:	e009      	b.n	5eee <_usb_d_dev_handle_trfail+0x6a>
    5eda:	231b      	movs	r3, #27
    5edc:	18fb      	adds	r3, r7, r3
    5ede:	781a      	ldrb	r2, [r3, #0]
    5ee0:	69fb      	ldr	r3, [r7, #28]
    5ee2:	0011      	movs	r1, r2
    5ee4:	0018      	movs	r0, r3
    5ee6:	4b67      	ldr	r3, [pc, #412]	; (6084 <_usb_d_dev_handle_trfail+0x200>)
    5ee8:	4798      	blx	r3
    5eea:	0003      	movs	r3, r0
    5eec:	001a      	movs	r2, r3
    5eee:	2313      	movs	r3, #19
    5ef0:	18fb      	adds	r3, r7, r3
    5ef2:	701a      	strb	r2, [r3, #0]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    5ef4:	687b      	ldr	r3, [r7, #4]
    5ef6:	7cdb      	ldrb	r3, [r3, #19]
    5ef8:	2207      	movs	r2, #7
    5efa:	4013      	ands	r3, r2
    5efc:	b2da      	uxtb	r2, r3
    5efe:	2312      	movs	r3, #18
    5f00:	18fb      	adds	r3, r7, r3
    5f02:	3a01      	subs	r2, #1
    5f04:	4251      	negs	r1, r2
    5f06:	414a      	adcs	r2, r1
    5f08:	701a      	strb	r2, [r3, #0]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    5f0a:	1cfb      	adds	r3, r7, #3
    5f0c:	781b      	ldrb	r3, [r3, #0]
    5f0e:	011b      	lsls	r3, r3, #4
    5f10:	697a      	ldr	r2, [r7, #20]
    5f12:	18d3      	adds	r3, r2, r3
    5f14:	7a9b      	ldrb	r3, [r3, #10]
    5f16:	b2da      	uxtb	r2, r3
    5f18:	230c      	movs	r3, #12
    5f1a:	18fb      	adds	r3, r7, r3
    5f1c:	701a      	strb	r2, [r3, #0]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    5f1e:	2313      	movs	r3, #19
    5f20:	18fb      	adds	r3, r7, r3
    5f22:	781b      	ldrb	r3, [r3, #0]
    5f24:	2b02      	cmp	r3, #2
    5f26:	d133      	bne.n	5f90 <_usb_d_dev_handle_trfail+0x10c>
    5f28:	230c      	movs	r3, #12
    5f2a:	18fb      	adds	r3, r7, r3
    5f2c:	781b      	ldrb	r3, [r3, #0]
    5f2e:	2201      	movs	r2, #1
    5f30:	4013      	ands	r3, r2
    5f32:	b2db      	uxtb	r3, r3
    5f34:	2b00      	cmp	r3, #0
    5f36:	d02b      	beq.n	5f90 <_usb_d_dev_handle_trfail+0x10c>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    5f38:	1cfb      	adds	r3, r7, #3
    5f3a:	781b      	ldrb	r3, [r3, #0]
    5f3c:	011b      	lsls	r3, r3, #4
    5f3e:	697a      	ldr	r2, [r7, #20]
    5f40:	18d2      	adds	r2, r2, r3
    5f42:	7a93      	ldrb	r3, [r2, #10]
    5f44:	2101      	movs	r1, #1
    5f46:	438b      	bics	r3, r1
    5f48:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    5f4a:	1cfb      	adds	r3, r7, #3
    5f4c:	781b      	ldrb	r3, [r3, #0]
    5f4e:	2210      	movs	r2, #16
    5f50:	18ba      	adds	r2, r7, r2
    5f52:	5cd2      	ldrb	r2, [r2, r3]
    5f54:	231b      	movs	r3, #27
    5f56:	18fb      	adds	r3, r7, r3
    5f58:	7819      	ldrb	r1, [r3, #0]
    5f5a:	69fb      	ldr	r3, [r7, #28]
    5f5c:	0018      	movs	r0, r3
    5f5e:	4b4a      	ldr	r3, [pc, #296]	; (6088 <_usb_d_dev_handle_trfail+0x204>)
    5f60:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    5f62:	1cfb      	adds	r3, r7, #3
    5f64:	781b      	ldrb	r3, [r3, #0]
    5f66:	2210      	movs	r2, #16
    5f68:	18ba      	adds	r2, r7, r2
    5f6a:	5cd2      	ldrb	r2, [r2, r3]
    5f6c:	231b      	movs	r3, #27
    5f6e:	18fb      	adds	r3, r7, r3
    5f70:	7819      	ldrb	r1, [r3, #0]
    5f72:	69fb      	ldr	r3, [r7, #28]
    5f74:	0018      	movs	r0, r3
    5f76:	4b45      	ldr	r3, [pc, #276]	; (608c <_usb_d_dev_handle_trfail+0x208>)
    5f78:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    5f7a:	1cfb      	adds	r3, r7, #3
    5f7c:	781b      	ldrb	r3, [r3, #0]
    5f7e:	1e5a      	subs	r2, r3, #1
    5f80:	4193      	sbcs	r3, r2
    5f82:	b2d9      	uxtb	r1, r3
    5f84:	687b      	ldr	r3, [r7, #4]
    5f86:	2204      	movs	r2, #4
    5f88:	0018      	movs	r0, r3
    5f8a:	4b41      	ldr	r3, [pc, #260]	; (6090 <_usb_d_dev_handle_trfail+0x20c>)
    5f8c:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    5f8e:	e06d      	b.n	606c <_usb_d_dev_handle_trfail+0x1e8>
	} else if (st.bit.ERRORFLOW) {
    5f90:	230c      	movs	r3, #12
    5f92:	18fb      	adds	r3, r7, r3
    5f94:	781b      	ldrb	r3, [r3, #0]
    5f96:	2202      	movs	r2, #2
    5f98:	4013      	ands	r3, r2
    5f9a:	b2db      	uxtb	r3, r3
    5f9c:	2b00      	cmp	r3, #0
    5f9e:	d044      	beq.n	602a <_usb_d_dev_handle_trfail+0x1a6>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    5fa0:	1cfb      	adds	r3, r7, #3
    5fa2:	781b      	ldrb	r3, [r3, #0]
    5fa4:	011b      	lsls	r3, r3, #4
    5fa6:	697a      	ldr	r2, [r7, #20]
    5fa8:	18d2      	adds	r2, r2, r3
    5faa:	7a93      	ldrb	r3, [r2, #10]
    5fac:	2102      	movs	r1, #2
    5fae:	438b      	bics	r3, r1
    5fb0:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    5fb2:	1cfb      	adds	r3, r7, #3
    5fb4:	781b      	ldrb	r3, [r3, #0]
    5fb6:	2210      	movs	r2, #16
    5fb8:	18ba      	adds	r2, r7, r2
    5fba:	5cd2      	ldrb	r2, [r2, r3]
    5fbc:	231b      	movs	r3, #27
    5fbe:	18fb      	adds	r3, r7, r3
    5fc0:	7819      	ldrb	r1, [r3, #0]
    5fc2:	69fb      	ldr	r3, [r7, #28]
    5fc4:	0018      	movs	r0, r3
    5fc6:	4b30      	ldr	r3, [pc, #192]	; (6088 <_usb_d_dev_handle_trfail+0x204>)
    5fc8:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    5fca:	1cfb      	adds	r3, r7, #3
    5fcc:	781b      	ldrb	r3, [r3, #0]
    5fce:	2210      	movs	r2, #16
    5fd0:	18ba      	adds	r2, r7, r2
    5fd2:	5cd2      	ldrb	r2, [r2, r3]
    5fd4:	231b      	movs	r3, #27
    5fd6:	18fb      	adds	r3, r7, r3
    5fd8:	7819      	ldrb	r1, [r3, #0]
    5fda:	69fb      	ldr	r3, [r7, #28]
    5fdc:	0018      	movs	r0, r3
    5fde:	4b2b      	ldr	r3, [pc, #172]	; (608c <_usb_d_dev_handle_trfail+0x208>)
    5fe0:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    5fe2:	2312      	movs	r3, #18
    5fe4:	18fb      	adds	r3, r7, r3
    5fe6:	781b      	ldrb	r3, [r3, #0]
    5fe8:	2b00      	cmp	r3, #0
    5fea:	d03f      	beq.n	606c <_usb_d_dev_handle_trfail+0x1e8>
    5fec:	687b      	ldr	r3, [r7, #4]
    5fee:	7cdb      	ldrb	r3, [r3, #19]
    5ff0:	2240      	movs	r2, #64	; 0x40
    5ff2:	4013      	ands	r3, r2
    5ff4:	b2db      	uxtb	r3, r3
    5ff6:	2b00      	cmp	r3, #0
    5ff8:	d038      	beq.n	606c <_usb_d_dev_handle_trfail+0x1e8>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    5ffa:	687b      	ldr	r3, [r7, #4]
    5ffc:	7cdb      	ldrb	r3, [r3, #19]
    5ffe:	061b      	lsls	r3, r3, #24
    6000:	0fdb      	lsrs	r3, r3, #31
    6002:	b2db      	uxtb	r3, r3
    6004:	001a      	movs	r2, r3
    6006:	1cfb      	adds	r3, r7, #3
    6008:	781b      	ldrb	r3, [r3, #0]
    600a:	4293      	cmp	r3, r2
    600c:	d02e      	beq.n	606c <_usb_d_dev_handle_trfail+0x1e8>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    600e:	687b      	ldr	r3, [r7, #4]
    6010:	7cdb      	ldrb	r3, [r3, #19]
    6012:	061b      	lsls	r3, r3, #24
    6014:	0fdb      	lsrs	r3, r3, #31
    6016:	b2db      	uxtb	r3, r3
    6018:	1e5a      	subs	r2, r3, #1
    601a:	4193      	sbcs	r3, r2
    601c:	b2d9      	uxtb	r1, r3
    601e:	687b      	ldr	r3, [r7, #4]
    6020:	2200      	movs	r2, #0
    6022:	0018      	movs	r0, r3
    6024:	4b1a      	ldr	r3, [pc, #104]	; (6090 <_usb_d_dev_handle_trfail+0x20c>)
    6026:	4798      	blx	r3
}
    6028:	e020      	b.n	606c <_usb_d_dev_handle_trfail+0x1e8>
		_usbd_ep_clear_bank_status(epn, bank_n);
    602a:	1cfb      	adds	r3, r7, #3
    602c:	781a      	ldrb	r2, [r3, #0]
    602e:	231b      	movs	r3, #27
    6030:	18fb      	adds	r3, r7, r3
    6032:	781b      	ldrb	r3, [r3, #0]
    6034:	0011      	movs	r1, r2
    6036:	0018      	movs	r0, r3
    6038:	4b16      	ldr	r3, [pc, #88]	; (6094 <_usb_d_dev_handle_trfail+0x210>)
    603a:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    603c:	1cfb      	adds	r3, r7, #3
    603e:	781b      	ldrb	r3, [r3, #0]
    6040:	2210      	movs	r2, #16
    6042:	18ba      	adds	r2, r7, r2
    6044:	5cd2      	ldrb	r2, [r2, r3]
    6046:	231b      	movs	r3, #27
    6048:	18fb      	adds	r3, r7, r3
    604a:	7819      	ldrb	r1, [r3, #0]
    604c:	69fb      	ldr	r3, [r7, #28]
    604e:	0018      	movs	r0, r3
    6050:	4b0d      	ldr	r3, [pc, #52]	; (6088 <_usb_d_dev_handle_trfail+0x204>)
    6052:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    6054:	1cfb      	adds	r3, r7, #3
    6056:	781b      	ldrb	r3, [r3, #0]
    6058:	2210      	movs	r2, #16
    605a:	18ba      	adds	r2, r7, r2
    605c:	5cd2      	ldrb	r2, [r2, r3]
    605e:	231b      	movs	r3, #27
    6060:	18fb      	adds	r3, r7, r3
    6062:	7819      	ldrb	r1, [r3, #0]
    6064:	69fb      	ldr	r3, [r7, #28]
    6066:	0018      	movs	r0, r3
    6068:	4b08      	ldr	r3, [pc, #32]	; (608c <_usb_d_dev_handle_trfail+0x208>)
    606a:	4798      	blx	r3
}
    606c:	46c0      	nop			; (mov r8, r8)
    606e:	46bd      	mov	sp, r7
    6070:	b008      	add	sp, #32
    6072:	bd80      	pop	{r7, pc}
    6074:	41005000 	.word	0x41005000
    6078:	00010e1c 	.word	0x00010e1c
    607c:	200010f0 	.word	0x200010f0
    6080:	00004873 	.word	0x00004873
    6084:	00004835 	.word	0x00004835
    6088:	000046db 	.word	0x000046db
    608c:	000047ff 	.word	0x000047ff
    6090:	00006eb1 	.word	0x00006eb1
    6094:	00005241 	.word	0x00005241

00006098 <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    6098:	b580      	push	{r7, lr}
    609a:	b082      	sub	sp, #8
    609c:	af00      	add	r7, sp, #0
    609e:	6078      	str	r0, [r7, #4]
    60a0:	000a      	movs	r2, r1
    60a2:	1cfb      	adds	r3, r7, #3
    60a4:	701a      	strb	r2, [r3, #0]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    60a6:	1cfb      	adds	r3, r7, #3
    60a8:	781b      	ldrb	r3, [r3, #0]
    60aa:	2210      	movs	r2, #16
    60ac:	4013      	ands	r3, r2
    60ae:	d004      	beq.n	60ba <_usb_d_dev_trans_setup_isr+0x22>
		_usb_d_dev_handle_setup(ept);
    60b0:	687b      	ldr	r3, [r7, #4]
    60b2:	0018      	movs	r0, r3
    60b4:	4b0d      	ldr	r3, [pc, #52]	; (60ec <_usb_d_dev_trans_setup_isr+0x54>)
    60b6:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    60b8:	e014      	b.n	60e4 <_usb_d_dev_trans_setup_isr+0x4c>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    60ba:	1cfb      	adds	r3, r7, #3
    60bc:	781b      	ldrb	r3, [r3, #0]
    60be:	2240      	movs	r2, #64	; 0x40
    60c0:	4013      	ands	r3, r2
    60c2:	d005      	beq.n	60d0 <_usb_d_dev_trans_setup_isr+0x38>
		_usb_d_dev_handle_stall(ept, 1);
    60c4:	687b      	ldr	r3, [r7, #4]
    60c6:	2101      	movs	r1, #1
    60c8:	0018      	movs	r0, r3
    60ca:	4b09      	ldr	r3, [pc, #36]	; (60f0 <_usb_d_dev_trans_setup_isr+0x58>)
    60cc:	4798      	blx	r3
}
    60ce:	e009      	b.n	60e4 <_usb_d_dev_trans_setup_isr+0x4c>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    60d0:	1cfb      	adds	r3, r7, #3
    60d2:	781b      	ldrb	r3, [r3, #0]
    60d4:	2220      	movs	r2, #32
    60d6:	4013      	ands	r3, r2
    60d8:	d004      	beq.n	60e4 <_usb_d_dev_trans_setup_isr+0x4c>
		_usb_d_dev_handle_stall(ept, 0);
    60da:	687b      	ldr	r3, [r7, #4]
    60dc:	2100      	movs	r1, #0
    60de:	0018      	movs	r0, r3
    60e0:	4b03      	ldr	r3, [pc, #12]	; (60f0 <_usb_d_dev_trans_setup_isr+0x58>)
    60e2:	4798      	blx	r3
}
    60e4:	46c0      	nop			; (mov r8, r8)
    60e6:	46bd      	mov	sp, r7
    60e8:	b002      	add	sp, #8
    60ea:	bd80      	pop	{r7, pc}
    60ec:	00005d31 	.word	0x00005d31
    60f0:	00005e35 	.word	0x00005e35

000060f4 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    60f4:	b580      	push	{r7, lr}
    60f6:	b082      	sub	sp, #8
    60f8:	af00      	add	r7, sp, #0
    60fa:	6078      	str	r0, [r7, #4]
    60fc:	000a      	movs	r2, r1
    60fe:	1cfb      	adds	r3, r7, #3
    6100:	701a      	strb	r2, [r3, #0]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    6102:	1cfb      	adds	r3, r7, #3
    6104:	781b      	ldrb	r3, [r3, #0]
    6106:	2240      	movs	r2, #64	; 0x40
    6108:	4013      	ands	r3, r2
    610a:	d005      	beq.n	6118 <_usb_d_dev_trans_in_isr+0x24>
		_usb_d_dev_handle_stall(ept, 1);
    610c:	687b      	ldr	r3, [r7, #4]
    610e:	2101      	movs	r1, #1
    6110:	0018      	movs	r0, r3
    6112:	4b1c      	ldr	r3, [pc, #112]	; (6184 <_usb_d_dev_trans_in_isr+0x90>)
    6114:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    6116:	e030      	b.n	617a <_usb_d_dev_trans_in_isr+0x86>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    6118:	1cfb      	adds	r3, r7, #3
    611a:	781b      	ldrb	r3, [r3, #0]
    611c:	2208      	movs	r2, #8
    611e:	4013      	ands	r3, r2
    6120:	d005      	beq.n	612e <_usb_d_dev_trans_in_isr+0x3a>
		_usb_d_dev_handle_trfail(ept, 1);
    6122:	687b      	ldr	r3, [r7, #4]
    6124:	2101      	movs	r1, #1
    6126:	0018      	movs	r0, r3
    6128:	4b17      	ldr	r3, [pc, #92]	; (6188 <_usb_d_dev_trans_in_isr+0x94>)
    612a:	4798      	blx	r3
}
    612c:	e025      	b.n	617a <_usb_d_dev_trans_in_isr+0x86>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    612e:	1cfb      	adds	r3, r7, #3
    6130:	781b      	ldrb	r3, [r3, #0]
    6132:	2202      	movs	r2, #2
    6134:	4013      	ands	r3, r2
    6136:	d005      	beq.n	6144 <_usb_d_dev_trans_in_isr+0x50>
		_usb_d_dev_in_next(ept, true);
    6138:	687b      	ldr	r3, [r7, #4]
    613a:	2101      	movs	r1, #1
    613c:	0018      	movs	r0, r3
    613e:	4b13      	ldr	r3, [pc, #76]	; (618c <_usb_d_dev_trans_in_isr+0x98>)
    6140:	4798      	blx	r3
}
    6142:	e01a      	b.n	617a <_usb_d_dev_trans_in_isr+0x86>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    6144:	687b      	ldr	r3, [r7, #4]
    6146:	7cdb      	ldrb	r3, [r3, #19]
    6148:	2207      	movs	r2, #7
    614a:	4013      	ands	r3, r2
    614c:	b2db      	uxtb	r3, r3
    614e:	2b01      	cmp	r3, #1
    6150:	d113      	bne.n	617a <_usb_d_dev_trans_in_isr+0x86>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    6152:	1cfb      	adds	r3, r7, #3
    6154:	781b      	ldrb	r3, [r3, #0]
    6156:	2204      	movs	r2, #4
    6158:	4013      	ands	r3, r2
    615a:	d005      	beq.n	6168 <_usb_d_dev_trans_in_isr+0x74>
			_usb_d_dev_handle_trfail(ept, 0);
    615c:	687b      	ldr	r3, [r7, #4]
    615e:	2100      	movs	r1, #0
    6160:	0018      	movs	r0, r3
    6162:	4b09      	ldr	r3, [pc, #36]	; (6188 <_usb_d_dev_trans_in_isr+0x94>)
    6164:	4798      	blx	r3
}
    6166:	e008      	b.n	617a <_usb_d_dev_trans_in_isr+0x86>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    6168:	1cfb      	adds	r3, r7, #3
    616a:	781b      	ldrb	r3, [r3, #0]
    616c:	2210      	movs	r2, #16
    616e:	4013      	ands	r3, r2
    6170:	d003      	beq.n	617a <_usb_d_dev_trans_in_isr+0x86>
			_usb_d_dev_handle_setup(ept);
    6172:	687b      	ldr	r3, [r7, #4]
    6174:	0018      	movs	r0, r3
    6176:	4b06      	ldr	r3, [pc, #24]	; (6190 <_usb_d_dev_trans_in_isr+0x9c>)
    6178:	4798      	blx	r3
}
    617a:	46c0      	nop			; (mov r8, r8)
    617c:	46bd      	mov	sp, r7
    617e:	b002      	add	sp, #8
    6180:	bd80      	pop	{r7, pc}
    6182:	46c0      	nop			; (mov r8, r8)
    6184:	00005e35 	.word	0x00005e35
    6188:	00005e85 	.word	0x00005e85
    618c:	00005701 	.word	0x00005701
    6190:	00005d31 	.word	0x00005d31

00006194 <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    6194:	b580      	push	{r7, lr}
    6196:	b082      	sub	sp, #8
    6198:	af00      	add	r7, sp, #0
    619a:	6078      	str	r0, [r7, #4]
    619c:	000a      	movs	r2, r1
    619e:	1cfb      	adds	r3, r7, #3
    61a0:	701a      	strb	r2, [r3, #0]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    61a2:	1cfb      	adds	r3, r7, #3
    61a4:	781b      	ldrb	r3, [r3, #0]
    61a6:	2220      	movs	r2, #32
    61a8:	4013      	ands	r3, r2
    61aa:	d005      	beq.n	61b8 <_usb_d_dev_trans_out_isr+0x24>
		_usb_d_dev_handle_stall(ept, 0);
    61ac:	687b      	ldr	r3, [r7, #4]
    61ae:	2100      	movs	r1, #0
    61b0:	0018      	movs	r0, r3
    61b2:	4b1c      	ldr	r3, [pc, #112]	; (6224 <_usb_d_dev_trans_out_isr+0x90>)
    61b4:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    61b6:	e030      	b.n	621a <_usb_d_dev_trans_out_isr+0x86>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    61b8:	1cfb      	adds	r3, r7, #3
    61ba:	781b      	ldrb	r3, [r3, #0]
    61bc:	2204      	movs	r2, #4
    61be:	4013      	ands	r3, r2
    61c0:	d005      	beq.n	61ce <_usb_d_dev_trans_out_isr+0x3a>
		_usb_d_dev_handle_trfail(ept, 0);
    61c2:	687b      	ldr	r3, [r7, #4]
    61c4:	2100      	movs	r1, #0
    61c6:	0018      	movs	r0, r3
    61c8:	4b17      	ldr	r3, [pc, #92]	; (6228 <_usb_d_dev_trans_out_isr+0x94>)
    61ca:	4798      	blx	r3
}
    61cc:	e025      	b.n	621a <_usb_d_dev_trans_out_isr+0x86>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    61ce:	1cfb      	adds	r3, r7, #3
    61d0:	781b      	ldrb	r3, [r3, #0]
    61d2:	2201      	movs	r2, #1
    61d4:	4013      	ands	r3, r2
    61d6:	d005      	beq.n	61e4 <_usb_d_dev_trans_out_isr+0x50>
		_usb_d_dev_out_next(ept, true);
    61d8:	687b      	ldr	r3, [r7, #4]
    61da:	2101      	movs	r1, #1
    61dc:	0018      	movs	r0, r3
    61de:	4b13      	ldr	r3, [pc, #76]	; (622c <_usb_d_dev_trans_out_isr+0x98>)
    61e0:	4798      	blx	r3
}
    61e2:	e01a      	b.n	621a <_usb_d_dev_trans_out_isr+0x86>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    61e4:	687b      	ldr	r3, [r7, #4]
    61e6:	7cdb      	ldrb	r3, [r3, #19]
    61e8:	2207      	movs	r2, #7
    61ea:	4013      	ands	r3, r2
    61ec:	b2db      	uxtb	r3, r3
    61ee:	2b01      	cmp	r3, #1
    61f0:	d113      	bne.n	621a <_usb_d_dev_trans_out_isr+0x86>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    61f2:	1cfb      	adds	r3, r7, #3
    61f4:	781b      	ldrb	r3, [r3, #0]
    61f6:	2208      	movs	r2, #8
    61f8:	4013      	ands	r3, r2
    61fa:	d005      	beq.n	6208 <_usb_d_dev_trans_out_isr+0x74>
			_usb_d_dev_handle_trfail(ept, 1);
    61fc:	687b      	ldr	r3, [r7, #4]
    61fe:	2101      	movs	r1, #1
    6200:	0018      	movs	r0, r3
    6202:	4b09      	ldr	r3, [pc, #36]	; (6228 <_usb_d_dev_trans_out_isr+0x94>)
    6204:	4798      	blx	r3
}
    6206:	e008      	b.n	621a <_usb_d_dev_trans_out_isr+0x86>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    6208:	1cfb      	adds	r3, r7, #3
    620a:	781b      	ldrb	r3, [r3, #0]
    620c:	2210      	movs	r2, #16
    620e:	4013      	ands	r3, r2
    6210:	d003      	beq.n	621a <_usb_d_dev_trans_out_isr+0x86>
			_usb_d_dev_handle_setup(ept);
    6212:	687b      	ldr	r3, [r7, #4]
    6214:	0018      	movs	r0, r3
    6216:	4b06      	ldr	r3, [pc, #24]	; (6230 <_usb_d_dev_trans_out_isr+0x9c>)
    6218:	4798      	blx	r3
}
    621a:	46c0      	nop			; (mov r8, r8)
    621c:	46bd      	mov	sp, r7
    621e:	b002      	add	sp, #8
    6220:	bd80      	pop	{r7, pc}
    6222:	46c0      	nop			; (mov r8, r8)
    6224:	00005e35 	.word	0x00005e35
    6228:	00005e85 	.word	0x00005e85
    622c:	000059a1 	.word	0x000059a1
    6230:	00005d31 	.word	0x00005d31

00006234 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    6234:	b580      	push	{r7, lr}
    6236:	b084      	sub	sp, #16
    6238:	af00      	add	r7, sp, #0
    623a:	6078      	str	r0, [r7, #4]
    623c:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    623e:	4b37      	ldr	r3, [pc, #220]	; (631c <_usb_d_dev_handle_eps+0xe8>)
    6240:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    6242:	683b      	ldr	r3, [r7, #0]
    6244:	7c9a      	ldrb	r2, [r3, #18]
    6246:	230b      	movs	r3, #11
    6248:	18fb      	adds	r3, r7, r3
    624a:	210f      	movs	r1, #15
    624c:	400a      	ands	r2, r1
    624e:	701a      	strb	r2, [r3, #0]

	if (!(epint & (1u << epn))) {
    6250:	230b      	movs	r3, #11
    6252:	18fb      	adds	r3, r7, r3
    6254:	781b      	ldrb	r3, [r3, #0]
    6256:	2201      	movs	r2, #1
    6258:	409a      	lsls	r2, r3
    625a:	0013      	movs	r3, r2
    625c:	687a      	ldr	r2, [r7, #4]
    625e:	4013      	ands	r3, r2
    6260:	d057      	beq.n	6312 <_usb_d_dev_handle_eps+0xde>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    6262:	230b      	movs	r3, #11
    6264:	18fb      	adds	r3, r7, r3
    6266:	781a      	ldrb	r2, [r3, #0]
    6268:	230a      	movs	r3, #10
    626a:	18fb      	adds	r3, r7, r3
    626c:	68f9      	ldr	r1, [r7, #12]
    626e:	3208      	adds	r2, #8
    6270:	0152      	lsls	r2, r2, #5
    6272:	188a      	adds	r2, r1, r2
    6274:	3207      	adds	r2, #7
    6276:	7812      	ldrb	r2, [r2, #0]
    6278:	701a      	strb	r2, [r3, #0]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    627a:	230b      	movs	r3, #11
    627c:	18fb      	adds	r3, r7, r3
    627e:	7819      	ldrb	r1, [r3, #0]
    6280:	2309      	movs	r3, #9
    6282:	18fb      	adds	r3, r7, r3
    6284:	68f8      	ldr	r0, [r7, #12]
    6286:	220a      	movs	r2, #10
    6288:	32ff      	adds	r2, #255	; 0xff
    628a:	0149      	lsls	r1, r1, #5
    628c:	1841      	adds	r1, r0, r1
    628e:	188a      	adds	r2, r1, r2
    6290:	7812      	ldrb	r2, [r2, #0]
    6292:	701a      	strb	r2, [r3, #0]
	flags &= mask;
    6294:	230a      	movs	r3, #10
    6296:	18fb      	adds	r3, r7, r3
    6298:	220a      	movs	r2, #10
    629a:	18ba      	adds	r2, r7, r2
    629c:	2109      	movs	r1, #9
    629e:	1879      	adds	r1, r7, r1
    62a0:	7812      	ldrb	r2, [r2, #0]
    62a2:	7809      	ldrb	r1, [r1, #0]
    62a4:	400a      	ands	r2, r1
    62a6:	701a      	strb	r2, [r3, #0]
	if (flags) {
    62a8:	230a      	movs	r3, #10
    62aa:	18fb      	adds	r3, r7, r3
    62ac:	781b      	ldrb	r3, [r3, #0]
    62ae:	2b00      	cmp	r3, #0
    62b0:	d030      	beq.n	6314 <_usb_d_dev_handle_eps+0xe0>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    62b2:	683b      	ldr	r3, [r7, #0]
    62b4:	7cdb      	ldrb	r3, [r3, #19]
    62b6:	2207      	movs	r2, #7
    62b8:	4013      	ands	r3, r2
    62ba:	b2db      	uxtb	r3, r3
    62bc:	2b01      	cmp	r3, #1
    62be:	d10f      	bne.n	62e0 <_usb_d_dev_handle_eps+0xac>
    62c0:	683b      	ldr	r3, [r7, #0]
    62c2:	7cdb      	ldrb	r3, [r3, #19]
    62c4:	2240      	movs	r2, #64	; 0x40
    62c6:	4013      	ands	r3, r2
    62c8:	b2db      	uxtb	r3, r3
    62ca:	2b00      	cmp	r3, #0
    62cc:	d108      	bne.n	62e0 <_usb_d_dev_handle_eps+0xac>
			_usb_d_dev_trans_setup_isr(ept, flags);
    62ce:	230a      	movs	r3, #10
    62d0:	18fb      	adds	r3, r7, r3
    62d2:	781a      	ldrb	r2, [r3, #0]
    62d4:	683b      	ldr	r3, [r7, #0]
    62d6:	0011      	movs	r1, r2
    62d8:	0018      	movs	r0, r3
    62da:	4b11      	ldr	r3, [pc, #68]	; (6320 <_usb_d_dev_handle_eps+0xec>)
    62dc:	4798      	blx	r3
    62de:	e019      	b.n	6314 <_usb_d_dev_handle_eps+0xe0>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    62e0:	683b      	ldr	r3, [r7, #0]
    62e2:	7cdb      	ldrb	r3, [r3, #19]
    62e4:	227f      	movs	r2, #127	; 0x7f
    62e6:	4393      	bics	r3, r2
    62e8:	b2db      	uxtb	r3, r3
    62ea:	2b00      	cmp	r3, #0
    62ec:	d008      	beq.n	6300 <_usb_d_dev_handle_eps+0xcc>
			_usb_d_dev_trans_in_isr(ept, flags);
    62ee:	230a      	movs	r3, #10
    62f0:	18fb      	adds	r3, r7, r3
    62f2:	781a      	ldrb	r2, [r3, #0]
    62f4:	683b      	ldr	r3, [r7, #0]
    62f6:	0011      	movs	r1, r2
    62f8:	0018      	movs	r0, r3
    62fa:	4b0a      	ldr	r3, [pc, #40]	; (6324 <_usb_d_dev_handle_eps+0xf0>)
    62fc:	4798      	blx	r3
    62fe:	e009      	b.n	6314 <_usb_d_dev_handle_eps+0xe0>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    6300:	230a      	movs	r3, #10
    6302:	18fb      	adds	r3, r7, r3
    6304:	781a      	ldrb	r2, [r3, #0]
    6306:	683b      	ldr	r3, [r7, #0]
    6308:	0011      	movs	r1, r2
    630a:	0018      	movs	r0, r3
    630c:	4b06      	ldr	r3, [pc, #24]	; (6328 <_usb_d_dev_handle_eps+0xf4>)
    630e:	4798      	blx	r3
    6310:	e000      	b.n	6314 <_usb_d_dev_handle_eps+0xe0>
		return;
    6312:	46c0      	nop			; (mov r8, r8)
		}
	}
}
    6314:	46bd      	mov	sp, r7
    6316:	b004      	add	sp, #16
    6318:	bd80      	pop	{r7, pc}
    631a:	46c0      	nop			; (mov r8, r8)
    631c:	41005000 	.word	0x41005000
    6320:	00006099 	.word	0x00006099
    6324:	000060f5 	.word	0x000060f5
    6328:	00006195 	.word	0x00006195

0000632c <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    632c:	b580      	push	{r7, lr}
    632e:	b084      	sub	sp, #16
    6330:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    6332:	4b1f      	ldr	r3, [pc, #124]	; (63b0 <_usb_d_dev_handler+0x84>)
    6334:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    6336:	1dbb      	adds	r3, r7, #6
    6338:	68ba      	ldr	r2, [r7, #8]
    633a:	8c12      	ldrh	r2, [r2, #32]
    633c:	801a      	strh	r2, [r3, #0]
	if (0 == epint) {
    633e:	1dbb      	adds	r3, r7, #6
    6340:	881b      	ldrh	r3, [r3, #0]
    6342:	2b00      	cmp	r3, #0
    6344:	d103      	bne.n	634e <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    6346:	4b1b      	ldr	r3, [pc, #108]	; (63b4 <_usb_d_dev_handler+0x88>)
    6348:	4798      	blx	r3
    634a:	1e03      	subs	r3, r0, #0
    634c:	d12b      	bne.n	63a6 <_usb_d_dev_handler+0x7a>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    634e:	230f      	movs	r3, #15
    6350:	18fb      	adds	r3, r7, r3
    6352:	2200      	movs	r2, #0
    6354:	701a      	strb	r2, [r3, #0]
    6356:	e020      	b.n	639a <_usb_d_dev_handler+0x6e>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    6358:	230f      	movs	r3, #15
    635a:	18fb      	adds	r3, r7, r3
    635c:	781a      	ldrb	r2, [r3, #0]
    635e:	0013      	movs	r3, r2
    6360:	009b      	lsls	r3, r3, #2
    6362:	189b      	adds	r3, r3, r2
    6364:	009b      	lsls	r3, r3, #2
    6366:	3310      	adds	r3, #16
    6368:	001a      	movs	r2, r3
    636a:	4b13      	ldr	r3, [pc, #76]	; (63b8 <_usb_d_dev_handler+0x8c>)
    636c:	18d3      	adds	r3, r2, r3
    636e:	3304      	adds	r3, #4
    6370:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    6372:	683b      	ldr	r3, [r7, #0]
    6374:	7c9b      	ldrb	r3, [r3, #18]
    6376:	2bff      	cmp	r3, #255	; 0xff
    6378:	d007      	beq.n	638a <_usb_d_dev_handler+0x5e>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    637a:	1dbb      	adds	r3, r7, #6
    637c:	881b      	ldrh	r3, [r3, #0]
    637e:	683a      	ldr	r2, [r7, #0]
    6380:	0011      	movs	r1, r2
    6382:	0018      	movs	r0, r3
    6384:	4b0d      	ldr	r3, [pc, #52]	; (63bc <_usb_d_dev_handler+0x90>)
    6386:	4798      	blx	r3
    6388:	e000      	b.n	638c <_usb_d_dev_handler+0x60>
			continue;
    638a:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < USB_D_N_EP; i++) {
    638c:	230f      	movs	r3, #15
    638e:	18fb      	adds	r3, r7, r3
    6390:	781a      	ldrb	r2, [r3, #0]
    6392:	230f      	movs	r3, #15
    6394:	18fb      	adds	r3, r7, r3
    6396:	3201      	adds	r2, #1
    6398:	701a      	strb	r2, [r3, #0]
    639a:	230f      	movs	r3, #15
    639c:	18fb      	adds	r3, r7, r3
    639e:	781b      	ldrb	r3, [r3, #0]
    63a0:	2b10      	cmp	r3, #16
    63a2:	d9d9      	bls.n	6358 <_usb_d_dev_handler+0x2c>
    63a4:	e000      	b.n	63a8 <_usb_d_dev_handler+0x7c>
			return;
    63a6:	46c0      	nop			; (mov r8, r8)
	}
}
    63a8:	46bd      	mov	sp, r7
    63aa:	b004      	add	sp, #16
    63ac:	bd80      	pop	{r7, pc}
    63ae:	46c0      	nop			; (mov r8, r8)
    63b0:	41005000 	.word	0x41005000
    63b4:	00005635 	.word	0x00005635
    63b8:	20000f88 	.word	0x20000f88
    63bc:	00006235 	.word	0x00006235

000063c0 <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    63c0:	b580      	push	{r7, lr}
    63c2:	b082      	sub	sp, #8
    63c4:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    63c6:	1dfb      	adds	r3, r7, #7
    63c8:	2200      	movs	r2, #0
    63ca:	701a      	strb	r2, [r3, #0]
    63cc:	e02b      	b.n	6426 <_usb_d_dev_reset_epts+0x66>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    63ce:	1dfb      	adds	r3, r7, #7
    63d0:	781a      	ldrb	r2, [r3, #0]
    63d2:	0013      	movs	r3, r2
    63d4:	009b      	lsls	r3, r3, #2
    63d6:	189b      	adds	r3, r3, r2
    63d8:	009b      	lsls	r3, r3, #2
    63da:	3310      	adds	r3, #16
    63dc:	001a      	movs	r2, r3
    63de:	4b19      	ldr	r3, [pc, #100]	; (6444 <_usb_d_dev_reset_epts+0x84>)
    63e0:	18d3      	adds	r3, r2, r3
    63e2:	3304      	adds	r3, #4
    63e4:	2103      	movs	r1, #3
    63e6:	0018      	movs	r0, r3
    63e8:	4b17      	ldr	r3, [pc, #92]	; (6448 <_usb_d_dev_reset_epts+0x88>)
    63ea:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    63ec:	1dfb      	adds	r3, r7, #7
    63ee:	781a      	ldrb	r2, [r3, #0]
    63f0:	4914      	ldr	r1, [pc, #80]	; (6444 <_usb_d_dev_reset_epts+0x84>)
    63f2:	2026      	movs	r0, #38	; 0x26
    63f4:	0013      	movs	r3, r2
    63f6:	009b      	lsls	r3, r3, #2
    63f8:	189b      	adds	r3, r3, r2
    63fa:	009b      	lsls	r3, r3, #2
    63fc:	18cb      	adds	r3, r1, r3
    63fe:	181b      	adds	r3, r3, r0
    6400:	22ff      	movs	r2, #255	; 0xff
    6402:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    6404:	1dfb      	adds	r3, r7, #7
    6406:	781a      	ldrb	r2, [r3, #0]
    6408:	490e      	ldr	r1, [pc, #56]	; (6444 <_usb_d_dev_reset_epts+0x84>)
    640a:	2027      	movs	r0, #39	; 0x27
    640c:	0013      	movs	r3, r2
    640e:	009b      	lsls	r3, r3, #2
    6410:	189b      	adds	r3, r3, r2
    6412:	009b      	lsls	r3, r3, #2
    6414:	18cb      	adds	r3, r1, r3
    6416:	181b      	adds	r3, r3, r0
    6418:	2200      	movs	r2, #0
    641a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    641c:	1dfb      	adds	r3, r7, #7
    641e:	781a      	ldrb	r2, [r3, #0]
    6420:	1dfb      	adds	r3, r7, #7
    6422:	3201      	adds	r2, #1
    6424:	701a      	strb	r2, [r3, #0]
    6426:	1dfb      	adds	r3, r7, #7
    6428:	781b      	ldrb	r3, [r3, #0]
    642a:	2b10      	cmp	r3, #16
    642c:	d9cf      	bls.n	63ce <_usb_d_dev_reset_epts+0xe>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    642e:	2380      	movs	r3, #128	; 0x80
    6430:	005a      	lsls	r2, r3, #1
    6432:	4b06      	ldr	r3, [pc, #24]	; (644c <_usb_d_dev_reset_epts+0x8c>)
    6434:	2100      	movs	r1, #0
    6436:	0018      	movs	r0, r3
    6438:	4b05      	ldr	r3, [pc, #20]	; (6450 <_usb_d_dev_reset_epts+0x90>)
    643a:	4798      	blx	r3
}
    643c:	46c0      	nop			; (mov r8, r8)
    643e:	46bd      	mov	sp, r7
    6440:	b002      	add	sp, #8
    6442:	bd80      	pop	{r7, pc}
    6444:	20000f88 	.word	0x20000f88
    6448:	00006e65 	.word	0x00006e65
    644c:	200010f0 	.word	0x200010f0
    6450:	0000b785 	.word	0x0000b785

00006454 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    6454:	b580      	push	{r7, lr}
    6456:	b084      	sub	sp, #16
    6458:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    645a:	4b34      	ldr	r3, [pc, #208]	; (652c <_usb_d_dev_init+0xd8>)
    645c:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    645e:	230b      	movs	r3, #11
    6460:	18fb      	adds	r3, r7, r3
    6462:	2201      	movs	r2, #1
    6464:	701a      	strb	r2, [r3, #0]
	const uint8_t spdconf[4] = {
    6466:	1d3b      	adds	r3, r7, #4
    6468:	2204      	movs	r2, #4
    646a:	701a      	strb	r2, [r3, #0]
    646c:	1d3b      	adds	r3, r7, #4
    646e:	2200      	movs	r2, #0
    6470:	705a      	strb	r2, [r3, #1]
    6472:	1d3b      	adds	r3, r7, #4
    6474:	2200      	movs	r2, #0
    6476:	709a      	strb	r2, [r3, #2]
    6478:	1d3b      	adds	r3, r7, #4
    647a:	2200      	movs	r2, #0
    647c:	70da      	strb	r2, [r3, #3]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    647e:	68fb      	ldr	r3, [r7, #12]
    6480:	2101      	movs	r1, #1
    6482:	0018      	movs	r0, r3
    6484:	4b2a      	ldr	r3, [pc, #168]	; (6530 <_usb_d_dev_init+0xdc>)
    6486:	4798      	blx	r3
    6488:	0003      	movs	r3, r0
    648a:	001a      	movs	r2, r3
    648c:	2301      	movs	r3, #1
    648e:	4053      	eors	r3, r2
    6490:	b2db      	uxtb	r3, r3
    6492:	2b00      	cmp	r3, #0
    6494:	d014      	beq.n	64c0 <_usb_d_dev_init+0x6c>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    6496:	68fb      	ldr	r3, [r7, #12]
    6498:	2102      	movs	r1, #2
    649a:	0018      	movs	r0, r3
    649c:	4b25      	ldr	r3, [pc, #148]	; (6534 <_usb_d_dev_init+0xe0>)
    649e:	4798      	blx	r3
    64a0:	1e03      	subs	r3, r0, #0
    64a2:	d008      	beq.n	64b6 <_usb_d_dev_init+0x62>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    64a4:	68fb      	ldr	r3, [r7, #12]
    64a6:	0018      	movs	r0, r3
    64a8:	4b23      	ldr	r3, [pc, #140]	; (6538 <_usb_d_dev_init+0xe4>)
    64aa:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    64ac:	68fb      	ldr	r3, [r7, #12]
    64ae:	2102      	movs	r1, #2
    64b0:	0018      	movs	r0, r3
    64b2:	4b22      	ldr	r3, [pc, #136]	; (653c <_usb_d_dev_init+0xe8>)
    64b4:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    64b6:	68fb      	ldr	r3, [r7, #12]
    64b8:	2101      	movs	r1, #1
    64ba:	0018      	movs	r0, r3
    64bc:	4b20      	ldr	r3, [pc, #128]	; (6540 <_usb_d_dev_init+0xec>)
    64be:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    64c0:	68fb      	ldr	r3, [r7, #12]
    64c2:	2101      	movs	r1, #1
    64c4:	0018      	movs	r0, r3
    64c6:	4b1d      	ldr	r3, [pc, #116]	; (653c <_usb_d_dev_init+0xe8>)
    64c8:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    64ca:	4b1e      	ldr	r3, [pc, #120]	; (6544 <_usb_d_dev_init+0xf0>)
    64cc:	4a1e      	ldr	r2, [pc, #120]	; (6548 <_usb_d_dev_init+0xf4>)
    64ce:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    64d0:	4b1c      	ldr	r3, [pc, #112]	; (6544 <_usb_d_dev_init+0xf0>)
    64d2:	4a1d      	ldr	r2, [pc, #116]	; (6548 <_usb_d_dev_init+0xf4>)
    64d4:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    64d6:	4b1b      	ldr	r3, [pc, #108]	; (6544 <_usb_d_dev_init+0xf0>)
    64d8:	4a1b      	ldr	r2, [pc, #108]	; (6548 <_usb_d_dev_init+0xf4>)
    64da:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    64dc:	4b19      	ldr	r3, [pc, #100]	; (6544 <_usb_d_dev_init+0xf0>)
    64de:	4a1a      	ldr	r2, [pc, #104]	; (6548 <_usb_d_dev_init+0xf4>)
    64e0:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    64e2:	4b18      	ldr	r3, [pc, #96]	; (6544 <_usb_d_dev_init+0xf0>)
    64e4:	4a18      	ldr	r2, [pc, #96]	; (6548 <_usb_d_dev_init+0xf4>)
    64e6:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    64e8:	4b18      	ldr	r3, [pc, #96]	; (654c <_usb_d_dev_init+0xf8>)
    64ea:	4798      	blx	r3

	_usb_load_calib();
    64ec:	4b18      	ldr	r3, [pc, #96]	; (6550 <_usb_d_dev_init+0xfc>)
    64ee:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    64f0:	68fb      	ldr	r3, [r7, #12]
    64f2:	2104      	movs	r1, #4
    64f4:	0018      	movs	r0, r3
    64f6:	4b12      	ldr	r3, [pc, #72]	; (6540 <_usb_d_dev_init+0xec>)
    64f8:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    64fa:	4a16      	ldr	r2, [pc, #88]	; (6554 <_usb_d_dev_init+0x100>)
    64fc:	68fb      	ldr	r3, [r7, #12]
    64fe:	0011      	movs	r1, r2
    6500:	0018      	movs	r0, r3
    6502:	4b15      	ldr	r3, [pc, #84]	; (6558 <_usb_d_dev_init+0x104>)
    6504:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    6506:	230b      	movs	r3, #11
    6508:	18fb      	adds	r3, r7, r3
    650a:	781b      	ldrb	r3, [r3, #0]
    650c:	1d3a      	adds	r2, r7, #4
    650e:	5cd3      	ldrb	r3, [r2, r3]
    6510:	2201      	movs	r2, #1
    6512:	4313      	orrs	r3, r2
    6514:	b2db      	uxtb	r3, r3
    6516:	b29a      	uxth	r2, r3
    6518:	68fb      	ldr	r3, [r7, #12]
    651a:	0011      	movs	r1, r2
    651c:	0018      	movs	r0, r3
    651e:	4b0f      	ldr	r3, [pc, #60]	; (655c <_usb_d_dev_init+0x108>)
    6520:	4798      	blx	r3

	return ERR_NONE;
    6522:	2300      	movs	r3, #0
}
    6524:	0018      	movs	r0, r3
    6526:	46bd      	mov	sp, r7
    6528:	b004      	add	sp, #16
    652a:	bd80      	pop	{r7, pc}
    652c:	41005000 	.word	0x41005000
    6530:	0000463b 	.word	0x0000463b
    6534:	000049f9 	.word	0x000049f9
    6538:	000049c9 	.word	0x000049c9
    653c:	00004611 	.word	0x00004611
    6540:	00004a41 	.word	0x00004a41
    6544:	20000f88 	.word	0x20000f88
    6548:	00004b05 	.word	0x00004b05
    654c:	000063c1 	.word	0x000063c1
    6550:	00004b19 	.word	0x00004b19
    6554:	200010f0 	.word	0x200010f0
    6558:	00004aed 	.word	0x00004aed
    655c:	00004ab1 	.word	0x00004ab1

00006560 <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_IRQn);
	NVIC_ClearPendingIRQ(USB_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    6560:	b590      	push	{r4, r7, lr}
    6562:	b083      	sub	sp, #12
    6564:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    6566:	4b18      	ldr	r3, [pc, #96]	; (65c8 <_usb_d_dev_enable+0x68>)
    6568:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    656a:	687b      	ldr	r3, [r7, #4]
    656c:	2103      	movs	r1, #3
    656e:	0018      	movs	r0, r3
    6570:	4b16      	ldr	r3, [pc, #88]	; (65cc <_usb_d_dev_enable+0x6c>)
    6572:	4798      	blx	r3
    6574:	1e03      	subs	r3, r0, #0
    6576:	d002      	beq.n	657e <_usb_d_dev_enable+0x1e>
		return -USB_ERR_DENIED;
    6578:	2311      	movs	r3, #17
    657a:	425b      	negs	r3, r3
    657c:	e01f      	b.n	65be <_usb_d_dev_enable+0x5e>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    657e:	1cfc      	adds	r4, r7, #3
    6580:	687b      	ldr	r3, [r7, #4]
    6582:	0018      	movs	r0, r3
    6584:	4b12      	ldr	r3, [pc, #72]	; (65d0 <_usb_d_dev_enable+0x70>)
    6586:	4798      	blx	r3
    6588:	0003      	movs	r3, r0
    658a:	7023      	strb	r3, [r4, #0]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    658c:	1cfb      	adds	r3, r7, #3
    658e:	781b      	ldrb	r3, [r3, #0]
    6590:	2202      	movs	r2, #2
    6592:	4013      	ands	r3, r2
    6594:	d109      	bne.n	65aa <_usb_d_dev_enable+0x4a>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    6596:	1cfb      	adds	r3, r7, #3
    6598:	781b      	ldrb	r3, [r3, #0]
    659a:	2202      	movs	r2, #2
    659c:	4313      	orrs	r3, r2
    659e:	b2da      	uxtb	r2, r3
    65a0:	687b      	ldr	r3, [r7, #4]
    65a2:	0011      	movs	r1, r2
    65a4:	0018      	movs	r0, r3
    65a6:	4b0b      	ldr	r3, [pc, #44]	; (65d4 <_usb_d_dev_enable+0x74>)
    65a8:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_IRQn);
    65aa:	2007      	movs	r0, #7
    65ac:	4b0a      	ldr	r3, [pc, #40]	; (65d8 <_usb_d_dev_enable+0x78>)
    65ae:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    65b0:	4a0a      	ldr	r2, [pc, #40]	; (65dc <_usb_d_dev_enable+0x7c>)
    65b2:	687b      	ldr	r3, [r7, #4]
    65b4:	0011      	movs	r1, r2
    65b6:	0018      	movs	r0, r3
    65b8:	4b09      	ldr	r3, [pc, #36]	; (65e0 <_usb_d_dev_enable+0x80>)
    65ba:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    65bc:	2300      	movs	r3, #0
}
    65be:	0018      	movs	r0, r3
    65c0:	46bd      	mov	sp, r7
    65c2:	b003      	add	sp, #12
    65c4:	bd90      	pop	{r4, r7, pc}
    65c6:	46c0      	nop			; (mov r8, r8)
    65c8:	41005000 	.word	0x41005000
    65cc:	0000498f 	.word	0x0000498f
    65d0:	00004a6d 	.word	0x00004a6d
    65d4:	00004a41 	.word	0x00004a41
    65d8:	00004581 	.word	0x00004581
    65dc:	0000028d 	.word	0x0000028d
    65e0:	0000493d 	.word	0x0000493d

000065e4 <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    65e4:	b580      	push	{r7, lr}
    65e6:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    65e8:	4b03      	ldr	r3, [pc, #12]	; (65f8 <_usb_d_dev_attach+0x14>)
    65ea:	0018      	movs	r0, r3
    65ec:	4b03      	ldr	r3, [pc, #12]	; (65fc <_usb_d_dev_attach+0x18>)
    65ee:	4798      	blx	r3
}
    65f0:	46c0      	nop			; (mov r8, r8)
    65f2:	46bd      	mov	sp, r7
    65f4:	bd80      	pop	{r7, pc}
    65f6:	46c0      	nop			; (mov r8, r8)
    65f8:	41005000 	.word	0x41005000
    65fc:	00004a91 	.word	0x00004a91

00006600 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    6600:	b580      	push	{r7, lr}
    6602:	b082      	sub	sp, #8
    6604:	af00      	add	r7, sp, #0
    6606:	0002      	movs	r2, r0
    6608:	1dfb      	adds	r3, r7, #7
    660a:	701a      	strb	r2, [r3, #0]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    660c:	1dfb      	adds	r3, r7, #7
    660e:	781b      	ldrb	r3, [r3, #0]
    6610:	2280      	movs	r2, #128	; 0x80
    6612:	4252      	negs	r2, r2
    6614:	4313      	orrs	r3, r2
    6616:	b2db      	uxtb	r3, r3
    6618:	4a04      	ldr	r2, [pc, #16]	; (662c <_usb_d_dev_set_address+0x2c>)
    661a:	0019      	movs	r1, r3
    661c:	0010      	movs	r0, r2
    661e:	4b04      	ldr	r3, [pc, #16]	; (6630 <_usb_d_dev_set_address+0x30>)
    6620:	4798      	blx	r3
}
    6622:	46c0      	nop			; (mov r8, r8)
    6624:	46bd      	mov	sp, r7
    6626:	b002      	add	sp, #8
    6628:	bd80      	pop	{r7, pc}
    662a:	46c0      	nop			; (mov r8, r8)
    662c:	41005000 	.word	0x41005000
    6630:	00004acf 	.word	0x00004acf

00006634 <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    6634:	b590      	push	{r4, r7, lr}
    6636:	b085      	sub	sp, #20
    6638:	af00      	add	r7, sp, #0
    663a:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    663c:	4b1c      	ldr	r3, [pc, #112]	; (66b0 <_usb_d_dev_trans_setup+0x7c>)
    663e:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    6640:	687b      	ldr	r3, [r7, #4]
    6642:	7c9a      	ldrb	r2, [r3, #18]
    6644:	230b      	movs	r3, #11
    6646:	18fb      	adds	r3, r7, r3
    6648:	210f      	movs	r1, #15
    664a:	400a      	ands	r2, r1
    664c:	701a      	strb	r2, [r3, #0]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    664e:	687b      	ldr	r3, [r7, #4]
    6650:	68db      	ldr	r3, [r3, #12]
    6652:	001a      	movs	r2, r3
    6654:	230b      	movs	r3, #11
    6656:	18fb      	adds	r3, r7, r3
    6658:	781b      	ldrb	r3, [r3, #0]
    665a:	2100      	movs	r1, #0
    665c:	0018      	movs	r0, r3
    665e:	4b15      	ldr	r3, [pc, #84]	; (66b4 <_usb_d_dev_trans_setup+0x80>)
    6660:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    6662:	687b      	ldr	r3, [r7, #4]
    6664:	8a1b      	ldrh	r3, [r3, #16]
    6666:	001a      	movs	r2, r3
    6668:	230b      	movs	r3, #11
    666a:	18fb      	adds	r3, r7, r3
    666c:	7818      	ldrb	r0, [r3, #0]
    666e:	2300      	movs	r3, #0
    6670:	2100      	movs	r1, #0
    6672:	4c11      	ldr	r4, [pc, #68]	; (66b8 <_usb_d_dev_trans_setup+0x84>)
    6674:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    6676:	230b      	movs	r3, #11
    6678:	18fb      	adds	r3, r7, r3
    667a:	7819      	ldrb	r1, [r3, #0]
    667c:	68fb      	ldr	r3, [r7, #12]
    667e:	22b0      	movs	r2, #176	; 0xb0
    6680:	0018      	movs	r0, r3
    6682:	4b0e      	ldr	r3, [pc, #56]	; (66bc <_usb_d_dev_trans_setup+0x88>)
    6684:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    6686:	230b      	movs	r3, #11
    6688:	18fb      	adds	r3, r7, r3
    668a:	781b      	ldrb	r3, [r3, #0]
    668c:	2200      	movs	r2, #0
    668e:	2100      	movs	r1, #0
    6690:	0018      	movs	r0, r3
    6692:	4b0b      	ldr	r3, [pc, #44]	; (66c0 <_usb_d_dev_trans_setup+0x8c>)
    6694:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    6696:	230b      	movs	r3, #11
    6698:	18fb      	adds	r3, r7, r3
    669a:	7819      	ldrb	r1, [r3, #0]
    669c:	68fb      	ldr	r3, [r7, #12]
    669e:	2210      	movs	r2, #16
    66a0:	0018      	movs	r0, r3
    66a2:	4b08      	ldr	r3, [pc, #32]	; (66c4 <_usb_d_dev_trans_setup+0x90>)
    66a4:	4798      	blx	r3
}
    66a6:	46c0      	nop			; (mov r8, r8)
    66a8:	46bd      	mov	sp, r7
    66aa:	b005      	add	sp, #20
    66ac:	bd90      	pop	{r4, r7, pc}
    66ae:	46c0      	nop			; (mov r8, r8)
    66b0:	41005000 	.word	0x41005000
    66b4:	00004fe5 	.word	0x00004fe5
    66b8:	000051e9 	.word	0x000051e9
    66bc:	0000476b 	.word	0x0000476b
    66c0:	000052e5 	.word	0x000052e5
    66c4:	000047c9 	.word	0x000047c9

000066c8 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    66c8:	b590      	push	{r4, r7, lr}
    66ca:	b089      	sub	sp, #36	; 0x24
    66cc:	af00      	add	r7, sp, #0
    66ce:	0004      	movs	r4, r0
    66d0:	0008      	movs	r0, r1
    66d2:	0011      	movs	r1, r2
    66d4:	1dfb      	adds	r3, r7, #7
    66d6:	1c22      	adds	r2, r4, #0
    66d8:	701a      	strb	r2, [r3, #0]
    66da:	1dbb      	adds	r3, r7, #6
    66dc:	1c02      	adds	r2, r0, #0
    66de:	701a      	strb	r2, [r3, #0]
    66e0:	1d3b      	adds	r3, r7, #4
    66e2:	1c0a      	adds	r2, r1, #0
    66e4:	801a      	strh	r2, [r3, #0]
	uint8_t               epn = USB_EP_GET_N(ep);
    66e6:	231f      	movs	r3, #31
    66e8:	18fb      	adds	r3, r7, r3
    66ea:	1dfa      	adds	r2, r7, #7
    66ec:	7812      	ldrb	r2, [r2, #0]
    66ee:	210f      	movs	r1, #15
    66f0:	400a      	ands	r2, r1
    66f2:	701a      	strb	r2, [r3, #0]
	bool                  dir = USB_EP_GET_DIR(ep);
    66f4:	1dfb      	adds	r3, r7, #7
    66f6:	781b      	ldrb	r3, [r3, #0]
    66f8:	2280      	movs	r2, #128	; 0x80
    66fa:	401a      	ands	r2, r3
    66fc:	231e      	movs	r3, #30
    66fe:	18fb      	adds	r3, r7, r3
    6700:	1e51      	subs	r1, r2, #1
    6702:	418a      	sbcs	r2, r1
    6704:	701a      	strb	r2, [r3, #0]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    6706:	231e      	movs	r3, #30
    6708:	18fb      	adds	r3, r7, r3
    670a:	781a      	ldrb	r2, [r3, #0]
    670c:	231f      	movs	r3, #31
    670e:	18fb      	adds	r3, r7, r3
    6710:	781b      	ldrb	r3, [r3, #0]
    6712:	0011      	movs	r1, r2
    6714:	0018      	movs	r0, r3
    6716:	4b49      	ldr	r3, [pc, #292]	; (683c <_usb_d_dev_ep_init+0x174>)
    6718:	4798      	blx	r3
    671a:	0003      	movs	r3, r0
    671c:	61bb      	str	r3, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    671e:	2317      	movs	r3, #23
    6720:	18fb      	adds	r3, r7, r3
    6722:	1dba      	adds	r2, r7, #6
    6724:	7812      	ldrb	r2, [r2, #0]
    6726:	2103      	movs	r1, #3
    6728:	400a      	ands	r2, r1
    672a:	701a      	strb	r2, [r3, #0]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    672c:	231f      	movs	r3, #31
    672e:	18fb      	adds	r3, r7, r3
    6730:	781a      	ldrb	r2, [r3, #0]
    6732:	0013      	movs	r3, r2
    6734:	005b      	lsls	r3, r3, #1
    6736:	189b      	adds	r3, r3, r2
    6738:	009b      	lsls	r3, r3, #2
    673a:	4a41      	ldr	r2, [pc, #260]	; (6840 <_usb_d_dev_ep_init+0x178>)
    673c:	189b      	adds	r3, r3, r2
    673e:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    6740:	231f      	movs	r3, #31
    6742:	18fb      	adds	r3, r7, r3
    6744:	781b      	ldrb	r3, [r3, #0]
    6746:	2b07      	cmp	r3, #7
    6748:	d902      	bls.n	6750 <_usb_d_dev_ep_init+0x88>
		return -USB_ERR_PARAM;
    674a:	2312      	movs	r3, #18
    674c:	425b      	negs	r3, r3
    674e:	e070      	b.n	6832 <_usb_d_dev_ep_init+0x16a>
	}
	if (ept->ep != 0xFF) {
    6750:	69bb      	ldr	r3, [r7, #24]
    6752:	7c9b      	ldrb	r3, [r3, #18]
    6754:	2bff      	cmp	r3, #255	; 0xff
    6756:	d002      	beq.n	675e <_usb_d_dev_ep_init+0x96>
		return -USB_ERR_REDO;
    6758:	2314      	movs	r3, #20
    675a:	425b      	negs	r3, r3
    675c:	e069      	b.n	6832 <_usb_d_dev_ep_init+0x16a>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    675e:	2317      	movs	r3, #23
    6760:	18fb      	adds	r3, r7, r3
    6762:	781b      	ldrb	r3, [r3, #0]
    6764:	2b00      	cmp	r3, #0
    6766:	d123      	bne.n	67b0 <_usb_d_dev_ep_init+0xe8>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    6768:	231e      	movs	r3, #30
    676a:	18fb      	adds	r3, r7, r3
    676c:	781b      	ldrb	r3, [r3, #0]
    676e:	1e5a      	subs	r2, r3, #1
    6770:	4193      	sbcs	r3, r2
    6772:	b2db      	uxtb	r3, r3
    6774:	2201      	movs	r2, #1
    6776:	4053      	eors	r3, r2
    6778:	b2db      	uxtb	r3, r3
    677a:	1c1a      	adds	r2, r3, #0
    677c:	2301      	movs	r3, #1
    677e:	4013      	ands	r3, r2
    6780:	b2da      	uxtb	r2, r3
    6782:	231f      	movs	r3, #31
    6784:	18fb      	adds	r3, r7, r3
    6786:	781b      	ldrb	r3, [r3, #0]
    6788:	0011      	movs	r1, r2
    678a:	0018      	movs	r0, r3
    678c:	4b2b      	ldr	r3, [pc, #172]	; (683c <_usb_d_dev_ep_init+0x174>)
    678e:	4798      	blx	r3
    6790:	0003      	movs	r3, r0
    6792:	60fb      	str	r3, [r7, #12]
		if (ept_in->ep != 0xFF) {
    6794:	68fb      	ldr	r3, [r7, #12]
    6796:	7c9b      	ldrb	r3, [r3, #18]
    6798:	2bff      	cmp	r3, #255	; 0xff
    679a:	d002      	beq.n	67a2 <_usb_d_dev_ep_init+0xda>
			return -USB_ERR_REDO;
    679c:	2314      	movs	r3, #20
    679e:	425b      	negs	r3, r3
    67a0:	e047      	b.n	6832 <_usb_d_dev_ep_init+0x16a>
		}
		if (pcfg->cache == NULL) {
    67a2:	693b      	ldr	r3, [r7, #16]
    67a4:	681b      	ldr	r3, [r3, #0]
    67a6:	2b00      	cmp	r3, #0
    67a8:	d102      	bne.n	67b0 <_usb_d_dev_ep_init+0xe8>
			return -USB_ERR_FUNC;
    67aa:	2313      	movs	r3, #19
    67ac:	425b      	negs	r3, r3
    67ae:	e040      	b.n	6832 <_usb_d_dev_ep_init+0x16a>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    67b0:	231e      	movs	r3, #30
    67b2:	18fb      	adds	r3, r7, r3
    67b4:	781b      	ldrb	r3, [r3, #0]
    67b6:	2b00      	cmp	r3, #0
    67b8:	d005      	beq.n	67c6 <_usb_d_dev_ep_init+0xfe>
    67ba:	693b      	ldr	r3, [r7, #16]
    67bc:	685b      	ldr	r3, [r3, #4]
    67be:	1e5a      	subs	r2, r3, #1
    67c0:	4193      	sbcs	r3, r2
    67c2:	b2db      	uxtb	r3, r3
    67c4:	e004      	b.n	67d0 <_usb_d_dev_ep_init+0x108>
    67c6:	693b      	ldr	r3, [r7, #16]
    67c8:	681b      	ldr	r3, [r3, #0]
    67ca:	1e5a      	subs	r2, r3, #1
    67cc:	4193      	sbcs	r3, r2
    67ce:	b2db      	uxtb	r3, r3
    67d0:	2b00      	cmp	r3, #0
    67d2:	d012      	beq.n	67fa <_usb_d_dev_ep_init+0x132>
    67d4:	231e      	movs	r3, #30
    67d6:	18fb      	adds	r3, r7, r3
    67d8:	781b      	ldrb	r3, [r3, #0]
    67da:	2b00      	cmp	r3, #0
    67dc:	d003      	beq.n	67e6 <_usb_d_dev_ep_init+0x11e>
    67de:	693b      	ldr	r3, [r7, #16]
    67e0:	895b      	ldrh	r3, [r3, #10]
    67e2:	001a      	movs	r2, r3
    67e4:	e002      	b.n	67ec <_usb_d_dev_ep_init+0x124>
    67e6:	693b      	ldr	r3, [r7, #16]
    67e8:	891b      	ldrh	r3, [r3, #8]
    67ea:	001a      	movs	r2, r3
    67ec:	1d3b      	adds	r3, r7, #4
    67ee:	881b      	ldrh	r3, [r3, #0]
    67f0:	429a      	cmp	r2, r3
    67f2:	da02      	bge.n	67fa <_usb_d_dev_ep_init+0x132>
		return -USB_ERR_FUNC;
    67f4:	2313      	movs	r3, #19
    67f6:	425b      	negs	r3, r3
    67f8:	e01b      	b.n	6832 <_usb_d_dev_ep_init+0x16a>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    67fa:	231e      	movs	r3, #30
    67fc:	18fb      	adds	r3, r7, r3
    67fe:	781b      	ldrb	r3, [r3, #0]
    6800:	2b00      	cmp	r3, #0
    6802:	d002      	beq.n	680a <_usb_d_dev_ep_init+0x142>
    6804:	693b      	ldr	r3, [r7, #16]
    6806:	685a      	ldr	r2, [r3, #4]
    6808:	e001      	b.n	680e <_usb_d_dev_ep_init+0x146>
    680a:	693b      	ldr	r3, [r7, #16]
    680c:	681a      	ldr	r2, [r3, #0]
    680e:	69bb      	ldr	r3, [r7, #24]
    6810:	60da      	str	r2, [r3, #12]
	ept->size     = max_pkt_siz;
    6812:	69bb      	ldr	r3, [r7, #24]
    6814:	1d3a      	adds	r2, r7, #4
    6816:	8812      	ldrh	r2, [r2, #0]
    6818:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    681a:	2317      	movs	r3, #23
    681c:	18fb      	adds	r3, r7, r3
    681e:	781b      	ldrb	r3, [r3, #0]
    6820:	3301      	adds	r3, #1
    6822:	b2da      	uxtb	r2, r3
    6824:	69bb      	ldr	r3, [r7, #24]
    6826:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    6828:	69bb      	ldr	r3, [r7, #24]
    682a:	1dfa      	adds	r2, r7, #7
    682c:	7812      	ldrb	r2, [r2, #0]
    682e:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    6830:	2300      	movs	r3, #0
}
    6832:	0018      	movs	r0, r3
    6834:	46bd      	mov	sp, r7
    6836:	b009      	add	sp, #36	; 0x24
    6838:	bd90      	pop	{r4, r7, pc}
    683a:	46c0      	nop			; (mov r8, r8)
    683c:	000053c5 	.word	0x000053c5
    6840:	00010dbc 	.word	0x00010dbc

00006844 <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    6844:	b580      	push	{r7, lr}
    6846:	b086      	sub	sp, #24
    6848:	af00      	add	r7, sp, #0
    684a:	0002      	movs	r2, r0
    684c:	1dfb      	adds	r3, r7, #7
    684e:	701a      	strb	r2, [r3, #0]
	Usb *                 hw  = USB;
    6850:	4b39      	ldr	r3, [pc, #228]	; (6938 <_usb_d_dev_ep_deinit+0xf4>)
    6852:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    6854:	2313      	movs	r3, #19
    6856:	18fb      	adds	r3, r7, r3
    6858:	1dfa      	adds	r2, r7, #7
    685a:	7812      	ldrb	r2, [r2, #0]
    685c:	210f      	movs	r1, #15
    685e:	400a      	ands	r2, r1
    6860:	701a      	strb	r2, [r3, #0]
	bool                  dir = USB_EP_GET_DIR(ep);
    6862:	1dfb      	adds	r3, r7, #7
    6864:	781b      	ldrb	r3, [r3, #0]
    6866:	2280      	movs	r2, #128	; 0x80
    6868:	401a      	ands	r2, r3
    686a:	2312      	movs	r3, #18
    686c:	18fb      	adds	r3, r7, r3
    686e:	1e51      	subs	r1, r2, #1
    6870:	418a      	sbcs	r2, r1
    6872:	701a      	strb	r2, [r3, #0]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    6874:	2312      	movs	r3, #18
    6876:	18fb      	adds	r3, r7, r3
    6878:	781a      	ldrb	r2, [r3, #0]
    687a:	2313      	movs	r3, #19
    687c:	18fb      	adds	r3, r7, r3
    687e:	781b      	ldrb	r3, [r3, #0]
    6880:	0011      	movs	r1, r2
    6882:	0018      	movs	r0, r3
    6884:	4b2d      	ldr	r3, [pc, #180]	; (693c <_usb_d_dev_ep_deinit+0xf8>)
    6886:	4798      	blx	r3
    6888:	0003      	movs	r3, r0
    688a:	60fb      	str	r3, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    688c:	2313      	movs	r3, #19
    688e:	18fb      	adds	r3, r7, r3
    6890:	781b      	ldrb	r3, [r3, #0]
    6892:	2b07      	cmp	r3, #7
    6894:	d84b      	bhi.n	692e <_usb_d_dev_ep_deinit+0xea>
    6896:	68fb      	ldr	r3, [r7, #12]
    6898:	7c9b      	ldrb	r3, [r3, #18]
    689a:	2bff      	cmp	r3, #255	; 0xff
    689c:	d047      	beq.n	692e <_usb_d_dev_ep_deinit+0xea>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    689e:	2312      	movs	r3, #18
    68a0:	18fb      	adds	r3, r7, r3
    68a2:	7819      	ldrb	r1, [r3, #0]
    68a4:	68fb      	ldr	r3, [r7, #12]
    68a6:	2203      	movs	r2, #3
    68a8:	0018      	movs	r0, r3
    68aa:	4b25      	ldr	r3, [pc, #148]	; (6940 <_usb_d_dev_ep_deinit+0xfc>)
    68ac:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    68ae:	68fb      	ldr	r3, [r7, #12]
    68b0:	7cdb      	ldrb	r3, [r3, #19]
    68b2:	2207      	movs	r2, #7
    68b4:	4013      	ands	r3, r2
    68b6:	b2db      	uxtb	r3, r3
    68b8:	2b01      	cmp	r3, #1
    68ba:	d107      	bne.n	68cc <_usb_d_dev_ep_deinit+0x88>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    68bc:	1dfb      	adds	r3, r7, #7
    68be:	781a      	ldrb	r2, [r3, #0]
    68c0:	697b      	ldr	r3, [r7, #20]
    68c2:	3208      	adds	r2, #8
    68c4:	0152      	lsls	r2, r2, #5
    68c6:	2100      	movs	r1, #0
    68c8:	54d1      	strb	r1, [r2, r3]
    68ca:	e029      	b.n	6920 <_usb_d_dev_ep_deinit+0xdc>
	} else if (USB_EP_GET_DIR(ep)) {
    68cc:	1dfb      	adds	r3, r7, #7
    68ce:	781b      	ldrb	r3, [r3, #0]
    68d0:	b25b      	sxtb	r3, r3
    68d2:	2b00      	cmp	r3, #0
    68d4:	da14      	bge.n	6900 <_usb_d_dev_ep_deinit+0xbc>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    68d6:	1dfb      	adds	r3, r7, #7
    68d8:	781b      	ldrb	r3, [r3, #0]
    68da:	220f      	movs	r2, #15
    68dc:	401a      	ands	r2, r3
    68de:	1dfb      	adds	r3, r7, #7
    68e0:	781b      	ldrb	r3, [r3, #0]
    68e2:	210f      	movs	r1, #15
    68e4:	4019      	ands	r1, r3
    68e6:	697b      	ldr	r3, [r7, #20]
    68e8:	3108      	adds	r1, #8
    68ea:	0149      	lsls	r1, r1, #5
    68ec:	5ccb      	ldrb	r3, [r1, r3]
    68ee:	b2db      	uxtb	r3, r3
    68f0:	2170      	movs	r1, #112	; 0x70
    68f2:	438b      	bics	r3, r1
    68f4:	b2d9      	uxtb	r1, r3
    68f6:	697b      	ldr	r3, [r7, #20]
    68f8:	3208      	adds	r2, #8
    68fa:	0152      	lsls	r2, r2, #5
    68fc:	54d1      	strb	r1, [r2, r3]
    68fe:	e00f      	b.n	6920 <_usb_d_dev_ep_deinit+0xdc>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    6900:	1dfb      	adds	r3, r7, #7
    6902:	781a      	ldrb	r2, [r3, #0]
    6904:	1dfb      	adds	r3, r7, #7
    6906:	7819      	ldrb	r1, [r3, #0]
    6908:	697b      	ldr	r3, [r7, #20]
    690a:	3108      	adds	r1, #8
    690c:	0149      	lsls	r1, r1, #5
    690e:	5ccb      	ldrb	r3, [r1, r3]
    6910:	b2db      	uxtb	r3, r3
    6912:	2107      	movs	r1, #7
    6914:	438b      	bics	r3, r1
    6916:	b2d9      	uxtb	r1, r3
    6918:	697b      	ldr	r3, [r7, #20]
    691a:	3208      	adds	r2, #8
    691c:	0152      	lsls	r2, r2, #5
    691e:	54d1      	strb	r1, [r2, r3]
	}
	ept->flags.u8 = 0;
    6920:	68fb      	ldr	r3, [r7, #12]
    6922:	2200      	movs	r2, #0
    6924:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    6926:	68fb      	ldr	r3, [r7, #12]
    6928:	22ff      	movs	r2, #255	; 0xff
    692a:	749a      	strb	r2, [r3, #18]
    692c:	e000      	b.n	6930 <_usb_d_dev_ep_deinit+0xec>
		return;
    692e:	46c0      	nop			; (mov r8, r8)
}
    6930:	46bd      	mov	sp, r7
    6932:	b006      	add	sp, #24
    6934:	bd80      	pop	{r7, pc}
    6936:	46c0      	nop			; (mov r8, r8)
    6938:	41005000 	.word	0x41005000
    693c:	000053c5 	.word	0x000053c5
    6940:	00006eb1 	.word	0x00006eb1

00006944 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    6944:	b5b0      	push	{r4, r5, r7, lr}
    6946:	b088      	sub	sp, #32
    6948:	af00      	add	r7, sp, #0
    694a:	0002      	movs	r2, r0
    694c:	1dfb      	adds	r3, r7, #7
    694e:	701a      	strb	r2, [r3, #0]
	Usb *                 hw    = USB;
    6950:	4b9c      	ldr	r3, [pc, #624]	; (6bc4 <_usb_d_dev_ep_enable+0x280>)
    6952:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    6954:	231b      	movs	r3, #27
    6956:	18fb      	adds	r3, r7, r3
    6958:	1dfa      	adds	r2, r7, #7
    695a:	7812      	ldrb	r2, [r2, #0]
    695c:	210f      	movs	r1, #15
    695e:	400a      	ands	r2, r1
    6960:	701a      	strb	r2, [r3, #0]
	bool                  dir   = USB_EP_GET_DIR(ep);
    6962:	1dfb      	adds	r3, r7, #7
    6964:	781b      	ldrb	r3, [r3, #0]
    6966:	2280      	movs	r2, #128	; 0x80
    6968:	401a      	ands	r2, r3
    696a:	231a      	movs	r3, #26
    696c:	18fb      	adds	r3, r7, r3
    696e:	1e51      	subs	r1, r2, #1
    6970:	418a      	sbcs	r2, r1
    6972:	701a      	strb	r2, [r3, #0]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    6974:	231a      	movs	r3, #26
    6976:	18fb      	adds	r3, r7, r3
    6978:	781a      	ldrb	r2, [r3, #0]
    697a:	231b      	movs	r3, #27
    697c:	18fb      	adds	r3, r7, r3
    697e:	781b      	ldrb	r3, [r3, #0]
    6980:	0011      	movs	r1, r2
    6982:	0018      	movs	r0, r3
    6984:	4b90      	ldr	r3, [pc, #576]	; (6bc8 <_usb_d_dev_ep_enable+0x284>)
    6986:	4798      	blx	r3
    6988:	0003      	movs	r3, r0
    698a:	617b      	str	r3, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    698c:	2313      	movs	r3, #19
    698e:	18fc      	adds	r4, r7, r3
    6990:	231b      	movs	r3, #27
    6992:	18fb      	adds	r3, r7, r3
    6994:	781a      	ldrb	r2, [r3, #0]
    6996:	69fb      	ldr	r3, [r7, #28]
    6998:	0011      	movs	r1, r2
    699a:	0018      	movs	r0, r3
    699c:	4b8b      	ldr	r3, [pc, #556]	; (6bcc <_usb_d_dev_ep_enable+0x288>)
    699e:	4798      	blx	r3
    69a0:	0003      	movs	r3, r0
    69a2:	7023      	strb	r3, [r4, #0]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    69a4:	231b      	movs	r3, #27
    69a6:	18fb      	adds	r3, r7, r3
    69a8:	781b      	ldrb	r3, [r3, #0]
    69aa:	2b07      	cmp	r3, #7
    69ac:	d803      	bhi.n	69b6 <_usb_d_dev_ep_enable+0x72>
    69ae:	697b      	ldr	r3, [r7, #20]
    69b0:	7c9b      	ldrb	r3, [r3, #18]
    69b2:	2bff      	cmp	r3, #255	; 0xff
    69b4:	d102      	bne.n	69bc <_usb_d_dev_ep_enable+0x78>
		return -USB_ERR_PARAM;
    69b6:	2312      	movs	r3, #18
    69b8:	425b      	negs	r3, r3
    69ba:	e0fe      	b.n	6bba <_usb_d_dev_ep_enable+0x276>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    69bc:	231b      	movs	r3, #27
    69be:	18fb      	adds	r3, r7, r3
    69c0:	781b      	ldrb	r3, [r3, #0]
    69c2:	015a      	lsls	r2, r3, #5
    69c4:	4b82      	ldr	r3, [pc, #520]	; (6bd0 <_usb_d_dev_ep_enable+0x28c>)
    69c6:	18d3      	adds	r3, r2, r3
    69c8:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    69ca:	697b      	ldr	r3, [r7, #20]
    69cc:	7cdb      	ldrb	r3, [r3, #19]
    69ce:	2207      	movs	r2, #7
    69d0:	4013      	ands	r3, r2
    69d2:	b2db      	uxtb	r3, r3
    69d4:	2b01      	cmp	r3, #1
    69d6:	d15d      	bne.n	6a94 <_usb_d_dev_ep_enable+0x150>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    69d8:	2313      	movs	r3, #19
    69da:	18fb      	adds	r3, r7, r3
    69dc:	781b      	ldrb	r3, [r3, #0]
    69de:	2277      	movs	r2, #119	; 0x77
    69e0:	4013      	ands	r3, r2
    69e2:	d002      	beq.n	69ea <_usb_d_dev_ep_enable+0xa6>
			return -USB_ERR_REDO;
    69e4:	2314      	movs	r3, #20
    69e6:	425b      	negs	r3, r3
    69e8:	e0e7      	b.n	6bba <_usb_d_dev_ep_enable+0x276>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    69ea:	231b      	movs	r3, #27
    69ec:	18fb      	adds	r3, r7, r3
    69ee:	7819      	ldrb	r1, [r3, #0]
    69f0:	69fb      	ldr	r3, [r7, #28]
    69f2:	2211      	movs	r2, #17
    69f4:	0018      	movs	r0, r3
    69f6:	4b77      	ldr	r3, [pc, #476]	; (6bd4 <_usb_d_dev_ep_enable+0x290>)
    69f8:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    69fa:	697b      	ldr	r3, [r7, #20]
    69fc:	8a1b      	ldrh	r3, [r3, #16]
    69fe:	039b      	lsls	r3, r3, #14
    6a00:	001a      	movs	r2, r3
    6a02:	4b75      	ldr	r3, [pc, #468]	; (6bd8 <_usb_d_dev_ep_enable+0x294>)
    6a04:	401a      	ands	r2, r3
    6a06:	0014      	movs	r4, r2
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    6a08:	697b      	ldr	r3, [r7, #20]
    6a0a:	8a1b      	ldrh	r3, [r3, #16]
    6a0c:	0018      	movs	r0, r3
    6a0e:	4b73      	ldr	r3, [pc, #460]	; (6bdc <_usb_d_dev_ep_enable+0x298>)
    6a10:	4798      	blx	r3
    6a12:	0003      	movs	r3, r0
    6a14:	071b      	lsls	r3, r3, #28
    6a16:	001a      	movs	r2, r3
    6a18:	23e0      	movs	r3, #224	; 0xe0
    6a1a:	05db      	lsls	r3, r3, #23
    6a1c:	4013      	ands	r3, r2
    6a1e:	0022      	movs	r2, r4
    6a20:	431a      	orrs	r2, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    6a22:	68fb      	ldr	r3, [r7, #12]
    6a24:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    6a26:	68fb      	ldr	r3, [r7, #12]
    6a28:	3310      	adds	r3, #16
    6a2a:	001c      	movs	r4, r3
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    6a2c:	697b      	ldr	r3, [r7, #20]
    6a2e:	8a1b      	ldrh	r3, [r3, #16]
    6a30:	049b      	lsls	r3, r3, #18
    6a32:	0c9d      	lsrs	r5, r3, #18
    6a34:	697b      	ldr	r3, [r7, #20]
    6a36:	8a1b      	ldrh	r3, [r3, #16]
    6a38:	0018      	movs	r0, r3
    6a3a:	4b68      	ldr	r3, [pc, #416]	; (6bdc <_usb_d_dev_ep_enable+0x298>)
    6a3c:	4798      	blx	r3
    6a3e:	0003      	movs	r3, r0
    6a40:	071b      	lsls	r3, r3, #28
    6a42:	001a      	movs	r2, r3
    6a44:	23e0      	movs	r3, #224	; 0xe0
    6a46:	05db      	lsls	r3, r3, #23
    6a48:	4013      	ands	r3, r2
    6a4a:	432b      	orrs	r3, r5
    6a4c:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    6a4e:	231b      	movs	r3, #27
    6a50:	18fb      	adds	r3, r7, r3
    6a52:	781b      	ldrb	r3, [r3, #0]
    6a54:	2200      	movs	r2, #0
    6a56:	2100      	movs	r1, #0
    6a58:	0018      	movs	r0, r3
    6a5a:	4b61      	ldr	r3, [pc, #388]	; (6be0 <_usb_d_dev_ep_enable+0x29c>)
    6a5c:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    6a5e:	231b      	movs	r3, #27
    6a60:	18fb      	adds	r3, r7, r3
    6a62:	781b      	ldrb	r3, [r3, #0]
    6a64:	2200      	movs	r2, #0
    6a66:	2101      	movs	r1, #1
    6a68:	0018      	movs	r0, r3
    6a6a:	4b5e      	ldr	r3, [pc, #376]	; (6be4 <_usb_d_dev_ep_enable+0x2a0>)
    6a6c:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    6a6e:	231b      	movs	r3, #27
    6a70:	18fb      	adds	r3, r7, r3
    6a72:	781b      	ldrb	r3, [r3, #0]
    6a74:	2100      	movs	r1, #0
    6a76:	0018      	movs	r0, r3
    6a78:	4b5b      	ldr	r3, [pc, #364]	; (6be8 <_usb_d_dev_ep_enable+0x2a4>)
    6a7a:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    6a7c:	231b      	movs	r3, #27
    6a7e:	18fb      	adds	r3, r7, r3
    6a80:	781b      	ldrb	r3, [r3, #0]
    6a82:	2101      	movs	r1, #1
    6a84:	0018      	movs	r0, r3
    6a86:	4b58      	ldr	r3, [pc, #352]	; (6be8 <_usb_d_dev_ep_enable+0x2a4>)
    6a88:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    6a8a:	697b      	ldr	r3, [r7, #20]
    6a8c:	0018      	movs	r0, r3
    6a8e:	4b57      	ldr	r3, [pc, #348]	; (6bec <_usb_d_dev_ep_enable+0x2a8>)
    6a90:	4798      	blx	r3
    6a92:	e091      	b.n	6bb8 <_usb_d_dev_ep_enable+0x274>

	} else if (dir) {
    6a94:	231a      	movs	r3, #26
    6a96:	18fb      	adds	r3, r7, r3
    6a98:	781b      	ldrb	r3, [r3, #0]
    6a9a:	2b00      	cmp	r3, #0
    6a9c:	d047      	beq.n	6b2e <_usb_d_dev_ep_enable+0x1ea>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    6a9e:	2313      	movs	r3, #19
    6aa0:	18fb      	adds	r3, r7, r3
    6aa2:	781b      	ldrb	r3, [r3, #0]
    6aa4:	2270      	movs	r2, #112	; 0x70
    6aa6:	4013      	ands	r3, r2
    6aa8:	d002      	beq.n	6ab0 <_usb_d_dev_ep_enable+0x16c>
			return -USB_ERR_REDO;
    6aaa:	2314      	movs	r3, #20
    6aac:	425b      	negs	r3, r3
    6aae:	e084      	b.n	6bba <_usb_d_dev_ep_enable+0x276>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    6ab0:	697b      	ldr	r3, [r7, #20]
    6ab2:	7cdb      	ldrb	r3, [r3, #19]
    6ab4:	075b      	lsls	r3, r3, #29
    6ab6:	0f5b      	lsrs	r3, r3, #29
    6ab8:	b2db      	uxtb	r3, r3
    6aba:	011b      	lsls	r3, r3, #4
    6abc:	b2db      	uxtb	r3, r3
    6abe:	2270      	movs	r2, #112	; 0x70
    6ac0:	4013      	ands	r3, r2
    6ac2:	b2d9      	uxtb	r1, r3
    6ac4:	2313      	movs	r3, #19
    6ac6:	18fb      	adds	r3, r7, r3
    6ac8:	2213      	movs	r2, #19
    6aca:	18ba      	adds	r2, r7, r2
    6acc:	7812      	ldrb	r2, [r2, #0]
    6ace:	430a      	orrs	r2, r1
    6ad0:	701a      	strb	r2, [r3, #0]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    6ad2:	2313      	movs	r3, #19
    6ad4:	18fb      	adds	r3, r7, r3
    6ad6:	781a      	ldrb	r2, [r3, #0]
    6ad8:	231b      	movs	r3, #27
    6ada:	18fb      	adds	r3, r7, r3
    6adc:	7819      	ldrb	r1, [r3, #0]
    6ade:	69fb      	ldr	r3, [r7, #28]
    6ae0:	0018      	movs	r0, r3
    6ae2:	4b3c      	ldr	r3, [pc, #240]	; (6bd4 <_usb_d_dev_ep_enable+0x290>)
    6ae4:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    6ae6:	68fb      	ldr	r3, [r7, #12]
    6ae8:	3310      	adds	r3, #16
    6aea:	001c      	movs	r4, r3
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    6aec:	697b      	ldr	r3, [r7, #20]
    6aee:	8a1b      	ldrh	r3, [r3, #16]
    6af0:	049b      	lsls	r3, r3, #18
    6af2:	0c9d      	lsrs	r5, r3, #18
    6af4:	697b      	ldr	r3, [r7, #20]
    6af6:	8a1b      	ldrh	r3, [r3, #16]
    6af8:	0018      	movs	r0, r3
    6afa:	4b38      	ldr	r3, [pc, #224]	; (6bdc <_usb_d_dev_ep_enable+0x298>)
    6afc:	4798      	blx	r3
    6afe:	0003      	movs	r3, r0
    6b00:	071b      	lsls	r3, r3, #28
    6b02:	001a      	movs	r2, r3
    6b04:	23e0      	movs	r3, #224	; 0xe0
    6b06:	05db      	lsls	r3, r3, #23
    6b08:	4013      	ands	r3, r2
    6b0a:	432b      	orrs	r3, r5
    6b0c:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    6b0e:	231b      	movs	r3, #27
    6b10:	18fb      	adds	r3, r7, r3
    6b12:	781b      	ldrb	r3, [r3, #0]
    6b14:	2200      	movs	r2, #0
    6b16:	2101      	movs	r1, #1
    6b18:	0018      	movs	r0, r3
    6b1a:	4b32      	ldr	r3, [pc, #200]	; (6be4 <_usb_d_dev_ep_enable+0x2a0>)
    6b1c:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    6b1e:	231b      	movs	r3, #27
    6b20:	18fb      	adds	r3, r7, r3
    6b22:	781b      	ldrb	r3, [r3, #0]
    6b24:	2101      	movs	r1, #1
    6b26:	0018      	movs	r0, r3
    6b28:	4b2f      	ldr	r3, [pc, #188]	; (6be8 <_usb_d_dev_ep_enable+0x2a4>)
    6b2a:	4798      	blx	r3
    6b2c:	e044      	b.n	6bb8 <_usb_d_dev_ep_enable+0x274>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    6b2e:	2313      	movs	r3, #19
    6b30:	18fb      	adds	r3, r7, r3
    6b32:	781b      	ldrb	r3, [r3, #0]
    6b34:	2207      	movs	r2, #7
    6b36:	4013      	ands	r3, r2
    6b38:	d002      	beq.n	6b40 <_usb_d_dev_ep_enable+0x1fc>
			return -USB_ERR_REDO;
    6b3a:	2314      	movs	r3, #20
    6b3c:	425b      	negs	r3, r3
    6b3e:	e03c      	b.n	6bba <_usb_d_dev_ep_enable+0x276>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    6b40:	697b      	ldr	r3, [r7, #20]
    6b42:	7cdb      	ldrb	r3, [r3, #19]
    6b44:	075b      	lsls	r3, r3, #29
    6b46:	0f5b      	lsrs	r3, r3, #29
    6b48:	b2db      	uxtb	r3, r3
    6b4a:	0019      	movs	r1, r3
    6b4c:	2313      	movs	r3, #19
    6b4e:	18fb      	adds	r3, r7, r3
    6b50:	2213      	movs	r2, #19
    6b52:	18ba      	adds	r2, r7, r2
    6b54:	7812      	ldrb	r2, [r2, #0]
    6b56:	430a      	orrs	r2, r1
    6b58:	701a      	strb	r2, [r3, #0]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    6b5a:	2313      	movs	r3, #19
    6b5c:	18fb      	adds	r3, r7, r3
    6b5e:	781a      	ldrb	r2, [r3, #0]
    6b60:	231b      	movs	r3, #27
    6b62:	18fb      	adds	r3, r7, r3
    6b64:	7819      	ldrb	r1, [r3, #0]
    6b66:	69fb      	ldr	r3, [r7, #28]
    6b68:	0018      	movs	r0, r3
    6b6a:	4b1a      	ldr	r3, [pc, #104]	; (6bd4 <_usb_d_dev_ep_enable+0x290>)
    6b6c:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    6b6e:	697b      	ldr	r3, [r7, #20]
    6b70:	8a1b      	ldrh	r3, [r3, #16]
    6b72:	039b      	lsls	r3, r3, #14
    6b74:	001a      	movs	r2, r3
    6b76:	4b18      	ldr	r3, [pc, #96]	; (6bd8 <_usb_d_dev_ep_enable+0x294>)
    6b78:	401a      	ands	r2, r3
    6b7a:	0014      	movs	r4, r2
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    6b7c:	697b      	ldr	r3, [r7, #20]
    6b7e:	8a1b      	ldrh	r3, [r3, #16]
    6b80:	0018      	movs	r0, r3
    6b82:	4b16      	ldr	r3, [pc, #88]	; (6bdc <_usb_d_dev_ep_enable+0x298>)
    6b84:	4798      	blx	r3
    6b86:	0003      	movs	r3, r0
    6b88:	071b      	lsls	r3, r3, #28
    6b8a:	001a      	movs	r2, r3
    6b8c:	23e0      	movs	r3, #224	; 0xe0
    6b8e:	05db      	lsls	r3, r3, #23
    6b90:	4013      	ands	r3, r2
    6b92:	0022      	movs	r2, r4
    6b94:	431a      	orrs	r2, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    6b96:	68fb      	ldr	r3, [r7, #12]
    6b98:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    6b9a:	231b      	movs	r3, #27
    6b9c:	18fb      	adds	r3, r7, r3
    6b9e:	781b      	ldrb	r3, [r3, #0]
    6ba0:	2200      	movs	r2, #0
    6ba2:	2100      	movs	r1, #0
    6ba4:	0018      	movs	r0, r3
    6ba6:	4b0e      	ldr	r3, [pc, #56]	; (6be0 <_usb_d_dev_ep_enable+0x29c>)
    6ba8:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    6baa:	231b      	movs	r3, #27
    6bac:	18fb      	adds	r3, r7, r3
    6bae:	781b      	ldrb	r3, [r3, #0]
    6bb0:	2100      	movs	r1, #0
    6bb2:	0018      	movs	r0, r3
    6bb4:	4b0c      	ldr	r3, [pc, #48]	; (6be8 <_usb_d_dev_ep_enable+0x2a4>)
    6bb6:	4798      	blx	r3
	}

	return USB_OK;
    6bb8:	2300      	movs	r3, #0
}
    6bba:	0018      	movs	r0, r3
    6bbc:	46bd      	mov	sp, r7
    6bbe:	b008      	add	sp, #32
    6bc0:	bdb0      	pop	{r4, r5, r7, pc}
    6bc2:	46c0      	nop			; (mov r8, r8)
    6bc4:	41005000 	.word	0x41005000
    6bc8:	000053c5 	.word	0x000053c5
    6bcc:	000048e5 	.word	0x000048e5
    6bd0:	200010f0 	.word	0x200010f0
    6bd4:	000048b5 	.word	0x000048b5
    6bd8:	0fffc000 	.word	0x0fffc000
    6bdc:	00005351 	.word	0x00005351
    6be0:	000052e5 	.word	0x000052e5
    6be4:	00005279 	.word	0x00005279
    6be8:	00005241 	.word	0x00005241
    6bec:	00006635 	.word	0x00006635

00006bf0 <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    6bf0:	b580      	push	{r7, lr}
    6bf2:	b084      	sub	sp, #16
    6bf4:	af00      	add	r7, sp, #0
    6bf6:	6078      	str	r0, [r7, #4]
    6bf8:	000a      	movs	r2, r1
    6bfa:	1cfb      	adds	r3, r7, #3
    6bfc:	701a      	strb	r2, [r3, #0]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    6bfe:	687b      	ldr	r3, [r7, #4]
    6c00:	7c9a      	ldrb	r2, [r3, #18]
    6c02:	230f      	movs	r3, #15
    6c04:	18fb      	adds	r3, r7, r3
    6c06:	210f      	movs	r1, #15
    6c08:	400a      	ands	r2, r1
    6c0a:	701a      	strb	r2, [r3, #0]
	return _usbd_ep_is_stalled(epn, dir);
    6c0c:	1cfb      	adds	r3, r7, #3
    6c0e:	781a      	ldrb	r2, [r3, #0]
    6c10:	230f      	movs	r3, #15
    6c12:	18fb      	adds	r3, r7, r3
    6c14:	781b      	ldrb	r3, [r3, #0]
    6c16:	0011      	movs	r1, r2
    6c18:	0018      	movs	r0, r3
    6c1a:	4b03      	ldr	r3, [pc, #12]	; (6c28 <_usb_d_dev_ep_stall_get+0x38>)
    6c1c:	4798      	blx	r3
    6c1e:	0003      	movs	r3, r0
}
    6c20:	0018      	movs	r0, r3
    6c22:	46bd      	mov	sp, r7
    6c24:	b004      	add	sp, #16
    6c26:	bd80      	pop	{r7, pc}
    6c28:	00004d95 	.word	0x00004d95

00006c2c <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    6c2c:	b580      	push	{r7, lr}
    6c2e:	b084      	sub	sp, #16
    6c30:	af00      	add	r7, sp, #0
    6c32:	6078      	str	r0, [r7, #4]
    6c34:	000a      	movs	r2, r1
    6c36:	1cfb      	adds	r3, r7, #3
    6c38:	701a      	strb	r2, [r3, #0]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    6c3a:	687b      	ldr	r3, [r7, #4]
    6c3c:	7c9a      	ldrb	r2, [r3, #18]
    6c3e:	230f      	movs	r3, #15
    6c40:	18fb      	adds	r3, r7, r3
    6c42:	210f      	movs	r1, #15
    6c44:	400a      	ands	r2, r1
    6c46:	701a      	strb	r2, [r3, #0]
	_usbd_ep_set_stall(epn, dir, true);
    6c48:	1cfb      	adds	r3, r7, #3
    6c4a:	7819      	ldrb	r1, [r3, #0]
    6c4c:	230f      	movs	r3, #15
    6c4e:	18fb      	adds	r3, r7, r3
    6c50:	781b      	ldrb	r3, [r3, #0]
    6c52:	2201      	movs	r2, #1
    6c54:	0018      	movs	r0, r3
    6c56:	4b0b      	ldr	r3, [pc, #44]	; (6c84 <_usb_d_dev_ep_stall_set+0x58>)
    6c58:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    6c5a:	1cfb      	adds	r3, r7, #3
    6c5c:	781b      	ldrb	r3, [r3, #0]
    6c5e:	2220      	movs	r2, #32
    6c60:	409a      	lsls	r2, r3
    6c62:	230f      	movs	r3, #15
    6c64:	18fb      	adds	r3, r7, r3
    6c66:	781b      	ldrb	r3, [r3, #0]
    6c68:	0011      	movs	r1, r2
    6c6a:	0018      	movs	r0, r3
    6c6c:	4b06      	ldr	r3, [pc, #24]	; (6c88 <_usb_d_dev_ep_stall_set+0x5c>)
    6c6e:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    6c70:	687b      	ldr	r3, [r7, #4]
    6c72:	7cda      	ldrb	r2, [r3, #19]
    6c74:	2108      	movs	r1, #8
    6c76:	430a      	orrs	r2, r1
    6c78:	74da      	strb	r2, [r3, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    6c7a:	2300      	movs	r3, #0
}
    6c7c:	0018      	movs	r0, r3
    6c7e:	46bd      	mov	sp, r7
    6c80:	b004      	add	sp, #16
    6c82:	bd80      	pop	{r7, pc}
    6c84:	00004d29 	.word	0x00004d29
    6c88:	00004c95 	.word	0x00004c95

00006c8c <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    6c8c:	b590      	push	{r4, r7, lr}
    6c8e:	b085      	sub	sp, #20
    6c90:	af00      	add	r7, sp, #0
    6c92:	6078      	str	r0, [r7, #4]
    6c94:	000a      	movs	r2, r1
    6c96:	1cfb      	adds	r3, r7, #3
    6c98:	701a      	strb	r2, [r3, #0]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    6c9a:	687b      	ldr	r3, [r7, #4]
    6c9c:	7c9a      	ldrb	r2, [r3, #18]
    6c9e:	230f      	movs	r3, #15
    6ca0:	18fb      	adds	r3, r7, r3
    6ca2:	210f      	movs	r1, #15
    6ca4:	400a      	ands	r2, r1
    6ca6:	701a      	strb	r2, [r3, #0]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    6ca8:	1cfb      	adds	r3, r7, #3
    6caa:	781a      	ldrb	r2, [r3, #0]
    6cac:	230e      	movs	r3, #14
    6cae:	18fc      	adds	r4, r7, r3
    6cb0:	230f      	movs	r3, #15
    6cb2:	18fb      	adds	r3, r7, r3
    6cb4:	781b      	ldrb	r3, [r3, #0]
    6cb6:	0011      	movs	r1, r2
    6cb8:	0018      	movs	r0, r3
    6cba:	4b31      	ldr	r3, [pc, #196]	; (6d80 <_usb_d_dev_ep_stall_clr+0xf4>)
    6cbc:	4798      	blx	r3
    6cbe:	0003      	movs	r3, r0
    6cc0:	7023      	strb	r3, [r4, #0]
	if (!is_stalled) {
    6cc2:	230e      	movs	r3, #14
    6cc4:	18fb      	adds	r3, r7, r3
    6cc6:	781b      	ldrb	r3, [r3, #0]
    6cc8:	2201      	movs	r2, #1
    6cca:	4053      	eors	r3, r2
    6ccc:	b2db      	uxtb	r3, r3
    6cce:	2b00      	cmp	r3, #0
    6cd0:	d001      	beq.n	6cd6 <_usb_d_dev_ep_stall_clr+0x4a>
		return ERR_NONE;
    6cd2:	2300      	movs	r3, #0
    6cd4:	e050      	b.n	6d78 <_usb_d_dev_ep_stall_clr+0xec>
	}
	_usbd_ep_set_stall(epn, dir, false);
    6cd6:	1cfb      	adds	r3, r7, #3
    6cd8:	7819      	ldrb	r1, [r3, #0]
    6cda:	230f      	movs	r3, #15
    6cdc:	18fb      	adds	r3, r7, r3
    6cde:	781b      	ldrb	r3, [r3, #0]
    6ce0:	2200      	movs	r2, #0
    6ce2:	0018      	movs	r0, r3
    6ce4:	4b27      	ldr	r3, [pc, #156]	; (6d84 <_usb_d_dev_ep_stall_clr+0xf8>)
    6ce6:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    6ce8:	1cfb      	adds	r3, r7, #3
    6cea:	781b      	ldrb	r3, [r3, #0]
    6cec:	2220      	movs	r2, #32
    6cee:	409a      	lsls	r2, r3
    6cf0:	230f      	movs	r3, #15
    6cf2:	18fb      	adds	r3, r7, r3
    6cf4:	781b      	ldrb	r3, [r3, #0]
    6cf6:	0011      	movs	r1, r2
    6cf8:	0018      	movs	r0, r3
    6cfa:	4b23      	ldr	r3, [pc, #140]	; (6d88 <_usb_d_dev_ep_stall_clr+0xfc>)
    6cfc:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    6cfe:	1cfb      	adds	r3, r7, #3
    6d00:	781a      	ldrb	r2, [r3, #0]
    6d02:	230f      	movs	r3, #15
    6d04:	18fb      	adds	r3, r7, r3
    6d06:	781b      	ldrb	r3, [r3, #0]
    6d08:	0011      	movs	r1, r2
    6d0a:	0018      	movs	r0, r3
    6d0c:	4b1f      	ldr	r3, [pc, #124]	; (6d8c <_usb_d_dev_ep_stall_clr+0x100>)
    6d0e:	4798      	blx	r3
    6d10:	1e03      	subs	r3, r0, #0
    6d12:	d011      	beq.n	6d38 <_usb_d_dev_ep_stall_clr+0xac>
		_usbd_ep_ack_stall(epn, dir);
    6d14:	1cfb      	adds	r3, r7, #3
    6d16:	781a      	ldrb	r2, [r3, #0]
    6d18:	230f      	movs	r3, #15
    6d1a:	18fb      	adds	r3, r7, r3
    6d1c:	781b      	ldrb	r3, [r3, #0]
    6d1e:	0011      	movs	r1, r2
    6d20:	0018      	movs	r0, r3
    6d22:	4b1b      	ldr	r3, [pc, #108]	; (6d90 <_usb_d_dev_ep_stall_clr+0x104>)
    6d24:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    6d26:	1cfb      	adds	r3, r7, #3
    6d28:	7819      	ldrb	r1, [r3, #0]
    6d2a:	230f      	movs	r3, #15
    6d2c:	18fb      	adds	r3, r7, r3
    6d2e:	781b      	ldrb	r3, [r3, #0]
    6d30:	2200      	movs	r2, #0
    6d32:	0018      	movs	r0, r3
    6d34:	4b17      	ldr	r3, [pc, #92]	; (6d94 <_usb_d_dev_ep_stall_clr+0x108>)
    6d36:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    6d38:	687b      	ldr	r3, [r7, #4]
    6d3a:	7cdb      	ldrb	r3, [r3, #19]
    6d3c:	2207      	movs	r2, #7
    6d3e:	4013      	ands	r3, r2
    6d40:	b2db      	uxtb	r3, r3
    6d42:	2b01      	cmp	r3, #1
    6d44:	d112      	bne.n	6d6c <_usb_d_dev_ep_stall_clr+0xe0>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    6d46:	230f      	movs	r3, #15
    6d48:	18fb      	adds	r3, r7, r3
    6d4a:	781b      	ldrb	r3, [r3, #0]
    6d4c:	4a12      	ldr	r2, [pc, #72]	; (6d98 <_usb_d_dev_ep_stall_clr+0x10c>)
    6d4e:	0019      	movs	r1, r3
    6d50:	0010      	movs	r0, r2
    6d52:	4b12      	ldr	r3, [pc, #72]	; (6d9c <_usb_d_dev_ep_stall_clr+0x110>)
    6d54:	4798      	blx	r3
    6d56:	0003      	movs	r3, r0
    6d58:	001a      	movs	r2, r3
    6d5a:	2330      	movs	r3, #48	; 0x30
    6d5c:	4013      	ands	r3, r2
    6d5e:	d10a      	bne.n	6d76 <_usb_d_dev_ep_stall_clr+0xea>
			ept->flags.bits.is_stalled = 0;
    6d60:	687b      	ldr	r3, [r7, #4]
    6d62:	7cda      	ldrb	r2, [r3, #19]
    6d64:	2108      	movs	r1, #8
    6d66:	438a      	bics	r2, r1
    6d68:	74da      	strb	r2, [r3, #19]
    6d6a:	e004      	b.n	6d76 <_usb_d_dev_ep_stall_clr+0xea>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    6d6c:	687b      	ldr	r3, [r7, #4]
    6d6e:	7cda      	ldrb	r2, [r3, #19]
    6d70:	2108      	movs	r1, #8
    6d72:	438a      	bics	r2, r1
    6d74:	74da      	strb	r2, [r3, #19]
	}
	return ERR_NONE;
    6d76:	2300      	movs	r3, #0
}
    6d78:	0018      	movs	r0, r3
    6d7a:	46bd      	mov	sp, r7
    6d7c:	b005      	add	sp, #20
    6d7e:	bd90      	pop	{r4, r7, pc}
    6d80:	00004d95 	.word	0x00004d95
    6d84:	00004d29 	.word	0x00004d29
    6d88:	00004cc5 	.word	0x00004cc5
    6d8c:	00004de1 	.word	0x00004de1
    6d90:	00004e2d 	.word	0x00004e2d
    6d94:	00004f45 	.word	0x00004f45
    6d98:	41005000 	.word	0x41005000
    6d9c:	00004743 	.word	0x00004743

00006da0 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    6da0:	b580      	push	{r7, lr}
    6da2:	b086      	sub	sp, #24
    6da4:	af00      	add	r7, sp, #0
    6da6:	0002      	movs	r2, r0
    6da8:	1dfb      	adds	r3, r7, #7
    6daa:	701a      	strb	r2, [r3, #0]
    6dac:	1dbb      	adds	r3, r7, #6
    6dae:	1c0a      	adds	r2, r1, #0
    6db0:	701a      	strb	r2, [r3, #0]
	uint8_t               epn = USB_EP_GET_N(ep);
    6db2:	2313      	movs	r3, #19
    6db4:	18fb      	adds	r3, r7, r3
    6db6:	1dfa      	adds	r2, r7, #7
    6db8:	7812      	ldrb	r2, [r2, #0]
    6dba:	210f      	movs	r1, #15
    6dbc:	400a      	ands	r2, r1
    6dbe:	701a      	strb	r2, [r3, #0]
	bool                  dir = USB_EP_GET_DIR(ep);
    6dc0:	1dfb      	adds	r3, r7, #7
    6dc2:	781b      	ldrb	r3, [r3, #0]
    6dc4:	2280      	movs	r2, #128	; 0x80
    6dc6:	401a      	ands	r2, r3
    6dc8:	2312      	movs	r3, #18
    6dca:	18fb      	adds	r3, r7, r3
    6dcc:	1e51      	subs	r1, r2, #1
    6dce:	418a      	sbcs	r2, r1
    6dd0:	701a      	strb	r2, [r3, #0]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    6dd2:	2312      	movs	r3, #18
    6dd4:	18fb      	adds	r3, r7, r3
    6dd6:	781a      	ldrb	r2, [r3, #0]
    6dd8:	2313      	movs	r3, #19
    6dda:	18fb      	adds	r3, r7, r3
    6ddc:	781b      	ldrb	r3, [r3, #0]
    6dde:	0011      	movs	r1, r2
    6de0:	0018      	movs	r0, r3
    6de2:	4b1c      	ldr	r3, [pc, #112]	; (6e54 <_usb_d_dev_ep_stall+0xb4>)
    6de4:	4798      	blx	r3
    6de6:	0003      	movs	r3, r0
    6de8:	60fb      	str	r3, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    6dea:	2313      	movs	r3, #19
    6dec:	18fb      	adds	r3, r7, r3
    6dee:	781b      	ldrb	r3, [r3, #0]
    6df0:	2b07      	cmp	r3, #7
    6df2:	d902      	bls.n	6dfa <_usb_d_dev_ep_stall+0x5a>
		return -USB_ERR_PARAM;
    6df4:	2312      	movs	r3, #18
    6df6:	425b      	negs	r3, r3
    6df8:	e028      	b.n	6e4c <_usb_d_dev_ep_stall+0xac>
	}

	if (USB_EP_STALL_SET == ctrl) {
    6dfa:	1dbb      	adds	r3, r7, #6
    6dfc:	781b      	ldrb	r3, [r3, #0]
    6dfe:	2b01      	cmp	r3, #1
    6e00:	d10a      	bne.n	6e18 <_usb_d_dev_ep_stall+0x78>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    6e02:	2312      	movs	r3, #18
    6e04:	18fb      	adds	r3, r7, r3
    6e06:	781a      	ldrb	r2, [r3, #0]
    6e08:	68fb      	ldr	r3, [r7, #12]
    6e0a:	0011      	movs	r1, r2
    6e0c:	0018      	movs	r0, r3
    6e0e:	4b12      	ldr	r3, [pc, #72]	; (6e58 <_usb_d_dev_ep_stall+0xb8>)
    6e10:	4798      	blx	r3
    6e12:	0003      	movs	r3, r0
    6e14:	617b      	str	r3, [r7, #20]
    6e16:	e018      	b.n	6e4a <_usb_d_dev_ep_stall+0xaa>
	} else if (USB_EP_STALL_CLR == ctrl) {
    6e18:	1dbb      	adds	r3, r7, #6
    6e1a:	781b      	ldrb	r3, [r3, #0]
    6e1c:	2b00      	cmp	r3, #0
    6e1e:	d10a      	bne.n	6e36 <_usb_d_dev_ep_stall+0x96>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    6e20:	2312      	movs	r3, #18
    6e22:	18fb      	adds	r3, r7, r3
    6e24:	781a      	ldrb	r2, [r3, #0]
    6e26:	68fb      	ldr	r3, [r7, #12]
    6e28:	0011      	movs	r1, r2
    6e2a:	0018      	movs	r0, r3
    6e2c:	4b0b      	ldr	r3, [pc, #44]	; (6e5c <_usb_d_dev_ep_stall+0xbc>)
    6e2e:	4798      	blx	r3
    6e30:	0003      	movs	r3, r0
    6e32:	617b      	str	r3, [r7, #20]
    6e34:	e009      	b.n	6e4a <_usb_d_dev_ep_stall+0xaa>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    6e36:	2312      	movs	r3, #18
    6e38:	18fb      	adds	r3, r7, r3
    6e3a:	781a      	ldrb	r2, [r3, #0]
    6e3c:	68fb      	ldr	r3, [r7, #12]
    6e3e:	0011      	movs	r1, r2
    6e40:	0018      	movs	r0, r3
    6e42:	4b07      	ldr	r3, [pc, #28]	; (6e60 <_usb_d_dev_ep_stall+0xc0>)
    6e44:	4798      	blx	r3
    6e46:	0003      	movs	r3, r0
    6e48:	617b      	str	r3, [r7, #20]
	}
	return rc;
    6e4a:	697b      	ldr	r3, [r7, #20]
}
    6e4c:	0018      	movs	r0, r3
    6e4e:	46bd      	mov	sp, r7
    6e50:	b006      	add	sp, #24
    6e52:	bd80      	pop	{r7, pc}
    6e54:	000053c5 	.word	0x000053c5
    6e58:	00006c2d 	.word	0x00006c2d
    6e5c:	00006c8d 	.word	0x00006c8d
    6e60:	00006bf1 	.word	0x00006bf1

00006e64 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    6e64:	b590      	push	{r4, r7, lr}
    6e66:	b083      	sub	sp, #12
    6e68:	af00      	add	r7, sp, #0
    6e6a:	6078      	str	r0, [r7, #4]
    6e6c:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    6e6e:	687b      	ldr	r3, [r7, #4]
    6e70:	7c9b      	ldrb	r3, [r3, #18]
    6e72:	2bff      	cmp	r3, #255	; 0xff
    6e74:	d015      	beq.n	6ea2 <_usb_d_dev_trans_done+0x3e>
    6e76:	687b      	ldr	r3, [r7, #4]
    6e78:	7cdb      	ldrb	r3, [r3, #19]
    6e7a:	2240      	movs	r2, #64	; 0x40
    6e7c:	4013      	ands	r3, r2
    6e7e:	b2db      	uxtb	r3, r3
    6e80:	2b00      	cmp	r3, #0
    6e82:	d00e      	beq.n	6ea2 <_usb_d_dev_trans_done+0x3e>
		return;
	}
	ept->flags.bits.is_busy = 0;
    6e84:	687b      	ldr	r3, [r7, #4]
    6e86:	7cda      	ldrb	r2, [r3, #19]
    6e88:	2140      	movs	r1, #64	; 0x40
    6e8a:	438a      	bics	r2, r1
    6e8c:	74da      	strb	r2, [r3, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    6e8e:	4b07      	ldr	r3, [pc, #28]	; (6eac <_usb_d_dev_trans_done+0x48>)
    6e90:	691c      	ldr	r4, [r3, #16]
    6e92:	687b      	ldr	r3, [r7, #4]
    6e94:	7c98      	ldrb	r0, [r3, #18]
    6e96:	687b      	ldr	r3, [r7, #4]
    6e98:	689a      	ldr	r2, [r3, #8]
    6e9a:	683b      	ldr	r3, [r7, #0]
    6e9c:	0019      	movs	r1, r3
    6e9e:	47a0      	blx	r4
    6ea0:	e000      	b.n	6ea4 <_usb_d_dev_trans_done+0x40>
		return;
    6ea2:	46c0      	nop			; (mov r8, r8)
}
    6ea4:	46bd      	mov	sp, r7
    6ea6:	b003      	add	sp, #12
    6ea8:	bd90      	pop	{r4, r7, pc}
    6eaa:	46c0      	nop			; (mov r8, r8)
    6eac:	20000f88 	.word	0x20000f88

00006eb0 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    6eb0:	b580      	push	{r7, lr}
    6eb2:	b086      	sub	sp, #24
    6eb4:	af00      	add	r7, sp, #0
    6eb6:	60f8      	str	r0, [r7, #12]
    6eb8:	607a      	str	r2, [r7, #4]
    6eba:	230b      	movs	r3, #11
    6ebc:	18fb      	adds	r3, r7, r3
    6ebe:	1c0a      	adds	r2, r1, #0
    6ec0:	701a      	strb	r2, [r3, #0]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    6ec2:	68fb      	ldr	r3, [r7, #12]
    6ec4:	7c9a      	ldrb	r2, [r3, #18]
    6ec6:	2317      	movs	r3, #23
    6ec8:	18fb      	adds	r3, r7, r3
    6eca:	210f      	movs	r1, #15
    6ecc:	400a      	ands	r2, r1
    6ece:	701a      	strb	r2, [r3, #0]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    6ed0:	2314      	movs	r3, #20
    6ed2:	18fb      	adds	r3, r7, r3
    6ed4:	4a25      	ldr	r2, [pc, #148]	; (6f6c <_usb_d_dev_trans_stop+0xbc>)
    6ed6:	8812      	ldrh	r2, [r2, #0]
    6ed8:	801a      	strh	r2, [r3, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    6eda:	68fb      	ldr	r3, [r7, #12]
    6edc:	7c9b      	ldrb	r3, [r3, #18]
    6ede:	2bff      	cmp	r3, #255	; 0xff
    6ee0:	d03f      	beq.n	6f62 <_usb_d_dev_trans_stop+0xb2>
    6ee2:	68fb      	ldr	r3, [r7, #12]
    6ee4:	7cdb      	ldrb	r3, [r3, #19]
    6ee6:	2240      	movs	r2, #64	; 0x40
    6ee8:	4013      	ands	r3, r2
    6eea:	b2db      	uxtb	r3, r3
    6eec:	2b00      	cmp	r3, #0
    6eee:	d038      	beq.n	6f62 <_usb_d_dev_trans_stop+0xb2>
		return;
	}
	/* Stop transfer */
	if (dir) {
    6ef0:	230b      	movs	r3, #11
    6ef2:	18fb      	adds	r3, r7, r3
    6ef4:	781b      	ldrb	r3, [r3, #0]
    6ef6:	2b00      	cmp	r3, #0
    6ef8:	d008      	beq.n	6f0c <_usb_d_dev_trans_stop+0x5c>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    6efa:	2317      	movs	r3, #23
    6efc:	18fb      	adds	r3, r7, r3
    6efe:	781b      	ldrb	r3, [r3, #0]
    6f00:	2200      	movs	r2, #0
    6f02:	2101      	movs	r1, #1
    6f04:	0018      	movs	r0, r3
    6f06:	4b1a      	ldr	r3, [pc, #104]	; (6f70 <_usb_d_dev_trans_stop+0xc0>)
    6f08:	4798      	blx	r3
    6f0a:	e007      	b.n	6f1c <_usb_d_dev_trans_stop+0x6c>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    6f0c:	2317      	movs	r3, #23
    6f0e:	18fb      	adds	r3, r7, r3
    6f10:	781b      	ldrb	r3, [r3, #0]
    6f12:	2200      	movs	r2, #0
    6f14:	2100      	movs	r1, #0
    6f16:	0018      	movs	r0, r3
    6f18:	4b16      	ldr	r3, [pc, #88]	; (6f74 <_usb_d_dev_trans_stop+0xc4>)
    6f1a:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    6f1c:	230b      	movs	r3, #11
    6f1e:	18fb      	adds	r3, r7, r3
    6f20:	781b      	ldrb	r3, [r3, #0]
    6f22:	2214      	movs	r2, #20
    6f24:	18ba      	adds	r2, r7, r2
    6f26:	5cd3      	ldrb	r3, [r2, r3]
    6f28:	001a      	movs	r2, r3
    6f2a:	2317      	movs	r3, #23
    6f2c:	18fb      	adds	r3, r7, r3
    6f2e:	781b      	ldrb	r3, [r3, #0]
    6f30:	0011      	movs	r1, r2
    6f32:	0018      	movs	r0, r3
    6f34:	4b10      	ldr	r3, [pc, #64]	; (6f78 <_usb_d_dev_trans_stop+0xc8>)
    6f36:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    6f38:	230b      	movs	r3, #11
    6f3a:	18fb      	adds	r3, r7, r3
    6f3c:	781b      	ldrb	r3, [r3, #0]
    6f3e:	2214      	movs	r2, #20
    6f40:	18ba      	adds	r2, r7, r2
    6f42:	5cd3      	ldrb	r3, [r2, r3]
    6f44:	001a      	movs	r2, r3
    6f46:	2317      	movs	r3, #23
    6f48:	18fb      	adds	r3, r7, r3
    6f4a:	781b      	ldrb	r3, [r3, #0]
    6f4c:	0011      	movs	r1, r2
    6f4e:	0018      	movs	r0, r3
    6f50:	4b0a      	ldr	r3, [pc, #40]	; (6f7c <_usb_d_dev_trans_stop+0xcc>)
    6f52:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    6f54:	687a      	ldr	r2, [r7, #4]
    6f56:	68fb      	ldr	r3, [r7, #12]
    6f58:	0011      	movs	r1, r2
    6f5a:	0018      	movs	r0, r3
    6f5c:	4b08      	ldr	r3, [pc, #32]	; (6f80 <_usb_d_dev_trans_stop+0xd0>)
    6f5e:	4798      	blx	r3
    6f60:	e000      	b.n	6f64 <_usb_d_dev_trans_stop+0xb4>
		return;
    6f62:	46c0      	nop			; (mov r8, r8)
}
    6f64:	46bd      	mov	sp, r7
    6f66:	b006      	add	sp, #24
    6f68:	bd80      	pop	{r7, pc}
    6f6a:	46c0      	nop			; (mov r8, r8)
    6f6c:	00010e20 	.word	0x00010e20
    6f70:	00005279 	.word	0x00005279
    6f74:	000052e5 	.word	0x000052e5
    6f78:	00004c65 	.word	0x00004c65
    6f7c:	00004cc5 	.word	0x00004cc5
    6f80:	00006e65 	.word	0x00006e65

00006f84 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    6f84:	b580      	push	{r7, lr}
    6f86:	b086      	sub	sp, #24
    6f88:	af00      	add	r7, sp, #0
    6f8a:	0002      	movs	r2, r0
    6f8c:	6039      	str	r1, [r7, #0]
    6f8e:	1dfb      	adds	r3, r7, #7
    6f90:	701a      	strb	r2, [r3, #0]
	uint8_t            epn   = USB_EP_GET_N(ep);
    6f92:	2317      	movs	r3, #23
    6f94:	18fb      	adds	r3, r7, r3
    6f96:	1dfa      	adds	r2, r7, #7
    6f98:	7812      	ldrb	r2, [r2, #0]
    6f9a:	210f      	movs	r1, #15
    6f9c:	400a      	ands	r2, r1
    6f9e:	701a      	strb	r2, [r3, #0]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    6fa0:	2317      	movs	r3, #23
    6fa2:	18fb      	adds	r3, r7, r3
    6fa4:	781b      	ldrb	r3, [r3, #0]
    6fa6:	015a      	lsls	r2, r3, #5
    6fa8:	4b25      	ldr	r3, [pc, #148]	; (7040 <_usb_d_dev_ep_read_req+0xbc>)
    6faa:	18d3      	adds	r3, r2, r3
    6fac:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    6fae:	693b      	ldr	r3, [r7, #16]
    6fb0:	681b      	ldr	r3, [r3, #0]
    6fb2:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    6fb4:	693b      	ldr	r3, [r7, #16]
    6fb6:	685b      	ldr	r3, [r3, #4]
    6fb8:	049b      	lsls	r3, r3, #18
    6fba:	0c9b      	lsrs	r3, r3, #18
    6fbc:	b29a      	uxth	r2, r3
    6fbe:	230a      	movs	r3, #10
    6fc0:	18fb      	adds	r3, r7, r3
    6fc2:	801a      	strh	r2, [r3, #0]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    6fc4:	2317      	movs	r3, #23
    6fc6:	18fb      	adds	r3, r7, r3
    6fc8:	781b      	ldrb	r3, [r3, #0]
    6fca:	2b07      	cmp	r3, #7
    6fcc:	d802      	bhi.n	6fd4 <_usb_d_dev_ep_read_req+0x50>
    6fce:	683b      	ldr	r3, [r7, #0]
    6fd0:	2b00      	cmp	r3, #0
    6fd2:	d102      	bne.n	6fda <_usb_d_dev_ep_read_req+0x56>
		return -USB_ERR_PARAM;
    6fd4:	2312      	movs	r3, #18
    6fd6:	425b      	negs	r3, r3
    6fd8:	e02d      	b.n	7036 <_usb_d_dev_ep_read_req+0xb2>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    6fda:	2317      	movs	r3, #23
    6fdc:	18fb      	adds	r3, r7, r3
    6fde:	781b      	ldrb	r3, [r3, #0]
    6fe0:	0018      	movs	r0, r3
    6fe2:	4b18      	ldr	r3, [pc, #96]	; (7044 <_usb_d_dev_ep_read_req+0xc0>)
    6fe4:	4798      	blx	r3
    6fe6:	0003      	movs	r3, r0
    6fe8:	001a      	movs	r2, r3
    6fea:	2301      	movs	r3, #1
    6fec:	4053      	eors	r3, r2
    6fee:	b2db      	uxtb	r3, r3
    6ff0:	2b00      	cmp	r3, #0
    6ff2:	d002      	beq.n	6ffa <_usb_d_dev_ep_read_req+0x76>
		return -USB_ERR_FUNC;
    6ff4:	2313      	movs	r3, #19
    6ff6:	425b      	negs	r3, r3
    6ff8:	e01d      	b.n	7036 <_usb_d_dev_ep_read_req+0xb2>
	}
	if (!_usbd_ep_is_setup(epn)) {
    6ffa:	2317      	movs	r3, #23
    6ffc:	18fb      	adds	r3, r7, r3
    6ffe:	781b      	ldrb	r3, [r3, #0]
    7000:	0018      	movs	r0, r3
    7002:	4b11      	ldr	r3, [pc, #68]	; (7048 <_usb_d_dev_ep_read_req+0xc4>)
    7004:	4798      	blx	r3
    7006:	0003      	movs	r3, r0
    7008:	001a      	movs	r2, r3
    700a:	2301      	movs	r3, #1
    700c:	4053      	eors	r3, r2
    700e:	b2db      	uxtb	r3, r3
    7010:	2b00      	cmp	r3, #0
    7012:	d001      	beq.n	7018 <_usb_d_dev_ep_read_req+0x94>
		return ERR_NONE;
    7014:	2300      	movs	r3, #0
    7016:	e00e      	b.n	7036 <_usb_d_dev_ep_read_req+0xb2>
	}
	memcpy(req_buf, (void *)addr, 8);
    7018:	68f9      	ldr	r1, [r7, #12]
    701a:	683b      	ldr	r3, [r7, #0]
    701c:	2208      	movs	r2, #8
    701e:	0018      	movs	r0, r3
    7020:	4b0a      	ldr	r3, [pc, #40]	; (704c <_usb_d_dev_ep_read_req+0xc8>)
    7022:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    7024:	2317      	movs	r3, #23
    7026:	18fb      	adds	r3, r7, r3
    7028:	781b      	ldrb	r3, [r3, #0]
    702a:	0018      	movs	r0, r3
    702c:	4b08      	ldr	r3, [pc, #32]	; (7050 <_usb_d_dev_ep_read_req+0xcc>)
    702e:	4798      	blx	r3

	return bytes;
    7030:	230a      	movs	r3, #10
    7032:	18fb      	adds	r3, r7, r3
    7034:	881b      	ldrh	r3, [r3, #0]
}
    7036:	0018      	movs	r0, r3
    7038:	46bd      	mov	sp, r7
    703a:	b006      	add	sp, #24
    703c:	bd80      	pop	{r7, pc}
    703e:	46c0      	nop			; (mov r8, r8)
    7040:	200010f0 	.word	0x200010f0
    7044:	00004cf5 	.word	0x00004cf5
    7048:	00004eed 	.word	0x00004eed
    704c:	0000b701 	.word	0x0000b701
    7050:	00004f21 	.word	0x00004f21

00007054 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    7054:	b580      	push	{r7, lr}
    7056:	b086      	sub	sp, #24
    7058:	af00      	add	r7, sp, #0
    705a:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    705c:	687b      	ldr	r3, [r7, #4]
    705e:	7a1a      	ldrb	r2, [r3, #8]
    7060:	2316      	movs	r3, #22
    7062:	18fb      	adds	r3, r7, r3
    7064:	210f      	movs	r1, #15
    7066:	400a      	ands	r2, r1
    7068:	701a      	strb	r2, [r3, #0]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    706a:	687b      	ldr	r3, [r7, #4]
    706c:	7a1b      	ldrb	r3, [r3, #8]
    706e:	001a      	movs	r2, r3
    7070:	2380      	movs	r3, #128	; 0x80
    7072:	401a      	ands	r2, r3
    7074:	2315      	movs	r3, #21
    7076:	18fb      	adds	r3, r7, r3
    7078:	1e51      	subs	r1, r2, #1
    707a:	418a      	sbcs	r2, r1
    707c:	701a      	strb	r2, [r3, #0]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    707e:	2315      	movs	r3, #21
    7080:	18fb      	adds	r3, r7, r3
    7082:	781a      	ldrb	r2, [r3, #0]
    7084:	2316      	movs	r3, #22
    7086:	18fb      	adds	r3, r7, r3
    7088:	781b      	ldrb	r3, [r3, #0]
    708a:	0011      	movs	r1, r2
    708c:	0018      	movs	r0, r3
    708e:	4b75      	ldr	r3, [pc, #468]	; (7264 <_usb_d_dev_ep_trans+0x210>)
    7090:	4798      	blx	r3
    7092:	0003      	movs	r3, r0
    7094:	613b      	str	r3, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    7096:	693b      	ldr	r3, [r7, #16]
    7098:	8a1b      	ldrh	r3, [r3, #16]
    709a:	4a73      	ldr	r2, [pc, #460]	; (7268 <_usb_d_dev_ep_trans+0x214>)
    709c:	4293      	cmp	r3, r2
    709e:	d004      	beq.n	70aa <_usb_d_dev_ep_trans+0x56>
    70a0:	693b      	ldr	r3, [r7, #16]
    70a2:	8a1b      	ldrh	r3, [r3, #16]
    70a4:	3b01      	subs	r3, #1
    70a6:	b29a      	uxth	r2, r3
    70a8:	e000      	b.n	70ac <_usb_d_dev_ep_trans+0x58>
    70aa:	4a6f      	ldr	r2, [pc, #444]	; (7268 <_usb_d_dev_ep_trans+0x214>)
    70ac:	230e      	movs	r3, #14
    70ae:	18fb      	adds	r3, r7, r3
    70b0:	801a      	strh	r2, [r3, #0]
	bool     size_n_aligned = (trans->size & size_mask);
    70b2:	687b      	ldr	r3, [r7, #4]
    70b4:	685b      	ldr	r3, [r3, #4]
    70b6:	220e      	movs	r2, #14
    70b8:	18ba      	adds	r2, r7, r2
    70ba:	8812      	ldrh	r2, [r2, #0]
    70bc:	401a      	ands	r2, r3
    70be:	230d      	movs	r3, #13
    70c0:	18fb      	adds	r3, r7, r3
    70c2:	1e51      	subs	r1, r2, #1
    70c4:	418a      	sbcs	r2, r1
    70c6:	701a      	strb	r2, [r3, #0]

	bool use_cache = false;
    70c8:	2317      	movs	r3, #23
    70ca:	18fb      	adds	r3, r7, r3
    70cc:	2200      	movs	r2, #0
    70ce:	701a      	strb	r2, [r3, #0]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    70d0:	2316      	movs	r3, #22
    70d2:	18fb      	adds	r3, r7, r3
    70d4:	781b      	ldrb	r3, [r3, #0]
    70d6:	2b07      	cmp	r3, #7
    70d8:	d902      	bls.n	70e0 <_usb_d_dev_ep_trans+0x8c>
		return -USB_ERR_PARAM;
    70da:	2312      	movs	r3, #18
    70dc:	425b      	negs	r3, r3
    70de:	e0bc      	b.n	725a <_usb_d_dev_ep_trans+0x206>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    70e0:	687b      	ldr	r3, [r7, #4]
    70e2:	681b      	ldr	r3, [r3, #0]
    70e4:	001a      	movs	r2, r3
    70e6:	4b61      	ldr	r3, [pc, #388]	; (726c <_usb_d_dev_ep_trans+0x218>)
    70e8:	429a      	cmp	r2, r3
    70ea:	d91c      	bls.n	7126 <_usb_d_dev_ep_trans+0xd2>
    70ec:	687b      	ldr	r3, [r7, #4]
    70ee:	681b      	ldr	r3, [r3, #0]
    70f0:	001a      	movs	r2, r3
    70f2:	687b      	ldr	r3, [r7, #4]
    70f4:	685b      	ldr	r3, [r3, #4]
    70f6:	18d3      	adds	r3, r2, r3
    70f8:	4a5d      	ldr	r2, [pc, #372]	; (7270 <_usb_d_dev_ep_trans+0x21c>)
    70fa:	4293      	cmp	r3, r2
    70fc:	d813      	bhi.n	7126 <_usb_d_dev_ep_trans+0xd2>
    70fe:	687b      	ldr	r3, [r7, #4]
    7100:	681b      	ldr	r3, [r3, #0]
    7102:	001a      	movs	r2, r3
    7104:	2303      	movs	r3, #3
    7106:	4013      	ands	r3, r2
    7108:	d10d      	bne.n	7126 <_usb_d_dev_ep_trans+0xd2>
	    || (!dir && (trans->size < ept->size))) {
    710a:	2315      	movs	r3, #21
    710c:	18fb      	adds	r3, r7, r3
    710e:	781b      	ldrb	r3, [r3, #0]
    7110:	2201      	movs	r2, #1
    7112:	4053      	eors	r3, r2
    7114:	b2db      	uxtb	r3, r3
    7116:	2b00      	cmp	r3, #0
    7118:	d010      	beq.n	713c <_usb_d_dev_ep_trans+0xe8>
    711a:	687b      	ldr	r3, [r7, #4]
    711c:	685b      	ldr	r3, [r3, #4]
    711e:	693a      	ldr	r2, [r7, #16]
    7120:	8a12      	ldrh	r2, [r2, #16]
    7122:	4293      	cmp	r3, r2
    7124:	d20a      	bcs.n	713c <_usb_d_dev_ep_trans+0xe8>
		if (!ept->cache) {
    7126:	693b      	ldr	r3, [r7, #16]
    7128:	68db      	ldr	r3, [r3, #12]
    712a:	2b00      	cmp	r3, #0
    712c:	d102      	bne.n	7134 <_usb_d_dev_ep_trans+0xe0>
			return -USB_ERR_FUNC;
    712e:	2313      	movs	r3, #19
    7130:	425b      	negs	r3, r3
    7132:	e092      	b.n	725a <_usb_d_dev_ep_trans+0x206>
		}
		/* Use cache all the time. */
		use_cache = true;
    7134:	2317      	movs	r3, #23
    7136:	18fb      	adds	r3, r7, r3
    7138:	2201      	movs	r2, #1
    713a:	701a      	strb	r2, [r3, #0]
	}
	if (!dir && size_n_aligned) {
    713c:	2315      	movs	r3, #21
    713e:	18fb      	adds	r3, r7, r3
    7140:	781b      	ldrb	r3, [r3, #0]
    7142:	2201      	movs	r2, #1
    7144:	4053      	eors	r3, r2
    7146:	b2db      	uxtb	r3, r3
    7148:	2b00      	cmp	r3, #0
    714a:	d00b      	beq.n	7164 <_usb_d_dev_ep_trans+0x110>
    714c:	230d      	movs	r3, #13
    714e:	18fb      	adds	r3, r7, r3
    7150:	781b      	ldrb	r3, [r3, #0]
    7152:	2b00      	cmp	r3, #0
    7154:	d006      	beq.n	7164 <_usb_d_dev_ep_trans+0x110>
		if (!ept->cache) {
    7156:	693b      	ldr	r3, [r7, #16]
    7158:	68db      	ldr	r3, [r3, #12]
    715a:	2b00      	cmp	r3, #0
    715c:	d102      	bne.n	7164 <_usb_d_dev_ep_trans+0x110>
			return -USB_ERR_PARAM;
    715e:	2312      	movs	r3, #18
    7160:	425b      	negs	r3, r3
    7162:	e07a      	b.n	725a <_usb_d_dev_ep_trans+0x206>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    7164:	693b      	ldr	r3, [r7, #16]
    7166:	7cdb      	ldrb	r3, [r3, #19]
    7168:	2208      	movs	r2, #8
    716a:	4013      	ands	r3, r2
    716c:	b2db      	uxtb	r3, r3
    716e:	2b00      	cmp	r3, #0
    7170:	d001      	beq.n	7176 <_usb_d_dev_ep_trans+0x122>
		return USB_HALTED;
    7172:	2302      	movs	r3, #2
    7174:	e071      	b.n	725a <_usb_d_dev_ep_trans+0x206>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    7176:	2308      	movs	r3, #8
    7178:	18fb      	adds	r3, r7, r3
    717a:	0018      	movs	r0, r3
    717c:	4b3d      	ldr	r3, [pc, #244]	; (7274 <_usb_d_dev_ep_trans+0x220>)
    717e:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    7180:	693b      	ldr	r3, [r7, #16]
    7182:	7cdb      	ldrb	r3, [r3, #19]
    7184:	2240      	movs	r2, #64	; 0x40
    7186:	4013      	ands	r3, r2
    7188:	b2db      	uxtb	r3, r3
    718a:	2b00      	cmp	r3, #0
    718c:	d006      	beq.n	719c <_usb_d_dev_ep_trans+0x148>
		atomic_leave_critical(&flags);
    718e:	2308      	movs	r3, #8
    7190:	18fb      	adds	r3, r7, r3
    7192:	0018      	movs	r0, r3
    7194:	4b38      	ldr	r3, [pc, #224]	; (7278 <_usb_d_dev_ep_trans+0x224>)
    7196:	4798      	blx	r3
		return USB_BUSY;
    7198:	2301      	movs	r3, #1
    719a:	e05e      	b.n	725a <_usb_d_dev_ep_trans+0x206>
	}
	ept->flags.bits.is_busy = 1;
    719c:	693b      	ldr	r3, [r7, #16]
    719e:	7cda      	ldrb	r2, [r3, #19]
    71a0:	2140      	movs	r1, #64	; 0x40
    71a2:	430a      	orrs	r2, r1
    71a4:	74da      	strb	r2, [r3, #19]
	atomic_leave_critical(&flags);
    71a6:	2308      	movs	r3, #8
    71a8:	18fb      	adds	r3, r7, r3
    71aa:	0018      	movs	r0, r3
    71ac:	4b32      	ldr	r3, [pc, #200]	; (7278 <_usb_d_dev_ep_trans+0x224>)
    71ae:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    71b0:	687b      	ldr	r3, [r7, #4]
    71b2:	681a      	ldr	r2, [r3, #0]
    71b4:	693b      	ldr	r3, [r7, #16]
    71b6:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    71b8:	687b      	ldr	r3, [r7, #4]
    71ba:	685a      	ldr	r2, [r3, #4]
    71bc:	693b      	ldr	r3, [r7, #16]
    71be:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    71c0:	693b      	ldr	r3, [r7, #16]
    71c2:	2200      	movs	r2, #0
    71c4:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    71c6:	693b      	ldr	r3, [r7, #16]
    71c8:	2215      	movs	r2, #21
    71ca:	18ba      	adds	r2, r7, r2
    71cc:	7812      	ldrb	r2, [r2, #0]
    71ce:	01d0      	lsls	r0, r2, #7
    71d0:	7cda      	ldrb	r2, [r3, #19]
    71d2:	217f      	movs	r1, #127	; 0x7f
    71d4:	400a      	ands	r2, r1
    71d6:	1c11      	adds	r1, r2, #0
    71d8:	1c02      	adds	r2, r0, #0
    71da:	430a      	orrs	r2, r1
    71dc:	74da      	strb	r2, [r3, #19]
	ept->flags.bits.use_cache = use_cache;
    71de:	693b      	ldr	r3, [r7, #16]
    71e0:	2217      	movs	r2, #23
    71e2:	18ba      	adds	r2, r7, r2
    71e4:	7812      	ldrb	r2, [r2, #0]
    71e6:	2101      	movs	r1, #1
    71e8:	400a      	ands	r2, r1
    71ea:	0150      	lsls	r0, r2, #5
    71ec:	7cda      	ldrb	r2, [r3, #19]
    71ee:	2120      	movs	r1, #32
    71f0:	438a      	bics	r2, r1
    71f2:	1c11      	adds	r1, r2, #0
    71f4:	1c02      	adds	r2, r0, #0
    71f6:	430a      	orrs	r2, r1
    71f8:	74da      	strb	r2, [r3, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    71fa:	687b      	ldr	r3, [r7, #4]
    71fc:	7a5b      	ldrb	r3, [r3, #9]
    71fe:	2b00      	cmp	r3, #0
    7200:	d009      	beq.n	7216 <_usb_d_dev_ep_trans+0x1c2>
    7202:	230d      	movs	r3, #13
    7204:	18fb      	adds	r3, r7, r3
    7206:	781b      	ldrb	r3, [r3, #0]
    7208:	2201      	movs	r2, #1
    720a:	4053      	eors	r3, r2
    720c:	b2db      	uxtb	r3, r3
    720e:	2b00      	cmp	r3, #0
    7210:	d001      	beq.n	7216 <_usb_d_dev_ep_trans+0x1c2>
    7212:	2301      	movs	r3, #1
    7214:	e000      	b.n	7218 <_usb_d_dev_ep_trans+0x1c4>
    7216:	2300      	movs	r3, #0
    7218:	b2db      	uxtb	r3, r3
    721a:	1c1a      	adds	r2, r3, #0
    721c:	2301      	movs	r3, #1
    721e:	4013      	ands	r3, r2
    7220:	b2da      	uxtb	r2, r3
    7222:	693b      	ldr	r3, [r7, #16]
    7224:	2101      	movs	r1, #1
    7226:	400a      	ands	r2, r1
    7228:	0110      	lsls	r0, r2, #4
    722a:	7cda      	ldrb	r2, [r3, #19]
    722c:	2110      	movs	r1, #16
    722e:	438a      	bics	r2, r1
    7230:	1c11      	adds	r1, r2, #0
    7232:	1c02      	adds	r2, r0, #0
    7234:	430a      	orrs	r2, r1
    7236:	74da      	strb	r2, [r3, #19]

	if (dir) {
    7238:	2315      	movs	r3, #21
    723a:	18fb      	adds	r3, r7, r3
    723c:	781b      	ldrb	r3, [r3, #0]
    723e:	2b00      	cmp	r3, #0
    7240:	d005      	beq.n	724e <_usb_d_dev_ep_trans+0x1fa>
		_usb_d_dev_in_next(ept, false);
    7242:	693b      	ldr	r3, [r7, #16]
    7244:	2100      	movs	r1, #0
    7246:	0018      	movs	r0, r3
    7248:	4b0c      	ldr	r3, [pc, #48]	; (727c <_usb_d_dev_ep_trans+0x228>)
    724a:	4798      	blx	r3
    724c:	e004      	b.n	7258 <_usb_d_dev_ep_trans+0x204>
	} else {
		_usb_d_dev_out_next(ept, false);
    724e:	693b      	ldr	r3, [r7, #16]
    7250:	2100      	movs	r1, #0
    7252:	0018      	movs	r0, r3
    7254:	4b0a      	ldr	r3, [pc, #40]	; (7280 <_usb_d_dev_ep_trans+0x22c>)
    7256:	4798      	blx	r3
	}

	return ERR_NONE;
    7258:	2300      	movs	r3, #0
}
    725a:	0018      	movs	r0, r3
    725c:	46bd      	mov	sp, r7
    725e:	b006      	add	sp, #24
    7260:	bd80      	pop	{r7, pc}
    7262:	46c0      	nop			; (mov r8, r8)
    7264:	000053c5 	.word	0x000053c5
    7268:	000003ff 	.word	0x000003ff
    726c:	1fffffff 	.word	0x1fffffff
    7270:	20007fff 	.word	0x20007fff
    7274:	00001a91 	.word	0x00001a91
    7278:	00001ab3 	.word	0x00001ab3
    727c:	00005701 	.word	0x00005701
    7280:	000059a1 	.word	0x000059a1

00007284 <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    7284:	b580      	push	{r7, lr}
    7286:	b084      	sub	sp, #16
    7288:	af00      	add	r7, sp, #0
    728a:	0002      	movs	r2, r0
    728c:	6039      	str	r1, [r7, #0]
    728e:	1dfb      	adds	r3, r7, #7
    7290:	701a      	strb	r2, [r3, #0]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    7292:	683b      	ldr	r3, [r7, #0]
    7294:	2b00      	cmp	r3, #0
    7296:	d001      	beq.n	729c <_usb_d_dev_register_callback+0x18>
    7298:	683b      	ldr	r3, [r7, #0]
    729a:	e000      	b.n	729e <_usb_d_dev_register_callback+0x1a>
    729c:	4b0a      	ldr	r3, [pc, #40]	; (72c8 <_usb_d_dev_register_callback+0x44>)
    729e:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    72a0:	1dfb      	adds	r3, r7, #7
    72a2:	781b      	ldrb	r3, [r3, #0]
    72a4:	2b01      	cmp	r3, #1
    72a6:	d103      	bne.n	72b0 <_usb_d_dev_register_callback+0x2c>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    72a8:	4b08      	ldr	r3, [pc, #32]	; (72cc <_usb_d_dev_register_callback+0x48>)
    72aa:	68fa      	ldr	r2, [r7, #12]
    72ac:	605a      	str	r2, [r3, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    72ae:	e006      	b.n	72be <_usb_d_dev_register_callback+0x3a>
	} else if (type == USB_D_CB_SOF) {
    72b0:	1dfb      	adds	r3, r7, #7
    72b2:	781b      	ldrb	r3, [r3, #0]
    72b4:	2b00      	cmp	r3, #0
    72b6:	d102      	bne.n	72be <_usb_d_dev_register_callback+0x3a>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    72b8:	4b04      	ldr	r3, [pc, #16]	; (72cc <_usb_d_dev_register_callback+0x48>)
    72ba:	68fa      	ldr	r2, [r7, #12]
    72bc:	601a      	str	r2, [r3, #0]
}
    72be:	46c0      	nop			; (mov r8, r8)
    72c0:	46bd      	mov	sp, r7
    72c2:	b004      	add	sp, #16
    72c4:	bd80      	pop	{r7, pc}
    72c6:	46c0      	nop			; (mov r8, r8)
    72c8:	00004b05 	.word	0x00004b05
    72cc:	20000f88 	.word	0x20000f88

000072d0 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    72d0:	b580      	push	{r7, lr}
    72d2:	b084      	sub	sp, #16
    72d4:	af00      	add	r7, sp, #0
    72d6:	0002      	movs	r2, r0
    72d8:	6039      	str	r1, [r7, #0]
    72da:	1dfb      	adds	r3, r7, #7
    72dc:	701a      	strb	r2, [r3, #0]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    72de:	683b      	ldr	r3, [r7, #0]
    72e0:	2b00      	cmp	r3, #0
    72e2:	d001      	beq.n	72e8 <_usb_d_dev_register_ep_callback+0x18>
    72e4:	683b      	ldr	r3, [r7, #0]
    72e6:	e000      	b.n	72ea <_usb_d_dev_register_ep_callback+0x1a>
    72e8:	4b0e      	ldr	r3, [pc, #56]	; (7324 <_usb_d_dev_register_ep_callback+0x54>)
    72ea:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    72ec:	1dfb      	adds	r3, r7, #7
    72ee:	781b      	ldrb	r3, [r3, #0]
    72f0:	2b00      	cmp	r3, #0
    72f2:	d103      	bne.n	72fc <_usb_d_dev_register_ep_callback+0x2c>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    72f4:	4b0c      	ldr	r3, [pc, #48]	; (7328 <_usb_d_dev_register_ep_callback+0x58>)
    72f6:	68fa      	ldr	r2, [r7, #12]
    72f8:	609a      	str	r2, [r3, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    72fa:	e00e      	b.n	731a <_usb_d_dev_register_ep_callback+0x4a>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    72fc:	1dfb      	adds	r3, r7, #7
    72fe:	781b      	ldrb	r3, [r3, #0]
    7300:	2b01      	cmp	r3, #1
    7302:	d103      	bne.n	730c <_usb_d_dev_register_ep_callback+0x3c>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    7304:	4b08      	ldr	r3, [pc, #32]	; (7328 <_usb_d_dev_register_ep_callback+0x58>)
    7306:	68fa      	ldr	r2, [r7, #12]
    7308:	60da      	str	r2, [r3, #12]
}
    730a:	e006      	b.n	731a <_usb_d_dev_register_ep_callback+0x4a>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    730c:	1dfb      	adds	r3, r7, #7
    730e:	781b      	ldrb	r3, [r3, #0]
    7310:	2b02      	cmp	r3, #2
    7312:	d102      	bne.n	731a <_usb_d_dev_register_ep_callback+0x4a>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    7314:	4b04      	ldr	r3, [pc, #16]	; (7328 <_usb_d_dev_register_ep_callback+0x58>)
    7316:	68fa      	ldr	r2, [r7, #12]
    7318:	611a      	str	r2, [r3, #16]
}
    731a:	46c0      	nop			; (mov r8, r8)
    731c:	46bd      	mov	sp, r7
    731e:	b004      	add	sp, #16
    7320:	bd80      	pop	{r7, pc}
    7322:	46c0      	nop			; (mov r8, r8)
    7324:	00004b05 	.word	0x00004b05
    7328:	20000f88 	.word	0x20000f88

0000732c <USB_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_Handler(void)
{
    732c:	b580      	push	{r7, lr}
    732e:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    7330:	4b02      	ldr	r3, [pc, #8]	; (733c <USB_Handler+0x10>)
    7332:	4798      	blx	r3
}
    7334:	46c0      	nop			; (mov r8, r8)
    7336:	46bd      	mov	sp, r7
    7338:	bd80      	pop	{r7, pc}
    733a:	46c0      	nop			; (mov r8, r8)
    733c:	0000632d 	.word	0x0000632d

00007340 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    7340:	b580      	push	{r7, lr}
    7342:	af00      	add	r7, sp, #0

	usart_sync_enable(&TARGET_IO);
    7344:	4b05      	ldr	r3, [pc, #20]	; (735c <stdio_redirect_init+0x1c>)
    7346:	0018      	movs	r0, r3
    7348:	4b05      	ldr	r3, [pc, #20]	; (7360 <stdio_redirect_init+0x20>)
    734a:	4798      	blx	r3
	stdio_io_init(&TARGET_IO.io);
    734c:	4b03      	ldr	r3, [pc, #12]	; (735c <stdio_redirect_init+0x1c>)
    734e:	0018      	movs	r0, r3
    7350:	4b04      	ldr	r3, [pc, #16]	; (7364 <stdio_redirect_init+0x24>)
    7352:	4798      	blx	r3
}
    7354:	46c0      	nop			; (mov r8, r8)
    7356:	46bd      	mov	sp, r7
    7358:	bd80      	pop	{r7, pc}
    735a:	46c0      	nop			; (mov r8, r8)
    735c:	20001308 	.word	0x20001308
    7360:	00001e9d 	.word	0x00001e9d
    7364:	000073b9 	.word	0x000073b9

00007368 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    7368:	b580      	push	{r7, lr}
    736a:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    736c:	4b07      	ldr	r3, [pc, #28]	; (738c <cdc_device_acm_init+0x24>)
    736e:	0018      	movs	r0, r3
    7370:	4b07      	ldr	r3, [pc, #28]	; (7390 <cdc_device_acm_init+0x28>)
    7372:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    7374:	4b07      	ldr	r3, [pc, #28]	; (7394 <cdc_device_acm_init+0x2c>)
    7376:	4798      	blx	r3

	usbdc_start(single_desc);
    7378:	4b07      	ldr	r3, [pc, #28]	; (7398 <cdc_device_acm_init+0x30>)
    737a:	0018      	movs	r0, r3
    737c:	4b07      	ldr	r3, [pc, #28]	; (739c <cdc_device_acm_init+0x34>)
    737e:	4798      	blx	r3
	usbdc_attach();
    7380:	4b07      	ldr	r3, [pc, #28]	; (73a0 <cdc_device_acm_init+0x38>)
    7382:	4798      	blx	r3
}
    7384:	46c0      	nop			; (mov r8, r8)
    7386:	46bd      	mov	sp, r7
    7388:	bd80      	pop	{r7, pc}
    738a:	46c0      	nop			; (mov r8, r8)
    738c:	20001230 	.word	0x20001230
    7390:	00008789 	.word	0x00008789
    7394:	00007971 	.word	0x00007971
    7398:	20000070 	.word	0x20000070
    739c:	0000882d 	.word	0x0000882d
    73a0:	0000887d 	.word	0x0000887d

000073a4 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    73a4:	b580      	push	{r7, lr}
    73a6:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    73a8:	4b02      	ldr	r3, [pc, #8]	; (73b4 <usb_init+0x10>)
    73aa:	4798      	blx	r3
}
    73ac:	46c0      	nop			; (mov r8, r8)
    73ae:	46bd      	mov	sp, r7
    73b0:	bd80      	pop	{r7, pc}
    73b2:	46c0      	nop			; (mov r8, r8)
    73b4:	00007369 	.word	0x00007369

000073b8 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    73b8:	b580      	push	{r7, lr}
    73ba:	b082      	sub	sp, #8
    73bc:	af00      	add	r7, sp, #0
    73be:	6078      	str	r0, [r7, #4]
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    73c0:	4b0a      	ldr	r3, [pc, #40]	; (73ec <stdio_io_init+0x34>)
    73c2:	681b      	ldr	r3, [r3, #0]
    73c4:	689b      	ldr	r3, [r3, #8]
    73c6:	2100      	movs	r1, #0
    73c8:	0018      	movs	r0, r3
    73ca:	4b09      	ldr	r3, [pc, #36]	; (73f0 <stdio_io_init+0x38>)
    73cc:	4798      	blx	r3
	setbuf(stdin, NULL);
    73ce:	4b07      	ldr	r3, [pc, #28]	; (73ec <stdio_io_init+0x34>)
    73d0:	681b      	ldr	r3, [r3, #0]
    73d2:	685b      	ldr	r3, [r3, #4]
    73d4:	2100      	movs	r1, #0
    73d6:	0018      	movs	r0, r3
    73d8:	4b05      	ldr	r3, [pc, #20]	; (73f0 <stdio_io_init+0x38>)
    73da:	4798      	blx	r3
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    73dc:	4b05      	ldr	r3, [pc, #20]	; (73f4 <stdio_io_init+0x3c>)
    73de:	687a      	ldr	r2, [r7, #4]
    73e0:	601a      	str	r2, [r3, #0]
}
    73e2:	46c0      	nop			; (mov r8, r8)
    73e4:	46bd      	mov	sp, r7
    73e6:	b002      	add	sp, #8
    73e8:	bd80      	pop	{r7, pc}
    73ea:	46c0      	nop			; (mov r8, r8)
    73ec:	20000080 	.word	0x20000080
    73f0:	0000b83d 	.word	0x0000b83d
    73f4:	20001270 	.word	0x20001270

000073f8 <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    73f8:	b580      	push	{r7, lr}
    73fa:	b082      	sub	sp, #8
    73fc:	af00      	add	r7, sp, #0
    73fe:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    7400:	687b      	ldr	r3, [r7, #4]
    7402:	781b      	ldrb	r3, [r3, #0]
    7404:	b29a      	uxth	r2, r3
    7406:	687b      	ldr	r3, [r7, #4]
    7408:	3301      	adds	r3, #1
    740a:	781b      	ldrb	r3, [r3, #0]
    740c:	b29b      	uxth	r3, r3
    740e:	021b      	lsls	r3, r3, #8
    7410:	b29b      	uxth	r3, r3
    7412:	18d3      	adds	r3, r2, r3
    7414:	b29b      	uxth	r3, r3
}
    7416:	0018      	movs	r0, r3
    7418:	46bd      	mov	sp, r7
    741a:	b002      	add	sp, #8
    741c:	bd80      	pop	{r7, pc}

0000741e <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    741e:	b580      	push	{r7, lr}
    7420:	b082      	sub	sp, #8
    7422:	af00      	add	r7, sp, #0
    7424:	6078      	str	r0, [r7, #4]
	return desc[0];
    7426:	687b      	ldr	r3, [r7, #4]
    7428:	781b      	ldrb	r3, [r3, #0]
}
    742a:	0018      	movs	r0, r3
    742c:	46bd      	mov	sp, r7
    742e:	b002      	add	sp, #8
    7430:	bd80      	pop	{r7, pc}
	...

00007434 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    7434:	b580      	push	{r7, lr}
    7436:	b082      	sub	sp, #8
    7438:	af00      	add	r7, sp, #0
    743a:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    743c:	687b      	ldr	r3, [r7, #4]
    743e:	0018      	movs	r0, r3
    7440:	4b04      	ldr	r3, [pc, #16]	; (7454 <usb_desc_next+0x20>)
    7442:	4798      	blx	r3
    7444:	0003      	movs	r3, r0
    7446:	001a      	movs	r2, r3
    7448:	687b      	ldr	r3, [r7, #4]
    744a:	189b      	adds	r3, r3, r2
}
    744c:	0018      	movs	r0, r3
    744e:	46bd      	mov	sp, r7
    7450:	b002      	add	sp, #8
    7452:	bd80      	pop	{r7, pc}
    7454:	0000741f 	.word	0x0000741f

00007458 <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    7458:	b580      	push	{r7, lr}
    745a:	b08c      	sub	sp, #48	; 0x30
    745c:	af00      	add	r7, sp, #0
    745e:	6078      	str	r0, [r7, #4]
    7460:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    7462:	687b      	ldr	r3, [r7, #4]
    7464:	689b      	ldr	r3, [r3, #8]
    7466:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    7468:	683b      	ldr	r3, [r7, #0]
    746a:	681b      	ldr	r3, [r3, #0]
    746c:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    746e:	2327      	movs	r3, #39	; 0x27
    7470:	18fb      	adds	r3, r7, r3
    7472:	2200      	movs	r2, #0
    7474:	701a      	strb	r2, [r3, #0]
    7476:	e0b7      	b.n	75e8 <cdcdf_acm_enable+0x190>
		if (NULL == ifc) {
    7478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    747a:	2b00      	cmp	r3, #0
    747c:	d102      	bne.n	7484 <cdcdf_acm_enable+0x2c>
			return ERR_NOT_FOUND;
    747e:	230a      	movs	r3, #10
    7480:	425b      	negs	r3, r3
    7482:	e0bb      	b.n	75fc <cdcdf_acm_enable+0x1a4>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    7484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7486:	789a      	ldrb	r2, [r3, #2]
    7488:	230c      	movs	r3, #12
    748a:	18fb      	adds	r3, r7, r3
    748c:	709a      	strb	r2, [r3, #2]
		ifc_desc.bInterfaceClass  = ifc[5];
    748e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7490:	795a      	ldrb	r2, [r3, #5]
    7492:	230c      	movs	r3, #12
    7494:	18fb      	adds	r3, r7, r3
    7496:	715a      	strb	r2, [r3, #5]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    7498:	230c      	movs	r3, #12
    749a:	18fb      	adds	r3, r7, r3
    749c:	795b      	ldrb	r3, [r3, #5]
    749e:	2b02      	cmp	r3, #2
    74a0:	d004      	beq.n	74ac <cdcdf_acm_enable+0x54>
    74a2:	230c      	movs	r3, #12
    74a4:	18fb      	adds	r3, r7, r3
    74a6:	795b      	ldrb	r3, [r3, #5]
    74a8:	2b0a      	cmp	r3, #10
    74aa:	d129      	bne.n	7500 <cdcdf_acm_enable+0xa8>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    74ac:	2327      	movs	r3, #39	; 0x27
    74ae:	18fb      	adds	r3, r7, r3
    74b0:	781b      	ldrb	r3, [r3, #0]
    74b2:	6a3a      	ldr	r2, [r7, #32]
    74b4:	5cd2      	ldrb	r2, [r2, r3]
    74b6:	230c      	movs	r3, #12
    74b8:	18fb      	adds	r3, r7, r3
    74ba:	789b      	ldrb	r3, [r3, #2]
    74bc:	429a      	cmp	r2, r3
    74be:	d102      	bne.n	74c6 <cdcdf_acm_enable+0x6e>
				return ERR_ALREADY_INITIALIZED;
    74c0:	2312      	movs	r3, #18
    74c2:	425b      	negs	r3, r3
    74c4:	e09a      	b.n	75fc <cdcdf_acm_enable+0x1a4>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    74c6:	2327      	movs	r3, #39	; 0x27
    74c8:	18fb      	adds	r3, r7, r3
    74ca:	781b      	ldrb	r3, [r3, #0]
    74cc:	6a3a      	ldr	r2, [r7, #32]
    74ce:	5cd3      	ldrb	r3, [r2, r3]
    74d0:	2bff      	cmp	r3, #255	; 0xff
    74d2:	d002      	beq.n	74da <cdcdf_acm_enable+0x82>
				return ERR_NO_RESOURCE;
    74d4:	231c      	movs	r3, #28
    74d6:	425b      	negs	r3, r3
    74d8:	e090      	b.n	75fc <cdcdf_acm_enable+0x1a4>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    74da:	2327      	movs	r3, #39	; 0x27
    74dc:	18fb      	adds	r3, r7, r3
    74de:	781b      	ldrb	r3, [r3, #0]
    74e0:	220c      	movs	r2, #12
    74e2:	18ba      	adds	r2, r7, r2
    74e4:	7891      	ldrb	r1, [r2, #2]
    74e6:	6a3a      	ldr	r2, [r7, #32]
    74e8:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    74ea:	46c0      	nop			; (mov r8, r8)
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    74ec:	683b      	ldr	r3, [r7, #0]
    74ee:	6859      	ldr	r1, [r3, #4]
    74f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    74f2:	2205      	movs	r2, #5
    74f4:	0018      	movs	r0, r3
    74f6:	4b43      	ldr	r3, [pc, #268]	; (7604 <cdcdf_acm_enable+0x1ac>)
    74f8:	4798      	blx	r3
    74fa:	0003      	movs	r3, r0
    74fc:	62bb      	str	r3, [r7, #40]	; 0x28
		while (NULL != ep) {
    74fe:	e05c      	b.n	75ba <cdcdf_acm_enable+0x162>
			return ERR_NOT_FOUND;
    7500:	230a      	movs	r3, #10
    7502:	425b      	negs	r3, r3
    7504:	e07a      	b.n	75fc <cdcdf_acm_enable+0x1a4>
			ep_desc.bEndpointAddress = ep[2];
    7506:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7508:	789a      	ldrb	r2, [r3, #2]
    750a:	2318      	movs	r3, #24
    750c:	18fb      	adds	r3, r7, r3
    750e:	709a      	strb	r2, [r3, #2]
			ep_desc.bmAttributes     = ep[3];
    7510:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7512:	78da      	ldrb	r2, [r3, #3]
    7514:	2318      	movs	r3, #24
    7516:	18fb      	adds	r3, r7, r3
    7518:	70da      	strb	r2, [r3, #3]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    751a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    751c:	3304      	adds	r3, #4
    751e:	0018      	movs	r0, r3
    7520:	4b39      	ldr	r3, [pc, #228]	; (7608 <cdcdf_acm_enable+0x1b0>)
    7522:	4798      	blx	r3
    7524:	0003      	movs	r3, r0
    7526:	001a      	movs	r2, r3
    7528:	2318      	movs	r3, #24
    752a:	18fb      	adds	r3, r7, r3
    752c:	809a      	strh	r2, [r3, #4]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    752e:	2318      	movs	r3, #24
    7530:	18fb      	adds	r3, r7, r3
    7532:	7898      	ldrb	r0, [r3, #2]
    7534:	2318      	movs	r3, #24
    7536:	18fb      	adds	r3, r7, r3
    7538:	78d9      	ldrb	r1, [r3, #3]
    753a:	2318      	movs	r3, #24
    753c:	18fb      	adds	r3, r7, r3
    753e:	889b      	ldrh	r3, [r3, #4]
    7540:	001a      	movs	r2, r3
    7542:	4b32      	ldr	r3, [pc, #200]	; (760c <cdcdf_acm_enable+0x1b4>)
    7544:	4798      	blx	r3
    7546:	1e03      	subs	r3, r0, #0
    7548:	d002      	beq.n	7550 <cdcdf_acm_enable+0xf8>
				return ERR_NOT_INITIALIZED;
    754a:	2314      	movs	r3, #20
    754c:	425b      	negs	r3, r3
    754e:	e055      	b.n	75fc <cdcdf_acm_enable+0x1a4>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    7550:	2318      	movs	r3, #24
    7552:	18fb      	adds	r3, r7, r3
    7554:	789b      	ldrb	r3, [r3, #2]
    7556:	b25b      	sxtb	r3, r3
    7558:	2b00      	cmp	r3, #0
    755a:	da13      	bge.n	7584 <cdcdf_acm_enable+0x12c>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    755c:	2327      	movs	r3, #39	; 0x27
    755e:	18fb      	adds	r3, r7, r3
    7560:	781b      	ldrb	r3, [r3, #0]
    7562:	2218      	movs	r2, #24
    7564:	18ba      	adds	r2, r7, r2
    7566:	7891      	ldrb	r1, [r2, #2]
    7568:	6a3a      	ldr	r2, [r7, #32]
    756a:	18d3      	adds	r3, r2, r3
    756c:	1c0a      	adds	r2, r1, #0
    756e:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    7570:	2327      	movs	r3, #39	; 0x27
    7572:	18fb      	adds	r3, r7, r3
    7574:	781b      	ldrb	r3, [r3, #0]
    7576:	6a3a      	ldr	r2, [r7, #32]
    7578:	18d3      	adds	r3, r2, r3
    757a:	789b      	ldrb	r3, [r3, #2]
    757c:	0018      	movs	r0, r3
    757e:	4b24      	ldr	r3, [pc, #144]	; (7610 <cdcdf_acm_enable+0x1b8>)
    7580:	4798      	blx	r3
    7582:	e009      	b.n	7598 <cdcdf_acm_enable+0x140>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    7584:	2318      	movs	r3, #24
    7586:	18fb      	adds	r3, r7, r3
    7588:	789a      	ldrb	r2, [r3, #2]
    758a:	6a3b      	ldr	r3, [r7, #32]
    758c:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    758e:	6a3b      	ldr	r3, [r7, #32]
    7590:	791b      	ldrb	r3, [r3, #4]
    7592:	0018      	movs	r0, r3
    7594:	4b1e      	ldr	r3, [pc, #120]	; (7610 <cdcdf_acm_enable+0x1b8>)
    7596:	4798      	blx	r3
			}
			desc->sod = ep;
    7598:	683b      	ldr	r3, [r7, #0]
    759a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    759c:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    759e:	683b      	ldr	r3, [r7, #0]
    75a0:	681b      	ldr	r3, [r3, #0]
    75a2:	0018      	movs	r0, r3
    75a4:	4b1b      	ldr	r3, [pc, #108]	; (7614 <cdcdf_acm_enable+0x1bc>)
    75a6:	4798      	blx	r3
    75a8:	0002      	movs	r2, r0
    75aa:	683b      	ldr	r3, [r7, #0]
    75ac:	685b      	ldr	r3, [r3, #4]
    75ae:	0019      	movs	r1, r3
    75b0:	0010      	movs	r0, r2
    75b2:	4b19      	ldr	r3, [pc, #100]	; (7618 <cdcdf_acm_enable+0x1c0>)
    75b4:	4798      	blx	r3
    75b6:	0003      	movs	r3, r0
    75b8:	62bb      	str	r3, [r7, #40]	; 0x28
		while (NULL != ep) {
    75ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
    75bc:	2b00      	cmp	r3, #0
    75be:	d1a2      	bne.n	7506 <cdcdf_acm_enable+0xae>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    75c0:	683b      	ldr	r3, [r7, #0]
    75c2:	681b      	ldr	r3, [r3, #0]
    75c4:	0018      	movs	r0, r3
    75c6:	4b13      	ldr	r3, [pc, #76]	; (7614 <cdcdf_acm_enable+0x1bc>)
    75c8:	4798      	blx	r3
    75ca:	683b      	ldr	r3, [r7, #0]
    75cc:	685b      	ldr	r3, [r3, #4]
    75ce:	2204      	movs	r2, #4
    75d0:	0019      	movs	r1, r3
    75d2:	4b0c      	ldr	r3, [pc, #48]	; (7604 <cdcdf_acm_enable+0x1ac>)
    75d4:	4798      	blx	r3
    75d6:	0003      	movs	r3, r0
    75d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    75da:	2327      	movs	r3, #39	; 0x27
    75dc:	18fb      	adds	r3, r7, r3
    75de:	781a      	ldrb	r2, [r3, #0]
    75e0:	2327      	movs	r3, #39	; 0x27
    75e2:	18fb      	adds	r3, r7, r3
    75e4:	3201      	adds	r2, #1
    75e6:	701a      	strb	r2, [r3, #0]
    75e8:	2327      	movs	r3, #39	; 0x27
    75ea:	18fb      	adds	r3, r7, r3
    75ec:	781b      	ldrb	r3, [r3, #0]
    75ee:	2b01      	cmp	r3, #1
    75f0:	d800      	bhi.n	75f4 <cdcdf_acm_enable+0x19c>
    75f2:	e741      	b.n	7478 <cdcdf_acm_enable+0x20>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    75f4:	4b09      	ldr	r3, [pc, #36]	; (761c <cdcdf_acm_enable+0x1c4>)
    75f6:	2201      	movs	r2, #1
    75f8:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    75fa:	2300      	movs	r3, #0
}
    75fc:	0018      	movs	r0, r3
    75fe:	46bd      	mov	sp, r7
    7600:	b00c      	add	sp, #48	; 0x30
    7602:	bd80      	pop	{r7, pc}
    7604:	00008981 	.word	0x00008981
    7608:	000073f9 	.word	0x000073f9
    760c:	00002611 	.word	0x00002611
    7610:	0000273d 	.word	0x0000273d
    7614:	00007435 	.word	0x00007435
    7618:	000089e5 	.word	0x000089e5
    761c:	20001280 	.word	0x20001280

00007620 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    7620:	b580      	push	{r7, lr}
    7622:	b088      	sub	sp, #32
    7624:	af00      	add	r7, sp, #0
    7626:	6078      	str	r0, [r7, #4]
    7628:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    762a:	687b      	ldr	r3, [r7, #4]
    762c:	689b      	ldr	r3, [r3, #8]
    762e:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    7630:	683b      	ldr	r3, [r7, #0]
    7632:	2b00      	cmp	r3, #0
    7634:	d012      	beq.n	765c <cdcdf_acm_disable+0x3c>
		ifc_desc.bInterfaceClass = desc->sod[5];
    7636:	683b      	ldr	r3, [r7, #0]
    7638:	681b      	ldr	r3, [r3, #0]
    763a:	795a      	ldrb	r2, [r3, #5]
    763c:	230c      	movs	r3, #12
    763e:	18fb      	adds	r3, r7, r3
    7640:	715a      	strb	r2, [r3, #5]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    7642:	230c      	movs	r3, #12
    7644:	18fb      	adds	r3, r7, r3
    7646:	795b      	ldrb	r3, [r3, #5]
    7648:	2b02      	cmp	r3, #2
    764a:	d007      	beq.n	765c <cdcdf_acm_disable+0x3c>
    764c:	230c      	movs	r3, #12
    764e:	18fb      	adds	r3, r7, r3
    7650:	795b      	ldrb	r3, [r3, #5]
    7652:	2b0a      	cmp	r3, #10
    7654:	d002      	beq.n	765c <cdcdf_acm_disable+0x3c>
			return ERR_NOT_FOUND;
    7656:	230a      	movs	r3, #10
    7658:	425b      	negs	r3, r3
    765a:	e047      	b.n	76ec <cdcdf_acm_disable+0xcc>
		}
	}

	for (i = 0; i < 2; i++) {
    765c:	231f      	movs	r3, #31
    765e:	18fb      	adds	r3, r7, r3
    7660:	2200      	movs	r2, #0
    7662:	701a      	strb	r2, [r3, #0]
    7664:	e02d      	b.n	76c2 <cdcdf_acm_disable+0xa2>
		if (func_data->func_iface[i] == 0xFF) {
    7666:	231f      	movs	r3, #31
    7668:	18fb      	adds	r3, r7, r3
    766a:	781b      	ldrb	r3, [r3, #0]
    766c:	69ba      	ldr	r2, [r7, #24]
    766e:	5cd3      	ldrb	r3, [r2, r3]
    7670:	2bff      	cmp	r3, #255	; 0xff
    7672:	d01e      	beq.n	76b2 <cdcdf_acm_disable+0x92>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    7674:	231f      	movs	r3, #31
    7676:	18fb      	adds	r3, r7, r3
    7678:	781b      	ldrb	r3, [r3, #0]
    767a:	69ba      	ldr	r2, [r7, #24]
    767c:	21ff      	movs	r1, #255	; 0xff
    767e:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    7680:	231f      	movs	r3, #31
    7682:	18fb      	adds	r3, r7, r3
    7684:	781b      	ldrb	r3, [r3, #0]
    7686:	69ba      	ldr	r2, [r7, #24]
    7688:	18d3      	adds	r3, r2, r3
    768a:	789b      	ldrb	r3, [r3, #2]
    768c:	2bff      	cmp	r3, #255	; 0xff
    768e:	d011      	beq.n	76b4 <cdcdf_acm_disable+0x94>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    7690:	231f      	movs	r3, #31
    7692:	18fb      	adds	r3, r7, r3
    7694:	781b      	ldrb	r3, [r3, #0]
    7696:	69ba      	ldr	r2, [r7, #24]
    7698:	18d3      	adds	r3, r2, r3
    769a:	789b      	ldrb	r3, [r3, #2]
    769c:	0018      	movs	r0, r3
    769e:	4b15      	ldr	r3, [pc, #84]	; (76f4 <cdcdf_acm_disable+0xd4>)
    76a0:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    76a2:	231f      	movs	r3, #31
    76a4:	18fb      	adds	r3, r7, r3
    76a6:	781b      	ldrb	r3, [r3, #0]
    76a8:	69ba      	ldr	r2, [r7, #24]
    76aa:	18d3      	adds	r3, r2, r3
    76ac:	22ff      	movs	r2, #255	; 0xff
    76ae:	709a      	strb	r2, [r3, #2]
    76b0:	e000      	b.n	76b4 <cdcdf_acm_disable+0x94>
			continue;
    76b2:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < 2; i++) {
    76b4:	231f      	movs	r3, #31
    76b6:	18fb      	adds	r3, r7, r3
    76b8:	781a      	ldrb	r2, [r3, #0]
    76ba:	231f      	movs	r3, #31
    76bc:	18fb      	adds	r3, r7, r3
    76be:	3201      	adds	r2, #1
    76c0:	701a      	strb	r2, [r3, #0]
    76c2:	231f      	movs	r3, #31
    76c4:	18fb      	adds	r3, r7, r3
    76c6:	781b      	ldrb	r3, [r3, #0]
    76c8:	2b01      	cmp	r3, #1
    76ca:	d9cc      	bls.n	7666 <cdcdf_acm_disable+0x46>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    76cc:	69bb      	ldr	r3, [r7, #24]
    76ce:	791b      	ldrb	r3, [r3, #4]
    76d0:	2bff      	cmp	r3, #255	; 0xff
    76d2:	d007      	beq.n	76e4 <cdcdf_acm_disable+0xc4>
		usb_d_ep_deinit(func_data->func_ep_out);
    76d4:	69bb      	ldr	r3, [r7, #24]
    76d6:	791b      	ldrb	r3, [r3, #4]
    76d8:	0018      	movs	r0, r3
    76da:	4b06      	ldr	r3, [pc, #24]	; (76f4 <cdcdf_acm_disable+0xd4>)
    76dc:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    76de:	69bb      	ldr	r3, [r7, #24]
    76e0:	22ff      	movs	r2, #255	; 0xff
    76e2:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    76e4:	4b04      	ldr	r3, [pc, #16]	; (76f8 <cdcdf_acm_disable+0xd8>)
    76e6:	2200      	movs	r2, #0
    76e8:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    76ea:	2300      	movs	r3, #0
}
    76ec:	0018      	movs	r0, r3
    76ee:	46bd      	mov	sp, r7
    76f0:	b008      	add	sp, #32
    76f2:	bd80      	pop	{r7, pc}
    76f4:	000026dd 	.word	0x000026dd
    76f8:	20001280 	.word	0x20001280

000076fc <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    76fc:	b580      	push	{r7, lr}
    76fe:	b084      	sub	sp, #16
    7700:	af00      	add	r7, sp, #0
    7702:	60f8      	str	r0, [r7, #12]
    7704:	607a      	str	r2, [r7, #4]
    7706:	230b      	movs	r3, #11
    7708:	18fb      	adds	r3, r7, r3
    770a:	1c0a      	adds	r2, r1, #0
    770c:	701a      	strb	r2, [r3, #0]
	switch (ctrl) {
    770e:	230b      	movs	r3, #11
    7710:	18fb      	adds	r3, r7, r3
    7712:	781b      	ldrb	r3, [r3, #0]
    7714:	2b01      	cmp	r3, #1
    7716:	d00b      	beq.n	7730 <cdcdf_acm_ctrl+0x34>
    7718:	2b02      	cmp	r3, #2
    771a:	d011      	beq.n	7740 <cdcdf_acm_ctrl+0x44>
    771c:	2b00      	cmp	r3, #0
    771e:	d112      	bne.n	7746 <cdcdf_acm_ctrl+0x4a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    7720:	687a      	ldr	r2, [r7, #4]
    7722:	68fb      	ldr	r3, [r7, #12]
    7724:	0011      	movs	r1, r2
    7726:	0018      	movs	r0, r3
    7728:	4b0a      	ldr	r3, [pc, #40]	; (7754 <cdcdf_acm_ctrl+0x58>)
    772a:	4798      	blx	r3
    772c:	0003      	movs	r3, r0
    772e:	e00c      	b.n	774a <cdcdf_acm_ctrl+0x4e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    7730:	687a      	ldr	r2, [r7, #4]
    7732:	68fb      	ldr	r3, [r7, #12]
    7734:	0011      	movs	r1, r2
    7736:	0018      	movs	r0, r3
    7738:	4b07      	ldr	r3, [pc, #28]	; (7758 <cdcdf_acm_ctrl+0x5c>)
    773a:	4798      	blx	r3
    773c:	0003      	movs	r3, r0
    773e:	e004      	b.n	774a <cdcdf_acm_ctrl+0x4e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    7740:	231b      	movs	r3, #27
    7742:	425b      	negs	r3, r3
    7744:	e001      	b.n	774a <cdcdf_acm_ctrl+0x4e>

	default:
		return ERR_INVALID_ARG;
    7746:	230d      	movs	r3, #13
    7748:	425b      	negs	r3, r3
	}
}
    774a:	0018      	movs	r0, r3
    774c:	46bd      	mov	sp, r7
    774e:	b004      	add	sp, #16
    7750:	bd80      	pop	{r7, pc}
    7752:	46c0      	nop			; (mov r8, r8)
    7754:	00007459 	.word	0x00007459
    7758:	00007621 	.word	0x00007621

0000775c <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    775c:	b590      	push	{r4, r7, lr}
    775e:	b087      	sub	sp, #28
    7760:	af00      	add	r7, sp, #0
    7762:	6039      	str	r1, [r7, #0]
    7764:	0011      	movs	r1, r2
    7766:	1dfb      	adds	r3, r7, #7
    7768:	1c02      	adds	r2, r0, #0
    776a:	701a      	strb	r2, [r3, #0]
    776c:	1dbb      	adds	r3, r7, #6
    776e:	1c0a      	adds	r2, r1, #0
    7770:	701a      	strb	r2, [r3, #0]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    7772:	2316      	movs	r3, #22
    7774:	18fa      	adds	r2, r7, r3
    7776:	683b      	ldr	r3, [r7, #0]
    7778:	7999      	ldrb	r1, [r3, #6]
    777a:	79db      	ldrb	r3, [r3, #7]
    777c:	021b      	lsls	r3, r3, #8
    777e:	430b      	orrs	r3, r1
    7780:	8013      	strh	r3, [r2, #0]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    7782:	4b2f      	ldr	r3, [pc, #188]	; (7840 <cdcdf_acm_set_req+0xe4>)
    7784:	4798      	blx	r3
    7786:	0003      	movs	r3, r0
    7788:	613b      	str	r3, [r7, #16]

	switch (req->bRequest) {
    778a:	683b      	ldr	r3, [r7, #0]
    778c:	785b      	ldrb	r3, [r3, #1]
    778e:	2b20      	cmp	r3, #32
    7790:	d002      	beq.n	7798 <cdcdf_acm_set_req+0x3c>
    7792:	2b22      	cmp	r3, #34	; 0x22
    7794:	d037      	beq.n	7806 <cdcdf_acm_set_req+0xaa>
    7796:	e04c      	b.n	7832 <cdcdf_acm_set_req+0xd6>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    7798:	2316      	movs	r3, #22
    779a:	18fb      	adds	r3, r7, r3
    779c:	881b      	ldrh	r3, [r3, #0]
    779e:	2b07      	cmp	r3, #7
    77a0:	d002      	beq.n	77a8 <cdcdf_acm_set_req+0x4c>
			return ERR_INVALID_DATA;
    77a2:	2301      	movs	r3, #1
    77a4:	425b      	negs	r3, r3
    77a6:	e046      	b.n	7836 <cdcdf_acm_set_req+0xda>
		}
		if (USB_SETUP_STAGE == stage) {
    77a8:	1dbb      	adds	r3, r7, #6
    77aa:	781b      	ldrb	r3, [r3, #0]
    77ac:	2b00      	cmp	r3, #0
    77ae:	d10a      	bne.n	77c6 <cdcdf_acm_set_req+0x6a>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    77b0:	2316      	movs	r3, #22
    77b2:	18fb      	adds	r3, r7, r3
    77b4:	881a      	ldrh	r2, [r3, #0]
    77b6:	6939      	ldr	r1, [r7, #16]
    77b8:	1dfb      	adds	r3, r7, #7
    77ba:	7818      	ldrb	r0, [r3, #0]
    77bc:	2300      	movs	r3, #0
    77be:	4c21      	ldr	r4, [pc, #132]	; (7844 <cdcdf_acm_set_req+0xe8>)
    77c0:	47a0      	blx	r4
    77c2:	0003      	movs	r3, r0
    77c4:	e037      	b.n	7836 <cdcdf_acm_set_req+0xda>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    77c6:	2308      	movs	r3, #8
    77c8:	18fa      	adds	r2, r7, r3
    77ca:	693b      	ldr	r3, [r7, #16]
    77cc:	0010      	movs	r0, r2
    77ce:	0019      	movs	r1, r3
    77d0:	2307      	movs	r3, #7
    77d2:	001a      	movs	r2, r3
    77d4:	4b1c      	ldr	r3, [pc, #112]	; (7848 <cdcdf_acm_set_req+0xec>)
    77d6:	4798      	blx	r3
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    77d8:	4b1c      	ldr	r3, [pc, #112]	; (784c <cdcdf_acm_set_req+0xf0>)
    77da:	681b      	ldr	r3, [r3, #0]
    77dc:	2b00      	cmp	r3, #0
    77de:	d007      	beq.n	77f0 <cdcdf_acm_set_req+0x94>
    77e0:	4b1a      	ldr	r3, [pc, #104]	; (784c <cdcdf_acm_set_req+0xf0>)
    77e2:	681b      	ldr	r3, [r3, #0]
    77e4:	2208      	movs	r2, #8
    77e6:	18ba      	adds	r2, r7, r2
    77e8:	0010      	movs	r0, r2
    77ea:	4798      	blx	r3
    77ec:	1e03      	subs	r3, r0, #0
    77ee:	d008      	beq.n	7802 <cdcdf_acm_set_req+0xa6>
				usbd_cdc_line_coding = line_coding_tmp;
    77f0:	4b17      	ldr	r3, [pc, #92]	; (7850 <cdcdf_acm_set_req+0xf4>)
    77f2:	2208      	movs	r2, #8
    77f4:	18ba      	adds	r2, r7, r2
    77f6:	6811      	ldr	r1, [r2, #0]
    77f8:	6019      	str	r1, [r3, #0]
    77fa:	8891      	ldrh	r1, [r2, #4]
    77fc:	8099      	strh	r1, [r3, #4]
    77fe:	7992      	ldrb	r2, [r2, #6]
    7800:	719a      	strb	r2, [r3, #6]
			}
			return ERR_NONE;
    7802:	2300      	movs	r3, #0
    7804:	e017      	b.n	7836 <cdcdf_acm_set_req+0xda>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    7806:	2300      	movs	r3, #0
    7808:	2200      	movs	r2, #0
    780a:	2100      	movs	r1, #0
    780c:	2000      	movs	r0, #0
    780e:	4c0d      	ldr	r4, [pc, #52]	; (7844 <cdcdf_acm_set_req+0xe8>)
    7810:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    7812:	4b10      	ldr	r3, [pc, #64]	; (7854 <cdcdf_acm_set_req+0xf8>)
    7814:	681b      	ldr	r3, [r3, #0]
    7816:	2b00      	cmp	r3, #0
    7818:	d009      	beq.n	782e <cdcdf_acm_set_req+0xd2>
			cdcdf_acm_notify_state(req->wValue);
    781a:	4b0e      	ldr	r3, [pc, #56]	; (7854 <cdcdf_acm_set_req+0xf8>)
    781c:	681a      	ldr	r2, [r3, #0]
    781e:	683b      	ldr	r3, [r7, #0]
    7820:	7899      	ldrb	r1, [r3, #2]
    7822:	78db      	ldrb	r3, [r3, #3]
    7824:	021b      	lsls	r3, r3, #8
    7826:	430b      	orrs	r3, r1
    7828:	b29b      	uxth	r3, r3
    782a:	0018      	movs	r0, r3
    782c:	4790      	blx	r2
		}
		return ERR_NONE;
    782e:	2300      	movs	r3, #0
    7830:	e001      	b.n	7836 <cdcdf_acm_set_req+0xda>
	default:
		return ERR_INVALID_ARG;
    7832:	230d      	movs	r3, #13
    7834:	425b      	negs	r3, r3
	}
}
    7836:	0018      	movs	r0, r3
    7838:	46bd      	mov	sp, r7
    783a:	b007      	add	sp, #28
    783c:	bd90      	pop	{r4, r7, pc}
    783e:	46c0      	nop			; (mov r8, r8)
    7840:	00008891 	.word	0x00008891
    7844:	000086c9 	.word	0x000086c9
    7848:	0000b701 	.word	0x0000b701
    784c:	20001294 	.word	0x20001294
    7850:	20001288 	.word	0x20001288
    7854:	20001290 	.word	0x20001290

00007858 <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    7858:	b590      	push	{r4, r7, lr}
    785a:	b085      	sub	sp, #20
    785c:	af00      	add	r7, sp, #0
    785e:	6039      	str	r1, [r7, #0]
    7860:	0011      	movs	r1, r2
    7862:	1dfb      	adds	r3, r7, #7
    7864:	1c02      	adds	r2, r0, #0
    7866:	701a      	strb	r2, [r3, #0]
    7868:	1dbb      	adds	r3, r7, #6
    786a:	1c0a      	adds	r2, r1, #0
    786c:	701a      	strb	r2, [r3, #0]
	uint16_t len = req->wLength;
    786e:	230e      	movs	r3, #14
    7870:	18fa      	adds	r2, r7, r3
    7872:	683b      	ldr	r3, [r7, #0]
    7874:	7999      	ldrb	r1, [r3, #6]
    7876:	79db      	ldrb	r3, [r3, #7]
    7878:	021b      	lsls	r3, r3, #8
    787a:	430b      	orrs	r3, r1
    787c:	8013      	strh	r3, [r2, #0]

	if (USB_DATA_STAGE == stage) {
    787e:	1dbb      	adds	r3, r7, #6
    7880:	781b      	ldrb	r3, [r3, #0]
    7882:	2b01      	cmp	r3, #1
    7884:	d101      	bne.n	788a <cdcdf_acm_get_req+0x32>
		return ERR_NONE;
    7886:	2300      	movs	r3, #0
    7888:	e018      	b.n	78bc <cdcdf_acm_get_req+0x64>
	}

	switch (req->bRequest) {
    788a:	683b      	ldr	r3, [r7, #0]
    788c:	785b      	ldrb	r3, [r3, #1]
    788e:	2b21      	cmp	r3, #33	; 0x21
    7890:	d112      	bne.n	78b8 <cdcdf_acm_get_req+0x60>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    7892:	230e      	movs	r3, #14
    7894:	18fb      	adds	r3, r7, r3
    7896:	881b      	ldrh	r3, [r3, #0]
    7898:	2b07      	cmp	r3, #7
    789a:	d002      	beq.n	78a2 <cdcdf_acm_get_req+0x4a>
			return ERR_INVALID_DATA;
    789c:	2301      	movs	r3, #1
    789e:	425b      	negs	r3, r3
    78a0:	e00c      	b.n	78bc <cdcdf_acm_get_req+0x64>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    78a2:	230e      	movs	r3, #14
    78a4:	18fb      	adds	r3, r7, r3
    78a6:	881a      	ldrh	r2, [r3, #0]
    78a8:	4906      	ldr	r1, [pc, #24]	; (78c4 <cdcdf_acm_get_req+0x6c>)
    78aa:	1dfb      	adds	r3, r7, #7
    78ac:	7818      	ldrb	r0, [r3, #0]
    78ae:	2300      	movs	r3, #0
    78b0:	4c05      	ldr	r4, [pc, #20]	; (78c8 <cdcdf_acm_get_req+0x70>)
    78b2:	47a0      	blx	r4
    78b4:	0003      	movs	r3, r0
    78b6:	e001      	b.n	78bc <cdcdf_acm_get_req+0x64>
	default:
		return ERR_INVALID_ARG;
    78b8:	230d      	movs	r3, #13
    78ba:	425b      	negs	r3, r3
	}
}
    78bc:	0018      	movs	r0, r3
    78be:	46bd      	mov	sp, r7
    78c0:	b005      	add	sp, #20
    78c2:	bd90      	pop	{r4, r7, pc}
    78c4:	20001288 	.word	0x20001288
    78c8:	000086c9 	.word	0x000086c9

000078cc <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    78cc:	b580      	push	{r7, lr}
    78ce:	b082      	sub	sp, #8
    78d0:	af00      	add	r7, sp, #0
    78d2:	6039      	str	r1, [r7, #0]
    78d4:	0011      	movs	r1, r2
    78d6:	1dfb      	adds	r3, r7, #7
    78d8:	1c02      	adds	r2, r0, #0
    78da:	701a      	strb	r2, [r3, #0]
    78dc:	1dbb      	adds	r3, r7, #6
    78de:	1c0a      	adds	r2, r1, #0
    78e0:	701a      	strb	r2, [r3, #0]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    78e2:	683b      	ldr	r3, [r7, #0]
    78e4:	781b      	ldrb	r3, [r3, #0]
    78e6:	095b      	lsrs	r3, r3, #5
    78e8:	b2db      	uxtb	r3, r3
    78ea:	001a      	movs	r2, r3
    78ec:	2303      	movs	r3, #3
    78ee:	4013      	ands	r3, r2
    78f0:	2b01      	cmp	r3, #1
    78f2:	d002      	beq.n	78fa <cdcdf_acm_req+0x2e>
		return ERR_NOT_FOUND;
    78f4:	230a      	movs	r3, #10
    78f6:	425b      	negs	r3, r3
    78f8:	e030      	b.n	795c <cdcdf_acm_req+0x90>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    78fa:	683b      	ldr	r3, [r7, #0]
    78fc:	791a      	ldrb	r2, [r3, #4]
    78fe:	795b      	ldrb	r3, [r3, #5]
    7900:	021b      	lsls	r3, r3, #8
    7902:	4313      	orrs	r3, r2
    7904:	b29a      	uxth	r2, r3
    7906:	4b17      	ldr	r3, [pc, #92]	; (7964 <cdcdf_acm_req+0x98>)
    7908:	781b      	ldrb	r3, [r3, #0]
    790a:	b29b      	uxth	r3, r3
    790c:	429a      	cmp	r2, r3
    790e:	d00a      	beq.n	7926 <cdcdf_acm_req+0x5a>
    7910:	683b      	ldr	r3, [r7, #0]
    7912:	791a      	ldrb	r2, [r3, #4]
    7914:	795b      	ldrb	r3, [r3, #5]
    7916:	021b      	lsls	r3, r3, #8
    7918:	4313      	orrs	r3, r2
    791a:	b29a      	uxth	r2, r3
    791c:	4b11      	ldr	r3, [pc, #68]	; (7964 <cdcdf_acm_req+0x98>)
    791e:	785b      	ldrb	r3, [r3, #1]
    7920:	b29b      	uxth	r3, r3
    7922:	429a      	cmp	r2, r3
    7924:	d118      	bne.n	7958 <cdcdf_acm_req+0x8c>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    7926:	683b      	ldr	r3, [r7, #0]
    7928:	781b      	ldrb	r3, [r3, #0]
    792a:	b25b      	sxtb	r3, r3
    792c:	2b00      	cmp	r3, #0
    792e:	da09      	bge.n	7944 <cdcdf_acm_req+0x78>
			return cdcdf_acm_get_req(ep, req, stage);
    7930:	1dbb      	adds	r3, r7, #6
    7932:	781a      	ldrb	r2, [r3, #0]
    7934:	6839      	ldr	r1, [r7, #0]
    7936:	1dfb      	adds	r3, r7, #7
    7938:	781b      	ldrb	r3, [r3, #0]
    793a:	0018      	movs	r0, r3
    793c:	4b0a      	ldr	r3, [pc, #40]	; (7968 <cdcdf_acm_req+0x9c>)
    793e:	4798      	blx	r3
    7940:	0003      	movs	r3, r0
    7942:	e00b      	b.n	795c <cdcdf_acm_req+0x90>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    7944:	1dbb      	adds	r3, r7, #6
    7946:	781a      	ldrb	r2, [r3, #0]
    7948:	6839      	ldr	r1, [r7, #0]
    794a:	1dfb      	adds	r3, r7, #7
    794c:	781b      	ldrb	r3, [r3, #0]
    794e:	0018      	movs	r0, r3
    7950:	4b06      	ldr	r3, [pc, #24]	; (796c <cdcdf_acm_req+0xa0>)
    7952:	4798      	blx	r3
    7954:	0003      	movs	r3, r0
    7956:	e001      	b.n	795c <cdcdf_acm_req+0x90>
		}
	} else {
		return ERR_NOT_FOUND;
    7958:	230a      	movs	r3, #10
    795a:	425b      	negs	r3, r3
	}
}
    795c:	0018      	movs	r0, r3
    795e:	46bd      	mov	sp, r7
    7960:	b002      	add	sp, #8
    7962:	bd80      	pop	{r7, pc}
    7964:	20001280 	.word	0x20001280
    7968:	00007859 	.word	0x00007859
    796c:	0000775d 	.word	0x0000775d

00007970 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    7970:	b580      	push	{r7, lr}
    7972:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    7974:	4b0d      	ldr	r3, [pc, #52]	; (79ac <cdcdf_acm_init+0x3c>)
    7976:	4798      	blx	r3
    7978:	0003      	movs	r3, r0
    797a:	2b01      	cmp	r3, #1
    797c:	d902      	bls.n	7984 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    797e:	2311      	movs	r3, #17
    7980:	425b      	negs	r3, r3
    7982:	e00f      	b.n	79a4 <cdcdf_acm_init+0x34>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    7984:	4b0a      	ldr	r3, [pc, #40]	; (79b0 <cdcdf_acm_init+0x40>)
    7986:	4a0b      	ldr	r2, [pc, #44]	; (79b4 <cdcdf_acm_init+0x44>)
    7988:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    798a:	4b09      	ldr	r3, [pc, #36]	; (79b0 <cdcdf_acm_init+0x40>)
    798c:	4a0a      	ldr	r2, [pc, #40]	; (79b8 <cdcdf_acm_init+0x48>)
    798e:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    7990:	4b07      	ldr	r3, [pc, #28]	; (79b0 <cdcdf_acm_init+0x40>)
    7992:	0018      	movs	r0, r3
    7994:	4b09      	ldr	r3, [pc, #36]	; (79bc <cdcdf_acm_init+0x4c>)
    7996:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    7998:	4b09      	ldr	r3, [pc, #36]	; (79c0 <cdcdf_acm_init+0x50>)
    799a:	0019      	movs	r1, r3
    799c:	2001      	movs	r0, #1
    799e:	4b09      	ldr	r3, [pc, #36]	; (79c4 <cdcdf_acm_init+0x54>)
    79a0:	4798      	blx	r3
	return ERR_NONE;
    79a2:	2300      	movs	r3, #0
}
    79a4:	0018      	movs	r0, r3
    79a6:	46bd      	mov	sp, r7
    79a8:	bd80      	pop	{r7, pc}
    79aa:	46c0      	nop			; (mov r8, r8)
    79ac:	000088a5 	.word	0x000088a5
    79b0:	20001274 	.word	0x20001274
    79b4:	000076fd 	.word	0x000076fd
    79b8:	20001280 	.word	0x20001280
    79bc:	00008809 	.word	0x00008809
    79c0:	20000078 	.word	0x20000078
    79c4:	00008725 	.word	0x00008725

000079c8 <usb_get_u16>:
{
    79c8:	b580      	push	{r7, lr}
    79ca:	b082      	sub	sp, #8
    79cc:	af00      	add	r7, sp, #0
    79ce:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    79d0:	687b      	ldr	r3, [r7, #4]
    79d2:	781b      	ldrb	r3, [r3, #0]
    79d4:	b29a      	uxth	r2, r3
    79d6:	687b      	ldr	r3, [r7, #4]
    79d8:	3301      	adds	r3, #1
    79da:	781b      	ldrb	r3, [r3, #0]
    79dc:	b29b      	uxth	r3, r3
    79de:	021b      	lsls	r3, r3, #8
    79e0:	b29b      	uxth	r3, r3
    79e2:	18d3      	adds	r3, r2, r3
    79e4:	b29b      	uxth	r3, r3
}
    79e6:	0018      	movs	r0, r3
    79e8:	46bd      	mov	sp, r7
    79ea:	b002      	add	sp, #8
    79ec:	bd80      	pop	{r7, pc}

000079ee <usb_desc_len>:
{
    79ee:	b580      	push	{r7, lr}
    79f0:	b082      	sub	sp, #8
    79f2:	af00      	add	r7, sp, #0
    79f4:	6078      	str	r0, [r7, #4]
	return desc[0];
    79f6:	687b      	ldr	r3, [r7, #4]
    79f8:	781b      	ldrb	r3, [r3, #0]
}
    79fa:	0018      	movs	r0, r3
    79fc:	46bd      	mov	sp, r7
    79fe:	b002      	add	sp, #8
    7a00:	bd80      	pop	{r7, pc}
	...

00007a04 <usb_desc_next>:
{
    7a04:	b580      	push	{r7, lr}
    7a06:	b082      	sub	sp, #8
    7a08:	af00      	add	r7, sp, #0
    7a0a:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    7a0c:	687b      	ldr	r3, [r7, #4]
    7a0e:	0018      	movs	r0, r3
    7a10:	4b04      	ldr	r3, [pc, #16]	; (7a24 <usb_desc_next+0x20>)
    7a12:	4798      	blx	r3
    7a14:	0003      	movs	r3, r0
    7a16:	001a      	movs	r2, r3
    7a18:	687b      	ldr	r3, [r7, #4]
    7a1a:	189b      	adds	r3, r3, r2
}
    7a1c:	0018      	movs	r0, r3
    7a1e:	46bd      	mov	sp, r7
    7a20:	b002      	add	sp, #8
    7a22:	bd80      	pop	{r7, pc}
    7a24:	000079ef 	.word	0x000079ef

00007a28 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    7a28:	b580      	push	{r7, lr}
    7a2a:	b082      	sub	sp, #8
    7a2c:	af00      	add	r7, sp, #0
    7a2e:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    7a30:	687b      	ldr	r3, [r7, #4]
    7a32:	3302      	adds	r3, #2
    7a34:	0018      	movs	r0, r3
    7a36:	4b03      	ldr	r3, [pc, #12]	; (7a44 <usb_cfg_desc_total_len+0x1c>)
    7a38:	4798      	blx	r3
    7a3a:	0003      	movs	r3, r0
}
    7a3c:	0018      	movs	r0, r3
    7a3e:	46bd      	mov	sp, r7
    7a40:	b002      	add	sp, #8
    7a42:	bd80      	pop	{r7, pc}
    7a44:	000079c9 	.word	0x000079c9

00007a48 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    7a48:	b590      	push	{r4, r7, lr}
    7a4a:	b085      	sub	sp, #20
    7a4c:	af00      	add	r7, sp, #0
    7a4e:	0002      	movs	r2, r0
    7a50:	6039      	str	r1, [r7, #0]
    7a52:	1dfb      	adds	r3, r7, #7
    7a54:	701a      	strb	r2, [r3, #0]
	uint8_t *dev_desc = NULL;
    7a56:	2300      	movs	r3, #0
    7a58:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    7a5a:	230a      	movs	r3, #10
    7a5c:	18fa      	adds	r2, r7, r3
    7a5e:	683b      	ldr	r3, [r7, #0]
    7a60:	7999      	ldrb	r1, [r3, #6]
    7a62:	79db      	ldrb	r3, [r3, #7]
    7a64:	021b      	lsls	r3, r3, #8
    7a66:	430b      	orrs	r3, r1
    7a68:	8013      	strh	r3, [r2, #0]
	if (length > 0x12) {
    7a6a:	230a      	movs	r3, #10
    7a6c:	18fb      	adds	r3, r7, r3
    7a6e:	881b      	ldrh	r3, [r3, #0]
    7a70:	2b12      	cmp	r3, #18
    7a72:	d903      	bls.n	7a7c <usbdc_get_dev_desc+0x34>
		length = 0x12;
    7a74:	230a      	movs	r3, #10
    7a76:	18fb      	adds	r3, r7, r3
    7a78:	2212      	movs	r2, #18
    7a7a:	801a      	strh	r2, [r3, #0]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    7a7c:	68fb      	ldr	r3, [r7, #12]
    7a7e:	2b00      	cmp	r3, #0
    7a80:	d10b      	bne.n	7a9a <usbdc_get_dev_desc+0x52>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    7a82:	4b11      	ldr	r3, [pc, #68]	; (7ac8 <usbdc_get_dev_desc+0x80>)
    7a84:	681b      	ldr	r3, [r3, #0]
    7a86:	6818      	ldr	r0, [r3, #0]
    7a88:	4b0f      	ldr	r3, [pc, #60]	; (7ac8 <usbdc_get_dev_desc+0x80>)
    7a8a:	681b      	ldr	r3, [r3, #0]
    7a8c:	685b      	ldr	r3, [r3, #4]
    7a8e:	2201      	movs	r2, #1
    7a90:	0019      	movs	r1, r3
    7a92:	4b0e      	ldr	r3, [pc, #56]	; (7acc <usbdc_get_dev_desc+0x84>)
    7a94:	4798      	blx	r3
    7a96:	0003      	movs	r3, r0
    7a98:	60fb      	str	r3, [r7, #12]
	}
	if (!dev_desc) {
    7a9a:	68fb      	ldr	r3, [r7, #12]
    7a9c:	2b00      	cmp	r3, #0
    7a9e:	d101      	bne.n	7aa4 <usbdc_get_dev_desc+0x5c>
		return false;
    7aa0:	2300      	movs	r3, #0
    7aa2:	e00d      	b.n	7ac0 <usbdc_get_dev_desc+0x78>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    7aa4:	230a      	movs	r3, #10
    7aa6:	18fb      	adds	r3, r7, r3
    7aa8:	881a      	ldrh	r2, [r3, #0]
    7aaa:	68f9      	ldr	r1, [r7, #12]
    7aac:	1dfb      	adds	r3, r7, #7
    7aae:	7818      	ldrb	r0, [r3, #0]
    7ab0:	2300      	movs	r3, #0
    7ab2:	4c07      	ldr	r4, [pc, #28]	; (7ad0 <usbdc_get_dev_desc+0x88>)
    7ab4:	47a0      	blx	r4
    7ab6:	1e03      	subs	r3, r0, #0
    7ab8:	d001      	beq.n	7abe <usbdc_get_dev_desc+0x76>
		return false;
    7aba:	2300      	movs	r3, #0
    7abc:	e000      	b.n	7ac0 <usbdc_get_dev_desc+0x78>
	}
	return true;
    7abe:	2301      	movs	r3, #1
}
    7ac0:	0018      	movs	r0, r3
    7ac2:	46bd      	mov	sp, r7
    7ac4:	b005      	add	sp, #20
    7ac6:	bd90      	pop	{r4, r7, pc}
    7ac8:	20001298 	.word	0x20001298
    7acc:	00008981 	.word	0x00008981
    7ad0:	000086c9 	.word	0x000086c9

00007ad4 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    7ad4:	b590      	push	{r4, r7, lr}
    7ad6:	b087      	sub	sp, #28
    7ad8:	af00      	add	r7, sp, #0
    7ada:	0002      	movs	r2, r0
    7adc:	6039      	str	r1, [r7, #0]
    7ade:	1dfb      	adds	r3, r7, #7
    7ae0:	701a      	strb	r2, [r3, #0]
	uint8_t *cfg_desc = NULL;
    7ae2:	2300      	movs	r3, #0
    7ae4:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    7ae6:	2312      	movs	r3, #18
    7ae8:	18fa      	adds	r2, r7, r3
    7aea:	683b      	ldr	r3, [r7, #0]
    7aec:	7999      	ldrb	r1, [r3, #6]
    7aee:	79db      	ldrb	r3, [r3, #7]
    7af0:	021b      	lsls	r3, r3, #8
    7af2:	430b      	orrs	r3, r1
    7af4:	8013      	strh	r3, [r2, #0]
	uint8_t  index    = req->wValue & 0x00FF;
    7af6:	683b      	ldr	r3, [r7, #0]
    7af8:	789a      	ldrb	r2, [r3, #2]
    7afa:	78db      	ldrb	r3, [r3, #3]
    7afc:	021b      	lsls	r3, r3, #8
    7afe:	4313      	orrs	r3, r2
    7b00:	b29a      	uxth	r2, r3
    7b02:	2310      	movs	r3, #16
    7b04:	18fb      	adds	r3, r7, r3
    7b06:	701a      	strb	r2, [r3, #0]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    7b08:	2312      	movs	r3, #18
    7b0a:	18fb      	adds	r3, r7, r3
    7b0c:	881b      	ldrh	r3, [r3, #0]
    7b0e:	4a28      	ldr	r2, [pc, #160]	; (7bb0 <usbdc_get_cfg_desc+0xdc>)
    7b10:	7f12      	ldrb	r2, [r2, #28]
    7b12:	3a01      	subs	r2, #1
    7b14:	401a      	ands	r2, r3
    7b16:	2311      	movs	r3, #17
    7b18:	18fb      	adds	r3, r7, r3
    7b1a:	4251      	negs	r1, r2
    7b1c:	414a      	adcs	r2, r1
    7b1e:	701a      	strb	r2, [r3, #0]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    7b20:	697b      	ldr	r3, [r7, #20]
    7b22:	2b00      	cmp	r3, #0
    7b24:	d10f      	bne.n	7b46 <usbdc_get_cfg_desc+0x72>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    7b26:	4b22      	ldr	r3, [pc, #136]	; (7bb0 <usbdc_get_cfg_desc+0xdc>)
    7b28:	681b      	ldr	r3, [r3, #0]
    7b2a:	6818      	ldr	r0, [r3, #0]
    7b2c:	4b20      	ldr	r3, [pc, #128]	; (7bb0 <usbdc_get_cfg_desc+0xdc>)
    7b2e:	681b      	ldr	r3, [r3, #0]
    7b30:	6859      	ldr	r1, [r3, #4]
    7b32:	2310      	movs	r3, #16
    7b34:	18fb      	adds	r3, r7, r3
    7b36:	781b      	ldrb	r3, [r3, #0]
    7b38:	3301      	adds	r3, #1
    7b3a:	b2db      	uxtb	r3, r3
    7b3c:	001a      	movs	r2, r3
    7b3e:	4b1d      	ldr	r3, [pc, #116]	; (7bb4 <usbdc_get_cfg_desc+0xe0>)
    7b40:	4798      	blx	r3
    7b42:	0003      	movs	r3, r0
    7b44:	617b      	str	r3, [r7, #20]
	}
	if (NULL == cfg_desc) {
    7b46:	697b      	ldr	r3, [r7, #20]
    7b48:	2b00      	cmp	r3, #0
    7b4a:	d101      	bne.n	7b50 <usbdc_get_cfg_desc+0x7c>
		return false;
    7b4c:	2300      	movs	r3, #0
    7b4e:	e02b      	b.n	7ba8 <usbdc_get_cfg_desc+0xd4>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    7b50:	230e      	movs	r3, #14
    7b52:	18fc      	adds	r4, r7, r3
    7b54:	697b      	ldr	r3, [r7, #20]
    7b56:	0018      	movs	r0, r3
    7b58:	4b17      	ldr	r3, [pc, #92]	; (7bb8 <usbdc_get_cfg_desc+0xe4>)
    7b5a:	4798      	blx	r3
    7b5c:	0003      	movs	r3, r0
    7b5e:	8023      	strh	r3, [r4, #0]
	if (length <= total_len) {
    7b60:	2312      	movs	r3, #18
    7b62:	18fa      	adds	r2, r7, r3
    7b64:	230e      	movs	r3, #14
    7b66:	18fb      	adds	r3, r7, r3
    7b68:	8812      	ldrh	r2, [r2, #0]
    7b6a:	881b      	ldrh	r3, [r3, #0]
    7b6c:	429a      	cmp	r2, r3
    7b6e:	d804      	bhi.n	7b7a <usbdc_get_cfg_desc+0xa6>
		need_zlp = false;
    7b70:	2311      	movs	r3, #17
    7b72:	18fb      	adds	r3, r7, r3
    7b74:	2200      	movs	r2, #0
    7b76:	701a      	strb	r2, [r3, #0]
    7b78:	e005      	b.n	7b86 <usbdc_get_cfg_desc+0xb2>
	} else {
		length = total_len;
    7b7a:	2312      	movs	r3, #18
    7b7c:	18fb      	adds	r3, r7, r3
    7b7e:	220e      	movs	r2, #14
    7b80:	18ba      	adds	r2, r7, r2
    7b82:	8812      	ldrh	r2, [r2, #0]
    7b84:	801a      	strh	r2, [r3, #0]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    7b86:	2312      	movs	r3, #18
    7b88:	18fb      	adds	r3, r7, r3
    7b8a:	881a      	ldrh	r2, [r3, #0]
    7b8c:	2311      	movs	r3, #17
    7b8e:	18fb      	adds	r3, r7, r3
    7b90:	781c      	ldrb	r4, [r3, #0]
    7b92:	6979      	ldr	r1, [r7, #20]
    7b94:	1dfb      	adds	r3, r7, #7
    7b96:	7818      	ldrb	r0, [r3, #0]
    7b98:	0023      	movs	r3, r4
    7b9a:	4c08      	ldr	r4, [pc, #32]	; (7bbc <usbdc_get_cfg_desc+0xe8>)
    7b9c:	47a0      	blx	r4
    7b9e:	1e03      	subs	r3, r0, #0
    7ba0:	d001      	beq.n	7ba6 <usbdc_get_cfg_desc+0xd2>
		return false;
    7ba2:	2300      	movs	r3, #0
    7ba4:	e000      	b.n	7ba8 <usbdc_get_cfg_desc+0xd4>
	}
	return true;
    7ba6:	2301      	movs	r3, #1
}
    7ba8:	0018      	movs	r0, r3
    7baa:	46bd      	mov	sp, r7
    7bac:	b007      	add	sp, #28
    7bae:	bd90      	pop	{r4, r7, pc}
    7bb0:	20001298 	.word	0x20001298
    7bb4:	00008a51 	.word	0x00008a51
    7bb8:	00007a29 	.word	0x00007a29
    7bbc:	000086c9 	.word	0x000086c9

00007bc0 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    7bc0:	b590      	push	{r4, r7, lr}
    7bc2:	b085      	sub	sp, #20
    7bc4:	af00      	add	r7, sp, #0
    7bc6:	0002      	movs	r2, r0
    7bc8:	6039      	str	r1, [r7, #0]
    7bca:	1dfb      	adds	r3, r7, #7
    7bcc:	701a      	strb	r2, [r3, #0]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    7bce:	230e      	movs	r3, #14
    7bd0:	18fa      	adds	r2, r7, r3
    7bd2:	683b      	ldr	r3, [r7, #0]
    7bd4:	7999      	ldrb	r1, [r3, #6]
    7bd6:	79db      	ldrb	r3, [r3, #7]
    7bd8:	021b      	lsls	r3, r3, #8
    7bda:	430b      	orrs	r3, r1
    7bdc:	8013      	strh	r3, [r2, #0]
	uint8_t  index    = req->wValue & 0x00FF;
    7bde:	683b      	ldr	r3, [r7, #0]
    7be0:	789a      	ldrb	r2, [r3, #2]
    7be2:	78db      	ldrb	r3, [r3, #3]
    7be4:	021b      	lsls	r3, r3, #8
    7be6:	4313      	orrs	r3, r2
    7be8:	b29a      	uxth	r2, r3
    7bea:	230c      	movs	r3, #12
    7bec:	18fb      	adds	r3, r7, r3
    7bee:	701a      	strb	r2, [r3, #0]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    7bf0:	230e      	movs	r3, #14
    7bf2:	18fb      	adds	r3, r7, r3
    7bf4:	881b      	ldrh	r3, [r3, #0]
    7bf6:	4a21      	ldr	r2, [pc, #132]	; (7c7c <usbdc_get_str_desc+0xbc>)
    7bf8:	7f12      	ldrb	r2, [r2, #28]
    7bfa:	3a01      	subs	r2, #1
    7bfc:	401a      	ands	r2, r3
    7bfe:	230d      	movs	r3, #13
    7c00:	18fb      	adds	r3, r7, r3
    7c02:	4251      	negs	r1, r2
    7c04:	414a      	adcs	r2, r1
    7c06:	701a      	strb	r2, [r3, #0]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    7c08:	4b1c      	ldr	r3, [pc, #112]	; (7c7c <usbdc_get_str_desc+0xbc>)
    7c0a:	681b      	ldr	r3, [r3, #0]
    7c0c:	6818      	ldr	r0, [r3, #0]
    7c0e:	4b1b      	ldr	r3, [pc, #108]	; (7c7c <usbdc_get_str_desc+0xbc>)
    7c10:	681b      	ldr	r3, [r3, #0]
    7c12:	6859      	ldr	r1, [r3, #4]
    7c14:	230c      	movs	r3, #12
    7c16:	18fb      	adds	r3, r7, r3
    7c18:	781b      	ldrb	r3, [r3, #0]
    7c1a:	001a      	movs	r2, r3
    7c1c:	4b18      	ldr	r3, [pc, #96]	; (7c80 <usbdc_get_str_desc+0xc0>)
    7c1e:	4798      	blx	r3
    7c20:	0003      	movs	r3, r0
    7c22:	60bb      	str	r3, [r7, #8]
	if (NULL == str_desc) {
    7c24:	68bb      	ldr	r3, [r7, #8]
    7c26:	2b00      	cmp	r3, #0
    7c28:	d101      	bne.n	7c2e <usbdc_get_str_desc+0x6e>
		return false;
    7c2a:	2300      	movs	r3, #0
    7c2c:	e022      	b.n	7c74 <usbdc_get_str_desc+0xb4>
	}
	if (length <= str_desc[0]) {
    7c2e:	68bb      	ldr	r3, [r7, #8]
    7c30:	781b      	ldrb	r3, [r3, #0]
    7c32:	b29b      	uxth	r3, r3
    7c34:	220e      	movs	r2, #14
    7c36:	18ba      	adds	r2, r7, r2
    7c38:	8812      	ldrh	r2, [r2, #0]
    7c3a:	429a      	cmp	r2, r3
    7c3c:	d804      	bhi.n	7c48 <usbdc_get_str_desc+0x88>
		need_zlp = false;
    7c3e:	230d      	movs	r3, #13
    7c40:	18fb      	adds	r3, r7, r3
    7c42:	2200      	movs	r2, #0
    7c44:	701a      	strb	r2, [r3, #0]
    7c46:	e004      	b.n	7c52 <usbdc_get_str_desc+0x92>
	} else {
		length = str_desc[0];
    7c48:	68bb      	ldr	r3, [r7, #8]
    7c4a:	781a      	ldrb	r2, [r3, #0]
    7c4c:	230e      	movs	r3, #14
    7c4e:	18fb      	adds	r3, r7, r3
    7c50:	801a      	strh	r2, [r3, #0]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    7c52:	230e      	movs	r3, #14
    7c54:	18fb      	adds	r3, r7, r3
    7c56:	881a      	ldrh	r2, [r3, #0]
    7c58:	230d      	movs	r3, #13
    7c5a:	18fb      	adds	r3, r7, r3
    7c5c:	781c      	ldrb	r4, [r3, #0]
    7c5e:	68b9      	ldr	r1, [r7, #8]
    7c60:	1dfb      	adds	r3, r7, #7
    7c62:	7818      	ldrb	r0, [r3, #0]
    7c64:	0023      	movs	r3, r4
    7c66:	4c07      	ldr	r4, [pc, #28]	; (7c84 <usbdc_get_str_desc+0xc4>)
    7c68:	47a0      	blx	r4
    7c6a:	1e03      	subs	r3, r0, #0
    7c6c:	d001      	beq.n	7c72 <usbdc_get_str_desc+0xb2>
		return false;
    7c6e:	2300      	movs	r3, #0
    7c70:	e000      	b.n	7c74 <usbdc_get_str_desc+0xb4>
	}
	return true;
    7c72:	2301      	movs	r3, #1
}
    7c74:	0018      	movs	r0, r3
    7c76:	46bd      	mov	sp, r7
    7c78:	b005      	add	sp, #20
    7c7a:	bd90      	pop	{r4, r7, pc}
    7c7c:	20001298 	.word	0x20001298
    7c80:	00008ad5 	.word	0x00008ad5
    7c84:	000086c9 	.word	0x000086c9

00007c88 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    7c88:	b580      	push	{r7, lr}
    7c8a:	b084      	sub	sp, #16
    7c8c:	af00      	add	r7, sp, #0
    7c8e:	0002      	movs	r2, r0
    7c90:	6039      	str	r1, [r7, #0]
    7c92:	1dfb      	adds	r3, r7, #7
    7c94:	701a      	strb	r2, [r3, #0]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    7c96:	683b      	ldr	r3, [r7, #0]
    7c98:	789a      	ldrb	r2, [r3, #2]
    7c9a:	78db      	ldrb	r3, [r3, #3]
    7c9c:	021b      	lsls	r3, r3, #8
    7c9e:	4313      	orrs	r3, r2
    7ca0:	b29b      	uxth	r3, r3
    7ca2:	0a1b      	lsrs	r3, r3, #8
    7ca4:	b29a      	uxth	r2, r3
    7ca6:	230f      	movs	r3, #15
    7ca8:	18fb      	adds	r3, r7, r3
    7caa:	701a      	strb	r2, [r3, #0]
	switch (type) {
    7cac:	230f      	movs	r3, #15
    7cae:	18fb      	adds	r3, r7, r3
    7cb0:	781b      	ldrb	r3, [r3, #0]
    7cb2:	2b02      	cmp	r3, #2
    7cb4:	d00f      	beq.n	7cd6 <usbdc_get_desc_req+0x4e>
    7cb6:	2b03      	cmp	r3, #3
    7cb8:	d016      	beq.n	7ce8 <usbdc_get_desc_req+0x60>
    7cba:	2b01      	cmp	r3, #1
    7cbc:	d002      	beq.n	7cc4 <usbdc_get_desc_req+0x3c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    7cbe:	46c0      	nop			; (mov r8, r8)
	}
	return false;
    7cc0:	2300      	movs	r3, #0
    7cc2:	e019      	b.n	7cf8 <usbdc_get_desc_req+0x70>
		return usbdc_get_dev_desc(ep, req);
    7cc4:	683a      	ldr	r2, [r7, #0]
    7cc6:	1dfb      	adds	r3, r7, #7
    7cc8:	781b      	ldrb	r3, [r3, #0]
    7cca:	0011      	movs	r1, r2
    7ccc:	0018      	movs	r0, r3
    7cce:	4b0c      	ldr	r3, [pc, #48]	; (7d00 <usbdc_get_desc_req+0x78>)
    7cd0:	4798      	blx	r3
    7cd2:	0003      	movs	r3, r0
    7cd4:	e010      	b.n	7cf8 <usbdc_get_desc_req+0x70>
		return usbdc_get_cfg_desc(ep, req);
    7cd6:	683a      	ldr	r2, [r7, #0]
    7cd8:	1dfb      	adds	r3, r7, #7
    7cda:	781b      	ldrb	r3, [r3, #0]
    7cdc:	0011      	movs	r1, r2
    7cde:	0018      	movs	r0, r3
    7ce0:	4b08      	ldr	r3, [pc, #32]	; (7d04 <usbdc_get_desc_req+0x7c>)
    7ce2:	4798      	blx	r3
    7ce4:	0003      	movs	r3, r0
    7ce6:	e007      	b.n	7cf8 <usbdc_get_desc_req+0x70>
		return usbdc_get_str_desc(ep, req);
    7ce8:	683a      	ldr	r2, [r7, #0]
    7cea:	1dfb      	adds	r3, r7, #7
    7cec:	781b      	ldrb	r3, [r3, #0]
    7cee:	0011      	movs	r1, r2
    7cf0:	0018      	movs	r0, r3
    7cf2:	4b05      	ldr	r3, [pc, #20]	; (7d08 <usbdc_get_desc_req+0x80>)
    7cf4:	4798      	blx	r3
    7cf6:	0003      	movs	r3, r0
}
    7cf8:	0018      	movs	r0, r3
    7cfa:	46bd      	mov	sp, r7
    7cfc:	b004      	add	sp, #16
    7cfe:	bd80      	pop	{r7, pc}
    7d00:	00007a49 	.word	0x00007a49
    7d04:	00007ad5 	.word	0x00007ad5
    7d08:	00007bc1 	.word	0x00007bc1

00007d0c <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    7d0c:	b590      	push	{r4, r7, lr}
    7d0e:	b085      	sub	sp, #20
    7d10:	af00      	add	r7, sp, #0
    7d12:	0002      	movs	r2, r0
    7d14:	6039      	str	r1, [r7, #0]
    7d16:	1dfb      	adds	r3, r7, #7
    7d18:	701a      	strb	r2, [r3, #0]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    7d1a:	683b      	ldr	r3, [r7, #0]
    7d1c:	781b      	ldrb	r3, [r3, #0]
    7d1e:	001a      	movs	r2, r3
    7d20:	231f      	movs	r3, #31
    7d22:	4013      	ands	r3, r2
    7d24:	d41e      	bmi.n	7d64 <usbdc_get_status_req+0x58>
    7d26:	2b01      	cmp	r3, #1
    7d28:	dd02      	ble.n	7d30 <usbdc_get_status_req+0x24>
    7d2a:	2b02      	cmp	r3, #2
    7d2c:	d003      	beq.n	7d36 <usbdc_get_status_req+0x2a>
    7d2e:	e019      	b.n	7d64 <usbdc_get_status_req+0x58>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    7d30:	2300      	movs	r3, #0
    7d32:	60fb      	str	r3, [r7, #12]
		break;
    7d34:	e018      	b.n	7d68 <usbdc_get_status_req+0x5c>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    7d36:	683b      	ldr	r3, [r7, #0]
    7d38:	791a      	ldrb	r2, [r3, #4]
    7d3a:	795b      	ldrb	r3, [r3, #5]
    7d3c:	021b      	lsls	r3, r3, #8
    7d3e:	4313      	orrs	r3, r2
    7d40:	b29b      	uxth	r3, r3
    7d42:	b2db      	uxtb	r3, r3
    7d44:	2102      	movs	r1, #2
    7d46:	0018      	movs	r0, r3
    7d48:	4b12      	ldr	r3, [pc, #72]	; (7d94 <usbdc_get_status_req+0x88>)
    7d4a:	4798      	blx	r3
    7d4c:	0003      	movs	r3, r0
    7d4e:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    7d50:	68fb      	ldr	r3, [r7, #12]
    7d52:	2b00      	cmp	r3, #0
    7d54:	da01      	bge.n	7d5a <usbdc_get_status_req+0x4e>
			return false;
    7d56:	2300      	movs	r3, #0
    7d58:	e017      	b.n	7d8a <usbdc_get_status_req+0x7e>
		}
		st = st & 0x1;
    7d5a:	68fb      	ldr	r3, [r7, #12]
    7d5c:	2201      	movs	r2, #1
    7d5e:	4013      	ands	r3, r2
    7d60:	60fb      	str	r3, [r7, #12]
		break;
    7d62:	e001      	b.n	7d68 <usbdc_get_status_req+0x5c>
	default:
		return false;
    7d64:	2300      	movs	r3, #0
    7d66:	e010      	b.n	7d8a <usbdc_get_status_req+0x7e>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    7d68:	4b0b      	ldr	r3, [pc, #44]	; (7d98 <usbdc_get_status_req+0x8c>)
    7d6a:	695b      	ldr	r3, [r3, #20]
    7d6c:	220c      	movs	r2, #12
    7d6e:	18b9      	adds	r1, r7, r2
    7d70:	2202      	movs	r2, #2
    7d72:	0018      	movs	r0, r3
    7d74:	4b09      	ldr	r3, [pc, #36]	; (7d9c <usbdc_get_status_req+0x90>)
    7d76:	4798      	blx	r3
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    7d78:	4b07      	ldr	r3, [pc, #28]	; (7d98 <usbdc_get_status_req+0x8c>)
    7d7a:	6959      	ldr	r1, [r3, #20]
    7d7c:	1dfb      	adds	r3, r7, #7
    7d7e:	7818      	ldrb	r0, [r3, #0]
    7d80:	2300      	movs	r3, #0
    7d82:	2202      	movs	r2, #2
    7d84:	4c06      	ldr	r4, [pc, #24]	; (7da0 <usbdc_get_status_req+0x94>)
    7d86:	47a0      	blx	r4
	return true;
    7d88:	2301      	movs	r3, #1
}
    7d8a:	0018      	movs	r0, r3
    7d8c:	46bd      	mov	sp, r7
    7d8e:	b005      	add	sp, #20
    7d90:	bd90      	pop	{r4, r7, pc}
    7d92:	46c0      	nop			; (mov r8, r8)
    7d94:	000029f5 	.word	0x000029f5
    7d98:	20001298 	.word	0x20001298
    7d9c:	0000b701 	.word	0x0000b701
    7da0:	000086c9 	.word	0x000086c9

00007da4 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    7da4:	b590      	push	{r4, r7, lr}
    7da6:	b085      	sub	sp, #20
    7da8:	af00      	add	r7, sp, #0
    7daa:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    7dac:	4b21      	ldr	r3, [pc, #132]	; (7e34 <usbdc_get_interface+0x90>)
    7dae:	691b      	ldr	r3, [r3, #16]
    7db0:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    7db2:	4b20      	ldr	r3, [pc, #128]	; (7e34 <usbdc_get_interface+0x90>)
    7db4:	7f5b      	ldrb	r3, [r3, #29]
    7db6:	0019      	movs	r1, r3
    7db8:	687b      	ldr	r3, [r7, #4]
    7dba:	791a      	ldrb	r2, [r3, #4]
    7dbc:	795b      	ldrb	r3, [r3, #5]
    7dbe:	021b      	lsls	r3, r3, #8
    7dc0:	4313      	orrs	r3, r2
    7dc2:	b29b      	uxth	r3, r3
    7dc4:	4119      	asrs	r1, r3
    7dc6:	000b      	movs	r3, r1
    7dc8:	2201      	movs	r2, #1
    7dca:	4013      	ands	r3, r2
    7dcc:	d129      	bne.n	7e22 <usbdc_get_interface+0x7e>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    7dce:	4b19      	ldr	r3, [pc, #100]	; (7e34 <usbdc_get_interface+0x90>)
    7dd0:	695b      	ldr	r3, [r3, #20]
    7dd2:	2200      	movs	r2, #0
    7dd4:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    7dd6:	4b17      	ldr	r3, [pc, #92]	; (7e34 <usbdc_get_interface+0x90>)
    7dd8:	6959      	ldr	r1, [r3, #20]
    7dda:	2300      	movs	r3, #0
    7ddc:	2201      	movs	r2, #1
    7dde:	2000      	movs	r0, #0
    7de0:	4c15      	ldr	r4, [pc, #84]	; (7e38 <usbdc_get_interface+0x94>)
    7de2:	47a0      	blx	r4
		return true;
    7de4:	2301      	movs	r3, #1
    7de6:	e020      	b.n	7e2a <usbdc_get_interface+0x86>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    7de8:	68fb      	ldr	r3, [r7, #12]
    7dea:	685b      	ldr	r3, [r3, #4]
    7dec:	687a      	ldr	r2, [r7, #4]
    7dee:	68f8      	ldr	r0, [r7, #12]
    7df0:	2102      	movs	r1, #2
    7df2:	4798      	blx	r3
    7df4:	0003      	movs	r3, r0
    7df6:	60bb      	str	r3, [r7, #8]
    7df8:	68bb      	ldr	r3, [r7, #8]
    7dfa:	2b00      	cmp	r3, #0
    7dfc:	da03      	bge.n	7e06 <usbdc_get_interface+0x62>
			func = func->next;
    7dfe:	68fb      	ldr	r3, [r7, #12]
    7e00:	681b      	ldr	r3, [r3, #0]
    7e02:	60fb      	str	r3, [r7, #12]
    7e04:	e00d      	b.n	7e22 <usbdc_get_interface+0x7e>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    7e06:	4b0b      	ldr	r3, [pc, #44]	; (7e34 <usbdc_get_interface+0x90>)
    7e08:	695b      	ldr	r3, [r3, #20]
    7e0a:	68ba      	ldr	r2, [r7, #8]
    7e0c:	b2d2      	uxtb	r2, r2
    7e0e:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    7e10:	4b08      	ldr	r3, [pc, #32]	; (7e34 <usbdc_get_interface+0x90>)
    7e12:	6959      	ldr	r1, [r3, #20]
    7e14:	2300      	movs	r3, #0
    7e16:	2201      	movs	r2, #1
    7e18:	2000      	movs	r0, #0
    7e1a:	4c07      	ldr	r4, [pc, #28]	; (7e38 <usbdc_get_interface+0x94>)
    7e1c:	47a0      	blx	r4
			return true;
    7e1e:	2301      	movs	r3, #1
    7e20:	e003      	b.n	7e2a <usbdc_get_interface+0x86>
	while (NULL != func) {
    7e22:	68fb      	ldr	r3, [r7, #12]
    7e24:	2b00      	cmp	r3, #0
    7e26:	d1df      	bne.n	7de8 <usbdc_get_interface+0x44>
		}
	}
	return false;
    7e28:	2300      	movs	r3, #0
}
    7e2a:	0018      	movs	r0, r3
    7e2c:	46bd      	mov	sp, r7
    7e2e:	b005      	add	sp, #20
    7e30:	bd90      	pop	{r4, r7, pc}
    7e32:	46c0      	nop			; (mov r8, r8)
    7e34:	20001298 	.word	0x20001298
    7e38:	000086c9 	.word	0x000086c9

00007e3c <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    7e3c:	b590      	push	{r4, r7, lr}
    7e3e:	b083      	sub	sp, #12
    7e40:	af00      	add	r7, sp, #0
    7e42:	0002      	movs	r2, r0
    7e44:	6039      	str	r1, [r7, #0]
    7e46:	1dfb      	adds	r3, r7, #7
    7e48:	701a      	strb	r2, [r3, #0]
	switch (req->bRequest) {
    7e4a:	683b      	ldr	r3, [r7, #0]
    7e4c:	785b      	ldrb	r3, [r3, #1]
    7e4e:	2b06      	cmp	r3, #6
    7e50:	d008      	beq.n	7e64 <usbdc_get_req+0x28>
    7e52:	dc02      	bgt.n	7e5a <usbdc_get_req+0x1e>
    7e54:	2b00      	cmp	r3, #0
    7e56:	d01d      	beq.n	7e94 <usbdc_get_req+0x58>
    7e58:	e02b      	b.n	7eb2 <usbdc_get_req+0x76>
    7e5a:	2b08      	cmp	r3, #8
    7e5c:	d00b      	beq.n	7e76 <usbdc_get_req+0x3a>
    7e5e:	2b0a      	cmp	r3, #10
    7e60:	d021      	beq.n	7ea6 <usbdc_get_req+0x6a>
    7e62:	e026      	b.n	7eb2 <usbdc_get_req+0x76>
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    7e64:	683a      	ldr	r2, [r7, #0]
    7e66:	1dfb      	adds	r3, r7, #7
    7e68:	781b      	ldrb	r3, [r3, #0]
    7e6a:	0011      	movs	r1, r2
    7e6c:	0018      	movs	r0, r3
    7e6e:	4b13      	ldr	r3, [pc, #76]	; (7ebc <usbdc_get_req+0x80>)
    7e70:	4798      	blx	r3
    7e72:	0003      	movs	r3, r0
    7e74:	e01e      	b.n	7eb4 <usbdc_get_req+0x78>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    7e76:	4b12      	ldr	r3, [pc, #72]	; (7ec0 <usbdc_get_req+0x84>)
    7e78:	695b      	ldr	r3, [r3, #20]
    7e7a:	4a11      	ldr	r2, [pc, #68]	; (7ec0 <usbdc_get_req+0x84>)
    7e7c:	7ed2      	ldrb	r2, [r2, #27]
    7e7e:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    7e80:	4b0f      	ldr	r3, [pc, #60]	; (7ec0 <usbdc_get_req+0x84>)
    7e82:	6959      	ldr	r1, [r3, #20]
    7e84:	1dfb      	adds	r3, r7, #7
    7e86:	7818      	ldrb	r0, [r3, #0]
    7e88:	2300      	movs	r3, #0
    7e8a:	2201      	movs	r2, #1
    7e8c:	4c0d      	ldr	r4, [pc, #52]	; (7ec4 <usbdc_get_req+0x88>)
    7e8e:	47a0      	blx	r4
		return true;
    7e90:	2301      	movs	r3, #1
    7e92:	e00f      	b.n	7eb4 <usbdc_get_req+0x78>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    7e94:	683a      	ldr	r2, [r7, #0]
    7e96:	1dfb      	adds	r3, r7, #7
    7e98:	781b      	ldrb	r3, [r3, #0]
    7e9a:	0011      	movs	r1, r2
    7e9c:	0018      	movs	r0, r3
    7e9e:	4b0a      	ldr	r3, [pc, #40]	; (7ec8 <usbdc_get_req+0x8c>)
    7ea0:	4798      	blx	r3
    7ea2:	0003      	movs	r3, r0
    7ea4:	e006      	b.n	7eb4 <usbdc_get_req+0x78>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    7ea6:	683b      	ldr	r3, [r7, #0]
    7ea8:	0018      	movs	r0, r3
    7eaa:	4b08      	ldr	r3, [pc, #32]	; (7ecc <usbdc_get_req+0x90>)
    7eac:	4798      	blx	r3
    7eae:	0003      	movs	r3, r0
    7eb0:	e000      	b.n	7eb4 <usbdc_get_req+0x78>
	default:
		return false;
    7eb2:	2300      	movs	r3, #0
	}
}
    7eb4:	0018      	movs	r0, r3
    7eb6:	46bd      	mov	sp, r7
    7eb8:	b003      	add	sp, #12
    7eba:	bd90      	pop	{r4, r7, pc}
    7ebc:	00007c89 	.word	0x00007c89
    7ec0:	20001298 	.word	0x20001298
    7ec4:	000086c9 	.word	0x000086c9
    7ec8:	00007d0d 	.word	0x00007d0d
    7ecc:	00007da5 	.word	0x00007da5

00007ed0 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    7ed0:	b590      	push	{r4, r7, lr}
    7ed2:	b083      	sub	sp, #12
    7ed4:	af00      	add	r7, sp, #0
    7ed6:	0002      	movs	r2, r0
    7ed8:	6039      	str	r1, [r7, #0]
    7eda:	1dfb      	adds	r3, r7, #7
    7edc:	701a      	strb	r2, [r3, #0]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    7ede:	683b      	ldr	r3, [r7, #0]
    7ee0:	781b      	ldrb	r3, [r3, #0]
    7ee2:	001a      	movs	r2, r3
    7ee4:	231f      	movs	r3, #31
    7ee6:	4013      	ands	r3, r2
    7ee8:	2b02      	cmp	r3, #2
    7eea:	d11d      	bne.n	7f28 <usbdc_clear_ftr_req+0x58>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    7eec:	683b      	ldr	r3, [r7, #0]
    7eee:	799a      	ldrb	r2, [r3, #6]
    7ef0:	79db      	ldrb	r3, [r3, #7]
    7ef2:	021b      	lsls	r3, r3, #8
    7ef4:	4313      	orrs	r3, r2
    7ef6:	b29b      	uxth	r3, r3
    7ef8:	2b00      	cmp	r3, #0
    7efa:	d001      	beq.n	7f00 <usbdc_clear_ftr_req+0x30>
			return false;
    7efc:	2300      	movs	r3, #0
    7efe:	e014      	b.n	7f2a <usbdc_clear_ftr_req+0x5a>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    7f00:	683b      	ldr	r3, [r7, #0]
    7f02:	791a      	ldrb	r2, [r3, #4]
    7f04:	795b      	ldrb	r3, [r3, #5]
    7f06:	021b      	lsls	r3, r3, #8
    7f08:	4313      	orrs	r3, r2
    7f0a:	b29b      	uxth	r3, r3
    7f0c:	b2db      	uxtb	r3, r3
    7f0e:	2100      	movs	r1, #0
    7f10:	0018      	movs	r0, r3
    7f12:	4b08      	ldr	r3, [pc, #32]	; (7f34 <usbdc_clear_ftr_req+0x64>)
    7f14:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    7f16:	1dfb      	adds	r3, r7, #7
    7f18:	7818      	ldrb	r0, [r3, #0]
    7f1a:	2301      	movs	r3, #1
    7f1c:	2200      	movs	r2, #0
    7f1e:	2100      	movs	r1, #0
    7f20:	4c05      	ldr	r4, [pc, #20]	; (7f38 <usbdc_clear_ftr_req+0x68>)
    7f22:	47a0      	blx	r4
		return true;
    7f24:	2301      	movs	r3, #1
    7f26:	e000      	b.n	7f2a <usbdc_clear_ftr_req+0x5a>
	default:
		return false;
    7f28:	2300      	movs	r3, #0
	}
}
    7f2a:	0018      	movs	r0, r3
    7f2c:	46bd      	mov	sp, r7
    7f2e:	b003      	add	sp, #12
    7f30:	bd90      	pop	{r4, r7, pc}
    7f32:	46c0      	nop			; (mov r8, r8)
    7f34:	000029f5 	.word	0x000029f5
    7f38:	000086c9 	.word	0x000086c9

00007f3c <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    7f3c:	b590      	push	{r4, r7, lr}
    7f3e:	b083      	sub	sp, #12
    7f40:	af00      	add	r7, sp, #0
    7f42:	0002      	movs	r2, r0
    7f44:	6039      	str	r1, [r7, #0]
    7f46:	1dfb      	adds	r3, r7, #7
    7f48:	701a      	strb	r2, [r3, #0]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    7f4a:	683b      	ldr	r3, [r7, #0]
    7f4c:	781b      	ldrb	r3, [r3, #0]
    7f4e:	001a      	movs	r2, r3
    7f50:	231f      	movs	r3, #31
    7f52:	4013      	ands	r3, r2
    7f54:	2b02      	cmp	r3, #2
    7f56:	d11d      	bne.n	7f94 <usbdc_set_ftr_req+0x58>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    7f58:	683b      	ldr	r3, [r7, #0]
    7f5a:	799a      	ldrb	r2, [r3, #6]
    7f5c:	79db      	ldrb	r3, [r3, #7]
    7f5e:	021b      	lsls	r3, r3, #8
    7f60:	4313      	orrs	r3, r2
    7f62:	b29b      	uxth	r3, r3
    7f64:	2b00      	cmp	r3, #0
    7f66:	d001      	beq.n	7f6c <usbdc_set_ftr_req+0x30>
			return false;
    7f68:	2300      	movs	r3, #0
    7f6a:	e014      	b.n	7f96 <usbdc_set_ftr_req+0x5a>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    7f6c:	683b      	ldr	r3, [r7, #0]
    7f6e:	791a      	ldrb	r2, [r3, #4]
    7f70:	795b      	ldrb	r3, [r3, #5]
    7f72:	021b      	lsls	r3, r3, #8
    7f74:	4313      	orrs	r3, r2
    7f76:	b29b      	uxth	r3, r3
    7f78:	b2db      	uxtb	r3, r3
    7f7a:	2101      	movs	r1, #1
    7f7c:	0018      	movs	r0, r3
    7f7e:	4b08      	ldr	r3, [pc, #32]	; (7fa0 <usbdc_set_ftr_req+0x64>)
    7f80:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    7f82:	1dfb      	adds	r3, r7, #7
    7f84:	7818      	ldrb	r0, [r3, #0]
    7f86:	2301      	movs	r3, #1
    7f88:	2200      	movs	r2, #0
    7f8a:	2100      	movs	r1, #0
    7f8c:	4c05      	ldr	r4, [pc, #20]	; (7fa4 <usbdc_set_ftr_req+0x68>)
    7f8e:	47a0      	blx	r4
		return true;
    7f90:	2301      	movs	r3, #1
    7f92:	e000      	b.n	7f96 <usbdc_set_ftr_req+0x5a>
	default:
		return false;
    7f94:	2300      	movs	r3, #0
	}
}
    7f96:	0018      	movs	r0, r3
    7f98:	46bd      	mov	sp, r7
    7f9a:	b003      	add	sp, #12
    7f9c:	bd90      	pop	{r4, r7, pc}
    7f9e:	46c0      	nop			; (mov r8, r8)
    7fa0:	000029f5 	.word	0x000029f5
    7fa4:	000086c9 	.word	0x000086c9

00007fa8 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    7fa8:	b580      	push	{r7, lr}
    7faa:	b082      	sub	sp, #8
    7fac:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    7fae:	4b0a      	ldr	r3, [pc, #40]	; (7fd8 <usbdc_unconfig+0x30>)
    7fb0:	691b      	ldr	r3, [r3, #16]
    7fb2:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    7fb4:	e008      	b.n	7fc8 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    7fb6:	687b      	ldr	r3, [r7, #4]
    7fb8:	685b      	ldr	r3, [r3, #4]
    7fba:	6878      	ldr	r0, [r7, #4]
    7fbc:	2200      	movs	r2, #0
    7fbe:	2101      	movs	r1, #1
    7fc0:	4798      	blx	r3
		func = func->next;
    7fc2:	687b      	ldr	r3, [r7, #4]
    7fc4:	681b      	ldr	r3, [r3, #0]
    7fc6:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    7fc8:	687b      	ldr	r3, [r7, #4]
    7fca:	2b00      	cmp	r3, #0
    7fcc:	d1f3      	bne.n	7fb6 <usbdc_unconfig+0xe>
	}
}
    7fce:	46c0      	nop			; (mov r8, r8)
    7fd0:	46bd      	mov	sp, r7
    7fd2:	b002      	add	sp, #8
    7fd4:	bd80      	pop	{r7, pc}
    7fd6:	46c0      	nop			; (mov r8, r8)
    7fd8:	20001298 	.word	0x20001298

00007fdc <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    7fdc:	b590      	push	{r4, r7, lr}
    7fde:	b089      	sub	sp, #36	; 0x24
    7fe0:	af00      	add	r7, sp, #0
    7fe2:	0002      	movs	r2, r0
    7fe4:	1dfb      	adds	r3, r7, #7
    7fe6:	701a      	strb	r2, [r3, #0]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    7fe8:	2300      	movs	r3, #0
    7fea:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    7fec:	2317      	movs	r3, #23
    7fee:	18fb      	adds	r3, r7, r3
    7ff0:	22ff      	movs	r2, #255	; 0xff
    7ff2:	701a      	strb	r2, [r3, #0]

	if (cfg_value == 0) {
    7ff4:	1dfb      	adds	r3, r7, #7
    7ff6:	781b      	ldrb	r3, [r3, #0]
    7ff8:	2b00      	cmp	r3, #0
    7ffa:	d103      	bne.n	8004 <usbdc_set_config+0x28>
		usbdc_unconfig();
    7ffc:	4b3e      	ldr	r3, [pc, #248]	; (80f8 <usbdc_set_config+0x11c>)
    7ffe:	4798      	blx	r3
		return true;
    8000:	2301      	movs	r3, #1
    8002:	e075      	b.n	80f0 <usbdc_set_config+0x114>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    8004:	69bb      	ldr	r3, [r7, #24]
    8006:	2b00      	cmp	r3, #0
    8008:	d10c      	bne.n	8024 <usbdc_set_config+0x48>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    800a:	4b3c      	ldr	r3, [pc, #240]	; (80fc <usbdc_set_config+0x120>)
    800c:	681b      	ldr	r3, [r3, #0]
    800e:	6818      	ldr	r0, [r3, #0]
    8010:	4b3a      	ldr	r3, [pc, #232]	; (80fc <usbdc_set_config+0x120>)
    8012:	681b      	ldr	r3, [r3, #0]
    8014:	6859      	ldr	r1, [r3, #4]
    8016:	1dfb      	adds	r3, r7, #7
    8018:	781b      	ldrb	r3, [r3, #0]
    801a:	001a      	movs	r2, r3
    801c:	4b38      	ldr	r3, [pc, #224]	; (8100 <usbdc_set_config+0x124>)
    801e:	4798      	blx	r3
    8020:	0003      	movs	r3, r0
    8022:	61bb      	str	r3, [r7, #24]
	}
	if (NULL == cfg_desc) {
    8024:	69bb      	ldr	r3, [r7, #24]
    8026:	2b00      	cmp	r3, #0
    8028:	d101      	bne.n	802e <usbdc_set_config+0x52>
		return false;
    802a:	2300      	movs	r3, #0
    802c:	e060      	b.n	80f0 <usbdc_set_config+0x114>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    802e:	2314      	movs	r3, #20
    8030:	18fc      	adds	r4, r7, r3
    8032:	69bb      	ldr	r3, [r7, #24]
    8034:	0018      	movs	r0, r3
    8036:	4b33      	ldr	r3, [pc, #204]	; (8104 <usbdc_set_config+0x128>)
    8038:	4798      	blx	r3
    803a:	0003      	movs	r3, r0
    803c:	8023      	strh	r3, [r4, #0]
	desc.eod  = cfg_desc + total_len;
    803e:	2314      	movs	r3, #20
    8040:	18fb      	adds	r3, r7, r3
    8042:	881b      	ldrh	r3, [r3, #0]
    8044:	69ba      	ldr	r2, [r7, #24]
    8046:	18d2      	adds	r2, r2, r3
    8048:	230c      	movs	r3, #12
    804a:	18fb      	adds	r3, r7, r3
    804c:	605a      	str	r2, [r3, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    804e:	230c      	movs	r3, #12
    8050:	18fb      	adds	r3, r7, r3
    8052:	6859      	ldr	r1, [r3, #4]
    8054:	69bb      	ldr	r3, [r7, #24]
    8056:	2204      	movs	r2, #4
    8058:	0018      	movs	r0, r3
    805a:	4b2b      	ldr	r3, [pc, #172]	; (8108 <usbdc_set_config+0x12c>)
    805c:	4798      	blx	r3
    805e:	0002      	movs	r2, r0
    8060:	230c      	movs	r3, #12
    8062:	18fb      	adds	r3, r7, r3
    8064:	601a      	str	r2, [r3, #0]

	while (NULL != desc.sod) {
    8066:	e03d      	b.n	80e4 <usbdc_set_config+0x108>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    8068:	230c      	movs	r3, #12
    806a:	18fb      	adds	r3, r7, r3
    806c:	681b      	ldr	r3, [r3, #0]
    806e:	3302      	adds	r3, #2
    8070:	781b      	ldrb	r3, [r3, #0]
    8072:	2217      	movs	r2, #23
    8074:	18ba      	adds	r2, r7, r2
    8076:	7812      	ldrb	r2, [r2, #0]
    8078:	429a      	cmp	r2, r3
    807a:	d01b      	beq.n	80b4 <usbdc_set_config+0xd8>
			last_iface = desc.sod[2];
    807c:	230c      	movs	r3, #12
    807e:	18fb      	adds	r3, r7, r3
    8080:	681a      	ldr	r2, [r3, #0]
    8082:	2317      	movs	r3, #23
    8084:	18fb      	adds	r3, r7, r3
    8086:	7892      	ldrb	r2, [r2, #2]
    8088:	701a      	strb	r2, [r3, #0]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    808a:	4b1c      	ldr	r3, [pc, #112]	; (80fc <usbdc_set_config+0x120>)
    808c:	691b      	ldr	r3, [r3, #16]
    808e:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    8090:	e00b      	b.n	80aa <usbdc_set_config+0xce>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    8092:	69fb      	ldr	r3, [r7, #28]
    8094:	685b      	ldr	r3, [r3, #4]
    8096:	220c      	movs	r2, #12
    8098:	18ba      	adds	r2, r7, r2
    809a:	69f8      	ldr	r0, [r7, #28]
    809c:	2100      	movs	r1, #0
    809e:	4798      	blx	r3
    80a0:	1e03      	subs	r3, r0, #0
    80a2:	d006      	beq.n	80b2 <usbdc_set_config+0xd6>
					func = func->next;
    80a4:	69fb      	ldr	r3, [r7, #28]
    80a6:	681b      	ldr	r3, [r3, #0]
    80a8:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    80aa:	69fb      	ldr	r3, [r7, #28]
    80ac:	2b00      	cmp	r3, #0
    80ae:	d1f0      	bne.n	8092 <usbdc_set_config+0xb6>
    80b0:	e000      	b.n	80b4 <usbdc_set_config+0xd8>
				} else {
					break;
    80b2:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    80b4:	230c      	movs	r3, #12
    80b6:	18fb      	adds	r3, r7, r3
    80b8:	681b      	ldr	r3, [r3, #0]
    80ba:	0018      	movs	r0, r3
    80bc:	4b13      	ldr	r3, [pc, #76]	; (810c <usbdc_set_config+0x130>)
    80be:	4798      	blx	r3
    80c0:	0002      	movs	r2, r0
    80c2:	230c      	movs	r3, #12
    80c4:	18fb      	adds	r3, r7, r3
    80c6:	601a      	str	r2, [r3, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    80c8:	230c      	movs	r3, #12
    80ca:	18fb      	adds	r3, r7, r3
    80cc:	6818      	ldr	r0, [r3, #0]
    80ce:	230c      	movs	r3, #12
    80d0:	18fb      	adds	r3, r7, r3
    80d2:	685b      	ldr	r3, [r3, #4]
    80d4:	2204      	movs	r2, #4
    80d6:	0019      	movs	r1, r3
    80d8:	4b0b      	ldr	r3, [pc, #44]	; (8108 <usbdc_set_config+0x12c>)
    80da:	4798      	blx	r3
    80dc:	0002      	movs	r2, r0
    80de:	230c      	movs	r3, #12
    80e0:	18fb      	adds	r3, r7, r3
    80e2:	601a      	str	r2, [r3, #0]
	while (NULL != desc.sod) {
    80e4:	230c      	movs	r3, #12
    80e6:	18fb      	adds	r3, r7, r3
    80e8:	681b      	ldr	r3, [r3, #0]
    80ea:	2b00      	cmp	r3, #0
    80ec:	d1bc      	bne.n	8068 <usbdc_set_config+0x8c>
	}
	return true;
    80ee:	2301      	movs	r3, #1
}
    80f0:	0018      	movs	r0, r3
    80f2:	46bd      	mov	sp, r7
    80f4:	b009      	add	sp, #36	; 0x24
    80f6:	bd90      	pop	{r4, r7, pc}
    80f8:	00007fa9 	.word	0x00007fa9
    80fc:	20001298 	.word	0x20001298
    8100:	00008a51 	.word	0x00008a51
    8104:	00007a29 	.word	0x00007a29
    8108:	00008981 	.word	0x00008981
    810c:	00007a05 	.word	0x00007a05

00008110 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    8110:	b580      	push	{r7, lr}
    8112:	b082      	sub	sp, #8
    8114:	af00      	add	r7, sp, #0
    8116:	0002      	movs	r2, r0
    8118:	1dfb      	adds	r3, r7, #7
    811a:	701a      	strb	r2, [r3, #0]
	usb_d_set_address(addr);
    811c:	1dfb      	adds	r3, r7, #7
    811e:	781b      	ldrb	r3, [r3, #0]
    8120:	0018      	movs	r0, r3
    8122:	4b03      	ldr	r3, [pc, #12]	; (8130 <usbdc_set_address+0x20>)
    8124:	4798      	blx	r3
}
    8126:	46c0      	nop			; (mov r8, r8)
    8128:	46bd      	mov	sp, r7
    812a:	b002      	add	sp, #8
    812c:	bd80      	pop	{r7, pc}
    812e:	46c0      	nop			; (mov r8, r8)
    8130:	000025c1 	.word	0x000025c1

00008134 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    8134:	b590      	push	{r4, r7, lr}
    8136:	b087      	sub	sp, #28
    8138:	af00      	add	r7, sp, #0
    813a:	0002      	movs	r2, r0
    813c:	1dbb      	adds	r3, r7, #6
    813e:	801a      	strh	r2, [r3, #0]
    8140:	1d3b      	adds	r3, r7, #4
    8142:	1c0a      	adds	r2, r1, #0
    8144:	801a      	strh	r2, [r3, #0]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    8146:	2300      	movs	r3, #0
    8148:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    814a:	693b      	ldr	r3, [r7, #16]
    814c:	2b00      	cmp	r3, #0
    814e:	d10c      	bne.n	816a <usbdc_set_interface+0x36>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    8150:	4b4f      	ldr	r3, [pc, #316]	; (8290 <usbdc_set_interface+0x15c>)
    8152:	681b      	ldr	r3, [r3, #0]
    8154:	6818      	ldr	r0, [r3, #0]
    8156:	4b4e      	ldr	r3, [pc, #312]	; (8290 <usbdc_set_interface+0x15c>)
    8158:	681b      	ldr	r3, [r3, #0]
    815a:	6859      	ldr	r1, [r3, #4]
    815c:	4b4c      	ldr	r3, [pc, #304]	; (8290 <usbdc_set_interface+0x15c>)
    815e:	7edb      	ldrb	r3, [r3, #27]
    8160:	001a      	movs	r2, r3
    8162:	4b4c      	ldr	r3, [pc, #304]	; (8294 <usbdc_set_interface+0x160>)
    8164:	4798      	blx	r3
    8166:	0003      	movs	r3, r0
    8168:	613b      	str	r3, [r7, #16]
	}
	if (NULL == ifc) {
    816a:	693b      	ldr	r3, [r7, #16]
    816c:	2b00      	cmp	r3, #0
    816e:	d101      	bne.n	8174 <usbdc_set_interface+0x40>
		return false;
    8170:	2300      	movs	r3, #0
    8172:	e088      	b.n	8286 <usbdc_set_interface+0x152>
	}
	desc.sod = ifc;
    8174:	2308      	movs	r3, #8
    8176:	18fb      	adds	r3, r7, r3
    8178:	693a      	ldr	r2, [r7, #16]
    817a:	601a      	str	r2, [r3, #0]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    817c:	693b      	ldr	r3, [r7, #16]
    817e:	0018      	movs	r0, r3
    8180:	4b45      	ldr	r3, [pc, #276]	; (8298 <usbdc_set_interface+0x164>)
    8182:	4798      	blx	r3
    8184:	0003      	movs	r3, r0
    8186:	001a      	movs	r2, r3
    8188:	693b      	ldr	r3, [r7, #16]
    818a:	189a      	adds	r2, r3, r2
    818c:	2308      	movs	r3, #8
    818e:	18fb      	adds	r3, r7, r3
    8190:	605a      	str	r2, [r3, #4]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    8192:	2308      	movs	r3, #8
    8194:	18fb      	adds	r3, r7, r3
    8196:	6818      	ldr	r0, [r3, #0]
    8198:	2308      	movs	r3, #8
    819a:	18fb      	adds	r3, r7, r3
    819c:	685b      	ldr	r3, [r3, #4]
    819e:	2204      	movs	r2, #4
    81a0:	0019      	movs	r1, r3
    81a2:	4b3e      	ldr	r3, [pc, #248]	; (829c <usbdc_set_interface+0x168>)
    81a4:	4798      	blx	r3
    81a6:	0003      	movs	r3, r0
    81a8:	613b      	str	r3, [r7, #16]
    81aa:	693b      	ldr	r3, [r7, #16]
    81ac:	2b00      	cmp	r3, #0
    81ae:	d11c      	bne.n	81ea <usbdc_set_interface+0xb6>
		return false;
    81b0:	2300      	movs	r3, #0
    81b2:	e068      	b.n	8286 <usbdc_set_interface+0x152>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    81b4:	2308      	movs	r3, #8
    81b6:	18fb      	adds	r3, r7, r3
    81b8:	681b      	ldr	r3, [r3, #0]
    81ba:	0018      	movs	r0, r3
    81bc:	4b38      	ldr	r3, [pc, #224]	; (82a0 <usbdc_set_interface+0x16c>)
    81be:	4798      	blx	r3
    81c0:	0002      	movs	r2, r0
    81c2:	2308      	movs	r3, #8
    81c4:	18fb      	adds	r3, r7, r3
    81c6:	601a      	str	r2, [r3, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    81c8:	2308      	movs	r3, #8
    81ca:	18fb      	adds	r3, r7, r3
    81cc:	6818      	ldr	r0, [r3, #0]
    81ce:	2308      	movs	r3, #8
    81d0:	18fb      	adds	r3, r7, r3
    81d2:	685b      	ldr	r3, [r3, #4]
    81d4:	2204      	movs	r2, #4
    81d6:	0019      	movs	r1, r3
    81d8:	4b30      	ldr	r3, [pc, #192]	; (829c <usbdc_set_interface+0x168>)
    81da:	4798      	blx	r3
    81dc:	0003      	movs	r3, r0
    81de:	613b      	str	r3, [r7, #16]
		if (NULL == ifc) {
    81e0:	693b      	ldr	r3, [r7, #16]
    81e2:	2b00      	cmp	r3, #0
    81e4:	d101      	bne.n	81ea <usbdc_set_interface+0xb6>
			return false;
    81e6:	2300      	movs	r3, #0
    81e8:	e04d      	b.n	8286 <usbdc_set_interface+0x152>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    81ea:	693b      	ldr	r3, [r7, #16]
    81ec:	3302      	adds	r3, #2
    81ee:	781b      	ldrb	r3, [r3, #0]
    81f0:	b29b      	uxth	r3, r3
    81f2:	1d3a      	adds	r2, r7, #4
    81f4:	8812      	ldrh	r2, [r2, #0]
    81f6:	429a      	cmp	r2, r3
    81f8:	d1dc      	bne.n	81b4 <usbdc_set_interface+0x80>
    81fa:	693b      	ldr	r3, [r7, #16]
    81fc:	3303      	adds	r3, #3
    81fe:	781b      	ldrb	r3, [r3, #0]
    8200:	b29b      	uxth	r3, r3
    8202:	1dba      	adds	r2, r7, #6
    8204:	8812      	ldrh	r2, [r2, #0]
    8206:	429a      	cmp	r2, r3
    8208:	d1d4      	bne.n	81b4 <usbdc_set_interface+0x80>
		}
	}

	desc.sod = ifc;
    820a:	2308      	movs	r3, #8
    820c:	18fb      	adds	r3, r7, r3
    820e:	693a      	ldr	r2, [r7, #16]
    8210:	601a      	str	r2, [r3, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    8212:	4b1f      	ldr	r3, [pc, #124]	; (8290 <usbdc_set_interface+0x15c>)
    8214:	691b      	ldr	r3, [r3, #16]
    8216:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    8218:	e031      	b.n	827e <usbdc_set_interface+0x14a>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    821a:	697b      	ldr	r3, [r7, #20]
    821c:	685b      	ldr	r3, [r3, #4]
    821e:	2208      	movs	r2, #8
    8220:	18ba      	adds	r2, r7, r2
    8222:	6978      	ldr	r0, [r7, #20]
    8224:	2101      	movs	r1, #1
    8226:	4798      	blx	r3
    8228:	1e03      	subs	r3, r0, #0
    822a:	d003      	beq.n	8234 <usbdc_set_interface+0x100>
			func = func->next;
    822c:	697b      	ldr	r3, [r7, #20]
    822e:	681b      	ldr	r3, [r3, #0]
    8230:	617b      	str	r3, [r7, #20]
    8232:	e024      	b.n	827e <usbdc_set_interface+0x14a>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    8234:	697b      	ldr	r3, [r7, #20]
    8236:	685b      	ldr	r3, [r3, #4]
    8238:	2208      	movs	r2, #8
    823a:	18ba      	adds	r2, r7, r2
    823c:	6978      	ldr	r0, [r7, #20]
    823e:	2100      	movs	r1, #0
    8240:	4798      	blx	r3
    8242:	1e03      	subs	r3, r0, #0
    8244:	d119      	bne.n	827a <usbdc_set_interface+0x146>
			if (alt_set) {
    8246:	1dbb      	adds	r3, r7, #6
    8248:	881b      	ldrh	r3, [r3, #0]
    824a:	2b00      	cmp	r3, #0
    824c:	d00d      	beq.n	826a <usbdc_set_interface+0x136>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    824e:	4b10      	ldr	r3, [pc, #64]	; (8290 <usbdc_set_interface+0x15c>)
    8250:	7f5b      	ldrb	r3, [r3, #29]
    8252:	b25a      	sxtb	r2, r3
    8254:	1d3b      	adds	r3, r7, #4
    8256:	881b      	ldrh	r3, [r3, #0]
    8258:	2101      	movs	r1, #1
    825a:	4099      	lsls	r1, r3
    825c:	000b      	movs	r3, r1
    825e:	b25b      	sxtb	r3, r3
    8260:	4313      	orrs	r3, r2
    8262:	b25b      	sxtb	r3, r3
    8264:	b2da      	uxtb	r2, r3
    8266:	4b0a      	ldr	r3, [pc, #40]	; (8290 <usbdc_set_interface+0x15c>)
    8268:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    826a:	2300      	movs	r3, #0
    826c:	2200      	movs	r2, #0
    826e:	2100      	movs	r1, #0
    8270:	2000      	movs	r0, #0
    8272:	4c0c      	ldr	r4, [pc, #48]	; (82a4 <usbdc_set_interface+0x170>)
    8274:	47a0      	blx	r4
			return true;
    8276:	2301      	movs	r3, #1
    8278:	e005      	b.n	8286 <usbdc_set_interface+0x152>
		} else {
			return false;
    827a:	2300      	movs	r3, #0
    827c:	e003      	b.n	8286 <usbdc_set_interface+0x152>
	while (NULL != func) {
    827e:	697b      	ldr	r3, [r7, #20]
    8280:	2b00      	cmp	r3, #0
    8282:	d1ca      	bne.n	821a <usbdc_set_interface+0xe6>
		}
	}

	return false;
    8284:	2300      	movs	r3, #0
}
    8286:	0018      	movs	r0, r3
    8288:	46bd      	mov	sp, r7
    828a:	b007      	add	sp, #28
    828c:	bd90      	pop	{r4, r7, pc}
    828e:	46c0      	nop			; (mov r8, r8)
    8290:	20001298 	.word	0x20001298
    8294:	00008a51 	.word	0x00008a51
    8298:	00007a29 	.word	0x00007a29
    829c:	00008981 	.word	0x00008981
    82a0:	00007a05 	.word	0x00007a05
    82a4:	000086c9 	.word	0x000086c9

000082a8 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    82a8:	b590      	push	{r4, r7, lr}
    82aa:	b083      	sub	sp, #12
    82ac:	af00      	add	r7, sp, #0
    82ae:	0002      	movs	r2, r0
    82b0:	6039      	str	r1, [r7, #0]
    82b2:	1dfb      	adds	r3, r7, #7
    82b4:	701a      	strb	r2, [r3, #0]
	switch (req->bRequest) {
    82b6:	683b      	ldr	r3, [r7, #0]
    82b8:	785b      	ldrb	r3, [r3, #1]
    82ba:	2b0b      	cmp	r3, #11
    82bc:	d852      	bhi.n	8364 <usbdc_set_req+0xbc>
    82be:	009a      	lsls	r2, r3, #2
    82c0:	4b2b      	ldr	r3, [pc, #172]	; (8370 <usbdc_set_req+0xc8>)
    82c2:	18d3      	adds	r3, r2, r3
    82c4:	681b      	ldr	r3, [r3, #0]
    82c6:	469f      	mov	pc, r3
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    82c8:	1dfb      	adds	r3, r7, #7
    82ca:	7818      	ldrb	r0, [r3, #0]
    82cc:	2301      	movs	r3, #1
    82ce:	2200      	movs	r2, #0
    82d0:	2100      	movs	r1, #0
    82d2:	4c28      	ldr	r4, [pc, #160]	; (8374 <usbdc_set_req+0xcc>)
    82d4:	47a0      	blx	r4
    82d6:	0003      	movs	r3, r0
    82d8:	425a      	negs	r2, r3
    82da:	4153      	adcs	r3, r2
    82dc:	b2db      	uxtb	r3, r3
    82de:	e042      	b.n	8366 <usbdc_set_req+0xbe>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    82e0:	683b      	ldr	r3, [r7, #0]
    82e2:	789a      	ldrb	r2, [r3, #2]
    82e4:	78db      	ldrb	r3, [r3, #3]
    82e6:	021b      	lsls	r3, r3, #8
    82e8:	4313      	orrs	r3, r2
    82ea:	b29b      	uxth	r3, r3
    82ec:	b2db      	uxtb	r3, r3
    82ee:	0018      	movs	r0, r3
    82f0:	4b21      	ldr	r3, [pc, #132]	; (8378 <usbdc_set_req+0xd0>)
    82f2:	4798      	blx	r3
    82f4:	0003      	movs	r3, r0
    82f6:	001a      	movs	r2, r3
    82f8:	2301      	movs	r3, #1
    82fa:	4053      	eors	r3, r2
    82fc:	b2db      	uxtb	r3, r3
    82fe:	2b00      	cmp	r3, #0
    8300:	d001      	beq.n	8306 <usbdc_set_req+0x5e>
			return false;
    8302:	2300      	movs	r3, #0
    8304:	e02f      	b.n	8366 <usbdc_set_req+0xbe>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    8306:	1dfb      	adds	r3, r7, #7
    8308:	7818      	ldrb	r0, [r3, #0]
    830a:	2301      	movs	r3, #1
    830c:	2200      	movs	r2, #0
    830e:	2100      	movs	r1, #0
    8310:	4c18      	ldr	r4, [pc, #96]	; (8374 <usbdc_set_req+0xcc>)
    8312:	47a0      	blx	r4
    8314:	0003      	movs	r3, r0
    8316:	425a      	negs	r2, r3
    8318:	4153      	adcs	r3, r2
    831a:	b2db      	uxtb	r3, r3
    831c:	e023      	b.n	8366 <usbdc_set_req+0xbe>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    831e:	683a      	ldr	r2, [r7, #0]
    8320:	1dfb      	adds	r3, r7, #7
    8322:	781b      	ldrb	r3, [r3, #0]
    8324:	0011      	movs	r1, r2
    8326:	0018      	movs	r0, r3
    8328:	4b14      	ldr	r3, [pc, #80]	; (837c <usbdc_set_req+0xd4>)
    832a:	4798      	blx	r3
    832c:	0003      	movs	r3, r0
    832e:	e01a      	b.n	8366 <usbdc_set_req+0xbe>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    8330:	683a      	ldr	r2, [r7, #0]
    8332:	1dfb      	adds	r3, r7, #7
    8334:	781b      	ldrb	r3, [r3, #0]
    8336:	0011      	movs	r1, r2
    8338:	0018      	movs	r0, r3
    833a:	4b11      	ldr	r3, [pc, #68]	; (8380 <usbdc_set_req+0xd8>)
    833c:	4798      	blx	r3
    833e:	0003      	movs	r3, r0
    8340:	e011      	b.n	8366 <usbdc_set_req+0xbe>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    8342:	683b      	ldr	r3, [r7, #0]
    8344:	789a      	ldrb	r2, [r3, #2]
    8346:	78db      	ldrb	r3, [r3, #3]
    8348:	021b      	lsls	r3, r3, #8
    834a:	4313      	orrs	r3, r2
    834c:	b298      	uxth	r0, r3
    834e:	683b      	ldr	r3, [r7, #0]
    8350:	791a      	ldrb	r2, [r3, #4]
    8352:	795b      	ldrb	r3, [r3, #5]
    8354:	021b      	lsls	r3, r3, #8
    8356:	4313      	orrs	r3, r2
    8358:	b29b      	uxth	r3, r3
    835a:	0019      	movs	r1, r3
    835c:	4b09      	ldr	r3, [pc, #36]	; (8384 <usbdc_set_req+0xdc>)
    835e:	4798      	blx	r3
    8360:	0003      	movs	r3, r0
    8362:	e000      	b.n	8366 <usbdc_set_req+0xbe>
	default:
		return false;
    8364:	2300      	movs	r3, #0
	}
}
    8366:	0018      	movs	r0, r3
    8368:	46bd      	mov	sp, r7
    836a:	b003      	add	sp, #12
    836c:	bd90      	pop	{r4, r7, pc}
    836e:	46c0      	nop			; (mov r8, r8)
    8370:	00010e24 	.word	0x00010e24
    8374:	000086c9 	.word	0x000086c9
    8378:	00007fdd 	.word	0x00007fdd
    837c:	00007ed1 	.word	0x00007ed1
    8380:	00007f3d 	.word	0x00007f3d
    8384:	00008135 	.word	0x00008135

00008388 <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    8388:	b580      	push	{r7, lr}
    838a:	b082      	sub	sp, #8
    838c:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    838e:	4b0a      	ldr	r3, [pc, #40]	; (83b8 <usbdc_sof_notify+0x30>)
    8390:	685b      	ldr	r3, [r3, #4]
    8392:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    8394:	e009      	b.n	83aa <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    8396:	687b      	ldr	r3, [r7, #4]
    8398:	685b      	ldr	r3, [r3, #4]
    839a:	2b00      	cmp	r3, #0
    839c:	d002      	beq.n	83a4 <usbdc_sof_notify+0x1c>
			sof->cb();
    839e:	687b      	ldr	r3, [r7, #4]
    83a0:	685b      	ldr	r3, [r3, #4]
    83a2:	4798      	blx	r3
		}
		sof = sof->next;
    83a4:	687b      	ldr	r3, [r7, #4]
    83a6:	681b      	ldr	r3, [r3, #0]
    83a8:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    83aa:	687b      	ldr	r3, [r7, #4]
    83ac:	2b00      	cmp	r3, #0
    83ae:	d1f2      	bne.n	8396 <usbdc_sof_notify+0xe>
	}
}
    83b0:	46c0      	nop			; (mov r8, r8)
    83b2:	46bd      	mov	sp, r7
    83b4:	b002      	add	sp, #8
    83b6:	bd80      	pop	{r7, pc}
    83b8:	20001298 	.word	0x20001298

000083bc <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    83bc:	b580      	push	{r7, lr}
    83be:	b084      	sub	sp, #16
    83c0:	af00      	add	r7, sp, #0
    83c2:	0002      	movs	r2, r0
    83c4:	6039      	str	r1, [r7, #0]
    83c6:	1dfb      	adds	r3, r7, #7
    83c8:	701a      	strb	r2, [r3, #0]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    83ca:	4b0c      	ldr	r3, [pc, #48]	; (83fc <usbdc_change_notify+0x40>)
    83cc:	68db      	ldr	r3, [r3, #12]
    83ce:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    83d0:	e00d      	b.n	83ee <usbdc_change_notify+0x32>
		if (NULL != cg->cb) {
    83d2:	68fb      	ldr	r3, [r7, #12]
    83d4:	685b      	ldr	r3, [r3, #4]
    83d6:	2b00      	cmp	r3, #0
    83d8:	d006      	beq.n	83e8 <usbdc_change_notify+0x2c>
			cg->cb(change, value);
    83da:	68fb      	ldr	r3, [r7, #12]
    83dc:	685b      	ldr	r3, [r3, #4]
    83de:	6839      	ldr	r1, [r7, #0]
    83e0:	1dfa      	adds	r2, r7, #7
    83e2:	7812      	ldrb	r2, [r2, #0]
    83e4:	0010      	movs	r0, r2
    83e6:	4798      	blx	r3
		}
		cg = cg->next;
    83e8:	68fb      	ldr	r3, [r7, #12]
    83ea:	681b      	ldr	r3, [r3, #0]
    83ec:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    83ee:	68fb      	ldr	r3, [r7, #12]
    83f0:	2b00      	cmp	r3, #0
    83f2:	d1ee      	bne.n	83d2 <usbdc_change_notify+0x16>
	}
}
    83f4:	46c0      	nop			; (mov r8, r8)
    83f6:	46bd      	mov	sp, r7
    83f8:	b004      	add	sp, #16
    83fa:	bd80      	pop	{r7, pc}
    83fc:	20001298 	.word	0x20001298

00008400 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    8400:	b590      	push	{r4, r7, lr}
    8402:	b085      	sub	sp, #20
    8404:	af00      	add	r7, sp, #0
    8406:	6039      	str	r1, [r7, #0]
    8408:	0011      	movs	r1, r2
    840a:	1dfb      	adds	r3, r7, #7
    840c:	1c02      	adds	r2, r0, #0
    840e:	701a      	strb	r2, [r3, #0]
    8410:	1dbb      	adds	r3, r7, #6
    8412:	1c0a      	adds	r2, r1, #0
    8414:	701a      	strb	r2, [r3, #0]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    8416:	4b14      	ldr	r3, [pc, #80]	; (8468 <usbdc_request_handler+0x68>)
    8418:	689b      	ldr	r3, [r3, #8]
    841a:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    841c:	e01c      	b.n	8458 <usbdc_request_handler+0x58>
		if (NULL != h->cb) {
    841e:	68fb      	ldr	r3, [r7, #12]
    8420:	685b      	ldr	r3, [r3, #4]
    8422:	2b00      	cmp	r3, #0
    8424:	d015      	beq.n	8452 <usbdc_request_handler+0x52>
			rc = h->cb(ep, req, stage);
    8426:	68fb      	ldr	r3, [r7, #12]
    8428:	685b      	ldr	r3, [r3, #4]
    842a:	1dba      	adds	r2, r7, #6
    842c:	7814      	ldrb	r4, [r2, #0]
    842e:	6839      	ldr	r1, [r7, #0]
    8430:	1dfa      	adds	r2, r7, #7
    8432:	7810      	ldrb	r0, [r2, #0]
    8434:	0022      	movs	r2, r4
    8436:	4798      	blx	r3
    8438:	0003      	movs	r3, r0
    843a:	60bb      	str	r3, [r7, #8]
			if (0 == rc) {
    843c:	68bb      	ldr	r3, [r7, #8]
    843e:	2b00      	cmp	r3, #0
    8440:	d101      	bne.n	8446 <usbdc_request_handler+0x46>
				return true;
    8442:	2301      	movs	r3, #1
    8444:	e00c      	b.n	8460 <usbdc_request_handler+0x60>
			} else if (ERR_NOT_FOUND != rc) {
    8446:	68bb      	ldr	r3, [r7, #8]
    8448:	330a      	adds	r3, #10
    844a:	d002      	beq.n	8452 <usbdc_request_handler+0x52>
				return -1;
    844c:	2301      	movs	r3, #1
    844e:	425b      	negs	r3, r3
    8450:	e006      	b.n	8460 <usbdc_request_handler+0x60>
			}
		}
		h = h->next;
    8452:	68fb      	ldr	r3, [r7, #12]
    8454:	681b      	ldr	r3, [r3, #0]
    8456:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    8458:	68fb      	ldr	r3, [r7, #12]
    845a:	2b00      	cmp	r3, #0
    845c:	d1df      	bne.n	841e <usbdc_request_handler+0x1e>
	}
	return false;
    845e:	2300      	movs	r3, #0
}
    8460:	0018      	movs	r0, r3
    8462:	46bd      	mov	sp, r7
    8464:	b005      	add	sp, #20
    8466:	bd90      	pop	{r4, r7, pc}
    8468:	20001298 	.word	0x20001298

0000846c <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    846c:	b580      	push	{r7, lr}
    846e:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    8470:	4b02      	ldr	r3, [pc, #8]	; (847c <usbd_sof_cb+0x10>)
    8472:	4798      	blx	r3
}
    8474:	46c0      	nop			; (mov r8, r8)
    8476:	46bd      	mov	sp, r7
    8478:	bd80      	pop	{r7, pc}
    847a:	46c0      	nop			; (mov r8, r8)
    847c:	00008389 	.word	0x00008389

00008480 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    8480:	b580      	push	{r7, lr}
    8482:	b082      	sub	sp, #8
    8484:	af00      	add	r7, sp, #0
    8486:	0002      	movs	r2, r0
    8488:	6039      	str	r1, [r7, #0]
    848a:	1dfb      	adds	r3, r7, #7
    848c:	701a      	strb	r2, [r3, #0]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    848e:	6839      	ldr	r1, [r7, #0]
    8490:	1dfb      	adds	r3, r7, #7
    8492:	781b      	ldrb	r3, [r3, #0]
    8494:	2200      	movs	r2, #0
    8496:	0018      	movs	r0, r3
    8498:	4b16      	ldr	r3, [pc, #88]	; (84f4 <usbdc_cb_ctl_req+0x74>)
    849a:	4798      	blx	r3
    849c:	0003      	movs	r3, r0
    849e:	1c5a      	adds	r2, r3, #1
    84a0:	d00b      	beq.n	84ba <usbdc_cb_ctl_req+0x3a>
    84a2:	2b01      	cmp	r3, #1
    84a4:	d007      	beq.n	84b6 <usbdc_cb_ctl_req+0x36>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    84a6:	46c0      	nop			; (mov r8, r8)
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    84a8:	683b      	ldr	r3, [r7, #0]
    84aa:	781b      	ldrb	r3, [r3, #0]
    84ac:	001a      	movs	r2, r3
    84ae:	23e0      	movs	r3, #224	; 0xe0
    84b0:	4013      	ands	r3, r2
    84b2:	d007      	beq.n	84c4 <usbdc_cb_ctl_req+0x44>
    84b4:	e003      	b.n	84be <usbdc_cb_ctl_req+0x3e>
		return true;
    84b6:	2301      	movs	r3, #1
    84b8:	e017      	b.n	84ea <usbdc_cb_ctl_req+0x6a>
		return false;
    84ba:	2300      	movs	r3, #0
    84bc:	e015      	b.n	84ea <usbdc_cb_ctl_req+0x6a>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    84be:	2b80      	cmp	r3, #128	; 0x80
    84c0:	d009      	beq.n	84d6 <usbdc_cb_ctl_req+0x56>
    84c2:	e011      	b.n	84e8 <usbdc_cb_ctl_req+0x68>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    84c4:	683a      	ldr	r2, [r7, #0]
    84c6:	1dfb      	adds	r3, r7, #7
    84c8:	781b      	ldrb	r3, [r3, #0]
    84ca:	0011      	movs	r1, r2
    84cc:	0018      	movs	r0, r3
    84ce:	4b0a      	ldr	r3, [pc, #40]	; (84f8 <usbdc_cb_ctl_req+0x78>)
    84d0:	4798      	blx	r3
    84d2:	0003      	movs	r3, r0
    84d4:	e009      	b.n	84ea <usbdc_cb_ctl_req+0x6a>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    84d6:	683a      	ldr	r2, [r7, #0]
    84d8:	1dfb      	adds	r3, r7, #7
    84da:	781b      	ldrb	r3, [r3, #0]
    84dc:	0011      	movs	r1, r2
    84de:	0018      	movs	r0, r3
    84e0:	4b06      	ldr	r3, [pc, #24]	; (84fc <usbdc_cb_ctl_req+0x7c>)
    84e2:	4798      	blx	r3
    84e4:	0003      	movs	r3, r0
    84e6:	e000      	b.n	84ea <usbdc_cb_ctl_req+0x6a>
	default:
		return false;
    84e8:	2300      	movs	r3, #0
	}
}
    84ea:	0018      	movs	r0, r3
    84ec:	46bd      	mov	sp, r7
    84ee:	b002      	add	sp, #8
    84f0:	bd80      	pop	{r7, pc}
    84f2:	46c0      	nop			; (mov r8, r8)
    84f4:	00008401 	.word	0x00008401
    84f8:	000082a9 	.word	0x000082a9
    84fc:	00007e3d 	.word	0x00007e3d

00008500 <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    8500:	b580      	push	{r7, lr}
    8502:	b082      	sub	sp, #8
    8504:	af00      	add	r7, sp, #0
    8506:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    8508:	687b      	ldr	r3, [r7, #4]
    850a:	781b      	ldrb	r3, [r3, #0]
    850c:	2b00      	cmp	r3, #0
    850e:	d141      	bne.n	8594 <usbdc_ctrl_status_end+0x94>
		return;
	}
	switch (req->bRequest) {
    8510:	687b      	ldr	r3, [r7, #4]
    8512:	785b      	ldrb	r3, [r3, #1]
    8514:	2b05      	cmp	r3, #5
    8516:	d01f      	beq.n	8558 <usbdc_ctrl_status_end+0x58>
    8518:	2b09      	cmp	r3, #9
    851a:	d000      	beq.n	851e <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    851c:	e03b      	b.n	8596 <usbdc_ctrl_status_end+0x96>
		usbdc.cfg_value = req->wValue;
    851e:	687b      	ldr	r3, [r7, #4]
    8520:	789a      	ldrb	r2, [r3, #2]
    8522:	78db      	ldrb	r3, [r3, #3]
    8524:	021b      	lsls	r3, r3, #8
    8526:	4313      	orrs	r3, r2
    8528:	b29b      	uxth	r3, r3
    852a:	b2da      	uxtb	r2, r3
    852c:	4b1b      	ldr	r3, [pc, #108]	; (859c <usbdc_ctrl_status_end+0x9c>)
    852e:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    8530:	687b      	ldr	r3, [r7, #4]
    8532:	789a      	ldrb	r2, [r3, #2]
    8534:	78db      	ldrb	r3, [r3, #3]
    8536:	021b      	lsls	r3, r3, #8
    8538:	4313      	orrs	r3, r2
    853a:	b29b      	uxth	r3, r3
    853c:	2b00      	cmp	r3, #0
    853e:	d001      	beq.n	8544 <usbdc_ctrl_status_end+0x44>
    8540:	2204      	movs	r2, #4
    8542:	e000      	b.n	8546 <usbdc_ctrl_status_end+0x46>
    8544:	2203      	movs	r2, #3
    8546:	4b15      	ldr	r3, [pc, #84]	; (859c <usbdc_ctrl_status_end+0x9c>)
    8548:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    854a:	4b14      	ldr	r3, [pc, #80]	; (859c <usbdc_ctrl_status_end+0x9c>)
    854c:	7e9b      	ldrb	r3, [r3, #26]
    854e:	0019      	movs	r1, r3
    8550:	2001      	movs	r0, #1
    8552:	4b13      	ldr	r3, [pc, #76]	; (85a0 <usbdc_ctrl_status_end+0xa0>)
    8554:	4798      	blx	r3
		break;
    8556:	e01e      	b.n	8596 <usbdc_ctrl_status_end+0x96>
		usbdc_set_address(req->wValue);
    8558:	687b      	ldr	r3, [r7, #4]
    855a:	789a      	ldrb	r2, [r3, #2]
    855c:	78db      	ldrb	r3, [r3, #3]
    855e:	021b      	lsls	r3, r3, #8
    8560:	4313      	orrs	r3, r2
    8562:	b29b      	uxth	r3, r3
    8564:	b2db      	uxtb	r3, r3
    8566:	0018      	movs	r0, r3
    8568:	4b0e      	ldr	r3, [pc, #56]	; (85a4 <usbdc_ctrl_status_end+0xa4>)
    856a:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    856c:	687b      	ldr	r3, [r7, #4]
    856e:	789a      	ldrb	r2, [r3, #2]
    8570:	78db      	ldrb	r3, [r3, #3]
    8572:	021b      	lsls	r3, r3, #8
    8574:	4313      	orrs	r3, r2
    8576:	b29b      	uxth	r3, r3
    8578:	2b00      	cmp	r3, #0
    857a:	d001      	beq.n	8580 <usbdc_ctrl_status_end+0x80>
    857c:	2203      	movs	r2, #3
    857e:	e000      	b.n	8582 <usbdc_ctrl_status_end+0x82>
    8580:	2202      	movs	r2, #2
    8582:	4b06      	ldr	r3, [pc, #24]	; (859c <usbdc_ctrl_status_end+0x9c>)
    8584:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    8586:	4b05      	ldr	r3, [pc, #20]	; (859c <usbdc_ctrl_status_end+0x9c>)
    8588:	7e9b      	ldrb	r3, [r3, #26]
    858a:	0019      	movs	r1, r3
    858c:	2001      	movs	r0, #1
    858e:	4b04      	ldr	r3, [pc, #16]	; (85a0 <usbdc_ctrl_status_end+0xa0>)
    8590:	4798      	blx	r3
		break;
    8592:	e000      	b.n	8596 <usbdc_ctrl_status_end+0x96>
		return;
    8594:	46c0      	nop			; (mov r8, r8)
	}
}
    8596:	46bd      	mov	sp, r7
    8598:	b002      	add	sp, #8
    859a:	bd80      	pop	{r7, pc}
    859c:	20001298 	.word	0x20001298
    85a0:	000083bd 	.word	0x000083bd
    85a4:	00008111 	.word	0x00008111

000085a8 <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    85a8:	b580      	push	{r7, lr}
    85aa:	b082      	sub	sp, #8
    85ac:	af00      	add	r7, sp, #0
    85ae:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    85b0:	687b      	ldr	r3, [r7, #4]
    85b2:	2201      	movs	r2, #1
    85b4:	0019      	movs	r1, r3
    85b6:	2000      	movs	r0, #0
    85b8:	4b03      	ldr	r3, [pc, #12]	; (85c8 <usbdc_ctrl_data_end+0x20>)
    85ba:	4798      	blx	r3
	return false;
    85bc:	2300      	movs	r3, #0
}
    85be:	0018      	movs	r0, r3
    85c0:	46bd      	mov	sp, r7
    85c2:	b002      	add	sp, #8
    85c4:	bd80      	pop	{r7, pc}
    85c6:	46c0      	nop			; (mov r8, r8)
    85c8:	00008401 	.word	0x00008401

000085cc <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    85cc:	b580      	push	{r7, lr}
    85ce:	b082      	sub	sp, #8
    85d0:	af00      	add	r7, sp, #0
    85d2:	603a      	str	r2, [r7, #0]
    85d4:	1dfb      	adds	r3, r7, #7
    85d6:	1c02      	adds	r2, r0, #0
    85d8:	701a      	strb	r2, [r3, #0]
    85da:	1dbb      	adds	r3, r7, #6
    85dc:	1c0a      	adds	r2, r1, #0
    85de:	701a      	strb	r2, [r3, #0]
	(void)ep;

	switch (code) {
    85e0:	1dbb      	adds	r3, r7, #6
    85e2:	781b      	ldrb	r3, [r3, #0]
    85e4:	2b00      	cmp	r3, #0
    85e6:	d002      	beq.n	85ee <usbdc_cb_ctl_done+0x22>
    85e8:	2b01      	cmp	r3, #1
    85ea:	d005      	beq.n	85f8 <usbdc_cb_ctl_done+0x2c>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    85ec:	e00a      	b.n	8604 <usbdc_cb_ctl_done+0x38>
		usbdc_ctrl_status_end(req);
    85ee:	683b      	ldr	r3, [r7, #0]
    85f0:	0018      	movs	r0, r3
    85f2:	4b07      	ldr	r3, [pc, #28]	; (8610 <usbdc_cb_ctl_done+0x44>)
    85f4:	4798      	blx	r3
		break;
    85f6:	e005      	b.n	8604 <usbdc_cb_ctl_done+0x38>
		return usbdc_ctrl_data_end(req);
    85f8:	683b      	ldr	r3, [r7, #0]
    85fa:	0018      	movs	r0, r3
    85fc:	4b05      	ldr	r3, [pc, #20]	; (8614 <usbdc_cb_ctl_done+0x48>)
    85fe:	4798      	blx	r3
    8600:	0003      	movs	r3, r0
    8602:	e000      	b.n	8606 <usbdc_cb_ctl_done+0x3a>
	}
	return false;
    8604:	2300      	movs	r3, #0
}
    8606:	0018      	movs	r0, r3
    8608:	46bd      	mov	sp, r7
    860a:	b002      	add	sp, #8
    860c:	bd80      	pop	{r7, pc}
    860e:	46c0      	nop			; (mov r8, r8)
    8610:	00008501 	.word	0x00008501
    8614:	000085a9 	.word	0x000085a9

00008618 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    8618:	b580      	push	{r7, lr}
    861a:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    861c:	4b12      	ldr	r3, [pc, #72]	; (8668 <usbdc_reset+0x50>)
    861e:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    8620:	4b12      	ldr	r3, [pc, #72]	; (866c <usbdc_reset+0x54>)
    8622:	2202      	movs	r2, #2
    8624:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    8626:	4b11      	ldr	r3, [pc, #68]	; (866c <usbdc_reset+0x54>)
    8628:	2200      	movs	r2, #0
    862a:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    862c:	4b0f      	ldr	r3, [pc, #60]	; (866c <usbdc_reset+0x54>)
    862e:	2200      	movs	r2, #0
    8630:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    8632:	2000      	movs	r0, #0
    8634:	4b0e      	ldr	r3, [pc, #56]	; (8670 <usbdc_reset+0x58>)
    8636:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    8638:	4b0c      	ldr	r3, [pc, #48]	; (866c <usbdc_reset+0x54>)
    863a:	7f1b      	ldrb	r3, [r3, #28]
    863c:	0018      	movs	r0, r3
    863e:	4b0d      	ldr	r3, [pc, #52]	; (8674 <usbdc_reset+0x5c>)
    8640:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    8642:	4b0d      	ldr	r3, [pc, #52]	; (8678 <usbdc_reset+0x60>)
    8644:	001a      	movs	r2, r3
    8646:	2100      	movs	r1, #0
    8648:	2000      	movs	r0, #0
    864a:	4b0c      	ldr	r3, [pc, #48]	; (867c <usbdc_reset+0x64>)
    864c:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    864e:	4b0c      	ldr	r3, [pc, #48]	; (8680 <usbdc_reset+0x68>)
    8650:	001a      	movs	r2, r3
    8652:	2102      	movs	r1, #2
    8654:	2000      	movs	r0, #0
    8656:	4b09      	ldr	r3, [pc, #36]	; (867c <usbdc_reset+0x64>)
    8658:	4798      	blx	r3
	usb_d_ep_enable(0);
    865a:	2000      	movs	r0, #0
    865c:	4b09      	ldr	r3, [pc, #36]	; (8684 <usbdc_reset+0x6c>)
    865e:	4798      	blx	r3
}
    8660:	46c0      	nop			; (mov r8, r8)
    8662:	46bd      	mov	sp, r7
    8664:	bd80      	pop	{r7, pc}
    8666:	46c0      	nop			; (mov r8, r8)
    8668:	00007fa9 	.word	0x00007fa9
    866c:	20001298 	.word	0x20001298
    8670:	000026dd 	.word	0x000026dd
    8674:	000025e5 	.word	0x000025e5
    8678:	00008481 	.word	0x00008481
    867c:	00002a55 	.word	0x00002a55
    8680:	000085cd 	.word	0x000085cd
    8684:	0000273d 	.word	0x0000273d

00008688 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    8688:	b580      	push	{r7, lr}
    868a:	b082      	sub	sp, #8
    868c:	af00      	add	r7, sp, #0
    868e:	0002      	movs	r2, r0
    8690:	6039      	str	r1, [r7, #0]
    8692:	1dfb      	adds	r3, r7, #7
    8694:	701a      	strb	r2, [r3, #0]
	(void)param;

	switch (ev) {
    8696:	1dfb      	adds	r3, r7, #7
    8698:	781b      	ldrb	r3, [r3, #0]
    869a:	2b00      	cmp	r3, #0
    869c:	d002      	beq.n	86a4 <usbd_event_cb+0x1c>
    869e:	2b01      	cmp	r3, #1
    86a0:	d006      	beq.n	86b0 <usbd_event_cb+0x28>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    86a2:	e008      	b.n	86b6 <usbd_event_cb+0x2e>
		usbdc_change_notify(USBDC_C_CONN, param);
    86a4:	683b      	ldr	r3, [r7, #0]
    86a6:	0019      	movs	r1, r3
    86a8:	2000      	movs	r0, #0
    86aa:	4b05      	ldr	r3, [pc, #20]	; (86c0 <usbd_event_cb+0x38>)
    86ac:	4798      	blx	r3
		break;
    86ae:	e002      	b.n	86b6 <usbd_event_cb+0x2e>
		usbdc_reset();
    86b0:	4b04      	ldr	r3, [pc, #16]	; (86c4 <usbd_event_cb+0x3c>)
    86b2:	4798      	blx	r3
		break;
    86b4:	46c0      	nop			; (mov r8, r8)
	}
}
    86b6:	46c0      	nop			; (mov r8, r8)
    86b8:	46bd      	mov	sp, r7
    86ba:	b002      	add	sp, #8
    86bc:	bd80      	pop	{r7, pc}
    86be:	46c0      	nop			; (mov r8, r8)
    86c0:	000083bd 	.word	0x000083bd
    86c4:	00008619 	.word	0x00008619

000086c8 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    86c8:	b580      	push	{r7, lr}
    86ca:	b088      	sub	sp, #32
    86cc:	af00      	add	r7, sp, #0
    86ce:	60b9      	str	r1, [r7, #8]
    86d0:	607a      	str	r2, [r7, #4]
    86d2:	0019      	movs	r1, r3
    86d4:	230f      	movs	r3, #15
    86d6:	18fb      	adds	r3, r7, r3
    86d8:	1c02      	adds	r2, r0, #0
    86da:	701a      	strb	r2, [r3, #0]
    86dc:	230e      	movs	r3, #14
    86de:	18fb      	adds	r3, r7, r3
    86e0:	1c0a      	adds	r2, r1, #0
    86e2:	701a      	strb	r2, [r3, #0]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    86e4:	2314      	movs	r3, #20
    86e6:	18fb      	adds	r3, r7, r3
    86e8:	68ba      	ldr	r2, [r7, #8]
    86ea:	601a      	str	r2, [r3, #0]
    86ec:	2314      	movs	r3, #20
    86ee:	18fb      	adds	r3, r7, r3
    86f0:	687a      	ldr	r2, [r7, #4]
    86f2:	605a      	str	r2, [r3, #4]
    86f4:	2314      	movs	r3, #20
    86f6:	18fb      	adds	r3, r7, r3
    86f8:	220f      	movs	r2, #15
    86fa:	18ba      	adds	r2, r7, r2
    86fc:	7812      	ldrb	r2, [r2, #0]
    86fe:	721a      	strb	r2, [r3, #8]
    8700:	230e      	movs	r3, #14
    8702:	18fb      	adds	r3, r7, r3
    8704:	781a      	ldrb	r2, [r3, #0]
    8706:	2314      	movs	r3, #20
    8708:	18fb      	adds	r3, r7, r3
    870a:	725a      	strb	r2, [r3, #9]
	return usb_d_ep_transfer(&xfer);
    870c:	2314      	movs	r3, #20
    870e:	18fb      	adds	r3, r7, r3
    8710:	0018      	movs	r0, r3
    8712:	4b03      	ldr	r3, [pc, #12]	; (8720 <usbdc_xfer+0x58>)
    8714:	4798      	blx	r3
    8716:	0003      	movs	r3, r0
}
    8718:	0018      	movs	r0, r3
    871a:	46bd      	mov	sp, r7
    871c:	b008      	add	sp, #32
    871e:	bd80      	pop	{r7, pc}
    8720:	000027bd 	.word	0x000027bd

00008724 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    8724:	b580      	push	{r7, lr}
    8726:	b082      	sub	sp, #8
    8728:	af00      	add	r7, sp, #0
    872a:	0002      	movs	r2, r0
    872c:	6039      	str	r1, [r7, #0]
    872e:	1dfb      	adds	r3, r7, #7
    8730:	701a      	strb	r2, [r3, #0]
	switch (type) {
    8732:	1dfb      	adds	r3, r7, #7
    8734:	781b      	ldrb	r3, [r3, #0]
    8736:	2b01      	cmp	r3, #1
    8738:	d00b      	beq.n	8752 <usbdc_register_handler+0x2e>
    873a:	2b02      	cmp	r3, #2
    873c:	d010      	beq.n	8760 <usbdc_register_handler+0x3c>
    873e:	2b00      	cmp	r3, #0
    8740:	d000      	beq.n	8744 <usbdc_register_handler+0x20>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
    8742:	e014      	b.n	876e <usbdc_register_handler+0x4a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    8744:	683a      	ldr	r2, [r7, #0]
    8746:	4b0c      	ldr	r3, [pc, #48]	; (8778 <usbdc_register_handler+0x54>)
    8748:	0011      	movs	r1, r2
    874a:	0018      	movs	r0, r3
    874c:	4b0b      	ldr	r3, [pc, #44]	; (877c <usbdc_register_handler+0x58>)
    874e:	4798      	blx	r3
		break;
    8750:	e00d      	b.n	876e <usbdc_register_handler+0x4a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    8752:	683a      	ldr	r2, [r7, #0]
    8754:	4b0a      	ldr	r3, [pc, #40]	; (8780 <usbdc_register_handler+0x5c>)
    8756:	0011      	movs	r1, r2
    8758:	0018      	movs	r0, r3
    875a:	4b08      	ldr	r3, [pc, #32]	; (877c <usbdc_register_handler+0x58>)
    875c:	4798      	blx	r3
		break;
    875e:	e006      	b.n	876e <usbdc_register_handler+0x4a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    8760:	683a      	ldr	r2, [r7, #0]
    8762:	4b08      	ldr	r3, [pc, #32]	; (8784 <usbdc_register_handler+0x60>)
    8764:	0011      	movs	r1, r2
    8766:	0018      	movs	r0, r3
    8768:	4b04      	ldr	r3, [pc, #16]	; (877c <usbdc_register_handler+0x58>)
    876a:	4798      	blx	r3
		break;
    876c:	46c0      	nop			; (mov r8, r8)
	}
}
    876e:	46c0      	nop			; (mov r8, r8)
    8770:	46bd      	mov	sp, r7
    8772:	b002      	add	sp, #8
    8774:	bd80      	pop	{r7, pc}
    8776:	46c0      	nop			; (mov r8, r8)
    8778:	2000129c 	.word	0x2000129c
    877c:	00008b99 	.word	0x00008b99
    8780:	200012a0 	.word	0x200012a0
    8784:	200012a4 	.word	0x200012a4

00008788 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    8788:	b580      	push	{r7, lr}
    878a:	b084      	sub	sp, #16
    878c:	af00      	add	r7, sp, #0
    878e:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
    8790:	687b      	ldr	r3, [r7, #4]
    8792:	1e5a      	subs	r2, r3, #1
    8794:	4193      	sbcs	r3, r2
    8796:	b2db      	uxtb	r3, r3
    8798:	4a12      	ldr	r2, [pc, #72]	; (87e4 <usbdc_init+0x5c>)
    879a:	4913      	ldr	r1, [pc, #76]	; (87e8 <usbdc_init+0x60>)
    879c:	0018      	movs	r0, r3
    879e:	4b13      	ldr	r3, [pc, #76]	; (87ec <usbdc_init+0x64>)
    87a0:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    87a2:	4b13      	ldr	r3, [pc, #76]	; (87f0 <usbdc_init+0x68>)
    87a4:	4798      	blx	r3
    87a6:	0003      	movs	r3, r0
    87a8:	60fb      	str	r3, [r7, #12]
	if (rc < 0) {
    87aa:	68fb      	ldr	r3, [r7, #12]
    87ac:	2b00      	cmp	r3, #0
    87ae:	da01      	bge.n	87b4 <usbdc_init+0x2c>
		return rc;
    87b0:	68fb      	ldr	r3, [r7, #12]
    87b2:	e013      	b.n	87dc <usbdc_init+0x54>
	}

	memset(&usbdc, 0, sizeof(usbdc));
    87b4:	4b0f      	ldr	r3, [pc, #60]	; (87f4 <usbdc_init+0x6c>)
    87b6:	2220      	movs	r2, #32
    87b8:	2100      	movs	r1, #0
    87ba:	0018      	movs	r0, r3
    87bc:	4b0e      	ldr	r3, [pc, #56]	; (87f8 <usbdc_init+0x70>)
    87be:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    87c0:	4b0c      	ldr	r3, [pc, #48]	; (87f4 <usbdc_init+0x6c>)
    87c2:	687a      	ldr	r2, [r7, #4]
    87c4:	615a      	str	r2, [r3, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    87c6:	4b0d      	ldr	r3, [pc, #52]	; (87fc <usbdc_init+0x74>)
    87c8:	0019      	movs	r1, r3
    87ca:	2000      	movs	r0, #0
    87cc:	4b0c      	ldr	r3, [pc, #48]	; (8800 <usbdc_init+0x78>)
    87ce:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    87d0:	4b0c      	ldr	r3, [pc, #48]	; (8804 <usbdc_init+0x7c>)
    87d2:	0019      	movs	r1, r3
    87d4:	2001      	movs	r0, #1
    87d6:	4b0a      	ldr	r3, [pc, #40]	; (8800 <usbdc_init+0x78>)
    87d8:	4798      	blx	r3

	return 0;
    87da:	2300      	movs	r3, #0
}
    87dc:	0018      	movs	r0, r3
    87de:	46bd      	mov	sp, r7
    87e0:	b004      	add	sp, #16
    87e2:	bd80      	pop	{r7, pc}
    87e4:	00000355 	.word	0x00000355
    87e8:	00010e54 	.word	0x00010e54
    87ec:	00002ae1 	.word	0x00002ae1
    87f0:	000024a9 	.word	0x000024a9
    87f4:	20001298 	.word	0x20001298
    87f8:	0000b785 	.word	0x0000b785
    87fc:	0000846d 	.word	0x0000846d
    8800:	00002571 	.word	0x00002571
    8804:	00008689 	.word	0x00008689

00008808 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    8808:	b580      	push	{r7, lr}
    880a:	b082      	sub	sp, #8
    880c:	af00      	add	r7, sp, #0
    880e:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
    8810:	687a      	ldr	r2, [r7, #4]
    8812:	4b04      	ldr	r3, [pc, #16]	; (8824 <usbdc_register_function+0x1c>)
    8814:	0011      	movs	r1, r2
    8816:	0018      	movs	r0, r3
    8818:	4b03      	ldr	r3, [pc, #12]	; (8828 <usbdc_register_function+0x20>)
    881a:	4798      	blx	r3
}
    881c:	46c0      	nop			; (mov r8, r8)
    881e:	46bd      	mov	sp, r7
    8820:	b002      	add	sp, #8
    8822:	bd80      	pop	{r7, pc}
    8824:	200012a8 	.word	0x200012a8
    8828:	00008b99 	.word	0x00008b99

0000882c <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    882c:	b580      	push	{r7, lr}
    882e:	b082      	sub	sp, #8
    8830:	af00      	add	r7, sp, #0
    8832:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
    8834:	4b0f      	ldr	r3, [pc, #60]	; (8874 <usbdc_start+0x48>)
    8836:	7e9b      	ldrb	r3, [r3, #26]
    8838:	2b00      	cmp	r3, #0
    883a:	d002      	beq.n	8842 <usbdc_start+0x16>
		return ERR_BUSY;
    883c:	2304      	movs	r3, #4
    883e:	425b      	negs	r3, r3
    8840:	e013      	b.n	886a <usbdc_start+0x3e>
	}

	if (desces) {
    8842:	687b      	ldr	r3, [r7, #4]
    8844:	2b00      	cmp	r3, #0
    8846:	d00e      	beq.n	8866 <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
    8848:	4b0a      	ldr	r3, [pc, #40]	; (8874 <usbdc_start+0x48>)
    884a:	687a      	ldr	r2, [r7, #4]
    884c:	601a      	str	r2, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    884e:	687b      	ldr	r3, [r7, #4]
    8850:	681b      	ldr	r3, [r3, #0]
    8852:	79da      	ldrb	r2, [r3, #7]
    8854:	4b07      	ldr	r3, [pc, #28]	; (8874 <usbdc_start+0x48>)
    8856:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    8858:	4b06      	ldr	r3, [pc, #24]	; (8874 <usbdc_start+0x48>)
    885a:	2201      	movs	r2, #1
    885c:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    885e:	4b06      	ldr	r3, [pc, #24]	; (8878 <usbdc_start+0x4c>)
    8860:	4798      	blx	r3
	return ERR_NONE;
    8862:	2300      	movs	r3, #0
    8864:	e001      	b.n	886a <usbdc_start+0x3e>
		return ERR_BAD_DATA;
    8866:	2309      	movs	r3, #9
    8868:	425b      	negs	r3, r3
}
    886a:	0018      	movs	r0, r3
    886c:	46bd      	mov	sp, r7
    886e:	b002      	add	sp, #8
    8870:	bd80      	pop	{r7, pc}
    8872:	46c0      	nop			; (mov r8, r8)
    8874:	20001298 	.word	0x20001298
    8878:	00002599 	.word	0x00002599

0000887c <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    887c:	b580      	push	{r7, lr}
    887e:	af00      	add	r7, sp, #0
	usb_d_attach();
    8880:	4b02      	ldr	r3, [pc, #8]	; (888c <usbdc_attach+0x10>)
    8882:	4798      	blx	r3
}
    8884:	46c0      	nop			; (mov r8, r8)
    8886:	46bd      	mov	sp, r7
    8888:	bd80      	pop	{r7, pc}
    888a:	46c0      	nop			; (mov r8, r8)
    888c:	000025ad 	.word	0x000025ad

00008890 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
    8890:	b580      	push	{r7, lr}
    8892:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
    8894:	4b02      	ldr	r3, [pc, #8]	; (88a0 <usbdc_get_ctrl_buffer+0x10>)
    8896:	695b      	ldr	r3, [r3, #20]
}
    8898:	0018      	movs	r0, r3
    889a:	46bd      	mov	sp, r7
    889c:	bd80      	pop	{r7, pc}
    889e:	46c0      	nop			; (mov r8, r8)
    88a0:	20001298 	.word	0x20001298

000088a4 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
    88a4:	b580      	push	{r7, lr}
    88a6:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
    88a8:	4b06      	ldr	r3, [pc, #24]	; (88c4 <usbdc_get_state+0x20>)
    88aa:	7e9b      	ldrb	r3, [r3, #26]
    88ac:	001a      	movs	r2, r3
    88ae:	2310      	movs	r3, #16
    88b0:	4013      	ands	r3, r2
    88b2:	d001      	beq.n	88b8 <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
    88b4:	2310      	movs	r3, #16
    88b6:	e001      	b.n	88bc <usbdc_get_state+0x18>
	}
	return usbdc.state;
    88b8:	4b02      	ldr	r3, [pc, #8]	; (88c4 <usbdc_get_state+0x20>)
    88ba:	7e9b      	ldrb	r3, [r3, #26]
}
    88bc:	0018      	movs	r0, r3
    88be:	46bd      	mov	sp, r7
    88c0:	bd80      	pop	{r7, pc}
    88c2:	46c0      	nop			; (mov r8, r8)
    88c4:	20001298 	.word	0x20001298

000088c8 <usb_get_u16>:
{
    88c8:	b580      	push	{r7, lr}
    88ca:	b082      	sub	sp, #8
    88cc:	af00      	add	r7, sp, #0
    88ce:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    88d0:	687b      	ldr	r3, [r7, #4]
    88d2:	781b      	ldrb	r3, [r3, #0]
    88d4:	b29a      	uxth	r2, r3
    88d6:	687b      	ldr	r3, [r7, #4]
    88d8:	3301      	adds	r3, #1
    88da:	781b      	ldrb	r3, [r3, #0]
    88dc:	b29b      	uxth	r3, r3
    88de:	021b      	lsls	r3, r3, #8
    88e0:	b29b      	uxth	r3, r3
    88e2:	18d3      	adds	r3, r2, r3
    88e4:	b29b      	uxth	r3, r3
}
    88e6:	0018      	movs	r0, r3
    88e8:	46bd      	mov	sp, r7
    88ea:	b002      	add	sp, #8
    88ec:	bd80      	pop	{r7, pc}

000088ee <usb_desc_len>:
{
    88ee:	b580      	push	{r7, lr}
    88f0:	b082      	sub	sp, #8
    88f2:	af00      	add	r7, sp, #0
    88f4:	6078      	str	r0, [r7, #4]
	return desc[0];
    88f6:	687b      	ldr	r3, [r7, #4]
    88f8:	781b      	ldrb	r3, [r3, #0]
}
    88fa:	0018      	movs	r0, r3
    88fc:	46bd      	mov	sp, r7
    88fe:	b002      	add	sp, #8
    8900:	bd80      	pop	{r7, pc}

00008902 <usb_desc_type>:
{
    8902:	b580      	push	{r7, lr}
    8904:	b082      	sub	sp, #8
    8906:	af00      	add	r7, sp, #0
    8908:	6078      	str	r0, [r7, #4]
	return desc[1];
    890a:	687b      	ldr	r3, [r7, #4]
    890c:	3301      	adds	r3, #1
    890e:	781b      	ldrb	r3, [r3, #0]
}
    8910:	0018      	movs	r0, r3
    8912:	46bd      	mov	sp, r7
    8914:	b002      	add	sp, #8
    8916:	bd80      	pop	{r7, pc}

00008918 <usb_desc_next>:
{
    8918:	b580      	push	{r7, lr}
    891a:	b082      	sub	sp, #8
    891c:	af00      	add	r7, sp, #0
    891e:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    8920:	687b      	ldr	r3, [r7, #4]
    8922:	0018      	movs	r0, r3
    8924:	4b04      	ldr	r3, [pc, #16]	; (8938 <usb_desc_next+0x20>)
    8926:	4798      	blx	r3
    8928:	0003      	movs	r3, r0
    892a:	001a      	movs	r2, r3
    892c:	687b      	ldr	r3, [r7, #4]
    892e:	189b      	adds	r3, r3, r2
}
    8930:	0018      	movs	r0, r3
    8932:	46bd      	mov	sp, r7
    8934:	b002      	add	sp, #8
    8936:	bd80      	pop	{r7, pc}
    8938:	000088ef 	.word	0x000088ef

0000893c <usb_cfg_desc_total_len>:
{
    893c:	b580      	push	{r7, lr}
    893e:	b082      	sub	sp, #8
    8940:	af00      	add	r7, sp, #0
    8942:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    8944:	687b      	ldr	r3, [r7, #4]
    8946:	3302      	adds	r3, #2
    8948:	0018      	movs	r0, r3
    894a:	4b03      	ldr	r3, [pc, #12]	; (8958 <usb_cfg_desc_total_len+0x1c>)
    894c:	4798      	blx	r3
    894e:	0003      	movs	r3, r0
}
    8950:	0018      	movs	r0, r3
    8952:	46bd      	mov	sp, r7
    8954:	b002      	add	sp, #8
    8956:	bd80      	pop	{r7, pc}
    8958:	000088c9 	.word	0x000088c9

0000895c <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
    895c:	b580      	push	{r7, lr}
    895e:	b082      	sub	sp, #8
    8960:	af00      	add	r7, sp, #0
    8962:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    8964:	687b      	ldr	r3, [r7, #4]
    8966:	0018      	movs	r0, r3
    8968:	4b04      	ldr	r3, [pc, #16]	; (897c <usb_cfg_desc_next+0x20>)
    896a:	4798      	blx	r3
    896c:	0003      	movs	r3, r0
    896e:	001a      	movs	r2, r3
    8970:	687b      	ldr	r3, [r7, #4]
    8972:	189b      	adds	r3, r3, r2
}
    8974:	0018      	movs	r0, r3
    8976:	46bd      	mov	sp, r7
    8978:	b002      	add	sp, #8
    897a:	bd80      	pop	{r7, pc}
    897c:	0000893d 	.word	0x0000893d

00008980 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    8980:	b580      	push	{r7, lr}
    8982:	b084      	sub	sp, #16
    8984:	af00      	add	r7, sp, #0
    8986:	60f8      	str	r0, [r7, #12]
    8988:	60b9      	str	r1, [r7, #8]
    898a:	1dfb      	adds	r3, r7, #7
    898c:	701a      	strb	r2, [r3, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    898e:	e01a      	b.n	89c6 <usb_find_desc+0x46>
		_desc_len_check();
    8990:	68fb      	ldr	r3, [r7, #12]
    8992:	0018      	movs	r0, r3
    8994:	4b10      	ldr	r3, [pc, #64]	; (89d8 <usb_find_desc+0x58>)
    8996:	4798      	blx	r3
    8998:	0003      	movs	r3, r0
    899a:	2b01      	cmp	r3, #1
    899c:	d801      	bhi.n	89a2 <usb_find_desc+0x22>
    899e:	2300      	movs	r3, #0
    89a0:	e016      	b.n	89d0 <usb_find_desc+0x50>
		if (type == usb_desc_type(desc)) {
    89a2:	68fb      	ldr	r3, [r7, #12]
    89a4:	0018      	movs	r0, r3
    89a6:	4b0d      	ldr	r3, [pc, #52]	; (89dc <usb_find_desc+0x5c>)
    89a8:	4798      	blx	r3
    89aa:	0003      	movs	r3, r0
    89ac:	001a      	movs	r2, r3
    89ae:	1dfb      	adds	r3, r7, #7
    89b0:	781b      	ldrb	r3, [r3, #0]
    89b2:	4293      	cmp	r3, r2
    89b4:	d101      	bne.n	89ba <usb_find_desc+0x3a>
			return desc;
    89b6:	68fb      	ldr	r3, [r7, #12]
    89b8:	e00a      	b.n	89d0 <usb_find_desc+0x50>
		}
		desc = usb_desc_next(desc);
    89ba:	68fb      	ldr	r3, [r7, #12]
    89bc:	0018      	movs	r0, r3
    89be:	4b08      	ldr	r3, [pc, #32]	; (89e0 <usb_find_desc+0x60>)
    89c0:	4798      	blx	r3
    89c2:	0003      	movs	r3, r0
    89c4:	60fb      	str	r3, [r7, #12]
	while (desc < eof) {
    89c6:	68fa      	ldr	r2, [r7, #12]
    89c8:	68bb      	ldr	r3, [r7, #8]
    89ca:	429a      	cmp	r2, r3
    89cc:	d3e0      	bcc.n	8990 <usb_find_desc+0x10>
	}
	return NULL;
    89ce:	2300      	movs	r3, #0
}
    89d0:	0018      	movs	r0, r3
    89d2:	46bd      	mov	sp, r7
    89d4:	b004      	add	sp, #16
    89d6:	bd80      	pop	{r7, pc}
    89d8:	000088ef 	.word	0x000088ef
    89dc:	00008903 	.word	0x00008903
    89e0:	00008919 	.word	0x00008919

000089e4 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
    89e4:	b580      	push	{r7, lr}
    89e6:	b082      	sub	sp, #8
    89e8:	af00      	add	r7, sp, #0
    89ea:	6078      	str	r0, [r7, #4]
    89ec:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    89ee:	e01e      	b.n	8a2e <usb_find_ep_desc+0x4a>
		_desc_len_check();
    89f0:	687b      	ldr	r3, [r7, #4]
    89f2:	0018      	movs	r0, r3
    89f4:	4b13      	ldr	r3, [pc, #76]	; (8a44 <usb_find_ep_desc+0x60>)
    89f6:	4798      	blx	r3
    89f8:	0003      	movs	r3, r0
    89fa:	2b01      	cmp	r3, #1
    89fc:	d801      	bhi.n	8a02 <usb_find_ep_desc+0x1e>
    89fe:	2300      	movs	r3, #0
    8a00:	e01c      	b.n	8a3c <usb_find_ep_desc+0x58>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    8a02:	687b      	ldr	r3, [r7, #4]
    8a04:	0018      	movs	r0, r3
    8a06:	4b10      	ldr	r3, [pc, #64]	; (8a48 <usb_find_ep_desc+0x64>)
    8a08:	4798      	blx	r3
    8a0a:	0003      	movs	r3, r0
    8a0c:	2b04      	cmp	r3, #4
    8a0e:	d013      	beq.n	8a38 <usb_find_ep_desc+0x54>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    8a10:	687b      	ldr	r3, [r7, #4]
    8a12:	0018      	movs	r0, r3
    8a14:	4b0c      	ldr	r3, [pc, #48]	; (8a48 <usb_find_ep_desc+0x64>)
    8a16:	4798      	blx	r3
    8a18:	0003      	movs	r3, r0
    8a1a:	2b05      	cmp	r3, #5
    8a1c:	d101      	bne.n	8a22 <usb_find_ep_desc+0x3e>
			return desc;
    8a1e:	687b      	ldr	r3, [r7, #4]
    8a20:	e00c      	b.n	8a3c <usb_find_ep_desc+0x58>
		}
		desc = usb_desc_next(desc);
    8a22:	687b      	ldr	r3, [r7, #4]
    8a24:	0018      	movs	r0, r3
    8a26:	4b09      	ldr	r3, [pc, #36]	; (8a4c <usb_find_ep_desc+0x68>)
    8a28:	4798      	blx	r3
    8a2a:	0003      	movs	r3, r0
    8a2c:	607b      	str	r3, [r7, #4]
	while (desc < eof) {
    8a2e:	687a      	ldr	r2, [r7, #4]
    8a30:	683b      	ldr	r3, [r7, #0]
    8a32:	429a      	cmp	r2, r3
    8a34:	d3dc      	bcc.n	89f0 <usb_find_ep_desc+0xc>
    8a36:	e000      	b.n	8a3a <usb_find_ep_desc+0x56>
			break;
    8a38:	46c0      	nop			; (mov r8, r8)
	}
	return NULL;
    8a3a:	2300      	movs	r3, #0
}
    8a3c:	0018      	movs	r0, r3
    8a3e:	46bd      	mov	sp, r7
    8a40:	b002      	add	sp, #8
    8a42:	bd80      	pop	{r7, pc}
    8a44:	000088ef 	.word	0x000088ef
    8a48:	00008903 	.word	0x00008903
    8a4c:	00008919 	.word	0x00008919

00008a50 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    8a50:	b580      	push	{r7, lr}
    8a52:	b084      	sub	sp, #16
    8a54:	af00      	add	r7, sp, #0
    8a56:	60f8      	str	r0, [r7, #12]
    8a58:	60b9      	str	r1, [r7, #8]
    8a5a:	1dfb      	adds	r3, r7, #7
    8a5c:	701a      	strb	r2, [r3, #0]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    8a5e:	68b9      	ldr	r1, [r7, #8]
    8a60:	68fb      	ldr	r3, [r7, #12]
    8a62:	2202      	movs	r2, #2
    8a64:	0018      	movs	r0, r3
    8a66:	4b18      	ldr	r3, [pc, #96]	; (8ac8 <usb_find_cfg_desc+0x78>)
    8a68:	4798      	blx	r3
    8a6a:	0003      	movs	r3, r0
    8a6c:	60fb      	str	r3, [r7, #12]
	if (!desc) {
    8a6e:	68fb      	ldr	r3, [r7, #12]
    8a70:	2b00      	cmp	r3, #0
    8a72:	d11e      	bne.n	8ab2 <usb_find_cfg_desc+0x62>
		return NULL;
    8a74:	2300      	movs	r3, #0
    8a76:	e023      	b.n	8ac0 <usb_find_cfg_desc+0x70>
	}
	while (desc < eof) {
		_desc_len_check();
    8a78:	68fb      	ldr	r3, [r7, #12]
    8a7a:	0018      	movs	r0, r3
    8a7c:	4b13      	ldr	r3, [pc, #76]	; (8acc <usb_find_cfg_desc+0x7c>)
    8a7e:	4798      	blx	r3
    8a80:	0003      	movs	r3, r0
    8a82:	2b01      	cmp	r3, #1
    8a84:	d801      	bhi.n	8a8a <usb_find_cfg_desc+0x3a>
    8a86:	2300      	movs	r3, #0
    8a88:	e01a      	b.n	8ac0 <usb_find_cfg_desc+0x70>
		if (desc[1] != USB_DT_CONFIG) {
    8a8a:	68fb      	ldr	r3, [r7, #12]
    8a8c:	3301      	adds	r3, #1
    8a8e:	781b      	ldrb	r3, [r3, #0]
    8a90:	2b02      	cmp	r3, #2
    8a92:	d113      	bne.n	8abc <usb_find_cfg_desc+0x6c>
			break;
		}
		if (desc[5] == cfg_value) {
    8a94:	68fb      	ldr	r3, [r7, #12]
    8a96:	3305      	adds	r3, #5
    8a98:	781b      	ldrb	r3, [r3, #0]
    8a9a:	1dfa      	adds	r2, r7, #7
    8a9c:	7812      	ldrb	r2, [r2, #0]
    8a9e:	429a      	cmp	r2, r3
    8aa0:	d101      	bne.n	8aa6 <usb_find_cfg_desc+0x56>
			return desc;
    8aa2:	68fb      	ldr	r3, [r7, #12]
    8aa4:	e00c      	b.n	8ac0 <usb_find_cfg_desc+0x70>
		}
		desc = usb_cfg_desc_next(desc);
    8aa6:	68fb      	ldr	r3, [r7, #12]
    8aa8:	0018      	movs	r0, r3
    8aaa:	4b09      	ldr	r3, [pc, #36]	; (8ad0 <usb_find_cfg_desc+0x80>)
    8aac:	4798      	blx	r3
    8aae:	0003      	movs	r3, r0
    8ab0:	60fb      	str	r3, [r7, #12]
	while (desc < eof) {
    8ab2:	68fa      	ldr	r2, [r7, #12]
    8ab4:	68bb      	ldr	r3, [r7, #8]
    8ab6:	429a      	cmp	r2, r3
    8ab8:	d3de      	bcc.n	8a78 <usb_find_cfg_desc+0x28>
    8aba:	e000      	b.n	8abe <usb_find_cfg_desc+0x6e>
			break;
    8abc:	46c0      	nop			; (mov r8, r8)
	}
	return NULL;
    8abe:	2300      	movs	r3, #0
}
    8ac0:	0018      	movs	r0, r3
    8ac2:	46bd      	mov	sp, r7
    8ac4:	b004      	add	sp, #16
    8ac6:	bd80      	pop	{r7, pc}
    8ac8:	00008981 	.word	0x00008981
    8acc:	000088ef 	.word	0x000088ef
    8ad0:	0000895d 	.word	0x0000895d

00008ad4 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    8ad4:	b580      	push	{r7, lr}
    8ad6:	b086      	sub	sp, #24
    8ad8:	af00      	add	r7, sp, #0
    8ada:	60f8      	str	r0, [r7, #12]
    8adc:	60b9      	str	r1, [r7, #8]
    8ade:	1dfb      	adds	r3, r7, #7
    8ae0:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    8ae2:	2317      	movs	r3, #23
    8ae4:	18fb      	adds	r3, r7, r3
    8ae6:	2200      	movs	r2, #0
    8ae8:	701a      	strb	r2, [r3, #0]
    8aea:	e02c      	b.n	8b46 <usb_find_str_desc+0x72>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    8aec:	68b9      	ldr	r1, [r7, #8]
    8aee:	68fb      	ldr	r3, [r7, #12]
    8af0:	2203      	movs	r2, #3
    8af2:	0018      	movs	r0, r3
    8af4:	4b18      	ldr	r3, [pc, #96]	; (8b58 <usb_find_str_desc+0x84>)
    8af6:	4798      	blx	r3
    8af8:	0003      	movs	r3, r0
    8afa:	60fb      	str	r3, [r7, #12]
		if (desc) {
    8afc:	68fb      	ldr	r3, [r7, #12]
    8afe:	2b00      	cmp	r3, #0
    8b00:	d01f      	beq.n	8b42 <usb_find_str_desc+0x6e>
			_desc_len_check();
    8b02:	68fb      	ldr	r3, [r7, #12]
    8b04:	0018      	movs	r0, r3
    8b06:	4b15      	ldr	r3, [pc, #84]	; (8b5c <usb_find_str_desc+0x88>)
    8b08:	4798      	blx	r3
    8b0a:	0003      	movs	r3, r0
    8b0c:	2b01      	cmp	r3, #1
    8b0e:	d801      	bhi.n	8b14 <usb_find_str_desc+0x40>
    8b10:	2300      	movs	r3, #0
    8b12:	e01d      	b.n	8b50 <usb_find_str_desc+0x7c>
			if (i == str_index) {
    8b14:	2317      	movs	r3, #23
    8b16:	18fa      	adds	r2, r7, r3
    8b18:	1dfb      	adds	r3, r7, #7
    8b1a:	7812      	ldrb	r2, [r2, #0]
    8b1c:	781b      	ldrb	r3, [r3, #0]
    8b1e:	429a      	cmp	r2, r3
    8b20:	d101      	bne.n	8b26 <usb_find_str_desc+0x52>
				return desc;
    8b22:	68fb      	ldr	r3, [r7, #12]
    8b24:	e014      	b.n	8b50 <usb_find_str_desc+0x7c>
			}
			i++;
    8b26:	2317      	movs	r3, #23
    8b28:	18fb      	adds	r3, r7, r3
    8b2a:	781a      	ldrb	r2, [r3, #0]
    8b2c:	2317      	movs	r3, #23
    8b2e:	18fb      	adds	r3, r7, r3
    8b30:	3201      	adds	r2, #1
    8b32:	701a      	strb	r2, [r3, #0]
			desc = usb_desc_next(desc);
    8b34:	68fb      	ldr	r3, [r7, #12]
    8b36:	0018      	movs	r0, r3
    8b38:	4b09      	ldr	r3, [pc, #36]	; (8b60 <usb_find_str_desc+0x8c>)
    8b3a:	4798      	blx	r3
    8b3c:	0003      	movs	r3, r0
    8b3e:	60fb      	str	r3, [r7, #12]
    8b40:	e001      	b.n	8b46 <usb_find_str_desc+0x72>
		} else {
			return NULL;
    8b42:	2300      	movs	r3, #0
    8b44:	e004      	b.n	8b50 <usb_find_str_desc+0x7c>
	for (i = 0; desc < eof;) {
    8b46:	68fa      	ldr	r2, [r7, #12]
    8b48:	68bb      	ldr	r3, [r7, #8]
    8b4a:	429a      	cmp	r2, r3
    8b4c:	d3ce      	bcc.n	8aec <usb_find_str_desc+0x18>
		}
	}
	return NULL;
    8b4e:	2300      	movs	r3, #0
}
    8b50:	0018      	movs	r0, r3
    8b52:	46bd      	mov	sp, r7
    8b54:	b006      	add	sp, #24
    8b56:	bd80      	pop	{r7, pc}
    8b58:	00008981 	.word	0x00008981
    8b5c:	000088ef 	.word	0x000088ef
    8b60:	00008919 	.word	0x00008919

00008b64 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    8b64:	b580      	push	{r7, lr}
    8b66:	b084      	sub	sp, #16
    8b68:	af00      	add	r7, sp, #0
    8b6a:	6078      	str	r0, [r7, #4]
    8b6c:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    8b6e:	687b      	ldr	r3, [r7, #4]
    8b70:	681b      	ldr	r3, [r3, #0]
    8b72:	60fb      	str	r3, [r7, #12]
    8b74:	e008      	b.n	8b88 <is_list_element+0x24>
		if (it == element) {
    8b76:	68fa      	ldr	r2, [r7, #12]
    8b78:	683b      	ldr	r3, [r7, #0]
    8b7a:	429a      	cmp	r2, r3
    8b7c:	d101      	bne.n	8b82 <is_list_element+0x1e>
			return true;
    8b7e:	2301      	movs	r3, #1
    8b80:	e006      	b.n	8b90 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    8b82:	68fb      	ldr	r3, [r7, #12]
    8b84:	681b      	ldr	r3, [r3, #0]
    8b86:	60fb      	str	r3, [r7, #12]
    8b88:	68fb      	ldr	r3, [r7, #12]
    8b8a:	2b00      	cmp	r3, #0
    8b8c:	d1f3      	bne.n	8b76 <is_list_element+0x12>
		}
	}

	return false;
    8b8e:	2300      	movs	r3, #0
}
    8b90:	0018      	movs	r0, r3
    8b92:	46bd      	mov	sp, r7
    8b94:	b004      	add	sp, #16
    8b96:	bd80      	pop	{r7, pc}

00008b98 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    8b98:	b580      	push	{r7, lr}
    8b9a:	b084      	sub	sp, #16
    8b9c:	af00      	add	r7, sp, #0
    8b9e:	6078      	str	r0, [r7, #4]
    8ba0:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    8ba2:	687b      	ldr	r3, [r7, #4]
    8ba4:	681b      	ldr	r3, [r3, #0]
    8ba6:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    8ba8:	683a      	ldr	r2, [r7, #0]
    8baa:	687b      	ldr	r3, [r7, #4]
    8bac:	0011      	movs	r1, r2
    8bae:	0018      	movs	r0, r3
    8bb0:	4b16      	ldr	r3, [pc, #88]	; (8c0c <list_insert_at_end+0x74>)
    8bb2:	4798      	blx	r3
    8bb4:	0003      	movs	r3, r0
    8bb6:	1e5a      	subs	r2, r3, #1
    8bb8:	4193      	sbcs	r3, r2
    8bba:	b2db      	uxtb	r3, r3
    8bbc:	2201      	movs	r2, #1
    8bbe:	4053      	eors	r3, r2
    8bc0:	b2db      	uxtb	r3, r3
    8bc2:	1c1a      	adds	r2, r3, #0
    8bc4:	2301      	movs	r3, #1
    8bc6:	4013      	ands	r3, r2
    8bc8:	b2db      	uxtb	r3, r3
    8bca:	4911      	ldr	r1, [pc, #68]	; (8c10 <list_insert_at_end+0x78>)
    8bcc:	224f      	movs	r2, #79	; 0x4f
    8bce:	0018      	movs	r0, r3
    8bd0:	4b10      	ldr	r3, [pc, #64]	; (8c14 <list_insert_at_end+0x7c>)
    8bd2:	4798      	blx	r3

	if (!list->head) {
    8bd4:	687b      	ldr	r3, [r7, #4]
    8bd6:	681b      	ldr	r3, [r3, #0]
    8bd8:	2b00      	cmp	r3, #0
    8bda:	d109      	bne.n	8bf0 <list_insert_at_end+0x58>
		list->head                             = (struct list_element *)element;
    8bdc:	687b      	ldr	r3, [r7, #4]
    8bde:	683a      	ldr	r2, [r7, #0]
    8be0:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    8be2:	683b      	ldr	r3, [r7, #0]
    8be4:	2200      	movs	r2, #0
    8be6:	601a      	str	r2, [r3, #0]
		return;
    8be8:	e00c      	b.n	8c04 <list_insert_at_end+0x6c>
	}

	while (it->next) {
		it = it->next;
    8bea:	68fb      	ldr	r3, [r7, #12]
    8bec:	681b      	ldr	r3, [r3, #0]
    8bee:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    8bf0:	68fb      	ldr	r3, [r7, #12]
    8bf2:	681b      	ldr	r3, [r3, #0]
    8bf4:	2b00      	cmp	r3, #0
    8bf6:	d1f8      	bne.n	8bea <list_insert_at_end+0x52>
	}
	it->next                               = (struct list_element *)element;
    8bf8:	68fb      	ldr	r3, [r7, #12]
    8bfa:	683a      	ldr	r2, [r7, #0]
    8bfc:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    8bfe:	683b      	ldr	r3, [r7, #0]
    8c00:	2200      	movs	r2, #0
    8c02:	601a      	str	r2, [r3, #0]
}
    8c04:	46bd      	mov	sp, r7
    8c06:	b004      	add	sp, #16
    8c08:	bd80      	pop	{r7, pc}
    8c0a:	46c0      	nop			; (mov r8, r8)
    8c0c:	00008b65 	.word	0x00008b65
    8c10:	00010e6c 	.word	0x00010e6c
    8c14:	00002ae1 	.word	0x00002ae1

00008c18 <__aeabi_atexit>:
    8c18:	000b      	movs	r3, r1
    8c1a:	b510      	push	{r4, lr}
    8c1c:	0001      	movs	r1, r0
    8c1e:	0018      	movs	r0, r3
    8c20:	f002 fd42 	bl	b6a8 <__cxa_atexit>
    8c24:	bd10      	pop	{r4, pc}
    8c26:	46c0      	nop			; (mov r8, r8)

00008c28 <floorf>:
    8c28:	b5f0      	push	{r4, r5, r6, r7, lr}
    8c2a:	46c6      	mov	lr, r8
    8c2c:	0043      	lsls	r3, r0, #1
    8c2e:	085f      	lsrs	r7, r3, #1
    8c30:	0e1b      	lsrs	r3, r3, #24
    8c32:	3b7f      	subs	r3, #127	; 0x7f
    8c34:	b500      	push	{lr}
    8c36:	1c05      	adds	r5, r0, #0
    8c38:	001c      	movs	r4, r3
    8c3a:	2b16      	cmp	r3, #22
    8c3c:	dc18      	bgt.n	8c70 <floorf+0x48>
    8c3e:	4680      	mov	r8, r0
    8c40:	2b00      	cmp	r3, #0
    8c42:	db1e      	blt.n	8c82 <floorf+0x5a>
    8c44:	4f1b      	ldr	r7, [pc, #108]	; (8cb4 <floorf+0x8c>)
    8c46:	1c06      	adds	r6, r0, #0
    8c48:	411f      	asrs	r7, r3
    8c4a:	4207      	tst	r7, r0
    8c4c:	d00c      	beq.n	8c68 <floorf+0x40>
    8c4e:	491a      	ldr	r1, [pc, #104]	; (8cb8 <floorf+0x90>)
    8c50:	f000 fb04 	bl	925c <__aeabi_fadd>
    8c54:	2100      	movs	r1, #0
    8c56:	f000 f9f5 	bl	9044 <__aeabi_fcmpgt>
    8c5a:	2800      	cmp	r0, #0
    8c5c:	d004      	beq.n	8c68 <floorf+0x40>
    8c5e:	2d00      	cmp	r5, #0
    8c60:	db1d      	blt.n	8c9e <floorf+0x76>
    8c62:	4643      	mov	r3, r8
    8c64:	43bb      	bics	r3, r7
    8c66:	001e      	movs	r6, r3
    8c68:	1c30      	adds	r0, r6, #0
    8c6a:	bc04      	pop	{r2}
    8c6c:	4690      	mov	r8, r2
    8c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8c70:	4b12      	ldr	r3, [pc, #72]	; (8cbc <floorf+0x94>)
    8c72:	1c06      	adds	r6, r0, #0
    8c74:	429f      	cmp	r7, r3
    8c76:	d9f7      	bls.n	8c68 <floorf+0x40>
    8c78:	1c01      	adds	r1, r0, #0
    8c7a:	f000 faef 	bl	925c <__aeabi_fadd>
    8c7e:	1c06      	adds	r6, r0, #0
    8c80:	e7f2      	b.n	8c68 <floorf+0x40>
    8c82:	490d      	ldr	r1, [pc, #52]	; (8cb8 <floorf+0x90>)
    8c84:	f000 faea 	bl	925c <__aeabi_fadd>
    8c88:	2100      	movs	r1, #0
    8c8a:	f000 f9db 	bl	9044 <__aeabi_fcmpgt>
    8c8e:	2800      	cmp	r0, #0
    8c90:	d003      	beq.n	8c9a <floorf+0x72>
    8c92:	2d00      	cmp	r5, #0
    8c94:	db09      	blt.n	8caa <floorf+0x82>
    8c96:	2600      	movs	r6, #0
    8c98:	e7e6      	b.n	8c68 <floorf+0x40>
    8c9a:	1c2e      	adds	r6, r5, #0
    8c9c:	e7e4      	b.n	8c68 <floorf+0x40>
    8c9e:	2380      	movs	r3, #128	; 0x80
    8ca0:	041b      	lsls	r3, r3, #16
    8ca2:	4123      	asrs	r3, r4
    8ca4:	4698      	mov	r8, r3
    8ca6:	44a8      	add	r8, r5
    8ca8:	e7db      	b.n	8c62 <floorf+0x3a>
    8caa:	2f00      	cmp	r7, #0
    8cac:	d0f5      	beq.n	8c9a <floorf+0x72>
    8cae:	4e04      	ldr	r6, [pc, #16]	; (8cc0 <floorf+0x98>)
    8cb0:	e7da      	b.n	8c68 <floorf+0x40>
    8cb2:	46c0      	nop			; (mov r8, r8)
    8cb4:	007fffff 	.word	0x007fffff
    8cb8:	7149f2ca 	.word	0x7149f2ca
    8cbc:	7f7fffff 	.word	0x7f7fffff
    8cc0:	bf800000 	.word	0xbf800000

00008cc4 <roundf>:
    8cc4:	0043      	lsls	r3, r0, #1
    8cc6:	0e1b      	lsrs	r3, r3, #24
    8cc8:	3b7f      	subs	r3, #127	; 0x7f
    8cca:	b510      	push	{r4, lr}
    8ccc:	0002      	movs	r2, r0
    8cce:	2b16      	cmp	r3, #22
    8cd0:	dc0b      	bgt.n	8cea <roundf+0x26>
    8cd2:	2b00      	cmp	r3, #0
    8cd4:	db0f      	blt.n	8cf6 <roundf+0x32>
    8cd6:	490c      	ldr	r1, [pc, #48]	; (8d08 <roundf+0x44>)
    8cd8:	4119      	asrs	r1, r3
    8cda:	4201      	tst	r1, r0
    8cdc:	d004      	beq.n	8ce8 <roundf+0x24>
    8cde:	2080      	movs	r0, #128	; 0x80
    8ce0:	03c0      	lsls	r0, r0, #15
    8ce2:	4118      	asrs	r0, r3
    8ce4:	1880      	adds	r0, r0, r2
    8ce6:	4388      	bics	r0, r1
    8ce8:	bd10      	pop	{r4, pc}
    8cea:	2b80      	cmp	r3, #128	; 0x80
    8cec:	d1fc      	bne.n	8ce8 <roundf+0x24>
    8cee:	1c01      	adds	r1, r0, #0
    8cf0:	f000 fab4 	bl	925c <__aeabi_fadd>
    8cf4:	e7f8      	b.n	8ce8 <roundf+0x24>
    8cf6:	0fc0      	lsrs	r0, r0, #31
    8cf8:	07c0      	lsls	r0, r0, #31
    8cfa:	3301      	adds	r3, #1
    8cfc:	d1f4      	bne.n	8ce8 <roundf+0x24>
    8cfe:	23fe      	movs	r3, #254	; 0xfe
    8d00:	059b      	lsls	r3, r3, #22
    8d02:	4318      	orrs	r0, r3
    8d04:	e7f0      	b.n	8ce8 <roundf+0x24>
    8d06:	46c0      	nop			; (mov r8, r8)
    8d08:	007fffff 	.word	0x007fffff

00008d0c <__udivsi3>:
    8d0c:	2200      	movs	r2, #0
    8d0e:	0843      	lsrs	r3, r0, #1
    8d10:	428b      	cmp	r3, r1
    8d12:	d374      	bcc.n	8dfe <__udivsi3+0xf2>
    8d14:	0903      	lsrs	r3, r0, #4
    8d16:	428b      	cmp	r3, r1
    8d18:	d35f      	bcc.n	8dda <__udivsi3+0xce>
    8d1a:	0a03      	lsrs	r3, r0, #8
    8d1c:	428b      	cmp	r3, r1
    8d1e:	d344      	bcc.n	8daa <__udivsi3+0x9e>
    8d20:	0b03      	lsrs	r3, r0, #12
    8d22:	428b      	cmp	r3, r1
    8d24:	d328      	bcc.n	8d78 <__udivsi3+0x6c>
    8d26:	0c03      	lsrs	r3, r0, #16
    8d28:	428b      	cmp	r3, r1
    8d2a:	d30d      	bcc.n	8d48 <__udivsi3+0x3c>
    8d2c:	22ff      	movs	r2, #255	; 0xff
    8d2e:	0209      	lsls	r1, r1, #8
    8d30:	ba12      	rev	r2, r2
    8d32:	0c03      	lsrs	r3, r0, #16
    8d34:	428b      	cmp	r3, r1
    8d36:	d302      	bcc.n	8d3e <__udivsi3+0x32>
    8d38:	1212      	asrs	r2, r2, #8
    8d3a:	0209      	lsls	r1, r1, #8
    8d3c:	d065      	beq.n	8e0a <__udivsi3+0xfe>
    8d3e:	0b03      	lsrs	r3, r0, #12
    8d40:	428b      	cmp	r3, r1
    8d42:	d319      	bcc.n	8d78 <__udivsi3+0x6c>
    8d44:	e000      	b.n	8d48 <__udivsi3+0x3c>
    8d46:	0a09      	lsrs	r1, r1, #8
    8d48:	0bc3      	lsrs	r3, r0, #15
    8d4a:	428b      	cmp	r3, r1
    8d4c:	d301      	bcc.n	8d52 <__udivsi3+0x46>
    8d4e:	03cb      	lsls	r3, r1, #15
    8d50:	1ac0      	subs	r0, r0, r3
    8d52:	4152      	adcs	r2, r2
    8d54:	0b83      	lsrs	r3, r0, #14
    8d56:	428b      	cmp	r3, r1
    8d58:	d301      	bcc.n	8d5e <__udivsi3+0x52>
    8d5a:	038b      	lsls	r3, r1, #14
    8d5c:	1ac0      	subs	r0, r0, r3
    8d5e:	4152      	adcs	r2, r2
    8d60:	0b43      	lsrs	r3, r0, #13
    8d62:	428b      	cmp	r3, r1
    8d64:	d301      	bcc.n	8d6a <__udivsi3+0x5e>
    8d66:	034b      	lsls	r3, r1, #13
    8d68:	1ac0      	subs	r0, r0, r3
    8d6a:	4152      	adcs	r2, r2
    8d6c:	0b03      	lsrs	r3, r0, #12
    8d6e:	428b      	cmp	r3, r1
    8d70:	d301      	bcc.n	8d76 <__udivsi3+0x6a>
    8d72:	030b      	lsls	r3, r1, #12
    8d74:	1ac0      	subs	r0, r0, r3
    8d76:	4152      	adcs	r2, r2
    8d78:	0ac3      	lsrs	r3, r0, #11
    8d7a:	428b      	cmp	r3, r1
    8d7c:	d301      	bcc.n	8d82 <__udivsi3+0x76>
    8d7e:	02cb      	lsls	r3, r1, #11
    8d80:	1ac0      	subs	r0, r0, r3
    8d82:	4152      	adcs	r2, r2
    8d84:	0a83      	lsrs	r3, r0, #10
    8d86:	428b      	cmp	r3, r1
    8d88:	d301      	bcc.n	8d8e <__udivsi3+0x82>
    8d8a:	028b      	lsls	r3, r1, #10
    8d8c:	1ac0      	subs	r0, r0, r3
    8d8e:	4152      	adcs	r2, r2
    8d90:	0a43      	lsrs	r3, r0, #9
    8d92:	428b      	cmp	r3, r1
    8d94:	d301      	bcc.n	8d9a <__udivsi3+0x8e>
    8d96:	024b      	lsls	r3, r1, #9
    8d98:	1ac0      	subs	r0, r0, r3
    8d9a:	4152      	adcs	r2, r2
    8d9c:	0a03      	lsrs	r3, r0, #8
    8d9e:	428b      	cmp	r3, r1
    8da0:	d301      	bcc.n	8da6 <__udivsi3+0x9a>
    8da2:	020b      	lsls	r3, r1, #8
    8da4:	1ac0      	subs	r0, r0, r3
    8da6:	4152      	adcs	r2, r2
    8da8:	d2cd      	bcs.n	8d46 <__udivsi3+0x3a>
    8daa:	09c3      	lsrs	r3, r0, #7
    8dac:	428b      	cmp	r3, r1
    8dae:	d301      	bcc.n	8db4 <__udivsi3+0xa8>
    8db0:	01cb      	lsls	r3, r1, #7
    8db2:	1ac0      	subs	r0, r0, r3
    8db4:	4152      	adcs	r2, r2
    8db6:	0983      	lsrs	r3, r0, #6
    8db8:	428b      	cmp	r3, r1
    8dba:	d301      	bcc.n	8dc0 <__udivsi3+0xb4>
    8dbc:	018b      	lsls	r3, r1, #6
    8dbe:	1ac0      	subs	r0, r0, r3
    8dc0:	4152      	adcs	r2, r2
    8dc2:	0943      	lsrs	r3, r0, #5
    8dc4:	428b      	cmp	r3, r1
    8dc6:	d301      	bcc.n	8dcc <__udivsi3+0xc0>
    8dc8:	014b      	lsls	r3, r1, #5
    8dca:	1ac0      	subs	r0, r0, r3
    8dcc:	4152      	adcs	r2, r2
    8dce:	0903      	lsrs	r3, r0, #4
    8dd0:	428b      	cmp	r3, r1
    8dd2:	d301      	bcc.n	8dd8 <__udivsi3+0xcc>
    8dd4:	010b      	lsls	r3, r1, #4
    8dd6:	1ac0      	subs	r0, r0, r3
    8dd8:	4152      	adcs	r2, r2
    8dda:	08c3      	lsrs	r3, r0, #3
    8ddc:	428b      	cmp	r3, r1
    8dde:	d301      	bcc.n	8de4 <__udivsi3+0xd8>
    8de0:	00cb      	lsls	r3, r1, #3
    8de2:	1ac0      	subs	r0, r0, r3
    8de4:	4152      	adcs	r2, r2
    8de6:	0883      	lsrs	r3, r0, #2
    8de8:	428b      	cmp	r3, r1
    8dea:	d301      	bcc.n	8df0 <__udivsi3+0xe4>
    8dec:	008b      	lsls	r3, r1, #2
    8dee:	1ac0      	subs	r0, r0, r3
    8df0:	4152      	adcs	r2, r2
    8df2:	0843      	lsrs	r3, r0, #1
    8df4:	428b      	cmp	r3, r1
    8df6:	d301      	bcc.n	8dfc <__udivsi3+0xf0>
    8df8:	004b      	lsls	r3, r1, #1
    8dfa:	1ac0      	subs	r0, r0, r3
    8dfc:	4152      	adcs	r2, r2
    8dfe:	1a41      	subs	r1, r0, r1
    8e00:	d200      	bcs.n	8e04 <__udivsi3+0xf8>
    8e02:	4601      	mov	r1, r0
    8e04:	4152      	adcs	r2, r2
    8e06:	4610      	mov	r0, r2
    8e08:	4770      	bx	lr
    8e0a:	e7ff      	b.n	8e0c <__udivsi3+0x100>
    8e0c:	b501      	push	{r0, lr}
    8e0e:	2000      	movs	r0, #0
    8e10:	f000 f8f0 	bl	8ff4 <__aeabi_idiv0>
    8e14:	bd02      	pop	{r1, pc}
    8e16:	46c0      	nop			; (mov r8, r8)

00008e18 <__aeabi_uidivmod>:
    8e18:	2900      	cmp	r1, #0
    8e1a:	d0f7      	beq.n	8e0c <__udivsi3+0x100>
    8e1c:	e776      	b.n	8d0c <__udivsi3>
    8e1e:	4770      	bx	lr

00008e20 <__divsi3>:
    8e20:	4603      	mov	r3, r0
    8e22:	430b      	orrs	r3, r1
    8e24:	d47f      	bmi.n	8f26 <__divsi3+0x106>
    8e26:	2200      	movs	r2, #0
    8e28:	0843      	lsrs	r3, r0, #1
    8e2a:	428b      	cmp	r3, r1
    8e2c:	d374      	bcc.n	8f18 <__divsi3+0xf8>
    8e2e:	0903      	lsrs	r3, r0, #4
    8e30:	428b      	cmp	r3, r1
    8e32:	d35f      	bcc.n	8ef4 <__divsi3+0xd4>
    8e34:	0a03      	lsrs	r3, r0, #8
    8e36:	428b      	cmp	r3, r1
    8e38:	d344      	bcc.n	8ec4 <__divsi3+0xa4>
    8e3a:	0b03      	lsrs	r3, r0, #12
    8e3c:	428b      	cmp	r3, r1
    8e3e:	d328      	bcc.n	8e92 <__divsi3+0x72>
    8e40:	0c03      	lsrs	r3, r0, #16
    8e42:	428b      	cmp	r3, r1
    8e44:	d30d      	bcc.n	8e62 <__divsi3+0x42>
    8e46:	22ff      	movs	r2, #255	; 0xff
    8e48:	0209      	lsls	r1, r1, #8
    8e4a:	ba12      	rev	r2, r2
    8e4c:	0c03      	lsrs	r3, r0, #16
    8e4e:	428b      	cmp	r3, r1
    8e50:	d302      	bcc.n	8e58 <__divsi3+0x38>
    8e52:	1212      	asrs	r2, r2, #8
    8e54:	0209      	lsls	r1, r1, #8
    8e56:	d065      	beq.n	8f24 <__divsi3+0x104>
    8e58:	0b03      	lsrs	r3, r0, #12
    8e5a:	428b      	cmp	r3, r1
    8e5c:	d319      	bcc.n	8e92 <__divsi3+0x72>
    8e5e:	e000      	b.n	8e62 <__divsi3+0x42>
    8e60:	0a09      	lsrs	r1, r1, #8
    8e62:	0bc3      	lsrs	r3, r0, #15
    8e64:	428b      	cmp	r3, r1
    8e66:	d301      	bcc.n	8e6c <__divsi3+0x4c>
    8e68:	03cb      	lsls	r3, r1, #15
    8e6a:	1ac0      	subs	r0, r0, r3
    8e6c:	4152      	adcs	r2, r2
    8e6e:	0b83      	lsrs	r3, r0, #14
    8e70:	428b      	cmp	r3, r1
    8e72:	d301      	bcc.n	8e78 <__divsi3+0x58>
    8e74:	038b      	lsls	r3, r1, #14
    8e76:	1ac0      	subs	r0, r0, r3
    8e78:	4152      	adcs	r2, r2
    8e7a:	0b43      	lsrs	r3, r0, #13
    8e7c:	428b      	cmp	r3, r1
    8e7e:	d301      	bcc.n	8e84 <__divsi3+0x64>
    8e80:	034b      	lsls	r3, r1, #13
    8e82:	1ac0      	subs	r0, r0, r3
    8e84:	4152      	adcs	r2, r2
    8e86:	0b03      	lsrs	r3, r0, #12
    8e88:	428b      	cmp	r3, r1
    8e8a:	d301      	bcc.n	8e90 <__divsi3+0x70>
    8e8c:	030b      	lsls	r3, r1, #12
    8e8e:	1ac0      	subs	r0, r0, r3
    8e90:	4152      	adcs	r2, r2
    8e92:	0ac3      	lsrs	r3, r0, #11
    8e94:	428b      	cmp	r3, r1
    8e96:	d301      	bcc.n	8e9c <__divsi3+0x7c>
    8e98:	02cb      	lsls	r3, r1, #11
    8e9a:	1ac0      	subs	r0, r0, r3
    8e9c:	4152      	adcs	r2, r2
    8e9e:	0a83      	lsrs	r3, r0, #10
    8ea0:	428b      	cmp	r3, r1
    8ea2:	d301      	bcc.n	8ea8 <__divsi3+0x88>
    8ea4:	028b      	lsls	r3, r1, #10
    8ea6:	1ac0      	subs	r0, r0, r3
    8ea8:	4152      	adcs	r2, r2
    8eaa:	0a43      	lsrs	r3, r0, #9
    8eac:	428b      	cmp	r3, r1
    8eae:	d301      	bcc.n	8eb4 <__divsi3+0x94>
    8eb0:	024b      	lsls	r3, r1, #9
    8eb2:	1ac0      	subs	r0, r0, r3
    8eb4:	4152      	adcs	r2, r2
    8eb6:	0a03      	lsrs	r3, r0, #8
    8eb8:	428b      	cmp	r3, r1
    8eba:	d301      	bcc.n	8ec0 <__divsi3+0xa0>
    8ebc:	020b      	lsls	r3, r1, #8
    8ebe:	1ac0      	subs	r0, r0, r3
    8ec0:	4152      	adcs	r2, r2
    8ec2:	d2cd      	bcs.n	8e60 <__divsi3+0x40>
    8ec4:	09c3      	lsrs	r3, r0, #7
    8ec6:	428b      	cmp	r3, r1
    8ec8:	d301      	bcc.n	8ece <__divsi3+0xae>
    8eca:	01cb      	lsls	r3, r1, #7
    8ecc:	1ac0      	subs	r0, r0, r3
    8ece:	4152      	adcs	r2, r2
    8ed0:	0983      	lsrs	r3, r0, #6
    8ed2:	428b      	cmp	r3, r1
    8ed4:	d301      	bcc.n	8eda <__divsi3+0xba>
    8ed6:	018b      	lsls	r3, r1, #6
    8ed8:	1ac0      	subs	r0, r0, r3
    8eda:	4152      	adcs	r2, r2
    8edc:	0943      	lsrs	r3, r0, #5
    8ede:	428b      	cmp	r3, r1
    8ee0:	d301      	bcc.n	8ee6 <__divsi3+0xc6>
    8ee2:	014b      	lsls	r3, r1, #5
    8ee4:	1ac0      	subs	r0, r0, r3
    8ee6:	4152      	adcs	r2, r2
    8ee8:	0903      	lsrs	r3, r0, #4
    8eea:	428b      	cmp	r3, r1
    8eec:	d301      	bcc.n	8ef2 <__divsi3+0xd2>
    8eee:	010b      	lsls	r3, r1, #4
    8ef0:	1ac0      	subs	r0, r0, r3
    8ef2:	4152      	adcs	r2, r2
    8ef4:	08c3      	lsrs	r3, r0, #3
    8ef6:	428b      	cmp	r3, r1
    8ef8:	d301      	bcc.n	8efe <__divsi3+0xde>
    8efa:	00cb      	lsls	r3, r1, #3
    8efc:	1ac0      	subs	r0, r0, r3
    8efe:	4152      	adcs	r2, r2
    8f00:	0883      	lsrs	r3, r0, #2
    8f02:	428b      	cmp	r3, r1
    8f04:	d301      	bcc.n	8f0a <__divsi3+0xea>
    8f06:	008b      	lsls	r3, r1, #2
    8f08:	1ac0      	subs	r0, r0, r3
    8f0a:	4152      	adcs	r2, r2
    8f0c:	0843      	lsrs	r3, r0, #1
    8f0e:	428b      	cmp	r3, r1
    8f10:	d301      	bcc.n	8f16 <__divsi3+0xf6>
    8f12:	004b      	lsls	r3, r1, #1
    8f14:	1ac0      	subs	r0, r0, r3
    8f16:	4152      	adcs	r2, r2
    8f18:	1a41      	subs	r1, r0, r1
    8f1a:	d200      	bcs.n	8f1e <__divsi3+0xfe>
    8f1c:	4601      	mov	r1, r0
    8f1e:	4152      	adcs	r2, r2
    8f20:	4610      	mov	r0, r2
    8f22:	4770      	bx	lr
    8f24:	e05d      	b.n	8fe2 <__divsi3+0x1c2>
    8f26:	0fca      	lsrs	r2, r1, #31
    8f28:	d000      	beq.n	8f2c <__divsi3+0x10c>
    8f2a:	4249      	negs	r1, r1
    8f2c:	1003      	asrs	r3, r0, #32
    8f2e:	d300      	bcc.n	8f32 <__divsi3+0x112>
    8f30:	4240      	negs	r0, r0
    8f32:	4053      	eors	r3, r2
    8f34:	2200      	movs	r2, #0
    8f36:	469c      	mov	ip, r3
    8f38:	0903      	lsrs	r3, r0, #4
    8f3a:	428b      	cmp	r3, r1
    8f3c:	d32d      	bcc.n	8f9a <__divsi3+0x17a>
    8f3e:	0a03      	lsrs	r3, r0, #8
    8f40:	428b      	cmp	r3, r1
    8f42:	d312      	bcc.n	8f6a <__divsi3+0x14a>
    8f44:	22fc      	movs	r2, #252	; 0xfc
    8f46:	0189      	lsls	r1, r1, #6
    8f48:	ba12      	rev	r2, r2
    8f4a:	0a03      	lsrs	r3, r0, #8
    8f4c:	428b      	cmp	r3, r1
    8f4e:	d30c      	bcc.n	8f6a <__divsi3+0x14a>
    8f50:	0189      	lsls	r1, r1, #6
    8f52:	1192      	asrs	r2, r2, #6
    8f54:	428b      	cmp	r3, r1
    8f56:	d308      	bcc.n	8f6a <__divsi3+0x14a>
    8f58:	0189      	lsls	r1, r1, #6
    8f5a:	1192      	asrs	r2, r2, #6
    8f5c:	428b      	cmp	r3, r1
    8f5e:	d304      	bcc.n	8f6a <__divsi3+0x14a>
    8f60:	0189      	lsls	r1, r1, #6
    8f62:	d03a      	beq.n	8fda <__divsi3+0x1ba>
    8f64:	1192      	asrs	r2, r2, #6
    8f66:	e000      	b.n	8f6a <__divsi3+0x14a>
    8f68:	0989      	lsrs	r1, r1, #6
    8f6a:	09c3      	lsrs	r3, r0, #7
    8f6c:	428b      	cmp	r3, r1
    8f6e:	d301      	bcc.n	8f74 <__divsi3+0x154>
    8f70:	01cb      	lsls	r3, r1, #7
    8f72:	1ac0      	subs	r0, r0, r3
    8f74:	4152      	adcs	r2, r2
    8f76:	0983      	lsrs	r3, r0, #6
    8f78:	428b      	cmp	r3, r1
    8f7a:	d301      	bcc.n	8f80 <__divsi3+0x160>
    8f7c:	018b      	lsls	r3, r1, #6
    8f7e:	1ac0      	subs	r0, r0, r3
    8f80:	4152      	adcs	r2, r2
    8f82:	0943      	lsrs	r3, r0, #5
    8f84:	428b      	cmp	r3, r1
    8f86:	d301      	bcc.n	8f8c <__divsi3+0x16c>
    8f88:	014b      	lsls	r3, r1, #5
    8f8a:	1ac0      	subs	r0, r0, r3
    8f8c:	4152      	adcs	r2, r2
    8f8e:	0903      	lsrs	r3, r0, #4
    8f90:	428b      	cmp	r3, r1
    8f92:	d301      	bcc.n	8f98 <__divsi3+0x178>
    8f94:	010b      	lsls	r3, r1, #4
    8f96:	1ac0      	subs	r0, r0, r3
    8f98:	4152      	adcs	r2, r2
    8f9a:	08c3      	lsrs	r3, r0, #3
    8f9c:	428b      	cmp	r3, r1
    8f9e:	d301      	bcc.n	8fa4 <__divsi3+0x184>
    8fa0:	00cb      	lsls	r3, r1, #3
    8fa2:	1ac0      	subs	r0, r0, r3
    8fa4:	4152      	adcs	r2, r2
    8fa6:	0883      	lsrs	r3, r0, #2
    8fa8:	428b      	cmp	r3, r1
    8faa:	d301      	bcc.n	8fb0 <__divsi3+0x190>
    8fac:	008b      	lsls	r3, r1, #2
    8fae:	1ac0      	subs	r0, r0, r3
    8fb0:	4152      	adcs	r2, r2
    8fb2:	d2d9      	bcs.n	8f68 <__divsi3+0x148>
    8fb4:	0843      	lsrs	r3, r0, #1
    8fb6:	428b      	cmp	r3, r1
    8fb8:	d301      	bcc.n	8fbe <__divsi3+0x19e>
    8fba:	004b      	lsls	r3, r1, #1
    8fbc:	1ac0      	subs	r0, r0, r3
    8fbe:	4152      	adcs	r2, r2
    8fc0:	1a41      	subs	r1, r0, r1
    8fc2:	d200      	bcs.n	8fc6 <__divsi3+0x1a6>
    8fc4:	4601      	mov	r1, r0
    8fc6:	4663      	mov	r3, ip
    8fc8:	4152      	adcs	r2, r2
    8fca:	105b      	asrs	r3, r3, #1
    8fcc:	4610      	mov	r0, r2
    8fce:	d301      	bcc.n	8fd4 <__divsi3+0x1b4>
    8fd0:	4240      	negs	r0, r0
    8fd2:	2b00      	cmp	r3, #0
    8fd4:	d500      	bpl.n	8fd8 <__divsi3+0x1b8>
    8fd6:	4249      	negs	r1, r1
    8fd8:	4770      	bx	lr
    8fda:	4663      	mov	r3, ip
    8fdc:	105b      	asrs	r3, r3, #1
    8fde:	d300      	bcc.n	8fe2 <__divsi3+0x1c2>
    8fe0:	4240      	negs	r0, r0
    8fe2:	b501      	push	{r0, lr}
    8fe4:	2000      	movs	r0, #0
    8fe6:	f000 f805 	bl	8ff4 <__aeabi_idiv0>
    8fea:	bd02      	pop	{r1, pc}

00008fec <__aeabi_idivmod>:
    8fec:	2900      	cmp	r1, #0
    8fee:	d0f8      	beq.n	8fe2 <__divsi3+0x1c2>
    8ff0:	e716      	b.n	8e20 <__divsi3>
    8ff2:	4770      	bx	lr

00008ff4 <__aeabi_idiv0>:
    8ff4:	4770      	bx	lr
    8ff6:	46c0      	nop			; (mov r8, r8)

00008ff8 <__aeabi_cfrcmple>:
    8ff8:	4684      	mov	ip, r0
    8ffa:	1c08      	adds	r0, r1, #0
    8ffc:	4661      	mov	r1, ip
    8ffe:	e7ff      	b.n	9000 <__aeabi_cfcmpeq>

00009000 <__aeabi_cfcmpeq>:
    9000:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    9002:	f000 fc6b 	bl	98dc <__lesf2>
    9006:	2800      	cmp	r0, #0
    9008:	d401      	bmi.n	900e <__aeabi_cfcmpeq+0xe>
    900a:	2100      	movs	r1, #0
    900c:	42c8      	cmn	r0, r1
    900e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00009010 <__aeabi_fcmpeq>:
    9010:	b510      	push	{r4, lr}
    9012:	f000 fbfd 	bl	9810 <__eqsf2>
    9016:	4240      	negs	r0, r0
    9018:	3001      	adds	r0, #1
    901a:	bd10      	pop	{r4, pc}

0000901c <__aeabi_fcmplt>:
    901c:	b510      	push	{r4, lr}
    901e:	f000 fc5d 	bl	98dc <__lesf2>
    9022:	2800      	cmp	r0, #0
    9024:	db01      	blt.n	902a <__aeabi_fcmplt+0xe>
    9026:	2000      	movs	r0, #0
    9028:	bd10      	pop	{r4, pc}
    902a:	2001      	movs	r0, #1
    902c:	bd10      	pop	{r4, pc}
    902e:	46c0      	nop			; (mov r8, r8)

00009030 <__aeabi_fcmple>:
    9030:	b510      	push	{r4, lr}
    9032:	f000 fc53 	bl	98dc <__lesf2>
    9036:	2800      	cmp	r0, #0
    9038:	dd01      	ble.n	903e <__aeabi_fcmple+0xe>
    903a:	2000      	movs	r0, #0
    903c:	bd10      	pop	{r4, pc}
    903e:	2001      	movs	r0, #1
    9040:	bd10      	pop	{r4, pc}
    9042:	46c0      	nop			; (mov r8, r8)

00009044 <__aeabi_fcmpgt>:
    9044:	b510      	push	{r4, lr}
    9046:	f000 fc09 	bl	985c <__gesf2>
    904a:	2800      	cmp	r0, #0
    904c:	dc01      	bgt.n	9052 <__aeabi_fcmpgt+0xe>
    904e:	2000      	movs	r0, #0
    9050:	bd10      	pop	{r4, pc}
    9052:	2001      	movs	r0, #1
    9054:	bd10      	pop	{r4, pc}
    9056:	46c0      	nop			; (mov r8, r8)

00009058 <__aeabi_fcmpge>:
    9058:	b510      	push	{r4, lr}
    905a:	f000 fbff 	bl	985c <__gesf2>
    905e:	2800      	cmp	r0, #0
    9060:	da01      	bge.n	9066 <__aeabi_fcmpge+0xe>
    9062:	2000      	movs	r0, #0
    9064:	bd10      	pop	{r4, pc}
    9066:	2001      	movs	r0, #1
    9068:	bd10      	pop	{r4, pc}
    906a:	46c0      	nop			; (mov r8, r8)

0000906c <__aeabi_uldivmod>:
    906c:	2b00      	cmp	r3, #0
    906e:	d111      	bne.n	9094 <__aeabi_uldivmod+0x28>
    9070:	2a00      	cmp	r2, #0
    9072:	d10f      	bne.n	9094 <__aeabi_uldivmod+0x28>
    9074:	2900      	cmp	r1, #0
    9076:	d100      	bne.n	907a <__aeabi_uldivmod+0xe>
    9078:	2800      	cmp	r0, #0
    907a:	d002      	beq.n	9082 <__aeabi_uldivmod+0x16>
    907c:	2100      	movs	r1, #0
    907e:	43c9      	mvns	r1, r1
    9080:	1c08      	adds	r0, r1, #0
    9082:	b407      	push	{r0, r1, r2}
    9084:	4802      	ldr	r0, [pc, #8]	; (9090 <__aeabi_uldivmod+0x24>)
    9086:	a102      	add	r1, pc, #8	; (adr r1, 9090 <__aeabi_uldivmod+0x24>)
    9088:	1840      	adds	r0, r0, r1
    908a:	9002      	str	r0, [sp, #8]
    908c:	bd03      	pop	{r0, r1, pc}
    908e:	46c0      	nop			; (mov r8, r8)
    9090:	ffffff65 	.word	0xffffff65
    9094:	b403      	push	{r0, r1}
    9096:	4668      	mov	r0, sp
    9098:	b501      	push	{r0, lr}
    909a:	9802      	ldr	r0, [sp, #8]
    909c:	f000 f81e 	bl	90dc <__udivmoddi4>
    90a0:	9b01      	ldr	r3, [sp, #4]
    90a2:	469e      	mov	lr, r3
    90a4:	b002      	add	sp, #8
    90a6:	bc0c      	pop	{r2, r3}
    90a8:	4770      	bx	lr
    90aa:	46c0      	nop			; (mov r8, r8)

000090ac <__aeabi_f2uiz>:
    90ac:	219e      	movs	r1, #158	; 0x9e
    90ae:	b510      	push	{r4, lr}
    90b0:	05c9      	lsls	r1, r1, #23
    90b2:	1c04      	adds	r4, r0, #0
    90b4:	f7ff ffd0 	bl	9058 <__aeabi_fcmpge>
    90b8:	2800      	cmp	r0, #0
    90ba:	d103      	bne.n	90c4 <__aeabi_f2uiz+0x18>
    90bc:	1c20      	adds	r0, r4, #0
    90be:	f000 ff0b 	bl	9ed8 <__aeabi_f2iz>
    90c2:	bd10      	pop	{r4, pc}
    90c4:	219e      	movs	r1, #158	; 0x9e
    90c6:	1c20      	adds	r0, r4, #0
    90c8:	05c9      	lsls	r1, r1, #23
    90ca:	f000 fd69 	bl	9ba0 <__aeabi_fsub>
    90ce:	f000 ff03 	bl	9ed8 <__aeabi_f2iz>
    90d2:	2380      	movs	r3, #128	; 0x80
    90d4:	061b      	lsls	r3, r3, #24
    90d6:	469c      	mov	ip, r3
    90d8:	4460      	add	r0, ip
    90da:	e7f2      	b.n	90c2 <__aeabi_f2uiz+0x16>

000090dc <__udivmoddi4>:
    90dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    90de:	4657      	mov	r7, sl
    90e0:	464e      	mov	r6, r9
    90e2:	4645      	mov	r5, r8
    90e4:	46de      	mov	lr, fp
    90e6:	b5e0      	push	{r5, r6, r7, lr}
    90e8:	0004      	movs	r4, r0
    90ea:	b083      	sub	sp, #12
    90ec:	000d      	movs	r5, r1
    90ee:	4692      	mov	sl, r2
    90f0:	4699      	mov	r9, r3
    90f2:	428b      	cmp	r3, r1
    90f4:	d82f      	bhi.n	9156 <__udivmoddi4+0x7a>
    90f6:	d02c      	beq.n	9152 <__udivmoddi4+0x76>
    90f8:	4649      	mov	r1, r9
    90fa:	4650      	mov	r0, sl
    90fc:	f002 f9c8 	bl	b490 <__clzdi2>
    9100:	0029      	movs	r1, r5
    9102:	0006      	movs	r6, r0
    9104:	0020      	movs	r0, r4
    9106:	f002 f9c3 	bl	b490 <__clzdi2>
    910a:	1a33      	subs	r3, r6, r0
    910c:	4698      	mov	r8, r3
    910e:	3b20      	subs	r3, #32
    9110:	469b      	mov	fp, r3
    9112:	d500      	bpl.n	9116 <__udivmoddi4+0x3a>
    9114:	e074      	b.n	9200 <__udivmoddi4+0x124>
    9116:	4653      	mov	r3, sl
    9118:	465a      	mov	r2, fp
    911a:	4093      	lsls	r3, r2
    911c:	001f      	movs	r7, r3
    911e:	4653      	mov	r3, sl
    9120:	4642      	mov	r2, r8
    9122:	4093      	lsls	r3, r2
    9124:	001e      	movs	r6, r3
    9126:	42af      	cmp	r7, r5
    9128:	d829      	bhi.n	917e <__udivmoddi4+0xa2>
    912a:	d026      	beq.n	917a <__udivmoddi4+0x9e>
    912c:	465b      	mov	r3, fp
    912e:	1ba4      	subs	r4, r4, r6
    9130:	41bd      	sbcs	r5, r7
    9132:	2b00      	cmp	r3, #0
    9134:	da00      	bge.n	9138 <__udivmoddi4+0x5c>
    9136:	e079      	b.n	922c <__udivmoddi4+0x150>
    9138:	2200      	movs	r2, #0
    913a:	2300      	movs	r3, #0
    913c:	9200      	str	r2, [sp, #0]
    913e:	9301      	str	r3, [sp, #4]
    9140:	2301      	movs	r3, #1
    9142:	465a      	mov	r2, fp
    9144:	4093      	lsls	r3, r2
    9146:	9301      	str	r3, [sp, #4]
    9148:	2301      	movs	r3, #1
    914a:	4642      	mov	r2, r8
    914c:	4093      	lsls	r3, r2
    914e:	9300      	str	r3, [sp, #0]
    9150:	e019      	b.n	9186 <__udivmoddi4+0xaa>
    9152:	4282      	cmp	r2, r0
    9154:	d9d0      	bls.n	90f8 <__udivmoddi4+0x1c>
    9156:	2200      	movs	r2, #0
    9158:	2300      	movs	r3, #0
    915a:	9200      	str	r2, [sp, #0]
    915c:	9301      	str	r3, [sp, #4]
    915e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9160:	2b00      	cmp	r3, #0
    9162:	d001      	beq.n	9168 <__udivmoddi4+0x8c>
    9164:	601c      	str	r4, [r3, #0]
    9166:	605d      	str	r5, [r3, #4]
    9168:	9800      	ldr	r0, [sp, #0]
    916a:	9901      	ldr	r1, [sp, #4]
    916c:	b003      	add	sp, #12
    916e:	bc3c      	pop	{r2, r3, r4, r5}
    9170:	4690      	mov	r8, r2
    9172:	4699      	mov	r9, r3
    9174:	46a2      	mov	sl, r4
    9176:	46ab      	mov	fp, r5
    9178:	bdf0      	pop	{r4, r5, r6, r7, pc}
    917a:	42a3      	cmp	r3, r4
    917c:	d9d6      	bls.n	912c <__udivmoddi4+0x50>
    917e:	2200      	movs	r2, #0
    9180:	2300      	movs	r3, #0
    9182:	9200      	str	r2, [sp, #0]
    9184:	9301      	str	r3, [sp, #4]
    9186:	4643      	mov	r3, r8
    9188:	2b00      	cmp	r3, #0
    918a:	d0e8      	beq.n	915e <__udivmoddi4+0x82>
    918c:	07fb      	lsls	r3, r7, #31
    918e:	0872      	lsrs	r2, r6, #1
    9190:	431a      	orrs	r2, r3
    9192:	4646      	mov	r6, r8
    9194:	087b      	lsrs	r3, r7, #1
    9196:	e00e      	b.n	91b6 <__udivmoddi4+0xda>
    9198:	42ab      	cmp	r3, r5
    919a:	d101      	bne.n	91a0 <__udivmoddi4+0xc4>
    919c:	42a2      	cmp	r2, r4
    919e:	d80c      	bhi.n	91ba <__udivmoddi4+0xde>
    91a0:	1aa4      	subs	r4, r4, r2
    91a2:	419d      	sbcs	r5, r3
    91a4:	2001      	movs	r0, #1
    91a6:	1924      	adds	r4, r4, r4
    91a8:	416d      	adcs	r5, r5
    91aa:	2100      	movs	r1, #0
    91ac:	3e01      	subs	r6, #1
    91ae:	1824      	adds	r4, r4, r0
    91b0:	414d      	adcs	r5, r1
    91b2:	2e00      	cmp	r6, #0
    91b4:	d006      	beq.n	91c4 <__udivmoddi4+0xe8>
    91b6:	42ab      	cmp	r3, r5
    91b8:	d9ee      	bls.n	9198 <__udivmoddi4+0xbc>
    91ba:	3e01      	subs	r6, #1
    91bc:	1924      	adds	r4, r4, r4
    91be:	416d      	adcs	r5, r5
    91c0:	2e00      	cmp	r6, #0
    91c2:	d1f8      	bne.n	91b6 <__udivmoddi4+0xda>
    91c4:	465b      	mov	r3, fp
    91c6:	9800      	ldr	r0, [sp, #0]
    91c8:	9901      	ldr	r1, [sp, #4]
    91ca:	1900      	adds	r0, r0, r4
    91cc:	4169      	adcs	r1, r5
    91ce:	2b00      	cmp	r3, #0
    91d0:	db22      	blt.n	9218 <__udivmoddi4+0x13c>
    91d2:	002b      	movs	r3, r5
    91d4:	465a      	mov	r2, fp
    91d6:	40d3      	lsrs	r3, r2
    91d8:	002a      	movs	r2, r5
    91da:	4644      	mov	r4, r8
    91dc:	40e2      	lsrs	r2, r4
    91de:	001c      	movs	r4, r3
    91e0:	465b      	mov	r3, fp
    91e2:	0015      	movs	r5, r2
    91e4:	2b00      	cmp	r3, #0
    91e6:	db2c      	blt.n	9242 <__udivmoddi4+0x166>
    91e8:	0026      	movs	r6, r4
    91ea:	409e      	lsls	r6, r3
    91ec:	0033      	movs	r3, r6
    91ee:	0026      	movs	r6, r4
    91f0:	4647      	mov	r7, r8
    91f2:	40be      	lsls	r6, r7
    91f4:	0032      	movs	r2, r6
    91f6:	1a80      	subs	r0, r0, r2
    91f8:	4199      	sbcs	r1, r3
    91fa:	9000      	str	r0, [sp, #0]
    91fc:	9101      	str	r1, [sp, #4]
    91fe:	e7ae      	b.n	915e <__udivmoddi4+0x82>
    9200:	4642      	mov	r2, r8
    9202:	2320      	movs	r3, #32
    9204:	1a9b      	subs	r3, r3, r2
    9206:	4652      	mov	r2, sl
    9208:	40da      	lsrs	r2, r3
    920a:	4641      	mov	r1, r8
    920c:	0013      	movs	r3, r2
    920e:	464a      	mov	r2, r9
    9210:	408a      	lsls	r2, r1
    9212:	0017      	movs	r7, r2
    9214:	431f      	orrs	r7, r3
    9216:	e782      	b.n	911e <__udivmoddi4+0x42>
    9218:	4642      	mov	r2, r8
    921a:	2320      	movs	r3, #32
    921c:	1a9b      	subs	r3, r3, r2
    921e:	002a      	movs	r2, r5
    9220:	4646      	mov	r6, r8
    9222:	409a      	lsls	r2, r3
    9224:	0023      	movs	r3, r4
    9226:	40f3      	lsrs	r3, r6
    9228:	4313      	orrs	r3, r2
    922a:	e7d5      	b.n	91d8 <__udivmoddi4+0xfc>
    922c:	4642      	mov	r2, r8
    922e:	2320      	movs	r3, #32
    9230:	2100      	movs	r1, #0
    9232:	1a9b      	subs	r3, r3, r2
    9234:	2200      	movs	r2, #0
    9236:	9100      	str	r1, [sp, #0]
    9238:	9201      	str	r2, [sp, #4]
    923a:	2201      	movs	r2, #1
    923c:	40da      	lsrs	r2, r3
    923e:	9201      	str	r2, [sp, #4]
    9240:	e782      	b.n	9148 <__udivmoddi4+0x6c>
    9242:	4642      	mov	r2, r8
    9244:	2320      	movs	r3, #32
    9246:	0026      	movs	r6, r4
    9248:	1a9b      	subs	r3, r3, r2
    924a:	40de      	lsrs	r6, r3
    924c:	002f      	movs	r7, r5
    924e:	46b4      	mov	ip, r6
    9250:	4097      	lsls	r7, r2
    9252:	4666      	mov	r6, ip
    9254:	003b      	movs	r3, r7
    9256:	4333      	orrs	r3, r6
    9258:	e7c9      	b.n	91ee <__udivmoddi4+0x112>
    925a:	46c0      	nop			; (mov r8, r8)

0000925c <__aeabi_fadd>:
    925c:	b5f0      	push	{r4, r5, r6, r7, lr}
    925e:	46c6      	mov	lr, r8
    9260:	024e      	lsls	r6, r1, #9
    9262:	0247      	lsls	r7, r0, #9
    9264:	0a76      	lsrs	r6, r6, #9
    9266:	0a7b      	lsrs	r3, r7, #9
    9268:	0044      	lsls	r4, r0, #1
    926a:	0fc5      	lsrs	r5, r0, #31
    926c:	00f7      	lsls	r7, r6, #3
    926e:	0048      	lsls	r0, r1, #1
    9270:	4698      	mov	r8, r3
    9272:	b500      	push	{lr}
    9274:	0e24      	lsrs	r4, r4, #24
    9276:	002a      	movs	r2, r5
    9278:	00db      	lsls	r3, r3, #3
    927a:	0e00      	lsrs	r0, r0, #24
    927c:	0fc9      	lsrs	r1, r1, #31
    927e:	46bc      	mov	ip, r7
    9280:	428d      	cmp	r5, r1
    9282:	d067      	beq.n	9354 <__aeabi_fadd+0xf8>
    9284:	1a22      	subs	r2, r4, r0
    9286:	2a00      	cmp	r2, #0
    9288:	dc00      	bgt.n	928c <__aeabi_fadd+0x30>
    928a:	e0a5      	b.n	93d8 <__aeabi_fadd+0x17c>
    928c:	2800      	cmp	r0, #0
    928e:	d13a      	bne.n	9306 <__aeabi_fadd+0xaa>
    9290:	2f00      	cmp	r7, #0
    9292:	d100      	bne.n	9296 <__aeabi_fadd+0x3a>
    9294:	e093      	b.n	93be <__aeabi_fadd+0x162>
    9296:	1e51      	subs	r1, r2, #1
    9298:	2900      	cmp	r1, #0
    929a:	d000      	beq.n	929e <__aeabi_fadd+0x42>
    929c:	e0bc      	b.n	9418 <__aeabi_fadd+0x1bc>
    929e:	2401      	movs	r4, #1
    92a0:	1bdb      	subs	r3, r3, r7
    92a2:	015a      	lsls	r2, r3, #5
    92a4:	d546      	bpl.n	9334 <__aeabi_fadd+0xd8>
    92a6:	019b      	lsls	r3, r3, #6
    92a8:	099e      	lsrs	r6, r3, #6
    92aa:	0030      	movs	r0, r6
    92ac:	f002 f8d2 	bl	b454 <__clzsi2>
    92b0:	3805      	subs	r0, #5
    92b2:	4086      	lsls	r6, r0
    92b4:	4284      	cmp	r4, r0
    92b6:	dd00      	ble.n	92ba <__aeabi_fadd+0x5e>
    92b8:	e09d      	b.n	93f6 <__aeabi_fadd+0x19a>
    92ba:	1b04      	subs	r4, r0, r4
    92bc:	0032      	movs	r2, r6
    92be:	2020      	movs	r0, #32
    92c0:	3401      	adds	r4, #1
    92c2:	40e2      	lsrs	r2, r4
    92c4:	1b04      	subs	r4, r0, r4
    92c6:	40a6      	lsls	r6, r4
    92c8:	0033      	movs	r3, r6
    92ca:	1e5e      	subs	r6, r3, #1
    92cc:	41b3      	sbcs	r3, r6
    92ce:	2400      	movs	r4, #0
    92d0:	4313      	orrs	r3, r2
    92d2:	075a      	lsls	r2, r3, #29
    92d4:	d004      	beq.n	92e0 <__aeabi_fadd+0x84>
    92d6:	220f      	movs	r2, #15
    92d8:	401a      	ands	r2, r3
    92da:	2a04      	cmp	r2, #4
    92dc:	d000      	beq.n	92e0 <__aeabi_fadd+0x84>
    92de:	3304      	adds	r3, #4
    92e0:	015a      	lsls	r2, r3, #5
    92e2:	d529      	bpl.n	9338 <__aeabi_fadd+0xdc>
    92e4:	3401      	adds	r4, #1
    92e6:	2cff      	cmp	r4, #255	; 0xff
    92e8:	d100      	bne.n	92ec <__aeabi_fadd+0x90>
    92ea:	e081      	b.n	93f0 <__aeabi_fadd+0x194>
    92ec:	002a      	movs	r2, r5
    92ee:	019b      	lsls	r3, r3, #6
    92f0:	0a5b      	lsrs	r3, r3, #9
    92f2:	b2e4      	uxtb	r4, r4
    92f4:	025b      	lsls	r3, r3, #9
    92f6:	05e4      	lsls	r4, r4, #23
    92f8:	0a58      	lsrs	r0, r3, #9
    92fa:	07d2      	lsls	r2, r2, #31
    92fc:	4320      	orrs	r0, r4
    92fe:	4310      	orrs	r0, r2
    9300:	bc04      	pop	{r2}
    9302:	4690      	mov	r8, r2
    9304:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9306:	2cff      	cmp	r4, #255	; 0xff
    9308:	d0e3      	beq.n	92d2 <__aeabi_fadd+0x76>
    930a:	2180      	movs	r1, #128	; 0x80
    930c:	0038      	movs	r0, r7
    930e:	04c9      	lsls	r1, r1, #19
    9310:	4308      	orrs	r0, r1
    9312:	4684      	mov	ip, r0
    9314:	2a1b      	cmp	r2, #27
    9316:	dd00      	ble.n	931a <__aeabi_fadd+0xbe>
    9318:	e082      	b.n	9420 <__aeabi_fadd+0x1c4>
    931a:	2020      	movs	r0, #32
    931c:	4661      	mov	r1, ip
    931e:	40d1      	lsrs	r1, r2
    9320:	1a82      	subs	r2, r0, r2
    9322:	4660      	mov	r0, ip
    9324:	4090      	lsls	r0, r2
    9326:	0002      	movs	r2, r0
    9328:	1e50      	subs	r0, r2, #1
    932a:	4182      	sbcs	r2, r0
    932c:	430a      	orrs	r2, r1
    932e:	1a9b      	subs	r3, r3, r2
    9330:	015a      	lsls	r2, r3, #5
    9332:	d4b8      	bmi.n	92a6 <__aeabi_fadd+0x4a>
    9334:	075a      	lsls	r2, r3, #29
    9336:	d1ce      	bne.n	92d6 <__aeabi_fadd+0x7a>
    9338:	08de      	lsrs	r6, r3, #3
    933a:	002a      	movs	r2, r5
    933c:	2cff      	cmp	r4, #255	; 0xff
    933e:	d13a      	bne.n	93b6 <__aeabi_fadd+0x15a>
    9340:	2e00      	cmp	r6, #0
    9342:	d100      	bne.n	9346 <__aeabi_fadd+0xea>
    9344:	e0ae      	b.n	94a4 <__aeabi_fadd+0x248>
    9346:	2380      	movs	r3, #128	; 0x80
    9348:	03db      	lsls	r3, r3, #15
    934a:	4333      	orrs	r3, r6
    934c:	025b      	lsls	r3, r3, #9
    934e:	0a5b      	lsrs	r3, r3, #9
    9350:	24ff      	movs	r4, #255	; 0xff
    9352:	e7cf      	b.n	92f4 <__aeabi_fadd+0x98>
    9354:	1a21      	subs	r1, r4, r0
    9356:	2900      	cmp	r1, #0
    9358:	dd52      	ble.n	9400 <__aeabi_fadd+0x1a4>
    935a:	2800      	cmp	r0, #0
    935c:	d031      	beq.n	93c2 <__aeabi_fadd+0x166>
    935e:	2cff      	cmp	r4, #255	; 0xff
    9360:	d0b7      	beq.n	92d2 <__aeabi_fadd+0x76>
    9362:	2080      	movs	r0, #128	; 0x80
    9364:	003e      	movs	r6, r7
    9366:	04c0      	lsls	r0, r0, #19
    9368:	4306      	orrs	r6, r0
    936a:	46b4      	mov	ip, r6
    936c:	291b      	cmp	r1, #27
    936e:	dd00      	ble.n	9372 <__aeabi_fadd+0x116>
    9370:	e0aa      	b.n	94c8 <__aeabi_fadd+0x26c>
    9372:	2620      	movs	r6, #32
    9374:	4660      	mov	r0, ip
    9376:	40c8      	lsrs	r0, r1
    9378:	1a71      	subs	r1, r6, r1
    937a:	4666      	mov	r6, ip
    937c:	408e      	lsls	r6, r1
    937e:	0031      	movs	r1, r6
    9380:	1e4e      	subs	r6, r1, #1
    9382:	41b1      	sbcs	r1, r6
    9384:	4301      	orrs	r1, r0
    9386:	185b      	adds	r3, r3, r1
    9388:	0159      	lsls	r1, r3, #5
    938a:	d5d3      	bpl.n	9334 <__aeabi_fadd+0xd8>
    938c:	3401      	adds	r4, #1
    938e:	2cff      	cmp	r4, #255	; 0xff
    9390:	d100      	bne.n	9394 <__aeabi_fadd+0x138>
    9392:	e087      	b.n	94a4 <__aeabi_fadd+0x248>
    9394:	2201      	movs	r2, #1
    9396:	4978      	ldr	r1, [pc, #480]	; (9578 <__aeabi_fadd+0x31c>)
    9398:	401a      	ands	r2, r3
    939a:	085b      	lsrs	r3, r3, #1
    939c:	400b      	ands	r3, r1
    939e:	4313      	orrs	r3, r2
    93a0:	e797      	b.n	92d2 <__aeabi_fadd+0x76>
    93a2:	2c00      	cmp	r4, #0
    93a4:	d000      	beq.n	93a8 <__aeabi_fadd+0x14c>
    93a6:	e0a7      	b.n	94f8 <__aeabi_fadd+0x29c>
    93a8:	2b00      	cmp	r3, #0
    93aa:	d000      	beq.n	93ae <__aeabi_fadd+0x152>
    93ac:	e0b6      	b.n	951c <__aeabi_fadd+0x2c0>
    93ae:	1e3b      	subs	r3, r7, #0
    93b0:	d162      	bne.n	9478 <__aeabi_fadd+0x21c>
    93b2:	2600      	movs	r6, #0
    93b4:	2200      	movs	r2, #0
    93b6:	0273      	lsls	r3, r6, #9
    93b8:	0a5b      	lsrs	r3, r3, #9
    93ba:	b2e4      	uxtb	r4, r4
    93bc:	e79a      	b.n	92f4 <__aeabi_fadd+0x98>
    93be:	0014      	movs	r4, r2
    93c0:	e787      	b.n	92d2 <__aeabi_fadd+0x76>
    93c2:	2f00      	cmp	r7, #0
    93c4:	d04d      	beq.n	9462 <__aeabi_fadd+0x206>
    93c6:	1e48      	subs	r0, r1, #1
    93c8:	2800      	cmp	r0, #0
    93ca:	d157      	bne.n	947c <__aeabi_fadd+0x220>
    93cc:	4463      	add	r3, ip
    93ce:	2401      	movs	r4, #1
    93d0:	015a      	lsls	r2, r3, #5
    93d2:	d5af      	bpl.n	9334 <__aeabi_fadd+0xd8>
    93d4:	2402      	movs	r4, #2
    93d6:	e7dd      	b.n	9394 <__aeabi_fadd+0x138>
    93d8:	2a00      	cmp	r2, #0
    93da:	d124      	bne.n	9426 <__aeabi_fadd+0x1ca>
    93dc:	1c62      	adds	r2, r4, #1
    93de:	b2d2      	uxtb	r2, r2
    93e0:	2a01      	cmp	r2, #1
    93e2:	ddde      	ble.n	93a2 <__aeabi_fadd+0x146>
    93e4:	1bde      	subs	r6, r3, r7
    93e6:	0172      	lsls	r2, r6, #5
    93e8:	d535      	bpl.n	9456 <__aeabi_fadd+0x1fa>
    93ea:	1afe      	subs	r6, r7, r3
    93ec:	000d      	movs	r5, r1
    93ee:	e75c      	b.n	92aa <__aeabi_fadd+0x4e>
    93f0:	002a      	movs	r2, r5
    93f2:	2300      	movs	r3, #0
    93f4:	e77e      	b.n	92f4 <__aeabi_fadd+0x98>
    93f6:	0033      	movs	r3, r6
    93f8:	4a60      	ldr	r2, [pc, #384]	; (957c <__aeabi_fadd+0x320>)
    93fa:	1a24      	subs	r4, r4, r0
    93fc:	4013      	ands	r3, r2
    93fe:	e768      	b.n	92d2 <__aeabi_fadd+0x76>
    9400:	2900      	cmp	r1, #0
    9402:	d163      	bne.n	94cc <__aeabi_fadd+0x270>
    9404:	1c61      	adds	r1, r4, #1
    9406:	b2c8      	uxtb	r0, r1
    9408:	2801      	cmp	r0, #1
    940a:	dd4e      	ble.n	94aa <__aeabi_fadd+0x24e>
    940c:	29ff      	cmp	r1, #255	; 0xff
    940e:	d049      	beq.n	94a4 <__aeabi_fadd+0x248>
    9410:	4463      	add	r3, ip
    9412:	085b      	lsrs	r3, r3, #1
    9414:	000c      	movs	r4, r1
    9416:	e75c      	b.n	92d2 <__aeabi_fadd+0x76>
    9418:	2aff      	cmp	r2, #255	; 0xff
    941a:	d041      	beq.n	94a0 <__aeabi_fadd+0x244>
    941c:	000a      	movs	r2, r1
    941e:	e779      	b.n	9314 <__aeabi_fadd+0xb8>
    9420:	2201      	movs	r2, #1
    9422:	1a9b      	subs	r3, r3, r2
    9424:	e784      	b.n	9330 <__aeabi_fadd+0xd4>
    9426:	2c00      	cmp	r4, #0
    9428:	d01d      	beq.n	9466 <__aeabi_fadd+0x20a>
    942a:	28ff      	cmp	r0, #255	; 0xff
    942c:	d022      	beq.n	9474 <__aeabi_fadd+0x218>
    942e:	2480      	movs	r4, #128	; 0x80
    9430:	04e4      	lsls	r4, r4, #19
    9432:	4252      	negs	r2, r2
    9434:	4323      	orrs	r3, r4
    9436:	2a1b      	cmp	r2, #27
    9438:	dd00      	ble.n	943c <__aeabi_fadd+0x1e0>
    943a:	e08a      	b.n	9552 <__aeabi_fadd+0x2f6>
    943c:	001c      	movs	r4, r3
    943e:	2520      	movs	r5, #32
    9440:	40d4      	lsrs	r4, r2
    9442:	1aaa      	subs	r2, r5, r2
    9444:	4093      	lsls	r3, r2
    9446:	1e5a      	subs	r2, r3, #1
    9448:	4193      	sbcs	r3, r2
    944a:	4323      	orrs	r3, r4
    944c:	4662      	mov	r2, ip
    944e:	0004      	movs	r4, r0
    9450:	1ad3      	subs	r3, r2, r3
    9452:	000d      	movs	r5, r1
    9454:	e725      	b.n	92a2 <__aeabi_fadd+0x46>
    9456:	2e00      	cmp	r6, #0
    9458:	d000      	beq.n	945c <__aeabi_fadd+0x200>
    945a:	e726      	b.n	92aa <__aeabi_fadd+0x4e>
    945c:	2200      	movs	r2, #0
    945e:	2400      	movs	r4, #0
    9460:	e7a9      	b.n	93b6 <__aeabi_fadd+0x15a>
    9462:	000c      	movs	r4, r1
    9464:	e735      	b.n	92d2 <__aeabi_fadd+0x76>
    9466:	2b00      	cmp	r3, #0
    9468:	d04d      	beq.n	9506 <__aeabi_fadd+0x2aa>
    946a:	43d2      	mvns	r2, r2
    946c:	2a00      	cmp	r2, #0
    946e:	d0ed      	beq.n	944c <__aeabi_fadd+0x1f0>
    9470:	28ff      	cmp	r0, #255	; 0xff
    9472:	d1e0      	bne.n	9436 <__aeabi_fadd+0x1da>
    9474:	4663      	mov	r3, ip
    9476:	24ff      	movs	r4, #255	; 0xff
    9478:	000d      	movs	r5, r1
    947a:	e72a      	b.n	92d2 <__aeabi_fadd+0x76>
    947c:	29ff      	cmp	r1, #255	; 0xff
    947e:	d00f      	beq.n	94a0 <__aeabi_fadd+0x244>
    9480:	0001      	movs	r1, r0
    9482:	e773      	b.n	936c <__aeabi_fadd+0x110>
    9484:	2b00      	cmp	r3, #0
    9486:	d061      	beq.n	954c <__aeabi_fadd+0x2f0>
    9488:	24ff      	movs	r4, #255	; 0xff
    948a:	2f00      	cmp	r7, #0
    948c:	d100      	bne.n	9490 <__aeabi_fadd+0x234>
    948e:	e720      	b.n	92d2 <__aeabi_fadd+0x76>
    9490:	2280      	movs	r2, #128	; 0x80
    9492:	4641      	mov	r1, r8
    9494:	03d2      	lsls	r2, r2, #15
    9496:	4211      	tst	r1, r2
    9498:	d002      	beq.n	94a0 <__aeabi_fadd+0x244>
    949a:	4216      	tst	r6, r2
    949c:	d100      	bne.n	94a0 <__aeabi_fadd+0x244>
    949e:	003b      	movs	r3, r7
    94a0:	24ff      	movs	r4, #255	; 0xff
    94a2:	e716      	b.n	92d2 <__aeabi_fadd+0x76>
    94a4:	24ff      	movs	r4, #255	; 0xff
    94a6:	2300      	movs	r3, #0
    94a8:	e724      	b.n	92f4 <__aeabi_fadd+0x98>
    94aa:	2c00      	cmp	r4, #0
    94ac:	d1ea      	bne.n	9484 <__aeabi_fadd+0x228>
    94ae:	2b00      	cmp	r3, #0
    94b0:	d058      	beq.n	9564 <__aeabi_fadd+0x308>
    94b2:	2f00      	cmp	r7, #0
    94b4:	d100      	bne.n	94b8 <__aeabi_fadd+0x25c>
    94b6:	e70c      	b.n	92d2 <__aeabi_fadd+0x76>
    94b8:	4463      	add	r3, ip
    94ba:	015a      	lsls	r2, r3, #5
    94bc:	d400      	bmi.n	94c0 <__aeabi_fadd+0x264>
    94be:	e739      	b.n	9334 <__aeabi_fadd+0xd8>
    94c0:	4a2e      	ldr	r2, [pc, #184]	; (957c <__aeabi_fadd+0x320>)
    94c2:	000c      	movs	r4, r1
    94c4:	4013      	ands	r3, r2
    94c6:	e704      	b.n	92d2 <__aeabi_fadd+0x76>
    94c8:	2101      	movs	r1, #1
    94ca:	e75c      	b.n	9386 <__aeabi_fadd+0x12a>
    94cc:	2c00      	cmp	r4, #0
    94ce:	d11e      	bne.n	950e <__aeabi_fadd+0x2b2>
    94d0:	2b00      	cmp	r3, #0
    94d2:	d040      	beq.n	9556 <__aeabi_fadd+0x2fa>
    94d4:	43c9      	mvns	r1, r1
    94d6:	2900      	cmp	r1, #0
    94d8:	d00b      	beq.n	94f2 <__aeabi_fadd+0x296>
    94da:	28ff      	cmp	r0, #255	; 0xff
    94dc:	d036      	beq.n	954c <__aeabi_fadd+0x2f0>
    94de:	291b      	cmp	r1, #27
    94e0:	dc47      	bgt.n	9572 <__aeabi_fadd+0x316>
    94e2:	001c      	movs	r4, r3
    94e4:	2620      	movs	r6, #32
    94e6:	40cc      	lsrs	r4, r1
    94e8:	1a71      	subs	r1, r6, r1
    94ea:	408b      	lsls	r3, r1
    94ec:	1e59      	subs	r1, r3, #1
    94ee:	418b      	sbcs	r3, r1
    94f0:	4323      	orrs	r3, r4
    94f2:	4463      	add	r3, ip
    94f4:	0004      	movs	r4, r0
    94f6:	e747      	b.n	9388 <__aeabi_fadd+0x12c>
    94f8:	2b00      	cmp	r3, #0
    94fa:	d118      	bne.n	952e <__aeabi_fadd+0x2d2>
    94fc:	1e3b      	subs	r3, r7, #0
    94fe:	d02d      	beq.n	955c <__aeabi_fadd+0x300>
    9500:	000d      	movs	r5, r1
    9502:	24ff      	movs	r4, #255	; 0xff
    9504:	e6e5      	b.n	92d2 <__aeabi_fadd+0x76>
    9506:	003b      	movs	r3, r7
    9508:	0004      	movs	r4, r0
    950a:	000d      	movs	r5, r1
    950c:	e6e1      	b.n	92d2 <__aeabi_fadd+0x76>
    950e:	28ff      	cmp	r0, #255	; 0xff
    9510:	d01c      	beq.n	954c <__aeabi_fadd+0x2f0>
    9512:	2480      	movs	r4, #128	; 0x80
    9514:	04e4      	lsls	r4, r4, #19
    9516:	4249      	negs	r1, r1
    9518:	4323      	orrs	r3, r4
    951a:	e7e0      	b.n	94de <__aeabi_fadd+0x282>
    951c:	2f00      	cmp	r7, #0
    951e:	d100      	bne.n	9522 <__aeabi_fadd+0x2c6>
    9520:	e6d7      	b.n	92d2 <__aeabi_fadd+0x76>
    9522:	1bde      	subs	r6, r3, r7
    9524:	0172      	lsls	r2, r6, #5
    9526:	d51f      	bpl.n	9568 <__aeabi_fadd+0x30c>
    9528:	1afb      	subs	r3, r7, r3
    952a:	000d      	movs	r5, r1
    952c:	e6d1      	b.n	92d2 <__aeabi_fadd+0x76>
    952e:	24ff      	movs	r4, #255	; 0xff
    9530:	2f00      	cmp	r7, #0
    9532:	d100      	bne.n	9536 <__aeabi_fadd+0x2da>
    9534:	e6cd      	b.n	92d2 <__aeabi_fadd+0x76>
    9536:	2280      	movs	r2, #128	; 0x80
    9538:	4640      	mov	r0, r8
    953a:	03d2      	lsls	r2, r2, #15
    953c:	4210      	tst	r0, r2
    953e:	d0af      	beq.n	94a0 <__aeabi_fadd+0x244>
    9540:	4216      	tst	r6, r2
    9542:	d1ad      	bne.n	94a0 <__aeabi_fadd+0x244>
    9544:	003b      	movs	r3, r7
    9546:	000d      	movs	r5, r1
    9548:	24ff      	movs	r4, #255	; 0xff
    954a:	e6c2      	b.n	92d2 <__aeabi_fadd+0x76>
    954c:	4663      	mov	r3, ip
    954e:	24ff      	movs	r4, #255	; 0xff
    9550:	e6bf      	b.n	92d2 <__aeabi_fadd+0x76>
    9552:	2301      	movs	r3, #1
    9554:	e77a      	b.n	944c <__aeabi_fadd+0x1f0>
    9556:	003b      	movs	r3, r7
    9558:	0004      	movs	r4, r0
    955a:	e6ba      	b.n	92d2 <__aeabi_fadd+0x76>
    955c:	2680      	movs	r6, #128	; 0x80
    955e:	2200      	movs	r2, #0
    9560:	03f6      	lsls	r6, r6, #15
    9562:	e6f0      	b.n	9346 <__aeabi_fadd+0xea>
    9564:	003b      	movs	r3, r7
    9566:	e6b4      	b.n	92d2 <__aeabi_fadd+0x76>
    9568:	1e33      	subs	r3, r6, #0
    956a:	d000      	beq.n	956e <__aeabi_fadd+0x312>
    956c:	e6e2      	b.n	9334 <__aeabi_fadd+0xd8>
    956e:	2200      	movs	r2, #0
    9570:	e721      	b.n	93b6 <__aeabi_fadd+0x15a>
    9572:	2301      	movs	r3, #1
    9574:	e7bd      	b.n	94f2 <__aeabi_fadd+0x296>
    9576:	46c0      	nop			; (mov r8, r8)
    9578:	7dffffff 	.word	0x7dffffff
    957c:	fbffffff 	.word	0xfbffffff

00009580 <__aeabi_fdiv>:
    9580:	b5f0      	push	{r4, r5, r6, r7, lr}
    9582:	4657      	mov	r7, sl
    9584:	464e      	mov	r6, r9
    9586:	46de      	mov	lr, fp
    9588:	4645      	mov	r5, r8
    958a:	b5e0      	push	{r5, r6, r7, lr}
    958c:	0244      	lsls	r4, r0, #9
    958e:	0043      	lsls	r3, r0, #1
    9590:	0fc6      	lsrs	r6, r0, #31
    9592:	b083      	sub	sp, #12
    9594:	1c0f      	adds	r7, r1, #0
    9596:	0a64      	lsrs	r4, r4, #9
    9598:	0e1b      	lsrs	r3, r3, #24
    959a:	46b2      	mov	sl, r6
    959c:	d053      	beq.n	9646 <__aeabi_fdiv+0xc6>
    959e:	2bff      	cmp	r3, #255	; 0xff
    95a0:	d027      	beq.n	95f2 <__aeabi_fdiv+0x72>
    95a2:	2280      	movs	r2, #128	; 0x80
    95a4:	00e4      	lsls	r4, r4, #3
    95a6:	04d2      	lsls	r2, r2, #19
    95a8:	4314      	orrs	r4, r2
    95aa:	227f      	movs	r2, #127	; 0x7f
    95ac:	4252      	negs	r2, r2
    95ae:	4690      	mov	r8, r2
    95b0:	4498      	add	r8, r3
    95b2:	2300      	movs	r3, #0
    95b4:	4699      	mov	r9, r3
    95b6:	469b      	mov	fp, r3
    95b8:	027d      	lsls	r5, r7, #9
    95ba:	0078      	lsls	r0, r7, #1
    95bc:	0ffb      	lsrs	r3, r7, #31
    95be:	0a6d      	lsrs	r5, r5, #9
    95c0:	0e00      	lsrs	r0, r0, #24
    95c2:	9300      	str	r3, [sp, #0]
    95c4:	d024      	beq.n	9610 <__aeabi_fdiv+0x90>
    95c6:	28ff      	cmp	r0, #255	; 0xff
    95c8:	d046      	beq.n	9658 <__aeabi_fdiv+0xd8>
    95ca:	2380      	movs	r3, #128	; 0x80
    95cc:	2100      	movs	r1, #0
    95ce:	00ed      	lsls	r5, r5, #3
    95d0:	04db      	lsls	r3, r3, #19
    95d2:	431d      	orrs	r5, r3
    95d4:	387f      	subs	r0, #127	; 0x7f
    95d6:	4647      	mov	r7, r8
    95d8:	1a38      	subs	r0, r7, r0
    95da:	464f      	mov	r7, r9
    95dc:	430f      	orrs	r7, r1
    95de:	00bf      	lsls	r7, r7, #2
    95e0:	46b9      	mov	r9, r7
    95e2:	0033      	movs	r3, r6
    95e4:	9a00      	ldr	r2, [sp, #0]
    95e6:	4f87      	ldr	r7, [pc, #540]	; (9804 <__aeabi_fdiv+0x284>)
    95e8:	4053      	eors	r3, r2
    95ea:	464a      	mov	r2, r9
    95ec:	58ba      	ldr	r2, [r7, r2]
    95ee:	9301      	str	r3, [sp, #4]
    95f0:	4697      	mov	pc, r2
    95f2:	2c00      	cmp	r4, #0
    95f4:	d14e      	bne.n	9694 <__aeabi_fdiv+0x114>
    95f6:	2308      	movs	r3, #8
    95f8:	4699      	mov	r9, r3
    95fa:	33f7      	adds	r3, #247	; 0xf7
    95fc:	4698      	mov	r8, r3
    95fe:	3bfd      	subs	r3, #253	; 0xfd
    9600:	469b      	mov	fp, r3
    9602:	027d      	lsls	r5, r7, #9
    9604:	0078      	lsls	r0, r7, #1
    9606:	0ffb      	lsrs	r3, r7, #31
    9608:	0a6d      	lsrs	r5, r5, #9
    960a:	0e00      	lsrs	r0, r0, #24
    960c:	9300      	str	r3, [sp, #0]
    960e:	d1da      	bne.n	95c6 <__aeabi_fdiv+0x46>
    9610:	2d00      	cmp	r5, #0
    9612:	d126      	bne.n	9662 <__aeabi_fdiv+0xe2>
    9614:	2000      	movs	r0, #0
    9616:	2101      	movs	r1, #1
    9618:	0033      	movs	r3, r6
    961a:	9a00      	ldr	r2, [sp, #0]
    961c:	4f7a      	ldr	r7, [pc, #488]	; (9808 <__aeabi_fdiv+0x288>)
    961e:	4053      	eors	r3, r2
    9620:	4642      	mov	r2, r8
    9622:	1a10      	subs	r0, r2, r0
    9624:	464a      	mov	r2, r9
    9626:	430a      	orrs	r2, r1
    9628:	0092      	lsls	r2, r2, #2
    962a:	58ba      	ldr	r2, [r7, r2]
    962c:	001d      	movs	r5, r3
    962e:	4697      	mov	pc, r2
    9630:	9b00      	ldr	r3, [sp, #0]
    9632:	002c      	movs	r4, r5
    9634:	469a      	mov	sl, r3
    9636:	468b      	mov	fp, r1
    9638:	465b      	mov	r3, fp
    963a:	2b02      	cmp	r3, #2
    963c:	d131      	bne.n	96a2 <__aeabi_fdiv+0x122>
    963e:	4653      	mov	r3, sl
    9640:	21ff      	movs	r1, #255	; 0xff
    9642:	2400      	movs	r4, #0
    9644:	e038      	b.n	96b8 <__aeabi_fdiv+0x138>
    9646:	2c00      	cmp	r4, #0
    9648:	d117      	bne.n	967a <__aeabi_fdiv+0xfa>
    964a:	2304      	movs	r3, #4
    964c:	4699      	mov	r9, r3
    964e:	2300      	movs	r3, #0
    9650:	4698      	mov	r8, r3
    9652:	3301      	adds	r3, #1
    9654:	469b      	mov	fp, r3
    9656:	e7af      	b.n	95b8 <__aeabi_fdiv+0x38>
    9658:	20ff      	movs	r0, #255	; 0xff
    965a:	2d00      	cmp	r5, #0
    965c:	d10b      	bne.n	9676 <__aeabi_fdiv+0xf6>
    965e:	2102      	movs	r1, #2
    9660:	e7da      	b.n	9618 <__aeabi_fdiv+0x98>
    9662:	0028      	movs	r0, r5
    9664:	f001 fef6 	bl	b454 <__clzsi2>
    9668:	1f43      	subs	r3, r0, #5
    966a:	409d      	lsls	r5, r3
    966c:	2376      	movs	r3, #118	; 0x76
    966e:	425b      	negs	r3, r3
    9670:	1a18      	subs	r0, r3, r0
    9672:	2100      	movs	r1, #0
    9674:	e7af      	b.n	95d6 <__aeabi_fdiv+0x56>
    9676:	2103      	movs	r1, #3
    9678:	e7ad      	b.n	95d6 <__aeabi_fdiv+0x56>
    967a:	0020      	movs	r0, r4
    967c:	f001 feea 	bl	b454 <__clzsi2>
    9680:	1f43      	subs	r3, r0, #5
    9682:	409c      	lsls	r4, r3
    9684:	2376      	movs	r3, #118	; 0x76
    9686:	425b      	negs	r3, r3
    9688:	1a1b      	subs	r3, r3, r0
    968a:	4698      	mov	r8, r3
    968c:	2300      	movs	r3, #0
    968e:	4699      	mov	r9, r3
    9690:	469b      	mov	fp, r3
    9692:	e791      	b.n	95b8 <__aeabi_fdiv+0x38>
    9694:	230c      	movs	r3, #12
    9696:	4699      	mov	r9, r3
    9698:	33f3      	adds	r3, #243	; 0xf3
    969a:	4698      	mov	r8, r3
    969c:	3bfc      	subs	r3, #252	; 0xfc
    969e:	469b      	mov	fp, r3
    96a0:	e78a      	b.n	95b8 <__aeabi_fdiv+0x38>
    96a2:	2b03      	cmp	r3, #3
    96a4:	d100      	bne.n	96a8 <__aeabi_fdiv+0x128>
    96a6:	e0a5      	b.n	97f4 <__aeabi_fdiv+0x274>
    96a8:	4655      	mov	r5, sl
    96aa:	2b01      	cmp	r3, #1
    96ac:	d000      	beq.n	96b0 <__aeabi_fdiv+0x130>
    96ae:	e081      	b.n	97b4 <__aeabi_fdiv+0x234>
    96b0:	2301      	movs	r3, #1
    96b2:	2100      	movs	r1, #0
    96b4:	2400      	movs	r4, #0
    96b6:	402b      	ands	r3, r5
    96b8:	0264      	lsls	r4, r4, #9
    96ba:	05c9      	lsls	r1, r1, #23
    96bc:	0a60      	lsrs	r0, r4, #9
    96be:	07db      	lsls	r3, r3, #31
    96c0:	4308      	orrs	r0, r1
    96c2:	4318      	orrs	r0, r3
    96c4:	b003      	add	sp, #12
    96c6:	bc3c      	pop	{r2, r3, r4, r5}
    96c8:	4690      	mov	r8, r2
    96ca:	4699      	mov	r9, r3
    96cc:	46a2      	mov	sl, r4
    96ce:	46ab      	mov	fp, r5
    96d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    96d2:	2480      	movs	r4, #128	; 0x80
    96d4:	2300      	movs	r3, #0
    96d6:	03e4      	lsls	r4, r4, #15
    96d8:	21ff      	movs	r1, #255	; 0xff
    96da:	e7ed      	b.n	96b8 <__aeabi_fdiv+0x138>
    96dc:	21ff      	movs	r1, #255	; 0xff
    96de:	2400      	movs	r4, #0
    96e0:	e7ea      	b.n	96b8 <__aeabi_fdiv+0x138>
    96e2:	2301      	movs	r3, #1
    96e4:	1a59      	subs	r1, r3, r1
    96e6:	291b      	cmp	r1, #27
    96e8:	dd66      	ble.n	97b8 <__aeabi_fdiv+0x238>
    96ea:	9a01      	ldr	r2, [sp, #4]
    96ec:	4013      	ands	r3, r2
    96ee:	2100      	movs	r1, #0
    96f0:	2400      	movs	r4, #0
    96f2:	e7e1      	b.n	96b8 <__aeabi_fdiv+0x138>
    96f4:	2380      	movs	r3, #128	; 0x80
    96f6:	03db      	lsls	r3, r3, #15
    96f8:	421c      	tst	r4, r3
    96fa:	d038      	beq.n	976e <__aeabi_fdiv+0x1ee>
    96fc:	421d      	tst	r5, r3
    96fe:	d051      	beq.n	97a4 <__aeabi_fdiv+0x224>
    9700:	431c      	orrs	r4, r3
    9702:	0264      	lsls	r4, r4, #9
    9704:	0a64      	lsrs	r4, r4, #9
    9706:	0033      	movs	r3, r6
    9708:	21ff      	movs	r1, #255	; 0xff
    970a:	e7d5      	b.n	96b8 <__aeabi_fdiv+0x138>
    970c:	0163      	lsls	r3, r4, #5
    970e:	016c      	lsls	r4, r5, #5
    9710:	42a3      	cmp	r3, r4
    9712:	d23b      	bcs.n	978c <__aeabi_fdiv+0x20c>
    9714:	261b      	movs	r6, #27
    9716:	2100      	movs	r1, #0
    9718:	3801      	subs	r0, #1
    971a:	2501      	movs	r5, #1
    971c:	001f      	movs	r7, r3
    971e:	0049      	lsls	r1, r1, #1
    9720:	005b      	lsls	r3, r3, #1
    9722:	2f00      	cmp	r7, #0
    9724:	db01      	blt.n	972a <__aeabi_fdiv+0x1aa>
    9726:	429c      	cmp	r4, r3
    9728:	d801      	bhi.n	972e <__aeabi_fdiv+0x1ae>
    972a:	1b1b      	subs	r3, r3, r4
    972c:	4329      	orrs	r1, r5
    972e:	3e01      	subs	r6, #1
    9730:	2e00      	cmp	r6, #0
    9732:	d1f3      	bne.n	971c <__aeabi_fdiv+0x19c>
    9734:	001c      	movs	r4, r3
    9736:	1e63      	subs	r3, r4, #1
    9738:	419c      	sbcs	r4, r3
    973a:	430c      	orrs	r4, r1
    973c:	0001      	movs	r1, r0
    973e:	317f      	adds	r1, #127	; 0x7f
    9740:	2900      	cmp	r1, #0
    9742:	ddce      	ble.n	96e2 <__aeabi_fdiv+0x162>
    9744:	0763      	lsls	r3, r4, #29
    9746:	d004      	beq.n	9752 <__aeabi_fdiv+0x1d2>
    9748:	230f      	movs	r3, #15
    974a:	4023      	ands	r3, r4
    974c:	2b04      	cmp	r3, #4
    974e:	d000      	beq.n	9752 <__aeabi_fdiv+0x1d2>
    9750:	3404      	adds	r4, #4
    9752:	0123      	lsls	r3, r4, #4
    9754:	d503      	bpl.n	975e <__aeabi_fdiv+0x1de>
    9756:	0001      	movs	r1, r0
    9758:	4b2c      	ldr	r3, [pc, #176]	; (980c <__aeabi_fdiv+0x28c>)
    975a:	3180      	adds	r1, #128	; 0x80
    975c:	401c      	ands	r4, r3
    975e:	29fe      	cmp	r1, #254	; 0xfe
    9760:	dd0d      	ble.n	977e <__aeabi_fdiv+0x1fe>
    9762:	2301      	movs	r3, #1
    9764:	9a01      	ldr	r2, [sp, #4]
    9766:	21ff      	movs	r1, #255	; 0xff
    9768:	4013      	ands	r3, r2
    976a:	2400      	movs	r4, #0
    976c:	e7a4      	b.n	96b8 <__aeabi_fdiv+0x138>
    976e:	2380      	movs	r3, #128	; 0x80
    9770:	03db      	lsls	r3, r3, #15
    9772:	431c      	orrs	r4, r3
    9774:	0264      	lsls	r4, r4, #9
    9776:	0a64      	lsrs	r4, r4, #9
    9778:	0033      	movs	r3, r6
    977a:	21ff      	movs	r1, #255	; 0xff
    977c:	e79c      	b.n	96b8 <__aeabi_fdiv+0x138>
    977e:	2301      	movs	r3, #1
    9780:	9a01      	ldr	r2, [sp, #4]
    9782:	01a4      	lsls	r4, r4, #6
    9784:	0a64      	lsrs	r4, r4, #9
    9786:	b2c9      	uxtb	r1, r1
    9788:	4013      	ands	r3, r2
    978a:	e795      	b.n	96b8 <__aeabi_fdiv+0x138>
    978c:	1b1b      	subs	r3, r3, r4
    978e:	261a      	movs	r6, #26
    9790:	2101      	movs	r1, #1
    9792:	e7c2      	b.n	971a <__aeabi_fdiv+0x19a>
    9794:	9b00      	ldr	r3, [sp, #0]
    9796:	468b      	mov	fp, r1
    9798:	469a      	mov	sl, r3
    979a:	2400      	movs	r4, #0
    979c:	e74c      	b.n	9638 <__aeabi_fdiv+0xb8>
    979e:	0263      	lsls	r3, r4, #9
    97a0:	d5e5      	bpl.n	976e <__aeabi_fdiv+0x1ee>
    97a2:	2500      	movs	r5, #0
    97a4:	2480      	movs	r4, #128	; 0x80
    97a6:	03e4      	lsls	r4, r4, #15
    97a8:	432c      	orrs	r4, r5
    97aa:	0264      	lsls	r4, r4, #9
    97ac:	0a64      	lsrs	r4, r4, #9
    97ae:	9b00      	ldr	r3, [sp, #0]
    97b0:	21ff      	movs	r1, #255	; 0xff
    97b2:	e781      	b.n	96b8 <__aeabi_fdiv+0x138>
    97b4:	9501      	str	r5, [sp, #4]
    97b6:	e7c1      	b.n	973c <__aeabi_fdiv+0x1bc>
    97b8:	0023      	movs	r3, r4
    97ba:	2020      	movs	r0, #32
    97bc:	40cb      	lsrs	r3, r1
    97be:	1a41      	subs	r1, r0, r1
    97c0:	408c      	lsls	r4, r1
    97c2:	1e61      	subs	r1, r4, #1
    97c4:	418c      	sbcs	r4, r1
    97c6:	431c      	orrs	r4, r3
    97c8:	0763      	lsls	r3, r4, #29
    97ca:	d004      	beq.n	97d6 <__aeabi_fdiv+0x256>
    97cc:	230f      	movs	r3, #15
    97ce:	4023      	ands	r3, r4
    97d0:	2b04      	cmp	r3, #4
    97d2:	d000      	beq.n	97d6 <__aeabi_fdiv+0x256>
    97d4:	3404      	adds	r4, #4
    97d6:	0163      	lsls	r3, r4, #5
    97d8:	d505      	bpl.n	97e6 <__aeabi_fdiv+0x266>
    97da:	2301      	movs	r3, #1
    97dc:	9a01      	ldr	r2, [sp, #4]
    97de:	2101      	movs	r1, #1
    97e0:	4013      	ands	r3, r2
    97e2:	2400      	movs	r4, #0
    97e4:	e768      	b.n	96b8 <__aeabi_fdiv+0x138>
    97e6:	2301      	movs	r3, #1
    97e8:	9a01      	ldr	r2, [sp, #4]
    97ea:	01a4      	lsls	r4, r4, #6
    97ec:	0a64      	lsrs	r4, r4, #9
    97ee:	4013      	ands	r3, r2
    97f0:	2100      	movs	r1, #0
    97f2:	e761      	b.n	96b8 <__aeabi_fdiv+0x138>
    97f4:	2380      	movs	r3, #128	; 0x80
    97f6:	03db      	lsls	r3, r3, #15
    97f8:	431c      	orrs	r4, r3
    97fa:	0264      	lsls	r4, r4, #9
    97fc:	0a64      	lsrs	r4, r4, #9
    97fe:	4653      	mov	r3, sl
    9800:	21ff      	movs	r1, #255	; 0xff
    9802:	e759      	b.n	96b8 <__aeabi_fdiv+0x138>
    9804:	00010e8c 	.word	0x00010e8c
    9808:	00010ecc 	.word	0x00010ecc
    980c:	f7ffffff 	.word	0xf7ffffff

00009810 <__eqsf2>:
    9810:	b570      	push	{r4, r5, r6, lr}
    9812:	0042      	lsls	r2, r0, #1
    9814:	0245      	lsls	r5, r0, #9
    9816:	024e      	lsls	r6, r1, #9
    9818:	004c      	lsls	r4, r1, #1
    981a:	0fc3      	lsrs	r3, r0, #31
    981c:	0a6d      	lsrs	r5, r5, #9
    981e:	0e12      	lsrs	r2, r2, #24
    9820:	0a76      	lsrs	r6, r6, #9
    9822:	0e24      	lsrs	r4, r4, #24
    9824:	0fc9      	lsrs	r1, r1, #31
    9826:	2001      	movs	r0, #1
    9828:	2aff      	cmp	r2, #255	; 0xff
    982a:	d006      	beq.n	983a <__eqsf2+0x2a>
    982c:	2cff      	cmp	r4, #255	; 0xff
    982e:	d003      	beq.n	9838 <__eqsf2+0x28>
    9830:	42a2      	cmp	r2, r4
    9832:	d101      	bne.n	9838 <__eqsf2+0x28>
    9834:	42b5      	cmp	r5, r6
    9836:	d006      	beq.n	9846 <__eqsf2+0x36>
    9838:	bd70      	pop	{r4, r5, r6, pc}
    983a:	2d00      	cmp	r5, #0
    983c:	d1fc      	bne.n	9838 <__eqsf2+0x28>
    983e:	2cff      	cmp	r4, #255	; 0xff
    9840:	d1fa      	bne.n	9838 <__eqsf2+0x28>
    9842:	2e00      	cmp	r6, #0
    9844:	d1f8      	bne.n	9838 <__eqsf2+0x28>
    9846:	428b      	cmp	r3, r1
    9848:	d006      	beq.n	9858 <__eqsf2+0x48>
    984a:	2001      	movs	r0, #1
    984c:	2a00      	cmp	r2, #0
    984e:	d1f3      	bne.n	9838 <__eqsf2+0x28>
    9850:	0028      	movs	r0, r5
    9852:	1e45      	subs	r5, r0, #1
    9854:	41a8      	sbcs	r0, r5
    9856:	e7ef      	b.n	9838 <__eqsf2+0x28>
    9858:	2000      	movs	r0, #0
    985a:	e7ed      	b.n	9838 <__eqsf2+0x28>

0000985c <__gesf2>:
    985c:	b5f0      	push	{r4, r5, r6, r7, lr}
    985e:	0042      	lsls	r2, r0, #1
    9860:	0245      	lsls	r5, r0, #9
    9862:	024c      	lsls	r4, r1, #9
    9864:	0fc3      	lsrs	r3, r0, #31
    9866:	0048      	lsls	r0, r1, #1
    9868:	0a6d      	lsrs	r5, r5, #9
    986a:	0e12      	lsrs	r2, r2, #24
    986c:	0a64      	lsrs	r4, r4, #9
    986e:	0e00      	lsrs	r0, r0, #24
    9870:	0fc9      	lsrs	r1, r1, #31
    9872:	2aff      	cmp	r2, #255	; 0xff
    9874:	d01e      	beq.n	98b4 <__gesf2+0x58>
    9876:	28ff      	cmp	r0, #255	; 0xff
    9878:	d021      	beq.n	98be <__gesf2+0x62>
    987a:	2a00      	cmp	r2, #0
    987c:	d10a      	bne.n	9894 <__gesf2+0x38>
    987e:	426e      	negs	r6, r5
    9880:	416e      	adcs	r6, r5
    9882:	b2f6      	uxtb	r6, r6
    9884:	2800      	cmp	r0, #0
    9886:	d10f      	bne.n	98a8 <__gesf2+0x4c>
    9888:	2c00      	cmp	r4, #0
    988a:	d10d      	bne.n	98a8 <__gesf2+0x4c>
    988c:	2000      	movs	r0, #0
    988e:	2d00      	cmp	r5, #0
    9890:	d009      	beq.n	98a6 <__gesf2+0x4a>
    9892:	e005      	b.n	98a0 <__gesf2+0x44>
    9894:	2800      	cmp	r0, #0
    9896:	d101      	bne.n	989c <__gesf2+0x40>
    9898:	2c00      	cmp	r4, #0
    989a:	d001      	beq.n	98a0 <__gesf2+0x44>
    989c:	428b      	cmp	r3, r1
    989e:	d011      	beq.n	98c4 <__gesf2+0x68>
    98a0:	2101      	movs	r1, #1
    98a2:	4258      	negs	r0, r3
    98a4:	4308      	orrs	r0, r1
    98a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    98a8:	2e00      	cmp	r6, #0
    98aa:	d0f7      	beq.n	989c <__gesf2+0x40>
    98ac:	2001      	movs	r0, #1
    98ae:	3901      	subs	r1, #1
    98b0:	4308      	orrs	r0, r1
    98b2:	e7f8      	b.n	98a6 <__gesf2+0x4a>
    98b4:	2d00      	cmp	r5, #0
    98b6:	d0de      	beq.n	9876 <__gesf2+0x1a>
    98b8:	2002      	movs	r0, #2
    98ba:	4240      	negs	r0, r0
    98bc:	e7f3      	b.n	98a6 <__gesf2+0x4a>
    98be:	2c00      	cmp	r4, #0
    98c0:	d0db      	beq.n	987a <__gesf2+0x1e>
    98c2:	e7f9      	b.n	98b8 <__gesf2+0x5c>
    98c4:	4282      	cmp	r2, r0
    98c6:	dceb      	bgt.n	98a0 <__gesf2+0x44>
    98c8:	db04      	blt.n	98d4 <__gesf2+0x78>
    98ca:	42a5      	cmp	r5, r4
    98cc:	d8e8      	bhi.n	98a0 <__gesf2+0x44>
    98ce:	2000      	movs	r0, #0
    98d0:	42a5      	cmp	r5, r4
    98d2:	d2e8      	bcs.n	98a6 <__gesf2+0x4a>
    98d4:	2101      	movs	r1, #1
    98d6:	1e58      	subs	r0, r3, #1
    98d8:	4308      	orrs	r0, r1
    98da:	e7e4      	b.n	98a6 <__gesf2+0x4a>

000098dc <__lesf2>:
    98dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    98de:	0042      	lsls	r2, r0, #1
    98e0:	024d      	lsls	r5, r1, #9
    98e2:	004c      	lsls	r4, r1, #1
    98e4:	0246      	lsls	r6, r0, #9
    98e6:	0a76      	lsrs	r6, r6, #9
    98e8:	0e12      	lsrs	r2, r2, #24
    98ea:	0fc3      	lsrs	r3, r0, #31
    98ec:	0a6d      	lsrs	r5, r5, #9
    98ee:	0e24      	lsrs	r4, r4, #24
    98f0:	0fc9      	lsrs	r1, r1, #31
    98f2:	2aff      	cmp	r2, #255	; 0xff
    98f4:	d016      	beq.n	9924 <__lesf2+0x48>
    98f6:	2cff      	cmp	r4, #255	; 0xff
    98f8:	d018      	beq.n	992c <__lesf2+0x50>
    98fa:	2a00      	cmp	r2, #0
    98fc:	d10a      	bne.n	9914 <__lesf2+0x38>
    98fe:	4270      	negs	r0, r6
    9900:	4170      	adcs	r0, r6
    9902:	b2c0      	uxtb	r0, r0
    9904:	2c00      	cmp	r4, #0
    9906:	d015      	beq.n	9934 <__lesf2+0x58>
    9908:	2800      	cmp	r0, #0
    990a:	d005      	beq.n	9918 <__lesf2+0x3c>
    990c:	2001      	movs	r0, #1
    990e:	3901      	subs	r1, #1
    9910:	4308      	orrs	r0, r1
    9912:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9914:	2c00      	cmp	r4, #0
    9916:	d013      	beq.n	9940 <__lesf2+0x64>
    9918:	4299      	cmp	r1, r3
    991a:	d014      	beq.n	9946 <__lesf2+0x6a>
    991c:	2001      	movs	r0, #1
    991e:	425b      	negs	r3, r3
    9920:	4318      	orrs	r0, r3
    9922:	e7f6      	b.n	9912 <__lesf2+0x36>
    9924:	2002      	movs	r0, #2
    9926:	2e00      	cmp	r6, #0
    9928:	d1f3      	bne.n	9912 <__lesf2+0x36>
    992a:	e7e4      	b.n	98f6 <__lesf2+0x1a>
    992c:	2002      	movs	r0, #2
    992e:	2d00      	cmp	r5, #0
    9930:	d1ef      	bne.n	9912 <__lesf2+0x36>
    9932:	e7e2      	b.n	98fa <__lesf2+0x1e>
    9934:	2d00      	cmp	r5, #0
    9936:	d1e7      	bne.n	9908 <__lesf2+0x2c>
    9938:	2000      	movs	r0, #0
    993a:	2e00      	cmp	r6, #0
    993c:	d0e9      	beq.n	9912 <__lesf2+0x36>
    993e:	e7ed      	b.n	991c <__lesf2+0x40>
    9940:	2d00      	cmp	r5, #0
    9942:	d1e9      	bne.n	9918 <__lesf2+0x3c>
    9944:	e7ea      	b.n	991c <__lesf2+0x40>
    9946:	42a2      	cmp	r2, r4
    9948:	dc06      	bgt.n	9958 <__lesf2+0x7c>
    994a:	dbdf      	blt.n	990c <__lesf2+0x30>
    994c:	42ae      	cmp	r6, r5
    994e:	d803      	bhi.n	9958 <__lesf2+0x7c>
    9950:	2000      	movs	r0, #0
    9952:	42ae      	cmp	r6, r5
    9954:	d3da      	bcc.n	990c <__lesf2+0x30>
    9956:	e7dc      	b.n	9912 <__lesf2+0x36>
    9958:	2001      	movs	r0, #1
    995a:	4249      	negs	r1, r1
    995c:	4308      	orrs	r0, r1
    995e:	e7d8      	b.n	9912 <__lesf2+0x36>

00009960 <__aeabi_fmul>:
    9960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9962:	4657      	mov	r7, sl
    9964:	464e      	mov	r6, r9
    9966:	4645      	mov	r5, r8
    9968:	46de      	mov	lr, fp
    996a:	b5e0      	push	{r5, r6, r7, lr}
    996c:	0247      	lsls	r7, r0, #9
    996e:	0046      	lsls	r6, r0, #1
    9970:	4688      	mov	r8, r1
    9972:	0a7f      	lsrs	r7, r7, #9
    9974:	0e36      	lsrs	r6, r6, #24
    9976:	0fc4      	lsrs	r4, r0, #31
    9978:	2e00      	cmp	r6, #0
    997a:	d047      	beq.n	9a0c <__aeabi_fmul+0xac>
    997c:	2eff      	cmp	r6, #255	; 0xff
    997e:	d024      	beq.n	99ca <__aeabi_fmul+0x6a>
    9980:	00fb      	lsls	r3, r7, #3
    9982:	2780      	movs	r7, #128	; 0x80
    9984:	04ff      	lsls	r7, r7, #19
    9986:	431f      	orrs	r7, r3
    9988:	2300      	movs	r3, #0
    998a:	4699      	mov	r9, r3
    998c:	469a      	mov	sl, r3
    998e:	3e7f      	subs	r6, #127	; 0x7f
    9990:	4643      	mov	r3, r8
    9992:	025d      	lsls	r5, r3, #9
    9994:	0058      	lsls	r0, r3, #1
    9996:	0fdb      	lsrs	r3, r3, #31
    9998:	0a6d      	lsrs	r5, r5, #9
    999a:	0e00      	lsrs	r0, r0, #24
    999c:	4698      	mov	r8, r3
    999e:	d043      	beq.n	9a28 <__aeabi_fmul+0xc8>
    99a0:	28ff      	cmp	r0, #255	; 0xff
    99a2:	d03b      	beq.n	9a1c <__aeabi_fmul+0xbc>
    99a4:	00eb      	lsls	r3, r5, #3
    99a6:	2580      	movs	r5, #128	; 0x80
    99a8:	2200      	movs	r2, #0
    99aa:	04ed      	lsls	r5, r5, #19
    99ac:	431d      	orrs	r5, r3
    99ae:	387f      	subs	r0, #127	; 0x7f
    99b0:	1836      	adds	r6, r6, r0
    99b2:	1c73      	adds	r3, r6, #1
    99b4:	4641      	mov	r1, r8
    99b6:	469b      	mov	fp, r3
    99b8:	464b      	mov	r3, r9
    99ba:	4061      	eors	r1, r4
    99bc:	4313      	orrs	r3, r2
    99be:	2b0f      	cmp	r3, #15
    99c0:	d864      	bhi.n	9a8c <__aeabi_fmul+0x12c>
    99c2:	4875      	ldr	r0, [pc, #468]	; (9b98 <__aeabi_fmul+0x238>)
    99c4:	009b      	lsls	r3, r3, #2
    99c6:	58c3      	ldr	r3, [r0, r3]
    99c8:	469f      	mov	pc, r3
    99ca:	2f00      	cmp	r7, #0
    99cc:	d142      	bne.n	9a54 <__aeabi_fmul+0xf4>
    99ce:	2308      	movs	r3, #8
    99d0:	4699      	mov	r9, r3
    99d2:	3b06      	subs	r3, #6
    99d4:	26ff      	movs	r6, #255	; 0xff
    99d6:	469a      	mov	sl, r3
    99d8:	e7da      	b.n	9990 <__aeabi_fmul+0x30>
    99da:	4641      	mov	r1, r8
    99dc:	2a02      	cmp	r2, #2
    99de:	d028      	beq.n	9a32 <__aeabi_fmul+0xd2>
    99e0:	2a03      	cmp	r2, #3
    99e2:	d100      	bne.n	99e6 <__aeabi_fmul+0x86>
    99e4:	e0ce      	b.n	9b84 <__aeabi_fmul+0x224>
    99e6:	2a01      	cmp	r2, #1
    99e8:	d000      	beq.n	99ec <__aeabi_fmul+0x8c>
    99ea:	e0ac      	b.n	9b46 <__aeabi_fmul+0x1e6>
    99ec:	4011      	ands	r1, r2
    99ee:	2000      	movs	r0, #0
    99f0:	2200      	movs	r2, #0
    99f2:	b2cc      	uxtb	r4, r1
    99f4:	0240      	lsls	r0, r0, #9
    99f6:	05d2      	lsls	r2, r2, #23
    99f8:	0a40      	lsrs	r0, r0, #9
    99fa:	07e4      	lsls	r4, r4, #31
    99fc:	4310      	orrs	r0, r2
    99fe:	4320      	orrs	r0, r4
    9a00:	bc3c      	pop	{r2, r3, r4, r5}
    9a02:	4690      	mov	r8, r2
    9a04:	4699      	mov	r9, r3
    9a06:	46a2      	mov	sl, r4
    9a08:	46ab      	mov	fp, r5
    9a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9a0c:	2f00      	cmp	r7, #0
    9a0e:	d115      	bne.n	9a3c <__aeabi_fmul+0xdc>
    9a10:	2304      	movs	r3, #4
    9a12:	4699      	mov	r9, r3
    9a14:	3b03      	subs	r3, #3
    9a16:	2600      	movs	r6, #0
    9a18:	469a      	mov	sl, r3
    9a1a:	e7b9      	b.n	9990 <__aeabi_fmul+0x30>
    9a1c:	20ff      	movs	r0, #255	; 0xff
    9a1e:	2202      	movs	r2, #2
    9a20:	2d00      	cmp	r5, #0
    9a22:	d0c5      	beq.n	99b0 <__aeabi_fmul+0x50>
    9a24:	2203      	movs	r2, #3
    9a26:	e7c3      	b.n	99b0 <__aeabi_fmul+0x50>
    9a28:	2d00      	cmp	r5, #0
    9a2a:	d119      	bne.n	9a60 <__aeabi_fmul+0x100>
    9a2c:	2000      	movs	r0, #0
    9a2e:	2201      	movs	r2, #1
    9a30:	e7be      	b.n	99b0 <__aeabi_fmul+0x50>
    9a32:	2401      	movs	r4, #1
    9a34:	22ff      	movs	r2, #255	; 0xff
    9a36:	400c      	ands	r4, r1
    9a38:	2000      	movs	r0, #0
    9a3a:	e7db      	b.n	99f4 <__aeabi_fmul+0x94>
    9a3c:	0038      	movs	r0, r7
    9a3e:	f001 fd09 	bl	b454 <__clzsi2>
    9a42:	2676      	movs	r6, #118	; 0x76
    9a44:	1f43      	subs	r3, r0, #5
    9a46:	409f      	lsls	r7, r3
    9a48:	2300      	movs	r3, #0
    9a4a:	4276      	negs	r6, r6
    9a4c:	1a36      	subs	r6, r6, r0
    9a4e:	4699      	mov	r9, r3
    9a50:	469a      	mov	sl, r3
    9a52:	e79d      	b.n	9990 <__aeabi_fmul+0x30>
    9a54:	230c      	movs	r3, #12
    9a56:	4699      	mov	r9, r3
    9a58:	3b09      	subs	r3, #9
    9a5a:	26ff      	movs	r6, #255	; 0xff
    9a5c:	469a      	mov	sl, r3
    9a5e:	e797      	b.n	9990 <__aeabi_fmul+0x30>
    9a60:	0028      	movs	r0, r5
    9a62:	f001 fcf7 	bl	b454 <__clzsi2>
    9a66:	1f43      	subs	r3, r0, #5
    9a68:	409d      	lsls	r5, r3
    9a6a:	2376      	movs	r3, #118	; 0x76
    9a6c:	425b      	negs	r3, r3
    9a6e:	1a18      	subs	r0, r3, r0
    9a70:	2200      	movs	r2, #0
    9a72:	e79d      	b.n	99b0 <__aeabi_fmul+0x50>
    9a74:	2080      	movs	r0, #128	; 0x80
    9a76:	2400      	movs	r4, #0
    9a78:	03c0      	lsls	r0, r0, #15
    9a7a:	22ff      	movs	r2, #255	; 0xff
    9a7c:	e7ba      	b.n	99f4 <__aeabi_fmul+0x94>
    9a7e:	003d      	movs	r5, r7
    9a80:	4652      	mov	r2, sl
    9a82:	e7ab      	b.n	99dc <__aeabi_fmul+0x7c>
    9a84:	003d      	movs	r5, r7
    9a86:	0021      	movs	r1, r4
    9a88:	4652      	mov	r2, sl
    9a8a:	e7a7      	b.n	99dc <__aeabi_fmul+0x7c>
    9a8c:	0c3b      	lsrs	r3, r7, #16
    9a8e:	469c      	mov	ip, r3
    9a90:	042a      	lsls	r2, r5, #16
    9a92:	0c12      	lsrs	r2, r2, #16
    9a94:	0c2b      	lsrs	r3, r5, #16
    9a96:	0014      	movs	r4, r2
    9a98:	4660      	mov	r0, ip
    9a9a:	4665      	mov	r5, ip
    9a9c:	043f      	lsls	r7, r7, #16
    9a9e:	0c3f      	lsrs	r7, r7, #16
    9aa0:	437c      	muls	r4, r7
    9aa2:	4342      	muls	r2, r0
    9aa4:	435d      	muls	r5, r3
    9aa6:	437b      	muls	r3, r7
    9aa8:	0c27      	lsrs	r7, r4, #16
    9aaa:	189b      	adds	r3, r3, r2
    9aac:	18ff      	adds	r7, r7, r3
    9aae:	42ba      	cmp	r2, r7
    9ab0:	d903      	bls.n	9aba <__aeabi_fmul+0x15a>
    9ab2:	2380      	movs	r3, #128	; 0x80
    9ab4:	025b      	lsls	r3, r3, #9
    9ab6:	469c      	mov	ip, r3
    9ab8:	4465      	add	r5, ip
    9aba:	0424      	lsls	r4, r4, #16
    9abc:	043a      	lsls	r2, r7, #16
    9abe:	0c24      	lsrs	r4, r4, #16
    9ac0:	1912      	adds	r2, r2, r4
    9ac2:	0193      	lsls	r3, r2, #6
    9ac4:	1e5c      	subs	r4, r3, #1
    9ac6:	41a3      	sbcs	r3, r4
    9ac8:	0c3f      	lsrs	r7, r7, #16
    9aca:	0e92      	lsrs	r2, r2, #26
    9acc:	197d      	adds	r5, r7, r5
    9ace:	431a      	orrs	r2, r3
    9ad0:	01ad      	lsls	r5, r5, #6
    9ad2:	4315      	orrs	r5, r2
    9ad4:	012b      	lsls	r3, r5, #4
    9ad6:	d504      	bpl.n	9ae2 <__aeabi_fmul+0x182>
    9ad8:	2301      	movs	r3, #1
    9ada:	465e      	mov	r6, fp
    9adc:	086a      	lsrs	r2, r5, #1
    9ade:	401d      	ands	r5, r3
    9ae0:	4315      	orrs	r5, r2
    9ae2:	0032      	movs	r2, r6
    9ae4:	327f      	adds	r2, #127	; 0x7f
    9ae6:	2a00      	cmp	r2, #0
    9ae8:	dd25      	ble.n	9b36 <__aeabi_fmul+0x1d6>
    9aea:	076b      	lsls	r3, r5, #29
    9aec:	d004      	beq.n	9af8 <__aeabi_fmul+0x198>
    9aee:	230f      	movs	r3, #15
    9af0:	402b      	ands	r3, r5
    9af2:	2b04      	cmp	r3, #4
    9af4:	d000      	beq.n	9af8 <__aeabi_fmul+0x198>
    9af6:	3504      	adds	r5, #4
    9af8:	012b      	lsls	r3, r5, #4
    9afa:	d503      	bpl.n	9b04 <__aeabi_fmul+0x1a4>
    9afc:	0032      	movs	r2, r6
    9afe:	4b27      	ldr	r3, [pc, #156]	; (9b9c <__aeabi_fmul+0x23c>)
    9b00:	3280      	adds	r2, #128	; 0x80
    9b02:	401d      	ands	r5, r3
    9b04:	2afe      	cmp	r2, #254	; 0xfe
    9b06:	dc94      	bgt.n	9a32 <__aeabi_fmul+0xd2>
    9b08:	2401      	movs	r4, #1
    9b0a:	01a8      	lsls	r0, r5, #6
    9b0c:	0a40      	lsrs	r0, r0, #9
    9b0e:	b2d2      	uxtb	r2, r2
    9b10:	400c      	ands	r4, r1
    9b12:	e76f      	b.n	99f4 <__aeabi_fmul+0x94>
    9b14:	2080      	movs	r0, #128	; 0x80
    9b16:	03c0      	lsls	r0, r0, #15
    9b18:	4207      	tst	r7, r0
    9b1a:	d007      	beq.n	9b2c <__aeabi_fmul+0x1cc>
    9b1c:	4205      	tst	r5, r0
    9b1e:	d105      	bne.n	9b2c <__aeabi_fmul+0x1cc>
    9b20:	4328      	orrs	r0, r5
    9b22:	0240      	lsls	r0, r0, #9
    9b24:	0a40      	lsrs	r0, r0, #9
    9b26:	4644      	mov	r4, r8
    9b28:	22ff      	movs	r2, #255	; 0xff
    9b2a:	e763      	b.n	99f4 <__aeabi_fmul+0x94>
    9b2c:	4338      	orrs	r0, r7
    9b2e:	0240      	lsls	r0, r0, #9
    9b30:	0a40      	lsrs	r0, r0, #9
    9b32:	22ff      	movs	r2, #255	; 0xff
    9b34:	e75e      	b.n	99f4 <__aeabi_fmul+0x94>
    9b36:	2401      	movs	r4, #1
    9b38:	1aa3      	subs	r3, r4, r2
    9b3a:	2b1b      	cmp	r3, #27
    9b3c:	dd05      	ble.n	9b4a <__aeabi_fmul+0x1ea>
    9b3e:	400c      	ands	r4, r1
    9b40:	2200      	movs	r2, #0
    9b42:	2000      	movs	r0, #0
    9b44:	e756      	b.n	99f4 <__aeabi_fmul+0x94>
    9b46:	465e      	mov	r6, fp
    9b48:	e7cb      	b.n	9ae2 <__aeabi_fmul+0x182>
    9b4a:	002a      	movs	r2, r5
    9b4c:	2020      	movs	r0, #32
    9b4e:	40da      	lsrs	r2, r3
    9b50:	1ac3      	subs	r3, r0, r3
    9b52:	409d      	lsls	r5, r3
    9b54:	002b      	movs	r3, r5
    9b56:	1e5d      	subs	r5, r3, #1
    9b58:	41ab      	sbcs	r3, r5
    9b5a:	4313      	orrs	r3, r2
    9b5c:	075a      	lsls	r2, r3, #29
    9b5e:	d004      	beq.n	9b6a <__aeabi_fmul+0x20a>
    9b60:	220f      	movs	r2, #15
    9b62:	401a      	ands	r2, r3
    9b64:	2a04      	cmp	r2, #4
    9b66:	d000      	beq.n	9b6a <__aeabi_fmul+0x20a>
    9b68:	3304      	adds	r3, #4
    9b6a:	015a      	lsls	r2, r3, #5
    9b6c:	d504      	bpl.n	9b78 <__aeabi_fmul+0x218>
    9b6e:	2401      	movs	r4, #1
    9b70:	2201      	movs	r2, #1
    9b72:	400c      	ands	r4, r1
    9b74:	2000      	movs	r0, #0
    9b76:	e73d      	b.n	99f4 <__aeabi_fmul+0x94>
    9b78:	2401      	movs	r4, #1
    9b7a:	019b      	lsls	r3, r3, #6
    9b7c:	0a58      	lsrs	r0, r3, #9
    9b7e:	400c      	ands	r4, r1
    9b80:	2200      	movs	r2, #0
    9b82:	e737      	b.n	99f4 <__aeabi_fmul+0x94>
    9b84:	2080      	movs	r0, #128	; 0x80
    9b86:	2401      	movs	r4, #1
    9b88:	03c0      	lsls	r0, r0, #15
    9b8a:	4328      	orrs	r0, r5
    9b8c:	0240      	lsls	r0, r0, #9
    9b8e:	0a40      	lsrs	r0, r0, #9
    9b90:	400c      	ands	r4, r1
    9b92:	22ff      	movs	r2, #255	; 0xff
    9b94:	e72e      	b.n	99f4 <__aeabi_fmul+0x94>
    9b96:	46c0      	nop			; (mov r8, r8)
    9b98:	00010f0c 	.word	0x00010f0c
    9b9c:	f7ffffff 	.word	0xf7ffffff

00009ba0 <__aeabi_fsub>:
    9ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
    9ba2:	464f      	mov	r7, r9
    9ba4:	46d6      	mov	lr, sl
    9ba6:	4646      	mov	r6, r8
    9ba8:	0044      	lsls	r4, r0, #1
    9baa:	b5c0      	push	{r6, r7, lr}
    9bac:	0fc2      	lsrs	r2, r0, #31
    9bae:	0247      	lsls	r7, r0, #9
    9bb0:	0248      	lsls	r0, r1, #9
    9bb2:	0a40      	lsrs	r0, r0, #9
    9bb4:	4684      	mov	ip, r0
    9bb6:	4666      	mov	r6, ip
    9bb8:	0a7b      	lsrs	r3, r7, #9
    9bba:	0048      	lsls	r0, r1, #1
    9bbc:	0fc9      	lsrs	r1, r1, #31
    9bbe:	469a      	mov	sl, r3
    9bc0:	0e24      	lsrs	r4, r4, #24
    9bc2:	0015      	movs	r5, r2
    9bc4:	00db      	lsls	r3, r3, #3
    9bc6:	0e00      	lsrs	r0, r0, #24
    9bc8:	4689      	mov	r9, r1
    9bca:	00f6      	lsls	r6, r6, #3
    9bcc:	28ff      	cmp	r0, #255	; 0xff
    9bce:	d100      	bne.n	9bd2 <__aeabi_fsub+0x32>
    9bd0:	e08f      	b.n	9cf2 <__aeabi_fsub+0x152>
    9bd2:	2101      	movs	r1, #1
    9bd4:	464f      	mov	r7, r9
    9bd6:	404f      	eors	r7, r1
    9bd8:	0039      	movs	r1, r7
    9bda:	4291      	cmp	r1, r2
    9bdc:	d066      	beq.n	9cac <__aeabi_fsub+0x10c>
    9bde:	1a22      	subs	r2, r4, r0
    9be0:	2a00      	cmp	r2, #0
    9be2:	dc00      	bgt.n	9be6 <__aeabi_fsub+0x46>
    9be4:	e09d      	b.n	9d22 <__aeabi_fsub+0x182>
    9be6:	2800      	cmp	r0, #0
    9be8:	d13d      	bne.n	9c66 <__aeabi_fsub+0xc6>
    9bea:	2e00      	cmp	r6, #0
    9bec:	d100      	bne.n	9bf0 <__aeabi_fsub+0x50>
    9bee:	e08b      	b.n	9d08 <__aeabi_fsub+0x168>
    9bf0:	1e51      	subs	r1, r2, #1
    9bf2:	2900      	cmp	r1, #0
    9bf4:	d000      	beq.n	9bf8 <__aeabi_fsub+0x58>
    9bf6:	e0b5      	b.n	9d64 <__aeabi_fsub+0x1c4>
    9bf8:	2401      	movs	r4, #1
    9bfa:	1b9b      	subs	r3, r3, r6
    9bfc:	015a      	lsls	r2, r3, #5
    9bfe:	d544      	bpl.n	9c8a <__aeabi_fsub+0xea>
    9c00:	019b      	lsls	r3, r3, #6
    9c02:	099f      	lsrs	r7, r3, #6
    9c04:	0038      	movs	r0, r7
    9c06:	f001 fc25 	bl	b454 <__clzsi2>
    9c0a:	3805      	subs	r0, #5
    9c0c:	4087      	lsls	r7, r0
    9c0e:	4284      	cmp	r4, r0
    9c10:	dd00      	ble.n	9c14 <__aeabi_fsub+0x74>
    9c12:	e096      	b.n	9d42 <__aeabi_fsub+0x1a2>
    9c14:	1b04      	subs	r4, r0, r4
    9c16:	003a      	movs	r2, r7
    9c18:	2020      	movs	r0, #32
    9c1a:	3401      	adds	r4, #1
    9c1c:	40e2      	lsrs	r2, r4
    9c1e:	1b04      	subs	r4, r0, r4
    9c20:	40a7      	lsls	r7, r4
    9c22:	003b      	movs	r3, r7
    9c24:	1e5f      	subs	r7, r3, #1
    9c26:	41bb      	sbcs	r3, r7
    9c28:	2400      	movs	r4, #0
    9c2a:	4313      	orrs	r3, r2
    9c2c:	075a      	lsls	r2, r3, #29
    9c2e:	d004      	beq.n	9c3a <__aeabi_fsub+0x9a>
    9c30:	220f      	movs	r2, #15
    9c32:	401a      	ands	r2, r3
    9c34:	2a04      	cmp	r2, #4
    9c36:	d000      	beq.n	9c3a <__aeabi_fsub+0x9a>
    9c38:	3304      	adds	r3, #4
    9c3a:	015a      	lsls	r2, r3, #5
    9c3c:	d527      	bpl.n	9c8e <__aeabi_fsub+0xee>
    9c3e:	3401      	adds	r4, #1
    9c40:	2cff      	cmp	r4, #255	; 0xff
    9c42:	d100      	bne.n	9c46 <__aeabi_fsub+0xa6>
    9c44:	e079      	b.n	9d3a <__aeabi_fsub+0x19a>
    9c46:	2201      	movs	r2, #1
    9c48:	019b      	lsls	r3, r3, #6
    9c4a:	0a5b      	lsrs	r3, r3, #9
    9c4c:	b2e4      	uxtb	r4, r4
    9c4e:	402a      	ands	r2, r5
    9c50:	025b      	lsls	r3, r3, #9
    9c52:	05e4      	lsls	r4, r4, #23
    9c54:	0a58      	lsrs	r0, r3, #9
    9c56:	07d2      	lsls	r2, r2, #31
    9c58:	4320      	orrs	r0, r4
    9c5a:	4310      	orrs	r0, r2
    9c5c:	bc1c      	pop	{r2, r3, r4}
    9c5e:	4690      	mov	r8, r2
    9c60:	4699      	mov	r9, r3
    9c62:	46a2      	mov	sl, r4
    9c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9c66:	2cff      	cmp	r4, #255	; 0xff
    9c68:	d0e0      	beq.n	9c2c <__aeabi_fsub+0x8c>
    9c6a:	2180      	movs	r1, #128	; 0x80
    9c6c:	04c9      	lsls	r1, r1, #19
    9c6e:	430e      	orrs	r6, r1
    9c70:	2a1b      	cmp	r2, #27
    9c72:	dc7b      	bgt.n	9d6c <__aeabi_fsub+0x1cc>
    9c74:	0031      	movs	r1, r6
    9c76:	2020      	movs	r0, #32
    9c78:	40d1      	lsrs	r1, r2
    9c7a:	1a82      	subs	r2, r0, r2
    9c7c:	4096      	lsls	r6, r2
    9c7e:	1e72      	subs	r2, r6, #1
    9c80:	4196      	sbcs	r6, r2
    9c82:	430e      	orrs	r6, r1
    9c84:	1b9b      	subs	r3, r3, r6
    9c86:	015a      	lsls	r2, r3, #5
    9c88:	d4ba      	bmi.n	9c00 <__aeabi_fsub+0x60>
    9c8a:	075a      	lsls	r2, r3, #29
    9c8c:	d1d0      	bne.n	9c30 <__aeabi_fsub+0x90>
    9c8e:	2201      	movs	r2, #1
    9c90:	08df      	lsrs	r7, r3, #3
    9c92:	402a      	ands	r2, r5
    9c94:	2cff      	cmp	r4, #255	; 0xff
    9c96:	d133      	bne.n	9d00 <__aeabi_fsub+0x160>
    9c98:	2f00      	cmp	r7, #0
    9c9a:	d100      	bne.n	9c9e <__aeabi_fsub+0xfe>
    9c9c:	e0a8      	b.n	9df0 <__aeabi_fsub+0x250>
    9c9e:	2380      	movs	r3, #128	; 0x80
    9ca0:	03db      	lsls	r3, r3, #15
    9ca2:	433b      	orrs	r3, r7
    9ca4:	025b      	lsls	r3, r3, #9
    9ca6:	0a5b      	lsrs	r3, r3, #9
    9ca8:	24ff      	movs	r4, #255	; 0xff
    9caa:	e7d1      	b.n	9c50 <__aeabi_fsub+0xb0>
    9cac:	1a21      	subs	r1, r4, r0
    9cae:	2900      	cmp	r1, #0
    9cb0:	dd4c      	ble.n	9d4c <__aeabi_fsub+0x1ac>
    9cb2:	2800      	cmp	r0, #0
    9cb4:	d02a      	beq.n	9d0c <__aeabi_fsub+0x16c>
    9cb6:	2cff      	cmp	r4, #255	; 0xff
    9cb8:	d0b8      	beq.n	9c2c <__aeabi_fsub+0x8c>
    9cba:	2080      	movs	r0, #128	; 0x80
    9cbc:	04c0      	lsls	r0, r0, #19
    9cbe:	4306      	orrs	r6, r0
    9cc0:	291b      	cmp	r1, #27
    9cc2:	dd00      	ble.n	9cc6 <__aeabi_fsub+0x126>
    9cc4:	e0af      	b.n	9e26 <__aeabi_fsub+0x286>
    9cc6:	0030      	movs	r0, r6
    9cc8:	2720      	movs	r7, #32
    9cca:	40c8      	lsrs	r0, r1
    9ccc:	1a79      	subs	r1, r7, r1
    9cce:	408e      	lsls	r6, r1
    9cd0:	1e71      	subs	r1, r6, #1
    9cd2:	418e      	sbcs	r6, r1
    9cd4:	4306      	orrs	r6, r0
    9cd6:	199b      	adds	r3, r3, r6
    9cd8:	0159      	lsls	r1, r3, #5
    9cda:	d5d6      	bpl.n	9c8a <__aeabi_fsub+0xea>
    9cdc:	3401      	adds	r4, #1
    9cde:	2cff      	cmp	r4, #255	; 0xff
    9ce0:	d100      	bne.n	9ce4 <__aeabi_fsub+0x144>
    9ce2:	e085      	b.n	9df0 <__aeabi_fsub+0x250>
    9ce4:	2201      	movs	r2, #1
    9ce6:	497a      	ldr	r1, [pc, #488]	; (9ed0 <__aeabi_fsub+0x330>)
    9ce8:	401a      	ands	r2, r3
    9cea:	085b      	lsrs	r3, r3, #1
    9cec:	400b      	ands	r3, r1
    9cee:	4313      	orrs	r3, r2
    9cf0:	e79c      	b.n	9c2c <__aeabi_fsub+0x8c>
    9cf2:	2e00      	cmp	r6, #0
    9cf4:	d000      	beq.n	9cf8 <__aeabi_fsub+0x158>
    9cf6:	e770      	b.n	9bda <__aeabi_fsub+0x3a>
    9cf8:	e76b      	b.n	9bd2 <__aeabi_fsub+0x32>
    9cfa:	1e3b      	subs	r3, r7, #0
    9cfc:	d1c5      	bne.n	9c8a <__aeabi_fsub+0xea>
    9cfe:	2200      	movs	r2, #0
    9d00:	027b      	lsls	r3, r7, #9
    9d02:	0a5b      	lsrs	r3, r3, #9
    9d04:	b2e4      	uxtb	r4, r4
    9d06:	e7a3      	b.n	9c50 <__aeabi_fsub+0xb0>
    9d08:	0014      	movs	r4, r2
    9d0a:	e78f      	b.n	9c2c <__aeabi_fsub+0x8c>
    9d0c:	2e00      	cmp	r6, #0
    9d0e:	d04d      	beq.n	9dac <__aeabi_fsub+0x20c>
    9d10:	1e48      	subs	r0, r1, #1
    9d12:	2800      	cmp	r0, #0
    9d14:	d157      	bne.n	9dc6 <__aeabi_fsub+0x226>
    9d16:	199b      	adds	r3, r3, r6
    9d18:	2401      	movs	r4, #1
    9d1a:	015a      	lsls	r2, r3, #5
    9d1c:	d5b5      	bpl.n	9c8a <__aeabi_fsub+0xea>
    9d1e:	2402      	movs	r4, #2
    9d20:	e7e0      	b.n	9ce4 <__aeabi_fsub+0x144>
    9d22:	2a00      	cmp	r2, #0
    9d24:	d125      	bne.n	9d72 <__aeabi_fsub+0x1d2>
    9d26:	1c62      	adds	r2, r4, #1
    9d28:	b2d2      	uxtb	r2, r2
    9d2a:	2a01      	cmp	r2, #1
    9d2c:	dd72      	ble.n	9e14 <__aeabi_fsub+0x274>
    9d2e:	1b9f      	subs	r7, r3, r6
    9d30:	017a      	lsls	r2, r7, #5
    9d32:	d535      	bpl.n	9da0 <__aeabi_fsub+0x200>
    9d34:	1af7      	subs	r7, r6, r3
    9d36:	000d      	movs	r5, r1
    9d38:	e764      	b.n	9c04 <__aeabi_fsub+0x64>
    9d3a:	2201      	movs	r2, #1
    9d3c:	2300      	movs	r3, #0
    9d3e:	402a      	ands	r2, r5
    9d40:	e786      	b.n	9c50 <__aeabi_fsub+0xb0>
    9d42:	003b      	movs	r3, r7
    9d44:	4a63      	ldr	r2, [pc, #396]	; (9ed4 <__aeabi_fsub+0x334>)
    9d46:	1a24      	subs	r4, r4, r0
    9d48:	4013      	ands	r3, r2
    9d4a:	e76f      	b.n	9c2c <__aeabi_fsub+0x8c>
    9d4c:	2900      	cmp	r1, #0
    9d4e:	d16c      	bne.n	9e2a <__aeabi_fsub+0x28a>
    9d50:	1c61      	adds	r1, r4, #1
    9d52:	b2c8      	uxtb	r0, r1
    9d54:	2801      	cmp	r0, #1
    9d56:	dd4e      	ble.n	9df6 <__aeabi_fsub+0x256>
    9d58:	29ff      	cmp	r1, #255	; 0xff
    9d5a:	d049      	beq.n	9df0 <__aeabi_fsub+0x250>
    9d5c:	199b      	adds	r3, r3, r6
    9d5e:	085b      	lsrs	r3, r3, #1
    9d60:	000c      	movs	r4, r1
    9d62:	e763      	b.n	9c2c <__aeabi_fsub+0x8c>
    9d64:	2aff      	cmp	r2, #255	; 0xff
    9d66:	d041      	beq.n	9dec <__aeabi_fsub+0x24c>
    9d68:	000a      	movs	r2, r1
    9d6a:	e781      	b.n	9c70 <__aeabi_fsub+0xd0>
    9d6c:	2601      	movs	r6, #1
    9d6e:	1b9b      	subs	r3, r3, r6
    9d70:	e789      	b.n	9c86 <__aeabi_fsub+0xe6>
    9d72:	2c00      	cmp	r4, #0
    9d74:	d01c      	beq.n	9db0 <__aeabi_fsub+0x210>
    9d76:	28ff      	cmp	r0, #255	; 0xff
    9d78:	d021      	beq.n	9dbe <__aeabi_fsub+0x21e>
    9d7a:	2480      	movs	r4, #128	; 0x80
    9d7c:	04e4      	lsls	r4, r4, #19
    9d7e:	4252      	negs	r2, r2
    9d80:	4323      	orrs	r3, r4
    9d82:	2a1b      	cmp	r2, #27
    9d84:	dd00      	ble.n	9d88 <__aeabi_fsub+0x1e8>
    9d86:	e096      	b.n	9eb6 <__aeabi_fsub+0x316>
    9d88:	001c      	movs	r4, r3
    9d8a:	2520      	movs	r5, #32
    9d8c:	40d4      	lsrs	r4, r2
    9d8e:	1aaa      	subs	r2, r5, r2
    9d90:	4093      	lsls	r3, r2
    9d92:	1e5a      	subs	r2, r3, #1
    9d94:	4193      	sbcs	r3, r2
    9d96:	4323      	orrs	r3, r4
    9d98:	1af3      	subs	r3, r6, r3
    9d9a:	0004      	movs	r4, r0
    9d9c:	000d      	movs	r5, r1
    9d9e:	e72d      	b.n	9bfc <__aeabi_fsub+0x5c>
    9da0:	2f00      	cmp	r7, #0
    9da2:	d000      	beq.n	9da6 <__aeabi_fsub+0x206>
    9da4:	e72e      	b.n	9c04 <__aeabi_fsub+0x64>
    9da6:	2200      	movs	r2, #0
    9da8:	2400      	movs	r4, #0
    9daa:	e7a9      	b.n	9d00 <__aeabi_fsub+0x160>
    9dac:	000c      	movs	r4, r1
    9dae:	e73d      	b.n	9c2c <__aeabi_fsub+0x8c>
    9db0:	2b00      	cmp	r3, #0
    9db2:	d058      	beq.n	9e66 <__aeabi_fsub+0x2c6>
    9db4:	43d2      	mvns	r2, r2
    9db6:	2a00      	cmp	r2, #0
    9db8:	d0ee      	beq.n	9d98 <__aeabi_fsub+0x1f8>
    9dba:	28ff      	cmp	r0, #255	; 0xff
    9dbc:	d1e1      	bne.n	9d82 <__aeabi_fsub+0x1e2>
    9dbe:	0033      	movs	r3, r6
    9dc0:	24ff      	movs	r4, #255	; 0xff
    9dc2:	000d      	movs	r5, r1
    9dc4:	e732      	b.n	9c2c <__aeabi_fsub+0x8c>
    9dc6:	29ff      	cmp	r1, #255	; 0xff
    9dc8:	d010      	beq.n	9dec <__aeabi_fsub+0x24c>
    9dca:	0001      	movs	r1, r0
    9dcc:	e778      	b.n	9cc0 <__aeabi_fsub+0x120>
    9dce:	2b00      	cmp	r3, #0
    9dd0:	d06e      	beq.n	9eb0 <__aeabi_fsub+0x310>
    9dd2:	24ff      	movs	r4, #255	; 0xff
    9dd4:	2e00      	cmp	r6, #0
    9dd6:	d100      	bne.n	9dda <__aeabi_fsub+0x23a>
    9dd8:	e728      	b.n	9c2c <__aeabi_fsub+0x8c>
    9dda:	2280      	movs	r2, #128	; 0x80
    9ddc:	4651      	mov	r1, sl
    9dde:	03d2      	lsls	r2, r2, #15
    9de0:	4211      	tst	r1, r2
    9de2:	d003      	beq.n	9dec <__aeabi_fsub+0x24c>
    9de4:	4661      	mov	r1, ip
    9de6:	4211      	tst	r1, r2
    9de8:	d100      	bne.n	9dec <__aeabi_fsub+0x24c>
    9dea:	0033      	movs	r3, r6
    9dec:	24ff      	movs	r4, #255	; 0xff
    9dee:	e71d      	b.n	9c2c <__aeabi_fsub+0x8c>
    9df0:	24ff      	movs	r4, #255	; 0xff
    9df2:	2300      	movs	r3, #0
    9df4:	e72c      	b.n	9c50 <__aeabi_fsub+0xb0>
    9df6:	2c00      	cmp	r4, #0
    9df8:	d1e9      	bne.n	9dce <__aeabi_fsub+0x22e>
    9dfa:	2b00      	cmp	r3, #0
    9dfc:	d063      	beq.n	9ec6 <__aeabi_fsub+0x326>
    9dfe:	2e00      	cmp	r6, #0
    9e00:	d100      	bne.n	9e04 <__aeabi_fsub+0x264>
    9e02:	e713      	b.n	9c2c <__aeabi_fsub+0x8c>
    9e04:	199b      	adds	r3, r3, r6
    9e06:	015a      	lsls	r2, r3, #5
    9e08:	d400      	bmi.n	9e0c <__aeabi_fsub+0x26c>
    9e0a:	e73e      	b.n	9c8a <__aeabi_fsub+0xea>
    9e0c:	4a31      	ldr	r2, [pc, #196]	; (9ed4 <__aeabi_fsub+0x334>)
    9e0e:	000c      	movs	r4, r1
    9e10:	4013      	ands	r3, r2
    9e12:	e70b      	b.n	9c2c <__aeabi_fsub+0x8c>
    9e14:	2c00      	cmp	r4, #0
    9e16:	d11e      	bne.n	9e56 <__aeabi_fsub+0x2b6>
    9e18:	2b00      	cmp	r3, #0
    9e1a:	d12f      	bne.n	9e7c <__aeabi_fsub+0x2dc>
    9e1c:	2e00      	cmp	r6, #0
    9e1e:	d04f      	beq.n	9ec0 <__aeabi_fsub+0x320>
    9e20:	0033      	movs	r3, r6
    9e22:	000d      	movs	r5, r1
    9e24:	e702      	b.n	9c2c <__aeabi_fsub+0x8c>
    9e26:	2601      	movs	r6, #1
    9e28:	e755      	b.n	9cd6 <__aeabi_fsub+0x136>
    9e2a:	2c00      	cmp	r4, #0
    9e2c:	d11f      	bne.n	9e6e <__aeabi_fsub+0x2ce>
    9e2e:	2b00      	cmp	r3, #0
    9e30:	d043      	beq.n	9eba <__aeabi_fsub+0x31a>
    9e32:	43c9      	mvns	r1, r1
    9e34:	2900      	cmp	r1, #0
    9e36:	d00b      	beq.n	9e50 <__aeabi_fsub+0x2b0>
    9e38:	28ff      	cmp	r0, #255	; 0xff
    9e3a:	d039      	beq.n	9eb0 <__aeabi_fsub+0x310>
    9e3c:	291b      	cmp	r1, #27
    9e3e:	dc44      	bgt.n	9eca <__aeabi_fsub+0x32a>
    9e40:	001c      	movs	r4, r3
    9e42:	2720      	movs	r7, #32
    9e44:	40cc      	lsrs	r4, r1
    9e46:	1a79      	subs	r1, r7, r1
    9e48:	408b      	lsls	r3, r1
    9e4a:	1e59      	subs	r1, r3, #1
    9e4c:	418b      	sbcs	r3, r1
    9e4e:	4323      	orrs	r3, r4
    9e50:	199b      	adds	r3, r3, r6
    9e52:	0004      	movs	r4, r0
    9e54:	e740      	b.n	9cd8 <__aeabi_fsub+0x138>
    9e56:	2b00      	cmp	r3, #0
    9e58:	d11a      	bne.n	9e90 <__aeabi_fsub+0x2f0>
    9e5a:	2e00      	cmp	r6, #0
    9e5c:	d124      	bne.n	9ea8 <__aeabi_fsub+0x308>
    9e5e:	2780      	movs	r7, #128	; 0x80
    9e60:	2200      	movs	r2, #0
    9e62:	03ff      	lsls	r7, r7, #15
    9e64:	e71b      	b.n	9c9e <__aeabi_fsub+0xfe>
    9e66:	0033      	movs	r3, r6
    9e68:	0004      	movs	r4, r0
    9e6a:	000d      	movs	r5, r1
    9e6c:	e6de      	b.n	9c2c <__aeabi_fsub+0x8c>
    9e6e:	28ff      	cmp	r0, #255	; 0xff
    9e70:	d01e      	beq.n	9eb0 <__aeabi_fsub+0x310>
    9e72:	2480      	movs	r4, #128	; 0x80
    9e74:	04e4      	lsls	r4, r4, #19
    9e76:	4249      	negs	r1, r1
    9e78:	4323      	orrs	r3, r4
    9e7a:	e7df      	b.n	9e3c <__aeabi_fsub+0x29c>
    9e7c:	2e00      	cmp	r6, #0
    9e7e:	d100      	bne.n	9e82 <__aeabi_fsub+0x2e2>
    9e80:	e6d4      	b.n	9c2c <__aeabi_fsub+0x8c>
    9e82:	1b9f      	subs	r7, r3, r6
    9e84:	017a      	lsls	r2, r7, #5
    9e86:	d400      	bmi.n	9e8a <__aeabi_fsub+0x2ea>
    9e88:	e737      	b.n	9cfa <__aeabi_fsub+0x15a>
    9e8a:	1af3      	subs	r3, r6, r3
    9e8c:	000d      	movs	r5, r1
    9e8e:	e6cd      	b.n	9c2c <__aeabi_fsub+0x8c>
    9e90:	24ff      	movs	r4, #255	; 0xff
    9e92:	2e00      	cmp	r6, #0
    9e94:	d100      	bne.n	9e98 <__aeabi_fsub+0x2f8>
    9e96:	e6c9      	b.n	9c2c <__aeabi_fsub+0x8c>
    9e98:	2280      	movs	r2, #128	; 0x80
    9e9a:	4650      	mov	r0, sl
    9e9c:	03d2      	lsls	r2, r2, #15
    9e9e:	4210      	tst	r0, r2
    9ea0:	d0a4      	beq.n	9dec <__aeabi_fsub+0x24c>
    9ea2:	4660      	mov	r0, ip
    9ea4:	4210      	tst	r0, r2
    9ea6:	d1a1      	bne.n	9dec <__aeabi_fsub+0x24c>
    9ea8:	0033      	movs	r3, r6
    9eaa:	000d      	movs	r5, r1
    9eac:	24ff      	movs	r4, #255	; 0xff
    9eae:	e6bd      	b.n	9c2c <__aeabi_fsub+0x8c>
    9eb0:	0033      	movs	r3, r6
    9eb2:	24ff      	movs	r4, #255	; 0xff
    9eb4:	e6ba      	b.n	9c2c <__aeabi_fsub+0x8c>
    9eb6:	2301      	movs	r3, #1
    9eb8:	e76e      	b.n	9d98 <__aeabi_fsub+0x1f8>
    9eba:	0033      	movs	r3, r6
    9ebc:	0004      	movs	r4, r0
    9ebe:	e6b5      	b.n	9c2c <__aeabi_fsub+0x8c>
    9ec0:	2700      	movs	r7, #0
    9ec2:	2200      	movs	r2, #0
    9ec4:	e71c      	b.n	9d00 <__aeabi_fsub+0x160>
    9ec6:	0033      	movs	r3, r6
    9ec8:	e6b0      	b.n	9c2c <__aeabi_fsub+0x8c>
    9eca:	2301      	movs	r3, #1
    9ecc:	e7c0      	b.n	9e50 <__aeabi_fsub+0x2b0>
    9ece:	46c0      	nop			; (mov r8, r8)
    9ed0:	7dffffff 	.word	0x7dffffff
    9ed4:	fbffffff 	.word	0xfbffffff

00009ed8 <__aeabi_f2iz>:
    9ed8:	0241      	lsls	r1, r0, #9
    9eda:	0043      	lsls	r3, r0, #1
    9edc:	0fc2      	lsrs	r2, r0, #31
    9ede:	0a49      	lsrs	r1, r1, #9
    9ee0:	0e1b      	lsrs	r3, r3, #24
    9ee2:	2000      	movs	r0, #0
    9ee4:	2b7e      	cmp	r3, #126	; 0x7e
    9ee6:	dd0d      	ble.n	9f04 <__aeabi_f2iz+0x2c>
    9ee8:	2b9d      	cmp	r3, #157	; 0x9d
    9eea:	dc0c      	bgt.n	9f06 <__aeabi_f2iz+0x2e>
    9eec:	2080      	movs	r0, #128	; 0x80
    9eee:	0400      	lsls	r0, r0, #16
    9ef0:	4301      	orrs	r1, r0
    9ef2:	2b95      	cmp	r3, #149	; 0x95
    9ef4:	dc0a      	bgt.n	9f0c <__aeabi_f2iz+0x34>
    9ef6:	2096      	movs	r0, #150	; 0x96
    9ef8:	1ac3      	subs	r3, r0, r3
    9efa:	40d9      	lsrs	r1, r3
    9efc:	4248      	negs	r0, r1
    9efe:	2a00      	cmp	r2, #0
    9f00:	d100      	bne.n	9f04 <__aeabi_f2iz+0x2c>
    9f02:	0008      	movs	r0, r1
    9f04:	4770      	bx	lr
    9f06:	4b03      	ldr	r3, [pc, #12]	; (9f14 <__aeabi_f2iz+0x3c>)
    9f08:	18d0      	adds	r0, r2, r3
    9f0a:	e7fb      	b.n	9f04 <__aeabi_f2iz+0x2c>
    9f0c:	3b96      	subs	r3, #150	; 0x96
    9f0e:	4099      	lsls	r1, r3
    9f10:	e7f4      	b.n	9efc <__aeabi_f2iz+0x24>
    9f12:	46c0      	nop			; (mov r8, r8)
    9f14:	7fffffff 	.word	0x7fffffff

00009f18 <__aeabi_i2f>:
    9f18:	b570      	push	{r4, r5, r6, lr}
    9f1a:	2800      	cmp	r0, #0
    9f1c:	d030      	beq.n	9f80 <__aeabi_i2f+0x68>
    9f1e:	17c3      	asrs	r3, r0, #31
    9f20:	18c4      	adds	r4, r0, r3
    9f22:	405c      	eors	r4, r3
    9f24:	0fc5      	lsrs	r5, r0, #31
    9f26:	0020      	movs	r0, r4
    9f28:	f001 fa94 	bl	b454 <__clzsi2>
    9f2c:	239e      	movs	r3, #158	; 0x9e
    9f2e:	1a1b      	subs	r3, r3, r0
    9f30:	2b96      	cmp	r3, #150	; 0x96
    9f32:	dc0d      	bgt.n	9f50 <__aeabi_i2f+0x38>
    9f34:	2296      	movs	r2, #150	; 0x96
    9f36:	1ad2      	subs	r2, r2, r3
    9f38:	4094      	lsls	r4, r2
    9f3a:	002a      	movs	r2, r5
    9f3c:	0264      	lsls	r4, r4, #9
    9f3e:	0a64      	lsrs	r4, r4, #9
    9f40:	b2db      	uxtb	r3, r3
    9f42:	0264      	lsls	r4, r4, #9
    9f44:	05db      	lsls	r3, r3, #23
    9f46:	0a60      	lsrs	r0, r4, #9
    9f48:	07d2      	lsls	r2, r2, #31
    9f4a:	4318      	orrs	r0, r3
    9f4c:	4310      	orrs	r0, r2
    9f4e:	bd70      	pop	{r4, r5, r6, pc}
    9f50:	2b99      	cmp	r3, #153	; 0x99
    9f52:	dc19      	bgt.n	9f88 <__aeabi_i2f+0x70>
    9f54:	2299      	movs	r2, #153	; 0x99
    9f56:	1ad2      	subs	r2, r2, r3
    9f58:	2a00      	cmp	r2, #0
    9f5a:	dd29      	ble.n	9fb0 <__aeabi_i2f+0x98>
    9f5c:	4094      	lsls	r4, r2
    9f5e:	0022      	movs	r2, r4
    9f60:	4c14      	ldr	r4, [pc, #80]	; (9fb4 <__aeabi_i2f+0x9c>)
    9f62:	4014      	ands	r4, r2
    9f64:	0751      	lsls	r1, r2, #29
    9f66:	d004      	beq.n	9f72 <__aeabi_i2f+0x5a>
    9f68:	210f      	movs	r1, #15
    9f6a:	400a      	ands	r2, r1
    9f6c:	2a04      	cmp	r2, #4
    9f6e:	d000      	beq.n	9f72 <__aeabi_i2f+0x5a>
    9f70:	3404      	adds	r4, #4
    9f72:	0162      	lsls	r2, r4, #5
    9f74:	d413      	bmi.n	9f9e <__aeabi_i2f+0x86>
    9f76:	01a4      	lsls	r4, r4, #6
    9f78:	0a64      	lsrs	r4, r4, #9
    9f7a:	b2db      	uxtb	r3, r3
    9f7c:	002a      	movs	r2, r5
    9f7e:	e7e0      	b.n	9f42 <__aeabi_i2f+0x2a>
    9f80:	2200      	movs	r2, #0
    9f82:	2300      	movs	r3, #0
    9f84:	2400      	movs	r4, #0
    9f86:	e7dc      	b.n	9f42 <__aeabi_i2f+0x2a>
    9f88:	2205      	movs	r2, #5
    9f8a:	0021      	movs	r1, r4
    9f8c:	1a12      	subs	r2, r2, r0
    9f8e:	40d1      	lsrs	r1, r2
    9f90:	22b9      	movs	r2, #185	; 0xb9
    9f92:	1ad2      	subs	r2, r2, r3
    9f94:	4094      	lsls	r4, r2
    9f96:	1e62      	subs	r2, r4, #1
    9f98:	4194      	sbcs	r4, r2
    9f9a:	430c      	orrs	r4, r1
    9f9c:	e7da      	b.n	9f54 <__aeabi_i2f+0x3c>
    9f9e:	4b05      	ldr	r3, [pc, #20]	; (9fb4 <__aeabi_i2f+0x9c>)
    9fa0:	002a      	movs	r2, r5
    9fa2:	401c      	ands	r4, r3
    9fa4:	239f      	movs	r3, #159	; 0x9f
    9fa6:	01a4      	lsls	r4, r4, #6
    9fa8:	1a1b      	subs	r3, r3, r0
    9faa:	0a64      	lsrs	r4, r4, #9
    9fac:	b2db      	uxtb	r3, r3
    9fae:	e7c8      	b.n	9f42 <__aeabi_i2f+0x2a>
    9fb0:	0022      	movs	r2, r4
    9fb2:	e7d5      	b.n	9f60 <__aeabi_i2f+0x48>
    9fb4:	fbffffff 	.word	0xfbffffff

00009fb8 <__aeabi_ui2f>:
    9fb8:	b510      	push	{r4, lr}
    9fba:	1e04      	subs	r4, r0, #0
    9fbc:	d027      	beq.n	a00e <__aeabi_ui2f+0x56>
    9fbe:	f001 fa49 	bl	b454 <__clzsi2>
    9fc2:	239e      	movs	r3, #158	; 0x9e
    9fc4:	1a1b      	subs	r3, r3, r0
    9fc6:	2b96      	cmp	r3, #150	; 0x96
    9fc8:	dc0a      	bgt.n	9fe0 <__aeabi_ui2f+0x28>
    9fca:	2296      	movs	r2, #150	; 0x96
    9fcc:	1ad2      	subs	r2, r2, r3
    9fce:	4094      	lsls	r4, r2
    9fd0:	0264      	lsls	r4, r4, #9
    9fd2:	0a64      	lsrs	r4, r4, #9
    9fd4:	b2db      	uxtb	r3, r3
    9fd6:	0264      	lsls	r4, r4, #9
    9fd8:	05db      	lsls	r3, r3, #23
    9fda:	0a60      	lsrs	r0, r4, #9
    9fdc:	4318      	orrs	r0, r3
    9fde:	bd10      	pop	{r4, pc}
    9fe0:	2b99      	cmp	r3, #153	; 0x99
    9fe2:	dc17      	bgt.n	a014 <__aeabi_ui2f+0x5c>
    9fe4:	2299      	movs	r2, #153	; 0x99
    9fe6:	1ad2      	subs	r2, r2, r3
    9fe8:	2a00      	cmp	r2, #0
    9fea:	dd27      	ble.n	a03c <__aeabi_ui2f+0x84>
    9fec:	4094      	lsls	r4, r2
    9fee:	0022      	movs	r2, r4
    9ff0:	4c13      	ldr	r4, [pc, #76]	; (a040 <__aeabi_ui2f+0x88>)
    9ff2:	4014      	ands	r4, r2
    9ff4:	0751      	lsls	r1, r2, #29
    9ff6:	d004      	beq.n	a002 <__aeabi_ui2f+0x4a>
    9ff8:	210f      	movs	r1, #15
    9ffa:	400a      	ands	r2, r1
    9ffc:	2a04      	cmp	r2, #4
    9ffe:	d000      	beq.n	a002 <__aeabi_ui2f+0x4a>
    a000:	3404      	adds	r4, #4
    a002:	0162      	lsls	r2, r4, #5
    a004:	d412      	bmi.n	a02c <__aeabi_ui2f+0x74>
    a006:	01a4      	lsls	r4, r4, #6
    a008:	0a64      	lsrs	r4, r4, #9
    a00a:	b2db      	uxtb	r3, r3
    a00c:	e7e3      	b.n	9fd6 <__aeabi_ui2f+0x1e>
    a00e:	2300      	movs	r3, #0
    a010:	2400      	movs	r4, #0
    a012:	e7e0      	b.n	9fd6 <__aeabi_ui2f+0x1e>
    a014:	22b9      	movs	r2, #185	; 0xb9
    a016:	0021      	movs	r1, r4
    a018:	1ad2      	subs	r2, r2, r3
    a01a:	4091      	lsls	r1, r2
    a01c:	000a      	movs	r2, r1
    a01e:	1e51      	subs	r1, r2, #1
    a020:	418a      	sbcs	r2, r1
    a022:	2105      	movs	r1, #5
    a024:	1a09      	subs	r1, r1, r0
    a026:	40cc      	lsrs	r4, r1
    a028:	4314      	orrs	r4, r2
    a02a:	e7db      	b.n	9fe4 <__aeabi_ui2f+0x2c>
    a02c:	4b04      	ldr	r3, [pc, #16]	; (a040 <__aeabi_ui2f+0x88>)
    a02e:	401c      	ands	r4, r3
    a030:	239f      	movs	r3, #159	; 0x9f
    a032:	01a4      	lsls	r4, r4, #6
    a034:	1a1b      	subs	r3, r3, r0
    a036:	0a64      	lsrs	r4, r4, #9
    a038:	b2db      	uxtb	r3, r3
    a03a:	e7cc      	b.n	9fd6 <__aeabi_ui2f+0x1e>
    a03c:	0022      	movs	r2, r4
    a03e:	e7d7      	b.n	9ff0 <__aeabi_ui2f+0x38>
    a040:	fbffffff 	.word	0xfbffffff

0000a044 <__aeabi_ddiv>:
    a044:	b5f0      	push	{r4, r5, r6, r7, lr}
    a046:	4657      	mov	r7, sl
    a048:	4645      	mov	r5, r8
    a04a:	46de      	mov	lr, fp
    a04c:	464e      	mov	r6, r9
    a04e:	b5e0      	push	{r5, r6, r7, lr}
    a050:	004c      	lsls	r4, r1, #1
    a052:	030e      	lsls	r6, r1, #12
    a054:	b087      	sub	sp, #28
    a056:	4683      	mov	fp, r0
    a058:	4692      	mov	sl, r2
    a05a:	001d      	movs	r5, r3
    a05c:	4680      	mov	r8, r0
    a05e:	0b36      	lsrs	r6, r6, #12
    a060:	0d64      	lsrs	r4, r4, #21
    a062:	0fcf      	lsrs	r7, r1, #31
    a064:	2c00      	cmp	r4, #0
    a066:	d04f      	beq.n	a108 <__aeabi_ddiv+0xc4>
    a068:	4b6f      	ldr	r3, [pc, #444]	; (a228 <__aeabi_ddiv+0x1e4>)
    a06a:	429c      	cmp	r4, r3
    a06c:	d035      	beq.n	a0da <__aeabi_ddiv+0x96>
    a06e:	2380      	movs	r3, #128	; 0x80
    a070:	0f42      	lsrs	r2, r0, #29
    a072:	041b      	lsls	r3, r3, #16
    a074:	00f6      	lsls	r6, r6, #3
    a076:	4313      	orrs	r3, r2
    a078:	4333      	orrs	r3, r6
    a07a:	4699      	mov	r9, r3
    a07c:	00c3      	lsls	r3, r0, #3
    a07e:	4698      	mov	r8, r3
    a080:	4b6a      	ldr	r3, [pc, #424]	; (a22c <__aeabi_ddiv+0x1e8>)
    a082:	2600      	movs	r6, #0
    a084:	469c      	mov	ip, r3
    a086:	2300      	movs	r3, #0
    a088:	4464      	add	r4, ip
    a08a:	9303      	str	r3, [sp, #12]
    a08c:	032b      	lsls	r3, r5, #12
    a08e:	0b1b      	lsrs	r3, r3, #12
    a090:	469b      	mov	fp, r3
    a092:	006b      	lsls	r3, r5, #1
    a094:	0fed      	lsrs	r5, r5, #31
    a096:	4650      	mov	r0, sl
    a098:	0d5b      	lsrs	r3, r3, #21
    a09a:	9501      	str	r5, [sp, #4]
    a09c:	d05e      	beq.n	a15c <__aeabi_ddiv+0x118>
    a09e:	4a62      	ldr	r2, [pc, #392]	; (a228 <__aeabi_ddiv+0x1e4>)
    a0a0:	4293      	cmp	r3, r2
    a0a2:	d053      	beq.n	a14c <__aeabi_ddiv+0x108>
    a0a4:	465a      	mov	r2, fp
    a0a6:	00d1      	lsls	r1, r2, #3
    a0a8:	2280      	movs	r2, #128	; 0x80
    a0aa:	0f40      	lsrs	r0, r0, #29
    a0ac:	0412      	lsls	r2, r2, #16
    a0ae:	4302      	orrs	r2, r0
    a0b0:	430a      	orrs	r2, r1
    a0b2:	4693      	mov	fp, r2
    a0b4:	4652      	mov	r2, sl
    a0b6:	00d1      	lsls	r1, r2, #3
    a0b8:	4a5c      	ldr	r2, [pc, #368]	; (a22c <__aeabi_ddiv+0x1e8>)
    a0ba:	4694      	mov	ip, r2
    a0bc:	2200      	movs	r2, #0
    a0be:	4463      	add	r3, ip
    a0c0:	0038      	movs	r0, r7
    a0c2:	4068      	eors	r0, r5
    a0c4:	4684      	mov	ip, r0
    a0c6:	9002      	str	r0, [sp, #8]
    a0c8:	1ae4      	subs	r4, r4, r3
    a0ca:	4316      	orrs	r6, r2
    a0cc:	2e0f      	cmp	r6, #15
    a0ce:	d900      	bls.n	a0d2 <__aeabi_ddiv+0x8e>
    a0d0:	e0b4      	b.n	a23c <__aeabi_ddiv+0x1f8>
    a0d2:	4b57      	ldr	r3, [pc, #348]	; (a230 <__aeabi_ddiv+0x1ec>)
    a0d4:	00b6      	lsls	r6, r6, #2
    a0d6:	599b      	ldr	r3, [r3, r6]
    a0d8:	469f      	mov	pc, r3
    a0da:	0003      	movs	r3, r0
    a0dc:	4333      	orrs	r3, r6
    a0de:	4699      	mov	r9, r3
    a0e0:	d16c      	bne.n	a1bc <__aeabi_ddiv+0x178>
    a0e2:	2300      	movs	r3, #0
    a0e4:	4698      	mov	r8, r3
    a0e6:	3302      	adds	r3, #2
    a0e8:	2608      	movs	r6, #8
    a0ea:	9303      	str	r3, [sp, #12]
    a0ec:	e7ce      	b.n	a08c <__aeabi_ddiv+0x48>
    a0ee:	46cb      	mov	fp, r9
    a0f0:	4641      	mov	r1, r8
    a0f2:	9a03      	ldr	r2, [sp, #12]
    a0f4:	9701      	str	r7, [sp, #4]
    a0f6:	2a02      	cmp	r2, #2
    a0f8:	d165      	bne.n	a1c6 <__aeabi_ddiv+0x182>
    a0fa:	9b01      	ldr	r3, [sp, #4]
    a0fc:	4c4a      	ldr	r4, [pc, #296]	; (a228 <__aeabi_ddiv+0x1e4>)
    a0fe:	469c      	mov	ip, r3
    a100:	2300      	movs	r3, #0
    a102:	2200      	movs	r2, #0
    a104:	4698      	mov	r8, r3
    a106:	e06b      	b.n	a1e0 <__aeabi_ddiv+0x19c>
    a108:	0003      	movs	r3, r0
    a10a:	4333      	orrs	r3, r6
    a10c:	4699      	mov	r9, r3
    a10e:	d04e      	beq.n	a1ae <__aeabi_ddiv+0x16a>
    a110:	2e00      	cmp	r6, #0
    a112:	d100      	bne.n	a116 <__aeabi_ddiv+0xd2>
    a114:	e1bc      	b.n	a490 <__aeabi_ddiv+0x44c>
    a116:	0030      	movs	r0, r6
    a118:	f001 f99c 	bl	b454 <__clzsi2>
    a11c:	0003      	movs	r3, r0
    a11e:	3b0b      	subs	r3, #11
    a120:	2b1c      	cmp	r3, #28
    a122:	dd00      	ble.n	a126 <__aeabi_ddiv+0xe2>
    a124:	e1ac      	b.n	a480 <__aeabi_ddiv+0x43c>
    a126:	221d      	movs	r2, #29
    a128:	1ad3      	subs	r3, r2, r3
    a12a:	465a      	mov	r2, fp
    a12c:	0001      	movs	r1, r0
    a12e:	40da      	lsrs	r2, r3
    a130:	3908      	subs	r1, #8
    a132:	408e      	lsls	r6, r1
    a134:	0013      	movs	r3, r2
    a136:	4333      	orrs	r3, r6
    a138:	4699      	mov	r9, r3
    a13a:	465b      	mov	r3, fp
    a13c:	408b      	lsls	r3, r1
    a13e:	4698      	mov	r8, r3
    a140:	2300      	movs	r3, #0
    a142:	4c3c      	ldr	r4, [pc, #240]	; (a234 <__aeabi_ddiv+0x1f0>)
    a144:	2600      	movs	r6, #0
    a146:	1a24      	subs	r4, r4, r0
    a148:	9303      	str	r3, [sp, #12]
    a14a:	e79f      	b.n	a08c <__aeabi_ddiv+0x48>
    a14c:	4651      	mov	r1, sl
    a14e:	465a      	mov	r2, fp
    a150:	4311      	orrs	r1, r2
    a152:	d129      	bne.n	a1a8 <__aeabi_ddiv+0x164>
    a154:	2200      	movs	r2, #0
    a156:	4693      	mov	fp, r2
    a158:	3202      	adds	r2, #2
    a15a:	e7b1      	b.n	a0c0 <__aeabi_ddiv+0x7c>
    a15c:	4659      	mov	r1, fp
    a15e:	4301      	orrs	r1, r0
    a160:	d01e      	beq.n	a1a0 <__aeabi_ddiv+0x15c>
    a162:	465b      	mov	r3, fp
    a164:	2b00      	cmp	r3, #0
    a166:	d100      	bne.n	a16a <__aeabi_ddiv+0x126>
    a168:	e19e      	b.n	a4a8 <__aeabi_ddiv+0x464>
    a16a:	4658      	mov	r0, fp
    a16c:	f001 f972 	bl	b454 <__clzsi2>
    a170:	0003      	movs	r3, r0
    a172:	3b0b      	subs	r3, #11
    a174:	2b1c      	cmp	r3, #28
    a176:	dd00      	ble.n	a17a <__aeabi_ddiv+0x136>
    a178:	e18f      	b.n	a49a <__aeabi_ddiv+0x456>
    a17a:	0002      	movs	r2, r0
    a17c:	4659      	mov	r1, fp
    a17e:	3a08      	subs	r2, #8
    a180:	4091      	lsls	r1, r2
    a182:	468b      	mov	fp, r1
    a184:	211d      	movs	r1, #29
    a186:	1acb      	subs	r3, r1, r3
    a188:	4651      	mov	r1, sl
    a18a:	40d9      	lsrs	r1, r3
    a18c:	000b      	movs	r3, r1
    a18e:	4659      	mov	r1, fp
    a190:	430b      	orrs	r3, r1
    a192:	4651      	mov	r1, sl
    a194:	469b      	mov	fp, r3
    a196:	4091      	lsls	r1, r2
    a198:	4b26      	ldr	r3, [pc, #152]	; (a234 <__aeabi_ddiv+0x1f0>)
    a19a:	2200      	movs	r2, #0
    a19c:	1a1b      	subs	r3, r3, r0
    a19e:	e78f      	b.n	a0c0 <__aeabi_ddiv+0x7c>
    a1a0:	2300      	movs	r3, #0
    a1a2:	2201      	movs	r2, #1
    a1a4:	469b      	mov	fp, r3
    a1a6:	e78b      	b.n	a0c0 <__aeabi_ddiv+0x7c>
    a1a8:	4651      	mov	r1, sl
    a1aa:	2203      	movs	r2, #3
    a1ac:	e788      	b.n	a0c0 <__aeabi_ddiv+0x7c>
    a1ae:	2300      	movs	r3, #0
    a1b0:	4698      	mov	r8, r3
    a1b2:	3301      	adds	r3, #1
    a1b4:	2604      	movs	r6, #4
    a1b6:	2400      	movs	r4, #0
    a1b8:	9303      	str	r3, [sp, #12]
    a1ba:	e767      	b.n	a08c <__aeabi_ddiv+0x48>
    a1bc:	2303      	movs	r3, #3
    a1be:	46b1      	mov	r9, r6
    a1c0:	9303      	str	r3, [sp, #12]
    a1c2:	260c      	movs	r6, #12
    a1c4:	e762      	b.n	a08c <__aeabi_ddiv+0x48>
    a1c6:	2a03      	cmp	r2, #3
    a1c8:	d100      	bne.n	a1cc <__aeabi_ddiv+0x188>
    a1ca:	e25c      	b.n	a686 <__aeabi_ddiv+0x642>
    a1cc:	9b01      	ldr	r3, [sp, #4]
    a1ce:	2a01      	cmp	r2, #1
    a1d0:	d000      	beq.n	a1d4 <__aeabi_ddiv+0x190>
    a1d2:	e1e4      	b.n	a59e <__aeabi_ddiv+0x55a>
    a1d4:	4013      	ands	r3, r2
    a1d6:	469c      	mov	ip, r3
    a1d8:	2300      	movs	r3, #0
    a1da:	2400      	movs	r4, #0
    a1dc:	2200      	movs	r2, #0
    a1de:	4698      	mov	r8, r3
    a1e0:	2100      	movs	r1, #0
    a1e2:	0312      	lsls	r2, r2, #12
    a1e4:	0b13      	lsrs	r3, r2, #12
    a1e6:	0d0a      	lsrs	r2, r1, #20
    a1e8:	0512      	lsls	r2, r2, #20
    a1ea:	431a      	orrs	r2, r3
    a1ec:	0523      	lsls	r3, r4, #20
    a1ee:	4c12      	ldr	r4, [pc, #72]	; (a238 <__aeabi_ddiv+0x1f4>)
    a1f0:	4640      	mov	r0, r8
    a1f2:	4022      	ands	r2, r4
    a1f4:	4313      	orrs	r3, r2
    a1f6:	4662      	mov	r2, ip
    a1f8:	005b      	lsls	r3, r3, #1
    a1fa:	07d2      	lsls	r2, r2, #31
    a1fc:	085b      	lsrs	r3, r3, #1
    a1fe:	4313      	orrs	r3, r2
    a200:	0019      	movs	r1, r3
    a202:	b007      	add	sp, #28
    a204:	bc3c      	pop	{r2, r3, r4, r5}
    a206:	4690      	mov	r8, r2
    a208:	4699      	mov	r9, r3
    a20a:	46a2      	mov	sl, r4
    a20c:	46ab      	mov	fp, r5
    a20e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a210:	2300      	movs	r3, #0
    a212:	2280      	movs	r2, #128	; 0x80
    a214:	469c      	mov	ip, r3
    a216:	0312      	lsls	r2, r2, #12
    a218:	4698      	mov	r8, r3
    a21a:	4c03      	ldr	r4, [pc, #12]	; (a228 <__aeabi_ddiv+0x1e4>)
    a21c:	e7e0      	b.n	a1e0 <__aeabi_ddiv+0x19c>
    a21e:	2300      	movs	r3, #0
    a220:	4c01      	ldr	r4, [pc, #4]	; (a228 <__aeabi_ddiv+0x1e4>)
    a222:	2200      	movs	r2, #0
    a224:	4698      	mov	r8, r3
    a226:	e7db      	b.n	a1e0 <__aeabi_ddiv+0x19c>
    a228:	000007ff 	.word	0x000007ff
    a22c:	fffffc01 	.word	0xfffffc01
    a230:	00010f4c 	.word	0x00010f4c
    a234:	fffffc0d 	.word	0xfffffc0d
    a238:	800fffff 	.word	0x800fffff
    a23c:	45d9      	cmp	r9, fp
    a23e:	d900      	bls.n	a242 <__aeabi_ddiv+0x1fe>
    a240:	e139      	b.n	a4b6 <__aeabi_ddiv+0x472>
    a242:	d100      	bne.n	a246 <__aeabi_ddiv+0x202>
    a244:	e134      	b.n	a4b0 <__aeabi_ddiv+0x46c>
    a246:	2300      	movs	r3, #0
    a248:	4646      	mov	r6, r8
    a24a:	464d      	mov	r5, r9
    a24c:	469a      	mov	sl, r3
    a24e:	3c01      	subs	r4, #1
    a250:	465b      	mov	r3, fp
    a252:	0e0a      	lsrs	r2, r1, #24
    a254:	021b      	lsls	r3, r3, #8
    a256:	431a      	orrs	r2, r3
    a258:	020b      	lsls	r3, r1, #8
    a25a:	0c17      	lsrs	r7, r2, #16
    a25c:	9303      	str	r3, [sp, #12]
    a25e:	0413      	lsls	r3, r2, #16
    a260:	0c1b      	lsrs	r3, r3, #16
    a262:	0039      	movs	r1, r7
    a264:	0028      	movs	r0, r5
    a266:	4690      	mov	r8, r2
    a268:	9301      	str	r3, [sp, #4]
    a26a:	f7fe fd4f 	bl	8d0c <__udivsi3>
    a26e:	0002      	movs	r2, r0
    a270:	9b01      	ldr	r3, [sp, #4]
    a272:	4683      	mov	fp, r0
    a274:	435a      	muls	r2, r3
    a276:	0028      	movs	r0, r5
    a278:	0039      	movs	r1, r7
    a27a:	4691      	mov	r9, r2
    a27c:	f7fe fdcc 	bl	8e18 <__aeabi_uidivmod>
    a280:	0c35      	lsrs	r5, r6, #16
    a282:	0409      	lsls	r1, r1, #16
    a284:	430d      	orrs	r5, r1
    a286:	45a9      	cmp	r9, r5
    a288:	d90d      	bls.n	a2a6 <__aeabi_ddiv+0x262>
    a28a:	465b      	mov	r3, fp
    a28c:	4445      	add	r5, r8
    a28e:	3b01      	subs	r3, #1
    a290:	45a8      	cmp	r8, r5
    a292:	d900      	bls.n	a296 <__aeabi_ddiv+0x252>
    a294:	e13a      	b.n	a50c <__aeabi_ddiv+0x4c8>
    a296:	45a9      	cmp	r9, r5
    a298:	d800      	bhi.n	a29c <__aeabi_ddiv+0x258>
    a29a:	e137      	b.n	a50c <__aeabi_ddiv+0x4c8>
    a29c:	2302      	movs	r3, #2
    a29e:	425b      	negs	r3, r3
    a2a0:	469c      	mov	ip, r3
    a2a2:	4445      	add	r5, r8
    a2a4:	44e3      	add	fp, ip
    a2a6:	464b      	mov	r3, r9
    a2a8:	1aeb      	subs	r3, r5, r3
    a2aa:	0039      	movs	r1, r7
    a2ac:	0018      	movs	r0, r3
    a2ae:	9304      	str	r3, [sp, #16]
    a2b0:	f7fe fd2c 	bl	8d0c <__udivsi3>
    a2b4:	9b01      	ldr	r3, [sp, #4]
    a2b6:	0005      	movs	r5, r0
    a2b8:	4343      	muls	r3, r0
    a2ba:	0039      	movs	r1, r7
    a2bc:	9804      	ldr	r0, [sp, #16]
    a2be:	4699      	mov	r9, r3
    a2c0:	f7fe fdaa 	bl	8e18 <__aeabi_uidivmod>
    a2c4:	0433      	lsls	r3, r6, #16
    a2c6:	0409      	lsls	r1, r1, #16
    a2c8:	0c1b      	lsrs	r3, r3, #16
    a2ca:	430b      	orrs	r3, r1
    a2cc:	4599      	cmp	r9, r3
    a2ce:	d909      	bls.n	a2e4 <__aeabi_ddiv+0x2a0>
    a2d0:	4443      	add	r3, r8
    a2d2:	1e6a      	subs	r2, r5, #1
    a2d4:	4598      	cmp	r8, r3
    a2d6:	d900      	bls.n	a2da <__aeabi_ddiv+0x296>
    a2d8:	e11a      	b.n	a510 <__aeabi_ddiv+0x4cc>
    a2da:	4599      	cmp	r9, r3
    a2dc:	d800      	bhi.n	a2e0 <__aeabi_ddiv+0x29c>
    a2de:	e117      	b.n	a510 <__aeabi_ddiv+0x4cc>
    a2e0:	3d02      	subs	r5, #2
    a2e2:	4443      	add	r3, r8
    a2e4:	464a      	mov	r2, r9
    a2e6:	1a9b      	subs	r3, r3, r2
    a2e8:	465a      	mov	r2, fp
    a2ea:	0412      	lsls	r2, r2, #16
    a2ec:	432a      	orrs	r2, r5
    a2ee:	9903      	ldr	r1, [sp, #12]
    a2f0:	4693      	mov	fp, r2
    a2f2:	0c10      	lsrs	r0, r2, #16
    a2f4:	0c0a      	lsrs	r2, r1, #16
    a2f6:	4691      	mov	r9, r2
    a2f8:	0409      	lsls	r1, r1, #16
    a2fa:	465a      	mov	r2, fp
    a2fc:	0c09      	lsrs	r1, r1, #16
    a2fe:	464e      	mov	r6, r9
    a300:	000d      	movs	r5, r1
    a302:	0412      	lsls	r2, r2, #16
    a304:	0c12      	lsrs	r2, r2, #16
    a306:	4345      	muls	r5, r0
    a308:	9105      	str	r1, [sp, #20]
    a30a:	4351      	muls	r1, r2
    a30c:	4372      	muls	r2, r6
    a30e:	4370      	muls	r0, r6
    a310:	1952      	adds	r2, r2, r5
    a312:	0c0e      	lsrs	r6, r1, #16
    a314:	18b2      	adds	r2, r6, r2
    a316:	4295      	cmp	r5, r2
    a318:	d903      	bls.n	a322 <__aeabi_ddiv+0x2de>
    a31a:	2580      	movs	r5, #128	; 0x80
    a31c:	026d      	lsls	r5, r5, #9
    a31e:	46ac      	mov	ip, r5
    a320:	4460      	add	r0, ip
    a322:	0c15      	lsrs	r5, r2, #16
    a324:	0409      	lsls	r1, r1, #16
    a326:	0412      	lsls	r2, r2, #16
    a328:	0c09      	lsrs	r1, r1, #16
    a32a:	1828      	adds	r0, r5, r0
    a32c:	1852      	adds	r2, r2, r1
    a32e:	4283      	cmp	r3, r0
    a330:	d200      	bcs.n	a334 <__aeabi_ddiv+0x2f0>
    a332:	e0ce      	b.n	a4d2 <__aeabi_ddiv+0x48e>
    a334:	d100      	bne.n	a338 <__aeabi_ddiv+0x2f4>
    a336:	e0c8      	b.n	a4ca <__aeabi_ddiv+0x486>
    a338:	1a1d      	subs	r5, r3, r0
    a33a:	4653      	mov	r3, sl
    a33c:	1a9e      	subs	r6, r3, r2
    a33e:	45b2      	cmp	sl, r6
    a340:	4192      	sbcs	r2, r2
    a342:	4252      	negs	r2, r2
    a344:	1aab      	subs	r3, r5, r2
    a346:	469a      	mov	sl, r3
    a348:	4598      	cmp	r8, r3
    a34a:	d100      	bne.n	a34e <__aeabi_ddiv+0x30a>
    a34c:	e117      	b.n	a57e <__aeabi_ddiv+0x53a>
    a34e:	0039      	movs	r1, r7
    a350:	0018      	movs	r0, r3
    a352:	f7fe fcdb 	bl	8d0c <__udivsi3>
    a356:	9b01      	ldr	r3, [sp, #4]
    a358:	0005      	movs	r5, r0
    a35a:	4343      	muls	r3, r0
    a35c:	0039      	movs	r1, r7
    a35e:	4650      	mov	r0, sl
    a360:	9304      	str	r3, [sp, #16]
    a362:	f7fe fd59 	bl	8e18 <__aeabi_uidivmod>
    a366:	9804      	ldr	r0, [sp, #16]
    a368:	040b      	lsls	r3, r1, #16
    a36a:	0c31      	lsrs	r1, r6, #16
    a36c:	4319      	orrs	r1, r3
    a36e:	4288      	cmp	r0, r1
    a370:	d909      	bls.n	a386 <__aeabi_ddiv+0x342>
    a372:	4441      	add	r1, r8
    a374:	1e6b      	subs	r3, r5, #1
    a376:	4588      	cmp	r8, r1
    a378:	d900      	bls.n	a37c <__aeabi_ddiv+0x338>
    a37a:	e107      	b.n	a58c <__aeabi_ddiv+0x548>
    a37c:	4288      	cmp	r0, r1
    a37e:	d800      	bhi.n	a382 <__aeabi_ddiv+0x33e>
    a380:	e104      	b.n	a58c <__aeabi_ddiv+0x548>
    a382:	3d02      	subs	r5, #2
    a384:	4441      	add	r1, r8
    a386:	9b04      	ldr	r3, [sp, #16]
    a388:	1acb      	subs	r3, r1, r3
    a38a:	0018      	movs	r0, r3
    a38c:	0039      	movs	r1, r7
    a38e:	9304      	str	r3, [sp, #16]
    a390:	f7fe fcbc 	bl	8d0c <__udivsi3>
    a394:	9b01      	ldr	r3, [sp, #4]
    a396:	4682      	mov	sl, r0
    a398:	4343      	muls	r3, r0
    a39a:	0039      	movs	r1, r7
    a39c:	9804      	ldr	r0, [sp, #16]
    a39e:	9301      	str	r3, [sp, #4]
    a3a0:	f7fe fd3a 	bl	8e18 <__aeabi_uidivmod>
    a3a4:	9801      	ldr	r0, [sp, #4]
    a3a6:	040b      	lsls	r3, r1, #16
    a3a8:	0431      	lsls	r1, r6, #16
    a3aa:	0c09      	lsrs	r1, r1, #16
    a3ac:	4319      	orrs	r1, r3
    a3ae:	4288      	cmp	r0, r1
    a3b0:	d90d      	bls.n	a3ce <__aeabi_ddiv+0x38a>
    a3b2:	4653      	mov	r3, sl
    a3b4:	4441      	add	r1, r8
    a3b6:	3b01      	subs	r3, #1
    a3b8:	4588      	cmp	r8, r1
    a3ba:	d900      	bls.n	a3be <__aeabi_ddiv+0x37a>
    a3bc:	e0e8      	b.n	a590 <__aeabi_ddiv+0x54c>
    a3be:	4288      	cmp	r0, r1
    a3c0:	d800      	bhi.n	a3c4 <__aeabi_ddiv+0x380>
    a3c2:	e0e5      	b.n	a590 <__aeabi_ddiv+0x54c>
    a3c4:	2302      	movs	r3, #2
    a3c6:	425b      	negs	r3, r3
    a3c8:	469c      	mov	ip, r3
    a3ca:	4441      	add	r1, r8
    a3cc:	44e2      	add	sl, ip
    a3ce:	9b01      	ldr	r3, [sp, #4]
    a3d0:	042d      	lsls	r5, r5, #16
    a3d2:	1ace      	subs	r6, r1, r3
    a3d4:	4651      	mov	r1, sl
    a3d6:	4329      	orrs	r1, r5
    a3d8:	9d05      	ldr	r5, [sp, #20]
    a3da:	464f      	mov	r7, r9
    a3dc:	002a      	movs	r2, r5
    a3de:	040b      	lsls	r3, r1, #16
    a3e0:	0c08      	lsrs	r0, r1, #16
    a3e2:	0c1b      	lsrs	r3, r3, #16
    a3e4:	435a      	muls	r2, r3
    a3e6:	4345      	muls	r5, r0
    a3e8:	437b      	muls	r3, r7
    a3ea:	4378      	muls	r0, r7
    a3ec:	195b      	adds	r3, r3, r5
    a3ee:	0c17      	lsrs	r7, r2, #16
    a3f0:	18fb      	adds	r3, r7, r3
    a3f2:	429d      	cmp	r5, r3
    a3f4:	d903      	bls.n	a3fe <__aeabi_ddiv+0x3ba>
    a3f6:	2580      	movs	r5, #128	; 0x80
    a3f8:	026d      	lsls	r5, r5, #9
    a3fa:	46ac      	mov	ip, r5
    a3fc:	4460      	add	r0, ip
    a3fe:	0c1d      	lsrs	r5, r3, #16
    a400:	0412      	lsls	r2, r2, #16
    a402:	041b      	lsls	r3, r3, #16
    a404:	0c12      	lsrs	r2, r2, #16
    a406:	1828      	adds	r0, r5, r0
    a408:	189b      	adds	r3, r3, r2
    a40a:	4286      	cmp	r6, r0
    a40c:	d200      	bcs.n	a410 <__aeabi_ddiv+0x3cc>
    a40e:	e093      	b.n	a538 <__aeabi_ddiv+0x4f4>
    a410:	d100      	bne.n	a414 <__aeabi_ddiv+0x3d0>
    a412:	e08e      	b.n	a532 <__aeabi_ddiv+0x4ee>
    a414:	2301      	movs	r3, #1
    a416:	4319      	orrs	r1, r3
    a418:	4ba0      	ldr	r3, [pc, #640]	; (a69c <__aeabi_ddiv+0x658>)
    a41a:	18e3      	adds	r3, r4, r3
    a41c:	2b00      	cmp	r3, #0
    a41e:	dc00      	bgt.n	a422 <__aeabi_ddiv+0x3de>
    a420:	e099      	b.n	a556 <__aeabi_ddiv+0x512>
    a422:	074a      	lsls	r2, r1, #29
    a424:	d000      	beq.n	a428 <__aeabi_ddiv+0x3e4>
    a426:	e09e      	b.n	a566 <__aeabi_ddiv+0x522>
    a428:	465a      	mov	r2, fp
    a42a:	01d2      	lsls	r2, r2, #7
    a42c:	d506      	bpl.n	a43c <__aeabi_ddiv+0x3f8>
    a42e:	465a      	mov	r2, fp
    a430:	4b9b      	ldr	r3, [pc, #620]	; (a6a0 <__aeabi_ddiv+0x65c>)
    a432:	401a      	ands	r2, r3
    a434:	2380      	movs	r3, #128	; 0x80
    a436:	4693      	mov	fp, r2
    a438:	00db      	lsls	r3, r3, #3
    a43a:	18e3      	adds	r3, r4, r3
    a43c:	4a99      	ldr	r2, [pc, #612]	; (a6a4 <__aeabi_ddiv+0x660>)
    a43e:	4293      	cmp	r3, r2
    a440:	dd68      	ble.n	a514 <__aeabi_ddiv+0x4d0>
    a442:	2301      	movs	r3, #1
    a444:	9a02      	ldr	r2, [sp, #8]
    a446:	4c98      	ldr	r4, [pc, #608]	; (a6a8 <__aeabi_ddiv+0x664>)
    a448:	401a      	ands	r2, r3
    a44a:	2300      	movs	r3, #0
    a44c:	4694      	mov	ip, r2
    a44e:	4698      	mov	r8, r3
    a450:	2200      	movs	r2, #0
    a452:	e6c5      	b.n	a1e0 <__aeabi_ddiv+0x19c>
    a454:	2280      	movs	r2, #128	; 0x80
    a456:	464b      	mov	r3, r9
    a458:	0312      	lsls	r2, r2, #12
    a45a:	4213      	tst	r3, r2
    a45c:	d00a      	beq.n	a474 <__aeabi_ddiv+0x430>
    a45e:	465b      	mov	r3, fp
    a460:	4213      	tst	r3, r2
    a462:	d106      	bne.n	a472 <__aeabi_ddiv+0x42e>
    a464:	431a      	orrs	r2, r3
    a466:	0312      	lsls	r2, r2, #12
    a468:	0b12      	lsrs	r2, r2, #12
    a46a:	46ac      	mov	ip, r5
    a46c:	4688      	mov	r8, r1
    a46e:	4c8e      	ldr	r4, [pc, #568]	; (a6a8 <__aeabi_ddiv+0x664>)
    a470:	e6b6      	b.n	a1e0 <__aeabi_ddiv+0x19c>
    a472:	464b      	mov	r3, r9
    a474:	431a      	orrs	r2, r3
    a476:	0312      	lsls	r2, r2, #12
    a478:	0b12      	lsrs	r2, r2, #12
    a47a:	46bc      	mov	ip, r7
    a47c:	4c8a      	ldr	r4, [pc, #552]	; (a6a8 <__aeabi_ddiv+0x664>)
    a47e:	e6af      	b.n	a1e0 <__aeabi_ddiv+0x19c>
    a480:	0003      	movs	r3, r0
    a482:	465a      	mov	r2, fp
    a484:	3b28      	subs	r3, #40	; 0x28
    a486:	409a      	lsls	r2, r3
    a488:	2300      	movs	r3, #0
    a48a:	4691      	mov	r9, r2
    a48c:	4698      	mov	r8, r3
    a48e:	e657      	b.n	a140 <__aeabi_ddiv+0xfc>
    a490:	4658      	mov	r0, fp
    a492:	f000 ffdf 	bl	b454 <__clzsi2>
    a496:	3020      	adds	r0, #32
    a498:	e640      	b.n	a11c <__aeabi_ddiv+0xd8>
    a49a:	0003      	movs	r3, r0
    a49c:	4652      	mov	r2, sl
    a49e:	3b28      	subs	r3, #40	; 0x28
    a4a0:	409a      	lsls	r2, r3
    a4a2:	2100      	movs	r1, #0
    a4a4:	4693      	mov	fp, r2
    a4a6:	e677      	b.n	a198 <__aeabi_ddiv+0x154>
    a4a8:	f000 ffd4 	bl	b454 <__clzsi2>
    a4ac:	3020      	adds	r0, #32
    a4ae:	e65f      	b.n	a170 <__aeabi_ddiv+0x12c>
    a4b0:	4588      	cmp	r8, r1
    a4b2:	d200      	bcs.n	a4b6 <__aeabi_ddiv+0x472>
    a4b4:	e6c7      	b.n	a246 <__aeabi_ddiv+0x202>
    a4b6:	464b      	mov	r3, r9
    a4b8:	07de      	lsls	r6, r3, #31
    a4ba:	085d      	lsrs	r5, r3, #1
    a4bc:	4643      	mov	r3, r8
    a4be:	085b      	lsrs	r3, r3, #1
    a4c0:	431e      	orrs	r6, r3
    a4c2:	4643      	mov	r3, r8
    a4c4:	07db      	lsls	r3, r3, #31
    a4c6:	469a      	mov	sl, r3
    a4c8:	e6c2      	b.n	a250 <__aeabi_ddiv+0x20c>
    a4ca:	2500      	movs	r5, #0
    a4cc:	4592      	cmp	sl, r2
    a4ce:	d300      	bcc.n	a4d2 <__aeabi_ddiv+0x48e>
    a4d0:	e733      	b.n	a33a <__aeabi_ddiv+0x2f6>
    a4d2:	9e03      	ldr	r6, [sp, #12]
    a4d4:	4659      	mov	r1, fp
    a4d6:	46b4      	mov	ip, r6
    a4d8:	44e2      	add	sl, ip
    a4da:	45b2      	cmp	sl, r6
    a4dc:	41ad      	sbcs	r5, r5
    a4de:	426d      	negs	r5, r5
    a4e0:	4445      	add	r5, r8
    a4e2:	18eb      	adds	r3, r5, r3
    a4e4:	3901      	subs	r1, #1
    a4e6:	4598      	cmp	r8, r3
    a4e8:	d207      	bcs.n	a4fa <__aeabi_ddiv+0x4b6>
    a4ea:	4298      	cmp	r0, r3
    a4ec:	d900      	bls.n	a4f0 <__aeabi_ddiv+0x4ac>
    a4ee:	e07f      	b.n	a5f0 <__aeabi_ddiv+0x5ac>
    a4f0:	d100      	bne.n	a4f4 <__aeabi_ddiv+0x4b0>
    a4f2:	e0bc      	b.n	a66e <__aeabi_ddiv+0x62a>
    a4f4:	1a1d      	subs	r5, r3, r0
    a4f6:	468b      	mov	fp, r1
    a4f8:	e71f      	b.n	a33a <__aeabi_ddiv+0x2f6>
    a4fa:	4598      	cmp	r8, r3
    a4fc:	d1fa      	bne.n	a4f4 <__aeabi_ddiv+0x4b0>
    a4fe:	9d03      	ldr	r5, [sp, #12]
    a500:	4555      	cmp	r5, sl
    a502:	d9f2      	bls.n	a4ea <__aeabi_ddiv+0x4a6>
    a504:	4643      	mov	r3, r8
    a506:	468b      	mov	fp, r1
    a508:	1a1d      	subs	r5, r3, r0
    a50a:	e716      	b.n	a33a <__aeabi_ddiv+0x2f6>
    a50c:	469b      	mov	fp, r3
    a50e:	e6ca      	b.n	a2a6 <__aeabi_ddiv+0x262>
    a510:	0015      	movs	r5, r2
    a512:	e6e7      	b.n	a2e4 <__aeabi_ddiv+0x2a0>
    a514:	465a      	mov	r2, fp
    a516:	08c9      	lsrs	r1, r1, #3
    a518:	0752      	lsls	r2, r2, #29
    a51a:	430a      	orrs	r2, r1
    a51c:	055b      	lsls	r3, r3, #21
    a51e:	4690      	mov	r8, r2
    a520:	0d5c      	lsrs	r4, r3, #21
    a522:	465a      	mov	r2, fp
    a524:	2301      	movs	r3, #1
    a526:	9902      	ldr	r1, [sp, #8]
    a528:	0252      	lsls	r2, r2, #9
    a52a:	4019      	ands	r1, r3
    a52c:	0b12      	lsrs	r2, r2, #12
    a52e:	468c      	mov	ip, r1
    a530:	e656      	b.n	a1e0 <__aeabi_ddiv+0x19c>
    a532:	2b00      	cmp	r3, #0
    a534:	d100      	bne.n	a538 <__aeabi_ddiv+0x4f4>
    a536:	e76f      	b.n	a418 <__aeabi_ddiv+0x3d4>
    a538:	4446      	add	r6, r8
    a53a:	1e4a      	subs	r2, r1, #1
    a53c:	45b0      	cmp	r8, r6
    a53e:	d929      	bls.n	a594 <__aeabi_ddiv+0x550>
    a540:	0011      	movs	r1, r2
    a542:	4286      	cmp	r6, r0
    a544:	d000      	beq.n	a548 <__aeabi_ddiv+0x504>
    a546:	e765      	b.n	a414 <__aeabi_ddiv+0x3d0>
    a548:	9a03      	ldr	r2, [sp, #12]
    a54a:	4293      	cmp	r3, r2
    a54c:	d000      	beq.n	a550 <__aeabi_ddiv+0x50c>
    a54e:	e761      	b.n	a414 <__aeabi_ddiv+0x3d0>
    a550:	e762      	b.n	a418 <__aeabi_ddiv+0x3d4>
    a552:	2101      	movs	r1, #1
    a554:	4249      	negs	r1, r1
    a556:	2001      	movs	r0, #1
    a558:	1ac2      	subs	r2, r0, r3
    a55a:	2a38      	cmp	r2, #56	; 0x38
    a55c:	dd21      	ble.n	a5a2 <__aeabi_ddiv+0x55e>
    a55e:	9b02      	ldr	r3, [sp, #8]
    a560:	4003      	ands	r3, r0
    a562:	469c      	mov	ip, r3
    a564:	e638      	b.n	a1d8 <__aeabi_ddiv+0x194>
    a566:	220f      	movs	r2, #15
    a568:	400a      	ands	r2, r1
    a56a:	2a04      	cmp	r2, #4
    a56c:	d100      	bne.n	a570 <__aeabi_ddiv+0x52c>
    a56e:	e75b      	b.n	a428 <__aeabi_ddiv+0x3e4>
    a570:	000a      	movs	r2, r1
    a572:	1d11      	adds	r1, r2, #4
    a574:	4291      	cmp	r1, r2
    a576:	4192      	sbcs	r2, r2
    a578:	4252      	negs	r2, r2
    a57a:	4493      	add	fp, r2
    a57c:	e754      	b.n	a428 <__aeabi_ddiv+0x3e4>
    a57e:	4b47      	ldr	r3, [pc, #284]	; (a69c <__aeabi_ddiv+0x658>)
    a580:	18e3      	adds	r3, r4, r3
    a582:	2b00      	cmp	r3, #0
    a584:	dde5      	ble.n	a552 <__aeabi_ddiv+0x50e>
    a586:	2201      	movs	r2, #1
    a588:	4252      	negs	r2, r2
    a58a:	e7f2      	b.n	a572 <__aeabi_ddiv+0x52e>
    a58c:	001d      	movs	r5, r3
    a58e:	e6fa      	b.n	a386 <__aeabi_ddiv+0x342>
    a590:	469a      	mov	sl, r3
    a592:	e71c      	b.n	a3ce <__aeabi_ddiv+0x38a>
    a594:	42b0      	cmp	r0, r6
    a596:	d839      	bhi.n	a60c <__aeabi_ddiv+0x5c8>
    a598:	d06e      	beq.n	a678 <__aeabi_ddiv+0x634>
    a59a:	0011      	movs	r1, r2
    a59c:	e73a      	b.n	a414 <__aeabi_ddiv+0x3d0>
    a59e:	9302      	str	r3, [sp, #8]
    a5a0:	e73a      	b.n	a418 <__aeabi_ddiv+0x3d4>
    a5a2:	2a1f      	cmp	r2, #31
    a5a4:	dc3c      	bgt.n	a620 <__aeabi_ddiv+0x5dc>
    a5a6:	2320      	movs	r3, #32
    a5a8:	1a9b      	subs	r3, r3, r2
    a5aa:	000c      	movs	r4, r1
    a5ac:	4658      	mov	r0, fp
    a5ae:	4099      	lsls	r1, r3
    a5b0:	4098      	lsls	r0, r3
    a5b2:	1e4b      	subs	r3, r1, #1
    a5b4:	4199      	sbcs	r1, r3
    a5b6:	465b      	mov	r3, fp
    a5b8:	40d4      	lsrs	r4, r2
    a5ba:	40d3      	lsrs	r3, r2
    a5bc:	4320      	orrs	r0, r4
    a5be:	4308      	orrs	r0, r1
    a5c0:	001a      	movs	r2, r3
    a5c2:	0743      	lsls	r3, r0, #29
    a5c4:	d009      	beq.n	a5da <__aeabi_ddiv+0x596>
    a5c6:	230f      	movs	r3, #15
    a5c8:	4003      	ands	r3, r0
    a5ca:	2b04      	cmp	r3, #4
    a5cc:	d005      	beq.n	a5da <__aeabi_ddiv+0x596>
    a5ce:	0001      	movs	r1, r0
    a5d0:	1d08      	adds	r0, r1, #4
    a5d2:	4288      	cmp	r0, r1
    a5d4:	419b      	sbcs	r3, r3
    a5d6:	425b      	negs	r3, r3
    a5d8:	18d2      	adds	r2, r2, r3
    a5da:	0213      	lsls	r3, r2, #8
    a5dc:	d53a      	bpl.n	a654 <__aeabi_ddiv+0x610>
    a5de:	2301      	movs	r3, #1
    a5e0:	9a02      	ldr	r2, [sp, #8]
    a5e2:	2401      	movs	r4, #1
    a5e4:	401a      	ands	r2, r3
    a5e6:	2300      	movs	r3, #0
    a5e8:	4694      	mov	ip, r2
    a5ea:	4698      	mov	r8, r3
    a5ec:	2200      	movs	r2, #0
    a5ee:	e5f7      	b.n	a1e0 <__aeabi_ddiv+0x19c>
    a5f0:	2102      	movs	r1, #2
    a5f2:	4249      	negs	r1, r1
    a5f4:	468c      	mov	ip, r1
    a5f6:	9d03      	ldr	r5, [sp, #12]
    a5f8:	44e3      	add	fp, ip
    a5fa:	46ac      	mov	ip, r5
    a5fc:	44e2      	add	sl, ip
    a5fe:	45aa      	cmp	sl, r5
    a600:	41ad      	sbcs	r5, r5
    a602:	426d      	negs	r5, r5
    a604:	4445      	add	r5, r8
    a606:	18ed      	adds	r5, r5, r3
    a608:	1a2d      	subs	r5, r5, r0
    a60a:	e696      	b.n	a33a <__aeabi_ddiv+0x2f6>
    a60c:	1e8a      	subs	r2, r1, #2
    a60e:	9903      	ldr	r1, [sp, #12]
    a610:	004d      	lsls	r5, r1, #1
    a612:	428d      	cmp	r5, r1
    a614:	4189      	sbcs	r1, r1
    a616:	4249      	negs	r1, r1
    a618:	4441      	add	r1, r8
    a61a:	1876      	adds	r6, r6, r1
    a61c:	9503      	str	r5, [sp, #12]
    a61e:	e78f      	b.n	a540 <__aeabi_ddiv+0x4fc>
    a620:	201f      	movs	r0, #31
    a622:	4240      	negs	r0, r0
    a624:	1ac3      	subs	r3, r0, r3
    a626:	4658      	mov	r0, fp
    a628:	40d8      	lsrs	r0, r3
    a62a:	0003      	movs	r3, r0
    a62c:	2a20      	cmp	r2, #32
    a62e:	d028      	beq.n	a682 <__aeabi_ddiv+0x63e>
    a630:	2040      	movs	r0, #64	; 0x40
    a632:	465d      	mov	r5, fp
    a634:	1a82      	subs	r2, r0, r2
    a636:	4095      	lsls	r5, r2
    a638:	4329      	orrs	r1, r5
    a63a:	1e4a      	subs	r2, r1, #1
    a63c:	4191      	sbcs	r1, r2
    a63e:	4319      	orrs	r1, r3
    a640:	2307      	movs	r3, #7
    a642:	2200      	movs	r2, #0
    a644:	400b      	ands	r3, r1
    a646:	d009      	beq.n	a65c <__aeabi_ddiv+0x618>
    a648:	230f      	movs	r3, #15
    a64a:	2200      	movs	r2, #0
    a64c:	400b      	ands	r3, r1
    a64e:	0008      	movs	r0, r1
    a650:	2b04      	cmp	r3, #4
    a652:	d1bd      	bne.n	a5d0 <__aeabi_ddiv+0x58c>
    a654:	0001      	movs	r1, r0
    a656:	0753      	lsls	r3, r2, #29
    a658:	0252      	lsls	r2, r2, #9
    a65a:	0b12      	lsrs	r2, r2, #12
    a65c:	08c9      	lsrs	r1, r1, #3
    a65e:	4319      	orrs	r1, r3
    a660:	2301      	movs	r3, #1
    a662:	4688      	mov	r8, r1
    a664:	9902      	ldr	r1, [sp, #8]
    a666:	2400      	movs	r4, #0
    a668:	4019      	ands	r1, r3
    a66a:	468c      	mov	ip, r1
    a66c:	e5b8      	b.n	a1e0 <__aeabi_ddiv+0x19c>
    a66e:	4552      	cmp	r2, sl
    a670:	d8be      	bhi.n	a5f0 <__aeabi_ddiv+0x5ac>
    a672:	468b      	mov	fp, r1
    a674:	2500      	movs	r5, #0
    a676:	e660      	b.n	a33a <__aeabi_ddiv+0x2f6>
    a678:	9d03      	ldr	r5, [sp, #12]
    a67a:	429d      	cmp	r5, r3
    a67c:	d3c6      	bcc.n	a60c <__aeabi_ddiv+0x5c8>
    a67e:	0011      	movs	r1, r2
    a680:	e762      	b.n	a548 <__aeabi_ddiv+0x504>
    a682:	2500      	movs	r5, #0
    a684:	e7d8      	b.n	a638 <__aeabi_ddiv+0x5f4>
    a686:	2280      	movs	r2, #128	; 0x80
    a688:	465b      	mov	r3, fp
    a68a:	0312      	lsls	r2, r2, #12
    a68c:	431a      	orrs	r2, r3
    a68e:	9b01      	ldr	r3, [sp, #4]
    a690:	0312      	lsls	r2, r2, #12
    a692:	0b12      	lsrs	r2, r2, #12
    a694:	469c      	mov	ip, r3
    a696:	4688      	mov	r8, r1
    a698:	4c03      	ldr	r4, [pc, #12]	; (a6a8 <__aeabi_ddiv+0x664>)
    a69a:	e5a1      	b.n	a1e0 <__aeabi_ddiv+0x19c>
    a69c:	000003ff 	.word	0x000003ff
    a6a0:	feffffff 	.word	0xfeffffff
    a6a4:	000007fe 	.word	0x000007fe
    a6a8:	000007ff 	.word	0x000007ff

0000a6ac <__aeabi_dmul>:
    a6ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    a6ae:	4657      	mov	r7, sl
    a6b0:	4645      	mov	r5, r8
    a6b2:	46de      	mov	lr, fp
    a6b4:	464e      	mov	r6, r9
    a6b6:	b5e0      	push	{r5, r6, r7, lr}
    a6b8:	030c      	lsls	r4, r1, #12
    a6ba:	4698      	mov	r8, r3
    a6bc:	004e      	lsls	r6, r1, #1
    a6be:	0b23      	lsrs	r3, r4, #12
    a6c0:	b087      	sub	sp, #28
    a6c2:	0007      	movs	r7, r0
    a6c4:	4692      	mov	sl, r2
    a6c6:	469b      	mov	fp, r3
    a6c8:	0d76      	lsrs	r6, r6, #21
    a6ca:	0fcd      	lsrs	r5, r1, #31
    a6cc:	2e00      	cmp	r6, #0
    a6ce:	d06b      	beq.n	a7a8 <__aeabi_dmul+0xfc>
    a6d0:	4b6d      	ldr	r3, [pc, #436]	; (a888 <__aeabi_dmul+0x1dc>)
    a6d2:	429e      	cmp	r6, r3
    a6d4:	d035      	beq.n	a742 <__aeabi_dmul+0x96>
    a6d6:	2480      	movs	r4, #128	; 0x80
    a6d8:	465b      	mov	r3, fp
    a6da:	0f42      	lsrs	r2, r0, #29
    a6dc:	0424      	lsls	r4, r4, #16
    a6de:	00db      	lsls	r3, r3, #3
    a6e0:	4314      	orrs	r4, r2
    a6e2:	431c      	orrs	r4, r3
    a6e4:	00c3      	lsls	r3, r0, #3
    a6e6:	4699      	mov	r9, r3
    a6e8:	4b68      	ldr	r3, [pc, #416]	; (a88c <__aeabi_dmul+0x1e0>)
    a6ea:	46a3      	mov	fp, r4
    a6ec:	469c      	mov	ip, r3
    a6ee:	2300      	movs	r3, #0
    a6f0:	2700      	movs	r7, #0
    a6f2:	4466      	add	r6, ip
    a6f4:	9302      	str	r3, [sp, #8]
    a6f6:	4643      	mov	r3, r8
    a6f8:	031c      	lsls	r4, r3, #12
    a6fa:	005a      	lsls	r2, r3, #1
    a6fc:	0fdb      	lsrs	r3, r3, #31
    a6fe:	4650      	mov	r0, sl
    a700:	0b24      	lsrs	r4, r4, #12
    a702:	0d52      	lsrs	r2, r2, #21
    a704:	4698      	mov	r8, r3
    a706:	d100      	bne.n	a70a <__aeabi_dmul+0x5e>
    a708:	e076      	b.n	a7f8 <__aeabi_dmul+0x14c>
    a70a:	4b5f      	ldr	r3, [pc, #380]	; (a888 <__aeabi_dmul+0x1dc>)
    a70c:	429a      	cmp	r2, r3
    a70e:	d06d      	beq.n	a7ec <__aeabi_dmul+0x140>
    a710:	2380      	movs	r3, #128	; 0x80
    a712:	0f41      	lsrs	r1, r0, #29
    a714:	041b      	lsls	r3, r3, #16
    a716:	430b      	orrs	r3, r1
    a718:	495c      	ldr	r1, [pc, #368]	; (a88c <__aeabi_dmul+0x1e0>)
    a71a:	00e4      	lsls	r4, r4, #3
    a71c:	468c      	mov	ip, r1
    a71e:	431c      	orrs	r4, r3
    a720:	00c3      	lsls	r3, r0, #3
    a722:	2000      	movs	r0, #0
    a724:	4462      	add	r2, ip
    a726:	4641      	mov	r1, r8
    a728:	18b6      	adds	r6, r6, r2
    a72a:	4069      	eors	r1, r5
    a72c:	1c72      	adds	r2, r6, #1
    a72e:	9101      	str	r1, [sp, #4]
    a730:	4694      	mov	ip, r2
    a732:	4307      	orrs	r7, r0
    a734:	2f0f      	cmp	r7, #15
    a736:	d900      	bls.n	a73a <__aeabi_dmul+0x8e>
    a738:	e0b0      	b.n	a89c <__aeabi_dmul+0x1f0>
    a73a:	4a55      	ldr	r2, [pc, #340]	; (a890 <__aeabi_dmul+0x1e4>)
    a73c:	00bf      	lsls	r7, r7, #2
    a73e:	59d2      	ldr	r2, [r2, r7]
    a740:	4697      	mov	pc, r2
    a742:	465b      	mov	r3, fp
    a744:	4303      	orrs	r3, r0
    a746:	4699      	mov	r9, r3
    a748:	d000      	beq.n	a74c <__aeabi_dmul+0xa0>
    a74a:	e087      	b.n	a85c <__aeabi_dmul+0x1b0>
    a74c:	2300      	movs	r3, #0
    a74e:	469b      	mov	fp, r3
    a750:	3302      	adds	r3, #2
    a752:	2708      	movs	r7, #8
    a754:	9302      	str	r3, [sp, #8]
    a756:	e7ce      	b.n	a6f6 <__aeabi_dmul+0x4a>
    a758:	4642      	mov	r2, r8
    a75a:	9201      	str	r2, [sp, #4]
    a75c:	2802      	cmp	r0, #2
    a75e:	d067      	beq.n	a830 <__aeabi_dmul+0x184>
    a760:	2803      	cmp	r0, #3
    a762:	d100      	bne.n	a766 <__aeabi_dmul+0xba>
    a764:	e20e      	b.n	ab84 <__aeabi_dmul+0x4d8>
    a766:	2801      	cmp	r0, #1
    a768:	d000      	beq.n	a76c <__aeabi_dmul+0xc0>
    a76a:	e162      	b.n	aa32 <__aeabi_dmul+0x386>
    a76c:	2300      	movs	r3, #0
    a76e:	2400      	movs	r4, #0
    a770:	2200      	movs	r2, #0
    a772:	4699      	mov	r9, r3
    a774:	9901      	ldr	r1, [sp, #4]
    a776:	4001      	ands	r1, r0
    a778:	b2cd      	uxtb	r5, r1
    a77a:	2100      	movs	r1, #0
    a77c:	0312      	lsls	r2, r2, #12
    a77e:	0d0b      	lsrs	r3, r1, #20
    a780:	0b12      	lsrs	r2, r2, #12
    a782:	051b      	lsls	r3, r3, #20
    a784:	4313      	orrs	r3, r2
    a786:	4a43      	ldr	r2, [pc, #268]	; (a894 <__aeabi_dmul+0x1e8>)
    a788:	0524      	lsls	r4, r4, #20
    a78a:	4013      	ands	r3, r2
    a78c:	431c      	orrs	r4, r3
    a78e:	0064      	lsls	r4, r4, #1
    a790:	07ed      	lsls	r5, r5, #31
    a792:	0864      	lsrs	r4, r4, #1
    a794:	432c      	orrs	r4, r5
    a796:	4648      	mov	r0, r9
    a798:	0021      	movs	r1, r4
    a79a:	b007      	add	sp, #28
    a79c:	bc3c      	pop	{r2, r3, r4, r5}
    a79e:	4690      	mov	r8, r2
    a7a0:	4699      	mov	r9, r3
    a7a2:	46a2      	mov	sl, r4
    a7a4:	46ab      	mov	fp, r5
    a7a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a7a8:	4303      	orrs	r3, r0
    a7aa:	4699      	mov	r9, r3
    a7ac:	d04f      	beq.n	a84e <__aeabi_dmul+0x1a2>
    a7ae:	465b      	mov	r3, fp
    a7b0:	2b00      	cmp	r3, #0
    a7b2:	d100      	bne.n	a7b6 <__aeabi_dmul+0x10a>
    a7b4:	e189      	b.n	aaca <__aeabi_dmul+0x41e>
    a7b6:	4658      	mov	r0, fp
    a7b8:	f000 fe4c 	bl	b454 <__clzsi2>
    a7bc:	0003      	movs	r3, r0
    a7be:	3b0b      	subs	r3, #11
    a7c0:	2b1c      	cmp	r3, #28
    a7c2:	dd00      	ble.n	a7c6 <__aeabi_dmul+0x11a>
    a7c4:	e17a      	b.n	aabc <__aeabi_dmul+0x410>
    a7c6:	221d      	movs	r2, #29
    a7c8:	1ad3      	subs	r3, r2, r3
    a7ca:	003a      	movs	r2, r7
    a7cc:	0001      	movs	r1, r0
    a7ce:	465c      	mov	r4, fp
    a7d0:	40da      	lsrs	r2, r3
    a7d2:	3908      	subs	r1, #8
    a7d4:	408c      	lsls	r4, r1
    a7d6:	0013      	movs	r3, r2
    a7d8:	408f      	lsls	r7, r1
    a7da:	4323      	orrs	r3, r4
    a7dc:	469b      	mov	fp, r3
    a7de:	46b9      	mov	r9, r7
    a7e0:	2300      	movs	r3, #0
    a7e2:	4e2d      	ldr	r6, [pc, #180]	; (a898 <__aeabi_dmul+0x1ec>)
    a7e4:	2700      	movs	r7, #0
    a7e6:	1a36      	subs	r6, r6, r0
    a7e8:	9302      	str	r3, [sp, #8]
    a7ea:	e784      	b.n	a6f6 <__aeabi_dmul+0x4a>
    a7ec:	4653      	mov	r3, sl
    a7ee:	4323      	orrs	r3, r4
    a7f0:	d12a      	bne.n	a848 <__aeabi_dmul+0x19c>
    a7f2:	2400      	movs	r4, #0
    a7f4:	2002      	movs	r0, #2
    a7f6:	e796      	b.n	a726 <__aeabi_dmul+0x7a>
    a7f8:	4653      	mov	r3, sl
    a7fa:	4323      	orrs	r3, r4
    a7fc:	d020      	beq.n	a840 <__aeabi_dmul+0x194>
    a7fe:	2c00      	cmp	r4, #0
    a800:	d100      	bne.n	a804 <__aeabi_dmul+0x158>
    a802:	e157      	b.n	aab4 <__aeabi_dmul+0x408>
    a804:	0020      	movs	r0, r4
    a806:	f000 fe25 	bl	b454 <__clzsi2>
    a80a:	0003      	movs	r3, r0
    a80c:	3b0b      	subs	r3, #11
    a80e:	2b1c      	cmp	r3, #28
    a810:	dd00      	ble.n	a814 <__aeabi_dmul+0x168>
    a812:	e149      	b.n	aaa8 <__aeabi_dmul+0x3fc>
    a814:	211d      	movs	r1, #29
    a816:	1acb      	subs	r3, r1, r3
    a818:	4651      	mov	r1, sl
    a81a:	0002      	movs	r2, r0
    a81c:	40d9      	lsrs	r1, r3
    a81e:	4653      	mov	r3, sl
    a820:	3a08      	subs	r2, #8
    a822:	4094      	lsls	r4, r2
    a824:	4093      	lsls	r3, r2
    a826:	430c      	orrs	r4, r1
    a828:	4a1b      	ldr	r2, [pc, #108]	; (a898 <__aeabi_dmul+0x1ec>)
    a82a:	1a12      	subs	r2, r2, r0
    a82c:	2000      	movs	r0, #0
    a82e:	e77a      	b.n	a726 <__aeabi_dmul+0x7a>
    a830:	2501      	movs	r5, #1
    a832:	9b01      	ldr	r3, [sp, #4]
    a834:	4c14      	ldr	r4, [pc, #80]	; (a888 <__aeabi_dmul+0x1dc>)
    a836:	401d      	ands	r5, r3
    a838:	2300      	movs	r3, #0
    a83a:	2200      	movs	r2, #0
    a83c:	4699      	mov	r9, r3
    a83e:	e79c      	b.n	a77a <__aeabi_dmul+0xce>
    a840:	2400      	movs	r4, #0
    a842:	2200      	movs	r2, #0
    a844:	2001      	movs	r0, #1
    a846:	e76e      	b.n	a726 <__aeabi_dmul+0x7a>
    a848:	4653      	mov	r3, sl
    a84a:	2003      	movs	r0, #3
    a84c:	e76b      	b.n	a726 <__aeabi_dmul+0x7a>
    a84e:	2300      	movs	r3, #0
    a850:	469b      	mov	fp, r3
    a852:	3301      	adds	r3, #1
    a854:	2704      	movs	r7, #4
    a856:	2600      	movs	r6, #0
    a858:	9302      	str	r3, [sp, #8]
    a85a:	e74c      	b.n	a6f6 <__aeabi_dmul+0x4a>
    a85c:	2303      	movs	r3, #3
    a85e:	4681      	mov	r9, r0
    a860:	270c      	movs	r7, #12
    a862:	9302      	str	r3, [sp, #8]
    a864:	e747      	b.n	a6f6 <__aeabi_dmul+0x4a>
    a866:	2280      	movs	r2, #128	; 0x80
    a868:	2300      	movs	r3, #0
    a86a:	2500      	movs	r5, #0
    a86c:	0312      	lsls	r2, r2, #12
    a86e:	4699      	mov	r9, r3
    a870:	4c05      	ldr	r4, [pc, #20]	; (a888 <__aeabi_dmul+0x1dc>)
    a872:	e782      	b.n	a77a <__aeabi_dmul+0xce>
    a874:	465c      	mov	r4, fp
    a876:	464b      	mov	r3, r9
    a878:	9802      	ldr	r0, [sp, #8]
    a87a:	e76f      	b.n	a75c <__aeabi_dmul+0xb0>
    a87c:	465c      	mov	r4, fp
    a87e:	464b      	mov	r3, r9
    a880:	9501      	str	r5, [sp, #4]
    a882:	9802      	ldr	r0, [sp, #8]
    a884:	e76a      	b.n	a75c <__aeabi_dmul+0xb0>
    a886:	46c0      	nop			; (mov r8, r8)
    a888:	000007ff 	.word	0x000007ff
    a88c:	fffffc01 	.word	0xfffffc01
    a890:	00010f8c 	.word	0x00010f8c
    a894:	800fffff 	.word	0x800fffff
    a898:	fffffc0d 	.word	0xfffffc0d
    a89c:	464a      	mov	r2, r9
    a89e:	4649      	mov	r1, r9
    a8a0:	0c17      	lsrs	r7, r2, #16
    a8a2:	0c1a      	lsrs	r2, r3, #16
    a8a4:	041b      	lsls	r3, r3, #16
    a8a6:	0c1b      	lsrs	r3, r3, #16
    a8a8:	0408      	lsls	r0, r1, #16
    a8aa:	0019      	movs	r1, r3
    a8ac:	0c00      	lsrs	r0, r0, #16
    a8ae:	4341      	muls	r1, r0
    a8b0:	0015      	movs	r5, r2
    a8b2:	4688      	mov	r8, r1
    a8b4:	0019      	movs	r1, r3
    a8b6:	437d      	muls	r5, r7
    a8b8:	4379      	muls	r1, r7
    a8ba:	9503      	str	r5, [sp, #12]
    a8bc:	4689      	mov	r9, r1
    a8be:	0029      	movs	r1, r5
    a8c0:	0015      	movs	r5, r2
    a8c2:	4345      	muls	r5, r0
    a8c4:	444d      	add	r5, r9
    a8c6:	9502      	str	r5, [sp, #8]
    a8c8:	4645      	mov	r5, r8
    a8ca:	0c2d      	lsrs	r5, r5, #16
    a8cc:	46aa      	mov	sl, r5
    a8ce:	9d02      	ldr	r5, [sp, #8]
    a8d0:	4455      	add	r5, sl
    a8d2:	45a9      	cmp	r9, r5
    a8d4:	d906      	bls.n	a8e4 <__aeabi_dmul+0x238>
    a8d6:	468a      	mov	sl, r1
    a8d8:	2180      	movs	r1, #128	; 0x80
    a8da:	0249      	lsls	r1, r1, #9
    a8dc:	4689      	mov	r9, r1
    a8de:	44ca      	add	sl, r9
    a8e0:	4651      	mov	r1, sl
    a8e2:	9103      	str	r1, [sp, #12]
    a8e4:	0c29      	lsrs	r1, r5, #16
    a8e6:	9104      	str	r1, [sp, #16]
    a8e8:	4641      	mov	r1, r8
    a8ea:	0409      	lsls	r1, r1, #16
    a8ec:	042d      	lsls	r5, r5, #16
    a8ee:	0c09      	lsrs	r1, r1, #16
    a8f0:	4688      	mov	r8, r1
    a8f2:	0029      	movs	r1, r5
    a8f4:	0c25      	lsrs	r5, r4, #16
    a8f6:	0424      	lsls	r4, r4, #16
    a8f8:	4441      	add	r1, r8
    a8fa:	0c24      	lsrs	r4, r4, #16
    a8fc:	9105      	str	r1, [sp, #20]
    a8fe:	0021      	movs	r1, r4
    a900:	4341      	muls	r1, r0
    a902:	4688      	mov	r8, r1
    a904:	0021      	movs	r1, r4
    a906:	4379      	muls	r1, r7
    a908:	468a      	mov	sl, r1
    a90a:	4368      	muls	r0, r5
    a90c:	4641      	mov	r1, r8
    a90e:	4450      	add	r0, sl
    a910:	4681      	mov	r9, r0
    a912:	0c08      	lsrs	r0, r1, #16
    a914:	4448      	add	r0, r9
    a916:	436f      	muls	r7, r5
    a918:	4582      	cmp	sl, r0
    a91a:	d903      	bls.n	a924 <__aeabi_dmul+0x278>
    a91c:	2180      	movs	r1, #128	; 0x80
    a91e:	0249      	lsls	r1, r1, #9
    a920:	4689      	mov	r9, r1
    a922:	444f      	add	r7, r9
    a924:	0c01      	lsrs	r1, r0, #16
    a926:	4689      	mov	r9, r1
    a928:	0039      	movs	r1, r7
    a92a:	4449      	add	r1, r9
    a92c:	9102      	str	r1, [sp, #8]
    a92e:	4641      	mov	r1, r8
    a930:	040f      	lsls	r7, r1, #16
    a932:	9904      	ldr	r1, [sp, #16]
    a934:	0c3f      	lsrs	r7, r7, #16
    a936:	4688      	mov	r8, r1
    a938:	0400      	lsls	r0, r0, #16
    a93a:	19c0      	adds	r0, r0, r7
    a93c:	4480      	add	r8, r0
    a93e:	4641      	mov	r1, r8
    a940:	9104      	str	r1, [sp, #16]
    a942:	4659      	mov	r1, fp
    a944:	0c0f      	lsrs	r7, r1, #16
    a946:	0409      	lsls	r1, r1, #16
    a948:	0c09      	lsrs	r1, r1, #16
    a94a:	4688      	mov	r8, r1
    a94c:	4359      	muls	r1, r3
    a94e:	468a      	mov	sl, r1
    a950:	0039      	movs	r1, r7
    a952:	4351      	muls	r1, r2
    a954:	4689      	mov	r9, r1
    a956:	4641      	mov	r1, r8
    a958:	434a      	muls	r2, r1
    a95a:	4651      	mov	r1, sl
    a95c:	0c09      	lsrs	r1, r1, #16
    a95e:	468b      	mov	fp, r1
    a960:	437b      	muls	r3, r7
    a962:	18d2      	adds	r2, r2, r3
    a964:	445a      	add	r2, fp
    a966:	4293      	cmp	r3, r2
    a968:	d903      	bls.n	a972 <__aeabi_dmul+0x2c6>
    a96a:	2380      	movs	r3, #128	; 0x80
    a96c:	025b      	lsls	r3, r3, #9
    a96e:	469b      	mov	fp, r3
    a970:	44d9      	add	r9, fp
    a972:	4651      	mov	r1, sl
    a974:	0409      	lsls	r1, r1, #16
    a976:	0c09      	lsrs	r1, r1, #16
    a978:	468a      	mov	sl, r1
    a97a:	4641      	mov	r1, r8
    a97c:	4361      	muls	r1, r4
    a97e:	437c      	muls	r4, r7
    a980:	0c13      	lsrs	r3, r2, #16
    a982:	0412      	lsls	r2, r2, #16
    a984:	444b      	add	r3, r9
    a986:	4452      	add	r2, sl
    a988:	46a1      	mov	r9, r4
    a98a:	468a      	mov	sl, r1
    a98c:	003c      	movs	r4, r7
    a98e:	4641      	mov	r1, r8
    a990:	436c      	muls	r4, r5
    a992:	434d      	muls	r5, r1
    a994:	4651      	mov	r1, sl
    a996:	444d      	add	r5, r9
    a998:	0c0f      	lsrs	r7, r1, #16
    a99a:	197d      	adds	r5, r7, r5
    a99c:	45a9      	cmp	r9, r5
    a99e:	d903      	bls.n	a9a8 <__aeabi_dmul+0x2fc>
    a9a0:	2180      	movs	r1, #128	; 0x80
    a9a2:	0249      	lsls	r1, r1, #9
    a9a4:	4688      	mov	r8, r1
    a9a6:	4444      	add	r4, r8
    a9a8:	9f04      	ldr	r7, [sp, #16]
    a9aa:	9903      	ldr	r1, [sp, #12]
    a9ac:	46b8      	mov	r8, r7
    a9ae:	4441      	add	r1, r8
    a9b0:	468b      	mov	fp, r1
    a9b2:	4583      	cmp	fp, r0
    a9b4:	4180      	sbcs	r0, r0
    a9b6:	4241      	negs	r1, r0
    a9b8:	4688      	mov	r8, r1
    a9ba:	4651      	mov	r1, sl
    a9bc:	0408      	lsls	r0, r1, #16
    a9be:	042f      	lsls	r7, r5, #16
    a9c0:	0c00      	lsrs	r0, r0, #16
    a9c2:	183f      	adds	r7, r7, r0
    a9c4:	4658      	mov	r0, fp
    a9c6:	9902      	ldr	r1, [sp, #8]
    a9c8:	1810      	adds	r0, r2, r0
    a9ca:	4689      	mov	r9, r1
    a9cc:	4290      	cmp	r0, r2
    a9ce:	4192      	sbcs	r2, r2
    a9d0:	444f      	add	r7, r9
    a9d2:	46ba      	mov	sl, r7
    a9d4:	4252      	negs	r2, r2
    a9d6:	4699      	mov	r9, r3
    a9d8:	4693      	mov	fp, r2
    a9da:	44c2      	add	sl, r8
    a9dc:	44d1      	add	r9, sl
    a9de:	44cb      	add	fp, r9
    a9e0:	428f      	cmp	r7, r1
    a9e2:	41bf      	sbcs	r7, r7
    a9e4:	45c2      	cmp	sl, r8
    a9e6:	4189      	sbcs	r1, r1
    a9e8:	4599      	cmp	r9, r3
    a9ea:	419b      	sbcs	r3, r3
    a9ec:	4593      	cmp	fp, r2
    a9ee:	4192      	sbcs	r2, r2
    a9f0:	427f      	negs	r7, r7
    a9f2:	4249      	negs	r1, r1
    a9f4:	0c2d      	lsrs	r5, r5, #16
    a9f6:	4252      	negs	r2, r2
    a9f8:	430f      	orrs	r7, r1
    a9fa:	425b      	negs	r3, r3
    a9fc:	4313      	orrs	r3, r2
    a9fe:	197f      	adds	r7, r7, r5
    aa00:	18ff      	adds	r7, r7, r3
    aa02:	465b      	mov	r3, fp
    aa04:	193c      	adds	r4, r7, r4
    aa06:	0ddb      	lsrs	r3, r3, #23
    aa08:	9a05      	ldr	r2, [sp, #20]
    aa0a:	0264      	lsls	r4, r4, #9
    aa0c:	431c      	orrs	r4, r3
    aa0e:	0243      	lsls	r3, r0, #9
    aa10:	4313      	orrs	r3, r2
    aa12:	1e5d      	subs	r5, r3, #1
    aa14:	41ab      	sbcs	r3, r5
    aa16:	465a      	mov	r2, fp
    aa18:	0dc0      	lsrs	r0, r0, #23
    aa1a:	4303      	orrs	r3, r0
    aa1c:	0252      	lsls	r2, r2, #9
    aa1e:	4313      	orrs	r3, r2
    aa20:	01e2      	lsls	r2, r4, #7
    aa22:	d556      	bpl.n	aad2 <__aeabi_dmul+0x426>
    aa24:	2001      	movs	r0, #1
    aa26:	085a      	lsrs	r2, r3, #1
    aa28:	4003      	ands	r3, r0
    aa2a:	4313      	orrs	r3, r2
    aa2c:	07e2      	lsls	r2, r4, #31
    aa2e:	4313      	orrs	r3, r2
    aa30:	0864      	lsrs	r4, r4, #1
    aa32:	485a      	ldr	r0, [pc, #360]	; (ab9c <__aeabi_dmul+0x4f0>)
    aa34:	4460      	add	r0, ip
    aa36:	2800      	cmp	r0, #0
    aa38:	dd4d      	ble.n	aad6 <__aeabi_dmul+0x42a>
    aa3a:	075a      	lsls	r2, r3, #29
    aa3c:	d009      	beq.n	aa52 <__aeabi_dmul+0x3a6>
    aa3e:	220f      	movs	r2, #15
    aa40:	401a      	ands	r2, r3
    aa42:	2a04      	cmp	r2, #4
    aa44:	d005      	beq.n	aa52 <__aeabi_dmul+0x3a6>
    aa46:	1d1a      	adds	r2, r3, #4
    aa48:	429a      	cmp	r2, r3
    aa4a:	419b      	sbcs	r3, r3
    aa4c:	425b      	negs	r3, r3
    aa4e:	18e4      	adds	r4, r4, r3
    aa50:	0013      	movs	r3, r2
    aa52:	01e2      	lsls	r2, r4, #7
    aa54:	d504      	bpl.n	aa60 <__aeabi_dmul+0x3b4>
    aa56:	2080      	movs	r0, #128	; 0x80
    aa58:	4a51      	ldr	r2, [pc, #324]	; (aba0 <__aeabi_dmul+0x4f4>)
    aa5a:	00c0      	lsls	r0, r0, #3
    aa5c:	4014      	ands	r4, r2
    aa5e:	4460      	add	r0, ip
    aa60:	4a50      	ldr	r2, [pc, #320]	; (aba4 <__aeabi_dmul+0x4f8>)
    aa62:	4290      	cmp	r0, r2
    aa64:	dd00      	ble.n	aa68 <__aeabi_dmul+0x3bc>
    aa66:	e6e3      	b.n	a830 <__aeabi_dmul+0x184>
    aa68:	2501      	movs	r5, #1
    aa6a:	08db      	lsrs	r3, r3, #3
    aa6c:	0762      	lsls	r2, r4, #29
    aa6e:	431a      	orrs	r2, r3
    aa70:	0264      	lsls	r4, r4, #9
    aa72:	9b01      	ldr	r3, [sp, #4]
    aa74:	4691      	mov	r9, r2
    aa76:	0b22      	lsrs	r2, r4, #12
    aa78:	0544      	lsls	r4, r0, #21
    aa7a:	0d64      	lsrs	r4, r4, #21
    aa7c:	401d      	ands	r5, r3
    aa7e:	e67c      	b.n	a77a <__aeabi_dmul+0xce>
    aa80:	2280      	movs	r2, #128	; 0x80
    aa82:	4659      	mov	r1, fp
    aa84:	0312      	lsls	r2, r2, #12
    aa86:	4211      	tst	r1, r2
    aa88:	d008      	beq.n	aa9c <__aeabi_dmul+0x3f0>
    aa8a:	4214      	tst	r4, r2
    aa8c:	d106      	bne.n	aa9c <__aeabi_dmul+0x3f0>
    aa8e:	4322      	orrs	r2, r4
    aa90:	0312      	lsls	r2, r2, #12
    aa92:	0b12      	lsrs	r2, r2, #12
    aa94:	4645      	mov	r5, r8
    aa96:	4699      	mov	r9, r3
    aa98:	4c43      	ldr	r4, [pc, #268]	; (aba8 <__aeabi_dmul+0x4fc>)
    aa9a:	e66e      	b.n	a77a <__aeabi_dmul+0xce>
    aa9c:	465b      	mov	r3, fp
    aa9e:	431a      	orrs	r2, r3
    aaa0:	0312      	lsls	r2, r2, #12
    aaa2:	0b12      	lsrs	r2, r2, #12
    aaa4:	4c40      	ldr	r4, [pc, #256]	; (aba8 <__aeabi_dmul+0x4fc>)
    aaa6:	e668      	b.n	a77a <__aeabi_dmul+0xce>
    aaa8:	0003      	movs	r3, r0
    aaaa:	4654      	mov	r4, sl
    aaac:	3b28      	subs	r3, #40	; 0x28
    aaae:	409c      	lsls	r4, r3
    aab0:	2300      	movs	r3, #0
    aab2:	e6b9      	b.n	a828 <__aeabi_dmul+0x17c>
    aab4:	f000 fcce 	bl	b454 <__clzsi2>
    aab8:	3020      	adds	r0, #32
    aaba:	e6a6      	b.n	a80a <__aeabi_dmul+0x15e>
    aabc:	0003      	movs	r3, r0
    aabe:	3b28      	subs	r3, #40	; 0x28
    aac0:	409f      	lsls	r7, r3
    aac2:	2300      	movs	r3, #0
    aac4:	46bb      	mov	fp, r7
    aac6:	4699      	mov	r9, r3
    aac8:	e68a      	b.n	a7e0 <__aeabi_dmul+0x134>
    aaca:	f000 fcc3 	bl	b454 <__clzsi2>
    aace:	3020      	adds	r0, #32
    aad0:	e674      	b.n	a7bc <__aeabi_dmul+0x110>
    aad2:	46b4      	mov	ip, r6
    aad4:	e7ad      	b.n	aa32 <__aeabi_dmul+0x386>
    aad6:	2501      	movs	r5, #1
    aad8:	1a2a      	subs	r2, r5, r0
    aada:	2a38      	cmp	r2, #56	; 0x38
    aadc:	dd06      	ble.n	aaec <__aeabi_dmul+0x440>
    aade:	9b01      	ldr	r3, [sp, #4]
    aae0:	2400      	movs	r4, #0
    aae2:	401d      	ands	r5, r3
    aae4:	2300      	movs	r3, #0
    aae6:	2200      	movs	r2, #0
    aae8:	4699      	mov	r9, r3
    aaea:	e646      	b.n	a77a <__aeabi_dmul+0xce>
    aaec:	2a1f      	cmp	r2, #31
    aaee:	dc21      	bgt.n	ab34 <__aeabi_dmul+0x488>
    aaf0:	2520      	movs	r5, #32
    aaf2:	0020      	movs	r0, r4
    aaf4:	1aad      	subs	r5, r5, r2
    aaf6:	001e      	movs	r6, r3
    aaf8:	40ab      	lsls	r3, r5
    aafa:	40a8      	lsls	r0, r5
    aafc:	40d6      	lsrs	r6, r2
    aafe:	1e5d      	subs	r5, r3, #1
    ab00:	41ab      	sbcs	r3, r5
    ab02:	4330      	orrs	r0, r6
    ab04:	4318      	orrs	r0, r3
    ab06:	40d4      	lsrs	r4, r2
    ab08:	0743      	lsls	r3, r0, #29
    ab0a:	d009      	beq.n	ab20 <__aeabi_dmul+0x474>
    ab0c:	230f      	movs	r3, #15
    ab0e:	4003      	ands	r3, r0
    ab10:	2b04      	cmp	r3, #4
    ab12:	d005      	beq.n	ab20 <__aeabi_dmul+0x474>
    ab14:	0003      	movs	r3, r0
    ab16:	1d18      	adds	r0, r3, #4
    ab18:	4298      	cmp	r0, r3
    ab1a:	419b      	sbcs	r3, r3
    ab1c:	425b      	negs	r3, r3
    ab1e:	18e4      	adds	r4, r4, r3
    ab20:	0223      	lsls	r3, r4, #8
    ab22:	d521      	bpl.n	ab68 <__aeabi_dmul+0x4bc>
    ab24:	2501      	movs	r5, #1
    ab26:	9b01      	ldr	r3, [sp, #4]
    ab28:	2401      	movs	r4, #1
    ab2a:	401d      	ands	r5, r3
    ab2c:	2300      	movs	r3, #0
    ab2e:	2200      	movs	r2, #0
    ab30:	4699      	mov	r9, r3
    ab32:	e622      	b.n	a77a <__aeabi_dmul+0xce>
    ab34:	251f      	movs	r5, #31
    ab36:	0021      	movs	r1, r4
    ab38:	426d      	negs	r5, r5
    ab3a:	1a28      	subs	r0, r5, r0
    ab3c:	40c1      	lsrs	r1, r0
    ab3e:	0008      	movs	r0, r1
    ab40:	2a20      	cmp	r2, #32
    ab42:	d01d      	beq.n	ab80 <__aeabi_dmul+0x4d4>
    ab44:	355f      	adds	r5, #95	; 0x5f
    ab46:	1aaa      	subs	r2, r5, r2
    ab48:	4094      	lsls	r4, r2
    ab4a:	4323      	orrs	r3, r4
    ab4c:	1e5c      	subs	r4, r3, #1
    ab4e:	41a3      	sbcs	r3, r4
    ab50:	2507      	movs	r5, #7
    ab52:	4303      	orrs	r3, r0
    ab54:	401d      	ands	r5, r3
    ab56:	2200      	movs	r2, #0
    ab58:	2d00      	cmp	r5, #0
    ab5a:	d009      	beq.n	ab70 <__aeabi_dmul+0x4c4>
    ab5c:	220f      	movs	r2, #15
    ab5e:	2400      	movs	r4, #0
    ab60:	401a      	ands	r2, r3
    ab62:	0018      	movs	r0, r3
    ab64:	2a04      	cmp	r2, #4
    ab66:	d1d6      	bne.n	ab16 <__aeabi_dmul+0x46a>
    ab68:	0003      	movs	r3, r0
    ab6a:	0765      	lsls	r5, r4, #29
    ab6c:	0264      	lsls	r4, r4, #9
    ab6e:	0b22      	lsrs	r2, r4, #12
    ab70:	08db      	lsrs	r3, r3, #3
    ab72:	432b      	orrs	r3, r5
    ab74:	2501      	movs	r5, #1
    ab76:	4699      	mov	r9, r3
    ab78:	9b01      	ldr	r3, [sp, #4]
    ab7a:	2400      	movs	r4, #0
    ab7c:	401d      	ands	r5, r3
    ab7e:	e5fc      	b.n	a77a <__aeabi_dmul+0xce>
    ab80:	2400      	movs	r4, #0
    ab82:	e7e2      	b.n	ab4a <__aeabi_dmul+0x49e>
    ab84:	2280      	movs	r2, #128	; 0x80
    ab86:	2501      	movs	r5, #1
    ab88:	0312      	lsls	r2, r2, #12
    ab8a:	4322      	orrs	r2, r4
    ab8c:	9901      	ldr	r1, [sp, #4]
    ab8e:	0312      	lsls	r2, r2, #12
    ab90:	0b12      	lsrs	r2, r2, #12
    ab92:	400d      	ands	r5, r1
    ab94:	4699      	mov	r9, r3
    ab96:	4c04      	ldr	r4, [pc, #16]	; (aba8 <__aeabi_dmul+0x4fc>)
    ab98:	e5ef      	b.n	a77a <__aeabi_dmul+0xce>
    ab9a:	46c0      	nop			; (mov r8, r8)
    ab9c:	000003ff 	.word	0x000003ff
    aba0:	feffffff 	.word	0xfeffffff
    aba4:	000007fe 	.word	0x000007fe
    aba8:	000007ff 	.word	0x000007ff

0000abac <__aeabi_dsub>:
    abac:	b5f0      	push	{r4, r5, r6, r7, lr}
    abae:	4646      	mov	r6, r8
    abb0:	46d6      	mov	lr, sl
    abb2:	464f      	mov	r7, r9
    abb4:	030c      	lsls	r4, r1, #12
    abb6:	b5c0      	push	{r6, r7, lr}
    abb8:	0fcd      	lsrs	r5, r1, #31
    abba:	004e      	lsls	r6, r1, #1
    abbc:	0a61      	lsrs	r1, r4, #9
    abbe:	0f44      	lsrs	r4, r0, #29
    abc0:	430c      	orrs	r4, r1
    abc2:	00c1      	lsls	r1, r0, #3
    abc4:	0058      	lsls	r0, r3, #1
    abc6:	0d40      	lsrs	r0, r0, #21
    abc8:	4684      	mov	ip, r0
    abca:	468a      	mov	sl, r1
    abcc:	000f      	movs	r7, r1
    abce:	0319      	lsls	r1, r3, #12
    abd0:	0f50      	lsrs	r0, r2, #29
    abd2:	0a49      	lsrs	r1, r1, #9
    abd4:	4301      	orrs	r1, r0
    abd6:	48c6      	ldr	r0, [pc, #792]	; (aef0 <__aeabi_dsub+0x344>)
    abd8:	0d76      	lsrs	r6, r6, #21
    abda:	46a8      	mov	r8, r5
    abdc:	0fdb      	lsrs	r3, r3, #31
    abde:	00d2      	lsls	r2, r2, #3
    abe0:	4584      	cmp	ip, r0
    abe2:	d100      	bne.n	abe6 <__aeabi_dsub+0x3a>
    abe4:	e0d8      	b.n	ad98 <__aeabi_dsub+0x1ec>
    abe6:	2001      	movs	r0, #1
    abe8:	4043      	eors	r3, r0
    abea:	42ab      	cmp	r3, r5
    abec:	d100      	bne.n	abf0 <__aeabi_dsub+0x44>
    abee:	e0a6      	b.n	ad3e <__aeabi_dsub+0x192>
    abf0:	4660      	mov	r0, ip
    abf2:	1a35      	subs	r5, r6, r0
    abf4:	2d00      	cmp	r5, #0
    abf6:	dc00      	bgt.n	abfa <__aeabi_dsub+0x4e>
    abf8:	e105      	b.n	ae06 <__aeabi_dsub+0x25a>
    abfa:	2800      	cmp	r0, #0
    abfc:	d110      	bne.n	ac20 <__aeabi_dsub+0x74>
    abfe:	000b      	movs	r3, r1
    ac00:	4313      	orrs	r3, r2
    ac02:	d100      	bne.n	ac06 <__aeabi_dsub+0x5a>
    ac04:	e0d7      	b.n	adb6 <__aeabi_dsub+0x20a>
    ac06:	1e6b      	subs	r3, r5, #1
    ac08:	2b00      	cmp	r3, #0
    ac0a:	d000      	beq.n	ac0e <__aeabi_dsub+0x62>
    ac0c:	e14b      	b.n	aea6 <__aeabi_dsub+0x2fa>
    ac0e:	4653      	mov	r3, sl
    ac10:	1a9f      	subs	r7, r3, r2
    ac12:	45ba      	cmp	sl, r7
    ac14:	4180      	sbcs	r0, r0
    ac16:	1a64      	subs	r4, r4, r1
    ac18:	4240      	negs	r0, r0
    ac1a:	1a24      	subs	r4, r4, r0
    ac1c:	2601      	movs	r6, #1
    ac1e:	e01e      	b.n	ac5e <__aeabi_dsub+0xb2>
    ac20:	4bb3      	ldr	r3, [pc, #716]	; (aef0 <__aeabi_dsub+0x344>)
    ac22:	429e      	cmp	r6, r3
    ac24:	d048      	beq.n	acb8 <__aeabi_dsub+0x10c>
    ac26:	2380      	movs	r3, #128	; 0x80
    ac28:	041b      	lsls	r3, r3, #16
    ac2a:	4319      	orrs	r1, r3
    ac2c:	2d38      	cmp	r5, #56	; 0x38
    ac2e:	dd00      	ble.n	ac32 <__aeabi_dsub+0x86>
    ac30:	e119      	b.n	ae66 <__aeabi_dsub+0x2ba>
    ac32:	2d1f      	cmp	r5, #31
    ac34:	dd00      	ble.n	ac38 <__aeabi_dsub+0x8c>
    ac36:	e14c      	b.n	aed2 <__aeabi_dsub+0x326>
    ac38:	2320      	movs	r3, #32
    ac3a:	000f      	movs	r7, r1
    ac3c:	1b5b      	subs	r3, r3, r5
    ac3e:	0010      	movs	r0, r2
    ac40:	409a      	lsls	r2, r3
    ac42:	409f      	lsls	r7, r3
    ac44:	40e8      	lsrs	r0, r5
    ac46:	1e53      	subs	r3, r2, #1
    ac48:	419a      	sbcs	r2, r3
    ac4a:	40e9      	lsrs	r1, r5
    ac4c:	4307      	orrs	r7, r0
    ac4e:	4317      	orrs	r7, r2
    ac50:	4653      	mov	r3, sl
    ac52:	1bdf      	subs	r7, r3, r7
    ac54:	1a61      	subs	r1, r4, r1
    ac56:	45ba      	cmp	sl, r7
    ac58:	41a4      	sbcs	r4, r4
    ac5a:	4264      	negs	r4, r4
    ac5c:	1b0c      	subs	r4, r1, r4
    ac5e:	0223      	lsls	r3, r4, #8
    ac60:	d400      	bmi.n	ac64 <__aeabi_dsub+0xb8>
    ac62:	e0c5      	b.n	adf0 <__aeabi_dsub+0x244>
    ac64:	0264      	lsls	r4, r4, #9
    ac66:	0a65      	lsrs	r5, r4, #9
    ac68:	2d00      	cmp	r5, #0
    ac6a:	d100      	bne.n	ac6e <__aeabi_dsub+0xc2>
    ac6c:	e0f6      	b.n	ae5c <__aeabi_dsub+0x2b0>
    ac6e:	0028      	movs	r0, r5
    ac70:	f000 fbf0 	bl	b454 <__clzsi2>
    ac74:	0003      	movs	r3, r0
    ac76:	3b08      	subs	r3, #8
    ac78:	2b1f      	cmp	r3, #31
    ac7a:	dd00      	ble.n	ac7e <__aeabi_dsub+0xd2>
    ac7c:	e0e9      	b.n	ae52 <__aeabi_dsub+0x2a6>
    ac7e:	2220      	movs	r2, #32
    ac80:	003c      	movs	r4, r7
    ac82:	1ad2      	subs	r2, r2, r3
    ac84:	409d      	lsls	r5, r3
    ac86:	40d4      	lsrs	r4, r2
    ac88:	409f      	lsls	r7, r3
    ac8a:	4325      	orrs	r5, r4
    ac8c:	429e      	cmp	r6, r3
    ac8e:	dd00      	ble.n	ac92 <__aeabi_dsub+0xe6>
    ac90:	e0db      	b.n	ae4a <__aeabi_dsub+0x29e>
    ac92:	1b9e      	subs	r6, r3, r6
    ac94:	1c73      	adds	r3, r6, #1
    ac96:	2b1f      	cmp	r3, #31
    ac98:	dd00      	ble.n	ac9c <__aeabi_dsub+0xf0>
    ac9a:	e10a      	b.n	aeb2 <__aeabi_dsub+0x306>
    ac9c:	2220      	movs	r2, #32
    ac9e:	0038      	movs	r0, r7
    aca0:	1ad2      	subs	r2, r2, r3
    aca2:	0029      	movs	r1, r5
    aca4:	4097      	lsls	r7, r2
    aca6:	002c      	movs	r4, r5
    aca8:	4091      	lsls	r1, r2
    acaa:	40d8      	lsrs	r0, r3
    acac:	1e7a      	subs	r2, r7, #1
    acae:	4197      	sbcs	r7, r2
    acb0:	40dc      	lsrs	r4, r3
    acb2:	2600      	movs	r6, #0
    acb4:	4301      	orrs	r1, r0
    acb6:	430f      	orrs	r7, r1
    acb8:	077b      	lsls	r3, r7, #29
    acba:	d009      	beq.n	acd0 <__aeabi_dsub+0x124>
    acbc:	230f      	movs	r3, #15
    acbe:	403b      	ands	r3, r7
    acc0:	2b04      	cmp	r3, #4
    acc2:	d005      	beq.n	acd0 <__aeabi_dsub+0x124>
    acc4:	1d3b      	adds	r3, r7, #4
    acc6:	42bb      	cmp	r3, r7
    acc8:	41bf      	sbcs	r7, r7
    acca:	427f      	negs	r7, r7
    accc:	19e4      	adds	r4, r4, r7
    acce:	001f      	movs	r7, r3
    acd0:	0223      	lsls	r3, r4, #8
    acd2:	d525      	bpl.n	ad20 <__aeabi_dsub+0x174>
    acd4:	4b86      	ldr	r3, [pc, #536]	; (aef0 <__aeabi_dsub+0x344>)
    acd6:	3601      	adds	r6, #1
    acd8:	429e      	cmp	r6, r3
    acda:	d100      	bne.n	acde <__aeabi_dsub+0x132>
    acdc:	e0af      	b.n	ae3e <__aeabi_dsub+0x292>
    acde:	4b85      	ldr	r3, [pc, #532]	; (aef4 <__aeabi_dsub+0x348>)
    ace0:	2501      	movs	r5, #1
    ace2:	401c      	ands	r4, r3
    ace4:	4643      	mov	r3, r8
    ace6:	0762      	lsls	r2, r4, #29
    ace8:	08ff      	lsrs	r7, r7, #3
    acea:	0264      	lsls	r4, r4, #9
    acec:	0576      	lsls	r6, r6, #21
    acee:	4317      	orrs	r7, r2
    acf0:	0b24      	lsrs	r4, r4, #12
    acf2:	0d76      	lsrs	r6, r6, #21
    acf4:	401d      	ands	r5, r3
    acf6:	2100      	movs	r1, #0
    acf8:	0324      	lsls	r4, r4, #12
    acfa:	0b23      	lsrs	r3, r4, #12
    acfc:	0d0c      	lsrs	r4, r1, #20
    acfe:	4a7e      	ldr	r2, [pc, #504]	; (aef8 <__aeabi_dsub+0x34c>)
    ad00:	0524      	lsls	r4, r4, #20
    ad02:	431c      	orrs	r4, r3
    ad04:	4014      	ands	r4, r2
    ad06:	0533      	lsls	r3, r6, #20
    ad08:	4323      	orrs	r3, r4
    ad0a:	005b      	lsls	r3, r3, #1
    ad0c:	07ed      	lsls	r5, r5, #31
    ad0e:	085b      	lsrs	r3, r3, #1
    ad10:	432b      	orrs	r3, r5
    ad12:	0038      	movs	r0, r7
    ad14:	0019      	movs	r1, r3
    ad16:	bc1c      	pop	{r2, r3, r4}
    ad18:	4690      	mov	r8, r2
    ad1a:	4699      	mov	r9, r3
    ad1c:	46a2      	mov	sl, r4
    ad1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ad20:	2501      	movs	r5, #1
    ad22:	4643      	mov	r3, r8
    ad24:	0762      	lsls	r2, r4, #29
    ad26:	08ff      	lsrs	r7, r7, #3
    ad28:	4317      	orrs	r7, r2
    ad2a:	08e4      	lsrs	r4, r4, #3
    ad2c:	401d      	ands	r5, r3
    ad2e:	4b70      	ldr	r3, [pc, #448]	; (aef0 <__aeabi_dsub+0x344>)
    ad30:	429e      	cmp	r6, r3
    ad32:	d036      	beq.n	ada2 <__aeabi_dsub+0x1f6>
    ad34:	0324      	lsls	r4, r4, #12
    ad36:	0576      	lsls	r6, r6, #21
    ad38:	0b24      	lsrs	r4, r4, #12
    ad3a:	0d76      	lsrs	r6, r6, #21
    ad3c:	e7db      	b.n	acf6 <__aeabi_dsub+0x14a>
    ad3e:	4663      	mov	r3, ip
    ad40:	1af3      	subs	r3, r6, r3
    ad42:	2b00      	cmp	r3, #0
    ad44:	dc00      	bgt.n	ad48 <__aeabi_dsub+0x19c>
    ad46:	e094      	b.n	ae72 <__aeabi_dsub+0x2c6>
    ad48:	4660      	mov	r0, ip
    ad4a:	2800      	cmp	r0, #0
    ad4c:	d035      	beq.n	adba <__aeabi_dsub+0x20e>
    ad4e:	4868      	ldr	r0, [pc, #416]	; (aef0 <__aeabi_dsub+0x344>)
    ad50:	4286      	cmp	r6, r0
    ad52:	d0b1      	beq.n	acb8 <__aeabi_dsub+0x10c>
    ad54:	2780      	movs	r7, #128	; 0x80
    ad56:	043f      	lsls	r7, r7, #16
    ad58:	4339      	orrs	r1, r7
    ad5a:	2b38      	cmp	r3, #56	; 0x38
    ad5c:	dc00      	bgt.n	ad60 <__aeabi_dsub+0x1b4>
    ad5e:	e0fd      	b.n	af5c <__aeabi_dsub+0x3b0>
    ad60:	430a      	orrs	r2, r1
    ad62:	0017      	movs	r7, r2
    ad64:	2100      	movs	r1, #0
    ad66:	1e7a      	subs	r2, r7, #1
    ad68:	4197      	sbcs	r7, r2
    ad6a:	4457      	add	r7, sl
    ad6c:	4557      	cmp	r7, sl
    ad6e:	4180      	sbcs	r0, r0
    ad70:	1909      	adds	r1, r1, r4
    ad72:	4244      	negs	r4, r0
    ad74:	190c      	adds	r4, r1, r4
    ad76:	0223      	lsls	r3, r4, #8
    ad78:	d53a      	bpl.n	adf0 <__aeabi_dsub+0x244>
    ad7a:	4b5d      	ldr	r3, [pc, #372]	; (aef0 <__aeabi_dsub+0x344>)
    ad7c:	3601      	adds	r6, #1
    ad7e:	429e      	cmp	r6, r3
    ad80:	d100      	bne.n	ad84 <__aeabi_dsub+0x1d8>
    ad82:	e14b      	b.n	b01c <__aeabi_dsub+0x470>
    ad84:	2201      	movs	r2, #1
    ad86:	4b5b      	ldr	r3, [pc, #364]	; (aef4 <__aeabi_dsub+0x348>)
    ad88:	401c      	ands	r4, r3
    ad8a:	087b      	lsrs	r3, r7, #1
    ad8c:	4017      	ands	r7, r2
    ad8e:	431f      	orrs	r7, r3
    ad90:	07e2      	lsls	r2, r4, #31
    ad92:	4317      	orrs	r7, r2
    ad94:	0864      	lsrs	r4, r4, #1
    ad96:	e78f      	b.n	acb8 <__aeabi_dsub+0x10c>
    ad98:	0008      	movs	r0, r1
    ad9a:	4310      	orrs	r0, r2
    ad9c:	d000      	beq.n	ada0 <__aeabi_dsub+0x1f4>
    ad9e:	e724      	b.n	abea <__aeabi_dsub+0x3e>
    ada0:	e721      	b.n	abe6 <__aeabi_dsub+0x3a>
    ada2:	0023      	movs	r3, r4
    ada4:	433b      	orrs	r3, r7
    ada6:	d100      	bne.n	adaa <__aeabi_dsub+0x1fe>
    ada8:	e1b9      	b.n	b11e <__aeabi_dsub+0x572>
    adaa:	2280      	movs	r2, #128	; 0x80
    adac:	0312      	lsls	r2, r2, #12
    adae:	4314      	orrs	r4, r2
    adb0:	0324      	lsls	r4, r4, #12
    adb2:	0b24      	lsrs	r4, r4, #12
    adb4:	e79f      	b.n	acf6 <__aeabi_dsub+0x14a>
    adb6:	002e      	movs	r6, r5
    adb8:	e77e      	b.n	acb8 <__aeabi_dsub+0x10c>
    adba:	0008      	movs	r0, r1
    adbc:	4310      	orrs	r0, r2
    adbe:	d100      	bne.n	adc2 <__aeabi_dsub+0x216>
    adc0:	e0ca      	b.n	af58 <__aeabi_dsub+0x3ac>
    adc2:	1e58      	subs	r0, r3, #1
    adc4:	4684      	mov	ip, r0
    adc6:	2800      	cmp	r0, #0
    adc8:	d000      	beq.n	adcc <__aeabi_dsub+0x220>
    adca:	e0e7      	b.n	af9c <__aeabi_dsub+0x3f0>
    adcc:	4452      	add	r2, sl
    adce:	4552      	cmp	r2, sl
    add0:	4180      	sbcs	r0, r0
    add2:	1864      	adds	r4, r4, r1
    add4:	4240      	negs	r0, r0
    add6:	1824      	adds	r4, r4, r0
    add8:	0017      	movs	r7, r2
    adda:	2601      	movs	r6, #1
    addc:	0223      	lsls	r3, r4, #8
    adde:	d507      	bpl.n	adf0 <__aeabi_dsub+0x244>
    ade0:	2602      	movs	r6, #2
    ade2:	e7cf      	b.n	ad84 <__aeabi_dsub+0x1d8>
    ade4:	4664      	mov	r4, ip
    ade6:	432c      	orrs	r4, r5
    ade8:	d100      	bne.n	adec <__aeabi_dsub+0x240>
    adea:	e1b3      	b.n	b154 <__aeabi_dsub+0x5a8>
    adec:	002c      	movs	r4, r5
    adee:	4667      	mov	r7, ip
    adf0:	077b      	lsls	r3, r7, #29
    adf2:	d000      	beq.n	adf6 <__aeabi_dsub+0x24a>
    adf4:	e762      	b.n	acbc <__aeabi_dsub+0x110>
    adf6:	0763      	lsls	r3, r4, #29
    adf8:	08ff      	lsrs	r7, r7, #3
    adfa:	431f      	orrs	r7, r3
    adfc:	2501      	movs	r5, #1
    adfe:	4643      	mov	r3, r8
    ae00:	08e4      	lsrs	r4, r4, #3
    ae02:	401d      	ands	r5, r3
    ae04:	e793      	b.n	ad2e <__aeabi_dsub+0x182>
    ae06:	2d00      	cmp	r5, #0
    ae08:	d178      	bne.n	aefc <__aeabi_dsub+0x350>
    ae0a:	1c75      	adds	r5, r6, #1
    ae0c:	056d      	lsls	r5, r5, #21
    ae0e:	0d6d      	lsrs	r5, r5, #21
    ae10:	2d01      	cmp	r5, #1
    ae12:	dc00      	bgt.n	ae16 <__aeabi_dsub+0x26a>
    ae14:	e0f2      	b.n	affc <__aeabi_dsub+0x450>
    ae16:	4650      	mov	r0, sl
    ae18:	1a80      	subs	r0, r0, r2
    ae1a:	4582      	cmp	sl, r0
    ae1c:	41bf      	sbcs	r7, r7
    ae1e:	1a65      	subs	r5, r4, r1
    ae20:	427f      	negs	r7, r7
    ae22:	1bed      	subs	r5, r5, r7
    ae24:	4684      	mov	ip, r0
    ae26:	0228      	lsls	r0, r5, #8
    ae28:	d400      	bmi.n	ae2c <__aeabi_dsub+0x280>
    ae2a:	e08c      	b.n	af46 <__aeabi_dsub+0x39a>
    ae2c:	4650      	mov	r0, sl
    ae2e:	1a17      	subs	r7, r2, r0
    ae30:	42ba      	cmp	r2, r7
    ae32:	4192      	sbcs	r2, r2
    ae34:	1b0c      	subs	r4, r1, r4
    ae36:	4255      	negs	r5, r2
    ae38:	1b65      	subs	r5, r4, r5
    ae3a:	4698      	mov	r8, r3
    ae3c:	e714      	b.n	ac68 <__aeabi_dsub+0xbc>
    ae3e:	2501      	movs	r5, #1
    ae40:	4643      	mov	r3, r8
    ae42:	2400      	movs	r4, #0
    ae44:	401d      	ands	r5, r3
    ae46:	2700      	movs	r7, #0
    ae48:	e755      	b.n	acf6 <__aeabi_dsub+0x14a>
    ae4a:	4c2a      	ldr	r4, [pc, #168]	; (aef4 <__aeabi_dsub+0x348>)
    ae4c:	1af6      	subs	r6, r6, r3
    ae4e:	402c      	ands	r4, r5
    ae50:	e732      	b.n	acb8 <__aeabi_dsub+0x10c>
    ae52:	003d      	movs	r5, r7
    ae54:	3828      	subs	r0, #40	; 0x28
    ae56:	4085      	lsls	r5, r0
    ae58:	2700      	movs	r7, #0
    ae5a:	e717      	b.n	ac8c <__aeabi_dsub+0xe0>
    ae5c:	0038      	movs	r0, r7
    ae5e:	f000 faf9 	bl	b454 <__clzsi2>
    ae62:	3020      	adds	r0, #32
    ae64:	e706      	b.n	ac74 <__aeabi_dsub+0xc8>
    ae66:	430a      	orrs	r2, r1
    ae68:	0017      	movs	r7, r2
    ae6a:	2100      	movs	r1, #0
    ae6c:	1e7a      	subs	r2, r7, #1
    ae6e:	4197      	sbcs	r7, r2
    ae70:	e6ee      	b.n	ac50 <__aeabi_dsub+0xa4>
    ae72:	2b00      	cmp	r3, #0
    ae74:	d000      	beq.n	ae78 <__aeabi_dsub+0x2cc>
    ae76:	e0e5      	b.n	b044 <__aeabi_dsub+0x498>
    ae78:	1c73      	adds	r3, r6, #1
    ae7a:	469c      	mov	ip, r3
    ae7c:	055b      	lsls	r3, r3, #21
    ae7e:	0d5b      	lsrs	r3, r3, #21
    ae80:	2b01      	cmp	r3, #1
    ae82:	dc00      	bgt.n	ae86 <__aeabi_dsub+0x2da>
    ae84:	e09f      	b.n	afc6 <__aeabi_dsub+0x41a>
    ae86:	4b1a      	ldr	r3, [pc, #104]	; (aef0 <__aeabi_dsub+0x344>)
    ae88:	459c      	cmp	ip, r3
    ae8a:	d100      	bne.n	ae8e <__aeabi_dsub+0x2e2>
    ae8c:	e0c5      	b.n	b01a <__aeabi_dsub+0x46e>
    ae8e:	4452      	add	r2, sl
    ae90:	4552      	cmp	r2, sl
    ae92:	4180      	sbcs	r0, r0
    ae94:	1864      	adds	r4, r4, r1
    ae96:	4240      	negs	r0, r0
    ae98:	1824      	adds	r4, r4, r0
    ae9a:	07e7      	lsls	r7, r4, #31
    ae9c:	0852      	lsrs	r2, r2, #1
    ae9e:	4317      	orrs	r7, r2
    aea0:	0864      	lsrs	r4, r4, #1
    aea2:	4666      	mov	r6, ip
    aea4:	e708      	b.n	acb8 <__aeabi_dsub+0x10c>
    aea6:	4812      	ldr	r0, [pc, #72]	; (aef0 <__aeabi_dsub+0x344>)
    aea8:	4285      	cmp	r5, r0
    aeaa:	d100      	bne.n	aeae <__aeabi_dsub+0x302>
    aeac:	e085      	b.n	afba <__aeabi_dsub+0x40e>
    aeae:	001d      	movs	r5, r3
    aeb0:	e6bc      	b.n	ac2c <__aeabi_dsub+0x80>
    aeb2:	0029      	movs	r1, r5
    aeb4:	3e1f      	subs	r6, #31
    aeb6:	40f1      	lsrs	r1, r6
    aeb8:	2b20      	cmp	r3, #32
    aeba:	d100      	bne.n	aebe <__aeabi_dsub+0x312>
    aebc:	e07f      	b.n	afbe <__aeabi_dsub+0x412>
    aebe:	2240      	movs	r2, #64	; 0x40
    aec0:	1ad3      	subs	r3, r2, r3
    aec2:	409d      	lsls	r5, r3
    aec4:	432f      	orrs	r7, r5
    aec6:	1e7d      	subs	r5, r7, #1
    aec8:	41af      	sbcs	r7, r5
    aeca:	2400      	movs	r4, #0
    aecc:	430f      	orrs	r7, r1
    aece:	2600      	movs	r6, #0
    aed0:	e78e      	b.n	adf0 <__aeabi_dsub+0x244>
    aed2:	002b      	movs	r3, r5
    aed4:	000f      	movs	r7, r1
    aed6:	3b20      	subs	r3, #32
    aed8:	40df      	lsrs	r7, r3
    aeda:	2d20      	cmp	r5, #32
    aedc:	d071      	beq.n	afc2 <__aeabi_dsub+0x416>
    aede:	2340      	movs	r3, #64	; 0x40
    aee0:	1b5d      	subs	r5, r3, r5
    aee2:	40a9      	lsls	r1, r5
    aee4:	430a      	orrs	r2, r1
    aee6:	1e51      	subs	r1, r2, #1
    aee8:	418a      	sbcs	r2, r1
    aeea:	2100      	movs	r1, #0
    aeec:	4317      	orrs	r7, r2
    aeee:	e6af      	b.n	ac50 <__aeabi_dsub+0xa4>
    aef0:	000007ff 	.word	0x000007ff
    aef4:	ff7fffff 	.word	0xff7fffff
    aef8:	800fffff 	.word	0x800fffff
    aefc:	2e00      	cmp	r6, #0
    aefe:	d03e      	beq.n	af7e <__aeabi_dsub+0x3d2>
    af00:	4eb3      	ldr	r6, [pc, #716]	; (b1d0 <__aeabi_dsub+0x624>)
    af02:	45b4      	cmp	ip, r6
    af04:	d045      	beq.n	af92 <__aeabi_dsub+0x3e6>
    af06:	2680      	movs	r6, #128	; 0x80
    af08:	0436      	lsls	r6, r6, #16
    af0a:	426d      	negs	r5, r5
    af0c:	4334      	orrs	r4, r6
    af0e:	2d38      	cmp	r5, #56	; 0x38
    af10:	dd00      	ble.n	af14 <__aeabi_dsub+0x368>
    af12:	e0a8      	b.n	b066 <__aeabi_dsub+0x4ba>
    af14:	2d1f      	cmp	r5, #31
    af16:	dd00      	ble.n	af1a <__aeabi_dsub+0x36e>
    af18:	e11f      	b.n	b15a <__aeabi_dsub+0x5ae>
    af1a:	2620      	movs	r6, #32
    af1c:	0027      	movs	r7, r4
    af1e:	4650      	mov	r0, sl
    af20:	1b76      	subs	r6, r6, r5
    af22:	40b7      	lsls	r7, r6
    af24:	40e8      	lsrs	r0, r5
    af26:	4307      	orrs	r7, r0
    af28:	4650      	mov	r0, sl
    af2a:	40b0      	lsls	r0, r6
    af2c:	1e46      	subs	r6, r0, #1
    af2e:	41b0      	sbcs	r0, r6
    af30:	40ec      	lsrs	r4, r5
    af32:	4338      	orrs	r0, r7
    af34:	1a17      	subs	r7, r2, r0
    af36:	42ba      	cmp	r2, r7
    af38:	4192      	sbcs	r2, r2
    af3a:	1b0c      	subs	r4, r1, r4
    af3c:	4252      	negs	r2, r2
    af3e:	1aa4      	subs	r4, r4, r2
    af40:	4666      	mov	r6, ip
    af42:	4698      	mov	r8, r3
    af44:	e68b      	b.n	ac5e <__aeabi_dsub+0xb2>
    af46:	4664      	mov	r4, ip
    af48:	4667      	mov	r7, ip
    af4a:	432c      	orrs	r4, r5
    af4c:	d000      	beq.n	af50 <__aeabi_dsub+0x3a4>
    af4e:	e68b      	b.n	ac68 <__aeabi_dsub+0xbc>
    af50:	2500      	movs	r5, #0
    af52:	2600      	movs	r6, #0
    af54:	2700      	movs	r7, #0
    af56:	e6ea      	b.n	ad2e <__aeabi_dsub+0x182>
    af58:	001e      	movs	r6, r3
    af5a:	e6ad      	b.n	acb8 <__aeabi_dsub+0x10c>
    af5c:	2b1f      	cmp	r3, #31
    af5e:	dc60      	bgt.n	b022 <__aeabi_dsub+0x476>
    af60:	2720      	movs	r7, #32
    af62:	1af8      	subs	r0, r7, r3
    af64:	000f      	movs	r7, r1
    af66:	4684      	mov	ip, r0
    af68:	4087      	lsls	r7, r0
    af6a:	0010      	movs	r0, r2
    af6c:	40d8      	lsrs	r0, r3
    af6e:	4307      	orrs	r7, r0
    af70:	4660      	mov	r0, ip
    af72:	4082      	lsls	r2, r0
    af74:	1e50      	subs	r0, r2, #1
    af76:	4182      	sbcs	r2, r0
    af78:	40d9      	lsrs	r1, r3
    af7a:	4317      	orrs	r7, r2
    af7c:	e6f5      	b.n	ad6a <__aeabi_dsub+0x1be>
    af7e:	0026      	movs	r6, r4
    af80:	4650      	mov	r0, sl
    af82:	4306      	orrs	r6, r0
    af84:	d005      	beq.n	af92 <__aeabi_dsub+0x3e6>
    af86:	43ed      	mvns	r5, r5
    af88:	2d00      	cmp	r5, #0
    af8a:	d0d3      	beq.n	af34 <__aeabi_dsub+0x388>
    af8c:	4e90      	ldr	r6, [pc, #576]	; (b1d0 <__aeabi_dsub+0x624>)
    af8e:	45b4      	cmp	ip, r6
    af90:	d1bd      	bne.n	af0e <__aeabi_dsub+0x362>
    af92:	000c      	movs	r4, r1
    af94:	0017      	movs	r7, r2
    af96:	4666      	mov	r6, ip
    af98:	4698      	mov	r8, r3
    af9a:	e68d      	b.n	acb8 <__aeabi_dsub+0x10c>
    af9c:	488c      	ldr	r0, [pc, #560]	; (b1d0 <__aeabi_dsub+0x624>)
    af9e:	4283      	cmp	r3, r0
    afa0:	d00b      	beq.n	afba <__aeabi_dsub+0x40e>
    afa2:	4663      	mov	r3, ip
    afa4:	e6d9      	b.n	ad5a <__aeabi_dsub+0x1ae>
    afa6:	2d00      	cmp	r5, #0
    afa8:	d000      	beq.n	afac <__aeabi_dsub+0x400>
    afaa:	e096      	b.n	b0da <__aeabi_dsub+0x52e>
    afac:	0008      	movs	r0, r1
    afae:	4310      	orrs	r0, r2
    afb0:	d100      	bne.n	afb4 <__aeabi_dsub+0x408>
    afb2:	e0e2      	b.n	b17a <__aeabi_dsub+0x5ce>
    afb4:	000c      	movs	r4, r1
    afb6:	0017      	movs	r7, r2
    afb8:	4698      	mov	r8, r3
    afba:	4e85      	ldr	r6, [pc, #532]	; (b1d0 <__aeabi_dsub+0x624>)
    afbc:	e67c      	b.n	acb8 <__aeabi_dsub+0x10c>
    afbe:	2500      	movs	r5, #0
    afc0:	e780      	b.n	aec4 <__aeabi_dsub+0x318>
    afc2:	2100      	movs	r1, #0
    afc4:	e78e      	b.n	aee4 <__aeabi_dsub+0x338>
    afc6:	0023      	movs	r3, r4
    afc8:	4650      	mov	r0, sl
    afca:	4303      	orrs	r3, r0
    afcc:	2e00      	cmp	r6, #0
    afce:	d000      	beq.n	afd2 <__aeabi_dsub+0x426>
    afd0:	e0a8      	b.n	b124 <__aeabi_dsub+0x578>
    afd2:	2b00      	cmp	r3, #0
    afd4:	d100      	bne.n	afd8 <__aeabi_dsub+0x42c>
    afd6:	e0de      	b.n	b196 <__aeabi_dsub+0x5ea>
    afd8:	000b      	movs	r3, r1
    afda:	4313      	orrs	r3, r2
    afdc:	d100      	bne.n	afe0 <__aeabi_dsub+0x434>
    afde:	e66b      	b.n	acb8 <__aeabi_dsub+0x10c>
    afe0:	4452      	add	r2, sl
    afe2:	4552      	cmp	r2, sl
    afe4:	4180      	sbcs	r0, r0
    afe6:	1864      	adds	r4, r4, r1
    afe8:	4240      	negs	r0, r0
    afea:	1824      	adds	r4, r4, r0
    afec:	0017      	movs	r7, r2
    afee:	0223      	lsls	r3, r4, #8
    aff0:	d400      	bmi.n	aff4 <__aeabi_dsub+0x448>
    aff2:	e6fd      	b.n	adf0 <__aeabi_dsub+0x244>
    aff4:	4b77      	ldr	r3, [pc, #476]	; (b1d4 <__aeabi_dsub+0x628>)
    aff6:	4666      	mov	r6, ip
    aff8:	401c      	ands	r4, r3
    affa:	e65d      	b.n	acb8 <__aeabi_dsub+0x10c>
    affc:	0025      	movs	r5, r4
    affe:	4650      	mov	r0, sl
    b000:	4305      	orrs	r5, r0
    b002:	2e00      	cmp	r6, #0
    b004:	d1cf      	bne.n	afa6 <__aeabi_dsub+0x3fa>
    b006:	2d00      	cmp	r5, #0
    b008:	d14f      	bne.n	b0aa <__aeabi_dsub+0x4fe>
    b00a:	000c      	movs	r4, r1
    b00c:	4314      	orrs	r4, r2
    b00e:	d100      	bne.n	b012 <__aeabi_dsub+0x466>
    b010:	e0a0      	b.n	b154 <__aeabi_dsub+0x5a8>
    b012:	000c      	movs	r4, r1
    b014:	0017      	movs	r7, r2
    b016:	4698      	mov	r8, r3
    b018:	e64e      	b.n	acb8 <__aeabi_dsub+0x10c>
    b01a:	4666      	mov	r6, ip
    b01c:	2400      	movs	r4, #0
    b01e:	2700      	movs	r7, #0
    b020:	e685      	b.n	ad2e <__aeabi_dsub+0x182>
    b022:	001f      	movs	r7, r3
    b024:	0008      	movs	r0, r1
    b026:	3f20      	subs	r7, #32
    b028:	40f8      	lsrs	r0, r7
    b02a:	0007      	movs	r7, r0
    b02c:	2b20      	cmp	r3, #32
    b02e:	d100      	bne.n	b032 <__aeabi_dsub+0x486>
    b030:	e08e      	b.n	b150 <__aeabi_dsub+0x5a4>
    b032:	2040      	movs	r0, #64	; 0x40
    b034:	1ac3      	subs	r3, r0, r3
    b036:	4099      	lsls	r1, r3
    b038:	430a      	orrs	r2, r1
    b03a:	1e51      	subs	r1, r2, #1
    b03c:	418a      	sbcs	r2, r1
    b03e:	2100      	movs	r1, #0
    b040:	4317      	orrs	r7, r2
    b042:	e692      	b.n	ad6a <__aeabi_dsub+0x1be>
    b044:	2e00      	cmp	r6, #0
    b046:	d114      	bne.n	b072 <__aeabi_dsub+0x4c6>
    b048:	0026      	movs	r6, r4
    b04a:	4650      	mov	r0, sl
    b04c:	4306      	orrs	r6, r0
    b04e:	d062      	beq.n	b116 <__aeabi_dsub+0x56a>
    b050:	43db      	mvns	r3, r3
    b052:	2b00      	cmp	r3, #0
    b054:	d15c      	bne.n	b110 <__aeabi_dsub+0x564>
    b056:	1887      	adds	r7, r0, r2
    b058:	4297      	cmp	r7, r2
    b05a:	4192      	sbcs	r2, r2
    b05c:	1864      	adds	r4, r4, r1
    b05e:	4252      	negs	r2, r2
    b060:	18a4      	adds	r4, r4, r2
    b062:	4666      	mov	r6, ip
    b064:	e687      	b.n	ad76 <__aeabi_dsub+0x1ca>
    b066:	4650      	mov	r0, sl
    b068:	4320      	orrs	r0, r4
    b06a:	1e44      	subs	r4, r0, #1
    b06c:	41a0      	sbcs	r0, r4
    b06e:	2400      	movs	r4, #0
    b070:	e760      	b.n	af34 <__aeabi_dsub+0x388>
    b072:	4e57      	ldr	r6, [pc, #348]	; (b1d0 <__aeabi_dsub+0x624>)
    b074:	45b4      	cmp	ip, r6
    b076:	d04e      	beq.n	b116 <__aeabi_dsub+0x56a>
    b078:	2680      	movs	r6, #128	; 0x80
    b07a:	0436      	lsls	r6, r6, #16
    b07c:	425b      	negs	r3, r3
    b07e:	4334      	orrs	r4, r6
    b080:	2b38      	cmp	r3, #56	; 0x38
    b082:	dd00      	ble.n	b086 <__aeabi_dsub+0x4da>
    b084:	e07f      	b.n	b186 <__aeabi_dsub+0x5da>
    b086:	2b1f      	cmp	r3, #31
    b088:	dd00      	ble.n	b08c <__aeabi_dsub+0x4e0>
    b08a:	e08b      	b.n	b1a4 <__aeabi_dsub+0x5f8>
    b08c:	2620      	movs	r6, #32
    b08e:	0027      	movs	r7, r4
    b090:	4650      	mov	r0, sl
    b092:	1af6      	subs	r6, r6, r3
    b094:	40b7      	lsls	r7, r6
    b096:	40d8      	lsrs	r0, r3
    b098:	4307      	orrs	r7, r0
    b09a:	4650      	mov	r0, sl
    b09c:	40b0      	lsls	r0, r6
    b09e:	1e46      	subs	r6, r0, #1
    b0a0:	41b0      	sbcs	r0, r6
    b0a2:	4307      	orrs	r7, r0
    b0a4:	40dc      	lsrs	r4, r3
    b0a6:	18bf      	adds	r7, r7, r2
    b0a8:	e7d6      	b.n	b058 <__aeabi_dsub+0x4ac>
    b0aa:	000d      	movs	r5, r1
    b0ac:	4315      	orrs	r5, r2
    b0ae:	d100      	bne.n	b0b2 <__aeabi_dsub+0x506>
    b0b0:	e602      	b.n	acb8 <__aeabi_dsub+0x10c>
    b0b2:	4650      	mov	r0, sl
    b0b4:	1a80      	subs	r0, r0, r2
    b0b6:	4582      	cmp	sl, r0
    b0b8:	41bf      	sbcs	r7, r7
    b0ba:	1a65      	subs	r5, r4, r1
    b0bc:	427f      	negs	r7, r7
    b0be:	1bed      	subs	r5, r5, r7
    b0c0:	4684      	mov	ip, r0
    b0c2:	0228      	lsls	r0, r5, #8
    b0c4:	d400      	bmi.n	b0c8 <__aeabi_dsub+0x51c>
    b0c6:	e68d      	b.n	ade4 <__aeabi_dsub+0x238>
    b0c8:	4650      	mov	r0, sl
    b0ca:	1a17      	subs	r7, r2, r0
    b0cc:	42ba      	cmp	r2, r7
    b0ce:	4192      	sbcs	r2, r2
    b0d0:	1b0c      	subs	r4, r1, r4
    b0d2:	4252      	negs	r2, r2
    b0d4:	1aa4      	subs	r4, r4, r2
    b0d6:	4698      	mov	r8, r3
    b0d8:	e5ee      	b.n	acb8 <__aeabi_dsub+0x10c>
    b0da:	000d      	movs	r5, r1
    b0dc:	4315      	orrs	r5, r2
    b0de:	d100      	bne.n	b0e2 <__aeabi_dsub+0x536>
    b0e0:	e76b      	b.n	afba <__aeabi_dsub+0x40e>
    b0e2:	4650      	mov	r0, sl
    b0e4:	0767      	lsls	r7, r4, #29
    b0e6:	08c0      	lsrs	r0, r0, #3
    b0e8:	4307      	orrs	r7, r0
    b0ea:	2080      	movs	r0, #128	; 0x80
    b0ec:	08e4      	lsrs	r4, r4, #3
    b0ee:	0300      	lsls	r0, r0, #12
    b0f0:	4204      	tst	r4, r0
    b0f2:	d007      	beq.n	b104 <__aeabi_dsub+0x558>
    b0f4:	08cd      	lsrs	r5, r1, #3
    b0f6:	4205      	tst	r5, r0
    b0f8:	d104      	bne.n	b104 <__aeabi_dsub+0x558>
    b0fa:	002c      	movs	r4, r5
    b0fc:	4698      	mov	r8, r3
    b0fe:	08d7      	lsrs	r7, r2, #3
    b100:	0749      	lsls	r1, r1, #29
    b102:	430f      	orrs	r7, r1
    b104:	0f7b      	lsrs	r3, r7, #29
    b106:	00e4      	lsls	r4, r4, #3
    b108:	431c      	orrs	r4, r3
    b10a:	00ff      	lsls	r7, r7, #3
    b10c:	4e30      	ldr	r6, [pc, #192]	; (b1d0 <__aeabi_dsub+0x624>)
    b10e:	e5d3      	b.n	acb8 <__aeabi_dsub+0x10c>
    b110:	4e2f      	ldr	r6, [pc, #188]	; (b1d0 <__aeabi_dsub+0x624>)
    b112:	45b4      	cmp	ip, r6
    b114:	d1b4      	bne.n	b080 <__aeabi_dsub+0x4d4>
    b116:	000c      	movs	r4, r1
    b118:	0017      	movs	r7, r2
    b11a:	4666      	mov	r6, ip
    b11c:	e5cc      	b.n	acb8 <__aeabi_dsub+0x10c>
    b11e:	2700      	movs	r7, #0
    b120:	2400      	movs	r4, #0
    b122:	e5e8      	b.n	acf6 <__aeabi_dsub+0x14a>
    b124:	2b00      	cmp	r3, #0
    b126:	d039      	beq.n	b19c <__aeabi_dsub+0x5f0>
    b128:	000b      	movs	r3, r1
    b12a:	4313      	orrs	r3, r2
    b12c:	d100      	bne.n	b130 <__aeabi_dsub+0x584>
    b12e:	e744      	b.n	afba <__aeabi_dsub+0x40e>
    b130:	08c0      	lsrs	r0, r0, #3
    b132:	0767      	lsls	r7, r4, #29
    b134:	4307      	orrs	r7, r0
    b136:	2080      	movs	r0, #128	; 0x80
    b138:	08e4      	lsrs	r4, r4, #3
    b13a:	0300      	lsls	r0, r0, #12
    b13c:	4204      	tst	r4, r0
    b13e:	d0e1      	beq.n	b104 <__aeabi_dsub+0x558>
    b140:	08cb      	lsrs	r3, r1, #3
    b142:	4203      	tst	r3, r0
    b144:	d1de      	bne.n	b104 <__aeabi_dsub+0x558>
    b146:	08d7      	lsrs	r7, r2, #3
    b148:	0749      	lsls	r1, r1, #29
    b14a:	430f      	orrs	r7, r1
    b14c:	001c      	movs	r4, r3
    b14e:	e7d9      	b.n	b104 <__aeabi_dsub+0x558>
    b150:	2100      	movs	r1, #0
    b152:	e771      	b.n	b038 <__aeabi_dsub+0x48c>
    b154:	2500      	movs	r5, #0
    b156:	2700      	movs	r7, #0
    b158:	e5e9      	b.n	ad2e <__aeabi_dsub+0x182>
    b15a:	002e      	movs	r6, r5
    b15c:	0027      	movs	r7, r4
    b15e:	3e20      	subs	r6, #32
    b160:	40f7      	lsrs	r7, r6
    b162:	2d20      	cmp	r5, #32
    b164:	d02f      	beq.n	b1c6 <__aeabi_dsub+0x61a>
    b166:	2640      	movs	r6, #64	; 0x40
    b168:	1b75      	subs	r5, r6, r5
    b16a:	40ac      	lsls	r4, r5
    b16c:	4650      	mov	r0, sl
    b16e:	4320      	orrs	r0, r4
    b170:	1e44      	subs	r4, r0, #1
    b172:	41a0      	sbcs	r0, r4
    b174:	2400      	movs	r4, #0
    b176:	4338      	orrs	r0, r7
    b178:	e6dc      	b.n	af34 <__aeabi_dsub+0x388>
    b17a:	2480      	movs	r4, #128	; 0x80
    b17c:	2500      	movs	r5, #0
    b17e:	0324      	lsls	r4, r4, #12
    b180:	4e13      	ldr	r6, [pc, #76]	; (b1d0 <__aeabi_dsub+0x624>)
    b182:	2700      	movs	r7, #0
    b184:	e5d3      	b.n	ad2e <__aeabi_dsub+0x182>
    b186:	4650      	mov	r0, sl
    b188:	4320      	orrs	r0, r4
    b18a:	0007      	movs	r7, r0
    b18c:	1e78      	subs	r0, r7, #1
    b18e:	4187      	sbcs	r7, r0
    b190:	2400      	movs	r4, #0
    b192:	18bf      	adds	r7, r7, r2
    b194:	e760      	b.n	b058 <__aeabi_dsub+0x4ac>
    b196:	000c      	movs	r4, r1
    b198:	0017      	movs	r7, r2
    b19a:	e58d      	b.n	acb8 <__aeabi_dsub+0x10c>
    b19c:	000c      	movs	r4, r1
    b19e:	0017      	movs	r7, r2
    b1a0:	4e0b      	ldr	r6, [pc, #44]	; (b1d0 <__aeabi_dsub+0x624>)
    b1a2:	e589      	b.n	acb8 <__aeabi_dsub+0x10c>
    b1a4:	001e      	movs	r6, r3
    b1a6:	0027      	movs	r7, r4
    b1a8:	3e20      	subs	r6, #32
    b1aa:	40f7      	lsrs	r7, r6
    b1ac:	2b20      	cmp	r3, #32
    b1ae:	d00c      	beq.n	b1ca <__aeabi_dsub+0x61e>
    b1b0:	2640      	movs	r6, #64	; 0x40
    b1b2:	1af3      	subs	r3, r6, r3
    b1b4:	409c      	lsls	r4, r3
    b1b6:	4650      	mov	r0, sl
    b1b8:	4320      	orrs	r0, r4
    b1ba:	1e44      	subs	r4, r0, #1
    b1bc:	41a0      	sbcs	r0, r4
    b1be:	4307      	orrs	r7, r0
    b1c0:	2400      	movs	r4, #0
    b1c2:	18bf      	adds	r7, r7, r2
    b1c4:	e748      	b.n	b058 <__aeabi_dsub+0x4ac>
    b1c6:	2400      	movs	r4, #0
    b1c8:	e7d0      	b.n	b16c <__aeabi_dsub+0x5c0>
    b1ca:	2400      	movs	r4, #0
    b1cc:	e7f3      	b.n	b1b6 <__aeabi_dsub+0x60a>
    b1ce:	46c0      	nop			; (mov r8, r8)
    b1d0:	000007ff 	.word	0x000007ff
    b1d4:	ff7fffff 	.word	0xff7fffff

0000b1d8 <__aeabi_d2iz>:
    b1d8:	b530      	push	{r4, r5, lr}
    b1da:	4d13      	ldr	r5, [pc, #76]	; (b228 <__aeabi_d2iz+0x50>)
    b1dc:	030a      	lsls	r2, r1, #12
    b1de:	004b      	lsls	r3, r1, #1
    b1e0:	0b12      	lsrs	r2, r2, #12
    b1e2:	0d5b      	lsrs	r3, r3, #21
    b1e4:	0fc9      	lsrs	r1, r1, #31
    b1e6:	2400      	movs	r4, #0
    b1e8:	42ab      	cmp	r3, r5
    b1ea:	dd10      	ble.n	b20e <__aeabi_d2iz+0x36>
    b1ec:	4c0f      	ldr	r4, [pc, #60]	; (b22c <__aeabi_d2iz+0x54>)
    b1ee:	42a3      	cmp	r3, r4
    b1f0:	dc0f      	bgt.n	b212 <__aeabi_d2iz+0x3a>
    b1f2:	2480      	movs	r4, #128	; 0x80
    b1f4:	4d0e      	ldr	r5, [pc, #56]	; (b230 <__aeabi_d2iz+0x58>)
    b1f6:	0364      	lsls	r4, r4, #13
    b1f8:	4322      	orrs	r2, r4
    b1fa:	1aed      	subs	r5, r5, r3
    b1fc:	2d1f      	cmp	r5, #31
    b1fe:	dd0b      	ble.n	b218 <__aeabi_d2iz+0x40>
    b200:	480c      	ldr	r0, [pc, #48]	; (b234 <__aeabi_d2iz+0x5c>)
    b202:	1ac3      	subs	r3, r0, r3
    b204:	40da      	lsrs	r2, r3
    b206:	4254      	negs	r4, r2
    b208:	2900      	cmp	r1, #0
    b20a:	d100      	bne.n	b20e <__aeabi_d2iz+0x36>
    b20c:	0014      	movs	r4, r2
    b20e:	0020      	movs	r0, r4
    b210:	bd30      	pop	{r4, r5, pc}
    b212:	4b09      	ldr	r3, [pc, #36]	; (b238 <__aeabi_d2iz+0x60>)
    b214:	18cc      	adds	r4, r1, r3
    b216:	e7fa      	b.n	b20e <__aeabi_d2iz+0x36>
    b218:	4c08      	ldr	r4, [pc, #32]	; (b23c <__aeabi_d2iz+0x64>)
    b21a:	40e8      	lsrs	r0, r5
    b21c:	46a4      	mov	ip, r4
    b21e:	4463      	add	r3, ip
    b220:	409a      	lsls	r2, r3
    b222:	4302      	orrs	r2, r0
    b224:	e7ef      	b.n	b206 <__aeabi_d2iz+0x2e>
    b226:	46c0      	nop			; (mov r8, r8)
    b228:	000003fe 	.word	0x000003fe
    b22c:	0000041d 	.word	0x0000041d
    b230:	00000433 	.word	0x00000433
    b234:	00000413 	.word	0x00000413
    b238:	7fffffff 	.word	0x7fffffff
    b23c:	fffffbed 	.word	0xfffffbed

0000b240 <__aeabi_i2d>:
    b240:	b570      	push	{r4, r5, r6, lr}
    b242:	2800      	cmp	r0, #0
    b244:	d030      	beq.n	b2a8 <__aeabi_i2d+0x68>
    b246:	17c3      	asrs	r3, r0, #31
    b248:	18c4      	adds	r4, r0, r3
    b24a:	405c      	eors	r4, r3
    b24c:	0fc5      	lsrs	r5, r0, #31
    b24e:	0020      	movs	r0, r4
    b250:	f000 f900 	bl	b454 <__clzsi2>
    b254:	4b17      	ldr	r3, [pc, #92]	; (b2b4 <__aeabi_i2d+0x74>)
    b256:	4a18      	ldr	r2, [pc, #96]	; (b2b8 <__aeabi_i2d+0x78>)
    b258:	1a1b      	subs	r3, r3, r0
    b25a:	1ad2      	subs	r2, r2, r3
    b25c:	2a1f      	cmp	r2, #31
    b25e:	dd18      	ble.n	b292 <__aeabi_i2d+0x52>
    b260:	4a16      	ldr	r2, [pc, #88]	; (b2bc <__aeabi_i2d+0x7c>)
    b262:	1ad2      	subs	r2, r2, r3
    b264:	4094      	lsls	r4, r2
    b266:	2200      	movs	r2, #0
    b268:	0324      	lsls	r4, r4, #12
    b26a:	055b      	lsls	r3, r3, #21
    b26c:	0b24      	lsrs	r4, r4, #12
    b26e:	0d5b      	lsrs	r3, r3, #21
    b270:	2100      	movs	r1, #0
    b272:	0010      	movs	r0, r2
    b274:	0324      	lsls	r4, r4, #12
    b276:	0d0a      	lsrs	r2, r1, #20
    b278:	0b24      	lsrs	r4, r4, #12
    b27a:	0512      	lsls	r2, r2, #20
    b27c:	4322      	orrs	r2, r4
    b27e:	4c10      	ldr	r4, [pc, #64]	; (b2c0 <__aeabi_i2d+0x80>)
    b280:	051b      	lsls	r3, r3, #20
    b282:	4022      	ands	r2, r4
    b284:	4313      	orrs	r3, r2
    b286:	005b      	lsls	r3, r3, #1
    b288:	07ed      	lsls	r5, r5, #31
    b28a:	085b      	lsrs	r3, r3, #1
    b28c:	432b      	orrs	r3, r5
    b28e:	0019      	movs	r1, r3
    b290:	bd70      	pop	{r4, r5, r6, pc}
    b292:	0021      	movs	r1, r4
    b294:	4091      	lsls	r1, r2
    b296:	000a      	movs	r2, r1
    b298:	210b      	movs	r1, #11
    b29a:	1a08      	subs	r0, r1, r0
    b29c:	40c4      	lsrs	r4, r0
    b29e:	055b      	lsls	r3, r3, #21
    b2a0:	0324      	lsls	r4, r4, #12
    b2a2:	0b24      	lsrs	r4, r4, #12
    b2a4:	0d5b      	lsrs	r3, r3, #21
    b2a6:	e7e3      	b.n	b270 <__aeabi_i2d+0x30>
    b2a8:	2500      	movs	r5, #0
    b2aa:	2300      	movs	r3, #0
    b2ac:	2400      	movs	r4, #0
    b2ae:	2200      	movs	r2, #0
    b2b0:	e7de      	b.n	b270 <__aeabi_i2d+0x30>
    b2b2:	46c0      	nop			; (mov r8, r8)
    b2b4:	0000041e 	.word	0x0000041e
    b2b8:	00000433 	.word	0x00000433
    b2bc:	00000413 	.word	0x00000413
    b2c0:	800fffff 	.word	0x800fffff

0000b2c4 <__aeabi_ui2d>:
    b2c4:	b510      	push	{r4, lr}
    b2c6:	1e04      	subs	r4, r0, #0
    b2c8:	d028      	beq.n	b31c <__aeabi_ui2d+0x58>
    b2ca:	f000 f8c3 	bl	b454 <__clzsi2>
    b2ce:	4b15      	ldr	r3, [pc, #84]	; (b324 <__aeabi_ui2d+0x60>)
    b2d0:	4a15      	ldr	r2, [pc, #84]	; (b328 <__aeabi_ui2d+0x64>)
    b2d2:	1a1b      	subs	r3, r3, r0
    b2d4:	1ad2      	subs	r2, r2, r3
    b2d6:	2a1f      	cmp	r2, #31
    b2d8:	dd15      	ble.n	b306 <__aeabi_ui2d+0x42>
    b2da:	4a14      	ldr	r2, [pc, #80]	; (b32c <__aeabi_ui2d+0x68>)
    b2dc:	1ad2      	subs	r2, r2, r3
    b2de:	4094      	lsls	r4, r2
    b2e0:	2200      	movs	r2, #0
    b2e2:	0324      	lsls	r4, r4, #12
    b2e4:	055b      	lsls	r3, r3, #21
    b2e6:	0b24      	lsrs	r4, r4, #12
    b2e8:	0d5b      	lsrs	r3, r3, #21
    b2ea:	2100      	movs	r1, #0
    b2ec:	0010      	movs	r0, r2
    b2ee:	0324      	lsls	r4, r4, #12
    b2f0:	0d0a      	lsrs	r2, r1, #20
    b2f2:	0b24      	lsrs	r4, r4, #12
    b2f4:	0512      	lsls	r2, r2, #20
    b2f6:	4322      	orrs	r2, r4
    b2f8:	4c0d      	ldr	r4, [pc, #52]	; (b330 <__aeabi_ui2d+0x6c>)
    b2fa:	051b      	lsls	r3, r3, #20
    b2fc:	4022      	ands	r2, r4
    b2fe:	4313      	orrs	r3, r2
    b300:	005b      	lsls	r3, r3, #1
    b302:	0859      	lsrs	r1, r3, #1
    b304:	bd10      	pop	{r4, pc}
    b306:	0021      	movs	r1, r4
    b308:	4091      	lsls	r1, r2
    b30a:	000a      	movs	r2, r1
    b30c:	210b      	movs	r1, #11
    b30e:	1a08      	subs	r0, r1, r0
    b310:	40c4      	lsrs	r4, r0
    b312:	055b      	lsls	r3, r3, #21
    b314:	0324      	lsls	r4, r4, #12
    b316:	0b24      	lsrs	r4, r4, #12
    b318:	0d5b      	lsrs	r3, r3, #21
    b31a:	e7e6      	b.n	b2ea <__aeabi_ui2d+0x26>
    b31c:	2300      	movs	r3, #0
    b31e:	2400      	movs	r4, #0
    b320:	2200      	movs	r2, #0
    b322:	e7e2      	b.n	b2ea <__aeabi_ui2d+0x26>
    b324:	0000041e 	.word	0x0000041e
    b328:	00000433 	.word	0x00000433
    b32c:	00000413 	.word	0x00000413
    b330:	800fffff 	.word	0x800fffff

0000b334 <__aeabi_f2d>:
    b334:	0041      	lsls	r1, r0, #1
    b336:	0e09      	lsrs	r1, r1, #24
    b338:	1c4b      	adds	r3, r1, #1
    b33a:	b570      	push	{r4, r5, r6, lr}
    b33c:	b2db      	uxtb	r3, r3
    b33e:	0246      	lsls	r6, r0, #9
    b340:	0a75      	lsrs	r5, r6, #9
    b342:	0fc4      	lsrs	r4, r0, #31
    b344:	2b01      	cmp	r3, #1
    b346:	dd14      	ble.n	b372 <__aeabi_f2d+0x3e>
    b348:	23e0      	movs	r3, #224	; 0xe0
    b34a:	009b      	lsls	r3, r3, #2
    b34c:	076d      	lsls	r5, r5, #29
    b34e:	0b36      	lsrs	r6, r6, #12
    b350:	18cb      	adds	r3, r1, r3
    b352:	2100      	movs	r1, #0
    b354:	0d0a      	lsrs	r2, r1, #20
    b356:	0028      	movs	r0, r5
    b358:	0512      	lsls	r2, r2, #20
    b35a:	4d1c      	ldr	r5, [pc, #112]	; (b3cc <__aeabi_f2d+0x98>)
    b35c:	4332      	orrs	r2, r6
    b35e:	055b      	lsls	r3, r3, #21
    b360:	402a      	ands	r2, r5
    b362:	085b      	lsrs	r3, r3, #1
    b364:	4313      	orrs	r3, r2
    b366:	005b      	lsls	r3, r3, #1
    b368:	07e4      	lsls	r4, r4, #31
    b36a:	085b      	lsrs	r3, r3, #1
    b36c:	4323      	orrs	r3, r4
    b36e:	0019      	movs	r1, r3
    b370:	bd70      	pop	{r4, r5, r6, pc}
    b372:	2900      	cmp	r1, #0
    b374:	d114      	bne.n	b3a0 <__aeabi_f2d+0x6c>
    b376:	2d00      	cmp	r5, #0
    b378:	d01e      	beq.n	b3b8 <__aeabi_f2d+0x84>
    b37a:	0028      	movs	r0, r5
    b37c:	f000 f86a 	bl	b454 <__clzsi2>
    b380:	280a      	cmp	r0, #10
    b382:	dc1c      	bgt.n	b3be <__aeabi_f2d+0x8a>
    b384:	230b      	movs	r3, #11
    b386:	002a      	movs	r2, r5
    b388:	1a1b      	subs	r3, r3, r0
    b38a:	40da      	lsrs	r2, r3
    b38c:	0003      	movs	r3, r0
    b38e:	3315      	adds	r3, #21
    b390:	409d      	lsls	r5, r3
    b392:	4b0f      	ldr	r3, [pc, #60]	; (b3d0 <__aeabi_f2d+0x9c>)
    b394:	0312      	lsls	r2, r2, #12
    b396:	1a1b      	subs	r3, r3, r0
    b398:	055b      	lsls	r3, r3, #21
    b39a:	0b16      	lsrs	r6, r2, #12
    b39c:	0d5b      	lsrs	r3, r3, #21
    b39e:	e7d8      	b.n	b352 <__aeabi_f2d+0x1e>
    b3a0:	2d00      	cmp	r5, #0
    b3a2:	d006      	beq.n	b3b2 <__aeabi_f2d+0x7e>
    b3a4:	0b32      	lsrs	r2, r6, #12
    b3a6:	2680      	movs	r6, #128	; 0x80
    b3a8:	0336      	lsls	r6, r6, #12
    b3aa:	076d      	lsls	r5, r5, #29
    b3ac:	4316      	orrs	r6, r2
    b3ae:	4b09      	ldr	r3, [pc, #36]	; (b3d4 <__aeabi_f2d+0xa0>)
    b3b0:	e7cf      	b.n	b352 <__aeabi_f2d+0x1e>
    b3b2:	4b08      	ldr	r3, [pc, #32]	; (b3d4 <__aeabi_f2d+0xa0>)
    b3b4:	2600      	movs	r6, #0
    b3b6:	e7cc      	b.n	b352 <__aeabi_f2d+0x1e>
    b3b8:	2300      	movs	r3, #0
    b3ba:	2600      	movs	r6, #0
    b3bc:	e7c9      	b.n	b352 <__aeabi_f2d+0x1e>
    b3be:	0003      	movs	r3, r0
    b3c0:	002a      	movs	r2, r5
    b3c2:	3b0b      	subs	r3, #11
    b3c4:	409a      	lsls	r2, r3
    b3c6:	2500      	movs	r5, #0
    b3c8:	e7e3      	b.n	b392 <__aeabi_f2d+0x5e>
    b3ca:	46c0      	nop			; (mov r8, r8)
    b3cc:	800fffff 	.word	0x800fffff
    b3d0:	00000389 	.word	0x00000389
    b3d4:	000007ff 	.word	0x000007ff

0000b3d8 <__aeabi_cdrcmple>:
    b3d8:	4684      	mov	ip, r0
    b3da:	1c10      	adds	r0, r2, #0
    b3dc:	4662      	mov	r2, ip
    b3de:	468c      	mov	ip, r1
    b3e0:	1c19      	adds	r1, r3, #0
    b3e2:	4663      	mov	r3, ip
    b3e4:	e000      	b.n	b3e8 <__aeabi_cdcmpeq>
    b3e6:	46c0      	nop			; (mov r8, r8)

0000b3e8 <__aeabi_cdcmpeq>:
    b3e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    b3ea:	f000 f8fb 	bl	b5e4 <__ledf2>
    b3ee:	2800      	cmp	r0, #0
    b3f0:	d401      	bmi.n	b3f6 <__aeabi_cdcmpeq+0xe>
    b3f2:	2100      	movs	r1, #0
    b3f4:	42c8      	cmn	r0, r1
    b3f6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0000b3f8 <__aeabi_dcmpeq>:
    b3f8:	b510      	push	{r4, lr}
    b3fa:	f000 f855 	bl	b4a8 <__eqdf2>
    b3fe:	4240      	negs	r0, r0
    b400:	3001      	adds	r0, #1
    b402:	bd10      	pop	{r4, pc}

0000b404 <__aeabi_dcmplt>:
    b404:	b510      	push	{r4, lr}
    b406:	f000 f8ed 	bl	b5e4 <__ledf2>
    b40a:	2800      	cmp	r0, #0
    b40c:	db01      	blt.n	b412 <__aeabi_dcmplt+0xe>
    b40e:	2000      	movs	r0, #0
    b410:	bd10      	pop	{r4, pc}
    b412:	2001      	movs	r0, #1
    b414:	bd10      	pop	{r4, pc}
    b416:	46c0      	nop			; (mov r8, r8)

0000b418 <__aeabi_dcmple>:
    b418:	b510      	push	{r4, lr}
    b41a:	f000 f8e3 	bl	b5e4 <__ledf2>
    b41e:	2800      	cmp	r0, #0
    b420:	dd01      	ble.n	b426 <__aeabi_dcmple+0xe>
    b422:	2000      	movs	r0, #0
    b424:	bd10      	pop	{r4, pc}
    b426:	2001      	movs	r0, #1
    b428:	bd10      	pop	{r4, pc}
    b42a:	46c0      	nop			; (mov r8, r8)

0000b42c <__aeabi_dcmpgt>:
    b42c:	b510      	push	{r4, lr}
    b42e:	f000 f875 	bl	b51c <__gedf2>
    b432:	2800      	cmp	r0, #0
    b434:	dc01      	bgt.n	b43a <__aeabi_dcmpgt+0xe>
    b436:	2000      	movs	r0, #0
    b438:	bd10      	pop	{r4, pc}
    b43a:	2001      	movs	r0, #1
    b43c:	bd10      	pop	{r4, pc}
    b43e:	46c0      	nop			; (mov r8, r8)

0000b440 <__aeabi_dcmpge>:
    b440:	b510      	push	{r4, lr}
    b442:	f000 f86b 	bl	b51c <__gedf2>
    b446:	2800      	cmp	r0, #0
    b448:	da01      	bge.n	b44e <__aeabi_dcmpge+0xe>
    b44a:	2000      	movs	r0, #0
    b44c:	bd10      	pop	{r4, pc}
    b44e:	2001      	movs	r0, #1
    b450:	bd10      	pop	{r4, pc}
    b452:	46c0      	nop			; (mov r8, r8)

0000b454 <__clzsi2>:
    b454:	211c      	movs	r1, #28
    b456:	2301      	movs	r3, #1
    b458:	041b      	lsls	r3, r3, #16
    b45a:	4298      	cmp	r0, r3
    b45c:	d301      	bcc.n	b462 <__clzsi2+0xe>
    b45e:	0c00      	lsrs	r0, r0, #16
    b460:	3910      	subs	r1, #16
    b462:	0a1b      	lsrs	r3, r3, #8
    b464:	4298      	cmp	r0, r3
    b466:	d301      	bcc.n	b46c <__clzsi2+0x18>
    b468:	0a00      	lsrs	r0, r0, #8
    b46a:	3908      	subs	r1, #8
    b46c:	091b      	lsrs	r3, r3, #4
    b46e:	4298      	cmp	r0, r3
    b470:	d301      	bcc.n	b476 <__clzsi2+0x22>
    b472:	0900      	lsrs	r0, r0, #4
    b474:	3904      	subs	r1, #4
    b476:	a202      	add	r2, pc, #8	; (adr r2, b480 <__clzsi2+0x2c>)
    b478:	5c10      	ldrb	r0, [r2, r0]
    b47a:	1840      	adds	r0, r0, r1
    b47c:	4770      	bx	lr
    b47e:	46c0      	nop			; (mov r8, r8)
    b480:	02020304 	.word	0x02020304
    b484:	01010101 	.word	0x01010101
	...

0000b490 <__clzdi2>:
    b490:	b510      	push	{r4, lr}
    b492:	2900      	cmp	r1, #0
    b494:	d103      	bne.n	b49e <__clzdi2+0xe>
    b496:	f7ff ffdd 	bl	b454 <__clzsi2>
    b49a:	3020      	adds	r0, #32
    b49c:	e002      	b.n	b4a4 <__clzdi2+0x14>
    b49e:	1c08      	adds	r0, r1, #0
    b4a0:	f7ff ffd8 	bl	b454 <__clzsi2>
    b4a4:	bd10      	pop	{r4, pc}
    b4a6:	46c0      	nop			; (mov r8, r8)

0000b4a8 <__eqdf2>:
    b4a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    b4aa:	464f      	mov	r7, r9
    b4ac:	4646      	mov	r6, r8
    b4ae:	46d6      	mov	lr, sl
    b4b0:	005c      	lsls	r4, r3, #1
    b4b2:	b5c0      	push	{r6, r7, lr}
    b4b4:	031f      	lsls	r7, r3, #12
    b4b6:	0fdb      	lsrs	r3, r3, #31
    b4b8:	469a      	mov	sl, r3
    b4ba:	4b17      	ldr	r3, [pc, #92]	; (b518 <__eqdf2+0x70>)
    b4bc:	030e      	lsls	r6, r1, #12
    b4be:	004d      	lsls	r5, r1, #1
    b4c0:	4684      	mov	ip, r0
    b4c2:	4680      	mov	r8, r0
    b4c4:	0b36      	lsrs	r6, r6, #12
    b4c6:	0d6d      	lsrs	r5, r5, #21
    b4c8:	0fc9      	lsrs	r1, r1, #31
    b4ca:	4691      	mov	r9, r2
    b4cc:	0b3f      	lsrs	r7, r7, #12
    b4ce:	0d64      	lsrs	r4, r4, #21
    b4d0:	2001      	movs	r0, #1
    b4d2:	429d      	cmp	r5, r3
    b4d4:	d008      	beq.n	b4e8 <__eqdf2+0x40>
    b4d6:	429c      	cmp	r4, r3
    b4d8:	d001      	beq.n	b4de <__eqdf2+0x36>
    b4da:	42a5      	cmp	r5, r4
    b4dc:	d00b      	beq.n	b4f6 <__eqdf2+0x4e>
    b4de:	bc1c      	pop	{r2, r3, r4}
    b4e0:	4690      	mov	r8, r2
    b4e2:	4699      	mov	r9, r3
    b4e4:	46a2      	mov	sl, r4
    b4e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b4e8:	4663      	mov	r3, ip
    b4ea:	4333      	orrs	r3, r6
    b4ec:	d1f7      	bne.n	b4de <__eqdf2+0x36>
    b4ee:	42ac      	cmp	r4, r5
    b4f0:	d1f5      	bne.n	b4de <__eqdf2+0x36>
    b4f2:	433a      	orrs	r2, r7
    b4f4:	d1f3      	bne.n	b4de <__eqdf2+0x36>
    b4f6:	2001      	movs	r0, #1
    b4f8:	42be      	cmp	r6, r7
    b4fa:	d1f0      	bne.n	b4de <__eqdf2+0x36>
    b4fc:	45c8      	cmp	r8, r9
    b4fe:	d1ee      	bne.n	b4de <__eqdf2+0x36>
    b500:	4551      	cmp	r1, sl
    b502:	d007      	beq.n	b514 <__eqdf2+0x6c>
    b504:	2d00      	cmp	r5, #0
    b506:	d1ea      	bne.n	b4de <__eqdf2+0x36>
    b508:	4663      	mov	r3, ip
    b50a:	431e      	orrs	r6, r3
    b50c:	0030      	movs	r0, r6
    b50e:	1e46      	subs	r6, r0, #1
    b510:	41b0      	sbcs	r0, r6
    b512:	e7e4      	b.n	b4de <__eqdf2+0x36>
    b514:	2000      	movs	r0, #0
    b516:	e7e2      	b.n	b4de <__eqdf2+0x36>
    b518:	000007ff 	.word	0x000007ff

0000b51c <__gedf2>:
    b51c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b51e:	4645      	mov	r5, r8
    b520:	46de      	mov	lr, fp
    b522:	4657      	mov	r7, sl
    b524:	464e      	mov	r6, r9
    b526:	b5e0      	push	{r5, r6, r7, lr}
    b528:	031f      	lsls	r7, r3, #12
    b52a:	0b3d      	lsrs	r5, r7, #12
    b52c:	4f2c      	ldr	r7, [pc, #176]	; (b5e0 <__gedf2+0xc4>)
    b52e:	030e      	lsls	r6, r1, #12
    b530:	004c      	lsls	r4, r1, #1
    b532:	46ab      	mov	fp, r5
    b534:	005d      	lsls	r5, r3, #1
    b536:	4684      	mov	ip, r0
    b538:	0b36      	lsrs	r6, r6, #12
    b53a:	0d64      	lsrs	r4, r4, #21
    b53c:	0fc9      	lsrs	r1, r1, #31
    b53e:	4690      	mov	r8, r2
    b540:	0d6d      	lsrs	r5, r5, #21
    b542:	0fdb      	lsrs	r3, r3, #31
    b544:	42bc      	cmp	r4, r7
    b546:	d02a      	beq.n	b59e <__gedf2+0x82>
    b548:	4f25      	ldr	r7, [pc, #148]	; (b5e0 <__gedf2+0xc4>)
    b54a:	42bd      	cmp	r5, r7
    b54c:	d02d      	beq.n	b5aa <__gedf2+0x8e>
    b54e:	2c00      	cmp	r4, #0
    b550:	d10f      	bne.n	b572 <__gedf2+0x56>
    b552:	4330      	orrs	r0, r6
    b554:	0007      	movs	r7, r0
    b556:	4681      	mov	r9, r0
    b558:	4278      	negs	r0, r7
    b55a:	4178      	adcs	r0, r7
    b55c:	b2c0      	uxtb	r0, r0
    b55e:	2d00      	cmp	r5, #0
    b560:	d117      	bne.n	b592 <__gedf2+0x76>
    b562:	465f      	mov	r7, fp
    b564:	433a      	orrs	r2, r7
    b566:	d114      	bne.n	b592 <__gedf2+0x76>
    b568:	464b      	mov	r3, r9
    b56a:	2000      	movs	r0, #0
    b56c:	2b00      	cmp	r3, #0
    b56e:	d00a      	beq.n	b586 <__gedf2+0x6a>
    b570:	e006      	b.n	b580 <__gedf2+0x64>
    b572:	2d00      	cmp	r5, #0
    b574:	d102      	bne.n	b57c <__gedf2+0x60>
    b576:	4658      	mov	r0, fp
    b578:	4302      	orrs	r2, r0
    b57a:	d001      	beq.n	b580 <__gedf2+0x64>
    b57c:	4299      	cmp	r1, r3
    b57e:	d018      	beq.n	b5b2 <__gedf2+0x96>
    b580:	4248      	negs	r0, r1
    b582:	2101      	movs	r1, #1
    b584:	4308      	orrs	r0, r1
    b586:	bc3c      	pop	{r2, r3, r4, r5}
    b588:	4690      	mov	r8, r2
    b58a:	4699      	mov	r9, r3
    b58c:	46a2      	mov	sl, r4
    b58e:	46ab      	mov	fp, r5
    b590:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b592:	2800      	cmp	r0, #0
    b594:	d0f2      	beq.n	b57c <__gedf2+0x60>
    b596:	2001      	movs	r0, #1
    b598:	3b01      	subs	r3, #1
    b59a:	4318      	orrs	r0, r3
    b59c:	e7f3      	b.n	b586 <__gedf2+0x6a>
    b59e:	0037      	movs	r7, r6
    b5a0:	4307      	orrs	r7, r0
    b5a2:	d0d1      	beq.n	b548 <__gedf2+0x2c>
    b5a4:	2002      	movs	r0, #2
    b5a6:	4240      	negs	r0, r0
    b5a8:	e7ed      	b.n	b586 <__gedf2+0x6a>
    b5aa:	465f      	mov	r7, fp
    b5ac:	4317      	orrs	r7, r2
    b5ae:	d0ce      	beq.n	b54e <__gedf2+0x32>
    b5b0:	e7f8      	b.n	b5a4 <__gedf2+0x88>
    b5b2:	42ac      	cmp	r4, r5
    b5b4:	dce4      	bgt.n	b580 <__gedf2+0x64>
    b5b6:	da03      	bge.n	b5c0 <__gedf2+0xa4>
    b5b8:	1e48      	subs	r0, r1, #1
    b5ba:	2101      	movs	r1, #1
    b5bc:	4308      	orrs	r0, r1
    b5be:	e7e2      	b.n	b586 <__gedf2+0x6a>
    b5c0:	455e      	cmp	r6, fp
    b5c2:	d8dd      	bhi.n	b580 <__gedf2+0x64>
    b5c4:	d006      	beq.n	b5d4 <__gedf2+0xb8>
    b5c6:	2000      	movs	r0, #0
    b5c8:	455e      	cmp	r6, fp
    b5ca:	d2dc      	bcs.n	b586 <__gedf2+0x6a>
    b5cc:	2301      	movs	r3, #1
    b5ce:	1e48      	subs	r0, r1, #1
    b5d0:	4318      	orrs	r0, r3
    b5d2:	e7d8      	b.n	b586 <__gedf2+0x6a>
    b5d4:	45c4      	cmp	ip, r8
    b5d6:	d8d3      	bhi.n	b580 <__gedf2+0x64>
    b5d8:	2000      	movs	r0, #0
    b5da:	45c4      	cmp	ip, r8
    b5dc:	d3f6      	bcc.n	b5cc <__gedf2+0xb0>
    b5de:	e7d2      	b.n	b586 <__gedf2+0x6a>
    b5e0:	000007ff 	.word	0x000007ff

0000b5e4 <__ledf2>:
    b5e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    b5e6:	464e      	mov	r6, r9
    b5e8:	4645      	mov	r5, r8
    b5ea:	46de      	mov	lr, fp
    b5ec:	4657      	mov	r7, sl
    b5ee:	005c      	lsls	r4, r3, #1
    b5f0:	b5e0      	push	{r5, r6, r7, lr}
    b5f2:	031f      	lsls	r7, r3, #12
    b5f4:	0fdb      	lsrs	r3, r3, #31
    b5f6:	4699      	mov	r9, r3
    b5f8:	4b2a      	ldr	r3, [pc, #168]	; (b6a4 <__ledf2+0xc0>)
    b5fa:	030e      	lsls	r6, r1, #12
    b5fc:	004d      	lsls	r5, r1, #1
    b5fe:	0fc9      	lsrs	r1, r1, #31
    b600:	4684      	mov	ip, r0
    b602:	0b36      	lsrs	r6, r6, #12
    b604:	0d6d      	lsrs	r5, r5, #21
    b606:	468b      	mov	fp, r1
    b608:	4690      	mov	r8, r2
    b60a:	0b3f      	lsrs	r7, r7, #12
    b60c:	0d64      	lsrs	r4, r4, #21
    b60e:	429d      	cmp	r5, r3
    b610:	d020      	beq.n	b654 <__ledf2+0x70>
    b612:	4b24      	ldr	r3, [pc, #144]	; (b6a4 <__ledf2+0xc0>)
    b614:	429c      	cmp	r4, r3
    b616:	d022      	beq.n	b65e <__ledf2+0x7a>
    b618:	2d00      	cmp	r5, #0
    b61a:	d112      	bne.n	b642 <__ledf2+0x5e>
    b61c:	4330      	orrs	r0, r6
    b61e:	4243      	negs	r3, r0
    b620:	4143      	adcs	r3, r0
    b622:	b2db      	uxtb	r3, r3
    b624:	2c00      	cmp	r4, #0
    b626:	d01f      	beq.n	b668 <__ledf2+0x84>
    b628:	2b00      	cmp	r3, #0
    b62a:	d00c      	beq.n	b646 <__ledf2+0x62>
    b62c:	464b      	mov	r3, r9
    b62e:	2001      	movs	r0, #1
    b630:	3b01      	subs	r3, #1
    b632:	4303      	orrs	r3, r0
    b634:	0018      	movs	r0, r3
    b636:	bc3c      	pop	{r2, r3, r4, r5}
    b638:	4690      	mov	r8, r2
    b63a:	4699      	mov	r9, r3
    b63c:	46a2      	mov	sl, r4
    b63e:	46ab      	mov	fp, r5
    b640:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b642:	2c00      	cmp	r4, #0
    b644:	d016      	beq.n	b674 <__ledf2+0x90>
    b646:	45cb      	cmp	fp, r9
    b648:	d017      	beq.n	b67a <__ledf2+0x96>
    b64a:	465b      	mov	r3, fp
    b64c:	4259      	negs	r1, r3
    b64e:	2301      	movs	r3, #1
    b650:	430b      	orrs	r3, r1
    b652:	e7ef      	b.n	b634 <__ledf2+0x50>
    b654:	0031      	movs	r1, r6
    b656:	2302      	movs	r3, #2
    b658:	4301      	orrs	r1, r0
    b65a:	d1eb      	bne.n	b634 <__ledf2+0x50>
    b65c:	e7d9      	b.n	b612 <__ledf2+0x2e>
    b65e:	0039      	movs	r1, r7
    b660:	2302      	movs	r3, #2
    b662:	4311      	orrs	r1, r2
    b664:	d1e6      	bne.n	b634 <__ledf2+0x50>
    b666:	e7d7      	b.n	b618 <__ledf2+0x34>
    b668:	433a      	orrs	r2, r7
    b66a:	d1dd      	bne.n	b628 <__ledf2+0x44>
    b66c:	2300      	movs	r3, #0
    b66e:	2800      	cmp	r0, #0
    b670:	d0e0      	beq.n	b634 <__ledf2+0x50>
    b672:	e7ea      	b.n	b64a <__ledf2+0x66>
    b674:	433a      	orrs	r2, r7
    b676:	d1e6      	bne.n	b646 <__ledf2+0x62>
    b678:	e7e7      	b.n	b64a <__ledf2+0x66>
    b67a:	42a5      	cmp	r5, r4
    b67c:	dce5      	bgt.n	b64a <__ledf2+0x66>
    b67e:	db05      	blt.n	b68c <__ledf2+0xa8>
    b680:	42be      	cmp	r6, r7
    b682:	d8e2      	bhi.n	b64a <__ledf2+0x66>
    b684:	d007      	beq.n	b696 <__ledf2+0xb2>
    b686:	2300      	movs	r3, #0
    b688:	42be      	cmp	r6, r7
    b68a:	d2d3      	bcs.n	b634 <__ledf2+0x50>
    b68c:	4659      	mov	r1, fp
    b68e:	2301      	movs	r3, #1
    b690:	3901      	subs	r1, #1
    b692:	430b      	orrs	r3, r1
    b694:	e7ce      	b.n	b634 <__ledf2+0x50>
    b696:	45c4      	cmp	ip, r8
    b698:	d8d7      	bhi.n	b64a <__ledf2+0x66>
    b69a:	2300      	movs	r3, #0
    b69c:	45c4      	cmp	ip, r8
    b69e:	d3f5      	bcc.n	b68c <__ledf2+0xa8>
    b6a0:	e7c8      	b.n	b634 <__ledf2+0x50>
    b6a2:	46c0      	nop			; (mov r8, r8)
    b6a4:	000007ff 	.word	0x000007ff

0000b6a8 <__cxa_atexit>:
    b6a8:	b510      	push	{r4, lr}
    b6aa:	0013      	movs	r3, r2
    b6ac:	000a      	movs	r2, r1
    b6ae:	0001      	movs	r1, r0
    b6b0:	2002      	movs	r0, #2
    b6b2:	f001 fde9 	bl	d288 <__register_exitproc>
    b6b6:	bd10      	pop	{r4, pc}

0000b6b8 <__libc_init_array>:
    b6b8:	b570      	push	{r4, r5, r6, lr}
    b6ba:	4e0d      	ldr	r6, [pc, #52]	; (b6f0 <__libc_init_array+0x38>)
    b6bc:	4d0d      	ldr	r5, [pc, #52]	; (b6f4 <__libc_init_array+0x3c>)
    b6be:	2400      	movs	r4, #0
    b6c0:	1bad      	subs	r5, r5, r6
    b6c2:	10ad      	asrs	r5, r5, #2
    b6c4:	d005      	beq.n	b6d2 <__libc_init_array+0x1a>
    b6c6:	00a3      	lsls	r3, r4, #2
    b6c8:	58f3      	ldr	r3, [r6, r3]
    b6ca:	3401      	adds	r4, #1
    b6cc:	4798      	blx	r3
    b6ce:	42a5      	cmp	r5, r4
    b6d0:	d1f9      	bne.n	b6c6 <__libc_init_array+0xe>
    b6d2:	f005 fe71 	bl	113b8 <_init>
    b6d6:	4e08      	ldr	r6, [pc, #32]	; (b6f8 <__libc_init_array+0x40>)
    b6d8:	4d08      	ldr	r5, [pc, #32]	; (b6fc <__libc_init_array+0x44>)
    b6da:	2400      	movs	r4, #0
    b6dc:	1bad      	subs	r5, r5, r6
    b6de:	10ad      	asrs	r5, r5, #2
    b6e0:	d005      	beq.n	b6ee <__libc_init_array+0x36>
    b6e2:	00a3      	lsls	r3, r4, #2
    b6e4:	58f3      	ldr	r3, [r6, r3]
    b6e6:	3401      	adds	r4, #1
    b6e8:	4798      	blx	r3
    b6ea:	42a5      	cmp	r5, r4
    b6ec:	d1f9      	bne.n	b6e2 <__libc_init_array+0x2a>
    b6ee:	bd70      	pop	{r4, r5, r6, pc}
    b6f0:	000113c4 	.word	0x000113c4
    b6f4:	000113c4 	.word	0x000113c4
    b6f8:	000113c4 	.word	0x000113c4
    b6fc:	000113d4 	.word	0x000113d4

0000b700 <memcpy>:
    b700:	b5f0      	push	{r4, r5, r6, r7, lr}
    b702:	0005      	movs	r5, r0
    b704:	2a0f      	cmp	r2, #15
    b706:	d92f      	bls.n	b768 <memcpy+0x68>
    b708:	000b      	movs	r3, r1
    b70a:	4303      	orrs	r3, r0
    b70c:	079b      	lsls	r3, r3, #30
    b70e:	d134      	bne.n	b77a <memcpy+0x7a>
    b710:	0016      	movs	r6, r2
    b712:	000c      	movs	r4, r1
    b714:	0003      	movs	r3, r0
    b716:	3e10      	subs	r6, #16
    b718:	0935      	lsrs	r5, r6, #4
    b71a:	3501      	adds	r5, #1
    b71c:	012d      	lsls	r5, r5, #4
    b71e:	1945      	adds	r5, r0, r5
    b720:	6827      	ldr	r7, [r4, #0]
    b722:	601f      	str	r7, [r3, #0]
    b724:	6867      	ldr	r7, [r4, #4]
    b726:	605f      	str	r7, [r3, #4]
    b728:	68a7      	ldr	r7, [r4, #8]
    b72a:	609f      	str	r7, [r3, #8]
    b72c:	68e7      	ldr	r7, [r4, #12]
    b72e:	3410      	adds	r4, #16
    b730:	60df      	str	r7, [r3, #12]
    b732:	3310      	adds	r3, #16
    b734:	429d      	cmp	r5, r3
    b736:	d1f3      	bne.n	b720 <memcpy+0x20>
    b738:	230f      	movs	r3, #15
    b73a:	439e      	bics	r6, r3
    b73c:	3610      	adds	r6, #16
    b73e:	1985      	adds	r5, r0, r6
    b740:	1989      	adds	r1, r1, r6
    b742:	4013      	ands	r3, r2
    b744:	2b03      	cmp	r3, #3
    b746:	d91a      	bls.n	b77e <memcpy+0x7e>
    b748:	1f1e      	subs	r6, r3, #4
    b74a:	2300      	movs	r3, #0
    b74c:	08b4      	lsrs	r4, r6, #2
    b74e:	3401      	adds	r4, #1
    b750:	00a4      	lsls	r4, r4, #2
    b752:	58cf      	ldr	r7, [r1, r3]
    b754:	50ef      	str	r7, [r5, r3]
    b756:	3304      	adds	r3, #4
    b758:	42a3      	cmp	r3, r4
    b75a:	d1fa      	bne.n	b752 <memcpy+0x52>
    b75c:	2403      	movs	r4, #3
    b75e:	43a6      	bics	r6, r4
    b760:	1d33      	adds	r3, r6, #4
    b762:	4022      	ands	r2, r4
    b764:	18c9      	adds	r1, r1, r3
    b766:	18ed      	adds	r5, r5, r3
    b768:	2a00      	cmp	r2, #0
    b76a:	d005      	beq.n	b778 <memcpy+0x78>
    b76c:	2300      	movs	r3, #0
    b76e:	5ccc      	ldrb	r4, [r1, r3]
    b770:	54ec      	strb	r4, [r5, r3]
    b772:	3301      	adds	r3, #1
    b774:	4293      	cmp	r3, r2
    b776:	d1fa      	bne.n	b76e <memcpy+0x6e>
    b778:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b77a:	0005      	movs	r5, r0
    b77c:	e7f6      	b.n	b76c <memcpy+0x6c>
    b77e:	001a      	movs	r2, r3
    b780:	e7f2      	b.n	b768 <memcpy+0x68>
    b782:	46c0      	nop			; (mov r8, r8)

0000b784 <memset>:
    b784:	b5f0      	push	{r4, r5, r6, r7, lr}
    b786:	0783      	lsls	r3, r0, #30
    b788:	d043      	beq.n	b812 <memset+0x8e>
    b78a:	1e54      	subs	r4, r2, #1
    b78c:	2a00      	cmp	r2, #0
    b78e:	d03f      	beq.n	b810 <memset+0x8c>
    b790:	b2ce      	uxtb	r6, r1
    b792:	0002      	movs	r2, r0
    b794:	2503      	movs	r5, #3
    b796:	e002      	b.n	b79e <memset+0x1a>
    b798:	001a      	movs	r2, r3
    b79a:	3c01      	subs	r4, #1
    b79c:	d338      	bcc.n	b810 <memset+0x8c>
    b79e:	1c53      	adds	r3, r2, #1
    b7a0:	7016      	strb	r6, [r2, #0]
    b7a2:	422b      	tst	r3, r5
    b7a4:	d1f8      	bne.n	b798 <memset+0x14>
    b7a6:	2c03      	cmp	r4, #3
    b7a8:	d92a      	bls.n	b800 <memset+0x7c>
    b7aa:	22ff      	movs	r2, #255	; 0xff
    b7ac:	400a      	ands	r2, r1
    b7ae:	0215      	lsls	r5, r2, #8
    b7b0:	4315      	orrs	r5, r2
    b7b2:	042a      	lsls	r2, r5, #16
    b7b4:	4315      	orrs	r5, r2
    b7b6:	2c0f      	cmp	r4, #15
    b7b8:	d914      	bls.n	b7e4 <memset+0x60>
    b7ba:	0027      	movs	r7, r4
    b7bc:	001a      	movs	r2, r3
    b7be:	3f10      	subs	r7, #16
    b7c0:	093e      	lsrs	r6, r7, #4
    b7c2:	3601      	adds	r6, #1
    b7c4:	0136      	lsls	r6, r6, #4
    b7c6:	199e      	adds	r6, r3, r6
    b7c8:	6015      	str	r5, [r2, #0]
    b7ca:	6055      	str	r5, [r2, #4]
    b7cc:	6095      	str	r5, [r2, #8]
    b7ce:	60d5      	str	r5, [r2, #12]
    b7d0:	3210      	adds	r2, #16
    b7d2:	4296      	cmp	r6, r2
    b7d4:	d1f8      	bne.n	b7c8 <memset+0x44>
    b7d6:	220f      	movs	r2, #15
    b7d8:	4397      	bics	r7, r2
    b7da:	3710      	adds	r7, #16
    b7dc:	19db      	adds	r3, r3, r7
    b7de:	4014      	ands	r4, r2
    b7e0:	2c03      	cmp	r4, #3
    b7e2:	d90d      	bls.n	b800 <memset+0x7c>
    b7e4:	001a      	movs	r2, r3
    b7e6:	1f27      	subs	r7, r4, #4
    b7e8:	08be      	lsrs	r6, r7, #2
    b7ea:	3601      	adds	r6, #1
    b7ec:	00b6      	lsls	r6, r6, #2
    b7ee:	199e      	adds	r6, r3, r6
    b7f0:	c220      	stmia	r2!, {r5}
    b7f2:	42b2      	cmp	r2, r6
    b7f4:	d1fc      	bne.n	b7f0 <memset+0x6c>
    b7f6:	2203      	movs	r2, #3
    b7f8:	4397      	bics	r7, r2
    b7fa:	3704      	adds	r7, #4
    b7fc:	19db      	adds	r3, r3, r7
    b7fe:	4014      	ands	r4, r2
    b800:	2c00      	cmp	r4, #0
    b802:	d005      	beq.n	b810 <memset+0x8c>
    b804:	b2c9      	uxtb	r1, r1
    b806:	191c      	adds	r4, r3, r4
    b808:	7019      	strb	r1, [r3, #0]
    b80a:	3301      	adds	r3, #1
    b80c:	429c      	cmp	r4, r3
    b80e:	d1fb      	bne.n	b808 <memset+0x84>
    b810:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b812:	0014      	movs	r4, r2
    b814:	0003      	movs	r3, r0
    b816:	e7c6      	b.n	b7a6 <memset+0x22>

0000b818 <printf>:
    b818:	b40f      	push	{r0, r1, r2, r3}
    b81a:	b500      	push	{lr}
    b81c:	4906      	ldr	r1, [pc, #24]	; (b838 <printf+0x20>)
    b81e:	b083      	sub	sp, #12
    b820:	ab04      	add	r3, sp, #16
    b822:	6808      	ldr	r0, [r1, #0]
    b824:	cb04      	ldmia	r3!, {r2}
    b826:	6881      	ldr	r1, [r0, #8]
    b828:	9301      	str	r3, [sp, #4]
    b82a:	f000 f913 	bl	ba54 <_vfprintf_r>
    b82e:	b003      	add	sp, #12
    b830:	bc08      	pop	{r3}
    b832:	b004      	add	sp, #16
    b834:	4718      	bx	r3
    b836:	46c0      	nop			; (mov r8, r8)
    b838:	20000080 	.word	0x20000080

0000b83c <setbuf>:
    b83c:	424a      	negs	r2, r1
    b83e:	414a      	adcs	r2, r1
    b840:	2380      	movs	r3, #128	; 0x80
    b842:	b510      	push	{r4, lr}
    b844:	0052      	lsls	r2, r2, #1
    b846:	00db      	lsls	r3, r3, #3
    b848:	f000 f802 	bl	b850 <setvbuf>
    b84c:	bd10      	pop	{r4, pc}
    b84e:	46c0      	nop			; (mov r8, r8)

0000b850 <setvbuf>:
    b850:	b5f0      	push	{r4, r5, r6, r7, lr}
    b852:	4647      	mov	r7, r8
    b854:	46ce      	mov	lr, r9
    b856:	b580      	push	{r7, lr}
    b858:	001f      	movs	r7, r3
    b85a:	4b63      	ldr	r3, [pc, #396]	; (b9e8 <setvbuf+0x198>)
    b85c:	b083      	sub	sp, #12
    b85e:	681d      	ldr	r5, [r3, #0]
    b860:	0004      	movs	r4, r0
    b862:	4688      	mov	r8, r1
    b864:	0016      	movs	r6, r2
    b866:	2d00      	cmp	r5, #0
    b868:	d002      	beq.n	b870 <setvbuf+0x20>
    b86a:	6bab      	ldr	r3, [r5, #56]	; 0x38
    b86c:	2b00      	cmp	r3, #0
    b86e:	d066      	beq.n	b93e <setvbuf+0xee>
    b870:	2e02      	cmp	r6, #2
    b872:	d005      	beq.n	b880 <setvbuf+0x30>
    b874:	2e01      	cmp	r6, #1
    b876:	d900      	bls.n	b87a <setvbuf+0x2a>
    b878:	e0a1      	b.n	b9be <setvbuf+0x16e>
    b87a:	2f00      	cmp	r7, #0
    b87c:	da00      	bge.n	b880 <setvbuf+0x30>
    b87e:	e09e      	b.n	b9be <setvbuf+0x16e>
    b880:	6e63      	ldr	r3, [r4, #100]	; 0x64
    b882:	07db      	lsls	r3, r3, #31
    b884:	d533      	bpl.n	b8ee <setvbuf+0x9e>
    b886:	0021      	movs	r1, r4
    b888:	0028      	movs	r0, r5
    b88a:	f002 fea1 	bl	e5d0 <_fflush_r>
    b88e:	6b21      	ldr	r1, [r4, #48]	; 0x30
    b890:	2900      	cmp	r1, #0
    b892:	d008      	beq.n	b8a6 <setvbuf+0x56>
    b894:	0023      	movs	r3, r4
    b896:	3340      	adds	r3, #64	; 0x40
    b898:	4299      	cmp	r1, r3
    b89a:	d002      	beq.n	b8a2 <setvbuf+0x52>
    b89c:	0028      	movs	r0, r5
    b89e:	f002 ff9b 	bl	e7d8 <_free_r>
    b8a2:	2300      	movs	r3, #0
    b8a4:	6323      	str	r3, [r4, #48]	; 0x30
    b8a6:	2300      	movs	r3, #0
    b8a8:	61a3      	str	r3, [r4, #24]
    b8aa:	6063      	str	r3, [r4, #4]
    b8ac:	220c      	movs	r2, #12
    b8ae:	5ea3      	ldrsh	r3, [r4, r2]
    b8b0:	061a      	lsls	r2, r3, #24
    b8b2:	d43d      	bmi.n	b930 <setvbuf+0xe0>
    b8b4:	4a4d      	ldr	r2, [pc, #308]	; (b9ec <setvbuf+0x19c>)
    b8b6:	4013      	ands	r3, r2
    b8b8:	81a3      	strh	r3, [r4, #12]
    b8ba:	2e02      	cmp	r6, #2
    b8bc:	d01e      	beq.n	b8fc <setvbuf+0xac>
    b8be:	ab01      	add	r3, sp, #4
    b8c0:	466a      	mov	r2, sp
    b8c2:	0021      	movs	r1, r4
    b8c4:	0028      	movs	r0, r5
    b8c6:	f003 fa23 	bl	ed10 <__swhatbuf_r>
    b8ca:	89a3      	ldrh	r3, [r4, #12]
    b8cc:	4318      	orrs	r0, r3
    b8ce:	81a0      	strh	r0, [r4, #12]
    b8d0:	2f00      	cmp	r7, #0
    b8d2:	d138      	bne.n	b946 <setvbuf+0xf6>
    b8d4:	9f00      	ldr	r7, [sp, #0]
    b8d6:	0038      	movs	r0, r7
    b8d8:	f003 fa92 	bl	ee00 <malloc>
    b8dc:	4680      	mov	r8, r0
    b8de:	2800      	cmp	r0, #0
    b8e0:	d100      	bne.n	b8e4 <setvbuf+0x94>
    b8e2:	e06f      	b.n	b9c4 <setvbuf+0x174>
    b8e4:	2280      	movs	r2, #128	; 0x80
    b8e6:	89a3      	ldrh	r3, [r4, #12]
    b8e8:	4313      	orrs	r3, r2
    b8ea:	81a3      	strh	r3, [r4, #12]
    b8ec:	e02e      	b.n	b94c <setvbuf+0xfc>
    b8ee:	89a3      	ldrh	r3, [r4, #12]
    b8f0:	059b      	lsls	r3, r3, #22
    b8f2:	d4c8      	bmi.n	b886 <setvbuf+0x36>
    b8f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    b8f6:	f003 fa07 	bl	ed08 <__retarget_lock_acquire_recursive>
    b8fa:	e7c4      	b.n	b886 <setvbuf+0x36>
    b8fc:	2500      	movs	r5, #0
    b8fe:	2202      	movs	r2, #2
    b900:	4313      	orrs	r3, r2
    b902:	2200      	movs	r2, #0
    b904:	60a2      	str	r2, [r4, #8]
    b906:	0022      	movs	r2, r4
    b908:	3243      	adds	r2, #67	; 0x43
    b90a:	6022      	str	r2, [r4, #0]
    b90c:	6122      	str	r2, [r4, #16]
    b90e:	2201      	movs	r2, #1
    b910:	6e61      	ldr	r1, [r4, #100]	; 0x64
    b912:	81a3      	strh	r3, [r4, #12]
    b914:	6162      	str	r2, [r4, #20]
    b916:	4211      	tst	r1, r2
    b918:	d104      	bne.n	b924 <setvbuf+0xd4>
    b91a:	059b      	lsls	r3, r3, #22
    b91c:	d402      	bmi.n	b924 <setvbuf+0xd4>
    b91e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    b920:	f003 f9f4 	bl	ed0c <__retarget_lock_release_recursive>
    b924:	0028      	movs	r0, r5
    b926:	b003      	add	sp, #12
    b928:	bc0c      	pop	{r2, r3}
    b92a:	4690      	mov	r8, r2
    b92c:	4699      	mov	r9, r3
    b92e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b930:	6921      	ldr	r1, [r4, #16]
    b932:	0028      	movs	r0, r5
    b934:	f002 ff50 	bl	e7d8 <_free_r>
    b938:	220c      	movs	r2, #12
    b93a:	5ea3      	ldrsh	r3, [r4, r2]
    b93c:	e7ba      	b.n	b8b4 <setvbuf+0x64>
    b93e:	0028      	movs	r0, r5
    b940:	f002 fea0 	bl	e684 <__sinit>
    b944:	e794      	b.n	b870 <setvbuf+0x20>
    b946:	4643      	mov	r3, r8
    b948:	2b00      	cmp	r3, #0
    b94a:	d0c4      	beq.n	b8d6 <setvbuf+0x86>
    b94c:	6bab      	ldr	r3, [r5, #56]	; 0x38
    b94e:	2b00      	cmp	r3, #0
    b950:	d027      	beq.n	b9a2 <setvbuf+0x152>
    b952:	9b00      	ldr	r3, [sp, #0]
    b954:	429f      	cmp	r7, r3
    b956:	d02a      	beq.n	b9ae <setvbuf+0x15e>
    b958:	2380      	movs	r3, #128	; 0x80
    b95a:	89a2      	ldrh	r2, [r4, #12]
    b95c:	011b      	lsls	r3, r3, #4
    b95e:	4313      	orrs	r3, r2
    b960:	b21b      	sxth	r3, r3
    b962:	81a3      	strh	r3, [r4, #12]
    b964:	2e01      	cmp	r6, #1
    b966:	d026      	beq.n	b9b6 <setvbuf+0x166>
    b968:	4642      	mov	r2, r8
    b96a:	6022      	str	r2, [r4, #0]
    b96c:	6122      	str	r2, [r4, #16]
    b96e:	2208      	movs	r2, #8
    b970:	b29b      	uxth	r3, r3
    b972:	6167      	str	r7, [r4, #20]
    b974:	401a      	ands	r2, r3
    b976:	d00b      	beq.n	b990 <setvbuf+0x140>
    b978:	07da      	lsls	r2, r3, #31
    b97a:	d510      	bpl.n	b99e <setvbuf+0x14e>
    b97c:	2200      	movs	r2, #0
    b97e:	2501      	movs	r5, #1
    b980:	60a2      	str	r2, [r4, #8]
    b982:	6e62      	ldr	r2, [r4, #100]	; 0x64
    b984:	427f      	negs	r7, r7
    b986:	61a7      	str	r7, [r4, #24]
    b988:	4015      	ands	r5, r2
    b98a:	d0c6      	beq.n	b91a <setvbuf+0xca>
    b98c:	2500      	movs	r5, #0
    b98e:	e7c9      	b.n	b924 <setvbuf+0xd4>
    b990:	60a2      	str	r2, [r4, #8]
    b992:	2501      	movs	r5, #1
    b994:	6e62      	ldr	r2, [r4, #100]	; 0x64
    b996:	4015      	ands	r5, r2
    b998:	d0bf      	beq.n	b91a <setvbuf+0xca>
    b99a:	2500      	movs	r5, #0
    b99c:	e7c2      	b.n	b924 <setvbuf+0xd4>
    b99e:	60a7      	str	r7, [r4, #8]
    b9a0:	e7f7      	b.n	b992 <setvbuf+0x142>
    b9a2:	0028      	movs	r0, r5
    b9a4:	f002 fe6e 	bl	e684 <__sinit>
    b9a8:	9b00      	ldr	r3, [sp, #0]
    b9aa:	429f      	cmp	r7, r3
    b9ac:	d1d4      	bne.n	b958 <setvbuf+0x108>
    b9ae:	220c      	movs	r2, #12
    b9b0:	5ea3      	ldrsh	r3, [r4, r2]
    b9b2:	2e01      	cmp	r6, #1
    b9b4:	d1d8      	bne.n	b968 <setvbuf+0x118>
    b9b6:	2201      	movs	r2, #1
    b9b8:	4313      	orrs	r3, r2
    b9ba:	81a3      	strh	r3, [r4, #12]
    b9bc:	e7d4      	b.n	b968 <setvbuf+0x118>
    b9be:	2501      	movs	r5, #1
    b9c0:	426d      	negs	r5, r5
    b9c2:	e7af      	b.n	b924 <setvbuf+0xd4>
    b9c4:	9b00      	ldr	r3, [sp, #0]
    b9c6:	4699      	mov	r9, r3
    b9c8:	42bb      	cmp	r3, r7
    b9ca:	d005      	beq.n	b9d8 <setvbuf+0x188>
    b9cc:	0018      	movs	r0, r3
    b9ce:	f003 fa17 	bl	ee00 <malloc>
    b9d2:	4680      	mov	r8, r0
    b9d4:	2800      	cmp	r0, #0
    b9d6:	d104      	bne.n	b9e2 <setvbuf+0x192>
    b9d8:	2501      	movs	r5, #1
    b9da:	220c      	movs	r2, #12
    b9dc:	5ea3      	ldrsh	r3, [r4, r2]
    b9de:	426d      	negs	r5, r5
    b9e0:	e78d      	b.n	b8fe <setvbuf+0xae>
    b9e2:	464f      	mov	r7, r9
    b9e4:	e77e      	b.n	b8e4 <setvbuf+0x94>
    b9e6:	46c0      	nop			; (mov r8, r8)
    b9e8:	20000080 	.word	0x20000080
    b9ec:	fffff35c 	.word	0xfffff35c

0000b9f0 <strlen>:
    b9f0:	b510      	push	{r4, lr}
    b9f2:	0783      	lsls	r3, r0, #30
    b9f4:	d025      	beq.n	ba42 <strlen+0x52>
    b9f6:	7803      	ldrb	r3, [r0, #0]
    b9f8:	2b00      	cmp	r3, #0
    b9fa:	d024      	beq.n	ba46 <strlen+0x56>
    b9fc:	0003      	movs	r3, r0
    b9fe:	2103      	movs	r1, #3
    ba00:	e002      	b.n	ba08 <strlen+0x18>
    ba02:	781a      	ldrb	r2, [r3, #0]
    ba04:	2a00      	cmp	r2, #0
    ba06:	d01a      	beq.n	ba3e <strlen+0x4e>
    ba08:	3301      	adds	r3, #1
    ba0a:	420b      	tst	r3, r1
    ba0c:	d1f9      	bne.n	ba02 <strlen+0x12>
    ba0e:	6819      	ldr	r1, [r3, #0]
    ba10:	4a0e      	ldr	r2, [pc, #56]	; (ba4c <strlen+0x5c>)
    ba12:	4c0f      	ldr	r4, [pc, #60]	; (ba50 <strlen+0x60>)
    ba14:	188a      	adds	r2, r1, r2
    ba16:	438a      	bics	r2, r1
    ba18:	4222      	tst	r2, r4
    ba1a:	d106      	bne.n	ba2a <strlen+0x3a>
    ba1c:	3304      	adds	r3, #4
    ba1e:	6819      	ldr	r1, [r3, #0]
    ba20:	4a0a      	ldr	r2, [pc, #40]	; (ba4c <strlen+0x5c>)
    ba22:	188a      	adds	r2, r1, r2
    ba24:	438a      	bics	r2, r1
    ba26:	4222      	tst	r2, r4
    ba28:	d0f8      	beq.n	ba1c <strlen+0x2c>
    ba2a:	001a      	movs	r2, r3
    ba2c:	781b      	ldrb	r3, [r3, #0]
    ba2e:	2b00      	cmp	r3, #0
    ba30:	d003      	beq.n	ba3a <strlen+0x4a>
    ba32:	3201      	adds	r2, #1
    ba34:	7811      	ldrb	r1, [r2, #0]
    ba36:	2900      	cmp	r1, #0
    ba38:	d1fb      	bne.n	ba32 <strlen+0x42>
    ba3a:	1a10      	subs	r0, r2, r0
    ba3c:	bd10      	pop	{r4, pc}
    ba3e:	1a18      	subs	r0, r3, r0
    ba40:	e7fc      	b.n	ba3c <strlen+0x4c>
    ba42:	0003      	movs	r3, r0
    ba44:	e7e3      	b.n	ba0e <strlen+0x1e>
    ba46:	2000      	movs	r0, #0
    ba48:	e7f8      	b.n	ba3c <strlen+0x4c>
    ba4a:	46c0      	nop			; (mov r8, r8)
    ba4c:	fefefeff 	.word	0xfefefeff
    ba50:	80808080 	.word	0x80808080

0000ba54 <_vfprintf_r>:
    ba54:	b5f0      	push	{r4, r5, r6, r7, lr}
    ba56:	46de      	mov	lr, fp
    ba58:	464e      	mov	r6, r9
    ba5a:	4645      	mov	r5, r8
    ba5c:	4657      	mov	r7, sl
    ba5e:	b5e0      	push	{r5, r6, r7, lr}
    ba60:	b0c3      	sub	sp, #268	; 0x10c
    ba62:	4689      	mov	r9, r1
    ba64:	0014      	movs	r4, r2
    ba66:	001d      	movs	r5, r3
    ba68:	930f      	str	r3, [sp, #60]	; 0x3c
    ba6a:	0006      	movs	r6, r0
    ba6c:	9006      	str	r0, [sp, #24]
    ba6e:	f003 f939 	bl	ece4 <_localeconv_r>
    ba72:	6803      	ldr	r3, [r0, #0]
    ba74:	0018      	movs	r0, r3
    ba76:	9318      	str	r3, [sp, #96]	; 0x60
    ba78:	f7ff ffba 	bl	b9f0 <strlen>
    ba7c:	9017      	str	r0, [sp, #92]	; 0x5c
    ba7e:	2e00      	cmp	r6, #0
    ba80:	d004      	beq.n	ba8c <_vfprintf_r+0x38>
    ba82:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    ba84:	9307      	str	r3, [sp, #28]
    ba86:	2b00      	cmp	r3, #0
    ba88:	d100      	bne.n	ba8c <_vfprintf_r+0x38>
    ba8a:	e0a7      	b.n	bbdc <_vfprintf_r+0x188>
    ba8c:	464b      	mov	r3, r9
    ba8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    ba90:	07db      	lsls	r3, r3, #31
    ba92:	d478      	bmi.n	bb86 <_vfprintf_r+0x132>
    ba94:	464b      	mov	r3, r9
    ba96:	210c      	movs	r1, #12
    ba98:	5e59      	ldrsh	r1, [r3, r1]
    ba9a:	b28b      	uxth	r3, r1
    ba9c:	059a      	lsls	r2, r3, #22
    ba9e:	d56e      	bpl.n	bb7e <_vfprintf_r+0x12a>
    baa0:	2280      	movs	r2, #128	; 0x80
    baa2:	0192      	lsls	r2, r2, #6
    baa4:	4213      	tst	r3, r2
    baa6:	d109      	bne.n	babc <_vfprintf_r+0x68>
    baa8:	430a      	orrs	r2, r1
    baaa:	464b      	mov	r3, r9
    baac:	4649      	mov	r1, r9
    baae:	819a      	strh	r2, [r3, #12]
    bab0:	6e49      	ldr	r1, [r1, #100]	; 0x64
    bab2:	4bcc      	ldr	r3, [pc, #816]	; (bde4 <_vfprintf_r+0x390>)
    bab4:	400b      	ands	r3, r1
    bab6:	4649      	mov	r1, r9
    bab8:	664b      	str	r3, [r1, #100]	; 0x64
    baba:	b293      	uxth	r3, r2
    babc:	071a      	lsls	r2, r3, #28
    babe:	d567      	bpl.n	bb90 <_vfprintf_r+0x13c>
    bac0:	464a      	mov	r2, r9
    bac2:	6912      	ldr	r2, [r2, #16]
    bac4:	2a00      	cmp	r2, #0
    bac6:	d063      	beq.n	bb90 <_vfprintf_r+0x13c>
    bac8:	221a      	movs	r2, #26
    baca:	401a      	ands	r2, r3
    bacc:	2a0a      	cmp	r2, #10
    bace:	d100      	bne.n	bad2 <_vfprintf_r+0x7e>
    bad0:	e088      	b.n	bbe4 <_vfprintf_r+0x190>
    bad2:	ab32      	add	r3, sp, #200	; 0xc8
    bad4:	9325      	str	r3, [sp, #148]	; 0x94
    bad6:	2300      	movs	r3, #0
    bad8:	46cb      	mov	fp, r9
    bada:	af25      	add	r7, sp, #148	; 0x94
    badc:	60bb      	str	r3, [r7, #8]
    bade:	607b      	str	r3, [r7, #4]
    bae0:	9407      	str	r4, [sp, #28]
    bae2:	9314      	str	r3, [sp, #80]	; 0x50
    bae4:	9316      	str	r3, [sp, #88]	; 0x58
    bae6:	9315      	str	r3, [sp, #84]	; 0x54
    bae8:	ae32      	add	r6, sp, #200	; 0xc8
    baea:	9319      	str	r3, [sp, #100]	; 0x64
    baec:	931a      	str	r3, [sp, #104]	; 0x68
    baee:	930a      	str	r3, [sp, #40]	; 0x28
    baf0:	9c07      	ldr	r4, [sp, #28]
    baf2:	7823      	ldrb	r3, [r4, #0]
    baf4:	2b00      	cmp	r3, #0
    baf6:	d101      	bne.n	bafc <_vfprintf_r+0xa8>
    baf8:	f000 fd9e 	bl	c638 <_vfprintf_r+0xbe4>
    bafc:	2b25      	cmp	r3, #37	; 0x25
    bafe:	d103      	bne.n	bb08 <_vfprintf_r+0xb4>
    bb00:	f000 fd9a 	bl	c638 <_vfprintf_r+0xbe4>
    bb04:	2b25      	cmp	r3, #37	; 0x25
    bb06:	d003      	beq.n	bb10 <_vfprintf_r+0xbc>
    bb08:	3401      	adds	r4, #1
    bb0a:	7823      	ldrb	r3, [r4, #0]
    bb0c:	2b00      	cmp	r3, #0
    bb0e:	d1f9      	bne.n	bb04 <_vfprintf_r+0xb0>
    bb10:	9b07      	ldr	r3, [sp, #28]
    bb12:	1ae5      	subs	r5, r4, r3
    bb14:	d010      	beq.n	bb38 <_vfprintf_r+0xe4>
    bb16:	9b07      	ldr	r3, [sp, #28]
    bb18:	6075      	str	r5, [r6, #4]
    bb1a:	6033      	str	r3, [r6, #0]
    bb1c:	68bb      	ldr	r3, [r7, #8]
    bb1e:	195b      	adds	r3, r3, r5
    bb20:	60bb      	str	r3, [r7, #8]
    bb22:	687b      	ldr	r3, [r7, #4]
    bb24:	3301      	adds	r3, #1
    bb26:	607b      	str	r3, [r7, #4]
    bb28:	2b07      	cmp	r3, #7
    bb2a:	dc4c      	bgt.n	bbc6 <_vfprintf_r+0x172>
    bb2c:	3608      	adds	r6, #8
    bb2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bb30:	469c      	mov	ip, r3
    bb32:	44ac      	add	ip, r5
    bb34:	4663      	mov	r3, ip
    bb36:	930a      	str	r3, [sp, #40]	; 0x28
    bb38:	7823      	ldrb	r3, [r4, #0]
    bb3a:	2b00      	cmp	r3, #0
    bb3c:	d101      	bne.n	bb42 <_vfprintf_r+0xee>
    bb3e:	f000 fc99 	bl	c474 <_vfprintf_r+0xa20>
    bb42:	1c63      	adds	r3, r4, #1
    bb44:	9307      	str	r3, [sp, #28]
    bb46:	2300      	movs	r3, #0
    bb48:	aa16      	add	r2, sp, #88	; 0x58
    bb4a:	77d3      	strb	r3, [r2, #31]
    bb4c:	2201      	movs	r2, #1
    bb4e:	4252      	negs	r2, r2
    bb50:	4692      	mov	sl, r2
    bb52:	2200      	movs	r2, #0
    bb54:	920b      	str	r2, [sp, #44]	; 0x2c
    bb56:	3220      	adds	r2, #32
    bb58:	4691      	mov	r9, r2
    bb5a:	3220      	adds	r2, #32
    bb5c:	7863      	ldrb	r3, [r4, #1]
    bb5e:	2100      	movs	r1, #0
    bb60:	2000      	movs	r0, #0
    bb62:	2400      	movs	r4, #0
    bb64:	4694      	mov	ip, r2
    bb66:	9a07      	ldr	r2, [sp, #28]
    bb68:	3201      	adds	r2, #1
    bb6a:	9207      	str	r2, [sp, #28]
    bb6c:	001a      	movs	r2, r3
    bb6e:	3a20      	subs	r2, #32
    bb70:	2a58      	cmp	r2, #88	; 0x58
    bb72:	d900      	bls.n	bb76 <_vfprintf_r+0x122>
    bb74:	e2e7      	b.n	c146 <_vfprintf_r+0x6f2>
    bb76:	4d9c      	ldr	r5, [pc, #624]	; (bde8 <_vfprintf_r+0x394>)
    bb78:	0092      	lsls	r2, r2, #2
    bb7a:	58aa      	ldr	r2, [r5, r2]
    bb7c:	4697      	mov	pc, r2
    bb7e:	464b      	mov	r3, r9
    bb80:	6d98      	ldr	r0, [r3, #88]	; 0x58
    bb82:	f003 f8c1 	bl	ed08 <__retarget_lock_acquire_recursive>
    bb86:	464b      	mov	r3, r9
    bb88:	210c      	movs	r1, #12
    bb8a:	5e59      	ldrsh	r1, [r3, r1]
    bb8c:	b28b      	uxth	r3, r1
    bb8e:	e787      	b.n	baa0 <_vfprintf_r+0x4c>
    bb90:	4649      	mov	r1, r9
    bb92:	9806      	ldr	r0, [sp, #24]
    bb94:	f001 fb0e 	bl	d1b4 <__swsetup_r>
    bb98:	464b      	mov	r3, r9
    bb9a:	2800      	cmp	r0, #0
    bb9c:	d03a      	beq.n	bc14 <_vfprintf_r+0x1c0>
    bb9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    bba0:	07db      	lsls	r3, r3, #31
    bba2:	d405      	bmi.n	bbb0 <_vfprintf_r+0x15c>
    bba4:	464b      	mov	r3, r9
    bba6:	899b      	ldrh	r3, [r3, #12]
    bba8:	059b      	lsls	r3, r3, #22
    bbaa:	d401      	bmi.n	bbb0 <_vfprintf_r+0x15c>
    bbac:	f000 ffcf 	bl	cb4e <_vfprintf_r+0x10fa>
    bbb0:	2301      	movs	r3, #1
    bbb2:	425b      	negs	r3, r3
    bbb4:	930a      	str	r3, [sp, #40]	; 0x28
    bbb6:	980a      	ldr	r0, [sp, #40]	; 0x28
    bbb8:	b043      	add	sp, #268	; 0x10c
    bbba:	bc3c      	pop	{r2, r3, r4, r5}
    bbbc:	4690      	mov	r8, r2
    bbbe:	4699      	mov	r9, r3
    bbc0:	46a2      	mov	sl, r4
    bbc2:	46ab      	mov	fp, r5
    bbc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bbc6:	003a      	movs	r2, r7
    bbc8:	4659      	mov	r1, fp
    bbca:	9806      	ldr	r0, [sp, #24]
    bbcc:	f004 fa1e 	bl	1000c <__sprint_r>
    bbd0:	2800      	cmp	r0, #0
    bbd2:	d001      	beq.n	bbd8 <_vfprintf_r+0x184>
    bbd4:	f000 fcce 	bl	c574 <_vfprintf_r+0xb20>
    bbd8:	ae32      	add	r6, sp, #200	; 0xc8
    bbda:	e7a8      	b.n	bb2e <_vfprintf_r+0xda>
    bbdc:	9806      	ldr	r0, [sp, #24]
    bbde:	f002 fd51 	bl	e684 <__sinit>
    bbe2:	e753      	b.n	ba8c <_vfprintf_r+0x38>
    bbe4:	464a      	mov	r2, r9
    bbe6:	210e      	movs	r1, #14
    bbe8:	5e52      	ldrsh	r2, [r2, r1]
    bbea:	2a00      	cmp	r2, #0
    bbec:	da00      	bge.n	bbf0 <_vfprintf_r+0x19c>
    bbee:	e770      	b.n	bad2 <_vfprintf_r+0x7e>
    bbf0:	464a      	mov	r2, r9
    bbf2:	6e52      	ldr	r2, [r2, #100]	; 0x64
    bbf4:	07d2      	lsls	r2, r2, #31
    bbf6:	d405      	bmi.n	bc04 <_vfprintf_r+0x1b0>
    bbf8:	059b      	lsls	r3, r3, #22
    bbfa:	d403      	bmi.n	bc04 <_vfprintf_r+0x1b0>
    bbfc:	464b      	mov	r3, r9
    bbfe:	6d98      	ldr	r0, [r3, #88]	; 0x58
    bc00:	f003 f884 	bl	ed0c <__retarget_lock_release_recursive>
    bc04:	002b      	movs	r3, r5
    bc06:	0022      	movs	r2, r4
    bc08:	4649      	mov	r1, r9
    bc0a:	9806      	ldr	r0, [sp, #24]
    bc0c:	f001 fa8e 	bl	d12c <__sbprintf>
    bc10:	900a      	str	r0, [sp, #40]	; 0x28
    bc12:	e7d0      	b.n	bbb6 <_vfprintf_r+0x162>
    bc14:	899b      	ldrh	r3, [r3, #12]
    bc16:	e757      	b.n	bac8 <_vfprintf_r+0x74>
    bc18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    bc1a:	920f      	str	r2, [sp, #60]	; 0x3c
    bc1c:	425b      	negs	r3, r3
    bc1e:	930b      	str	r3, [sp, #44]	; 0x2c
    bc20:	2304      	movs	r3, #4
    bc22:	431c      	orrs	r4, r3
    bc24:	9b07      	ldr	r3, [sp, #28]
    bc26:	781b      	ldrb	r3, [r3, #0]
    bc28:	e79d      	b.n	bb66 <_vfprintf_r+0x112>
    bc2a:	9b07      	ldr	r3, [sp, #28]
    bc2c:	2101      	movs	r1, #1
    bc2e:	781b      	ldrb	r3, [r3, #0]
    bc30:	202b      	movs	r0, #43	; 0x2b
    bc32:	e798      	b.n	bb66 <_vfprintf_r+0x112>
    bc34:	9b07      	ldr	r3, [sp, #28]
    bc36:	1c5a      	adds	r2, r3, #1
    bc38:	781b      	ldrb	r3, [r3, #0]
    bc3a:	4690      	mov	r8, r2
    bc3c:	2b2a      	cmp	r3, #42	; 0x2a
    bc3e:	d101      	bne.n	bc44 <_vfprintf_r+0x1f0>
    bc40:	f001 fa38 	bl	d0b4 <_vfprintf_r+0x1660>
    bc44:	001a      	movs	r2, r3
    bc46:	2500      	movs	r5, #0
    bc48:	3a30      	subs	r2, #48	; 0x30
    bc4a:	46aa      	mov	sl, r5
    bc4c:	2a09      	cmp	r2, #9
    bc4e:	d901      	bls.n	bc54 <_vfprintf_r+0x200>
    bc50:	f001 f96d 	bl	cf2e <_vfprintf_r+0x14da>
    bc54:	0025      	movs	r5, r4
    bc56:	4643      	mov	r3, r8
    bc58:	4654      	mov	r4, sl
    bc5a:	4688      	mov	r8, r1
    bc5c:	4682      	mov	sl, r0
    bc5e:	00a1      	lsls	r1, r4, #2
    bc60:	190c      	adds	r4, r1, r4
    bc62:	7818      	ldrb	r0, [r3, #0]
    bc64:	0064      	lsls	r4, r4, #1
    bc66:	18a4      	adds	r4, r4, r2
    bc68:	0002      	movs	r2, r0
    bc6a:	1c59      	adds	r1, r3, #1
    bc6c:	3a30      	subs	r2, #48	; 0x30
    bc6e:	000b      	movs	r3, r1
    bc70:	2a09      	cmp	r2, #9
    bc72:	d9f4      	bls.n	bc5e <_vfprintf_r+0x20a>
    bc74:	9107      	str	r1, [sp, #28]
    bc76:	0003      	movs	r3, r0
    bc78:	4641      	mov	r1, r8
    bc7a:	4650      	mov	r0, sl
    bc7c:	46a2      	mov	sl, r4
    bc7e:	002c      	movs	r4, r5
    bc80:	e774      	b.n	bb6c <_vfprintf_r+0x118>
    bc82:	9312      	str	r3, [sp, #72]	; 0x48
    bc84:	2900      	cmp	r1, #0
    bc86:	d001      	beq.n	bc8c <_vfprintf_r+0x238>
    bc88:	f001 fa2e 	bl	d0e8 <_vfprintf_r+0x1694>
    bc8c:	4b57      	ldr	r3, [pc, #348]	; (bdec <_vfprintf_r+0x398>)
    bc8e:	9319      	str	r3, [sp, #100]	; 0x64
    bc90:	06a3      	lsls	r3, r4, #26
    bc92:	d501      	bpl.n	bc98 <_vfprintf_r+0x244>
    bc94:	f000 fe9a 	bl	c9cc <_vfprintf_r+0xf78>
    bc98:	06e3      	lsls	r3, r4, #27
    bc9a:	d501      	bpl.n	bca0 <_vfprintf_r+0x24c>
    bc9c:	f000 fd9a 	bl	c7d4 <_vfprintf_r+0xd80>
    bca0:	0663      	lsls	r3, r4, #25
    bca2:	d401      	bmi.n	bca8 <_vfprintf_r+0x254>
    bca4:	f000 fd96 	bl	c7d4 <_vfprintf_r+0xd80>
    bca8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    bcaa:	881a      	ldrh	r2, [r3, #0]
    bcac:	920c      	str	r2, [sp, #48]	; 0x30
    bcae:	2200      	movs	r2, #0
    bcb0:	3304      	adds	r3, #4
    bcb2:	920d      	str	r2, [sp, #52]	; 0x34
    bcb4:	930f      	str	r3, [sp, #60]	; 0x3c
    bcb6:	07e3      	lsls	r3, r4, #31
    bcb8:	d401      	bmi.n	bcbe <_vfprintf_r+0x26a>
    bcba:	f000 fd76 	bl	c7aa <_vfprintf_r+0xd56>
    bcbe:	990c      	ldr	r1, [sp, #48]	; 0x30
    bcc0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    bcc2:	000b      	movs	r3, r1
    bcc4:	4313      	orrs	r3, r2
    bcc6:	001a      	movs	r2, r3
    bcc8:	2302      	movs	r3, #2
    bcca:	2a00      	cmp	r2, #0
    bccc:	d008      	beq.n	bce0 <_vfprintf_r+0x28c>
    bcce:	2030      	movs	r0, #48	; 0x30
    bcd0:	a91e      	add	r1, sp, #120	; 0x78
    bcd2:	7008      	strb	r0, [r1, #0]
    bcd4:	2548      	movs	r5, #72	; 0x48
    bcd6:	4668      	mov	r0, sp
    bcd8:	1940      	adds	r0, r0, r5
    bcda:	7800      	ldrb	r0, [r0, #0]
    bcdc:	431c      	orrs	r4, r3
    bcde:	7048      	strb	r0, [r1, #1]
    bce0:	2100      	movs	r1, #0
    bce2:	4688      	mov	r8, r1
    bce4:	a816      	add	r0, sp, #88	; 0x58
    bce6:	77c1      	strb	r1, [r0, #31]
    bce8:	4651      	mov	r1, sl
    bcea:	3101      	adds	r1, #1
    bcec:	d100      	bne.n	bcf0 <_vfprintf_r+0x29c>
    bcee:	e0e6      	b.n	bebe <_vfprintf_r+0x46a>
    bcf0:	2180      	movs	r1, #128	; 0x80
    bcf2:	0020      	movs	r0, r4
    bcf4:	4388      	bics	r0, r1
    bcf6:	9009      	str	r0, [sp, #36]	; 0x24
    bcf8:	2a00      	cmp	r2, #0
    bcfa:	d000      	beq.n	bcfe <_vfprintf_r+0x2aa>
    bcfc:	e0e3      	b.n	bec6 <_vfprintf_r+0x472>
    bcfe:	4652      	mov	r2, sl
    bd00:	2a00      	cmp	r2, #0
    bd02:	d001      	beq.n	bd08 <_vfprintf_r+0x2b4>
    bd04:	f000 fc38 	bl	c578 <_vfprintf_r+0xb24>
    bd08:	2b00      	cmp	r3, #0
    bd0a:	d001      	beq.n	bd10 <_vfprintf_r+0x2bc>
    bd0c:	f000 fd0c 	bl	c728 <_vfprintf_r+0xcd4>
    bd10:	2001      	movs	r0, #1
    bd12:	ab32      	add	r3, sp, #200	; 0xc8
    bd14:	4020      	ands	r0, r4
    bd16:	900e      	str	r0, [sp, #56]	; 0x38
    bd18:	9311      	str	r3, [sp, #68]	; 0x44
    bd1a:	d008      	beq.n	bd2e <_vfprintf_r+0x2da>
    bd1c:	2327      	movs	r3, #39	; 0x27
    bd1e:	2130      	movs	r1, #48	; 0x30
    bd20:	aa28      	add	r2, sp, #160	; 0xa0
    bd22:	54d1      	strb	r1, [r2, r3]
    bd24:	aa16      	add	r2, sp, #88	; 0x58
    bd26:	4694      	mov	ip, r2
    bd28:	3348      	adds	r3, #72	; 0x48
    bd2a:	4463      	add	r3, ip
    bd2c:	9311      	str	r3, [sp, #68]	; 0x44
    bd2e:	4653      	mov	r3, sl
    bd30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    bd32:	9308      	str	r3, [sp, #32]
    bd34:	4592      	cmp	sl, r2
    bd36:	da00      	bge.n	bd3a <_vfprintf_r+0x2e6>
    bd38:	9208      	str	r2, [sp, #32]
    bd3a:	2300      	movs	r3, #0
    bd3c:	9313      	str	r3, [sp, #76]	; 0x4c
    bd3e:	4643      	mov	r3, r8
    bd40:	2b00      	cmp	r3, #0
    bd42:	d002      	beq.n	bd4a <_vfprintf_r+0x2f6>
    bd44:	9b08      	ldr	r3, [sp, #32]
    bd46:	3301      	adds	r3, #1
    bd48:	9308      	str	r3, [sp, #32]
    bd4a:	2302      	movs	r3, #2
    bd4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    bd4e:	401a      	ands	r2, r3
    bd50:	4691      	mov	r9, r2
    bd52:	d002      	beq.n	bd5a <_vfprintf_r+0x306>
    bd54:	9b08      	ldr	r3, [sp, #32]
    bd56:	3302      	adds	r3, #2
    bd58:	9308      	str	r3, [sp, #32]
    bd5a:	2384      	movs	r3, #132	; 0x84
    bd5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    bd5e:	401a      	ands	r2, r3
    bd60:	9210      	str	r2, [sp, #64]	; 0x40
    bd62:	d000      	beq.n	bd66 <_vfprintf_r+0x312>
    bd64:	e207      	b.n	c176 <_vfprintf_r+0x722>
    bd66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    bd68:	9a08      	ldr	r2, [sp, #32]
    bd6a:	1a9c      	subs	r4, r3, r2
    bd6c:	2c00      	cmp	r4, #0
    bd6e:	dc00      	bgt.n	bd72 <_vfprintf_r+0x31e>
    bd70:	e201      	b.n	c176 <_vfprintf_r+0x722>
    bd72:	491f      	ldr	r1, [pc, #124]	; (bdf0 <_vfprintf_r+0x39c>)
    bd74:	68ba      	ldr	r2, [r7, #8]
    bd76:	687b      	ldr	r3, [r7, #4]
    bd78:	4688      	mov	r8, r1
    bd7a:	2c10      	cmp	r4, #16
    bd7c:	dd21      	ble.n	bdc2 <_vfprintf_r+0x36e>
    bd7e:	0031      	movs	r1, r6
    bd80:	2510      	movs	r5, #16
    bd82:	465e      	mov	r6, fp
    bd84:	e003      	b.n	bd8e <_vfprintf_r+0x33a>
    bd86:	3c10      	subs	r4, #16
    bd88:	3108      	adds	r1, #8
    bd8a:	2c10      	cmp	r4, #16
    bd8c:	dd17      	ble.n	bdbe <_vfprintf_r+0x36a>
    bd8e:	4640      	mov	r0, r8
    bd90:	3210      	adds	r2, #16
    bd92:	3301      	adds	r3, #1
    bd94:	6008      	str	r0, [r1, #0]
    bd96:	604d      	str	r5, [r1, #4]
    bd98:	60ba      	str	r2, [r7, #8]
    bd9a:	607b      	str	r3, [r7, #4]
    bd9c:	2b07      	cmp	r3, #7
    bd9e:	ddf2      	ble.n	bd86 <_vfprintf_r+0x332>
    bda0:	003a      	movs	r2, r7
    bda2:	0031      	movs	r1, r6
    bda4:	9806      	ldr	r0, [sp, #24]
    bda6:	f004 f931 	bl	1000c <__sprint_r>
    bdaa:	2800      	cmp	r0, #0
    bdac:	d001      	beq.n	bdb2 <_vfprintf_r+0x35e>
    bdae:	f000 fccf 	bl	c750 <_vfprintf_r+0xcfc>
    bdb2:	3c10      	subs	r4, #16
    bdb4:	68ba      	ldr	r2, [r7, #8]
    bdb6:	687b      	ldr	r3, [r7, #4]
    bdb8:	a932      	add	r1, sp, #200	; 0xc8
    bdba:	2c10      	cmp	r4, #16
    bdbc:	dce7      	bgt.n	bd8e <_vfprintf_r+0x33a>
    bdbe:	46b3      	mov	fp, r6
    bdc0:	000e      	movs	r6, r1
    bdc2:	4641      	mov	r1, r8
    bdc4:	6074      	str	r4, [r6, #4]
    bdc6:	3301      	adds	r3, #1
    bdc8:	18a4      	adds	r4, r4, r2
    bdca:	6031      	str	r1, [r6, #0]
    bdcc:	60bc      	str	r4, [r7, #8]
    bdce:	607b      	str	r3, [r7, #4]
    bdd0:	2b07      	cmp	r3, #7
    bdd2:	dd01      	ble.n	bdd8 <_vfprintf_r+0x384>
    bdd4:	f000 fcae 	bl	c734 <_vfprintf_r+0xce0>
    bdd8:	ab16      	add	r3, sp, #88	; 0x58
    bdda:	7fdb      	ldrb	r3, [r3, #31]
    bddc:	3608      	adds	r6, #8
    bdde:	4698      	mov	r8, r3
    bde0:	e1ca      	b.n	c178 <_vfprintf_r+0x724>
    bde2:	46c0      	nop			; (mov r8, r8)
    bde4:	ffffdfff 	.word	0xffffdfff
    bde8:	00010fd0 	.word	0x00010fd0
    bdec:	00011158 	.word	0x00011158
    bdf0:	00011178 	.word	0x00011178
    bdf4:	2200      	movs	r2, #0
    bdf6:	9d07      	ldr	r5, [sp, #28]
    bdf8:	3b30      	subs	r3, #48	; 0x30
    bdfa:	46a8      	mov	r8, r5
    bdfc:	920b      	str	r2, [sp, #44]	; 0x2c
    bdfe:	001a      	movs	r2, r3
    be00:	9408      	str	r4, [sp, #32]
    be02:	002c      	movs	r4, r5
    be04:	4655      	mov	r5, sl
    be06:	4682      	mov	sl, r0
    be08:	4640      	mov	r0, r8
    be0a:	4688      	mov	r8, r1
    be0c:	0011      	movs	r1, r2
    be0e:	2200      	movs	r2, #0
    be10:	0093      	lsls	r3, r2, #2
    be12:	189a      	adds	r2, r3, r2
    be14:	7803      	ldrb	r3, [r0, #0]
    be16:	0052      	lsls	r2, r2, #1
    be18:	188a      	adds	r2, r1, r2
    be1a:	0019      	movs	r1, r3
    be1c:	3401      	adds	r4, #1
    be1e:	3930      	subs	r1, #48	; 0x30
    be20:	0020      	movs	r0, r4
    be22:	2909      	cmp	r1, #9
    be24:	d9f4      	bls.n	be10 <_vfprintf_r+0x3bc>
    be26:	9407      	str	r4, [sp, #28]
    be28:	4650      	mov	r0, sl
    be2a:	9c08      	ldr	r4, [sp, #32]
    be2c:	920b      	str	r2, [sp, #44]	; 0x2c
    be2e:	4641      	mov	r1, r8
    be30:	46aa      	mov	sl, r5
    be32:	e69b      	b.n	bb6c <_vfprintf_r+0x118>
    be34:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    be36:	9312      	str	r3, [sp, #72]	; 0x48
    be38:	6813      	ldr	r3, [r2, #0]
    be3a:	2120      	movs	r1, #32
    be3c:	9308      	str	r3, [sp, #32]
    be3e:	466b      	mov	r3, sp
    be40:	185b      	adds	r3, r3, r1
    be42:	781b      	ldrb	r3, [r3, #0]
    be44:	ad28      	add	r5, sp, #160	; 0xa0
    be46:	702b      	strb	r3, [r5, #0]
    be48:	2300      	movs	r3, #0
    be4a:	a916      	add	r1, sp, #88	; 0x58
    be4c:	77cb      	strb	r3, [r1, #31]
    be4e:	0013      	movs	r3, r2
    be50:	3304      	adds	r3, #4
    be52:	930f      	str	r3, [sp, #60]	; 0x3c
    be54:	2300      	movs	r3, #0
    be56:	9409      	str	r4, [sp, #36]	; 0x24
    be58:	4698      	mov	r8, r3
    be5a:	3301      	adds	r3, #1
    be5c:	9308      	str	r3, [sp, #32]
    be5e:	930e      	str	r3, [sp, #56]	; 0x38
    be60:	2300      	movs	r3, #0
    be62:	9511      	str	r5, [sp, #68]	; 0x44
    be64:	469a      	mov	sl, r3
    be66:	9313      	str	r3, [sp, #76]	; 0x4c
    be68:	e76f      	b.n	bd4a <_vfprintf_r+0x2f6>
    be6a:	9312      	str	r3, [sp, #72]	; 0x48
    be6c:	2900      	cmp	r1, #0
    be6e:	d001      	beq.n	be74 <_vfprintf_r+0x420>
    be70:	f001 f94d 	bl	d10e <_vfprintf_r+0x16ba>
    be74:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    be76:	06a3      	lsls	r3, r4, #26
    be78:	d501      	bpl.n	be7e <_vfprintf_r+0x42a>
    be7a:	f000 fd5a 	bl	c932 <_vfprintf_r+0xede>
    be7e:	06e3      	lsls	r3, r4, #27
    be80:	d501      	bpl.n	be86 <_vfprintf_r+0x432>
    be82:	f000 fcab 	bl	c7dc <_vfprintf_r+0xd88>
    be86:	0663      	lsls	r3, r4, #25
    be88:	d401      	bmi.n	be8e <_vfprintf_r+0x43a>
    be8a:	f000 fca7 	bl	c7dc <_vfprintf_r+0xd88>
    be8e:	2100      	movs	r1, #0
    be90:	5e53      	ldrsh	r3, [r2, r1]
    be92:	930c      	str	r3, [sp, #48]	; 0x30
    be94:	3204      	adds	r2, #4
    be96:	17db      	asrs	r3, r3, #31
    be98:	930d      	str	r3, [sp, #52]	; 0x34
    be9a:	920f      	str	r2, [sp, #60]	; 0x3c
    be9c:	2b00      	cmp	r3, #0
    be9e:	da01      	bge.n	bea4 <_vfprintf_r+0x450>
    bea0:	f000 fdb2 	bl	ca08 <_vfprintf_r+0xfb4>
    bea4:	990c      	ldr	r1, [sp, #48]	; 0x30
    bea6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    bea8:	0008      	movs	r0, r1
    beaa:	4651      	mov	r1, sl
    beac:	ab16      	add	r3, sp, #88	; 0x58
    beae:	7fdb      	ldrb	r3, [r3, #31]
    beb0:	4310      	orrs	r0, r2
    beb2:	4698      	mov	r8, r3
    beb4:	0002      	movs	r2, r0
    beb6:	2301      	movs	r3, #1
    beb8:	3101      	adds	r1, #1
    beba:	d000      	beq.n	bebe <_vfprintf_r+0x46a>
    bebc:	e718      	b.n	bcf0 <_vfprintf_r+0x29c>
    bebe:	2a00      	cmp	r2, #0
    bec0:	d100      	bne.n	bec4 <_vfprintf_r+0x470>
    bec2:	e35a      	b.n	c57a <_vfprintf_r+0xb26>
    bec4:	9409      	str	r4, [sp, #36]	; 0x24
    bec6:	2b01      	cmp	r3, #1
    bec8:	d101      	bne.n	bece <_vfprintf_r+0x47a>
    beca:	f000 fc06 	bl	c6da <_vfprintf_r+0xc86>
    bece:	2b02      	cmp	r3, #2
    bed0:	d000      	beq.n	bed4 <_vfprintf_r+0x480>
    bed2:	e380      	b.n	c5d6 <_vfprintf_r+0xb82>
    bed4:	9c19      	ldr	r4, [sp, #100]	; 0x64
    bed6:	200f      	movs	r0, #15
    bed8:	46a1      	mov	r9, r4
    beda:	46b4      	mov	ip, r6
    bedc:	ab32      	add	r3, sp, #200	; 0xc8
    bede:	0019      	movs	r1, r3
    bee0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    bee2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    bee4:	0004      	movs	r4, r0
    bee6:	464d      	mov	r5, r9
    bee8:	4014      	ands	r4, r2
    beea:	5d2c      	ldrb	r4, [r5, r4]
    beec:	071e      	lsls	r6, r3, #28
    beee:	0915      	lsrs	r5, r2, #4
    bef0:	3901      	subs	r1, #1
    bef2:	432e      	orrs	r6, r5
    bef4:	700c      	strb	r4, [r1, #0]
    bef6:	091c      	lsrs	r4, r3, #4
    bef8:	0023      	movs	r3, r4
    befa:	0034      	movs	r4, r6
    befc:	0032      	movs	r2, r6
    befe:	431c      	orrs	r4, r3
    bf00:	d1f0      	bne.n	bee4 <_vfprintf_r+0x490>
    bf02:	920c      	str	r2, [sp, #48]	; 0x30
    bf04:	930d      	str	r3, [sp, #52]	; 0x34
    bf06:	ab32      	add	r3, sp, #200	; 0xc8
    bf08:	1a5b      	subs	r3, r3, r1
    bf0a:	9111      	str	r1, [sp, #68]	; 0x44
    bf0c:	4666      	mov	r6, ip
    bf0e:	930e      	str	r3, [sp, #56]	; 0x38
    bf10:	e70d      	b.n	bd2e <_vfprintf_r+0x2da>
    bf12:	4663      	mov	r3, ip
    bf14:	431c      	orrs	r4, r3
    bf16:	9b07      	ldr	r3, [sp, #28]
    bf18:	781b      	ldrb	r3, [r3, #0]
    bf1a:	e624      	b.n	bb66 <_vfprintf_r+0x112>
    bf1c:	9b07      	ldr	r3, [sp, #28]
    bf1e:	781b      	ldrb	r3, [r3, #0]
    bf20:	2b6c      	cmp	r3, #108	; 0x6c
    bf22:	d101      	bne.n	bf28 <_vfprintf_r+0x4d4>
    bf24:	f000 fe8c 	bl	cc40 <_vfprintf_r+0x11ec>
    bf28:	2210      	movs	r2, #16
    bf2a:	4314      	orrs	r4, r2
    bf2c:	e61b      	b.n	bb66 <_vfprintf_r+0x112>
    bf2e:	2900      	cmp	r1, #0
    bf30:	d001      	beq.n	bf36 <_vfprintf_r+0x4e2>
    bf32:	f001 f8d5 	bl	d0e0 <_vfprintf_r+0x168c>
    bf36:	06a3      	lsls	r3, r4, #26
    bf38:	d501      	bpl.n	bf3e <_vfprintf_r+0x4ea>
    bf3a:	f000 fe76 	bl	cc2a <_vfprintf_r+0x11d6>
    bf3e:	06e3      	lsls	r3, r4, #27
    bf40:	d500      	bpl.n	bf44 <_vfprintf_r+0x4f0>
    bf42:	e110      	b.n	c166 <_vfprintf_r+0x712>
    bf44:	0663      	lsls	r3, r4, #25
    bf46:	d400      	bmi.n	bf4a <_vfprintf_r+0x4f6>
    bf48:	e10d      	b.n	c166 <_vfprintf_r+0x712>
    bf4a:	4669      	mov	r1, sp
    bf4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    bf4e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
    bf50:	681a      	ldr	r2, [r3, #0]
    bf52:	3304      	adds	r3, #4
    bf54:	9208      	str	r2, [sp, #32]
    bf56:	8011      	strh	r1, [r2, #0]
    bf58:	930f      	str	r3, [sp, #60]	; 0x3c
    bf5a:	e5c9      	b.n	baf0 <_vfprintf_r+0x9c>
    bf5c:	990f      	ldr	r1, [sp, #60]	; 0x3c
    bf5e:	2230      	movs	r2, #48	; 0x30
    bf60:	680b      	ldr	r3, [r1, #0]
    bf62:	930c      	str	r3, [sp, #48]	; 0x30
    bf64:	2300      	movs	r3, #0
    bf66:	930d      	str	r3, [sp, #52]	; 0x34
    bf68:	3302      	adds	r3, #2
    bf6a:	431c      	orrs	r4, r3
    bf6c:	ab1e      	add	r3, sp, #120	; 0x78
    bf6e:	701a      	strb	r2, [r3, #0]
    bf70:	3248      	adds	r2, #72	; 0x48
    bf72:	705a      	strb	r2, [r3, #1]
    bf74:	000b      	movs	r3, r1
    bf76:	3304      	adds	r3, #4
    bf78:	930f      	str	r3, [sp, #60]	; 0x3c
    bf7a:	4bc1      	ldr	r3, [pc, #772]	; (c280 <_vfprintf_r+0x82c>)
    bf7c:	9212      	str	r2, [sp, #72]	; 0x48
    bf7e:	9319      	str	r3, [sp, #100]	; 0x64
    bf80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    bf82:	2302      	movs	r3, #2
    bf84:	e6ac      	b.n	bce0 <_vfprintf_r+0x28c>
    bf86:	464b      	mov	r3, r9
    bf88:	431c      	orrs	r4, r3
    bf8a:	9b07      	ldr	r3, [sp, #28]
    bf8c:	781b      	ldrb	r3, [r3, #0]
    bf8e:	e5ea      	b.n	bb66 <_vfprintf_r+0x112>
    bf90:	9312      	str	r3, [sp, #72]	; 0x48
    bf92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    bf94:	a916      	add	r1, sp, #88	; 0x58
    bf96:	1d1d      	adds	r5, r3, #4
    bf98:	681b      	ldr	r3, [r3, #0]
    bf9a:	001a      	movs	r2, r3
    bf9c:	9311      	str	r3, [sp, #68]	; 0x44
    bf9e:	2300      	movs	r3, #0
    bfa0:	77cb      	strb	r3, [r1, #31]
    bfa2:	2a00      	cmp	r2, #0
    bfa4:	d101      	bne.n	bfaa <_vfprintf_r+0x556>
    bfa6:	f000 ff01 	bl	cdac <_vfprintf_r+0x1358>
    bfaa:	4653      	mov	r3, sl
    bfac:	3301      	adds	r3, #1
    bfae:	d101      	bne.n	bfb4 <_vfprintf_r+0x560>
    bfb0:	f000 fe64 	bl	cc7c <_vfprintf_r+0x1228>
    bfb4:	4652      	mov	r2, sl
    bfb6:	2100      	movs	r1, #0
    bfb8:	9811      	ldr	r0, [sp, #68]	; 0x44
    bfba:	f003 f9df 	bl	f37c <memchr>
    bfbe:	2800      	cmp	r0, #0
    bfc0:	d101      	bne.n	bfc6 <_vfprintf_r+0x572>
    bfc2:	f000 ff78 	bl	ceb6 <_vfprintf_r+0x1462>
    bfc6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    bfc8:	1ac3      	subs	r3, r0, r3
    bfca:	001a      	movs	r2, r3
    bfcc:	930e      	str	r3, [sp, #56]	; 0x38
    bfce:	43db      	mvns	r3, r3
    bfd0:	17db      	asrs	r3, r3, #31
    bfd2:	401a      	ands	r2, r3
    bfd4:	ab16      	add	r3, sp, #88	; 0x58
    bfd6:	7fdb      	ldrb	r3, [r3, #31]
    bfd8:	9208      	str	r2, [sp, #32]
    bfda:	4698      	mov	r8, r3
    bfdc:	2300      	movs	r3, #0
    bfde:	950f      	str	r5, [sp, #60]	; 0x3c
    bfe0:	9409      	str	r4, [sp, #36]	; 0x24
    bfe2:	469a      	mov	sl, r3
    bfe4:	9313      	str	r3, [sp, #76]	; 0x4c
    bfe6:	e6aa      	b.n	bd3e <_vfprintf_r+0x2ea>
    bfe8:	2308      	movs	r3, #8
    bfea:	431c      	orrs	r4, r3
    bfec:	9b07      	ldr	r3, [sp, #28]
    bfee:	781b      	ldrb	r3, [r3, #0]
    bff0:	e5b9      	b.n	bb66 <_vfprintf_r+0x112>
    bff2:	9312      	str	r3, [sp, #72]	; 0x48
    bff4:	2310      	movs	r3, #16
    bff6:	431c      	orrs	r4, r3
    bff8:	06a3      	lsls	r3, r4, #26
    bffa:	d501      	bpl.n	c000 <_vfprintf_r+0x5ac>
    bffc:	f000 fca7 	bl	c94e <_vfprintf_r+0xefa>
    c000:	06e3      	lsls	r3, r4, #27
    c002:	d500      	bpl.n	c006 <_vfprintf_r+0x5b2>
    c004:	e3ee      	b.n	c7e4 <_vfprintf_r+0xd90>
    c006:	0663      	lsls	r3, r4, #25
    c008:	d400      	bmi.n	c00c <_vfprintf_r+0x5b8>
    c00a:	e3eb      	b.n	c7e4 <_vfprintf_r+0xd90>
    c00c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c00e:	881a      	ldrh	r2, [r3, #0]
    c010:	920c      	str	r2, [sp, #48]	; 0x30
    c012:	2200      	movs	r2, #0
    c014:	3304      	adds	r3, #4
    c016:	920d      	str	r2, [sp, #52]	; 0x34
    c018:	930f      	str	r3, [sp, #60]	; 0x3c
    c01a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c01c:	2300      	movs	r3, #0
    c01e:	e65f      	b.n	bce0 <_vfprintf_r+0x28c>
    c020:	9312      	str	r3, [sp, #72]	; 0x48
    c022:	2310      	movs	r3, #16
    c024:	431c      	orrs	r4, r3
    c026:	06a3      	lsls	r3, r4, #26
    c028:	d501      	bpl.n	c02e <_vfprintf_r+0x5da>
    c02a:	f000 fcba 	bl	c9a2 <_vfprintf_r+0xf4e>
    c02e:	06e3      	lsls	r3, r4, #27
    c030:	d500      	bpl.n	c034 <_vfprintf_r+0x5e0>
    c032:	e3da      	b.n	c7ea <_vfprintf_r+0xd96>
    c034:	0663      	lsls	r3, r4, #25
    c036:	d400      	bmi.n	c03a <_vfprintf_r+0x5e6>
    c038:	e3d7      	b.n	c7ea <_vfprintf_r+0xd96>
    c03a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c03c:	881a      	ldrh	r2, [r3, #0]
    c03e:	920c      	str	r2, [sp, #48]	; 0x30
    c040:	2200      	movs	r2, #0
    c042:	3304      	adds	r3, #4
    c044:	920d      	str	r2, [sp, #52]	; 0x34
    c046:	930f      	str	r3, [sp, #60]	; 0x3c
    c048:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c04a:	2301      	movs	r3, #1
    c04c:	e648      	b.n	bce0 <_vfprintf_r+0x28c>
    c04e:	9312      	str	r3, [sp, #72]	; 0x48
    c050:	2900      	cmp	r1, #0
    c052:	d001      	beq.n	c058 <_vfprintf_r+0x604>
    c054:	f001 f857 	bl	d106 <_vfprintf_r+0x16b2>
    c058:	4b8a      	ldr	r3, [pc, #552]	; (c284 <_vfprintf_r+0x830>)
    c05a:	9319      	str	r3, [sp, #100]	; 0x64
    c05c:	e618      	b.n	bc90 <_vfprintf_r+0x23c>
    c05e:	2301      	movs	r3, #1
    c060:	431c      	orrs	r4, r3
    c062:	9b07      	ldr	r3, [sp, #28]
    c064:	781b      	ldrb	r3, [r3, #0]
    c066:	e57e      	b.n	bb66 <_vfprintf_r+0x112>
    c068:	2380      	movs	r3, #128	; 0x80
    c06a:	431c      	orrs	r4, r3
    c06c:	9b07      	ldr	r3, [sp, #28]
    c06e:	781b      	ldrb	r3, [r3, #0]
    c070:	e579      	b.n	bb66 <_vfprintf_r+0x112>
    c072:	9b07      	ldr	r3, [sp, #28]
    c074:	781b      	ldrb	r3, [r3, #0]
    c076:	2800      	cmp	r0, #0
    c078:	d000      	beq.n	c07c <_vfprintf_r+0x628>
    c07a:	e574      	b.n	bb66 <_vfprintf_r+0x112>
    c07c:	2101      	movs	r1, #1
    c07e:	3020      	adds	r0, #32
    c080:	e571      	b.n	bb66 <_vfprintf_r+0x112>
    c082:	9312      	str	r3, [sp, #72]	; 0x48
    c084:	2900      	cmp	r1, #0
    c086:	d001      	beq.n	c08c <_vfprintf_r+0x638>
    c088:	f001 f839 	bl	d0fe <_vfprintf_r+0x16aa>
    c08c:	2207      	movs	r2, #7
    c08e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c090:	3307      	adds	r3, #7
    c092:	4393      	bics	r3, r2
    c094:	3201      	adds	r2, #1
    c096:	4694      	mov	ip, r2
    c098:	449c      	add	ip, r3
    c09a:	4662      	mov	r2, ip
    c09c:	920f      	str	r2, [sp, #60]	; 0x3c
    c09e:	681a      	ldr	r2, [r3, #0]
    c0a0:	9216      	str	r2, [sp, #88]	; 0x58
    c0a2:	685b      	ldr	r3, [r3, #4]
    c0a4:	2201      	movs	r2, #1
    c0a6:	9315      	str	r3, [sp, #84]	; 0x54
    c0a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
    c0aa:	9d16      	ldr	r5, [sp, #88]	; 0x58
    c0ac:	005b      	lsls	r3, r3, #1
    c0ae:	085b      	lsrs	r3, r3, #1
    c0b0:	4698      	mov	r8, r3
    c0b2:	4252      	negs	r2, r2
    c0b4:	4b74      	ldr	r3, [pc, #464]	; (c288 <_vfprintf_r+0x834>)
    c0b6:	0028      	movs	r0, r5
    c0b8:	4641      	mov	r1, r8
    c0ba:	f004 fcfd 	bl	10ab8 <__aeabi_dcmpun>
    c0be:	2800      	cmp	r0, #0
    c0c0:	d001      	beq.n	c0c6 <_vfprintf_r+0x672>
    c0c2:	f000 fcb4 	bl	ca2e <_vfprintf_r+0xfda>
    c0c6:	2201      	movs	r2, #1
    c0c8:	4b6f      	ldr	r3, [pc, #444]	; (c288 <_vfprintf_r+0x834>)
    c0ca:	4252      	negs	r2, r2
    c0cc:	0028      	movs	r0, r5
    c0ce:	4641      	mov	r1, r8
    c0d0:	f7ff f9a2 	bl	b418 <__aeabi_dcmple>
    c0d4:	2800      	cmp	r0, #0
    c0d6:	d001      	beq.n	c0dc <_vfprintf_r+0x688>
    c0d8:	f000 fca9 	bl	ca2e <_vfprintf_r+0xfda>
    c0dc:	2200      	movs	r2, #0
    c0de:	2300      	movs	r3, #0
    c0e0:	9816      	ldr	r0, [sp, #88]	; 0x58
    c0e2:	9915      	ldr	r1, [sp, #84]	; 0x54
    c0e4:	f7ff f98e 	bl	b404 <__aeabi_dcmplt>
    c0e8:	2800      	cmp	r0, #0
    c0ea:	d001      	beq.n	c0f0 <_vfprintf_r+0x69c>
    c0ec:	f000 fd55 	bl	cb9a <_vfprintf_r+0x1146>
    c0f0:	ab16      	add	r3, sp, #88	; 0x58
    c0f2:	7fdb      	ldrb	r3, [r3, #31]
    c0f4:	4698      	mov	r8, r3
    c0f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c0f8:	2b47      	cmp	r3, #71	; 0x47
    c0fa:	dd01      	ble.n	c100 <_vfprintf_r+0x6ac>
    c0fc:	f000 fdb4 	bl	cc68 <_vfprintf_r+0x1214>
    c100:	4b62      	ldr	r3, [pc, #392]	; (c28c <_vfprintf_r+0x838>)
    c102:	9311      	str	r3, [sp, #68]	; 0x44
    c104:	2380      	movs	r3, #128	; 0x80
    c106:	439c      	bics	r4, r3
    c108:	3b7d      	subs	r3, #125	; 0x7d
    c10a:	9308      	str	r3, [sp, #32]
    c10c:	930e      	str	r3, [sp, #56]	; 0x38
    c10e:	2300      	movs	r3, #0
    c110:	9409      	str	r4, [sp, #36]	; 0x24
    c112:	469a      	mov	sl, r3
    c114:	9313      	str	r3, [sp, #76]	; 0x4c
    c116:	e612      	b.n	bd3e <_vfprintf_r+0x2ea>
    c118:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c11a:	1d1a      	adds	r2, r3, #4
    c11c:	681b      	ldr	r3, [r3, #0]
    c11e:	930b      	str	r3, [sp, #44]	; 0x2c
    c120:	2b00      	cmp	r3, #0
    c122:	da00      	bge.n	c126 <_vfprintf_r+0x6d2>
    c124:	e578      	b.n	bc18 <_vfprintf_r+0x1c4>
    c126:	9b07      	ldr	r3, [sp, #28]
    c128:	920f      	str	r2, [sp, #60]	; 0x3c
    c12a:	781b      	ldrb	r3, [r3, #0]
    c12c:	e51b      	b.n	bb66 <_vfprintf_r+0x112>
    c12e:	9312      	str	r3, [sp, #72]	; 0x48
    c130:	2900      	cmp	r1, #0
    c132:	d001      	beq.n	c138 <_vfprintf_r+0x6e4>
    c134:	f000 ffcc 	bl	d0d0 <_vfprintf_r+0x167c>
    c138:	2310      	movs	r3, #16
    c13a:	431c      	orrs	r4, r3
    c13c:	e69a      	b.n	be74 <_vfprintf_r+0x420>
    c13e:	9312      	str	r3, [sp, #72]	; 0x48
    c140:	e771      	b.n	c026 <_vfprintf_r+0x5d2>
    c142:	9312      	str	r3, [sp, #72]	; 0x48
    c144:	e758      	b.n	bff8 <_vfprintf_r+0x5a4>
    c146:	9312      	str	r3, [sp, #72]	; 0x48
    c148:	2900      	cmp	r1, #0
    c14a:	d001      	beq.n	c150 <_vfprintf_r+0x6fc>
    c14c:	f000 ffd3 	bl	d0f6 <_vfprintf_r+0x16a2>
    c150:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c152:	2b00      	cmp	r3, #0
    c154:	d100      	bne.n	c158 <_vfprintf_r+0x704>
    c156:	e18d      	b.n	c474 <_vfprintf_r+0xa20>
    c158:	ad28      	add	r5, sp, #160	; 0xa0
    c15a:	702b      	strb	r3, [r5, #0]
    c15c:	2300      	movs	r3, #0
    c15e:	aa16      	add	r2, sp, #88	; 0x58
    c160:	77d3      	strb	r3, [r2, #31]
    c162:	9409      	str	r4, [sp, #36]	; 0x24
    c164:	e678      	b.n	be58 <_vfprintf_r+0x404>
    c166:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    c168:	990a      	ldr	r1, [sp, #40]	; 0x28
    c16a:	6813      	ldr	r3, [r2, #0]
    c16c:	6019      	str	r1, [r3, #0]
    c16e:	0013      	movs	r3, r2
    c170:	3304      	adds	r3, #4
    c172:	930f      	str	r3, [sp, #60]	; 0x3c
    c174:	e4bc      	b.n	baf0 <_vfprintf_r+0x9c>
    c176:	68bc      	ldr	r4, [r7, #8]
    c178:	4643      	mov	r3, r8
    c17a:	2b00      	cmp	r3, #0
    c17c:	d00f      	beq.n	c19e <_vfprintf_r+0x74a>
    c17e:	aa16      	add	r2, sp, #88	; 0x58
    c180:	231f      	movs	r3, #31
    c182:	4694      	mov	ip, r2
    c184:	4463      	add	r3, ip
    c186:	6033      	str	r3, [r6, #0]
    c188:	2301      	movs	r3, #1
    c18a:	6073      	str	r3, [r6, #4]
    c18c:	687b      	ldr	r3, [r7, #4]
    c18e:	3401      	adds	r4, #1
    c190:	3301      	adds	r3, #1
    c192:	60bc      	str	r4, [r7, #8]
    c194:	607b      	str	r3, [r7, #4]
    c196:	2b07      	cmp	r3, #7
    c198:	dd00      	ble.n	c19c <_vfprintf_r+0x748>
    c19a:	e203      	b.n	c5a4 <_vfprintf_r+0xb50>
    c19c:	3608      	adds	r6, #8
    c19e:	464b      	mov	r3, r9
    c1a0:	2b00      	cmp	r3, #0
    c1a2:	d00c      	beq.n	c1be <_vfprintf_r+0x76a>
    c1a4:	ab1e      	add	r3, sp, #120	; 0x78
    c1a6:	6033      	str	r3, [r6, #0]
    c1a8:	2302      	movs	r3, #2
    c1aa:	6073      	str	r3, [r6, #4]
    c1ac:	687b      	ldr	r3, [r7, #4]
    c1ae:	3402      	adds	r4, #2
    c1b0:	3301      	adds	r3, #1
    c1b2:	60bc      	str	r4, [r7, #8]
    c1b4:	607b      	str	r3, [r7, #4]
    c1b6:	2b07      	cmp	r3, #7
    c1b8:	dd00      	ble.n	c1bc <_vfprintf_r+0x768>
    c1ba:	e1fd      	b.n	c5b8 <_vfprintf_r+0xb64>
    c1bc:	3608      	adds	r6, #8
    c1be:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c1c0:	2b80      	cmp	r3, #128	; 0x80
    c1c2:	d100      	bne.n	c1c6 <_vfprintf_r+0x772>
    c1c4:	e173      	b.n	c4ae <_vfprintf_r+0xa5a>
    c1c6:	4653      	mov	r3, sl
    c1c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    c1ca:	1a9d      	subs	r5, r3, r2
    c1cc:	2d00      	cmp	r5, #0
    c1ce:	dd32      	ble.n	c236 <_vfprintf_r+0x7e2>
    c1d0:	4a2f      	ldr	r2, [pc, #188]	; (c290 <_vfprintf_r+0x83c>)
    c1d2:	687b      	ldr	r3, [r7, #4]
    c1d4:	4691      	mov	r9, r2
    c1d6:	2d10      	cmp	r5, #16
    c1d8:	dd22      	ble.n	c220 <_vfprintf_r+0x7cc>
    c1da:	2210      	movs	r2, #16
    c1dc:	4692      	mov	sl, r2
    c1de:	0022      	movs	r2, r4
    c1e0:	465c      	mov	r4, fp
    c1e2:	e003      	b.n	c1ec <_vfprintf_r+0x798>
    c1e4:	3d10      	subs	r5, #16
    c1e6:	3608      	adds	r6, #8
    c1e8:	2d10      	cmp	r5, #16
    c1ea:	dd17      	ble.n	c21c <_vfprintf_r+0x7c8>
    c1ec:	4649      	mov	r1, r9
    c1ee:	6031      	str	r1, [r6, #0]
    c1f0:	4651      	mov	r1, sl
    c1f2:	3210      	adds	r2, #16
    c1f4:	3301      	adds	r3, #1
    c1f6:	6071      	str	r1, [r6, #4]
    c1f8:	60ba      	str	r2, [r7, #8]
    c1fa:	607b      	str	r3, [r7, #4]
    c1fc:	2b07      	cmp	r3, #7
    c1fe:	ddf1      	ble.n	c1e4 <_vfprintf_r+0x790>
    c200:	003a      	movs	r2, r7
    c202:	0021      	movs	r1, r4
    c204:	9806      	ldr	r0, [sp, #24]
    c206:	f003 ff01 	bl	1000c <__sprint_r>
    c20a:	2800      	cmp	r0, #0
    c20c:	d000      	beq.n	c210 <_vfprintf_r+0x7bc>
    c20e:	e18a      	b.n	c526 <_vfprintf_r+0xad2>
    c210:	3d10      	subs	r5, #16
    c212:	68ba      	ldr	r2, [r7, #8]
    c214:	687b      	ldr	r3, [r7, #4]
    c216:	ae32      	add	r6, sp, #200	; 0xc8
    c218:	2d10      	cmp	r5, #16
    c21a:	dce7      	bgt.n	c1ec <_vfprintf_r+0x798>
    c21c:	46a3      	mov	fp, r4
    c21e:	0014      	movs	r4, r2
    c220:	464a      	mov	r2, r9
    c222:	1964      	adds	r4, r4, r5
    c224:	3301      	adds	r3, #1
    c226:	6032      	str	r2, [r6, #0]
    c228:	6075      	str	r5, [r6, #4]
    c22a:	60bc      	str	r4, [r7, #8]
    c22c:	607b      	str	r3, [r7, #4]
    c22e:	2b07      	cmp	r3, #7
    c230:	dd00      	ble.n	c234 <_vfprintf_r+0x7e0>
    c232:	e1ad      	b.n	c590 <_vfprintf_r+0xb3c>
    c234:	3608      	adds	r6, #8
    c236:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c238:	05db      	lsls	r3, r3, #23
    c23a:	d500      	bpl.n	c23e <_vfprintf_r+0x7ea>
    c23c:	e0be      	b.n	c3bc <_vfprintf_r+0x968>
    c23e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c240:	6033      	str	r3, [r6, #0]
    c242:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c244:	469c      	mov	ip, r3
    c246:	6073      	str	r3, [r6, #4]
    c248:	687b      	ldr	r3, [r7, #4]
    c24a:	4464      	add	r4, ip
    c24c:	3301      	adds	r3, #1
    c24e:	60bc      	str	r4, [r7, #8]
    c250:	607b      	str	r3, [r7, #4]
    c252:	2b07      	cmp	r3, #7
    c254:	dd00      	ble.n	c258 <_vfprintf_r+0x804>
    c256:	e0a6      	b.n	c3a6 <_vfprintf_r+0x952>
    c258:	3608      	adds	r6, #8
    c25a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c25c:	075b      	lsls	r3, r3, #29
    c25e:	d54a      	bpl.n	c2f6 <_vfprintf_r+0x8a2>
    c260:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c262:	9a08      	ldr	r2, [sp, #32]
    c264:	1a9d      	subs	r5, r3, r2
    c266:	2d00      	cmp	r5, #0
    c268:	dd45      	ble.n	c2f6 <_vfprintf_r+0x8a2>
    c26a:	4a0a      	ldr	r2, [pc, #40]	; (c294 <_vfprintf_r+0x840>)
    c26c:	687b      	ldr	r3, [r7, #4]
    c26e:	4690      	mov	r8, r2
    c270:	2d10      	cmp	r5, #16
    c272:	dd2f      	ble.n	c2d4 <_vfprintf_r+0x880>
    c274:	2210      	movs	r2, #16
    c276:	4691      	mov	r9, r2
    c278:	0022      	movs	r2, r4
    c27a:	465c      	mov	r4, fp
    c27c:	e010      	b.n	c2a0 <_vfprintf_r+0x84c>
    c27e:	46c0      	nop			; (mov r8, r8)
    c280:	00011158 	.word	0x00011158
    c284:	00011144 	.word	0x00011144
    c288:	7fefffff 	.word	0x7fefffff
    c28c:	00011134 	.word	0x00011134
    c290:	00011188 	.word	0x00011188
    c294:	00011178 	.word	0x00011178
    c298:	3d10      	subs	r5, #16
    c29a:	3608      	adds	r6, #8
    c29c:	2d10      	cmp	r5, #16
    c29e:	dd17      	ble.n	c2d0 <_vfprintf_r+0x87c>
    c2a0:	49d1      	ldr	r1, [pc, #836]	; (c5e8 <_vfprintf_r+0xb94>)
    c2a2:	3210      	adds	r2, #16
    c2a4:	6031      	str	r1, [r6, #0]
    c2a6:	4649      	mov	r1, r9
    c2a8:	3301      	adds	r3, #1
    c2aa:	6071      	str	r1, [r6, #4]
    c2ac:	60ba      	str	r2, [r7, #8]
    c2ae:	607b      	str	r3, [r7, #4]
    c2b0:	2b07      	cmp	r3, #7
    c2b2:	ddf1      	ble.n	c298 <_vfprintf_r+0x844>
    c2b4:	003a      	movs	r2, r7
    c2b6:	0021      	movs	r1, r4
    c2b8:	9806      	ldr	r0, [sp, #24]
    c2ba:	f003 fea7 	bl	1000c <__sprint_r>
    c2be:	2800      	cmp	r0, #0
    c2c0:	d000      	beq.n	c2c4 <_vfprintf_r+0x870>
    c2c2:	e130      	b.n	c526 <_vfprintf_r+0xad2>
    c2c4:	3d10      	subs	r5, #16
    c2c6:	68ba      	ldr	r2, [r7, #8]
    c2c8:	687b      	ldr	r3, [r7, #4]
    c2ca:	ae32      	add	r6, sp, #200	; 0xc8
    c2cc:	2d10      	cmp	r5, #16
    c2ce:	dce7      	bgt.n	c2a0 <_vfprintf_r+0x84c>
    c2d0:	46a3      	mov	fp, r4
    c2d2:	0014      	movs	r4, r2
    c2d4:	4642      	mov	r2, r8
    c2d6:	1964      	adds	r4, r4, r5
    c2d8:	3301      	adds	r3, #1
    c2da:	c624      	stmia	r6!, {r2, r5}
    c2dc:	60bc      	str	r4, [r7, #8]
    c2de:	607b      	str	r3, [r7, #4]
    c2e0:	2b07      	cmp	r3, #7
    c2e2:	dd08      	ble.n	c2f6 <_vfprintf_r+0x8a2>
    c2e4:	003a      	movs	r2, r7
    c2e6:	4659      	mov	r1, fp
    c2e8:	9806      	ldr	r0, [sp, #24]
    c2ea:	f003 fe8f 	bl	1000c <__sprint_r>
    c2ee:	2800      	cmp	r0, #0
    c2f0:	d000      	beq.n	c2f4 <_vfprintf_r+0x8a0>
    c2f2:	e13f      	b.n	c574 <_vfprintf_r+0xb20>
    c2f4:	68bc      	ldr	r4, [r7, #8]
    c2f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c2f8:	9908      	ldr	r1, [sp, #32]
    c2fa:	428b      	cmp	r3, r1
    c2fc:	da00      	bge.n	c300 <_vfprintf_r+0x8ac>
    c2fe:	000b      	movs	r3, r1
    c300:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c302:	4694      	mov	ip, r2
    c304:	449c      	add	ip, r3
    c306:	4663      	mov	r3, ip
    c308:	930a      	str	r3, [sp, #40]	; 0x28
    c30a:	2c00      	cmp	r4, #0
    c30c:	d000      	beq.n	c310 <_vfprintf_r+0x8bc>
    c30e:	e129      	b.n	c564 <_vfprintf_r+0xb10>
    c310:	2300      	movs	r3, #0
    c312:	ae32      	add	r6, sp, #200	; 0xc8
    c314:	607b      	str	r3, [r7, #4]
    c316:	f7ff fbeb 	bl	baf0 <_vfprintf_r+0x9c>
    c31a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    c31c:	2b01      	cmp	r3, #1
    c31e:	dc00      	bgt.n	c322 <_vfprintf_r+0x8ce>
    c320:	e103      	b.n	c52a <_vfprintf_r+0xad6>
    c322:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c324:	3401      	adds	r4, #1
    c326:	6033      	str	r3, [r6, #0]
    c328:	2301      	movs	r3, #1
    c32a:	6073      	str	r3, [r6, #4]
    c32c:	687b      	ldr	r3, [r7, #4]
    c32e:	60bc      	str	r4, [r7, #8]
    c330:	3301      	adds	r3, #1
    c332:	607b      	str	r3, [r7, #4]
    c334:	2b07      	cmp	r3, #7
    c336:	dd00      	ble.n	c33a <_vfprintf_r+0x8e6>
    c338:	e2ef      	b.n	c91a <_vfprintf_r+0xec6>
    c33a:	3608      	adds	r6, #8
    c33c:	9a18      	ldr	r2, [sp, #96]	; 0x60
    c33e:	3301      	adds	r3, #1
    c340:	6032      	str	r2, [r6, #0]
    c342:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    c344:	4698      	mov	r8, r3
    c346:	4694      	mov	ip, r2
    c348:	4464      	add	r4, ip
    c34a:	6072      	str	r2, [r6, #4]
    c34c:	60bc      	str	r4, [r7, #8]
    c34e:	607b      	str	r3, [r7, #4]
    c350:	2b07      	cmp	r3, #7
    c352:	dd00      	ble.n	c356 <_vfprintf_r+0x902>
    c354:	e318      	b.n	c988 <_vfprintf_r+0xf34>
    c356:	3608      	adds	r6, #8
    c358:	2200      	movs	r2, #0
    c35a:	2300      	movs	r3, #0
    c35c:	9816      	ldr	r0, [sp, #88]	; 0x58
    c35e:	9915      	ldr	r1, [sp, #84]	; 0x54
    c360:	f7ff f84a 	bl	b3f8 <__aeabi_dcmpeq>
    c364:	2800      	cmp	r0, #0
    c366:	d000      	beq.n	c36a <_vfprintf_r+0x916>
    c368:	e1f4      	b.n	c754 <_vfprintf_r+0xd00>
    c36a:	9d11      	ldr	r5, [sp, #68]	; 0x44
    c36c:	9b14      	ldr	r3, [sp, #80]	; 0x50
    c36e:	3501      	adds	r5, #1
    c370:	3b01      	subs	r3, #1
    c372:	6035      	str	r5, [r6, #0]
    c374:	6073      	str	r3, [r6, #4]
    c376:	18e4      	adds	r4, r4, r3
    c378:	2301      	movs	r3, #1
    c37a:	469c      	mov	ip, r3
    c37c:	44e0      	add	r8, ip
    c37e:	4643      	mov	r3, r8
    c380:	60bc      	str	r4, [r7, #8]
    c382:	607b      	str	r3, [r7, #4]
    c384:	2b07      	cmp	r3, #7
    c386:	dd00      	ble.n	c38a <_vfprintf_r+0x936>
    c388:	e0e0      	b.n	c54c <_vfprintf_r+0xaf8>
    c38a:	3608      	adds	r6, #8
    c38c:	ab21      	add	r3, sp, #132	; 0x84
    c38e:	6033      	str	r3, [r6, #0]
    c390:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    c392:	469c      	mov	ip, r3
    c394:	6073      	str	r3, [r6, #4]
    c396:	4643      	mov	r3, r8
    c398:	4464      	add	r4, ip
    c39a:	3301      	adds	r3, #1
    c39c:	60bc      	str	r4, [r7, #8]
    c39e:	607b      	str	r3, [r7, #4]
    c3a0:	2b07      	cmp	r3, #7
    c3a2:	dc00      	bgt.n	c3a6 <_vfprintf_r+0x952>
    c3a4:	e758      	b.n	c258 <_vfprintf_r+0x804>
    c3a6:	003a      	movs	r2, r7
    c3a8:	4659      	mov	r1, fp
    c3aa:	9806      	ldr	r0, [sp, #24]
    c3ac:	f003 fe2e 	bl	1000c <__sprint_r>
    c3b0:	2800      	cmp	r0, #0
    c3b2:	d000      	beq.n	c3b6 <_vfprintf_r+0x962>
    c3b4:	e0de      	b.n	c574 <_vfprintf_r+0xb20>
    c3b6:	68bc      	ldr	r4, [r7, #8]
    c3b8:	ae32      	add	r6, sp, #200	; 0xc8
    c3ba:	e74e      	b.n	c25a <_vfprintf_r+0x806>
    c3bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c3be:	2b65      	cmp	r3, #101	; 0x65
    c3c0:	ddab      	ble.n	c31a <_vfprintf_r+0x8c6>
    c3c2:	2200      	movs	r2, #0
    c3c4:	2300      	movs	r3, #0
    c3c6:	9816      	ldr	r0, [sp, #88]	; 0x58
    c3c8:	9915      	ldr	r1, [sp, #84]	; 0x54
    c3ca:	f7ff f815 	bl	b3f8 <__aeabi_dcmpeq>
    c3ce:	2800      	cmp	r0, #0
    c3d0:	d100      	bne.n	c3d4 <_vfprintf_r+0x980>
    c3d2:	e134      	b.n	c63e <_vfprintf_r+0xbea>
    c3d4:	4b85      	ldr	r3, [pc, #532]	; (c5ec <_vfprintf_r+0xb98>)
    c3d6:	3401      	adds	r4, #1
    c3d8:	6033      	str	r3, [r6, #0]
    c3da:	2301      	movs	r3, #1
    c3dc:	6073      	str	r3, [r6, #4]
    c3de:	687b      	ldr	r3, [r7, #4]
    c3e0:	60bc      	str	r4, [r7, #8]
    c3e2:	3301      	adds	r3, #1
    c3e4:	607b      	str	r3, [r7, #4]
    c3e6:	2b07      	cmp	r3, #7
    c3e8:	dd00      	ble.n	c3ec <_vfprintf_r+0x998>
    c3ea:	e3dc      	b.n	cba6 <_vfprintf_r+0x1152>
    c3ec:	3608      	adds	r6, #8
    c3ee:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    c3f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
    c3f2:	4293      	cmp	r3, r2
    c3f4:	db03      	blt.n	c3fe <_vfprintf_r+0x9aa>
    c3f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c3f8:	07db      	lsls	r3, r3, #31
    c3fa:	d400      	bmi.n	c3fe <_vfprintf_r+0x9aa>
    c3fc:	e3b7      	b.n	cb6e <_vfprintf_r+0x111a>
    c3fe:	9b18      	ldr	r3, [sp, #96]	; 0x60
    c400:	68ba      	ldr	r2, [r7, #8]
    c402:	6033      	str	r3, [r6, #0]
    c404:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c406:	469c      	mov	ip, r3
    c408:	6073      	str	r3, [r6, #4]
    c40a:	687b      	ldr	r3, [r7, #4]
    c40c:	4462      	add	r2, ip
    c40e:	3301      	adds	r3, #1
    c410:	0014      	movs	r4, r2
    c412:	60ba      	str	r2, [r7, #8]
    c414:	607b      	str	r3, [r7, #4]
    c416:	2b07      	cmp	r3, #7
    c418:	dd01      	ble.n	c41e <_vfprintf_r+0x9ca>
    c41a:	f000 fc19 	bl	cc50 <_vfprintf_r+0x11fc>
    c41e:	3608      	adds	r6, #8
    c420:	9b14      	ldr	r3, [sp, #80]	; 0x50
    c422:	1e5d      	subs	r5, r3, #1
    c424:	2d00      	cmp	r5, #0
    c426:	dc00      	bgt.n	c42a <_vfprintf_r+0x9d6>
    c428:	e717      	b.n	c25a <_vfprintf_r+0x806>
    c42a:	4a71      	ldr	r2, [pc, #452]	; (c5f0 <_vfprintf_r+0xb9c>)
    c42c:	687b      	ldr	r3, [r7, #4]
    c42e:	4691      	mov	r9, r2
    c430:	2d10      	cmp	r5, #16
    c432:	dc00      	bgt.n	c436 <_vfprintf_r+0x9e2>
    c434:	e1c3      	b.n	c7be <_vfprintf_r+0xd6a>
    c436:	2210      	movs	r2, #16
    c438:	4690      	mov	r8, r2
    c43a:	0022      	movs	r2, r4
    c43c:	464c      	mov	r4, r9
    c43e:	46d9      	mov	r9, fp
    c440:	e004      	b.n	c44c <_vfprintf_r+0x9f8>
    c442:	3608      	adds	r6, #8
    c444:	3d10      	subs	r5, #16
    c446:	2d10      	cmp	r5, #16
    c448:	dc00      	bgt.n	c44c <_vfprintf_r+0x9f8>
    c44a:	e37c      	b.n	cb46 <_vfprintf_r+0x10f2>
    c44c:	4641      	mov	r1, r8
    c44e:	3210      	adds	r2, #16
    c450:	3301      	adds	r3, #1
    c452:	6034      	str	r4, [r6, #0]
    c454:	6071      	str	r1, [r6, #4]
    c456:	60ba      	str	r2, [r7, #8]
    c458:	607b      	str	r3, [r7, #4]
    c45a:	2b07      	cmp	r3, #7
    c45c:	ddf1      	ble.n	c442 <_vfprintf_r+0x9ee>
    c45e:	003a      	movs	r2, r7
    c460:	4649      	mov	r1, r9
    c462:	9806      	ldr	r0, [sp, #24]
    c464:	f003 fdd2 	bl	1000c <__sprint_r>
    c468:	2800      	cmp	r0, #0
    c46a:	d10b      	bne.n	c484 <_vfprintf_r+0xa30>
    c46c:	68ba      	ldr	r2, [r7, #8]
    c46e:	687b      	ldr	r3, [r7, #4]
    c470:	ae32      	add	r6, sp, #200	; 0xc8
    c472:	e7e7      	b.n	c444 <_vfprintf_r+0x9f0>
    c474:	68bb      	ldr	r3, [r7, #8]
    c476:	46d9      	mov	r9, fp
    c478:	2b00      	cmp	r3, #0
    c47a:	d001      	beq.n	c480 <_vfprintf_r+0xa2c>
    c47c:	f000 fd4c 	bl	cf18 <_vfprintf_r+0x14c4>
    c480:	2300      	movs	r3, #0
    c482:	607b      	str	r3, [r7, #4]
    c484:	464b      	mov	r3, r9
    c486:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    c488:	07db      	lsls	r3, r3, #31
    c48a:	d40d      	bmi.n	c4a8 <_vfprintf_r+0xa54>
    c48c:	464b      	mov	r3, r9
    c48e:	899b      	ldrh	r3, [r3, #12]
    c490:	059a      	lsls	r2, r3, #22
    c492:	d505      	bpl.n	c4a0 <_vfprintf_r+0xa4c>
    c494:	065b      	lsls	r3, r3, #25
    c496:	d401      	bmi.n	c49c <_vfprintf_r+0xa48>
    c498:	f7ff fb8d 	bl	bbb6 <_vfprintf_r+0x162>
    c49c:	f7ff fb88 	bl	bbb0 <_vfprintf_r+0x15c>
    c4a0:	464b      	mov	r3, r9
    c4a2:	6d98      	ldr	r0, [r3, #88]	; 0x58
    c4a4:	f002 fc32 	bl	ed0c <__retarget_lock_release_recursive>
    c4a8:	464b      	mov	r3, r9
    c4aa:	899b      	ldrh	r3, [r3, #12]
    c4ac:	e7f2      	b.n	c494 <_vfprintf_r+0xa40>
    c4ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c4b0:	9a08      	ldr	r2, [sp, #32]
    c4b2:	1a9d      	subs	r5, r3, r2
    c4b4:	2d00      	cmp	r5, #0
    c4b6:	dc00      	bgt.n	c4ba <_vfprintf_r+0xa66>
    c4b8:	e685      	b.n	c1c6 <_vfprintf_r+0x772>
    c4ba:	4a4d      	ldr	r2, [pc, #308]	; (c5f0 <_vfprintf_r+0xb9c>)
    c4bc:	687b      	ldr	r3, [r7, #4]
    c4be:	4691      	mov	r9, r2
    c4c0:	2d10      	cmp	r5, #16
    c4c2:	dd24      	ble.n	c50e <_vfprintf_r+0xaba>
    c4c4:	2210      	movs	r2, #16
    c4c6:	0021      	movs	r1, r4
    c4c8:	4690      	mov	r8, r2
    c4ca:	465c      	mov	r4, fp
    c4cc:	0032      	movs	r2, r6
    c4ce:	464e      	mov	r6, r9
    c4d0:	e003      	b.n	c4da <_vfprintf_r+0xa86>
    c4d2:	3d10      	subs	r5, #16
    c4d4:	3208      	adds	r2, #8
    c4d6:	2d10      	cmp	r5, #16
    c4d8:	dd15      	ble.n	c506 <_vfprintf_r+0xab2>
    c4da:	4640      	mov	r0, r8
    c4dc:	3110      	adds	r1, #16
    c4de:	3301      	adds	r3, #1
    c4e0:	6016      	str	r6, [r2, #0]
    c4e2:	6050      	str	r0, [r2, #4]
    c4e4:	60b9      	str	r1, [r7, #8]
    c4e6:	607b      	str	r3, [r7, #4]
    c4e8:	2b07      	cmp	r3, #7
    c4ea:	ddf2      	ble.n	c4d2 <_vfprintf_r+0xa7e>
    c4ec:	003a      	movs	r2, r7
    c4ee:	0021      	movs	r1, r4
    c4f0:	9806      	ldr	r0, [sp, #24]
    c4f2:	f003 fd8b 	bl	1000c <__sprint_r>
    c4f6:	2800      	cmp	r0, #0
    c4f8:	d115      	bne.n	c526 <_vfprintf_r+0xad2>
    c4fa:	3d10      	subs	r5, #16
    c4fc:	68b9      	ldr	r1, [r7, #8]
    c4fe:	687b      	ldr	r3, [r7, #4]
    c500:	aa32      	add	r2, sp, #200	; 0xc8
    c502:	2d10      	cmp	r5, #16
    c504:	dce9      	bgt.n	c4da <_vfprintf_r+0xa86>
    c506:	46a3      	mov	fp, r4
    c508:	46b1      	mov	r9, r6
    c50a:	000c      	movs	r4, r1
    c50c:	0016      	movs	r6, r2
    c50e:	464a      	mov	r2, r9
    c510:	1964      	adds	r4, r4, r5
    c512:	3301      	adds	r3, #1
    c514:	6032      	str	r2, [r6, #0]
    c516:	6075      	str	r5, [r6, #4]
    c518:	60bc      	str	r4, [r7, #8]
    c51a:	607b      	str	r3, [r7, #4]
    c51c:	2b07      	cmp	r3, #7
    c51e:	dd00      	ble.n	c522 <_vfprintf_r+0xace>
    c520:	e263      	b.n	c9ea <_vfprintf_r+0xf96>
    c522:	3608      	adds	r6, #8
    c524:	e64f      	b.n	c1c6 <_vfprintf_r+0x772>
    c526:	46a1      	mov	r9, r4
    c528:	e7ac      	b.n	c484 <_vfprintf_r+0xa30>
    c52a:	2301      	movs	r3, #1
    c52c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c52e:	4213      	tst	r3, r2
    c530:	d000      	beq.n	c534 <_vfprintf_r+0xae0>
    c532:	e6f6      	b.n	c322 <_vfprintf_r+0x8ce>
    c534:	6073      	str	r3, [r6, #4]
    c536:	687b      	ldr	r3, [r7, #4]
    c538:	9a11      	ldr	r2, [sp, #68]	; 0x44
    c53a:	3301      	adds	r3, #1
    c53c:	3401      	adds	r4, #1
    c53e:	6032      	str	r2, [r6, #0]
    c540:	60bc      	str	r4, [r7, #8]
    c542:	4698      	mov	r8, r3
    c544:	607b      	str	r3, [r7, #4]
    c546:	2b07      	cmp	r3, #7
    c548:	dc00      	bgt.n	c54c <_vfprintf_r+0xaf8>
    c54a:	e71e      	b.n	c38a <_vfprintf_r+0x936>
    c54c:	003a      	movs	r2, r7
    c54e:	4659      	mov	r1, fp
    c550:	9806      	ldr	r0, [sp, #24]
    c552:	f003 fd5b 	bl	1000c <__sprint_r>
    c556:	2800      	cmp	r0, #0
    c558:	d10c      	bne.n	c574 <_vfprintf_r+0xb20>
    c55a:	687b      	ldr	r3, [r7, #4]
    c55c:	68bc      	ldr	r4, [r7, #8]
    c55e:	4698      	mov	r8, r3
    c560:	ae32      	add	r6, sp, #200	; 0xc8
    c562:	e713      	b.n	c38c <_vfprintf_r+0x938>
    c564:	003a      	movs	r2, r7
    c566:	4659      	mov	r1, fp
    c568:	9806      	ldr	r0, [sp, #24]
    c56a:	f003 fd4f 	bl	1000c <__sprint_r>
    c56e:	2800      	cmp	r0, #0
    c570:	d100      	bne.n	c574 <_vfprintf_r+0xb20>
    c572:	e6cd      	b.n	c310 <_vfprintf_r+0x8bc>
    c574:	46d9      	mov	r9, fp
    c576:	e785      	b.n	c484 <_vfprintf_r+0xa30>
    c578:	9c09      	ldr	r4, [sp, #36]	; 0x24
    c57a:	2b01      	cmp	r3, #1
    c57c:	d100      	bne.n	c580 <_vfprintf_r+0xb2c>
    c57e:	e148      	b.n	c812 <_vfprintf_r+0xdbe>
    c580:	2b02      	cmp	r3, #2
    c582:	d123      	bne.n	c5cc <_vfprintf_r+0xb78>
    c584:	9409      	str	r4, [sp, #36]	; 0x24
    c586:	2300      	movs	r3, #0
    c588:	2400      	movs	r4, #0
    c58a:	930c      	str	r3, [sp, #48]	; 0x30
    c58c:	940d      	str	r4, [sp, #52]	; 0x34
    c58e:	e4a1      	b.n	bed4 <_vfprintf_r+0x480>
    c590:	003a      	movs	r2, r7
    c592:	4659      	mov	r1, fp
    c594:	9806      	ldr	r0, [sp, #24]
    c596:	f003 fd39 	bl	1000c <__sprint_r>
    c59a:	2800      	cmp	r0, #0
    c59c:	d1ea      	bne.n	c574 <_vfprintf_r+0xb20>
    c59e:	68bc      	ldr	r4, [r7, #8]
    c5a0:	ae32      	add	r6, sp, #200	; 0xc8
    c5a2:	e648      	b.n	c236 <_vfprintf_r+0x7e2>
    c5a4:	003a      	movs	r2, r7
    c5a6:	4659      	mov	r1, fp
    c5a8:	9806      	ldr	r0, [sp, #24]
    c5aa:	f003 fd2f 	bl	1000c <__sprint_r>
    c5ae:	2800      	cmp	r0, #0
    c5b0:	d1e0      	bne.n	c574 <_vfprintf_r+0xb20>
    c5b2:	68bc      	ldr	r4, [r7, #8]
    c5b4:	ae32      	add	r6, sp, #200	; 0xc8
    c5b6:	e5f2      	b.n	c19e <_vfprintf_r+0x74a>
    c5b8:	003a      	movs	r2, r7
    c5ba:	4659      	mov	r1, fp
    c5bc:	9806      	ldr	r0, [sp, #24]
    c5be:	f003 fd25 	bl	1000c <__sprint_r>
    c5c2:	2800      	cmp	r0, #0
    c5c4:	d1d6      	bne.n	c574 <_vfprintf_r+0xb20>
    c5c6:	68bc      	ldr	r4, [r7, #8]
    c5c8:	ae32      	add	r6, sp, #200	; 0xc8
    c5ca:	e5f8      	b.n	c1be <_vfprintf_r+0x76a>
    c5cc:	9409      	str	r4, [sp, #36]	; 0x24
    c5ce:	2300      	movs	r3, #0
    c5d0:	2400      	movs	r4, #0
    c5d2:	930c      	str	r3, [sp, #48]	; 0x30
    c5d4:	940d      	str	r4, [sp, #52]	; 0x34
    c5d6:	980c      	ldr	r0, [sp, #48]	; 0x30
    c5d8:	990d      	ldr	r1, [sp, #52]	; 0x34
    c5da:	4653      	mov	r3, sl
    c5dc:	aa32      	add	r2, sp, #200	; 0xc8
    c5de:	4691      	mov	r9, r2
    c5e0:	9308      	str	r3, [sp, #32]
    c5e2:	46b2      	mov	sl, r6
    c5e4:	e007      	b.n	c5f6 <_vfprintf_r+0xba2>
    c5e6:	46c0      	nop			; (mov r8, r8)
    c5e8:	00011178 	.word	0x00011178
    c5ec:	00011174 	.word	0x00011174
    c5f0:	00011188 	.word	0x00011188
    c5f4:	46a1      	mov	r9, r4
    c5f6:	074a      	lsls	r2, r1, #29
    c5f8:	4694      	mov	ip, r2
    c5fa:	464b      	mov	r3, r9
    c5fc:	4665      	mov	r5, ip
    c5fe:	1e5c      	subs	r4, r3, #1
    c600:	08c6      	lsrs	r6, r0, #3
    c602:	2307      	movs	r3, #7
    c604:	08ca      	lsrs	r2, r1, #3
    c606:	4335      	orrs	r5, r6
    c608:	0011      	movs	r1, r2
    c60a:	002a      	movs	r2, r5
    c60c:	4003      	ands	r3, r0
    c60e:	3330      	adds	r3, #48	; 0x30
    c610:	7023      	strb	r3, [r4, #0]
    c612:	0028      	movs	r0, r5
    c614:	430a      	orrs	r2, r1
    c616:	d1ed      	bne.n	c5f4 <_vfprintf_r+0xba0>
    c618:	900c      	str	r0, [sp, #48]	; 0x30
    c61a:	910d      	str	r1, [sp, #52]	; 0x34
    c61c:	9908      	ldr	r1, [sp, #32]
    c61e:	4656      	mov	r6, sl
    c620:	468a      	mov	sl, r1
    c622:	9909      	ldr	r1, [sp, #36]	; 0x24
    c624:	464a      	mov	r2, r9
    c626:	9411      	str	r4, [sp, #68]	; 0x44
    c628:	07c9      	lsls	r1, r1, #31
    c62a:	d500      	bpl.n	c62e <_vfprintf_r+0xbda>
    c62c:	e0e0      	b.n	c7f0 <_vfprintf_r+0xd9c>
    c62e:	ab32      	add	r3, sp, #200	; 0xc8
    c630:	1b1b      	subs	r3, r3, r4
    c632:	930e      	str	r3, [sp, #56]	; 0x38
    c634:	f7ff fb7b 	bl	bd2e <_vfprintf_r+0x2da>
    c638:	9c07      	ldr	r4, [sp, #28]
    c63a:	f7ff fa7d 	bl	bb38 <_vfprintf_r+0xe4>
    c63e:	981f      	ldr	r0, [sp, #124]	; 0x7c
    c640:	2800      	cmp	r0, #0
    c642:	dc00      	bgt.n	c646 <_vfprintf_r+0xbf2>
    c644:	e2b9      	b.n	cbba <_vfprintf_r+0x1166>
    c646:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    c648:	9914      	ldr	r1, [sp, #80]	; 0x50
    c64a:	0013      	movs	r3, r2
    c64c:	4690      	mov	r8, r2
    c64e:	428b      	cmp	r3, r1
    c650:	dd00      	ble.n	c654 <_vfprintf_r+0xc00>
    c652:	4688      	mov	r8, r1
    c654:	4643      	mov	r3, r8
    c656:	2b00      	cmp	r3, #0
    c658:	dd0c      	ble.n	c674 <_vfprintf_r+0xc20>
    c65a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c65c:	4444      	add	r4, r8
    c65e:	6033      	str	r3, [r6, #0]
    c660:	4643      	mov	r3, r8
    c662:	6073      	str	r3, [r6, #4]
    c664:	687b      	ldr	r3, [r7, #4]
    c666:	60bc      	str	r4, [r7, #8]
    c668:	3301      	adds	r3, #1
    c66a:	607b      	str	r3, [r7, #4]
    c66c:	2b07      	cmp	r3, #7
    c66e:	dd00      	ble.n	c672 <_vfprintf_r+0xc1e>
    c670:	e389      	b.n	cd86 <_vfprintf_r+0x1332>
    c672:	3608      	adds	r6, #8
    c674:	4643      	mov	r3, r8
    c676:	43db      	mvns	r3, r3
    c678:	4642      	mov	r2, r8
    c67a:	17db      	asrs	r3, r3, #31
    c67c:	4013      	ands	r3, r2
    c67e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    c680:	1ad3      	subs	r3, r2, r3
    c682:	4698      	mov	r8, r3
    c684:	2b00      	cmp	r3, #0
    c686:	dc00      	bgt.n	c68a <_vfprintf_r+0xc36>
    c688:	e0eb      	b.n	c862 <_vfprintf_r+0xe0e>
    c68a:	2b10      	cmp	r3, #16
    c68c:	dc01      	bgt.n	c692 <_vfprintf_r+0xc3e>
    c68e:	f000 fcd9 	bl	d044 <_vfprintf_r+0x15f0>
    c692:	4adc      	ldr	r2, [pc, #880]	; (ca04 <_vfprintf_r+0xfb0>)
    c694:	687b      	ldr	r3, [r7, #4]
    c696:	4691      	mov	r9, r2
    c698:	2210      	movs	r2, #16
    c69a:	464d      	mov	r5, r9
    c69c:	4692      	mov	sl, r2
    c69e:	0022      	movs	r2, r4
    c6a0:	4644      	mov	r4, r8
    c6a2:	46d8      	mov	r8, fp
    c6a4:	e004      	b.n	c6b0 <_vfprintf_r+0xc5c>
    c6a6:	3608      	adds	r6, #8
    c6a8:	3c10      	subs	r4, #16
    c6aa:	2c10      	cmp	r4, #16
    c6ac:	dc00      	bgt.n	c6b0 <_vfprintf_r+0xc5c>
    c6ae:	e0bf      	b.n	c830 <_vfprintf_r+0xddc>
    c6b0:	4651      	mov	r1, sl
    c6b2:	3210      	adds	r2, #16
    c6b4:	3301      	adds	r3, #1
    c6b6:	6035      	str	r5, [r6, #0]
    c6b8:	6071      	str	r1, [r6, #4]
    c6ba:	60ba      	str	r2, [r7, #8]
    c6bc:	607b      	str	r3, [r7, #4]
    c6be:	2b07      	cmp	r3, #7
    c6c0:	ddf1      	ble.n	c6a6 <_vfprintf_r+0xc52>
    c6c2:	003a      	movs	r2, r7
    c6c4:	4641      	mov	r1, r8
    c6c6:	9806      	ldr	r0, [sp, #24]
    c6c8:	f003 fca0 	bl	1000c <__sprint_r>
    c6cc:	2800      	cmp	r0, #0
    c6ce:	d000      	beq.n	c6d2 <_vfprintf_r+0xc7e>
    c6d0:	e3b6      	b.n	ce40 <_vfprintf_r+0x13ec>
    c6d2:	68ba      	ldr	r2, [r7, #8]
    c6d4:	687b      	ldr	r3, [r7, #4]
    c6d6:	ae32      	add	r6, sp, #200	; 0xc8
    c6d8:	e7e6      	b.n	c6a8 <_vfprintf_r+0xc54>
    c6da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c6dc:	2b00      	cmp	r3, #0
    c6de:	d100      	bne.n	c6e2 <_vfprintf_r+0xc8e>
    c6e0:	e092      	b.n	c808 <_vfprintf_r+0xdb4>
    c6e2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    c6e4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    c6e6:	ab32      	add	r3, sp, #200	; 0xc8
    c6e8:	46b1      	mov	r9, r6
    c6ea:	001e      	movs	r6, r3
    c6ec:	0020      	movs	r0, r4
    c6ee:	0029      	movs	r1, r5
    c6f0:	220a      	movs	r2, #10
    c6f2:	2300      	movs	r3, #0
    c6f4:	f7fc fcba 	bl	906c <__aeabi_uldivmod>
    c6f8:	3e01      	subs	r6, #1
    c6fa:	3230      	adds	r2, #48	; 0x30
    c6fc:	7032      	strb	r2, [r6, #0]
    c6fe:	2300      	movs	r3, #0
    c700:	0020      	movs	r0, r4
    c702:	0029      	movs	r1, r5
    c704:	220a      	movs	r2, #10
    c706:	f7fc fcb1 	bl	906c <__aeabi_uldivmod>
    c70a:	0003      	movs	r3, r0
    c70c:	0004      	movs	r4, r0
    c70e:	000d      	movs	r5, r1
    c710:	430b      	orrs	r3, r1
    c712:	d1eb      	bne.n	c6ec <_vfprintf_r+0xc98>
    c714:	0032      	movs	r2, r6
    c716:	ab32      	add	r3, sp, #200	; 0xc8
    c718:	1a9b      	subs	r3, r3, r2
    c71a:	9611      	str	r6, [sp, #68]	; 0x44
    c71c:	940c      	str	r4, [sp, #48]	; 0x30
    c71e:	950d      	str	r5, [sp, #52]	; 0x34
    c720:	464e      	mov	r6, r9
    c722:	930e      	str	r3, [sp, #56]	; 0x38
    c724:	f7ff fb03 	bl	bd2e <_vfprintf_r+0x2da>
    c728:	2300      	movs	r3, #0
    c72a:	930e      	str	r3, [sp, #56]	; 0x38
    c72c:	ab32      	add	r3, sp, #200	; 0xc8
    c72e:	9311      	str	r3, [sp, #68]	; 0x44
    c730:	f7ff fafd 	bl	bd2e <_vfprintf_r+0x2da>
    c734:	003a      	movs	r2, r7
    c736:	4659      	mov	r1, fp
    c738:	9806      	ldr	r0, [sp, #24]
    c73a:	f003 fc67 	bl	1000c <__sprint_r>
    c73e:	2800      	cmp	r0, #0
    c740:	d000      	beq.n	c744 <_vfprintf_r+0xcf0>
    c742:	e717      	b.n	c574 <_vfprintf_r+0xb20>
    c744:	ab16      	add	r3, sp, #88	; 0x58
    c746:	7fdb      	ldrb	r3, [r3, #31]
    c748:	68bc      	ldr	r4, [r7, #8]
    c74a:	4698      	mov	r8, r3
    c74c:	ae32      	add	r6, sp, #200	; 0xc8
    c74e:	e513      	b.n	c178 <_vfprintf_r+0x724>
    c750:	46b1      	mov	r9, r6
    c752:	e697      	b.n	c484 <_vfprintf_r+0xa30>
    c754:	9b14      	ldr	r3, [sp, #80]	; 0x50
    c756:	1e5d      	subs	r5, r3, #1
    c758:	2d00      	cmp	r5, #0
    c75a:	dc00      	bgt.n	c75e <_vfprintf_r+0xd0a>
    c75c:	e616      	b.n	c38c <_vfprintf_r+0x938>
    c75e:	4ba9      	ldr	r3, [pc, #676]	; (ca04 <_vfprintf_r+0xfb0>)
    c760:	4699      	mov	r9, r3
    c762:	2d10      	cmp	r5, #16
    c764:	dc00      	bgt.n	c768 <_vfprintf_r+0xd14>
    c766:	e10a      	b.n	c97e <_vfprintf_r+0xf2a>
    c768:	2310      	movs	r3, #16
    c76a:	0022      	movs	r2, r4
    c76c:	469a      	mov	sl, r3
    c76e:	465c      	mov	r4, fp
    c770:	4643      	mov	r3, r8
    c772:	e004      	b.n	c77e <_vfprintf_r+0xd2a>
    c774:	3608      	adds	r6, #8
    c776:	3d10      	subs	r5, #16
    c778:	2d10      	cmp	r5, #16
    c77a:	dc00      	bgt.n	c77e <_vfprintf_r+0xd2a>
    c77c:	e0fc      	b.n	c978 <_vfprintf_r+0xf24>
    c77e:	4649      	mov	r1, r9
    c780:	6031      	str	r1, [r6, #0]
    c782:	4651      	mov	r1, sl
    c784:	3210      	adds	r2, #16
    c786:	3301      	adds	r3, #1
    c788:	6071      	str	r1, [r6, #4]
    c78a:	60ba      	str	r2, [r7, #8]
    c78c:	607b      	str	r3, [r7, #4]
    c78e:	2b07      	cmp	r3, #7
    c790:	ddf0      	ble.n	c774 <_vfprintf_r+0xd20>
    c792:	003a      	movs	r2, r7
    c794:	0021      	movs	r1, r4
    c796:	9806      	ldr	r0, [sp, #24]
    c798:	f003 fc38 	bl	1000c <__sprint_r>
    c79c:	2800      	cmp	r0, #0
    c79e:	d000      	beq.n	c7a2 <_vfprintf_r+0xd4e>
    c7a0:	e6c1      	b.n	c526 <_vfprintf_r+0xad2>
    c7a2:	68ba      	ldr	r2, [r7, #8]
    c7a4:	687b      	ldr	r3, [r7, #4]
    c7a6:	ae32      	add	r6, sp, #200	; 0xc8
    c7a8:	e7e5      	b.n	c776 <_vfprintf_r+0xd22>
    c7aa:	990c      	ldr	r1, [sp, #48]	; 0x30
    c7ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    c7ae:	0008      	movs	r0, r1
    c7b0:	4310      	orrs	r0, r2
    c7b2:	2302      	movs	r3, #2
    c7b4:	0002      	movs	r2, r0
    c7b6:	f7ff fa93 	bl	bce0 <_vfprintf_r+0x28c>
    c7ba:	46a3      	mov	fp, r4
    c7bc:	0014      	movs	r4, r2
    c7be:	464a      	mov	r2, r9
    c7c0:	1964      	adds	r4, r4, r5
    c7c2:	3301      	adds	r3, #1
    c7c4:	6032      	str	r2, [r6, #0]
    c7c6:	6075      	str	r5, [r6, #4]
    c7c8:	60bc      	str	r4, [r7, #8]
    c7ca:	607b      	str	r3, [r7, #4]
    c7cc:	2b07      	cmp	r3, #7
    c7ce:	dc00      	bgt.n	c7d2 <_vfprintf_r+0xd7e>
    c7d0:	e542      	b.n	c258 <_vfprintf_r+0x804>
    c7d2:	e5e8      	b.n	c3a6 <_vfprintf_r+0x952>
    c7d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c7d6:	681a      	ldr	r2, [r3, #0]
    c7d8:	f7ff fa68 	bl	bcac <_vfprintf_r+0x258>
    c7dc:	6813      	ldr	r3, [r2, #0]
    c7de:	9308      	str	r3, [sp, #32]
    c7e0:	f7ff fb57 	bl	be92 <_vfprintf_r+0x43e>
    c7e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c7e6:	681a      	ldr	r2, [r3, #0]
    c7e8:	e412      	b.n	c010 <_vfprintf_r+0x5bc>
    c7ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c7ec:	681a      	ldr	r2, [r3, #0]
    c7ee:	e426      	b.n	c03e <_vfprintf_r+0x5ea>
    c7f0:	2b30      	cmp	r3, #48	; 0x30
    c7f2:	d100      	bne.n	c7f6 <_vfprintf_r+0xda2>
    c7f4:	e23c      	b.n	cc70 <_vfprintf_r+0x121c>
    c7f6:	2330      	movs	r3, #48	; 0x30
    c7f8:	3a02      	subs	r2, #2
    c7fa:	7013      	strb	r3, [r2, #0]
    c7fc:	ab32      	add	r3, sp, #200	; 0xc8
    c7fe:	1a9b      	subs	r3, r3, r2
    c800:	930e      	str	r3, [sp, #56]	; 0x38
    c802:	9211      	str	r2, [sp, #68]	; 0x44
    c804:	f7ff fa93 	bl	bd2e <_vfprintf_r+0x2da>
    c808:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c80a:	2b09      	cmp	r3, #9
    c80c:	d900      	bls.n	c810 <_vfprintf_r+0xdbc>
    c80e:	e768      	b.n	c6e2 <_vfprintf_r+0xc8e>
    c810:	9c09      	ldr	r4, [sp, #36]	; 0x24
    c812:	2227      	movs	r2, #39	; 0x27
    c814:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c816:	a928      	add	r1, sp, #160	; 0xa0
    c818:	3330      	adds	r3, #48	; 0x30
    c81a:	548b      	strb	r3, [r1, r2]
    c81c:	2301      	movs	r3, #1
    c81e:	aa16      	add	r2, sp, #88	; 0x58
    c820:	4694      	mov	ip, r2
    c822:	930e      	str	r3, [sp, #56]	; 0x38
    c824:	336e      	adds	r3, #110	; 0x6e
    c826:	4463      	add	r3, ip
    c828:	9409      	str	r4, [sp, #36]	; 0x24
    c82a:	9311      	str	r3, [sp, #68]	; 0x44
    c82c:	f7ff fa7f 	bl	bd2e <_vfprintf_r+0x2da>
    c830:	46c3      	mov	fp, r8
    c832:	46a9      	mov	r9, r5
    c834:	46a0      	mov	r8, r4
    c836:	0014      	movs	r4, r2
    c838:	464a      	mov	r2, r9
    c83a:	6032      	str	r2, [r6, #0]
    c83c:	4642      	mov	r2, r8
    c83e:	4444      	add	r4, r8
    c840:	3301      	adds	r3, #1
    c842:	6072      	str	r2, [r6, #4]
    c844:	60bc      	str	r4, [r7, #8]
    c846:	607b      	str	r3, [r7, #4]
    c848:	2b07      	cmp	r3, #7
    c84a:	dc00      	bgt.n	c84e <_vfprintf_r+0xdfa>
    c84c:	e18d      	b.n	cb6a <_vfprintf_r+0x1116>
    c84e:	003a      	movs	r2, r7
    c850:	4659      	mov	r1, fp
    c852:	9806      	ldr	r0, [sp, #24]
    c854:	f003 fbda 	bl	1000c <__sprint_r>
    c858:	2800      	cmp	r0, #0
    c85a:	d000      	beq.n	c85e <_vfprintf_r+0xe0a>
    c85c:	e68a      	b.n	c574 <_vfprintf_r+0xb20>
    c85e:	68bc      	ldr	r4, [r7, #8]
    c860:	ae32      	add	r6, sp, #200	; 0xc8
    c862:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    c864:	9a14      	ldr	r2, [sp, #80]	; 0x50
    c866:	4293      	cmp	r3, r2
    c868:	db00      	blt.n	c86c <_vfprintf_r+0xe18>
    c86a:	e179      	b.n	cb60 <_vfprintf_r+0x110c>
    c86c:	9a18      	ldr	r2, [sp, #96]	; 0x60
    c86e:	6032      	str	r2, [r6, #0]
    c870:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    c872:	4694      	mov	ip, r2
    c874:	6072      	str	r2, [r6, #4]
    c876:	687a      	ldr	r2, [r7, #4]
    c878:	4464      	add	r4, ip
    c87a:	3201      	adds	r2, #1
    c87c:	60bc      	str	r4, [r7, #8]
    c87e:	607a      	str	r2, [r7, #4]
    c880:	2a07      	cmp	r2, #7
    c882:	dd00      	ble.n	c886 <_vfprintf_r+0xe32>
    c884:	e176      	b.n	cb74 <_vfprintf_r+0x1120>
    c886:	3608      	adds	r6, #8
    c888:	9a14      	ldr	r2, [sp, #80]	; 0x50
    c88a:	9913      	ldr	r1, [sp, #76]	; 0x4c
    c88c:	1ad3      	subs	r3, r2, r3
    c88e:	1a52      	subs	r2, r2, r1
    c890:	4690      	mov	r8, r2
    c892:	429a      	cmp	r2, r3
    c894:	dd00      	ble.n	c898 <_vfprintf_r+0xe44>
    c896:	4698      	mov	r8, r3
    c898:	4642      	mov	r2, r8
    c89a:	2a00      	cmp	r2, #0
    c89c:	dd0f      	ble.n	c8be <_vfprintf_r+0xe6a>
    c89e:	9913      	ldr	r1, [sp, #76]	; 0x4c
    c8a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
    c8a2:	468c      	mov	ip, r1
    c8a4:	4462      	add	r2, ip
    c8a6:	6032      	str	r2, [r6, #0]
    c8a8:	4642      	mov	r2, r8
    c8aa:	6072      	str	r2, [r6, #4]
    c8ac:	687a      	ldr	r2, [r7, #4]
    c8ae:	4444      	add	r4, r8
    c8b0:	3201      	adds	r2, #1
    c8b2:	60bc      	str	r4, [r7, #8]
    c8b4:	607a      	str	r2, [r7, #4]
    c8b6:	2a07      	cmp	r2, #7
    c8b8:	dd00      	ble.n	c8bc <_vfprintf_r+0xe68>
    c8ba:	e289      	b.n	cdd0 <_vfprintf_r+0x137c>
    c8bc:	3608      	adds	r6, #8
    c8be:	4642      	mov	r2, r8
    c8c0:	43d5      	mvns	r5, r2
    c8c2:	17ed      	asrs	r5, r5, #31
    c8c4:	4015      	ands	r5, r2
    c8c6:	1b5d      	subs	r5, r3, r5
    c8c8:	2d00      	cmp	r5, #0
    c8ca:	dc00      	bgt.n	c8ce <_vfprintf_r+0xe7a>
    c8cc:	e4c5      	b.n	c25a <_vfprintf_r+0x806>
    c8ce:	4a4d      	ldr	r2, [pc, #308]	; (ca04 <_vfprintf_r+0xfb0>)
    c8d0:	687b      	ldr	r3, [r7, #4]
    c8d2:	4691      	mov	r9, r2
    c8d4:	2d10      	cmp	r5, #16
    c8d6:	dc00      	bgt.n	c8da <_vfprintf_r+0xe86>
    c8d8:	e771      	b.n	c7be <_vfprintf_r+0xd6a>
    c8da:	2210      	movs	r2, #16
    c8dc:	4690      	mov	r8, r2
    c8de:	0022      	movs	r2, r4
    c8e0:	465c      	mov	r4, fp
    c8e2:	e004      	b.n	c8ee <_vfprintf_r+0xe9a>
    c8e4:	3608      	adds	r6, #8
    c8e6:	3d10      	subs	r5, #16
    c8e8:	2d10      	cmp	r5, #16
    c8ea:	dc00      	bgt.n	c8ee <_vfprintf_r+0xe9a>
    c8ec:	e765      	b.n	c7ba <_vfprintf_r+0xd66>
    c8ee:	4649      	mov	r1, r9
    c8f0:	6031      	str	r1, [r6, #0]
    c8f2:	4641      	mov	r1, r8
    c8f4:	3210      	adds	r2, #16
    c8f6:	3301      	adds	r3, #1
    c8f8:	6071      	str	r1, [r6, #4]
    c8fa:	60ba      	str	r2, [r7, #8]
    c8fc:	607b      	str	r3, [r7, #4]
    c8fe:	2b07      	cmp	r3, #7
    c900:	ddf0      	ble.n	c8e4 <_vfprintf_r+0xe90>
    c902:	003a      	movs	r2, r7
    c904:	0021      	movs	r1, r4
    c906:	9806      	ldr	r0, [sp, #24]
    c908:	f003 fb80 	bl	1000c <__sprint_r>
    c90c:	2800      	cmp	r0, #0
    c90e:	d000      	beq.n	c912 <_vfprintf_r+0xebe>
    c910:	e609      	b.n	c526 <_vfprintf_r+0xad2>
    c912:	68ba      	ldr	r2, [r7, #8]
    c914:	687b      	ldr	r3, [r7, #4]
    c916:	ae32      	add	r6, sp, #200	; 0xc8
    c918:	e7e5      	b.n	c8e6 <_vfprintf_r+0xe92>
    c91a:	003a      	movs	r2, r7
    c91c:	4659      	mov	r1, fp
    c91e:	9806      	ldr	r0, [sp, #24]
    c920:	f003 fb74 	bl	1000c <__sprint_r>
    c924:	2800      	cmp	r0, #0
    c926:	d000      	beq.n	c92a <_vfprintf_r+0xed6>
    c928:	e624      	b.n	c574 <_vfprintf_r+0xb20>
    c92a:	68bc      	ldr	r4, [r7, #8]
    c92c:	687b      	ldr	r3, [r7, #4]
    c92e:	ae32      	add	r6, sp, #200	; 0xc8
    c930:	e504      	b.n	c33c <_vfprintf_r+0x8e8>
    c932:	2307      	movs	r3, #7
    c934:	3207      	adds	r2, #7
    c936:	439a      	bics	r2, r3
    c938:	3301      	adds	r3, #1
    c93a:	469c      	mov	ip, r3
    c93c:	4494      	add	ip, r2
    c93e:	4663      	mov	r3, ip
    c940:	930f      	str	r3, [sp, #60]	; 0x3c
    c942:	6853      	ldr	r3, [r2, #4]
    c944:	6812      	ldr	r2, [r2, #0]
    c946:	930d      	str	r3, [sp, #52]	; 0x34
    c948:	920c      	str	r2, [sp, #48]	; 0x30
    c94a:	f7ff faa7 	bl	be9c <_vfprintf_r+0x448>
    c94e:	2207      	movs	r2, #7
    c950:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c952:	3307      	adds	r3, #7
    c954:	4393      	bics	r3, r2
    c956:	3201      	adds	r2, #1
    c958:	4694      	mov	ip, r2
    c95a:	449c      	add	ip, r3
    c95c:	4662      	mov	r2, ip
    c95e:	920f      	str	r2, [sp, #60]	; 0x3c
    c960:	681a      	ldr	r2, [r3, #0]
    c962:	685b      	ldr	r3, [r3, #4]
    c964:	0011      	movs	r1, r2
    c966:	001a      	movs	r2, r3
    c968:	0008      	movs	r0, r1
    c96a:	4310      	orrs	r0, r2
    c96c:	910c      	str	r1, [sp, #48]	; 0x30
    c96e:	920d      	str	r2, [sp, #52]	; 0x34
    c970:	2300      	movs	r3, #0
    c972:	0002      	movs	r2, r0
    c974:	f7ff f9b4 	bl	bce0 <_vfprintf_r+0x28c>
    c978:	46a3      	mov	fp, r4
    c97a:	4698      	mov	r8, r3
    c97c:	0014      	movs	r4, r2
    c97e:	464b      	mov	r3, r9
    c980:	6075      	str	r5, [r6, #4]
    c982:	6033      	str	r3, [r6, #0]
    c984:	1964      	adds	r4, r4, r5
    c986:	e4f7      	b.n	c378 <_vfprintf_r+0x924>
    c988:	003a      	movs	r2, r7
    c98a:	4659      	mov	r1, fp
    c98c:	9806      	ldr	r0, [sp, #24]
    c98e:	f003 fb3d 	bl	1000c <__sprint_r>
    c992:	2800      	cmp	r0, #0
    c994:	d000      	beq.n	c998 <_vfprintf_r+0xf44>
    c996:	e5ed      	b.n	c574 <_vfprintf_r+0xb20>
    c998:	687b      	ldr	r3, [r7, #4]
    c99a:	68bc      	ldr	r4, [r7, #8]
    c99c:	4698      	mov	r8, r3
    c99e:	ae32      	add	r6, sp, #200	; 0xc8
    c9a0:	e4da      	b.n	c358 <_vfprintf_r+0x904>
    c9a2:	2207      	movs	r2, #7
    c9a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c9a6:	3307      	adds	r3, #7
    c9a8:	4393      	bics	r3, r2
    c9aa:	3201      	adds	r2, #1
    c9ac:	4694      	mov	ip, r2
    c9ae:	449c      	add	ip, r3
    c9b0:	4662      	mov	r2, ip
    c9b2:	920f      	str	r2, [sp, #60]	; 0x3c
    c9b4:	681a      	ldr	r2, [r3, #0]
    c9b6:	685b      	ldr	r3, [r3, #4]
    c9b8:	0011      	movs	r1, r2
    c9ba:	001a      	movs	r2, r3
    c9bc:	0008      	movs	r0, r1
    c9be:	4310      	orrs	r0, r2
    c9c0:	910c      	str	r1, [sp, #48]	; 0x30
    c9c2:	920d      	str	r2, [sp, #52]	; 0x34
    c9c4:	2301      	movs	r3, #1
    c9c6:	0002      	movs	r2, r0
    c9c8:	f7ff f98a 	bl	bce0 <_vfprintf_r+0x28c>
    c9cc:	2207      	movs	r2, #7
    c9ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c9d0:	3307      	adds	r3, #7
    c9d2:	4393      	bics	r3, r2
    c9d4:	3201      	adds	r2, #1
    c9d6:	4694      	mov	ip, r2
    c9d8:	449c      	add	ip, r3
    c9da:	4662      	mov	r2, ip
    c9dc:	920f      	str	r2, [sp, #60]	; 0x3c
    c9de:	681a      	ldr	r2, [r3, #0]
    c9e0:	685b      	ldr	r3, [r3, #4]
    c9e2:	920c      	str	r2, [sp, #48]	; 0x30
    c9e4:	930d      	str	r3, [sp, #52]	; 0x34
    c9e6:	f7ff f966 	bl	bcb6 <_vfprintf_r+0x262>
    c9ea:	003a      	movs	r2, r7
    c9ec:	4659      	mov	r1, fp
    c9ee:	9806      	ldr	r0, [sp, #24]
    c9f0:	f003 fb0c 	bl	1000c <__sprint_r>
    c9f4:	2800      	cmp	r0, #0
    c9f6:	d000      	beq.n	c9fa <_vfprintf_r+0xfa6>
    c9f8:	e5bc      	b.n	c574 <_vfprintf_r+0xb20>
    c9fa:	68bc      	ldr	r4, [r7, #8]
    c9fc:	ae32      	add	r6, sp, #200	; 0xc8
    c9fe:	f7ff fbe2 	bl	c1c6 <_vfprintf_r+0x772>
    ca02:	46c0      	nop			; (mov r8, r8)
    ca04:	00011188 	.word	0x00011188
    ca08:	980c      	ldr	r0, [sp, #48]	; 0x30
    ca0a:	990d      	ldr	r1, [sp, #52]	; 0x34
    ca0c:	2300      	movs	r3, #0
    ca0e:	4242      	negs	r2, r0
    ca10:	418b      	sbcs	r3, r1
    ca12:	0011      	movs	r1, r2
    ca14:	001a      	movs	r2, r3
    ca16:	232d      	movs	r3, #45	; 0x2d
    ca18:	a816      	add	r0, sp, #88	; 0x58
    ca1a:	77c3      	strb	r3, [r0, #31]
    ca1c:	0008      	movs	r0, r1
    ca1e:	4310      	orrs	r0, r2
    ca20:	910c      	str	r1, [sp, #48]	; 0x30
    ca22:	920d      	str	r2, [sp, #52]	; 0x34
    ca24:	4698      	mov	r8, r3
    ca26:	0002      	movs	r2, r0
    ca28:	3b2c      	subs	r3, #44	; 0x2c
    ca2a:	f7ff f95d 	bl	bce8 <_vfprintf_r+0x294>
    ca2e:	9916      	ldr	r1, [sp, #88]	; 0x58
    ca30:	9d15      	ldr	r5, [sp, #84]	; 0x54
    ca32:	000a      	movs	r2, r1
    ca34:	0008      	movs	r0, r1
    ca36:	002b      	movs	r3, r5
    ca38:	0029      	movs	r1, r5
    ca3a:	f004 f83d 	bl	10ab8 <__aeabi_dcmpun>
    ca3e:	2800      	cmp	r0, #0
    ca40:	d000      	beq.n	ca44 <_vfprintf_r+0xff0>
    ca42:	e2c6      	b.n	cfd2 <_vfprintf_r+0x157e>
    ca44:	4653      	mov	r3, sl
    ca46:	3301      	adds	r3, #1
    ca48:	d100      	bne.n	ca4c <_vfprintf_r+0xff8>
    ca4a:	e09f      	b.n	cb8c <_vfprintf_r+0x1138>
    ca4c:	2320      	movs	r3, #32
    ca4e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    ca50:	439a      	bics	r2, r3
    ca52:	920e      	str	r2, [sp, #56]	; 0x38
    ca54:	2a47      	cmp	r2, #71	; 0x47
    ca56:	d100      	bne.n	ca5a <_vfprintf_r+0x1006>
    ca58:	e1a1      	b.n	cd9e <_vfprintf_r+0x134a>
    ca5a:	2380      	movs	r3, #128	; 0x80
    ca5c:	005b      	lsls	r3, r3, #1
    ca5e:	4323      	orrs	r3, r4
    ca60:	9309      	str	r3, [sp, #36]	; 0x24
    ca62:	9b15      	ldr	r3, [sp, #84]	; 0x54
    ca64:	2b00      	cmp	r3, #0
    ca66:	da00      	bge.n	ca6a <_vfprintf_r+0x1016>
    ca68:	e1ed      	b.n	ce46 <_vfprintf_r+0x13f2>
    ca6a:	9a16      	ldr	r2, [sp, #88]	; 0x58
    ca6c:	9308      	str	r3, [sp, #32]
    ca6e:	2300      	movs	r3, #0
    ca70:	4691      	mov	r9, r2
    ca72:	9310      	str	r3, [sp, #64]	; 0x40
    ca74:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ca76:	2b66      	cmp	r3, #102	; 0x66
    ca78:	d100      	bne.n	ca7c <_vfprintf_r+0x1028>
    ca7a:	e1b8      	b.n	cdee <_vfprintf_r+0x139a>
    ca7c:	2b46      	cmp	r3, #70	; 0x46
    ca7e:	d100      	bne.n	ca82 <_vfprintf_r+0x102e>
    ca80:	e237      	b.n	cef2 <_vfprintf_r+0x149e>
    ca82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    ca84:	9806      	ldr	r0, [sp, #24]
    ca86:	3a45      	subs	r2, #69	; 0x45
    ca88:	0013      	movs	r3, r2
    ca8a:	4259      	negs	r1, r3
    ca8c:	4159      	adcs	r1, r3
    ca8e:	ab20      	add	r3, sp, #128	; 0x80
    ca90:	000d      	movs	r5, r1
    ca92:	9303      	str	r3, [sp, #12]
    ca94:	ab1f      	add	r3, sp, #124	; 0x7c
    ca96:	9302      	str	r3, [sp, #8]
    ca98:	2302      	movs	r3, #2
    ca9a:	aa23      	add	r2, sp, #140	; 0x8c
    ca9c:	4455      	add	r5, sl
    ca9e:	921b      	str	r2, [sp, #108]	; 0x6c
    caa0:	9204      	str	r2, [sp, #16]
    caa2:	9300      	str	r3, [sp, #0]
    caa4:	9501      	str	r5, [sp, #4]
    caa6:	9b08      	ldr	r3, [sp, #32]
    caa8:	464a      	mov	r2, r9
    caaa:	f000 fd25 	bl	d4f8 <_dtoa_r>
    caae:	9b12      	ldr	r3, [sp, #72]	; 0x48
    cab0:	9011      	str	r0, [sp, #68]	; 0x44
    cab2:	2b67      	cmp	r3, #103	; 0x67
    cab4:	d000      	beq.n	cab8 <_vfprintf_r+0x1064>
    cab6:	e20b      	b.n	ced0 <_vfprintf_r+0x147c>
    cab8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    caba:	4698      	mov	r8, r3
    cabc:	44a8      	add	r8, r5
    cabe:	07e3      	lsls	r3, r4, #31
    cac0:	d400      	bmi.n	cac4 <_vfprintf_r+0x1070>
    cac2:	e277      	b.n	cfb4 <_vfprintf_r+0x1560>
    cac4:	2300      	movs	r3, #0
    cac6:	2200      	movs	r2, #0
    cac8:	4648      	mov	r0, r9
    caca:	9908      	ldr	r1, [sp, #32]
    cacc:	f7fe fc94 	bl	b3f8 <__aeabi_dcmpeq>
    cad0:	4643      	mov	r3, r8
    cad2:	2800      	cmp	r0, #0
    cad4:	d10a      	bne.n	caec <_vfprintf_r+0x1098>
    cad6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    cad8:	4543      	cmp	r3, r8
    cada:	d207      	bcs.n	caec <_vfprintf_r+0x1098>
    cadc:	2130      	movs	r1, #48	; 0x30
    cade:	4640      	mov	r0, r8
    cae0:	1c5a      	adds	r2, r3, #1
    cae2:	9223      	str	r2, [sp, #140]	; 0x8c
    cae4:	7019      	strb	r1, [r3, #0]
    cae6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    cae8:	4298      	cmp	r0, r3
    caea:	d8f9      	bhi.n	cae0 <_vfprintf_r+0x108c>
    caec:	9a11      	ldr	r2, [sp, #68]	; 0x44
    caee:	1a9b      	subs	r3, r3, r2
    caf0:	9314      	str	r3, [sp, #80]	; 0x50
    caf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    caf4:	2b47      	cmp	r3, #71	; 0x47
    caf6:	d100      	bne.n	cafa <_vfprintf_r+0x10a6>
    caf8:	e0d0      	b.n	cc9c <_vfprintf_r+0x1248>
    cafa:	9b12      	ldr	r3, [sp, #72]	; 0x48
    cafc:	2b65      	cmp	r3, #101	; 0x65
    cafe:	dc00      	bgt.n	cb02 <_vfprintf_r+0x10ae>
    cb00:	e2d5      	b.n	d0ae <_vfprintf_r+0x165a>
    cb02:	9b12      	ldr	r3, [sp, #72]	; 0x48
    cb04:	2b66      	cmp	r3, #102	; 0x66
    cb06:	d100      	bne.n	cb0a <_vfprintf_r+0x10b6>
    cb08:	e1c6      	b.n	ce98 <_vfprintf_r+0x1444>
    cb0a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    cb0c:	9313      	str	r3, [sp, #76]	; 0x4c
    cb0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    cb10:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    cb12:	0019      	movs	r1, r3
    cb14:	4291      	cmp	r1, r2
    cb16:	dd00      	ble.n	cb1a <_vfprintf_r+0x10c6>
    cb18:	e1a0      	b.n	ce5c <_vfprintf_r+0x1408>
    cb1a:	07e3      	lsls	r3, r4, #31
    cb1c:	d500      	bpl.n	cb20 <_vfprintf_r+0x10cc>
    cb1e:	e242      	b.n	cfa6 <_vfprintf_r+0x1552>
    cb20:	43d3      	mvns	r3, r2
    cb22:	17db      	asrs	r3, r3, #31
    cb24:	0011      	movs	r1, r2
    cb26:	401a      	ands	r2, r3
    cb28:	2367      	movs	r3, #103	; 0x67
    cb2a:	9208      	str	r2, [sp, #32]
    cb2c:	910e      	str	r1, [sp, #56]	; 0x38
    cb2e:	9312      	str	r3, [sp, #72]	; 0x48
    cb30:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cb32:	2b00      	cmp	r3, #0
    cb34:	d000      	beq.n	cb38 <_vfprintf_r+0x10e4>
    cb36:	e0a9      	b.n	cc8c <_vfprintf_r+0x1238>
    cb38:	ab16      	add	r3, sp, #88	; 0x58
    cb3a:	7fdb      	ldrb	r3, [r3, #31]
    cb3c:	4698      	mov	r8, r3
    cb3e:	2300      	movs	r3, #0
    cb40:	469a      	mov	sl, r3
    cb42:	f7ff f8fc 	bl	bd3e <_vfprintf_r+0x2ea>
    cb46:	46cb      	mov	fp, r9
    cb48:	46a1      	mov	r9, r4
    cb4a:	0014      	movs	r4, r2
    cb4c:	e637      	b.n	c7be <_vfprintf_r+0xd6a>
    cb4e:	464b      	mov	r3, r9
    cb50:	6d98      	ldr	r0, [r3, #88]	; 0x58
    cb52:	f002 f8db 	bl	ed0c <__retarget_lock_release_recursive>
    cb56:	2301      	movs	r3, #1
    cb58:	425b      	negs	r3, r3
    cb5a:	930a      	str	r3, [sp, #40]	; 0x28
    cb5c:	f7ff f82b 	bl	bbb6 <_vfprintf_r+0x162>
    cb60:	9a09      	ldr	r2, [sp, #36]	; 0x24
    cb62:	07d2      	lsls	r2, r2, #31
    cb64:	d400      	bmi.n	cb68 <_vfprintf_r+0x1114>
    cb66:	e68f      	b.n	c888 <_vfprintf_r+0xe34>
    cb68:	e680      	b.n	c86c <_vfprintf_r+0xe18>
    cb6a:	3608      	adds	r6, #8
    cb6c:	e679      	b.n	c862 <_vfprintf_r+0xe0e>
    cb6e:	68bc      	ldr	r4, [r7, #8]
    cb70:	f7ff fb73 	bl	c25a <_vfprintf_r+0x806>
    cb74:	003a      	movs	r2, r7
    cb76:	4659      	mov	r1, fp
    cb78:	9806      	ldr	r0, [sp, #24]
    cb7a:	f003 fa47 	bl	1000c <__sprint_r>
    cb7e:	2800      	cmp	r0, #0
    cb80:	d000      	beq.n	cb84 <_vfprintf_r+0x1130>
    cb82:	e4f7      	b.n	c574 <_vfprintf_r+0xb20>
    cb84:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    cb86:	68bc      	ldr	r4, [r7, #8]
    cb88:	ae32      	add	r6, sp, #200	; 0xc8
    cb8a:	e67d      	b.n	c888 <_vfprintf_r+0xe34>
    cb8c:	2320      	movs	r3, #32
    cb8e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    cb90:	439a      	bics	r2, r3
    cb92:	3b1a      	subs	r3, #26
    cb94:	920e      	str	r2, [sp, #56]	; 0x38
    cb96:	469a      	mov	sl, r3
    cb98:	e75f      	b.n	ca5a <_vfprintf_r+0x1006>
    cb9a:	232d      	movs	r3, #45	; 0x2d
    cb9c:	aa16      	add	r2, sp, #88	; 0x58
    cb9e:	77d3      	strb	r3, [r2, #31]
    cba0:	4698      	mov	r8, r3
    cba2:	f7ff faa8 	bl	c0f6 <_vfprintf_r+0x6a2>
    cba6:	003a      	movs	r2, r7
    cba8:	4659      	mov	r1, fp
    cbaa:	9806      	ldr	r0, [sp, #24]
    cbac:	f003 fa2e 	bl	1000c <__sprint_r>
    cbb0:	2800      	cmp	r0, #0
    cbb2:	d000      	beq.n	cbb6 <_vfprintf_r+0x1162>
    cbb4:	e4de      	b.n	c574 <_vfprintf_r+0xb20>
    cbb6:	ae32      	add	r6, sp, #200	; 0xc8
    cbb8:	e419      	b.n	c3ee <_vfprintf_r+0x99a>
    cbba:	4be3      	ldr	r3, [pc, #908]	; (cf48 <_vfprintf_r+0x14f4>)
    cbbc:	3401      	adds	r4, #1
    cbbe:	6033      	str	r3, [r6, #0]
    cbc0:	2301      	movs	r3, #1
    cbc2:	6073      	str	r3, [r6, #4]
    cbc4:	687b      	ldr	r3, [r7, #4]
    cbc6:	60bc      	str	r4, [r7, #8]
    cbc8:	3301      	adds	r3, #1
    cbca:	607b      	str	r3, [r7, #4]
    cbcc:	2b07      	cmp	r3, #7
    cbce:	dd00      	ble.n	cbd2 <_vfprintf_r+0x117e>
    cbd0:	e155      	b.n	ce7e <_vfprintf_r+0x142a>
    cbd2:	3608      	adds	r6, #8
    cbd4:	2800      	cmp	r0, #0
    cbd6:	d107      	bne.n	cbe8 <_vfprintf_r+0x1194>
    cbd8:	9b14      	ldr	r3, [sp, #80]	; 0x50
    cbda:	2b00      	cmp	r3, #0
    cbdc:	d104      	bne.n	cbe8 <_vfprintf_r+0x1194>
    cbde:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cbe0:	07db      	lsls	r3, r3, #31
    cbe2:	d401      	bmi.n	cbe8 <_vfprintf_r+0x1194>
    cbe4:	f7ff fb39 	bl	c25a <_vfprintf_r+0x806>
    cbe8:	9b18      	ldr	r3, [sp, #96]	; 0x60
    cbea:	6033      	str	r3, [r6, #0]
    cbec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    cbee:	1919      	adds	r1, r3, r4
    cbf0:	6073      	str	r3, [r6, #4]
    cbf2:	687b      	ldr	r3, [r7, #4]
    cbf4:	60b9      	str	r1, [r7, #8]
    cbf6:	3301      	adds	r3, #1
    cbf8:	607b      	str	r3, [r7, #4]
    cbfa:	2b07      	cmp	r3, #7
    cbfc:	dd00      	ble.n	cc00 <_vfprintf_r+0x11ac>
    cbfe:	e1c4      	b.n	cf8a <_vfprintf_r+0x1536>
    cc00:	0032      	movs	r2, r6
    cc02:	3208      	adds	r2, #8
    cc04:	2800      	cmp	r0, #0
    cc06:	da00      	bge.n	cc0a <_vfprintf_r+0x11b6>
    cc08:	e195      	b.n	cf36 <_vfprintf_r+0x14e2>
    cc0a:	9811      	ldr	r0, [sp, #68]	; 0x44
    cc0c:	3301      	adds	r3, #1
    cc0e:	6010      	str	r0, [r2, #0]
    cc10:	9814      	ldr	r0, [sp, #80]	; 0x50
    cc12:	607b      	str	r3, [r7, #4]
    cc14:	1844      	adds	r4, r0, r1
    cc16:	6050      	str	r0, [r2, #4]
    cc18:	60bc      	str	r4, [r7, #8]
    cc1a:	2b07      	cmp	r3, #7
    cc1c:	dd01      	ble.n	cc22 <_vfprintf_r+0x11ce>
    cc1e:	f7ff fbc2 	bl	c3a6 <_vfprintf_r+0x952>
    cc22:	3208      	adds	r2, #8
    cc24:	0016      	movs	r6, r2
    cc26:	f7ff fb18 	bl	c25a <_vfprintf_r+0x806>
    cc2a:	990f      	ldr	r1, [sp, #60]	; 0x3c
    cc2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    cc2e:	680b      	ldr	r3, [r1, #0]
    cc30:	601a      	str	r2, [r3, #0]
    cc32:	17d2      	asrs	r2, r2, #31
    cc34:	605a      	str	r2, [r3, #4]
    cc36:	000b      	movs	r3, r1
    cc38:	3304      	adds	r3, #4
    cc3a:	930f      	str	r3, [sp, #60]	; 0x3c
    cc3c:	f7fe ff58 	bl	baf0 <_vfprintf_r+0x9c>
    cc40:	464b      	mov	r3, r9
    cc42:	9a07      	ldr	r2, [sp, #28]
    cc44:	431c      	orrs	r4, r3
    cc46:	3201      	adds	r2, #1
    cc48:	7813      	ldrb	r3, [r2, #0]
    cc4a:	9207      	str	r2, [sp, #28]
    cc4c:	f7fe ff8b 	bl	bb66 <_vfprintf_r+0x112>
    cc50:	003a      	movs	r2, r7
    cc52:	4659      	mov	r1, fp
    cc54:	9806      	ldr	r0, [sp, #24]
    cc56:	f003 f9d9 	bl	1000c <__sprint_r>
    cc5a:	2800      	cmp	r0, #0
    cc5c:	d000      	beq.n	cc60 <_vfprintf_r+0x120c>
    cc5e:	e489      	b.n	c574 <_vfprintf_r+0xb20>
    cc60:	68bc      	ldr	r4, [r7, #8]
    cc62:	ae32      	add	r6, sp, #200	; 0xc8
    cc64:	f7ff fbdc 	bl	c420 <_vfprintf_r+0x9cc>
    cc68:	4bb8      	ldr	r3, [pc, #736]	; (cf4c <_vfprintf_r+0x14f8>)
    cc6a:	9311      	str	r3, [sp, #68]	; 0x44
    cc6c:	f7ff fa4a 	bl	c104 <_vfprintf_r+0x6b0>
    cc70:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cc72:	ab32      	add	r3, sp, #200	; 0xc8
    cc74:	1a9b      	subs	r3, r3, r2
    cc76:	930e      	str	r3, [sp, #56]	; 0x38
    cc78:	f7ff f859 	bl	bd2e <_vfprintf_r+0x2da>
    cc7c:	9811      	ldr	r0, [sp, #68]	; 0x44
    cc7e:	f7fe feb7 	bl	b9f0 <strlen>
    cc82:	0002      	movs	r2, r0
    cc84:	900e      	str	r0, [sp, #56]	; 0x38
    cc86:	0003      	movs	r3, r0
    cc88:	f7ff f9a1 	bl	bfce <_vfprintf_r+0x57a>
    cc8c:	232d      	movs	r3, #45	; 0x2d
    cc8e:	aa16      	add	r2, sp, #88	; 0x58
    cc90:	77d3      	strb	r3, [r2, #31]
    cc92:	4698      	mov	r8, r3
    cc94:	2300      	movs	r3, #0
    cc96:	469a      	mov	sl, r3
    cc98:	f7ff f854 	bl	bd44 <_vfprintf_r+0x2f0>
    cc9c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    cc9e:	9313      	str	r3, [sp, #76]	; 0x4c
    cca0:	1cda      	adds	r2, r3, #3
    cca2:	db02      	blt.n	ccaa <_vfprintf_r+0x1256>
    cca4:	459a      	cmp	sl, r3
    cca6:	db00      	blt.n	ccaa <_vfprintf_r+0x1256>
    cca8:	e731      	b.n	cb0e <_vfprintf_r+0x10ba>
    ccaa:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ccac:	3b02      	subs	r3, #2
    ccae:	9312      	str	r3, [sp, #72]	; 0x48
    ccb0:	222c      	movs	r2, #44	; 0x2c
    ccb2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    ccb4:	2148      	movs	r1, #72	; 0x48
    ccb6:	1e5d      	subs	r5, r3, #1
    ccb8:	ab16      	add	r3, sp, #88	; 0x58
    ccba:	189b      	adds	r3, r3, r2
    ccbc:	466a      	mov	r2, sp
    ccbe:	1852      	adds	r2, r2, r1
    ccc0:	7812      	ldrb	r2, [r2, #0]
    ccc2:	951f      	str	r5, [sp, #124]	; 0x7c
    ccc4:	701a      	strb	r2, [r3, #0]
    ccc6:	2d00      	cmp	r5, #0
    ccc8:	da00      	bge.n	cccc <_vfprintf_r+0x1278>
    ccca:	e1cb      	b.n	d064 <_vfprintf_r+0x1610>
    cccc:	212d      	movs	r1, #45	; 0x2d
    ccce:	232b      	movs	r3, #43	; 0x2b
    ccd0:	aa16      	add	r2, sp, #88	; 0x58
    ccd2:	1852      	adds	r2, r2, r1
    ccd4:	7013      	strb	r3, [r2, #0]
    ccd6:	2d09      	cmp	r5, #9
    ccd8:	dc00      	bgt.n	ccdc <_vfprintf_r+0x1288>
    ccda:	e16d      	b.n	cfb8 <_vfprintf_r+0x1564>
    ccdc:	aa16      	add	r2, sp, #88	; 0x58
    ccde:	233b      	movs	r3, #59	; 0x3b
    cce0:	4694      	mov	ip, r2
    cce2:	4463      	add	r3, ip
    cce4:	469a      	mov	sl, r3
    cce6:	46b1      	mov	r9, r6
    cce8:	46a0      	mov	r8, r4
    ccea:	4656      	mov	r6, sl
    ccec:	e000      	b.n	ccf0 <_vfprintf_r+0x129c>
    ccee:	0026      	movs	r6, r4
    ccf0:	0028      	movs	r0, r5
    ccf2:	210a      	movs	r1, #10
    ccf4:	f7fc f97a 	bl	8fec <__aeabi_idivmod>
    ccf8:	1e74      	subs	r4, r6, #1
    ccfa:	3130      	adds	r1, #48	; 0x30
    ccfc:	7021      	strb	r1, [r4, #0]
    ccfe:	0028      	movs	r0, r5
    cd00:	210a      	movs	r1, #10
    cd02:	f7fc f88d 	bl	8e20 <__divsi3>
    cd06:	0005      	movs	r5, r0
    cd08:	2809      	cmp	r0, #9
    cd0a:	dcf0      	bgt.n	ccee <_vfprintf_r+0x129a>
    cd0c:	0023      	movs	r3, r4
    cd0e:	4644      	mov	r4, r8
    cd10:	46b0      	mov	r8, r6
    cd12:	464e      	mov	r6, r9
    cd14:	4699      	mov	r9, r3
    cd16:	0003      	movs	r3, r0
    cd18:	3330      	adds	r3, #48	; 0x30
    cd1a:	b2d8      	uxtb	r0, r3
    cd1c:	4643      	mov	r3, r8
    cd1e:	3b02      	subs	r3, #2
    cd20:	7018      	strb	r0, [r3, #0]
    cd22:	459a      	cmp	sl, r3
    cd24:	d800      	bhi.n	cd28 <_vfprintf_r+0x12d4>
    cd26:	e1f6      	b.n	d116 <_vfprintf_r+0x16c2>
    cd28:	4642      	mov	r2, r8
    cd2a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    cd2c:	4645      	mov	r5, r8
    cd2e:	1a99      	subs	r1, r3, r2
    cd30:	2301      	movs	r3, #1
    cd32:	3107      	adds	r1, #7
    cd34:	425b      	negs	r3, r3
    cd36:	e001      	b.n	cd3c <_vfprintf_r+0x12e8>
    cd38:	5ce8      	ldrb	r0, [r5, r3]
    cd3a:	3301      	adds	r3, #1
    cd3c:	aa21      	add	r2, sp, #132	; 0x84
    cd3e:	18d2      	adds	r2, r2, r3
    cd40:	70d0      	strb	r0, [r2, #3]
    cd42:	428b      	cmp	r3, r1
    cd44:	d1f8      	bne.n	cd38 <_vfprintf_r+0x12e4>
    cd46:	a916      	add	r1, sp, #88	; 0x58
    cd48:	468c      	mov	ip, r1
    cd4a:	222e      	movs	r2, #46	; 0x2e
    cd4c:	464b      	mov	r3, r9
    cd4e:	4462      	add	r2, ip
    cd50:	4694      	mov	ip, r2
    cd52:	1afb      	subs	r3, r7, r3
    cd54:	4463      	add	r3, ip
    cd56:	aa21      	add	r2, sp, #132	; 0x84
    cd58:	9914      	ldr	r1, [sp, #80]	; 0x50
    cd5a:	1a9b      	subs	r3, r3, r2
    cd5c:	469c      	mov	ip, r3
    cd5e:	000a      	movs	r2, r1
    cd60:	4462      	add	r2, ip
    cd62:	931a      	str	r3, [sp, #104]	; 0x68
    cd64:	920e      	str	r2, [sp, #56]	; 0x38
    cd66:	2901      	cmp	r1, #1
    cd68:	dc00      	bgt.n	cd6c <_vfprintf_r+0x1318>
    cd6a:	e170      	b.n	d04e <_vfprintf_r+0x15fa>
    cd6c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    cd6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    cd70:	4694      	mov	ip, r2
    cd72:	4463      	add	r3, ip
    cd74:	001a      	movs	r2, r3
    cd76:	930e      	str	r3, [sp, #56]	; 0x38
    cd78:	43db      	mvns	r3, r3
    cd7a:	17db      	asrs	r3, r3, #31
    cd7c:	401a      	ands	r2, r3
    cd7e:	2300      	movs	r3, #0
    cd80:	9208      	str	r2, [sp, #32]
    cd82:	9313      	str	r3, [sp, #76]	; 0x4c
    cd84:	e6d4      	b.n	cb30 <_vfprintf_r+0x10dc>
    cd86:	003a      	movs	r2, r7
    cd88:	4659      	mov	r1, fp
    cd8a:	9806      	ldr	r0, [sp, #24]
    cd8c:	f003 f93e 	bl	1000c <__sprint_r>
    cd90:	2800      	cmp	r0, #0
    cd92:	d001      	beq.n	cd98 <_vfprintf_r+0x1344>
    cd94:	f7ff fbee 	bl	c574 <_vfprintf_r+0xb20>
    cd98:	68bc      	ldr	r4, [r7, #8]
    cd9a:	ae32      	add	r6, sp, #200	; 0xc8
    cd9c:	e46a      	b.n	c674 <_vfprintf_r+0xc20>
    cd9e:	4653      	mov	r3, sl
    cda0:	2b00      	cmp	r3, #0
    cda2:	d000      	beq.n	cda6 <_vfprintf_r+0x1352>
    cda4:	e659      	b.n	ca5a <_vfprintf_r+0x1006>
    cda6:	3301      	adds	r3, #1
    cda8:	469a      	mov	sl, r3
    cdaa:	e656      	b.n	ca5a <_vfprintf_r+0x1006>
    cdac:	4653      	mov	r3, sl
    cdae:	9308      	str	r3, [sp, #32]
    cdb0:	2b06      	cmp	r3, #6
    cdb2:	d901      	bls.n	cdb8 <_vfprintf_r+0x1364>
    cdb4:	2306      	movs	r3, #6
    cdb6:	9308      	str	r3, [sp, #32]
    cdb8:	9b08      	ldr	r3, [sp, #32]
    cdba:	950f      	str	r5, [sp, #60]	; 0x3c
    cdbc:	930e      	str	r3, [sp, #56]	; 0x38
    cdbe:	2300      	movs	r3, #0
    cdc0:	4698      	mov	r8, r3
    cdc2:	469a      	mov	sl, r3
    cdc4:	9313      	str	r3, [sp, #76]	; 0x4c
    cdc6:	4b62      	ldr	r3, [pc, #392]	; (cf50 <_vfprintf_r+0x14fc>)
    cdc8:	9409      	str	r4, [sp, #36]	; 0x24
    cdca:	9311      	str	r3, [sp, #68]	; 0x44
    cdcc:	f7fe ffbd 	bl	bd4a <_vfprintf_r+0x2f6>
    cdd0:	003a      	movs	r2, r7
    cdd2:	4659      	mov	r1, fp
    cdd4:	9806      	ldr	r0, [sp, #24]
    cdd6:	f003 f919 	bl	1000c <__sprint_r>
    cdda:	2800      	cmp	r0, #0
    cddc:	d001      	beq.n	cde2 <_vfprintf_r+0x138e>
    cdde:	f7ff fbc9 	bl	c574 <_vfprintf_r+0xb20>
    cde2:	9b14      	ldr	r3, [sp, #80]	; 0x50
    cde4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    cde6:	68bc      	ldr	r4, [r7, #8]
    cde8:	1a9b      	subs	r3, r3, r2
    cdea:	ae32      	add	r6, sp, #200	; 0xc8
    cdec:	e567      	b.n	c8be <_vfprintf_r+0xe6a>
    cdee:	ab23      	add	r3, sp, #140	; 0x8c
    cdf0:	931b      	str	r3, [sp, #108]	; 0x6c
    cdf2:	9304      	str	r3, [sp, #16]
    cdf4:	ab20      	add	r3, sp, #128	; 0x80
    cdf6:	9303      	str	r3, [sp, #12]
    cdf8:	ab1f      	add	r3, sp, #124	; 0x7c
    cdfa:	9302      	str	r3, [sp, #8]
    cdfc:	4653      	mov	r3, sl
    cdfe:	9301      	str	r3, [sp, #4]
    ce00:	2303      	movs	r3, #3
    ce02:	464a      	mov	r2, r9
    ce04:	9300      	str	r3, [sp, #0]
    ce06:	9806      	ldr	r0, [sp, #24]
    ce08:	9b08      	ldr	r3, [sp, #32]
    ce0a:	f000 fb75 	bl	d4f8 <_dtoa_r>
    ce0e:	0003      	movs	r3, r0
    ce10:	4453      	add	r3, sl
    ce12:	4698      	mov	r8, r3
    ce14:	4655      	mov	r5, sl
    ce16:	9011      	str	r0, [sp, #68]	; 0x44
    ce18:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ce1a:	781b      	ldrb	r3, [r3, #0]
    ce1c:	2b30      	cmp	r3, #48	; 0x30
    ce1e:	d002      	beq.n	ce26 <_vfprintf_r+0x13d2>
    ce20:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    ce22:	4498      	add	r8, r3
    ce24:	e64e      	b.n	cac4 <_vfprintf_r+0x1070>
    ce26:	2200      	movs	r2, #0
    ce28:	2300      	movs	r3, #0
    ce2a:	4648      	mov	r0, r9
    ce2c:	9908      	ldr	r1, [sp, #32]
    ce2e:	f7fe fae3 	bl	b3f8 <__aeabi_dcmpeq>
    ce32:	2800      	cmp	r0, #0
    ce34:	d1f4      	bne.n	ce20 <_vfprintf_r+0x13cc>
    ce36:	2301      	movs	r3, #1
    ce38:	1b5b      	subs	r3, r3, r5
    ce3a:	931f      	str	r3, [sp, #124]	; 0x7c
    ce3c:	4498      	add	r8, r3
    ce3e:	e641      	b.n	cac4 <_vfprintf_r+0x1070>
    ce40:	46c1      	mov	r9, r8
    ce42:	f7ff fb1f 	bl	c484 <_vfprintf_r+0xa30>
    ce46:	2280      	movs	r2, #128	; 0x80
    ce48:	0612      	lsls	r2, r2, #24
    ce4a:	4694      	mov	ip, r2
    ce4c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    ce4e:	4699      	mov	r9, r3
    ce50:	9b15      	ldr	r3, [sp, #84]	; 0x54
    ce52:	4463      	add	r3, ip
    ce54:	9308      	str	r3, [sp, #32]
    ce56:	232d      	movs	r3, #45	; 0x2d
    ce58:	9310      	str	r3, [sp, #64]	; 0x40
    ce5a:	e60b      	b.n	ca74 <_vfprintf_r+0x1020>
    ce5c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    ce5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    ce60:	4694      	mov	ip, r2
    ce62:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    ce64:	4463      	add	r3, ip
    ce66:	930e      	str	r3, [sp, #56]	; 0x38
    ce68:	2a00      	cmp	r2, #0
    ce6a:	dc00      	bgt.n	ce6e <_vfprintf_r+0x141a>
    ce6c:	e0e3      	b.n	d036 <_vfprintf_r+0x15e2>
    ce6e:	001a      	movs	r2, r3
    ce70:	43db      	mvns	r3, r3
    ce72:	17db      	asrs	r3, r3, #31
    ce74:	401a      	ands	r2, r3
    ce76:	2367      	movs	r3, #103	; 0x67
    ce78:	9208      	str	r2, [sp, #32]
    ce7a:	9312      	str	r3, [sp, #72]	; 0x48
    ce7c:	e658      	b.n	cb30 <_vfprintf_r+0x10dc>
    ce7e:	003a      	movs	r2, r7
    ce80:	4659      	mov	r1, fp
    ce82:	9806      	ldr	r0, [sp, #24]
    ce84:	f003 f8c2 	bl	1000c <__sprint_r>
    ce88:	2800      	cmp	r0, #0
    ce8a:	d001      	beq.n	ce90 <_vfprintf_r+0x143c>
    ce8c:	f7ff fb72 	bl	c574 <_vfprintf_r+0xb20>
    ce90:	981f      	ldr	r0, [sp, #124]	; 0x7c
    ce92:	68bc      	ldr	r4, [r7, #8]
    ce94:	ae32      	add	r6, sp, #200	; 0xc8
    ce96:	e69d      	b.n	cbd4 <_vfprintf_r+0x1180>
    ce98:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    ce9a:	9313      	str	r3, [sp, #76]	; 0x4c
    ce9c:	2b00      	cmp	r3, #0
    ce9e:	dc00      	bgt.n	cea2 <_vfprintf_r+0x144e>
    cea0:	e0f2      	b.n	d088 <_vfprintf_r+0x1634>
    cea2:	4652      	mov	r2, sl
    cea4:	2a00      	cmp	r2, #0
    cea6:	d000      	beq.n	ceaa <_vfprintf_r+0x1456>
    cea8:	e0a0      	b.n	cfec <_vfprintf_r+0x1598>
    ceaa:	07e2      	lsls	r2, r4, #31
    ceac:	d500      	bpl.n	ceb0 <_vfprintf_r+0x145c>
    ceae:	e09d      	b.n	cfec <_vfprintf_r+0x1598>
    ceb0:	9308      	str	r3, [sp, #32]
    ceb2:	930e      	str	r3, [sp, #56]	; 0x38
    ceb4:	e63c      	b.n	cb30 <_vfprintf_r+0x10dc>
    ceb6:	ab16      	add	r3, sp, #88	; 0x58
    ceb8:	7fdb      	ldrb	r3, [r3, #31]
    ceba:	950f      	str	r5, [sp, #60]	; 0x3c
    cebc:	4698      	mov	r8, r3
    cebe:	4653      	mov	r3, sl
    cec0:	9308      	str	r3, [sp, #32]
    cec2:	930e      	str	r3, [sp, #56]	; 0x38
    cec4:	2300      	movs	r3, #0
    cec6:	9409      	str	r4, [sp, #36]	; 0x24
    cec8:	469a      	mov	sl, r3
    ceca:	9313      	str	r3, [sp, #76]	; 0x4c
    cecc:	f7fe ff37 	bl	bd3e <_vfprintf_r+0x2ea>
    ced0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ced2:	4698      	mov	r8, r3
    ced4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ced6:	44a8      	add	r8, r5
    ced8:	2b47      	cmp	r3, #71	; 0x47
    ceda:	d000      	beq.n	cede <_vfprintf_r+0x148a>
    cedc:	e5f2      	b.n	cac4 <_vfprintf_r+0x1070>
    cede:	07e3      	lsls	r3, r4, #31
    cee0:	d400      	bmi.n	cee4 <_vfprintf_r+0x1490>
    cee2:	e0dc      	b.n	d09e <_vfprintf_r+0x164a>
    cee4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cee6:	4698      	mov	r8, r3
    cee8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ceea:	44a8      	add	r8, r5
    ceec:	2b46      	cmp	r3, #70	; 0x46
    ceee:	d093      	beq.n	ce18 <_vfprintf_r+0x13c4>
    cef0:	e5e8      	b.n	cac4 <_vfprintf_r+0x1070>
    cef2:	ab23      	add	r3, sp, #140	; 0x8c
    cef4:	931b      	str	r3, [sp, #108]	; 0x6c
    cef6:	9304      	str	r3, [sp, #16]
    cef8:	ab20      	add	r3, sp, #128	; 0x80
    cefa:	9303      	str	r3, [sp, #12]
    cefc:	ab1f      	add	r3, sp, #124	; 0x7c
    cefe:	9302      	str	r3, [sp, #8]
    cf00:	4653      	mov	r3, sl
    cf02:	9301      	str	r3, [sp, #4]
    cf04:	2303      	movs	r3, #3
    cf06:	464a      	mov	r2, r9
    cf08:	9300      	str	r3, [sp, #0]
    cf0a:	9806      	ldr	r0, [sp, #24]
    cf0c:	9b08      	ldr	r3, [sp, #32]
    cf0e:	f000 faf3 	bl	d4f8 <_dtoa_r>
    cf12:	4655      	mov	r5, sl
    cf14:	9011      	str	r0, [sp, #68]	; 0x44
    cf16:	e7e5      	b.n	cee4 <_vfprintf_r+0x1490>
    cf18:	003a      	movs	r2, r7
    cf1a:	4659      	mov	r1, fp
    cf1c:	9806      	ldr	r0, [sp, #24]
    cf1e:	f003 f875 	bl	1000c <__sprint_r>
    cf22:	2800      	cmp	r0, #0
    cf24:	d101      	bne.n	cf2a <_vfprintf_r+0x14d6>
    cf26:	f7ff faab 	bl	c480 <_vfprintf_r+0xa2c>
    cf2a:	f7ff faab 	bl	c484 <_vfprintf_r+0xa30>
    cf2e:	4642      	mov	r2, r8
    cf30:	9207      	str	r2, [sp, #28]
    cf32:	f7fe fe1b 	bl	bb6c <_vfprintf_r+0x118>
    cf36:	4244      	negs	r4, r0
    cf38:	3010      	adds	r0, #16
    cf3a:	db00      	blt.n	cf3e <_vfprintf_r+0x14ea>
    cf3c:	e0d8      	b.n	d0f0 <_vfprintf_r+0x169c>
    cf3e:	4805      	ldr	r0, [pc, #20]	; (cf54 <_vfprintf_r+0x1500>)
    cf40:	2610      	movs	r6, #16
    cf42:	0005      	movs	r5, r0
    cf44:	e00c      	b.n	cf60 <_vfprintf_r+0x150c>
    cf46:	46c0      	nop			; (mov r8, r8)
    cf48:	00011174 	.word	0x00011174
    cf4c:	00011138 	.word	0x00011138
    cf50:	0001116c 	.word	0x0001116c
    cf54:	00011188 	.word	0x00011188
    cf58:	3208      	adds	r2, #8
    cf5a:	3c10      	subs	r4, #16
    cf5c:	2c10      	cmp	r4, #16
    cf5e:	dd51      	ble.n	d004 <_vfprintf_r+0x15b0>
    cf60:	3110      	adds	r1, #16
    cf62:	3301      	adds	r3, #1
    cf64:	6015      	str	r5, [r2, #0]
    cf66:	6056      	str	r6, [r2, #4]
    cf68:	60b9      	str	r1, [r7, #8]
    cf6a:	607b      	str	r3, [r7, #4]
    cf6c:	2b07      	cmp	r3, #7
    cf6e:	ddf3      	ble.n	cf58 <_vfprintf_r+0x1504>
    cf70:	003a      	movs	r2, r7
    cf72:	4659      	mov	r1, fp
    cf74:	9806      	ldr	r0, [sp, #24]
    cf76:	f003 f849 	bl	1000c <__sprint_r>
    cf7a:	2800      	cmp	r0, #0
    cf7c:	d001      	beq.n	cf82 <_vfprintf_r+0x152e>
    cf7e:	f7ff faf9 	bl	c574 <_vfprintf_r+0xb20>
    cf82:	68b9      	ldr	r1, [r7, #8]
    cf84:	687b      	ldr	r3, [r7, #4]
    cf86:	aa32      	add	r2, sp, #200	; 0xc8
    cf88:	e7e7      	b.n	cf5a <_vfprintf_r+0x1506>
    cf8a:	003a      	movs	r2, r7
    cf8c:	4659      	mov	r1, fp
    cf8e:	9806      	ldr	r0, [sp, #24]
    cf90:	f003 f83c 	bl	1000c <__sprint_r>
    cf94:	2800      	cmp	r0, #0
    cf96:	d001      	beq.n	cf9c <_vfprintf_r+0x1548>
    cf98:	f7ff faec 	bl	c574 <_vfprintf_r+0xb20>
    cf9c:	981f      	ldr	r0, [sp, #124]	; 0x7c
    cf9e:	68b9      	ldr	r1, [r7, #8]
    cfa0:	687b      	ldr	r3, [r7, #4]
    cfa2:	aa32      	add	r2, sp, #200	; 0xc8
    cfa4:	e62e      	b.n	cc04 <_vfprintf_r+0x11b0>
    cfa6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    cfa8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    cfaa:	4694      	mov	ip, r2
    cfac:	4463      	add	r3, ip
    cfae:	001a      	movs	r2, r3
    cfb0:	930e      	str	r3, [sp, #56]	; 0x38
    cfb2:	e75d      	b.n	ce70 <_vfprintf_r+0x141c>
    cfb4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    cfb6:	e599      	b.n	caec <_vfprintf_r+0x1098>
    cfb8:	212e      	movs	r1, #46	; 0x2e
    cfba:	2330      	movs	r3, #48	; 0x30
    cfbc:	aa16      	add	r2, sp, #88	; 0x58
    cfbe:	1852      	adds	r2, r2, r1
    cfc0:	7013      	strb	r3, [r2, #0]
    cfc2:	002b      	movs	r3, r5
    cfc4:	aa16      	add	r2, sp, #88	; 0x58
    cfc6:	3101      	adds	r1, #1
    cfc8:	3330      	adds	r3, #48	; 0x30
    cfca:	1852      	adds	r2, r2, r1
    cfcc:	7013      	strb	r3, [r2, #0]
    cfce:	ab22      	add	r3, sp, #136	; 0x88
    cfd0:	e6c1      	b.n	cd56 <_vfprintf_r+0x1302>
    cfd2:	9b15      	ldr	r3, [sp, #84]	; 0x54
    cfd4:	2b00      	cmp	r3, #0
    cfd6:	db52      	blt.n	d07e <_vfprintf_r+0x162a>
    cfd8:	ab16      	add	r3, sp, #88	; 0x58
    cfda:	7fdb      	ldrb	r3, [r3, #31]
    cfdc:	4698      	mov	r8, r3
    cfde:	9b12      	ldr	r3, [sp, #72]	; 0x48
    cfe0:	2b47      	cmp	r3, #71	; 0x47
    cfe2:	dc48      	bgt.n	d076 <_vfprintf_r+0x1622>
    cfe4:	4b4e      	ldr	r3, [pc, #312]	; (d120 <_vfprintf_r+0x16cc>)
    cfe6:	9311      	str	r3, [sp, #68]	; 0x44
    cfe8:	f7ff f88c 	bl	c104 <_vfprintf_r+0x6b0>
    cfec:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    cfee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    cff0:	4694      	mov	ip, r2
    cff2:	4463      	add	r3, ip
    cff4:	4453      	add	r3, sl
    cff6:	001a      	movs	r2, r3
    cff8:	930e      	str	r3, [sp, #56]	; 0x38
    cffa:	43db      	mvns	r3, r3
    cffc:	17db      	asrs	r3, r3, #31
    cffe:	401a      	ands	r2, r3
    d000:	9208      	str	r2, [sp, #32]
    d002:	e595      	b.n	cb30 <_vfprintf_r+0x10dc>
    d004:	46a9      	mov	r9, r5
    d006:	4648      	mov	r0, r9
    d008:	1909      	adds	r1, r1, r4
    d00a:	3301      	adds	r3, #1
    d00c:	6010      	str	r0, [r2, #0]
    d00e:	6054      	str	r4, [r2, #4]
    d010:	60b9      	str	r1, [r7, #8]
    d012:	3208      	adds	r2, #8
    d014:	607b      	str	r3, [r7, #4]
    d016:	2b07      	cmp	r3, #7
    d018:	dc00      	bgt.n	d01c <_vfprintf_r+0x15c8>
    d01a:	e5f6      	b.n	cc0a <_vfprintf_r+0x11b6>
    d01c:	003a      	movs	r2, r7
    d01e:	4659      	mov	r1, fp
    d020:	9806      	ldr	r0, [sp, #24]
    d022:	f002 fff3 	bl	1000c <__sprint_r>
    d026:	2800      	cmp	r0, #0
    d028:	d001      	beq.n	d02e <_vfprintf_r+0x15da>
    d02a:	f7ff faa3 	bl	c574 <_vfprintf_r+0xb20>
    d02e:	68b9      	ldr	r1, [r7, #8]
    d030:	687b      	ldr	r3, [r7, #4]
    d032:	aa32      	add	r2, sp, #200	; 0xc8
    d034:	e5e9      	b.n	cc0a <_vfprintf_r+0x11b6>
    d036:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d038:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    d03a:	1a98      	subs	r0, r3, r2
    d03c:	1c43      	adds	r3, r0, #1
    d03e:	001a      	movs	r2, r3
    d040:	930e      	str	r3, [sp, #56]	; 0x38
    d042:	e715      	b.n	ce70 <_vfprintf_r+0x141c>
    d044:	4a37      	ldr	r2, [pc, #220]	; (d124 <_vfprintf_r+0x16d0>)
    d046:	687b      	ldr	r3, [r7, #4]
    d048:	4691      	mov	r9, r2
    d04a:	f7ff fbf5 	bl	c838 <_vfprintf_r+0xde4>
    d04e:	2301      	movs	r3, #1
    d050:	4023      	ands	r3, r4
    d052:	9313      	str	r3, [sp, #76]	; 0x4c
    d054:	d000      	beq.n	d058 <_vfprintf_r+0x1604>
    d056:	e689      	b.n	cd6c <_vfprintf_r+0x1318>
    d058:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    d05a:	43d3      	mvns	r3, r2
    d05c:	17db      	asrs	r3, r3, #31
    d05e:	401a      	ands	r2, r3
    d060:	9208      	str	r2, [sp, #32]
    d062:	e565      	b.n	cb30 <_vfprintf_r+0x10dc>
    d064:	2301      	movs	r3, #1
    d066:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    d068:	391b      	subs	r1, #27
    d06a:	1a9d      	subs	r5, r3, r2
    d06c:	aa16      	add	r2, sp, #88	; 0x58
    d06e:	332c      	adds	r3, #44	; 0x2c
    d070:	1852      	adds	r2, r2, r1
    d072:	7013      	strb	r3, [r2, #0]
    d074:	e62f      	b.n	ccd6 <_vfprintf_r+0x1282>
    d076:	4b2c      	ldr	r3, [pc, #176]	; (d128 <_vfprintf_r+0x16d4>)
    d078:	9311      	str	r3, [sp, #68]	; 0x44
    d07a:	f7ff f843 	bl	c104 <_vfprintf_r+0x6b0>
    d07e:	232d      	movs	r3, #45	; 0x2d
    d080:	aa16      	add	r2, sp, #88	; 0x58
    d082:	77d3      	strb	r3, [r2, #31]
    d084:	4698      	mov	r8, r3
    d086:	e7aa      	b.n	cfde <_vfprintf_r+0x158a>
    d088:	4653      	mov	r3, sl
    d08a:	2b00      	cmp	r3, #0
    d08c:	d101      	bne.n	d092 <_vfprintf_r+0x163e>
    d08e:	07e3      	lsls	r3, r4, #31
    d090:	d503      	bpl.n	d09a <_vfprintf_r+0x1646>
    d092:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    d094:	1c58      	adds	r0, r3, #1
    d096:	0003      	movs	r3, r0
    d098:	e7ac      	b.n	cff4 <_vfprintf_r+0x15a0>
    d09a:	2301      	movs	r3, #1
    d09c:	e708      	b.n	ceb0 <_vfprintf_r+0x145c>
    d09e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    d0a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d0a2:	1a9b      	subs	r3, r3, r2
    d0a4:	9314      	str	r3, [sp, #80]	; 0x50
    d0a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d0a8:	2b47      	cmp	r3, #71	; 0x47
    d0aa:	d100      	bne.n	d0ae <_vfprintf_r+0x165a>
    d0ac:	e5f6      	b.n	cc9c <_vfprintf_r+0x1248>
    d0ae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    d0b0:	9313      	str	r3, [sp, #76]	; 0x4c
    d0b2:	e5fd      	b.n	ccb0 <_vfprintf_r+0x125c>
    d0b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d0b6:	1d1d      	adds	r5, r3, #4
    d0b8:	681b      	ldr	r3, [r3, #0]
    d0ba:	46a8      	mov	r8, r5
    d0bc:	469a      	mov	sl, r3
    d0be:	2b00      	cmp	r3, #0
    d0c0:	db0a      	blt.n	d0d8 <_vfprintf_r+0x1684>
    d0c2:	4645      	mov	r5, r8
    d0c4:	9b07      	ldr	r3, [sp, #28]
    d0c6:	950f      	str	r5, [sp, #60]	; 0x3c
    d0c8:	785b      	ldrb	r3, [r3, #1]
    d0ca:	9207      	str	r2, [sp, #28]
    d0cc:	f7fe fd4b 	bl	bb66 <_vfprintf_r+0x112>
    d0d0:	ab16      	add	r3, sp, #88	; 0x58
    d0d2:	77d8      	strb	r0, [r3, #31]
    d0d4:	f7ff f830 	bl	c138 <_vfprintf_r+0x6e4>
    d0d8:	2301      	movs	r3, #1
    d0da:	425b      	negs	r3, r3
    d0dc:	469a      	mov	sl, r3
    d0de:	e7f0      	b.n	d0c2 <_vfprintf_r+0x166e>
    d0e0:	ab16      	add	r3, sp, #88	; 0x58
    d0e2:	77d8      	strb	r0, [r3, #31]
    d0e4:	f7fe ff27 	bl	bf36 <_vfprintf_r+0x4e2>
    d0e8:	ab16      	add	r3, sp, #88	; 0x58
    d0ea:	77d8      	strb	r0, [r3, #31]
    d0ec:	f7fe fdce 	bl	bc8c <_vfprintf_r+0x238>
    d0f0:	480c      	ldr	r0, [pc, #48]	; (d124 <_vfprintf_r+0x16d0>)
    d0f2:	4681      	mov	r9, r0
    d0f4:	e787      	b.n	d006 <_vfprintf_r+0x15b2>
    d0f6:	ab16      	add	r3, sp, #88	; 0x58
    d0f8:	77d8      	strb	r0, [r3, #31]
    d0fa:	f7ff f829 	bl	c150 <_vfprintf_r+0x6fc>
    d0fe:	ab16      	add	r3, sp, #88	; 0x58
    d100:	77d8      	strb	r0, [r3, #31]
    d102:	f7fe ffc3 	bl	c08c <_vfprintf_r+0x638>
    d106:	ab16      	add	r3, sp, #88	; 0x58
    d108:	77d8      	strb	r0, [r3, #31]
    d10a:	f7fe ffa5 	bl	c058 <_vfprintf_r+0x604>
    d10e:	ab16      	add	r3, sp, #88	; 0x58
    d110:	77d8      	strb	r0, [r3, #31]
    d112:	f7fe feaf 	bl	be74 <_vfprintf_r+0x420>
    d116:	aa16      	add	r2, sp, #88	; 0x58
    d118:	232e      	movs	r3, #46	; 0x2e
    d11a:	4694      	mov	ip, r2
    d11c:	4463      	add	r3, ip
    d11e:	e61a      	b.n	cd56 <_vfprintf_r+0x1302>
    d120:	0001113c 	.word	0x0001113c
    d124:	00011188 	.word	0x00011188
    d128:	00011140 	.word	0x00011140

0000d12c <__sbprintf>:
    d12c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d12e:	0015      	movs	r5, r2
    d130:	2202      	movs	r2, #2
    d132:	4c1e      	ldr	r4, [pc, #120]	; (d1ac <__sbprintf+0x80>)
    d134:	001f      	movs	r7, r3
    d136:	898b      	ldrh	r3, [r1, #12]
    d138:	44a5      	add	sp, r4
    d13a:	4393      	bics	r3, r2
    d13c:	466a      	mov	r2, sp
    d13e:	8193      	strh	r3, [r2, #12]
    d140:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    d142:	0006      	movs	r6, r0
    d144:	9319      	str	r3, [sp, #100]	; 0x64
    d146:	89cb      	ldrh	r3, [r1, #14]
    d148:	a816      	add	r0, sp, #88	; 0x58
    d14a:	81d3      	strh	r3, [r2, #14]
    d14c:	69cb      	ldr	r3, [r1, #28]
    d14e:	000c      	movs	r4, r1
    d150:	9307      	str	r3, [sp, #28]
    d152:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    d154:	9309      	str	r3, [sp, #36]	; 0x24
    d156:	ab1a      	add	r3, sp, #104	; 0x68
    d158:	9300      	str	r3, [sp, #0]
    d15a:	9304      	str	r3, [sp, #16]
    d15c:	2380      	movs	r3, #128	; 0x80
    d15e:	00db      	lsls	r3, r3, #3
    d160:	9302      	str	r3, [sp, #8]
    d162:	9305      	str	r3, [sp, #20]
    d164:	2300      	movs	r3, #0
    d166:	9306      	str	r3, [sp, #24]
    d168:	f001 fdca 	bl	ed00 <__retarget_lock_init_recursive>
    d16c:	002a      	movs	r2, r5
    d16e:	003b      	movs	r3, r7
    d170:	4669      	mov	r1, sp
    d172:	0030      	movs	r0, r6
    d174:	f7fe fc6e 	bl	ba54 <_vfprintf_r>
    d178:	1e05      	subs	r5, r0, #0
    d17a:	db05      	blt.n	d188 <__sbprintf+0x5c>
    d17c:	4669      	mov	r1, sp
    d17e:	0030      	movs	r0, r6
    d180:	f001 fa26 	bl	e5d0 <_fflush_r>
    d184:	2800      	cmp	r0, #0
    d186:	d10e      	bne.n	d1a6 <__sbprintf+0x7a>
    d188:	466b      	mov	r3, sp
    d18a:	899b      	ldrh	r3, [r3, #12]
    d18c:	065b      	lsls	r3, r3, #25
    d18e:	d503      	bpl.n	d198 <__sbprintf+0x6c>
    d190:	2240      	movs	r2, #64	; 0x40
    d192:	89a3      	ldrh	r3, [r4, #12]
    d194:	4313      	orrs	r3, r2
    d196:	81a3      	strh	r3, [r4, #12]
    d198:	9816      	ldr	r0, [sp, #88]	; 0x58
    d19a:	f001 fdb3 	bl	ed04 <__retarget_lock_close_recursive>
    d19e:	0028      	movs	r0, r5
    d1a0:	4b03      	ldr	r3, [pc, #12]	; (d1b0 <__sbprintf+0x84>)
    d1a2:	449d      	add	sp, r3
    d1a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d1a6:	2501      	movs	r5, #1
    d1a8:	426d      	negs	r5, r5
    d1aa:	e7ed      	b.n	d188 <__sbprintf+0x5c>
    d1ac:	fffffb94 	.word	0xfffffb94
    d1b0:	0000046c 	.word	0x0000046c

0000d1b4 <__swsetup_r>:
    d1b4:	4b33      	ldr	r3, [pc, #204]	; (d284 <__swsetup_r+0xd0>)
    d1b6:	b570      	push	{r4, r5, r6, lr}
    d1b8:	0005      	movs	r5, r0
    d1ba:	6818      	ldr	r0, [r3, #0]
    d1bc:	000c      	movs	r4, r1
    d1be:	2800      	cmp	r0, #0
    d1c0:	d002      	beq.n	d1c8 <__swsetup_r+0x14>
    d1c2:	6b83      	ldr	r3, [r0, #56]	; 0x38
    d1c4:	2b00      	cmp	r3, #0
    d1c6:	d03c      	beq.n	d242 <__swsetup_r+0x8e>
    d1c8:	230c      	movs	r3, #12
    d1ca:	5ee2      	ldrsh	r2, [r4, r3]
    d1cc:	b293      	uxth	r3, r2
    d1ce:	0719      	lsls	r1, r3, #28
    d1d0:	d50d      	bpl.n	d1ee <__swsetup_r+0x3a>
    d1d2:	6921      	ldr	r1, [r4, #16]
    d1d4:	2900      	cmp	r1, #0
    d1d6:	d015      	beq.n	d204 <__swsetup_r+0x50>
    d1d8:	07da      	lsls	r2, r3, #31
    d1da:	d521      	bpl.n	d220 <__swsetup_r+0x6c>
    d1dc:	2300      	movs	r3, #0
    d1de:	60a3      	str	r3, [r4, #8]
    d1e0:	6963      	ldr	r3, [r4, #20]
    d1e2:	2000      	movs	r0, #0
    d1e4:	425b      	negs	r3, r3
    d1e6:	61a3      	str	r3, [r4, #24]
    d1e8:	2900      	cmp	r1, #0
    d1ea:	d021      	beq.n	d230 <__swsetup_r+0x7c>
    d1ec:	bd70      	pop	{r4, r5, r6, pc}
    d1ee:	06d9      	lsls	r1, r3, #27
    d1f0:	d53f      	bpl.n	d272 <__swsetup_r+0xbe>
    d1f2:	075b      	lsls	r3, r3, #29
    d1f4:	d428      	bmi.n	d248 <__swsetup_r+0x94>
    d1f6:	6921      	ldr	r1, [r4, #16]
    d1f8:	2308      	movs	r3, #8
    d1fa:	4313      	orrs	r3, r2
    d1fc:	81a3      	strh	r3, [r4, #12]
    d1fe:	b29b      	uxth	r3, r3
    d200:	2900      	cmp	r1, #0
    d202:	d1e9      	bne.n	d1d8 <__swsetup_r+0x24>
    d204:	22a0      	movs	r2, #160	; 0xa0
    d206:	2080      	movs	r0, #128	; 0x80
    d208:	0092      	lsls	r2, r2, #2
    d20a:	0080      	lsls	r0, r0, #2
    d20c:	401a      	ands	r2, r3
    d20e:	4282      	cmp	r2, r0
    d210:	d0e2      	beq.n	d1d8 <__swsetup_r+0x24>
    d212:	0021      	movs	r1, r4
    d214:	0028      	movs	r0, r5
    d216:	f001 fdab 	bl	ed70 <__smakebuf_r>
    d21a:	89a3      	ldrh	r3, [r4, #12]
    d21c:	6921      	ldr	r1, [r4, #16]
    d21e:	e7db      	b.n	d1d8 <__swsetup_r+0x24>
    d220:	2200      	movs	r2, #0
    d222:	079b      	lsls	r3, r3, #30
    d224:	d400      	bmi.n	d228 <__swsetup_r+0x74>
    d226:	6962      	ldr	r2, [r4, #20]
    d228:	60a2      	str	r2, [r4, #8]
    d22a:	2000      	movs	r0, #0
    d22c:	2900      	cmp	r1, #0
    d22e:	d1dd      	bne.n	d1ec <__swsetup_r+0x38>
    d230:	220c      	movs	r2, #12
    d232:	5ea3      	ldrsh	r3, [r4, r2]
    d234:	061a      	lsls	r2, r3, #24
    d236:	d5d9      	bpl.n	d1ec <__swsetup_r+0x38>
    d238:	2240      	movs	r2, #64	; 0x40
    d23a:	4313      	orrs	r3, r2
    d23c:	81a3      	strh	r3, [r4, #12]
    d23e:	3801      	subs	r0, #1
    d240:	e7d4      	b.n	d1ec <__swsetup_r+0x38>
    d242:	f001 fa1f 	bl	e684 <__sinit>
    d246:	e7bf      	b.n	d1c8 <__swsetup_r+0x14>
    d248:	6b21      	ldr	r1, [r4, #48]	; 0x30
    d24a:	2900      	cmp	r1, #0
    d24c:	d00a      	beq.n	d264 <__swsetup_r+0xb0>
    d24e:	0023      	movs	r3, r4
    d250:	3340      	adds	r3, #64	; 0x40
    d252:	4299      	cmp	r1, r3
    d254:	d004      	beq.n	d260 <__swsetup_r+0xac>
    d256:	0028      	movs	r0, r5
    d258:	f001 fabe 	bl	e7d8 <_free_r>
    d25c:	230c      	movs	r3, #12
    d25e:	5ee2      	ldrsh	r2, [r4, r3]
    d260:	2300      	movs	r3, #0
    d262:	6323      	str	r3, [r4, #48]	; 0x30
    d264:	2324      	movs	r3, #36	; 0x24
    d266:	439a      	bics	r2, r3
    d268:	2300      	movs	r3, #0
    d26a:	6921      	ldr	r1, [r4, #16]
    d26c:	6063      	str	r3, [r4, #4]
    d26e:	6021      	str	r1, [r4, #0]
    d270:	e7c2      	b.n	d1f8 <__swsetup_r+0x44>
    d272:	2309      	movs	r3, #9
    d274:	602b      	str	r3, [r5, #0]
    d276:	2340      	movs	r3, #64	; 0x40
    d278:	2001      	movs	r0, #1
    d27a:	431a      	orrs	r2, r3
    d27c:	81a2      	strh	r2, [r4, #12]
    d27e:	4240      	negs	r0, r0
    d280:	e7b4      	b.n	d1ec <__swsetup_r+0x38>
    d282:	46c0      	nop			; (mov r8, r8)
    d284:	20000080 	.word	0x20000080

0000d288 <__register_exitproc>:
    d288:	b5f0      	push	{r4, r5, r6, r7, lr}
    d28a:	464e      	mov	r6, r9
    d28c:	4645      	mov	r5, r8
    d28e:	46de      	mov	lr, fp
    d290:	4657      	mov	r7, sl
    d292:	b5e0      	push	{r5, r6, r7, lr}
    d294:	4d36      	ldr	r5, [pc, #216]	; (d370 <__register_exitproc+0xe8>)
    d296:	b083      	sub	sp, #12
    d298:	0006      	movs	r6, r0
    d29a:	6828      	ldr	r0, [r5, #0]
    d29c:	4698      	mov	r8, r3
    d29e:	000f      	movs	r7, r1
    d2a0:	4691      	mov	r9, r2
    d2a2:	f001 fd31 	bl	ed08 <__retarget_lock_acquire_recursive>
    d2a6:	4b33      	ldr	r3, [pc, #204]	; (d374 <__register_exitproc+0xec>)
    d2a8:	681c      	ldr	r4, [r3, #0]
    d2aa:	23a4      	movs	r3, #164	; 0xa4
    d2ac:	005b      	lsls	r3, r3, #1
    d2ae:	58e0      	ldr	r0, [r4, r3]
    d2b0:	2800      	cmp	r0, #0
    d2b2:	d052      	beq.n	d35a <__register_exitproc+0xd2>
    d2b4:	6843      	ldr	r3, [r0, #4]
    d2b6:	2b1f      	cmp	r3, #31
    d2b8:	dc13      	bgt.n	d2e2 <__register_exitproc+0x5a>
    d2ba:	1c5a      	adds	r2, r3, #1
    d2bc:	9201      	str	r2, [sp, #4]
    d2be:	2e00      	cmp	r6, #0
    d2c0:	d128      	bne.n	d314 <__register_exitproc+0x8c>
    d2c2:	9a01      	ldr	r2, [sp, #4]
    d2c4:	3302      	adds	r3, #2
    d2c6:	009b      	lsls	r3, r3, #2
    d2c8:	6042      	str	r2, [r0, #4]
    d2ca:	501f      	str	r7, [r3, r0]
    d2cc:	6828      	ldr	r0, [r5, #0]
    d2ce:	f001 fd1d 	bl	ed0c <__retarget_lock_release_recursive>
    d2d2:	2000      	movs	r0, #0
    d2d4:	b003      	add	sp, #12
    d2d6:	bc3c      	pop	{r2, r3, r4, r5}
    d2d8:	4690      	mov	r8, r2
    d2da:	4699      	mov	r9, r3
    d2dc:	46a2      	mov	sl, r4
    d2de:	46ab      	mov	fp, r5
    d2e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d2e2:	4b25      	ldr	r3, [pc, #148]	; (d378 <__register_exitproc+0xf0>)
    d2e4:	2b00      	cmp	r3, #0
    d2e6:	d03d      	beq.n	d364 <__register_exitproc+0xdc>
    d2e8:	20c8      	movs	r0, #200	; 0xc8
    d2ea:	0040      	lsls	r0, r0, #1
    d2ec:	f001 fd88 	bl	ee00 <malloc>
    d2f0:	2800      	cmp	r0, #0
    d2f2:	d037      	beq.n	d364 <__register_exitproc+0xdc>
    d2f4:	22a4      	movs	r2, #164	; 0xa4
    d2f6:	2300      	movs	r3, #0
    d2f8:	0052      	lsls	r2, r2, #1
    d2fa:	58a1      	ldr	r1, [r4, r2]
    d2fc:	6043      	str	r3, [r0, #4]
    d2fe:	6001      	str	r1, [r0, #0]
    d300:	50a0      	str	r0, [r4, r2]
    d302:	3240      	adds	r2, #64	; 0x40
    d304:	5083      	str	r3, [r0, r2]
    d306:	3204      	adds	r2, #4
    d308:	5083      	str	r3, [r0, r2]
    d30a:	3301      	adds	r3, #1
    d30c:	9301      	str	r3, [sp, #4]
    d30e:	2300      	movs	r3, #0
    d310:	2e00      	cmp	r6, #0
    d312:	d0d6      	beq.n	d2c2 <__register_exitproc+0x3a>
    d314:	009a      	lsls	r2, r3, #2
    d316:	4692      	mov	sl, r2
    d318:	4482      	add	sl, r0
    d31a:	464a      	mov	r2, r9
    d31c:	2188      	movs	r1, #136	; 0x88
    d31e:	4654      	mov	r4, sl
    d320:	5062      	str	r2, [r4, r1]
    d322:	22c4      	movs	r2, #196	; 0xc4
    d324:	0052      	lsls	r2, r2, #1
    d326:	4691      	mov	r9, r2
    d328:	4481      	add	r9, r0
    d32a:	464a      	mov	r2, r9
    d32c:	3987      	subs	r1, #135	; 0x87
    d32e:	4099      	lsls	r1, r3
    d330:	6812      	ldr	r2, [r2, #0]
    d332:	468b      	mov	fp, r1
    d334:	430a      	orrs	r2, r1
    d336:	4694      	mov	ip, r2
    d338:	464a      	mov	r2, r9
    d33a:	4661      	mov	r1, ip
    d33c:	6011      	str	r1, [r2, #0]
    d33e:	2284      	movs	r2, #132	; 0x84
    d340:	4641      	mov	r1, r8
    d342:	0052      	lsls	r2, r2, #1
    d344:	50a1      	str	r1, [r4, r2]
    d346:	2e02      	cmp	r6, #2
    d348:	d1bb      	bne.n	d2c2 <__register_exitproc+0x3a>
    d34a:	0002      	movs	r2, r0
    d34c:	465c      	mov	r4, fp
    d34e:	328d      	adds	r2, #141	; 0x8d
    d350:	32ff      	adds	r2, #255	; 0xff
    d352:	6811      	ldr	r1, [r2, #0]
    d354:	430c      	orrs	r4, r1
    d356:	6014      	str	r4, [r2, #0]
    d358:	e7b3      	b.n	d2c2 <__register_exitproc+0x3a>
    d35a:	0020      	movs	r0, r4
    d35c:	304d      	adds	r0, #77	; 0x4d
    d35e:	30ff      	adds	r0, #255	; 0xff
    d360:	50e0      	str	r0, [r4, r3]
    d362:	e7a7      	b.n	d2b4 <__register_exitproc+0x2c>
    d364:	6828      	ldr	r0, [r5, #0]
    d366:	f001 fcd1 	bl	ed0c <__retarget_lock_release_recursive>
    d36a:	2001      	movs	r0, #1
    d36c:	4240      	negs	r0, r0
    d36e:	e7b1      	b.n	d2d4 <__register_exitproc+0x4c>
    d370:	200004b0 	.word	0x200004b0
    d374:	00010fcc 	.word	0x00010fcc
    d378:	0000ee01 	.word	0x0000ee01

0000d37c <register_fini>:
    d37c:	4b03      	ldr	r3, [pc, #12]	; (d38c <register_fini+0x10>)
    d37e:	b510      	push	{r4, lr}
    d380:	2b00      	cmp	r3, #0
    d382:	d002      	beq.n	d38a <register_fini+0xe>
    d384:	4802      	ldr	r0, [pc, #8]	; (d390 <register_fini+0x14>)
    d386:	f000 f805 	bl	d394 <atexit>
    d38a:	bd10      	pop	{r4, pc}
    d38c:	00000000 	.word	0x00000000
    d390:	0000e705 	.word	0x0000e705

0000d394 <atexit>:
    d394:	b510      	push	{r4, lr}
    d396:	0001      	movs	r1, r0
    d398:	2300      	movs	r3, #0
    d39a:	2200      	movs	r2, #0
    d39c:	2000      	movs	r0, #0
    d39e:	f7ff ff73 	bl	d288 <__register_exitproc>
    d3a2:	bd10      	pop	{r4, pc}

0000d3a4 <quorem>:
    d3a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    d3a6:	4645      	mov	r5, r8
    d3a8:	4680      	mov	r8, r0
    d3aa:	46de      	mov	lr, fp
    d3ac:	4657      	mov	r7, sl
    d3ae:	464e      	mov	r6, r9
    d3b0:	4642      	mov	r2, r8
    d3b2:	b5e0      	push	{r5, r6, r7, lr}
    d3b4:	690c      	ldr	r4, [r1, #16]
    d3b6:	6912      	ldr	r2, [r2, #16]
    d3b8:	b085      	sub	sp, #20
    d3ba:	000b      	movs	r3, r1
    d3bc:	9102      	str	r1, [sp, #8]
    d3be:	2000      	movs	r0, #0
    d3c0:	4294      	cmp	r4, r2
    d3c2:	dd00      	ble.n	d3c6 <quorem+0x22>
    d3c4:	e090      	b.n	d4e8 <quorem+0x144>
    d3c6:	2214      	movs	r2, #20
    d3c8:	4694      	mov	ip, r2
    d3ca:	4463      	add	r3, ip
    d3cc:	4699      	mov	r9, r3
    d3ce:	464a      	mov	r2, r9
    d3d0:	3c01      	subs	r4, #1
    d3d2:	00a3      	lsls	r3, r4, #2
    d3d4:	18d6      	adds	r6, r2, r3
    d3d6:	2214      	movs	r2, #20
    d3d8:	4442      	add	r2, r8
    d3da:	4693      	mov	fp, r2
    d3dc:	449b      	add	fp, r3
    d3de:	6833      	ldr	r3, [r6, #0]
    d3e0:	0015      	movs	r5, r2
    d3e2:	1c59      	adds	r1, r3, #1
    d3e4:	465b      	mov	r3, fp
    d3e6:	6818      	ldr	r0, [r3, #0]
    d3e8:	9201      	str	r2, [sp, #4]
    d3ea:	f7fb fc8f 	bl	8d0c <__udivsi3>
    d3ee:	1e03      	subs	r3, r0, #0
    d3f0:	9000      	str	r0, [sp, #0]
    d3f2:	d042      	beq.n	d47a <quorem+0xd6>
    d3f4:	0029      	movs	r1, r5
    d3f6:	2700      	movs	r7, #0
    d3f8:	464d      	mov	r5, r9
    d3fa:	2000      	movs	r0, #0
    d3fc:	46b1      	mov	r9, r6
    d3fe:	46a2      	mov	sl, r4
    d400:	003e      	movs	r6, r7
    d402:	0004      	movs	r4, r0
    d404:	469c      	mov	ip, r3
    d406:	002f      	movs	r7, r5
    d408:	0008      	movs	r0, r1
    d40a:	9503      	str	r5, [sp, #12]
    d40c:	4663      	mov	r3, ip
    d40e:	cf04      	ldmia	r7!, {r2}
    d410:	0415      	lsls	r5, r2, #16
    d412:	0c2d      	lsrs	r5, r5, #16
    d414:	435d      	muls	r5, r3
    d416:	0c12      	lsrs	r2, r2, #16
    d418:	435a      	muls	r2, r3
    d41a:	19ad      	adds	r5, r5, r6
    d41c:	0c2b      	lsrs	r3, r5, #16
    d41e:	18d2      	adds	r2, r2, r3
    d420:	6803      	ldr	r3, [r0, #0]
    d422:	042d      	lsls	r5, r5, #16
    d424:	0419      	lsls	r1, r3, #16
    d426:	0c09      	lsrs	r1, r1, #16
    d428:	1909      	adds	r1, r1, r4
    d42a:	0c16      	lsrs	r6, r2, #16
    d42c:	0c2d      	lsrs	r5, r5, #16
    d42e:	0412      	lsls	r2, r2, #16
    d430:	1b49      	subs	r1, r1, r5
    d432:	0c12      	lsrs	r2, r2, #16
    d434:	0c1b      	lsrs	r3, r3, #16
    d436:	1a9b      	subs	r3, r3, r2
    d438:	140a      	asrs	r2, r1, #16
    d43a:	189b      	adds	r3, r3, r2
    d43c:	0409      	lsls	r1, r1, #16
    d43e:	141c      	asrs	r4, r3, #16
    d440:	0c09      	lsrs	r1, r1, #16
    d442:	041b      	lsls	r3, r3, #16
    d444:	4319      	orrs	r1, r3
    d446:	c002      	stmia	r0!, {r1}
    d448:	45b9      	cmp	r9, r7
    d44a:	d2df      	bcs.n	d40c <quorem+0x68>
    d44c:	9b03      	ldr	r3, [sp, #12]
    d44e:	464e      	mov	r6, r9
    d450:	4699      	mov	r9, r3
    d452:	465b      	mov	r3, fp
    d454:	681b      	ldr	r3, [r3, #0]
    d456:	4654      	mov	r4, sl
    d458:	2b00      	cmp	r3, #0
    d45a:	d10e      	bne.n	d47a <quorem+0xd6>
    d45c:	465b      	mov	r3, fp
    d45e:	9a01      	ldr	r2, [sp, #4]
    d460:	3b04      	subs	r3, #4
    d462:	429a      	cmp	r2, r3
    d464:	d304      	bcc.n	d470 <quorem+0xcc>
    d466:	e006      	b.n	d476 <quorem+0xd2>
    d468:	3b04      	subs	r3, #4
    d46a:	3c01      	subs	r4, #1
    d46c:	429a      	cmp	r2, r3
    d46e:	d202      	bcs.n	d476 <quorem+0xd2>
    d470:	6819      	ldr	r1, [r3, #0]
    d472:	2900      	cmp	r1, #0
    d474:	d0f8      	beq.n	d468 <quorem+0xc4>
    d476:	4643      	mov	r3, r8
    d478:	611c      	str	r4, [r3, #16]
    d47a:	9902      	ldr	r1, [sp, #8]
    d47c:	4640      	mov	r0, r8
    d47e:	f002 fa51 	bl	f924 <__mcmp>
    d482:	2800      	cmp	r0, #0
    d484:	db2f      	blt.n	d4e6 <quorem+0x142>
    d486:	464f      	mov	r7, r9
    d488:	2000      	movs	r0, #0
    d48a:	9b00      	ldr	r3, [sp, #0]
    d48c:	9d01      	ldr	r5, [sp, #4]
    d48e:	3301      	adds	r3, #1
    d490:	9300      	str	r3, [sp, #0]
    d492:	682b      	ldr	r3, [r5, #0]
    d494:	cf02      	ldmia	r7!, {r1}
    d496:	041a      	lsls	r2, r3, #16
    d498:	0c12      	lsrs	r2, r2, #16
    d49a:	1810      	adds	r0, r2, r0
    d49c:	040a      	lsls	r2, r1, #16
    d49e:	0c12      	lsrs	r2, r2, #16
    d4a0:	1a82      	subs	r2, r0, r2
    d4a2:	0c09      	lsrs	r1, r1, #16
    d4a4:	0c1b      	lsrs	r3, r3, #16
    d4a6:	1a5b      	subs	r3, r3, r1
    d4a8:	1411      	asrs	r1, r2, #16
    d4aa:	185b      	adds	r3, r3, r1
    d4ac:	0412      	lsls	r2, r2, #16
    d4ae:	1418      	asrs	r0, r3, #16
    d4b0:	0c12      	lsrs	r2, r2, #16
    d4b2:	041b      	lsls	r3, r3, #16
    d4b4:	4313      	orrs	r3, r2
    d4b6:	c508      	stmia	r5!, {r3}
    d4b8:	42be      	cmp	r6, r7
    d4ba:	d2ea      	bcs.n	d492 <quorem+0xee>
    d4bc:	9901      	ldr	r1, [sp, #4]
    d4be:	00a3      	lsls	r3, r4, #2
    d4c0:	468c      	mov	ip, r1
    d4c2:	4463      	add	r3, ip
    d4c4:	681a      	ldr	r2, [r3, #0]
    d4c6:	2a00      	cmp	r2, #0
    d4c8:	d10d      	bne.n	d4e6 <quorem+0x142>
    d4ca:	3b04      	subs	r3, #4
    d4cc:	000a      	movs	r2, r1
    d4ce:	4299      	cmp	r1, r3
    d4d0:	d304      	bcc.n	d4dc <quorem+0x138>
    d4d2:	e006      	b.n	d4e2 <quorem+0x13e>
    d4d4:	3b04      	subs	r3, #4
    d4d6:	3c01      	subs	r4, #1
    d4d8:	429a      	cmp	r2, r3
    d4da:	d202      	bcs.n	d4e2 <quorem+0x13e>
    d4dc:	6819      	ldr	r1, [r3, #0]
    d4de:	2900      	cmp	r1, #0
    d4e0:	d0f8      	beq.n	d4d4 <quorem+0x130>
    d4e2:	4643      	mov	r3, r8
    d4e4:	611c      	str	r4, [r3, #16]
    d4e6:	9800      	ldr	r0, [sp, #0]
    d4e8:	b005      	add	sp, #20
    d4ea:	bc3c      	pop	{r2, r3, r4, r5}
    d4ec:	4690      	mov	r8, r2
    d4ee:	4699      	mov	r9, r3
    d4f0:	46a2      	mov	sl, r4
    d4f2:	46ab      	mov	fp, r5
    d4f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d4f6:	46c0      	nop			; (mov r8, r8)

0000d4f8 <_dtoa_r>:
    d4f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    d4fa:	4657      	mov	r7, sl
    d4fc:	464e      	mov	r6, r9
    d4fe:	4645      	mov	r5, r8
    d500:	46de      	mov	lr, fp
    d502:	b5e0      	push	{r5, r6, r7, lr}
    d504:	6c01      	ldr	r1, [r0, #64]	; 0x40
    d506:	b099      	sub	sp, #100	; 0x64
    d508:	4682      	mov	sl, r0
    d50a:	001d      	movs	r5, r3
    d50c:	0016      	movs	r6, r2
    d50e:	001f      	movs	r7, r3
    d510:	2900      	cmp	r1, #0
    d512:	d009      	beq.n	d528 <_dtoa_r+0x30>
    d514:	2301      	movs	r3, #1
    d516:	6c42      	ldr	r2, [r0, #68]	; 0x44
    d518:	4093      	lsls	r3, r2
    d51a:	604a      	str	r2, [r1, #4]
    d51c:	608b      	str	r3, [r1, #8]
    d51e:	f001 fff5 	bl	f50c <_Bfree>
    d522:	2300      	movs	r3, #0
    d524:	4652      	mov	r2, sl
    d526:	6413      	str	r3, [r2, #64]	; 0x40
    d528:	46b8      	mov	r8, r7
    d52a:	2f00      	cmp	r7, #0
    d52c:	db37      	blt.n	d59e <_dtoa_r+0xa6>
    d52e:	2300      	movs	r3, #0
    d530:	9a25      	ldr	r2, [sp, #148]	; 0x94
    d532:	6013      	str	r3, [r2, #0]
    d534:	4642      	mov	r2, r8
    d536:	4bd6      	ldr	r3, [pc, #856]	; (d890 <_dtoa_r+0x398>)
    d538:	401a      	ands	r2, r3
    d53a:	429a      	cmp	r2, r3
    d53c:	d018      	beq.n	d570 <_dtoa_r+0x78>
    d53e:	2200      	movs	r2, #0
    d540:	2300      	movs	r3, #0
    d542:	0030      	movs	r0, r6
    d544:	0039      	movs	r1, r7
    d546:	f7fd ff57 	bl	b3f8 <__aeabi_dcmpeq>
    d54a:	2800      	cmp	r0, #0
    d54c:	d02f      	beq.n	d5ae <_dtoa_r+0xb6>
    d54e:	2301      	movs	r3, #1
    d550:	9a24      	ldr	r2, [sp, #144]	; 0x90
    d552:	6013      	str	r3, [r2, #0]
    d554:	9b26      	ldr	r3, [sp, #152]	; 0x98
    d556:	2b00      	cmp	r3, #0
    d558:	d100      	bne.n	d55c <_dtoa_r+0x64>
    d55a:	e22a      	b.n	d9b2 <_dtoa_r+0x4ba>
    d55c:	48cd      	ldr	r0, [pc, #820]	; (d894 <_dtoa_r+0x39c>)
    d55e:	6018      	str	r0, [r3, #0]
    d560:	3801      	subs	r0, #1
    d562:	b019      	add	sp, #100	; 0x64
    d564:	bc3c      	pop	{r2, r3, r4, r5}
    d566:	4690      	mov	r8, r2
    d568:	4699      	mov	r9, r3
    d56a:	46a2      	mov	sl, r4
    d56c:	46ab      	mov	fp, r5
    d56e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d570:	4bc9      	ldr	r3, [pc, #804]	; (d898 <_dtoa_r+0x3a0>)
    d572:	9a24      	ldr	r2, [sp, #144]	; 0x90
    d574:	6013      	str	r3, [r2, #0]
    d576:	2e00      	cmp	r6, #0
    d578:	d10b      	bne.n	d592 <_dtoa_r+0x9a>
    d57a:	4643      	mov	r3, r8
    d57c:	0318      	lsls	r0, r3, #12
    d57e:	d108      	bne.n	d592 <_dtoa_r+0x9a>
    d580:	9b26      	ldr	r3, [sp, #152]	; 0x98
    d582:	48c6      	ldr	r0, [pc, #792]	; (d89c <_dtoa_r+0x3a4>)
    d584:	2b00      	cmp	r3, #0
    d586:	d0ec      	beq.n	d562 <_dtoa_r+0x6a>
    d588:	0003      	movs	r3, r0
    d58a:	3308      	adds	r3, #8
    d58c:	9a26      	ldr	r2, [sp, #152]	; 0x98
    d58e:	6013      	str	r3, [r2, #0]
    d590:	e7e7      	b.n	d562 <_dtoa_r+0x6a>
    d592:	9b26      	ldr	r3, [sp, #152]	; 0x98
    d594:	48c2      	ldr	r0, [pc, #776]	; (d8a0 <_dtoa_r+0x3a8>)
    d596:	2b00      	cmp	r3, #0
    d598:	d0e3      	beq.n	d562 <_dtoa_r+0x6a>
    d59a:	1cc3      	adds	r3, r0, #3
    d59c:	e7f6      	b.n	d58c <_dtoa_r+0x94>
    d59e:	2301      	movs	r3, #1
    d5a0:	9a25      	ldr	r2, [sp, #148]	; 0x94
    d5a2:	0068      	lsls	r0, r5, #1
    d5a4:	6013      	str	r3, [r2, #0]
    d5a6:	0843      	lsrs	r3, r0, #1
    d5a8:	4698      	mov	r8, r3
    d5aa:	001f      	movs	r7, r3
    d5ac:	e7c2      	b.n	d534 <_dtoa_r+0x3c>
    d5ae:	ab16      	add	r3, sp, #88	; 0x58
    d5b0:	9301      	str	r3, [sp, #4]
    d5b2:	ab17      	add	r3, sp, #92	; 0x5c
    d5b4:	9300      	str	r3, [sp, #0]
    d5b6:	0032      	movs	r2, r6
    d5b8:	003b      	movs	r3, r7
    d5ba:	4650      	mov	r0, sl
    d5bc:	f002 fa68 	bl	fa90 <__d2b>
    d5c0:	4643      	mov	r3, r8
    d5c2:	4683      	mov	fp, r0
    d5c4:	0d1a      	lsrs	r2, r3, #20
    d5c6:	d100      	bne.n	d5ca <_dtoa_r+0xd2>
    d5c8:	e1d6      	b.n	d978 <_dtoa_r+0x480>
    d5ca:	033b      	lsls	r3, r7, #12
    d5cc:	4cb5      	ldr	r4, [pc, #724]	; (d8a4 <_dtoa_r+0x3ac>)
    d5ce:	0b1b      	lsrs	r3, r3, #12
    d5d0:	431c      	orrs	r4, r3
    d5d2:	4bb5      	ldr	r3, [pc, #724]	; (d8a8 <_dtoa_r+0x3b0>)
    d5d4:	0030      	movs	r0, r6
    d5d6:	4698      	mov	r8, r3
    d5d8:	9b16      	ldr	r3, [sp, #88]	; 0x58
    d5da:	0021      	movs	r1, r4
    d5dc:	4699      	mov	r9, r3
    d5de:	2300      	movs	r3, #0
    d5e0:	4490      	add	r8, r2
    d5e2:	930f      	str	r3, [sp, #60]	; 0x3c
    d5e4:	2200      	movs	r2, #0
    d5e6:	4bb1      	ldr	r3, [pc, #708]	; (d8ac <_dtoa_r+0x3b4>)
    d5e8:	f7fd fae0 	bl	abac <__aeabi_dsub>
    d5ec:	4ab0      	ldr	r2, [pc, #704]	; (d8b0 <_dtoa_r+0x3b8>)
    d5ee:	4bb1      	ldr	r3, [pc, #708]	; (d8b4 <_dtoa_r+0x3bc>)
    d5f0:	f7fd f85c 	bl	a6ac <__aeabi_dmul>
    d5f4:	4ab0      	ldr	r2, [pc, #704]	; (d8b8 <_dtoa_r+0x3c0>)
    d5f6:	4bb1      	ldr	r3, [pc, #708]	; (d8bc <_dtoa_r+0x3c4>)
    d5f8:	f002 ff4e 	bl	10498 <__aeabi_dadd>
    d5fc:	0004      	movs	r4, r0
    d5fe:	4640      	mov	r0, r8
    d600:	000d      	movs	r5, r1
    d602:	f7fd fe1d 	bl	b240 <__aeabi_i2d>
    d606:	4aae      	ldr	r2, [pc, #696]	; (d8c0 <_dtoa_r+0x3c8>)
    d608:	4bae      	ldr	r3, [pc, #696]	; (d8c4 <_dtoa_r+0x3cc>)
    d60a:	f7fd f84f 	bl	a6ac <__aeabi_dmul>
    d60e:	0002      	movs	r2, r0
    d610:	000b      	movs	r3, r1
    d612:	0020      	movs	r0, r4
    d614:	0029      	movs	r1, r5
    d616:	f002 ff3f 	bl	10498 <__aeabi_dadd>
    d61a:	0004      	movs	r4, r0
    d61c:	000d      	movs	r5, r1
    d61e:	f7fd fddb 	bl	b1d8 <__aeabi_d2iz>
    d622:	2200      	movs	r2, #0
    d624:	9003      	str	r0, [sp, #12]
    d626:	2300      	movs	r3, #0
    d628:	0020      	movs	r0, r4
    d62a:	0029      	movs	r1, r5
    d62c:	f7fd feea 	bl	b404 <__aeabi_dcmplt>
    d630:	2800      	cmp	r0, #0
    d632:	d000      	beq.n	d636 <_dtoa_r+0x13e>
    d634:	e2b1      	b.n	db9a <_dtoa_r+0x6a2>
    d636:	2301      	movs	r3, #1
    d638:	9c03      	ldr	r4, [sp, #12]
    d63a:	930c      	str	r3, [sp, #48]	; 0x30
    d63c:	2c16      	cmp	r4, #22
    d63e:	d810      	bhi.n	d662 <_dtoa_r+0x16a>
    d640:	49a1      	ldr	r1, [pc, #644]	; (d8c8 <_dtoa_r+0x3d0>)
    d642:	00e3      	lsls	r3, r4, #3
    d644:	18c9      	adds	r1, r1, r3
    d646:	0032      	movs	r2, r6
    d648:	6808      	ldr	r0, [r1, #0]
    d64a:	6849      	ldr	r1, [r1, #4]
    d64c:	003b      	movs	r3, r7
    d64e:	f7fd feed 	bl	b42c <__aeabi_dcmpgt>
    d652:	2800      	cmp	r0, #0
    d654:	d100      	bne.n	d658 <_dtoa_r+0x160>
    d656:	e31d      	b.n	dc94 <_dtoa_r+0x79c>
    d658:	0023      	movs	r3, r4
    d65a:	3b01      	subs	r3, #1
    d65c:	9303      	str	r3, [sp, #12]
    d65e:	2300      	movs	r3, #0
    d660:	930c      	str	r3, [sp, #48]	; 0x30
    d662:	464b      	mov	r3, r9
    d664:	4642      	mov	r2, r8
    d666:	1a9a      	subs	r2, r3, r2
    d668:	2300      	movs	r3, #0
    d66a:	9306      	str	r3, [sp, #24]
    d66c:	0013      	movs	r3, r2
    d66e:	3b01      	subs	r3, #1
    d670:	9304      	str	r3, [sp, #16]
    d672:	d500      	bpl.n	d676 <_dtoa_r+0x17e>
    d674:	e2a1      	b.n	dbba <_dtoa_r+0x6c2>
    d676:	9b03      	ldr	r3, [sp, #12]
    d678:	2b00      	cmp	r3, #0
    d67a:	da00      	bge.n	d67e <_dtoa_r+0x186>
    d67c:	e284      	b.n	db88 <_dtoa_r+0x690>
    d67e:	469c      	mov	ip, r3
    d680:	930d      	str	r3, [sp, #52]	; 0x34
    d682:	2300      	movs	r3, #0
    d684:	9a04      	ldr	r2, [sp, #16]
    d686:	4699      	mov	r9, r3
    d688:	0011      	movs	r1, r2
    d68a:	4461      	add	r1, ip
    d68c:	9104      	str	r1, [sp, #16]
    d68e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    d690:	2b09      	cmp	r3, #9
    d692:	d900      	bls.n	d696 <_dtoa_r+0x19e>
    d694:	e18f      	b.n	d9b6 <_dtoa_r+0x4be>
    d696:	2401      	movs	r4, #1
    d698:	2b05      	cmp	r3, #5
    d69a:	dd02      	ble.n	d6a2 <_dtoa_r+0x1aa>
    d69c:	2400      	movs	r4, #0
    d69e:	3b04      	subs	r3, #4
    d6a0:	9322      	str	r3, [sp, #136]	; 0x88
    d6a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
    d6a4:	2b03      	cmp	r3, #3
    d6a6:	d101      	bne.n	d6ac <_dtoa_r+0x1b4>
    d6a8:	f000 fcce 	bl	e048 <_dtoa_r+0xb50>
    d6ac:	dc01      	bgt.n	d6b2 <_dtoa_r+0x1ba>
    d6ae:	f000 fc92 	bl	dfd6 <_dtoa_r+0xade>
    d6b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
    d6b4:	2b04      	cmp	r3, #4
    d6b6:	d101      	bne.n	d6bc <_dtoa_r+0x1c4>
    d6b8:	f000 fc40 	bl	df3c <_dtoa_r+0xa44>
    d6bc:	2301      	movs	r3, #1
    d6be:	930b      	str	r3, [sp, #44]	; 0x2c
    d6c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
    d6c2:	2b05      	cmp	r3, #5
    d6c4:	d001      	beq.n	d6ca <_dtoa_r+0x1d2>
    d6c6:	f000 fc8b 	bl	dfe0 <_dtoa_r+0xae8>
    d6ca:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    d6cc:	9b03      	ldr	r3, [sp, #12]
    d6ce:	4694      	mov	ip, r2
    d6d0:	4463      	add	r3, ip
    d6d2:	930e      	str	r3, [sp, #56]	; 0x38
    d6d4:	3301      	adds	r3, #1
    d6d6:	9307      	str	r3, [sp, #28]
    d6d8:	1e1d      	subs	r5, r3, #0
    d6da:	dc01      	bgt.n	d6e0 <_dtoa_r+0x1e8>
    d6dc:	f000 fd49 	bl	e172 <_dtoa_r+0xc7a>
    d6e0:	9b07      	ldr	r3, [sp, #28]
    d6e2:	4698      	mov	r8, r3
    d6e4:	2300      	movs	r3, #0
    d6e6:	4652      	mov	r2, sl
    d6e8:	2100      	movs	r1, #0
    d6ea:	6453      	str	r3, [r2, #68]	; 0x44
    d6ec:	2d17      	cmp	r5, #23
    d6ee:	d90a      	bls.n	d706 <_dtoa_r+0x20e>
    d6f0:	2201      	movs	r2, #1
    d6f2:	3304      	adds	r3, #4
    d6f4:	005b      	lsls	r3, r3, #1
    d6f6:	0018      	movs	r0, r3
    d6f8:	3014      	adds	r0, #20
    d6fa:	0011      	movs	r1, r2
    d6fc:	3201      	adds	r2, #1
    d6fe:	4285      	cmp	r5, r0
    d700:	d2f8      	bcs.n	d6f4 <_dtoa_r+0x1fc>
    d702:	4653      	mov	r3, sl
    d704:	6459      	str	r1, [r3, #68]	; 0x44
    d706:	4650      	mov	r0, sl
    d708:	f001 fed8 	bl	f4bc <_Balloc>
    d70c:	4653      	mov	r3, sl
    d70e:	6418      	str	r0, [r3, #64]	; 0x40
    d710:	4643      	mov	r3, r8
    d712:	900a      	str	r0, [sp, #40]	; 0x28
    d714:	2b0e      	cmp	r3, #14
    d716:	d900      	bls.n	d71a <_dtoa_r+0x222>
    d718:	e161      	b.n	d9de <_dtoa_r+0x4e6>
    d71a:	2c00      	cmp	r4, #0
    d71c:	d100      	bne.n	d720 <_dtoa_r+0x228>
    d71e:	e15e      	b.n	d9de <_dtoa_r+0x4e6>
    d720:	9610      	str	r6, [sp, #64]	; 0x40
    d722:	9711      	str	r7, [sp, #68]	; 0x44
    d724:	9e03      	ldr	r6, [sp, #12]
    d726:	2e00      	cmp	r6, #0
    d728:	dc01      	bgt.n	d72e <_dtoa_r+0x236>
    d72a:	f000 fd25 	bl	e178 <_dtoa_r+0xc80>
    d72e:	0032      	movs	r2, r6
    d730:	210f      	movs	r1, #15
    d732:	4b65      	ldr	r3, [pc, #404]	; (d8c8 <_dtoa_r+0x3d0>)
    d734:	400a      	ands	r2, r1
    d736:	00d2      	lsls	r2, r2, #3
    d738:	189b      	adds	r3, r3, r2
    d73a:	1136      	asrs	r6, r6, #4
    d73c:	681c      	ldr	r4, [r3, #0]
    d73e:	685d      	ldr	r5, [r3, #4]
    d740:	06f3      	lsls	r3, r6, #27
    d742:	d401      	bmi.n	d748 <_dtoa_r+0x250>
    d744:	f000 fcca 	bl	e0dc <_dtoa_r+0xbe4>
    d748:	4b60      	ldr	r3, [pc, #384]	; (d8cc <_dtoa_r+0x3d4>)
    d74a:	400e      	ands	r6, r1
    d74c:	6a1a      	ldr	r2, [r3, #32]
    d74e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    d750:	9810      	ldr	r0, [sp, #64]	; 0x40
    d752:	9911      	ldr	r1, [sp, #68]	; 0x44
    d754:	f7fc fc76 	bl	a044 <__aeabi_ddiv>
    d758:	2303      	movs	r3, #3
    d75a:	4698      	mov	r8, r3
    d75c:	9008      	str	r0, [sp, #32]
    d75e:	9109      	str	r1, [sp, #36]	; 0x24
    d760:	2e00      	cmp	r6, #0
    d762:	d011      	beq.n	d788 <_dtoa_r+0x290>
    d764:	4f59      	ldr	r7, [pc, #356]	; (d8cc <_dtoa_r+0x3d4>)
    d766:	2301      	movs	r3, #1
    d768:	4233      	tst	r3, r6
    d76a:	d009      	beq.n	d780 <_dtoa_r+0x288>
    d76c:	469c      	mov	ip, r3
    d76e:	683a      	ldr	r2, [r7, #0]
    d770:	687b      	ldr	r3, [r7, #4]
    d772:	0020      	movs	r0, r4
    d774:	0029      	movs	r1, r5
    d776:	44e0      	add	r8, ip
    d778:	f7fc ff98 	bl	a6ac <__aeabi_dmul>
    d77c:	0004      	movs	r4, r0
    d77e:	000d      	movs	r5, r1
    d780:	1076      	asrs	r6, r6, #1
    d782:	3708      	adds	r7, #8
    d784:	2e00      	cmp	r6, #0
    d786:	d1ee      	bne.n	d766 <_dtoa_r+0x26e>
    d788:	0022      	movs	r2, r4
    d78a:	9808      	ldr	r0, [sp, #32]
    d78c:	9909      	ldr	r1, [sp, #36]	; 0x24
    d78e:	002b      	movs	r3, r5
    d790:	f7fc fc58 	bl	a044 <__aeabi_ddiv>
    d794:	0006      	movs	r6, r0
    d796:	000f      	movs	r7, r1
    d798:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d79a:	2b00      	cmp	r3, #0
    d79c:	d009      	beq.n	d7b2 <_dtoa_r+0x2ba>
    d79e:	2200      	movs	r2, #0
    d7a0:	4b40      	ldr	r3, [pc, #256]	; (d8a4 <_dtoa_r+0x3ac>)
    d7a2:	0030      	movs	r0, r6
    d7a4:	0039      	movs	r1, r7
    d7a6:	f7fd fe2d 	bl	b404 <__aeabi_dcmplt>
    d7aa:	2800      	cmp	r0, #0
    d7ac:	d001      	beq.n	d7b2 <_dtoa_r+0x2ba>
    d7ae:	f000 fdc2 	bl	e336 <_dtoa_r+0xe3e>
    d7b2:	4640      	mov	r0, r8
    d7b4:	f7fd fd44 	bl	b240 <__aeabi_i2d>
    d7b8:	0032      	movs	r2, r6
    d7ba:	003b      	movs	r3, r7
    d7bc:	f7fc ff76 	bl	a6ac <__aeabi_dmul>
    d7c0:	2200      	movs	r2, #0
    d7c2:	4b43      	ldr	r3, [pc, #268]	; (d8d0 <_dtoa_r+0x3d8>)
    d7c4:	f002 fe68 	bl	10498 <__aeabi_dadd>
    d7c8:	4a42      	ldr	r2, [pc, #264]	; (d8d4 <_dtoa_r+0x3dc>)
    d7ca:	000b      	movs	r3, r1
    d7cc:	4694      	mov	ip, r2
    d7ce:	4463      	add	r3, ip
    d7d0:	9008      	str	r0, [sp, #32]
    d7d2:	9109      	str	r1, [sp, #36]	; 0x24
    d7d4:	9309      	str	r3, [sp, #36]	; 0x24
    d7d6:	9b07      	ldr	r3, [sp, #28]
    d7d8:	2b00      	cmp	r3, #0
    d7da:	d101      	bne.n	d7e0 <_dtoa_r+0x2e8>
    d7dc:	f000 fc50 	bl	e080 <_dtoa_r+0xb88>
    d7e0:	9b03      	ldr	r3, [sp, #12]
    d7e2:	9313      	str	r3, [sp, #76]	; 0x4c
    d7e4:	9b07      	ldr	r3, [sp, #28]
    d7e6:	9312      	str	r3, [sp, #72]	; 0x48
    d7e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d7ea:	2b00      	cmp	r3, #0
    d7ec:	d101      	bne.n	d7f2 <_dtoa_r+0x2fa>
    d7ee:	f000 fd1d 	bl	e22c <_dtoa_r+0xd34>
    d7f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d7f4:	2000      	movs	r0, #0
    d7f6:	1e5a      	subs	r2, r3, #1
    d7f8:	4b33      	ldr	r3, [pc, #204]	; (d8c8 <_dtoa_r+0x3d0>)
    d7fa:	00d2      	lsls	r2, r2, #3
    d7fc:	189b      	adds	r3, r3, r2
    d7fe:	681a      	ldr	r2, [r3, #0]
    d800:	685b      	ldr	r3, [r3, #4]
    d802:	4935      	ldr	r1, [pc, #212]	; (d8d8 <_dtoa_r+0x3e0>)
    d804:	f7fc fc1e 	bl	a044 <__aeabi_ddiv>
    d808:	9a08      	ldr	r2, [sp, #32]
    d80a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d80c:	f7fd f9ce 	bl	abac <__aeabi_dsub>
    d810:	9008      	str	r0, [sp, #32]
    d812:	9109      	str	r1, [sp, #36]	; 0x24
    d814:	0039      	movs	r1, r7
    d816:	0030      	movs	r0, r6
    d818:	f7fd fcde 	bl	b1d8 <__aeabi_d2iz>
    d81c:	0004      	movs	r4, r0
    d81e:	f7fd fd0f 	bl	b240 <__aeabi_i2d>
    d822:	0002      	movs	r2, r0
    d824:	000b      	movs	r3, r1
    d826:	0030      	movs	r0, r6
    d828:	0039      	movs	r1, r7
    d82a:	f7fd f9bf 	bl	abac <__aeabi_dsub>
    d82e:	0005      	movs	r5, r0
    d830:	000e      	movs	r6, r1
    d832:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    d834:	3430      	adds	r4, #48	; 0x30
    d836:	1c51      	adds	r1, r2, #1
    d838:	b2e7      	uxtb	r7, r4
    d83a:	9114      	str	r1, [sp, #80]	; 0x50
    d83c:	7017      	strb	r7, [r2, #0]
    d83e:	0033      	movs	r3, r6
    d840:	9808      	ldr	r0, [sp, #32]
    d842:	9909      	ldr	r1, [sp, #36]	; 0x24
    d844:	002a      	movs	r2, r5
    d846:	f7fd fdf1 	bl	b42c <__aeabi_dcmpgt>
    d84a:	2800      	cmp	r0, #0
    d84c:	d001      	beq.n	d852 <_dtoa_r+0x35a>
    d84e:	f000 fdfe 	bl	e44e <_dtoa_r+0xf56>
    d852:	002a      	movs	r2, r5
    d854:	0033      	movs	r3, r6
    d856:	2000      	movs	r0, #0
    d858:	4912      	ldr	r1, [pc, #72]	; (d8a4 <_dtoa_r+0x3ac>)
    d85a:	f7fd f9a7 	bl	abac <__aeabi_dsub>
    d85e:	0002      	movs	r2, r0
    d860:	000b      	movs	r3, r1
    d862:	9808      	ldr	r0, [sp, #32]
    d864:	9909      	ldr	r1, [sp, #36]	; 0x24
    d866:	f7fd fde1 	bl	b42c <__aeabi_dcmpgt>
    d86a:	2800      	cmp	r0, #0
    d86c:	d001      	beq.n	d872 <_dtoa_r+0x37a>
    d86e:	f000 fde7 	bl	e440 <_dtoa_r+0xf48>
    d872:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d874:	2b01      	cmp	r3, #1
    d876:	d101      	bne.n	d87c <_dtoa_r+0x384>
    d878:	f000 fc78 	bl	e16c <_dtoa_r+0xc74>
    d87c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    d87e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d880:	4694      	mov	ip, r2
    d882:	4463      	add	r3, ip
    d884:	4698      	mov	r8, r3
    d886:	464b      	mov	r3, r9
    d888:	9312      	str	r3, [sp, #72]	; 0x48
    d88a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    d88c:	4699      	mov	r9, r3
    d88e:	e038      	b.n	d902 <_dtoa_r+0x40a>
    d890:	7ff00000 	.word	0x7ff00000
    d894:	00011175 	.word	0x00011175
    d898:	0000270f 	.word	0x0000270f
    d89c:	00011198 	.word	0x00011198
    d8a0:	000111a4 	.word	0x000111a4
    d8a4:	3ff00000 	.word	0x3ff00000
    d8a8:	fffffc01 	.word	0xfffffc01
    d8ac:	3ff80000 	.word	0x3ff80000
    d8b0:	636f4361 	.word	0x636f4361
    d8b4:	3fd287a7 	.word	0x3fd287a7
    d8b8:	8b60c8b3 	.word	0x8b60c8b3
    d8bc:	3fc68a28 	.word	0x3fc68a28
    d8c0:	509f79fb 	.word	0x509f79fb
    d8c4:	3fd34413 	.word	0x3fd34413
    d8c8:	000111d0 	.word	0x000111d0
    d8cc:	000111a8 	.word	0x000111a8
    d8d0:	401c0000 	.word	0x401c0000
    d8d4:	fcc00000 	.word	0xfcc00000
    d8d8:	3fe00000 	.word	0x3fe00000
    d8dc:	002a      	movs	r2, r5
    d8de:	0033      	movs	r3, r6
    d8e0:	2000      	movs	r0, #0
    d8e2:	49b9      	ldr	r1, [pc, #740]	; (dbc8 <_dtoa_r+0x6d0>)
    d8e4:	f7fd f962 	bl	abac <__aeabi_dsub>
    d8e8:	9a08      	ldr	r2, [sp, #32]
    d8ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d8ec:	f7fd fd8a 	bl	b404 <__aeabi_dcmplt>
    d8f0:	2800      	cmp	r0, #0
    d8f2:	d001      	beq.n	d8f8 <_dtoa_r+0x400>
    d8f4:	f000 fd74 	bl	e3e0 <_dtoa_r+0xee8>
    d8f8:	46a1      	mov	r9, r4
    d8fa:	4544      	cmp	r4, r8
    d8fc:	d101      	bne.n	d902 <_dtoa_r+0x40a>
    d8fe:	f000 fc33 	bl	e168 <_dtoa_r+0xc70>
    d902:	9808      	ldr	r0, [sp, #32]
    d904:	9909      	ldr	r1, [sp, #36]	; 0x24
    d906:	2200      	movs	r2, #0
    d908:	4bb0      	ldr	r3, [pc, #704]	; (dbcc <_dtoa_r+0x6d4>)
    d90a:	f7fc fecf 	bl	a6ac <__aeabi_dmul>
    d90e:	2200      	movs	r2, #0
    d910:	4bae      	ldr	r3, [pc, #696]	; (dbcc <_dtoa_r+0x6d4>)
    d912:	9008      	str	r0, [sp, #32]
    d914:	9109      	str	r1, [sp, #36]	; 0x24
    d916:	0028      	movs	r0, r5
    d918:	0031      	movs	r1, r6
    d91a:	f7fc fec7 	bl	a6ac <__aeabi_dmul>
    d91e:	000d      	movs	r5, r1
    d920:	0004      	movs	r4, r0
    d922:	f7fd fc59 	bl	b1d8 <__aeabi_d2iz>
    d926:	0007      	movs	r7, r0
    d928:	f7fd fc8a 	bl	b240 <__aeabi_i2d>
    d92c:	0002      	movs	r2, r0
    d92e:	000b      	movs	r3, r1
    d930:	0020      	movs	r0, r4
    d932:	0029      	movs	r1, r5
    d934:	f7fd f93a 	bl	abac <__aeabi_dsub>
    d938:	464b      	mov	r3, r9
    d93a:	3730      	adds	r7, #48	; 0x30
    d93c:	b2ff      	uxtb	r7, r7
    d93e:	1c5c      	adds	r4, r3, #1
    d940:	701f      	strb	r7, [r3, #0]
    d942:	9a08      	ldr	r2, [sp, #32]
    d944:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d946:	0005      	movs	r5, r0
    d948:	000e      	movs	r6, r1
    d94a:	f7fd fd5b 	bl	b404 <__aeabi_dcmplt>
    d94e:	2800      	cmp	r0, #0
    d950:	d0c4      	beq.n	d8dc <_dtoa_r+0x3e4>
    d952:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    d954:	9303      	str	r3, [sp, #12]
    d956:	4659      	mov	r1, fp
    d958:	4650      	mov	r0, sl
    d95a:	f001 fdd7 	bl	f50c <_Bfree>
    d95e:	2300      	movs	r3, #0
    d960:	7023      	strb	r3, [r4, #0]
    d962:	9b03      	ldr	r3, [sp, #12]
    d964:	9a24      	ldr	r2, [sp, #144]	; 0x90
    d966:	3301      	adds	r3, #1
    d968:	6013      	str	r3, [r2, #0]
    d96a:	9b26      	ldr	r3, [sp, #152]	; 0x98
    d96c:	2b00      	cmp	r3, #0
    d96e:	d100      	bne.n	d972 <_dtoa_r+0x47a>
    d970:	e3a8      	b.n	e0c4 <_dtoa_r+0xbcc>
    d972:	601c      	str	r4, [r3, #0]
    d974:	980a      	ldr	r0, [sp, #40]	; 0x28
    d976:	e5f4      	b.n	d562 <_dtoa_r+0x6a>
    d978:	9b16      	ldr	r3, [sp, #88]	; 0x58
    d97a:	4699      	mov	r9, r3
    d97c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    d97e:	444b      	add	r3, r9
    d980:	001c      	movs	r4, r3
    d982:	4b93      	ldr	r3, [pc, #588]	; (dbd0 <_dtoa_r+0x6d8>)
    d984:	18e3      	adds	r3, r4, r3
    d986:	2b20      	cmp	r3, #32
    d988:	dc00      	bgt.n	d98c <_dtoa_r+0x494>
    d98a:	e17e      	b.n	dc8a <_dtoa_r+0x792>
    d98c:	0031      	movs	r1, r6
    d98e:	4a91      	ldr	r2, [pc, #580]	; (dbd4 <_dtoa_r+0x6dc>)
    d990:	4640      	mov	r0, r8
    d992:	18a2      	adds	r2, r4, r2
    d994:	40d1      	lsrs	r1, r2
    d996:	000a      	movs	r2, r1
    d998:	2140      	movs	r1, #64	; 0x40
    d99a:	1acb      	subs	r3, r1, r3
    d99c:	4098      	lsls	r0, r3
    d99e:	4310      	orrs	r0, r2
    d9a0:	f7fd fc90 	bl	b2c4 <__aeabi_ui2d>
    d9a4:	1e63      	subs	r3, r4, #1
    d9a6:	4698      	mov	r8, r3
    d9a8:	2301      	movs	r3, #1
    d9aa:	4d8b      	ldr	r5, [pc, #556]	; (dbd8 <_dtoa_r+0x6e0>)
    d9ac:	930f      	str	r3, [sp, #60]	; 0x3c
    d9ae:	1949      	adds	r1, r1, r5
    d9b0:	e618      	b.n	d5e4 <_dtoa_r+0xec>
    d9b2:	488a      	ldr	r0, [pc, #552]	; (dbdc <_dtoa_r+0x6e4>)
    d9b4:	e5d5      	b.n	d562 <_dtoa_r+0x6a>
    d9b6:	2300      	movs	r3, #0
    d9b8:	4652      	mov	r2, sl
    d9ba:	2100      	movs	r1, #0
    d9bc:	6453      	str	r3, [r2, #68]	; 0x44
    d9be:	4650      	mov	r0, sl
    d9c0:	f001 fd7c 	bl	f4bc <_Balloc>
    d9c4:	4653      	mov	r3, sl
    d9c6:	6418      	str	r0, [r3, #64]	; 0x40
    d9c8:	2301      	movs	r3, #1
    d9ca:	425b      	negs	r3, r3
    d9cc:	9307      	str	r3, [sp, #28]
    d9ce:	930e      	str	r3, [sp, #56]	; 0x38
    d9d0:	3302      	adds	r3, #2
    d9d2:	2200      	movs	r2, #0
    d9d4:	930b      	str	r3, [sp, #44]	; 0x2c
    d9d6:	2300      	movs	r3, #0
    d9d8:	900a      	str	r0, [sp, #40]	; 0x28
    d9da:	9223      	str	r2, [sp, #140]	; 0x8c
    d9dc:	9322      	str	r3, [sp, #136]	; 0x88
    d9de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    d9e0:	2b00      	cmp	r3, #0
    d9e2:	da00      	bge.n	d9e6 <_dtoa_r+0x4ee>
    d9e4:	e0ab      	b.n	db3e <_dtoa_r+0x646>
    d9e6:	9a03      	ldr	r2, [sp, #12]
    d9e8:	2a0e      	cmp	r2, #14
    d9ea:	dd00      	ble.n	d9ee <_dtoa_r+0x4f6>
    d9ec:	e0a7      	b.n	db3e <_dtoa_r+0x646>
    d9ee:	4b7c      	ldr	r3, [pc, #496]	; (dbe0 <_dtoa_r+0x6e8>)
    d9f0:	00d2      	lsls	r2, r2, #3
    d9f2:	189b      	adds	r3, r3, r2
    d9f4:	685c      	ldr	r4, [r3, #4]
    d9f6:	681b      	ldr	r3, [r3, #0]
    d9f8:	9304      	str	r3, [sp, #16]
    d9fa:	9405      	str	r4, [sp, #20]
    d9fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    d9fe:	2b00      	cmp	r3, #0
    da00:	da00      	bge.n	da04 <_dtoa_r+0x50c>
    da02:	e2a7      	b.n	df54 <_dtoa_r+0xa5c>
    da04:	9c04      	ldr	r4, [sp, #16]
    da06:	9d05      	ldr	r5, [sp, #20]
    da08:	0030      	movs	r0, r6
    da0a:	0022      	movs	r2, r4
    da0c:	002b      	movs	r3, r5
    da0e:	0039      	movs	r1, r7
    da10:	f7fc fb18 	bl	a044 <__aeabi_ddiv>
    da14:	f7fd fbe0 	bl	b1d8 <__aeabi_d2iz>
    da18:	4680      	mov	r8, r0
    da1a:	f7fd fc11 	bl	b240 <__aeabi_i2d>
    da1e:	0022      	movs	r2, r4
    da20:	002b      	movs	r3, r5
    da22:	f7fc fe43 	bl	a6ac <__aeabi_dmul>
    da26:	0002      	movs	r2, r0
    da28:	000b      	movs	r3, r1
    da2a:	0030      	movs	r0, r6
    da2c:	0039      	movs	r1, r7
    da2e:	f7fd f8bd 	bl	abac <__aeabi_dsub>
    da32:	4643      	mov	r3, r8
    da34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    da36:	3330      	adds	r3, #48	; 0x30
    da38:	7013      	strb	r3, [r2, #0]
    da3a:	9b07      	ldr	r3, [sp, #28]
    da3c:	0006      	movs	r6, r0
    da3e:	000f      	movs	r7, r1
    da40:	1c54      	adds	r4, r2, #1
    da42:	2b01      	cmp	r3, #1
    da44:	d04e      	beq.n	dae4 <_dtoa_r+0x5ec>
    da46:	2200      	movs	r2, #0
    da48:	4b60      	ldr	r3, [pc, #384]	; (dbcc <_dtoa_r+0x6d4>)
    da4a:	f7fc fe2f 	bl	a6ac <__aeabi_dmul>
    da4e:	2200      	movs	r2, #0
    da50:	2300      	movs	r3, #0
    da52:	0006      	movs	r6, r0
    da54:	000f      	movs	r7, r1
    da56:	f7fd fccf 	bl	b3f8 <__aeabi_dcmpeq>
    da5a:	2800      	cmp	r0, #0
    da5c:	d000      	beq.n	da60 <_dtoa_r+0x568>
    da5e:	e77a      	b.n	d956 <_dtoa_r+0x45e>
    da60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    da62:	9a07      	ldr	r2, [sp, #28]
    da64:	1c9d      	adds	r5, r3, #2
    da66:	469c      	mov	ip, r3
    da68:	465b      	mov	r3, fp
    da6a:	9306      	str	r3, [sp, #24]
    da6c:	4653      	mov	r3, sl
    da6e:	4462      	add	r2, ip
    da70:	46aa      	mov	sl, r5
    da72:	9c04      	ldr	r4, [sp, #16]
    da74:	9d05      	ldr	r5, [sp, #20]
    da76:	4691      	mov	r9, r2
    da78:	9307      	str	r3, [sp, #28]
    da7a:	e00f      	b.n	da9c <_dtoa_r+0x5a4>
    da7c:	2200      	movs	r2, #0
    da7e:	4b53      	ldr	r3, [pc, #332]	; (dbcc <_dtoa_r+0x6d4>)
    da80:	f7fc fe14 	bl	a6ac <__aeabi_dmul>
    da84:	2301      	movs	r3, #1
    da86:	469c      	mov	ip, r3
    da88:	2200      	movs	r2, #0
    da8a:	2300      	movs	r3, #0
    da8c:	0006      	movs	r6, r0
    da8e:	000f      	movs	r7, r1
    da90:	44e2      	add	sl, ip
    da92:	f7fd fcb1 	bl	b3f8 <__aeabi_dcmpeq>
    da96:	2800      	cmp	r0, #0
    da98:	d000      	beq.n	da9c <_dtoa_r+0x5a4>
    da9a:	e2d9      	b.n	e050 <_dtoa_r+0xb58>
    da9c:	0022      	movs	r2, r4
    da9e:	002b      	movs	r3, r5
    daa0:	0030      	movs	r0, r6
    daa2:	0039      	movs	r1, r7
    daa4:	f7fc face 	bl	a044 <__aeabi_ddiv>
    daa8:	f7fd fb96 	bl	b1d8 <__aeabi_d2iz>
    daac:	4680      	mov	r8, r0
    daae:	f7fd fbc7 	bl	b240 <__aeabi_i2d>
    dab2:	0022      	movs	r2, r4
    dab4:	002b      	movs	r3, r5
    dab6:	f7fc fdf9 	bl	a6ac <__aeabi_dmul>
    daba:	0002      	movs	r2, r0
    dabc:	000b      	movs	r3, r1
    dabe:	0030      	movs	r0, r6
    dac0:	0039      	movs	r1, r7
    dac2:	f7fd f873 	bl	abac <__aeabi_dsub>
    dac6:	4653      	mov	r3, sl
    dac8:	4642      	mov	r2, r8
    daca:	3b01      	subs	r3, #1
    dacc:	3230      	adds	r2, #48	; 0x30
    dace:	0006      	movs	r6, r0
    dad0:	000f      	movs	r7, r1
    dad2:	46d3      	mov	fp, sl
    dad4:	701a      	strb	r2, [r3, #0]
    dad6:	45d1      	cmp	r9, sl
    dad8:	d1d0      	bne.n	da7c <_dtoa_r+0x584>
    dada:	9b06      	ldr	r3, [sp, #24]
    dadc:	4654      	mov	r4, sl
    dade:	469b      	mov	fp, r3
    dae0:	9b07      	ldr	r3, [sp, #28]
    dae2:	469a      	mov	sl, r3
    dae4:	0032      	movs	r2, r6
    dae6:	003b      	movs	r3, r7
    dae8:	0030      	movs	r0, r6
    daea:	0039      	movs	r1, r7
    daec:	f002 fcd4 	bl	10498 <__aeabi_dadd>
    daf0:	0006      	movs	r6, r0
    daf2:	000f      	movs	r7, r1
    daf4:	0002      	movs	r2, r0
    daf6:	000b      	movs	r3, r1
    daf8:	9804      	ldr	r0, [sp, #16]
    dafa:	9905      	ldr	r1, [sp, #20]
    dafc:	f7fd fc82 	bl	b404 <__aeabi_dcmplt>
    db00:	2800      	cmp	r0, #0
    db02:	d10c      	bne.n	db1e <_dtoa_r+0x626>
    db04:	9804      	ldr	r0, [sp, #16]
    db06:	9905      	ldr	r1, [sp, #20]
    db08:	0032      	movs	r2, r6
    db0a:	003b      	movs	r3, r7
    db0c:	f7fd fc74 	bl	b3f8 <__aeabi_dcmpeq>
    db10:	2800      	cmp	r0, #0
    db12:	d100      	bne.n	db16 <_dtoa_r+0x61e>
    db14:	e71f      	b.n	d956 <_dtoa_r+0x45e>
    db16:	4643      	mov	r3, r8
    db18:	07db      	lsls	r3, r3, #31
    db1a:	d400      	bmi.n	db1e <_dtoa_r+0x626>
    db1c:	e71b      	b.n	d956 <_dtoa_r+0x45e>
    db1e:	1e65      	subs	r5, r4, #1
    db20:	782f      	ldrb	r7, [r5, #0]
    db22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    db24:	e006      	b.n	db34 <_dtoa_r+0x63c>
    db26:	429d      	cmp	r5, r3
    db28:	d100      	bne.n	db2c <_dtoa_r+0x634>
    db2a:	e351      	b.n	e1d0 <_dtoa_r+0xcd8>
    db2c:	3c02      	subs	r4, #2
    db2e:	7827      	ldrb	r7, [r4, #0]
    db30:	002c      	movs	r4, r5
    db32:	3d01      	subs	r5, #1
    db34:	2f39      	cmp	r7, #57	; 0x39
    db36:	d0f6      	beq.n	db26 <_dtoa_r+0x62e>
    db38:	3701      	adds	r7, #1
    db3a:	702f      	strb	r7, [r5, #0]
    db3c:	e70b      	b.n	d956 <_dtoa_r+0x45e>
    db3e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    db40:	2a00      	cmp	r2, #0
    db42:	d04f      	beq.n	dbe4 <_dtoa_r+0x6ec>
    db44:	9a22      	ldr	r2, [sp, #136]	; 0x88
    db46:	2a01      	cmp	r2, #1
    db48:	dc00      	bgt.n	db4c <_dtoa_r+0x654>
    db4a:	e22c      	b.n	dfa6 <_dtoa_r+0xaae>
    db4c:	9b07      	ldr	r3, [sp, #28]
    db4e:	1e5c      	subs	r4, r3, #1
    db50:	464b      	mov	r3, r9
    db52:	45a1      	cmp	r9, r4
    db54:	da00      	bge.n	db58 <_dtoa_r+0x660>
    db56:	e2b8      	b.n	e0ca <_dtoa_r+0xbd2>
    db58:	1b1c      	subs	r4, r3, r4
    db5a:	9b07      	ldr	r3, [sp, #28]
    db5c:	2b00      	cmp	r3, #0
    db5e:	da00      	bge.n	db62 <_dtoa_r+0x66a>
    db60:	e3d4      	b.n	e30c <_dtoa_r+0xe14>
    db62:	9b06      	ldr	r3, [sp, #24]
    db64:	9308      	str	r3, [sp, #32]
    db66:	9b07      	ldr	r3, [sp, #28]
    db68:	9a06      	ldr	r2, [sp, #24]
    db6a:	2101      	movs	r1, #1
    db6c:	4694      	mov	ip, r2
    db6e:	449c      	add	ip, r3
    db70:	4662      	mov	r2, ip
    db72:	9206      	str	r2, [sp, #24]
    db74:	9a04      	ldr	r2, [sp, #16]
    db76:	4650      	mov	r0, sl
    db78:	4694      	mov	ip, r2
    db7a:	449c      	add	ip, r3
    db7c:	4663      	mov	r3, ip
    db7e:	9304      	str	r3, [sp, #16]
    db80:	f001 fd5c 	bl	f63c <__i2b>
    db84:	4680      	mov	r8, r0
    db86:	e032      	b.n	dbee <_dtoa_r+0x6f6>
    db88:	9a06      	ldr	r2, [sp, #24]
    db8a:	9b03      	ldr	r3, [sp, #12]
    db8c:	1ad2      	subs	r2, r2, r3
    db8e:	425b      	negs	r3, r3
    db90:	4699      	mov	r9, r3
    db92:	2300      	movs	r3, #0
    db94:	9206      	str	r2, [sp, #24]
    db96:	930d      	str	r3, [sp, #52]	; 0x34
    db98:	e579      	b.n	d68e <_dtoa_r+0x196>
    db9a:	9803      	ldr	r0, [sp, #12]
    db9c:	f7fd fb50 	bl	b240 <__aeabi_i2d>
    dba0:	000b      	movs	r3, r1
    dba2:	0002      	movs	r2, r0
    dba4:	0029      	movs	r1, r5
    dba6:	0020      	movs	r0, r4
    dba8:	f7fd fc26 	bl	b3f8 <__aeabi_dcmpeq>
    dbac:	0002      	movs	r2, r0
    dbae:	4250      	negs	r0, r2
    dbb0:	4150      	adcs	r0, r2
    dbb2:	9b03      	ldr	r3, [sp, #12]
    dbb4:	1a1b      	subs	r3, r3, r0
    dbb6:	9303      	str	r3, [sp, #12]
    dbb8:	e53d      	b.n	d636 <_dtoa_r+0x13e>
    dbba:	2301      	movs	r3, #1
    dbbc:	1a9b      	subs	r3, r3, r2
    dbbe:	9306      	str	r3, [sp, #24]
    dbc0:	2300      	movs	r3, #0
    dbc2:	9304      	str	r3, [sp, #16]
    dbc4:	e557      	b.n	d676 <_dtoa_r+0x17e>
    dbc6:	46c0      	nop			; (mov r8, r8)
    dbc8:	3ff00000 	.word	0x3ff00000
    dbcc:	40240000 	.word	0x40240000
    dbd0:	00000432 	.word	0x00000432
    dbd4:	00000412 	.word	0x00000412
    dbd8:	fe100000 	.word	0xfe100000
    dbdc:	00011174 	.word	0x00011174
    dbe0:	000111d0 	.word	0x000111d0
    dbe4:	9b06      	ldr	r3, [sp, #24]
    dbe6:	464c      	mov	r4, r9
    dbe8:	9308      	str	r3, [sp, #32]
    dbea:	2300      	movs	r3, #0
    dbec:	4698      	mov	r8, r3
    dbee:	9908      	ldr	r1, [sp, #32]
    dbf0:	1e0b      	subs	r3, r1, #0
    dbf2:	dd0e      	ble.n	dc12 <_dtoa_r+0x71a>
    dbf4:	9a04      	ldr	r2, [sp, #16]
    dbf6:	2a00      	cmp	r2, #0
    dbf8:	dd0b      	ble.n	dc12 <_dtoa_r+0x71a>
    dbfa:	4293      	cmp	r3, r2
    dbfc:	dd00      	ble.n	dc00 <_dtoa_r+0x708>
    dbfe:	e187      	b.n	df10 <_dtoa_r+0xa18>
    dc00:	9a06      	ldr	r2, [sp, #24]
    dc02:	1ad2      	subs	r2, r2, r3
    dc04:	9206      	str	r2, [sp, #24]
    dc06:	9a08      	ldr	r2, [sp, #32]
    dc08:	1ad2      	subs	r2, r2, r3
    dc0a:	9208      	str	r2, [sp, #32]
    dc0c:	9a04      	ldr	r2, [sp, #16]
    dc0e:	1ad3      	subs	r3, r2, r3
    dc10:	9304      	str	r3, [sp, #16]
    dc12:	464b      	mov	r3, r9
    dc14:	2b00      	cmp	r3, #0
    dc16:	d01a      	beq.n	dc4e <_dtoa_r+0x756>
    dc18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    dc1a:	2b00      	cmp	r3, #0
    dc1c:	d100      	bne.n	dc20 <_dtoa_r+0x728>
    dc1e:	e1bb      	b.n	df98 <_dtoa_r+0xaa0>
    dc20:	2c00      	cmp	r4, #0
    dc22:	dd10      	ble.n	dc46 <_dtoa_r+0x74e>
    dc24:	4641      	mov	r1, r8
    dc26:	0022      	movs	r2, r4
    dc28:	4650      	mov	r0, sl
    dc2a:	f001 fdbb 	bl	f7a4 <__pow5mult>
    dc2e:	465a      	mov	r2, fp
    dc30:	0001      	movs	r1, r0
    dc32:	4680      	mov	r8, r0
    dc34:	4650      	mov	r0, sl
    dc36:	f001 fd0b 	bl	f650 <__multiply>
    dc3a:	0005      	movs	r5, r0
    dc3c:	4659      	mov	r1, fp
    dc3e:	4650      	mov	r0, sl
    dc40:	f001 fc64 	bl	f50c <_Bfree>
    dc44:	46ab      	mov	fp, r5
    dc46:	464b      	mov	r3, r9
    dc48:	1b1a      	subs	r2, r3, r4
    dc4a:	d000      	beq.n	dc4e <_dtoa_r+0x756>
    dc4c:	e1a5      	b.n	df9a <_dtoa_r+0xaa2>
    dc4e:	2101      	movs	r1, #1
    dc50:	4650      	mov	r0, sl
    dc52:	f001 fcf3 	bl	f63c <__i2b>
    dc56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    dc58:	4681      	mov	r9, r0
    dc5a:	2b00      	cmp	r3, #0
    dc5c:	dd1d      	ble.n	dc9a <_dtoa_r+0x7a2>
    dc5e:	001a      	movs	r2, r3
    dc60:	0001      	movs	r1, r0
    dc62:	4650      	mov	r0, sl
    dc64:	f001 fd9e 	bl	f7a4 <__pow5mult>
    dc68:	9b22      	ldr	r3, [sp, #136]	; 0x88
    dc6a:	4681      	mov	r9, r0
    dc6c:	2b01      	cmp	r3, #1
    dc6e:	dc00      	bgt.n	dc72 <_dtoa_r+0x77a>
    dc70:	e150      	b.n	df14 <_dtoa_r+0xa1c>
    dc72:	2400      	movs	r4, #0
    dc74:	464b      	mov	r3, r9
    dc76:	691b      	ldr	r3, [r3, #16]
    dc78:	3303      	adds	r3, #3
    dc7a:	009b      	lsls	r3, r3, #2
    dc7c:	444b      	add	r3, r9
    dc7e:	6858      	ldr	r0, [r3, #4]
    dc80:	f001 fc94 	bl	f5ac <__hi0bits>
    dc84:	2320      	movs	r3, #32
    dc86:	1a1b      	subs	r3, r3, r0
    dc88:	e010      	b.n	dcac <_dtoa_r+0x7b4>
    dc8a:	2220      	movs	r2, #32
    dc8c:	0030      	movs	r0, r6
    dc8e:	1ad3      	subs	r3, r2, r3
    dc90:	4098      	lsls	r0, r3
    dc92:	e685      	b.n	d9a0 <_dtoa_r+0x4a8>
    dc94:	2300      	movs	r3, #0
    dc96:	930c      	str	r3, [sp, #48]	; 0x30
    dc98:	e4e3      	b.n	d662 <_dtoa_r+0x16a>
    dc9a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    dc9c:	2400      	movs	r4, #0
    dc9e:	2b01      	cmp	r3, #1
    dca0:	dc00      	bgt.n	dca4 <_dtoa_r+0x7ac>
    dca2:	e18b      	b.n	dfbc <_dtoa_r+0xac4>
    dca4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    dca6:	2301      	movs	r3, #1
    dca8:	2a00      	cmp	r2, #0
    dcaa:	d1e3      	bne.n	dc74 <_dtoa_r+0x77c>
    dcac:	9904      	ldr	r1, [sp, #16]
    dcae:	201f      	movs	r0, #31
    dcb0:	468c      	mov	ip, r1
    dcb2:	4463      	add	r3, ip
    dcb4:	4018      	ands	r0, r3
    dcb6:	d100      	bne.n	dcba <_dtoa_r+0x7c2>
    dcb8:	e0ae      	b.n	de18 <_dtoa_r+0x920>
    dcba:	2320      	movs	r3, #32
    dcbc:	1a1b      	subs	r3, r3, r0
    dcbe:	2b04      	cmp	r3, #4
    dcc0:	dc00      	bgt.n	dcc4 <_dtoa_r+0x7cc>
    dcc2:	e3cc      	b.n	e45e <_dtoa_r+0xf66>
    dcc4:	231c      	movs	r3, #28
    dcc6:	1a18      	subs	r0, r3, r0
    dcc8:	9b06      	ldr	r3, [sp, #24]
    dcca:	469c      	mov	ip, r3
    dccc:	4484      	add	ip, r0
    dcce:	4663      	mov	r3, ip
    dcd0:	9306      	str	r3, [sp, #24]
    dcd2:	9b08      	ldr	r3, [sp, #32]
    dcd4:	469c      	mov	ip, r3
    dcd6:	4484      	add	ip, r0
    dcd8:	4663      	mov	r3, ip
    dcda:	468c      	mov	ip, r1
    dcdc:	4484      	add	ip, r0
    dcde:	9308      	str	r3, [sp, #32]
    dce0:	4663      	mov	r3, ip
    dce2:	9304      	str	r3, [sp, #16]
    dce4:	9b06      	ldr	r3, [sp, #24]
    dce6:	2b00      	cmp	r3, #0
    dce8:	dd05      	ble.n	dcf6 <_dtoa_r+0x7fe>
    dcea:	4659      	mov	r1, fp
    dcec:	001a      	movs	r2, r3
    dcee:	4650      	mov	r0, sl
    dcf0:	f001 fdb8 	bl	f864 <__lshift>
    dcf4:	4683      	mov	fp, r0
    dcf6:	9b04      	ldr	r3, [sp, #16]
    dcf8:	2b00      	cmp	r3, #0
    dcfa:	dd05      	ble.n	dd08 <_dtoa_r+0x810>
    dcfc:	4649      	mov	r1, r9
    dcfe:	001a      	movs	r2, r3
    dd00:	4650      	mov	r0, sl
    dd02:	f001 fdaf 	bl	f864 <__lshift>
    dd06:	4681      	mov	r9, r0
    dd08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    dd0a:	2b00      	cmp	r3, #0
    dd0c:	d000      	beq.n	dd10 <_dtoa_r+0x818>
    dd0e:	e094      	b.n	de3a <_dtoa_r+0x942>
    dd10:	9b07      	ldr	r3, [sp, #28]
    dd12:	2b00      	cmp	r3, #0
    dd14:	dc00      	bgt.n	dd18 <_dtoa_r+0x820>
    dd16:	e175      	b.n	e004 <_dtoa_r+0xb0c>
    dd18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    dd1a:	2b00      	cmp	r3, #0
    dd1c:	d100      	bne.n	dd20 <_dtoa_r+0x828>
    dd1e:	e0a6      	b.n	de6e <_dtoa_r+0x976>
    dd20:	9b08      	ldr	r3, [sp, #32]
    dd22:	2b00      	cmp	r3, #0
    dd24:	dd05      	ble.n	dd32 <_dtoa_r+0x83a>
    dd26:	4641      	mov	r1, r8
    dd28:	001a      	movs	r2, r3
    dd2a:	4650      	mov	r0, sl
    dd2c:	f001 fd9a 	bl	f864 <__lshift>
    dd30:	4680      	mov	r8, r0
    dd32:	4643      	mov	r3, r8
    dd34:	930c      	str	r3, [sp, #48]	; 0x30
    dd36:	2c00      	cmp	r4, #0
    dd38:	d000      	beq.n	dd3c <_dtoa_r+0x844>
    dd3a:	e250      	b.n	e1de <_dtoa_r+0xce6>
    dd3c:	9c07      	ldr	r4, [sp, #28]
    dd3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    dd40:	3c01      	subs	r4, #1
    dd42:	0023      	movs	r3, r4
    dd44:	4694      	mov	ip, r2
    dd46:	4463      	add	r3, ip
    dd48:	9308      	str	r3, [sp, #32]
    dd4a:	2301      	movs	r3, #1
    dd4c:	4033      	ands	r3, r6
    dd4e:	9307      	str	r3, [sp, #28]
    dd50:	464b      	mov	r3, r9
    dd52:	9306      	str	r3, [sp, #24]
    dd54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    dd56:	4657      	mov	r7, sl
    dd58:	4645      	mov	r5, r8
    dd5a:	465e      	mov	r6, fp
    dd5c:	4692      	mov	sl, r2
    dd5e:	4698      	mov	r8, r3
    dd60:	9b06      	ldr	r3, [sp, #24]
    dd62:	0030      	movs	r0, r6
    dd64:	0019      	movs	r1, r3
    dd66:	4699      	mov	r9, r3
    dd68:	f7ff fb1c 	bl	d3a4 <quorem>
    dd6c:	0003      	movs	r3, r0
    dd6e:	900b      	str	r0, [sp, #44]	; 0x2c
    dd70:	3330      	adds	r3, #48	; 0x30
    dd72:	0029      	movs	r1, r5
    dd74:	0030      	movs	r0, r6
    dd76:	9304      	str	r3, [sp, #16]
    dd78:	f001 fdd4 	bl	f924 <__mcmp>
    dd7c:	4649      	mov	r1, r9
    dd7e:	0004      	movs	r4, r0
    dd80:	4642      	mov	r2, r8
    dd82:	0038      	movs	r0, r7
    dd84:	f001 fde8 	bl	f958 <__mdiff>
    dd88:	68c3      	ldr	r3, [r0, #12]
    dd8a:	4681      	mov	r9, r0
    dd8c:	2b00      	cmp	r3, #0
    dd8e:	d000      	beq.n	dd92 <_dtoa_r+0x89a>
    dd90:	e11e      	b.n	dfd0 <_dtoa_r+0xad8>
    dd92:	0001      	movs	r1, r0
    dd94:	0030      	movs	r0, r6
    dd96:	f001 fdc5 	bl	f924 <__mcmp>
    dd9a:	4683      	mov	fp, r0
    dd9c:	4649      	mov	r1, r9
    dd9e:	0038      	movs	r0, r7
    dda0:	f001 fbb4 	bl	f50c <_Bfree>
    dda4:	465b      	mov	r3, fp
    dda6:	9a22      	ldr	r2, [sp, #136]	; 0x88
    dda8:	4313      	orrs	r3, r2
    ddaa:	d103      	bne.n	ddb4 <_dtoa_r+0x8bc>
    ddac:	9b07      	ldr	r3, [sp, #28]
    ddae:	2b00      	cmp	r3, #0
    ddb0:	d100      	bne.n	ddb4 <_dtoa_r+0x8bc>
    ddb2:	e306      	b.n	e3c2 <_dtoa_r+0xeca>
    ddb4:	2c00      	cmp	r4, #0
    ddb6:	da00      	bge.n	ddba <_dtoa_r+0x8c2>
    ddb8:	e1a8      	b.n	e10c <_dtoa_r+0xc14>
    ddba:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ddbc:	431c      	orrs	r4, r3
    ddbe:	d103      	bne.n	ddc8 <_dtoa_r+0x8d0>
    ddc0:	9b07      	ldr	r3, [sp, #28]
    ddc2:	2b00      	cmp	r3, #0
    ddc4:	d100      	bne.n	ddc8 <_dtoa_r+0x8d0>
    ddc6:	e1a1      	b.n	e10c <_dtoa_r+0xc14>
    ddc8:	465b      	mov	r3, fp
    ddca:	2b00      	cmp	r3, #0
    ddcc:	dd00      	ble.n	ddd0 <_dtoa_r+0x8d8>
    ddce:	e282      	b.n	e2d6 <_dtoa_r+0xdde>
    ddd0:	4669      	mov	r1, sp
    ddd2:	4652      	mov	r2, sl
    ddd4:	4653      	mov	r3, sl
    ddd6:	7c09      	ldrb	r1, [r1, #16]
    ddd8:	1c5c      	adds	r4, r3, #1
    ddda:	7011      	strb	r1, [r2, #0]
    dddc:	9a08      	ldr	r2, [sp, #32]
    ddde:	4552      	cmp	r2, sl
    dde0:	d100      	bne.n	dde4 <_dtoa_r+0x8ec>
    dde2:	e28a      	b.n	e2fa <_dtoa_r+0xe02>
    dde4:	0031      	movs	r1, r6
    dde6:	2300      	movs	r3, #0
    dde8:	220a      	movs	r2, #10
    ddea:	0038      	movs	r0, r7
    ddec:	f001 fb98 	bl	f520 <__multadd>
    ddf0:	2300      	movs	r3, #0
    ddf2:	0006      	movs	r6, r0
    ddf4:	220a      	movs	r2, #10
    ddf6:	0029      	movs	r1, r5
    ddf8:	0038      	movs	r0, r7
    ddfa:	4545      	cmp	r5, r8
    ddfc:	d100      	bne.n	de00 <_dtoa_r+0x908>
    ddfe:	e0e1      	b.n	dfc4 <_dtoa_r+0xacc>
    de00:	f001 fb8e 	bl	f520 <__multadd>
    de04:	4641      	mov	r1, r8
    de06:	0005      	movs	r5, r0
    de08:	2300      	movs	r3, #0
    de0a:	220a      	movs	r2, #10
    de0c:	0038      	movs	r0, r7
    de0e:	f001 fb87 	bl	f520 <__multadd>
    de12:	46a2      	mov	sl, r4
    de14:	4680      	mov	r8, r0
    de16:	e7a3      	b.n	dd60 <_dtoa_r+0x868>
    de18:	201c      	movs	r0, #28
    de1a:	9b06      	ldr	r3, [sp, #24]
    de1c:	469c      	mov	ip, r3
    de1e:	4484      	add	ip, r0
    de20:	4663      	mov	r3, ip
    de22:	9306      	str	r3, [sp, #24]
    de24:	9b08      	ldr	r3, [sp, #32]
    de26:	469c      	mov	ip, r3
    de28:	4484      	add	ip, r0
    de2a:	4663      	mov	r3, ip
    de2c:	9308      	str	r3, [sp, #32]
    de2e:	9b04      	ldr	r3, [sp, #16]
    de30:	469c      	mov	ip, r3
    de32:	4484      	add	ip, r0
    de34:	4663      	mov	r3, ip
    de36:	9304      	str	r3, [sp, #16]
    de38:	e754      	b.n	dce4 <_dtoa_r+0x7ec>
    de3a:	4649      	mov	r1, r9
    de3c:	4658      	mov	r0, fp
    de3e:	f001 fd71 	bl	f924 <__mcmp>
    de42:	2800      	cmp	r0, #0
    de44:	db00      	blt.n	de48 <_dtoa_r+0x950>
    de46:	e763      	b.n	dd10 <_dtoa_r+0x818>
    de48:	9b03      	ldr	r3, [sp, #12]
    de4a:	4659      	mov	r1, fp
    de4c:	3b01      	subs	r3, #1
    de4e:	9303      	str	r3, [sp, #12]
    de50:	220a      	movs	r2, #10
    de52:	2300      	movs	r3, #0
    de54:	4650      	mov	r0, sl
    de56:	f001 fb63 	bl	f520 <__multadd>
    de5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    de5c:	4683      	mov	fp, r0
    de5e:	2b00      	cmp	r3, #0
    de60:	d000      	beq.n	de64 <_dtoa_r+0x96c>
    de62:	e2ca      	b.n	e3fa <_dtoa_r+0xf02>
    de64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    de66:	2b00      	cmp	r3, #0
    de68:	dc00      	bgt.n	de6c <_dtoa_r+0x974>
    de6a:	e2d8      	b.n	e41e <_dtoa_r+0xf26>
    de6c:	9307      	str	r3, [sp, #28]
    de6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    de70:	465d      	mov	r5, fp
    de72:	2400      	movs	r4, #0
    de74:	9f07      	ldr	r7, [sp, #28]
    de76:	469b      	mov	fp, r3
    de78:	e006      	b.n	de88 <_dtoa_r+0x990>
    de7a:	0029      	movs	r1, r5
    de7c:	2300      	movs	r3, #0
    de7e:	220a      	movs	r2, #10
    de80:	4650      	mov	r0, sl
    de82:	f001 fb4d 	bl	f520 <__multadd>
    de86:	0005      	movs	r5, r0
    de88:	4649      	mov	r1, r9
    de8a:	0028      	movs	r0, r5
    de8c:	f7ff fa8a 	bl	d3a4 <quorem>
    de90:	465b      	mov	r3, fp
    de92:	3030      	adds	r0, #48	; 0x30
    de94:	5518      	strb	r0, [r3, r4]
    de96:	3401      	adds	r4, #1
    de98:	42bc      	cmp	r4, r7
    de9a:	dbee      	blt.n	de7a <_dtoa_r+0x982>
    de9c:	46ab      	mov	fp, r5
    de9e:	0006      	movs	r6, r0
    dea0:	9c07      	ldr	r4, [sp, #28]
    dea2:	2c00      	cmp	r4, #0
    dea4:	dc00      	bgt.n	dea8 <_dtoa_r+0x9b0>
    dea6:	e237      	b.n	e318 <_dtoa_r+0xe20>
    dea8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    deaa:	2700      	movs	r7, #0
    deac:	469c      	mov	ip, r3
    deae:	4464      	add	r4, ip
    deb0:	4659      	mov	r1, fp
    deb2:	2201      	movs	r2, #1
    deb4:	4650      	mov	r0, sl
    deb6:	f001 fcd5 	bl	f864 <__lshift>
    deba:	4649      	mov	r1, r9
    debc:	4683      	mov	fp, r0
    debe:	f001 fd31 	bl	f924 <__mcmp>
    dec2:	2800      	cmp	r0, #0
    dec4:	dc00      	bgt.n	dec8 <_dtoa_r+0x9d0>
    dec6:	e144      	b.n	e152 <_dtoa_r+0xc5a>
    dec8:	1e65      	subs	r5, r4, #1
    deca:	782b      	ldrb	r3, [r5, #0]
    decc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    dece:	e006      	b.n	dede <_dtoa_r+0x9e6>
    ded0:	4295      	cmp	r5, r2
    ded2:	d100      	bne.n	ded6 <_dtoa_r+0x9de>
    ded4:	e0b1      	b.n	e03a <_dtoa_r+0xb42>
    ded6:	3c02      	subs	r4, #2
    ded8:	7823      	ldrb	r3, [r4, #0]
    deda:	002c      	movs	r4, r5
    dedc:	3d01      	subs	r5, #1
    dede:	2b39      	cmp	r3, #57	; 0x39
    dee0:	d0f6      	beq.n	ded0 <_dtoa_r+0x9d8>
    dee2:	3301      	adds	r3, #1
    dee4:	702b      	strb	r3, [r5, #0]
    dee6:	4649      	mov	r1, r9
    dee8:	4650      	mov	r0, sl
    deea:	f001 fb0f 	bl	f50c <_Bfree>
    deee:	4643      	mov	r3, r8
    def0:	2b00      	cmp	r3, #0
    def2:	d100      	bne.n	def6 <_dtoa_r+0x9fe>
    def4:	e52f      	b.n	d956 <_dtoa_r+0x45e>
    def6:	2f00      	cmp	r7, #0
    def8:	d005      	beq.n	df06 <_dtoa_r+0xa0e>
    defa:	4547      	cmp	r7, r8
    defc:	d003      	beq.n	df06 <_dtoa_r+0xa0e>
    defe:	0039      	movs	r1, r7
    df00:	4650      	mov	r0, sl
    df02:	f001 fb03 	bl	f50c <_Bfree>
    df06:	4641      	mov	r1, r8
    df08:	4650      	mov	r0, sl
    df0a:	f001 faff 	bl	f50c <_Bfree>
    df0e:	e522      	b.n	d956 <_dtoa_r+0x45e>
    df10:	0013      	movs	r3, r2
    df12:	e675      	b.n	dc00 <_dtoa_r+0x708>
    df14:	2e00      	cmp	r6, #0
    df16:	d000      	beq.n	df1a <_dtoa_r+0xa22>
    df18:	e6ab      	b.n	dc72 <_dtoa_r+0x77a>
    df1a:	033b      	lsls	r3, r7, #12
    df1c:	2400      	movs	r4, #0
    df1e:	2b00      	cmp	r3, #0
    df20:	d000      	beq.n	df24 <_dtoa_r+0xa2c>
    df22:	e6bf      	b.n	dca4 <_dtoa_r+0x7ac>
    df24:	4bba      	ldr	r3, [pc, #744]	; (e210 <_dtoa_r+0xd18>)
    df26:	423b      	tst	r3, r7
    df28:	d100      	bne.n	df2c <_dtoa_r+0xa34>
    df2a:	e6bb      	b.n	dca4 <_dtoa_r+0x7ac>
    df2c:	9b06      	ldr	r3, [sp, #24]
    df2e:	3401      	adds	r4, #1
    df30:	3301      	adds	r3, #1
    df32:	9306      	str	r3, [sp, #24]
    df34:	9b04      	ldr	r3, [sp, #16]
    df36:	3301      	adds	r3, #1
    df38:	9304      	str	r3, [sp, #16]
    df3a:	e6b3      	b.n	dca4 <_dtoa_r+0x7ac>
    df3c:	2301      	movs	r3, #1
    df3e:	930b      	str	r3, [sp, #44]	; 0x2c
    df40:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    df42:	2b00      	cmp	r3, #0
    df44:	dc00      	bgt.n	df48 <_dtoa_r+0xa50>
    df46:	e0d1      	b.n	e0ec <_dtoa_r+0xbf4>
    df48:	001d      	movs	r5, r3
    df4a:	4698      	mov	r8, r3
    df4c:	930e      	str	r3, [sp, #56]	; 0x38
    df4e:	9307      	str	r3, [sp, #28]
    df50:	f7ff fbc8 	bl	d6e4 <_dtoa_r+0x1ec>
    df54:	9b07      	ldr	r3, [sp, #28]
    df56:	2b00      	cmp	r3, #0
    df58:	dd00      	ble.n	df5c <_dtoa_r+0xa64>
    df5a:	e553      	b.n	da04 <_dtoa_r+0x50c>
    df5c:	d000      	beq.n	df60 <_dtoa_r+0xa68>
    df5e:	e0ad      	b.n	e0bc <_dtoa_r+0xbc4>
    df60:	9804      	ldr	r0, [sp, #16]
    df62:	9905      	ldr	r1, [sp, #20]
    df64:	2200      	movs	r2, #0
    df66:	4bab      	ldr	r3, [pc, #684]	; (e214 <_dtoa_r+0xd1c>)
    df68:	f7fc fba0 	bl	a6ac <__aeabi_dmul>
    df6c:	003b      	movs	r3, r7
    df6e:	0032      	movs	r2, r6
    df70:	f7fd fa66 	bl	b440 <__aeabi_dcmpge>
    df74:	2300      	movs	r3, #0
    df76:	4699      	mov	r9, r3
    df78:	4698      	mov	r8, r3
    df7a:	2800      	cmp	r0, #0
    df7c:	d055      	beq.n	e02a <_dtoa_r+0xb32>
    df7e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    df80:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    df82:	43db      	mvns	r3, r3
    df84:	9303      	str	r3, [sp, #12]
    df86:	4649      	mov	r1, r9
    df88:	4650      	mov	r0, sl
    df8a:	f001 fabf 	bl	f50c <_Bfree>
    df8e:	4643      	mov	r3, r8
    df90:	2b00      	cmp	r3, #0
    df92:	d100      	bne.n	df96 <_dtoa_r+0xa9e>
    df94:	e4df      	b.n	d956 <_dtoa_r+0x45e>
    df96:	e7b6      	b.n	df06 <_dtoa_r+0xa0e>
    df98:	464a      	mov	r2, r9
    df9a:	4659      	mov	r1, fp
    df9c:	4650      	mov	r0, sl
    df9e:	f001 fc01 	bl	f7a4 <__pow5mult>
    dfa2:	4683      	mov	fp, r0
    dfa4:	e653      	b.n	dc4e <_dtoa_r+0x756>
    dfa6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    dfa8:	2a00      	cmp	r2, #0
    dfaa:	d100      	bne.n	dfae <_dtoa_r+0xab6>
    dfac:	e1b6      	b.n	e31c <_dtoa_r+0xe24>
    dfae:	4a9a      	ldr	r2, [pc, #616]	; (e218 <_dtoa_r+0xd20>)
    dfb0:	464c      	mov	r4, r9
    dfb2:	4694      	mov	ip, r2
    dfb4:	9a06      	ldr	r2, [sp, #24]
    dfb6:	4463      	add	r3, ip
    dfb8:	9208      	str	r2, [sp, #32]
    dfba:	e5d5      	b.n	db68 <_dtoa_r+0x670>
    dfbc:	2e00      	cmp	r6, #0
    dfbe:	d000      	beq.n	dfc2 <_dtoa_r+0xaca>
    dfc0:	e670      	b.n	dca4 <_dtoa_r+0x7ac>
    dfc2:	e7aa      	b.n	df1a <_dtoa_r+0xa22>
    dfc4:	f001 faac 	bl	f520 <__multadd>
    dfc8:	46a2      	mov	sl, r4
    dfca:	0005      	movs	r5, r0
    dfcc:	4680      	mov	r8, r0
    dfce:	e6c7      	b.n	dd60 <_dtoa_r+0x868>
    dfd0:	2301      	movs	r3, #1
    dfd2:	469b      	mov	fp, r3
    dfd4:	e6e2      	b.n	dd9c <_dtoa_r+0x8a4>
    dfd6:	2300      	movs	r3, #0
    dfd8:	930b      	str	r3, [sp, #44]	; 0x2c
    dfda:	9b22      	ldr	r3, [sp, #136]	; 0x88
    dfdc:	2b02      	cmp	r3, #2
    dfde:	d0af      	beq.n	df40 <_dtoa_r+0xa48>
    dfe0:	2400      	movs	r4, #0
    dfe2:	4653      	mov	r3, sl
    dfe4:	0021      	movs	r1, r4
    dfe6:	645c      	str	r4, [r3, #68]	; 0x44
    dfe8:	4650      	mov	r0, sl
    dfea:	f001 fa67 	bl	f4bc <_Balloc>
    dfee:	4653      	mov	r3, sl
    dff0:	6418      	str	r0, [r3, #64]	; 0x40
    dff2:	2301      	movs	r3, #1
    dff4:	425b      	negs	r3, r3
    dff6:	9307      	str	r3, [sp, #28]
    dff8:	930e      	str	r3, [sp, #56]	; 0x38
    dffa:	3302      	adds	r3, #2
    dffc:	900a      	str	r0, [sp, #40]	; 0x28
    dffe:	9423      	str	r4, [sp, #140]	; 0x8c
    e000:	930b      	str	r3, [sp, #44]	; 0x2c
    e002:	e4ec      	b.n	d9de <_dtoa_r+0x4e6>
    e004:	9b22      	ldr	r3, [sp, #136]	; 0x88
    e006:	2b02      	cmp	r3, #2
    e008:	dc00      	bgt.n	e00c <_dtoa_r+0xb14>
    e00a:	e685      	b.n	dd18 <_dtoa_r+0x820>
    e00c:	9b07      	ldr	r3, [sp, #28]
    e00e:	2b00      	cmp	r3, #0
    e010:	d1b5      	bne.n	df7e <_dtoa_r+0xa86>
    e012:	4649      	mov	r1, r9
    e014:	2205      	movs	r2, #5
    e016:	4650      	mov	r0, sl
    e018:	f001 fa82 	bl	f520 <__multadd>
    e01c:	4681      	mov	r9, r0
    e01e:	0001      	movs	r1, r0
    e020:	4658      	mov	r0, fp
    e022:	f001 fc7f 	bl	f924 <__mcmp>
    e026:	2800      	cmp	r0, #0
    e028:	dda9      	ble.n	df7e <_dtoa_r+0xa86>
    e02a:	2331      	movs	r3, #49	; 0x31
    e02c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    e02e:	7013      	strb	r3, [r2, #0]
    e030:	9b03      	ldr	r3, [sp, #12]
    e032:	1c54      	adds	r4, r2, #1
    e034:	3301      	adds	r3, #1
    e036:	9303      	str	r3, [sp, #12]
    e038:	e7a5      	b.n	df86 <_dtoa_r+0xa8e>
    e03a:	9b03      	ldr	r3, [sp, #12]
    e03c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    e03e:	3301      	adds	r3, #1
    e040:	9303      	str	r3, [sp, #12]
    e042:	2331      	movs	r3, #49	; 0x31
    e044:	7013      	strb	r3, [r2, #0]
    e046:	e74e      	b.n	dee6 <_dtoa_r+0x9ee>
    e048:	2300      	movs	r3, #0
    e04a:	930b      	str	r3, [sp, #44]	; 0x2c
    e04c:	f7ff fb3d 	bl	d6ca <_dtoa_r+0x1d2>
    e050:	9b06      	ldr	r3, [sp, #24]
    e052:	465c      	mov	r4, fp
    e054:	469b      	mov	fp, r3
    e056:	9b07      	ldr	r3, [sp, #28]
    e058:	469a      	mov	sl, r3
    e05a:	e47c      	b.n	d956 <_dtoa_r+0x45e>
    e05c:	4640      	mov	r0, r8
    e05e:	f7fd f8ef 	bl	b240 <__aeabi_i2d>
    e062:	0032      	movs	r2, r6
    e064:	003b      	movs	r3, r7
    e066:	f7fc fb21 	bl	a6ac <__aeabi_dmul>
    e06a:	2200      	movs	r2, #0
    e06c:	4b6b      	ldr	r3, [pc, #428]	; (e21c <_dtoa_r+0xd24>)
    e06e:	f002 fa13 	bl	10498 <__aeabi_dadd>
    e072:	4a6b      	ldr	r2, [pc, #428]	; (e220 <_dtoa_r+0xd28>)
    e074:	000b      	movs	r3, r1
    e076:	4694      	mov	ip, r2
    e078:	4463      	add	r3, ip
    e07a:	9008      	str	r0, [sp, #32]
    e07c:	9109      	str	r1, [sp, #36]	; 0x24
    e07e:	9309      	str	r3, [sp, #36]	; 0x24
    e080:	2200      	movs	r2, #0
    e082:	4b64      	ldr	r3, [pc, #400]	; (e214 <_dtoa_r+0xd1c>)
    e084:	0030      	movs	r0, r6
    e086:	0039      	movs	r1, r7
    e088:	f7fc fd90 	bl	abac <__aeabi_dsub>
    e08c:	9e08      	ldr	r6, [sp, #32]
    e08e:	9f09      	ldr	r7, [sp, #36]	; 0x24
    e090:	0032      	movs	r2, r6
    e092:	003b      	movs	r3, r7
    e094:	0004      	movs	r4, r0
    e096:	000d      	movs	r5, r1
    e098:	f7fd f9c8 	bl	b42c <__aeabi_dcmpgt>
    e09c:	2800      	cmp	r0, #0
    e09e:	d000      	beq.n	e0a2 <_dtoa_r+0xbaa>
    e0a0:	e0b2      	b.n	e208 <_dtoa_r+0xd10>
    e0a2:	2080      	movs	r0, #128	; 0x80
    e0a4:	0600      	lsls	r0, r0, #24
    e0a6:	4684      	mov	ip, r0
    e0a8:	0039      	movs	r1, r7
    e0aa:	4461      	add	r1, ip
    e0ac:	000b      	movs	r3, r1
    e0ae:	0032      	movs	r2, r6
    e0b0:	0020      	movs	r0, r4
    e0b2:	0029      	movs	r1, r5
    e0b4:	f7fd f9a6 	bl	b404 <__aeabi_dcmplt>
    e0b8:	2800      	cmp	r0, #0
    e0ba:	d057      	beq.n	e16c <_dtoa_r+0xc74>
    e0bc:	2300      	movs	r3, #0
    e0be:	4699      	mov	r9, r3
    e0c0:	4698      	mov	r8, r3
    e0c2:	e75c      	b.n	df7e <_dtoa_r+0xa86>
    e0c4:	980a      	ldr	r0, [sp, #40]	; 0x28
    e0c6:	f7ff fa4c 	bl	d562 <_dtoa_r+0x6a>
    e0ca:	1ae2      	subs	r2, r4, r3
    e0cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e0ce:	46a1      	mov	r9, r4
    e0d0:	469c      	mov	ip, r3
    e0d2:	4494      	add	ip, r2
    e0d4:	4663      	mov	r3, ip
    e0d6:	2400      	movs	r4, #0
    e0d8:	930d      	str	r3, [sp, #52]	; 0x34
    e0da:	e53e      	b.n	db5a <_dtoa_r+0x662>
    e0dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
    e0de:	9b11      	ldr	r3, [sp, #68]	; 0x44
    e0e0:	9208      	str	r2, [sp, #32]
    e0e2:	9309      	str	r3, [sp, #36]	; 0x24
    e0e4:	2302      	movs	r3, #2
    e0e6:	4698      	mov	r8, r3
    e0e8:	f7ff fb3a 	bl	d760 <_dtoa_r+0x268>
    e0ec:	2300      	movs	r3, #0
    e0ee:	4652      	mov	r2, sl
    e0f0:	2100      	movs	r1, #0
    e0f2:	6453      	str	r3, [r2, #68]	; 0x44
    e0f4:	4650      	mov	r0, sl
    e0f6:	f001 f9e1 	bl	f4bc <_Balloc>
    e0fa:	4653      	mov	r3, sl
    e0fc:	6418      	str	r0, [r3, #64]	; 0x40
    e0fe:	2301      	movs	r3, #1
    e100:	900a      	str	r0, [sp, #40]	; 0x28
    e102:	9307      	str	r3, [sp, #28]
    e104:	9323      	str	r3, [sp, #140]	; 0x8c
    e106:	930e      	str	r3, [sp, #56]	; 0x38
    e108:	f7ff fb07 	bl	d71a <_dtoa_r+0x222>
    e10c:	4643      	mov	r3, r8
    e10e:	930c      	str	r3, [sp, #48]	; 0x30
    e110:	465b      	mov	r3, fp
    e112:	9a06      	ldr	r2, [sp, #24]
    e114:	46a8      	mov	r8, r5
    e116:	46b3      	mov	fp, r6
    e118:	4655      	mov	r5, sl
    e11a:	9e04      	ldr	r6, [sp, #16]
    e11c:	4691      	mov	r9, r2
    e11e:	46ba      	mov	sl, r7
    e120:	2b00      	cmp	r3, #0
    e122:	dd10      	ble.n	e146 <_dtoa_r+0xc4e>
    e124:	4659      	mov	r1, fp
    e126:	2201      	movs	r2, #1
    e128:	0038      	movs	r0, r7
    e12a:	f001 fb9b 	bl	f864 <__lshift>
    e12e:	4649      	mov	r1, r9
    e130:	4683      	mov	fp, r0
    e132:	f001 fbf7 	bl	f924 <__mcmp>
    e136:	2800      	cmp	r0, #0
    e138:	dc00      	bgt.n	e13c <_dtoa_r+0xc44>
    e13a:	e157      	b.n	e3ec <_dtoa_r+0xef4>
    e13c:	2e39      	cmp	r6, #57	; 0x39
    e13e:	d100      	bne.n	e142 <_dtoa_r+0xc4a>
    e140:	e122      	b.n	e388 <_dtoa_r+0xe90>
    e142:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    e144:	3631      	adds	r6, #49	; 0x31
    e146:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e148:	4647      	mov	r7, r8
    e14a:	1c6c      	adds	r4, r5, #1
    e14c:	702e      	strb	r6, [r5, #0]
    e14e:	4698      	mov	r8, r3
    e150:	e6c9      	b.n	dee6 <_dtoa_r+0x9ee>
    e152:	2800      	cmp	r0, #0
    e154:	d103      	bne.n	e15e <_dtoa_r+0xc66>
    e156:	07f3      	lsls	r3, r6, #31
    e158:	d501      	bpl.n	e15e <_dtoa_r+0xc66>
    e15a:	e6b5      	b.n	dec8 <_dtoa_r+0x9d0>
    e15c:	001c      	movs	r4, r3
    e15e:	1e63      	subs	r3, r4, #1
    e160:	781a      	ldrb	r2, [r3, #0]
    e162:	2a30      	cmp	r2, #48	; 0x30
    e164:	d0fa      	beq.n	e15c <_dtoa_r+0xc64>
    e166:	e6be      	b.n	dee6 <_dtoa_r+0x9ee>
    e168:	9b12      	ldr	r3, [sp, #72]	; 0x48
    e16a:	4699      	mov	r9, r3
    e16c:	9e10      	ldr	r6, [sp, #64]	; 0x40
    e16e:	9f11      	ldr	r7, [sp, #68]	; 0x44
    e170:	e435      	b.n	d9de <_dtoa_r+0x4e6>
    e172:	2501      	movs	r5, #1
    e174:	f7ff fab4 	bl	d6e0 <_dtoa_r+0x1e8>
    e178:	9b03      	ldr	r3, [sp, #12]
    e17a:	2b00      	cmp	r3, #0
    e17c:	d100      	bne.n	e180 <_dtoa_r+0xc88>
    e17e:	e0d4      	b.n	e32a <_dtoa_r+0xe32>
    e180:	9810      	ldr	r0, [sp, #64]	; 0x40
    e182:	9911      	ldr	r1, [sp, #68]	; 0x44
    e184:	425c      	negs	r4, r3
    e186:	230f      	movs	r3, #15
    e188:	4a26      	ldr	r2, [pc, #152]	; (e224 <_dtoa_r+0xd2c>)
    e18a:	4023      	ands	r3, r4
    e18c:	00db      	lsls	r3, r3, #3
    e18e:	18d3      	adds	r3, r2, r3
    e190:	681a      	ldr	r2, [r3, #0]
    e192:	685b      	ldr	r3, [r3, #4]
    e194:	f7fc fa8a 	bl	a6ac <__aeabi_dmul>
    e198:	1124      	asrs	r4, r4, #4
    e19a:	0006      	movs	r6, r0
    e19c:	000f      	movs	r7, r1
    e19e:	2c00      	cmp	r4, #0
    e1a0:	d100      	bne.n	e1a4 <_dtoa_r+0xcac>
    e1a2:	e149      	b.n	e438 <_dtoa_r+0xf40>
    e1a4:	2302      	movs	r3, #2
    e1a6:	4698      	mov	r8, r3
    e1a8:	4d1f      	ldr	r5, [pc, #124]	; (e228 <_dtoa_r+0xd30>)
    e1aa:	2301      	movs	r3, #1
    e1ac:	4223      	tst	r3, r4
    e1ae:	d009      	beq.n	e1c4 <_dtoa_r+0xccc>
    e1b0:	469c      	mov	ip, r3
    e1b2:	682a      	ldr	r2, [r5, #0]
    e1b4:	686b      	ldr	r3, [r5, #4]
    e1b6:	0030      	movs	r0, r6
    e1b8:	0039      	movs	r1, r7
    e1ba:	44e0      	add	r8, ip
    e1bc:	f7fc fa76 	bl	a6ac <__aeabi_dmul>
    e1c0:	0006      	movs	r6, r0
    e1c2:	000f      	movs	r7, r1
    e1c4:	1064      	asrs	r4, r4, #1
    e1c6:	3508      	adds	r5, #8
    e1c8:	2c00      	cmp	r4, #0
    e1ca:	d1ee      	bne.n	e1aa <_dtoa_r+0xcb2>
    e1cc:	f7ff fae4 	bl	d798 <_dtoa_r+0x2a0>
    e1d0:	9b03      	ldr	r3, [sp, #12]
    e1d2:	2730      	movs	r7, #48	; 0x30
    e1d4:	3301      	adds	r3, #1
    e1d6:	9303      	str	r3, [sp, #12]
    e1d8:	2330      	movs	r3, #48	; 0x30
    e1da:	702b      	strb	r3, [r5, #0]
    e1dc:	e4ac      	b.n	db38 <_dtoa_r+0x640>
    e1de:	6859      	ldr	r1, [r3, #4]
    e1e0:	4650      	mov	r0, sl
    e1e2:	f001 f96b 	bl	f4bc <_Balloc>
    e1e6:	4643      	mov	r3, r8
    e1e8:	4641      	mov	r1, r8
    e1ea:	0004      	movs	r4, r0
    e1ec:	691b      	ldr	r3, [r3, #16]
    e1ee:	310c      	adds	r1, #12
    e1f0:	1c9a      	adds	r2, r3, #2
    e1f2:	0092      	lsls	r2, r2, #2
    e1f4:	300c      	adds	r0, #12
    e1f6:	f7fd fa83 	bl	b700 <memcpy>
    e1fa:	2201      	movs	r2, #1
    e1fc:	0021      	movs	r1, r4
    e1fe:	4650      	mov	r0, sl
    e200:	f001 fb30 	bl	f864 <__lshift>
    e204:	900c      	str	r0, [sp, #48]	; 0x30
    e206:	e599      	b.n	dd3c <_dtoa_r+0x844>
    e208:	2300      	movs	r3, #0
    e20a:	4699      	mov	r9, r3
    e20c:	4698      	mov	r8, r3
    e20e:	e70c      	b.n	e02a <_dtoa_r+0xb32>
    e210:	7ff00000 	.word	0x7ff00000
    e214:	40140000 	.word	0x40140000
    e218:	00000433 	.word	0x00000433
    e21c:	401c0000 	.word	0x401c0000
    e220:	fcc00000 	.word	0xfcc00000
    e224:	000111d0 	.word	0x000111d0
    e228:	000111a8 	.word	0x000111a8
    e22c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    e22e:	498f      	ldr	r1, [pc, #572]	; (e46c <_dtoa_r+0xf74>)
    e230:	3b01      	subs	r3, #1
    e232:	00db      	lsls	r3, r3, #3
    e234:	18c9      	adds	r1, r1, r3
    e236:	6808      	ldr	r0, [r1, #0]
    e238:	6849      	ldr	r1, [r1, #4]
    e23a:	9a08      	ldr	r2, [sp, #32]
    e23c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e23e:	f7fc fa35 	bl	a6ac <__aeabi_dmul>
    e242:	9014      	str	r0, [sp, #80]	; 0x50
    e244:	9115      	str	r1, [sp, #84]	; 0x54
    e246:	0039      	movs	r1, r7
    e248:	0030      	movs	r0, r6
    e24a:	f7fc ffc5 	bl	b1d8 <__aeabi_d2iz>
    e24e:	0005      	movs	r5, r0
    e250:	f7fc fff6 	bl	b240 <__aeabi_i2d>
    e254:	0002      	movs	r2, r0
    e256:	000b      	movs	r3, r1
    e258:	0030      	movs	r0, r6
    e25a:	0039      	movs	r1, r7
    e25c:	f7fc fca6 	bl	abac <__aeabi_dsub>
    e260:	9b12      	ldr	r3, [sp, #72]	; 0x48
    e262:	9008      	str	r0, [sp, #32]
    e264:	9109      	str	r1, [sp, #36]	; 0x24
    e266:	990a      	ldr	r1, [sp, #40]	; 0x28
    e268:	001a      	movs	r2, r3
    e26a:	468c      	mov	ip, r1
    e26c:	3530      	adds	r5, #48	; 0x30
    e26e:	4462      	add	r2, ip
    e270:	1c4c      	adds	r4, r1, #1
    e272:	700d      	strb	r5, [r1, #0]
    e274:	4690      	mov	r8, r2
    e276:	2b01      	cmp	r3, #1
    e278:	d01b      	beq.n	e2b2 <_dtoa_r+0xdba>
    e27a:	9808      	ldr	r0, [sp, #32]
    e27c:	9909      	ldr	r1, [sp, #36]	; 0x24
    e27e:	0025      	movs	r5, r4
    e280:	2200      	movs	r2, #0
    e282:	4b7b      	ldr	r3, [pc, #492]	; (e470 <_dtoa_r+0xf78>)
    e284:	f7fc fa12 	bl	a6ac <__aeabi_dmul>
    e288:	000f      	movs	r7, r1
    e28a:	0006      	movs	r6, r0
    e28c:	f7fc ffa4 	bl	b1d8 <__aeabi_d2iz>
    e290:	0004      	movs	r4, r0
    e292:	f7fc ffd5 	bl	b240 <__aeabi_i2d>
    e296:	3430      	adds	r4, #48	; 0x30
    e298:	0002      	movs	r2, r0
    e29a:	000b      	movs	r3, r1
    e29c:	0030      	movs	r0, r6
    e29e:	0039      	movs	r1, r7
    e2a0:	f7fc fc84 	bl	abac <__aeabi_dsub>
    e2a4:	702c      	strb	r4, [r5, #0]
    e2a6:	3501      	adds	r5, #1
    e2a8:	45a8      	cmp	r8, r5
    e2aa:	d1e9      	bne.n	e280 <_dtoa_r+0xd88>
    e2ac:	4644      	mov	r4, r8
    e2ae:	9008      	str	r0, [sp, #32]
    e2b0:	9109      	str	r1, [sp, #36]	; 0x24
    e2b2:	9814      	ldr	r0, [sp, #80]	; 0x50
    e2b4:	9915      	ldr	r1, [sp, #84]	; 0x54
    e2b6:	2200      	movs	r2, #0
    e2b8:	4b6e      	ldr	r3, [pc, #440]	; (e474 <_dtoa_r+0xf7c>)
    e2ba:	f002 f8ed 	bl	10498 <__aeabi_dadd>
    e2be:	9a08      	ldr	r2, [sp, #32]
    e2c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e2c2:	f7fd f89f 	bl	b404 <__aeabi_dcmplt>
    e2c6:	2800      	cmp	r0, #0
    e2c8:	d067      	beq.n	e39a <_dtoa_r+0xea2>
    e2ca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    e2cc:	1e65      	subs	r5, r4, #1
    e2ce:	9303      	str	r3, [sp, #12]
    e2d0:	782f      	ldrb	r7, [r5, #0]
    e2d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e2d4:	e42e      	b.n	db34 <_dtoa_r+0x63c>
    e2d6:	4643      	mov	r3, r8
    e2d8:	46b3      	mov	fp, r6
    e2da:	930c      	str	r3, [sp, #48]	; 0x30
    e2dc:	9e04      	ldr	r6, [sp, #16]
    e2de:	9b06      	ldr	r3, [sp, #24]
    e2e0:	46a8      	mov	r8, r5
    e2e2:	4699      	mov	r9, r3
    e2e4:	4655      	mov	r5, sl
    e2e6:	46ba      	mov	sl, r7
    e2e8:	2e39      	cmp	r6, #57	; 0x39
    e2ea:	d04d      	beq.n	e388 <_dtoa_r+0xe90>
    e2ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e2ee:	3601      	adds	r6, #1
    e2f0:	4647      	mov	r7, r8
    e2f2:	1c6c      	adds	r4, r5, #1
    e2f4:	702e      	strb	r6, [r5, #0]
    e2f6:	4698      	mov	r8, r3
    e2f8:	e5f5      	b.n	dee6 <_dtoa_r+0x9ee>
    e2fa:	4642      	mov	r2, r8
    e2fc:	9b06      	ldr	r3, [sp, #24]
    e2fe:	46b3      	mov	fp, r6
    e300:	46ba      	mov	sl, r7
    e302:	9e04      	ldr	r6, [sp, #16]
    e304:	4699      	mov	r9, r3
    e306:	002f      	movs	r7, r5
    e308:	4690      	mov	r8, r2
    e30a:	e5d1      	b.n	deb0 <_dtoa_r+0x9b8>
    e30c:	9b06      	ldr	r3, [sp, #24]
    e30e:	9a07      	ldr	r2, [sp, #28]
    e310:	1a9b      	subs	r3, r3, r2
    e312:	9308      	str	r3, [sp, #32]
    e314:	2300      	movs	r3, #0
    e316:	e427      	b.n	db68 <_dtoa_r+0x670>
    e318:	2401      	movs	r4, #1
    e31a:	e5c5      	b.n	dea8 <_dtoa_r+0x9b0>
    e31c:	2336      	movs	r3, #54	; 0x36
    e31e:	9a16      	ldr	r2, [sp, #88]	; 0x58
    e320:	464c      	mov	r4, r9
    e322:	1a9b      	subs	r3, r3, r2
    e324:	9a06      	ldr	r2, [sp, #24]
    e326:	9208      	str	r2, [sp, #32]
    e328:	e41e      	b.n	db68 <_dtoa_r+0x670>
    e32a:	2302      	movs	r3, #2
    e32c:	9e10      	ldr	r6, [sp, #64]	; 0x40
    e32e:	9f11      	ldr	r7, [sp, #68]	; 0x44
    e330:	4698      	mov	r8, r3
    e332:	f7ff fa31 	bl	d798 <_dtoa_r+0x2a0>
    e336:	9b07      	ldr	r3, [sp, #28]
    e338:	2b00      	cmp	r3, #0
    e33a:	d100      	bne.n	e33e <_dtoa_r+0xe46>
    e33c:	e68e      	b.n	e05c <_dtoa_r+0xb64>
    e33e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    e340:	2c00      	cmp	r4, #0
    e342:	dc00      	bgt.n	e346 <_dtoa_r+0xe4e>
    e344:	e712      	b.n	e16c <_dtoa_r+0xc74>
    e346:	9b03      	ldr	r3, [sp, #12]
    e348:	2200      	movs	r2, #0
    e34a:	3b01      	subs	r3, #1
    e34c:	9313      	str	r3, [sp, #76]	; 0x4c
    e34e:	0030      	movs	r0, r6
    e350:	4b47      	ldr	r3, [pc, #284]	; (e470 <_dtoa_r+0xf78>)
    e352:	0039      	movs	r1, r7
    e354:	f7fc f9aa 	bl	a6ac <__aeabi_dmul>
    e358:	0006      	movs	r6, r0
    e35a:	4640      	mov	r0, r8
    e35c:	000f      	movs	r7, r1
    e35e:	3001      	adds	r0, #1
    e360:	f7fc ff6e 	bl	b240 <__aeabi_i2d>
    e364:	0032      	movs	r2, r6
    e366:	003b      	movs	r3, r7
    e368:	f7fc f9a0 	bl	a6ac <__aeabi_dmul>
    e36c:	2200      	movs	r2, #0
    e36e:	4b42      	ldr	r3, [pc, #264]	; (e478 <_dtoa_r+0xf80>)
    e370:	f002 f892 	bl	10498 <__aeabi_dadd>
    e374:	4a41      	ldr	r2, [pc, #260]	; (e47c <_dtoa_r+0xf84>)
    e376:	000b      	movs	r3, r1
    e378:	4694      	mov	ip, r2
    e37a:	4463      	add	r3, ip
    e37c:	9008      	str	r0, [sp, #32]
    e37e:	9109      	str	r1, [sp, #36]	; 0x24
    e380:	9412      	str	r4, [sp, #72]	; 0x48
    e382:	9309      	str	r3, [sp, #36]	; 0x24
    e384:	f7ff fa30 	bl	d7e8 <_dtoa_r+0x2f0>
    e388:	2339      	movs	r3, #57	; 0x39
    e38a:	702b      	strb	r3, [r5, #0]
    e38c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e38e:	4647      	mov	r7, r8
    e390:	1c6c      	adds	r4, r5, #1
    e392:	4698      	mov	r8, r3
    e394:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    e396:	2339      	movs	r3, #57	; 0x39
    e398:	e5a1      	b.n	dede <_dtoa_r+0x9e6>
    e39a:	9a14      	ldr	r2, [sp, #80]	; 0x50
    e39c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    e39e:	2000      	movs	r0, #0
    e3a0:	4934      	ldr	r1, [pc, #208]	; (e474 <_dtoa_r+0xf7c>)
    e3a2:	f7fc fc03 	bl	abac <__aeabi_dsub>
    e3a6:	9a08      	ldr	r2, [sp, #32]
    e3a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e3aa:	f7fd f83f 	bl	b42c <__aeabi_dcmpgt>
    e3ae:	2800      	cmp	r0, #0
    e3b0:	d101      	bne.n	e3b6 <_dtoa_r+0xebe>
    e3b2:	e6db      	b.n	e16c <_dtoa_r+0xc74>
    e3b4:	001c      	movs	r4, r3
    e3b6:	1e63      	subs	r3, r4, #1
    e3b8:	781a      	ldrb	r2, [r3, #0]
    e3ba:	2a30      	cmp	r2, #48	; 0x30
    e3bc:	d0fa      	beq.n	e3b4 <_dtoa_r+0xebc>
    e3be:	f7ff fac8 	bl	d952 <_dtoa_r+0x45a>
    e3c2:	4643      	mov	r3, r8
    e3c4:	46b3      	mov	fp, r6
    e3c6:	930c      	str	r3, [sp, #48]	; 0x30
    e3c8:	9e04      	ldr	r6, [sp, #16]
    e3ca:	9b06      	ldr	r3, [sp, #24]
    e3cc:	46a8      	mov	r8, r5
    e3ce:	4699      	mov	r9, r3
    e3d0:	4655      	mov	r5, sl
    e3d2:	46ba      	mov	sl, r7
    e3d4:	2e39      	cmp	r6, #57	; 0x39
    e3d6:	d0d7      	beq.n	e388 <_dtoa_r+0xe90>
    e3d8:	2c00      	cmp	r4, #0
    e3da:	dd00      	ble.n	e3de <_dtoa_r+0xee6>
    e3dc:	e6b1      	b.n	e142 <_dtoa_r+0xc4a>
    e3de:	e6b2      	b.n	e146 <_dtoa_r+0xc4e>
    e3e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    e3e2:	464d      	mov	r5, r9
    e3e4:	9203      	str	r2, [sp, #12]
    e3e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e3e8:	f7ff fba4 	bl	db34 <_dtoa_r+0x63c>
    e3ec:	2800      	cmp	r0, #0
    e3ee:	d000      	beq.n	e3f2 <_dtoa_r+0xefa>
    e3f0:	e6a9      	b.n	e146 <_dtoa_r+0xc4e>
    e3f2:	07f3      	lsls	r3, r6, #31
    e3f4:	d400      	bmi.n	e3f8 <_dtoa_r+0xf00>
    e3f6:	e6a6      	b.n	e146 <_dtoa_r+0xc4e>
    e3f8:	e6a0      	b.n	e13c <_dtoa_r+0xc44>
    e3fa:	2300      	movs	r3, #0
    e3fc:	4641      	mov	r1, r8
    e3fe:	220a      	movs	r2, #10
    e400:	4650      	mov	r0, sl
    e402:	f001 f88d 	bl	f520 <__multadd>
    e406:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e408:	4680      	mov	r8, r0
    e40a:	2b00      	cmp	r3, #0
    e40c:	dd01      	ble.n	e412 <_dtoa_r+0xf1a>
    e40e:	9307      	str	r3, [sp, #28]
    e410:	e486      	b.n	dd20 <_dtoa_r+0x828>
    e412:	9b22      	ldr	r3, [sp, #136]	; 0x88
    e414:	2b02      	cmp	r3, #2
    e416:	dc1f      	bgt.n	e458 <_dtoa_r+0xf60>
    e418:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e41a:	9307      	str	r3, [sp, #28]
    e41c:	e480      	b.n	dd20 <_dtoa_r+0x828>
    e41e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    e420:	2b02      	cmp	r3, #2
    e422:	dc19      	bgt.n	e458 <_dtoa_r+0xf60>
    e424:	4649      	mov	r1, r9
    e426:	f7fe ffbd 	bl	d3a4 <quorem>
    e42a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e42c:	3030      	adds	r0, #48	; 0x30
    e42e:	7018      	strb	r0, [r3, #0]
    e430:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e432:	0006      	movs	r6, r0
    e434:	9307      	str	r3, [sp, #28]
    e436:	e533      	b.n	dea0 <_dtoa_r+0x9a8>
    e438:	2302      	movs	r3, #2
    e43a:	4698      	mov	r8, r3
    e43c:	f7ff f9ac 	bl	d798 <_dtoa_r+0x2a0>
    e440:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    e442:	9c14      	ldr	r4, [sp, #80]	; 0x50
    e444:	9303      	str	r3, [sp, #12]
    e446:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e448:	001d      	movs	r5, r3
    e44a:	f7ff fb73 	bl	db34 <_dtoa_r+0x63c>
    e44e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    e450:	9c14      	ldr	r4, [sp, #80]	; 0x50
    e452:	9303      	str	r3, [sp, #12]
    e454:	f7ff fa7f 	bl	d956 <_dtoa_r+0x45e>
    e458:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e45a:	9307      	str	r3, [sp, #28]
    e45c:	e5d6      	b.n	e00c <_dtoa_r+0xb14>
    e45e:	2b04      	cmp	r3, #4
    e460:	d100      	bne.n	e464 <_dtoa_r+0xf6c>
    e462:	e43f      	b.n	dce4 <_dtoa_r+0x7ec>
    e464:	233c      	movs	r3, #60	; 0x3c
    e466:	1a18      	subs	r0, r3, r0
    e468:	e4d7      	b.n	de1a <_dtoa_r+0x922>
    e46a:	46c0      	nop			; (mov r8, r8)
    e46c:	000111d0 	.word	0x000111d0
    e470:	40240000 	.word	0x40240000
    e474:	3fe00000 	.word	0x3fe00000
    e478:	401c0000 	.word	0x401c0000
    e47c:	fcc00000 	.word	0xfcc00000

0000e480 <__sflush_r>:
    e480:	b5f0      	push	{r4, r5, r6, r7, lr}
    e482:	46c6      	mov	lr, r8
    e484:	b500      	push	{lr}
    e486:	230c      	movs	r3, #12
    e488:	5eca      	ldrsh	r2, [r1, r3]
    e48a:	4680      	mov	r8, r0
    e48c:	b293      	uxth	r3, r2
    e48e:	000c      	movs	r4, r1
    e490:	0719      	lsls	r1, r3, #28
    e492:	d440      	bmi.n	e516 <__sflush_r+0x96>
    e494:	2380      	movs	r3, #128	; 0x80
    e496:	011b      	lsls	r3, r3, #4
    e498:	4313      	orrs	r3, r2
    e49a:	6862      	ldr	r2, [r4, #4]
    e49c:	81a3      	strh	r3, [r4, #12]
    e49e:	2a00      	cmp	r2, #0
    e4a0:	dc00      	bgt.n	e4a4 <__sflush_r+0x24>
    e4a2:	e070      	b.n	e586 <__sflush_r+0x106>
    e4a4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    e4a6:	2e00      	cmp	r6, #0
    e4a8:	d031      	beq.n	e50e <__sflush_r+0x8e>
    e4aa:	4642      	mov	r2, r8
    e4ac:	4641      	mov	r1, r8
    e4ae:	6815      	ldr	r5, [r2, #0]
    e4b0:	2200      	movs	r2, #0
    e4b2:	b29b      	uxth	r3, r3
    e4b4:	600a      	str	r2, [r1, #0]
    e4b6:	04da      	lsls	r2, r3, #19
    e4b8:	d400      	bmi.n	e4bc <__sflush_r+0x3c>
    e4ba:	e069      	b.n	e590 <__sflush_r+0x110>
    e4bc:	6d22      	ldr	r2, [r4, #80]	; 0x50
    e4be:	075b      	lsls	r3, r3, #29
    e4c0:	d506      	bpl.n	e4d0 <__sflush_r+0x50>
    e4c2:	6863      	ldr	r3, [r4, #4]
    e4c4:	1ad2      	subs	r2, r2, r3
    e4c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e4c8:	2b00      	cmp	r3, #0
    e4ca:	d001      	beq.n	e4d0 <__sflush_r+0x50>
    e4cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    e4ce:	1ad2      	subs	r2, r2, r3
    e4d0:	2300      	movs	r3, #0
    e4d2:	69e1      	ldr	r1, [r4, #28]
    e4d4:	4640      	mov	r0, r8
    e4d6:	47b0      	blx	r6
    e4d8:	1c43      	adds	r3, r0, #1
    e4da:	d03d      	beq.n	e558 <__sflush_r+0xd8>
    e4dc:	89a3      	ldrh	r3, [r4, #12]
    e4de:	4a3a      	ldr	r2, [pc, #232]	; (e5c8 <__sflush_r+0x148>)
    e4e0:	4013      	ands	r3, r2
    e4e2:	2200      	movs	r2, #0
    e4e4:	6062      	str	r2, [r4, #4]
    e4e6:	6922      	ldr	r2, [r4, #16]
    e4e8:	b21b      	sxth	r3, r3
    e4ea:	81a3      	strh	r3, [r4, #12]
    e4ec:	6022      	str	r2, [r4, #0]
    e4ee:	04db      	lsls	r3, r3, #19
    e4f0:	d447      	bmi.n	e582 <__sflush_r+0x102>
    e4f2:	4643      	mov	r3, r8
    e4f4:	6b21      	ldr	r1, [r4, #48]	; 0x30
    e4f6:	601d      	str	r5, [r3, #0]
    e4f8:	2900      	cmp	r1, #0
    e4fa:	d008      	beq.n	e50e <__sflush_r+0x8e>
    e4fc:	0023      	movs	r3, r4
    e4fe:	3340      	adds	r3, #64	; 0x40
    e500:	4299      	cmp	r1, r3
    e502:	d002      	beq.n	e50a <__sflush_r+0x8a>
    e504:	4640      	mov	r0, r8
    e506:	f000 f967 	bl	e7d8 <_free_r>
    e50a:	2300      	movs	r3, #0
    e50c:	6323      	str	r3, [r4, #48]	; 0x30
    e50e:	2000      	movs	r0, #0
    e510:	bc04      	pop	{r2}
    e512:	4690      	mov	r8, r2
    e514:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e516:	6926      	ldr	r6, [r4, #16]
    e518:	2e00      	cmp	r6, #0
    e51a:	d0f8      	beq.n	e50e <__sflush_r+0x8e>
    e51c:	6822      	ldr	r2, [r4, #0]
    e51e:	6026      	str	r6, [r4, #0]
    e520:	1b95      	subs	r5, r2, r6
    e522:	2200      	movs	r2, #0
    e524:	079b      	lsls	r3, r3, #30
    e526:	d100      	bne.n	e52a <__sflush_r+0xaa>
    e528:	6962      	ldr	r2, [r4, #20]
    e52a:	60a2      	str	r2, [r4, #8]
    e52c:	2d00      	cmp	r5, #0
    e52e:	dc04      	bgt.n	e53a <__sflush_r+0xba>
    e530:	e7ed      	b.n	e50e <__sflush_r+0x8e>
    e532:	1836      	adds	r6, r6, r0
    e534:	1a2d      	subs	r5, r5, r0
    e536:	2d00      	cmp	r5, #0
    e538:	dde9      	ble.n	e50e <__sflush_r+0x8e>
    e53a:	002b      	movs	r3, r5
    e53c:	0032      	movs	r2, r6
    e53e:	69e1      	ldr	r1, [r4, #28]
    e540:	4640      	mov	r0, r8
    e542:	6a67      	ldr	r7, [r4, #36]	; 0x24
    e544:	47b8      	blx	r7
    e546:	2800      	cmp	r0, #0
    e548:	dcf3      	bgt.n	e532 <__sflush_r+0xb2>
    e54a:	2240      	movs	r2, #64	; 0x40
    e54c:	2001      	movs	r0, #1
    e54e:	89a3      	ldrh	r3, [r4, #12]
    e550:	4240      	negs	r0, r0
    e552:	4313      	orrs	r3, r2
    e554:	81a3      	strh	r3, [r4, #12]
    e556:	e7db      	b.n	e510 <__sflush_r+0x90>
    e558:	4643      	mov	r3, r8
    e55a:	6819      	ldr	r1, [r3, #0]
    e55c:	291d      	cmp	r1, #29
    e55e:	d8f4      	bhi.n	e54a <__sflush_r+0xca>
    e560:	4b1a      	ldr	r3, [pc, #104]	; (e5cc <__sflush_r+0x14c>)
    e562:	2201      	movs	r2, #1
    e564:	40cb      	lsrs	r3, r1
    e566:	439a      	bics	r2, r3
    e568:	d1ef      	bne.n	e54a <__sflush_r+0xca>
    e56a:	89a3      	ldrh	r3, [r4, #12]
    e56c:	4e16      	ldr	r6, [pc, #88]	; (e5c8 <__sflush_r+0x148>)
    e56e:	6062      	str	r2, [r4, #4]
    e570:	4033      	ands	r3, r6
    e572:	6922      	ldr	r2, [r4, #16]
    e574:	b21b      	sxth	r3, r3
    e576:	81a3      	strh	r3, [r4, #12]
    e578:	6022      	str	r2, [r4, #0]
    e57a:	04db      	lsls	r3, r3, #19
    e57c:	d5b9      	bpl.n	e4f2 <__sflush_r+0x72>
    e57e:	2900      	cmp	r1, #0
    e580:	d1b7      	bne.n	e4f2 <__sflush_r+0x72>
    e582:	6520      	str	r0, [r4, #80]	; 0x50
    e584:	e7b5      	b.n	e4f2 <__sflush_r+0x72>
    e586:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    e588:	2a00      	cmp	r2, #0
    e58a:	dd00      	ble.n	e58e <__sflush_r+0x10e>
    e58c:	e78a      	b.n	e4a4 <__sflush_r+0x24>
    e58e:	e7be      	b.n	e50e <__sflush_r+0x8e>
    e590:	2200      	movs	r2, #0
    e592:	2301      	movs	r3, #1
    e594:	69e1      	ldr	r1, [r4, #28]
    e596:	4640      	mov	r0, r8
    e598:	47b0      	blx	r6
    e59a:	0002      	movs	r2, r0
    e59c:	1c43      	adds	r3, r0, #1
    e59e:	d002      	beq.n	e5a6 <__sflush_r+0x126>
    e5a0:	89a3      	ldrh	r3, [r4, #12]
    e5a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    e5a4:	e78b      	b.n	e4be <__sflush_r+0x3e>
    e5a6:	4643      	mov	r3, r8
    e5a8:	681b      	ldr	r3, [r3, #0]
    e5aa:	2b00      	cmp	r3, #0
    e5ac:	d0f8      	beq.n	e5a0 <__sflush_r+0x120>
    e5ae:	2b1d      	cmp	r3, #29
    e5b0:	d001      	beq.n	e5b6 <__sflush_r+0x136>
    e5b2:	2b16      	cmp	r3, #22
    e5b4:	d103      	bne.n	e5be <__sflush_r+0x13e>
    e5b6:	4643      	mov	r3, r8
    e5b8:	2000      	movs	r0, #0
    e5ba:	601d      	str	r5, [r3, #0]
    e5bc:	e7a8      	b.n	e510 <__sflush_r+0x90>
    e5be:	2140      	movs	r1, #64	; 0x40
    e5c0:	89a3      	ldrh	r3, [r4, #12]
    e5c2:	430b      	orrs	r3, r1
    e5c4:	81a3      	strh	r3, [r4, #12]
    e5c6:	e7a3      	b.n	e510 <__sflush_r+0x90>
    e5c8:	fffff7ff 	.word	0xfffff7ff
    e5cc:	20400001 	.word	0x20400001

0000e5d0 <_fflush_r>:
    e5d0:	b570      	push	{r4, r5, r6, lr}
    e5d2:	0005      	movs	r5, r0
    e5d4:	000c      	movs	r4, r1
    e5d6:	2800      	cmp	r0, #0
    e5d8:	d002      	beq.n	e5e0 <_fflush_r+0x10>
    e5da:	6b83      	ldr	r3, [r0, #56]	; 0x38
    e5dc:	2b00      	cmp	r3, #0
    e5de:	d016      	beq.n	e60e <_fflush_r+0x3e>
    e5e0:	220c      	movs	r2, #12
    e5e2:	5ea3      	ldrsh	r3, [r4, r2]
    e5e4:	2600      	movs	r6, #0
    e5e6:	2b00      	cmp	r3, #0
    e5e8:	d00f      	beq.n	e60a <_fflush_r+0x3a>
    e5ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
    e5ec:	07d2      	lsls	r2, r2, #31
    e5ee:	d401      	bmi.n	e5f4 <_fflush_r+0x24>
    e5f0:	059b      	lsls	r3, r3, #22
    e5f2:	d513      	bpl.n	e61c <_fflush_r+0x4c>
    e5f4:	0021      	movs	r1, r4
    e5f6:	0028      	movs	r0, r5
    e5f8:	f7ff ff42 	bl	e480 <__sflush_r>
    e5fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
    e5fe:	0006      	movs	r6, r0
    e600:	07db      	lsls	r3, r3, #31
    e602:	d402      	bmi.n	e60a <_fflush_r+0x3a>
    e604:	89a3      	ldrh	r3, [r4, #12]
    e606:	059b      	lsls	r3, r3, #22
    e608:	d504      	bpl.n	e614 <_fflush_r+0x44>
    e60a:	0030      	movs	r0, r6
    e60c:	bd70      	pop	{r4, r5, r6, pc}
    e60e:	f000 f839 	bl	e684 <__sinit>
    e612:	e7e5      	b.n	e5e0 <_fflush_r+0x10>
    e614:	6da0      	ldr	r0, [r4, #88]	; 0x58
    e616:	f000 fb79 	bl	ed0c <__retarget_lock_release_recursive>
    e61a:	e7f6      	b.n	e60a <_fflush_r+0x3a>
    e61c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    e61e:	f000 fb73 	bl	ed08 <__retarget_lock_acquire_recursive>
    e622:	e7e7      	b.n	e5f4 <_fflush_r+0x24>

0000e624 <_cleanup_r>:
    e624:	b510      	push	{r4, lr}
    e626:	4902      	ldr	r1, [pc, #8]	; (e630 <_cleanup_r+0xc>)
    e628:	f000 fb36 	bl	ec98 <_fwalk_reent>
    e62c:	bd10      	pop	{r4, pc}
    e62e:	46c0      	nop			; (mov r8, r8)
    e630:	000100c5 	.word	0x000100c5

0000e634 <std.isra.0>:
    e634:	2300      	movs	r3, #0
    e636:	b510      	push	{r4, lr}
    e638:	0004      	movs	r4, r0
    e63a:	6003      	str	r3, [r0, #0]
    e63c:	6043      	str	r3, [r0, #4]
    e63e:	6083      	str	r3, [r0, #8]
    e640:	8181      	strh	r1, [r0, #12]
    e642:	6643      	str	r3, [r0, #100]	; 0x64
    e644:	81c2      	strh	r2, [r0, #14]
    e646:	6103      	str	r3, [r0, #16]
    e648:	6143      	str	r3, [r0, #20]
    e64a:	6183      	str	r3, [r0, #24]
    e64c:	2208      	movs	r2, #8
    e64e:	2100      	movs	r1, #0
    e650:	305c      	adds	r0, #92	; 0x5c
    e652:	f7fd f897 	bl	b784 <memset>
    e656:	0020      	movs	r0, r4
    e658:	4b06      	ldr	r3, [pc, #24]	; (e674 <std.isra.0+0x40>)
    e65a:	61e4      	str	r4, [r4, #28]
    e65c:	6223      	str	r3, [r4, #32]
    e65e:	4b06      	ldr	r3, [pc, #24]	; (e678 <std.isra.0+0x44>)
    e660:	3058      	adds	r0, #88	; 0x58
    e662:	6263      	str	r3, [r4, #36]	; 0x24
    e664:	4b05      	ldr	r3, [pc, #20]	; (e67c <std.isra.0+0x48>)
    e666:	62a3      	str	r3, [r4, #40]	; 0x28
    e668:	4b05      	ldr	r3, [pc, #20]	; (e680 <std.isra.0+0x4c>)
    e66a:	62e3      	str	r3, [r4, #44]	; 0x2c
    e66c:	f000 fb48 	bl	ed00 <__retarget_lock_init_recursive>
    e670:	bd10      	pop	{r4, pc}
    e672:	46c0      	nop			; (mov r8, r8)
    e674:	0000feed 	.word	0x0000feed
    e678:	0000ff15 	.word	0x0000ff15
    e67c:	0000ff51 	.word	0x0000ff51
    e680:	0000ff7d 	.word	0x0000ff7d

0000e684 <__sinit>:
    e684:	b570      	push	{r4, r5, r6, lr}
    e686:	0004      	movs	r4, r0
    e688:	4d14      	ldr	r5, [pc, #80]	; (e6dc <__sinit+0x58>)
    e68a:	0028      	movs	r0, r5
    e68c:	f000 fb3c 	bl	ed08 <__retarget_lock_acquire_recursive>
    e690:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    e692:	2b00      	cmp	r3, #0
    e694:	d11d      	bne.n	e6d2 <__sinit+0x4e>
    e696:	4a12      	ldr	r2, [pc, #72]	; (e6e0 <__sinit+0x5c>)
    e698:	2104      	movs	r1, #4
    e69a:	63e2      	str	r2, [r4, #60]	; 0x3c
    e69c:	22b8      	movs	r2, #184	; 0xb8
    e69e:	0092      	lsls	r2, r2, #2
    e6a0:	50a3      	str	r3, [r4, r2]
    e6a2:	23b9      	movs	r3, #185	; 0xb9
    e6a4:	2203      	movs	r2, #3
    e6a6:	009b      	lsls	r3, r3, #2
    e6a8:	50e2      	str	r2, [r4, r3]
    e6aa:	3308      	adds	r3, #8
    e6ac:	18e2      	adds	r2, r4, r3
    e6ae:	3b04      	subs	r3, #4
    e6b0:	50e2      	str	r2, [r4, r3]
    e6b2:	6860      	ldr	r0, [r4, #4]
    e6b4:	2200      	movs	r2, #0
    e6b6:	f7ff ffbd 	bl	e634 <std.isra.0>
    e6ba:	2201      	movs	r2, #1
    e6bc:	2109      	movs	r1, #9
    e6be:	68a0      	ldr	r0, [r4, #8]
    e6c0:	f7ff ffb8 	bl	e634 <std.isra.0>
    e6c4:	2202      	movs	r2, #2
    e6c6:	2112      	movs	r1, #18
    e6c8:	68e0      	ldr	r0, [r4, #12]
    e6ca:	f7ff ffb3 	bl	e634 <std.isra.0>
    e6ce:	2301      	movs	r3, #1
    e6d0:	63a3      	str	r3, [r4, #56]	; 0x38
    e6d2:	0028      	movs	r0, r5
    e6d4:	f000 fb1a 	bl	ed0c <__retarget_lock_release_recursive>
    e6d8:	bd70      	pop	{r4, r5, r6, pc}
    e6da:	46c0      	nop			; (mov r8, r8)
    e6dc:	20001338 	.word	0x20001338
    e6e0:	0000e625 	.word	0x0000e625

0000e6e4 <__sfp_lock_acquire>:
    e6e4:	b510      	push	{r4, lr}
    e6e6:	4802      	ldr	r0, [pc, #8]	; (e6f0 <__sfp_lock_acquire+0xc>)
    e6e8:	f000 fb0e 	bl	ed08 <__retarget_lock_acquire_recursive>
    e6ec:	bd10      	pop	{r4, pc}
    e6ee:	46c0      	nop			; (mov r8, r8)
    e6f0:	2000134c 	.word	0x2000134c

0000e6f4 <__sfp_lock_release>:
    e6f4:	b510      	push	{r4, lr}
    e6f6:	4802      	ldr	r0, [pc, #8]	; (e700 <__sfp_lock_release+0xc>)
    e6f8:	f000 fb08 	bl	ed0c <__retarget_lock_release_recursive>
    e6fc:	bd10      	pop	{r4, pc}
    e6fe:	46c0      	nop			; (mov r8, r8)
    e700:	2000134c 	.word	0x2000134c

0000e704 <__libc_fini_array>:
    e704:	b570      	push	{r4, r5, r6, lr}
    e706:	4b09      	ldr	r3, [pc, #36]	; (e72c <__libc_fini_array+0x28>)
    e708:	4c09      	ldr	r4, [pc, #36]	; (e730 <__libc_fini_array+0x2c>)
    e70a:	1ae4      	subs	r4, r4, r3
    e70c:	10a4      	asrs	r4, r4, #2
    e70e:	d009      	beq.n	e724 <__libc_fini_array+0x20>
    e710:	4a08      	ldr	r2, [pc, #32]	; (e734 <__libc_fini_array+0x30>)
    e712:	18a5      	adds	r5, r4, r2
    e714:	00ad      	lsls	r5, r5, #2
    e716:	18ed      	adds	r5, r5, r3
    e718:	682b      	ldr	r3, [r5, #0]
    e71a:	3c01      	subs	r4, #1
    e71c:	4798      	blx	r3
    e71e:	3d04      	subs	r5, #4
    e720:	2c00      	cmp	r4, #0
    e722:	d1f9      	bne.n	e718 <__libc_fini_array+0x14>
    e724:	f002 fe56 	bl	113d4 <_fini>
    e728:	bd70      	pop	{r4, r5, r6, pc}
    e72a:	46c0      	nop			; (mov r8, r8)
    e72c:	000113e0 	.word	0x000113e0
    e730:	000113e4 	.word	0x000113e4
    e734:	3fffffff 	.word	0x3fffffff

0000e738 <_malloc_trim_r>:
    e738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e73a:	000c      	movs	r4, r1
    e73c:	0006      	movs	r6, r0
    e73e:	f000 fead 	bl	f49c <__malloc_lock>
    e742:	4f20      	ldr	r7, [pc, #128]	; (e7c4 <_malloc_trim_r+0x8c>)
    e744:	68bb      	ldr	r3, [r7, #8]
    e746:	685d      	ldr	r5, [r3, #4]
    e748:	2303      	movs	r3, #3
    e74a:	439d      	bics	r5, r3
    e74c:	4b1e      	ldr	r3, [pc, #120]	; (e7c8 <_malloc_trim_r+0x90>)
    e74e:	1b2c      	subs	r4, r5, r4
    e750:	469c      	mov	ip, r3
    e752:	4464      	add	r4, ip
    e754:	0b24      	lsrs	r4, r4, #12
    e756:	4b1d      	ldr	r3, [pc, #116]	; (e7cc <_malloc_trim_r+0x94>)
    e758:	3c01      	subs	r4, #1
    e75a:	0324      	lsls	r4, r4, #12
    e75c:	429c      	cmp	r4, r3
    e75e:	dd07      	ble.n	e770 <_malloc_trim_r+0x38>
    e760:	2100      	movs	r1, #0
    e762:	0030      	movs	r0, r6
    e764:	f001 fbb0 	bl	fec8 <_sbrk_r>
    e768:	68bb      	ldr	r3, [r7, #8]
    e76a:	195b      	adds	r3, r3, r5
    e76c:	4298      	cmp	r0, r3
    e76e:	d004      	beq.n	e77a <_malloc_trim_r+0x42>
    e770:	0030      	movs	r0, r6
    e772:	f000 fe9b 	bl	f4ac <__malloc_unlock>
    e776:	2000      	movs	r0, #0
    e778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e77a:	4261      	negs	r1, r4
    e77c:	0030      	movs	r0, r6
    e77e:	f001 fba3 	bl	fec8 <_sbrk_r>
    e782:	1c43      	adds	r3, r0, #1
    e784:	d00d      	beq.n	e7a2 <_malloc_trim_r+0x6a>
    e786:	2201      	movs	r2, #1
    e788:	68bb      	ldr	r3, [r7, #8]
    e78a:	1b2d      	subs	r5, r5, r4
    e78c:	4315      	orrs	r5, r2
    e78e:	605d      	str	r5, [r3, #4]
    e790:	4b0f      	ldr	r3, [pc, #60]	; (e7d0 <_malloc_trim_r+0x98>)
    e792:	0030      	movs	r0, r6
    e794:	681a      	ldr	r2, [r3, #0]
    e796:	1b14      	subs	r4, r2, r4
    e798:	601c      	str	r4, [r3, #0]
    e79a:	f000 fe87 	bl	f4ac <__malloc_unlock>
    e79e:	2001      	movs	r0, #1
    e7a0:	e7ea      	b.n	e778 <_malloc_trim_r+0x40>
    e7a2:	2100      	movs	r1, #0
    e7a4:	0030      	movs	r0, r6
    e7a6:	f001 fb8f 	bl	fec8 <_sbrk_r>
    e7aa:	68ba      	ldr	r2, [r7, #8]
    e7ac:	1a83      	subs	r3, r0, r2
    e7ae:	2b0f      	cmp	r3, #15
    e7b0:	ddde      	ble.n	e770 <_malloc_trim_r+0x38>
    e7b2:	4908      	ldr	r1, [pc, #32]	; (e7d4 <_malloc_trim_r+0x9c>)
    e7b4:	6809      	ldr	r1, [r1, #0]
    e7b6:	1a40      	subs	r0, r0, r1
    e7b8:	4905      	ldr	r1, [pc, #20]	; (e7d0 <_malloc_trim_r+0x98>)
    e7ba:	6008      	str	r0, [r1, #0]
    e7bc:	2101      	movs	r1, #1
    e7be:	430b      	orrs	r3, r1
    e7c0:	6053      	str	r3, [r2, #4]
    e7c2:	e7d5      	b.n	e770 <_malloc_trim_r+0x38>
    e7c4:	200004b4 	.word	0x200004b4
    e7c8:	00000fef 	.word	0x00000fef
    e7cc:	00000fff 	.word	0x00000fff
    e7d0:	200012b8 	.word	0x200012b8
    e7d4:	200008bc 	.word	0x200008bc

0000e7d8 <_free_r>:
    e7d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e7da:	0004      	movs	r4, r0
    e7dc:	1e0d      	subs	r5, r1, #0
    e7de:	d03c      	beq.n	e85a <_free_r+0x82>
    e7e0:	f000 fe5c 	bl	f49c <__malloc_lock>
    e7e4:	0029      	movs	r1, r5
    e7e6:	3908      	subs	r1, #8
    e7e8:	6848      	ldr	r0, [r1, #4]
    e7ea:	2301      	movs	r3, #1
    e7ec:	0005      	movs	r5, r0
    e7ee:	2603      	movs	r6, #3
    e7f0:	439d      	bics	r5, r3
    e7f2:	194a      	adds	r2, r1, r5
    e7f4:	469c      	mov	ip, r3
    e7f6:	4f61      	ldr	r7, [pc, #388]	; (e97c <_free_r+0x1a4>)
    e7f8:	6853      	ldr	r3, [r2, #4]
    e7fa:	43b3      	bics	r3, r6
    e7fc:	68be      	ldr	r6, [r7, #8]
    e7fe:	42b2      	cmp	r2, r6
    e800:	d056      	beq.n	e8b0 <_free_r+0xd8>
    e802:	4666      	mov	r6, ip
    e804:	6053      	str	r3, [r2, #4]
    e806:	4206      	tst	r6, r0
    e808:	d10a      	bne.n	e820 <_free_r+0x48>
    e80a:	003e      	movs	r6, r7
    e80c:	6808      	ldr	r0, [r1, #0]
    e80e:	3608      	adds	r6, #8
    e810:	1a09      	subs	r1, r1, r0
    e812:	182d      	adds	r5, r5, r0
    e814:	6888      	ldr	r0, [r1, #8]
    e816:	42b0      	cmp	r0, r6
    e818:	d065      	beq.n	e8e6 <_free_r+0x10e>
    e81a:	68ce      	ldr	r6, [r1, #12]
    e81c:	60c6      	str	r6, [r0, #12]
    e81e:	60b0      	str	r0, [r6, #8]
    e820:	2001      	movs	r0, #1
    e822:	18d6      	adds	r6, r2, r3
    e824:	6876      	ldr	r6, [r6, #4]
    e826:	4206      	tst	r6, r0
    e828:	d033      	beq.n	e892 <_free_r+0xba>
    e82a:	4b55      	ldr	r3, [pc, #340]	; (e980 <_free_r+0x1a8>)
    e82c:	4328      	orrs	r0, r5
    e82e:	6048      	str	r0, [r1, #4]
    e830:	514d      	str	r5, [r1, r5]
    e832:	429d      	cmp	r5, r3
    e834:	d812      	bhi.n	e85c <_free_r+0x84>
    e836:	08ed      	lsrs	r5, r5, #3
    e838:	3bff      	subs	r3, #255	; 0xff
    e83a:	10aa      	asrs	r2, r5, #2
    e83c:	3bff      	subs	r3, #255	; 0xff
    e83e:	4093      	lsls	r3, r2
    e840:	687a      	ldr	r2, [r7, #4]
    e842:	00ed      	lsls	r5, r5, #3
    e844:	4313      	orrs	r3, r2
    e846:	607b      	str	r3, [r7, #4]
    e848:	19ef      	adds	r7, r5, r7
    e84a:	68bb      	ldr	r3, [r7, #8]
    e84c:	60cf      	str	r7, [r1, #12]
    e84e:	608b      	str	r3, [r1, #8]
    e850:	60b9      	str	r1, [r7, #8]
    e852:	60d9      	str	r1, [r3, #12]
    e854:	0020      	movs	r0, r4
    e856:	f000 fe29 	bl	f4ac <__malloc_unlock>
    e85a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e85c:	0a68      	lsrs	r0, r5, #9
    e85e:	2804      	cmp	r0, #4
    e860:	d850      	bhi.n	e904 <_free_r+0x12c>
    e862:	09a8      	lsrs	r0, r5, #6
    e864:	0002      	movs	r2, r0
    e866:	3039      	adds	r0, #57	; 0x39
    e868:	3238      	adds	r2, #56	; 0x38
    e86a:	00c0      	lsls	r0, r0, #3
    e86c:	1838      	adds	r0, r7, r0
    e86e:	3808      	subs	r0, #8
    e870:	6883      	ldr	r3, [r0, #8]
    e872:	2603      	movs	r6, #3
    e874:	4298      	cmp	r0, r3
    e876:	d04c      	beq.n	e912 <_free_r+0x13a>
    e878:	685a      	ldr	r2, [r3, #4]
    e87a:	43b2      	bics	r2, r6
    e87c:	4295      	cmp	r5, r2
    e87e:	d230      	bcs.n	e8e2 <_free_r+0x10a>
    e880:	689b      	ldr	r3, [r3, #8]
    e882:	4298      	cmp	r0, r3
    e884:	d1f8      	bne.n	e878 <_free_r+0xa0>
    e886:	68c3      	ldr	r3, [r0, #12]
    e888:	60cb      	str	r3, [r1, #12]
    e88a:	6088      	str	r0, [r1, #8]
    e88c:	6099      	str	r1, [r3, #8]
    e88e:	60c1      	str	r1, [r0, #12]
    e890:	e7e0      	b.n	e854 <_free_r+0x7c>
    e892:	18ed      	adds	r5, r5, r3
    e894:	4e3b      	ldr	r6, [pc, #236]	; (e984 <_free_r+0x1ac>)
    e896:	6893      	ldr	r3, [r2, #8]
    e898:	42b3      	cmp	r3, r6
    e89a:	d042      	beq.n	e922 <_free_r+0x14a>
    e89c:	68d2      	ldr	r2, [r2, #12]
    e89e:	4328      	orrs	r0, r5
    e8a0:	60da      	str	r2, [r3, #12]
    e8a2:	6093      	str	r3, [r2, #8]
    e8a4:	4b36      	ldr	r3, [pc, #216]	; (e980 <_free_r+0x1a8>)
    e8a6:	6048      	str	r0, [r1, #4]
    e8a8:	514d      	str	r5, [r1, r5]
    e8aa:	429d      	cmp	r5, r3
    e8ac:	d8d6      	bhi.n	e85c <_free_r+0x84>
    e8ae:	e7c2      	b.n	e836 <_free_r+0x5e>
    e8b0:	4662      	mov	r2, ip
    e8b2:	18eb      	adds	r3, r5, r3
    e8b4:	4202      	tst	r2, r0
    e8b6:	d106      	bne.n	e8c6 <_free_r+0xee>
    e8b8:	680a      	ldr	r2, [r1, #0]
    e8ba:	1a89      	subs	r1, r1, r2
    e8bc:	6888      	ldr	r0, [r1, #8]
    e8be:	189b      	adds	r3, r3, r2
    e8c0:	68ca      	ldr	r2, [r1, #12]
    e8c2:	60c2      	str	r2, [r0, #12]
    e8c4:	6090      	str	r0, [r2, #8]
    e8c6:	2201      	movs	r2, #1
    e8c8:	431a      	orrs	r2, r3
    e8ca:	604a      	str	r2, [r1, #4]
    e8cc:	4a2e      	ldr	r2, [pc, #184]	; (e988 <_free_r+0x1b0>)
    e8ce:	60b9      	str	r1, [r7, #8]
    e8d0:	6812      	ldr	r2, [r2, #0]
    e8d2:	4293      	cmp	r3, r2
    e8d4:	d3be      	bcc.n	e854 <_free_r+0x7c>
    e8d6:	4b2d      	ldr	r3, [pc, #180]	; (e98c <_free_r+0x1b4>)
    e8d8:	0020      	movs	r0, r4
    e8da:	6819      	ldr	r1, [r3, #0]
    e8dc:	f7ff ff2c 	bl	e738 <_malloc_trim_r>
    e8e0:	e7b8      	b.n	e854 <_free_r+0x7c>
    e8e2:	0018      	movs	r0, r3
    e8e4:	e7cf      	b.n	e886 <_free_r+0xae>
    e8e6:	4666      	mov	r6, ip
    e8e8:	18d0      	adds	r0, r2, r3
    e8ea:	6840      	ldr	r0, [r0, #4]
    e8ec:	4230      	tst	r0, r6
    e8ee:	d13f      	bne.n	e970 <_free_r+0x198>
    e8f0:	6890      	ldr	r0, [r2, #8]
    e8f2:	195d      	adds	r5, r3, r5
    e8f4:	68d3      	ldr	r3, [r2, #12]
    e8f6:	60c3      	str	r3, [r0, #12]
    e8f8:	6098      	str	r0, [r3, #8]
    e8fa:	4663      	mov	r3, ip
    e8fc:	432b      	orrs	r3, r5
    e8fe:	604b      	str	r3, [r1, #4]
    e900:	514d      	str	r5, [r1, r5]
    e902:	e7a7      	b.n	e854 <_free_r+0x7c>
    e904:	2814      	cmp	r0, #20
    e906:	d814      	bhi.n	e932 <_free_r+0x15a>
    e908:	0002      	movs	r2, r0
    e90a:	305c      	adds	r0, #92	; 0x5c
    e90c:	325b      	adds	r2, #91	; 0x5b
    e90e:	00c0      	lsls	r0, r0, #3
    e910:	e7ac      	b.n	e86c <_free_r+0x94>
    e912:	2301      	movs	r3, #1
    e914:	1092      	asrs	r2, r2, #2
    e916:	4093      	lsls	r3, r2
    e918:	687a      	ldr	r2, [r7, #4]
    e91a:	4313      	orrs	r3, r2
    e91c:	607b      	str	r3, [r7, #4]
    e91e:	0003      	movs	r3, r0
    e920:	e7b2      	b.n	e888 <_free_r+0xb0>
    e922:	4328      	orrs	r0, r5
    e924:	60d9      	str	r1, [r3, #12]
    e926:	6099      	str	r1, [r3, #8]
    e928:	60cb      	str	r3, [r1, #12]
    e92a:	608b      	str	r3, [r1, #8]
    e92c:	6048      	str	r0, [r1, #4]
    e92e:	514d      	str	r5, [r1, r5]
    e930:	e790      	b.n	e854 <_free_r+0x7c>
    e932:	2854      	cmp	r0, #84	; 0x54
    e934:	d805      	bhi.n	e942 <_free_r+0x16a>
    e936:	0b28      	lsrs	r0, r5, #12
    e938:	0002      	movs	r2, r0
    e93a:	306f      	adds	r0, #111	; 0x6f
    e93c:	326e      	adds	r2, #110	; 0x6e
    e93e:	00c0      	lsls	r0, r0, #3
    e940:	e794      	b.n	e86c <_free_r+0x94>
    e942:	22aa      	movs	r2, #170	; 0xaa
    e944:	0052      	lsls	r2, r2, #1
    e946:	4290      	cmp	r0, r2
    e948:	d805      	bhi.n	e956 <_free_r+0x17e>
    e94a:	0be8      	lsrs	r0, r5, #15
    e94c:	0002      	movs	r2, r0
    e94e:	3078      	adds	r0, #120	; 0x78
    e950:	3277      	adds	r2, #119	; 0x77
    e952:	00c0      	lsls	r0, r0, #3
    e954:	e78a      	b.n	e86c <_free_r+0x94>
    e956:	4a0e      	ldr	r2, [pc, #56]	; (e990 <_free_r+0x1b8>)
    e958:	4290      	cmp	r0, r2
    e95a:	d805      	bhi.n	e968 <_free_r+0x190>
    e95c:	0ca8      	lsrs	r0, r5, #18
    e95e:	0002      	movs	r2, r0
    e960:	307d      	adds	r0, #125	; 0x7d
    e962:	327c      	adds	r2, #124	; 0x7c
    e964:	00c0      	lsls	r0, r0, #3
    e966:	e781      	b.n	e86c <_free_r+0x94>
    e968:	20fe      	movs	r0, #254	; 0xfe
    e96a:	227e      	movs	r2, #126	; 0x7e
    e96c:	0080      	lsls	r0, r0, #2
    e96e:	e77d      	b.n	e86c <_free_r+0x94>
    e970:	4663      	mov	r3, ip
    e972:	432b      	orrs	r3, r5
    e974:	604b      	str	r3, [r1, #4]
    e976:	6015      	str	r5, [r2, #0]
    e978:	e76c      	b.n	e854 <_free_r+0x7c>
    e97a:	46c0      	nop			; (mov r8, r8)
    e97c:	200004b4 	.word	0x200004b4
    e980:	000001ff 	.word	0x000001ff
    e984:	200004bc 	.word	0x200004bc
    e988:	200008c0 	.word	0x200008c0
    e98c:	200012e8 	.word	0x200012e8
    e990:	00000554 	.word	0x00000554

0000e994 <__sfvwrite_r>:
    e994:	b5f0      	push	{r4, r5, r6, r7, lr}
    e996:	464e      	mov	r6, r9
    e998:	46de      	mov	lr, fp
    e99a:	4657      	mov	r7, sl
    e99c:	4645      	mov	r5, r8
    e99e:	b5e0      	push	{r5, r6, r7, lr}
    e9a0:	6893      	ldr	r3, [r2, #8]
    e9a2:	b083      	sub	sp, #12
    e9a4:	9000      	str	r0, [sp, #0]
    e9a6:	000c      	movs	r4, r1
    e9a8:	0016      	movs	r6, r2
    e9aa:	2b00      	cmp	r3, #0
    e9ac:	d025      	beq.n	e9fa <__sfvwrite_r+0x66>
    e9ae:	898b      	ldrh	r3, [r1, #12]
    e9b0:	071a      	lsls	r2, r3, #28
    e9b2:	d52a      	bpl.n	ea0a <__sfvwrite_r+0x76>
    e9b4:	690a      	ldr	r2, [r1, #16]
    e9b6:	2a00      	cmp	r2, #0
    e9b8:	d027      	beq.n	ea0a <__sfvwrite_r+0x76>
    e9ba:	6832      	ldr	r2, [r6, #0]
    e9bc:	4693      	mov	fp, r2
    e9be:	079a      	lsls	r2, r3, #30
    e9c0:	d52f      	bpl.n	ea22 <__sfvwrite_r+0x8e>
    e9c2:	4bb2      	ldr	r3, [pc, #712]	; (ec8c <__sfvwrite_r+0x2f8>)
    e9c4:	2700      	movs	r7, #0
    e9c6:	2500      	movs	r5, #0
    e9c8:	4698      	mov	r8, r3
    e9ca:	46b1      	mov	r9, r6
    e9cc:	2d00      	cmp	r5, #0
    e9ce:	d100      	bne.n	e9d2 <__sfvwrite_r+0x3e>
    e9d0:	e072      	b.n	eab8 <__sfvwrite_r+0x124>
    e9d2:	002b      	movs	r3, r5
    e9d4:	4545      	cmp	r5, r8
    e9d6:	d900      	bls.n	e9da <__sfvwrite_r+0x46>
    e9d8:	4bac      	ldr	r3, [pc, #688]	; (ec8c <__sfvwrite_r+0x2f8>)
    e9da:	003a      	movs	r2, r7
    e9dc:	69e1      	ldr	r1, [r4, #28]
    e9de:	9800      	ldr	r0, [sp, #0]
    e9e0:	6a66      	ldr	r6, [r4, #36]	; 0x24
    e9e2:	47b0      	blx	r6
    e9e4:	2800      	cmp	r0, #0
    e9e6:	dc00      	bgt.n	e9ea <__sfvwrite_r+0x56>
    e9e8:	e073      	b.n	ead2 <__sfvwrite_r+0x13e>
    e9ea:	464b      	mov	r3, r9
    e9ec:	689b      	ldr	r3, [r3, #8]
    e9ee:	183f      	adds	r7, r7, r0
    e9f0:	1a2d      	subs	r5, r5, r0
    e9f2:	1a18      	subs	r0, r3, r0
    e9f4:	464b      	mov	r3, r9
    e9f6:	6098      	str	r0, [r3, #8]
    e9f8:	d1e8      	bne.n	e9cc <__sfvwrite_r+0x38>
    e9fa:	2000      	movs	r0, #0
    e9fc:	b003      	add	sp, #12
    e9fe:	bc3c      	pop	{r2, r3, r4, r5}
    ea00:	4690      	mov	r8, r2
    ea02:	4699      	mov	r9, r3
    ea04:	46a2      	mov	sl, r4
    ea06:	46ab      	mov	fp, r5
    ea08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ea0a:	0021      	movs	r1, r4
    ea0c:	9800      	ldr	r0, [sp, #0]
    ea0e:	f7fe fbd1 	bl	d1b4 <__swsetup_r>
    ea12:	2800      	cmp	r0, #0
    ea14:	d000      	beq.n	ea18 <__sfvwrite_r+0x84>
    ea16:	e130      	b.n	ec7a <__sfvwrite_r+0x2e6>
    ea18:	6832      	ldr	r2, [r6, #0]
    ea1a:	89a3      	ldrh	r3, [r4, #12]
    ea1c:	4693      	mov	fp, r2
    ea1e:	079a      	lsls	r2, r3, #30
    ea20:	d4cf      	bmi.n	e9c2 <__sfvwrite_r+0x2e>
    ea22:	07da      	lsls	r2, r3, #31
    ea24:	d55d      	bpl.n	eae2 <__sfvwrite_r+0x14e>
    ea26:	2300      	movs	r3, #0
    ea28:	2000      	movs	r0, #0
    ea2a:	469a      	mov	sl, r3
    ea2c:	2700      	movs	r7, #0
    ea2e:	001d      	movs	r5, r3
    ea30:	46b1      	mov	r9, r6
    ea32:	e029      	b.n	ea88 <__sfvwrite_r+0xf4>
    ea34:	2800      	cmp	r0, #0
    ea36:	d033      	beq.n	eaa0 <__sfvwrite_r+0x10c>
    ea38:	46a8      	mov	r8, r5
    ea3a:	42bd      	cmp	r5, r7
    ea3c:	d900      	bls.n	ea40 <__sfvwrite_r+0xac>
    ea3e:	46b8      	mov	r8, r7
    ea40:	6820      	ldr	r0, [r4, #0]
    ea42:	6922      	ldr	r2, [r4, #16]
    ea44:	4646      	mov	r6, r8
    ea46:	6963      	ldr	r3, [r4, #20]
    ea48:	4290      	cmp	r0, r2
    ea4a:	d907      	bls.n	ea5c <__sfvwrite_r+0xc8>
    ea4c:	68a2      	ldr	r2, [r4, #8]
    ea4e:	4694      	mov	ip, r2
    ea50:	449c      	add	ip, r3
    ea52:	4662      	mov	r2, ip
    ea54:	9201      	str	r2, [sp, #4]
    ea56:	45e0      	cmp	r8, ip
    ea58:	dd00      	ble.n	ea5c <__sfvwrite_r+0xc8>
    ea5a:	e0e9      	b.n	ec30 <__sfvwrite_r+0x29c>
    ea5c:	4598      	cmp	r8, r3
    ea5e:	da00      	bge.n	ea62 <__sfvwrite_r+0xce>
    ea60:	e08f      	b.n	eb82 <__sfvwrite_r+0x1ee>
    ea62:	6a66      	ldr	r6, [r4, #36]	; 0x24
    ea64:	4652      	mov	r2, sl
    ea66:	69e1      	ldr	r1, [r4, #28]
    ea68:	9800      	ldr	r0, [sp, #0]
    ea6a:	47b0      	blx	r6
    ea6c:	1e06      	subs	r6, r0, #0
    ea6e:	dd30      	ble.n	ead2 <__sfvwrite_r+0x13e>
    ea70:	1bad      	subs	r5, r5, r6
    ea72:	2001      	movs	r0, #1
    ea74:	2d00      	cmp	r5, #0
    ea76:	d026      	beq.n	eac6 <__sfvwrite_r+0x132>
    ea78:	464b      	mov	r3, r9
    ea7a:	689b      	ldr	r3, [r3, #8]
    ea7c:	44b2      	add	sl, r6
    ea7e:	1bbf      	subs	r7, r7, r6
    ea80:	1b9e      	subs	r6, r3, r6
    ea82:	464b      	mov	r3, r9
    ea84:	609e      	str	r6, [r3, #8]
    ea86:	d0b8      	beq.n	e9fa <__sfvwrite_r+0x66>
    ea88:	2f00      	cmp	r7, #0
    ea8a:	d1d3      	bne.n	ea34 <__sfvwrite_r+0xa0>
    ea8c:	465b      	mov	r3, fp
    ea8e:	681b      	ldr	r3, [r3, #0]
    ea90:	469a      	mov	sl, r3
    ea92:	465b      	mov	r3, fp
    ea94:	685f      	ldr	r7, [r3, #4]
    ea96:	2308      	movs	r3, #8
    ea98:	469c      	mov	ip, r3
    ea9a:	44e3      	add	fp, ip
    ea9c:	2f00      	cmp	r7, #0
    ea9e:	d0f5      	beq.n	ea8c <__sfvwrite_r+0xf8>
    eaa0:	003a      	movs	r2, r7
    eaa2:	210a      	movs	r1, #10
    eaa4:	4650      	mov	r0, sl
    eaa6:	f000 fc69 	bl	f37c <memchr>
    eaaa:	2800      	cmp	r0, #0
    eaac:	d100      	bne.n	eab0 <__sfvwrite_r+0x11c>
    eaae:	e0e2      	b.n	ec76 <__sfvwrite_r+0x2e2>
    eab0:	4653      	mov	r3, sl
    eab2:	3001      	adds	r0, #1
    eab4:	1ac5      	subs	r5, r0, r3
    eab6:	e7bf      	b.n	ea38 <__sfvwrite_r+0xa4>
    eab8:	465b      	mov	r3, fp
    eaba:	681f      	ldr	r7, [r3, #0]
    eabc:	685d      	ldr	r5, [r3, #4]
    eabe:	2308      	movs	r3, #8
    eac0:	469c      	mov	ip, r3
    eac2:	44e3      	add	fp, ip
    eac4:	e782      	b.n	e9cc <__sfvwrite_r+0x38>
    eac6:	0021      	movs	r1, r4
    eac8:	9800      	ldr	r0, [sp, #0]
    eaca:	f7ff fd81 	bl	e5d0 <_fflush_r>
    eace:	2800      	cmp	r0, #0
    ead0:	d0d2      	beq.n	ea78 <__sfvwrite_r+0xe4>
    ead2:	220c      	movs	r2, #12
    ead4:	5ea3      	ldrsh	r3, [r4, r2]
    ead6:	2240      	movs	r2, #64	; 0x40
    ead8:	2001      	movs	r0, #1
    eada:	4313      	orrs	r3, r2
    eadc:	81a3      	strh	r3, [r4, #12]
    eade:	4240      	negs	r0, r0
    eae0:	e78c      	b.n	e9fc <__sfvwrite_r+0x68>
    eae2:	2200      	movs	r2, #0
    eae4:	4691      	mov	r9, r2
    eae6:	464d      	mov	r5, r9
    eae8:	2d00      	cmp	r5, #0
    eaea:	d023      	beq.n	eb34 <__sfvwrite_r+0x1a0>
    eaec:	68a2      	ldr	r2, [r4, #8]
    eaee:	4690      	mov	r8, r2
    eaf0:	2280      	movs	r2, #128	; 0x80
    eaf2:	0092      	lsls	r2, r2, #2
    eaf4:	4213      	tst	r3, r2
    eaf6:	d026      	beq.n	eb46 <__sfvwrite_r+0x1b2>
    eaf8:	46c2      	mov	sl, r8
    eafa:	4545      	cmp	r5, r8
    eafc:	d34d      	bcc.n	eb9a <__sfvwrite_r+0x206>
    eafe:	2290      	movs	r2, #144	; 0x90
    eb00:	00d2      	lsls	r2, r2, #3
    eb02:	4213      	tst	r3, r2
    eb04:	d14e      	bne.n	eba4 <__sfvwrite_r+0x210>
    eb06:	002f      	movs	r7, r5
    eb08:	6820      	ldr	r0, [r4, #0]
    eb0a:	4652      	mov	r2, sl
    eb0c:	4649      	mov	r1, r9
    eb0e:	f000 fc75 	bl	f3fc <memmove>
    eb12:	4642      	mov	r2, r8
    eb14:	68a3      	ldr	r3, [r4, #8]
    eb16:	1a98      	subs	r0, r3, r2
    eb18:	6823      	ldr	r3, [r4, #0]
    eb1a:	60a0      	str	r0, [r4, #8]
    eb1c:	4453      	add	r3, sl
    eb1e:	6023      	str	r3, [r4, #0]
    eb20:	68b3      	ldr	r3, [r6, #8]
    eb22:	44b9      	add	r9, r7
    eb24:	1bed      	subs	r5, r5, r7
    eb26:	1bdf      	subs	r7, r3, r7
    eb28:	60b7      	str	r7, [r6, #8]
    eb2a:	d100      	bne.n	eb2e <__sfvwrite_r+0x19a>
    eb2c:	e765      	b.n	e9fa <__sfvwrite_r+0x66>
    eb2e:	89a3      	ldrh	r3, [r4, #12]
    eb30:	2d00      	cmp	r5, #0
    eb32:	d1db      	bne.n	eaec <__sfvwrite_r+0x158>
    eb34:	465a      	mov	r2, fp
    eb36:	6812      	ldr	r2, [r2, #0]
    eb38:	4691      	mov	r9, r2
    eb3a:	465a      	mov	r2, fp
    eb3c:	6855      	ldr	r5, [r2, #4]
    eb3e:	2208      	movs	r2, #8
    eb40:	4694      	mov	ip, r2
    eb42:	44e3      	add	fp, ip
    eb44:	e7d0      	b.n	eae8 <__sfvwrite_r+0x154>
    eb46:	6820      	ldr	r0, [r4, #0]
    eb48:	6923      	ldr	r3, [r4, #16]
    eb4a:	4298      	cmp	r0, r3
    eb4c:	d802      	bhi.n	eb54 <__sfvwrite_r+0x1c0>
    eb4e:	6967      	ldr	r7, [r4, #20]
    eb50:	42bd      	cmp	r5, r7
    eb52:	d259      	bcs.n	ec08 <__sfvwrite_r+0x274>
    eb54:	4647      	mov	r7, r8
    eb56:	42af      	cmp	r7, r5
    eb58:	d900      	bls.n	eb5c <__sfvwrite_r+0x1c8>
    eb5a:	002f      	movs	r7, r5
    eb5c:	003a      	movs	r2, r7
    eb5e:	4649      	mov	r1, r9
    eb60:	f000 fc4c 	bl	f3fc <memmove>
    eb64:	68a3      	ldr	r3, [r4, #8]
    eb66:	6822      	ldr	r2, [r4, #0]
    eb68:	1bdb      	subs	r3, r3, r7
    eb6a:	19d2      	adds	r2, r2, r7
    eb6c:	60a3      	str	r3, [r4, #8]
    eb6e:	6022      	str	r2, [r4, #0]
    eb70:	2b00      	cmp	r3, #0
    eb72:	d1d5      	bne.n	eb20 <__sfvwrite_r+0x18c>
    eb74:	0021      	movs	r1, r4
    eb76:	9800      	ldr	r0, [sp, #0]
    eb78:	f7ff fd2a 	bl	e5d0 <_fflush_r>
    eb7c:	2800      	cmp	r0, #0
    eb7e:	d0cf      	beq.n	eb20 <__sfvwrite_r+0x18c>
    eb80:	e7a7      	b.n	ead2 <__sfvwrite_r+0x13e>
    eb82:	4642      	mov	r2, r8
    eb84:	4651      	mov	r1, sl
    eb86:	f000 fc39 	bl	f3fc <memmove>
    eb8a:	4642      	mov	r2, r8
    eb8c:	68a3      	ldr	r3, [r4, #8]
    eb8e:	1a9b      	subs	r3, r3, r2
    eb90:	60a3      	str	r3, [r4, #8]
    eb92:	6823      	ldr	r3, [r4, #0]
    eb94:	4443      	add	r3, r8
    eb96:	6023      	str	r3, [r4, #0]
    eb98:	e76a      	b.n	ea70 <__sfvwrite_r+0xdc>
    eb9a:	46a8      	mov	r8, r5
    eb9c:	6820      	ldr	r0, [r4, #0]
    eb9e:	002f      	movs	r7, r5
    eba0:	46aa      	mov	sl, r5
    eba2:	e7b2      	b.n	eb0a <__sfvwrite_r+0x176>
    eba4:	6921      	ldr	r1, [r4, #16]
    eba6:	6822      	ldr	r2, [r4, #0]
    eba8:	1a52      	subs	r2, r2, r1
    ebaa:	4692      	mov	sl, r2
    ebac:	6962      	ldr	r2, [r4, #20]
    ebae:	0057      	lsls	r7, r2, #1
    ebb0:	18bf      	adds	r7, r7, r2
    ebb2:	0ffa      	lsrs	r2, r7, #31
    ebb4:	19d7      	adds	r7, r2, r7
    ebb6:	4652      	mov	r2, sl
    ebb8:	1c50      	adds	r0, r2, #1
    ebba:	107f      	asrs	r7, r7, #1
    ebbc:	1940      	adds	r0, r0, r5
    ebbe:	003a      	movs	r2, r7
    ebc0:	42b8      	cmp	r0, r7
    ebc2:	d901      	bls.n	ebc8 <__sfvwrite_r+0x234>
    ebc4:	0007      	movs	r7, r0
    ebc6:	0002      	movs	r2, r0
    ebc8:	055b      	lsls	r3, r3, #21
    ebca:	d542      	bpl.n	ec52 <__sfvwrite_r+0x2be>
    ebcc:	0011      	movs	r1, r2
    ebce:	9800      	ldr	r0, [sp, #0]
    ebd0:	f000 f920 	bl	ee14 <_malloc_r>
    ebd4:	4680      	mov	r8, r0
    ebd6:	1e03      	subs	r3, r0, #0
    ebd8:	d052      	beq.n	ec80 <__sfvwrite_r+0x2ec>
    ebda:	4652      	mov	r2, sl
    ebdc:	6921      	ldr	r1, [r4, #16]
    ebde:	f7fc fd8f 	bl	b700 <memcpy>
    ebe2:	89a3      	ldrh	r3, [r4, #12]
    ebe4:	4a2a      	ldr	r2, [pc, #168]	; (ec90 <__sfvwrite_r+0x2fc>)
    ebe6:	4013      	ands	r3, r2
    ebe8:	2280      	movs	r2, #128	; 0x80
    ebea:	4313      	orrs	r3, r2
    ebec:	81a3      	strh	r3, [r4, #12]
    ebee:	4643      	mov	r3, r8
    ebf0:	4640      	mov	r0, r8
    ebf2:	6123      	str	r3, [r4, #16]
    ebf4:	4653      	mov	r3, sl
    ebf6:	4450      	add	r0, sl
    ebf8:	6167      	str	r7, [r4, #20]
    ebfa:	1aff      	subs	r7, r7, r3
    ebfc:	60a7      	str	r7, [r4, #8]
    ebfe:	6020      	str	r0, [r4, #0]
    ec00:	46a8      	mov	r8, r5
    ec02:	002f      	movs	r7, r5
    ec04:	46aa      	mov	sl, r5
    ec06:	e780      	b.n	eb0a <__sfvwrite_r+0x176>
    ec08:	4b22      	ldr	r3, [pc, #136]	; (ec94 <__sfvwrite_r+0x300>)
    ec0a:	0028      	movs	r0, r5
    ec0c:	429d      	cmp	r5, r3
    ec0e:	d900      	bls.n	ec12 <__sfvwrite_r+0x27e>
    ec10:	0018      	movs	r0, r3
    ec12:	0039      	movs	r1, r7
    ec14:	f7fa f904 	bl	8e20 <__divsi3>
    ec18:	003b      	movs	r3, r7
    ec1a:	464a      	mov	r2, r9
    ec1c:	4343      	muls	r3, r0
    ec1e:	69e1      	ldr	r1, [r4, #28]
    ec20:	9800      	ldr	r0, [sp, #0]
    ec22:	6a67      	ldr	r7, [r4, #36]	; 0x24
    ec24:	47b8      	blx	r7
    ec26:	2800      	cmp	r0, #0
    ec28:	dc00      	bgt.n	ec2c <__sfvwrite_r+0x298>
    ec2a:	e752      	b.n	ead2 <__sfvwrite_r+0x13e>
    ec2c:	0007      	movs	r7, r0
    ec2e:	e777      	b.n	eb20 <__sfvwrite_r+0x18c>
    ec30:	4666      	mov	r6, ip
    ec32:	4651      	mov	r1, sl
    ec34:	f000 fbe2 	bl	f3fc <memmove>
    ec38:	46b4      	mov	ip, r6
    ec3a:	6823      	ldr	r3, [r4, #0]
    ec3c:	0021      	movs	r1, r4
    ec3e:	4463      	add	r3, ip
    ec40:	6023      	str	r3, [r4, #0]
    ec42:	9800      	ldr	r0, [sp, #0]
    ec44:	f7ff fcc4 	bl	e5d0 <_fflush_r>
    ec48:	2800      	cmp	r0, #0
    ec4a:	d000      	beq.n	ec4e <__sfvwrite_r+0x2ba>
    ec4c:	e741      	b.n	ead2 <__sfvwrite_r+0x13e>
    ec4e:	9e01      	ldr	r6, [sp, #4]
    ec50:	e70e      	b.n	ea70 <__sfvwrite_r+0xdc>
    ec52:	9800      	ldr	r0, [sp, #0]
    ec54:	f000 ff7a 	bl	fb4c <_realloc_r>
    ec58:	4680      	mov	r8, r0
    ec5a:	2800      	cmp	r0, #0
    ec5c:	d1c7      	bne.n	ebee <__sfvwrite_r+0x25a>
    ec5e:	9d00      	ldr	r5, [sp, #0]
    ec60:	6921      	ldr	r1, [r4, #16]
    ec62:	0028      	movs	r0, r5
    ec64:	f7ff fdb8 	bl	e7d8 <_free_r>
    ec68:	2280      	movs	r2, #128	; 0x80
    ec6a:	89a3      	ldrh	r3, [r4, #12]
    ec6c:	4393      	bics	r3, r2
    ec6e:	3a74      	subs	r2, #116	; 0x74
    ec70:	b21b      	sxth	r3, r3
    ec72:	602a      	str	r2, [r5, #0]
    ec74:	e72f      	b.n	ead6 <__sfvwrite_r+0x142>
    ec76:	1c7d      	adds	r5, r7, #1
    ec78:	e6de      	b.n	ea38 <__sfvwrite_r+0xa4>
    ec7a:	2001      	movs	r0, #1
    ec7c:	4240      	negs	r0, r0
    ec7e:	e6bd      	b.n	e9fc <__sfvwrite_r+0x68>
    ec80:	9a00      	ldr	r2, [sp, #0]
    ec82:	330c      	adds	r3, #12
    ec84:	6013      	str	r3, [r2, #0]
    ec86:	220c      	movs	r2, #12
    ec88:	5ea3      	ldrsh	r3, [r4, r2]
    ec8a:	e724      	b.n	ead6 <__sfvwrite_r+0x142>
    ec8c:	7ffffc00 	.word	0x7ffffc00
    ec90:	fffffb7f 	.word	0xfffffb7f
    ec94:	7fffffff 	.word	0x7fffffff

0000ec98 <_fwalk_reent>:
    ec98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ec9a:	4647      	mov	r7, r8
    ec9c:	46ce      	mov	lr, r9
    ec9e:	b580      	push	{r7, lr}
    eca0:	27b8      	movs	r7, #184	; 0xb8
    eca2:	4680      	mov	r8, r0
    eca4:	00bf      	lsls	r7, r7, #2
    eca6:	4447      	add	r7, r8
    eca8:	4689      	mov	r9, r1
    ecaa:	2600      	movs	r6, #0
    ecac:	2f00      	cmp	r7, #0
    ecae:	d014      	beq.n	ecda <_fwalk_reent+0x42>
    ecb0:	687b      	ldr	r3, [r7, #4]
    ecb2:	68bc      	ldr	r4, [r7, #8]
    ecb4:	1e5d      	subs	r5, r3, #1
    ecb6:	d40d      	bmi.n	ecd4 <_fwalk_reent+0x3c>
    ecb8:	89a3      	ldrh	r3, [r4, #12]
    ecba:	2b01      	cmp	r3, #1
    ecbc:	d907      	bls.n	ecce <_fwalk_reent+0x36>
    ecbe:	220e      	movs	r2, #14
    ecc0:	5ea3      	ldrsh	r3, [r4, r2]
    ecc2:	3301      	adds	r3, #1
    ecc4:	d003      	beq.n	ecce <_fwalk_reent+0x36>
    ecc6:	0021      	movs	r1, r4
    ecc8:	4640      	mov	r0, r8
    ecca:	47c8      	blx	r9
    eccc:	4306      	orrs	r6, r0
    ecce:	3468      	adds	r4, #104	; 0x68
    ecd0:	3d01      	subs	r5, #1
    ecd2:	d2f1      	bcs.n	ecb8 <_fwalk_reent+0x20>
    ecd4:	683f      	ldr	r7, [r7, #0]
    ecd6:	2f00      	cmp	r7, #0
    ecd8:	d1ea      	bne.n	ecb0 <_fwalk_reent+0x18>
    ecda:	0030      	movs	r0, r6
    ecdc:	bc0c      	pop	{r2, r3}
    ecde:	4690      	mov	r8, r2
    ece0:	4699      	mov	r9, r3
    ece2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000ece4 <_localeconv_r>:
    ece4:	4b04      	ldr	r3, [pc, #16]	; (ecf8 <_localeconv_r+0x14>)
    ece6:	681b      	ldr	r3, [r3, #0]
    ece8:	6b58      	ldr	r0, [r3, #52]	; 0x34
    ecea:	2800      	cmp	r0, #0
    ecec:	d001      	beq.n	ecf2 <_localeconv_r+0xe>
    ecee:	30f0      	adds	r0, #240	; 0xf0
    ecf0:	4770      	bx	lr
    ecf2:	4802      	ldr	r0, [pc, #8]	; (ecfc <_localeconv_r+0x18>)
    ecf4:	e7fb      	b.n	ecee <_localeconv_r+0xa>
    ecf6:	46c0      	nop			; (mov r8, r8)
    ecf8:	20000080 	.word	0x20000080
    ecfc:	200008c4 	.word	0x200008c4

0000ed00 <__retarget_lock_init_recursive>:
    ed00:	4770      	bx	lr
    ed02:	46c0      	nop			; (mov r8, r8)

0000ed04 <__retarget_lock_close_recursive>:
    ed04:	4770      	bx	lr
    ed06:	46c0      	nop			; (mov r8, r8)

0000ed08 <__retarget_lock_acquire_recursive>:
    ed08:	4770      	bx	lr
    ed0a:	46c0      	nop			; (mov r8, r8)

0000ed0c <__retarget_lock_release_recursive>:
    ed0c:	4770      	bx	lr
    ed0e:	46c0      	nop			; (mov r8, r8)

0000ed10 <__swhatbuf_r>:
    ed10:	b570      	push	{r4, r5, r6, lr}
    ed12:	000c      	movs	r4, r1
    ed14:	001e      	movs	r6, r3
    ed16:	230e      	movs	r3, #14
    ed18:	5ec9      	ldrsh	r1, [r1, r3]
    ed1a:	b090      	sub	sp, #64	; 0x40
    ed1c:	0015      	movs	r5, r2
    ed1e:	2900      	cmp	r1, #0
    ed20:	db15      	blt.n	ed4e <__swhatbuf_r+0x3e>
    ed22:	aa01      	add	r2, sp, #4
    ed24:	f001 faae 	bl	10284 <_fstat_r>
    ed28:	2800      	cmp	r0, #0
    ed2a:	db10      	blt.n	ed4e <__swhatbuf_r+0x3e>
    ed2c:	22f0      	movs	r2, #240	; 0xf0
    ed2e:	9b02      	ldr	r3, [sp, #8]
    ed30:	0212      	lsls	r2, r2, #8
    ed32:	4013      	ands	r3, r2
    ed34:	4a0d      	ldr	r2, [pc, #52]	; (ed6c <__swhatbuf_r+0x5c>)
    ed36:	2080      	movs	r0, #128	; 0x80
    ed38:	4694      	mov	ip, r2
    ed3a:	4463      	add	r3, ip
    ed3c:	425a      	negs	r2, r3
    ed3e:	4153      	adcs	r3, r2
    ed40:	6033      	str	r3, [r6, #0]
    ed42:	2380      	movs	r3, #128	; 0x80
    ed44:	00db      	lsls	r3, r3, #3
    ed46:	602b      	str	r3, [r5, #0]
    ed48:	0100      	lsls	r0, r0, #4
    ed4a:	b010      	add	sp, #64	; 0x40
    ed4c:	bd70      	pop	{r4, r5, r6, pc}
    ed4e:	2300      	movs	r3, #0
    ed50:	6033      	str	r3, [r6, #0]
    ed52:	89a3      	ldrh	r3, [r4, #12]
    ed54:	061b      	lsls	r3, r3, #24
    ed56:	d503      	bpl.n	ed60 <__swhatbuf_r+0x50>
    ed58:	2340      	movs	r3, #64	; 0x40
    ed5a:	2000      	movs	r0, #0
    ed5c:	602b      	str	r3, [r5, #0]
    ed5e:	e7f4      	b.n	ed4a <__swhatbuf_r+0x3a>
    ed60:	2380      	movs	r3, #128	; 0x80
    ed62:	00db      	lsls	r3, r3, #3
    ed64:	602b      	str	r3, [r5, #0]
    ed66:	2000      	movs	r0, #0
    ed68:	e7ef      	b.n	ed4a <__swhatbuf_r+0x3a>
    ed6a:	46c0      	nop			; (mov r8, r8)
    ed6c:	ffffe000 	.word	0xffffe000

0000ed70 <__smakebuf_r>:
    ed70:	b570      	push	{r4, r5, r6, lr}
    ed72:	898b      	ldrh	r3, [r1, #12]
    ed74:	b082      	sub	sp, #8
    ed76:	0006      	movs	r6, r0
    ed78:	000c      	movs	r4, r1
    ed7a:	079b      	lsls	r3, r3, #30
    ed7c:	d507      	bpl.n	ed8e <__smakebuf_r+0x1e>
    ed7e:	0023      	movs	r3, r4
    ed80:	3343      	adds	r3, #67	; 0x43
    ed82:	6023      	str	r3, [r4, #0]
    ed84:	6123      	str	r3, [r4, #16]
    ed86:	2301      	movs	r3, #1
    ed88:	6163      	str	r3, [r4, #20]
    ed8a:	b002      	add	sp, #8
    ed8c:	bd70      	pop	{r4, r5, r6, pc}
    ed8e:	ab01      	add	r3, sp, #4
    ed90:	466a      	mov	r2, sp
    ed92:	f7ff ffbd 	bl	ed10 <__swhatbuf_r>
    ed96:	9900      	ldr	r1, [sp, #0]
    ed98:	0005      	movs	r5, r0
    ed9a:	0030      	movs	r0, r6
    ed9c:	f000 f83a 	bl	ee14 <_malloc_r>
    eda0:	2800      	cmp	r0, #0
    eda2:	d01e      	beq.n	ede2 <__smakebuf_r+0x72>
    eda4:	2280      	movs	r2, #128	; 0x80
    eda6:	4b15      	ldr	r3, [pc, #84]	; (edfc <__smakebuf_r+0x8c>)
    eda8:	63f3      	str	r3, [r6, #60]	; 0x3c
    edaa:	89a3      	ldrh	r3, [r4, #12]
    edac:	6020      	str	r0, [r4, #0]
    edae:	4313      	orrs	r3, r2
    edb0:	9a00      	ldr	r2, [sp, #0]
    edb2:	b21b      	sxth	r3, r3
    edb4:	6162      	str	r2, [r4, #20]
    edb6:	9a01      	ldr	r2, [sp, #4]
    edb8:	81a3      	strh	r3, [r4, #12]
    edba:	6120      	str	r0, [r4, #16]
    edbc:	2a00      	cmp	r2, #0
    edbe:	d102      	bne.n	edc6 <__smakebuf_r+0x56>
    edc0:	432b      	orrs	r3, r5
    edc2:	81a3      	strh	r3, [r4, #12]
    edc4:	e7e1      	b.n	ed8a <__smakebuf_r+0x1a>
    edc6:	230e      	movs	r3, #14
    edc8:	5ee1      	ldrsh	r1, [r4, r3]
    edca:	0030      	movs	r0, r6
    edcc:	f001 fa6e 	bl	102ac <_isatty_r>
    edd0:	2800      	cmp	r0, #0
    edd2:	d010      	beq.n	edf6 <__smakebuf_r+0x86>
    edd4:	2203      	movs	r2, #3
    edd6:	89a3      	ldrh	r3, [r4, #12]
    edd8:	4393      	bics	r3, r2
    edda:	2201      	movs	r2, #1
    eddc:	4313      	orrs	r3, r2
    edde:	b21b      	sxth	r3, r3
    ede0:	e7ee      	b.n	edc0 <__smakebuf_r+0x50>
    ede2:	220c      	movs	r2, #12
    ede4:	5ea3      	ldrsh	r3, [r4, r2]
    ede6:	059a      	lsls	r2, r3, #22
    ede8:	d4cf      	bmi.n	ed8a <__smakebuf_r+0x1a>
    edea:	2203      	movs	r2, #3
    edec:	4393      	bics	r3, r2
    edee:	2202      	movs	r2, #2
    edf0:	4313      	orrs	r3, r2
    edf2:	81a3      	strh	r3, [r4, #12]
    edf4:	e7c3      	b.n	ed7e <__smakebuf_r+0xe>
    edf6:	220c      	movs	r2, #12
    edf8:	5ea3      	ldrsh	r3, [r4, r2]
    edfa:	e7e1      	b.n	edc0 <__smakebuf_r+0x50>
    edfc:	0000e625 	.word	0x0000e625

0000ee00 <malloc>:
    ee00:	b510      	push	{r4, lr}
    ee02:	4b03      	ldr	r3, [pc, #12]	; (ee10 <malloc+0x10>)
    ee04:	0001      	movs	r1, r0
    ee06:	6818      	ldr	r0, [r3, #0]
    ee08:	f000 f804 	bl	ee14 <_malloc_r>
    ee0c:	bd10      	pop	{r4, pc}
    ee0e:	46c0      	nop			; (mov r8, r8)
    ee10:	20000080 	.word	0x20000080

0000ee14 <_malloc_r>:
    ee14:	b5f0      	push	{r4, r5, r6, r7, lr}
    ee16:	4657      	mov	r7, sl
    ee18:	4645      	mov	r5, r8
    ee1a:	46de      	mov	lr, fp
    ee1c:	464e      	mov	r6, r9
    ee1e:	b5e0      	push	{r5, r6, r7, lr}
    ee20:	000d      	movs	r5, r1
    ee22:	350b      	adds	r5, #11
    ee24:	b083      	sub	sp, #12
    ee26:	0007      	movs	r7, r0
    ee28:	2d16      	cmp	r5, #22
    ee2a:	d800      	bhi.n	ee2e <_malloc_r+0x1a>
    ee2c:	e09f      	b.n	ef6e <_malloc_r+0x15a>
    ee2e:	2307      	movs	r3, #7
    ee30:	439d      	bics	r5, r3
    ee32:	d500      	bpl.n	ee36 <_malloc_r+0x22>
    ee34:	e0c4      	b.n	efc0 <_malloc_r+0x1ac>
    ee36:	42a9      	cmp	r1, r5
    ee38:	d900      	bls.n	ee3c <_malloc_r+0x28>
    ee3a:	e0c1      	b.n	efc0 <_malloc_r+0x1ac>
    ee3c:	f000 fb2e 	bl	f49c <__malloc_lock>
    ee40:	23f8      	movs	r3, #248	; 0xf8
    ee42:	33ff      	adds	r3, #255	; 0xff
    ee44:	429d      	cmp	r5, r3
    ee46:	d800      	bhi.n	ee4a <_malloc_r+0x36>
    ee48:	e28f      	b.n	f36a <_malloc_r+0x556>
    ee4a:	0a68      	lsrs	r0, r5, #9
    ee4c:	d100      	bne.n	ee50 <_malloc_r+0x3c>
    ee4e:	e0bb      	b.n	efc8 <_malloc_r+0x1b4>
    ee50:	2804      	cmp	r0, #4
    ee52:	d900      	bls.n	ee56 <_malloc_r+0x42>
    ee54:	e162      	b.n	f11c <_malloc_r+0x308>
    ee56:	2338      	movs	r3, #56	; 0x38
    ee58:	4698      	mov	r8, r3
    ee5a:	09a8      	lsrs	r0, r5, #6
    ee5c:	4480      	add	r8, r0
    ee5e:	3039      	adds	r0, #57	; 0x39
    ee60:	00c1      	lsls	r1, r0, #3
    ee62:	4ed2      	ldr	r6, [pc, #840]	; (f1ac <_malloc_r+0x398>)
    ee64:	1871      	adds	r1, r6, r1
    ee66:	3908      	subs	r1, #8
    ee68:	68cc      	ldr	r4, [r1, #12]
    ee6a:	42a1      	cmp	r1, r4
    ee6c:	d019      	beq.n	eea2 <_malloc_r+0x8e>
    ee6e:	2303      	movs	r3, #3
    ee70:	6862      	ldr	r2, [r4, #4]
    ee72:	439a      	bics	r2, r3
    ee74:	0013      	movs	r3, r2
    ee76:	1b52      	subs	r2, r2, r5
    ee78:	2a0f      	cmp	r2, #15
    ee7a:	dd00      	ble.n	ee7e <_malloc_r+0x6a>
    ee7c:	e0aa      	b.n	efd4 <_malloc_r+0x1c0>
    ee7e:	2a00      	cmp	r2, #0
    ee80:	db00      	blt.n	ee84 <_malloc_r+0x70>
    ee82:	e088      	b.n	ef96 <_malloc_r+0x182>
    ee84:	2303      	movs	r3, #3
    ee86:	469c      	mov	ip, r3
    ee88:	e008      	b.n	ee9c <_malloc_r+0x88>
    ee8a:	4662      	mov	r2, ip
    ee8c:	6863      	ldr	r3, [r4, #4]
    ee8e:	4393      	bics	r3, r2
    ee90:	1b5a      	subs	r2, r3, r5
    ee92:	2a0f      	cmp	r2, #15
    ee94:	dd00      	ble.n	ee98 <_malloc_r+0x84>
    ee96:	e09d      	b.n	efd4 <_malloc_r+0x1c0>
    ee98:	2a00      	cmp	r2, #0
    ee9a:	da7c      	bge.n	ef96 <_malloc_r+0x182>
    ee9c:	68e4      	ldr	r4, [r4, #12]
    ee9e:	42a1      	cmp	r1, r4
    eea0:	d1f3      	bne.n	ee8a <_malloc_r+0x76>
    eea2:	0032      	movs	r2, r6
    eea4:	6934      	ldr	r4, [r6, #16]
    eea6:	3208      	adds	r2, #8
    eea8:	4294      	cmp	r4, r2
    eeaa:	d100      	bne.n	eeae <_malloc_r+0x9a>
    eeac:	e190      	b.n	f1d0 <_malloc_r+0x3bc>
    eeae:	2303      	movs	r3, #3
    eeb0:	6861      	ldr	r1, [r4, #4]
    eeb2:	4399      	bics	r1, r3
    eeb4:	4689      	mov	r9, r1
    eeb6:	1b49      	subs	r1, r1, r5
    eeb8:	290f      	cmp	r1, #15
    eeba:	dd00      	ble.n	eebe <_malloc_r+0xaa>
    eebc:	e162      	b.n	f184 <_malloc_r+0x370>
    eebe:	6172      	str	r2, [r6, #20]
    eec0:	6132      	str	r2, [r6, #16]
    eec2:	2900      	cmp	r1, #0
    eec4:	db00      	blt.n	eec8 <_malloc_r+0xb4>
    eec6:	e087      	b.n	efd8 <_malloc_r+0x1c4>
    eec8:	4ab9      	ldr	r2, [pc, #740]	; (f1b0 <_malloc_r+0x39c>)
    eeca:	464b      	mov	r3, r9
    eecc:	4591      	cmp	r9, r2
    eece:	d900      	bls.n	eed2 <_malloc_r+0xbe>
    eed0:	e130      	b.n	f134 <_malloc_r+0x320>
    eed2:	08db      	lsrs	r3, r3, #3
    eed4:	3aff      	subs	r2, #255	; 0xff
    eed6:	1099      	asrs	r1, r3, #2
    eed8:	3aff      	subs	r2, #255	; 0xff
    eeda:	408a      	lsls	r2, r1
    eedc:	00db      	lsls	r3, r3, #3
    eede:	6871      	ldr	r1, [r6, #4]
    eee0:	199b      	adds	r3, r3, r6
    eee2:	430a      	orrs	r2, r1
    eee4:	6899      	ldr	r1, [r3, #8]
    eee6:	6072      	str	r2, [r6, #4]
    eee8:	60e3      	str	r3, [r4, #12]
    eeea:	60a1      	str	r1, [r4, #8]
    eeec:	609c      	str	r4, [r3, #8]
    eeee:	0013      	movs	r3, r2
    eef0:	60cc      	str	r4, [r1, #12]
    eef2:	2101      	movs	r1, #1
    eef4:	1082      	asrs	r2, r0, #2
    eef6:	4091      	lsls	r1, r2
    eef8:	4299      	cmp	r1, r3
    eefa:	d86f      	bhi.n	efdc <_malloc_r+0x1c8>
    eefc:	420b      	tst	r3, r1
    eefe:	d105      	bne.n	ef0c <_malloc_r+0xf8>
    ef00:	2203      	movs	r2, #3
    ef02:	4390      	bics	r0, r2
    ef04:	0049      	lsls	r1, r1, #1
    ef06:	3004      	adds	r0, #4
    ef08:	420b      	tst	r3, r1
    ef0a:	d0fb      	beq.n	ef04 <_malloc_r+0xf0>
    ef0c:	2303      	movs	r3, #3
    ef0e:	4698      	mov	r8, r3
    ef10:	00c3      	lsls	r3, r0, #3
    ef12:	4699      	mov	r9, r3
    ef14:	44b1      	add	r9, r6
    ef16:	46cc      	mov	ip, r9
    ef18:	4682      	mov	sl, r0
    ef1a:	4663      	mov	r3, ip
    ef1c:	68dc      	ldr	r4, [r3, #12]
    ef1e:	45a4      	cmp	ip, r4
    ef20:	d107      	bne.n	ef32 <_malloc_r+0x11e>
    ef22:	e157      	b.n	f1d4 <_malloc_r+0x3c0>
    ef24:	2a00      	cmp	r2, #0
    ef26:	db00      	blt.n	ef2a <_malloc_r+0x116>
    ef28:	e166      	b.n	f1f8 <_malloc_r+0x3e4>
    ef2a:	68e4      	ldr	r4, [r4, #12]
    ef2c:	45a4      	cmp	ip, r4
    ef2e:	d100      	bne.n	ef32 <_malloc_r+0x11e>
    ef30:	e150      	b.n	f1d4 <_malloc_r+0x3c0>
    ef32:	4642      	mov	r2, r8
    ef34:	6863      	ldr	r3, [r4, #4]
    ef36:	4393      	bics	r3, r2
    ef38:	1b5a      	subs	r2, r3, r5
    ef3a:	2a0f      	cmp	r2, #15
    ef3c:	ddf2      	ble.n	ef24 <_malloc_r+0x110>
    ef3e:	2001      	movs	r0, #1
    ef40:	4680      	mov	r8, r0
    ef42:	1961      	adds	r1, r4, r5
    ef44:	4305      	orrs	r5, r0
    ef46:	6065      	str	r5, [r4, #4]
    ef48:	68a0      	ldr	r0, [r4, #8]
    ef4a:	68e5      	ldr	r5, [r4, #12]
    ef4c:	3608      	adds	r6, #8
    ef4e:	60c5      	str	r5, [r0, #12]
    ef50:	60a8      	str	r0, [r5, #8]
    ef52:	4640      	mov	r0, r8
    ef54:	60f1      	str	r1, [r6, #12]
    ef56:	60b1      	str	r1, [r6, #8]
    ef58:	4310      	orrs	r0, r2
    ef5a:	6048      	str	r0, [r1, #4]
    ef5c:	60ce      	str	r6, [r1, #12]
    ef5e:	608e      	str	r6, [r1, #8]
    ef60:	0038      	movs	r0, r7
    ef62:	50e2      	str	r2, [r4, r3]
    ef64:	f000 faa2 	bl	f4ac <__malloc_unlock>
    ef68:	0020      	movs	r0, r4
    ef6a:	3008      	adds	r0, #8
    ef6c:	e021      	b.n	efb2 <_malloc_r+0x19e>
    ef6e:	2910      	cmp	r1, #16
    ef70:	d826      	bhi.n	efc0 <_malloc_r+0x1ac>
    ef72:	0038      	movs	r0, r7
    ef74:	f000 fa92 	bl	f49c <__malloc_lock>
    ef78:	2510      	movs	r5, #16
    ef7a:	2318      	movs	r3, #24
    ef7c:	2002      	movs	r0, #2
    ef7e:	4e8b      	ldr	r6, [pc, #556]	; (f1ac <_malloc_r+0x398>)
    ef80:	18f3      	adds	r3, r6, r3
    ef82:	001a      	movs	r2, r3
    ef84:	685c      	ldr	r4, [r3, #4]
    ef86:	3a08      	subs	r2, #8
    ef88:	4294      	cmp	r4, r2
    ef8a:	d100      	bne.n	ef8e <_malloc_r+0x17a>
    ef8c:	e12e      	b.n	f1ec <_malloc_r+0x3d8>
    ef8e:	2303      	movs	r3, #3
    ef90:	6862      	ldr	r2, [r4, #4]
    ef92:	439a      	bics	r2, r3
    ef94:	0013      	movs	r3, r2
    ef96:	68e2      	ldr	r2, [r4, #12]
    ef98:	68a1      	ldr	r1, [r4, #8]
    ef9a:	60ca      	str	r2, [r1, #12]
    ef9c:	6091      	str	r1, [r2, #8]
    ef9e:	2201      	movs	r2, #1
    efa0:	18e3      	adds	r3, r4, r3
    efa2:	6859      	ldr	r1, [r3, #4]
    efa4:	0038      	movs	r0, r7
    efa6:	430a      	orrs	r2, r1
    efa8:	605a      	str	r2, [r3, #4]
    efaa:	f000 fa7f 	bl	f4ac <__malloc_unlock>
    efae:	0020      	movs	r0, r4
    efb0:	3008      	adds	r0, #8
    efb2:	b003      	add	sp, #12
    efb4:	bc3c      	pop	{r2, r3, r4, r5}
    efb6:	4690      	mov	r8, r2
    efb8:	4699      	mov	r9, r3
    efba:	46a2      	mov	sl, r4
    efbc:	46ab      	mov	fp, r5
    efbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    efc0:	230c      	movs	r3, #12
    efc2:	2000      	movs	r0, #0
    efc4:	603b      	str	r3, [r7, #0]
    efc6:	e7f4      	b.n	efb2 <_malloc_r+0x19e>
    efc8:	2180      	movs	r1, #128	; 0x80
    efca:	233f      	movs	r3, #63	; 0x3f
    efcc:	2040      	movs	r0, #64	; 0x40
    efce:	0089      	lsls	r1, r1, #2
    efd0:	4698      	mov	r8, r3
    efd2:	e746      	b.n	ee62 <_malloc_r+0x4e>
    efd4:	4640      	mov	r0, r8
    efd6:	e764      	b.n	eea2 <_malloc_r+0x8e>
    efd8:	464b      	mov	r3, r9
    efda:	e7e0      	b.n	ef9e <_malloc_r+0x18a>
    efdc:	2303      	movs	r3, #3
    efde:	68b4      	ldr	r4, [r6, #8]
    efe0:	6862      	ldr	r2, [r4, #4]
    efe2:	439a      	bics	r2, r3
    efe4:	4690      	mov	r8, r2
    efe6:	42aa      	cmp	r2, r5
    efe8:	d303      	bcc.n	eff2 <_malloc_r+0x1de>
    efea:	1b53      	subs	r3, r2, r5
    efec:	2b0f      	cmp	r3, #15
    efee:	dd00      	ble.n	eff2 <_malloc_r+0x1de>
    eff0:	e086      	b.n	f100 <_malloc_r+0x2ec>
    eff2:	0023      	movs	r3, r4
    eff4:	4443      	add	r3, r8
    eff6:	4a6f      	ldr	r2, [pc, #444]	; (f1b4 <_malloc_r+0x3a0>)
    eff8:	9301      	str	r3, [sp, #4]
    effa:	4b6f      	ldr	r3, [pc, #444]	; (f1b8 <_malloc_r+0x3a4>)
    effc:	4693      	mov	fp, r2
    effe:	681b      	ldr	r3, [r3, #0]
    f000:	6812      	ldr	r2, [r2, #0]
    f002:	18eb      	adds	r3, r5, r3
    f004:	3201      	adds	r2, #1
    f006:	d100      	bne.n	f00a <_malloc_r+0x1f6>
    f008:	e168      	b.n	f2dc <_malloc_r+0x4c8>
    f00a:	4a6c      	ldr	r2, [pc, #432]	; (f1bc <_malloc_r+0x3a8>)
    f00c:	4694      	mov	ip, r2
    f00e:	4463      	add	r3, ip
    f010:	0b1b      	lsrs	r3, r3, #12
    f012:	031b      	lsls	r3, r3, #12
    f014:	9300      	str	r3, [sp, #0]
    f016:	9900      	ldr	r1, [sp, #0]
    f018:	0038      	movs	r0, r7
    f01a:	f000 ff55 	bl	fec8 <_sbrk_r>
    f01e:	0003      	movs	r3, r0
    f020:	4681      	mov	r9, r0
    f022:	3301      	adds	r3, #1
    f024:	d061      	beq.n	f0ea <_malloc_r+0x2d6>
    f026:	9b01      	ldr	r3, [sp, #4]
    f028:	4283      	cmp	r3, r0
    f02a:	d900      	bls.n	f02e <_malloc_r+0x21a>
    f02c:	e0ff      	b.n	f22e <_malloc_r+0x41a>
    f02e:	4b64      	ldr	r3, [pc, #400]	; (f1c0 <_malloc_r+0x3ac>)
    f030:	9a00      	ldr	r2, [sp, #0]
    f032:	469a      	mov	sl, r3
    f034:	681b      	ldr	r3, [r3, #0]
    f036:	469c      	mov	ip, r3
    f038:	4653      	mov	r3, sl
    f03a:	4462      	add	r2, ip
    f03c:	601a      	str	r2, [r3, #0]
    f03e:	9b01      	ldr	r3, [sp, #4]
    f040:	0011      	movs	r1, r2
    f042:	4283      	cmp	r3, r0
    f044:	d100      	bne.n	f048 <_malloc_r+0x234>
    f046:	e155      	b.n	f2f4 <_malloc_r+0x4e0>
    f048:	465b      	mov	r3, fp
    f04a:	681b      	ldr	r3, [r3, #0]
    f04c:	3301      	adds	r3, #1
    f04e:	d100      	bne.n	f052 <_malloc_r+0x23e>
    f050:	e16c      	b.n	f32c <_malloc_r+0x518>
    f052:	464b      	mov	r3, r9
    f054:	9a01      	ldr	r2, [sp, #4]
    f056:	1a9b      	subs	r3, r3, r2
    f058:	1859      	adds	r1, r3, r1
    f05a:	4653      	mov	r3, sl
    f05c:	6019      	str	r1, [r3, #0]
    f05e:	2307      	movs	r3, #7
    f060:	464a      	mov	r2, r9
    f062:	4013      	ands	r3, r2
    f064:	d100      	bne.n	f068 <_malloc_r+0x254>
    f066:	e124      	b.n	f2b2 <_malloc_r+0x49e>
    f068:	2108      	movs	r1, #8
    f06a:	4689      	mov	r9, r1
    f06c:	4955      	ldr	r1, [pc, #340]	; (f1c4 <_malloc_r+0x3b0>)
    f06e:	1ad2      	subs	r2, r2, r3
    f070:	4491      	add	r9, r2
    f072:	1acb      	subs	r3, r1, r3
    f074:	9a00      	ldr	r2, [sp, #0]
    f076:	0038      	movs	r0, r7
    f078:	444a      	add	r2, r9
    f07a:	0511      	lsls	r1, r2, #20
    f07c:	0d09      	lsrs	r1, r1, #20
    f07e:	1a5b      	subs	r3, r3, r1
    f080:	0019      	movs	r1, r3
    f082:	469b      	mov	fp, r3
    f084:	f000 ff20 	bl	fec8 <_sbrk_r>
    f088:	1c43      	adds	r3, r0, #1
    f08a:	d100      	bne.n	f08e <_malloc_r+0x27a>
    f08c:	e142      	b.n	f314 <_malloc_r+0x500>
    f08e:	464b      	mov	r3, r9
    f090:	1ac0      	subs	r0, r0, r3
    f092:	2301      	movs	r3, #1
    f094:	4458      	add	r0, fp
    f096:	4318      	orrs	r0, r3
    f098:	4653      	mov	r3, sl
    f09a:	681b      	ldr	r3, [r3, #0]
    f09c:	445b      	add	r3, fp
    f09e:	0019      	movs	r1, r3
    f0a0:	4653      	mov	r3, sl
    f0a2:	6019      	str	r1, [r3, #0]
    f0a4:	464b      	mov	r3, r9
    f0a6:	60b3      	str	r3, [r6, #8]
    f0a8:	6058      	str	r0, [r3, #4]
    f0aa:	42b4      	cmp	r4, r6
    f0ac:	d013      	beq.n	f0d6 <_malloc_r+0x2c2>
    f0ae:	4643      	mov	r3, r8
    f0b0:	2b0f      	cmp	r3, #15
    f0b2:	d800      	bhi.n	f0b6 <_malloc_r+0x2a2>
    f0b4:	e0e8      	b.n	f288 <_malloc_r+0x474>
    f0b6:	4643      	mov	r3, r8
    f0b8:	2207      	movs	r2, #7
    f0ba:	6860      	ldr	r0, [r4, #4]
    f0bc:	3b0c      	subs	r3, #12
    f0be:	4393      	bics	r3, r2
    f0c0:	3a06      	subs	r2, #6
    f0c2:	4002      	ands	r2, r0
    f0c4:	2005      	movs	r0, #5
    f0c6:	431a      	orrs	r2, r3
    f0c8:	6062      	str	r2, [r4, #4]
    f0ca:	18e2      	adds	r2, r4, r3
    f0cc:	6050      	str	r0, [r2, #4]
    f0ce:	6090      	str	r0, [r2, #8]
    f0d0:	2b0f      	cmp	r3, #15
    f0d2:	d900      	bls.n	f0d6 <_malloc_r+0x2c2>
    f0d4:	e122      	b.n	f31c <_malloc_r+0x508>
    f0d6:	4b3c      	ldr	r3, [pc, #240]	; (f1c8 <_malloc_r+0x3b4>)
    f0d8:	681a      	ldr	r2, [r3, #0]
    f0da:	4291      	cmp	r1, r2
    f0dc:	d900      	bls.n	f0e0 <_malloc_r+0x2cc>
    f0de:	6019      	str	r1, [r3, #0]
    f0e0:	4b3a      	ldr	r3, [pc, #232]	; (f1cc <_malloc_r+0x3b8>)
    f0e2:	681a      	ldr	r2, [r3, #0]
    f0e4:	4291      	cmp	r1, r2
    f0e6:	d900      	bls.n	f0ea <_malloc_r+0x2d6>
    f0e8:	6019      	str	r1, [r3, #0]
    f0ea:	2303      	movs	r3, #3
    f0ec:	68b4      	ldr	r4, [r6, #8]
    f0ee:	6862      	ldr	r2, [r4, #4]
    f0f0:	439a      	bics	r2, r3
    f0f2:	1b53      	subs	r3, r2, r5
    f0f4:	4295      	cmp	r5, r2
    f0f6:	d900      	bls.n	f0fa <_malloc_r+0x2e6>
    f0f8:	e0c9      	b.n	f28e <_malloc_r+0x47a>
    f0fa:	2b0f      	cmp	r3, #15
    f0fc:	dc00      	bgt.n	f100 <_malloc_r+0x2ec>
    f0fe:	e0c6      	b.n	f28e <_malloc_r+0x47a>
    f100:	2201      	movs	r2, #1
    f102:	0029      	movs	r1, r5
    f104:	4313      	orrs	r3, r2
    f106:	4311      	orrs	r1, r2
    f108:	1965      	adds	r5, r4, r5
    f10a:	6061      	str	r1, [r4, #4]
    f10c:	0038      	movs	r0, r7
    f10e:	60b5      	str	r5, [r6, #8]
    f110:	606b      	str	r3, [r5, #4]
    f112:	f000 f9cb 	bl	f4ac <__malloc_unlock>
    f116:	0020      	movs	r0, r4
    f118:	3008      	adds	r0, #8
    f11a:	e74a      	b.n	efb2 <_malloc_r+0x19e>
    f11c:	2814      	cmp	r0, #20
    f11e:	d97a      	bls.n	f216 <_malloc_r+0x402>
    f120:	2854      	cmp	r0, #84	; 0x54
    f122:	d900      	bls.n	f126 <_malloc_r+0x312>
    f124:	e0ba      	b.n	f29c <_malloc_r+0x488>
    f126:	236e      	movs	r3, #110	; 0x6e
    f128:	4698      	mov	r8, r3
    f12a:	0b28      	lsrs	r0, r5, #12
    f12c:	4480      	add	r8, r0
    f12e:	306f      	adds	r0, #111	; 0x6f
    f130:	00c1      	lsls	r1, r0, #3
    f132:	e696      	b.n	ee62 <_malloc_r+0x4e>
    f134:	0a5a      	lsrs	r2, r3, #9
    f136:	2a04      	cmp	r2, #4
    f138:	d973      	bls.n	f222 <_malloc_r+0x40e>
    f13a:	2a14      	cmp	r2, #20
    f13c:	d900      	bls.n	f140 <_malloc_r+0x32c>
    f13e:	e0d0      	b.n	f2e2 <_malloc_r+0x4ce>
    f140:	0011      	movs	r1, r2
    f142:	325c      	adds	r2, #92	; 0x5c
    f144:	315b      	adds	r1, #91	; 0x5b
    f146:	00d2      	lsls	r2, r2, #3
    f148:	2308      	movs	r3, #8
    f14a:	425b      	negs	r3, r3
    f14c:	469c      	mov	ip, r3
    f14e:	18b2      	adds	r2, r6, r2
    f150:	4494      	add	ip, r2
    f152:	4663      	mov	r3, ip
    f154:	689a      	ldr	r2, [r3, #8]
    f156:	2303      	movs	r3, #3
    f158:	4698      	mov	r8, r3
    f15a:	4594      	cmp	ip, r2
    f15c:	d100      	bne.n	f160 <_malloc_r+0x34c>
    f15e:	e0ab      	b.n	f2b8 <_malloc_r+0x4a4>
    f160:	4643      	mov	r3, r8
    f162:	6851      	ldr	r1, [r2, #4]
    f164:	4399      	bics	r1, r3
    f166:	4589      	cmp	r9, r1
    f168:	d300      	bcc.n	f16c <_malloc_r+0x358>
    f16a:	e095      	b.n	f298 <_malloc_r+0x484>
    f16c:	6892      	ldr	r2, [r2, #8]
    f16e:	4594      	cmp	ip, r2
    f170:	d1f6      	bne.n	f160 <_malloc_r+0x34c>
    f172:	4663      	mov	r3, ip
    f174:	68da      	ldr	r2, [r3, #12]
    f176:	6873      	ldr	r3, [r6, #4]
    f178:	4661      	mov	r1, ip
    f17a:	60e2      	str	r2, [r4, #12]
    f17c:	60a1      	str	r1, [r4, #8]
    f17e:	6094      	str	r4, [r2, #8]
    f180:	60cc      	str	r4, [r1, #12]
    f182:	e6b6      	b.n	eef2 <_malloc_r+0xde>
    f184:	2301      	movs	r3, #1
    f186:	1960      	adds	r0, r4, r5
    f188:	431d      	orrs	r5, r3
    f18a:	6065      	str	r5, [r4, #4]
    f18c:	6170      	str	r0, [r6, #20]
    f18e:	6130      	str	r0, [r6, #16]
    f190:	60c2      	str	r2, [r0, #12]
    f192:	6082      	str	r2, [r0, #8]
    f194:	001a      	movs	r2, r3
    f196:	464b      	mov	r3, r9
    f198:	430a      	orrs	r2, r1
    f19a:	6042      	str	r2, [r0, #4]
    f19c:	0038      	movs	r0, r7
    f19e:	50e1      	str	r1, [r4, r3]
    f1a0:	f000 f984 	bl	f4ac <__malloc_unlock>
    f1a4:	0020      	movs	r0, r4
    f1a6:	3008      	adds	r0, #8
    f1a8:	e703      	b.n	efb2 <_malloc_r+0x19e>
    f1aa:	46c0      	nop			; (mov r8, r8)
    f1ac:	200004b4 	.word	0x200004b4
    f1b0:	000001ff 	.word	0x000001ff
    f1b4:	200008bc 	.word	0x200008bc
    f1b8:	200012e8 	.word	0x200012e8
    f1bc:	0000100f 	.word	0x0000100f
    f1c0:	200012b8 	.word	0x200012b8
    f1c4:	00001008 	.word	0x00001008
    f1c8:	200012e0 	.word	0x200012e0
    f1cc:	200012e4 	.word	0x200012e4
    f1d0:	6873      	ldr	r3, [r6, #4]
    f1d2:	e68e      	b.n	eef2 <_malloc_r+0xde>
    f1d4:	2308      	movs	r3, #8
    f1d6:	469b      	mov	fp, r3
    f1d8:	3b07      	subs	r3, #7
    f1da:	44dc      	add	ip, fp
    f1dc:	469b      	mov	fp, r3
    f1de:	44da      	add	sl, fp
    f1e0:	4643      	mov	r3, r8
    f1e2:	4652      	mov	r2, sl
    f1e4:	4213      	tst	r3, r2
    f1e6:	d000      	beq.n	f1ea <_malloc_r+0x3d6>
    f1e8:	e697      	b.n	ef1a <_malloc_r+0x106>
    f1ea:	e037      	b.n	f25c <_malloc_r+0x448>
    f1ec:	68dc      	ldr	r4, [r3, #12]
    f1ee:	3002      	adds	r0, #2
    f1f0:	42a3      	cmp	r3, r4
    f1f2:	d100      	bne.n	f1f6 <_malloc_r+0x3e2>
    f1f4:	e655      	b.n	eea2 <_malloc_r+0x8e>
    f1f6:	e6ca      	b.n	ef8e <_malloc_r+0x17a>
    f1f8:	2201      	movs	r2, #1
    f1fa:	18e3      	adds	r3, r4, r3
    f1fc:	6859      	ldr	r1, [r3, #4]
    f1fe:	0038      	movs	r0, r7
    f200:	430a      	orrs	r2, r1
    f202:	605a      	str	r2, [r3, #4]
    f204:	68e3      	ldr	r3, [r4, #12]
    f206:	68a2      	ldr	r2, [r4, #8]
    f208:	60d3      	str	r3, [r2, #12]
    f20a:	609a      	str	r2, [r3, #8]
    f20c:	f000 f94e 	bl	f4ac <__malloc_unlock>
    f210:	0020      	movs	r0, r4
    f212:	3008      	adds	r0, #8
    f214:	e6cd      	b.n	efb2 <_malloc_r+0x19e>
    f216:	235b      	movs	r3, #91	; 0x5b
    f218:	4698      	mov	r8, r3
    f21a:	4480      	add	r8, r0
    f21c:	305c      	adds	r0, #92	; 0x5c
    f21e:	00c1      	lsls	r1, r0, #3
    f220:	e61f      	b.n	ee62 <_malloc_r+0x4e>
    f222:	099a      	lsrs	r2, r3, #6
    f224:	0011      	movs	r1, r2
    f226:	3239      	adds	r2, #57	; 0x39
    f228:	3138      	adds	r1, #56	; 0x38
    f22a:	00d2      	lsls	r2, r2, #3
    f22c:	e78c      	b.n	f148 <_malloc_r+0x334>
    f22e:	42b4      	cmp	r4, r6
    f230:	d000      	beq.n	f234 <_malloc_r+0x420>
    f232:	e75a      	b.n	f0ea <_malloc_r+0x2d6>
    f234:	4b4f      	ldr	r3, [pc, #316]	; (f374 <_malloc_r+0x560>)
    f236:	9a00      	ldr	r2, [sp, #0]
    f238:	469a      	mov	sl, r3
    f23a:	681b      	ldr	r3, [r3, #0]
    f23c:	469c      	mov	ip, r3
    f23e:	4653      	mov	r3, sl
    f240:	4462      	add	r2, ip
    f242:	0011      	movs	r1, r2
    f244:	601a      	str	r2, [r3, #0]
    f246:	e6ff      	b.n	f048 <_malloc_r+0x234>
    f248:	2308      	movs	r3, #8
    f24a:	425b      	negs	r3, r3
    f24c:	469c      	mov	ip, r3
    f24e:	44e1      	add	r9, ip
    f250:	464b      	mov	r3, r9
    f252:	689b      	ldr	r3, [r3, #8]
    f254:	3801      	subs	r0, #1
    f256:	4599      	cmp	r9, r3
    f258:	d000      	beq.n	f25c <_malloc_r+0x448>
    f25a:	e084      	b.n	f366 <_malloc_r+0x552>
    f25c:	4643      	mov	r3, r8
    f25e:	4203      	tst	r3, r0
    f260:	d1f2      	bne.n	f248 <_malloc_r+0x434>
    f262:	6873      	ldr	r3, [r6, #4]
    f264:	438b      	bics	r3, r1
    f266:	6073      	str	r3, [r6, #4]
    f268:	0049      	lsls	r1, r1, #1
    f26a:	4299      	cmp	r1, r3
    f26c:	d900      	bls.n	f270 <_malloc_r+0x45c>
    f26e:	e6b5      	b.n	efdc <_malloc_r+0x1c8>
    f270:	2900      	cmp	r1, #0
    f272:	d100      	bne.n	f276 <_malloc_r+0x462>
    f274:	e6b2      	b.n	efdc <_malloc_r+0x1c8>
    f276:	4650      	mov	r0, sl
    f278:	420b      	tst	r3, r1
    f27a:	d000      	beq.n	f27e <_malloc_r+0x46a>
    f27c:	e648      	b.n	ef10 <_malloc_r+0xfc>
    f27e:	0049      	lsls	r1, r1, #1
    f280:	3004      	adds	r0, #4
    f282:	420b      	tst	r3, r1
    f284:	d0fb      	beq.n	f27e <_malloc_r+0x46a>
    f286:	e643      	b.n	ef10 <_malloc_r+0xfc>
    f288:	2301      	movs	r3, #1
    f28a:	464a      	mov	r2, r9
    f28c:	6053      	str	r3, [r2, #4]
    f28e:	0038      	movs	r0, r7
    f290:	f000 f90c 	bl	f4ac <__malloc_unlock>
    f294:	2000      	movs	r0, #0
    f296:	e68c      	b.n	efb2 <_malloc_r+0x19e>
    f298:	4694      	mov	ip, r2
    f29a:	e76a      	b.n	f172 <_malloc_r+0x35e>
    f29c:	23aa      	movs	r3, #170	; 0xaa
    f29e:	005b      	lsls	r3, r3, #1
    f2a0:	4298      	cmp	r0, r3
    f2a2:	d811      	bhi.n	f2c8 <_malloc_r+0x4b4>
    f2a4:	3bdd      	subs	r3, #221	; 0xdd
    f2a6:	4698      	mov	r8, r3
    f2a8:	0be8      	lsrs	r0, r5, #15
    f2aa:	4480      	add	r8, r0
    f2ac:	3078      	adds	r0, #120	; 0x78
    f2ae:	00c1      	lsls	r1, r0, #3
    f2b0:	e5d7      	b.n	ee62 <_malloc_r+0x4e>
    f2b2:	2380      	movs	r3, #128	; 0x80
    f2b4:	015b      	lsls	r3, r3, #5
    f2b6:	e6dd      	b.n	f074 <_malloc_r+0x260>
    f2b8:	1089      	asrs	r1, r1, #2
    f2ba:	3b02      	subs	r3, #2
    f2bc:	408b      	lsls	r3, r1
    f2be:	6872      	ldr	r2, [r6, #4]
    f2c0:	4313      	orrs	r3, r2
    f2c2:	6073      	str	r3, [r6, #4]
    f2c4:	4662      	mov	r2, ip
    f2c6:	e757      	b.n	f178 <_malloc_r+0x364>
    f2c8:	4b2b      	ldr	r3, [pc, #172]	; (f378 <_malloc_r+0x564>)
    f2ca:	4298      	cmp	r0, r3
    f2cc:	d81c      	bhi.n	f308 <_malloc_r+0x4f4>
    f2ce:	237c      	movs	r3, #124	; 0x7c
    f2d0:	4698      	mov	r8, r3
    f2d2:	0ca8      	lsrs	r0, r5, #18
    f2d4:	4480      	add	r8, r0
    f2d6:	307d      	adds	r0, #125	; 0x7d
    f2d8:	00c1      	lsls	r1, r0, #3
    f2da:	e5c2      	b.n	ee62 <_malloc_r+0x4e>
    f2dc:	3310      	adds	r3, #16
    f2de:	9300      	str	r3, [sp, #0]
    f2e0:	e699      	b.n	f016 <_malloc_r+0x202>
    f2e2:	2a54      	cmp	r2, #84	; 0x54
    f2e4:	d826      	bhi.n	f334 <_malloc_r+0x520>
    f2e6:	464b      	mov	r3, r9
    f2e8:	0b1a      	lsrs	r2, r3, #12
    f2ea:	0011      	movs	r1, r2
    f2ec:	326f      	adds	r2, #111	; 0x6f
    f2ee:	316e      	adds	r1, #110	; 0x6e
    f2f0:	00d2      	lsls	r2, r2, #3
    f2f2:	e729      	b.n	f148 <_malloc_r+0x334>
    f2f4:	051b      	lsls	r3, r3, #20
    f2f6:	d000      	beq.n	f2fa <_malloc_r+0x4e6>
    f2f8:	e6a6      	b.n	f048 <_malloc_r+0x234>
    f2fa:	2001      	movs	r0, #1
    f2fc:	9b00      	ldr	r3, [sp, #0]
    f2fe:	68b2      	ldr	r2, [r6, #8]
    f300:	4443      	add	r3, r8
    f302:	4303      	orrs	r3, r0
    f304:	6053      	str	r3, [r2, #4]
    f306:	e6e6      	b.n	f0d6 <_malloc_r+0x2c2>
    f308:	21fe      	movs	r1, #254	; 0xfe
    f30a:	237e      	movs	r3, #126	; 0x7e
    f30c:	207f      	movs	r0, #127	; 0x7f
    f30e:	0089      	lsls	r1, r1, #2
    f310:	4698      	mov	r8, r3
    f312:	e5a6      	b.n	ee62 <_malloc_r+0x4e>
    f314:	2300      	movs	r3, #0
    f316:	2001      	movs	r0, #1
    f318:	469b      	mov	fp, r3
    f31a:	e6bd      	b.n	f098 <_malloc_r+0x284>
    f31c:	0021      	movs	r1, r4
    f31e:	0038      	movs	r0, r7
    f320:	3108      	adds	r1, #8
    f322:	f7ff fa59 	bl	e7d8 <_free_r>
    f326:	4653      	mov	r3, sl
    f328:	6819      	ldr	r1, [r3, #0]
    f32a:	e6d4      	b.n	f0d6 <_malloc_r+0x2c2>
    f32c:	465b      	mov	r3, fp
    f32e:	464a      	mov	r2, r9
    f330:	601a      	str	r2, [r3, #0]
    f332:	e694      	b.n	f05e <_malloc_r+0x24a>
    f334:	21aa      	movs	r1, #170	; 0xaa
    f336:	0049      	lsls	r1, r1, #1
    f338:	428a      	cmp	r2, r1
    f33a:	d806      	bhi.n	f34a <_malloc_r+0x536>
    f33c:	464b      	mov	r3, r9
    f33e:	0bda      	lsrs	r2, r3, #15
    f340:	0011      	movs	r1, r2
    f342:	3278      	adds	r2, #120	; 0x78
    f344:	3177      	adds	r1, #119	; 0x77
    f346:	00d2      	lsls	r2, r2, #3
    f348:	e6fe      	b.n	f148 <_malloc_r+0x334>
    f34a:	490b      	ldr	r1, [pc, #44]	; (f378 <_malloc_r+0x564>)
    f34c:	428a      	cmp	r2, r1
    f34e:	d806      	bhi.n	f35e <_malloc_r+0x54a>
    f350:	464b      	mov	r3, r9
    f352:	0c9a      	lsrs	r2, r3, #18
    f354:	0011      	movs	r1, r2
    f356:	327d      	adds	r2, #125	; 0x7d
    f358:	317c      	adds	r1, #124	; 0x7c
    f35a:	00d2      	lsls	r2, r2, #3
    f35c:	e6f4      	b.n	f148 <_malloc_r+0x334>
    f35e:	22fe      	movs	r2, #254	; 0xfe
    f360:	217e      	movs	r1, #126	; 0x7e
    f362:	0092      	lsls	r2, r2, #2
    f364:	e6f0      	b.n	f148 <_malloc_r+0x334>
    f366:	6873      	ldr	r3, [r6, #4]
    f368:	e77e      	b.n	f268 <_malloc_r+0x454>
    f36a:	002b      	movs	r3, r5
    f36c:	08e8      	lsrs	r0, r5, #3
    f36e:	3308      	adds	r3, #8
    f370:	e605      	b.n	ef7e <_malloc_r+0x16a>
    f372:	46c0      	nop			; (mov r8, r8)
    f374:	200012b8 	.word	0x200012b8
    f378:	00000554 	.word	0x00000554

0000f37c <memchr>:
    f37c:	b570      	push	{r4, r5, r6, lr}
    f37e:	b2cd      	uxtb	r5, r1
    f380:	0783      	lsls	r3, r0, #30
    f382:	d034      	beq.n	f3ee <memchr+0x72>
    f384:	1e54      	subs	r4, r2, #1
    f386:	2a00      	cmp	r2, #0
    f388:	d01b      	beq.n	f3c2 <memchr+0x46>
    f38a:	7803      	ldrb	r3, [r0, #0]
    f38c:	42ab      	cmp	r3, r5
    f38e:	d019      	beq.n	f3c4 <memchr+0x48>
    f390:	2203      	movs	r2, #3
    f392:	e004      	b.n	f39e <memchr+0x22>
    f394:	3c01      	subs	r4, #1
    f396:	d314      	bcc.n	f3c2 <memchr+0x46>
    f398:	7803      	ldrb	r3, [r0, #0]
    f39a:	42ab      	cmp	r3, r5
    f39c:	d012      	beq.n	f3c4 <memchr+0x48>
    f39e:	3001      	adds	r0, #1
    f3a0:	4210      	tst	r0, r2
    f3a2:	d1f7      	bne.n	f394 <memchr+0x18>
    f3a4:	2c03      	cmp	r4, #3
    f3a6:	d80e      	bhi.n	f3c6 <memchr+0x4a>
    f3a8:	2c00      	cmp	r4, #0
    f3aa:	d00a      	beq.n	f3c2 <memchr+0x46>
    f3ac:	7803      	ldrb	r3, [r0, #0]
    f3ae:	42ab      	cmp	r3, r5
    f3b0:	d008      	beq.n	f3c4 <memchr+0x48>
    f3b2:	1904      	adds	r4, r0, r4
    f3b4:	e002      	b.n	f3bc <memchr+0x40>
    f3b6:	7803      	ldrb	r3, [r0, #0]
    f3b8:	42ab      	cmp	r3, r5
    f3ba:	d003      	beq.n	f3c4 <memchr+0x48>
    f3bc:	3001      	adds	r0, #1
    f3be:	4284      	cmp	r4, r0
    f3c0:	d1f9      	bne.n	f3b6 <memchr+0x3a>
    f3c2:	2000      	movs	r0, #0
    f3c4:	bd70      	pop	{r4, r5, r6, pc}
    f3c6:	22ff      	movs	r2, #255	; 0xff
    f3c8:	060b      	lsls	r3, r1, #24
    f3ca:	0c1b      	lsrs	r3, r3, #16
    f3cc:	4011      	ands	r1, r2
    f3ce:	4319      	orrs	r1, r3
    f3d0:	040b      	lsls	r3, r1, #16
    f3d2:	4e08      	ldr	r6, [pc, #32]	; (f3f4 <memchr+0x78>)
    f3d4:	4319      	orrs	r1, r3
    f3d6:	6803      	ldr	r3, [r0, #0]
    f3d8:	4a07      	ldr	r2, [pc, #28]	; (f3f8 <memchr+0x7c>)
    f3da:	404b      	eors	r3, r1
    f3dc:	189a      	adds	r2, r3, r2
    f3de:	439a      	bics	r2, r3
    f3e0:	4232      	tst	r2, r6
    f3e2:	d1e3      	bne.n	f3ac <memchr+0x30>
    f3e4:	3c04      	subs	r4, #4
    f3e6:	3004      	adds	r0, #4
    f3e8:	2c03      	cmp	r4, #3
    f3ea:	d8f4      	bhi.n	f3d6 <memchr+0x5a>
    f3ec:	e7dc      	b.n	f3a8 <memchr+0x2c>
    f3ee:	0014      	movs	r4, r2
    f3f0:	e7d8      	b.n	f3a4 <memchr+0x28>
    f3f2:	46c0      	nop			; (mov r8, r8)
    f3f4:	80808080 	.word	0x80808080
    f3f8:	fefefeff 	.word	0xfefefeff

0000f3fc <memmove>:
    f3fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    f3fe:	4288      	cmp	r0, r1
    f400:	d90a      	bls.n	f418 <memmove+0x1c>
    f402:	188b      	adds	r3, r1, r2
    f404:	4298      	cmp	r0, r3
    f406:	d207      	bcs.n	f418 <memmove+0x1c>
    f408:	1e53      	subs	r3, r2, #1
    f40a:	2a00      	cmp	r2, #0
    f40c:	d003      	beq.n	f416 <memmove+0x1a>
    f40e:	5cca      	ldrb	r2, [r1, r3]
    f410:	54c2      	strb	r2, [r0, r3]
    f412:	3b01      	subs	r3, #1
    f414:	d2fb      	bcs.n	f40e <memmove+0x12>
    f416:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f418:	0005      	movs	r5, r0
    f41a:	2a0f      	cmp	r2, #15
    f41c:	d808      	bhi.n	f430 <memmove+0x34>
    f41e:	2a00      	cmp	r2, #0
    f420:	d0f9      	beq.n	f416 <memmove+0x1a>
    f422:	2300      	movs	r3, #0
    f424:	5ccc      	ldrb	r4, [r1, r3]
    f426:	54ec      	strb	r4, [r5, r3]
    f428:	3301      	adds	r3, #1
    f42a:	4293      	cmp	r3, r2
    f42c:	d1fa      	bne.n	f424 <memmove+0x28>
    f42e:	e7f2      	b.n	f416 <memmove+0x1a>
    f430:	000b      	movs	r3, r1
    f432:	4303      	orrs	r3, r0
    f434:	079b      	lsls	r3, r3, #30
    f436:	d12d      	bne.n	f494 <memmove+0x98>
    f438:	0015      	movs	r5, r2
    f43a:	000c      	movs	r4, r1
    f43c:	0003      	movs	r3, r0
    f43e:	3d10      	subs	r5, #16
    f440:	092f      	lsrs	r7, r5, #4
    f442:	3701      	adds	r7, #1
    f444:	013f      	lsls	r7, r7, #4
    f446:	19c7      	adds	r7, r0, r7
    f448:	6826      	ldr	r6, [r4, #0]
    f44a:	601e      	str	r6, [r3, #0]
    f44c:	6866      	ldr	r6, [r4, #4]
    f44e:	605e      	str	r6, [r3, #4]
    f450:	68a6      	ldr	r6, [r4, #8]
    f452:	609e      	str	r6, [r3, #8]
    f454:	68e6      	ldr	r6, [r4, #12]
    f456:	3410      	adds	r4, #16
    f458:	60de      	str	r6, [r3, #12]
    f45a:	3310      	adds	r3, #16
    f45c:	429f      	cmp	r7, r3
    f45e:	d1f3      	bne.n	f448 <memmove+0x4c>
    f460:	240f      	movs	r4, #15
    f462:	43a5      	bics	r5, r4
    f464:	3510      	adds	r5, #16
    f466:	1949      	adds	r1, r1, r5
    f468:	4014      	ands	r4, r2
    f46a:	1945      	adds	r5, r0, r5
    f46c:	2c03      	cmp	r4, #3
    f46e:	d913      	bls.n	f498 <memmove+0x9c>
    f470:	2300      	movs	r3, #0
    f472:	1f27      	subs	r7, r4, #4
    f474:	08be      	lsrs	r6, r7, #2
    f476:	3601      	adds	r6, #1
    f478:	00b6      	lsls	r6, r6, #2
    f47a:	58cc      	ldr	r4, [r1, r3]
    f47c:	50ec      	str	r4, [r5, r3]
    f47e:	3304      	adds	r3, #4
    f480:	42b3      	cmp	r3, r6
    f482:	d1fa      	bne.n	f47a <memmove+0x7e>
    f484:	2603      	movs	r6, #3
    f486:	43b7      	bics	r7, r6
    f488:	1d3c      	adds	r4, r7, #4
    f48a:	1909      	adds	r1, r1, r4
    f48c:	192d      	adds	r5, r5, r4
    f48e:	4032      	ands	r2, r6
    f490:	d1c7      	bne.n	f422 <memmove+0x26>
    f492:	e7c0      	b.n	f416 <memmove+0x1a>
    f494:	0005      	movs	r5, r0
    f496:	e7c4      	b.n	f422 <memmove+0x26>
    f498:	0022      	movs	r2, r4
    f49a:	e7c0      	b.n	f41e <memmove+0x22>

0000f49c <__malloc_lock>:
    f49c:	b510      	push	{r4, lr}
    f49e:	4802      	ldr	r0, [pc, #8]	; (f4a8 <__malloc_lock+0xc>)
    f4a0:	f7ff fc32 	bl	ed08 <__retarget_lock_acquire_recursive>
    f4a4:	bd10      	pop	{r4, pc}
    f4a6:	46c0      	nop			; (mov r8, r8)
    f4a8:	2000133c 	.word	0x2000133c

0000f4ac <__malloc_unlock>:
    f4ac:	b510      	push	{r4, lr}
    f4ae:	4802      	ldr	r0, [pc, #8]	; (f4b8 <__malloc_unlock+0xc>)
    f4b0:	f7ff fc2c 	bl	ed0c <__retarget_lock_release_recursive>
    f4b4:	bd10      	pop	{r4, pc}
    f4b6:	46c0      	nop			; (mov r8, r8)
    f4b8:	2000133c 	.word	0x2000133c

0000f4bc <_Balloc>:
    f4bc:	b570      	push	{r4, r5, r6, lr}
    f4be:	0004      	movs	r4, r0
    f4c0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
    f4c2:	000d      	movs	r5, r1
    f4c4:	2800      	cmp	r0, #0
    f4c6:	d00a      	beq.n	f4de <_Balloc+0x22>
    f4c8:	00ab      	lsls	r3, r5, #2
    f4ca:	18c3      	adds	r3, r0, r3
    f4cc:	6818      	ldr	r0, [r3, #0]
    f4ce:	2800      	cmp	r0, #0
    f4d0:	d00f      	beq.n	f4f2 <_Balloc+0x36>
    f4d2:	6802      	ldr	r2, [r0, #0]
    f4d4:	601a      	str	r2, [r3, #0]
    f4d6:	2300      	movs	r3, #0
    f4d8:	6103      	str	r3, [r0, #16]
    f4da:	60c3      	str	r3, [r0, #12]
    f4dc:	bd70      	pop	{r4, r5, r6, pc}
    f4de:	2221      	movs	r2, #33	; 0x21
    f4e0:	2104      	movs	r1, #4
    f4e2:	0020      	movs	r0, r4
    f4e4:	f000 fdb0 	bl	10048 <_calloc_r>
    f4e8:	64e0      	str	r0, [r4, #76]	; 0x4c
    f4ea:	2800      	cmp	r0, #0
    f4ec:	d1ec      	bne.n	f4c8 <_Balloc+0xc>
    f4ee:	2000      	movs	r0, #0
    f4f0:	e7f4      	b.n	f4dc <_Balloc+0x20>
    f4f2:	2601      	movs	r6, #1
    f4f4:	40ae      	lsls	r6, r5
    f4f6:	1d72      	adds	r2, r6, #5
    f4f8:	0092      	lsls	r2, r2, #2
    f4fa:	2101      	movs	r1, #1
    f4fc:	0020      	movs	r0, r4
    f4fe:	f000 fda3 	bl	10048 <_calloc_r>
    f502:	2800      	cmp	r0, #0
    f504:	d0f3      	beq.n	f4ee <_Balloc+0x32>
    f506:	6045      	str	r5, [r0, #4]
    f508:	6086      	str	r6, [r0, #8]
    f50a:	e7e4      	b.n	f4d6 <_Balloc+0x1a>

0000f50c <_Bfree>:
    f50c:	2900      	cmp	r1, #0
    f50e:	d006      	beq.n	f51e <_Bfree+0x12>
    f510:	684b      	ldr	r3, [r1, #4]
    f512:	009a      	lsls	r2, r3, #2
    f514:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    f516:	189b      	adds	r3, r3, r2
    f518:	681a      	ldr	r2, [r3, #0]
    f51a:	600a      	str	r2, [r1, #0]
    f51c:	6019      	str	r1, [r3, #0]
    f51e:	4770      	bx	lr

0000f520 <__multadd>:
    f520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f522:	46ce      	mov	lr, r9
    f524:	4647      	mov	r7, r8
    f526:	4681      	mov	r9, r0
    f528:	0008      	movs	r0, r1
    f52a:	b580      	push	{r7, lr}
    f52c:	000d      	movs	r5, r1
    f52e:	690c      	ldr	r4, [r1, #16]
    f530:	001f      	movs	r7, r3
    f532:	2100      	movs	r1, #0
    f534:	3014      	adds	r0, #20
    f536:	6803      	ldr	r3, [r0, #0]
    f538:	3101      	adds	r1, #1
    f53a:	041e      	lsls	r6, r3, #16
    f53c:	0c36      	lsrs	r6, r6, #16
    f53e:	4356      	muls	r6, r2
    f540:	0c1b      	lsrs	r3, r3, #16
    f542:	4353      	muls	r3, r2
    f544:	19f6      	adds	r6, r6, r7
    f546:	0c37      	lsrs	r7, r6, #16
    f548:	19db      	adds	r3, r3, r7
    f54a:	0436      	lsls	r6, r6, #16
    f54c:	0c1f      	lsrs	r7, r3, #16
    f54e:	0c36      	lsrs	r6, r6, #16
    f550:	041b      	lsls	r3, r3, #16
    f552:	199b      	adds	r3, r3, r6
    f554:	c008      	stmia	r0!, {r3}
    f556:	428c      	cmp	r4, r1
    f558:	dced      	bgt.n	f536 <__multadd+0x16>
    f55a:	2f00      	cmp	r7, #0
    f55c:	d008      	beq.n	f570 <__multadd+0x50>
    f55e:	68ab      	ldr	r3, [r5, #8]
    f560:	429c      	cmp	r4, r3
    f562:	da0a      	bge.n	f57a <__multadd+0x5a>
    f564:	1d23      	adds	r3, r4, #4
    f566:	009b      	lsls	r3, r3, #2
    f568:	18eb      	adds	r3, r5, r3
    f56a:	3401      	adds	r4, #1
    f56c:	605f      	str	r7, [r3, #4]
    f56e:	612c      	str	r4, [r5, #16]
    f570:	0028      	movs	r0, r5
    f572:	bc0c      	pop	{r2, r3}
    f574:	4690      	mov	r8, r2
    f576:	4699      	mov	r9, r3
    f578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f57a:	686b      	ldr	r3, [r5, #4]
    f57c:	4648      	mov	r0, r9
    f57e:	1c59      	adds	r1, r3, #1
    f580:	f7ff ff9c 	bl	f4bc <_Balloc>
    f584:	0029      	movs	r1, r5
    f586:	692b      	ldr	r3, [r5, #16]
    f588:	4680      	mov	r8, r0
    f58a:	1c9a      	adds	r2, r3, #2
    f58c:	0092      	lsls	r2, r2, #2
    f58e:	310c      	adds	r1, #12
    f590:	300c      	adds	r0, #12
    f592:	f7fc f8b5 	bl	b700 <memcpy>
    f596:	686b      	ldr	r3, [r5, #4]
    f598:	009a      	lsls	r2, r3, #2
    f59a:	464b      	mov	r3, r9
    f59c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    f59e:	189b      	adds	r3, r3, r2
    f5a0:	681a      	ldr	r2, [r3, #0]
    f5a2:	602a      	str	r2, [r5, #0]
    f5a4:	601d      	str	r5, [r3, #0]
    f5a6:	4645      	mov	r5, r8
    f5a8:	e7dc      	b.n	f564 <__multadd+0x44>
    f5aa:	46c0      	nop			; (mov r8, r8)

0000f5ac <__hi0bits>:
    f5ac:	0003      	movs	r3, r0
    f5ae:	0c02      	lsrs	r2, r0, #16
    f5b0:	2000      	movs	r0, #0
    f5b2:	2a00      	cmp	r2, #0
    f5b4:	d101      	bne.n	f5ba <__hi0bits+0xe>
    f5b6:	041b      	lsls	r3, r3, #16
    f5b8:	3010      	adds	r0, #16
    f5ba:	0e1a      	lsrs	r2, r3, #24
    f5bc:	d101      	bne.n	f5c2 <__hi0bits+0x16>
    f5be:	3008      	adds	r0, #8
    f5c0:	021b      	lsls	r3, r3, #8
    f5c2:	0f1a      	lsrs	r2, r3, #28
    f5c4:	d101      	bne.n	f5ca <__hi0bits+0x1e>
    f5c6:	3004      	adds	r0, #4
    f5c8:	011b      	lsls	r3, r3, #4
    f5ca:	0f9a      	lsrs	r2, r3, #30
    f5cc:	d101      	bne.n	f5d2 <__hi0bits+0x26>
    f5ce:	3002      	adds	r0, #2
    f5d0:	009b      	lsls	r3, r3, #2
    f5d2:	2b00      	cmp	r3, #0
    f5d4:	db03      	blt.n	f5de <__hi0bits+0x32>
    f5d6:	3001      	adds	r0, #1
    f5d8:	005b      	lsls	r3, r3, #1
    f5da:	d400      	bmi.n	f5de <__hi0bits+0x32>
    f5dc:	2020      	movs	r0, #32
    f5de:	4770      	bx	lr

0000f5e0 <__lo0bits>:
    f5e0:	6803      	ldr	r3, [r0, #0]
    f5e2:	075a      	lsls	r2, r3, #29
    f5e4:	d009      	beq.n	f5fa <__lo0bits+0x1a>
    f5e6:	2200      	movs	r2, #0
    f5e8:	07d9      	lsls	r1, r3, #31
    f5ea:	d404      	bmi.n	f5f6 <__lo0bits+0x16>
    f5ec:	079a      	lsls	r2, r3, #30
    f5ee:	d420      	bmi.n	f632 <__lo0bits+0x52>
    f5f0:	2202      	movs	r2, #2
    f5f2:	089b      	lsrs	r3, r3, #2
    f5f4:	6003      	str	r3, [r0, #0]
    f5f6:	0010      	movs	r0, r2
    f5f8:	4770      	bx	lr
    f5fa:	0419      	lsls	r1, r3, #16
    f5fc:	2200      	movs	r2, #0
    f5fe:	2900      	cmp	r1, #0
    f600:	d101      	bne.n	f606 <__lo0bits+0x26>
    f602:	0c1b      	lsrs	r3, r3, #16
    f604:	3210      	adds	r2, #16
    f606:	21ff      	movs	r1, #255	; 0xff
    f608:	4219      	tst	r1, r3
    f60a:	d101      	bne.n	f610 <__lo0bits+0x30>
    f60c:	3208      	adds	r2, #8
    f60e:	0a1b      	lsrs	r3, r3, #8
    f610:	0719      	lsls	r1, r3, #28
    f612:	d101      	bne.n	f618 <__lo0bits+0x38>
    f614:	3204      	adds	r2, #4
    f616:	091b      	lsrs	r3, r3, #4
    f618:	0799      	lsls	r1, r3, #30
    f61a:	d101      	bne.n	f620 <__lo0bits+0x40>
    f61c:	3202      	adds	r2, #2
    f61e:	089b      	lsrs	r3, r3, #2
    f620:	07d9      	lsls	r1, r3, #31
    f622:	d404      	bmi.n	f62e <__lo0bits+0x4e>
    f624:	085b      	lsrs	r3, r3, #1
    f626:	d101      	bne.n	f62c <__lo0bits+0x4c>
    f628:	2220      	movs	r2, #32
    f62a:	e7e4      	b.n	f5f6 <__lo0bits+0x16>
    f62c:	3201      	adds	r2, #1
    f62e:	6003      	str	r3, [r0, #0]
    f630:	e7e1      	b.n	f5f6 <__lo0bits+0x16>
    f632:	085b      	lsrs	r3, r3, #1
    f634:	6003      	str	r3, [r0, #0]
    f636:	2201      	movs	r2, #1
    f638:	e7dd      	b.n	f5f6 <__lo0bits+0x16>
    f63a:	46c0      	nop			; (mov r8, r8)

0000f63c <__i2b>:
    f63c:	b510      	push	{r4, lr}
    f63e:	000c      	movs	r4, r1
    f640:	2101      	movs	r1, #1
    f642:	f7ff ff3b 	bl	f4bc <_Balloc>
    f646:	2301      	movs	r3, #1
    f648:	6144      	str	r4, [r0, #20]
    f64a:	6103      	str	r3, [r0, #16]
    f64c:	bd10      	pop	{r4, pc}
    f64e:	46c0      	nop			; (mov r8, r8)

0000f650 <__multiply>:
    f650:	b5f0      	push	{r4, r5, r6, r7, lr}
    f652:	4657      	mov	r7, sl
    f654:	464e      	mov	r6, r9
    f656:	4645      	mov	r5, r8
    f658:	46de      	mov	lr, fp
    f65a:	b5e0      	push	{r5, r6, r7, lr}
    f65c:	6914      	ldr	r4, [r2, #16]
    f65e:	690e      	ldr	r6, [r1, #16]
    f660:	b085      	sub	sp, #20
    f662:	000f      	movs	r7, r1
    f664:	0015      	movs	r5, r2
    f666:	42a6      	cmp	r6, r4
    f668:	da04      	bge.n	f674 <__multiply+0x24>
    f66a:	0033      	movs	r3, r6
    f66c:	0017      	movs	r7, r2
    f66e:	0026      	movs	r6, r4
    f670:	000d      	movs	r5, r1
    f672:	001c      	movs	r4, r3
    f674:	1933      	adds	r3, r6, r4
    f676:	4698      	mov	r8, r3
    f678:	68bb      	ldr	r3, [r7, #8]
    f67a:	6879      	ldr	r1, [r7, #4]
    f67c:	4598      	cmp	r8, r3
    f67e:	dd00      	ble.n	f682 <__multiply+0x32>
    f680:	3101      	adds	r1, #1
    f682:	f7ff ff1b 	bl	f4bc <_Balloc>
    f686:	2214      	movs	r2, #20
    f688:	0003      	movs	r3, r0
    f68a:	4694      	mov	ip, r2
    f68c:	4463      	add	r3, ip
    f68e:	469b      	mov	fp, r3
    f690:	4643      	mov	r3, r8
    f692:	009b      	lsls	r3, r3, #2
    f694:	445b      	add	r3, fp
    f696:	0019      	movs	r1, r3
    f698:	9302      	str	r3, [sp, #8]
    f69a:	9003      	str	r0, [sp, #12]
    f69c:	465b      	mov	r3, fp
    f69e:	2200      	movs	r2, #0
    f6a0:	458b      	cmp	fp, r1
    f6a2:	d203      	bcs.n	f6ac <__multiply+0x5c>
    f6a4:	9902      	ldr	r1, [sp, #8]
    f6a6:	c304      	stmia	r3!, {r2}
    f6a8:	4299      	cmp	r1, r3
    f6aa:	d8fc      	bhi.n	f6a6 <__multiply+0x56>
    f6ac:	2314      	movs	r3, #20
    f6ae:	00a4      	lsls	r4, r4, #2
    f6b0:	469a      	mov	sl, r3
    f6b2:	3714      	adds	r7, #20
    f6b4:	0023      	movs	r3, r4
    f6b6:	46bc      	mov	ip, r7
    f6b8:	44aa      	add	sl, r5
    f6ba:	00b6      	lsls	r6, r6, #2
    f6bc:	4453      	add	r3, sl
    f6be:	9700      	str	r7, [sp, #0]
    f6c0:	44b4      	add	ip, r6
    f6c2:	9301      	str	r3, [sp, #4]
    f6c4:	459a      	cmp	sl, r3
    f6c6:	d24f      	bcs.n	f768 <__multiply+0x118>
    f6c8:	4653      	mov	r3, sl
    f6ca:	681b      	ldr	r3, [r3, #0]
    f6cc:	041e      	lsls	r6, r3, #16
    f6ce:	0c36      	lsrs	r6, r6, #16
    f6d0:	d020      	beq.n	f714 <__multiply+0xc4>
    f6d2:	465c      	mov	r4, fp
    f6d4:	2700      	movs	r7, #0
    f6d6:	9d00      	ldr	r5, [sp, #0]
    f6d8:	0021      	movs	r1, r4
    f6da:	cc08      	ldmia	r4!, {r3}
    f6dc:	cd04      	ldmia	r5!, {r2}
    f6de:	4699      	mov	r9, r3
    f6e0:	4648      	mov	r0, r9
    f6e2:	0413      	lsls	r3, r2, #16
    f6e4:	0c1b      	lsrs	r3, r3, #16
    f6e6:	4373      	muls	r3, r6
    f6e8:	0400      	lsls	r0, r0, #16
    f6ea:	0c00      	lsrs	r0, r0, #16
    f6ec:	181b      	adds	r3, r3, r0
    f6ee:	19d8      	adds	r0, r3, r7
    f6f0:	0c13      	lsrs	r3, r2, #16
    f6f2:	464a      	mov	r2, r9
    f6f4:	4373      	muls	r3, r6
    f6f6:	0c12      	lsrs	r2, r2, #16
    f6f8:	189b      	adds	r3, r3, r2
    f6fa:	0c02      	lsrs	r2, r0, #16
    f6fc:	189b      	adds	r3, r3, r2
    f6fe:	0402      	lsls	r2, r0, #16
    f700:	0c1f      	lsrs	r7, r3, #16
    f702:	0c12      	lsrs	r2, r2, #16
    f704:	041b      	lsls	r3, r3, #16
    f706:	4313      	orrs	r3, r2
    f708:	600b      	str	r3, [r1, #0]
    f70a:	45ac      	cmp	ip, r5
    f70c:	d8e4      	bhi.n	f6d8 <__multiply+0x88>
    f70e:	4653      	mov	r3, sl
    f710:	6027      	str	r7, [r4, #0]
    f712:	681b      	ldr	r3, [r3, #0]
    f714:	0c1e      	lsrs	r6, r3, #16
    f716:	d020      	beq.n	f75a <__multiply+0x10a>
    f718:	465b      	mov	r3, fp
    f71a:	2100      	movs	r1, #0
    f71c:	681b      	ldr	r3, [r3, #0]
    f71e:	465c      	mov	r4, fp
    f720:	0018      	movs	r0, r3
    f722:	000f      	movs	r7, r1
    f724:	4662      	mov	r2, ip
    f726:	9d00      	ldr	r5, [sp, #0]
    f728:	8829      	ldrh	r1, [r5, #0]
    f72a:	0c00      	lsrs	r0, r0, #16
    f72c:	4371      	muls	r1, r6
    f72e:	1809      	adds	r1, r1, r0
    f730:	19c9      	adds	r1, r1, r7
    f732:	041b      	lsls	r3, r3, #16
    f734:	0408      	lsls	r0, r1, #16
    f736:	0c1b      	lsrs	r3, r3, #16
    f738:	4303      	orrs	r3, r0
    f73a:	6023      	str	r3, [r4, #0]
    f73c:	cd08      	ldmia	r5!, {r3}
    f73e:	6860      	ldr	r0, [r4, #4]
    f740:	0c1b      	lsrs	r3, r3, #16
    f742:	4373      	muls	r3, r6
    f744:	0407      	lsls	r7, r0, #16
    f746:	0c3f      	lsrs	r7, r7, #16
    f748:	19db      	adds	r3, r3, r7
    f74a:	0c09      	lsrs	r1, r1, #16
    f74c:	185b      	adds	r3, r3, r1
    f74e:	0c1f      	lsrs	r7, r3, #16
    f750:	3404      	adds	r4, #4
    f752:	42aa      	cmp	r2, r5
    f754:	d8e8      	bhi.n	f728 <__multiply+0xd8>
    f756:	4694      	mov	ip, r2
    f758:	6023      	str	r3, [r4, #0]
    f75a:	2304      	movs	r3, #4
    f75c:	4699      	mov	r9, r3
    f75e:	9b01      	ldr	r3, [sp, #4]
    f760:	44ca      	add	sl, r9
    f762:	44cb      	add	fp, r9
    f764:	4553      	cmp	r3, sl
    f766:	d8af      	bhi.n	f6c8 <__multiply+0x78>
    f768:	4643      	mov	r3, r8
    f76a:	2b00      	cmp	r3, #0
    f76c:	dd0e      	ble.n	f78c <__multiply+0x13c>
    f76e:	9b02      	ldr	r3, [sp, #8]
    f770:	3b04      	subs	r3, #4
    f772:	681a      	ldr	r2, [r3, #0]
    f774:	2a00      	cmp	r2, #0
    f776:	d109      	bne.n	f78c <__multiply+0x13c>
    f778:	4642      	mov	r2, r8
    f77a:	e003      	b.n	f784 <__multiply+0x134>
    f77c:	3b04      	subs	r3, #4
    f77e:	6819      	ldr	r1, [r3, #0]
    f780:	2900      	cmp	r1, #0
    f782:	d102      	bne.n	f78a <__multiply+0x13a>
    f784:	3a01      	subs	r2, #1
    f786:	2a00      	cmp	r2, #0
    f788:	d1f8      	bne.n	f77c <__multiply+0x12c>
    f78a:	4690      	mov	r8, r2
    f78c:	9b03      	ldr	r3, [sp, #12]
    f78e:	4642      	mov	r2, r8
    f790:	0018      	movs	r0, r3
    f792:	611a      	str	r2, [r3, #16]
    f794:	b005      	add	sp, #20
    f796:	bc3c      	pop	{r2, r3, r4, r5}
    f798:	4690      	mov	r8, r2
    f79a:	4699      	mov	r9, r3
    f79c:	46a2      	mov	sl, r4
    f79e:	46ab      	mov	fp, r5
    f7a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f7a2:	46c0      	nop			; (mov r8, r8)

0000f7a4 <__pow5mult>:
    f7a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f7a6:	4647      	mov	r7, r8
    f7a8:	46ce      	mov	lr, r9
    f7aa:	2303      	movs	r3, #3
    f7ac:	b580      	push	{r7, lr}
    f7ae:	4680      	mov	r8, r0
    f7b0:	000f      	movs	r7, r1
    f7b2:	0014      	movs	r4, r2
    f7b4:	4013      	ands	r3, r2
    f7b6:	d13a      	bne.n	f82e <__pow5mult+0x8a>
    f7b8:	10a4      	asrs	r4, r4, #2
    f7ba:	003e      	movs	r6, r7
    f7bc:	2c00      	cmp	r4, #0
    f7be:	d025      	beq.n	f80c <__pow5mult+0x68>
    f7c0:	4643      	mov	r3, r8
    f7c2:	6c9d      	ldr	r5, [r3, #72]	; 0x48
    f7c4:	2d00      	cmp	r5, #0
    f7c6:	d03b      	beq.n	f840 <__pow5mult+0x9c>
    f7c8:	003e      	movs	r6, r7
    f7ca:	2300      	movs	r3, #0
    f7cc:	2701      	movs	r7, #1
    f7ce:	4699      	mov	r9, r3
    f7d0:	4227      	tst	r7, r4
    f7d2:	d107      	bne.n	f7e4 <__pow5mult+0x40>
    f7d4:	1064      	asrs	r4, r4, #1
    f7d6:	d019      	beq.n	f80c <__pow5mult+0x68>
    f7d8:	6828      	ldr	r0, [r5, #0]
    f7da:	2800      	cmp	r0, #0
    f7dc:	d01b      	beq.n	f816 <__pow5mult+0x72>
    f7de:	0005      	movs	r5, r0
    f7e0:	4227      	tst	r7, r4
    f7e2:	d0f7      	beq.n	f7d4 <__pow5mult+0x30>
    f7e4:	002a      	movs	r2, r5
    f7e6:	0031      	movs	r1, r6
    f7e8:	4640      	mov	r0, r8
    f7ea:	f7ff ff31 	bl	f650 <__multiply>
    f7ee:	2e00      	cmp	r6, #0
    f7f0:	d01b      	beq.n	f82a <__pow5mult+0x86>
    f7f2:	4642      	mov	r2, r8
    f7f4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    f7f6:	6873      	ldr	r3, [r6, #4]
    f7f8:	4694      	mov	ip, r2
    f7fa:	009b      	lsls	r3, r3, #2
    f7fc:	4463      	add	r3, ip
    f7fe:	681a      	ldr	r2, [r3, #0]
    f800:	1064      	asrs	r4, r4, #1
    f802:	6032      	str	r2, [r6, #0]
    f804:	601e      	str	r6, [r3, #0]
    f806:	0006      	movs	r6, r0
    f808:	2c00      	cmp	r4, #0
    f80a:	d1e5      	bne.n	f7d8 <__pow5mult+0x34>
    f80c:	0030      	movs	r0, r6
    f80e:	bc0c      	pop	{r2, r3}
    f810:	4690      	mov	r8, r2
    f812:	4699      	mov	r9, r3
    f814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f816:	002a      	movs	r2, r5
    f818:	0029      	movs	r1, r5
    f81a:	4640      	mov	r0, r8
    f81c:	f7ff ff18 	bl	f650 <__multiply>
    f820:	464b      	mov	r3, r9
    f822:	6028      	str	r0, [r5, #0]
    f824:	6003      	str	r3, [r0, #0]
    f826:	0005      	movs	r5, r0
    f828:	e7da      	b.n	f7e0 <__pow5mult+0x3c>
    f82a:	0006      	movs	r6, r0
    f82c:	e7d2      	b.n	f7d4 <__pow5mult+0x30>
    f82e:	4a0b      	ldr	r2, [pc, #44]	; (f85c <__pow5mult+0xb8>)
    f830:	3b01      	subs	r3, #1
    f832:	009b      	lsls	r3, r3, #2
    f834:	589a      	ldr	r2, [r3, r2]
    f836:	2300      	movs	r3, #0
    f838:	f7ff fe72 	bl	f520 <__multadd>
    f83c:	0007      	movs	r7, r0
    f83e:	e7bb      	b.n	f7b8 <__pow5mult+0x14>
    f840:	2101      	movs	r1, #1
    f842:	4640      	mov	r0, r8
    f844:	f7ff fe3a 	bl	f4bc <_Balloc>
    f848:	4b05      	ldr	r3, [pc, #20]	; (f860 <__pow5mult+0xbc>)
    f84a:	0005      	movs	r5, r0
    f84c:	6143      	str	r3, [r0, #20]
    f84e:	2301      	movs	r3, #1
    f850:	6103      	str	r3, [r0, #16]
    f852:	4643      	mov	r3, r8
    f854:	6498      	str	r0, [r3, #72]	; 0x48
    f856:	2300      	movs	r3, #0
    f858:	6003      	str	r3, [r0, #0]
    f85a:	e7b5      	b.n	f7c8 <__pow5mult+0x24>
    f85c:	00011298 	.word	0x00011298
    f860:	00000271 	.word	0x00000271

0000f864 <__lshift>:
    f864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f866:	464e      	mov	r6, r9
    f868:	4645      	mov	r5, r8
    f86a:	46de      	mov	lr, fp
    f86c:	4657      	mov	r7, sl
    f86e:	b5e0      	push	{r5, r6, r7, lr}
    f870:	000e      	movs	r6, r1
    f872:	6933      	ldr	r3, [r6, #16]
    f874:	1154      	asrs	r4, r2, #5
    f876:	4698      	mov	r8, r3
    f878:	44a0      	add	r8, r4
    f87a:	4643      	mov	r3, r8
    f87c:	1c5d      	adds	r5, r3, #1
    f87e:	68b3      	ldr	r3, [r6, #8]
    f880:	4683      	mov	fp, r0
    f882:	4691      	mov	r9, r2
    f884:	6849      	ldr	r1, [r1, #4]
    f886:	429d      	cmp	r5, r3
    f888:	dd03      	ble.n	f892 <__lshift+0x2e>
    f88a:	3101      	adds	r1, #1
    f88c:	005b      	lsls	r3, r3, #1
    f88e:	429d      	cmp	r5, r3
    f890:	dcfb      	bgt.n	f88a <__lshift+0x26>
    f892:	4658      	mov	r0, fp
    f894:	f7ff fe12 	bl	f4bc <_Balloc>
    f898:	0003      	movs	r3, r0
    f89a:	4684      	mov	ip, r0
    f89c:	3314      	adds	r3, #20
    f89e:	2c00      	cmp	r4, #0
    f8a0:	dd06      	ble.n	f8b0 <__lshift+0x4c>
    f8a2:	2100      	movs	r1, #0
    f8a4:	00a4      	lsls	r4, r4, #2
    f8a6:	001a      	movs	r2, r3
    f8a8:	191b      	adds	r3, r3, r4
    f8aa:	c202      	stmia	r2!, {r1}
    f8ac:	4293      	cmp	r3, r2
    f8ae:	d1fc      	bne.n	f8aa <__lshift+0x46>
    f8b0:	6932      	ldr	r2, [r6, #16]
    f8b2:	4648      	mov	r0, r9
    f8b4:	0097      	lsls	r7, r2, #2
    f8b6:	0031      	movs	r1, r6
    f8b8:	221f      	movs	r2, #31
    f8ba:	3114      	adds	r1, #20
    f8bc:	4010      	ands	r0, r2
    f8be:	19cf      	adds	r7, r1, r7
    f8c0:	4681      	mov	r9, r0
    f8c2:	2800      	cmp	r0, #0
    f8c4:	d025      	beq.n	f912 <__lshift+0xae>
    f8c6:	2220      	movs	r2, #32
    f8c8:	1a12      	subs	r2, r2, r0
    f8ca:	4692      	mov	sl, r2
    f8cc:	2200      	movs	r2, #0
    f8ce:	4648      	mov	r0, r9
    f8d0:	680c      	ldr	r4, [r1, #0]
    f8d2:	4084      	lsls	r4, r0
    f8d4:	4650      	mov	r0, sl
    f8d6:	4314      	orrs	r4, r2
    f8d8:	601c      	str	r4, [r3, #0]
    f8da:	c904      	ldmia	r1!, {r2}
    f8dc:	3304      	adds	r3, #4
    f8de:	40c2      	lsrs	r2, r0
    f8e0:	428f      	cmp	r7, r1
    f8e2:	d8f4      	bhi.n	f8ce <__lshift+0x6a>
    f8e4:	601a      	str	r2, [r3, #0]
    f8e6:	2a00      	cmp	r2, #0
    f8e8:	d001      	beq.n	f8ee <__lshift+0x8a>
    f8ea:	4645      	mov	r5, r8
    f8ec:	3502      	adds	r5, #2
    f8ee:	4663      	mov	r3, ip
    f8f0:	3d01      	subs	r5, #1
    f8f2:	611d      	str	r5, [r3, #16]
    f8f4:	6873      	ldr	r3, [r6, #4]
    f8f6:	4660      	mov	r0, ip
    f8f8:	009a      	lsls	r2, r3, #2
    f8fa:	465b      	mov	r3, fp
    f8fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    f8fe:	189b      	adds	r3, r3, r2
    f900:	681a      	ldr	r2, [r3, #0]
    f902:	6032      	str	r2, [r6, #0]
    f904:	601e      	str	r6, [r3, #0]
    f906:	bc3c      	pop	{r2, r3, r4, r5}
    f908:	4690      	mov	r8, r2
    f90a:	4699      	mov	r9, r3
    f90c:	46a2      	mov	sl, r4
    f90e:	46ab      	mov	fp, r5
    f910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f912:	c904      	ldmia	r1!, {r2}
    f914:	c304      	stmia	r3!, {r2}
    f916:	428f      	cmp	r7, r1
    f918:	d9e9      	bls.n	f8ee <__lshift+0x8a>
    f91a:	c904      	ldmia	r1!, {r2}
    f91c:	c304      	stmia	r3!, {r2}
    f91e:	428f      	cmp	r7, r1
    f920:	d8f7      	bhi.n	f912 <__lshift+0xae>
    f922:	e7e4      	b.n	f8ee <__lshift+0x8a>

0000f924 <__mcmp>:
    f924:	690a      	ldr	r2, [r1, #16]
    f926:	6903      	ldr	r3, [r0, #16]
    f928:	b530      	push	{r4, r5, lr}
    f92a:	0005      	movs	r5, r0
    f92c:	1a98      	subs	r0, r3, r2
    f92e:	d111      	bne.n	f954 <__mcmp+0x30>
    f930:	0092      	lsls	r2, r2, #2
    f932:	3514      	adds	r5, #20
    f934:	3114      	adds	r1, #20
    f936:	18ab      	adds	r3, r5, r2
    f938:	1889      	adds	r1, r1, r2
    f93a:	e001      	b.n	f940 <__mcmp+0x1c>
    f93c:	429d      	cmp	r5, r3
    f93e:	d209      	bcs.n	f954 <__mcmp+0x30>
    f940:	3b04      	subs	r3, #4
    f942:	3904      	subs	r1, #4
    f944:	681c      	ldr	r4, [r3, #0]
    f946:	680a      	ldr	r2, [r1, #0]
    f948:	4294      	cmp	r4, r2
    f94a:	d0f7      	beq.n	f93c <__mcmp+0x18>
    f94c:	4294      	cmp	r4, r2
    f94e:	4180      	sbcs	r0, r0
    f950:	2201      	movs	r2, #1
    f952:	4310      	orrs	r0, r2
    f954:	bd30      	pop	{r4, r5, pc}
    f956:	46c0      	nop			; (mov r8, r8)

0000f958 <__mdiff>:
    f958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f95a:	4645      	mov	r5, r8
    f95c:	46de      	mov	lr, fp
    f95e:	4657      	mov	r7, sl
    f960:	464e      	mov	r6, r9
    f962:	0014      	movs	r4, r2
    f964:	690b      	ldr	r3, [r1, #16]
    f966:	6912      	ldr	r2, [r2, #16]
    f968:	b5e0      	push	{r5, r6, r7, lr}
    f96a:	4688      	mov	r8, r1
    f96c:	1a9d      	subs	r5, r3, r2
    f96e:	d11a      	bne.n	f9a6 <__mdiff+0x4e>
    f970:	000f      	movs	r7, r1
    f972:	2114      	movs	r1, #20
    f974:	468c      	mov	ip, r1
    f976:	0092      	lsls	r2, r2, #2
    f978:	3714      	adds	r7, #20
    f97a:	44a4      	add	ip, r4
    f97c:	18bb      	adds	r3, r7, r2
    f97e:	4462      	add	r2, ip
    f980:	e002      	b.n	f988 <__mdiff+0x30>
    f982:	429f      	cmp	r7, r3
    f984:	d300      	bcc.n	f988 <__mdiff+0x30>
    f986:	e070      	b.n	fa6a <__mdiff+0x112>
    f988:	3b04      	subs	r3, #4
    f98a:	3a04      	subs	r2, #4
    f98c:	681e      	ldr	r6, [r3, #0]
    f98e:	6811      	ldr	r1, [r2, #0]
    f990:	428e      	cmp	r6, r1
    f992:	d0f6      	beq.n	f982 <__mdiff+0x2a>
    f994:	d300      	bcc.n	f998 <__mdiff+0x40>
    f996:	e071      	b.n	fa7c <__mdiff+0x124>
    f998:	4643      	mov	r3, r8
    f99a:	003e      	movs	r6, r7
    f99c:	46a0      	mov	r8, r4
    f99e:	4667      	mov	r7, ip
    f9a0:	001c      	movs	r4, r3
    f9a2:	2501      	movs	r5, #1
    f9a4:	e006      	b.n	f9b4 <__mdiff+0x5c>
    f9a6:	2d00      	cmp	r5, #0
    f9a8:	db6a      	blt.n	fa80 <__mdiff+0x128>
    f9aa:	4647      	mov	r7, r8
    f9ac:	0026      	movs	r6, r4
    f9ae:	2500      	movs	r5, #0
    f9b0:	3714      	adds	r7, #20
    f9b2:	3614      	adds	r6, #20
    f9b4:	4643      	mov	r3, r8
    f9b6:	6859      	ldr	r1, [r3, #4]
    f9b8:	f7ff fd80 	bl	f4bc <_Balloc>
    f9bc:	4643      	mov	r3, r8
    f9be:	4681      	mov	r9, r0
    f9c0:	60c5      	str	r5, [r0, #12]
    f9c2:	6918      	ldr	r0, [r3, #16]
    f9c4:	464d      	mov	r5, r9
    f9c6:	0083      	lsls	r3, r0, #2
    f9c8:	469c      	mov	ip, r3
    f9ca:	6923      	ldr	r3, [r4, #16]
    f9cc:	44bc      	add	ip, r7
    f9ce:	009b      	lsls	r3, r3, #2
    f9d0:	4698      	mov	r8, r3
    f9d2:	2300      	movs	r3, #0
    f9d4:	44b0      	add	r8, r6
    f9d6:	3514      	adds	r5, #20
    f9d8:	469a      	mov	sl, r3
    f9da:	e000      	b.n	f9de <__mdiff+0x86>
    f9dc:	0027      	movs	r7, r4
    f9de:	ce04      	ldmia	r6!, {r2}
    f9e0:	003c      	movs	r4, r7
    f9e2:	4693      	mov	fp, r2
    f9e4:	4659      	mov	r1, fp
    f9e6:	cc08      	ldmia	r4!, {r3}
    f9e8:	0409      	lsls	r1, r1, #16
    f9ea:	041a      	lsls	r2, r3, #16
    f9ec:	0c12      	lsrs	r2, r2, #16
    f9ee:	4452      	add	r2, sl
    f9f0:	0c09      	lsrs	r1, r1, #16
    f9f2:	1a52      	subs	r2, r2, r1
    f9f4:	0c19      	lsrs	r1, r3, #16
    f9f6:	465b      	mov	r3, fp
    f9f8:	0c1b      	lsrs	r3, r3, #16
    f9fa:	1acb      	subs	r3, r1, r3
    f9fc:	1411      	asrs	r1, r2, #16
    f9fe:	185b      	adds	r3, r3, r1
    fa00:	0412      	lsls	r2, r2, #16
    fa02:	1419      	asrs	r1, r3, #16
    fa04:	0c12      	lsrs	r2, r2, #16
    fa06:	041b      	lsls	r3, r3, #16
    fa08:	468a      	mov	sl, r1
    fa0a:	4313      	orrs	r3, r2
    fa0c:	1d29      	adds	r1, r5, #4
    fa0e:	602b      	str	r3, [r5, #0]
    fa10:	000d      	movs	r5, r1
    fa12:	45b0      	cmp	r8, r6
    fa14:	d8e2      	bhi.n	f9dc <__mdiff+0x84>
    fa16:	45a4      	cmp	ip, r4
    fa18:	d916      	bls.n	fa48 <__mdiff+0xf0>
    fa1a:	cc08      	ldmia	r4!, {r3}
    fa1c:	041a      	lsls	r2, r3, #16
    fa1e:	0c12      	lsrs	r2, r2, #16
    fa20:	4452      	add	r2, sl
    fa22:	1416      	asrs	r6, r2, #16
    fa24:	0c1b      	lsrs	r3, r3, #16
    fa26:	199b      	adds	r3, r3, r6
    fa28:	0412      	lsls	r2, r2, #16
    fa2a:	141e      	asrs	r6, r3, #16
    fa2c:	0c12      	lsrs	r2, r2, #16
    fa2e:	041b      	lsls	r3, r3, #16
    fa30:	4313      	orrs	r3, r2
    fa32:	46b2      	mov	sl, r6
    fa34:	c508      	stmia	r5!, {r3}
    fa36:	45a4      	cmp	ip, r4
    fa38:	d8ef      	bhi.n	fa1a <__mdiff+0xc2>
    fa3a:	4662      	mov	r2, ip
    fa3c:	2403      	movs	r4, #3
    fa3e:	1bd2      	subs	r2, r2, r7
    fa40:	3a05      	subs	r2, #5
    fa42:	43a2      	bics	r2, r4
    fa44:	3204      	adds	r2, #4
    fa46:	1889      	adds	r1, r1, r2
    fa48:	3904      	subs	r1, #4
    fa4a:	2b00      	cmp	r3, #0
    fa4c:	d104      	bne.n	fa58 <__mdiff+0x100>
    fa4e:	3904      	subs	r1, #4
    fa50:	680b      	ldr	r3, [r1, #0]
    fa52:	3801      	subs	r0, #1
    fa54:	2b00      	cmp	r3, #0
    fa56:	d0fa      	beq.n	fa4e <__mdiff+0xf6>
    fa58:	464b      	mov	r3, r9
    fa5a:	6118      	str	r0, [r3, #16]
    fa5c:	4648      	mov	r0, r9
    fa5e:	bc3c      	pop	{r2, r3, r4, r5}
    fa60:	4690      	mov	r8, r2
    fa62:	4699      	mov	r9, r3
    fa64:	46a2      	mov	sl, r4
    fa66:	46ab      	mov	fp, r5
    fa68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fa6a:	2100      	movs	r1, #0
    fa6c:	f7ff fd26 	bl	f4bc <_Balloc>
    fa70:	2301      	movs	r3, #1
    fa72:	6103      	str	r3, [r0, #16]
    fa74:	2300      	movs	r3, #0
    fa76:	4681      	mov	r9, r0
    fa78:	6143      	str	r3, [r0, #20]
    fa7a:	e7ef      	b.n	fa5c <__mdiff+0x104>
    fa7c:	4666      	mov	r6, ip
    fa7e:	e799      	b.n	f9b4 <__mdiff+0x5c>
    fa80:	0027      	movs	r7, r4
    fa82:	000e      	movs	r6, r1
    fa84:	46a0      	mov	r8, r4
    fa86:	3714      	adds	r7, #20
    fa88:	3614      	adds	r6, #20
    fa8a:	000c      	movs	r4, r1
    fa8c:	2501      	movs	r5, #1
    fa8e:	e791      	b.n	f9b4 <__mdiff+0x5c>

0000fa90 <__d2b>:
    fa90:	b5f0      	push	{r4, r5, r6, r7, lr}
    fa92:	2101      	movs	r1, #1
    fa94:	001c      	movs	r4, r3
    fa96:	b083      	sub	sp, #12
    fa98:	9e08      	ldr	r6, [sp, #32]
    fa9a:	0015      	movs	r5, r2
    fa9c:	f7ff fd0e 	bl	f4bc <_Balloc>
    faa0:	0323      	lsls	r3, r4, #12
    faa2:	0064      	lsls	r4, r4, #1
    faa4:	0007      	movs	r7, r0
    faa6:	0b1b      	lsrs	r3, r3, #12
    faa8:	0d64      	lsrs	r4, r4, #21
    faaa:	d002      	beq.n	fab2 <__d2b+0x22>
    faac:	2280      	movs	r2, #128	; 0x80
    faae:	0352      	lsls	r2, r2, #13
    fab0:	4313      	orrs	r3, r2
    fab2:	9301      	str	r3, [sp, #4]
    fab4:	2d00      	cmp	r5, #0
    fab6:	d019      	beq.n	faec <__d2b+0x5c>
    fab8:	4668      	mov	r0, sp
    faba:	9500      	str	r5, [sp, #0]
    fabc:	f7ff fd90 	bl	f5e0 <__lo0bits>
    fac0:	2800      	cmp	r0, #0
    fac2:	d130      	bne.n	fb26 <__d2b+0x96>
    fac4:	9b00      	ldr	r3, [sp, #0]
    fac6:	617b      	str	r3, [r7, #20]
    fac8:	9b01      	ldr	r3, [sp, #4]
    faca:	61bb      	str	r3, [r7, #24]
    facc:	1e5a      	subs	r2, r3, #1
    face:	4193      	sbcs	r3, r2
    fad0:	1c5d      	adds	r5, r3, #1
    fad2:	613d      	str	r5, [r7, #16]
    fad4:	2c00      	cmp	r4, #0
    fad6:	d014      	beq.n	fb02 <__d2b+0x72>
    fad8:	4b19      	ldr	r3, [pc, #100]	; (fb40 <__d2b+0xb0>)
    fada:	469c      	mov	ip, r3
    fadc:	2335      	movs	r3, #53	; 0x35
    fade:	4464      	add	r4, ip
    fae0:	1824      	adds	r4, r4, r0
    fae2:	1a18      	subs	r0, r3, r0
    fae4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fae6:	6034      	str	r4, [r6, #0]
    fae8:	6018      	str	r0, [r3, #0]
    faea:	e019      	b.n	fb20 <__d2b+0x90>
    faec:	a801      	add	r0, sp, #4
    faee:	f7ff fd77 	bl	f5e0 <__lo0bits>
    faf2:	9b01      	ldr	r3, [sp, #4]
    faf4:	3020      	adds	r0, #32
    faf6:	617b      	str	r3, [r7, #20]
    faf8:	2301      	movs	r3, #1
    fafa:	2501      	movs	r5, #1
    fafc:	613b      	str	r3, [r7, #16]
    fafe:	2c00      	cmp	r4, #0
    fb00:	d1ea      	bne.n	fad8 <__d2b+0x48>
    fb02:	4b10      	ldr	r3, [pc, #64]	; (fb44 <__d2b+0xb4>)
    fb04:	469c      	mov	ip, r3
    fb06:	4b10      	ldr	r3, [pc, #64]	; (fb48 <__d2b+0xb8>)
    fb08:	4460      	add	r0, ip
    fb0a:	18eb      	adds	r3, r5, r3
    fb0c:	009b      	lsls	r3, r3, #2
    fb0e:	18fb      	adds	r3, r7, r3
    fb10:	6030      	str	r0, [r6, #0]
    fb12:	6958      	ldr	r0, [r3, #20]
    fb14:	f7ff fd4a 	bl	f5ac <__hi0bits>
    fb18:	016b      	lsls	r3, r5, #5
    fb1a:	1a18      	subs	r0, r3, r0
    fb1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fb1e:	6018      	str	r0, [r3, #0]
    fb20:	0038      	movs	r0, r7
    fb22:	b003      	add	sp, #12
    fb24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fb26:	9b01      	ldr	r3, [sp, #4]
    fb28:	2220      	movs	r2, #32
    fb2a:	0019      	movs	r1, r3
    fb2c:	1a12      	subs	r2, r2, r0
    fb2e:	4091      	lsls	r1, r2
    fb30:	000a      	movs	r2, r1
    fb32:	40c3      	lsrs	r3, r0
    fb34:	9900      	ldr	r1, [sp, #0]
    fb36:	9301      	str	r3, [sp, #4]
    fb38:	430a      	orrs	r2, r1
    fb3a:	617a      	str	r2, [r7, #20]
    fb3c:	e7c5      	b.n	faca <__d2b+0x3a>
    fb3e:	46c0      	nop			; (mov r8, r8)
    fb40:	fffffbcd 	.word	0xfffffbcd
    fb44:	fffffbce 	.word	0xfffffbce
    fb48:	3fffffff 	.word	0x3fffffff

0000fb4c <_realloc_r>:
    fb4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    fb4e:	464e      	mov	r6, r9
    fb50:	4645      	mov	r5, r8
    fb52:	46de      	mov	lr, fp
    fb54:	4657      	mov	r7, sl
    fb56:	b5e0      	push	{r5, r6, r7, lr}
    fb58:	b085      	sub	sp, #20
    fb5a:	9001      	str	r0, [sp, #4]
    fb5c:	000e      	movs	r6, r1
    fb5e:	0015      	movs	r5, r2
    fb60:	2900      	cmp	r1, #0
    fb62:	d100      	bne.n	fb66 <_realloc_r+0x1a>
    fb64:	e09e      	b.n	fca4 <_realloc_r+0x158>
    fb66:	0037      	movs	r7, r6
    fb68:	9801      	ldr	r0, [sp, #4]
    fb6a:	3f08      	subs	r7, #8
    fb6c:	f7ff fc96 	bl	f49c <__malloc_lock>
    fb70:	687a      	ldr	r2, [r7, #4]
    fb72:	2303      	movs	r3, #3
    fb74:	0014      	movs	r4, r2
    fb76:	439c      	bics	r4, r3
    fb78:	002b      	movs	r3, r5
    fb7a:	330b      	adds	r3, #11
    fb7c:	46b9      	mov	r9, r7
    fb7e:	2b16      	cmp	r3, #22
    fb80:	d847      	bhi.n	fc12 <_realloc_r+0xc6>
    fb82:	2110      	movs	r1, #16
    fb84:	2310      	movs	r3, #16
    fb86:	4688      	mov	r8, r1
    fb88:	4545      	cmp	r5, r8
    fb8a:	d846      	bhi.n	fc1a <_realloc_r+0xce>
    fb8c:	429c      	cmp	r4, r3
    fb8e:	da49      	bge.n	fc24 <_realloc_r+0xd8>
    fb90:	49cc      	ldr	r1, [pc, #816]	; (fec4 <_realloc_r+0x378>)
    fb92:	1938      	adds	r0, r7, r4
    fb94:	468b      	mov	fp, r1
    fb96:	6889      	ldr	r1, [r1, #8]
    fb98:	9002      	str	r0, [sp, #8]
    fb9a:	4288      	cmp	r0, r1
    fb9c:	d100      	bne.n	fba0 <_realloc_r+0x54>
    fb9e:	e0c2      	b.n	fd26 <_realloc_r+0x1da>
    fba0:	2101      	movs	r1, #1
    fba2:	468a      	mov	sl, r1
    fba4:	6840      	ldr	r0, [r0, #4]
    fba6:	0001      	movs	r1, r0
    fba8:	9003      	str	r0, [sp, #12]
    fbaa:	4650      	mov	r0, sl
    fbac:	4381      	bics	r1, r0
    fbae:	468c      	mov	ip, r1
    fbb0:	9902      	ldr	r1, [sp, #8]
    fbb2:	468b      	mov	fp, r1
    fbb4:	44dc      	add	ip, fp
    fbb6:	4661      	mov	r1, ip
    fbb8:	6849      	ldr	r1, [r1, #4]
    fbba:	4201      	tst	r1, r0
    fbbc:	d04d      	beq.n	fc5a <_realloc_r+0x10e>
    fbbe:	4210      	tst	r0, r2
    fbc0:	d100      	bne.n	fbc4 <_realloc_r+0x78>
    fbc2:	e0a2      	b.n	fd0a <_realloc_r+0x1be>
    fbc4:	0029      	movs	r1, r5
    fbc6:	9801      	ldr	r0, [sp, #4]
    fbc8:	f7ff f924 	bl	ee14 <_malloc_r>
    fbcc:	1e05      	subs	r5, r0, #0
    fbce:	d039      	beq.n	fc44 <_realloc_r+0xf8>
    fbd0:	2301      	movs	r3, #1
    fbd2:	0002      	movs	r2, r0
    fbd4:	6879      	ldr	r1, [r7, #4]
    fbd6:	3a08      	subs	r2, #8
    fbd8:	4399      	bics	r1, r3
    fbda:	187f      	adds	r7, r7, r1
    fbdc:	42ba      	cmp	r2, r7
    fbde:	d100      	bne.n	fbe2 <_realloc_r+0x96>
    fbe0:	e12e      	b.n	fe40 <_realloc_r+0x2f4>
    fbe2:	1f22      	subs	r2, r4, #4
    fbe4:	2a24      	cmp	r2, #36	; 0x24
    fbe6:	d900      	bls.n	fbea <_realloc_r+0x9e>
    fbe8:	e114      	b.n	fe14 <_realloc_r+0x2c8>
    fbea:	2a13      	cmp	r2, #19
    fbec:	d900      	bls.n	fbf0 <_realloc_r+0xa4>
    fbee:	e0e8      	b.n	fdc2 <_realloc_r+0x276>
    fbf0:	0003      	movs	r3, r0
    fbf2:	0032      	movs	r2, r6
    fbf4:	6811      	ldr	r1, [r2, #0]
    fbf6:	6019      	str	r1, [r3, #0]
    fbf8:	6851      	ldr	r1, [r2, #4]
    fbfa:	6059      	str	r1, [r3, #4]
    fbfc:	6892      	ldr	r2, [r2, #8]
    fbfe:	609a      	str	r2, [r3, #8]
    fc00:	9c01      	ldr	r4, [sp, #4]
    fc02:	0031      	movs	r1, r6
    fc04:	0020      	movs	r0, r4
    fc06:	f7fe fde7 	bl	e7d8 <_free_r>
    fc0a:	0020      	movs	r0, r4
    fc0c:	f7ff fc4e 	bl	f4ac <__malloc_unlock>
    fc10:	e01b      	b.n	fc4a <_realloc_r+0xfe>
    fc12:	2107      	movs	r1, #7
    fc14:	438b      	bics	r3, r1
    fc16:	4698      	mov	r8, r3
    fc18:	d5b6      	bpl.n	fb88 <_realloc_r+0x3c>
    fc1a:	230c      	movs	r3, #12
    fc1c:	9a01      	ldr	r2, [sp, #4]
    fc1e:	2500      	movs	r5, #0
    fc20:	6013      	str	r3, [r2, #0]
    fc22:	e012      	b.n	fc4a <_realloc_r+0xfe>
    fc24:	0035      	movs	r5, r6
    fc26:	4643      	mov	r3, r8
    fc28:	1ae3      	subs	r3, r4, r3
    fc2a:	2b0f      	cmp	r3, #15
    fc2c:	d825      	bhi.n	fc7a <_realloc_r+0x12e>
    fc2e:	464b      	mov	r3, r9
    fc30:	2201      	movs	r2, #1
    fc32:	4649      	mov	r1, r9
    fc34:	685b      	ldr	r3, [r3, #4]
    fc36:	4013      	ands	r3, r2
    fc38:	4323      	orrs	r3, r4
    fc3a:	604b      	str	r3, [r1, #4]
    fc3c:	444c      	add	r4, r9
    fc3e:	6863      	ldr	r3, [r4, #4]
    fc40:	431a      	orrs	r2, r3
    fc42:	6062      	str	r2, [r4, #4]
    fc44:	9801      	ldr	r0, [sp, #4]
    fc46:	f7ff fc31 	bl	f4ac <__malloc_unlock>
    fc4a:	0028      	movs	r0, r5
    fc4c:	b005      	add	sp, #20
    fc4e:	bc3c      	pop	{r2, r3, r4, r5}
    fc50:	4690      	mov	r8, r2
    fc52:	4699      	mov	r9, r3
    fc54:	46a2      	mov	sl, r4
    fc56:	46ab      	mov	fp, r5
    fc58:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fc5a:	2103      	movs	r1, #3
    fc5c:	9803      	ldr	r0, [sp, #12]
    fc5e:	468c      	mov	ip, r1
    fc60:	4388      	bics	r0, r1
    fc62:	1821      	adds	r1, r4, r0
    fc64:	468b      	mov	fp, r1
    fc66:	4299      	cmp	r1, r3
    fc68:	db21      	blt.n	fcae <_realloc_r+0x162>
    fc6a:	9a02      	ldr	r2, [sp, #8]
    fc6c:	0035      	movs	r5, r6
    fc6e:	68d3      	ldr	r3, [r2, #12]
    fc70:	6892      	ldr	r2, [r2, #8]
    fc72:	465c      	mov	r4, fp
    fc74:	60d3      	str	r3, [r2, #12]
    fc76:	609a      	str	r2, [r3, #8]
    fc78:	e7d5      	b.n	fc26 <_realloc_r+0xda>
    fc7a:	464a      	mov	r2, r9
    fc7c:	2001      	movs	r0, #1
    fc7e:	4646      	mov	r6, r8
    fc80:	6852      	ldr	r2, [r2, #4]
    fc82:	4649      	mov	r1, r9
    fc84:	4002      	ands	r2, r0
    fc86:	4332      	orrs	r2, r6
    fc88:	464e      	mov	r6, r9
    fc8a:	4441      	add	r1, r8
    fc8c:	4303      	orrs	r3, r0
    fc8e:	6072      	str	r2, [r6, #4]
    fc90:	444c      	add	r4, r9
    fc92:	604b      	str	r3, [r1, #4]
    fc94:	6863      	ldr	r3, [r4, #4]
    fc96:	3108      	adds	r1, #8
    fc98:	4318      	orrs	r0, r3
    fc9a:	6060      	str	r0, [r4, #4]
    fc9c:	9801      	ldr	r0, [sp, #4]
    fc9e:	f7fe fd9b 	bl	e7d8 <_free_r>
    fca2:	e7cf      	b.n	fc44 <_realloc_r+0xf8>
    fca4:	0011      	movs	r1, r2
    fca6:	f7ff f8b5 	bl	ee14 <_malloc_r>
    fcaa:	0005      	movs	r5, r0
    fcac:	e7cd      	b.n	fc4a <_realloc_r+0xfe>
    fcae:	4651      	mov	r1, sl
    fcb0:	4211      	tst	r1, r2
    fcb2:	d000      	beq.n	fcb6 <_realloc_r+0x16a>
    fcb4:	e786      	b.n	fbc4 <_realloc_r+0x78>
    fcb6:	4661      	mov	r1, ip
    fcb8:	683a      	ldr	r2, [r7, #0]
    fcba:	1aba      	subs	r2, r7, r2
    fcbc:	4692      	mov	sl, r2
    fcbe:	6852      	ldr	r2, [r2, #4]
    fcc0:	438a      	bics	r2, r1
    fcc2:	1880      	adds	r0, r0, r2
    fcc4:	4683      	mov	fp, r0
    fcc6:	44a3      	add	fp, r4
    fcc8:	459b      	cmp	fp, r3
    fcca:	db26      	blt.n	fd1a <_realloc_r+0x1ce>
    fccc:	9a02      	ldr	r2, [sp, #8]
    fcce:	68d3      	ldr	r3, [r2, #12]
    fcd0:	6892      	ldr	r2, [r2, #8]
    fcd2:	60d3      	str	r3, [r2, #12]
    fcd4:	609a      	str	r2, [r3, #8]
    fcd6:	4653      	mov	r3, sl
    fcd8:	4652      	mov	r2, sl
    fcda:	4655      	mov	r5, sl
    fcdc:	6892      	ldr	r2, [r2, #8]
    fcde:	68db      	ldr	r3, [r3, #12]
    fce0:	3508      	adds	r5, #8
    fce2:	60d3      	str	r3, [r2, #12]
    fce4:	609a      	str	r2, [r3, #8]
    fce6:	1f22      	subs	r2, r4, #4
    fce8:	2a24      	cmp	r2, #36	; 0x24
    fcea:	d900      	bls.n	fcee <_realloc_r+0x1a2>
    fcec:	e096      	b.n	fe1c <_realloc_r+0x2d0>
    fcee:	2a13      	cmp	r2, #19
    fcf0:	d972      	bls.n	fdd8 <_realloc_r+0x28c>
    fcf2:	4653      	mov	r3, sl
    fcf4:	6831      	ldr	r1, [r6, #0]
    fcf6:	6099      	str	r1, [r3, #8]
    fcf8:	6871      	ldr	r1, [r6, #4]
    fcfa:	60d9      	str	r1, [r3, #12]
    fcfc:	2a1b      	cmp	r2, #27
    fcfe:	d900      	bls.n	fd02 <_realloc_r+0x1b6>
    fd00:	e0a4      	b.n	fe4c <_realloc_r+0x300>
    fd02:	0032      	movs	r2, r6
    fd04:	3310      	adds	r3, #16
    fd06:	3208      	adds	r2, #8
    fd08:	e068      	b.n	fddc <_realloc_r+0x290>
    fd0a:	683a      	ldr	r2, [r7, #0]
    fd0c:	1aba      	subs	r2, r7, r2
    fd0e:	4692      	mov	sl, r2
    fd10:	4651      	mov	r1, sl
    fd12:	2203      	movs	r2, #3
    fd14:	6849      	ldr	r1, [r1, #4]
    fd16:	4391      	bics	r1, r2
    fd18:	000a      	movs	r2, r1
    fd1a:	4693      	mov	fp, r2
    fd1c:	44a3      	add	fp, r4
    fd1e:	459b      	cmp	fp, r3
    fd20:	da00      	bge.n	fd24 <_realloc_r+0x1d8>
    fd22:	e74f      	b.n	fbc4 <_realloc_r+0x78>
    fd24:	e7d7      	b.n	fcd6 <_realloc_r+0x18a>
    fd26:	2003      	movs	r0, #3
    fd28:	9902      	ldr	r1, [sp, #8]
    fd2a:	4684      	mov	ip, r0
    fd2c:	6849      	ldr	r1, [r1, #4]
    fd2e:	4381      	bics	r1, r0
    fd30:	4640      	mov	r0, r8
    fd32:	1909      	adds	r1, r1, r4
    fd34:	3010      	adds	r0, #16
    fd36:	9002      	str	r0, [sp, #8]
    fd38:	4281      	cmp	r1, r0
    fd3a:	da58      	bge.n	fdee <_realloc_r+0x2a2>
    fd3c:	07d2      	lsls	r2, r2, #31
    fd3e:	d500      	bpl.n	fd42 <_realloc_r+0x1f6>
    fd40:	e740      	b.n	fbc4 <_realloc_r+0x78>
    fd42:	4660      	mov	r0, ip
    fd44:	683a      	ldr	r2, [r7, #0]
    fd46:	1aba      	subs	r2, r7, r2
    fd48:	4692      	mov	sl, r2
    fd4a:	6852      	ldr	r2, [r2, #4]
    fd4c:	4382      	bics	r2, r0
    fd4e:	9802      	ldr	r0, [sp, #8]
    fd50:	1851      	adds	r1, r2, r1
    fd52:	9103      	str	r1, [sp, #12]
    fd54:	4288      	cmp	r0, r1
    fd56:	dce0      	bgt.n	fd1a <_realloc_r+0x1ce>
    fd58:	4653      	mov	r3, sl
    fd5a:	4652      	mov	r2, sl
    fd5c:	4655      	mov	r5, sl
    fd5e:	6892      	ldr	r2, [r2, #8]
    fd60:	68db      	ldr	r3, [r3, #12]
    fd62:	3508      	adds	r5, #8
    fd64:	60d3      	str	r3, [r2, #12]
    fd66:	609a      	str	r2, [r3, #8]
    fd68:	1f22      	subs	r2, r4, #4
    fd6a:	2a24      	cmp	r2, #36	; 0x24
    fd6c:	d900      	bls.n	fd70 <_realloc_r+0x224>
    fd6e:	e08e      	b.n	fe8e <_realloc_r+0x342>
    fd70:	2a13      	cmp	r2, #19
    fd72:	d800      	bhi.n	fd76 <_realloc_r+0x22a>
    fd74:	e088      	b.n	fe88 <_realloc_r+0x33c>
    fd76:	4653      	mov	r3, sl
    fd78:	6831      	ldr	r1, [r6, #0]
    fd7a:	6099      	str	r1, [r3, #8]
    fd7c:	6871      	ldr	r1, [r6, #4]
    fd7e:	60d9      	str	r1, [r3, #12]
    fd80:	2a1b      	cmp	r2, #27
    fd82:	d900      	bls.n	fd86 <_realloc_r+0x23a>
    fd84:	e088      	b.n	fe98 <_realloc_r+0x34c>
    fd86:	0032      	movs	r2, r6
    fd88:	3310      	adds	r3, #16
    fd8a:	3208      	adds	r2, #8
    fd8c:	6811      	ldr	r1, [r2, #0]
    fd8e:	6019      	str	r1, [r3, #0]
    fd90:	6851      	ldr	r1, [r2, #4]
    fd92:	6059      	str	r1, [r3, #4]
    fd94:	6892      	ldr	r2, [r2, #8]
    fd96:	609a      	str	r2, [r3, #8]
    fd98:	4651      	mov	r1, sl
    fd9a:	465b      	mov	r3, fp
    fd9c:	4642      	mov	r2, r8
    fd9e:	4441      	add	r1, r8
    fda0:	6099      	str	r1, [r3, #8]
    fda2:	9b03      	ldr	r3, [sp, #12]
    fda4:	9801      	ldr	r0, [sp, #4]
    fda6:	1a9a      	subs	r2, r3, r2
    fda8:	2301      	movs	r3, #1
    fdaa:	431a      	orrs	r2, r3
    fdac:	604a      	str	r2, [r1, #4]
    fdae:	4652      	mov	r2, sl
    fdb0:	6852      	ldr	r2, [r2, #4]
    fdb2:	4013      	ands	r3, r2
    fdb4:	4642      	mov	r2, r8
    fdb6:	4313      	orrs	r3, r2
    fdb8:	4652      	mov	r2, sl
    fdba:	6053      	str	r3, [r2, #4]
    fdbc:	f7ff fb76 	bl	f4ac <__malloc_unlock>
    fdc0:	e743      	b.n	fc4a <_realloc_r+0xfe>
    fdc2:	6833      	ldr	r3, [r6, #0]
    fdc4:	6003      	str	r3, [r0, #0]
    fdc6:	6873      	ldr	r3, [r6, #4]
    fdc8:	6043      	str	r3, [r0, #4]
    fdca:	2a1b      	cmp	r2, #27
    fdcc:	d82d      	bhi.n	fe2a <_realloc_r+0x2de>
    fdce:	0003      	movs	r3, r0
    fdd0:	0032      	movs	r2, r6
    fdd2:	3308      	adds	r3, #8
    fdd4:	3208      	adds	r2, #8
    fdd6:	e70d      	b.n	fbf4 <_realloc_r+0xa8>
    fdd8:	002b      	movs	r3, r5
    fdda:	0032      	movs	r2, r6
    fddc:	6811      	ldr	r1, [r2, #0]
    fdde:	465c      	mov	r4, fp
    fde0:	6019      	str	r1, [r3, #0]
    fde2:	6851      	ldr	r1, [r2, #4]
    fde4:	46d1      	mov	r9, sl
    fde6:	6059      	str	r1, [r3, #4]
    fde8:	6892      	ldr	r2, [r2, #8]
    fdea:	609a      	str	r2, [r3, #8]
    fdec:	e71b      	b.n	fc26 <_realloc_r+0xda>
    fdee:	4643      	mov	r3, r8
    fdf0:	18fa      	adds	r2, r7, r3
    fdf2:	465b      	mov	r3, fp
    fdf4:	609a      	str	r2, [r3, #8]
    fdf6:	4643      	mov	r3, r8
    fdf8:	1ac9      	subs	r1, r1, r3
    fdfa:	2301      	movs	r3, #1
    fdfc:	4319      	orrs	r1, r3
    fdfe:	6051      	str	r1, [r2, #4]
    fe00:	687a      	ldr	r2, [r7, #4]
    fe02:	9801      	ldr	r0, [sp, #4]
    fe04:	4013      	ands	r3, r2
    fe06:	4642      	mov	r2, r8
    fe08:	4313      	orrs	r3, r2
    fe0a:	607b      	str	r3, [r7, #4]
    fe0c:	f7ff fb4e 	bl	f4ac <__malloc_unlock>
    fe10:	0035      	movs	r5, r6
    fe12:	e71a      	b.n	fc4a <_realloc_r+0xfe>
    fe14:	0031      	movs	r1, r6
    fe16:	f7ff faf1 	bl	f3fc <memmove>
    fe1a:	e6f1      	b.n	fc00 <_realloc_r+0xb4>
    fe1c:	0031      	movs	r1, r6
    fe1e:	0028      	movs	r0, r5
    fe20:	f7ff faec 	bl	f3fc <memmove>
    fe24:	465c      	mov	r4, fp
    fe26:	46d1      	mov	r9, sl
    fe28:	e6fd      	b.n	fc26 <_realloc_r+0xda>
    fe2a:	68b3      	ldr	r3, [r6, #8]
    fe2c:	6083      	str	r3, [r0, #8]
    fe2e:	68f3      	ldr	r3, [r6, #12]
    fe30:	60c3      	str	r3, [r0, #12]
    fe32:	2a24      	cmp	r2, #36	; 0x24
    fe34:	d015      	beq.n	fe62 <_realloc_r+0x316>
    fe36:	0003      	movs	r3, r0
    fe38:	0032      	movs	r2, r6
    fe3a:	3310      	adds	r3, #16
    fe3c:	3210      	adds	r2, #16
    fe3e:	e6d9      	b.n	fbf4 <_realloc_r+0xa8>
    fe40:	6853      	ldr	r3, [r2, #4]
    fe42:	2203      	movs	r2, #3
    fe44:	4393      	bics	r3, r2
    fe46:	18e4      	adds	r4, r4, r3
    fe48:	0035      	movs	r5, r6
    fe4a:	e6ec      	b.n	fc26 <_realloc_r+0xda>
    fe4c:	4653      	mov	r3, sl
    fe4e:	68b1      	ldr	r1, [r6, #8]
    fe50:	6119      	str	r1, [r3, #16]
    fe52:	68f1      	ldr	r1, [r6, #12]
    fe54:	6159      	str	r1, [r3, #20]
    fe56:	2a24      	cmp	r2, #36	; 0x24
    fe58:	d00c      	beq.n	fe74 <_realloc_r+0x328>
    fe5a:	0032      	movs	r2, r6
    fe5c:	3318      	adds	r3, #24
    fe5e:	3210      	adds	r2, #16
    fe60:	e7bc      	b.n	fddc <_realloc_r+0x290>
    fe62:	6933      	ldr	r3, [r6, #16]
    fe64:	0032      	movs	r2, r6
    fe66:	6103      	str	r3, [r0, #16]
    fe68:	0003      	movs	r3, r0
    fe6a:	6971      	ldr	r1, [r6, #20]
    fe6c:	3318      	adds	r3, #24
    fe6e:	3218      	adds	r2, #24
    fe70:	6141      	str	r1, [r0, #20]
    fe72:	e6bf      	b.n	fbf4 <_realloc_r+0xa8>
    fe74:	4653      	mov	r3, sl
    fe76:	6932      	ldr	r2, [r6, #16]
    fe78:	4651      	mov	r1, sl
    fe7a:	619a      	str	r2, [r3, #24]
    fe7c:	0032      	movs	r2, r6
    fe7e:	6970      	ldr	r0, [r6, #20]
    fe80:	3320      	adds	r3, #32
    fe82:	3218      	adds	r2, #24
    fe84:	61c8      	str	r0, [r1, #28]
    fe86:	e7a9      	b.n	fddc <_realloc_r+0x290>
    fe88:	002b      	movs	r3, r5
    fe8a:	0032      	movs	r2, r6
    fe8c:	e77e      	b.n	fd8c <_realloc_r+0x240>
    fe8e:	0031      	movs	r1, r6
    fe90:	0028      	movs	r0, r5
    fe92:	f7ff fab3 	bl	f3fc <memmove>
    fe96:	e77f      	b.n	fd98 <_realloc_r+0x24c>
    fe98:	4653      	mov	r3, sl
    fe9a:	68b1      	ldr	r1, [r6, #8]
    fe9c:	6119      	str	r1, [r3, #16]
    fe9e:	68f1      	ldr	r1, [r6, #12]
    fea0:	6159      	str	r1, [r3, #20]
    fea2:	2a24      	cmp	r2, #36	; 0x24
    fea4:	d003      	beq.n	feae <_realloc_r+0x362>
    fea6:	0032      	movs	r2, r6
    fea8:	3318      	adds	r3, #24
    feaa:	3210      	adds	r2, #16
    feac:	e76e      	b.n	fd8c <_realloc_r+0x240>
    feae:	4653      	mov	r3, sl
    feb0:	6932      	ldr	r2, [r6, #16]
    feb2:	4651      	mov	r1, sl
    feb4:	619a      	str	r2, [r3, #24]
    feb6:	0032      	movs	r2, r6
    feb8:	6970      	ldr	r0, [r6, #20]
    feba:	3320      	adds	r3, #32
    febc:	3218      	adds	r2, #24
    febe:	61c8      	str	r0, [r1, #28]
    fec0:	e764      	b.n	fd8c <_realloc_r+0x240>
    fec2:	46c0      	nop			; (mov r8, r8)
    fec4:	200004b4 	.word	0x200004b4

0000fec8 <_sbrk_r>:
    fec8:	2300      	movs	r3, #0
    feca:	b570      	push	{r4, r5, r6, lr}
    fecc:	4c06      	ldr	r4, [pc, #24]	; (fee8 <_sbrk_r+0x20>)
    fece:	0005      	movs	r5, r0
    fed0:	0008      	movs	r0, r1
    fed2:	6023      	str	r3, [r4, #0]
    fed4:	f000 fe38 	bl	10b48 <_sbrk>
    fed8:	1c43      	adds	r3, r0, #1
    feda:	d000      	beq.n	fede <_sbrk_r+0x16>
    fedc:	bd70      	pop	{r4, r5, r6, pc}
    fede:	6823      	ldr	r3, [r4, #0]
    fee0:	2b00      	cmp	r3, #0
    fee2:	d0fb      	beq.n	fedc <_sbrk_r+0x14>
    fee4:	602b      	str	r3, [r5, #0]
    fee6:	e7f9      	b.n	fedc <_sbrk_r+0x14>
    fee8:	20001350 	.word	0x20001350

0000feec <__sread>:
    feec:	b570      	push	{r4, r5, r6, lr}
    feee:	000c      	movs	r4, r1
    fef0:	250e      	movs	r5, #14
    fef2:	5f49      	ldrsh	r1, [r1, r5]
    fef4:	f000 fa26 	bl	10344 <_read_r>
    fef8:	2800      	cmp	r0, #0
    fefa:	db03      	blt.n	ff04 <__sread+0x18>
    fefc:	6d23      	ldr	r3, [r4, #80]	; 0x50
    fefe:	181b      	adds	r3, r3, r0
    ff00:	6523      	str	r3, [r4, #80]	; 0x50
    ff02:	bd70      	pop	{r4, r5, r6, pc}
    ff04:	89a3      	ldrh	r3, [r4, #12]
    ff06:	4a02      	ldr	r2, [pc, #8]	; (ff10 <__sread+0x24>)
    ff08:	4013      	ands	r3, r2
    ff0a:	81a3      	strh	r3, [r4, #12]
    ff0c:	e7f9      	b.n	ff02 <__sread+0x16>
    ff0e:	46c0      	nop			; (mov r8, r8)
    ff10:	ffffefff 	.word	0xffffefff

0000ff14 <__swrite>:
    ff14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ff16:	0016      	movs	r6, r2
    ff18:	001f      	movs	r7, r3
    ff1a:	220c      	movs	r2, #12
    ff1c:	5e8b      	ldrsh	r3, [r1, r2]
    ff1e:	0005      	movs	r5, r0
    ff20:	000c      	movs	r4, r1
    ff22:	05da      	lsls	r2, r3, #23
    ff24:	d507      	bpl.n	ff36 <__swrite+0x22>
    ff26:	230e      	movs	r3, #14
    ff28:	5ec9      	ldrsh	r1, [r1, r3]
    ff2a:	2200      	movs	r2, #0
    ff2c:	2302      	movs	r3, #2
    ff2e:	f000 f9df 	bl	102f0 <_lseek_r>
    ff32:	220c      	movs	r2, #12
    ff34:	5ea3      	ldrsh	r3, [r4, r2]
    ff36:	4a05      	ldr	r2, [pc, #20]	; (ff4c <__swrite+0x38>)
    ff38:	0028      	movs	r0, r5
    ff3a:	4013      	ands	r3, r2
    ff3c:	81a3      	strh	r3, [r4, #12]
    ff3e:	0032      	movs	r2, r6
    ff40:	230e      	movs	r3, #14
    ff42:	5ee1      	ldrsh	r1, [r4, r3]
    ff44:	003b      	movs	r3, r7
    ff46:	f000 f86b 	bl	10020 <_write_r>
    ff4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ff4c:	ffffefff 	.word	0xffffefff

0000ff50 <__sseek>:
    ff50:	b570      	push	{r4, r5, r6, lr}
    ff52:	000c      	movs	r4, r1
    ff54:	250e      	movs	r5, #14
    ff56:	5f49      	ldrsh	r1, [r1, r5]
    ff58:	f000 f9ca 	bl	102f0 <_lseek_r>
    ff5c:	1c43      	adds	r3, r0, #1
    ff5e:	d006      	beq.n	ff6e <__sseek+0x1e>
    ff60:	2380      	movs	r3, #128	; 0x80
    ff62:	89a2      	ldrh	r2, [r4, #12]
    ff64:	015b      	lsls	r3, r3, #5
    ff66:	4313      	orrs	r3, r2
    ff68:	81a3      	strh	r3, [r4, #12]
    ff6a:	6520      	str	r0, [r4, #80]	; 0x50
    ff6c:	bd70      	pop	{r4, r5, r6, pc}
    ff6e:	89a3      	ldrh	r3, [r4, #12]
    ff70:	4a01      	ldr	r2, [pc, #4]	; (ff78 <__sseek+0x28>)
    ff72:	4013      	ands	r3, r2
    ff74:	81a3      	strh	r3, [r4, #12]
    ff76:	e7f9      	b.n	ff6c <__sseek+0x1c>
    ff78:	ffffefff 	.word	0xffffefff

0000ff7c <__sclose>:
    ff7c:	b510      	push	{r4, lr}
    ff7e:	230e      	movs	r3, #14
    ff80:	5ec9      	ldrsh	r1, [r1, r3]
    ff82:	f000 f88d 	bl	100a0 <_close_r>
    ff86:	bd10      	pop	{r4, pc}

0000ff88 <__sprint_r.part.0>:
    ff88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ff8a:	464e      	mov	r6, r9
    ff8c:	4645      	mov	r5, r8
    ff8e:	46de      	mov	lr, fp
    ff90:	4657      	mov	r7, sl
    ff92:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    ff94:	b5e0      	push	{r5, r6, r7, lr}
    ff96:	4680      	mov	r8, r0
    ff98:	000e      	movs	r6, r1
    ff9a:	4691      	mov	r9, r2
    ff9c:	049b      	lsls	r3, r3, #18
    ff9e:	d531      	bpl.n	10004 <__sprint_r.part.0+0x7c>
    ffa0:	6813      	ldr	r3, [r2, #0]
    ffa2:	469a      	mov	sl, r3
    ffa4:	6893      	ldr	r3, [r2, #8]
    ffa6:	2b00      	cmp	r3, #0
    ffa8:	d02a      	beq.n	10000 <__sprint_r.part.0+0x78>
    ffaa:	4652      	mov	r2, sl
    ffac:	6852      	ldr	r2, [r2, #4]
    ffae:	2500      	movs	r5, #0
    ffb0:	4693      	mov	fp, r2
    ffb2:	0897      	lsrs	r7, r2, #2
    ffb4:	4652      	mov	r2, sl
    ffb6:	6814      	ldr	r4, [r2, #0]
    ffb8:	d104      	bne.n	ffc4 <__sprint_r.part.0+0x3c>
    ffba:	e016      	b.n	ffea <__sprint_r.part.0+0x62>
    ffbc:	3501      	adds	r5, #1
    ffbe:	3404      	adds	r4, #4
    ffc0:	42af      	cmp	r7, r5
    ffc2:	d010      	beq.n	ffe6 <__sprint_r.part.0+0x5e>
    ffc4:	0032      	movs	r2, r6
    ffc6:	6821      	ldr	r1, [r4, #0]
    ffc8:	4640      	mov	r0, r8
    ffca:	f000 f92d 	bl	10228 <_fputwc_r>
    ffce:	1c43      	adds	r3, r0, #1
    ffd0:	d1f4      	bne.n	ffbc <__sprint_r.part.0+0x34>
    ffd2:	464a      	mov	r2, r9
    ffd4:	2300      	movs	r3, #0
    ffd6:	6093      	str	r3, [r2, #8]
    ffd8:	6053      	str	r3, [r2, #4]
    ffda:	bc3c      	pop	{r2, r3, r4, r5}
    ffdc:	4690      	mov	r8, r2
    ffde:	4699      	mov	r9, r3
    ffe0:	46a2      	mov	sl, r4
    ffe2:	46ab      	mov	fp, r5
    ffe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ffe6:	464b      	mov	r3, r9
    ffe8:	689b      	ldr	r3, [r3, #8]
    ffea:	465a      	mov	r2, fp
    ffec:	2103      	movs	r1, #3
    ffee:	438a      	bics	r2, r1
    fff0:	1a9b      	subs	r3, r3, r2
    fff2:	464a      	mov	r2, r9
    fff4:	6093      	str	r3, [r2, #8]
    fff6:	2208      	movs	r2, #8
    fff8:	4694      	mov	ip, r2
    fffa:	44e2      	add	sl, ip
    fffc:	2b00      	cmp	r3, #0
    fffe:	d1d4      	bne.n	ffaa <__sprint_r.part.0+0x22>
   10000:	2000      	movs	r0, #0
   10002:	e7e6      	b.n	ffd2 <__sprint_r.part.0+0x4a>
   10004:	f7fe fcc6 	bl	e994 <__sfvwrite_r>
   10008:	e7e3      	b.n	ffd2 <__sprint_r.part.0+0x4a>
   1000a:	46c0      	nop			; (mov r8, r8)

0001000c <__sprint_r>:
   1000c:	6893      	ldr	r3, [r2, #8]
   1000e:	b510      	push	{r4, lr}
   10010:	2b00      	cmp	r3, #0
   10012:	d002      	beq.n	1001a <__sprint_r+0xe>
   10014:	f7ff ffb8 	bl	ff88 <__sprint_r.part.0>
   10018:	bd10      	pop	{r4, pc}
   1001a:	6053      	str	r3, [r2, #4]
   1001c:	2000      	movs	r0, #0
   1001e:	e7fb      	b.n	10018 <__sprint_r+0xc>

00010020 <_write_r>:
   10020:	b570      	push	{r4, r5, r6, lr}
   10022:	0005      	movs	r5, r0
   10024:	0008      	movs	r0, r1
   10026:	0011      	movs	r1, r2
   10028:	2200      	movs	r2, #0
   1002a:	4c06      	ldr	r4, [pc, #24]	; (10044 <_write_r+0x24>)
   1002c:	6022      	str	r2, [r4, #0]
   1002e:	001a      	movs	r2, r3
   10030:	f000 fd98 	bl	10b64 <_write>
   10034:	1c43      	adds	r3, r0, #1
   10036:	d000      	beq.n	1003a <_write_r+0x1a>
   10038:	bd70      	pop	{r4, r5, r6, pc}
   1003a:	6823      	ldr	r3, [r4, #0]
   1003c:	2b00      	cmp	r3, #0
   1003e:	d0fb      	beq.n	10038 <_write_r+0x18>
   10040:	602b      	str	r3, [r5, #0]
   10042:	e7f9      	b.n	10038 <_write_r+0x18>
   10044:	20001350 	.word	0x20001350

00010048 <_calloc_r>:
   10048:	b510      	push	{r4, lr}
   1004a:	4351      	muls	r1, r2
   1004c:	f7fe fee2 	bl	ee14 <_malloc_r>
   10050:	1e04      	subs	r4, r0, #0
   10052:	d01c      	beq.n	1008e <_calloc_r+0x46>
   10054:	0003      	movs	r3, r0
   10056:	3b08      	subs	r3, #8
   10058:	685a      	ldr	r2, [r3, #4]
   1005a:	2303      	movs	r3, #3
   1005c:	439a      	bics	r2, r3
   1005e:	3a04      	subs	r2, #4
   10060:	2a24      	cmp	r2, #36	; 0x24
   10062:	d816      	bhi.n	10092 <_calloc_r+0x4a>
   10064:	0003      	movs	r3, r0
   10066:	2a13      	cmp	r2, #19
   10068:	d90d      	bls.n	10086 <_calloc_r+0x3e>
   1006a:	2100      	movs	r1, #0
   1006c:	3308      	adds	r3, #8
   1006e:	6001      	str	r1, [r0, #0]
   10070:	6041      	str	r1, [r0, #4]
   10072:	2a1b      	cmp	r2, #27
   10074:	d907      	bls.n	10086 <_calloc_r+0x3e>
   10076:	6081      	str	r1, [r0, #8]
   10078:	60c1      	str	r1, [r0, #12]
   1007a:	2a24      	cmp	r2, #36	; 0x24
   1007c:	d10d      	bne.n	1009a <_calloc_r+0x52>
   1007e:	0003      	movs	r3, r0
   10080:	6101      	str	r1, [r0, #16]
   10082:	3318      	adds	r3, #24
   10084:	6141      	str	r1, [r0, #20]
   10086:	2200      	movs	r2, #0
   10088:	601a      	str	r2, [r3, #0]
   1008a:	605a      	str	r2, [r3, #4]
   1008c:	609a      	str	r2, [r3, #8]
   1008e:	0020      	movs	r0, r4
   10090:	bd10      	pop	{r4, pc}
   10092:	2100      	movs	r1, #0
   10094:	f7fb fb76 	bl	b784 <memset>
   10098:	e7f9      	b.n	1008e <_calloc_r+0x46>
   1009a:	0003      	movs	r3, r0
   1009c:	3310      	adds	r3, #16
   1009e:	e7f2      	b.n	10086 <_calloc_r+0x3e>

000100a0 <_close_r>:
   100a0:	2300      	movs	r3, #0
   100a2:	b570      	push	{r4, r5, r6, lr}
   100a4:	4c06      	ldr	r4, [pc, #24]	; (100c0 <_close_r+0x20>)
   100a6:	0005      	movs	r5, r0
   100a8:	0008      	movs	r0, r1
   100aa:	6023      	str	r3, [r4, #0]
   100ac:	f000 fd24 	bl	10af8 <_close>
   100b0:	1c43      	adds	r3, r0, #1
   100b2:	d000      	beq.n	100b6 <_close_r+0x16>
   100b4:	bd70      	pop	{r4, r5, r6, pc}
   100b6:	6823      	ldr	r3, [r4, #0]
   100b8:	2b00      	cmp	r3, #0
   100ba:	d0fb      	beq.n	100b4 <_close_r+0x14>
   100bc:	602b      	str	r3, [r5, #0]
   100be:	e7f9      	b.n	100b4 <_close_r+0x14>
   100c0:	20001350 	.word	0x20001350

000100c4 <_fclose_r>:
   100c4:	b570      	push	{r4, r5, r6, lr}
   100c6:	0005      	movs	r5, r0
   100c8:	1e0c      	subs	r4, r1, #0
   100ca:	d040      	beq.n	1014e <_fclose_r+0x8a>
   100cc:	2800      	cmp	r0, #0
   100ce:	d002      	beq.n	100d6 <_fclose_r+0x12>
   100d0:	6b83      	ldr	r3, [r0, #56]	; 0x38
   100d2:	2b00      	cmp	r3, #0
   100d4:	d03e      	beq.n	10154 <_fclose_r+0x90>
   100d6:	2601      	movs	r6, #1
   100d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
   100da:	4233      	tst	r3, r6
   100dc:	d133      	bne.n	10146 <_fclose_r+0x82>
   100de:	89a3      	ldrh	r3, [r4, #12]
   100e0:	059b      	lsls	r3, r3, #22
   100e2:	d543      	bpl.n	1016c <_fclose_r+0xa8>
   100e4:	0021      	movs	r1, r4
   100e6:	0028      	movs	r0, r5
   100e8:	f7fe f9ca 	bl	e480 <__sflush_r>
   100ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   100ee:	0006      	movs	r6, r0
   100f0:	2b00      	cmp	r3, #0
   100f2:	d004      	beq.n	100fe <_fclose_r+0x3a>
   100f4:	69e1      	ldr	r1, [r4, #28]
   100f6:	0028      	movs	r0, r5
   100f8:	4798      	blx	r3
   100fa:	2800      	cmp	r0, #0
   100fc:	db44      	blt.n	10188 <_fclose_r+0xc4>
   100fe:	89a3      	ldrh	r3, [r4, #12]
   10100:	061b      	lsls	r3, r3, #24
   10102:	d42a      	bmi.n	1015a <_fclose_r+0x96>
   10104:	6b21      	ldr	r1, [r4, #48]	; 0x30
   10106:	2900      	cmp	r1, #0
   10108:	d008      	beq.n	1011c <_fclose_r+0x58>
   1010a:	0023      	movs	r3, r4
   1010c:	3340      	adds	r3, #64	; 0x40
   1010e:	4299      	cmp	r1, r3
   10110:	d002      	beq.n	10118 <_fclose_r+0x54>
   10112:	0028      	movs	r0, r5
   10114:	f7fe fb60 	bl	e7d8 <_free_r>
   10118:	2300      	movs	r3, #0
   1011a:	6323      	str	r3, [r4, #48]	; 0x30
   1011c:	6c61      	ldr	r1, [r4, #68]	; 0x44
   1011e:	2900      	cmp	r1, #0
   10120:	d004      	beq.n	1012c <_fclose_r+0x68>
   10122:	0028      	movs	r0, r5
   10124:	f7fe fb58 	bl	e7d8 <_free_r>
   10128:	2300      	movs	r3, #0
   1012a:	6463      	str	r3, [r4, #68]	; 0x44
   1012c:	f7fe fada 	bl	e6e4 <__sfp_lock_acquire>
   10130:	2300      	movs	r3, #0
   10132:	81a3      	strh	r3, [r4, #12]
   10134:	6e63      	ldr	r3, [r4, #100]	; 0x64
   10136:	07db      	lsls	r3, r3, #31
   10138:	d514      	bpl.n	10164 <_fclose_r+0xa0>
   1013a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1013c:	f7fe fde2 	bl	ed04 <__retarget_lock_close_recursive>
   10140:	f7fe fad8 	bl	e6f4 <__sfp_lock_release>
   10144:	e004      	b.n	10150 <_fclose_r+0x8c>
   10146:	220c      	movs	r2, #12
   10148:	5ea3      	ldrsh	r3, [r4, r2]
   1014a:	2b00      	cmp	r3, #0
   1014c:	d1ca      	bne.n	100e4 <_fclose_r+0x20>
   1014e:	2600      	movs	r6, #0
   10150:	0030      	movs	r0, r6
   10152:	bd70      	pop	{r4, r5, r6, pc}
   10154:	f7fe fa96 	bl	e684 <__sinit>
   10158:	e7bd      	b.n	100d6 <_fclose_r+0x12>
   1015a:	6921      	ldr	r1, [r4, #16]
   1015c:	0028      	movs	r0, r5
   1015e:	f7fe fb3b 	bl	e7d8 <_free_r>
   10162:	e7cf      	b.n	10104 <_fclose_r+0x40>
   10164:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10166:	f7fe fdd1 	bl	ed0c <__retarget_lock_release_recursive>
   1016a:	e7e6      	b.n	1013a <_fclose_r+0x76>
   1016c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1016e:	f7fe fdcb 	bl	ed08 <__retarget_lock_acquire_recursive>
   10172:	220c      	movs	r2, #12
   10174:	5ea3      	ldrsh	r3, [r4, r2]
   10176:	2b00      	cmp	r3, #0
   10178:	d1b4      	bne.n	100e4 <_fclose_r+0x20>
   1017a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1017c:	401e      	ands	r6, r3
   1017e:	d1e6      	bne.n	1014e <_fclose_r+0x8a>
   10180:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10182:	f7fe fdc3 	bl	ed0c <__retarget_lock_release_recursive>
   10186:	e7e3      	b.n	10150 <_fclose_r+0x8c>
   10188:	2601      	movs	r6, #1
   1018a:	4276      	negs	r6, r6
   1018c:	e7b7      	b.n	100fe <_fclose_r+0x3a>
   1018e:	46c0      	nop			; (mov r8, r8)

00010190 <__fputwc>:
   10190:	b5f0      	push	{r4, r5, r6, r7, lr}
   10192:	46ce      	mov	lr, r9
   10194:	4647      	mov	r7, r8
   10196:	b580      	push	{r7, lr}
   10198:	b085      	sub	sp, #20
   1019a:	4680      	mov	r8, r0
   1019c:	4689      	mov	r9, r1
   1019e:	0014      	movs	r4, r2
   101a0:	f000 f896 	bl	102d0 <__locale_mb_cur_max>
   101a4:	2801      	cmp	r0, #1
   101a6:	d031      	beq.n	1020c <__fputwc+0x7c>
   101a8:	0023      	movs	r3, r4
   101aa:	af03      	add	r7, sp, #12
   101ac:	335c      	adds	r3, #92	; 0x5c
   101ae:	464a      	mov	r2, r9
   101b0:	0039      	movs	r1, r7
   101b2:	4640      	mov	r0, r8
   101b4:	f000 f938 	bl	10428 <_wcrtomb_r>
   101b8:	0006      	movs	r6, r0
   101ba:	1c43      	adds	r3, r0, #1
   101bc:	d021      	beq.n	10202 <__fputwc+0x72>
   101be:	2800      	cmp	r0, #0
   101c0:	d030      	beq.n	10224 <__fputwc+0x94>
   101c2:	7839      	ldrb	r1, [r7, #0]
   101c4:	2500      	movs	r5, #0
   101c6:	e007      	b.n	101d8 <__fputwc+0x48>
   101c8:	6823      	ldr	r3, [r4, #0]
   101ca:	1c5a      	adds	r2, r3, #1
   101cc:	6022      	str	r2, [r4, #0]
   101ce:	7019      	strb	r1, [r3, #0]
   101d0:	3501      	adds	r5, #1
   101d2:	42b5      	cmp	r5, r6
   101d4:	d226      	bcs.n	10224 <__fputwc+0x94>
   101d6:	5d79      	ldrb	r1, [r7, r5]
   101d8:	68a3      	ldr	r3, [r4, #8]
   101da:	3b01      	subs	r3, #1
   101dc:	60a3      	str	r3, [r4, #8]
   101de:	2b00      	cmp	r3, #0
   101e0:	daf2      	bge.n	101c8 <__fputwc+0x38>
   101e2:	69a2      	ldr	r2, [r4, #24]
   101e4:	4293      	cmp	r3, r2
   101e6:	db01      	blt.n	101ec <__fputwc+0x5c>
   101e8:	290a      	cmp	r1, #10
   101ea:	d1ed      	bne.n	101c8 <__fputwc+0x38>
   101ec:	0022      	movs	r2, r4
   101ee:	4640      	mov	r0, r8
   101f0:	f000 f8bc 	bl	1036c <__swbuf_r>
   101f4:	1c43      	adds	r3, r0, #1
   101f6:	d1eb      	bne.n	101d0 <__fputwc+0x40>
   101f8:	b005      	add	sp, #20
   101fa:	bc0c      	pop	{r2, r3}
   101fc:	4690      	mov	r8, r2
   101fe:	4699      	mov	r9, r3
   10200:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10202:	2240      	movs	r2, #64	; 0x40
   10204:	89a3      	ldrh	r3, [r4, #12]
   10206:	4313      	orrs	r3, r2
   10208:	81a3      	strh	r3, [r4, #12]
   1020a:	e7f5      	b.n	101f8 <__fputwc+0x68>
   1020c:	464b      	mov	r3, r9
   1020e:	3b01      	subs	r3, #1
   10210:	2bfe      	cmp	r3, #254	; 0xfe
   10212:	d8c9      	bhi.n	101a8 <__fputwc+0x18>
   10214:	466a      	mov	r2, sp
   10216:	464b      	mov	r3, r9
   10218:	71d3      	strb	r3, [r2, #7]
   1021a:	79d1      	ldrb	r1, [r2, #7]
   1021c:	af03      	add	r7, sp, #12
   1021e:	7039      	strb	r1, [r7, #0]
   10220:	2601      	movs	r6, #1
   10222:	e7cf      	b.n	101c4 <__fputwc+0x34>
   10224:	4648      	mov	r0, r9
   10226:	e7e7      	b.n	101f8 <__fputwc+0x68>

00010228 <_fputwc_r>:
   10228:	6e53      	ldr	r3, [r2, #100]	; 0x64
   1022a:	b570      	push	{r4, r5, r6, lr}
   1022c:	0005      	movs	r5, r0
   1022e:	000e      	movs	r6, r1
   10230:	0014      	movs	r4, r2
   10232:	07db      	lsls	r3, r3, #31
   10234:	d41e      	bmi.n	10274 <_fputwc_r+0x4c>
   10236:	230c      	movs	r3, #12
   10238:	5ed2      	ldrsh	r2, [r2, r3]
   1023a:	b291      	uxth	r1, r2
   1023c:	058b      	lsls	r3, r1, #22
   1023e:	d516      	bpl.n	1026e <_fputwc_r+0x46>
   10240:	2380      	movs	r3, #128	; 0x80
   10242:	019b      	lsls	r3, r3, #6
   10244:	4219      	tst	r1, r3
   10246:	d104      	bne.n	10252 <_fputwc_r+0x2a>
   10248:	431a      	orrs	r2, r3
   1024a:	81a2      	strh	r2, [r4, #12]
   1024c:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1024e:	4313      	orrs	r3, r2
   10250:	6663      	str	r3, [r4, #100]	; 0x64
   10252:	0028      	movs	r0, r5
   10254:	0022      	movs	r2, r4
   10256:	0031      	movs	r1, r6
   10258:	f7ff ff9a 	bl	10190 <__fputwc>
   1025c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1025e:	0005      	movs	r5, r0
   10260:	07db      	lsls	r3, r3, #31
   10262:	d402      	bmi.n	1026a <_fputwc_r+0x42>
   10264:	89a3      	ldrh	r3, [r4, #12]
   10266:	059b      	lsls	r3, r3, #22
   10268:	d508      	bpl.n	1027c <_fputwc_r+0x54>
   1026a:	0028      	movs	r0, r5
   1026c:	bd70      	pop	{r4, r5, r6, pc}
   1026e:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10270:	f7fe fd4a 	bl	ed08 <__retarget_lock_acquire_recursive>
   10274:	230c      	movs	r3, #12
   10276:	5ee2      	ldrsh	r2, [r4, r3]
   10278:	b291      	uxth	r1, r2
   1027a:	e7e1      	b.n	10240 <_fputwc_r+0x18>
   1027c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1027e:	f7fe fd45 	bl	ed0c <__retarget_lock_release_recursive>
   10282:	e7f2      	b.n	1026a <_fputwc_r+0x42>

00010284 <_fstat_r>:
   10284:	2300      	movs	r3, #0
   10286:	b570      	push	{r4, r5, r6, lr}
   10288:	4c07      	ldr	r4, [pc, #28]	; (102a8 <_fstat_r+0x24>)
   1028a:	0005      	movs	r5, r0
   1028c:	0008      	movs	r0, r1
   1028e:	0011      	movs	r1, r2
   10290:	6023      	str	r3, [r4, #0]
   10292:	f000 fc39 	bl	10b08 <_fstat>
   10296:	1c43      	adds	r3, r0, #1
   10298:	d000      	beq.n	1029c <_fstat_r+0x18>
   1029a:	bd70      	pop	{r4, r5, r6, pc}
   1029c:	6823      	ldr	r3, [r4, #0]
   1029e:	2b00      	cmp	r3, #0
   102a0:	d0fb      	beq.n	1029a <_fstat_r+0x16>
   102a2:	602b      	str	r3, [r5, #0]
   102a4:	e7f9      	b.n	1029a <_fstat_r+0x16>
   102a6:	46c0      	nop			; (mov r8, r8)
   102a8:	20001350 	.word	0x20001350

000102ac <_isatty_r>:
   102ac:	2300      	movs	r3, #0
   102ae:	b570      	push	{r4, r5, r6, lr}
   102b0:	4c06      	ldr	r4, [pc, #24]	; (102cc <_isatty_r+0x20>)
   102b2:	0005      	movs	r5, r0
   102b4:	0008      	movs	r0, r1
   102b6:	6023      	str	r3, [r4, #0]
   102b8:	f000 fc2e 	bl	10b18 <_isatty>
   102bc:	1c43      	adds	r3, r0, #1
   102be:	d000      	beq.n	102c2 <_isatty_r+0x16>
   102c0:	bd70      	pop	{r4, r5, r6, pc}
   102c2:	6823      	ldr	r3, [r4, #0]
   102c4:	2b00      	cmp	r3, #0
   102c6:	d0fb      	beq.n	102c0 <_isatty_r+0x14>
   102c8:	602b      	str	r3, [r5, #0]
   102ca:	e7f9      	b.n	102c0 <_isatty_r+0x14>
   102cc:	20001350 	.word	0x20001350

000102d0 <__locale_mb_cur_max>:
   102d0:	4b05      	ldr	r3, [pc, #20]	; (102e8 <__locale_mb_cur_max+0x18>)
   102d2:	681b      	ldr	r3, [r3, #0]
   102d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   102d6:	2b00      	cmp	r3, #0
   102d8:	d003      	beq.n	102e2 <__locale_mb_cur_max+0x12>
   102da:	2294      	movs	r2, #148	; 0x94
   102dc:	0052      	lsls	r2, r2, #1
   102de:	5c98      	ldrb	r0, [r3, r2]
   102e0:	4770      	bx	lr
   102e2:	4b02      	ldr	r3, [pc, #8]	; (102ec <__locale_mb_cur_max+0x1c>)
   102e4:	e7f9      	b.n	102da <__locale_mb_cur_max+0xa>
   102e6:	46c0      	nop			; (mov r8, r8)
   102e8:	20000080 	.word	0x20000080
   102ec:	200008c4 	.word	0x200008c4

000102f0 <_lseek_r>:
   102f0:	b570      	push	{r4, r5, r6, lr}
   102f2:	0005      	movs	r5, r0
   102f4:	0008      	movs	r0, r1
   102f6:	0011      	movs	r1, r2
   102f8:	2200      	movs	r2, #0
   102fa:	4c06      	ldr	r4, [pc, #24]	; (10314 <_lseek_r+0x24>)
   102fc:	6022      	str	r2, [r4, #0]
   102fe:	001a      	movs	r2, r3
   10300:	f000 fc12 	bl	10b28 <_lseek>
   10304:	1c43      	adds	r3, r0, #1
   10306:	d000      	beq.n	1030a <_lseek_r+0x1a>
   10308:	bd70      	pop	{r4, r5, r6, pc}
   1030a:	6823      	ldr	r3, [r4, #0]
   1030c:	2b00      	cmp	r3, #0
   1030e:	d0fb      	beq.n	10308 <_lseek_r+0x18>
   10310:	602b      	str	r3, [r5, #0]
   10312:	e7f9      	b.n	10308 <_lseek_r+0x18>
   10314:	20001350 	.word	0x20001350

00010318 <__ascii_mbtowc>:
   10318:	b082      	sub	sp, #8
   1031a:	2900      	cmp	r1, #0
   1031c:	d00a      	beq.n	10334 <__ascii_mbtowc+0x1c>
   1031e:	2a00      	cmp	r2, #0
   10320:	d00b      	beq.n	1033a <__ascii_mbtowc+0x22>
   10322:	2b00      	cmp	r3, #0
   10324:	d00b      	beq.n	1033e <__ascii_mbtowc+0x26>
   10326:	7813      	ldrb	r3, [r2, #0]
   10328:	600b      	str	r3, [r1, #0]
   1032a:	7810      	ldrb	r0, [r2, #0]
   1032c:	1e43      	subs	r3, r0, #1
   1032e:	4198      	sbcs	r0, r3
   10330:	b002      	add	sp, #8
   10332:	4770      	bx	lr
   10334:	a901      	add	r1, sp, #4
   10336:	2a00      	cmp	r2, #0
   10338:	d1f3      	bne.n	10322 <__ascii_mbtowc+0xa>
   1033a:	2000      	movs	r0, #0
   1033c:	e7f8      	b.n	10330 <__ascii_mbtowc+0x18>
   1033e:	2002      	movs	r0, #2
   10340:	4240      	negs	r0, r0
   10342:	e7f5      	b.n	10330 <__ascii_mbtowc+0x18>

00010344 <_read_r>:
   10344:	b570      	push	{r4, r5, r6, lr}
   10346:	0005      	movs	r5, r0
   10348:	0008      	movs	r0, r1
   1034a:	0011      	movs	r1, r2
   1034c:	2200      	movs	r2, #0
   1034e:	4c06      	ldr	r4, [pc, #24]	; (10368 <_read_r+0x24>)
   10350:	6022      	str	r2, [r4, #0]
   10352:	001a      	movs	r2, r3
   10354:	f000 fbf0 	bl	10b38 <_read>
   10358:	1c43      	adds	r3, r0, #1
   1035a:	d000      	beq.n	1035e <_read_r+0x1a>
   1035c:	bd70      	pop	{r4, r5, r6, pc}
   1035e:	6823      	ldr	r3, [r4, #0]
   10360:	2b00      	cmp	r3, #0
   10362:	d0fb      	beq.n	1035c <_read_r+0x18>
   10364:	602b      	str	r3, [r5, #0]
   10366:	e7f9      	b.n	1035c <_read_r+0x18>
   10368:	20001350 	.word	0x20001350

0001036c <__swbuf_r>:
   1036c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1036e:	0006      	movs	r6, r0
   10370:	000d      	movs	r5, r1
   10372:	0014      	movs	r4, r2
   10374:	2800      	cmp	r0, #0
   10376:	d002      	beq.n	1037e <__swbuf_r+0x12>
   10378:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1037a:	2b00      	cmp	r3, #0
   1037c:	d04e      	beq.n	1041c <__swbuf_r+0xb0>
   1037e:	69a3      	ldr	r3, [r4, #24]
   10380:	60a3      	str	r3, [r4, #8]
   10382:	230c      	movs	r3, #12
   10384:	5ee0      	ldrsh	r0, [r4, r3]
   10386:	b281      	uxth	r1, r0
   10388:	070b      	lsls	r3, r1, #28
   1038a:	d53c      	bpl.n	10406 <__swbuf_r+0x9a>
   1038c:	6923      	ldr	r3, [r4, #16]
   1038e:	2b00      	cmp	r3, #0
   10390:	d039      	beq.n	10406 <__swbuf_r+0x9a>
   10392:	22ff      	movs	r2, #255	; 0xff
   10394:	b2ef      	uxtb	r7, r5
   10396:	4015      	ands	r5, r2
   10398:	2280      	movs	r2, #128	; 0x80
   1039a:	0192      	lsls	r2, r2, #6
   1039c:	4211      	tst	r1, r2
   1039e:	d015      	beq.n	103cc <__swbuf_r+0x60>
   103a0:	6822      	ldr	r2, [r4, #0]
   103a2:	6961      	ldr	r1, [r4, #20]
   103a4:	1ad3      	subs	r3, r2, r3
   103a6:	428b      	cmp	r3, r1
   103a8:	da1b      	bge.n	103e2 <__swbuf_r+0x76>
   103aa:	3301      	adds	r3, #1
   103ac:	68a1      	ldr	r1, [r4, #8]
   103ae:	3901      	subs	r1, #1
   103b0:	60a1      	str	r1, [r4, #8]
   103b2:	1c51      	adds	r1, r2, #1
   103b4:	6021      	str	r1, [r4, #0]
   103b6:	7017      	strb	r7, [r2, #0]
   103b8:	6962      	ldr	r2, [r4, #20]
   103ba:	429a      	cmp	r2, r3
   103bc:	d01a      	beq.n	103f4 <__swbuf_r+0x88>
   103be:	89a3      	ldrh	r3, [r4, #12]
   103c0:	07db      	lsls	r3, r3, #31
   103c2:	d501      	bpl.n	103c8 <__swbuf_r+0x5c>
   103c4:	2d0a      	cmp	r5, #10
   103c6:	d015      	beq.n	103f4 <__swbuf_r+0x88>
   103c8:	0028      	movs	r0, r5
   103ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   103cc:	4302      	orrs	r2, r0
   103ce:	6e61      	ldr	r1, [r4, #100]	; 0x64
   103d0:	81a2      	strh	r2, [r4, #12]
   103d2:	4a14      	ldr	r2, [pc, #80]	; (10424 <__swbuf_r+0xb8>)
   103d4:	400a      	ands	r2, r1
   103d6:	6662      	str	r2, [r4, #100]	; 0x64
   103d8:	6961      	ldr	r1, [r4, #20]
   103da:	6822      	ldr	r2, [r4, #0]
   103dc:	1ad3      	subs	r3, r2, r3
   103de:	428b      	cmp	r3, r1
   103e0:	dbe3      	blt.n	103aa <__swbuf_r+0x3e>
   103e2:	0021      	movs	r1, r4
   103e4:	0030      	movs	r0, r6
   103e6:	f7fe f8f3 	bl	e5d0 <_fflush_r>
   103ea:	2800      	cmp	r0, #0
   103ec:	d108      	bne.n	10400 <__swbuf_r+0x94>
   103ee:	6822      	ldr	r2, [r4, #0]
   103f0:	2301      	movs	r3, #1
   103f2:	e7db      	b.n	103ac <__swbuf_r+0x40>
   103f4:	0021      	movs	r1, r4
   103f6:	0030      	movs	r0, r6
   103f8:	f7fe f8ea 	bl	e5d0 <_fflush_r>
   103fc:	2800      	cmp	r0, #0
   103fe:	d0e3      	beq.n	103c8 <__swbuf_r+0x5c>
   10400:	2501      	movs	r5, #1
   10402:	426d      	negs	r5, r5
   10404:	e7e0      	b.n	103c8 <__swbuf_r+0x5c>
   10406:	0021      	movs	r1, r4
   10408:	0030      	movs	r0, r6
   1040a:	f7fc fed3 	bl	d1b4 <__swsetup_r>
   1040e:	2800      	cmp	r0, #0
   10410:	d1f6      	bne.n	10400 <__swbuf_r+0x94>
   10412:	230c      	movs	r3, #12
   10414:	5ee0      	ldrsh	r0, [r4, r3]
   10416:	6923      	ldr	r3, [r4, #16]
   10418:	b281      	uxth	r1, r0
   1041a:	e7ba      	b.n	10392 <__swbuf_r+0x26>
   1041c:	f7fe f932 	bl	e684 <__sinit>
   10420:	e7ad      	b.n	1037e <__swbuf_r+0x12>
   10422:	46c0      	nop			; (mov r8, r8)
   10424:	ffffdfff 	.word	0xffffdfff

00010428 <_wcrtomb_r>:
   10428:	b570      	push	{r4, r5, r6, lr}
   1042a:	001d      	movs	r5, r3
   1042c:	4b11      	ldr	r3, [pc, #68]	; (10474 <_wcrtomb_r+0x4c>)
   1042e:	b084      	sub	sp, #16
   10430:	681b      	ldr	r3, [r3, #0]
   10432:	0004      	movs	r4, r0
   10434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   10436:	2900      	cmp	r1, #0
   10438:	d00e      	beq.n	10458 <_wcrtomb_r+0x30>
   1043a:	2b00      	cmp	r3, #0
   1043c:	d016      	beq.n	1046c <_wcrtomb_r+0x44>
   1043e:	20e0      	movs	r0, #224	; 0xe0
   10440:	581e      	ldr	r6, [r3, r0]
   10442:	002b      	movs	r3, r5
   10444:	0020      	movs	r0, r4
   10446:	47b0      	blx	r6
   10448:	1c43      	adds	r3, r0, #1
   1044a:	d103      	bne.n	10454 <_wcrtomb_r+0x2c>
   1044c:	2300      	movs	r3, #0
   1044e:	602b      	str	r3, [r5, #0]
   10450:	338a      	adds	r3, #138	; 0x8a
   10452:	6023      	str	r3, [r4, #0]
   10454:	b004      	add	sp, #16
   10456:	bd70      	pop	{r4, r5, r6, pc}
   10458:	2b00      	cmp	r3, #0
   1045a:	d009      	beq.n	10470 <_wcrtomb_r+0x48>
   1045c:	22e0      	movs	r2, #224	; 0xe0
   1045e:	a901      	add	r1, sp, #4
   10460:	589e      	ldr	r6, [r3, r2]
   10462:	0020      	movs	r0, r4
   10464:	002b      	movs	r3, r5
   10466:	2200      	movs	r2, #0
   10468:	47b0      	blx	r6
   1046a:	e7ed      	b.n	10448 <_wcrtomb_r+0x20>
   1046c:	4b02      	ldr	r3, [pc, #8]	; (10478 <_wcrtomb_r+0x50>)
   1046e:	e7e6      	b.n	1043e <_wcrtomb_r+0x16>
   10470:	4b01      	ldr	r3, [pc, #4]	; (10478 <_wcrtomb_r+0x50>)
   10472:	e7f3      	b.n	1045c <_wcrtomb_r+0x34>
   10474:	20000080 	.word	0x20000080
   10478:	200008c4 	.word	0x200008c4

0001047c <__ascii_wctomb>:
   1047c:	2900      	cmp	r1, #0
   1047e:	d004      	beq.n	1048a <__ascii_wctomb+0xe>
   10480:	2aff      	cmp	r2, #255	; 0xff
   10482:	d804      	bhi.n	1048e <__ascii_wctomb+0x12>
   10484:	2001      	movs	r0, #1
   10486:	700a      	strb	r2, [r1, #0]
   10488:	4770      	bx	lr
   1048a:	2000      	movs	r0, #0
   1048c:	e7fc      	b.n	10488 <__ascii_wctomb+0xc>
   1048e:	238a      	movs	r3, #138	; 0x8a
   10490:	6003      	str	r3, [r0, #0]
   10492:	2001      	movs	r0, #1
   10494:	4240      	negs	r0, r0
   10496:	e7f7      	b.n	10488 <__ascii_wctomb+0xc>

00010498 <__aeabi_dadd>:
   10498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1049a:	4645      	mov	r5, r8
   1049c:	46de      	mov	lr, fp
   1049e:	4657      	mov	r7, sl
   104a0:	464e      	mov	r6, r9
   104a2:	030c      	lsls	r4, r1, #12
   104a4:	b5e0      	push	{r5, r6, r7, lr}
   104a6:	004e      	lsls	r6, r1, #1
   104a8:	0fc9      	lsrs	r1, r1, #31
   104aa:	4688      	mov	r8, r1
   104ac:	000d      	movs	r5, r1
   104ae:	0a61      	lsrs	r1, r4, #9
   104b0:	0f44      	lsrs	r4, r0, #29
   104b2:	430c      	orrs	r4, r1
   104b4:	00c7      	lsls	r7, r0, #3
   104b6:	0319      	lsls	r1, r3, #12
   104b8:	0058      	lsls	r0, r3, #1
   104ba:	0fdb      	lsrs	r3, r3, #31
   104bc:	469b      	mov	fp, r3
   104be:	0a4b      	lsrs	r3, r1, #9
   104c0:	0f51      	lsrs	r1, r2, #29
   104c2:	430b      	orrs	r3, r1
   104c4:	0d76      	lsrs	r6, r6, #21
   104c6:	0d40      	lsrs	r0, r0, #21
   104c8:	0019      	movs	r1, r3
   104ca:	00d2      	lsls	r2, r2, #3
   104cc:	45d8      	cmp	r8, fp
   104ce:	d100      	bne.n	104d2 <__aeabi_dadd+0x3a>
   104d0:	e0ae      	b.n	10630 <__aeabi_dadd+0x198>
   104d2:	1a35      	subs	r5, r6, r0
   104d4:	2d00      	cmp	r5, #0
   104d6:	dc00      	bgt.n	104da <__aeabi_dadd+0x42>
   104d8:	e0f6      	b.n	106c8 <__aeabi_dadd+0x230>
   104da:	2800      	cmp	r0, #0
   104dc:	d10f      	bne.n	104fe <__aeabi_dadd+0x66>
   104de:	4313      	orrs	r3, r2
   104e0:	d100      	bne.n	104e4 <__aeabi_dadd+0x4c>
   104e2:	e0db      	b.n	1069c <__aeabi_dadd+0x204>
   104e4:	1e6b      	subs	r3, r5, #1
   104e6:	2b00      	cmp	r3, #0
   104e8:	d000      	beq.n	104ec <__aeabi_dadd+0x54>
   104ea:	e137      	b.n	1075c <__aeabi_dadd+0x2c4>
   104ec:	1aba      	subs	r2, r7, r2
   104ee:	4297      	cmp	r7, r2
   104f0:	41bf      	sbcs	r7, r7
   104f2:	1a64      	subs	r4, r4, r1
   104f4:	427f      	negs	r7, r7
   104f6:	1be4      	subs	r4, r4, r7
   104f8:	2601      	movs	r6, #1
   104fa:	0017      	movs	r7, r2
   104fc:	e024      	b.n	10548 <__aeabi_dadd+0xb0>
   104fe:	4bc6      	ldr	r3, [pc, #792]	; (10818 <__aeabi_dadd+0x380>)
   10500:	429e      	cmp	r6, r3
   10502:	d04d      	beq.n	105a0 <__aeabi_dadd+0x108>
   10504:	2380      	movs	r3, #128	; 0x80
   10506:	041b      	lsls	r3, r3, #16
   10508:	4319      	orrs	r1, r3
   1050a:	2d38      	cmp	r5, #56	; 0x38
   1050c:	dd00      	ble.n	10510 <__aeabi_dadd+0x78>
   1050e:	e107      	b.n	10720 <__aeabi_dadd+0x288>
   10510:	2d1f      	cmp	r5, #31
   10512:	dd00      	ble.n	10516 <__aeabi_dadd+0x7e>
   10514:	e138      	b.n	10788 <__aeabi_dadd+0x2f0>
   10516:	2020      	movs	r0, #32
   10518:	1b43      	subs	r3, r0, r5
   1051a:	469a      	mov	sl, r3
   1051c:	000b      	movs	r3, r1
   1051e:	4650      	mov	r0, sl
   10520:	4083      	lsls	r3, r0
   10522:	4699      	mov	r9, r3
   10524:	0013      	movs	r3, r2
   10526:	4648      	mov	r0, r9
   10528:	40eb      	lsrs	r3, r5
   1052a:	4318      	orrs	r0, r3
   1052c:	0003      	movs	r3, r0
   1052e:	4650      	mov	r0, sl
   10530:	4082      	lsls	r2, r0
   10532:	1e50      	subs	r0, r2, #1
   10534:	4182      	sbcs	r2, r0
   10536:	40e9      	lsrs	r1, r5
   10538:	431a      	orrs	r2, r3
   1053a:	1aba      	subs	r2, r7, r2
   1053c:	1a61      	subs	r1, r4, r1
   1053e:	4297      	cmp	r7, r2
   10540:	41a4      	sbcs	r4, r4
   10542:	0017      	movs	r7, r2
   10544:	4264      	negs	r4, r4
   10546:	1b0c      	subs	r4, r1, r4
   10548:	0223      	lsls	r3, r4, #8
   1054a:	d562      	bpl.n	10612 <__aeabi_dadd+0x17a>
   1054c:	0264      	lsls	r4, r4, #9
   1054e:	0a65      	lsrs	r5, r4, #9
   10550:	2d00      	cmp	r5, #0
   10552:	d100      	bne.n	10556 <__aeabi_dadd+0xbe>
   10554:	e0df      	b.n	10716 <__aeabi_dadd+0x27e>
   10556:	0028      	movs	r0, r5
   10558:	f7fa ff7c 	bl	b454 <__clzsi2>
   1055c:	0003      	movs	r3, r0
   1055e:	3b08      	subs	r3, #8
   10560:	2b1f      	cmp	r3, #31
   10562:	dd00      	ble.n	10566 <__aeabi_dadd+0xce>
   10564:	e0d2      	b.n	1070c <__aeabi_dadd+0x274>
   10566:	2220      	movs	r2, #32
   10568:	003c      	movs	r4, r7
   1056a:	1ad2      	subs	r2, r2, r3
   1056c:	409d      	lsls	r5, r3
   1056e:	40d4      	lsrs	r4, r2
   10570:	409f      	lsls	r7, r3
   10572:	4325      	orrs	r5, r4
   10574:	429e      	cmp	r6, r3
   10576:	dd00      	ble.n	1057a <__aeabi_dadd+0xe2>
   10578:	e0c4      	b.n	10704 <__aeabi_dadd+0x26c>
   1057a:	1b9e      	subs	r6, r3, r6
   1057c:	1c73      	adds	r3, r6, #1
   1057e:	2b1f      	cmp	r3, #31
   10580:	dd00      	ble.n	10584 <__aeabi_dadd+0xec>
   10582:	e0f1      	b.n	10768 <__aeabi_dadd+0x2d0>
   10584:	2220      	movs	r2, #32
   10586:	0038      	movs	r0, r7
   10588:	0029      	movs	r1, r5
   1058a:	1ad2      	subs	r2, r2, r3
   1058c:	40d8      	lsrs	r0, r3
   1058e:	4091      	lsls	r1, r2
   10590:	4097      	lsls	r7, r2
   10592:	002c      	movs	r4, r5
   10594:	4301      	orrs	r1, r0
   10596:	1e78      	subs	r0, r7, #1
   10598:	4187      	sbcs	r7, r0
   1059a:	40dc      	lsrs	r4, r3
   1059c:	2600      	movs	r6, #0
   1059e:	430f      	orrs	r7, r1
   105a0:	077b      	lsls	r3, r7, #29
   105a2:	d009      	beq.n	105b8 <__aeabi_dadd+0x120>
   105a4:	230f      	movs	r3, #15
   105a6:	403b      	ands	r3, r7
   105a8:	2b04      	cmp	r3, #4
   105aa:	d005      	beq.n	105b8 <__aeabi_dadd+0x120>
   105ac:	1d3b      	adds	r3, r7, #4
   105ae:	42bb      	cmp	r3, r7
   105b0:	41bf      	sbcs	r7, r7
   105b2:	427f      	negs	r7, r7
   105b4:	19e4      	adds	r4, r4, r7
   105b6:	001f      	movs	r7, r3
   105b8:	0223      	lsls	r3, r4, #8
   105ba:	d52c      	bpl.n	10616 <__aeabi_dadd+0x17e>
   105bc:	4b96      	ldr	r3, [pc, #600]	; (10818 <__aeabi_dadd+0x380>)
   105be:	3601      	adds	r6, #1
   105c0:	429e      	cmp	r6, r3
   105c2:	d100      	bne.n	105c6 <__aeabi_dadd+0x12e>
   105c4:	e09a      	b.n	106fc <__aeabi_dadd+0x264>
   105c6:	4645      	mov	r5, r8
   105c8:	4b94      	ldr	r3, [pc, #592]	; (1081c <__aeabi_dadd+0x384>)
   105ca:	08ff      	lsrs	r7, r7, #3
   105cc:	401c      	ands	r4, r3
   105ce:	0760      	lsls	r0, r4, #29
   105d0:	0576      	lsls	r6, r6, #21
   105d2:	0264      	lsls	r4, r4, #9
   105d4:	4307      	orrs	r7, r0
   105d6:	0b24      	lsrs	r4, r4, #12
   105d8:	0d76      	lsrs	r6, r6, #21
   105da:	2100      	movs	r1, #0
   105dc:	0324      	lsls	r4, r4, #12
   105de:	0b23      	lsrs	r3, r4, #12
   105e0:	0d0c      	lsrs	r4, r1, #20
   105e2:	4a8f      	ldr	r2, [pc, #572]	; (10820 <__aeabi_dadd+0x388>)
   105e4:	0524      	lsls	r4, r4, #20
   105e6:	431c      	orrs	r4, r3
   105e8:	4014      	ands	r4, r2
   105ea:	0533      	lsls	r3, r6, #20
   105ec:	4323      	orrs	r3, r4
   105ee:	005b      	lsls	r3, r3, #1
   105f0:	07ed      	lsls	r5, r5, #31
   105f2:	085b      	lsrs	r3, r3, #1
   105f4:	432b      	orrs	r3, r5
   105f6:	0038      	movs	r0, r7
   105f8:	0019      	movs	r1, r3
   105fa:	bc3c      	pop	{r2, r3, r4, r5}
   105fc:	4690      	mov	r8, r2
   105fe:	4699      	mov	r9, r3
   10600:	46a2      	mov	sl, r4
   10602:	46ab      	mov	fp, r5
   10604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10606:	4664      	mov	r4, ip
   10608:	4304      	orrs	r4, r0
   1060a:	d100      	bne.n	1060e <__aeabi_dadd+0x176>
   1060c:	e211      	b.n	10a32 <__aeabi_dadd+0x59a>
   1060e:	0004      	movs	r4, r0
   10610:	4667      	mov	r7, ip
   10612:	077b      	lsls	r3, r7, #29
   10614:	d1c6      	bne.n	105a4 <__aeabi_dadd+0x10c>
   10616:	4645      	mov	r5, r8
   10618:	0760      	lsls	r0, r4, #29
   1061a:	08ff      	lsrs	r7, r7, #3
   1061c:	4307      	orrs	r7, r0
   1061e:	08e4      	lsrs	r4, r4, #3
   10620:	4b7d      	ldr	r3, [pc, #500]	; (10818 <__aeabi_dadd+0x380>)
   10622:	429e      	cmp	r6, r3
   10624:	d030      	beq.n	10688 <__aeabi_dadd+0x1f0>
   10626:	0324      	lsls	r4, r4, #12
   10628:	0576      	lsls	r6, r6, #21
   1062a:	0b24      	lsrs	r4, r4, #12
   1062c:	0d76      	lsrs	r6, r6, #21
   1062e:	e7d4      	b.n	105da <__aeabi_dadd+0x142>
   10630:	1a33      	subs	r3, r6, r0
   10632:	469a      	mov	sl, r3
   10634:	2b00      	cmp	r3, #0
   10636:	dd78      	ble.n	1072a <__aeabi_dadd+0x292>
   10638:	2800      	cmp	r0, #0
   1063a:	d031      	beq.n	106a0 <__aeabi_dadd+0x208>
   1063c:	4876      	ldr	r0, [pc, #472]	; (10818 <__aeabi_dadd+0x380>)
   1063e:	4286      	cmp	r6, r0
   10640:	d0ae      	beq.n	105a0 <__aeabi_dadd+0x108>
   10642:	2080      	movs	r0, #128	; 0x80
   10644:	0400      	lsls	r0, r0, #16
   10646:	4301      	orrs	r1, r0
   10648:	4653      	mov	r3, sl
   1064a:	2b38      	cmp	r3, #56	; 0x38
   1064c:	dc00      	bgt.n	10650 <__aeabi_dadd+0x1b8>
   1064e:	e0e9      	b.n	10824 <__aeabi_dadd+0x38c>
   10650:	430a      	orrs	r2, r1
   10652:	1e51      	subs	r1, r2, #1
   10654:	418a      	sbcs	r2, r1
   10656:	2100      	movs	r1, #0
   10658:	19d2      	adds	r2, r2, r7
   1065a:	42ba      	cmp	r2, r7
   1065c:	41bf      	sbcs	r7, r7
   1065e:	1909      	adds	r1, r1, r4
   10660:	427c      	negs	r4, r7
   10662:	0017      	movs	r7, r2
   10664:	190c      	adds	r4, r1, r4
   10666:	0223      	lsls	r3, r4, #8
   10668:	d5d3      	bpl.n	10612 <__aeabi_dadd+0x17a>
   1066a:	4b6b      	ldr	r3, [pc, #428]	; (10818 <__aeabi_dadd+0x380>)
   1066c:	3601      	adds	r6, #1
   1066e:	429e      	cmp	r6, r3
   10670:	d100      	bne.n	10674 <__aeabi_dadd+0x1dc>
   10672:	e13a      	b.n	108ea <__aeabi_dadd+0x452>
   10674:	2001      	movs	r0, #1
   10676:	4b69      	ldr	r3, [pc, #420]	; (1081c <__aeabi_dadd+0x384>)
   10678:	401c      	ands	r4, r3
   1067a:	087b      	lsrs	r3, r7, #1
   1067c:	4007      	ands	r7, r0
   1067e:	431f      	orrs	r7, r3
   10680:	07e0      	lsls	r0, r4, #31
   10682:	4307      	orrs	r7, r0
   10684:	0864      	lsrs	r4, r4, #1
   10686:	e78b      	b.n	105a0 <__aeabi_dadd+0x108>
   10688:	0023      	movs	r3, r4
   1068a:	433b      	orrs	r3, r7
   1068c:	d100      	bne.n	10690 <__aeabi_dadd+0x1f8>
   1068e:	e1cb      	b.n	10a28 <__aeabi_dadd+0x590>
   10690:	2280      	movs	r2, #128	; 0x80
   10692:	0312      	lsls	r2, r2, #12
   10694:	4314      	orrs	r4, r2
   10696:	0324      	lsls	r4, r4, #12
   10698:	0b24      	lsrs	r4, r4, #12
   1069a:	e79e      	b.n	105da <__aeabi_dadd+0x142>
   1069c:	002e      	movs	r6, r5
   1069e:	e77f      	b.n	105a0 <__aeabi_dadd+0x108>
   106a0:	0008      	movs	r0, r1
   106a2:	4310      	orrs	r0, r2
   106a4:	d100      	bne.n	106a8 <__aeabi_dadd+0x210>
   106a6:	e0b4      	b.n	10812 <__aeabi_dadd+0x37a>
   106a8:	1e58      	subs	r0, r3, #1
   106aa:	2800      	cmp	r0, #0
   106ac:	d000      	beq.n	106b0 <__aeabi_dadd+0x218>
   106ae:	e0de      	b.n	1086e <__aeabi_dadd+0x3d6>
   106b0:	18ba      	adds	r2, r7, r2
   106b2:	42ba      	cmp	r2, r7
   106b4:	419b      	sbcs	r3, r3
   106b6:	1864      	adds	r4, r4, r1
   106b8:	425b      	negs	r3, r3
   106ba:	18e4      	adds	r4, r4, r3
   106bc:	0017      	movs	r7, r2
   106be:	2601      	movs	r6, #1
   106c0:	0223      	lsls	r3, r4, #8
   106c2:	d5a6      	bpl.n	10612 <__aeabi_dadd+0x17a>
   106c4:	2602      	movs	r6, #2
   106c6:	e7d5      	b.n	10674 <__aeabi_dadd+0x1dc>
   106c8:	2d00      	cmp	r5, #0
   106ca:	d16e      	bne.n	107aa <__aeabi_dadd+0x312>
   106cc:	1c70      	adds	r0, r6, #1
   106ce:	0540      	lsls	r0, r0, #21
   106d0:	0d40      	lsrs	r0, r0, #21
   106d2:	2801      	cmp	r0, #1
   106d4:	dc00      	bgt.n	106d8 <__aeabi_dadd+0x240>
   106d6:	e0f9      	b.n	108cc <__aeabi_dadd+0x434>
   106d8:	1ab8      	subs	r0, r7, r2
   106da:	4684      	mov	ip, r0
   106dc:	4287      	cmp	r7, r0
   106de:	4180      	sbcs	r0, r0
   106e0:	1ae5      	subs	r5, r4, r3
   106e2:	4240      	negs	r0, r0
   106e4:	1a2d      	subs	r5, r5, r0
   106e6:	0228      	lsls	r0, r5, #8
   106e8:	d400      	bmi.n	106ec <__aeabi_dadd+0x254>
   106ea:	e089      	b.n	10800 <__aeabi_dadd+0x368>
   106ec:	1bd7      	subs	r7, r2, r7
   106ee:	42ba      	cmp	r2, r7
   106f0:	4192      	sbcs	r2, r2
   106f2:	1b1c      	subs	r4, r3, r4
   106f4:	4252      	negs	r2, r2
   106f6:	1aa5      	subs	r5, r4, r2
   106f8:	46d8      	mov	r8, fp
   106fa:	e729      	b.n	10550 <__aeabi_dadd+0xb8>
   106fc:	4645      	mov	r5, r8
   106fe:	2400      	movs	r4, #0
   10700:	2700      	movs	r7, #0
   10702:	e76a      	b.n	105da <__aeabi_dadd+0x142>
   10704:	4c45      	ldr	r4, [pc, #276]	; (1081c <__aeabi_dadd+0x384>)
   10706:	1af6      	subs	r6, r6, r3
   10708:	402c      	ands	r4, r5
   1070a:	e749      	b.n	105a0 <__aeabi_dadd+0x108>
   1070c:	003d      	movs	r5, r7
   1070e:	3828      	subs	r0, #40	; 0x28
   10710:	4085      	lsls	r5, r0
   10712:	2700      	movs	r7, #0
   10714:	e72e      	b.n	10574 <__aeabi_dadd+0xdc>
   10716:	0038      	movs	r0, r7
   10718:	f7fa fe9c 	bl	b454 <__clzsi2>
   1071c:	3020      	adds	r0, #32
   1071e:	e71d      	b.n	1055c <__aeabi_dadd+0xc4>
   10720:	430a      	orrs	r2, r1
   10722:	1e51      	subs	r1, r2, #1
   10724:	418a      	sbcs	r2, r1
   10726:	2100      	movs	r1, #0
   10728:	e707      	b.n	1053a <__aeabi_dadd+0xa2>
   1072a:	2b00      	cmp	r3, #0
   1072c:	d000      	beq.n	10730 <__aeabi_dadd+0x298>
   1072e:	e0f3      	b.n	10918 <__aeabi_dadd+0x480>
   10730:	1c70      	adds	r0, r6, #1
   10732:	0543      	lsls	r3, r0, #21
   10734:	0d5b      	lsrs	r3, r3, #21
   10736:	2b01      	cmp	r3, #1
   10738:	dc00      	bgt.n	1073c <__aeabi_dadd+0x2a4>
   1073a:	e0ad      	b.n	10898 <__aeabi_dadd+0x400>
   1073c:	4b36      	ldr	r3, [pc, #216]	; (10818 <__aeabi_dadd+0x380>)
   1073e:	4298      	cmp	r0, r3
   10740:	d100      	bne.n	10744 <__aeabi_dadd+0x2ac>
   10742:	e0d1      	b.n	108e8 <__aeabi_dadd+0x450>
   10744:	18ba      	adds	r2, r7, r2
   10746:	42ba      	cmp	r2, r7
   10748:	41bf      	sbcs	r7, r7
   1074a:	1864      	adds	r4, r4, r1
   1074c:	427f      	negs	r7, r7
   1074e:	19e4      	adds	r4, r4, r7
   10750:	07e7      	lsls	r7, r4, #31
   10752:	0852      	lsrs	r2, r2, #1
   10754:	4317      	orrs	r7, r2
   10756:	0864      	lsrs	r4, r4, #1
   10758:	0006      	movs	r6, r0
   1075a:	e721      	b.n	105a0 <__aeabi_dadd+0x108>
   1075c:	482e      	ldr	r0, [pc, #184]	; (10818 <__aeabi_dadd+0x380>)
   1075e:	4285      	cmp	r5, r0
   10760:	d100      	bne.n	10764 <__aeabi_dadd+0x2cc>
   10762:	e093      	b.n	1088c <__aeabi_dadd+0x3f4>
   10764:	001d      	movs	r5, r3
   10766:	e6d0      	b.n	1050a <__aeabi_dadd+0x72>
   10768:	0029      	movs	r1, r5
   1076a:	3e1f      	subs	r6, #31
   1076c:	40f1      	lsrs	r1, r6
   1076e:	2b20      	cmp	r3, #32
   10770:	d100      	bne.n	10774 <__aeabi_dadd+0x2dc>
   10772:	e08d      	b.n	10890 <__aeabi_dadd+0x3f8>
   10774:	2240      	movs	r2, #64	; 0x40
   10776:	1ad3      	subs	r3, r2, r3
   10778:	409d      	lsls	r5, r3
   1077a:	432f      	orrs	r7, r5
   1077c:	1e7d      	subs	r5, r7, #1
   1077e:	41af      	sbcs	r7, r5
   10780:	2400      	movs	r4, #0
   10782:	430f      	orrs	r7, r1
   10784:	2600      	movs	r6, #0
   10786:	e744      	b.n	10612 <__aeabi_dadd+0x17a>
   10788:	002b      	movs	r3, r5
   1078a:	0008      	movs	r0, r1
   1078c:	3b20      	subs	r3, #32
   1078e:	40d8      	lsrs	r0, r3
   10790:	0003      	movs	r3, r0
   10792:	2d20      	cmp	r5, #32
   10794:	d100      	bne.n	10798 <__aeabi_dadd+0x300>
   10796:	e07d      	b.n	10894 <__aeabi_dadd+0x3fc>
   10798:	2040      	movs	r0, #64	; 0x40
   1079a:	1b45      	subs	r5, r0, r5
   1079c:	40a9      	lsls	r1, r5
   1079e:	430a      	orrs	r2, r1
   107a0:	1e51      	subs	r1, r2, #1
   107a2:	418a      	sbcs	r2, r1
   107a4:	2100      	movs	r1, #0
   107a6:	431a      	orrs	r2, r3
   107a8:	e6c7      	b.n	1053a <__aeabi_dadd+0xa2>
   107aa:	2e00      	cmp	r6, #0
   107ac:	d050      	beq.n	10850 <__aeabi_dadd+0x3b8>
   107ae:	4e1a      	ldr	r6, [pc, #104]	; (10818 <__aeabi_dadd+0x380>)
   107b0:	42b0      	cmp	r0, r6
   107b2:	d057      	beq.n	10864 <__aeabi_dadd+0x3cc>
   107b4:	2680      	movs	r6, #128	; 0x80
   107b6:	426b      	negs	r3, r5
   107b8:	4699      	mov	r9, r3
   107ba:	0436      	lsls	r6, r6, #16
   107bc:	4334      	orrs	r4, r6
   107be:	464b      	mov	r3, r9
   107c0:	2b38      	cmp	r3, #56	; 0x38
   107c2:	dd00      	ble.n	107c6 <__aeabi_dadd+0x32e>
   107c4:	e0d6      	b.n	10974 <__aeabi_dadd+0x4dc>
   107c6:	2b1f      	cmp	r3, #31
   107c8:	dd00      	ble.n	107cc <__aeabi_dadd+0x334>
   107ca:	e135      	b.n	10a38 <__aeabi_dadd+0x5a0>
   107cc:	2620      	movs	r6, #32
   107ce:	1af5      	subs	r5, r6, r3
   107d0:	0026      	movs	r6, r4
   107d2:	40ae      	lsls	r6, r5
   107d4:	46b2      	mov	sl, r6
   107d6:	003e      	movs	r6, r7
   107d8:	40de      	lsrs	r6, r3
   107da:	46ac      	mov	ip, r5
   107dc:	0035      	movs	r5, r6
   107de:	4656      	mov	r6, sl
   107e0:	432e      	orrs	r6, r5
   107e2:	4665      	mov	r5, ip
   107e4:	40af      	lsls	r7, r5
   107e6:	1e7d      	subs	r5, r7, #1
   107e8:	41af      	sbcs	r7, r5
   107ea:	40dc      	lsrs	r4, r3
   107ec:	4337      	orrs	r7, r6
   107ee:	1bd7      	subs	r7, r2, r7
   107f0:	42ba      	cmp	r2, r7
   107f2:	4192      	sbcs	r2, r2
   107f4:	1b0c      	subs	r4, r1, r4
   107f6:	4252      	negs	r2, r2
   107f8:	1aa4      	subs	r4, r4, r2
   107fa:	0006      	movs	r6, r0
   107fc:	46d8      	mov	r8, fp
   107fe:	e6a3      	b.n	10548 <__aeabi_dadd+0xb0>
   10800:	4664      	mov	r4, ip
   10802:	4667      	mov	r7, ip
   10804:	432c      	orrs	r4, r5
   10806:	d000      	beq.n	1080a <__aeabi_dadd+0x372>
   10808:	e6a2      	b.n	10550 <__aeabi_dadd+0xb8>
   1080a:	2500      	movs	r5, #0
   1080c:	2600      	movs	r6, #0
   1080e:	2700      	movs	r7, #0
   10810:	e706      	b.n	10620 <__aeabi_dadd+0x188>
   10812:	001e      	movs	r6, r3
   10814:	e6c4      	b.n	105a0 <__aeabi_dadd+0x108>
   10816:	46c0      	nop			; (mov r8, r8)
   10818:	000007ff 	.word	0x000007ff
   1081c:	ff7fffff 	.word	0xff7fffff
   10820:	800fffff 	.word	0x800fffff
   10824:	2b1f      	cmp	r3, #31
   10826:	dc63      	bgt.n	108f0 <__aeabi_dadd+0x458>
   10828:	2020      	movs	r0, #32
   1082a:	1ac3      	subs	r3, r0, r3
   1082c:	0008      	movs	r0, r1
   1082e:	4098      	lsls	r0, r3
   10830:	469c      	mov	ip, r3
   10832:	4683      	mov	fp, r0
   10834:	4653      	mov	r3, sl
   10836:	0010      	movs	r0, r2
   10838:	40d8      	lsrs	r0, r3
   1083a:	0003      	movs	r3, r0
   1083c:	4658      	mov	r0, fp
   1083e:	4318      	orrs	r0, r3
   10840:	4663      	mov	r3, ip
   10842:	409a      	lsls	r2, r3
   10844:	1e53      	subs	r3, r2, #1
   10846:	419a      	sbcs	r2, r3
   10848:	4653      	mov	r3, sl
   1084a:	4302      	orrs	r2, r0
   1084c:	40d9      	lsrs	r1, r3
   1084e:	e703      	b.n	10658 <__aeabi_dadd+0x1c0>
   10850:	0026      	movs	r6, r4
   10852:	433e      	orrs	r6, r7
   10854:	d006      	beq.n	10864 <__aeabi_dadd+0x3cc>
   10856:	43eb      	mvns	r3, r5
   10858:	4699      	mov	r9, r3
   1085a:	2b00      	cmp	r3, #0
   1085c:	d0c7      	beq.n	107ee <__aeabi_dadd+0x356>
   1085e:	4e94      	ldr	r6, [pc, #592]	; (10ab0 <__aeabi_dadd+0x618>)
   10860:	42b0      	cmp	r0, r6
   10862:	d1ac      	bne.n	107be <__aeabi_dadd+0x326>
   10864:	000c      	movs	r4, r1
   10866:	0017      	movs	r7, r2
   10868:	0006      	movs	r6, r0
   1086a:	46d8      	mov	r8, fp
   1086c:	e698      	b.n	105a0 <__aeabi_dadd+0x108>
   1086e:	4b90      	ldr	r3, [pc, #576]	; (10ab0 <__aeabi_dadd+0x618>)
   10870:	459a      	cmp	sl, r3
   10872:	d00b      	beq.n	1088c <__aeabi_dadd+0x3f4>
   10874:	4682      	mov	sl, r0
   10876:	e6e7      	b.n	10648 <__aeabi_dadd+0x1b0>
   10878:	2800      	cmp	r0, #0
   1087a:	d000      	beq.n	1087e <__aeabi_dadd+0x3e6>
   1087c:	e09e      	b.n	109bc <__aeabi_dadd+0x524>
   1087e:	0018      	movs	r0, r3
   10880:	4310      	orrs	r0, r2
   10882:	d100      	bne.n	10886 <__aeabi_dadd+0x3ee>
   10884:	e0e9      	b.n	10a5a <__aeabi_dadd+0x5c2>
   10886:	001c      	movs	r4, r3
   10888:	0017      	movs	r7, r2
   1088a:	46d8      	mov	r8, fp
   1088c:	4e88      	ldr	r6, [pc, #544]	; (10ab0 <__aeabi_dadd+0x618>)
   1088e:	e687      	b.n	105a0 <__aeabi_dadd+0x108>
   10890:	2500      	movs	r5, #0
   10892:	e772      	b.n	1077a <__aeabi_dadd+0x2e2>
   10894:	2100      	movs	r1, #0
   10896:	e782      	b.n	1079e <__aeabi_dadd+0x306>
   10898:	0023      	movs	r3, r4
   1089a:	433b      	orrs	r3, r7
   1089c:	2e00      	cmp	r6, #0
   1089e:	d000      	beq.n	108a2 <__aeabi_dadd+0x40a>
   108a0:	e0ab      	b.n	109fa <__aeabi_dadd+0x562>
   108a2:	2b00      	cmp	r3, #0
   108a4:	d100      	bne.n	108a8 <__aeabi_dadd+0x410>
   108a6:	e0e7      	b.n	10a78 <__aeabi_dadd+0x5e0>
   108a8:	000b      	movs	r3, r1
   108aa:	4313      	orrs	r3, r2
   108ac:	d100      	bne.n	108b0 <__aeabi_dadd+0x418>
   108ae:	e677      	b.n	105a0 <__aeabi_dadd+0x108>
   108b0:	18ba      	adds	r2, r7, r2
   108b2:	42ba      	cmp	r2, r7
   108b4:	41bf      	sbcs	r7, r7
   108b6:	1864      	adds	r4, r4, r1
   108b8:	427f      	negs	r7, r7
   108ba:	19e4      	adds	r4, r4, r7
   108bc:	0223      	lsls	r3, r4, #8
   108be:	d400      	bmi.n	108c2 <__aeabi_dadd+0x42a>
   108c0:	e0f2      	b.n	10aa8 <__aeabi_dadd+0x610>
   108c2:	4b7c      	ldr	r3, [pc, #496]	; (10ab4 <__aeabi_dadd+0x61c>)
   108c4:	0017      	movs	r7, r2
   108c6:	401c      	ands	r4, r3
   108c8:	0006      	movs	r6, r0
   108ca:	e669      	b.n	105a0 <__aeabi_dadd+0x108>
   108cc:	0020      	movs	r0, r4
   108ce:	4338      	orrs	r0, r7
   108d0:	2e00      	cmp	r6, #0
   108d2:	d1d1      	bne.n	10878 <__aeabi_dadd+0x3e0>
   108d4:	2800      	cmp	r0, #0
   108d6:	d15b      	bne.n	10990 <__aeabi_dadd+0x4f8>
   108d8:	001c      	movs	r4, r3
   108da:	4314      	orrs	r4, r2
   108dc:	d100      	bne.n	108e0 <__aeabi_dadd+0x448>
   108de:	e0a8      	b.n	10a32 <__aeabi_dadd+0x59a>
   108e0:	001c      	movs	r4, r3
   108e2:	0017      	movs	r7, r2
   108e4:	46d8      	mov	r8, fp
   108e6:	e65b      	b.n	105a0 <__aeabi_dadd+0x108>
   108e8:	0006      	movs	r6, r0
   108ea:	2400      	movs	r4, #0
   108ec:	2700      	movs	r7, #0
   108ee:	e697      	b.n	10620 <__aeabi_dadd+0x188>
   108f0:	4650      	mov	r0, sl
   108f2:	000b      	movs	r3, r1
   108f4:	3820      	subs	r0, #32
   108f6:	40c3      	lsrs	r3, r0
   108f8:	4699      	mov	r9, r3
   108fa:	4653      	mov	r3, sl
   108fc:	2b20      	cmp	r3, #32
   108fe:	d100      	bne.n	10902 <__aeabi_dadd+0x46a>
   10900:	e095      	b.n	10a2e <__aeabi_dadd+0x596>
   10902:	2340      	movs	r3, #64	; 0x40
   10904:	4650      	mov	r0, sl
   10906:	1a1b      	subs	r3, r3, r0
   10908:	4099      	lsls	r1, r3
   1090a:	430a      	orrs	r2, r1
   1090c:	1e51      	subs	r1, r2, #1
   1090e:	418a      	sbcs	r2, r1
   10910:	464b      	mov	r3, r9
   10912:	2100      	movs	r1, #0
   10914:	431a      	orrs	r2, r3
   10916:	e69f      	b.n	10658 <__aeabi_dadd+0x1c0>
   10918:	2e00      	cmp	r6, #0
   1091a:	d130      	bne.n	1097e <__aeabi_dadd+0x4e6>
   1091c:	0026      	movs	r6, r4
   1091e:	433e      	orrs	r6, r7
   10920:	d067      	beq.n	109f2 <__aeabi_dadd+0x55a>
   10922:	43db      	mvns	r3, r3
   10924:	469a      	mov	sl, r3
   10926:	2b00      	cmp	r3, #0
   10928:	d01c      	beq.n	10964 <__aeabi_dadd+0x4cc>
   1092a:	4e61      	ldr	r6, [pc, #388]	; (10ab0 <__aeabi_dadd+0x618>)
   1092c:	42b0      	cmp	r0, r6
   1092e:	d060      	beq.n	109f2 <__aeabi_dadd+0x55a>
   10930:	4653      	mov	r3, sl
   10932:	2b38      	cmp	r3, #56	; 0x38
   10934:	dd00      	ble.n	10938 <__aeabi_dadd+0x4a0>
   10936:	e096      	b.n	10a66 <__aeabi_dadd+0x5ce>
   10938:	2b1f      	cmp	r3, #31
   1093a:	dd00      	ble.n	1093e <__aeabi_dadd+0x4a6>
   1093c:	e09f      	b.n	10a7e <__aeabi_dadd+0x5e6>
   1093e:	2620      	movs	r6, #32
   10940:	1af3      	subs	r3, r6, r3
   10942:	0026      	movs	r6, r4
   10944:	409e      	lsls	r6, r3
   10946:	469c      	mov	ip, r3
   10948:	46b3      	mov	fp, r6
   1094a:	4653      	mov	r3, sl
   1094c:	003e      	movs	r6, r7
   1094e:	40de      	lsrs	r6, r3
   10950:	0033      	movs	r3, r6
   10952:	465e      	mov	r6, fp
   10954:	431e      	orrs	r6, r3
   10956:	4663      	mov	r3, ip
   10958:	409f      	lsls	r7, r3
   1095a:	1e7b      	subs	r3, r7, #1
   1095c:	419f      	sbcs	r7, r3
   1095e:	4653      	mov	r3, sl
   10960:	40dc      	lsrs	r4, r3
   10962:	4337      	orrs	r7, r6
   10964:	18bf      	adds	r7, r7, r2
   10966:	4297      	cmp	r7, r2
   10968:	4192      	sbcs	r2, r2
   1096a:	1864      	adds	r4, r4, r1
   1096c:	4252      	negs	r2, r2
   1096e:	18a4      	adds	r4, r4, r2
   10970:	0006      	movs	r6, r0
   10972:	e678      	b.n	10666 <__aeabi_dadd+0x1ce>
   10974:	4327      	orrs	r7, r4
   10976:	1e7c      	subs	r4, r7, #1
   10978:	41a7      	sbcs	r7, r4
   1097a:	2400      	movs	r4, #0
   1097c:	e737      	b.n	107ee <__aeabi_dadd+0x356>
   1097e:	4e4c      	ldr	r6, [pc, #304]	; (10ab0 <__aeabi_dadd+0x618>)
   10980:	42b0      	cmp	r0, r6
   10982:	d036      	beq.n	109f2 <__aeabi_dadd+0x55a>
   10984:	2680      	movs	r6, #128	; 0x80
   10986:	425b      	negs	r3, r3
   10988:	0436      	lsls	r6, r6, #16
   1098a:	469a      	mov	sl, r3
   1098c:	4334      	orrs	r4, r6
   1098e:	e7cf      	b.n	10930 <__aeabi_dadd+0x498>
   10990:	0018      	movs	r0, r3
   10992:	4310      	orrs	r0, r2
   10994:	d100      	bne.n	10998 <__aeabi_dadd+0x500>
   10996:	e603      	b.n	105a0 <__aeabi_dadd+0x108>
   10998:	1ab8      	subs	r0, r7, r2
   1099a:	4684      	mov	ip, r0
   1099c:	4567      	cmp	r7, ip
   1099e:	41ad      	sbcs	r5, r5
   109a0:	1ae0      	subs	r0, r4, r3
   109a2:	426d      	negs	r5, r5
   109a4:	1b40      	subs	r0, r0, r5
   109a6:	0205      	lsls	r5, r0, #8
   109a8:	d400      	bmi.n	109ac <__aeabi_dadd+0x514>
   109aa:	e62c      	b.n	10606 <__aeabi_dadd+0x16e>
   109ac:	1bd7      	subs	r7, r2, r7
   109ae:	42ba      	cmp	r2, r7
   109b0:	4192      	sbcs	r2, r2
   109b2:	1b1c      	subs	r4, r3, r4
   109b4:	4252      	negs	r2, r2
   109b6:	1aa4      	subs	r4, r4, r2
   109b8:	46d8      	mov	r8, fp
   109ba:	e5f1      	b.n	105a0 <__aeabi_dadd+0x108>
   109bc:	0018      	movs	r0, r3
   109be:	4310      	orrs	r0, r2
   109c0:	d100      	bne.n	109c4 <__aeabi_dadd+0x52c>
   109c2:	e763      	b.n	1088c <__aeabi_dadd+0x3f4>
   109c4:	08f8      	lsrs	r0, r7, #3
   109c6:	0767      	lsls	r7, r4, #29
   109c8:	4307      	orrs	r7, r0
   109ca:	2080      	movs	r0, #128	; 0x80
   109cc:	08e4      	lsrs	r4, r4, #3
   109ce:	0300      	lsls	r0, r0, #12
   109d0:	4204      	tst	r4, r0
   109d2:	d008      	beq.n	109e6 <__aeabi_dadd+0x54e>
   109d4:	08dd      	lsrs	r5, r3, #3
   109d6:	4205      	tst	r5, r0
   109d8:	d105      	bne.n	109e6 <__aeabi_dadd+0x54e>
   109da:	08d2      	lsrs	r2, r2, #3
   109dc:	0759      	lsls	r1, r3, #29
   109de:	4311      	orrs	r1, r2
   109e0:	000f      	movs	r7, r1
   109e2:	002c      	movs	r4, r5
   109e4:	46d8      	mov	r8, fp
   109e6:	0f7b      	lsrs	r3, r7, #29
   109e8:	00e4      	lsls	r4, r4, #3
   109ea:	431c      	orrs	r4, r3
   109ec:	00ff      	lsls	r7, r7, #3
   109ee:	4e30      	ldr	r6, [pc, #192]	; (10ab0 <__aeabi_dadd+0x618>)
   109f0:	e5d6      	b.n	105a0 <__aeabi_dadd+0x108>
   109f2:	000c      	movs	r4, r1
   109f4:	0017      	movs	r7, r2
   109f6:	0006      	movs	r6, r0
   109f8:	e5d2      	b.n	105a0 <__aeabi_dadd+0x108>
   109fa:	2b00      	cmp	r3, #0
   109fc:	d038      	beq.n	10a70 <__aeabi_dadd+0x5d8>
   109fe:	000b      	movs	r3, r1
   10a00:	4313      	orrs	r3, r2
   10a02:	d100      	bne.n	10a06 <__aeabi_dadd+0x56e>
   10a04:	e742      	b.n	1088c <__aeabi_dadd+0x3f4>
   10a06:	08f8      	lsrs	r0, r7, #3
   10a08:	0767      	lsls	r7, r4, #29
   10a0a:	4307      	orrs	r7, r0
   10a0c:	2080      	movs	r0, #128	; 0x80
   10a0e:	08e4      	lsrs	r4, r4, #3
   10a10:	0300      	lsls	r0, r0, #12
   10a12:	4204      	tst	r4, r0
   10a14:	d0e7      	beq.n	109e6 <__aeabi_dadd+0x54e>
   10a16:	08cb      	lsrs	r3, r1, #3
   10a18:	4203      	tst	r3, r0
   10a1a:	d1e4      	bne.n	109e6 <__aeabi_dadd+0x54e>
   10a1c:	08d2      	lsrs	r2, r2, #3
   10a1e:	0749      	lsls	r1, r1, #29
   10a20:	4311      	orrs	r1, r2
   10a22:	000f      	movs	r7, r1
   10a24:	001c      	movs	r4, r3
   10a26:	e7de      	b.n	109e6 <__aeabi_dadd+0x54e>
   10a28:	2700      	movs	r7, #0
   10a2a:	2400      	movs	r4, #0
   10a2c:	e5d5      	b.n	105da <__aeabi_dadd+0x142>
   10a2e:	2100      	movs	r1, #0
   10a30:	e76b      	b.n	1090a <__aeabi_dadd+0x472>
   10a32:	2500      	movs	r5, #0
   10a34:	2700      	movs	r7, #0
   10a36:	e5f3      	b.n	10620 <__aeabi_dadd+0x188>
   10a38:	464e      	mov	r6, r9
   10a3a:	0025      	movs	r5, r4
   10a3c:	3e20      	subs	r6, #32
   10a3e:	40f5      	lsrs	r5, r6
   10a40:	464b      	mov	r3, r9
   10a42:	002e      	movs	r6, r5
   10a44:	2b20      	cmp	r3, #32
   10a46:	d02d      	beq.n	10aa4 <__aeabi_dadd+0x60c>
   10a48:	2540      	movs	r5, #64	; 0x40
   10a4a:	1aed      	subs	r5, r5, r3
   10a4c:	40ac      	lsls	r4, r5
   10a4e:	4327      	orrs	r7, r4
   10a50:	1e7c      	subs	r4, r7, #1
   10a52:	41a7      	sbcs	r7, r4
   10a54:	2400      	movs	r4, #0
   10a56:	4337      	orrs	r7, r6
   10a58:	e6c9      	b.n	107ee <__aeabi_dadd+0x356>
   10a5a:	2480      	movs	r4, #128	; 0x80
   10a5c:	2500      	movs	r5, #0
   10a5e:	0324      	lsls	r4, r4, #12
   10a60:	4e13      	ldr	r6, [pc, #76]	; (10ab0 <__aeabi_dadd+0x618>)
   10a62:	2700      	movs	r7, #0
   10a64:	e5dc      	b.n	10620 <__aeabi_dadd+0x188>
   10a66:	4327      	orrs	r7, r4
   10a68:	1e7c      	subs	r4, r7, #1
   10a6a:	41a7      	sbcs	r7, r4
   10a6c:	2400      	movs	r4, #0
   10a6e:	e779      	b.n	10964 <__aeabi_dadd+0x4cc>
   10a70:	000c      	movs	r4, r1
   10a72:	0017      	movs	r7, r2
   10a74:	4e0e      	ldr	r6, [pc, #56]	; (10ab0 <__aeabi_dadd+0x618>)
   10a76:	e593      	b.n	105a0 <__aeabi_dadd+0x108>
   10a78:	000c      	movs	r4, r1
   10a7a:	0017      	movs	r7, r2
   10a7c:	e590      	b.n	105a0 <__aeabi_dadd+0x108>
   10a7e:	4656      	mov	r6, sl
   10a80:	0023      	movs	r3, r4
   10a82:	3e20      	subs	r6, #32
   10a84:	40f3      	lsrs	r3, r6
   10a86:	4699      	mov	r9, r3
   10a88:	4653      	mov	r3, sl
   10a8a:	2b20      	cmp	r3, #32
   10a8c:	d00e      	beq.n	10aac <__aeabi_dadd+0x614>
   10a8e:	2340      	movs	r3, #64	; 0x40
   10a90:	4656      	mov	r6, sl
   10a92:	1b9b      	subs	r3, r3, r6
   10a94:	409c      	lsls	r4, r3
   10a96:	4327      	orrs	r7, r4
   10a98:	1e7c      	subs	r4, r7, #1
   10a9a:	41a7      	sbcs	r7, r4
   10a9c:	464b      	mov	r3, r9
   10a9e:	2400      	movs	r4, #0
   10aa0:	431f      	orrs	r7, r3
   10aa2:	e75f      	b.n	10964 <__aeabi_dadd+0x4cc>
   10aa4:	2400      	movs	r4, #0
   10aa6:	e7d2      	b.n	10a4e <__aeabi_dadd+0x5b6>
   10aa8:	0017      	movs	r7, r2
   10aaa:	e5b2      	b.n	10612 <__aeabi_dadd+0x17a>
   10aac:	2400      	movs	r4, #0
   10aae:	e7f2      	b.n	10a96 <__aeabi_dadd+0x5fe>
   10ab0:	000007ff 	.word	0x000007ff
   10ab4:	ff7fffff 	.word	0xff7fffff

00010ab8 <__aeabi_dcmpun>:
   10ab8:	b570      	push	{r4, r5, r6, lr}
   10aba:	4e0e      	ldr	r6, [pc, #56]	; (10af4 <__aeabi_dcmpun+0x3c>)
   10abc:	030d      	lsls	r5, r1, #12
   10abe:	031c      	lsls	r4, r3, #12
   10ac0:	0049      	lsls	r1, r1, #1
   10ac2:	005b      	lsls	r3, r3, #1
   10ac4:	0b2d      	lsrs	r5, r5, #12
   10ac6:	0d49      	lsrs	r1, r1, #21
   10ac8:	0b24      	lsrs	r4, r4, #12
   10aca:	0d5b      	lsrs	r3, r3, #21
   10acc:	42b1      	cmp	r1, r6
   10ace:	d004      	beq.n	10ada <__aeabi_dcmpun+0x22>
   10ad0:	4908      	ldr	r1, [pc, #32]	; (10af4 <__aeabi_dcmpun+0x3c>)
   10ad2:	2000      	movs	r0, #0
   10ad4:	428b      	cmp	r3, r1
   10ad6:	d008      	beq.n	10aea <__aeabi_dcmpun+0x32>
   10ad8:	bd70      	pop	{r4, r5, r6, pc}
   10ada:	4305      	orrs	r5, r0
   10adc:	2001      	movs	r0, #1
   10ade:	2d00      	cmp	r5, #0
   10ae0:	d1fa      	bne.n	10ad8 <__aeabi_dcmpun+0x20>
   10ae2:	4904      	ldr	r1, [pc, #16]	; (10af4 <__aeabi_dcmpun+0x3c>)
   10ae4:	2000      	movs	r0, #0
   10ae6:	428b      	cmp	r3, r1
   10ae8:	d1f6      	bne.n	10ad8 <__aeabi_dcmpun+0x20>
   10aea:	4314      	orrs	r4, r2
   10aec:	0020      	movs	r0, r4
   10aee:	1e44      	subs	r4, r0, #1
   10af0:	41a0      	sbcs	r0, r4
   10af2:	e7f1      	b.n	10ad8 <__aeabi_dcmpun+0x20>
   10af4:	000007ff 	.word	0x000007ff

00010af8 <_close>:
   10af8:	2258      	movs	r2, #88	; 0x58
   10afa:	2001      	movs	r0, #1
   10afc:	4b01      	ldr	r3, [pc, #4]	; (10b04 <_close+0xc>)
   10afe:	4240      	negs	r0, r0
   10b00:	601a      	str	r2, [r3, #0]
   10b02:	4770      	bx	lr
   10b04:	20001350 	.word	0x20001350

00010b08 <_fstat>:
   10b08:	2258      	movs	r2, #88	; 0x58
   10b0a:	2001      	movs	r0, #1
   10b0c:	4b01      	ldr	r3, [pc, #4]	; (10b14 <_fstat+0xc>)
   10b0e:	4240      	negs	r0, r0
   10b10:	601a      	str	r2, [r3, #0]
   10b12:	4770      	bx	lr
   10b14:	20001350 	.word	0x20001350

00010b18 <_isatty>:
   10b18:	2258      	movs	r2, #88	; 0x58
   10b1a:	4b02      	ldr	r3, [pc, #8]	; (10b24 <_isatty+0xc>)
   10b1c:	2000      	movs	r0, #0
   10b1e:	601a      	str	r2, [r3, #0]
   10b20:	4770      	bx	lr
   10b22:	46c0      	nop			; (mov r8, r8)
   10b24:	20001350 	.word	0x20001350

00010b28 <_lseek>:
   10b28:	2258      	movs	r2, #88	; 0x58
   10b2a:	2001      	movs	r0, #1
   10b2c:	4b01      	ldr	r3, [pc, #4]	; (10b34 <_lseek+0xc>)
   10b2e:	4240      	negs	r0, r0
   10b30:	601a      	str	r2, [r3, #0]
   10b32:	4770      	bx	lr
   10b34:	20001350 	.word	0x20001350

00010b38 <_read>:
   10b38:	2258      	movs	r2, #88	; 0x58
   10b3a:	2001      	movs	r0, #1
   10b3c:	4b01      	ldr	r3, [pc, #4]	; (10b44 <_read+0xc>)
   10b3e:	4240      	negs	r0, r0
   10b40:	601a      	str	r2, [r3, #0]
   10b42:	4770      	bx	lr
   10b44:	20001350 	.word	0x20001350

00010b48 <_sbrk>:
   10b48:	4a04      	ldr	r2, [pc, #16]	; (10b5c <_sbrk+0x14>)
   10b4a:	6813      	ldr	r3, [r2, #0]
   10b4c:	2b00      	cmp	r3, #0
   10b4e:	d003      	beq.n	10b58 <_sbrk+0x10>
   10b50:	1818      	adds	r0, r3, r0
   10b52:	6010      	str	r0, [r2, #0]
   10b54:	0018      	movs	r0, r3
   10b56:	4770      	bx	lr
   10b58:	4b01      	ldr	r3, [pc, #4]	; (10b60 <_sbrk+0x18>)
   10b5a:	e7f9      	b.n	10b50 <_sbrk+0x8>
   10b5c:	200012ec 	.word	0x200012ec
   10b60:	20003358 	.word	0x20003358

00010b64 <_write>:
   10b64:	2258      	movs	r2, #88	; 0x58
   10b66:	2001      	movs	r0, #1
   10b68:	4b01      	ldr	r3, [pc, #4]	; (10b70 <_write+0xc>)
   10b6a:	4240      	negs	r0, r0
   10b6c:	601a      	str	r2, [r3, #0]
   10b6e:	4770      	bx	lr
   10b70:	20001350 	.word	0x20001350

00010b74 <_ZL22channel_divider_values>:
   10b74:	00000002 00000004 00000006 00000008     ................
   10b84:	0000000c 00000010 00000018 00000020     ............ ...
   10b94:	00000030 00000040 00000048 00000060     0...@...H...`...
   10ba4:	00000080 000000c0                       ........

00010bac <_ZL17default_registers>:
	...
   10bb8:	000000f1 44400007 00000000 00000000     ......@D........
	...
   10bf4:	00000064 0800000c 003f0000 00800001     d.........?.....
   10c04:	0000c350 000003e8 000001f4 00001388     P...............
   10c14:	00a80322 000109c4 00208001 00000000     "......... .....
   10c24:	00000000 00800420 41800000 03000300     .... ......A....
   10c34:	c8c207fc 00011f61 00000000 da800000     ....a...........
   10c44:	8104fd51 00040028 1e210000 03ec0393     Q...(.....!.....
   10c54:	318c318c 00020488 06240db0 007c071a     .1.1......$...|.
   10c64:	04010001 27b7f848 012c0064 064f0080     ....H..'d.,...O.
   10c74:	40001e70 00185001 160410d8 00b22000     p..@.P....... ..
   10c84:	03e87802 06420e43 080c0500 0000211c     .x..C.B......!..
   10c94:	72727563 20746e65 71657246 636e6575     current Frequenc
   10ca4:	203a2079 0a206625 0000000d 682f2e2e     y : %f ......./h
   10cb4:	702f6c70 2f74726f 5f6c7068 6f697067     pl/port/hpl_gpio
   10cc4:	7361625f 00682e65 682f2e2e 702f6c70     _base.h.../hpl/p
   10cd4:	70682f6d 6d705f6c 7361625f 00682e65     m/hpl_pm_base.h.
   10ce4:	682f2e2e 732f6c61 682f6372 695f6c61     ../hal/src/hal_i
   10cf4:	00632e6f 682f2e2e 732f6c61 682f6372     o.c.../hal/src/h
   10d04:	735f6c61 6d5f6970 6e79735f 00632e63     al_spi_m_sync.c.
   10d14:	682f2e2e 732f6c61 682f6372 755f6c61     ../hal/src/hal_u
   10d24:	74726173 6e79735f 00632e63 682f2e2e     sart_sync.c.../h
   10d34:	632f6c70 2f65726f 5f6c7068 65726f63     pl/core/hpl_core
   10d44:	70306d5f 5f73756c 65736162 0000632e     _m0plus_base.c..
   10d54:	00002bbe 00002b9c 00002b7a 00002b58     .+...+..z+..X+..
   10d64:	00002b36 00002caa 00002c88 00002c74     6+...,...,..t,..
   10d74:	00002c56 00002c3e 682f2e2e 732f6c70     V,..>,..../hpl/s
   10d84:	6f637265 70682f6d 65735f6c 6d6f6372     ercom/hpl_sercom
   10d94:	0000632e                                .c..

00010d98 <sercomspi_regs>:
   10d98:	0020000c 00020000 00000000 01ff003b     .. .........;...
   10da8:	20000c00 02000000 00000000 ff000500     ... ............
   10db8:	00000101                                ....

00010dbc <_usb_ep_cfgs>:
   10dbc:	20000d88 00000000 00000040 20000dc8     ... ....@...... 
   10dcc:	00000000 00000040 20000e08 00000000     ....@...... ....
   10ddc:	00000040 20000e48 00000000 00000040     @...H.. ....@...
   10dec:	20000e88 00000000 00000040 20000ec8     ... ....@...... 
   10dfc:	00000000 00000040 20000f08 00000000     ....@...... ....
   10e0c:	00000040 20000f48 00000000 00000040     @...H.. ....@...
   10e1c:	00000804 00004a25 00008364 0000831e     ....%J..d.......
   10e2c:	00008364 00008330 00008364 000082c8     d...0...d.......
   10e3c:	00008364 00008364 00008364 000082e0     d...d...d.......
   10e4c:	00008364 00008342 752f2e2e 642f6273     d...B...../usb/d
   10e5c:	63697665 73752f65 2e636462 00000063     evice/usbdc.c...
   10e6c:	682f2e2e 752f6c61 736c6974 6372732f     ../hal/utils/src
   10e7c:	6974752f 6c5f736c 2e747369 00000063     /utils_list.c...
   10e8c:	0000970c 000096dc 000096ee 00009630     ............0...
   10e9c:	000096ee 000096d2 000096ee 00009630     ............0...
   10eac:	000096dc 000096dc 000096d2 00009630     ............0...
   10ebc:	00009638 00009638 00009638 000096f4     8...8...8.......
   10ecc:	000096dc 000096dc 000096b0 00009794     ................
   10edc:	000096b0 000096d2 000096b0 00009794     ................
   10eec:	000096dc 000096dc 000096d2 00009794     ................
   10efc:	00009638 00009638 00009638 0000979e     8...8...8.......
   10f0c:	00009a8c 000099dc 000099dc 000099da     ................
   10f1c:	00009a7e 00009a7e 00009a74 000099da     ~...~...t.......
   10f2c:	00009a7e 00009a74 00009a7e 000099da     ~...t...~.......
   10f3c:	00009a84 00009a84 00009a84 00009b14     ................
   10f4c:	0000a23c 0000a21e 0000a1d8 0000a0f6     <...............
   10f5c:	0000a1d8 0000a210 0000a1d8 0000a0f6     ................
   10f6c:	0000a21e 0000a21e 0000a210 0000a0f6     ................
   10f7c:	0000a0ee 0000a0ee 0000a0ee 0000a454     ............T...
   10f8c:	0000a89c 0000a75c 0000a75c 0000a758     ....\...\...X...
   10f9c:	0000a874 0000a874 0000a866 0000a758     t...t...f...X...
   10fac:	0000a874 0000a866 0000a874 0000a758     t...f...t...X...
   10fbc:	0000a87c 0000a87c 0000a87c 0000aa80     |...|...|.......

00010fcc <_global_impure_ptr>:
   10fcc:	20000088 0000c072 0000c146 0000c146     ... r...F...F...
   10fdc:	0000c05e 0000c146 0000c146 0000c146     ^...F...F...F...
   10fec:	0000c146 0000c146 0000c146 0000c118     F...F...F.......
   10ffc:	0000bc2a 0000c146 0000bc20 0000bc34     *...F... ...4...
   1100c:	0000c146 0000c068 0000bdf4 0000bdf4     F...h...........
   1101c:	0000bdf4 0000bdf4 0000bdf4 0000bdf4     ................
   1102c:	0000bdf4 0000bdf4 0000bdf4 0000c146     ............F...
   1103c:	0000c146 0000c146 0000c146 0000c146     F...F...F...F...
   1104c:	0000c146 0000c146 0000c146 0000c146     F...F...F...F...
   1105c:	0000c146 0000c12e 0000c082 0000c146     F...........F...
   1106c:	0000c082 0000c146 0000c146 0000c146     ....F...F...F...
   1107c:	0000c146 0000bfe8 0000c146 0000c146     F.......F...F...
   1108c:	0000bff2 0000c146 0000c146 0000c146     ....F...F...F...
   1109c:	0000c146 0000c146 0000c020 0000c146     F...F... ...F...
   110ac:	0000c146 0000c04e 0000c146 0000c146     F...N...F...F...
   110bc:	0000c146 0000c146 0000c146 0000c146     F...F...F...F...
   110cc:	0000c146 0000c146 0000c146 0000c146     F...F...F...F...
   110dc:	0000be34 0000be6a 0000c082 0000c082     4...j...........
   110ec:	0000c082 0000bf12 0000be6a 0000c146     ........j...F...
   110fc:	0000c146 0000bf1c 0000c146 0000bf2e     F.......F.......
   1110c:	0000c142 0000bf5c 0000bf86 0000c146     B...\.......F...
   1111c:	0000bf90 0000c146 0000c13e 0000c146     ....F...>...F...
   1112c:	0000c146 0000bc82 00464e49 00666e69     F.......INF.inf.
   1113c:	004e414e 006e616e 33323130 37363534     NAN.nan.01234567
   1114c:	42413938 46454443 00000000 33323130     89ABCDEF....0123
   1115c:	37363534 62613938 66656463 00000000     456789abcdef....
   1116c:	6c756e28 0000296c 00000030              (null)..0...

00011178 <blanks.7238>:
   11178:	20202020 20202020 20202020 20202020                     

00011188 <zeroes.7239>:
   11188:	30303030 30303030 30303030 30303030     0000000000000000
   11198:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.

000111a8 <__mprec_bigtens>:
   111a8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   111b8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   111c8:	7f73bf3c 75154fdd                       <.s..O.u

000111d0 <__mprec_tens>:
   111d0:	00000000 3ff00000 00000000 40240000     .......?......$@
   111e0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   111f0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   11200:	00000000 412e8480 00000000 416312d0     .......A......cA
   11210:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   11220:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   11230:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   11240:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   11250:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   11260:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   11270:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   11280:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   11290:	79d99db4 44ea7843                       ...yCx.D

00011298 <p05.6055>:
   11298:	00000005 00000019 0000007d 00000043     ........}...C...
   112a8:	49534f50 00000058 0000002e              POSIX.......

000112b4 <_ctype_>:
   112b4:	20202000 20202020 28282020 20282828     .         ((((( 
   112c4:	20202020 20202020 20202020 20202020                     
   112d4:	10108820 10101010 10101010 10101010      ...............
   112e4:	04040410 04040404 10040404 10101010     ................
   112f4:	41411010 41414141 01010101 01010101     ..AAAAAA........
   11304:	01010101 01010101 01010101 10101010     ................
   11314:	42421010 42424242 02020202 02020202     ..BBBBBB........
   11324:	02020202 02020202 02020202 10101010     ................
   11334:	00000020 00000000 00000000 00000000      ...............
	...

000113b8 <_init>:
   113b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   113ba:	46c0      	nop			; (mov r8, r8)
   113bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   113be:	bc08      	pop	{r3}
   113c0:	469e      	mov	lr, r3
   113c2:	4770      	bx	lr

000113c4 <__init_array_start>:
   113c4:	0000d37d 	.word	0x0000d37d

000113c8 <__frame_dummy_init_array_entry>:
   113c8:	000000dd 00000c01 00000ca5              ............

000113d4 <_fini>:
   113d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   113d6:	46c0      	nop			; (mov r8, r8)
   113d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   113da:	bc08      	pop	{r3}
   113dc:	469e      	mov	lr, r3
   113de:	4770      	bx	lr

000113e0 <__fini_array_start>:
   113e0:	000000b5 	.word	0x000000b5
