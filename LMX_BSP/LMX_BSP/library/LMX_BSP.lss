
LMX_BSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b4c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000000  20000000  20000000  00010b4c  2**0
                  CONTENTS
  2 .bkupram      00000000  47000000  47000000  00010b4c  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00010b4c  2**0
                  CONTENTS
  4 .bss          00000044  20000000  20000000  00020000  2**2
                  ALLOC
  5 .stack        00010004  20000044  20000044  00020000  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00010b4c  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00010b7a  2**0
                  CONTENTS, READONLY
  8 .debug_info   00016b90  00000000  00000000  00010bd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001b33  00000000  00000000  00027763  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000097cc  00000000  00000000  00029296  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000700  00000000  00000000  00032a62  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ad0  00000000  00000000  00033162  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002ece1  00000000  00000000  00033c32  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000bec4  00000000  00000000  00062913  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00113d65  00000000  00000000  0006e7d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00001234  00000000  00000000  0018253c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
   0:	48 00 01 20 e1 02 00 00 dd 02 00 00 dd 02 00 00     H.. ............
  10:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
	...
  2c:	dd 02 00 00 dd 02 00 00 00 00 00 00 dd 02 00 00     ................
  3c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
  4c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
  5c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
  6c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
  7c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
  8c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
  9c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
  ac:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
  bc:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
  cc:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
  dc:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
	...
  f4:	0d 08 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
 104:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
 114:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
 124:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
 134:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
 144:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
 154:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
 164:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
 174:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
 184:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
 194:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
 1a4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
 1b4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
 1c4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
 1d4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
 1e4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
 1f4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
 204:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
 214:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
 224:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
 234:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
 244:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
 254:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................

00000264 <__do_global_dtors_aux>:
 264:	b510      	push	{r4, lr}
 266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
 268:	7823      	ldrb	r3, [r4, #0]
 26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
 26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
 26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
 270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
 272:	f3af 8000 	nop.w
 276:	2301      	movs	r3, #1
 278:	7023      	strb	r3, [r4, #0]
 27a:	bd10      	pop	{r4, pc}
 27c:	20000000 	.word	0x20000000
 280:	00000000 	.word	0x00000000
 284:	00000b4c 	.word	0x00000b4c

00000288 <frame_dummy>:
 288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
 28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
 28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
 28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
 290:	b510      	push	{r4, lr}
 292:	f3af 8000 	nop.w
 296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
 298:	6803      	ldr	r3, [r0, #0]
 29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
 29c:	bd10      	pop	{r4, pc}
 29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
 2a0:	6803      	ldr	r3, [r0, #0]
 2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
 2a4:	4770      	bx	lr
 2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
 2a8:	2b00      	cmp	r3, #0
 2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
 2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 2b0:	4718      	bx	r3
 2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
 2b4:	2b00      	cmp	r3, #0
 2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
 2b8:	4718      	bx	r3
 2ba:	bf00      	nop
 2bc:	00000000 	.word	0x00000000
 2c0:	00000b4c 	.word	0x00000b4c
 2c4:	20000004 	.word	0x20000004
 2c8:	00000b4c 	.word	0x00000b4c
 2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
 2d0:	b508      	push	{r3, lr}
	system_init();
 2d2:	4b01      	ldr	r3, [pc, #4]	; (2d8 <atmel_start_init+0x8>)
 2d4:	4798      	blx	r3
 2d6:	bd08      	pop	{r3, pc}
 2d8:	00000471 	.word	0x00000471

000002dc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 2dc:	e7fe      	b.n	2dc <Dummy_Handler>
	...

000002e0 <Reset_Handler>:
{
 2e0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
 2e2:	4b1c      	ldr	r3, [pc, #112]	; (354 <Reset_Handler+0x74>)
 2e4:	4a1c      	ldr	r2, [pc, #112]	; (358 <Reset_Handler+0x78>)
 2e6:	429a      	cmp	r2, r3
 2e8:	d010      	beq.n	30c <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
 2ea:	4b1c      	ldr	r3, [pc, #112]	; (35c <Reset_Handler+0x7c>)
 2ec:	4a19      	ldr	r2, [pc, #100]	; (354 <Reset_Handler+0x74>)
 2ee:	429a      	cmp	r2, r3
 2f0:	d20c      	bcs.n	30c <Reset_Handler+0x2c>
 2f2:	3b01      	subs	r3, #1
 2f4:	1a9b      	subs	r3, r3, r2
 2f6:	f023 0303 	bic.w	r3, r3, #3
 2fa:	3304      	adds	r3, #4
 2fc:	4413      	add	r3, r2
 2fe:	4916      	ldr	r1, [pc, #88]	; (358 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
 300:	f851 0b04 	ldr.w	r0, [r1], #4
 304:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
 308:	429a      	cmp	r2, r3
 30a:	d1f9      	bne.n	300 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
 30c:	4b14      	ldr	r3, [pc, #80]	; (360 <Reset_Handler+0x80>)
 30e:	4a15      	ldr	r2, [pc, #84]	; (364 <Reset_Handler+0x84>)
 310:	429a      	cmp	r2, r3
 312:	d20a      	bcs.n	32a <Reset_Handler+0x4a>
 314:	3b01      	subs	r3, #1
 316:	1a9b      	subs	r3, r3, r2
 318:	f023 0303 	bic.w	r3, r3, #3
 31c:	3304      	adds	r3, #4
 31e:	4413      	add	r3, r2
                *pDest++ = 0;
 320:	2100      	movs	r1, #0
 322:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
 326:	4293      	cmp	r3, r2
 328:	d1fb      	bne.n	322 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 32a:	4b0f      	ldr	r3, [pc, #60]	; (368 <Reset_Handler+0x88>)
 32c:	4a0f      	ldr	r2, [pc, #60]	; (36c <Reset_Handler+0x8c>)
 32e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 332:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
 334:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 338:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 33c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 340:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 344:	f3bf 8f6f 	isb	sy
        __libc_init_array();
 348:	4b09      	ldr	r3, [pc, #36]	; (370 <Reset_Handler+0x90>)
 34a:	4798      	blx	r3
        main();
 34c:	4b09      	ldr	r3, [pc, #36]	; (374 <Reset_Handler+0x94>)
 34e:	4798      	blx	r3
 350:	e7fe      	b.n	350 <Reset_Handler+0x70>
 352:	bf00      	nop
 354:	20000000 	.word	0x20000000
 358:	00000b4c 	.word	0x00000b4c
 35c:	20000000 	.word	0x20000000
 360:	20000044 	.word	0x20000044
 364:	20000000 	.word	0x20000000
 368:	e000ed00 	.word	0xe000ed00
 36c:	00000000 	.word	0x00000000
 370:	00000a75 	.word	0x00000a75
 374:	00000a69 	.word	0x00000a69

00000378 <SPI_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
 378:	4b28      	ldr	r3, [pc, #160]	; (41c <SPI_0_PORT_init+0xa4>)
 37a:	2210      	movs	r2, #16
 37c:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
 37e:	609a      	str	r2, [r3, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 380:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 384:	629a      	str	r2, [r3, #40]	; 0x28
 386:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 38a:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 38c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
 390:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
 394:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 398:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
 39c:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXE_Msk;
 3a0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
 3a4:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
 3a8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
 3ac:	2220      	movs	r2, #32
 3ae:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
 3b0:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 3b2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 3b6:	629a      	str	r2, [r3, #40]	; 0x28
 3b8:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 3ba:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
 3be:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
 3c2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 3c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
 3ca:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
 3ce:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
 3d2:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
 3d6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
 3da:	2240      	movs	r2, #64	; 0x40
 3dc:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 3de:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 3e2:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
 3e6:	629a      	str	r2, [r3, #40]	; 0x28
 3e8:	4a0d      	ldr	r2, [pc, #52]	; (420 <SPI_0_PORT_init+0xa8>)
 3ea:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
 3ec:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 3f0:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 3f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 3f8:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
 3fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
 400:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 404:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
 408:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXE_Msk;
 40c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
 410:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
 414:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 418:	4770      	bx	lr
 41a:	bf00      	nop
 41c:	41008000 	.word	0x41008000
 420:	c0020000 	.word	0xc0020000

00000424 <SPI_0_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
 424:	4b06      	ldr	r3, [pc, #24]	; (440 <SPI_0_CLOCK_init+0x1c>)
 426:	2242      	movs	r2, #66	; 0x42
 428:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 42c:	224b      	movs	r2, #75	; 0x4b
 42e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBAMASK_SERCOM0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
 432:	4a04      	ldr	r2, [pc, #16]	; (444 <SPI_0_CLOCK_init+0x20>)
 434:	6953      	ldr	r3, [r2, #20]
 436:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 43a:	6153      	str	r3, [r2, #20]
 43c:	4770      	bx	lr
 43e:	bf00      	nop
 440:	40001c00 	.word	0x40001c00
 444:	40000800 	.word	0x40000800

00000448 <SPI_0_init>:

	hri_mclk_set_APBAMASK_SERCOM0_bit(MCLK);
}

void SPI_0_init(void)
{
 448:	b508      	push	{r3, lr}
	SPI_0_CLOCK_init();
 44a:	4b04      	ldr	r3, [pc, #16]	; (45c <SPI_0_init+0x14>)
 44c:	4798      	blx	r3
	spi_m_sync_init(&SPI_0, SERCOM0);
 44e:	4904      	ldr	r1, [pc, #16]	; (460 <SPI_0_init+0x18>)
 450:	4804      	ldr	r0, [pc, #16]	; (464 <SPI_0_init+0x1c>)
 452:	4b05      	ldr	r3, [pc, #20]	; (468 <SPI_0_init+0x20>)
 454:	4798      	blx	r3
	SPI_0_PORT_init();
 456:	4b05      	ldr	r3, [pc, #20]	; (46c <SPI_0_init+0x24>)
 458:	4798      	blx	r3
 45a:	bd08      	pop	{r3, pc}
 45c:	00000425 	.word	0x00000425
 460:	40003000 	.word	0x40003000
 464:	2000001c 	.word	0x2000001c
 468:	0000053d 	.word	0x0000053d
 46c:	00000379 	.word	0x00000379

00000470 <system_init>:
}

void system_init(void)
{
 470:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
 472:	4b2e      	ldr	r3, [pc, #184]	; (52c <system_init+0xbc>)
 474:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
 476:	4b2e      	ldr	r3, [pc, #184]	; (530 <system_init+0xc0>)
 478:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 47c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 480:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
 484:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
 488:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 48c:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
 490:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
 494:	f893 20ce 	ldrb.w	r2, [r3, #206]	; 0xce
 498:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 49c:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 4a0:	f893 20ce 	ldrb.w	r2, [r3, #206]	; 0xce
	tmp &= ~PORT_PINCFG_PMUXEN;
 4a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
 4a8:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 4ac:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
 4b0:	f893 20b7 	ldrb.w	r2, [r3, #183]	; 0xb7
	tmp &= ~PORT_PMUX_PMUXE_Msk;
 4b4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
 4b8:	f042 020c 	orr.w	r2, r2, #12
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
 4bc:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
 4c0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 4c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 4c8:	481a      	ldr	r0, [pc, #104]	; (534 <system_init+0xc4>)
 4ca:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
 4ce:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
 4d2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
 4d6:	f893 20cf 	ldrb.w	r2, [r3, #207]	; 0xcf
 4da:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 4de:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 4e2:	f893 20cf 	ldrb.w	r2, [r3, #207]	; 0xcf
	tmp &= ~PORT_PINCFG_PMUXEN;
 4e6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
 4ea:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 4ee:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
 4f2:	f893 20b7 	ldrb.w	r2, [r3, #183]	; 0xb7
	tmp &= ~PORT_PMUX_PMUXO_Msk;
 4f6:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
 4fa:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
 4fe:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
 502:	2202      	movs	r2, #2
 504:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
 508:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 50c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 510:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
 514:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 518:	f893 2141 	ldrb.w	r2, [r3, #321]	; 0x141
	tmp &= ~PORT_PINCFG_PMUXEN;
 51c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 520:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
	// Set pin direction to output
	gpio_set_pin_direction(CLK1, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(CLK1, GPIO_PIN_FUNCTION_OFF);

	SPI_0_init();
 524:	4b04      	ldr	r3, [pc, #16]	; (538 <system_init+0xc8>)
 526:	4798      	blx	r3
 528:	bd08      	pop	{r3, pc}
 52a:	bf00      	nop
 52c:	0000064d 	.word	0x0000064d
 530:	41008000 	.word	0x41008000
 534:	40008000 	.word	0x40008000
 538:	00000449 	.word	0x00000449

0000053c <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
 53c:	b538      	push	{r3, r4, r5, lr}
 53e:	460d      	mov	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
 540:	4604      	mov	r4, r0
 542:	b1b8      	cbz	r0, 574 <spi_m_sync_init+0x38>
 544:	1c08      	adds	r0, r1, #0
 546:	bf18      	it	ne
 548:	2001      	movne	r0, #1
 54a:	2240      	movs	r2, #64	; 0x40
 54c:	490a      	ldr	r1, [pc, #40]	; (578 <spi_m_sync_init+0x3c>)
 54e:	4b0b      	ldr	r3, [pc, #44]	; (57c <spi_m_sync_init+0x40>)
 550:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
 552:	4620      	mov	r0, r4
 554:	f840 5f04 	str.w	r5, [r0, #4]!
	rc            = _spi_m_sync_init(&spi->dev, hw);
 558:	4629      	mov	r1, r5
 55a:	4b09      	ldr	r3, [pc, #36]	; (580 <spi_m_sync_init+0x44>)
 55c:	4798      	blx	r3

	if (rc < 0) {
 55e:	2800      	cmp	r0, #0
 560:	db07      	blt.n	572 <spi_m_sync_init+0x36>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
 562:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 566:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
 568:	4b06      	ldr	r3, [pc, #24]	; (584 <spi_m_sync_init+0x48>)
 56a:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
 56c:	4b06      	ldr	r3, [pc, #24]	; (588 <spi_m_sync_init+0x4c>)
 56e:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
 570:	2000      	movs	r0, #0
}
 572:	bd38      	pop	{r3, r4, r5, pc}
 574:	2000      	movs	r0, #0
 576:	e7e8      	b.n	54a <spi_m_sync_init+0xe>
 578:	00000abc 	.word	0x00000abc
 57c:	00000645 	.word	0x00000645
 580:	00000895 	.word	0x00000895
 584:	00000609 	.word	0x00000609
 588:	000005cd 	.word	0x000005cd

0000058c <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
 58c:	b530      	push	{r4, r5, lr}
 58e:	b085      	sub	sp, #20
 590:	460c      	mov	r4, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
 592:	4605      	mov	r5, r0
 594:	b190      	cbz	r0, 5bc <spi_m_sync_transfer+0x30>
 596:	1c08      	adds	r0, r1, #0
 598:	bf18      	it	ne
 59a:	2001      	movne	r0, #1
 59c:	22b3      	movs	r2, #179	; 0xb3
 59e:	4908      	ldr	r1, [pc, #32]	; (5c0 <spi_m_sync_transfer+0x34>)
 5a0:	4b08      	ldr	r3, [pc, #32]	; (5c4 <spi_m_sync_transfer+0x38>)
 5a2:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
 5a4:	6823      	ldr	r3, [r4, #0]
 5a6:	9301      	str	r3, [sp, #4]
	msg.rxbuf = p_xfer->rxbuf;
 5a8:	6863      	ldr	r3, [r4, #4]
 5aa:	9302      	str	r3, [sp, #8]
	msg.size  = p_xfer->size;
 5ac:	68a3      	ldr	r3, [r4, #8]
 5ae:	9303      	str	r3, [sp, #12]
	return _spi_m_sync_trans(&spi->dev, &msg);
 5b0:	a901      	add	r1, sp, #4
 5b2:	1d28      	adds	r0, r5, #4
 5b4:	4b04      	ldr	r3, [pc, #16]	; (5c8 <spi_m_sync_transfer+0x3c>)
 5b6:	4798      	blx	r3
}
 5b8:	b005      	add	sp, #20
 5ba:	bd30      	pop	{r4, r5, pc}
 5bc:	2000      	movs	r0, #0
 5be:	e7ed      	b.n	59c <spi_m_sync_transfer+0x10>
 5c0:	00000abc 	.word	0x00000abc
 5c4:	00000645 	.word	0x00000645
 5c8:	00000989 	.word	0x00000989

000005cc <_spi_m_sync_io_write>:
{
 5cc:	b570      	push	{r4, r5, r6, lr}
 5ce:	b084      	sub	sp, #16
 5d0:	460e      	mov	r6, r1
 5d2:	4615      	mov	r5, r2
	ASSERT(io);
 5d4:	4604      	mov	r4, r0
 5d6:	22a3      	movs	r2, #163	; 0xa3
 5d8:	4908      	ldr	r1, [pc, #32]	; (5fc <_spi_m_sync_io_write+0x30>)
 5da:	3000      	adds	r0, #0
 5dc:	bf18      	it	ne
 5de:	2001      	movne	r0, #1
 5e0:	4b07      	ldr	r3, [pc, #28]	; (600 <_spi_m_sync_io_write+0x34>)
 5e2:	4798      	blx	r3
	xfer.rxbuf = 0;
 5e4:	2300      	movs	r3, #0
 5e6:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
 5e8:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
 5ea:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
 5ec:	a901      	add	r1, sp, #4
 5ee:	f1a4 000c 	sub.w	r0, r4, #12
 5f2:	4b04      	ldr	r3, [pc, #16]	; (604 <_spi_m_sync_io_write+0x38>)
 5f4:	4798      	blx	r3
}
 5f6:	b004      	add	sp, #16
 5f8:	bd70      	pop	{r4, r5, r6, pc}
 5fa:	bf00      	nop
 5fc:	00000abc 	.word	0x00000abc
 600:	00000645 	.word	0x00000645
 604:	0000058d 	.word	0x0000058d

00000608 <_spi_m_sync_io_read>:
{
 608:	b570      	push	{r4, r5, r6, lr}
 60a:	b084      	sub	sp, #16
 60c:	460e      	mov	r6, r1
 60e:	4615      	mov	r5, r2
	ASSERT(io);
 610:	4604      	mov	r4, r0
 612:	2287      	movs	r2, #135	; 0x87
 614:	4908      	ldr	r1, [pc, #32]	; (638 <_spi_m_sync_io_read+0x30>)
 616:	3000      	adds	r0, #0
 618:	bf18      	it	ne
 61a:	2001      	movne	r0, #1
 61c:	4b07      	ldr	r3, [pc, #28]	; (63c <_spi_m_sync_io_read+0x34>)
 61e:	4798      	blx	r3
	xfer.rxbuf = buf;
 620:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
 622:	2300      	movs	r3, #0
 624:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
 626:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
 628:	a901      	add	r1, sp, #4
 62a:	f1a4 000c 	sub.w	r0, r4, #12
 62e:	4b04      	ldr	r3, [pc, #16]	; (640 <_spi_m_sync_io_read+0x38>)
 630:	4798      	blx	r3
}
 632:	b004      	add	sp, #16
 634:	bd70      	pop	{r4, r5, r6, pc}
 636:	bf00      	nop
 638:	00000abc 	.word	0x00000abc
 63c:	00000645 	.word	0x00000645
 640:	0000058d 	.word	0x0000058d

00000644 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
 644:	b900      	cbnz	r0, 648 <assert+0x4>
		__asm("BKPT #0");
 646:	be00      	bkpt	0x0000
 648:	4770      	bx	lr
	...

0000064c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
 64c:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
 64e:	4a09      	ldr	r2, [pc, #36]	; (674 <_init_chip+0x28>)
 650:	8813      	ldrh	r3, [r2, #0]
 652:	b29b      	uxth	r3, r3
 654:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
 656:	4b08      	ldr	r3, [pc, #32]	; (678 <_init_chip+0x2c>)
 658:	4798      	blx	r3
	_oscctrl_init_sources();
 65a:	4b08      	ldr	r3, [pc, #32]	; (67c <_init_chip+0x30>)
 65c:	4798      	blx	r3
	_mclk_init();
 65e:	4b08      	ldr	r3, [pc, #32]	; (680 <_init_chip+0x34>)
 660:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
 662:	2060      	movs	r0, #96	; 0x60
 664:	4c07      	ldr	r4, [pc, #28]	; (684 <_init_chip+0x38>)
 666:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
 668:	4b07      	ldr	r3, [pc, #28]	; (688 <_init_chip+0x3c>)
 66a:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
 66c:	f640 709f 	movw	r0, #3999	; 0xf9f
 670:	47a0      	blx	r4
 672:	bd10      	pop	{r4, pc}
 674:	41004000 	.word	0x41004000
 678:	00000765 	.word	0x00000765
 67c:	00000779 	.word	0x00000779
 680:	00000759 	.word	0x00000759
 684:	0000068d 	.word	0x0000068d
 688:	00000795 	.word	0x00000795

0000068c <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
 68c:	f010 0f01 	tst.w	r0, #1
 690:	d008      	beq.n	6a4 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
 692:	4a29      	ldr	r2, [pc, #164]	; (738 <_gclk_init_generators_by_fref+0xac>)
 694:	4b29      	ldr	r3, [pc, #164]	; (73c <_gclk_init_generators_by_fref+0xb0>)
 696:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
 698:	4619      	mov	r1, r3
 69a:	f643 72fd 	movw	r2, #16381	; 0x3ffd
 69e:	684b      	ldr	r3, [r1, #4]
 6a0:	4213      	tst	r3, r2
 6a2:	d1fc      	bne.n	69e <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
 6a4:	f010 0f02 	tst.w	r0, #2
 6a8:	d008      	beq.n	6bc <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
 6aa:	4a25      	ldr	r2, [pc, #148]	; (740 <_gclk_init_generators_by_fref+0xb4>)
 6ac:	4b23      	ldr	r3, [pc, #140]	; (73c <_gclk_init_generators_by_fref+0xb0>)
 6ae:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
 6b0:	4619      	mov	r1, r3
 6b2:	f643 72fd 	movw	r2, #16381	; 0x3ffd
 6b6:	684b      	ldr	r3, [r1, #4]
 6b8:	4213      	tst	r3, r2
 6ba:	d1fc      	bne.n	6b6 <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
 6bc:	f010 0f04 	tst.w	r0, #4
 6c0:	d008      	beq.n	6d4 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
 6c2:	4a20      	ldr	r2, [pc, #128]	; (744 <_gclk_init_generators_by_fref+0xb8>)
 6c4:	4b1d      	ldr	r3, [pc, #116]	; (73c <_gclk_init_generators_by_fref+0xb0>)
 6c6:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
 6c8:	4619      	mov	r1, r3
 6ca:	f643 72fd 	movw	r2, #16381	; 0x3ffd
 6ce:	684b      	ldr	r3, [r1, #4]
 6d0:	4213      	tst	r3, r2
 6d2:	d1fc      	bne.n	6ce <_gclk_init_generators_by_fref+0x42>
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
 6d4:	f010 0f10 	tst.w	r0, #16
 6d8:	d008      	beq.n	6ec <_gclk_init_generators_by_fref+0x60>
	((Gclk *)hw)->GENCTRL[index].reg = data;
 6da:	4a1b      	ldr	r2, [pc, #108]	; (748 <_gclk_init_generators_by_fref+0xbc>)
 6dc:	4b17      	ldr	r3, [pc, #92]	; (73c <_gclk_init_generators_by_fref+0xb0>)
 6de:	631a      	str	r2, [r3, #48]	; 0x30
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
 6e0:	4619      	mov	r1, r3
 6e2:	f643 72fd 	movw	r2, #16381	; 0x3ffd
 6e6:	684b      	ldr	r3, [r1, #4]
 6e8:	4213      	tst	r3, r2
 6ea:	d1fc      	bne.n	6e6 <_gclk_init_generators_by_fref+0x5a>
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
 6ec:	f010 0f20 	tst.w	r0, #32
 6f0:	d008      	beq.n	704 <_gclk_init_generators_by_fref+0x78>
	((Gclk *)hw)->GENCTRL[index].reg = data;
 6f2:	4a16      	ldr	r2, [pc, #88]	; (74c <_gclk_init_generators_by_fref+0xc0>)
 6f4:	4b11      	ldr	r3, [pc, #68]	; (73c <_gclk_init_generators_by_fref+0xb0>)
 6f6:	635a      	str	r2, [r3, #52]	; 0x34
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
 6f8:	4619      	mov	r1, r3
 6fa:	f643 72fd 	movw	r2, #16381	; 0x3ffd
 6fe:	684b      	ldr	r3, [r1, #4]
 700:	4213      	tst	r3, r2
 702:	d1fc      	bne.n	6fe <_gclk_init_generators_by_fref+0x72>
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
 704:	f010 0f40 	tst.w	r0, #64	; 0x40
 708:	d008      	beq.n	71c <_gclk_init_generators_by_fref+0x90>
	((Gclk *)hw)->GENCTRL[index].reg = data;
 70a:	4a11      	ldr	r2, [pc, #68]	; (750 <_gclk_init_generators_by_fref+0xc4>)
 70c:	4b0b      	ldr	r3, [pc, #44]	; (73c <_gclk_init_generators_by_fref+0xb0>)
 70e:	639a      	str	r2, [r3, #56]	; 0x38
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
 710:	4619      	mov	r1, r3
 712:	f643 72fd 	movw	r2, #16381	; 0x3ffd
 716:	684b      	ldr	r3, [r1, #4]
 718:	4213      	tst	r3, r2
 71a:	d1fc      	bne.n	716 <_gclk_init_generators_by_fref+0x8a>
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
 71c:	f410 6f00 	tst.w	r0, #2048	; 0x800
 720:	d008      	beq.n	734 <_gclk_init_generators_by_fref+0xa8>
	((Gclk *)hw)->GENCTRL[index].reg = data;
 722:	4a0c      	ldr	r2, [pc, #48]	; (754 <_gclk_init_generators_by_fref+0xc8>)
 724:	4b05      	ldr	r3, [pc, #20]	; (73c <_gclk_init_generators_by_fref+0xb0>)
 726:	64da      	str	r2, [r3, #76]	; 0x4c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
 728:	4619      	mov	r1, r3
 72a:	f643 72fd 	movw	r2, #16381	; 0x3ffd
 72e:	684b      	ldr	r3, [r1, #4]
 730:	4213      	tst	r3, r2
 732:	d1fc      	bne.n	72e <_gclk_init_generators_by_fref+0xa2>
 734:	4770      	bx	lr
 736:	bf00      	nop
 738:	00010107 	.word	0x00010107
 73c:	40001c00 	.word	0x40001c00
 740:	00012908 	.word	0x00012908
 744:	00030907 	.word	0x00030907
 748:	00010901 	.word	0x00010901
 74c:	00042901 	.word	0x00042901
 750:	00060901 	.word	0x00060901
 754:	00010904 	.word	0x00010904

00000758 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
 758:	2201      	movs	r2, #1
 75a:	4b01      	ldr	r3, [pc, #4]	; (760 <_mclk_init+0x8>)
 75c:	715a      	strb	r2, [r3, #5]
 75e:	4770      	bx	lr
 760:	40000800 	.word	0x40000800

00000764 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
 764:	4b03      	ldr	r3, [pc, #12]	; (774 <_osc32kctrl_init_sources+0x10>)
 766:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
 768:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
 76c:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
 76e:	2201      	movs	r2, #1
 770:	741a      	strb	r2, [r3, #16]
 772:	4770      	bx	lr
 774:	40001400 	.word	0x40001400

00000778 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
 778:	4a04      	ldr	r2, [pc, #16]	; (78c <_oscctrl_init_sources+0x14>)
 77a:	4b05      	ldr	r3, [pc, #20]	; (790 <_oscctrl_init_sources+0x18>)
 77c:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
 77e:	461a      	mov	r2, r3
 780:	6913      	ldr	r3, [r2, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
 782:	f013 0f02 	tst.w	r3, #2
 786:	d0fb      	beq.n	780 <_oscctrl_init_sources+0x8>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
 788:	4770      	bx	lr
 78a:	bf00      	nop
 78c:	03002606 	.word	0x03002606
 790:	40001000 	.word	0x40001000

00000794 <_oscctrl_init_referenced_generators>:
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
 794:	2227      	movs	r2, #39	; 0x27
 796:	4b1c      	ldr	r3, [pc, #112]	; (808 <_oscctrl_init_referenced_generators+0x74>)
 798:	635a      	str	r2, [r3, #52]	; 0x34
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
 79a:	461a      	mov	r2, r3
 79c:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 79e:	f013 0f06 	tst.w	r3, #6
 7a2:	d1fb      	bne.n	79c <_oscctrl_init_referenced_generators+0x8>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
 7a4:	4b18      	ldr	r3, [pc, #96]	; (808 <_oscctrl_init_referenced_generators+0x74>)
 7a6:	2270      	movs	r2, #112	; 0x70
 7a8:	639a      	str	r2, [r3, #56]	; 0x38
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
 7aa:	2242      	movs	r2, #66	; 0x42
 7ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
 7b0:	461a      	mov	r2, r3
 7b2:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 7b4:	f013 0f02 	tst.w	r3, #2
 7b8:	d1fb      	bne.n	7b2 <_oscctrl_init_referenced_generators+0x1e>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
 7ba:	2231      	movs	r2, #49	; 0x31
 7bc:	4b12      	ldr	r3, [pc, #72]	; (808 <_oscctrl_init_referenced_generators+0x74>)
 7be:	649a      	str	r2, [r3, #72]	; 0x48
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
 7c0:	461a      	mov	r2, r3
 7c2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 7c4:	f013 0f06 	tst.w	r3, #6
 7c8:	d1fb      	bne.n	7c2 <_oscctrl_init_referenced_generators+0x2e>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
 7ca:	4b0f      	ldr	r3, [pc, #60]	; (808 <_oscctrl_init_referenced_generators+0x74>)
 7cc:	2270      	movs	r2, #112	; 0x70
 7ce:	64da      	str	r2, [r3, #76]	; 0x4c
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
 7d0:	2202      	movs	r2, #2
 7d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
 7d6:	461a      	mov	r2, r3
 7d8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 7da:	f013 0f02 	tst.w	r3, #2
 7de:	d1fb      	bne.n	7d8 <_oscctrl_init_referenced_generators+0x44>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
 7e0:	4b09      	ldr	r3, [pc, #36]	; (808 <_oscctrl_init_referenced_generators+0x74>)
 7e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
 7e4:	f012 0f01 	tst.w	r2, #1
 7e8:	d103      	bne.n	7f2 <_oscctrl_init_referenced_generators+0x5e>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
 7ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 7ec:	f012 0f02 	tst.w	r2, #2
 7f0:	d0f7      	beq.n	7e2 <_oscctrl_init_referenced_generators+0x4e>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
 7f2:	4b05      	ldr	r3, [pc, #20]	; (808 <_oscctrl_init_referenced_generators+0x74>)
 7f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
 7f6:	f012 0f01 	tst.w	r2, #1
 7fa:	d103      	bne.n	804 <_oscctrl_init_referenced_generators+0x70>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
 7fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 7fe:	f012 0f02 	tst.w	r2, #2
 802:	d0f7      	beq.n	7f4 <_oscctrl_init_referenced_generators+0x60>
 804:	4770      	bx	lr
 806:	bf00      	nop
 808:	40001000 	.word	0x40001000

0000080c <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
 80c:	b500      	push	{lr}
 80e:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
 810:	4b0d      	ldr	r3, [pc, #52]	; (848 <RAMECC_Handler+0x3c>)
 812:	789b      	ldrb	r3, [r3, #2]
 814:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
 816:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
 818:	9b01      	ldr	r3, [sp, #4]
 81a:	f013 0f02 	tst.w	r3, #2
 81e:	d006      	beq.n	82e <RAMECC_Handler+0x22>
 820:	4b0a      	ldr	r3, [pc, #40]	; (84c <RAMECC_Handler+0x40>)
 822:	681b      	ldr	r3, [r3, #0]
 824:	b11b      	cbz	r3, 82e <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
 826:	4a08      	ldr	r2, [pc, #32]	; (848 <RAMECC_Handler+0x3c>)
 828:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
 82a:	4798      	blx	r3
 82c:	e009      	b.n	842 <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
 82e:	9b01      	ldr	r3, [sp, #4]
 830:	f013 0f01 	tst.w	r3, #1
 834:	d005      	beq.n	842 <RAMECC_Handler+0x36>
 836:	4b05      	ldr	r3, [pc, #20]	; (84c <RAMECC_Handler+0x40>)
 838:	685b      	ldr	r3, [r3, #4]
 83a:	b113      	cbz	r3, 842 <RAMECC_Handler+0x36>
 83c:	4a02      	ldr	r2, [pc, #8]	; (848 <RAMECC_Handler+0x3c>)
 83e:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
 840:	4798      	blx	r3
	} else {
		return;
	}
}
 842:	b003      	add	sp, #12
 844:	f85d fb04 	ldr.w	pc, [sp], #4
 848:	41020000 	.word	0x41020000
 84c:	20000034 	.word	0x20000034

00000850 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
 850:	b470      	push	{r4, r5, r6}
 852:	b089      	sub	sp, #36	; 0x24
 854:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
 856:	466c      	mov	r4, sp
 858:	4d0d      	ldr	r5, [pc, #52]	; (890 <_sercom_get_hardware_index+0x40>)
 85a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 85c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 85e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 862:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
 866:	9b00      	ldr	r3, [sp, #0]
 868:	42b3      	cmp	r3, r6
 86a:	d00d      	beq.n	888 <_sercom_get_hardware_index+0x38>
 86c:	4631      	mov	r1, r6
 86e:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
 870:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
 872:	f853 2b04 	ldr.w	r2, [r3], #4
 876:	428a      	cmp	r2, r1
 878:	d007      	beq.n	88a <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
 87a:	3001      	adds	r0, #1
 87c:	2808      	cmp	r0, #8
 87e:	d1f8      	bne.n	872 <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
 880:	2000      	movs	r0, #0
}
 882:	b009      	add	sp, #36	; 0x24
 884:	bc70      	pop	{r4, r5, r6}
 886:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
 888:	2000      	movs	r0, #0
			return i;
 88a:	b2c0      	uxtb	r0, r0
 88c:	e7f9      	b.n	882 <_sercom_get_hardware_index+0x32>
 88e:	bf00      	nop
 890:	00000ad8 	.word	0x00000ad8

00000894 <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
 894:	b538      	push	{r3, r4, r5, lr}
 896:	4605      	mov	r5, r0
 898:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
 89a:	4608      	mov	r0, r1
 89c:	4b36      	ldr	r3, [pc, #216]	; (978 <_spi_m_sync_init+0xe4>)
 89e:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
 8a0:	b160      	cbz	r0, 8bc <_spi_m_sync_init+0x28>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
 8a2:	2d00      	cmp	r5, #0
 8a4:	d055      	beq.n	952 <_spi_m_sync_init+0xbe>
 8a6:	f640 123f 	movw	r2, #2367	; 0x93f
 8aa:	4934      	ldr	r1, [pc, #208]	; (97c <_spi_m_sync_init+0xe8>)
 8ac:	1c20      	adds	r0, r4, #0
 8ae:	bf18      	it	ne
 8b0:	2001      	movne	r0, #1
 8b2:	4b33      	ldr	r3, [pc, #204]	; (980 <_spi_m_sync_init+0xec>)
 8b4:	4798      	blx	r3

	if (regs == NULL) {
		return ERR_INVALID_ARG;
 8b6:	f06f 000c 	mvn.w	r0, #12
 8ba:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
 8bc:	2d00      	cmp	r5, #0
 8be:	d151      	bne.n	964 <_spi_m_sync_init+0xd0>
 8c0:	f640 123f 	movw	r2, #2367	; 0x93f
 8c4:	492d      	ldr	r1, [pc, #180]	; (97c <_spi_m_sync_init+0xe8>)
 8c6:	2000      	movs	r0, #0
 8c8:	4b2d      	ldr	r3, [pc, #180]	; (980 <_spi_m_sync_init+0xec>)
 8ca:	4798      	blx	r3
	};
}

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
 8cc:	69e3      	ldr	r3, [r4, #28]
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
 8ce:	f013 0f01 	tst.w	r3, #1
 8d2:	d119      	bne.n	908 <_spi_m_sync_init+0x74>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
 8d4:	69e3      	ldr	r3, [r4, #28]
 8d6:	f013 0f03 	tst.w	r3, #3
 8da:	d1fb      	bne.n	8d4 <_spi_m_sync_init+0x40>
static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
 8dc:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
 8de:	f013 0f02 	tst.w	r3, #2
 8e2:	d00b      	beq.n	8fc <_spi_m_sync_init+0x68>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
 8e4:	6823      	ldr	r3, [r4, #0]
 8e6:	f023 0302 	bic.w	r3, r3, #2
 8ea:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
 8ec:	69e3      	ldr	r3, [r4, #28]
 8ee:	f013 0f03 	tst.w	r3, #3
 8f2:	d1fb      	bne.n	8ec <_spi_m_sync_init+0x58>
 8f4:	69e3      	ldr	r3, [r4, #28]
 8f6:	f013 0f02 	tst.w	r3, #2
 8fa:	d1fb      	bne.n	8f4 <_spi_m_sync_init+0x60>
}

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
 8fc:	230d      	movs	r3, #13
 8fe:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
 900:	69e3      	ldr	r3, [r4, #28]
 902:	f013 0f03 	tst.w	r3, #3
 906:	d1fb      	bne.n	900 <_spi_m_sync_init+0x6c>
 908:	69e3      	ldr	r3, [r4, #28]
 90a:	f013 0f01 	tst.w	r3, #1
 90e:	d1fb      	bne.n	908 <_spi_m_sync_init+0x74>
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
 910:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
 912:	f640 1209 	movw	r2, #2313	; 0x909
 916:	4919      	ldr	r1, [pc, #100]	; (97c <_spi_m_sync_init+0xe8>)
 918:	1c20      	adds	r0, r4, #0
 91a:	bf18      	it	ne
 91c:	2001      	movne	r0, #1
 91e:	4b18      	ldr	r3, [pc, #96]	; (980 <_spi_m_sync_init+0xec>)
 920:	4798      	blx	r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
 922:	4b18      	ldr	r3, [pc, #96]	; (984 <_spi_m_sync_init+0xf0>)
 924:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
 926:	69e3      	ldr	r3, [r4, #28]
 928:	f013 0f03 	tst.w	r3, #3
 92c:	d1fb      	bne.n	926 <_spi_m_sync_init+0x92>
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
 92e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 932:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
 934:	69e3      	ldr	r3, [r4, #28]
 936:	f013 0f17 	tst.w	r3, #23
 93a:	d1fb      	bne.n	934 <_spi_m_sync_init+0xa0>
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
 93c:	23fe      	movs	r3, #254	; 0xfe
 93e:	7323      	strb	r3, [r4, #12]
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
 940:	2000      	movs	r0, #0
 942:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
 946:	2301      	movs	r3, #1
 948:	712b      	strb	r3, [r5, #4]

	dev->dummy_byte = regs->dummy_byte;
 94a:	f240 13ff 	movw	r3, #511	; 0x1ff
 94e:	80eb      	strh	r3, [r5, #6]

	return ERR_NONE;
 950:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
 952:	f640 123f 	movw	r2, #2367	; 0x93f
 956:	4909      	ldr	r1, [pc, #36]	; (97c <_spi_m_sync_init+0xe8>)
 958:	2000      	movs	r0, #0
 95a:	4b09      	ldr	r3, [pc, #36]	; (980 <_spi_m_sync_init+0xec>)
 95c:	4798      	blx	r3
		return ERR_INVALID_ARG;
 95e:	f06f 000c 	mvn.w	r0, #12
 962:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
 964:	f640 123f 	movw	r2, #2367	; 0x93f
 968:	4904      	ldr	r1, [pc, #16]	; (97c <_spi_m_sync_init+0xe8>)
 96a:	1c20      	adds	r0, r4, #0
 96c:	bf18      	it	ne
 96e:	2001      	movne	r0, #1
 970:	4b03      	ldr	r3, [pc, #12]	; (980 <_spi_m_sync_init+0xec>)
 972:	4798      	blx	r3
 974:	e7aa      	b.n	8cc <_spi_m_sync_init+0x38>
 976:	bf00      	nop
 978:	00000851 	.word	0x00000851
 97c:	00000b10 	.word	0x00000b10
 980:	00000645 	.word	0x00000645
 984:	0020000c 	.word	0x0020000c

00000988 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
 988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 98c:	4681      	mov	r9, r0
 98e:	460e      	mov	r6, r1
	void *                 hw   = dev->prvt;
 990:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
 992:	f8d1 8000 	ldr.w	r8, [r1]
 996:	684d      	ldr	r5, [r1, #4]
 998:	7907      	ldrb	r7, [r0, #4]

	ASSERT(dev && hw);
 99a:	b1a8      	cbz	r0, 9c8 <_spi_m_sync_trans+0x40>
 99c:	1c20      	adds	r0, r4, #0
 99e:	bf18      	it	ne
 9a0:	2001      	movne	r0, #1
 9a2:	f640 22a3 	movw	r2, #2723	; 0xaa3
 9a6:	492e      	ldr	r1, [pc, #184]	; (a60 <_spi_m_sync_trans+0xd8>)
 9a8:	4b2e      	ldr	r3, [pc, #184]	; (a64 <_spi_m_sync_trans+0xdc>)
 9aa:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
 9ac:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
 9ae:	f013 0f07 	tst.w	r3, #7
 9b2:	d134      	bne.n	a1e <_spi_m_sync_trans+0x96>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
 9b4:	69e0      	ldr	r0, [r4, #28]
 9b6:	f010 0003 	ands.w	r0, r0, #3
 9ba:	d1fb      	bne.n	9b4 <_spi_m_sync_trans+0x2c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
 9bc:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
 9be:	f013 0f02 	tst.w	r3, #2
 9c2:	d030      	beq.n	a26 <_spi_m_sync_trans+0x9e>
 9c4:	4602      	mov	r2, r0
 9c6:	e008      	b.n	9da <_spi_m_sync_trans+0x52>
 9c8:	2000      	movs	r0, #0
 9ca:	e7ea      	b.n	9a2 <_spi_m_sync_trans+0x1a>
	ctrl->rxcnt++;
 9cc:	3201      	adds	r2, #1
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
 9ce:	f013 0f80 	tst.w	r3, #128	; 0x80
 9d2:	d112      	bne.n	9fa <_spi_m_sync_trans+0x72>
		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
 9d4:	68b3      	ldr	r3, [r6, #8]
 9d6:	4283      	cmp	r3, r0
 9d8:	d91e      	bls.n	a18 <_spi_m_sync_trans+0x90>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
 9da:	7e23      	ldrb	r3, [r4, #24]
 9dc:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
 9de:	f013 0f04 	tst.w	r3, #4
 9e2:	d024      	beq.n	a2e <_spi_m_sync_trans+0xa6>
	return ((Sercom *)hw)->SPI.DATA.reg;
 9e4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
 9e6:	2d00      	cmp	r5, #0
 9e8:	d0f0      	beq.n	9cc <_spi_m_sync_trans+0x44>
		*ctrl->rxbuf++ = (uint8_t)data;
 9ea:	7029      	strb	r1, [r5, #0]
		if (ctrl->char_size > 1) {
 9ec:	2f01      	cmp	r7, #1
		*ctrl->rxbuf++ = (uint8_t)data;
 9ee:	bf91      	iteee	ls
 9f0:	3501      	addls	r5, #1
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
 9f2:	0a09      	lsrhi	r1, r1, #8
 9f4:	7069      	strbhi	r1, [r5, #1]
 9f6:	3502      	addhi	r5, #2
 9f8:	e7e8      	b.n	9cc <_spi_m_sync_trans+0x44>
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
 9fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 9fe:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
 a00:	2380      	movs	r3, #128	; 0x80
 a02:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
 a04:	f06f 0012 	mvn.w	r0, #18
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
 a08:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
 a0a:	f013 0f03 	tst.w	r3, #3
 a0e:	d0fb      	beq.n	a08 <_spi_m_sync_trans+0x80>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
 a10:	2303      	movs	r3, #3
 a12:	7623      	strb	r3, [r4, #24]
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
 a14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
 a18:	4293      	cmp	r3, r2
 a1a:	d8de      	bhi.n	9da <_spi_m_sync_trans+0x52>
 a1c:	e7f4      	b.n	a08 <_spi_m_sync_trans+0x80>
		return ERR_BUSY;
 a1e:	f06f 0003 	mvn.w	r0, #3
 a22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ERR_NOT_INITIALIZED;
 a26:	f06f 0013 	mvn.w	r0, #19
 a2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ctrl.rxcnt >= ctrl.txcnt) {
 a2e:	4290      	cmp	r0, r2
 a30:	d8cd      	bhi.n	9ce <_spi_m_sync_trans+0x46>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
 a32:	f013 0f01 	tst.w	r3, #1
 a36:	d0ca      	beq.n	9ce <_spi_m_sync_trans+0x46>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
 a38:	f8b9 1006 	ldrh.w	r1, [r9, #6]
	if (ctrl->txbuf) {
 a3c:	f1b8 0f00 	cmp.w	r8, #0
 a40:	d00b      	beq.n	a5a <_spi_m_sync_trans+0xd2>
		data = *ctrl->txbuf++;
 a42:	f898 1000 	ldrb.w	r1, [r8]
		if (ctrl->char_size > 1) {
 a46:	2f01      	cmp	r7, #1
		data = *ctrl->txbuf++;
 a48:	bf91      	iteee	ls
 a4a:	f108 0801 	addls.w	r8, r8, #1
			data |= (*ctrl->txbuf) << 8;
 a4e:	f898 e001 	ldrbhi.w	lr, [r8, #1]
 a52:	ea41 210e 	orrhi.w	r1, r1, lr, lsl #8
			ctrl->txbuf++;
 a56:	f108 0802 	addhi.w	r8, r8, #2
	ctrl->txcnt++;
 a5a:	3001      	adds	r0, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
 a5c:	62a1      	str	r1, [r4, #40]	; 0x28
 a5e:	e7b6      	b.n	9ce <_spi_m_sync_trans+0x46>
 a60:	00000b10 	.word	0x00000b10
 a64:	00000645 	.word	0x00000645

00000a68 <main>:
#include <atmel_start.h>

int main(void)
{
 a68:	b508      	push	{r3, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
 a6a:	4b01      	ldr	r3, [pc, #4]	; (a70 <main+0x8>)
 a6c:	4798      	blx	r3
 a6e:	e7fe      	b.n	a6e <main+0x6>
 a70:	000002d1 	.word	0x000002d1

00000a74 <__libc_init_array>:
 a74:	b570      	push	{r4, r5, r6, lr}
 a76:	4e0d      	ldr	r6, [pc, #52]	; (aac <__libc_init_array+0x38>)
 a78:	4c0d      	ldr	r4, [pc, #52]	; (ab0 <__libc_init_array+0x3c>)
 a7a:	1ba4      	subs	r4, r4, r6
 a7c:	10a4      	asrs	r4, r4, #2
 a7e:	2500      	movs	r5, #0
 a80:	42a5      	cmp	r5, r4
 a82:	d109      	bne.n	a98 <__libc_init_array+0x24>
 a84:	4e0b      	ldr	r6, [pc, #44]	; (ab4 <__libc_init_array+0x40>)
 a86:	4c0c      	ldr	r4, [pc, #48]	; (ab8 <__libc_init_array+0x44>)
 a88:	f000 f850 	bl	b2c <_init>
 a8c:	1ba4      	subs	r4, r4, r6
 a8e:	10a4      	asrs	r4, r4, #2
 a90:	2500      	movs	r5, #0
 a92:	42a5      	cmp	r5, r4
 a94:	d105      	bne.n	aa2 <__libc_init_array+0x2e>
 a96:	bd70      	pop	{r4, r5, r6, pc}
 a98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 a9c:	4798      	blx	r3
 a9e:	3501      	adds	r5, #1
 aa0:	e7ee      	b.n	a80 <__libc_init_array+0xc>
 aa2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 aa6:	4798      	blx	r3
 aa8:	3501      	adds	r5, #1
 aaa:	e7f2      	b.n	a92 <__libc_init_array+0x1e>
 aac:	00000b38 	.word	0x00000b38
 ab0:	00000b38 	.word	0x00000b38
 ab4:	00000b38 	.word	0x00000b38
 ab8:	00000b3c 	.word	0x00000b3c
 abc:	682f2e2e 	.word	0x682f2e2e
 ac0:	732f6c61 	.word	0x732f6c61
 ac4:	682f6372 	.word	0x682f6372
 ac8:	735f6c61 	.word	0x735f6c61
 acc:	6d5f6970 	.word	0x6d5f6970
 ad0:	6e79735f 	.word	0x6e79735f
 ad4:	00632e63 	.word	0x00632e63
 ad8:	40003000 	.word	0x40003000
 adc:	40003400 	.word	0x40003400
 ae0:	41012000 	.word	0x41012000
 ae4:	41014000 	.word	0x41014000
 ae8:	43000000 	.word	0x43000000
 aec:	43000400 	.word	0x43000400
 af0:	43000800 	.word	0x43000800
 af4:	43000c00 	.word	0x43000c00

00000af8 <_i2cms>:
	...
 b10:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
 b20:	65735f6c 6d6f6372 0000632e              l_sercom.c..

00000b2c <_init>:
 b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 b2e:	bf00      	nop
 b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 b32:	bc08      	pop	{r3}
 b34:	469e      	mov	lr, r3
 b36:	4770      	bx	lr

00000b38 <__init_array_start>:
 b38:	00000289 	.word	0x00000289

00000b3c <_fini>:
 b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 b3e:	bf00      	nop
 b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 b42:	bc08      	pop	{r3}
 b44:	469e      	mov	lr, r3
 b46:	4770      	bx	lr

00000b48 <__fini_array_start>:
 b48:	00000265 	.word	0x00000265
