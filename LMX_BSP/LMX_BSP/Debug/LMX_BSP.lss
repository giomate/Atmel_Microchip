
LMX_BSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001264  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000000  20000000  20000000  00011264  2**0
                  CONTENTS
  2 .bkupram      00000000  47000000  47000000  00011264  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00011264  2**0
                  CONTENTS
  4 .bss          00000064  20000000  20000000  00020000  2**2
                  ALLOC
  5 .stack        00010004  20000064  20000064  00020000  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00011264  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00011292  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001dfad  00000000  00000000  000112eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000027fb  00000000  00000000  0002f298  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000b8b7  00000000  00000000  00031a93  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000008c0  00000000  00000000  0003d34a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000cf0  00000000  00000000  0003dc0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00031a4d  00000000  00000000  0003e8fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001027c  00000000  00000000  00070347  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0011d357  00000000  00000000  000805c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00001648  00000000  00000000  0019d91c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	68 00 01 20 e1 02 00 00 dd 02 00 00 dd 02 00 00     h.. ............
      10:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
	...
      2c:	dd 02 00 00 dd 02 00 00 00 00 00 00 dd 02 00 00     ................
      3c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      4c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      5c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      6c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      7c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      8c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      9c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      ac:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      bc:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      cc:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      dc:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
	...
      f4:	3d 0b 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     =...............
     104:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     114:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     124:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     134:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     144:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     154:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     164:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     174:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     184:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     194:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1a4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1b4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1c4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1d4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1e4:	dd 02 00 00 dd 02 00 00 cd 0f 00 00 dd 02 00 00     ................
     1f4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     204:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     214:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     224:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     234:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     244:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     254:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000000 	.word	0x20000000
     280:	00000000 	.word	0x00000000
     284:	00001264 	.word	0x00001264

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00001264 	.word	0x00001264
     2c4:	20000004 	.word	0x20000004
     2c8:	00001264 	.word	0x00001264
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b01      	ldr	r3, [pc, #4]	; (2d8 <atmel_start_init+0x8>)
     2d4:	4798      	blx	r3
     2d6:	bd08      	pop	{r3, pc}
     2d8:	0000049d 	.word	0x0000049d

000002dc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2dc:	e7fe      	b.n	2dc <Dummy_Handler>
	...

000002e0 <Reset_Handler>:
{
     2e0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2e2:	4b1c      	ldr	r3, [pc, #112]	; (354 <Reset_Handler+0x74>)
     2e4:	4a1c      	ldr	r2, [pc, #112]	; (358 <Reset_Handler+0x78>)
     2e6:	429a      	cmp	r2, r3
     2e8:	d010      	beq.n	30c <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2ea:	4b1c      	ldr	r3, [pc, #112]	; (35c <Reset_Handler+0x7c>)
     2ec:	4a19      	ldr	r2, [pc, #100]	; (354 <Reset_Handler+0x74>)
     2ee:	429a      	cmp	r2, r3
     2f0:	d20c      	bcs.n	30c <Reset_Handler+0x2c>
     2f2:	3b01      	subs	r3, #1
     2f4:	1a9b      	subs	r3, r3, r2
     2f6:	f023 0303 	bic.w	r3, r3, #3
     2fa:	3304      	adds	r3, #4
     2fc:	4413      	add	r3, r2
     2fe:	4916      	ldr	r1, [pc, #88]	; (358 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     300:	f851 0b04 	ldr.w	r0, [r1], #4
     304:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     308:	429a      	cmp	r2, r3
     30a:	d1f9      	bne.n	300 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     30c:	4b14      	ldr	r3, [pc, #80]	; (360 <Reset_Handler+0x80>)
     30e:	4a15      	ldr	r2, [pc, #84]	; (364 <Reset_Handler+0x84>)
     310:	429a      	cmp	r2, r3
     312:	d20a      	bcs.n	32a <Reset_Handler+0x4a>
     314:	3b01      	subs	r3, #1
     316:	1a9b      	subs	r3, r3, r2
     318:	f023 0303 	bic.w	r3, r3, #3
     31c:	3304      	adds	r3, #4
     31e:	4413      	add	r3, r2
                *pDest++ = 0;
     320:	2100      	movs	r1, #0
     322:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     326:	4293      	cmp	r3, r2
     328:	d1fb      	bne.n	322 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     32a:	4b0f      	ldr	r3, [pc, #60]	; (368 <Reset_Handler+0x88>)
     32c:	4a0f      	ldr	r2, [pc, #60]	; (36c <Reset_Handler+0x8c>)
     32e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     332:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     334:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     338:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     33c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     340:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     344:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     348:	4b09      	ldr	r3, [pc, #36]	; (370 <Reset_Handler+0x90>)
     34a:	4798      	blx	r3
        main();
     34c:	4b09      	ldr	r3, [pc, #36]	; (374 <Reset_Handler+0x94>)
     34e:	4798      	blx	r3
     350:	e7fe      	b.n	350 <Reset_Handler+0x70>
     352:	bf00      	nop
     354:	20000000 	.word	0x20000000
     358:	00001264 	.word	0x00001264
     35c:	20000000 	.word	0x20000000
     360:	20000064 	.word	0x20000064
     364:	20000000 	.word	0x20000000
     368:	e000ed00 	.word	0xe000ed00
     36c:	00000000 	.word	0x00000000
     370:	00001009 	.word	0x00001009
     374:	00000fed 	.word	0x00000fed

00000378 <EVENT_SYSTEM_0_init>:

struct spi_m_sync_descriptor SPI_0;
struct timer_descriptor      TIMER_0;

void EVENT_SYSTEM_0_init(void)
{
     378:	b508      	push	{r3, lr}
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     37a:	4b07      	ldr	r3, [pc, #28]	; (398 <EVENT_SYSTEM_0_init+0x20>)
     37c:	2240      	movs	r2, #64	; 0x40
     37e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
     382:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     386:	4a05      	ldr	r2, [pc, #20]	; (39c <EVENT_SYSTEM_0_init+0x24>)
     388:	6993      	ldr	r3, [r2, #24]
     38a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     38e:	6193      	str	r3, [r2, #24]
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_1, CONF_GCLK_EVSYS_CHANNEL_1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);

	event_system_init();
     390:	4b03      	ldr	r3, [pc, #12]	; (3a0 <EVENT_SYSTEM_0_init+0x28>)
     392:	4798      	blx	r3
     394:	bd08      	pop	{r3, pc}
     396:	bf00      	nop
     398:	40001c00 	.word	0x40001c00
     39c:	40000800 	.word	0x40000800
     3a0:	00000629 	.word	0x00000629

000003a4 <SPI_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     3a4:	4b28      	ldr	r3, [pc, #160]	; (448 <SPI_0_PORT_init+0xa4>)
     3a6:	2210      	movs	r2, #16
     3a8:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     3aa:	609a      	str	r2, [r3, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3ac:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     3b0:	629a      	str	r2, [r3, #40]	; 0x28
     3b2:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     3b6:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3b8:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
     3bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3c0:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3c8:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     3cc:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     3d0:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3d4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     3d8:	2220      	movs	r2, #32
     3da:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     3dc:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3de:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     3e2:	629a      	str	r2, [r3, #40]	; 0x28
     3e4:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3e6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     3ea:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3ee:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3f6:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3fa:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     3fe:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     402:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     406:	2240      	movs	r2, #64	; 0x40
     408:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     40a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     40e:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     412:	629a      	str	r2, [r3, #40]	; 0x28
     414:	4a0d      	ldr	r2, [pc, #52]	; (44c <SPI_0_PORT_init+0xa8>)
     416:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     418:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
     41c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     420:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     424:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
     428:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     42c:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     430:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     434:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     438:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     43c:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     440:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
     444:	4770      	bx	lr
     446:	bf00      	nop
     448:	41008000 	.word	0x41008000
     44c:	c0020000 	.word	0xc0020000

00000450 <SPI_0_CLOCK_init>:
     450:	4b06      	ldr	r3, [pc, #24]	; (46c <SPI_0_CLOCK_init+0x1c>)
     452:	2242      	movs	r2, #66	; 0x42
     454:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     458:	224b      	movs	r2, #75	; 0x4b
     45a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     45e:	4a04      	ldr	r2, [pc, #16]	; (470 <SPI_0_CLOCK_init+0x20>)
     460:	6953      	ldr	r3, [r2, #20]
     462:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     466:	6153      	str	r3, [r2, #20]
     468:	4770      	bx	lr
     46a:	bf00      	nop
     46c:	40001c00 	.word	0x40001c00
     470:	40000800 	.word	0x40000800

00000474 <SPI_0_init>:

	hri_mclk_set_APBAMASK_SERCOM0_bit(MCLK);
}

void SPI_0_init(void)
{
     474:	b508      	push	{r3, lr}
	SPI_0_CLOCK_init();
     476:	4b04      	ldr	r3, [pc, #16]	; (488 <SPI_0_init+0x14>)
     478:	4798      	blx	r3
	spi_m_sync_init(&SPI_0, SERCOM0);
     47a:	4904      	ldr	r1, [pc, #16]	; (48c <SPI_0_init+0x18>)
     47c:	4804      	ldr	r0, [pc, #16]	; (490 <SPI_0_init+0x1c>)
     47e:	4b05      	ldr	r3, [pc, #20]	; (494 <SPI_0_init+0x20>)
     480:	4798      	blx	r3
	SPI_0_PORT_init();
     482:	4b05      	ldr	r3, [pc, #20]	; (498 <SPI_0_init+0x24>)
     484:	4798      	blx	r3
     486:	bd08      	pop	{r3, pc}
     488:	00000451 	.word	0x00000451
     48c:	40003000 	.word	0x40003000
     490:	20000020 	.word	0x20000020
     494:	00000635 	.word	0x00000635
     498:	000003a5 	.word	0x000003a5

0000049c <system_init>:

	timer_init(&TIMER_0, TC0, _tc_get_timer());
}

void system_init(void)
{
     49c:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     49e:	4b56      	ldr	r3, [pc, #344]	; (5f8 <system_init+0x15c>)
     4a0:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     4a2:	4b56      	ldr	r3, [pc, #344]	; (5fc <system_init+0x160>)
     4a4:	2208      	movs	r2, #8
     4a6:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     4a8:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4aa:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     4ae:	629a      	str	r2, [r3, #40]	; 0x28
     4b0:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     4b4:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4b6:	f893 1043 	ldrb.w	r1, [r3, #67]	; 0x43
	tmp &= ~PORT_PINCFG_PMUXEN;
     4ba:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4be:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     4c2:	2180      	movs	r1, #128	; 0x80
     4c4:	6199      	str	r1, [r3, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     4c6:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4c8:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     4cc:	6299      	str	r1, [r3, #40]	; 0x28
     4ce:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4d0:	f893 1047 	ldrb.w	r1, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
     4d4:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4d8:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     4dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
     4e0:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4e4:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
     4e8:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     4ec:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4f0:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     4f4:	f893 10ce 	ldrb.w	r1, [r3, #206]	; 0xce
     4f8:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     4fc:	f883 10ce 	strb.w	r1, [r3, #206]	; 0xce
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     500:	f893 10ce 	ldrb.w	r1, [r3, #206]	; 0xce
	tmp &= ~PORT_PINCFG_PMUXEN;
     504:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     508:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     50c:	f883 10ce 	strb.w	r1, [r3, #206]	; 0xce
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     510:	f893 10b7 	ldrb.w	r1, [r3, #183]	; 0xb7
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     514:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     518:	f041 010c 	orr.w	r1, r1, #12
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     51c:	f883 10b7 	strb.w	r1, [r3, #183]	; 0xb7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     520:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     524:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     528:	4c35      	ldr	r4, [pc, #212]	; (600 <system_init+0x164>)
     52a:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
     52e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     532:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     536:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     53a:	f893 00cf 	ldrb.w	r0, [r3, #207]	; 0xcf
     53e:	f040 0004 	orr.w	r0, r0, #4
     542:	f883 00cf 	strb.w	r0, [r3, #207]	; 0xcf
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     546:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     54a:	f893 00cf 	ldrb.w	r0, [r3, #207]	; 0xcf
	tmp &= ~PORT_PINCFG_PMUXEN;
     54e:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     552:	f040 0001 	orr.w	r0, r0, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     556:	f883 00cf 	strb.w	r0, [r3, #207]	; 0xcf
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     55a:	f893 00b7 	ldrb.w	r0, [r3, #183]	; 0xb7
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     55e:	f000 000f 	and.w	r0, r0, #15
	tmp |= PORT_PMUX_PMUXO(data);
     562:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     566:	f883 00b7 	strb.w	r0, [r3, #183]	; 0xb7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     56a:	2002      	movs	r0, #2
     56c:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     570:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     574:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
     578:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
     57c:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     580:	f893 0141 	ldrb.w	r0, [r3, #321]	; 0x141
	tmp &= ~PORT_PINCFG_PMUXEN;
     584:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     588:	f883 0141 	strb.w	r0, [r3, #321]	; 0x141
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     58c:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     590:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     594:	f8c3 4128 	str.w	r4, [r3, #296]	; 0x128
     598:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     59c:	f893 214f 	ldrb.w	r2, [r3, #335]	; 0x14f
	tmp &= ~PORT_PINCFG_PMUXEN;
     5a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5a4:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5a8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     5ac:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     5b0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     5b8:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     5bc:	4a11      	ldr	r2, [pc, #68]	; (604 <system_init+0x168>)
     5be:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5c2:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
	tmp &= ~PORT_PINCFG_PMUXEN;
     5c6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5ca:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);

	EVENT_SYSTEM_0_init();
     5ce:	4b0e      	ldr	r3, [pc, #56]	; (608 <system_init+0x16c>)
     5d0:	4798      	blx	r3

	SPI_0_init();
     5d2:	4b0e      	ldr	r3, [pc, #56]	; (60c <system_init+0x170>)
     5d4:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     5d6:	4a0e      	ldr	r2, [pc, #56]	; (610 <system_init+0x174>)
     5d8:	6953      	ldr	r3, [r2, #20]
     5da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     5de:	6153      	str	r3, [r2, #20]
     5e0:	224b      	movs	r2, #75	; 0x4b
     5e2:	4b0c      	ldr	r3, [pc, #48]	; (614 <system_init+0x178>)
     5e4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	timer_init(&TIMER_0, TC0, _tc_get_timer());
     5e8:	4b0b      	ldr	r3, [pc, #44]	; (618 <system_init+0x17c>)
     5ea:	4798      	blx	r3
     5ec:	4602      	mov	r2, r0
     5ee:	490b      	ldr	r1, [pc, #44]	; (61c <system_init+0x180>)
     5f0:	480b      	ldr	r0, [pc, #44]	; (620 <system_init+0x184>)
     5f2:	4b0c      	ldr	r3, [pc, #48]	; (624 <system_init+0x188>)
     5f4:	4798      	blx	r3
     5f6:	bd10      	pop	{r4, pc}
     5f8:	000008f5 	.word	0x000008f5
     5fc:	41008000 	.word	0x41008000
     600:	40008000 	.word	0x40008000
     604:	c0000004 	.word	0xc0000004
     608:	00000379 	.word	0x00000379
     60c:	00000475 	.word	0x00000475
     610:	40000800 	.word	0x40000800
     614:	40001c00 	.word	0x40001c00
     618:	00000fc7 	.word	0x00000fc7
     61c:	40003800 	.word	0x40003800
     620:	20000038 	.word	0x20000038
     624:	00000815 	.word	0x00000815

00000628 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
     628:	b508      	push	{r3, lr}
	return _event_system_init();
     62a:	4b01      	ldr	r3, [pc, #4]	; (630 <event_system_init+0x8>)
     62c:	4798      	blx	r3
}
     62e:	bd08      	pop	{r3, pc}
     630:	00000961 	.word	0x00000961

00000634 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
     634:	b538      	push	{r3, r4, r5, lr}
     636:	460d      	mov	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
     638:	4604      	mov	r4, r0
     63a:	b1b8      	cbz	r0, 66c <spi_m_sync_init+0x38>
     63c:	1c08      	adds	r0, r1, #0
     63e:	bf18      	it	ne
     640:	2001      	movne	r0, #1
     642:	2240      	movs	r2, #64	; 0x40
     644:	490a      	ldr	r1, [pc, #40]	; (670 <spi_m_sync_init+0x3c>)
     646:	4b0b      	ldr	r3, [pc, #44]	; (674 <spi_m_sync_init+0x40>)
     648:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
     64a:	4620      	mov	r0, r4
     64c:	f840 5f04 	str.w	r5, [r0, #4]!
	rc            = _spi_m_sync_init(&spi->dev, hw);
     650:	4629      	mov	r1, r5
     652:	4b09      	ldr	r3, [pc, #36]	; (678 <spi_m_sync_init+0x44>)
     654:	4798      	blx	r3

	if (rc < 0) {
     656:	2800      	cmp	r0, #0
     658:	db07      	blt.n	66a <spi_m_sync_init+0x36>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
     65a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     65e:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
     660:	4b06      	ldr	r3, [pc, #24]	; (67c <spi_m_sync_init+0x48>)
     662:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
     664:	4b06      	ldr	r3, [pc, #24]	; (680 <spi_m_sync_init+0x4c>)
     666:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
     668:	2000      	movs	r0, #0
}
     66a:	bd38      	pop	{r3, r4, r5, pc}
     66c:	2000      	movs	r0, #0
     66e:	e7e8      	b.n	642 <spi_m_sync_init+0xe>
     670:	00001050 	.word	0x00001050
     674:	0000088d 	.word	0x0000088d
     678:	00000bc5 	.word	0x00000bc5
     67c:	00000701 	.word	0x00000701
     680:	000006c5 	.word	0x000006c5

00000684 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
     684:	b530      	push	{r4, r5, lr}
     686:	b085      	sub	sp, #20
     688:	460c      	mov	r4, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
     68a:	4605      	mov	r5, r0
     68c:	b190      	cbz	r0, 6b4 <spi_m_sync_transfer+0x30>
     68e:	1c08      	adds	r0, r1, #0
     690:	bf18      	it	ne
     692:	2001      	movne	r0, #1
     694:	22b3      	movs	r2, #179	; 0xb3
     696:	4908      	ldr	r1, [pc, #32]	; (6b8 <spi_m_sync_transfer+0x34>)
     698:	4b08      	ldr	r3, [pc, #32]	; (6bc <spi_m_sync_transfer+0x38>)
     69a:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
     69c:	6823      	ldr	r3, [r4, #0]
     69e:	9301      	str	r3, [sp, #4]
	msg.rxbuf = p_xfer->rxbuf;
     6a0:	6863      	ldr	r3, [r4, #4]
     6a2:	9302      	str	r3, [sp, #8]
	msg.size  = p_xfer->size;
     6a4:	68a3      	ldr	r3, [r4, #8]
     6a6:	9303      	str	r3, [sp, #12]
	return _spi_m_sync_trans(&spi->dev, &msg);
     6a8:	a901      	add	r1, sp, #4
     6aa:	1d28      	adds	r0, r5, #4
     6ac:	4b04      	ldr	r3, [pc, #16]	; (6c0 <spi_m_sync_transfer+0x3c>)
     6ae:	4798      	blx	r3
}
     6b0:	b005      	add	sp, #20
     6b2:	bd30      	pop	{r4, r5, pc}
     6b4:	2000      	movs	r0, #0
     6b6:	e7ed      	b.n	694 <spi_m_sync_transfer+0x10>
     6b8:	00001050 	.word	0x00001050
     6bc:	0000088d 	.word	0x0000088d
     6c0:	00000cb9 	.word	0x00000cb9

000006c4 <_spi_m_sync_io_write>:
{
     6c4:	b570      	push	{r4, r5, r6, lr}
     6c6:	b084      	sub	sp, #16
     6c8:	460e      	mov	r6, r1
     6ca:	4615      	mov	r5, r2
	ASSERT(io);
     6cc:	4604      	mov	r4, r0
     6ce:	22a3      	movs	r2, #163	; 0xa3
     6d0:	4908      	ldr	r1, [pc, #32]	; (6f4 <_spi_m_sync_io_write+0x30>)
     6d2:	3000      	adds	r0, #0
     6d4:	bf18      	it	ne
     6d6:	2001      	movne	r0, #1
     6d8:	4b07      	ldr	r3, [pc, #28]	; (6f8 <_spi_m_sync_io_write+0x34>)
     6da:	4798      	blx	r3
	xfer.rxbuf = 0;
     6dc:	2300      	movs	r3, #0
     6de:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
     6e0:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
     6e2:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
     6e4:	a901      	add	r1, sp, #4
     6e6:	f1a4 000c 	sub.w	r0, r4, #12
     6ea:	4b04      	ldr	r3, [pc, #16]	; (6fc <_spi_m_sync_io_write+0x38>)
     6ec:	4798      	blx	r3
}
     6ee:	b004      	add	sp, #16
     6f0:	bd70      	pop	{r4, r5, r6, pc}
     6f2:	bf00      	nop
     6f4:	00001050 	.word	0x00001050
     6f8:	0000088d 	.word	0x0000088d
     6fc:	00000685 	.word	0x00000685

00000700 <_spi_m_sync_io_read>:
{
     700:	b570      	push	{r4, r5, r6, lr}
     702:	b084      	sub	sp, #16
     704:	460e      	mov	r6, r1
     706:	4615      	mov	r5, r2
	ASSERT(io);
     708:	4604      	mov	r4, r0
     70a:	2287      	movs	r2, #135	; 0x87
     70c:	4908      	ldr	r1, [pc, #32]	; (730 <_spi_m_sync_io_read+0x30>)
     70e:	3000      	adds	r0, #0
     710:	bf18      	it	ne
     712:	2001      	movne	r0, #1
     714:	4b07      	ldr	r3, [pc, #28]	; (734 <_spi_m_sync_io_read+0x34>)
     716:	4798      	blx	r3
	xfer.rxbuf = buf;
     718:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
     71a:	2300      	movs	r3, #0
     71c:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
     71e:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
     720:	a901      	add	r1, sp, #4
     722:	f1a4 000c 	sub.w	r0, r4, #12
     726:	4b04      	ldr	r3, [pc, #16]	; (738 <_spi_m_sync_io_read+0x38>)
     728:	4798      	blx	r3
}
     72a:	b004      	add	sp, #16
     72c:	bd70      	pop	{r4, r5, r6, pc}
     72e:	bf00      	nop
     730:	00001050 	.word	0x00001050
     734:	0000088d 	.word	0x0000088d
     738:	00000685 	.word	0x00000685

0000073c <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     73c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     73e:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     740:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
     742:	b12f      	cbz	r7, 750 <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
     744:	688d      	ldr	r5, [r1, #8]
     746:	463c      	mov	r4, r7
     748:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     74a:	f1c2 0e01 	rsb	lr, r2, #1
     74e:	e00b      	b.n	768 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
     750:	4b0e      	ldr	r3, [pc, #56]	; (78c <timer_add_timer_task+0x50>)
     752:	4798      	blx	r3
		return;
     754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     756:	4473      	add	r3, lr
     758:	68a0      	ldr	r0, [r4, #8]
     75a:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
     75c:	42ab      	cmp	r3, r5
     75e:	d20a      	bcs.n	776 <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
     760:	6823      	ldr	r3, [r4, #0]
     762:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     764:	b153      	cbz	r3, 77c <timer_add_timer_task+0x40>
     766:	461c      	mov	r4, r3
		if (it->time_label <= time) {
     768:	6863      	ldr	r3, [r4, #4]
     76a:	4293      	cmp	r3, r2
     76c:	d8f3      	bhi.n	756 <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
     76e:	68a0      	ldr	r0, [r4, #8]
     770:	4403      	add	r3, r0
     772:	1a9b      	subs	r3, r3, r2
     774:	e7f2      	b.n	75c <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
     776:	42a7      	cmp	r7, r4
     778:	d004      	beq.n	784 <timer_add_timer_task+0x48>
     77a:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
     77c:	4620      	mov	r0, r4
     77e:	4b04      	ldr	r3, [pc, #16]	; (790 <timer_add_timer_task+0x54>)
     780:	4798      	blx	r3
     782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
     784:	4660      	mov	r0, ip
     786:	4b01      	ldr	r3, [pc, #4]	; (78c <timer_add_timer_task+0x50>)
     788:	4798      	blx	r3
     78a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     78c:	000008b5 	.word	0x000008b5
     790:	000008e1 	.word	0x000008e1

00000794 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
     798:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
     79a:	6907      	ldr	r7, [r0, #16]
     79c:	3701      	adds	r7, #1
     79e:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     7a0:	7e03      	ldrb	r3, [r0, #24]
     7a2:	f013 0f01 	tst.w	r3, #1
     7a6:	d113      	bne.n	7d0 <timer_process_counted+0x3c>
     7a8:	7e03      	ldrb	r3, [r0, #24]
     7aa:	f013 0f02 	tst.w	r3, #2
     7ae:	d10f      	bne.n	7d0 <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
     7b0:	b354      	cbz	r4, 808 <timer_process_counted+0x74>
     7b2:	6863      	ldr	r3, [r4, #4]
     7b4:	1afb      	subs	r3, r7, r3
     7b6:	68a2      	ldr	r2, [r4, #8]
     7b8:	4293      	cmp	r3, r2
     7ba:	d307      	bcc.n	7cc <timer_process_counted+0x38>
     7bc:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
     7be:	f100 0814 	add.w	r8, r0, #20
     7c2:	f8df 9048 	ldr.w	r9, [pc, #72]	; 80c <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
     7c6:	f8df a048 	ldr.w	sl, [pc, #72]	; 810 <timer_process_counted+0x7c>
     7ca:	e012      	b.n	7f2 <timer_process_counted+0x5e>
     7cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     7d0:	7e03      	ldrb	r3, [r0, #24]
     7d2:	f043 0302 	orr.w	r3, r3, #2
     7d6:	7603      	strb	r3, [r0, #24]
		return;
     7d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     7dc:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
     7de:	68e3      	ldr	r3, [r4, #12]
     7e0:	4620      	mov	r0, r4
     7e2:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
     7e4:	b185      	cbz	r5, 808 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
     7e6:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
     7e8:	686b      	ldr	r3, [r5, #4]
     7ea:	1afb      	subs	r3, r7, r3
     7ec:	68aa      	ldr	r2, [r5, #8]
     7ee:	4293      	cmp	r3, r2
     7f0:	d30a      	bcc.n	808 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
     7f2:	4640      	mov	r0, r8
     7f4:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
     7f6:	7c23      	ldrb	r3, [r4, #16]
     7f8:	2b01      	cmp	r3, #1
     7fa:	d1ef      	bne.n	7dc <timer_process_counted+0x48>
			tmp->time_label = time;
     7fc:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     7fe:	463a      	mov	r2, r7
     800:	4621      	mov	r1, r4
     802:	4640      	mov	r0, r8
     804:	47d0      	blx	sl
     806:	e7e9      	b.n	7dc <timer_process_counted+0x48>
     808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     80c:	000008e9 	.word	0x000008e9
     810:	0000073d 	.word	0x0000073d

00000814 <timer_init>:
{
     814:	b538      	push	{r3, r4, r5, lr}
     816:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     818:	4604      	mov	r4, r0
     81a:	b178      	cbz	r0, 83c <timer_init+0x28>
     81c:	1c08      	adds	r0, r1, #0
     81e:	bf18      	it	ne
     820:	2001      	movne	r0, #1
     822:	223b      	movs	r2, #59	; 0x3b
     824:	4906      	ldr	r1, [pc, #24]	; (840 <timer_init+0x2c>)
     826:	4b07      	ldr	r3, [pc, #28]	; (844 <timer_init+0x30>)
     828:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     82a:	4629      	mov	r1, r5
     82c:	4620      	mov	r0, r4
     82e:	4b06      	ldr	r3, [pc, #24]	; (848 <timer_init+0x34>)
     830:	4798      	blx	r3
	descr->time                           = 0;
     832:	2000      	movs	r0, #0
     834:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     836:	4b05      	ldr	r3, [pc, #20]	; (84c <timer_init+0x38>)
     838:	6023      	str	r3, [r4, #0]
}
     83a:	bd38      	pop	{r3, r4, r5, pc}
     83c:	2000      	movs	r0, #0
     83e:	e7f0      	b.n	822 <timer_init+0xe>
     840:	0000106c 	.word	0x0000106c
     844:	0000088d 	.word	0x0000088d
     848:	00000df9 	.word	0x00000df9
     84c:	00000795 	.word	0x00000795

00000850 <timer_start>:
{
     850:	b510      	push	{r4, lr}
	ASSERT(descr);
     852:	4604      	mov	r4, r0
     854:	2253      	movs	r2, #83	; 0x53
     856:	4909      	ldr	r1, [pc, #36]	; (87c <timer_start+0x2c>)
     858:	3000      	adds	r0, #0
     85a:	bf18      	it	ne
     85c:	2001      	movne	r0, #1
     85e:	4b08      	ldr	r3, [pc, #32]	; (880 <timer_start+0x30>)
     860:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
     862:	4620      	mov	r0, r4
     864:	4b07      	ldr	r3, [pc, #28]	; (884 <timer_start+0x34>)
     866:	4798      	blx	r3
     868:	b920      	cbnz	r0, 874 <timer_start+0x24>
	_timer_start(&descr->device);
     86a:	4620      	mov	r0, r4
     86c:	4b06      	ldr	r3, [pc, #24]	; (888 <timer_start+0x38>)
     86e:	4798      	blx	r3
	return ERR_NONE;
     870:	2000      	movs	r0, #0
     872:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
     874:	f06f 0010 	mvn.w	r0, #16
}
     878:	bd10      	pop	{r4, pc}
     87a:	bf00      	nop
     87c:	0000106c 	.word	0x0000106c
     880:	0000088d 	.word	0x0000088d
     884:	00000fb5 	.word	0x00000fb5
     888:	00000fa1 	.word	0x00000fa1

0000088c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     88c:	b900      	cbnz	r0, 890 <assert+0x4>
		__asm("BKPT #0");
     88e:	be00      	bkpt	0x0000
     890:	4770      	bx	lr

00000892 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     892:	6803      	ldr	r3, [r0, #0]
     894:	b14b      	cbz	r3, 8aa <is_list_element+0x18>
		if (it == element) {
     896:	428b      	cmp	r3, r1
     898:	d009      	beq.n	8ae <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
     89a:	681b      	ldr	r3, [r3, #0]
     89c:	b11b      	cbz	r3, 8a6 <is_list_element+0x14>
		if (it == element) {
     89e:	4299      	cmp	r1, r3
     8a0:	d1fb      	bne.n	89a <is_list_element+0x8>
			return true;
     8a2:	2001      	movs	r0, #1
		}
	}

	return false;
}
     8a4:	4770      	bx	lr
	return false;
     8a6:	2000      	movs	r0, #0
     8a8:	4770      	bx	lr
     8aa:	2000      	movs	r0, #0
     8ac:	4770      	bx	lr
			return true;
     8ae:	2001      	movs	r0, #1
     8b0:	4770      	bx	lr
	...

000008b4 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
     8b4:	b538      	push	{r3, r4, r5, lr}
     8b6:	4604      	mov	r4, r0
     8b8:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
     8ba:	4b06      	ldr	r3, [pc, #24]	; (8d4 <list_insert_as_head+0x20>)
     8bc:	4798      	blx	r3
     8be:	f080 0001 	eor.w	r0, r0, #1
     8c2:	2239      	movs	r2, #57	; 0x39
     8c4:	4904      	ldr	r1, [pc, #16]	; (8d8 <list_insert_as_head+0x24>)
     8c6:	b2c0      	uxtb	r0, r0
     8c8:	4b04      	ldr	r3, [pc, #16]	; (8dc <list_insert_as_head+0x28>)
     8ca:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
     8cc:	6823      	ldr	r3, [r4, #0]
     8ce:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
     8d0:	6025      	str	r5, [r4, #0]
     8d2:	bd38      	pop	{r3, r4, r5, pc}
     8d4:	00000893 	.word	0x00000893
     8d8:	00001084 	.word	0x00001084
     8dc:	0000088d 	.word	0x0000088d

000008e0 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
     8e0:	6803      	ldr	r3, [r0, #0]
     8e2:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
     8e4:	6001      	str	r1, [r0, #0]
     8e6:	4770      	bx	lr

000008e8 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
     8e8:	6803      	ldr	r3, [r0, #0]
     8ea:	b10b      	cbz	r3, 8f0 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
     8ec:	681a      	ldr	r2, [r3, #0]
     8ee:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
     8f0:	4618      	mov	r0, r3
     8f2:	4770      	bx	lr

000008f4 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     8f4:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
     8f6:	4a13      	ldr	r2, [pc, #76]	; (944 <_init_chip+0x50>)
     8f8:	8813      	ldrh	r3, [r2, #0]
     8fa:	b29b      	uxth	r3, r3
     8fc:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
     8fe:	4b12      	ldr	r3, [pc, #72]	; (948 <_init_chip+0x54>)
     900:	4798      	blx	r3
	_oscctrl_init_sources();
     902:	4b12      	ldr	r3, [pc, #72]	; (94c <_init_chip+0x58>)
     904:	4798      	blx	r3
	_mclk_init();
     906:	4b12      	ldr	r3, [pc, #72]	; (950 <_init_chip+0x5c>)
     908:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
     90a:	2060      	movs	r0, #96	; 0x60
     90c:	4c11      	ldr	r4, [pc, #68]	; (954 <_init_chip+0x60>)
     90e:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
     910:	4b11      	ldr	r3, [pc, #68]	; (958 <_init_chip+0x64>)
     912:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     914:	f640 709f 	movw	r0, #3999	; 0xf9f
     918:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
     91a:	4b10      	ldr	r3, [pc, #64]	; (95c <_init_chip+0x68>)
     91c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     91e:	62da      	str	r2, [r3, #44]	; 0x2c
     920:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
     924:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
     928:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
     92c:	f442 4272 	orr.w	r2, r2, #61952	; 0xf200
     930:	f042 02ef 	orr.w	r2, r2, #239	; 0xef
     934:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
     938:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
     93c:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
     940:	bd10      	pop	{r4, pc}
     942:	bf00      	nop
     944:	41004000 	.word	0x41004000
     948:	00000a95 	.word	0x00000a95
     94c:	00000aa9 	.word	0x00000aa9
     950:	00000a89 	.word	0x00000a89
     954:	000009bd 	.word	0x000009bd
     958:	00000ac5 	.word	0x00000ac5
     95c:	41008000 	.word	0x41008000

00000960 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
     960:	b430      	push	{r4, r5}
     962:	4814      	ldr	r0, [pc, #80]	; (9b4 <_event_system_init+0x54>)
     964:	f100 0543 	add.w	r5, r0, #67	; 0x43
     968:	4603      	mov	r3, r0
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
     96a:	4c13      	ldr	r4, [pc, #76]	; (9b8 <_event_system_init+0x58>)
     96c:	1a1a      	subs	r2, r3, r0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
     96e:	f813 1b01 	ldrb.w	r1, [r3], #1
     972:	3248      	adds	r2, #72	; 0x48
     974:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
     978:	42ab      	cmp	r3, r5
     97a:	d1f7      	bne.n	96c <_event_system_init+0xc>
     97c:	480d      	ldr	r0, [pc, #52]	; (9b4 <_event_system_init+0x54>)
     97e:	f100 0442 	add.w	r4, r0, #66	; 0x42
     982:	3080      	adds	r0, #128	; 0x80
     984:	2100      	movs	r1, #0
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
     986:	f834 3f02 	ldrh.w	r3, [r4, #2]!
     98a:	00ca      	lsls	r2, r1, #3
     98c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
     990:	f502 4260 	add.w	r2, r2, #57344	; 0xe000

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
     994:	6213      	str	r3, [r2, #32]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
     996:	f850 3f04 	ldr.w	r3, [r0, #4]!
     99a:	b2db      	uxtb	r3, r3
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
     99c:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
     9a0:	43db      	mvns	r3, r3
     9a2:	b2db      	uxtb	r3, r3
     9a4:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
     9a8:	3101      	adds	r1, #1
	for (i = 0; i < EVSYS_CHANNELS; i++) {
     9aa:	2920      	cmp	r1, #32
     9ac:	d1eb      	bne.n	986 <_event_system_init+0x26>
	}

	return ERR_NONE;
}
     9ae:	2000      	movs	r0, #0
     9b0:	bc30      	pop	{r4, r5}
     9b2:	4770      	bx	lr
     9b4:	000010a4 	.word	0x000010a4
     9b8:	4100e000 	.word	0x4100e000

000009bc <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     9bc:	f010 0f01 	tst.w	r0, #1
     9c0:	d008      	beq.n	9d4 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     9c2:	4a29      	ldr	r2, [pc, #164]	; (a68 <_gclk_init_generators_by_fref+0xac>)
     9c4:	4b29      	ldr	r3, [pc, #164]	; (a6c <_gclk_init_generators_by_fref+0xb0>)
     9c6:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     9c8:	4619      	mov	r1, r3
     9ca:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     9ce:	684b      	ldr	r3, [r1, #4]
     9d0:	4213      	tst	r3, r2
     9d2:	d1fc      	bne.n	9ce <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
     9d4:	f010 0f02 	tst.w	r0, #2
     9d8:	d008      	beq.n	9ec <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     9da:	4a25      	ldr	r2, [pc, #148]	; (a70 <_gclk_init_generators_by_fref+0xb4>)
     9dc:	4b23      	ldr	r3, [pc, #140]	; (a6c <_gclk_init_generators_by_fref+0xb0>)
     9de:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     9e0:	4619      	mov	r1, r3
     9e2:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     9e6:	684b      	ldr	r3, [r1, #4]
     9e8:	4213      	tst	r3, r2
     9ea:	d1fc      	bne.n	9e6 <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
     9ec:	f010 0f04 	tst.w	r0, #4
     9f0:	d008      	beq.n	a04 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     9f2:	4a20      	ldr	r2, [pc, #128]	; (a74 <_gclk_init_generators_by_fref+0xb8>)
     9f4:	4b1d      	ldr	r3, [pc, #116]	; (a6c <_gclk_init_generators_by_fref+0xb0>)
     9f6:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     9f8:	4619      	mov	r1, r3
     9fa:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     9fe:	684b      	ldr	r3, [r1, #4]
     a00:	4213      	tst	r3, r2
     a02:	d1fc      	bne.n	9fe <_gclk_init_generators_by_fref+0x42>
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
     a04:	f010 0f10 	tst.w	r0, #16
     a08:	d008      	beq.n	a1c <_gclk_init_generators_by_fref+0x60>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     a0a:	4a1b      	ldr	r2, [pc, #108]	; (a78 <_gclk_init_generators_by_fref+0xbc>)
     a0c:	4b17      	ldr	r3, [pc, #92]	; (a6c <_gclk_init_generators_by_fref+0xb0>)
     a0e:	631a      	str	r2, [r3, #48]	; 0x30
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     a10:	4619      	mov	r1, r3
     a12:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     a16:	684b      	ldr	r3, [r1, #4]
     a18:	4213      	tst	r3, r2
     a1a:	d1fc      	bne.n	a16 <_gclk_init_generators_by_fref+0x5a>
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
     a1c:	f010 0f20 	tst.w	r0, #32
     a20:	d008      	beq.n	a34 <_gclk_init_generators_by_fref+0x78>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     a22:	4a16      	ldr	r2, [pc, #88]	; (a7c <_gclk_init_generators_by_fref+0xc0>)
     a24:	4b11      	ldr	r3, [pc, #68]	; (a6c <_gclk_init_generators_by_fref+0xb0>)
     a26:	635a      	str	r2, [r3, #52]	; 0x34
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     a28:	4619      	mov	r1, r3
     a2a:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     a2e:	684b      	ldr	r3, [r1, #4]
     a30:	4213      	tst	r3, r2
     a32:	d1fc      	bne.n	a2e <_gclk_init_generators_by_fref+0x72>
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
     a34:	f010 0f40 	tst.w	r0, #64	; 0x40
     a38:	d008      	beq.n	a4c <_gclk_init_generators_by_fref+0x90>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     a3a:	4a11      	ldr	r2, [pc, #68]	; (a80 <_gclk_init_generators_by_fref+0xc4>)
     a3c:	4b0b      	ldr	r3, [pc, #44]	; (a6c <_gclk_init_generators_by_fref+0xb0>)
     a3e:	639a      	str	r2, [r3, #56]	; 0x38
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     a40:	4619      	mov	r1, r3
     a42:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     a46:	684b      	ldr	r3, [r1, #4]
     a48:	4213      	tst	r3, r2
     a4a:	d1fc      	bne.n	a46 <_gclk_init_generators_by_fref+0x8a>
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
     a4c:	f410 6f00 	tst.w	r0, #2048	; 0x800
     a50:	d008      	beq.n	a64 <_gclk_init_generators_by_fref+0xa8>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     a52:	4a0c      	ldr	r2, [pc, #48]	; (a84 <_gclk_init_generators_by_fref+0xc8>)
     a54:	4b05      	ldr	r3, [pc, #20]	; (a6c <_gclk_init_generators_by_fref+0xb0>)
     a56:	64da      	str	r2, [r3, #76]	; 0x4c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     a58:	4619      	mov	r1, r3
     a5a:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     a5e:	684b      	ldr	r3, [r1, #4]
     a60:	4213      	tst	r3, r2
     a62:	d1fc      	bne.n	a5e <_gclk_init_generators_by_fref+0xa2>
     a64:	4770      	bx	lr
     a66:	bf00      	nop
     a68:	00010107 	.word	0x00010107
     a6c:	40001c00 	.word	0x40001c00
     a70:	00012908 	.word	0x00012908
     a74:	00030907 	.word	0x00030907
     a78:	00010901 	.word	0x00010901
     a7c:	00042901 	.word	0x00042901
     a80:	00060901 	.word	0x00060901
     a84:	00010904 	.word	0x00010904

00000a88 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
     a88:	2201      	movs	r2, #1
     a8a:	4b01      	ldr	r3, [pc, #4]	; (a90 <_mclk_init+0x8>)
     a8c:	715a      	strb	r2, [r3, #5]
     a8e:	4770      	bx	lr
     a90:	40000800 	.word	0x40000800

00000a94 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
     a94:	4b03      	ldr	r3, [pc, #12]	; (aa4 <_osc32kctrl_init_sources+0x10>)
     a96:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
     a98:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
     a9c:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
     a9e:	2201      	movs	r2, #1
     aa0:	741a      	strb	r2, [r3, #16]
     aa2:	4770      	bx	lr
     aa4:	40001400 	.word	0x40001400

00000aa8 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
     aa8:	4a04      	ldr	r2, [pc, #16]	; (abc <_oscctrl_init_sources+0x14>)
     aaa:	4b05      	ldr	r3, [pc, #20]	; (ac0 <_oscctrl_init_sources+0x18>)
     aac:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
     aae:	461a      	mov	r2, r3
     ab0:	6913      	ldr	r3, [r2, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
     ab2:	f013 0f02 	tst.w	r3, #2
     ab6:	d0fb      	beq.n	ab0 <_oscctrl_init_sources+0x8>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
     ab8:	4770      	bx	lr
     aba:	bf00      	nop
     abc:	03002606 	.word	0x03002606
     ac0:	40001000 	.word	0x40001000

00000ac4 <_oscctrl_init_referenced_generators>:
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
     ac4:	2227      	movs	r2, #39	; 0x27
     ac6:	4b1c      	ldr	r3, [pc, #112]	; (b38 <_oscctrl_init_referenced_generators+0x74>)
     ac8:	635a      	str	r2, [r3, #52]	; 0x34
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
     aca:	461a      	mov	r2, r3
     acc:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
     ace:	f013 0f06 	tst.w	r3, #6
     ad2:	d1fb      	bne.n	acc <_oscctrl_init_referenced_generators+0x8>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
     ad4:	4b18      	ldr	r3, [pc, #96]	; (b38 <_oscctrl_init_referenced_generators+0x74>)
     ad6:	2270      	movs	r2, #112	; 0x70
     ad8:	639a      	str	r2, [r3, #56]	; 0x38
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
     ada:	2242      	movs	r2, #66	; 0x42
     adc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
     ae0:	461a      	mov	r2, r3
     ae2:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
     ae4:	f013 0f02 	tst.w	r3, #2
     ae8:	d1fb      	bne.n	ae2 <_oscctrl_init_referenced_generators+0x1e>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
     aea:	2231      	movs	r2, #49	; 0x31
     aec:	4b12      	ldr	r3, [pc, #72]	; (b38 <_oscctrl_init_referenced_generators+0x74>)
     aee:	649a      	str	r2, [r3, #72]	; 0x48
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
     af0:	461a      	mov	r2, r3
     af2:	6d13      	ldr	r3, [r2, #80]	; 0x50
     af4:	f013 0f06 	tst.w	r3, #6
     af8:	d1fb      	bne.n	af2 <_oscctrl_init_referenced_generators+0x2e>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
     afa:	4b0f      	ldr	r3, [pc, #60]	; (b38 <_oscctrl_init_referenced_generators+0x74>)
     afc:	2270      	movs	r2, #112	; 0x70
     afe:	64da      	str	r2, [r3, #76]	; 0x4c
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
     b00:	2242      	movs	r2, #66	; 0x42
     b02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
     b06:	461a      	mov	r2, r3
     b08:	6d13      	ldr	r3, [r2, #80]	; 0x50
     b0a:	f013 0f02 	tst.w	r3, #2
     b0e:	d1fb      	bne.n	b08 <_oscctrl_init_referenced_generators+0x44>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
     b10:	4b09      	ldr	r3, [pc, #36]	; (b38 <_oscctrl_init_referenced_generators+0x74>)
     b12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
     b14:	f012 0f01 	tst.w	r2, #1
     b18:	d103      	bne.n	b22 <_oscctrl_init_referenced_generators+0x5e>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
     b1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
     b1c:	f012 0f02 	tst.w	r2, #2
     b20:	d0f7      	beq.n	b12 <_oscctrl_init_referenced_generators+0x4e>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
     b22:	4b05      	ldr	r3, [pc, #20]	; (b38 <_oscctrl_init_referenced_generators+0x74>)
     b24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
     b26:	f012 0f01 	tst.w	r2, #1
     b2a:	d103      	bne.n	b34 <_oscctrl_init_referenced_generators+0x70>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
     b2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
     b2e:	f012 0f02 	tst.w	r2, #2
     b32:	d0f7      	beq.n	b24 <_oscctrl_init_referenced_generators+0x60>
     b34:	4770      	bx	lr
     b36:	bf00      	nop
     b38:	40001000 	.word	0x40001000

00000b3c <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
     b3c:	b500      	push	{lr}
     b3e:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
     b40:	4b0d      	ldr	r3, [pc, #52]	; (b78 <RAMECC_Handler+0x3c>)
     b42:	789b      	ldrb	r3, [r3, #2]
     b44:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
     b46:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
     b48:	9b01      	ldr	r3, [sp, #4]
     b4a:	f013 0f02 	tst.w	r3, #2
     b4e:	d006      	beq.n	b5e <RAMECC_Handler+0x22>
     b50:	4b0a      	ldr	r3, [pc, #40]	; (b7c <RAMECC_Handler+0x40>)
     b52:	681b      	ldr	r3, [r3, #0]
     b54:	b11b      	cbz	r3, b5e <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
     b56:	4a08      	ldr	r2, [pc, #32]	; (b78 <RAMECC_Handler+0x3c>)
     b58:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
     b5a:	4798      	blx	r3
     b5c:	e009      	b.n	b72 <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
     b5e:	9b01      	ldr	r3, [sp, #4]
     b60:	f013 0f01 	tst.w	r3, #1
     b64:	d005      	beq.n	b72 <RAMECC_Handler+0x36>
     b66:	4b05      	ldr	r3, [pc, #20]	; (b7c <RAMECC_Handler+0x40>)
     b68:	685b      	ldr	r3, [r3, #4]
     b6a:	b113      	cbz	r3, b72 <RAMECC_Handler+0x36>
     b6c:	4a02      	ldr	r2, [pc, #8]	; (b78 <RAMECC_Handler+0x3c>)
     b6e:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
     b70:	4798      	blx	r3
	} else {
		return;
	}
}
     b72:	b003      	add	sp, #12
     b74:	f85d fb04 	ldr.w	pc, [sp], #4
     b78:	41020000 	.word	0x41020000
     b7c:	20000054 	.word	0x20000054

00000b80 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
     b80:	b470      	push	{r4, r5, r6}
     b82:	b089      	sub	sp, #36	; 0x24
     b84:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
     b86:	466c      	mov	r4, sp
     b88:	4d0d      	ldr	r5, [pc, #52]	; (bc0 <_sercom_get_hardware_index+0x40>)
     b8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     b8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     b8e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
     b92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
     b96:	9b00      	ldr	r3, [sp, #0]
     b98:	42b3      	cmp	r3, r6
     b9a:	d00d      	beq.n	bb8 <_sercom_get_hardware_index+0x38>
     b9c:	4631      	mov	r1, r6
     b9e:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     ba0:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
     ba2:	f853 2b04 	ldr.w	r2, [r3], #4
     ba6:	428a      	cmp	r2, r1
     ba8:	d007      	beq.n	bba <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     baa:	3001      	adds	r0, #1
     bac:	2808      	cmp	r0, #8
     bae:	d1f8      	bne.n	ba2 <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
     bb0:	2000      	movs	r0, #0
}
     bb2:	b009      	add	sp, #36	; 0x24
     bb4:	bc70      	pop	{r4, r5, r6}
     bb6:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     bb8:	2000      	movs	r0, #0
			return i;
     bba:	b2c0      	uxtb	r0, r0
     bbc:	e7f9      	b.n	bb2 <_sercom_get_hardware_index+0x32>
     bbe:	bf00      	nop
     bc0:	000011a8 	.word	0x000011a8

00000bc4 <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
     bc4:	b538      	push	{r3, r4, r5, lr}
     bc6:	4605      	mov	r5, r0
     bc8:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
     bca:	4608      	mov	r0, r1
     bcc:	4b36      	ldr	r3, [pc, #216]	; (ca8 <_spi_m_sync_init+0xe4>)
     bce:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
     bd0:	b160      	cbz	r0, bec <_spi_m_sync_init+0x28>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
     bd2:	2d00      	cmp	r5, #0
     bd4:	d055      	beq.n	c82 <_spi_m_sync_init+0xbe>
     bd6:	f640 123f 	movw	r2, #2367	; 0x93f
     bda:	4934      	ldr	r1, [pc, #208]	; (cac <_spi_m_sync_init+0xe8>)
     bdc:	1c20      	adds	r0, r4, #0
     bde:	bf18      	it	ne
     be0:	2001      	movne	r0, #1
     be2:	4b33      	ldr	r3, [pc, #204]	; (cb0 <_spi_m_sync_init+0xec>)
     be4:	4798      	blx	r3

	if (regs == NULL) {
		return ERR_INVALID_ARG;
     be6:	f06f 000c 	mvn.w	r0, #12
     bea:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
     bec:	2d00      	cmp	r5, #0
     bee:	d151      	bne.n	c94 <_spi_m_sync_init+0xd0>
     bf0:	f640 123f 	movw	r2, #2367	; 0x93f
     bf4:	492d      	ldr	r1, [pc, #180]	; (cac <_spi_m_sync_init+0xe8>)
     bf6:	2000      	movs	r0, #0
     bf8:	4b2d      	ldr	r3, [pc, #180]	; (cb0 <_spi_m_sync_init+0xec>)
     bfa:	4798      	blx	r3
	};
}

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
     bfc:	69e3      	ldr	r3, [r4, #28]
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
     bfe:	f013 0f01 	tst.w	r3, #1
     c02:	d119      	bne.n	c38 <_spi_m_sync_init+0x74>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
     c04:	69e3      	ldr	r3, [r4, #28]
     c06:	f013 0f03 	tst.w	r3, #3
     c0a:	d1fb      	bne.n	c04 <_spi_m_sync_init+0x40>
static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
     c0c:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
     c0e:	f013 0f02 	tst.w	r3, #2
     c12:	d00b      	beq.n	c2c <_spi_m_sync_init+0x68>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
     c14:	6823      	ldr	r3, [r4, #0]
     c16:	f023 0302 	bic.w	r3, r3, #2
     c1a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
     c1c:	69e3      	ldr	r3, [r4, #28]
     c1e:	f013 0f03 	tst.w	r3, #3
     c22:	d1fb      	bne.n	c1c <_spi_m_sync_init+0x58>
     c24:	69e3      	ldr	r3, [r4, #28]
     c26:	f013 0f02 	tst.w	r3, #2
     c2a:	d1fb      	bne.n	c24 <_spi_m_sync_init+0x60>
}

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
     c2c:	230d      	movs	r3, #13
     c2e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
     c30:	69e3      	ldr	r3, [r4, #28]
     c32:	f013 0f03 	tst.w	r3, #3
     c36:	d1fb      	bne.n	c30 <_spi_m_sync_init+0x6c>
     c38:	69e3      	ldr	r3, [r4, #28]
     c3a:	f013 0f01 	tst.w	r3, #1
     c3e:	d1fb      	bne.n	c38 <_spi_m_sync_init+0x74>
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
     c40:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
     c42:	f640 1209 	movw	r2, #2313	; 0x909
     c46:	4919      	ldr	r1, [pc, #100]	; (cac <_spi_m_sync_init+0xe8>)
     c48:	1c20      	adds	r0, r4, #0
     c4a:	bf18      	it	ne
     c4c:	2001      	movne	r0, #1
     c4e:	4b18      	ldr	r3, [pc, #96]	; (cb0 <_spi_m_sync_init+0xec>)
     c50:	4798      	blx	r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
     c52:	4b18      	ldr	r3, [pc, #96]	; (cb4 <_spi_m_sync_init+0xf0>)
     c54:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
     c56:	69e3      	ldr	r3, [r4, #28]
     c58:	f013 0f03 	tst.w	r3, #3
     c5c:	d1fb      	bne.n	c56 <_spi_m_sync_init+0x92>
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
     c5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
     c62:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
     c64:	69e3      	ldr	r3, [r4, #28]
     c66:	f013 0f17 	tst.w	r3, #23
     c6a:	d1fb      	bne.n	c64 <_spi_m_sync_init+0xa0>
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
     c6c:	23fe      	movs	r3, #254	; 0xfe
     c6e:	7323      	strb	r3, [r4, #12]
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
     c70:	2000      	movs	r0, #0
     c72:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
     c76:	2301      	movs	r3, #1
     c78:	712b      	strb	r3, [r5, #4]

	dev->dummy_byte = regs->dummy_byte;
     c7a:	f240 13ff 	movw	r3, #511	; 0x1ff
     c7e:	80eb      	strh	r3, [r5, #6]

	return ERR_NONE;
     c80:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
     c82:	f640 123f 	movw	r2, #2367	; 0x93f
     c86:	4909      	ldr	r1, [pc, #36]	; (cac <_spi_m_sync_init+0xe8>)
     c88:	2000      	movs	r0, #0
     c8a:	4b09      	ldr	r3, [pc, #36]	; (cb0 <_spi_m_sync_init+0xec>)
     c8c:	4798      	blx	r3
		return ERR_INVALID_ARG;
     c8e:	f06f 000c 	mvn.w	r0, #12
     c92:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
     c94:	f640 123f 	movw	r2, #2367	; 0x93f
     c98:	4904      	ldr	r1, [pc, #16]	; (cac <_spi_m_sync_init+0xe8>)
     c9a:	1c20      	adds	r0, r4, #0
     c9c:	bf18      	it	ne
     c9e:	2001      	movne	r0, #1
     ca0:	4b03      	ldr	r3, [pc, #12]	; (cb0 <_spi_m_sync_init+0xec>)
     ca2:	4798      	blx	r3
     ca4:	e7aa      	b.n	bfc <_spi_m_sync_init+0x38>
     ca6:	bf00      	nop
     ca8:	00000b81 	.word	0x00000b81
     cac:	000011e0 	.word	0x000011e0
     cb0:	0000088d 	.word	0x0000088d
     cb4:	0020000c 	.word	0x0020000c

00000cb8 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
     cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     cbc:	4681      	mov	r9, r0
     cbe:	460e      	mov	r6, r1
	void *                 hw   = dev->prvt;
     cc0:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
     cc2:	f8d1 8000 	ldr.w	r8, [r1]
     cc6:	684d      	ldr	r5, [r1, #4]
     cc8:	7907      	ldrb	r7, [r0, #4]

	ASSERT(dev && hw);
     cca:	b1a8      	cbz	r0, cf8 <_spi_m_sync_trans+0x40>
     ccc:	1c20      	adds	r0, r4, #0
     cce:	bf18      	it	ne
     cd0:	2001      	movne	r0, #1
     cd2:	f640 22a3 	movw	r2, #2723	; 0xaa3
     cd6:	492e      	ldr	r1, [pc, #184]	; (d90 <_spi_m_sync_trans+0xd8>)
     cd8:	4b2e      	ldr	r3, [pc, #184]	; (d94 <_spi_m_sync_trans+0xdc>)
     cda:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
     cdc:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
     cde:	f013 0f07 	tst.w	r3, #7
     ce2:	d134      	bne.n	d4e <_spi_m_sync_trans+0x96>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
     ce4:	69e0      	ldr	r0, [r4, #28]
     ce6:	f010 0003 	ands.w	r0, r0, #3
     cea:	d1fb      	bne.n	ce4 <_spi_m_sync_trans+0x2c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
     cec:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
     cee:	f013 0f02 	tst.w	r3, #2
     cf2:	d030      	beq.n	d56 <_spi_m_sync_trans+0x9e>
     cf4:	4602      	mov	r2, r0
     cf6:	e008      	b.n	d0a <_spi_m_sync_trans+0x52>
     cf8:	2000      	movs	r0, #0
     cfa:	e7ea      	b.n	cd2 <_spi_m_sync_trans+0x1a>
	ctrl->rxcnt++;
     cfc:	3201      	adds	r2, #1
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
     cfe:	f013 0f80 	tst.w	r3, #128	; 0x80
     d02:	d112      	bne.n	d2a <_spi_m_sync_trans+0x72>
		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
     d04:	68b3      	ldr	r3, [r6, #8]
     d06:	4283      	cmp	r3, r0
     d08:	d91e      	bls.n	d48 <_spi_m_sync_trans+0x90>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
     d0a:	7e23      	ldrb	r3, [r4, #24]
     d0c:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
     d0e:	f013 0f04 	tst.w	r3, #4
     d12:	d024      	beq.n	d5e <_spi_m_sync_trans+0xa6>
	return ((Sercom *)hw)->SPI.DATA.reg;
     d14:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
     d16:	2d00      	cmp	r5, #0
     d18:	d0f0      	beq.n	cfc <_spi_m_sync_trans+0x44>
		*ctrl->rxbuf++ = (uint8_t)data;
     d1a:	7029      	strb	r1, [r5, #0]
		if (ctrl->char_size > 1) {
     d1c:	2f01      	cmp	r7, #1
		*ctrl->rxbuf++ = (uint8_t)data;
     d1e:	bf91      	iteee	ls
     d20:	3501      	addls	r5, #1
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
     d22:	0a09      	lsrhi	r1, r1, #8
     d24:	7069      	strbhi	r1, [r5, #1]
     d26:	3502      	addhi	r5, #2
     d28:	e7e8      	b.n	cfc <_spi_m_sync_trans+0x44>
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
     d2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
     d2e:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
     d30:	2380      	movs	r3, #128	; 0x80
     d32:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
     d34:	f06f 0012 	mvn.w	r0, #18
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
     d38:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
     d3a:	f013 0f03 	tst.w	r3, #3
     d3e:	d0fb      	beq.n	d38 <_spi_m_sync_trans+0x80>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
     d40:	2303      	movs	r3, #3
     d42:	7623      	strb	r3, [r4, #24]
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
     d44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
     d48:	4293      	cmp	r3, r2
     d4a:	d8de      	bhi.n	d0a <_spi_m_sync_trans+0x52>
     d4c:	e7f4      	b.n	d38 <_spi_m_sync_trans+0x80>
		return ERR_BUSY;
     d4e:	f06f 0003 	mvn.w	r0, #3
     d52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ERR_NOT_INITIALIZED;
     d56:	f06f 0013 	mvn.w	r0, #19
     d5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ctrl.rxcnt >= ctrl.txcnt) {
     d5e:	4290      	cmp	r0, r2
     d60:	d8cd      	bhi.n	cfe <_spi_m_sync_trans+0x46>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
     d62:	f013 0f01 	tst.w	r3, #1
     d66:	d0ca      	beq.n	cfe <_spi_m_sync_trans+0x46>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
     d68:	f8b9 1006 	ldrh.w	r1, [r9, #6]
	if (ctrl->txbuf) {
     d6c:	f1b8 0f00 	cmp.w	r8, #0
     d70:	d00b      	beq.n	d8a <_spi_m_sync_trans+0xd2>
		data = *ctrl->txbuf++;
     d72:	f898 1000 	ldrb.w	r1, [r8]
		if (ctrl->char_size > 1) {
     d76:	2f01      	cmp	r7, #1
		data = *ctrl->txbuf++;
     d78:	bf91      	iteee	ls
     d7a:	f108 0801 	addls.w	r8, r8, #1
			data |= (*ctrl->txbuf) << 8;
     d7e:	f898 e001 	ldrbhi.w	lr, [r8, #1]
     d82:	ea41 210e 	orrhi.w	r1, r1, lr, lsl #8
			ctrl->txbuf++;
     d86:	f108 0802 	addhi.w	r8, r8, #2
	ctrl->txcnt++;
     d8a:	3001      	adds	r0, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
     d8c:	62a1      	str	r1, [r4, #40]	; 0x28
     d8e:	e7b6      	b.n	cfe <_spi_m_sync_trans+0x46>
     d90:	000011e0 	.word	0x000011e0
     d94:	0000088d 	.word	0x0000088d

00000d98 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
     d98:	b570      	push	{r4, r5, r6, lr}
     d9a:	b088      	sub	sp, #32
     d9c:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
     d9e:	466c      	mov	r4, sp
     da0:	4d12      	ldr	r5, [pc, #72]	; (dec <get_tc_index+0x54>)
     da2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     da4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     da6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
     daa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
     dae:	9b00      	ldr	r3, [sp, #0]
     db0:	42b3      	cmp	r3, r6
     db2:	d00b      	beq.n	dcc <get_tc_index+0x34>
     db4:	4630      	mov	r0, r6
     db6:	aa01      	add	r2, sp, #4
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     db8:	2301      	movs	r3, #1
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
     dba:	f852 1b04 	ldr.w	r1, [r2], #4
     dbe:	4281      	cmp	r1, r0
     dc0:	d005      	beq.n	dce <get_tc_index+0x36>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     dc2:	3301      	adds	r3, #1
     dc4:	2b08      	cmp	r3, #8
     dc6:	d1f8      	bne.n	dba <get_tc_index+0x22>
			return i;
     dc8:	2000      	movs	r0, #0
     dca:	e00b      	b.n	de4 <get_tc_index+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     dcc:	2300      	movs	r3, #0
		if (_tcs[i].number == index) {
     dce:	f013 0fff 	tst.w	r3, #255	; 0xff
     dd2:	d009      	beq.n	de8 <get_tc_index+0x50>
	ASSERT(false);
     dd4:	f44f 729e 	mov.w	r2, #316	; 0x13c
     dd8:	4905      	ldr	r1, [pc, #20]	; (df0 <get_tc_index+0x58>)
     dda:	2000      	movs	r0, #0
     ddc:	4b05      	ldr	r3, [pc, #20]	; (df4 <get_tc_index+0x5c>)
     dde:	4798      	blx	r3
	return -1;
     de0:	f04f 30ff 	mov.w	r0, #4294967295
}
     de4:	b008      	add	sp, #32
     de6:	bd70      	pop	{r4, r5, r6, pc}
			return i;
     de8:	2000      	movs	r0, #0
     dea:	e7fb      	b.n	de4 <get_tc_index+0x4c>
     dec:	000011fc 	.word	0x000011fc
     df0:	00001230 	.word	0x00001230
     df4:	0000088d 	.word	0x0000088d

00000df8 <_timer_init>:
{
     df8:	b570      	push	{r4, r5, r6, lr}
     dfa:	4606      	mov	r6, r0
     dfc:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
     dfe:	4608      	mov	r0, r1
     e00:	4b60      	ldr	r3, [pc, #384]	; (f84 <_timer_init+0x18c>)
     e02:	4798      	blx	r3
     e04:	4605      	mov	r5, r0
	device->hw = hw;
     e06:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
     e08:	228d      	movs	r2, #141	; 0x8d
     e0a:	495f      	ldr	r1, [pc, #380]	; (f88 <_timer_init+0x190>)
     e0c:	2001      	movs	r0, #1
     e0e:	4b5f      	ldr	r3, [pc, #380]	; (f8c <_timer_init+0x194>)
     e10:	4798      	blx	r3
	};
}

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
     e12:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
     e14:	f013 0f01 	tst.w	r3, #1
     e18:	d119      	bne.n	e4e <_timer_init+0x56>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     e1a:	6923      	ldr	r3, [r4, #16]
     e1c:	f013 0f03 	tst.w	r3, #3
     e20:	d1fb      	bne.n	e1a <_timer_init+0x22>

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
     e22:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
     e24:	f013 0f02 	tst.w	r3, #2
     e28:	d00b      	beq.n	e42 <_timer_init+0x4a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
     e2a:	6823      	ldr	r3, [r4, #0]
     e2c:	f023 0302 	bic.w	r3, r3, #2
     e30:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     e32:	6923      	ldr	r3, [r4, #16]
     e34:	f013 0f03 	tst.w	r3, #3
     e38:	d1fb      	bne.n	e32 <_timer_init+0x3a>
     e3a:	6923      	ldr	r3, [r4, #16]
     e3c:	f013 0f02 	tst.w	r3, #2
     e40:	d1fb      	bne.n	e3a <_timer_init+0x42>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
     e42:	2301      	movs	r3, #1
     e44:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     e46:	6923      	ldr	r3, [r4, #16]
     e48:	f013 0f03 	tst.w	r3, #3
     e4c:	d1fb      	bne.n	e46 <_timer_init+0x4e>
     e4e:	6923      	ldr	r3, [r4, #16]
     e50:	f013 0f01 	tst.w	r3, #1
     e54:	d1fb      	bne.n	e4e <_timer_init+0x56>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
     e56:	eb05 0385 	add.w	r3, r5, r5, lsl #2
     e5a:	4a4d      	ldr	r2, [pc, #308]	; (f90 <_timer_init+0x198>)
     e5c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     e60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
     e62:	6022      	str	r2, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     e64:	6923      	ldr	r3, [r4, #16]
     e66:	f013 0f03 	tst.w	r3, #3
     e6a:	d1fb      	bne.n	e64 <_timer_init+0x6c>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
     e6c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
     e70:	4947      	ldr	r1, [pc, #284]	; (f90 <_timer_init+0x198>)
     e72:	eb01 0383 	add.w	r3, r1, r3, lsl #2
     e76:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
     e7a:	73e1      	strb	r1, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
     e7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
     e7e:	80e3      	strh	r3, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
     e80:	2301      	movs	r3, #1
     e82:	7323      	strb	r3, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
     e84:	f002 020c 	and.w	r2, r2, #12
     e88:	2a08      	cmp	r2, #8
     e8a:	d048      	beq.n	f1e <_timer_init+0x126>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
     e8c:	2a00      	cmp	r2, #0
     e8e:	d158      	bne.n	f42 <_timer_init+0x14a>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
     e90:	eb05 0385 	add.w	r3, r5, r5, lsl #2
     e94:	4a3e      	ldr	r2, [pc, #248]	; (f90 <_timer_init+0x198>)
     e96:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     e9a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
     e9c:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     e9e:	6923      	ldr	r3, [r4, #16]
     ea0:	f013 0fc0 	tst.w	r3, #192	; 0xc0
     ea4:	d1fb      	bne.n	e9e <_timer_init+0xa6>
	((Tc *)hw)->COUNT16.CC[index].reg = data;
     ea6:	2300      	movs	r3, #0
     ea8:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     eaa:	6923      	ldr	r3, [r4, #16]
     eac:	f013 0fc0 	tst.w	r3, #192	; 0xc0
     eb0:	d1fb      	bne.n	eaa <_timer_init+0xb2>
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
     eb2:	2301      	movs	r3, #1
     eb4:	7263      	strb	r3, [r4, #9]
	if (hw == TC0) {
     eb6:	4b37      	ldr	r3, [pc, #220]	; (f94 <_timer_init+0x19c>)
     eb8:	429c      	cmp	r4, r3
		_tc0_dev = (struct _timer_device *)dev;
     eba:	bf04      	itt	eq
     ebc:	4b36      	ldreq	r3, [pc, #216]	; (f98 <_timer_init+0x1a0>)
     ebe:	601e      	streq	r6, [r3, #0]
	NVIC_DisableIRQ(_tcs[i].irq);
     ec0:	eb05 0385 	add.w	r3, r5, r5, lsl #2
     ec4:	4a32      	ldr	r2, [pc, #200]	; (f90 <_timer_init+0x198>)
     ec6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     eca:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
     ece:	2b00      	cmp	r3, #0
     ed0:	db23      	blt.n	f1a <_timer_init+0x122>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     ed2:	095a      	lsrs	r2, r3, #5
     ed4:	f003 031f 	and.w	r3, r3, #31
     ed8:	2101      	movs	r1, #1
     eda:	fa01 f303 	lsl.w	r3, r1, r3
     ede:	3220      	adds	r2, #32
     ee0:	492e      	ldr	r1, [pc, #184]	; (f9c <_timer_init+0x1a4>)
     ee2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
     ee6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     eea:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
     eee:	eb05 0585 	add.w	r5, r5, r5, lsl #2
     ef2:	4b27      	ldr	r3, [pc, #156]	; (f90 <_timer_init+0x198>)
     ef4:	eb03 0585 	add.w	r5, r3, r5, lsl #2
     ef8:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
     efc:	2b00      	cmp	r3, #0
     efe:	db0c      	blt.n	f1a <_timer_init+0x122>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     f00:	0959      	lsrs	r1, r3, #5
     f02:	f003 031f 	and.w	r3, r3, #31
     f06:	2201      	movs	r2, #1
     f08:	fa02 f303 	lsl.w	r3, r2, r3
     f0c:	4a23      	ldr	r2, [pc, #140]	; (f9c <_timer_init+0x1a4>)
     f0e:	f101 0060 	add.w	r0, r1, #96	; 0x60
     f12:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     f16:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
     f1a:	2000      	movs	r0, #0
     f1c:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
     f1e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
     f22:	4a1b      	ldr	r2, [pc, #108]	; (f90 <_timer_init+0x198>)
     f24:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
     f2a:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     f2c:	6923      	ldr	r3, [r4, #16]
     f2e:	f013 0fc0 	tst.w	r3, #192	; 0xc0
     f32:	d1fb      	bne.n	f2c <_timer_init+0x134>
	((Tc *)hw)->COUNT32.CC[index].reg = data;
     f34:	2300      	movs	r3, #0
     f36:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     f38:	6923      	ldr	r3, [r4, #16]
     f3a:	f013 0fc0 	tst.w	r3, #192	; 0xc0
     f3e:	d1fb      	bne.n	f38 <_timer_init+0x140>
     f40:	e7b7      	b.n	eb2 <_timer_init+0xba>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
     f42:	2a04      	cmp	r2, #4
     f44:	d1b5      	bne.n	eb2 <_timer_init+0xba>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
     f46:	eb05 0385 	add.w	r3, r5, r5, lsl #2
     f4a:	4a11      	ldr	r2, [pc, #68]	; (f90 <_timer_init+0x198>)
     f4c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     f50:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT8.CC[index].reg = data;
     f54:	7723      	strb	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     f56:	6923      	ldr	r3, [r4, #16]
     f58:	f013 0fc0 	tst.w	r3, #192	; 0xc0
     f5c:	d1fb      	bne.n	f56 <_timer_init+0x15e>
	((Tc *)hw)->COUNT8.CC[index].reg = data;
     f5e:	2300      	movs	r3, #0
     f60:	7763      	strb	r3, [r4, #29]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     f62:	6923      	ldr	r3, [r4, #16]
     f64:	f013 0fc0 	tst.w	r3, #192	; 0xc0
     f68:	d1fb      	bne.n	f62 <_timer_init+0x16a>
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
     f6a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
     f6e:	4a08      	ldr	r2, [pc, #32]	; (f90 <_timer_init+0x198>)
     f70:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     f74:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	((Tc *)hw)->COUNT8.PER.reg = data;
     f78:	76e3      	strb	r3, [r4, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     f7a:	6923      	ldr	r3, [r4, #16]
     f7c:	f013 0f20 	tst.w	r3, #32
     f80:	d1fb      	bne.n	f7a <_timer_init+0x182>
     f82:	e796      	b.n	eb2 <_timer_init+0xba>
     f84:	00000d99 	.word	0x00000d99
     f88:	00001230 	.word	0x00001230
     f8c:	0000088d 	.word	0x0000088d
     f90:	000011fc 	.word	0x000011fc
     f94:	40003800 	.word	0x40003800
     f98:	2000001c 	.word	0x2000001c
     f9c:	e000e100 	.word	0xe000e100

00000fa0 <_timer_start>:
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
     fa0:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
     fa2:	6813      	ldr	r3, [r2, #0]
     fa4:	f043 0302 	orr.w	r3, r3, #2
     fa8:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     faa:	6913      	ldr	r3, [r2, #16]
     fac:	f013 0f03 	tst.w	r3, #3
     fb0:	d1fb      	bne.n	faa <_timer_start+0xa>
}
     fb2:	4770      	bx	lr

00000fb4 <_timer_is_started>:
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
     fb4:	68c2      	ldr	r2, [r0, #12]
     fb6:	6913      	ldr	r3, [r2, #16]
     fb8:	f013 0f03 	tst.w	r3, #3
     fbc:	d1fb      	bne.n	fb6 <_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
     fbe:	6810      	ldr	r0, [r2, #0]
}
     fc0:	f3c0 0040 	ubfx	r0, r0, #1, #1
     fc4:	4770      	bx	lr

00000fc6 <_tc_get_timer>:
}
     fc6:	2000      	movs	r0, #0
     fc8:	4770      	bx	lr
	...

00000fcc <TC0_Handler>:
{
     fcc:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
     fce:	4b06      	ldr	r3, [pc, #24]	; (fe8 <TC0_Handler+0x1c>)
     fd0:	6818      	ldr	r0, [r3, #0]
	void *const hw = device->hw;
     fd2:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
     fd4:	7a9a      	ldrb	r2, [r3, #10]
	if (hri_tc_get_interrupt_OVF_bit(hw)) {
     fd6:	f012 0f01 	tst.w	r2, #1
     fda:	d100      	bne.n	fde <TC0_Handler+0x12>
     fdc:	bd08      	pop	{r3, pc}
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
     fde:	2201      	movs	r2, #1
     fe0:	729a      	strb	r2, [r3, #10]
		device->timer_cb.period_expired(device);
     fe2:	6803      	ldr	r3, [r0, #0]
     fe4:	4798      	blx	r3
}
     fe6:	e7f9      	b.n	fdc <TC0_Handler+0x10>
     fe8:	2000001c 	.word	0x2000001c

00000fec <main>:
#include <atmel_start.h>

int main(void)
{
     fec:	b508      	push	{r3, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
     fee:	4b03      	ldr	r3, [pc, #12]	; (ffc <main+0x10>)
     ff0:	4798      	blx	r3
	timer_start(&TIMER_0);
     ff2:	4803      	ldr	r0, [pc, #12]	; (1000 <main+0x14>)
     ff4:	4b03      	ldr	r3, [pc, #12]	; (1004 <main+0x18>)
     ff6:	4798      	blx	r3
     ff8:	e7fe      	b.n	ff8 <main+0xc>
     ffa:	bf00      	nop
     ffc:	000002d1 	.word	0x000002d1
    1000:	20000038 	.word	0x20000038
    1004:	00000851 	.word	0x00000851

00001008 <__libc_init_array>:
    1008:	b570      	push	{r4, r5, r6, lr}
    100a:	4e0d      	ldr	r6, [pc, #52]	; (1040 <__libc_init_array+0x38>)
    100c:	4c0d      	ldr	r4, [pc, #52]	; (1044 <__libc_init_array+0x3c>)
    100e:	1ba4      	subs	r4, r4, r6
    1010:	10a4      	asrs	r4, r4, #2
    1012:	2500      	movs	r5, #0
    1014:	42a5      	cmp	r5, r4
    1016:	d109      	bne.n	102c <__libc_init_array+0x24>
    1018:	4e0b      	ldr	r6, [pc, #44]	; (1048 <__libc_init_array+0x40>)
    101a:	4c0c      	ldr	r4, [pc, #48]	; (104c <__libc_init_array+0x44>)
    101c:	f000 f912 	bl	1244 <_init>
    1020:	1ba4      	subs	r4, r4, r6
    1022:	10a4      	asrs	r4, r4, #2
    1024:	2500      	movs	r5, #0
    1026:	42a5      	cmp	r5, r4
    1028:	d105      	bne.n	1036 <__libc_init_array+0x2e>
    102a:	bd70      	pop	{r4, r5, r6, pc}
    102c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    1030:	4798      	blx	r3
    1032:	3501      	adds	r5, #1
    1034:	e7ee      	b.n	1014 <__libc_init_array+0xc>
    1036:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    103a:	4798      	blx	r3
    103c:	3501      	adds	r5, #1
    103e:	e7f2      	b.n	1026 <__libc_init_array+0x1e>
    1040:	00001250 	.word	0x00001250
    1044:	00001250 	.word	0x00001250
    1048:	00001250 	.word	0x00001250
    104c:	00001254 	.word	0x00001254
    1050:	682f2e2e 	.word	0x682f2e2e
    1054:	732f6c61 	.word	0x732f6c61
    1058:	682f6372 	.word	0x682f6372
    105c:	735f6c61 	.word	0x735f6c61
    1060:	6d5f6970 	.word	0x6d5f6970
    1064:	6e79735f 	.word	0x6e79735f
    1068:	00632e63 	.word	0x00632e63
    106c:	682f2e2e 	.word	0x682f2e2e
    1070:	732f6c61 	.word	0x732f6c61
    1074:	682f6372 	.word	0x682f6372
    1078:	745f6c61 	.word	0x745f6c61
    107c:	72656d69 	.word	0x72656d69
    1080:	0000632e 	.word	0x0000632e
    1084:	682f2e2e 	.word	0x682f2e2e
    1088:	752f6c61 	.word	0x752f6c61
    108c:	736c6974 	.word	0x736c6974
    1090:	6372732f 	.word	0x6372732f
    1094:	6974752f 	.word	0x6974752f
    1098:	6c5f736c 	.word	0x6c5f736c
    109c:	2e747369 	.word	0x2e747369
    10a0:	00000063 	.word	0x00000063

000010a4 <user_mux_confs>:
    10a4:	00020100 00000000 00000000 00000000     ................
	...

000010e8 <channel_confs>:
    10e8:	064a0649 00000000 00000000 00000000     I.J.............
	...

00001128 <interrupt_cfg>:
	...
    11a8:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    11b8:	43000000 43000400 43000800 43000c00     ...C...C...C...C

000011c8 <_i2cms>:
	...
    11e0:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    11f0:	65735f6c 6d6f6372 0000632e 40003800     l_sercom.c...8.@
    1200:	40003c00 4101a000 4101c000 42001400     .<.@...A...A...B
    1210:	42001800 43001400 43001800              ...B...C...C

0000121c <_tcs>:
    121c:	006b0000 00000308 00001101 00000004     ..k.............
    122c:	00000000 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
    123c:	63745f6c 0000632e                       l_tc.c..

00001244 <_init>:
    1244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1246:	bf00      	nop
    1248:	bcf8      	pop	{r3, r4, r5, r6, r7}
    124a:	bc08      	pop	{r3}
    124c:	469e      	mov	lr, r3
    124e:	4770      	bx	lr

00001250 <__init_array_start>:
    1250:	00000289 	.word	0x00000289

00001254 <_fini>:
    1254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1256:	bf00      	nop
    1258:	bcf8      	pop	{r3, r4, r5, r6, r7}
    125a:	bc08      	pop	{r3}
    125c:	469e      	mov	lr, r3
    125e:	4770      	bx	lr

00001260 <__fini_array_start>:
    1260:	00000265 	.word	0x00000265
