
AVR128DB_BSP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00804000  000005ac  00000640  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  0080400e  0080400e  0000064e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000064e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000680  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000498  00000000  00000000  000006c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007b9a  00000000  00000000  00000b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003e0f  00000000  00000000  000086f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001f58  00000000  00000000  0000c501  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000078c  00000000  00000000  0000e45c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000054b1  00000000  00000000  0000ebe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ca6  00000000  00000000  00014099  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000368  00000000  00000000  00014d3f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
   4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
   8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
   c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  10:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  14:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  18:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  1c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  20:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  24:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  28:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  2c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  30:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  34:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  38:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__vector_14>
  3c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__vector_15>
  40:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  44:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  48:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  4c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  50:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  54:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  58:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  5c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  60:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  64:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  68:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  6c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  70:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  74:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  78:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  7c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  80:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  84:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  88:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  8c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  90:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  94:	0c 94 25 02 	jmp	0x44a	; 0x44a <__vector_37>
  98:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  9c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  ac:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  bc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  cc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  dc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  ec:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  f0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	df e7       	ldi	r29, 0x7F	; 127
  fe:	de bf       	out	0x3e, r29	; 62

00000100 <__do_copy_data>:
 100:	10 e4       	ldi	r17, 0x40	; 64
 102:	a0 e0       	ldi	r26, 0x00	; 0
 104:	b0 e4       	ldi	r27, 0x40	; 64
 106:	ec ea       	ldi	r30, 0xAC	; 172
 108:	f5 e0       	ldi	r31, 0x05	; 5
 10a:	00 e0       	ldi	r16, 0x00	; 0
 10c:	0b bf       	out	0x3b, r16	; 59
 10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x14>
 110:	07 90       	elpm	r0, Z+
 112:	0d 92       	st	X+, r0
 114:	ae 30       	cpi	r26, 0x0E	; 14
 116:	b1 07       	cpc	r27, r17
 118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0x10>

0000011a <__do_clear_bss>:
 11a:	20 e4       	ldi	r18, 0x40	; 64
 11c:	ae e0       	ldi	r26, 0x0E	; 14
 11e:	b0 e4       	ldi	r27, 0x40	; 64
 120:	01 c0       	rjmp	.+2      	; 0x124 <.do_clear_bss_start>

00000122 <.do_clear_bss_loop>:
 122:	1d 92       	st	X+, r1

00000124 <.do_clear_bss_start>:
 124:	ac 31       	cpi	r26, 0x1C	; 28
 126:	b2 07       	cpc	r27, r18
 128:	e1 f7       	brne	.-8      	; 0x122 <.do_clear_bss_loop>
 12a:	0e 94 bc 00 	call	0x178	; 0x178 <main>
 12e:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <_exit>

00000132 <__bad_interrupt>:
 132:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000136 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
 136:	0e 94 ac 01 	call	0x358	; 0x358 <system_init>
 13a:	08 95       	ret

0000013c <__vector_14>:

#include <driver_init.h>
#include <compiler.h>

ISR(TCB0_INT_vect)
{
 13c:	1f 92       	push	r1
 13e:	0f 92       	push	r0
 140:	0f b6       	in	r0, 0x3f	; 63
 142:	0f 92       	push	r0
 144:	11 24       	eor	r1, r1
 146:	8f 93       	push	r24

	TCB0.INTFLAGS = TCB_CAPT_bm;
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	80 93 06 0b 	sts	0x0B06, r24	; 0x800b06 <__TEXT_REGION_LENGTH__+0x7e0b06>
}
 14e:	8f 91       	pop	r24
 150:	0f 90       	pop	r0
 152:	0f be       	out	0x3f, r0	; 63
 154:	0f 90       	pop	r0
 156:	1f 90       	pop	r1
 158:	18 95       	reti

0000015a <__vector_15>:

ISR(TCB1_INT_vect)
{
 15a:	1f 92       	push	r1
 15c:	0f 92       	push	r0
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	0f 92       	push	r0
 162:	11 24       	eor	r1, r1
 164:	8f 93       	push	r24

	TCB1.INTFLAGS = TCB_CAPT_bm;
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	80 93 16 0b 	sts	0x0B16, r24	; 0x800b16 <__TEXT_REGION_LENGTH__+0x7e0b16>
}
 16c:	8f 91       	pop	r24
 16e:	0f 90       	pop	r0
 170:	0f be       	out	0x3f, r0	; 63
 172:	0f 90       	pop	r0
 174:	1f 90       	pop	r1
 176:	18 95       	reti

00000178 <main>:
#include <atmel_start.h>

int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
 178:	0e 94 9b 00 	call	0x136	; 0x136 <atmel_start_init>
 17c:	ff cf       	rjmp	.-2      	; 0x17c <main+0x4>

0000017e <BOD_init>:
int8_t BOD_init()
{

	// ccp_write_io((void*)&(BOD.CTRLA),BOD_SLEEP_DIS_gc /* Disabled */);

	BOD.INTCTRL = 0 << BOD_VLMIE_bp        /* voltage level monitor interrrupt enable: disabled */
 17e:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
	              | BOD_VLMCFG_FALLING_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	08 95       	ret

00000186 <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
 186:	41 e8       	ldi	r20, 0x81	; 129
 188:	68 ed       	ldi	r22, 0xD8	; 216
 18a:	80 e7       	ldi	r24, 0x70	; 112
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <protected_write_io>
 192:	44 e2       	ldi	r20, 0x24	; 36
 194:	68 ed       	ldi	r22, 0xD8	; 216
 196:	88 e6       	ldi	r24, 0x68	; 104
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <protected_write_io>

	// ccp_write_io((void*)&(CLKCTRL.MCLKCTRLA),CLKCTRL_CLKSEL_OSCHF_gc /* Internal high-frequency oscillator */
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	/* wait for PLL to start */
	while (!(CLKCTRL.MCLKSTATUS & CLKCTRL_PLLS_bm))
 19e:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
 1a2:	85 ff       	sbrs	r24, 5
 1a4:	fc cf       	rjmp	.-8      	; 0x19e <CLKCTRL_init+0x18>
		;

	return 0;
}
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	08 95       	ret

000001aa <CPUINT_init>:
	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
}
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	08 95       	ret

000001ae <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	08 c0       	rjmp	.+16     	; 0x1c2 <mcu_init+0x14>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 1b2:	e8 2f       	mov	r30, r24
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	e0 5f       	subi	r30, 0xF0	; 240
 1b8:	fb 4f       	sbci	r31, 0xFB	; 251
 1ba:	90 81       	ld	r25, Z
 1bc:	98 60       	ori	r25, 0x08	; 8
 1be:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 1c0:	8f 5f       	subi	r24, 0xFF	; 255
 1c2:	88 30       	cpi	r24, 0x08	; 8
 1c4:	b0 f3       	brcs	.-20     	; 0x1b2 <mcu_init+0x4>
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	08 c0       	rjmp	.+16     	; 0x1da <mcu_init+0x2c>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 1ca:	e8 2f       	mov	r30, r24
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	e0 5d       	subi	r30, 0xD0	; 208
 1d0:	fb 4f       	sbci	r31, 0xFB	; 251
 1d2:	90 81       	ld	r25, Z
 1d4:	98 60       	ori	r25, 0x08	; 8
 1d6:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 1d8:	8f 5f       	subi	r24, 0xFF	; 255
 1da:	88 30       	cpi	r24, 0x08	; 8
 1dc:	b0 f3       	brcs	.-20     	; 0x1ca <mcu_init+0x1c>
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	08 c0       	rjmp	.+16     	; 0x1f2 <mcu_init+0x44>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 1e2:	e8 2f       	mov	r30, r24
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	e0 5b       	subi	r30, 0xB0	; 176
 1e8:	fb 4f       	sbci	r31, 0xFB	; 251
 1ea:	90 81       	ld	r25, Z
 1ec:	98 60       	ori	r25, 0x08	; 8
 1ee:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 1f0:	8f 5f       	subi	r24, 0xFF	; 255
 1f2:	88 30       	cpi	r24, 0x08	; 8
 1f4:	b0 f3       	brcs	.-20     	; 0x1e2 <mcu_init+0x34>
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	08 c0       	rjmp	.+16     	; 0x20a <__EEPROM_REGION_LENGTH__+0xa>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 1fa:	e8 2f       	mov	r30, r24
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	e0 59       	subi	r30, 0x90	; 144
 200:	fb 4f       	sbci	r31, 0xFB	; 251
 202:	90 81       	ld	r25, Z
 204:	98 60       	ori	r25, 0x08	; 8
 206:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 208:	8f 5f       	subi	r24, 0xFF	; 255
 20a:	88 30       	cpi	r24, 0x08	; 8
 20c:	b0 f3       	brcs	.-20     	; 0x1fa <mcu_init+0x4c>
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	08 c0       	rjmp	.+16     	; 0x222 <__EEPROM_REGION_LENGTH__+0x22>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 212:	e8 2f       	mov	r30, r24
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	e0 57       	subi	r30, 0x70	; 112
 218:	fb 4f       	sbci	r31, 0xFB	; 251
 21a:	90 81       	ld	r25, Z
 21c:	98 60       	ori	r25, 0x08	; 8
 21e:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 220:	8f 5f       	subi	r24, 0xFF	; 255
 222:	88 30       	cpi	r24, 0x08	; 8
 224:	b0 f3       	brcs	.-20     	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	08 c0       	rjmp	.+16     	; 0x23a <__EEPROM_REGION_LENGTH__+0x3a>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 22a:	e8 2f       	mov	r30, r24
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	e0 55       	subi	r30, 0x50	; 80
 230:	fb 4f       	sbci	r31, 0xFB	; 251
 232:	90 81       	ld	r25, Z
 234:	98 60       	ori	r25, 0x08	; 8
 236:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 238:	8f 5f       	subi	r24, 0xFF	; 255
 23a:	88 30       	cpi	r24, 0x08	; 8
 23c:	b0 f3       	brcs	.-20     	; 0x22a <__EEPROM_REGION_LENGTH__+0x2a>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
 23e:	08 95       	ret

00000240 <OPERATIONAL_AMPLIFIER_0_initialization>:
 */
static inline void PORTD_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
 240:	e7 e7       	ldi	r30, 0x77	; 119
 242:	f4 e0       	ldi	r31, 0x04	; 4
 244:	80 81       	ld	r24, Z
 246:	88 7f       	andi	r24, 0xF8	; 248
 248:	84 60       	ori	r24, 0x04	; 4
 24a:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 24c:	80 81       	ld	r24, Z
 24e:	87 7f       	andi	r24, 0xF7	; 247
 250:	80 83       	st	Z, r24
 */
static inline void PORTD_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
 252:	e5 e7       	ldi	r30, 0x75	; 117
 254:	f4 e0       	ldi	r31, 0x04	; 4
 256:	80 81       	ld	r24, Z
 258:	88 7f       	andi	r24, 0xF8	; 248
 25a:	84 60       	ori	r24, 0x04	; 4
 25c:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 25e:	80 81       	ld	r24, Z
 260:	87 7f       	andi	r24, 0xF7	; 247
 262:	80 83       	st	Z, r24
	// Disable digital input buffer
	PD5_set_isc(PORT_ISC_INPUT_DISABLE_gc);
	// Disable pull-up resistor
	PD5_set_pull_mode(PORT_PULL_OFF);

	OPERATIONAL_AMPLIFIER_0_init();
 264:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <OPERATIONAL_AMPLIFIER_0_init>
 268:	08 95       	ret

0000026a <USART_0_initialization>:
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
 26a:	84 b1       	in	r24, 0x04	; 4
 26c:	8d 7f       	andi	r24, 0xFD	; 253
 26e:	84 b9       	out	0x04, r24	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 270:	e1 e3       	ldi	r30, 0x31	; 49
 272:	f4 e0       	ldi	r31, 0x04	; 4
 274:	80 81       	ld	r24, Z
 276:	87 7f       	andi	r24, 0xF7	; 247
 278:	80 83       	st	Z, r24
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
 27a:	85 b1       	in	r24, 0x05	; 5
 27c:	8e 7f       	andi	r24, 0xFE	; 254
 27e:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
 280:	84 b1       	in	r24, 0x04	; 4
 282:	81 60       	ori	r24, 0x01	; 1
 284:	84 b9       	out	0x04, r24	; 4
	    // <true"> High
	    false);

	PB0_set_dir(PORT_DIR_OUT);

	USART_0_init();
 286:	0e 94 a9 02 	call	0x552	; 0x552 <USART_0_init>
 28a:	08 95       	ret

0000028c <EVENT_SYSTEM_0_initialization>:
}

void EVENT_SYSTEM_0_initialization(void)
{

	EVENT_SYSTEM_0_init();
 28c:	0e 94 d5 01 	call	0x3aa	; 0x3aa <EVENT_SYSTEM_0_init>
 290:	08 95       	ret

00000292 <ZCD_RISING_initialization>:
 */
static inline void PORTD_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
 292:	e1 e7       	ldi	r30, 0x71	; 113
 294:	f4 e0       	ldi	r31, 0x04	; 4
 296:	80 81       	ld	r24, Z
 298:	88 7f       	andi	r24, 0xF8	; 248
 29a:	84 60       	ori	r24, 0x04	; 4
 29c:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 29e:	80 81       	ld	r24, Z
 2a0:	87 7f       	andi	r24, 0xF7	; 247
 2a2:	80 83       	st	Z, r24
	// Disable digital input buffer
	PD1_set_isc(PORT_ISC_INPUT_DISABLE_gc);
	// Disable pull-up resistor
	PD1_set_pull_mode(PORT_PULL_OFF);

	ZCD_RISING_init();
 2a4:	0e 94 ca 02 	call	0x594	; 0x594 <ZCD_RISING_init>
 2a8:	08 95       	ret

000002aa <ZCD_FALLING_initialization>:
 */
static inline void PORTE_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTE + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
 2aa:	e3 e9       	ldi	r30, 0x93	; 147
 2ac:	f4 e0       	ldi	r31, 0x04	; 4
 2ae:	80 81       	ld	r24, Z
 2b0:	88 7f       	andi	r24, 0xF8	; 248
 2b2:	84 60       	ori	r24, 0x04	; 4
 2b4:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTE + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 2b6:	80 81       	ld	r24, Z
 2b8:	87 7f       	andi	r24, 0xF7	; 247
 2ba:	80 83       	st	Z, r24
	// Disable digital input buffer
	PE3_set_isc(PORT_ISC_INPUT_DISABLE_gc);
	// Disable pull-up resistor
	PE3_set_pull_mode(PORT_PULL_OFF);

	ZCD_FALLING_init();
 2bc:	0e 94 cf 02 	call	0x59e	; 0x59e <ZCD_FALLING_init>
 2c0:	08 95       	ret

000002c2 <SPI_REFERENCE_initialization>:
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
 2c2:	81 b1       	in	r24, 0x01	; 1
 2c4:	8f 7d       	andi	r24, 0xDF	; 223
 2c6:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 2c8:	80 b1       	in	r24, 0x00	; 0
 2ca:	80 62       	ori	r24, 0x20	; 32
 2cc:	80 b9       	out	0x00, r24	; 0
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
 2ce:	80 b1       	in	r24, 0x00	; 0
 2d0:	8f 7e       	andi	r24, 0xEF	; 239
 2d2:	80 b9       	out	0x00, r24	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 2d4:	e4 e1       	ldi	r30, 0x14	; 20
 2d6:	f4 e0       	ldi	r31, 0x04	; 4
 2d8:	80 81       	ld	r24, Z
 2da:	87 7f       	andi	r24, 0xF7	; 247
 2dc:	80 83       	st	Z, r24
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
 2de:	80 b1       	in	r24, 0x00	; 0
 2e0:	8f 7b       	andi	r24, 0xBF	; 191
 2e2:	80 b9       	out	0x00, r24	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 2e4:	e6 e1       	ldi	r30, 0x16	; 22
 2e6:	f4 e0       	ldi	r31, 0x04	; 4
 2e8:	80 81       	ld	r24, Z
 2ea:	87 7f       	andi	r24, 0xF7	; 247
 2ec:	80 83       	st	Z, r24
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
 2ee:	80 b1       	in	r24, 0x00	; 0
 2f0:	8f 77       	andi	r24, 0x7F	; 127
 2f2:	80 b9       	out	0x00, r24	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 2f4:	e7 e1       	ldi	r30, 0x17	; 23
 2f6:	f4 e0       	ldi	r31, 0x04	; 4
 2f8:	80 81       	ld	r24, Z
 2fa:	87 7f       	andi	r24, 0xF7	; 247
 2fc:	80 83       	st	Z, r24
	    // <id> pad_pull_config
	    // <PORT_PULL_OFF"> Off
	    // <PORT_PULL_UP"> Pull-up
	    PORT_PULL_OFF);

	SPI_REFERENCE_init();
 2fe:	0e 94 11 02 	call	0x422	; 0x422 <SPI_REFERENCE_init>
 302:	08 95       	ret

00000304 <SPI_ZCD_initialization>:
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
 304:	89 b1       	in	r24, 0x09	; 9
 306:	8d 7f       	andi	r24, 0xFD	; 253
 308:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
 30a:	88 b1       	in	r24, 0x08	; 8
 30c:	82 60       	ori	r24, 0x02	; 2
 30e:	88 b9       	out	0x08, r24	; 8
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
 310:	88 b1       	in	r24, 0x08	; 8
 312:	8e 7f       	andi	r24, 0xFE	; 254
 314:	88 b9       	out	0x08, r24	; 8
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 316:	e0 e5       	ldi	r30, 0x50	; 80
 318:	f4 e0       	ldi	r31, 0x04	; 4
 31a:	80 81       	ld	r24, Z
 31c:	87 7f       	andi	r24, 0xF7	; 247
 31e:	80 83       	st	Z, r24
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
 320:	88 b1       	in	r24, 0x08	; 8
 322:	8b 7f       	andi	r24, 0xFB	; 251
 324:	88 b9       	out	0x08, r24	; 8
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 326:	e2 e5       	ldi	r30, 0x52	; 82
 328:	f4 e0       	ldi	r31, 0x04	; 4
 32a:	80 81       	ld	r24, Z
 32c:	87 7f       	andi	r24, 0xF7	; 247
 32e:	80 83       	st	Z, r24
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
 330:	88 b1       	in	r24, 0x08	; 8
 332:	87 7f       	andi	r24, 0xF7	; 247
 334:	88 b9       	out	0x08, r24	; 8
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 336:	e3 e5       	ldi	r30, 0x53	; 83
 338:	f4 e0       	ldi	r31, 0x04	; 4
 33a:	80 81       	ld	r24, Z
 33c:	87 7f       	andi	r24, 0xF7	; 247
 33e:	80 83       	st	Z, r24
	    // <id> pad_pull_config
	    // <PORT_PULL_OFF"> Off
	    // <PORT_PULL_UP"> Pull-up
	    PORT_PULL_OFF);

	SPI_ZCD_init();
 340:	0e 94 19 02 	call	0x432	; 0x432 <SPI_ZCD_init>
 344:	08 95       	ret

00000346 <TIMER_RISING_initialization>:
}

void TIMER_RISING_initialization(void)
{

	TIMER_RISING_init();
 346:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <TIMER_RISING_init>
 34a:	08 95       	ret

0000034c <TIMER_FALLING_initialization>:
}

void TIMER_FALLING_initialization(void)
{

	TIMER_FALLING_init();
 34c:	0e 94 88 02 	call	0x510	; 0x510 <TIMER_FALLING_init>
 350:	08 95       	ret

00000352 <TIMER_0_initialization>:
}

void TIMER_0_initialization(void)
{

	TIMER_0_init();
 352:	0e 94 94 02 	call	0x528	; 0x528 <TIMER_0_init>
 356:	08 95       	ret

00000358 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
 358:	0e 94 d7 00 	call	0x1ae	; 0x1ae <mcu_init>
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
 35c:	85 b1       	in	r24, 0x05	; 5
 35e:	87 7f       	andi	r24, 0xF7	; 247
 360:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
 362:	84 b1       	in	r24, 0x04	; 4
 364:	88 60       	ori	r24, 0x08	; 8
 366:	84 b9       	out	0x04, r24	; 4
	    // <true"> High
	    false);

	LED0_set_dir(PORT_DIR_OUT);

	OPERATIONAL_AMPLIFIER_0_initialization();
 368:	0e 94 20 01 	call	0x240	; 0x240 <OPERATIONAL_AMPLIFIER_0_initialization>

	CLKCTRL_init();
 36c:	0e 94 c3 00 	call	0x186	; 0x186 <CLKCTRL_init>

	USART_0_initialization();
 370:	0e 94 35 01 	call	0x26a	; 0x26a <USART_0_initialization>

	EVENT_SYSTEM_0_initialization();
 374:	0e 94 46 01 	call	0x28c	; 0x28c <EVENT_SYSTEM_0_initialization>

	SLPCTRL_init();
 378:	0e 94 0f 02 	call	0x41e	; 0x41e <SLPCTRL_init>

	CPUINT_init();
 37c:	0e 94 d5 00 	call	0x1aa	; 0x1aa <CPUINT_init>

	ZCD_RISING_initialization();
 380:	0e 94 49 01 	call	0x292	; 0x292 <ZCD_RISING_initialization>

	ZCD_FALLING_initialization();
 384:	0e 94 55 01 	call	0x2aa	; 0x2aa <ZCD_FALLING_initialization>

	SPI_REFERENCE_initialization();
 388:	0e 94 61 01 	call	0x2c2	; 0x2c2 <SPI_REFERENCE_initialization>

	SPI_ZCD_initialization();
 38c:	0e 94 82 01 	call	0x304	; 0x304 <SPI_ZCD_initialization>

	RTC_0_init();
 390:	0e 94 fe 01 	call	0x3fc	; 0x3fc <RTC_0_init>

	TIMER_RISING_initialization();
 394:	0e 94 a3 01 	call	0x346	; 0x346 <TIMER_RISING_initialization>

	TIMER_FALLING_initialization();
 398:	0e 94 a6 01 	call	0x34c	; 0x34c <TIMER_FALLING_initialization>

	TIMER_0_initialization();
 39c:	0e 94 a9 01 	call	0x352	; 0x352 <TIMER_0_initialization>

	VREF_0_init();
 3a0:	0e 94 c5 02 	call	0x58a	; 0x58a <VREF_0_init>

	BOD_init();
 3a4:	0e 94 bf 00 	call	0x17e	; 0x17e <BOD_init>
 3a8:	08 95       	ret

000003aa <EVENT_SYSTEM_0_init>:
 * \return Initialization status.
 */
int8_t EVENT_SYSTEM_0_init()
{

	EVSYS.CHANNEL0 = EVSYS_CHANNEL0_ZCD0_gc; /* Zero Cross Detect 0 out */
 3aa:	e0 e0       	ldi	r30, 0x00	; 0
 3ac:	f2 e0       	ldi	r31, 0x02	; 2
 3ae:	80 e3       	ldi	r24, 0x30	; 48
 3b0:	80 8b       	std	Z+16, r24	; 0x10

	EVSYS.CHANNEL1 = EVSYS_CHANNEL1_ZCD1_gc; /* Zero Cross Detect 1 out */
 3b2:	81 e3       	ldi	r24, 0x31	; 49
 3b4:	81 8b       	std	Z+17, r24	; 0x11

	// EVSYS.USERTCA1CNTA = EVSYS_USER_OFF_gc; /* Off */

	// EVSYS.USERTCA1CNTB = EVSYS_USER_OFF_gc; /* Off */

	EVSYS.USERTCB0CAPT = EVSYS_USER_CHANNEL0_gc; /* Connect user to event channel 0 */
 3b6:	91 e0       	ldi	r25, 0x01	; 1
 3b8:	96 af       	std	Z+62, r25	; 0x3e

	// EVSYS.USERTCB0COUNT = EVSYS_USER_OFF_gc; /* Off */

	EVSYS.USERTCB1CAPT = EVSYS_USER_CHANNEL1_gc; /* Connect user to event channel 1 */
 3ba:	82 e0       	ldi	r24, 0x02	; 2
 3bc:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <__TEXT_REGION_LENGTH__+0x7e0240>

	// EVSYS.USERTCB2CAPT = EVSYS_USER_OFF_gc; /* Off */

	// EVSYS.USERTCB2COUNT = EVSYS_USER_OFF_gc; /* Off */

	EVSYS.USERTCB3CAPT = EVSYS_USER_CHANNEL1_gc; /* Connect user to event channel 1 */
 3c0:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <__TEXT_REGION_LENGTH__+0x7e0244>

	// EVSYS.USERTCB3COUNT = EVSYS_USER_OFF_gc; /* Off */

	EVSYS.USERTCD0INPUTA = EVSYS_USER_CHANNEL0_gc; /* Connect user to event channel 0 */
 3c4:	90 93 48 02 	sts	0x0248, r25	; 0x800248 <__TEXT_REGION_LENGTH__+0x7e0248>

	EVSYS.USERTCD0INPUTB = EVSYS_USER_CHANNEL1_gc; /* Connect user to event channel 1 */
 3c8:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <__TEXT_REGION_LENGTH__+0x7e0249>
	// EVSYS.USEROPAMP2DUMP = EVSYS_USER_OFF_gc; /* Off */

	// EVSYS.USEROPAMP2DISABLE = EVSYS_USER_OFF_gc; /* Off */

	return 0;
}
 3cc:	80 e0       	ldi	r24, 0x00	; 0
 3ce:	08 95       	ret

000003d0 <OPERATIONAL_AMPLIFIER_0_init>:
 * \return Initialization status.
 */
int8_t OPERATIONAL_AMPLIFIER_0_init()
{

	OPAMP.CTRLA = 1 << OPAMP_ENABLE_bp; /* OPAMP Peripheral Enable: enabled */
 3d0:	e0 e0       	ldi	r30, 0x00	; 0
 3d2:	f7 e0       	ldi	r31, 0x07	; 7
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	80 83       	st	Z, r24

	OPAMP.DBGCTRL = 1 << OPAMP_DBGRUN_bp; /* Run in Debug mode: enabled */
 3d8:	81 83       	std	Z+1, r24	; 0x01

	OPAMP.TIMEBASE = OPAMP_TIMEBASE_VALUE << OPAMP_TIMEBASE_gp;
 3da:	87 e1       	ldi	r24, 0x17	; 23
 3dc:	82 83       	std	Z+2, r24	; 0x02

	// OPAMP.PWRCTRL = OPAMP_PWRCTRL_IRSEL_FULL_gc; /* Full Input Range */

	OPAMP.OP1SETTLE = 0x7f << OPAMP_SETTLE_gp; /* Setting: 0x7f */
 3de:	8f e7       	ldi	r24, 0x7F	; 127
 3e0:	84 8f       	std	Z+28, r24	; 0x1c

	OPAMP.OP1CTRLA = 1 << OPAMP_ALWAYSON_bp             /* Always ON: enabled */
 3e2:	85 e0       	ldi	r24, 0x05	; 5
 3e4:	80 8f       	std	Z+24, r24	; 0x18
	                 | 0 << OPAMP_EVENTEN_bp            /* Event Enable: disabled */
	                 | OPAMP_OP1CTRLA_OUTMODE_NORMAL_gc /* Output Driver in Normal Mode */
	                 | 0 << OPAMP_RUNSTBY_bp;           /* Run is standby mode: disabled */

	OPAMP.OP1RESMUX = OPAMP_OP1RESMUX_MUXTOP_OUT_gc     /* OPn output */
 3e6:	89 ee       	ldi	r24, 0xE9	; 233
 3e8:	82 8f       	std	Z+26, r24	; 0x1a
	                  | OPAMP_OP1RESMUX_MUXBOT_INN_gc   /* Negative input pin for OPn */
	                  | OPAMP_OP1RESMUX_MUXWIP_WIP7_gc; /* R1 = 1R, R2 = 15R, R2/R1 = 15 */

	OPAMP.OP1INMUX = OPAMP_OP1INMUX_MUXPOS_VDDDIV2_gc /* VDD/2 */
 3ea:	84 e1       	ldi	r24, 0x14	; 20
 3ec:	83 8f       	std	Z+27, r24	; 0x1b
	                 | OPAMP_OP1INMUX_MUXNEG_WIP_gc;  /* Wiper from OPn's resistor ladder */

	return 0;
}
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	08 95       	ret

000003f2 <protected_write_io>:
	PUBLIC_FUNCTION(protected_write_io)

#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
 3f2:	1b be       	out	0x3b, r1	; 59
#endif
	movw    r30, r24                // Load addr into Z
 3f4:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
 3f6:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
 3f8:	40 83       	st	Z, r20
	ret                             // Return to caller
 3fa:	08 95       	ret

000003fc <RTC_0_init>:
 * \return Initialization status.
 */
int8_t RTC_0_init()
{

	while (RTC.STATUS > 0) { /* Wait for all register to be synchronized */
 3fc:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
 400:	81 11       	cpse	r24, r1
 402:	fc cf       	rjmp	.-8      	; 0x3fc <RTC_0_init>

	// RTC.CMP = 0x0; /* Compare: 0x0 */

	// RTC.CNT = 0x0; /* Counter: 0x0 */

	RTC.CTRLA = RTC_PRESCALER_DIV32_gc  /* 32 */
 404:	e0 e4       	ldi	r30, 0x40	; 64
 406:	f1 e0       	ldi	r31, 0x01	; 1
 408:	88 ea       	ldi	r24, 0xA8	; 168
 40a:	80 83       	st	Z, r24
	            | 0 << RTC_RTCEN_bp     /* Enable: disabled */
	            | 1 << RTC_RUNSTDBY_bp; /* Run In Standby: enabled */

	RTC.PER = 0x1ff; /* Period: 0x1ff */
 40c:	8f ef       	ldi	r24, 0xFF	; 255
 40e:	91 e0       	ldi	r25, 0x01	; 1
 410:	82 87       	std	Z+10, r24	; 0x0a
 412:	93 87       	std	Z+11, r25	; 0x0b

	RTC.CLKSEL = RTC_CLKSEL_OSC32K_gc; /* Internal 32.768 kHz oscillator */
 414:	17 82       	std	Z+7, r1	; 0x07

	// RTC.DBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	RTC.INTCTRL = 0 << RTC_CMP_bp    /* Compare Match Interrupt enable: disabled */
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	82 83       	std	Z+2, r24	; 0x02
	// RTC.PITDBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	// RTC.PITINTCTRL = 0 << RTC_PI_bp; /* Periodic Interrupt: disabled */

	return 0;
}
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	08 95       	ret

0000041e <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
 41e:	80 e0       	ldi	r24, 0x00	; 0
 420:	08 95       	ret

00000422 <SPI_REFERENCE_init>:
                 after the previous one (i.e. data transfer phase
                 after control/command phase).
*/
void SPI_ZCD_register_callback(spi_transfer_done_cb_t f)
{
	SPI_ZCD_desc.cb = f;
 422:	e0 e4       	ldi	r30, 0x40	; 64
 424:	f9 e0       	ldi	r31, 0x09	; 9
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	80 83       	st	Z, r24
 42a:	82 83       	std	Z+2, r24	; 0x02
 42c:	10 92 15 40 	sts	0x4015, r1	; 0x804015 <SPI_REFERENCE_desc>
 430:	08 95       	ret

00000432 <SPI_ZCD_init>:
 432:	e0 e6       	ldi	r30, 0x60	; 96
 434:	f9 e0       	ldi	r31, 0x09	; 9
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	80 83       	st	Z, r24
 43a:	81 ee       	ldi	r24, 0xE1	; 225
 43c:	82 83       	std	Z+2, r24	; 0x02
 43e:	ee e0       	ldi	r30, 0x0E	; 14
 440:	f0 e4       	ldi	r31, 0x40	; 64
 442:	10 82       	st	Z, r1
 444:	15 82       	std	Z+5, r1	; 0x05
 446:	16 82       	std	Z+6, r1	; 0x06
 448:	08 95       	ret

0000044a <__vector_37>:
}

ISR(SPI1_INT_vect)
{
 44a:	1f 92       	push	r1
 44c:	0f 92       	push	r0
 44e:	0f b6       	in	r0, 0x3f	; 63
 450:	0f 92       	push	r0
 452:	11 24       	eor	r1, r1
 454:	0b b6       	in	r0, 0x3b	; 59
 456:	0f 92       	push	r0
 458:	2f 93       	push	r18
 45a:	3f 93       	push	r19
 45c:	4f 93       	push	r20
 45e:	5f 93       	push	r21
 460:	6f 93       	push	r22
 462:	7f 93       	push	r23
 464:	8f 93       	push	r24
 466:	9f 93       	push	r25
 468:	af 93       	push	r26
 46a:	bf 93       	push	r27
 46c:	ef 93       	push	r30
 46e:	ff 93       	push	r31
	/* SPI_ZCD_desc.data points to array element
	   to write the received data to. The data to be transmitted
	   is in the next array element.
	*/
	uint8_t rdata = SPI1.DATA;
 470:	e0 e6       	ldi	r30, 0x60	; 96
 472:	f9 e0       	ldi	r31, 0x09	; 9
 474:	94 81       	ldd	r25, Z+4	; 0x04
	uint8_t wdata = 0;

	SPI1.INTFLAGS = SPI_RXCIF_bm;
 476:	80 e8       	ldi	r24, 0x80	; 128
 478:	83 83       	std	Z+3, r24	; 0x03

	if (SPI_ZCD_desc.type != SPI_WRITE) {
 47a:	80 91 12 40 	lds	r24, 0x4012	; 0x804012 <__data_end+0x4>
 47e:	82 30       	cpi	r24, 0x02	; 2
 480:	29 f0       	breq	.+10     	; 0x48c <__vector_37+0x42>
		*SPI_ZCD_desc.data = rdata;
 482:	e0 91 0f 40 	lds	r30, 0x400F	; 0x80400f <__data_end+0x1>
 486:	f0 91 10 40 	lds	r31, 0x4010	; 0x804010 <__data_end+0x2>
 48a:	90 83       	st	Z, r25
	}

	SPI_ZCD_desc.data++;
 48c:	ee e0       	ldi	r30, 0x0E	; 14
 48e:	f0 e4       	ldi	r31, 0x40	; 64
 490:	a1 81       	ldd	r26, Z+1	; 0x01
 492:	b2 81       	ldd	r27, Z+2	; 0x02
 494:	9d 01       	movw	r18, r26
 496:	2f 5f       	subi	r18, 0xFF	; 255
 498:	3f 4f       	sbci	r19, 0xFF	; 255
 49a:	21 83       	std	Z+1, r18	; 0x01
 49c:	32 83       	std	Z+2, r19	; 0x02

	if (SPI_ZCD_desc.type != SPI_READ)
 49e:	81 30       	cpi	r24, 0x01	; 1
 4a0:	19 f0       	breq	.+6      	; 0x4a8 <__vector_37+0x5e>
		wdata = *SPI_ZCD_desc.data;
 4a2:	11 96       	adiw	r26, 0x01	; 1
 4a4:	9c 91       	ld	r25, X
 4a6:	01 c0       	rjmp	.+2      	; 0x4aa <__vector_37+0x60>
	/* SPI_ZCD_desc.data points to array element
	   to write the received data to. The data to be transmitted
	   is in the next array element.
	*/
	uint8_t rdata = SPI1.DATA;
	uint8_t wdata = 0;
 4a8:	90 e0       	ldi	r25, 0x00	; 0
	SPI_ZCD_desc.data++;

	if (SPI_ZCD_desc.type != SPI_READ)
		wdata = *SPI_ZCD_desc.data;

	SPI_ZCD_desc.size--;
 4aa:	ee e0       	ldi	r30, 0x0E	; 14
 4ac:	f0 e4       	ldi	r31, 0x40	; 64
 4ae:	83 81       	ldd	r24, Z+3	; 0x03
 4b0:	81 50       	subi	r24, 0x01	; 1
 4b2:	83 83       	std	Z+3, r24	; 0x03
	// if more bytes to be transferred
	if (SPI_ZCD_desc.size != 0) {
 4b4:	88 23       	and	r24, r24
 4b6:	19 f0       	breq	.+6      	; 0x4be <__vector_37+0x74>
		// more data to send, send a byte
		SPI1.DATA = wdata;
 4b8:	90 93 64 09 	sts	0x0964, r25	; 0x800964 <__TEXT_REGION_LENGTH__+0x7e0964>
 4bc:	0a c0       	rjmp	.+20     	; 0x4d2 <__vector_37+0x88>
	}

	// if last byte has been transferred, update status
	// and optionally call callback
	else {
		SPI_ZCD_desc.status = SPI_DONE;
 4be:	ee e0       	ldi	r30, 0x0E	; 14
 4c0:	f0 e4       	ldi	r31, 0x40	; 64
 4c2:	83 e0       	ldi	r24, 0x03	; 3
 4c4:	80 83       	st	Z, r24
		if (SPI_ZCD_desc.cb != NULL) {
 4c6:	05 80       	ldd	r0, Z+5	; 0x05
 4c8:	f6 81       	ldd	r31, Z+6	; 0x06
 4ca:	e0 2d       	mov	r30, r0
 4cc:	30 97       	sbiw	r30, 0x00	; 0
 4ce:	09 f0       	breq	.+2      	; 0x4d2 <__vector_37+0x88>
			SPI_ZCD_desc.cb();
 4d0:	09 95       	icall
		}
	}
}
 4d2:	ff 91       	pop	r31
 4d4:	ef 91       	pop	r30
 4d6:	bf 91       	pop	r27
 4d8:	af 91       	pop	r26
 4da:	9f 91       	pop	r25
 4dc:	8f 91       	pop	r24
 4de:	7f 91       	pop	r23
 4e0:	6f 91       	pop	r22
 4e2:	5f 91       	pop	r21
 4e4:	4f 91       	pop	r20
 4e6:	3f 91       	pop	r19
 4e8:	2f 91       	pop	r18
 4ea:	0f 90       	pop	r0
 4ec:	0b be       	out	0x3b, r0	; 59
 4ee:	0f 90       	pop	r0
 4f0:	0f be       	out	0x3f, r0	; 63
 4f2:	0f 90       	pop	r0
 4f4:	1f 90       	pop	r1
 4f6:	18 95       	reti

000004f8 <TIMER_RISING_init>:

	// TCB0.CCMP = 0x0; /* Compare or Capture: 0x0 */

	// TCB0.CNT = 0x0; /* Count: 0x0 */

	TCB0.CTRLB = 1 << TCB_ASYNC_bp      /* Asynchronous Enable: enabled */
 4f8:	e0 e0       	ldi	r30, 0x00	; 0
 4fa:	fb e0       	ldi	r31, 0x0B	; 11
 4fc:	83 e4       	ldi	r24, 0x43	; 67
 4fe:	81 83       	std	Z+1, r24	; 0x01
	             | 0 << TCB_CCMPEN_bp   /* Pin Output Enable: disabled */
	             | 0 << TCB_CCMPINIT_bp /* Pin Initial State: disabled */
	             | TCB_CNTMODE_FRQ_gc;  /* Input Capture Frequency measurement */

	TCB0.DBGCTRL = 1 << TCB_DBGRUN_bp; /* Debug Run: enabled */
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	80 87       	std	Z+8, r24	; 0x08

	TCB0.EVCTRL = 1 << TCB_CAPTEI_bp    /* Event Input Enable: enabled */
 504:	84 83       	std	Z+4, r24	; 0x04
	              | 0 << TCB_EDGE_bp    /* Event Edge: disabled */
	              | 0 << TCB_FILTER_bp; /* Input Capture Noise Cancellation Filter: disabled */

	TCB0.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
 506:	85 83       	std	Z+5, r24	; 0x05
	               | 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */

	TCB0.CTRLA = TCB_CLKSEL_DIV1_gc     /* CLK_PER */
 508:	81 e1       	ldi	r24, 0x11	; 17
 50a:	80 83       	st	Z, r24
	             | 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
	             | 1 << TCB_SYNCUPD_bp  /* Synchronize Update: enabled */
	             | 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */

	return 0;
}
 50c:	80 e0       	ldi	r24, 0x00	; 0
 50e:	08 95       	ret

00000510 <TIMER_FALLING_init>:

	// TCB1.CCMP = 0x0; /* Compare or Capture: 0x0 */

	// TCB1.CNT = 0x0; /* Count: 0x0 */

	TCB1.CTRLB = 1 << TCB_ASYNC_bp      /* Asynchronous Enable: enabled */
 510:	e0 e1       	ldi	r30, 0x10	; 16
 512:	fb e0       	ldi	r31, 0x0B	; 11
 514:	83 e4       	ldi	r24, 0x43	; 67
 516:	81 83       	std	Z+1, r24	; 0x01
	             | 0 << TCB_CCMPEN_bp   /* Pin Output Enable: disabled */
	             | 0 << TCB_CCMPINIT_bp /* Pin Initial State: disabled */
	             | TCB_CNTMODE_FRQ_gc;  /* Input Capture Frequency measurement */

	TCB1.DBGCTRL = 1 << TCB_DBGRUN_bp; /* Debug Run: enabled */
 518:	81 e0       	ldi	r24, 0x01	; 1
 51a:	80 87       	std	Z+8, r24	; 0x08

	TCB1.EVCTRL = 1 << TCB_CAPTEI_bp    /* Event Input Enable: enabled */
 51c:	84 83       	std	Z+4, r24	; 0x04
	              | 0 << TCB_EDGE_bp    /* Event Edge: disabled */
	              | 0 << TCB_FILTER_bp; /* Input Capture Noise Cancellation Filter: disabled */

	TCB1.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
 51e:	85 83       	std	Z+5, r24	; 0x05
	               | 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */

	TCB1.CTRLA = TCB_CLKSEL_DIV1_gc     /* CLK_PER */
 520:	81 e1       	ldi	r24, 0x11	; 17
 522:	80 83       	st	Z, r24
	             | 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
	             | 1 << TCB_SYNCUPD_bp  /* Synchronize Update: enabled */
	             | 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */

	return 0;
}
 524:	80 e0       	ldi	r24, 0x00	; 0
 526:	08 95       	ret

00000528 <TIMER_0_init>:
int8_t TIMER_0_init()
{

	// Enable Protected register, peripheral must be disabled (ENABLE=0, in TCD.CTRLA).

	TCD0.CMPASET = 4095; /* Compare A Set: 4095 */
 528:	e0 e8       	ldi	r30, 0x80	; 128
 52a:	fb e0       	ldi	r31, 0x0B	; 11
 52c:	8f ef       	ldi	r24, 0xFF	; 255
 52e:	9f e0       	ldi	r25, 0x0F	; 15
 530:	80 a7       	std	Z+40, r24	; 0x28
 532:	91 a7       	std	Z+41, r25	; 0x29
	//		 | TCD_DLYTRIG_CMPASET_gc; /* Compare A set */

	// TCD0.DLYVAL = 0 << TCD_DLYVAL_gp; /* Delay value: 0 */

	TCD0.EVCTRLA
	    = TCD_CFG_FILTER_gc       /* Input Capture Noise Cancellation Filter enabled */
 534:	85 e5       	ldi	r24, 0x55	; 85
 536:	80 87       	std	Z+8, r24	; 0x08
	      | TCD_ACTION_CAPTURE_gc /* Event trigger a fault and capture */
	      | TCD_EDGE_RISE_HIGH_gc /* The rising edge or high level of event generates retrigger or fault action */
	      | 1 << TCD_TRIGEI_bp;   /* Trigger event enable: enabled */

	TCD0.EVCTRLB
	    = TCD_CFG_NEITHER_gc      /* Neither Filter nor Asynchronous Event is enabled */
 538:	84 e1       	ldi	r24, 0x14	; 20
 53a:	81 87       	std	Z+9, r24	; 0x09

	// TCD0.INPUTCTRLA = TCD_INPUTMODE_NONE_gc; /* Input has no actions */

	// TCD0.INPUTCTRLB = TCD_INPUTMODE_NONE_gc; /* Input has no actions */

	TCD0.INTCTRL = 0 << TCD_OVF_bp      /* Overflow interrupt enable: disabled */
 53c:	84 e0       	ldi	r24, 0x04	; 4
 53e:	84 87       	std	Z+12, r24	; 0x0c
	               | 1 << TCD_TRIGA_bp  /* Trigger A interrupt enable: enabled */
	               | 0 << TCD_TRIGB_bp; /* Trigger B interrupt enable: disabled */

	while ((TCD0.STATUS & TCD_ENRDY_bm) == 0)
 540:	80 91 8e 0b 	lds	r24, 0x0B8E	; 0x800b8e <__TEXT_REGION_LENGTH__+0x7e0b8e>
 544:	80 ff       	sbrs	r24, 0
 546:	fc cf       	rjmp	.-8      	; 0x540 <TIMER_0_init+0x18>
		; // Wait for Enable Ready to be high.

	TCD0.CTRLA = 1 << TCD_ENABLE_bp      /* Enable: enabled */
 548:	81 e2       	ldi	r24, 0x21	; 33
 54a:	80 93 80 0b 	sts	0x0B80, r24	; 0x800b80 <__TEXT_REGION_LENGTH__+0x7e0b80>
	             | TCD_CLKSEL_PLL_gc     /*  */
	             | TCD_CNTPRES_DIV1_gc   /* Sync clock divided by 1 */
	             | TCD_SYNCPRES_DIV1_gc; /*  */

	return 0;
}
 54e:	80 e0       	ldi	r24, 0x00	; 0
 550:	08 95       	ret

00000552 <USART_0_init>:
uint8_t USART_0_read()
{
	while (!(USART3.STATUS & USART_RXCIF_bm))
		;
	return USART3.RXDATAL;
}
 552:	e0 e6       	ldi	r30, 0x60	; 96
 554:	f8 e0       	ldi	r31, 0x08	; 8
 556:	81 e4       	ldi	r24, 0x41	; 65
 558:	93 e0       	ldi	r25, 0x03	; 3
 55a:	80 87       	std	Z+8, r24	; 0x08
 55c:	91 87       	std	Z+9, r25	; 0x09
 55e:	80 ec       	ldi	r24, 0xC0	; 192
 560:	86 83       	std	Z+6, r24	; 0x06
 562:	80 e0       	ldi	r24, 0x00	; 0
 564:	90 e4       	ldi	r25, 0x40	; 64
 566:	80 93 18 40 	sts	0x4018, r24	; 0x804018 <__iob+0x2>
 56a:	90 93 19 40 	sts	0x4019, r25	; 0x804019 <__iob+0x3>
 56e:	80 e0       	ldi	r24, 0x00	; 0
 570:	08 95       	ret

00000572 <USART_0_write>:
 *
 * \return Nothing
 */
void USART_0_write(const uint8_t data)
{
	while (!(USART3.STATUS & USART_DREIF_bm))
 572:	90 91 64 08 	lds	r25, 0x0864	; 0x800864 <__TEXT_REGION_LENGTH__+0x7e0864>
 576:	95 ff       	sbrs	r25, 5
 578:	fc cf       	rjmp	.-8      	; 0x572 <USART_0_write>
		;
	USART3.TXDATAL = data;
 57a:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <__TEXT_REGION_LENGTH__+0x7e0862>
 57e:	08 95       	ret

00000580 <USART_0_printCHAR>:

#if defined(__GNUC__)

int USART_0_printCHAR(char character, FILE *stream)
{
	USART_0_write(character);
 580:	0e 94 b9 02 	call	0x572	; 0x572 <USART_0_write>
	return 0;
}
 584:	80 e0       	ldi	r24, 0x00	; 0
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	08 95       	ret

0000058a <VREF_0_init>:
	//		 | VREF_REFSEL_1V024_gc; /* Internal 1.024V reference */

	// VREF.DAC0REF = 0 << VREF_ALWAYSON_bp /* Enable reference always ON for DAC0: disabled */
	//		 | VREF_REFSEL_1V024_gc; /* Internal 1.024V reference */

	VREF.ACREF = 1 << VREF_ALWAYSON_bp /* Enable reference always ON for AC: enabled */
 58a:	85 e8       	ldi	r24, 0x85	; 133
 58c:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
	             | VREF_REFSEL_VDD_gc; /* VDD as reference */

	return 0;
}
 590:	80 e0       	ldi	r24, 0x00	; 0
 592:	08 95       	ret

00000594 <ZCD_RISING_init>:
 * \return Initialization status.
 */
int8_t ZCD_RISING_init()
{

	ZCD0.CTRLA = 1 << ZCD_ENABLE_bp     /* Setting: enabled */
 594:	81 e4       	ldi	r24, 0x41	; 65
 596:	80 93 c0 06 	sts	0x06C0, r24	; 0x8006c0 <__TEXT_REGION_LENGTH__+0x7e06c0>
	             | 0 << ZCD_INVERT_bp;  /* Setting: disabled */

	// ZCD0.INTCTRL = ZCD_INTMODE_NONE_gc; /* No interrupt */

	return 0;
}
 59a:	80 e0       	ldi	r24, 0x00	; 0
 59c:	08 95       	ret

0000059e <ZCD_FALLING_init>:
 * \return Initialization status.
 */
int8_t ZCD_FALLING_init()
{

	ZCD1.CTRLA = 1 << ZCD_ENABLE_bp     /* Setting: enabled */
 59e:	89 e4       	ldi	r24, 0x49	; 73
 5a0:	80 93 c8 06 	sts	0x06C8, r24	; 0x8006c8 <__TEXT_REGION_LENGTH__+0x7e06c8>
	             | 1 << ZCD_INVERT_bp;  /* Setting: enabled */

	// ZCD1.INTCTRL = ZCD_INTMODE_NONE_gc; /* No interrupt */

	return 0;
}
 5a4:	80 e0       	ldi	r24, 0x00	; 0
 5a6:	08 95       	ret

000005a8 <_exit>:
 5a8:	f8 94       	cli

000005aa <__stop_program>:
 5aa:	ff cf       	rjmp	.-2      	; 0x5aa <__stop_program>
