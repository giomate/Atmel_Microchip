
AVR128DB_BSP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00804000  000005de  00000672  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  0080400e  0080400e  00000680  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000680  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000390  00000000  00000000  000006f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007431  00000000  00000000  00000a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003ccc  00000000  00000000  00007eb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b3f  00000000  00000000  0000bb7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000648  00000000  00000000  0000d6bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000043ac  00000000  00000000  0000dd04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b50  00000000  00000000  000120b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000280  00000000  00000000  00012c00  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
   4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
   8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
   c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  10:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  14:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  18:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  1c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  20:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  24:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  28:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  2c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  30:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  34:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  38:	0c 94 bc 00 	jmp	0x178	; 0x178 <__vector_14>
  3c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  40:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  44:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__vector_17>
  48:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  4c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  50:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__vector_20>
  54:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  58:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  5c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  60:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  64:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  68:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  6c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  70:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__vector_28>
  74:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  78:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  7c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  80:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  84:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  88:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  8c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  90:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  94:	0c 94 42 02 	jmp	0x484	; 0x484 <__vector_37>
  98:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  9c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  ac:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  bc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  cc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d0:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__vector_52>
  d4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  dc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  ec:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  f0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	df e7       	ldi	r29, 0x7F	; 127
  fe:	de bf       	out	0x3e, r29	; 62

00000100 <__do_copy_data>:
 100:	10 e4       	ldi	r17, 0x40	; 64
 102:	a0 e0       	ldi	r26, 0x00	; 0
 104:	b0 e4       	ldi	r27, 0x40	; 64
 106:	ee ed       	ldi	r30, 0xDE	; 222
 108:	f5 e0       	ldi	r31, 0x05	; 5
 10a:	00 e0       	ldi	r16, 0x00	; 0
 10c:	0b bf       	out	0x3b, r16	; 59
 10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x14>
 110:	07 90       	elpm	r0, Z+
 112:	0d 92       	st	X+, r0
 114:	ae 30       	cpi	r26, 0x0E	; 14
 116:	b1 07       	cpc	r27, r17
 118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0x10>

0000011a <__do_clear_bss>:
 11a:	20 e4       	ldi	r18, 0x40	; 64
 11c:	ae e0       	ldi	r26, 0x0E	; 14
 11e:	b0 e4       	ldi	r27, 0x40	; 64
 120:	01 c0       	rjmp	.+2      	; 0x124 <.do_clear_bss_start>

00000122 <.do_clear_bss_loop>:
 122:	1d 92       	st	X+, r1

00000124 <.do_clear_bss_start>:
 124:	a2 32       	cpi	r26, 0x22	; 34
 126:	b2 07       	cpc	r27, r18
 128:	e1 f7       	brne	.-8      	; 0x122 <.do_clear_bss_loop>
 12a:	0e 94 e5 00 	call	0x1ca	; 0x1ca <main>
 12e:	0c 94 ed 02 	jmp	0x5da	; 0x5da <_exit>

00000132 <__bad_interrupt>:
 132:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000136 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
 136:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <system_init>
 13a:	08 95       	ret

0000013c <__vector_28>:

#include <driver_init.h>
#include <compiler.h>

ISR(ZCD0_ZCD_vect)
{
 13c:	1f 92       	push	r1
 13e:	0f 92       	push	r0
 140:	0f b6       	in	r0, 0x3f	; 63
 142:	0f 92       	push	r0
 144:	11 24       	eor	r1, r1
 146:	8f 93       	push	r24
	/* Insert your ZCD interrupt handling code here */

	ZCD0.STATUS = ZCD_CROSSIF_bm;
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	80 93 c3 06 	sts	0x06C3, r24	; 0x8006c3 <__TEXT_REGION_LENGTH__+0x7e06c3>
}
 14e:	8f 91       	pop	r24
 150:	0f 90       	pop	r0
 152:	0f be       	out	0x3f, r0	; 63
 154:	0f 90       	pop	r0
 156:	1f 90       	pop	r1
 158:	18 95       	reti

0000015a <__vector_52>:

ISR(ZCD1_ZCD_vect)
{
 15a:	1f 92       	push	r1
 15c:	0f 92       	push	r0
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	0f 92       	push	r0
 162:	11 24       	eor	r1, r1
 164:	8f 93       	push	r24
	/* Insert your ZCD interrupt handling code here */

	ZCD1.STATUS = ZCD_CROSSIF_bm;
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	80 93 cb 06 	sts	0x06CB, r24	; 0x8006cb <__TEXT_REGION_LENGTH__+0x7e06cb>
}
 16c:	8f 91       	pop	r24
 16e:	0f 90       	pop	r0
 170:	0f be       	out	0x3f, r0	; 63
 172:	0f 90       	pop	r0
 174:	1f 90       	pop	r1
 176:	18 95       	reti

00000178 <__vector_14>:

ISR(TCB0_INT_vect)
{
 178:	1f 92       	push	r1
 17a:	0f 92       	push	r0
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	0f 92       	push	r0
 180:	11 24       	eor	r1, r1
 182:	0b b6       	in	r0, 0x3b	; 59
 184:	0f 92       	push	r0
 186:	8f 93       	push	r24
 188:	ef 93       	push	r30
 18a:	ff 93       	push	r31

	TCB0.INTFLAGS = TCB_CAPT_bm;
 18c:	e0 e0       	ldi	r30, 0x00	; 0
 18e:	fb e0       	ldi	r31, 0x0B	; 11
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	86 83       	std	Z+6, r24	; 0x06

	TCB0.INTFLAGS = TCB_OVF_bm;
 194:	82 e0       	ldi	r24, 0x02	; 2
 196:	86 83       	std	Z+6, r24	; 0x06
}
 198:	ff 91       	pop	r31
 19a:	ef 91       	pop	r30
 19c:	8f 91       	pop	r24
 19e:	0f 90       	pop	r0
 1a0:	0b be       	out	0x3b, r0	; 59
 1a2:	0f 90       	pop	r0
 1a4:	0f be       	out	0x3f, r0	; 63
 1a6:	0f 90       	pop	r0
 1a8:	1f 90       	pop	r1
 1aa:	18 95       	reti

000001ac <__vector_17>:

ISR(TCD0_TRIG_vect)
{
 1ac:	1f 92       	push	r1
 1ae:	0f 92       	push	r0
 1b0:	0f b6       	in	r0, 0x3f	; 63
 1b2:	0f 92       	push	r0
 1b4:	11 24       	eor	r1, r1
 1b6:	8f 93       	push	r24
	/* Insert your TCD TRIGA interrupt handling code here */

	/* Insert your TCD TRIGB interrupt handling code here */

	/* TRIGA and TRIGB interrupt flags have to be cleared manually */
	TCD0.INTFLAGS = TCD_TRIGA_bm | TCD_TRIGB_bm;
 1b8:	8c e0       	ldi	r24, 0x0C	; 12
 1ba:	80 93 8d 0b 	sts	0x0B8D, r24	; 0x800b8d <__TEXT_REGION_LENGTH__+0x7e0b8d>
}
 1be:	8f 91       	pop	r24
 1c0:	0f 90       	pop	r0
 1c2:	0f be       	out	0x3f, r0	; 63
 1c4:	0f 90       	pop	r0
 1c6:	1f 90       	pop	r1
 1c8:	18 95       	reti

000001ca <main>:

int main(void)
{
	uint32_t dummy=0;
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
 1ca:	0e 94 9b 00 	call	0x136	; 0x136 <atmel_start_init>
 1ce:	ff cf       	rjmp	.-2      	; 0x1ce <main+0x4>

000001d0 <BOD_init>:
int8_t BOD_init()
{

	// ccp_write_io((void*)&(BOD.CTRLA),BOD_SLEEP_DIS_gc /* Disabled */);

	BOD.INTCTRL = 0 << BOD_VLMIE_bp        /* voltage level monitor interrrupt enable: disabled */
 1d0:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
	              | BOD_VLMCFG_FALLING_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	08 95       	ret

000001d8 <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
 1d8:	41 e0       	ldi	r20, 0x01	; 1
 1da:	68 ed       	ldi	r22, 0xD8	; 216
 1dc:	8c e7       	ldi	r24, 0x7C	; 124
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0e 94 ae 01 	call	0x35c	; 0x35c <protected_write_io>
 1e4:	41 e0       	ldi	r20, 0x01	; 1
 1e6:	68 ed       	ldi	r22, 0xD8	; 216
 1e8:	80 e8       	ldi	r24, 0x80	; 128
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	0e 94 ae 01 	call	0x35c	; 0x35c <protected_write_io>
 1f0:	44 ea       	ldi	r20, 0xA4	; 164
 1f2:	68 ed       	ldi	r22, 0xD8	; 216
 1f4:	88 e6       	ldi	r24, 0x68	; 104
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	0e 94 ae 01 	call	0x35c	; 0x35c <protected_write_io>
 1fc:	40 e8       	ldi	r20, 0x80	; 128
 1fe:	68 ed       	ldi	r22, 0xD8	; 216
 200:	80 e6       	ldi	r24, 0x60	; 96
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	0e 94 ae 01 	call	0x35c	; 0x35c <protected_write_io>
	ccp_write_io((void *)&(CLKCTRL.MCLKCTRLA),
	             CLKCTRL_CLKSEL_OSCHF_gc /* Internal high-frequency oscillator */
	                 | 1 << CLKCTRL_CLKOUT_bp /* System clock out: enabled */);

	return 0;
}
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	08 95       	ret

0000020c <CPUINT_init>:
	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
}
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	08 95       	ret

00000210 <mcu_init>:
}

void TIMER_C_initialization(void)
{

	TIMER_C_init();
 210:	e0 e1       	ldi	r30, 0x10	; 16
 212:	f4 e0       	ldi	r31, 0x04	; 4
 214:	80 81       	ld	r24, Z
 216:	88 60       	ori	r24, 0x08	; 8
 218:	81 93       	st	Z+, r24
 21a:	e8 31       	cpi	r30, 0x18	; 24
 21c:	84 e0       	ldi	r24, 0x04	; 4
 21e:	f8 07       	cpc	r31, r24
 220:	c9 f7       	brne	.-14     	; 0x214 <mcu_init+0x4>
 222:	e0 e3       	ldi	r30, 0x30	; 48
 224:	f4 e0       	ldi	r31, 0x04	; 4
 226:	80 81       	ld	r24, Z
 228:	88 60       	ori	r24, 0x08	; 8
 22a:	81 93       	st	Z+, r24
 22c:	e8 33       	cpi	r30, 0x38	; 56
 22e:	84 e0       	ldi	r24, 0x04	; 4
 230:	f8 07       	cpc	r31, r24
 232:	c9 f7       	brne	.-14     	; 0x226 <mcu_init+0x16>
 234:	e0 e5       	ldi	r30, 0x50	; 80
 236:	f4 e0       	ldi	r31, 0x04	; 4
 238:	80 81       	ld	r24, Z
 23a:	88 60       	ori	r24, 0x08	; 8
 23c:	81 93       	st	Z+, r24
 23e:	e8 35       	cpi	r30, 0x58	; 88
 240:	84 e0       	ldi	r24, 0x04	; 4
 242:	f8 07       	cpc	r31, r24
 244:	c9 f7       	brne	.-14     	; 0x238 <mcu_init+0x28>
 246:	e0 e7       	ldi	r30, 0x70	; 112
 248:	f4 e0       	ldi	r31, 0x04	; 4
 24a:	80 81       	ld	r24, Z
 24c:	88 60       	ori	r24, 0x08	; 8
 24e:	81 93       	st	Z+, r24
 250:	e8 37       	cpi	r30, 0x78	; 120
 252:	84 e0       	ldi	r24, 0x04	; 4
 254:	f8 07       	cpc	r31, r24
 256:	c9 f7       	brne	.-14     	; 0x24a <mcu_init+0x3a>
 258:	e0 e9       	ldi	r30, 0x90	; 144
 25a:	f4 e0       	ldi	r31, 0x04	; 4
 25c:	80 81       	ld	r24, Z
 25e:	88 60       	ori	r24, 0x08	; 8
 260:	81 93       	st	Z+, r24
 262:	e8 39       	cpi	r30, 0x98	; 152
 264:	84 e0       	ldi	r24, 0x04	; 4
 266:	f8 07       	cpc	r31, r24
 268:	c9 f7       	brne	.-14     	; 0x25c <mcu_init+0x4c>
 26a:	e0 eb       	ldi	r30, 0xB0	; 176
 26c:	f4 e0       	ldi	r31, 0x04	; 4
 26e:	80 81       	ld	r24, Z
 270:	88 60       	ori	r24, 0x08	; 8
 272:	81 93       	st	Z+, r24
 274:	e8 3b       	cpi	r30, 0xB8	; 184
 276:	84 e0       	ldi	r24, 0x04	; 4
 278:	f8 07       	cpc	r31, r24
 27a:	c9 f7       	brne	.-14     	; 0x26e <mcu_init+0x5e>
 27c:	08 95       	ret

0000027e <USART_ASYNC_initialization>:
 27e:	21 98       	cbi	0x04, 1	; 4
 280:	e1 e3       	ldi	r30, 0x31	; 49
 282:	f4 e0       	ldi	r31, 0x04	; 4
 284:	80 81       	ld	r24, Z
 286:	87 7f       	andi	r24, 0xF7	; 247
 288:	80 83       	st	Z, r24
 28a:	28 98       	cbi	0x05, 0	; 5
 28c:	20 9a       	sbi	0x04, 0	; 4
 28e:	0e 94 c0 02 	call	0x580	; 0x580 <USART_ASYNC_init>
 292:	08 95       	ret

00000294 <ZCD_0_initialization>:
 294:	e1 e7       	ldi	r30, 0x71	; 113
 296:	f4 e0       	ldi	r31, 0x04	; 4
 298:	80 81       	ld	r24, Z
 29a:	88 7f       	andi	r24, 0xF8	; 248
 29c:	84 60       	ori	r24, 0x04	; 4
 29e:	80 83       	st	Z, r24
 2a0:	80 81       	ld	r24, Z
 2a2:	87 7f       	andi	r24, 0xF7	; 247
 2a4:	80 83       	st	Z, r24
 2a6:	0e 94 dd 02 	call	0x5ba	; 0x5ba <ZCD_0_init>
 2aa:	08 95       	ret

000002ac <ZCD_1_initialization>:
 2ac:	e3 e9       	ldi	r30, 0x93	; 147
 2ae:	f4 e0       	ldi	r31, 0x04	; 4
 2b0:	80 81       	ld	r24, Z
 2b2:	88 7f       	andi	r24, 0xF8	; 248
 2b4:	84 60       	ori	r24, 0x04	; 4
 2b6:	80 83       	st	Z, r24
 2b8:	80 81       	ld	r24, Z
 2ba:	87 7f       	andi	r24, 0xF7	; 247
 2bc:	80 83       	st	Z, r24
 2be:	0e 94 e5 02 	call	0x5ca	; 0x5ca <ZCD_1_init>
 2c2:	08 95       	ret

000002c4 <SPI_0_initialization>:
 2c4:	05 98       	cbi	0x00, 5	; 0
 2c6:	e5 e1       	ldi	r30, 0x15	; 21
 2c8:	f4 e0       	ldi	r31, 0x04	; 4
 2ca:	80 81       	ld	r24, Z
 2cc:	87 7f       	andi	r24, 0xF7	; 247
 2ce:	80 83       	st	Z, r24
 2d0:	0c 98       	cbi	0x01, 4	; 1
 2d2:	04 9a       	sbi	0x00, 4	; 0
 2d4:	0e 98       	cbi	0x01, 6	; 1
 2d6:	06 9a       	sbi	0x00, 6	; 0
 2d8:	0e 94 cb 01 	call	0x396	; 0x396 <SPI_0_init>
 2dc:	08 95       	ret

000002de <SPI_1_initialization>:
 2de:	41 98       	cbi	0x08, 1	; 8
 2e0:	e1 e5       	ldi	r30, 0x51	; 81
 2e2:	f4 e0       	ldi	r31, 0x04	; 4
 2e4:	80 81       	ld	r24, Z
 2e6:	87 7f       	andi	r24, 0xF7	; 247
 2e8:	80 83       	st	Z, r24
 2ea:	48 98       	cbi	0x09, 0	; 9
 2ec:	40 9a       	sbi	0x08, 0	; 8
 2ee:	4a 98       	cbi	0x09, 2	; 9
 2f0:	42 9a       	sbi	0x08, 2	; 8
 2f2:	0e 94 36 02 	call	0x46c	; 0x46c <SPI_1_init>
 2f6:	08 95       	ret

000002f8 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
 2f8:	0e 94 08 01 	call	0x210	; 0x210 <mcu_init>
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
 2fc:	0f 98       	cbi	0x01, 7	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 2fe:	07 9a       	sbi	0x00, 7	; 0
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
 300:	4b 9a       	sbi	0x09, 3	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
 302:	43 9a       	sbi	0x08, 3	; 8
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
 304:	4e 9a       	sbi	0x09, 6	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
 306:	46 9a       	sbi	0x08, 6	; 8
	    // <true"> High
	    true);

	LED_0_set_dir(PORT_DIR_OUT);

	CLKCTRL_init();
 308:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <CLKCTRL_init>

	USART_ASYNC_initialization();
 30c:	0e 94 3f 01 	call	0x27e	; 0x27e <USART_ASYNC_initialization>
}

void EVENT_SYSTEM_0_initialization(void)
{

	EVENT_SYSTEM_0_init();
 310:	0e 94 9f 01 	call	0x33e	; 0x33e <EVENT_SYSTEM_0_init>

	USART_ASYNC_initialization();

	EVENT_SYSTEM_0_initialization();

	SLPCTRL_init();
 314:	0e 94 c9 01 	call	0x392	; 0x392 <SLPCTRL_init>

	CPUINT_init();
 318:	0e 94 06 01 	call	0x20c	; 0x20c <CPUINT_init>

	ZCD_0_initialization();
 31c:	0e 94 4a 01 	call	0x294	; 0x294 <ZCD_0_initialization>

	ZCD_1_initialization();
 320:	0e 94 56 01 	call	0x2ac	; 0x2ac <ZCD_1_initialization>

	SPI_0_initialization();
 324:	0e 94 62 01 	call	0x2c4	; 0x2c4 <SPI_0_initialization>

	SPI_1_initialization();
 328:	0e 94 6f 01 	call	0x2de	; 0x2de <SPI_1_initialization>

	RTC_0_init();
 32c:	0e 94 b3 01 	call	0x366	; 0x366 <RTC_0_init>
}

void TIMER_B_initialization(void)
{

	TIMER_B_init();
 330:	0e 94 a1 02 	call	0x542	; 0x542 <TIMER_B_init>
}

void TIMER_C_initialization(void)
{

	TIMER_C_init();
 334:	0e 94 ab 02 	call	0x556	; 0x556 <TIMER_C_init>

	TIMER_B_initialization();

	TIMER_C_initialization();

	BOD_init();
 338:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <BOD_init>
 33c:	08 95       	ret

0000033e <EVENT_SYSTEM_0_init>:
 * \return Initialization status.
 */
int8_t EVENT_SYSTEM_0_init()
{

	EVSYS.CHANNEL0 = EVSYS_CHANNEL0_ZCD0_gc; /* Zero Cross Detect 0 out */
 33e:	e0 e0       	ldi	r30, 0x00	; 0
 340:	f2 e0       	ldi	r31, 0x02	; 2
 342:	80 e3       	ldi	r24, 0x30	; 48
 344:	80 8b       	std	Z+16, r24	; 0x10

	EVSYS.CHANNEL1 = EVSYS_CHANNEL1_ZCD1_gc; /* Zero Cross Detect 1 out */
 346:	81 e3       	ldi	r24, 0x31	; 49
 348:	81 8b       	std	Z+17, r24	; 0x11

	// EVSYS.USERTCA1CNTA = EVSYS_USER_OFF_gc; /* Off */

	// EVSYS.USERTCA1CNTB = EVSYS_USER_OFF_gc; /* Off */

	EVSYS.USERTCB0CAPT = EVSYS_USER_CHANNEL0_gc; /* Connect user to event channel 0 */
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	86 af       	std	Z+62, r24	; 0x3e

	// EVSYS.USERTCB3CAPT = EVSYS_USER_OFF_gc; /* Off */

	// EVSYS.USERTCB3COUNT = EVSYS_USER_OFF_gc; /* Off */

	EVSYS.USERTCD0INPUTA = EVSYS_USER_CHANNEL0_gc; /* Connect user to event channel 0 */
 34e:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <__TEXT_REGION_LENGTH__+0x7e0248>

	EVSYS.USERTCD0INPUTB = EVSYS_USER_CHANNEL1_gc; /* Connect user to event channel 1 */
 352:	82 e0       	ldi	r24, 0x02	; 2
 354:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <__TEXT_REGION_LENGTH__+0x7e0249>
	// EVSYS.USEROPAMP2DUMP = EVSYS_USER_OFF_gc; /* Off */

	// EVSYS.USEROPAMP2DISABLE = EVSYS_USER_OFF_gc; /* Off */

	return 0;
}
 358:	80 e0       	ldi	r24, 0x00	; 0
 35a:	08 95       	ret

0000035c <protected_write_io>:
	PUBLIC_FUNCTION(protected_write_io)

#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
 35c:	1b be       	out	0x3b, r1	; 59
#endif
	movw    r30, r24                // Load addr into Z
 35e:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
 360:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
 362:	40 83       	st	Z, r20
	ret                             // Return to caller
 364:	08 95       	ret

00000366 <RTC_0_init>:
 * \return Initialization status.
 */
int8_t RTC_0_init()
{

	while (RTC.STATUS > 0) { /* Wait for all register to be synchronized */
 366:	e0 e4       	ldi	r30, 0x40	; 64
 368:	f1 e0       	ldi	r31, 0x01	; 1
 36a:	81 81       	ldd	r24, Z+1	; 0x01
 36c:	81 11       	cpse	r24, r1
 36e:	fd cf       	rjmp	.-6      	; 0x36a <RTC_0_init+0x4>

	// RTC.CMP = 0x0; /* Compare: 0x0 */

	// RTC.CNT = 0x0; /* Counter: 0x0 */

	RTC.CTRLA = RTC_PRESCALER_DIV32_gc  /* 32 */
 370:	e0 e4       	ldi	r30, 0x40	; 64
 372:	f1 e0       	ldi	r31, 0x01	; 1
 374:	89 e2       	ldi	r24, 0x29	; 41
 376:	80 83       	st	Z, r24
	            | 1 << RTC_RTCEN_bp     /* Enable: enabled */
	            | 0 << RTC_RUNSTDBY_bp; /* Run In Standby: disabled */

	RTC.PER = 0x400; /* Period: 0x400 */
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	94 e0       	ldi	r25, 0x04	; 4
 37c:	82 87       	std	Z+10, r24	; 0x0a
 37e:	93 87       	std	Z+11, r25	; 0x0b

	RTC.CLKSEL = RTC_CLKSEL_OSC32K_gc; /* Internal 32.768 kHz oscillator */
 380:	17 82       	std	Z+7, r1	; 0x07
	// RTC.DBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	// RTC.INTCTRL = 0 << RTC_CMP_bp /* Compare Match Interrupt enable: disabled */
	//		 | 0 << RTC_OVF_bp; /* Overflow Interrupt enable: disabled */

	while (RTC.PITSTATUS > 0) { /* Wait for all register to be synchronized */
 382:	81 89       	ldd	r24, Z+17	; 0x11
 384:	81 11       	cpse	r24, r1
 386:	fd cf       	rjmp	.-6      	; 0x382 <RTC_0_init+0x1c>
	}

	RTC.PITCTRLA = RTC_PERIOD_OFF_gc    /* Off */
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x7e0150>
	// RTC.PITDBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	// RTC.PITINTCTRL = 0 << RTC_PI_bp; /* Periodic Interrupt: disabled */

	return 0;
}
 38e:	80 e0       	ldi	r24, 0x00	; 0
 390:	08 95       	ret

00000392 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
 392:	80 e0       	ldi	r24, 0x00	; 0
 394:	08 95       	ret

00000396 <SPI_0_init>:
                 after the previous one (i.e. data transfer phase
                 after control/command phase).
*/
void SPI_1_register_callback(spi_transfer_done_cb_t f)
{
	SPI_1_desc.cb = f;
 396:	e0 e4       	ldi	r30, 0x40	; 64
 398:	f9 e0       	ldi	r31, 0x09	; 9
 39a:	81 e2       	ldi	r24, 0x21	; 33
 39c:	80 83       	st	Z, r24
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	82 83       	std	Z+2, r24	; 0x02
 3a2:	e5 e1       	ldi	r30, 0x15	; 21
 3a4:	f0 e4       	ldi	r31, 0x40	; 64
 3a6:	10 82       	st	Z, r1
 3a8:	15 82       	std	Z+5, r1	; 0x05
 3aa:	16 82       	std	Z+6, r1	; 0x06
 3ac:	08 95       	ret

000003ae <__vector_20>:
 3ae:	1f 92       	push	r1
 3b0:	0f 92       	push	r0
 3b2:	0f b6       	in	r0, 0x3f	; 63
 3b4:	0f 92       	push	r0
 3b6:	11 24       	eor	r1, r1
 3b8:	0b b6       	in	r0, 0x3b	; 59
 3ba:	0f 92       	push	r0
 3bc:	2f 93       	push	r18
 3be:	3f 93       	push	r19
 3c0:	4f 93       	push	r20
 3c2:	5f 93       	push	r21
 3c4:	6f 93       	push	r22
 3c6:	7f 93       	push	r23
 3c8:	8f 93       	push	r24
 3ca:	9f 93       	push	r25
 3cc:	af 93       	push	r26
 3ce:	bf 93       	push	r27
 3d0:	cf 93       	push	r28
 3d2:	df 93       	push	r29
 3d4:	ef 93       	push	r30
 3d6:	ff 93       	push	r31
 3d8:	e0 e4       	ldi	r30, 0x40	; 64
 3da:	f9 e0       	ldi	r31, 0x09	; 9
 3dc:	94 81       	ldd	r25, Z+4	; 0x04
 3de:	80 e8       	ldi	r24, 0x80	; 128
 3e0:	83 83       	std	Z+3, r24	; 0x03
 3e2:	80 91 19 40 	lds	r24, 0x4019	; 0x804019 <SPI_0_desc+0x4>
 3e6:	82 30       	cpi	r24, 0x02	; 2
 3e8:	19 f1       	breq	.+70     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 3ea:	c5 e1       	ldi	r28, 0x15	; 21
 3ec:	d0 e4       	ldi	r29, 0x40	; 64
 3ee:	a9 81       	ldd	r26, Y+1	; 0x01
 3f0:	ba 81       	ldd	r27, Y+2	; 0x02
 3f2:	fd 01       	movw	r30, r26
 3f4:	91 93       	st	Z+, r25
 3f6:	e9 83       	std	Y+1, r30	; 0x01
 3f8:	fa 83       	std	Y+2, r31	; 0x02
 3fa:	81 30       	cpi	r24, 0x01	; 1
 3fc:	19 f0       	breq	.+6      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3fe:	11 96       	adiw	r26, 0x01	; 1
 400:	9c 91       	ld	r25, X
 402:	01 c0       	rjmp	.+2      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	e5 e1       	ldi	r30, 0x15	; 21
 408:	f0 e4       	ldi	r31, 0x40	; 64
 40a:	83 81       	ldd	r24, Z+3	; 0x03
 40c:	81 50       	subi	r24, 0x01	; 1
 40e:	83 83       	std	Z+3, r24	; 0x03
 410:	88 23       	and	r24, r24
 412:	19 f0       	breq	.+6      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 414:	90 93 44 09 	sts	0x0944, r25	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 418:	14 c0       	rjmp	.+40     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 41a:	e5 e1       	ldi	r30, 0x15	; 21
 41c:	f0 e4       	ldi	r31, 0x40	; 64
 41e:	83 e0       	ldi	r24, 0x03	; 3
 420:	80 83       	st	Z, r24
 422:	05 80       	ldd	r0, Z+5	; 0x05
 424:	f6 81       	ldd	r31, Z+6	; 0x06
 426:	e0 2d       	mov	r30, r0
 428:	30 97       	sbiw	r30, 0x00	; 0
 42a:	59 f0       	breq	.+22     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 42c:	09 95       	icall
 42e:	09 c0       	rjmp	.+18     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 430:	e5 e1       	ldi	r30, 0x15	; 21
 432:	f0 e4       	ldi	r31, 0x40	; 64
 434:	a1 81       	ldd	r26, Z+1	; 0x01
 436:	b2 81       	ldd	r27, Z+2	; 0x02
 438:	cd 01       	movw	r24, r26
 43a:	01 96       	adiw	r24, 0x01	; 1
 43c:	81 83       	std	Z+1, r24	; 0x01
 43e:	92 83       	std	Z+2, r25	; 0x02
 440:	de cf       	rjmp	.-68     	; 0x3fe <__vector_20+0x50>
 442:	ff 91       	pop	r31
 444:	ef 91       	pop	r30
 446:	df 91       	pop	r29
 448:	cf 91       	pop	r28
 44a:	bf 91       	pop	r27
 44c:	af 91       	pop	r26
 44e:	9f 91       	pop	r25
 450:	8f 91       	pop	r24
 452:	7f 91       	pop	r23
 454:	6f 91       	pop	r22
 456:	5f 91       	pop	r21
 458:	4f 91       	pop	r20
 45a:	3f 91       	pop	r19
 45c:	2f 91       	pop	r18
 45e:	0f 90       	pop	r0
 460:	0b be       	out	0x3b, r0	; 59
 462:	0f 90       	pop	r0
 464:	0f be       	out	0x3f, r0	; 63
 466:	0f 90       	pop	r0
 468:	1f 90       	pop	r1
 46a:	18 95       	reti

0000046c <SPI_1_init>:
 46c:	e0 e6       	ldi	r30, 0x60	; 96
 46e:	f9 e0       	ldi	r31, 0x09	; 9
 470:	81 e2       	ldi	r24, 0x21	; 33
 472:	80 83       	st	Z, r24
 474:	81 e0       	ldi	r24, 0x01	; 1
 476:	82 83       	std	Z+2, r24	; 0x02
 478:	ee e0       	ldi	r30, 0x0E	; 14
 47a:	f0 e4       	ldi	r31, 0x40	; 64
 47c:	10 82       	st	Z, r1
 47e:	15 82       	std	Z+5, r1	; 0x05
 480:	16 82       	std	Z+6, r1	; 0x06
 482:	08 95       	ret

00000484 <__vector_37>:
}

ISR(SPI1_INT_vect)
{
 484:	1f 92       	push	r1
 486:	0f 92       	push	r0
 488:	0f b6       	in	r0, 0x3f	; 63
 48a:	0f 92       	push	r0
 48c:	11 24       	eor	r1, r1
 48e:	0b b6       	in	r0, 0x3b	; 59
 490:	0f 92       	push	r0
 492:	2f 93       	push	r18
 494:	3f 93       	push	r19
 496:	4f 93       	push	r20
 498:	5f 93       	push	r21
 49a:	6f 93       	push	r22
 49c:	7f 93       	push	r23
 49e:	8f 93       	push	r24
 4a0:	9f 93       	push	r25
 4a2:	af 93       	push	r26
 4a4:	bf 93       	push	r27
 4a6:	cf 93       	push	r28
 4a8:	df 93       	push	r29
 4aa:	ef 93       	push	r30
 4ac:	ff 93       	push	r31
	/* SPI_1_desc.data points to array element
	   to write the received data to. The data to be transmitted
	   is in the next array element.
	*/
	uint8_t rdata = SPI1.DATA;
 4ae:	e0 e6       	ldi	r30, 0x60	; 96
 4b0:	f9 e0       	ldi	r31, 0x09	; 9
 4b2:	94 81       	ldd	r25, Z+4	; 0x04
	uint8_t wdata = 0;

	SPI1.INTFLAGS = SPI_RXCIF_bm;
 4b4:	80 e8       	ldi	r24, 0x80	; 128
 4b6:	83 83       	std	Z+3, r24	; 0x03

	if (SPI_1_desc.type != SPI_WRITE) {
 4b8:	80 91 12 40 	lds	r24, 0x4012	; 0x804012 <__data_end+0x4>
 4bc:	82 30       	cpi	r24, 0x02	; 2
 4be:	19 f1       	breq	.+70     	; 0x506 <__vector_37+0x82>
		*SPI_1_desc.data = rdata;
 4c0:	ce e0       	ldi	r28, 0x0E	; 14
 4c2:	d0 e4       	ldi	r29, 0x40	; 64
 4c4:	a9 81       	ldd	r26, Y+1	; 0x01
 4c6:	ba 81       	ldd	r27, Y+2	; 0x02
 4c8:	fd 01       	movw	r30, r26
 4ca:	91 93       	st	Z+, r25
	}

	SPI_1_desc.data++;
 4cc:	e9 83       	std	Y+1, r30	; 0x01
 4ce:	fa 83       	std	Y+2, r31	; 0x02

	if (SPI_1_desc.type != SPI_READ)
 4d0:	81 30       	cpi	r24, 0x01	; 1
 4d2:	19 f0       	breq	.+6      	; 0x4da <__vector_37+0x56>
		wdata = *SPI_1_desc.data;
 4d4:	11 96       	adiw	r26, 0x01	; 1
 4d6:	9c 91       	ld	r25, X
 4d8:	01 c0       	rjmp	.+2      	; 0x4dc <__vector_37+0x58>
	/* SPI_1_desc.data points to array element
	   to write the received data to. The data to be transmitted
	   is in the next array element.
	*/
	uint8_t rdata = SPI1.DATA;
	uint8_t wdata = 0;
 4da:	90 e0       	ldi	r25, 0x00	; 0
	SPI_1_desc.data++;

	if (SPI_1_desc.type != SPI_READ)
		wdata = *SPI_1_desc.data;

	SPI_1_desc.size--;
 4dc:	ee e0       	ldi	r30, 0x0E	; 14
 4de:	f0 e4       	ldi	r31, 0x40	; 64
 4e0:	83 81       	ldd	r24, Z+3	; 0x03
 4e2:	81 50       	subi	r24, 0x01	; 1
 4e4:	83 83       	std	Z+3, r24	; 0x03
	// if more bytes to be transferred
	if (SPI_1_desc.size != 0) {
 4e6:	88 23       	and	r24, r24
 4e8:	19 f0       	breq	.+6      	; 0x4f0 <__vector_37+0x6c>
		// more data to send, send a byte
		SPI1.DATA = wdata;
 4ea:	90 93 64 09 	sts	0x0964, r25	; 0x800964 <__TEXT_REGION_LENGTH__+0x7e0964>
 4ee:	14 c0       	rjmp	.+40     	; 0x518 <__vector_37+0x94>
	}

	// if last byte has been transferred, update status
	// and optionally call callback
	else {
		SPI_1_desc.status = SPI_DONE;
 4f0:	ee e0       	ldi	r30, 0x0E	; 14
 4f2:	f0 e4       	ldi	r31, 0x40	; 64
 4f4:	83 e0       	ldi	r24, 0x03	; 3
 4f6:	80 83       	st	Z, r24
		if (SPI_1_desc.cb != NULL) {
 4f8:	05 80       	ldd	r0, Z+5	; 0x05
 4fa:	f6 81       	ldd	r31, Z+6	; 0x06
 4fc:	e0 2d       	mov	r30, r0
 4fe:	30 97       	sbiw	r30, 0x00	; 0
 500:	59 f0       	breq	.+22     	; 0x518 <__vector_37+0x94>
			SPI_1_desc.cb();
 502:	09 95       	icall
		}
	}
}
 504:	09 c0       	rjmp	.+18     	; 0x518 <__vector_37+0x94>

	if (SPI_1_desc.type != SPI_WRITE) {
		*SPI_1_desc.data = rdata;
	}

	SPI_1_desc.data++;
 506:	ee e0       	ldi	r30, 0x0E	; 14
 508:	f0 e4       	ldi	r31, 0x40	; 64
 50a:	a1 81       	ldd	r26, Z+1	; 0x01
 50c:	b2 81       	ldd	r27, Z+2	; 0x02
 50e:	cd 01       	movw	r24, r26
 510:	01 96       	adiw	r24, 0x01	; 1
 512:	81 83       	std	Z+1, r24	; 0x01
 514:	92 83       	std	Z+2, r25	; 0x02
 516:	de cf       	rjmp	.-68     	; 0x4d4 <__vector_37+0x50>
		SPI_1_desc.status = SPI_DONE;
		if (SPI_1_desc.cb != NULL) {
			SPI_1_desc.cb();
		}
	}
}
 518:	ff 91       	pop	r31
 51a:	ef 91       	pop	r30
 51c:	df 91       	pop	r29
 51e:	cf 91       	pop	r28
 520:	bf 91       	pop	r27
 522:	af 91       	pop	r26
 524:	9f 91       	pop	r25
 526:	8f 91       	pop	r24
 528:	7f 91       	pop	r23
 52a:	6f 91       	pop	r22
 52c:	5f 91       	pop	r21
 52e:	4f 91       	pop	r20
 530:	3f 91       	pop	r19
 532:	2f 91       	pop	r18
 534:	0f 90       	pop	r0
 536:	0b be       	out	0x3b, r0	; 59
 538:	0f 90       	pop	r0
 53a:	0f be       	out	0x3f, r0	; 63
 53c:	0f 90       	pop	r0
 53e:	1f 90       	pop	r1
 540:	18 95       	reti

00000542 <TIMER_B_init>:

	// TCB0.CCMP = 0x0; /* Compare or Capture: 0x0 */

	// TCB0.CNT = 0x0; /* Count: 0x0 */

	TCB0.CTRLB = 0 << TCB_ASYNC_bp      /* Asynchronous Enable: disabled */
 542:	e0 e0       	ldi	r30, 0x00	; 0
 544:	fb e0       	ldi	r31, 0x0B	; 11
 546:	93 e0       	ldi	r25, 0x03	; 3
 548:	91 83       	std	Z+1, r25	; 0x01
	             | 0 << TCB_CCMPINIT_bp /* Pin Initial State: disabled */
	             | TCB_CNTMODE_FRQ_gc;  /* Input Capture Frequency measurement */

	// TCB0.DBGCTRL = 0 << TCB_DBGRUN_bp; /* Debug Run: disabled */

	TCB0.EVCTRL = 1 << TCB_CAPTEI_bp    /* Event Input Enable: enabled */
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	84 83       	std	Z+4, r24	; 0x04
	              | 0 << TCB_EDGE_bp    /* Event Edge: disabled */
	              | 0 << TCB_FILTER_bp; /* Input Capture Noise Cancellation Filter: disabled */

	TCB0.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
 54e:	95 83       	std	Z+5, r25	; 0x05
	               | 1 << TCB_OVF_bp; /* OverFlow Interrupt: enabled */

	TCB0.CTRLA = TCB_CLKSEL_DIV1_gc     /* CLK_PER */
 550:	80 83       	st	Z, r24
	             | 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
	             | 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
	             | 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */

	return 0;
}
 552:	80 e0       	ldi	r24, 0x00	; 0
 554:	08 95       	ret

00000556 <TIMER_C_init>:
int8_t TIMER_C_init()
{

	// Enable Protected register, peripheral must be disabled (ENABLE=0, in TCD.CTRLA).

	TCD0.CMPASET = 4095; /* Compare A Set: 4095 */
 556:	e0 e8       	ldi	r30, 0x80	; 128
 558:	fb e0       	ldi	r31, 0x0B	; 11
 55a:	8f ef       	ldi	r24, 0xFF	; 255
 55c:	9f e0       	ldi	r25, 0x0F	; 15
 55e:	80 a7       	std	Z+40, r24	; 0x28
 560:	91 a7       	std	Z+41, r25	; 0x29

	// TCD0.CMPACLR = 0; /* Compare A Clear: 0 */

	TCD0.CMPBSET = 4095; /* Compare B Set: 4095 */
 562:	84 a7       	std	Z+44, r24	; 0x2c
 564:	95 a7       	std	Z+45, r25	; 0x2d
	//		 | TCD_DLYTRIG_CMPASET_gc; /* Compare A set */

	// TCD0.DLYVAL = 0 << TCD_DLYVAL_gp; /* Delay value: 0 */

	TCD0.EVCTRLA
	    = TCD_CFG_NEITHER_gc      /* Neither Filter nor Asynchronous Event is enabled */
 566:	85 e1       	ldi	r24, 0x15	; 21
 568:	80 87       	std	Z+8, r24	; 0x08
	      | TCD_ACTION_CAPTURE_gc /* Event trigger a fault and capture */
	      | TCD_EDGE_RISE_HIGH_gc /* The rising edge or high level of event generates retrigger or fault action */
	      | 1 << TCD_TRIGEI_bp;   /* Trigger event enable: enabled */

	TCD0.EVCTRLB
	    = TCD_CFG_NEITHER_gc      /* Neither Filter nor Asynchronous Event is enabled */
 56a:	81 87       	std	Z+9, r24	; 0x09

	// TCD0.INPUTCTRLA = TCD_INPUTMODE_NONE_gc; /* Input has no actions */

	// TCD0.INPUTCTRLB = TCD_INPUTMODE_NONE_gc; /* Input has no actions */

	TCD0.INTCTRL = 0 << TCD_OVF_bp      /* Overflow interrupt enable: disabled */
 56c:	8c e0       	ldi	r24, 0x0C	; 12
 56e:	84 87       	std	Z+12, r24	; 0x0c
	               | 1 << TCD_TRIGA_bp  /* Trigger A interrupt enable: enabled */
	               | 1 << TCD_TRIGB_bp; /* Trigger B interrupt enable: enabled */

	while ((TCD0.STATUS & TCD_ENRDY_bm) == 0)
 570:	86 85       	ldd	r24, Z+14	; 0x0e
 572:	80 ff       	sbrs	r24, 0
 574:	fd cf       	rjmp	.-6      	; 0x570 <TIMER_C_init+0x1a>
		; // Wait for Enable Ready to be high.

	TCD0.CTRLA = 1 << TCD_ENABLE_bp      /* Enable: enabled */
 576:	81 e0       	ldi	r24, 0x01	; 1
 578:	80 93 80 0b 	sts	0x0B80, r24	; 0x800b80 <__TEXT_REGION_LENGTH__+0x7e0b80>
	             | TCD_CLKSEL_OSCHF_gc   /*  */
	             | TCD_CNTPRES_DIV1_gc   /* Sync clock divided by 1 */
	             | TCD_SYNCPRES_DIV1_gc; /*  */

	return 0;
}
 57c:	80 e0       	ldi	r24, 0x00	; 0
 57e:	08 95       	ret

00000580 <USART_ASYNC_init>:
uint8_t USART_ASYNC_read()
{
	while (!(USART3.STATUS & USART_RXCIF_bm))
		;
	return USART3.RXDATAL;
}
 580:	e0 e6       	ldi	r30, 0x60	; 96
 582:	f8 e0       	ldi	r31, 0x08	; 8
 584:	80 e1       	ldi	r24, 0x10	; 16
 586:	97 e2       	ldi	r25, 0x27	; 39
 588:	80 87       	std	Z+8, r24	; 0x08
 58a:	91 87       	std	Z+9, r25	; 0x09
 58c:	80 ec       	ldi	r24, 0xC0	; 192
 58e:	86 83       	std	Z+6, r24	; 0x06
 590:	80 e0       	ldi	r24, 0x00	; 0
 592:	90 e4       	ldi	r25, 0x40	; 64
 594:	80 93 1e 40 	sts	0x401E, r24	; 0x80401e <__iob+0x2>
 598:	90 93 1f 40 	sts	0x401F, r25	; 0x80401f <__iob+0x3>
 59c:	80 e0       	ldi	r24, 0x00	; 0
 59e:	08 95       	ret

000005a0 <USART_ASYNC_write>:
 *
 * \return Nothing
 */
void USART_ASYNC_write(const uint8_t data)
{
	while (!(USART3.STATUS & USART_DREIF_bm))
 5a0:	e0 e6       	ldi	r30, 0x60	; 96
 5a2:	f8 e0       	ldi	r31, 0x08	; 8
 5a4:	94 81       	ldd	r25, Z+4	; 0x04
 5a6:	95 ff       	sbrs	r25, 5
 5a8:	fd cf       	rjmp	.-6      	; 0x5a4 <USART_ASYNC_write+0x4>
		;
	USART3.TXDATAL = data;
 5aa:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <__TEXT_REGION_LENGTH__+0x7e0862>
 5ae:	08 95       	ret

000005b0 <USART_ASYNC_printCHAR>:

#if defined(__GNUC__)

int USART_ASYNC_printCHAR(char character, FILE *stream)
{
	USART_ASYNC_write(character);
 5b0:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <USART_ASYNC_write>
	return 0;
}
 5b4:	80 e0       	ldi	r24, 0x00	; 0
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	08 95       	ret

000005ba <ZCD_0_init>:
 * \return Initialization status.
 */
int8_t ZCD_0_init()
{

	ZCD0.CTRLA = 0 << ZCD_ENABLE_bp     /* Setting: disabled */
 5ba:	e0 ec       	ldi	r30, 0xC0	; 192
 5bc:	f6 e0       	ldi	r31, 0x06	; 6
 5be:	80 e8       	ldi	r24, 0x80	; 128
 5c0:	80 83       	st	Z, r24
	             | 0 << ZCD_OUTEN_bp    /* Setting: disabled */
	             | 1 << ZCD_RUNSTDBY_bp /* Setting: enabled */
	             | 0 << ZCD_INVERT_bp;  /* Setting: disabled */

	ZCD0.INTCTRL = ZCD_INTMODE_RISING_gc; /* Interrupt on rising input signal */
 5c2:	81 e0       	ldi	r24, 0x01	; 1
 5c4:	82 83       	std	Z+2, r24	; 0x02

	return 0;
}
 5c6:	80 e0       	ldi	r24, 0x00	; 0
 5c8:	08 95       	ret

000005ca <ZCD_1_init>:
 * \return Initialization status.
 */
int8_t ZCD_1_init()
{

	ZCD1.CTRLA = 1 << ZCD_ENABLE_bp     /* Setting: enabled */
 5ca:	e8 ec       	ldi	r30, 0xC8	; 200
 5cc:	f6 e0       	ldi	r31, 0x06	; 6
 5ce:	81 e0       	ldi	r24, 0x01	; 1
 5d0:	80 83       	st	Z, r24
	             | 0 << ZCD_OUTEN_bp    /* Setting: disabled */
	             | 0 << ZCD_RUNSTDBY_bp /* Setting: disabled */
	             | 0 << ZCD_INVERT_bp;  /* Setting: disabled */

	ZCD1.INTCTRL = ZCD_INTMODE_FALLING_gc; /* Interrupt on falling input signal */
 5d2:	82 e0       	ldi	r24, 0x02	; 2
 5d4:	82 83       	std	Z+2, r24	; 0x02

	return 0;
}
 5d6:	80 e0       	ldi	r24, 0x00	; 0
 5d8:	08 95       	ret

000005da <_exit>:
 5da:	f8 94       	cli

000005dc <__stop_program>:
 5dc:	ff cf       	rjmp	.-2      	; 0x5dc <__stop_program>
