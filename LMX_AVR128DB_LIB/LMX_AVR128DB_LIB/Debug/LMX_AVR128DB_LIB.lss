
LMX_AVR128DB_LIB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000132  00804000  000025da  0000266e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000025da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000021b  00804132  00804132  000027a0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000027a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000027fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000498  00000000  00000000  00002840  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00009cf8  00000000  00000000  00002cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004457  00000000  00000000  0000c9d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000275d  00000000  00000000  00010e27  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a34  00000000  00000000  00013584  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004dbb  00000000  00000000  00013fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000024b7  00000000  00000000  00018d73  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000420  00000000  00000000  0001b22a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__dtors_end>
       4:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
       8:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
       c:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      10:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      14:	0c 94 6a 08 	jmp	0x10d4	; 0x10d4 <__vector_5>
      18:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      1c:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      20:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      24:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      28:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      2c:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      30:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      34:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      38:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      3c:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      40:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      44:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      48:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      4c:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      50:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      54:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      58:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      5c:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      60:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      64:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      68:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      6c:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      70:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      74:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      78:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      7c:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      80:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      84:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      88:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      8c:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      90:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      94:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      98:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      9c:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      a0:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      a4:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      a8:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      ac:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      b0:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      b4:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      b8:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      bc:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      c0:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      c4:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      c8:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      cc:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      d0:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      d4:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      d8:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      dc:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      e0:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      e4:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      e8:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      ec:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      f0:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>

000000f4 <__trampolines_end>:
      f4:	6e 61       	ori	r22, 0x1E	; 30
      f6:	6e 00       	.word	0x006e	; ????

000000f8 <__c.2332>:
      f8:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     108:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     118:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     128:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     138:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     148:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     158:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     168:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     178:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     188:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     198:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     1a8:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1b8:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1c8:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     1d8:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1e8:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000001f6 <__ctors_start>:
     1f6:	55 08       	sbc	r5, r5
     1f8:	a8 08       	sbc	r10, r8

000001fa <__ctors_end>:
     1fa:	5a 08       	sbc	r5, r10
     1fc:	ad 08       	sbc	r10, r13

000001fe <__dtors_end>:
     1fe:	11 24       	eor	r1, r1
     200:	1f be       	out	0x3f, r1	; 63
     202:	cf ef       	ldi	r28, 0xFF	; 255
     204:	cd bf       	out	0x3d, r28	; 61
     206:	df e7       	ldi	r29, 0x7F	; 127
     208:	de bf       	out	0x3e, r29	; 62

0000020a <__do_copy_data>:
     20a:	11 e4       	ldi	r17, 0x41	; 65
     20c:	a0 e0       	ldi	r26, 0x00	; 0
     20e:	b0 e4       	ldi	r27, 0x40	; 64
     210:	ea ed       	ldi	r30, 0xDA	; 218
     212:	f5 e2       	ldi	r31, 0x25	; 37
     214:	00 e0       	ldi	r16, 0x00	; 0
     216:	0b bf       	out	0x3b, r16	; 59
     218:	02 c0       	rjmp	.+4      	; 0x21e <__do_copy_data+0x14>
     21a:	07 90       	elpm	r0, Z+
     21c:	0d 92       	st	X+, r0
     21e:	a2 33       	cpi	r26, 0x32	; 50
     220:	b1 07       	cpc	r27, r17
     222:	d9 f7       	brne	.-10     	; 0x21a <__do_copy_data+0x10>

00000224 <__do_clear_bss>:
     224:	23 e4       	ldi	r18, 0x43	; 67
     226:	a2 e3       	ldi	r26, 0x32	; 50
     228:	b1 e4       	ldi	r27, 0x41	; 65
     22a:	01 c0       	rjmp	.+2      	; 0x22e <.do_clear_bss_start>

0000022c <.do_clear_bss_loop>:
     22c:	1d 92       	st	X+, r1

0000022e <.do_clear_bss_start>:
     22e:	ad 34       	cpi	r26, 0x4D	; 77
     230:	b2 07       	cpc	r27, r18
     232:	e1 f7       	brne	.-8      	; 0x22c <.do_clear_bss_loop>

00000234 <__do_global_ctors>:
     234:	10 e0       	ldi	r17, 0x00	; 0
     236:	cd ef       	ldi	r28, 0xFD	; 253
     238:	d0 e0       	ldi	r29, 0x00	; 0
     23a:	04 c0       	rjmp	.+8      	; 0x244 <__do_global_ctors+0x10>
     23c:	21 97       	sbiw	r28, 0x01	; 1
     23e:	fe 01       	movw	r30, r28
     240:	0e 94 3b 11 	call	0x2276	; 0x2276 <__tablejump2__>
     244:	cb 3f       	cpi	r28, 0xFB	; 251
     246:	d1 07       	cpc	r29, r17
     248:	c9 f7       	brne	.-14     	; 0x23c <__do_global_ctors+0x8>
     24a:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <main>
     24e:	0c 94 e0 12 	jmp	0x25c0	; 0x25c0 <__do_global_dtors>

00000252 <__bad_interrupt>:
     252:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000256 <_ZN15lmx2694_HandlerC1Ev>:
#endif
	
	register_value=(register_value&(0xfff8))|(uint16_t)mash_order;
	int_result=Write_Single_Register(44,register_value);
	return int_result;
}
     256:	fc 01       	movw	r30, r24
     258:	88 e1       	ldi	r24, 0x18	; 24
     25a:	92 e4       	ldi	r25, 0x42	; 66
     25c:	86 83       	std	Z+6, r24	; 0x06
     25e:	97 83       	std	Z+7, r25	; 0x07
     260:	82 e3       	ldi	r24, 0x32	; 50
     262:	91 e4       	ldi	r25, 0x41	; 65
     264:	84 83       	std	Z+4, r24	; 0x04
     266:	95 83       	std	Z+5, r25	; 0x05
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	81 8f       	std	Z+25, r24	; 0x19
     26c:	17 8a       	std	Z+23, r1	; 0x17
     26e:	40 e0       	ldi	r20, 0x00	; 0
     270:	50 e0       	ldi	r21, 0x00	; 0
     272:	68 ec       	ldi	r22, 0xC8	; 200
     274:	7e e3       	ldi	r23, 0x3E	; 62
     276:	42 af       	std	Z+58, r20	; 0x3a
     278:	53 af       	std	Z+59, r21	; 0x3b
     27a:	64 af       	std	Z+60, r22	; 0x3c
     27c:	75 af       	std	Z+61, r23	; 0x3d
     27e:	40 e0       	ldi	r20, 0x00	; 0
     280:	50 e0       	ldi	r21, 0x00	; 0
     282:	6a e7       	ldi	r22, 0x7A	; 122
     284:	75 e4       	ldi	r23, 0x45	; 69
     286:	40 83       	st	Z, r20
     288:	51 83       	std	Z+1, r21	; 0x01
     28a:	62 83       	std	Z+2, r22	; 0x02
     28c:	73 83       	std	Z+3, r23	; 0x03
     28e:	40 e4       	ldi	r20, 0x40	; 64
     290:	56 e0       	ldi	r21, 0x06	; 6
     292:	6a e7       	ldi	r22, 0x7A	; 122
     294:	75 e4       	ldi	r23, 0x45	; 69
     296:	42 a7       	std	Z+42, r20	; 0x2a
     298:	53 a7       	std	Z+43, r21	; 0x2b
     29a:	64 a7       	std	Z+44, r22	; 0x2c
     29c:	75 a7       	std	Z+45, r23	; 0x2d
     29e:	87 af       	std	Z+63, r24	; 0x3f
     2a0:	80 8f       	std	Z+24, r24	; 0x18
     2a2:	08 95       	ret

000002a4 <_ZN15lmx2694_HandlerD1Ev>:
     2a4:	08 95       	ret

000002a6 <_ZN15lmx2694_Handler13Get_N_DividerEb>:
     2a6:	fc 01       	movw	r30, r24
     2a8:	61 11       	cpse	r22, r1
     2aa:	18 c0       	rjmp	.+48     	; 0x2dc <_ZN15lmx2694_Handler13Get_N_DividerEb+0x36>
     2ac:	86 81       	ldd	r24, Z+6	; 0x06
     2ae:	97 81       	ldd	r25, Z+7	; 0x07
     2b0:	dc 01       	movw	r26, r24
     2b2:	ac 5b       	subi	r26, 0xBC	; 188
     2b4:	bf 4f       	sbci	r27, 0xFF	; 255
     2b6:	4d 91       	ld	r20, X+
     2b8:	5c 91       	ld	r21, X
     2ba:	11 97       	sbiw	r26, 0x01	; 1
     2bc:	60 e0       	ldi	r22, 0x00	; 0
     2be:	70 e0       	ldi	r23, 0x00	; 0
     2c0:	ba 01       	movw	r22, r20
     2c2:	55 27       	eor	r21, r21
     2c4:	44 27       	eor	r20, r20
     2c6:	14 96       	adiw	r26, 0x04	; 4
     2c8:	8d 91       	ld	r24, X+
     2ca:	9c 91       	ld	r25, X
     2cc:	48 0f       	add	r20, r24
     2ce:	59 1f       	adc	r21, r25
     2d0:	61 1d       	adc	r22, r1
     2d2:	71 1d       	adc	r23, r1
     2d4:	42 8f       	std	Z+26, r20	; 0x1a
     2d6:	53 8f       	std	Z+27, r21	; 0x1b
     2d8:	64 8f       	std	Z+28, r22	; 0x1c
     2da:	75 8f       	std	Z+29, r23	; 0x1d
     2dc:	62 8d       	ldd	r22, Z+26	; 0x1a
     2de:	73 8d       	ldd	r23, Z+27	; 0x1b
     2e0:	84 8d       	ldd	r24, Z+28	; 0x1c
     2e2:	95 8d       	ldd	r25, Z+29	; 0x1d
     2e4:	08 95       	ret

000002e6 <_ZN15lmx2694_Handler13Get_NumeratorEb>:
     2e6:	fc 01       	movw	r30, r24
     2e8:	61 11       	cpse	r22, r1
     2ea:	18 c0       	rjmp	.+48     	; 0x31c <_ZN15lmx2694_Handler13Get_NumeratorEb+0x36>
     2ec:	86 81       	ldd	r24, Z+6	; 0x06
     2ee:	97 81       	ldd	r25, Z+7	; 0x07
     2f0:	dc 01       	movw	r26, r24
     2f2:	ac 5a       	subi	r26, 0xAC	; 172
     2f4:	bf 4f       	sbci	r27, 0xFF	; 255
     2f6:	4d 91       	ld	r20, X+
     2f8:	5c 91       	ld	r21, X
     2fa:	11 97       	sbiw	r26, 0x01	; 1
     2fc:	60 e0       	ldi	r22, 0x00	; 0
     2fe:	70 e0       	ldi	r23, 0x00	; 0
     300:	ba 01       	movw	r22, r20
     302:	55 27       	eor	r21, r21
     304:	44 27       	eor	r20, r20
     306:	12 96       	adiw	r26, 0x02	; 2
     308:	8d 91       	ld	r24, X+
     30a:	9c 91       	ld	r25, X
     30c:	48 0f       	add	r20, r24
     30e:	59 1f       	adc	r21, r25
     310:	61 1d       	adc	r22, r1
     312:	71 1d       	adc	r23, r1
     314:	46 8f       	std	Z+30, r20	; 0x1e
     316:	57 8f       	std	Z+31, r21	; 0x1f
     318:	60 a3       	std	Z+32, r22	; 0x20
     31a:	71 a3       	std	Z+33, r23	; 0x21
     31c:	66 8d       	ldd	r22, Z+30	; 0x1e
     31e:	77 8d       	ldd	r23, Z+31	; 0x1f
     320:	80 a1       	ldd	r24, Z+32	; 0x20
     322:	91 a1       	ldd	r25, Z+33	; 0x21
     324:	08 95       	ret

00000326 <_ZN15lmx2694_Handler15Get_DenominatorEb>:
     326:	fc 01       	movw	r30, r24
     328:	61 11       	cpse	r22, r1
     32a:	18 c0       	rjmp	.+48     	; 0x35c <_ZN15lmx2694_Handler15Get_DenominatorEb+0x36>
     32c:	86 81       	ldd	r24, Z+6	; 0x06
     32e:	97 81       	ldd	r25, Z+7	; 0x07
     330:	dc 01       	movw	r26, r24
     332:	a4 5b       	subi	r26, 0xB4	; 180
     334:	bf 4f       	sbci	r27, 0xFF	; 255
     336:	4d 91       	ld	r20, X+
     338:	5c 91       	ld	r21, X
     33a:	11 97       	sbiw	r26, 0x01	; 1
     33c:	60 e0       	ldi	r22, 0x00	; 0
     33e:	70 e0       	ldi	r23, 0x00	; 0
     340:	ba 01       	movw	r22, r20
     342:	55 27       	eor	r21, r21
     344:	44 27       	eor	r20, r20
     346:	12 96       	adiw	r26, 0x02	; 2
     348:	8d 91       	ld	r24, X+
     34a:	9c 91       	ld	r25, X
     34c:	48 0f       	add	r20, r24
     34e:	59 1f       	adc	r21, r25
     350:	61 1d       	adc	r22, r1
     352:	71 1d       	adc	r23, r1
     354:	42 a3       	std	Z+34, r20	; 0x22
     356:	53 a3       	std	Z+35, r21	; 0x23
     358:	64 a3       	std	Z+36, r22	; 0x24
     35a:	75 a3       	std	Z+37, r23	; 0x25
     35c:	62 a1       	ldd	r22, Z+34	; 0x22
     35e:	73 a1       	ldd	r23, Z+35	; 0x23
     360:	84 a1       	ldd	r24, Z+36	; 0x24
     362:	95 a1       	ldd	r25, Z+37	; 0x25
     364:	08 95       	ret

00000366 <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb>:
     366:	4f 92       	push	r4
     368:	5f 92       	push	r5
     36a:	6f 92       	push	r6
     36c:	7f 92       	push	r7
     36e:	8f 92       	push	r8
     370:	9f 92       	push	r9
     372:	af 92       	push	r10
     374:	bf 92       	push	r11
     376:	cf 92       	push	r12
     378:	df 92       	push	r13
     37a:	ef 92       	push	r14
     37c:	ff 92       	push	r15
     37e:	cf 93       	push	r28
     380:	df 93       	push	r29
     382:	ec 01       	movw	r28, r24
     384:	61 11       	cpse	r22, r1
     386:	36 c0       	rjmp	.+108    	; 0x3f4 <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb+0x8e>
     388:	0e 94 53 01 	call	0x2a6	; 0x2a6 <_ZN15lmx2694_Handler13Get_N_DividerEb>
     38c:	2b 01       	movw	r4, r22
     38e:	3c 01       	movw	r6, r24
     390:	60 e0       	ldi	r22, 0x00	; 0
     392:	ce 01       	movw	r24, r28
     394:	0e 94 73 01 	call	0x2e6	; 0x2e6 <_ZN15lmx2694_Handler13Get_NumeratorEb>
     398:	4b 01       	movw	r8, r22
     39a:	5c 01       	movw	r10, r24
     39c:	60 e0       	ldi	r22, 0x00	; 0
     39e:	ce 01       	movw	r24, r28
     3a0:	0e 94 93 01 	call	0x326	; 0x326 <_ZN15lmx2694_Handler15Get_DenominatorEb>
     3a4:	6b 01       	movw	r12, r22
     3a6:	7c 01       	movw	r14, r24
     3a8:	c5 01       	movw	r24, r10
     3aa:	b4 01       	movw	r22, r8
     3ac:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__floatunsisf>
     3b0:	4b 01       	movw	r8, r22
     3b2:	5c 01       	movw	r10, r24
     3b4:	c7 01       	movw	r24, r14
     3b6:	b6 01       	movw	r22, r12
     3b8:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__floatunsisf>
     3bc:	9b 01       	movw	r18, r22
     3be:	ac 01       	movw	r20, r24
     3c0:	c5 01       	movw	r24, r10
     3c2:	b4 01       	movw	r22, r8
     3c4:	0e 94 50 09 	call	0x12a0	; 0x12a0 <__divsf3>
     3c8:	6b 01       	movw	r12, r22
     3ca:	7c 01       	movw	r14, r24
     3cc:	c3 01       	movw	r24, r6
     3ce:	b2 01       	movw	r22, r4
     3d0:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__floatunsisf>
     3d4:	9b 01       	movw	r18, r22
     3d6:	ac 01       	movw	r20, r24
     3d8:	c7 01       	movw	r24, r14
     3da:	b6 01       	movw	r22, r12
     3dc:	0e 94 df 08 	call	0x11be	; 0x11be <__addsf3>
     3e0:	20 e0       	ldi	r18, 0x00	; 0
     3e2:	30 e0       	ldi	r19, 0x00	; 0
     3e4:	48 e4       	ldi	r20, 0x48	; 72
     3e6:	53 e4       	ldi	r21, 0x43	; 67
     3e8:	0e 94 00 0b 	call	0x1600	; 0x1600 <__mulsf3>
     3ec:	6e a7       	std	Y+46, r22	; 0x2e
     3ee:	7f a7       	std	Y+47, r23	; 0x2f
     3f0:	88 ab       	std	Y+48, r24	; 0x30
     3f2:	99 ab       	std	Y+49, r25	; 0x31
     3f4:	6e a5       	ldd	r22, Y+46	; 0x2e
     3f6:	7f a5       	ldd	r23, Y+47	; 0x2f
     3f8:	88 a9       	ldd	r24, Y+48	; 0x30
     3fa:	99 a9       	ldd	r25, Y+49	; 0x31
     3fc:	df 91       	pop	r29
     3fe:	cf 91       	pop	r28
     400:	ff 90       	pop	r15
     402:	ef 90       	pop	r14
     404:	df 90       	pop	r13
     406:	cf 90       	pop	r12
     408:	bf 90       	pop	r11
     40a:	af 90       	pop	r10
     40c:	9f 90       	pop	r9
     40e:	8f 90       	pop	r8
     410:	7f 90       	pop	r7
     412:	6f 90       	pop	r6
     414:	5f 90       	pop	r5
     416:	4f 90       	pop	r4
     418:	08 95       	ret

0000041a <_ZN15lmx2694_Handler3GCDEmm>:
     41a:	8f 92       	push	r8
     41c:	9f 92       	push	r9
     41e:	af 92       	push	r10
     420:	bf 92       	push	r11
     422:	cf 92       	push	r12
     424:	df 92       	push	r13
     426:	ef 92       	push	r14
     428:	ff 92       	push	r15
     42a:	0f 93       	push	r16
     42c:	1f 93       	push	r17
     42e:	cf 93       	push	r28
     430:	df 93       	push	r29
     432:	41 15       	cp	r20, r1
     434:	51 05       	cpc	r21, r1
     436:	61 05       	cpc	r22, r1
     438:	71 05       	cpc	r23, r1
     43a:	79 f1       	breq	.+94     	; 0x49a <_ZN15lmx2694_Handler3GCDEmm+0x80>
     43c:	01 15       	cp	r16, r1
     43e:	11 05       	cpc	r17, r1
     440:	21 05       	cpc	r18, r1
     442:	31 05       	cpc	r19, r1
     444:	79 f1       	breq	.+94     	; 0x4a4 <_ZN15lmx2694_Handler3GCDEmm+0x8a>
     446:	68 01       	movw	r12, r16
     448:	79 01       	movw	r14, r18
     44a:	4a 01       	movw	r8, r20
     44c:	5b 01       	movw	r10, r22
     44e:	ec 01       	movw	r28, r24
     450:	40 17       	cp	r20, r16
     452:	51 07       	cpc	r21, r17
     454:	62 07       	cpc	r22, r18
     456:	73 07       	cpc	r23, r19
     458:	80 f4       	brcc	.+32     	; 0x47a <_ZN15lmx2694_Handler3GCDEmm+0x60>
     45a:	c9 01       	movw	r24, r18
     45c:	b8 01       	movw	r22, r16
     45e:	a5 01       	movw	r20, r10
     460:	94 01       	movw	r18, r8
     462:	0e 94 05 11 	call	0x220a	; 0x220a <__udivmodsi4>
     466:	8b 01       	movw	r16, r22
     468:	9c 01       	movw	r18, r24
     46a:	b5 01       	movw	r22, r10
     46c:	a4 01       	movw	r20, r8
     46e:	ce 01       	movw	r24, r28
     470:	0e 94 0d 02 	call	0x41a	; 0x41a <_ZN15lmx2694_Handler3GCDEmm>
     474:	f6 2f       	mov	r31, r22
     476:	e7 2f       	mov	r30, r23
     478:	19 c0       	rjmp	.+50     	; 0x4ac <_ZN15lmx2694_Handler3GCDEmm+0x92>
     47a:	cb 01       	movw	r24, r22
     47c:	ba 01       	movw	r22, r20
     47e:	a9 01       	movw	r20, r18
     480:	98 01       	movw	r18, r16
     482:	0e 94 05 11 	call	0x220a	; 0x220a <__udivmodsi4>
     486:	8b 01       	movw	r16, r22
     488:	9c 01       	movw	r18, r24
     48a:	b7 01       	movw	r22, r14
     48c:	a6 01       	movw	r20, r12
     48e:	ce 01       	movw	r24, r28
     490:	0e 94 0d 02 	call	0x41a	; 0x41a <_ZN15lmx2694_Handler3GCDEmm>
     494:	f6 2f       	mov	r31, r22
     496:	e7 2f       	mov	r30, r23
     498:	09 c0       	rjmp	.+18     	; 0x4ac <_ZN15lmx2694_Handler3GCDEmm+0x92>
     49a:	f0 2f       	mov	r31, r16
     49c:	e1 2f       	mov	r30, r17
     49e:	82 2f       	mov	r24, r18
     4a0:	93 2f       	mov	r25, r19
     4a2:	04 c0       	rjmp	.+8      	; 0x4ac <_ZN15lmx2694_Handler3GCDEmm+0x92>
     4a4:	f4 2f       	mov	r31, r20
     4a6:	e5 2f       	mov	r30, r21
     4a8:	86 2f       	mov	r24, r22
     4aa:	97 2f       	mov	r25, r23
     4ac:	6f 2f       	mov	r22, r31
     4ae:	7e 2f       	mov	r23, r30
     4b0:	df 91       	pop	r29
     4b2:	cf 91       	pop	r28
     4b4:	1f 91       	pop	r17
     4b6:	0f 91       	pop	r16
     4b8:	ff 90       	pop	r15
     4ba:	ef 90       	pop	r14
     4bc:	df 90       	pop	r13
     4be:	cf 90       	pop	r12
     4c0:	bf 90       	pop	r11
     4c2:	af 90       	pop	r10
     4c4:	9f 90       	pop	r9
     4c6:	8f 90       	pop	r8
     4c8:	08 95       	ret

000004ca <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv>:
     4ca:	af 92       	push	r10
     4cc:	bf 92       	push	r11
     4ce:	cf 92       	push	r12
     4d0:	df 92       	push	r13
     4d2:	ef 92       	push	r14
     4d4:	ff 92       	push	r15
     4d6:	0f 93       	push	r16
     4d8:	1f 93       	push	r17
     4da:	cf 93       	push	r28
     4dc:	df 93       	push	r29
     4de:	7c 01       	movw	r14, r24
     4e0:	08 e2       	ldi	r16, 0x28	; 40
     4e2:	10 e4       	ldi	r17, 0x40	; 64
     4e4:	c0 e0       	ldi	r28, 0x00	; 0
     4e6:	d0 e0       	ldi	r29, 0x00	; 0
     4e8:	0f 2e       	mov	r0, r31
     4ea:	fc ee       	ldi	r31, 0xEC	; 236
     4ec:	cf 2e       	mov	r12, r31
     4ee:	fc e2       	ldi	r31, 0x2C	; 44
     4f0:	df 2e       	mov	r13, r31
     4f2:	f0 2d       	mov	r31, r0
     4f4:	0f 2e       	mov	r0, r31
     4f6:	fc ef       	ldi	r31, 0xFC	; 252
     4f8:	af 2e       	mov	r10, r31
     4fa:	fa e3       	ldi	r31, 0x3A	; 58
     4fc:	bf 2e       	mov	r11, r31
     4fe:	f0 2d       	mov	r31, r0
     500:	c3 30       	cpi	r28, 0x03	; 3
     502:	d1 05       	cpc	r29, r1
     504:	fc f4       	brge	.+62     	; 0x544 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x7a>
     506:	f8 01       	movw	r30, r16
     508:	60 81       	ld	r22, Z
     50a:	71 81       	ldd	r23, Z+1	; 0x01
     50c:	c5 01       	movw	r24, r10
     50e:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <__divmodhi4>
     512:	07 2e       	mov	r0, r23
     514:	00 0c       	add	r0, r0
     516:	88 0b       	sbc	r24, r24
     518:	99 0b       	sbc	r25, r25
     51a:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__floatsisf>
     51e:	f7 01       	movw	r30, r14
     520:	22 a5       	ldd	r18, Z+42	; 0x2a
     522:	33 a5       	ldd	r19, Z+43	; 0x2b
     524:	44 a5       	ldd	r20, Z+44	; 0x2c
     526:	55 a5       	ldd	r21, Z+45	; 0x2d
     528:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <__gesf2>
     52c:	18 16       	cp	r1, r24
     52e:	1c f1       	brlt	.+70     	; 0x576 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0xac>
     530:	1c 16       	cp	r1, r28
     532:	1d 06       	cpc	r1, r29
     534:	24 f4       	brge	.+8      	; 0x53e <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x74>
     536:	c1 50       	subi	r28, 0x01	; 1
     538:	f7 01       	movw	r30, r14
     53a:	c7 8b       	std	Z+23, r28	; 0x17
     53c:	23 c0       	rjmp	.+70     	; 0x584 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0xba>
     53e:	f7 01       	movw	r30, r14
     540:	17 8a       	std	Z+23, r1	; 0x17
     542:	20 c0       	rjmp	.+64     	; 0x584 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0xba>
     544:	f8 01       	movw	r30, r16
     546:	60 81       	ld	r22, Z
     548:	71 81       	ldd	r23, Z+1	; 0x01
     54a:	c6 01       	movw	r24, r12
     54c:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <__divmodhi4>
     550:	07 2e       	mov	r0, r23
     552:	00 0c       	add	r0, r0
     554:	88 0b       	sbc	r24, r24
     556:	99 0b       	sbc	r25, r25
     558:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__floatsisf>
     55c:	f7 01       	movw	r30, r14
     55e:	22 a5       	ldd	r18, Z+42	; 0x2a
     560:	33 a5       	ldd	r19, Z+43	; 0x2b
     562:	44 a5       	ldd	r20, Z+44	; 0x2c
     564:	55 a5       	ldd	r21, Z+45	; 0x2d
     566:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <__gesf2>
     56a:	18 16       	cp	r1, r24
     56c:	24 f0       	brlt	.+8      	; 0x576 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0xac>
     56e:	c1 50       	subi	r28, 0x01	; 1
     570:	f7 01       	movw	r30, r14
     572:	c7 8b       	std	Z+23, r28	; 0x17
     574:	07 c0       	rjmp	.+14     	; 0x584 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0xba>
     576:	21 96       	adiw	r28, 0x01	; 1
     578:	0e 5f       	subi	r16, 0xFE	; 254
     57a:	1f 4f       	sbci	r17, 0xFF	; 255
     57c:	ce 30       	cpi	r28, 0x0E	; 14
     57e:	d1 05       	cpc	r29, r1
     580:	09 f0       	breq	.+2      	; 0x584 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0xba>
     582:	be cf       	rjmp	.-132    	; 0x500 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x36>
     584:	f7 01       	movw	r30, r14
     586:	87 89       	ldd	r24, Z+23	; 0x17
     588:	e8 2f       	mov	r30, r24
     58a:	f0 e0       	ldi	r31, 0x00	; 0
     58c:	ee 0f       	add	r30, r30
     58e:	ff 1f       	adc	r31, r31
     590:	e8 5d       	subi	r30, 0xD8	; 216
     592:	ff 4b       	sbci	r31, 0xBF	; 191
     594:	90 81       	ld	r25, Z
     596:	f7 01       	movw	r30, r14
     598:	91 8f       	std	Z+25, r25	; 0x19
     59a:	df 91       	pop	r29
     59c:	cf 91       	pop	r28
     59e:	1f 91       	pop	r17
     5a0:	0f 91       	pop	r16
     5a2:	ff 90       	pop	r15
     5a4:	ef 90       	pop	r14
     5a6:	df 90       	pop	r13
     5a8:	cf 90       	pop	r12
     5aa:	bf 90       	pop	r11
     5ac:	af 90       	pop	r10
     5ae:	08 95       	ret

000005b0 <_ZN15lmx2694_Handler18Calculate_FractionEf>:
     5b0:	8f 92       	push	r8
     5b2:	9f 92       	push	r9
     5b4:	af 92       	push	r10
     5b6:	bf 92       	push	r11
     5b8:	cf 92       	push	r12
     5ba:	df 92       	push	r13
     5bc:	ef 92       	push	r14
     5be:	ff 92       	push	r15
     5c0:	0f 93       	push	r16
     5c2:	1f 93       	push	r17
     5c4:	cf 93       	push	r28
     5c6:	df 93       	push	r29
     5c8:	ec 01       	movw	r28, r24
     5ca:	cb 01       	movw	r24, r22
     5cc:	ba 01       	movw	r22, r20
     5ce:	20 e0       	ldi	r18, 0x00	; 0
     5d0:	30 e0       	ldi	r19, 0x00	; 0
     5d2:	40 e8       	ldi	r20, 0x80	; 128
     5d4:	5f e4       	ldi	r21, 0x4F	; 79
     5d6:	0e 94 00 0b 	call	0x1600	; 0x1600 <__mulsf3>
     5da:	0e 94 6d 0b 	call	0x16da	; 0x16da <round>
     5de:	4b 01       	movw	r8, r22
     5e0:	5c 01       	movw	r10, r24
     5e2:	0e 94 c2 09 	call	0x1384	; 0x1384 <__fixunssfsi>
     5e6:	ab 01       	movw	r20, r22
     5e8:	bc 01       	movw	r22, r24
     5ea:	0f ef       	ldi	r16, 0xFF	; 255
     5ec:	1f ef       	ldi	r17, 0xFF	; 255
     5ee:	98 01       	movw	r18, r16
     5f0:	ce 01       	movw	r24, r28
     5f2:	0e 94 0d 02 	call	0x41a	; 0x41a <_ZN15lmx2694_Handler3GCDEmm>
     5f6:	6b 01       	movw	r12, r22
     5f8:	7c 01       	movw	r14, r24
     5fa:	6e a3       	std	Y+38, r22	; 0x26
     5fc:	7f a3       	std	Y+39, r23	; 0x27
     5fe:	88 a7       	std	Y+40, r24	; 0x28
     600:	99 a7       	std	Y+41, r25	; 0x29
     602:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__floatunsisf>
     606:	9b 01       	movw	r18, r22
     608:	ac 01       	movw	r20, r24
     60a:	c5 01       	movw	r24, r10
     60c:	b4 01       	movw	r22, r8
     60e:	0e 94 50 09 	call	0x12a0	; 0x12a0 <__divsf3>
     612:	0e 94 c2 09 	call	0x1384	; 0x1384 <__fixunssfsi>
     616:	6e 8f       	std	Y+30, r22	; 0x1e
     618:	7f 8f       	std	Y+31, r23	; 0x1f
     61a:	88 a3       	std	Y+32, r24	; 0x20
     61c:	99 a3       	std	Y+33, r25	; 0x21
     61e:	6f ef       	ldi	r22, 0xFF	; 255
     620:	7f ef       	ldi	r23, 0xFF	; 255
     622:	cb 01       	movw	r24, r22
     624:	a7 01       	movw	r20, r14
     626:	96 01       	movw	r18, r12
     628:	0e 94 05 11 	call	0x220a	; 0x220a <__udivmodsi4>
     62c:	2a a3       	std	Y+34, r18	; 0x22
     62e:	3b a3       	std	Y+35, r19	; 0x23
     630:	4c a3       	std	Y+36, r20	; 0x24
     632:	5d a3       	std	Y+37, r21	; 0x25
     634:	df 91       	pop	r29
     636:	cf 91       	pop	r28
     638:	1f 91       	pop	r17
     63a:	0f 91       	pop	r16
     63c:	ff 90       	pop	r15
     63e:	ef 90       	pop	r14
     640:	df 90       	pop	r13
     642:	cf 90       	pop	r12
     644:	bf 90       	pop	r11
     646:	af 90       	pop	r10
     648:	9f 90       	pop	r9
     64a:	8f 90       	pop	r8
     64c:	08 95       	ret

0000064e <_ZN15lmx2694_Handler15Get_Three_BytesEm>:
     64e:	fc 01       	movw	r30, r24
     650:	44 87       	std	Z+12, r20	; 0x0c
     652:	53 87       	std	Z+11, r21	; 0x0b
     654:	62 87       	std	Z+10, r22	; 0x0a
     656:	08 95       	ret

00000658 <_ZN15lmx2694_Handler10Power_DownEv>:
     658:	cf 93       	push	r28
     65a:	df 93       	push	r29
     65c:	ec 01       	movw	r28, r24
     65e:	60 e0       	ldi	r22, 0x00	; 0
     660:	88 85       	ldd	r24, Y+8	; 0x08
     662:	99 85       	ldd	r25, Y+9	; 0x09
     664:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <_ZN13SPI_Syn_Class5SetCSEb>
     668:	49 e1       	ldi	r20, 0x19	; 25
     66a:	51 e2       	ldi	r21, 0x21	; 33
     66c:	60 e0       	ldi	r22, 0x00	; 0
     66e:	70 e0       	ldi	r23, 0x00	; 0
     670:	ce 01       	movw	r24, r28
     672:	0e 94 27 03 	call	0x64e	; 0x64e <_ZN15lmx2694_Handler15Get_Three_BytesEm>
     676:	be 01       	movw	r22, r28
     678:	66 5f       	subi	r22, 0xF6	; 246
     67a:	7f 4f       	sbci	r23, 0xFF	; 255
     67c:	43 e0       	ldi	r20, 0x03	; 3
     67e:	88 85       	ldd	r24, Y+8	; 0x08
     680:	99 85       	ldd	r25, Y+9	; 0x09
     682:	0e 94 c2 08 	call	0x1184	; 0x1184 <_ZN13SPI_Syn_Class5WriteEPKhh>
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	8a 8b       	std	Y+18, r24	; 0x12
     68a:	9b 8b       	std	Y+19, r25	; 0x13
     68c:	21 e0       	ldi	r18, 0x01	; 1
     68e:	18 16       	cp	r1, r24
     690:	19 06       	cpc	r1, r25
     692:	0c f0       	brlt	.+2      	; 0x696 <_ZN15lmx2694_Handler10Power_DownEv+0x3e>
     694:	20 e0       	ldi	r18, 0x00	; 0
     696:	28 8b       	std	Y+16, r18	; 0x10
     698:	61 e0       	ldi	r22, 0x01	; 1
     69a:	88 85       	ldd	r24, Y+8	; 0x08
     69c:	99 85       	ldd	r25, Y+9	; 0x09
     69e:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <_ZN13SPI_Syn_Class5SetCSEb>
     6a2:	88 89       	ldd	r24, Y+16	; 0x10
     6a4:	df 91       	pop	r29
     6a6:	cf 91       	pop	r28
     6a8:	08 95       	ret

000006aa <_ZN15lmx2694_Handler13Program_ResetEv>:
     6aa:	0f 93       	push	r16
     6ac:	1f 93       	push	r17
     6ae:	cf 93       	push	r28
     6b0:	df 93       	push	r29
     6b2:	ec 01       	movw	r28, r24
     6b4:	60 e0       	ldi	r22, 0x00	; 0
     6b6:	88 85       	ldd	r24, Y+8	; 0x08
     6b8:	99 85       	ldd	r25, Y+9	; 0x09
     6ba:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <_ZN13SPI_Syn_Class5SetCSEb>
     6be:	4e e1       	ldi	r20, 0x1E	; 30
     6c0:	51 e2       	ldi	r21, 0x21	; 33
     6c2:	60 e0       	ldi	r22, 0x00	; 0
     6c4:	70 e0       	ldi	r23, 0x00	; 0
     6c6:	ce 01       	movw	r24, r28
     6c8:	0e 94 27 03 	call	0x64e	; 0x64e <_ZN15lmx2694_Handler15Get_Three_BytesEm>
     6cc:	8e 01       	movw	r16, r28
     6ce:	06 5f       	subi	r16, 0xF6	; 246
     6d0:	1f 4f       	sbci	r17, 0xFF	; 255
     6d2:	43 e0       	ldi	r20, 0x03	; 3
     6d4:	b8 01       	movw	r22, r16
     6d6:	88 85       	ldd	r24, Y+8	; 0x08
     6d8:	99 85       	ldd	r25, Y+9	; 0x09
     6da:	0e 94 c2 08 	call	0x1184	; 0x1184 <_ZN13SPI_Syn_Class5WriteEPKhh>
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	8a 8b       	std	Y+18, r24	; 0x12
     6e2:	9b 8b       	std	Y+19, r25	; 0x13
     6e4:	61 e0       	ldi	r22, 0x01	; 1
     6e6:	88 85       	ldd	r24, Y+8	; 0x08
     6e8:	99 85       	ldd	r25, Y+9	; 0x09
     6ea:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <_ZN13SPI_Syn_Class5SetCSEb>
     6ee:	88 e5       	ldi	r24, 0x58	; 88
     6f0:	92 e0       	ldi	r25, 0x02	; 2
     6f2:	01 97       	sbiw	r24, 0x01	; 1
     6f4:	f1 f7       	brne	.-4      	; 0x6f2 <_ZN15lmx2694_Handler13Program_ResetEv+0x48>
     6f6:	60 e0       	ldi	r22, 0x00	; 0
     6f8:	88 85       	ldd	r24, Y+8	; 0x08
     6fa:	99 85       	ldd	r25, Y+9	; 0x09
     6fc:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <_ZN13SPI_Syn_Class5SetCSEb>
     700:	4c e1       	ldi	r20, 0x1C	; 28
     702:	51 e2       	ldi	r21, 0x21	; 33
     704:	60 e0       	ldi	r22, 0x00	; 0
     706:	70 e0       	ldi	r23, 0x00	; 0
     708:	ce 01       	movw	r24, r28
     70a:	0e 94 27 03 	call	0x64e	; 0x64e <_ZN15lmx2694_Handler15Get_Three_BytesEm>
     70e:	43 e0       	ldi	r20, 0x03	; 3
     710:	b8 01       	movw	r22, r16
     712:	88 85       	ldd	r24, Y+8	; 0x08
     714:	99 85       	ldd	r25, Y+9	; 0x09
     716:	0e 94 c2 08 	call	0x1184	; 0x1184 <_ZN13SPI_Syn_Class5WriteEPKhh>
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	8a 8b       	std	Y+18, r24	; 0x12
     71e:	9b 8b       	std	Y+19, r25	; 0x13
     720:	21 e0       	ldi	r18, 0x01	; 1
     722:	18 16       	cp	r1, r24
     724:	19 06       	cpc	r1, r25
     726:	0c f0       	brlt	.+2      	; 0x72a <_ZN15lmx2694_Handler13Program_ResetEv+0x80>
     728:	20 e0       	ldi	r18, 0x00	; 0
     72a:	28 8b       	std	Y+16, r18	; 0x10
     72c:	61 e0       	ldi	r22, 0x01	; 1
     72e:	88 85       	ldd	r24, Y+8	; 0x08
     730:	99 85       	ldd	r25, Y+9	; 0x09
     732:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <_ZN13SPI_Syn_Class5SetCSEb>
     736:	88 89       	ldd	r24, Y+16	; 0x10
     738:	df 91       	pop	r29
     73a:	cf 91       	pop	r28
     73c:	1f 91       	pop	r17
     73e:	0f 91       	pop	r16
     740:	08 95       	ret

00000742 <_ZN15lmx2694_Handler16Make_Three_BytesEhj>:
     742:	fc 01       	movw	r30, r24
     744:	44 87       	std	Z+12, r20	; 0x0c
     746:	53 87       	std	Z+11, r21	; 0x0b
     748:	62 87       	std	Z+10, r22	; 0x0a
     74a:	08 95       	ret

0000074c <_ZN15lmx2694_Handler21Write_Single_RegisterEhj>:
     74c:	df 92       	push	r13
     74e:	ef 92       	push	r14
     750:	ff 92       	push	r15
     752:	0f 93       	push	r16
     754:	1f 93       	push	r17
     756:	cf 93       	push	r28
     758:	df 93       	push	r29
     75a:	ec 01       	movw	r28, r24
     75c:	d6 2e       	mov	r13, r22
     75e:	7a 01       	movw	r14, r20
     760:	06 2f       	mov	r16, r22
     762:	10 e0       	ldi	r17, 0x00	; 0
     764:	00 0f       	add	r16, r16
     766:	11 1f       	adc	r17, r17
     768:	ee 81       	ldd	r30, Y+6	; 0x06
     76a:	ff 81       	ldd	r31, Y+7	; 0x07
     76c:	e0 0f       	add	r30, r16
     76e:	f1 1f       	adc	r31, r17
     770:	81 e0       	ldi	r24, 0x01	; 1
     772:	20 81       	ld	r18, Z
     774:	31 81       	ldd	r19, Z+1	; 0x01
     776:	24 17       	cp	r18, r20
     778:	35 07       	cpc	r19, r21
     77a:	09 f0       	breq	.+2      	; 0x77e <_ZN15lmx2694_Handler21Write_Single_RegisterEhj+0x32>
     77c:	80 e0       	ldi	r24, 0x00	; 0
     77e:	88 23       	and	r24, r24
     780:	19 f0       	breq	.+6      	; 0x788 <_ZN15lmx2694_Handler21Write_Single_RegisterEhj+0x3c>
     782:	89 89       	ldd	r24, Y+17	; 0x11
     784:	81 11       	cpse	r24, r1
     786:	24 c0       	rjmp	.+72     	; 0x7d0 <_ZN15lmx2694_Handler21Write_Single_RegisterEhj+0x84>
     788:	60 e0       	ldi	r22, 0x00	; 0
     78a:	88 85       	ldd	r24, Y+8	; 0x08
     78c:	99 85       	ldd	r25, Y+9	; 0x09
     78e:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <_ZN13SPI_Syn_Class5SetCSEb>
     792:	a7 01       	movw	r20, r14
     794:	6d 2d       	mov	r22, r13
     796:	ce 01       	movw	r24, r28
     798:	0e 94 a1 03 	call	0x742	; 0x742 <_ZN15lmx2694_Handler16Make_Three_BytesEhj>
     79c:	43 e0       	ldi	r20, 0x03	; 3
     79e:	be 01       	movw	r22, r28
     7a0:	66 5f       	subi	r22, 0xF6	; 246
     7a2:	7f 4f       	sbci	r23, 0xFF	; 255
     7a4:	88 85       	ldd	r24, Y+8	; 0x08
     7a6:	99 85       	ldd	r25, Y+9	; 0x09
     7a8:	0e 94 c2 08 	call	0x1184	; 0x1184 <_ZN13SPI_Syn_Class5WriteEPKhh>
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	8a 8b       	std	Y+18, r24	; 0x12
     7b0:	9b 8b       	std	Y+19, r25	; 0x13
     7b2:	18 16       	cp	r1, r24
     7b4:	19 06       	cpc	r1, r25
     7b6:	3c f4       	brge	.+14     	; 0x7c6 <_ZN15lmx2694_Handler21Write_Single_RegisterEhj+0x7a>
     7b8:	8e 81       	ldd	r24, Y+6	; 0x06
     7ba:	9f 81       	ldd	r25, Y+7	; 0x07
     7bc:	fc 01       	movw	r30, r24
     7be:	e0 0f       	add	r30, r16
     7c0:	f1 1f       	adc	r31, r17
     7c2:	e0 82       	st	Z, r14
     7c4:	f1 82       	std	Z+1, r15	; 0x01
     7c6:	61 e0       	ldi	r22, 0x01	; 1
     7c8:	88 85       	ldd	r24, Y+8	; 0x08
     7ca:	99 85       	ldd	r25, Y+9	; 0x09
     7cc:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <_ZN13SPI_Syn_Class5SetCSEb>
     7d0:	8a 89       	ldd	r24, Y+18	; 0x12
     7d2:	9b 89       	ldd	r25, Y+19	; 0x13
     7d4:	df 91       	pop	r29
     7d6:	cf 91       	pop	r28
     7d8:	1f 91       	pop	r17
     7da:	0f 91       	pop	r16
     7dc:	ff 90       	pop	r15
     7de:	ef 90       	pop	r14
     7e0:	df 90       	pop	r13
     7e2:	08 95       	ret

000007e4 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf>:
	
	}
	channel_divider=channel_divider_values[channel_index];
	return channel_index;
}
int lmx2694_Handler::Program_PFD_DLY_SEL(float vcof){
     7e4:	cf 92       	push	r12
     7e6:	df 92       	push	r13
     7e8:	ef 92       	push	r14
     7ea:	ff 92       	push	r15
     7ec:	cf 93       	push	r28
     7ee:	df 93       	push	r29
     7f0:	ec 01       	movw	r28, r24
     7f2:	6a 01       	movw	r12, r20
     7f4:	7b 01       	movw	r14, r22
	if (mash_order)
     7f6:	88 8d       	ldd	r24, Y+24	; 0x18
     7f8:	88 23       	and	r24, r24
     7fa:	09 f4       	brne	.+2      	; 0x7fe <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x1a>
     7fc:	44 c0       	rjmp	.+136    	; 0x886 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0xa2>
	{
		switch (mash_order)
     7fe:	19 f0       	breq	.+6      	; 0x806 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x22>
     800:	81 30       	cpi	r24, 0x01	; 1
     802:	c9 f0       	breq	.+50     	; 0x836 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x52>
     804:	40 c0       	rjmp	.+128    	; 0x886 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0xa2>
		{
			case 0:
				if (vcof>12500)
     806:	20 e0       	ldi	r18, 0x00	; 0
     808:	30 e5       	ldi	r19, 0x50	; 80
     80a:	43 e4       	ldi	r20, 0x43	; 67
     80c:	56 e4       	ldi	r21, 0x46	; 70
     80e:	c7 01       	movw	r24, r14
     810:	b6 01       	movw	r22, r12
     812:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <__gesf2>
     816:	18 16       	cp	r1, r24
     818:	3c f4       	brge	.+14     	; 0x828 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x44>
				{
					Write_Single_Register(37,0x8204);
     81a:	44 e0       	ldi	r20, 0x04	; 4
     81c:	52 e8       	ldi	r21, 0x82	; 130
     81e:	65 e2       	ldi	r22, 0x25	; 37
     820:	ce 01       	movw	r24, r28
     822:	0e 94 a6 03 	call	0x74c	; 0x74c <_ZN15lmx2694_Handler21Write_Single_RegisterEhj>
     826:	2f c0       	rjmp	.+94     	; 0x886 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0xa2>
				}
				else
				{
					Write_Single_Register(37,0x8104);
     828:	44 e0       	ldi	r20, 0x04	; 4
     82a:	51 e8       	ldi	r21, 0x81	; 129
     82c:	65 e2       	ldi	r22, 0x25	; 37
     82e:	ce 01       	movw	r24, r28
     830:	0e 94 a6 03 	call	0x74c	; 0x74c <_ZN15lmx2694_Handler21Write_Single_RegisterEhj>
     834:	28 c0       	rjmp	.+80     	; 0x886 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0xa2>
				}
		
			break;
			case 1:
				if (vcof>12500)
     836:	20 e0       	ldi	r18, 0x00	; 0
     838:	30 e5       	ldi	r19, 0x50	; 80
     83a:	43 e4       	ldi	r20, 0x43	; 67
     83c:	56 e4       	ldi	r21, 0x46	; 70
     83e:	c7 01       	movw	r24, r14
     840:	b6 01       	movw	r22, r12
     842:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <__gesf2>
     846:	18 16       	cp	r1, r24
     848:	3c f4       	brge	.+14     	; 0x858 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x74>
				{
					Write_Single_Register(37,0x8304);
     84a:	44 e0       	ldi	r20, 0x04	; 4
     84c:	53 e8       	ldi	r21, 0x83	; 131
     84e:	65 e2       	ldi	r22, 0x25	; 37
     850:	ce 01       	movw	r24, r28
     852:	0e 94 a6 03 	call	0x74c	; 0x74c <_ZN15lmx2694_Handler21Write_Single_RegisterEhj>
     856:	17 c0       	rjmp	.+46     	; 0x886 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0xa2>
				}
				else
				{
					if (vcof>10000)
     858:	20 e0       	ldi	r18, 0x00	; 0
     85a:	30 e4       	ldi	r19, 0x40	; 64
     85c:	4c e1       	ldi	r20, 0x1C	; 28
     85e:	56 e4       	ldi	r21, 0x46	; 70
     860:	c7 01       	movw	r24, r14
     862:	b6 01       	movw	r22, r12
     864:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <__gesf2>
     868:	18 16       	cp	r1, r24
     86a:	3c f4       	brge	.+14     	; 0x87a <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x96>
					{
						Write_Single_Register(37,0x8204);
     86c:	44 e0       	ldi	r20, 0x04	; 4
     86e:	52 e8       	ldi	r21, 0x82	; 130
     870:	65 e2       	ldi	r22, 0x25	; 37
     872:	ce 01       	movw	r24, r28
     874:	0e 94 a6 03 	call	0x74c	; 0x74c <_ZN15lmx2694_Handler21Write_Single_RegisterEhj>
     878:	06 c0       	rjmp	.+12     	; 0x886 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0xa2>
					} 
					else
					{
						Write_Single_Register(37,0x8104);
     87a:	44 e0       	ldi	r20, 0x04	; 4
     87c:	51 e8       	ldi	r21, 0x81	; 129
     87e:	65 e2       	ldi	r22, 0x25	; 37
     880:	ce 01       	movw	r24, r28
     882:	0e 94 a6 03 	call	0x74c	; 0x74c <_ZN15lmx2694_Handler21Write_Single_RegisterEhj>
	} 
	else
	{
	}
	
	return write_registers[37];
     886:	ee 81       	ldd	r30, Y+6	; 0x06
     888:	ff 81       	ldd	r31, Y+7	; 0x07
     88a:	e6 5b       	subi	r30, 0xB6	; 182
     88c:	ff 4f       	sbci	r31, 0xFF	; 255
}
     88e:	80 81       	ld	r24, Z
     890:	91 81       	ldd	r25, Z+1	; 0x01
     892:	df 91       	pop	r29
     894:	cf 91       	pop	r28
     896:	ff 90       	pop	r15
     898:	ef 90       	pop	r14
     89a:	df 90       	pop	r13
     89c:	cf 90       	pop	r12
     89e:	08 95       	ret

000008a0 <_ZN15lmx2694_Handler13Write_FCAL_ENEb>:
	int_result=spi->Write(write_bytes,3);
	bool_result=int_result>0;
	spi->SetCS(true);
	return bool_result;
}
bool lmx2694_Handler::Write_FCAL_EN(bool st){
     8a0:	cf 93       	push	r28
     8a2:	df 93       	push	r29
     8a4:	ec 01       	movw	r28, r24

#if ONLY_LOCK_SIGNAL
	if(st){
     8a6:	66 23       	and	r22, r22
     8a8:	41 f0       	breq	.+16     	; 0x8ba <_ZN15lmx2694_Handler13Write_FCAL_ENEb+0x1a>
		register_value=write_registers[0]|(0x01<<FCAL_EN);
     8aa:	ee 81       	ldd	r30, Y+6	; 0x06
     8ac:	ff 81       	ldd	r31, Y+7	; 0x07
     8ae:	80 81       	ld	r24, Z
     8b0:	91 81       	ldd	r25, Z+1	; 0x01
     8b2:	88 60       	ori	r24, 0x08	; 8
     8b4:	8c 8b       	std	Y+20, r24	; 0x14
     8b6:	9d 8b       	std	Y+21, r25	; 0x15
     8b8:	07 c0       	rjmp	.+14     	; 0x8c8 <_ZN15lmx2694_Handler13Write_FCAL_ENEb+0x28>
	}else{
		register_value=write_registers[0]&(~((uint16_t)(0x01<<FCAL_EN)));
     8ba:	ee 81       	ldd	r30, Y+6	; 0x06
     8bc:	ff 81       	ldd	r31, Y+7	; 0x07
     8be:	80 81       	ld	r24, Z
     8c0:	91 81       	ldd	r25, Z+1	; 0x01
     8c2:	87 7f       	andi	r24, 0xF7	; 247
     8c4:	8c 8b       	std	Y+20, r24	; 0x14
     8c6:	9d 8b       	std	Y+21, r25	; 0x15
		register_value=Read_Single_Register(0)&(~((uint16_t)(0x01<<FCAL_EN)));
	}
#endif


	int_result=Write_Single_Register(0,register_value);
     8c8:	4c 89       	ldd	r20, Y+20	; 0x14
     8ca:	5d 89       	ldd	r21, Y+21	; 0x15
     8cc:	60 e0       	ldi	r22, 0x00	; 0
     8ce:	ce 01       	movw	r24, r28
     8d0:	0e 94 a6 03 	call	0x74c	; 0x74c <_ZN15lmx2694_Handler21Write_Single_RegisterEhj>
     8d4:	8a 8b       	std	Y+18, r24	; 0x12
     8d6:	9b 8b       	std	Y+19, r25	; 0x13

	return int_result;
     8d8:	21 e0       	ldi	r18, 0x01	; 1
     8da:	89 2b       	or	r24, r25
     8dc:	09 f4       	brne	.+2      	; 0x8e0 <_ZN15lmx2694_Handler13Write_FCAL_ENEb+0x40>
     8de:	20 e0       	ldi	r18, 0x00	; 0
}
     8e0:	82 2f       	mov	r24, r18
     8e2:	df 91       	pop	r29
     8e4:	cf 91       	pop	r28
     8e6:	08 95       	ret

000008e8 <_ZN15lmx2694_Handler14Toggle_FCAL_ENEv>:
bool lmx2694_Handler::Toggle_FCAL_EN(){
     8e8:	cf 93       	push	r28
     8ea:	df 93       	push	r29
     8ec:	ec 01       	movw	r28, r24
	Write_FCAL_EN(false);
     8ee:	60 e0       	ldi	r22, 0x00	; 0
     8f0:	0e 94 50 04 	call	0x8a0	; 0x8a0 <_ZN15lmx2694_Handler13Write_FCAL_ENEb>
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     8f4:	88 e5       	ldi	r24, 0x58	; 88
     8f6:	92 e0       	ldi	r25, 0x02	; 2
     8f8:	01 97       	sbiw	r24, 0x01	; 1
     8fa:	f1 f7       	brne	.-4      	; 0x8f8 <_ZN15lmx2694_Handler14Toggle_FCAL_ENEv+0x10>
	_delay_us(100);
	bool_result=Write_FCAL_EN(true);
     8fc:	61 e0       	ldi	r22, 0x01	; 1
     8fe:	ce 01       	movw	r24, r28
     900:	0e 94 50 04 	call	0x8a0	; 0x8a0 <_ZN15lmx2694_Handler13Write_FCAL_ENEb>
     904:	88 8b       	std	Y+16, r24	; 0x10

	return bool_result;
}
     906:	df 91       	pop	r29
     908:	cf 91       	pop	r28
     90a:	08 95       	ret

0000090c <_ZN15lmx2694_Handler18Initiate_RegistersEv>:
	for(int i=0; i<2;i++){
		write_bytes[2-i]=(uint8_t)((data>>(8*i))&0xff);
	}
	write_bytes[0]=index;
}
void lmx2694_Handler::Initiate_Registers(){
     90c:	ff 92       	push	r15
     90e:	0f 93       	push	r16
     910:	1f 93       	push	r17
     912:	cf 93       	push	r28
     914:	df 93       	push	r29
     916:	8c 01       	movw	r16, r24
     918:	aa e2       	ldi	r26, 0x2A	; 42
     91a:	b1 e4       	ldi	r27, 0x41	; 65
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	90 e0       	ldi	r25, 0x00	; 0
	for (int i = 0; i < NUMBER_REGISTERS; i++)
	{
	//	write_registers[i]=default_registers[NUMBER_REGISTERS-i-1];
		read_registers[i]=default_registers[NUMBER_REGISTERS-i-1];
     920:	3e 91       	ld	r19, -X
     922:	2e 91       	ld	r18, -X
     924:	e8 01       	movw	r28, r16
     926:	ec 81       	ldd	r30, Y+4	; 0x04
     928:	fd 81       	ldd	r31, Y+5	; 0x05
     92a:	e8 0f       	add	r30, r24
     92c:	f9 1f       	adc	r31, r25
     92e:	20 83       	st	Z, r18
     930:	31 83       	std	Z+1, r19	; 0x01
     932:	02 96       	adiw	r24, 0x02	; 2
		write_bytes[2-i]=(uint8_t)((data>>(8*i))&0xff);
	}
	write_bytes[0]=index;
}
void lmx2694_Handler::Initiate_Registers(){
	for (int i = 0; i < NUMBER_REGISTERS; i++)
     934:	86 3e       	cpi	r24, 0xE6	; 230
     936:	91 05       	cpc	r25, r1
     938:	99 f7       	brne	.-26     	; 0x920 <_ZN15lmx2694_Handler18Initiate_RegistersEv+0x14>
     93a:	0f 2e       	mov	r0, r31
     93c:	f2 e7       	ldi	r31, 0x72	; 114
     93e:	ff 2e       	mov	r15, r31
     940:	f0 2d       	mov	r31, r0
     942:	c4 ee       	ldi	r28, 0xE4	; 228
     944:	d0 e0       	ldi	r29, 0x00	; 0
	//	write_registers[i]=default_registers[NUMBER_REGISTERS-i-1];
		read_registers[i]=default_registers[NUMBER_REGISTERS-i-1];
	}
	for(int i=NUMBER_REGISTERS; i>0;i--){
	
		Write_Single_Register(i-1,read_registers[i-1]);
     946:	d8 01       	movw	r26, r16
     948:	14 96       	adiw	r26, 0x04	; 4
     94a:	ed 91       	ld	r30, X+
     94c:	fc 91       	ld	r31, X
     94e:	15 97       	sbiw	r26, 0x05	; 5
     950:	ec 0f       	add	r30, r28
     952:	fd 1f       	adc	r31, r29
     954:	40 81       	ld	r20, Z
     956:	51 81       	ldd	r21, Z+1	; 0x01
     958:	6f 2d       	mov	r22, r15
     95a:	c8 01       	movw	r24, r16
     95c:	0e 94 a6 03 	call	0x74c	; 0x74c <_ZN15lmx2694_Handler21Write_Single_RegisterEhj>
     960:	22 97       	sbiw	r28, 0x02	; 2
     962:	fa 94       	dec	r15
	for (int i = 0; i < NUMBER_REGISTERS; i++)
	{
	//	write_registers[i]=default_registers[NUMBER_REGISTERS-i-1];
		read_registers[i]=default_registers[NUMBER_REGISTERS-i-1];
	}
	for(int i=NUMBER_REGISTERS; i>0;i--){
     964:	ce 3f       	cpi	r28, 0xFE	; 254
     966:	bf ef       	ldi	r27, 0xFF	; 255
     968:	db 07       	cpc	r29, r27
     96a:	69 f7       	brne	.-38     	; 0x946 <_ZN15lmx2694_Handler18Initiate_RegistersEv+0x3a>
	
		Write_Single_Register(i-1,read_registers[i-1]);

	}

}
     96c:	df 91       	pop	r29
     96e:	cf 91       	pop	r28
     970:	1f 91       	pop	r17
     972:	0f 91       	pop	r16
     974:	ff 90       	pop	r15
     976:	08 95       	ret

00000978 <_ZN15lmx2694_Handler19Set_MUXOUT_READBACKEb>:
	read_registers[index]=register_value;
	Set_MUXOUT_READBACK(true);
	return register_value;
}

int lmx2694_Handler::Set_MUXOUT_READBACK(bool st){
     978:	cf 93       	push	r28
     97a:	df 93       	push	r29
     97c:	ec 01       	movw	r28, r24
	if(st){
     97e:	66 23       	and	r22, r22
     980:	41 f0       	breq	.+16     	; 0x992 <_ZN15lmx2694_Handler19Set_MUXOUT_READBACKEb+0x1a>
		register_value=read_registers[0]|(0x01<<READBACK_ENABLE_BIT);
     982:	ec 81       	ldd	r30, Y+4	; 0x04
     984:	fd 81       	ldd	r31, Y+5	; 0x05
     986:	80 81       	ld	r24, Z
     988:	91 81       	ldd	r25, Z+1	; 0x01
     98a:	84 60       	ori	r24, 0x04	; 4
     98c:	8c 8b       	std	Y+20, r24	; 0x14
     98e:	9d 8b       	std	Y+21, r25	; 0x15
     990:	07 c0       	rjmp	.+14     	; 0x9a0 <_ZN15lmx2694_Handler19Set_MUXOUT_READBACKEb+0x28>
		}else{
		register_value=read_registers[0]&(~((uint16_t)(0x01<<READBACK_ENABLE_BIT)));
     992:	ec 81       	ldd	r30, Y+4	; 0x04
     994:	fd 81       	ldd	r31, Y+5	; 0x05
     996:	80 81       	ld	r24, Z
     998:	91 81       	ldd	r25, Z+1	; 0x01
     99a:	8b 7f       	andi	r24, 0xFB	; 251
     99c:	8c 8b       	std	Y+20, r24	; 0x14
     99e:	9d 8b       	std	Y+21, r25	; 0x15
	}
	int_result=Write_Single_Register(0,register_value);
     9a0:	4c 89       	ldd	r20, Y+20	; 0x14
     9a2:	5d 89       	ldd	r21, Y+21	; 0x15
     9a4:	60 e0       	ldi	r22, 0x00	; 0
     9a6:	ce 01       	movw	r24, r28
     9a8:	0e 94 a6 03 	call	0x74c	; 0x74c <_ZN15lmx2694_Handler21Write_Single_RegisterEhj>
     9ac:	8a 8b       	std	Y+18, r24	; 0x12
     9ae:	9b 8b       	std	Y+19, r25	; 0x13
	return int_result;
}
     9b0:	df 91       	pop	r29
     9b2:	cf 91       	pop	r28
     9b4:	08 95       	ret

000009b6 <_ZN15lmx2694_Handler20Read_Single_RegisterEh>:
		spi->SetCS(true);
	}
	
	return int_result;
}
uint16_t lmx2694_Handler::Read_Single_Register(uint8_t index){
     9b6:	bf 92       	push	r11
     9b8:	cf 92       	push	r12
     9ba:	df 92       	push	r13
     9bc:	ef 92       	push	r14
     9be:	ff 92       	push	r15
     9c0:	0f 93       	push	r16
     9c2:	1f 93       	push	r17
     9c4:	cf 93       	push	r28
     9c6:	df 93       	push	r29
     9c8:	ec 01       	movw	r28, r24
     9ca:	b6 2e       	mov	r11, r22
	Set_MUXOUT_READBACK(false);
     9cc:	60 e0       	ldi	r22, 0x00	; 0
     9ce:	0e 94 bc 04 	call	0x978	; 0x978 <_ZN15lmx2694_Handler19Set_MUXOUT_READBACKEb>
	register_value=0;
     9d2:	1c 8a       	std	Y+20, r1	; 0x14
     9d4:	1d 8a       	std	Y+21, r1	; 0x15
	uint16_t  last_value=0xff;
	while((register_value==0)|(register_value==0xffff)){
		spi->SetCS(false);
			private_index=index|0x80;
     9d6:	4b 2d       	mov	r20, r11
     9d8:	40 68       	ori	r20, 0x80	; 128
     9da:	c4 2e       	mov	r12, r20
			memset(read_bytes,0,3);
     9dc:	8e 01       	movw	r16, r28
     9de:	03 5f       	subi	r16, 0xF3	; 243
     9e0:	1f 4f       	sbci	r17, 0xFF	; 255
     9e2:	0f 2e       	mov	r0, r31
     9e4:	f3 e0       	ldi	r31, 0x03	; 3
     9e6:	df 2e       	mov	r13, r31
     9e8:	f0 2d       	mov	r31, r0
			int_result=spi->Write(&private_index,1);
     9ea:	7e 01       	movw	r14, r28
     9ec:	86 e1       	ldi	r24, 0x16	; 22
     9ee:	e8 0e       	add	r14, r24
     9f0:	f1 1c       	adc	r15, r1
uint16_t lmx2694_Handler::Read_Single_Register(uint8_t index){
	Set_MUXOUT_READBACK(false);
	register_value=0;
	uint16_t  last_value=0xff;
	while((register_value==0)|(register_value==0xffff)){
		spi->SetCS(false);
     9f2:	60 e0       	ldi	r22, 0x00	; 0
     9f4:	88 85       	ldd	r24, Y+8	; 0x08
     9f6:	99 85       	ldd	r25, Y+9	; 0x09
     9f8:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <_ZN13SPI_Syn_Class5SetCSEb>
			private_index=index|0x80;
     9fc:	ce 8a       	std	Y+22, r12	; 0x16
			memset(read_bytes,0,3);
     9fe:	f8 01       	movw	r30, r16
     a00:	4d 2d       	mov	r20, r13
     a02:	11 92       	st	Z+, r1
     a04:	4a 95       	dec	r20
     a06:	e9 f7       	brne	.-6      	; 0xa02 <_ZN15lmx2694_Handler20Read_Single_RegisterEh+0x4c>
			int_result=spi->Write(&private_index,1);
     a08:	41 e0       	ldi	r20, 0x01	; 1
     a0a:	b7 01       	movw	r22, r14
     a0c:	88 85       	ldd	r24, Y+8	; 0x08
     a0e:	99 85       	ldd	r25, Y+9	; 0x09
     a10:	0e 94 c2 08 	call	0x1184	; 0x1184 <_ZN13SPI_Syn_Class5WriteEPKhh>
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	8a 8b       	std	Y+18, r24	; 0x12
     a18:	9b 8b       	std	Y+19, r25	; 0x13
			int_result=spi->Read(read_bytes,2);
     a1a:	42 e0       	ldi	r20, 0x02	; 2
     a1c:	b8 01       	movw	r22, r16
     a1e:	88 85       	ldd	r24, Y+8	; 0x08
     a20:	99 85       	ldd	r25, Y+9	; 0x09
     a22:	0e 94 cd 08 	call	0x119a	; 0x119a <_ZN13SPI_Syn_Class4ReadEPhh>
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	8a 8b       	std	Y+18, r24	; 0x12
     a2a:	9b 8b       	std	Y+19, r25	; 0x13
		//	Make_Three_Bytes(private_index,0);
			
		//	int_result=spi->TransferData(write_bytes,3,read_bytes,3);
			register_value=read_bytes[0]*256+read_bytes[1];
     a2c:	8d 85       	ldd	r24, Y+13	; 0x0d
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	98 2f       	mov	r25, r24
     a32:	88 27       	eor	r24, r24
     a34:	2e 85       	ldd	r18, Y+14	; 0x0e
     a36:	82 0f       	add	r24, r18
     a38:	91 1d       	adc	r25, r1
     a3a:	8c 8b       	std	Y+20, r24	; 0x14
     a3c:	9d 8b       	std	Y+21, r25	; 0x15
			spi->SetCS(true);
     a3e:	61 e0       	ldi	r22, 0x01	; 1
     a40:	88 85       	ldd	r24, Y+8	; 0x08
     a42:	99 85       	ldd	r25, Y+9	; 0x09
     a44:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <_ZN13SPI_Syn_Class5SetCSEb>
}
uint16_t lmx2694_Handler::Read_Single_Register(uint8_t index){
	Set_MUXOUT_READBACK(false);
	register_value=0;
	uint16_t  last_value=0xff;
	while((register_value==0)|(register_value==0xffff)){
     a48:	8c 89       	ldd	r24, Y+20	; 0x14
     a4a:	9d 89       	ldd	r25, Y+21	; 0x15
     a4c:	9c 01       	movw	r18, r24
     a4e:	21 50       	subi	r18, 0x01	; 1
     a50:	31 09       	sbc	r19, r1
     a52:	2e 3f       	cpi	r18, 0xFE	; 254
     a54:	3f 4f       	sbci	r19, 0xFF	; 255
     a56:	68 f6       	brcc	.-102    	; 0x9f2 <_ZN15lmx2694_Handler20Read_Single_RegisterEh+0x3c>
		//	int_result=spi->TransferData(write_bytes,3,read_bytes,3);
			register_value=read_bytes[0]*256+read_bytes[1];
			spi->SetCS(true);
	}

	read_registers[index]=register_value;
     a58:	eb 2d       	mov	r30, r11
     a5a:	f0 e0       	ldi	r31, 0x00	; 0
     a5c:	ee 0f       	add	r30, r30
     a5e:	ff 1f       	adc	r31, r31
     a60:	2c 81       	ldd	r18, Y+4	; 0x04
     a62:	3d 81       	ldd	r19, Y+5	; 0x05
     a64:	e2 0f       	add	r30, r18
     a66:	f3 1f       	adc	r31, r19
     a68:	80 83       	st	Z, r24
     a6a:	91 83       	std	Z+1, r25	; 0x01
	Set_MUXOUT_READBACK(true);
     a6c:	61 e0       	ldi	r22, 0x01	; 1
     a6e:	ce 01       	movw	r24, r28
     a70:	0e 94 bc 04 	call	0x978	; 0x978 <_ZN15lmx2694_Handler19Set_MUXOUT_READBACKEb>
	return register_value;
}
     a74:	8c 89       	ldd	r24, Y+20	; 0x14
     a76:	9d 89       	ldd	r25, Y+21	; 0x15
     a78:	df 91       	pop	r29
     a7a:	cf 91       	pop	r28
     a7c:	1f 91       	pop	r17
     a7e:	0f 91       	pop	r16
     a80:	ff 90       	pop	r15
     a82:	ef 90       	pop	r14
     a84:	df 90       	pop	r13
     a86:	cf 90       	pop	r12
     a88:	bf 90       	pop	r11
     a8a:	08 95       	ret

00000a8c <_ZN15lmx2694_Handler25Get_Channel_Divider_ValueEb>:
	else
	{
		return	(uint8_t)((write_registers[45]>>11)&(0x03));
	}
}
int lmx2694_Handler::Get_Channel_Divider_Value(bool mbr){
     a8c:	cf 93       	push	r28
     a8e:	df 93       	push	r29
     a90:	ec 01       	movw	r28, r24
	if (mbr)
     a92:	66 23       	and	r22, r22
     a94:	79 f0       	breq	.+30     	; 0xab4 <_ZN15lmx2694_Handler25Get_Channel_Divider_ValueEb+0x28>
	{
		channel_index=((Read_Single_Register(75))>>6)&0x1f;
     a96:	6b e4       	ldi	r22, 0x4B	; 75
     a98:	0e 94 db 04 	call	0x9b6	; 0x9b6 <_ZN15lmx2694_Handler20Read_Single_RegisterEh>
     a9c:	00 24       	eor	r0, r0
     a9e:	88 0f       	add	r24, r24
     aa0:	99 1f       	adc	r25, r25
     aa2:	00 1c       	adc	r0, r0
     aa4:	88 0f       	add	r24, r24
     aa6:	99 1f       	adc	r25, r25
     aa8:	00 1c       	adc	r0, r0
     aaa:	89 2f       	mov	r24, r25
     aac:	90 2d       	mov	r25, r0
     aae:	8f 71       	andi	r24, 0x1F	; 31
     ab0:	8f 8b       	std	Y+23, r24	; 0x17
     ab2:	11 c0       	rjmp	.+34     	; 0xad6 <_ZN15lmx2694_Handler25Get_Channel_Divider_ValueEb+0x4a>
	} 
	else
	{
		channel_index=((write_registers[75])>>6)&0x1f;
     ab4:	ee 81       	ldd	r30, Y+6	; 0x06
     ab6:	ff 81       	ldd	r31, Y+7	; 0x07
     ab8:	ea 56       	subi	r30, 0x6A	; 106
     aba:	ff 4f       	sbci	r31, 0xFF	; 255
     abc:	80 81       	ld	r24, Z
     abe:	91 81       	ldd	r25, Z+1	; 0x01
     ac0:	00 24       	eor	r0, r0
     ac2:	88 0f       	add	r24, r24
     ac4:	99 1f       	adc	r25, r25
     ac6:	00 1c       	adc	r0, r0
     ac8:	88 0f       	add	r24, r24
     aca:	99 1f       	adc	r25, r25
     acc:	00 1c       	adc	r0, r0
     ace:	89 2f       	mov	r24, r25
     ad0:	90 2d       	mov	r25, r0
     ad2:	8f 71       	andi	r24, 0x1F	; 31
     ad4:	8f 8b       	std	Y+23, r24	; 0x17
	}
	return channel_divider_values[channel_index];
     ad6:	ef 89       	ldd	r30, Y+23	; 0x17
     ad8:	f0 e0       	ldi	r31, 0x00	; 0
     ada:	ee 0f       	add	r30, r30
     adc:	ff 1f       	adc	r31, r31
     ade:	e8 5d       	subi	r30, 0xD8	; 216
     ae0:	ff 4b       	sbci	r31, 0xBF	; 191
}
     ae2:	80 81       	ld	r24, Z
     ae4:	91 81       	ldd	r25, Z+1	; 0x01
     ae6:	df 91       	pop	r29
     ae8:	cf 91       	pop	r28
     aea:	08 95       	ret

00000aec <_ZN15lmx2694_Handler8IsLockedEv>:
	
	register_value=(register_value&(0xfff8))|(uint16_t)mash_order;
	int_result=Write_Single_Register(44,register_value);
	return int_result;
}
bool lmx2694_Handler::IsLocked(void){
     aec:	cf 92       	push	r12
     aee:	df 92       	push	r13
     af0:	ef 92       	push	r14
     af2:	ff 92       	push	r15
     af4:	cf 93       	push	r28
     af6:	df 93       	push	r29
     af8:	ec 01       	movw	r28, r24
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTC_get_pin_level(const uint8_t pin)
{
	return VPORTC.IN & (1 << pin);
     afa:	8a b1       	in	r24, 0x0a	; 10
	
	is_locked=PC1_get_level();
     afc:	91 e0       	ldi	r25, 0x01	; 1
     afe:	81 fb       	bst	r24, 1
     b00:	22 27       	eor	r18, r18
     b02:	20 f9       	bld	r18, 0
     b04:	30 e0       	ldi	r19, 0x00	; 0
     b06:	81 ff       	sbrs	r24, 1
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	99 8b       	std	Y+17, r25	; 0x11
	if (is_locked)
     b0c:	23 2b       	or	r18, r19
     b0e:	79 f4       	brne	.+30     	; 0xb2e <_ZN15lmx2694_Handler8IsLockedEv+0x42>
     b10:	80 e6       	ldi	r24, 0x60	; 96
     b12:	9a ee       	ldi	r25, 0xEA	; 234
     b14:	01 97       	sbiw	r24, 0x01	; 1
     b16:	f1 f7       	brne	.-4      	; 0xb14 <_ZN15lmx2694_Handler8IsLockedEv+0x28>
     b18:	8a b1       	in	r24, 0x0a	; 10
	{
	} 
	else
	{
		_delay_ms(10);
		is_locked=PC1_get_level();
     b1a:	91 e0       	ldi	r25, 0x01	; 1
     b1c:	81 fb       	bst	r24, 1
     b1e:	44 27       	eor	r20, r20
     b20:	40 f9       	bld	r20, 0
     b22:	50 e0       	ldi	r21, 0x00	; 0
     b24:	81 ff       	sbrs	r24, 1
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	99 8b       	std	Y+17, r25	; 0x11
	}
	
	if (is_locked)
     b2a:	45 2b       	or	r20, r21
     b2c:	59 f1       	breq	.+86     	; 0xb84 <_ZN15lmx2694_Handler8IsLockedEv+0x98>
	return is_locked;
}
uint8_t lmx2694_Handler::Get_OUT_MUX(uint8_t ov){
	if (ov==2)
	{
		return	(uint8_t)((write_registers[46])&(0x03));
     b2e:	ee 81       	ldd	r30, Y+6	; 0x06
     b30:	ff 81       	ldd	r31, Y+7	; 0x07
     b32:	e4 5a       	subi	r30, 0xA4	; 164
     b34:	ff 4f       	sbci	r31, 0xFF	; 255
		is_locked=PC1_get_level();
	}
	
	if (is_locked)
	{
		if (Get_OUT_MUX(2)>0)
     b36:	80 81       	ld	r24, Z
     b38:	83 70       	andi	r24, 0x03	; 3
     b3a:	49 f0       	breq	.+18     	; 0xb4e <_ZN15lmx2694_Handler8IsLockedEv+0x62>
		{
			current_frequency=Calculate_Current_Frequency(false)/1;
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	ce 01       	movw	r24, r28
     b40:	0e 94 b3 01 	call	0x366	; 0x366 <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb>
     b44:	68 83       	st	Y, r22
     b46:	79 83       	std	Y+1, r23	; 0x01
     b48:	8a 83       	std	Y+2, r24	; 0x02
     b4a:	9b 83       	std	Y+3, r25	; 0x03
     b4c:	1b c0       	rjmp	.+54     	; 0xb84 <_ZN15lmx2694_Handler8IsLockedEv+0x98>
		} 
		else
		{
			channel_divider=Get_Channel_Divider_Value(false);
     b4e:	60 e0       	ldi	r22, 0x00	; 0
     b50:	ce 01       	movw	r24, r28
     b52:	0e 94 46 05 	call	0xa8c	; 0xa8c <_ZN15lmx2694_Handler25Get_Channel_Divider_ValueEb>
     b56:	89 8f       	std	Y+25, r24	; 0x19
			current_frequency=Calculate_Current_Frequency(false)/channel_divider;
     b58:	60 e0       	ldi	r22, 0x00	; 0
     b5a:	ce 01       	movw	r24, r28
     b5c:	0e 94 b3 01 	call	0x366	; 0x366 <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb>
     b60:	6b 01       	movw	r12, r22
     b62:	7c 01       	movw	r14, r24
     b64:	69 8d       	ldd	r22, Y+25	; 0x19
     b66:	70 e0       	ldi	r23, 0x00	; 0
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__floatsisf>
     b70:	9b 01       	movw	r18, r22
     b72:	ac 01       	movw	r20, r24
     b74:	c7 01       	movw	r24, r14
     b76:	b6 01       	movw	r22, r12
     b78:	0e 94 50 09 	call	0x12a0	; 0x12a0 <__divsf3>
     b7c:	68 83       	st	Y, r22
     b7e:	79 83       	std	Y+1, r23	; 0x01
     b80:	8a 83       	std	Y+2, r24	; 0x02
     b82:	9b 83       	std	Y+3, r25	; 0x03
		is_locked=((Read_Single_Register(0x6e)>>9)&0x02);
#endif
		
	}
	return is_locked;
}
     b84:	89 89       	ldd	r24, Y+17	; 0x11
     b86:	df 91       	pop	r29
     b88:	cf 91       	pop	r28
     b8a:	ff 90       	pop	r15
     b8c:	ef 90       	pop	r14
     b8e:	df 90       	pop	r13
     b90:	cf 90       	pop	r12
     b92:	08 95       	ret

00000b94 <_ZN15lmx2694_Handler4InitEv>:
}

lmx2694_Handler::~lmx2694_Handler() {
	// TODO Auto-generated destructor stub
}
bool lmx2694_Handler::Init(){
     b94:	cf 93       	push	r28
     b96:	df 93       	push	r29
     b98:	ec 01       	movw	r28, r24
	spi=&staticSPI;
     b9a:	8e ef       	ldi	r24, 0xFE	; 254
     b9c:	92 e4       	ldi	r25, 0x42	; 66
     b9e:	88 87       	std	Y+8, r24	; 0x08
     ba0:	99 87       	std	Y+9, r25	; 0x09
	spi->Init();
     ba2:	0e 94 b8 08 	call	0x1170	; 0x1170 <_ZN13SPI_Syn_Class4InitEv>
	spi->SetCS(true);
     ba6:	61 e0       	ldi	r22, 0x01	; 1
     ba8:	88 85       	ldd	r24, Y+8	; 0x08
     baa:	99 85       	ldd	r25, Y+9	; 0x09
     bac:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <_ZN13SPI_Syn_Class5SetCSEb>
	Power_Down();
     bb0:	ce 01       	movw	r24, r28
     bb2:	0e 94 2c 03 	call	0x658	; 0x658 <_ZN15lmx2694_Handler10Power_DownEv>
	Program_Reset();
     bb6:	ce 01       	movw	r24, r28
     bb8:	0e 94 55 03 	call	0x6aa	; 0x6aa <_ZN15lmx2694_Handler13Program_ResetEv>
	Initiate_Registers();
     bbc:	ce 01       	movw	r24, r28
     bbe:	0e 94 86 04 	call	0x90c	; 0x90c <_ZN15lmx2694_Handler18Initiate_RegistersEv>
     bc2:	80 e6       	ldi	r24, 0x60	; 96
     bc4:	9a ee       	ldi	r25, 0xEA	; 234
     bc6:	01 97       	sbiw	r24, 0x01	; 1
     bc8:	f1 f7       	brne	.-4      	; 0xbc6 <_ZN15lmx2694_Handler4InitEv+0x32>
	_delay_ms(10);
	
	Toggle_FCAL_EN();
     bca:	ce 01       	movw	r24, r28
     bcc:	0e 94 74 04 	call	0x8e8	; 0x8e8 <_ZN15lmx2694_Handler14Toggle_FCAL_ENEv>
     bd0:	88 ee       	ldi	r24, 0xE8	; 232
     bd2:	93 e0       	ldi	r25, 0x03	; 3
     bd4:	28 e5       	ldi	r18, 0x58	; 88
     bd6:	32 e0       	ldi	r19, 0x02	; 2
     bd8:	f9 01       	movw	r30, r18
     bda:	31 97       	sbiw	r30, 0x01	; 1
     bdc:	f1 f7       	brne	.-4      	; 0xbda <_ZN15lmx2694_Handler4InitEv+0x46>
     bde:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     be0:	d9 f7       	brne	.-10     	; 0xbd8 <_ZN15lmx2694_Handler4InitEv+0x44>
	//Set_MASH_ORDER(1);
#if ONLY_LOCK_SIGNAL
	_delay_ms(100);
	return IsLocked();
     be2:	ce 01       	movw	r24, r28
     be4:	0e 94 76 05 	call	0xaec	; 0xaec <_ZN15lmx2694_Handler8IsLockedEv>
#endif




}
     be8:	df 91       	pop	r29
     bea:	cf 91       	pop	r28
     bec:	08 95       	ret

00000bee <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEv>:
	{
	}
	
	return write_registers[37];
}
void lmx2694_Handler::Program_PFD_DLY_SEL(void){
     bee:	cf 92       	push	r12
     bf0:	df 92       	push	r13
     bf2:	ef 92       	push	r14
     bf4:	ff 92       	push	r15
     bf6:	cf 93       	push	r28
     bf8:	df 93       	push	r29
     bfa:	ec 01       	movw	r28, r24
	if (target_frequency>MIN_VCO_FREQUENCY)
     bfc:	ca a4       	ldd	r12, Y+42	; 0x2a
     bfe:	db a4       	ldd	r13, Y+43	; 0x2b
     c00:	ec a4       	ldd	r14, Y+44	; 0x2c
     c02:	fd a4       	ldd	r15, Y+45	; 0x2d
     c04:	20 e0       	ldi	r18, 0x00	; 0
     c06:	30 ef       	ldi	r19, 0xF0	; 240
     c08:	4b ee       	ldi	r20, 0xEB	; 235
     c0a:	55 e4       	ldi	r21, 0x45	; 69
     c0c:	c7 01       	movw	r24, r14
     c0e:	b6 01       	movw	r22, r12
     c10:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <__gesf2>
     c14:	18 16       	cp	r1, r24
     c16:	2c f4       	brge	.+10     	; 0xc22 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEv+0x34>
	{
		vco_frequency=target_frequency;
     c18:	ce a6       	std	Y+46, r12	; 0x2e
     c1a:	df a6       	std	Y+47, r13	; 0x2f
     c1c:	e8 aa       	std	Y+48, r14	; 0x30
     c1e:	f9 aa       	std	Y+49, r15	; 0x31
     c20:	12 c0       	rjmp	.+36     	; 0xc46 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEv+0x58>
	} 
	else
	{
		vco_frequency=target_frequency*Get_Channel_Divider_Value(false);
     c22:	60 e0       	ldi	r22, 0x00	; 0
     c24:	ce 01       	movw	r24, r28
     c26:	0e 94 46 05 	call	0xa8c	; 0xa8c <_ZN15lmx2694_Handler25Get_Channel_Divider_ValueEb>
     c2a:	bc 01       	movw	r22, r24
     c2c:	99 0f       	add	r25, r25
     c2e:	88 0b       	sbc	r24, r24
     c30:	99 0b       	sbc	r25, r25
     c32:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__floatsisf>
     c36:	a7 01       	movw	r20, r14
     c38:	96 01       	movw	r18, r12
     c3a:	0e 94 00 0b 	call	0x1600	; 0x1600 <__mulsf3>
     c3e:	6e a7       	std	Y+46, r22	; 0x2e
     c40:	7f a7       	std	Y+47, r23	; 0x2f
     c42:	88 ab       	std	Y+48, r24	; 0x30
     c44:	99 ab       	std	Y+49, r25	; 0x31
	}
	Program_PFD_DLY_SEL(vco_frequency);
     c46:	4e a5       	ldd	r20, Y+46	; 0x2e
     c48:	5f a5       	ldd	r21, Y+47	; 0x2f
     c4a:	68 a9       	ldd	r22, Y+48	; 0x30
     c4c:	79 a9       	ldd	r23, Y+49	; 0x31
     c4e:	ce 01       	movw	r24, r28
     c50:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf>
}
     c54:	df 91       	pop	r29
     c56:	cf 91       	pop	r28
     c58:	ff 90       	pop	r15
     c5a:	ef 90       	pop	r14
     c5c:	df 90       	pop	r13
     c5e:	cf 90       	pop	r12
     c60:	08 95       	ret

00000c62 <_ZN15lmx2694_Handler24Write_Division_RegistersEv>:
		
	}
	return fraction;

}
void  lmx2694_Handler::Write_Division_Registers(void){
     c62:	cf 93       	push	r28
     c64:	df 93       	push	r29
     c66:	ec 01       	movw	r28, r24
	Write_Single_Register(43,(uint16_t)(numerator&0xffff));
     c68:	4e 8d       	ldd	r20, Y+30	; 0x1e
     c6a:	5f 8d       	ldd	r21, Y+31	; 0x1f
     c6c:	6b e2       	ldi	r22, 0x2B	; 43
     c6e:	0e 94 a6 03 	call	0x74c	; 0x74c <_ZN15lmx2694_Handler21Write_Single_RegisterEhj>
	Write_Single_Register(42,(uint16_t)(numerator>>16));
     c72:	4e 8d       	ldd	r20, Y+30	; 0x1e
     c74:	5f 8d       	ldd	r21, Y+31	; 0x1f
     c76:	68 a1       	ldd	r22, Y+32	; 0x20
     c78:	79 a1       	ldd	r23, Y+33	; 0x21
     c7a:	ab 01       	movw	r20, r22
     c7c:	66 27       	eor	r22, r22
     c7e:	77 27       	eor	r23, r23
     c80:	6a e2       	ldi	r22, 0x2A	; 42
     c82:	ce 01       	movw	r24, r28
     c84:	0e 94 a6 03 	call	0x74c	; 0x74c <_ZN15lmx2694_Handler21Write_Single_RegisterEhj>
	Write_Single_Register(39,(uint16_t)(denominator&0xffff));
     c88:	4a a1       	ldd	r20, Y+34	; 0x22
     c8a:	5b a1       	ldd	r21, Y+35	; 0x23
     c8c:	67 e2       	ldi	r22, 0x27	; 39
     c8e:	ce 01       	movw	r24, r28
     c90:	0e 94 a6 03 	call	0x74c	; 0x74c <_ZN15lmx2694_Handler21Write_Single_RegisterEhj>
	Write_Single_Register(38,(uint16_t)(denominator>>16));
     c94:	4a a1       	ldd	r20, Y+34	; 0x22
     c96:	5b a1       	ldd	r21, Y+35	; 0x23
     c98:	6c a1       	ldd	r22, Y+36	; 0x24
     c9a:	7d a1       	ldd	r23, Y+37	; 0x25
     c9c:	ab 01       	movw	r20, r22
     c9e:	66 27       	eor	r22, r22
     ca0:	77 27       	eor	r23, r23
     ca2:	66 e2       	ldi	r22, 0x26	; 38
     ca4:	ce 01       	movw	r24, r28
     ca6:	0e 94 a6 03 	call	0x74c	; 0x74c <_ZN15lmx2694_Handler21Write_Single_RegisterEhj>
	Program_PFD_DLY_SEL();
     caa:	ce 01       	movw	r24, r28
     cac:	0e 94 f7 05 	call	0xbee	; 0xbee <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEv>
	Write_Single_Register(36,(uint16_t)(N_divider&0xffff));
     cb0:	4a 8d       	ldd	r20, Y+26	; 0x1a
     cb2:	5b 8d       	ldd	r21, Y+27	; 0x1b
     cb4:	64 e2       	ldi	r22, 0x24	; 36
     cb6:	ce 01       	movw	r24, r28
     cb8:	0e 94 a6 03 	call	0x74c	; 0x74c <_ZN15lmx2694_Handler21Write_Single_RegisterEhj>
	Write_Single_Register(34,(uint16_t)(N_divider>>16));
     cbc:	4a 8d       	ldd	r20, Y+26	; 0x1a
     cbe:	5b 8d       	ldd	r21, Y+27	; 0x1b
     cc0:	6c 8d       	ldd	r22, Y+28	; 0x1c
     cc2:	7d 8d       	ldd	r23, Y+29	; 0x1d
     cc4:	ab 01       	movw	r20, r22
     cc6:	66 27       	eor	r22, r22
     cc8:	77 27       	eor	r23, r23
     cca:	62 e2       	ldi	r22, 0x22	; 34
     ccc:	ce 01       	movw	r24, r28
     cce:	0e 94 a6 03 	call	0x74c	; 0x74c <_ZN15lmx2694_Handler21Write_Single_RegisterEhj>
	

}
     cd2:	df 91       	pop	r29
     cd4:	cf 91       	pop	r28
     cd6:	08 95       	ret

00000cd8 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf>:
	return GCD(a, b % a);
	else
	return GCD(b, a % b);
}

float lmx2694_Handler::Set_Target_Frequency(float tf){
     cd8:	cf 92       	push	r12
     cda:	df 92       	push	r13
     cdc:	ef 92       	push	r14
     cde:	ff 92       	push	r15
     ce0:	0f 93       	push	r16
     ce2:	1f 93       	push	r17
     ce4:	cf 93       	push	r28
     ce6:	df 93       	push	r29
     ce8:	ec 01       	movw	r28, r24
     cea:	6a 01       	movw	r12, r20
     cec:	7b 01       	movw	r14, r22
	if (tf>MAX_VCO_FREQUENCY)
     cee:	20 e0       	ldi	r18, 0x00	; 0
     cf0:	30 ef       	ldi	r19, 0xF0	; 240
     cf2:	4b e6       	ldi	r20, 0x6B	; 107
     cf4:	56 e4       	ldi	r21, 0x46	; 70
     cf6:	c7 01       	movw	r24, r14
     cf8:	b6 01       	movw	r22, r12
     cfa:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <__gesf2>
     cfe:	18 16       	cp	r1, r24
     d00:	4c f4       	brge	.+18     	; 0xd14 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x3c>
	{
		target_frequency=MAX_VCO_FREQUENCY;
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	90 ef       	ldi	r25, 0xF0	; 240
     d06:	ab e6       	ldi	r26, 0x6B	; 107
     d08:	b6 e4       	ldi	r27, 0x46	; 70
     d0a:	8a a7       	std	Y+42, r24	; 0x2a
     d0c:	9b a7       	std	Y+43, r25	; 0x2b
     d0e:	ac a7       	std	Y+44, r26	; 0x2c
     d10:	bd a7       	std	Y+45, r27	; 0x2d
     d12:	a7 c0       	rjmp	.+334    	; 0xe62 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x18a>
	} 
	else
	{
		if (tf>MIN_PLL_FREQUENCY)
     d14:	20 e0       	ldi	r18, 0x00	; 0
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	48 ec       	ldi	r20, 0xC8	; 200
     d1a:	53 e4       	ldi	r21, 0x43	; 67
     d1c:	c7 01       	movw	r24, r14
     d1e:	b6 01       	movw	r22, r12
     d20:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <__gesf2>
     d24:	18 16       	cp	r1, r24
     d26:	0c f0       	brlt	.+2      	; 0xd2a <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x52>
     d28:	9c c0       	rjmp	.+312    	; 0xe62 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x18a>
		{
			target_frequency=tf;
     d2a:	ca a6       	std	Y+42, r12	; 0x2a
     d2c:	db a6       	std	Y+43, r13	; 0x2b
     d2e:	ec a6       	std	Y+44, r14	; 0x2c
     d30:	fd a6       	std	Y+45, r15	; 0x2d
			
			
			if (tf>MIN_VCO_FREQUENCY)
     d32:	20 e0       	ldi	r18, 0x00	; 0
     d34:	30 ef       	ldi	r19, 0xF0	; 240
     d36:	4b ee       	ldi	r20, 0xEB	; 235
     d38:	55 e4       	ldi	r21, 0x45	; 69
     d3a:	c7 01       	movw	r24, r14
     d3c:	b6 01       	movw	r22, r12
     d3e:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <__gesf2>
     d42:	18 16       	cp	r1, r24
     d44:	d4 f4       	brge	.+52     	; 0xd7a <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0xa2>
			{
				if (current_frequency>MIN_VCO_FREQUENCY)
     d46:	20 e0       	ldi	r18, 0x00	; 0
     d48:	30 ef       	ldi	r19, 0xF0	; 240
     d4a:	4b ee       	ldi	r20, 0xEB	; 235
     d4c:	55 e4       	ldi	r21, 0x45	; 69
     d4e:	68 81       	ld	r22, Y
     d50:	79 81       	ldd	r23, Y+1	; 0x01
     d52:	8a 81       	ldd	r24, Y+2	; 0x02
     d54:	9b 81       	ldd	r25, Y+3	; 0x03
     d56:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <__gesf2>
     d5a:	18 16       	cp	r1, r24
     d5c:	5c f0       	brlt	.+22     	; 0xd74 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x9c>
				{
					
				} 
				else
				{
					Write_Single_Register(46,write_registers[46]|OUT_MUX_VCO);
     d5e:	ee 81       	ldd	r30, Y+6	; 0x06
     d60:	ff 81       	ldd	r31, Y+7	; 0x07
     d62:	e4 5a       	subi	r30, 0xA4	; 164
     d64:	ff 4f       	sbci	r31, 0xFF	; 255
     d66:	40 81       	ld	r20, Z
     d68:	51 81       	ldd	r21, Z+1	; 0x01
     d6a:	41 60       	ori	r20, 0x01	; 1
     d6c:	6e e2       	ldi	r22, 0x2E	; 46
     d6e:	ce 01       	movw	r24, r28
     d70:	0e 94 a6 03 	call	0x74c	; 0x74c <_ZN15lmx2694_Handler21Write_Single_RegisterEhj>
				}
				channel_divider=1;
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	89 8f       	std	Y+25, r24	; 0x19
     d78:	3f c0       	rjmp	.+126    	; 0xdf8 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x120>
					
					
			}
			else
			{
				if (current_frequency<MIN_VCO_FREQUENCY)
     d7a:	20 e0       	ldi	r18, 0x00	; 0
     d7c:	30 ef       	ldi	r19, 0xF0	; 240
     d7e:	4b ee       	ldi	r20, 0xEB	; 235
     d80:	55 e4       	ldi	r21, 0x45	; 69
     d82:	68 81       	ld	r22, Y
     d84:	79 81       	ldd	r23, Y+1	; 0x01
     d86:	8a 81       	ldd	r24, Y+2	; 0x02
     d88:	9b 81       	ldd	r25, Y+3	; 0x03
     d8a:	0e 94 4b 09 	call	0x1296	; 0x1296 <__cmpsf2>
     d8e:	88 23       	and	r24, r24
     d90:	5c f0       	brlt	.+22     	; 0xda8 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0xd0>
				{
				} 
				else
				{
					Write_Single_Register(46,write_registers[46]&(~((uint16_t)0x03)));
     d92:	ee 81       	ldd	r30, Y+6	; 0x06
     d94:	ff 81       	ldd	r31, Y+7	; 0x07
     d96:	e4 5a       	subi	r30, 0xA4	; 164
     d98:	ff 4f       	sbci	r31, 0xFF	; 255
     d9a:	40 81       	ld	r20, Z
     d9c:	51 81       	ldd	r21, Z+1	; 0x01
     d9e:	4c 7f       	andi	r20, 0xFC	; 252
     da0:	6e e2       	ldi	r22, 0x2E	; 46
     da2:	ce 01       	movw	r24, r28
     da4:	0e 94 a6 03 	call	0x74c	; 0x74c <_ZN15lmx2694_Handler21Write_Single_RegisterEhj>
				}
				register_value=write_registers[75]&(~((uint16_t)0x07c0));
     da8:	ee 81       	ldd	r30, Y+6	; 0x06
     daa:	ff 81       	ldd	r31, Y+7	; 0x07
     dac:	ea 56       	subi	r30, 0x6A	; 106
     dae:	ff 4f       	sbci	r31, 0xFF	; 255
     db0:	00 81       	ld	r16, Z
     db2:	11 81       	ldd	r17, Z+1	; 0x01
     db4:	0f 73       	andi	r16, 0x3F	; 63
     db6:	18 7f       	andi	r17, 0xF8	; 248
     db8:	0c 8b       	std	Y+20, r16	; 0x14
     dba:	1d 8b       	std	Y+21, r17	; 0x15
				Write_Single_Register(75,register_value|(((uint16_t)Choose_Channel_Divider_Index())<<6));
     dbc:	ce 01       	movw	r24, r28
     dbe:	0e 94 65 02 	call	0x4ca	; 0x4ca <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv>
     dc2:	20 e4       	ldi	r18, 0x40	; 64
     dc4:	82 9f       	mul	r24, r18
     dc6:	c0 01       	movw	r24, r0
     dc8:	11 24       	eor	r1, r1
     dca:	ac 01       	movw	r20, r24
     dcc:	40 2b       	or	r20, r16
     dce:	51 2b       	or	r21, r17
     dd0:	6b e4       	ldi	r22, 0x4B	; 75
     dd2:	ce 01       	movw	r24, r28
     dd4:	0e 94 a6 03 	call	0x74c	; 0x74c <_ZN15lmx2694_Handler21Write_Single_RegisterEhj>
				if (channel_divider>2)
     dd8:	89 8d       	ldd	r24, Y+25	; 0x19
     dda:	83 30       	cpi	r24, 0x03	; 3
     ddc:	38 f0       	brcs	.+14     	; 0xdec <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x114>
				{
					Write_Single_Register(31,0x43ec);
     dde:	4c ee       	ldi	r20, 0xEC	; 236
     de0:	53 e4       	ldi	r21, 0x43	; 67
     de2:	6f e1       	ldi	r22, 0x1F	; 31
     de4:	ce 01       	movw	r24, r28
     de6:	0e 94 a6 03 	call	0x74c	; 0x74c <_ZN15lmx2694_Handler21Write_Single_RegisterEhj>
     dea:	06 c0       	rjmp	.+12     	; 0xdf8 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x120>
				}else{
					Write_Single_Register(31,0x3ec);
     dec:	4c ee       	ldi	r20, 0xEC	; 236
     dee:	53 e0       	ldi	r21, 0x03	; 3
     df0:	6f e1       	ldi	r22, 0x1F	; 31
     df2:	ce 01       	movw	r24, r28
     df4:	0e 94 a6 03 	call	0x74c	; 0x74c <_ZN15lmx2694_Handler21Write_Single_RegisterEhj>
				}
				
			}
			divider=(tf*channel_divider)/(REFERENCE_FREQUENCY*2);
     df8:	69 8d       	ldd	r22, Y+25	; 0x19
     dfa:	70 e0       	ldi	r23, 0x00	; 0
     dfc:	80 e0       	ldi	r24, 0x00	; 0
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__floatsisf>
     e04:	a7 01       	movw	r20, r14
     e06:	96 01       	movw	r18, r12
     e08:	0e 94 00 0b 	call	0x1600	; 0x1600 <__mulsf3>
     e0c:	20 e0       	ldi	r18, 0x00	; 0
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	48 e4       	ldi	r20, 0x48	; 72
     e12:	53 e4       	ldi	r21, 0x43	; 67
     e14:	0e 94 50 09 	call	0x12a0	; 0x12a0 <__divsf3>
     e18:	6b 01       	movw	r12, r22
     e1a:	7c 01       	movw	r14, r24
     e1c:	6a ab       	std	Y+50, r22	; 0x32
     e1e:	7b ab       	std	Y+51, r23	; 0x33
     e20:	8c ab       	std	Y+52, r24	; 0x34
     e22:	9d ab       	std	Y+53, r25	; 0x35
			N_divider=(uint32_t)(floor(divider));
     e24:	0e 94 2e 0a 	call	0x145c	; 0x145c <floor>
     e28:	0e 94 c2 09 	call	0x1384	; 0x1384 <__fixunssfsi>
     e2c:	6a 8f       	std	Y+26, r22	; 0x1a
     e2e:	7b 8f       	std	Y+27, r23	; 0x1b
     e30:	8c 8f       	std	Y+28, r24	; 0x1c
     e32:	9d 8f       	std	Y+29, r25	; 0x1d
			fraction=divider-N_divider;
     e34:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__floatunsisf>
     e38:	9b 01       	movw	r18, r22
     e3a:	ac 01       	movw	r20, r24
     e3c:	c7 01       	movw	r24, r14
     e3e:	b6 01       	movw	r22, r12
     e40:	0e 94 de 08 	call	0x11bc	; 0x11bc <__subsf3>
     e44:	ab 01       	movw	r20, r22
     e46:	bc 01       	movw	r22, r24
     e48:	4e ab       	std	Y+54, r20	; 0x36
     e4a:	5f ab       	std	Y+55, r21	; 0x37
     e4c:	68 af       	std	Y+56, r22	; 0x38
     e4e:	79 af       	std	Y+57, r23	; 0x39
			Calculate_Fraction(fraction);
     e50:	ce 01       	movw	r24, r28
     e52:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <_ZN15lmx2694_Handler18Calculate_FractionEf>
			Write_Division_Registers();
     e56:	ce 01       	movw	r24, r28
     e58:	0e 94 31 06 	call	0xc62	; 0xc62 <_ZN15lmx2694_Handler24Write_Division_RegistersEv>
			
			Toggle_FCAL_EN();
     e5c:	ce 01       	movw	r24, r28
     e5e:	0e 94 74 04 	call	0x8e8	; 0x8e8 <_ZN15lmx2694_Handler14Toggle_FCAL_ENEv>
		{

		}
		
	}
	return fraction;
     e62:	6e a9       	ldd	r22, Y+54	; 0x36
     e64:	7f a9       	ldd	r23, Y+55	; 0x37
     e66:	88 ad       	ldd	r24, Y+56	; 0x38
     e68:	99 ad       	ldd	r25, Y+57	; 0x39

}
     e6a:	df 91       	pop	r29
     e6c:	cf 91       	pop	r28
     e6e:	1f 91       	pop	r17
     e70:	0f 91       	pop	r16
     e72:	ff 90       	pop	r15
     e74:	ef 90       	pop	r14
     e76:	df 90       	pop	r13
     e78:	cf 90       	pop	r12
     e7a:	08 95       	ret

00000e7c <_ZN15lmx2694_Handler9Self_TestEv>:
	}
	int_result=Write_Single_Register(0,register_value);
	return int_result;
}

bool lmx2694_Handler::Self_Test(){
     e7c:	3f 92       	push	r3
     e7e:	4f 92       	push	r4
     e80:	5f 92       	push	r5
     e82:	6f 92       	push	r6
     e84:	7f 92       	push	r7
     e86:	8f 92       	push	r8
     e88:	9f 92       	push	r9
     e8a:	af 92       	push	r10
     e8c:	bf 92       	push	r11
     e8e:	cf 92       	push	r12
     e90:	df 92       	push	r13
     e92:	ef 92       	push	r14
     e94:	ff 92       	push	r15
     e96:	0f 93       	push	r16
     e98:	1f 93       	push	r17
     e9a:	cf 93       	push	r28
     e9c:	df 93       	push	r29
     e9e:	8c 01       	movw	r16, r24
	error_counter=0;
     ea0:	fc 01       	movw	r30, r24
     ea2:	16 ae       	std	Z+62, r1	; 0x3e
				{
				}
			}
		
			target_frequency=direction?current_frequency+step:current_frequency-step;
			printf("current Frequency : %f \n\r", target_frequency);
     ea4:	0f 2e       	mov	r0, r31
     ea6:	fe e0       	ldi	r31, 0x0E	; 14
     ea8:	af 2e       	mov	r10, r31
     eaa:	f0 e4       	ldi	r31, 0x40	; 64
     eac:	bf 2e       	mov	r11, r31
     eae:	f0 2d       	mov	r31, r0
     eb0:	0f 2e       	mov	r0, r31
     eb2:	f0 e6       	ldi	r31, 0x60	; 96
     eb4:	8f 2e       	mov	r8, r31
     eb6:	fa ee       	ldi	r31, 0xEA	; 234
     eb8:	9f 2e       	mov	r9, r31
     eba:	f0 2d       	mov	r31, r0
			} 
			else
			{
				if ((current_frequency-step)<MIN_WOOBLING_FREQUENCY)
				{
					direction=true;
     ebc:	33 24       	eor	r3, r3
     ebe:	33 94       	inc	r3
     ec0:	c8 e5       	ldi	r28, 0x58	; 88
     ec2:	d2 e0       	ldi	r29, 0x02	; 2
     ec4:	05 c0       	rjmp	.+10     	; 0xed0 <_ZN15lmx2694_Handler9Self_TestEv+0x54>
	return int_result;
}

bool lmx2694_Handler::Self_Test(){
	error_counter=0;
	while(error_counter<0xff){
     ec6:	f8 01       	movw	r30, r16
     ec8:	86 ad       	ldd	r24, Z+62	; 0x3e
     eca:	8f 3f       	cpi	r24, 0xFF	; 255
     ecc:	09 f4       	brne	.+2      	; 0xed0 <_ZN15lmx2694_Handler9Self_TestEv+0x54>
     ece:	da c0       	rjmp	.+436    	; 0x1084 <_ZN15lmx2694_Handler9Self_TestEv+0x208>
		if (IsLocked())
     ed0:	c8 01       	movw	r24, r16
     ed2:	0e 94 76 05 	call	0xaec	; 0xaec <_ZN15lmx2694_Handler8IsLockedEv>
     ed6:	88 23       	and	r24, r24
     ed8:	09 f4       	brne	.+2      	; 0xedc <_ZN15lmx2694_Handler9Self_TestEv+0x60>
     eda:	56 c0       	rjmp	.+172    	; 0xf88 <_ZN15lmx2694_Handler9Self_TestEv+0x10c>
		{
			if (direction)
     edc:	f8 01       	movw	r30, r16
     ede:	87 ad       	ldd	r24, Z+63	; 0x3f
     ee0:	88 23       	and	r24, r24
     ee2:	b1 f0       	breq	.+44     	; 0xf10 <_ZN15lmx2694_Handler9Self_TestEv+0x94>
			{
					if ((current_frequency+step)>MAX_SENSOR_FREQUENCY)
     ee4:	22 ad       	ldd	r18, Z+58	; 0x3a
     ee6:	33 ad       	ldd	r19, Z+59	; 0x3b
     ee8:	44 ad       	ldd	r20, Z+60	; 0x3c
     eea:	55 ad       	ldd	r21, Z+61	; 0x3d
     eec:	60 81       	ld	r22, Z
     eee:	71 81       	ldd	r23, Z+1	; 0x01
     ef0:	82 81       	ldd	r24, Z+2	; 0x02
     ef2:	93 81       	ldd	r25, Z+3	; 0x03
     ef4:	0e 94 df 08 	call	0x11be	; 0x11be <__addsf3>
     ef8:	20 e0       	ldi	r18, 0x00	; 0
     efa:	30 e8       	ldi	r19, 0x80	; 128
     efc:	49 e8       	ldi	r20, 0x89	; 137
     efe:	55 e4       	ldi	r21, 0x45	; 69
     f00:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <__gesf2>
     f04:	18 16       	cp	r1, r24
     f06:	0c f0       	brlt	.+2      	; 0xf0a <_ZN15lmx2694_Handler9Self_TestEv+0x8e>
     f08:	a1 c0       	rjmp	.+322    	; 0x104c <_ZN15lmx2694_Handler9Self_TestEv+0x1d0>
					{
						direction=false;
     f0a:	f8 01       	movw	r30, r16
     f0c:	17 ae       	std	Z+63, r1	; 0x3f
     f0e:	ac c0       	rjmp	.+344    	; 0x1068 <_ZN15lmx2694_Handler9Self_TestEv+0x1ec>
					{
					}
			} 
			else
			{
				if ((current_frequency-step)<MIN_WOOBLING_FREQUENCY)
     f10:	f8 01       	movw	r30, r16
     f12:	22 ad       	ldd	r18, Z+58	; 0x3a
     f14:	33 ad       	ldd	r19, Z+59	; 0x3b
     f16:	44 ad       	ldd	r20, Z+60	; 0x3c
     f18:	55 ad       	ldd	r21, Z+61	; 0x3d
     f1a:	60 81       	ld	r22, Z
     f1c:	71 81       	ldd	r23, Z+1	; 0x01
     f1e:	82 81       	ldd	r24, Z+2	; 0x02
     f20:	93 81       	ldd	r25, Z+3	; 0x03
     f22:	0e 94 de 08 	call	0x11bc	; 0x11bc <__subsf3>
     f26:	20 e0       	ldi	r18, 0x00	; 0
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	41 e6       	ldi	r20, 0x61	; 97
     f2c:	55 e4       	ldi	r21, 0x45	; 69
     f2e:	0e 94 4b 09 	call	0x1296	; 0x1296 <__cmpsf2>
     f32:	88 23       	and	r24, r24
     f34:	0c f0       	brlt	.+2      	; 0xf38 <_ZN15lmx2694_Handler9Self_TestEv+0xbc>
     f36:	98 c0       	rjmp	.+304    	; 0x1068 <_ZN15lmx2694_Handler9Self_TestEv+0x1ec>
				{
					direction=true;
     f38:	f8 01       	movw	r30, r16
     f3a:	37 ae       	std	Z+63, r3	; 0x3f
     f3c:	87 c0       	rjmp	.+270    	; 0x104c <_ZN15lmx2694_Handler9Self_TestEv+0x1d0>
				else
				{
				}
			}
		
			target_frequency=direction?current_frequency+step:current_frequency-step;
     f3e:	43 2f       	mov	r20, r19
     f40:	52 2f       	mov	r21, r18
     f42:	68 2f       	mov	r22, r24
     f44:	79 2f       	mov	r23, r25
     f46:	f8 01       	movw	r30, r16
     f48:	42 a7       	std	Z+42, r20	; 0x2a
     f4a:	53 a7       	std	Z+43, r21	; 0x2b
     f4c:	64 a7       	std	Z+44, r22	; 0x2c
     f4e:	75 a7       	std	Z+45, r23	; 0x2d
			printf("current Frequency : %f \n\r", target_frequency);
     f50:	9f 93       	push	r25
     f52:	8f 93       	push	r24
     f54:	2f 93       	push	r18
     f56:	3f 93       	push	r19
     f58:	bf 92       	push	r11
     f5a:	af 92       	push	r10
     f5c:	0e 94 6e 12 	call	0x24dc	; 0x24dc <printf>
			Set_Target_Frequency(target_frequency);
     f60:	f8 01       	movw	r30, r16
     f62:	42 a5       	ldd	r20, Z+42	; 0x2a
     f64:	53 a5       	ldd	r21, Z+43	; 0x2b
     f66:	64 a5       	ldd	r22, Z+44	; 0x2c
     f68:	75 a5       	ldd	r23, Z+45	; 0x2d
     f6a:	c8 01       	movw	r24, r16
     f6c:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf>
			error_counter=0;
     f70:	f8 01       	movw	r30, r16
     f72:	16 ae       	std	Z+62, r1	; 0x3e
     f74:	c4 01       	movw	r24, r8
     f76:	01 97       	sbiw	r24, 0x01	; 1
     f78:	f1 f7       	brne	.-4      	; 0xf76 <_ZN15lmx2694_Handler9Self_TestEv+0xfa>
     f7a:	0f 90       	pop	r0
     f7c:	0f 90       	pop	r0
     f7e:	0f 90       	pop	r0
     f80:	0f 90       	pop	r0
     f82:	0f 90       	pop	r0
     f84:	0f 90       	pop	r0
     f86:	a4 cf       	rjmp	.-184    	; 0xed0 <_ZN15lmx2694_Handler9Self_TestEv+0x54>
			_delay_ms(10);
		} 
		else
		{
			error_counter++;
     f88:	f8 01       	movw	r30, r16
     f8a:	86 ad       	ldd	r24, Z+62	; 0x3e
     f8c:	8f 5f       	subi	r24, 0xFF	; 255
     f8e:	86 af       	std	Z+62, r24	; 0x3e
			_delay_ms(100+10*error_counter);
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	bc 01       	movw	r22, r24
     f94:	66 0f       	add	r22, r22
     f96:	77 1f       	adc	r23, r23
     f98:	88 0f       	add	r24, r24
     f9a:	99 1f       	adc	r25, r25
     f9c:	88 0f       	add	r24, r24
     f9e:	99 1f       	adc	r25, r25
     fa0:	88 0f       	add	r24, r24
     fa2:	99 1f       	adc	r25, r25
     fa4:	68 0f       	add	r22, r24
     fa6:	79 1f       	adc	r23, r25
     fa8:	6c 59       	subi	r22, 0x9C	; 156
     faa:	7f 4f       	sbci	r23, 0xFF	; 255
     fac:	07 2e       	mov	r0, r23
     fae:	00 0c       	add	r0, r0
     fb0:	88 0b       	sbc	r24, r24
     fb2:	99 0b       	sbc	r25, r25
     fb4:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__floatsisf>
     fb8:	2b 01       	movw	r4, r22
     fba:	3c 01       	movw	r6, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     fbc:	20 e0       	ldi	r18, 0x00	; 0
     fbe:	30 e8       	ldi	r19, 0x80	; 128
     fc0:	4b eb       	ldi	r20, 0xBB	; 187
     fc2:	55 e4       	ldi	r21, 0x45	; 69
     fc4:	0e 94 00 0b 	call	0x1600	; 0x1600 <__mulsf3>
     fc8:	6b 01       	movw	r12, r22
     fca:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
     fcc:	20 e0       	ldi	r18, 0x00	; 0
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	40 e8       	ldi	r20, 0x80	; 128
     fd2:	5f e3       	ldi	r21, 0x3F	; 63
     fd4:	0e 94 4b 09 	call	0x1296	; 0x1296 <__cmpsf2>
     fd8:	88 23       	and	r24, r24
     fda:	1c f1       	brlt	.+70     	; 0x1022 <_ZN15lmx2694_Handler9Self_TestEv+0x1a6>
		__ticks = 1;
	else if (__tmp > 65535)
     fdc:	20 e0       	ldi	r18, 0x00	; 0
     fde:	3f ef       	ldi	r19, 0xFF	; 255
     fe0:	4f e7       	ldi	r20, 0x7F	; 127
     fe2:	57 e4       	ldi	r21, 0x47	; 71
     fe4:	c7 01       	movw	r24, r14
     fe6:	b6 01       	movw	r22, r12
     fe8:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <__gesf2>
     fec:	18 16       	cp	r1, r24
     fee:	a4 f4       	brge	.+40     	; 0x1018 <_ZN15lmx2694_Handler9Self_TestEv+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ff0:	20 e0       	ldi	r18, 0x00	; 0
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	40 e2       	ldi	r20, 0x20	; 32
     ff6:	51 e4       	ldi	r21, 0x41	; 65
     ff8:	c3 01       	movw	r24, r6
     ffa:	b2 01       	movw	r22, r4
     ffc:	0e 94 00 0b 	call	0x1600	; 0x1600 <__mulsf3>
    1000:	0e 94 c2 09 	call	0x1384	; 0x1384 <__fixunssfsi>
		while(__ticks)
    1004:	61 15       	cp	r22, r1
    1006:	71 05       	cpc	r23, r1
    1008:	89 f0       	breq	.+34     	; 0x102c <_ZN15lmx2694_Handler9Self_TestEv+0x1b0>
    100a:	ce 01       	movw	r24, r28
    100c:	01 97       	sbiw	r24, 0x01	; 1
    100e:	f1 f7       	brne	.-4      	; 0x100c <_ZN15lmx2694_Handler9Self_TestEv+0x190>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1010:	61 50       	subi	r22, 0x01	; 1
    1012:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1014:	d1 f7       	brne	.-12     	; 0x100a <_ZN15lmx2694_Handler9Self_TestEv+0x18e>
    1016:	0a c0       	rjmp	.+20     	; 0x102c <_ZN15lmx2694_Handler9Self_TestEv+0x1b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1018:	c7 01       	movw	r24, r14
    101a:	b6 01       	movw	r22, r12
    101c:	0e 94 c2 09 	call	0x1384	; 0x1384 <__fixunssfsi>
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <_ZN15lmx2694_Handler9Self_TestEv+0x1aa>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    1022:	61 e0       	ldi	r22, 0x01	; 1
    1024:	70 e0       	ldi	r23, 0x00	; 0
    1026:	cb 01       	movw	r24, r22
    1028:	01 97       	sbiw	r24, 0x01	; 1
    102a:	f1 f7       	brne	.-4      	; 0x1028 <_ZN15lmx2694_Handler9Self_TestEv+0x1ac>
			Set_Target_Frequency(current_frequency);
    102c:	f8 01       	movw	r30, r16
    102e:	40 81       	ld	r20, Z
    1030:	51 81       	ldd	r21, Z+1	; 0x01
    1032:	62 81       	ldd	r22, Z+2	; 0x02
    1034:	73 81       	ldd	r23, Z+3	; 0x03
    1036:	c8 01       	movw	r24, r16
    1038:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf>
    103c:	88 ee       	ldi	r24, 0xE8	; 232
    103e:	93 e0       	ldi	r25, 0x03	; 3
    1040:	fe 01       	movw	r30, r28
    1042:	31 97       	sbiw	r30, 0x01	; 1
    1044:	f1 f7       	brne	.-4      	; 0x1042 <_ZN15lmx2694_Handler9Self_TestEv+0x1c6>
    1046:	01 97       	sbiw	r24, 0x01	; 1
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1048:	d9 f7       	brne	.-10     	; 0x1040 <_ZN15lmx2694_Handler9Self_TestEv+0x1c4>
    104a:	3d cf       	rjmp	.-390    	; 0xec6 <_ZN15lmx2694_Handler9Self_TestEv+0x4a>
				else
				{
				}
			}
		
			target_frequency=direction?current_frequency+step:current_frequency-step;
    104c:	f8 01       	movw	r30, r16
    104e:	22 ad       	ldd	r18, Z+58	; 0x3a
    1050:	33 ad       	ldd	r19, Z+59	; 0x3b
    1052:	44 ad       	ldd	r20, Z+60	; 0x3c
    1054:	55 ad       	ldd	r21, Z+61	; 0x3d
    1056:	60 81       	ld	r22, Z
    1058:	71 81       	ldd	r23, Z+1	; 0x01
    105a:	82 81       	ldd	r24, Z+2	; 0x02
    105c:	93 81       	ldd	r25, Z+3	; 0x03
    105e:	0e 94 df 08 	call	0x11be	; 0x11be <__addsf3>
    1062:	36 2f       	mov	r19, r22
    1064:	27 2f       	mov	r18, r23
    1066:	6b cf       	rjmp	.-298    	; 0xf3e <_ZN15lmx2694_Handler9Self_TestEv+0xc2>
    1068:	f8 01       	movw	r30, r16
    106a:	22 ad       	ldd	r18, Z+58	; 0x3a
    106c:	33 ad       	ldd	r19, Z+59	; 0x3b
    106e:	44 ad       	ldd	r20, Z+60	; 0x3c
    1070:	55 ad       	ldd	r21, Z+61	; 0x3d
    1072:	60 81       	ld	r22, Z
    1074:	71 81       	ldd	r23, Z+1	; 0x01
    1076:	82 81       	ldd	r24, Z+2	; 0x02
    1078:	93 81       	ldd	r25, Z+3	; 0x03
    107a:	0e 94 de 08 	call	0x11bc	; 0x11bc <__subsf3>
    107e:	36 2f       	mov	r19, r22
    1080:	27 2f       	mov	r18, r23
    1082:	5d cf       	rjmp	.-326    	; 0xf3e <_ZN15lmx2694_Handler9Self_TestEv+0xc2>
			Set_Target_Frequency(current_frequency);
			_delay_ms(100);
		}
	}
	return false;
}
    1084:	80 e0       	ldi	r24, 0x00	; 0
    1086:	df 91       	pop	r29
    1088:	cf 91       	pop	r28
    108a:	1f 91       	pop	r17
    108c:	0f 91       	pop	r16
    108e:	ff 90       	pop	r15
    1090:	ef 90       	pop	r14
    1092:	df 90       	pop	r13
    1094:	cf 90       	pop	r12
    1096:	bf 90       	pop	r11
    1098:	af 90       	pop	r10
    109a:	9f 90       	pop	r9
    109c:	8f 90       	pop	r8
    109e:	7f 90       	pop	r7
    10a0:	6f 90       	pop	r6
    10a2:	5f 90       	pop	r5
    10a4:	4f 90       	pop	r4
    10a6:	3f 90       	pop	r3
    10a8:	08 95       	ret

000010aa <_GLOBAL__sub_I__ZN15lmx2694_HandlerC2Ev>:


#include "string.h"
//static SPI_Async_Handler staticSPI;

static SPI_Syn_Class staticSPI;
    10aa:	8e ef       	ldi	r24, 0xFE	; 254
    10ac:	92 e4       	ldi	r25, 0x42	; 66
    10ae:	0e 94 b2 08 	call	0x1164	; 0x1164 <_ZN13SPI_Syn_ClassC1Ev>
    10b2:	08 95       	ret

000010b4 <_GLOBAL__sub_D__ZN15lmx2694_HandlerC2Ev>:
    10b4:	8e ef       	ldi	r24, 0xFE	; 254
    10b6:	92 e4       	ldi	r25, 0x42	; 66
    10b8:	0e 94 b7 08 	call	0x116e	; 0x116e <_ZN13SPI_Syn_ClassD1Ev>
    10bc:	08 95       	ret

000010be <_Z10RTC_enablev>:
 static lmx2694_Handler lmx;

void RTC_enable(void)
{
	// Wait for RTC CTRLA to be unsynchronized
	while (RTC.STATUS & RTC_CTRLABUSY_bm) {
    10be:	e0 e4       	ldi	r30, 0x40	; 64
    10c0:	f1 e0       	ldi	r31, 0x01	; 1
    10c2:	81 81       	ldd	r24, Z+1	; 0x01
    10c4:	80 fd       	sbrc	r24, 0
    10c6:	fd cf       	rjmp	.-6      	; 0x10c2 <_Z10RTC_enablev+0x4>
	}

	// Enable RTC
	RTC.CTRLA |= RTC_RTCEN_bm;
    10c8:	e0 e4       	ldi	r30, 0x40	; 64
    10ca:	f1 e0       	ldi	r31, 0x01	; 1
    10cc:	80 81       	ld	r24, Z
    10ce:	81 60       	ori	r24, 0x01	; 1
    10d0:	80 83       	st	Z, r24
    10d2:	08 95       	ret

000010d4 <__vector_5>:
}

ISR(RTC_CNT_vect)
{
    10d4:	1f 92       	push	r1
    10d6:	0f 92       	push	r0
    10d8:	0f b6       	in	r0, 0x3f	; 63
    10da:	0f 92       	push	r0
    10dc:	11 24       	eor	r1, r1
    10de:	8f 93       	push	r24
 *
 * \param[in] pin       The pin number within port
 */
static inline void PORTB_toggle_pin_level(const uint8_t pin)
{
	VPORTB.IN |= 1 << pin;
    10e0:	33 9a       	sbi	0x06, 3	; 6
	/* Toggle LED0 */
	LED0_toggle_level();

	/* Overflow interrupt flag has to be cleared manually */
	RTC.INTFLAGS = RTC_OVF_bm;
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x7e0143>
}
    10e8:	8f 91       	pop	r24
    10ea:	0f 90       	pop	r0
    10ec:	0f be       	out	0x3f, r0	; 63
    10ee:	0f 90       	pop	r0
    10f0:	1f 90       	pop	r1
    10f2:	18 95       	reti

000010f4 <main>:

int main(void)
{
		atmel_start_init();
    10f4:	0e 94 91 0b 	call	0x1722	; 0x1722 <atmel_start_init>
		RTC_enable();
    10f8:	0e 94 5f 08 	call	0x10be	; 0x10be <_Z10RTC_enablev>
	ENABLE_INTERRUPTS();
    10fc:	78 94       	sei
	printf("hello\n\r");
    10fe:	8a e2       	ldi	r24, 0x2A	; 42
    1100:	91 e4       	ldi	r25, 0x41	; 65
    1102:	9f 93       	push	r25
    1104:	8f 93       	push	r24
    1106:	0e 94 6e 12 	call	0x24dc	; 0x24dc <printf>
    110a:	0f 90       	pop	r0
    110c:	0f 90       	pop	r0
    110e:	c8 e5       	ldi	r28, 0x58	; 88
    1110:	d2 e0       	ldi	r29, 0x02	; 2
    /* Replace with your application code */
    while (1) 
    {
		while(!lmx.Init()){
    1112:	83 e0       	ldi	r24, 0x03	; 3
    1114:	93 e4       	ldi	r25, 0x43	; 67
    1116:	0e 94 ca 05 	call	0xb94	; 0xb94 <_ZN15lmx2694_Handler4InitEv>
    111a:	81 11       	cpse	r24, r1
    111c:	09 c0       	rjmp	.+18     	; 0x1130 <main+0x3c>
    111e:	88 ee       	ldi	r24, 0xE8	; 232
    1120:	93 e0       	ldi	r25, 0x03	; 3
    1122:	fe 01       	movw	r30, r28
    1124:	31 97       	sbiw	r30, 0x01	; 1
    1126:	f1 f7       	brne	.-4      	; 0x1124 <main+0x30>
    1128:	01 97       	sbiw	r24, 0x01	; 1
    112a:	d9 f7       	brne	.-10     	; 0x1122 <main+0x2e>
    112c:	33 9a       	sbi	0x06, 3	; 6
    112e:	f1 cf       	rjmp	.-30     	; 0x1112 <main+0x1e>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
    1130:	2b 9a       	sbi	0x05, 3	; 5
    1132:	c8 e5       	ldi	r28, 0x58	; 88
    1134:	d2 e0       	ldi	r29, 0x02	; 2
		LED0_set_level(true);
		//gpio_set_pin_level(LED0,true);
		/* Replace with your application code */
		while (1)
		{
			lmx.Self_Test();
    1136:	83 e0       	ldi	r24, 0x03	; 3
    1138:	93 e4       	ldi	r25, 0x43	; 67
    113a:	0e 94 3e 07 	call	0xe7c	; 0xe7c <_ZN15lmx2694_Handler9Self_TestEv>
    113e:	80 e1       	ldi	r24, 0x10	; 16
    1140:	97 e2       	ldi	r25, 0x27	; 39
    1142:	fe 01       	movw	r30, r28
    1144:	31 97       	sbiw	r30, 0x01	; 1
    1146:	f1 f7       	brne	.-4      	; 0x1144 <main+0x50>
    1148:	01 97       	sbiw	r24, 0x01	; 1
    114a:	d9 f7       	brne	.-10     	; 0x1142 <main+0x4e>
 *
 * \param[in] pin       The pin number within port
 */
static inline void PORTB_toggle_pin_level(const uint8_t pin)
{
	VPORTB.IN |= 1 << pin;
    114c:	33 9a       	sbi	0x06, 3	; 6
    114e:	f3 cf       	rjmp	.-26     	; 0x1136 <main+0x42>

00001150 <_GLOBAL__sub_I__Z10RTC_enablev>:

#include <atomic.h>
#include <util/delay.h>  
#include <clock_config.h>
#include "lmx2694Handler.h"
 static lmx2694_Handler lmx;
    1150:	83 e0       	ldi	r24, 0x03	; 3
    1152:	93 e4       	ldi	r25, 0x43	; 67
    1154:	0e 94 2b 01 	call	0x256	; 0x256 <_ZN15lmx2694_HandlerC1Ev>
    1158:	08 95       	ret

0000115a <_GLOBAL__sub_D__Z10RTC_enablev>:
    115a:	83 e0       	ldi	r24, 0x03	; 3
    115c:	93 e4       	ldi	r25, 0x43	; 67
    115e:	0e 94 52 01 	call	0x2a4	; 0x2a4 <_ZN15lmx2694_HandlerD1Ev>
    1162:	08 95       	ret

00001164 <_ZN13SPI_Syn_ClassC1Ev>:

	
	return n;
}
void SPI_Syn_Class::Disable(void){
	SPI_LMX_disable();
    1164:	80 93 43 43 	sts	0x4343, r24	; 0x804343 <ptrSPISync>
    1168:	90 93 44 43 	sts	0x4344, r25	; 0x804344 <ptrSPISync+0x1>
    116c:	08 95       	ret

0000116e <_ZN13SPI_Syn_ClassD1Ev>:
    116e:	08 95       	ret

00001170 <_ZN13SPI_Syn_Class4InitEv>:
    1170:	cf 93       	push	r28
    1172:	df 93       	push	r29
    1174:	ec 01       	movw	r28, r24
    1176:	0e 94 a7 0c 	call	0x194e	; 0x194e <SPI_LMX_enable>
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	88 83       	st	Y, r24
    117e:	df 91       	pop	r29
    1180:	cf 91       	pop	r28
    1182:	08 95       	ret

00001184 <_ZN13SPI_Syn_Class5WriteEPKhh>:
    1184:	cf 93       	push	r28
    1186:	fc 01       	movw	r30, r24
    1188:	cb 01       	movw	r24, r22
    118a:	c4 2f       	mov	r28, r20
    118c:	10 82       	st	Z, r1
    118e:	64 2f       	mov	r22, r20
    1190:	0e 94 ad 0c 	call	0x195a	; 0x195a <SPI_LMX_write_block>
    1194:	8c 2f       	mov	r24, r28
    1196:	cf 91       	pop	r28
    1198:	08 95       	ret

0000119a <_ZN13SPI_Syn_Class4ReadEPhh>:
    119a:	cf 93       	push	r28
    119c:	fc 01       	movw	r30, r24
    119e:	cb 01       	movw	r24, r22
    11a0:	c4 2f       	mov	r28, r20
    11a2:	10 82       	st	Z, r1
    11a4:	64 2f       	mov	r22, r20
    11a6:	0e 94 bd 0c 	call	0x197a	; 0x197a <SPI_LMX_read_block>
    11aa:	8c 2f       	mov	r24, r28
    11ac:	cf 91       	pop	r28
    11ae:	08 95       	ret

000011b0 <_ZN13SPI_Syn_Class5SetCSEb>:
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
    11b0:	66 23       	and	r22, r22
    11b2:	11 f0       	breq	.+4      	; 0x11b8 <_ZN13SPI_Syn_Class5SetCSEb+0x8>
		VPORTC.OUT |= (1 << pin);
    11b4:	4b 9a       	sbi	0x09, 3	; 9
    11b6:	08 95       	ret
	} else {
		VPORTC.OUT &= ~(1 << pin);
    11b8:	4b 98       	cbi	0x09, 3	; 9
    11ba:	08 95       	ret

000011bc <__subsf3>:
    11bc:	50 58       	subi	r21, 0x80	; 128

000011be <__addsf3>:
    11be:	bb 27       	eor	r27, r27
    11c0:	aa 27       	eor	r26, r26
    11c2:	0e 94 f6 08 	call	0x11ec	; 0x11ec <__addsf3x>
    11c6:	0c 94 a9 0a 	jmp	0x1552	; 0x1552 <__fp_round>
    11ca:	0e 94 9b 0a 	call	0x1536	; 0x1536 <__fp_pscA>
    11ce:	38 f0       	brcs	.+14     	; 0x11de <__addsf3+0x20>
    11d0:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__fp_pscB>
    11d4:	20 f0       	brcs	.+8      	; 0x11de <__addsf3+0x20>
    11d6:	39 f4       	brne	.+14     	; 0x11e6 <__addsf3+0x28>
    11d8:	9f 3f       	cpi	r25, 0xFF	; 255
    11da:	19 f4       	brne	.+6      	; 0x11e2 <__addsf3+0x24>
    11dc:	26 f4       	brtc	.+8      	; 0x11e6 <__addsf3+0x28>
    11de:	0c 94 98 0a 	jmp	0x1530	; 0x1530 <__fp_nan>
    11e2:	0e f4       	brtc	.+2      	; 0x11e6 <__addsf3+0x28>
    11e4:	e0 95       	com	r30
    11e6:	e7 fb       	bst	r30, 7
    11e8:	0c 94 69 0a 	jmp	0x14d2	; 0x14d2 <__fp_inf>

000011ec <__addsf3x>:
    11ec:	e9 2f       	mov	r30, r25
    11ee:	0e 94 ba 0a 	call	0x1574	; 0x1574 <__fp_split3>
    11f2:	58 f3       	brcs	.-42     	; 0x11ca <__addsf3+0xc>
    11f4:	ba 17       	cp	r27, r26
    11f6:	62 07       	cpc	r22, r18
    11f8:	73 07       	cpc	r23, r19
    11fa:	84 07       	cpc	r24, r20
    11fc:	95 07       	cpc	r25, r21
    11fe:	20 f0       	brcs	.+8      	; 0x1208 <__addsf3x+0x1c>
    1200:	79 f4       	brne	.+30     	; 0x1220 <__addsf3x+0x34>
    1202:	a6 f5       	brtc	.+104    	; 0x126c <__addsf3x+0x80>
    1204:	0c 94 f4 0a 	jmp	0x15e8	; 0x15e8 <__fp_zero>
    1208:	0e f4       	brtc	.+2      	; 0x120c <__addsf3x+0x20>
    120a:	e0 95       	com	r30
    120c:	0b 2e       	mov	r0, r27
    120e:	ba 2f       	mov	r27, r26
    1210:	a0 2d       	mov	r26, r0
    1212:	0b 01       	movw	r0, r22
    1214:	b9 01       	movw	r22, r18
    1216:	90 01       	movw	r18, r0
    1218:	0c 01       	movw	r0, r24
    121a:	ca 01       	movw	r24, r20
    121c:	a0 01       	movw	r20, r0
    121e:	11 24       	eor	r1, r1
    1220:	ff 27       	eor	r31, r31
    1222:	59 1b       	sub	r21, r25
    1224:	99 f0       	breq	.+38     	; 0x124c <__addsf3x+0x60>
    1226:	59 3f       	cpi	r21, 0xF9	; 249
    1228:	50 f4       	brcc	.+20     	; 0x123e <__addsf3x+0x52>
    122a:	50 3e       	cpi	r21, 0xE0	; 224
    122c:	68 f1       	brcs	.+90     	; 0x1288 <__addsf3x+0x9c>
    122e:	1a 16       	cp	r1, r26
    1230:	f0 40       	sbci	r31, 0x00	; 0
    1232:	a2 2f       	mov	r26, r18
    1234:	23 2f       	mov	r18, r19
    1236:	34 2f       	mov	r19, r20
    1238:	44 27       	eor	r20, r20
    123a:	58 5f       	subi	r21, 0xF8	; 248
    123c:	f3 cf       	rjmp	.-26     	; 0x1224 <__addsf3x+0x38>
    123e:	46 95       	lsr	r20
    1240:	37 95       	ror	r19
    1242:	27 95       	ror	r18
    1244:	a7 95       	ror	r26
    1246:	f0 40       	sbci	r31, 0x00	; 0
    1248:	53 95       	inc	r21
    124a:	c9 f7       	brne	.-14     	; 0x123e <__addsf3x+0x52>
    124c:	7e f4       	brtc	.+30     	; 0x126c <__addsf3x+0x80>
    124e:	1f 16       	cp	r1, r31
    1250:	ba 0b       	sbc	r27, r26
    1252:	62 0b       	sbc	r22, r18
    1254:	73 0b       	sbc	r23, r19
    1256:	84 0b       	sbc	r24, r20
    1258:	ba f0       	brmi	.+46     	; 0x1288 <__addsf3x+0x9c>
    125a:	91 50       	subi	r25, 0x01	; 1
    125c:	a1 f0       	breq	.+40     	; 0x1286 <__addsf3x+0x9a>
    125e:	ff 0f       	add	r31, r31
    1260:	bb 1f       	adc	r27, r27
    1262:	66 1f       	adc	r22, r22
    1264:	77 1f       	adc	r23, r23
    1266:	88 1f       	adc	r24, r24
    1268:	c2 f7       	brpl	.-16     	; 0x125a <__addsf3x+0x6e>
    126a:	0e c0       	rjmp	.+28     	; 0x1288 <__addsf3x+0x9c>
    126c:	ba 0f       	add	r27, r26
    126e:	62 1f       	adc	r22, r18
    1270:	73 1f       	adc	r23, r19
    1272:	84 1f       	adc	r24, r20
    1274:	48 f4       	brcc	.+18     	; 0x1288 <__addsf3x+0x9c>
    1276:	87 95       	ror	r24
    1278:	77 95       	ror	r23
    127a:	67 95       	ror	r22
    127c:	b7 95       	ror	r27
    127e:	f7 95       	ror	r31
    1280:	9e 3f       	cpi	r25, 0xFE	; 254
    1282:	08 f0       	brcs	.+2      	; 0x1286 <__addsf3x+0x9a>
    1284:	b0 cf       	rjmp	.-160    	; 0x11e6 <__addsf3+0x28>
    1286:	93 95       	inc	r25
    1288:	88 0f       	add	r24, r24
    128a:	08 f0       	brcs	.+2      	; 0x128e <__addsf3x+0xa2>
    128c:	99 27       	eor	r25, r25
    128e:	ee 0f       	add	r30, r30
    1290:	97 95       	ror	r25
    1292:	87 95       	ror	r24
    1294:	08 95       	ret

00001296 <__cmpsf2>:
    1296:	0e 94 45 0a 	call	0x148a	; 0x148a <__fp_cmp>
    129a:	08 f4       	brcc	.+2      	; 0x129e <__cmpsf2+0x8>
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	08 95       	ret

000012a0 <__divsf3>:
    12a0:	0e 94 64 09 	call	0x12c8	; 0x12c8 <__divsf3x>
    12a4:	0c 94 a9 0a 	jmp	0x1552	; 0x1552 <__fp_round>
    12a8:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__fp_pscB>
    12ac:	58 f0       	brcs	.+22     	; 0x12c4 <__divsf3+0x24>
    12ae:	0e 94 9b 0a 	call	0x1536	; 0x1536 <__fp_pscA>
    12b2:	40 f0       	brcs	.+16     	; 0x12c4 <__divsf3+0x24>
    12b4:	29 f4       	brne	.+10     	; 0x12c0 <__divsf3+0x20>
    12b6:	5f 3f       	cpi	r21, 0xFF	; 255
    12b8:	29 f0       	breq	.+10     	; 0x12c4 <__divsf3+0x24>
    12ba:	0c 94 69 0a 	jmp	0x14d2	; 0x14d2 <__fp_inf>
    12be:	51 11       	cpse	r21, r1
    12c0:	0c 94 f5 0a 	jmp	0x15ea	; 0x15ea <__fp_szero>
    12c4:	0c 94 98 0a 	jmp	0x1530	; 0x1530 <__fp_nan>

000012c8 <__divsf3x>:
    12c8:	0e 94 ba 0a 	call	0x1574	; 0x1574 <__fp_split3>
    12cc:	68 f3       	brcs	.-38     	; 0x12a8 <__divsf3+0x8>

000012ce <__divsf3_pse>:
    12ce:	99 23       	and	r25, r25
    12d0:	b1 f3       	breq	.-20     	; 0x12be <__divsf3+0x1e>
    12d2:	55 23       	and	r21, r21
    12d4:	91 f3       	breq	.-28     	; 0x12ba <__divsf3+0x1a>
    12d6:	95 1b       	sub	r25, r21
    12d8:	55 0b       	sbc	r21, r21
    12da:	bb 27       	eor	r27, r27
    12dc:	aa 27       	eor	r26, r26
    12de:	62 17       	cp	r22, r18
    12e0:	73 07       	cpc	r23, r19
    12e2:	84 07       	cpc	r24, r20
    12e4:	38 f0       	brcs	.+14     	; 0x12f4 <__divsf3_pse+0x26>
    12e6:	9f 5f       	subi	r25, 0xFF	; 255
    12e8:	5f 4f       	sbci	r21, 0xFF	; 255
    12ea:	22 0f       	add	r18, r18
    12ec:	33 1f       	adc	r19, r19
    12ee:	44 1f       	adc	r20, r20
    12f0:	aa 1f       	adc	r26, r26
    12f2:	a9 f3       	breq	.-22     	; 0x12de <__divsf3_pse+0x10>
    12f4:	35 d0       	rcall	.+106    	; 0x1360 <__divsf3_pse+0x92>
    12f6:	0e 2e       	mov	r0, r30
    12f8:	3a f0       	brmi	.+14     	; 0x1308 <__divsf3_pse+0x3a>
    12fa:	e0 e8       	ldi	r30, 0x80	; 128
    12fc:	32 d0       	rcall	.+100    	; 0x1362 <__divsf3_pse+0x94>
    12fe:	91 50       	subi	r25, 0x01	; 1
    1300:	50 40       	sbci	r21, 0x00	; 0
    1302:	e6 95       	lsr	r30
    1304:	00 1c       	adc	r0, r0
    1306:	ca f7       	brpl	.-14     	; 0x12fa <__divsf3_pse+0x2c>
    1308:	2b d0       	rcall	.+86     	; 0x1360 <__divsf3_pse+0x92>
    130a:	fe 2f       	mov	r31, r30
    130c:	29 d0       	rcall	.+82     	; 0x1360 <__divsf3_pse+0x92>
    130e:	66 0f       	add	r22, r22
    1310:	77 1f       	adc	r23, r23
    1312:	88 1f       	adc	r24, r24
    1314:	bb 1f       	adc	r27, r27
    1316:	26 17       	cp	r18, r22
    1318:	37 07       	cpc	r19, r23
    131a:	48 07       	cpc	r20, r24
    131c:	ab 07       	cpc	r26, r27
    131e:	b0 e8       	ldi	r27, 0x80	; 128
    1320:	09 f0       	breq	.+2      	; 0x1324 <__divsf3_pse+0x56>
    1322:	bb 0b       	sbc	r27, r27
    1324:	80 2d       	mov	r24, r0
    1326:	bf 01       	movw	r22, r30
    1328:	ff 27       	eor	r31, r31
    132a:	93 58       	subi	r25, 0x83	; 131
    132c:	5f 4f       	sbci	r21, 0xFF	; 255
    132e:	3a f0       	brmi	.+14     	; 0x133e <__divsf3_pse+0x70>
    1330:	9e 3f       	cpi	r25, 0xFE	; 254
    1332:	51 05       	cpc	r21, r1
    1334:	78 f0       	brcs	.+30     	; 0x1354 <__divsf3_pse+0x86>
    1336:	0c 94 69 0a 	jmp	0x14d2	; 0x14d2 <__fp_inf>
    133a:	0c 94 f5 0a 	jmp	0x15ea	; 0x15ea <__fp_szero>
    133e:	5f 3f       	cpi	r21, 0xFF	; 255
    1340:	e4 f3       	brlt	.-8      	; 0x133a <__divsf3_pse+0x6c>
    1342:	98 3e       	cpi	r25, 0xE8	; 232
    1344:	d4 f3       	brlt	.-12     	; 0x133a <__divsf3_pse+0x6c>
    1346:	86 95       	lsr	r24
    1348:	77 95       	ror	r23
    134a:	67 95       	ror	r22
    134c:	b7 95       	ror	r27
    134e:	f7 95       	ror	r31
    1350:	9f 5f       	subi	r25, 0xFF	; 255
    1352:	c9 f7       	brne	.-14     	; 0x1346 <__divsf3_pse+0x78>
    1354:	88 0f       	add	r24, r24
    1356:	91 1d       	adc	r25, r1
    1358:	96 95       	lsr	r25
    135a:	87 95       	ror	r24
    135c:	97 f9       	bld	r25, 7
    135e:	08 95       	ret
    1360:	e1 e0       	ldi	r30, 0x01	; 1
    1362:	66 0f       	add	r22, r22
    1364:	77 1f       	adc	r23, r23
    1366:	88 1f       	adc	r24, r24
    1368:	bb 1f       	adc	r27, r27
    136a:	62 17       	cp	r22, r18
    136c:	73 07       	cpc	r23, r19
    136e:	84 07       	cpc	r24, r20
    1370:	ba 07       	cpc	r27, r26
    1372:	20 f0       	brcs	.+8      	; 0x137c <__divsf3_pse+0xae>
    1374:	62 1b       	sub	r22, r18
    1376:	73 0b       	sbc	r23, r19
    1378:	84 0b       	sbc	r24, r20
    137a:	ba 0b       	sbc	r27, r26
    137c:	ee 1f       	adc	r30, r30
    137e:	88 f7       	brcc	.-30     	; 0x1362 <__divsf3_pse+0x94>
    1380:	e0 95       	com	r30
    1382:	08 95       	ret

00001384 <__fixunssfsi>:
    1384:	0e 94 c2 0a 	call	0x1584	; 0x1584 <__fp_splitA>
    1388:	88 f0       	brcs	.+34     	; 0x13ac <__fixunssfsi+0x28>
    138a:	9f 57       	subi	r25, 0x7F	; 127
    138c:	98 f0       	brcs	.+38     	; 0x13b4 <__fixunssfsi+0x30>
    138e:	b9 2f       	mov	r27, r25
    1390:	99 27       	eor	r25, r25
    1392:	b7 51       	subi	r27, 0x17	; 23
    1394:	b0 f0       	brcs	.+44     	; 0x13c2 <__fixunssfsi+0x3e>
    1396:	e1 f0       	breq	.+56     	; 0x13d0 <__fixunssfsi+0x4c>
    1398:	66 0f       	add	r22, r22
    139a:	77 1f       	adc	r23, r23
    139c:	88 1f       	adc	r24, r24
    139e:	99 1f       	adc	r25, r25
    13a0:	1a f0       	brmi	.+6      	; 0x13a8 <__fixunssfsi+0x24>
    13a2:	ba 95       	dec	r27
    13a4:	c9 f7       	brne	.-14     	; 0x1398 <__fixunssfsi+0x14>
    13a6:	14 c0       	rjmp	.+40     	; 0x13d0 <__fixunssfsi+0x4c>
    13a8:	b1 30       	cpi	r27, 0x01	; 1
    13aa:	91 f0       	breq	.+36     	; 0x13d0 <__fixunssfsi+0x4c>
    13ac:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <__fp_zero>
    13b0:	b1 e0       	ldi	r27, 0x01	; 1
    13b2:	08 95       	ret
    13b4:	0c 94 f4 0a 	jmp	0x15e8	; 0x15e8 <__fp_zero>
    13b8:	67 2f       	mov	r22, r23
    13ba:	78 2f       	mov	r23, r24
    13bc:	88 27       	eor	r24, r24
    13be:	b8 5f       	subi	r27, 0xF8	; 248
    13c0:	39 f0       	breq	.+14     	; 0x13d0 <__fixunssfsi+0x4c>
    13c2:	b9 3f       	cpi	r27, 0xF9	; 249
    13c4:	cc f3       	brlt	.-14     	; 0x13b8 <__fixunssfsi+0x34>
    13c6:	86 95       	lsr	r24
    13c8:	77 95       	ror	r23
    13ca:	67 95       	ror	r22
    13cc:	b3 95       	inc	r27
    13ce:	d9 f7       	brne	.-10     	; 0x13c6 <__fixunssfsi+0x42>
    13d0:	3e f4       	brtc	.+14     	; 0x13e0 <__fixunssfsi+0x5c>
    13d2:	90 95       	com	r25
    13d4:	80 95       	com	r24
    13d6:	70 95       	com	r23
    13d8:	61 95       	neg	r22
    13da:	7f 4f       	sbci	r23, 0xFF	; 255
    13dc:	8f 4f       	sbci	r24, 0xFF	; 255
    13de:	9f 4f       	sbci	r25, 0xFF	; 255
    13e0:	08 95       	ret

000013e2 <__floatunsisf>:
    13e2:	e8 94       	clt
    13e4:	09 c0       	rjmp	.+18     	; 0x13f8 <__floatsisf+0x12>

000013e6 <__floatsisf>:
    13e6:	97 fb       	bst	r25, 7
    13e8:	3e f4       	brtc	.+14     	; 0x13f8 <__floatsisf+0x12>
    13ea:	90 95       	com	r25
    13ec:	80 95       	com	r24
    13ee:	70 95       	com	r23
    13f0:	61 95       	neg	r22
    13f2:	7f 4f       	sbci	r23, 0xFF	; 255
    13f4:	8f 4f       	sbci	r24, 0xFF	; 255
    13f6:	9f 4f       	sbci	r25, 0xFF	; 255
    13f8:	99 23       	and	r25, r25
    13fa:	a9 f0       	breq	.+42     	; 0x1426 <__floatsisf+0x40>
    13fc:	f9 2f       	mov	r31, r25
    13fe:	96 e9       	ldi	r25, 0x96	; 150
    1400:	bb 27       	eor	r27, r27
    1402:	93 95       	inc	r25
    1404:	f6 95       	lsr	r31
    1406:	87 95       	ror	r24
    1408:	77 95       	ror	r23
    140a:	67 95       	ror	r22
    140c:	b7 95       	ror	r27
    140e:	f1 11       	cpse	r31, r1
    1410:	f8 cf       	rjmp	.-16     	; 0x1402 <__floatsisf+0x1c>
    1412:	fa f4       	brpl	.+62     	; 0x1452 <__floatsisf+0x6c>
    1414:	bb 0f       	add	r27, r27
    1416:	11 f4       	brne	.+4      	; 0x141c <__floatsisf+0x36>
    1418:	60 ff       	sbrs	r22, 0
    141a:	1b c0       	rjmp	.+54     	; 0x1452 <__floatsisf+0x6c>
    141c:	6f 5f       	subi	r22, 0xFF	; 255
    141e:	7f 4f       	sbci	r23, 0xFF	; 255
    1420:	8f 4f       	sbci	r24, 0xFF	; 255
    1422:	9f 4f       	sbci	r25, 0xFF	; 255
    1424:	16 c0       	rjmp	.+44     	; 0x1452 <__floatsisf+0x6c>
    1426:	88 23       	and	r24, r24
    1428:	11 f0       	breq	.+4      	; 0x142e <__floatsisf+0x48>
    142a:	96 e9       	ldi	r25, 0x96	; 150
    142c:	11 c0       	rjmp	.+34     	; 0x1450 <__floatsisf+0x6a>
    142e:	77 23       	and	r23, r23
    1430:	21 f0       	breq	.+8      	; 0x143a <__floatsisf+0x54>
    1432:	9e e8       	ldi	r25, 0x8E	; 142
    1434:	87 2f       	mov	r24, r23
    1436:	76 2f       	mov	r23, r22
    1438:	05 c0       	rjmp	.+10     	; 0x1444 <__floatsisf+0x5e>
    143a:	66 23       	and	r22, r22
    143c:	71 f0       	breq	.+28     	; 0x145a <__floatsisf+0x74>
    143e:	96 e8       	ldi	r25, 0x86	; 134
    1440:	86 2f       	mov	r24, r22
    1442:	70 e0       	ldi	r23, 0x00	; 0
    1444:	60 e0       	ldi	r22, 0x00	; 0
    1446:	2a f0       	brmi	.+10     	; 0x1452 <__floatsisf+0x6c>
    1448:	9a 95       	dec	r25
    144a:	66 0f       	add	r22, r22
    144c:	77 1f       	adc	r23, r23
    144e:	88 1f       	adc	r24, r24
    1450:	da f7       	brpl	.-10     	; 0x1448 <__floatsisf+0x62>
    1452:	88 0f       	add	r24, r24
    1454:	96 95       	lsr	r25
    1456:	87 95       	ror	r24
    1458:	97 f9       	bld	r25, 7
    145a:	08 95       	ret

0000145c <floor>:
    145c:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <__fp_trunc>
    1460:	90 f0       	brcs	.+36     	; 0x1486 <floor+0x2a>
    1462:	9f 37       	cpi	r25, 0x7F	; 127
    1464:	48 f4       	brcc	.+18     	; 0x1478 <floor+0x1c>
    1466:	91 11       	cpse	r25, r1
    1468:	16 f0       	brts	.+4      	; 0x146e <floor+0x12>
    146a:	0c 94 f5 0a 	jmp	0x15ea	; 0x15ea <__fp_szero>
    146e:	60 e0       	ldi	r22, 0x00	; 0
    1470:	70 e0       	ldi	r23, 0x00	; 0
    1472:	80 e8       	ldi	r24, 0x80	; 128
    1474:	9f eb       	ldi	r25, 0xBF	; 191
    1476:	08 95       	ret
    1478:	26 f4       	brtc	.+8      	; 0x1482 <floor+0x26>
    147a:	1b 16       	cp	r1, r27
    147c:	61 1d       	adc	r22, r1
    147e:	71 1d       	adc	r23, r1
    1480:	81 1d       	adc	r24, r1
    1482:	0c 94 6f 0a 	jmp	0x14de	; 0x14de <__fp_mintl>
    1486:	0c 94 8a 0a 	jmp	0x1514	; 0x1514 <__fp_mpack>

0000148a <__fp_cmp>:
    148a:	99 0f       	add	r25, r25
    148c:	00 08       	sbc	r0, r0
    148e:	55 0f       	add	r21, r21
    1490:	aa 0b       	sbc	r26, r26
    1492:	e0 e8       	ldi	r30, 0x80	; 128
    1494:	fe ef       	ldi	r31, 0xFE	; 254
    1496:	16 16       	cp	r1, r22
    1498:	17 06       	cpc	r1, r23
    149a:	e8 07       	cpc	r30, r24
    149c:	f9 07       	cpc	r31, r25
    149e:	c0 f0       	brcs	.+48     	; 0x14d0 <__fp_cmp+0x46>
    14a0:	12 16       	cp	r1, r18
    14a2:	13 06       	cpc	r1, r19
    14a4:	e4 07       	cpc	r30, r20
    14a6:	f5 07       	cpc	r31, r21
    14a8:	98 f0       	brcs	.+38     	; 0x14d0 <__fp_cmp+0x46>
    14aa:	62 1b       	sub	r22, r18
    14ac:	73 0b       	sbc	r23, r19
    14ae:	84 0b       	sbc	r24, r20
    14b0:	95 0b       	sbc	r25, r21
    14b2:	39 f4       	brne	.+14     	; 0x14c2 <__fp_cmp+0x38>
    14b4:	0a 26       	eor	r0, r26
    14b6:	61 f0       	breq	.+24     	; 0x14d0 <__fp_cmp+0x46>
    14b8:	23 2b       	or	r18, r19
    14ba:	24 2b       	or	r18, r20
    14bc:	25 2b       	or	r18, r21
    14be:	21 f4       	brne	.+8      	; 0x14c8 <__fp_cmp+0x3e>
    14c0:	08 95       	ret
    14c2:	0a 26       	eor	r0, r26
    14c4:	09 f4       	brne	.+2      	; 0x14c8 <__fp_cmp+0x3e>
    14c6:	a1 40       	sbci	r26, 0x01	; 1
    14c8:	a6 95       	lsr	r26
    14ca:	8f ef       	ldi	r24, 0xFF	; 255
    14cc:	81 1d       	adc	r24, r1
    14ce:	81 1d       	adc	r24, r1
    14d0:	08 95       	ret

000014d2 <__fp_inf>:
    14d2:	97 f9       	bld	r25, 7
    14d4:	9f 67       	ori	r25, 0x7F	; 127
    14d6:	80 e8       	ldi	r24, 0x80	; 128
    14d8:	70 e0       	ldi	r23, 0x00	; 0
    14da:	60 e0       	ldi	r22, 0x00	; 0
    14dc:	08 95       	ret

000014de <__fp_mintl>:
    14de:	88 23       	and	r24, r24
    14e0:	71 f4       	brne	.+28     	; 0x14fe <__fp_mintl+0x20>
    14e2:	77 23       	and	r23, r23
    14e4:	21 f0       	breq	.+8      	; 0x14ee <__fp_mintl+0x10>
    14e6:	98 50       	subi	r25, 0x08	; 8
    14e8:	87 2b       	or	r24, r23
    14ea:	76 2f       	mov	r23, r22
    14ec:	07 c0       	rjmp	.+14     	; 0x14fc <__fp_mintl+0x1e>
    14ee:	66 23       	and	r22, r22
    14f0:	11 f4       	brne	.+4      	; 0x14f6 <__fp_mintl+0x18>
    14f2:	99 27       	eor	r25, r25
    14f4:	0d c0       	rjmp	.+26     	; 0x1510 <__fp_mintl+0x32>
    14f6:	90 51       	subi	r25, 0x10	; 16
    14f8:	86 2b       	or	r24, r22
    14fa:	70 e0       	ldi	r23, 0x00	; 0
    14fc:	60 e0       	ldi	r22, 0x00	; 0
    14fe:	2a f0       	brmi	.+10     	; 0x150a <__fp_mintl+0x2c>
    1500:	9a 95       	dec	r25
    1502:	66 0f       	add	r22, r22
    1504:	77 1f       	adc	r23, r23
    1506:	88 1f       	adc	r24, r24
    1508:	da f7       	brpl	.-10     	; 0x1500 <__fp_mintl+0x22>
    150a:	88 0f       	add	r24, r24
    150c:	96 95       	lsr	r25
    150e:	87 95       	ror	r24
    1510:	97 f9       	bld	r25, 7
    1512:	08 95       	ret

00001514 <__fp_mpack>:
    1514:	9f 3f       	cpi	r25, 0xFF	; 255
    1516:	31 f0       	breq	.+12     	; 0x1524 <__fp_mpack_finite+0xc>

00001518 <__fp_mpack_finite>:
    1518:	91 50       	subi	r25, 0x01	; 1
    151a:	20 f4       	brcc	.+8      	; 0x1524 <__fp_mpack_finite+0xc>
    151c:	87 95       	ror	r24
    151e:	77 95       	ror	r23
    1520:	67 95       	ror	r22
    1522:	b7 95       	ror	r27
    1524:	88 0f       	add	r24, r24
    1526:	91 1d       	adc	r25, r1
    1528:	96 95       	lsr	r25
    152a:	87 95       	ror	r24
    152c:	97 f9       	bld	r25, 7
    152e:	08 95       	ret

00001530 <__fp_nan>:
    1530:	9f ef       	ldi	r25, 0xFF	; 255
    1532:	80 ec       	ldi	r24, 0xC0	; 192
    1534:	08 95       	ret

00001536 <__fp_pscA>:
    1536:	00 24       	eor	r0, r0
    1538:	0a 94       	dec	r0
    153a:	16 16       	cp	r1, r22
    153c:	17 06       	cpc	r1, r23
    153e:	18 06       	cpc	r1, r24
    1540:	09 06       	cpc	r0, r25
    1542:	08 95       	ret

00001544 <__fp_pscB>:
    1544:	00 24       	eor	r0, r0
    1546:	0a 94       	dec	r0
    1548:	12 16       	cp	r1, r18
    154a:	13 06       	cpc	r1, r19
    154c:	14 06       	cpc	r1, r20
    154e:	05 06       	cpc	r0, r21
    1550:	08 95       	ret

00001552 <__fp_round>:
    1552:	09 2e       	mov	r0, r25
    1554:	03 94       	inc	r0
    1556:	00 0c       	add	r0, r0
    1558:	11 f4       	brne	.+4      	; 0x155e <__fp_round+0xc>
    155a:	88 23       	and	r24, r24
    155c:	52 f0       	brmi	.+20     	; 0x1572 <__fp_round+0x20>
    155e:	bb 0f       	add	r27, r27
    1560:	40 f4       	brcc	.+16     	; 0x1572 <__fp_round+0x20>
    1562:	bf 2b       	or	r27, r31
    1564:	11 f4       	brne	.+4      	; 0x156a <__fp_round+0x18>
    1566:	60 ff       	sbrs	r22, 0
    1568:	04 c0       	rjmp	.+8      	; 0x1572 <__fp_round+0x20>
    156a:	6f 5f       	subi	r22, 0xFF	; 255
    156c:	7f 4f       	sbci	r23, 0xFF	; 255
    156e:	8f 4f       	sbci	r24, 0xFF	; 255
    1570:	9f 4f       	sbci	r25, 0xFF	; 255
    1572:	08 95       	ret

00001574 <__fp_split3>:
    1574:	57 fd       	sbrc	r21, 7
    1576:	90 58       	subi	r25, 0x80	; 128
    1578:	44 0f       	add	r20, r20
    157a:	55 1f       	adc	r21, r21
    157c:	59 f0       	breq	.+22     	; 0x1594 <__fp_splitA+0x10>
    157e:	5f 3f       	cpi	r21, 0xFF	; 255
    1580:	71 f0       	breq	.+28     	; 0x159e <__fp_splitA+0x1a>
    1582:	47 95       	ror	r20

00001584 <__fp_splitA>:
    1584:	88 0f       	add	r24, r24
    1586:	97 fb       	bst	r25, 7
    1588:	99 1f       	adc	r25, r25
    158a:	61 f0       	breq	.+24     	; 0x15a4 <__fp_splitA+0x20>
    158c:	9f 3f       	cpi	r25, 0xFF	; 255
    158e:	79 f0       	breq	.+30     	; 0x15ae <__fp_splitA+0x2a>
    1590:	87 95       	ror	r24
    1592:	08 95       	ret
    1594:	12 16       	cp	r1, r18
    1596:	13 06       	cpc	r1, r19
    1598:	14 06       	cpc	r1, r20
    159a:	55 1f       	adc	r21, r21
    159c:	f2 cf       	rjmp	.-28     	; 0x1582 <__fp_split3+0xe>
    159e:	46 95       	lsr	r20
    15a0:	f1 df       	rcall	.-30     	; 0x1584 <__fp_splitA>
    15a2:	08 c0       	rjmp	.+16     	; 0x15b4 <__fp_splitA+0x30>
    15a4:	16 16       	cp	r1, r22
    15a6:	17 06       	cpc	r1, r23
    15a8:	18 06       	cpc	r1, r24
    15aa:	99 1f       	adc	r25, r25
    15ac:	f1 cf       	rjmp	.-30     	; 0x1590 <__fp_splitA+0xc>
    15ae:	86 95       	lsr	r24
    15b0:	71 05       	cpc	r23, r1
    15b2:	61 05       	cpc	r22, r1
    15b4:	08 94       	sec
    15b6:	08 95       	ret

000015b8 <__fp_trunc>:
    15b8:	0e 94 c2 0a 	call	0x1584	; 0x1584 <__fp_splitA>
    15bc:	a0 f0       	brcs	.+40     	; 0x15e6 <__fp_trunc+0x2e>
    15be:	be e7       	ldi	r27, 0x7E	; 126
    15c0:	b9 17       	cp	r27, r25
    15c2:	88 f4       	brcc	.+34     	; 0x15e6 <__fp_trunc+0x2e>
    15c4:	bb 27       	eor	r27, r27
    15c6:	9f 38       	cpi	r25, 0x8F	; 143
    15c8:	60 f4       	brcc	.+24     	; 0x15e2 <__fp_trunc+0x2a>
    15ca:	16 16       	cp	r1, r22
    15cc:	b1 1d       	adc	r27, r1
    15ce:	67 2f       	mov	r22, r23
    15d0:	78 2f       	mov	r23, r24
    15d2:	88 27       	eor	r24, r24
    15d4:	98 5f       	subi	r25, 0xF8	; 248
    15d6:	f7 cf       	rjmp	.-18     	; 0x15c6 <__fp_trunc+0xe>
    15d8:	86 95       	lsr	r24
    15da:	77 95       	ror	r23
    15dc:	67 95       	ror	r22
    15de:	b1 1d       	adc	r27, r1
    15e0:	93 95       	inc	r25
    15e2:	96 39       	cpi	r25, 0x96	; 150
    15e4:	c8 f3       	brcs	.-14     	; 0x15d8 <__fp_trunc+0x20>
    15e6:	08 95       	ret

000015e8 <__fp_zero>:
    15e8:	e8 94       	clt

000015ea <__fp_szero>:
    15ea:	bb 27       	eor	r27, r27
    15ec:	66 27       	eor	r22, r22
    15ee:	77 27       	eor	r23, r23
    15f0:	cb 01       	movw	r24, r22
    15f2:	97 f9       	bld	r25, 7
    15f4:	08 95       	ret

000015f6 <__gesf2>:
    15f6:	0e 94 45 0a 	call	0x148a	; 0x148a <__fp_cmp>
    15fa:	08 f4       	brcc	.+2      	; 0x15fe <__gesf2+0x8>
    15fc:	8f ef       	ldi	r24, 0xFF	; 255
    15fe:	08 95       	ret

00001600 <__mulsf3>:
    1600:	0e 94 13 0b 	call	0x1626	; 0x1626 <__mulsf3x>
    1604:	0c 94 a9 0a 	jmp	0x1552	; 0x1552 <__fp_round>
    1608:	0e 94 9b 0a 	call	0x1536	; 0x1536 <__fp_pscA>
    160c:	38 f0       	brcs	.+14     	; 0x161c <__mulsf3+0x1c>
    160e:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__fp_pscB>
    1612:	20 f0       	brcs	.+8      	; 0x161c <__mulsf3+0x1c>
    1614:	95 23       	and	r25, r21
    1616:	11 f0       	breq	.+4      	; 0x161c <__mulsf3+0x1c>
    1618:	0c 94 69 0a 	jmp	0x14d2	; 0x14d2 <__fp_inf>
    161c:	0c 94 98 0a 	jmp	0x1530	; 0x1530 <__fp_nan>
    1620:	11 24       	eor	r1, r1
    1622:	0c 94 f5 0a 	jmp	0x15ea	; 0x15ea <__fp_szero>

00001626 <__mulsf3x>:
    1626:	0e 94 ba 0a 	call	0x1574	; 0x1574 <__fp_split3>
    162a:	70 f3       	brcs	.-36     	; 0x1608 <__mulsf3+0x8>

0000162c <__mulsf3_pse>:
    162c:	95 9f       	mul	r25, r21
    162e:	c1 f3       	breq	.-16     	; 0x1620 <__mulsf3+0x20>
    1630:	95 0f       	add	r25, r21
    1632:	50 e0       	ldi	r21, 0x00	; 0
    1634:	55 1f       	adc	r21, r21
    1636:	62 9f       	mul	r22, r18
    1638:	f0 01       	movw	r30, r0
    163a:	72 9f       	mul	r23, r18
    163c:	bb 27       	eor	r27, r27
    163e:	f0 0d       	add	r31, r0
    1640:	b1 1d       	adc	r27, r1
    1642:	63 9f       	mul	r22, r19
    1644:	aa 27       	eor	r26, r26
    1646:	f0 0d       	add	r31, r0
    1648:	b1 1d       	adc	r27, r1
    164a:	aa 1f       	adc	r26, r26
    164c:	64 9f       	mul	r22, r20
    164e:	66 27       	eor	r22, r22
    1650:	b0 0d       	add	r27, r0
    1652:	a1 1d       	adc	r26, r1
    1654:	66 1f       	adc	r22, r22
    1656:	82 9f       	mul	r24, r18
    1658:	22 27       	eor	r18, r18
    165a:	b0 0d       	add	r27, r0
    165c:	a1 1d       	adc	r26, r1
    165e:	62 1f       	adc	r22, r18
    1660:	73 9f       	mul	r23, r19
    1662:	b0 0d       	add	r27, r0
    1664:	a1 1d       	adc	r26, r1
    1666:	62 1f       	adc	r22, r18
    1668:	83 9f       	mul	r24, r19
    166a:	a0 0d       	add	r26, r0
    166c:	61 1d       	adc	r22, r1
    166e:	22 1f       	adc	r18, r18
    1670:	74 9f       	mul	r23, r20
    1672:	33 27       	eor	r19, r19
    1674:	a0 0d       	add	r26, r0
    1676:	61 1d       	adc	r22, r1
    1678:	23 1f       	adc	r18, r19
    167a:	84 9f       	mul	r24, r20
    167c:	60 0d       	add	r22, r0
    167e:	21 1d       	adc	r18, r1
    1680:	82 2f       	mov	r24, r18
    1682:	76 2f       	mov	r23, r22
    1684:	6a 2f       	mov	r22, r26
    1686:	11 24       	eor	r1, r1
    1688:	9f 57       	subi	r25, 0x7F	; 127
    168a:	50 40       	sbci	r21, 0x00	; 0
    168c:	9a f0       	brmi	.+38     	; 0x16b4 <__mulsf3_pse+0x88>
    168e:	f1 f0       	breq	.+60     	; 0x16cc <__mulsf3_pse+0xa0>
    1690:	88 23       	and	r24, r24
    1692:	4a f0       	brmi	.+18     	; 0x16a6 <__mulsf3_pse+0x7a>
    1694:	ee 0f       	add	r30, r30
    1696:	ff 1f       	adc	r31, r31
    1698:	bb 1f       	adc	r27, r27
    169a:	66 1f       	adc	r22, r22
    169c:	77 1f       	adc	r23, r23
    169e:	88 1f       	adc	r24, r24
    16a0:	91 50       	subi	r25, 0x01	; 1
    16a2:	50 40       	sbci	r21, 0x00	; 0
    16a4:	a9 f7       	brne	.-22     	; 0x1690 <__mulsf3_pse+0x64>
    16a6:	9e 3f       	cpi	r25, 0xFE	; 254
    16a8:	51 05       	cpc	r21, r1
    16aa:	80 f0       	brcs	.+32     	; 0x16cc <__mulsf3_pse+0xa0>
    16ac:	0c 94 69 0a 	jmp	0x14d2	; 0x14d2 <__fp_inf>
    16b0:	0c 94 f5 0a 	jmp	0x15ea	; 0x15ea <__fp_szero>
    16b4:	5f 3f       	cpi	r21, 0xFF	; 255
    16b6:	e4 f3       	brlt	.-8      	; 0x16b0 <__mulsf3_pse+0x84>
    16b8:	98 3e       	cpi	r25, 0xE8	; 232
    16ba:	d4 f3       	brlt	.-12     	; 0x16b0 <__mulsf3_pse+0x84>
    16bc:	86 95       	lsr	r24
    16be:	77 95       	ror	r23
    16c0:	67 95       	ror	r22
    16c2:	b7 95       	ror	r27
    16c4:	f7 95       	ror	r31
    16c6:	e7 95       	ror	r30
    16c8:	9f 5f       	subi	r25, 0xFF	; 255
    16ca:	c1 f7       	brne	.-16     	; 0x16bc <__mulsf3_pse+0x90>
    16cc:	fe 2b       	or	r31, r30
    16ce:	88 0f       	add	r24, r24
    16d0:	91 1d       	adc	r25, r1
    16d2:	96 95       	lsr	r25
    16d4:	87 95       	ror	r24
    16d6:	97 f9       	bld	r25, 7
    16d8:	08 95       	ret

000016da <round>:
    16da:	0e 94 c2 0a 	call	0x1584	; 0x1584 <__fp_splitA>
    16de:	e8 f0       	brcs	.+58     	; 0x171a <round+0x40>
    16e0:	9e 37       	cpi	r25, 0x7E	; 126
    16e2:	e8 f0       	brcs	.+58     	; 0x171e <round+0x44>
    16e4:	96 39       	cpi	r25, 0x96	; 150
    16e6:	b8 f4       	brcc	.+46     	; 0x1716 <round+0x3c>
    16e8:	9e 38       	cpi	r25, 0x8E	; 142
    16ea:	48 f4       	brcc	.+18     	; 0x16fe <round+0x24>
    16ec:	67 2f       	mov	r22, r23
    16ee:	78 2f       	mov	r23, r24
    16f0:	88 27       	eor	r24, r24
    16f2:	98 5f       	subi	r25, 0xF8	; 248
    16f4:	f9 cf       	rjmp	.-14     	; 0x16e8 <round+0xe>
    16f6:	86 95       	lsr	r24
    16f8:	77 95       	ror	r23
    16fa:	67 95       	ror	r22
    16fc:	93 95       	inc	r25
    16fe:	95 39       	cpi	r25, 0x95	; 149
    1700:	d0 f3       	brcs	.-12     	; 0x16f6 <round+0x1c>
    1702:	b6 2f       	mov	r27, r22
    1704:	b1 70       	andi	r27, 0x01	; 1
    1706:	6b 0f       	add	r22, r27
    1708:	71 1d       	adc	r23, r1
    170a:	81 1d       	adc	r24, r1
    170c:	20 f4       	brcc	.+8      	; 0x1716 <round+0x3c>
    170e:	87 95       	ror	r24
    1710:	77 95       	ror	r23
    1712:	67 95       	ror	r22
    1714:	93 95       	inc	r25
    1716:	0c 94 6f 0a 	jmp	0x14de	; 0x14de <__fp_mintl>
    171a:	0c 94 8a 0a 	jmp	0x1514	; 0x1514 <__fp_mpack>
    171e:	0c 94 f5 0a 	jmp	0x15ea	; 0x15ea <__fp_szero>

00001722 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
    1722:	0e 94 40 0c 	call	0x1880	; 0x1880 <system_init>
    1726:	08 95       	ret

00001728 <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
    1728:	80 e0       	ldi	r24, 0x00	; 0
    172a:	08 c0       	rjmp	.+16     	; 0x173c <mcu_init+0x14>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    172c:	e8 2f       	mov	r30, r24
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	e0 5f       	subi	r30, 0xF0	; 240
    1732:	fb 4f       	sbci	r31, 0xFB	; 251
    1734:	90 81       	ld	r25, Z
    1736:	98 60       	ori	r25, 0x08	; 8
    1738:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
    173a:	8f 5f       	subi	r24, 0xFF	; 255
    173c:	88 30       	cpi	r24, 0x08	; 8
    173e:	b0 f3       	brcs	.-20     	; 0x172c <mcu_init+0x4>
    1740:	80 e0       	ldi	r24, 0x00	; 0
    1742:	08 c0       	rjmp	.+16     	; 0x1754 <mcu_init+0x2c>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    1744:	e8 2f       	mov	r30, r24
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	e0 5d       	subi	r30, 0xD0	; 208
    174a:	fb 4f       	sbci	r31, 0xFB	; 251
    174c:	90 81       	ld	r25, Z
    174e:	98 60       	ori	r25, 0x08	; 8
    1750:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    1752:	8f 5f       	subi	r24, 0xFF	; 255
    1754:	88 30       	cpi	r24, 0x08	; 8
    1756:	b0 f3       	brcs	.-20     	; 0x1744 <mcu_init+0x1c>
    1758:	80 e0       	ldi	r24, 0x00	; 0
    175a:	08 c0       	rjmp	.+16     	; 0x176c <mcu_init+0x44>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    175c:	e8 2f       	mov	r30, r24
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	e0 5b       	subi	r30, 0xB0	; 176
    1762:	fb 4f       	sbci	r31, 0xFB	; 251
    1764:	90 81       	ld	r25, Z
    1766:	98 60       	ori	r25, 0x08	; 8
    1768:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    176a:	8f 5f       	subi	r24, 0xFF	; 255
    176c:	88 30       	cpi	r24, 0x08	; 8
    176e:	b0 f3       	brcs	.-20     	; 0x175c <mcu_init+0x34>
    1770:	80 e0       	ldi	r24, 0x00	; 0
    1772:	08 c0       	rjmp	.+16     	; 0x1784 <mcu_init+0x5c>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    1774:	e8 2f       	mov	r30, r24
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	e0 59       	subi	r30, 0x90	; 144
    177a:	fb 4f       	sbci	r31, 0xFB	; 251
    177c:	90 81       	ld	r25, Z
    177e:	98 60       	ori	r25, 0x08	; 8
    1780:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    1782:	8f 5f       	subi	r24, 0xFF	; 255
    1784:	88 30       	cpi	r24, 0x08	; 8
    1786:	b0 f3       	brcs	.-20     	; 0x1774 <mcu_init+0x4c>
    1788:	80 e0       	ldi	r24, 0x00	; 0
    178a:	08 c0       	rjmp	.+16     	; 0x179c <mcu_init+0x74>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    178c:	e8 2f       	mov	r30, r24
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	e0 57       	subi	r30, 0x70	; 112
    1792:	fb 4f       	sbci	r31, 0xFB	; 251
    1794:	90 81       	ld	r25, Z
    1796:	98 60       	ori	r25, 0x08	; 8
    1798:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    179a:	8f 5f       	subi	r24, 0xFF	; 255
    179c:	88 30       	cpi	r24, 0x08	; 8
    179e:	b0 f3       	brcs	.-20     	; 0x178c <mcu_init+0x64>
    17a0:	80 e0       	ldi	r24, 0x00	; 0
    17a2:	08 c0       	rjmp	.+16     	; 0x17b4 <mcu_init+0x8c>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    17a4:	e8 2f       	mov	r30, r24
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	e0 55       	subi	r30, 0x50	; 80
    17aa:	fb 4f       	sbci	r31, 0xFB	; 251
    17ac:	90 81       	ld	r25, Z
    17ae:	98 60       	ori	r25, 0x08	; 8
    17b0:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    17b2:	8f 5f       	subi	r24, 0xFF	; 255
    17b4:	88 30       	cpi	r24, 0x08	; 8
    17b6:	b0 f3       	brcs	.-20     	; 0x17a4 <mcu_init+0x7c>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
    17b8:	08 95       	ret

000017ba <USART_0_initialization>:
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
    17ba:	84 b1       	in	r24, 0x04	; 4
    17bc:	8d 7f       	andi	r24, 0xFD	; 253
    17be:	84 b9       	out	0x04, r24	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    17c0:	e1 e3       	ldi	r30, 0x31	; 49
    17c2:	f4 e0       	ldi	r31, 0x04	; 4
    17c4:	80 81       	ld	r24, Z
    17c6:	87 7f       	andi	r24, 0xF7	; 247
    17c8:	80 83       	st	Z, r24
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
    17ca:	85 b1       	in	r24, 0x05	; 5
    17cc:	8e 7f       	andi	r24, 0xFE	; 254
    17ce:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    17d0:	84 b1       	in	r24, 0x04	; 4
    17d2:	81 60       	ori	r24, 0x01	; 1
    17d4:	84 b9       	out	0x04, r24	; 4
	    // <true"> High
	    false);

	PB0_set_dir(PORT_DIR_OUT);

	USART_0_init();
    17d6:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <USART_0_init>
    17da:	08 95       	ret

000017dc <EVENT_SYSTEM_0_initialization>:
}

void EVENT_SYSTEM_0_initialization(void)
{

	EVENT_SYSTEM_0_init();
    17dc:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <EVENT_SYSTEM_0_init>
    17e0:	08 95       	ret

000017e2 <ZCD_Rising_initialization>:
 */
static inline void PORTD_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    17e2:	e1 e7       	ldi	r30, 0x71	; 113
    17e4:	f4 e0       	ldi	r31, 0x04	; 4
    17e6:	80 81       	ld	r24, Z
    17e8:	88 7f       	andi	r24, 0xF8	; 248
    17ea:	84 60       	ori	r24, 0x04	; 4
    17ec:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    17ee:	80 81       	ld	r24, Z
    17f0:	87 7f       	andi	r24, 0xF7	; 247
    17f2:	80 83       	st	Z, r24
	// Disable digital input buffer
	PD1_set_isc(PORT_ISC_INPUT_DISABLE_gc);
	// Disable pull-up resistor
	PD1_set_pull_mode(PORT_PULL_OFF);

	ZCD_Rising_init();
    17f4:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <ZCD_Rising_init>
    17f8:	08 95       	ret

000017fa <ZCD_Falling_initialization>:
 */
static inline void PORTE_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTE + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    17fa:	e3 e9       	ldi	r30, 0x93	; 147
    17fc:	f4 e0       	ldi	r31, 0x04	; 4
    17fe:	80 81       	ld	r24, Z
    1800:	88 7f       	andi	r24, 0xF8	; 248
    1802:	84 60       	ori	r24, 0x04	; 4
    1804:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTE + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    1806:	80 81       	ld	r24, Z
    1808:	87 7f       	andi	r24, 0xF7	; 247
    180a:	80 83       	st	Z, r24
	// Disable digital input buffer
	PE3_set_isc(PORT_ISC_INPUT_DISABLE_gc);
	// Disable pull-up resistor
	PE3_set_pull_mode(PORT_PULL_OFF);

	ZCD_Falling_init();
    180c:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <ZCD_Falling_init>
    1810:	08 95       	ret

00001812 <SPI_ADF_initialization>:
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
    1812:	80 b1       	in	r24, 0x00	; 0
    1814:	8f 7d       	andi	r24, 0xDF	; 223
    1816:	80 b9       	out	0x00, r24	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    1818:	e5 e1       	ldi	r30, 0x15	; 21
    181a:	f4 e0       	ldi	r31, 0x04	; 4
    181c:	80 81       	ld	r24, Z
    181e:	87 7f       	andi	r24, 0xF7	; 247
    1820:	80 83       	st	Z, r24
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    1822:	81 b1       	in	r24, 0x01	; 1
    1824:	8f 7e       	andi	r24, 0xEF	; 239
    1826:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    1828:	80 b1       	in	r24, 0x00	; 0
    182a:	80 61       	ori	r24, 0x10	; 16
    182c:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    182e:	81 b1       	in	r24, 0x01	; 1
    1830:	8f 7b       	andi	r24, 0xBF	; 191
    1832:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    1834:	80 b1       	in	r24, 0x00	; 0
    1836:	80 64       	ori	r24, 0x40	; 64
    1838:	80 b9       	out	0x00, r24	; 0
	    // <true"> High
	    false);

	PA6_set_dir(PORT_DIR_OUT);

	SPI_ADF_init();
    183a:	0e 94 95 0c 	call	0x192a	; 0x192a <SPI_ADF_init>
    183e:	08 95       	ret

00001840 <SPI_LMX_initialization>:
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
    1840:	88 b1       	in	r24, 0x08	; 8
    1842:	8d 7f       	andi	r24, 0xFD	; 253
    1844:	88 b9       	out	0x08, r24	; 8
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    1846:	e1 e5       	ldi	r30, 0x51	; 81
    1848:	f4 e0       	ldi	r31, 0x04	; 4
    184a:	80 81       	ld	r24, Z
    184c:	87 7f       	andi	r24, 0xF7	; 247
    184e:	80 83       	st	Z, r24
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
    1850:	89 b1       	in	r24, 0x09	; 9
    1852:	8e 7f       	andi	r24, 0xFE	; 254
    1854:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
    1856:	88 b1       	in	r24, 0x08	; 8
    1858:	81 60       	ori	r24, 0x01	; 1
    185a:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
    185c:	89 b1       	in	r24, 0x09	; 9
    185e:	8b 7f       	andi	r24, 0xFB	; 251
    1860:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
    1862:	88 b1       	in	r24, 0x08	; 8
    1864:	84 60       	ori	r24, 0x04	; 4
    1866:	88 b9       	out	0x08, r24	; 8
	    // <true"> High
	    false);

	PC2_set_dir(PORT_DIR_OUT);

	SPI_LMX_init();
    1868:	0e 94 9e 0c 	call	0x193c	; 0x193c <SPI_LMX_init>
    186c:	08 95       	ret

0000186e <TIMER_RISING_initialization>:
}

void TIMER_RISING_initialization(void)
{

	TIMER_RISING_init();
    186e:	0e 94 ce 0c 	call	0x199c	; 0x199c <TIMER_RISING_init>
    1872:	08 95       	ret

00001874 <TIMER_Falling_initialization>:
}

void TIMER_Falling_initialization(void)
{

	TIMER_Falling_init();
    1874:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <TIMER_Falling_init>
    1878:	08 95       	ret

0000187a <TIMER_C_initialization>:
}

void TIMER_C_initialization(void)
{

	TIMER_C_init();
    187a:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <TIMER_C_init>
    187e:	08 95       	ret

00001880 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
    1880:	0e 94 94 0b 	call	0x1728	; 0x1728 <mcu_init>
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    1884:	81 b1       	in	r24, 0x01	; 1
    1886:	8f 77       	andi	r24, 0x7F	; 127
    1888:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    188a:	80 b1       	in	r24, 0x00	; 0
    188c:	80 68       	ori	r24, 0x80	; 128
    188e:	80 b9       	out	0x00, r24	; 0
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
    1890:	85 b1       	in	r24, 0x05	; 5
    1892:	87 7f       	andi	r24, 0xF7	; 247
    1894:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    1896:	84 b1       	in	r24, 0x04	; 4
    1898:	88 60       	ori	r24, 0x08	; 8
    189a:	84 b9       	out	0x04, r24	; 4
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
    189c:	89 b1       	in	r24, 0x09	; 9
    189e:	88 60       	ori	r24, 0x08	; 8
    18a0:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
    18a2:	88 b1       	in	r24, 0x08	; 8
    18a4:	88 60       	ori	r24, 0x08	; 8
    18a6:	88 b9       	out	0x08, r24	; 8
	    // <true"> High
	    true);

	CS_LMX_set_dir(PORT_DIR_OUT);

	CLKCTRL_init();
    18a8:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <CLKCTRL_init>

	USART_0_initialization();
    18ac:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <USART_0_initialization>

	EVENT_SYSTEM_0_initialization();
    18b0:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <EVENT_SYSTEM_0_initialization>

	SLPCTRL_init();
    18b4:	0e 94 93 0c 	call	0x1926	; 0x1926 <SLPCTRL_init>

	CPUINT_init();
    18b8:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <CPUINT_init>

	ZCD_Rising_initialization();
    18bc:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <ZCD_Rising_initialization>

	ZCD_Falling_initialization();
    18c0:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <ZCD_Falling_initialization>

	SPI_ADF_initialization();
    18c4:	0e 94 09 0c 	call	0x1812	; 0x1812 <SPI_ADF_initialization>

	SPI_LMX_initialization();
    18c8:	0e 94 20 0c 	call	0x1840	; 0x1840 <SPI_LMX_initialization>

	RTC_0_init();
    18cc:	0e 94 82 0c 	call	0x1904	; 0x1904 <RTC_0_init>

	TIMER_RISING_initialization();
    18d0:	0e 94 37 0c 	call	0x186e	; 0x186e <TIMER_RISING_initialization>

	TIMER_Falling_initialization();
    18d4:	0e 94 3a 0c 	call	0x1874	; 0x1874 <TIMER_Falling_initialization>

	TIMER_C_initialization();
    18d8:	0e 94 3d 0c 	call	0x187a	; 0x187a <TIMER_C_initialization>

	BOD_init();
    18dc:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <BOD_init>
    18e0:	08 95       	ret

000018e2 <EVENT_SYSTEM_0_init>:
 * \return Initialization status.
 */
int8_t EVENT_SYSTEM_0_init()
{

	EVSYS.CHANNEL0 = EVSYS_CHANNEL0_ZCD0_gc; /* Zero Cross Detect 0 out */
    18e2:	e0 e0       	ldi	r30, 0x00	; 0
    18e4:	f2 e0       	ldi	r31, 0x02	; 2
    18e6:	80 e3       	ldi	r24, 0x30	; 48
    18e8:	80 8b       	std	Z+16, r24	; 0x10

	EVSYS.CHANNEL1 = EVSYS_CHANNEL1_ZCD1_gc; /* Zero Cross Detect 1 out */
    18ea:	81 e3       	ldi	r24, 0x31	; 49
    18ec:	81 8b       	std	Z+17, r24	; 0x11

	// EVSYS.USERTCA1CNTA = EVSYS_USER_OFF_gc; /* Off */

	// EVSYS.USERTCA1CNTB = EVSYS_USER_OFF_gc; /* Off */

	EVSYS.USERTCB0CAPT = EVSYS_USER_CHANNEL0_gc; /* Connect user to event channel 0 */
    18ee:	91 e0       	ldi	r25, 0x01	; 1
    18f0:	96 af       	std	Z+62, r25	; 0x3e

	// EVSYS.USERTCB1CAPT = EVSYS_USER_OFF_gc; /* Off */

	// EVSYS.USERTCB1COUNT = EVSYS_USER_OFF_gc; /* Off */

	EVSYS.USERTCB2CAPT = EVSYS_USER_CHANNEL1_gc; /* Connect user to event channel 1 */
    18f2:	82 e0       	ldi	r24, 0x02	; 2
    18f4:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <__TEXT_REGION_LENGTH__+0x7e0242>

	// EVSYS.USERTCB3CAPT = EVSYS_USER_OFF_gc; /* Off */

	// EVSYS.USERTCB3COUNT = EVSYS_USER_OFF_gc; /* Off */

	EVSYS.USERTCD0INPUTA = EVSYS_USER_CHANNEL0_gc; /* Connect user to event channel 0 */
    18f8:	90 93 48 02 	sts	0x0248, r25	; 0x800248 <__TEXT_REGION_LENGTH__+0x7e0248>

	EVSYS.USERTCD0INPUTB = EVSYS_USER_CHANNEL1_gc; /* Connect user to event channel 1 */
    18fc:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <__TEXT_REGION_LENGTH__+0x7e0249>
	// EVSYS.USEROPAMP2DUMP = EVSYS_USER_OFF_gc; /* Off */

	// EVSYS.USEROPAMP2DISABLE = EVSYS_USER_OFF_gc; /* Off */

	return 0;
}
    1900:	80 e0       	ldi	r24, 0x00	; 0
    1902:	08 95       	ret

00001904 <RTC_0_init>:
 * \return Initialization status.
 */
int8_t RTC_0_init()
{

	while (RTC.STATUS > 0) { /* Wait for all register to be synchronized */
    1904:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    1908:	81 11       	cpse	r24, r1
    190a:	fc cf       	rjmp	.-8      	; 0x1904 <RTC_0_init>

	// RTC.CMP = 0x0; /* Compare: 0x0 */

	// RTC.CNT = 0x0; /* Counter: 0x0 */

	RTC.CTRLA = RTC_PRESCALER_DIV32_gc  /* 32 */
    190c:	e0 e4       	ldi	r30, 0x40	; 64
    190e:	f1 e0       	ldi	r31, 0x01	; 1
    1910:	88 ea       	ldi	r24, 0xA8	; 168
    1912:	80 83       	st	Z, r24
	            | 0 << RTC_RTCEN_bp     /* Enable: disabled */
	            | 1 << RTC_RUNSTDBY_bp; /* Run In Standby: enabled */

	RTC.PER = 0x1ff; /* Period: 0x1ff */
    1914:	8f ef       	ldi	r24, 0xFF	; 255
    1916:	91 e0       	ldi	r25, 0x01	; 1
    1918:	82 87       	std	Z+10, r24	; 0x0a
    191a:	93 87       	std	Z+11, r25	; 0x0b

	RTC.CLKSEL = RTC_CLKSEL_OSC32K_gc; /* Internal 32.768 kHz oscillator */
    191c:	17 82       	std	Z+7, r1	; 0x07

	// RTC.DBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	RTC.INTCTRL = 0 << RTC_CMP_bp    /* Compare Match Interrupt enable: disabled */
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	82 83       	std	Z+2, r24	; 0x02
	// RTC.PITDBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	// RTC.PITINTCTRL = 0 << RTC_PI_bp; /* Periodic Interrupt: disabled */

	return 0;
}
    1922:	80 e0       	ldi	r24, 0x00	; 0
    1924:	08 95       	ret

00001926 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
    1926:	80 e0       	ldi	r24, 0x00	; 0
    1928:	08 95       	ret

0000192a <SPI_ADF_init>:
		while (!(SPI1.INTFLAGS & SPI_RXCIF_bm))
			;
		*b = SPI1.DATA;
		b++;
	}
}
    192a:	e0 e4       	ldi	r30, 0x40	; 64
    192c:	f9 e0       	ldi	r31, 0x09	; 9
    192e:	81 e2       	ldi	r24, 0x21	; 33
    1930:	80 83       	st	Z, r24
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	82 83       	std	Z+2, r24	; 0x02
    1936:	10 92 46 43 	sts	0x4346, r1	; 0x804346 <SPI_ADF_desc>
    193a:	08 95       	ret

0000193c <SPI_LMX_init>:
    193c:	e0 e6       	ldi	r30, 0x60	; 96
    193e:	f9 e0       	ldi	r31, 0x09	; 9
    1940:	81 e2       	ldi	r24, 0x21	; 33
    1942:	80 83       	st	Z, r24
    1944:	81 e0       	ldi	r24, 0x01	; 1
    1946:	82 83       	std	Z+2, r24	; 0x02
    1948:	10 92 45 43 	sts	0x4345, r1	; 0x804345 <SPI_LMX_desc>
    194c:	08 95       	ret

0000194e <SPI_LMX_enable>:
    194e:	e0 e6       	ldi	r30, 0x60	; 96
    1950:	f9 e0       	ldi	r31, 0x09	; 9
    1952:	80 81       	ld	r24, Z
    1954:	81 60       	ori	r24, 0x01	; 1
    1956:	80 83       	st	Z, r24
    1958:	08 95       	ret

0000195a <SPI_LMX_write_block>:
 * \param[in] size The size of buffer to transfer
 *
 * \return Nothing.
 */
void SPI_LMX_write_block(void *block, uint8_t size)
{
    195a:	fc 01       	movw	r30, r24
	uint8_t *b = (uint8_t *)block;
	while (size--) {
    195c:	09 c0       	rjmp	.+18     	; 0x1970 <SPI_LMX_write_block+0x16>
		SPI1.DATA = *b;
    195e:	90 81       	ld	r25, Z
    1960:	90 93 64 09 	sts	0x0964, r25	; 0x800964 <__TEXT_REGION_LENGTH__+0x7e0964>
		while (!(SPI1.INTFLAGS & SPI_RXCIF_bm))
    1964:	90 91 63 09 	lds	r25, 0x0963	; 0x800963 <__TEXT_REGION_LENGTH__+0x7e0963>
    1968:	99 23       	and	r25, r25
    196a:	e4 f7       	brge	.-8      	; 0x1964 <SPI_LMX_write_block+0xa>
			;
		b++;
    196c:	31 96       	adiw	r30, 0x01	; 1
 * \return Nothing.
 */
void SPI_LMX_write_block(void *block, uint8_t size)
{
	uint8_t *b = (uint8_t *)block;
	while (size--) {
    196e:	68 2f       	mov	r22, r24
    1970:	8f ef       	ldi	r24, 0xFF	; 255
    1972:	86 0f       	add	r24, r22
    1974:	61 11       	cpse	r22, r1
    1976:	f3 cf       	rjmp	.-26     	; 0x195e <SPI_LMX_write_block+0x4>
		SPI1.DATA = *b;
		while (!(SPI1.INTFLAGS & SPI_RXCIF_bm))
			;
		b++;
	}
}
    1978:	08 95       	ret

0000197a <SPI_LMX_read_block>:
 * \param[in] size The size of buffer to transfer
 *
 * \return Nothing.
 */
void SPI_LMX_read_block(void *block, uint8_t size)
{
    197a:	fc 01       	movw	r30, r24
	uint8_t *b = (uint8_t *)block;
	while (size--) {
    197c:	0a c0       	rjmp	.+20     	; 0x1992 <SPI_LMX_read_block+0x18>
		SPI1.DATA = 0;
    197e:	10 92 64 09 	sts	0x0964, r1	; 0x800964 <__TEXT_REGION_LENGTH__+0x7e0964>
		while (!(SPI1.INTFLAGS & SPI_RXCIF_bm))
    1982:	90 91 63 09 	lds	r25, 0x0963	; 0x800963 <__TEXT_REGION_LENGTH__+0x7e0963>
    1986:	99 23       	and	r25, r25
    1988:	e4 f7       	brge	.-8      	; 0x1982 <SPI_LMX_read_block+0x8>
			;
		*b = SPI1.DATA;
    198a:	90 91 64 09 	lds	r25, 0x0964	; 0x800964 <__TEXT_REGION_LENGTH__+0x7e0964>
    198e:	91 93       	st	Z+, r25
 * \return Nothing.
 */
void SPI_LMX_read_block(void *block, uint8_t size)
{
	uint8_t *b = (uint8_t *)block;
	while (size--) {
    1990:	68 2f       	mov	r22, r24
    1992:	8f ef       	ldi	r24, 0xFF	; 255
    1994:	86 0f       	add	r24, r22
    1996:	61 11       	cpse	r22, r1
    1998:	f2 cf       	rjmp	.-28     	; 0x197e <SPI_LMX_read_block+0x4>
		while (!(SPI1.INTFLAGS & SPI_RXCIF_bm))
			;
		*b = SPI1.DATA;
		b++;
	}
}
    199a:	08 95       	ret

0000199c <TIMER_RISING_init>:
 * \return Initialization status.
 */
int8_t TIMER_RISING_init()
{

	TCB0.CCMP = 0xffff; /* Compare or Capture: 0xffff */
    199c:	e0 e0       	ldi	r30, 0x00	; 0
    199e:	fb e0       	ldi	r31, 0x0B	; 11
    19a0:	8f ef       	ldi	r24, 0xFF	; 255
    19a2:	9f ef       	ldi	r25, 0xFF	; 255
    19a4:	84 87       	std	Z+12, r24	; 0x0c
    19a6:	95 87       	std	Z+13, r25	; 0x0d

	TCB0.CNT = 0xffff; /* Count: 0xffff */
    19a8:	82 87       	std	Z+10, r24	; 0x0a
    19aa:	93 87       	std	Z+11, r25	; 0x0b

	TCB0.CTRLB = 0 << TCB_ASYNC_bp      /* Asynchronous Enable: disabled */
    19ac:	83 e0       	ldi	r24, 0x03	; 3
    19ae:	81 83       	std	Z+1, r24	; 0x01
	             | 0 << TCB_CCMPEN_bp   /* Pin Output Enable: disabled */
	             | 0 << TCB_CCMPINIT_bp /* Pin Initial State: disabled */
	             | TCB_CNTMODE_FRQ_gc;  /* Input Capture Frequency measurement */

	TCB0.DBGCTRL = 1 << TCB_DBGRUN_bp; /* Debug Run: enabled */
    19b0:	81 e0       	ldi	r24, 0x01	; 1
    19b2:	80 87       	std	Z+8, r24	; 0x08

	TCB0.EVCTRL = 1 << TCB_CAPTEI_bp    /* Event Input Enable: enabled */
    19b4:	84 83       	std	Z+4, r24	; 0x04
	              | 0 << TCB_EDGE_bp    /* Event Edge: disabled */
	              | 0 << TCB_FILTER_bp; /* Input Capture Noise Cancellation Filter: disabled */

	TCB0.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
    19b6:	85 83       	std	Z+5, r24	; 0x05
	               | 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */

	TCB0.CTRLA = TCB_CLKSEL_DIV1_gc     /* CLK_PER */
    19b8:	81 e4       	ldi	r24, 0x41	; 65
    19ba:	80 83       	st	Z, r24
	             | 1 << TCB_RUNSTDBY_bp /* Run Standby: enabled */
	             | 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
	             | 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */

	return 0;
}
    19bc:	80 e0       	ldi	r24, 0x00	; 0
    19be:	08 95       	ret

000019c0 <TIMER_Falling_init>:

	// TCB2.CCMP = 0x0; /* Compare or Capture: 0x0 */

	// TCB2.CNT = 0x0; /* Count: 0x0 */

	TCB2.CTRLB = 1 << TCB_ASYNC_bp      /* Asynchronous Enable: enabled */
    19c0:	e0 e2       	ldi	r30, 0x20	; 32
    19c2:	fb e0       	ldi	r31, 0x0B	; 11
    19c4:	83 e4       	ldi	r24, 0x43	; 67
    19c6:	81 83       	std	Z+1, r24	; 0x01
	             | 0 << TCB_CCMPINIT_bp /* Pin Initial State: disabled */
	             | TCB_CNTMODE_FRQ_gc;  /* Input Capture Frequency measurement */

	// TCB2.DBGCTRL = 0 << TCB_DBGRUN_bp; /* Debug Run: disabled */

	TCB2.EVCTRL = 1 << TCB_CAPTEI_bp    /* Event Input Enable: enabled */
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	84 83       	std	Z+4, r24	; 0x04
	              | 0 << TCB_EDGE_bp    /* Event Edge: disabled */
	              | 0 << TCB_FILTER_bp; /* Input Capture Noise Cancellation Filter: disabled */

	TCB2.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
    19cc:	85 83       	std	Z+5, r24	; 0x05
	               | 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */

	TCB2.CTRLA = TCB_CLKSEL_DIV1_gc     /* CLK_PER */
    19ce:	81 e4       	ldi	r24, 0x41	; 65
    19d0:	80 83       	st	Z, r24
	             | 1 << TCB_RUNSTDBY_bp /* Run Standby: enabled */
	             | 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
	             | 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */

	return 0;
}
    19d2:	80 e0       	ldi	r24, 0x00	; 0
    19d4:	08 95       	ret

000019d6 <TIMER_C_init>:
int8_t TIMER_C_init()
{

	// Enable Protected register, peripheral must be disabled (ENABLE=0, in TCD.CTRLA).

	TCD0.CMPASET = 4095; /* Compare A Set: 4095 */
    19d6:	e0 e8       	ldi	r30, 0x80	; 128
    19d8:	fb e0       	ldi	r31, 0x0B	; 11
    19da:	8f ef       	ldi	r24, 0xFF	; 255
    19dc:	9f e0       	ldi	r25, 0x0F	; 15
    19de:	80 a7       	std	Z+40, r24	; 0x28
    19e0:	91 a7       	std	Z+41, r25	; 0x29

	// TCD0.CMPACLR = 0; /* Compare A Clear: 0 */

	TCD0.CMPBSET = 4095; /* Compare B Set: 4095 */
    19e2:	84 a7       	std	Z+44, r24	; 0x2c
    19e4:	95 a7       	std	Z+45, r25	; 0x2d
	//		 | TCD_DLYTRIG_CMPASET_gc; /* Compare A set */

	// TCD0.DLYVAL = 0 << TCD_DLYVAL_gp; /* Delay value: 0 */

	TCD0.EVCTRLA
	    = TCD_CFG_NEITHER_gc      /* Neither Filter nor Asynchronous Event is enabled */
    19e6:	85 e1       	ldi	r24, 0x15	; 21
    19e8:	80 87       	std	Z+8, r24	; 0x08
	      | TCD_ACTION_CAPTURE_gc /* Event trigger a fault and capture */
	      | TCD_EDGE_RISE_HIGH_gc /* The rising edge or high level of event generates retrigger or fault action */
	      | 1 << TCD_TRIGEI_bp;   /* Trigger event enable: enabled */

	TCD0.EVCTRLB
	    = TCD_CFG_NEITHER_gc      /* Neither Filter nor Asynchronous Event is enabled */
    19ea:	81 87       	std	Z+9, r24	; 0x09

	// TCD0.INPUTCTRLA = TCD_INPUTMODE_NONE_gc; /* Input has no actions */

	// TCD0.INPUTCTRLB = TCD_INPUTMODE_NONE_gc; /* Input has no actions */

	TCD0.INTCTRL = 0 << TCD_OVF_bp      /* Overflow interrupt enable: disabled */
    19ec:	8c e0       	ldi	r24, 0x0C	; 12
    19ee:	84 87       	std	Z+12, r24	; 0x0c
	               | 1 << TCD_TRIGA_bp  /* Trigger A interrupt enable: enabled */
	               | 1 << TCD_TRIGB_bp; /* Trigger B interrupt enable: enabled */

	while ((TCD0.STATUS & TCD_ENRDY_bm) == 0)
    19f0:	80 91 8e 0b 	lds	r24, 0x0B8E	; 0x800b8e <__TEXT_REGION_LENGTH__+0x7e0b8e>
    19f4:	80 ff       	sbrs	r24, 0
    19f6:	fc cf       	rjmp	.-8      	; 0x19f0 <TIMER_C_init+0x1a>
		; // Wait for Enable Ready to be high.

	TCD0.CTRLA = 1 << TCD_ENABLE_bp      /* Enable: enabled */
    19f8:	81 e2       	ldi	r24, 0x21	; 33
    19fa:	80 93 80 0b 	sts	0x0B80, r24	; 0x800b80 <__TEXT_REGION_LENGTH__+0x7e0b80>
	             | TCD_CLKSEL_PLL_gc     /*  */
	             | TCD_CNTPRES_DIV1_gc   /* Sync clock divided by 1 */
	             | TCD_SYNCPRES_DIV1_gc; /*  */

	return 0;
}
    19fe:	80 e0       	ldi	r24, 0x00	; 0
    1a00:	08 95       	ret

00001a02 <USART_0_init>:
uint8_t USART_0_read()
{
	while (!(USART3.STATUS & USART_RXCIF_bm))
		;
	return USART3.RXDATAL;
}
    1a02:	e0 e6       	ldi	r30, 0x60	; 96
    1a04:	f8 e0       	ldi	r31, 0x08	; 8
    1a06:	81 e4       	ldi	r24, 0x41	; 65
    1a08:	93 e0       	ldi	r25, 0x03	; 3
    1a0a:	80 87       	std	Z+8, r24	; 0x08
    1a0c:	91 87       	std	Z+9, r25	; 0x09
    1a0e:	80 ec       	ldi	r24, 0xC0	; 192
    1a10:	86 83       	std	Z+6, r24	; 0x06
    1a12:	80 e0       	ldi	r24, 0x00	; 0
    1a14:	90 e4       	ldi	r25, 0x40	; 64
    1a16:	80 93 49 43 	sts	0x4349, r24	; 0x804349 <__iob+0x2>
    1a1a:	90 93 4a 43 	sts	0x434A, r25	; 0x80434a <__iob+0x3>
    1a1e:	80 e0       	ldi	r24, 0x00	; 0
    1a20:	08 95       	ret

00001a22 <USART_0_write>:
 *
 * \return Nothing
 */
void USART_0_write(const uint8_t data)
{
	while (!(USART3.STATUS & USART_DREIF_bm))
    1a22:	90 91 64 08 	lds	r25, 0x0864	; 0x800864 <__TEXT_REGION_LENGTH__+0x7e0864>
    1a26:	95 ff       	sbrs	r25, 5
    1a28:	fc cf       	rjmp	.-8      	; 0x1a22 <USART_0_write>
		;
	USART3.TXDATAL = data;
    1a2a:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <__TEXT_REGION_LENGTH__+0x7e0862>
    1a2e:	08 95       	ret

00001a30 <USART_0_printCHAR>:

#if defined(__GNUC__)

int USART_0_printCHAR(char character, FILE *stream)
{
	USART_0_write(character);
    1a30:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <USART_0_write>
	return 0;
}
    1a34:	80 e0       	ldi	r24, 0x00	; 0
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	08 95       	ret

00001a3a <ZCD_Rising_init>:
 * \return Initialization status.
 */
int8_t ZCD_Rising_init()
{

	ZCD0.CTRLA = 1 << ZCD_ENABLE_bp     /* Setting: enabled */
    1a3a:	e0 ec       	ldi	r30, 0xC0	; 192
    1a3c:	f6 e0       	ldi	r31, 0x06	; 6
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	80 83       	st	Z, r24
	             | 0 << ZCD_OUTEN_bp    /* Setting: disabled */
	             | 0 << ZCD_RUNSTDBY_bp /* Setting: disabled */
	             | 0 << ZCD_INVERT_bp;  /* Setting: disabled */

	ZCD0.INTCTRL = ZCD_INTMODE_RISING_gc; /* Interrupt on rising input signal */
    1a42:	82 83       	std	Z+2, r24	; 0x02

	return 0;
}
    1a44:	80 e0       	ldi	r24, 0x00	; 0
    1a46:	08 95       	ret

00001a48 <ZCD_Falling_init>:
 * \return Initialization status.
 */
int8_t ZCD_Falling_init()
{

	ZCD1.CTRLA = 1 << ZCD_ENABLE_bp     /* Setting: enabled */
    1a48:	e8 ec       	ldi	r30, 0xC8	; 200
    1a4a:	f6 e0       	ldi	r31, 0x06	; 6
    1a4c:	81 e0       	ldi	r24, 0x01	; 1
    1a4e:	80 83       	st	Z, r24
	             | 0 << ZCD_OUTEN_bp    /* Setting: disabled */
	             | 0 << ZCD_RUNSTDBY_bp /* Setting: disabled */
	             | 0 << ZCD_INVERT_bp;  /* Setting: disabled */

	ZCD1.INTCTRL = ZCD_INTMODE_FALLING_gc; /* Interrupt on falling input signal */
    1a50:	82 e0       	ldi	r24, 0x02	; 2
    1a52:	82 83       	std	Z+2, r24	; 0x02

	return 0;
}
    1a54:	80 e0       	ldi	r24, 0x00	; 0
    1a56:	08 95       	ret

00001a58 <BOD_init>:
int8_t BOD_init()
{

	// ccp_write_io((void*)&(BOD.CTRLA),BOD_SLEEP_DIS_gc /* Disabled */);

	BOD.INTCTRL = 0 << BOD_VLMIE_bp        /* voltage level monitor interrrupt enable: disabled */
    1a58:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
	              | BOD_VLMCFG_FALLING_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
    1a5c:	80 e0       	ldi	r24, 0x00	; 0
    1a5e:	08 95       	ret

00001a60 <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
    1a60:	45 e8       	ldi	r20, 0x85	; 133
    1a62:	68 ed       	ldi	r22, 0xD8	; 216
    1a64:	8c e7       	ldi	r24, 0x7C	; 124
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <protected_write_io>
    1a6c:	41 e8       	ldi	r20, 0x81	; 129
    1a6e:	68 ed       	ldi	r22, 0xD8	; 216
    1a70:	80 e7       	ldi	r24, 0x70	; 112
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <protected_write_io>
    1a78:	4c e0       	ldi	r20, 0x0C	; 12
    1a7a:	68 ed       	ldi	r22, 0xD8	; 216
    1a7c:	80 e8       	ldi	r24, 0x80	; 128
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <protected_write_io>
    1a84:	44 e2       	ldi	r20, 0x24	; 36
    1a86:	68 ed       	ldi	r22, 0xD8	; 216
    1a88:	88 e6       	ldi	r24, 0x68	; 104
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <protected_write_io>
	// ccp_write_io((void*)&(CLKCTRL.MCLKCTRLA),CLKCTRL_CLKSEL_OSCHF_gc /* Internal high-frequency oscillator */
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);


	return 0;
}
    1a90:	80 e0       	ldi	r24, 0x00	; 0
    1a92:	08 95       	ret

00001a94 <CPUINT_init>:
	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
}
    1a94:	80 e0       	ldi	r24, 0x00	; 0
    1a96:	08 95       	ret

00001a98 <protected_write_io>:
	PUBLIC_FUNCTION(protected_write_io)

#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
    1a98:	1b be       	out	0x3b, r1	; 59
#endif
	movw    r30, r24                // Load addr into Z
    1a9a:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
    1a9c:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
    1a9e:	40 83       	st	Z, r20
	ret                             // Return to caller
    1aa0:	08 95       	ret

00001aa2 <vfprintf>:
    1aa2:	2f 92       	push	r2
    1aa4:	3f 92       	push	r3
    1aa6:	4f 92       	push	r4
    1aa8:	5f 92       	push	r5
    1aaa:	6f 92       	push	r6
    1aac:	7f 92       	push	r7
    1aae:	8f 92       	push	r8
    1ab0:	9f 92       	push	r9
    1ab2:	af 92       	push	r10
    1ab4:	bf 92       	push	r11
    1ab6:	cf 92       	push	r12
    1ab8:	df 92       	push	r13
    1aba:	ef 92       	push	r14
    1abc:	ff 92       	push	r15
    1abe:	0f 93       	push	r16
    1ac0:	1f 93       	push	r17
    1ac2:	cf 93       	push	r28
    1ac4:	df 93       	push	r29
    1ac6:	cd b7       	in	r28, 0x3d	; 61
    1ac8:	de b7       	in	r29, 0x3e	; 62
    1aca:	60 97       	sbiw	r28, 0x10	; 16
    1acc:	cd bf       	out	0x3d, r28	; 61
    1ace:	de bf       	out	0x3e, r29	; 62
    1ad0:	7c 01       	movw	r14, r24
    1ad2:	1b 01       	movw	r2, r22
    1ad4:	6a 01       	movw	r12, r20
    1ad6:	fc 01       	movw	r30, r24
    1ad8:	16 82       	std	Z+6, r1	; 0x06
    1ada:	17 82       	std	Z+7, r1	; 0x07
    1adc:	83 81       	ldd	r24, Z+3	; 0x03
    1ade:	81 ff       	sbrs	r24, 1
    1ae0:	44 c3       	rjmp	.+1672   	; 0x216a <vfprintf+0x6c8>
    1ae2:	9e 01       	movw	r18, r28
    1ae4:	2f 5f       	subi	r18, 0xFF	; 255
    1ae6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ae8:	39 01       	movw	r6, r18
    1aea:	f7 01       	movw	r30, r14
    1aec:	93 81       	ldd	r25, Z+3	; 0x03
    1aee:	f1 01       	movw	r30, r2
    1af0:	93 fd       	sbrc	r25, 3
    1af2:	85 91       	lpm	r24, Z+
    1af4:	93 ff       	sbrs	r25, 3
    1af6:	81 91       	ld	r24, Z+
    1af8:	1f 01       	movw	r2, r30
    1afa:	88 23       	and	r24, r24
    1afc:	09 f4       	brne	.+2      	; 0x1b00 <vfprintf+0x5e>
    1afe:	31 c3       	rjmp	.+1634   	; 0x2162 <vfprintf+0x6c0>
    1b00:	85 32       	cpi	r24, 0x25	; 37
    1b02:	39 f4       	brne	.+14     	; 0x1b12 <vfprintf+0x70>
    1b04:	93 fd       	sbrc	r25, 3
    1b06:	85 91       	lpm	r24, Z+
    1b08:	93 ff       	sbrs	r25, 3
    1b0a:	81 91       	ld	r24, Z+
    1b0c:	1f 01       	movw	r2, r30
    1b0e:	85 32       	cpi	r24, 0x25	; 37
    1b10:	39 f4       	brne	.+14     	; 0x1b20 <vfprintf+0x7e>
    1b12:	b7 01       	movw	r22, r14
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	0e 94 32 12 	call	0x2464	; 0x2464 <fputc>
    1b1a:	56 01       	movw	r10, r12
    1b1c:	65 01       	movw	r12, r10
    1b1e:	e5 cf       	rjmp	.-54     	; 0x1aea <vfprintf+0x48>
    1b20:	10 e0       	ldi	r17, 0x00	; 0
    1b22:	51 2c       	mov	r5, r1
    1b24:	91 2c       	mov	r9, r1
    1b26:	ff e1       	ldi	r31, 0x1F	; 31
    1b28:	f9 15       	cp	r31, r9
    1b2a:	d8 f0       	brcs	.+54     	; 0x1b62 <vfprintf+0xc0>
    1b2c:	8b 32       	cpi	r24, 0x2B	; 43
    1b2e:	79 f0       	breq	.+30     	; 0x1b4e <vfprintf+0xac>
    1b30:	38 f4       	brcc	.+14     	; 0x1b40 <vfprintf+0x9e>
    1b32:	80 32       	cpi	r24, 0x20	; 32
    1b34:	79 f0       	breq	.+30     	; 0x1b54 <vfprintf+0xb2>
    1b36:	83 32       	cpi	r24, 0x23	; 35
    1b38:	a1 f4       	brne	.+40     	; 0x1b62 <vfprintf+0xc0>
    1b3a:	f9 2d       	mov	r31, r9
    1b3c:	f0 61       	ori	r31, 0x10	; 16
    1b3e:	2e c0       	rjmp	.+92     	; 0x1b9c <vfprintf+0xfa>
    1b40:	8d 32       	cpi	r24, 0x2D	; 45
    1b42:	61 f0       	breq	.+24     	; 0x1b5c <vfprintf+0xba>
    1b44:	80 33       	cpi	r24, 0x30	; 48
    1b46:	69 f4       	brne	.+26     	; 0x1b62 <vfprintf+0xc0>
    1b48:	29 2d       	mov	r18, r9
    1b4a:	21 60       	ori	r18, 0x01	; 1
    1b4c:	2d c0       	rjmp	.+90     	; 0x1ba8 <vfprintf+0x106>
    1b4e:	39 2d       	mov	r19, r9
    1b50:	32 60       	ori	r19, 0x02	; 2
    1b52:	93 2e       	mov	r9, r19
    1b54:	89 2d       	mov	r24, r9
    1b56:	84 60       	ori	r24, 0x04	; 4
    1b58:	98 2e       	mov	r9, r24
    1b5a:	2a c0       	rjmp	.+84     	; 0x1bb0 <vfprintf+0x10e>
    1b5c:	e9 2d       	mov	r30, r9
    1b5e:	e8 60       	ori	r30, 0x08	; 8
    1b60:	15 c0       	rjmp	.+42     	; 0x1b8c <vfprintf+0xea>
    1b62:	97 fc       	sbrc	r9, 7
    1b64:	2d c0       	rjmp	.+90     	; 0x1bc0 <vfprintf+0x11e>
    1b66:	20 ed       	ldi	r18, 0xD0	; 208
    1b68:	28 0f       	add	r18, r24
    1b6a:	2a 30       	cpi	r18, 0x0A	; 10
    1b6c:	88 f4       	brcc	.+34     	; 0x1b90 <vfprintf+0xee>
    1b6e:	96 fe       	sbrs	r9, 6
    1b70:	06 c0       	rjmp	.+12     	; 0x1b7e <vfprintf+0xdc>
    1b72:	3a e0       	ldi	r19, 0x0A	; 10
    1b74:	13 9f       	mul	r17, r19
    1b76:	20 0d       	add	r18, r0
    1b78:	11 24       	eor	r1, r1
    1b7a:	12 2f       	mov	r17, r18
    1b7c:	19 c0       	rjmp	.+50     	; 0x1bb0 <vfprintf+0x10e>
    1b7e:	8a e0       	ldi	r24, 0x0A	; 10
    1b80:	58 9e       	mul	r5, r24
    1b82:	20 0d       	add	r18, r0
    1b84:	11 24       	eor	r1, r1
    1b86:	52 2e       	mov	r5, r18
    1b88:	e9 2d       	mov	r30, r9
    1b8a:	e0 62       	ori	r30, 0x20	; 32
    1b8c:	9e 2e       	mov	r9, r30
    1b8e:	10 c0       	rjmp	.+32     	; 0x1bb0 <vfprintf+0x10e>
    1b90:	8e 32       	cpi	r24, 0x2E	; 46
    1b92:	31 f4       	brne	.+12     	; 0x1ba0 <vfprintf+0xfe>
    1b94:	96 fc       	sbrc	r9, 6
    1b96:	e5 c2       	rjmp	.+1482   	; 0x2162 <vfprintf+0x6c0>
    1b98:	f9 2d       	mov	r31, r9
    1b9a:	f0 64       	ori	r31, 0x40	; 64
    1b9c:	9f 2e       	mov	r9, r31
    1b9e:	08 c0       	rjmp	.+16     	; 0x1bb0 <vfprintf+0x10e>
    1ba0:	8c 36       	cpi	r24, 0x6C	; 108
    1ba2:	21 f4       	brne	.+8      	; 0x1bac <vfprintf+0x10a>
    1ba4:	29 2d       	mov	r18, r9
    1ba6:	20 68       	ori	r18, 0x80	; 128
    1ba8:	92 2e       	mov	r9, r18
    1baa:	02 c0       	rjmp	.+4      	; 0x1bb0 <vfprintf+0x10e>
    1bac:	88 36       	cpi	r24, 0x68	; 104
    1bae:	41 f4       	brne	.+16     	; 0x1bc0 <vfprintf+0x11e>
    1bb0:	f1 01       	movw	r30, r2
    1bb2:	93 fd       	sbrc	r25, 3
    1bb4:	85 91       	lpm	r24, Z+
    1bb6:	93 ff       	sbrs	r25, 3
    1bb8:	81 91       	ld	r24, Z+
    1bba:	1f 01       	movw	r2, r30
    1bbc:	81 11       	cpse	r24, r1
    1bbe:	b3 cf       	rjmp	.-154    	; 0x1b26 <vfprintf+0x84>
    1bc0:	9b eb       	ldi	r25, 0xBB	; 187
    1bc2:	98 0f       	add	r25, r24
    1bc4:	93 30       	cpi	r25, 0x03	; 3
    1bc6:	20 f4       	brcc	.+8      	; 0x1bd0 <vfprintf+0x12e>
    1bc8:	99 2d       	mov	r25, r9
    1bca:	90 61       	ori	r25, 0x10	; 16
    1bcc:	80 5e       	subi	r24, 0xE0	; 224
    1bce:	07 c0       	rjmp	.+14     	; 0x1bde <vfprintf+0x13c>
    1bd0:	9b e9       	ldi	r25, 0x9B	; 155
    1bd2:	98 0f       	add	r25, r24
    1bd4:	93 30       	cpi	r25, 0x03	; 3
    1bd6:	08 f0       	brcs	.+2      	; 0x1bda <vfprintf+0x138>
    1bd8:	66 c1       	rjmp	.+716    	; 0x1ea6 <vfprintf+0x404>
    1bda:	99 2d       	mov	r25, r9
    1bdc:	9f 7e       	andi	r25, 0xEF	; 239
    1bde:	96 ff       	sbrs	r25, 6
    1be0:	16 e0       	ldi	r17, 0x06	; 6
    1be2:	9f 73       	andi	r25, 0x3F	; 63
    1be4:	99 2e       	mov	r9, r25
    1be6:	85 36       	cpi	r24, 0x65	; 101
    1be8:	19 f4       	brne	.+6      	; 0x1bf0 <vfprintf+0x14e>
    1bea:	90 64       	ori	r25, 0x40	; 64
    1bec:	99 2e       	mov	r9, r25
    1bee:	08 c0       	rjmp	.+16     	; 0x1c00 <vfprintf+0x15e>
    1bf0:	86 36       	cpi	r24, 0x66	; 102
    1bf2:	21 f4       	brne	.+8      	; 0x1bfc <vfprintf+0x15a>
    1bf4:	39 2f       	mov	r19, r25
    1bf6:	30 68       	ori	r19, 0x80	; 128
    1bf8:	93 2e       	mov	r9, r19
    1bfa:	02 c0       	rjmp	.+4      	; 0x1c00 <vfprintf+0x15e>
    1bfc:	11 11       	cpse	r17, r1
    1bfe:	11 50       	subi	r17, 0x01	; 1
    1c00:	97 fe       	sbrs	r9, 7
    1c02:	07 c0       	rjmp	.+14     	; 0x1c12 <vfprintf+0x170>
    1c04:	1c 33       	cpi	r17, 0x3C	; 60
    1c06:	50 f4       	brcc	.+20     	; 0x1c1c <vfprintf+0x17a>
    1c08:	44 24       	eor	r4, r4
    1c0a:	43 94       	inc	r4
    1c0c:	41 0e       	add	r4, r17
    1c0e:	27 e0       	ldi	r18, 0x07	; 7
    1c10:	0b c0       	rjmp	.+22     	; 0x1c28 <vfprintf+0x186>
    1c12:	18 30       	cpi	r17, 0x08	; 8
    1c14:	38 f0       	brcs	.+14     	; 0x1c24 <vfprintf+0x182>
    1c16:	27 e0       	ldi	r18, 0x07	; 7
    1c18:	17 e0       	ldi	r17, 0x07	; 7
    1c1a:	05 c0       	rjmp	.+10     	; 0x1c26 <vfprintf+0x184>
    1c1c:	27 e0       	ldi	r18, 0x07	; 7
    1c1e:	9c e3       	ldi	r25, 0x3C	; 60
    1c20:	49 2e       	mov	r4, r25
    1c22:	02 c0       	rjmp	.+4      	; 0x1c28 <vfprintf+0x186>
    1c24:	21 2f       	mov	r18, r17
    1c26:	41 2c       	mov	r4, r1
    1c28:	56 01       	movw	r10, r12
    1c2a:	84 e0       	ldi	r24, 0x04	; 4
    1c2c:	a8 0e       	add	r10, r24
    1c2e:	b1 1c       	adc	r11, r1
    1c30:	f6 01       	movw	r30, r12
    1c32:	60 81       	ld	r22, Z
    1c34:	71 81       	ldd	r23, Z+1	; 0x01
    1c36:	82 81       	ldd	r24, Z+2	; 0x02
    1c38:	93 81       	ldd	r25, Z+3	; 0x03
    1c3a:	04 2d       	mov	r16, r4
    1c3c:	a3 01       	movw	r20, r6
    1c3e:	0e 94 44 11 	call	0x2288	; 0x2288 <__ftoa_engine>
    1c42:	6c 01       	movw	r12, r24
    1c44:	f9 81       	ldd	r31, Y+1	; 0x01
    1c46:	fc 87       	std	Y+12, r31	; 0x0c
    1c48:	f0 ff       	sbrs	r31, 0
    1c4a:	02 c0       	rjmp	.+4      	; 0x1c50 <vfprintf+0x1ae>
    1c4c:	f3 ff       	sbrs	r31, 3
    1c4e:	06 c0       	rjmp	.+12     	; 0x1c5c <vfprintf+0x1ba>
    1c50:	91 fc       	sbrc	r9, 1
    1c52:	06 c0       	rjmp	.+12     	; 0x1c60 <vfprintf+0x1be>
    1c54:	92 fe       	sbrs	r9, 2
    1c56:	06 c0       	rjmp	.+12     	; 0x1c64 <vfprintf+0x1c2>
    1c58:	00 e2       	ldi	r16, 0x20	; 32
    1c5a:	05 c0       	rjmp	.+10     	; 0x1c66 <vfprintf+0x1c4>
    1c5c:	0d e2       	ldi	r16, 0x2D	; 45
    1c5e:	03 c0       	rjmp	.+6      	; 0x1c66 <vfprintf+0x1c4>
    1c60:	0b e2       	ldi	r16, 0x2B	; 43
    1c62:	01 c0       	rjmp	.+2      	; 0x1c66 <vfprintf+0x1c4>
    1c64:	00 e0       	ldi	r16, 0x00	; 0
    1c66:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c68:	8c 70       	andi	r24, 0x0C	; 12
    1c6a:	19 f0       	breq	.+6      	; 0x1c72 <vfprintf+0x1d0>
    1c6c:	01 11       	cpse	r16, r1
    1c6e:	5a c2       	rjmp	.+1204   	; 0x2124 <vfprintf+0x682>
    1c70:	9b c2       	rjmp	.+1334   	; 0x21a8 <vfprintf+0x706>
    1c72:	97 fe       	sbrs	r9, 7
    1c74:	10 c0       	rjmp	.+32     	; 0x1c96 <vfprintf+0x1f4>
    1c76:	4c 0c       	add	r4, r12
    1c78:	fc 85       	ldd	r31, Y+12	; 0x0c
    1c7a:	f4 ff       	sbrs	r31, 4
    1c7c:	04 c0       	rjmp	.+8      	; 0x1c86 <vfprintf+0x1e4>
    1c7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c80:	81 33       	cpi	r24, 0x31	; 49
    1c82:	09 f4       	brne	.+2      	; 0x1c86 <vfprintf+0x1e4>
    1c84:	4a 94       	dec	r4
    1c86:	14 14       	cp	r1, r4
    1c88:	74 f5       	brge	.+92     	; 0x1ce6 <vfprintf+0x244>
    1c8a:	28 e0       	ldi	r18, 0x08	; 8
    1c8c:	24 15       	cp	r18, r4
    1c8e:	78 f5       	brcc	.+94     	; 0x1cee <vfprintf+0x24c>
    1c90:	88 e0       	ldi	r24, 0x08	; 8
    1c92:	48 2e       	mov	r4, r24
    1c94:	2c c0       	rjmp	.+88     	; 0x1cee <vfprintf+0x24c>
    1c96:	96 fc       	sbrc	r9, 6
    1c98:	2a c0       	rjmp	.+84     	; 0x1cee <vfprintf+0x24c>
    1c9a:	81 2f       	mov	r24, r17
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	8c 15       	cp	r24, r12
    1ca0:	9d 05       	cpc	r25, r13
    1ca2:	9c f0       	brlt	.+38     	; 0x1cca <vfprintf+0x228>
    1ca4:	3c ef       	ldi	r19, 0xFC	; 252
    1ca6:	c3 16       	cp	r12, r19
    1ca8:	3f ef       	ldi	r19, 0xFF	; 255
    1caa:	d3 06       	cpc	r13, r19
    1cac:	74 f0       	brlt	.+28     	; 0x1cca <vfprintf+0x228>
    1cae:	89 2d       	mov	r24, r9
    1cb0:	80 68       	ori	r24, 0x80	; 128
    1cb2:	98 2e       	mov	r9, r24
    1cb4:	0a c0       	rjmp	.+20     	; 0x1cca <vfprintf+0x228>
    1cb6:	e2 e0       	ldi	r30, 0x02	; 2
    1cb8:	f0 e0       	ldi	r31, 0x00	; 0
    1cba:	ec 0f       	add	r30, r28
    1cbc:	fd 1f       	adc	r31, r29
    1cbe:	e1 0f       	add	r30, r17
    1cc0:	f1 1d       	adc	r31, r1
    1cc2:	80 81       	ld	r24, Z
    1cc4:	80 33       	cpi	r24, 0x30	; 48
    1cc6:	19 f4       	brne	.+6      	; 0x1cce <vfprintf+0x22c>
    1cc8:	11 50       	subi	r17, 0x01	; 1
    1cca:	11 11       	cpse	r17, r1
    1ccc:	f4 cf       	rjmp	.-24     	; 0x1cb6 <vfprintf+0x214>
    1cce:	97 fe       	sbrs	r9, 7
    1cd0:	0e c0       	rjmp	.+28     	; 0x1cee <vfprintf+0x24c>
    1cd2:	44 24       	eor	r4, r4
    1cd4:	43 94       	inc	r4
    1cd6:	41 0e       	add	r4, r17
    1cd8:	81 2f       	mov	r24, r17
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	c8 16       	cp	r12, r24
    1cde:	d9 06       	cpc	r13, r25
    1ce0:	2c f4       	brge	.+10     	; 0x1cec <vfprintf+0x24a>
    1ce2:	1c 19       	sub	r17, r12
    1ce4:	04 c0       	rjmp	.+8      	; 0x1cee <vfprintf+0x24c>
    1ce6:	44 24       	eor	r4, r4
    1ce8:	43 94       	inc	r4
    1cea:	01 c0       	rjmp	.+2      	; 0x1cee <vfprintf+0x24c>
    1cec:	10 e0       	ldi	r17, 0x00	; 0
    1cee:	97 fe       	sbrs	r9, 7
    1cf0:	06 c0       	rjmp	.+12     	; 0x1cfe <vfprintf+0x25c>
    1cf2:	1c 14       	cp	r1, r12
    1cf4:	1d 04       	cpc	r1, r13
    1cf6:	34 f4       	brge	.+12     	; 0x1d04 <vfprintf+0x262>
    1cf8:	c6 01       	movw	r24, r12
    1cfa:	01 96       	adiw	r24, 0x01	; 1
    1cfc:	05 c0       	rjmp	.+10     	; 0x1d08 <vfprintf+0x266>
    1cfe:	85 e0       	ldi	r24, 0x05	; 5
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	02 c0       	rjmp	.+4      	; 0x1d08 <vfprintf+0x266>
    1d04:	81 e0       	ldi	r24, 0x01	; 1
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	01 11       	cpse	r16, r1
    1d0a:	01 96       	adiw	r24, 0x01	; 1
    1d0c:	11 23       	and	r17, r17
    1d0e:	31 f0       	breq	.+12     	; 0x1d1c <vfprintf+0x27a>
    1d10:	21 2f       	mov	r18, r17
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	2f 5f       	subi	r18, 0xFF	; 255
    1d16:	3f 4f       	sbci	r19, 0xFF	; 255
    1d18:	82 0f       	add	r24, r18
    1d1a:	93 1f       	adc	r25, r19
    1d1c:	25 2d       	mov	r18, r5
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	82 17       	cp	r24, r18
    1d22:	93 07       	cpc	r25, r19
    1d24:	14 f4       	brge	.+4      	; 0x1d2a <vfprintf+0x288>
    1d26:	58 1a       	sub	r5, r24
    1d28:	01 c0       	rjmp	.+2      	; 0x1d2c <vfprintf+0x28a>
    1d2a:	51 2c       	mov	r5, r1
    1d2c:	89 2d       	mov	r24, r9
    1d2e:	89 70       	andi	r24, 0x09	; 9
    1d30:	49 f4       	brne	.+18     	; 0x1d44 <vfprintf+0x2a2>
    1d32:	55 20       	and	r5, r5
    1d34:	39 f0       	breq	.+14     	; 0x1d44 <vfprintf+0x2a2>
    1d36:	b7 01       	movw	r22, r14
    1d38:	80 e2       	ldi	r24, 0x20	; 32
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	0e 94 32 12 	call	0x2464	; 0x2464 <fputc>
    1d40:	5a 94       	dec	r5
    1d42:	f7 cf       	rjmp	.-18     	; 0x1d32 <vfprintf+0x290>
    1d44:	00 23       	and	r16, r16
    1d46:	29 f0       	breq	.+10     	; 0x1d52 <vfprintf+0x2b0>
    1d48:	b7 01       	movw	r22, r14
    1d4a:	80 2f       	mov	r24, r16
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	0e 94 32 12 	call	0x2464	; 0x2464 <fputc>
    1d52:	93 fc       	sbrc	r9, 3
    1d54:	09 c0       	rjmp	.+18     	; 0x1d68 <vfprintf+0x2c6>
    1d56:	55 20       	and	r5, r5
    1d58:	39 f0       	breq	.+14     	; 0x1d68 <vfprintf+0x2c6>
    1d5a:	b7 01       	movw	r22, r14
    1d5c:	80 e3       	ldi	r24, 0x30	; 48
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	0e 94 32 12 	call	0x2464	; 0x2464 <fputc>
    1d64:	5a 94       	dec	r5
    1d66:	f7 cf       	rjmp	.-18     	; 0x1d56 <vfprintf+0x2b4>
    1d68:	97 fe       	sbrs	r9, 7
    1d6a:	4c c0       	rjmp	.+152    	; 0x1e04 <vfprintf+0x362>
    1d6c:	46 01       	movw	r8, r12
    1d6e:	d7 fe       	sbrs	r13, 7
    1d70:	02 c0       	rjmp	.+4      	; 0x1d76 <vfprintf+0x2d4>
    1d72:	81 2c       	mov	r8, r1
    1d74:	91 2c       	mov	r9, r1
    1d76:	c6 01       	movw	r24, r12
    1d78:	88 19       	sub	r24, r8
    1d7a:	99 09       	sbc	r25, r9
    1d7c:	f3 01       	movw	r30, r6
    1d7e:	e8 0f       	add	r30, r24
    1d80:	f9 1f       	adc	r31, r25
    1d82:	ed 87       	std	Y+13, r30	; 0x0d
    1d84:	fe 87       	std	Y+14, r31	; 0x0e
    1d86:	96 01       	movw	r18, r12
    1d88:	24 19       	sub	r18, r4
    1d8a:	31 09       	sbc	r19, r1
    1d8c:	2f 87       	std	Y+15, r18	; 0x0f
    1d8e:	38 8b       	std	Y+16, r19	; 0x10
    1d90:	01 2f       	mov	r16, r17
    1d92:	10 e0       	ldi	r17, 0x00	; 0
    1d94:	11 95       	neg	r17
    1d96:	01 95       	neg	r16
    1d98:	11 09       	sbc	r17, r1
    1d9a:	3f ef       	ldi	r19, 0xFF	; 255
    1d9c:	83 16       	cp	r8, r19
    1d9e:	93 06       	cpc	r9, r19
    1da0:	29 f4       	brne	.+10     	; 0x1dac <vfprintf+0x30a>
    1da2:	b7 01       	movw	r22, r14
    1da4:	8e e2       	ldi	r24, 0x2E	; 46
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	0e 94 32 12 	call	0x2464	; 0x2464 <fputc>
    1dac:	c8 14       	cp	r12, r8
    1dae:	d9 04       	cpc	r13, r9
    1db0:	4c f0       	brlt	.+18     	; 0x1dc4 <vfprintf+0x322>
    1db2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1db4:	98 89       	ldd	r25, Y+16	; 0x10
    1db6:	88 15       	cp	r24, r8
    1db8:	99 05       	cpc	r25, r9
    1dba:	24 f4       	brge	.+8      	; 0x1dc4 <vfprintf+0x322>
    1dbc:	ed 85       	ldd	r30, Y+13	; 0x0d
    1dbe:	fe 85       	ldd	r31, Y+14	; 0x0e
    1dc0:	81 81       	ldd	r24, Z+1	; 0x01
    1dc2:	01 c0       	rjmp	.+2      	; 0x1dc6 <vfprintf+0x324>
    1dc4:	80 e3       	ldi	r24, 0x30	; 48
    1dc6:	f1 e0       	ldi	r31, 0x01	; 1
    1dc8:	8f 1a       	sub	r8, r31
    1dca:	91 08       	sbc	r9, r1
    1dcc:	2d 85       	ldd	r18, Y+13	; 0x0d
    1dce:	3e 85       	ldd	r19, Y+14	; 0x0e
    1dd0:	2f 5f       	subi	r18, 0xFF	; 255
    1dd2:	3f 4f       	sbci	r19, 0xFF	; 255
    1dd4:	2d 87       	std	Y+13, r18	; 0x0d
    1dd6:	3e 87       	std	Y+14, r19	; 0x0e
    1dd8:	80 16       	cp	r8, r16
    1dda:	91 06       	cpc	r9, r17
    1ddc:	2c f0       	brlt	.+10     	; 0x1de8 <vfprintf+0x346>
    1dde:	b7 01       	movw	r22, r14
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	0e 94 32 12 	call	0x2464	; 0x2464 <fputc>
    1de6:	d9 cf       	rjmp	.-78     	; 0x1d9a <vfprintf+0x2f8>
    1de8:	c8 14       	cp	r12, r8
    1dea:	d9 04       	cpc	r13, r9
    1dec:	41 f4       	brne	.+16     	; 0x1dfe <vfprintf+0x35c>
    1dee:	9a 81       	ldd	r25, Y+2	; 0x02
    1df0:	96 33       	cpi	r25, 0x36	; 54
    1df2:	20 f4       	brcc	.+8      	; 0x1dfc <vfprintf+0x35a>
    1df4:	95 33       	cpi	r25, 0x35	; 53
    1df6:	19 f4       	brne	.+6      	; 0x1dfe <vfprintf+0x35c>
    1df8:	3c 85       	ldd	r19, Y+12	; 0x0c
    1dfa:	34 ff       	sbrs	r19, 4
    1dfc:	81 e3       	ldi	r24, 0x31	; 49
    1dfe:	b7 01       	movw	r22, r14
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	4e c0       	rjmp	.+156    	; 0x1ea0 <vfprintf+0x3fe>
    1e04:	8a 81       	ldd	r24, Y+2	; 0x02
    1e06:	81 33       	cpi	r24, 0x31	; 49
    1e08:	19 f0       	breq	.+6      	; 0x1e10 <vfprintf+0x36e>
    1e0a:	9c 85       	ldd	r25, Y+12	; 0x0c
    1e0c:	9f 7e       	andi	r25, 0xEF	; 239
    1e0e:	9c 87       	std	Y+12, r25	; 0x0c
    1e10:	b7 01       	movw	r22, r14
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	0e 94 32 12 	call	0x2464	; 0x2464 <fputc>
    1e18:	11 11       	cpse	r17, r1
    1e1a:	05 c0       	rjmp	.+10     	; 0x1e26 <vfprintf+0x384>
    1e1c:	94 fc       	sbrc	r9, 4
    1e1e:	18 c0       	rjmp	.+48     	; 0x1e50 <vfprintf+0x3ae>
    1e20:	85 e6       	ldi	r24, 0x65	; 101
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	17 c0       	rjmp	.+46     	; 0x1e54 <vfprintf+0x3b2>
    1e26:	b7 01       	movw	r22, r14
    1e28:	8e e2       	ldi	r24, 0x2E	; 46
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	0e 94 32 12 	call	0x2464	; 0x2464 <fputc>
    1e30:	1e 5f       	subi	r17, 0xFE	; 254
    1e32:	82 e0       	ldi	r24, 0x02	; 2
    1e34:	01 e0       	ldi	r16, 0x01	; 1
    1e36:	08 0f       	add	r16, r24
    1e38:	f3 01       	movw	r30, r6
    1e3a:	e8 0f       	add	r30, r24
    1e3c:	f1 1d       	adc	r31, r1
    1e3e:	80 81       	ld	r24, Z
    1e40:	b7 01       	movw	r22, r14
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	0e 94 32 12 	call	0x2464	; 0x2464 <fputc>
    1e48:	80 2f       	mov	r24, r16
    1e4a:	01 13       	cpse	r16, r17
    1e4c:	f3 cf       	rjmp	.-26     	; 0x1e34 <vfprintf+0x392>
    1e4e:	e6 cf       	rjmp	.-52     	; 0x1e1c <vfprintf+0x37a>
    1e50:	85 e4       	ldi	r24, 0x45	; 69
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	b7 01       	movw	r22, r14
    1e56:	0e 94 32 12 	call	0x2464	; 0x2464 <fputc>
    1e5a:	d7 fc       	sbrc	r13, 7
    1e5c:	06 c0       	rjmp	.+12     	; 0x1e6a <vfprintf+0x3c8>
    1e5e:	c1 14       	cp	r12, r1
    1e60:	d1 04       	cpc	r13, r1
    1e62:	41 f4       	brne	.+16     	; 0x1e74 <vfprintf+0x3d2>
    1e64:	ec 85       	ldd	r30, Y+12	; 0x0c
    1e66:	e4 ff       	sbrs	r30, 4
    1e68:	05 c0       	rjmp	.+10     	; 0x1e74 <vfprintf+0x3d2>
    1e6a:	d1 94       	neg	r13
    1e6c:	c1 94       	neg	r12
    1e6e:	d1 08       	sbc	r13, r1
    1e70:	8d e2       	ldi	r24, 0x2D	; 45
    1e72:	01 c0       	rjmp	.+2      	; 0x1e76 <vfprintf+0x3d4>
    1e74:	8b e2       	ldi	r24, 0x2B	; 43
    1e76:	b7 01       	movw	r22, r14
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	0e 94 32 12 	call	0x2464	; 0x2464 <fputc>
    1e7e:	80 e3       	ldi	r24, 0x30	; 48
    1e80:	2a e0       	ldi	r18, 0x0A	; 10
    1e82:	c2 16       	cp	r12, r18
    1e84:	d1 04       	cpc	r13, r1
    1e86:	2c f0       	brlt	.+10     	; 0x1e92 <vfprintf+0x3f0>
    1e88:	8f 5f       	subi	r24, 0xFF	; 255
    1e8a:	fa e0       	ldi	r31, 0x0A	; 10
    1e8c:	cf 1a       	sub	r12, r31
    1e8e:	d1 08       	sbc	r13, r1
    1e90:	f7 cf       	rjmp	.-18     	; 0x1e80 <vfprintf+0x3de>
    1e92:	b7 01       	movw	r22, r14
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	0e 94 32 12 	call	0x2464	; 0x2464 <fputc>
    1e9a:	b7 01       	movw	r22, r14
    1e9c:	c6 01       	movw	r24, r12
    1e9e:	c0 96       	adiw	r24, 0x30	; 48
    1ea0:	0e 94 32 12 	call	0x2464	; 0x2464 <fputc>
    1ea4:	54 c1       	rjmp	.+680    	; 0x214e <vfprintf+0x6ac>
    1ea6:	83 36       	cpi	r24, 0x63	; 99
    1ea8:	31 f0       	breq	.+12     	; 0x1eb6 <vfprintf+0x414>
    1eaa:	83 37       	cpi	r24, 0x73	; 115
    1eac:	79 f0       	breq	.+30     	; 0x1ecc <vfprintf+0x42a>
    1eae:	83 35       	cpi	r24, 0x53	; 83
    1eb0:	09 f0       	breq	.+2      	; 0x1eb4 <vfprintf+0x412>
    1eb2:	56 c0       	rjmp	.+172    	; 0x1f60 <vfprintf+0x4be>
    1eb4:	20 c0       	rjmp	.+64     	; 0x1ef6 <vfprintf+0x454>
    1eb6:	56 01       	movw	r10, r12
    1eb8:	32 e0       	ldi	r19, 0x02	; 2
    1eba:	a3 0e       	add	r10, r19
    1ebc:	b1 1c       	adc	r11, r1
    1ebe:	f6 01       	movw	r30, r12
    1ec0:	80 81       	ld	r24, Z
    1ec2:	89 83       	std	Y+1, r24	; 0x01
    1ec4:	01 e0       	ldi	r16, 0x01	; 1
    1ec6:	10 e0       	ldi	r17, 0x00	; 0
    1ec8:	63 01       	movw	r12, r6
    1eca:	12 c0       	rjmp	.+36     	; 0x1ef0 <vfprintf+0x44e>
    1ecc:	56 01       	movw	r10, r12
    1ece:	f2 e0       	ldi	r31, 0x02	; 2
    1ed0:	af 0e       	add	r10, r31
    1ed2:	b1 1c       	adc	r11, r1
    1ed4:	f6 01       	movw	r30, r12
    1ed6:	c0 80       	ld	r12, Z
    1ed8:	d1 80       	ldd	r13, Z+1	; 0x01
    1eda:	96 fe       	sbrs	r9, 6
    1edc:	03 c0       	rjmp	.+6      	; 0x1ee4 <vfprintf+0x442>
    1ede:	61 2f       	mov	r22, r17
    1ee0:	70 e0       	ldi	r23, 0x00	; 0
    1ee2:	02 c0       	rjmp	.+4      	; 0x1ee8 <vfprintf+0x446>
    1ee4:	6f ef       	ldi	r22, 0xFF	; 255
    1ee6:	7f ef       	ldi	r23, 0xFF	; 255
    1ee8:	c6 01       	movw	r24, r12
    1eea:	0e 94 27 12 	call	0x244e	; 0x244e <strnlen>
    1eee:	8c 01       	movw	r16, r24
    1ef0:	f9 2d       	mov	r31, r9
    1ef2:	ff 77       	andi	r31, 0x7F	; 127
    1ef4:	14 c0       	rjmp	.+40     	; 0x1f1e <vfprintf+0x47c>
    1ef6:	56 01       	movw	r10, r12
    1ef8:	22 e0       	ldi	r18, 0x02	; 2
    1efa:	a2 0e       	add	r10, r18
    1efc:	b1 1c       	adc	r11, r1
    1efe:	f6 01       	movw	r30, r12
    1f00:	c0 80       	ld	r12, Z
    1f02:	d1 80       	ldd	r13, Z+1	; 0x01
    1f04:	96 fe       	sbrs	r9, 6
    1f06:	03 c0       	rjmp	.+6      	; 0x1f0e <vfprintf+0x46c>
    1f08:	61 2f       	mov	r22, r17
    1f0a:	70 e0       	ldi	r23, 0x00	; 0
    1f0c:	02 c0       	rjmp	.+4      	; 0x1f12 <vfprintf+0x470>
    1f0e:	6f ef       	ldi	r22, 0xFF	; 255
    1f10:	7f ef       	ldi	r23, 0xFF	; 255
    1f12:	c6 01       	movw	r24, r12
    1f14:	0e 94 1c 12 	call	0x2438	; 0x2438 <strnlen_P>
    1f18:	8c 01       	movw	r16, r24
    1f1a:	f9 2d       	mov	r31, r9
    1f1c:	f0 68       	ori	r31, 0x80	; 128
    1f1e:	9f 2e       	mov	r9, r31
    1f20:	f3 fd       	sbrc	r31, 3
    1f22:	1a c0       	rjmp	.+52     	; 0x1f58 <vfprintf+0x4b6>
    1f24:	85 2d       	mov	r24, r5
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	08 17       	cp	r16, r24
    1f2a:	19 07       	cpc	r17, r25
    1f2c:	a8 f4       	brcc	.+42     	; 0x1f58 <vfprintf+0x4b6>
    1f2e:	b7 01       	movw	r22, r14
    1f30:	80 e2       	ldi	r24, 0x20	; 32
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	0e 94 32 12 	call	0x2464	; 0x2464 <fputc>
    1f38:	5a 94       	dec	r5
    1f3a:	f4 cf       	rjmp	.-24     	; 0x1f24 <vfprintf+0x482>
    1f3c:	f6 01       	movw	r30, r12
    1f3e:	97 fc       	sbrc	r9, 7
    1f40:	85 91       	lpm	r24, Z+
    1f42:	97 fe       	sbrs	r9, 7
    1f44:	81 91       	ld	r24, Z+
    1f46:	6f 01       	movw	r12, r30
    1f48:	b7 01       	movw	r22, r14
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	0e 94 32 12 	call	0x2464	; 0x2464 <fputc>
    1f50:	51 10       	cpse	r5, r1
    1f52:	5a 94       	dec	r5
    1f54:	01 50       	subi	r16, 0x01	; 1
    1f56:	11 09       	sbc	r17, r1
    1f58:	01 15       	cp	r16, r1
    1f5a:	11 05       	cpc	r17, r1
    1f5c:	79 f7       	brne	.-34     	; 0x1f3c <vfprintf+0x49a>
    1f5e:	f7 c0       	rjmp	.+494    	; 0x214e <vfprintf+0x6ac>
    1f60:	84 36       	cpi	r24, 0x64	; 100
    1f62:	11 f0       	breq	.+4      	; 0x1f68 <vfprintf+0x4c6>
    1f64:	89 36       	cpi	r24, 0x69	; 105
    1f66:	61 f5       	brne	.+88     	; 0x1fc0 <vfprintf+0x51e>
    1f68:	56 01       	movw	r10, r12
    1f6a:	97 fe       	sbrs	r9, 7
    1f6c:	09 c0       	rjmp	.+18     	; 0x1f80 <vfprintf+0x4de>
    1f6e:	24 e0       	ldi	r18, 0x04	; 4
    1f70:	a2 0e       	add	r10, r18
    1f72:	b1 1c       	adc	r11, r1
    1f74:	f6 01       	movw	r30, r12
    1f76:	60 81       	ld	r22, Z
    1f78:	71 81       	ldd	r23, Z+1	; 0x01
    1f7a:	82 81       	ldd	r24, Z+2	; 0x02
    1f7c:	93 81       	ldd	r25, Z+3	; 0x03
    1f7e:	0a c0       	rjmp	.+20     	; 0x1f94 <vfprintf+0x4f2>
    1f80:	f2 e0       	ldi	r31, 0x02	; 2
    1f82:	af 0e       	add	r10, r31
    1f84:	b1 1c       	adc	r11, r1
    1f86:	f6 01       	movw	r30, r12
    1f88:	60 81       	ld	r22, Z
    1f8a:	71 81       	ldd	r23, Z+1	; 0x01
    1f8c:	07 2e       	mov	r0, r23
    1f8e:	00 0c       	add	r0, r0
    1f90:	88 0b       	sbc	r24, r24
    1f92:	99 0b       	sbc	r25, r25
    1f94:	f9 2d       	mov	r31, r9
    1f96:	ff 76       	andi	r31, 0x6F	; 111
    1f98:	9f 2e       	mov	r9, r31
    1f9a:	97 ff       	sbrs	r25, 7
    1f9c:	09 c0       	rjmp	.+18     	; 0x1fb0 <vfprintf+0x50e>
    1f9e:	90 95       	com	r25
    1fa0:	80 95       	com	r24
    1fa2:	70 95       	com	r23
    1fa4:	61 95       	neg	r22
    1fa6:	7f 4f       	sbci	r23, 0xFF	; 255
    1fa8:	8f 4f       	sbci	r24, 0xFF	; 255
    1faa:	9f 4f       	sbci	r25, 0xFF	; 255
    1fac:	f0 68       	ori	r31, 0x80	; 128
    1fae:	9f 2e       	mov	r9, r31
    1fb0:	2a e0       	ldi	r18, 0x0A	; 10
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	a3 01       	movw	r20, r6
    1fb6:	0e 94 82 12 	call	0x2504	; 0x2504 <__ultoa_invert>
    1fba:	c8 2e       	mov	r12, r24
    1fbc:	c6 18       	sub	r12, r6
    1fbe:	3f c0       	rjmp	.+126    	; 0x203e <vfprintf+0x59c>
    1fc0:	09 2d       	mov	r16, r9
    1fc2:	85 37       	cpi	r24, 0x75	; 117
    1fc4:	21 f4       	brne	.+8      	; 0x1fce <vfprintf+0x52c>
    1fc6:	0f 7e       	andi	r16, 0xEF	; 239
    1fc8:	2a e0       	ldi	r18, 0x0A	; 10
    1fca:	30 e0       	ldi	r19, 0x00	; 0
    1fcc:	1d c0       	rjmp	.+58     	; 0x2008 <vfprintf+0x566>
    1fce:	09 7f       	andi	r16, 0xF9	; 249
    1fd0:	8f 36       	cpi	r24, 0x6F	; 111
    1fd2:	91 f0       	breq	.+36     	; 0x1ff8 <vfprintf+0x556>
    1fd4:	18 f4       	brcc	.+6      	; 0x1fdc <vfprintf+0x53a>
    1fd6:	88 35       	cpi	r24, 0x58	; 88
    1fd8:	59 f0       	breq	.+22     	; 0x1ff0 <vfprintf+0x54e>
    1fda:	c3 c0       	rjmp	.+390    	; 0x2162 <vfprintf+0x6c0>
    1fdc:	80 37       	cpi	r24, 0x70	; 112
    1fde:	19 f0       	breq	.+6      	; 0x1fe6 <vfprintf+0x544>
    1fe0:	88 37       	cpi	r24, 0x78	; 120
    1fe2:	11 f0       	breq	.+4      	; 0x1fe8 <vfprintf+0x546>
    1fe4:	be c0       	rjmp	.+380    	; 0x2162 <vfprintf+0x6c0>
    1fe6:	00 61       	ori	r16, 0x10	; 16
    1fe8:	04 ff       	sbrs	r16, 4
    1fea:	09 c0       	rjmp	.+18     	; 0x1ffe <vfprintf+0x55c>
    1fec:	04 60       	ori	r16, 0x04	; 4
    1fee:	07 c0       	rjmp	.+14     	; 0x1ffe <vfprintf+0x55c>
    1ff0:	94 fe       	sbrs	r9, 4
    1ff2:	08 c0       	rjmp	.+16     	; 0x2004 <vfprintf+0x562>
    1ff4:	06 60       	ori	r16, 0x06	; 6
    1ff6:	06 c0       	rjmp	.+12     	; 0x2004 <vfprintf+0x562>
    1ff8:	28 e0       	ldi	r18, 0x08	; 8
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	05 c0       	rjmp	.+10     	; 0x2008 <vfprintf+0x566>
    1ffe:	20 e1       	ldi	r18, 0x10	; 16
    2000:	30 e0       	ldi	r19, 0x00	; 0
    2002:	02 c0       	rjmp	.+4      	; 0x2008 <vfprintf+0x566>
    2004:	20 e1       	ldi	r18, 0x10	; 16
    2006:	32 e0       	ldi	r19, 0x02	; 2
    2008:	56 01       	movw	r10, r12
    200a:	07 ff       	sbrs	r16, 7
    200c:	09 c0       	rjmp	.+18     	; 0x2020 <vfprintf+0x57e>
    200e:	84 e0       	ldi	r24, 0x04	; 4
    2010:	a8 0e       	add	r10, r24
    2012:	b1 1c       	adc	r11, r1
    2014:	f6 01       	movw	r30, r12
    2016:	60 81       	ld	r22, Z
    2018:	71 81       	ldd	r23, Z+1	; 0x01
    201a:	82 81       	ldd	r24, Z+2	; 0x02
    201c:	93 81       	ldd	r25, Z+3	; 0x03
    201e:	08 c0       	rjmp	.+16     	; 0x2030 <vfprintf+0x58e>
    2020:	f2 e0       	ldi	r31, 0x02	; 2
    2022:	af 0e       	add	r10, r31
    2024:	b1 1c       	adc	r11, r1
    2026:	f6 01       	movw	r30, r12
    2028:	60 81       	ld	r22, Z
    202a:	71 81       	ldd	r23, Z+1	; 0x01
    202c:	80 e0       	ldi	r24, 0x00	; 0
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	a3 01       	movw	r20, r6
    2032:	0e 94 82 12 	call	0x2504	; 0x2504 <__ultoa_invert>
    2036:	c8 2e       	mov	r12, r24
    2038:	c6 18       	sub	r12, r6
    203a:	0f 77       	andi	r16, 0x7F	; 127
    203c:	90 2e       	mov	r9, r16
    203e:	96 fe       	sbrs	r9, 6
    2040:	0b c0       	rjmp	.+22     	; 0x2058 <vfprintf+0x5b6>
    2042:	09 2d       	mov	r16, r9
    2044:	0e 7f       	andi	r16, 0xFE	; 254
    2046:	c1 16       	cp	r12, r17
    2048:	50 f4       	brcc	.+20     	; 0x205e <vfprintf+0x5bc>
    204a:	94 fe       	sbrs	r9, 4
    204c:	0a c0       	rjmp	.+20     	; 0x2062 <vfprintf+0x5c0>
    204e:	92 fc       	sbrc	r9, 2
    2050:	08 c0       	rjmp	.+16     	; 0x2062 <vfprintf+0x5c0>
    2052:	09 2d       	mov	r16, r9
    2054:	0e 7e       	andi	r16, 0xEE	; 238
    2056:	05 c0       	rjmp	.+10     	; 0x2062 <vfprintf+0x5c0>
    2058:	dc 2c       	mov	r13, r12
    205a:	09 2d       	mov	r16, r9
    205c:	03 c0       	rjmp	.+6      	; 0x2064 <vfprintf+0x5c2>
    205e:	dc 2c       	mov	r13, r12
    2060:	01 c0       	rjmp	.+2      	; 0x2064 <vfprintf+0x5c2>
    2062:	d1 2e       	mov	r13, r17
    2064:	04 ff       	sbrs	r16, 4
    2066:	0d c0       	rjmp	.+26     	; 0x2082 <vfprintf+0x5e0>
    2068:	fe 01       	movw	r30, r28
    206a:	ec 0d       	add	r30, r12
    206c:	f1 1d       	adc	r31, r1
    206e:	80 81       	ld	r24, Z
    2070:	80 33       	cpi	r24, 0x30	; 48
    2072:	11 f4       	brne	.+4      	; 0x2078 <vfprintf+0x5d6>
    2074:	09 7e       	andi	r16, 0xE9	; 233
    2076:	09 c0       	rjmp	.+18     	; 0x208a <vfprintf+0x5e8>
    2078:	02 ff       	sbrs	r16, 2
    207a:	06 c0       	rjmp	.+12     	; 0x2088 <vfprintf+0x5e6>
    207c:	d3 94       	inc	r13
    207e:	d3 94       	inc	r13
    2080:	04 c0       	rjmp	.+8      	; 0x208a <vfprintf+0x5e8>
    2082:	80 2f       	mov	r24, r16
    2084:	86 78       	andi	r24, 0x86	; 134
    2086:	09 f0       	breq	.+2      	; 0x208a <vfprintf+0x5e8>
    2088:	d3 94       	inc	r13
    208a:	03 fd       	sbrc	r16, 3
    208c:	11 c0       	rjmp	.+34     	; 0x20b0 <vfprintf+0x60e>
    208e:	00 ff       	sbrs	r16, 0
    2090:	06 c0       	rjmp	.+12     	; 0x209e <vfprintf+0x5fc>
    2092:	1c 2d       	mov	r17, r12
    2094:	d5 14       	cp	r13, r5
    2096:	80 f4       	brcc	.+32     	; 0x20b8 <vfprintf+0x616>
    2098:	15 0d       	add	r17, r5
    209a:	1d 19       	sub	r17, r13
    209c:	0d c0       	rjmp	.+26     	; 0x20b8 <vfprintf+0x616>
    209e:	d5 14       	cp	r13, r5
    20a0:	58 f4       	brcc	.+22     	; 0x20b8 <vfprintf+0x616>
    20a2:	b7 01       	movw	r22, r14
    20a4:	80 e2       	ldi	r24, 0x20	; 32
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	0e 94 32 12 	call	0x2464	; 0x2464 <fputc>
    20ac:	d3 94       	inc	r13
    20ae:	f7 cf       	rjmp	.-18     	; 0x209e <vfprintf+0x5fc>
    20b0:	d5 14       	cp	r13, r5
    20b2:	10 f4       	brcc	.+4      	; 0x20b8 <vfprintf+0x616>
    20b4:	5d 18       	sub	r5, r13
    20b6:	01 c0       	rjmp	.+2      	; 0x20ba <vfprintf+0x618>
    20b8:	51 2c       	mov	r5, r1
    20ba:	04 ff       	sbrs	r16, 4
    20bc:	10 c0       	rjmp	.+32     	; 0x20de <vfprintf+0x63c>
    20be:	b7 01       	movw	r22, r14
    20c0:	80 e3       	ldi	r24, 0x30	; 48
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	0e 94 32 12 	call	0x2464	; 0x2464 <fputc>
    20c8:	02 ff       	sbrs	r16, 2
    20ca:	17 c0       	rjmp	.+46     	; 0x20fa <vfprintf+0x658>
    20cc:	01 fd       	sbrc	r16, 1
    20ce:	03 c0       	rjmp	.+6      	; 0x20d6 <vfprintf+0x634>
    20d0:	88 e7       	ldi	r24, 0x78	; 120
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	02 c0       	rjmp	.+4      	; 0x20da <vfprintf+0x638>
    20d6:	88 e5       	ldi	r24, 0x58	; 88
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	b7 01       	movw	r22, r14
    20dc:	0c c0       	rjmp	.+24     	; 0x20f6 <vfprintf+0x654>
    20de:	80 2f       	mov	r24, r16
    20e0:	86 78       	andi	r24, 0x86	; 134
    20e2:	59 f0       	breq	.+22     	; 0x20fa <vfprintf+0x658>
    20e4:	01 ff       	sbrs	r16, 1
    20e6:	02 c0       	rjmp	.+4      	; 0x20ec <vfprintf+0x64a>
    20e8:	8b e2       	ldi	r24, 0x2B	; 43
    20ea:	01 c0       	rjmp	.+2      	; 0x20ee <vfprintf+0x64c>
    20ec:	80 e2       	ldi	r24, 0x20	; 32
    20ee:	07 fd       	sbrc	r16, 7
    20f0:	8d e2       	ldi	r24, 0x2D	; 45
    20f2:	b7 01       	movw	r22, r14
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	0e 94 32 12 	call	0x2464	; 0x2464 <fputc>
    20fa:	c1 16       	cp	r12, r17
    20fc:	38 f4       	brcc	.+14     	; 0x210c <vfprintf+0x66a>
    20fe:	b7 01       	movw	r22, r14
    2100:	80 e3       	ldi	r24, 0x30	; 48
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	0e 94 32 12 	call	0x2464	; 0x2464 <fputc>
    2108:	11 50       	subi	r17, 0x01	; 1
    210a:	f7 cf       	rjmp	.-18     	; 0x20fa <vfprintf+0x658>
    210c:	ca 94       	dec	r12
    210e:	f3 01       	movw	r30, r6
    2110:	ec 0d       	add	r30, r12
    2112:	f1 1d       	adc	r31, r1
    2114:	80 81       	ld	r24, Z
    2116:	b7 01       	movw	r22, r14
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	0e 94 32 12 	call	0x2464	; 0x2464 <fputc>
    211e:	c1 10       	cpse	r12, r1
    2120:	f5 cf       	rjmp	.-22     	; 0x210c <vfprintf+0x66a>
    2122:	15 c0       	rjmp	.+42     	; 0x214e <vfprintf+0x6ac>
    2124:	f4 e0       	ldi	r31, 0x04	; 4
    2126:	f5 15       	cp	r31, r5
    2128:	60 f5       	brcc	.+88     	; 0x2182 <vfprintf+0x6e0>
    212a:	84 e0       	ldi	r24, 0x04	; 4
    212c:	58 1a       	sub	r5, r24
    212e:	93 fe       	sbrs	r9, 3
    2130:	1f c0       	rjmp	.+62     	; 0x2170 <vfprintf+0x6ce>
    2132:	01 11       	cpse	r16, r1
    2134:	27 c0       	rjmp	.+78     	; 0x2184 <vfprintf+0x6e2>
    2136:	2c 85       	ldd	r18, Y+12	; 0x0c
    2138:	23 ff       	sbrs	r18, 3
    213a:	2a c0       	rjmp	.+84     	; 0x2190 <vfprintf+0x6ee>
    213c:	04 ef       	ldi	r16, 0xF4	; 244
    213e:	10 e0       	ldi	r17, 0x00	; 0
    2140:	39 2d       	mov	r19, r9
    2142:	30 71       	andi	r19, 0x10	; 16
    2144:	93 2e       	mov	r9, r19
    2146:	f8 01       	movw	r30, r16
    2148:	84 91       	lpm	r24, Z
    214a:	81 11       	cpse	r24, r1
    214c:	24 c0       	rjmp	.+72     	; 0x2196 <vfprintf+0x6f4>
    214e:	55 20       	and	r5, r5
    2150:	09 f4       	brne	.+2      	; 0x2154 <vfprintf+0x6b2>
    2152:	e4 cc       	rjmp	.-1592   	; 0x1b1c <vfprintf+0x7a>
    2154:	b7 01       	movw	r22, r14
    2156:	80 e2       	ldi	r24, 0x20	; 32
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	0e 94 32 12 	call	0x2464	; 0x2464 <fputc>
    215e:	5a 94       	dec	r5
    2160:	f6 cf       	rjmp	.-20     	; 0x214e <vfprintf+0x6ac>
    2162:	f7 01       	movw	r30, r14
    2164:	86 81       	ldd	r24, Z+6	; 0x06
    2166:	97 81       	ldd	r25, Z+7	; 0x07
    2168:	26 c0       	rjmp	.+76     	; 0x21b6 <vfprintf+0x714>
    216a:	8f ef       	ldi	r24, 0xFF	; 255
    216c:	9f ef       	ldi	r25, 0xFF	; 255
    216e:	23 c0       	rjmp	.+70     	; 0x21b6 <vfprintf+0x714>
    2170:	b7 01       	movw	r22, r14
    2172:	80 e2       	ldi	r24, 0x20	; 32
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	0e 94 32 12 	call	0x2464	; 0x2464 <fputc>
    217a:	5a 94       	dec	r5
    217c:	51 10       	cpse	r5, r1
    217e:	f8 cf       	rjmp	.-16     	; 0x2170 <vfprintf+0x6ce>
    2180:	d8 cf       	rjmp	.-80     	; 0x2132 <vfprintf+0x690>
    2182:	51 2c       	mov	r5, r1
    2184:	b7 01       	movw	r22, r14
    2186:	80 2f       	mov	r24, r16
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	0e 94 32 12 	call	0x2464	; 0x2464 <fputc>
    218e:	d3 cf       	rjmp	.-90     	; 0x2136 <vfprintf+0x694>
    2190:	08 ef       	ldi	r16, 0xF8	; 248
    2192:	10 e0       	ldi	r17, 0x00	; 0
    2194:	d5 cf       	rjmp	.-86     	; 0x2140 <vfprintf+0x69e>
    2196:	91 10       	cpse	r9, r1
    2198:	80 52       	subi	r24, 0x20	; 32
    219a:	b7 01       	movw	r22, r14
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	0e 94 32 12 	call	0x2464	; 0x2464 <fputc>
    21a2:	0f 5f       	subi	r16, 0xFF	; 255
    21a4:	1f 4f       	sbci	r17, 0xFF	; 255
    21a6:	cf cf       	rjmp	.-98     	; 0x2146 <vfprintf+0x6a4>
    21a8:	23 e0       	ldi	r18, 0x03	; 3
    21aa:	25 15       	cp	r18, r5
    21ac:	10 f4       	brcc	.+4      	; 0x21b2 <vfprintf+0x710>
    21ae:	83 e0       	ldi	r24, 0x03	; 3
    21b0:	bd cf       	rjmp	.-134    	; 0x212c <vfprintf+0x68a>
    21b2:	51 2c       	mov	r5, r1
    21b4:	c0 cf       	rjmp	.-128    	; 0x2136 <vfprintf+0x694>
    21b6:	60 96       	adiw	r28, 0x10	; 16
    21b8:	cd bf       	out	0x3d, r28	; 61
    21ba:	de bf       	out	0x3e, r29	; 62
    21bc:	df 91       	pop	r29
    21be:	cf 91       	pop	r28
    21c0:	1f 91       	pop	r17
    21c2:	0f 91       	pop	r16
    21c4:	ff 90       	pop	r15
    21c6:	ef 90       	pop	r14
    21c8:	df 90       	pop	r13
    21ca:	cf 90       	pop	r12
    21cc:	bf 90       	pop	r11
    21ce:	af 90       	pop	r10
    21d0:	9f 90       	pop	r9
    21d2:	8f 90       	pop	r8
    21d4:	7f 90       	pop	r7
    21d6:	6f 90       	pop	r6
    21d8:	5f 90       	pop	r5
    21da:	4f 90       	pop	r4
    21dc:	3f 90       	pop	r3
    21de:	2f 90       	pop	r2
    21e0:	08 95       	ret

000021e2 <__divmodhi4>:
    21e2:	97 fb       	bst	r25, 7
    21e4:	07 2e       	mov	r0, r23
    21e6:	16 f4       	brtc	.+4      	; 0x21ec <__divmodhi4+0xa>
    21e8:	00 94       	com	r0
    21ea:	07 d0       	rcall	.+14     	; 0x21fa <__divmodhi4_neg1>
    21ec:	77 fd       	sbrc	r23, 7
    21ee:	09 d0       	rcall	.+18     	; 0x2202 <__divmodhi4_neg2>
    21f0:	0e 94 27 11 	call	0x224e	; 0x224e <__udivmodhi4>
    21f4:	07 fc       	sbrc	r0, 7
    21f6:	05 d0       	rcall	.+10     	; 0x2202 <__divmodhi4_neg2>
    21f8:	3e f4       	brtc	.+14     	; 0x2208 <__divmodhi4_exit>

000021fa <__divmodhi4_neg1>:
    21fa:	90 95       	com	r25
    21fc:	81 95       	neg	r24
    21fe:	9f 4f       	sbci	r25, 0xFF	; 255
    2200:	08 95       	ret

00002202 <__divmodhi4_neg2>:
    2202:	70 95       	com	r23
    2204:	61 95       	neg	r22
    2206:	7f 4f       	sbci	r23, 0xFF	; 255

00002208 <__divmodhi4_exit>:
    2208:	08 95       	ret

0000220a <__udivmodsi4>:
    220a:	a1 e2       	ldi	r26, 0x21	; 33
    220c:	1a 2e       	mov	r1, r26
    220e:	aa 1b       	sub	r26, r26
    2210:	bb 1b       	sub	r27, r27
    2212:	fd 01       	movw	r30, r26
    2214:	0d c0       	rjmp	.+26     	; 0x2230 <__udivmodsi4_ep>

00002216 <__udivmodsi4_loop>:
    2216:	aa 1f       	adc	r26, r26
    2218:	bb 1f       	adc	r27, r27
    221a:	ee 1f       	adc	r30, r30
    221c:	ff 1f       	adc	r31, r31
    221e:	a2 17       	cp	r26, r18
    2220:	b3 07       	cpc	r27, r19
    2222:	e4 07       	cpc	r30, r20
    2224:	f5 07       	cpc	r31, r21
    2226:	20 f0       	brcs	.+8      	; 0x2230 <__udivmodsi4_ep>
    2228:	a2 1b       	sub	r26, r18
    222a:	b3 0b       	sbc	r27, r19
    222c:	e4 0b       	sbc	r30, r20
    222e:	f5 0b       	sbc	r31, r21

00002230 <__udivmodsi4_ep>:
    2230:	66 1f       	adc	r22, r22
    2232:	77 1f       	adc	r23, r23
    2234:	88 1f       	adc	r24, r24
    2236:	99 1f       	adc	r25, r25
    2238:	1a 94       	dec	r1
    223a:	69 f7       	brne	.-38     	; 0x2216 <__udivmodsi4_loop>
    223c:	60 95       	com	r22
    223e:	70 95       	com	r23
    2240:	80 95       	com	r24
    2242:	90 95       	com	r25
    2244:	9b 01       	movw	r18, r22
    2246:	ac 01       	movw	r20, r24
    2248:	bd 01       	movw	r22, r26
    224a:	cf 01       	movw	r24, r30
    224c:	08 95       	ret

0000224e <__udivmodhi4>:
    224e:	aa 1b       	sub	r26, r26
    2250:	bb 1b       	sub	r27, r27
    2252:	51 e1       	ldi	r21, 0x11	; 17
    2254:	07 c0       	rjmp	.+14     	; 0x2264 <__udivmodhi4_ep>

00002256 <__udivmodhi4_loop>:
    2256:	aa 1f       	adc	r26, r26
    2258:	bb 1f       	adc	r27, r27
    225a:	a6 17       	cp	r26, r22
    225c:	b7 07       	cpc	r27, r23
    225e:	10 f0       	brcs	.+4      	; 0x2264 <__udivmodhi4_ep>
    2260:	a6 1b       	sub	r26, r22
    2262:	b7 0b       	sbc	r27, r23

00002264 <__udivmodhi4_ep>:
    2264:	88 1f       	adc	r24, r24
    2266:	99 1f       	adc	r25, r25
    2268:	5a 95       	dec	r21
    226a:	a9 f7       	brne	.-22     	; 0x2256 <__udivmodhi4_loop>
    226c:	80 95       	com	r24
    226e:	90 95       	com	r25
    2270:	bc 01       	movw	r22, r24
    2272:	cd 01       	movw	r24, r26
    2274:	08 95       	ret

00002276 <__tablejump2__>:
    2276:	ee 0f       	add	r30, r30
    2278:	ff 1f       	adc	r31, r31
    227a:	00 24       	eor	r0, r0
    227c:	00 1c       	adc	r0, r0
    227e:	0b be       	out	0x3b, r0	; 59
    2280:	07 90       	elpm	r0, Z+
    2282:	f6 91       	elpm	r31, Z
    2284:	e0 2d       	mov	r30, r0
    2286:	09 94       	ijmp

00002288 <__ftoa_engine>:
    2288:	28 30       	cpi	r18, 0x08	; 8
    228a:	08 f0       	brcs	.+2      	; 0x228e <__ftoa_engine+0x6>
    228c:	27 e0       	ldi	r18, 0x07	; 7
    228e:	33 27       	eor	r19, r19
    2290:	da 01       	movw	r26, r20
    2292:	99 0f       	add	r25, r25
    2294:	31 1d       	adc	r19, r1
    2296:	87 fd       	sbrc	r24, 7
    2298:	91 60       	ori	r25, 0x01	; 1
    229a:	00 96       	adiw	r24, 0x00	; 0
    229c:	61 05       	cpc	r22, r1
    229e:	71 05       	cpc	r23, r1
    22a0:	39 f4       	brne	.+14     	; 0x22b0 <__ftoa_engine+0x28>
    22a2:	32 60       	ori	r19, 0x02	; 2
    22a4:	2e 5f       	subi	r18, 0xFE	; 254
    22a6:	3d 93       	st	X+, r19
    22a8:	30 e3       	ldi	r19, 0x30	; 48
    22aa:	2a 95       	dec	r18
    22ac:	e1 f7       	brne	.-8      	; 0x22a6 <__ftoa_engine+0x1e>
    22ae:	08 95       	ret
    22b0:	9f 3f       	cpi	r25, 0xFF	; 255
    22b2:	30 f0       	brcs	.+12     	; 0x22c0 <__ftoa_engine+0x38>
    22b4:	80 38       	cpi	r24, 0x80	; 128
    22b6:	71 05       	cpc	r23, r1
    22b8:	61 05       	cpc	r22, r1
    22ba:	09 f0       	breq	.+2      	; 0x22be <__ftoa_engine+0x36>
    22bc:	3c 5f       	subi	r19, 0xFC	; 252
    22be:	3c 5f       	subi	r19, 0xFC	; 252
    22c0:	3d 93       	st	X+, r19
    22c2:	91 30       	cpi	r25, 0x01	; 1
    22c4:	08 f0       	brcs	.+2      	; 0x22c8 <__ftoa_engine+0x40>
    22c6:	80 68       	ori	r24, 0x80	; 128
    22c8:	91 1d       	adc	r25, r1
    22ca:	df 93       	push	r29
    22cc:	cf 93       	push	r28
    22ce:	1f 93       	push	r17
    22d0:	0f 93       	push	r16
    22d2:	ff 92       	push	r15
    22d4:	ef 92       	push	r14
    22d6:	19 2f       	mov	r17, r25
    22d8:	98 7f       	andi	r25, 0xF8	; 248
    22da:	96 95       	lsr	r25
    22dc:	e9 2f       	mov	r30, r25
    22de:	96 95       	lsr	r25
    22e0:	96 95       	lsr	r25
    22e2:	e9 0f       	add	r30, r25
    22e4:	ff 27       	eor	r31, r31
    22e6:	ea 5a       	subi	r30, 0xAA	; 170
    22e8:	fe 4f       	sbci	r31, 0xFE	; 254
    22ea:	99 27       	eor	r25, r25
    22ec:	33 27       	eor	r19, r19
    22ee:	ee 24       	eor	r14, r14
    22f0:	ff 24       	eor	r15, r15
    22f2:	a7 01       	movw	r20, r14
    22f4:	e7 01       	movw	r28, r14
    22f6:	05 90       	lpm	r0, Z+
    22f8:	08 94       	sec
    22fa:	07 94       	ror	r0
    22fc:	28 f4       	brcc	.+10     	; 0x2308 <__ftoa_engine+0x80>
    22fe:	36 0f       	add	r19, r22
    2300:	e7 1e       	adc	r14, r23
    2302:	f8 1e       	adc	r15, r24
    2304:	49 1f       	adc	r20, r25
    2306:	51 1d       	adc	r21, r1
    2308:	66 0f       	add	r22, r22
    230a:	77 1f       	adc	r23, r23
    230c:	88 1f       	adc	r24, r24
    230e:	99 1f       	adc	r25, r25
    2310:	06 94       	lsr	r0
    2312:	a1 f7       	brne	.-24     	; 0x22fc <__ftoa_engine+0x74>
    2314:	05 90       	lpm	r0, Z+
    2316:	07 94       	ror	r0
    2318:	28 f4       	brcc	.+10     	; 0x2324 <__ftoa_engine+0x9c>
    231a:	e7 0e       	add	r14, r23
    231c:	f8 1e       	adc	r15, r24
    231e:	49 1f       	adc	r20, r25
    2320:	56 1f       	adc	r21, r22
    2322:	c1 1d       	adc	r28, r1
    2324:	77 0f       	add	r23, r23
    2326:	88 1f       	adc	r24, r24
    2328:	99 1f       	adc	r25, r25
    232a:	66 1f       	adc	r22, r22
    232c:	06 94       	lsr	r0
    232e:	a1 f7       	brne	.-24     	; 0x2318 <__ftoa_engine+0x90>
    2330:	05 90       	lpm	r0, Z+
    2332:	07 94       	ror	r0
    2334:	28 f4       	brcc	.+10     	; 0x2340 <__ftoa_engine+0xb8>
    2336:	f8 0e       	add	r15, r24
    2338:	49 1f       	adc	r20, r25
    233a:	56 1f       	adc	r21, r22
    233c:	c7 1f       	adc	r28, r23
    233e:	d1 1d       	adc	r29, r1
    2340:	88 0f       	add	r24, r24
    2342:	99 1f       	adc	r25, r25
    2344:	66 1f       	adc	r22, r22
    2346:	77 1f       	adc	r23, r23
    2348:	06 94       	lsr	r0
    234a:	a1 f7       	brne	.-24     	; 0x2334 <__ftoa_engine+0xac>
    234c:	05 90       	lpm	r0, Z+
    234e:	07 94       	ror	r0
    2350:	20 f4       	brcc	.+8      	; 0x235a <__ftoa_engine+0xd2>
    2352:	49 0f       	add	r20, r25
    2354:	56 1f       	adc	r21, r22
    2356:	c7 1f       	adc	r28, r23
    2358:	d8 1f       	adc	r29, r24
    235a:	99 0f       	add	r25, r25
    235c:	66 1f       	adc	r22, r22
    235e:	77 1f       	adc	r23, r23
    2360:	88 1f       	adc	r24, r24
    2362:	06 94       	lsr	r0
    2364:	a9 f7       	brne	.-22     	; 0x2350 <__ftoa_engine+0xc8>
    2366:	84 91       	lpm	r24, Z
    2368:	10 95       	com	r17
    236a:	17 70       	andi	r17, 0x07	; 7
    236c:	41 f0       	breq	.+16     	; 0x237e <__ftoa_engine+0xf6>
    236e:	d6 95       	lsr	r29
    2370:	c7 95       	ror	r28
    2372:	57 95       	ror	r21
    2374:	47 95       	ror	r20
    2376:	f7 94       	ror	r15
    2378:	e7 94       	ror	r14
    237a:	1a 95       	dec	r17
    237c:	c1 f7       	brne	.-16     	; 0x236e <__ftoa_engine+0xe6>
    237e:	ec ef       	ldi	r30, 0xFC	; 252
    2380:	f0 e0       	ldi	r31, 0x00	; 0
    2382:	68 94       	set
    2384:	15 90       	lpm	r1, Z+
    2386:	15 91       	lpm	r17, Z+
    2388:	35 91       	lpm	r19, Z+
    238a:	65 91       	lpm	r22, Z+
    238c:	95 91       	lpm	r25, Z+
    238e:	05 90       	lpm	r0, Z+
    2390:	7f e2       	ldi	r23, 0x2F	; 47
    2392:	73 95       	inc	r23
    2394:	e1 18       	sub	r14, r1
    2396:	f1 0a       	sbc	r15, r17
    2398:	43 0b       	sbc	r20, r19
    239a:	56 0b       	sbc	r21, r22
    239c:	c9 0b       	sbc	r28, r25
    239e:	d0 09       	sbc	r29, r0
    23a0:	c0 f7       	brcc	.-16     	; 0x2392 <__ftoa_engine+0x10a>
    23a2:	e1 0c       	add	r14, r1
    23a4:	f1 1e       	adc	r15, r17
    23a6:	43 1f       	adc	r20, r19
    23a8:	56 1f       	adc	r21, r22
    23aa:	c9 1f       	adc	r28, r25
    23ac:	d0 1d       	adc	r29, r0
    23ae:	7e f4       	brtc	.+30     	; 0x23ce <__ftoa_engine+0x146>
    23b0:	70 33       	cpi	r23, 0x30	; 48
    23b2:	11 f4       	brne	.+4      	; 0x23b8 <__ftoa_engine+0x130>
    23b4:	8a 95       	dec	r24
    23b6:	e6 cf       	rjmp	.-52     	; 0x2384 <__ftoa_engine+0xfc>
    23b8:	e8 94       	clt
    23ba:	01 50       	subi	r16, 0x01	; 1
    23bc:	30 f0       	brcs	.+12     	; 0x23ca <__ftoa_engine+0x142>
    23be:	08 0f       	add	r16, r24
    23c0:	0a f4       	brpl	.+2      	; 0x23c4 <__ftoa_engine+0x13c>
    23c2:	00 27       	eor	r16, r16
    23c4:	02 17       	cp	r16, r18
    23c6:	08 f4       	brcc	.+2      	; 0x23ca <__ftoa_engine+0x142>
    23c8:	20 2f       	mov	r18, r16
    23ca:	23 95       	inc	r18
    23cc:	02 2f       	mov	r16, r18
    23ce:	7a 33       	cpi	r23, 0x3A	; 58
    23d0:	28 f0       	brcs	.+10     	; 0x23dc <__ftoa_engine+0x154>
    23d2:	79 e3       	ldi	r23, 0x39	; 57
    23d4:	7d 93       	st	X+, r23
    23d6:	2a 95       	dec	r18
    23d8:	e9 f7       	brne	.-6      	; 0x23d4 <__ftoa_engine+0x14c>
    23da:	10 c0       	rjmp	.+32     	; 0x23fc <__ftoa_engine+0x174>
    23dc:	7d 93       	st	X+, r23
    23de:	2a 95       	dec	r18
    23e0:	89 f6       	brne	.-94     	; 0x2384 <__ftoa_engine+0xfc>
    23e2:	06 94       	lsr	r0
    23e4:	97 95       	ror	r25
    23e6:	67 95       	ror	r22
    23e8:	37 95       	ror	r19
    23ea:	17 95       	ror	r17
    23ec:	17 94       	ror	r1
    23ee:	e1 18       	sub	r14, r1
    23f0:	f1 0a       	sbc	r15, r17
    23f2:	43 0b       	sbc	r20, r19
    23f4:	56 0b       	sbc	r21, r22
    23f6:	c9 0b       	sbc	r28, r25
    23f8:	d0 09       	sbc	r29, r0
    23fa:	98 f0       	brcs	.+38     	; 0x2422 <__ftoa_engine+0x19a>
    23fc:	23 95       	inc	r18
    23fe:	7e 91       	ld	r23, -X
    2400:	73 95       	inc	r23
    2402:	7a 33       	cpi	r23, 0x3A	; 58
    2404:	08 f0       	brcs	.+2      	; 0x2408 <__ftoa_engine+0x180>
    2406:	70 e3       	ldi	r23, 0x30	; 48
    2408:	7c 93       	st	X, r23
    240a:	20 13       	cpse	r18, r16
    240c:	b8 f7       	brcc	.-18     	; 0x23fc <__ftoa_engine+0x174>
    240e:	7e 91       	ld	r23, -X
    2410:	70 61       	ori	r23, 0x10	; 16
    2412:	7d 93       	st	X+, r23
    2414:	30 f0       	brcs	.+12     	; 0x2422 <__ftoa_engine+0x19a>
    2416:	83 95       	inc	r24
    2418:	71 e3       	ldi	r23, 0x31	; 49
    241a:	7d 93       	st	X+, r23
    241c:	70 e3       	ldi	r23, 0x30	; 48
    241e:	2a 95       	dec	r18
    2420:	e1 f7       	brne	.-8      	; 0x241a <__ftoa_engine+0x192>
    2422:	11 24       	eor	r1, r1
    2424:	ef 90       	pop	r14
    2426:	ff 90       	pop	r15
    2428:	0f 91       	pop	r16
    242a:	1f 91       	pop	r17
    242c:	cf 91       	pop	r28
    242e:	df 91       	pop	r29
    2430:	99 27       	eor	r25, r25
    2432:	87 fd       	sbrc	r24, 7
    2434:	90 95       	com	r25
    2436:	08 95       	ret

00002438 <strnlen_P>:
    2438:	fc 01       	movw	r30, r24
    243a:	05 90       	lpm	r0, Z+
    243c:	61 50       	subi	r22, 0x01	; 1
    243e:	70 40       	sbci	r23, 0x00	; 0
    2440:	01 10       	cpse	r0, r1
    2442:	d8 f7       	brcc	.-10     	; 0x243a <strnlen_P+0x2>
    2444:	80 95       	com	r24
    2446:	90 95       	com	r25
    2448:	8e 0f       	add	r24, r30
    244a:	9f 1f       	adc	r25, r31
    244c:	08 95       	ret

0000244e <strnlen>:
    244e:	fc 01       	movw	r30, r24
    2450:	61 50       	subi	r22, 0x01	; 1
    2452:	70 40       	sbci	r23, 0x00	; 0
    2454:	01 90       	ld	r0, Z+
    2456:	01 10       	cpse	r0, r1
    2458:	d8 f7       	brcc	.-10     	; 0x2450 <strnlen+0x2>
    245a:	80 95       	com	r24
    245c:	90 95       	com	r25
    245e:	8e 0f       	add	r24, r30
    2460:	9f 1f       	adc	r25, r31
    2462:	08 95       	ret

00002464 <fputc>:
    2464:	0f 93       	push	r16
    2466:	1f 93       	push	r17
    2468:	cf 93       	push	r28
    246a:	df 93       	push	r29
    246c:	fb 01       	movw	r30, r22
    246e:	23 81       	ldd	r18, Z+3	; 0x03
    2470:	21 fd       	sbrc	r18, 1
    2472:	03 c0       	rjmp	.+6      	; 0x247a <fputc+0x16>
    2474:	8f ef       	ldi	r24, 0xFF	; 255
    2476:	9f ef       	ldi	r25, 0xFF	; 255
    2478:	2c c0       	rjmp	.+88     	; 0x24d2 <fputc+0x6e>
    247a:	22 ff       	sbrs	r18, 2
    247c:	16 c0       	rjmp	.+44     	; 0x24aa <fputc+0x46>
    247e:	46 81       	ldd	r20, Z+6	; 0x06
    2480:	57 81       	ldd	r21, Z+7	; 0x07
    2482:	24 81       	ldd	r18, Z+4	; 0x04
    2484:	35 81       	ldd	r19, Z+5	; 0x05
    2486:	42 17       	cp	r20, r18
    2488:	53 07       	cpc	r21, r19
    248a:	44 f4       	brge	.+16     	; 0x249c <fputc+0x38>
    248c:	a0 81       	ld	r26, Z
    248e:	b1 81       	ldd	r27, Z+1	; 0x01
    2490:	9d 01       	movw	r18, r26
    2492:	2f 5f       	subi	r18, 0xFF	; 255
    2494:	3f 4f       	sbci	r19, 0xFF	; 255
    2496:	20 83       	st	Z, r18
    2498:	31 83       	std	Z+1, r19	; 0x01
    249a:	8c 93       	st	X, r24
    249c:	26 81       	ldd	r18, Z+6	; 0x06
    249e:	37 81       	ldd	r19, Z+7	; 0x07
    24a0:	2f 5f       	subi	r18, 0xFF	; 255
    24a2:	3f 4f       	sbci	r19, 0xFF	; 255
    24a4:	26 83       	std	Z+6, r18	; 0x06
    24a6:	37 83       	std	Z+7, r19	; 0x07
    24a8:	14 c0       	rjmp	.+40     	; 0x24d2 <fputc+0x6e>
    24aa:	8b 01       	movw	r16, r22
    24ac:	ec 01       	movw	r28, r24
    24ae:	fb 01       	movw	r30, r22
    24b0:	00 84       	ldd	r0, Z+8	; 0x08
    24b2:	f1 85       	ldd	r31, Z+9	; 0x09
    24b4:	e0 2d       	mov	r30, r0
    24b6:	09 95       	icall
    24b8:	89 2b       	or	r24, r25
    24ba:	e1 f6       	brne	.-72     	; 0x2474 <fputc+0x10>
    24bc:	d8 01       	movw	r26, r16
    24be:	16 96       	adiw	r26, 0x06	; 6
    24c0:	8d 91       	ld	r24, X+
    24c2:	9c 91       	ld	r25, X
    24c4:	17 97       	sbiw	r26, 0x07	; 7
    24c6:	01 96       	adiw	r24, 0x01	; 1
    24c8:	16 96       	adiw	r26, 0x06	; 6
    24ca:	8d 93       	st	X+, r24
    24cc:	9c 93       	st	X, r25
    24ce:	17 97       	sbiw	r26, 0x07	; 7
    24d0:	ce 01       	movw	r24, r28
    24d2:	df 91       	pop	r29
    24d4:	cf 91       	pop	r28
    24d6:	1f 91       	pop	r17
    24d8:	0f 91       	pop	r16
    24da:	08 95       	ret

000024dc <printf>:
    24dc:	cf 93       	push	r28
    24de:	df 93       	push	r29
    24e0:	cd b7       	in	r28, 0x3d	; 61
    24e2:	de b7       	in	r29, 0x3e	; 62
    24e4:	ae 01       	movw	r20, r28
    24e6:	4b 5f       	subi	r20, 0xFB	; 251
    24e8:	5f 4f       	sbci	r21, 0xFF	; 255
    24ea:	fa 01       	movw	r30, r20
    24ec:	61 91       	ld	r22, Z+
    24ee:	71 91       	ld	r23, Z+
    24f0:	af 01       	movw	r20, r30
    24f2:	80 91 49 43 	lds	r24, 0x4349	; 0x804349 <__iob+0x2>
    24f6:	90 91 4a 43 	lds	r25, 0x434A	; 0x80434a <__iob+0x3>
    24fa:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <vfprintf>
    24fe:	df 91       	pop	r29
    2500:	cf 91       	pop	r28
    2502:	08 95       	ret

00002504 <__ultoa_invert>:
    2504:	fa 01       	movw	r30, r20
    2506:	aa 27       	eor	r26, r26
    2508:	28 30       	cpi	r18, 0x08	; 8
    250a:	51 f1       	breq	.+84     	; 0x2560 <__ultoa_invert+0x5c>
    250c:	20 31       	cpi	r18, 0x10	; 16
    250e:	81 f1       	breq	.+96     	; 0x2570 <__ultoa_invert+0x6c>
    2510:	e8 94       	clt
    2512:	6f 93       	push	r22
    2514:	6e 7f       	andi	r22, 0xFE	; 254
    2516:	6e 5f       	subi	r22, 0xFE	; 254
    2518:	7f 4f       	sbci	r23, 0xFF	; 255
    251a:	8f 4f       	sbci	r24, 0xFF	; 255
    251c:	9f 4f       	sbci	r25, 0xFF	; 255
    251e:	af 4f       	sbci	r26, 0xFF	; 255
    2520:	b1 e0       	ldi	r27, 0x01	; 1
    2522:	3e d0       	rcall	.+124    	; 0x25a0 <__ultoa_invert+0x9c>
    2524:	b4 e0       	ldi	r27, 0x04	; 4
    2526:	3c d0       	rcall	.+120    	; 0x25a0 <__ultoa_invert+0x9c>
    2528:	67 0f       	add	r22, r23
    252a:	78 1f       	adc	r23, r24
    252c:	89 1f       	adc	r24, r25
    252e:	9a 1f       	adc	r25, r26
    2530:	a1 1d       	adc	r26, r1
    2532:	68 0f       	add	r22, r24
    2534:	79 1f       	adc	r23, r25
    2536:	8a 1f       	adc	r24, r26
    2538:	91 1d       	adc	r25, r1
    253a:	a1 1d       	adc	r26, r1
    253c:	6a 0f       	add	r22, r26
    253e:	71 1d       	adc	r23, r1
    2540:	81 1d       	adc	r24, r1
    2542:	91 1d       	adc	r25, r1
    2544:	a1 1d       	adc	r26, r1
    2546:	20 d0       	rcall	.+64     	; 0x2588 <__ultoa_invert+0x84>
    2548:	09 f4       	brne	.+2      	; 0x254c <__ultoa_invert+0x48>
    254a:	68 94       	set
    254c:	3f 91       	pop	r19
    254e:	2a e0       	ldi	r18, 0x0A	; 10
    2550:	26 9f       	mul	r18, r22
    2552:	11 24       	eor	r1, r1
    2554:	30 19       	sub	r19, r0
    2556:	30 5d       	subi	r19, 0xD0	; 208
    2558:	31 93       	st	Z+, r19
    255a:	de f6       	brtc	.-74     	; 0x2512 <__ultoa_invert+0xe>
    255c:	cf 01       	movw	r24, r30
    255e:	08 95       	ret
    2560:	46 2f       	mov	r20, r22
    2562:	47 70       	andi	r20, 0x07	; 7
    2564:	40 5d       	subi	r20, 0xD0	; 208
    2566:	41 93       	st	Z+, r20
    2568:	b3 e0       	ldi	r27, 0x03	; 3
    256a:	0f d0       	rcall	.+30     	; 0x258a <__ultoa_invert+0x86>
    256c:	c9 f7       	brne	.-14     	; 0x2560 <__ultoa_invert+0x5c>
    256e:	f6 cf       	rjmp	.-20     	; 0x255c <__ultoa_invert+0x58>
    2570:	46 2f       	mov	r20, r22
    2572:	4f 70       	andi	r20, 0x0F	; 15
    2574:	40 5d       	subi	r20, 0xD0	; 208
    2576:	4a 33       	cpi	r20, 0x3A	; 58
    2578:	18 f0       	brcs	.+6      	; 0x2580 <__ultoa_invert+0x7c>
    257a:	49 5d       	subi	r20, 0xD9	; 217
    257c:	31 fd       	sbrc	r19, 1
    257e:	40 52       	subi	r20, 0x20	; 32
    2580:	41 93       	st	Z+, r20
    2582:	02 d0       	rcall	.+4      	; 0x2588 <__ultoa_invert+0x84>
    2584:	a9 f7       	brne	.-22     	; 0x2570 <__ultoa_invert+0x6c>
    2586:	ea cf       	rjmp	.-44     	; 0x255c <__ultoa_invert+0x58>
    2588:	b4 e0       	ldi	r27, 0x04	; 4
    258a:	a6 95       	lsr	r26
    258c:	97 95       	ror	r25
    258e:	87 95       	ror	r24
    2590:	77 95       	ror	r23
    2592:	67 95       	ror	r22
    2594:	ba 95       	dec	r27
    2596:	c9 f7       	brne	.-14     	; 0x258a <__ultoa_invert+0x86>
    2598:	00 97       	sbiw	r24, 0x00	; 0
    259a:	61 05       	cpc	r22, r1
    259c:	71 05       	cpc	r23, r1
    259e:	08 95       	ret
    25a0:	9b 01       	movw	r18, r22
    25a2:	ac 01       	movw	r20, r24
    25a4:	0a 2e       	mov	r0, r26
    25a6:	06 94       	lsr	r0
    25a8:	57 95       	ror	r21
    25aa:	47 95       	ror	r20
    25ac:	37 95       	ror	r19
    25ae:	27 95       	ror	r18
    25b0:	ba 95       	dec	r27
    25b2:	c9 f7       	brne	.-14     	; 0x25a6 <__ultoa_invert+0xa2>
    25b4:	62 0f       	add	r22, r18
    25b6:	73 1f       	adc	r23, r19
    25b8:	84 1f       	adc	r24, r20
    25ba:	95 1f       	adc	r25, r21
    25bc:	a0 1d       	adc	r26, r0
    25be:	08 95       	ret

000025c0 <__do_global_dtors>:
    25c0:	10 e0       	ldi	r17, 0x00	; 0
    25c2:	cd ef       	ldi	r28, 0xFD	; 253
    25c4:	d0 e0       	ldi	r29, 0x00	; 0
    25c6:	04 c0       	rjmp	.+8      	; 0x25d0 <__do_global_dtors+0x10>
    25c8:	fe 01       	movw	r30, r28
    25ca:	0e 94 3b 11 	call	0x2276	; 0x2276 <__tablejump2__>
    25ce:	21 96       	adiw	r28, 0x01	; 1
    25d0:	cf 3f       	cpi	r28, 0xFF	; 255
    25d2:	d1 07       	cpc	r29, r17
    25d4:	c9 f7       	brne	.-14     	; 0x25c8 <__do_global_dtors+0x8>
    25d6:	f8 94       	cli

000025d8 <__stop_program>:
    25d8:	ff cf       	rjmp	.-2      	; 0x25d8 <__stop_program>
