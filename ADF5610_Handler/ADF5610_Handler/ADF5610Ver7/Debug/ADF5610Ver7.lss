
ADF5610Ver7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006e  00800100  00001de0  00001e74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001de0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001ce  0080016e  0080016e  00001ee2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001ee2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001f14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003d8  00000000  00000000  00001f54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c38a  00000000  00000000  0000232c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000023d4  00000000  00000000  0000e6b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000268a  00000000  00000000  00010a8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000cfc  00000000  00000000  00013114  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000269d  00000000  00000000  00013e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004bee  00000000  00000000  000164ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003e0  00000000  00000000  0001b09b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__ctors_end>
       4:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
       8:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
       c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      10:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      14:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      18:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      1c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      20:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      24:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      28:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      2c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      30:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      34:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      38:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      3c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      40:	0c 94 e7 0c 	jmp	0x19ce	; 0x19ce <__vector_16>
      44:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      48:	0c 94 99 0a 	jmp	0x1532	; 0x1532 <__vector_18>
      4c:	0c 94 cb 0a 	jmp	0x1596	; 0x1596 <__vector_19>
      50:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      54:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      58:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      5c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      60:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      64:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      68:	b2 01       	movw	r22, r4
      6a:	c2 01       	movw	r24, r4
      6c:	cf 01       	movw	r24, r30
      6e:	6c 02       	muls	r22, r28
      70:	6c 02       	muls	r22, r28
      72:	dc 01       	movw	r26, r24
      74:	6c 02       	muls	r22, r28
      76:	6c 02       	muls	r22, r28
      78:	6c 02       	muls	r22, r28
      7a:	6c 02       	muls	r22, r28
      7c:	6c 02       	muls	r22, r28
      7e:	6c 02       	muls	r22, r28
      80:	6c 02       	muls	r22, r28
      82:	6c 02       	muls	r22, r28
      84:	6c 02       	muls	r22, r28
      86:	6c 02       	muls	r22, r28
      88:	6c 02       	muls	r22, r28
      8a:	fa 01       	movw	r30, r20
      8c:	0b 02       	muls	r16, r27
      8e:	18 02       	muls	r17, r24
      90:	6d 03       	fmul	r22, r21
      92:	76 03       	mulsu	r23, r22
      94:	7b 03       	fmul	r23, r19
      96:	80 03       	fmuls	r16, r16
      98:	85 03       	fmuls	r16, r21
      9a:	8a 03       	fmulsu	r16, r18
      9c:	8f 03       	fmulsu	r16, r23
      9e:	98 03       	fmulsu	r17, r16
      a0:	a1 03       	fmuls	r18, r17
      a2:	aa 03       	fmulsu	r18, r18
      a4:	b3 03       	fmuls	r19, r19
      a6:	e8 03       	fmulsu	r22, r16
      a8:	e8 03       	fmulsu	r22, r16
      aa:	e8 03       	fmulsu	r22, r16
      ac:	bc 03       	fmulsu	r19, r20
      ae:	e8 03       	fmulsu	r22, r16
      b0:	e8 03       	fmulsu	r22, r16
      b2:	e8 03       	fmulsu	r22, r16
      b4:	e8 03       	fmulsu	r22, r16
      b6:	c7 03       	fmuls	r20, r23
      b8:	d2 03       	fmuls	r21, r18
      ba:	dd 03       	fmulsu	r21, r21
      bc:	08 00       	.word	0x0008	; ????
      be:	00 00       	nop
      c0:	be 92       	st	-X, r11
      c2:	24 49       	sbci	r18, 0x94	; 148
      c4:	12 3e       	cpi	r17, 0xE2	; 226
      c6:	ab aa       	std	Y+51, r10	; 0x33
      c8:	aa 2a       	or	r10, r26
      ca:	be cd       	rjmp	.-1156   	; 0xfffffc48 <__eeprom_end+0xff7efc48>
      cc:	cc cc       	rjmp	.-1640   	; 0xfffffa66 <__eeprom_end+0xff7efa66>
      ce:	4c 3e       	cpi	r20, 0xEC	; 236
      d0:	00 00       	nop
      d2:	00 80       	ld	r0, Z
      d4:	be ab       	std	Y+54, r27	; 0x36
      d6:	aa aa       	std	Y+50, r10	; 0x32
      d8:	aa 3e       	cpi	r26, 0xEA	; 234
      da:	00 00       	nop
      dc:	00 00       	nop
      de:	bf 00       	.word	0x00bf	; ????
      e0:	00 00       	nop
      e2:	80 3f       	cpi	r24, 0xF0	; 240
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	00 08       	sbc	r0, r0
      ea:	41 78       	andi	r20, 0x81	; 129
      ec:	d3 bb       	out	0x13, r29	; 19
      ee:	43 87       	std	Z+11, r20	; 0x0b
      f0:	d1 13       	cpse	r29, r17
      f2:	3d 19       	sub	r19, r13
      f4:	0e 3c       	cpi	r16, 0xCE	; 206
      f6:	c3 bd       	out	0x23, r28	; 35
      f8:	42 82       	std	Z+2, r4	; 0x02
      fa:	ad 2b       	or	r26, r29
      fc:	3e 68       	ori	r19, 0x8E	; 142
      fe:	ec 82       	std	Y+4, r14	; 0x04
     100:	76 be       	out	0x36, r7	; 54
     102:	d9 8f       	std	Y+25, r29	; 0x19
     104:	e1 a9       	ldd	r30, Z+49	; 0x31
     106:	3e 4c       	sbci	r19, 0xCE	; 206
     108:	80 ef       	ldi	r24, 0xF0	; 240
     10a:	ff be       	out	0x3f, r15	; 63
     10c:	01 c4       	rjmp	.+2050   	; 0x910 <__stack+0x11>
     10e:	ff 7f       	andi	r31, 0xFF	; 255
     110:	3f 00       	.word	0x003f	; ????
     112:	00 00       	nop
     114:	00 00       	nop
     116:	07 63       	ori	r16, 0x37	; 55
     118:	42 36       	cpi	r20, 0x62	; 98
     11a:	b7 9b       	sbis	0x16, 7	; 22
     11c:	d8 a7       	std	Y+40, r29	; 0x28
     11e:	1a 39       	cpi	r17, 0x9A	; 154
     120:	68 56       	subi	r22, 0x68	; 104
     122:	18 ae       	std	Y+56, r1	; 0x38
     124:	ba ab       	std	Y+50, r27	; 0x32
     126:	55 8c       	ldd	r5, Z+29	; 0x1d
     128:	1d 3c       	cpi	r17, 0xCD	; 205
     12a:	b7 cc       	rjmp	.-1682   	; 0xfffffa9a <__eeprom_end+0xff7efa9a>
     12c:	57 63       	ori	r21, 0x37	; 55
     12e:	bd 6d       	ori	r27, 0xDD	; 221
     130:	ed fd       	.word	0xfded	; ????
     132:	75 3e       	cpi	r23, 0xE5	; 229
     134:	f6 17       	cp	r31, r22
     136:	72 31       	cpi	r23, 0x12	; 18
     138:	bf 00       	.word	0x00bf	; ????
     13a:	00 00       	nop
     13c:	80 3f       	cpi	r24, 0xF0	; 240

0000013e <__trampolines_end>:
     13e:	00 00       	nop
     140:	00 08       	sbc	r0, r0
     142:	00 02       	muls	r16, r16
     144:	01 00       	.word	0x0001	; ????
     146:	00 03       	mulsu	r16, r16
     148:	04 07       	cpc	r16, r20
	...

00000152 <digital_pin_to_bit_mask_PGM>:
     152:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     162:	04 08 10 20                                         ... 

00000166 <digital_pin_to_port_PGM>:
     166:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     176:	03 03 03 03                                         ....

0000017a <port_to_input_PGM>:
     17a:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000184 <port_to_output_PGM>:
     184:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000018e <port_to_mode_PGM>:
     18e:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000198 <__ctors_start>:
     198:	fb 0a       	sbc	r15, r27

0000019a <__ctors_end>:
     19a:	11 24       	eor	r1, r1
     19c:	1f be       	out	0x3f, r1	; 63
     19e:	cf ef       	ldi	r28, 0xFF	; 255
     1a0:	d8 e0       	ldi	r29, 0x08	; 8
     1a2:	de bf       	out	0x3e, r29	; 62
     1a4:	cd bf       	out	0x3d, r28	; 61

000001a6 <__do_copy_data>:
     1a6:	11 e0       	ldi	r17, 0x01	; 1
     1a8:	a0 e0       	ldi	r26, 0x00	; 0
     1aa:	b1 e0       	ldi	r27, 0x01	; 1
     1ac:	e0 ee       	ldi	r30, 0xE0	; 224
     1ae:	fd e1       	ldi	r31, 0x1D	; 29
     1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <__do_copy_data+0x10>
     1b2:	05 90       	lpm	r0, Z+
     1b4:	0d 92       	st	X+, r0
     1b6:	ae 36       	cpi	r26, 0x6E	; 110
     1b8:	b1 07       	cpc	r27, r17
     1ba:	d9 f7       	brne	.-10     	; 0x1b2 <__do_copy_data+0xc>

000001bc <__do_clear_bss>:
     1bc:	23 e0       	ldi	r18, 0x03	; 3
     1be:	ae e6       	ldi	r26, 0x6E	; 110
     1c0:	b1 e0       	ldi	r27, 0x01	; 1
     1c2:	01 c0       	rjmp	.+2      	; 0x1c6 <.do_clear_bss_start>

000001c4 <.do_clear_bss_loop>:
     1c4:	1d 92       	st	X+, r1

000001c6 <.do_clear_bss_start>:
     1c6:	ac 33       	cpi	r26, 0x3C	; 60
     1c8:	b2 07       	cpc	r27, r18
     1ca:	e1 f7       	brne	.-8      	; 0x1c4 <.do_clear_bss_loop>

000001cc <__do_global_ctors>:
     1cc:	10 e0       	ldi	r17, 0x00	; 0
     1ce:	cd ec       	ldi	r28, 0xCD	; 205
     1d0:	d0 e0       	ldi	r29, 0x00	; 0
     1d2:	04 c0       	rjmp	.+8      	; 0x1dc <__do_global_ctors+0x10>
     1d4:	21 97       	sbiw	r28, 0x01	; 1
     1d6:	fe 01       	movw	r30, r28
     1d8:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <__tablejump2__>
     1dc:	cc 3c       	cpi	r28, 0xCC	; 204
     1de:	d1 07       	cpc	r29, r17
     1e0:	c9 f7       	brne	.-14     	; 0x1d4 <__do_global_ctors+0x8>
     1e2:	0e 94 29 0b 	call	0x1652	; 0x1652 <main>
     1e6:	0c 94 ee 0e 	jmp	0x1ddc	; 0x1ddc <_exit>

000001ea <__bad_interrupt>:
     1ea:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ee <_Z11ConvertFreqv>:


void LeerRegistros(uint8_t d) {
	
	#ifdef NOT_SDO
		RegRead[d]=RegWrite[d];
     1ee:	2f 92       	push	r2
     1f0:	3f 92       	push	r3
     1f2:	4f 92       	push	r4
     1f4:	5f 92       	push	r5
     1f6:	6f 92       	push	r6
     1f8:	7f 92       	push	r7
     1fa:	8f 92       	push	r8
     1fc:	9f 92       	push	r9
     1fe:	af 92       	push	r10
     200:	bf 92       	push	r11
     202:	cf 92       	push	r12
     204:	df 92       	push	r13
     206:	ef 92       	push	r14
     208:	ff 92       	push	r15
     20a:	0f 93       	push	r16
     20c:	1f 93       	push	r17
     20e:	cf 93       	push	r28
     210:	df 93       	push	r29
     212:	cd b7       	in	r28, 0x3d	; 61
     214:	de b7       	in	r29, 0x3e	; 62
     216:	62 97       	sbiw	r28, 0x12	; 18
     218:	0f b6       	in	r0, 0x3f	; 63
     21a:	f8 94       	cli
     21c:	de bf       	out	0x3e, r29	; 62
     21e:	0f be       	out	0x3f, r0	; 63
     220:	cd bf       	out	0x3d, r28	; 61
     222:	c0 90 8e 02 	lds	r12, 0x028E	; 0x80028e <freq>
     226:	d0 90 8f 02 	lds	r13, 0x028F	; 0x80028f <freq+0x1>
     22a:	e0 90 90 02 	lds	r14, 0x0290	; 0x800290 <freq+0x2>
     22e:	f0 90 91 02 	lds	r15, 0x0291	; 0x800291 <freq+0x3>
     232:	a7 01       	movw	r20, r14
     234:	96 01       	movw	r18, r12
     236:	60 e0       	ldi	r22, 0x00	; 0
     238:	70 e2       	ldi	r23, 0x20	; 32
     23a:	84 e6       	ldi	r24, 0x64	; 100
     23c:	96 e4       	ldi	r25, 0x46	; 70
     23e:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__divsf3>
     242:	0e 94 3f 07 	call	0xe7e	; 0xe7e <log>
     246:	28 e1       	ldi	r18, 0x18	; 24
     248:	32 e7       	ldi	r19, 0x72	; 114
     24a:	41 e3       	ldi	r20, 0x31	; 49
     24c:	5f e3       	ldi	r21, 0x3F	; 63
     24e:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__divsf3>
     252:	0e 94 65 06 	call	0xcca	; 0xcca <floor>
     256:	4b 01       	movw	r8, r22
     258:	5c 01       	movw	r10, r24
     25a:	0e 94 36 06 	call	0xc6c	; 0xc6c <__fixunssfsi>
     25e:	17 e0       	ldi	r17, 0x07	; 7
     260:	16 1b       	sub	r17, r22
     262:	a5 01       	movw	r20, r10
     264:	94 01       	movw	r18, r8
     266:	60 e0       	ldi	r22, 0x00	; 0
     268:	70 e0       	ldi	r23, 0x00	; 0
     26a:	80 e0       	ldi	r24, 0x00	; 0
     26c:	90 e4       	ldi	r25, 0x40	; 64
     26e:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <pow>
     272:	9b 01       	movw	r18, r22
     274:	ac 01       	movw	r20, r24
     276:	c7 01       	movw	r24, r14
     278:	b6 01       	movw	r22, r12
     27a:	0e 94 87 07 	call	0xf0e	; 0xf0e <__mulsf3>
     27e:	20 e0       	ldi	r18, 0x00	; 0
     280:	30 e2       	ldi	r19, 0x20	; 32
     282:	44 e6       	ldi	r20, 0x64	; 100
     284:	56 e4       	ldi	r21, 0x46	; 70
     286:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__divsf3>
     28a:	20 e0       	ldi	r18, 0x00	; 0
     28c:	30 e2       	ldi	r19, 0x20	; 32
     28e:	44 ee       	ldi	r20, 0xE4	; 228
     290:	55 e4       	ldi	r21, 0x45	; 69
     292:	0e 94 87 07 	call	0xf0e	; 0xf0e <__mulsf3>
     296:	4b 01       	movw	r8, r22
     298:	5c 01       	movw	r10, r24
     29a:	20 e0       	ldi	r18, 0x00	; 0
     29c:	30 e0       	ldi	r19, 0x00	; 0
     29e:	4a e7       	ldi	r20, 0x7A	; 122
     2a0:	55 e4       	ldi	r21, 0x45	; 69
     2a2:	0e 94 b8 05 	call	0xb70	; 0xb70 <__cmpsf2>
     2a6:	87 fd       	sbrc	r24, 7
     2a8:	05 c0       	rjmp	.+10     	; 0x2b4 <_Z11ConvertFreqv+0xc6>
     2aa:	20 e0       	ldi	r18, 0x00	; 0
     2ac:	30 e0       	ldi	r19, 0x00	; 0
     2ae:	48 ec       	ldi	r20, 0xC8	; 200
     2b0:	52 e4       	ldi	r21, 0x42	; 66
     2b2:	04 c0       	rjmp	.+8      	; 0x2bc <_Z11ConvertFreqv+0xce>
     2b4:	20 e0       	ldi	r18, 0x00	; 0
     2b6:	30 e0       	ldi	r19, 0x00	; 0
     2b8:	48 e4       	ldi	r20, 0x48	; 72
     2ba:	52 e4       	ldi	r21, 0x42	; 66
     2bc:	c5 01       	movw	r24, r10
     2be:	b4 01       	movw	r22, r8
     2c0:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__divsf3>
     2c4:	6b 01       	movw	r12, r22
     2c6:	7c 01       	movw	r14, r24
     2c8:	0e 94 65 06 	call	0xcca	; 0xcca <floor>
     2cc:	2b 01       	movw	r4, r22
     2ce:	3c 01       	movw	r6, r24
     2d0:	9b 01       	movw	r18, r22
     2d2:	ac 01       	movw	r20, r24
     2d4:	c7 01       	movw	r24, r14
     2d6:	b6 01       	movw	r22, r12
     2d8:	0e 94 4b 05 	call	0xa96	; 0xa96 <__subsf3>
     2dc:	20 e0       	ldi	r18, 0x00	; 0
     2de:	30 e0       	ldi	r19, 0x00	; 0
     2e0:	40 e8       	ldi	r20, 0x80	; 128
     2e2:	5b e4       	ldi	r21, 0x4B	; 75
     2e4:	0e 94 87 07 	call	0xf0e	; 0xf0e <__mulsf3>
     2e8:	0e 94 36 06 	call	0xc6c	; 0xc6c <__fixunssfsi>
     2ec:	20 91 82 01 	lds	r18, 0x0182	; 0x800182 <__data_end+0x14>
     2f0:	30 91 83 01 	lds	r19, 0x0183	; 0x800183 <__data_end+0x15>
     2f4:	40 91 84 01 	lds	r20, 0x0184	; 0x800184 <__data_end+0x16>
     2f8:	50 91 85 01 	lds	r21, 0x0185	; 0x800185 <__data_end+0x17>
     2fc:	2b 83       	std	Y+3, r18	; 0x03
     2fe:	3c 83       	std	Y+4, r19	; 0x04
     300:	4d 83       	std	Y+5, r20	; 0x05
     302:	5e 83       	std	Y+6, r21	; 0x06
     304:	20 91 c2 01 	lds	r18, 0x01C2	; 0x8001c2 <__data_end+0x54>
     308:	30 91 c3 01 	lds	r19, 0x01C3	; 0x8001c3 <__data_end+0x55>
     30c:	40 91 c4 01 	lds	r20, 0x01C4	; 0x8001c4 <__data_end+0x56>
     310:	50 91 c5 01 	lds	r21, 0x01C5	; 0x8001c5 <__data_end+0x57>
     314:	2f 83       	std	Y+7, r18	; 0x07
     316:	38 87       	std	Y+8, r19	; 0x08
     318:	49 87       	std	Y+9, r20	; 0x09
     31a:	5a 87       	std	Y+10, r21	; 0x0a
     31c:	4e e2       	ldi	r20, 0x2E	; 46
     31e:	52 e0       	ldi	r21, 0x02	; 2
     320:	5a 83       	std	Y+2, r21	; 0x02
     322:	49 83       	std	Y+1, r20	; 0x01
     324:	2e ec       	ldi	r18, 0xCE	; 206
     326:	22 2e       	mov	r2, r18
     328:	21 e0       	ldi	r18, 0x01	; 1
     32a:	32 2e       	mov	r3, r18
     32c:	1a 8a       	std	Y+18, r1	; 0x12
     32e:	19 8a       	std	Y+17, r1	; 0x11
     330:	a1 2f       	mov	r26, r17
     332:	b0 e0       	ldi	r27, 0x00	; 0
     334:	bc 87       	std	Y+12, r27	; 0x0c
     336:	ab 87       	std	Y+11, r26	; 0x0b
     338:	c1 2c       	mov	r12, r1
     33a:	d1 2c       	mov	r13, r1
     33c:	76 01       	movw	r14, r12
     33e:	c3 94       	inc	r12
     340:	9b 01       	movw	r18, r22
     342:	ac 01       	movw	r20, r24
     344:	55 27       	eor	r21, r21
     346:	2d 87       	std	Y+13, r18	; 0x0d
     348:	3e 87       	std	Y+14, r19	; 0x0e
     34a:	4f 87       	std	Y+15, r20	; 0x0f
     34c:	58 8b       	std	Y+16, r21	; 0x10
     34e:	e9 89       	ldd	r30, Y+17	; 0x11
     350:	fa 89       	ldd	r31, Y+18	; 0x12
     352:	33 97       	sbiw	r30, 0x03	; 3
     354:	e4 31       	cpi	r30, 0x14	; 20
     356:	f1 05       	cpc	r31, r1
     358:	08 f0       	brcs	.+2      	; 0x35c <_Z11ConvertFreqv+0x16e>
     35a:	be c0       	rjmp	.+380    	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
     35c:	ec 5c       	subi	r30, 0xCC	; 204
     35e:	ff 4f       	sbci	r31, 0xFF	; 255
     360:	0c 94 e8 0e 	jmp	0x1dd0	; 0x1dd0 <__tablejump2__>
     364:	c3 01       	movw	r24, r6
     366:	b2 01       	movw	r22, r4
     368:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__fixsfsi>
     36c:	dc 01       	movw	r26, r24
     36e:	cb 01       	movw	r24, r22
     370:	bb 27       	eor	r27, r27
     372:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <RegWrite+0xc>
     376:	90 93 db 01 	sts	0x01DB, r25	; 0x8001db <RegWrite+0xd>
     37a:	a0 93 dc 01 	sts	0x01DC, r26	; 0x8001dc <RegWrite+0xe>
     37e:	b0 93 dd 01 	sts	0x01DD, r27	; 0x8001dd <RegWrite+0xf>
     382:	b5 c0       	rjmp	.+362    	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
     384:	8d 85       	ldd	r24, Y+13	; 0x0d
     386:	9e 85       	ldd	r25, Y+14	; 0x0e
     388:	af 85       	ldd	r26, Y+15	; 0x0f
     38a:	b8 89       	ldd	r27, Y+16	; 0x10
     38c:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <RegWrite+0x10>
     390:	90 93 df 01 	sts	0x01DF, r25	; 0x8001df <RegWrite+0x11>
     394:	a0 93 e0 01 	sts	0x01E0, r26	; 0x8001e0 <RegWrite+0x12>
     398:	b0 93 e1 01 	sts	0x01E1, r27	; 0x8001e1 <RegWrite+0x13>
     39c:	a8 c0       	rjmp	.+336    	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
     39e:	2b 81       	ldd	r18, Y+3	; 0x03
     3a0:	3c 81       	ldd	r19, Y+4	; 0x04
     3a2:	4d 81       	ldd	r20, Y+5	; 0x05
     3a4:	5e 81       	ldd	r21, Y+6	; 0x06
     3a6:	20 93 e2 01 	sts	0x01E2, r18	; 0x8001e2 <RegWrite+0x14>
     3aa:	30 93 e3 01 	sts	0x01E3, r19	; 0x8001e3 <RegWrite+0x15>
     3ae:	40 93 e4 01 	sts	0x01E4, r20	; 0x8001e4 <RegWrite+0x16>
     3b2:	50 93 e5 01 	sts	0x01E5, r21	; 0x8001e5 <RegWrite+0x17>
     3b6:	9b c0       	rjmp	.+310    	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
     3b8:	20 e0       	ldi	r18, 0x00	; 0
     3ba:	30 e0       	ldi	r19, 0x00	; 0
     3bc:	4a e7       	ldi	r20, 0x7A	; 122
     3be:	55 e4       	ldi	r21, 0x45	; 69
     3c0:	c5 01       	movw	r24, r10
     3c2:	b4 01       	movw	r22, r8
     3c4:	0e 94 b8 05 	call	0xb70	; 0xb70 <__cmpsf2>
     3c8:	40 91 ee 01 	lds	r20, 0x01EE	; 0x8001ee <RegWrite+0x20>
     3cc:	50 91 ef 01 	lds	r21, 0x01EF	; 0x8001ef <RegWrite+0x21>
     3d0:	60 91 f0 01 	lds	r22, 0x01F0	; 0x8001f0 <RegWrite+0x22>
     3d4:	70 91 f1 01 	lds	r23, 0x01F1	; 0x8001f1 <RegWrite+0x23>
     3d8:	87 ff       	sbrs	r24, 7
     3da:	02 c0       	rjmp	.+4      	; 0x3e0 <_Z11ConvertFreqv+0x1f2>
     3dc:	67 7f       	andi	r22, 0xF7	; 247
     3de:	01 c0       	rjmp	.+2      	; 0x3e2 <_Z11ConvertFreqv+0x1f4>
     3e0:	68 60       	ori	r22, 0x08	; 8
     3e2:	40 93 ee 01 	sts	0x01EE, r20	; 0x8001ee <RegWrite+0x20>
     3e6:	50 93 ef 01 	sts	0x01EF, r21	; 0x8001ef <RegWrite+0x21>
     3ea:	60 93 f0 01 	sts	0x01F0, r22	; 0x8001f0 <RegWrite+0x22>
     3ee:	70 93 f1 01 	sts	0x01F1, r23	; 0x8001f1 <RegWrite+0x23>
     3f2:	7d c0       	rjmp	.+250    	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
     3f4:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <RegWrite+0x14>
     3f8:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <RegWrite+0x15>
     3fc:	a0 91 e4 01 	lds	r26, 0x01E4	; 0x8001e4 <RegWrite+0x16>
     400:	b0 91 e5 01 	lds	r27, 0x01E5	; 0x8001e5 <RegWrite+0x17>
     404:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <RegWrite+0x50>
     408:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <RegWrite+0x51>
     40c:	a0 93 20 02 	sts	0x0220, r26	; 0x800220 <RegWrite+0x52>
     410:	b0 93 21 02 	sts	0x0221, r27	; 0x800221 <RegWrite+0x53>
     414:	6c c0       	rjmp	.+216    	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
     416:	8f 81       	ldd	r24, Y+7	; 0x07
     418:	98 85       	ldd	r25, Y+8	; 0x08
     41a:	a9 85       	ldd	r26, Y+9	; 0x09
     41c:	ba 85       	ldd	r27, Y+10	; 0x0a
     41e:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <RegWrite+0x54>
     422:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <RegWrite+0x55>
     426:	a0 93 24 02 	sts	0x0224, r26	; 0x800224 <RegWrite+0x56>
     42a:	b0 93 25 02 	sts	0x0225, r27	; 0x800225 <RegWrite+0x57>
     42e:	5f c0       	rjmp	.+190    	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
     430:	40 91 26 02 	lds	r20, 0x0226	; 0x800226 <RegWrite+0x58>
     434:	50 91 27 02 	lds	r21, 0x0227	; 0x800227 <RegWrite+0x59>
     438:	60 91 28 02 	lds	r22, 0x0228	; 0x800228 <RegWrite+0x5a>
     43c:	70 91 29 02 	lds	r23, 0x0229	; 0x800229 <RegWrite+0x5b>
     440:	83 e0       	ldi	r24, 0x03	; 3
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	9c 01       	movw	r18, r24
     446:	87 30       	cpi	r24, 0x07	; 7
     448:	91 05       	cpc	r25, r1
     44a:	5c f4       	brge	.+22     	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
     44c:	23 50       	subi	r18, 0x03	; 3
     44e:	31 09       	sbc	r19, r1
     450:	a2 e0       	ldi	r26, 0x02	; 2
     452:	b0 e0       	ldi	r27, 0x00	; 0
     454:	02 c0       	rjmp	.+4      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
     456:	b5 95       	asr	r27
     458:	a7 95       	ror	r26
     45a:	2a 95       	dec	r18
     45c:	e2 f7       	brpl	.-8      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
     45e:	9d 01       	movw	r18, r26
     460:	0a c0       	rjmp	.+20     	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
     462:	27 50       	subi	r18, 0x07	; 7
     464:	31 09       	sbc	r19, r1
     466:	eb 85       	ldd	r30, Y+11	; 0x0b
     468:	fc 85       	ldd	r31, Y+12	; 0x0c
     46a:	02 c0       	rjmp	.+4      	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
     46c:	f5 95       	asr	r31
     46e:	e7 95       	ror	r30
     470:	2a 95       	dec	r18
     472:	e2 f7       	brpl	.-8      	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
     474:	9f 01       	movw	r18, r30
     476:	20 ff       	sbrs	r18, 0
     478:	0f c0       	rjmp	.+30     	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
     47a:	97 01       	movw	r18, r14
     47c:	86 01       	movw	r16, r12
     47e:	08 2e       	mov	r0, r24
     480:	04 c0       	rjmp	.+8      	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
     482:	00 0f       	add	r16, r16
     484:	11 1f       	adc	r17, r17
     486:	22 1f       	adc	r18, r18
     488:	33 1f       	adc	r19, r19
     48a:	0a 94       	dec	r0
     48c:	d2 f7       	brpl	.-12     	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
     48e:	40 2b       	or	r20, r16
     490:	51 2b       	or	r21, r17
     492:	62 2b       	or	r22, r18
     494:	73 2b       	or	r23, r19
     496:	12 c0       	rjmp	.+36     	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
     498:	97 01       	movw	r18, r14
     49a:	86 01       	movw	r16, r12
     49c:	08 2e       	mov	r0, r24
     49e:	04 c0       	rjmp	.+8      	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
     4a0:	00 0f       	add	r16, r16
     4a2:	11 1f       	adc	r17, r17
     4a4:	22 1f       	adc	r18, r18
     4a6:	33 1f       	adc	r19, r19
     4a8:	0a 94       	dec	r0
     4aa:	d2 f7       	brpl	.-12     	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
     4ac:	00 95       	com	r16
     4ae:	10 95       	com	r17
     4b0:	20 95       	com	r18
     4b2:	30 95       	com	r19
     4b4:	40 23       	and	r20, r16
     4b6:	51 23       	and	r21, r17
     4b8:	62 23       	and	r22, r18
     4ba:	73 23       	and	r23, r19
     4bc:	01 96       	adiw	r24, 0x01	; 1
     4be:	80 31       	cpi	r24, 0x10	; 16
     4c0:	91 05       	cpc	r25, r1
     4c2:	09 f0       	breq	.+2      	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
     4c4:	bf cf       	rjmp	.-130    	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
     4c6:	40 93 26 02 	sts	0x0226, r20	; 0x800226 <RegWrite+0x58>
     4ca:	50 93 27 02 	sts	0x0227, r21	; 0x800227 <RegWrite+0x59>
     4ce:	60 93 28 02 	sts	0x0228, r22	; 0x800228 <RegWrite+0x5a>
     4d2:	70 93 29 02 	sts	0x0229, r23	; 0x800229 <RegWrite+0x5b>
     4d6:	0b c0       	rjmp	.+22     	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
     4d8:	e9 81       	ldd	r30, Y+1	; 0x01
     4da:	fa 81       	ldd	r31, Y+2	; 0x02
     4dc:	80 81       	ld	r24, Z
     4de:	91 81       	ldd	r25, Z+1	; 0x01
     4e0:	a2 81       	ldd	r26, Z+2	; 0x02
     4e2:	b3 81       	ldd	r27, Z+3	; 0x03
     4e4:	f1 01       	movw	r30, r2
     4e6:	80 83       	st	Z, r24
     4e8:	91 83       	std	Z+1, r25	; 0x01
     4ea:	a2 83       	std	Z+2, r26	; 0x02
     4ec:	b3 83       	std	Z+3, r27	; 0x03
     4ee:	29 89       	ldd	r18, Y+17	; 0x11
     4f0:	3a 89       	ldd	r19, Y+18	; 0x12
     4f2:	2f 5f       	subi	r18, 0xFF	; 255
     4f4:	3f 4f       	sbci	r19, 0xFF	; 255
     4f6:	3a 8b       	std	Y+18, r19	; 0x12
     4f8:	29 8b       	std	Y+17, r18	; 0x11
     4fa:	49 81       	ldd	r20, Y+1	; 0x01
     4fc:	5a 81       	ldd	r21, Y+2	; 0x02
     4fe:	4c 5f       	subi	r20, 0xFC	; 252
     500:	5f 4f       	sbci	r21, 0xFF	; 255
     502:	5a 83       	std	Y+2, r21	; 0x02
     504:	49 83       	std	Y+1, r20	; 0x01
     506:	54 e0       	ldi	r21, 0x04	; 4
     508:	25 0e       	add	r2, r21
     50a:	31 1c       	adc	r3, r1
     50c:	27 31       	cpi	r18, 0x17	; 23
     50e:	31 05       	cpc	r19, r1
     510:	09 f0       	breq	.+2      	; 0x514 <__EEPROM_REGION_LENGTH__+0x114>
     512:	1d cf       	rjmp	.-454    	; 0x34e <_Z11ConvertFreqv+0x160>
     514:	62 96       	adiw	r28, 0x12	; 18
     516:	0f b6       	in	r0, 0x3f	; 63
     518:	f8 94       	cli
     51a:	de bf       	out	0x3e, r29	; 62
     51c:	0f be       	out	0x3f, r0	; 63
     51e:	cd bf       	out	0x3d, r28	; 61
     520:	df 91       	pop	r29
     522:	cf 91       	pop	r28
     524:	1f 91       	pop	r17
     526:	0f 91       	pop	r16
     528:	ff 90       	pop	r15
     52a:	ef 90       	pop	r14
     52c:	df 90       	pop	r13
     52e:	cf 90       	pop	r12
     530:	bf 90       	pop	r11
     532:	af 90       	pop	r10
     534:	9f 90       	pop	r9
     536:	8f 90       	pop	r8
     538:	7f 90       	pop	r7
     53a:	6f 90       	pop	r6
     53c:	5f 90       	pop	r5
     53e:	4f 90       	pop	r4
     540:	3f 90       	pop	r3
     542:	2f 90       	pop	r2
     544:	08 95       	ret

00000546 <_Z17EscribirRegistrosh>:
     546:	cf 93       	push	r28
     548:	df 93       	push	r29
     54a:	d8 2f       	mov	r29, r24
     54c:	84 31       	cpi	r24, 0x14	; 20
     54e:	30 f0       	brcs	.+12     	; 0x55c <_Z17EscribirRegistrosh+0x16>
     550:	87 31       	cpi	r24, 0x17	; 23
     552:	31 f0       	breq	.+12     	; 0x560 <_Z17EscribirRegistrosh+0x1a>
     554:	88 31       	cpi	r24, 0x18	; 24
     556:	31 f0       	breq	.+12     	; 0x564 <_Z17EscribirRegistrosh+0x1e>
     558:	c5 e0       	ldi	r28, 0x05	; 5
     55a:	05 c0       	rjmp	.+10     	; 0x566 <_Z17EscribirRegistrosh+0x20>
     55c:	c8 2f       	mov	r28, r24
     55e:	03 c0       	rjmp	.+6      	; 0x566 <_Z17EscribirRegistrosh+0x20>
     560:	c3 e0       	ldi	r28, 0x03	; 3
     562:	01 c0       	rjmp	.+2      	; 0x566 <_Z17EscribirRegistrosh+0x20>
     564:	c4 e0       	ldi	r28, 0x04	; 4
     566:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <_ZN8SPIClass13interruptModeE>
     56a:	88 23       	and	r24, r24
     56c:	99 f0       	breq	.+38     	; 0x594 <_Z17EscribirRegistrosh+0x4e>
     56e:	2f b7       	in	r18, 0x3f	; 63
     570:	f8 94       	cli
     572:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <_ZN8SPIClass13interruptModeE>
     576:	81 30       	cpi	r24, 0x01	; 1
     578:	59 f4       	brne	.+22     	; 0x590 <_Z17EscribirRegistrosh+0x4a>
     57a:	8d b3       	in	r24, 0x1d	; 29
     57c:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <_ZN8SPIClass13interruptSaveE>
     580:	9d b3       	in	r25, 0x1d	; 29
     582:	80 91 39 03 	lds	r24, 0x0339	; 0x800339 <_ZN8SPIClass13interruptMaskE>
     586:	80 95       	com	r24
     588:	89 23       	and	r24, r25
     58a:	8d bb       	out	0x1d, r24	; 29
     58c:	2f bf       	out	0x3f, r18	; 63
     58e:	02 c0       	rjmp	.+4      	; 0x594 <_Z17EscribirRegistrosh+0x4e>
     590:	20 93 38 03 	sts	0x0338, r18	; 0x800338 <_ZN8SPIClass13interruptSaveE>
     594:	80 e5       	ldi	r24, 0x50	; 80
     596:	8c bd       	out	0x2c, r24	; 44
     598:	1d bc       	out	0x2d, r1	; 45
     59a:	60 e0       	ldi	r22, 0x00	; 0
     59c:	8a e0       	ldi	r24, 0x0A	; 10
     59e:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <digitalWrite>
     5a2:	44 e0       	ldi	r20, 0x04	; 4
     5a4:	d4 9f       	mul	r29, r20
     5a6:	f0 01       	movw	r30, r0
     5a8:	11 24       	eor	r1, r1
     5aa:	e2 53       	subi	r30, 0x32	; 50
     5ac:	fe 4f       	sbci	r31, 0xFE	; 254
     5ae:	80 81       	ld	r24, Z
     5b0:	91 81       	ldd	r25, Z+1	; 0x01
     5b2:	a2 81       	ldd	r26, Z+2	; 0x02
     5b4:	b3 81       	ldd	r27, Z+3	; 0x03
     5b6:	44 27       	eor	r20, r20
     5b8:	58 2f       	mov	r21, r24
     5ba:	69 2f       	mov	r22, r25
     5bc:	7a 2f       	mov	r23, r26
     5be:	8c 2f       	mov	r24, r28
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	a0 e0       	ldi	r26, 0x00	; 0
     5c4:	b0 e0       	ldi	r27, 0x00	; 0
     5c6:	33 e0       	ldi	r19, 0x03	; 3
     5c8:	88 0f       	add	r24, r24
     5ca:	99 1f       	adc	r25, r25
     5cc:	aa 1f       	adc	r26, r26
     5ce:	bb 1f       	adc	r27, r27
     5d0:	3a 95       	dec	r19
     5d2:	d1 f7       	brne	.-12     	; 0x5c8 <_Z17EscribirRegistrosh+0x82>
     5d4:	84 2b       	or	r24, r20
     5d6:	95 2b       	or	r25, r21
     5d8:	a6 2b       	or	r26, r22
     5da:	b7 2b       	or	r27, r23
     5dc:	28 e1       	ldi	r18, 0x18	; 24
     5de:	30 e0       	ldi	r19, 0x00	; 0
     5e0:	ac 01       	movw	r20, r24
     5e2:	bd 01       	movw	r22, r26
     5e4:	02 2e       	mov	r0, r18
     5e6:	04 c0       	rjmp	.+8      	; 0x5f0 <_Z17EscribirRegistrosh+0xaa>
     5e8:	76 95       	lsr	r23
     5ea:	67 95       	ror	r22
     5ec:	57 95       	ror	r21
     5ee:	47 95       	ror	r20
     5f0:	0a 94       	dec	r0
     5f2:	d2 f7       	brpl	.-12     	; 0x5e8 <_Z17EscribirRegistrosh+0xa2>
     5f4:	4e bd       	out	0x2e, r20	; 46
     5f6:	00 00       	nop
     5f8:	0d b4       	in	r0, 0x2d	; 45
     5fa:	07 fe       	sbrs	r0, 7
     5fc:	fd cf       	rjmp	.-6      	; 0x5f8 <_Z17EscribirRegistrosh+0xb2>
     5fe:	4e b5       	in	r20, 0x2e	; 46
     600:	28 50       	subi	r18, 0x08	; 8
     602:	31 09       	sbc	r19, r1
     604:	28 3f       	cpi	r18, 0xF8	; 248
     606:	4f ef       	ldi	r20, 0xFF	; 255
     608:	34 07       	cpc	r19, r20
     60a:	51 f7       	brne	.-44     	; 0x5e0 <_Z17EscribirRegistrosh+0x9a>
     60c:	61 e0       	ldi	r22, 0x01	; 1
     60e:	8a e0       	ldi	r24, 0x0A	; 10
     610:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <digitalWrite>
     614:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <_ZN8SPIClass13interruptModeE>
     618:	88 23       	and	r24, r24
     61a:	61 f0       	breq	.+24     	; 0x634 <_Z17EscribirRegistrosh+0xee>
     61c:	9f b7       	in	r25, 0x3f	; 63
     61e:	f8 94       	cli
     620:	20 91 3a 03 	lds	r18, 0x033A	; 0x80033a <_ZN8SPIClass13interruptModeE>
     624:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <_ZN8SPIClass13interruptSaveE>
     628:	21 30       	cpi	r18, 0x01	; 1
     62a:	19 f4       	brne	.+6      	; 0x632 <_Z17EscribirRegistrosh+0xec>
     62c:	8d bb       	out	0x1d, r24	; 29
     62e:	9f bf       	out	0x3f, r25	; 63
     630:	01 c0       	rjmp	.+2      	; 0x634 <_Z17EscribirRegistrosh+0xee>
     632:	8f bf       	out	0x3f, r24	; 63
     634:	61 e0       	ldi	r22, 0x01	; 1
     636:	70 e0       	ldi	r23, 0x00	; 0
     638:	80 e0       	ldi	r24, 0x00	; 0
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	df 91       	pop	r29
     63e:	cf 91       	pop	r28
     640:	0c 94 56 0d 	jmp	0x1aac	; 0x1aac <delay>

00000644 <_Z10LockDetectv>:
/////////////////////////// Subroutine: Fixfrequencyselect ////////////////////////////


bool LockDetect(){
	 bool locked=false;
  if(digitalRead(MOSI)>0){
     644:	8b e0       	ldi	r24, 0x0B	; 11
     646:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <digitalRead>
	  }
#endif
	  
	  
}
  return locked;
     64a:	21 e0       	ldi	r18, 0x01	; 1
     64c:	18 16       	cp	r1, r24
     64e:	19 06       	cpc	r1, r25
     650:	0c f0       	brlt	.+2      	; 0x654 <_Z10LockDetectv+0x10>
     652:	20 e0       	ldi	r18, 0x00	; 0
}
     654:	82 2f       	mov	r24, r18
     656:	08 95       	ret

00000658 <_Z16IniciarRegistrosv>:

void IniciarRegistros(){
     658:	2f 92       	push	r2
     65a:	3f 92       	push	r3
     65c:	4f 92       	push	r4
     65e:	5f 92       	push	r5
     660:	6f 92       	push	r6
     662:	7f 92       	push	r7
     664:	8f 92       	push	r8
     666:	9f 92       	push	r9
     668:	af 92       	push	r10
     66a:	bf 92       	push	r11
     66c:	cf 92       	push	r12
     66e:	df 92       	push	r13
     670:	ef 92       	push	r14
     672:	ff 92       	push	r15
     674:	0f 93       	push	r16
     676:	1f 93       	push	r17
     678:	cf 93       	push	r28
     67a:	df 93       	push	r29
     67c:	cd b7       	in	r28, 0x3d	; 61
     67e:	de b7       	in	r29, 0x3e	; 62
     680:	c0 56       	subi	r28, 0x60	; 96
     682:	d1 09       	sbc	r29, r1
     684:	0f b6       	in	r0, 0x3f	; 63
     686:	f8 94       	cli
     688:	de bf       	out	0x3e, r29	; 62
     68a:	0f be       	out	0x3f, r0	; 63
     68c:	cd bf       	out	0x3d, r28	; 61
     68e:	de 01       	movw	r26, r28
     690:	11 96       	adiw	r26, 0x01	; 1
     692:	8e ec       	ldi	r24, 0xCE	; 206
     694:	28 2e       	mov	r2, r24
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	38 2e       	mov	r3, r24
  uint32_t RegIni[24];      // ADF5610 Reg's
  
  for (int i = 0; i <= 24; i++) {
     69a:	80 e0       	ldi	r24, 0x00	; 0
     69c:	90 e0       	ldi	r25, 0x00	; 0
        break;
      case 5:
        RegIni[i] = 0x000;
        break;
      case 6:
        RegIni[i] = 0x2F4A;
     69e:	0a e4       	ldi	r16, 0x4A	; 74
     6a0:	1f e2       	ldi	r17, 0x2F	; 47
     6a2:	20 e0       	ldi	r18, 0x00	; 0
     6a4:	30 e0       	ldi	r19, 0x00	; 0
        break;
      case 3:
        RegIni[i] = 0x31;
        break;
      case 4:
        RegIni[i] = 0xFD70A3;
     6a6:	43 ea       	ldi	r20, 0xA3	; 163
     6a8:	c4 2e       	mov	r12, r20
     6aa:	40 e7       	ldi	r20, 0x70	; 112
     6ac:	d4 2e       	mov	r13, r20
     6ae:	4d ef       	ldi	r20, 0xFD	; 253
     6b0:	e4 2e       	mov	r14, r20
     6b2:	f1 2c       	mov	r15, r1
        break;
      case 2:
        RegIni[i] = 0x1;
        break;
      case 3:
        RegIni[i] = 0x31;
     6b4:	51 e3       	ldi	r21, 0x31	; 49
     6b6:	85 2e       	mov	r8, r21
     6b8:	91 2c       	mov	r9, r1
     6ba:	a1 2c       	mov	r10, r1
     6bc:	b1 2c       	mov	r11, r1
    switch (i) {
      case 1:
        RegIni[i] = 0x2;
        break;
      case 2:
        RegIni[i] = 0x1;
     6be:	41 2c       	mov	r4, r1
     6c0:	51 2c       	mov	r5, r1
     6c2:	32 01       	movw	r6, r4
     6c4:	43 94       	inc	r4

void IniciarRegistros(){
  uint32_t RegIni[24];      // ADF5610 Reg's
  
  for (int i = 0; i <= 24; i++) {
    switch (i) {
     6c6:	fc 01       	movw	r30, r24
     6c8:	31 97       	sbiw	r30, 0x01	; 1
     6ca:	e6 31       	cpi	r30, 0x16	; 22
     6cc:	f1 05       	cpc	r31, r1
     6ce:	08 f0       	brcs	.+2      	; 0x6d2 <_Z16IniciarRegistrosv+0x7a>
     6d0:	7f c0       	rjmp	.+254    	; 0x7d0 <_Z16IniciarRegistrosv+0x178>
     6d2:	e8 5b       	subi	r30, 0xB8	; 184
     6d4:	ff 4f       	sbci	r31, 0xFF	; 255
     6d6:	0c 94 e8 0e 	jmp	0x1dd0	; 0x1dd0 <__tablejump2__>
      case 1:
        RegIni[i] = 0x2;
     6da:	42 e0       	ldi	r20, 0x02	; 2
     6dc:	50 e0       	ldi	r21, 0x00	; 0
     6de:	60 e0       	ldi	r22, 0x00	; 0
     6e0:	70 e0       	ldi	r23, 0x00	; 0
     6e2:	4d 83       	std	Y+5, r20	; 0x05
     6e4:	5e 83       	std	Y+6, r21	; 0x06
     6e6:	6f 83       	std	Y+7, r22	; 0x07
     6e8:	78 87       	std	Y+8, r23	; 0x08
        break;
     6ea:	77 c0       	rjmp	.+238    	; 0x7da <_Z16IniciarRegistrosv+0x182>
      case 2:
        RegIni[i] = 0x1;
     6ec:	49 86       	std	Y+9, r4	; 0x09
     6ee:	5a 86       	std	Y+10, r5	; 0x0a
     6f0:	6b 86       	std	Y+11, r6	; 0x0b
     6f2:	7c 86       	std	Y+12, r7	; 0x0c
        break;
     6f4:	72 c0       	rjmp	.+228    	; 0x7da <_Z16IniciarRegistrosv+0x182>
      case 3:
        RegIni[i] = 0x31;
     6f6:	8d 86       	std	Y+13, r8	; 0x0d
     6f8:	9e 86       	std	Y+14, r9	; 0x0e
     6fa:	af 86       	std	Y+15, r10	; 0x0f
     6fc:	b8 8a       	std	Y+16, r11	; 0x10
        break;
     6fe:	6d c0       	rjmp	.+218    	; 0x7da <_Z16IniciarRegistrosv+0x182>
      case 4:
        RegIni[i] = 0xFD70A3;
     700:	c9 8a       	std	Y+17, r12	; 0x11
     702:	da 8a       	std	Y+18, r13	; 0x12
     704:	eb 8a       	std	Y+19, r14	; 0x13
     706:	fc 8a       	std	Y+20, r15	; 0x14
        break;
     708:	68 c0       	rjmp	.+208    	; 0x7da <_Z16IniciarRegistrosv+0x182>
      case 5:
        RegIni[i] = 0x000;
     70a:	1d 8a       	std	Y+21, r1	; 0x15
     70c:	1e 8a       	std	Y+22, r1	; 0x16
     70e:	1f 8a       	std	Y+23, r1	; 0x17
     710:	18 8e       	std	Y+24, r1	; 0x18
        break;
     712:	63 c0       	rjmp	.+198    	; 0x7da <_Z16IniciarRegistrosv+0x182>
      case 6:
        RegIni[i] = 0x2F4A;
     714:	09 8f       	std	Y+25, r16	; 0x19
     716:	1a 8f       	std	Y+26, r17	; 0x1a
     718:	2b 8f       	std	Y+27, r18	; 0x1b
     71a:	3c 8f       	std	Y+28, r19	; 0x1c
        break;
     71c:	5e c0       	rjmp	.+188    	; 0x7da <_Z16IniciarRegistrosv+0x182>
      case 7:
        RegIni[i] = 0x214D;
     71e:	4d e4       	ldi	r20, 0x4D	; 77
     720:	51 e2       	ldi	r21, 0x21	; 33
     722:	60 e0       	ldi	r22, 0x00	; 0
     724:	70 e0       	ldi	r23, 0x00	; 0
     726:	4d 8f       	std	Y+29, r20	; 0x1d
     728:	5e 8f       	std	Y+30, r21	; 0x1e
     72a:	6f 8f       	std	Y+31, r22	; 0x1f
     72c:	78 a3       	std	Y+32, r23	; 0x20
        break;
     72e:	55 c0       	rjmp	.+170    	; 0x7da <_Z16IniciarRegistrosv+0x182>
      case 8:
        RegIni[i] = 0xC9BEFF;
     730:	4f ef       	ldi	r20, 0xFF	; 255
     732:	5e eb       	ldi	r21, 0xBE	; 190
     734:	69 ec       	ldi	r22, 0xC9	; 201
     736:	70 e0       	ldi	r23, 0x00	; 0
     738:	49 a3       	std	Y+33, r20	; 0x21
     73a:	5a a3       	std	Y+34, r21	; 0x22
     73c:	6b a3       	std	Y+35, r22	; 0x23
     73e:	7c a3       	std	Y+36, r23	; 0x24
        break;
     740:	4c c0       	rjmp	.+152    	; 0x7da <_Z16IniciarRegistrosv+0x182>
      case 9:
        RegIni[i] = 0x3FFF;
     742:	4f ef       	ldi	r20, 0xFF	; 255
     744:	5f e3       	ldi	r21, 0x3F	; 63
     746:	60 e0       	ldi	r22, 0x00	; 0
     748:	70 e0       	ldi	r23, 0x00	; 0
     74a:	4d a3       	std	Y+37, r20	; 0x25
     74c:	5e a3       	std	Y+38, r21	; 0x26
     74e:	6f a3       	std	Y+39, r22	; 0x27
     750:	78 a7       	std	Y+40, r23	; 0x28
        break;
     752:	43 c0       	rjmp	.+134    	; 0x7da <_Z16IniciarRegistrosv+0x182>
      case 10:
        RegIni[i] = 0x2047;
     754:	47 e4       	ldi	r20, 0x47	; 71
     756:	50 e2       	ldi	r21, 0x20	; 32
     758:	60 e0       	ldi	r22, 0x00	; 0
     75a:	70 e0       	ldi	r23, 0x00	; 0
     75c:	49 a7       	std	Y+41, r20	; 0x29
     75e:	5a a7       	std	Y+42, r21	; 0x2a
     760:	6b a7       	std	Y+43, r22	; 0x2b
     762:	7c a7       	std	Y+44, r23	; 0x2c
        break;
     764:	3a c0       	rjmp	.+116    	; 0x7da <_Z16IniciarRegistrosv+0x182>
      case 11:
        RegIni[i] = 0xF8061;
     766:	41 e6       	ldi	r20, 0x61	; 97
     768:	50 e8       	ldi	r21, 0x80	; 128
     76a:	6f e0       	ldi	r22, 0x0F	; 15
     76c:	70 e0       	ldi	r23, 0x00	; 0
     76e:	4d a7       	std	Y+45, r20	; 0x2d
     770:	5e a7       	std	Y+46, r21	; 0x2e
     772:	6f a7       	std	Y+47, r22	; 0x2f
     774:	78 ab       	std	Y+48, r23	; 0x30
        break;
     776:	31 c0       	rjmp	.+98     	; 0x7da <_Z16IniciarRegistrosv+0x182>
      case 15:
        RegIni[i] = 0x081;
     778:	41 e8       	ldi	r20, 0x81	; 129
     77a:	50 e0       	ldi	r21, 0x00	; 0
     77c:	60 e0       	ldi	r22, 0x00	; 0
     77e:	70 e0       	ldi	r23, 0x00	; 0
     780:	21 96       	adiw	r28, 0x01	; 1
     782:	4c af       	std	Y+60, r20	; 0x3c
     784:	5d af       	std	Y+61, r21	; 0x3d
     786:	6e af       	std	Y+62, r22	; 0x3e
     788:	7f af       	std	Y+63, r23	; 0x3f
     78a:	21 97       	sbiw	r28, 0x01	; 1
        break;
     78c:	26 c0       	rjmp	.+76     	; 0x7da <_Z16IniciarRegistrosv+0x182>
      case 20:
        RegIni[i] = RegIni[5];
     78e:	4d 89       	ldd	r20, Y+21	; 0x15
     790:	5e 89       	ldd	r21, Y+22	; 0x16
     792:	6f 89       	ldd	r22, Y+23	; 0x17
     794:	78 8d       	ldd	r23, Y+24	; 0x18
     796:	65 96       	adiw	r28, 0x15	; 21
     798:	4c af       	std	Y+60, r20	; 0x3c
     79a:	5d af       	std	Y+61, r21	; 0x3d
     79c:	6e af       	std	Y+62, r22	; 0x3e
     79e:	7f af       	std	Y+63, r23	; 0x3f
     7a0:	65 97       	sbiw	r28, 0x15	; 21
         break;
     7a2:	1b c0       	rjmp	.+54     	; 0x7da <_Z16IniciarRegistrosv+0x182>
      case 21:
       // RegIni[i] = 0x8E08;
		     RegIni[i] = (0x01<<3)|(0x00<<7)|(0x07<<9)|(0x03<<12)|(0x01<<15);
     7a4:	48 e0       	ldi	r20, 0x08	; 8
     7a6:	5e eb       	ldi	r21, 0xBE	; 190
     7a8:	6f ef       	ldi	r22, 0xFF	; 255
     7aa:	7f ef       	ldi	r23, 0xFF	; 255
     7ac:	69 96       	adiw	r28, 0x19	; 25
     7ae:	4c af       	std	Y+60, r20	; 0x3c
     7b0:	5d af       	std	Y+61, r21	; 0x3d
     7b2:	6e af       	std	Y+62, r22	; 0x3e
     7b4:	7f af       	std	Y+63, r23	; 0x3f
     7b6:	69 97       	sbiw	r28, 0x19	; 25
         break;
     7b8:	10 c0       	rjmp	.+32     	; 0x7da <_Z16IniciarRegistrosv+0x182>
       case 22:
        RegIni[i] = 0x390;
     7ba:	40 e9       	ldi	r20, 0x90	; 144
     7bc:	53 e0       	ldi	r21, 0x03	; 3
     7be:	60 e0       	ldi	r22, 0x00	; 0
     7c0:	70 e0       	ldi	r23, 0x00	; 0
     7c2:	6d 96       	adiw	r28, 0x1d	; 29
     7c4:	4c af       	std	Y+60, r20	; 0x3c
     7c6:	5d af       	std	Y+61, r21	; 0x3d
     7c8:	6e af       	std	Y+62, r22	; 0x3e
     7ca:	7f af       	std	Y+63, r23	; 0x3f
     7cc:	6d 97       	sbiw	r28, 0x1d	; 29
		// RegIni[i] =(0x02<<3)|(0x07<<7)|(0x00);
         break;
     7ce:	05 c0       	rjmp	.+10     	; 0x7da <_Z16IniciarRegistrosv+0x182>
        default:
        RegIni[i] = 0x0;
     7d0:	1d 92       	st	X+, r1
     7d2:	1d 92       	st	X+, r1
     7d4:	1d 92       	st	X+, r1
     7d6:	1c 92       	st	X, r1
     7d8:	13 97       	sbiw	r26, 0x03	; 3
        break;
    }
    RegWrite[i]=RegIni[i];
     7da:	4d 91       	ld	r20, X+
     7dc:	5d 91       	ld	r21, X+
     7de:	6d 91       	ld	r22, X+
     7e0:	7d 91       	ld	r23, X+
     7e2:	f1 01       	movw	r30, r2
     7e4:	41 93       	st	Z+, r20
     7e6:	51 93       	st	Z+, r21
     7e8:	61 93       	st	Z+, r22
     7ea:	71 93       	st	Z+, r23
     7ec:	1f 01       	movw	r2, r30
}

void IniciarRegistros(){
  uint32_t RegIni[24];      // ADF5610 Reg's
  
  for (int i = 0; i <= 24; i++) {
     7ee:	01 96       	adiw	r24, 0x01	; 1
     7f0:	89 31       	cpi	r24, 0x19	; 25
     7f2:	91 05       	cpc	r25, r1
     7f4:	09 f0       	breq	.+2      	; 0x7f8 <_Z16IniciarRegistrosv+0x1a0>
     7f6:	67 cf       	rjmp	.-306    	; 0x6c6 <_Z16IniciarRegistrosv+0x6e>
    }
    RegWrite[i]=RegIni[i];
    
     //Serial.println(RegWrite[i],HEX);
  }
}
     7f8:	c0 5a       	subi	r28, 0xA0	; 160
     7fa:	df 4f       	sbci	r29, 0xFF	; 255
     7fc:	0f b6       	in	r0, 0x3f	; 63
     7fe:	f8 94       	cli
     800:	de bf       	out	0x3e, r29	; 62
     802:	0f be       	out	0x3f, r0	; 63
     804:	cd bf       	out	0x3d, r28	; 61
     806:	df 91       	pop	r29
     808:	cf 91       	pop	r28
     80a:	1f 91       	pop	r17
     80c:	0f 91       	pop	r16
     80e:	ff 90       	pop	r15
     810:	ef 90       	pop	r14
     812:	df 90       	pop	r13
     814:	cf 90       	pop	r12
     816:	bf 90       	pop	r11
     818:	af 90       	pop	r10
     81a:	9f 90       	pop	r9
     81c:	8f 90       	pop	r8
     81e:	7f 90       	pop	r7
     820:	6f 90       	pop	r6
     822:	5f 90       	pop	r5
     824:	4f 90       	pop	r4
     826:	3f 90       	pop	r3
     828:	2f 90       	pop	r2
     82a:	08 95       	ret

0000082c <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     82c:	26 e0       	ldi	r18, 0x06	; 6
     82e:	40 e0       	ldi	r20, 0x00	; 0
     830:	52 ec       	ldi	r21, 0xC2	; 194
     832:	61 e0       	ldi	r22, 0x01	; 1
     834:	70 e0       	ldi	r23, 0x00	; 0
     836:	82 e9       	ldi	r24, 0x92	; 146
     838:	92 e0       	ldi	r25, 0x02	; 2
     83a:	0e 94 34 0a 	call	0x1468	; 0x1468 <_ZN14HardwareSerial5beginEmh>
//////////////////////////////////////////////////////////////////////////////
void setup() {

  // ******************Screen mask static text*****************
  Serial.begin(115200);
  Serial.setTimeout(1000);
     83e:	48 ee       	ldi	r20, 0xE8	; 232
     840:	53 e0       	ldi	r21, 0x03	; 3
     842:	60 e0       	ldi	r22, 0x00	; 0
     844:	70 e0       	ldi	r23, 0x00	; 0
     846:	82 e9       	ldi	r24, 0x92	; 146
     848:	92 e0       	ldi	r25, 0x02	; 2
     84a:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <_ZN6Stream10setTimeoutEm>
#ifdef NOT_SDO
	pinMode(MISO, INPUT); 
     84e:	60 e0       	ldi	r22, 0x00	; 0
     850:	8c e0       	ldi	r24, 0x0C	; 12
     852:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <pinMode>
#else
	  pinMode(12, INPUT_PULLUP);
#endif
 
  pinMode(SEN, OUTPUT);
     856:	61 e0       	ldi	r22, 0x01	; 1
     858:	8a e0       	ldi	r24, 0x0A	; 10
     85a:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <pinMode>
  IniciarRegistros();
     85e:	0e 94 2c 03 	call	0x658	; 0x658 <_Z16IniciarRegistrosv>
  #ifdef Legacy

  #else
    digitalWrite(SEN, HIGH);
     862:	61 e0       	ldi	r22, 0x01	; 1
     864:	8a e0       	ldi	r24, 0x0A	; 10
     866:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <digitalWrite>
    SPI.begin();
     86a:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <_ZN8SPIClass5beginEv>
  #endif
  delay(1);
     86e:	61 e0       	ldi	r22, 0x01	; 1
     870:	70 e0       	ldi	r23, 0x00	; 0
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	0c 94 56 0d 	jmp	0x1aac	; 0x1aac <delay>

0000087a <_Z9Secuenciaj>:
    
     //Serial.println(RegWrite[i],HEX);
  }
}

void Secuencia(unsigned int k){
     87a:	cf 93       	push	r28
     87c:	df 93       	push	r29
     87e:	ec 01       	movw	r28, r24
  for (int i=k; i<=19;i++){
     880:	c4 31       	cpi	r28, 0x14	; 20
     882:	d1 05       	cpc	r29, r1
     884:	9c f4       	brge	.+38     	; 0x8ac <_Z9Secuenciaj+0x32>
    if (i==5){
     886:	c5 30       	cpi	r28, 0x05	; 5
     888:	d1 05       	cpc	r29, r1
     88a:	59 f4       	brne	.+22     	; 0x8a2 <_Z9Secuenciaj+0x28>
      for(int j=22;j>19;j--){
        EscribirRegistros(j);
     88c:	86 e1       	ldi	r24, 0x16	; 22
     88e:	0e 94 a3 02 	call	0x546	; 0x546 <_Z17EscribirRegistrosh>
     892:	85 e1       	ldi	r24, 0x15	; 21
     894:	0e 94 a3 02 	call	0x546	; 0x546 <_Z17EscribirRegistrosh>
     898:	84 e1       	ldi	r24, 0x14	; 20
     89a:	0e 94 a3 02 	call	0x546	; 0x546 <_Z17EscribirRegistrosh>
       
      }
	   EscribirRegistros(5);
     89e:	85 e0       	ldi	r24, 0x05	; 5
     8a0:	01 c0       	rjmp	.+2      	; 0x8a4 <_Z9Secuenciaj+0x2a>
      
    }else if((i!=4)|(i!=3)){
      EscribirRegistros(i);
     8a2:	8c 2f       	mov	r24, r28
     8a4:	0e 94 a3 02 	call	0x546	; 0x546 <_Z17EscribirRegistrosh>
     //Serial.println(RegWrite[i],HEX);
  }
}

void Secuencia(unsigned int k){
  for (int i=k; i<=19;i++){
     8a8:	21 96       	adiw	r28, 0x01	; 1
     8aa:	ea cf       	rjmp	.-44     	; 0x880 <_Z9Secuenciaj+0x6>
      
    }else if((i!=4)|(i!=3)){
      EscribirRegistros(i);
    }
  }
  EscribirRegistros(3);
     8ac:	83 e0       	ldi	r24, 0x03	; 3
     8ae:	0e 94 a3 02 	call	0x546	; 0x546 <_Z17EscribirRegistrosh>
  EscribirRegistros(4);
     8b2:	84 e0       	ldi	r24, 0x04	; 4

}
     8b4:	df 91       	pop	r29
     8b6:	cf 91       	pop	r28
    }else if((i!=4)|(i!=3)){
      EscribirRegistros(i);
    }
  }
  EscribirRegistros(3);
  EscribirRegistros(4);
     8b8:	0c 94 a3 02 	jmp	0x546	; 0x546 <_Z17EscribirRegistrosh>

000008bc <_Z14SecuenciaCortav>:

}
void SecuenciaCorta(void){
  EscribirRegistros(8);
     8bc:	88 e0       	ldi	r24, 0x08	; 8
     8be:	0e 94 a3 02 	call	0x546	; 0x546 <_Z17EscribirRegistrosh>
   for(int j=22;j>19;j--){
        EscribirRegistros(j);
     8c2:	86 e1       	ldi	r24, 0x16	; 22
     8c4:	0e 94 a3 02 	call	0x546	; 0x546 <_Z17EscribirRegistrosh>
     8c8:	85 e1       	ldi	r24, 0x15	; 21
     8ca:	0e 94 a3 02 	call	0x546	; 0x546 <_Z17EscribirRegistrosh>
     8ce:	84 e1       	ldi	r24, 0x14	; 20
     8d0:	0e 94 a3 02 	call	0x546	; 0x546 <_Z17EscribirRegistrosh>
        
      }
	  EscribirRegistros(5);
     8d4:	85 e0       	ldi	r24, 0x05	; 5
     8d6:	0e 94 a3 02 	call	0x546	; 0x546 <_Z17EscribirRegistrosh>
	EscribirRegistros(0xc);
     8da:	8c e0       	ldi	r24, 0x0C	; 12
     8dc:	0e 94 a3 02 	call	0x546	; 0x546 <_Z17EscribirRegistrosh>
  EscribirRegistros(3);
     8e0:	83 e0       	ldi	r24, 0x03	; 3
     8e2:	0e 94 a3 02 	call	0x546	; 0x546 <_Z17EscribirRegistrosh>
  EscribirRegistros(4);
     8e6:	84 e0       	ldi	r24, 0x04	; 4
     8e8:	0c 94 a3 02 	jmp	0x546	; 0x546 <_Z17EscribirRegistrosh>

000008ec <loop>:

////////////////////////////////////////////////////////////////////////
//                      MAIN PROGRAM LOOP                        //
////////////////////////////////////////////////////////////////////////
void loop()
{
     8ec:	1f 93       	push	r17
     8ee:	cf 93       	push	r28
     8f0:	df 93       	push	r29
	
  double step=1.0/2048.0;
  double upper_limit=3601.0,lower_limit=3599.0;
  freq=3600;
     8f2:	80 e0       	ldi	r24, 0x00	; 0
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	a1 e6       	ldi	r26, 0x61	; 97
     8f8:	b5 e4       	ldi	r27, 0x45	; 69
     8fa:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <freq>
     8fe:	90 93 8f 02 	sts	0x028F, r25	; 0x80028f <freq+0x1>
     902:	a0 93 90 02 	sts	0x0290, r26	; 0x800290 <freq+0x2>
     906:	b0 93 91 02 	sts	0x0291, r27	; 0x800291 <freq+0x3>
  bool dir=true;
 // IniciarRegistros();
  Secuencia(0);
     90a:	80 e0       	ldi	r24, 0x00	; 0
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	0e 94 3d 04 	call	0x87a	; 0x87a <_Z9Secuenciaj>
  int counter=0;
     912:	c0 e0       	ldi	r28, 0x00	; 0
     914:	d0 e0       	ldi	r29, 0x00	; 0
{
	
  double step=1.0/2048.0;
  double upper_limit=3601.0,lower_limit=3599.0;
  freq=3600;
  bool dir=true;
     916:	11 e0       	ldi	r17, 0x01	; 1
  Secuencia(0);
  int counter=0;
  
 while ((lower_limit<=freq<=upper_limit)&&(counter<100)){
  
  if(LockDetect()){
     918:	0e 94 22 03 	call	0x644	; 0x644 <_Z10LockDetectv>
     91c:	88 23       	and	r24, r24
     91e:	09 f4       	brne	.+2      	; 0x922 <__stack+0x23>
     920:	3f c0       	rjmp	.+126    	; 0x9a0 <__stack+0xa1>
		  
		counter=0;
		
    	Serial.print("Locked at : ");
     922:	60 e0       	ldi	r22, 0x00	; 0
     924:	71 e0       	ldi	r23, 0x01	; 1
     926:	82 e9       	ldi	r24, 0x92	; 146
     928:	92 e0       	ldi	r25, 0x02	; 2
     92a:	0e 94 77 0b 	call	0x16ee	; 0x16ee <_ZN5Print5printEPKc>
    	Serial.print(freq);
     92e:	40 91 8e 02 	lds	r20, 0x028E	; 0x80028e <freq>
     932:	50 91 8f 02 	lds	r21, 0x028F	; 0x80028f <freq+0x1>
     936:	60 91 90 02 	lds	r22, 0x0290	; 0x800290 <freq+0x2>
     93a:	70 91 91 02 	lds	r23, 0x0291	; 0x800291 <freq+0x3>
     93e:	22 e0       	ldi	r18, 0x02	; 2
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	82 e9       	ldi	r24, 0x92	; 146
     944:	92 e0       	ldi	r25, 0x02	; 2
     946:	0e 94 cd 0c 	call	0x199a	; 0x199a <_ZN5Print5printEdi>
    	Serial.println(" MHz");
     94a:	6d e0       	ldi	r22, 0x0D	; 13
     94c:	71 e0       	ldi	r23, 0x01	; 1
     94e:	82 e9       	ldi	r24, 0x92	; 146
     950:	92 e0       	ldi	r25, 0x02	; 2
     952:	0e 94 84 0b 	call	0x1708	; 0x1708 <_ZN5Print7printlnEPKc>
		if (dir)
     956:	11 23       	and	r17, r17
     958:	91 f0       	breq	.+36     	; 0x97e <__stack+0x7f>
		{
			if (freq>(upper_limit-step)){
     95a:	2e ef       	ldi	r18, 0xFE	; 254
     95c:	3f e0       	ldi	r19, 0x0F	; 15
     95e:	41 e6       	ldi	r20, 0x61	; 97
     960:	55 e4       	ldi	r21, 0x45	; 69
     962:	60 91 8e 02 	lds	r22, 0x028E	; 0x80028e <freq>
     966:	70 91 8f 02 	lds	r23, 0x028F	; 0x80028f <freq+0x1>
     96a:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <freq+0x2>
     96e:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <freq+0x3>
     972:	0e 94 32 07 	call	0xe64	; 0xe64 <__gesf2>
     976:	18 16       	cp	r1, r24
     978:	0c f4       	brge	.+2      	; 0x97c <__stack+0x7d>
     97a:	7d c0       	rjmp	.+250    	; 0xa76 <__stack+0x177>
     97c:	5e c0       	rjmp	.+188    	; 0xa3a <__stack+0x13b>
			}
			
		}
		else
		{
			if(freq<(lower_limit+step)){
     97e:	22 e0       	ldi	r18, 0x02	; 2
     980:	30 ef       	ldi	r19, 0xF0	; 240
     982:	40 e6       	ldi	r20, 0x60	; 96
     984:	55 e4       	ldi	r21, 0x45	; 69
     986:	60 91 8e 02 	lds	r22, 0x028E	; 0x80028e <freq>
     98a:	70 91 8f 02 	lds	r23, 0x028F	; 0x80028f <freq+0x1>
     98e:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <freq+0x2>
     992:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <freq+0x3>
     996:	0e 94 b8 05 	call	0xb70	; 0xb70 <__cmpsf2>
     99a:	87 fd       	sbrc	r24, 7
     99c:	4e c0       	rjmp	.+156    	; 0xa3a <__stack+0x13b>
     99e:	6b c0       	rjmp	.+214    	; 0xa76 <__stack+0x177>
     SettingFreq(freq);
     SecuenciaCorta();
   
    
  }else{
    counter++;
     9a0:	21 96       	adiw	r28, 0x01	; 1
    Serial.println("**************************");
     9a2:	62 e1       	ldi	r22, 0x12	; 18
     9a4:	71 e0       	ldi	r23, 0x01	; 1
     9a6:	82 e9       	ldi	r24, 0x92	; 146
     9a8:	92 e0       	ldi	r25, 0x02	; 2
     9aa:	0e 94 84 0b 	call	0x1708	; 0x1708 <_ZN5Print7printlnEPKc>
    Serial.println(" ");
     9ae:	6c e3       	ldi	r22, 0x3C	; 60
     9b0:	71 e0       	ldi	r23, 0x01	; 1
     9b2:	82 e9       	ldi	r24, 0x92	; 146
     9b4:	92 e0       	ldi	r25, 0x02	; 2
     9b6:	0e 94 84 0b 	call	0x1708	; 0x1708 <_ZN5Print7printlnEPKc>
    Serial.print("Not Locked at:  ");
     9ba:	6d e2       	ldi	r22, 0x2D	; 45
     9bc:	71 e0       	ldi	r23, 0x01	; 1
     9be:	82 e9       	ldi	r24, 0x92	; 146
     9c0:	92 e0       	ldi	r25, 0x02	; 2
     9c2:	0e 94 77 0b 	call	0x16ee	; 0x16ee <_ZN5Print5printEPKc>
    Serial.println(freq);
     9c6:	40 91 8e 02 	lds	r20, 0x028E	; 0x80028e <freq>
     9ca:	50 91 8f 02 	lds	r21, 0x028F	; 0x80028f <freq+0x1>
     9ce:	60 91 90 02 	lds	r22, 0x0290	; 0x800290 <freq+0x2>
     9d2:	70 91 91 02 	lds	r23, 0x0291	; 0x800291 <freq+0x3>
     9d6:	22 e0       	ldi	r18, 0x02	; 2
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	82 e9       	ldi	r24, 0x92	; 146
     9dc:	92 e0       	ldi	r25, 0x02	; 2
     9de:	0e 94 cf 0c 	call	0x199e	; 0x199e <_ZN5Print7printlnEdi>
    Serial.println(" MHz");
     9e2:	6d e0       	ldi	r22, 0x0D	; 13
     9e4:	71 e0       	ldi	r23, 0x01	; 1
     9e6:	82 e9       	ldi	r24, 0x92	; 146
     9e8:	92 e0       	ldi	r25, 0x02	; 2
     9ea:	0e 94 84 0b 	call	0x1708	; 0x1708 <_ZN5Print7printlnEPKc>
    Serial.println(" ");
     9ee:	6c e3       	ldi	r22, 0x3C	; 60
     9f0:	71 e0       	ldi	r23, 0x01	; 1
     9f2:	82 e9       	ldi	r24, 0x92	; 146
     9f4:	92 e0       	ldi	r25, 0x02	; 2
     9f6:	0e 94 84 0b 	call	0x1708	; 0x1708 <_ZN5Print7printlnEPKc>
    Serial.println("**************************");
     9fa:	62 e1       	ldi	r22, 0x12	; 18
     9fc:	71 e0       	ldi	r23, 0x01	; 1
     9fe:	82 e9       	ldi	r24, 0x92	; 146
     a00:	92 e0       	ldi	r25, 0x02	; 2
     a02:	0e 94 84 0b 	call	0x1708	; 0x1708 <_ZN5Print7printlnEPKc>



  //Initialisation sequence

  ConvertFreq();
     a06:	0e 94 f7 00 	call	0x1ee	; 0x1ee <_Z11ConvertFreqv>
    Serial.println(freq);
    Serial.println(" MHz");
    Serial.println(" ");
    Serial.println("**************************");
    SettingFreq(freq);
    Secuencia(0);
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	0e 94 3d 04 	call	0x87a	; 0x87a <_Z9Secuenciaj>
    delay(1);
     a12:	61 e0       	ldi	r22, 0x01	; 1
     a14:	70 e0       	ldi	r23, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	0e 94 56 0d 	call	0x1aac	; 0x1aac <delay>
  }
 
 
 
  delay(100);
     a1e:	64 e6       	ldi	r22, 0x64	; 100
     a20:	70 e0       	ldi	r23, 0x00	; 0
     a22:	80 e0       	ldi	r24, 0x00	; 0
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	0e 94 56 0d 	call	0x1aac	; 0x1aac <delay>
  bool dir=true;
 // IniciarRegistros();
  Secuencia(0);
  int counter=0;
  
 while ((lower_limit<=freq<=upper_limit)&&(counter<100)){
     a2a:	c4 36       	cpi	r28, 0x64	; 100
     a2c:	d1 05       	cpc	r29, r1
     a2e:	09 f0       	breq	.+2      	; 0xa32 <__stack+0x133>
     a30:	73 cf       	rjmp	.-282    	; 0x918 <__stack+0x19>
 
 
  delay(100);
 }

}
     a32:	df 91       	pop	r29
     a34:	cf 91       	pop	r28
     a36:	1f 91       	pop	r17
     a38:	08 95       	ret
			}
		}
			
  
   
     freq=dir?freq+step:freq-step;
     a3a:	20 e0       	ldi	r18, 0x00	; 0
     a3c:	30 e0       	ldi	r19, 0x00	; 0
     a3e:	40 e0       	ldi	r20, 0x00	; 0
     a40:	5a e3       	ldi	r21, 0x3A	; 58
     a42:	60 91 8e 02 	lds	r22, 0x028E	; 0x80028e <freq>
     a46:	70 91 8f 02 	lds	r23, 0x028F	; 0x80028f <freq+0x1>
     a4a:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <freq+0x2>
     a4e:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <freq+0x3>
     a52:	0e 94 4c 05 	call	0xa98	; 0xa98 <__addsf3>
     a56:	11 e0       	ldi	r17, 0x01	; 1
     a58:	60 93 8e 02 	sts	0x028E, r22	; 0x80028e <freq>
     a5c:	70 93 8f 02 	sts	0x028F, r23	; 0x80028f <freq+0x1>
     a60:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <freq+0x2>
     a64:	90 93 91 02 	sts	0x0291, r25	; 0x800291 <freq+0x3>



  //Initialisation sequence

  ConvertFreq();
     a68:	0e 94 f7 00 	call	0x1ee	; 0x1ee <_Z11ConvertFreqv>
  
   
     freq=dir?freq+step:freq-step;
     //Serial.println(freq);
     SettingFreq(freq);
     SecuenciaCorta();
     a6c:	0e 94 5e 04 	call	0x8bc	; 0x8bc <_Z14SecuenciaCortav>
  
 while ((lower_limit<=freq<=upper_limit)&&(counter<100)){
  
  if(LockDetect()){
		  
		counter=0;
     a70:	c0 e0       	ldi	r28, 0x00	; 0
     a72:	d0 e0       	ldi	r29, 0x00	; 0
     a74:	d4 cf       	rjmp	.-88     	; 0xa1e <__stack+0x11f>
			}
		}
			
  
   
     freq=dir?freq+step:freq-step;
     a76:	20 e0       	ldi	r18, 0x00	; 0
     a78:	30 e0       	ldi	r19, 0x00	; 0
     a7a:	40 e0       	ldi	r20, 0x00	; 0
     a7c:	5a e3       	ldi	r21, 0x3A	; 58
     a7e:	60 91 8e 02 	lds	r22, 0x028E	; 0x80028e <freq>
     a82:	70 91 8f 02 	lds	r23, 0x028F	; 0x80028f <freq+0x1>
     a86:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <freq+0x2>
     a8a:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <freq+0x3>
     a8e:	0e 94 4b 05 	call	0xa96	; 0xa96 <__subsf3>
     a92:	10 e0       	ldi	r17, 0x00	; 0
     a94:	e1 cf       	rjmp	.-62     	; 0xa58 <__stack+0x159>

00000a96 <__subsf3>:
     a96:	50 58       	subi	r21, 0x80	; 128

00000a98 <__addsf3>:
     a98:	bb 27       	eor	r27, r27
     a9a:	aa 27       	eor	r26, r26
     a9c:	0e 94 63 05 	call	0xac6	; 0xac6 <__addsf3x>
     aa0:	0c 94 e0 06 	jmp	0xdc0	; 0xdc0 <__fp_round>
     aa4:	0e 94 d2 06 	call	0xda4	; 0xda4 <__fp_pscA>
     aa8:	38 f0       	brcs	.+14     	; 0xab8 <__addsf3+0x20>
     aaa:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <__fp_pscB>
     aae:	20 f0       	brcs	.+8      	; 0xab8 <__addsf3+0x20>
     ab0:	39 f4       	brne	.+14     	; 0xac0 <__addsf3+0x28>
     ab2:	9f 3f       	cpi	r25, 0xFF	; 255
     ab4:	19 f4       	brne	.+6      	; 0xabc <__addsf3+0x24>
     ab6:	26 f4       	brtc	.+8      	; 0xac0 <__addsf3+0x28>
     ab8:	0c 94 cf 06 	jmp	0xd9e	; 0xd9e <__fp_nan>
     abc:	0e f4       	brtc	.+2      	; 0xac0 <__addsf3+0x28>
     abe:	e0 95       	com	r30
     ac0:	e7 fb       	bst	r30, 7
     ac2:	0c 94 a0 06 	jmp	0xd40	; 0xd40 <__fp_inf>

00000ac6 <__addsf3x>:
     ac6:	e9 2f       	mov	r30, r25
     ac8:	0e 94 f1 06 	call	0xde2	; 0xde2 <__fp_split3>
     acc:	58 f3       	brcs	.-42     	; 0xaa4 <__addsf3+0xc>
     ace:	ba 17       	cp	r27, r26
     ad0:	62 07       	cpc	r22, r18
     ad2:	73 07       	cpc	r23, r19
     ad4:	84 07       	cpc	r24, r20
     ad6:	95 07       	cpc	r25, r21
     ad8:	20 f0       	brcs	.+8      	; 0xae2 <__addsf3x+0x1c>
     ada:	79 f4       	brne	.+30     	; 0xafa <__addsf3x+0x34>
     adc:	a6 f5       	brtc	.+104    	; 0xb46 <__addsf3x+0x80>
     ade:	0c 94 2b 07 	jmp	0xe56	; 0xe56 <__fp_zero>
     ae2:	0e f4       	brtc	.+2      	; 0xae6 <__addsf3x+0x20>
     ae4:	e0 95       	com	r30
     ae6:	0b 2e       	mov	r0, r27
     ae8:	ba 2f       	mov	r27, r26
     aea:	a0 2d       	mov	r26, r0
     aec:	0b 01       	movw	r0, r22
     aee:	b9 01       	movw	r22, r18
     af0:	90 01       	movw	r18, r0
     af2:	0c 01       	movw	r0, r24
     af4:	ca 01       	movw	r24, r20
     af6:	a0 01       	movw	r20, r0
     af8:	11 24       	eor	r1, r1
     afa:	ff 27       	eor	r31, r31
     afc:	59 1b       	sub	r21, r25
     afe:	99 f0       	breq	.+38     	; 0xb26 <__addsf3x+0x60>
     b00:	59 3f       	cpi	r21, 0xF9	; 249
     b02:	50 f4       	brcc	.+20     	; 0xb18 <__addsf3x+0x52>
     b04:	50 3e       	cpi	r21, 0xE0	; 224
     b06:	68 f1       	brcs	.+90     	; 0xb62 <__addsf3x+0x9c>
     b08:	1a 16       	cp	r1, r26
     b0a:	f0 40       	sbci	r31, 0x00	; 0
     b0c:	a2 2f       	mov	r26, r18
     b0e:	23 2f       	mov	r18, r19
     b10:	34 2f       	mov	r19, r20
     b12:	44 27       	eor	r20, r20
     b14:	58 5f       	subi	r21, 0xF8	; 248
     b16:	f3 cf       	rjmp	.-26     	; 0xafe <__addsf3x+0x38>
     b18:	46 95       	lsr	r20
     b1a:	37 95       	ror	r19
     b1c:	27 95       	ror	r18
     b1e:	a7 95       	ror	r26
     b20:	f0 40       	sbci	r31, 0x00	; 0
     b22:	53 95       	inc	r21
     b24:	c9 f7       	brne	.-14     	; 0xb18 <__addsf3x+0x52>
     b26:	7e f4       	brtc	.+30     	; 0xb46 <__addsf3x+0x80>
     b28:	1f 16       	cp	r1, r31
     b2a:	ba 0b       	sbc	r27, r26
     b2c:	62 0b       	sbc	r22, r18
     b2e:	73 0b       	sbc	r23, r19
     b30:	84 0b       	sbc	r24, r20
     b32:	ba f0       	brmi	.+46     	; 0xb62 <__addsf3x+0x9c>
     b34:	91 50       	subi	r25, 0x01	; 1
     b36:	a1 f0       	breq	.+40     	; 0xb60 <__addsf3x+0x9a>
     b38:	ff 0f       	add	r31, r31
     b3a:	bb 1f       	adc	r27, r27
     b3c:	66 1f       	adc	r22, r22
     b3e:	77 1f       	adc	r23, r23
     b40:	88 1f       	adc	r24, r24
     b42:	c2 f7       	brpl	.-16     	; 0xb34 <__addsf3x+0x6e>
     b44:	0e c0       	rjmp	.+28     	; 0xb62 <__addsf3x+0x9c>
     b46:	ba 0f       	add	r27, r26
     b48:	62 1f       	adc	r22, r18
     b4a:	73 1f       	adc	r23, r19
     b4c:	84 1f       	adc	r24, r20
     b4e:	48 f4       	brcc	.+18     	; 0xb62 <__addsf3x+0x9c>
     b50:	87 95       	ror	r24
     b52:	77 95       	ror	r23
     b54:	67 95       	ror	r22
     b56:	b7 95       	ror	r27
     b58:	f7 95       	ror	r31
     b5a:	9e 3f       	cpi	r25, 0xFE	; 254
     b5c:	08 f0       	brcs	.+2      	; 0xb60 <__addsf3x+0x9a>
     b5e:	b0 cf       	rjmp	.-160    	; 0xac0 <__addsf3+0x28>
     b60:	93 95       	inc	r25
     b62:	88 0f       	add	r24, r24
     b64:	08 f0       	brcs	.+2      	; 0xb68 <__addsf3x+0xa2>
     b66:	99 27       	eor	r25, r25
     b68:	ee 0f       	add	r30, r30
     b6a:	97 95       	ror	r25
     b6c:	87 95       	ror	r24
     b6e:	08 95       	ret

00000b70 <__cmpsf2>:
     b70:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <__fp_cmp>
     b74:	08 f4       	brcc	.+2      	; 0xb78 <__cmpsf2+0x8>
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	08 95       	ret

00000b7a <__divsf3>:
     b7a:	0e 94 d1 05 	call	0xba2	; 0xba2 <__divsf3x>
     b7e:	0c 94 e0 06 	jmp	0xdc0	; 0xdc0 <__fp_round>
     b82:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <__fp_pscB>
     b86:	58 f0       	brcs	.+22     	; 0xb9e <__divsf3+0x24>
     b88:	0e 94 d2 06 	call	0xda4	; 0xda4 <__fp_pscA>
     b8c:	40 f0       	brcs	.+16     	; 0xb9e <__divsf3+0x24>
     b8e:	29 f4       	brne	.+10     	; 0xb9a <__divsf3+0x20>
     b90:	5f 3f       	cpi	r21, 0xFF	; 255
     b92:	29 f0       	breq	.+10     	; 0xb9e <__divsf3+0x24>
     b94:	0c 94 a0 06 	jmp	0xd40	; 0xd40 <__fp_inf>
     b98:	51 11       	cpse	r21, r1
     b9a:	0c 94 2c 07 	jmp	0xe58	; 0xe58 <__fp_szero>
     b9e:	0c 94 cf 06 	jmp	0xd9e	; 0xd9e <__fp_nan>

00000ba2 <__divsf3x>:
     ba2:	0e 94 f1 06 	call	0xde2	; 0xde2 <__fp_split3>
     ba6:	68 f3       	brcs	.-38     	; 0xb82 <__divsf3+0x8>

00000ba8 <__divsf3_pse>:
     ba8:	99 23       	and	r25, r25
     baa:	b1 f3       	breq	.-20     	; 0xb98 <__divsf3+0x1e>
     bac:	55 23       	and	r21, r21
     bae:	91 f3       	breq	.-28     	; 0xb94 <__divsf3+0x1a>
     bb0:	95 1b       	sub	r25, r21
     bb2:	55 0b       	sbc	r21, r21
     bb4:	bb 27       	eor	r27, r27
     bb6:	aa 27       	eor	r26, r26
     bb8:	62 17       	cp	r22, r18
     bba:	73 07       	cpc	r23, r19
     bbc:	84 07       	cpc	r24, r20
     bbe:	38 f0       	brcs	.+14     	; 0xbce <__divsf3_pse+0x26>
     bc0:	9f 5f       	subi	r25, 0xFF	; 255
     bc2:	5f 4f       	sbci	r21, 0xFF	; 255
     bc4:	22 0f       	add	r18, r18
     bc6:	33 1f       	adc	r19, r19
     bc8:	44 1f       	adc	r20, r20
     bca:	aa 1f       	adc	r26, r26
     bcc:	a9 f3       	breq	.-22     	; 0xbb8 <__divsf3_pse+0x10>
     bce:	35 d0       	rcall	.+106    	; 0xc3a <__divsf3_pse+0x92>
     bd0:	0e 2e       	mov	r0, r30
     bd2:	3a f0       	brmi	.+14     	; 0xbe2 <__divsf3_pse+0x3a>
     bd4:	e0 e8       	ldi	r30, 0x80	; 128
     bd6:	32 d0       	rcall	.+100    	; 0xc3c <__divsf3_pse+0x94>
     bd8:	91 50       	subi	r25, 0x01	; 1
     bda:	50 40       	sbci	r21, 0x00	; 0
     bdc:	e6 95       	lsr	r30
     bde:	00 1c       	adc	r0, r0
     be0:	ca f7       	brpl	.-14     	; 0xbd4 <__divsf3_pse+0x2c>
     be2:	2b d0       	rcall	.+86     	; 0xc3a <__divsf3_pse+0x92>
     be4:	fe 2f       	mov	r31, r30
     be6:	29 d0       	rcall	.+82     	; 0xc3a <__divsf3_pse+0x92>
     be8:	66 0f       	add	r22, r22
     bea:	77 1f       	adc	r23, r23
     bec:	88 1f       	adc	r24, r24
     bee:	bb 1f       	adc	r27, r27
     bf0:	26 17       	cp	r18, r22
     bf2:	37 07       	cpc	r19, r23
     bf4:	48 07       	cpc	r20, r24
     bf6:	ab 07       	cpc	r26, r27
     bf8:	b0 e8       	ldi	r27, 0x80	; 128
     bfa:	09 f0       	breq	.+2      	; 0xbfe <__divsf3_pse+0x56>
     bfc:	bb 0b       	sbc	r27, r27
     bfe:	80 2d       	mov	r24, r0
     c00:	bf 01       	movw	r22, r30
     c02:	ff 27       	eor	r31, r31
     c04:	93 58       	subi	r25, 0x83	; 131
     c06:	5f 4f       	sbci	r21, 0xFF	; 255
     c08:	3a f0       	brmi	.+14     	; 0xc18 <__divsf3_pse+0x70>
     c0a:	9e 3f       	cpi	r25, 0xFE	; 254
     c0c:	51 05       	cpc	r21, r1
     c0e:	78 f0       	brcs	.+30     	; 0xc2e <__divsf3_pse+0x86>
     c10:	0c 94 a0 06 	jmp	0xd40	; 0xd40 <__fp_inf>
     c14:	0c 94 2c 07 	jmp	0xe58	; 0xe58 <__fp_szero>
     c18:	5f 3f       	cpi	r21, 0xFF	; 255
     c1a:	e4 f3       	brlt	.-8      	; 0xc14 <__divsf3_pse+0x6c>
     c1c:	98 3e       	cpi	r25, 0xE8	; 232
     c1e:	d4 f3       	brlt	.-12     	; 0xc14 <__divsf3_pse+0x6c>
     c20:	86 95       	lsr	r24
     c22:	77 95       	ror	r23
     c24:	67 95       	ror	r22
     c26:	b7 95       	ror	r27
     c28:	f7 95       	ror	r31
     c2a:	9f 5f       	subi	r25, 0xFF	; 255
     c2c:	c9 f7       	brne	.-14     	; 0xc20 <__divsf3_pse+0x78>
     c2e:	88 0f       	add	r24, r24
     c30:	91 1d       	adc	r25, r1
     c32:	96 95       	lsr	r25
     c34:	87 95       	ror	r24
     c36:	97 f9       	bld	r25, 7
     c38:	08 95       	ret
     c3a:	e1 e0       	ldi	r30, 0x01	; 1
     c3c:	66 0f       	add	r22, r22
     c3e:	77 1f       	adc	r23, r23
     c40:	88 1f       	adc	r24, r24
     c42:	bb 1f       	adc	r27, r27
     c44:	62 17       	cp	r22, r18
     c46:	73 07       	cpc	r23, r19
     c48:	84 07       	cpc	r24, r20
     c4a:	ba 07       	cpc	r27, r26
     c4c:	20 f0       	brcs	.+8      	; 0xc56 <__divsf3_pse+0xae>
     c4e:	62 1b       	sub	r22, r18
     c50:	73 0b       	sbc	r23, r19
     c52:	84 0b       	sbc	r24, r20
     c54:	ba 0b       	sbc	r27, r26
     c56:	ee 1f       	adc	r30, r30
     c58:	88 f7       	brcc	.-30     	; 0xc3c <__divsf3_pse+0x94>
     c5a:	e0 95       	com	r30
     c5c:	08 95       	ret

00000c5e <__fixsfsi>:
     c5e:	0e 94 36 06 	call	0xc6c	; 0xc6c <__fixunssfsi>
     c62:	68 94       	set
     c64:	b1 11       	cpse	r27, r1
     c66:	0c 94 2c 07 	jmp	0xe58	; 0xe58 <__fp_szero>
     c6a:	08 95       	ret

00000c6c <__fixunssfsi>:
     c6c:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <__fp_splitA>
     c70:	88 f0       	brcs	.+34     	; 0xc94 <__fixunssfsi+0x28>
     c72:	9f 57       	subi	r25, 0x7F	; 127
     c74:	98 f0       	brcs	.+38     	; 0xc9c <__fixunssfsi+0x30>
     c76:	b9 2f       	mov	r27, r25
     c78:	99 27       	eor	r25, r25
     c7a:	b7 51       	subi	r27, 0x17	; 23
     c7c:	b0 f0       	brcs	.+44     	; 0xcaa <__fixunssfsi+0x3e>
     c7e:	e1 f0       	breq	.+56     	; 0xcb8 <__fixunssfsi+0x4c>
     c80:	66 0f       	add	r22, r22
     c82:	77 1f       	adc	r23, r23
     c84:	88 1f       	adc	r24, r24
     c86:	99 1f       	adc	r25, r25
     c88:	1a f0       	brmi	.+6      	; 0xc90 <__fixunssfsi+0x24>
     c8a:	ba 95       	dec	r27
     c8c:	c9 f7       	brne	.-14     	; 0xc80 <__fixunssfsi+0x14>
     c8e:	14 c0       	rjmp	.+40     	; 0xcb8 <__fixunssfsi+0x4c>
     c90:	b1 30       	cpi	r27, 0x01	; 1
     c92:	91 f0       	breq	.+36     	; 0xcb8 <__fixunssfsi+0x4c>
     c94:	0e 94 2b 07 	call	0xe56	; 0xe56 <__fp_zero>
     c98:	b1 e0       	ldi	r27, 0x01	; 1
     c9a:	08 95       	ret
     c9c:	0c 94 2b 07 	jmp	0xe56	; 0xe56 <__fp_zero>
     ca0:	67 2f       	mov	r22, r23
     ca2:	78 2f       	mov	r23, r24
     ca4:	88 27       	eor	r24, r24
     ca6:	b8 5f       	subi	r27, 0xF8	; 248
     ca8:	39 f0       	breq	.+14     	; 0xcb8 <__fixunssfsi+0x4c>
     caa:	b9 3f       	cpi	r27, 0xF9	; 249
     cac:	cc f3       	brlt	.-14     	; 0xca0 <__fixunssfsi+0x34>
     cae:	86 95       	lsr	r24
     cb0:	77 95       	ror	r23
     cb2:	67 95       	ror	r22
     cb4:	b3 95       	inc	r27
     cb6:	d9 f7       	brne	.-10     	; 0xcae <__fixunssfsi+0x42>
     cb8:	3e f4       	brtc	.+14     	; 0xcc8 <__fixunssfsi+0x5c>
     cba:	90 95       	com	r25
     cbc:	80 95       	com	r24
     cbe:	70 95       	com	r23
     cc0:	61 95       	neg	r22
     cc2:	7f 4f       	sbci	r23, 0xFF	; 255
     cc4:	8f 4f       	sbci	r24, 0xFF	; 255
     cc6:	9f 4f       	sbci	r25, 0xFF	; 255
     cc8:	08 95       	ret

00000cca <floor>:
     cca:	0e 94 13 07 	call	0xe26	; 0xe26 <__fp_trunc>
     cce:	90 f0       	brcs	.+36     	; 0xcf4 <floor+0x2a>
     cd0:	9f 37       	cpi	r25, 0x7F	; 127
     cd2:	48 f4       	brcc	.+18     	; 0xce6 <floor+0x1c>
     cd4:	91 11       	cpse	r25, r1
     cd6:	16 f0       	brts	.+4      	; 0xcdc <floor+0x12>
     cd8:	0c 94 2c 07 	jmp	0xe58	; 0xe58 <__fp_szero>
     cdc:	60 e0       	ldi	r22, 0x00	; 0
     cde:	70 e0       	ldi	r23, 0x00	; 0
     ce0:	80 e8       	ldi	r24, 0x80	; 128
     ce2:	9f eb       	ldi	r25, 0xBF	; 191
     ce4:	08 95       	ret
     ce6:	26 f4       	brtc	.+8      	; 0xcf0 <floor+0x26>
     ce8:	1b 16       	cp	r1, r27
     cea:	61 1d       	adc	r22, r1
     cec:	71 1d       	adc	r23, r1
     cee:	81 1d       	adc	r24, r1
     cf0:	0c 94 a6 06 	jmp	0xd4c	; 0xd4c <__fp_mintl>
     cf4:	0c 94 c1 06 	jmp	0xd82	; 0xd82 <__fp_mpack>

00000cf8 <__fp_cmp>:
     cf8:	99 0f       	add	r25, r25
     cfa:	00 08       	sbc	r0, r0
     cfc:	55 0f       	add	r21, r21
     cfe:	aa 0b       	sbc	r26, r26
     d00:	e0 e8       	ldi	r30, 0x80	; 128
     d02:	fe ef       	ldi	r31, 0xFE	; 254
     d04:	16 16       	cp	r1, r22
     d06:	17 06       	cpc	r1, r23
     d08:	e8 07       	cpc	r30, r24
     d0a:	f9 07       	cpc	r31, r25
     d0c:	c0 f0       	brcs	.+48     	; 0xd3e <__fp_cmp+0x46>
     d0e:	12 16       	cp	r1, r18
     d10:	13 06       	cpc	r1, r19
     d12:	e4 07       	cpc	r30, r20
     d14:	f5 07       	cpc	r31, r21
     d16:	98 f0       	brcs	.+38     	; 0xd3e <__fp_cmp+0x46>
     d18:	62 1b       	sub	r22, r18
     d1a:	73 0b       	sbc	r23, r19
     d1c:	84 0b       	sbc	r24, r20
     d1e:	95 0b       	sbc	r25, r21
     d20:	39 f4       	brne	.+14     	; 0xd30 <__fp_cmp+0x38>
     d22:	0a 26       	eor	r0, r26
     d24:	61 f0       	breq	.+24     	; 0xd3e <__fp_cmp+0x46>
     d26:	23 2b       	or	r18, r19
     d28:	24 2b       	or	r18, r20
     d2a:	25 2b       	or	r18, r21
     d2c:	21 f4       	brne	.+8      	; 0xd36 <__fp_cmp+0x3e>
     d2e:	08 95       	ret
     d30:	0a 26       	eor	r0, r26
     d32:	09 f4       	brne	.+2      	; 0xd36 <__fp_cmp+0x3e>
     d34:	a1 40       	sbci	r26, 0x01	; 1
     d36:	a6 95       	lsr	r26
     d38:	8f ef       	ldi	r24, 0xFF	; 255
     d3a:	81 1d       	adc	r24, r1
     d3c:	81 1d       	adc	r24, r1
     d3e:	08 95       	ret

00000d40 <__fp_inf>:
     d40:	97 f9       	bld	r25, 7
     d42:	9f 67       	ori	r25, 0x7F	; 127
     d44:	80 e8       	ldi	r24, 0x80	; 128
     d46:	70 e0       	ldi	r23, 0x00	; 0
     d48:	60 e0       	ldi	r22, 0x00	; 0
     d4a:	08 95       	ret

00000d4c <__fp_mintl>:
     d4c:	88 23       	and	r24, r24
     d4e:	71 f4       	brne	.+28     	; 0xd6c <__fp_mintl+0x20>
     d50:	77 23       	and	r23, r23
     d52:	21 f0       	breq	.+8      	; 0xd5c <__fp_mintl+0x10>
     d54:	98 50       	subi	r25, 0x08	; 8
     d56:	87 2b       	or	r24, r23
     d58:	76 2f       	mov	r23, r22
     d5a:	07 c0       	rjmp	.+14     	; 0xd6a <__fp_mintl+0x1e>
     d5c:	66 23       	and	r22, r22
     d5e:	11 f4       	brne	.+4      	; 0xd64 <__fp_mintl+0x18>
     d60:	99 27       	eor	r25, r25
     d62:	0d c0       	rjmp	.+26     	; 0xd7e <__fp_mintl+0x32>
     d64:	90 51       	subi	r25, 0x10	; 16
     d66:	86 2b       	or	r24, r22
     d68:	70 e0       	ldi	r23, 0x00	; 0
     d6a:	60 e0       	ldi	r22, 0x00	; 0
     d6c:	2a f0       	brmi	.+10     	; 0xd78 <__fp_mintl+0x2c>
     d6e:	9a 95       	dec	r25
     d70:	66 0f       	add	r22, r22
     d72:	77 1f       	adc	r23, r23
     d74:	88 1f       	adc	r24, r24
     d76:	da f7       	brpl	.-10     	; 0xd6e <__fp_mintl+0x22>
     d78:	88 0f       	add	r24, r24
     d7a:	96 95       	lsr	r25
     d7c:	87 95       	ror	r24
     d7e:	97 f9       	bld	r25, 7
     d80:	08 95       	ret

00000d82 <__fp_mpack>:
     d82:	9f 3f       	cpi	r25, 0xFF	; 255
     d84:	31 f0       	breq	.+12     	; 0xd92 <__fp_mpack_finite+0xc>

00000d86 <__fp_mpack_finite>:
     d86:	91 50       	subi	r25, 0x01	; 1
     d88:	20 f4       	brcc	.+8      	; 0xd92 <__fp_mpack_finite+0xc>
     d8a:	87 95       	ror	r24
     d8c:	77 95       	ror	r23
     d8e:	67 95       	ror	r22
     d90:	b7 95       	ror	r27
     d92:	88 0f       	add	r24, r24
     d94:	91 1d       	adc	r25, r1
     d96:	96 95       	lsr	r25
     d98:	87 95       	ror	r24
     d9a:	97 f9       	bld	r25, 7
     d9c:	08 95       	ret

00000d9e <__fp_nan>:
     d9e:	9f ef       	ldi	r25, 0xFF	; 255
     da0:	80 ec       	ldi	r24, 0xC0	; 192
     da2:	08 95       	ret

00000da4 <__fp_pscA>:
     da4:	00 24       	eor	r0, r0
     da6:	0a 94       	dec	r0
     da8:	16 16       	cp	r1, r22
     daa:	17 06       	cpc	r1, r23
     dac:	18 06       	cpc	r1, r24
     dae:	09 06       	cpc	r0, r25
     db0:	08 95       	ret

00000db2 <__fp_pscB>:
     db2:	00 24       	eor	r0, r0
     db4:	0a 94       	dec	r0
     db6:	12 16       	cp	r1, r18
     db8:	13 06       	cpc	r1, r19
     dba:	14 06       	cpc	r1, r20
     dbc:	05 06       	cpc	r0, r21
     dbe:	08 95       	ret

00000dc0 <__fp_round>:
     dc0:	09 2e       	mov	r0, r25
     dc2:	03 94       	inc	r0
     dc4:	00 0c       	add	r0, r0
     dc6:	11 f4       	brne	.+4      	; 0xdcc <__fp_round+0xc>
     dc8:	88 23       	and	r24, r24
     dca:	52 f0       	brmi	.+20     	; 0xde0 <__fp_round+0x20>
     dcc:	bb 0f       	add	r27, r27
     dce:	40 f4       	brcc	.+16     	; 0xde0 <__fp_round+0x20>
     dd0:	bf 2b       	or	r27, r31
     dd2:	11 f4       	brne	.+4      	; 0xdd8 <__fp_round+0x18>
     dd4:	60 ff       	sbrs	r22, 0
     dd6:	04 c0       	rjmp	.+8      	; 0xde0 <__fp_round+0x20>
     dd8:	6f 5f       	subi	r22, 0xFF	; 255
     dda:	7f 4f       	sbci	r23, 0xFF	; 255
     ddc:	8f 4f       	sbci	r24, 0xFF	; 255
     dde:	9f 4f       	sbci	r25, 0xFF	; 255
     de0:	08 95       	ret

00000de2 <__fp_split3>:
     de2:	57 fd       	sbrc	r21, 7
     de4:	90 58       	subi	r25, 0x80	; 128
     de6:	44 0f       	add	r20, r20
     de8:	55 1f       	adc	r21, r21
     dea:	59 f0       	breq	.+22     	; 0xe02 <__fp_splitA+0x10>
     dec:	5f 3f       	cpi	r21, 0xFF	; 255
     dee:	71 f0       	breq	.+28     	; 0xe0c <__fp_splitA+0x1a>
     df0:	47 95       	ror	r20

00000df2 <__fp_splitA>:
     df2:	88 0f       	add	r24, r24
     df4:	97 fb       	bst	r25, 7
     df6:	99 1f       	adc	r25, r25
     df8:	61 f0       	breq	.+24     	; 0xe12 <__fp_splitA+0x20>
     dfa:	9f 3f       	cpi	r25, 0xFF	; 255
     dfc:	79 f0       	breq	.+30     	; 0xe1c <__fp_splitA+0x2a>
     dfe:	87 95       	ror	r24
     e00:	08 95       	ret
     e02:	12 16       	cp	r1, r18
     e04:	13 06       	cpc	r1, r19
     e06:	14 06       	cpc	r1, r20
     e08:	55 1f       	adc	r21, r21
     e0a:	f2 cf       	rjmp	.-28     	; 0xdf0 <__fp_split3+0xe>
     e0c:	46 95       	lsr	r20
     e0e:	f1 df       	rcall	.-30     	; 0xdf2 <__fp_splitA>
     e10:	08 c0       	rjmp	.+16     	; 0xe22 <__fp_splitA+0x30>
     e12:	16 16       	cp	r1, r22
     e14:	17 06       	cpc	r1, r23
     e16:	18 06       	cpc	r1, r24
     e18:	99 1f       	adc	r25, r25
     e1a:	f1 cf       	rjmp	.-30     	; 0xdfe <__fp_splitA+0xc>
     e1c:	86 95       	lsr	r24
     e1e:	71 05       	cpc	r23, r1
     e20:	61 05       	cpc	r22, r1
     e22:	08 94       	sec
     e24:	08 95       	ret

00000e26 <__fp_trunc>:
     e26:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <__fp_splitA>
     e2a:	a0 f0       	brcs	.+40     	; 0xe54 <__fp_trunc+0x2e>
     e2c:	be e7       	ldi	r27, 0x7E	; 126
     e2e:	b9 17       	cp	r27, r25
     e30:	88 f4       	brcc	.+34     	; 0xe54 <__fp_trunc+0x2e>
     e32:	bb 27       	eor	r27, r27
     e34:	9f 38       	cpi	r25, 0x8F	; 143
     e36:	60 f4       	brcc	.+24     	; 0xe50 <__fp_trunc+0x2a>
     e38:	16 16       	cp	r1, r22
     e3a:	b1 1d       	adc	r27, r1
     e3c:	67 2f       	mov	r22, r23
     e3e:	78 2f       	mov	r23, r24
     e40:	88 27       	eor	r24, r24
     e42:	98 5f       	subi	r25, 0xF8	; 248
     e44:	f7 cf       	rjmp	.-18     	; 0xe34 <__fp_trunc+0xe>
     e46:	86 95       	lsr	r24
     e48:	77 95       	ror	r23
     e4a:	67 95       	ror	r22
     e4c:	b1 1d       	adc	r27, r1
     e4e:	93 95       	inc	r25
     e50:	96 39       	cpi	r25, 0x96	; 150
     e52:	c8 f3       	brcs	.-14     	; 0xe46 <__fp_trunc+0x20>
     e54:	08 95       	ret

00000e56 <__fp_zero>:
     e56:	e8 94       	clt

00000e58 <__fp_szero>:
     e58:	bb 27       	eor	r27, r27
     e5a:	66 27       	eor	r22, r22
     e5c:	77 27       	eor	r23, r23
     e5e:	cb 01       	movw	r24, r22
     e60:	97 f9       	bld	r25, 7
     e62:	08 95       	ret

00000e64 <__gesf2>:
     e64:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <__fp_cmp>
     e68:	08 f4       	brcc	.+2      	; 0xe6c <__gesf2+0x8>
     e6a:	8f ef       	ldi	r24, 0xFF	; 255
     e6c:	08 95       	ret
     e6e:	16 f0       	brts	.+4      	; 0xe74 <__gesf2+0x10>
     e70:	0c 94 c1 06 	jmp	0xd82	; 0xd82 <__fp_mpack>
     e74:	0c 94 cf 06 	jmp	0xd9e	; 0xd9e <__fp_nan>
     e78:	68 94       	set
     e7a:	0c 94 a0 06 	jmp	0xd40	; 0xd40 <__fp_inf>

00000e7e <log>:
     e7e:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <__fp_splitA>
     e82:	a8 f3       	brcs	.-22     	; 0xe6e <__gesf2+0xa>
     e84:	99 23       	and	r25, r25
     e86:	c1 f3       	breq	.-16     	; 0xe78 <__gesf2+0x14>
     e88:	ae f3       	brts	.-22     	; 0xe74 <__gesf2+0x10>
     e8a:	df 93       	push	r29
     e8c:	cf 93       	push	r28
     e8e:	1f 93       	push	r17
     e90:	0f 93       	push	r16
     e92:	ff 92       	push	r15
     e94:	c9 2f       	mov	r28, r25
     e96:	dd 27       	eor	r29, r29
     e98:	88 23       	and	r24, r24
     e9a:	2a f0       	brmi	.+10     	; 0xea6 <log+0x28>
     e9c:	21 97       	sbiw	r28, 0x01	; 1
     e9e:	66 0f       	add	r22, r22
     ea0:	77 1f       	adc	r23, r23
     ea2:	88 1f       	adc	r24, r24
     ea4:	da f7       	brpl	.-10     	; 0xe9c <log+0x1e>
     ea6:	20 e0       	ldi	r18, 0x00	; 0
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	40 e8       	ldi	r20, 0x80	; 128
     eac:	5f eb       	ldi	r21, 0xBF	; 191
     eae:	9f e3       	ldi	r25, 0x3F	; 63
     eb0:	88 39       	cpi	r24, 0x98	; 152
     eb2:	20 f0       	brcs	.+8      	; 0xebc <log+0x3e>
     eb4:	80 3e       	cpi	r24, 0xE0	; 224
     eb6:	38 f0       	brcs	.+14     	; 0xec6 <log+0x48>
     eb8:	21 96       	adiw	r28, 0x01	; 1
     eba:	8f 77       	andi	r24, 0x7F	; 127
     ebc:	0e 94 4c 05 	call	0xa98	; 0xa98 <__addsf3>
     ec0:	ec eb       	ldi	r30, 0xBC	; 188
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	04 c0       	rjmp	.+8      	; 0xece <log+0x50>
     ec6:	0e 94 4c 05 	call	0xa98	; 0xa98 <__addsf3>
     eca:	e9 ee       	ldi	r30, 0xE9	; 233
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	0e 94 bb 08 	call	0x1176	; 0x1176 <__fp_powser>
     ed2:	8b 01       	movw	r16, r22
     ed4:	be 01       	movw	r22, r28
     ed6:	ec 01       	movw	r28, r24
     ed8:	fb 2e       	mov	r15, r27
     eda:	6f 57       	subi	r22, 0x7F	; 127
     edc:	71 09       	sbc	r23, r1
     ede:	75 95       	asr	r23
     ee0:	77 1f       	adc	r23, r23
     ee2:	88 0b       	sbc	r24, r24
     ee4:	99 0b       	sbc	r25, r25
     ee6:	0e 94 80 08 	call	0x1100	; 0x1100 <__floatsisf>
     eea:	28 e1       	ldi	r18, 0x18	; 24
     eec:	32 e7       	ldi	r19, 0x72	; 114
     eee:	41 e3       	ldi	r20, 0x31	; 49
     ef0:	5f e3       	ldi	r21, 0x3F	; 63
     ef2:	0e 94 9a 07 	call	0xf34	; 0xf34 <__mulsf3x>
     ef6:	af 2d       	mov	r26, r15
     ef8:	98 01       	movw	r18, r16
     efa:	ae 01       	movw	r20, r28
     efc:	ff 90       	pop	r15
     efe:	0f 91       	pop	r16
     f00:	1f 91       	pop	r17
     f02:	cf 91       	pop	r28
     f04:	df 91       	pop	r29
     f06:	0e 94 63 05 	call	0xac6	; 0xac6 <__addsf3x>
     f0a:	0c 94 e0 06 	jmp	0xdc0	; 0xdc0 <__fp_round>

00000f0e <__mulsf3>:
     f0e:	0e 94 9a 07 	call	0xf34	; 0xf34 <__mulsf3x>
     f12:	0c 94 e0 06 	jmp	0xdc0	; 0xdc0 <__fp_round>
     f16:	0e 94 d2 06 	call	0xda4	; 0xda4 <__fp_pscA>
     f1a:	38 f0       	brcs	.+14     	; 0xf2a <__mulsf3+0x1c>
     f1c:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <__fp_pscB>
     f20:	20 f0       	brcs	.+8      	; 0xf2a <__mulsf3+0x1c>
     f22:	95 23       	and	r25, r21
     f24:	11 f0       	breq	.+4      	; 0xf2a <__mulsf3+0x1c>
     f26:	0c 94 a0 06 	jmp	0xd40	; 0xd40 <__fp_inf>
     f2a:	0c 94 cf 06 	jmp	0xd9e	; 0xd9e <__fp_nan>
     f2e:	11 24       	eor	r1, r1
     f30:	0c 94 2c 07 	jmp	0xe58	; 0xe58 <__fp_szero>

00000f34 <__mulsf3x>:
     f34:	0e 94 f1 06 	call	0xde2	; 0xde2 <__fp_split3>
     f38:	70 f3       	brcs	.-36     	; 0xf16 <__mulsf3+0x8>

00000f3a <__mulsf3_pse>:
     f3a:	95 9f       	mul	r25, r21
     f3c:	c1 f3       	breq	.-16     	; 0xf2e <__mulsf3+0x20>
     f3e:	95 0f       	add	r25, r21
     f40:	50 e0       	ldi	r21, 0x00	; 0
     f42:	55 1f       	adc	r21, r21
     f44:	62 9f       	mul	r22, r18
     f46:	f0 01       	movw	r30, r0
     f48:	72 9f       	mul	r23, r18
     f4a:	bb 27       	eor	r27, r27
     f4c:	f0 0d       	add	r31, r0
     f4e:	b1 1d       	adc	r27, r1
     f50:	63 9f       	mul	r22, r19
     f52:	aa 27       	eor	r26, r26
     f54:	f0 0d       	add	r31, r0
     f56:	b1 1d       	adc	r27, r1
     f58:	aa 1f       	adc	r26, r26
     f5a:	64 9f       	mul	r22, r20
     f5c:	66 27       	eor	r22, r22
     f5e:	b0 0d       	add	r27, r0
     f60:	a1 1d       	adc	r26, r1
     f62:	66 1f       	adc	r22, r22
     f64:	82 9f       	mul	r24, r18
     f66:	22 27       	eor	r18, r18
     f68:	b0 0d       	add	r27, r0
     f6a:	a1 1d       	adc	r26, r1
     f6c:	62 1f       	adc	r22, r18
     f6e:	73 9f       	mul	r23, r19
     f70:	b0 0d       	add	r27, r0
     f72:	a1 1d       	adc	r26, r1
     f74:	62 1f       	adc	r22, r18
     f76:	83 9f       	mul	r24, r19
     f78:	a0 0d       	add	r26, r0
     f7a:	61 1d       	adc	r22, r1
     f7c:	22 1f       	adc	r18, r18
     f7e:	74 9f       	mul	r23, r20
     f80:	33 27       	eor	r19, r19
     f82:	a0 0d       	add	r26, r0
     f84:	61 1d       	adc	r22, r1
     f86:	23 1f       	adc	r18, r19
     f88:	84 9f       	mul	r24, r20
     f8a:	60 0d       	add	r22, r0
     f8c:	21 1d       	adc	r18, r1
     f8e:	82 2f       	mov	r24, r18
     f90:	76 2f       	mov	r23, r22
     f92:	6a 2f       	mov	r22, r26
     f94:	11 24       	eor	r1, r1
     f96:	9f 57       	subi	r25, 0x7F	; 127
     f98:	50 40       	sbci	r21, 0x00	; 0
     f9a:	9a f0       	brmi	.+38     	; 0xfc2 <__mulsf3_pse+0x88>
     f9c:	f1 f0       	breq	.+60     	; 0xfda <__mulsf3_pse+0xa0>
     f9e:	88 23       	and	r24, r24
     fa0:	4a f0       	brmi	.+18     	; 0xfb4 <__mulsf3_pse+0x7a>
     fa2:	ee 0f       	add	r30, r30
     fa4:	ff 1f       	adc	r31, r31
     fa6:	bb 1f       	adc	r27, r27
     fa8:	66 1f       	adc	r22, r22
     faa:	77 1f       	adc	r23, r23
     fac:	88 1f       	adc	r24, r24
     fae:	91 50       	subi	r25, 0x01	; 1
     fb0:	50 40       	sbci	r21, 0x00	; 0
     fb2:	a9 f7       	brne	.-22     	; 0xf9e <__mulsf3_pse+0x64>
     fb4:	9e 3f       	cpi	r25, 0xFE	; 254
     fb6:	51 05       	cpc	r21, r1
     fb8:	80 f0       	brcs	.+32     	; 0xfda <__mulsf3_pse+0xa0>
     fba:	0c 94 a0 06 	jmp	0xd40	; 0xd40 <__fp_inf>
     fbe:	0c 94 2c 07 	jmp	0xe58	; 0xe58 <__fp_szero>
     fc2:	5f 3f       	cpi	r21, 0xFF	; 255
     fc4:	e4 f3       	brlt	.-8      	; 0xfbe <__mulsf3_pse+0x84>
     fc6:	98 3e       	cpi	r25, 0xE8	; 232
     fc8:	d4 f3       	brlt	.-12     	; 0xfbe <__mulsf3_pse+0x84>
     fca:	86 95       	lsr	r24
     fcc:	77 95       	ror	r23
     fce:	67 95       	ror	r22
     fd0:	b7 95       	ror	r27
     fd2:	f7 95       	ror	r31
     fd4:	e7 95       	ror	r30
     fd6:	9f 5f       	subi	r25, 0xFF	; 255
     fd8:	c1 f7       	brne	.-16     	; 0xfca <__mulsf3_pse+0x90>
     fda:	fe 2b       	or	r31, r30
     fdc:	88 0f       	add	r24, r24
     fde:	91 1d       	adc	r25, r1
     fe0:	96 95       	lsr	r25
     fe2:	87 95       	ror	r24
     fe4:	97 f9       	bld	r25, 7
     fe6:	08 95       	ret

00000fe8 <pow>:
     fe8:	fa 01       	movw	r30, r20
     fea:	ee 0f       	add	r30, r30
     fec:	ff 1f       	adc	r31, r31
     fee:	30 96       	adiw	r30, 0x00	; 0
     ff0:	21 05       	cpc	r18, r1
     ff2:	31 05       	cpc	r19, r1
     ff4:	a1 f1       	breq	.+104    	; 0x105e <pow+0x76>
     ff6:	61 15       	cp	r22, r1
     ff8:	71 05       	cpc	r23, r1
     ffa:	61 f4       	brne	.+24     	; 0x1014 <pow+0x2c>
     ffc:	80 38       	cpi	r24, 0x80	; 128
     ffe:	bf e3       	ldi	r27, 0x3F	; 63
    1000:	9b 07       	cpc	r25, r27
    1002:	49 f1       	breq	.+82     	; 0x1056 <pow+0x6e>
    1004:	68 94       	set
    1006:	90 38       	cpi	r25, 0x80	; 128
    1008:	81 05       	cpc	r24, r1
    100a:	61 f0       	breq	.+24     	; 0x1024 <pow+0x3c>
    100c:	80 38       	cpi	r24, 0x80	; 128
    100e:	bf ef       	ldi	r27, 0xFF	; 255
    1010:	9b 07       	cpc	r25, r27
    1012:	41 f0       	breq	.+16     	; 0x1024 <pow+0x3c>
    1014:	99 23       	and	r25, r25
    1016:	4a f5       	brpl	.+82     	; 0x106a <pow+0x82>
    1018:	ff 3f       	cpi	r31, 0xFF	; 255
    101a:	e1 05       	cpc	r30, r1
    101c:	31 05       	cpc	r19, r1
    101e:	21 05       	cpc	r18, r1
    1020:	19 f1       	breq	.+70     	; 0x1068 <pow+0x80>
    1022:	e8 94       	clt
    1024:	08 94       	sec
    1026:	e7 95       	ror	r30
    1028:	d9 01       	movw	r26, r18
    102a:	aa 23       	and	r26, r26
    102c:	29 f4       	brne	.+10     	; 0x1038 <pow+0x50>
    102e:	ab 2f       	mov	r26, r27
    1030:	be 2f       	mov	r27, r30
    1032:	f8 5f       	subi	r31, 0xF8	; 248
    1034:	d0 f3       	brcs	.-12     	; 0x102a <pow+0x42>
    1036:	10 c0       	rjmp	.+32     	; 0x1058 <pow+0x70>
    1038:	ff 5f       	subi	r31, 0xFF	; 255
    103a:	70 f4       	brcc	.+28     	; 0x1058 <pow+0x70>
    103c:	a6 95       	lsr	r26
    103e:	e0 f7       	brcc	.-8      	; 0x1038 <pow+0x50>
    1040:	f7 39       	cpi	r31, 0x97	; 151
    1042:	50 f0       	brcs	.+20     	; 0x1058 <pow+0x70>
    1044:	19 f0       	breq	.+6      	; 0x104c <pow+0x64>
    1046:	ff 3a       	cpi	r31, 0xAF	; 175
    1048:	38 f4       	brcc	.+14     	; 0x1058 <pow+0x70>
    104a:	9f 77       	andi	r25, 0x7F	; 127
    104c:	9f 93       	push	r25
    104e:	0d d0       	rcall	.+26     	; 0x106a <pow+0x82>
    1050:	0f 90       	pop	r0
    1052:	07 fc       	sbrc	r0, 7
    1054:	90 58       	subi	r25, 0x80	; 128
    1056:	08 95       	ret
    1058:	46 f0       	brts	.+16     	; 0x106a <pow+0x82>
    105a:	0c 94 cf 06 	jmp	0xd9e	; 0xd9e <__fp_nan>
    105e:	60 e0       	ldi	r22, 0x00	; 0
    1060:	70 e0       	ldi	r23, 0x00	; 0
    1062:	80 e8       	ldi	r24, 0x80	; 128
    1064:	9f e3       	ldi	r25, 0x3F	; 63
    1066:	08 95       	ret
    1068:	4f e7       	ldi	r20, 0x7F	; 127
    106a:	9f 77       	andi	r25, 0x7F	; 127
    106c:	5f 93       	push	r21
    106e:	4f 93       	push	r20
    1070:	3f 93       	push	r19
    1072:	2f 93       	push	r18
    1074:	0e 94 3f 07 	call	0xe7e	; 0xe7e <log>
    1078:	2f 91       	pop	r18
    107a:	3f 91       	pop	r19
    107c:	4f 91       	pop	r20
    107e:	5f 91       	pop	r21
    1080:	0e 94 87 07 	call	0xf0e	; 0xf0e <__mulsf3>
    1084:	0c 94 4c 08 	jmp	0x1098	; 0x1098 <exp>
    1088:	29 f4       	brne	.+10     	; 0x1094 <pow+0xac>
    108a:	16 f0       	brts	.+4      	; 0x1090 <pow+0xa8>
    108c:	0c 94 a0 06 	jmp	0xd40	; 0xd40 <__fp_inf>
    1090:	0c 94 2b 07 	jmp	0xe56	; 0xe56 <__fp_zero>
    1094:	0c 94 cf 06 	jmp	0xd9e	; 0xd9e <__fp_nan>

00001098 <exp>:
    1098:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <__fp_splitA>
    109c:	a8 f3       	brcs	.-22     	; 0x1088 <pow+0xa0>
    109e:	96 38       	cpi	r25, 0x86	; 134
    10a0:	a0 f7       	brcc	.-24     	; 0x108a <pow+0xa2>
    10a2:	07 f8       	bld	r0, 7
    10a4:	0f 92       	push	r0
    10a6:	e8 94       	clt
    10a8:	2b e3       	ldi	r18, 0x3B	; 59
    10aa:	3a ea       	ldi	r19, 0xAA	; 170
    10ac:	48 eb       	ldi	r20, 0xB8	; 184
    10ae:	5f e7       	ldi	r21, 0x7F	; 127
    10b0:	0e 94 9d 07 	call	0xf3a	; 0xf3a <__mulsf3_pse>
    10b4:	0f 92       	push	r0
    10b6:	0f 92       	push	r0
    10b8:	0f 92       	push	r0
    10ba:	4d b7       	in	r20, 0x3d	; 61
    10bc:	5e b7       	in	r21, 0x3e	; 62
    10be:	0f 92       	push	r0
    10c0:	0e 94 24 09 	call	0x1248	; 0x1248 <modf>
    10c4:	e6 e1       	ldi	r30, 0x16	; 22
    10c6:	f1 e0       	ldi	r31, 0x01	; 1
    10c8:	0e 94 bb 08 	call	0x1176	; 0x1176 <__fp_powser>
    10cc:	4f 91       	pop	r20
    10ce:	5f 91       	pop	r21
    10d0:	ef 91       	pop	r30
    10d2:	ff 91       	pop	r31
    10d4:	e5 95       	asr	r30
    10d6:	ee 1f       	adc	r30, r30
    10d8:	ff 1f       	adc	r31, r31
    10da:	49 f0       	breq	.+18     	; 0x10ee <exp+0x56>
    10dc:	fe 57       	subi	r31, 0x7E	; 126
    10de:	e0 68       	ori	r30, 0x80	; 128
    10e0:	44 27       	eor	r20, r20
    10e2:	ee 0f       	add	r30, r30
    10e4:	44 1f       	adc	r20, r20
    10e6:	fa 95       	dec	r31
    10e8:	e1 f7       	brne	.-8      	; 0x10e2 <exp+0x4a>
    10ea:	41 95       	neg	r20
    10ec:	55 0b       	sbc	r21, r21
    10ee:	0e 94 ee 08 	call	0x11dc	; 0x11dc <ldexp>
    10f2:	0f 90       	pop	r0
    10f4:	07 fe       	sbrs	r0, 7
    10f6:	0c 94 e2 08 	jmp	0x11c4	; 0x11c4 <inverse>
    10fa:	08 95       	ret

000010fc <__floatunsisf>:
    10fc:	e8 94       	clt
    10fe:	09 c0       	rjmp	.+18     	; 0x1112 <__floatsisf+0x12>

00001100 <__floatsisf>:
    1100:	97 fb       	bst	r25, 7
    1102:	3e f4       	brtc	.+14     	; 0x1112 <__floatsisf+0x12>
    1104:	90 95       	com	r25
    1106:	80 95       	com	r24
    1108:	70 95       	com	r23
    110a:	61 95       	neg	r22
    110c:	7f 4f       	sbci	r23, 0xFF	; 255
    110e:	8f 4f       	sbci	r24, 0xFF	; 255
    1110:	9f 4f       	sbci	r25, 0xFF	; 255
    1112:	99 23       	and	r25, r25
    1114:	a9 f0       	breq	.+42     	; 0x1140 <__floatsisf+0x40>
    1116:	f9 2f       	mov	r31, r25
    1118:	96 e9       	ldi	r25, 0x96	; 150
    111a:	bb 27       	eor	r27, r27
    111c:	93 95       	inc	r25
    111e:	f6 95       	lsr	r31
    1120:	87 95       	ror	r24
    1122:	77 95       	ror	r23
    1124:	67 95       	ror	r22
    1126:	b7 95       	ror	r27
    1128:	f1 11       	cpse	r31, r1
    112a:	f8 cf       	rjmp	.-16     	; 0x111c <__floatsisf+0x1c>
    112c:	fa f4       	brpl	.+62     	; 0x116c <__floatsisf+0x6c>
    112e:	bb 0f       	add	r27, r27
    1130:	11 f4       	brne	.+4      	; 0x1136 <__floatsisf+0x36>
    1132:	60 ff       	sbrs	r22, 0
    1134:	1b c0       	rjmp	.+54     	; 0x116c <__floatsisf+0x6c>
    1136:	6f 5f       	subi	r22, 0xFF	; 255
    1138:	7f 4f       	sbci	r23, 0xFF	; 255
    113a:	8f 4f       	sbci	r24, 0xFF	; 255
    113c:	9f 4f       	sbci	r25, 0xFF	; 255
    113e:	16 c0       	rjmp	.+44     	; 0x116c <__floatsisf+0x6c>
    1140:	88 23       	and	r24, r24
    1142:	11 f0       	breq	.+4      	; 0x1148 <__floatsisf+0x48>
    1144:	96 e9       	ldi	r25, 0x96	; 150
    1146:	11 c0       	rjmp	.+34     	; 0x116a <__floatsisf+0x6a>
    1148:	77 23       	and	r23, r23
    114a:	21 f0       	breq	.+8      	; 0x1154 <__floatsisf+0x54>
    114c:	9e e8       	ldi	r25, 0x8E	; 142
    114e:	87 2f       	mov	r24, r23
    1150:	76 2f       	mov	r23, r22
    1152:	05 c0       	rjmp	.+10     	; 0x115e <__floatsisf+0x5e>
    1154:	66 23       	and	r22, r22
    1156:	71 f0       	breq	.+28     	; 0x1174 <__floatsisf+0x74>
    1158:	96 e8       	ldi	r25, 0x86	; 134
    115a:	86 2f       	mov	r24, r22
    115c:	70 e0       	ldi	r23, 0x00	; 0
    115e:	60 e0       	ldi	r22, 0x00	; 0
    1160:	2a f0       	brmi	.+10     	; 0x116c <__floatsisf+0x6c>
    1162:	9a 95       	dec	r25
    1164:	66 0f       	add	r22, r22
    1166:	77 1f       	adc	r23, r23
    1168:	88 1f       	adc	r24, r24
    116a:	da f7       	brpl	.-10     	; 0x1162 <__floatsisf+0x62>
    116c:	88 0f       	add	r24, r24
    116e:	96 95       	lsr	r25
    1170:	87 95       	ror	r24
    1172:	97 f9       	bld	r25, 7
    1174:	08 95       	ret

00001176 <__fp_powser>:
    1176:	df 93       	push	r29
    1178:	cf 93       	push	r28
    117a:	1f 93       	push	r17
    117c:	0f 93       	push	r16
    117e:	ff 92       	push	r15
    1180:	ef 92       	push	r14
    1182:	df 92       	push	r13
    1184:	7b 01       	movw	r14, r22
    1186:	8c 01       	movw	r16, r24
    1188:	68 94       	set
    118a:	06 c0       	rjmp	.+12     	; 0x1198 <__fp_powser+0x22>
    118c:	da 2e       	mov	r13, r26
    118e:	ef 01       	movw	r28, r30
    1190:	0e 94 9a 07 	call	0xf34	; 0xf34 <__mulsf3x>
    1194:	fe 01       	movw	r30, r28
    1196:	e8 94       	clt
    1198:	a5 91       	lpm	r26, Z+
    119a:	25 91       	lpm	r18, Z+
    119c:	35 91       	lpm	r19, Z+
    119e:	45 91       	lpm	r20, Z+
    11a0:	55 91       	lpm	r21, Z+
    11a2:	a6 f3       	brts	.-24     	; 0x118c <__fp_powser+0x16>
    11a4:	ef 01       	movw	r28, r30
    11a6:	0e 94 63 05 	call	0xac6	; 0xac6 <__addsf3x>
    11aa:	fe 01       	movw	r30, r28
    11ac:	97 01       	movw	r18, r14
    11ae:	a8 01       	movw	r20, r16
    11b0:	da 94       	dec	r13
    11b2:	69 f7       	brne	.-38     	; 0x118e <__fp_powser+0x18>
    11b4:	df 90       	pop	r13
    11b6:	ef 90       	pop	r14
    11b8:	ff 90       	pop	r15
    11ba:	0f 91       	pop	r16
    11bc:	1f 91       	pop	r17
    11be:	cf 91       	pop	r28
    11c0:	df 91       	pop	r29
    11c2:	08 95       	ret

000011c4 <inverse>:
    11c4:	9b 01       	movw	r18, r22
    11c6:	ac 01       	movw	r20, r24
    11c8:	60 e0       	ldi	r22, 0x00	; 0
    11ca:	70 e0       	ldi	r23, 0x00	; 0
    11cc:	80 e8       	ldi	r24, 0x80	; 128
    11ce:	9f e3       	ldi	r25, 0x3F	; 63
    11d0:	0c 94 bd 05 	jmp	0xb7a	; 0xb7a <__divsf3>
    11d4:	0c 94 a0 06 	jmp	0xd40	; 0xd40 <__fp_inf>
    11d8:	0c 94 c1 06 	jmp	0xd82	; 0xd82 <__fp_mpack>

000011dc <ldexp>:
    11dc:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <__fp_splitA>
    11e0:	d8 f3       	brcs	.-10     	; 0x11d8 <inverse+0x14>
    11e2:	99 23       	and	r25, r25
    11e4:	c9 f3       	breq	.-14     	; 0x11d8 <inverse+0x14>
    11e6:	94 0f       	add	r25, r20
    11e8:	51 1d       	adc	r21, r1
    11ea:	a3 f3       	brvs	.-24     	; 0x11d4 <inverse+0x10>
    11ec:	91 50       	subi	r25, 0x01	; 1
    11ee:	50 40       	sbci	r21, 0x00	; 0
    11f0:	94 f0       	brlt	.+36     	; 0x1216 <ldexp+0x3a>
    11f2:	59 f0       	breq	.+22     	; 0x120a <ldexp+0x2e>
    11f4:	88 23       	and	r24, r24
    11f6:	32 f0       	brmi	.+12     	; 0x1204 <ldexp+0x28>
    11f8:	66 0f       	add	r22, r22
    11fa:	77 1f       	adc	r23, r23
    11fc:	88 1f       	adc	r24, r24
    11fe:	91 50       	subi	r25, 0x01	; 1
    1200:	50 40       	sbci	r21, 0x00	; 0
    1202:	c1 f7       	brne	.-16     	; 0x11f4 <ldexp+0x18>
    1204:	9e 3f       	cpi	r25, 0xFE	; 254
    1206:	51 05       	cpc	r21, r1
    1208:	2c f7       	brge	.-54     	; 0x11d4 <inverse+0x10>
    120a:	88 0f       	add	r24, r24
    120c:	91 1d       	adc	r25, r1
    120e:	96 95       	lsr	r25
    1210:	87 95       	ror	r24
    1212:	97 f9       	bld	r25, 7
    1214:	08 95       	ret
    1216:	5f 3f       	cpi	r21, 0xFF	; 255
    1218:	ac f0       	brlt	.+42     	; 0x1244 <ldexp+0x68>
    121a:	98 3e       	cpi	r25, 0xE8	; 232
    121c:	9c f0       	brlt	.+38     	; 0x1244 <ldexp+0x68>
    121e:	bb 27       	eor	r27, r27
    1220:	86 95       	lsr	r24
    1222:	77 95       	ror	r23
    1224:	67 95       	ror	r22
    1226:	b7 95       	ror	r27
    1228:	08 f4       	brcc	.+2      	; 0x122c <ldexp+0x50>
    122a:	b1 60       	ori	r27, 0x01	; 1
    122c:	93 95       	inc	r25
    122e:	c1 f7       	brne	.-16     	; 0x1220 <ldexp+0x44>
    1230:	bb 0f       	add	r27, r27
    1232:	58 f7       	brcc	.-42     	; 0x120a <ldexp+0x2e>
    1234:	11 f4       	brne	.+4      	; 0x123a <ldexp+0x5e>
    1236:	60 ff       	sbrs	r22, 0
    1238:	e8 cf       	rjmp	.-48     	; 0x120a <ldexp+0x2e>
    123a:	6f 5f       	subi	r22, 0xFF	; 255
    123c:	7f 4f       	sbci	r23, 0xFF	; 255
    123e:	8f 4f       	sbci	r24, 0xFF	; 255
    1240:	9f 4f       	sbci	r25, 0xFF	; 255
    1242:	e3 cf       	rjmp	.-58     	; 0x120a <ldexp+0x2e>
    1244:	0c 94 2c 07 	jmp	0xe58	; 0xe58 <__fp_szero>

00001248 <modf>:
    1248:	fa 01       	movw	r30, r20
    124a:	dc 01       	movw	r26, r24
    124c:	aa 0f       	add	r26, r26
    124e:	bb 1f       	adc	r27, r27
    1250:	9b 01       	movw	r18, r22
    1252:	ac 01       	movw	r20, r24
    1254:	bf 57       	subi	r27, 0x7F	; 127
    1256:	28 f4       	brcc	.+10     	; 0x1262 <modf+0x1a>
    1258:	22 27       	eor	r18, r18
    125a:	33 27       	eor	r19, r19
    125c:	44 27       	eor	r20, r20
    125e:	50 78       	andi	r21, 0x80	; 128
    1260:	20 c0       	rjmp	.+64     	; 0x12a2 <modf+0x5a>
    1262:	b7 51       	subi	r27, 0x17	; 23
    1264:	90 f4       	brcc	.+36     	; 0x128a <modf+0x42>
    1266:	ab 2f       	mov	r26, r27
    1268:	00 24       	eor	r0, r0
    126a:	46 95       	lsr	r20
    126c:	37 95       	ror	r19
    126e:	27 95       	ror	r18
    1270:	01 1c       	adc	r0, r1
    1272:	a3 95       	inc	r26
    1274:	d2 f3       	brmi	.-12     	; 0x126a <modf+0x22>
    1276:	00 20       	and	r0, r0
    1278:	71 f0       	breq	.+28     	; 0x1296 <modf+0x4e>
    127a:	22 0f       	add	r18, r18
    127c:	33 1f       	adc	r19, r19
    127e:	44 1f       	adc	r20, r20
    1280:	b3 95       	inc	r27
    1282:	da f3       	brmi	.-10     	; 0x127a <modf+0x32>
    1284:	0e d0       	rcall	.+28     	; 0x12a2 <modf+0x5a>
    1286:	0c 94 4b 05 	jmp	0xa96	; 0xa96 <__subsf3>
    128a:	61 30       	cpi	r22, 0x01	; 1
    128c:	71 05       	cpc	r23, r1
    128e:	a0 e8       	ldi	r26, 0x80	; 128
    1290:	8a 07       	cpc	r24, r26
    1292:	b9 46       	sbci	r27, 0x69	; 105
    1294:	30 f4       	brcc	.+12     	; 0x12a2 <modf+0x5a>
    1296:	9b 01       	movw	r18, r22
    1298:	ac 01       	movw	r20, r24
    129a:	66 27       	eor	r22, r22
    129c:	77 27       	eor	r23, r23
    129e:	88 27       	eor	r24, r24
    12a0:	90 78       	andi	r25, 0x80	; 128
    12a2:	30 96       	adiw	r30, 0x00	; 0
    12a4:	21 f0       	breq	.+8      	; 0x12ae <modf+0x66>
    12a6:	20 83       	st	Z, r18
    12a8:	31 83       	std	Z+1, r19	; 0x01
    12aa:	42 83       	std	Z+2, r20	; 0x02
    12ac:	53 83       	std	Z+3, r21	; 0x03
    12ae:	08 95       	ret

000012b0 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    12b0:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    12b2:	91 8d       	ldd	r25, Z+25	; 0x19
    12b4:	22 8d       	ldd	r18, Z+26	; 0x1a
    12b6:	89 2f       	mov	r24, r25
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	80 5c       	subi	r24, 0xC0	; 192
    12bc:	9f 4f       	sbci	r25, 0xFF	; 255
    12be:	82 1b       	sub	r24, r18
    12c0:	91 09       	sbc	r25, r1
}
    12c2:	8f 73       	andi	r24, 0x3F	; 63
    12c4:	99 27       	eor	r25, r25
    12c6:	08 95       	ret

000012c8 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    12c8:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    12ca:	91 8d       	ldd	r25, Z+25	; 0x19
    12cc:	82 8d       	ldd	r24, Z+26	; 0x1a
    12ce:	98 17       	cp	r25, r24
    12d0:	31 f0       	breq	.+12     	; 0x12de <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    12d2:	82 8d       	ldd	r24, Z+26	; 0x1a
    12d4:	e8 0f       	add	r30, r24
    12d6:	f1 1d       	adc	r31, r1
    12d8:	85 8d       	ldd	r24, Z+29	; 0x1d
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    12de:	8f ef       	ldi	r24, 0xFF	; 255
    12e0:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    12e2:	08 95       	ret

000012e4 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    12e4:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    12e6:	91 8d       	ldd	r25, Z+25	; 0x19
    12e8:	82 8d       	ldd	r24, Z+26	; 0x1a
    12ea:	98 17       	cp	r25, r24
    12ec:	61 f0       	breq	.+24     	; 0x1306 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    12ee:	82 8d       	ldd	r24, Z+26	; 0x1a
    12f0:	df 01       	movw	r26, r30
    12f2:	a8 0f       	add	r26, r24
    12f4:	b1 1d       	adc	r27, r1
    12f6:	5d 96       	adiw	r26, 0x1d	; 29
    12f8:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    12fa:	92 8d       	ldd	r25, Z+26	; 0x1a
    12fc:	9f 5f       	subi	r25, 0xFF	; 255
    12fe:	9f 73       	andi	r25, 0x3F	; 63
    1300:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1306:	8f ef       	ldi	r24, 0xFF	; 255
    1308:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    130a:	08 95       	ret

0000130c <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    130c:	fc 01       	movw	r30, r24
    130e:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    1310:	44 8d       	ldd	r20, Z+28	; 0x1c
    1312:	25 2f       	mov	r18, r21
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	84 2f       	mov	r24, r20
    1318:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    131a:	82 1b       	sub	r24, r18
    131c:	93 0b       	sbc	r25, r19
    131e:	54 17       	cp	r21, r20
    1320:	10 f0       	brcs	.+4      	; 0x1326 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    1322:	cf 96       	adiw	r24, 0x3f	; 63
    1324:	08 95       	ret
  return tail - head - 1;
    1326:	01 97       	sbiw	r24, 0x01	; 1
}
    1328:	08 95       	ret

0000132a <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    132a:	81 ef       	ldi	r24, 0xF1	; 241
    132c:	9a e0       	ldi	r25, 0x0A	; 10
    132e:	89 2b       	or	r24, r25
    1330:	49 f0       	breq	.+18     	; 0x1344 <_Z14serialEventRunv+0x1a>
    1332:	80 e0       	ldi	r24, 0x00	; 0
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	89 2b       	or	r24, r25
    1338:	29 f0       	breq	.+10     	; 0x1344 <_Z14serialEventRunv+0x1a>
    133a:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <_Z17Serial0_availablev>
    133e:	81 11       	cpse	r24, r1
    1340:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    1344:	08 95       	ret

00001346 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1346:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1348:	84 8d       	ldd	r24, Z+28	; 0x1c
    134a:	df 01       	movw	r26, r30
    134c:	a8 0f       	add	r26, r24
    134e:	b1 1d       	adc	r27, r1
    1350:	a3 5a       	subi	r26, 0xA3	; 163
    1352:	bf 4f       	sbci	r27, 0xFF	; 255
    1354:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1356:	84 8d       	ldd	r24, Z+28	; 0x1c
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	01 96       	adiw	r24, 0x01	; 1
    135c:	8f 73       	andi	r24, 0x3F	; 63
    135e:	99 27       	eor	r25, r25
    1360:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    1362:	a6 89       	ldd	r26, Z+22	; 0x16
    1364:	b7 89       	ldd	r27, Z+23	; 0x17
    1366:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1368:	a0 89       	ldd	r26, Z+16	; 0x10
    136a:	b1 89       	ldd	r27, Z+17	; 0x11
    136c:	8c 91       	ld	r24, X
    136e:	83 70       	andi	r24, 0x03	; 3
    1370:	80 64       	ori	r24, 0x40	; 64
    1372:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    1374:	93 8d       	ldd	r25, Z+27	; 0x1b
    1376:	84 8d       	ldd	r24, Z+28	; 0x1c
    1378:	98 13       	cpse	r25, r24
    137a:	06 c0       	rjmp	.+12     	; 0x1388 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    137c:	02 88       	ldd	r0, Z+18	; 0x12
    137e:	f3 89       	ldd	r31, Z+19	; 0x13
    1380:	e0 2d       	mov	r30, r0
    1382:	80 81       	ld	r24, Z
    1384:	8f 7d       	andi	r24, 0xDF	; 223
    1386:	80 83       	st	Z, r24
    1388:	08 95       	ret

0000138a <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    138a:	ef 92       	push	r14
    138c:	ff 92       	push	r15
    138e:	0f 93       	push	r16
    1390:	1f 93       	push	r17
    1392:	cf 93       	push	r28
    1394:	df 93       	push	r29
    1396:	ec 01       	movw	r28, r24
  _written = true;
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    139c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    139e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    13a0:	98 13       	cpse	r25, r24
    13a2:	05 c0       	rjmp	.+10     	; 0x13ae <_ZN14HardwareSerial5writeEh+0x24>
    13a4:	e8 89       	ldd	r30, Y+16	; 0x10
    13a6:	f9 89       	ldd	r31, Y+17	; 0x11
    13a8:	80 81       	ld	r24, Z
    13aa:	85 fd       	sbrc	r24, 5
    13ac:	26 c0       	rjmp	.+76     	; 0x13fa <_ZN14HardwareSerial5writeEh+0x70>
    13ae:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    13b0:	0b 8d       	ldd	r16, Y+27	; 0x1b
    13b2:	10 e0       	ldi	r17, 0x00	; 0
    13b4:	0f 5f       	subi	r16, 0xFF	; 255
    13b6:	1f 4f       	sbci	r17, 0xFF	; 255
    13b8:	0f 73       	andi	r16, 0x3F	; 63
    13ba:	11 27       	eor	r17, r17
    13bc:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    13be:	8c 8d       	ldd	r24, Y+28	; 0x1c
    13c0:	e8 12       	cpse	r14, r24
    13c2:	0c c0       	rjmp	.+24     	; 0x13dc <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    13c4:	0f b6       	in	r0, 0x3f	; 63
    13c6:	07 fc       	sbrc	r0, 7
    13c8:	fa cf       	rjmp	.-12     	; 0x13be <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    13ca:	e8 89       	ldd	r30, Y+16	; 0x10
    13cc:	f9 89       	ldd	r31, Y+17	; 0x11
    13ce:	80 81       	ld	r24, Z
    13d0:	85 ff       	sbrs	r24, 5
    13d2:	f5 cf       	rjmp	.-22     	; 0x13be <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    13d4:	ce 01       	movw	r24, r28
    13d6:	0e 94 a3 09 	call	0x1346	; 0x1346 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    13da:	f1 cf       	rjmp	.-30     	; 0x13be <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    13dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13de:	fe 01       	movw	r30, r28
    13e0:	e8 0f       	add	r30, r24
    13e2:	f1 1d       	adc	r31, r1
    13e4:	e3 5a       	subi	r30, 0xA3	; 163
    13e6:	ff 4f       	sbci	r31, 0xFF	; 255
    13e8:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    13ea:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    13ec:	f8 94       	cli
    _tx_buffer_head = i;
    13ee:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    13f0:	ea 89       	ldd	r30, Y+18	; 0x12
    13f2:	fb 89       	ldd	r31, Y+19	; 0x13
    13f4:	80 81       	ld	r24, Z
    13f6:	80 62       	ori	r24, 0x20	; 32
    13f8:	0a c0       	rjmp	.+20     	; 0x140e <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    13fa:	9f b7       	in	r25, 0x3f	; 63
    13fc:	f8 94       	cli
      *_udr = c;
    13fe:	ee 89       	ldd	r30, Y+22	; 0x16
    1400:	ff 89       	ldd	r31, Y+23	; 0x17
    1402:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1404:	e8 89       	ldd	r30, Y+16	; 0x10
    1406:	f9 89       	ldd	r31, Y+17	; 0x11
    1408:	80 81       	ld	r24, Z
    140a:	83 70       	andi	r24, 0x03	; 3
    140c:	80 64       	ori	r24, 0x40	; 64
    140e:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1410:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	df 91       	pop	r29
    1418:	cf 91       	pop	r28
    141a:	1f 91       	pop	r17
    141c:	0f 91       	pop	r16
    141e:	ff 90       	pop	r15
    1420:	ef 90       	pop	r14
    1422:	08 95       	ret

00001424 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1424:	cf 93       	push	r28
    1426:	df 93       	push	r29
    1428:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    142a:	88 8d       	ldd	r24, Y+24	; 0x18
    142c:	88 23       	and	r24, r24
    142e:	c9 f0       	breq	.+50     	; 0x1462 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1430:	ea 89       	ldd	r30, Y+18	; 0x12
    1432:	fb 89       	ldd	r31, Y+19	; 0x13
    1434:	80 81       	ld	r24, Z
    1436:	85 fd       	sbrc	r24, 5
    1438:	05 c0       	rjmp	.+10     	; 0x1444 <_ZN14HardwareSerial5flushEv+0x20>
    143a:	a8 89       	ldd	r26, Y+16	; 0x10
    143c:	b9 89       	ldd	r27, Y+17	; 0x11
    143e:	8c 91       	ld	r24, X
    1440:	86 fd       	sbrc	r24, 6
    1442:	0f c0       	rjmp	.+30     	; 0x1462 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1444:	0f b6       	in	r0, 0x3f	; 63
    1446:	07 fc       	sbrc	r0, 7
    1448:	f5 cf       	rjmp	.-22     	; 0x1434 <_ZN14HardwareSerial5flushEv+0x10>
    144a:	80 81       	ld	r24, Z
    144c:	85 ff       	sbrs	r24, 5
    144e:	f2 cf       	rjmp	.-28     	; 0x1434 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1450:	a8 89       	ldd	r26, Y+16	; 0x10
    1452:	b9 89       	ldd	r27, Y+17	; 0x11
    1454:	8c 91       	ld	r24, X
    1456:	85 ff       	sbrs	r24, 5
    1458:	ed cf       	rjmp	.-38     	; 0x1434 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    145a:	ce 01       	movw	r24, r28
    145c:	0e 94 a3 09 	call	0x1346	; 0x1346 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1460:	e7 cf       	rjmp	.-50     	; 0x1430 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1462:	df 91       	pop	r29
    1464:	cf 91       	pop	r28
    1466:	08 95       	ret

00001468 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1468:	cf 92       	push	r12
    146a:	df 92       	push	r13
    146c:	ef 92       	push	r14
    146e:	ff 92       	push	r15
    1470:	1f 93       	push	r17
    1472:	cf 93       	push	r28
    1474:	df 93       	push	r29
    1476:	ec 01       	movw	r28, r24
    1478:	6a 01       	movw	r12, r20
    147a:	7b 01       	movw	r14, r22
    147c:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    147e:	e8 89       	ldd	r30, Y+16	; 0x10
    1480:	f9 89       	ldd	r31, Y+17	; 0x11
    1482:	82 e0       	ldi	r24, 0x02	; 2
    1484:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1486:	41 15       	cp	r20, r1
    1488:	51 4e       	sbci	r21, 0xE1	; 225
    148a:	61 05       	cpc	r22, r1
    148c:	71 05       	cpc	r23, r1
    148e:	b1 f0       	breq	.+44     	; 0x14bc <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1490:	60 e0       	ldi	r22, 0x00	; 0
    1492:	79 e0       	ldi	r23, 0x09	; 9
    1494:	8d e3       	ldi	r24, 0x3D	; 61
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	a7 01       	movw	r20, r14
    149a:	96 01       	movw	r18, r12
    149c:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <__udivmodsi4>
    14a0:	da 01       	movw	r26, r20
    14a2:	c9 01       	movw	r24, r18
    14a4:	01 97       	sbiw	r24, 0x01	; 1
    14a6:	a1 09       	sbc	r26, r1
    14a8:	b1 09       	sbc	r27, r1
    14aa:	b6 95       	lsr	r27
    14ac:	a7 95       	ror	r26
    14ae:	97 95       	ror	r25
    14b0:	87 95       	ror	r24
    14b2:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    14b4:	21 15       	cp	r18, r1
    14b6:	80 e1       	ldi	r24, 0x10	; 16
    14b8:	38 07       	cpc	r19, r24
    14ba:	a8 f0       	brcs	.+42     	; 0x14e6 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    14bc:	e8 89       	ldd	r30, Y+16	; 0x10
    14be:	f9 89       	ldd	r31, Y+17	; 0x11
    14c0:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    14c2:	60 e8       	ldi	r22, 0x80	; 128
    14c4:	74 e8       	ldi	r23, 0x84	; 132
    14c6:	8e e1       	ldi	r24, 0x1E	; 30
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	a7 01       	movw	r20, r14
    14cc:	96 01       	movw	r18, r12
    14ce:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <__udivmodsi4>
    14d2:	da 01       	movw	r26, r20
    14d4:	c9 01       	movw	r24, r18
    14d6:	01 97       	sbiw	r24, 0x01	; 1
    14d8:	a1 09       	sbc	r26, r1
    14da:	b1 09       	sbc	r27, r1
    14dc:	b6 95       	lsr	r27
    14de:	a7 95       	ror	r26
    14e0:	97 95       	ror	r25
    14e2:	87 95       	ror	r24
    14e4:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    14e6:	ec 85       	ldd	r30, Y+12	; 0x0c
    14e8:	fd 85       	ldd	r31, Y+13	; 0x0d
    14ea:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    14ec:	ee 85       	ldd	r30, Y+14	; 0x0e
    14ee:	ff 85       	ldd	r31, Y+15	; 0x0f
    14f0:	20 83       	st	Z, r18

  _written = false;
    14f2:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    14f4:	ec 89       	ldd	r30, Y+20	; 0x14
    14f6:	fd 89       	ldd	r31, Y+21	; 0x15
    14f8:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    14fa:	ea 89       	ldd	r30, Y+18	; 0x12
    14fc:	fb 89       	ldd	r31, Y+19	; 0x13
    14fe:	80 81       	ld	r24, Z
    1500:	80 61       	ori	r24, 0x10	; 16
    1502:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1504:	ea 89       	ldd	r30, Y+18	; 0x12
    1506:	fb 89       	ldd	r31, Y+19	; 0x13
    1508:	80 81       	ld	r24, Z
    150a:	88 60       	ori	r24, 0x08	; 8
    150c:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    150e:	ea 89       	ldd	r30, Y+18	; 0x12
    1510:	fb 89       	ldd	r31, Y+19	; 0x13
    1512:	80 81       	ld	r24, Z
    1514:	80 68       	ori	r24, 0x80	; 128
    1516:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1518:	ea 89       	ldd	r30, Y+18	; 0x12
    151a:	fb 89       	ldd	r31, Y+19	; 0x13
    151c:	80 81       	ld	r24, Z
    151e:	8f 7d       	andi	r24, 0xDF	; 223
    1520:	80 83       	st	Z, r24
}
    1522:	df 91       	pop	r29
    1524:	cf 91       	pop	r28
    1526:	1f 91       	pop	r17
    1528:	ff 90       	pop	r15
    152a:	ef 90       	pop	r14
    152c:	df 90       	pop	r13
    152e:	cf 90       	pop	r12
    1530:	08 95       	ret

00001532 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1532:	1f 92       	push	r1
    1534:	0f 92       	push	r0
    1536:	0f b6       	in	r0, 0x3f	; 63
    1538:	0f 92       	push	r0
    153a:	11 24       	eor	r1, r1
    153c:	2f 93       	push	r18
    153e:	8f 93       	push	r24
    1540:	9f 93       	push	r25
    1542:	ef 93       	push	r30
    1544:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1546:	e0 91 a2 02 	lds	r30, 0x02A2	; 0x8002a2 <Serial+0x10>
    154a:	f0 91 a3 02 	lds	r31, 0x02A3	; 0x8002a3 <Serial+0x11>
    154e:	80 81       	ld	r24, Z
    1550:	e0 91 a8 02 	lds	r30, 0x02A8	; 0x8002a8 <Serial+0x16>
    1554:	f0 91 a9 02 	lds	r31, 0x02A9	; 0x8002a9 <Serial+0x17>
    1558:	82 fd       	sbrc	r24, 2
    155a:	12 c0       	rjmp	.+36     	; 0x1580 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    155c:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    155e:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <Serial+0x19>
    1562:	8f 5f       	subi	r24, 0xFF	; 255
    1564:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1566:	20 91 ac 02 	lds	r18, 0x02AC	; 0x8002ac <Serial+0x1a>
    156a:	82 17       	cp	r24, r18
    156c:	51 f0       	breq	.+20     	; 0x1582 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    156e:	e0 91 ab 02 	lds	r30, 0x02AB	; 0x8002ab <Serial+0x19>
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	ee 56       	subi	r30, 0x6E	; 110
    1576:	fd 4f       	sbci	r31, 0xFD	; 253
    1578:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    157a:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <Serial+0x19>
    157e:	01 c0       	rjmp	.+2      	; 0x1582 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1580:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1582:	ff 91       	pop	r31
    1584:	ef 91       	pop	r30
    1586:	9f 91       	pop	r25
    1588:	8f 91       	pop	r24
    158a:	2f 91       	pop	r18
    158c:	0f 90       	pop	r0
    158e:	0f be       	out	0x3f, r0	; 63
    1590:	0f 90       	pop	r0
    1592:	1f 90       	pop	r1
    1594:	18 95       	reti

00001596 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1596:	1f 92       	push	r1
    1598:	0f 92       	push	r0
    159a:	0f b6       	in	r0, 0x3f	; 63
    159c:	0f 92       	push	r0
    159e:	11 24       	eor	r1, r1
    15a0:	2f 93       	push	r18
    15a2:	3f 93       	push	r19
    15a4:	4f 93       	push	r20
    15a6:	5f 93       	push	r21
    15a8:	6f 93       	push	r22
    15aa:	7f 93       	push	r23
    15ac:	8f 93       	push	r24
    15ae:	9f 93       	push	r25
    15b0:	af 93       	push	r26
    15b2:	bf 93       	push	r27
    15b4:	ef 93       	push	r30
    15b6:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    15b8:	82 e9       	ldi	r24, 0x92	; 146
    15ba:	92 e0       	ldi	r25, 0x02	; 2
    15bc:	0e 94 a3 09 	call	0x1346	; 0x1346 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    15c0:	ff 91       	pop	r31
    15c2:	ef 91       	pop	r30
    15c4:	bf 91       	pop	r27
    15c6:	af 91       	pop	r26
    15c8:	9f 91       	pop	r25
    15ca:	8f 91       	pop	r24
    15cc:	7f 91       	pop	r23
    15ce:	6f 91       	pop	r22
    15d0:	5f 91       	pop	r21
    15d2:	4f 91       	pop	r20
    15d4:	3f 91       	pop	r19
    15d6:	2f 91       	pop	r18
    15d8:	0f 90       	pop	r0
    15da:	0f be       	out	0x3f, r0	; 63
    15dc:	0f 90       	pop	r0
    15de:	1f 90       	pop	r1
    15e0:	18 95       	reti

000015e2 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    15e2:	82 e9       	ldi	r24, 0x92	; 146
    15e4:	92 e0       	ldi	r25, 0x02	; 2
    15e6:	0e 94 58 09 	call	0x12b0	; 0x12b0 <_ZN14HardwareSerial9availableEv>
    15ea:	21 e0       	ldi	r18, 0x01	; 1
    15ec:	89 2b       	or	r24, r25
    15ee:	09 f4       	brne	.+2      	; 0x15f2 <_Z17Serial0_availablev+0x10>
    15f0:	20 e0       	ldi	r18, 0x00	; 0
}
    15f2:	82 2f       	mov	r24, r18
    15f4:	08 95       	ret

000015f6 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    15f6:	e2 e9       	ldi	r30, 0x92	; 146
    15f8:	f2 e0       	ldi	r31, 0x02	; 2
    15fa:	13 82       	std	Z+3, r1	; 0x03
    15fc:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    15fe:	88 ee       	ldi	r24, 0xE8	; 232
    1600:	93 e0       	ldi	r25, 0x03	; 3
    1602:	a0 e0       	ldi	r26, 0x00	; 0
    1604:	b0 e0       	ldi	r27, 0x00	; 0
    1606:	84 83       	std	Z+4, r24	; 0x04
    1608:	95 83       	std	Z+5, r25	; 0x05
    160a:	a6 83       	std	Z+6, r26	; 0x06
    160c:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    160e:	81 e5       	ldi	r24, 0x51	; 81
    1610:	91 e0       	ldi	r25, 0x01	; 1
    1612:	91 83       	std	Z+1, r25	; 0x01
    1614:	80 83       	st	Z, r24
    1616:	85 ec       	ldi	r24, 0xC5	; 197
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	95 87       	std	Z+13, r25	; 0x0d
    161c:	84 87       	std	Z+12, r24	; 0x0c
    161e:	84 ec       	ldi	r24, 0xC4	; 196
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	97 87       	std	Z+15, r25	; 0x0f
    1624:	86 87       	std	Z+14, r24	; 0x0e
    1626:	80 ec       	ldi	r24, 0xC0	; 192
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	91 8b       	std	Z+17, r25	; 0x11
    162c:	80 8b       	std	Z+16, r24	; 0x10
    162e:	81 ec       	ldi	r24, 0xC1	; 193
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	93 8b       	std	Z+19, r25	; 0x13
    1634:	82 8b       	std	Z+18, r24	; 0x12
    1636:	82 ec       	ldi	r24, 0xC2	; 194
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	95 8b       	std	Z+21, r25	; 0x15
    163c:	84 8b       	std	Z+20, r24	; 0x14
    163e:	86 ec       	ldi	r24, 0xC6	; 198
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	97 8b       	std	Z+23, r25	; 0x17
    1644:	86 8b       	std	Z+22, r24	; 0x16
    1646:	11 8e       	std	Z+25, r1	; 0x19
    1648:	12 8e       	std	Z+26, r1	; 0x1a
    164a:	13 8e       	std	Z+27, r1	; 0x1b
    164c:	14 8e       	std	Z+28, r1	; 0x1c
    164e:	08 95       	ret

00001650 <initVariant>:
    1650:	08 95       	ret

00001652 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    1652:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <init>

	initVariant();
    1656:	0e 94 28 0b 	call	0x1650	; 0x1650 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    165a:	0e 94 16 04 	call	0x82c	; 0x82c <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    165e:	c5 e9       	ldi	r28, 0x95	; 149
    1660:	d9 e0       	ldi	r29, 0x09	; 9
#endif
	
	setup();
    
	for (;;) {
		loop();
    1662:	0e 94 76 04 	call	0x8ec	; 0x8ec <loop>
		if (serialEventRun) serialEventRun();
    1666:	20 97       	sbiw	r28, 0x00	; 0
    1668:	e1 f3       	breq	.-8      	; 0x1662 <main+0x10>
    166a:	0e 94 95 09 	call	0x132a	; 0x132a <_Z14serialEventRunv>
    166e:	f9 cf       	rjmp	.-14     	; 0x1662 <main+0x10>

00001670 <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    1670:	cf 92       	push	r12
    1672:	df 92       	push	r13
    1674:	ef 92       	push	r14
    1676:	ff 92       	push	r15
    1678:	0f 93       	push	r16
    167a:	1f 93       	push	r17
    167c:	cf 93       	push	r28
    167e:	df 93       	push	r29
    1680:	6c 01       	movw	r12, r24
    1682:	7a 01       	movw	r14, r20
    1684:	8b 01       	movw	r16, r22
    1686:	c0 e0       	ldi	r28, 0x00	; 0
    1688:	d0 e0       	ldi	r29, 0x00	; 0
    168a:	ce 15       	cp	r28, r14
    168c:	df 05       	cpc	r29, r15
    168e:	81 f0       	breq	.+32     	; 0x16b0 <_ZN5Print5writeEPKhj+0x40>
    1690:	d8 01       	movw	r26, r16
    1692:	6d 91       	ld	r22, X+
    1694:	8d 01       	movw	r16, r26
    1696:	d6 01       	movw	r26, r12
    1698:	ed 91       	ld	r30, X+
    169a:	fc 91       	ld	r31, X
    169c:	01 90       	ld	r0, Z+
    169e:	f0 81       	ld	r31, Z
    16a0:	e0 2d       	mov	r30, r0
    16a2:	c6 01       	movw	r24, r12
    16a4:	09 95       	icall
    16a6:	89 2b       	or	r24, r25
    16a8:	11 f0       	breq	.+4      	; 0x16ae <_ZN5Print5writeEPKhj+0x3e>
    16aa:	21 96       	adiw	r28, 0x01	; 1
    16ac:	ee cf       	rjmp	.-36     	; 0x168a <_ZN5Print5writeEPKhj+0x1a>
    16ae:	7e 01       	movw	r14, r28
    16b0:	c7 01       	movw	r24, r14
    16b2:	df 91       	pop	r29
    16b4:	cf 91       	pop	r28
    16b6:	1f 91       	pop	r17
    16b8:	0f 91       	pop	r16
    16ba:	ff 90       	pop	r15
    16bc:	ef 90       	pop	r14
    16be:	df 90       	pop	r13
    16c0:	cf 90       	pop	r12
    16c2:	08 95       	ret

000016c4 <_ZN5Print5writeEPKc>:
    16c4:	61 15       	cp	r22, r1
    16c6:	71 05       	cpc	r23, r1
    16c8:	79 f0       	breq	.+30     	; 0x16e8 <_ZN5Print5writeEPKc+0x24>
    16ca:	fb 01       	movw	r30, r22
    16cc:	01 90       	ld	r0, Z+
    16ce:	00 20       	and	r0, r0
    16d0:	e9 f7       	brne	.-6      	; 0x16cc <_ZN5Print5writeEPKc+0x8>
    16d2:	31 97       	sbiw	r30, 0x01	; 1
    16d4:	af 01       	movw	r20, r30
    16d6:	46 1b       	sub	r20, r22
    16d8:	57 0b       	sbc	r21, r23
    16da:	dc 01       	movw	r26, r24
    16dc:	ed 91       	ld	r30, X+
    16de:	fc 91       	ld	r31, X
    16e0:	02 80       	ldd	r0, Z+2	; 0x02
    16e2:	f3 81       	ldd	r31, Z+3	; 0x03
    16e4:	e0 2d       	mov	r30, r0
    16e6:	09 94       	ijmp
    16e8:	80 e0       	ldi	r24, 0x00	; 0
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	08 95       	ret

000016ee <_ZN5Print5printEPKc>:
    16ee:	0c 94 62 0b 	jmp	0x16c4	; 0x16c4 <_ZN5Print5writeEPKc>

000016f2 <_ZN5Print5printEc>:
    16f2:	dc 01       	movw	r26, r24
    16f4:	ed 91       	ld	r30, X+
    16f6:	fc 91       	ld	r31, X
    16f8:	01 90       	ld	r0, Z+
    16fa:	f0 81       	ld	r31, Z
    16fc:	e0 2d       	mov	r30, r0
    16fe:	09 94       	ijmp

00001700 <_ZN5Print7printlnEv>:
    1700:	6f e5       	ldi	r22, 0x5F	; 95
    1702:	71 e0       	ldi	r23, 0x01	; 1
    1704:	0c 94 62 0b 	jmp	0x16c4	; 0x16c4 <_ZN5Print5writeEPKc>

00001708 <_ZN5Print7printlnEPKc>:
    1708:	0f 93       	push	r16
    170a:	1f 93       	push	r17
    170c:	cf 93       	push	r28
    170e:	df 93       	push	r29
    1710:	ec 01       	movw	r28, r24
    1712:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <_ZN5Print5writeEPKc>
    1716:	8c 01       	movw	r16, r24
    1718:	ce 01       	movw	r24, r28
    171a:	0e 94 80 0b 	call	0x1700	; 0x1700 <_ZN5Print7printlnEv>
    171e:	80 0f       	add	r24, r16
    1720:	91 1f       	adc	r25, r17
    1722:	df 91       	pop	r29
    1724:	cf 91       	pop	r28
    1726:	1f 91       	pop	r17
    1728:	0f 91       	pop	r16
    172a:	08 95       	ret

0000172c <_ZN5Print11printNumberEmh>:
    172c:	8f 92       	push	r8
    172e:	9f 92       	push	r9
    1730:	af 92       	push	r10
    1732:	bf 92       	push	r11
    1734:	ef 92       	push	r14
    1736:	ff 92       	push	r15
    1738:	0f 93       	push	r16
    173a:	1f 93       	push	r17
    173c:	cf 93       	push	r28
    173e:	df 93       	push	r29
    1740:	cd b7       	in	r28, 0x3d	; 61
    1742:	de b7       	in	r29, 0x3e	; 62
    1744:	a1 97       	sbiw	r28, 0x21	; 33
    1746:	0f b6       	in	r0, 0x3f	; 63
    1748:	f8 94       	cli
    174a:	de bf       	out	0x3e, r29	; 62
    174c:	0f be       	out	0x3f, r0	; 63
    174e:	cd bf       	out	0x3d, r28	; 61
    1750:	7c 01       	movw	r14, r24
    1752:	fa 01       	movw	r30, r20
    1754:	cb 01       	movw	r24, r22
    1756:	19 a2       	std	Y+33, r1	; 0x21
    1758:	22 30       	cpi	r18, 0x02	; 2
    175a:	08 f4       	brcc	.+2      	; 0x175e <_ZN5Print11printNumberEmh+0x32>
    175c:	2a e0       	ldi	r18, 0x0A	; 10
    175e:	8e 01       	movw	r16, r28
    1760:	0f 5d       	subi	r16, 0xDF	; 223
    1762:	1f 4f       	sbci	r17, 0xFF	; 255
    1764:	82 2e       	mov	r8, r18
    1766:	91 2c       	mov	r9, r1
    1768:	a1 2c       	mov	r10, r1
    176a:	b1 2c       	mov	r11, r1
    176c:	bf 01       	movw	r22, r30
    176e:	a5 01       	movw	r20, r10
    1770:	94 01       	movw	r18, r8
    1772:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <__udivmodsi4>
    1776:	f9 01       	movw	r30, r18
    1778:	ca 01       	movw	r24, r20
    177a:	01 50       	subi	r16, 0x01	; 1
    177c:	11 09       	sbc	r17, r1
    177e:	6a 30       	cpi	r22, 0x0A	; 10
    1780:	10 f4       	brcc	.+4      	; 0x1786 <_ZN5Print11printNumberEmh+0x5a>
    1782:	60 5d       	subi	r22, 0xD0	; 208
    1784:	01 c0       	rjmp	.+2      	; 0x1788 <_ZN5Print11printNumberEmh+0x5c>
    1786:	69 5c       	subi	r22, 0xC9	; 201
    1788:	d8 01       	movw	r26, r16
    178a:	6c 93       	st	X, r22
    178c:	23 2b       	or	r18, r19
    178e:	24 2b       	or	r18, r20
    1790:	25 2b       	or	r18, r21
    1792:	61 f7       	brne	.-40     	; 0x176c <_ZN5Print11printNumberEmh+0x40>
    1794:	b8 01       	movw	r22, r16
    1796:	c7 01       	movw	r24, r14
    1798:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <_ZN5Print5writeEPKc>
    179c:	a1 96       	adiw	r28, 0x21	; 33
    179e:	0f b6       	in	r0, 0x3f	; 63
    17a0:	f8 94       	cli
    17a2:	de bf       	out	0x3e, r29	; 62
    17a4:	0f be       	out	0x3f, r0	; 63
    17a6:	cd bf       	out	0x3d, r28	; 61
    17a8:	df 91       	pop	r29
    17aa:	cf 91       	pop	r28
    17ac:	1f 91       	pop	r17
    17ae:	0f 91       	pop	r16
    17b0:	ff 90       	pop	r15
    17b2:	ef 90       	pop	r14
    17b4:	bf 90       	pop	r11
    17b6:	af 90       	pop	r10
    17b8:	9f 90       	pop	r9
    17ba:	8f 90       	pop	r8
    17bc:	08 95       	ret

000017be <_ZN5Print5printEmi>:
    17be:	21 15       	cp	r18, r1
    17c0:	31 05       	cpc	r19, r1
    17c2:	41 f4       	brne	.+16     	; 0x17d4 <_ZN5Print5printEmi+0x16>
    17c4:	dc 01       	movw	r26, r24
    17c6:	ed 91       	ld	r30, X+
    17c8:	fc 91       	ld	r31, X
    17ca:	01 90       	ld	r0, Z+
    17cc:	f0 81       	ld	r31, Z
    17ce:	e0 2d       	mov	r30, r0
    17d0:	64 2f       	mov	r22, r20
    17d2:	09 94       	ijmp
    17d4:	0c 94 96 0b 	jmp	0x172c	; 0x172c <_ZN5Print11printNumberEmh>

000017d8 <_ZN5Print5printEji>:
    17d8:	9a 01       	movw	r18, r20
    17da:	ab 01       	movw	r20, r22
    17dc:	60 e0       	ldi	r22, 0x00	; 0
    17de:	70 e0       	ldi	r23, 0x00	; 0
    17e0:	0c 94 df 0b 	jmp	0x17be	; 0x17be <_ZN5Print5printEmi>

000017e4 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    17e4:	7f 92       	push	r7
    17e6:	8f 92       	push	r8
    17e8:	9f 92       	push	r9
    17ea:	af 92       	push	r10
    17ec:	bf 92       	push	r11
    17ee:	cf 92       	push	r12
    17f0:	df 92       	push	r13
    17f2:	ef 92       	push	r14
    17f4:	ff 92       	push	r15
    17f6:	0f 93       	push	r16
    17f8:	1f 93       	push	r17
    17fa:	cf 93       	push	r28
    17fc:	df 93       	push	r29
    17fe:	8c 01       	movw	r16, r24
    1800:	6a 01       	movw	r12, r20
    1802:	7b 01       	movw	r14, r22
    1804:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    1806:	9a 01       	movw	r18, r20
    1808:	ab 01       	movw	r20, r22
    180a:	c7 01       	movw	r24, r14
    180c:	b6 01       	movw	r22, r12
    180e:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <__unordsf2>
    1812:	88 23       	and	r24, r24
    1814:	19 f0       	breq	.+6      	; 0x181c <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1816:	62 e6       	ldi	r22, 0x62	; 98
    1818:	71 e0       	ldi	r23, 0x01	; 1
    181a:	27 c0       	rjmp	.+78     	; 0x186a <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    181c:	46 01       	movw	r8, r12
    181e:	57 01       	movw	r10, r14
    1820:	e8 94       	clt
    1822:	b7 f8       	bld	r11, 7
    1824:	2f ef       	ldi	r18, 0xFF	; 255
    1826:	3f ef       	ldi	r19, 0xFF	; 255
    1828:	4f e7       	ldi	r20, 0x7F	; 127
    182a:	5f e7       	ldi	r21, 0x7F	; 127
    182c:	c5 01       	movw	r24, r10
    182e:	b4 01       	movw	r22, r8
    1830:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <__unordsf2>
    1834:	81 11       	cpse	r24, r1
    1836:	0d c0       	rjmp	.+26     	; 0x1852 <_ZN5Print10printFloatEdh+0x6e>
    1838:	2f ef       	ldi	r18, 0xFF	; 255
    183a:	3f ef       	ldi	r19, 0xFF	; 255
    183c:	4f e7       	ldi	r20, 0x7F	; 127
    183e:	5f e7       	ldi	r21, 0x7F	; 127
    1840:	c5 01       	movw	r24, r10
    1842:	b4 01       	movw	r22, r8
    1844:	0e 94 b8 05 	call	0xb70	; 0xb70 <__cmpsf2>
    1848:	18 16       	cp	r1, r24
    184a:	1c f4       	brge	.+6      	; 0x1852 <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    184c:	66 e6       	ldi	r22, 0x66	; 102
    184e:	71 e0       	ldi	r23, 0x01	; 1
    1850:	0c c0       	rjmp	.+24     	; 0x186a <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    1852:	2f ef       	ldi	r18, 0xFF	; 255
    1854:	3f ef       	ldi	r19, 0xFF	; 255
    1856:	4f e7       	ldi	r20, 0x7F	; 127
    1858:	5f e4       	ldi	r21, 0x4F	; 79
    185a:	c7 01       	movw	r24, r14
    185c:	b6 01       	movw	r22, r12
    185e:	0e 94 32 07 	call	0xe64	; 0xe64 <__gesf2>
    1862:	18 16       	cp	r1, r24
    1864:	94 f4       	brge	.+36     	; 0x188a <_ZN5Print10printFloatEdh+0xa6>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1866:	6a e6       	ldi	r22, 0x6A	; 106
    1868:	71 e0       	ldi	r23, 0x01	; 1
    186a:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    186c:	df 91       	pop	r29
    186e:	cf 91       	pop	r28
    1870:	1f 91       	pop	r17
    1872:	0f 91       	pop	r16
    1874:	ff 90       	pop	r15
    1876:	ef 90       	pop	r14
    1878:	df 90       	pop	r13
    187a:	cf 90       	pop	r12
    187c:	bf 90       	pop	r11
    187e:	af 90       	pop	r10
    1880:	9f 90       	pop	r9
    1882:	8f 90       	pop	r8
    1884:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1886:	0c 94 62 0b 	jmp	0x16c4	; 0x16c4 <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    188a:	2f ef       	ldi	r18, 0xFF	; 255
    188c:	3f ef       	ldi	r19, 0xFF	; 255
    188e:	4f e7       	ldi	r20, 0x7F	; 127
    1890:	5f ec       	ldi	r21, 0xCF	; 207
    1892:	c7 01       	movw	r24, r14
    1894:	b6 01       	movw	r22, r12
    1896:	0e 94 b8 05 	call	0xb70	; 0xb70 <__cmpsf2>
    189a:	87 fd       	sbrc	r24, 7
    189c:	e4 cf       	rjmp	.-56     	; 0x1866 <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
    189e:	20 e0       	ldi	r18, 0x00	; 0
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	a9 01       	movw	r20, r18
    18a4:	c7 01       	movw	r24, r14
    18a6:	b6 01       	movw	r22, r12
    18a8:	0e 94 b8 05 	call	0xb70	; 0xb70 <__cmpsf2>
    18ac:	87 ff       	sbrs	r24, 7
    18ae:	0a c0       	rjmp	.+20     	; 0x18c4 <_ZN5Print10printFloatEdh+0xe0>
  {
     n += print('-');
    18b0:	6d e2       	ldi	r22, 0x2D	; 45
    18b2:	c8 01       	movw	r24, r16
    18b4:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <_ZN5Print5printEc>
    18b8:	ec 01       	movw	r28, r24
     number = -number;
    18ba:	f7 fa       	bst	r15, 7
    18bc:	f0 94       	com	r15
    18be:	f7 f8       	bld	r15, 7
    18c0:	f0 94       	com	r15
    18c2:	02 c0       	rjmp	.+4      	; 0x18c8 <_ZN5Print10printFloatEdh+0xe4>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    18c4:	c0 e0       	ldi	r28, 0x00	; 0
    18c6:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    18c8:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    18ca:	60 e0       	ldi	r22, 0x00	; 0
    18cc:	70 e0       	ldi	r23, 0x00	; 0
    18ce:	80 e0       	ldi	r24, 0x00	; 0
    18d0:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    18d2:	7b 14       	cp	r7, r11
    18d4:	41 f0       	breq	.+16     	; 0x18e6 <_ZN5Print10printFloatEdh+0x102>
    rounding /= 10.0;
    18d6:	20 e0       	ldi	r18, 0x00	; 0
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	40 e2       	ldi	r20, 0x20	; 32
    18dc:	51 e4       	ldi	r21, 0x41	; 65
    18de:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    18e2:	b3 94       	inc	r11
    18e4:	f6 cf       	rjmp	.-20     	; 0x18d2 <_ZN5Print10printFloatEdh+0xee>
    rounding /= 10.0;
  
  number += rounding;
    18e6:	a7 01       	movw	r20, r14
    18e8:	96 01       	movw	r18, r12
    18ea:	0e 94 4c 05 	call	0xa98	; 0xa98 <__addsf3>
    18ee:	6b 01       	movw	r12, r22
    18f0:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    18f2:	0e 94 36 06 	call	0xc6c	; 0xc6c <__fixunssfsi>
    18f6:	4b 01       	movw	r8, r22
    18f8:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    18fa:	2a e0       	ldi	r18, 0x0A	; 10
    18fc:	ab 01       	movw	r20, r22
    18fe:	bc 01       	movw	r22, r24
    1900:	c8 01       	movw	r24, r16
    1902:	0e 94 96 0b 	call	0x172c	; 0x172c <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    1906:	c8 0f       	add	r28, r24
    1908:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    190a:	77 20       	and	r7, r7
    190c:	b9 f1       	breq	.+110    	; 0x197c <_ZN5Print10printFloatEdh+0x198>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    190e:	c5 01       	movw	r24, r10
    1910:	b4 01       	movw	r22, r8
    1912:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__floatunsisf>
    1916:	9b 01       	movw	r18, r22
    1918:	ac 01       	movw	r20, r24
    191a:	c7 01       	movw	r24, r14
    191c:	b6 01       	movw	r22, r12
    191e:	0e 94 4b 05 	call	0xa96	; 0xa96 <__subsf3>
    1922:	6b 01       	movw	r12, r22
    1924:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    1926:	6e e2       	ldi	r22, 0x2E	; 46
    1928:	c8 01       	movw	r24, r16
    192a:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <_ZN5Print5printEc>
    192e:	c8 0f       	add	r28, r24
    1930:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    1932:	20 e0       	ldi	r18, 0x00	; 0
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	40 e2       	ldi	r20, 0x20	; 32
    1938:	51 e4       	ldi	r21, 0x41	; 65
    193a:	c7 01       	movw	r24, r14
    193c:	b6 01       	movw	r22, r12
    193e:	0e 94 87 07 	call	0xf0e	; 0xf0e <__mulsf3>
    1942:	4b 01       	movw	r8, r22
    1944:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
    1946:	0e 94 36 06 	call	0xc6c	; 0xc6c <__fixunssfsi>
    194a:	6b 01       	movw	r12, r22
    194c:	7c 01       	movw	r14, r24
    n += print(toPrint);
    194e:	4a e0       	ldi	r20, 0x0A	; 10
    1950:	50 e0       	ldi	r21, 0x00	; 0
    1952:	c8 01       	movw	r24, r16
    1954:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <_ZN5Print5printEji>
    1958:	c8 0f       	add	r28, r24
    195a:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    195c:	b6 01       	movw	r22, r12
    195e:	80 e0       	ldi	r24, 0x00	; 0
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__floatunsisf>
    1966:	9b 01       	movw	r18, r22
    1968:	ac 01       	movw	r20, r24
    196a:	c5 01       	movw	r24, r10
    196c:	b4 01       	movw	r22, r8
    196e:	0e 94 4b 05 	call	0xa96	; 0xa96 <__subsf3>
    1972:	6b 01       	movw	r12, r22
    1974:	7c 01       	movw	r14, r24
    1976:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    1978:	71 10       	cpse	r7, r1
    197a:	db cf       	rjmp	.-74     	; 0x1932 <_ZN5Print10printFloatEdh+0x14e>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    197c:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    197e:	df 91       	pop	r29
    1980:	cf 91       	pop	r28
    1982:	1f 91       	pop	r17
    1984:	0f 91       	pop	r16
    1986:	ff 90       	pop	r15
    1988:	ef 90       	pop	r14
    198a:	df 90       	pop	r13
    198c:	cf 90       	pop	r12
    198e:	bf 90       	pop	r11
    1990:	af 90       	pop	r10
    1992:	9f 90       	pop	r9
    1994:	8f 90       	pop	r8
    1996:	7f 90       	pop	r7
    1998:	08 95       	ret

0000199a <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    199a:	0c 94 f2 0b 	jmp	0x17e4	; 0x17e4 <_ZN5Print10printFloatEdh>

0000199e <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    199e:	0f 93       	push	r16
    19a0:	1f 93       	push	r17
    19a2:	cf 93       	push	r28
    19a4:	df 93       	push	r29
    19a6:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    19a8:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <_ZN5Print10printFloatEdh>
    19ac:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    19ae:	ce 01       	movw	r24, r28
    19b0:	0e 94 80 0b 	call	0x1700	; 0x1700 <_ZN5Print7printlnEv>
  return n;
}
    19b4:	80 0f       	add	r24, r16
    19b6:	91 1f       	adc	r25, r17
    19b8:	df 91       	pop	r29
    19ba:	cf 91       	pop	r28
    19bc:	1f 91       	pop	r17
    19be:	0f 91       	pop	r16
    19c0:	08 95       	ret

000019c2 <_ZN6Stream10setTimeoutEm>:
// Public Methods
//////////////////////////////////////////////////////////////

void Stream::setTimeout(unsigned long timeout)  // sets the maximum number of milliseconds to wait
{
  _timeout = timeout;
    19c2:	fc 01       	movw	r30, r24
    19c4:	44 83       	std	Z+4, r20	; 0x04
    19c6:	55 83       	std	Z+5, r21	; 0x05
    19c8:	66 83       	std	Z+6, r22	; 0x06
    19ca:	77 83       	std	Z+7, r23	; 0x07
    19cc:	08 95       	ret

000019ce <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    19ce:	1f 92       	push	r1
    19d0:	0f 92       	push	r0
    19d2:	0f b6       	in	r0, 0x3f	; 63
    19d4:	0f 92       	push	r0
    19d6:	11 24       	eor	r1, r1
    19d8:	2f 93       	push	r18
    19da:	3f 93       	push	r19
    19dc:	8f 93       	push	r24
    19de:	9f 93       	push	r25
    19e0:	af 93       	push	r26
    19e2:	bf 93       	push	r27
    19e4:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <timer0_millis>
    19e8:	90 91 31 03 	lds	r25, 0x0331	; 0x800331 <timer0_millis+0x1>
    19ec:	a0 91 32 03 	lds	r26, 0x0332	; 0x800332 <timer0_millis+0x2>
    19f0:	b0 91 33 03 	lds	r27, 0x0333	; 0x800333 <timer0_millis+0x3>
    19f4:	30 91 2f 03 	lds	r19, 0x032F	; 0x80032f <timer0_fract>
    19f8:	23 e0       	ldi	r18, 0x03	; 3
    19fa:	23 0f       	add	r18, r19
    19fc:	2d 37       	cpi	r18, 0x7D	; 125
    19fe:	20 f4       	brcc	.+8      	; 0x1a08 <__vector_16+0x3a>
    1a00:	01 96       	adiw	r24, 0x01	; 1
    1a02:	a1 1d       	adc	r26, r1
    1a04:	b1 1d       	adc	r27, r1
    1a06:	05 c0       	rjmp	.+10     	; 0x1a12 <__vector_16+0x44>
    1a08:	26 e8       	ldi	r18, 0x86	; 134
    1a0a:	23 0f       	add	r18, r19
    1a0c:	02 96       	adiw	r24, 0x02	; 2
    1a0e:	a1 1d       	adc	r26, r1
    1a10:	b1 1d       	adc	r27, r1
    1a12:	20 93 2f 03 	sts	0x032F, r18	; 0x80032f <timer0_fract>
    1a16:	80 93 30 03 	sts	0x0330, r24	; 0x800330 <timer0_millis>
    1a1a:	90 93 31 03 	sts	0x0331, r25	; 0x800331 <timer0_millis+0x1>
    1a1e:	a0 93 32 03 	sts	0x0332, r26	; 0x800332 <timer0_millis+0x2>
    1a22:	b0 93 33 03 	sts	0x0333, r27	; 0x800333 <timer0_millis+0x3>
    1a26:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <timer0_overflow_count>
    1a2a:	90 91 35 03 	lds	r25, 0x0335	; 0x800335 <timer0_overflow_count+0x1>
    1a2e:	a0 91 36 03 	lds	r26, 0x0336	; 0x800336 <timer0_overflow_count+0x2>
    1a32:	b0 91 37 03 	lds	r27, 0x0337	; 0x800337 <timer0_overflow_count+0x3>
    1a36:	01 96       	adiw	r24, 0x01	; 1
    1a38:	a1 1d       	adc	r26, r1
    1a3a:	b1 1d       	adc	r27, r1
    1a3c:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <timer0_overflow_count>
    1a40:	90 93 35 03 	sts	0x0335, r25	; 0x800335 <timer0_overflow_count+0x1>
    1a44:	a0 93 36 03 	sts	0x0336, r26	; 0x800336 <timer0_overflow_count+0x2>
    1a48:	b0 93 37 03 	sts	0x0337, r27	; 0x800337 <timer0_overflow_count+0x3>
    1a4c:	bf 91       	pop	r27
    1a4e:	af 91       	pop	r26
    1a50:	9f 91       	pop	r25
    1a52:	8f 91       	pop	r24
    1a54:	3f 91       	pop	r19
    1a56:	2f 91       	pop	r18
    1a58:	0f 90       	pop	r0
    1a5a:	0f be       	out	0x3f, r0	; 63
    1a5c:	0f 90       	pop	r0
    1a5e:	1f 90       	pop	r1
    1a60:	18 95       	reti

00001a62 <micros>:
    1a62:	3f b7       	in	r19, 0x3f	; 63
    1a64:	f8 94       	cli
    1a66:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <timer0_overflow_count>
    1a6a:	90 91 35 03 	lds	r25, 0x0335	; 0x800335 <timer0_overflow_count+0x1>
    1a6e:	a0 91 36 03 	lds	r26, 0x0336	; 0x800336 <timer0_overflow_count+0x2>
    1a72:	b0 91 37 03 	lds	r27, 0x0337	; 0x800337 <timer0_overflow_count+0x3>
    1a76:	26 b5       	in	r18, 0x26	; 38
    1a78:	a8 9b       	sbis	0x15, 0	; 21
    1a7a:	05 c0       	rjmp	.+10     	; 0x1a86 <micros+0x24>
    1a7c:	2f 3f       	cpi	r18, 0xFF	; 255
    1a7e:	19 f0       	breq	.+6      	; 0x1a86 <micros+0x24>
    1a80:	01 96       	adiw	r24, 0x01	; 1
    1a82:	a1 1d       	adc	r26, r1
    1a84:	b1 1d       	adc	r27, r1
    1a86:	3f bf       	out	0x3f, r19	; 63
    1a88:	ba 2f       	mov	r27, r26
    1a8a:	a9 2f       	mov	r26, r25
    1a8c:	98 2f       	mov	r25, r24
    1a8e:	88 27       	eor	r24, r24
    1a90:	82 0f       	add	r24, r18
    1a92:	91 1d       	adc	r25, r1
    1a94:	a1 1d       	adc	r26, r1
    1a96:	b1 1d       	adc	r27, r1
    1a98:	bc 01       	movw	r22, r24
    1a9a:	cd 01       	movw	r24, r26
    1a9c:	42 e0       	ldi	r20, 0x02	; 2
    1a9e:	66 0f       	add	r22, r22
    1aa0:	77 1f       	adc	r23, r23
    1aa2:	88 1f       	adc	r24, r24
    1aa4:	99 1f       	adc	r25, r25
    1aa6:	4a 95       	dec	r20
    1aa8:	d1 f7       	brne	.-12     	; 0x1a9e <micros+0x3c>
    1aaa:	08 95       	ret

00001aac <delay>:
    1aac:	8f 92       	push	r8
    1aae:	9f 92       	push	r9
    1ab0:	af 92       	push	r10
    1ab2:	bf 92       	push	r11
    1ab4:	cf 92       	push	r12
    1ab6:	df 92       	push	r13
    1ab8:	ef 92       	push	r14
    1aba:	ff 92       	push	r15
    1abc:	6b 01       	movw	r12, r22
    1abe:	7c 01       	movw	r14, r24
    1ac0:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <micros>
    1ac4:	4b 01       	movw	r8, r22
    1ac6:	5c 01       	movw	r10, r24
    1ac8:	c1 14       	cp	r12, r1
    1aca:	d1 04       	cpc	r13, r1
    1acc:	e1 04       	cpc	r14, r1
    1ace:	f1 04       	cpc	r15, r1
    1ad0:	01 f1       	breq	.+64     	; 0x1b12 <delay+0x66>
    1ad2:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <yield>
    1ad6:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <micros>
    1ada:	dc 01       	movw	r26, r24
    1adc:	cb 01       	movw	r24, r22
    1ade:	88 19       	sub	r24, r8
    1ae0:	99 09       	sbc	r25, r9
    1ae2:	aa 09       	sbc	r26, r10
    1ae4:	bb 09       	sbc	r27, r11
    1ae6:	88 3e       	cpi	r24, 0xE8	; 232
    1ae8:	93 40       	sbci	r25, 0x03	; 3
    1aea:	a1 05       	cpc	r26, r1
    1aec:	b1 05       	cpc	r27, r1
    1aee:	60 f3       	brcs	.-40     	; 0x1ac8 <delay+0x1c>
    1af0:	21 e0       	ldi	r18, 0x01	; 1
    1af2:	c2 1a       	sub	r12, r18
    1af4:	d1 08       	sbc	r13, r1
    1af6:	e1 08       	sbc	r14, r1
    1af8:	f1 08       	sbc	r15, r1
    1afa:	88 ee       	ldi	r24, 0xE8	; 232
    1afc:	88 0e       	add	r8, r24
    1afe:	83 e0       	ldi	r24, 0x03	; 3
    1b00:	98 1e       	adc	r9, r24
    1b02:	a1 1c       	adc	r10, r1
    1b04:	b1 1c       	adc	r11, r1
    1b06:	c1 14       	cp	r12, r1
    1b08:	d1 04       	cpc	r13, r1
    1b0a:	e1 04       	cpc	r14, r1
    1b0c:	f1 04       	cpc	r15, r1
    1b0e:	19 f7       	brne	.-58     	; 0x1ad6 <delay+0x2a>
    1b10:	db cf       	rjmp	.-74     	; 0x1ac8 <delay+0x1c>
    1b12:	ff 90       	pop	r15
    1b14:	ef 90       	pop	r14
    1b16:	df 90       	pop	r13
    1b18:	cf 90       	pop	r12
    1b1a:	bf 90       	pop	r11
    1b1c:	af 90       	pop	r10
    1b1e:	9f 90       	pop	r9
    1b20:	8f 90       	pop	r8
    1b22:	08 95       	ret

00001b24 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1b24:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1b26:	84 b5       	in	r24, 0x24	; 36
    1b28:	82 60       	ori	r24, 0x02	; 2
    1b2a:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1b2c:	84 b5       	in	r24, 0x24	; 36
    1b2e:	81 60       	ori	r24, 0x01	; 1
    1b30:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1b32:	85 b5       	in	r24, 0x25	; 37
    1b34:	82 60       	ori	r24, 0x02	; 2
    1b36:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1b38:	85 b5       	in	r24, 0x25	; 37
    1b3a:	81 60       	ori	r24, 0x01	; 1
    1b3c:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1b3e:	ee e6       	ldi	r30, 0x6E	; 110
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	80 81       	ld	r24, Z
    1b44:	81 60       	ori	r24, 0x01	; 1
    1b46:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1b48:	e1 e8       	ldi	r30, 0x81	; 129
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1b4e:	80 81       	ld	r24, Z
    1b50:	82 60       	ori	r24, 0x02	; 2
    1b52:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1b54:	80 81       	ld	r24, Z
    1b56:	81 60       	ori	r24, 0x01	; 1
    1b58:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1b5a:	e0 e8       	ldi	r30, 0x80	; 128
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	80 81       	ld	r24, Z
    1b60:	81 60       	ori	r24, 0x01	; 1
    1b62:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1b64:	e1 eb       	ldi	r30, 0xB1	; 177
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	80 81       	ld	r24, Z
    1b6a:	84 60       	ori	r24, 0x04	; 4
    1b6c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1b6e:	e0 eb       	ldi	r30, 0xB0	; 176
    1b70:	f0 e0       	ldi	r31, 0x00	; 0
    1b72:	80 81       	ld	r24, Z
    1b74:	81 60       	ori	r24, 0x01	; 1
    1b76:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1b78:	ea e7       	ldi	r30, 0x7A	; 122
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	80 81       	ld	r24, Z
    1b7e:	84 60       	ori	r24, 0x04	; 4
    1b80:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1b82:	80 81       	ld	r24, Z
    1b84:	82 60       	ori	r24, 0x02	; 2
    1b86:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    1b88:	80 81       	ld	r24, Z
    1b8a:	81 60       	ori	r24, 0x01	; 1
    1b8c:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1b8e:	80 81       	ld	r24, Z
    1b90:	80 68       	ori	r24, 0x80	; 128
    1b92:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1b94:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    1b98:	08 95       	ret

00001b9a <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1b9a:	83 30       	cpi	r24, 0x03	; 3
    1b9c:	81 f0       	breq	.+32     	; 0x1bbe <turnOffPWM+0x24>
    1b9e:	28 f4       	brcc	.+10     	; 0x1baa <turnOffPWM+0x10>
    1ba0:	81 30       	cpi	r24, 0x01	; 1
    1ba2:	99 f0       	breq	.+38     	; 0x1bca <turnOffPWM+0x30>
    1ba4:	82 30       	cpi	r24, 0x02	; 2
    1ba6:	a1 f0       	breq	.+40     	; 0x1bd0 <turnOffPWM+0x36>
    1ba8:	08 95       	ret
    1baa:	87 30       	cpi	r24, 0x07	; 7
    1bac:	a9 f0       	breq	.+42     	; 0x1bd8 <turnOffPWM+0x3e>
    1bae:	88 30       	cpi	r24, 0x08	; 8
    1bb0:	b9 f0       	breq	.+46     	; 0x1be0 <turnOffPWM+0x46>
    1bb2:	84 30       	cpi	r24, 0x04	; 4
    1bb4:	d1 f4       	brne	.+52     	; 0x1bea <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1bb6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    1bba:	8f 7d       	andi	r24, 0xDF	; 223
    1bbc:	03 c0       	rjmp	.+6      	; 0x1bc4 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1bbe:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    1bc2:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1bc4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    1bc8:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1bca:	84 b5       	in	r24, 0x24	; 36
    1bcc:	8f 77       	andi	r24, 0x7F	; 127
    1bce:	02 c0       	rjmp	.+4      	; 0x1bd4 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1bd0:	84 b5       	in	r24, 0x24	; 36
    1bd2:	8f 7d       	andi	r24, 0xDF	; 223
    1bd4:	84 bd       	out	0x24, r24	; 36
    1bd6:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1bd8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    1bdc:	8f 77       	andi	r24, 0x7F	; 127
    1bde:	03 c0       	rjmp	.+6      	; 0x1be6 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1be0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    1be4:	8f 7d       	andi	r24, 0xDF	; 223
    1be6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    1bea:	08 95       	ret

00001bec <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1bec:	cf 93       	push	r28
    1bee:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	fc 01       	movw	r30, r24
    1bf4:	ee 5a       	subi	r30, 0xAE	; 174
    1bf6:	fe 4f       	sbci	r31, 0xFE	; 254
    1bf8:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1bfa:	fc 01       	movw	r30, r24
    1bfc:	ea 59       	subi	r30, 0x9A	; 154
    1bfe:	fe 4f       	sbci	r31, 0xFE	; 254
    1c00:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1c02:	88 23       	and	r24, r24
    1c04:	61 f1       	breq	.+88     	; 0x1c5e <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	88 0f       	add	r24, r24
    1c0a:	99 1f       	adc	r25, r25
    1c0c:	fc 01       	movw	r30, r24
    1c0e:	e2 57       	subi	r30, 0x72	; 114
    1c10:	fe 4f       	sbci	r31, 0xFE	; 254
    1c12:	c5 91       	lpm	r28, Z+
    1c14:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1c16:	fc 01       	movw	r30, r24
    1c18:	ec 57       	subi	r30, 0x7C	; 124
    1c1a:	fe 4f       	sbci	r31, 0xFE	; 254
    1c1c:	a5 91       	lpm	r26, Z+
    1c1e:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1c20:	61 11       	cpse	r22, r1
    1c22:	09 c0       	rjmp	.+18     	; 0x1c36 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1c24:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1c26:	f8 94       	cli
		*reg &= ~bit;
    1c28:	88 81       	ld	r24, Y
    1c2a:	20 95       	com	r18
    1c2c:	82 23       	and	r24, r18
    1c2e:	88 83       	st	Y, r24
		*out &= ~bit;
    1c30:	ec 91       	ld	r30, X
    1c32:	2e 23       	and	r18, r30
    1c34:	0b c0       	rjmp	.+22     	; 0x1c4c <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1c36:	62 30       	cpi	r22, 0x02	; 2
    1c38:	61 f4       	brne	.+24     	; 0x1c52 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1c3a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1c3c:	f8 94       	cli
		*reg &= ~bit;
    1c3e:	88 81       	ld	r24, Y
    1c40:	32 2f       	mov	r19, r18
    1c42:	30 95       	com	r19
    1c44:	83 23       	and	r24, r19
    1c46:	88 83       	st	Y, r24
		*out |= bit;
    1c48:	ec 91       	ld	r30, X
    1c4a:	2e 2b       	or	r18, r30
    1c4c:	2c 93       	st	X, r18
		SREG = oldSREG;
    1c4e:	9f bf       	out	0x3f, r25	; 63
    1c50:	06 c0       	rjmp	.+12     	; 0x1c5e <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1c52:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1c54:	f8 94       	cli
		*reg |= bit;
    1c56:	e8 81       	ld	r30, Y
    1c58:	2e 2b       	or	r18, r30
    1c5a:	28 83       	st	Y, r18
		SREG = oldSREG;
    1c5c:	8f bf       	out	0x3f, r24	; 63
	}
}
    1c5e:	df 91       	pop	r29
    1c60:	cf 91       	pop	r28
    1c62:	08 95       	ret

00001c64 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1c64:	1f 93       	push	r17
    1c66:	cf 93       	push	r28
    1c68:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1c6a:	28 2f       	mov	r18, r24
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	f9 01       	movw	r30, r18
    1c70:	e2 5c       	subi	r30, 0xC2	; 194
    1c72:	fe 4f       	sbci	r31, 0xFE	; 254
    1c74:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1c76:	f9 01       	movw	r30, r18
    1c78:	ee 5a       	subi	r30, 0xAE	; 174
    1c7a:	fe 4f       	sbci	r31, 0xFE	; 254
    1c7c:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1c7e:	f9 01       	movw	r30, r18
    1c80:	ea 59       	subi	r30, 0x9A	; 154
    1c82:	fe 4f       	sbci	r31, 0xFE	; 254
    1c84:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1c86:	cc 23       	and	r28, r28
    1c88:	c1 f0       	breq	.+48     	; 0x1cba <digitalWrite+0x56>
    1c8a:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1c8c:	81 11       	cpse	r24, r1
    1c8e:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <turnOffPWM>

	out = portOutputRegister(port);
    1c92:	ec 2f       	mov	r30, r28
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	ee 0f       	add	r30, r30
    1c98:	ff 1f       	adc	r31, r31
    1c9a:	ec 57       	subi	r30, 0x7C	; 124
    1c9c:	fe 4f       	sbci	r31, 0xFE	; 254
    1c9e:	a5 91       	lpm	r26, Z+
    1ca0:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1ca2:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1ca4:	f8 94       	cli

	if (val == LOW) {
    1ca6:	11 11       	cpse	r17, r1
    1ca8:	04 c0       	rjmp	.+8      	; 0x1cb2 <digitalWrite+0x4e>
		*out &= ~bit;
    1caa:	8c 91       	ld	r24, X
    1cac:	d0 95       	com	r29
    1cae:	d8 23       	and	r29, r24
    1cb0:	02 c0       	rjmp	.+4      	; 0x1cb6 <digitalWrite+0x52>
	} else {
		*out |= bit;
    1cb2:	ec 91       	ld	r30, X
    1cb4:	de 2b       	or	r29, r30
    1cb6:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1cb8:	9f bf       	out	0x3f, r25	; 63
}
    1cba:	df 91       	pop	r29
    1cbc:	cf 91       	pop	r28
    1cbe:	1f 91       	pop	r17
    1cc0:	08 95       	ret

00001cc2 <digitalRead>:

int digitalRead(uint8_t pin)
{
    1cc2:	cf 93       	push	r28
    1cc4:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1cc6:	28 2f       	mov	r18, r24
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	f9 01       	movw	r30, r18
    1ccc:	e2 5c       	subi	r30, 0xC2	; 194
    1cce:	fe 4f       	sbci	r31, 0xFE	; 254
    1cd0:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1cd2:	f9 01       	movw	r30, r18
    1cd4:	ee 5a       	subi	r30, 0xAE	; 174
    1cd6:	fe 4f       	sbci	r31, 0xFE	; 254
    1cd8:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1cda:	f9 01       	movw	r30, r18
    1cdc:	ea 59       	subi	r30, 0x9A	; 154
    1cde:	fe 4f       	sbci	r31, 0xFE	; 254
    1ce0:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    1ce2:	cc 23       	and	r28, r28
    1ce4:	91 f0       	breq	.+36     	; 0x1d0a <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1ce6:	81 11       	cpse	r24, r1
    1ce8:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    1cec:	ec 2f       	mov	r30, r28
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	ee 0f       	add	r30, r30
    1cf2:	ff 1f       	adc	r31, r31
    1cf4:	e6 58       	subi	r30, 0x86	; 134
    1cf6:	fe 4f       	sbci	r31, 0xFE	; 254
    1cf8:	a5 91       	lpm	r26, Z+
    1cfa:	b4 91       	lpm	r27, Z
    1cfc:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    1cfe:	ed 23       	and	r30, r29
    1d00:	81 e0       	ldi	r24, 0x01	; 1
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	21 f4       	brne	.+8      	; 0x1d0e <digitalRead+0x4c>
    1d06:	80 e0       	ldi	r24, 0x00	; 0
    1d08:	02 c0       	rjmp	.+4      	; 0x1d0e <digitalRead+0x4c>
    1d0a:	80 e0       	ldi	r24, 0x00	; 0
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    1d0e:	df 91       	pop	r29
    1d10:	cf 91       	pop	r28
    1d12:	08 95       	ret

00001d14 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    1d14:	cf 93       	push	r28
  uint8_t sreg = SREG;
    1d16:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    1d18:	f8 94       	cli
  if (!initialized) {
    1d1a:	80 91 3b 03 	lds	r24, 0x033B	; 0x80033b <_ZN8SPIClass11initializedE>
    1d1e:	81 11       	cpse	r24, r1
    1d20:	27 c0       	rjmp	.+78     	; 0x1d70 <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    1d22:	e0 e7       	ldi	r30, 0x70	; 112
    1d24:	f1 e0       	ldi	r31, 0x01	; 1
    1d26:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    1d28:	ec e5       	ldi	r30, 0x5C	; 92
    1d2a:	f1 e0       	ldi	r31, 0x01	; 1
    1d2c:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    1d2e:	e8 2f       	mov	r30, r24
    1d30:	f0 e0       	ldi	r31, 0x00	; 0
    1d32:	ee 0f       	add	r30, r30
    1d34:	ff 1f       	adc	r31, r31
    1d36:	e2 57       	subi	r30, 0x72	; 114
    1d38:	fe 4f       	sbci	r31, 0xFE	; 254
    1d3a:	a5 91       	lpm	r26, Z+
    1d3c:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    1d3e:	ec 91       	ld	r30, X
    1d40:	e9 23       	and	r30, r25
    1d42:	21 f4       	brne	.+8      	; 0x1d4c <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    1d44:	61 e0       	ldi	r22, 0x01	; 1
    1d46:	8a e0       	ldi	r24, 0x0A	; 10
    1d48:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    1d4c:	61 e0       	ldi	r22, 0x01	; 1
    1d4e:	8a e0       	ldi	r24, 0x0A	; 10
    1d50:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    1d54:	8c b5       	in	r24, 0x2c	; 44
    1d56:	80 61       	ori	r24, 0x10	; 16
    1d58:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    1d5a:	8c b5       	in	r24, 0x2c	; 44
    1d5c:	80 64       	ori	r24, 0x40	; 64
    1d5e:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    1d60:	61 e0       	ldi	r22, 0x01	; 1
    1d62:	8d e0       	ldi	r24, 0x0D	; 13
    1d64:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <pinMode>
    pinMode(MOSI, OUTPUT);
    1d68:	61 e0       	ldi	r22, 0x01	; 1
    1d6a:	8b e0       	ldi	r24, 0x0B	; 11
    1d6c:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <pinMode>
  }
  initialized++; // reference count
    1d70:	80 91 3b 03 	lds	r24, 0x033B	; 0x80033b <_ZN8SPIClass11initializedE>
    1d74:	8f 5f       	subi	r24, 0xFF	; 255
    1d76:	80 93 3b 03 	sts	0x033B, r24	; 0x80033b <_ZN8SPIClass11initializedE>
  SREG = sreg;
    1d7a:	cf bf       	out	0x3f, r28	; 63
}
    1d7c:	cf 91       	pop	r28
    1d7e:	08 95       	ret

00001d80 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    1d80:	08 95       	ret

00001d82 <__unordsf2>:
    1d82:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <__fp_cmp>
    1d86:	88 0b       	sbc	r24, r24
    1d88:	99 0b       	sbc	r25, r25
    1d8a:	08 95       	ret

00001d8c <__udivmodsi4>:
    1d8c:	a1 e2       	ldi	r26, 0x21	; 33
    1d8e:	1a 2e       	mov	r1, r26
    1d90:	aa 1b       	sub	r26, r26
    1d92:	bb 1b       	sub	r27, r27
    1d94:	fd 01       	movw	r30, r26
    1d96:	0d c0       	rjmp	.+26     	; 0x1db2 <__udivmodsi4_ep>

00001d98 <__udivmodsi4_loop>:
    1d98:	aa 1f       	adc	r26, r26
    1d9a:	bb 1f       	adc	r27, r27
    1d9c:	ee 1f       	adc	r30, r30
    1d9e:	ff 1f       	adc	r31, r31
    1da0:	a2 17       	cp	r26, r18
    1da2:	b3 07       	cpc	r27, r19
    1da4:	e4 07       	cpc	r30, r20
    1da6:	f5 07       	cpc	r31, r21
    1da8:	20 f0       	brcs	.+8      	; 0x1db2 <__udivmodsi4_ep>
    1daa:	a2 1b       	sub	r26, r18
    1dac:	b3 0b       	sbc	r27, r19
    1dae:	e4 0b       	sbc	r30, r20
    1db0:	f5 0b       	sbc	r31, r21

00001db2 <__udivmodsi4_ep>:
    1db2:	66 1f       	adc	r22, r22
    1db4:	77 1f       	adc	r23, r23
    1db6:	88 1f       	adc	r24, r24
    1db8:	99 1f       	adc	r25, r25
    1dba:	1a 94       	dec	r1
    1dbc:	69 f7       	brne	.-38     	; 0x1d98 <__udivmodsi4_loop>
    1dbe:	60 95       	com	r22
    1dc0:	70 95       	com	r23
    1dc2:	80 95       	com	r24
    1dc4:	90 95       	com	r25
    1dc6:	9b 01       	movw	r18, r22
    1dc8:	ac 01       	movw	r20, r24
    1dca:	bd 01       	movw	r22, r26
    1dcc:	cf 01       	movw	r24, r30
    1dce:	08 95       	ret

00001dd0 <__tablejump2__>:
    1dd0:	ee 0f       	add	r30, r30
    1dd2:	ff 1f       	adc	r31, r31
    1dd4:	05 90       	lpm	r0, Z+
    1dd6:	f4 91       	lpm	r31, Z
    1dd8:	e0 2d       	mov	r30, r0
    1dda:	09 94       	ijmp

00001ddc <_exit>:
    1ddc:	f8 94       	cli

00001dde <__stop_program>:
    1dde:	ff cf       	rjmp	.-2      	; 0x1dde <__stop_program>
