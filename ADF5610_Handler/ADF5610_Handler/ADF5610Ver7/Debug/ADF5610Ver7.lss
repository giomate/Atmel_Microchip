
ADF5610Ver7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006e  00800100  00001f70  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f70  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001ce  0080016e  0080016e  00002072  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002072  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000020a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003f0  00000000  00000000  000020e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c62d  00000000  00000000  000024d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000243b  00000000  00000000  0000eb01  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000279c  00000000  00000000  00010f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d30  00000000  00000000  000136d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000026b9  00000000  00000000  00014408  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004ccf  00000000  00000000  00016ac1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003f8  00000000  00000000  0001b790  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__ctors_end>
       4:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
       8:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
       c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      10:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      14:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      18:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      1c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      20:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      24:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      28:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      2c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      30:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      34:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      38:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      3c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      40:	0c 94 a8 0d 	jmp	0x1b50	; 0x1b50 <__vector_16>
      44:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      48:	0c 94 5a 0b 	jmp	0x16b4	; 0x16b4 <__vector_18>
      4c:	0c 94 8c 0b 	jmp	0x1718	; 0x1718 <__vector_19>
      50:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      54:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      58:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      5c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      60:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      64:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      68:	90 02       	muls	r25, r16
      6a:	a0 02       	muls	r26, r16
      6c:	ad 02       	muls	r26, r29
      6e:	9e 03       	fmulsu	r17, r22
      70:	9e 03       	fmulsu	r17, r22
      72:	0a 03       	fmul	r16, r18
      74:	9e 03       	fmulsu	r17, r22
      76:	9e 03       	fmulsu	r17, r22
      78:	9e 03       	fmulsu	r17, r22
      7a:	9e 03       	fmulsu	r17, r22
      7c:	9e 03       	fmulsu	r17, r22
      7e:	9e 03       	fmulsu	r17, r22
      80:	9e 03       	fmulsu	r17, r22
      82:	9e 03       	fmulsu	r17, r22
      84:	9e 03       	fmulsu	r17, r22
      86:	9e 03       	fmulsu	r17, r22
      88:	9e 03       	fmulsu	r17, r22
      8a:	28 03       	fmul	r18, r16
      8c:	39 03       	fmul	r19, r17
      8e:	4a 03       	fmul	r20, r18
      90:	31 04       	cpc	r3, r1
      92:	3a 04       	cpc	r3, r10
      94:	3f 04       	cpc	r3, r15
      96:	44 04       	cpc	r4, r4
      98:	49 04       	cpc	r4, r9
      9a:	4e 04       	cpc	r4, r14
      9c:	53 04       	cpc	r5, r3
      9e:	5c 04       	cpc	r5, r12
      a0:	65 04       	cpc	r6, r5
      a2:	6e 04       	cpc	r6, r14
      a4:	77 04       	cpc	r7, r7
      a6:	ac 04       	cpc	r10, r12
      a8:	ac 04       	cpc	r10, r12
      aa:	ac 04       	cpc	r10, r12
      ac:	80 04       	cpc	r8, r0
      ae:	ac 04       	cpc	r10, r12
      b0:	ac 04       	cpc	r10, r12
      b2:	ac 04       	cpc	r10, r12
      b4:	ac 04       	cpc	r10, r12
      b6:	8b 04       	cpc	r8, r11
      b8:	96 04       	cpc	r9, r6
      ba:	a1 04       	cpc	r10, r1
      bc:	08 00       	.word	0x0008	; ????
      be:	00 00       	nop
      c0:	be 92       	st	-X, r11
      c2:	24 49       	sbci	r18, 0x94	; 148
      c4:	12 3e       	cpi	r17, 0xE2	; 226
      c6:	ab aa       	std	Y+51, r10	; 0x33
      c8:	aa 2a       	or	r10, r26
      ca:	be cd       	rjmp	.-1156   	; 0xfffffc48 <__eeprom_end+0xff7efc48>
      cc:	cc cc       	rjmp	.-1640   	; 0xfffffa66 <__eeprom_end+0xff7efa66>
      ce:	4c 3e       	cpi	r20, 0xEC	; 236
      d0:	00 00       	nop
      d2:	00 80       	ld	r0, Z
      d4:	be ab       	std	Y+54, r27	; 0x36
      d6:	aa aa       	std	Y+50, r10	; 0x32
      d8:	aa 3e       	cpi	r26, 0xEA	; 234
      da:	00 00       	nop
      dc:	00 00       	nop
      de:	bf 00       	.word	0x00bf	; ????
      e0:	00 00       	nop
      e2:	80 3f       	cpi	r24, 0xF0	; 240
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	00 08       	sbc	r0, r0
      ea:	41 78       	andi	r20, 0x81	; 129
      ec:	d3 bb       	out	0x13, r29	; 19
      ee:	43 87       	std	Z+11, r20	; 0x0b
      f0:	d1 13       	cpse	r29, r17
      f2:	3d 19       	sub	r19, r13
      f4:	0e 3c       	cpi	r16, 0xCE	; 206
      f6:	c3 bd       	out	0x23, r28	; 35
      f8:	42 82       	std	Z+2, r4	; 0x02
      fa:	ad 2b       	or	r26, r29
      fc:	3e 68       	ori	r19, 0x8E	; 142
      fe:	ec 82       	std	Y+4, r14	; 0x04
     100:	76 be       	out	0x36, r7	; 54
     102:	d9 8f       	std	Y+25, r29	; 0x19
     104:	e1 a9       	ldd	r30, Z+49	; 0x31
     106:	3e 4c       	sbci	r19, 0xCE	; 206
     108:	80 ef       	ldi	r24, 0xF0	; 240
     10a:	ff be       	out	0x3f, r15	; 63
     10c:	01 c4       	rjmp	.+2050   	; 0x910 <__stack+0x11>
     10e:	ff 7f       	andi	r31, 0xFF	; 255
     110:	3f 00       	.word	0x003f	; ????
     112:	00 00       	nop
     114:	00 00       	nop
     116:	07 63       	ori	r16, 0x37	; 55
     118:	42 36       	cpi	r20, 0x62	; 98
     11a:	b7 9b       	sbis	0x16, 7	; 22
     11c:	d8 a7       	std	Y+40, r29	; 0x28
     11e:	1a 39       	cpi	r17, 0x9A	; 154
     120:	68 56       	subi	r22, 0x68	; 104
     122:	18 ae       	std	Y+56, r1	; 0x38
     124:	ba ab       	std	Y+50, r27	; 0x32
     126:	55 8c       	ldd	r5, Z+29	; 0x1d
     128:	1d 3c       	cpi	r17, 0xCD	; 205
     12a:	b7 cc       	rjmp	.-1682   	; 0xfffffa9a <__eeprom_end+0xff7efa9a>
     12c:	57 63       	ori	r21, 0x37	; 55
     12e:	bd 6d       	ori	r27, 0xDD	; 221
     130:	ed fd       	.word	0xfded	; ????
     132:	75 3e       	cpi	r23, 0xE5	; 229
     134:	f6 17       	cp	r31, r22
     136:	72 31       	cpi	r23, 0x12	; 18
     138:	bf 00       	.word	0x00bf	; ????
     13a:	00 00       	nop
     13c:	80 3f       	cpi	r24, 0xF0	; 240

0000013e <__trampolines_end>:
     13e:	00 00       	nop
     140:	00 08       	sbc	r0, r0
     142:	00 02       	muls	r16, r16
     144:	01 00       	.word	0x0001	; ????
     146:	00 03       	mulsu	r16, r16
     148:	04 07       	cpc	r16, r20
	...

00000152 <digital_pin_to_bit_mask_PGM>:
     152:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     162:	04 08 10 20                                         ... 

00000166 <digital_pin_to_port_PGM>:
     166:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     176:	03 03 03 03                                         ....

0000017a <port_to_input_PGM>:
     17a:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000184 <port_to_output_PGM>:
     184:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000018e <port_to_mode_PGM>:
     18e:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000198 <__ctors_start>:
     198:	bc 0b       	sbc	r27, r28

0000019a <__ctors_end>:
     19a:	11 24       	eor	r1, r1
     19c:	1f be       	out	0x3f, r1	; 63
     19e:	cf ef       	ldi	r28, 0xFF	; 255
     1a0:	d8 e0       	ldi	r29, 0x08	; 8
     1a2:	de bf       	out	0x3e, r29	; 62
     1a4:	cd bf       	out	0x3d, r28	; 61

000001a6 <__do_copy_data>:
     1a6:	11 e0       	ldi	r17, 0x01	; 1
     1a8:	a0 e0       	ldi	r26, 0x00	; 0
     1aa:	b1 e0       	ldi	r27, 0x01	; 1
     1ac:	e0 e7       	ldi	r30, 0x70	; 112
     1ae:	ff e1       	ldi	r31, 0x1F	; 31
     1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <__do_copy_data+0x10>
     1b2:	05 90       	lpm	r0, Z+
     1b4:	0d 92       	st	X+, r0
     1b6:	ae 36       	cpi	r26, 0x6E	; 110
     1b8:	b1 07       	cpc	r27, r17
     1ba:	d9 f7       	brne	.-10     	; 0x1b2 <__do_copy_data+0xc>

000001bc <__do_clear_bss>:
     1bc:	23 e0       	ldi	r18, 0x03	; 3
     1be:	ae e6       	ldi	r26, 0x6E	; 110
     1c0:	b1 e0       	ldi	r27, 0x01	; 1
     1c2:	01 c0       	rjmp	.+2      	; 0x1c6 <.do_clear_bss_start>

000001c4 <.do_clear_bss_loop>:
     1c4:	1d 92       	st	X+, r1

000001c6 <.do_clear_bss_start>:
     1c6:	ac 33       	cpi	r26, 0x3C	; 60
     1c8:	b2 07       	cpc	r27, r18
     1ca:	e1 f7       	brne	.-8      	; 0x1c4 <.do_clear_bss_loop>

000001cc <__do_global_ctors>:
     1cc:	10 e0       	ldi	r17, 0x00	; 0
     1ce:	cd ec       	ldi	r28, 0xCD	; 205
     1d0:	d0 e0       	ldi	r29, 0x00	; 0
     1d2:	04 c0       	rjmp	.+8      	; 0x1dc <__do_global_ctors+0x10>
     1d4:	21 97       	sbiw	r28, 0x01	; 1
     1d6:	fe 01       	movw	r30, r28
     1d8:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <__tablejump2__>
     1dc:	cc 3c       	cpi	r28, 0xCC	; 204
     1de:	d1 07       	cpc	r29, r17
     1e0:	c9 f7       	brne	.-14     	; 0x1d4 <__do_global_ctors+0x8>
     1e2:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <main>
     1e6:	0c 94 b6 0f 	jmp	0x1f6c	; 0x1f6c <_exit>

000001ea <__bad_interrupt>:
     1ea:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ee <_ZN8SPIClass14endTransactionEv.part.1>:



  //Initialisation sequence

  ConvertFreq();
     1ee:	9f b7       	in	r25, 0x3f	; 63
     1f0:	f8 94       	cli
     1f2:	20 91 3a 03 	lds	r18, 0x033A	; 0x80033a <_ZN8SPIClass13interruptModeE>
     1f6:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <_ZN8SPIClass13interruptSaveE>
     1fa:	21 30       	cpi	r18, 0x01	; 1
     1fc:	19 f4       	brne	.+6      	; 0x204 <_ZN8SPIClass14endTransactionEv.part.1+0x16>
     1fe:	8d bb       	out	0x1d, r24	; 29
     200:	9f bf       	out	0x3f, r25	; 63
     202:	08 95       	ret
     204:	8f bf       	out	0x3f, r24	; 63
     206:	08 95       	ret

00000208 <_ZN8SPIClass16beginTransactionE11SPISettings>:
     208:	20 91 3a 03 	lds	r18, 0x033A	; 0x80033a <_ZN8SPIClass13interruptModeE>
     20c:	22 23       	and	r18, r18
     20e:	99 f0       	breq	.+38     	; 0x236 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
     210:	4f b7       	in	r20, 0x3f	; 63
     212:	f8 94       	cli
     214:	20 91 3a 03 	lds	r18, 0x033A	; 0x80033a <_ZN8SPIClass13interruptModeE>
     218:	21 30       	cpi	r18, 0x01	; 1
     21a:	59 f4       	brne	.+22     	; 0x232 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
     21c:	2d b3       	in	r18, 0x1d	; 29
     21e:	20 93 38 03 	sts	0x0338, r18	; 0x800338 <_ZN8SPIClass13interruptSaveE>
     222:	3d b3       	in	r19, 0x1d	; 29
     224:	20 91 39 03 	lds	r18, 0x0339	; 0x800339 <_ZN8SPIClass13interruptMaskE>
     228:	20 95       	com	r18
     22a:	23 23       	and	r18, r19
     22c:	2d bb       	out	0x1d, r18	; 29
     22e:	4f bf       	out	0x3f, r20	; 63
     230:	02 c0       	rjmp	.+4      	; 0x236 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
     232:	40 93 38 03 	sts	0x0338, r20	; 0x800338 <_ZN8SPIClass13interruptSaveE>
     236:	8c bd       	out	0x2c, r24	; 44
     238:	9d bd       	out	0x2d, r25	; 45
     23a:	08 95       	ret

0000023c <_ZN8SPIClass8transferEh>:
     23c:	8e bd       	out	0x2e, r24	; 46
     23e:	00 00       	nop
     240:	0d b4       	in	r0, 0x2d	; 45
     242:	07 fe       	sbrs	r0, 7
     244:	fd cf       	rjmp	.-6      	; 0x240 <_ZN8SPIClass8transferEh+0x4>
     246:	8e b5       	in	r24, 0x2e	; 46
     248:	08 95       	ret

0000024a <_Z17EscribirRegistrosh>:
     24a:	cf 92       	push	r12
     24c:	df 92       	push	r13
     24e:	ef 92       	push	r14
     250:	ff 92       	push	r15
     252:	cf 93       	push	r28
     254:	df 93       	push	r29
     256:	d8 2f       	mov	r29, r24
     258:	84 31       	cpi	r24, 0x14	; 20
     25a:	30 f0       	brcs	.+12     	; 0x268 <_Z17EscribirRegistrosh+0x1e>
     25c:	87 31       	cpi	r24, 0x17	; 23
     25e:	31 f0       	breq	.+12     	; 0x26c <_Z17EscribirRegistrosh+0x22>
     260:	88 31       	cpi	r24, 0x18	; 24
     262:	31 f0       	breq	.+12     	; 0x270 <_Z17EscribirRegistrosh+0x26>
     264:	c5 e0       	ldi	r28, 0x05	; 5
     266:	05 c0       	rjmp	.+10     	; 0x272 <_Z17EscribirRegistrosh+0x28>
     268:	c8 2f       	mov	r28, r24
     26a:	03 c0       	rjmp	.+6      	; 0x272 <_Z17EscribirRegistrosh+0x28>
     26c:	c3 e0       	ldi	r28, 0x03	; 3
     26e:	01 c0       	rjmp	.+2      	; 0x272 <_Z17EscribirRegistrosh+0x28>
     270:	c4 e0       	ldi	r28, 0x04	; 4
     272:	80 e5       	ldi	r24, 0x50	; 80
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	0e 94 04 01 	call	0x208	; 0x208 <_ZN8SPIClass16beginTransactionE11SPISettings>
     27a:	60 e0       	ldi	r22, 0x00	; 0
     27c:	8a e0       	ldi	r24, 0x0A	; 10
     27e:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <digitalWrite>
     282:	84 e0       	ldi	r24, 0x04	; 4
     284:	d8 9f       	mul	r29, r24
     286:	f0 01       	movw	r30, r0
     288:	11 24       	eor	r1, r1
     28a:	e2 53       	subi	r30, 0x32	; 50
     28c:	fe 4f       	sbci	r31, 0xFE	; 254
     28e:	c0 80       	ld	r12, Z
     290:	d1 80       	ldd	r13, Z+1	; 0x01
     292:	e2 80       	ldd	r14, Z+2	; 0x02
     294:	f3 80       	ldd	r15, Z+3	; 0x03
     296:	fe 2c       	mov	r15, r14
     298:	ed 2c       	mov	r14, r13
     29a:	dc 2c       	mov	r13, r12
     29c:	cc 24       	eor	r12, r12
     29e:	8c 2f       	mov	r24, r28
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	a0 e0       	ldi	r26, 0x00	; 0
     2a4:	b0 e0       	ldi	r27, 0x00	; 0
     2a6:	23 e0       	ldi	r18, 0x03	; 3
     2a8:	88 0f       	add	r24, r24
     2aa:	99 1f       	adc	r25, r25
     2ac:	aa 1f       	adc	r26, r26
     2ae:	bb 1f       	adc	r27, r27
     2b0:	2a 95       	dec	r18
     2b2:	d1 f7       	brne	.-12     	; 0x2a8 <_Z17EscribirRegistrosh+0x5e>
     2b4:	c8 2a       	or	r12, r24
     2b6:	d9 2a       	or	r13, r25
     2b8:	ea 2a       	or	r14, r26
     2ba:	fb 2a       	or	r15, r27
     2bc:	8f 2d       	mov	r24, r15
     2be:	0e 94 1e 01 	call	0x23c	; 0x23c <_ZN8SPIClass8transferEh>
     2c2:	8e 2d       	mov	r24, r14
     2c4:	0e 94 1e 01 	call	0x23c	; 0x23c <_ZN8SPIClass8transferEh>
     2c8:	8d 2d       	mov	r24, r13
     2ca:	0e 94 1e 01 	call	0x23c	; 0x23c <_ZN8SPIClass8transferEh>
     2ce:	8c 2d       	mov	r24, r12
     2d0:	0e 94 1e 01 	call	0x23c	; 0x23c <_ZN8SPIClass8transferEh>
     2d4:	61 e0       	ldi	r22, 0x01	; 1
     2d6:	8a e0       	ldi	r24, 0x0A	; 10
     2d8:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <digitalWrite>
     2dc:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <_ZN8SPIClass13interruptModeE>
     2e0:	81 11       	cpse	r24, r1
     2e2:	0e 94 f7 00 	call	0x1ee	; 0x1ee <_ZN8SPIClass14endTransactionEv.part.1>
     2e6:	61 e0       	ldi	r22, 0x01	; 1
     2e8:	70 e0       	ldi	r23, 0x00	; 0
     2ea:	80 e0       	ldi	r24, 0x00	; 0
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	df 91       	pop	r29
     2f0:	cf 91       	pop	r28
     2f2:	ff 90       	pop	r15
     2f4:	ef 90       	pop	r14
     2f6:	df 90       	pop	r13
     2f8:	cf 90       	pop	r12
     2fa:	0c 94 17 0e 	jmp	0x1c2e	; 0x1c2e <delay>

000002fe <_Z13LeerRegistrosh>:
     2fe:	1f 93       	push	r17
     300:	cf 93       	push	r28
     302:	df 93       	push	r29
     304:	00 d0       	rcall	.+0      	; 0x306 <_Z13LeerRegistrosh+0x8>
     306:	00 d0       	rcall	.+0      	; 0x308 <_Z13LeerRegistrosh+0xa>
     308:	cd b7       	in	r28, 0x3d	; 61
     30a:	de b7       	in	r29, 0x3e	; 62
     30c:	18 2f       	mov	r17, r24
     30e:	19 82       	std	Y+1, r1	; 0x01
     310:	1a 82       	std	Y+2, r1	; 0x02
     312:	1b 82       	std	Y+3, r1	; 0x03
     314:	1c 82       	std	Y+4, r1	; 0x04
     316:	80 e5       	ldi	r24, 0x50	; 80
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	0e 94 04 01 	call	0x208	; 0x208 <_ZN8SPIClass16beginTransactionE11SPISettings>
     31e:	60 e0       	ldi	r22, 0x00	; 0
     320:	8a e0       	ldi	r24, 0x0A	; 10
     322:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <digitalWrite>
     326:	80 e0       	ldi	r24, 0x00	; 0
     328:	0e 94 1e 01 	call	0x23c	; 0x23c <_ZN8SPIClass8transferEh>
     32c:	80 e0       	ldi	r24, 0x00	; 0
     32e:	0e 94 1e 01 	call	0x23c	; 0x23c <_ZN8SPIClass8transferEh>
     332:	81 2f       	mov	r24, r17
     334:	0e 94 1e 01 	call	0x23c	; 0x23c <_ZN8SPIClass8transferEh>
     338:	80 e0       	ldi	r24, 0x00	; 0
     33a:	0e 94 1e 01 	call	0x23c	; 0x23c <_ZN8SPIClass8transferEh>
     33e:	61 e0       	ldi	r22, 0x01	; 1
     340:	8a e0       	ldi	r24, 0x0A	; 10
     342:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <digitalWrite>
     346:	60 e0       	ldi	r22, 0x00	; 0
     348:	8a e0       	ldi	r24, 0x0A	; 10
     34a:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <digitalWrite>
     34e:	1e bc       	out	0x2e, r1	; 46
     350:	fe 01       	movw	r30, r28
     352:	31 96       	adiw	r30, 0x01	; 1
     354:	9e 01       	movw	r18, r28
     356:	2c 5f       	subi	r18, 0xFC	; 252
     358:	3f 4f       	sbci	r19, 0xFF	; 255
     35a:	e2 17       	cp	r30, r18
     35c:	f3 07       	cpc	r31, r19
     35e:	41 f0       	breq	.+16     	; 0x370 <_Z13LeerRegistrosh+0x72>
     360:	91 81       	ldd	r25, Z+1	; 0x01
     362:	0d b4       	in	r0, 0x2d	; 45
     364:	07 fe       	sbrs	r0, 7
     366:	fd cf       	rjmp	.-6      	; 0x362 <_Z13LeerRegistrosh+0x64>
     368:	8e b5       	in	r24, 0x2e	; 46
     36a:	9e bd       	out	0x2e, r25	; 46
     36c:	81 93       	st	Z+, r24
     36e:	f5 cf       	rjmp	.-22     	; 0x35a <_Z13LeerRegistrosh+0x5c>
     370:	0d b4       	in	r0, 0x2d	; 45
     372:	07 fe       	sbrs	r0, 7
     374:	fd cf       	rjmp	.-6      	; 0x370 <_Z13LeerRegistrosh+0x72>
     376:	8e b5       	in	r24, 0x2e	; 46
     378:	8c 83       	std	Y+4, r24	; 0x04
     37a:	69 81       	ldd	r22, Y+1	; 0x01
     37c:	7a 81       	ldd	r23, Y+2	; 0x02
     37e:	8b 81       	ldd	r24, Y+3	; 0x03
     380:	9c 81       	ldd	r25, Y+4	; 0x04
     382:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <__bswapsi2>
     386:	24 e0       	ldi	r18, 0x04	; 4
     388:	12 9f       	mul	r17, r18
     38a:	f0 01       	movw	r30, r0
     38c:	11 24       	eor	r1, r1
     38e:	e2 5d       	subi	r30, 0xD2	; 210
     390:	fd 4f       	sbci	r31, 0xFD	; 253
     392:	dc 01       	movw	r26, r24
     394:	cb 01       	movw	r24, r22
     396:	27 e0       	ldi	r18, 0x07	; 7
     398:	b6 95       	lsr	r27
     39a:	a7 95       	ror	r26
     39c:	97 95       	ror	r25
     39e:	87 95       	ror	r24
     3a0:	2a 95       	dec	r18
     3a2:	d1 f7       	brne	.-12     	; 0x398 <_Z13LeerRegistrosh+0x9a>
     3a4:	be 7f       	andi	r27, 0xFE	; 254
     3a6:	80 83       	st	Z, r24
     3a8:	91 83       	std	Z+1, r25	; 0x01
     3aa:	a2 83       	std	Z+2, r26	; 0x02
     3ac:	b3 83       	std	Z+3, r27	; 0x03
     3ae:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <_ZN8SPIClass13interruptModeE>
     3b2:	81 11       	cpse	r24, r1
     3b4:	0e 94 f7 00 	call	0x1ee	; 0x1ee <_ZN8SPIClass14endTransactionEv.part.1>
     3b8:	61 e0       	ldi	r22, 0x01	; 1
     3ba:	8a e0       	ldi	r24, 0x0A	; 10
     3bc:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <digitalWrite>
     3c0:	61 e0       	ldi	r22, 0x01	; 1
     3c2:	70 e0       	ldi	r23, 0x00	; 0
     3c4:	80 e0       	ldi	r24, 0x00	; 0
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	0f 90       	pop	r0
     3ca:	0f 90       	pop	r0
     3cc:	0f 90       	pop	r0
     3ce:	0f 90       	pop	r0
     3d0:	df 91       	pop	r29
     3d2:	cf 91       	pop	r28
     3d4:	1f 91       	pop	r17
     3d6:	0c 94 17 0e 	jmp	0x1c2e	; 0x1c2e <delay>

000003da <_Z11ConvertFreqv>:
     3da:	2f 92       	push	r2
     3dc:	3f 92       	push	r3
     3de:	4f 92       	push	r4
     3e0:	5f 92       	push	r5
     3e2:	6f 92       	push	r6
     3e4:	7f 92       	push	r7
     3e6:	8f 92       	push	r8
     3e8:	9f 92       	push	r9
     3ea:	af 92       	push	r10
     3ec:	bf 92       	push	r11
     3ee:	cf 92       	push	r12
     3f0:	df 92       	push	r13
     3f2:	ef 92       	push	r14
     3f4:	ff 92       	push	r15
     3f6:	0f 93       	push	r16
     3f8:	1f 93       	push	r17
     3fa:	cf 93       	push	r28
     3fc:	df 93       	push	r29
     3fe:	cd b7       	in	r28, 0x3d	; 61
     400:	de b7       	in	r29, 0x3e	; 62
     402:	62 97       	sbiw	r28, 0x12	; 18
     404:	0f b6       	in	r0, 0x3f	; 63
     406:	f8 94       	cli
     408:	de bf       	out	0x3e, r29	; 62
     40a:	0f be       	out	0x3f, r0	; 63
     40c:	cd bf       	out	0x3d, r28	; 61
     40e:	c0 90 8e 02 	lds	r12, 0x028E	; 0x80028e <freq>
     412:	d0 90 8f 02 	lds	r13, 0x028F	; 0x80028f <freq+0x1>
     416:	e0 90 90 02 	lds	r14, 0x0290	; 0x800290 <freq+0x2>
     41a:	f0 90 91 02 	lds	r15, 0x0291	; 0x800291 <freq+0x3>
     41e:	a7 01       	movw	r20, r14
     420:	96 01       	movw	r18, r12
     422:	60 e0       	ldi	r22, 0x00	; 0
     424:	70 e2       	ldi	r23, 0x20	; 32
     426:	84 e6       	ldi	r24, 0x64	; 100
     428:	96 e4       	ldi	r25, 0x46	; 70
     42a:	0e 94 7e 06 	call	0xcfc	; 0xcfc <__divsf3>
     42e:	0e 94 00 08 	call	0x1000	; 0x1000 <log>
     432:	28 e1       	ldi	r18, 0x18	; 24
     434:	32 e7       	ldi	r19, 0x72	; 114
     436:	41 e3       	ldi	r20, 0x31	; 49
     438:	5f e3       	ldi	r21, 0x3F	; 63
     43a:	0e 94 7e 06 	call	0xcfc	; 0xcfc <__divsf3>
     43e:	0e 94 26 07 	call	0xe4c	; 0xe4c <floor>
     442:	4b 01       	movw	r8, r22
     444:	5c 01       	movw	r10, r24
     446:	0e 94 f7 06 	call	0xdee	; 0xdee <__fixunssfsi>
     44a:	17 e0       	ldi	r17, 0x07	; 7
     44c:	16 1b       	sub	r17, r22
     44e:	a5 01       	movw	r20, r10
     450:	94 01       	movw	r18, r8
     452:	60 e0       	ldi	r22, 0x00	; 0
     454:	70 e0       	ldi	r23, 0x00	; 0
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	90 e4       	ldi	r25, 0x40	; 64
     45a:	0e 94 b5 08 	call	0x116a	; 0x116a <pow>
     45e:	9b 01       	movw	r18, r22
     460:	ac 01       	movw	r20, r24
     462:	c7 01       	movw	r24, r14
     464:	b6 01       	movw	r22, r12
     466:	0e 94 48 08 	call	0x1090	; 0x1090 <__mulsf3>
     46a:	20 e0       	ldi	r18, 0x00	; 0
     46c:	30 e2       	ldi	r19, 0x20	; 32
     46e:	44 e6       	ldi	r20, 0x64	; 100
     470:	56 e4       	ldi	r21, 0x46	; 70
     472:	0e 94 7e 06 	call	0xcfc	; 0xcfc <__divsf3>
     476:	20 e0       	ldi	r18, 0x00	; 0
     478:	30 e2       	ldi	r19, 0x20	; 32
     47a:	44 ee       	ldi	r20, 0xE4	; 228
     47c:	55 e4       	ldi	r21, 0x45	; 69
     47e:	0e 94 48 08 	call	0x1090	; 0x1090 <__mulsf3>
     482:	4b 01       	movw	r8, r22
     484:	5c 01       	movw	r10, r24
     486:	20 e0       	ldi	r18, 0x00	; 0
     488:	30 e0       	ldi	r19, 0x00	; 0
     48a:	4a e7       	ldi	r20, 0x7A	; 122
     48c:	55 e4       	ldi	r21, 0x45	; 69
     48e:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__cmpsf2>
     492:	87 fd       	sbrc	r24, 7
     494:	05 c0       	rjmp	.+10     	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
     496:	20 e0       	ldi	r18, 0x00	; 0
     498:	30 e0       	ldi	r19, 0x00	; 0
     49a:	48 ec       	ldi	r20, 0xC8	; 200
     49c:	52 e4       	ldi	r21, 0x42	; 66
     49e:	04 c0       	rjmp	.+8      	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
     4a0:	20 e0       	ldi	r18, 0x00	; 0
     4a2:	30 e0       	ldi	r19, 0x00	; 0
     4a4:	48 e4       	ldi	r20, 0x48	; 72
     4a6:	52 e4       	ldi	r21, 0x42	; 66
     4a8:	c5 01       	movw	r24, r10
     4aa:	b4 01       	movw	r22, r8
     4ac:	0e 94 7e 06 	call	0xcfc	; 0xcfc <__divsf3>
     4b0:	6b 01       	movw	r12, r22
     4b2:	7c 01       	movw	r14, r24
     4b4:	0e 94 26 07 	call	0xe4c	; 0xe4c <floor>
     4b8:	2b 01       	movw	r4, r22
     4ba:	3c 01       	movw	r6, r24
     4bc:	9b 01       	movw	r18, r22
     4be:	ac 01       	movw	r20, r24
     4c0:	c7 01       	movw	r24, r14
     4c2:	b6 01       	movw	r22, r12
     4c4:	0e 94 0c 06 	call	0xc18	; 0xc18 <__subsf3>
     4c8:	20 e0       	ldi	r18, 0x00	; 0
     4ca:	30 e0       	ldi	r19, 0x00	; 0
     4cc:	40 e8       	ldi	r20, 0x80	; 128
     4ce:	5b e4       	ldi	r21, 0x4B	; 75
     4d0:	0e 94 48 08 	call	0x1090	; 0x1090 <__mulsf3>
     4d4:	0e 94 f7 06 	call	0xdee	; 0xdee <__fixunssfsi>
     4d8:	2e e2       	ldi	r18, 0x2E	; 46
     4da:	22 2e       	mov	r2, r18
     4dc:	22 e0       	ldi	r18, 0x02	; 2
     4de:	32 2e       	mov	r3, r18
     4e0:	2e ec       	ldi	r18, 0xCE	; 206
     4e2:	31 e0       	ldi	r19, 0x01	; 1
     4e4:	3a 83       	std	Y+2, r19	; 0x02
     4e6:	29 83       	std	Y+1, r18	; 0x01
     4e8:	1e 86       	std	Y+14, r1	; 0x0e
     4ea:	1d 86       	std	Y+13, r1	; 0x0d
     4ec:	41 2f       	mov	r20, r17
     4ee:	50 e0       	ldi	r21, 0x00	; 0
     4f0:	58 87       	std	Y+8, r21	; 0x08
     4f2:	4f 83       	std	Y+7, r20	; 0x07
     4f4:	c1 2c       	mov	r12, r1
     4f6:	d1 2c       	mov	r13, r1
     4f8:	76 01       	movw	r14, r12
     4fa:	c3 94       	inc	r12
     4fc:	9b 01       	movw	r18, r22
     4fe:	ac 01       	movw	r20, r24
     500:	55 27       	eor	r21, r21
     502:	29 87       	std	Y+9, r18	; 0x09
     504:	3a 87       	std	Y+10, r19	; 0x0a
     506:	4b 87       	std	Y+11, r20	; 0x0b
     508:	5c 87       	std	Y+12, r21	; 0x0c
     50a:	ed 85       	ldd	r30, Y+13	; 0x0d
     50c:	fe 85       	ldd	r31, Y+14	; 0x0e
     50e:	33 97       	sbiw	r30, 0x03	; 3
     510:	e4 31       	cpi	r30, 0x14	; 20
     512:	f1 05       	cpc	r31, r1
     514:	08 f0       	brcs	.+2      	; 0x518 <__EEPROM_REGION_LENGTH__+0x118>
     516:	12 c1       	rjmp	.+548    	; 0x73c <__EEPROM_REGION_LENGTH__+0x33c>
     518:	ec 5c       	subi	r30, 0xCC	; 204
     51a:	ff 4f       	sbci	r31, 0xFF	; 255
     51c:	0c 94 a9 0f 	jmp	0x1f52	; 0x1f52 <__tablejump2__>
     520:	c3 01       	movw	r24, r6
     522:	b2 01       	movw	r22, r4
     524:	0e 94 f0 06 	call	0xde0	; 0xde0 <__fixsfsi>
     528:	dc 01       	movw	r26, r24
     52a:	cb 01       	movw	r24, r22
     52c:	bb 27       	eor	r27, r27
     52e:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <RegWrite+0xc>
     532:	90 93 db 01 	sts	0x01DB, r25	; 0x8001db <RegWrite+0xd>
     536:	a0 93 dc 01 	sts	0x01DC, r26	; 0x8001dc <RegWrite+0xe>
     53a:	b0 93 dd 01 	sts	0x01DD, r27	; 0x8001dd <RegWrite+0xf>
     53e:	09 c1       	rjmp	.+530    	; 0x752 <__EEPROM_REGION_LENGTH__+0x352>
     540:	49 85       	ldd	r20, Y+9	; 0x09
     542:	5a 85       	ldd	r21, Y+10	; 0x0a
     544:	6b 85       	ldd	r22, Y+11	; 0x0b
     546:	7c 85       	ldd	r23, Y+12	; 0x0c
     548:	40 93 de 01 	sts	0x01DE, r20	; 0x8001de <RegWrite+0x10>
     54c:	50 93 df 01 	sts	0x01DF, r21	; 0x8001df <RegWrite+0x11>
     550:	60 93 e0 01 	sts	0x01E0, r22	; 0x8001e0 <RegWrite+0x12>
     554:	70 93 e1 01 	sts	0x01E1, r23	; 0x8001e1 <RegWrite+0x13>
     558:	fc c0       	rjmp	.+504    	; 0x752 <__EEPROM_REGION_LENGTH__+0x352>
     55a:	80 e1       	ldi	r24, 0x10	; 16
     55c:	0e 94 7f 01 	call	0x2fe	; 0x2fe <_Z13LeerRegistrosh>
     560:	60 91 6e 02 	lds	r22, 0x026E	; 0x80026e <RegRead+0x40>
     564:	70 91 6f 02 	lds	r23, 0x026F	; 0x80026f <RegRead+0x41>
     568:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <RegRead+0x42>
     56c:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <RegRead+0x43>
     570:	6b 83       	std	Y+3, r22	; 0x03
     572:	7c 83       	std	Y+4, r23	; 0x04
     574:	8d 83       	std	Y+5, r24	; 0x05
     576:	9e 83       	std	Y+6, r25	; 0x06
     578:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <RegWrite+0x14>
     57c:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <RegWrite+0x15>
     580:	a0 91 e4 01 	lds	r26, 0x01E4	; 0x8001e4 <RegWrite+0x16>
     584:	b0 91 e5 01 	lds	r27, 0x01E5	; 0x8001e5 <RegWrite+0x17>
     588:	2f e0       	ldi	r18, 0x0F	; 15
     58a:	30 e0       	ldi	r19, 0x00	; 0
     58c:	28 30       	cpi	r18, 0x08	; 8
     58e:	31 05       	cpc	r19, r1
     590:	14 f1       	brlt	.+68     	; 0x5d6 <__EEPROM_REGION_LENGTH__+0x1d6>
     592:	f9 01       	movw	r30, r18
     594:	38 97       	sbiw	r30, 0x08	; 8
     596:	4b 81       	ldd	r20, Y+3	; 0x03
     598:	5c 81       	ldd	r21, Y+4	; 0x04
     59a:	6d 81       	ldd	r22, Y+5	; 0x05
     59c:	7e 81       	ldd	r23, Y+6	; 0x06
     59e:	04 c0       	rjmp	.+8      	; 0x5a8 <__EEPROM_REGION_LENGTH__+0x1a8>
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	ea 95       	dec	r30
     5aa:	d2 f7       	brpl	.-12     	; 0x5a0 <__EEPROM_REGION_LENGTH__+0x1a0>
     5ac:	4f 87       	std	Y+15, r20	; 0x0f
     5ae:	58 8b       	std	Y+16, r21	; 0x10
     5b0:	69 8b       	std	Y+17, r22	; 0x11
     5b2:	7a 8b       	std	Y+18, r23	; 0x12
     5b4:	40 ff       	sbrs	r20, 0
     5b6:	0f c0       	rjmp	.+30     	; 0x5d6 <__EEPROM_REGION_LENGTH__+0x1d6>
     5b8:	b7 01       	movw	r22, r14
     5ba:	a6 01       	movw	r20, r12
     5bc:	02 2e       	mov	r0, r18
     5be:	04 c0       	rjmp	.+8      	; 0x5c8 <__EEPROM_REGION_LENGTH__+0x1c8>
     5c0:	44 0f       	add	r20, r20
     5c2:	55 1f       	adc	r21, r21
     5c4:	66 1f       	adc	r22, r22
     5c6:	77 1f       	adc	r23, r23
     5c8:	0a 94       	dec	r0
     5ca:	d2 f7       	brpl	.-12     	; 0x5c0 <__EEPROM_REGION_LENGTH__+0x1c0>
     5cc:	84 2b       	or	r24, r20
     5ce:	95 2b       	or	r25, r21
     5d0:	a6 2b       	or	r26, r22
     5d2:	b7 2b       	or	r27, r23
     5d4:	12 c0       	rjmp	.+36     	; 0x5fa <__EEPROM_REGION_LENGTH__+0x1fa>
     5d6:	b7 01       	movw	r22, r14
     5d8:	a6 01       	movw	r20, r12
     5da:	02 2e       	mov	r0, r18
     5dc:	04 c0       	rjmp	.+8      	; 0x5e6 <__EEPROM_REGION_LENGTH__+0x1e6>
     5de:	44 0f       	add	r20, r20
     5e0:	55 1f       	adc	r21, r21
     5e2:	66 1f       	adc	r22, r22
     5e4:	77 1f       	adc	r23, r23
     5e6:	0a 94       	dec	r0
     5e8:	d2 f7       	brpl	.-12     	; 0x5de <__EEPROM_REGION_LENGTH__+0x1de>
     5ea:	40 95       	com	r20
     5ec:	50 95       	com	r21
     5ee:	60 95       	com	r22
     5f0:	70 95       	com	r23
     5f2:	84 23       	and	r24, r20
     5f4:	95 23       	and	r25, r21
     5f6:	a6 23       	and	r26, r22
     5f8:	b7 23       	and	r27, r23
     5fa:	21 50       	subi	r18, 0x01	; 1
     5fc:	31 09       	sbc	r19, r1
     5fe:	30 f6       	brcc	.-116    	; 0x58c <__EEPROM_REGION_LENGTH__+0x18c>
     600:	90 62       	ori	r25, 0x20	; 32
     602:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <RegWrite+0x14>
     606:	90 93 e3 01 	sts	0x01E3, r25	; 0x8001e3 <RegWrite+0x15>
     60a:	a0 93 e4 01 	sts	0x01E4, r26	; 0x8001e4 <RegWrite+0x16>
     60e:	b0 93 e5 01 	sts	0x01E5, r27	; 0x8001e5 <RegWrite+0x17>
     612:	9f c0       	rjmp	.+318    	; 0x752 <__EEPROM_REGION_LENGTH__+0x352>
     614:	20 e0       	ldi	r18, 0x00	; 0
     616:	30 e0       	ldi	r19, 0x00	; 0
     618:	4a e7       	ldi	r20, 0x7A	; 122
     61a:	55 e4       	ldi	r21, 0x45	; 69
     61c:	c5 01       	movw	r24, r10
     61e:	b4 01       	movw	r22, r8
     620:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__cmpsf2>
     624:	40 91 ee 01 	lds	r20, 0x01EE	; 0x8001ee <RegWrite+0x20>
     628:	50 91 ef 01 	lds	r21, 0x01EF	; 0x8001ef <RegWrite+0x21>
     62c:	60 91 f0 01 	lds	r22, 0x01F0	; 0x8001f0 <RegWrite+0x22>
     630:	70 91 f1 01 	lds	r23, 0x01F1	; 0x8001f1 <RegWrite+0x23>
     634:	87 ff       	sbrs	r24, 7
     636:	02 c0       	rjmp	.+4      	; 0x63c <__EEPROM_REGION_LENGTH__+0x23c>
     638:	67 7f       	andi	r22, 0xF7	; 247
     63a:	01 c0       	rjmp	.+2      	; 0x63e <__EEPROM_REGION_LENGTH__+0x23e>
     63c:	68 60       	ori	r22, 0x08	; 8
     63e:	40 93 ee 01 	sts	0x01EE, r20	; 0x8001ee <RegWrite+0x20>
     642:	50 93 ef 01 	sts	0x01EF, r21	; 0x8001ef <RegWrite+0x21>
     646:	60 93 f0 01 	sts	0x01F0, r22	; 0x8001f0 <RegWrite+0x22>
     64a:	70 93 f1 01 	sts	0x01F1, r23	; 0x8001f1 <RegWrite+0x23>
     64e:	81 c0       	rjmp	.+258    	; 0x752 <__EEPROM_REGION_LENGTH__+0x352>
     650:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <RegWrite+0x14>
     654:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <RegWrite+0x15>
     658:	a0 91 e4 01 	lds	r26, 0x01E4	; 0x8001e4 <RegWrite+0x16>
     65c:	b0 91 e5 01 	lds	r27, 0x01E5	; 0x8001e5 <RegWrite+0x17>
     660:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <RegWrite+0x50>
     664:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <RegWrite+0x51>
     668:	a0 93 20 02 	sts	0x0220, r26	; 0x800220 <RegWrite+0x52>
     66c:	b0 93 21 02 	sts	0x0221, r27	; 0x800221 <RegWrite+0x53>
     670:	70 c0       	rjmp	.+224    	; 0x752 <__EEPROM_REGION_LENGTH__+0x352>
     672:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <__data_end+0x54>
     676:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <__data_end+0x55>
     67a:	a0 91 c4 01 	lds	r26, 0x01C4	; 0x8001c4 <__data_end+0x56>
     67e:	b0 91 c5 01 	lds	r27, 0x01C5	; 0x8001c5 <__data_end+0x57>
     682:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <RegWrite+0x54>
     686:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <RegWrite+0x55>
     68a:	a0 93 24 02 	sts	0x0224, r26	; 0x800224 <RegWrite+0x56>
     68e:	b0 93 25 02 	sts	0x0225, r27	; 0x800225 <RegWrite+0x57>
     692:	5f c0       	rjmp	.+190    	; 0x752 <__EEPROM_REGION_LENGTH__+0x352>
     694:	40 91 26 02 	lds	r20, 0x0226	; 0x800226 <RegWrite+0x58>
     698:	50 91 27 02 	lds	r21, 0x0227	; 0x800227 <RegWrite+0x59>
     69c:	60 91 28 02 	lds	r22, 0x0228	; 0x800228 <RegWrite+0x5a>
     6a0:	70 91 29 02 	lds	r23, 0x0229	; 0x800229 <RegWrite+0x5b>
     6a4:	83 e0       	ldi	r24, 0x03	; 3
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	9c 01       	movw	r18, r24
     6aa:	87 30       	cpi	r24, 0x07	; 7
     6ac:	91 05       	cpc	r25, r1
     6ae:	5c f4       	brge	.+22     	; 0x6c6 <__EEPROM_REGION_LENGTH__+0x2c6>
     6b0:	23 50       	subi	r18, 0x03	; 3
     6b2:	31 09       	sbc	r19, r1
     6b4:	a2 e0       	ldi	r26, 0x02	; 2
     6b6:	b0 e0       	ldi	r27, 0x00	; 0
     6b8:	02 c0       	rjmp	.+4      	; 0x6be <__EEPROM_REGION_LENGTH__+0x2be>
     6ba:	b5 95       	asr	r27
     6bc:	a7 95       	ror	r26
     6be:	2a 95       	dec	r18
     6c0:	e2 f7       	brpl	.-8      	; 0x6ba <__EEPROM_REGION_LENGTH__+0x2ba>
     6c2:	9d 01       	movw	r18, r26
     6c4:	0a c0       	rjmp	.+20     	; 0x6da <__EEPROM_REGION_LENGTH__+0x2da>
     6c6:	27 50       	subi	r18, 0x07	; 7
     6c8:	31 09       	sbc	r19, r1
     6ca:	ef 81       	ldd	r30, Y+7	; 0x07
     6cc:	f8 85       	ldd	r31, Y+8	; 0x08
     6ce:	02 c0       	rjmp	.+4      	; 0x6d4 <__EEPROM_REGION_LENGTH__+0x2d4>
     6d0:	f5 95       	asr	r31
     6d2:	e7 95       	ror	r30
     6d4:	2a 95       	dec	r18
     6d6:	e2 f7       	brpl	.-8      	; 0x6d0 <__EEPROM_REGION_LENGTH__+0x2d0>
     6d8:	9f 01       	movw	r18, r30
     6da:	20 ff       	sbrs	r18, 0
     6dc:	0f c0       	rjmp	.+30     	; 0x6fc <__EEPROM_REGION_LENGTH__+0x2fc>
     6de:	97 01       	movw	r18, r14
     6e0:	86 01       	movw	r16, r12
     6e2:	08 2e       	mov	r0, r24
     6e4:	04 c0       	rjmp	.+8      	; 0x6ee <__EEPROM_REGION_LENGTH__+0x2ee>
     6e6:	00 0f       	add	r16, r16
     6e8:	11 1f       	adc	r17, r17
     6ea:	22 1f       	adc	r18, r18
     6ec:	33 1f       	adc	r19, r19
     6ee:	0a 94       	dec	r0
     6f0:	d2 f7       	brpl	.-12     	; 0x6e6 <__EEPROM_REGION_LENGTH__+0x2e6>
     6f2:	40 2b       	or	r20, r16
     6f4:	51 2b       	or	r21, r17
     6f6:	62 2b       	or	r22, r18
     6f8:	73 2b       	or	r23, r19
     6fa:	12 c0       	rjmp	.+36     	; 0x720 <__EEPROM_REGION_LENGTH__+0x320>
     6fc:	97 01       	movw	r18, r14
     6fe:	86 01       	movw	r16, r12
     700:	08 2e       	mov	r0, r24
     702:	04 c0       	rjmp	.+8      	; 0x70c <__EEPROM_REGION_LENGTH__+0x30c>
     704:	00 0f       	add	r16, r16
     706:	11 1f       	adc	r17, r17
     708:	22 1f       	adc	r18, r18
     70a:	33 1f       	adc	r19, r19
     70c:	0a 94       	dec	r0
     70e:	d2 f7       	brpl	.-12     	; 0x704 <__EEPROM_REGION_LENGTH__+0x304>
     710:	00 95       	com	r16
     712:	10 95       	com	r17
     714:	20 95       	com	r18
     716:	30 95       	com	r19
     718:	40 23       	and	r20, r16
     71a:	51 23       	and	r21, r17
     71c:	62 23       	and	r22, r18
     71e:	73 23       	and	r23, r19
     720:	01 96       	adiw	r24, 0x01	; 1
     722:	80 31       	cpi	r24, 0x10	; 16
     724:	91 05       	cpc	r25, r1
     726:	09 f0       	breq	.+2      	; 0x72a <__EEPROM_REGION_LENGTH__+0x32a>
     728:	bf cf       	rjmp	.-130    	; 0x6a8 <__EEPROM_REGION_LENGTH__+0x2a8>
     72a:	40 93 26 02 	sts	0x0226, r20	; 0x800226 <RegWrite+0x58>
     72e:	50 93 27 02 	sts	0x0227, r21	; 0x800227 <RegWrite+0x59>
     732:	60 93 28 02 	sts	0x0228, r22	; 0x800228 <RegWrite+0x5a>
     736:	70 93 29 02 	sts	0x0229, r23	; 0x800229 <RegWrite+0x5b>
     73a:	0b c0       	rjmp	.+22     	; 0x752 <__EEPROM_REGION_LENGTH__+0x352>
     73c:	f1 01       	movw	r30, r2
     73e:	80 81       	ld	r24, Z
     740:	91 81       	ldd	r25, Z+1	; 0x01
     742:	a2 81       	ldd	r26, Z+2	; 0x02
     744:	b3 81       	ldd	r27, Z+3	; 0x03
     746:	e9 81       	ldd	r30, Y+1	; 0x01
     748:	fa 81       	ldd	r31, Y+2	; 0x02
     74a:	80 83       	st	Z, r24
     74c:	91 83       	std	Z+1, r25	; 0x01
     74e:	a2 83       	std	Z+2, r26	; 0x02
     750:	b3 83       	std	Z+3, r27	; 0x03
     752:	2d 85       	ldd	r18, Y+13	; 0x0d
     754:	3e 85       	ldd	r19, Y+14	; 0x0e
     756:	2f 5f       	subi	r18, 0xFF	; 255
     758:	3f 4f       	sbci	r19, 0xFF	; 255
     75a:	3e 87       	std	Y+14, r19	; 0x0e
     75c:	2d 87       	std	Y+13, r18	; 0x0d
     75e:	34 e0       	ldi	r19, 0x04	; 4
     760:	23 0e       	add	r2, r19
     762:	31 1c       	adc	r3, r1
     764:	49 81       	ldd	r20, Y+1	; 0x01
     766:	5a 81       	ldd	r21, Y+2	; 0x02
     768:	4c 5f       	subi	r20, 0xFC	; 252
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	5a 83       	std	Y+2, r21	; 0x02
     76e:	49 83       	std	Y+1, r20	; 0x01
     770:	6d 85       	ldd	r22, Y+13	; 0x0d
     772:	7e 85       	ldd	r23, Y+14	; 0x0e
     774:	67 31       	cpi	r22, 0x17	; 23
     776:	71 05       	cpc	r23, r1
     778:	09 f0       	breq	.+2      	; 0x77c <__EEPROM_REGION_LENGTH__+0x37c>
     77a:	c7 ce       	rjmp	.-626    	; 0x50a <__EEPROM_REGION_LENGTH__+0x10a>
     77c:	62 96       	adiw	r28, 0x12	; 18
     77e:	0f b6       	in	r0, 0x3f	; 63
     780:	f8 94       	cli
     782:	de bf       	out	0x3e, r29	; 62
     784:	0f be       	out	0x3f, r0	; 63
     786:	cd bf       	out	0x3d, r28	; 61
     788:	df 91       	pop	r29
     78a:	cf 91       	pop	r28
     78c:	1f 91       	pop	r17
     78e:	0f 91       	pop	r16
     790:	ff 90       	pop	r15
     792:	ef 90       	pop	r14
     794:	df 90       	pop	r13
     796:	cf 90       	pop	r12
     798:	bf 90       	pop	r11
     79a:	af 90       	pop	r10
     79c:	9f 90       	pop	r9
     79e:	8f 90       	pop	r8
     7a0:	7f 90       	pop	r7
     7a2:	6f 90       	pop	r6
     7a4:	5f 90       	pop	r5
     7a6:	4f 90       	pop	r4
     7a8:	3f 90       	pop	r3
     7aa:	2f 90       	pop	r2
     7ac:	08 95       	ret

000007ae <_Z10LockDetectv>:
/////////////////////////// Subroutine: Fixfrequencyselect ////////////////////////////


bool LockDetect(){
	 bool locked=false;
  if(digitalRead(MOSI)>0){
     7ae:	8b e0       	ldi	r24, 0x0B	; 11
     7b0:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <digitalRead>
     7b4:	18 16       	cp	r1, r24
     7b6:	19 06       	cpc	r1, r25
     7b8:	14 f4       	brge	.+4      	; 0x7be <_Z10LockDetectv+0x10>
	   locked = true;
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	08 95       	ret
  }else{
	  
	  LeerRegistros(18);
     7be:	82 e1       	ldi	r24, 0x12	; 18
     7c0:	0e 94 7f 01 	call	0x2fe	; 0x2fe <_Z13LeerRegistrosh>
	  delay(1);
     7c4:	61 e0       	ldi	r22, 0x01	; 1
     7c6:	70 e0       	ldi	r23, 0x00	; 0
     7c8:	80 e0       	ldi	r24, 0x00	; 0
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <delay>
	 
	  //if ((digitalRead(12)== HIGH))   // select lock/unlock
	  if ((bitRead(RegRead[18],1)== HIGH)&&(bitRead(RegRead[18],2)== LOW))   // select lock/unlock
     7d0:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <RegRead+0x48>
     7d4:	81 ff       	sbrs	r24, 1
     7d6:	02 c0       	rjmp	.+4      	; 0x7dc <_Z10LockDetectv+0x2e>
     7d8:	82 ff       	sbrs	r24, 2
     7da:	ef cf       	rjmp	.-34     	; 0x7ba <_Z10LockDetectv+0xc>
	  {
		locked = true;
	  } else {
		locked = false;
     7dc:	80 e0       	ldi	r24, 0x00	; 0
	  }
}
  return locked;
}
     7de:	08 95       	ret

000007e0 <_Z16IniciarRegistrosv>:

void IniciarRegistros(){
     7e0:	2f 92       	push	r2
     7e2:	3f 92       	push	r3
     7e4:	4f 92       	push	r4
     7e6:	5f 92       	push	r5
     7e8:	6f 92       	push	r6
     7ea:	7f 92       	push	r7
     7ec:	8f 92       	push	r8
     7ee:	9f 92       	push	r9
     7f0:	af 92       	push	r10
     7f2:	bf 92       	push	r11
     7f4:	cf 92       	push	r12
     7f6:	df 92       	push	r13
     7f8:	ef 92       	push	r14
     7fa:	ff 92       	push	r15
     7fc:	0f 93       	push	r16
     7fe:	1f 93       	push	r17
     800:	cf 93       	push	r28
     802:	df 93       	push	r29
     804:	cd b7       	in	r28, 0x3d	; 61
     806:	de b7       	in	r29, 0x3e	; 62
     808:	c0 56       	subi	r28, 0x60	; 96
     80a:	d1 09       	sbc	r29, r1
     80c:	0f b6       	in	r0, 0x3f	; 63
     80e:	f8 94       	cli
     810:	de bf       	out	0x3e, r29	; 62
     812:	0f be       	out	0x3f, r0	; 63
     814:	cd bf       	out	0x3d, r28	; 61
     816:	de 01       	movw	r26, r28
     818:	11 96       	adiw	r26, 0x01	; 1
     81a:	8e ec       	ldi	r24, 0xCE	; 206
     81c:	28 2e       	mov	r2, r24
     81e:	81 e0       	ldi	r24, 0x01	; 1
     820:	38 2e       	mov	r3, r24
  uint32_t RegIni[24];      // ADF5610 Reg's
  
  for (int i = 0; i <= 24; i++) {
     822:	80 e0       	ldi	r24, 0x00	; 0
     824:	90 e0       	ldi	r25, 0x00	; 0
        break;
      case 5:
        RegIni[i] = 0x000;
        break;
      case 6:
        RegIni[i] = 0x2F4A;
     826:	0a e4       	ldi	r16, 0x4A	; 74
     828:	1f e2       	ldi	r17, 0x2F	; 47
     82a:	20 e0       	ldi	r18, 0x00	; 0
     82c:	30 e0       	ldi	r19, 0x00	; 0
        break;
      case 3:
        RegIni[i] = 0x31;
        break;
      case 4:
        RegIni[i] = 0xFD70A3;
     82e:	43 ea       	ldi	r20, 0xA3	; 163
     830:	c4 2e       	mov	r12, r20
     832:	40 e7       	ldi	r20, 0x70	; 112
     834:	d4 2e       	mov	r13, r20
     836:	4d ef       	ldi	r20, 0xFD	; 253
     838:	e4 2e       	mov	r14, r20
     83a:	f1 2c       	mov	r15, r1
        break;
      case 2:
        RegIni[i] = 0x1;
        break;
      case 3:
        RegIni[i] = 0x31;
     83c:	51 e3       	ldi	r21, 0x31	; 49
     83e:	85 2e       	mov	r8, r21
     840:	91 2c       	mov	r9, r1
     842:	a1 2c       	mov	r10, r1
     844:	b1 2c       	mov	r11, r1
    switch (i) {
      case 1:
        RegIni[i] = 0x2;
        break;
      case 2:
        RegIni[i] = 0x1;
     846:	41 2c       	mov	r4, r1
     848:	51 2c       	mov	r5, r1
     84a:	32 01       	movw	r6, r4
     84c:	43 94       	inc	r4

void IniciarRegistros(){
  uint32_t RegIni[24];      // ADF5610 Reg's
  
  for (int i = 0; i <= 24; i++) {
    switch (i) {
     84e:	fc 01       	movw	r30, r24
     850:	31 97       	sbiw	r30, 0x01	; 1
     852:	e6 31       	cpi	r30, 0x16	; 22
     854:	f1 05       	cpc	r31, r1
     856:	08 f0       	brcs	.+2      	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
     858:	7f c0       	rjmp	.+254    	; 0x958 <__stack+0x59>
     85a:	e8 5b       	subi	r30, 0xB8	; 184
     85c:	ff 4f       	sbci	r31, 0xFF	; 255
     85e:	0c 94 a9 0f 	jmp	0x1f52	; 0x1f52 <__tablejump2__>
      case 1:
        RegIni[i] = 0x2;
     862:	42 e0       	ldi	r20, 0x02	; 2
     864:	50 e0       	ldi	r21, 0x00	; 0
     866:	60 e0       	ldi	r22, 0x00	; 0
     868:	70 e0       	ldi	r23, 0x00	; 0
     86a:	4d 83       	std	Y+5, r20	; 0x05
     86c:	5e 83       	std	Y+6, r21	; 0x06
     86e:	6f 83       	std	Y+7, r22	; 0x07
     870:	78 87       	std	Y+8, r23	; 0x08
        break;
     872:	77 c0       	rjmp	.+238    	; 0x962 <__stack+0x63>
      case 2:
        RegIni[i] = 0x1;
     874:	49 86       	std	Y+9, r4	; 0x09
     876:	5a 86       	std	Y+10, r5	; 0x0a
     878:	6b 86       	std	Y+11, r6	; 0x0b
     87a:	7c 86       	std	Y+12, r7	; 0x0c
        break;
     87c:	72 c0       	rjmp	.+228    	; 0x962 <__stack+0x63>
      case 3:
        RegIni[i] = 0x31;
     87e:	8d 86       	std	Y+13, r8	; 0x0d
     880:	9e 86       	std	Y+14, r9	; 0x0e
     882:	af 86       	std	Y+15, r10	; 0x0f
     884:	b8 8a       	std	Y+16, r11	; 0x10
        break;
     886:	6d c0       	rjmp	.+218    	; 0x962 <__stack+0x63>
      case 4:
        RegIni[i] = 0xFD70A3;
     888:	c9 8a       	std	Y+17, r12	; 0x11
     88a:	da 8a       	std	Y+18, r13	; 0x12
     88c:	eb 8a       	std	Y+19, r14	; 0x13
     88e:	fc 8a       	std	Y+20, r15	; 0x14
        break;
     890:	68 c0       	rjmp	.+208    	; 0x962 <__stack+0x63>
      case 5:
        RegIni[i] = 0x000;
     892:	1d 8a       	std	Y+21, r1	; 0x15
     894:	1e 8a       	std	Y+22, r1	; 0x16
     896:	1f 8a       	std	Y+23, r1	; 0x17
     898:	18 8e       	std	Y+24, r1	; 0x18
        break;
     89a:	63 c0       	rjmp	.+198    	; 0x962 <__stack+0x63>
      case 6:
        RegIni[i] = 0x2F4A;
     89c:	09 8f       	std	Y+25, r16	; 0x19
     89e:	1a 8f       	std	Y+26, r17	; 0x1a
     8a0:	2b 8f       	std	Y+27, r18	; 0x1b
     8a2:	3c 8f       	std	Y+28, r19	; 0x1c
        break;
     8a4:	5e c0       	rjmp	.+188    	; 0x962 <__stack+0x63>
      case 7:
        RegIni[i] = 0x214D;
     8a6:	4d e4       	ldi	r20, 0x4D	; 77
     8a8:	51 e2       	ldi	r21, 0x21	; 33
     8aa:	60 e0       	ldi	r22, 0x00	; 0
     8ac:	70 e0       	ldi	r23, 0x00	; 0
     8ae:	4d 8f       	std	Y+29, r20	; 0x1d
     8b0:	5e 8f       	std	Y+30, r21	; 0x1e
     8b2:	6f 8f       	std	Y+31, r22	; 0x1f
     8b4:	78 a3       	std	Y+32, r23	; 0x20
        break;
     8b6:	55 c0       	rjmp	.+170    	; 0x962 <__stack+0x63>
      case 8:
        RegIni[i] = 0xC9BEFF;
     8b8:	4f ef       	ldi	r20, 0xFF	; 255
     8ba:	5e eb       	ldi	r21, 0xBE	; 190
     8bc:	69 ec       	ldi	r22, 0xC9	; 201
     8be:	70 e0       	ldi	r23, 0x00	; 0
     8c0:	49 a3       	std	Y+33, r20	; 0x21
     8c2:	5a a3       	std	Y+34, r21	; 0x22
     8c4:	6b a3       	std	Y+35, r22	; 0x23
     8c6:	7c a3       	std	Y+36, r23	; 0x24
        break;
     8c8:	4c c0       	rjmp	.+152    	; 0x962 <__stack+0x63>
        case 9:
        RegIni[i] = 0x3FFF;
     8ca:	4f ef       	ldi	r20, 0xFF	; 255
     8cc:	5f e3       	ldi	r21, 0x3F	; 63
     8ce:	60 e0       	ldi	r22, 0x00	; 0
     8d0:	70 e0       	ldi	r23, 0x00	; 0
     8d2:	4d a3       	std	Y+37, r20	; 0x25
     8d4:	5e a3       	std	Y+38, r21	; 0x26
     8d6:	6f a3       	std	Y+39, r22	; 0x27
     8d8:	78 a7       	std	Y+40, r23	; 0x28
        break;
     8da:	43 c0       	rjmp	.+134    	; 0x962 <__stack+0x63>
        case 10:
        RegIni[i] = 0x2047;
     8dc:	47 e4       	ldi	r20, 0x47	; 71
     8de:	50 e2       	ldi	r21, 0x20	; 32
     8e0:	60 e0       	ldi	r22, 0x00	; 0
     8e2:	70 e0       	ldi	r23, 0x00	; 0
     8e4:	49 a7       	std	Y+41, r20	; 0x29
     8e6:	5a a7       	std	Y+42, r21	; 0x2a
     8e8:	6b a7       	std	Y+43, r22	; 0x2b
     8ea:	7c a7       	std	Y+44, r23	; 0x2c
        break;
     8ec:	3a c0       	rjmp	.+116    	; 0x962 <__stack+0x63>
        case 11:
        RegIni[i] = 0xF8061;
     8ee:	41 e6       	ldi	r20, 0x61	; 97
     8f0:	50 e8       	ldi	r21, 0x80	; 128
     8f2:	6f e0       	ldi	r22, 0x0F	; 15
     8f4:	70 e0       	ldi	r23, 0x00	; 0
     8f6:	4d a7       	std	Y+45, r20	; 0x2d
     8f8:	5e a7       	std	Y+46, r21	; 0x2e
     8fa:	6f a7       	std	Y+47, r22	; 0x2f
     8fc:	78 ab       	std	Y+48, r23	; 0x30
        break;
     8fe:	31 c0       	rjmp	.+98     	; 0x962 <__stack+0x63>
        case 15:
        RegIni[i] = 0x081;
     900:	41 e8       	ldi	r20, 0x81	; 129
     902:	50 e0       	ldi	r21, 0x00	; 0
     904:	60 e0       	ldi	r22, 0x00	; 0
     906:	70 e0       	ldi	r23, 0x00	; 0
     908:	21 96       	adiw	r28, 0x01	; 1
     90a:	4c af       	std	Y+60, r20	; 0x3c
     90c:	5d af       	std	Y+61, r21	; 0x3d
     90e:	6e af       	std	Y+62, r22	; 0x3e
     910:	7f af       	std	Y+63, r23	; 0x3f
     912:	21 97       	sbiw	r28, 0x01	; 1
        break;
     914:	26 c0       	rjmp	.+76     	; 0x962 <__stack+0x63>
        case 20:
        RegIni[i] = RegIni[5];
     916:	4d 89       	ldd	r20, Y+21	; 0x15
     918:	5e 89       	ldd	r21, Y+22	; 0x16
     91a:	6f 89       	ldd	r22, Y+23	; 0x17
     91c:	78 8d       	ldd	r23, Y+24	; 0x18
     91e:	65 96       	adiw	r28, 0x15	; 21
     920:	4c af       	std	Y+60, r20	; 0x3c
     922:	5d af       	std	Y+61, r21	; 0x3d
     924:	6e af       	std	Y+62, r22	; 0x3e
     926:	7f af       	std	Y+63, r23	; 0x3f
     928:	65 97       	sbiw	r28, 0x15	; 21
         break;
     92a:	1b c0       	rjmp	.+54     	; 0x962 <__stack+0x63>
        case 21:
        RegIni[i] = 0x8E08;
     92c:	48 e0       	ldi	r20, 0x08	; 8
     92e:	5e e8       	ldi	r21, 0x8E	; 142
     930:	60 e0       	ldi	r22, 0x00	; 0
     932:	70 e0       	ldi	r23, 0x00	; 0
     934:	69 96       	adiw	r28, 0x19	; 25
     936:	4c af       	std	Y+60, r20	; 0x3c
     938:	5d af       	std	Y+61, r21	; 0x3d
     93a:	6e af       	std	Y+62, r22	; 0x3e
     93c:	7f af       	std	Y+63, r23	; 0x3f
     93e:	69 97       	sbiw	r28, 0x19	; 25
         break;
     940:	10 c0       	rjmp	.+32     	; 0x962 <__stack+0x63>
         case 22:
        RegIni[i] = 0x390;
     942:	40 e9       	ldi	r20, 0x90	; 144
     944:	53 e0       	ldi	r21, 0x03	; 3
     946:	60 e0       	ldi	r22, 0x00	; 0
     948:	70 e0       	ldi	r23, 0x00	; 0
     94a:	6d 96       	adiw	r28, 0x1d	; 29
     94c:	4c af       	std	Y+60, r20	; 0x3c
     94e:	5d af       	std	Y+61, r21	; 0x3d
     950:	6e af       	std	Y+62, r22	; 0x3e
     952:	7f af       	std	Y+63, r23	; 0x3f
     954:	6d 97       	sbiw	r28, 0x1d	; 29
         break;
     956:	05 c0       	rjmp	.+10     	; 0x962 <__stack+0x63>
        default:
        RegIni[i] = 0x0;
     958:	1d 92       	st	X+, r1
     95a:	1d 92       	st	X+, r1
     95c:	1d 92       	st	X+, r1
     95e:	1c 92       	st	X, r1
     960:	13 97       	sbiw	r26, 0x03	; 3
        break;
    }
    RegWrite[i]=RegIni[i];
     962:	4d 91       	ld	r20, X+
     964:	5d 91       	ld	r21, X+
     966:	6d 91       	ld	r22, X+
     968:	7d 91       	ld	r23, X+
     96a:	f1 01       	movw	r30, r2
     96c:	41 93       	st	Z+, r20
     96e:	51 93       	st	Z+, r21
     970:	61 93       	st	Z+, r22
     972:	71 93       	st	Z+, r23
     974:	1f 01       	movw	r2, r30
}

void IniciarRegistros(){
  uint32_t RegIni[24];      // ADF5610 Reg's
  
  for (int i = 0; i <= 24; i++) {
     976:	01 96       	adiw	r24, 0x01	; 1
     978:	89 31       	cpi	r24, 0x19	; 25
     97a:	91 05       	cpc	r25, r1
     97c:	09 f0       	breq	.+2      	; 0x980 <__stack+0x81>
     97e:	67 cf       	rjmp	.-306    	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
    }
    RegWrite[i]=RegIni[i];
    
     //Serial.println(RegWrite[i],HEX);
  }
}
     980:	c0 5a       	subi	r28, 0xA0	; 160
     982:	df 4f       	sbci	r29, 0xFF	; 255
     984:	0f b6       	in	r0, 0x3f	; 63
     986:	f8 94       	cli
     988:	de bf       	out	0x3e, r29	; 62
     98a:	0f be       	out	0x3f, r0	; 63
     98c:	cd bf       	out	0x3d, r28	; 61
     98e:	df 91       	pop	r29
     990:	cf 91       	pop	r28
     992:	1f 91       	pop	r17
     994:	0f 91       	pop	r16
     996:	ff 90       	pop	r15
     998:	ef 90       	pop	r14
     99a:	df 90       	pop	r13
     99c:	cf 90       	pop	r12
     99e:	bf 90       	pop	r11
     9a0:	af 90       	pop	r10
     9a2:	9f 90       	pop	r9
     9a4:	8f 90       	pop	r8
     9a6:	7f 90       	pop	r7
     9a8:	6f 90       	pop	r6
     9aa:	5f 90       	pop	r5
     9ac:	4f 90       	pop	r4
     9ae:	3f 90       	pop	r3
     9b0:	2f 90       	pop	r2
     9b2:	08 95       	ret

000009b4 <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     9b4:	26 e0       	ldi	r18, 0x06	; 6
     9b6:	40 e0       	ldi	r20, 0x00	; 0
     9b8:	52 ec       	ldi	r21, 0xC2	; 194
     9ba:	61 e0       	ldi	r22, 0x01	; 1
     9bc:	70 e0       	ldi	r23, 0x00	; 0
     9be:	82 e9       	ldi	r24, 0x92	; 146
     9c0:	92 e0       	ldi	r25, 0x02	; 2
     9c2:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <_ZN14HardwareSerial5beginEmh>
//////////////////////////////////////////////////////////////////////////////
void setup() {

  // ******************Screen mask static text*****************
  Serial.begin(115200);
  Serial.setTimeout(1000);
     9c6:	48 ee       	ldi	r20, 0xE8	; 232
     9c8:	53 e0       	ldi	r21, 0x03	; 3
     9ca:	60 e0       	ldi	r22, 0x00	; 0
     9cc:	70 e0       	ldi	r23, 0x00	; 0
     9ce:	82 e9       	ldi	r24, 0x92	; 146
     9d0:	92 e0       	ldi	r25, 0x02	; 2
     9d2:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <_ZN6Stream10setTimeoutEm>
  pinMode(12, INPUT_PULLUP); 
     9d6:	62 e0       	ldi	r22, 0x02	; 2
     9d8:	8c e0       	ldi	r24, 0x0C	; 12
     9da:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <pinMode>
  pinMode(SEN, OUTPUT);
     9de:	61 e0       	ldi	r22, 0x01	; 1
     9e0:	8a e0       	ldi	r24, 0x0A	; 10
     9e2:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <pinMode>
  IniciarRegistros();
     9e6:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <_Z16IniciarRegistrosv>
  #ifdef Legacy

  #else
    digitalWrite(SEN, HIGH);
     9ea:	61 e0       	ldi	r22, 0x01	; 1
     9ec:	8a e0       	ldi	r24, 0x0A	; 10
     9ee:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <digitalWrite>
    SPI.begin();
     9f2:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <_ZN8SPIClass5beginEv>
  #endif
  delay(1);
     9f6:	61 e0       	ldi	r22, 0x01	; 1
     9f8:	70 e0       	ldi	r23, 0x00	; 0
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	0c 94 17 0e 	jmp	0x1c2e	; 0x1c2e <delay>

00000a02 <_Z9Secuenciaj>:
    
     //Serial.println(RegWrite[i],HEX);
  }
}

void Secuencia(unsigned int k){
     a02:	cf 93       	push	r28
     a04:	df 93       	push	r29
     a06:	ec 01       	movw	r28, r24
  for (int i=k; i<=19;i++){
     a08:	c4 31       	cpi	r28, 0x14	; 20
     a0a:	d1 05       	cpc	r29, r1
     a0c:	9c f4       	brge	.+38     	; 0xa34 <_Z9Secuenciaj+0x32>
    if (i==5){
     a0e:	c5 30       	cpi	r28, 0x05	; 5
     a10:	d1 05       	cpc	r29, r1
     a12:	59 f4       	brne	.+22     	; 0xa2a <_Z9Secuenciaj+0x28>
      for(int j=22;j>19;j--){
        EscribirRegistros(j);
     a14:	86 e1       	ldi	r24, 0x16	; 22
     a16:	0e 94 25 01 	call	0x24a	; 0x24a <_Z17EscribirRegistrosh>
     a1a:	85 e1       	ldi	r24, 0x15	; 21
     a1c:	0e 94 25 01 	call	0x24a	; 0x24a <_Z17EscribirRegistrosh>
     a20:	84 e1       	ldi	r24, 0x14	; 20
     a22:	0e 94 25 01 	call	0x24a	; 0x24a <_Z17EscribirRegistrosh>
       
      }
	   EscribirRegistros(5);
     a26:	85 e0       	ldi	r24, 0x05	; 5
     a28:	01 c0       	rjmp	.+2      	; 0xa2c <_Z9Secuenciaj+0x2a>
      
    }else if((i!=4)|(i!=3)){
      EscribirRegistros(i);
     a2a:	8c 2f       	mov	r24, r28
     a2c:	0e 94 25 01 	call	0x24a	; 0x24a <_Z17EscribirRegistrosh>
     //Serial.println(RegWrite[i],HEX);
  }
}

void Secuencia(unsigned int k){
  for (int i=k; i<=19;i++){
     a30:	21 96       	adiw	r28, 0x01	; 1
     a32:	ea cf       	rjmp	.-44     	; 0xa08 <_Z9Secuenciaj+0x6>
      
    }else if((i!=4)|(i!=3)){
      EscribirRegistros(i);
    }
  }
  EscribirRegistros(3);
     a34:	83 e0       	ldi	r24, 0x03	; 3
     a36:	0e 94 25 01 	call	0x24a	; 0x24a <_Z17EscribirRegistrosh>
  EscribirRegistros(4);
     a3a:	84 e0       	ldi	r24, 0x04	; 4

}
     a3c:	df 91       	pop	r29
     a3e:	cf 91       	pop	r28
    }else if((i!=4)|(i!=3)){
      EscribirRegistros(i);
    }
  }
  EscribirRegistros(3);
  EscribirRegistros(4);
     a40:	0c 94 25 01 	jmp	0x24a	; 0x24a <_Z17EscribirRegistrosh>

00000a44 <_Z14SecuenciaCortav>:

}
void SecuenciaCorta(void){
  EscribirRegistros(8);
     a44:	88 e0       	ldi	r24, 0x08	; 8
     a46:	0e 94 25 01 	call	0x24a	; 0x24a <_Z17EscribirRegistrosh>
   for(int j=22;j>19;j--){
        EscribirRegistros(j);
     a4a:	86 e1       	ldi	r24, 0x16	; 22
     a4c:	0e 94 25 01 	call	0x24a	; 0x24a <_Z17EscribirRegistrosh>
     a50:	85 e1       	ldi	r24, 0x15	; 21
     a52:	0e 94 25 01 	call	0x24a	; 0x24a <_Z17EscribirRegistrosh>
     a56:	84 e1       	ldi	r24, 0x14	; 20
     a58:	0e 94 25 01 	call	0x24a	; 0x24a <_Z17EscribirRegistrosh>
        
      }
	  EscribirRegistros(5);
     a5c:	85 e0       	ldi	r24, 0x05	; 5
     a5e:	0e 94 25 01 	call	0x24a	; 0x24a <_Z17EscribirRegistrosh>
  EscribirRegistros(3);
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	0e 94 25 01 	call	0x24a	; 0x24a <_Z17EscribirRegistrosh>
  EscribirRegistros(4);
     a68:	84 e0       	ldi	r24, 0x04	; 4
     a6a:	0c 94 25 01 	jmp	0x24a	; 0x24a <_Z17EscribirRegistrosh>

00000a6e <loop>:

////////////////////////////////////////////////////////////////////////
//                      MAIN PROGRAM LOOP                        //
////////////////////////////////////////////////////////////////////////
void loop()
{
     a6e:	1f 93       	push	r17
     a70:	cf 93       	push	r28
     a72:	df 93       	push	r29
	
  double step=1.0/2048.0;
  double upper_limit=3601.0,lower_limit=3599;
  freq=3600;
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	a1 e6       	ldi	r26, 0x61	; 97
     a7a:	b5 e4       	ldi	r27, 0x45	; 69
     a7c:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <freq>
     a80:	90 93 8f 02 	sts	0x028F, r25	; 0x80028f <freq+0x1>
     a84:	a0 93 90 02 	sts	0x0290, r26	; 0x800290 <freq+0x2>
     a88:	b0 93 91 02 	sts	0x0291, r27	; 0x800291 <freq+0x3>
  bool dir=true;
 // IniciarRegistros();
  Secuencia(0);
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	0e 94 01 05 	call	0xa02	; 0xa02 <_Z9Secuenciaj>
  int counter=0;
     a94:	c0 e0       	ldi	r28, 0x00	; 0
     a96:	d0 e0       	ldi	r29, 0x00	; 0
{
	
  double step=1.0/2048.0;
  double upper_limit=3601.0,lower_limit=3599;
  freq=3600;
  bool dir=true;
     a98:	11 e0       	ldi	r17, 0x01	; 1
  Secuencia(0);
  int counter=0;
  
 while ((lower_limit<=freq<=upper_limit)&&(counter<100)){
  
  if(LockDetect()){
     a9a:	0e 94 d7 03 	call	0x7ae	; 0x7ae <_Z10LockDetectv>
     a9e:	88 23       	and	r24, r24
     aa0:	09 f4       	brne	.+2      	; 0xaa4 <loop+0x36>
     aa2:	3f c0       	rjmp	.+126    	; 0xb22 <loop+0xb4>
		  
		counter=0;
		
    	Serial.print("Locked at : ");
     aa4:	60 e0       	ldi	r22, 0x00	; 0
     aa6:	71 e0       	ldi	r23, 0x01	; 1
     aa8:	82 e9       	ldi	r24, 0x92	; 146
     aaa:	92 e0       	ldi	r25, 0x02	; 2
     aac:	0e 94 38 0c 	call	0x1870	; 0x1870 <_ZN5Print5printEPKc>
    	Serial.print(freq);
     ab0:	40 91 8e 02 	lds	r20, 0x028E	; 0x80028e <freq>
     ab4:	50 91 8f 02 	lds	r21, 0x028F	; 0x80028f <freq+0x1>
     ab8:	60 91 90 02 	lds	r22, 0x0290	; 0x800290 <freq+0x2>
     abc:	70 91 91 02 	lds	r23, 0x0291	; 0x800291 <freq+0x3>
     ac0:	22 e0       	ldi	r18, 0x02	; 2
     ac2:	30 e0       	ldi	r19, 0x00	; 0
     ac4:	82 e9       	ldi	r24, 0x92	; 146
     ac6:	92 e0       	ldi	r25, 0x02	; 2
     ac8:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <_ZN5Print5printEdi>
    	Serial.println(" MHz");
     acc:	6d e0       	ldi	r22, 0x0D	; 13
     ace:	71 e0       	ldi	r23, 0x01	; 1
     ad0:	82 e9       	ldi	r24, 0x92	; 146
     ad2:	92 e0       	ldi	r25, 0x02	; 2
     ad4:	0e 94 45 0c 	call	0x188a	; 0x188a <_ZN5Print7printlnEPKc>
		if (dir)
     ad8:	11 23       	and	r17, r17
     ada:	91 f0       	breq	.+36     	; 0xb00 <loop+0x92>
		{
			if (freq>(upper_limit-step)){
     adc:	2e ef       	ldi	r18, 0xFE	; 254
     ade:	3f e0       	ldi	r19, 0x0F	; 15
     ae0:	41 e6       	ldi	r20, 0x61	; 97
     ae2:	55 e4       	ldi	r21, 0x45	; 69
     ae4:	60 91 8e 02 	lds	r22, 0x028E	; 0x80028e <freq>
     ae8:	70 91 8f 02 	lds	r23, 0x028F	; 0x80028f <freq+0x1>
     aec:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <freq+0x2>
     af0:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <freq+0x3>
     af4:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <__gesf2>
     af8:	18 16       	cp	r1, r24
     afa:	0c f4       	brge	.+2      	; 0xafe <loop+0x90>
     afc:	7d c0       	rjmp	.+250    	; 0xbf8 <loop+0x18a>
     afe:	5e c0       	rjmp	.+188    	; 0xbbc <loop+0x14e>
			}
			
		}
		else
		{
			if(freq<(lower_limit+step)){
     b00:	22 e0       	ldi	r18, 0x02	; 2
     b02:	30 ef       	ldi	r19, 0xF0	; 240
     b04:	40 e6       	ldi	r20, 0x60	; 96
     b06:	55 e4       	ldi	r21, 0x45	; 69
     b08:	60 91 8e 02 	lds	r22, 0x028E	; 0x80028e <freq>
     b0c:	70 91 8f 02 	lds	r23, 0x028F	; 0x80028f <freq+0x1>
     b10:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <freq+0x2>
     b14:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <freq+0x3>
     b18:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__cmpsf2>
     b1c:	87 fd       	sbrc	r24, 7
     b1e:	4e c0       	rjmp	.+156    	; 0xbbc <loop+0x14e>
     b20:	6b c0       	rjmp	.+214    	; 0xbf8 <loop+0x18a>
     SettingFreq(freq);
     SecuenciaCorta();
   
    
  }else{
    counter++;
     b22:	21 96       	adiw	r28, 0x01	; 1
    Serial.println("**************************");
     b24:	62 e1       	ldi	r22, 0x12	; 18
     b26:	71 e0       	ldi	r23, 0x01	; 1
     b28:	82 e9       	ldi	r24, 0x92	; 146
     b2a:	92 e0       	ldi	r25, 0x02	; 2
     b2c:	0e 94 45 0c 	call	0x188a	; 0x188a <_ZN5Print7printlnEPKc>
    Serial.println(" ");
     b30:	6c e3       	ldi	r22, 0x3C	; 60
     b32:	71 e0       	ldi	r23, 0x01	; 1
     b34:	82 e9       	ldi	r24, 0x92	; 146
     b36:	92 e0       	ldi	r25, 0x02	; 2
     b38:	0e 94 45 0c 	call	0x188a	; 0x188a <_ZN5Print7printlnEPKc>
    Serial.print("Not Locked at:  ");
     b3c:	6d e2       	ldi	r22, 0x2D	; 45
     b3e:	71 e0       	ldi	r23, 0x01	; 1
     b40:	82 e9       	ldi	r24, 0x92	; 146
     b42:	92 e0       	ldi	r25, 0x02	; 2
     b44:	0e 94 38 0c 	call	0x1870	; 0x1870 <_ZN5Print5printEPKc>
    Serial.println(freq);
     b48:	40 91 8e 02 	lds	r20, 0x028E	; 0x80028e <freq>
     b4c:	50 91 8f 02 	lds	r21, 0x028F	; 0x80028f <freq+0x1>
     b50:	60 91 90 02 	lds	r22, 0x0290	; 0x800290 <freq+0x2>
     b54:	70 91 91 02 	lds	r23, 0x0291	; 0x800291 <freq+0x3>
     b58:	22 e0       	ldi	r18, 0x02	; 2
     b5a:	30 e0       	ldi	r19, 0x00	; 0
     b5c:	82 e9       	ldi	r24, 0x92	; 146
     b5e:	92 e0       	ldi	r25, 0x02	; 2
     b60:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <_ZN5Print7printlnEdi>
    Serial.println(" MHz");
     b64:	6d e0       	ldi	r22, 0x0D	; 13
     b66:	71 e0       	ldi	r23, 0x01	; 1
     b68:	82 e9       	ldi	r24, 0x92	; 146
     b6a:	92 e0       	ldi	r25, 0x02	; 2
     b6c:	0e 94 45 0c 	call	0x188a	; 0x188a <_ZN5Print7printlnEPKc>
    Serial.println(" ");
     b70:	6c e3       	ldi	r22, 0x3C	; 60
     b72:	71 e0       	ldi	r23, 0x01	; 1
     b74:	82 e9       	ldi	r24, 0x92	; 146
     b76:	92 e0       	ldi	r25, 0x02	; 2
     b78:	0e 94 45 0c 	call	0x188a	; 0x188a <_ZN5Print7printlnEPKc>
    Serial.println("**************************");
     b7c:	62 e1       	ldi	r22, 0x12	; 18
     b7e:	71 e0       	ldi	r23, 0x01	; 1
     b80:	82 e9       	ldi	r24, 0x92	; 146
     b82:	92 e0       	ldi	r25, 0x02	; 2
     b84:	0e 94 45 0c 	call	0x188a	; 0x188a <_ZN5Print7printlnEPKc>



  //Initialisation sequence

  ConvertFreq();
     b88:	0e 94 ed 01 	call	0x3da	; 0x3da <_Z11ConvertFreqv>
    Serial.println(freq);
    Serial.println(" MHz");
    Serial.println(" ");
    Serial.println("**************************");
    SettingFreq(freq);
    Secuencia(0);
     b8c:	80 e0       	ldi	r24, 0x00	; 0
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	0e 94 01 05 	call	0xa02	; 0xa02 <_Z9Secuenciaj>
    delay(1);
     b94:	61 e0       	ldi	r22, 0x01	; 1
     b96:	70 e0       	ldi	r23, 0x00	; 0
     b98:	80 e0       	ldi	r24, 0x00	; 0
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <delay>
  }
 
 
 
  delay(1);
     ba0:	61 e0       	ldi	r22, 0x01	; 1
     ba2:	70 e0       	ldi	r23, 0x00	; 0
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <delay>
  bool dir=true;
 // IniciarRegistros();
  Secuencia(0);
  int counter=0;
  
 while ((lower_limit<=freq<=upper_limit)&&(counter<100)){
     bac:	c4 36       	cpi	r28, 0x64	; 100
     bae:	d1 05       	cpc	r29, r1
     bb0:	09 f0       	breq	.+2      	; 0xbb4 <loop+0x146>
     bb2:	73 cf       	rjmp	.-282    	; 0xa9a <loop+0x2c>
 
 
  delay(1);
 }

}
     bb4:	df 91       	pop	r29
     bb6:	cf 91       	pop	r28
     bb8:	1f 91       	pop	r17
     bba:	08 95       	ret
			}
		}
			
  
   
     freq=dir?freq+step:freq-step;
     bbc:	20 e0       	ldi	r18, 0x00	; 0
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	40 e0       	ldi	r20, 0x00	; 0
     bc2:	5a e3       	ldi	r21, 0x3A	; 58
     bc4:	60 91 8e 02 	lds	r22, 0x028E	; 0x80028e <freq>
     bc8:	70 91 8f 02 	lds	r23, 0x028F	; 0x80028f <freq+0x1>
     bcc:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <freq+0x2>
     bd0:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <freq+0x3>
     bd4:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__addsf3>
     bd8:	11 e0       	ldi	r17, 0x01	; 1
     bda:	60 93 8e 02 	sts	0x028E, r22	; 0x80028e <freq>
     bde:	70 93 8f 02 	sts	0x028F, r23	; 0x80028f <freq+0x1>
     be2:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <freq+0x2>
     be6:	90 93 91 02 	sts	0x0291, r25	; 0x800291 <freq+0x3>



  //Initialisation sequence

  ConvertFreq();
     bea:	0e 94 ed 01 	call	0x3da	; 0x3da <_Z11ConvertFreqv>
  
   
     freq=dir?freq+step:freq-step;
     //Serial.println(freq);
     SettingFreq(freq);
     SecuenciaCorta();
     bee:	0e 94 22 05 	call	0xa44	; 0xa44 <_Z14SecuenciaCortav>
  
 while ((lower_limit<=freq<=upper_limit)&&(counter<100)){
  
  if(LockDetect()){
		  
		counter=0;
     bf2:	c0 e0       	ldi	r28, 0x00	; 0
     bf4:	d0 e0       	ldi	r29, 0x00	; 0
     bf6:	d4 cf       	rjmp	.-88     	; 0xba0 <loop+0x132>
			}
		}
			
  
   
     freq=dir?freq+step:freq-step;
     bf8:	20 e0       	ldi	r18, 0x00	; 0
     bfa:	30 e0       	ldi	r19, 0x00	; 0
     bfc:	40 e0       	ldi	r20, 0x00	; 0
     bfe:	5a e3       	ldi	r21, 0x3A	; 58
     c00:	60 91 8e 02 	lds	r22, 0x028E	; 0x80028e <freq>
     c04:	70 91 8f 02 	lds	r23, 0x028F	; 0x80028f <freq+0x1>
     c08:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <freq+0x2>
     c0c:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <freq+0x3>
     c10:	0e 94 0c 06 	call	0xc18	; 0xc18 <__subsf3>
     c14:	10 e0       	ldi	r17, 0x00	; 0
     c16:	e1 cf       	rjmp	.-62     	; 0xbda <loop+0x16c>

00000c18 <__subsf3>:
     c18:	50 58       	subi	r21, 0x80	; 128

00000c1a <__addsf3>:
     c1a:	bb 27       	eor	r27, r27
     c1c:	aa 27       	eor	r26, r26
     c1e:	0e 94 24 06 	call	0xc48	; 0xc48 <__addsf3x>
     c22:	0c 94 a1 07 	jmp	0xf42	; 0xf42 <__fp_round>
     c26:	0e 94 93 07 	call	0xf26	; 0xf26 <__fp_pscA>
     c2a:	38 f0       	brcs	.+14     	; 0xc3a <__addsf3+0x20>
     c2c:	0e 94 9a 07 	call	0xf34	; 0xf34 <__fp_pscB>
     c30:	20 f0       	brcs	.+8      	; 0xc3a <__addsf3+0x20>
     c32:	39 f4       	brne	.+14     	; 0xc42 <__addsf3+0x28>
     c34:	9f 3f       	cpi	r25, 0xFF	; 255
     c36:	19 f4       	brne	.+6      	; 0xc3e <__addsf3+0x24>
     c38:	26 f4       	brtc	.+8      	; 0xc42 <__addsf3+0x28>
     c3a:	0c 94 90 07 	jmp	0xf20	; 0xf20 <__fp_nan>
     c3e:	0e f4       	brtc	.+2      	; 0xc42 <__addsf3+0x28>
     c40:	e0 95       	com	r30
     c42:	e7 fb       	bst	r30, 7
     c44:	0c 94 61 07 	jmp	0xec2	; 0xec2 <__fp_inf>

00000c48 <__addsf3x>:
     c48:	e9 2f       	mov	r30, r25
     c4a:	0e 94 b2 07 	call	0xf64	; 0xf64 <__fp_split3>
     c4e:	58 f3       	brcs	.-42     	; 0xc26 <__addsf3+0xc>
     c50:	ba 17       	cp	r27, r26
     c52:	62 07       	cpc	r22, r18
     c54:	73 07       	cpc	r23, r19
     c56:	84 07       	cpc	r24, r20
     c58:	95 07       	cpc	r25, r21
     c5a:	20 f0       	brcs	.+8      	; 0xc64 <__addsf3x+0x1c>
     c5c:	79 f4       	brne	.+30     	; 0xc7c <__addsf3x+0x34>
     c5e:	a6 f5       	brtc	.+104    	; 0xcc8 <__addsf3x+0x80>
     c60:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <__fp_zero>
     c64:	0e f4       	brtc	.+2      	; 0xc68 <__addsf3x+0x20>
     c66:	e0 95       	com	r30
     c68:	0b 2e       	mov	r0, r27
     c6a:	ba 2f       	mov	r27, r26
     c6c:	a0 2d       	mov	r26, r0
     c6e:	0b 01       	movw	r0, r22
     c70:	b9 01       	movw	r22, r18
     c72:	90 01       	movw	r18, r0
     c74:	0c 01       	movw	r0, r24
     c76:	ca 01       	movw	r24, r20
     c78:	a0 01       	movw	r20, r0
     c7a:	11 24       	eor	r1, r1
     c7c:	ff 27       	eor	r31, r31
     c7e:	59 1b       	sub	r21, r25
     c80:	99 f0       	breq	.+38     	; 0xca8 <__addsf3x+0x60>
     c82:	59 3f       	cpi	r21, 0xF9	; 249
     c84:	50 f4       	brcc	.+20     	; 0xc9a <__addsf3x+0x52>
     c86:	50 3e       	cpi	r21, 0xE0	; 224
     c88:	68 f1       	brcs	.+90     	; 0xce4 <__addsf3x+0x9c>
     c8a:	1a 16       	cp	r1, r26
     c8c:	f0 40       	sbci	r31, 0x00	; 0
     c8e:	a2 2f       	mov	r26, r18
     c90:	23 2f       	mov	r18, r19
     c92:	34 2f       	mov	r19, r20
     c94:	44 27       	eor	r20, r20
     c96:	58 5f       	subi	r21, 0xF8	; 248
     c98:	f3 cf       	rjmp	.-26     	; 0xc80 <__addsf3x+0x38>
     c9a:	46 95       	lsr	r20
     c9c:	37 95       	ror	r19
     c9e:	27 95       	ror	r18
     ca0:	a7 95       	ror	r26
     ca2:	f0 40       	sbci	r31, 0x00	; 0
     ca4:	53 95       	inc	r21
     ca6:	c9 f7       	brne	.-14     	; 0xc9a <__addsf3x+0x52>
     ca8:	7e f4       	brtc	.+30     	; 0xcc8 <__addsf3x+0x80>
     caa:	1f 16       	cp	r1, r31
     cac:	ba 0b       	sbc	r27, r26
     cae:	62 0b       	sbc	r22, r18
     cb0:	73 0b       	sbc	r23, r19
     cb2:	84 0b       	sbc	r24, r20
     cb4:	ba f0       	brmi	.+46     	; 0xce4 <__addsf3x+0x9c>
     cb6:	91 50       	subi	r25, 0x01	; 1
     cb8:	a1 f0       	breq	.+40     	; 0xce2 <__addsf3x+0x9a>
     cba:	ff 0f       	add	r31, r31
     cbc:	bb 1f       	adc	r27, r27
     cbe:	66 1f       	adc	r22, r22
     cc0:	77 1f       	adc	r23, r23
     cc2:	88 1f       	adc	r24, r24
     cc4:	c2 f7       	brpl	.-16     	; 0xcb6 <__addsf3x+0x6e>
     cc6:	0e c0       	rjmp	.+28     	; 0xce4 <__addsf3x+0x9c>
     cc8:	ba 0f       	add	r27, r26
     cca:	62 1f       	adc	r22, r18
     ccc:	73 1f       	adc	r23, r19
     cce:	84 1f       	adc	r24, r20
     cd0:	48 f4       	brcc	.+18     	; 0xce4 <__addsf3x+0x9c>
     cd2:	87 95       	ror	r24
     cd4:	77 95       	ror	r23
     cd6:	67 95       	ror	r22
     cd8:	b7 95       	ror	r27
     cda:	f7 95       	ror	r31
     cdc:	9e 3f       	cpi	r25, 0xFE	; 254
     cde:	08 f0       	brcs	.+2      	; 0xce2 <__addsf3x+0x9a>
     ce0:	b0 cf       	rjmp	.-160    	; 0xc42 <__addsf3+0x28>
     ce2:	93 95       	inc	r25
     ce4:	88 0f       	add	r24, r24
     ce6:	08 f0       	brcs	.+2      	; 0xcea <__addsf3x+0xa2>
     ce8:	99 27       	eor	r25, r25
     cea:	ee 0f       	add	r30, r30
     cec:	97 95       	ror	r25
     cee:	87 95       	ror	r24
     cf0:	08 95       	ret

00000cf2 <__cmpsf2>:
     cf2:	0e 94 3d 07 	call	0xe7a	; 0xe7a <__fp_cmp>
     cf6:	08 f4       	brcc	.+2      	; 0xcfa <__cmpsf2+0x8>
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	08 95       	ret

00000cfc <__divsf3>:
     cfc:	0e 94 92 06 	call	0xd24	; 0xd24 <__divsf3x>
     d00:	0c 94 a1 07 	jmp	0xf42	; 0xf42 <__fp_round>
     d04:	0e 94 9a 07 	call	0xf34	; 0xf34 <__fp_pscB>
     d08:	58 f0       	brcs	.+22     	; 0xd20 <__divsf3+0x24>
     d0a:	0e 94 93 07 	call	0xf26	; 0xf26 <__fp_pscA>
     d0e:	40 f0       	brcs	.+16     	; 0xd20 <__divsf3+0x24>
     d10:	29 f4       	brne	.+10     	; 0xd1c <__divsf3+0x20>
     d12:	5f 3f       	cpi	r21, 0xFF	; 255
     d14:	29 f0       	breq	.+10     	; 0xd20 <__divsf3+0x24>
     d16:	0c 94 61 07 	jmp	0xec2	; 0xec2 <__fp_inf>
     d1a:	51 11       	cpse	r21, r1
     d1c:	0c 94 ed 07 	jmp	0xfda	; 0xfda <__fp_szero>
     d20:	0c 94 90 07 	jmp	0xf20	; 0xf20 <__fp_nan>

00000d24 <__divsf3x>:
     d24:	0e 94 b2 07 	call	0xf64	; 0xf64 <__fp_split3>
     d28:	68 f3       	brcs	.-38     	; 0xd04 <__divsf3+0x8>

00000d2a <__divsf3_pse>:
     d2a:	99 23       	and	r25, r25
     d2c:	b1 f3       	breq	.-20     	; 0xd1a <__divsf3+0x1e>
     d2e:	55 23       	and	r21, r21
     d30:	91 f3       	breq	.-28     	; 0xd16 <__divsf3+0x1a>
     d32:	95 1b       	sub	r25, r21
     d34:	55 0b       	sbc	r21, r21
     d36:	bb 27       	eor	r27, r27
     d38:	aa 27       	eor	r26, r26
     d3a:	62 17       	cp	r22, r18
     d3c:	73 07       	cpc	r23, r19
     d3e:	84 07       	cpc	r24, r20
     d40:	38 f0       	brcs	.+14     	; 0xd50 <__divsf3_pse+0x26>
     d42:	9f 5f       	subi	r25, 0xFF	; 255
     d44:	5f 4f       	sbci	r21, 0xFF	; 255
     d46:	22 0f       	add	r18, r18
     d48:	33 1f       	adc	r19, r19
     d4a:	44 1f       	adc	r20, r20
     d4c:	aa 1f       	adc	r26, r26
     d4e:	a9 f3       	breq	.-22     	; 0xd3a <__divsf3_pse+0x10>
     d50:	35 d0       	rcall	.+106    	; 0xdbc <__divsf3_pse+0x92>
     d52:	0e 2e       	mov	r0, r30
     d54:	3a f0       	brmi	.+14     	; 0xd64 <__divsf3_pse+0x3a>
     d56:	e0 e8       	ldi	r30, 0x80	; 128
     d58:	32 d0       	rcall	.+100    	; 0xdbe <__divsf3_pse+0x94>
     d5a:	91 50       	subi	r25, 0x01	; 1
     d5c:	50 40       	sbci	r21, 0x00	; 0
     d5e:	e6 95       	lsr	r30
     d60:	00 1c       	adc	r0, r0
     d62:	ca f7       	brpl	.-14     	; 0xd56 <__divsf3_pse+0x2c>
     d64:	2b d0       	rcall	.+86     	; 0xdbc <__divsf3_pse+0x92>
     d66:	fe 2f       	mov	r31, r30
     d68:	29 d0       	rcall	.+82     	; 0xdbc <__divsf3_pse+0x92>
     d6a:	66 0f       	add	r22, r22
     d6c:	77 1f       	adc	r23, r23
     d6e:	88 1f       	adc	r24, r24
     d70:	bb 1f       	adc	r27, r27
     d72:	26 17       	cp	r18, r22
     d74:	37 07       	cpc	r19, r23
     d76:	48 07       	cpc	r20, r24
     d78:	ab 07       	cpc	r26, r27
     d7a:	b0 e8       	ldi	r27, 0x80	; 128
     d7c:	09 f0       	breq	.+2      	; 0xd80 <__divsf3_pse+0x56>
     d7e:	bb 0b       	sbc	r27, r27
     d80:	80 2d       	mov	r24, r0
     d82:	bf 01       	movw	r22, r30
     d84:	ff 27       	eor	r31, r31
     d86:	93 58       	subi	r25, 0x83	; 131
     d88:	5f 4f       	sbci	r21, 0xFF	; 255
     d8a:	3a f0       	brmi	.+14     	; 0xd9a <__divsf3_pse+0x70>
     d8c:	9e 3f       	cpi	r25, 0xFE	; 254
     d8e:	51 05       	cpc	r21, r1
     d90:	78 f0       	brcs	.+30     	; 0xdb0 <__divsf3_pse+0x86>
     d92:	0c 94 61 07 	jmp	0xec2	; 0xec2 <__fp_inf>
     d96:	0c 94 ed 07 	jmp	0xfda	; 0xfda <__fp_szero>
     d9a:	5f 3f       	cpi	r21, 0xFF	; 255
     d9c:	e4 f3       	brlt	.-8      	; 0xd96 <__divsf3_pse+0x6c>
     d9e:	98 3e       	cpi	r25, 0xE8	; 232
     da0:	d4 f3       	brlt	.-12     	; 0xd96 <__divsf3_pse+0x6c>
     da2:	86 95       	lsr	r24
     da4:	77 95       	ror	r23
     da6:	67 95       	ror	r22
     da8:	b7 95       	ror	r27
     daa:	f7 95       	ror	r31
     dac:	9f 5f       	subi	r25, 0xFF	; 255
     dae:	c9 f7       	brne	.-14     	; 0xda2 <__divsf3_pse+0x78>
     db0:	88 0f       	add	r24, r24
     db2:	91 1d       	adc	r25, r1
     db4:	96 95       	lsr	r25
     db6:	87 95       	ror	r24
     db8:	97 f9       	bld	r25, 7
     dba:	08 95       	ret
     dbc:	e1 e0       	ldi	r30, 0x01	; 1
     dbe:	66 0f       	add	r22, r22
     dc0:	77 1f       	adc	r23, r23
     dc2:	88 1f       	adc	r24, r24
     dc4:	bb 1f       	adc	r27, r27
     dc6:	62 17       	cp	r22, r18
     dc8:	73 07       	cpc	r23, r19
     dca:	84 07       	cpc	r24, r20
     dcc:	ba 07       	cpc	r27, r26
     dce:	20 f0       	brcs	.+8      	; 0xdd8 <__divsf3_pse+0xae>
     dd0:	62 1b       	sub	r22, r18
     dd2:	73 0b       	sbc	r23, r19
     dd4:	84 0b       	sbc	r24, r20
     dd6:	ba 0b       	sbc	r27, r26
     dd8:	ee 1f       	adc	r30, r30
     dda:	88 f7       	brcc	.-30     	; 0xdbe <__divsf3_pse+0x94>
     ddc:	e0 95       	com	r30
     dde:	08 95       	ret

00000de0 <__fixsfsi>:
     de0:	0e 94 f7 06 	call	0xdee	; 0xdee <__fixunssfsi>
     de4:	68 94       	set
     de6:	b1 11       	cpse	r27, r1
     de8:	0c 94 ed 07 	jmp	0xfda	; 0xfda <__fp_szero>
     dec:	08 95       	ret

00000dee <__fixunssfsi>:
     dee:	0e 94 ba 07 	call	0xf74	; 0xf74 <__fp_splitA>
     df2:	88 f0       	brcs	.+34     	; 0xe16 <__fixunssfsi+0x28>
     df4:	9f 57       	subi	r25, 0x7F	; 127
     df6:	98 f0       	brcs	.+38     	; 0xe1e <__fixunssfsi+0x30>
     df8:	b9 2f       	mov	r27, r25
     dfa:	99 27       	eor	r25, r25
     dfc:	b7 51       	subi	r27, 0x17	; 23
     dfe:	b0 f0       	brcs	.+44     	; 0xe2c <__fixunssfsi+0x3e>
     e00:	e1 f0       	breq	.+56     	; 0xe3a <__fixunssfsi+0x4c>
     e02:	66 0f       	add	r22, r22
     e04:	77 1f       	adc	r23, r23
     e06:	88 1f       	adc	r24, r24
     e08:	99 1f       	adc	r25, r25
     e0a:	1a f0       	brmi	.+6      	; 0xe12 <__fixunssfsi+0x24>
     e0c:	ba 95       	dec	r27
     e0e:	c9 f7       	brne	.-14     	; 0xe02 <__fixunssfsi+0x14>
     e10:	14 c0       	rjmp	.+40     	; 0xe3a <__fixunssfsi+0x4c>
     e12:	b1 30       	cpi	r27, 0x01	; 1
     e14:	91 f0       	breq	.+36     	; 0xe3a <__fixunssfsi+0x4c>
     e16:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <__fp_zero>
     e1a:	b1 e0       	ldi	r27, 0x01	; 1
     e1c:	08 95       	ret
     e1e:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <__fp_zero>
     e22:	67 2f       	mov	r22, r23
     e24:	78 2f       	mov	r23, r24
     e26:	88 27       	eor	r24, r24
     e28:	b8 5f       	subi	r27, 0xF8	; 248
     e2a:	39 f0       	breq	.+14     	; 0xe3a <__fixunssfsi+0x4c>
     e2c:	b9 3f       	cpi	r27, 0xF9	; 249
     e2e:	cc f3       	brlt	.-14     	; 0xe22 <__fixunssfsi+0x34>
     e30:	86 95       	lsr	r24
     e32:	77 95       	ror	r23
     e34:	67 95       	ror	r22
     e36:	b3 95       	inc	r27
     e38:	d9 f7       	brne	.-10     	; 0xe30 <__fixunssfsi+0x42>
     e3a:	3e f4       	brtc	.+14     	; 0xe4a <__fixunssfsi+0x5c>
     e3c:	90 95       	com	r25
     e3e:	80 95       	com	r24
     e40:	70 95       	com	r23
     e42:	61 95       	neg	r22
     e44:	7f 4f       	sbci	r23, 0xFF	; 255
     e46:	8f 4f       	sbci	r24, 0xFF	; 255
     e48:	9f 4f       	sbci	r25, 0xFF	; 255
     e4a:	08 95       	ret

00000e4c <floor>:
     e4c:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <__fp_trunc>
     e50:	90 f0       	brcs	.+36     	; 0xe76 <floor+0x2a>
     e52:	9f 37       	cpi	r25, 0x7F	; 127
     e54:	48 f4       	brcc	.+18     	; 0xe68 <floor+0x1c>
     e56:	91 11       	cpse	r25, r1
     e58:	16 f0       	brts	.+4      	; 0xe5e <floor+0x12>
     e5a:	0c 94 ed 07 	jmp	0xfda	; 0xfda <__fp_szero>
     e5e:	60 e0       	ldi	r22, 0x00	; 0
     e60:	70 e0       	ldi	r23, 0x00	; 0
     e62:	80 e8       	ldi	r24, 0x80	; 128
     e64:	9f eb       	ldi	r25, 0xBF	; 191
     e66:	08 95       	ret
     e68:	26 f4       	brtc	.+8      	; 0xe72 <floor+0x26>
     e6a:	1b 16       	cp	r1, r27
     e6c:	61 1d       	adc	r22, r1
     e6e:	71 1d       	adc	r23, r1
     e70:	81 1d       	adc	r24, r1
     e72:	0c 94 67 07 	jmp	0xece	; 0xece <__fp_mintl>
     e76:	0c 94 82 07 	jmp	0xf04	; 0xf04 <__fp_mpack>

00000e7a <__fp_cmp>:
     e7a:	99 0f       	add	r25, r25
     e7c:	00 08       	sbc	r0, r0
     e7e:	55 0f       	add	r21, r21
     e80:	aa 0b       	sbc	r26, r26
     e82:	e0 e8       	ldi	r30, 0x80	; 128
     e84:	fe ef       	ldi	r31, 0xFE	; 254
     e86:	16 16       	cp	r1, r22
     e88:	17 06       	cpc	r1, r23
     e8a:	e8 07       	cpc	r30, r24
     e8c:	f9 07       	cpc	r31, r25
     e8e:	c0 f0       	brcs	.+48     	; 0xec0 <__fp_cmp+0x46>
     e90:	12 16       	cp	r1, r18
     e92:	13 06       	cpc	r1, r19
     e94:	e4 07       	cpc	r30, r20
     e96:	f5 07       	cpc	r31, r21
     e98:	98 f0       	brcs	.+38     	; 0xec0 <__fp_cmp+0x46>
     e9a:	62 1b       	sub	r22, r18
     e9c:	73 0b       	sbc	r23, r19
     e9e:	84 0b       	sbc	r24, r20
     ea0:	95 0b       	sbc	r25, r21
     ea2:	39 f4       	brne	.+14     	; 0xeb2 <__fp_cmp+0x38>
     ea4:	0a 26       	eor	r0, r26
     ea6:	61 f0       	breq	.+24     	; 0xec0 <__fp_cmp+0x46>
     ea8:	23 2b       	or	r18, r19
     eaa:	24 2b       	or	r18, r20
     eac:	25 2b       	or	r18, r21
     eae:	21 f4       	brne	.+8      	; 0xeb8 <__fp_cmp+0x3e>
     eb0:	08 95       	ret
     eb2:	0a 26       	eor	r0, r26
     eb4:	09 f4       	brne	.+2      	; 0xeb8 <__fp_cmp+0x3e>
     eb6:	a1 40       	sbci	r26, 0x01	; 1
     eb8:	a6 95       	lsr	r26
     eba:	8f ef       	ldi	r24, 0xFF	; 255
     ebc:	81 1d       	adc	r24, r1
     ebe:	81 1d       	adc	r24, r1
     ec0:	08 95       	ret

00000ec2 <__fp_inf>:
     ec2:	97 f9       	bld	r25, 7
     ec4:	9f 67       	ori	r25, 0x7F	; 127
     ec6:	80 e8       	ldi	r24, 0x80	; 128
     ec8:	70 e0       	ldi	r23, 0x00	; 0
     eca:	60 e0       	ldi	r22, 0x00	; 0
     ecc:	08 95       	ret

00000ece <__fp_mintl>:
     ece:	88 23       	and	r24, r24
     ed0:	71 f4       	brne	.+28     	; 0xeee <__fp_mintl+0x20>
     ed2:	77 23       	and	r23, r23
     ed4:	21 f0       	breq	.+8      	; 0xede <__fp_mintl+0x10>
     ed6:	98 50       	subi	r25, 0x08	; 8
     ed8:	87 2b       	or	r24, r23
     eda:	76 2f       	mov	r23, r22
     edc:	07 c0       	rjmp	.+14     	; 0xeec <__fp_mintl+0x1e>
     ede:	66 23       	and	r22, r22
     ee0:	11 f4       	brne	.+4      	; 0xee6 <__fp_mintl+0x18>
     ee2:	99 27       	eor	r25, r25
     ee4:	0d c0       	rjmp	.+26     	; 0xf00 <__fp_mintl+0x32>
     ee6:	90 51       	subi	r25, 0x10	; 16
     ee8:	86 2b       	or	r24, r22
     eea:	70 e0       	ldi	r23, 0x00	; 0
     eec:	60 e0       	ldi	r22, 0x00	; 0
     eee:	2a f0       	brmi	.+10     	; 0xefa <__fp_mintl+0x2c>
     ef0:	9a 95       	dec	r25
     ef2:	66 0f       	add	r22, r22
     ef4:	77 1f       	adc	r23, r23
     ef6:	88 1f       	adc	r24, r24
     ef8:	da f7       	brpl	.-10     	; 0xef0 <__fp_mintl+0x22>
     efa:	88 0f       	add	r24, r24
     efc:	96 95       	lsr	r25
     efe:	87 95       	ror	r24
     f00:	97 f9       	bld	r25, 7
     f02:	08 95       	ret

00000f04 <__fp_mpack>:
     f04:	9f 3f       	cpi	r25, 0xFF	; 255
     f06:	31 f0       	breq	.+12     	; 0xf14 <__fp_mpack_finite+0xc>

00000f08 <__fp_mpack_finite>:
     f08:	91 50       	subi	r25, 0x01	; 1
     f0a:	20 f4       	brcc	.+8      	; 0xf14 <__fp_mpack_finite+0xc>
     f0c:	87 95       	ror	r24
     f0e:	77 95       	ror	r23
     f10:	67 95       	ror	r22
     f12:	b7 95       	ror	r27
     f14:	88 0f       	add	r24, r24
     f16:	91 1d       	adc	r25, r1
     f18:	96 95       	lsr	r25
     f1a:	87 95       	ror	r24
     f1c:	97 f9       	bld	r25, 7
     f1e:	08 95       	ret

00000f20 <__fp_nan>:
     f20:	9f ef       	ldi	r25, 0xFF	; 255
     f22:	80 ec       	ldi	r24, 0xC0	; 192
     f24:	08 95       	ret

00000f26 <__fp_pscA>:
     f26:	00 24       	eor	r0, r0
     f28:	0a 94       	dec	r0
     f2a:	16 16       	cp	r1, r22
     f2c:	17 06       	cpc	r1, r23
     f2e:	18 06       	cpc	r1, r24
     f30:	09 06       	cpc	r0, r25
     f32:	08 95       	ret

00000f34 <__fp_pscB>:
     f34:	00 24       	eor	r0, r0
     f36:	0a 94       	dec	r0
     f38:	12 16       	cp	r1, r18
     f3a:	13 06       	cpc	r1, r19
     f3c:	14 06       	cpc	r1, r20
     f3e:	05 06       	cpc	r0, r21
     f40:	08 95       	ret

00000f42 <__fp_round>:
     f42:	09 2e       	mov	r0, r25
     f44:	03 94       	inc	r0
     f46:	00 0c       	add	r0, r0
     f48:	11 f4       	brne	.+4      	; 0xf4e <__fp_round+0xc>
     f4a:	88 23       	and	r24, r24
     f4c:	52 f0       	brmi	.+20     	; 0xf62 <__fp_round+0x20>
     f4e:	bb 0f       	add	r27, r27
     f50:	40 f4       	brcc	.+16     	; 0xf62 <__fp_round+0x20>
     f52:	bf 2b       	or	r27, r31
     f54:	11 f4       	brne	.+4      	; 0xf5a <__fp_round+0x18>
     f56:	60 ff       	sbrs	r22, 0
     f58:	04 c0       	rjmp	.+8      	; 0xf62 <__fp_round+0x20>
     f5a:	6f 5f       	subi	r22, 0xFF	; 255
     f5c:	7f 4f       	sbci	r23, 0xFF	; 255
     f5e:	8f 4f       	sbci	r24, 0xFF	; 255
     f60:	9f 4f       	sbci	r25, 0xFF	; 255
     f62:	08 95       	ret

00000f64 <__fp_split3>:
     f64:	57 fd       	sbrc	r21, 7
     f66:	90 58       	subi	r25, 0x80	; 128
     f68:	44 0f       	add	r20, r20
     f6a:	55 1f       	adc	r21, r21
     f6c:	59 f0       	breq	.+22     	; 0xf84 <__fp_splitA+0x10>
     f6e:	5f 3f       	cpi	r21, 0xFF	; 255
     f70:	71 f0       	breq	.+28     	; 0xf8e <__fp_splitA+0x1a>
     f72:	47 95       	ror	r20

00000f74 <__fp_splitA>:
     f74:	88 0f       	add	r24, r24
     f76:	97 fb       	bst	r25, 7
     f78:	99 1f       	adc	r25, r25
     f7a:	61 f0       	breq	.+24     	; 0xf94 <__fp_splitA+0x20>
     f7c:	9f 3f       	cpi	r25, 0xFF	; 255
     f7e:	79 f0       	breq	.+30     	; 0xf9e <__fp_splitA+0x2a>
     f80:	87 95       	ror	r24
     f82:	08 95       	ret
     f84:	12 16       	cp	r1, r18
     f86:	13 06       	cpc	r1, r19
     f88:	14 06       	cpc	r1, r20
     f8a:	55 1f       	adc	r21, r21
     f8c:	f2 cf       	rjmp	.-28     	; 0xf72 <__fp_split3+0xe>
     f8e:	46 95       	lsr	r20
     f90:	f1 df       	rcall	.-30     	; 0xf74 <__fp_splitA>
     f92:	08 c0       	rjmp	.+16     	; 0xfa4 <__fp_splitA+0x30>
     f94:	16 16       	cp	r1, r22
     f96:	17 06       	cpc	r1, r23
     f98:	18 06       	cpc	r1, r24
     f9a:	99 1f       	adc	r25, r25
     f9c:	f1 cf       	rjmp	.-30     	; 0xf80 <__fp_splitA+0xc>
     f9e:	86 95       	lsr	r24
     fa0:	71 05       	cpc	r23, r1
     fa2:	61 05       	cpc	r22, r1
     fa4:	08 94       	sec
     fa6:	08 95       	ret

00000fa8 <__fp_trunc>:
     fa8:	0e 94 ba 07 	call	0xf74	; 0xf74 <__fp_splitA>
     fac:	a0 f0       	brcs	.+40     	; 0xfd6 <__fp_trunc+0x2e>
     fae:	be e7       	ldi	r27, 0x7E	; 126
     fb0:	b9 17       	cp	r27, r25
     fb2:	88 f4       	brcc	.+34     	; 0xfd6 <__fp_trunc+0x2e>
     fb4:	bb 27       	eor	r27, r27
     fb6:	9f 38       	cpi	r25, 0x8F	; 143
     fb8:	60 f4       	brcc	.+24     	; 0xfd2 <__fp_trunc+0x2a>
     fba:	16 16       	cp	r1, r22
     fbc:	b1 1d       	adc	r27, r1
     fbe:	67 2f       	mov	r22, r23
     fc0:	78 2f       	mov	r23, r24
     fc2:	88 27       	eor	r24, r24
     fc4:	98 5f       	subi	r25, 0xF8	; 248
     fc6:	f7 cf       	rjmp	.-18     	; 0xfb6 <__fp_trunc+0xe>
     fc8:	86 95       	lsr	r24
     fca:	77 95       	ror	r23
     fcc:	67 95       	ror	r22
     fce:	b1 1d       	adc	r27, r1
     fd0:	93 95       	inc	r25
     fd2:	96 39       	cpi	r25, 0x96	; 150
     fd4:	c8 f3       	brcs	.-14     	; 0xfc8 <__fp_trunc+0x20>
     fd6:	08 95       	ret

00000fd8 <__fp_zero>:
     fd8:	e8 94       	clt

00000fda <__fp_szero>:
     fda:	bb 27       	eor	r27, r27
     fdc:	66 27       	eor	r22, r22
     fde:	77 27       	eor	r23, r23
     fe0:	cb 01       	movw	r24, r22
     fe2:	97 f9       	bld	r25, 7
     fe4:	08 95       	ret

00000fe6 <__gesf2>:
     fe6:	0e 94 3d 07 	call	0xe7a	; 0xe7a <__fp_cmp>
     fea:	08 f4       	brcc	.+2      	; 0xfee <__gesf2+0x8>
     fec:	8f ef       	ldi	r24, 0xFF	; 255
     fee:	08 95       	ret
     ff0:	16 f0       	brts	.+4      	; 0xff6 <__gesf2+0x10>
     ff2:	0c 94 82 07 	jmp	0xf04	; 0xf04 <__fp_mpack>
     ff6:	0c 94 90 07 	jmp	0xf20	; 0xf20 <__fp_nan>
     ffa:	68 94       	set
     ffc:	0c 94 61 07 	jmp	0xec2	; 0xec2 <__fp_inf>

00001000 <log>:
    1000:	0e 94 ba 07 	call	0xf74	; 0xf74 <__fp_splitA>
    1004:	a8 f3       	brcs	.-22     	; 0xff0 <__gesf2+0xa>
    1006:	99 23       	and	r25, r25
    1008:	c1 f3       	breq	.-16     	; 0xffa <__gesf2+0x14>
    100a:	ae f3       	brts	.-22     	; 0xff6 <__gesf2+0x10>
    100c:	df 93       	push	r29
    100e:	cf 93       	push	r28
    1010:	1f 93       	push	r17
    1012:	0f 93       	push	r16
    1014:	ff 92       	push	r15
    1016:	c9 2f       	mov	r28, r25
    1018:	dd 27       	eor	r29, r29
    101a:	88 23       	and	r24, r24
    101c:	2a f0       	brmi	.+10     	; 0x1028 <log+0x28>
    101e:	21 97       	sbiw	r28, 0x01	; 1
    1020:	66 0f       	add	r22, r22
    1022:	77 1f       	adc	r23, r23
    1024:	88 1f       	adc	r24, r24
    1026:	da f7       	brpl	.-10     	; 0x101e <log+0x1e>
    1028:	20 e0       	ldi	r18, 0x00	; 0
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	40 e8       	ldi	r20, 0x80	; 128
    102e:	5f eb       	ldi	r21, 0xBF	; 191
    1030:	9f e3       	ldi	r25, 0x3F	; 63
    1032:	88 39       	cpi	r24, 0x98	; 152
    1034:	20 f0       	brcs	.+8      	; 0x103e <log+0x3e>
    1036:	80 3e       	cpi	r24, 0xE0	; 224
    1038:	38 f0       	brcs	.+14     	; 0x1048 <log+0x48>
    103a:	21 96       	adiw	r28, 0x01	; 1
    103c:	8f 77       	andi	r24, 0x7F	; 127
    103e:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__addsf3>
    1042:	ec eb       	ldi	r30, 0xBC	; 188
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	04 c0       	rjmp	.+8      	; 0x1050 <log+0x50>
    1048:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__addsf3>
    104c:	e9 ee       	ldi	r30, 0xE9	; 233
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <__fp_powser>
    1054:	8b 01       	movw	r16, r22
    1056:	be 01       	movw	r22, r28
    1058:	ec 01       	movw	r28, r24
    105a:	fb 2e       	mov	r15, r27
    105c:	6f 57       	subi	r22, 0x7F	; 127
    105e:	71 09       	sbc	r23, r1
    1060:	75 95       	asr	r23
    1062:	77 1f       	adc	r23, r23
    1064:	88 0b       	sbc	r24, r24
    1066:	99 0b       	sbc	r25, r25
    1068:	0e 94 41 09 	call	0x1282	; 0x1282 <__floatsisf>
    106c:	28 e1       	ldi	r18, 0x18	; 24
    106e:	32 e7       	ldi	r19, 0x72	; 114
    1070:	41 e3       	ldi	r20, 0x31	; 49
    1072:	5f e3       	ldi	r21, 0x3F	; 63
    1074:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__mulsf3x>
    1078:	af 2d       	mov	r26, r15
    107a:	98 01       	movw	r18, r16
    107c:	ae 01       	movw	r20, r28
    107e:	ff 90       	pop	r15
    1080:	0f 91       	pop	r16
    1082:	1f 91       	pop	r17
    1084:	cf 91       	pop	r28
    1086:	df 91       	pop	r29
    1088:	0e 94 24 06 	call	0xc48	; 0xc48 <__addsf3x>
    108c:	0c 94 a1 07 	jmp	0xf42	; 0xf42 <__fp_round>

00001090 <__mulsf3>:
    1090:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__mulsf3x>
    1094:	0c 94 a1 07 	jmp	0xf42	; 0xf42 <__fp_round>
    1098:	0e 94 93 07 	call	0xf26	; 0xf26 <__fp_pscA>
    109c:	38 f0       	brcs	.+14     	; 0x10ac <__mulsf3+0x1c>
    109e:	0e 94 9a 07 	call	0xf34	; 0xf34 <__fp_pscB>
    10a2:	20 f0       	brcs	.+8      	; 0x10ac <__mulsf3+0x1c>
    10a4:	95 23       	and	r25, r21
    10a6:	11 f0       	breq	.+4      	; 0x10ac <__mulsf3+0x1c>
    10a8:	0c 94 61 07 	jmp	0xec2	; 0xec2 <__fp_inf>
    10ac:	0c 94 90 07 	jmp	0xf20	; 0xf20 <__fp_nan>
    10b0:	11 24       	eor	r1, r1
    10b2:	0c 94 ed 07 	jmp	0xfda	; 0xfda <__fp_szero>

000010b6 <__mulsf3x>:
    10b6:	0e 94 b2 07 	call	0xf64	; 0xf64 <__fp_split3>
    10ba:	70 f3       	brcs	.-36     	; 0x1098 <__mulsf3+0x8>

000010bc <__mulsf3_pse>:
    10bc:	95 9f       	mul	r25, r21
    10be:	c1 f3       	breq	.-16     	; 0x10b0 <__mulsf3+0x20>
    10c0:	95 0f       	add	r25, r21
    10c2:	50 e0       	ldi	r21, 0x00	; 0
    10c4:	55 1f       	adc	r21, r21
    10c6:	62 9f       	mul	r22, r18
    10c8:	f0 01       	movw	r30, r0
    10ca:	72 9f       	mul	r23, r18
    10cc:	bb 27       	eor	r27, r27
    10ce:	f0 0d       	add	r31, r0
    10d0:	b1 1d       	adc	r27, r1
    10d2:	63 9f       	mul	r22, r19
    10d4:	aa 27       	eor	r26, r26
    10d6:	f0 0d       	add	r31, r0
    10d8:	b1 1d       	adc	r27, r1
    10da:	aa 1f       	adc	r26, r26
    10dc:	64 9f       	mul	r22, r20
    10de:	66 27       	eor	r22, r22
    10e0:	b0 0d       	add	r27, r0
    10e2:	a1 1d       	adc	r26, r1
    10e4:	66 1f       	adc	r22, r22
    10e6:	82 9f       	mul	r24, r18
    10e8:	22 27       	eor	r18, r18
    10ea:	b0 0d       	add	r27, r0
    10ec:	a1 1d       	adc	r26, r1
    10ee:	62 1f       	adc	r22, r18
    10f0:	73 9f       	mul	r23, r19
    10f2:	b0 0d       	add	r27, r0
    10f4:	a1 1d       	adc	r26, r1
    10f6:	62 1f       	adc	r22, r18
    10f8:	83 9f       	mul	r24, r19
    10fa:	a0 0d       	add	r26, r0
    10fc:	61 1d       	adc	r22, r1
    10fe:	22 1f       	adc	r18, r18
    1100:	74 9f       	mul	r23, r20
    1102:	33 27       	eor	r19, r19
    1104:	a0 0d       	add	r26, r0
    1106:	61 1d       	adc	r22, r1
    1108:	23 1f       	adc	r18, r19
    110a:	84 9f       	mul	r24, r20
    110c:	60 0d       	add	r22, r0
    110e:	21 1d       	adc	r18, r1
    1110:	82 2f       	mov	r24, r18
    1112:	76 2f       	mov	r23, r22
    1114:	6a 2f       	mov	r22, r26
    1116:	11 24       	eor	r1, r1
    1118:	9f 57       	subi	r25, 0x7F	; 127
    111a:	50 40       	sbci	r21, 0x00	; 0
    111c:	9a f0       	brmi	.+38     	; 0x1144 <__mulsf3_pse+0x88>
    111e:	f1 f0       	breq	.+60     	; 0x115c <__mulsf3_pse+0xa0>
    1120:	88 23       	and	r24, r24
    1122:	4a f0       	brmi	.+18     	; 0x1136 <__mulsf3_pse+0x7a>
    1124:	ee 0f       	add	r30, r30
    1126:	ff 1f       	adc	r31, r31
    1128:	bb 1f       	adc	r27, r27
    112a:	66 1f       	adc	r22, r22
    112c:	77 1f       	adc	r23, r23
    112e:	88 1f       	adc	r24, r24
    1130:	91 50       	subi	r25, 0x01	; 1
    1132:	50 40       	sbci	r21, 0x00	; 0
    1134:	a9 f7       	brne	.-22     	; 0x1120 <__mulsf3_pse+0x64>
    1136:	9e 3f       	cpi	r25, 0xFE	; 254
    1138:	51 05       	cpc	r21, r1
    113a:	80 f0       	brcs	.+32     	; 0x115c <__mulsf3_pse+0xa0>
    113c:	0c 94 61 07 	jmp	0xec2	; 0xec2 <__fp_inf>
    1140:	0c 94 ed 07 	jmp	0xfda	; 0xfda <__fp_szero>
    1144:	5f 3f       	cpi	r21, 0xFF	; 255
    1146:	e4 f3       	brlt	.-8      	; 0x1140 <__mulsf3_pse+0x84>
    1148:	98 3e       	cpi	r25, 0xE8	; 232
    114a:	d4 f3       	brlt	.-12     	; 0x1140 <__mulsf3_pse+0x84>
    114c:	86 95       	lsr	r24
    114e:	77 95       	ror	r23
    1150:	67 95       	ror	r22
    1152:	b7 95       	ror	r27
    1154:	f7 95       	ror	r31
    1156:	e7 95       	ror	r30
    1158:	9f 5f       	subi	r25, 0xFF	; 255
    115a:	c1 f7       	brne	.-16     	; 0x114c <__mulsf3_pse+0x90>
    115c:	fe 2b       	or	r31, r30
    115e:	88 0f       	add	r24, r24
    1160:	91 1d       	adc	r25, r1
    1162:	96 95       	lsr	r25
    1164:	87 95       	ror	r24
    1166:	97 f9       	bld	r25, 7
    1168:	08 95       	ret

0000116a <pow>:
    116a:	fa 01       	movw	r30, r20
    116c:	ee 0f       	add	r30, r30
    116e:	ff 1f       	adc	r31, r31
    1170:	30 96       	adiw	r30, 0x00	; 0
    1172:	21 05       	cpc	r18, r1
    1174:	31 05       	cpc	r19, r1
    1176:	a1 f1       	breq	.+104    	; 0x11e0 <pow+0x76>
    1178:	61 15       	cp	r22, r1
    117a:	71 05       	cpc	r23, r1
    117c:	61 f4       	brne	.+24     	; 0x1196 <pow+0x2c>
    117e:	80 38       	cpi	r24, 0x80	; 128
    1180:	bf e3       	ldi	r27, 0x3F	; 63
    1182:	9b 07       	cpc	r25, r27
    1184:	49 f1       	breq	.+82     	; 0x11d8 <pow+0x6e>
    1186:	68 94       	set
    1188:	90 38       	cpi	r25, 0x80	; 128
    118a:	81 05       	cpc	r24, r1
    118c:	61 f0       	breq	.+24     	; 0x11a6 <pow+0x3c>
    118e:	80 38       	cpi	r24, 0x80	; 128
    1190:	bf ef       	ldi	r27, 0xFF	; 255
    1192:	9b 07       	cpc	r25, r27
    1194:	41 f0       	breq	.+16     	; 0x11a6 <pow+0x3c>
    1196:	99 23       	and	r25, r25
    1198:	4a f5       	brpl	.+82     	; 0x11ec <pow+0x82>
    119a:	ff 3f       	cpi	r31, 0xFF	; 255
    119c:	e1 05       	cpc	r30, r1
    119e:	31 05       	cpc	r19, r1
    11a0:	21 05       	cpc	r18, r1
    11a2:	19 f1       	breq	.+70     	; 0x11ea <pow+0x80>
    11a4:	e8 94       	clt
    11a6:	08 94       	sec
    11a8:	e7 95       	ror	r30
    11aa:	d9 01       	movw	r26, r18
    11ac:	aa 23       	and	r26, r26
    11ae:	29 f4       	brne	.+10     	; 0x11ba <pow+0x50>
    11b0:	ab 2f       	mov	r26, r27
    11b2:	be 2f       	mov	r27, r30
    11b4:	f8 5f       	subi	r31, 0xF8	; 248
    11b6:	d0 f3       	brcs	.-12     	; 0x11ac <pow+0x42>
    11b8:	10 c0       	rjmp	.+32     	; 0x11da <pow+0x70>
    11ba:	ff 5f       	subi	r31, 0xFF	; 255
    11bc:	70 f4       	brcc	.+28     	; 0x11da <pow+0x70>
    11be:	a6 95       	lsr	r26
    11c0:	e0 f7       	brcc	.-8      	; 0x11ba <pow+0x50>
    11c2:	f7 39       	cpi	r31, 0x97	; 151
    11c4:	50 f0       	brcs	.+20     	; 0x11da <pow+0x70>
    11c6:	19 f0       	breq	.+6      	; 0x11ce <pow+0x64>
    11c8:	ff 3a       	cpi	r31, 0xAF	; 175
    11ca:	38 f4       	brcc	.+14     	; 0x11da <pow+0x70>
    11cc:	9f 77       	andi	r25, 0x7F	; 127
    11ce:	9f 93       	push	r25
    11d0:	0d d0       	rcall	.+26     	; 0x11ec <pow+0x82>
    11d2:	0f 90       	pop	r0
    11d4:	07 fc       	sbrc	r0, 7
    11d6:	90 58       	subi	r25, 0x80	; 128
    11d8:	08 95       	ret
    11da:	46 f0       	brts	.+16     	; 0x11ec <pow+0x82>
    11dc:	0c 94 90 07 	jmp	0xf20	; 0xf20 <__fp_nan>
    11e0:	60 e0       	ldi	r22, 0x00	; 0
    11e2:	70 e0       	ldi	r23, 0x00	; 0
    11e4:	80 e8       	ldi	r24, 0x80	; 128
    11e6:	9f e3       	ldi	r25, 0x3F	; 63
    11e8:	08 95       	ret
    11ea:	4f e7       	ldi	r20, 0x7F	; 127
    11ec:	9f 77       	andi	r25, 0x7F	; 127
    11ee:	5f 93       	push	r21
    11f0:	4f 93       	push	r20
    11f2:	3f 93       	push	r19
    11f4:	2f 93       	push	r18
    11f6:	0e 94 00 08 	call	0x1000	; 0x1000 <log>
    11fa:	2f 91       	pop	r18
    11fc:	3f 91       	pop	r19
    11fe:	4f 91       	pop	r20
    1200:	5f 91       	pop	r21
    1202:	0e 94 48 08 	call	0x1090	; 0x1090 <__mulsf3>
    1206:	0c 94 0d 09 	jmp	0x121a	; 0x121a <exp>
    120a:	29 f4       	brne	.+10     	; 0x1216 <pow+0xac>
    120c:	16 f0       	brts	.+4      	; 0x1212 <pow+0xa8>
    120e:	0c 94 61 07 	jmp	0xec2	; 0xec2 <__fp_inf>
    1212:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <__fp_zero>
    1216:	0c 94 90 07 	jmp	0xf20	; 0xf20 <__fp_nan>

0000121a <exp>:
    121a:	0e 94 ba 07 	call	0xf74	; 0xf74 <__fp_splitA>
    121e:	a8 f3       	brcs	.-22     	; 0x120a <pow+0xa0>
    1220:	96 38       	cpi	r25, 0x86	; 134
    1222:	a0 f7       	brcc	.-24     	; 0x120c <pow+0xa2>
    1224:	07 f8       	bld	r0, 7
    1226:	0f 92       	push	r0
    1228:	e8 94       	clt
    122a:	2b e3       	ldi	r18, 0x3B	; 59
    122c:	3a ea       	ldi	r19, 0xAA	; 170
    122e:	48 eb       	ldi	r20, 0xB8	; 184
    1230:	5f e7       	ldi	r21, 0x7F	; 127
    1232:	0e 94 5e 08 	call	0x10bc	; 0x10bc <__mulsf3_pse>
    1236:	0f 92       	push	r0
    1238:	0f 92       	push	r0
    123a:	0f 92       	push	r0
    123c:	4d b7       	in	r20, 0x3d	; 61
    123e:	5e b7       	in	r21, 0x3e	; 62
    1240:	0f 92       	push	r0
    1242:	0e 94 e5 09 	call	0x13ca	; 0x13ca <modf>
    1246:	e6 e1       	ldi	r30, 0x16	; 22
    1248:	f1 e0       	ldi	r31, 0x01	; 1
    124a:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <__fp_powser>
    124e:	4f 91       	pop	r20
    1250:	5f 91       	pop	r21
    1252:	ef 91       	pop	r30
    1254:	ff 91       	pop	r31
    1256:	e5 95       	asr	r30
    1258:	ee 1f       	adc	r30, r30
    125a:	ff 1f       	adc	r31, r31
    125c:	49 f0       	breq	.+18     	; 0x1270 <exp+0x56>
    125e:	fe 57       	subi	r31, 0x7E	; 126
    1260:	e0 68       	ori	r30, 0x80	; 128
    1262:	44 27       	eor	r20, r20
    1264:	ee 0f       	add	r30, r30
    1266:	44 1f       	adc	r20, r20
    1268:	fa 95       	dec	r31
    126a:	e1 f7       	brne	.-8      	; 0x1264 <exp+0x4a>
    126c:	41 95       	neg	r20
    126e:	55 0b       	sbc	r21, r21
    1270:	0e 94 af 09 	call	0x135e	; 0x135e <ldexp>
    1274:	0f 90       	pop	r0
    1276:	07 fe       	sbrs	r0, 7
    1278:	0c 94 a3 09 	jmp	0x1346	; 0x1346 <inverse>
    127c:	08 95       	ret

0000127e <__floatunsisf>:
    127e:	e8 94       	clt
    1280:	09 c0       	rjmp	.+18     	; 0x1294 <__floatsisf+0x12>

00001282 <__floatsisf>:
    1282:	97 fb       	bst	r25, 7
    1284:	3e f4       	brtc	.+14     	; 0x1294 <__floatsisf+0x12>
    1286:	90 95       	com	r25
    1288:	80 95       	com	r24
    128a:	70 95       	com	r23
    128c:	61 95       	neg	r22
    128e:	7f 4f       	sbci	r23, 0xFF	; 255
    1290:	8f 4f       	sbci	r24, 0xFF	; 255
    1292:	9f 4f       	sbci	r25, 0xFF	; 255
    1294:	99 23       	and	r25, r25
    1296:	a9 f0       	breq	.+42     	; 0x12c2 <__floatsisf+0x40>
    1298:	f9 2f       	mov	r31, r25
    129a:	96 e9       	ldi	r25, 0x96	; 150
    129c:	bb 27       	eor	r27, r27
    129e:	93 95       	inc	r25
    12a0:	f6 95       	lsr	r31
    12a2:	87 95       	ror	r24
    12a4:	77 95       	ror	r23
    12a6:	67 95       	ror	r22
    12a8:	b7 95       	ror	r27
    12aa:	f1 11       	cpse	r31, r1
    12ac:	f8 cf       	rjmp	.-16     	; 0x129e <__floatsisf+0x1c>
    12ae:	fa f4       	brpl	.+62     	; 0x12ee <__floatsisf+0x6c>
    12b0:	bb 0f       	add	r27, r27
    12b2:	11 f4       	brne	.+4      	; 0x12b8 <__floatsisf+0x36>
    12b4:	60 ff       	sbrs	r22, 0
    12b6:	1b c0       	rjmp	.+54     	; 0x12ee <__floatsisf+0x6c>
    12b8:	6f 5f       	subi	r22, 0xFF	; 255
    12ba:	7f 4f       	sbci	r23, 0xFF	; 255
    12bc:	8f 4f       	sbci	r24, 0xFF	; 255
    12be:	9f 4f       	sbci	r25, 0xFF	; 255
    12c0:	16 c0       	rjmp	.+44     	; 0x12ee <__floatsisf+0x6c>
    12c2:	88 23       	and	r24, r24
    12c4:	11 f0       	breq	.+4      	; 0x12ca <__floatsisf+0x48>
    12c6:	96 e9       	ldi	r25, 0x96	; 150
    12c8:	11 c0       	rjmp	.+34     	; 0x12ec <__floatsisf+0x6a>
    12ca:	77 23       	and	r23, r23
    12cc:	21 f0       	breq	.+8      	; 0x12d6 <__floatsisf+0x54>
    12ce:	9e e8       	ldi	r25, 0x8E	; 142
    12d0:	87 2f       	mov	r24, r23
    12d2:	76 2f       	mov	r23, r22
    12d4:	05 c0       	rjmp	.+10     	; 0x12e0 <__floatsisf+0x5e>
    12d6:	66 23       	and	r22, r22
    12d8:	71 f0       	breq	.+28     	; 0x12f6 <__floatsisf+0x74>
    12da:	96 e8       	ldi	r25, 0x86	; 134
    12dc:	86 2f       	mov	r24, r22
    12de:	70 e0       	ldi	r23, 0x00	; 0
    12e0:	60 e0       	ldi	r22, 0x00	; 0
    12e2:	2a f0       	brmi	.+10     	; 0x12ee <__floatsisf+0x6c>
    12e4:	9a 95       	dec	r25
    12e6:	66 0f       	add	r22, r22
    12e8:	77 1f       	adc	r23, r23
    12ea:	88 1f       	adc	r24, r24
    12ec:	da f7       	brpl	.-10     	; 0x12e4 <__floatsisf+0x62>
    12ee:	88 0f       	add	r24, r24
    12f0:	96 95       	lsr	r25
    12f2:	87 95       	ror	r24
    12f4:	97 f9       	bld	r25, 7
    12f6:	08 95       	ret

000012f8 <__fp_powser>:
    12f8:	df 93       	push	r29
    12fa:	cf 93       	push	r28
    12fc:	1f 93       	push	r17
    12fe:	0f 93       	push	r16
    1300:	ff 92       	push	r15
    1302:	ef 92       	push	r14
    1304:	df 92       	push	r13
    1306:	7b 01       	movw	r14, r22
    1308:	8c 01       	movw	r16, r24
    130a:	68 94       	set
    130c:	06 c0       	rjmp	.+12     	; 0x131a <__fp_powser+0x22>
    130e:	da 2e       	mov	r13, r26
    1310:	ef 01       	movw	r28, r30
    1312:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__mulsf3x>
    1316:	fe 01       	movw	r30, r28
    1318:	e8 94       	clt
    131a:	a5 91       	lpm	r26, Z+
    131c:	25 91       	lpm	r18, Z+
    131e:	35 91       	lpm	r19, Z+
    1320:	45 91       	lpm	r20, Z+
    1322:	55 91       	lpm	r21, Z+
    1324:	a6 f3       	brts	.-24     	; 0x130e <__fp_powser+0x16>
    1326:	ef 01       	movw	r28, r30
    1328:	0e 94 24 06 	call	0xc48	; 0xc48 <__addsf3x>
    132c:	fe 01       	movw	r30, r28
    132e:	97 01       	movw	r18, r14
    1330:	a8 01       	movw	r20, r16
    1332:	da 94       	dec	r13
    1334:	69 f7       	brne	.-38     	; 0x1310 <__fp_powser+0x18>
    1336:	df 90       	pop	r13
    1338:	ef 90       	pop	r14
    133a:	ff 90       	pop	r15
    133c:	0f 91       	pop	r16
    133e:	1f 91       	pop	r17
    1340:	cf 91       	pop	r28
    1342:	df 91       	pop	r29
    1344:	08 95       	ret

00001346 <inverse>:
    1346:	9b 01       	movw	r18, r22
    1348:	ac 01       	movw	r20, r24
    134a:	60 e0       	ldi	r22, 0x00	; 0
    134c:	70 e0       	ldi	r23, 0x00	; 0
    134e:	80 e8       	ldi	r24, 0x80	; 128
    1350:	9f e3       	ldi	r25, 0x3F	; 63
    1352:	0c 94 7e 06 	jmp	0xcfc	; 0xcfc <__divsf3>
    1356:	0c 94 61 07 	jmp	0xec2	; 0xec2 <__fp_inf>
    135a:	0c 94 82 07 	jmp	0xf04	; 0xf04 <__fp_mpack>

0000135e <ldexp>:
    135e:	0e 94 ba 07 	call	0xf74	; 0xf74 <__fp_splitA>
    1362:	d8 f3       	brcs	.-10     	; 0x135a <inverse+0x14>
    1364:	99 23       	and	r25, r25
    1366:	c9 f3       	breq	.-14     	; 0x135a <inverse+0x14>
    1368:	94 0f       	add	r25, r20
    136a:	51 1d       	adc	r21, r1
    136c:	a3 f3       	brvs	.-24     	; 0x1356 <inverse+0x10>
    136e:	91 50       	subi	r25, 0x01	; 1
    1370:	50 40       	sbci	r21, 0x00	; 0
    1372:	94 f0       	brlt	.+36     	; 0x1398 <ldexp+0x3a>
    1374:	59 f0       	breq	.+22     	; 0x138c <ldexp+0x2e>
    1376:	88 23       	and	r24, r24
    1378:	32 f0       	brmi	.+12     	; 0x1386 <ldexp+0x28>
    137a:	66 0f       	add	r22, r22
    137c:	77 1f       	adc	r23, r23
    137e:	88 1f       	adc	r24, r24
    1380:	91 50       	subi	r25, 0x01	; 1
    1382:	50 40       	sbci	r21, 0x00	; 0
    1384:	c1 f7       	brne	.-16     	; 0x1376 <ldexp+0x18>
    1386:	9e 3f       	cpi	r25, 0xFE	; 254
    1388:	51 05       	cpc	r21, r1
    138a:	2c f7       	brge	.-54     	; 0x1356 <inverse+0x10>
    138c:	88 0f       	add	r24, r24
    138e:	91 1d       	adc	r25, r1
    1390:	96 95       	lsr	r25
    1392:	87 95       	ror	r24
    1394:	97 f9       	bld	r25, 7
    1396:	08 95       	ret
    1398:	5f 3f       	cpi	r21, 0xFF	; 255
    139a:	ac f0       	brlt	.+42     	; 0x13c6 <ldexp+0x68>
    139c:	98 3e       	cpi	r25, 0xE8	; 232
    139e:	9c f0       	brlt	.+38     	; 0x13c6 <ldexp+0x68>
    13a0:	bb 27       	eor	r27, r27
    13a2:	86 95       	lsr	r24
    13a4:	77 95       	ror	r23
    13a6:	67 95       	ror	r22
    13a8:	b7 95       	ror	r27
    13aa:	08 f4       	brcc	.+2      	; 0x13ae <ldexp+0x50>
    13ac:	b1 60       	ori	r27, 0x01	; 1
    13ae:	93 95       	inc	r25
    13b0:	c1 f7       	brne	.-16     	; 0x13a2 <ldexp+0x44>
    13b2:	bb 0f       	add	r27, r27
    13b4:	58 f7       	brcc	.-42     	; 0x138c <ldexp+0x2e>
    13b6:	11 f4       	brne	.+4      	; 0x13bc <ldexp+0x5e>
    13b8:	60 ff       	sbrs	r22, 0
    13ba:	e8 cf       	rjmp	.-48     	; 0x138c <ldexp+0x2e>
    13bc:	6f 5f       	subi	r22, 0xFF	; 255
    13be:	7f 4f       	sbci	r23, 0xFF	; 255
    13c0:	8f 4f       	sbci	r24, 0xFF	; 255
    13c2:	9f 4f       	sbci	r25, 0xFF	; 255
    13c4:	e3 cf       	rjmp	.-58     	; 0x138c <ldexp+0x2e>
    13c6:	0c 94 ed 07 	jmp	0xfda	; 0xfda <__fp_szero>

000013ca <modf>:
    13ca:	fa 01       	movw	r30, r20
    13cc:	dc 01       	movw	r26, r24
    13ce:	aa 0f       	add	r26, r26
    13d0:	bb 1f       	adc	r27, r27
    13d2:	9b 01       	movw	r18, r22
    13d4:	ac 01       	movw	r20, r24
    13d6:	bf 57       	subi	r27, 0x7F	; 127
    13d8:	28 f4       	brcc	.+10     	; 0x13e4 <modf+0x1a>
    13da:	22 27       	eor	r18, r18
    13dc:	33 27       	eor	r19, r19
    13de:	44 27       	eor	r20, r20
    13e0:	50 78       	andi	r21, 0x80	; 128
    13e2:	20 c0       	rjmp	.+64     	; 0x1424 <modf+0x5a>
    13e4:	b7 51       	subi	r27, 0x17	; 23
    13e6:	90 f4       	brcc	.+36     	; 0x140c <modf+0x42>
    13e8:	ab 2f       	mov	r26, r27
    13ea:	00 24       	eor	r0, r0
    13ec:	46 95       	lsr	r20
    13ee:	37 95       	ror	r19
    13f0:	27 95       	ror	r18
    13f2:	01 1c       	adc	r0, r1
    13f4:	a3 95       	inc	r26
    13f6:	d2 f3       	brmi	.-12     	; 0x13ec <modf+0x22>
    13f8:	00 20       	and	r0, r0
    13fa:	71 f0       	breq	.+28     	; 0x1418 <modf+0x4e>
    13fc:	22 0f       	add	r18, r18
    13fe:	33 1f       	adc	r19, r19
    1400:	44 1f       	adc	r20, r20
    1402:	b3 95       	inc	r27
    1404:	da f3       	brmi	.-10     	; 0x13fc <modf+0x32>
    1406:	0e d0       	rcall	.+28     	; 0x1424 <modf+0x5a>
    1408:	0c 94 0c 06 	jmp	0xc18	; 0xc18 <__subsf3>
    140c:	61 30       	cpi	r22, 0x01	; 1
    140e:	71 05       	cpc	r23, r1
    1410:	a0 e8       	ldi	r26, 0x80	; 128
    1412:	8a 07       	cpc	r24, r26
    1414:	b9 46       	sbci	r27, 0x69	; 105
    1416:	30 f4       	brcc	.+12     	; 0x1424 <modf+0x5a>
    1418:	9b 01       	movw	r18, r22
    141a:	ac 01       	movw	r20, r24
    141c:	66 27       	eor	r22, r22
    141e:	77 27       	eor	r23, r23
    1420:	88 27       	eor	r24, r24
    1422:	90 78       	andi	r25, 0x80	; 128
    1424:	30 96       	adiw	r30, 0x00	; 0
    1426:	21 f0       	breq	.+8      	; 0x1430 <modf+0x66>
    1428:	20 83       	st	Z, r18
    142a:	31 83       	std	Z+1, r19	; 0x01
    142c:	42 83       	std	Z+2, r20	; 0x02
    142e:	53 83       	std	Z+3, r21	; 0x03
    1430:	08 95       	ret

00001432 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1432:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1434:	91 8d       	ldd	r25, Z+25	; 0x19
    1436:	22 8d       	ldd	r18, Z+26	; 0x1a
    1438:	89 2f       	mov	r24, r25
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	80 5c       	subi	r24, 0xC0	; 192
    143e:	9f 4f       	sbci	r25, 0xFF	; 255
    1440:	82 1b       	sub	r24, r18
    1442:	91 09       	sbc	r25, r1
}
    1444:	8f 73       	andi	r24, 0x3F	; 63
    1446:	99 27       	eor	r25, r25
    1448:	08 95       	ret

0000144a <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    144a:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    144c:	91 8d       	ldd	r25, Z+25	; 0x19
    144e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1450:	98 17       	cp	r25, r24
    1452:	31 f0       	breq	.+12     	; 0x1460 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1454:	82 8d       	ldd	r24, Z+26	; 0x1a
    1456:	e8 0f       	add	r30, r24
    1458:	f1 1d       	adc	r31, r1
    145a:	85 8d       	ldd	r24, Z+29	; 0x1d
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1460:	8f ef       	ldi	r24, 0xFF	; 255
    1462:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1464:	08 95       	ret

00001466 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1466:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1468:	91 8d       	ldd	r25, Z+25	; 0x19
    146a:	82 8d       	ldd	r24, Z+26	; 0x1a
    146c:	98 17       	cp	r25, r24
    146e:	61 f0       	breq	.+24     	; 0x1488 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1470:	82 8d       	ldd	r24, Z+26	; 0x1a
    1472:	df 01       	movw	r26, r30
    1474:	a8 0f       	add	r26, r24
    1476:	b1 1d       	adc	r27, r1
    1478:	5d 96       	adiw	r26, 0x1d	; 29
    147a:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    147c:	92 8d       	ldd	r25, Z+26	; 0x1a
    147e:	9f 5f       	subi	r25, 0xFF	; 255
    1480:	9f 73       	andi	r25, 0x3F	; 63
    1482:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1488:	8f ef       	ldi	r24, 0xFF	; 255
    148a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    148c:	08 95       	ret

0000148e <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    148e:	fc 01       	movw	r30, r24
    1490:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    1492:	44 8d       	ldd	r20, Z+28	; 0x1c
    1494:	25 2f       	mov	r18, r21
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	84 2f       	mov	r24, r20
    149a:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    149c:	82 1b       	sub	r24, r18
    149e:	93 0b       	sbc	r25, r19
    14a0:	54 17       	cp	r21, r20
    14a2:	10 f0       	brcs	.+4      	; 0x14a8 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    14a4:	cf 96       	adiw	r24, 0x3f	; 63
    14a6:	08 95       	ret
  return tail - head - 1;
    14a8:	01 97       	sbiw	r24, 0x01	; 1
}
    14aa:	08 95       	ret

000014ac <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    14ac:	82 eb       	ldi	r24, 0xB2	; 178
    14ae:	9b e0       	ldi	r25, 0x0B	; 11
    14b0:	89 2b       	or	r24, r25
    14b2:	49 f0       	breq	.+18     	; 0x14c6 <_Z14serialEventRunv+0x1a>
    14b4:	80 e0       	ldi	r24, 0x00	; 0
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	89 2b       	or	r24, r25
    14ba:	29 f0       	breq	.+10     	; 0x14c6 <_Z14serialEventRunv+0x1a>
    14bc:	0e 94 b2 0b 	call	0x1764	; 0x1764 <_Z17Serial0_availablev>
    14c0:	81 11       	cpse	r24, r1
    14c2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    14c6:	08 95       	ret

000014c8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    14c8:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    14ca:	84 8d       	ldd	r24, Z+28	; 0x1c
    14cc:	df 01       	movw	r26, r30
    14ce:	a8 0f       	add	r26, r24
    14d0:	b1 1d       	adc	r27, r1
    14d2:	a3 5a       	subi	r26, 0xA3	; 163
    14d4:	bf 4f       	sbci	r27, 0xFF	; 255
    14d6:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    14d8:	84 8d       	ldd	r24, Z+28	; 0x1c
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	01 96       	adiw	r24, 0x01	; 1
    14de:	8f 73       	andi	r24, 0x3F	; 63
    14e0:	99 27       	eor	r25, r25
    14e2:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    14e4:	a6 89       	ldd	r26, Z+22	; 0x16
    14e6:	b7 89       	ldd	r27, Z+23	; 0x17
    14e8:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    14ea:	a0 89       	ldd	r26, Z+16	; 0x10
    14ec:	b1 89       	ldd	r27, Z+17	; 0x11
    14ee:	8c 91       	ld	r24, X
    14f0:	83 70       	andi	r24, 0x03	; 3
    14f2:	80 64       	ori	r24, 0x40	; 64
    14f4:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    14f6:	93 8d       	ldd	r25, Z+27	; 0x1b
    14f8:	84 8d       	ldd	r24, Z+28	; 0x1c
    14fa:	98 13       	cpse	r25, r24
    14fc:	06 c0       	rjmp	.+12     	; 0x150a <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    14fe:	02 88       	ldd	r0, Z+18	; 0x12
    1500:	f3 89       	ldd	r31, Z+19	; 0x13
    1502:	e0 2d       	mov	r30, r0
    1504:	80 81       	ld	r24, Z
    1506:	8f 7d       	andi	r24, 0xDF	; 223
    1508:	80 83       	st	Z, r24
    150a:	08 95       	ret

0000150c <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    150c:	ef 92       	push	r14
    150e:	ff 92       	push	r15
    1510:	0f 93       	push	r16
    1512:	1f 93       	push	r17
    1514:	cf 93       	push	r28
    1516:	df 93       	push	r29
    1518:	ec 01       	movw	r28, r24
  _written = true;
    151a:	81 e0       	ldi	r24, 0x01	; 1
    151c:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    151e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1520:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1522:	98 13       	cpse	r25, r24
    1524:	05 c0       	rjmp	.+10     	; 0x1530 <_ZN14HardwareSerial5writeEh+0x24>
    1526:	e8 89       	ldd	r30, Y+16	; 0x10
    1528:	f9 89       	ldd	r31, Y+17	; 0x11
    152a:	80 81       	ld	r24, Z
    152c:	85 fd       	sbrc	r24, 5
    152e:	26 c0       	rjmp	.+76     	; 0x157c <_ZN14HardwareSerial5writeEh+0x70>
    1530:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1532:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1534:	10 e0       	ldi	r17, 0x00	; 0
    1536:	0f 5f       	subi	r16, 0xFF	; 255
    1538:	1f 4f       	sbci	r17, 0xFF	; 255
    153a:	0f 73       	andi	r16, 0x3F	; 63
    153c:	11 27       	eor	r17, r17
    153e:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1540:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1542:	e8 12       	cpse	r14, r24
    1544:	0c c0       	rjmp	.+24     	; 0x155e <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    1546:	0f b6       	in	r0, 0x3f	; 63
    1548:	07 fc       	sbrc	r0, 7
    154a:	fa cf       	rjmp	.-12     	; 0x1540 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    154c:	e8 89       	ldd	r30, Y+16	; 0x10
    154e:	f9 89       	ldd	r31, Y+17	; 0x11
    1550:	80 81       	ld	r24, Z
    1552:	85 ff       	sbrs	r24, 5
    1554:	f5 cf       	rjmp	.-22     	; 0x1540 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1556:	ce 01       	movw	r24, r28
    1558:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    155c:	f1 cf       	rjmp	.-30     	; 0x1540 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    155e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1560:	fe 01       	movw	r30, r28
    1562:	e8 0f       	add	r30, r24
    1564:	f1 1d       	adc	r31, r1
    1566:	e3 5a       	subi	r30, 0xA3	; 163
    1568:	ff 4f       	sbci	r31, 0xFF	; 255
    156a:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    156c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    156e:	f8 94       	cli
    _tx_buffer_head = i;
    1570:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    1572:	ea 89       	ldd	r30, Y+18	; 0x12
    1574:	fb 89       	ldd	r31, Y+19	; 0x13
    1576:	80 81       	ld	r24, Z
    1578:	80 62       	ori	r24, 0x20	; 32
    157a:	0a c0       	rjmp	.+20     	; 0x1590 <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    157c:	9f b7       	in	r25, 0x3f	; 63
    157e:	f8 94       	cli
      *_udr = c;
    1580:	ee 89       	ldd	r30, Y+22	; 0x16
    1582:	ff 89       	ldd	r31, Y+23	; 0x17
    1584:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1586:	e8 89       	ldd	r30, Y+16	; 0x10
    1588:	f9 89       	ldd	r31, Y+17	; 0x11
    158a:	80 81       	ld	r24, Z
    158c:	83 70       	andi	r24, 0x03	; 3
    158e:	80 64       	ori	r24, 0x40	; 64
    1590:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1592:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	df 91       	pop	r29
    159a:	cf 91       	pop	r28
    159c:	1f 91       	pop	r17
    159e:	0f 91       	pop	r16
    15a0:	ff 90       	pop	r15
    15a2:	ef 90       	pop	r14
    15a4:	08 95       	ret

000015a6 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    15a6:	cf 93       	push	r28
    15a8:	df 93       	push	r29
    15aa:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    15ac:	88 8d       	ldd	r24, Y+24	; 0x18
    15ae:	88 23       	and	r24, r24
    15b0:	c9 f0       	breq	.+50     	; 0x15e4 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    15b2:	ea 89       	ldd	r30, Y+18	; 0x12
    15b4:	fb 89       	ldd	r31, Y+19	; 0x13
    15b6:	80 81       	ld	r24, Z
    15b8:	85 fd       	sbrc	r24, 5
    15ba:	05 c0       	rjmp	.+10     	; 0x15c6 <_ZN14HardwareSerial5flushEv+0x20>
    15bc:	a8 89       	ldd	r26, Y+16	; 0x10
    15be:	b9 89       	ldd	r27, Y+17	; 0x11
    15c0:	8c 91       	ld	r24, X
    15c2:	86 fd       	sbrc	r24, 6
    15c4:	0f c0       	rjmp	.+30     	; 0x15e4 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    15c6:	0f b6       	in	r0, 0x3f	; 63
    15c8:	07 fc       	sbrc	r0, 7
    15ca:	f5 cf       	rjmp	.-22     	; 0x15b6 <_ZN14HardwareSerial5flushEv+0x10>
    15cc:	80 81       	ld	r24, Z
    15ce:	85 ff       	sbrs	r24, 5
    15d0:	f2 cf       	rjmp	.-28     	; 0x15b6 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    15d2:	a8 89       	ldd	r26, Y+16	; 0x10
    15d4:	b9 89       	ldd	r27, Y+17	; 0x11
    15d6:	8c 91       	ld	r24, X
    15d8:	85 ff       	sbrs	r24, 5
    15da:	ed cf       	rjmp	.-38     	; 0x15b6 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    15dc:	ce 01       	movw	r24, r28
    15de:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    15e2:	e7 cf       	rjmp	.-50     	; 0x15b2 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    15e4:	df 91       	pop	r29
    15e6:	cf 91       	pop	r28
    15e8:	08 95       	ret

000015ea <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    15ea:	cf 92       	push	r12
    15ec:	df 92       	push	r13
    15ee:	ef 92       	push	r14
    15f0:	ff 92       	push	r15
    15f2:	1f 93       	push	r17
    15f4:	cf 93       	push	r28
    15f6:	df 93       	push	r29
    15f8:	ec 01       	movw	r28, r24
    15fa:	6a 01       	movw	r12, r20
    15fc:	7b 01       	movw	r14, r22
    15fe:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    1600:	e8 89       	ldd	r30, Y+16	; 0x10
    1602:	f9 89       	ldd	r31, Y+17	; 0x11
    1604:	82 e0       	ldi	r24, 0x02	; 2
    1606:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1608:	41 15       	cp	r20, r1
    160a:	51 4e       	sbci	r21, 0xE1	; 225
    160c:	61 05       	cpc	r22, r1
    160e:	71 05       	cpc	r23, r1
    1610:	b1 f0       	breq	.+44     	; 0x163e <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1612:	60 e0       	ldi	r22, 0x00	; 0
    1614:	79 e0       	ldi	r23, 0x09	; 9
    1616:	8d e3       	ldi	r24, 0x3D	; 61
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	a7 01       	movw	r20, r14
    161c:	96 01       	movw	r18, r12
    161e:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <__udivmodsi4>
    1622:	da 01       	movw	r26, r20
    1624:	c9 01       	movw	r24, r18
    1626:	01 97       	sbiw	r24, 0x01	; 1
    1628:	a1 09       	sbc	r26, r1
    162a:	b1 09       	sbc	r27, r1
    162c:	b6 95       	lsr	r27
    162e:	a7 95       	ror	r26
    1630:	97 95       	ror	r25
    1632:	87 95       	ror	r24
    1634:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1636:	21 15       	cp	r18, r1
    1638:	80 e1       	ldi	r24, 0x10	; 16
    163a:	38 07       	cpc	r19, r24
    163c:	a8 f0       	brcs	.+42     	; 0x1668 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    163e:	e8 89       	ldd	r30, Y+16	; 0x10
    1640:	f9 89       	ldd	r31, Y+17	; 0x11
    1642:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1644:	60 e8       	ldi	r22, 0x80	; 128
    1646:	74 e8       	ldi	r23, 0x84	; 132
    1648:	8e e1       	ldi	r24, 0x1E	; 30
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	a7 01       	movw	r20, r14
    164e:	96 01       	movw	r18, r12
    1650:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <__udivmodsi4>
    1654:	da 01       	movw	r26, r20
    1656:	c9 01       	movw	r24, r18
    1658:	01 97       	sbiw	r24, 0x01	; 1
    165a:	a1 09       	sbc	r26, r1
    165c:	b1 09       	sbc	r27, r1
    165e:	b6 95       	lsr	r27
    1660:	a7 95       	ror	r26
    1662:	97 95       	ror	r25
    1664:	87 95       	ror	r24
    1666:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1668:	ec 85       	ldd	r30, Y+12	; 0x0c
    166a:	fd 85       	ldd	r31, Y+13	; 0x0d
    166c:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    166e:	ee 85       	ldd	r30, Y+14	; 0x0e
    1670:	ff 85       	ldd	r31, Y+15	; 0x0f
    1672:	20 83       	st	Z, r18

  _written = false;
    1674:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1676:	ec 89       	ldd	r30, Y+20	; 0x14
    1678:	fd 89       	ldd	r31, Y+21	; 0x15
    167a:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    167c:	ea 89       	ldd	r30, Y+18	; 0x12
    167e:	fb 89       	ldd	r31, Y+19	; 0x13
    1680:	80 81       	ld	r24, Z
    1682:	80 61       	ori	r24, 0x10	; 16
    1684:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1686:	ea 89       	ldd	r30, Y+18	; 0x12
    1688:	fb 89       	ldd	r31, Y+19	; 0x13
    168a:	80 81       	ld	r24, Z
    168c:	88 60       	ori	r24, 0x08	; 8
    168e:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    1690:	ea 89       	ldd	r30, Y+18	; 0x12
    1692:	fb 89       	ldd	r31, Y+19	; 0x13
    1694:	80 81       	ld	r24, Z
    1696:	80 68       	ori	r24, 0x80	; 128
    1698:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    169a:	ea 89       	ldd	r30, Y+18	; 0x12
    169c:	fb 89       	ldd	r31, Y+19	; 0x13
    169e:	80 81       	ld	r24, Z
    16a0:	8f 7d       	andi	r24, 0xDF	; 223
    16a2:	80 83       	st	Z, r24
}
    16a4:	df 91       	pop	r29
    16a6:	cf 91       	pop	r28
    16a8:	1f 91       	pop	r17
    16aa:	ff 90       	pop	r15
    16ac:	ef 90       	pop	r14
    16ae:	df 90       	pop	r13
    16b0:	cf 90       	pop	r12
    16b2:	08 95       	ret

000016b4 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    16b4:	1f 92       	push	r1
    16b6:	0f 92       	push	r0
    16b8:	0f b6       	in	r0, 0x3f	; 63
    16ba:	0f 92       	push	r0
    16bc:	11 24       	eor	r1, r1
    16be:	2f 93       	push	r18
    16c0:	8f 93       	push	r24
    16c2:	9f 93       	push	r25
    16c4:	ef 93       	push	r30
    16c6:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    16c8:	e0 91 a2 02 	lds	r30, 0x02A2	; 0x8002a2 <Serial+0x10>
    16cc:	f0 91 a3 02 	lds	r31, 0x02A3	; 0x8002a3 <Serial+0x11>
    16d0:	80 81       	ld	r24, Z
    16d2:	e0 91 a8 02 	lds	r30, 0x02A8	; 0x8002a8 <Serial+0x16>
    16d6:	f0 91 a9 02 	lds	r31, 0x02A9	; 0x8002a9 <Serial+0x17>
    16da:	82 fd       	sbrc	r24, 2
    16dc:	12 c0       	rjmp	.+36     	; 0x1702 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    16de:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    16e0:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <Serial+0x19>
    16e4:	8f 5f       	subi	r24, 0xFF	; 255
    16e6:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    16e8:	20 91 ac 02 	lds	r18, 0x02AC	; 0x8002ac <Serial+0x1a>
    16ec:	82 17       	cp	r24, r18
    16ee:	51 f0       	breq	.+20     	; 0x1704 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    16f0:	e0 91 ab 02 	lds	r30, 0x02AB	; 0x8002ab <Serial+0x19>
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	ee 56       	subi	r30, 0x6E	; 110
    16f8:	fd 4f       	sbci	r31, 0xFD	; 253
    16fa:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    16fc:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <Serial+0x19>
    1700:	01 c0       	rjmp	.+2      	; 0x1704 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1702:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1704:	ff 91       	pop	r31
    1706:	ef 91       	pop	r30
    1708:	9f 91       	pop	r25
    170a:	8f 91       	pop	r24
    170c:	2f 91       	pop	r18
    170e:	0f 90       	pop	r0
    1710:	0f be       	out	0x3f, r0	; 63
    1712:	0f 90       	pop	r0
    1714:	1f 90       	pop	r1
    1716:	18 95       	reti

00001718 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1718:	1f 92       	push	r1
    171a:	0f 92       	push	r0
    171c:	0f b6       	in	r0, 0x3f	; 63
    171e:	0f 92       	push	r0
    1720:	11 24       	eor	r1, r1
    1722:	2f 93       	push	r18
    1724:	3f 93       	push	r19
    1726:	4f 93       	push	r20
    1728:	5f 93       	push	r21
    172a:	6f 93       	push	r22
    172c:	7f 93       	push	r23
    172e:	8f 93       	push	r24
    1730:	9f 93       	push	r25
    1732:	af 93       	push	r26
    1734:	bf 93       	push	r27
    1736:	ef 93       	push	r30
    1738:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    173a:	82 e9       	ldi	r24, 0x92	; 146
    173c:	92 e0       	ldi	r25, 0x02	; 2
    173e:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1742:	ff 91       	pop	r31
    1744:	ef 91       	pop	r30
    1746:	bf 91       	pop	r27
    1748:	af 91       	pop	r26
    174a:	9f 91       	pop	r25
    174c:	8f 91       	pop	r24
    174e:	7f 91       	pop	r23
    1750:	6f 91       	pop	r22
    1752:	5f 91       	pop	r21
    1754:	4f 91       	pop	r20
    1756:	3f 91       	pop	r19
    1758:	2f 91       	pop	r18
    175a:	0f 90       	pop	r0
    175c:	0f be       	out	0x3f, r0	; 63
    175e:	0f 90       	pop	r0
    1760:	1f 90       	pop	r1
    1762:	18 95       	reti

00001764 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1764:	82 e9       	ldi	r24, 0x92	; 146
    1766:	92 e0       	ldi	r25, 0x02	; 2
    1768:	0e 94 19 0a 	call	0x1432	; 0x1432 <_ZN14HardwareSerial9availableEv>
    176c:	21 e0       	ldi	r18, 0x01	; 1
    176e:	89 2b       	or	r24, r25
    1770:	09 f4       	brne	.+2      	; 0x1774 <_Z17Serial0_availablev+0x10>
    1772:	20 e0       	ldi	r18, 0x00	; 0
}
    1774:	82 2f       	mov	r24, r18
    1776:	08 95       	ret

00001778 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1778:	e2 e9       	ldi	r30, 0x92	; 146
    177a:	f2 e0       	ldi	r31, 0x02	; 2
    177c:	13 82       	std	Z+3, r1	; 0x03
    177e:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1780:	88 ee       	ldi	r24, 0xE8	; 232
    1782:	93 e0       	ldi	r25, 0x03	; 3
    1784:	a0 e0       	ldi	r26, 0x00	; 0
    1786:	b0 e0       	ldi	r27, 0x00	; 0
    1788:	84 83       	std	Z+4, r24	; 0x04
    178a:	95 83       	std	Z+5, r25	; 0x05
    178c:	a6 83       	std	Z+6, r26	; 0x06
    178e:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1790:	81 e5       	ldi	r24, 0x51	; 81
    1792:	91 e0       	ldi	r25, 0x01	; 1
    1794:	91 83       	std	Z+1, r25	; 0x01
    1796:	80 83       	st	Z, r24
    1798:	85 ec       	ldi	r24, 0xC5	; 197
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	95 87       	std	Z+13, r25	; 0x0d
    179e:	84 87       	std	Z+12, r24	; 0x0c
    17a0:	84 ec       	ldi	r24, 0xC4	; 196
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	97 87       	std	Z+15, r25	; 0x0f
    17a6:	86 87       	std	Z+14, r24	; 0x0e
    17a8:	80 ec       	ldi	r24, 0xC0	; 192
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	91 8b       	std	Z+17, r25	; 0x11
    17ae:	80 8b       	std	Z+16, r24	; 0x10
    17b0:	81 ec       	ldi	r24, 0xC1	; 193
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	93 8b       	std	Z+19, r25	; 0x13
    17b6:	82 8b       	std	Z+18, r24	; 0x12
    17b8:	82 ec       	ldi	r24, 0xC2	; 194
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	95 8b       	std	Z+21, r25	; 0x15
    17be:	84 8b       	std	Z+20, r24	; 0x14
    17c0:	86 ec       	ldi	r24, 0xC6	; 198
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	97 8b       	std	Z+23, r25	; 0x17
    17c6:	86 8b       	std	Z+22, r24	; 0x16
    17c8:	11 8e       	std	Z+25, r1	; 0x19
    17ca:	12 8e       	std	Z+26, r1	; 0x1a
    17cc:	13 8e       	std	Z+27, r1	; 0x1b
    17ce:	14 8e       	std	Z+28, r1	; 0x1c
    17d0:	08 95       	ret

000017d2 <initVariant>:
    17d2:	08 95       	ret

000017d4 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    17d4:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <init>

	initVariant();
    17d8:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    17dc:	0e 94 da 04 	call	0x9b4	; 0x9b4 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    17e0:	c6 e5       	ldi	r28, 0x56	; 86
    17e2:	da e0       	ldi	r29, 0x0A	; 10
#endif
	
	setup();
    
	for (;;) {
		loop();
    17e4:	0e 94 37 05 	call	0xa6e	; 0xa6e <loop>
		if (serialEventRun) serialEventRun();
    17e8:	20 97       	sbiw	r28, 0x00	; 0
    17ea:	e1 f3       	breq	.-8      	; 0x17e4 <main+0x10>
    17ec:	0e 94 56 0a 	call	0x14ac	; 0x14ac <_Z14serialEventRunv>
    17f0:	f9 cf       	rjmp	.-14     	; 0x17e4 <main+0x10>

000017f2 <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    17f2:	cf 92       	push	r12
    17f4:	df 92       	push	r13
    17f6:	ef 92       	push	r14
    17f8:	ff 92       	push	r15
    17fa:	0f 93       	push	r16
    17fc:	1f 93       	push	r17
    17fe:	cf 93       	push	r28
    1800:	df 93       	push	r29
    1802:	6c 01       	movw	r12, r24
    1804:	7a 01       	movw	r14, r20
    1806:	8b 01       	movw	r16, r22
    1808:	c0 e0       	ldi	r28, 0x00	; 0
    180a:	d0 e0       	ldi	r29, 0x00	; 0
    180c:	ce 15       	cp	r28, r14
    180e:	df 05       	cpc	r29, r15
    1810:	81 f0       	breq	.+32     	; 0x1832 <_ZN5Print5writeEPKhj+0x40>
    1812:	d8 01       	movw	r26, r16
    1814:	6d 91       	ld	r22, X+
    1816:	8d 01       	movw	r16, r26
    1818:	d6 01       	movw	r26, r12
    181a:	ed 91       	ld	r30, X+
    181c:	fc 91       	ld	r31, X
    181e:	01 90       	ld	r0, Z+
    1820:	f0 81       	ld	r31, Z
    1822:	e0 2d       	mov	r30, r0
    1824:	c6 01       	movw	r24, r12
    1826:	09 95       	icall
    1828:	89 2b       	or	r24, r25
    182a:	11 f0       	breq	.+4      	; 0x1830 <_ZN5Print5writeEPKhj+0x3e>
    182c:	21 96       	adiw	r28, 0x01	; 1
    182e:	ee cf       	rjmp	.-36     	; 0x180c <_ZN5Print5writeEPKhj+0x1a>
    1830:	7e 01       	movw	r14, r28
    1832:	c7 01       	movw	r24, r14
    1834:	df 91       	pop	r29
    1836:	cf 91       	pop	r28
    1838:	1f 91       	pop	r17
    183a:	0f 91       	pop	r16
    183c:	ff 90       	pop	r15
    183e:	ef 90       	pop	r14
    1840:	df 90       	pop	r13
    1842:	cf 90       	pop	r12
    1844:	08 95       	ret

00001846 <_ZN5Print5writeEPKc>:
    1846:	61 15       	cp	r22, r1
    1848:	71 05       	cpc	r23, r1
    184a:	79 f0       	breq	.+30     	; 0x186a <_ZN5Print5writeEPKc+0x24>
    184c:	fb 01       	movw	r30, r22
    184e:	01 90       	ld	r0, Z+
    1850:	00 20       	and	r0, r0
    1852:	e9 f7       	brne	.-6      	; 0x184e <_ZN5Print5writeEPKc+0x8>
    1854:	31 97       	sbiw	r30, 0x01	; 1
    1856:	af 01       	movw	r20, r30
    1858:	46 1b       	sub	r20, r22
    185a:	57 0b       	sbc	r21, r23
    185c:	dc 01       	movw	r26, r24
    185e:	ed 91       	ld	r30, X+
    1860:	fc 91       	ld	r31, X
    1862:	02 80       	ldd	r0, Z+2	; 0x02
    1864:	f3 81       	ldd	r31, Z+3	; 0x03
    1866:	e0 2d       	mov	r30, r0
    1868:	09 94       	ijmp
    186a:	80 e0       	ldi	r24, 0x00	; 0
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	08 95       	ret

00001870 <_ZN5Print5printEPKc>:
    1870:	0c 94 23 0c 	jmp	0x1846	; 0x1846 <_ZN5Print5writeEPKc>

00001874 <_ZN5Print5printEc>:
    1874:	dc 01       	movw	r26, r24
    1876:	ed 91       	ld	r30, X+
    1878:	fc 91       	ld	r31, X
    187a:	01 90       	ld	r0, Z+
    187c:	f0 81       	ld	r31, Z
    187e:	e0 2d       	mov	r30, r0
    1880:	09 94       	ijmp

00001882 <_ZN5Print7printlnEv>:
    1882:	6f e5       	ldi	r22, 0x5F	; 95
    1884:	71 e0       	ldi	r23, 0x01	; 1
    1886:	0c 94 23 0c 	jmp	0x1846	; 0x1846 <_ZN5Print5writeEPKc>

0000188a <_ZN5Print7printlnEPKc>:
    188a:	0f 93       	push	r16
    188c:	1f 93       	push	r17
    188e:	cf 93       	push	r28
    1890:	df 93       	push	r29
    1892:	ec 01       	movw	r28, r24
    1894:	0e 94 23 0c 	call	0x1846	; 0x1846 <_ZN5Print5writeEPKc>
    1898:	8c 01       	movw	r16, r24
    189a:	ce 01       	movw	r24, r28
    189c:	0e 94 41 0c 	call	0x1882	; 0x1882 <_ZN5Print7printlnEv>
    18a0:	80 0f       	add	r24, r16
    18a2:	91 1f       	adc	r25, r17
    18a4:	df 91       	pop	r29
    18a6:	cf 91       	pop	r28
    18a8:	1f 91       	pop	r17
    18aa:	0f 91       	pop	r16
    18ac:	08 95       	ret

000018ae <_ZN5Print11printNumberEmh>:
    18ae:	8f 92       	push	r8
    18b0:	9f 92       	push	r9
    18b2:	af 92       	push	r10
    18b4:	bf 92       	push	r11
    18b6:	ef 92       	push	r14
    18b8:	ff 92       	push	r15
    18ba:	0f 93       	push	r16
    18bc:	1f 93       	push	r17
    18be:	cf 93       	push	r28
    18c0:	df 93       	push	r29
    18c2:	cd b7       	in	r28, 0x3d	; 61
    18c4:	de b7       	in	r29, 0x3e	; 62
    18c6:	a1 97       	sbiw	r28, 0x21	; 33
    18c8:	0f b6       	in	r0, 0x3f	; 63
    18ca:	f8 94       	cli
    18cc:	de bf       	out	0x3e, r29	; 62
    18ce:	0f be       	out	0x3f, r0	; 63
    18d0:	cd bf       	out	0x3d, r28	; 61
    18d2:	7c 01       	movw	r14, r24
    18d4:	fa 01       	movw	r30, r20
    18d6:	cb 01       	movw	r24, r22
    18d8:	19 a2       	std	Y+33, r1	; 0x21
    18da:	22 30       	cpi	r18, 0x02	; 2
    18dc:	08 f4       	brcc	.+2      	; 0x18e0 <_ZN5Print11printNumberEmh+0x32>
    18de:	2a e0       	ldi	r18, 0x0A	; 10
    18e0:	8e 01       	movw	r16, r28
    18e2:	0f 5d       	subi	r16, 0xDF	; 223
    18e4:	1f 4f       	sbci	r17, 0xFF	; 255
    18e6:	82 2e       	mov	r8, r18
    18e8:	91 2c       	mov	r9, r1
    18ea:	a1 2c       	mov	r10, r1
    18ec:	b1 2c       	mov	r11, r1
    18ee:	bf 01       	movw	r22, r30
    18f0:	a5 01       	movw	r20, r10
    18f2:	94 01       	movw	r18, r8
    18f4:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <__udivmodsi4>
    18f8:	f9 01       	movw	r30, r18
    18fa:	ca 01       	movw	r24, r20
    18fc:	01 50       	subi	r16, 0x01	; 1
    18fe:	11 09       	sbc	r17, r1
    1900:	6a 30       	cpi	r22, 0x0A	; 10
    1902:	10 f4       	brcc	.+4      	; 0x1908 <_ZN5Print11printNumberEmh+0x5a>
    1904:	60 5d       	subi	r22, 0xD0	; 208
    1906:	01 c0       	rjmp	.+2      	; 0x190a <_ZN5Print11printNumberEmh+0x5c>
    1908:	69 5c       	subi	r22, 0xC9	; 201
    190a:	d8 01       	movw	r26, r16
    190c:	6c 93       	st	X, r22
    190e:	23 2b       	or	r18, r19
    1910:	24 2b       	or	r18, r20
    1912:	25 2b       	or	r18, r21
    1914:	61 f7       	brne	.-40     	; 0x18ee <_ZN5Print11printNumberEmh+0x40>
    1916:	b8 01       	movw	r22, r16
    1918:	c7 01       	movw	r24, r14
    191a:	0e 94 23 0c 	call	0x1846	; 0x1846 <_ZN5Print5writeEPKc>
    191e:	a1 96       	adiw	r28, 0x21	; 33
    1920:	0f b6       	in	r0, 0x3f	; 63
    1922:	f8 94       	cli
    1924:	de bf       	out	0x3e, r29	; 62
    1926:	0f be       	out	0x3f, r0	; 63
    1928:	cd bf       	out	0x3d, r28	; 61
    192a:	df 91       	pop	r29
    192c:	cf 91       	pop	r28
    192e:	1f 91       	pop	r17
    1930:	0f 91       	pop	r16
    1932:	ff 90       	pop	r15
    1934:	ef 90       	pop	r14
    1936:	bf 90       	pop	r11
    1938:	af 90       	pop	r10
    193a:	9f 90       	pop	r9
    193c:	8f 90       	pop	r8
    193e:	08 95       	ret

00001940 <_ZN5Print5printEmi>:
    1940:	21 15       	cp	r18, r1
    1942:	31 05       	cpc	r19, r1
    1944:	41 f4       	brne	.+16     	; 0x1956 <_ZN5Print5printEmi+0x16>
    1946:	dc 01       	movw	r26, r24
    1948:	ed 91       	ld	r30, X+
    194a:	fc 91       	ld	r31, X
    194c:	01 90       	ld	r0, Z+
    194e:	f0 81       	ld	r31, Z
    1950:	e0 2d       	mov	r30, r0
    1952:	64 2f       	mov	r22, r20
    1954:	09 94       	ijmp
    1956:	0c 94 57 0c 	jmp	0x18ae	; 0x18ae <_ZN5Print11printNumberEmh>

0000195a <_ZN5Print5printEji>:
    195a:	9a 01       	movw	r18, r20
    195c:	ab 01       	movw	r20, r22
    195e:	60 e0       	ldi	r22, 0x00	; 0
    1960:	70 e0       	ldi	r23, 0x00	; 0
    1962:	0c 94 a0 0c 	jmp	0x1940	; 0x1940 <_ZN5Print5printEmi>

00001966 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    1966:	7f 92       	push	r7
    1968:	8f 92       	push	r8
    196a:	9f 92       	push	r9
    196c:	af 92       	push	r10
    196e:	bf 92       	push	r11
    1970:	cf 92       	push	r12
    1972:	df 92       	push	r13
    1974:	ef 92       	push	r14
    1976:	ff 92       	push	r15
    1978:	0f 93       	push	r16
    197a:	1f 93       	push	r17
    197c:	cf 93       	push	r28
    197e:	df 93       	push	r29
    1980:	8c 01       	movw	r16, r24
    1982:	6a 01       	movw	r12, r20
    1984:	7b 01       	movw	r14, r22
    1986:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    1988:	9a 01       	movw	r18, r20
    198a:	ab 01       	movw	r20, r22
    198c:	c7 01       	movw	r24, r14
    198e:	b6 01       	movw	r22, r12
    1990:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__unordsf2>
    1994:	88 23       	and	r24, r24
    1996:	19 f0       	breq	.+6      	; 0x199e <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1998:	62 e6       	ldi	r22, 0x62	; 98
    199a:	71 e0       	ldi	r23, 0x01	; 1
    199c:	27 c0       	rjmp	.+78     	; 0x19ec <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    199e:	46 01       	movw	r8, r12
    19a0:	57 01       	movw	r10, r14
    19a2:	e8 94       	clt
    19a4:	b7 f8       	bld	r11, 7
    19a6:	2f ef       	ldi	r18, 0xFF	; 255
    19a8:	3f ef       	ldi	r19, 0xFF	; 255
    19aa:	4f e7       	ldi	r20, 0x7F	; 127
    19ac:	5f e7       	ldi	r21, 0x7F	; 127
    19ae:	c5 01       	movw	r24, r10
    19b0:	b4 01       	movw	r22, r8
    19b2:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__unordsf2>
    19b6:	81 11       	cpse	r24, r1
    19b8:	0d c0       	rjmp	.+26     	; 0x19d4 <_ZN5Print10printFloatEdh+0x6e>
    19ba:	2f ef       	ldi	r18, 0xFF	; 255
    19bc:	3f ef       	ldi	r19, 0xFF	; 255
    19be:	4f e7       	ldi	r20, 0x7F	; 127
    19c0:	5f e7       	ldi	r21, 0x7F	; 127
    19c2:	c5 01       	movw	r24, r10
    19c4:	b4 01       	movw	r22, r8
    19c6:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__cmpsf2>
    19ca:	18 16       	cp	r1, r24
    19cc:	1c f4       	brge	.+6      	; 0x19d4 <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    19ce:	66 e6       	ldi	r22, 0x66	; 102
    19d0:	71 e0       	ldi	r23, 0x01	; 1
    19d2:	0c c0       	rjmp	.+24     	; 0x19ec <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    19d4:	2f ef       	ldi	r18, 0xFF	; 255
    19d6:	3f ef       	ldi	r19, 0xFF	; 255
    19d8:	4f e7       	ldi	r20, 0x7F	; 127
    19da:	5f e4       	ldi	r21, 0x4F	; 79
    19dc:	c7 01       	movw	r24, r14
    19de:	b6 01       	movw	r22, r12
    19e0:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <__gesf2>
    19e4:	18 16       	cp	r1, r24
    19e6:	94 f4       	brge	.+36     	; 0x1a0c <_ZN5Print10printFloatEdh+0xa6>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    19e8:	6a e6       	ldi	r22, 0x6A	; 106
    19ea:	71 e0       	ldi	r23, 0x01	; 1
    19ec:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    19ee:	df 91       	pop	r29
    19f0:	cf 91       	pop	r28
    19f2:	1f 91       	pop	r17
    19f4:	0f 91       	pop	r16
    19f6:	ff 90       	pop	r15
    19f8:	ef 90       	pop	r14
    19fa:	df 90       	pop	r13
    19fc:	cf 90       	pop	r12
    19fe:	bf 90       	pop	r11
    1a00:	af 90       	pop	r10
    1a02:	9f 90       	pop	r9
    1a04:	8f 90       	pop	r8
    1a06:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1a08:	0c 94 23 0c 	jmp	0x1846	; 0x1846 <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    1a0c:	2f ef       	ldi	r18, 0xFF	; 255
    1a0e:	3f ef       	ldi	r19, 0xFF	; 255
    1a10:	4f e7       	ldi	r20, 0x7F	; 127
    1a12:	5f ec       	ldi	r21, 0xCF	; 207
    1a14:	c7 01       	movw	r24, r14
    1a16:	b6 01       	movw	r22, r12
    1a18:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__cmpsf2>
    1a1c:	87 fd       	sbrc	r24, 7
    1a1e:	e4 cf       	rjmp	.-56     	; 0x19e8 <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
    1a20:	20 e0       	ldi	r18, 0x00	; 0
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	a9 01       	movw	r20, r18
    1a26:	c7 01       	movw	r24, r14
    1a28:	b6 01       	movw	r22, r12
    1a2a:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__cmpsf2>
    1a2e:	87 ff       	sbrs	r24, 7
    1a30:	0a c0       	rjmp	.+20     	; 0x1a46 <_ZN5Print10printFloatEdh+0xe0>
  {
     n += print('-');
    1a32:	6d e2       	ldi	r22, 0x2D	; 45
    1a34:	c8 01       	movw	r24, r16
    1a36:	0e 94 3a 0c 	call	0x1874	; 0x1874 <_ZN5Print5printEc>
    1a3a:	ec 01       	movw	r28, r24
     number = -number;
    1a3c:	f7 fa       	bst	r15, 7
    1a3e:	f0 94       	com	r15
    1a40:	f7 f8       	bld	r15, 7
    1a42:	f0 94       	com	r15
    1a44:	02 c0       	rjmp	.+4      	; 0x1a4a <_ZN5Print10printFloatEdh+0xe4>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    1a46:	c0 e0       	ldi	r28, 0x00	; 0
    1a48:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1a4a:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    1a4c:	60 e0       	ldi	r22, 0x00	; 0
    1a4e:	70 e0       	ldi	r23, 0x00	; 0
    1a50:	80 e0       	ldi	r24, 0x00	; 0
    1a52:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    1a54:	7b 14       	cp	r7, r11
    1a56:	41 f0       	breq	.+16     	; 0x1a68 <_ZN5Print10printFloatEdh+0x102>
    rounding /= 10.0;
    1a58:	20 e0       	ldi	r18, 0x00	; 0
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	40 e2       	ldi	r20, 0x20	; 32
    1a5e:	51 e4       	ldi	r21, 0x41	; 65
    1a60:	0e 94 7e 06 	call	0xcfc	; 0xcfc <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1a64:	b3 94       	inc	r11
    1a66:	f6 cf       	rjmp	.-20     	; 0x1a54 <_ZN5Print10printFloatEdh+0xee>
    rounding /= 10.0;
  
  number += rounding;
    1a68:	a7 01       	movw	r20, r14
    1a6a:	96 01       	movw	r18, r12
    1a6c:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__addsf3>
    1a70:	6b 01       	movw	r12, r22
    1a72:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    1a74:	0e 94 f7 06 	call	0xdee	; 0xdee <__fixunssfsi>
    1a78:	4b 01       	movw	r8, r22
    1a7a:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    1a7c:	2a e0       	ldi	r18, 0x0A	; 10
    1a7e:	ab 01       	movw	r20, r22
    1a80:	bc 01       	movw	r22, r24
    1a82:	c8 01       	movw	r24, r16
    1a84:	0e 94 57 0c 	call	0x18ae	; 0x18ae <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    1a88:	c8 0f       	add	r28, r24
    1a8a:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    1a8c:	77 20       	and	r7, r7
    1a8e:	b9 f1       	breq	.+110    	; 0x1afe <_ZN5Print10printFloatEdh+0x198>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    1a90:	c5 01       	movw	r24, r10
    1a92:	b4 01       	movw	r22, r8
    1a94:	0e 94 3f 09 	call	0x127e	; 0x127e <__floatunsisf>
    1a98:	9b 01       	movw	r18, r22
    1a9a:	ac 01       	movw	r20, r24
    1a9c:	c7 01       	movw	r24, r14
    1a9e:	b6 01       	movw	r22, r12
    1aa0:	0e 94 0c 06 	call	0xc18	; 0xc18 <__subsf3>
    1aa4:	6b 01       	movw	r12, r22
    1aa6:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    1aa8:	6e e2       	ldi	r22, 0x2E	; 46
    1aaa:	c8 01       	movw	r24, r16
    1aac:	0e 94 3a 0c 	call	0x1874	; 0x1874 <_ZN5Print5printEc>
    1ab0:	c8 0f       	add	r28, r24
    1ab2:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    1ab4:	20 e0       	ldi	r18, 0x00	; 0
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	40 e2       	ldi	r20, 0x20	; 32
    1aba:	51 e4       	ldi	r21, 0x41	; 65
    1abc:	c7 01       	movw	r24, r14
    1abe:	b6 01       	movw	r22, r12
    1ac0:	0e 94 48 08 	call	0x1090	; 0x1090 <__mulsf3>
    1ac4:	4b 01       	movw	r8, r22
    1ac6:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
    1ac8:	0e 94 f7 06 	call	0xdee	; 0xdee <__fixunssfsi>
    1acc:	6b 01       	movw	r12, r22
    1ace:	7c 01       	movw	r14, r24
    n += print(toPrint);
    1ad0:	4a e0       	ldi	r20, 0x0A	; 10
    1ad2:	50 e0       	ldi	r21, 0x00	; 0
    1ad4:	c8 01       	movw	r24, r16
    1ad6:	0e 94 ad 0c 	call	0x195a	; 0x195a <_ZN5Print5printEji>
    1ada:	c8 0f       	add	r28, r24
    1adc:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    1ade:	b6 01       	movw	r22, r12
    1ae0:	80 e0       	ldi	r24, 0x00	; 0
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	0e 94 3f 09 	call	0x127e	; 0x127e <__floatunsisf>
    1ae8:	9b 01       	movw	r18, r22
    1aea:	ac 01       	movw	r20, r24
    1aec:	c5 01       	movw	r24, r10
    1aee:	b4 01       	movw	r22, r8
    1af0:	0e 94 0c 06 	call	0xc18	; 0xc18 <__subsf3>
    1af4:	6b 01       	movw	r12, r22
    1af6:	7c 01       	movw	r14, r24
    1af8:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    1afa:	71 10       	cpse	r7, r1
    1afc:	db cf       	rjmp	.-74     	; 0x1ab4 <_ZN5Print10printFloatEdh+0x14e>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    1afe:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    1b00:	df 91       	pop	r29
    1b02:	cf 91       	pop	r28
    1b04:	1f 91       	pop	r17
    1b06:	0f 91       	pop	r16
    1b08:	ff 90       	pop	r15
    1b0a:	ef 90       	pop	r14
    1b0c:	df 90       	pop	r13
    1b0e:	cf 90       	pop	r12
    1b10:	bf 90       	pop	r11
    1b12:	af 90       	pop	r10
    1b14:	9f 90       	pop	r9
    1b16:	8f 90       	pop	r8
    1b18:	7f 90       	pop	r7
    1b1a:	08 95       	ret

00001b1c <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    1b1c:	0c 94 b3 0c 	jmp	0x1966	; 0x1966 <_ZN5Print10printFloatEdh>

00001b20 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    1b20:	0f 93       	push	r16
    1b22:	1f 93       	push	r17
    1b24:	cf 93       	push	r28
    1b26:	df 93       	push	r29
    1b28:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    1b2a:	0e 94 b3 0c 	call	0x1966	; 0x1966 <_ZN5Print10printFloatEdh>
    1b2e:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    1b30:	ce 01       	movw	r24, r28
    1b32:	0e 94 41 0c 	call	0x1882	; 0x1882 <_ZN5Print7printlnEv>
  return n;
}
    1b36:	80 0f       	add	r24, r16
    1b38:	91 1f       	adc	r25, r17
    1b3a:	df 91       	pop	r29
    1b3c:	cf 91       	pop	r28
    1b3e:	1f 91       	pop	r17
    1b40:	0f 91       	pop	r16
    1b42:	08 95       	ret

00001b44 <_ZN6Stream10setTimeoutEm>:
// Public Methods
//////////////////////////////////////////////////////////////

void Stream::setTimeout(unsigned long timeout)  // sets the maximum number of milliseconds to wait
{
  _timeout = timeout;
    1b44:	fc 01       	movw	r30, r24
    1b46:	44 83       	std	Z+4, r20	; 0x04
    1b48:	55 83       	std	Z+5, r21	; 0x05
    1b4a:	66 83       	std	Z+6, r22	; 0x06
    1b4c:	77 83       	std	Z+7, r23	; 0x07
    1b4e:	08 95       	ret

00001b50 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    1b50:	1f 92       	push	r1
    1b52:	0f 92       	push	r0
    1b54:	0f b6       	in	r0, 0x3f	; 63
    1b56:	0f 92       	push	r0
    1b58:	11 24       	eor	r1, r1
    1b5a:	2f 93       	push	r18
    1b5c:	3f 93       	push	r19
    1b5e:	8f 93       	push	r24
    1b60:	9f 93       	push	r25
    1b62:	af 93       	push	r26
    1b64:	bf 93       	push	r27
    1b66:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <timer0_millis>
    1b6a:	90 91 31 03 	lds	r25, 0x0331	; 0x800331 <timer0_millis+0x1>
    1b6e:	a0 91 32 03 	lds	r26, 0x0332	; 0x800332 <timer0_millis+0x2>
    1b72:	b0 91 33 03 	lds	r27, 0x0333	; 0x800333 <timer0_millis+0x3>
    1b76:	30 91 2f 03 	lds	r19, 0x032F	; 0x80032f <timer0_fract>
    1b7a:	23 e0       	ldi	r18, 0x03	; 3
    1b7c:	23 0f       	add	r18, r19
    1b7e:	2d 37       	cpi	r18, 0x7D	; 125
    1b80:	20 f4       	brcc	.+8      	; 0x1b8a <__vector_16+0x3a>
    1b82:	01 96       	adiw	r24, 0x01	; 1
    1b84:	a1 1d       	adc	r26, r1
    1b86:	b1 1d       	adc	r27, r1
    1b88:	05 c0       	rjmp	.+10     	; 0x1b94 <__vector_16+0x44>
    1b8a:	26 e8       	ldi	r18, 0x86	; 134
    1b8c:	23 0f       	add	r18, r19
    1b8e:	02 96       	adiw	r24, 0x02	; 2
    1b90:	a1 1d       	adc	r26, r1
    1b92:	b1 1d       	adc	r27, r1
    1b94:	20 93 2f 03 	sts	0x032F, r18	; 0x80032f <timer0_fract>
    1b98:	80 93 30 03 	sts	0x0330, r24	; 0x800330 <timer0_millis>
    1b9c:	90 93 31 03 	sts	0x0331, r25	; 0x800331 <timer0_millis+0x1>
    1ba0:	a0 93 32 03 	sts	0x0332, r26	; 0x800332 <timer0_millis+0x2>
    1ba4:	b0 93 33 03 	sts	0x0333, r27	; 0x800333 <timer0_millis+0x3>
    1ba8:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <timer0_overflow_count>
    1bac:	90 91 35 03 	lds	r25, 0x0335	; 0x800335 <timer0_overflow_count+0x1>
    1bb0:	a0 91 36 03 	lds	r26, 0x0336	; 0x800336 <timer0_overflow_count+0x2>
    1bb4:	b0 91 37 03 	lds	r27, 0x0337	; 0x800337 <timer0_overflow_count+0x3>
    1bb8:	01 96       	adiw	r24, 0x01	; 1
    1bba:	a1 1d       	adc	r26, r1
    1bbc:	b1 1d       	adc	r27, r1
    1bbe:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <timer0_overflow_count>
    1bc2:	90 93 35 03 	sts	0x0335, r25	; 0x800335 <timer0_overflow_count+0x1>
    1bc6:	a0 93 36 03 	sts	0x0336, r26	; 0x800336 <timer0_overflow_count+0x2>
    1bca:	b0 93 37 03 	sts	0x0337, r27	; 0x800337 <timer0_overflow_count+0x3>
    1bce:	bf 91       	pop	r27
    1bd0:	af 91       	pop	r26
    1bd2:	9f 91       	pop	r25
    1bd4:	8f 91       	pop	r24
    1bd6:	3f 91       	pop	r19
    1bd8:	2f 91       	pop	r18
    1bda:	0f 90       	pop	r0
    1bdc:	0f be       	out	0x3f, r0	; 63
    1bde:	0f 90       	pop	r0
    1be0:	1f 90       	pop	r1
    1be2:	18 95       	reti

00001be4 <micros>:
    1be4:	3f b7       	in	r19, 0x3f	; 63
    1be6:	f8 94       	cli
    1be8:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <timer0_overflow_count>
    1bec:	90 91 35 03 	lds	r25, 0x0335	; 0x800335 <timer0_overflow_count+0x1>
    1bf0:	a0 91 36 03 	lds	r26, 0x0336	; 0x800336 <timer0_overflow_count+0x2>
    1bf4:	b0 91 37 03 	lds	r27, 0x0337	; 0x800337 <timer0_overflow_count+0x3>
    1bf8:	26 b5       	in	r18, 0x26	; 38
    1bfa:	a8 9b       	sbis	0x15, 0	; 21
    1bfc:	05 c0       	rjmp	.+10     	; 0x1c08 <micros+0x24>
    1bfe:	2f 3f       	cpi	r18, 0xFF	; 255
    1c00:	19 f0       	breq	.+6      	; 0x1c08 <micros+0x24>
    1c02:	01 96       	adiw	r24, 0x01	; 1
    1c04:	a1 1d       	adc	r26, r1
    1c06:	b1 1d       	adc	r27, r1
    1c08:	3f bf       	out	0x3f, r19	; 63
    1c0a:	ba 2f       	mov	r27, r26
    1c0c:	a9 2f       	mov	r26, r25
    1c0e:	98 2f       	mov	r25, r24
    1c10:	88 27       	eor	r24, r24
    1c12:	82 0f       	add	r24, r18
    1c14:	91 1d       	adc	r25, r1
    1c16:	a1 1d       	adc	r26, r1
    1c18:	b1 1d       	adc	r27, r1
    1c1a:	bc 01       	movw	r22, r24
    1c1c:	cd 01       	movw	r24, r26
    1c1e:	42 e0       	ldi	r20, 0x02	; 2
    1c20:	66 0f       	add	r22, r22
    1c22:	77 1f       	adc	r23, r23
    1c24:	88 1f       	adc	r24, r24
    1c26:	99 1f       	adc	r25, r25
    1c28:	4a 95       	dec	r20
    1c2a:	d1 f7       	brne	.-12     	; 0x1c20 <micros+0x3c>
    1c2c:	08 95       	ret

00001c2e <delay>:
    1c2e:	8f 92       	push	r8
    1c30:	9f 92       	push	r9
    1c32:	af 92       	push	r10
    1c34:	bf 92       	push	r11
    1c36:	cf 92       	push	r12
    1c38:	df 92       	push	r13
    1c3a:	ef 92       	push	r14
    1c3c:	ff 92       	push	r15
    1c3e:	6b 01       	movw	r12, r22
    1c40:	7c 01       	movw	r14, r24
    1c42:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <micros>
    1c46:	4b 01       	movw	r8, r22
    1c48:	5c 01       	movw	r10, r24
    1c4a:	c1 14       	cp	r12, r1
    1c4c:	d1 04       	cpc	r13, r1
    1c4e:	e1 04       	cpc	r14, r1
    1c50:	f1 04       	cpc	r15, r1
    1c52:	01 f1       	breq	.+64     	; 0x1c94 <delay+0x66>
    1c54:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <yield>
    1c58:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <micros>
    1c5c:	dc 01       	movw	r26, r24
    1c5e:	cb 01       	movw	r24, r22
    1c60:	88 19       	sub	r24, r8
    1c62:	99 09       	sbc	r25, r9
    1c64:	aa 09       	sbc	r26, r10
    1c66:	bb 09       	sbc	r27, r11
    1c68:	88 3e       	cpi	r24, 0xE8	; 232
    1c6a:	93 40       	sbci	r25, 0x03	; 3
    1c6c:	a1 05       	cpc	r26, r1
    1c6e:	b1 05       	cpc	r27, r1
    1c70:	60 f3       	brcs	.-40     	; 0x1c4a <delay+0x1c>
    1c72:	21 e0       	ldi	r18, 0x01	; 1
    1c74:	c2 1a       	sub	r12, r18
    1c76:	d1 08       	sbc	r13, r1
    1c78:	e1 08       	sbc	r14, r1
    1c7a:	f1 08       	sbc	r15, r1
    1c7c:	88 ee       	ldi	r24, 0xE8	; 232
    1c7e:	88 0e       	add	r8, r24
    1c80:	83 e0       	ldi	r24, 0x03	; 3
    1c82:	98 1e       	adc	r9, r24
    1c84:	a1 1c       	adc	r10, r1
    1c86:	b1 1c       	adc	r11, r1
    1c88:	c1 14       	cp	r12, r1
    1c8a:	d1 04       	cpc	r13, r1
    1c8c:	e1 04       	cpc	r14, r1
    1c8e:	f1 04       	cpc	r15, r1
    1c90:	19 f7       	brne	.-58     	; 0x1c58 <delay+0x2a>
    1c92:	db cf       	rjmp	.-74     	; 0x1c4a <delay+0x1c>
    1c94:	ff 90       	pop	r15
    1c96:	ef 90       	pop	r14
    1c98:	df 90       	pop	r13
    1c9a:	cf 90       	pop	r12
    1c9c:	bf 90       	pop	r11
    1c9e:	af 90       	pop	r10
    1ca0:	9f 90       	pop	r9
    1ca2:	8f 90       	pop	r8
    1ca4:	08 95       	ret

00001ca6 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1ca6:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1ca8:	84 b5       	in	r24, 0x24	; 36
    1caa:	82 60       	ori	r24, 0x02	; 2
    1cac:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1cae:	84 b5       	in	r24, 0x24	; 36
    1cb0:	81 60       	ori	r24, 0x01	; 1
    1cb2:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1cb4:	85 b5       	in	r24, 0x25	; 37
    1cb6:	82 60       	ori	r24, 0x02	; 2
    1cb8:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1cba:	85 b5       	in	r24, 0x25	; 37
    1cbc:	81 60       	ori	r24, 0x01	; 1
    1cbe:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1cc0:	ee e6       	ldi	r30, 0x6E	; 110
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	80 81       	ld	r24, Z
    1cc6:	81 60       	ori	r24, 0x01	; 1
    1cc8:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1cca:	e1 e8       	ldi	r30, 0x81	; 129
    1ccc:	f0 e0       	ldi	r31, 0x00	; 0
    1cce:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1cd0:	80 81       	ld	r24, Z
    1cd2:	82 60       	ori	r24, 0x02	; 2
    1cd4:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1cd6:	80 81       	ld	r24, Z
    1cd8:	81 60       	ori	r24, 0x01	; 1
    1cda:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1cdc:	e0 e8       	ldi	r30, 0x80	; 128
    1cde:	f0 e0       	ldi	r31, 0x00	; 0
    1ce0:	80 81       	ld	r24, Z
    1ce2:	81 60       	ori	r24, 0x01	; 1
    1ce4:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1ce6:	e1 eb       	ldi	r30, 0xB1	; 177
    1ce8:	f0 e0       	ldi	r31, 0x00	; 0
    1cea:	80 81       	ld	r24, Z
    1cec:	84 60       	ori	r24, 0x04	; 4
    1cee:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1cf0:	e0 eb       	ldi	r30, 0xB0	; 176
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	80 81       	ld	r24, Z
    1cf6:	81 60       	ori	r24, 0x01	; 1
    1cf8:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1cfa:	ea e7       	ldi	r30, 0x7A	; 122
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	80 81       	ld	r24, Z
    1d00:	84 60       	ori	r24, 0x04	; 4
    1d02:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1d04:	80 81       	ld	r24, Z
    1d06:	82 60       	ori	r24, 0x02	; 2
    1d08:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    1d0a:	80 81       	ld	r24, Z
    1d0c:	81 60       	ori	r24, 0x01	; 1
    1d0e:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1d10:	80 81       	ld	r24, Z
    1d12:	80 68       	ori	r24, 0x80	; 128
    1d14:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1d16:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    1d1a:	08 95       	ret

00001d1c <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1d1c:	83 30       	cpi	r24, 0x03	; 3
    1d1e:	81 f0       	breq	.+32     	; 0x1d40 <turnOffPWM+0x24>
    1d20:	28 f4       	brcc	.+10     	; 0x1d2c <turnOffPWM+0x10>
    1d22:	81 30       	cpi	r24, 0x01	; 1
    1d24:	99 f0       	breq	.+38     	; 0x1d4c <turnOffPWM+0x30>
    1d26:	82 30       	cpi	r24, 0x02	; 2
    1d28:	a1 f0       	breq	.+40     	; 0x1d52 <turnOffPWM+0x36>
    1d2a:	08 95       	ret
    1d2c:	87 30       	cpi	r24, 0x07	; 7
    1d2e:	a9 f0       	breq	.+42     	; 0x1d5a <turnOffPWM+0x3e>
    1d30:	88 30       	cpi	r24, 0x08	; 8
    1d32:	b9 f0       	breq	.+46     	; 0x1d62 <turnOffPWM+0x46>
    1d34:	84 30       	cpi	r24, 0x04	; 4
    1d36:	d1 f4       	brne	.+52     	; 0x1d6c <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1d38:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    1d3c:	8f 7d       	andi	r24, 0xDF	; 223
    1d3e:	03 c0       	rjmp	.+6      	; 0x1d46 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1d40:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    1d44:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1d46:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    1d4a:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1d4c:	84 b5       	in	r24, 0x24	; 36
    1d4e:	8f 77       	andi	r24, 0x7F	; 127
    1d50:	02 c0       	rjmp	.+4      	; 0x1d56 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1d52:	84 b5       	in	r24, 0x24	; 36
    1d54:	8f 7d       	andi	r24, 0xDF	; 223
    1d56:	84 bd       	out	0x24, r24	; 36
    1d58:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1d5a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    1d5e:	8f 77       	andi	r24, 0x7F	; 127
    1d60:	03 c0       	rjmp	.+6      	; 0x1d68 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1d62:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    1d66:	8f 7d       	andi	r24, 0xDF	; 223
    1d68:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    1d6c:	08 95       	ret

00001d6e <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1d6e:	cf 93       	push	r28
    1d70:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	fc 01       	movw	r30, r24
    1d76:	ee 5a       	subi	r30, 0xAE	; 174
    1d78:	fe 4f       	sbci	r31, 0xFE	; 254
    1d7a:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1d7c:	fc 01       	movw	r30, r24
    1d7e:	ea 59       	subi	r30, 0x9A	; 154
    1d80:	fe 4f       	sbci	r31, 0xFE	; 254
    1d82:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1d84:	88 23       	and	r24, r24
    1d86:	61 f1       	breq	.+88     	; 0x1de0 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	88 0f       	add	r24, r24
    1d8c:	99 1f       	adc	r25, r25
    1d8e:	fc 01       	movw	r30, r24
    1d90:	e2 57       	subi	r30, 0x72	; 114
    1d92:	fe 4f       	sbci	r31, 0xFE	; 254
    1d94:	c5 91       	lpm	r28, Z+
    1d96:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1d98:	fc 01       	movw	r30, r24
    1d9a:	ec 57       	subi	r30, 0x7C	; 124
    1d9c:	fe 4f       	sbci	r31, 0xFE	; 254
    1d9e:	a5 91       	lpm	r26, Z+
    1da0:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1da2:	61 11       	cpse	r22, r1
    1da4:	09 c0       	rjmp	.+18     	; 0x1db8 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1da6:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1da8:	f8 94       	cli
		*reg &= ~bit;
    1daa:	88 81       	ld	r24, Y
    1dac:	20 95       	com	r18
    1dae:	82 23       	and	r24, r18
    1db0:	88 83       	st	Y, r24
		*out &= ~bit;
    1db2:	ec 91       	ld	r30, X
    1db4:	2e 23       	and	r18, r30
    1db6:	0b c0       	rjmp	.+22     	; 0x1dce <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1db8:	62 30       	cpi	r22, 0x02	; 2
    1dba:	61 f4       	brne	.+24     	; 0x1dd4 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1dbc:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1dbe:	f8 94       	cli
		*reg &= ~bit;
    1dc0:	88 81       	ld	r24, Y
    1dc2:	32 2f       	mov	r19, r18
    1dc4:	30 95       	com	r19
    1dc6:	83 23       	and	r24, r19
    1dc8:	88 83       	st	Y, r24
		*out |= bit;
    1dca:	ec 91       	ld	r30, X
    1dcc:	2e 2b       	or	r18, r30
    1dce:	2c 93       	st	X, r18
		SREG = oldSREG;
    1dd0:	9f bf       	out	0x3f, r25	; 63
    1dd2:	06 c0       	rjmp	.+12     	; 0x1de0 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1dd4:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1dd6:	f8 94       	cli
		*reg |= bit;
    1dd8:	e8 81       	ld	r30, Y
    1dda:	2e 2b       	or	r18, r30
    1ddc:	28 83       	st	Y, r18
		SREG = oldSREG;
    1dde:	8f bf       	out	0x3f, r24	; 63
	}
}
    1de0:	df 91       	pop	r29
    1de2:	cf 91       	pop	r28
    1de4:	08 95       	ret

00001de6 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1de6:	1f 93       	push	r17
    1de8:	cf 93       	push	r28
    1dea:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1dec:	28 2f       	mov	r18, r24
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	f9 01       	movw	r30, r18
    1df2:	e2 5c       	subi	r30, 0xC2	; 194
    1df4:	fe 4f       	sbci	r31, 0xFE	; 254
    1df6:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1df8:	f9 01       	movw	r30, r18
    1dfa:	ee 5a       	subi	r30, 0xAE	; 174
    1dfc:	fe 4f       	sbci	r31, 0xFE	; 254
    1dfe:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1e00:	f9 01       	movw	r30, r18
    1e02:	ea 59       	subi	r30, 0x9A	; 154
    1e04:	fe 4f       	sbci	r31, 0xFE	; 254
    1e06:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1e08:	cc 23       	and	r28, r28
    1e0a:	c1 f0       	breq	.+48     	; 0x1e3c <digitalWrite+0x56>
    1e0c:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1e0e:	81 11       	cpse	r24, r1
    1e10:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <turnOffPWM>

	out = portOutputRegister(port);
    1e14:	ec 2f       	mov	r30, r28
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	ee 0f       	add	r30, r30
    1e1a:	ff 1f       	adc	r31, r31
    1e1c:	ec 57       	subi	r30, 0x7C	; 124
    1e1e:	fe 4f       	sbci	r31, 0xFE	; 254
    1e20:	a5 91       	lpm	r26, Z+
    1e22:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1e24:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1e26:	f8 94       	cli

	if (val == LOW) {
    1e28:	11 11       	cpse	r17, r1
    1e2a:	04 c0       	rjmp	.+8      	; 0x1e34 <digitalWrite+0x4e>
		*out &= ~bit;
    1e2c:	8c 91       	ld	r24, X
    1e2e:	d0 95       	com	r29
    1e30:	d8 23       	and	r29, r24
    1e32:	02 c0       	rjmp	.+4      	; 0x1e38 <digitalWrite+0x52>
	} else {
		*out |= bit;
    1e34:	ec 91       	ld	r30, X
    1e36:	de 2b       	or	r29, r30
    1e38:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1e3a:	9f bf       	out	0x3f, r25	; 63
}
    1e3c:	df 91       	pop	r29
    1e3e:	cf 91       	pop	r28
    1e40:	1f 91       	pop	r17
    1e42:	08 95       	ret

00001e44 <digitalRead>:

int digitalRead(uint8_t pin)
{
    1e44:	cf 93       	push	r28
    1e46:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1e48:	28 2f       	mov	r18, r24
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	f9 01       	movw	r30, r18
    1e4e:	e2 5c       	subi	r30, 0xC2	; 194
    1e50:	fe 4f       	sbci	r31, 0xFE	; 254
    1e52:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1e54:	f9 01       	movw	r30, r18
    1e56:	ee 5a       	subi	r30, 0xAE	; 174
    1e58:	fe 4f       	sbci	r31, 0xFE	; 254
    1e5a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1e5c:	f9 01       	movw	r30, r18
    1e5e:	ea 59       	subi	r30, 0x9A	; 154
    1e60:	fe 4f       	sbci	r31, 0xFE	; 254
    1e62:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    1e64:	cc 23       	and	r28, r28
    1e66:	91 f0       	breq	.+36     	; 0x1e8c <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1e68:	81 11       	cpse	r24, r1
    1e6a:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    1e6e:	ec 2f       	mov	r30, r28
    1e70:	f0 e0       	ldi	r31, 0x00	; 0
    1e72:	ee 0f       	add	r30, r30
    1e74:	ff 1f       	adc	r31, r31
    1e76:	e6 58       	subi	r30, 0x86	; 134
    1e78:	fe 4f       	sbci	r31, 0xFE	; 254
    1e7a:	a5 91       	lpm	r26, Z+
    1e7c:	b4 91       	lpm	r27, Z
    1e7e:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    1e80:	ed 23       	and	r30, r29
    1e82:	81 e0       	ldi	r24, 0x01	; 1
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	21 f4       	brne	.+8      	; 0x1e90 <digitalRead+0x4c>
    1e88:	80 e0       	ldi	r24, 0x00	; 0
    1e8a:	02 c0       	rjmp	.+4      	; 0x1e90 <digitalRead+0x4c>
    1e8c:	80 e0       	ldi	r24, 0x00	; 0
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    1e90:	df 91       	pop	r29
    1e92:	cf 91       	pop	r28
    1e94:	08 95       	ret

00001e96 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    1e96:	cf 93       	push	r28
  uint8_t sreg = SREG;
    1e98:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    1e9a:	f8 94       	cli
  if (!initialized) {
    1e9c:	80 91 3b 03 	lds	r24, 0x033B	; 0x80033b <_ZN8SPIClass11initializedE>
    1ea0:	81 11       	cpse	r24, r1
    1ea2:	27 c0       	rjmp	.+78     	; 0x1ef2 <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    1ea4:	e0 e7       	ldi	r30, 0x70	; 112
    1ea6:	f1 e0       	ldi	r31, 0x01	; 1
    1ea8:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    1eaa:	ec e5       	ldi	r30, 0x5C	; 92
    1eac:	f1 e0       	ldi	r31, 0x01	; 1
    1eae:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    1eb0:	e8 2f       	mov	r30, r24
    1eb2:	f0 e0       	ldi	r31, 0x00	; 0
    1eb4:	ee 0f       	add	r30, r30
    1eb6:	ff 1f       	adc	r31, r31
    1eb8:	e2 57       	subi	r30, 0x72	; 114
    1eba:	fe 4f       	sbci	r31, 0xFE	; 254
    1ebc:	a5 91       	lpm	r26, Z+
    1ebe:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    1ec0:	ec 91       	ld	r30, X
    1ec2:	e9 23       	and	r30, r25
    1ec4:	21 f4       	brne	.+8      	; 0x1ece <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    1ec6:	61 e0       	ldi	r22, 0x01	; 1
    1ec8:	8a e0       	ldi	r24, 0x0A	; 10
    1eca:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    1ece:	61 e0       	ldi	r22, 0x01	; 1
    1ed0:	8a e0       	ldi	r24, 0x0A	; 10
    1ed2:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    1ed6:	8c b5       	in	r24, 0x2c	; 44
    1ed8:	80 61       	ori	r24, 0x10	; 16
    1eda:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    1edc:	8c b5       	in	r24, 0x2c	; 44
    1ede:	80 64       	ori	r24, 0x40	; 64
    1ee0:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    1ee2:	61 e0       	ldi	r22, 0x01	; 1
    1ee4:	8d e0       	ldi	r24, 0x0D	; 13
    1ee6:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <pinMode>
    pinMode(MOSI, OUTPUT);
    1eea:	61 e0       	ldi	r22, 0x01	; 1
    1eec:	8b e0       	ldi	r24, 0x0B	; 11
    1eee:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <pinMode>
  }
  initialized++; // reference count
    1ef2:	80 91 3b 03 	lds	r24, 0x033B	; 0x80033b <_ZN8SPIClass11initializedE>
    1ef6:	8f 5f       	subi	r24, 0xFF	; 255
    1ef8:	80 93 3b 03 	sts	0x033B, r24	; 0x80033b <_ZN8SPIClass11initializedE>
  SREG = sreg;
    1efc:	cf bf       	out	0x3f, r28	; 63
}
    1efe:	cf 91       	pop	r28
    1f00:	08 95       	ret

00001f02 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    1f02:	08 95       	ret

00001f04 <__unordsf2>:
    1f04:	0e 94 3d 07 	call	0xe7a	; 0xe7a <__fp_cmp>
    1f08:	88 0b       	sbc	r24, r24
    1f0a:	99 0b       	sbc	r25, r25
    1f0c:	08 95       	ret

00001f0e <__udivmodsi4>:
    1f0e:	a1 e2       	ldi	r26, 0x21	; 33
    1f10:	1a 2e       	mov	r1, r26
    1f12:	aa 1b       	sub	r26, r26
    1f14:	bb 1b       	sub	r27, r27
    1f16:	fd 01       	movw	r30, r26
    1f18:	0d c0       	rjmp	.+26     	; 0x1f34 <__udivmodsi4_ep>

00001f1a <__udivmodsi4_loop>:
    1f1a:	aa 1f       	adc	r26, r26
    1f1c:	bb 1f       	adc	r27, r27
    1f1e:	ee 1f       	adc	r30, r30
    1f20:	ff 1f       	adc	r31, r31
    1f22:	a2 17       	cp	r26, r18
    1f24:	b3 07       	cpc	r27, r19
    1f26:	e4 07       	cpc	r30, r20
    1f28:	f5 07       	cpc	r31, r21
    1f2a:	20 f0       	brcs	.+8      	; 0x1f34 <__udivmodsi4_ep>
    1f2c:	a2 1b       	sub	r26, r18
    1f2e:	b3 0b       	sbc	r27, r19
    1f30:	e4 0b       	sbc	r30, r20
    1f32:	f5 0b       	sbc	r31, r21

00001f34 <__udivmodsi4_ep>:
    1f34:	66 1f       	adc	r22, r22
    1f36:	77 1f       	adc	r23, r23
    1f38:	88 1f       	adc	r24, r24
    1f3a:	99 1f       	adc	r25, r25
    1f3c:	1a 94       	dec	r1
    1f3e:	69 f7       	brne	.-38     	; 0x1f1a <__udivmodsi4_loop>
    1f40:	60 95       	com	r22
    1f42:	70 95       	com	r23
    1f44:	80 95       	com	r24
    1f46:	90 95       	com	r25
    1f48:	9b 01       	movw	r18, r22
    1f4a:	ac 01       	movw	r20, r24
    1f4c:	bd 01       	movw	r22, r26
    1f4e:	cf 01       	movw	r24, r30
    1f50:	08 95       	ret

00001f52 <__tablejump2__>:
    1f52:	ee 0f       	add	r30, r30
    1f54:	ff 1f       	adc	r31, r31
    1f56:	05 90       	lpm	r0, Z+
    1f58:	f4 91       	lpm	r31, Z
    1f5a:	e0 2d       	mov	r30, r0
    1f5c:	09 94       	ijmp

00001f5e <__bswapsi2>:
    1f5e:	69 27       	eor	r22, r25
    1f60:	96 27       	eor	r25, r22
    1f62:	69 27       	eor	r22, r25
    1f64:	78 27       	eor	r23, r24
    1f66:	87 27       	eor	r24, r23
    1f68:	78 27       	eor	r23, r24
    1f6a:	08 95       	ret

00001f6c <_exit>:
    1f6c:	f8 94       	cli

00001f6e <__stop_program>:
    1f6e:	ff cf       	rjmp	.-2      	; 0x1f6e <__stop_program>
